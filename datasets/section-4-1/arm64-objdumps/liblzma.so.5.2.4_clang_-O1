
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003050 <.init>:
    3050:	stp	x29, x30, [sp, #-16]!
    3054:	mov	x29, sp
    3058:	bl	3570 <pthread_cond_timedwait@plt+0x10>
    305c:	ldp	x29, x30, [sp], #16
    3060:	ret

Disassembly of section .plt:

0000000000003070 <memcpy@plt-0x20>:
    3070:	stp	x16, x30, [sp, #-16]!
    3074:	adrp	x16, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    3078:	ldr	x17, [x16, #4088]
    307c:	add	x16, x16, #0xff8
    3080:	br	x17
    3084:	nop
    3088:	nop
    308c:	nop

0000000000003090 <memcpy@plt>:
    3090:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16]
    3098:	add	x16, x16, #0x0
    309c:	br	x17

00000000000030a0 <lzma_index_iter_rewind@plt>:
    30a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #8]
    30a8:	add	x16, x16, #0x8
    30ac:	br	x17

00000000000030b0 <memmove@plt>:
    30b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #16]
    30b8:	add	x16, x16, #0x10
    30bc:	br	x17

00000000000030c0 <pthread_sigmask@plt>:
    30c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #24]
    30c8:	add	x16, x16, #0x18
    30cc:	br	x17

00000000000030d0 <lzma_block_buffer_encode@plt>:
    30d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #32]
    30d8:	add	x16, x16, #0x20
    30dc:	br	x17

00000000000030e0 <lzma_check_is_supported@plt>:
    30e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #40]
    30e8:	add	x16, x16, #0x28
    30ec:	br	x17

00000000000030f0 <lzma_filter_flags_size@plt>:
    30f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #48]
    30f8:	add	x16, x16, #0x30
    30fc:	br	x17

0000000000003100 <lzma_index_buffer_encode@plt>:
    3100:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #56]
    3108:	add	x16, x16, #0x38
    310c:	br	x17

0000000000003110 <lzma_stream_flags_compare@plt>:
    3110:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #64]
    3118:	add	x16, x16, #0x40
    311c:	br	x17

0000000000003120 <lzma_block_buffer_bound@plt>:
    3120:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #72]
    3128:	add	x16, x16, #0x48
    312c:	br	x17

0000000000003130 <lzma_index_hash_decode@plt>:
    3130:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #80]
    3138:	add	x16, x16, #0x50
    313c:	br	x17

0000000000003140 <__cxa_finalize@plt>:
    3140:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #88]
    3148:	add	x16, x16, #0x58
    314c:	br	x17

0000000000003150 <clock_gettime@plt>:
    3150:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #96]
    3158:	add	x16, x16, #0x60
    315c:	br	x17

0000000000003160 <lzma_block_header_size@plt>:
    3160:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #104]
    3168:	add	x16, x16, #0x68
    316c:	br	x17

0000000000003170 <sigfillset@plt>:
    3170:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #112]
    3178:	add	x16, x16, #0x70
    317c:	br	x17

0000000000003180 <lzma_index_memusage@plt>:
    3180:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #120]
    3188:	add	x16, x16, #0x78
    318c:	br	x17

0000000000003190 <lzma_block_unpadded_size@plt>:
    3190:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #128]
    3198:	add	x16, x16, #0x80
    319c:	br	x17

00000000000031a0 <malloc@plt>:
    31a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #136]
    31a8:	add	x16, x16, #0x88
    31ac:	br	x17

00000000000031b0 <lzma_index_hash_append@plt>:
    31b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #144]
    31b8:	add	x16, x16, #0x90
    31bc:	br	x17

00000000000031c0 <lzma_crc32@plt>:
    31c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #152]
    31c8:	add	x16, x16, #0x98
    31cc:	br	x17

00000000000031d0 <lzma_index_checks@plt>:
    31d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #160]
    31d8:	add	x16, x16, #0xa0
    31dc:	br	x17

00000000000031e0 <pthread_condattr_destroy@plt>:
    31e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #168]
    31e8:	add	x16, x16, #0xa8
    31ec:	br	x17

00000000000031f0 <lzma_stream_buffer_encode@plt>:
    31f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #176]
    31f8:	add	x16, x16, #0xb0
    31fc:	br	x17

0000000000003200 <pthread_cond_signal@plt>:
    3200:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #184]
    3208:	add	x16, x16, #0xb8
    320c:	br	x17

0000000000003210 <lzma_stream_footer_encode@plt>:
    3210:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #192]
    3218:	add	x16, x16, #0xc0
    321c:	br	x17

0000000000003220 <lzma_raw_encoder_memusage@plt>:
    3220:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #200]
    3228:	add	x16, x16, #0xc8
    322c:	br	x17

0000000000003230 <memset@plt>:
    3230:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #208]
    3238:	add	x16, x16, #0xd0
    323c:	br	x17

0000000000003240 <lzma_filters_copy@plt>:
    3240:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #216]
    3248:	add	x16, x16, #0xd8
    324c:	br	x17

0000000000003250 <lzma_properties_decode@plt>:
    3250:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #224]
    3258:	add	x16, x16, #0xe0
    325c:	br	x17

0000000000003260 <calloc@plt>:
    3260:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #232]
    3268:	add	x16, x16, #0xe8
    326c:	br	x17

0000000000003270 <lzma_check_size@plt>:
    3270:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #240]
    3278:	add	x16, x16, #0xf0
    327c:	br	x17

0000000000003280 <bcmp@plt>:
    3280:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #248]
    3288:	add	x16, x16, #0xf8
    328c:	br	x17

0000000000003290 <lzma_index_hash_init@plt>:
    3290:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #256]
    3298:	add	x16, x16, #0x100
    329c:	br	x17

00000000000032a0 <lzma_crc64@plt>:
    32a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #264]
    32a8:	add	x16, x16, #0x108
    32ac:	br	x17

00000000000032b0 <pthread_mutex_init@plt>:
    32b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #272]
    32b8:	add	x16, x16, #0x110
    32bc:	br	x17

00000000000032c0 <pthread_create@plt>:
    32c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #280]
    32c8:	add	x16, x16, #0x118
    32cc:	br	x17

00000000000032d0 <__gmon_start__@plt>:
    32d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #288]
    32d8:	add	x16, x16, #0x120
    32dc:	br	x17

00000000000032e0 <pthread_join@plt>:
    32e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #296]
    32e8:	add	x16, x16, #0x128
    32ec:	br	x17

00000000000032f0 <lzma_raw_decoder_memusage@plt>:
    32f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #304]
    32f8:	add	x16, x16, #0x130
    32fc:	br	x17

0000000000003300 <sched_getaffinity@plt>:
    3300:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #312]
    3308:	add	x16, x16, #0x138
    330c:	br	x17

0000000000003310 <lzma_index_append@plt>:
    3310:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #320]
    3318:	add	x16, x16, #0x140
    331c:	br	x17

0000000000003320 <lzma_index_hash_end@plt>:
    3320:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #328]
    3328:	add	x16, x16, #0x148
    332c:	br	x17

0000000000003330 <lzma_end@plt>:
    3330:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #336]
    3338:	add	x16, x16, #0x150
    333c:	br	x17

0000000000003340 <lzma_block_header_decode@plt>:
    3340:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #344]
    3348:	add	x16, x16, #0x158
    334c:	br	x17

0000000000003350 <lzma_filter_flags_encode@plt>:
    3350:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #352]
    3358:	add	x16, x16, #0x160
    335c:	br	x17

0000000000003360 <lzma_index_file_size@plt>:
    3360:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #360]
    3368:	add	x16, x16, #0x168
    336c:	br	x17

0000000000003370 <lzma_properties_size@plt>:
    3370:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #368]
    3378:	add	x16, x16, #0x170
    337c:	br	x17

0000000000003380 <free@plt>:
    3380:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #376]
    3388:	add	x16, x16, #0x178
    338c:	br	x17

0000000000003390 <lzma_stream_header_encode@plt>:
    3390:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #384]
    3398:	add	x16, x16, #0x180
    339c:	br	x17

00000000000033a0 <pthread_cond_wait@plt>:
    33a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #392]
    33a8:	add	x16, x16, #0x188
    33ac:	br	x17

00000000000033b0 <lzma_index_init@plt>:
    33b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #400]
    33b8:	add	x16, x16, #0x190
    33bc:	br	x17

00000000000033c0 <lzma_vli_decode@plt>:
    33c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #408]
    33c8:	add	x16, x16, #0x198
    33cc:	br	x17

00000000000033d0 <pthread_condattr_init@plt>:
    33d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #416]
    33d8:	add	x16, x16, #0x1a0
    33dc:	br	x17

00000000000033e0 <lzma_index_end@plt>:
    33e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #424]
    33e8:	add	x16, x16, #0x1a8
    33ec:	br	x17

00000000000033f0 <__sched_cpucount@plt>:
    33f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #432]
    33f8:	add	x16, x16, #0x1b0
    33fc:	br	x17

0000000000003400 <lzma_properties_encode@plt>:
    3400:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #440]
    3408:	add	x16, x16, #0x1b8
    340c:	br	x17

0000000000003410 <pthread_mutex_destroy@plt>:
    3410:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #448]
    3418:	add	x16, x16, #0x1c0
    341c:	br	x17

0000000000003420 <pthread_cond_init@plt>:
    3420:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #456]
    3428:	add	x16, x16, #0x1c8
    342c:	br	x17

0000000000003430 <lzma_stream_footer_decode@plt>:
    3430:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #464]
    3438:	add	x16, x16, #0x1d0
    343c:	br	x17

0000000000003440 <lzma_lzma_preset@plt>:
    3440:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #472]
    3448:	add	x16, x16, #0x1d8
    344c:	br	x17

0000000000003450 <lzma_vli_encode@plt>:
    3450:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #480]
    3458:	add	x16, x16, #0x1e0
    345c:	br	x17

0000000000003460 <lzma_index_iter_next@plt>:
    3460:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #488]
    3468:	add	x16, x16, #0x1e8
    346c:	br	x17

0000000000003470 <sysconf@plt>:
    3470:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #496]
    3478:	add	x16, x16, #0x1f0
    347c:	br	x17

0000000000003480 <lzma_vli_size@plt>:
    3480:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #504]
    3488:	add	x16, x16, #0x1f8
    348c:	br	x17

0000000000003490 <pthread_condattr_setclock@plt>:
    3490:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #512]
    3498:	add	x16, x16, #0x200
    349c:	br	x17

00000000000034a0 <lzma_stream_encoder@plt>:
    34a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #520]
    34a8:	add	x16, x16, #0x208
    34ac:	br	x17

00000000000034b0 <lzma_index_iter_init@plt>:
    34b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #528]
    34b8:	add	x16, x16, #0x210
    34bc:	br	x17

00000000000034c0 <lzma_block_uncomp_encode@plt>:
    34c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #536]
    34c8:	add	x16, x16, #0x218
    34cc:	br	x17

00000000000034d0 <lzma_index_hash_size@plt>:
    34d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #544]
    34d8:	add	x16, x16, #0x220
    34dc:	br	x17

00000000000034e0 <lzma_index_block_count@plt>:
    34e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #552]
    34e8:	add	x16, x16, #0x228
    34ec:	br	x17

00000000000034f0 <lzma_stream_header_decode@plt>:
    34f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #560]
    34f8:	add	x16, x16, #0x230
    34fc:	br	x17

0000000000003500 <lzma_filter_flags_decode@plt>:
    3500:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #568]
    3508:	add	x16, x16, #0x238
    350c:	br	x17

0000000000003510 <lzma_index_size@plt>:
    3510:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #576]
    3518:	add	x16, x16, #0x240
    351c:	br	x17

0000000000003520 <pthread_cond_destroy@plt>:
    3520:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3524:	ldr	x17, [x16, #584]
    3528:	add	x16, x16, #0x248
    352c:	br	x17

0000000000003530 <pthread_mutex_lock@plt>:
    3530:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3534:	ldr	x17, [x16, #592]
    3538:	add	x16, x16, #0x250
    353c:	br	x17

0000000000003540 <lzma_block_header_encode@plt>:
    3540:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3544:	ldr	x17, [x16, #600]
    3548:	add	x16, x16, #0x258
    354c:	br	x17

0000000000003550 <pthread_mutex_unlock@plt>:
    3550:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3554:	ldr	x17, [x16, #608]
    3558:	add	x16, x16, #0x260
    355c:	br	x17

0000000000003560 <pthread_cond_timedwait@plt>:
    3560:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3564:	ldr	x17, [x16, #616]
    3568:	add	x16, x16, #0x268
    356c:	br	x17

Disassembly of section .text:

0000000000003570 <lzma_version_number@@XZ_5.0-0x154>:
    3570:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    3574:	ldr	x0, [x0, #3968]
    3578:	cbz	x0, 3580 <pthread_cond_timedwait@plt+0x20>
    357c:	b	32d0 <__gmon_start__@plt>
    3580:	ret
    3584:	nop
    3588:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    358c:	add	x0, x0, #0x278
    3590:	adrp	x1, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    3594:	add	x1, x1, #0x278
    3598:	cmp	x1, x0
    359c:	b.eq	35b4 <pthread_cond_timedwait@plt+0x54>  // b.none
    35a0:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    35a4:	ldr	x1, [x1, #3904]
    35a8:	cbz	x1, 35b4 <pthread_cond_timedwait@plt+0x54>
    35ac:	mov	x16, x1
    35b0:	br	x16
    35b4:	ret
    35b8:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    35bc:	add	x0, x0, #0x278
    35c0:	adrp	x1, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    35c4:	add	x1, x1, #0x278
    35c8:	sub	x1, x1, x0
    35cc:	lsr	x2, x1, #63
    35d0:	add	x1, x2, x1, asr #3
    35d4:	cmp	xzr, x1, asr #1
    35d8:	asr	x1, x1, #1
    35dc:	b.eq	35f4 <pthread_cond_timedwait@plt+0x94>  // b.none
    35e0:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    35e4:	ldr	x2, [x2, #4040]
    35e8:	cbz	x2, 35f4 <pthread_cond_timedwait@plt+0x94>
    35ec:	mov	x16, x2
    35f0:	br	x16
    35f4:	ret
    35f8:	stp	x29, x30, [sp, #-32]!
    35fc:	mov	x29, sp
    3600:	str	x19, [sp, #16]
    3604:	adrp	x19, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    3608:	ldrb	w0, [x19, #632]
    360c:	cbnz	w0, 3634 <pthread_cond_timedwait@plt+0xd4>
    3610:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    3614:	ldr	x0, [x0, #3920]
    3618:	cbz	x0, 3628 <pthread_cond_timedwait@plt+0xc8>
    361c:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1f434>
    3620:	ldr	x0, [x0, #624]
    3624:	bl	3140 <__cxa_finalize@plt>
    3628:	bl	3588 <pthread_cond_timedwait@plt+0x28>
    362c:	mov	w0, #0x1                   	// #1
    3630:	strb	w0, [x19, #632]
    3634:	ldr	x19, [sp, #16]
    3638:	ldp	x29, x30, [sp], #32
    363c:	ret
    3640:	b	35b8 <pthread_cond_timedwait@plt+0x58>
    3644:	stp	x29, x30, [sp, #-32]!
    3648:	mov	w0, #0x1e                  	// #30
    364c:	str	x19, [sp, #16]
    3650:	mov	x29, sp
    3654:	bl	3470 <sysconf@plt>
    3658:	mov	x19, x0
    365c:	mov	w0, #0x55                  	// #85
    3660:	bl	3470 <sysconf@plt>
    3664:	cmn	x0, #0x1
    3668:	mov	x8, #0xffffffffffffffff    	// #-1
    366c:	ccmp	x19, x8, #0x4, ne  // ne = any
    3670:	mul	x8, x0, x19
    3674:	ldr	x19, [sp, #16]
    3678:	csel	x0, x8, xzr, ne  // ne = any
    367c:	ldp	x29, x30, [sp], #32
    3680:	ret
    3684:	sub	sp, sp, #0x90
    3688:	mov	x2, sp
    368c:	mov	w1, #0x80                  	// #128
    3690:	mov	w0, wzr
    3694:	stp	x29, x30, [sp, #128]
    3698:	add	x29, sp, #0x80
    369c:	bl	3300 <sched_getaffinity@plt>
    36a0:	mov	w8, w0
    36a4:	mov	w0, wzr
    36a8:	cbnz	w8, 36b8 <pthread_cond_timedwait@plt+0x158>
    36ac:	mov	x1, sp
    36b0:	mov	w0, #0x80                  	// #128
    36b4:	bl	33f0 <__sched_cpucount@plt>
    36b8:	ldp	x29, x30, [sp, #128]
    36bc:	add	sp, sp, #0x90
    36c0:	ret

00000000000036c4 <lzma_version_number@@XZ_5.0>:
    36c4:	mov	w0, #0x3eca                	// #16074
    36c8:	movk	w0, #0x2fb, lsl #16
    36cc:	ret

00000000000036d0 <lzma_version_string@@XZ_5.0>:
    36d0:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    36d4:	add	x0, x0, #0xb93
    36d8:	ret
    36dc:	stp	x29, x30, [sp, #-16]!
    36e0:	cmp	x0, #0x0
    36e4:	csinc	x2, x0, xzr, ne  // ne = any
    36e8:	mov	x29, sp
    36ec:	cbz	x1, 370c <lzma_version_string@@XZ_5.0+0x3c>
    36f0:	ldr	x8, [x1]
    36f4:	cbz	x8, 370c <lzma_version_string@@XZ_5.0+0x3c>
    36f8:	ldr	x0, [x1, #16]
    36fc:	mov	w1, #0x1                   	// #1
    3700:	blr	x8
    3704:	ldp	x29, x30, [sp], #16
    3708:	ret
    370c:	mov	x0, x2
    3710:	bl	31a0 <malloc@plt>
    3714:	ldp	x29, x30, [sp], #16
    3718:	ret
    371c:	stp	x29, x30, [sp, #-32]!
    3720:	cmp	x0, #0x0
    3724:	stp	x20, x19, [sp, #16]
    3728:	csinc	x19, x0, xzr, ne  // ne = any
    372c:	mov	x29, sp
    3730:	cbz	x1, 3768 <lzma_version_string@@XZ_5.0+0x98>
    3734:	ldr	x8, [x1]
    3738:	cbz	x8, 3768 <lzma_version_string@@XZ_5.0+0x98>
    373c:	ldr	x0, [x1, #16]
    3740:	mov	w1, #0x1                   	// #1
    3744:	mov	x2, x19
    3748:	blr	x8
    374c:	mov	x20, x0
    3750:	cbz	x0, 3778 <lzma_version_string@@XZ_5.0+0xa8>
    3754:	mov	x0, x20
    3758:	mov	w1, wzr
    375c:	mov	x2, x19
    3760:	bl	3230 <memset@plt>
    3764:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    3768:	mov	w0, #0x1                   	// #1
    376c:	mov	x1, x19
    3770:	bl	3260 <calloc@plt>
    3774:	mov	x20, x0
    3778:	mov	x0, x20
    377c:	ldp	x20, x19, [sp, #16]
    3780:	ldp	x29, x30, [sp], #32
    3784:	ret
    3788:	stp	x29, x30, [sp, #-16]!
    378c:	mov	x8, x0
    3790:	mov	x29, sp
    3794:	cbz	x1, 37b4 <lzma_version_string@@XZ_5.0+0xe4>
    3798:	ldr	x9, [x1, #8]
    379c:	cbz	x9, 37b4 <lzma_version_string@@XZ_5.0+0xe4>
    37a0:	ldr	x0, [x1, #16]
    37a4:	mov	x1, x8
    37a8:	blr	x9
    37ac:	ldp	x29, x30, [sp], #16
    37b0:	ret
    37b4:	mov	x0, x8
    37b8:	bl	3380 <free@plt>
    37bc:	ldp	x29, x30, [sp], #16
    37c0:	ret
    37c4:	stp	x29, x30, [sp, #-64]!
    37c8:	str	x23, [sp, #16]
    37cc:	stp	x22, x21, [sp, #32]
    37d0:	ldr	x22, [x1]
    37d4:	ldr	x23, [x4]
    37d8:	stp	x20, x19, [sp, #48]
    37dc:	mov	x20, x1
    37e0:	sub	x9, x2, x22
    37e4:	sub	x10, x5, x23
    37e8:	cmp	x9, x10
    37ec:	add	x8, x3, x23
    37f0:	csel	x21, x9, x10, cc  // cc = lo, ul, last
    37f4:	add	x1, x0, x22
    37f8:	mov	x0, x8
    37fc:	mov	x2, x21
    3800:	mov	x29, sp
    3804:	mov	x19, x4
    3808:	bl	3090 <memcpy@plt>
    380c:	add	x8, x21, x22
    3810:	add	x9, x21, x23
    3814:	str	x8, [x20]
    3818:	str	x9, [x19]
    381c:	mov	x0, x21
    3820:	ldp	x20, x19, [sp, #48]
    3824:	ldp	x22, x21, [sp, #32]
    3828:	ldr	x23, [sp, #16]
    382c:	ldp	x29, x30, [sp], #64
    3830:	ret
    3834:	stp	x29, x30, [sp, #-48]!
    3838:	stp	x20, x19, [sp, #32]
    383c:	ldr	x8, [x2, #8]
    3840:	ldr	x9, [x0, #16]
    3844:	str	x21, [sp, #16]
    3848:	mov	x19, x2
    384c:	mov	x20, x0
    3850:	cmp	x8, x9
    3854:	mov	x21, x1
    3858:	mov	x29, sp
    385c:	b.eq	386c <lzma_version_string@@XZ_5.0+0x19c>  // b.none
    3860:	mov	x0, x20
    3864:	mov	x1, x21
    3868:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    386c:	ldr	x8, [x19, #8]
    3870:	str	x8, [x20, #16]
    3874:	ldr	x8, [x19]
    3878:	str	x8, [x20, #8]
    387c:	ldr	x8, [x19, #8]
    3880:	cbz	x8, 3898 <lzma_version_string@@XZ_5.0+0x1c8>
    3884:	mov	x0, x20
    3888:	mov	x1, x21
    388c:	mov	x2, x19
    3890:	blr	x8
    3894:	b	389c <lzma_version_string@@XZ_5.0+0x1cc>
    3898:	mov	w0, wzr
    389c:	ldp	x20, x19, [sp, #32]
    38a0:	ldr	x21, [sp, #16]
    38a4:	ldp	x29, x30, [sp], #48
    38a8:	ret
    38ac:	stp	x29, x30, [sp, #-32]!
    38b0:	stp	x20, x19, [sp, #16]
    38b4:	mov	x20, x0
    38b8:	ldr	x8, [x20, #16]!
    38bc:	mov	x29, sp
    38c0:	cbz	x8, 38f8 <lzma_version_string@@XZ_5.0+0x228>
    38c4:	mov	x19, x0
    38c8:	ldr	x8, [x0, #32]
    38cc:	ldr	x0, [x0]
    38d0:	cbz	x8, 38dc <lzma_version_string@@XZ_5.0+0x20c>
    38d4:	blr	x8
    38d8:	b	38e0 <lzma_version_string@@XZ_5.0+0x210>
    38dc:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    38e0:	mov	x8, #0xffffffffffffffff    	// #-1
    38e4:	movi	v0.2d, #0x0
    38e8:	stp	xzr, x8, [x19]
    38ec:	str	xzr, [x20, #48]
    38f0:	stp	q0, q0, [x20, #16]
    38f4:	str	q0, [x20]
    38f8:	ldp	x20, x19, [sp, #16]
    38fc:	ldp	x29, x30, [sp], #32
    3900:	ret
    3904:	stp	x29, x30, [sp, #-16]!
    3908:	ldr	x8, [x2]
    390c:	ldr	x9, [x0, #8]
    3910:	mov	x29, sp
    3914:	cmp	x8, x9
    3918:	b.ne	3940 <lzma_version_string@@XZ_5.0+0x270>  // b.any
    391c:	cmn	x8, #0x1
    3920:	b.eq	394c <lzma_version_string@@XZ_5.0+0x27c>  // b.none
    3924:	ldr	x8, [x0, #64]
    3928:	ldr	x0, [x0]
    392c:	mov	x3, x2
    3930:	mov	x2, xzr
    3934:	blr	x8
    3938:	ldp	x29, x30, [sp], #16
    393c:	ret
    3940:	mov	w0, #0xb                   	// #11
    3944:	ldp	x29, x30, [sp], #16
    3948:	ret
    394c:	mov	w0, wzr
    3950:	ldp	x29, x30, [sp], #16
    3954:	ret
    3958:	stp	x29, x30, [sp, #-32]!
    395c:	str	x19, [sp, #16]
    3960:	mov	x29, sp
    3964:	cbz	x0, 39c8 <lzma_version_string@@XZ_5.0+0x2f8>
    3968:	ldr	x8, [x0, #56]
    396c:	mov	x19, x0
    3970:	cbnz	x8, 39a0 <lzma_version_string@@XZ_5.0+0x2d0>
    3974:	ldr	x1, [x19, #48]
    3978:	mov	w0, #0x60                  	// #96
    397c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    3980:	str	x0, [x19, #56]
    3984:	cbz	x0, 39d0 <lzma_version_string@@XZ_5.0+0x300>
    3988:	mov	x8, #0xffffffffffffffff    	// #-1
    398c:	movi	v0.2d, #0x0
    3990:	stp	xzr, x8, [x0]
    3994:	stp	q0, q0, [x0, #16]
    3998:	str	q0, [x0, #48]
    399c:	str	xzr, [x0, #64]
    39a0:	ldr	x8, [x19, #56]
    39a4:	mov	w0, wzr
    39a8:	strb	wzr, [x8, #92]
    39ac:	str	wzr, [x8, #88]
    39b0:	ldr	x8, [x19, #56]
    39b4:	str	wzr, [x8, #72]
    39b8:	strb	wzr, [x8, #93]
    39bc:	str	xzr, [x19, #16]
    39c0:	str	xzr, [x19, #40]
    39c4:	b	39d4 <lzma_version_string@@XZ_5.0+0x304>
    39c8:	mov	w0, #0xb                   	// #11
    39cc:	b	39d4 <lzma_version_string@@XZ_5.0+0x304>
    39d0:	mov	w0, #0x5                   	// #5
    39d4:	ldr	x19, [sp, #16]
    39d8:	ldp	x29, x30, [sp], #32
    39dc:	ret

00000000000039e0 <lzma_code@@XZ_5.0>:
    39e0:	sub	sp, sp, #0x30
    39e4:	stp	x29, x30, [sp, #16]
    39e8:	ldr	x2, [x0]
    39ec:	mov	x8, x0
    39f0:	str	x19, [sp, #32]
    39f4:	add	x29, sp, #0x10
    39f8:	cbz	x2, 3a88 <lzma_code@@XZ_5.0+0xa8>
    39fc:	ldr	x5, [x8, #24]
    3a00:	cbz	x5, 3a94 <lzma_code@@XZ_5.0+0xb4>
    3a04:	ldr	x9, [x8, #56]
    3a08:	cbz	x9, 3a9c <lzma_code@@XZ_5.0+0xbc>
    3a0c:	cmp	w1, #0x4
    3a10:	mov	w0, #0xb                   	// #11
    3a14:	b.hi	3aa0 <lzma_code@@XZ_5.0+0xc0>  // b.pmore
    3a18:	ldr	x10, [x9, #24]
    3a1c:	cbz	x10, 3aa0 <lzma_code@@XZ_5.0+0xc0>
    3a20:	add	x10, x9, w1, uxtw
    3a24:	ldrb	w10, [x10, #88]
    3a28:	cbz	w10, 3a9c <lzma_code@@XZ_5.0+0xbc>
    3a2c:	ldr	x10, [x8, #64]
    3a30:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a34:	ldr	x10, [x8, #72]
    3a38:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a3c:	ldr	x10, [x8, #80]
    3a40:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a44:	ldr	x10, [x8, #88]
    3a48:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a4c:	ldr	x10, [x8, #96]
    3a50:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a54:	ldr	x10, [x8, #104]
    3a58:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a5c:	ldr	x10, [x8, #112]
    3a60:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a64:	ldr	x10, [x8, #120]
    3a68:	cbnz	x10, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a6c:	mov	x10, x8
    3a70:	ldr	w8, [x8, #128]
    3a74:	cbnz	w8, 3a80 <lzma_code@@XZ_5.0+0xa0>
    3a78:	ldr	w8, [x10, #132]
    3a7c:	cbz	w8, 3ab0 <lzma_code@@XZ_5.0+0xd0>
    3a80:	mov	w0, #0x8                   	// #8
    3a84:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3a88:	ldr	x9, [x8, #8]
    3a8c:	cbnz	x9, 3a9c <lzma_code@@XZ_5.0+0xbc>
    3a90:	b	39fc <lzma_code@@XZ_5.0+0x1c>
    3a94:	ldr	x9, [x8, #32]
    3a98:	cbz	x9, 3a04 <lzma_code@@XZ_5.0+0x24>
    3a9c:	mov	w0, #0xb                   	// #11
    3aa0:	ldr	x19, [sp, #32]
    3aa4:	ldp	x29, x30, [sp, #16]
    3aa8:	add	sp, sp, #0x30
    3aac:	ret
    3ab0:	ldr	w8, [x9, #72]
    3ab4:	cmp	w8, #0x5
    3ab8:	b.hi	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.pmore
    3abc:	adrp	x11, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    3ac0:	add	x11, x11, #0xb68
    3ac4:	adr	x12, 3aa0 <lzma_code@@XZ_5.0+0xc0>
    3ac8:	ldrb	w13, [x11, x8]
    3acc:	add	x12, x12, x13, lsl #2
    3ad0:	mov	w0, #0x1                   	// #1
    3ad4:	br	x12
    3ad8:	sub	w8, w1, #0x1
    3adc:	cmp	w8, #0x3
    3ae0:	b.hi	3b5c <lzma_code@@XZ_5.0+0x17c>  // b.pmore
    3ae4:	adrp	x11, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    3ae8:	add	x11, x11, #0xb6e
    3aec:	adr	x12, 3afc <lzma_code@@XZ_5.0+0x11c>
    3af0:	ldrb	w13, [x11, x8]
    3af4:	add	x12, x12, x13, lsl #2
    3af8:	br	x12
    3afc:	mov	w8, #0x1                   	// #1
    3b00:	b	3b58 <lzma_code@@XZ_5.0+0x178>
    3b04:	cmp	w1, #0x1
    3b08:	b.ne	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b0c:	b	3b30 <lzma_code@@XZ_5.0+0x150>
    3b10:	cmp	w1, #0x2
    3b14:	b.ne	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b18:	b	3b30 <lzma_code@@XZ_5.0+0x150>
    3b1c:	cmp	w1, #0x3
    3b20:	b.ne	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b24:	b	3b30 <lzma_code@@XZ_5.0+0x150>
    3b28:	cmp	w1, #0x4
    3b2c:	b.ne	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b30:	ldr	x8, [x9, #80]
    3b34:	ldr	x11, [x10, #8]
    3b38:	cmp	x8, x11
    3b3c:	b.ne	3a9c <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b40:	b	3b5c <lzma_code@@XZ_5.0+0x17c>
    3b44:	mov	w8, #0x2                   	// #2
    3b48:	b	3b58 <lzma_code@@XZ_5.0+0x178>
    3b4c:	mov	w8, #0x3                   	// #3
    3b50:	b	3b58 <lzma_code@@XZ_5.0+0x178>
    3b54:	mov	w8, #0x4                   	// #4
    3b58:	str	w8, [x9, #72]
    3b5c:	str	xzr, [x29, #24]
    3b60:	str	xzr, [sp, #8]
    3b64:	ldr	x8, [x10, #48]
    3b68:	ldr	x11, [x9, #24]
    3b6c:	ldr	x0, [x9]
    3b70:	ldr	x4, [x10, #8]
    3b74:	ldr	x7, [x10, #32]
    3b78:	add	x3, x29, #0x18
    3b7c:	add	x6, sp, #0x8
    3b80:	str	w1, [sp]
    3b84:	mov	x1, x8
    3b88:	mov	x19, x10
    3b8c:	blr	x11
    3b90:	ldr	x9, [x29, #24]
    3b94:	ldp	x8, x10, [x19]
    3b98:	ldp	x11, x12, [x19, #16]
    3b9c:	cmp	w0, #0x20
    3ba0:	add	x8, x8, x9
    3ba4:	sub	x13, x10, x9
    3ba8:	add	x10, x11, x9
    3bac:	stp	x8, x13, [x19]
    3bb0:	str	x10, [x19, #16]
    3bb4:	ldr	x10, [sp, #8]
    3bb8:	add	x11, x12, x10
    3bbc:	str	x11, [x19, #24]
    3bc0:	ldp	x8, x11, [x19, #32]
    3bc4:	sub	x8, x8, x10
    3bc8:	str	x8, [x19, #32]
    3bcc:	ldr	x8, [x19, #56]
    3bd0:	add	x11, x11, x10
    3bd4:	str	x11, [x19, #40]
    3bd8:	str	x13, [x8, #80]
    3bdc:	b.hi	3c48 <lzma_code@@XZ_5.0+0x268>  // b.pmore
    3be0:	adrp	x12, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    3be4:	mov	w11, w0
    3be8:	add	x12, x12, #0xb72
    3bec:	adr	x13, 3bfc <lzma_code@@XZ_5.0+0x21c>
    3bf0:	ldrb	w14, [x12, x11]
    3bf4:	add	x13, x13, x14, lsl #2
    3bf8:	br	x13
    3bfc:	strb	wzr, [x8, #93]
    3c00:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3c04:	orr	x9, x10, x9
    3c08:	cbnz	x9, 3bfc <lzma_code@@XZ_5.0+0x21c>
    3c0c:	ldrb	w9, [x8, #93]
    3c10:	cbz	w9, 3c6c <lzma_code@@XZ_5.0+0x28c>
    3c14:	mov	w0, #0xa                   	// #10
    3c18:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3c1c:	ldr	w9, [x8, #72]
    3c20:	cmp	w9, #0x4
    3c24:	b.hi	3c60 <lzma_code@@XZ_5.0+0x280>  // b.pmore
    3c28:	mov	w10, #0x1                   	// #1
    3c2c:	lsl	w9, w10, w9
    3c30:	mov	w10, #0x16                  	// #22
    3c34:	tst	w9, w10
    3c38:	b.eq	3c60 <lzma_code@@XZ_5.0+0x280>  // b.none
    3c3c:	str	wzr, [x8, #72]
    3c40:	strb	wzr, [x8, #93]
    3c44:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3c48:	mov	w9, #0x6                   	// #6
    3c4c:	str	w9, [x8, #72]
    3c50:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3c54:	mov	w0, wzr
    3c58:	strb	wzr, [x8, #93]
    3c5c:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>
    3c60:	mov	w9, #0x5                   	// #5
    3c64:	str	w9, [x8, #72]
    3c68:	b	3bfc <lzma_code@@XZ_5.0+0x21c>
    3c6c:	mov	w9, #0x1                   	// #1
    3c70:	strb	w9, [x8, #93]
    3c74:	b	3aa0 <lzma_code@@XZ_5.0+0xc0>

0000000000003c78 <lzma_end@@XZ_5.0>:
    3c78:	stp	x29, x30, [sp, #-32]!
    3c7c:	str	x19, [sp, #16]
    3c80:	mov	x29, sp
    3c84:	cbz	x0, 3ca8 <lzma_end@@XZ_5.0+0x30>
    3c88:	mov	x19, x0
    3c8c:	ldr	x0, [x0, #56]
    3c90:	cbz	x0, 3ca8 <lzma_end@@XZ_5.0+0x30>
    3c94:	ldr	x1, [x19, #48]
    3c98:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    3c9c:	ldp	x1, x0, [x19, #48]
    3ca0:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    3ca4:	str	xzr, [x19, #56]
    3ca8:	ldr	x19, [sp, #16]
    3cac:	ldp	x29, x30, [sp], #32
    3cb0:	ret

0000000000003cb4 <lzma_get_progress@@XZ_5.2>:
    3cb4:	stp	x29, x30, [sp, #-16]!
    3cb8:	ldr	x9, [x0, #56]
    3cbc:	mov	x29, sp
    3cc0:	ldr	x8, [x9, #40]
    3cc4:	cbz	x8, 3cd8 <lzma_get_progress@@XZ_5.2+0x24>
    3cc8:	ldr	x0, [x9]
    3ccc:	blr	x8
    3cd0:	ldp	x29, x30, [sp], #16
    3cd4:	ret
    3cd8:	ldr	x8, [x0, #16]
    3cdc:	str	x8, [x1]
    3ce0:	ldr	x8, [x0, #40]
    3ce4:	str	x8, [x2]
    3ce8:	ldp	x29, x30, [sp], #16
    3cec:	ret

0000000000003cf0 <lzma_get_check@@XZ_5.0>:
    3cf0:	stp	x29, x30, [sp, #-16]!
    3cf4:	ldr	x9, [x0, #56]
    3cf8:	mov	x29, sp
    3cfc:	ldr	x8, [x9, #48]
    3d00:	cbz	x8, 3d14 <lzma_get_check@@XZ_5.0+0x24>
    3d04:	ldr	x0, [x9]
    3d08:	blr	x8
    3d0c:	ldp	x29, x30, [sp], #16
    3d10:	ret
    3d14:	mov	w0, wzr
    3d18:	ldp	x29, x30, [sp], #16
    3d1c:	ret

0000000000003d20 <lzma_memusage@@XZ_5.0>:
    3d20:	sub	sp, sp, #0x20
    3d24:	stp	x29, x30, [sp, #16]
    3d28:	add	x29, sp, #0x10
    3d2c:	cbz	x0, 3d68 <lzma_memusage@@XZ_5.0+0x48>
    3d30:	ldr	x9, [x0, #56]
    3d34:	cbz	x9, 3d64 <lzma_memusage@@XZ_5.0+0x44>
    3d38:	ldr	x8, [x9, #56]
    3d3c:	cbz	x8, 3d64 <lzma_memusage@@XZ_5.0+0x44>
    3d40:	ldr	x0, [x9]
    3d44:	add	x1, sp, #0x8
    3d48:	mov	x2, sp
    3d4c:	mov	x3, xzr
    3d50:	blr	x8
    3d54:	ldr	x8, [sp, #8]
    3d58:	cmp	w0, #0x0
    3d5c:	csel	x0, x8, xzr, eq  // eq = none
    3d60:	b	3d68 <lzma_memusage@@XZ_5.0+0x48>
    3d64:	mov	x0, xzr
    3d68:	ldp	x29, x30, [sp, #16]
    3d6c:	add	sp, sp, #0x20
    3d70:	ret

0000000000003d74 <lzma_memlimit_get@@XZ_5.0>:
    3d74:	sub	sp, sp, #0x20
    3d78:	stp	x29, x30, [sp, #16]
    3d7c:	add	x29, sp, #0x10
    3d80:	cbz	x0, 3dbc <lzma_memlimit_get@@XZ_5.0+0x48>
    3d84:	ldr	x9, [x0, #56]
    3d88:	cbz	x9, 3db8 <lzma_memlimit_get@@XZ_5.0+0x44>
    3d8c:	ldr	x8, [x9, #56]
    3d90:	cbz	x8, 3db8 <lzma_memlimit_get@@XZ_5.0+0x44>
    3d94:	ldr	x0, [x9]
    3d98:	mov	x1, sp
    3d9c:	add	x2, sp, #0x8
    3da0:	mov	x3, xzr
    3da4:	blr	x8
    3da8:	ldr	x8, [sp, #8]
    3dac:	cmp	w0, #0x0
    3db0:	csel	x0, x8, xzr, eq  // eq = none
    3db4:	b	3dbc <lzma_memlimit_get@@XZ_5.0+0x48>
    3db8:	mov	x0, xzr
    3dbc:	ldp	x29, x30, [sp, #16]
    3dc0:	add	sp, sp, #0x20
    3dc4:	ret

0000000000003dc8 <lzma_memlimit_set@@XZ_5.0>:
    3dc8:	sub	sp, sp, #0x20
    3dcc:	stp	x29, x30, [sp, #16]
    3dd0:	add	x29, sp, #0x10
    3dd4:	cbz	x0, 3e04 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3dd8:	ldr	x9, [x0, #56]
    3ddc:	cbz	x9, 3e04 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3de0:	ldr	x8, [x9, #56]
    3de4:	cbz	x8, 3e04 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3de8:	ldr	x0, [x9]
    3dec:	cmp	x1, #0x0
    3df0:	csinc	x3, x1, xzr, ne  // ne = any
    3df4:	mov	x1, sp
    3df8:	add	x2, sp, #0x8
    3dfc:	blr	x8
    3e00:	b	3e08 <lzma_memlimit_set@@XZ_5.0+0x40>
    3e04:	mov	w0, #0xb                   	// #11
    3e08:	ldp	x29, x30, [sp, #16]
    3e0c:	add	sp, sp, #0x20
    3e10:	ret

0000000000003e14 <lzma_block_compressed_size@@XZ_5.0>:
    3e14:	stp	x29, x30, [sp, #-48]!
    3e18:	str	x21, [sp, #16]
    3e1c:	stp	x20, x19, [sp, #32]
    3e20:	mov	x29, sp
    3e24:	mov	x20, x1
    3e28:	mov	x19, x0
    3e2c:	bl	3190 <lzma_block_unpadded_size@plt>
    3e30:	cbz	x0, 3e68 <lzma_block_compressed_size@@XZ_5.0+0x54>
    3e34:	ldp	w21, w0, [x19, #4]
    3e38:	bl	3270 <lzma_check_size@plt>
    3e3c:	add	w8, w0, w21
    3e40:	cmp	x8, x20
    3e44:	b.cs	3e60 <lzma_block_compressed_size@@XZ_5.0+0x4c>  // b.hs, b.nlast
    3e48:	ldr	x9, [x19, #16]
    3e4c:	sub	x8, x20, x8
    3e50:	cmn	x9, #0x1
    3e54:	b.eq	3e70 <lzma_block_compressed_size@@XZ_5.0+0x5c>  // b.none
    3e58:	cmp	x9, x8
    3e5c:	b.eq	3e70 <lzma_block_compressed_size@@XZ_5.0+0x5c>  // b.none
    3e60:	mov	w0, #0x9                   	// #9
    3e64:	b	3e78 <lzma_block_compressed_size@@XZ_5.0+0x64>
    3e68:	mov	w0, #0xb                   	// #11
    3e6c:	b	3e78 <lzma_block_compressed_size@@XZ_5.0+0x64>
    3e70:	mov	w0, wzr
    3e74:	str	x8, [x19, #16]
    3e78:	ldp	x20, x19, [sp, #32]
    3e7c:	ldr	x21, [sp, #16]
    3e80:	ldp	x29, x30, [sp], #48
    3e84:	ret

0000000000003e88 <lzma_block_unpadded_size@@XZ_5.0>:
    3e88:	stp	x29, x30, [sp, #-32]!
    3e8c:	str	x19, [sp, #16]
    3e90:	mov	x29, sp
    3e94:	cbz	x0, 3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3e98:	ldr	w9, [x0]
    3e9c:	mov	x8, x0
    3ea0:	cmp	w9, #0x1
    3ea4:	b.ls	3eb0 <lzma_block_unpadded_size@@XZ_5.0+0x28>  // b.plast
    3ea8:	mov	x0, xzr
    3eac:	b	3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3eb0:	ldr	w9, [x8, #4]
    3eb4:	mov	x0, xzr
    3eb8:	sub	w10, w9, #0x8
    3ebc:	cmp	w10, #0x3f8
    3ec0:	b.hi	3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3ec4:	and	w10, w9, #0x3
    3ec8:	cbnz	w10, 3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3ecc:	ldr	x10, [x8, #16]
    3ed0:	mov	x0, xzr
    3ed4:	cmn	x10, #0x1
    3ed8:	b.lt	3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.tstop
    3edc:	cbz	x10, 3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3ee0:	ldr	w8, [x8, #8]
    3ee4:	cmp	w8, #0x10
    3ee8:	csetm	x0, cc  // cc = lo, ul, last
    3eec:	cmn	x10, #0x1
    3ef0:	b.eq	3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.none
    3ef4:	cmp	w8, #0xf
    3ef8:	b.hi	3f18 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3efc:	mov	w0, w8
    3f00:	add	x19, x10, x9
    3f04:	bl	3270 <lzma_check_size@plt>
    3f08:	add	x8, x19, w0, uxtw
    3f0c:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    3f10:	cmp	x8, x9
    3f14:	csel	x0, xzr, x8, hi  // hi = pmore
    3f18:	ldr	x19, [sp, #16]
    3f1c:	ldp	x29, x30, [sp], #32
    3f20:	ret

0000000000003f24 <lzma_block_total_size@@XZ_5.0>:
    3f24:	stp	x29, x30, [sp, #-16]!
    3f28:	mov	x29, sp
    3f2c:	bl	3190 <lzma_block_unpadded_size@plt>
    3f30:	cmn	x0, #0x1
    3f34:	b.eq	3f3c <lzma_block_total_size@@XZ_5.0+0x18>  // b.none
    3f38:	bl	3f44 <lzma_block_total_size@@XZ_5.0+0x20>
    3f3c:	ldp	x29, x30, [sp], #16
    3f40:	ret
    3f44:	add	x8, x0, #0x3
    3f48:	and	x0, x8, #0xfffffffffffffffc
    3f4c:	ret
    3f50:	stp	x29, x30, [sp, #-32]!
    3f54:	stp	x20, x19, [sp, #16]
    3f58:	add	x20, x0, #0x50
    3f5c:	mov	x19, x0
    3f60:	mov	x0, x20
    3f64:	mov	x29, sp
    3f68:	bl	3440 <lzma_lzma_preset@plt>
    3f6c:	tst	w0, #0xff
    3f70:	b.eq	3f7c <lzma_block_total_size@@XZ_5.0+0x58>  // b.none
    3f74:	mov	w0, #0x1                   	// #1
    3f78:	b	3f90 <lzma_block_total_size@@XZ_5.0+0x6c>
    3f7c:	mov	w0, wzr
    3f80:	mov	w8, #0x21                  	// #33
    3f84:	mov	x9, #0xffffffffffffffff    	// #-1
    3f88:	stp	x8, x20, [x19]
    3f8c:	str	x9, [x19, #16]
    3f90:	ldp	x20, x19, [sp, #16]
    3f94:	ldp	x29, x30, [sp], #32
    3f98:	ret

0000000000003f9c <lzma_filters_copy@@XZ_5.0>:
    3f9c:	stp	x29, x30, [sp, #-96]!
    3fa0:	stp	x20, x19, [sp, #80]
    3fa4:	mov	w20, #0xb                   	// #11
    3fa8:	stp	x28, x27, [sp, #16]
    3fac:	stp	x26, x25, [sp, #32]
    3fb0:	stp	x24, x23, [sp, #48]
    3fb4:	stp	x22, x21, [sp, #64]
    3fb8:	mov	x29, sp
    3fbc:	cbz	x0, 4110 <lzma_filters_copy@@XZ_5.0+0x174>
    3fc0:	mov	x21, x1
    3fc4:	cbz	x1, 4110 <lzma_filters_copy@@XZ_5.0+0x174>
    3fc8:	ldr	x8, [x0]
    3fcc:	mov	x22, x0
    3fd0:	cmn	x8, #0x1
    3fd4:	b.eq	40d0 <lzma_filters_copy@@XZ_5.0+0x134>  // b.none
    3fd8:	mov	x25, #0x1                   	// #1
    3fdc:	adrp	x27, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    3fe0:	mov	x19, x2
    3fe4:	mov	x24, xzr
    3fe8:	movk	x25, #0x4000, lsl #48
    3fec:	mov	w26, #0x18                  	// #24
    3ff0:	add	x27, x27, #0xba0
    3ff4:	mov	x9, x22
    3ff8:	b	4018 <lzma_filters_copy@@XZ_5.0+0x7c>
    3ffc:	add	x8, x21, x24, lsl #4
    4000:	str	xzr, [x8, #8]
    4004:	add	x24, x24, #0x1
    4008:	add	x9, x22, x24, lsl #4
    400c:	ldr	x8, [x9]
    4010:	cmn	x8, #0x1
    4014:	b.eq	40d4 <lzma_filters_copy@@XZ_5.0+0x138>  // b.none
    4018:	cmp	x24, #0x4
    401c:	b.eq	40e8 <lzma_filters_copy@@XZ_5.0+0x14c>  // b.none
    4020:	lsl	x10, x24, #4
    4024:	str	x8, [x21, x10]
    4028:	add	x28, x22, x10
    402c:	ldr	x8, [x28, #8]!
    4030:	cbz	x8, 3ffc <lzma_filters_copy@@XZ_5.0+0x60>
    4034:	ldr	x8, [x9]
    4038:	cmp	x8, x25
    403c:	b.ne	4048 <lzma_filters_copy@@XZ_5.0+0xac>  // b.any
    4040:	mov	x8, xzr
    4044:	b	4070 <lzma_filters_copy@@XZ_5.0+0xd4>
    4048:	ldr	x9, [x9]
    404c:	adrp	x10, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    4050:	mov	x8, xzr
    4054:	add	x10, x10, #0xbb8
    4058:	cmp	x8, #0x9
    405c:	b.eq	40b8 <lzma_filters_copy@@XZ_5.0+0x11c>  // b.none
    4060:	ldr	x11, [x10], #24
    4064:	add	x8, x8, #0x1
    4068:	cmp	x9, x11
    406c:	b.ne	4058 <lzma_filters_copy@@XZ_5.0+0xbc>  // b.any
    4070:	madd	x8, x8, x26, x27
    4074:	ldr	x23, [x8, #8]
    4078:	mov	x1, x19
    407c:	mov	x0, x23
    4080:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4084:	add	x8, x21, x24, lsl #4
    4088:	str	x0, [x8, #8]
    408c:	cbz	x0, 40a8 <lzma_filters_copy@@XZ_5.0+0x10c>
    4090:	ldr	x1, [x28]
    4094:	mov	x2, x23
    4098:	bl	3090 <memcpy@plt>
    409c:	mov	w8, wzr
    40a0:	cbz	w8, 4004 <lzma_filters_copy@@XZ_5.0+0x68>
    40a4:	b	40c4 <lzma_filters_copy@@XZ_5.0+0x128>
    40a8:	mov	w20, #0x5                   	// #5
    40ac:	mov	w8, #0x5                   	// #5
    40b0:	cbz	w8, 4004 <lzma_filters_copy@@XZ_5.0+0x68>
    40b4:	b	40c4 <lzma_filters_copy@@XZ_5.0+0x128>
    40b8:	mov	w8, #0x5                   	// #5
    40bc:	mov	w20, #0x8                   	// #8
    40c0:	cbz	w8, 4004 <lzma_filters_copy@@XZ_5.0+0x68>
    40c4:	cmp	w8, #0x5
    40c8:	b.eq	40ec <lzma_filters_copy@@XZ_5.0+0x150>  // b.none
    40cc:	b	4110 <lzma_filters_copy@@XZ_5.0+0x174>
    40d0:	mov	x24, xzr
    40d4:	add	x8, x21, x24, lsl #4
    40d8:	mov	x9, #0xffffffffffffffff    	// #-1
    40dc:	mov	w20, wzr
    40e0:	stp	x9, xzr, [x8]
    40e4:	b	4110 <lzma_filters_copy@@XZ_5.0+0x174>
    40e8:	mov	w20, #0x8                   	// #8
    40ec:	cbz	x24, 4110 <lzma_filters_copy@@XZ_5.0+0x174>
    40f0:	sub	x21, x21, #0x8
    40f4:	lsl	x22, x24, #4
    40f8:	ldr	x0, [x21, x22]
    40fc:	mov	x1, x19
    4100:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    4104:	str	xzr, [x21, x22]
    4108:	subs	x22, x22, #0x10
    410c:	b.ne	40f8 <lzma_filters_copy@@XZ_5.0+0x15c>  // b.any
    4110:	mov	w0, w20
    4114:	ldp	x20, x19, [sp, #80]
    4118:	ldp	x22, x21, [sp, #64]
    411c:	ldp	x24, x23, [sp, #48]
    4120:	ldp	x26, x25, [sp, #32]
    4124:	ldp	x28, x27, [sp, #16]
    4128:	ldp	x29, x30, [sp], #96
    412c:	ret
    4130:	sub	sp, sp, #0xe0
    4134:	stp	x29, x30, [sp, #128]
    4138:	add	x29, sp, #0x80
    413c:	stp	x20, x19, [sp, #208]
    4140:	mov	x19, x1
    4144:	mov	x20, x0
    4148:	sub	x1, x29, #0x8
    414c:	mov	x0, x2
    4150:	stp	x28, x27, [sp, #144]
    4154:	stp	x26, x25, [sp, #160]
    4158:	stp	x24, x23, [sp, #176]
    415c:	stp	x22, x21, [sp, #192]
    4160:	mov	w24, w4
    4164:	mov	x22, x3
    4168:	mov	x23, x2
    416c:	bl	4300 <lzma_filters_copy@@XZ_5.0+0x364>
    4170:	mov	w21, w0
    4174:	cbz	w0, 419c <lzma_filters_copy@@XZ_5.0+0x200>
    4178:	mov	w0, w21
    417c:	ldp	x20, x19, [sp, #208]
    4180:	ldp	x22, x21, [sp, #192]
    4184:	ldp	x24, x23, [sp, #176]
    4188:	ldp	x26, x25, [sp, #160]
    418c:	ldp	x28, x27, [sp, #144]
    4190:	ldp	x29, x30, [sp, #128]
    4194:	add	sp, sp, #0xe0
    4198:	ret
    419c:	ldur	x25, [x29, #-8]
    41a0:	tbz	w24, #0, 4224 <lzma_filters_copy@@XZ_5.0+0x288>
    41a4:	cbz	x25, 4294 <lzma_filters_copy@@XZ_5.0+0x2f8>
    41a8:	ldur	x27, [x29, #-8]
    41ac:	mov	x24, xzr
    41b0:	mov	x26, #0xffffffffffffffff    	// #-1
    41b4:	mov	x28, sp
    41b8:	b	41e0 <lzma_filters_copy@@XZ_5.0+0x244>
    41bc:	mov	w21, #0x8                   	// #8
    41c0:	mov	w8, #0x1                   	// #1
    41c4:	cbnz	w8, 4298 <lzma_filters_copy@@XZ_5.0+0x2fc>
    41c8:	add	x24, x24, #0x1
    41cc:	sub	x26, x26, #0x1
    41d0:	cmp	x27, x24
    41d4:	add	x23, x23, #0x10
    41d8:	mov	x25, x27
    41dc:	b.ls	4294 <lzma_filters_copy@@XZ_5.0+0x2f8>  // b.plast
    41e0:	ldr	x0, [x23]
    41e4:	blr	x22
    41e8:	cbz	x0, 41bc <lzma_filters_copy@@XZ_5.0+0x220>
    41ec:	ldr	x8, [x0, #8]
    41f0:	cbz	x8, 41bc <lzma_filters_copy@@XZ_5.0+0x220>
    41f4:	ldr	x9, [x23]
    41f8:	add	x10, x25, x26
    41fc:	mov	w11, #0x18                  	// #24
    4200:	madd	x10, x10, x11, x28
    4204:	str	x9, [x10]
    4208:	ldr	x9, [x0, #8]
    420c:	mov	w8, wzr
    4210:	str	x9, [x10, #8]
    4214:	ldr	x9, [x23, #8]
    4218:	str	x9, [x10, #16]
    421c:	cbz	w8, 41c8 <lzma_filters_copy@@XZ_5.0+0x22c>
    4220:	b	4298 <lzma_filters_copy@@XZ_5.0+0x2fc>
    4224:	cbz	x25, 42a4 <lzma_filters_copy@@XZ_5.0+0x308>
    4228:	ldur	x25, [x29, #-8]
    422c:	mov	x8, sp
    4230:	mov	x24, xzr
    4234:	add	x26, x8, #0x8
    4238:	b	425c <lzma_filters_copy@@XZ_5.0+0x2c0>
    423c:	mov	w21, #0x8                   	// #8
    4240:	mov	w8, #0x1                   	// #1
    4244:	cbnz	w8, 42b8 <lzma_filters_copy@@XZ_5.0+0x31c>
    4248:	add	x24, x24, #0x1
    424c:	add	x26, x26, #0x18
    4250:	cmp	x24, x25
    4254:	add	x23, x23, #0x10
    4258:	b.cs	42b4 <lzma_filters_copy@@XZ_5.0+0x318>  // b.hs, b.nlast
    425c:	ldr	x0, [x23]
    4260:	blr	x22
    4264:	cbz	x0, 423c <lzma_filters_copy@@XZ_5.0+0x2a0>
    4268:	ldr	x8, [x0, #8]
    426c:	cbz	x8, 423c <lzma_filters_copy@@XZ_5.0+0x2a0>
    4270:	ldr	x9, [x23]
    4274:	mov	w8, wzr
    4278:	stur	x9, [x26, #-8]
    427c:	ldr	x9, [x0, #8]
    4280:	str	x9, [x26]
    4284:	ldr	x9, [x23, #8]
    4288:	str	x9, [x26, #8]
    428c:	cbz	w8, 4248 <lzma_filters_copy@@XZ_5.0+0x2ac>
    4290:	b	42b8 <lzma_filters_copy@@XZ_5.0+0x31c>
    4294:	mov	w8, #0x4                   	// #4
    4298:	cmp	w8, #0x4
    429c:	b.eq	42c0 <lzma_filters_copy@@XZ_5.0+0x324>  // b.none
    42a0:	b	4178 <lzma_filters_copy@@XZ_5.0+0x1dc>
    42a4:	mov	w8, #0x7                   	// #7
    42a8:	cmp	w8, #0x7
    42ac:	b.ne	4178 <lzma_filters_copy@@XZ_5.0+0x1dc>  // b.any
    42b0:	b	42c0 <lzma_filters_copy@@XZ_5.0+0x324>
    42b4:	mov	w8, #0x7                   	// #7
    42b8:	cmp	w8, #0x7
    42bc:	b.ne	4178 <lzma_filters_copy@@XZ_5.0+0x1dc>  // b.any
    42c0:	ldur	x8, [x29, #-8]
    42c4:	mov	w9, #0x18                  	// #24
    42c8:	mov	x10, sp
    42cc:	mov	x11, #0xffffffffffffffff    	// #-1
    42d0:	madd	x8, x8, x9, x10
    42d4:	mov	x2, sp
    42d8:	mov	x0, x20
    42dc:	mov	x1, x19
    42e0:	stp	x11, xzr, [x8]
    42e4:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
    42e8:	mov	w21, w0
    42ec:	cbz	w0, 4178 <lzma_filters_copy@@XZ_5.0+0x1dc>
    42f0:	mov	x0, x20
    42f4:	mov	x1, x19
    42f8:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    42fc:	b	4178 <lzma_filters_copy@@XZ_5.0+0x1dc>
    4300:	cbz	x0, 43b0 <lzma_filters_copy@@XZ_5.0+0x414>
    4304:	ldr	x8, [x0]
    4308:	cmn	x8, #0x1
    430c:	b.eq	43b0 <lzma_filters_copy@@XZ_5.0+0x414>  // b.none
    4310:	mov	x11, #0x1                   	// #1
    4314:	adrp	x12, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    4318:	mov	x10, xzr
    431c:	mov	w9, wzr
    4320:	mov	x8, xzr
    4324:	mov	w13, #0x1                   	// #1
    4328:	movk	x11, #0x4000, lsl #48
    432c:	add	x12, x12, #0xbb8
    4330:	b	4350 <lzma_filters_copy@@XZ_5.0+0x3b4>
    4334:	mov	w14, wzr
    4338:	cbz	w14, 43c0 <lzma_filters_copy@@XZ_5.0+0x424>
    433c:	add	x8, x8, #0x1
    4340:	lsl	x14, x8, #4
    4344:	ldr	x14, [x0, x14]
    4348:	cmn	x14, #0x1
    434c:	b.eq	43b8 <lzma_filters_copy@@XZ_5.0+0x41c>  // b.none
    4350:	add	x15, x0, x8, lsl #4
    4354:	ldr	x14, [x15]
    4358:	cmp	x14, x11
    435c:	b.ne	4368 <lzma_filters_copy@@XZ_5.0+0x3cc>  // b.any
    4360:	mov	x14, xzr
    4364:	b	438c <lzma_filters_copy@@XZ_5.0+0x3f0>
    4368:	ldr	x15, [x15]
    436c:	mov	x14, xzr
    4370:	mov	x16, x12
    4374:	cmp	x14, #0x9
    4378:	b.eq	4334 <lzma_filters_copy@@XZ_5.0+0x398>  // b.none
    437c:	ldr	x17, [x16], #24
    4380:	add	x14, x14, #0x1
    4384:	cmp	x15, x17
    4388:	b.ne	4374 <lzma_filters_copy@@XZ_5.0+0x3d8>  // b.any
    438c:	tbz	w13, #0, 4334 <lzma_filters_copy@@XZ_5.0+0x398>
    4390:	subs	x13, x14, #0x2
    4394:	cset	w9, cc  // cc = lo, ul, last
    4398:	cinc	x10, x10, cc  // cc = lo, ul, last
    439c:	cmp	x13, #0x7
    43a0:	cset	w13, cc  // cc = lo, ul, last
    43a4:	mov	w14, #0x1                   	// #1
    43a8:	cbnz	w14, 433c <lzma_filters_copy@@XZ_5.0+0x3a0>
    43ac:	b	43c0 <lzma_filters_copy@@XZ_5.0+0x424>
    43b0:	mov	w0, #0xb                   	// #11
    43b4:	ret
    43b8:	cmp	x8, #0x4
    43bc:	b.ls	43c8 <lzma_filters_copy@@XZ_5.0+0x42c>  // b.plast
    43c0:	mov	w0, #0x8                   	// #8
    43c4:	ret
    43c8:	cmp	x10, #0x3
    43cc:	mov	w0, #0x8                   	// #8
    43d0:	b.hi	43e4 <lzma_filters_copy@@XZ_5.0+0x448>  // b.pmore
    43d4:	eor	w9, w9, #0x1
    43d8:	tbnz	w9, #0, 43e4 <lzma_filters_copy@@XZ_5.0+0x448>
    43dc:	mov	w0, wzr
    43e0:	str	x8, [x1]
    43e4:	ret
    43e8:	stp	x29, x30, [sp, #-48]!
    43ec:	stp	x20, x19, [sp, #32]
    43f0:	mov	x29, sp
    43f4:	mov	x20, x1
    43f8:	mov	x19, x0
    43fc:	add	x1, x29, #0x18
    4400:	mov	x0, x20
    4404:	str	x21, [sp, #16]
    4408:	bl	4300 <lzma_filters_copy@@XZ_5.0+0x364>
    440c:	cbz	w0, 4424 <lzma_filters_copy@@XZ_5.0+0x488>
    4410:	mov	x0, #0xffffffffffffffff    	// #-1
    4414:	ldp	x20, x19, [sp, #32]
    4418:	ldr	x21, [sp, #16]
    441c:	ldp	x29, x30, [sp], #48
    4420:	ret
    4424:	mov	x21, xzr
    4428:	add	x20, x20, #0x10
    442c:	ldur	x0, [x20, #-16]
    4430:	blr	x19
    4434:	cbz	x0, 4460 <lzma_filters_copy@@XZ_5.0+0x4c4>
    4438:	ldr	x8, [x0, #16]
    443c:	cbz	x8, 4468 <lzma_filters_copy@@XZ_5.0+0x4cc>
    4440:	ldur	x0, [x20, #-8]
    4444:	blr	x8
    4448:	cmn	x0, #0x1
    444c:	csel	x9, xzr, x0, eq  // eq = none
    4450:	cset	w8, eq  // eq = none
    4454:	add	x21, x9, x21
    4458:	b.ne	446c <lzma_filters_copy@@XZ_5.0+0x4d0>  // b.any
    445c:	b	4470 <lzma_filters_copy@@XZ_5.0+0x4d4>
    4460:	mov	w8, #0x1                   	// #1
    4464:	b	4470 <lzma_filters_copy@@XZ_5.0+0x4d4>
    4468:	add	x21, x21, #0x400
    446c:	mov	w8, wzr
    4470:	cbnz	w8, 4410 <lzma_filters_copy@@XZ_5.0+0x474>
    4474:	ldr	x8, [x20], #16
    4478:	cmn	x8, #0x1
    447c:	b.ne	442c <lzma_filters_copy@@XZ_5.0+0x490>  // b.any
    4480:	add	x0, x21, #0x8, lsl #12
    4484:	b	4414 <lzma_filters_copy@@XZ_5.0+0x478>

0000000000004488 <lzma_physmem@@XZ_5.0>:
    4488:	stp	x29, x30, [sp, #-16]!
    448c:	mov	x29, sp
    4490:	bl	3644 <pthread_cond_timedwait@plt+0xe4>
    4494:	ldp	x29, x30, [sp], #16
    4498:	ret

000000000000449c <lzma_index_init@@XZ_5.0>:
    449c:	stp	x29, x30, [sp, #-32]!
    44a0:	stp	x20, x19, [sp, #16]
    44a4:	mov	x29, sp
    44a8:	mov	x20, x0
    44ac:	bl	4504 <lzma_index_init@@XZ_5.0+0x68>
    44b0:	mov	x19, x0
    44b4:	cbz	x0, 44f4 <lzma_index_init@@XZ_5.0+0x58>
    44b8:	mov	w2, #0x1                   	// #1
    44bc:	mov	x0, xzr
    44c0:	mov	x1, xzr
    44c4:	mov	x3, xzr
    44c8:	mov	x4, x20
    44cc:	bl	4550 <lzma_index_init@@XZ_5.0+0xb4>
    44d0:	cbz	x0, 44e4 <lzma_index_init@@XZ_5.0+0x48>
    44d4:	mov	x1, x0
    44d8:	mov	x0, x19
    44dc:	bl	45cc <lzma_index_init@@XZ_5.0+0x130>
    44e0:	b	44f4 <lzma_index_init@@XZ_5.0+0x58>
    44e4:	mov	x0, x19
    44e8:	mov	x1, x20
    44ec:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    44f0:	mov	x19, xzr
    44f4:	mov	x0, x19
    44f8:	ldp	x20, x19, [sp, #16]
    44fc:	ldp	x29, x30, [sp], #32
    4500:	ret
    4504:	stp	x29, x30, [sp, #-32]!
    4508:	mov	x1, x0
    450c:	mov	w0, #0x50                  	// #80
    4510:	str	x19, [sp, #16]
    4514:	mov	x29, sp
    4518:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    451c:	mov	x19, x0
    4520:	cbz	x0, 4540 <lzma_index_init@@XZ_5.0+0xa4>
    4524:	mov	x0, x19
    4528:	bl	54c0 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    452c:	movi	v0.2d, #0x0
    4530:	mov	w8, #0x200                 	// #512
    4534:	stp	q0, q0, [x19, #32]
    4538:	str	x8, [x19, #64]
    453c:	str	wzr, [x19, #72]
    4540:	mov	x0, x19
    4544:	ldr	x19, [sp, #16]
    4548:	ldp	x29, x30, [sp], #32
    454c:	ret
    4550:	stp	x29, x30, [sp, #-64]!
    4554:	str	x23, [sp, #16]
    4558:	stp	x22, x21, [sp, #32]
    455c:	mov	x23, x1
    4560:	mov	x22, x0
    4564:	mov	w0, #0xa8                  	// #168
    4568:	mov	x1, x4
    456c:	stp	x20, x19, [sp, #48]
    4570:	mov	x29, sp
    4574:	mov	x20, x3
    4578:	mov	w21, w2
    457c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4580:	mov	x19, x0
    4584:	cbz	x0, 45b4 <lzma_index_init@@XZ_5.0+0x118>
    4588:	add	x0, x19, #0x38
    458c:	stp	x23, x22, [x19]
    4590:	stp	xzr, xzr, [x19, #24]
    4594:	str	xzr, [x19, #16]
    4598:	str	w21, [x19, #40]
    459c:	str	x20, [x19, #48]
    45a0:	bl	54c0 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    45a4:	mov	w8, #0xffffffff            	// #-1
    45a8:	stp	xzr, xzr, [x19, #88]
    45ac:	str	w8, [x19, #104]
    45b0:	str	xzr, [x19, #160]
    45b4:	mov	x0, x19
    45b8:	ldp	x20, x19, [sp, #48]
    45bc:	ldp	x22, x21, [sp, #32]
    45c0:	ldr	x23, [sp, #16]
    45c4:	ldp	x29, x30, [sp], #64
    45c8:	ret
    45cc:	stp	x29, x30, [sp, #-48]!
    45d0:	stp	x20, x19, [sp, #32]
    45d4:	ldr	x8, [x0, #16]
    45d8:	str	x21, [sp, #16]
    45dc:	stp	xzr, xzr, [x1, #24]
    45e0:	mov	x19, x1
    45e4:	str	x8, [x1, #16]
    45e8:	ldr	w8, [x0, #24]
    45ec:	ldr	x9, [x0]
    45f0:	mov	x20, x0
    45f4:	mov	x29, sp
    45f8:	add	w21, w8, #0x1
    45fc:	str	w21, [x0, #24]
    4600:	cbz	x9, 467c <lzma_index_init@@XZ_5.0+0x1e0>
    4604:	ldr	x8, [x20, #16]
    4608:	mov	w0, w21
    460c:	str	x19, [x8, #32]
    4610:	str	x19, [x20, #16]
    4614:	bl	54d0 <lzma_index_iter_locate@@XZ_5.0+0xf0>
    4618:	mov	w8, #0x1                   	// #1
    461c:	lsl	w8, w8, w0
    4620:	cmp	w21, w8
    4624:	b.eq	4684 <lzma_index_init@@XZ_5.0+0x1e8>  // b.none
    4628:	mov	w0, w21
    462c:	bl	54dc <lzma_index_iter_locate@@XZ_5.0+0xfc>
    4630:	add	w8, w0, #0x2
    4634:	ldr	x19, [x19, #16]
    4638:	subs	w8, w8, #0x1
    463c:	b.ne	4634 <lzma_index_init@@XZ_5.0+0x198>  // b.any
    4640:	ldr	x9, [x19, #16]
    4644:	ldr	x8, [x19, #32]
    4648:	add	x10, x9, #0x20
    464c:	cmp	x9, #0x0
    4650:	csel	x9, x20, x10, eq  // eq = none
    4654:	str	x8, [x9]
    4658:	ldr	x10, [x19, #16]
    465c:	ldr	x9, [x8, #24]
    4660:	str	x10, [x8, #16]
    4664:	str	x9, [x19, #32]
    4668:	cbz	x9, 4670 <lzma_index_init@@XZ_5.0+0x1d4>
    466c:	str	x19, [x9, #16]
    4670:	str	x19, [x8, #24]
    4674:	str	x8, [x19, #16]
    4678:	b	4684 <lzma_index_init@@XZ_5.0+0x1e8>
    467c:	stp	x19, x19, [x20]
    4680:	str	x19, [x20, #16]
    4684:	ldp	x20, x19, [sp, #32]
    4688:	ldr	x21, [sp, #16]
    468c:	ldp	x29, x30, [sp], #48
    4690:	ret

0000000000004694 <lzma_index_end@@XZ_5.0>:
    4694:	cbz	x0, 46cc <lzma_index_end@@XZ_5.0+0x38>
    4698:	stp	x29, x30, [sp, #-32]!
    469c:	adrp	x2, 4000 <lzma_filters_copy@@XZ_5.0+0x64>
    46a0:	add	x2, x2, #0x6ec
    46a4:	stp	x20, x19, [sp, #16]
    46a8:	mov	x29, sp
    46ac:	mov	x19, x1
    46b0:	mov	x20, x0
    46b4:	bl	46d0 <lzma_index_end@@XZ_5.0+0x3c>
    46b8:	mov	x0, x20
    46bc:	mov	x1, x19
    46c0:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    46c4:	ldp	x20, x19, [sp, #16]
    46c8:	ldp	x29, x30, [sp], #32
    46cc:	ret
    46d0:	stp	x29, x30, [sp, #-16]!
    46d4:	ldr	x0, [x0]
    46d8:	mov	x29, sp
    46dc:	cbz	x0, 46e4 <lzma_index_end@@XZ_5.0+0x50>
    46e0:	bl	54e8 <lzma_index_iter_locate@@XZ_5.0+0x108>
    46e4:	ldp	x29, x30, [sp], #16
    46e8:	ret
    46ec:	stp	x29, x30, [sp, #-32]!
    46f0:	stp	x20, x19, [sp, #16]
    46f4:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    46f8:	ldr	x2, [x2, #3992]
    46fc:	mov	x20, x0
    4700:	add	x0, x0, #0x38
    4704:	mov	x29, sp
    4708:	mov	x19, x1
    470c:	bl	46d0 <lzma_index_end@@XZ_5.0+0x3c>
    4710:	mov	x0, x20
    4714:	mov	x1, x19
    4718:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    471c:	ldp	x20, x19, [sp, #16]
    4720:	ldp	x29, x30, [sp], #32
    4724:	ret
    4728:	mov	x8, #0xfffffffffffffffb    	// #-5
    472c:	movk	x8, #0xfff, lsl #48
    4730:	cmp	x1, x8
    4734:	csel	x8, x1, x8, cc  // cc = lo, ul, last
    4738:	str	x8, [x0, #64]
    473c:	ret

0000000000004740 <lzma_index_memusage@@XZ_5.0>:
    4740:	add	x8, x1, #0x1ff
    4744:	mov	w9, #0x128                 	// #296
    4748:	mov	w10, #0x2060                	// #8288
    474c:	lsr	x12, x8, #9
    4750:	mul	x9, x0, x9
    4754:	mul	x10, x12, x10
    4758:	mov	x12, #0xffffffffffffff8f    	// #-113
    475c:	sub	x12, x12, x9
    4760:	cmp	x12, x10
    4764:	mov	x12, #0x9ff                 	// #2559
    4768:	movk	x12, #0xfd, lsl #16
    476c:	movk	x12, #0x8e55, lsl #32
    4770:	movk	x12, #0xfd0, lsl #48
    4774:	ccmp	x8, x12, #0x2, cs  // cs = hs, nlast
    4778:	sub	x11, x0, #0x1
    477c:	add	x9, x9, x10
    4780:	mov	w10, #0xfffffffe            	// #-2
    4784:	ccmp	x1, #0x0, #0x8, ls  // ls = plast
    4788:	ccmp	x11, x10, #0x2, ge  // ge = tcont
    478c:	add	x8, x9, #0x70
    4790:	csinv	x0, x8, xzr, ls  // ls = plast
    4794:	ret

0000000000004798 <lzma_index_memused@@XZ_5.0>:
    4798:	stp	x29, x30, [sp, #-16]!
    479c:	ldr	w8, [x0, #24]
    47a0:	ldr	x1, [x0, #48]
    47a4:	mov	x29, sp
    47a8:	mov	x0, x8
    47ac:	bl	3180 <lzma_index_memusage@plt>
    47b0:	ldp	x29, x30, [sp], #16
    47b4:	ret

00000000000047b8 <lzma_index_block_count@@XZ_5.0>:
    47b8:	ldr	x0, [x0, #48]
    47bc:	ret

00000000000047c0 <lzma_index_stream_count@@XZ_5.0>:
    47c0:	ldr	w0, [x0, #24]
    47c4:	ret

00000000000047c8 <lzma_index_size@@XZ_5.0>:
    47c8:	stp	x29, x30, [sp, #-16]!
    47cc:	ldp	x8, x1, [x0, #48]
    47d0:	mov	x29, sp
    47d4:	mov	x0, x8
    47d8:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    47dc:	ldp	x29, x30, [sp], #16
    47e0:	ret
    47e4:	stp	x29, x30, [sp, #-16]!
    47e8:	mov	x29, sp
    47ec:	bl	4928 <lzma_index_checks@@XZ_5.0+0x4c>
    47f0:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    47f4:	ldp	x29, x30, [sp], #16
    47f8:	ret

00000000000047fc <lzma_index_total_size@@XZ_5.0>:
    47fc:	ldr	x0, [x0, #40]
    4800:	ret

0000000000004804 <lzma_index_stream_size@@XZ_5.0>:
    4804:	stp	x29, x30, [sp, #-32]!
    4808:	str	x19, [sp, #16]
    480c:	ldp	x19, x8, [x0, #40]
    4810:	ldr	x1, [x0, #56]
    4814:	mov	x29, sp
    4818:	mov	x0, x8
    481c:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    4820:	add	x8, x19, x0
    4824:	ldr	x19, [sp, #16]
    4828:	add	x0, x8, #0x18
    482c:	ldp	x29, x30, [sp], #32
    4830:	ret

0000000000004834 <lzma_index_file_size@@XZ_5.0>:
    4834:	stp	x29, x30, [sp, #-16]!
    4838:	ldr	x8, [x0, #16]
    483c:	mov	x29, sp
    4840:	ldr	x9, [x8, #72]
    4844:	ldr	x0, [x8, #8]
    4848:	cbz	x9, 485c <lzma_index_file_size@@XZ_5.0+0x28>
    484c:	ldr	x10, [x9, #56]
    4850:	add	x9, x9, x10, lsl #4
    4854:	ldr	x1, [x9, #72]
    4858:	b	4860 <lzma_index_file_size@@XZ_5.0+0x2c>
    485c:	mov	x1, xzr
    4860:	ldp	x2, x3, [x8, #88]
    4864:	ldr	x4, [x8, #160]
    4868:	bl	4874 <lzma_index_file_size@@XZ_5.0+0x40>
    486c:	ldp	x29, x30, [sp], #16
    4870:	ret
    4874:	stp	x29, x30, [sp, #-48]!
    4878:	str	x21, [sp, #16]
    487c:	add	x21, x0, x4
    4880:	mov	x0, x1
    4884:	stp	x20, x19, [sp, #32]
    4888:	mov	x29, sp
    488c:	mov	x19, x3
    4890:	mov	x20, x2
    4894:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    4898:	add	x8, x21, x0
    489c:	adds	x21, x8, #0x18
    48a0:	b.mi	48c0 <lzma_index_file_size@@XZ_5.0+0x8c>  // b.first
    48a4:	mov	x0, x20
    48a8:	mov	x1, x19
    48ac:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    48b0:	add	x8, x0, x21
    48b4:	cmp	x8, #0x0
    48b8:	csinv	x0, x8, xzr, ge  // ge = tcont
    48bc:	b	48c4 <lzma_index_file_size@@XZ_5.0+0x90>
    48c0:	mov	x0, #0xffffffffffffffff    	// #-1
    48c4:	ldp	x20, x19, [sp, #32]
    48c8:	ldr	x21, [sp, #16]
    48cc:	ldp	x29, x30, [sp], #48
    48d0:	ret

00000000000048d4 <lzma_index_uncompressed_size@@XZ_5.0>:
    48d4:	ldr	x0, [x0, #32]
    48d8:	ret

00000000000048dc <lzma_index_checks@@XZ_5.0>:
    48dc:	ldr	x8, [x0, #16]
    48e0:	ldr	w0, [x0, #72]
    48e4:	ldr	w9, [x8, #104]
    48e8:	cmn	w9, #0x1
    48ec:	b.eq	4900 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    48f0:	ldr	w8, [x8, #120]
    48f4:	mov	w9, #0x1                   	// #1
    48f8:	lsl	w8, w9, w8
    48fc:	orr	w0, w8, w0
    4900:	ret
    4904:	stp	x29, x30, [sp, #-16]!
    4908:	ldp	x8, x1, [x0, #48]
    490c:	mov	x29, sp
    4910:	mov	x0, x8
    4914:	bl	4928 <lzma_index_checks@@XZ_5.0+0x4c>
    4918:	neg	w8, w0
    491c:	and	w0, w8, #0x3
    4920:	ldp	x29, x30, [sp], #16
    4924:	ret
    4928:	stp	x29, x30, [sp, #-32]!
    492c:	str	x19, [sp, #16]
    4930:	mov	x29, sp
    4934:	mov	x19, x1
    4938:	bl	3480 <lzma_vli_size@plt>
    493c:	add	w8, w0, #0x1
    4940:	add	x8, x19, x8
    4944:	ldr	x19, [sp, #16]
    4948:	add	x0, x8, #0x4
    494c:	ldp	x29, x30, [sp], #32
    4950:	ret

0000000000004954 <lzma_index_stream_flags@@XZ_5.0>:
    4954:	stp	x29, x30, [sp, #-32]!
    4958:	stp	x20, x19, [sp, #16]
    495c:	mov	x20, x0
    4960:	mov	w0, #0xb                   	// #11
    4964:	mov	x29, sp
    4968:	cbz	x20, 49a4 <lzma_index_stream_flags@@XZ_5.0+0x50>
    496c:	mov	x19, x1
    4970:	cbz	x1, 49a4 <lzma_index_stream_flags@@XZ_5.0+0x50>
    4974:	mov	x0, x19
    4978:	mov	x1, x19
    497c:	bl	3110 <lzma_stream_flags_compare@plt>
    4980:	cbnz	w0, 49a4 <lzma_index_stream_flags@@XZ_5.0+0x50>
    4984:	ldr	x8, [x20, #16]
    4988:	ldr	x9, [x19, #48]
    498c:	ldp	q1, q0, [x19, #16]
    4990:	ldr	q2, [x19]
    4994:	str	x9, [x8, #152]
    4998:	stur	q0, [x8, #136]
    499c:	stur	q1, [x8, #120]
    49a0:	stur	q2, [x8, #104]
    49a4:	ldp	x20, x19, [sp, #16]
    49a8:	ldp	x29, x30, [sp], #32
    49ac:	ret

00000000000049b0 <lzma_index_stream_padding@@XZ_5.0>:
    49b0:	stp	x29, x30, [sp, #-48]!
    49b4:	mov	x8, x0
    49b8:	mov	w0, #0xb                   	// #11
    49bc:	str	x21, [sp, #16]
    49c0:	stp	x20, x19, [sp, #32]
    49c4:	mov	x29, sp
    49c8:	cbz	x8, 4a08 <lzma_index_stream_padding@@XZ_5.0+0x58>
    49cc:	mov	x19, x1
    49d0:	and	x9, x1, #0x8000000000000003
    49d4:	cbnz	x9, 4a08 <lzma_index_stream_padding@@XZ_5.0+0x58>
    49d8:	ldr	x20, [x8, #16]
    49dc:	mov	x0, x8
    49e0:	ldr	x21, [x20, #160]
    49e4:	str	xzr, [x20, #160]
    49e8:	bl	3360 <lzma_index_file_size@plt>
    49ec:	add	x8, x0, x19
    49f0:	mov	w9, #0x9                   	// #9
    49f4:	cmp	x8, #0x0
    49f8:	asr	x8, x8, #63
    49fc:	csel	x10, x21, x19, lt  // lt = tstop
    4a00:	and	w0, w8, w9
    4a04:	str	x10, [x20, #160]
    4a08:	ldp	x20, x19, [sp, #32]
    4a0c:	ldr	x21, [sp, #16]
    4a10:	ldp	x29, x30, [sp], #48
    4a14:	ret

0000000000004a18 <lzma_index_append@@XZ_5.0>:
    4a18:	stp	x29, x30, [sp, #-96]!
    4a1c:	stp	x20, x19, [sp, #80]
    4a20:	mov	x19, x0
    4a24:	mov	w0, #0xb                   	// #11
    4a28:	stp	x28, x27, [sp, #16]
    4a2c:	stp	x26, x25, [sp, #32]
    4a30:	stp	x24, x23, [sp, #48]
    4a34:	stp	x22, x21, [sp, #64]
    4a38:	mov	x29, sp
    4a3c:	tbnz	x3, #63, 4bc4 <lzma_index_append@@XZ_5.0+0x1ac>
    4a40:	cbz	x19, 4bc4 <lzma_index_append@@XZ_5.0+0x1ac>
    4a44:	mov	x9, #0xfffffffffffffff7    	// #-9
    4a48:	sub	x8, x2, #0x5
    4a4c:	movk	x9, #0x7fff, lsl #48
    4a50:	mov	x21, x2
    4a54:	cmp	x8, x9
    4a58:	b.hi	4bc4 <lzma_index_append@@XZ_5.0+0x1ac>  // b.pmore
    4a5c:	ldr	x26, [x19, #16]
    4a60:	mov	x20, x3
    4a64:	mov	x23, x1
    4a68:	ldr	x22, [x26, #72]
    4a6c:	cbz	x22, 4a98 <lzma_index_append@@XZ_5.0+0x80>
    4a70:	ldr	x8, [x22, #56]
    4a74:	add	x8, x22, x8, lsl #4
    4a78:	ldr	x0, [x8, #72]
    4a7c:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    4a80:	mov	x24, x0
    4a84:	cbz	x22, 4aa0 <lzma_index_append@@XZ_5.0+0x88>
    4a88:	ldr	x8, [x22, #56]
    4a8c:	add	x8, x22, x8, lsl #4
    4a90:	ldr	x28, [x8, #64]
    4a94:	b	4aa4 <lzma_index_append@@XZ_5.0+0x8c>
    4a98:	mov	x24, xzr
    4a9c:	cbnz	x22, 4a88 <lzma_index_append@@XZ_5.0+0x70>
    4aa0:	mov	x28, xzr
    4aa4:	mov	x0, x21
    4aa8:	bl	3480 <lzma_vli_size@plt>
    4aac:	mov	w25, w0
    4ab0:	mov	x0, x20
    4ab4:	bl	3480 <lzma_vli_size@plt>
    4ab8:	ldp	x8, x9, [x26, #88]
    4abc:	add	w27, w0, w25
    4ac0:	ldr	x0, [x26, #8]
    4ac4:	ldr	x4, [x26, #160]
    4ac8:	add	x25, x24, x21
    4acc:	add	x2, x8, #0x1
    4ad0:	add	x3, x9, x27
    4ad4:	mov	x1, x25
    4ad8:	bl	4874 <lzma_index_file_size@@XZ_5.0+0x40>
    4adc:	cmn	x0, #0x1
    4ae0:	b.eq	4b00 <lzma_index_append@@XZ_5.0+0xe8>  // b.none
    4ae4:	ldp	x8, x9, [x19, #48]
    4ae8:	add	x0, x8, #0x1
    4aec:	add	x1, x9, x27
    4af0:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    4af4:	mov	x8, #0x400000000           	// #17179869184
    4af8:	cmp	x0, x8
    4afc:	b.ls	4b08 <lzma_index_append@@XZ_5.0+0xf0>  // b.plast
    4b00:	mov	w0, #0x9                   	// #9
    4b04:	b	4bc4 <lzma_index_append@@XZ_5.0+0x1ac>
    4b08:	cbz	x22, 4b24 <lzma_index_append@@XZ_5.0+0x10c>
    4b0c:	ldp	x9, x8, [x22, #48]
    4b10:	add	x8, x8, #0x1
    4b14:	cmp	x8, x9
    4b18:	b.cs	4b24 <lzma_index_append@@XZ_5.0+0x10c>  // b.hs, b.nlast
    4b1c:	str	x8, [x22, #56]
    4b20:	b	4b6c <lzma_index_append@@XZ_5.0+0x154>
    4b24:	ldr	x8, [x19, #64]
    4b28:	mov	x1, x23
    4b2c:	lsl	x8, x8, #4
    4b30:	add	x0, x8, #0x40
    4b34:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4b38:	cbz	x0, 4bc0 <lzma_index_append@@XZ_5.0+0x1a8>
    4b3c:	ldr	x8, [x19, #64]
    4b40:	mov	w9, #0x200                 	// #512
    4b44:	mov	x22, x0
    4b48:	mov	x1, x22
    4b4c:	stp	x8, xzr, [x0, #48]
    4b50:	str	x9, [x19, #64]
    4b54:	stp	x28, x24, [x0]
    4b58:	ldr	x8, [x26, #88]
    4b5c:	add	x0, x26, #0x38
    4b60:	add	x8, x8, #0x1
    4b64:	str	x8, [x22, #40]
    4b68:	bl	45cc <lzma_index_init@@XZ_5.0+0x130>
    4b6c:	ldr	x8, [x22, #56]
    4b70:	add	x9, x28, x20
    4b74:	mov	x0, x21
    4b78:	add	x8, x22, x8, lsl #4
    4b7c:	stp	x9, x25, [x8, #64]
    4b80:	ldp	x8, x9, [x26, #88]
    4b84:	add	x8, x8, #0x1
    4b88:	add	x9, x9, x27
    4b8c:	stp	x8, x9, [x26, #88]
    4b90:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    4b94:	ldp	x10, x9, [x19, #32]
    4b98:	ldp	x11, x12, [x19, #48]
    4b9c:	mov	x8, x0
    4ba0:	mov	w0, wzr
    4ba4:	add	x8, x9, x8
    4ba8:	add	x9, x10, x20
    4bac:	add	x10, x11, #0x1
    4bb0:	add	x11, x12, x27
    4bb4:	stp	x9, x8, [x19, #32]
    4bb8:	stp	x10, x11, [x19, #48]
    4bbc:	b	4bc4 <lzma_index_append@@XZ_5.0+0x1ac>
    4bc0:	mov	w0, #0x5                   	// #5
    4bc4:	ldp	x20, x19, [sp, #80]
    4bc8:	ldp	x22, x21, [sp, #64]
    4bcc:	ldp	x24, x23, [sp, #48]
    4bd0:	ldp	x26, x25, [sp, #32]
    4bd4:	ldp	x28, x27, [sp, #16]
    4bd8:	ldp	x29, x30, [sp], #96
    4bdc:	ret
    4be0:	add	x8, x0, #0x3
    4be4:	and	x0, x8, #0xfffffffffffffffc
    4be8:	ret

0000000000004bec <lzma_index_cat@@XZ_5.0>:
    4bec:	sub	sp, sp, #0x80
    4bf0:	stp	x29, x30, [sp, #48]
    4bf4:	str	x25, [sp, #64]
    4bf8:	stp	x24, x23, [sp, #80]
    4bfc:	stp	x22, x21, [sp, #96]
    4c00:	stp	x20, x19, [sp, #112]
    4c04:	add	x29, sp, #0x30
    4c08:	mov	x19, x2
    4c0c:	mov	x20, x1
    4c10:	mov	x21, x0
    4c14:	bl	3360 <lzma_index_file_size@plt>
    4c18:	mov	x22, x0
    4c1c:	mov	x0, x20
    4c20:	bl	3360 <lzma_index_file_size@plt>
    4c24:	cmn	x0, x22
    4c28:	b.mi	4d20 <lzma_index_cat@@XZ_5.0+0x134>  // b.first
    4c2c:	ldr	x8, [x21, #32]
    4c30:	ldr	x9, [x20, #32]
    4c34:	cmn	x9, x8
    4c38:	b.mi	4d20 <lzma_index_cat@@XZ_5.0+0x134>  // b.first
    4c3c:	ldp	x0, x1, [x21, #48]
    4c40:	bl	4928 <lzma_index_checks@@XZ_5.0+0x4c>
    4c44:	ldp	x8, x1, [x20, #48]
    4c48:	mov	x23, x0
    4c4c:	mov	x0, x8
    4c50:	bl	4928 <lzma_index_checks@@XZ_5.0+0x4c>
    4c54:	add	x0, x0, x23
    4c58:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    4c5c:	mov	x8, #0x400000000           	// #17179869184
    4c60:	cmp	x0, x8
    4c64:	b.hi	4d20 <lzma_index_cat@@XZ_5.0+0x134>  // b.pmore
    4c68:	ldr	x25, [x21, #16]
    4c6c:	ldr	x23, [x25, #72]
    4c70:	cbz	x23, 4d40 <lzma_index_cat@@XZ_5.0+0x154>
    4c74:	ldp	x9, x8, [x23, #48]
    4c78:	add	x8, x8, #0x1
    4c7c:	cmp	x8, x9
    4c80:	b.cs	4d40 <lzma_index_cat@@XZ_5.0+0x154>  // b.hs, b.nlast
    4c84:	lsl	x8, x8, #4
    4c88:	add	x0, x8, #0x40
    4c8c:	mov	x1, x19
    4c90:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4c94:	cbz	x0, 4dc4 <lzma_index_cat@@XZ_5.0+0x1d8>
    4c98:	ldr	x8, [x23, #32]
    4c9c:	ldp	q1, q0, [x23]
    4ca0:	mov	x24, x0
    4ca4:	add	x1, x23, #0x40
    4ca8:	str	x8, [x0, #32]
    4cac:	stp	q1, q0, [x0]
    4cb0:	ldr	x8, [x23, #56]
    4cb4:	add	x8, x8, #0x1
    4cb8:	str	x8, [x0, #48]
    4cbc:	ldr	x9, [x23, #56]
    4cc0:	lsl	x2, x8, #4
    4cc4:	str	x9, [x0, #56]
    4cc8:	ldr	x9, [x23, #40]
    4ccc:	add	x0, x0, #0x40
    4cd0:	str	x9, [x24, #40]
    4cd4:	bl	3090 <memcpy@plt>
    4cd8:	ldr	x8, [x23, #16]
    4cdc:	cbz	x8, 4ce4 <lzma_index_cat@@XZ_5.0+0xf8>
    4ce0:	str	x24, [x8, #32]
    4ce4:	ldr	x8, [x25, #64]
    4ce8:	cmp	x8, x23
    4cec:	b.ne	4cf4 <lzma_index_cat@@XZ_5.0+0x108>  // b.any
    4cf0:	stp	x24, x24, [x25, #56]
    4cf4:	ldr	x8, [x25, #72]
    4cf8:	cmp	x8, x23
    4cfc:	b.ne	4d04 <lzma_index_cat@@XZ_5.0+0x118>  // b.any
    4d00:	str	x24, [x25, #72]
    4d04:	mov	x0, x23
    4d08:	mov	x1, x19
    4d0c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    4d10:	mov	w8, wzr
    4d14:	mov	w0, #0x9                   	// #9
    4d18:	cbnz	w8, 4d48 <lzma_index_cat@@XZ_5.0+0x15c>
    4d1c:	b	4d44 <lzma_index_cat@@XZ_5.0+0x158>
    4d20:	mov	w0, #0x9                   	// #9
    4d24:	ldp	x20, x19, [sp, #112]
    4d28:	ldp	x22, x21, [sp, #96]
    4d2c:	ldp	x24, x23, [sp, #80]
    4d30:	ldr	x25, [sp, #64]
    4d34:	ldp	x29, x30, [sp, #48]
    4d38:	add	sp, sp, #0x80
    4d3c:	ret
    4d40:	mov	w0, #0x9                   	// #9
    4d44:	mov	w8, wzr
    4d48:	cbnz	w8, 4d24 <lzma_index_cat@@XZ_5.0+0x138>
    4d4c:	ldr	x8, [x21, #32]
    4d50:	ldr	x9, [x21, #48]
    4d54:	ldr	w10, [x21, #24]
    4d58:	ldr	x1, [x20]
    4d5c:	add	x0, sp, #0x8
    4d60:	stp	x8, x22, [sp, #8]
    4d64:	str	x9, [sp, #24]
    4d68:	str	w10, [sp, #32]
    4d6c:	str	x21, [sp, #40]
    4d70:	bl	4dd4 <lzma_index_cat@@XZ_5.0+0x1e8>
    4d74:	ldp	x8, x9, [x20, #32]
    4d78:	ldp	x10, x11, [x21, #32]
    4d7c:	ldp	x12, x13, [x20, #48]
    4d80:	ldp	x14, x15, [x21, #48]
    4d84:	mov	x0, x21
    4d88:	add	x8, x10, x8
    4d8c:	add	x9, x11, x9
    4d90:	add	x10, x14, x12
    4d94:	add	x11, x15, x13
    4d98:	stp	x8, x9, [x21, #32]
    4d9c:	stp	x10, x11, [x21, #48]
    4da0:	bl	31d0 <lzma_index_checks@plt>
    4da4:	ldr	w8, [x20, #72]
    4da8:	mov	x1, x19
    4dac:	orr	w8, w8, w0
    4db0:	mov	x0, x20
    4db4:	str	w8, [x21, #72]
    4db8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    4dbc:	mov	w0, wzr
    4dc0:	b	4d24 <lzma_index_cat@@XZ_5.0+0x138>
    4dc4:	mov	w0, #0x5                   	// #5
    4dc8:	mov	w8, #0x1                   	// #1
    4dcc:	cbnz	w8, 4d48 <lzma_index_cat@@XZ_5.0+0x15c>
    4dd0:	b	4d44 <lzma_index_cat@@XZ_5.0+0x158>
    4dd4:	stp	x29, x30, [sp, #-48]!
    4dd8:	str	x21, [sp, #16]
    4ddc:	stp	x20, x19, [sp, #32]
    4de0:	mov	x21, x1
    4de4:	ldr	x1, [x1, #24]
    4de8:	ldr	x19, [x21, #32]
    4dec:	mov	x20, x0
    4df0:	mov	x29, sp
    4df4:	cbz	x1, 4e00 <lzma_index_cat@@XZ_5.0+0x214>
    4df8:	mov	x0, x20
    4dfc:	bl	4dd4 <lzma_index_cat@@XZ_5.0+0x1e8>
    4e00:	ldr	x8, [x20]
    4e04:	ldp	x9, x10, [x21]
    4e08:	mov	x1, x21
    4e0c:	add	x8, x9, x8
    4e10:	str	x8, [x21]
    4e14:	ldr	x8, [x20, #8]
    4e18:	ldr	w9, [x21, #40]
    4e1c:	add	x8, x10, x8
    4e20:	str	x8, [x21, #8]
    4e24:	ldr	w8, [x20, #24]
    4e28:	add	w8, w9, w8
    4e2c:	str	w8, [x21, #40]
    4e30:	ldr	x8, [x20, #16]
    4e34:	ldr	x9, [x21, #48]
    4e38:	add	x8, x9, x8
    4e3c:	str	x8, [x21, #48]
    4e40:	ldr	x0, [x20, #32]
    4e44:	bl	45cc <lzma_index_init@@XZ_5.0+0x130>
    4e48:	cbz	x19, 4e58 <lzma_index_cat@@XZ_5.0+0x26c>
    4e4c:	mov	x0, x20
    4e50:	mov	x1, x19
    4e54:	bl	4dd4 <lzma_index_cat@@XZ_5.0+0x1e8>
    4e58:	ldp	x20, x19, [sp, #32]
    4e5c:	ldr	x21, [sp, #16]
    4e60:	ldp	x29, x30, [sp], #48
    4e64:	ret

0000000000004e68 <lzma_index_dup@@XZ_5.0>:
    4e68:	stp	x29, x30, [sp, #-48]!
    4e6c:	str	x21, [sp, #16]
    4e70:	mov	x21, x0
    4e74:	mov	x0, x1
    4e78:	stp	x20, x19, [sp, #32]
    4e7c:	mov	x29, sp
    4e80:	mov	x20, x1
    4e84:	bl	4504 <lzma_index_init@@XZ_5.0+0x68>
    4e88:	mov	x19, x0
    4e8c:	cbz	x0, 4f08 <lzma_index_dup@@XZ_5.0+0xa0>
    4e90:	ldr	x8, [x21, #32]
    4e94:	str	x8, [x19, #32]
    4e98:	ldr	x8, [x21, #40]
    4e9c:	str	x8, [x19, #40]
    4ea0:	ldr	x8, [x21, #48]
    4ea4:	str	x8, [x19, #48]
    4ea8:	ldr	x8, [x21, #56]
    4eac:	str	x8, [x19, #56]
    4eb0:	ldr	x21, [x21, #8]
    4eb4:	mov	x0, x21
    4eb8:	mov	x1, x20
    4ebc:	bl	4f1c <lzma_index_dup@@XZ_5.0+0xb4>
    4ec0:	cbz	x0, 4ee8 <lzma_index_dup@@XZ_5.0+0x80>
    4ec4:	mov	x1, x0
    4ec8:	mov	x0, x19
    4ecc:	bl	45cc <lzma_index_init@@XZ_5.0+0x130>
    4ed0:	mov	x0, x21
    4ed4:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    4ed8:	mov	x21, x0
    4edc:	mov	w8, #0x1                   	// #1
    4ee0:	cbnz	w8, 4efc <lzma_index_dup@@XZ_5.0+0x94>
    4ee4:	b	4f04 <lzma_index_dup@@XZ_5.0+0x9c>
    4ee8:	mov	x0, x19
    4eec:	mov	x1, x20
    4ef0:	bl	33e0 <lzma_index_end@plt>
    4ef4:	mov	w8, wzr
    4ef8:	cbz	w8, 4f04 <lzma_index_dup@@XZ_5.0+0x9c>
    4efc:	cbnz	x21, 4eb4 <lzma_index_dup@@XZ_5.0+0x4c>
    4f00:	b	4f08 <lzma_index_dup@@XZ_5.0+0xa0>
    4f04:	mov	x19, xzr
    4f08:	mov	x0, x19
    4f0c:	ldp	x20, x19, [sp, #32]
    4f10:	ldr	x21, [sp, #16]
    4f14:	ldp	x29, x30, [sp], #48
    4f18:	ret
    4f1c:	stp	x29, x30, [sp, #-64]!
    4f20:	stp	x22, x21, [sp, #32]
    4f24:	stp	x20, x19, [sp, #48]
    4f28:	ldr	x8, [x0, #88]
    4f2c:	mov	x9, #0xfffffffffffffffb    	// #-5
    4f30:	movk	x9, #0xfff, lsl #48
    4f34:	str	x23, [sp, #16]
    4f38:	cmp	x8, x9
    4f3c:	mov	x29, sp
    4f40:	b.ls	4f4c <lzma_index_dup@@XZ_5.0+0xe4>  // b.plast
    4f44:	mov	x19, xzr
    4f48:	b	5028 <lzma_index_dup@@XZ_5.0+0x1c0>
    4f4c:	mov	x20, x0
    4f50:	mov	x22, x1
    4f54:	ldr	x0, [x0, #8]
    4f58:	ldr	x1, [x20]
    4f5c:	ldr	w2, [x20, #40]
    4f60:	ldr	x3, [x20, #48]
    4f64:	mov	x4, x22
    4f68:	bl	4550 <lzma_index_init@@XZ_5.0+0xb4>
    4f6c:	mov	x19, x0
    4f70:	cbz	x0, 5028 <lzma_index_dup@@XZ_5.0+0x1c0>
    4f74:	ldp	x8, x9, [x20, #88]
    4f78:	stp	x8, x9, [x19, #88]
    4f7c:	ldr	x9, [x20, #152]
    4f80:	ldur	q0, [x20, #136]
    4f84:	ldur	q1, [x20, #120]
    4f88:	ldur	q2, [x20, #104]
    4f8c:	str	x9, [x19, #152]
    4f90:	stur	q0, [x19, #136]
    4f94:	stur	q1, [x19, #120]
    4f98:	stur	q2, [x19, #104]
    4f9c:	ldr	x9, [x20, #160]
    4fa0:	str	x9, [x19, #160]
    4fa4:	ldr	x9, [x20, #64]
    4fa8:	cbz	x9, 5028 <lzma_index_dup@@XZ_5.0+0x1c0>
    4fac:	lsl	x8, x8, #4
    4fb0:	add	x0, x8, #0x40
    4fb4:	mov	x1, x22
    4fb8:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4fbc:	cbz	x0, 5040 <lzma_index_dup@@XZ_5.0+0x1d8>
    4fc0:	mov	w8, #0x1                   	// #1
    4fc4:	stp	xzr, xzr, [x0]
    4fc8:	str	x8, [x0, #40]
    4fcc:	ldr	x8, [x20, #88]
    4fd0:	mov	x21, x0
    4fd4:	mov	x22, xzr
    4fd8:	add	x23, x0, #0x40
    4fdc:	sub	x9, x8, #0x1
    4fe0:	stp	x8, x9, [x0, #48]
    4fe4:	ldr	x20, [x20, #64]
    4fe8:	ldr	x8, [x20, #56]
    4fec:	add	x0, x23, x22, lsl #4
    4ff0:	add	x1, x20, #0x40
    4ff4:	lsl	x8, x8, #4
    4ff8:	add	x2, x8, #0x10
    4ffc:	bl	3090 <memcpy@plt>
    5000:	ldr	x8, [x20, #56]
    5004:	mov	x0, x20
    5008:	add	x8, x22, x8
    500c:	add	x22, x8, #0x1
    5010:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    5014:	mov	x20, x0
    5018:	cbnz	x0, 4fe8 <lzma_index_dup@@XZ_5.0+0x180>
    501c:	add	x0, x19, #0x38
    5020:	mov	x1, x21
    5024:	bl	45cc <lzma_index_init@@XZ_5.0+0x130>
    5028:	mov	x0, x19
    502c:	ldp	x20, x19, [sp, #48]
    5030:	ldp	x22, x21, [sp, #32]
    5034:	ldr	x23, [sp, #16]
    5038:	ldp	x29, x30, [sp], #64
    503c:	ret
    5040:	mov	x0, x19
    5044:	mov	x1, x22
    5048:	bl	46ec <lzma_index_end@@XZ_5.0+0x58>
    504c:	b	4f44 <lzma_index_dup@@XZ_5.0+0xdc>
    5050:	ldr	x9, [x0, #32]
    5054:	cbz	x9, 5068 <lzma_index_dup@@XZ_5.0+0x200>
    5058:	mov	x0, x9
    505c:	ldr	x9, [x9, #24]
    5060:	cbnz	x9, 5058 <lzma_index_dup@@XZ_5.0+0x1f0>
    5064:	b	5084 <lzma_index_dup@@XZ_5.0+0x21c>
    5068:	mov	x8, x0
    506c:	ldr	x0, [x8, #16]
    5070:	cbz	x0, 5084 <lzma_index_dup@@XZ_5.0+0x21c>
    5074:	ldr	x9, [x0, #32]
    5078:	cmp	x9, x8
    507c:	mov	x8, x0
    5080:	b.eq	506c <lzma_index_dup@@XZ_5.0+0x204>  // b.none
    5084:	ret

0000000000005088 <lzma_index_iter_init@@XZ_5.0>:
    5088:	stp	x29, x30, [sp, #-16]!
    508c:	mov	x29, sp
    5090:	str	x1, [x0, #256]
    5094:	bl	30a0 <lzma_index_iter_rewind@plt>
    5098:	ldp	x29, x30, [sp], #16
    509c:	ret

00000000000050a0 <lzma_index_iter_rewind@@XZ_5.0>:
    50a0:	add	x8, x0, #0x108
    50a4:	add	x9, x0, #0x118
    50a8:	movi	v0.2d, #0x0
    50ac:	str	q0, [x9]
    50b0:	str	q0, [x8]
    50b4:	ret

00000000000050b8 <lzma_index_iter_next@@XZ_5.0>:
    50b8:	stp	x29, x30, [sp, #-64]!
    50bc:	cmp	w1, #0x3
    50c0:	str	x23, [sp, #16]
    50c4:	stp	x22, x21, [sp, #32]
    50c8:	stp	x20, x19, [sp, #48]
    50cc:	mov	x29, sp
    50d0:	b.ls	50ec <lzma_index_iter_next@@XZ_5.0+0x34>  // b.plast
    50d4:	mov	w0, #0x1                   	// #1
    50d8:	ldp	x20, x19, [sp, #48]
    50dc:	ldp	x22, x21, [sp, #32]
    50e0:	ldr	x23, [sp, #16]
    50e4:	ldp	x29, x30, [sp], #64
    50e8:	ret
    50ec:	ldp	x22, x21, [x0, #256]
    50f0:	ldr	x23, [x0, #280]
    50f4:	mov	w20, w1
    50f8:	mov	x19, x0
    50fc:	cmp	w1, #0x1
    5100:	b.ne	510c <lzma_index_iter_next@@XZ_5.0+0x54>  // b.any
    5104:	mov	x0, xzr
    5108:	b	515c <lzma_index_iter_next@@XZ_5.0+0xa4>
    510c:	ldr	x8, [x19, #288]
    5110:	cmp	x8, #0x2
    5114:	b.eq	512c <lzma_index_iter_next@@XZ_5.0+0x74>  // b.none
    5118:	cmp	x8, #0x1
    511c:	b.eq	5134 <lzma_index_iter_next@@XZ_5.0+0x7c>  // b.none
    5120:	cbnz	x8, 5140 <lzma_index_iter_next@@XZ_5.0+0x88>
    5124:	ldr	x0, [x19, #272]
    5128:	b	515c <lzma_index_iter_next@@XZ_5.0+0xa4>
    512c:	ldr	x0, [x21, #64]
    5130:	b	515c <lzma_index_iter_next@@XZ_5.0+0xa4>
    5134:	ldr	x0, [x19, #272]
    5138:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    513c:	b	515c <lzma_index_iter_next@@XZ_5.0+0xa4>
    5140:	mov	x0, xzr
    5144:	b	515c <lzma_index_iter_next@@XZ_5.0+0xa4>
    5148:	ldr	x9, [x0]
    514c:	ldr	x10, [x0, #64]
    5150:	mov	x23, xzr
    5154:	cmp	x9, x10
    5158:	b.ne	51f4 <lzma_index_iter_next@@XZ_5.0+0x13c>  // b.any
    515c:	cbz	x21, 5178 <lzma_index_iter_next@@XZ_5.0+0xc0>
    5160:	cbz	x0, 51a4 <lzma_index_iter_next@@XZ_5.0+0xec>
    5164:	ldr	x8, [x0, #56]
    5168:	cmp	x23, x8
    516c:	b.cs	51a0 <lzma_index_iter_next@@XZ_5.0+0xe8>  // b.hs, b.nlast
    5170:	add	x8, x23, #0x1
    5174:	b	51d0 <lzma_index_iter_next@@XZ_5.0+0x118>
    5178:	ldr	x21, [x22, #8]
    517c:	cmp	w20, #0x2
    5180:	b.cc	51c8 <lzma_index_iter_next@@XZ_5.0+0x110>  // b.lo, b.ul, b.last
    5184:	ldr	x8, [x21, #64]
    5188:	cbnz	x8, 51c8 <lzma_index_iter_next@@XZ_5.0+0x110>
    518c:	mov	x0, x21
    5190:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    5194:	mov	x21, x0
    5198:	cbnz	x0, 5184 <lzma_index_iter_next@@XZ_5.0+0xcc>
    519c:	b	50d4 <lzma_index_iter_next@@XZ_5.0+0x1c>
    51a0:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    51a4:	cbnz	x0, 51cc <lzma_index_iter_next@@XZ_5.0+0x114>
    51a8:	mov	x0, x21
    51ac:	bl	5050 <lzma_index_dup@@XZ_5.0+0x1e8>
    51b0:	cbz	x0, 50d4 <lzma_index_iter_next@@XZ_5.0+0x1c>
    51b4:	mov	x21, x0
    51b8:	cmp	w20, #0x2
    51bc:	b.cc	51c8 <lzma_index_iter_next@@XZ_5.0+0x110>  // b.lo, b.ul, b.last
    51c0:	ldr	x8, [x21, #64]
    51c4:	cbz	x8, 51a8 <lzma_index_iter_next@@XZ_5.0+0xf0>
    51c8:	ldr	x0, [x21, #64]
    51cc:	mov	x8, xzr
    51d0:	cmp	w20, #0x3
    51d4:	b.ne	51f4 <lzma_index_iter_next@@XZ_5.0+0x13c>  // b.any
    51d8:	cbz	x8, 5148 <lzma_index_iter_next@@XZ_5.0+0x90>
    51dc:	add	x9, x0, x8, lsl #4
    51e0:	ldr	x10, [x9, #48]
    51e4:	ldr	x9, [x9, #64]
    51e8:	mov	x23, x8
    51ec:	cmp	x10, x9
    51f0:	b.eq	515c <lzma_index_iter_next@@XZ_5.0+0xa4>  // b.none
    51f4:	stp	x21, x0, [x19, #264]
    51f8:	mov	x0, x19
    51fc:	str	x8, [x19, #280]
    5200:	bl	520c <lzma_index_iter_next@@XZ_5.0+0x154>
    5204:	mov	w0, wzr
    5208:	b	50d8 <lzma_index_iter_next@@XZ_5.0+0x20>
    520c:	stp	x29, x30, [sp, #-96]!
    5210:	str	x27, [sp, #16]
    5214:	stp	x26, x25, [sp, #32]
    5218:	stp	x24, x23, [sp, #48]
    521c:	stp	x22, x21, [sp, #64]
    5220:	stp	x20, x19, [sp, #80]
    5224:	ldp	x23, x21, [x0, #264]
    5228:	ldr	x22, [x0, #280]
    522c:	mov	x19, x0
    5230:	mov	x29, sp
    5234:	cbz	x21, 525c <lzma_index_iter_next@@XZ_5.0+0x1a4>
    5238:	ldr	x8, [x19, #256]
    523c:	ldr	x8, [x8, #16]
    5240:	cmp	x8, x23
    5244:	b.ne	5254 <lzma_index_iter_next@@XZ_5.0+0x19c>  // b.any
    5248:	ldr	x8, [x23, #72]
    524c:	cmp	x8, x21
    5250:	b.eq	53b0 <lzma_index_iter_next@@XZ_5.0+0x2f8>  // b.none
    5254:	str	xzr, [x19, #288]
    5258:	b	5264 <lzma_index_iter_next@@XZ_5.0+0x1ac>
    525c:	mov	w8, #0x2                   	// #2
    5260:	str	x8, [x19, #288]
    5264:	ldr	w8, [x23, #40]
    5268:	str	x8, [x19, #32]
    526c:	ldr	x0, [x23, #88]
    5270:	mov	x8, x23
    5274:	str	x0, [x19, #40]
    5278:	ldr	x24, [x23, #8]
    527c:	str	x24, [x19, #48]
    5280:	ldr	x25, [x23]
    5284:	str	x25, [x19, #56]
    5288:	ldr	w9, [x8, #104]!
    528c:	cmn	w9, #0x1
    5290:	csel	x9, xzr, x8, eq  // eq = none
    5294:	str	x9, [x19]
    5298:	ldr	x9, [x8, #56]
    529c:	str	x9, [x19, #80]
    52a0:	ldur	x26, [x8, #-32]
    52a4:	cbz	x26, 52f0 <lzma_index_iter_next@@XZ_5.0+0x238>
    52a8:	ldr	x1, [x23, #96]
    52ac:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    52b0:	ldr	x8, [x26, #56]
    52b4:	add	x27, x26, #0x40
    52b8:	mov	x20, x0
    52bc:	add	x8, x27, x8, lsl #4
    52c0:	ldr	x8, [x8, #8]
    52c4:	mov	x0, x8
    52c8:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    52cc:	add	x8, x20, x0
    52d0:	add	x8, x8, #0x18
    52d4:	str	x8, [x19, #64]
    52d8:	ldr	x8, [x26, #56]
    52dc:	lsl	x8, x8, #4
    52e0:	ldr	x8, [x27, x8]
    52e4:	str	x8, [x19, #72]
    52e8:	cbnz	x21, 5310 <lzma_index_iter_next@@XZ_5.0+0x258>
    52ec:	b	5394 <lzma_index_iter_next@@XZ_5.0+0x2dc>
    52f0:	mov	x0, xzr
    52f4:	mov	x1, xzr
    52f8:	bl	47e4 <lzma_index_size@@XZ_5.0+0x1c>
    52fc:	add	x9, x0, #0x18
    5300:	mov	x8, xzr
    5304:	str	x9, [x19, #64]
    5308:	str	x8, [x19, #72]
    530c:	cbz	x21, 5394 <lzma_index_iter_next@@XZ_5.0+0x2dc>
    5310:	ldr	x8, [x21, #40]
    5314:	add	x8, x8, x22
    5318:	str	x8, [x19, #144]
    531c:	ldr	x9, [x23, #48]
    5320:	add	x8, x9, x8
    5324:	str	x8, [x19, #120]
    5328:	cbz	x22, 5340 <lzma_index_iter_next@@XZ_5.0+0x288>
    532c:	add	x8, x21, x22, lsl #4
    5330:	ldr	x0, [x8, #56]
    5334:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    5338:	mov	x20, x0
    533c:	b	5344 <lzma_index_iter_next@@XZ_5.0+0x28c>
    5340:	ldr	x20, [x21, #8]
    5344:	add	x8, x21, x22, lsl #4
    5348:	add	x9, x8, #0x30
    534c:	cmp	x22, #0x0
    5350:	str	x20, [x19, #152]
    5354:	csel	x9, x21, x9, eq  // eq = none
    5358:	ldr	x21, [x9]
    535c:	str	x21, [x19, #160]
    5360:	ldr	x9, [x8, #64]
    5364:	sub	x9, x9, x21
    5368:	str	x9, [x19, #168]
    536c:	ldr	x8, [x8, #72]
    5370:	sub	x0, x8, x20
    5374:	str	x0, [x19, #176]
    5378:	bl	4be0 <lzma_index_append@@XZ_5.0+0x1c8>
    537c:	add	x8, x20, #0xc
    5380:	add	x9, x21, x25
    5384:	str	x8, [x19, #152]
    5388:	add	x8, x8, x24
    538c:	str	x0, [x19, #184]
    5390:	stp	x8, x9, [x19, #128]
    5394:	ldp	x20, x19, [sp, #80]
    5398:	ldp	x22, x21, [sp, #64]
    539c:	ldp	x24, x23, [sp, #48]
    53a0:	ldp	x26, x25, [sp, #32]
    53a4:	ldr	x27, [sp, #16]
    53a8:	ldp	x29, x30, [sp], #96
    53ac:	ret
    53b0:	ldr	x8, [x23, #64]
    53b4:	cmp	x8, x21
    53b8:	b.eq	53d0 <lzma_index_iter_next@@XZ_5.0+0x318>  // b.none
    53bc:	mov	w8, #0x1                   	// #1
    53c0:	str	x8, [x19, #288]
    53c4:	ldr	x8, [x21, #16]
    53c8:	str	x8, [x19, #272]
    53cc:	b	5264 <lzma_index_iter_next@@XZ_5.0+0x1ac>
    53d0:	mov	w8, #0x2                   	// #2
    53d4:	str	x8, [x19, #288]
    53d8:	str	xzr, [x19, #272]
    53dc:	b	5264 <lzma_index_iter_next@@XZ_5.0+0x1ac>

00000000000053e0 <lzma_index_iter_locate@@XZ_5.0>:
    53e0:	stp	x29, x30, [sp, #-48]!
    53e4:	stp	x20, x19, [sp, #32]
    53e8:	mov	x19, x0
    53ec:	ldr	x0, [x0, #256]
    53f0:	str	x21, [sp, #16]
    53f4:	mov	x29, sp
    53f8:	ldr	x8, [x0, #32]
    53fc:	cmp	x8, x1
    5400:	b.ls	5458 <lzma_index_iter_locate@@XZ_5.0+0x78>  // b.plast
    5404:	mov	x21, x1
    5408:	bl	5488 <lzma_index_iter_locate@@XZ_5.0+0xa8>
    540c:	mov	x20, x0
    5410:	ldr	x8, [x0], #56
    5414:	sub	x21, x21, x8
    5418:	mov	x1, x21
    541c:	bl	5488 <lzma_index_iter_locate@@XZ_5.0+0xa8>
    5420:	ldr	x9, [x0, #56]
    5424:	cbz	x9, 5460 <lzma_index_iter_locate@@XZ_5.0+0x80>
    5428:	mov	x8, xzr
    542c:	add	x10, x0, #0x40
    5430:	sub	x11, x9, x8
    5434:	add	x11, x8, x11, lsr #1
    5438:	lsl	x12, x11, #4
    543c:	ldr	x12, [x10, x12]
    5440:	cmp	x12, x21
    5444:	csinc	x8, x8, x11, hi  // hi = pmore
    5448:	csel	x9, x11, x9, hi  // hi = pmore
    544c:	cmp	x9, x8
    5450:	b.hi	5430 <lzma_index_iter_locate@@XZ_5.0+0x50>  // b.pmore
    5454:	b	5464 <lzma_index_iter_locate@@XZ_5.0+0x84>
    5458:	mov	w0, #0x1                   	// #1
    545c:	b	5478 <lzma_index_iter_locate@@XZ_5.0+0x98>
    5460:	mov	x8, xzr
    5464:	stp	x20, x0, [x19, #264]
    5468:	mov	x0, x19
    546c:	str	x8, [x19, #280]
    5470:	bl	520c <lzma_index_iter_next@@XZ_5.0+0x154>
    5474:	mov	w0, wzr
    5478:	ldp	x20, x19, [sp, #32]
    547c:	ldr	x21, [sp, #16]
    5480:	ldp	x29, x30, [sp], #48
    5484:	ret
    5488:	ldr	x8, [x0]
    548c:	cbz	x8, 54b8 <lzma_index_iter_locate@@XZ_5.0+0xd8>
    5490:	mov	x0, xzr
    5494:	mov	w9, #0x20                  	// #32
    5498:	mov	w10, #0x18                  	// #24
    549c:	ldr	x11, [x8]
    54a0:	cmp	x11, x1
    54a4:	csel	x11, x10, x9, hi  // hi = pmore
    54a8:	csel	x0, x0, x8, hi  // hi = pmore
    54ac:	ldr	x8, [x8, x11]
    54b0:	cbnz	x8, 549c <lzma_index_iter_locate@@XZ_5.0+0xbc>
    54b4:	ret
    54b8:	mov	x0, xzr
    54bc:	ret
    54c0:	stp	xzr, xzr, [x0]
    54c4:	str	wzr, [x0, #24]
    54c8:	str	xzr, [x0, #16]
    54cc:	ret
    54d0:	clz	w8, w0
    54d4:	eor	w0, w8, #0x1f
    54d8:	ret
    54dc:	rbit	w8, w0
    54e0:	clz	w0, w8
    54e4:	ret
    54e8:	stp	x29, x30, [sp, #-48]!
    54ec:	stp	x20, x19, [sp, #32]
    54f0:	mov	x20, x0
    54f4:	ldr	x0, [x0, #24]
    54f8:	str	x21, [sp, #16]
    54fc:	mov	x19, x2
    5500:	mov	x21, x1
    5504:	mov	x29, sp
    5508:	cbz	x0, 5518 <lzma_index_iter_locate@@XZ_5.0+0x138>
    550c:	mov	x1, x21
    5510:	mov	x2, x19
    5514:	bl	54e8 <lzma_index_iter_locate@@XZ_5.0+0x108>
    5518:	ldr	x0, [x20, #32]
    551c:	cbz	x0, 552c <lzma_index_iter_locate@@XZ_5.0+0x14c>
    5520:	mov	x1, x21
    5524:	mov	x2, x19
    5528:	bl	54e8 <lzma_index_iter_locate@@XZ_5.0+0x108>
    552c:	mov	x0, x20
    5530:	mov	x1, x21
    5534:	blr	x19
    5538:	ldp	x20, x19, [sp, #32]
    553c:	ldr	x21, [sp, #16]
    5540:	ldp	x29, x30, [sp], #48
    5544:	ret

0000000000005548 <lzma_stream_flags_compare@@XZ_5.0>:
    5548:	stp	x29, x30, [sp, #-48]!
    554c:	stp	x20, x19, [sp, #32]
    5550:	ldr	w8, [x0]
    5554:	str	x21, [sp, #16]
    5558:	mov	x29, sp
    555c:	cbnz	w8, 556c <lzma_stream_flags_compare@@XZ_5.0+0x24>
    5560:	ldr	w8, [x1]
    5564:	mov	x19, x1
    5568:	cbz	w8, 5580 <lzma_stream_flags_compare@@XZ_5.0+0x38>
    556c:	mov	w0, #0x8                   	// #8
    5570:	ldp	x20, x19, [sp, #32]
    5574:	ldr	x21, [sp, #16]
    5578:	ldp	x29, x30, [sp], #48
    557c:	ret
    5580:	ldr	w8, [x0, #16]
    5584:	cmp	w8, #0xf
    5588:	b.hi	5598 <lzma_stream_flags_compare@@XZ_5.0+0x50>  // b.pmore
    558c:	ldr	w9, [x19, #16]
    5590:	cmp	w9, #0xf
    5594:	b.ls	55a0 <lzma_stream_flags_compare@@XZ_5.0+0x58>  // b.plast
    5598:	mov	w0, #0xb                   	// #11
    559c:	b	5570 <lzma_stream_flags_compare@@XZ_5.0+0x28>
    55a0:	cmp	w8, w9
    55a4:	b.ne	55e4 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.any
    55a8:	ldr	x20, [x0, #8]
    55ac:	cmn	x20, #0x1
    55b0:	b.eq	55dc <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.none
    55b4:	ldr	x21, [x19, #8]
    55b8:	cmn	x21, #0x1
    55bc:	b.eq	55dc <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.none
    55c0:	bl	55ec <lzma_stream_flags_compare@@XZ_5.0+0xa4>
    55c4:	tbz	w0, #0, 5598 <lzma_stream_flags_compare@@XZ_5.0+0x50>
    55c8:	mov	x0, x19
    55cc:	bl	55ec <lzma_stream_flags_compare@@XZ_5.0+0xa4>
    55d0:	tbz	w0, #0, 5598 <lzma_stream_flags_compare@@XZ_5.0+0x50>
    55d4:	cmp	x20, x21
    55d8:	b.ne	55e4 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.any
    55dc:	mov	w0, wzr
    55e0:	b	5570 <lzma_stream_flags_compare@@XZ_5.0+0x28>
    55e4:	mov	w0, #0x9                   	// #9
    55e8:	b	5570 <lzma_stream_flags_compare@@XZ_5.0+0x28>
    55ec:	ldr	x8, [x0, #8]
    55f0:	mov	x9, #0x3ffff0000           	// #17179803648
    55f4:	movk	x9, #0xfffd
    55f8:	sub	x10, x8, #0x4
    55fc:	cmp	x10, x9
    5600:	cset	w9, cc  // cc = lo, ul, last
    5604:	tst	x8, #0x3
    5608:	cset	w8, eq  // eq = none
    560c:	and	w0, w9, w8
    5610:	ret

0000000000005614 <lzma_vli_size@@XZ_5.0>:
    5614:	mov	w8, wzr
    5618:	tbnz	x0, #63, 5628 <lzma_vli_size@@XZ_5.0+0x14>
    561c:	lsr	x0, x0, #7
    5620:	add	w8, w8, #0x1
    5624:	cbnz	x0, 561c <lzma_vli_size@@XZ_5.0+0x8>
    5628:	mov	w0, w8
    562c:	ret

0000000000005630 <lzma_cputhreads@@XZ_5.2>:
    5630:	stp	x29, x30, [sp, #-16]!
    5634:	mov	x29, sp
    5638:	bl	3684 <pthread_cond_timedwait@plt+0x124>
    563c:	ldp	x29, x30, [sp], #16
    5640:	ret

0000000000005644 <lzma_alone_encoder@@XZ_5.0>:
    5644:	stp	x29, x30, [sp, #-48]!
    5648:	str	x21, [sp, #16]
    564c:	stp	x20, x19, [sp, #32]
    5650:	mov	x29, sp
    5654:	mov	x21, x1
    5658:	mov	x19, x0
    565c:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    5660:	mov	w20, w0
    5664:	cbnz	w0, 56a4 <lzma_alone_encoder@@XZ_5.0+0x60>
    5668:	ldp	x1, x0, [x19, #48]
    566c:	mov	x2, x21
    5670:	bl	56c4 <lzma_alone_encoder@@XZ_5.0+0x80>
    5674:	cbz	w0, 56b8 <lzma_alone_encoder@@XZ_5.0+0x74>
    5678:	mov	w21, w0
    567c:	mov	x0, x19
    5680:	bl	3330 <lzma_end@plt>
    5684:	mov	w8, wzr
    5688:	mov	w20, w21
    568c:	cbz	w8, 56a4 <lzma_alone_encoder@@XZ_5.0+0x60>
    5690:	ldr	x8, [x19, #56]
    5694:	mov	w20, wzr
    5698:	mov	w9, #0x1                   	// #1
    569c:	strb	w9, [x8, #88]
    56a0:	strb	w9, [x8, #91]
    56a4:	mov	w0, w20
    56a8:	ldp	x20, x19, [sp, #32]
    56ac:	ldr	x21, [sp, #16]
    56b0:	ldp	x29, x30, [sp], #48
    56b4:	ret
    56b8:	mov	w8, #0x1                   	// #1
    56bc:	cbnz	w8, 5690 <lzma_alone_encoder@@XZ_5.0+0x4c>
    56c0:	b	56a4 <lzma_alone_encoder@@XZ_5.0+0x60>
    56c4:	sub	sp, sp, #0x70
    56c8:	stp	x29, x30, [sp, #48]
    56cc:	stp	x22, x21, [sp, #80]
    56d0:	stp	x20, x19, [sp, #96]
    56d4:	ldr	x8, [x0, #16]
    56d8:	str	x23, [sp, #64]
    56dc:	adrp	x23, 5000 <lzma_index_dup@@XZ_5.0+0x198>
    56e0:	add	x23, x23, #0x6c4
    56e4:	mov	x20, x2
    56e8:	mov	x22, x0
    56ec:	cmp	x8, x23
    56f0:	mov	x19, x1
    56f4:	add	x29, sp, #0x30
    56f8:	b.eq	5708 <lzma_alone_encoder@@XZ_5.0+0xc4>  // b.none
    56fc:	mov	x0, x22
    5700:	mov	x1, x19
    5704:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    5708:	ldr	x21, [x22]
    570c:	str	x23, [x22, #16]
    5710:	cbnz	x21, 5758 <lzma_alone_encoder@@XZ_5.0+0x114>
    5714:	mov	w0, #0x68                  	// #104
    5718:	mov	x1, x19
    571c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    5720:	cbz	x0, 57dc <lzma_alone_encoder@@XZ_5.0+0x198>
    5724:	adrp	x8, 5000 <lzma_index_dup@@XZ_5.0+0x198>
    5728:	adrp	x9, 5000 <lzma_index_dup@@XZ_5.0+0x198>
    572c:	mov	x21, x0
    5730:	add	x8, x8, #0x7f8
    5734:	add	x9, x9, #0x900
    5738:	mov	x10, #0xffffffffffffffff    	// #-1
    573c:	movi	v0.2d, #0x0
    5740:	str	x0, [x22]
    5744:	stp	x8, x9, [x22, #24]
    5748:	stp	xzr, x10, [x0]
    574c:	stp	q0, q0, [x0, #16]
    5750:	str	q0, [x0, #48]
    5754:	str	xzr, [x0, #64]
    5758:	add	x1, x21, #0x58
    575c:	mov	x0, x20
    5760:	str	wzr, [x21, #72]
    5764:	str	xzr, [x21, #80]
    5768:	bl	10af0 <lzma_lzma_preset@@XZ_5.0+0xb74>
    576c:	tbnz	w0, #0, 577c <lzma_alone_encoder@@XZ_5.0+0x138>
    5770:	ldr	w8, [x20]
    5774:	cmp	w8, #0x1, lsl #12
    5778:	b.cs	5784 <lzma_alone_encoder@@XZ_5.0+0x140>  // b.hs, b.nlast
    577c:	mov	w0, #0x8                   	// #8
    5780:	b	57e0 <lzma_alone_encoder@@XZ_5.0+0x19c>
    5784:	sub	w8, w8, #0x1
    5788:	orr	w8, w8, w8, lsr #2
    578c:	orr	w8, w8, w8, lsr #3
    5790:	orr	w8, w8, w8, lsr #4
    5794:	orr	w8, w8, w8, lsr #8
    5798:	orr	w8, w8, w8, lsr #16
    579c:	adds	w8, w8, #0x1
    57a0:	csinv	w1, w8, wzr, cc  // cc = lo, ul, last
    57a4:	add	x0, x21, #0x59
    57a8:	bl	5930 <lzma_alone_encoder@@XZ_5.0+0x2ec>
    57ac:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    57b0:	ldr	x9, [x9, #4056]
    57b4:	mov	x8, #0xffffffffffffffff    	// #-1
    57b8:	mov	x2, sp
    57bc:	mov	x0, x21
    57c0:	mov	x1, x19
    57c4:	stur	x8, [x21, #93]
    57c8:	stp	xzr, x9, [sp]
    57cc:	stp	x20, xzr, [sp, #16]
    57d0:	stp	xzr, xzr, [sp, #32]
    57d4:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
    57d8:	b	57e0 <lzma_alone_encoder@@XZ_5.0+0x19c>
    57dc:	mov	w0, #0x5                   	// #5
    57e0:	ldp	x20, x19, [sp, #96]
    57e4:	ldp	x22, x21, [sp, #80]
    57e8:	ldr	x23, [sp, #64]
    57ec:	ldp	x29, x30, [sp, #48]
    57f0:	add	sp, sp, #0x70
    57f4:	ret
    57f8:	sub	sp, sp, #0x80
    57fc:	ldr	x8, [x6]
    5800:	stp	x29, x30, [sp, #32]
    5804:	stp	x28, x27, [sp, #48]
    5808:	stp	x26, x25, [sp, #64]
    580c:	cmp	x8, x7
    5810:	stp	x24, x23, [sp, #80]
    5814:	stp	x22, x21, [sp, #96]
    5818:	stp	x20, x19, [sp, #112]
    581c:	add	x29, sp, #0x20
    5820:	b.cs	5898 <lzma_alone_encoder@@XZ_5.0+0x254>  // b.hs, b.nlast
    5824:	ldr	w8, [x29, #96]
    5828:	mov	x19, x7
    582c:	mov	x20, x6
    5830:	mov	x21, x5
    5834:	mov	x23, x3
    5838:	mov	x24, x2
    583c:	mov	x25, x1
    5840:	mov	x26, x0
    5844:	add	x27, x0, #0x58
    5848:	add	x28, x0, #0x50
    584c:	mov	w22, #0x1                   	// #1
    5850:	stur	x4, [x29, #-8]
    5854:	stur	w8, [x29, #-12]
    5858:	ldr	w8, [x26, #72]
    585c:	cbnz	w8, 58bc <lzma_alone_encoder@@XZ_5.0+0x278>
    5860:	mov	w2, #0xd                   	// #13
    5864:	mov	x0, x27
    5868:	mov	x1, x28
    586c:	mov	x3, x21
    5870:	mov	x4, x20
    5874:	mov	x5, x19
    5878:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    587c:	ldr	x8, [x28]
    5880:	cmp	x8, #0xd
    5884:	b.cc	5898 <lzma_alone_encoder@@XZ_5.0+0x254>  // b.lo, b.ul, b.last
    5888:	str	w22, [x26, #72]
    588c:	ldr	x8, [x20]
    5890:	cmp	x8, x19
    5894:	b.cc	5858 <lzma_alone_encoder@@XZ_5.0+0x214>  // b.lo, b.ul, b.last
    5898:	mov	w0, wzr
    589c:	ldp	x20, x19, [sp, #112]
    58a0:	ldp	x22, x21, [sp, #96]
    58a4:	ldp	x24, x23, [sp, #80]
    58a8:	ldp	x26, x25, [sp, #64]
    58ac:	ldp	x28, x27, [sp, #48]
    58b0:	ldp	x29, x30, [sp, #32]
    58b4:	add	sp, sp, #0x80
    58b8:	ret
    58bc:	cmp	w8, #0x1
    58c0:	b.ne	58f8 <lzma_alone_encoder@@XZ_5.0+0x2b4>  // b.any
    58c4:	ldr	x8, [x26, #24]
    58c8:	ldr	x0, [x26]
    58cc:	ldur	w9, [x29, #-12]
    58d0:	ldur	x4, [x29, #-8]
    58d4:	mov	x1, x25
    58d8:	mov	x2, x24
    58dc:	mov	x3, x23
    58e0:	mov	x5, x21
    58e4:	mov	x6, x20
    58e8:	mov	x7, x19
    58ec:	str	w9, [sp]
    58f0:	blr	x8
    58f4:	b	589c <lzma_alone_encoder@@XZ_5.0+0x258>
    58f8:	mov	w0, #0xb                   	// #11
    58fc:	b	589c <lzma_alone_encoder@@XZ_5.0+0x258>
    5900:	stp	x29, x30, [sp, #-32]!
    5904:	stp	x20, x19, [sp, #16]
    5908:	mov	x29, sp
    590c:	mov	x19, x1
    5910:	mov	x20, x0
    5914:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    5918:	mov	x0, x20
    591c:	mov	x1, x19
    5920:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    5924:	ldp	x20, x19, [sp, #16]
    5928:	ldp	x29, x30, [sp], #32
    592c:	ret
    5930:	str	w1, [x0]
    5934:	ret
    5938:	stp	x29, x30, [sp, #-16]!
    593c:	mov	x29, sp
    5940:	bl	595c <lzma_alone_encoder@@XZ_5.0+0x318>
    5944:	add	x8, x0, #0x5f
    5948:	and	x8, x8, #0xfffffffffffffffc
    594c:	cmp	x0, #0x0
    5950:	csel	x0, xzr, x8, eq  // eq = none
    5954:	ldp	x29, x30, [sp], #16
    5958:	ret
    595c:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5960:	movk	x8, #0x7fff, lsl #48
    5964:	add	x9, x8, #0x1
    5968:	cmp	x0, x9
    596c:	b.ls	5978 <lzma_alone_encoder@@XZ_5.0+0x334>  // b.plast
    5970:	mov	x0, xzr
    5974:	ret
    5978:	mov	w9, #0xffff                	// #65535
    597c:	add	x9, x0, x9
    5980:	lsr	x9, x9, #16
    5984:	add	x9, x9, x9, lsl #1
    5988:	sub	x8, x8, x9
    598c:	add	x9, x0, x9
    5990:	cmp	x8, x0
    5994:	csinc	x0, xzr, x9, cc  // cc = lo, ul, last
    5998:	ret

000000000000599c <lzma_block_buffer_bound@@XZ_5.0>:
    599c:	stp	x29, x30, [sp, #-16]!
    59a0:	mov	x29, sp
    59a4:	bl	5938 <lzma_alone_encoder@@XZ_5.0+0x2f4>
    59a8:	ldp	x29, x30, [sp], #16
    59ac:	ret

00000000000059b0 <lzma_block_buffer_encode@@XZ_5.0>:
    59b0:	stp	x29, x30, [sp, #-16]!
    59b4:	mov	w7, #0x1                   	// #1
    59b8:	mov	x29, sp
    59bc:	bl	59c8 <lzma_block_buffer_encode@@XZ_5.0+0x18>
    59c0:	ldp	x29, x30, [sp], #16
    59c4:	ret
    59c8:	sub	sp, sp, #0xd0
    59cc:	stp	x29, x30, [sp, #112]
    59d0:	stp	x28, x27, [sp, #128]
    59d4:	stp	x26, x25, [sp, #144]
    59d8:	stp	x24, x23, [sp, #160]
    59dc:	stp	x22, x21, [sp, #176]
    59e0:	stp	x20, x19, [sp, #192]
    59e4:	add	x29, sp, #0x70
    59e8:	cbz	x0, 5a54 <lzma_block_buffer_encode@@XZ_5.0+0xa4>
    59ec:	cmp	x2, #0x0
    59f0:	cset	w8, eq  // eq = none
    59f4:	cmp	x3, #0x0
    59f8:	cset	w9, ne  // ne = any
    59fc:	mov	x22, x3
    5a00:	mov	x23, x2
    5a04:	mov	x21, x0
    5a08:	and	w8, w8, w9
    5a0c:	mov	w0, #0xb                   	// #11
    5a10:	tbnz	w8, #0, 5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5a14:	mov	x20, x4
    5a18:	cbz	x4, 5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5a1c:	mov	x19, x5
    5a20:	cbz	x5, 5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5a24:	ldr	x28, [x19]
    5a28:	mov	x24, x6
    5a2c:	cmp	x28, x6
    5a30:	b.hi	5a54 <lzma_block_buffer_encode@@XZ_5.0+0xa4>  // b.pmore
    5a34:	ldr	w8, [x21]
    5a38:	cmp	w8, #0x1
    5a3c:	b.ls	5a48 <lzma_block_buffer_encode@@XZ_5.0+0x98>  // b.plast
    5a40:	mov	w0, #0x8                   	// #8
    5a44:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5a48:	ldr	w27, [x21, #8]
    5a4c:	cmp	w27, #0xf
    5a50:	b.ls	5a78 <lzma_block_buffer_encode@@XZ_5.0+0xc8>  // b.plast
    5a54:	mov	w0, #0xb                   	// #11
    5a58:	ldp	x20, x19, [sp, #192]
    5a5c:	ldp	x22, x21, [sp, #176]
    5a60:	ldp	x24, x23, [sp, #160]
    5a64:	ldp	x26, x25, [sp, #144]
    5a68:	ldp	x28, x27, [sp, #128]
    5a6c:	ldp	x29, x30, [sp, #112]
    5a70:	add	sp, sp, #0xd0
    5a74:	ret
    5a78:	mov	w25, w7
    5a7c:	mov	x26, x1
    5a80:	tbz	w7, #0, 5a8c <lzma_block_buffer_encode@@XZ_5.0+0xdc>
    5a84:	ldr	x8, [x21, #32]
    5a88:	cbz	x8, 5a54 <lzma_block_buffer_encode@@XZ_5.0+0xa4>
    5a8c:	mov	w0, w27
    5a90:	bl	30e0 <lzma_check_is_supported@plt>
    5a94:	tst	w0, #0xff
    5a98:	b.eq	5b00 <lzma_block_buffer_encode@@XZ_5.0+0x150>  // b.none
    5a9c:	sub	w8, w24, w28
    5aa0:	and	x8, x8, #0x3
    5aa4:	mov	w0, w27
    5aa8:	sub	x24, x24, x8
    5aac:	bl	3270 <lzma_check_size@plt>
    5ab0:	mov	w27, w0
    5ab4:	sub	x8, x24, x28
    5ab8:	cmp	x8, x27
    5abc:	b.ls	5b08 <lzma_block_buffer_encode@@XZ_5.0+0x158>  // b.plast
    5ac0:	mov	x0, x22
    5ac4:	str	x22, [x21, #24]
    5ac8:	bl	595c <lzma_alone_encoder@@XZ_5.0+0x318>
    5acc:	str	x0, [x21, #16]
    5ad0:	cbz	x0, 5b10 <lzma_block_buffer_encode@@XZ_5.0+0x160>
    5ad4:	sub	x24, x24, x27
    5ad8:	tbz	w25, #0, 5b18 <lzma_block_buffer_encode@@XZ_5.0+0x168>
    5adc:	mov	x0, x21
    5ae0:	mov	x1, x26
    5ae4:	mov	x2, x23
    5ae8:	mov	x3, x22
    5aec:	mov	x4, x20
    5af0:	mov	x5, x19
    5af4:	mov	x6, x24
    5af8:	bl	5c14 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    5afc:	b	5b1c <lzma_block_buffer_encode@@XZ_5.0+0x16c>
    5b00:	mov	w0, #0x3                   	// #3
    5b04:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5b08:	mov	w0, #0xa                   	// #10
    5b0c:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5b10:	mov	w0, #0x9                   	// #9
    5b14:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5b18:	mov	w0, #0xa                   	// #10
    5b1c:	cbz	w0, 5b48 <lzma_block_buffer_encode@@XZ_5.0+0x198>
    5b20:	cmp	w0, #0xa
    5b24:	b.ne	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>  // b.any
    5b28:	mov	x0, x21
    5b2c:	mov	x1, x23
    5b30:	mov	x2, x22
    5b34:	mov	x3, x20
    5b38:	mov	x4, x19
    5b3c:	mov	x5, x24
    5b40:	bl	5d7c <lzma_block_uncomp_encode@@XZ_5.2+0x198>
    5b44:	cbnz	w0, 5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5b48:	ldr	x8, [x21, #16]
    5b4c:	tst	x8, #0x3
    5b50:	b.eq	5b74 <lzma_block_buffer_encode@@XZ_5.0+0x1c4>  // b.none
    5b54:	add	x8, x8, #0x1
    5b58:	ldr	x9, [x19]
    5b5c:	tst	x8, #0x3
    5b60:	add	x8, x8, #0x1
    5b64:	add	x10, x9, #0x1
    5b68:	str	x10, [x19]
    5b6c:	strb	wzr, [x20, x9]
    5b70:	b.ne	5b58 <lzma_block_buffer_encode@@XZ_5.0+0x1a8>  // b.any
    5b74:	cbz	w27, 5bdc <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    5b78:	ldr	w1, [x21, #8]
    5b7c:	add	x0, sp, #0x8
    5b80:	bl	c16c <lzma_check_size@@XZ_5.0+0x20>
    5b84:	ldr	w1, [x21, #8]
    5b88:	add	x0, sp, #0x8
    5b8c:	mov	x2, x23
    5b90:	mov	x3, x22
    5b94:	bl	c1b0 <lzma_check_size@@XZ_5.0+0x64>
    5b98:	ldr	w1, [x21, #8]
    5b9c:	add	x0, sp, #0x8
    5ba0:	bl	c22c <lzma_check_size@@XZ_5.0+0xe0>
    5ba4:	add	x0, x21, #0x28
    5ba8:	add	x1, sp, #0x8
    5bac:	mov	x2, x27
    5bb0:	bl	3090 <memcpy@plt>
    5bb4:	ldr	x8, [x19]
    5bb8:	add	x1, sp, #0x8
    5bbc:	mov	x2, x27
    5bc0:	add	x0, x20, x8
    5bc4:	bl	3090 <memcpy@plt>
    5bc8:	ldr	x8, [x19]
    5bcc:	mov	w0, wzr
    5bd0:	add	x8, x8, x27
    5bd4:	str	x8, [x19]
    5bd8:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>
    5bdc:	mov	w0, wzr
    5be0:	b	5a58 <lzma_block_buffer_encode@@XZ_5.0+0xa8>

0000000000005be4 <lzma_block_uncomp_encode@@XZ_5.2>:
    5be4:	stp	x29, x30, [sp, #-16]!
    5be8:	mov	x6, x5
    5bec:	mov	x5, x4
    5bf0:	mov	x4, x3
    5bf4:	mov	x3, x2
    5bf8:	mov	x2, x1
    5bfc:	mov	x1, xzr
    5c00:	mov	w7, wzr
    5c04:	mov	x29, sp
    5c08:	bl	59c8 <lzma_block_buffer_encode@@XZ_5.0+0x18>
    5c0c:	ldp	x29, x30, [sp], #16
    5c10:	ret
    5c14:	sub	sp, sp, #0xd0
    5c18:	stp	x29, x30, [sp, #112]
    5c1c:	stp	x28, x27, [sp, #128]
    5c20:	stp	x26, x25, [sp, #144]
    5c24:	stp	x24, x23, [sp, #160]
    5c28:	stp	x22, x21, [sp, #176]
    5c2c:	stp	x20, x19, [sp, #192]
    5c30:	add	x29, sp, #0x70
    5c34:	mov	x25, x6
    5c38:	mov	x19, x5
    5c3c:	mov	x20, x4
    5c40:	mov	x23, x3
    5c44:	mov	x24, x2
    5c48:	mov	x22, x1
    5c4c:	mov	x21, x0
    5c50:	bl	3160 <lzma_block_header_size@plt>
    5c54:	mov	w26, w0
    5c58:	cbnz	w0, 5d58 <lzma_block_uncomp_encode@@XZ_5.2+0x174>
    5c5c:	ldr	x27, [x19]
    5c60:	ldr	w8, [x21, #4]
    5c64:	sub	x9, x25, x27
    5c68:	cmp	x9, x8
    5c6c:	b.ls	5d44 <lzma_block_uncomp_encode@@XZ_5.2+0x160>  // b.plast
    5c70:	add	x28, x27, x8
    5c74:	movi	v0.2d, #0x0
    5c78:	mov	x8, #0xffffffffffffffff    	// #-1
    5c7c:	str	x28, [x19]
    5c80:	ldr	x9, [x21, #16]
    5c84:	str	xzr, [sp, #96]
    5c88:	stp	q0, q0, [sp, #64]
    5c8c:	stp	q0, q0, [sp, #32]
    5c90:	str	x8, [sp, #40]
    5c94:	ldr	x2, [x21, #32]
    5c98:	add	x0, sp, #0x20
    5c9c:	mov	x1, x22
    5ca0:	str	x9, [sp, #16]
    5ca4:	bl	692c <lzma_raw_encoder_memusage@@XZ_5.0+0x20>
    5ca8:	mov	w26, w0
    5cac:	cbnz	w0, 5cf8 <lzma_block_uncomp_encode@@XZ_5.2+0x114>
    5cb0:	ldr	x11, [sp, #16]
    5cb4:	ldr	x10, [sp, #56]
    5cb8:	ldr	x0, [sp, #32]
    5cbc:	sub	x8, x25, x28
    5cc0:	add	x9, x11, x28
    5cc4:	cmp	x8, x11
    5cc8:	csel	x7, x9, x25, hi  // hi = pmore
    5ccc:	mov	w8, #0x3                   	// #3
    5cd0:	add	x3, sp, #0x18
    5cd4:	mov	x1, x22
    5cd8:	mov	x2, x24
    5cdc:	mov	x4, x23
    5ce0:	mov	x5, x20
    5ce4:	mov	x6, x19
    5ce8:	str	xzr, [sp, #24]
    5cec:	str	w8, [sp]
    5cf0:	blr	x10
    5cf4:	mov	w26, w0
    5cf8:	add	x0, sp, #0x20
    5cfc:	mov	x1, x22
    5d00:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    5d04:	cbz	w26, 5d4c <lzma_block_uncomp_encode@@XZ_5.2+0x168>
    5d08:	cmp	w26, #0x1
    5d0c:	b.ne	5d3c <lzma_block_uncomp_encode@@XZ_5.2+0x158>  // b.any
    5d10:	ldr	x8, [x19]
    5d14:	ldr	w9, [x21, #4]
    5d18:	add	x1, x20, x27
    5d1c:	mov	x0, x21
    5d20:	sub	x8, x8, x27
    5d24:	sub	x8, x8, x9
    5d28:	str	x8, [x21, #16]
    5d2c:	bl	3540 <lzma_block_header_encode@plt>
    5d30:	cmp	w0, #0x0
    5d34:	mov	w8, #0xb                   	// #11
    5d38:	csel	w26, wzr, w8, eq  // eq = none
    5d3c:	cbnz	w26, 5d54 <lzma_block_uncomp_encode@@XZ_5.2+0x170>
    5d40:	b	5d58 <lzma_block_uncomp_encode@@XZ_5.2+0x174>
    5d44:	mov	w26, #0xa                   	// #10
    5d48:	b	5d58 <lzma_block_uncomp_encode@@XZ_5.2+0x174>
    5d4c:	mov	w26, #0xa                   	// #10
    5d50:	cbz	w26, 5d58 <lzma_block_uncomp_encode@@XZ_5.2+0x174>
    5d54:	str	x27, [x19]
    5d58:	mov	w0, w26
    5d5c:	ldp	x20, x19, [sp, #192]
    5d60:	ldp	x22, x21, [sp, #176]
    5d64:	ldp	x24, x23, [sp, #160]
    5d68:	ldp	x26, x25, [sp, #144]
    5d6c:	ldp	x28, x27, [sp, #128]
    5d70:	ldp	x29, x30, [sp, #112]
    5d74:	add	sp, sp, #0xd0
    5d78:	ret
    5d7c:	sub	sp, sp, #0xe0
    5d80:	movi	v0.2d, #0x0
    5d84:	mov	w8, #0x1000                	// #4096
    5d88:	mov	w9, #0x21                  	// #33
    5d8c:	add	x10, sp, #0x20
    5d90:	stp	q0, q0, [sp, #32]
    5d94:	str	w8, [sp, #32]
    5d98:	mov	x8, #0xffffffffffffffff    	// #-1
    5d9c:	stp	x29, x30, [sp, #144]
    5da0:	stp	x24, x23, [sp, #176]
    5da4:	stp	x22, x21, [sp, #192]
    5da8:	stp	x20, x19, [sp, #208]
    5dac:	stp	q0, q0, [sp, #112]
    5db0:	stp	q0, q0, [sp, #80]
    5db4:	str	q0, [sp, #64]
    5db8:	stp	x9, x10, [sp]
    5dbc:	str	x8, [sp, #16]
    5dc0:	str	x25, [sp, #160]
    5dc4:	ldr	x25, [x0, #32]
    5dc8:	mov	x8, sp
    5dcc:	add	x29, sp, #0x90
    5dd0:	mov	x24, x5
    5dd4:	mov	x19, x4
    5dd8:	mov	x20, x3
    5ddc:	mov	x21, x2
    5de0:	mov	x22, x1
    5de4:	mov	x23, x0
    5de8:	str	x8, [x0, #32]
    5dec:	bl	3160 <lzma_block_header_size@plt>
    5df0:	cbz	w0, 5e00 <lzma_block_uncomp_encode@@XZ_5.2+0x21c>
    5df4:	str	x25, [x23, #32]
    5df8:	mov	w0, #0xb                   	// #11
    5dfc:	b	5ee4 <lzma_block_uncomp_encode@@XZ_5.2+0x300>
    5e00:	ldr	x8, [x19]
    5e04:	ldr	w9, [x23, #4]
    5e08:	ldr	x10, [x23, #16]
    5e0c:	sub	x11, x24, x8
    5e10:	add	x9, x10, x9
    5e14:	cmp	x11, x9
    5e18:	b.cs	5e28 <lzma_block_uncomp_encode@@XZ_5.2+0x244>  // b.hs, b.nlast
    5e1c:	str	x25, [x23, #32]
    5e20:	mov	w0, #0xa                   	// #10
    5e24:	b	5ee4 <lzma_block_uncomp_encode@@XZ_5.2+0x300>
    5e28:	add	x1, x20, x8
    5e2c:	mov	x0, x23
    5e30:	bl	3540 <lzma_block_header_encode@plt>
    5e34:	str	x25, [x23, #32]
    5e38:	cbz	w0, 5e44 <lzma_block_uncomp_encode@@XZ_5.2+0x260>
    5e3c:	mov	w0, #0xb                   	// #11
    5e40:	b	5ee4 <lzma_block_uncomp_encode@@XZ_5.2+0x300>
    5e44:	ldr	w8, [x23, #4]
    5e48:	ldr	x9, [x19]
    5e4c:	add	x8, x9, x8
    5e50:	add	x9, x8, #0x1
    5e54:	add	x8, x20, x8
    5e58:	str	x9, [x19]
    5e5c:	cbz	x21, 5edc <lzma_block_uncomp_encode@@XZ_5.2+0x2f8>
    5e60:	mov	x24, xzr
    5e64:	mov	w9, #0x1                   	// #1
    5e68:	mov	w25, #0x10000               	// #65536
    5e6c:	strb	w9, [x8]
    5e70:	sub	x8, x21, x24
    5e74:	ldr	x9, [x19]
    5e78:	cmp	x8, #0x10, lsl #12
    5e7c:	csel	x23, x8, x25, cc  // cc = lo, ul, last
    5e80:	sub	x8, x23, #0x1
    5e84:	lsr	x10, x8, #8
    5e88:	add	x11, x9, #0x1
    5e8c:	str	x11, [x19]
    5e90:	strb	w10, [x20, x9]
    5e94:	ldr	x9, [x19]
    5e98:	add	x1, x22, x24
    5e9c:	mov	x2, x23
    5ea0:	add	x10, x9, #0x1
    5ea4:	str	x10, [x19]
    5ea8:	strb	w8, [x20, x9]
    5eac:	ldr	x8, [x19]
    5eb0:	add	x0, x20, x8
    5eb4:	bl	3090 <memcpy@plt>
    5eb8:	ldr	x8, [x19]
    5ebc:	add	x24, x23, x24
    5ec0:	cmp	x24, x21
    5ec4:	add	x8, x8, x23
    5ec8:	add	x9, x8, #0x1
    5ecc:	add	x8, x20, x8
    5ed0:	str	x9, [x19]
    5ed4:	mov	w9, #0x2                   	// #2
    5ed8:	b.cc	5e6c <lzma_block_uncomp_encode@@XZ_5.2+0x288>  // b.lo, b.ul, b.last
    5edc:	mov	w0, wzr
    5ee0:	strb	wzr, [x8]
    5ee4:	ldp	x20, x19, [sp, #208]
    5ee8:	ldp	x22, x21, [sp, #192]
    5eec:	ldp	x24, x23, [sp, #176]
    5ef0:	ldr	x25, [sp, #160]
    5ef4:	ldp	x29, x30, [sp, #144]
    5ef8:	add	sp, sp, #0xe0
    5efc:	ret
    5f00:	stp	x29, x30, [sp, #-48]!
    5f04:	stp	x22, x21, [sp, #16]
    5f08:	stp	x20, x19, [sp, #32]
    5f0c:	ldr	x8, [x0, #16]
    5f10:	adrp	x22, 5000 <lzma_index_dup@@XZ_5.0+0x198>
    5f14:	add	x22, x22, #0xf00
    5f18:	mov	x19, x2
    5f1c:	mov	x21, x0
    5f20:	cmp	x8, x22
    5f24:	mov	x20, x1
    5f28:	mov	x29, sp
    5f2c:	b.eq	5f3c <lzma_block_uncomp_encode@@XZ_5.2+0x358>  // b.none
    5f30:	mov	x0, x21
    5f34:	mov	x1, x20
    5f38:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    5f3c:	str	x22, [x21, #16]
    5f40:	cbz	x19, 5f64 <lzma_block_uncomp_encode@@XZ_5.2+0x380>
    5f44:	ldr	w8, [x19]
    5f48:	cmp	w8, #0x1
    5f4c:	b.ls	5f58 <lzma_block_uncomp_encode@@XZ_5.2+0x374>  // b.plast
    5f50:	mov	w0, #0x8                   	// #8
    5f54:	b	5f68 <lzma_block_uncomp_encode@@XZ_5.2+0x384>
    5f58:	ldr	w0, [x19, #8]
    5f5c:	cmp	w0, #0xf
    5f60:	b.ls	5f78 <lzma_block_uncomp_encode@@XZ_5.2+0x394>  // b.plast
    5f64:	mov	w0, #0xb                   	// #11
    5f68:	ldp	x20, x19, [sp, #32]
    5f6c:	ldp	x22, x21, [sp, #16]
    5f70:	ldp	x29, x30, [sp], #48
    5f74:	ret
    5f78:	bl	30e0 <lzma_check_is_supported@plt>
    5f7c:	tst	w0, #0xff
    5f80:	b.eq	600c <lzma_block_uncomp_encode@@XZ_5.2+0x428>  // b.none
    5f84:	ldr	x22, [x21]
    5f88:	cbnz	x22, 5fdc <lzma_block_uncomp_encode@@XZ_5.2+0x3f8>
    5f8c:	mov	w0, #0xd8                  	// #216
    5f90:	mov	x1, x20
    5f94:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    5f98:	cbz	x0, 6014 <lzma_block_uncomp_encode@@XZ_5.2+0x430>
    5f9c:	adrp	x8, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    5fa0:	adrp	x9, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    5fa4:	adrp	x10, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    5fa8:	mov	x22, x0
    5fac:	add	x8, x8, #0x1c
    5fb0:	add	x9, x9, #0x224
    5fb4:	add	x10, x10, #0x254
    5fb8:	mov	x11, #0xffffffffffffffff    	// #-1
    5fbc:	movi	v0.2d, #0x0
    5fc0:	str	x0, [x21]
    5fc4:	stp	x8, x9, [x21, #24]
    5fc8:	str	x10, [x21, #64]
    5fcc:	stp	xzr, x11, [x0]
    5fd0:	stp	q0, q0, [x0, #16]
    5fd4:	str	q0, [x0, #48]
    5fd8:	str	xzr, [x0, #64]
    5fdc:	str	wzr, [x22, #80]
    5fe0:	str	x19, [x22, #72]
    5fe4:	stp	xzr, xzr, [x22, #96]
    5fe8:	str	xzr, [x22, #88]
    5fec:	ldr	w1, [x19, #8]
    5ff0:	add	x0, x22, #0x70
    5ff4:	bl	c16c <lzma_check_size@@XZ_5.0+0x20>
    5ff8:	ldr	x2, [x19, #32]
    5ffc:	mov	x0, x22
    6000:	mov	x1, x20
    6004:	bl	692c <lzma_raw_encoder_memusage@@XZ_5.0+0x20>
    6008:	b	5f68 <lzma_block_uncomp_encode@@XZ_5.2+0x384>
    600c:	mov	w0, #0x3                   	// #3
    6010:	b	5f68 <lzma_block_uncomp_encode@@XZ_5.2+0x384>
    6014:	mov	w0, #0x5                   	// #5
    6018:	b	5f68 <lzma_block_uncomp_encode@@XZ_5.2+0x384>
    601c:	sub	sp, sp, #0x70
    6020:	stp	x29, x30, [sp, #16]
    6024:	stp	x26, x25, [sp, #48]
    6028:	stp	x24, x23, [sp, #64]
    602c:	stp	x22, x21, [sp, #80]
    6030:	stp	x20, x19, [sp, #96]
    6034:	ldr	x8, [x0, #96]
    6038:	ldr	x26, [x3]
    603c:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
    6040:	str	x27, [sp, #32]
    6044:	sub	x8, x9, x8
    6048:	sub	x9, x4, x26
    604c:	cmp	x8, x9
    6050:	add	x29, sp, #0x10
    6054:	b.cs	6060 <lzma_block_uncomp_encode@@XZ_5.2+0x47c>  // b.hs, b.nlast
    6058:	mov	w23, #0x9                   	// #9
    605c:	b	6200 <lzma_block_uncomp_encode@@XZ_5.2+0x61c>
    6060:	ldr	w8, [x0, #80]
    6064:	mov	x20, x7
    6068:	mov	x21, x6
    606c:	mov	x22, x5
    6070:	mov	x19, x0
    6074:	cmp	w8, #0x2
    6078:	b.eq	61a4 <lzma_block_uncomp_encode@@XZ_5.2+0x5c0>  // b.none
    607c:	cmp	w8, #0x1
    6080:	b.eq	6150 <lzma_block_uncomp_encode@@XZ_5.2+0x56c>  // b.none
    6084:	cbnz	w8, 60e0 <lzma_block_uncomp_encode@@XZ_5.2+0x4fc>
    6088:	ldr	w27, [x29, #96]
    608c:	ldr	x8, [x19, #24]
    6090:	ldr	x0, [x19]
    6094:	ldr	x23, [x21]
    6098:	mov	x5, x22
    609c:	mov	x6, x21
    60a0:	mov	x7, x20
    60a4:	mov	x25, x3
    60a8:	mov	x24, x2
    60ac:	str	w27, [sp]
    60b0:	blr	x8
    60b4:	ldr	x9, [x21]
    60b8:	ldr	x8, [x19, #88]
    60bc:	mov	x10, #0xfffffffffffffbbc    	// #-1092
    60c0:	movk	x10, #0x7fff, lsl #48
    60c4:	sub	x9, x9, x23
    60c8:	sub	x10, x10, x8
    60cc:	cmp	x10, x9
    60d0:	b.cs	60e8 <lzma_block_uncomp_encode@@XZ_5.2+0x504>  // b.hs, b.nlast
    60d4:	mov	w8, wzr
    60d8:	mov	w23, #0x9                   	// #9
    60dc:	b	614c <lzma_block_uncomp_encode@@XZ_5.2+0x568>
    60e0:	mov	w23, #0xb                   	// #11
    60e4:	b	6200 <lzma_block_uncomp_encode@@XZ_5.2+0x61c>
    60e8:	ldr	x10, [x25]
    60ec:	add	x8, x8, x9
    60f0:	ldr	x9, [x19, #96]
    60f4:	ldr	x11, [x19, #72]
    60f8:	sub	x3, x10, x26
    60fc:	str	x8, [x19, #88]
    6100:	add	x8, x9, x3
    6104:	str	x8, [x19, #96]
    6108:	ldr	w1, [x11, #8]
    610c:	mov	w23, w0
    6110:	add	x0, x19, #0x70
    6114:	add	x2, x24, x26
    6118:	bl	c1b0 <lzma_check_size@@XZ_5.0+0x64>
    611c:	cmp	w27, #0x1
    6120:	mov	w8, wzr
    6124:	b.eq	614c <lzma_block_uncomp_encode@@XZ_5.2+0x568>  // b.none
    6128:	cmp	w23, #0x1
    612c:	b.ne	614c <lzma_block_uncomp_encode@@XZ_5.2+0x568>  // b.any
    6130:	ldr	x8, [x19, #88]
    6134:	ldr	x9, [x19, #72]
    6138:	str	x8, [x9, #16]
    613c:	ldr	x10, [x19, #96]
    6140:	mov	w8, #0x1                   	// #1
    6144:	str	x10, [x9, #24]
    6148:	str	w8, [x19, #80]
    614c:	cbz	w8, 6200 <lzma_block_uncomp_encode@@XZ_5.2+0x61c>
    6150:	ldr	x8, [x19, #88]
    6154:	tst	x8, #0x3
    6158:	b.eq	6188 <lzma_block_uncomp_encode@@XZ_5.2+0x5a4>  // b.none
    615c:	add	x8, x8, #0x1
    6160:	ldr	x9, [x21]
    6164:	cmp	x9, x20
    6168:	b.cs	61e0 <lzma_block_uncomp_encode@@XZ_5.2+0x5fc>  // b.hs, b.nlast
    616c:	strb	wzr, [x22, x9]
    6170:	add	x9, x9, #0x1
    6174:	tst	x8, #0x3
    6178:	str	x9, [x21]
    617c:	str	x8, [x19, #88]
    6180:	add	x8, x8, #0x1
    6184:	b.ne	6160 <lzma_block_uncomp_encode@@XZ_5.2+0x57c>  // b.any
    6188:	ldr	x8, [x19, #72]
    618c:	ldr	w1, [x8, #8]
    6190:	cbz	w1, 61fc <lzma_block_uncomp_encode@@XZ_5.2+0x618>
    6194:	add	x0, x19, #0x70
    6198:	bl	c22c <lzma_check_size@@XZ_5.0+0xe0>
    619c:	mov	w8, #0x2                   	// #2
    61a0:	str	w8, [x19, #80]
    61a4:	ldr	x8, [x19, #72]
    61a8:	ldr	w0, [x8, #8]
    61ac:	bl	3270 <lzma_check_size@plt>
    61b0:	mov	w23, w0
    61b4:	add	x24, x19, #0x70
    61b8:	add	x1, x19, #0x68
    61bc:	mov	x0, x24
    61c0:	mov	x2, x23
    61c4:	mov	x3, x22
    61c8:	mov	x4, x21
    61cc:	mov	x5, x20
    61d0:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    61d4:	ldr	x8, [x19, #104]
    61d8:	cmp	x8, x23
    61dc:	b.cs	61e8 <lzma_block_uncomp_encode@@XZ_5.2+0x604>  // b.hs, b.nlast
    61e0:	mov	w23, wzr
    61e4:	b	6200 <lzma_block_uncomp_encode@@XZ_5.2+0x61c>
    61e8:	ldr	x8, [x19, #72]
    61ec:	mov	x1, x24
    61f0:	mov	x2, x23
    61f4:	add	x0, x8, #0x28
    61f8:	bl	3090 <memcpy@plt>
    61fc:	mov	w23, #0x1                   	// #1
    6200:	mov	w0, w23
    6204:	ldp	x20, x19, [sp, #96]
    6208:	ldp	x22, x21, [sp, #80]
    620c:	ldp	x24, x23, [sp, #64]
    6210:	ldp	x26, x25, [sp, #48]
    6214:	ldr	x27, [sp, #32]
    6218:	ldp	x29, x30, [sp, #16]
    621c:	add	sp, sp, #0x70
    6220:	ret
    6224:	stp	x29, x30, [sp, #-32]!
    6228:	stp	x20, x19, [sp, #16]
    622c:	mov	x29, sp
    6230:	mov	x19, x1
    6234:	mov	x20, x0
    6238:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    623c:	mov	x0, x20
    6240:	mov	x1, x19
    6244:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    6248:	ldp	x20, x19, [sp, #16]
    624c:	ldp	x29, x30, [sp], #32
    6250:	ret
    6254:	stp	x29, x30, [sp, #-16]!
    6258:	ldr	w8, [x0, #80]
    625c:	mov	x29, sp
    6260:	cbz	w8, 6270 <lzma_block_uncomp_encode@@XZ_5.2+0x68c>
    6264:	mov	w0, #0xb                   	// #11
    6268:	ldp	x29, x30, [sp], #16
    626c:	ret
    6270:	mov	x2, x3
    6274:	bl	3904 <lzma_version_string@@XZ_5.0+0x234>
    6278:	ldp	x29, x30, [sp], #16
    627c:	ret

0000000000006280 <lzma_block_encoder@@XZ_5.0>:
    6280:	stp	x29, x30, [sp, #-48]!
    6284:	str	x21, [sp, #16]
    6288:	stp	x20, x19, [sp, #32]
    628c:	mov	x29, sp
    6290:	mov	x21, x1
    6294:	mov	x19, x0
    6298:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    629c:	mov	w20, w0
    62a0:	cbnz	w0, 62e0 <lzma_block_encoder@@XZ_5.0+0x60>
    62a4:	ldp	x1, x0, [x19, #48]
    62a8:	mov	x2, x21
    62ac:	bl	5f00 <lzma_block_uncomp_encode@@XZ_5.2+0x31c>
    62b0:	cbz	w0, 62f4 <lzma_block_encoder@@XZ_5.0+0x74>
    62b4:	mov	w21, w0
    62b8:	mov	x0, x19
    62bc:	bl	3330 <lzma_end@plt>
    62c0:	mov	w8, wzr
    62c4:	mov	w20, w21
    62c8:	cbz	w8, 62e0 <lzma_block_encoder@@XZ_5.0+0x60>
    62cc:	ldr	x8, [x19, #56]
    62d0:	mov	w20, wzr
    62d4:	mov	w9, #0x1                   	// #1
    62d8:	strb	w9, [x8, #88]
    62dc:	strb	w9, [x8, #91]
    62e0:	mov	w0, w20
    62e4:	ldp	x20, x19, [sp, #32]
    62e8:	ldr	x21, [sp, #16]
    62ec:	ldp	x29, x30, [sp], #48
    62f0:	ret
    62f4:	mov	w8, #0x1                   	// #1
    62f8:	cbnz	w8, 62cc <lzma_block_encoder@@XZ_5.0+0x4c>
    62fc:	b	62e0 <lzma_block_encoder@@XZ_5.0+0x60>

0000000000006300 <lzma_block_header_size@@XZ_5.0>:
    6300:	stp	x29, x30, [sp, #-64]!
    6304:	stp	x22, x21, [sp, #32]
    6308:	stp	x20, x19, [sp, #48]
    630c:	ldr	w8, [x0]
    6310:	str	x23, [sp, #16]
    6314:	mov	x29, sp
    6318:	cmp	w8, #0x1
    631c:	b.ls	6328 <lzma_block_header_size@@XZ_5.0+0x28>  // b.plast
    6320:	mov	w20, #0x8                   	// #8
    6324:	b	63f8 <lzma_block_header_size@@XZ_5.0+0xf8>
    6328:	ldr	x21, [x0, #16]
    632c:	mov	x19, x0
    6330:	mov	w22, #0x6                   	// #6
    6334:	cmn	x21, #0x1
    6338:	b.eq	6360 <lzma_block_header_size@@XZ_5.0+0x60>  // b.none
    633c:	mov	x0, x21
    6340:	bl	3480 <lzma_vli_size@plt>
    6344:	cmp	w0, #0x0
    6348:	add	w8, w0, #0x6
    634c:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    6350:	csel	w22, w22, w8, eq  // eq = none
    6354:	mov	w20, #0xb                   	// #11
    6358:	cbz	x21, 63f8 <lzma_block_header_size@@XZ_5.0+0xf8>
    635c:	cbz	w0, 63f8 <lzma_block_header_size@@XZ_5.0+0xf8>
    6360:	ldr	x0, [x19, #24]
    6364:	cmn	x0, #0x1
    6368:	b.eq	6378 <lzma_block_header_size@@XZ_5.0+0x78>  // b.none
    636c:	bl	3480 <lzma_vli_size@plt>
    6370:	cbz	w0, 63f4 <lzma_block_header_size@@XZ_5.0+0xf4>
    6374:	add	w22, w0, w22
    6378:	ldr	x8, [x19, #32]
    637c:	cbz	x8, 63f4 <lzma_block_header_size@@XZ_5.0+0xf4>
    6380:	ldr	x8, [x8]
    6384:	cmn	x8, #0x1
    6388:	b.eq	63f4 <lzma_block_header_size@@XZ_5.0+0xf4>  // b.none
    638c:	ldr	x8, [x19, #32]
    6390:	mov	w20, #0xb                   	// #11
    6394:	ldr	x9, [x8]
    6398:	cmn	x9, #0x1
    639c:	b.eq	63ec <lzma_block_header_size@@XZ_5.0+0xec>  // b.none
    63a0:	mov	w21, #0x10                  	// #16
    63a4:	add	x23, x21, #0x10
    63a8:	cmp	x23, #0x60
    63ac:	b.eq	6410 <lzma_block_header_size@@XZ_5.0+0x110>  // b.none
    63b0:	add	x8, x8, x21
    63b4:	sub	x1, x8, #0x10
    63b8:	add	x0, x29, #0x1c
    63bc:	bl	30f0 <lzma_filter_flags_size@plt>
    63c0:	ldr	w8, [x29, #28]
    63c4:	cmp	w0, #0x0
    63c8:	csel	w20, w20, w0, eq  // eq = none
    63cc:	csel	w8, w8, wzr, eq  // eq = none
    63d0:	add	w22, w8, w22
    63d4:	cbnz	w0, 641c <lzma_block_header_size@@XZ_5.0+0x11c>
    63d8:	ldr	x8, [x19, #32]
    63dc:	ldr	x9, [x8, x21]
    63e0:	mov	x21, x23
    63e4:	cmn	x9, #0x1
    63e8:	b.ne	63a4 <lzma_block_header_size@@XZ_5.0+0xa4>  // b.any
    63ec:	mov	w8, #0x1                   	// #1
    63f0:	b	6420 <lzma_block_header_size@@XZ_5.0+0x120>
    63f4:	mov	w20, #0xb                   	// #11
    63f8:	mov	w0, w20
    63fc:	ldp	x20, x19, [sp, #48]
    6400:	ldp	x22, x21, [sp, #32]
    6404:	ldr	x23, [sp, #16]
    6408:	ldp	x29, x30, [sp], #64
    640c:	ret
    6410:	mov	w8, wzr
    6414:	mov	w20, #0xb                   	// #11
    6418:	b	6420 <lzma_block_header_size@@XZ_5.0+0x120>
    641c:	mov	w8, wzr
    6420:	cbz	w8, 63f8 <lzma_block_header_size@@XZ_5.0+0xf8>
    6424:	add	w8, w22, #0x3
    6428:	mov	w20, wzr
    642c:	and	w8, w8, #0xfffffffc
    6430:	str	w8, [x19, #4]
    6434:	b	63f8 <lzma_block_header_size@@XZ_5.0+0xf8>

0000000000006438 <lzma_block_header_encode@@XZ_5.0>:
    6438:	sub	sp, sp, #0x50
    643c:	stp	x29, x30, [sp, #16]
    6440:	stp	x24, x23, [sp, #32]
    6444:	stp	x22, x21, [sp, #48]
    6448:	stp	x20, x19, [sp, #64]
    644c:	add	x29, sp, #0x10
    6450:	mov	x19, x1
    6454:	mov	x20, x0
    6458:	bl	3190 <lzma_block_unpadded_size@plt>
    645c:	cbz	x0, 65a4 <lzma_block_header_encode@@XZ_5.0+0x16c>
    6460:	ldr	x8, [x20, #24]
    6464:	cmn	x8, #0x1
    6468:	b.lt	65a4 <lzma_block_header_encode@@XZ_5.0+0x16c>  // b.tstop
    646c:	ldr	w8, [x20, #4]
    6470:	mov	w9, #0x2                   	// #2
    6474:	strb	wzr, [x19, #1]
    6478:	sub	w21, w8, #0x4
    647c:	lsr	w8, w21, #2
    6480:	strb	w8, [x19]
    6484:	str	x9, [sp, #8]
    6488:	ldr	x0, [x20, #16]
    648c:	cmn	x0, #0x1
    6490:	b.eq	64c0 <lzma_block_header_encode@@XZ_5.0+0x88>  // b.none
    6494:	add	x3, sp, #0x8
    6498:	mov	x1, xzr
    649c:	mov	x2, x19
    64a0:	mov	x4, x21
    64a4:	bl	3450 <lzma_vli_encode@plt>
    64a8:	mov	w22, w0
    64ac:	cbnz	w0, 65a8 <lzma_block_header_encode@@XZ_5.0+0x170>
    64b0:	ldrb	w8, [x19, #1]
    64b4:	orr	w8, w8, #0x40
    64b8:	strb	w8, [x19, #1]
    64bc:	b	64c0 <lzma_block_header_encode@@XZ_5.0+0x88>
    64c0:	ldr	x0, [x20, #24]
    64c4:	cmn	x0, #0x1
    64c8:	b.eq	64f8 <lzma_block_header_encode@@XZ_5.0+0xc0>  // b.none
    64cc:	add	x3, sp, #0x8
    64d0:	mov	x1, xzr
    64d4:	mov	x2, x19
    64d8:	mov	x4, x21
    64dc:	bl	3450 <lzma_vli_encode@plt>
    64e0:	cmp	w0, #0x0
    64e4:	csel	w22, w22, w0, eq  // eq = none
    64e8:	cbnz	w0, 65a8 <lzma_block_header_encode@@XZ_5.0+0x170>
    64ec:	ldrb	w8, [x19, #1]
    64f0:	orr	w8, w8, #0x80
    64f4:	strb	w8, [x19, #1]
    64f8:	ldr	x8, [x20, #32]
    64fc:	cbz	x8, 65a4 <lzma_block_header_encode@@XZ_5.0+0x16c>
    6500:	ldr	x8, [x8]
    6504:	cmn	x8, #0x1
    6508:	b.eq	65a4 <lzma_block_header_encode@@XZ_5.0+0x16c>  // b.none
    650c:	mov	x24, xzr
    6510:	mov	x23, #0xffffffffffffffff    	// #-1
    6514:	cmp	x23, #0x3
    6518:	b.eq	65a4 <lzma_block_header_encode@@XZ_5.0+0x16c>  // b.none
    651c:	ldr	x8, [x20, #32]
    6520:	add	x2, sp, #0x8
    6524:	mov	x1, x19
    6528:	mov	x3, x21
    652c:	add	x0, x8, x24
    6530:	bl	3350 <lzma_filter_flags_encode@plt>
    6534:	cmp	w0, #0x0
    6538:	csel	w22, w22, w0, eq  // eq = none
    653c:	cbnz	w0, 65a8 <lzma_block_header_encode@@XZ_5.0+0x170>
    6540:	ldr	x8, [x20, #32]
    6544:	add	x23, x23, #0x1
    6548:	add	x8, x8, x24
    654c:	ldr	x8, [x8, #16]
    6550:	add	x24, x24, #0x10
    6554:	cmn	x8, #0x1
    6558:	b.ne	6514 <lzma_block_header_encode@@XZ_5.0+0xdc>  // b.any
    655c:	ldrb	w8, [x19, #1]
    6560:	mov	w1, wzr
    6564:	orr	w8, w8, w23
    6568:	strb	w8, [x19, #1]
    656c:	ldr	x8, [sp, #8]
    6570:	add	x0, x19, x8
    6574:	sub	x2, x21, x8
    6578:	bl	3230 <memset@plt>
    657c:	mov	x0, x19
    6580:	mov	x1, x21
    6584:	mov	w2, wzr
    6588:	add	x20, x19, x21
    658c:	bl	31c0 <lzma_crc32@plt>
    6590:	mov	w1, w0
    6594:	mov	x0, x20
    6598:	bl	65c4 <lzma_block_header_encode@@XZ_5.0+0x18c>
    659c:	mov	w22, wzr
    65a0:	b	65a8 <lzma_block_header_encode@@XZ_5.0+0x170>
    65a4:	mov	w22, #0xb                   	// #11
    65a8:	mov	w0, w22
    65ac:	ldp	x20, x19, [sp, #64]
    65b0:	ldp	x22, x21, [sp, #48]
    65b4:	ldp	x24, x23, [sp, #32]
    65b8:	ldp	x29, x30, [sp, #16]
    65bc:	add	sp, sp, #0x50
    65c0:	ret
    65c4:	str	w1, [x0]
    65c8:	ret

00000000000065cc <lzma_easy_buffer_encode@@XZ_5.0>:
    65cc:	sub	sp, sp, #0x110
    65d0:	stp	x28, x25, [sp, #208]
    65d4:	mov	w25, w1
    65d8:	mov	w1, w0
    65dc:	mov	x0, sp
    65e0:	stp	x29, x30, [sp, #192]
    65e4:	stp	x24, x23, [sp, #224]
    65e8:	stp	x22, x21, [sp, #240]
    65ec:	stp	x20, x19, [sp, #256]
    65f0:	add	x29, sp, #0xc0
    65f4:	mov	x19, x7
    65f8:	mov	x20, x6
    65fc:	mov	x21, x5
    6600:	mov	x22, x4
    6604:	mov	x23, x3
    6608:	mov	x24, x2
    660c:	bl	3f50 <lzma_block_total_size@@XZ_5.0+0x2c>
    6610:	tbz	w0, #0, 661c <lzma_easy_buffer_encode@@XZ_5.0+0x50>
    6614:	mov	w0, #0x8                   	// #8
    6618:	b	6640 <lzma_easy_buffer_encode@@XZ_5.0+0x74>
    661c:	mov	x0, sp
    6620:	mov	w1, w25
    6624:	mov	x2, x24
    6628:	mov	x3, x23
    662c:	mov	x4, x22
    6630:	mov	x5, x21
    6634:	mov	x6, x20
    6638:	mov	x7, x19
    663c:	bl	31f0 <lzma_stream_buffer_encode@plt>
    6640:	ldp	x20, x19, [sp, #256]
    6644:	ldp	x22, x21, [sp, #240]
    6648:	ldp	x24, x23, [sp, #224]
    664c:	ldp	x28, x25, [sp, #208]
    6650:	ldp	x29, x30, [sp, #192]
    6654:	add	sp, sp, #0x110
    6658:	ret

000000000000665c <lzma_easy_encoder@@XZ_5.0>:
    665c:	sub	sp, sp, #0xe0
    6660:	stp	x20, x19, [sp, #208]
    6664:	mov	x20, x0
    6668:	mov	x0, sp
    666c:	stp	x29, x30, [sp, #192]
    6670:	add	x29, sp, #0xc0
    6674:	mov	w19, w2
    6678:	bl	3f50 <lzma_block_total_size@@XZ_5.0+0x2c>
    667c:	tbz	w0, #0, 6688 <lzma_easy_encoder@@XZ_5.0+0x2c>
    6680:	mov	w0, #0x8                   	// #8
    6684:	b	6698 <lzma_easy_encoder@@XZ_5.0+0x3c>
    6688:	mov	x1, sp
    668c:	mov	x0, x20
    6690:	mov	w2, w19
    6694:	bl	34a0 <lzma_stream_encoder@plt>
    6698:	ldp	x20, x19, [sp, #208]
    669c:	ldp	x29, x30, [sp, #192]
    66a0:	add	sp, sp, #0xe0
    66a4:	ret

00000000000066a8 <lzma_easy_encoder_memusage@@XZ_5.0>:
    66a8:	sub	sp, sp, #0xd0
    66ac:	mov	w1, w0
    66b0:	mov	x0, sp
    66b4:	stp	x29, x30, [sp, #192]
    66b8:	add	x29, sp, #0xc0
    66bc:	bl	3f50 <lzma_block_total_size@@XZ_5.0+0x2c>
    66c0:	tbz	w0, #0, 66cc <lzma_easy_encoder_memusage@@XZ_5.0+0x24>
    66c4:	mov	w0, #0xffffffff            	// #-1
    66c8:	b	66d4 <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>
    66cc:	mov	x0, sp
    66d0:	bl	3220 <lzma_raw_encoder_memusage@plt>
    66d4:	ldp	x29, x30, [sp, #192]
    66d8:	add	sp, sp, #0xd0
    66dc:	ret

00000000000066e0 <lzma_raw_buffer_encode@@XZ_5.0>:
    66e0:	sub	sp, sp, #0xb0
    66e4:	cmp	x2, #0x0
    66e8:	cset	w8, eq  // eq = none
    66ec:	cmp	x3, #0x0
    66f0:	cset	w9, ne  // ne = any
    66f4:	stp	x26, x25, [sp, #112]
    66f8:	stp	x24, x23, [sp, #128]
    66fc:	mov	x24, x2
    6700:	and	w8, w8, w9
    6704:	mov	w25, #0xb                   	// #11
    6708:	stp	x29, x30, [sp, #96]
    670c:	stp	x22, x21, [sp, #144]
    6710:	stp	x20, x19, [sp, #160]
    6714:	add	x29, sp, #0x60
    6718:	tbnz	w8, #0, 67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    671c:	mov	x22, x4
    6720:	cbz	x4, 67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6724:	mov	x19, x5
    6728:	cbz	x5, 67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    672c:	ldr	x8, [x19]
    6730:	mov	x21, x6
    6734:	cmp	x8, x6
    6738:	b.ls	6744 <lzma_raw_buffer_encode@@XZ_5.0+0x64>  // b.plast
    673c:	mov	w25, #0xb                   	// #11
    6740:	b	67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6744:	mov	x2, x0
    6748:	movi	v0.2d, #0x0
    674c:	mov	x8, #0xffffffffffffffff    	// #-1
    6750:	add	x0, sp, #0x10
    6754:	mov	x23, x3
    6758:	mov	x20, x1
    675c:	str	xzr, [sp, #80]
    6760:	stp	q0, q0, [sp, #48]
    6764:	stp	q0, q0, [sp, #16]
    6768:	str	x8, [sp, #24]
    676c:	bl	692c <lzma_raw_encoder_memusage@@XZ_5.0+0x20>
    6770:	mov	w25, w0
    6774:	cbnz	w0, 67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6778:	ldr	x8, [sp, #40]
    677c:	ldr	x0, [sp, #16]
    6780:	ldr	x26, [x19]
    6784:	mov	w9, #0x3                   	// #3
    6788:	add	x3, sp, #0x8
    678c:	mov	x1, x20
    6790:	mov	x2, x24
    6794:	mov	x4, x23
    6798:	mov	x5, x22
    679c:	mov	x6, x19
    67a0:	mov	x7, x21
    67a4:	str	xzr, [sp, #8]
    67a8:	str	w9, [sp]
    67ac:	blr	x8
    67b0:	mov	w25, w0
    67b4:	add	x0, sp, #0x10
    67b8:	mov	x1, x20
    67bc:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    67c0:	cmp	w25, #0x1
    67c4:	b.eq	67d8 <lzma_raw_buffer_encode@@XZ_5.0+0xf8>  // b.none
    67c8:	cbnz	w25, 67d0 <lzma_raw_buffer_encode@@XZ_5.0+0xf0>
    67cc:	mov	w25, #0xa                   	// #10
    67d0:	str	x26, [x19]
    67d4:	b	67dc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    67d8:	mov	w25, wzr
    67dc:	mov	w0, w25
    67e0:	ldp	x20, x19, [sp, #160]
    67e4:	ldp	x22, x21, [sp, #144]
    67e8:	ldp	x24, x23, [sp, #128]
    67ec:	ldp	x26, x25, [sp, #112]
    67f0:	ldp	x29, x30, [sp, #96]
    67f4:	add	sp, sp, #0xb0
    67f8:	ret

00000000000067fc <lzma_filter_encoder_is_supported@@XZ_5.0>:
    67fc:	stp	x29, x30, [sp, #-16]!
    6800:	mov	x29, sp
    6804:	bl	6818 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    6808:	cmp	x0, #0x0
    680c:	cset	w0, ne  // ne = any
    6810:	ldp	x29, x30, [sp], #16
    6814:	ret
    6818:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    681c:	mov	x8, xzr
    6820:	add	x9, x9, #0xa00
    6824:	ldr	x10, [x9, x8]
    6828:	cmp	x10, x0
    682c:	b.eq	6844 <lzma_filter_encoder_is_supported@@XZ_5.0+0x48>  // b.none
    6830:	add	x8, x8, #0x38
    6834:	cmp	x8, #0x1f8
    6838:	b.ne	6824 <lzma_filter_encoder_is_supported@@XZ_5.0+0x28>  // b.any
    683c:	mov	x0, xzr
    6840:	ret
    6844:	add	x0, x9, x8
    6848:	ret

000000000000684c <lzma_filters_update@@XZ_5.0>:
    684c:	sub	sp, sp, #0x80
    6850:	stp	x29, x30, [sp, #80]
    6854:	stp	x20, x19, [sp, #112]
    6858:	str	x21, [sp, #96]
    685c:	ldr	x21, [x0, #56]
    6860:	add	x29, sp, #0x50
    6864:	ldr	x8, [x21, #64]
    6868:	cbz	x8, 68ec <lzma_filters_update@@XZ_5.0+0xa0>
    686c:	mov	x20, x0
    6870:	mov	x0, x1
    6874:	mov	x19, x1
    6878:	bl	3220 <lzma_raw_encoder_memusage@plt>
    687c:	cmn	x0, #0x1
    6880:	b.eq	68f4 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    6884:	mov	x9, xzr
    6888:	mov	x8, xzr
    688c:	add	x10, x19, x8
    6890:	ldr	x10, [x10, #16]
    6894:	add	x8, x8, #0x10
    6898:	add	x9, x9, #0x1
    689c:	cmn	x10, #0x1
    68a0:	b.ne	688c <lzma_filters_update@@XZ_5.0+0x40>  // b.any
    68a4:	mov	x10, sp
    68a8:	cbz	x9, 68c8 <lzma_filters_update@@XZ_5.0+0x7c>
    68ac:	add	x11, x10, x8
    68b0:	sub	x11, x11, #0x10
    68b4:	mov	x12, x19
    68b8:	ldr	q0, [x12], #16
    68bc:	sub	x9, x9, #0x1
    68c0:	str	q0, [x11], #-16
    68c4:	cbnz	x9, 68b8 <lzma_filters_update@@XZ_5.0+0x6c>
    68c8:	mov	x9, #0xffffffffffffffff    	// #-1
    68cc:	str	x9, [x10, x8]
    68d0:	ldr	x8, [x21, #64]
    68d4:	ldr	x0, [x21]
    68d8:	ldr	x1, [x20, #48]
    68dc:	mov	x3, sp
    68e0:	mov	x2, x19
    68e4:	blr	x8
    68e8:	b	68f8 <lzma_filters_update@@XZ_5.0+0xac>
    68ec:	mov	w0, #0xb                   	// #11
    68f0:	b	68f8 <lzma_filters_update@@XZ_5.0+0xac>
    68f4:	mov	w0, #0x8                   	// #8
    68f8:	ldp	x20, x19, [sp, #112]
    68fc:	ldr	x21, [sp, #96]
    6900:	ldp	x29, x30, [sp, #80]
    6904:	add	sp, sp, #0x80
    6908:	ret

000000000000690c <lzma_raw_encoder_memusage@@XZ_5.0>:
    690c:	stp	x29, x30, [sp, #-16]!
    6910:	mov	x1, x0
    6914:	adrp	x0, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6918:	add	x0, x0, #0x818
    691c:	mov	x29, sp
    6920:	bl	43e8 <lzma_filters_copy@@XZ_5.0+0x44c>
    6924:	ldp	x29, x30, [sp], #16
    6928:	ret
    692c:	stp	x29, x30, [sp, #-16]!
    6930:	adrp	x3, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6934:	add	x3, x3, #0x818
    6938:	mov	w4, #0x1                   	// #1
    693c:	mov	x29, sp
    6940:	bl	4130 <lzma_filters_copy@@XZ_5.0+0x194>
    6944:	ldp	x29, x30, [sp], #16
    6948:	ret

000000000000694c <lzma_raw_encoder@@XZ_5.0>:
    694c:	stp	x29, x30, [sp, #-48]!
    6950:	stp	x22, x21, [sp, #16]
    6954:	stp	x20, x19, [sp, #32]
    6958:	mov	x29, sp
    695c:	mov	x21, x1
    6960:	mov	x19, x0
    6964:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    6968:	mov	w20, w0
    696c:	cbnz	w0, 69c0 <lzma_raw_encoder@@XZ_5.0+0x74>
    6970:	ldp	x1, x0, [x19, #48]
    6974:	adrp	x3, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6978:	add	x3, x3, #0x818
    697c:	mov	w4, #0x1                   	// #1
    6980:	mov	x2, x21
    6984:	mov	w22, #0x1                   	// #1
    6988:	bl	4130 <lzma_filters_copy@@XZ_5.0+0x194>
    698c:	cbz	w0, 69a4 <lzma_raw_encoder@@XZ_5.0+0x58>
    6990:	mov	w21, w0
    6994:	mov	x0, x19
    6998:	bl	3330 <lzma_end@plt>
    699c:	mov	w22, wzr
    69a0:	mov	w20, w21
    69a4:	cbz	w22, 69c0 <lzma_raw_encoder@@XZ_5.0+0x74>
    69a8:	ldr	x8, [x19, #56]
    69ac:	mov	w20, wzr
    69b0:	mov	w9, #0x101                 	// #257
    69b4:	mov	w10, #0x1                   	// #1
    69b8:	strh	w9, [x8, #88]
    69bc:	strb	w10, [x8, #91]
    69c0:	mov	w0, w20
    69c4:	ldp	x20, x19, [sp, #32]
    69c8:	ldp	x22, x21, [sp, #16]
    69cc:	ldp	x29, x30, [sp], #48
    69d0:	ret
    69d4:	stp	x29, x30, [sp, #-32]!
    69d8:	stp	x20, x19, [sp, #16]
    69dc:	mov	x8, x0
    69e0:	ldr	x0, [x0]
    69e4:	mov	x29, sp
    69e8:	cmn	x0, #0x1
    69ec:	b.eq	6a3c <lzma_raw_encoder@@XZ_5.0+0xf0>  // b.none
    69f0:	mov	x19, xzr
    69f4:	add	x20, x8, #0x10
    69f8:	bl	6818 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    69fc:	ldr	x8, [x0, #24]
    6a00:	cbz	x8, 6a24 <lzma_raw_encoder@@XZ_5.0+0xd8>
    6a04:	ldur	x0, [x20, #-8]
    6a08:	blr	x8
    6a0c:	cmp	x0, x19
    6a10:	csel	x9, x0, x19, hi  // hi = pmore
    6a14:	cmp	x0, #0x0
    6a18:	cset	w8, eq  // eq = none
    6a1c:	csel	x19, x19, x9, eq  // eq = none
    6a20:	cbz	x0, 6a28 <lzma_raw_encoder@@XZ_5.0+0xdc>
    6a24:	mov	w8, wzr
    6a28:	cbnz	w8, 6a44 <lzma_raw_encoder@@XZ_5.0+0xf8>
    6a2c:	ldr	x0, [x20], #16
    6a30:	cmn	x0, #0x1
    6a34:	b.ne	69f8 <lzma_raw_encoder@@XZ_5.0+0xac>  // b.any
    6a38:	b	6a40 <lzma_raw_encoder@@XZ_5.0+0xf4>
    6a3c:	mov	x19, xzr
    6a40:	mov	w8, #0x2                   	// #2
    6a44:	cmp	w8, #0x2
    6a48:	csel	x0, x19, xzr, eq  // eq = none
    6a4c:	ldp	x20, x19, [sp, #16]
    6a50:	ldp	x29, x30, [sp], #32
    6a54:	ret

0000000000006a58 <lzma_properties_size@@XZ_5.0>:
    6a58:	stp	x29, x30, [sp, #-48]!
    6a5c:	stp	x20, x19, [sp, #32]
    6a60:	str	x21, [sp, #16]
    6a64:	ldr	x21, [x1]
    6a68:	mov	x19, x0
    6a6c:	mov	x29, sp
    6a70:	mov	x20, x1
    6a74:	mov	x0, x21
    6a78:	bl	6818 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    6a7c:	cbz	x0, 6a9c <lzma_properties_size@@XZ_5.0+0x44>
    6a80:	ldr	x9, [x0, #32]
    6a84:	mov	x8, x0
    6a88:	cbz	x9, 6ab0 <lzma_properties_size@@XZ_5.0+0x58>
    6a8c:	ldr	x1, [x20, #8]
    6a90:	mov	x0, x19
    6a94:	blr	x9
    6a98:	b	6abc <lzma_properties_size@@XZ_5.0+0x64>
    6a9c:	cmp	x21, #0x0
    6aa0:	mov	w8, #0xb                   	// #11
    6aa4:	mov	w9, #0x8                   	// #8
    6aa8:	csel	w0, w9, w8, ge  // ge = tcont
    6aac:	b	6abc <lzma_properties_size@@XZ_5.0+0x64>
    6ab0:	ldr	w8, [x8, #40]
    6ab4:	mov	w0, wzr
    6ab8:	str	w8, [x19]
    6abc:	ldp	x20, x19, [sp, #32]
    6ac0:	ldr	x21, [sp, #16]
    6ac4:	ldp	x29, x30, [sp], #48
    6ac8:	ret

0000000000006acc <lzma_properties_encode@@XZ_5.0>:
    6acc:	stp	x29, x30, [sp, #-32]!
    6ad0:	stp	x20, x19, [sp, #16]
    6ad4:	mov	x20, x0
    6ad8:	ldr	x0, [x0]
    6adc:	mov	x29, sp
    6ae0:	mov	x19, x1
    6ae4:	bl	6818 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    6ae8:	cbz	x0, 6b04 <lzma_properties_encode@@XZ_5.0+0x38>
    6aec:	ldr	x8, [x0, #48]
    6af0:	cbz	x8, 6b0c <lzma_properties_encode@@XZ_5.0+0x40>
    6af4:	ldr	x0, [x20, #8]
    6af8:	mov	x1, x19
    6afc:	blr	x8
    6b00:	b	6b10 <lzma_properties_encode@@XZ_5.0+0x44>
    6b04:	mov	w0, #0xb                   	// #11
    6b08:	b	6b10 <lzma_properties_encode@@XZ_5.0+0x44>
    6b0c:	mov	w0, wzr
    6b10:	ldp	x20, x19, [sp, #16]
    6b14:	ldp	x29, x30, [sp], #32
    6b18:	ret

0000000000006b1c <lzma_filter_flags_size@@XZ_5.0>:
    6b1c:	stp	x29, x30, [sp, #-48]!
    6b20:	stp	x20, x19, [sp, #32]
    6b24:	ldr	x8, [x1]
    6b28:	str	x21, [sp, #16]
    6b2c:	mov	x29, sp
    6b30:	lsr	x8, x8, #62
    6b34:	cbz	x8, 6b40 <lzma_filter_flags_size@@XZ_5.0+0x24>
    6b38:	mov	w0, #0xb                   	// #11
    6b3c:	b	6b7c <lzma_filter_flags_size@@XZ_5.0+0x60>
    6b40:	mov	x20, x1
    6b44:	mov	x19, x0
    6b48:	bl	3370 <lzma_properties_size@plt>
    6b4c:	cbnz	w0, 6b7c <lzma_filter_flags_size@@XZ_5.0+0x60>
    6b50:	ldr	x0, [x20]
    6b54:	bl	3480 <lzma_vli_size@plt>
    6b58:	ldr	w20, [x19]
    6b5c:	mov	w21, w0
    6b60:	mov	x0, x20
    6b64:	bl	3480 <lzma_vli_size@plt>
    6b68:	mov	w8, w0
    6b6c:	add	w9, w20, w21
    6b70:	mov	w0, wzr
    6b74:	add	w8, w9, w8
    6b78:	str	w8, [x19]
    6b7c:	ldp	x20, x19, [sp, #32]
    6b80:	ldr	x21, [sp, #16]
    6b84:	ldp	x29, x30, [sp], #48
    6b88:	ret

0000000000006b8c <lzma_filter_flags_encode@@XZ_5.0>:
    6b8c:	stp	x29, x30, [sp, #-64]!
    6b90:	stp	x22, x21, [sp, #32]
    6b94:	stp	x20, x19, [sp, #48]
    6b98:	mov	x21, x0
    6b9c:	ldr	x0, [x0]
    6ba0:	str	x23, [sp, #16]
    6ba4:	mov	x29, sp
    6ba8:	lsr	x8, x0, #62
    6bac:	cbz	x8, 6bb8 <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    6bb0:	mov	w19, #0xb                   	// #11
    6bb4:	b	6c1c <lzma_filter_flags_encode@@XZ_5.0+0x90>
    6bb8:	mov	x22, x3
    6bbc:	mov	x20, x2
    6bc0:	mov	x23, x1
    6bc4:	mov	x1, xzr
    6bc8:	mov	x2, x23
    6bcc:	mov	x3, x20
    6bd0:	mov	x4, x22
    6bd4:	bl	3450 <lzma_vli_encode@plt>
    6bd8:	mov	w19, w0
    6bdc:	cbnz	w0, 6c1c <lzma_filter_flags_encode@@XZ_5.0+0x90>
    6be0:	add	x0, x29, #0x1c
    6be4:	mov	x1, x21
    6be8:	bl	3370 <lzma_properties_size@plt>
    6bec:	cmp	w0, #0x0
    6bf0:	csel	w19, w19, w0, eq  // eq = none
    6bf4:	cbnz	w0, 6c1c <lzma_filter_flags_encode@@XZ_5.0+0x90>
    6bf8:	ldr	w0, [x29, #28]
    6bfc:	mov	x1, xzr
    6c00:	mov	x2, x23
    6c04:	mov	x3, x20
    6c08:	mov	x4, x22
    6c0c:	bl	3450 <lzma_vli_encode@plt>
    6c10:	cmp	w0, #0x0
    6c14:	csel	w19, w19, w0, eq  // eq = none
    6c18:	cbz	w0, 6c34 <lzma_filter_flags_encode@@XZ_5.0+0xa8>
    6c1c:	mov	w0, w19
    6c20:	ldp	x20, x19, [sp, #48]
    6c24:	ldp	x22, x21, [sp, #32]
    6c28:	ldr	x23, [sp, #16]
    6c2c:	ldp	x29, x30, [sp], #64
    6c30:	ret
    6c34:	ldr	x8, [x20]
    6c38:	ldr	w9, [x29, #28]
    6c3c:	sub	x10, x22, x8
    6c40:	cmp	x10, x9
    6c44:	b.cc	6bb0 <lzma_filter_flags_encode@@XZ_5.0+0x24>  // b.lo, b.ul, b.last
    6c48:	add	x1, x23, x8
    6c4c:	mov	x0, x21
    6c50:	bl	3400 <lzma_properties_encode@plt>
    6c54:	cmp	w0, #0x0
    6c58:	csel	w19, w19, w0, eq  // eq = none
    6c5c:	cbnz	w0, 6c1c <lzma_filter_flags_encode@@XZ_5.0+0x90>
    6c60:	ldr	w8, [x29, #28]
    6c64:	ldr	x9, [x20]
    6c68:	mov	w19, wzr
    6c6c:	add	x8, x9, x8
    6c70:	str	x8, [x20]
    6c74:	b	6c1c <lzma_filter_flags_encode@@XZ_5.0+0x90>
    6c78:	stp	x29, x30, [sp, #-48]!
    6c7c:	stp	x22, x21, [sp, #16]
    6c80:	stp	x20, x19, [sp, #32]
    6c84:	ldr	x8, [x0, #16]
    6c88:	adrp	x22, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6c8c:	add	x22, x22, #0xc78
    6c90:	mov	x19, x2
    6c94:	mov	x20, x0
    6c98:	cmp	x8, x22
    6c9c:	mov	x21, x1
    6ca0:	mov	x29, sp
    6ca4:	b.eq	6cb4 <lzma_filter_flags_encode@@XZ_5.0+0x128>  // b.none
    6ca8:	mov	x0, x20
    6cac:	mov	x1, x21
    6cb0:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    6cb4:	str	x22, [x20, #16]
    6cb8:	cbz	x19, 6d00 <lzma_filter_flags_encode@@XZ_5.0+0x174>
    6cbc:	ldr	x8, [x20]
    6cc0:	cbnz	x8, 6cec <lzma_filter_flags_encode@@XZ_5.0+0x160>
    6cc4:	mov	w0, #0x150                 	// #336
    6cc8:	mov	x1, x21
    6ccc:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    6cd0:	str	x0, [x20]
    6cd4:	cbz	x0, 6d08 <lzma_filter_flags_encode@@XZ_5.0+0x17c>
    6cd8:	adrp	x8, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6cdc:	adrp	x9, 6000 <lzma_block_uncomp_encode@@XZ_5.2+0x41c>
    6ce0:	add	x8, x8, #0xd1c
    6ce4:	add	x9, x9, #0xf50
    6ce8:	stp	x8, x9, [x20, #24]
    6cec:	ldr	x0, [x20]
    6cf0:	mov	x1, x19
    6cf4:	bl	6f64 <lzma_filter_flags_encode@@XZ_5.0+0x3d8>
    6cf8:	mov	w0, wzr
    6cfc:	b	6d0c <lzma_filter_flags_encode@@XZ_5.0+0x180>
    6d00:	mov	w0, #0xb                   	// #11
    6d04:	b	6d0c <lzma_filter_flags_encode@@XZ_5.0+0x180>
    6d08:	mov	w0, #0x5                   	// #5
    6d0c:	ldp	x20, x19, [sp, #32]
    6d10:	ldp	x22, x21, [sp, #16]
    6d14:	ldp	x29, x30, [sp], #48
    6d18:	ret
    6d1c:	stp	x29, x30, [sp, #-96]!
    6d20:	stp	x26, x25, [sp, #32]
    6d24:	ldr	x26, [x6]
    6d28:	stp	x22, x21, [sp, #64]
    6d2c:	stp	x20, x19, [sp, #80]
    6d30:	mov	x21, x6
    6d34:	mov	x20, x5
    6d38:	cmp	x26, x7
    6d3c:	mov	x19, x0
    6d40:	stp	x28, x27, [sp, #16]
    6d44:	stp	x24, x23, [sp, #48]
    6d48:	mov	x29, sp
    6d4c:	b.cs	6ea8 <lzma_filter_flags_encode@@XZ_5.0+0x31c>  // b.hs, b.nlast
    6d50:	adrp	x27, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    6d54:	mov	x22, x7
    6d58:	mov	w24, wzr
    6d5c:	add	x23, x19, #0x10
    6d60:	add	x25, x19, #0x140
    6d64:	add	x27, x27, #0xc98
    6d68:	mov	w28, #0xc0                  	// #192
    6d6c:	mov	x8, x26
    6d70:	b	6d8c <lzma_filter_flags_encode@@XZ_5.0+0x200>
    6d74:	mov	w24, w0
    6d78:	mov	w8, wzr
    6d7c:	tbz	wzr, #0, 6eac <lzma_filter_flags_encode@@XZ_5.0+0x320>
    6d80:	ldr	x8, [x21]
    6d84:	cmp	x8, x22
    6d88:	b.cs	6eac <lzma_filter_flags_encode@@XZ_5.0+0x320>  // b.hs, b.nlast
    6d8c:	ldr	w9, [x19]
    6d90:	cmp	w9, #0x6
    6d94:	b.hi	6ee4 <lzma_filter_flags_encode@@XZ_5.0+0x358>  // b.pmore
    6d98:	adr	x10, 6da8 <lzma_filter_flags_encode@@XZ_5.0+0x21c>
    6d9c:	ldrb	w11, [x27, x9]
    6da0:	add	x10, x10, x11, lsl #2
    6da4:	br	x10
    6da8:	ldr	w8, [x19]
    6dac:	mov	x1, x25
    6db0:	mov	x2, x20
    6db4:	mov	x3, x21
    6db8:	cmp	w8, #0x2
    6dbc:	mov	w8, #0xb8                  	// #184
    6dc0:	csel	x8, x28, x8, eq  // eq = none
    6dc4:	ldr	x0, [x19, x8]
    6dc8:	mov	x4, x22
    6dcc:	bl	3450 <lzma_vli_encode@plt>
    6dd0:	cmp	w0, #0x1
    6dd4:	b.ne	6d74 <lzma_filter_flags_encode@@XZ_5.0+0x1e8>  // b.any
    6dd8:	ldr	w8, [x19]
    6ddc:	mov	w24, wzr
    6de0:	str	xzr, [x19, #320]
    6de4:	add	w8, w8, #0x1
    6de8:	str	w8, [x19]
    6dec:	mov	w8, #0x1                   	// #1
    6df0:	tbnz	w8, #0, 6d80 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    6df4:	b	6eac <lzma_filter_flags_encode@@XZ_5.0+0x320>
    6df8:	strb	wzr, [x20, x8]
    6dfc:	add	x8, x8, #0x1
    6e00:	str	x8, [x21]
    6e04:	mov	w8, #0x1                   	// #1
    6e08:	b	6e74 <lzma_filter_flags_encode@@XZ_5.0+0x2e8>
    6e0c:	ldr	x0, [x19, #8]
    6e10:	bl	34e0 <lzma_index_block_count@plt>
    6e14:	mov	x1, x25
    6e18:	mov	x2, x20
    6e1c:	mov	x3, x21
    6e20:	mov	x4, x22
    6e24:	bl	3450 <lzma_vli_encode@plt>
    6e28:	cmp	w0, #0x1
    6e2c:	b.ne	6d74 <lzma_filter_flags_encode@@XZ_5.0+0x1e8>  // b.any
    6e30:	mov	w8, #0x4                   	// #4
    6e34:	mov	w24, wzr
    6e38:	str	w8, [x19]
    6e3c:	mov	w8, #0x1                   	// #1
    6e40:	str	xzr, [x19, #320]
    6e44:	tbnz	w8, #0, 6d80 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    6e48:	b	6eac <lzma_filter_flags_encode@@XZ_5.0+0x320>
    6e4c:	mov	w1, #0x2                   	// #2
    6e50:	mov	x0, x23
    6e54:	bl	3460 <lzma_index_iter_next@plt>
    6e58:	tst	w0, #0xff
    6e5c:	b.eq	6e9c <lzma_filter_flags_encode@@XZ_5.0+0x310>  // b.none
    6e60:	ldr	x0, [x19, #8]
    6e64:	bl	4904 <lzma_index_checks@@XZ_5.0+0x28>
    6e68:	mov	w8, w0
    6e6c:	str	x8, [x19, #320]
    6e70:	mov	w8, #0x5                   	// #5
    6e74:	str	w8, [x19]
    6e78:	b	6d80 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    6e7c:	ldr	x9, [x19, #320]
    6e80:	cbz	x9, 6eec <lzma_filter_flags_encode@@XZ_5.0+0x360>
    6e84:	sub	x9, x9, #0x1
    6e88:	add	x10, x8, #0x1
    6e8c:	str	x9, [x19, #320]
    6e90:	str	x10, [x21]
    6e94:	strb	wzr, [x20, x8]
    6e98:	b	6d80 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    6e9c:	mov	w8, #0x2                   	// #2
    6ea0:	str	w8, [x19]
    6ea4:	b	6da8 <lzma_filter_flags_encode@@XZ_5.0+0x21c>
    6ea8:	mov	w24, wzr
    6eac:	ldr	x8, [x21]
    6eb0:	ldr	w2, [x19, #328]
    6eb4:	add	x0, x20, x26
    6eb8:	sub	x1, x8, x26
    6ebc:	bl	31c0 <lzma_crc32@plt>
    6ec0:	str	w0, [x19, #328]
    6ec4:	mov	w0, w24
    6ec8:	ldp	x20, x19, [sp, #80]
    6ecc:	ldp	x22, x21, [sp, #64]
    6ed0:	ldp	x24, x23, [sp, #48]
    6ed4:	ldp	x26, x25, [sp, #32]
    6ed8:	ldp	x28, x27, [sp, #16]
    6edc:	ldp	x29, x30, [sp], #96
    6ee0:	ret
    6ee4:	mov	w24, #0xb                   	// #11
    6ee8:	b	6ec4 <lzma_filter_flags_encode@@XZ_5.0+0x338>
    6eec:	ldr	w2, [x19, #328]
    6ef0:	add	x0, x20, x26
    6ef4:	sub	x1, x8, x26
    6ef8:	bl	31c0 <lzma_crc32@plt>
    6efc:	mov	w8, #0x6                   	// #6
    6f00:	str	w0, [x19, #328]
    6f04:	str	w8, [x19]
    6f08:	ldr	x8, [x21]
    6f0c:	cmp	x8, x22
    6f10:	b.eq	6f48 <lzma_filter_flags_encode@@XZ_5.0+0x3bc>  // b.none
    6f14:	ldr	x9, [x19, #320]
    6f18:	ldr	w10, [x19, #328]
    6f1c:	add	x11, x8, #0x1
    6f20:	str	x11, [x21]
    6f24:	lsl	w11, w9, #3
    6f28:	add	x9, x9, #0x1
    6f2c:	lsr	w10, w10, w11
    6f30:	cmp	x9, #0x4
    6f34:	strb	w10, [x20, x8]
    6f38:	str	x9, [x19, #320]
    6f3c:	b.cc	6f08 <lzma_filter_flags_encode@@XZ_5.0+0x37c>  // b.lo, b.ul, b.last
    6f40:	mov	w24, #0x1                   	// #1
    6f44:	b	6ec4 <lzma_filter_flags_encode@@XZ_5.0+0x338>
    6f48:	mov	w24, wzr
    6f4c:	b	6ec4 <lzma_filter_flags_encode@@XZ_5.0+0x338>
    6f50:	stp	x29, x30, [sp, #-16]!
    6f54:	mov	x29, sp
    6f58:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    6f5c:	ldp	x29, x30, [sp], #16
    6f60:	ret
    6f64:	stp	x29, x30, [sp, #-32]!
    6f68:	stp	x20, x19, [sp, #16]
    6f6c:	mov	x20, x0
    6f70:	add	x0, x0, #0x10
    6f74:	mov	x29, sp
    6f78:	mov	x19, x1
    6f7c:	bl	34b0 <lzma_index_iter_init@plt>
    6f80:	str	wzr, [x20]
    6f84:	str	x19, [x20, #8]
    6f88:	str	xzr, [x20, #320]
    6f8c:	str	wzr, [x20, #328]
    6f90:	ldp	x20, x19, [sp, #16]
    6f94:	ldp	x29, x30, [sp], #32
    6f98:	ret

0000000000006f9c <lzma_index_encoder@@XZ_5.0>:
    6f9c:	stp	x29, x30, [sp, #-48]!
    6fa0:	str	x21, [sp, #16]
    6fa4:	stp	x20, x19, [sp, #32]
    6fa8:	mov	x29, sp
    6fac:	mov	x21, x1
    6fb0:	mov	x19, x0
    6fb4:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    6fb8:	mov	w20, w0
    6fbc:	cbnz	w0, 6ffc <lzma_index_encoder@@XZ_5.0+0x60>
    6fc0:	ldp	x1, x0, [x19, #48]
    6fc4:	mov	x2, x21
    6fc8:	bl	6c78 <lzma_filter_flags_encode@@XZ_5.0+0xec>
    6fcc:	cbz	w0, 7010 <lzma_index_encoder@@XZ_5.0+0x74>
    6fd0:	mov	w21, w0
    6fd4:	mov	x0, x19
    6fd8:	bl	3330 <lzma_end@plt>
    6fdc:	mov	w8, wzr
    6fe0:	mov	w20, w21
    6fe4:	cbz	w8, 6ffc <lzma_index_encoder@@XZ_5.0+0x60>
    6fe8:	ldr	x8, [x19, #56]
    6fec:	mov	w20, wzr
    6ff0:	mov	w9, #0x1                   	// #1
    6ff4:	strb	w9, [x8, #88]
    6ff8:	strb	w9, [x8, #91]
    6ffc:	mov	w0, w20
    7000:	ldp	x20, x19, [sp, #32]
    7004:	ldr	x21, [sp, #16]
    7008:	ldp	x29, x30, [sp], #48
    700c:	ret
    7010:	mov	w8, #0x1                   	// #1
    7014:	cbnz	w8, 6fe8 <lzma_index_encoder@@XZ_5.0+0x4c>
    7018:	b	6ffc <lzma_index_encoder@@XZ_5.0+0x60>

000000000000701c <lzma_index_buffer_encode@@XZ_5.0>:
    701c:	sub	sp, sp, #0x1a0
    7020:	stp	x22, x21, [sp, #384]
    7024:	mov	x22, x0
    7028:	mov	w0, #0xb                   	// #11
    702c:	stp	x29, x30, [sp, #352]
    7030:	stp	x28, x23, [sp, #368]
    7034:	stp	x20, x19, [sp, #400]
    7038:	add	x29, sp, #0x160
    703c:	cbz	x22, 70c8 <lzma_index_buffer_encode@@XZ_5.0+0xac>
    7040:	mov	x21, x1
    7044:	cbz	x1, 70c8 <lzma_index_buffer_encode@@XZ_5.0+0xac>
    7048:	mov	x19, x2
    704c:	cbz	x2, 70c8 <lzma_index_buffer_encode@@XZ_5.0+0xac>
    7050:	ldr	x8, [x19]
    7054:	mov	x20, x3
    7058:	cmp	x8, x3
    705c:	b.hi	70c4 <lzma_index_buffer_encode@@XZ_5.0+0xa8>  // b.pmore
    7060:	mov	x0, x22
    7064:	sub	x23, x20, x8
    7068:	bl	3510 <lzma_index_size@plt>
    706c:	cmp	x23, x0
    7070:	b.cs	707c <lzma_index_buffer_encode@@XZ_5.0+0x60>  // b.hs, b.nlast
    7074:	mov	w0, #0xa                   	// #10
    7078:	b	70c8 <lzma_index_buffer_encode@@XZ_5.0+0xac>
    707c:	add	x0, sp, #0x10
    7080:	mov	x1, x22
    7084:	bl	6f64 <lzma_filter_flags_encode@@XZ_5.0+0x3d8>
    7088:	ldr	x22, [x19]
    708c:	add	x0, sp, #0x10
    7090:	mov	x1, xzr
    7094:	mov	x2, xzr
    7098:	mov	x3, xzr
    709c:	mov	x4, xzr
    70a0:	mov	x5, x21
    70a4:	mov	x6, x19
    70a8:	mov	x7, x20
    70ac:	str	wzr, [sp]
    70b0:	bl	6d1c <lzma_filter_flags_encode@@XZ_5.0+0x190>
    70b4:	cmp	w0, #0x1
    70b8:	mov	w0, wzr
    70bc:	b.eq	70c8 <lzma_index_buffer_encode@@XZ_5.0+0xac>  // b.none
    70c0:	str	x22, [x19]
    70c4:	mov	w0, #0xb                   	// #11
    70c8:	ldp	x20, x19, [sp, #400]
    70cc:	ldp	x22, x21, [sp, #384]
    70d0:	ldp	x28, x23, [sp, #368]
    70d4:	ldp	x29, x30, [sp, #352]
    70d8:	add	sp, sp, #0x1a0
    70dc:	ret

00000000000070e0 <lzma_stream_buffer_bound@@XZ_5.0>:
    70e0:	stp	x29, x30, [sp, #-16]!
    70e4:	mov	x29, sp
    70e8:	bl	3120 <lzma_block_buffer_bound@plt>
    70ec:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    70f0:	sub	x8, x8, x0
    70f4:	cmp	x8, #0x30
    70f8:	ccmp	x0, #0x0, #0x4, cs  // cs = hs, nlast
    70fc:	add	x8, x0, #0x30
    7100:	csel	x0, xzr, x8, eq  // eq = none
    7104:	ldp	x29, x30, [sp], #16
    7108:	ret

000000000000710c <lzma_stream_buffer_encode@@XZ_5.0>:
    710c:	sub	sp, sp, #0x170
    7110:	stp	x22, x21, [sp, #336]
    7114:	mov	w22, #0xb                   	// #11
    7118:	stp	x29, x30, [sp, #272]
    711c:	stp	x28, x27, [sp, #288]
    7120:	stp	x26, x25, [sp, #304]
    7124:	stp	x24, x23, [sp, #320]
    7128:	stp	x20, x19, [sp, #352]
    712c:	add	x29, sp, #0x110
    7130:	cbz	x0, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7134:	mov	w27, w1
    7138:	cmp	w1, #0xf
    713c:	b.hi	71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>  // b.pmore
    7140:	cmp	x3, #0x0
    7144:	cset	w8, eq  // eq = none
    7148:	cmp	x4, #0x0
    714c:	cset	w9, ne  // ne = any
    7150:	mov	x23, x4
    7154:	mov	x24, x3
    7158:	and	w8, w8, w9
    715c:	mov	w22, #0xb                   	// #11
    7160:	tbnz	w8, #0, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7164:	mov	x20, x5
    7168:	cbz	x5, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    716c:	mov	x19, x6
    7170:	cbz	x6, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7174:	ldr	x22, [x19]
    7178:	mov	x25, x7
    717c:	cmp	x22, x7
    7180:	b.ls	718c <lzma_stream_buffer_encode@@XZ_5.0+0x80>  // b.plast
    7184:	mov	w22, #0xb                   	// #11
    7188:	b	71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    718c:	mov	x26, x0
    7190:	mov	w0, w27
    7194:	mov	x21, x2
    7198:	bl	30e0 <lzma_check_is_supported@plt>
    719c:	tst	w0, #0xff
    71a0:	b.eq	71bc <lzma_stream_buffer_encode@@XZ_5.0+0xb0>  // b.none
    71a4:	sub	x8, x25, x22
    71a8:	cmp	x8, #0x19
    71ac:	stur	x22, [x29, #-8]
    71b0:	b.cs	71e4 <lzma_stream_buffer_encode@@XZ_5.0+0xd8>  // b.hs, b.nlast
    71b4:	mov	w22, #0xa                   	// #10
    71b8:	b	71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    71bc:	mov	w22, #0x3                   	// #3
    71c0:	mov	w0, w22
    71c4:	ldp	x20, x19, [sp, #352]
    71c8:	ldp	x22, x21, [sp, #336]
    71cc:	ldp	x24, x23, [sp, #320]
    71d0:	ldp	x26, x25, [sp, #304]
    71d4:	ldp	x28, x27, [sp, #288]
    71d8:	ldp	x29, x30, [sp, #272]
    71dc:	add	sp, sp, #0x170
    71e0:	ret
    71e4:	movi	v0.2d, #0x0
    71e8:	add	x1, x20, x22
    71ec:	sub	x0, x29, #0x40
    71f0:	stur	xzr, [x29, #-16]
    71f4:	stp	q0, q0, [x29, #-48]
    71f8:	stur	q0, [x29, #-64]
    71fc:	stur	w27, [x29, #-48]
    7200:	bl	3390 <lzma_stream_header_encode@plt>
    7204:	cbnz	w0, 7184 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    7208:	ldur	x8, [x29, #-8]
    720c:	sub	x25, x25, #0xc
    7210:	movi	v0.2d, #0x0
    7214:	stp	q0, q0, [sp, #176]
    7218:	add	x8, x8, #0xc
    721c:	stp	q0, q0, [sp, #144]
    7220:	stp	q0, q0, [sp, #112]
    7224:	stp	q0, q0, [sp, #80]
    7228:	stp	q0, q0, [sp, #48]
    722c:	stp	q0, q0, [sp, #16]
    7230:	str	q0, [sp]
    7234:	str	w27, [sp, #8]
    7238:	stur	x8, [x29, #-8]
    723c:	str	x26, [sp, #32]
    7240:	cbz	x23, 7270 <lzma_stream_buffer_encode@@XZ_5.0+0x164>
    7244:	mov	x0, sp
    7248:	sub	x5, x29, #0x8
    724c:	mov	x1, x21
    7250:	mov	x2, x24
    7254:	mov	x3, x23
    7258:	mov	x4, x20
    725c:	mov	x6, x25
    7260:	bl	30d0 <lzma_block_buffer_encode@plt>
    7264:	mov	w22, w0
    7268:	cbnz	w0, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    726c:	b	7270 <lzma_stream_buffer_encode@@XZ_5.0+0x164>
    7270:	mov	x0, x21
    7274:	bl	33b0 <lzma_index_init@plt>
    7278:	cbz	x0, 72e8 <lzma_stream_buffer_encode@@XZ_5.0+0x1dc>
    727c:	mov	x24, x0
    7280:	cbz	x23, 72a4 <lzma_stream_buffer_encode@@XZ_5.0+0x198>
    7284:	mov	x0, sp
    7288:	bl	3190 <lzma_block_unpadded_size@plt>
    728c:	ldr	x3, [sp, #24]
    7290:	mov	x2, x0
    7294:	mov	x0, x24
    7298:	mov	x1, x21
    729c:	bl	3310 <lzma_index_append@plt>
    72a0:	mov	w23, w0
    72a4:	cbnz	w23, 72cc <lzma_stream_buffer_encode@@XZ_5.0+0x1c0>
    72a8:	sub	x2, x29, #0x8
    72ac:	mov	x0, x24
    72b0:	mov	x1, x20
    72b4:	mov	x3, x25
    72b8:	bl	3100 <lzma_index_buffer_encode@plt>
    72bc:	mov	w23, w0
    72c0:	mov	x0, x24
    72c4:	bl	3510 <lzma_index_size@plt>
    72c8:	stur	x0, [x29, #-56]
    72cc:	mov	x0, x24
    72d0:	mov	x1, x21
    72d4:	bl	33e0 <lzma_index_end@plt>
    72d8:	cmp	w23, #0x0
    72dc:	cset	w8, eq  // eq = none
    72e0:	csel	w22, w22, w23, eq  // eq = none
    72e4:	b	72f0 <lzma_stream_buffer_encode@@XZ_5.0+0x1e4>
    72e8:	mov	w8, wzr
    72ec:	mov	w22, #0x5                   	// #5
    72f0:	cbz	w8, 71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    72f4:	ldur	x8, [x29, #-8]
    72f8:	sub	x0, x29, #0x40
    72fc:	add	x1, x20, x8
    7300:	bl	3210 <lzma_stream_footer_encode@plt>
    7304:	cbnz	w0, 7184 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    7308:	ldur	x8, [x29, #-8]
    730c:	mov	w22, wzr
    7310:	add	x8, x8, #0xc
    7314:	stur	x8, [x29, #-8]
    7318:	str	x8, [x19]
    731c:	b	71c0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>

0000000000007320 <lzma_stream_encoder@@XZ_5.0>:
    7320:	stp	x29, x30, [sp, #-48]!
    7324:	stp	x22, x21, [sp, #16]
    7328:	stp	x20, x19, [sp, #32]
    732c:	mov	x29, sp
    7330:	mov	w21, w2
    7334:	mov	x22, x1
    7338:	mov	x19, x0
    733c:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    7340:	mov	w20, w0
    7344:	cbnz	w0, 7388 <lzma_stream_encoder@@XZ_5.0+0x68>
    7348:	ldp	x1, x0, [x19, #48]
    734c:	mov	x2, x22
    7350:	mov	w3, w21
    7354:	bl	73a8 <lzma_stream_encoder@@XZ_5.0+0x88>
    7358:	cbz	w0, 739c <lzma_stream_encoder@@XZ_5.0+0x7c>
    735c:	mov	w21, w0
    7360:	mov	x0, x19
    7364:	bl	3330 <lzma_end@plt>
    7368:	mov	w8, wzr
    736c:	mov	w20, w21
    7370:	cbz	w8, 7388 <lzma_stream_encoder@@XZ_5.0+0x68>
    7374:	ldr	x8, [x19, #56]
    7378:	mov	w20, wzr
    737c:	mov	w9, #0x1010101             	// #16843009
    7380:	strb	w9, [x8, #92]
    7384:	str	w9, [x8, #88]
    7388:	mov	w0, w20
    738c:	ldp	x20, x19, [sp, #32]
    7390:	ldp	x22, x21, [sp, #16]
    7394:	ldp	x29, x30, [sp], #48
    7398:	ret
    739c:	mov	w8, #0x1                   	// #1
    73a0:	cbnz	w8, 7374 <lzma_stream_encoder@@XZ_5.0+0x54>
    73a4:	b	7388 <lzma_stream_encoder@@XZ_5.0+0x68>
    73a8:	sub	sp, sp, #0x80
    73ac:	stp	x29, x30, [sp, #64]
    73b0:	stp	x22, x21, [sp, #96]
    73b4:	stp	x20, x19, [sp, #112]
    73b8:	ldr	x8, [x0, #16]
    73bc:	adrp	x22, 7000 <lzma_index_encoder@@XZ_5.0+0x64>
    73c0:	add	x22, x22, #0x3a8
    73c4:	str	x23, [sp, #80]
    73c8:	mov	w21, w3
    73cc:	mov	x19, x2
    73d0:	mov	x23, x0
    73d4:	cmp	x8, x22
    73d8:	mov	x20, x1
    73dc:	add	x29, sp, #0x40
    73e0:	b.eq	73f0 <lzma_stream_encoder@@XZ_5.0+0xd0>  // b.none
    73e4:	mov	x0, x23
    73e8:	mov	x1, x20
    73ec:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    73f0:	str	x22, [x23, #16]
    73f4:	cbz	x19, 74d0 <lzma_stream_encoder@@XZ_5.0+0x1b0>
    73f8:	ldr	x22, [x23]
    73fc:	cbnz	x22, 7464 <lzma_stream_encoder@@XZ_5.0+0x144>
    7400:	mov	w0, #0x5d0                 	// #1488
    7404:	mov	x1, x20
    7408:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    740c:	cbz	x0, 74d8 <lzma_stream_encoder@@XZ_5.0+0x1b8>
    7410:	adrp	x8, 7000 <lzma_index_encoder@@XZ_5.0+0x64>
    7414:	adrp	x9, 7000 <lzma_index_encoder@@XZ_5.0+0x64>
    7418:	add	x8, x8, #0x4f4
    741c:	add	x9, x9, #0x80c
    7420:	stp	x8, x9, [x23, #24]
    7424:	adrp	x8, 7000 <lzma_index_encoder@@XZ_5.0+0x64>
    7428:	add	x8, x8, #0x888
    742c:	mov	x22, x0
    7430:	str	x8, [x23, #64]
    7434:	mov	x8, #0xffffffffffffffff    	// #-1
    7438:	movi	v0.2d, #0x0
    743c:	str	x0, [x23]
    7440:	str	x8, [x0, #288]
    7444:	stp	xzr, x8, [x0, #8]
    7448:	stur	q0, [x0, #24]
    744c:	stur	q0, [x0, #40]
    7450:	stur	q0, [x0, #56]
    7454:	str	xzr, [x0, #72]
    7458:	stp	xzr, x8, [x0, #368]
    745c:	stp	q0, q0, [x0, #384]
    7460:	stp	q0, q0, [x0, #416]
    7464:	ldr	x0, [x22, #440]
    7468:	mov	x1, x20
    746c:	str	wzr, [x22]
    7470:	str	wzr, [x22, #80]
    7474:	str	w21, [x22, #88]
    7478:	bl	33e0 <lzma_index_end@plt>
    747c:	mov	x0, x20
    7480:	bl	33b0 <lzma_index_init@plt>
    7484:	str	x0, [x22, #440]
    7488:	cbz	x0, 74d8 <lzma_stream_encoder@@XZ_5.0+0x1b8>
    748c:	movi	v0.2d, #0x0
    7490:	add	x1, x22, #0x1d0
    7494:	mov	x0, sp
    7498:	str	xzr, [sp, #48]
    749c:	stp	q0, q0, [sp, #16]
    74a0:	str	q0, [sp]
    74a4:	str	w21, [sp, #16]
    74a8:	bl	3390 <lzma_stream_header_encode@plt>
    74ac:	cbnz	w0, 74dc <lzma_stream_encoder@@XZ_5.0+0x1bc>
    74b0:	mov	w8, #0xc                   	// #12
    74b4:	mov	x0, x22
    74b8:	mov	x1, x20
    74bc:	mov	x2, x19
    74c0:	mov	x3, xzr
    74c4:	stp	xzr, x8, [x22, #448]
    74c8:	bl	7888 <lzma_stream_encoder@@XZ_5.0+0x568>
    74cc:	b	74dc <lzma_stream_encoder@@XZ_5.0+0x1bc>
    74d0:	mov	w0, #0xb                   	// #11
    74d4:	b	74dc <lzma_stream_encoder@@XZ_5.0+0x1bc>
    74d8:	mov	w0, #0x5                   	// #5
    74dc:	ldp	x20, x19, [sp, #112]
    74e0:	ldp	x22, x21, [sp, #96]
    74e4:	ldr	x23, [sp, #80]
    74e8:	ldp	x29, x30, [sp, #64]
    74ec:	add	sp, sp, #0x80
    74f0:	ret
    74f4:	sub	sp, sp, #0xe0
    74f8:	ldr	x8, [x6]
    74fc:	stp	x29, x30, [sp, #128]
    7500:	stp	x28, x27, [sp, #144]
    7504:	stp	x26, x25, [sp, #160]
    7508:	cmp	x8, x7
    750c:	stp	x24, x23, [sp, #176]
    7510:	stp	x22, x21, [sp, #192]
    7514:	stp	x20, x19, [sp, #208]
    7518:	add	x29, sp, #0x80
    751c:	b.cs	77c0 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.hs, b.nlast
    7520:	ldr	w9, [x29, #96]
    7524:	sub	x8, x29, #0x38
    7528:	add	x10, x0, #0x50
    752c:	str	x10, [sp, #32]
    7530:	add	x10, x0, #0x170
    7534:	adrp	x24, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    7538:	add	x8, x8, #0x14
    753c:	mov	x19, x7
    7540:	mov	x20, x6
    7544:	mov	x21, x5
    7548:	mov	x23, x3
    754c:	mov	x25, x1
    7550:	mov	x26, x0
    7554:	add	x27, x0, #0x1d0
    7558:	add	x28, x0, #0x1c0
    755c:	add	x24, x24, #0xca0
    7560:	stp	x10, x8, [sp, #16]
    7564:	mov	w8, w9
    7568:	str	x2, [sp, #48]
    756c:	str	x4, [sp, #64]
    7570:	str	w9, [sp, #60]
    7574:	str	x8, [sp, #40]
    7578:	b	7594 <lzma_stream_encoder@@XZ_5.0+0x274>
    757c:	cmp	w9, #0x4
    7580:	mov	w22, w0
    7584:	b.ne	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>  // b.any
    7588:	ldr	x8, [x20]
    758c:	cmp	x8, x19
    7590:	b.cs	77c0 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.hs, b.nlast
    7594:	ldr	w8, [x26]
    7598:	cmp	w8, #0x5
    759c:	b.hi	77e4 <lzma_stream_encoder@@XZ_5.0+0x4c4>  // b.pmore
    75a0:	adr	x9, 75b0 <lzma_stream_encoder@@XZ_5.0+0x290>
    75a4:	ldrb	w10, [x24, x8]
    75a8:	add	x9, x9, x10, lsl #2
    75ac:	br	x9
    75b0:	ldr	x2, [x26, #456]
    75b4:	mov	x0, x27
    75b8:	mov	x1, x28
    75bc:	mov	x3, x21
    75c0:	mov	x4, x20
    75c4:	mov	x5, x19
    75c8:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    75cc:	ldp	x8, x9, [x26, #448]
    75d0:	cmp	x8, x9
    75d4:	b.cc	77c0 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.lo, b.ul, b.last
    75d8:	ldr	w8, [x26]
    75dc:	cmp	w8, #0x5
    75e0:	b.eq	77ec <lzma_stream_encoder@@XZ_5.0+0x4cc>  // b.none
    75e4:	add	w8, w8, #0x1
    75e8:	str	xzr, [x26, #448]
    75ec:	str	w8, [x26]
    75f0:	b	7588 <lzma_stream_encoder@@XZ_5.0+0x268>
    75f4:	ldr	x8, [x23]
    75f8:	ldr	x9, [sp, #64]
    75fc:	cmp	x8, x9
    7600:	b.ne	7740 <lzma_stream_encoder@@XZ_5.0+0x420>  // b.any
    7604:	ldr	w8, [sp, #60]
    7608:	cmp	w8, #0x3
    760c:	b.ne	77f4 <lzma_stream_encoder@@XZ_5.0+0x4d4>  // b.any
    7610:	ldr	x2, [x26, #440]
    7614:	ldr	x0, [sp, #16]
    7618:	mov	x1, x25
    761c:	bl	6c78 <lzma_filter_flags_encode@@XZ_5.0+0xec>
    7620:	cmp	w0, #0x0
    7624:	csel	w22, w22, w0, eq  // eq = none
    7628:	cbnz	w0, 7804 <lzma_stream_encoder@@XZ_5.0+0x4e4>
    762c:	mov	w8, #0x4                   	// #4
    7630:	str	w8, [x26]
    7634:	b	7588 <lzma_stream_encoder@@XZ_5.0+0x268>
    7638:	ldp	x10, x2, [sp, #40]
    763c:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    7640:	add	x9, x9, #0xca8
    7644:	ldr	x8, [x26, #32]
    7648:	ldr	x0, [x26, #8]
    764c:	ldr	w9, [x9, x10, lsl #2]
    7650:	ldr	x4, [sp, #64]
    7654:	mov	x1, x25
    7658:	mov	x3, x23
    765c:	mov	x5, x21
    7660:	mov	x6, x20
    7664:	mov	x7, x19
    7668:	str	w9, [sp]
    766c:	blr	x8
    7670:	ldr	w8, [sp, #60]
    7674:	mov	w9, #0x1                   	// #1
    7678:	cmp	w8, #0x1
    767c:	b.eq	757c <lzma_stream_encoder@@XZ_5.0+0x25c>  // b.none
    7680:	cmp	w0, #0x1
    7684:	b.ne	757c <lzma_stream_encoder@@XZ_5.0+0x25c>  // b.any
    7688:	ldr	x0, [sp, #32]
    768c:	bl	3190 <lzma_block_unpadded_size@plt>
    7690:	ldr	x8, [x26, #440]
    7694:	ldr	x3, [x26, #104]
    7698:	mov	x2, x0
    769c:	mov	x1, x25
    76a0:	mov	x0, x8
    76a4:	bl	3310 <lzma_index_append@plt>
    76a8:	cmp	w0, #0x0
    76ac:	mov	w8, w0
    76b0:	cset	w9, ne  // ne = any
    76b4:	csel	w0, w22, w0, eq  // eq = none
    76b8:	cbnz	w8, 757c <lzma_stream_encoder@@XZ_5.0+0x25c>
    76bc:	mov	w8, #0x1                   	// #1
    76c0:	mov	w9, #0x4                   	// #4
    76c4:	str	w8, [x26]
    76c8:	b	757c <lzma_stream_encoder@@XZ_5.0+0x25c>
    76cc:	ldr	x8, [x26, #392]
    76d0:	ldr	x0, [x26, #368]
    76d4:	mov	x1, x25
    76d8:	mov	x2, xzr
    76dc:	mov	x3, xzr
    76e0:	mov	x4, xzr
    76e4:	mov	x5, x21
    76e8:	mov	x6, x20
    76ec:	mov	x7, x19
    76f0:	str	wzr, [sp]
    76f4:	blr	x8
    76f8:	cmp	w0, #0x1
    76fc:	b.ne	7790 <lzma_stream_encoder@@XZ_5.0+0x470>  // b.any
    7700:	stur	wzr, [x29, #-56]
    7704:	ldr	x0, [x26, #440]
    7708:	bl	3510 <lzma_index_size@plt>
    770c:	stur	x0, [x29, #-48]
    7710:	ldr	w8, [x26, #88]
    7714:	movi	v0.2d, #0x0
    7718:	sub	x0, x29, #0x38
    771c:	mov	x1, x27
    7720:	stur	w8, [x29, #-40]
    7724:	ldr	x8, [sp, #24]
    7728:	stp	q0, q0, [x8]
    772c:	bl	3210 <lzma_stream_footer_encode@plt>
    7730:	cbz	w0, 779c <lzma_stream_encoder@@XZ_5.0+0x47c>
    7734:	mov	w22, #0xb                   	// #11
    7738:	mov	w8, #0x1                   	// #1
    773c:	b	77b0 <lzma_stream_encoder@@XZ_5.0+0x490>
    7740:	ldrb	w8, [x26, #4]
    7744:	cbnz	w8, 7768 <lzma_stream_encoder@@XZ_5.0+0x448>
    7748:	mov	x0, x26
    774c:	mov	x1, x25
    7750:	bl	7950 <lzma_stream_encoder@@XZ_5.0+0x630>
    7754:	cmp	w0, #0x0
    7758:	csel	w22, w22, w0, eq  // eq = none
    775c:	mov	w8, w0
    7760:	mov	w0, w22
    7764:	cbnz	w8, 77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    7768:	ldr	x0, [sp, #32]
    776c:	mov	x1, x27
    7770:	strb	wzr, [x26, #4]
    7774:	bl	3540 <lzma_block_header_encode@plt>
    7778:	cbnz	w0, 77e4 <lzma_stream_encoder@@XZ_5.0+0x4c4>
    777c:	ldr	w8, [x26, #84]
    7780:	str	x8, [x26, #456]
    7784:	mov	w8, #0x2                   	// #2
    7788:	str	w8, [x26]
    778c:	b	7588 <lzma_stream_encoder@@XZ_5.0+0x268>
    7790:	mov	w8, #0x1                   	// #1
    7794:	mov	w22, w0
    7798:	b	77b0 <lzma_stream_encoder@@XZ_5.0+0x490>
    779c:	mov	w8, #0xc                   	// #12
    77a0:	str	x8, [x26, #456]
    77a4:	mov	w8, #0x5                   	// #5
    77a8:	str	w8, [x26]
    77ac:	mov	w8, #0x4                   	// #4
    77b0:	cmp	w8, #0x4
    77b4:	mov	w0, w22
    77b8:	b.eq	7588 <lzma_stream_encoder@@XZ_5.0+0x268>  // b.none
    77bc:	b	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    77c0:	mov	w0, wzr
    77c4:	ldp	x20, x19, [sp, #208]
    77c8:	ldp	x22, x21, [sp, #192]
    77cc:	ldp	x24, x23, [sp, #176]
    77d0:	ldp	x26, x25, [sp, #160]
    77d4:	ldp	x28, x27, [sp, #144]
    77d8:	ldp	x29, x30, [sp, #128]
    77dc:	add	sp, sp, #0xe0
    77e0:	ret
    77e4:	mov	w0, #0xb                   	// #11
    77e8:	b	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    77ec:	mov	w0, #0x1                   	// #1
    77f0:	b	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    77f4:	ldr	w8, [sp, #60]
    77f8:	cmp	w8, #0x0
    77fc:	cset	w0, ne  // ne = any
    7800:	b	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    7804:	mov	w0, w22
    7808:	b	77c4 <lzma_stream_encoder@@XZ_5.0+0x4a4>
    780c:	stp	x29, x30, [sp, #-48]!
    7810:	stp	x20, x19, [sp, #32]
    7814:	mov	x20, x0
    7818:	add	x0, x0, #0x8
    781c:	str	x21, [sp, #16]
    7820:	mov	x29, sp
    7824:	mov	x19, x1
    7828:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    782c:	add	x0, x20, #0x170
    7830:	mov	x1, x19
    7834:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    7838:	ldr	x0, [x20, #440]
    783c:	mov	x1, x19
    7840:	bl	33e0 <lzma_index_end@plt>
    7844:	ldr	x8, [x20, #288]
    7848:	cmn	x8, #0x1
    784c:	b.eq	786c <lzma_stream_encoder@@XZ_5.0+0x54c>  // b.none
    7850:	add	x21, x20, #0x130
    7854:	ldur	x0, [x21, #-8]
    7858:	mov	x1, x19
    785c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    7860:	ldr	x8, [x21], #16
    7864:	cmn	x8, #0x1
    7868:	b.ne	7854 <lzma_stream_encoder@@XZ_5.0+0x534>  // b.any
    786c:	mov	x0, x20
    7870:	mov	x1, x19
    7874:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    7878:	ldp	x20, x19, [sp, #32]
    787c:	ldr	x21, [sp, #16]
    7880:	ldp	x29, x30, [sp], #48
    7884:	ret
    7888:	stp	x29, x30, [sp, #-48]!
    788c:	stp	x22, x21, [sp, #16]
    7890:	stp	x20, x19, [sp, #32]
    7894:	ldr	w8, [x0]
    7898:	mov	x19, x2
    789c:	mov	x21, x0
    78a0:	mov	x20, x1
    78a4:	cmp	w8, #0x1
    78a8:	mov	x29, sp
    78ac:	b.hi	78dc <lzma_stream_encoder@@XZ_5.0+0x5bc>  // b.pmore
    78b0:	mov	x0, x21
    78b4:	mov	x1, x20
    78b8:	strb	wzr, [x21, #4]
    78bc:	str	x19, [x21, #112]
    78c0:	bl	7950 <lzma_stream_encoder@@XZ_5.0+0x630>
    78c4:	add	x8, x21, #0x120
    78c8:	str	x8, [x21, #112]
    78cc:	cbnz	w0, 7940 <lzma_stream_encoder@@XZ_5.0+0x620>
    78d0:	mov	w8, #0x1                   	// #1
    78d4:	strb	w8, [x21, #4]
    78d8:	b	78fc <lzma_stream_encoder@@XZ_5.0+0x5dc>
    78dc:	cmp	w8, #0x3
    78e0:	b.hi	793c <lzma_stream_encoder@@XZ_5.0+0x61c>  // b.pmore
    78e4:	ldr	x8, [x21, #72]
    78e8:	ldr	x0, [x21, #8]
    78ec:	mov	x1, x20
    78f0:	mov	x2, x19
    78f4:	blr	x8
    78f8:	cbnz	w0, 7940 <lzma_stream_encoder@@XZ_5.0+0x620>
    78fc:	ldr	x8, [x21, #288]
    7900:	add	x22, x21, #0x120
    7904:	cmn	x8, #0x1
    7908:	b.eq	7928 <lzma_stream_encoder@@XZ_5.0+0x608>  // b.none
    790c:	add	x21, x21, #0x130
    7910:	ldur	x0, [x21, #-8]
    7914:	mov	x1, x20
    7918:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    791c:	ldr	x8, [x21], #16
    7920:	cmn	x8, #0x1
    7924:	b.ne	7910 <lzma_stream_encoder@@XZ_5.0+0x5f0>  // b.any
    7928:	mov	x0, x19
    792c:	mov	x1, x22
    7930:	mov	x2, x20
    7934:	bl	3240 <lzma_filters_copy@plt>
    7938:	b	7940 <lzma_stream_encoder@@XZ_5.0+0x620>
    793c:	mov	w0, #0xb                   	// #11
    7940:	ldp	x20, x19, [sp, #32]
    7944:	ldp	x22, x21, [sp, #16]
    7948:	ldp	x29, x30, [sp], #48
    794c:	ret
    7950:	stp	x29, x30, [sp, #-48]!
    7954:	stp	x20, x19, [sp, #32]
    7958:	add	x20, x0, #0x50
    795c:	mov	x8, #0xffffffffffffffff    	// #-1
    7960:	str	x21, [sp, #16]
    7964:	mov	x21, x0
    7968:	stp	x8, x8, [x0, #96]
    796c:	mov	x0, x20
    7970:	mov	x29, sp
    7974:	mov	x19, x1
    7978:	bl	3160 <lzma_block_header_size@plt>
    797c:	cbnz	w0, 7990 <lzma_stream_encoder@@XZ_5.0+0x670>
    7980:	add	x0, x21, #0x8
    7984:	mov	x1, x19
    7988:	mov	x2, x20
    798c:	bl	5f00 <lzma_block_uncomp_encode@@XZ_5.2+0x31c>
    7990:	ldp	x20, x19, [sp, #32]
    7994:	ldr	x21, [sp, #16]
    7998:	ldp	x29, x30, [sp], #48
    799c:	ret

00000000000079a0 <lzma_stream_header_encode@@XZ_5.0>:
    79a0:	stp	x29, x30, [sp, #-32]!
    79a4:	stp	x20, x19, [sp, #16]
    79a8:	ldr	w8, [x0]
    79ac:	mov	x29, sp
    79b0:	cbz	w8, 79bc <lzma_stream_header_encode@@XZ_5.0+0x1c>
    79b4:	mov	w0, #0x8                   	// #8
    79b8:	b	7a10 <lzma_stream_header_encode@@XZ_5.0+0x70>
    79bc:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    79c0:	ldr	x8, [x8, #3936]
    79c4:	add	x20, x1, #0x6
    79c8:	mov	x19, x1
    79cc:	ldrh	w9, [x8, #4]
    79d0:	ldr	w8, [x8]
    79d4:	strh	w9, [x1, #4]
    79d8:	str	w8, [x1]
    79dc:	mov	x1, x20
    79e0:	bl	7a1c <lzma_stream_header_encode@@XZ_5.0+0x7c>
    79e4:	tbz	w0, #0, 79f0 <lzma_stream_header_encode@@XZ_5.0+0x50>
    79e8:	mov	w0, #0xb                   	// #11
    79ec:	b	7a10 <lzma_stream_header_encode@@XZ_5.0+0x70>
    79f0:	mov	w1, #0x2                   	// #2
    79f4:	mov	x0, x20
    79f8:	mov	w2, wzr
    79fc:	bl	31c0 <lzma_crc32@plt>
    7a00:	mov	w1, w0
    7a04:	add	x0, x19, #0x8
    7a08:	bl	7a48 <lzma_stream_header_encode@@XZ_5.0+0xa8>
    7a0c:	mov	w0, wzr
    7a10:	ldp	x20, x19, [sp, #16]
    7a14:	ldp	x29, x30, [sp], #32
    7a18:	ret
    7a1c:	ldr	w9, [x0, #16]
    7a20:	cmp	w9, #0xf
    7a24:	b.ls	7a30 <lzma_stream_header_encode@@XZ_5.0+0x90>  // b.plast
    7a28:	mov	w0, #0x1                   	// #1
    7a2c:	ret
    7a30:	mov	x8, x0
    7a34:	strb	wzr, [x1]
    7a38:	ldr	w8, [x8, #16]
    7a3c:	mov	w0, wzr
    7a40:	strb	w8, [x1, #1]
    7a44:	ret
    7a48:	str	w1, [x0]
    7a4c:	ret

0000000000007a50 <lzma_stream_footer_encode@@XZ_5.0>:
    7a50:	stp	x29, x30, [sp, #-48]!
    7a54:	stp	x20, x19, [sp, #32]
    7a58:	ldr	w8, [x0]
    7a5c:	str	x21, [sp, #16]
    7a60:	mov	x29, sp
    7a64:	cbz	w8, 7a70 <lzma_stream_footer_encode@@XZ_5.0+0x20>
    7a68:	mov	w0, #0x8                   	// #8
    7a6c:	b	7ae0 <lzma_stream_footer_encode@@XZ_5.0+0x90>
    7a70:	mov	x21, x0
    7a74:	mov	x19, x1
    7a78:	bl	7af0 <lzma_stream_footer_encode@@XZ_5.0+0xa0>
    7a7c:	tbz	w0, #0, 7aa8 <lzma_stream_footer_encode@@XZ_5.0+0x58>
    7a80:	ldr	x8, [x21, #8]
    7a84:	add	x20, x19, #0x4
    7a88:	mov	x0, x20
    7a8c:	lsr	x8, x8, #2
    7a90:	sub	w1, w8, #0x1
    7a94:	bl	7a48 <lzma_stream_header_encode@@XZ_5.0+0xa8>
    7a98:	add	x1, x19, #0x8
    7a9c:	mov	x0, x21
    7aa0:	bl	7a1c <lzma_stream_header_encode@@XZ_5.0+0x7c>
    7aa4:	tbz	w0, #0, 7ab0 <lzma_stream_footer_encode@@XZ_5.0+0x60>
    7aa8:	mov	w0, #0xb                   	// #11
    7aac:	b	7ae0 <lzma_stream_footer_encode@@XZ_5.0+0x90>
    7ab0:	mov	w1, #0x6                   	// #6
    7ab4:	mov	x0, x20
    7ab8:	mov	w2, wzr
    7abc:	bl	31c0 <lzma_crc32@plt>
    7ac0:	mov	w1, w0
    7ac4:	mov	x0, x19
    7ac8:	bl	7a48 <lzma_stream_header_encode@@XZ_5.0+0xa8>
    7acc:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    7ad0:	ldr	x8, [x8, #3976]
    7ad4:	mov	w0, wzr
    7ad8:	ldrh	w8, [x8]
    7adc:	strh	w8, [x19, #10]
    7ae0:	ldp	x20, x19, [sp, #32]
    7ae4:	ldr	x21, [sp, #16]
    7ae8:	ldp	x29, x30, [sp], #48
    7aec:	ret
    7af0:	ldr	x8, [x0, #8]
    7af4:	mov	x9, #0x3ffff0000           	// #17179803648
    7af8:	movk	x9, #0xfffd
    7afc:	sub	x10, x8, #0x4
    7b00:	cmp	x10, x9
    7b04:	cset	w9, cc  // cc = lo, ul, last
    7b08:	tst	x8, #0x3
    7b0c:	cset	w8, eq  // eq = none
    7b10:	and	w0, w9, w8
    7b14:	ret

0000000000007b18 <lzma_vli_encode@@XZ_5.0>:
    7b18:	sub	sp, sp, #0x10
    7b1c:	ldr	x10, [x3]
    7b20:	cmp	x1, #0x0
    7b24:	add	x9, sp, #0x8
    7b28:	mov	w11, #0xa                   	// #10
    7b2c:	mov	x8, x0
    7b30:	csel	x9, x9, x1, eq  // eq = none
    7b34:	cinc	w0, w11, eq  // eq = none
    7b38:	cmp	x10, x4
    7b3c:	str	xzr, [sp, #8]
    7b40:	b.cs	7bd8 <lzma_vli_encode@@XZ_5.0+0xc0>  // b.hs, b.nlast
    7b44:	mov	w0, #0xb                   	// #11
    7b48:	tbnz	x8, #63, 7bd8 <lzma_vli_encode@@XZ_5.0+0xc0>
    7b4c:	ldr	x10, [x9]
    7b50:	cmp	x10, #0x8
    7b54:	b.hi	7bd8 <lzma_vli_encode@@XZ_5.0+0xc0>  // b.pmore
    7b58:	lsl	x11, x10, #3
    7b5c:	sub	x10, x11, x10
    7b60:	lsr	x8, x8, x10
    7b64:	cmp	x8, #0x80
    7b68:	b.cc	7bb0 <lzma_vli_encode@@XZ_5.0+0x98>  // b.lo, b.ul, b.last
    7b6c:	ldr	x10, [x9]
    7b70:	orr	w11, w8, #0x80
    7b74:	lsr	x8, x8, #7
    7b78:	add	x10, x10, #0x1
    7b7c:	str	x10, [x9]
    7b80:	ldr	x10, [x3]
    7b84:	strb	w11, [x2, x10]
    7b88:	add	x10, x10, #0x1
    7b8c:	cmp	x10, x4
    7b90:	str	x10, [x3]
    7b94:	b.ne	7b64 <lzma_vli_encode@@XZ_5.0+0x4c>  // b.any
    7b98:	add	x8, sp, #0x8
    7b9c:	cmp	x9, x8
    7ba0:	mov	w8, #0xb                   	// #11
    7ba4:	csel	w0, w8, wzr, eq  // eq = none
    7ba8:	add	sp, sp, #0x10
    7bac:	ret
    7bb0:	ldr	x10, [x3]
    7bb4:	strb	w8, [x2, x10]
    7bb8:	add	x8, x10, #0x1
    7bbc:	str	x8, [x3]
    7bc0:	ldr	x8, [x9]
    7bc4:	add	x10, sp, #0x8
    7bc8:	cmp	x9, x10
    7bcc:	cset	w0, ne  // ne = any
    7bd0:	add	x8, x8, #0x1
    7bd4:	str	x8, [x9]
    7bd8:	add	sp, sp, #0x10
    7bdc:	ret
    7be0:	sub	sp, sp, #0x20
    7be4:	mov	w3, w1
    7be8:	mov	x2, x0
    7bec:	add	x0, sp, #0x8
    7bf0:	add	x1, sp, #0x4
    7bf4:	stp	x29, x30, [sp, #16]
    7bf8:	add	x29, sp, #0x10
    7bfc:	bl	7c2c <lzma_vli_encode@@XZ_5.0+0x114>
    7c00:	cbz	w0, 7c0c <lzma_vli_encode@@XZ_5.0+0xf4>
    7c04:	mov	x0, #0xffffffffffffffff    	// #-1
    7c08:	b	7c20 <lzma_vli_encode@@XZ_5.0+0x108>
    7c0c:	ldr	w8, [sp, #4]
    7c10:	ldr	x9, [sp, #8]
    7c14:	mov	w10, #0x28                  	// #40
    7c18:	madd	x8, x8, x10, x9
    7c1c:	add	x0, x8, #0x30
    7c20:	ldp	x29, x30, [sp, #16]
    7c24:	add	sp, sp, #0x20
    7c28:	ret
    7c2c:	mov	x8, x0
    7c30:	lsr	x9, x2, #48
    7c34:	mov	w0, #0x8                   	// #8
    7c38:	cbnz	x9, 7c58 <lzma_vli_encode@@XZ_5.0+0x140>
    7c3c:	cmp	w3, #0x4, lsl #12
    7c40:	b.hi	7c58 <lzma_vli_encode@@XZ_5.0+0x140>  // b.pmore
    7c44:	lsl	w9, w3, #1
    7c48:	mov	w0, wzr
    7c4c:	str	w9, [x1]
    7c50:	mul	x9, x9, x2
    7c54:	str	x9, [x8]
    7c58:	ret
    7c5c:	sub	sp, sp, #0x40
    7c60:	stp	x29, x30, [sp, #16]
    7c64:	add	x29, sp, #0x10
    7c68:	stp	x20, x19, [sp, #48]
    7c6c:	mov	x20, x1
    7c70:	mov	x19, x0
    7c74:	add	x0, x29, #0x18
    7c78:	sub	x1, x29, #0x4
    7c7c:	str	x21, [sp, #32]
    7c80:	mov	x21, x2
    7c84:	bl	7c2c <lzma_vli_encode@@XZ_5.0+0x114>
    7c88:	cbnz	w0, 7d14 <lzma_vli_encode@@XZ_5.0+0x1fc>
    7c8c:	ldr	x8, [x19, #16]
    7c90:	cmp	x8, x21
    7c94:	b.ne	7ca8 <lzma_vli_encode@@XZ_5.0+0x190>  // b.any
    7c98:	ldr	w8, [x19, #24]
    7c9c:	ldur	w9, [x29, #-4]
    7ca0:	cmp	w8, w9
    7ca4:	b.eq	7ce8 <lzma_vli_encode@@XZ_5.0+0x1d0>  // b.none
    7ca8:	mov	x0, x19
    7cac:	mov	x1, x20
    7cb0:	bl	7d28 <lzma_vli_encode@@XZ_5.0+0x210>
    7cb4:	ldur	w8, [x29, #-4]
    7cb8:	mov	x1, x20
    7cbc:	add	x8, x8, x8, lsl #2
    7cc0:	lsl	x0, x8, #3
    7cc4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7cc8:	str	x0, [x19]
    7ccc:	ldr	x0, [x29, #24]
    7cd0:	mov	x1, x20
    7cd4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7cd8:	str	x0, [x19, #8]
    7cdc:	cbz	x0, 7d04 <lzma_vli_encode@@XZ_5.0+0x1ec>
    7ce0:	ldr	x8, [x19]
    7ce4:	cbz	x8, 7d04 <lzma_vli_encode@@XZ_5.0+0x1ec>
    7ce8:	str	x21, [x19, #16]
    7cec:	ldur	w8, [x29, #-4]
    7cf0:	mov	w0, wzr
    7cf4:	stur	xzr, [x19, #28]
    7cf8:	str	xzr, [x19, #40]
    7cfc:	str	w8, [x19, #24]
    7d00:	b	7d14 <lzma_vli_encode@@XZ_5.0+0x1fc>
    7d04:	mov	x0, x19
    7d08:	mov	x1, x20
    7d0c:	bl	7d28 <lzma_vli_encode@@XZ_5.0+0x210>
    7d10:	mov	w0, #0x5                   	// #5
    7d14:	ldp	x20, x19, [sp, #48]
    7d18:	ldr	x21, [sp, #32]
    7d1c:	ldp	x29, x30, [sp, #16]
    7d20:	add	sp, sp, #0x40
    7d24:	ret
    7d28:	stp	x29, x30, [sp, #-32]!
    7d2c:	stp	x20, x19, [sp, #16]
    7d30:	mov	x19, x0
    7d34:	ldr	x0, [x0]
    7d38:	mov	x29, sp
    7d3c:	mov	x20, x1
    7d40:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    7d44:	ldr	x0, [x19, #8]
    7d48:	mov	x1, x20
    7d4c:	str	xzr, [x19]
    7d50:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    7d54:	str	xzr, [x19, #8]
    7d58:	ldp	x20, x19, [sp, #16]
    7d5c:	ldp	x29, x30, [sp], #32
    7d60:	ret
    7d64:	ldr	w9, [x0, #28]
    7d68:	ldp	x8, x10, [x0]
    7d6c:	ldr	x11, [x0, #16]
    7d70:	mov	w12, #0x28                  	// #40
    7d74:	madd	x8, x9, x12, x8
    7d78:	madd	x10, x11, x9, x10
    7d7c:	stp	x10, xzr, [x8]
    7d80:	strb	wzr, [x8, #32]
    7d84:	ldr	w10, [x0, #24]
    7d88:	ldr	w11, [x0, #32]
    7d8c:	add	w12, w9, #0x1
    7d90:	cmp	w12, w10
    7d94:	add	w10, w11, #0x1
    7d98:	csinc	w9, wzr, w9, eq  // eq = none
    7d9c:	stp	w9, w10, [x0, #28]
    7da0:	mov	x0, x8
    7da4:	ret
    7da8:	ldp	w8, w9, [x0, #28]
    7dac:	subs	w8, w8, w9
    7db0:	b.cs	7dbc <lzma_vli_encode@@XZ_5.0+0x2a4>  // b.hs, b.nlast
    7db4:	ldr	w9, [x0, #24]
    7db8:	add	w8, w9, w8
    7dbc:	ldr	x9, [x0]
    7dc0:	mov	w10, #0x28                  	// #40
    7dc4:	umaddl	x8, w8, w10, x9
    7dc8:	ldrb	w0, [x8, #32]
    7dcc:	ret
    7dd0:	stp	x29, x30, [sp, #-64]!
    7dd4:	ldr	w8, [x0, #32]
    7dd8:	stp	x24, x23, [sp, #16]
    7ddc:	stp	x22, x21, [sp, #32]
    7de0:	stp	x20, x19, [sp, #48]
    7de4:	mov	x29, sp
    7de8:	cbz	w8, 7e54 <lzma_vli_encode@@XZ_5.0+0x33c>
    7dec:	ldr	w9, [x0, #28]
    7df0:	mov	x19, x5
    7df4:	mov	x20, x4
    7df8:	mov	x5, x3
    7dfc:	mov	x4, x2
    7e00:	mov	x21, x0
    7e04:	mov	x3, x1
    7e08:	subs	w8, w9, w8
    7e0c:	b.cs	7e18 <lzma_vli_encode@@XZ_5.0+0x300>  // b.hs, b.nlast
    7e10:	ldr	w9, [x21, #24]
    7e14:	add	w8, w9, w8
    7e18:	ldr	x22, [x21]
    7e1c:	mov	w9, #0x28                  	// #40
    7e20:	umaddl	x9, w8, w9, x22
    7e24:	ldrb	w9, [x9, #32]
    7e28:	cbz	w9, 7e54 <lzma_vli_encode@@XZ_5.0+0x33c>
    7e2c:	mov	w23, w8
    7e30:	mov	w8, #0x28                  	// #40
    7e34:	madd	x24, x23, x8, x22
    7e38:	ldp	x0, x2, [x24]
    7e3c:	add	x1, x21, #0x28
    7e40:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    7e44:	ldr	x8, [x21, #40]
    7e48:	ldr	x9, [x24, #8]
    7e4c:	cmp	x8, x9
    7e50:	b.cs	7e5c <lzma_vli_encode@@XZ_5.0+0x344>  // b.hs, b.nlast
    7e54:	mov	w0, wzr
    7e58:	b	7e84 <lzma_vli_encode@@XZ_5.0+0x36c>
    7e5c:	mov	w8, #0x28                  	// #40
    7e60:	madd	x8, x23, x8, x22
    7e64:	ldp	x9, x8, [x8, #16]
    7e68:	ldr	w10, [x21, #32]
    7e6c:	mov	w0, #0x1                   	// #1
    7e70:	str	xzr, [x21, #40]
    7e74:	str	x9, [x20]
    7e78:	sub	w9, w10, #0x1
    7e7c:	str	w9, [x21, #32]
    7e80:	str	x8, [x19]
    7e84:	ldp	x20, x19, [sp, #48]
    7e88:	ldp	x22, x21, [sp, #32]
    7e8c:	ldp	x24, x23, [sp, #16]
    7e90:	ldp	x29, x30, [sp], #64
    7e94:	ret

0000000000007e98 <lzma_stream_encoder_mt@@XZ_5.2>:
    7e98:	stp	x29, x30, [sp, #-48]!
    7e9c:	str	x21, [sp, #16]
    7ea0:	stp	x20, x19, [sp, #32]
    7ea4:	mov	x29, sp
    7ea8:	mov	x21, x1
    7eac:	mov	x19, x0
    7eb0:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    7eb4:	mov	w20, w0
    7eb8:	cbnz	w0, 7f00 <lzma_stream_encoder_mt@@XZ_5.2+0x68>
    7ebc:	ldp	x1, x0, [x19, #48]
    7ec0:	mov	x2, x21
    7ec4:	bl	7f20 <lzma_stream_encoder_mt@@XZ_5.2+0x88>
    7ec8:	cbz	w0, 7f14 <lzma_stream_encoder_mt@@XZ_5.2+0x7c>
    7ecc:	mov	w21, w0
    7ed0:	mov	x0, x19
    7ed4:	bl	3330 <lzma_end@plt>
    7ed8:	mov	w8, wzr
    7edc:	mov	w20, w21
    7ee0:	cbz	w8, 7f00 <lzma_stream_encoder_mt@@XZ_5.2+0x68>
    7ee4:	ldr	x8, [x19, #56]
    7ee8:	mov	w20, wzr
    7eec:	mov	w9, #0x1                   	// #1
    7ef0:	mov	w10, #0x101                 	// #257
    7ef4:	strb	w9, [x8, #88]
    7ef8:	strh	w10, [x8, #90]
    7efc:	strb	w9, [x8, #92]
    7f00:	mov	w0, w20
    7f04:	ldp	x20, x19, [sp, #32]
    7f08:	ldr	x21, [sp, #16]
    7f0c:	ldp	x29, x30, [sp], #48
    7f10:	ret
    7f14:	mov	w8, #0x1                   	// #1
    7f18:	cbnz	w8, 7ee4 <lzma_stream_encoder_mt@@XZ_5.2+0x4c>
    7f1c:	b	7f00 <lzma_stream_encoder_mt@@XZ_5.2+0x68>
    7f20:	sub	sp, sp, #0x130
    7f24:	stp	x29, x30, [sp, #224]
    7f28:	stp	x28, x25, [sp, #240]
    7f2c:	stp	x24, x23, [sp, #256]
    7f30:	stp	x22, x21, [sp, #272]
    7f34:	stp	x20, x19, [sp, #288]
    7f38:	ldr	x8, [x0, #16]
    7f3c:	adrp	x19, 7000 <lzma_index_encoder@@XZ_5.0+0x64>
    7f40:	add	x19, x19, #0xf20
    7f44:	mov	x20, x2
    7f48:	mov	x24, x0
    7f4c:	cmp	x8, x19
    7f50:	mov	x21, x1
    7f54:	add	x29, sp, #0xe0
    7f58:	b.eq	7f68 <lzma_stream_encoder_mt@@XZ_5.2+0xd0>  // b.none
    7f5c:	mov	x0, x24
    7f60:	mov	x1, x21
    7f64:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    7f68:	add	x1, sp, #0x20
    7f6c:	add	x2, sp, #0x18
    7f70:	add	x3, sp, #0x10
    7f74:	add	x4, sp, #0x8
    7f78:	mov	x0, x20
    7f7c:	str	x19, [x24, #16]
    7f80:	bl	82a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc>
    7f84:	mov	w19, w0
    7f88:	cbz	w0, 7fac <lzma_stream_encoder_mt@@XZ_5.2+0x114>
    7f8c:	mov	w0, w19
    7f90:	ldp	x20, x19, [sp, #288]
    7f94:	ldp	x22, x21, [sp, #272]
    7f98:	ldp	x24, x23, [sp, #256]
    7f9c:	ldp	x28, x25, [sp, #240]
    7fa0:	ldp	x29, x30, [sp, #224]
    7fa4:	add	sp, sp, #0x130
    7fa8:	ret
    7fac:	ldr	x23, [sp, #24]
    7fb0:	mov	x0, x23
    7fb4:	bl	3220 <lzma_raw_encoder_memusage@plt>
    7fb8:	cmn	x0, #0x1
    7fbc:	b.eq	7fd4 <lzma_stream_encoder_mt@@XZ_5.2+0x13c>  // b.none
    7fc0:	ldr	w0, [x20, #32]
    7fc4:	cmp	w0, #0xf
    7fc8:	b.ls	7fdc <lzma_stream_encoder_mt@@XZ_5.2+0x144>  // b.plast
    7fcc:	mov	w19, #0xb                   	// #11
    7fd0:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    7fd4:	mov	w19, #0x8                   	// #8
    7fd8:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    7fdc:	bl	30e0 <lzma_check_is_supported@plt>
    7fe0:	tst	w0, #0xff
    7fe4:	b.eq	8024 <lzma_stream_encoder_mt@@XZ_5.2+0x18c>  // b.none
    7fe8:	ldr	x22, [x24]
    7fec:	cbz	x22, 802c <lzma_stream_encoder_mt@@XZ_5.2+0x194>
    7ff0:	str	wzr, [x22]
    7ff4:	ldr	x8, [sp, #16]
    7ff8:	str	wzr, [x22, #308]
    7ffc:	str	xzr, [x22, #336]
    8000:	str	x8, [x22, #8]
    8004:	ldr	w8, [x22, #320]
    8008:	ldr	w9, [x20, #4]
    800c:	cmp	w8, w9
    8010:	b.ne	8080 <lzma_stream_encoder_mt@@XZ_5.2+0x1e8>  // b.any
    8014:	mov	w1, #0x1                   	// #1
    8018:	mov	x0, x22
    801c:	bl	8944 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x770>
    8020:	b	80b8 <lzma_stream_encoder_mt@@XZ_5.2+0x220>
    8024:	mov	w19, #0x3                   	// #3
    8028:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    802c:	mov	w0, #0x1d0                 	// #464
    8030:	mov	x1, x21
    8034:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    8038:	cbz	x0, 8178 <lzma_stream_encoder_mt@@XZ_5.2+0x2e0>
    803c:	add	x25, x0, #0x168
    8040:	mov	x22, x0
    8044:	str	x0, [x24]
    8048:	mov	x0, x25
    804c:	bl	8364 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x190>
    8050:	cbnz	w0, 8068 <lzma_stream_encoder_mt@@XZ_5.2+0x1d0>
    8054:	add	x0, x22, #0x198
    8058:	bl	837c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1a8>
    805c:	cbz	w0, 8180 <lzma_stream_encoder_mt@@XZ_5.2+0x2e8>
    8060:	mov	x0, x25
    8064:	bl	840c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x238>
    8068:	mov	x0, x22
    806c:	mov	x1, x21
    8070:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    8074:	str	xzr, [x24]
    8078:	mov	w19, #0x5                   	// #5
    807c:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    8080:	mov	x0, x22
    8084:	mov	x1, x21
    8088:	bl	8880 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6ac>
    808c:	stp	xzr, xzr, [x22, #312]
    8090:	str	xzr, [x22, #328]
    8094:	ldr	w8, [x20, #4]
    8098:	mov	w9, #0x1d0                 	// #464
    809c:	mov	x1, x21
    80a0:	mul	x0, x8, x9
    80a4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    80a8:	str	x0, [x22, #312]
    80ac:	cbz	x0, 8178 <lzma_stream_encoder_mt@@XZ_5.2+0x2e0>
    80b0:	ldr	w8, [x20, #4]
    80b4:	str	w8, [x22, #320]
    80b8:	ldr	x2, [sp, #8]
    80bc:	ldr	w3, [x20, #4]
    80c0:	add	x0, x22, #0x100
    80c4:	mov	x1, x21
    80c8:	bl	7c5c <lzma_vli_encode@@XZ_5.0+0x144>
    80cc:	cmp	w0, #0x0
    80d0:	csel	w19, w19, w0, eq  // eq = none
    80d4:	cbnz	w0, 7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    80d8:	ldr	x8, [x22, #16]
    80dc:	ldr	w9, [x20, #16]
    80e0:	cmn	x8, #0x1
    80e4:	str	w9, [x22, #304]
    80e8:	b.eq	8108 <lzma_stream_encoder_mt@@XZ_5.2+0x270>  // b.none
    80ec:	add	x24, x22, #0x20
    80f0:	ldur	x0, [x24, #-8]
    80f4:	mov	x1, x21
    80f8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    80fc:	ldr	x8, [x24], #16
    8100:	cmn	x8, #0x1
    8104:	b.ne	80f0 <lzma_stream_encoder_mt@@XZ_5.2+0x258>  // b.any
    8108:	add	x1, x22, #0x10
    810c:	mov	x0, x23
    8110:	mov	x2, x21
    8114:	bl	3240 <lzma_filters_copy@plt>
    8118:	cmp	w0, #0x0
    811c:	csel	w19, w19, w0, eq  // eq = none
    8120:	cbnz	w0, 7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    8124:	ldr	x0, [x22, #96]
    8128:	mov	x1, x21
    812c:	bl	33e0 <lzma_index_end@plt>
    8130:	mov	x0, x21
    8134:	bl	33b0 <lzma_index_init@plt>
    8138:	str	x0, [x22, #96]
    813c:	cbz	x0, 8178 <lzma_stream_encoder_mt@@XZ_5.2+0x2e0>
    8140:	mov	x0, x22
    8144:	str	wzr, [x0, #176]!
    8148:	ldr	w8, [x20, #32]
    814c:	add	x1, x0, #0x38
    8150:	str	w8, [x0, #16]
    8154:	bl	3390 <lzma_stream_header_encode@plt>
    8158:	cmp	w0, #0x0
    815c:	csel	w19, w19, w0, eq  // eq = none
    8160:	cbnz	w0, 7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    8164:	mov	w19, wzr
    8168:	mov	w8, #0xc                   	// #12
    816c:	str	xzr, [x22, #248]
    8170:	stp	xzr, x8, [x22, #344]
    8174:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    8178:	mov	w19, #0x5                   	// #5
    817c:	b	7f8c <lzma_stream_encoder_mt@@XZ_5.2+0xf4>
    8180:	adrp	x8, 8000 <lzma_stream_encoder_mt@@XZ_5.2+0x168>
    8184:	adrp	x9, 8000 <lzma_stream_encoder_mt@@XZ_5.2+0x168>
    8188:	add	x8, x8, #0x420
    818c:	add	x9, x9, #0x728
    8190:	stp	x8, x9, [x24, #24]
    8194:	adrp	x8, 8000 <lzma_stream_encoder_mt@@XZ_5.2+0x168>
    8198:	add	x8, x8, #0x7bc
    819c:	str	x8, [x24, #40]
    81a0:	mov	x8, #0xffffffffffffffff    	// #-1
    81a4:	movi	v0.2d, #0x0
    81a8:	str	x8, [x22, #16]
    81ac:	stp	xzr, x8, [x22, #104]
    81b0:	str	xzr, [x22, #96]
    81b4:	stp	q0, q0, [x22, #256]
    81b8:	str	q0, [x22, #288]
    81bc:	stp	xzr, xzr, [x22, #312]
    81c0:	stur	q0, [x22, #120]
    81c4:	stur	q0, [x22, #136]
    81c8:	stur	q0, [x22, #152]
    81cc:	str	xzr, [x22, #168]
    81d0:	b	7ff0 <lzma_stream_encoder_mt@@XZ_5.2+0x158>

00000000000081d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    81d4:	sub	sp, sp, #0x110
    81d8:	stp	x29, x30, [sp, #208]
    81dc:	add	x29, sp, #0xd0
    81e0:	add	x1, sp, #0x10
    81e4:	add	x2, x29, #0x18
    81e8:	add	x3, sp, #0x8
    81ec:	mov	x4, sp
    81f0:	str	x28, [sp, #224]
    81f4:	stp	x22, x21, [sp, #240]
    81f8:	stp	x20, x19, [sp, #256]
    81fc:	mov	x19, x0
    8200:	bl	82a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc>
    8204:	cbz	w0, 8224 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x50>
    8208:	mov	x0, #0xffffffffffffffff    	// #-1
    820c:	ldp	x20, x19, [sp, #256]
    8210:	ldp	x22, x21, [sp, #240]
    8214:	ldr	x28, [sp, #224]
    8218:	ldp	x29, x30, [sp, #208]
    821c:	add	sp, sp, #0x110
    8220:	ret
    8224:	ldr	x0, [x29, #24]
    8228:	ldr	w20, [x19, #4]
    822c:	ldr	x22, [sp, #8]
    8230:	bl	3220 <lzma_raw_encoder_memusage@plt>
    8234:	cmn	x0, #0x1
    8238:	b.eq	820c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>  // b.none
    823c:	mov	x21, x0
    8240:	ldr	x0, [sp]
    8244:	mov	w1, w20
    8248:	bl	7be0 <lzma_vli_encode@@XZ_5.0+0xc8>
    824c:	cmn	x0, #0x1
    8250:	b.eq	820c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>  // b.none
    8254:	ldr	w9, [x19, #4]
    8258:	mov	w10, #0x1d0                 	// #464
    825c:	mul	x8, x22, x20
    8260:	mul	x10, x9, x10
    8264:	mov	x9, #0xffffffffffff7e2f    	// #-33233
    8268:	sub	x9, x9, x10
    826c:	cmp	x9, x8
    8270:	b.cc	8208 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34>  // b.lo, b.ul, b.last
    8274:	add	x8, x8, x10
    8278:	mov	w10, #0x81d0                	// #33232
    827c:	add	x8, x8, x10
    8280:	mul	x9, x21, x20
    8284:	mvn	x10, x8
    8288:	cmp	x9, x10
    828c:	b.hi	8208 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34>  // b.pmore
    8290:	add	x8, x8, x9
    8294:	adds	x8, x8, x0
    8298:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
    829c:	b	820c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>
    82a0:	stp	x29, x30, [sp, #-64]!
    82a4:	str	x23, [sp, #16]
    82a8:	stp	x22, x21, [sp, #32]
    82ac:	stp	x20, x19, [sp, #48]
    82b0:	mov	x29, sp
    82b4:	cbz	x0, 82dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x108>
    82b8:	ldr	w8, [x0]
    82bc:	mov	x22, x0
    82c0:	cbnz	w8, 82d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    82c4:	ldr	w8, [x22, #4]
    82c8:	sub	w8, w8, #0x1
    82cc:	lsr	w8, w8, #14
    82d0:	cbz	w8, 82f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x120>
    82d4:	mov	w0, #0x8                   	// #8
    82d8:	b	82e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10c>
    82dc:	mov	w0, #0xb                   	// #11
    82e0:	ldp	x20, x19, [sp, #48]
    82e4:	ldp	x22, x21, [sp, #32]
    82e8:	ldr	x23, [sp, #16]
    82ec:	ldp	x29, x30, [sp], #64
    82f0:	ret
    82f4:	ldr	x0, [x22, #24]
    82f8:	mov	x19, x4
    82fc:	mov	x20, x3
    8300:	mov	x21, x2
    8304:	cbnz	x0, 8320 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x14c>
    8308:	mov	x23, x1
    830c:	ldr	w1, [x22, #20]
    8310:	mov	x0, x23
    8314:	bl	3f50 <lzma_block_total_size@@XZ_5.0+0x2c>
    8318:	tbnz	w0, #0, 82d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    831c:	mov	x0, x23
    8320:	str	x0, [x21]
    8324:	ldr	x8, [x22, #8]
    8328:	cbz	x8, 833c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x168>
    832c:	lsr	x9, x8, #50
    8330:	cbnz	x9, 82d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    8334:	str	x8, [x20]
    8338:	b	8348 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x174>
    833c:	bl	69d4 <lzma_raw_encoder@@XZ_5.0+0x88>
    8340:	str	x0, [x20]
    8344:	cbz	x0, 82d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    8348:	ldr	x0, [x20]
    834c:	bl	5938 <lzma_alone_encoder@@XZ_5.0+0x2f4>
    8350:	cmp	x0, #0x0
    8354:	mov	w8, #0x5                   	// #5
    8358:	str	x0, [x19]
    835c:	csel	w0, w8, wzr, eq  // eq = none
    8360:	b	82e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10c>
    8364:	stp	x29, x30, [sp, #-16]!
    8368:	mov	x1, xzr
    836c:	mov	x29, sp
    8370:	bl	32b0 <pthread_mutex_init@plt>
    8374:	ldp	x29, x30, [sp], #16
    8378:	ret
    837c:	sub	sp, sp, #0x40
    8380:	stp	x20, x19, [sp, #48]
    8384:	mov	x19, x0
    8388:	add	x1, sp, #0x10
    838c:	mov	w0, #0x1                   	// #1
    8390:	stp	x29, x30, [sp, #32]
    8394:	add	x29, sp, #0x20
    8398:	bl	3150 <clock_gettime@plt>
    839c:	cbnz	w0, 83dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>
    83a0:	add	x0, sp, #0x8
    83a4:	bl	33d0 <pthread_condattr_init@plt>
    83a8:	cbnz	w0, 83dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>
    83ac:	add	x0, sp, #0x8
    83b0:	mov	w1, #0x1                   	// #1
    83b4:	bl	3490 <pthread_condattr_setclock@plt>
    83b8:	mov	w20, w0
    83bc:	cbnz	w0, 83d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1fc>
    83c0:	add	x1, sp, #0x8
    83c4:	mov	x0, x19
    83c8:	bl	3420 <pthread_cond_init@plt>
    83cc:	mov	w20, w0
    83d0:	add	x0, sp, #0x8
    83d4:	bl	31e0 <pthread_condattr_destroy@plt>
    83d8:	cbz	w20, 83fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x228>
    83dc:	mov	x0, x19
    83e0:	mov	x1, xzr
    83e4:	str	wzr, [x19, #48]
    83e8:	bl	3420 <pthread_cond_init@plt>
    83ec:	ldp	x20, x19, [sp, #48]
    83f0:	ldp	x29, x30, [sp, #32]
    83f4:	add	sp, sp, #0x40
    83f8:	ret
    83fc:	mov	w8, #0x1                   	// #1
    8400:	mov	w0, wzr
    8404:	str	w8, [x19, #48]
    8408:	b	83ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x218>
    840c:	stp	x29, x30, [sp, #-16]!
    8410:	mov	x29, sp
    8414:	bl	3410 <pthread_mutex_destroy@plt>
    8418:	ldp	x29, x30, [sp], #16
    841c:	ret
    8420:	sub	sp, sp, #0xa0
    8424:	stp	x29, x30, [sp, #64]
    8428:	stp	x28, x27, [sp, #80]
    842c:	stp	x26, x25, [sp, #96]
    8430:	stp	x24, x23, [sp, #112]
    8434:	stp	x22, x21, [sp, #128]
    8438:	stp	x20, x19, [sp, #144]
    843c:	ldr	w8, [x0]
    8440:	add	x29, sp, #0x40
    8444:	str	x2, [sp, #16]
    8448:	cmp	w8, #0x3
    844c:	b.hi	84b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2e0>  // b.pmore
    8450:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    8454:	add	x9, x9, #0xcbc
    8458:	adr	x10, 8484 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    845c:	ldrb	w11, [x9, x8]
    8460:	add	x10, x10, x11, lsl #2
    8464:	mov	x19, x7
    8468:	mov	x20, x6
    846c:	mov	x22, x5
    8470:	mov	x25, x4
    8474:	mov	x26, x3
    8478:	mov	x21, x0
    847c:	mov	x23, x1
    8480:	br	x10
    8484:	add	x0, x21, #0xe8
    8488:	add	x1, x21, #0xf8
    848c:	mov	w2, #0xc                   	// #12
    8490:	mov	x3, x22
    8494:	mov	x4, x20
    8498:	mov	x5, x19
    849c:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    84a0:	ldr	x8, [x21, #248]
    84a4:	cmp	x8, #0xc
    84a8:	b.cs	84bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2e8>  // b.hs, b.nlast
    84ac:	mov	w24, wzr
    84b0:	b	86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    84b4:	mov	w24, #0xb                   	// #11
    84b8:	b	86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    84bc:	mov	w8, #0x1                   	// #1
    84c0:	str	xzr, [x21, #248]
    84c4:	str	w8, [x21]
    84c8:	ldr	w28, [x29, #96]
    84cc:	str	x22, [sp, #8]
    84d0:	add	x22, x21, #0x168
    84d4:	add	x27, x21, #0x100
    84d8:	stp	xzr, xzr, [x29, #-16]
    84dc:	sturb	wzr, [x29, #-20]
    84e0:	mov	x0, x22
    84e4:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    84e8:	ldr	w24, [x21, #308]
    84ec:	cbnz	w24, 8510 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x33c>
    84f0:	ldr	x1, [sp, #8]
    84f4:	sub	x4, x29, #0x8
    84f8:	sub	x5, x29, #0x10
    84fc:	mov	x0, x27
    8500:	mov	x2, x20
    8504:	mov	x3, x19
    8508:	bl	7dd0 <lzma_vli_encode@@XZ_5.0+0x2b8>
    850c:	mov	w24, w0
    8510:	mov	x0, x22
    8514:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8518:	cmp	w24, #0x1
    851c:	b.ne	8540 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x36c>  // b.any
    8520:	ldr	x0, [x21, #96]
    8524:	ldp	x3, x2, [x29, #-16]
    8528:	mov	x1, x23
    852c:	bl	3310 <lzma_index_append@plt>
    8530:	ldr	x8, [x20]
    8534:	cmp	x8, x19
    8538:	b.cc	84e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x30c>  // b.lo, b.ul, b.last
    853c:	mov	w24, w0
    8540:	cbnz	w24, 85d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3fc>
    8544:	ldr	x2, [sp, #16]
    8548:	mov	x0, x21
    854c:	mov	x1, x23
    8550:	mov	x3, x26
    8554:	mov	x4, x25
    8558:	mov	w5, w28
    855c:	bl	8a64 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x890>
    8560:	cbnz	w0, 85cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3f8>
    8564:	ldr	x24, [x26]
    8568:	cmp	x24, x25
    856c:	b.ne	8598 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c4>  // b.any
    8570:	cbz	w28, 85fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x428>
    8574:	cmp	w28, #0x4
    8578:	b.eq	85f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x41c>  // b.none
    857c:	mov	x0, x27
    8580:	bl	8bf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa1c>
    8584:	tbz	w0, #0, 8598 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c4>
    8588:	cmp	w28, #0x2
    858c:	b.eq	85f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x41c>  // b.none
    8590:	cmp	w28, #0x3
    8594:	b.eq	86dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x508>  // b.none
    8598:	ldr	x8, [x20]
    859c:	cmp	x8, x19
    85a0:	b.eq	85e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x410>  // b.none
    85a4:	cmp	x24, x25
    85a8:	cset	w3, cc  // cc = lo, ul, last
    85ac:	add	x1, sp, #0x18
    85b0:	sub	x2, x29, #0x14
    85b4:	mov	x0, x21
    85b8:	bl	8c00 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa2c>
    85bc:	tbz	w0, #0, 84e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x30c>
    85c0:	mov	w24, #0x20                  	// #32
    85c4:	mov	w8, #0x1                   	// #1
    85c8:	b	8604 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x430>
    85cc:	mov	w24, w0
    85d0:	mov	x0, x21
    85d4:	mov	w1, wzr
    85d8:	bl	8944 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x770>
    85dc:	mov	w8, #0x1                   	// #1
    85e0:	b	8604 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x430>
    85e4:	mov	w24, wzr
    85e8:	mov	w8, #0x1                   	// #1
    85ec:	b	8604 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x430>
    85f0:	mov	w8, #0x1                   	// #1
    85f4:	mov	w24, #0x1                   	// #1
    85f8:	b	8604 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x430>
    85fc:	mov	w8, #0x1                   	// #1
    8600:	mov	w24, w28
    8604:	ldr	x22, [sp, #8]
    8608:	cbnz	w8, 86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    860c:	ldr	x8, [x21, #128]
    8610:	ldr	x0, [x21, #104]
    8614:	mov	x1, x23
    8618:	mov	x2, xzr
    861c:	mov	x3, xzr
    8620:	mov	x4, xzr
    8624:	mov	x5, x22
    8628:	mov	x6, x20
    862c:	mov	x7, x19
    8630:	str	wzr, [sp]
    8634:	blr	x8
    8638:	cmp	w0, #0x1
    863c:	b.ne	8670 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x49c>  // b.any
    8640:	ldr	x0, [x21, #96]
    8644:	bl	3510 <lzma_index_size@plt>
    8648:	add	x8, x21, #0xb0
    864c:	str	x0, [x21, #184]
    8650:	add	x1, x21, #0xe8
    8654:	mov	x0, x8
    8658:	bl	3210 <lzma_stream_footer_encode@plt>
    865c:	cbz	w0, 86c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4f4>
    8660:	mov	w8, wzr
    8664:	mov	w24, #0xb                   	// #11
    8668:	cbnz	w8, 867c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    866c:	b	86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    8670:	mov	w8, wzr
    8674:	mov	w24, w0
    8678:	cbz	w8, 86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    867c:	add	x0, x21, #0xe8
    8680:	add	x1, x21, #0xf8
    8684:	mov	w2, #0xc                   	// #12
    8688:	mov	x3, x22
    868c:	mov	x4, x20
    8690:	mov	x5, x19
    8694:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    8698:	ldr	x8, [x21, #248]
    869c:	cmp	x8, #0xb
    86a0:	cset	w24, hi  // hi = pmore
    86a4:	mov	w0, w24
    86a8:	ldp	x20, x19, [sp, #144]
    86ac:	ldp	x22, x21, [sp, #128]
    86b0:	ldp	x24, x23, [sp, #112]
    86b4:	ldp	x26, x25, [sp, #96]
    86b8:	ldp	x28, x27, [sp, #80]
    86bc:	ldp	x29, x30, [sp, #64]
    86c0:	add	sp, sp, #0xa0
    86c4:	ret
    86c8:	mov	w8, #0x3                   	// #3
    86cc:	str	w8, [x21]
    86d0:	mov	w8, #0x1                   	// #1
    86d4:	cbnz	w8, 867c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    86d8:	b	86a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>
    86dc:	ldr	x2, [x21, #96]
    86e0:	add	x0, x21, #0x68
    86e4:	mov	x1, x23
    86e8:	bl	6c78 <lzma_filter_flags_encode@@XZ_5.0+0xec>
    86ec:	ldr	x22, [sp, #8]
    86f0:	cmp	w0, #0x0
    86f4:	mov	w24, w0
    86f8:	cset	w8, ne  // ne = any
    86fc:	cbnz	w0, 8608 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x434>
    8700:	ldr	x0, [x21, #96]
    8704:	mov	w8, #0x2                   	// #2
    8708:	str	w8, [x21]
    870c:	bl	3510 <lzma_index_size@plt>
    8710:	ldr	x9, [x21, #352]
    8714:	mov	w8, wzr
    8718:	add	x9, x0, x9
    871c:	add	x9, x9, #0xc
    8720:	str	x9, [x21, #352]
    8724:	b	8608 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x434>
    8728:	stp	x29, x30, [sp, #-48]!
    872c:	str	x21, [sp, #16]
    8730:	stp	x20, x19, [sp, #32]
    8734:	mov	x29, sp
    8738:	mov	x19, x1
    873c:	mov	x20, x0
    8740:	bl	8880 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6ac>
    8744:	add	x0, x20, #0x100
    8748:	mov	x1, x19
    874c:	bl	7d28 <lzma_vli_encode@@XZ_5.0+0x210>
    8750:	ldr	x8, [x20, #16]
    8754:	cmn	x8, #0x1
    8758:	b.eq	8778 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5a4>  // b.none
    875c:	add	x21, x20, #0x20
    8760:	ldur	x0, [x21, #-8]
    8764:	mov	x1, x19
    8768:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    876c:	ldr	x8, [x21], #16
    8770:	cmn	x8, #0x1
    8774:	b.ne	8760 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x58c>  // b.any
    8778:	add	x0, x20, #0x68
    877c:	mov	x1, x19
    8780:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    8784:	ldr	x0, [x20, #96]
    8788:	mov	x1, x19
    878c:	bl	33e0 <lzma_index_end@plt>
    8790:	add	x0, x20, #0x198
    8794:	bl	90b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xedc>
    8798:	add	x0, x20, #0x168
    879c:	bl	840c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x238>
    87a0:	mov	x0, x20
    87a4:	mov	x1, x19
    87a8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    87ac:	ldp	x20, x19, [sp, #32]
    87b0:	ldr	x21, [sp, #16]
    87b4:	ldp	x29, x30, [sp], #48
    87b8:	ret
    87bc:	stp	x29, x30, [sp, #-64]!
    87c0:	stp	x20, x19, [sp, #48]
    87c4:	add	x20, x0, #0x168
    87c8:	stp	x22, x21, [sp, #32]
    87cc:	mov	x22, x0
    87d0:	mov	x0, x20
    87d4:	stp	x24, x23, [sp, #16]
    87d8:	mov	x29, sp
    87dc:	mov	x19, x2
    87e0:	mov	x21, x1
    87e4:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    87e8:	ldr	x8, [x22, #344]
    87ec:	str	x8, [x21]
    87f0:	ldr	x8, [x22, #352]
    87f4:	str	x8, [x19]
    87f8:	ldr	w8, [x22, #324]
    87fc:	cbz	w8, 8864 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x690>
    8800:	mov	x23, xzr
    8804:	mov	w24, #0x160                 	// #352
    8808:	ldr	x8, [x22, #312]
    880c:	add	x0, x8, x24
    8810:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8814:	ldr	x8, [x22, #312]
    8818:	ldr	x9, [x21]
    881c:	add	x8, x8, x24
    8820:	sub	x10, x8, #0x130
    8824:	ldr	x10, [x10]
    8828:	sub	x8, x8, #0x128
    882c:	add	x9, x9, x10
    8830:	str	x9, [x21]
    8834:	ldr	x8, [x8]
    8838:	ldr	x9, [x19]
    883c:	add	x8, x9, x8
    8840:	str	x8, [x19]
    8844:	ldr	x8, [x22, #312]
    8848:	add	x0, x8, x24
    884c:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8850:	ldr	w8, [x22, #324]
    8854:	add	x23, x23, #0x1
    8858:	add	x24, x24, #0x1d0
    885c:	cmp	x23, x8
    8860:	b.cc	8808 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x634>  // b.lo, b.ul, b.last
    8864:	mov	x0, x20
    8868:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    886c:	ldp	x20, x19, [sp, #48]
    8870:	ldp	x22, x21, [sp, #32]
    8874:	ldp	x24, x23, [sp, #16]
    8878:	ldp	x29, x30, [sp], #64
    887c:	ret
    8880:	stp	x29, x30, [sp, #-64]!
    8884:	stp	x22, x21, [sp, #32]
    8888:	stp	x20, x19, [sp, #48]
    888c:	ldr	w8, [x0, #324]
    8890:	mov	x20, x0
    8894:	mov	x19, x1
    8898:	str	x23, [sp, #16]
    889c:	mov	x29, sp
    88a0:	cbz	w8, 88f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x720>
    88a4:	mov	x21, xzr
    88a8:	mov	w22, #0x160                 	// #352
    88ac:	mov	w23, #0x4                   	// #4
    88b0:	ldr	x8, [x20, #312]
    88b4:	add	x0, x8, x22
    88b8:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    88bc:	ldr	x8, [x20, #312]
    88c0:	add	x8, x8, x22
    88c4:	sub	x9, x8, #0x160
    88c8:	add	x0, x8, #0x30
    88cc:	str	w23, [x9]
    88d0:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    88d4:	ldr	x8, [x20, #312]
    88d8:	add	x0, x8, x22
    88dc:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    88e0:	ldr	w8, [x20, #324]
    88e4:	add	x21, x21, #0x1
    88e8:	add	x22, x22, #0x1d0
    88ec:	cmp	x21, x8
    88f0:	b.cc	88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6dc>  // b.lo, b.ul, b.last
    88f4:	ldr	w8, [x20, #324]
    88f8:	cbz	w8, 8924 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x750>
    88fc:	mov	x21, xzr
    8900:	mov	w22, #0x1c8                 	// #456
    8904:	ldr	x8, [x20, #312]
    8908:	ldr	x0, [x8, x22]
    890c:	bl	9458 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1284>
    8910:	ldr	w8, [x20, #324]
    8914:	add	x21, x21, #0x1
    8918:	add	x22, x22, #0x1d0
    891c:	cmp	x21, x8
    8920:	b.cc	8904 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x730>  // b.lo, b.ul, b.last
    8924:	ldr	x0, [x20, #312]
    8928:	mov	x1, x19
    892c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    8930:	ldp	x20, x19, [sp, #48]
    8934:	ldp	x22, x21, [sp, #32]
    8938:	ldr	x23, [sp, #16]
    893c:	ldp	x29, x30, [sp], #64
    8940:	ret
    8944:	stp	x29, x30, [sp, #-64]!
    8948:	stp	x22, x21, [sp, #32]
    894c:	stp	x20, x19, [sp, #48]
    8950:	ldr	w8, [x0, #324]
    8954:	mov	x19, x0
    8958:	mov	w20, w1
    895c:	str	x23, [sp, #16]
    8960:	mov	x29, sp
    8964:	cbz	w8, 89b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7e4>
    8968:	mov	x21, xzr
    896c:	mov	w22, #0x160                 	// #352
    8970:	mov	w23, #0x3                   	// #3
    8974:	ldr	x8, [x19, #312]
    8978:	add	x0, x8, x22
    897c:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8980:	ldr	x8, [x19, #312]
    8984:	add	x8, x8, x22
    8988:	sub	x9, x8, #0x160
    898c:	add	x0, x8, #0x30
    8990:	str	w23, [x9]
    8994:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    8998:	ldr	x8, [x19, #312]
    899c:	add	x0, x8, x22
    89a0:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    89a4:	ldr	w8, [x19, #324]
    89a8:	add	x21, x21, #0x1
    89ac:	add	x22, x22, #0x1d0
    89b0:	cmp	x21, x8
    89b4:	b.cc	8974 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7a0>  // b.lo, b.ul, b.last
    89b8:	tbz	w20, #0, 8a28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x854>
    89bc:	ldr	w8, [x19, #324]
    89c0:	cbz	w8, 8a28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x854>
    89c4:	mov	x20, xzr
    89c8:	mov	w21, #0x1d0                 	// #464
    89cc:	b	89f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x81c>
    89d0:	ldr	x8, [x19, #312]
    89d4:	madd	x8, x20, x21, x8
    89d8:	add	x0, x8, #0x160
    89dc:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    89e0:	ldr	w8, [x19, #324]
    89e4:	add	x20, x20, #0x1
    89e8:	cmp	x20, x8
    89ec:	b.cs	8a28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x854>  // b.hs, b.nlast
    89f0:	ldr	x8, [x19, #312]
    89f4:	mul	x22, x20, x21
    89f8:	add	x8, x8, x22
    89fc:	add	x0, x8, #0x160
    8a00:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8a04:	ldr	x8, [x19, #312]
    8a08:	ldr	w9, [x8, x22]
    8a0c:	cbz	w9, 89d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7fc>
    8a10:	mul	x22, x20, x21
    8a14:	add	x8, x8, x22
    8a18:	add	x0, x8, #0x190
    8a1c:	add	x1, x8, #0x160
    8a20:	bl	90e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf10>
    8a24:	b	8a04 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x830>
    8a28:	ldp	x20, x19, [sp, #48]
    8a2c:	ldp	x22, x21, [sp, #32]
    8a30:	ldr	x23, [sp, #16]
    8a34:	ldp	x29, x30, [sp], #64
    8a38:	ret
    8a3c:	stp	x29, x30, [sp, #-16]!
    8a40:	mov	x29, sp
    8a44:	bl	3550 <pthread_mutex_unlock@plt>
    8a48:	ldp	x29, x30, [sp], #16
    8a4c:	ret
    8a50:	stp	x29, x30, [sp, #-16]!
    8a54:	mov	x29, sp
    8a58:	bl	3530 <pthread_mutex_lock@plt>
    8a5c:	ldp	x29, x30, [sp], #16
    8a60:	ret
    8a64:	sub	sp, sp, #0x70
    8a68:	stp	x26, x25, [sp, #48]
    8a6c:	stp	x24, x23, [sp, #64]
    8a70:	stp	x22, x21, [sp, #80]
    8a74:	stp	x20, x19, [sp, #96]
    8a78:	mov	w19, w5
    8a7c:	mov	x20, x4
    8a80:	mov	x21, x3
    8a84:	mov	x22, x2
    8a88:	mov	x23, x1
    8a8c:	mov	x24, x0
    8a90:	add	x25, x0, #0x168
    8a94:	mov	w26, #0x2                   	// #2
    8a98:	stp	x29, x30, [sp, #16]
    8a9c:	stp	x28, x27, [sp, #32]
    8aa0:	add	x29, sp, #0x10
    8aa4:	b	8ad4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x900>
    8aa8:	ldr	x8, [x24, #336]
    8aac:	add	x0, x8, #0x160
    8ab0:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8ab4:	mov	x0, x25
    8ab8:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8abc:	ldr	w27, [x24, #308]
    8ac0:	mov	x0, x25
    8ac4:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8ac8:	mov	w8, wzr
    8acc:	mov	w0, w27
    8ad0:	tbz	w8, #0, 8bd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9fc>
    8ad4:	ldr	x8, [x21]
    8ad8:	cmp	x8, x20
    8adc:	b.cc	8af0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x91c>  // b.lo, b.ul, b.last
    8ae0:	mov	w0, wzr
    8ae4:	cbz	w19, 8bd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9fc>
    8ae8:	ldr	x8, [x24, #336]
    8aec:	cbz	x8, 8bd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9fc>
    8af0:	ldr	x8, [x24, #336]
    8af4:	cbnz	x8, 8b18 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x944>
    8af8:	mov	x0, x24
    8afc:	mov	x1, x23
    8b00:	bl	8cf4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb20>
    8b04:	ldr	x8, [x24, #336]
    8b08:	cmp	x8, #0x0
    8b0c:	csel	w27, w0, w27, eq  // eq = none
    8b10:	mov	w0, w27
    8b14:	cbz	x8, 8bd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9fc>
    8b18:	ldr	x8, [x24, #336]
    8b1c:	add	x4, sp, #0x8
    8b20:	mov	x0, x22
    8b24:	mov	x1, x21
    8b28:	ldp	x3, x9, [x8, #8]
    8b2c:	mov	x2, x20
    8b30:	str	x9, [sp, #8]
    8b34:	ldr	x5, [x24, #8]
    8b38:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    8b3c:	ldr	x8, [sp, #8]
    8b40:	ldr	x9, [x24, #8]
    8b44:	cmp	x8, x9
    8b48:	b.ne	8b54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x980>  // b.any
    8b4c:	mov	w28, #0x1                   	// #1
    8b50:	b	8b6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x998>
    8b54:	ldr	x8, [x21]
    8b58:	cmp	w19, #0x0
    8b5c:	cset	w9, ne  // ne = any
    8b60:	cmp	x8, x20
    8b64:	cset	w8, eq  // eq = none
    8b68:	and	w28, w9, w8
    8b6c:	ldr	x8, [x24, #336]
    8b70:	add	x0, x8, #0x160
    8b74:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8b78:	ldr	x8, [x24, #336]
    8b7c:	ldr	w9, [x8]
    8b80:	cbz	w9, 8aa8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8d4>
    8b84:	ldr	x9, [sp, #8]
    8b88:	str	x9, [x8, #16]
    8b8c:	cbz	w28, 8bb0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9dc>
    8b90:	add	x0, x8, #0x190
    8b94:	str	w26, [x8]
    8b98:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    8b9c:	ldr	x8, [x24, #336]
    8ba0:	add	x0, x8, #0x160
    8ba4:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8ba8:	str	xzr, [x24, #336]
    8bac:	b	8bc4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    8bb0:	add	x0, x8, #0x190
    8bb4:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    8bb8:	ldr	x8, [x24, #336]
    8bbc:	add	x0, x8, #0x160
    8bc0:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8bc4:	mov	w8, #0x1                   	// #1
    8bc8:	mov	w0, w27
    8bcc:	tbnz	w8, #0, 8ad4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x900>
    8bd0:	ldp	x20, x19, [sp, #96]
    8bd4:	ldp	x22, x21, [sp, #80]
    8bd8:	ldp	x24, x23, [sp, #64]
    8bdc:	ldp	x26, x25, [sp, #48]
    8be0:	ldp	x28, x27, [sp, #32]
    8be4:	ldp	x29, x30, [sp, #16]
    8be8:	add	sp, sp, #0x70
    8bec:	ret
    8bf0:	ldr	w8, [x0, #32]
    8bf4:	cmp	w8, #0x0
    8bf8:	cset	w0, eq  // eq = none
    8bfc:	ret
    8c00:	stp	x29, x30, [sp, #-80]!
    8c04:	stp	x24, x23, [sp, #32]
    8c08:	stp	x22, x21, [sp, #48]
    8c0c:	stp	x20, x19, [sp, #64]
    8c10:	mov	x8, x2
    8c14:	ldr	w2, [x0, #304]
    8c18:	mov	w19, w3
    8c1c:	mov	x20, x0
    8c20:	mov	x21, x1
    8c24:	str	x25, [sp, #16]
    8c28:	mov	x29, sp
    8c2c:	cbz	w2, 8c4c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa78>
    8c30:	ldrb	w9, [x8]
    8c34:	cbnz	w9, 8c4c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa78>
    8c38:	mov	w9, #0x1                   	// #1
    8c3c:	add	x1, x20, #0x198
    8c40:	mov	x0, x21
    8c44:	strb	w9, [x8]
    8c48:	bl	93b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11dc>
    8c4c:	add	x22, x20, #0x168
    8c50:	mov	x0, x22
    8c54:	add	x23, x20, #0x100
    8c58:	add	x24, x20, #0x198
    8c5c:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8c60:	mov	w25, wzr
    8c64:	tbz	w19, #0, 8c7c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xaa8>
    8c68:	ldr	x8, [x20, #328]
    8c6c:	cbz	x8, 8c7c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xaa8>
    8c70:	mov	x0, x23
    8c74:	bl	8ddc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc08>
    8c78:	tbnz	w0, #0, 8cd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xafc>
    8c7c:	mov	x0, x23
    8c80:	bl	7da8 <lzma_vli_encode@@XZ_5.0+0x290>
    8c84:	tbnz	w0, #0, 8cd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xafc>
    8c88:	ldr	w8, [x20, #308]
    8c8c:	cmp	w8, #0x0
    8c90:	cset	w8, ne  // ne = any
    8c94:	orr	w8, w25, w8
    8c98:	tbnz	w8, #0, 8cd0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xafc>
    8c9c:	ldr	w8, [x20, #304]
    8ca0:	cbnz	w8, 8cb4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xae0>
    8ca4:	mov	x0, x24
    8ca8:	mov	x1, x22
    8cac:	bl	90e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf10>
    8cb0:	b	8c64 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa90>
    8cb4:	mov	x0, x24
    8cb8:	mov	x1, x22
    8cbc:	mov	x2, x21
    8cc0:	bl	9444 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1270>
    8cc4:	cmp	w0, #0x0
    8cc8:	cset	w25, ne  // ne = any
    8ccc:	b	8c64 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa90>
    8cd0:	mov	x0, x22
    8cd4:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8cd8:	and	w0, w25, #0x1
    8cdc:	ldp	x20, x19, [sp, #64]
    8ce0:	ldp	x22, x21, [sp, #48]
    8ce4:	ldp	x24, x23, [sp, #32]
    8ce8:	ldr	x25, [sp, #16]
    8cec:	ldp	x29, x30, [sp], #80
    8cf0:	ret
    8cf4:	stp	x29, x30, [sp, #-48]!
    8cf8:	stp	x20, x19, [sp, #32]
    8cfc:	add	x20, x0, #0x100
    8d00:	mov	x19, x0
    8d04:	mov	x0, x20
    8d08:	stp	x22, x21, [sp, #16]
    8d0c:	mov	x29, sp
    8d10:	mov	x21, x1
    8d14:	bl	8ddc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc08>
    8d18:	tbz	w0, #0, 8da0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbcc>
    8d1c:	add	x22, x19, #0x168
    8d20:	mov	x0, x22
    8d24:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8d28:	ldr	x8, [x19, #328]
    8d2c:	cbz	x8, 8d3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb68>
    8d30:	str	x8, [x19, #336]
    8d34:	ldr	x8, [x8, #344]
    8d38:	str	x8, [x19, #328]
    8d3c:	mov	x0, x22
    8d40:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8d44:	ldr	x8, [x19, #336]
    8d48:	cbz	x8, 8d90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbbc>
    8d4c:	ldr	x8, [x19, #336]
    8d50:	add	x0, x8, #0x160
    8d54:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8d58:	ldr	x8, [x19, #336]
    8d5c:	mov	w9, #0x1                   	// #1
    8d60:	mov	x0, x20
    8d64:	str	w9, [x8]
    8d68:	str	xzr, [x8, #16]
    8d6c:	bl	7d64 <lzma_vli_encode@@XZ_5.0+0x24c>
    8d70:	ldr	x8, [x19, #336]
    8d74:	str	x0, [x8, #24]
    8d78:	add	x0, x8, #0x190
    8d7c:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    8d80:	ldr	x8, [x19, #336]
    8d84:	add	x0, x8, #0x160
    8d88:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8d8c:	b	8da0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbcc>
    8d90:	ldr	w8, [x19, #324]
    8d94:	ldr	w9, [x19, #320]
    8d98:	cmp	w8, w9
    8d9c:	b.ne	8db4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbe0>  // b.any
    8da0:	mov	w0, wzr
    8da4:	ldp	x20, x19, [sp, #32]
    8da8:	ldp	x22, x21, [sp, #16]
    8dac:	ldp	x29, x30, [sp], #48
    8db0:	ret
    8db4:	mov	x0, x19
    8db8:	mov	x1, x21
    8dbc:	bl	8df0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc1c>
    8dc0:	cbnz	w0, 8da4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbd0>
    8dc4:	b	8d4c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb78>
    8dc8:	stp	x29, x30, [sp, #-16]!
    8dcc:	mov	x29, sp
    8dd0:	bl	3200 <pthread_cond_signal@plt>
    8dd4:	ldp	x29, x30, [sp], #16
    8dd8:	ret
    8ddc:	ldr	w8, [x0, #32]
    8de0:	ldr	w9, [x0, #24]
    8de4:	cmp	w8, w9
    8de8:	cset	w0, cc  // cc = lo, ul, last
    8dec:	ret
    8df0:	stp	x29, x30, [sp, #-80]!
    8df4:	stp	x26, x25, [sp, #16]
    8df8:	stp	x24, x23, [sp, #32]
    8dfc:	stp	x22, x21, [sp, #48]
    8e00:	stp	x20, x19, [sp, #64]
    8e04:	mov	x20, x0
    8e08:	ldr	x25, [x0, #312]
    8e0c:	ldr	w26, [x0, #324]
    8e10:	ldr	x0, [x0, #8]
    8e14:	mov	w8, #0x1d0                 	// #464
    8e18:	mov	x29, sp
    8e1c:	mov	x19, x1
    8e20:	madd	x21, x26, x8, x25
    8e24:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    8e28:	mov	x24, x21
    8e2c:	str	x0, [x24, #8]!
    8e30:	cbz	x0, 8ebc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xce8>
    8e34:	mov	w8, #0x1d0                 	// #464
    8e38:	madd	x8, x26, x8, x25
    8e3c:	add	x22, x8, #0x160
    8e40:	mov	x0, x22
    8e44:	bl	8364 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x190>
    8e48:	cbnz	w0, 8eb0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcdc>
    8e4c:	mov	w8, #0x1d0                 	// #464
    8e50:	madd	x8, x26, x8, x25
    8e54:	add	x23, x8, #0x190
    8e58:	mov	x0, x23
    8e5c:	bl	837c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1a8>
    8e60:	cbnz	w0, 8ea8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcd4>
    8e64:	mov	w8, #0x1d0                 	// #464
    8e68:	madd	x8, x26, x8, x25
    8e6c:	mov	x9, #0xffffffffffffffff    	// #-1
    8e70:	movi	v0.2d, #0x0
    8e74:	add	x0, x8, #0x1c8
    8e78:	mov	x1, x21
    8e7c:	str	wzr, [x21]
    8e80:	stp	x20, x19, [x8, #32]
    8e84:	stp	xzr, xzr, [x8, #48]
    8e88:	stp	xzr, x9, [x8, #64]
    8e8c:	stp	q0, q0, [x8, #80]
    8e90:	str	q0, [x8, #112]
    8e94:	str	xzr, [x8, #128]
    8e98:	bl	8eec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd18>
    8e9c:	cbz	w0, 8ed8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd04>
    8ea0:	mov	x0, x23
    8ea4:	bl	90b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xedc>
    8ea8:	mov	x0, x22
    8eac:	bl	840c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x238>
    8eb0:	ldr	x0, [x24]
    8eb4:	mov	x1, x19
    8eb8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    8ebc:	mov	w0, #0x5                   	// #5
    8ec0:	ldp	x20, x19, [sp, #64]
    8ec4:	ldp	x22, x21, [sp, #48]
    8ec8:	ldp	x24, x23, [sp, #32]
    8ecc:	ldp	x26, x25, [sp, #16]
    8ed0:	ldp	x29, x30, [sp], #80
    8ed4:	ret
    8ed8:	ldr	w8, [x20, #324]
    8edc:	str	x21, [x20, #336]
    8ee0:	add	w8, w8, #0x1
    8ee4:	str	w8, [x20, #324]
    8ee8:	b	8ec0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcec>
    8eec:	sub	sp, sp, #0x130
    8ef0:	stp	x20, x19, [sp, #288]
    8ef4:	mov	x20, x0
    8ef8:	mov	x0, sp
    8efc:	stp	x29, x30, [sp, #256]
    8f00:	str	x28, [sp, #272]
    8f04:	add	x29, sp, #0x100
    8f08:	mov	x19, x1
    8f0c:	bl	3170 <sigfillset@plt>
    8f10:	mov	x0, sp
    8f14:	add	x1, sp, #0x80
    8f18:	bl	90c4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xef0>
    8f1c:	adrp	x2, 8000 <lzma_stream_encoder_mt@@XZ_5.2+0x168>
    8f20:	add	x2, x2, #0xf5c
    8f24:	mov	x0, x20
    8f28:	mov	x1, xzr
    8f2c:	mov	x3, x19
    8f30:	bl	32c0 <pthread_create@plt>
    8f34:	mov	w19, w0
    8f38:	add	x0, sp, #0x80
    8f3c:	mov	x1, xzr
    8f40:	bl	90c4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xef0>
    8f44:	mov	w0, w19
    8f48:	ldp	x20, x19, [sp, #288]
    8f4c:	ldr	x28, [sp, #272]
    8f50:	ldp	x29, x30, [sp, #256]
    8f54:	add	sp, sp, #0x130
    8f58:	ret
    8f5c:	stp	x29, x30, [sp, #-64]!
    8f60:	str	x23, [sp, #16]
    8f64:	stp	x22, x21, [sp, #32]
    8f68:	stp	x20, x19, [sp, #48]
    8f6c:	mov	x19, x0
    8f70:	add	x20, x0, #0x160
    8f74:	add	x21, x0, #0x190
    8f78:	add	x23, x0, #0x30
    8f7c:	mov	x29, sp
    8f80:	b	8fec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe18>
    8f84:	mov	x0, x20
    8f88:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8f8c:	ldr	x8, [x19, #32]
    8f90:	cmp	w22, #0x2
    8f94:	cset	w22, eq  // eq = none
    8f98:	add	x0, x8, #0x168
    8f9c:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8fa0:	ldr	x8, [x19, #24]
    8fa4:	strb	w22, [x8, #32]
    8fa8:	ldr	x9, [x19, #32]
    8fac:	ldr	x10, [x8, #24]
    8fb0:	ldp	x11, x12, [x9, #344]
    8fb4:	add	x0, x9, #0x198
    8fb8:	add	x10, x11, x10
    8fbc:	str	x10, [x9, #344]
    8fc0:	ldr	x8, [x8, #8]
    8fc4:	add	x8, x12, x8
    8fc8:	str	x8, [x9, #352]
    8fcc:	stp	xzr, xzr, [x23]
    8fd0:	ldr	x8, [x9, #328]
    8fd4:	str	x8, [x19, #344]
    8fd8:	str	x19, [x9, #328]
    8fdc:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    8fe0:	ldr	x8, [x19, #32]
    8fe4:	add	x0, x8, #0x168
    8fe8:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    8fec:	mov	x0, x20
    8ff0:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    8ff4:	ldr	w8, [x19]
    8ff8:	cmp	w8, #0x3
    8ffc:	b.ne	900c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe38>  // b.any
    9000:	mov	x0, x21
    9004:	str	wzr, [x19]
    9008:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    900c:	ldr	w22, [x19]
    9010:	cbnz	w22, 9024 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe50>
    9014:	mov	x0, x21
    9018:	mov	x1, x20
    901c:	bl	90e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf10>
    9020:	b	8ff4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe20>
    9024:	mov	x0, x20
    9028:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    902c:	cmp	w22, #0x3
    9030:	b.cs	9044 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe70>  // b.hs, b.nlast
    9034:	mov	x0, x19
    9038:	mov	w1, w22
    903c:	bl	90f8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf24>
    9040:	mov	w22, w0
    9044:	cmp	w22, #0x4
    9048:	b.eq	9070 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe9c>  // b.none
    904c:	mov	x0, x20
    9050:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    9054:	ldr	w8, [x19]
    9058:	cmp	w8, #0x4
    905c:	b.eq	8f84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdb0>  // b.none
    9060:	mov	x0, x21
    9064:	str	wzr, [x19]
    9068:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    906c:	b	8f84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdb0>
    9070:	mov	x0, x20
    9074:	bl	840c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x238>
    9078:	add	x0, x19, #0x190
    907c:	bl	90b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xedc>
    9080:	ldr	x1, [x19, #40]
    9084:	add	x0, x19, #0x40
    9088:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    908c:	ldr	x0, [x19, #8]
    9090:	ldr	x1, [x19, #40]
    9094:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    9098:	ldp	x20, x19, [sp, #48]
    909c:	ldp	x22, x21, [sp, #32]
    90a0:	ldr	x23, [sp, #16]
    90a4:	mov	x0, xzr
    90a8:	ldp	x29, x30, [sp], #64
    90ac:	ret
    90b0:	stp	x29, x30, [sp, #-16]!
    90b4:	mov	x29, sp
    90b8:	bl	3520 <pthread_cond_destroy@plt>
    90bc:	ldp	x29, x30, [sp], #16
    90c0:	ret
    90c4:	stp	x29, x30, [sp, #-16]!
    90c8:	mov	x2, x1
    90cc:	mov	x1, x0
    90d0:	mov	w0, #0x2                   	// #2
    90d4:	mov	x29, sp
    90d8:	bl	30c0 <pthread_sigmask@plt>
    90dc:	ldp	x29, x30, [sp], #16
    90e0:	ret
    90e4:	stp	x29, x30, [sp, #-16]!
    90e8:	mov	x29, sp
    90ec:	bl	33a0 <pthread_cond_wait@plt>
    90f0:	ldp	x29, x30, [sp], #16
    90f4:	ret
    90f8:	sub	sp, sp, #0x60
    90fc:	stp	x29, x30, [sp, #16]
    9100:	stp	x26, x25, [sp, #32]
    9104:	stp	x24, x23, [sp, #48]
    9108:	stp	x22, x21, [sp, #64]
    910c:	stp	x20, x19, [sp, #80]
    9110:	ldr	x8, [x0, #32]
    9114:	mov	x20, x0
    9118:	mov	x19, x0
    911c:	movi	v0.2d, #0x0
    9120:	ldr	w9, [x8, #192]
    9124:	ldr	x10, [x8, #272]
    9128:	ldr	x11, [x8, #8]
    912c:	str	xzr, [x20, #136]!
    9130:	add	x8, x8, #0x10
    9134:	mov	x0, x20
    9138:	add	x29, sp, #0x10
    913c:	stp	x11, x8, [x20, #24]
    9140:	stur	q0, [x20, #40]
    9144:	stur	q0, [x20, #56]
    9148:	stur	q0, [x20, #72]
    914c:	stur	q0, [x20, #88]
    9150:	stur	q0, [x20, #104]
    9154:	stur	q0, [x20, #120]
    9158:	stur	q0, [x20, #136]
    915c:	stur	q0, [x20, #152]
    9160:	stur	q0, [x20, #168]
    9164:	stur	q0, [x20, #184]
    9168:	stp	w9, wzr, [x20, #8]
    916c:	str	x10, [x20, #16]
    9170:	str	xzr, [x20, #200]
    9174:	bl	3160 <lzma_block_header_size@plt>
    9178:	cbnz	w0, 9190 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfbc>
    917c:	ldr	x1, [x19, #40]
    9180:	add	x0, x19, #0x40
    9184:	mov	x2, x20
    9188:	bl	5f00 <lzma_block_uncomp_encode@@XZ_5.2+0x31c>
    918c:	cbz	w0, 91c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfec>
    9190:	mov	w1, w0
    9194:	mov	x0, x19
    9198:	bl	9360 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x118c>
    919c:	mov	w24, #0x3                   	// #3
    91a0:	mov	w0, w24
    91a4:	ldp	x20, x19, [sp, #80]
    91a8:	ldp	x22, x21, [sp, #64]
    91ac:	ldp	x24, x23, [sp, #48]
    91b0:	ldp	x26, x25, [sp, #32]
    91b4:	ldp	x29, x30, [sp, #16]
    91b8:	add	sp, sp, #0x60
    91bc:	ret
    91c0:	str	xzr, [sp, #8]
    91c4:	ldr	w8, [x19, #140]
    91c8:	ldr	x9, [x19, #24]
    91cc:	mov	x24, xzr
    91d0:	add	x22, x19, #0x160
    91d4:	add	x23, x19, #0x190
    91d8:	str	x8, [x9, #8]
    91dc:	ldr	x8, [x19, #32]
    91e0:	mov	w25, #0x3                   	// #3
    91e4:	ldr	x21, [x8, #272]
    91e8:	mov	x0, x22
    91ec:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    91f0:	ldr	x8, [sp, #8]
    91f4:	ldp	x26, x9, [x19, #16]
    91f8:	str	x8, [x19, #48]
    91fc:	ldr	x8, [x9, #8]
    9200:	cmp	x24, x26
    9204:	str	x8, [x19, #56]
    9208:	b.ne	9230 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x105c>  // b.any
    920c:	ldr	w8, [x19]
    9210:	cmp	w8, #0x1
    9214:	b.ne	9230 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x105c>  // b.any
    9218:	mov	x0, x23
    921c:	mov	x1, x22
    9220:	bl	90e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf10>
    9224:	ldr	x26, [x19, #16]
    9228:	cmp	x24, x26
    922c:	b.eq	920c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1038>  // b.none
    9230:	ldr	w24, [x19]
    9234:	mov	x0, x22
    9238:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    923c:	cmp	w24, #0x2
    9240:	b.hi	91a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfcc>  // b.pmore
    9244:	ldr	x6, [x19, #24]
    9248:	ldr	x9, [sp, #8]
    924c:	ldr	x10, [x19, #88]
    9250:	ldr	x0, [x19, #64]
    9254:	ldr	x1, [x19, #40]
    9258:	ldr	x2, [x19, #8]
    925c:	ldr	x5, [x6], #8
    9260:	sub	x11, x26, x9
    9264:	csel	w8, w25, wzr, eq  // eq = none
    9268:	add	x9, x9, #0x4, lsl #12
    926c:	cmp	x11, #0x4, lsl #12
    9270:	csel	w8, wzr, w8, hi  // hi = pmore
    9274:	csel	x4, x9, x26, hi  // hi = pmore
    9278:	add	x3, sp, #0x8
    927c:	mov	x7, x21
    9280:	str	w8, [sp]
    9284:	blr	x10
    9288:	mov	w1, w0
    928c:	cbnz	w0, 9324 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1150>
    9290:	ldr	x8, [x19, #24]
    9294:	mov	x24, x26
    9298:	ldr	x8, [x8, #8]
    929c:	cmp	x8, x21
    92a0:	b.cc	91e8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1014>  // b.lo, b.ul, b.last
    92a4:	cmp	w1, #0x1
    92a8:	b.eq	932c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1158>  // b.none
    92ac:	cbnz	w1, 9194 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc0>
    92b0:	mov	x0, x22
    92b4:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    92b8:	ldr	w24, [x19]
    92bc:	cmp	w24, #0x1
    92c0:	b.ne	92e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x110c>  // b.any
    92c4:	add	x23, x19, #0x190
    92c8:	mov	x0, x23
    92cc:	mov	x1, x22
    92d0:	bl	90e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf10>
    92d4:	ldr	w24, [x19]
    92d8:	cmp	w24, #0x1
    92dc:	b.eq	92c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10f4>  // b.none
    92e0:	ldr	x23, [x19, #16]
    92e4:	mov	x0, x22
    92e8:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    92ec:	cmp	w24, #0x2
    92f0:	b.hi	91a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfcc>  // b.pmore
    92f4:	ldr	x8, [x19, #24]
    92f8:	mov	x0, x20
    92fc:	mov	x2, x23
    9300:	mov	x5, x21
    9304:	mov	x4, x8
    9308:	str	xzr, [x4, #8]!
    930c:	ldr	x1, [x19, #8]
    9310:	ldr	x3, [x8]
    9314:	bl	34c0 <lzma_block_uncomp_encode@plt>
    9318:	cbz	w0, 9340 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x116c>
    931c:	mov	w1, #0xb                   	// #11
    9320:	b	9194 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc0>
    9324:	cmp	w1, #0x1
    9328:	b.ne	9194 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc0>  // b.any
    932c:	ldr	x8, [x19, #24]
    9330:	mov	x0, x20
    9334:	ldr	x1, [x8]
    9338:	bl	3540 <lzma_block_header_encode@plt>
    933c:	cbnz	w0, 9190 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfbc>
    9340:	mov	x0, x20
    9344:	bl	3190 <lzma_block_unpadded_size@plt>
    9348:	ldr	x8, [x19, #24]
    934c:	mov	w24, #0x2                   	// #2
    9350:	str	x0, [x8, #16]
    9354:	ldr	x9, [x19, #160]
    9358:	str	x9, [x8, #24]
    935c:	b	91a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfcc>
    9360:	stp	x29, x30, [sp, #-32]!
    9364:	stp	x20, x19, [sp, #16]
    9368:	ldr	x8, [x0, #32]
    936c:	mov	x19, x0
    9370:	mov	x29, sp
    9374:	mov	w20, w1
    9378:	add	x0, x8, #0x168
    937c:	bl	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>
    9380:	ldr	x8, [x19, #32]
    9384:	ldr	w9, [x8, #308]
    9388:	cbnz	w9, 9390 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11bc>
    938c:	str	w20, [x8, #308]
    9390:	add	x0, x8, #0x198
    9394:	bl	8dc8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    9398:	ldr	x8, [x19, #32]
    939c:	add	x0, x8, #0x168
    93a0:	bl	8a3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x868>
    93a4:	ldp	x20, x19, [sp, #16]
    93a8:	ldp	x29, x30, [sp], #32
    93ac:	ret
    93b0:	sub	sp, sp, #0x30
    93b4:	mov	w8, #0x4dd3                	// #19923
    93b8:	movk	w8, #0x1062, lsl #16
    93bc:	umull	x8, w2, w8
    93c0:	mov	w9, #0x3e8                 	// #1000
    93c4:	mov	w10, #0x4240                	// #16960
    93c8:	lsr	x8, x8, #38
    93cc:	movk	w10, #0xf, lsl #16
    93d0:	msub	w9, w8, w9, w2
    93d4:	mul	w9, w9, w10
    93d8:	stp	x29, x30, [sp, #16]
    93dc:	str	x19, [sp, #32]
    93e0:	stp	x8, x9, [x0]
    93e4:	mov	x19, x0
    93e8:	ldr	w0, [x1, #48]
    93ec:	mov	x1, sp
    93f0:	add	x29, sp, #0x10
    93f4:	bl	3150 <clock_gettime@plt>
    93f8:	ldr	x8, [sp]
    93fc:	ldp	x9, x10, [x19]
    9400:	add	x8, x9, x8
    9404:	ldr	x9, [sp, #8]
    9408:	add	x9, x10, x9
    940c:	mov	w10, #0xca00                	// #51712
    9410:	movk	w10, #0x3b9a, lsl #16
    9414:	cmp	x9, x10
    9418:	stp	x8, x9, [x19]
    941c:	b.lt	9434 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1260>  // b.tstop
    9420:	mov	x10, #0xffffffffffff3600    	// #-51712
    9424:	movk	x10, #0xc465, lsl #16
    9428:	add	x8, x8, #0x1
    942c:	add	x9, x9, x10
    9430:	stp	x8, x9, [x19]
    9434:	ldr	x19, [sp, #32]
    9438:	ldp	x29, x30, [sp, #16]
    943c:	add	sp, sp, #0x30
    9440:	ret
    9444:	stp	x29, x30, [sp, #-16]!
    9448:	mov	x29, sp
    944c:	bl	3560 <pthread_cond_timedwait@plt>
    9450:	ldp	x29, x30, [sp], #16
    9454:	ret
    9458:	stp	x29, x30, [sp, #-16]!
    945c:	mov	x1, xzr
    9460:	mov	x29, sp
    9464:	bl	32e0 <pthread_join@plt>
    9468:	ldp	x29, x30, [sp], #16
    946c:	ret
    9470:	stp	x29, x30, [sp, #-64]!
    9474:	stp	x22, x21, [sp, #32]
    9478:	stp	x20, x19, [sp, #48]
    947c:	ldr	x8, [x0, #16]
    9480:	str	x23, [sp, #16]
    9484:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    9488:	add	x23, x23, #0x470
    948c:	mov	w20, w3
    9490:	mov	x19, x2
    9494:	mov	x21, x0
    9498:	cmp	x8, x23
    949c:	mov	x22, x1
    94a0:	mov	x29, sp
    94a4:	b.eq	94b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12e0>  // b.none
    94a8:	mov	x0, x21
    94ac:	mov	x1, x22
    94b0:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    94b4:	ldr	x0, [x21]
    94b8:	str	x23, [x21, #16]
    94bc:	cbnz	x0, 950c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1338>
    94c0:	mov	w0, #0xe0                  	// #224
    94c4:	mov	x1, x22
    94c8:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    94cc:	cbz	x0, 9554 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1380>
    94d0:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    94d4:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    94d8:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    94dc:	add	x8, x8, #0x55c
    94e0:	add	x9, x9, #0x7fc
    94e4:	add	x10, x10, #0x82c
    94e8:	mov	x11, #0xffffffffffffffff    	// #-1
    94ec:	movi	v0.2d, #0x0
    94f0:	str	x0, [x21]
    94f4:	stp	x8, x9, [x21, #24]
    94f8:	str	x10, [x21, #56]
    94fc:	stp	xzr, x11, [x0]
    9500:	stp	q0, q0, [x0, #16]
    9504:	str	q0, [x0, #48]
    9508:	str	xzr, [x0, #64]
    950c:	and	w9, w20, #0x1
    9510:	cmp	x19, #0x0
    9514:	mov	w8, wzr
    9518:	mov	w10, #0x8000                	// #32768
    951c:	strb	w9, [x0, #76]
    9520:	csinc	x9, x19, xzr, ne  // ne = any
    9524:	str	wzr, [x0, #72]
    9528:	str	wzr, [x0, #112]
    952c:	str	xzr, [x0, #120]
    9530:	str	wzr, [x0, #128]
    9534:	stp	xzr, xzr, [x0, #80]
    9538:	stp	x9, x10, [x0, #96]
    953c:	ldp	x20, x19, [sp, #48]
    9540:	ldp	x22, x21, [sp, #32]
    9544:	ldr	x23, [sp, #16]
    9548:	mov	w0, w8
    954c:	ldp	x29, x30, [sp], #64
    9550:	ret
    9554:	mov	w8, #0x5                   	// #5
    9558:	b	953c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1368>
    955c:	sub	sp, sp, #0xb0
    9560:	ldr	x8, [x6]
    9564:	stp	x29, x30, [sp, #80]
    9568:	stp	x28, x27, [sp, #96]
    956c:	stp	x26, x25, [sp, #112]
    9570:	cmp	x8, x7
    9574:	stp	x24, x23, [sp, #128]
    9578:	stp	x22, x21, [sp, #144]
    957c:	stp	x20, x19, [sp, #160]
    9580:	add	x29, sp, #0x50
    9584:	b.cs	9784 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b0>  // b.hs, b.nlast
    9588:	ldr	w8, [x29, #96]
    958c:	mov	x19, x7
    9590:	mov	x20, x6
    9594:	mov	x22, x4
    9598:	str	w8, [sp, #20]
    959c:	add	x8, sp, #0x20
    95a0:	mov	x23, x3
    95a4:	mov	x24, x2
    95a8:	mov	x25, x1
    95ac:	mov	x27, x0
    95b0:	add	x28, x0, #0x70
    95b4:	add	x21, x8, #0x18
    95b8:	str	x5, [sp, #24]
    95bc:	b	95e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x140c>
    95c0:	mov	w9, #0x2                   	// #2
    95c4:	str	xzr, [x27, #80]
    95c8:	str	w9, [x27, #72]
    95cc:	add	x8, x8, #0x1
    95d0:	str	x8, [x23]
    95d4:	ldr	x8, [x20]
    95d8:	cmp	x8, x19
    95dc:	b.cs	9784 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b0>  // b.hs, b.nlast
    95e0:	ldr	w8, [x27, #72]
    95e4:	cmp	w8, #0x4
    95e8:	b.eq	97ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15d8>  // b.none
    95ec:	ldr	x9, [x23]
    95f0:	cmp	x9, x22
    95f4:	b.cs	9784 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b0>  // b.hs, b.nlast
    95f8:	cmp	w8, #0x4
    95fc:	b.hi	97e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1610>  // b.pmore
    9600:	adrp	x11, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    9604:	mov	w8, w8
    9608:	add	x11, x11, #0xcc0
    960c:	adr	x9, 961c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1448>
    9610:	ldrb	w10, [x11, x8]
    9614:	add	x9, x9, x10, lsl #2
    9618:	br	x9
    961c:	ldr	x8, [x23]
    9620:	mov	x0, x28
    9624:	ldrb	w1, [x24, x8]
    9628:	bl	168bc <lzma_mode_is_supported@@XZ_5.0+0x5cf0>
    962c:	tbnz	w0, #0, 97ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1618>
    9630:	mov	w8, #0x1                   	// #1
    9634:	str	w8, [x27, #72]
    9638:	ldr	x8, [x23]
    963c:	b	95cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13f8>
    9640:	ldr	x8, [x23]
    9644:	ldr	x9, [x27, #80]
    9648:	ldr	w10, [x27, #112]
    964c:	ldrb	w11, [x24, x8]
    9650:	lsl	x12, x9, #3
    9654:	add	x13, x9, #0x1
    9658:	cmp	x13, #0x4
    965c:	lsl	x9, x11, x12
    9660:	orr	w9, w10, w9
    9664:	str	w9, [x27, #112]
    9668:	str	x13, [x27, #80]
    966c:	b.ne	95cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13f8>  // b.any
    9670:	cmn	w9, #0x1
    9674:	b.eq	95c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13ec>  // b.none
    9678:	ldrb	w10, [x27, #76]
    967c:	cbz	w10, 95c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13ec>
    9680:	sub	w10, w9, #0x1
    9684:	orr	w10, w10, w10, lsr #2
    9688:	orr	w10, w10, w10, lsr #3
    968c:	orr	w10, w10, w10, lsr #4
    9690:	orr	w10, w10, w10, lsr #8
    9694:	orr	w10, w10, w10, lsr #16
    9698:	add	w10, w10, #0x1
    969c:	cmp	w10, w9
    96a0:	mov	w9, #0x7                   	// #7
    96a4:	csel	w26, w26, w9, eq  // eq = none
    96a8:	b.eq	95c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13ec>  // b.none
    96ac:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    96b0:	ldr	x8, [x23]
    96b4:	ldp	x9, x10, [x27, #80]
    96b8:	ldrb	w11, [x24, x8]
    96bc:	lsl	x12, x9, #3
    96c0:	add	x13, x8, #0x1
    96c4:	add	x9, x9, #0x1
    96c8:	lsl	x8, x11, x12
    96cc:	cmp	x9, #0x8
    96d0:	orr	x8, x8, x10
    96d4:	stp	x9, x8, [x27, #80]
    96d8:	str	x13, [x23]
    96dc:	b.cc	95d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1400>  // b.lo, b.ul, b.last
    96e0:	mov	x9, #0xffffffc000000000    	// #-274877906944
    96e4:	add	x8, x8, x9
    96e8:	mov	x9, #0xfffffffffffffffe    	// #-2
    96ec:	movk	x9, #0xffbf, lsl #32
    96f0:	cmp	x8, x9
    96f4:	b.hi	9700 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x152c>  // b.pmore
    96f8:	ldrb	w8, [x27, #76]
    96fc:	cbnz	w8, 97ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1618>
    9700:	mov	x0, x28
    9704:	bl	1694c <lzma_mode_is_supported@@XZ_5.0+0x5d80>
    9708:	add	x8, x0, #0x8, lsl #12
    970c:	str	x8, [x27, #104]
    9710:	mov	w8, #0x3                   	// #3
    9714:	str	xzr, [x27, #80]
    9718:	str	w8, [x27, #72]
    971c:	ldp	x9, x8, [x27, #96]
    9720:	cmp	x8, x9
    9724:	b.hi	97f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1620>  // b.pmore
    9728:	str	xzr, [sp, #32]
    972c:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    9730:	ldr	x8, [x8, #3944]
    9734:	add	x2, sp, #0x20
    9738:	mov	x0, x27
    973c:	mov	x1, x25
    9740:	stp	x8, x28, [sp, #40]
    9744:	stp	xzr, xzr, [x21]
    9748:	str	xzr, [x21, #16]
    974c:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
    9750:	cbz	w0, 9764 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1590>
    9754:	mov	w8, wzr
    9758:	mov	w26, w0
    975c:	tbnz	w8, #0, 95d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1400>
    9760:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    9764:	ldr	x0, [x27]
    9768:	ldr	x1, [x27, #88]
    976c:	bl	fe3c <lzma_mf_is_supported@@XZ_5.0+0x170c>
    9770:	mov	w8, #0x4                   	// #4
    9774:	str	w8, [x27, #72]
    9778:	mov	w8, #0x1                   	// #1
    977c:	tbnz	w8, #0, 95d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1400>
    9780:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    9784:	mov	w26, wzr
    9788:	mov	w0, w26
    978c:	ldp	x20, x19, [sp, #160]
    9790:	ldp	x22, x21, [sp, #144]
    9794:	ldp	x24, x23, [sp, #128]
    9798:	ldp	x26, x25, [sp, #112]
    979c:	ldp	x28, x27, [sp, #96]
    97a0:	ldp	x29, x30, [sp, #80]
    97a4:	add	sp, sp, #0xb0
    97a8:	ret
    97ac:	ldr	x8, [x27, #24]
    97b0:	ldr	x0, [x27]
    97b4:	ldr	w9, [sp, #20]
    97b8:	ldr	x5, [sp, #24]
    97bc:	mov	x1, x25
    97c0:	mov	x2, x24
    97c4:	mov	x3, x23
    97c8:	mov	x4, x22
    97cc:	mov	x6, x20
    97d0:	mov	x7, x19
    97d4:	str	w9, [sp]
    97d8:	blr	x8
    97dc:	mov	w26, w0
    97e0:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    97e4:	mov	w26, #0xb                   	// #11
    97e8:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    97ec:	mov	w26, #0x7                   	// #7
    97f0:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    97f4:	mov	w26, #0x6                   	// #6
    97f8:	b	9788 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x15b4>
    97fc:	stp	x29, x30, [sp, #-32]!
    9800:	stp	x20, x19, [sp, #16]
    9804:	mov	x29, sp
    9808:	mov	x19, x1
    980c:	mov	x20, x0
    9810:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    9814:	mov	x0, x20
    9818:	mov	x1, x19
    981c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    9820:	ldp	x20, x19, [sp, #16]
    9824:	ldp	x29, x30, [sp], #32
    9828:	ret
    982c:	ldr	x9, [x0, #104]
    9830:	str	x9, [x1]
    9834:	ldr	x9, [x0, #96]
    9838:	str	x9, [x2]
    983c:	cbz	x3, 9858 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1684>
    9840:	ldr	x9, [x0, #104]
    9844:	mov	x8, x0
    9848:	cmp	x9, x3
    984c:	b.ls	9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x168c>  // b.plast
    9850:	mov	w0, #0x6                   	// #6
    9854:	ret
    9858:	mov	w0, wzr
    985c:	ret
    9860:	mov	w0, wzr
    9864:	str	x3, [x8, #96]
    9868:	ret

000000000000986c <lzma_alone_decoder@@XZ_5.0>:
    986c:	stp	x29, x30, [sp, #-48]!
    9870:	str	x21, [sp, #16]
    9874:	stp	x20, x19, [sp, #32]
    9878:	mov	x29, sp
    987c:	mov	x21, x1
    9880:	mov	x19, x0
    9884:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    9888:	mov	w20, w0
    988c:	cbnz	w0, 98d0 <lzma_alone_decoder@@XZ_5.0+0x64>
    9890:	ldp	x1, x0, [x19, #48]
    9894:	mov	x2, x21
    9898:	mov	w3, wzr
    989c:	bl	9470 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x129c>
    98a0:	cbz	w0, 98e4 <lzma_alone_decoder@@XZ_5.0+0x78>
    98a4:	mov	w21, w0
    98a8:	mov	x0, x19
    98ac:	bl	3330 <lzma_end@plt>
    98b0:	mov	w8, wzr
    98b4:	mov	w20, w21
    98b8:	cbz	w8, 98d0 <lzma_alone_decoder@@XZ_5.0+0x64>
    98bc:	ldr	x8, [x19, #56]
    98c0:	mov	w20, wzr
    98c4:	mov	w9, #0x1                   	// #1
    98c8:	strb	w9, [x8, #88]
    98cc:	strb	w9, [x8, #91]
    98d0:	mov	w0, w20
    98d4:	ldp	x20, x19, [sp, #32]
    98d8:	ldr	x21, [sp, #16]
    98dc:	ldp	x29, x30, [sp], #48
    98e0:	ret
    98e4:	mov	w8, #0x1                   	// #1
    98e8:	cbnz	w8, 98bc <lzma_alone_decoder@@XZ_5.0+0x50>
    98ec:	b	98d0 <lzma_alone_decoder@@XZ_5.0+0x64>

00000000000098f0 <lzma_auto_decoder@@XZ_5.0>:
    98f0:	stp	x29, x30, [sp, #-48]!
    98f4:	stp	x22, x21, [sp, #16]
    98f8:	stp	x20, x19, [sp, #32]
    98fc:	mov	x29, sp
    9900:	mov	w21, w2
    9904:	mov	x22, x1
    9908:	mov	x19, x0
    990c:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    9910:	mov	w20, w0
    9914:	cbnz	w0, 9958 <lzma_auto_decoder@@XZ_5.0+0x68>
    9918:	ldp	x1, x0, [x19, #48]
    991c:	mov	x2, x22
    9920:	mov	w3, w21
    9924:	bl	9978 <lzma_auto_decoder@@XZ_5.0+0x88>
    9928:	cbz	w0, 996c <lzma_auto_decoder@@XZ_5.0+0x7c>
    992c:	mov	w21, w0
    9930:	mov	x0, x19
    9934:	bl	3330 <lzma_end@plt>
    9938:	mov	w8, wzr
    993c:	mov	w20, w21
    9940:	cbz	w8, 9958 <lzma_auto_decoder@@XZ_5.0+0x68>
    9944:	ldr	x8, [x19, #56]
    9948:	mov	w20, wzr
    994c:	mov	w9, #0x1                   	// #1
    9950:	strb	w9, [x8, #88]
    9954:	strb	w9, [x8, #91]
    9958:	mov	w0, w20
    995c:	ldp	x20, x19, [sp, #32]
    9960:	ldp	x22, x21, [sp, #16]
    9964:	ldp	x29, x30, [sp], #48
    9968:	ret
    996c:	mov	w8, #0x1                   	// #1
    9970:	cbnz	w8, 9944 <lzma_auto_decoder@@XZ_5.0+0x54>
    9974:	b	9958 <lzma_auto_decoder@@XZ_5.0+0x68>
    9978:	stp	x29, x30, [sp, #-64]!
    997c:	stp	x22, x21, [sp, #32]
    9980:	stp	x20, x19, [sp, #48]
    9984:	ldr	x8, [x0, #16]
    9988:	str	x23, [sp, #16]
    998c:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    9990:	add	x23, x23, #0x978
    9994:	mov	w19, w3
    9998:	mov	x20, x2
    999c:	mov	x21, x0
    99a0:	cmp	x8, x23
    99a4:	mov	x22, x1
    99a8:	mov	x29, sp
    99ac:	b.eq	99bc <lzma_auto_decoder@@XZ_5.0+0xcc>  // b.none
    99b0:	mov	x0, x21
    99b4:	mov	x1, x22
    99b8:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    99bc:	cmp	w19, #0x1f
    99c0:	str	x23, [x21, #16]
    99c4:	b.ls	99d0 <lzma_auto_decoder@@XZ_5.0+0xe0>  // b.plast
    99c8:	mov	w8, #0x8                   	// #8
    99cc:	b	9a40 <lzma_auto_decoder@@XZ_5.0+0x150>
    99d0:	ldr	x0, [x21]
    99d4:	cbnz	x0, 9a2c <lzma_auto_decoder@@XZ_5.0+0x13c>
    99d8:	mov	w0, #0x58                  	// #88
    99dc:	mov	x1, x22
    99e0:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    99e4:	cbz	x0, 9a58 <lzma_auto_decoder@@XZ_5.0+0x168>
    99e8:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    99ec:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    99f0:	add	x8, x8, #0xa60
    99f4:	add	x9, x9, #0xbe4
    99f8:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    99fc:	stp	x8, x9, [x21, #24]
    9a00:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    9a04:	add	x10, x10, #0xc14
    9a08:	add	x8, x8, #0xc40
    9a0c:	stp	x10, x8, [x21, #48]
    9a10:	mov	x8, #0xffffffffffffffff    	// #-1
    9a14:	movi	v0.2d, #0x0
    9a18:	str	x0, [x21]
    9a1c:	stp	xzr, x8, [x0]
    9a20:	stp	q0, q0, [x0, #16]
    9a24:	str	q0, [x0, #48]
    9a28:	str	xzr, [x0, #64]
    9a2c:	cmp	x20, #0x0
    9a30:	mov	w8, wzr
    9a34:	csinc	x9, x20, xzr, ne  // ne = any
    9a38:	str	x9, [x0, #72]
    9a3c:	stp	w19, wzr, [x0, #80]
    9a40:	ldp	x20, x19, [sp, #48]
    9a44:	ldp	x22, x21, [sp, #32]
    9a48:	ldr	x23, [sp, #16]
    9a4c:	mov	w0, w8
    9a50:	ldp	x29, x30, [sp], #64
    9a54:	ret
    9a58:	mov	w8, #0x5                   	// #5
    9a5c:	b	9a40 <lzma_auto_decoder@@XZ_5.0+0x150>
    9a60:	sub	sp, sp, #0x70
    9a64:	stp	x29, x30, [sp, #16]
    9a68:	stp	x28, x27, [sp, #32]
    9a6c:	stp	x26, x25, [sp, #48]
    9a70:	stp	x24, x23, [sp, #64]
    9a74:	stp	x22, x21, [sp, #80]
    9a78:	stp	x20, x19, [sp, #96]
    9a7c:	add	x29, sp, #0x10
    9a80:	ldr	w8, [x0, #84]
    9a84:	ldr	w28, [x29, #96]
    9a88:	mov	x19, x4
    9a8c:	mov	x20, x3
    9a90:	cmp	w8, #0x2
    9a94:	b.eq	9b70 <lzma_auto_decoder@@XZ_5.0+0x280>  // b.none
    9a98:	mov	x22, x7
    9a9c:	mov	x23, x6
    9aa0:	mov	x24, x5
    9aa4:	mov	x26, x2
    9aa8:	mov	x21, x0
    9aac:	mov	x27, x1
    9ab0:	cmp	w8, #0x1
    9ab4:	b.eq	9afc <lzma_auto_decoder@@XZ_5.0+0x20c>  // b.none
    9ab8:	cbnz	w8, 9b48 <lzma_auto_decoder@@XZ_5.0+0x258>
    9abc:	ldr	x8, [x20]
    9ac0:	cmp	x8, x19
    9ac4:	b.cs	9b50 <lzma_auto_decoder@@XZ_5.0+0x260>  // b.hs, b.nlast
    9ac8:	mov	w9, #0x1                   	// #1
    9acc:	str	w9, [x21, #84]
    9ad0:	ldrb	w8, [x26, x8]
    9ad4:	ldr	x2, [x21, #72]
    9ad8:	cmp	w8, #0xfd
    9adc:	b.ne	9bb0 <lzma_auto_decoder@@XZ_5.0+0x2c0>  // b.any
    9ae0:	ldr	w3, [x21, #80]
    9ae4:	mov	x0, x21
    9ae8:	mov	x1, x27
    9aec:	bl	b6b4 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    9af0:	mov	w25, w0
    9af4:	cbnz	w0, 9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9af8:	b	9afc <lzma_auto_decoder@@XZ_5.0+0x20c>
    9afc:	ldr	x8, [x21, #24]
    9b00:	ldr	x0, [x21]
    9b04:	mov	x1, x27
    9b08:	mov	x2, x26
    9b0c:	mov	x3, x20
    9b10:	mov	x4, x19
    9b14:	mov	x5, x24
    9b18:	mov	x6, x23
    9b1c:	mov	x7, x22
    9b20:	str	w28, [sp]
    9b24:	blr	x8
    9b28:	cmp	w0, #0x1
    9b2c:	b.ne	9b38 <lzma_auto_decoder@@XZ_5.0+0x248>  // b.any
    9b30:	ldrb	w8, [x21, #80]
    9b34:	tbnz	w8, #3, 9b58 <lzma_auto_decoder@@XZ_5.0+0x268>
    9b38:	mov	w8, wzr
    9b3c:	mov	w25, w0
    9b40:	cbnz	w8, 9b70 <lzma_auto_decoder@@XZ_5.0+0x280>
    9b44:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9b48:	mov	w25, #0xb                   	// #11
    9b4c:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9b50:	mov	w25, wzr
    9b54:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9b58:	mov	w8, #0x2                   	// #2
    9b5c:	str	w8, [x21, #84]
    9b60:	mov	w8, #0x1                   	// #1
    9b64:	mov	w0, w25
    9b68:	mov	w25, w0
    9b6c:	cbz	w8, 9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9b70:	ldr	x8, [x20]
    9b74:	cmp	x8, x19
    9b78:	b.cs	9b84 <lzma_auto_decoder@@XZ_5.0+0x294>  // b.hs, b.nlast
    9b7c:	mov	w25, #0x9                   	// #9
    9b80:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9b84:	cmp	w28, #0x3
    9b88:	cset	w25, eq  // eq = none
    9b8c:	mov	w0, w25
    9b90:	ldp	x20, x19, [sp, #96]
    9b94:	ldp	x22, x21, [sp, #80]
    9b98:	ldp	x24, x23, [sp, #64]
    9b9c:	ldp	x26, x25, [sp, #48]
    9ba0:	ldp	x28, x27, [sp, #32]
    9ba4:	ldp	x29, x30, [sp, #16]
    9ba8:	add	sp, sp, #0x70
    9bac:	ret
    9bb0:	mov	w3, #0x1                   	// #1
    9bb4:	mov	x0, x21
    9bb8:	mov	x1, x27
    9bbc:	bl	9470 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x129c>
    9bc0:	mov	w25, w0
    9bc4:	cbnz	w0, 9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9bc8:	ldr	w8, [x21, #80]
    9bcc:	tbnz	w8, #0, 9bdc <lzma_auto_decoder@@XZ_5.0+0x2ec>
    9bd0:	tbz	w8, #2, 9afc <lzma_auto_decoder@@XZ_5.0+0x20c>
    9bd4:	mov	w25, #0x4                   	// #4
    9bd8:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9bdc:	mov	w25, #0x2                   	// #2
    9be0:	b	9b8c <lzma_auto_decoder@@XZ_5.0+0x29c>
    9be4:	stp	x29, x30, [sp, #-32]!
    9be8:	stp	x20, x19, [sp, #16]
    9bec:	mov	x29, sp
    9bf0:	mov	x19, x1
    9bf4:	mov	x20, x0
    9bf8:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    9bfc:	mov	x0, x20
    9c00:	mov	x1, x19
    9c04:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    9c08:	ldp	x20, x19, [sp, #16]
    9c0c:	ldp	x29, x30, [sp], #32
    9c10:	ret
    9c14:	stp	x29, x30, [sp, #-16]!
    9c18:	ldr	x8, [x0, #48]
    9c1c:	mov	x29, sp
    9c20:	cbz	x8, 9c34 <lzma_auto_decoder@@XZ_5.0+0x344>
    9c24:	ldr	x0, [x0]
    9c28:	blr	x8
    9c2c:	ldp	x29, x30, [sp], #16
    9c30:	ret
    9c34:	mov	w0, wzr
    9c38:	ldp	x29, x30, [sp], #16
    9c3c:	ret
    9c40:	stp	x29, x30, [sp, #-32]!
    9c44:	stp	x20, x19, [sp, #16]
    9c48:	ldr	x8, [x0, #56]
    9c4c:	mov	x19, x3
    9c50:	mov	x20, x0
    9c54:	mov	x29, sp
    9c58:	cbz	x8, 9c70 <lzma_auto_decoder@@XZ_5.0+0x380>
    9c5c:	ldr	x0, [x20]
    9c60:	mov	x3, x19
    9c64:	blr	x8
    9c68:	cbnz	x19, 9ca4 <lzma_auto_decoder@@XZ_5.0+0x3b4>
    9c6c:	b	9cac <lzma_auto_decoder@@XZ_5.0+0x3bc>
    9c70:	mov	w8, #0x8000                	// #32768
    9c74:	str	x8, [x1]
    9c78:	ldr	x8, [x20, #72]
    9c7c:	str	x8, [x2]
    9c80:	cbz	x19, 9c9c <lzma_auto_decoder@@XZ_5.0+0x3ac>
    9c84:	ldr	x8, [x1]
    9c88:	cmp	x8, x19
    9c8c:	mov	w8, #0x6                   	// #6
    9c90:	csel	w0, w8, wzr, hi  // hi = pmore
    9c94:	cbnz	x19, 9ca4 <lzma_auto_decoder@@XZ_5.0+0x3b4>
    9c98:	b	9cac <lzma_auto_decoder@@XZ_5.0+0x3bc>
    9c9c:	mov	w0, wzr
    9ca0:	cbz	x19, 9cac <lzma_auto_decoder@@XZ_5.0+0x3bc>
    9ca4:	cbnz	w0, 9cac <lzma_auto_decoder@@XZ_5.0+0x3bc>
    9ca8:	str	x19, [x20, #72]
    9cac:	ldp	x20, x19, [sp, #16]
    9cb0:	ldp	x29, x30, [sp], #32
    9cb4:	ret

0000000000009cb8 <lzma_block_buffer_decode@@XZ_5.0>:
    9cb8:	sub	sp, sp, #0xc0
    9cbc:	stp	x29, x30, [sp, #96]
    9cc0:	stp	x28, x27, [sp, #112]
    9cc4:	stp	x26, x25, [sp, #128]
    9cc8:	stp	x24, x23, [sp, #144]
    9ccc:	stp	x22, x21, [sp, #160]
    9cd0:	stp	x20, x19, [sp, #176]
    9cd4:	add	x29, sp, #0x60
    9cd8:	cbz	x3, 9d3c <lzma_block_buffer_decode@@XZ_5.0+0x84>
    9cdc:	mov	x23, x7
    9ce0:	mov	x20, x6
    9ce4:	mov	x24, x5
    9ce8:	mov	x22, x4
    9cec:	mov	x21, x3
    9cf0:	mov	x25, x2
    9cf4:	mov	x19, x1
    9cf8:	mov	x2, x0
    9cfc:	cbnz	x25, 9d0c <lzma_block_buffer_decode@@XZ_5.0+0x54>
    9d00:	ldr	x8, [x21]
    9d04:	cmp	x8, x22
    9d08:	b.ne	9d3c <lzma_block_buffer_decode@@XZ_5.0+0x84>  // b.any
    9d0c:	mov	w26, #0xb                   	// #11
    9d10:	cbz	x20, 9d40 <lzma_block_buffer_decode@@XZ_5.0+0x88>
    9d14:	ldr	x8, [x21]
    9d18:	cmp	x8, x22
    9d1c:	b.hi	9d40 <lzma_block_buffer_decode@@XZ_5.0+0x88>  // b.pmore
    9d20:	cbnz	x24, 9d30 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    9d24:	ldr	x8, [x20]
    9d28:	cmp	x8, x23
    9d2c:	b.ne	9d3c <lzma_block_buffer_decode@@XZ_5.0+0x84>  // b.any
    9d30:	ldr	x8, [x20]
    9d34:	cmp	x8, x23
    9d38:	b.ls	9d64 <lzma_block_buffer_decode@@XZ_5.0+0xac>  // b.plast
    9d3c:	mov	w26, #0xb                   	// #11
    9d40:	mov	w0, w26
    9d44:	ldp	x20, x19, [sp, #176]
    9d48:	ldp	x22, x21, [sp, #160]
    9d4c:	ldp	x24, x23, [sp, #144]
    9d50:	ldp	x26, x25, [sp, #128]
    9d54:	ldp	x28, x27, [sp, #112]
    9d58:	ldp	x29, x30, [sp, #96]
    9d5c:	add	sp, sp, #0xc0
    9d60:	ret
    9d64:	movi	v0.2d, #0x0
    9d68:	mov	x8, #0xffffffffffffffff    	// #-1
    9d6c:	add	x0, sp, #0x10
    9d70:	mov	x1, x19
    9d74:	str	xzr, [sp, #80]
    9d78:	stp	q0, q0, [sp, #48]
    9d7c:	stp	q0, q0, [sp, #16]
    9d80:	str	x8, [sp, #24]
    9d84:	bl	9e08 <lzma_block_buffer_decode@@XZ_5.0+0x150>
    9d88:	mov	w26, w0
    9d8c:	cbnz	w0, 9df8 <lzma_block_buffer_decode@@XZ_5.0+0x140>
    9d90:	ldr	x8, [sp, #40]
    9d94:	ldr	x0, [sp, #16]
    9d98:	ldr	x27, [x21]
    9d9c:	ldr	x28, [x20]
    9da0:	mov	w9, #0x3                   	// #3
    9da4:	mov	x1, x19
    9da8:	mov	x2, x25
    9dac:	mov	x3, x21
    9db0:	mov	x4, x22
    9db4:	mov	x5, x24
    9db8:	mov	x6, x20
    9dbc:	mov	x7, x23
    9dc0:	str	w9, [sp]
    9dc4:	blr	x8
    9dc8:	cmp	w0, #0x1
    9dcc:	b.eq	9df4 <lzma_block_buffer_decode@@XZ_5.0+0x13c>  // b.none
    9dd0:	mov	w26, w0
    9dd4:	cbnz	w0, 9de8 <lzma_block_buffer_decode@@XZ_5.0+0x130>
    9dd8:	ldr	x8, [x21]
    9ddc:	cmp	x8, x22
    9de0:	mov	w8, #0x9                   	// #9
    9de4:	cinc	w26, w8, ne  // ne = any
    9de8:	str	x27, [x21]
    9dec:	str	x28, [x20]
    9df0:	b	9df8 <lzma_block_buffer_decode@@XZ_5.0+0x140>
    9df4:	mov	w26, wzr
    9df8:	add	x0, sp, #0x10
    9dfc:	mov	x1, x19
    9e00:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    9e04:	b	9d40 <lzma_block_buffer_decode@@XZ_5.0+0x88>
    9e08:	stp	x29, x30, [sp, #-48]!
    9e0c:	stp	x22, x21, [sp, #16]
    9e10:	stp	x20, x19, [sp, #32]
    9e14:	ldr	x8, [x0, #16]
    9e18:	adrp	x21, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    9e1c:	add	x21, x21, #0xe08
    9e20:	mov	x19, x2
    9e24:	mov	x22, x0
    9e28:	cmp	x8, x21
    9e2c:	mov	x20, x1
    9e30:	mov	x29, sp
    9e34:	b.eq	9e44 <lzma_block_buffer_decode@@XZ_5.0+0x18c>  // b.none
    9e38:	mov	x0, x22
    9e3c:	mov	x1, x20
    9e40:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    9e44:	mov	x0, x19
    9e48:	str	x21, [x22, #16]
    9e4c:	bl	3190 <lzma_block_unpadded_size@plt>
    9e50:	cbz	x0, 9f18 <lzma_block_buffer_decode@@XZ_5.0+0x260>
    9e54:	ldr	x8, [x19, #24]
    9e58:	cmn	x8, #0x1
    9e5c:	b.lt	9f18 <lzma_block_buffer_decode@@XZ_5.0+0x260>  // b.tstop
    9e60:	ldr	x21, [x22]
    9e64:	cbnz	x21, 9eb0 <lzma_block_buffer_decode@@XZ_5.0+0x1f8>
    9e68:	mov	w0, #0xe8                  	// #232
    9e6c:	mov	x1, x20
    9e70:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    9e74:	cbz	x0, 9f2c <lzma_block_buffer_decode@@XZ_5.0+0x274>
    9e78:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    9e7c:	adrp	x9, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    9e80:	mov	x21, x0
    9e84:	add	x8, x8, #0xf34
    9e88:	add	x9, x9, #0x160
    9e8c:	mov	x10, #0xffffffffffffffff    	// #-1
    9e90:	movi	v0.2d, #0x0
    9e94:	str	x0, [x22]
    9e98:	stp	x8, x9, [x22, #24]
    9e9c:	stp	xzr, x10, [x0, #8]
    9ea0:	stur	q0, [x0, #24]
    9ea4:	stur	q0, [x0, #40]
    9ea8:	stur	q0, [x0, #56]
    9eac:	str	xzr, [x0, #72]
    9eb0:	str	wzr, [x21]
    9eb4:	stp	xzr, xzr, [x21, #88]
    9eb8:	str	x19, [x21, #80]
    9ebc:	ldr	x8, [x19, #16]
    9ec0:	cmn	x8, #0x1
    9ec4:	b.ne	9edc <lzma_block_buffer_decode@@XZ_5.0+0x224>  // b.any
    9ec8:	ldp	w22, w0, [x19, #4]
    9ecc:	bl	3270 <lzma_check_size@plt>
    9ed0:	add	x8, x22, w0, uxtw
    9ed4:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    9ed8:	sub	x8, x9, x8
    9edc:	stp	x8, xzr, [x21, #104]
    9ee0:	ldr	w1, [x19, #8]
    9ee4:	add	x0, x21, #0x78
    9ee8:	bl	c16c <lzma_check_size@@XZ_5.0+0x20>
    9eec:	ldr	w8, [x19]
    9ef0:	cbz	w8, 9f00 <lzma_block_buffer_decode@@XZ_5.0+0x248>
    9ef4:	ldrb	w8, [x19, #200]
    9ef8:	cmp	w8, #0x0
    9efc:	cset	w8, ne  // ne = any
    9f00:	strb	w8, [x21, #224]
    9f04:	ldr	x2, [x19, #32]
    9f08:	add	x0, x21, #0x8
    9f0c:	mov	x1, x20
    9f10:	bl	a6ec <lzma_filter_decoder_is_supported@@XZ_5.0+0x50>
    9f14:	b	9f1c <lzma_block_buffer_decode@@XZ_5.0+0x264>
    9f18:	mov	w0, #0xb                   	// #11
    9f1c:	ldp	x20, x19, [sp, #32]
    9f20:	ldp	x22, x21, [sp, #16]
    9f24:	ldp	x29, x30, [sp], #48
    9f28:	ret
    9f2c:	mov	w0, #0x5                   	// #5
    9f30:	b	9f1c <lzma_block_buffer_decode@@XZ_5.0+0x264>
    9f34:	sub	sp, sp, #0x70
    9f38:	stp	x29, x30, [sp, #16]
    9f3c:	stp	x26, x25, [sp, #48]
    9f40:	stp	x24, x23, [sp, #64]
    9f44:	stp	x22, x21, [sp, #80]
    9f48:	stp	x20, x19, [sp, #96]
    9f4c:	ldr	w8, [x0]
    9f50:	mov	x20, x4
    9f54:	mov	x21, x3
    9f58:	mov	x22, x2
    9f5c:	mov	x19, x0
    9f60:	cmp	w8, #0x2
    9f64:	str	x27, [sp, #32]
    9f68:	add	x29, sp, #0x10
    9f6c:	b.eq	a05c <lzma_block_buffer_decode@@XZ_5.0+0x3a4>  // b.none
    9f70:	cmp	w8, #0x1
    9f74:	b.eq	9ff8 <lzma_block_buffer_decode@@XZ_5.0+0x340>  // b.none
    9f78:	cbnz	w8, a030 <lzma_block_buffer_decode@@XZ_5.0+0x378>
    9f7c:	ldr	w8, [x29, #96]
    9f80:	ldr	x9, [x19, #32]
    9f84:	ldr	x0, [x19, #8]
    9f88:	ldr	x26, [x21]
    9f8c:	ldr	x27, [x6]
    9f90:	mov	x2, x22
    9f94:	mov	x3, x21
    9f98:	mov	x4, x20
    9f9c:	mov	x25, x6
    9fa0:	mov	x24, x5
    9fa4:	str	w8, [sp]
    9fa8:	blr	x9
    9fac:	ldr	x8, [x21]
    9fb0:	ldr	x2, [x19, #104]
    9fb4:	ldr	x25, [x25]
    9fb8:	mov	w23, w0
    9fbc:	sub	x1, x8, x26
    9fc0:	add	x0, x19, #0x58
    9fc4:	bl	a214 <lzma_block_decoder@@XZ_5.0+0x80>
    9fc8:	tbnz	w0, #0, 9fec <lzma_block_buffer_decode@@XZ_5.0+0x334>
    9fcc:	ldr	x8, [x19, #80]
    9fd0:	sub	x26, x25, x27
    9fd4:	add	x25, x19, #0x60
    9fd8:	mov	x0, x25
    9fdc:	ldr	x2, [x8, #24]
    9fe0:	mov	x1, x26
    9fe4:	bl	a214 <lzma_block_decoder@@XZ_5.0+0x80>
    9fe8:	tbz	w0, #0, a0cc <lzma_block_buffer_decode@@XZ_5.0+0x414>
    9fec:	mov	w8, wzr
    9ff0:	mov	w23, #0x9                   	// #9
    9ff4:	cbz	w8, a0a8 <lzma_block_buffer_decode@@XZ_5.0+0x3f0>
    9ff8:	ldr	x8, [x19, #88]
    9ffc:	tst	x8, #0x3
    a000:	b.eq	a038 <lzma_block_buffer_decode@@XZ_5.0+0x380>  // b.none
    a004:	ldr	x9, [x21]
    a008:	cmp	x9, x20
    a00c:	b.cs	a094 <lzma_block_buffer_decode@@XZ_5.0+0x3dc>  // b.hs, b.nlast
    a010:	add	x8, x8, #0x1
    a014:	str	x8, [x19, #88]
    a018:	ldrb	w8, [x22, x9]
    a01c:	add	x9, x9, #0x1
    a020:	str	x9, [x21]
    a024:	cbz	w8, 9ff8 <lzma_block_buffer_decode@@XZ_5.0+0x340>
    a028:	mov	w23, #0x9                   	// #9
    a02c:	b	a0a8 <lzma_block_buffer_decode@@XZ_5.0+0x3f0>
    a030:	mov	w23, #0xb                   	// #11
    a034:	b	a0a8 <lzma_block_buffer_decode@@XZ_5.0+0x3f0>
    a038:	ldr	x8, [x19, #80]
    a03c:	ldr	w1, [x8, #8]
    a040:	cbz	w1, a0a4 <lzma_block_buffer_decode@@XZ_5.0+0x3ec>
    a044:	ldrb	w8, [x19, #224]
    a048:	cbnz	w8, a054 <lzma_block_buffer_decode@@XZ_5.0+0x39c>
    a04c:	add	x0, x19, #0x78
    a050:	bl	c22c <lzma_check_size@@XZ_5.0+0xe0>
    a054:	mov	w8, #0x2                   	// #2
    a058:	str	w8, [x19]
    a05c:	ldr	x24, [x19, #80]
    a060:	ldr	w0, [x24, #8]
    a064:	bl	3270 <lzma_check_size@plt>
    a068:	mov	w23, w0
    a06c:	add	x3, x24, #0x28
    a070:	add	x4, x19, #0x70
    a074:	mov	x0, x22
    a078:	mov	x1, x21
    a07c:	mov	x2, x20
    a080:	mov	x5, x23
    a084:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    a088:	ldr	x8, [x19, #112]
    a08c:	cmp	x8, x23
    a090:	b.cs	a09c <lzma_block_buffer_decode@@XZ_5.0+0x3e4>  // b.hs, b.nlast
    a094:	mov	w23, wzr
    a098:	b	a0a8 <lzma_block_buffer_decode@@XZ_5.0+0x3f0>
    a09c:	ldrb	w8, [x19, #224]
    a0a0:	cbz	w8, a12c <lzma_block_buffer_decode@@XZ_5.0+0x474>
    a0a4:	mov	w23, #0x1                   	// #1
    a0a8:	mov	w0, w23
    a0ac:	ldp	x20, x19, [sp, #96]
    a0b0:	ldp	x22, x21, [sp, #80]
    a0b4:	ldp	x24, x23, [sp, #64]
    a0b8:	ldp	x26, x25, [sp, #48]
    a0bc:	ldr	x27, [sp, #32]
    a0c0:	ldp	x29, x30, [sp, #16]
    a0c4:	add	sp, sp, #0x70
    a0c8:	ret
    a0cc:	ldrb	w8, [x19, #224]
    a0d0:	cbnz	w8, a0ec <lzma_block_buffer_decode@@XZ_5.0+0x434>
    a0d4:	ldr	x8, [x19, #80]
    a0d8:	add	x0, x19, #0x78
    a0dc:	add	x2, x24, x27
    a0e0:	mov	x3, x26
    a0e4:	ldr	w1, [x8, #8]
    a0e8:	bl	c1b0 <lzma_check_size@@XZ_5.0+0x64>
    a0ec:	cmp	w23, #0x1
    a0f0:	b.ne	a158 <lzma_block_buffer_decode@@XZ_5.0+0x4a0>  // b.any
    a0f4:	ldp	x26, x23, [x19, #80]
    a0f8:	ldr	x1, [x26, #16]
    a0fc:	mov	x0, x23
    a100:	bl	a24c <lzma_block_decoder@@XZ_5.0+0xb8>
    a104:	tbz	w0, #0, 9fec <lzma_block_buffer_decode@@XZ_5.0+0x334>
    a108:	ldr	x24, [x25]
    a10c:	ldr	x1, [x26, #24]
    a110:	mov	x0, x24
    a114:	bl	a24c <lzma_block_decoder@@XZ_5.0+0xb8>
    a118:	tbz	w0, #0, 9fec <lzma_block_buffer_decode@@XZ_5.0+0x334>
    a11c:	mov	w8, #0x1                   	// #1
    a120:	stp	x23, x24, [x26, #16]
    a124:	str	w8, [x19]
    a128:	b	9ff4 <lzma_block_buffer_decode@@XZ_5.0+0x33c>
    a12c:	ldr	x20, [x19, #80]
    a130:	ldr	w0, [x20, #8]
    a134:	bl	30e0 <lzma_check_is_supported@plt>
    a138:	tst	w0, #0xff
    a13c:	b.eq	a0a4 <lzma_block_buffer_decode@@XZ_5.0+0x3ec>  // b.none
    a140:	add	x0, x20, #0x28
    a144:	add	x1, x19, #0x78
    a148:	mov	x2, x23
    a14c:	bl	3280 <bcmp@plt>
    a150:	cbnz	w0, a028 <lzma_block_buffer_decode@@XZ_5.0+0x370>
    a154:	b	a0a4 <lzma_block_buffer_decode@@XZ_5.0+0x3ec>
    a158:	mov	w8, wzr
    a15c:	b	9ff4 <lzma_block_buffer_decode@@XZ_5.0+0x33c>
    a160:	stp	x29, x30, [sp, #-32]!
    a164:	stp	x20, x19, [sp, #16]
    a168:	mov	x20, x0
    a16c:	add	x0, x0, #0x8
    a170:	mov	x29, sp
    a174:	mov	x19, x1
    a178:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    a17c:	mov	x0, x20
    a180:	mov	x1, x19
    a184:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    a188:	ldp	x20, x19, [sp, #16]
    a18c:	ldp	x29, x30, [sp], #32
    a190:	ret

000000000000a194 <lzma_block_decoder@@XZ_5.0>:
    a194:	stp	x29, x30, [sp, #-48]!
    a198:	str	x21, [sp, #16]
    a19c:	stp	x20, x19, [sp, #32]
    a1a0:	mov	x29, sp
    a1a4:	mov	x21, x1
    a1a8:	mov	x19, x0
    a1ac:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    a1b0:	mov	w20, w0
    a1b4:	cbnz	w0, a1f4 <lzma_block_decoder@@XZ_5.0+0x60>
    a1b8:	ldp	x1, x0, [x19, #48]
    a1bc:	mov	x2, x21
    a1c0:	bl	9e08 <lzma_block_buffer_decode@@XZ_5.0+0x150>
    a1c4:	cbz	w0, a208 <lzma_block_decoder@@XZ_5.0+0x74>
    a1c8:	mov	w21, w0
    a1cc:	mov	x0, x19
    a1d0:	bl	3330 <lzma_end@plt>
    a1d4:	mov	w8, wzr
    a1d8:	mov	w20, w21
    a1dc:	cbz	w8, a1f4 <lzma_block_decoder@@XZ_5.0+0x60>
    a1e0:	ldr	x8, [x19, #56]
    a1e4:	mov	w20, wzr
    a1e8:	mov	w9, #0x1                   	// #1
    a1ec:	strb	w9, [x8, #88]
    a1f0:	strb	w9, [x8, #91]
    a1f4:	mov	w0, w20
    a1f8:	ldp	x20, x19, [sp, #32]
    a1fc:	ldr	x21, [sp, #16]
    a200:	ldp	x29, x30, [sp], #48
    a204:	ret
    a208:	mov	w8, #0x1                   	// #1
    a20c:	cbnz	w8, a1e0 <lzma_block_decoder@@XZ_5.0+0x4c>
    a210:	b	a1f4 <lzma_block_decoder@@XZ_5.0+0x60>
    a214:	ldr	x9, [x0]
    a218:	mov	x10, #0x7fffffffffffffff    	// #9223372036854775807
    a21c:	cmp	x2, x10
    a220:	csel	x10, x2, x10, cc  // cc = lo, ul, last
    a224:	mov	x8, x0
    a228:	subs	x10, x10, x9
    a22c:	mov	w0, #0x1                   	// #1
    a230:	b.cc	a248 <lzma_block_decoder@@XZ_5.0+0xb4>  // b.lo, b.ul, b.last
    a234:	cmp	x10, x1
    a238:	b.cc	a248 <lzma_block_decoder@@XZ_5.0+0xb4>  // b.lo, b.ul, b.last
    a23c:	mov	w0, wzr
    a240:	add	x9, x9, x1
    a244:	str	x9, [x8]
    a248:	ret
    a24c:	cmn	x1, #0x1
    a250:	cset	w8, eq  // eq = none
    a254:	cmp	x1, x0
    a258:	cset	w9, eq  // eq = none
    a25c:	orr	w0, w8, w9
    a260:	ret

000000000000a264 <lzma_block_header_decode@@XZ_5.0>:
    a264:	sub	sp, sp, #0x60
    a268:	stp	x29, x30, [sp, #16]
    a26c:	stp	x26, x25, [sp, #32]
    a270:	stp	x24, x23, [sp, #48]
    a274:	stp	x22, x21, [sp, #64]
    a278:	stp	x20, x19, [sp, #80]
    a27c:	ldr	x9, [x0, #32]
    a280:	mov	x21, x2
    a284:	mov	x19, x1
    a288:	mov	x20, x0
    a28c:	mov	x8, xzr
    a290:	mov	x10, #0xffffffffffffffff    	// #-1
    a294:	add	x29, sp, #0x10
    a298:	add	x11, x9, x8
    a29c:	add	x8, x8, #0x10
    a2a0:	cmp	x8, #0x50
    a2a4:	stp	x10, xzr, [x11]
    a2a8:	b.ne	a298 <lzma_block_header_decode@@XZ_5.0+0x34>  // b.any
    a2ac:	ldr	w8, [x20]
    a2b0:	cmp	w8, #0x1
    a2b4:	b.ls	a2c0 <lzma_block_header_decode@@XZ_5.0+0x5c>  // b.plast
    a2b8:	mov	w8, #0x1                   	// #1
    a2bc:	str	w8, [x20]
    a2c0:	strb	wzr, [x20, #200]
    a2c4:	ldrb	w9, [x21]
    a2c8:	ldr	w8, [x20, #4]
    a2cc:	lsl	w9, w9, #2
    a2d0:	add	w9, w9, #0x4
    a2d4:	cmp	w9, w8
    a2d8:	b.ne	a2e8 <lzma_block_header_decode@@XZ_5.0+0x84>  // b.any
    a2dc:	ldr	w9, [x20, #8]
    a2e0:	cmp	w9, #0xf
    a2e4:	b.ls	a30c <lzma_block_header_decode@@XZ_5.0+0xa8>  // b.plast
    a2e8:	mov	w23, #0xb                   	// #11
    a2ec:	mov	w0, w23
    a2f0:	ldp	x20, x19, [sp, #80]
    a2f4:	ldp	x22, x21, [sp, #64]
    a2f8:	ldp	x24, x23, [sp, #48]
    a2fc:	ldp	x26, x25, [sp, #32]
    a300:	ldp	x29, x30, [sp, #16]
    a304:	add	sp, sp, #0x60
    a308:	ret
    a30c:	sub	w22, w8, #0x4
    a310:	mov	x0, x21
    a314:	mov	x1, x22
    a318:	mov	w2, wzr
    a31c:	bl	31c0 <lzma_crc32@plt>
    a320:	mov	w23, w0
    a324:	add	x0, x21, x22
    a328:	bl	a474 <lzma_block_header_decode@@XZ_5.0+0x210>
    a32c:	cmp	w23, w0
    a330:	b.ne	a408 <lzma_block_header_decode@@XZ_5.0+0x1a4>  // b.any
    a334:	ldrb	w8, [x21, #1]
    a338:	tst	w8, #0x3c
    a33c:	b.eq	a348 <lzma_block_header_decode@@XZ_5.0+0xe4>  // b.none
    a340:	mov	w23, #0x8                   	// #8
    a344:	b	a2ec <lzma_block_header_decode@@XZ_5.0+0x88>
    a348:	mov	w9, #0x2                   	// #2
    a34c:	add	x0, x20, #0x10
    a350:	str	x9, [sp, #8]
    a354:	tbnz	w8, #6, a3e0 <lzma_block_header_decode@@XZ_5.0+0x17c>
    a358:	mov	x8, #0xffffffffffffffff    	// #-1
    a35c:	str	x8, [x0]
    a360:	ldrsb	w8, [x21, #1]
    a364:	add	x0, x20, #0x18
    a368:	tbnz	w8, #31, a410 <lzma_block_header_decode@@XZ_5.0+0x1ac>
    a36c:	mov	x8, #0xffffffffffffffff    	// #-1
    a370:	str	x8, [x0]
    a374:	ldrb	w8, [x21, #1]
    a378:	mov	x25, xzr
    a37c:	and	x8, x8, #0x3
    a380:	lsl	x8, x8, #4
    a384:	add	x26, x8, #0x10
    a388:	b	a3a0 <lzma_block_header_decode@@XZ_5.0+0x13c>
    a38c:	mov	w8, wzr
    a390:	cbnz	w8, a438 <lzma_block_header_decode@@XZ_5.0+0x1d4>
    a394:	add	x25, x25, #0x10
    a398:	cmp	x26, x25
    a39c:	b.eq	a434 <lzma_block_header_decode@@XZ_5.0+0x1d0>  // b.none
    a3a0:	ldr	x8, [x20, #32]
    a3a4:	add	x3, sp, #0x8
    a3a8:	mov	x1, x19
    a3ac:	mov	x2, x21
    a3b0:	add	x0, x8, x25
    a3b4:	mov	x4, x22
    a3b8:	bl	3500 <lzma_filter_flags_decode@plt>
    a3bc:	cbz	w0, a38c <lzma_block_header_decode@@XZ_5.0+0x128>
    a3c0:	mov	w24, w0
    a3c4:	mov	x0, x20
    a3c8:	mov	x1, x19
    a3cc:	bl	a47c <lzma_block_header_decode@@XZ_5.0+0x218>
    a3d0:	mov	w8, #0x1                   	// #1
    a3d4:	mov	w23, w24
    a3d8:	cbz	w8, a394 <lzma_block_header_decode@@XZ_5.0+0x130>
    a3dc:	b	a438 <lzma_block_header_decode@@XZ_5.0+0x1d4>
    a3e0:	add	x3, sp, #0x8
    a3e4:	mov	x1, xzr
    a3e8:	mov	x2, x21
    a3ec:	mov	x4, x22
    a3f0:	bl	33c0 <lzma_vli_decode@plt>
    a3f4:	mov	w23, w0
    a3f8:	cbnz	w0, a2ec <lzma_block_header_decode@@XZ_5.0+0x88>
    a3fc:	mov	x0, x20
    a400:	bl	3190 <lzma_block_unpadded_size@plt>
    a404:	cbnz	x0, a360 <lzma_block_header_decode@@XZ_5.0+0xfc>
    a408:	mov	w23, #0x9                   	// #9
    a40c:	b	a2ec <lzma_block_header_decode@@XZ_5.0+0x88>
    a410:	add	x3, sp, #0x8
    a414:	mov	x1, xzr
    a418:	mov	x2, x21
    a41c:	mov	x4, x22
    a420:	bl	33c0 <lzma_vli_decode@plt>
    a424:	cmp	w0, #0x0
    a428:	csel	w23, w23, w0, eq  // eq = none
    a42c:	cbnz	w0, a2ec <lzma_block_header_decode@@XZ_5.0+0x88>
    a430:	b	a374 <lzma_block_header_decode@@XZ_5.0+0x110>
    a434:	mov	w8, #0x9                   	// #9
    a438:	cmp	w8, #0x9
    a43c:	b.ne	a2ec <lzma_block_header_decode@@XZ_5.0+0x88>  // b.any
    a440:	ldr	x8, [sp, #8]
    a444:	cmp	x8, x22
    a448:	b.cs	a46c <lzma_block_header_decode@@XZ_5.0+0x208>  // b.hs, b.nlast
    a44c:	add	x9, x8, #0x1
    a450:	str	x9, [sp, #8]
    a454:	ldrb	w8, [x21, x8]
    a458:	cbz	w8, a440 <lzma_block_header_decode@@XZ_5.0+0x1dc>
    a45c:	mov	x0, x20
    a460:	mov	x1, x19
    a464:	bl	a47c <lzma_block_header_decode@@XZ_5.0+0x218>
    a468:	b	a340 <lzma_block_header_decode@@XZ_5.0+0xdc>
    a46c:	mov	w23, wzr
    a470:	b	a2ec <lzma_block_header_decode@@XZ_5.0+0x88>
    a474:	ldr	w0, [x0]
    a478:	ret
    a47c:	stp	x29, x30, [sp, #-48]!
    a480:	stp	x22, x21, [sp, #16]
    a484:	stp	x20, x19, [sp, #32]
    a488:	mov	x19, x1
    a48c:	mov	x20, x0
    a490:	mov	x21, xzr
    a494:	mov	x22, #0xffffffffffffffff    	// #-1
    a498:	mov	x29, sp
    a49c:	ldr	x8, [x20, #32]
    a4a0:	mov	x1, x19
    a4a4:	add	x8, x8, x21
    a4a8:	ldr	x0, [x8, #8]
    a4ac:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    a4b0:	ldr	x8, [x20, #32]
    a4b4:	add	x8, x8, x21
    a4b8:	add	x21, x21, #0x10
    a4bc:	cmp	x21, #0x40
    a4c0:	stp	x22, xzr, [x8]
    a4c4:	b.ne	a49c <lzma_block_header_decode@@XZ_5.0+0x238>  // b.any
    a4c8:	ldp	x20, x19, [sp, #32]
    a4cc:	ldp	x22, x21, [sp, #16]
    a4d0:	ldp	x29, x30, [sp], #48
    a4d4:	ret

000000000000a4d8 <lzma_easy_decoder_memusage@@XZ_5.0>:
    a4d8:	sub	sp, sp, #0xd0
    a4dc:	mov	w1, w0
    a4e0:	mov	x0, sp
    a4e4:	stp	x29, x30, [sp, #192]
    a4e8:	add	x29, sp, #0xc0
    a4ec:	bl	3f50 <lzma_block_total_size@@XZ_5.0+0x2c>
    a4f0:	tbz	w0, #0, a4fc <lzma_easy_decoder_memusage@@XZ_5.0+0x24>
    a4f4:	mov	w0, #0xffffffff            	// #-1
    a4f8:	b	a504 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>
    a4fc:	mov	x0, sp
    a500:	bl	32f0 <lzma_raw_decoder_memusage@plt>
    a504:	ldp	x29, x30, [sp, #192]
    a508:	add	sp, sp, #0xd0
    a50c:	ret

000000000000a510 <lzma_raw_buffer_decode@@XZ_5.0>:
    a510:	sub	sp, sp, #0xd0
    a514:	stp	x24, x23, [sp, #160]
    a518:	mov	x23, x2
    a51c:	mov	w24, #0xb                   	// #11
    a520:	stp	x29, x30, [sp, #112]
    a524:	stp	x28, x27, [sp, #128]
    a528:	stp	x26, x25, [sp, #144]
    a52c:	stp	x22, x21, [sp, #176]
    a530:	stp	x20, x19, [sp, #192]
    a534:	add	x29, sp, #0x70
    a538:	cbz	x2, a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a53c:	mov	x21, x3
    a540:	cbz	x3, a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a544:	mov	x20, x6
    a548:	mov	w24, #0xb                   	// #11
    a54c:	cbz	x6, a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a550:	mov	x26, x5
    a554:	cbz	x5, a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a558:	ldr	x8, [x21]
    a55c:	mov	x22, x4
    a560:	cmp	x8, x4
    a564:	b.hi	a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>  // b.pmore
    a568:	ldr	x8, [x20]
    a56c:	mov	x25, x7
    a570:	cmp	x8, x7
    a574:	b.ls	a580 <lzma_raw_buffer_decode@@XZ_5.0+0x70>  // b.plast
    a578:	mov	w24, #0xb                   	// #11
    a57c:	b	a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a580:	mov	x2, x0
    a584:	movi	v0.2d, #0x0
    a588:	mov	x8, #0xffffffffffffffff    	// #-1
    a58c:	add	x0, sp, #0x20
    a590:	mov	x19, x1
    a594:	str	xzr, [sp, #96]
    a598:	stp	q0, q0, [sp, #64]
    a59c:	stp	q0, q0, [sp, #32]
    a5a0:	str	x8, [sp, #40]
    a5a4:	bl	a6ec <lzma_filter_decoder_is_supported@@XZ_5.0+0x50>
    a5a8:	mov	w24, w0
    a5ac:	cbnz	w0, a678 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a5b0:	ldr	x8, [sp, #56]
    a5b4:	ldr	x0, [sp, #32]
    a5b8:	ldr	x27, [x21]
    a5bc:	ldr	x28, [x20]
    a5c0:	mov	w9, #0x3                   	// #3
    a5c4:	mov	x1, x19
    a5c8:	mov	x2, x23
    a5cc:	mov	x3, x21
    a5d0:	mov	x4, x22
    a5d4:	mov	x5, x26
    a5d8:	mov	x6, x20
    a5dc:	mov	x7, x25
    a5e0:	str	w9, [sp]
    a5e4:	blr	x8
    a5e8:	cmp	w0, #0x1
    a5ec:	b.eq	a658 <lzma_raw_buffer_decode@@XZ_5.0+0x148>  // b.none
    a5f0:	mov	w24, w0
    a5f4:	cbnz	w0, a664 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    a5f8:	ldr	x8, [x21]
    a5fc:	cmp	x8, x22
    a600:	b.ne	a660 <lzma_raw_buffer_decode@@XZ_5.0+0x150>  // b.any
    a604:	ldr	x8, [x20]
    a608:	mov	w24, #0x9                   	// #9
    a60c:	cmp	x8, x25
    a610:	b.ne	a664 <lzma_raw_buffer_decode@@XZ_5.0+0x154>  // b.any
    a614:	ldr	x8, [sp, #56]
    a618:	ldr	x0, [sp, #32]
    a61c:	mov	w9, #0x3                   	// #3
    a620:	add	x5, sp, #0x1c
    a624:	add	x6, sp, #0x10
    a628:	mov	w7, #0x1                   	// #1
    a62c:	mov	x1, x19
    a630:	mov	x2, x23
    a634:	mov	x3, x21
    a638:	mov	x4, x22
    a63c:	str	xzr, [sp, #16]
    a640:	str	w9, [sp]
    a644:	blr	x8
    a648:	ldr	x8, [sp, #16]
    a64c:	cmp	x8, #0x1
    a650:	cinc	w24, w24, eq  // eq = none
    a654:	b	a664 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    a658:	mov	w24, wzr
    a65c:	b	a66c <lzma_raw_buffer_decode@@XZ_5.0+0x15c>
    a660:	mov	w24, #0xa                   	// #10
    a664:	str	x27, [x21]
    a668:	str	x28, [x20]
    a66c:	add	x0, sp, #0x20
    a670:	mov	x1, x19
    a674:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    a678:	mov	w0, w24
    a67c:	ldp	x20, x19, [sp, #192]
    a680:	ldp	x22, x21, [sp, #176]
    a684:	ldp	x24, x23, [sp, #160]
    a688:	ldp	x26, x25, [sp, #144]
    a68c:	ldp	x28, x27, [sp, #128]
    a690:	ldp	x29, x30, [sp, #112]
    a694:	add	sp, sp, #0xd0
    a698:	ret

000000000000a69c <lzma_filter_decoder_is_supported@@XZ_5.0>:
    a69c:	stp	x29, x30, [sp, #-16]!
    a6a0:	mov	x29, sp
    a6a4:	bl	a6b8 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    a6a8:	cmp	x0, #0x0
    a6ac:	cset	w0, ne  // ne = any
    a6b0:	ldp	x29, x30, [sp], #16
    a6b4:	ret
    a6b8:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    a6bc:	mov	x8, xzr
    a6c0:	add	x9, x9, #0xbf8
    a6c4:	ldr	x10, [x9, x8]
    a6c8:	cmp	x10, x0
    a6cc:	b.eq	a6e4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x48>  // b.none
    a6d0:	add	x8, x8, #0x20
    a6d4:	cmp	x8, #0x120
    a6d8:	b.ne	a6c4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x28>  // b.any
    a6dc:	mov	x0, xzr
    a6e0:	ret
    a6e4:	add	x0, x9, x8
    a6e8:	ret
    a6ec:	stp	x29, x30, [sp, #-16]!
    a6f0:	adrp	x3, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a6f4:	add	x3, x3, #0x6b8
    a6f8:	mov	w4, wzr
    a6fc:	mov	x29, sp
    a700:	bl	4130 <lzma_filters_copy@@XZ_5.0+0x194>
    a704:	ldp	x29, x30, [sp], #16
    a708:	ret

000000000000a70c <lzma_raw_decoder@@XZ_5.0>:
    a70c:	stp	x29, x30, [sp, #-48]!
    a710:	str	x21, [sp, #16]
    a714:	stp	x20, x19, [sp, #32]
    a718:	mov	x29, sp
    a71c:	mov	x21, x1
    a720:	mov	x19, x0
    a724:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    a728:	mov	w20, w0
    a72c:	cbnz	w0, a76c <lzma_raw_decoder@@XZ_5.0+0x60>
    a730:	ldp	x1, x0, [x19, #48]
    a734:	mov	x2, x21
    a738:	bl	a6ec <lzma_filter_decoder_is_supported@@XZ_5.0+0x50>
    a73c:	cbz	w0, a780 <lzma_raw_decoder@@XZ_5.0+0x74>
    a740:	mov	w21, w0
    a744:	mov	x0, x19
    a748:	bl	3330 <lzma_end@plt>
    a74c:	mov	w8, wzr
    a750:	mov	w20, w21
    a754:	cbz	w8, a76c <lzma_raw_decoder@@XZ_5.0+0x60>
    a758:	ldr	x8, [x19, #56]
    a75c:	mov	w20, wzr
    a760:	mov	w9, #0x1                   	// #1
    a764:	strb	w9, [x8, #88]
    a768:	strb	w9, [x8, #91]
    a76c:	mov	w0, w20
    a770:	ldp	x20, x19, [sp, #32]
    a774:	ldr	x21, [sp, #16]
    a778:	ldp	x29, x30, [sp], #48
    a77c:	ret
    a780:	mov	w8, #0x1                   	// #1
    a784:	cbnz	w8, a758 <lzma_raw_decoder@@XZ_5.0+0x4c>
    a788:	b	a76c <lzma_raw_decoder@@XZ_5.0+0x60>

000000000000a78c <lzma_raw_decoder_memusage@@XZ_5.0>:
    a78c:	stp	x29, x30, [sp, #-16]!
    a790:	mov	x1, x0
    a794:	adrp	x0, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a798:	add	x0, x0, #0x6b8
    a79c:	mov	x29, sp
    a7a0:	bl	43e8 <lzma_filters_copy@@XZ_5.0+0x44c>
    a7a4:	ldp	x29, x30, [sp], #16
    a7a8:	ret

000000000000a7ac <lzma_properties_decode@@XZ_5.0>:
    a7ac:	stp	x29, x30, [sp, #-48]!
    a7b0:	stp	x22, x21, [sp, #16]
    a7b4:	mov	x21, x0
    a7b8:	stp	x20, x19, [sp, #32]
    a7bc:	str	xzr, [x21, #8]!
    a7c0:	ldr	x0, [x0]
    a7c4:	mov	x29, sp
    a7c8:	mov	x19, x3
    a7cc:	mov	x20, x2
    a7d0:	mov	x22, x1
    a7d4:	bl	a6b8 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    a7d8:	cbz	x0, a7fc <lzma_properties_decode@@XZ_5.0+0x50>
    a7dc:	ldr	x8, [x0, #24]
    a7e0:	cbz	x8, a804 <lzma_properties_decode@@XZ_5.0+0x58>
    a7e4:	mov	x0, x21
    a7e8:	mov	x1, x22
    a7ec:	mov	x2, x20
    a7f0:	mov	x3, x19
    a7f4:	blr	x8
    a7f8:	b	a810 <lzma_properties_decode@@XZ_5.0+0x64>
    a7fc:	mov	w0, #0x8                   	// #8
    a800:	b	a810 <lzma_properties_decode@@XZ_5.0+0x64>
    a804:	cmp	x19, #0x0
    a808:	cset	w8, ne  // ne = any
    a80c:	lsl	w0, w8, #3
    a810:	ldp	x20, x19, [sp, #32]
    a814:	ldp	x22, x21, [sp, #16]
    a818:	ldp	x29, x30, [sp], #48
    a81c:	ret

000000000000a820 <lzma_filter_flags_decode@@XZ_5.0>:
    a820:	sub	sp, sp, #0x50
    a824:	stp	x22, x21, [sp, #48]
    a828:	mov	x21, x1
    a82c:	mov	x1, xzr
    a830:	stp	x29, x30, [sp, #16]
    a834:	stp	x24, x23, [sp, #32]
    a838:	stp	x20, x19, [sp, #64]
    a83c:	add	x29, sp, #0x10
    a840:	mov	x24, x4
    a844:	mov	x19, x3
    a848:	mov	x23, x2
    a84c:	mov	x22, x0
    a850:	str	xzr, [x0, #8]
    a854:	bl	33c0 <lzma_vli_decode@plt>
    a858:	mov	w20, w0
    a85c:	cbnz	w0, a8d0 <lzma_filter_flags_decode@@XZ_5.0+0xb0>
    a860:	ldr	x8, [x22]
    a864:	lsr	x8, x8, #62
    a868:	cbz	x8, a874 <lzma_filter_flags_decode@@XZ_5.0+0x54>
    a86c:	mov	w20, #0x9                   	// #9
    a870:	b	a8d0 <lzma_filter_flags_decode@@XZ_5.0+0xb0>
    a874:	add	x0, sp, #0x8
    a878:	mov	x1, xzr
    a87c:	mov	x2, x23
    a880:	mov	x3, x19
    a884:	mov	x4, x24
    a888:	bl	33c0 <lzma_vli_decode@plt>
    a88c:	cmp	w0, #0x0
    a890:	csel	w20, w20, w0, eq  // eq = none
    a894:	cbnz	w0, a8d0 <lzma_filter_flags_decode@@XZ_5.0+0xb0>
    a898:	ldr	x8, [x19]
    a89c:	ldr	x3, [sp, #8]
    a8a0:	sub	x9, x24, x8
    a8a4:	cmp	x9, x3
    a8a8:	b.cc	a86c <lzma_filter_flags_decode@@XZ_5.0+0x4c>  // b.lo, b.ul, b.last
    a8ac:	add	x2, x23, x8
    a8b0:	mov	x0, x22
    a8b4:	mov	x1, x21
    a8b8:	bl	3250 <lzma_properties_decode@plt>
    a8bc:	ldr	x8, [sp, #8]
    a8c0:	ldr	x9, [x19]
    a8c4:	mov	w20, w0
    a8c8:	add	x8, x9, x8
    a8cc:	str	x8, [x19]
    a8d0:	mov	w0, w20
    a8d4:	ldp	x20, x19, [sp, #64]
    a8d8:	ldp	x22, x21, [sp, #48]
    a8dc:	ldp	x24, x23, [sp, #32]
    a8e0:	ldp	x29, x30, [sp, #16]
    a8e4:	add	sp, sp, #0x50
    a8e8:	ret

000000000000a8ec <lzma_index_decoder@@XZ_5.0>:
    a8ec:	stp	x29, x30, [sp, #-48]!
    a8f0:	stp	x22, x21, [sp, #16]
    a8f4:	stp	x20, x19, [sp, #32]
    a8f8:	mov	x29, sp
    a8fc:	mov	x21, x2
    a900:	mov	x22, x1
    a904:	mov	x19, x0
    a908:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    a90c:	mov	w20, w0
    a910:	cbnz	w0, a954 <lzma_index_decoder@@XZ_5.0+0x68>
    a914:	ldp	x1, x0, [x19, #48]
    a918:	mov	x2, x22
    a91c:	mov	x3, x21
    a920:	bl	a974 <lzma_index_decoder@@XZ_5.0+0x88>
    a924:	cbz	w0, a968 <lzma_index_decoder@@XZ_5.0+0x7c>
    a928:	mov	w21, w0
    a92c:	mov	x0, x19
    a930:	bl	3330 <lzma_end@plt>
    a934:	mov	w8, wzr
    a938:	mov	w20, w21
    a93c:	cbz	w8, a954 <lzma_index_decoder@@XZ_5.0+0x68>
    a940:	ldr	x8, [x19, #56]
    a944:	mov	w20, wzr
    a948:	mov	w9, #0x1                   	// #1
    a94c:	strb	w9, [x8, #88]
    a950:	strb	w9, [x8, #91]
    a954:	mov	w0, w20
    a958:	ldp	x20, x19, [sp, #32]
    a95c:	ldp	x22, x21, [sp, #16]
    a960:	ldp	x29, x30, [sp], #48
    a964:	ret
    a968:	mov	w8, #0x1                   	// #1
    a96c:	cbnz	w8, a940 <lzma_index_decoder@@XZ_5.0+0x54>
    a970:	b	a954 <lzma_index_decoder@@XZ_5.0+0x68>
    a974:	stp	x29, x30, [sp, #-64]!
    a978:	stp	x22, x21, [sp, #32]
    a97c:	stp	x20, x19, [sp, #48]
    a980:	ldr	x8, [x0, #16]
    a984:	str	x23, [sp, #16]
    a988:	adrp	x23, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a98c:	add	x23, x23, #0x974
    a990:	mov	x19, x3
    a994:	mov	x20, x2
    a998:	mov	x22, x0
    a99c:	cmp	x8, x23
    a9a0:	mov	x21, x1
    a9a4:	mov	x29, sp
    a9a8:	b.eq	a9b8 <lzma_index_decoder@@XZ_5.0+0xcc>  // b.none
    a9ac:	mov	x0, x22
    a9b0:	mov	x1, x21
    a9b4:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    a9b8:	str	x23, [x22, #16]
    a9bc:	cbz	x20, a9d8 <lzma_index_decoder@@XZ_5.0+0xec>
    a9c0:	ldr	x23, [x22]
    a9c4:	cbz	x23, a9e0 <lzma_index_decoder@@XZ_5.0+0xf4>
    a9c8:	ldr	x0, [x23, #16]
    a9cc:	mov	x1, x21
    a9d0:	bl	33e0 <lzma_index_end@plt>
    a9d4:	b	aa1c <lzma_index_decoder@@XZ_5.0+0x130>
    a9d8:	mov	w0, #0xb                   	// #11
    a9dc:	b	aa30 <lzma_index_decoder@@XZ_5.0+0x144>
    a9e0:	mov	w0, #0x48                  	// #72
    a9e4:	mov	x1, x21
    a9e8:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    a9ec:	cbz	x0, aa44 <lzma_index_decoder@@XZ_5.0+0x158>
    a9f0:	adrp	x8, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a9f4:	adrp	x9, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a9f8:	adrp	x10, a000 <lzma_block_buffer_decode@@XZ_5.0+0x348>
    a9fc:	add	x8, x8, #0xbac
    aa00:	add	x9, x9, #0xec0
    aa04:	add	x10, x10, #0xef4
    aa08:	mov	x23, x0
    aa0c:	str	x0, [x22]
    aa10:	stp	x8, x9, [x22, #24]
    aa14:	str	x10, [x22, #56]
    aa18:	str	xzr, [x0, #16]
    aa1c:	mov	x0, x23
    aa20:	mov	x1, x21
    aa24:	mov	x2, x20
    aa28:	mov	x3, x19
    aa2c:	bl	ab4c <lzma_index_buffer_decode@@XZ_5.0+0x100>
    aa30:	ldp	x20, x19, [sp, #48]
    aa34:	ldp	x22, x21, [sp, #32]
    aa38:	ldr	x23, [sp, #16]
    aa3c:	ldp	x29, x30, [sp], #64
    aa40:	ret
    aa44:	mov	w0, #0x5                   	// #5
    aa48:	b	aa30 <lzma_index_decoder@@XZ_5.0+0x144>

000000000000aa4c <lzma_index_buffer_decode@@XZ_5.0>:
    aa4c:	sub	sp, sp, #0x90
    aa50:	stp	x22, x21, [sp, #112]
    aa54:	mov	x21, x2
    aa58:	mov	x2, x0
    aa5c:	mov	w0, #0xb                   	// #11
    aa60:	stp	x29, x30, [sp, #80]
    aa64:	stp	x24, x23, [sp, #96]
    aa68:	stp	x20, x19, [sp, #128]
    aa6c:	add	x29, sp, #0x50
    aa70:	cbz	x2, ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aa74:	mov	x19, x1
    aa78:	cbz	x1, ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aa7c:	mov	x23, x3
    aa80:	cbz	x3, ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aa84:	mov	x20, x4
    aa88:	cbz	x4, ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aa8c:	ldr	x8, [x20]
    aa90:	mov	x22, x5
    aa94:	cmp	x8, x5
    aa98:	b.ls	aaa4 <lzma_index_buffer_decode@@XZ_5.0+0x58>  // b.plast
    aa9c:	mov	w0, #0xb                   	// #11
    aaa0:	b	ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aaa4:	ldr	x3, [x19]
    aaa8:	add	x0, sp, #0x8
    aaac:	mov	x1, x21
    aab0:	bl	ab4c <lzma_index_buffer_decode@@XZ_5.0+0x100>
    aab4:	cbnz	w0, ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    aab8:	ldr	x24, [x20]
    aabc:	add	x0, sp, #0x8
    aac0:	mov	x1, x21
    aac4:	mov	x2, x23
    aac8:	mov	x3, x20
    aacc:	mov	x4, x22
    aad0:	mov	x5, xzr
    aad4:	mov	x6, xzr
    aad8:	mov	x7, xzr
    aadc:	str	wzr, [sp]
    aae0:	bl	abac <lzma_index_buffer_decode@@XZ_5.0+0x160>
    aae4:	mov	w22, w0
    aae8:	cmp	w0, #0x1
    aaec:	mov	w0, wzr
    aaf0:	b.eq	ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>  // b.none
    aaf4:	ldr	x0, [sp, #24]
    aaf8:	mov	x1, x21
    aafc:	bl	33e0 <lzma_index_end@plt>
    ab00:	str	x24, [x20]
    ab04:	cbz	w22, ab28 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    ab08:	cmp	w22, #0x6
    ab0c:	b.ne	ab30 <lzma_index_buffer_decode@@XZ_5.0+0xe4>  // b.any
    ab10:	ldr	x1, [sp, #40]
    ab14:	mov	w0, #0x1                   	// #1
    ab18:	bl	3180 <lzma_index_memusage@plt>
    ab1c:	str	x0, [x19]
    ab20:	mov	w0, #0x6                   	// #6
    ab24:	b	ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    ab28:	mov	w0, #0x9                   	// #9
    ab2c:	b	ab34 <lzma_index_buffer_decode@@XZ_5.0+0xe8>
    ab30:	mov	w0, w22
    ab34:	ldp	x20, x19, [sp, #128]
    ab38:	ldp	x22, x21, [sp, #112]
    ab3c:	ldp	x24, x23, [sp, #96]
    ab40:	ldp	x29, x30, [sp, #80]
    ab44:	add	sp, sp, #0x90
    ab48:	ret
    ab4c:	stp	x29, x30, [sp, #-32]!
    ab50:	stp	x20, x19, [sp, #16]
    ab54:	mov	x20, x0
    ab58:	str	x2, [x0, #24]
    ab5c:	mov	x0, x1
    ab60:	mov	x29, sp
    ab64:	mov	x19, x3
    ab68:	str	xzr, [x2]
    ab6c:	bl	33b0 <lzma_index_init@plt>
    ab70:	str	x0, [x20, #16]
    ab74:	cbz	x0, ab9c <lzma_index_buffer_decode@@XZ_5.0+0x150>
    ab78:	cmp	x19, #0x0
    ab7c:	mov	w0, wzr
    ab80:	csinc	x8, x19, xzr, ne  // ne = any
    ab84:	str	wzr, [x20]
    ab88:	str	xzr, [x20, #32]
    ab8c:	str	xzr, [x20, #56]
    ab90:	str	x8, [x20, #8]
    ab94:	str	wzr, [x20, #64]
    ab98:	b	aba0 <lzma_index_buffer_decode@@XZ_5.0+0x154>
    ab9c:	mov	w0, #0x5                   	// #5
    aba0:	ldp	x20, x19, [sp, #16]
    aba4:	ldp	x29, x30, [sp], #32
    aba8:	ret
    abac:	sub	sp, sp, #0x80
    abb0:	stp	x28, x27, [sp, #48]
    abb4:	ldr	x28, [x3]
    abb8:	stp	x22, x21, [sp, #96]
    abbc:	stp	x20, x19, [sp, #112]
    abc0:	mov	x21, x3
    abc4:	mov	x20, x2
    abc8:	cmp	x28, x4
    abcc:	mov	x19, x0
    abd0:	stp	x29, x30, [sp, #32]
    abd4:	stp	x26, x25, [sp, #64]
    abd8:	stp	x24, x23, [sp, #80]
    abdc:	add	x29, sp, #0x20
    abe0:	b.cs	add4 <lzma_index_buffer_decode@@XZ_5.0+0x388>  // b.hs, b.nlast
    abe4:	add	x8, x19, #0x30
    abe8:	stur	x8, [x29, #-8]
    abec:	add	x8, x19, #0x20
    abf0:	adrp	x24, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    abf4:	mov	x22, x4
    abf8:	mov	w27, wzr
    abfc:	add	x26, x19, #0x28
    ac00:	add	x25, x19, #0x38
    ac04:	str	x8, [sp, #16]
    ac08:	add	x24, x24, #0xcc5
    ac0c:	mov	x8, x28
    ac10:	str	x1, [sp, #8]
    ac14:	b	ac34 <lzma_index_buffer_decode@@XZ_5.0+0x1e8>
    ac18:	mov	w27, w0
    ac1c:	mov	w8, #0x5                   	// #5
    ac20:	cmp	w8, #0x4
    ac24:	b.ne	ae20 <lzma_index_buffer_decode@@XZ_5.0+0x3d4>  // b.any
    ac28:	ldr	x8, [x21]
    ac2c:	cmp	x8, x22
    ac30:	b.cs	add8 <lzma_index_buffer_decode@@XZ_5.0+0x38c>  // b.hs, b.nlast
    ac34:	ldr	w9, [x19]
    ac38:	cmp	w9, #0x7
    ac3c:	b.hi	ae18 <lzma_index_buffer_decode@@XZ_5.0+0x3cc>  // b.pmore
    ac40:	adr	x10, ac50 <lzma_index_buffer_decode@@XZ_5.0+0x204>
    ac44:	ldrb	w11, [x24, x9]
    ac48:	add	x10, x10, x11, lsl #2
    ac4c:	br	x10
    ac50:	ldur	x8, [x29, #-8]
    ac54:	cmp	w9, #0x3
    ac58:	mov	x1, x25
    ac5c:	mov	x2, x20
    ac60:	csel	x0, x26, x8, eq  // eq = none
    ac64:	mov	x3, x21
    ac68:	mov	x4, x22
    ac6c:	bl	33c0 <lzma_vli_decode@plt>
    ac70:	cmp	w0, #0x1
    ac74:	b.ne	ac18 <lzma_index_buffer_decode@@XZ_5.0+0x1cc>  // b.any
    ac78:	ldr	w8, [x19]
    ac7c:	str	xzr, [x19, #56]
    ac80:	cmp	w8, #0x3
    ac84:	b.ne	ad7c <lzma_index_buffer_decode@@XZ_5.0+0x330>  // b.any
    ac88:	ldr	x8, [x26]
    ac8c:	mov	x9, #0xfffffffffffffff7    	// #-9
    ac90:	movk	x9, #0x7fff, lsl #48
    ac94:	sub	x8, x8, #0x5
    ac98:	cmp	x8, x9
    ac9c:	b.ls	ada4 <lzma_index_buffer_decode@@XZ_5.0+0x358>  // b.plast
    aca0:	mov	w27, wzr
    aca4:	mov	w23, #0x9                   	// #9
    aca8:	mov	w8, #0x1                   	// #1
    acac:	b	ac20 <lzma_index_buffer_decode@@XZ_5.0+0x1d4>
    acb0:	ldrb	w9, [x20, x8]
    acb4:	add	x8, x8, #0x1
    acb8:	str	x8, [x21]
    acbc:	cbnz	w9, aea0 <lzma_index_buffer_decode@@XZ_5.0+0x454>
    acc0:	mov	w8, #0x1                   	// #1
    acc4:	str	w8, [x19]
    acc8:	b	ac28 <lzma_index_buffer_decode@@XZ_5.0+0x1dc>
    accc:	ldr	x0, [sp, #16]
    acd0:	mov	x1, x25
    acd4:	mov	x2, x20
    acd8:	mov	x3, x21
    acdc:	mov	x4, x22
    ace0:	bl	33c0 <lzma_vli_decode@plt>
    ace4:	cmp	w0, #0x1
    ace8:	b.ne	aeb8 <lzma_index_buffer_decode@@XZ_5.0+0x46c>  // b.any
    acec:	mov	w8, #0x2                   	// #2
    acf0:	str	xzr, [x19, #56]
    acf4:	str	w8, [x19]
    acf8:	ldr	x1, [x19, #32]
    acfc:	mov	w0, #0x1                   	// #1
    ad00:	bl	3180 <lzma_index_memusage@plt>
    ad04:	ldr	x8, [x19, #8]
    ad08:	cmp	x0, x8
    ad0c:	b.hi	aea8 <lzma_index_buffer_decode@@XZ_5.0+0x45c>  // b.pmore
    ad10:	ldr	x0, [x19, #16]
    ad14:	ldr	x1, [x19, #32]
    ad18:	bl	4728 <lzma_index_end@@XZ_5.0+0x94>
    ad1c:	ldr	x8, [x19, #32]
    ad20:	mov	w9, #0x5                   	// #5
    ad24:	mov	w27, wzr
    ad28:	cmp	x8, #0x0
    ad2c:	mov	w8, #0x3                   	// #3
    ad30:	csel	w8, w9, w8, eq  // eq = none
    ad34:	str	w8, [x19]
    ad38:	b	ac28 <lzma_index_buffer_decode@@XZ_5.0+0x1dc>
    ad3c:	ldr	x0, [x19, #16]
    ad40:	bl	4904 <lzma_index_checks@@XZ_5.0+0x28>
    ad44:	mov	w8, w0
    ad48:	str	x8, [x19, #56]
    ad4c:	mov	w8, #0x6                   	// #6
    ad50:	str	w8, [x19]
    ad54:	ldr	x8, [x19, #56]
    ad58:	cbz	x8, ae2c <lzma_index_buffer_decode@@XZ_5.0+0x3e0>
    ad5c:	sub	x8, x8, #0x1
    ad60:	str	x8, [x19, #56]
    ad64:	ldr	x8, [x21]
    ad68:	ldrb	w9, [x20, x8]
    ad6c:	add	x8, x8, #0x1
    ad70:	str	x8, [x21]
    ad74:	cbz	w9, ac28 <lzma_index_buffer_decode@@XZ_5.0+0x1dc>
    ad78:	b	aea0 <lzma_index_buffer_decode@@XZ_5.0+0x454>
    ad7c:	ldr	x0, [x19, #16]
    ad80:	ldp	x2, x3, [x19, #40]
    ad84:	ldr	x1, [sp, #8]
    ad88:	bl	3310 <lzma_index_append@plt>
    ad8c:	cmp	w0, #0x0
    ad90:	cset	w8, ne  // ne = any
    ad94:	csel	w23, w23, w0, eq  // eq = none
    ad98:	cbz	w0, adac <lzma_index_buffer_decode@@XZ_5.0+0x360>
    ad9c:	mov	w27, wzr
    ada0:	b	ac20 <lzma_index_buffer_decode@@XZ_5.0+0x1d4>
    ada4:	mov	w8, #0x4                   	// #4
    ada8:	b	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x378>
    adac:	ldr	x8, [x19, #32]
    adb0:	mov	w9, #0x5                   	// #5
    adb4:	subs	x8, x8, #0x1
    adb8:	str	x8, [x19, #32]
    adbc:	mov	w8, #0x3                   	// #3
    adc0:	csel	w8, w9, w8, eq  // eq = none
    adc4:	mov	w27, wzr
    adc8:	str	w8, [x19]
    adcc:	mov	w8, #0x4                   	// #4
    add0:	b	ac20 <lzma_index_buffer_decode@@XZ_5.0+0x1d4>
    add4:	mov	w27, wzr
    add8:	ldr	x8, [x21]
    addc:	ldr	w2, [x19, #64]
    ade0:	add	x0, x20, x28
    ade4:	sub	x1, x8, x28
    ade8:	bl	31c0 <lzma_crc32@plt>
    adec:	mov	w23, w27
    adf0:	str	w0, [x19, #64]
    adf4:	mov	w0, w23
    adf8:	ldp	x20, x19, [sp, #112]
    adfc:	ldp	x22, x21, [sp, #96]
    ae00:	ldp	x24, x23, [sp, #80]
    ae04:	ldp	x26, x25, [sp, #64]
    ae08:	ldp	x28, x27, [sp, #48]
    ae0c:	ldp	x29, x30, [sp, #32]
    ae10:	add	sp, sp, #0x80
    ae14:	ret
    ae18:	mov	w23, #0xb                   	// #11
    ae1c:	b	adf4 <lzma_index_buffer_decode@@XZ_5.0+0x3a8>
    ae20:	cmp	w8, #0x5
    ae24:	b.eq	add8 <lzma_index_buffer_decode@@XZ_5.0+0x38c>  // b.none
    ae28:	b	adf4 <lzma_index_buffer_decode@@XZ_5.0+0x3a8>
    ae2c:	ldr	x8, [x21]
    ae30:	ldr	w2, [x19, #64]
    ae34:	add	x0, x20, x28
    ae38:	sub	x1, x8, x28
    ae3c:	bl	31c0 <lzma_crc32@plt>
    ae40:	mov	w8, #0x7                   	// #7
    ae44:	str	w0, [x19, #64]
    ae48:	str	w8, [x19]
    ae4c:	ldr	x8, [x21]
    ae50:	cmp	x8, x22
    ae54:	b.eq	aeb0 <lzma_index_buffer_decode@@XZ_5.0+0x464>  // b.none
    ae58:	ldr	x9, [x19, #56]
    ae5c:	ldr	w10, [x19, #64]
    ae60:	ldrb	w11, [x20, x8]
    ae64:	add	x8, x8, #0x1
    ae68:	lsl	w12, w9, #3
    ae6c:	lsr	w10, w10, w12
    ae70:	cmp	w11, w10, uxtb
    ae74:	str	x8, [x21]
    ae78:	b.ne	aea0 <lzma_index_buffer_decode@@XZ_5.0+0x454>  // b.any
    ae7c:	add	x8, x9, #0x1
    ae80:	cmp	x8, #0x4
    ae84:	str	x8, [x19, #56]
    ae88:	b.cc	ae4c <lzma_index_buffer_decode@@XZ_5.0+0x400>  // b.lo, b.ul, b.last
    ae8c:	ldp	x8, x9, [x19, #16]
    ae90:	mov	w23, #0x1                   	// #1
    ae94:	str	x8, [x9]
    ae98:	str	xzr, [x19, #16]
    ae9c:	b	adf4 <lzma_index_buffer_decode@@XZ_5.0+0x3a8>
    aea0:	mov	w23, #0x9                   	// #9
    aea4:	b	adf4 <lzma_index_buffer_decode@@XZ_5.0+0x3a8>
    aea8:	mov	w27, #0x6                   	// #6
    aeac:	b	add8 <lzma_index_buffer_decode@@XZ_5.0+0x38c>
    aeb0:	mov	w23, wzr
    aeb4:	b	adf4 <lzma_index_buffer_decode@@XZ_5.0+0x3a8>
    aeb8:	mov	w27, w0
    aebc:	b	add8 <lzma_index_buffer_decode@@XZ_5.0+0x38c>
    aec0:	stp	x29, x30, [sp, #-32]!
    aec4:	stp	x20, x19, [sp, #16]
    aec8:	mov	x19, x0
    aecc:	ldr	x0, [x0, #16]
    aed0:	mov	x29, sp
    aed4:	mov	x20, x1
    aed8:	bl	33e0 <lzma_index_end@plt>
    aedc:	mov	x0, x19
    aee0:	mov	x1, x20
    aee4:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    aee8:	ldp	x20, x19, [sp, #16]
    aeec:	ldp	x29, x30, [sp], #32
    aef0:	ret
    aef4:	stp	x29, x30, [sp, #-48]!
    aef8:	stp	x22, x21, [sp, #16]
    aefc:	stp	x20, x19, [sp, #32]
    af00:	ldr	x8, [x0, #32]
    af04:	mov	x20, x0
    af08:	mov	x21, x1
    af0c:	mov	w0, #0x1                   	// #1
    af10:	mov	x1, x8
    af14:	mov	x29, sp
    af18:	mov	x19, x3
    af1c:	mov	x22, x2
    af20:	bl	3180 <lzma_index_memusage@plt>
    af24:	str	x0, [x21]
    af28:	ldr	x8, [x20, #8]
    af2c:	str	x8, [x22]
    af30:	cbz	x19, af48 <lzma_index_buffer_decode@@XZ_5.0+0x4fc>
    af34:	ldr	x8, [x21]
    af38:	cmp	x8, x19
    af3c:	b.ls	af50 <lzma_index_buffer_decode@@XZ_5.0+0x504>  // b.plast
    af40:	mov	w0, #0x6                   	// #6
    af44:	b	af58 <lzma_index_buffer_decode@@XZ_5.0+0x50c>
    af48:	mov	w0, wzr
    af4c:	b	af58 <lzma_index_buffer_decode@@XZ_5.0+0x50c>
    af50:	mov	w0, wzr
    af54:	str	x19, [x20, #8]
    af58:	ldp	x20, x19, [sp, #32]
    af5c:	ldp	x22, x21, [sp, #16]
    af60:	ldp	x29, x30, [sp], #48
    af64:	ret

000000000000af68 <lzma_index_hash_init@@XZ_5.0>:
    af68:	stp	x29, x30, [sp, #-32]!
    af6c:	str	x19, [sp, #16]
    af70:	mov	x19, x0
    af74:	mov	x29, sp
    af78:	cbnz	x0, af8c <lzma_index_hash_init@@XZ_5.0+0x24>
    af7c:	mov	w0, #0x140                 	// #320
    af80:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    af84:	mov	x19, x0
    af88:	cbz	x0, afc4 <lzma_index_hash_init@@XZ_5.0+0x5c>
    af8c:	add	x0, x19, #0x28
    af90:	movi	v0.2d, #0x0
    af94:	mov	w1, #0xa                   	// #10
    af98:	str	wzr, [x19]
    af9c:	stp	xzr, xzr, [x19, #296]
    afa0:	str	xzr, [x19, #288]
    afa4:	stur	q0, [x19, #8]
    afa8:	stur	q0, [x19, #24]
    afac:	stp	q0, q0, [x19, #144]
    afb0:	str	wzr, [x19, #312]
    afb4:	bl	c16c <lzma_check_size@@XZ_5.0+0x20>
    afb8:	add	x0, x19, #0xb0
    afbc:	mov	w1, #0xa                   	// #10
    afc0:	bl	c16c <lzma_check_size@@XZ_5.0+0x20>
    afc4:	mov	x0, x19
    afc8:	ldr	x19, [sp, #16]
    afcc:	ldp	x29, x30, [sp], #32
    afd0:	ret

000000000000afd4 <lzma_index_hash_end@@XZ_5.0>:
    afd4:	stp	x29, x30, [sp, #-16]!
    afd8:	mov	x29, sp
    afdc:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    afe0:	ldp	x29, x30, [sp], #16
    afe4:	ret

000000000000afe8 <lzma_index_hash_size@@XZ_5.0>:
    afe8:	stp	x29, x30, [sp, #-16]!
    afec:	ldp	x8, x1, [x0, #24]
    aff0:	mov	x29, sp
    aff4:	mov	x0, x8
    aff8:	bl	b004 <lzma_index_hash_size@@XZ_5.0+0x1c>
    affc:	ldp	x29, x30, [sp], #16
    b000:	ret
    b004:	stp	x29, x30, [sp, #-16]!
    b008:	mov	x29, sp
    b00c:	bl	b4f0 <lzma_index_hash_decode@@XZ_5.0+0x374>
    b010:	bl	b51c <lzma_index_hash_decode@@XZ_5.0+0x3a0>
    b014:	ldp	x29, x30, [sp], #16
    b018:	ret

000000000000b01c <lzma_index_hash_append@@XZ_5.0>:
    b01c:	stp	x29, x30, [sp, #-48]!
    b020:	stp	x20, x19, [sp, #32]
    b024:	mov	w19, #0xb                   	// #11
    b028:	stp	x22, x21, [sp, #16]
    b02c:	mov	x29, sp
    b030:	tbnz	x2, #63, b0ac <lzma_index_hash_append@@XZ_5.0+0x90>
    b034:	mov	x9, #0xfffffffffffffff7    	// #-9
    b038:	sub	x8, x1, #0x5
    b03c:	movk	x9, #0x7fff, lsl #48
    b040:	cmp	x8, x9
    b044:	b.hi	b0ac <lzma_index_hash_append@@XZ_5.0+0x90>  // b.pmore
    b048:	ldr	w8, [x0]
    b04c:	mov	x20, x0
    b050:	cbnz	w8, b0ac <lzma_index_hash_append@@XZ_5.0+0x90>
    b054:	add	x0, x20, #0x8
    b058:	bl	b0c0 <lzma_index_hash_append@@XZ_5.0+0xa4>
    b05c:	ldr	x21, [x20, #8]
    b060:	tbnz	x21, #63, b0a8 <lzma_index_hash_append@@XZ_5.0+0x8c>
    b064:	ldr	x8, [x20, #16]
    b068:	tbnz	x8, #63, b0a8 <lzma_index_hash_append@@XZ_5.0+0x8c>
    b06c:	ldp	x22, x20, [x20, #24]
    b070:	mov	x0, x22
    b074:	mov	x1, x20
    b078:	bl	b004 <lzma_index_hash_size@@XZ_5.0+0x1c>
    b07c:	mov	x8, #0x400000000           	// #17179869184
    b080:	cmp	x0, x8
    b084:	mov	w19, #0x9                   	// #9
    b088:	b.hi	b0ac <lzma_index_hash_append@@XZ_5.0+0x90>  // b.pmore
    b08c:	mov	x0, x21
    b090:	mov	x1, x22
    b094:	mov	x2, x20
    b098:	bl	b14c <lzma_index_hash_append@@XZ_5.0+0x130>
    b09c:	asr	x8, x0, #63
    b0a0:	and	w0, w8, w19
    b0a4:	b	b0b0 <lzma_index_hash_append@@XZ_5.0+0x94>
    b0a8:	mov	w19, #0x9                   	// #9
    b0ac:	mov	w0, w19
    b0b0:	ldp	x20, x19, [sp, #32]
    b0b4:	ldp	x22, x21, [sp, #16]
    b0b8:	ldp	x29, x30, [sp], #48
    b0bc:	ret
    b0c0:	sub	sp, sp, #0x40
    b0c4:	stp	x22, x21, [sp, #32]
    b0c8:	mov	x21, x0
    b0cc:	mov	x0, x1
    b0d0:	stp	x29, x30, [sp, #16]
    b0d4:	stp	x20, x19, [sp, #48]
    b0d8:	add	x29, sp, #0x10
    b0dc:	mov	x19, x2
    b0e0:	mov	x20, x1
    b0e4:	bl	b51c <lzma_index_hash_decode@@XZ_5.0+0x3a0>
    b0e8:	ldp	x8, x9, [x21]
    b0ec:	add	x8, x8, x0
    b0f0:	add	x9, x9, x19
    b0f4:	mov	x0, x20
    b0f8:	stp	x8, x9, [x21]
    b0fc:	bl	3480 <lzma_vli_size@plt>
    b100:	mov	w22, w0
    b104:	mov	x0, x19
    b108:	bl	3480 <lzma_vli_size@plt>
    b10c:	ldp	x9, x8, [x21, #16]
    b110:	add	w10, w0, w22
    b114:	add	x0, x21, #0x20
    b118:	mov	x2, sp
    b11c:	add	x8, x8, x10
    b120:	add	x9, x9, #0x1
    b124:	mov	w1, #0xa                   	// #10
    b128:	mov	w3, #0x10                  	// #16
    b12c:	stp	x9, x8, [x21, #16]
    b130:	stp	x20, x19, [sp]
    b134:	bl	c1b0 <lzma_check_size@@XZ_5.0+0x64>
    b138:	ldp	x20, x19, [sp, #48]
    b13c:	ldp	x22, x21, [sp, #32]
    b140:	ldp	x29, x30, [sp, #16]
    b144:	add	sp, sp, #0x40
    b148:	ret
    b14c:	stp	x29, x30, [sp, #-32]!
    b150:	str	x19, [sp, #16]
    b154:	mov	x19, x0
    b158:	mov	x0, x1
    b15c:	mov	x1, x2
    b160:	mov	x29, sp
    b164:	bl	b004 <lzma_index_hash_size@@XZ_5.0+0x1c>
    b168:	add	x8, x19, x0
    b16c:	ldr	x19, [sp, #16]
    b170:	add	x0, x8, #0x18
    b174:	ldp	x29, x30, [sp], #32
    b178:	ret

000000000000b17c <lzma_index_hash_decode@@XZ_5.0>:
    b17c:	sub	sp, sp, #0x70
    b180:	stp	x29, x30, [sp, #16]
    b184:	stp	x28, x27, [sp, #32]
    b188:	stp	x26, x25, [sp, #48]
    b18c:	stp	x24, x23, [sp, #64]
    b190:	stp	x22, x21, [sp, #80]
    b194:	stp	x20, x19, [sp, #96]
    b198:	ldr	x27, [x2]
    b19c:	add	x29, sp, #0x10
    b1a0:	cmp	x27, x3
    b1a4:	b.cs	b1f0 <lzma_index_hash_decode@@XZ_5.0+0x74>  // b.hs, b.nlast
    b1a8:	ldr	x8, [x2]
    b1ac:	mov	x22, x3
    b1b0:	mov	x21, x2
    b1b4:	mov	x20, x1
    b1b8:	mov	x19, x0
    b1bc:	cmp	x8, x3
    b1c0:	b.cs	b3b0 <lzma_index_hash_decode@@XZ_5.0+0x234>  // b.hs, b.nlast
    b1c4:	add	x9, x19, #0x90
    b1c8:	adrp	x26, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    b1cc:	mov	w23, wzr
    b1d0:	add	x28, x19, #0x120
    b1d4:	add	x25, x19, #0x128
    b1d8:	add	x24, x19, #0x130
    b1dc:	str	x9, [sp]
    b1e0:	add	x9, x19, #0x118
    b1e4:	add	x26, x26, #0xccd
    b1e8:	str	x9, [sp, #8]
    b1ec:	b	b21c <lzma_index_hash_decode@@XZ_5.0+0xa0>
    b1f0:	mov	w23, #0xa                   	// #10
    b1f4:	b	b4bc <lzma_index_hash_decode@@XZ_5.0+0x340>
    b1f8:	add	x9, x8, #0x1
    b1fc:	str	x9, [x21]
    b200:	ldrb	w8, [x20, x8]
    b204:	cbnz	w8, b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>
    b208:	mov	w8, #0x1                   	// #1
    b20c:	str	w8, [x19]
    b210:	ldr	x8, [x21]
    b214:	cmp	x8, x22
    b218:	b.cs	b3b4 <lzma_index_hash_decode@@XZ_5.0+0x238>  // b.hs, b.nlast
    b21c:	ldr	w9, [x19]
    b220:	cmp	w9, #0x6
    b224:	b.hi	b3d0 <lzma_index_hash_decode@@XZ_5.0+0x254>  // b.pmore
    b228:	adr	x10, b1f8 <lzma_index_hash_decode@@XZ_5.0+0x7c>
    b22c:	ldrb	w11, [x26, x9]
    b230:	add	x10, x10, x11, lsl #2
    b234:	br	x10
    b238:	cmp	w9, #0x2
    b23c:	csel	x0, x28, x25, eq  // eq = none
    b240:	mov	x1, x24
    b244:	mov	x2, x20
    b248:	mov	x3, x21
    b24c:	mov	x4, x22
    b250:	bl	33c0 <lzma_vli_decode@plt>
    b254:	cmp	w0, #0x1
    b258:	b.ne	b330 <lzma_index_hash_decode@@XZ_5.0+0x1b4>  // b.any
    b25c:	ldr	w8, [x19]
    b260:	ldr	x1, [x19, #288]
    b264:	str	xzr, [x19, #304]
    b268:	cmp	w8, #0x2
    b26c:	b.ne	b344 <lzma_index_hash_decode@@XZ_5.0+0x1c8>  // b.any
    b270:	mov	x9, #0xfffffffffffffff7    	// #-9
    b274:	sub	x8, x1, #0x5
    b278:	movk	x9, #0x7fff, lsl #48
    b27c:	cmp	x8, x9
    b280:	b.hi	b380 <lzma_index_hash_decode@@XZ_5.0+0x204>  // b.pmore
    b284:	mov	w8, #0x3                   	// #3
    b288:	mov	w23, wzr
    b28c:	str	w8, [x19]
    b290:	mov	w8, #0x4                   	// #4
    b294:	cmp	w8, #0x4
    b298:	b.eq	b210 <lzma_index_hash_decode@@XZ_5.0+0x94>  // b.none
    b29c:	b	b4b0 <lzma_index_hash_decode@@XZ_5.0+0x334>
    b2a0:	ldr	x0, [sp, #8]
    b2a4:	mov	x1, x24
    b2a8:	mov	x2, x20
    b2ac:	mov	x3, x21
    b2b0:	mov	x4, x22
    b2b4:	bl	33c0 <lzma_vli_decode@plt>
    b2b8:	cmp	w0, #0x1
    b2bc:	b.ne	b4e8 <lzma_index_hash_decode@@XZ_5.0+0x36c>  // b.any
    b2c0:	ldr	x8, [x19, #280]
    b2c4:	ldr	x9, [x19, #24]
    b2c8:	cmp	x8, x9
    b2cc:	b.ne	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.any
    b2d0:	cmp	x8, #0x0
    b2d4:	mov	w8, #0x2                   	// #2
    b2d8:	mov	w9, #0x4                   	// #4
    b2dc:	mov	w23, wzr
    b2e0:	str	xzr, [x19, #304]
    b2e4:	csel	w8, w9, w8, eq  // eq = none
    b2e8:	b	b20c <lzma_index_hash_decode@@XZ_5.0+0x90>
    b2ec:	ldp	x0, x1, [x19, #160]
    b2f0:	bl	b4f0 <lzma_index_hash_decode@@XZ_5.0+0x374>
    b2f4:	neg	w8, w0
    b2f8:	and	x8, x8, #0x3
    b2fc:	str	x8, [x19, #304]
    b300:	mov	w8, #0x5                   	// #5
    b304:	str	w8, [x19]
    b308:	ldr	x8, [x19, #304]
    b30c:	cbz	x8, b3d8 <lzma_index_hash_decode@@XZ_5.0+0x25c>
    b310:	sub	x8, x8, #0x1
    b314:	str	x8, [x19, #304]
    b318:	ldr	x8, [x21]
    b31c:	add	x9, x8, #0x1
    b320:	str	x9, [x21]
    b324:	ldrb	w8, [x20, x8]
    b328:	cbz	w8, b210 <lzma_index_hash_decode@@XZ_5.0+0x94>
    b32c:	b	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>
    b330:	mov	w23, w0
    b334:	mov	w8, #0x5                   	// #5
    b338:	cmp	w8, #0x4
    b33c:	b.eq	b210 <lzma_index_hash_decode@@XZ_5.0+0x94>  // b.none
    b340:	b	b4b0 <lzma_index_hash_decode@@XZ_5.0+0x334>
    b344:	ldr	x2, [x19, #296]
    b348:	ldr	x0, [sp]
    b34c:	bl	b0c0 <lzma_index_hash_append@@XZ_5.0+0xa4>
    b350:	ldr	x8, [x19, #8]
    b354:	ldr	x9, [x19, #144]
    b358:	cmp	x8, x9
    b35c:	b.cc	b380 <lzma_index_hash_decode@@XZ_5.0+0x204>  // b.lo, b.ul, b.last
    b360:	ldr	x8, [x19, #16]
    b364:	ldr	x9, [x19, #152]
    b368:	cmp	x8, x9
    b36c:	b.cc	b380 <lzma_index_hash_decode@@XZ_5.0+0x204>  // b.lo, b.ul, b.last
    b370:	ldr	x8, [x19, #32]
    b374:	ldr	x9, [x19, #168]
    b378:	cmp	x8, x9
    b37c:	b.cs	b394 <lzma_index_hash_decode@@XZ_5.0+0x218>  // b.hs, b.nlast
    b380:	mov	w23, wzr
    b384:	mov	w8, #0x1                   	// #1
    b388:	cmp	w8, #0x4
    b38c:	b.eq	b210 <lzma_index_hash_decode@@XZ_5.0+0x94>  // b.none
    b390:	b	b4b0 <lzma_index_hash_decode@@XZ_5.0+0x334>
    b394:	ldr	x8, [x19, #280]
    b398:	mov	w9, #0x4                   	// #4
    b39c:	subs	x8, x8, #0x1
    b3a0:	str	x8, [x19, #280]
    b3a4:	mov	w8, #0x2                   	// #2
    b3a8:	csel	w8, w9, w8, eq  // eq = none
    b3ac:	b	b288 <lzma_index_hash_decode@@XZ_5.0+0x10c>
    b3b0:	mov	w23, wzr
    b3b4:	ldr	x8, [x21]
    b3b8:	ldr	w2, [x19, #312]
    b3bc:	add	x0, x20, x27
    b3c0:	sub	x1, x8, x27
    b3c4:	bl	31c0 <lzma_crc32@plt>
    b3c8:	str	w0, [x19, #312]
    b3cc:	b	b4bc <lzma_index_hash_decode@@XZ_5.0+0x340>
    b3d0:	mov	w23, #0xb                   	// #11
    b3d4:	b	b4bc <lzma_index_hash_decode@@XZ_5.0+0x340>
    b3d8:	ldr	x8, [x19, #8]
    b3dc:	ldr	x9, [x19, #144]
    b3e0:	cmp	x8, x9
    b3e4:	b.ne	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.any
    b3e8:	ldr	x8, [x19, #16]
    b3ec:	ldr	x9, [x19, #152]
    b3f0:	cmp	x8, x9
    b3f4:	b.ne	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.any
    b3f8:	ldr	x8, [x19, #32]
    b3fc:	ldr	x9, [x19, #168]
    b400:	cmp	x8, x9
    b404:	b.ne	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.any
    b408:	add	x23, x19, #0x28
    b40c:	mov	w1, #0xa                   	// #10
    b410:	mov	x0, x23
    b414:	bl	c22c <lzma_check_size@@XZ_5.0+0xe0>
    b418:	add	x24, x19, #0xb0
    b41c:	mov	w1, #0xa                   	// #10
    b420:	mov	x0, x24
    b424:	bl	c22c <lzma_check_size@@XZ_5.0+0xe0>
    b428:	mov	w0, #0xa                   	// #10
    b42c:	bl	3270 <lzma_check_size@plt>
    b430:	mov	w2, w0
    b434:	mov	x0, x23
    b438:	mov	x1, x24
    b43c:	bl	3280 <bcmp@plt>
    b440:	cbnz	w0, b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>
    b444:	ldr	x8, [x21]
    b448:	ldr	w2, [x19, #312]
    b44c:	add	x0, x20, x27
    b450:	sub	x1, x8, x27
    b454:	bl	31c0 <lzma_crc32@plt>
    b458:	mov	w8, #0x6                   	// #6
    b45c:	str	w0, [x19, #312]
    b460:	str	w8, [x19]
    b464:	mov	w23, #0x1                   	// #1
    b468:	ldr	x8, [x21]
    b46c:	cmp	x8, x22
    b470:	b.eq	b4e0 <lzma_index_hash_decode@@XZ_5.0+0x364>  // b.none
    b474:	ldr	w10, [x19, #304]
    b478:	add	x11, x8, #0x1
    b47c:	ldr	w9, [x19, #312]
    b480:	str	x11, [x21]
    b484:	ldrb	w8, [x20, x8]
    b488:	lsl	w10, w10, #3
    b48c:	lsr	w9, w9, w10
    b490:	cmp	w8, w9, uxtb
    b494:	b.ne	b4b8 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.any
    b498:	ldr	x8, [x19, #304]
    b49c:	add	x8, x8, #0x1
    b4a0:	cmp	x8, #0x4
    b4a4:	str	x8, [x19, #304]
    b4a8:	b.cc	b468 <lzma_index_hash_decode@@XZ_5.0+0x2ec>  // b.lo, b.ul, b.last
    b4ac:	b	b4bc <lzma_index_hash_decode@@XZ_5.0+0x340>
    b4b0:	cmp	w8, #0x5
    b4b4:	b.eq	b3b4 <lzma_index_hash_decode@@XZ_5.0+0x238>  // b.none
    b4b8:	mov	w23, #0x9                   	// #9
    b4bc:	mov	w0, w23
    b4c0:	ldp	x20, x19, [sp, #96]
    b4c4:	ldp	x22, x21, [sp, #80]
    b4c8:	ldp	x24, x23, [sp, #64]
    b4cc:	ldp	x26, x25, [sp, #48]
    b4d0:	ldp	x28, x27, [sp, #32]
    b4d4:	ldp	x29, x30, [sp, #16]
    b4d8:	add	sp, sp, #0x70
    b4dc:	ret
    b4e0:	mov	w23, wzr
    b4e4:	b	b4bc <lzma_index_hash_decode@@XZ_5.0+0x340>
    b4e8:	mov	w23, w0
    b4ec:	b	b3b4 <lzma_index_hash_decode@@XZ_5.0+0x238>
    b4f0:	stp	x29, x30, [sp, #-32]!
    b4f4:	str	x19, [sp, #16]
    b4f8:	mov	x29, sp
    b4fc:	mov	x19, x1
    b500:	bl	3480 <lzma_vli_size@plt>
    b504:	add	w8, w0, #0x1
    b508:	add	x8, x19, x8
    b50c:	ldr	x19, [sp, #16]
    b510:	add	x0, x8, #0x4
    b514:	ldp	x29, x30, [sp], #32
    b518:	ret
    b51c:	add	x8, x0, #0x3
    b520:	and	x0, x8, #0xfffffffffffffffc
    b524:	ret

000000000000b528 <lzma_stream_buffer_decode@@XZ_5.0>:
    b528:	sub	sp, sp, #0xd0
    b52c:	stp	x29, x30, [sp, #112]
    b530:	stp	x28, x27, [sp, #128]
    b534:	stp	x26, x25, [sp, #144]
    b538:	stp	x24, x23, [sp, #160]
    b53c:	stp	x22, x21, [sp, #176]
    b540:	stp	x20, x19, [sp, #192]
    b544:	add	x29, sp, #0x70
    b548:	cbz	x4, b634 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>
    b54c:	mov	x23, x7
    b550:	mov	x24, x6
    b554:	mov	x20, x5
    b558:	mov	x21, x4
    b55c:	mov	x25, x3
    b560:	mov	x19, x2
    b564:	mov	w3, w1
    b568:	mov	x22, x0
    b56c:	cbnz	x25, b57c <lzma_stream_buffer_decode@@XZ_5.0+0x54>
    b570:	ldr	x8, [x21]
    b574:	cmp	x8, x20
    b578:	b.ne	b634 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    b57c:	mov	w26, #0xb                   	// #11
    b580:	cbz	x23, b638 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b584:	ldr	x8, [x21]
    b588:	cmp	x8, x20
    b58c:	b.hi	b638 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    b590:	ldr	x27, [x29, #96]
    b594:	cbnz	x24, b5a4 <lzma_stream_buffer_decode@@XZ_5.0+0x7c>
    b598:	ldr	x8, [x23]
    b59c:	cmp	x8, x27
    b5a0:	b.ne	b634 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    b5a4:	mov	w26, #0xb                   	// #11
    b5a8:	tbnz	w3, #2, b638 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b5ac:	ldr	x8, [x23]
    b5b0:	cmp	x8, x27
    b5b4:	b.hi	b638 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    b5b8:	movi	v0.2d, #0x0
    b5bc:	mov	x8, #0xffffffffffffffff    	// #-1
    b5c0:	str	xzr, [sp, #96]
    b5c4:	stp	q0, q0, [sp, #64]
    b5c8:	stp	q0, q0, [sp, #32]
    b5cc:	str	x8, [sp, #40]
    b5d0:	ldr	x2, [x22]
    b5d4:	add	x0, sp, #0x20
    b5d8:	mov	x1, x19
    b5dc:	bl	b6b4 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    b5e0:	mov	w26, w0
    b5e4:	cbnz	w0, b6a4 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b5e8:	ldr	x8, [x23]
    b5ec:	ldr	x0, [sp, #32]
    b5f0:	ldr	x28, [x21]
    b5f4:	mov	w9, #0x3                   	// #3
    b5f8:	str	x8, [sp, #16]
    b5fc:	ldr	x8, [sp, #56]
    b600:	mov	x1, x19
    b604:	mov	x2, x25
    b608:	mov	x3, x21
    b60c:	mov	x4, x20
    b610:	mov	x5, x24
    b614:	mov	x6, x23
    b618:	mov	x7, x27
    b61c:	str	w9, [sp]
    b620:	blr	x8
    b624:	cmp	w0, #0x1
    b628:	b.ne	b65c <lzma_stream_buffer_decode@@XZ_5.0+0x134>  // b.any
    b62c:	mov	w26, wzr
    b630:	b	b6a4 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b634:	mov	w26, #0xb                   	// #11
    b638:	mov	w0, w26
    b63c:	ldp	x20, x19, [sp, #192]
    b640:	ldp	x22, x21, [sp, #176]
    b644:	ldp	x24, x23, [sp, #160]
    b648:	ldp	x26, x25, [sp, #144]
    b64c:	ldp	x28, x27, [sp, #128]
    b650:	ldp	x29, x30, [sp, #112]
    b654:	add	sp, sp, #0xd0
    b658:	ret
    b65c:	ldr	x8, [sp, #16]
    b660:	mov	w26, w0
    b664:	cmp	w0, #0x6
    b668:	str	x28, [x21]
    b66c:	str	x8, [x23]
    b670:	b.eq	b68c <lzma_stream_buffer_decode@@XZ_5.0+0x164>  // b.none
    b674:	cbnz	w26, b6a4 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b678:	ldr	x8, [x21]
    b67c:	cmp	x8, x20
    b680:	mov	w8, #0x9                   	// #9
    b684:	cinc	w26, w8, ne  // ne = any
    b688:	b	b6a4 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b68c:	ldr	x8, [sp, #88]
    b690:	ldr	x0, [sp, #32]
    b694:	add	x2, sp, #0x18
    b698:	mov	x1, x22
    b69c:	mov	x3, xzr
    b6a0:	blr	x8
    b6a4:	add	x0, sp, #0x20
    b6a8:	mov	x1, x19
    b6ac:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    b6b0:	b	b638 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b6b4:	stp	x29, x30, [sp, #-64]!
    b6b8:	stp	x22, x21, [sp, #32]
    b6bc:	stp	x20, x19, [sp, #48]
    b6c0:	ldr	x8, [x0, #16]
    b6c4:	str	x23, [sp, #16]
    b6c8:	adrp	x23, b000 <lzma_index_hash_size@@XZ_5.0+0x18>
    b6cc:	add	x23, x23, #0x6b4
    b6d0:	mov	w20, w3
    b6d4:	mov	x21, x2
    b6d8:	mov	x22, x0
    b6dc:	cmp	x8, x23
    b6e0:	mov	x19, x1
    b6e4:	mov	x29, sp
    b6e8:	b.eq	b6f8 <lzma_stream_buffer_decode@@XZ_5.0+0x1d0>  // b.none
    b6ec:	mov	x0, x22
    b6f0:	mov	x1, x19
    b6f4:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    b6f8:	cmp	w20, #0x1f
    b6fc:	str	x23, [x22, #16]
    b700:	b.ls	b70c <lzma_stream_buffer_decode@@XZ_5.0+0x1e4>  // b.plast
    b704:	mov	w0, #0x8                   	// #8
    b708:	b	b7bc <lzma_stream_buffer_decode@@XZ_5.0+0x294>
    b70c:	ldr	x0, [x22]
    b710:	cbnz	x0, b770 <lzma_stream_buffer_decode@@XZ_5.0+0x248>
    b714:	mov	w0, #0x580                 	// #1408
    b718:	mov	x1, x19
    b71c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    b720:	cbz	x0, b7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x2a8>
    b724:	adrp	x8, b000 <lzma_index_hash_size@@XZ_5.0+0x18>
    b728:	adrp	x9, b000 <lzma_index_hash_size@@XZ_5.0+0x18>
    b72c:	add	x8, x8, #0x7d8
    b730:	add	x9, x9, #0xce8
    b734:	adrp	x10, b000 <lzma_index_hash_size@@XZ_5.0+0x18>
    b738:	stp	x8, x9, [x22, #24]
    b73c:	adrp	x8, b000 <lzma_index_hash_size@@XZ_5.0+0x18>
    b740:	add	x10, x10, #0xd28
    b744:	add	x8, x8, #0xd30
    b748:	stp	x10, x8, [x22, #48]
    b74c:	mov	x8, #0xffffffffffffffff    	// #-1
    b750:	movi	v0.2d, #0x0
    b754:	str	x0, [x22]
    b758:	stp	xzr, x8, [x0, #8]
    b75c:	str	xzr, [x0, #344]
    b760:	stur	q0, [x0, #24]
    b764:	stur	q0, [x0, #40]
    b768:	stur	q0, [x0, #56]
    b76c:	str	xzr, [x0, #72]
    b770:	cmp	x21, #0x0
    b774:	and	w8, w20, #0x1
    b778:	strb	w8, [x0, #368]
    b77c:	mov	w8, #0x8000                	// #32768
    b780:	and	w9, w20, #0xff
    b784:	csinc	x10, x21, xzr, ne  // ne = any
    b788:	stp	x10, x8, [x0, #352]
    b78c:	ubfx	w8, w9, #1, #1
    b790:	strb	w8, [x0, #369]
    b794:	ubfx	w8, w9, #2, #1
    b798:	strb	w8, [x0, #370]
    b79c:	ubfx	w8, w9, #4, #1
    b7a0:	strb	w8, [x0, #371]
    b7a4:	mov	w8, #0x1                   	// #1
    b7a8:	ubfx	w9, w9, #3, #1
    b7ac:	mov	x1, x19
    b7b0:	strb	w9, [x0, #372]
    b7b4:	strb	w8, [x0, #373]
    b7b8:	bl	bd70 <lzma_stream_buffer_decode@@XZ_5.0+0x848>
    b7bc:	ldp	x20, x19, [sp, #48]
    b7c0:	ldp	x22, x21, [sp, #32]
    b7c4:	ldr	x23, [sp, #16]
    b7c8:	ldp	x29, x30, [sp], #64
    b7cc:	ret
    b7d0:	mov	w0, #0x5                   	// #5
    b7d4:	b	b7bc <lzma_stream_buffer_decode@@XZ_5.0+0x294>
    b7d8:	sub	sp, sp, #0x110
    b7dc:	stp	x29, x30, [sp, #176]
    b7e0:	add	x29, sp, #0xb0
    b7e4:	ldr	w8, [x29, #96]
    b7e8:	stp	x28, x27, [sp, #192]
    b7ec:	stp	x26, x25, [sp, #208]
    b7f0:	stp	x24, x23, [sp, #224]
    b7f4:	str	w8, [sp, #68]
    b7f8:	add	x8, x0, #0x178
    b7fc:	str	x8, [sp, #80]
    b800:	add	x8, x0, #0x120
    b804:	str	x8, [sp, #40]
    b808:	add	x8, x0, #0x50
    b80c:	str	x8, [sp, #56]
    b810:	add	x8, x0, #0x8
    b814:	str	x8, [sp, #24]
    b818:	add	x8, sp, #0x58
    b81c:	stp	x22, x21, [sp, #240]
    b820:	stp	x20, x19, [sp, #256]
    b824:	mov	x22, x6
    b828:	mov	x27, x5
    b82c:	mov	x24, x4
    b830:	mov	x21, x3
    b834:	mov	x25, x2
    b838:	mov	x26, x1
    b83c:	mov	x23, x0
    b840:	add	x19, x0, #0x180
    b844:	add	x28, x8, #0x8
    b848:	str	x7, [sp, #48]
    b84c:	str	x28, [sp, #72]
    b850:	ldr	w8, [x23]
    b854:	cmp	w8, #0x5
    b858:	b.hi	bcd0 <lzma_stream_buffer_decode@@XZ_5.0+0x7a8>  // b.pmore
    b85c:	adrp	x11, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    b860:	add	x11, x11, #0xcd4
    b864:	adr	x9, b874 <lzma_stream_buffer_decode@@XZ_5.0+0x34c>
    b868:	ldrb	w10, [x11, x8]
    b86c:	add	x9, x9, x10, lsl #2
    b870:	br	x9
    b874:	ldr	x28, [sp, #80]
    b878:	mov	w5, #0xc                   	// #12
    b87c:	mov	x0, x25
    b880:	mov	x1, x21
    b884:	mov	x2, x24
    b888:	mov	x3, x19
    b88c:	mov	x4, x28
    b890:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    b894:	ldr	x8, [x28]
    b898:	cmp	x8, #0xc
    b89c:	b.cc	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.lo, b.ul, b.last
    b8a0:	ldr	x0, [sp, #40]
    b8a4:	mov	x1, x19
    b8a8:	str	xzr, [x28]
    b8ac:	bl	34f0 <lzma_stream_header_decode@plt>
    b8b0:	cbz	w0, ba30 <lzma_stream_buffer_decode@@XZ_5.0+0x508>
    b8b4:	ldr	x28, [sp, #72]
    b8b8:	cmp	w0, #0x7
    b8bc:	b.ne	b8c8 <lzma_stream_buffer_decode@@XZ_5.0+0x3a0>  // b.any
    b8c0:	ldrb	w8, [x23, #373]
    b8c4:	cbz	w8, ba94 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    b8c8:	mov	w8, wzr
    b8cc:	mov	w20, w0
    b8d0:	cbnz	w8, babc <lzma_stream_buffer_decode@@XZ_5.0+0x594>
    b8d4:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    b8d8:	ldr	x8, [x21]
    b8dc:	cmp	x8, x24
    b8e0:	b.cs	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.hs, b.nlast
    b8e4:	ldr	x0, [x23, #344]
    b8e8:	mov	x1, x25
    b8ec:	mov	x2, x21
    b8f0:	mov	x3, x24
    b8f4:	bl	3130 <lzma_index_hash_decode@plt>
    b8f8:	cmp	w0, #0x1
    b8fc:	b.ne	b910 <lzma_stream_buffer_decode@@XZ_5.0+0x3e8>  // b.any
    b900:	mov	w8, #0x4                   	// #4
    b904:	str	w8, [x23]
    b908:	mov	w8, #0x1                   	// #1
    b90c:	b	b918 <lzma_stream_buffer_decode@@XZ_5.0+0x3f0>
    b910:	mov	w8, wzr
    b914:	mov	w20, w0
    b918:	cbz	w8, bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    b91c:	ldr	x28, [sp, #80]
    b920:	mov	w5, #0xc                   	// #12
    b924:	mov	x0, x25
    b928:	mov	x1, x21
    b92c:	mov	x2, x24
    b930:	mov	x3, x19
    b934:	mov	x4, x28
    b938:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    b93c:	ldr	x8, [x28]
    b940:	cmp	x8, #0xc
    b944:	b.cc	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.lo, b.ul, b.last
    b948:	add	x0, sp, #0x58
    b94c:	mov	x1, x19
    b950:	str	xzr, [x28]
    b954:	bl	3430 <lzma_stream_footer_decode@plt>
    b958:	cbz	w0, b978 <lzma_stream_buffer_decode@@XZ_5.0+0x450>
    b95c:	ldr	x28, [sp, #72]
    b960:	cmp	w0, #0x7
    b964:	mov	w8, #0x9                   	// #9
    b968:	csel	w20, w8, w0, eq  // eq = none
    b96c:	mov	w8, #0x1                   	// #1
    b970:	cbz	w8, b9d4 <lzma_stream_buffer_decode@@XZ_5.0+0x4ac>
    b974:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    b978:	ldr	x0, [x23, #344]
    b97c:	bl	34d0 <lzma_index_hash_size@plt>
    b980:	ldr	x8, [sp, #96]
    b984:	ldr	x28, [sp, #72]
    b988:	cmp	x0, x8
    b98c:	b.ne	b9c8 <lzma_stream_buffer_decode@@XZ_5.0+0x4a0>  // b.any
    b990:	ldr	x0, [sp, #40]
    b994:	add	x1, sp, #0x58
    b998:	bl	3110 <lzma_stream_flags_compare@plt>
    b99c:	cmp	w0, #0x0
    b9a0:	cset	w8, ne  // ne = any
    b9a4:	csel	w20, w20, w0, eq  // eq = none
    b9a8:	cbnz	w0, b9d0 <lzma_stream_buffer_decode@@XZ_5.0+0x4a8>
    b9ac:	ldrb	w8, [x23, #372]
    b9b0:	cbz	w8, baa0 <lzma_stream_buffer_decode@@XZ_5.0+0x578>
    b9b4:	mov	w8, wzr
    b9b8:	mov	w9, #0x5                   	// #5
    b9bc:	str	w9, [x23]
    b9c0:	cbz	w8, b9d4 <lzma_stream_buffer_decode@@XZ_5.0+0x4ac>
    b9c4:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    b9c8:	mov	w20, #0x9                   	// #9
    b9cc:	mov	w8, #0x1                   	// #1
    b9d0:	cbnz	w8, bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    b9d4:	ldr	x8, [x21]
    b9d8:	cmp	x8, x24
    b9dc:	b.cs	bc88 <lzma_stream_buffer_decode@@XZ_5.0+0x760>  // b.hs, b.nlast
    b9e0:	ldrb	w9, [x25, x8]
    b9e4:	cbnz	w9, ba0c <lzma_stream_buffer_decode@@XZ_5.0+0x4e4>
    b9e8:	add	x8, x8, #0x1
    b9ec:	str	x8, [x21]
    b9f0:	ldr	w9, [x23, #376]
    b9f4:	cmp	x24, x8
    b9f8:	add	w9, w9, #0x1
    b9fc:	and	x9, x9, #0x3
    ba00:	str	x9, [x23, #376]
    ba04:	b.ne	b9e0 <lzma_stream_buffer_decode@@XZ_5.0+0x4b8>  // b.any
    ba08:	b	bc88 <lzma_stream_buffer_decode@@XZ_5.0+0x760>
    ba0c:	ldr	x9, [x23, #376]
    ba10:	cbnz	x9, bcd8 <lzma_stream_buffer_decode@@XZ_5.0+0x7b0>
    ba14:	mov	x0, x23
    ba18:	mov	x1, x26
    ba1c:	bl	bd70 <lzma_stream_buffer_decode@@XZ_5.0+0x848>
    ba20:	cmp	w0, #0x0
    ba24:	csel	w20, w20, w0, eq  // eq = none
    ba28:	cbz	w0, b850 <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    ba2c:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    ba30:	ldr	w0, [x23, #304]
    ba34:	ldr	x28, [sp, #72]
    ba38:	mov	w8, #0x1                   	// #1
    ba3c:	strb	wzr, [x23, #373]
    ba40:	str	w0, [x23, #88]
    ba44:	str	w8, [x23]
    ba48:	cbnz	w0, ba64 <lzma_stream_buffer_decode@@XZ_5.0+0x53c>
    ba4c:	ldrb	w8, [x23, #368]
    ba50:	cbz	w8, ba64 <lzma_stream_buffer_decode@@XZ_5.0+0x53c>
    ba54:	mov	w8, wzr
    ba58:	mov	w20, #0x2                   	// #2
    ba5c:	cbnz	w8, babc <lzma_stream_buffer_decode@@XZ_5.0+0x594>
    ba60:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    ba64:	ldrb	w8, [x23, #369]
    ba68:	cbz	w8, ba78 <lzma_stream_buffer_decode@@XZ_5.0+0x550>
    ba6c:	bl	30e0 <lzma_check_is_supported@plt>
    ba70:	tst	w0, #0xff
    ba74:	b.eq	bab0 <lzma_stream_buffer_decode@@XZ_5.0+0x588>  // b.none
    ba78:	ldrb	w8, [x23, #370]
    ba7c:	mov	w9, #0x4                   	// #4
    ba80:	cmp	w8, #0x0
    ba84:	cset	w8, eq  // eq = none
    ba88:	csel	w20, w20, w9, eq  // eq = none
    ba8c:	cbnz	w8, babc <lzma_stream_buffer_decode@@XZ_5.0+0x594>
    ba90:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    ba94:	mov	w20, #0x9                   	// #9
    ba98:	cbnz	w8, babc <lzma_stream_buffer_decode@@XZ_5.0+0x594>
    ba9c:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    baa0:	mov	w8, #0x1                   	// #1
    baa4:	mov	w20, #0x1                   	// #1
    baa8:	cbz	w8, b9d4 <lzma_stream_buffer_decode@@XZ_5.0+0x4ac>
    baac:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bab0:	mov	w8, wzr
    bab4:	mov	w20, #0x3                   	// #3
    bab8:	cbz	w8, bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    babc:	ldr	x8, [x21]
    bac0:	cmp	x8, x24
    bac4:	b.cs	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.hs, b.nlast
    bac8:	ldr	x4, [sp, #80]
    bacc:	ldr	x9, [x4]
    bad0:	cbnz	x9, bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x5c0>
    bad4:	ldrb	w8, [x25, x8]
    bad8:	cbz	w8, bb78 <lzma_stream_buffer_decode@@XZ_5.0+0x650>
    badc:	lsl	w8, w8, #2
    bae0:	add	w8, w8, #0x4
    bae4:	str	w8, [x23, #84]
    bae8:	ldr	w5, [x23, #84]
    baec:	mov	x0, x25
    baf0:	mov	x1, x21
    baf4:	mov	x2, x24
    baf8:	mov	x3, x19
    bafc:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    bb00:	ldr	x8, [x23, #376]
    bb04:	ldr	w9, [x23, #84]
    bb08:	cmp	x8, x9
    bb0c:	b.cc	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.lo, b.ul, b.last
    bb10:	ldr	x0, [sp, #56]
    bb14:	mov	w8, #0x1                   	// #1
    bb18:	str	w8, [x23, #80]
    bb1c:	add	x8, sp, #0x58
    bb20:	mov	x1, x26
    bb24:	mov	x2, x19
    bb28:	str	xzr, [x23, #376]
    bb2c:	str	x8, [x23, #112]
    bb30:	bl	3340 <lzma_block_header_decode@plt>
    bb34:	cmp	w0, #0x0
    bb38:	cset	w8, ne  // ne = any
    bb3c:	csel	w20, w20, w0, eq  // eq = none
    bb40:	cbnz	w0, bbe0 <lzma_stream_buffer_decode@@XZ_5.0+0x6b8>
    bb44:	ldrb	w8, [x23, #371]
    bb48:	add	x0, sp, #0x58
    bb4c:	strb	w8, [x23, #280]
    bb50:	bl	32f0 <lzma_raw_decoder_memusage@plt>
    bb54:	cmn	x0, #0x1
    bb58:	stp	x27, x22, [sp, #8]
    bb5c:	b.eq	bb84 <lzma_stream_buffer_decode@@XZ_5.0+0x65c>  // b.none
    bb60:	ldr	x8, [x23, #352]
    bb64:	str	x0, [x23, #360]
    bb68:	cmp	x0, x8
    bb6c:	b.ls	bb8c <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.plast
    bb70:	mov	w22, #0x6                   	// #6
    bb74:	b	bba0 <lzma_stream_buffer_decode@@XZ_5.0+0x678>
    bb78:	mov	w8, #0x3                   	// #3
    bb7c:	str	w8, [x23]
    bb80:	b	b850 <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    bb84:	mov	w22, #0x8                   	// #8
    bb88:	b	bba0 <lzma_stream_buffer_decode@@XZ_5.0+0x678>
    bb8c:	ldr	x0, [sp, #24]
    bb90:	ldr	x2, [sp, #56]
    bb94:	mov	x1, x26
    bb98:	bl	9e08 <lzma_block_buffer_decode@@XZ_5.0+0x150>
    bb9c:	mov	w22, w0
    bba0:	mov	x27, xzr
    bba4:	ldr	x0, [x28, x27]
    bba8:	mov	x1, x26
    bbac:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    bbb0:	add	x27, x27, #0x10
    bbb4:	cmp	x27, #0x40
    bbb8:	b.ne	bba4 <lzma_stream_buffer_decode@@XZ_5.0+0x67c>  // b.any
    bbbc:	str	xzr, [x23, #112]
    bbc0:	cbz	w22, bbd0 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    bbc4:	mov	w8, #0x1                   	// #1
    bbc8:	mov	w20, w22
    bbcc:	b	bbdc <lzma_stream_buffer_decode@@XZ_5.0+0x6b4>
    bbd0:	mov	w8, wzr
    bbd4:	mov	w9, #0x2                   	// #2
    bbd8:	str	w9, [x23]
    bbdc:	ldp	x27, x22, [sp, #8]
    bbe0:	cbnz	w8, bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bbe4:	ldr	x8, [x23, #32]
    bbe8:	ldr	x0, [x23, #8]
    bbec:	ldr	w9, [sp, #68]
    bbf0:	ldr	x7, [sp, #48]
    bbf4:	mov	x1, x26
    bbf8:	mov	x2, x25
    bbfc:	mov	x3, x21
    bc00:	mov	x4, x24
    bc04:	mov	x5, x27
    bc08:	mov	x6, x22
    bc0c:	str	w9, [sp]
    bc10:	blr	x8
    bc14:	cmp	w0, #0x1
    bc18:	b.ne	bc74 <lzma_stream_buffer_decode@@XZ_5.0+0x74c>  // b.any
    bc1c:	ldr	x0, [sp, #56]
    bc20:	mov	x28, x27
    bc24:	mov	x27, x22
    bc28:	ldr	x22, [x23, #344]
    bc2c:	str	x19, [sp, #32]
    bc30:	bl	3190 <lzma_block_unpadded_size@plt>
    bc34:	ldr	x2, [x23, #104]
    bc38:	mov	x1, x0
    bc3c:	mov	x0, x22
    bc40:	bl	31b0 <lzma_index_hash_append@plt>
    bc44:	cmp	w0, #0x0
    bc48:	cset	w8, ne  // ne = any
    bc4c:	csel	w20, w20, w0, eq  // eq = none
    bc50:	cbnz	w0, bc60 <lzma_stream_buffer_decode@@XZ_5.0+0x738>
    bc54:	mov	w8, #0x1                   	// #1
    bc58:	str	w8, [x23]
    bc5c:	mov	w8, #0x4                   	// #4
    bc60:	mov	x22, x27
    bc64:	mov	x27, x28
    bc68:	ldr	x19, [sp, #32]
    bc6c:	ldr	x28, [sp, #72]
    bc70:	b	bc7c <lzma_stream_buffer_decode@@XZ_5.0+0x754>
    bc74:	mov	w8, #0x1                   	// #1
    bc78:	mov	w20, w0
    bc7c:	cmp	w8, #0x4
    bc80:	b.eq	b850 <lzma_stream_buffer_decode@@XZ_5.0+0x328>  // b.none
    bc84:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bc88:	ldr	w8, [sp, #68]
    bc8c:	cmp	w8, #0x3
    bc90:	b.ne	bca8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>  // b.any
    bc94:	ldr	x8, [x23, #376]
    bc98:	cmp	x8, #0x0
    bc9c:	mov	w8, #0x9                   	// #9
    bca0:	csinc	w20, w8, wzr, ne  // ne = any
    bca4:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bca8:	mov	w20, wzr
    bcac:	mov	w0, w20
    bcb0:	ldp	x20, x19, [sp, #256]
    bcb4:	ldp	x22, x21, [sp, #240]
    bcb8:	ldp	x24, x23, [sp, #224]
    bcbc:	ldp	x26, x25, [sp, #208]
    bcc0:	ldp	x28, x27, [sp, #192]
    bcc4:	ldp	x29, x30, [sp, #176]
    bcc8:	add	sp, sp, #0x110
    bccc:	ret
    bcd0:	mov	w20, #0xb                   	// #11
    bcd4:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bcd8:	add	x8, x8, #0x1
    bcdc:	str	x8, [x21]
    bce0:	mov	w20, #0x9                   	// #9
    bce4:	b	bcac <lzma_stream_buffer_decode@@XZ_5.0+0x784>
    bce8:	stp	x29, x30, [sp, #-32]!
    bcec:	stp	x20, x19, [sp, #16]
    bcf0:	mov	x20, x0
    bcf4:	add	x0, x0, #0x8
    bcf8:	mov	x29, sp
    bcfc:	mov	x19, x1
    bd00:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    bd04:	ldr	x0, [x20, #344]
    bd08:	mov	x1, x19
    bd0c:	bl	3320 <lzma_index_hash_end@plt>
    bd10:	mov	x0, x20
    bd14:	mov	x1, x19
    bd18:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    bd1c:	ldp	x20, x19, [sp, #16]
    bd20:	ldp	x29, x30, [sp], #32
    bd24:	ret
    bd28:	ldr	w0, [x0, #304]
    bd2c:	ret
    bd30:	ldr	x9, [x0, #360]
    bd34:	str	x9, [x1]
    bd38:	ldr	x9, [x0, #352]
    bd3c:	str	x9, [x2]
    bd40:	cbz	x3, bd5c <lzma_stream_buffer_decode@@XZ_5.0+0x834>
    bd44:	ldr	x9, [x0, #360]
    bd48:	mov	x8, x0
    bd4c:	cmp	x9, x3
    bd50:	b.ls	bd64 <lzma_stream_buffer_decode@@XZ_5.0+0x83c>  // b.plast
    bd54:	mov	w0, #0x6                   	// #6
    bd58:	ret
    bd5c:	mov	w0, wzr
    bd60:	ret
    bd64:	mov	w0, wzr
    bd68:	str	x3, [x8, #352]
    bd6c:	ret
    bd70:	stp	x29, x30, [sp, #-32]!
    bd74:	str	x19, [sp, #16]
    bd78:	mov	x19, x0
    bd7c:	ldr	x0, [x0, #344]
    bd80:	mov	x29, sp
    bd84:	bl	3290 <lzma_index_hash_init@plt>
    bd88:	str	x0, [x19, #344]
    bd8c:	cbz	x0, bda0 <lzma_stream_buffer_decode@@XZ_5.0+0x878>
    bd90:	mov	w0, wzr
    bd94:	str	wzr, [x19]
    bd98:	str	xzr, [x19, #376]
    bd9c:	b	bda4 <lzma_stream_buffer_decode@@XZ_5.0+0x87c>
    bda0:	mov	w0, #0x5                   	// #5
    bda4:	ldr	x19, [sp, #16]
    bda8:	ldp	x29, x30, [sp], #32
    bdac:	ret

000000000000bdb0 <lzma_stream_decoder@@XZ_5.0>:
    bdb0:	stp	x29, x30, [sp, #-48]!
    bdb4:	stp	x22, x21, [sp, #16]
    bdb8:	stp	x20, x19, [sp, #32]
    bdbc:	mov	x29, sp
    bdc0:	mov	w21, w2
    bdc4:	mov	x22, x1
    bdc8:	mov	x19, x0
    bdcc:	bl	3958 <lzma_version_string@@XZ_5.0+0x288>
    bdd0:	mov	w20, w0
    bdd4:	cbnz	w0, be18 <lzma_stream_decoder@@XZ_5.0+0x68>
    bdd8:	ldp	x1, x0, [x19, #48]
    bddc:	mov	x2, x22
    bde0:	mov	w3, w21
    bde4:	bl	b6b4 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    bde8:	cbz	w0, be2c <lzma_stream_decoder@@XZ_5.0+0x7c>
    bdec:	mov	w21, w0
    bdf0:	mov	x0, x19
    bdf4:	bl	3330 <lzma_end@plt>
    bdf8:	mov	w8, wzr
    bdfc:	mov	w20, w21
    be00:	cbz	w8, be18 <lzma_stream_decoder@@XZ_5.0+0x68>
    be04:	ldr	x8, [x19, #56]
    be08:	mov	w20, wzr
    be0c:	mov	w9, #0x1                   	// #1
    be10:	strb	w9, [x8, #88]
    be14:	strb	w9, [x8, #91]
    be18:	mov	w0, w20
    be1c:	ldp	x20, x19, [sp, #32]
    be20:	ldp	x22, x21, [sp, #16]
    be24:	ldp	x29, x30, [sp], #48
    be28:	ret
    be2c:	mov	w8, #0x1                   	// #1
    be30:	cbnz	w8, be04 <lzma_stream_decoder@@XZ_5.0+0x54>
    be34:	b	be18 <lzma_stream_decoder@@XZ_5.0+0x68>

000000000000be38 <lzma_stream_header_decode@@XZ_5.0>:
    be38:	stp	x29, x30, [sp, #-48]!
    be3c:	stp	x22, x21, [sp, #16]
    be40:	stp	x20, x19, [sp, #32]
    be44:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    be48:	ldr	w8, [x1]
    be4c:	ldr	x9, [x9, #3936]
    be50:	ldrh	w10, [x1, #4]
    be54:	mov	x29, sp
    be58:	ldr	w11, [x9]
    be5c:	ldrh	w9, [x9, #4]
    be60:	eor	w8, w8, w11
    be64:	eor	w9, w10, w9
    be68:	orr	w8, w8, w9
    be6c:	cbz	w8, be78 <lzma_stream_header_decode@@XZ_5.0+0x40>
    be70:	mov	w0, #0x7                   	// #7
    be74:	b	bed4 <lzma_stream_header_decode@@XZ_5.0+0x9c>
    be78:	add	x21, x1, #0x6
    be7c:	mov	x20, x1
    be80:	mov	x19, x0
    be84:	mov	w1, #0x2                   	// #2
    be88:	mov	x0, x21
    be8c:	mov	w2, wzr
    be90:	bl	31c0 <lzma_crc32@plt>
    be94:	mov	w22, w0
    be98:	add	x0, x20, #0x8
    be9c:	bl	bee4 <lzma_stream_header_decode@@XZ_5.0+0xac>
    bea0:	cmp	w22, w0
    bea4:	b.ne	bec0 <lzma_stream_header_decode@@XZ_5.0+0x88>  // b.any
    bea8:	mov	x0, x19
    beac:	mov	x1, x21
    beb0:	bl	beec <lzma_stream_header_decode@@XZ_5.0+0xb4>
    beb4:	tbz	w0, #0, bec8 <lzma_stream_header_decode@@XZ_5.0+0x90>
    beb8:	mov	w0, #0x8                   	// #8
    bebc:	b	bed4 <lzma_stream_header_decode@@XZ_5.0+0x9c>
    bec0:	mov	w0, #0x9                   	// #9
    bec4:	b	bed4 <lzma_stream_header_decode@@XZ_5.0+0x9c>
    bec8:	mov	w0, wzr
    becc:	mov	x8, #0xffffffffffffffff    	// #-1
    bed0:	str	x8, [x19, #8]
    bed4:	ldp	x20, x19, [sp, #32]
    bed8:	ldp	x22, x21, [sp, #16]
    bedc:	ldp	x29, x30, [sp], #48
    bee0:	ret
    bee4:	ldr	w0, [x0]
    bee8:	ret
    beec:	ldrb	w9, [x1]
    bef0:	cbz	w9, befc <lzma_stream_header_decode@@XZ_5.0+0xc4>
    bef4:	mov	w0, #0x1                   	// #1
    bef8:	ret
    befc:	ldrb	w9, [x1, #1]
    bf00:	cmp	w9, #0xf
    bf04:	b.ls	bf10 <lzma_stream_header_decode@@XZ_5.0+0xd8>  // b.plast
    bf08:	mov	w0, #0x1                   	// #1
    bf0c:	ret
    bf10:	mov	x8, x0
    bf14:	str	wzr, [x8]
    bf18:	ldrb	w9, [x1, #1]
    bf1c:	mov	w0, wzr
    bf20:	and	w9, w9, #0xf
    bf24:	str	w9, [x8, #16]
    bf28:	ret

000000000000bf2c <lzma_stream_footer_decode@@XZ_5.0>:
    bf2c:	stp	x29, x30, [sp, #-48]!
    bf30:	stp	x22, x21, [sp, #16]
    bf34:	stp	x20, x19, [sp, #32]
    bf38:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    bf3c:	ldrh	w8, [x1, #10]
    bf40:	ldr	x9, [x9, #3976]
    bf44:	mov	x29, sp
    bf48:	ldrh	w9, [x9]
    bf4c:	cmp	w8, w9
    bf50:	b.eq	bf5c <lzma_stream_footer_decode@@XZ_5.0+0x30>  // b.none
    bf54:	mov	w0, #0x7                   	// #7
    bf58:	b	bfcc <lzma_stream_footer_decode@@XZ_5.0+0xa0>
    bf5c:	add	x20, x1, #0x4
    bf60:	mov	x21, x1
    bf64:	mov	x19, x0
    bf68:	mov	w1, #0x6                   	// #6
    bf6c:	mov	x0, x20
    bf70:	mov	w2, wzr
    bf74:	bl	31c0 <lzma_crc32@plt>
    bf78:	mov	w22, w0
    bf7c:	mov	x0, x21
    bf80:	bl	bee4 <lzma_stream_header_decode@@XZ_5.0+0xac>
    bf84:	cmp	w22, w0
    bf88:	b.ne	bfa4 <lzma_stream_footer_decode@@XZ_5.0+0x78>  // b.any
    bf8c:	add	x1, x21, #0x8
    bf90:	mov	x0, x19
    bf94:	bl	beec <lzma_stream_header_decode@@XZ_5.0+0xb4>
    bf98:	tbz	w0, #0, bfac <lzma_stream_footer_decode@@XZ_5.0+0x80>
    bf9c:	mov	w0, #0x8                   	// #8
    bfa0:	b	bfcc <lzma_stream_footer_decode@@XZ_5.0+0xa0>
    bfa4:	mov	w0, #0x9                   	// #9
    bfa8:	b	bfcc <lzma_stream_footer_decode@@XZ_5.0+0xa0>
    bfac:	mov	x0, x20
    bfb0:	bl	bee4 <lzma_stream_header_decode@@XZ_5.0+0xac>
    bfb4:	mov	w8, w0
    bfb8:	mov	w8, w8
    bfbc:	lsl	x8, x8, #2
    bfc0:	mov	w0, wzr
    bfc4:	add	x8, x8, #0x4
    bfc8:	str	x8, [x19, #8]
    bfcc:	ldp	x20, x19, [sp, #32]
    bfd0:	ldp	x22, x21, [sp, #16]
    bfd4:	ldp	x29, x30, [sp], #48
    bfd8:	ret

000000000000bfdc <lzma_vli_decode@@XZ_5.0>:
    bfdc:	sub	sp, sp, #0x10
    bfe0:	str	xzr, [sp, #8]
    bfe4:	cbz	x1, bffc <lzma_vli_decode@@XZ_5.0+0x20>
    bfe8:	ldr	x8, [x1]
    bfec:	cbz	x8, c014 <lzma_vli_decode@@XZ_5.0+0x38>
    bff0:	cmp	x8, #0x8
    bff4:	b.ls	c020 <lzma_vli_decode@@XZ_5.0+0x44>  // b.plast
    bff8:	b	c034 <lzma_vli_decode@@XZ_5.0+0x58>
    bffc:	ldr	x8, [x3]
    c000:	str	xzr, [x0]
    c004:	cmp	x8, x4
    c008:	b.cs	c03c <lzma_vli_decode@@XZ_5.0+0x60>  // b.hs, b.nlast
    c00c:	add	x1, sp, #0x8
    c010:	b	c050 <lzma_vli_decode@@XZ_5.0+0x74>
    c014:	str	xzr, [x0]
    c018:	cmp	x8, #0x8
    c01c:	b.hi	c034 <lzma_vli_decode@@XZ_5.0+0x58>  // b.pmore
    c020:	ldr	x9, [x0]
    c024:	lsl	x10, x8, #3
    c028:	sub	x8, x10, x8
    c02c:	lsr	x8, x9, x8
    c030:	cbz	x8, c044 <lzma_vli_decode@@XZ_5.0+0x68>
    c034:	mov	w8, #0xb                   	// #11
    c038:	b	c120 <lzma_vli_decode@@XZ_5.0+0x144>
    c03c:	mov	w8, #0x9                   	// #9
    c040:	b	c120 <lzma_vli_decode@@XZ_5.0+0x144>
    c044:	ldr	x8, [x3]
    c048:	cmp	x8, x4
    c04c:	b.cs	c11c <lzma_vli_decode@@XZ_5.0+0x140>  // b.hs, b.nlast
    c050:	ldr	x11, [x1]
    c054:	ldr	x12, [x3]
    c058:	ldr	x10, [x0]
    c05c:	add	x8, sp, #0x8
    c060:	cmp	x1, x8
    c064:	lsl	x8, x11, #3
    c068:	mov	x9, xzr
    c06c:	cset	w13, ne  // ne = any
    c070:	add	x14, x2, x12
    c074:	sub	x15, x8, x11
    c078:	mov	w16, #0x9                   	// #9
    c07c:	b	c0a8 <lzma_vli_decode@@XZ_5.0+0xcc>
    c080:	cmp	x5, #0x8
    c084:	cset	w18, ne  // ne = any
    c088:	csel	w8, w16, w8, eq  // eq = none
    c08c:	add	x10, x17, x10
    c090:	cbz	w18, c0d8 <lzma_vli_decode@@XZ_5.0+0xfc>
    c094:	add	x9, x9, #0x1
    c098:	add	x17, x12, x9
    c09c:	cmp	x17, x4
    c0a0:	add	x15, x15, #0x7
    c0a4:	b.cs	c0f8 <lzma_vli_decode@@XZ_5.0+0x11c>  // b.hs, b.nlast
    c0a8:	ldrb	w2, [x14, x9]
    c0ac:	add	x5, x11, x9
    c0b0:	and	x17, x2, #0x7f
    c0b4:	lsl	x17, x17, x15
    c0b8:	tbnz	w2, #7, c080 <lzma_vli_decode@@XZ_5.0+0xa4>
    c0bc:	add	x8, x5, #0x1
    c0c0:	cmp	x8, #0x1
    c0c4:	ccmp	w2, #0x0, #0x0, hi  // hi = pmore
    c0c8:	mov	w18, wzr
    c0cc:	csel	w8, w16, w13, eq  // eq = none
    c0d0:	add	x10, x17, x10
    c0d4:	cbnz	w18, c094 <lzma_vli_decode@@XZ_5.0+0xb8>
    c0d8:	add	x12, x12, x9
    c0dc:	add	x9, x11, x9
    c0e0:	add	x11, x12, #0x1
    c0e4:	add	x9, x9, #0x1
    c0e8:	str	x11, [x3]
    c0ec:	str	x9, [x1]
    c0f0:	str	x10, [x0]
    c0f4:	b	c120 <lzma_vli_decode@@XZ_5.0+0x144>
    c0f8:	add	x8, x11, x9
    c0fc:	add	x9, sp, #0x8
    c100:	str	x17, [x3]
    c104:	str	x8, [x1]
    c108:	cmp	x1, x9
    c10c:	mov	w8, #0x9                   	// #9
    c110:	str	x10, [x0]
    c114:	csel	w8, w8, wzr, eq  // eq = none
    c118:	b	c120 <lzma_vli_decode@@XZ_5.0+0x144>
    c11c:	mov	w8, #0xa                   	// #10
    c120:	mov	w0, w8
    c124:	add	sp, sp, #0x10
    c128:	ret

000000000000c12c <lzma_check_is_supported@@XZ_5.0>:
    c12c:	cmp	w0, #0xf
    c130:	b.ls	c13c <lzma_check_is_supported@@XZ_5.0+0x10>  // b.plast
    c134:	mov	w0, wzr
    c138:	ret
    c13c:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    c140:	add	x8, x8, #0xcda
    c144:	ldrb	w0, [x8, w0, uxtw]
    c148:	ret

000000000000c14c <lzma_check_size@@XZ_5.0>:
    c14c:	cmp	w0, #0xf
    c150:	b.ls	c15c <lzma_check_size@@XZ_5.0+0x10>  // b.plast
    c154:	mov	w0, #0xffffffff            	// #-1
    c158:	ret
    c15c:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
    c160:	add	x8, x8, #0xcea
    c164:	ldrb	w0, [x8, w0, uxtw]
    c168:	ret
    c16c:	stp	x29, x30, [sp, #-16]!
    c170:	cmp	w1, #0xa
    c174:	mov	x29, sp
    c178:	b.eq	c198 <lzma_check_size@@XZ_5.0+0x4c>  // b.none
    c17c:	cmp	w1, #0x4
    c180:	b.eq	c1a4 <lzma_check_size@@XZ_5.0+0x58>  // b.none
    c184:	cmp	w1, #0x1
    c188:	b.ne	c19c <lzma_check_size@@XZ_5.0+0x50>  // b.any
    c18c:	str	wzr, [x0, #64]
    c190:	ldp	x29, x30, [sp], #16
    c194:	ret
    c198:	bl	c45c <lzma_crc64@@XZ_5.0+0xd4>
    c19c:	ldp	x29, x30, [sp], #16
    c1a0:	ret
    c1a4:	str	xzr, [x0, #64]
    c1a8:	ldp	x29, x30, [sp], #16
    c1ac:	ret
    c1b0:	stp	x29, x30, [sp, #-32]!
    c1b4:	str	x19, [sp, #16]
    c1b8:	cmp	w1, #0xa
    c1bc:	mov	x19, x0
    c1c0:	mov	x29, sp
    c1c4:	b.eq	c1f4 <lzma_check_size@@XZ_5.0+0xa8>  // b.none
    c1c8:	cmp	w1, #0x4
    c1cc:	b.eq	c208 <lzma_check_size@@XZ_5.0+0xbc>  // b.none
    c1d0:	cmp	w1, #0x1
    c1d4:	b.ne	c220 <lzma_check_size@@XZ_5.0+0xd4>  // b.any
    c1d8:	ldr	w8, [x19, #64]
    c1dc:	mov	x0, x2
    c1e0:	mov	x1, x3
    c1e4:	mov	w2, w8
    c1e8:	bl	31c0 <lzma_crc32@plt>
    c1ec:	str	w0, [x19, #64]
    c1f0:	b	c220 <lzma_check_size@@XZ_5.0+0xd4>
    c1f4:	mov	x0, x2
    c1f8:	mov	x1, x3
    c1fc:	mov	x2, x19
    c200:	bl	c474 <lzma_crc64@@XZ_5.0+0xec>
    c204:	b	c220 <lzma_check_size@@XZ_5.0+0xd4>
    c208:	ldr	x8, [x19, #64]
    c20c:	mov	x0, x2
    c210:	mov	x1, x3
    c214:	mov	x2, x8
    c218:	bl	32a0 <lzma_crc64@plt>
    c21c:	str	x0, [x19, #64]
    c220:	ldr	x19, [sp, #16]
    c224:	ldp	x29, x30, [sp], #32
    c228:	ret
    c22c:	stp	x29, x30, [sp, #-16]!
    c230:	cmp	w1, #0xa
    c234:	mov	x29, sp
    c238:	b.eq	c25c <lzma_check_size@@XZ_5.0+0x110>  // b.none
    c23c:	cmp	w1, #0x4
    c240:	b.eq	c268 <lzma_check_size@@XZ_5.0+0x11c>  // b.none
    c244:	cmp	w1, #0x1
    c248:	b.ne	c260 <lzma_check_size@@XZ_5.0+0x114>  // b.any
    c24c:	ldr	w8, [x0, #64]
    c250:	str	w8, [x0]
    c254:	ldp	x29, x30, [sp], #16
    c258:	ret
    c25c:	bl	c520 <lzma_crc64@@XZ_5.0+0x198>
    c260:	ldp	x29, x30, [sp], #16
    c264:	ret
    c268:	ldr	x8, [x0, #64]
    c26c:	str	x8, [x0]
    c270:	ldp	x29, x30, [sp], #16
    c274:	ret

000000000000c278 <lzma_crc32@@XZ_5.0>:
    c278:	cmp	x1, #0x9
    c27c:	mvn	w8, w2
    c280:	b.cc	c358 <lzma_crc32@@XZ_5.0+0xe0>  // b.lo, b.ul, b.last
    c284:	tst	x0, #0x7
    c288:	b.eq	c2b4 <lzma_crc32@@XZ_5.0+0x3c>  // b.none
    c28c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c290:	ldr	x9, [x9, #3952]
    c294:	ldrb	w10, [x0], #1
    c298:	and	w11, w8, #0xff
    c29c:	sub	x1, x1, #0x1
    c2a0:	eor	w10, w11, w10
    c2a4:	ldr	w10, [x9, w10, uxtw #2]
    c2a8:	tst	x0, #0x7
    c2ac:	eor	w8, w10, w8, lsr #8
    c2b0:	b.ne	c294 <lzma_crc32@@XZ_5.0+0x1c>  // b.any
    c2b4:	and	x9, x1, #0xfffffffffffffff8
    c2b8:	cmp	x9, #0x1
    c2bc:	and	x1, x1, #0x7
    c2c0:	b.lt	c358 <lzma_crc32@@XZ_5.0+0xe0>  // b.tstop
    c2c4:	adrp	x10, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c2c8:	ldr	x10, [x10, #3952]
    c2cc:	add	x9, x0, x9
    c2d0:	ldp	w11, w12, [x0], #8
    c2d4:	eor	w8, w11, w8
    c2d8:	and	w15, w8, #0xff
    c2dc:	ubfx	w16, w8, #8, #8
    c2e0:	ubfx	w17, w8, #16, #8
    c2e4:	add	x15, x10, w15, uxtw #2
    c2e8:	add	x16, x10, w16, uxtw #2
    c2ec:	lsr	w8, w8, #24
    c2f0:	add	x17, x10, w17, uxtw #2
    c2f4:	ldr	w15, [x15, #7168]
    c2f8:	ldr	w16, [x16, #6144]
    c2fc:	add	x8, x10, w8, uxtw #2
    c300:	ldr	w17, [x17, #5120]
    c304:	add	x11, x10, w12, uxtb #2
    c308:	lsr	x13, x12, #8
    c30c:	ldr	w8, [x8, #4096]
    c310:	lsr	x14, x12, #16
    c314:	ldr	w11, [x11, #3072]
    c318:	add	x13, x10, w13, uxtb #2
    c31c:	lsr	x12, x12, #22
    c320:	add	x14, x10, w14, uxtb #2
    c324:	ldr	w13, [x13, #2048]
    c328:	eor	w15, w16, w15
    c32c:	and	x12, x12, #0x3fc
    c330:	ldr	w14, [x14, #1024]
    c334:	eor	w15, w15, w17
    c338:	ldr	w12, [x10, x12]
    c33c:	eor	w8, w15, w8
    c340:	eor	w8, w8, w11
    c344:	eor	w8, w8, w13
    c348:	eor	w8, w8, w14
    c34c:	cmp	x0, x9
    c350:	eor	w8, w8, w12
    c354:	b.cc	c2d0 <lzma_crc32@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c358:	cbz	x1, c380 <lzma_crc32@@XZ_5.0+0x108>
    c35c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c360:	ldr	x9, [x9, #3952]
    c364:	ldrb	w10, [x0], #1
    c368:	and	w11, w8, #0xff
    c36c:	subs	x1, x1, #0x1
    c370:	eor	w10, w11, w10
    c374:	ldr	w10, [x9, w10, uxtw #2]
    c378:	eor	w8, w10, w8, lsr #8
    c37c:	b.ne	c364 <lzma_crc32@@XZ_5.0+0xec>  // b.any
    c380:	mvn	w0, w8
    c384:	ret

000000000000c388 <lzma_crc64@@XZ_5.0>:
    c388:	cmp	x1, #0x5
    c38c:	mvn	x8, x2
    c390:	b.cc	c42c <lzma_crc64@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    c394:	tst	x0, #0x3
    c398:	b.eq	c3c4 <lzma_crc64@@XZ_5.0+0x3c>  // b.none
    c39c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c3a0:	ldr	x9, [x9, #3984]
    c3a4:	ldrb	w10, [x0], #1
    c3a8:	and	x11, x8, #0xff
    c3ac:	sub	x1, x1, #0x1
    c3b0:	eor	x10, x11, x10
    c3b4:	ldr	x10, [x9, x10, lsl #3]
    c3b8:	tst	x0, #0x3
    c3bc:	eor	x8, x10, x8, lsr #8
    c3c0:	b.ne	c3a4 <lzma_crc64@@XZ_5.0+0x1c>  // b.any
    c3c4:	and	x9, x1, #0xfffffffffffffffc
    c3c8:	cmp	x9, #0x1
    c3cc:	and	x1, x1, #0x3
    c3d0:	b.lt	c42c <lzma_crc64@@XZ_5.0+0xa4>  // b.tstop
    c3d4:	adrp	x10, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c3d8:	ldr	x10, [x10, #3984]
    c3dc:	add	x9, x0, x9
    c3e0:	ldr	w11, [x0], #4
    c3e4:	eor	w11, w11, w8
    c3e8:	and	w12, w11, #0xff
    c3ec:	ubfx	w13, w11, #8, #8
    c3f0:	add	x12, x10, w12, uxtw #3
    c3f4:	ubfx	w14, w11, #16, #8
    c3f8:	add	x13, x10, w13, uxtw #3
    c3fc:	ldr	x12, [x12, #6144]
    c400:	add	x14, x10, w14, uxtw #3
    c404:	ldr	x13, [x13, #4096]
    c408:	lsr	w11, w11, #24
    c40c:	ldr	x14, [x14, #2048]
    c410:	ldr	x11, [x10, w11, uxtw #3]
    c414:	eor	x8, x12, x8, lsr #32
    c418:	eor	x8, x8, x13
    c41c:	eor	x8, x8, x14
    c420:	cmp	x0, x9
    c424:	eor	x8, x8, x11
    c428:	b.cc	c3e0 <lzma_crc64@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c42c:	cbz	x1, c454 <lzma_crc64@@XZ_5.0+0xcc>
    c430:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    c434:	ldr	x9, [x9, #3984]
    c438:	ldrb	w10, [x0], #1
    c43c:	and	x11, x8, #0xff
    c440:	subs	x1, x1, #0x1
    c444:	eor	x10, x11, x10
    c448:	ldr	x10, [x9, x10, lsl #3]
    c44c:	eor	x8, x10, x8, lsr #8
    c450:	b.ne	c438 <lzma_crc64@@XZ_5.0+0xb0>  // b.any
    c454:	mvn	x0, x8
    c458:	ret
    c45c:	adrp	x8, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
    c460:	add	x8, x8, #0xd00
    c464:	ldp	q1, q0, [x8]
    c468:	str	xzr, [x0, #96]
    c46c:	stp	q1, q0, [x0, #64]
    c470:	ret
    c474:	stp	x29, x30, [sp, #-64]!
    c478:	str	x23, [sp, #16]
    c47c:	stp	x22, x21, [sp, #32]
    c480:	stp	x20, x19, [sp, #48]
    c484:	mov	x29, sp
    c488:	cbz	x1, c4f0 <lzma_crc64@@XZ_5.0+0x168>
    c48c:	mov	x19, x2
    c490:	mov	x20, x1
    c494:	mov	x21, x0
    c498:	mov	w23, #0x40                  	// #64
    c49c:	b	c4a4 <lzma_crc64@@XZ_5.0+0x11c>
    c4a0:	cbz	x20, c4f0 <lzma_crc64@@XZ_5.0+0x168>
    c4a4:	ldr	x8, [x19, #96]
    c4a8:	mov	x1, x21
    c4ac:	and	x8, x8, #0x3f
    c4b0:	sub	x9, x23, x8
    c4b4:	cmp	x9, x20
    c4b8:	csel	x22, x20, x9, hi  // hi = pmore
    c4bc:	add	x0, x19, x8
    c4c0:	mov	x2, x22
    c4c4:	bl	3090 <memcpy@plt>
    c4c8:	ldr	x8, [x19, #96]
    c4cc:	add	x21, x21, x22
    c4d0:	sub	x20, x20, x22
    c4d4:	add	x8, x22, x8
    c4d8:	tst	x8, #0x3f
    c4dc:	str	x8, [x19, #96]
    c4e0:	b.ne	c4a0 <lzma_crc64@@XZ_5.0+0x118>  // b.any
    c4e4:	mov	x0, x19
    c4e8:	bl	c504 <lzma_crc64@@XZ_5.0+0x17c>
    c4ec:	b	c4a0 <lzma_crc64@@XZ_5.0+0x118>
    c4f0:	ldp	x20, x19, [sp, #48]
    c4f4:	ldp	x22, x21, [sp, #32]
    c4f8:	ldr	x23, [sp, #16]
    c4fc:	ldp	x29, x30, [sp], #64
    c500:	ret
    c504:	stp	x29, x30, [sp, #-16]!
    c508:	mov	x1, x0
    c50c:	add	x0, x0, #0x40
    c510:	mov	x29, sp
    c514:	bl	c5d0 <lzma_crc64@@XZ_5.0+0x248>
    c518:	ldp	x29, x30, [sp], #16
    c51c:	ret
    c520:	stp	x29, x30, [sp, #-48]!
    c524:	stp	x20, x19, [sp, #32]
    c528:	ldr	x8, [x0, #96]
    c52c:	mov	x19, x0
    c530:	mov	w9, #0x80                  	// #128
    c534:	str	x21, [sp, #16]
    c538:	and	x8, x8, #0x3f
    c53c:	mov	x29, sp
    c540:	b	c554 <lzma_crc64@@XZ_5.0+0x1cc>
    c544:	mov	x0, x19
    c548:	bl	c504 <lzma_crc64@@XZ_5.0+0x17c>
    c54c:	mov	x8, xzr
    c550:	mov	w9, wzr
    c554:	cmp	x8, #0x3f
    c558:	add	x10, x8, #0x1
    c55c:	strb	w9, [x19, x8]
    c560:	b.eq	c544 <lzma_crc64@@XZ_5.0+0x1bc>  // b.none
    c564:	mov	w9, wzr
    c568:	cmp	x8, #0x37
    c56c:	mov	x8, x10
    c570:	b.ne	c554 <lzma_crc64@@XZ_5.0+0x1cc>  // b.any
    c574:	ldr	x8, [x19, #96]
    c578:	lsl	x0, x8, #3
    c57c:	str	x0, [x19, #96]
    c580:	bl	c5c0 <lzma_crc64@@XZ_5.0+0x238>
    c584:	str	x0, [x19, #56]
    c588:	mov	x0, x19
    c58c:	bl	c504 <lzma_crc64@@XZ_5.0+0x17c>
    c590:	mov	x20, xzr
    c594:	add	x21, x19, x20
    c598:	ldr	w0, [x21, #64]
    c59c:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c5a0:	add	x20, x20, #0x4
    c5a4:	cmp	x20, #0x20
    c5a8:	str	w0, [x21]
    c5ac:	b.ne	c594 <lzma_crc64@@XZ_5.0+0x20c>  // b.any
    c5b0:	ldp	x20, x19, [sp, #32]
    c5b4:	ldr	x21, [sp, #16]
    c5b8:	ldp	x29, x30, [sp], #48
    c5bc:	ret
    c5c0:	rev	x0, x0
    c5c4:	ret
    c5c8:	rev	w0, w0
    c5cc:	ret
    c5d0:	sub	sp, sp, #0x100
    c5d4:	stp	x29, x30, [sp, #160]
    c5d8:	stp	x28, x27, [sp, #176]
    c5dc:	stp	x26, x25, [sp, #192]
    c5e0:	stp	x24, x23, [sp, #208]
    c5e4:	stp	x22, x21, [sp, #224]
    c5e8:	stp	x20, x19, [sp, #240]
    c5ec:	ldp	w27, w25, [x0, #16]
    c5f0:	ldp	w22, w21, [x0, #24]
    c5f4:	ldp	w28, w26, [x0]
    c5f8:	ldp	w24, w23, [x0, #8]
    c5fc:	add	x29, sp, #0xa0
    c600:	str	x0, [sp, #24]
    c604:	mov	x20, x1
    c608:	stur	x1, [x29, #-8]
    c60c:	mov	w1, #0xe                   	// #14
    c610:	mov	w0, w27
    c614:	str	w22, [sp, #36]
    c618:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c61c:	eor	w0, w0, w27
    c620:	mov	w1, #0x5                   	// #5
    c624:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c628:	eor	w0, w0, w27
    c62c:	mov	w1, #0x6                   	// #6
    c630:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c634:	mov	w19, w0
    c638:	ldr	w0, [x20]
    c63c:	bic	w8, w22, w27
    c640:	and	w9, w25, w27
    c644:	mov	w22, w25
    c648:	str	w25, [sp, #32]
    c64c:	orr	w20, w9, w8
    c650:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c654:	add	w8, w21, w20
    c658:	add	w8, w8, w19
    c65c:	mov	w9, #0x2f98                	// #12184
    c660:	add	w8, w8, w0
    c664:	movk	w9, #0x428a, lsl #16
    c668:	stur	w0, [x29, #-16]
    c66c:	add	w20, w8, w9
    c670:	mov	w1, #0x9                   	// #9
    c674:	mov	w0, w28
    c678:	str	w21, [sp, #20]
    c67c:	str	w23, [sp, #12]
    c680:	add	w19, w20, w23
    c684:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c688:	eor	w0, w0, w28
    c68c:	mov	w1, #0xb                   	// #11
    c690:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c694:	eor	w0, w0, w28
    c698:	mov	w1, #0x2                   	// #2
    c69c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c6a0:	eor	w8, w24, w26
    c6a4:	and	w8, w8, w28
    c6a8:	and	w9, w24, w26
    c6ac:	add	w8, w8, w9
    c6b0:	add	w8, w8, w20
    c6b4:	add	w23, w8, w0
    c6b8:	mov	w1, #0xe                   	// #14
    c6bc:	mov	w0, w19
    c6c0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c6c4:	eor	w0, w0, w19
    c6c8:	mov	w1, #0x5                   	// #5
    c6cc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c6d0:	eor	w0, w0, w19
    c6d4:	mov	w1, #0x6                   	// #6
    c6d8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c6dc:	ldur	x25, [x29, #-8]
    c6e0:	mov	w20, w0
    c6e4:	bic	w8, w22, w19
    c6e8:	and	w9, w27, w19
    c6ec:	ldr	w0, [x25, #4]
    c6f0:	stur	w19, [x29, #-12]
    c6f4:	orr	w21, w9, w8
    c6f8:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c6fc:	ldr	w8, [sp, #36]
    c700:	mov	w9, #0x4491                	// #17553
    c704:	movk	w9, #0x7137, lsl #16
    c708:	stur	w0, [x29, #-40]
    c70c:	add	w8, w8, w21
    c710:	add	w8, w8, w20
    c714:	add	w8, w8, w0
    c718:	add	w21, w8, w9
    c71c:	mov	w1, #0x9                   	// #9
    c720:	mov	w0, w23
    c724:	str	w24, [sp, #8]
    c728:	add	w20, w21, w24
    c72c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c730:	eor	w0, w0, w23
    c734:	mov	w1, #0xb                   	// #11
    c738:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c73c:	eor	w0, w0, w23
    c740:	mov	w1, #0x2                   	// #2
    c744:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c748:	eor	w8, w26, w28
    c74c:	and	w8, w23, w8
    c750:	and	w9, w26, w28
    c754:	add	w8, w8, w9
    c758:	add	w8, w8, w21
    c75c:	add	w24, w8, w0
    c760:	mov	w1, #0xe                   	// #14
    c764:	mov	w0, w20
    c768:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c76c:	eor	w0, w0, w20
    c770:	mov	w1, #0x5                   	// #5
    c774:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c778:	eor	w0, w0, w20
    c77c:	mov	w1, #0x6                   	// #6
    c780:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c784:	mov	w21, w0
    c788:	ldr	w0, [x25, #8]
    c78c:	bic	w8, w27, w20
    c790:	and	w9, w19, w20
    c794:	orr	w22, w9, w8
    c798:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c79c:	ldr	w8, [sp, #32]
    c7a0:	mov	w9, #0xfbcf                	// #64463
    c7a4:	movk	w9, #0xb5c0, lsl #16
    c7a8:	stur	w0, [x29, #-44]
    c7ac:	add	w8, w8, w22
    c7b0:	add	w8, w8, w21
    c7b4:	add	w8, w8, w0
    c7b8:	add	w22, w8, w9
    c7bc:	mov	w1, #0x9                   	// #9
    c7c0:	mov	w0, w24
    c7c4:	str	w26, [sp, #4]
    c7c8:	add	w21, w22, w26
    c7cc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c7d0:	eor	w0, w0, w24
    c7d4:	mov	w1, #0xb                   	// #11
    c7d8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c7dc:	eor	w0, w0, w24
    c7e0:	mov	w1, #0x2                   	// #2
    c7e4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c7e8:	eor	w8, w23, w28
    c7ec:	and	w8, w24, w8
    c7f0:	and	w9, w23, w28
    c7f4:	add	w8, w8, w9
    c7f8:	add	w8, w8, w22
    c7fc:	add	w25, w8, w0
    c800:	mov	w1, #0xe                   	// #14
    c804:	mov	w0, w21
    c808:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c80c:	eor	w0, w0, w21
    c810:	mov	w1, #0x5                   	// #5
    c814:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c818:	eor	w0, w0, w21
    c81c:	mov	w1, #0x6                   	// #6
    c820:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c824:	ldur	x19, [x29, #-8]
    c828:	ldur	w8, [x29, #-12]
    c82c:	mov	w22, w0
    c830:	and	w9, w20, w21
    c834:	ldr	w0, [x19, #12]
    c838:	bic	w8, w8, w21
    c83c:	orr	w26, w9, w8
    c840:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c844:	add	w8, w27, w26
    c848:	add	w8, w8, w22
    c84c:	mov	w9, #0xdba5                	// #56229
    c850:	add	w8, w8, w0
    c854:	movk	w9, #0xe9b5, lsl #16
    c858:	stur	w0, [x29, #-48]
    c85c:	add	w26, w8, w9
    c860:	mov	w1, #0x9                   	// #9
    c864:	mov	w0, w25
    c868:	str	w27, [sp, #16]
    c86c:	str	w28, [sp]
    c870:	add	w22, w26, w28
    c874:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c878:	eor	w0, w0, w25
    c87c:	mov	w1, #0xb                   	// #11
    c880:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c884:	eor	w0, w0, w25
    c888:	mov	w1, #0x2                   	// #2
    c88c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c890:	eor	w8, w24, w23
    c894:	and	w8, w25, w8
    c898:	and	w9, w24, w23
    c89c:	add	w8, w8, w9
    c8a0:	add	w8, w8, w26
    c8a4:	add	w26, w8, w0
    c8a8:	mov	w1, #0xe                   	// #14
    c8ac:	mov	w0, w22
    c8b0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c8b4:	eor	w0, w0, w22
    c8b8:	mov	w1, #0x5                   	// #5
    c8bc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c8c0:	eor	w0, w0, w22
    c8c4:	mov	w1, #0x6                   	// #6
    c8c8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c8cc:	mov	w27, w0
    c8d0:	ldr	w0, [x19, #16]
    c8d4:	bic	w8, w20, w22
    c8d8:	and	w9, w21, w22
    c8dc:	orr	w28, w9, w8
    c8e0:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c8e4:	ldur	w8, [x29, #-12]
    c8e8:	mov	w9, #0xc25b                	// #49755
    c8ec:	movk	w9, #0x3956, lsl #16
    c8f0:	stur	w0, [x29, #-52]
    c8f4:	add	w8, w8, w28
    c8f8:	add	w8, w8, w27
    c8fc:	add	w8, w8, w0
    c900:	add	w27, w8, w9
    c904:	mov	w1, #0x9                   	// #9
    c908:	mov	w0, w26
    c90c:	add	w19, w27, w23
    c910:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c914:	eor	w0, w0, w26
    c918:	mov	w1, #0xb                   	// #11
    c91c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c920:	eor	w0, w0, w26
    c924:	mov	w1, #0x2                   	// #2
    c928:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c92c:	eor	w8, w25, w24
    c930:	and	w8, w26, w8
    c934:	and	w9, w25, w24
    c938:	add	w8, w8, w9
    c93c:	add	w8, w8, w27
    c940:	add	w27, w8, w0
    c944:	mov	w1, #0xe                   	// #14
    c948:	mov	w0, w19
    c94c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c950:	eor	w0, w0, w19
    c954:	mov	w1, #0x5                   	// #5
    c958:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c95c:	eor	w0, w0, w19
    c960:	mov	w1, #0x6                   	// #6
    c964:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c968:	ldur	x8, [x29, #-8]
    c96c:	mov	w23, w0
    c970:	and	w9, w22, w19
    c974:	ldr	w0, [x8, #20]
    c978:	bic	w8, w21, w19
    c97c:	orr	w28, w9, w8
    c980:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    c984:	add	w8, w20, w28
    c988:	add	w8, w8, w23
    c98c:	mov	w9, #0x11f1                	// #4593
    c990:	add	w8, w8, w0
    c994:	movk	w9, #0x59f1, lsl #16
    c998:	stur	w0, [x29, #-56]
    c99c:	add	w23, w8, w9
    c9a0:	mov	w1, #0x9                   	// #9
    c9a4:	mov	w0, w27
    c9a8:	add	w28, w23, w24
    c9ac:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c9b0:	eor	w0, w0, w27
    c9b4:	mov	w1, #0xb                   	// #11
    c9b8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c9bc:	eor	w0, w0, w27
    c9c0:	mov	w1, #0x2                   	// #2
    c9c4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c9c8:	eor	w8, w26, w25
    c9cc:	and	w8, w27, w8
    c9d0:	and	w9, w26, w25
    c9d4:	add	w8, w8, w9
    c9d8:	add	w8, w8, w23
    c9dc:	add	w24, w8, w0
    c9e0:	mov	w1, #0xe                   	// #14
    c9e4:	mov	w0, w28
    c9e8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c9ec:	eor	w0, w0, w28
    c9f0:	mov	w1, #0x5                   	// #5
    c9f4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    c9f8:	eor	w0, w0, w28
    c9fc:	mov	w1, #0x6                   	// #6
    ca00:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca04:	ldur	x20, [x29, #-8]
    ca08:	mov	w23, w0
    ca0c:	bic	w8, w22, w28
    ca10:	and	w9, w19, w28
    ca14:	ldr	w0, [x20, #24]
    ca18:	stur	w28, [x29, #-12]
    ca1c:	stur	w19, [x29, #-20]
    ca20:	orr	w28, w9, w8
    ca24:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    ca28:	add	w8, w21, w28
    ca2c:	add	w8, w8, w23
    ca30:	mov	w9, #0x82a4                	// #33444
    ca34:	add	w8, w8, w0
    ca38:	movk	w9, #0x923f, lsl #16
    ca3c:	stur	w0, [x29, #-60]
    ca40:	add	w23, w8, w9
    ca44:	mov	w1, #0x9                   	// #9
    ca48:	mov	w0, w24
    ca4c:	add	w21, w23, w25
    ca50:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca54:	eor	w0, w0, w24
    ca58:	mov	w1, #0xb                   	// #11
    ca5c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca60:	eor	w0, w0, w24
    ca64:	mov	w1, #0x2                   	// #2
    ca68:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca6c:	eor	w8, w27, w26
    ca70:	and	w8, w24, w8
    ca74:	and	w9, w27, w26
    ca78:	add	w8, w8, w9
    ca7c:	add	w8, w8, w23
    ca80:	add	w28, w8, w0
    ca84:	mov	w1, #0xe                   	// #14
    ca88:	mov	w0, w21
    ca8c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca90:	eor	w0, w0, w21
    ca94:	mov	w1, #0x5                   	// #5
    ca98:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ca9c:	eor	w0, w0, w21
    caa0:	mov	w1, #0x6                   	// #6
    caa4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    caa8:	bic	w8, w19, w21
    caac:	ldur	w19, [x29, #-12]
    cab0:	mov	w23, w0
    cab4:	ldr	w0, [x20, #28]
    cab8:	and	w9, w19, w21
    cabc:	orr	w25, w9, w8
    cac0:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cac4:	add	w8, w22, w25
    cac8:	add	w8, w8, w23
    cacc:	mov	w9, #0x5ed5                	// #24277
    cad0:	add	w8, w8, w0
    cad4:	movk	w9, #0xab1c, lsl #16
    cad8:	stur	w0, [x29, #-64]
    cadc:	add	w22, w8, w9
    cae0:	mov	w1, #0x9                   	// #9
    cae4:	mov	w0, w28
    cae8:	add	w23, w22, w26
    caec:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    caf0:	eor	w0, w0, w28
    caf4:	mov	w1, #0xb                   	// #11
    caf8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cafc:	eor	w0, w0, w28
    cb00:	mov	w1, #0x2                   	// #2
    cb04:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb08:	eor	w8, w24, w27
    cb0c:	and	w8, w28, w8
    cb10:	and	w9, w24, w27
    cb14:	add	w8, w8, w9
    cb18:	add	w8, w8, w22
    cb1c:	add	w26, w8, w0
    cb20:	mov	w1, #0xe                   	// #14
    cb24:	mov	w0, w23
    cb28:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb2c:	eor	w0, w0, w23
    cb30:	mov	w1, #0x5                   	// #5
    cb34:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb38:	eor	w0, w0, w23
    cb3c:	mov	w1, #0x6                   	// #6
    cb40:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb44:	mov	w22, w0
    cb48:	ldr	w0, [x20, #32]
    cb4c:	bic	w8, w19, w23
    cb50:	and	w9, w21, w23
    cb54:	orr	w25, w9, w8
    cb58:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cb5c:	ldur	w8, [x29, #-20]
    cb60:	mov	w9, #0xaa98                	// #43672
    cb64:	movk	w9, #0xd807, lsl #16
    cb68:	stur	w0, [x29, #-68]
    cb6c:	add	w8, w8, w25
    cb70:	add	w8, w8, w22
    cb74:	add	w8, w8, w0
    cb78:	add	w19, w8, w9
    cb7c:	mov	w1, #0x9                   	// #9
    cb80:	mov	w0, w26
    cb84:	add	w25, w19, w27
    cb88:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb8c:	eor	w0, w0, w26
    cb90:	mov	w1, #0xb                   	// #11
    cb94:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cb98:	eor	w0, w0, w26
    cb9c:	mov	w1, #0x2                   	// #2
    cba0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cba4:	eor	w8, w28, w24
    cba8:	and	w8, w26, w8
    cbac:	and	w9, w28, w24
    cbb0:	add	w8, w8, w9
    cbb4:	add	w8, w8, w19
    cbb8:	add	w22, w8, w0
    cbbc:	mov	w1, #0xe                   	// #14
    cbc0:	mov	w0, w25
    cbc4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cbc8:	eor	w0, w0, w25
    cbcc:	mov	w1, #0x5                   	// #5
    cbd0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cbd4:	eor	w0, w0, w25
    cbd8:	mov	w1, #0x6                   	// #6
    cbdc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cbe0:	mov	w19, w0
    cbe4:	ldr	w0, [x20, #36]
    cbe8:	bic	w8, w21, w25
    cbec:	and	w9, w23, w25
    cbf0:	stur	w23, [x29, #-24]
    cbf4:	orr	w27, w9, w8
    cbf8:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cbfc:	ldur	w8, [x29, #-12]
    cc00:	mov	w9, #0x5b01                	// #23297
    cc04:	movk	w9, #0x1283, lsl #16
    cc08:	str	w0, [sp, #80]
    cc0c:	add	w8, w8, w27
    cc10:	add	w8, w8, w19
    cc14:	add	w8, w8, w0
    cc18:	add	w20, w8, w9
    cc1c:	mov	w1, #0x9                   	// #9
    cc20:	mov	w0, w22
    cc24:	add	w24, w20, w24
    cc28:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc2c:	eor	w0, w0, w22
    cc30:	mov	w1, #0xb                   	// #11
    cc34:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc38:	eor	w0, w0, w22
    cc3c:	mov	w1, #0x2                   	// #2
    cc40:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc44:	eor	w8, w26, w28
    cc48:	and	w8, w22, w8
    cc4c:	and	w9, w26, w28
    cc50:	add	w8, w8, w9
    cc54:	add	w8, w8, w20
    cc58:	add	w27, w8, w0
    cc5c:	mov	w1, #0xe                   	// #14
    cc60:	mov	w0, w24
    cc64:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc68:	eor	w0, w0, w24
    cc6c:	mov	w1, #0x5                   	// #5
    cc70:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc74:	eor	w0, w0, w24
    cc78:	mov	w1, #0x6                   	// #6
    cc7c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cc80:	ldur	x19, [x29, #-8]
    cc84:	mov	w20, w0
    cc88:	bic	w8, w23, w24
    cc8c:	and	w9, w25, w24
    cc90:	ldr	w0, [x19, #40]
    cc94:	mov	w23, w24
    cc98:	orr	w24, w9, w8
    cc9c:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cca0:	add	w8, w21, w24
    cca4:	add	w8, w8, w20
    cca8:	mov	w9, #0x85be                	// #34238
    ccac:	add	w8, w8, w0
    ccb0:	movk	w9, #0x2431, lsl #16
    ccb4:	stur	w0, [x29, #-20]
    ccb8:	add	w20, w8, w9
    ccbc:	mov	w1, #0x9                   	// #9
    ccc0:	mov	w0, w27
    ccc4:	add	w21, w20, w28
    ccc8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cccc:	eor	w0, w0, w27
    ccd0:	mov	w1, #0xb                   	// #11
    ccd4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ccd8:	eor	w0, w0, w27
    ccdc:	mov	w1, #0x2                   	// #2
    cce0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cce4:	eor	w8, w22, w26
    cce8:	and	w8, w27, w8
    ccec:	and	w9, w22, w26
    ccf0:	add	w8, w8, w9
    ccf4:	add	w8, w8, w20
    ccf8:	add	w28, w8, w0
    ccfc:	mov	w1, #0xe                   	// #14
    cd00:	mov	w0, w21
    cd04:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd08:	eor	w0, w0, w21
    cd0c:	mov	w1, #0x5                   	// #5
    cd10:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd14:	eor	w0, w0, w21
    cd18:	mov	w1, #0x6                   	// #6
    cd1c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd20:	mov	w20, w0
    cd24:	ldr	w0, [x19, #44]
    cd28:	bic	w8, w25, w21
    cd2c:	and	w9, w23, w21
    cd30:	stur	w21, [x29, #-12]
    cd34:	stur	w23, [x29, #-32]
    cd38:	orr	w21, w9, w8
    cd3c:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cd40:	ldur	w8, [x29, #-24]
    cd44:	mov	w9, #0x7dc3                	// #32195
    cd48:	movk	w9, #0x550c, lsl #16
    cd4c:	stur	w0, [x29, #-24]
    cd50:	add	w8, w8, w21
    cd54:	add	w8, w8, w20
    cd58:	add	w8, w8, w0
    cd5c:	add	w20, w8, w9
    cd60:	mov	w1, #0x9                   	// #9
    cd64:	mov	w0, w28
    cd68:	add	w19, w20, w26
    cd6c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd70:	eor	w0, w0, w28
    cd74:	mov	w1, #0xb                   	// #11
    cd78:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd7c:	eor	w0, w0, w28
    cd80:	mov	w1, #0x2                   	// #2
    cd84:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cd88:	eor	w8, w27, w22
    cd8c:	and	w8, w28, w8
    cd90:	and	w9, w27, w22
    cd94:	add	w8, w8, w9
    cd98:	add	w8, w8, w20
    cd9c:	add	w24, w8, w0
    cda0:	mov	w1, #0xe                   	// #14
    cda4:	mov	w0, w19
    cda8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cdac:	eor	w0, w0, w19
    cdb0:	mov	w1, #0x5                   	// #5
    cdb4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cdb8:	eor	w0, w0, w19
    cdbc:	mov	w1, #0x6                   	// #6
    cdc0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cdc4:	ldur	x8, [x29, #-8]
    cdc8:	mov	w20, w0
    cdcc:	ldr	w0, [x8, #48]
    cdd0:	bic	w8, w23, w19
    cdd4:	ldur	w23, [x29, #-12]
    cdd8:	and	w9, w23, w19
    cddc:	orr	w21, w9, w8
    cde0:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cde4:	add	w8, w25, w21
    cde8:	add	w8, w8, w20
    cdec:	mov	w9, #0x5d74                	// #23924
    cdf0:	add	w8, w8, w0
    cdf4:	movk	w9, #0x72be, lsl #16
    cdf8:	stur	w0, [x29, #-28]
    cdfc:	add	w20, w8, w9
    ce00:	mov	w1, #0x9                   	// #9
    ce04:	mov	w0, w24
    ce08:	add	w25, w20, w22
    ce0c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce10:	eor	w0, w0, w24
    ce14:	mov	w1, #0xb                   	// #11
    ce18:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce1c:	eor	w0, w0, w24
    ce20:	mov	w1, #0x2                   	// #2
    ce24:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce28:	eor	w8, w28, w27
    ce2c:	and	w8, w24, w8
    ce30:	and	w9, w28, w27
    ce34:	add	w8, w8, w9
    ce38:	add	w8, w8, w20
    ce3c:	add	w26, w8, w0
    ce40:	mov	w1, #0xe                   	// #14
    ce44:	mov	w0, w25
    ce48:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce4c:	eor	w0, w0, w25
    ce50:	mov	w1, #0x5                   	// #5
    ce54:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce58:	eor	w0, w0, w25
    ce5c:	mov	w1, #0x6                   	// #6
    ce60:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ce64:	ldur	x20, [x29, #-8]
    ce68:	mov	w21, w0
    ce6c:	bic	w8, w23, w25
    ce70:	and	w9, w19, w25
    ce74:	ldr	w0, [x20, #52]
    ce78:	mov	w23, w19
    ce7c:	stur	w19, [x29, #-72]
    ce80:	orr	w22, w9, w8
    ce84:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    ce88:	ldur	w8, [x29, #-32]
    ce8c:	mov	w9, #0xb1fe                	// #45566
    ce90:	movk	w9, #0x80de, lsl #16
    ce94:	stur	w0, [x29, #-32]
    ce98:	add	w8, w8, w22
    ce9c:	add	w8, w8, w21
    cea0:	add	w8, w8, w0
    cea4:	add	w19, w8, w9
    cea8:	mov	w1, #0x9                   	// #9
    ceac:	mov	w0, w26
    ceb0:	add	w21, w19, w27
    ceb4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ceb8:	eor	w0, w0, w26
    cebc:	mov	w1, #0xb                   	// #11
    cec0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cec4:	eor	w0, w0, w26
    cec8:	mov	w1, #0x2                   	// #2
    cecc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ced0:	eor	w8, w24, w28
    ced4:	and	w8, w26, w8
    ced8:	and	w9, w24, w28
    cedc:	add	w8, w8, w9
    cee0:	add	w8, w8, w19
    cee4:	add	w19, w8, w0
    cee8:	mov	w1, #0xe                   	// #14
    ceec:	mov	w0, w21
    cef0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cef4:	eor	w0, w0, w21
    cef8:	mov	w1, #0x5                   	// #5
    cefc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf00:	eor	w0, w0, w21
    cf04:	mov	w1, #0x6                   	// #6
    cf08:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf0c:	mov	w22, w0
    cf10:	ldr	w0, [x20, #56]
    cf14:	bic	w8, w23, w21
    cf18:	and	w9, w25, w21
    cf1c:	orr	w23, w9, w8
    cf20:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cf24:	ldur	w8, [x29, #-12]
    cf28:	mov	w9, #0x6a7                 	// #1703
    cf2c:	movk	w9, #0x9bdc, lsl #16
    cf30:	stur	w0, [x29, #-12]
    cf34:	add	w8, w8, w23
    cf38:	add	w8, w8, w22
    cf3c:	add	w8, w8, w0
    cf40:	add	w23, w8, w9
    cf44:	mov	w1, #0x9                   	// #9
    cf48:	mov	w0, w19
    cf4c:	add	w22, w23, w28
    cf50:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf54:	eor	w0, w0, w19
    cf58:	mov	w1, #0xb                   	// #11
    cf5c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf60:	eor	w0, w0, w19
    cf64:	mov	w1, #0x2                   	// #2
    cf68:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf6c:	eor	w8, w26, w24
    cf70:	and	w8, w19, w8
    cf74:	and	w9, w26, w24
    cf78:	add	w8, w8, w9
    cf7c:	add	w8, w8, w23
    cf80:	add	w23, w8, w0
    cf84:	mov	w1, #0xe                   	// #14
    cf88:	mov	w0, w22
    cf8c:	mov	w28, w24
    cf90:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cf94:	eor	w0, w0, w22
    cf98:	mov	w1, #0x5                   	// #5
    cf9c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cfa0:	eor	w0, w0, w22
    cfa4:	mov	w1, #0x6                   	// #6
    cfa8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    cfac:	mov	w27, w0
    cfb0:	ldr	w0, [x20, #60]
    cfb4:	bic	w8, w25, w22
    cfb8:	and	w9, w21, w22
    cfbc:	stur	w25, [x29, #-36]
    cfc0:	stur	w21, [x29, #-76]
    cfc4:	mov	w24, w22
    cfc8:	orr	w25, w9, w8
    cfcc:	bl	c5c8 <lzma_crc64@@XZ_5.0+0x240>
    cfd0:	ldur	w8, [x29, #-72]
    cfd4:	mov	w9, #0xf174                	// #61812
    cfd8:	movk	w9, #0xc19b, lsl #16
    cfdc:	mov	w22, w0
    cfe0:	add	w8, w8, w25
    cfe4:	add	w8, w8, w27
    cfe8:	add	w8, w8, w0
    cfec:	add	w25, w8, w9
    cff0:	mov	w1, #0x9                   	// #9
    cff4:	mov	w0, w23
    cff8:	add	w20, w25, w28
    cffc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d000:	eor	w0, w0, w23
    d004:	mov	w1, #0xb                   	// #11
    d008:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d00c:	eor	w0, w0, w23
    d010:	mov	w1, #0x2                   	// #2
    d014:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d018:	eor	w8, w19, w26
    d01c:	and	w9, w19, w26
    d020:	and	w8, w23, w8
    d024:	add	w8, w8, w9
    d028:	add	w8, w8, w25
    d02c:	adrp	x21, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
    d030:	mov	x10, xzr
    d034:	add	w25, w8, w0
    d038:	add	x21, x21, #0xd9c
    d03c:	stp	w19, w26, [sp, #72]
    d040:	str	w23, [sp, #64]
    d044:	mov	w1, #0xe                   	// #14
    d048:	mov	w0, w20
    d04c:	stur	x21, [x29, #-8]
    d050:	str	x10, [sp, #48]
    d054:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d058:	eor	w0, w0, w20
    d05c:	mov	w1, #0x5                   	// #5
    d060:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d064:	eor	w0, w0, w20
    d068:	mov	w1, #0x6                   	// #6
    d06c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d070:	ldur	w8, [x29, #-76]
    d074:	and	w9, w24, w20
    d078:	mov	w23, w20
    d07c:	ldur	w27, [x21, #-60]
    d080:	bic	w8, w8, w20
    d084:	ldur	w20, [x29, #-12]
    d088:	mov	w26, w0
    d08c:	mov	w1, #0x2                   	// #2
    d090:	mov	w19, w24
    d094:	mov	w0, w20
    d098:	str	w24, [sp, #60]
    d09c:	orr	w28, w9, w8
    d0a0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d0a4:	eor	w0, w0, w20
    d0a8:	mov	w1, #0x11                  	// #17
    d0ac:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d0b0:	ldur	w24, [x29, #-40]
    d0b4:	eor	w21, w0, w20, lsr #10
    d0b8:	mov	w1, #0xb                   	// #11
    d0bc:	mov	w0, w24
    d0c0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d0c4:	eor	w0, w0, w24
    d0c8:	mov	w1, #0x7                   	// #7
    d0cc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d0d0:	ldur	w9, [x29, #-16]
    d0d4:	ldr	w10, [sp, #80]
    d0d8:	eor	w8, w0, w24, lsr #3
    d0dc:	mov	w1, #0x9                   	// #9
    d0e0:	mov	w0, w25
    d0e4:	add	w9, w9, w10
    d0e8:	ldur	w10, [x29, #-36]
    d0ec:	add	w9, w9, w21
    d0f0:	add	w9, w9, w8
    d0f4:	stur	w9, [x29, #-16]
    d0f8:	add	w10, w28, w10
    d0fc:	add	w10, w10, w26
    d100:	add	w8, w10, w27
    d104:	add	w21, w8, w9
    d108:	ldr	w8, [sp, #76]
    d10c:	add	w20, w21, w8
    d110:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d114:	eor	w0, w0, w25
    d118:	mov	w1, #0xb                   	// #11
    d11c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d120:	eor	w0, w0, w25
    d124:	mov	w1, #0x2                   	// #2
    d128:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d12c:	mov	w9, w25
    d130:	str	w25, [sp, #68]
    d134:	ldr	w25, [sp, #72]
    d138:	ldr	w26, [sp, #64]
    d13c:	mov	w1, #0xe                   	// #14
    d140:	eor	w8, w26, w25
    d144:	and	w8, w9, w8
    d148:	and	w9, w26, w25
    d14c:	add	w8, w8, w9
    d150:	add	w8, w8, w0
    d154:	add	w8, w8, w21
    d158:	mov	w0, w20
    d15c:	stur	w8, [x29, #-36]
    d160:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d164:	eor	w0, w20, w0
    d168:	mov	w1, #0x5                   	// #5
    d16c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d170:	eor	w0, w20, w0
    d174:	mov	w1, #0x6                   	// #6
    d178:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d17c:	ldur	x8, [x29, #-8]
    d180:	mov	w27, w0
    d184:	and	w9, w23, w20
    d188:	mov	w1, #0x2                   	// #2
    d18c:	ldur	w21, [x8, #-56]
    d190:	bic	w8, w19, w20
    d194:	mov	w0, w22
    d198:	str	w20, [sp, #76]
    d19c:	str	w23, [sp, #56]
    d1a0:	orr	w28, w9, w8
    d1a4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d1a8:	eor	w0, w0, w22
    d1ac:	mov	w1, #0x11                  	// #17
    d1b0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d1b4:	ldur	w20, [x29, #-44]
    d1b8:	stur	w22, [x29, #-72]
    d1bc:	eor	w22, w0, w22, lsr #10
    d1c0:	mov	w1, #0xb                   	// #11
    d1c4:	mov	w0, w20
    d1c8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d1cc:	eor	w0, w0, w20
    d1d0:	mov	w1, #0x7                   	// #7
    d1d4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d1d8:	ldur	w9, [x29, #-20]
    d1dc:	ldur	w10, [x29, #-76]
    d1e0:	eor	w8, w0, w20, lsr #3
    d1e4:	mov	w1, #0x9                   	// #9
    d1e8:	add	w9, w24, w9
    d1ec:	add	w9, w9, w22
    d1f0:	ldur	w22, [x29, #-36]
    d1f4:	add	w10, w27, w10
    d1f8:	add	w10, w10, w21
    d1fc:	add	w9, w9, w8
    d200:	add	w8, w10, w28
    d204:	add	w21, w8, w9
    d208:	mov	w0, w22
    d20c:	stur	w9, [x29, #-40]
    d210:	add	w19, w21, w25
    d214:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d218:	eor	w0, w0, w22
    d21c:	mov	w1, #0xb                   	// #11
    d220:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d224:	eor	w0, w0, w22
    d228:	mov	w1, #0x2                   	// #2
    d22c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d230:	ldr	w9, [sp, #68]
    d234:	mov	w1, #0xe                   	// #14
    d238:	eor	w8, w9, w26
    d23c:	and	w8, w22, w8
    d240:	and	w9, w9, w26
    d244:	add	w8, w8, w9
    d248:	add	w8, w8, w0
    d24c:	mov	w0, w19
    d250:	add	w27, w8, w21
    d254:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d258:	eor	w0, w19, w0
    d25c:	mov	w1, #0x5                   	// #5
    d260:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d264:	eor	w0, w19, w0
    d268:	mov	w1, #0x6                   	// #6
    d26c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d270:	ldur	x8, [x29, #-8]
    d274:	str	w19, [sp, #72]
    d278:	mov	w21, w0
    d27c:	mov	w1, #0x2                   	// #2
    d280:	ldur	w22, [x8, #-52]
    d284:	bic	w8, w23, w19
    d288:	ldr	w23, [sp, #76]
    d28c:	and	w9, w23, w19
    d290:	ldur	w19, [x29, #-16]
    d294:	orr	w28, w9, w8
    d298:	mov	w0, w19
    d29c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d2a0:	eor	w0, w0, w19
    d2a4:	mov	w1, #0x11                  	// #17
    d2a8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d2ac:	ldur	w25, [x29, #-48]
    d2b0:	eor	w24, w0, w19, lsr #10
    d2b4:	mov	w1, #0xb                   	// #11
    d2b8:	mov	w0, w25
    d2bc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d2c0:	eor	w0, w0, w25
    d2c4:	mov	w1, #0x7                   	// #7
    d2c8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d2cc:	ldur	w9, [x29, #-24]
    d2d0:	ldr	w10, [sp, #60]
    d2d4:	eor	w8, w0, w25, lsr #3
    d2d8:	mov	w1, #0x9                   	// #9
    d2dc:	add	w9, w20, w9
    d2e0:	add	w10, w21, w10
    d2e4:	add	w9, w9, w24
    d2e8:	add	w10, w10, w22
    d2ec:	add	w9, w9, w8
    d2f0:	add	w8, w10, w28
    d2f4:	add	w22, w8, w9
    d2f8:	mov	w0, w27
    d2fc:	stur	w9, [x29, #-44]
    d300:	add	w19, w22, w26
    d304:	stur	w27, [x29, #-76]
    d308:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d30c:	eor	w0, w0, w27
    d310:	mov	w1, #0xb                   	// #11
    d314:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d318:	eor	w0, w0, w27
    d31c:	mov	w1, #0x2                   	// #2
    d320:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d324:	ldur	w9, [x29, #-36]
    d328:	ldr	w11, [sp, #68]
    d32c:	mov	w1, #0xe                   	// #14
    d330:	eor	w8, w9, w11
    d334:	and	w8, w27, w8
    d338:	and	w9, w9, w11
    d33c:	add	w8, w8, w9
    d340:	add	w8, w8, w0
    d344:	mov	w0, w19
    d348:	mov	w20, w11
    d34c:	add	w27, w8, w22
    d350:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d354:	eor	w0, w19, w0
    d358:	mov	w1, #0x5                   	// #5
    d35c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d360:	eor	w0, w19, w0
    d364:	mov	w1, #0x6                   	// #6
    d368:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d36c:	ldur	x8, [x29, #-8]
    d370:	mov	w26, w19
    d374:	mov	w22, w0
    d378:	mov	w1, #0x2                   	// #2
    d37c:	ldur	w24, [x8, #-48]
    d380:	bic	w8, w23, w19
    d384:	ldr	w23, [sp, #72]
    d388:	and	w9, w23, w19
    d38c:	ldur	w19, [x29, #-40]
    d390:	orr	w28, w9, w8
    d394:	mov	w0, w19
    d398:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d39c:	eor	w0, w0, w19
    d3a0:	mov	w1, #0x11                  	// #17
    d3a4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d3a8:	ldur	w21, [x29, #-52]
    d3ac:	eor	w19, w0, w19, lsr #10
    d3b0:	mov	w1, #0xb                   	// #11
    d3b4:	mov	w0, w21
    d3b8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d3bc:	eor	w0, w0, w21
    d3c0:	mov	w1, #0x7                   	// #7
    d3c4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d3c8:	ldur	w9, [x29, #-28]
    d3cc:	ldr	w10, [sp, #56]
    d3d0:	eor	w8, w0, w21, lsr #3
    d3d4:	mov	w1, #0x9                   	// #9
    d3d8:	add	w9, w25, w9
    d3dc:	add	w10, w22, w10
    d3e0:	add	w9, w9, w19
    d3e4:	add	w10, w10, w24
    d3e8:	add	w9, w9, w8
    d3ec:	add	w8, w10, w28
    d3f0:	add	w19, w8, w9
    d3f4:	mov	w0, w27
    d3f8:	stur	w9, [x29, #-48]
    d3fc:	add	w20, w19, w20
    d400:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d404:	eor	w0, w0, w27
    d408:	mov	w1, #0xb                   	// #11
    d40c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d410:	eor	w0, w0, w27
    d414:	mov	w1, #0x2                   	// #2
    d418:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d41c:	ldur	w10, [x29, #-36]
    d420:	ldur	w9, [x29, #-76]
    d424:	mov	w1, #0xe                   	// #14
    d428:	eor	w8, w9, w10
    d42c:	and	w8, w27, w8
    d430:	and	w9, w9, w10
    d434:	add	w8, w8, w9
    d438:	add	w8, w8, w0
    d43c:	mov	w0, w20
    d440:	add	w24, w8, w19
    d444:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d448:	eor	w0, w20, w0
    d44c:	mov	w1, #0x5                   	// #5
    d450:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d454:	eor	w0, w20, w0
    d458:	mov	w1, #0x6                   	// #6
    d45c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d460:	ldur	x8, [x29, #-8]
    d464:	str	w20, [sp, #68]
    d468:	and	w9, w26, w20
    d46c:	mov	w25, w0
    d470:	ldur	w19, [x8, #-44]
    d474:	bic	w8, w23, w20
    d478:	ldur	w20, [x29, #-44]
    d47c:	mov	w1, #0x2                   	// #2
    d480:	mov	w23, w26
    d484:	str	w26, [sp, #60]
    d488:	mov	w0, w20
    d48c:	orr	w28, w9, w8
    d490:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d494:	eor	w0, w0, w20
    d498:	mov	w1, #0x11                  	// #17
    d49c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d4a0:	ldur	w22, [x29, #-56]
    d4a4:	eor	w20, w0, w20, lsr #10
    d4a8:	mov	w1, #0xb                   	// #11
    d4ac:	mov	w0, w22
    d4b0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d4b4:	eor	w0, w0, w22
    d4b8:	mov	w1, #0x7                   	// #7
    d4bc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d4c0:	ldur	w9, [x29, #-32]
    d4c4:	ldr	w10, [sp, #76]
    d4c8:	eor	w8, w0, w22, lsr #3
    d4cc:	mov	w1, #0x9                   	// #9
    d4d0:	add	w9, w21, w9
    d4d4:	add	w10, w25, w10
    d4d8:	add	w9, w9, w20
    d4dc:	add	w10, w10, w19
    d4e0:	add	w9, w9, w8
    d4e4:	add	w8, w10, w28
    d4e8:	add	w19, w8, w9
    d4ec:	ldur	w8, [x29, #-36]
    d4f0:	mov	w0, w24
    d4f4:	stur	w9, [x29, #-52]
    d4f8:	add	w20, w19, w8
    d4fc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d500:	eor	w0, w0, w24
    d504:	mov	w1, #0xb                   	// #11
    d508:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d50c:	eor	w0, w0, w24
    d510:	mov	w1, #0x2                   	// #2
    d514:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d518:	ldur	w9, [x29, #-76]
    d51c:	mov	w1, #0xe                   	// #14
    d520:	eor	w8, w27, w9
    d524:	and	w8, w24, w8
    d528:	and	w9, w27, w9
    d52c:	add	w8, w8, w9
    d530:	add	w8, w8, w0
    d534:	mov	w0, w20
    d538:	add	w25, w8, w19
    d53c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d540:	eor	w0, w20, w0
    d544:	mov	w1, #0x5                   	// #5
    d548:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d54c:	eor	w0, w20, w0
    d550:	mov	w1, #0x6                   	// #6
    d554:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d558:	ldur	x8, [x29, #-8]
    d55c:	stur	w20, [x29, #-36]
    d560:	mov	w26, w0
    d564:	mov	w1, #0x2                   	// #2
    d568:	ldur	w19, [x8, #-40]
    d56c:	bic	w8, w23, w20
    d570:	ldr	w23, [sp, #68]
    d574:	and	w9, w23, w20
    d578:	ldur	w20, [x29, #-48]
    d57c:	orr	w28, w9, w8
    d580:	mov	w0, w20
    d584:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d588:	eor	w0, w0, w20
    d58c:	mov	w1, #0x11                  	// #17
    d590:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d594:	ldur	w21, [x29, #-60]
    d598:	eor	w20, w0, w20, lsr #10
    d59c:	mov	w1, #0xb                   	// #11
    d5a0:	mov	w0, w21
    d5a4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d5a8:	eor	w0, w0, w21
    d5ac:	mov	w1, #0x7                   	// #7
    d5b0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d5b4:	ldur	w9, [x29, #-12]
    d5b8:	ldr	w10, [sp, #72]
    d5bc:	eor	w8, w0, w21, lsr #3
    d5c0:	mov	w1, #0x9                   	// #9
    d5c4:	add	w9, w22, w9
    d5c8:	add	w10, w26, w10
    d5cc:	add	w9, w9, w20
    d5d0:	add	w10, w10, w19
    d5d4:	add	w9, w9, w8
    d5d8:	add	w8, w10, w28
    d5dc:	add	w20, w8, w9
    d5e0:	ldur	w8, [x29, #-76]
    d5e4:	mov	w0, w25
    d5e8:	stur	w9, [x29, #-56]
    d5ec:	add	w19, w20, w8
    d5f0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d5f4:	eor	w0, w0, w25
    d5f8:	mov	w1, #0xb                   	// #11
    d5fc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d600:	eor	w0, w0, w25
    d604:	mov	w1, #0x2                   	// #2
    d608:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d60c:	eor	w8, w24, w27
    d610:	and	w8, w25, w8
    d614:	and	w9, w24, w27
    d618:	add	w8, w8, w9
    d61c:	add	w8, w8, w0
    d620:	mov	w1, #0xe                   	// #14
    d624:	mov	w0, w19
    d628:	str	w27, [sp, #44]
    d62c:	str	w24, [sp, #64]
    d630:	add	w26, w8, w20
    d634:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d638:	eor	w0, w19, w0
    d63c:	mov	w1, #0x5                   	// #5
    d640:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d644:	eor	w0, w19, w0
    d648:	mov	w1, #0x6                   	// #6
    d64c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d650:	ldur	x8, [x29, #-8]
    d654:	ldur	w24, [x29, #-36]
    d658:	stur	w19, [x29, #-76]
    d65c:	mov	w27, w0
    d660:	ldur	w20, [x8, #-36]
    d664:	bic	w8, w23, w19
    d668:	and	w9, w24, w19
    d66c:	ldur	w19, [x29, #-52]
    d670:	mov	w1, #0x2                   	// #2
    d674:	orr	w28, w9, w8
    d678:	mov	w0, w19
    d67c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d680:	eor	w0, w0, w19
    d684:	mov	w1, #0x11                  	// #17
    d688:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d68c:	ldur	w22, [x29, #-64]
    d690:	eor	w19, w0, w19, lsr #10
    d694:	mov	w1, #0xb                   	// #11
    d698:	mov	w0, w22
    d69c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d6a0:	eor	w0, w0, w22
    d6a4:	mov	w1, #0x7                   	// #7
    d6a8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d6ac:	ldur	w9, [x29, #-72]
    d6b0:	ldr	w10, [sp, #60]
    d6b4:	eor	w8, w0, w22, lsr #3
    d6b8:	mov	w1, #0x9                   	// #9
    d6bc:	add	w9, w21, w9
    d6c0:	add	w10, w27, w10
    d6c4:	add	w9, w9, w19
    d6c8:	add	w10, w10, w20
    d6cc:	add	w9, w9, w8
    d6d0:	add	w8, w10, w28
    d6d4:	add	w19, w8, w9
    d6d8:	ldr	w8, [sp, #44]
    d6dc:	mov	w0, w26
    d6e0:	stur	w9, [x29, #-60]
    d6e4:	add	w20, w19, w8
    d6e8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d6ec:	eor	w0, w0, w26
    d6f0:	mov	w1, #0xb                   	// #11
    d6f4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d6f8:	eor	w0, w0, w26
    d6fc:	mov	w1, #0x2                   	// #2
    d700:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d704:	ldr	w9, [sp, #64]
    d708:	mov	w1, #0xe                   	// #14
    d70c:	eor	w8, w25, w9
    d710:	and	w8, w26, w8
    d714:	and	w9, w25, w9
    d718:	add	w8, w8, w9
    d71c:	add	w8, w8, w0
    d720:	mov	w0, w20
    d724:	add	w28, w8, w19
    d728:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d72c:	eor	w0, w20, w0
    d730:	mov	w1, #0x5                   	// #5
    d734:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d738:	eor	w0, w20, w0
    d73c:	mov	w1, #0x6                   	// #6
    d740:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d744:	ldur	x8, [x29, #-8]
    d748:	ldur	w21, [x29, #-56]
    d74c:	mov	w23, w0
    d750:	mov	w1, #0x2                   	// #2
    d754:	ldur	w19, [x8, #-32]
    d758:	bic	w8, w24, w20
    d75c:	ldur	w24, [x29, #-76]
    d760:	mov	w0, w21
    d764:	str	w20, [sp, #76]
    d768:	and	w9, w24, w20
    d76c:	orr	w20, w9, w8
    d770:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d774:	eor	w0, w0, w21
    d778:	mov	w1, #0x11                  	// #17
    d77c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d780:	eor	w27, w0, w21, lsr #10
    d784:	ldur	w21, [x29, #-68]
    d788:	mov	w1, #0xb                   	// #11
    d78c:	mov	w0, w21
    d790:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d794:	eor	w0, w0, w21
    d798:	mov	w1, #0x7                   	// #7
    d79c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d7a0:	ldur	w9, [x29, #-16]
    d7a4:	ldr	w10, [sp, #68]
    d7a8:	eor	w8, w0, w21, lsr #3
    d7ac:	mov	w1, #0x9                   	// #9
    d7b0:	add	w9, w9, w22
    d7b4:	add	w10, w23, w10
    d7b8:	add	w9, w9, w27
    d7bc:	add	w10, w10, w19
    d7c0:	add	w9, w9, w8
    d7c4:	add	w8, w10, w20
    d7c8:	add	w19, w8, w9
    d7cc:	ldr	w8, [sp, #64]
    d7d0:	mov	w0, w28
    d7d4:	stur	w9, [x29, #-64]
    d7d8:	add	w20, w19, w8
    d7dc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d7e0:	eor	w0, w0, w28
    d7e4:	mov	w1, #0xb                   	// #11
    d7e8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d7ec:	eor	w0, w0, w28
    d7f0:	mov	w1, #0x2                   	// #2
    d7f4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d7f8:	eor	w8, w26, w25
    d7fc:	and	w8, w28, w8
    d800:	and	w9, w26, w25
    d804:	add	w8, w8, w9
    d808:	add	w8, w8, w0
    d80c:	mov	w1, #0xe                   	// #14
    d810:	mov	w0, w20
    d814:	str	w26, [sp, #72]
    d818:	add	w26, w8, w19
    d81c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d820:	eor	w0, w20, w0
    d824:	mov	w1, #0x5                   	// #5
    d828:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d82c:	eor	w0, w20, w0
    d830:	mov	w1, #0x6                   	// #6
    d834:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d838:	ldur	x8, [x29, #-8]
    d83c:	ldur	w23, [x29, #-60]
    d840:	mov	w22, w0
    d844:	mov	w1, #0x2                   	// #2
    d848:	ldur	w19, [x8, #-28]
    d84c:	bic	w8, w24, w20
    d850:	ldr	w24, [sp, #76]
    d854:	mov	w0, w23
    d858:	str	w20, [sp, #68]
    d85c:	and	w9, w24, w20
    d860:	orr	w20, w9, w8
    d864:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d868:	eor	w0, w0, w23
    d86c:	mov	w1, #0x11                  	// #17
    d870:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d874:	eor	w27, w0, w23, lsr #10
    d878:	ldr	w23, [sp, #80]
    d87c:	mov	w1, #0xb                   	// #11
    d880:	mov	w0, w23
    d884:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d888:	eor	w0, w0, w23
    d88c:	mov	w1, #0x7                   	// #7
    d890:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d894:	ldp	w9, w10, [x29, #-40]
    d898:	eor	w8, w0, w23, lsr #3
    d89c:	mov	w1, #0x9                   	// #9
    d8a0:	mov	w0, w26
    d8a4:	add	w9, w9, w21
    d8a8:	add	w10, w22, w10
    d8ac:	add	w9, w9, w27
    d8b0:	add	w10, w10, w19
    d8b4:	add	w9, w9, w8
    d8b8:	add	w8, w10, w20
    d8bc:	add	w19, w8, w9
    d8c0:	stur	w9, [x29, #-68]
    d8c4:	add	w20, w19, w25
    d8c8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d8cc:	eor	w0, w0, w26
    d8d0:	mov	w1, #0xb                   	// #11
    d8d4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d8d8:	eor	w0, w0, w26
    d8dc:	mov	w1, #0x2                   	// #2
    d8e0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d8e4:	ldr	w9, [sp, #72]
    d8e8:	mov	w1, #0xe                   	// #14
    d8ec:	str	w28, [sp, #44]
    d8f0:	eor	w8, w28, w9
    d8f4:	and	w8, w26, w8
    d8f8:	and	w9, w28, w9
    d8fc:	add	w8, w8, w9
    d900:	add	w8, w8, w0
    d904:	mov	w0, w20
    d908:	add	w28, w8, w19
    d90c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d910:	eor	w0, w20, w0
    d914:	mov	w1, #0x5                   	// #5
    d918:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d91c:	eor	w0, w20, w0
    d920:	mov	w1, #0x6                   	// #6
    d924:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d928:	ldur	x8, [x29, #-8]
    d92c:	ldr	w22, [sp, #68]
    d930:	str	w20, [sp, #64]
    d934:	mov	w25, w0
    d938:	ldur	w19, [x8, #-24]
    d93c:	bic	w8, w24, w20
    d940:	and	w9, w22, w20
    d944:	ldur	w20, [x29, #-64]
    d948:	mov	w1, #0x2                   	// #2
    d94c:	orr	w27, w9, w8
    d950:	mov	w0, w20
    d954:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d958:	eor	w0, w0, w20
    d95c:	mov	w1, #0x11                  	// #17
    d960:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d964:	ldur	w21, [x29, #-20]
    d968:	eor	w20, w0, w20, lsr #10
    d96c:	mov	w1, #0xb                   	// #11
    d970:	mov	w0, w21
    d974:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d978:	eor	w0, w0, w21
    d97c:	mov	w1, #0x7                   	// #7
    d980:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d984:	ldur	w9, [x29, #-44]
    d988:	ldur	w10, [x29, #-76]
    d98c:	eor	w8, w0, w21, lsr #3
    d990:	mov	w1, #0x9                   	// #9
    d994:	add	w9, w9, w23
    d998:	add	w10, w25, w10
    d99c:	add	w9, w9, w20
    d9a0:	add	w10, w10, w19
    d9a4:	add	w23, w9, w8
    d9a8:	add	w8, w10, w27
    d9ac:	add	w20, w8, w23
    d9b0:	ldr	w8, [sp, #72]
    d9b4:	mov	w0, w28
    d9b8:	add	w19, w20, w8
    d9bc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d9c0:	eor	w0, w0, w28
    d9c4:	mov	w1, #0xb                   	// #11
    d9c8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d9cc:	eor	w0, w0, w28
    d9d0:	mov	w1, #0x2                   	// #2
    d9d4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    d9d8:	ldr	w21, [sp, #44]
    d9dc:	mov	w1, #0xe                   	// #14
    d9e0:	str	w26, [sp, #56]
    d9e4:	eor	w8, w26, w21
    d9e8:	and	w8, w28, w8
    d9ec:	and	w9, w26, w21
    d9f0:	add	w8, w8, w9
    d9f4:	add	w8, w8, w0
    d9f8:	mov	w0, w19
    d9fc:	add	w24, w8, w20
    da00:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da04:	eor	w0, w19, w0
    da08:	mov	w1, #0x5                   	// #5
    da0c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da10:	eor	w0, w19, w0
    da14:	mov	w1, #0x6                   	// #6
    da18:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da1c:	ldur	x8, [x29, #-8]
    da20:	str	w19, [sp, #72]
    da24:	mov	w25, w0
    da28:	mov	w1, #0x2                   	// #2
    da2c:	ldur	w20, [x8, #-20]
    da30:	bic	w8, w22, w19
    da34:	ldr	w22, [sp, #64]
    da38:	and	w9, w22, w19
    da3c:	ldur	w19, [x29, #-68]
    da40:	orr	w26, w9, w8
    da44:	mov	w0, w19
    da48:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da4c:	eor	w0, w0, w19
    da50:	mov	w1, #0x11                  	// #17
    da54:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da58:	ldur	w27, [x29, #-24]
    da5c:	eor	w19, w0, w19, lsr #10
    da60:	mov	w1, #0xb                   	// #11
    da64:	mov	w0, w27
    da68:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da6c:	eor	w0, w0, w27
    da70:	mov	w1, #0x7                   	// #7
    da74:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    da78:	ldur	w9, [x29, #-48]
    da7c:	ldur	w10, [x29, #-20]
    da80:	eor	w8, w0, w27, lsr #3
    da84:	mov	w1, #0x9                   	// #9
    da88:	mov	w0, w24
    da8c:	add	w9, w9, w10
    da90:	ldr	w10, [sp, #76]
    da94:	add	w9, w9, w19
    da98:	add	w27, w9, w8
    da9c:	add	w10, w25, w10
    daa0:	add	w10, w10, w20
    daa4:	add	w8, w10, w26
    daa8:	add	w19, w8, w27
    daac:	add	w20, w19, w21
    dab0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dab4:	eor	w0, w0, w24
    dab8:	mov	w1, #0xb                   	// #11
    dabc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dac0:	eor	w0, w0, w24
    dac4:	mov	w1, #0x2                   	// #2
    dac8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dacc:	ldr	w9, [sp, #56]
    dad0:	mov	w1, #0xe                   	// #14
    dad4:	str	w28, [sp, #40]
    dad8:	eor	w8, w28, w9
    dadc:	and	w8, w24, w8
    dae0:	and	w9, w28, w9
    dae4:	add	w8, w8, w9
    dae8:	add	w8, w8, w0
    daec:	add	w8, w8, w19
    daf0:	mov	w0, w20
    daf4:	stur	w8, [x29, #-36]
    daf8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dafc:	eor	w0, w20, w0
    db00:	mov	w1, #0x5                   	// #5
    db04:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db08:	eor	w0, w20, w0
    db0c:	mov	w1, #0x6                   	// #6
    db10:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db14:	ldur	x8, [x29, #-8]
    db18:	ldr	w26, [sp, #72]
    db1c:	mov	w21, w0
    db20:	mov	w1, #0x2                   	// #2
    db24:	ldur	w19, [x8, #-16]
    db28:	bic	w8, w22, w20
    db2c:	and	w9, w26, w20
    db30:	mov	w0, w23
    db34:	stur	w20, [x29, #-76]
    db38:	orr	w20, w9, w8
    db3c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db40:	eor	w0, w0, w23
    db44:	mov	w1, #0x11                  	// #17
    db48:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db4c:	ldur	w22, [x29, #-28]
    db50:	eor	w25, w0, w23, lsr #10
    db54:	mov	w1, #0xb                   	// #11
    db58:	str	w23, [sp, #80]
    db5c:	mov	w0, w22
    db60:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db64:	eor	w0, w0, w22
    db68:	mov	w1, #0x7                   	// #7
    db6c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    db70:	ldur	w9, [x29, #-52]
    db74:	ldur	w10, [x29, #-24]
    db78:	eor	w8, w0, w22, lsr #3
    db7c:	mov	w1, #0x9                   	// #9
    db80:	add	w9, w9, w10
    db84:	ldr	w10, [sp, #68]
    db88:	add	w9, w9, w25
    db8c:	add	w28, w9, w8
    db90:	add	w10, w21, w10
    db94:	add	w10, w10, w19
    db98:	add	w8, w10, w20
    db9c:	ldur	w21, [x29, #-36]
    dba0:	add	w19, w8, w28
    dba4:	ldr	w8, [sp, #56]
    dba8:	mov	w0, w21
    dbac:	add	w20, w19, w8
    dbb0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dbb4:	eor	w0, w0, w21
    dbb8:	mov	w1, #0xb                   	// #11
    dbbc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dbc0:	eor	w0, w0, w21
    dbc4:	mov	w1, #0x2                   	// #2
    dbc8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dbcc:	ldr	w10, [sp, #40]
    dbd0:	mov	w1, #0xe                   	// #14
    dbd4:	str	w24, [sp, #60]
    dbd8:	eor	w8, w24, w10
    dbdc:	and	w8, w21, w8
    dbe0:	and	w9, w24, w10
    dbe4:	add	w8, w8, w9
    dbe8:	add	w8, w8, w0
    dbec:	mov	w0, w20
    dbf0:	mov	w22, w10
    dbf4:	add	w25, w8, w19
    dbf8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dbfc:	eor	w0, w20, w0
    dc00:	mov	w1, #0x5                   	// #5
    dc04:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc08:	eor	w0, w20, w0
    dc0c:	mov	w1, #0x6                   	// #6
    dc10:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc14:	ldur	x8, [x29, #-8]
    dc18:	mov	w21, w0
    dc1c:	mov	w1, #0x2                   	// #2
    dc20:	mov	w0, w27
    dc24:	ldur	w19, [x8, #-12]
    dc28:	bic	w8, w26, w20
    dc2c:	ldur	w26, [x29, #-76]
    dc30:	str	w20, [sp, #76]
    dc34:	and	w9, w26, w20
    dc38:	orr	w20, w9, w8
    dc3c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc40:	eor	w0, w0, w27
    dc44:	mov	w1, #0x11                  	// #17
    dc48:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc4c:	ldur	w24, [x29, #-32]
    dc50:	eor	w23, w0, w27, lsr #10
    dc54:	mov	w1, #0xb                   	// #11
    dc58:	stur	w27, [x29, #-20]
    dc5c:	mov	w0, w24
    dc60:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc64:	eor	w0, w0, w24
    dc68:	mov	w1, #0x7                   	// #7
    dc6c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dc70:	ldur	w9, [x29, #-56]
    dc74:	ldur	w10, [x29, #-28]
    dc78:	eor	w8, w0, w24, lsr #3
    dc7c:	mov	w1, #0x9                   	// #9
    dc80:	mov	w0, w25
    dc84:	add	w9, w9, w10
    dc88:	ldr	w10, [sp, #64]
    dc8c:	add	w9, w9, w23
    dc90:	add	w27, w9, w8
    dc94:	str	w25, [sp, #68]
    dc98:	add	w10, w21, w10
    dc9c:	add	w10, w10, w19
    dca0:	add	w8, w10, w20
    dca4:	add	w19, w8, w27
    dca8:	add	w24, w19, w22
    dcac:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dcb0:	eor	w0, w0, w25
    dcb4:	mov	w1, #0xb                   	// #11
    dcb8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dcbc:	eor	w0, w0, w25
    dcc0:	mov	w1, #0x2                   	// #2
    dcc4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dcc8:	ldr	w10, [sp, #60]
    dccc:	ldur	w9, [x29, #-36]
    dcd0:	mov	w1, #0xe                   	// #14
    dcd4:	eor	w8, w9, w10
    dcd8:	and	w8, w25, w8
    dcdc:	and	w9, w9, w10
    dce0:	add	w8, w8, w9
    dce4:	add	w8, w8, w0
    dce8:	mov	w0, w24
    dcec:	add	w25, w8, w19
    dcf0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dcf4:	eor	w0, w24, w0
    dcf8:	mov	w1, #0x5                   	// #5
    dcfc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd00:	eor	w0, w24, w0
    dd04:	mov	w1, #0x6                   	// #6
    dd08:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd0c:	ldur	x8, [x29, #-8]
    dd10:	ldr	w20, [sp, #76]
    dd14:	mov	w21, w0
    dd18:	mov	w1, #0x2                   	// #2
    dd1c:	ldur	w19, [x8, #-8]
    dd20:	bic	w8, w26, w24
    dd24:	and	w9, w20, w24
    dd28:	mov	w0, w28
    dd2c:	orr	w22, w9, w8
    dd30:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd34:	eor	w0, w0, w28
    dd38:	mov	w1, #0x11                  	// #17
    dd3c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd40:	ldur	w26, [x29, #-12]
    dd44:	eor	w23, w0, w28, lsr #10
    dd48:	mov	w1, #0xb                   	// #11
    dd4c:	stur	w28, [x29, #-24]
    dd50:	mov	w0, w26
    dd54:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd58:	eor	w0, w0, w26
    dd5c:	mov	w1, #0x7                   	// #7
    dd60:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dd64:	ldur	w9, [x29, #-60]
    dd68:	ldur	w10, [x29, #-32]
    dd6c:	eor	w8, w0, w26, lsr #3
    dd70:	mov	w1, #0x9                   	// #9
    dd74:	mov	w0, w25
    dd78:	add	w9, w9, w10
    dd7c:	ldr	w10, [sp, #72]
    dd80:	add	w9, w9, w23
    dd84:	add	w28, w9, w8
    dd88:	add	w10, w21, w10
    dd8c:	add	w10, w10, w19
    dd90:	add	w8, w10, w22
    dd94:	add	w19, w8, w28
    dd98:	ldr	w8, [sp, #60]
    dd9c:	add	w22, w19, w8
    dda0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dda4:	eor	w0, w0, w25
    dda8:	mov	w1, #0xb                   	// #11
    ddac:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ddb0:	eor	w0, w0, w25
    ddb4:	mov	w1, #0x2                   	// #2
    ddb8:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ddbc:	ldur	w10, [x29, #-36]
    ddc0:	ldr	w9, [sp, #68]
    ddc4:	mov	w1, #0xe                   	// #14
    ddc8:	eor	w8, w9, w10
    ddcc:	and	w8, w25, w8
    ddd0:	and	w9, w9, w10
    ddd4:	add	w8, w8, w9
    ddd8:	add	w8, w8, w0
    dddc:	mov	w0, w22
    dde0:	add	w19, w8, w19
    dde4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dde8:	eor	w0, w22, w0
    ddec:	mov	w1, #0x5                   	// #5
    ddf0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ddf4:	eor	w0, w22, w0
    ddf8:	mov	w1, #0x6                   	// #6
    ddfc:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de00:	ldur	x8, [x29, #-8]
    de04:	mov	w26, w0
    de08:	and	w9, w24, w22
    de0c:	mov	w1, #0x2                   	// #2
    de10:	ldur	w21, [x8, #-4]
    de14:	bic	w8, w20, w22
    de18:	mov	w0, w27
    de1c:	orr	w23, w9, w8
    de20:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de24:	eor	w0, w0, w27
    de28:	mov	w1, #0x11                  	// #17
    de2c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de30:	ldur	w20, [x29, #-72]
    de34:	stur	w27, [x29, #-28]
    de38:	eor	w27, w0, w27, lsr #10
    de3c:	mov	w1, #0xb                   	// #11
    de40:	mov	w0, w20
    de44:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de48:	eor	w0, w0, w20
    de4c:	mov	w1, #0x7                   	// #7
    de50:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de54:	ldur	w9, [x29, #-64]
    de58:	ldur	w10, [x29, #-12]
    de5c:	eor	w8, w0, w20, lsr #3
    de60:	mov	w1, #0x9                   	// #9
    de64:	mov	w0, w19
    de68:	add	w9, w9, w10
    de6c:	ldur	w10, [x29, #-76]
    de70:	add	w9, w9, w27
    de74:	add	w9, w9, w8
    de78:	stur	w9, [x29, #-12]
    de7c:	add	w10, w26, w10
    de80:	add	w10, w10, w21
    de84:	add	w8, w10, w23
    de88:	add	w21, w8, w9
    de8c:	ldur	w8, [x29, #-36]
    de90:	add	w27, w21, w8
    de94:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    de98:	eor	w0, w0, w19
    de9c:	mov	w1, #0xb                   	// #11
    dea0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dea4:	eor	w0, w0, w19
    dea8:	mov	w1, #0x2                   	// #2
    deac:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    deb0:	ldr	w20, [sp, #68]
    deb4:	mov	w1, #0xe                   	// #14
    deb8:	eor	w8, w25, w20
    debc:	and	w8, w19, w8
    dec0:	and	w9, w25, w20
    dec4:	add	w8, w8, w9
    dec8:	add	w8, w8, w0
    decc:	mov	w0, w27
    ded0:	add	w23, w8, w21
    ded4:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    ded8:	eor	w0, w27, w0
    dedc:	mov	w1, #0x5                   	// #5
    dee0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dee4:	eor	w0, w27, w0
    dee8:	mov	w1, #0x6                   	// #6
    deec:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    def0:	ldur	x8, [x29, #-8]
    def4:	mov	w26, w0
    def8:	and	w9, w22, w27
    defc:	mov	w1, #0x2                   	// #2
    df00:	ldr	w21, [x8]
    df04:	bic	w8, w24, w27
    df08:	mov	w0, w28
    df0c:	stur	w24, [x29, #-36]
    df10:	stur	w22, [x29, #-76]
    df14:	mov	w24, w27
    df18:	orr	w22, w9, w8
    df1c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df20:	eor	w0, w0, w28
    df24:	mov	w1, #0x11                  	// #17
    df28:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df2c:	stur	w28, [x29, #-32]
    df30:	eor	w27, w0, w28, lsr #10
    df34:	ldur	w28, [x29, #-16]
    df38:	mov	w1, #0xb                   	// #11
    df3c:	mov	w0, w28
    df40:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df44:	eor	w0, w0, w28
    df48:	mov	w1, #0x7                   	// #7
    df4c:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df50:	ldp	w10, w9, [x29, #-72]
    df54:	eor	w8, w0, w28, lsr #3
    df58:	mov	w1, #0x9                   	// #9
    df5c:	mov	w0, w23
    df60:	add	w9, w9, w10
    df64:	ldr	w10, [sp, #76]
    df68:	add	w9, w9, w27
    df6c:	add	w9, w9, w8
    df70:	add	w10, w26, w10
    df74:	add	w10, w10, w21
    df78:	add	w8, w10, w22
    df7c:	add	w21, w8, w9
    df80:	mov	w22, w9
    df84:	add	w20, w21, w20
    df88:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df8c:	eor	w0, w0, w23
    df90:	mov	w1, #0xb                   	// #11
    df94:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    df98:	eor	w0, w0, w23
    df9c:	mov	w1, #0x2                   	// #2
    dfa0:	bl	e058 <lzma_crc64@@XZ_5.0+0x1cd0>
    dfa4:	eor	w8, w19, w25
    dfa8:	and	w9, w19, w25
    dfac:	and	w8, w23, w8
    dfb0:	add	w8, w8, w9
    dfb4:	ldr	x10, [sp, #48]
    dfb8:	add	w8, w8, w0
    dfbc:	stp	w19, w25, [sp, #72]
    dfc0:	add	w25, w8, w21
    dfc4:	ldur	x21, [x29, #-8]
    dfc8:	add	x10, x10, #0x10
    dfcc:	cmp	x10, #0x30
    dfd0:	str	w23, [sp, #64]
    dfd4:	add	x21, x21, #0x40
    dfd8:	b.cc	d044 <lzma_crc64@@XZ_5.0+0xcbc>  // b.lo, b.ul, b.last
    dfdc:	ldp	w8, w9, [sp]
    dfe0:	ldr	w10, [sp, #64]
    dfe4:	ldp	w11, w12, [sp, #72]
    dfe8:	ldp	w13, w14, [sp, #32]
    dfec:	ldur	w15, [x29, #-76]
    dff0:	add	w9, w10, w9
    dff4:	ldr	w10, [sp, #8]
    dff8:	ldur	w16, [x29, #-36]
    dffc:	add	w14, w15, w14
    e000:	ldr	w15, [sp, #20]
    e004:	add	w10, w11, w10
    e008:	ldr	w11, [sp, #12]
    e00c:	add	w8, w25, w8
    e010:	add	w15, w16, w15
    e014:	ldr	x16, [sp, #24]
    e018:	add	w11, w12, w11
    e01c:	ldr	w12, [sp, #16]
    e020:	add	w13, w24, w13
    e024:	stp	w8, w9, [x16]
    e028:	stp	w10, w11, [x16, #8]
    e02c:	add	w12, w20, w12
    e030:	stp	w12, w13, [x16, #16]
    e034:	stp	w14, w15, [x16, #24]
    e038:	ldp	x20, x19, [sp, #240]
    e03c:	ldp	x22, x21, [sp, #224]
    e040:	ldp	x24, x23, [sp, #208]
    e044:	ldp	x26, x25, [sp, #192]
    e048:	ldp	x28, x27, [sp, #176]
    e04c:	ldp	x29, x30, [sp, #160]
    e050:	add	sp, sp, #0x100
    e054:	ret
    e058:	ror	w0, w0, w1
    e05c:	ret
    e060:	sub	sp, sp, #0x90
    e064:	mov	x2, x0
    e068:	movi	v0.2d, #0x0
    e06c:	mov	x0, sp
    e070:	mov	x1, xzr
    e074:	stp	x29, x30, [sp, #128]
    e078:	add	x29, sp, #0x80
    e07c:	str	xzr, [sp, #112]
    e080:	stp	q0, q0, [sp, #80]
    e084:	stp	q0, q0, [sp, #48]
    e088:	stp	q0, q0, [sp, #16]
    e08c:	str	q0, [sp]
    e090:	bl	e0c0 <lzma_crc64@@XZ_5.0+0x1d38>
    e094:	tbz	w0, #0, e0a0 <lzma_crc64@@XZ_5.0+0x1d18>
    e098:	mov	x0, #0xffffffffffffffff    	// #-1
    e09c:	b	e0b4 <lzma_crc64@@XZ_5.0+0x1d2c>
    e0a0:	ldp	w9, w8, [sp, #108]
    e0a4:	ldr	w10, [sp, #8]
    e0a8:	add	x8, x8, x9
    e0ac:	add	x8, x10, x8, lsl #2
    e0b0:	add	x0, x8, #0xe0
    e0b4:	ldp	x29, x30, [sp, #128]
    e0b8:	add	sp, sp, #0x90
    e0bc:	ret
    e0c0:	stp	x29, x30, [sp, #-48]!
    e0c4:	stp	x22, x21, [sp, #16]
    e0c8:	stp	x20, x19, [sp, #32]
    e0cc:	ldr	x8, [x2, #8]
    e0d0:	mov	w10, #0xf000                	// #61440
    e0d4:	movk	w10, #0x5fff, lsl #16
    e0d8:	mov	x29, sp
    e0dc:	sub	x9, x8, #0x1, lsl #12
    e0e0:	cmp	x9, x10
    e0e4:	b.hi	e21c <lzma_crc64@@XZ_5.0+0x1e94>  // b.pmore
    e0e8:	ldp	x9, x10, [x2, #24]
    e0ec:	mov	x20, x2
    e0f0:	cmp	x10, x9
    e0f4:	b.hi	e21c <lzma_crc64@@XZ_5.0+0x1e94>  // b.pmore
    e0f8:	ldr	x10, [x20]
    e0fc:	lsr	x11, x8, #1
    e100:	mov	w13, #0x40000000            	// #1073741824
    e104:	cmp	w11, w13
    e108:	add	w13, w10, w8
    e10c:	str	w13, [x0, #12]
    e110:	ldr	x14, [x20, #16]
    e114:	ubfx	x12, x8, #2, #31
    e118:	csel	w11, w12, w11, hi  // hi = pmore
    e11c:	mov	x19, x0
    e120:	add	x9, x14, x9
    e124:	add	x10, x9, x10
    e128:	ldr	w8, [x0, #8]
    e12c:	add	w11, w11, w13
    e130:	str	w9, [x0, #16]
    e134:	lsr	x10, x10, #1
    e138:	ldr	x0, [x0]
    e13c:	add	w10, w11, w10
    e140:	add	w9, w10, w9
    e144:	mov	x21, x1
    e148:	add	w9, w9, #0x80, lsl #12
    e14c:	str	w9, [x19, #8]
    e150:	cbz	x0, e168 <lzma_crc64@@XZ_5.0+0x1de0>
    e154:	cmp	w8, w9
    e158:	b.eq	e168 <lzma_crc64@@XZ_5.0+0x1de0>  // b.none
    e15c:	mov	x1, x21
    e160:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e164:	str	xzr, [x19]
    e168:	ldr	x8, [x20, #24]
    e16c:	mov	w0, #0x1                   	// #1
    e170:	str	w8, [x19, #100]
    e174:	ldr	w10, [x20, #32]
    e178:	str	w10, [x19, #96]
    e17c:	ldr	w9, [x20, #8]
    e180:	add	w8, w9, #0x1
    e184:	str	w8, [x19, #84]
    e188:	ldr	w11, [x20, #40]
    e18c:	sub	w12, w11, #0x3
    e190:	cmp	w12, #0x11
    e194:	b.hi	e220 <lzma_crc64@@XZ_5.0+0x1e98>  // b.pmore
    e198:	adrp	x14, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
    e19c:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1a0:	add	x14, x14, #0xe20
    e1a4:	ldr	x13, [x13, #3912]
    e1a8:	adr	x15, e1c0 <lzma_crc64@@XZ_5.0+0x1e38>
    e1ac:	ldrb	w16, [x14, x12]
    e1b0:	add	x15, x15, x16, lsl #2
    e1b4:	adrp	x14, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1b8:	ldr	x14, [x14, #3896]
    e1bc:	br	x15
    e1c0:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1c4:	adrp	x14, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1c8:	ldr	x13, [x13, #4024]
    e1cc:	ldr	x14, [x14, #4064]
    e1d0:	b	e20c <lzma_crc64@@XZ_5.0+0x1e84>
    e1d4:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1d8:	adrp	x14, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1dc:	ldr	x13, [x13, #4032]
    e1e0:	ldr	x14, [x14, #4048]
    e1e4:	b	e20c <lzma_crc64@@XZ_5.0+0x1e84>
    e1e8:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1ec:	adrp	x14, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e1f0:	ldr	x13, [x13, #3928]
    e1f4:	ldr	x14, [x14, #3888]
    e1f8:	b	e20c <lzma_crc64@@XZ_5.0+0x1e84>
    e1fc:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e200:	adrp	x14, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    e204:	ldr	x13, [x13, #4000]
    e208:	ldr	x14, [x14, #4016]
    e20c:	and	w12, w11, #0xf
    e210:	cmp	w12, w10
    e214:	stp	x14, x13, [x19, #48]
    e218:	b.ls	e230 <lzma_crc64@@XZ_5.0+0x1ea8>  // b.plast
    e21c:	mov	w0, #0x1                   	// #1
    e220:	ldp	x20, x19, [sp, #32]
    e224:	ldp	x22, x21, [sp, #16]
    e228:	ldp	x29, x30, [sp], #48
    e22c:	ret
    e230:	cmp	w12, #0x2
    e234:	and	w22, w11, #0x10
    e238:	b.ne	e244 <lzma_crc64@@XZ_5.0+0x1ebc>  // b.any
    e23c:	mov	w9, #0xffff                	// #65535
    e240:	b	e280 <lzma_crc64@@XZ_5.0+0x1ef8>
    e244:	sub	w9, w9, #0x1
    e248:	orr	w9, w9, w9, lsr #1
    e24c:	orr	w9, w9, w9, lsr #2
    e250:	orr	w9, w9, w9, lsr #4
    e254:	lsr	w10, w9, #1
    e258:	orr	w9, w10, w9, lsr #9
    e25c:	mov	w10, #0x1                   	// #1
    e260:	orr	w9, w9, #0xffff
    e264:	movk	w10, #0x100, lsl #16
    e268:	cmp	w9, w10
    e26c:	b.cc	e280 <lzma_crc64@@XZ_5.0+0x1ef8>  // b.lo, b.ul, b.last
    e270:	lsr	w9, w9, #1
    e274:	cmp	w12, #0x3
    e278:	mov	w10, #0xffffff              	// #16777215
    e27c:	csel	w9, w10, w9, eq  // eq = none
    e280:	cmp	w12, #0x2
    e284:	mov	w11, #0x401                 	// #1025
    e288:	ldp	w13, w10, [x19, #108]
    e28c:	csinc	w11, w11, wzr, hi  // hi = pmore
    e290:	str	w9, [x19, #88]
    e294:	add	w9, w9, w11
    e298:	cmp	w12, #0x3
    e29c:	add	w11, w9, #0x10, lsl #12
    e2a0:	lsr	w14, w22, #4
    e2a4:	csel	w9, w11, w9, hi  // hi = pmore
    e2a8:	lsl	w8, w8, w14
    e2ac:	cmp	w13, w9
    e2b0:	stp	w9, w8, [x19, #108]
    e2b4:	b.ne	e2c0 <lzma_crc64@@XZ_5.0+0x1f38>  // b.any
    e2b8:	cmp	w10, w8
    e2bc:	b.eq	e2e0 <lzma_crc64@@XZ_5.0+0x1f58>  // b.none
    e2c0:	ldr	x0, [x19, #64]
    e2c4:	mov	x1, x21
    e2c8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e2cc:	ldr	x0, [x19, #72]
    e2d0:	mov	x1, x21
    e2d4:	str	xzr, [x19, #64]
    e2d8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e2dc:	str	xzr, [x19, #72]
    e2e0:	ldr	w8, [x20, #44]
    e2e4:	str	w8, [x19, #92]
    e2e8:	cbz	w8, e2f4 <lzma_crc64@@XZ_5.0+0x1f6c>
    e2ec:	mov	w0, wzr
    e2f0:	b	e220 <lzma_crc64@@XZ_5.0+0x1e98>
    e2f4:	ldr	w8, [x19, #96]
    e2f8:	mov	w0, wzr
    e2fc:	cbnz	w22, e30c <lzma_crc64@@XZ_5.0+0x1f84>
    e300:	lsr	w8, w8, #2
    e304:	add	w8, w8, #0x4
    e308:	b	e314 <lzma_crc64@@XZ_5.0+0x1f8c>
    e30c:	lsr	w8, w8, #1
    e310:	add	w8, w8, #0x10
    e314:	str	w8, [x19, #92]
    e318:	b	e220 <lzma_crc64@@XZ_5.0+0x1e98>
    e31c:	sub	sp, sp, #0x80
    e320:	stp	x29, x30, [sp, #64]
    e324:	stp	x22, x21, [sp, #96]
    e328:	stp	x20, x19, [sp, #112]
    e32c:	ldr	x21, [x0]
    e330:	mov	x22, x3
    e334:	mov	x19, x2
    e338:	mov	x20, x1
    e33c:	str	x23, [sp, #80]
    e340:	add	x29, sp, #0x40
    e344:	cbnz	x21, e3b8 <lzma_crc64@@XZ_5.0+0x2030>
    e348:	mov	x23, x0
    e34c:	mov	w0, #0xe0                  	// #224
    e350:	mov	x1, x20
    e354:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    e358:	cbz	x0, e404 <lzma_crc64@@XZ_5.0+0x207c>
    e35c:	adrp	x8, e000 <lzma_crc64@@XZ_5.0+0x1c78>
    e360:	adrp	x9, e000 <lzma_crc64@@XZ_5.0+0x1c78>
    e364:	add	x8, x8, #0x434
    e368:	add	x9, x9, #0x53c
    e36c:	stp	x8, x9, [x23, #24]
    e370:	adrp	x8, e000 <lzma_crc64@@XZ_5.0+0x1c78>
    e374:	add	x8, x8, #0x5b0
    e378:	mov	x21, x0
    e37c:	str	x8, [x23, #64]
    e380:	mov	x8, #0xffffffffffffffff    	// #-1
    e384:	movi	v0.2d, #0x0
    e388:	str	x0, [x23]
    e38c:	str	xzr, [x0, #32]
    e390:	str	wzr, [x0, #40]
    e394:	stur	xzr, [x0, #140]
    e398:	stp	xzr, xzr, [x0, #8]
    e39c:	str	xzr, [x0]
    e3a0:	stp	xzr, xzr, [x0, #96]
    e3a4:	stp	xzr, x8, [x0, #152]
    e3a8:	stur	q0, [x0, #168]
    e3ac:	stur	q0, [x0, #184]
    e3b0:	stur	q0, [x0, #200]
    e3b4:	str	xzr, [x0, #216]
    e3b8:	ldr	x2, [x19, #16]
    e3bc:	mov	x3, sp
    e3c0:	mov	x0, x21
    e3c4:	mov	x1, x20
    e3c8:	blr	x22
    e3cc:	cbnz	w0, e41c <lzma_crc64@@XZ_5.0+0x2094>
    e3d0:	add	x22, x21, #0x20
    e3d4:	mov	x2, sp
    e3d8:	mov	x0, x22
    e3dc:	mov	x1, x20
    e3e0:	bl	e0c0 <lzma_crc64@@XZ_5.0+0x1d38>
    e3e4:	tbz	w0, #0, e3f0 <lzma_crc64@@XZ_5.0+0x2068>
    e3e8:	mov	w0, #0x8                   	// #8
    e3ec:	b	e41c <lzma_crc64@@XZ_5.0+0x2094>
    e3f0:	mov	x2, sp
    e3f4:	mov	x0, x22
    e3f8:	mov	x1, x20
    e3fc:	bl	e60c <lzma_crc64@@XZ_5.0+0x2284>
    e400:	tbz	w0, #0, e40c <lzma_crc64@@XZ_5.0+0x2084>
    e404:	mov	w0, #0x5                   	// #5
    e408:	b	e41c <lzma_crc64@@XZ_5.0+0x2094>
    e40c:	add	x0, x21, #0x98
    e410:	add	x2, x19, #0x18
    e414:	mov	x1, x20
    e418:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
    e41c:	ldp	x20, x19, [sp, #112]
    e420:	ldp	x22, x21, [sp, #96]
    e424:	ldr	x23, [sp, #80]
    e428:	ldp	x29, x30, [sp, #64]
    e42c:	add	sp, sp, #0x80
    e430:	ret
    e434:	sub	sp, sp, #0x70
    e438:	stp	x29, x30, [sp, #16]
    e43c:	add	x29, sp, #0x10
    e440:	stp	x28, x27, [sp, #32]
    e444:	ldr	w27, [x29, #96]
    e448:	stp	x26, x25, [sp, #48]
    e44c:	stp	x24, x23, [sp, #64]
    e450:	stp	x22, x21, [sp, #80]
    e454:	stp	x20, x19, [sp, #96]
    e458:	mov	x19, x7
    e45c:	mov	x20, x6
    e460:	mov	x21, x5
    e464:	mov	x22, x4
    e468:	mov	x23, x3
    e46c:	mov	x25, x1
    e470:	mov	x26, x0
    e474:	add	x28, x0, #0x20
    e478:	str	x2, [sp, #8]
    e47c:	b	e488 <lzma_crc64@@XZ_5.0+0x2100>
    e480:	mov	w8, #0x1                   	// #1
    e484:	tbz	w8, #0, e518 <lzma_crc64@@XZ_5.0+0x2190>
    e488:	ldr	x8, [x20]
    e48c:	cmp	x8, x19
    e490:	b.cs	e514 <lzma_crc64@@XZ_5.0+0x218c>  // b.hs, b.nlast
    e494:	cbnz	w27, e4a4 <lzma_crc64@@XZ_5.0+0x211c>
    e498:	ldr	x8, [x23]
    e49c:	cmp	x8, x22
    e4a0:	b.cs	e514 <lzma_crc64@@XZ_5.0+0x218c>  // b.hs, b.nlast
    e4a4:	ldr	w8, [x26, #136]
    e4a8:	cbnz	w8, e4e4 <lzma_crc64@@XZ_5.0+0x215c>
    e4ac:	ldr	w8, [x26, #56]
    e4b0:	ldr	w9, [x26, #64]
    e4b4:	cmp	w8, w9
    e4b8:	b.cc	e4e4 <lzma_crc64@@XZ_5.0+0x215c>  // b.lo, b.ul, b.last
    e4bc:	ldr	x2, [sp, #8]
    e4c0:	mov	x0, x26
    e4c4:	mov	x1, x25
    e4c8:	mov	x3, x23
    e4cc:	mov	x4, x22
    e4d0:	mov	w5, w27
    e4d4:	bl	e75c <lzma_mf_is_supported@@XZ_5.0+0x2c>
    e4d8:	cmp	w0, #0x0
    e4dc:	csel	w24, w24, w0, eq  // eq = none
    e4e0:	cbnz	w0, e518 <lzma_crc64@@XZ_5.0+0x2190>
    e4e4:	ldp	x0, x8, [x26]
    e4e8:	mov	x1, x28
    e4ec:	mov	x2, x21
    e4f0:	mov	x3, x20
    e4f4:	mov	x4, x19
    e4f8:	blr	x8
    e4fc:	cbz	w0, e480 <lzma_crc64@@XZ_5.0+0x20f8>
    e500:	mov	w8, wzr
    e504:	mov	w24, w0
    e508:	str	wzr, [x26, #136]
    e50c:	tbnz	w8, #0, e488 <lzma_crc64@@XZ_5.0+0x2100>
    e510:	b	e518 <lzma_crc64@@XZ_5.0+0x2190>
    e514:	mov	w24, wzr
    e518:	mov	w0, w24
    e51c:	ldp	x20, x19, [sp, #96]
    e520:	ldp	x22, x21, [sp, #80]
    e524:	ldp	x24, x23, [sp, #64]
    e528:	ldp	x26, x25, [sp, #48]
    e52c:	ldp	x28, x27, [sp, #32]
    e530:	ldp	x29, x30, [sp, #16]
    e534:	add	sp, sp, #0x70
    e538:	ret
    e53c:	stp	x29, x30, [sp, #-32]!
    e540:	stp	x20, x19, [sp, #16]
    e544:	mov	x20, x0
    e548:	add	x0, x0, #0x98
    e54c:	mov	x29, sp
    e550:	mov	x19, x1
    e554:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    e558:	ldr	x0, [x20, #104]
    e55c:	mov	x1, x19
    e560:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e564:	ldr	x0, [x20, #96]
    e568:	mov	x1, x19
    e56c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e570:	ldr	x0, [x20, #32]
    e574:	mov	x1, x19
    e578:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e57c:	ldr	x8, [x20, #16]
    e580:	ldr	x0, [x20]
    e584:	mov	x1, x19
    e588:	cbz	x8, e594 <lzma_crc64@@XZ_5.0+0x220c>
    e58c:	blr	x8
    e590:	b	e598 <lzma_crc64@@XZ_5.0+0x2210>
    e594:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e598:	mov	x0, x20
    e59c:	mov	x1, x19
    e5a0:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e5a4:	ldp	x20, x19, [sp, #16]
    e5a8:	ldp	x29, x30, [sp], #32
    e5ac:	ret
    e5b0:	stp	x29, x30, [sp, #-48]!
    e5b4:	stp	x20, x19, [sp, #32]
    e5b8:	ldr	x8, [x0, #24]
    e5bc:	str	x21, [sp, #16]
    e5c0:	mov	x29, sp
    e5c4:	cbz	x8, e5f8 <lzma_crc64@@XZ_5.0+0x2270>
    e5c8:	mov	x21, x0
    e5cc:	ldr	x0, [x0]
    e5d0:	mov	x20, x1
    e5d4:	mov	x1, x3
    e5d8:	mov	x19, x3
    e5dc:	blr	x8
    e5e0:	cbnz	w0, e5fc <lzma_crc64@@XZ_5.0+0x2274>
    e5e4:	add	x0, x21, #0x98
    e5e8:	add	x2, x19, #0x10
    e5ec:	mov	x1, x20
    e5f0:	bl	3904 <lzma_version_string@@XZ_5.0+0x234>
    e5f4:	b	e5fc <lzma_crc64@@XZ_5.0+0x2274>
    e5f8:	mov	w0, #0xb                   	// #11
    e5fc:	ldp	x20, x19, [sp, #32]
    e600:	ldr	x21, [sp, #16]
    e604:	ldp	x29, x30, [sp], #48
    e608:	ret
    e60c:	stp	x29, x30, [sp, #-48]!
    e610:	stp	x20, x19, [sp, #32]
    e614:	ldr	x8, [x0]
    e618:	str	x21, [sp, #16]
    e61c:	mov	x20, x2
    e620:	mov	x19, x0
    e624:	mov	x21, x1
    e628:	mov	x29, sp
    e62c:	cbnz	x8, e644 <lzma_crc64@@XZ_5.0+0x22bc>
    e630:	ldr	w0, [x19, #8]
    e634:	mov	x1, x21
    e638:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    e63c:	str	x0, [x19]
    e640:	cbz	x0, e71c <lzma_crc64@@XZ_5.0+0x2394>
    e644:	ldr	w8, [x19, #84]
    e648:	ldr	x0, [x19, #64]
    e64c:	stp	xzr, xzr, [x19, #24]
    e650:	str	wzr, [x19, #40]
    e654:	str	w8, [x19, #20]
    e658:	cbz	x0, e670 <lzma_crc64@@XZ_5.0+0x22e8>
    e65c:	ldr	w8, [x19, #108]
    e660:	mov	w1, wzr
    e664:	lsl	x2, x8, #2
    e668:	bl	3230 <memset@plt>
    e66c:	b	e6a4 <lzma_crc64@@XZ_5.0+0x231c>
    e670:	ldr	w8, [x19, #108]
    e674:	mov	x1, x21
    e678:	lsl	x0, x8, #2
    e67c:	bl	371c <lzma_version_string@@XZ_5.0+0x4c>
    e680:	ldr	w8, [x19, #112]
    e684:	str	x0, [x19, #64]
    e688:	mov	x1, x21
    e68c:	lsl	x0, x8, #2
    e690:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    e694:	str	x0, [x19, #72]
    e698:	cbz	x0, e6fc <lzma_crc64@@XZ_5.0+0x2374>
    e69c:	ldr	x8, [x19, #64]
    e6a0:	cbz	x8, e6fc <lzma_crc64@@XZ_5.0+0x2374>
    e6a4:	str	wzr, [x19, #80]
    e6a8:	ldr	x8, [x20, #48]
    e6ac:	cbz	x8, e6f0 <lzma_crc64@@XZ_5.0+0x2368>
    e6b0:	ldr	w9, [x20, #56]
    e6b4:	cbz	w9, e6f0 <lzma_crc64@@XZ_5.0+0x2368>
    e6b8:	ldr	w10, [x19, #8]
    e6bc:	ldr	x0, [x19]
    e6c0:	add	x8, x8, x9
    e6c4:	cmp	w9, w10
    e6c8:	csel	w2, w9, w10, cc  // cc = lo, ul, last
    e6cc:	sub	x1, x8, x2
    e6d0:	str	w2, [x19, #36]
    e6d4:	bl	3090 <memcpy@plt>
    e6d8:	ldr	x8, [x19, #56]
    e6dc:	ldr	w1, [x19, #36]
    e6e0:	mov	w9, #0x1                   	// #1
    e6e4:	mov	x0, x19
    e6e8:	str	w9, [x19, #104]
    e6ec:	blr	x8
    e6f0:	mov	w0, wzr
    e6f4:	str	wzr, [x19, #104]
    e6f8:	b	e720 <lzma_crc64@@XZ_5.0+0x2398>
    e6fc:	ldr	x0, [x19, #64]
    e700:	mov	x1, x21
    e704:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e708:	ldr	x0, [x19, #72]
    e70c:	mov	x1, x21
    e710:	str	xzr, [x19, #64]
    e714:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    e718:	str	xzr, [x19, #72]
    e71c:	mov	w0, #0x1                   	// #1
    e720:	ldp	x20, x19, [sp, #32]
    e724:	ldr	x21, [sp, #16]
    e728:	ldp	x29, x30, [sp], #48
    e72c:	ret

000000000000e730 <lzma_mf_is_supported@@XZ_5.0>:
    e730:	sub	w8, w0, #0x3
    e734:	orr	w9, w0, #0x1
    e738:	cmp	w8, #0x2
    e73c:	cset	w8, cc  // cc = lo, ul, last
    e740:	cmp	w9, #0x13
    e744:	cset	w9, eq  // eq = none
    e748:	cmp	w0, #0x14
    e74c:	orr	w8, w9, w8
    e750:	cset	w9, eq  // eq = none
    e754:	orr	w0, w9, w8
    e758:	ret
    e75c:	sub	sp, sp, #0x60
    e760:	stp	x29, x30, [sp, #16]
    e764:	stp	x24, x23, [sp, #48]
    e768:	stp	x22, x21, [sp, #64]
    e76c:	stp	x20, x19, [sp, #80]
    e770:	ldr	w8, [x0, #40]
    e774:	ldr	w9, [x0, #48]
    e778:	ldr	w10, [x0, #56]
    e77c:	str	x25, [sp, #32]
    e780:	mov	w21, w5
    e784:	sub	w8, w8, w9
    e788:	mov	x22, x4
    e78c:	mov	x23, x3
    e790:	mov	x24, x2
    e794:	mov	x25, x1
    e798:	mov	x19, x0
    e79c:	cmp	w10, w8
    e7a0:	add	x20, x0, #0x20
    e7a4:	add	x29, sp, #0x10
    e7a8:	b.cc	e7b4 <lzma_mf_is_supported@@XZ_5.0+0x84>  // b.lo, b.ul, b.last
    e7ac:	mov	x0, x20
    e7b0:	bl	e8a8 <lzma_mf_is_supported@@XZ_5.0+0x178>
    e7b4:	ldr	w8, [x19, #68]
    e7b8:	str	x8, [x29, #24]
    e7bc:	ldr	x8, [x19, #176]
    e7c0:	cbz	x8, e7f4 <lzma_mf_is_supported@@XZ_5.0+0xc4>
    e7c4:	ldr	x0, [x19, #152]
    e7c8:	ldr	x5, [x19, #32]
    e7cc:	ldr	w7, [x19, #40]
    e7d0:	add	x6, x29, #0x18
    e7d4:	mov	x1, x25
    e7d8:	mov	x2, x24
    e7dc:	mov	x3, x23
    e7e0:	mov	x4, x22
    e7e4:	str	w21, [sp]
    e7e8:	blr	x8
    e7ec:	mov	w22, w0
    e7f0:	b	e828 <lzma_mf_is_supported@@XZ_5.0+0xf8>
    e7f4:	ldr	x3, [x19, #32]
    e7f8:	ldr	w5, [x19, #40]
    e7fc:	add	x4, x29, #0x18
    e800:	mov	x0, x24
    e804:	mov	x1, x23
    e808:	mov	x2, x22
    e80c:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
    e810:	cbz	w21, e824 <lzma_mf_is_supported@@XZ_5.0+0xf4>
    e814:	ldr	x8, [x23]
    e818:	cmp	x8, x22
    e81c:	cset	w22, eq  // eq = none
    e820:	b	e828 <lzma_mf_is_supported@@XZ_5.0+0xf8>
    e824:	mov	w22, wzr
    e828:	ldr	w8, [x29, #24]
    e82c:	cmp	w22, #0x1
    e830:	str	w8, [x19, #68]
    e834:	b.ne	e844 <lzma_mf_is_supported@@XZ_5.0+0x114>  // b.any
    e838:	mov	w22, wzr
    e83c:	str	w21, [x19, #136]
    e840:	b	e854 <lzma_mf_is_supported@@XZ_5.0+0x124>
    e844:	ldr	w9, [x19, #48]
    e848:	cmp	w9, w8
    e84c:	b.cs	e858 <lzma_mf_is_supported@@XZ_5.0+0x128>  // b.hs, b.nlast
    e850:	sub	w8, w8, w9
    e854:	str	w8, [x19, #64]
    e858:	ldr	w1, [x19, #72]
    e85c:	cbz	w1, e888 <lzma_mf_is_supported@@XZ_5.0+0x158>
    e860:	ldr	w8, [x19, #56]
    e864:	ldr	w9, [x19, #64]
    e868:	cmp	w8, w9
    e86c:	b.cs	e888 <lzma_mf_is_supported@@XZ_5.0+0x158>  // b.hs, b.nlast
    e870:	ldr	x9, [x19, #88]
    e874:	sub	w8, w8, w1
    e878:	mov	x0, x20
    e87c:	str	wzr, [x19, #72]
    e880:	str	w8, [x19, #56]
    e884:	blr	x9
    e888:	mov	w0, w22
    e88c:	ldp	x20, x19, [sp, #80]
    e890:	ldp	x22, x21, [sp, #64]
    e894:	ldp	x24, x23, [sp, #48]
    e898:	ldr	x25, [sp, #32]
    e89c:	ldp	x29, x30, [sp, #16]
    e8a0:	add	sp, sp, #0x60
    e8a4:	ret
    e8a8:	stp	x29, x30, [sp, #-32]!
    e8ac:	stp	x20, x19, [sp, #16]
    e8b0:	ldr	w8, [x0, #24]
    e8b4:	ldr	w9, [x0, #12]
    e8b8:	mov	x19, x0
    e8bc:	ldr	w10, [x0, #36]
    e8c0:	ldr	x0, [x0]
    e8c4:	sub	w8, w8, w9
    e8c8:	and	w20, w8, #0xfffffff0
    e8cc:	sub	w2, w10, w20
    e8d0:	add	x1, x0, x20
    e8d4:	mov	x29, sp
    e8d8:	bl	30b0 <memmove@plt>
    e8dc:	ldp	w8, w9, [x19, #20]
    e8e0:	ldp	w10, w11, [x19, #32]
    e8e4:	add	w8, w8, w20
    e8e8:	sub	w9, w9, w20
    e8ec:	sub	w10, w10, w20
    e8f0:	sub	w11, w11, w20
    e8f4:	stp	w8, w9, [x19, #20]
    e8f8:	stp	w10, w11, [x19, #32]
    e8fc:	ldp	x20, x19, [sp, #16]
    e900:	ldp	x29, x30, [sp], #32
    e904:	ret
    e908:	stp	x29, x30, [sp, #-80]!
    e90c:	stp	x24, x23, [sp, #32]
    e910:	stp	x22, x21, [sp, #48]
    e914:	stp	x20, x19, [sp, #64]
    e918:	ldr	x8, [x0, #48]
    e91c:	mov	x20, x1
    e920:	mov	x1, x2
    e924:	str	x25, [sp, #16]
    e928:	mov	x29, sp
    e92c:	mov	x23, x2
    e930:	mov	x19, x0
    e934:	blr	x8
    e938:	mov	w21, w0
    e93c:	cbz	w0, e9bc <lzma_mf_is_supported@@XZ_5.0+0x28c>
    e940:	sub	w25, w21, #0x1
    e944:	lsl	x8, x25, #3
    e948:	ldr	w22, [x23, x8]
    e94c:	ldr	w8, [x19, #96]
    e950:	cmp	w22, w8
    e954:	b.ne	e9c0 <lzma_mf_is_supported@@XZ_5.0+0x290>  // b.any
    e958:	mov	x0, x19
    e95c:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    e960:	ldr	w8, [x19, #100]
    e964:	add	w9, w0, #0x1
    e968:	cmp	w9, w8
    e96c:	csinc	w24, w8, w0, hi  // hi = pmore
    e970:	mov	x0, x19
    e974:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    e978:	cmp	w22, w24
    e97c:	b.cs	e9c0 <lzma_mf_is_supported@@XZ_5.0+0x290>  // b.hs, b.nlast
    e980:	add	x8, x23, x25, lsl #3
    e984:	ldr	w9, [x8, #4]
    e988:	sub	x8, x0, #0x1
    e98c:	mvn	x9, x9
    e990:	add	x9, x9, x8
    e994:	mov	w10, w22
    e998:	ldrb	w11, [x8, x10]
    e99c:	ldrb	w10, [x9, x10]
    e9a0:	cmp	w11, w10
    e9a4:	b.ne	e9c0 <lzma_mf_is_supported@@XZ_5.0+0x290>  // b.any
    e9a8:	add	w22, w22, #0x1
    e9ac:	cmp	w24, w22
    e9b0:	b.ne	e994 <lzma_mf_is_supported@@XZ_5.0+0x264>  // b.any
    e9b4:	mov	w22, w24
    e9b8:	b	e9c0 <lzma_mf_is_supported@@XZ_5.0+0x290>
    e9bc:	mov	w22, wzr
    e9c0:	str	w21, [x20]
    e9c4:	ldr	w8, [x19, #28]
    e9c8:	mov	w0, w22
    e9cc:	ldr	x25, [sp, #16]
    e9d0:	add	w8, w8, #0x1
    e9d4:	str	w8, [x19, #28]
    e9d8:	ldp	x20, x19, [sp, #64]
    e9dc:	ldp	x22, x21, [sp, #48]
    e9e0:	ldp	x24, x23, [sp, #32]
    e9e4:	ldp	x29, x30, [sp], #80
    e9e8:	ret
    e9ec:	ldr	w8, [x0, #36]
    e9f0:	ldr	w9, [x0, #24]
    e9f4:	sub	w0, w8, w9
    e9f8:	ret
    e9fc:	ldr	x8, [x0]
    ea00:	ldr	w9, [x0, #24]
    ea04:	add	x0, x8, x9
    ea08:	ret
    ea0c:	sub	sp, sp, #0x40
    ea10:	stp	x29, x30, [sp, #16]
    ea14:	str	x21, [sp, #32]
    ea18:	stp	x20, x19, [sp, #48]
    ea1c:	add	x29, sp, #0x10
    ea20:	mov	x20, x1
    ea24:	mov	x19, x0
    ea28:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    ea2c:	ldr	w21, [x19, #96]
    ea30:	cmp	w21, w0
    ea34:	b.ls	ea54 <lzma_mf_is_supported@@XZ_5.0+0x324>  // b.plast
    ea38:	cmp	w0, #0x2
    ea3c:	mov	w21, w0
    ea40:	b.hi	ea54 <lzma_mf_is_supported@@XZ_5.0+0x324>  // b.pmore
    ea44:	mov	x0, x19
    ea48:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    ea4c:	mov	w20, wzr
    ea50:	b	eb6c <lzma_mf_is_supported@@XZ_5.0+0x43c>
    ea54:	mov	x0, x19
    ea58:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    ea5c:	adrp	x11, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    ea60:	ldp	w9, w8, [x19, #20]
    ea64:	ldrb	w10, [x0]
    ea68:	ldr	x11, [x11, #3952]
    ea6c:	ldrb	w12, [x0, #1]
    ea70:	ldrb	w13, [x0, #2]
    ea74:	add	w1, w9, w8
    ea78:	ldr	w10, [x11, x10, lsl #2]
    ea7c:	ldr	w11, [x19, #88]
    ea80:	ldr	x8, [x19, #64]
    ea84:	mov	x2, x0
    ea88:	eor	w9, w10, w12
    ea8c:	and	w10, w9, #0x3ff
    ea90:	eor	w9, w9, w13, lsl #8
    ea94:	and	w9, w9, w11
    ea98:	add	w9, w9, #0x400
    ea9c:	lsl	x10, x10, #2
    eaa0:	lsl	x9, x9, #2
    eaa4:	ldr	w11, [x8, x10]
    eaa8:	ldr	w3, [x8, x9]
    eaac:	str	w1, [x8, x10]
    eab0:	str	w1, [x8, x9]
    eab4:	ldr	w7, [x19, #84]
    eab8:	sub	w9, w1, w11
    eabc:	cmp	w9, w7
    eac0:	b.cs	eb34 <lzma_mf_is_supported@@XZ_5.0+0x404>  // b.hs, b.nlast
    eac4:	sub	x10, x2, w9, uxtw
    eac8:	ldrb	w8, [x10]
    eacc:	ldrb	w11, [x2]
    ead0:	cmp	w8, w11
    ead4:	b.ne	eb34 <lzma_mf_is_supported@@XZ_5.0+0x404>  // b.any
    ead8:	mov	w8, #0x2                   	// #2
    eadc:	cmp	w21, #0x3
    eae0:	b.cc	eb08 <lzma_mf_is_supported@@XZ_5.0+0x3d8>  // b.lo, b.ul, b.last
    eae4:	mov	w11, w8
    eae8:	ldrb	w12, [x10, x11]
    eaec:	ldrb	w11, [x2, x11]
    eaf0:	cmp	w12, w11
    eaf4:	b.ne	eb08 <lzma_mf_is_supported@@XZ_5.0+0x3d8>  // b.any
    eaf8:	add	w8, w8, #0x1
    eafc:	cmp	w21, w8
    eb00:	b.ne	eae4 <lzma_mf_is_supported@@XZ_5.0+0x3b4>  // b.any
    eb04:	mov	w8, w21
    eb08:	sub	w9, w9, #0x1
    eb0c:	cmp	w8, w21
    eb10:	stp	w8, w9, [x20]
    eb14:	b.ne	eb84 <lzma_mf_is_supported@@XZ_5.0+0x454>  // b.any
    eb18:	ldr	x8, [x19, #72]
    eb1c:	ldr	w9, [x19, #80]
    eb20:	mov	x0, x19
    eb24:	str	w3, [x8, x9, lsl #2]
    eb28:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    eb2c:	mov	w20, #0x1                   	// #1
    eb30:	b	eb6c <lzma_mf_is_supported@@XZ_5.0+0x43c>
    eb34:	mov	x9, xzr
    eb38:	mov	w8, #0x2                   	// #2
    eb3c:	ldr	w4, [x19, #92]
    eb40:	ldr	x5, [x19, #72]
    eb44:	ldr	w6, [x19, #80]
    eb48:	add	x9, x20, x9, lsl #3
    eb4c:	mov	w0, w21
    eb50:	str	w8, [sp, #8]
    eb54:	str	x9, [sp]
    eb58:	bl	ebf0 <lzma_mf_is_supported@@XZ_5.0+0x4c0>
    eb5c:	sub	x8, x0, x20
    eb60:	mov	x0, x19
    eb64:	lsr	x20, x8, #3
    eb68:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    eb6c:	mov	w0, w20
    eb70:	ldp	x20, x19, [sp, #48]
    eb74:	ldr	x21, [sp, #32]
    eb78:	ldp	x29, x30, [sp, #16]
    eb7c:	add	sp, sp, #0x40
    eb80:	ret
    eb84:	mov	w9, #0x1                   	// #1
    eb88:	b	eb3c <lzma_mf_is_supported@@XZ_5.0+0x40c>
    eb8c:	ldr	w8, [x0, #24]
    eb90:	ldr	w9, [x0, #40]
    eb94:	add	w8, w8, #0x1
    eb98:	add	w9, w9, #0x1
    eb9c:	str	w8, [x0, #24]
    eba0:	str	w9, [x0, #40]
    eba4:	ret
    eba8:	stp	x29, x30, [sp, #-16]!
    ebac:	ldp	w8, w10, [x0, #80]
    ebb0:	ldp	w11, w9, [x0, #20]
    ebb4:	mov	x29, sp
    ebb8:	add	w12, w8, #0x1
    ebbc:	add	w9, w9, #0x1
    ebc0:	cmp	w12, w10
    ebc4:	add	w10, w11, w9
    ebc8:	csinc	w8, wzr, w8, eq  // eq = none
    ebcc:	cmn	w10, #0x1
    ebd0:	str	w8, [x0, #80]
    ebd4:	str	w9, [x0, #24]
    ebd8:	b.eq	ebe4 <lzma_mf_is_supported@@XZ_5.0+0x4b4>  // b.none
    ebdc:	ldp	x29, x30, [sp], #16
    ebe0:	ret
    ebe4:	bl	f9f8 <lzma_mf_is_supported@@XZ_5.0+0x12c8>
    ebe8:	ldp	x29, x30, [sp], #16
    ebec:	ret
    ebf0:	ldr	w10, [sp, #8]
    ebf4:	ldr	x9, [sp]
    ebf8:	str	w3, [x5, w6, uxtw #2]
    ebfc:	b	ec08 <lzma_mf_is_supported@@XZ_5.0+0x4d8>
    ec00:	mov	x8, x9
    ec04:	cbnz	w12, ecdc <lzma_mf_is_supported@@XZ_5.0+0x5ac>
    ec08:	subs	w4, w4, #0x1
    ec0c:	mov	w12, #0x1                   	// #1
    ec10:	b.cc	ec00 <lzma_mf_is_supported@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    ec14:	sub	w13, w1, w3
    ec18:	cmp	w13, w7
    ec1c:	b.cs	ec00 <lzma_mf_is_supported@@XZ_5.0+0x4d0>  // b.hs, b.nlast
    ec20:	subs	w11, w6, w13
    ec24:	sub	x12, x2, w13, uxtw
    ec28:	mov	w14, w10
    ec2c:	csel	w15, w7, wzr, cc  // cc = lo, ul, last
    ec30:	ldrb	w16, [x12, x14]
    ec34:	ldrb	w14, [x2, x14]
    ec38:	add	w11, w11, w15
    ec3c:	ldr	w3, [x5, w11, uxtw #2]
    ec40:	cmp	w16, w14
    ec44:	b.ne	ecb8 <lzma_mf_is_supported@@XZ_5.0+0x588>  // b.any
    ec48:	ldrb	w11, [x12]
    ec4c:	ldrb	w14, [x2]
    ec50:	cmp	w11, w14
    ec54:	b.ne	ecb8 <lzma_mf_is_supported@@XZ_5.0+0x588>  // b.any
    ec58:	mov	w11, #0x1                   	// #1
    ec5c:	cmp	w0, #0x2
    ec60:	b.cc	ec88 <lzma_mf_is_supported@@XZ_5.0+0x558>  // b.lo, b.ul, b.last
    ec64:	mov	w14, w11
    ec68:	ldrb	w15, [x12, x14]
    ec6c:	ldrb	w14, [x2, x14]
    ec70:	cmp	w15, w14
    ec74:	b.ne	ec88 <lzma_mf_is_supported@@XZ_5.0+0x558>  // b.any
    ec78:	add	w11, w11, #0x1
    ec7c:	cmp	w0, w11
    ec80:	b.ne	ec64 <lzma_mf_is_supported@@XZ_5.0+0x534>  // b.any
    ec84:	mov	w11, w0
    ec88:	cmp	w10, w11
    ec8c:	b.cs	eccc <lzma_mf_is_supported@@XZ_5.0+0x59c>  // b.hs, b.nlast
    ec90:	sub	w10, w13, #0x1
    ec94:	cmp	w11, w0
    ec98:	stp	w11, w10, [x9], #8
    ec9c:	b.ne	ecd0 <lzma_mf_is_supported@@XZ_5.0+0x5a0>  // b.any
    eca0:	mov	w12, #0x1                   	// #1
    eca4:	mov	x8, x9
    eca8:	cbz	w12, ecbc <lzma_mf_is_supported@@XZ_5.0+0x58c>
    ecac:	mov	w10, w11
    ecb0:	cbz	w12, ec08 <lzma_mf_is_supported@@XZ_5.0+0x4d8>
    ecb4:	b	ecdc <lzma_mf_is_supported@@XZ_5.0+0x5ac>
    ecb8:	mov	w11, w10
    ecbc:	mov	w12, wzr
    ecc0:	mov	w10, w11
    ecc4:	cbz	w12, ec08 <lzma_mf_is_supported@@XZ_5.0+0x4d8>
    ecc8:	b	ecdc <lzma_mf_is_supported@@XZ_5.0+0x5ac>
    eccc:	mov	w11, w10
    ecd0:	mov	w12, wzr
    ecd4:	cbnz	w12, ecac <lzma_mf_is_supported@@XZ_5.0+0x57c>
    ecd8:	b	ecbc <lzma_mf_is_supported@@XZ_5.0+0x58c>
    ecdc:	mov	x0, x8
    ece0:	ret
    ece4:	stp	x29, x30, [sp, #-48]!
    ece8:	str	x21, [sp, #16]
    ecec:	stp	x20, x19, [sp, #32]
    ecf0:	adrp	x21, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    ecf4:	ldr	x21, [x21, #3952]
    ecf8:	mov	w19, w1
    ecfc:	mov	x20, x0
    ed00:	mov	x29, sp
    ed04:	b	ed70 <lzma_mf_is_supported@@XZ_5.0+0x640>
    ed08:	mov	x0, x20
    ed0c:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    ed10:	ldrb	w8, [x0]
    ed14:	ldp	w10, w9, [x20, #20]
    ed18:	ldrb	w11, [x0, #1]
    ed1c:	ldrb	w12, [x0, #2]
    ed20:	ldr	w8, [x21, x8, lsl #2]
    ed24:	add	w9, w10, w9
    ed28:	ldr	w10, [x20, #88]
    ed2c:	mov	x0, x20
    ed30:	eor	w8, w8, w11
    ed34:	ldr	x11, [x20, #64]
    ed38:	eor	w12, w8, w12, lsl #8
    ed3c:	and	w10, w12, w10
    ed40:	add	w10, w10, #0x400
    ed44:	and	w8, w8, #0x3ff
    ed48:	lsl	x10, x10, #2
    ed4c:	ldr	w12, [x11, x10]
    ed50:	str	w9, [x11, w8, uxtw #2]
    ed54:	str	w9, [x11, x10]
    ed58:	ldr	x8, [x20, #72]
    ed5c:	ldr	w9, [x20, #80]
    ed60:	str	w12, [x8, x9, lsl #2]
    ed64:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    ed68:	subs	w19, w19, #0x1
    ed6c:	b.eq	ed90 <lzma_mf_is_supported@@XZ_5.0+0x660>  // b.none
    ed70:	mov	x0, x20
    ed74:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    ed78:	cmp	w0, #0x2
    ed7c:	b.hi	ed08 <lzma_mf_is_supported@@XZ_5.0+0x5d8>  // b.pmore
    ed80:	mov	x0, x20
    ed84:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    ed88:	subs	w19, w19, #0x1
    ed8c:	b.ne	ed70 <lzma_mf_is_supported@@XZ_5.0+0x640>  // b.any
    ed90:	ldp	x20, x19, [sp, #32]
    ed94:	ldr	x21, [sp, #16]
    ed98:	ldp	x29, x30, [sp], #48
    ed9c:	ret
    eda0:	sub	sp, sp, #0x40
    eda4:	stp	x29, x30, [sp, #16]
    eda8:	stp	x22, x21, [sp, #32]
    edac:	stp	x20, x19, [sp, #48]
    edb0:	add	x29, sp, #0x10
    edb4:	mov	x20, x1
    edb8:	mov	x19, x0
    edbc:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    edc0:	ldr	w21, [x19, #96]
    edc4:	cmp	w21, w0
    edc8:	b.ls	ede8 <lzma_mf_is_supported@@XZ_5.0+0x6b8>  // b.plast
    edcc:	cmp	w0, #0x3
    edd0:	mov	w21, w0
    edd4:	b.hi	ede8 <lzma_mf_is_supported@@XZ_5.0+0x6b8>  // b.pmore
    edd8:	mov	x0, x19
    eddc:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    ede0:	mov	w22, wzr
    ede4:	b	ef90 <lzma_mf_is_supported@@XZ_5.0+0x860>
    ede8:	mov	x0, x19
    edec:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    edf0:	adrp	x11, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    edf4:	ldp	w9, w8, [x19, #20]
    edf8:	ldrb	w10, [x0]
    edfc:	ldr	x11, [x11, #3952]
    ee00:	ldrb	w14, [x0, #3]
    ee04:	ldrb	w12, [x0, #1]
    ee08:	ldrb	w13, [x0, #2]
    ee0c:	ldr	w10, [x11, x10, lsl #2]
    ee10:	add	w1, w9, w8
    ee14:	ldr	w9, [x11, x14, lsl #2]
    ee18:	ldr	w15, [x19, #88]
    ee1c:	eor	w10, w10, w12
    ee20:	and	w11, w10, #0x3ff
    ee24:	eor	w10, w10, w13, lsl #8
    ee28:	ldr	x16, [x19, #64]
    ee2c:	mov	w8, #0x400                 	// #1024
    ee30:	eor	w9, w10, w9, lsl #5
    ee34:	movk	w8, #0x1, lsl #16
    ee38:	and	w12, w10, #0xffff
    ee3c:	and	w9, w9, w15
    ee40:	add	w10, w12, #0x400
    ee44:	add	w8, w9, w8
    ee48:	lsl	x13, x11, #2
    ee4c:	lsl	x12, x10, #2
    ee50:	lsl	x8, x8, #2
    ee54:	ldr	w11, [x16, x13]
    ee58:	ldr	w10, [x16, x12]
    ee5c:	ldr	w3, [x16, x8]
    ee60:	str	w1, [x16, x13]
    ee64:	str	w1, [x16, x12]
    ee68:	str	w1, [x16, x8]
    ee6c:	ldr	w7, [x19, #84]
    ee70:	sub	w9, w1, w11
    ee74:	mov	x2, x0
    ee78:	cmp	w9, w7
    ee7c:	b.cs	eeb0 <lzma_mf_is_supported@@XZ_5.0+0x780>  // b.hs, b.nlast
    ee80:	sub	x8, x2, w9, uxtw
    ee84:	ldrb	w8, [x8]
    ee88:	ldrb	w12, [x2]
    ee8c:	cmp	w8, w12
    ee90:	b.ne	eeb0 <lzma_mf_is_supported@@XZ_5.0+0x780>  // b.any
    ee94:	mov	w8, #0x2                   	// #2
    ee98:	sub	w12, w9, #0x1
    ee9c:	mov	w22, #0x1                   	// #1
    eea0:	stp	w8, w12, [x20]
    eea4:	cmp	w10, w11
    eea8:	b.ne	eec0 <lzma_mf_is_supported@@XZ_5.0+0x790>  // b.any
    eeac:	b	eefc <lzma_mf_is_supported@@XZ_5.0+0x7cc>
    eeb0:	mov	w22, wzr
    eeb4:	mov	w8, #0x1                   	// #1
    eeb8:	cmp	w10, w11
    eebc:	b.eq	eefc <lzma_mf_is_supported@@XZ_5.0+0x7cc>  // b.none
    eec0:	sub	w10, w1, w10
    eec4:	cmp	w10, w7
    eec8:	b.cs	eefc <lzma_mf_is_supported@@XZ_5.0+0x7cc>  // b.hs, b.nlast
    eecc:	sub	x11, x2, w10, uxtw
    eed0:	ldrb	w11, [x11]
    eed4:	ldrb	w12, [x2]
    eed8:	cmp	w11, w12
    eedc:	b.ne	eefc <lzma_mf_is_supported@@XZ_5.0+0x7cc>  // b.any
    eee0:	sub	w8, w10, #0x1
    eee4:	add	x9, x20, w22, uxtw #3
    eee8:	add	w11, w22, #0x1
    eeec:	str	w8, [x9, #4]
    eef0:	mov	w8, #0x3                   	// #3
    eef4:	mov	w22, w11
    eef8:	mov	w9, w10
    eefc:	cbz	w22, ef54 <lzma_mf_is_supported@@XZ_5.0+0x824>
    ef00:	cmp	w8, w21
    ef04:	b.cs	ef30 <lzma_mf_is_supported@@XZ_5.0+0x800>  // b.hs, b.nlast
    ef08:	sub	x9, x2, w9, uxtw
    ef0c:	mov	w10, w8
    ef10:	ldrb	w11, [x9, x10]
    ef14:	ldrb	w10, [x2, x10]
    ef18:	cmp	w11, w10
    ef1c:	b.ne	ef30 <lzma_mf_is_supported@@XZ_5.0+0x800>  // b.any
    ef20:	add	w8, w8, #0x1
    ef24:	cmp	w21, w8
    ef28:	b.ne	ef0c <lzma_mf_is_supported@@XZ_5.0+0x7dc>  // b.any
    ef2c:	mov	w8, w21
    ef30:	sub	w9, w22, #0x1
    ef34:	lsl	x9, x9, #3
    ef38:	cmp	w8, w21
    ef3c:	str	w8, [x20, x9]
    ef40:	b.ne	ef54 <lzma_mf_is_supported@@XZ_5.0+0x824>  // b.any
    ef44:	ldr	x8, [x19, #72]
    ef48:	ldr	w9, [x19, #80]
    ef4c:	str	w3, [x8, x9, lsl #2]
    ef50:	b	ef88 <lzma_mf_is_supported@@XZ_5.0+0x858>
    ef54:	ldr	w4, [x19, #92]
    ef58:	ldr	x5, [x19, #72]
    ef5c:	ldr	w6, [x19, #80]
    ef60:	cmp	w8, #0x3
    ef64:	mov	w9, #0x3                   	// #3
    ef68:	csel	w8, w8, w9, hi  // hi = pmore
    ef6c:	add	x9, x20, w22, uxtw #3
    ef70:	mov	w0, w21
    ef74:	str	w8, [sp, #8]
    ef78:	str	x9, [sp]
    ef7c:	bl	ebf0 <lzma_mf_is_supported@@XZ_5.0+0x4c0>
    ef80:	sub	x8, x0, x20
    ef84:	lsr	x22, x8, #3
    ef88:	mov	x0, x19
    ef8c:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    ef90:	mov	w0, w22
    ef94:	ldp	x20, x19, [sp, #48]
    ef98:	ldp	x22, x21, [sp, #32]
    ef9c:	ldp	x29, x30, [sp, #16]
    efa0:	add	sp, sp, #0x40
    efa4:	ret
    efa8:	stp	x29, x30, [sp, #-48]!
    efac:	stp	x22, x21, [sp, #16]
    efb0:	stp	x20, x19, [sp, #32]
    efb4:	adrp	x21, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    efb8:	ldr	x21, [x21, #3952]
    efbc:	mov	w22, #0x400                 	// #1024
    efc0:	mov	w19, w1
    efc4:	mov	x20, x0
    efc8:	movk	w22, #0x1, lsl #16
    efcc:	mov	x29, sp
    efd0:	b	f054 <lzma_mf_is_supported@@XZ_5.0+0x924>
    efd4:	mov	x0, x20
    efd8:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    efdc:	ldrb	w10, [x0]
    efe0:	ldrb	w13, [x0, #3]
    efe4:	ldp	w9, w8, [x20, #20]
    efe8:	ldrb	w11, [x0, #1]
    efec:	ldr	w10, [x21, x10, lsl #2]
    eff0:	ldrb	w12, [x0, #2]
    eff4:	ldr	w13, [x21, x13, lsl #2]
    eff8:	add	w8, w9, w8
    effc:	ldr	w9, [x20, #88]
    f000:	eor	w10, w10, w11
    f004:	eor	w12, w10, w12, lsl #8
    f008:	ldr	x11, [x20, #64]
    f00c:	eor	w13, w12, w13, lsl #5
    f010:	and	w9, w13, w9
    f014:	and	w12, w12, #0xffff
    f018:	add	w9, w9, w22
    f01c:	and	w10, w10, #0x3ff
    f020:	add	w12, w12, #0x400
    f024:	lsl	x9, x9, #2
    f028:	ldr	w13, [x11, x9]
    f02c:	str	w8, [x11, w10, uxtw #2]
    f030:	str	w8, [x11, w12, uxtw #2]
    f034:	str	w8, [x11, x9]
    f038:	ldr	x8, [x20, #72]
    f03c:	ldr	w9, [x20, #80]
    f040:	mov	x0, x20
    f044:	str	w13, [x8, x9, lsl #2]
    f048:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f04c:	subs	w19, w19, #0x1
    f050:	b.eq	f074 <lzma_mf_is_supported@@XZ_5.0+0x944>  // b.none
    f054:	mov	x0, x20
    f058:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f05c:	cmp	w0, #0x3
    f060:	b.hi	efd4 <lzma_mf_is_supported@@XZ_5.0+0x8a4>  // b.pmore
    f064:	mov	x0, x20
    f068:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f06c:	subs	w19, w19, #0x1
    f070:	b.ne	f054 <lzma_mf_is_supported@@XZ_5.0+0x924>  // b.any
    f074:	ldp	x20, x19, [sp, #32]
    f078:	ldp	x22, x21, [sp, #16]
    f07c:	ldp	x29, x30, [sp], #48
    f080:	ret
    f084:	sub	sp, sp, #0x40
    f088:	stp	x29, x30, [sp, #16]
    f08c:	str	x21, [sp, #32]
    f090:	stp	x20, x19, [sp, #48]
    f094:	add	x29, sp, #0x10
    f098:	mov	x20, x1
    f09c:	mov	x19, x0
    f0a0:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f0a4:	ldr	w21, [x19, #96]
    f0a8:	cmp	w21, w0
    f0ac:	b.ls	f0d8 <lzma_mf_is_supported@@XZ_5.0+0x9a8>  // b.plast
    f0b0:	cmp	w0, #0x2
    f0b4:	b.cc	f0c8 <lzma_mf_is_supported@@XZ_5.0+0x998>  // b.lo, b.ul, b.last
    f0b8:	ldr	w8, [x19, #104]
    f0bc:	mov	w21, w0
    f0c0:	cmp	w8, #0x1
    f0c4:	b.ne	f0d8 <lzma_mf_is_supported@@XZ_5.0+0x9a8>  // b.any
    f0c8:	mov	x0, x19
    f0cc:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f0d0:	mov	w20, wzr
    f0d4:	b	f138 <lzma_mf_is_supported@@XZ_5.0+0xa08>
    f0d8:	mov	x0, x19
    f0dc:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f0e0:	ldp	w9, w8, [x19, #20]
    f0e4:	ldrb	w10, [x0]
    f0e8:	ldrb	w11, [x0, #1]
    f0ec:	ldr	x12, [x19, #64]
    f0f0:	add	w1, w9, w8
    f0f4:	lsl	x8, x10, #2
    f0f8:	bfi	x8, x11, #10, #8
    f0fc:	ldr	w3, [x12, x8]
    f100:	str	w1, [x12, x8]
    f104:	ldr	w4, [x19, #92]
    f108:	ldr	x5, [x19, #72]
    f10c:	ldp	w6, w7, [x19, #80]
    f110:	mov	x2, x0
    f114:	mov	w8, #0x1                   	// #1
    f118:	mov	w0, w21
    f11c:	str	w8, [sp, #8]
    f120:	str	x20, [sp]
    f124:	bl	f150 <lzma_mf_is_supported@@XZ_5.0+0xa20>
    f128:	sub	x8, x0, x20
    f12c:	mov	x0, x19
    f130:	lsr	x20, x8, #3
    f134:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f138:	mov	w0, w20
    f13c:	ldp	x20, x19, [sp, #48]
    f140:	ldr	x21, [sp, #32]
    f144:	ldp	x29, x30, [sp, #16]
    f148:	add	sp, sp, #0x40
    f14c:	ret
    f150:	str	x21, [sp, #-32]!
    f154:	ldr	w13, [sp, #40]
    f158:	ldr	x9, [sp, #32]
    f15c:	lsl	w8, w6, #1
    f160:	add	x11, x5, w8, uxtw #2
    f164:	mov	w10, wzr
    f168:	mov	w14, wzr
    f16c:	add	x12, x11, #0x4
    f170:	stp	x20, x19, [sp, #16]
    f174:	b	f1b0 <lzma_mf_is_supported@@XZ_5.0+0xa80>
    f178:	str	w3, [x12]
    f17c:	mov	x12, x16
    f180:	mov	w10, w15
    f184:	mov	w15, w14
    f188:	ldr	w3, [x16]
    f18c:	mov	w17, #0x1                   	// #1
    f190:	mov	w14, w15
    f194:	tbnz	w17, #0, f1b0 <lzma_mf_is_supported@@XZ_5.0+0xa80>
    f198:	b	f288 <lzma_mf_is_supported@@XZ_5.0+0xb58>
    f19c:	mov	w17, wzr
    f1a0:	str	wzr, [x12]
    f1a4:	str	wzr, [x11]
    f1a8:	mov	x8, x9
    f1ac:	tbz	w17, #0, f288 <lzma_mf_is_supported@@XZ_5.0+0xb58>
    f1b0:	subs	w4, w4, #0x1
    f1b4:	b.cc	f19c <lzma_mf_is_supported@@XZ_5.0+0xa6c>  // b.lo, b.ul, b.last
    f1b8:	sub	w18, w1, w3
    f1bc:	cmp	w18, w7
    f1c0:	b.cs	f19c <lzma_mf_is_supported@@XZ_5.0+0xa6c>  // b.hs, b.nlast
    f1c4:	subs	w16, w6, w18
    f1c8:	csel	w19, w7, wzr, cc  // cc = lo, ul, last
    f1cc:	cmp	w10, w14
    f1d0:	sub	x17, x2, w18, uxtw
    f1d4:	csel	w15, w10, w14, cc  // cc = lo, ul, last
    f1d8:	ldrb	w20, [x17, x15]
    f1dc:	ldrb	w21, [x2, x15]
    f1e0:	add	w16, w16, w19
    f1e4:	lsl	w16, w16, #1
    f1e8:	add	x16, x5, w16, uxtw #2
    f1ec:	cmp	w20, w21
    f1f0:	b.ne	f264 <lzma_mf_is_supported@@XZ_5.0+0xb34>  // b.any
    f1f4:	add	w15, w15, #0x1
    f1f8:	cmp	w15, w0
    f1fc:	b.cs	f224 <lzma_mf_is_supported@@XZ_5.0+0xaf4>  // b.hs, b.nlast
    f200:	mov	w19, w15
    f204:	ldrb	w20, [x17, x19]
    f208:	ldrb	w19, [x2, x19]
    f20c:	cmp	w20, w19
    f210:	b.ne	f224 <lzma_mf_is_supported@@XZ_5.0+0xaf4>  // b.any
    f214:	add	w15, w15, #0x1
    f218:	cmp	w0, w15
    f21c:	b.ne	f200 <lzma_mf_is_supported@@XZ_5.0+0xad0>  // b.any
    f220:	mov	w15, w0
    f224:	cmp	w13, w15
    f228:	b.cs	f264 <lzma_mf_is_supported@@XZ_5.0+0xb34>  // b.hs, b.nlast
    f22c:	sub	w13, w18, #0x1
    f230:	cmp	w15, w0
    f234:	stp	w15, w13, [x9], #8
    f238:	b.ne	f260 <lzma_mf_is_supported@@XZ_5.0+0xb30>  // b.any
    f23c:	ldr	w8, [x16]
    f240:	mov	w17, wzr
    f244:	mov	w13, w15
    f248:	str	w8, [x11]
    f24c:	ldr	w8, [x16, #4]
    f250:	str	w8, [x12]
    f254:	mov	x8, x9
    f258:	tbnz	w17, #0, f1b0 <lzma_mf_is_supported@@XZ_5.0+0xa80>
    f25c:	b	f288 <lzma_mf_is_supported@@XZ_5.0+0xb58>
    f260:	mov	w13, w15
    f264:	mov	w18, w15
    f268:	ldrb	w17, [x17, x18]
    f26c:	ldrb	w18, [x2, x18]
    f270:	cmp	w17, w18
    f274:	b.cs	f178 <lzma_mf_is_supported@@XZ_5.0+0xa48>  // b.hs, b.nlast
    f278:	str	w3, [x11]
    f27c:	add	x11, x16, #0x4
    f280:	mov	x16, x11
    f284:	b	f188 <lzma_mf_is_supported@@XZ_5.0+0xa58>
    f288:	ldp	x20, x19, [sp, #16]
    f28c:	mov	x0, x8
    f290:	ldr	x21, [sp], #32
    f294:	ret
    f298:	stp	x29, x30, [sp, #-48]!
    f29c:	stp	x20, x19, [sp, #32]
    f2a0:	mov	w19, w1
    f2a4:	mov	x20, x0
    f2a8:	str	x21, [sp, #16]
    f2ac:	mov	x29, sp
    f2b0:	b	f308 <lzma_mf_is_supported@@XZ_5.0+0xbd8>
    f2b4:	mov	x0, x20
    f2b8:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f2bc:	ldp	w9, w8, [x20, #20]
    f2c0:	ldrb	w10, [x0]
    f2c4:	ldrb	w11, [x0, #1]
    f2c8:	ldr	x12, [x20, #64]
    f2cc:	add	w1, w9, w8
    f2d0:	lsl	x8, x10, #2
    f2d4:	bfi	x8, x11, #10, #8
    f2d8:	ldr	w3, [x12, x8]
    f2dc:	str	w1, [x12, x8]
    f2e0:	ldr	w4, [x20, #92]
    f2e4:	ldr	x5, [x20, #72]
    f2e8:	ldp	w6, w7, [x20, #80]
    f2ec:	mov	x2, x0
    f2f0:	mov	w0, w21
    f2f4:	bl	f354 <lzma_mf_is_supported@@XZ_5.0+0xc24>
    f2f8:	mov	x0, x20
    f2fc:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f300:	subs	w19, w19, #0x1
    f304:	b.eq	f344 <lzma_mf_is_supported@@XZ_5.0+0xc14>  // b.none
    f308:	mov	x0, x20
    f30c:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f310:	ldr	w21, [x20, #96]
    f314:	cmp	w21, w0
    f318:	b.ls	f2b4 <lzma_mf_is_supported@@XZ_5.0+0xb84>  // b.plast
    f31c:	cmp	w0, #0x2
    f320:	b.cc	f334 <lzma_mf_is_supported@@XZ_5.0+0xc04>  // b.lo, b.ul, b.last
    f324:	ldr	w8, [x20, #104]
    f328:	mov	w21, w0
    f32c:	cmp	w8, #0x1
    f330:	b.ne	f2b4 <lzma_mf_is_supported@@XZ_5.0+0xb84>  // b.any
    f334:	mov	x0, x20
    f338:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f33c:	subs	w19, w19, #0x1
    f340:	b.ne	f308 <lzma_mf_is_supported@@XZ_5.0+0xbd8>  // b.any
    f344:	ldp	x20, x19, [sp, #32]
    f348:	ldr	x21, [sp, #16]
    f34c:	ldp	x29, x30, [sp], #48
    f350:	ret
    f354:	lsl	w8, w6, #1
    f358:	add	x8, x5, w8, uxtw #2
    f35c:	mov	w9, wzr
    f360:	mov	w11, wzr
    f364:	add	x10, x8, #0x4
    f368:	b	f37c <lzma_mf_is_supported@@XZ_5.0+0xc4c>
    f36c:	mov	w14, wzr
    f370:	str	wzr, [x10]
    f374:	str	wzr, [x8]
    f378:	tbz	w14, #0, f454 <lzma_mf_is_supported@@XZ_5.0+0xd24>
    f37c:	subs	w4, w4, #0x1
    f380:	b.cc	f36c <lzma_mf_is_supported@@XZ_5.0+0xc3c>  // b.lo, b.ul, b.last
    f384:	sub	w12, w1, w3
    f388:	cmp	w12, w7
    f38c:	b.cs	f36c <lzma_mf_is_supported@@XZ_5.0+0xc3c>  // b.hs, b.nlast
    f390:	subs	w13, w6, w12
    f394:	csel	w15, w7, wzr, cc  // cc = lo, ul, last
    f398:	cmp	w9, w11
    f39c:	sub	x14, x2, w12, uxtw
    f3a0:	csel	w12, w9, w11, cc  // cc = lo, ul, last
    f3a4:	ldrb	w16, [x14, x12]
    f3a8:	ldrb	w17, [x2, x12]
    f3ac:	add	w13, w13, w15
    f3b0:	lsl	w13, w13, #1
    f3b4:	add	x13, x5, w13, uxtw #2
    f3b8:	cmp	w16, w17
    f3bc:	b.ne	f410 <lzma_mf_is_supported@@XZ_5.0+0xce0>  // b.any
    f3c0:	add	w12, w12, #0x1
    f3c4:	cmp	w12, w0
    f3c8:	b.cs	f3f0 <lzma_mf_is_supported@@XZ_5.0+0xcc0>  // b.hs, b.nlast
    f3cc:	mov	w15, w12
    f3d0:	ldrb	w16, [x14, x15]
    f3d4:	ldrb	w15, [x2, x15]
    f3d8:	cmp	w16, w15
    f3dc:	b.ne	f3f0 <lzma_mf_is_supported@@XZ_5.0+0xcc0>  // b.any
    f3e0:	add	w12, w12, #0x1
    f3e4:	cmp	w0, w12
    f3e8:	b.ne	f3cc <lzma_mf_is_supported@@XZ_5.0+0xc9c>  // b.any
    f3ec:	mov	w12, w0
    f3f0:	cmp	w12, w0
    f3f4:	b.ne	f410 <lzma_mf_is_supported@@XZ_5.0+0xce0>  // b.any
    f3f8:	ldr	w12, [x13]
    f3fc:	mov	w14, wzr
    f400:	str	w12, [x8]
    f404:	ldr	w12, [x13, #4]
    f408:	str	w12, [x10]
    f40c:	b	f378 <lzma_mf_is_supported@@XZ_5.0+0xc48>
    f410:	mov	w15, w12
    f414:	ldrb	w14, [x14, x15]
    f418:	ldrb	w15, [x2, x15]
    f41c:	cmp	w14, w15
    f420:	b.cs	f434 <lzma_mf_is_supported@@XZ_5.0+0xd04>  // b.hs, b.nlast
    f424:	str	w3, [x8]
    f428:	add	x8, x13, #0x4
    f42c:	mov	x13, x8
    f430:	b	f444 <lzma_mf_is_supported@@XZ_5.0+0xd14>
    f434:	str	w3, [x10]
    f438:	mov	w9, w12
    f43c:	mov	w12, w11
    f440:	mov	x10, x13
    f444:	ldr	w3, [x13]
    f448:	mov	w14, #0x1                   	// #1
    f44c:	mov	w11, w12
    f450:	b	f378 <lzma_mf_is_supported@@XZ_5.0+0xc48>
    f454:	ret
    f458:	sub	sp, sp, #0x40
    f45c:	stp	x29, x30, [sp, #16]
    f460:	str	x21, [sp, #32]
    f464:	stp	x20, x19, [sp, #48]
    f468:	add	x29, sp, #0x10
    f46c:	mov	x20, x1
    f470:	mov	x19, x0
    f474:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f478:	ldr	w21, [x19, #96]
    f47c:	cmp	w21, w0
    f480:	b.ls	f4ac <lzma_mf_is_supported@@XZ_5.0+0xd7c>  // b.plast
    f484:	cmp	w0, #0x3
    f488:	b.cc	f49c <lzma_mf_is_supported@@XZ_5.0+0xd6c>  // b.lo, b.ul, b.last
    f48c:	ldr	w8, [x19, #104]
    f490:	mov	w21, w0
    f494:	cmp	w8, #0x1
    f498:	b.ne	f4ac <lzma_mf_is_supported@@XZ_5.0+0xd7c>  // b.any
    f49c:	mov	x0, x19
    f4a0:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f4a4:	mov	w20, wzr
    f4a8:	b	f5cc <lzma_mf_is_supported@@XZ_5.0+0xe9c>
    f4ac:	mov	x0, x19
    f4b0:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f4b4:	adrp	x11, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    f4b8:	ldp	w9, w8, [x19, #20]
    f4bc:	ldrb	w10, [x0]
    f4c0:	ldr	x11, [x11, #3952]
    f4c4:	ldrb	w12, [x0, #1]
    f4c8:	ldrb	w13, [x0, #2]
    f4cc:	add	w1, w9, w8
    f4d0:	ldr	w10, [x11, x10, lsl #2]
    f4d4:	ldr	w11, [x19, #88]
    f4d8:	ldr	x8, [x19, #64]
    f4dc:	mov	x2, x0
    f4e0:	eor	w9, w10, w12
    f4e4:	and	w10, w9, #0x3ff
    f4e8:	eor	w9, w9, w13, lsl #8
    f4ec:	and	w9, w9, w11
    f4f0:	add	w9, w9, #0x400
    f4f4:	lsl	x10, x10, #2
    f4f8:	lsl	x9, x9, #2
    f4fc:	ldr	w11, [x8, x10]
    f500:	ldr	w3, [x8, x9]
    f504:	str	w1, [x8, x10]
    f508:	str	w1, [x8, x9]
    f50c:	ldr	w7, [x19, #84]
    f510:	sub	w9, w1, w11
    f514:	cmp	w9, w7
    f518:	b.cs	f594 <lzma_mf_is_supported@@XZ_5.0+0xe64>  // b.hs, b.nlast
    f51c:	sub	x10, x2, w9, uxtw
    f520:	ldrb	w8, [x10]
    f524:	ldrb	w11, [x2]
    f528:	cmp	w8, w11
    f52c:	b.ne	f594 <lzma_mf_is_supported@@XZ_5.0+0xe64>  // b.any
    f530:	mov	w8, #0x2                   	// #2
    f534:	cmp	w21, #0x3
    f538:	b.cc	f560 <lzma_mf_is_supported@@XZ_5.0+0xe30>  // b.lo, b.ul, b.last
    f53c:	mov	w11, w8
    f540:	ldrb	w12, [x2, x11]
    f544:	ldrb	w11, [x10, x11]
    f548:	cmp	w12, w11
    f54c:	b.ne	f560 <lzma_mf_is_supported@@XZ_5.0+0xe30>  // b.any
    f550:	add	w8, w8, #0x1
    f554:	cmp	w21, w8
    f558:	b.ne	f53c <lzma_mf_is_supported@@XZ_5.0+0xe0c>  // b.any
    f55c:	mov	w8, w21
    f560:	sub	w9, w9, #0x1
    f564:	cmp	w8, w21
    f568:	stp	w8, w9, [x20]
    f56c:	b.ne	f5e4 <lzma_mf_is_supported@@XZ_5.0+0xeb4>  // b.any
    f570:	ldr	w4, [x19, #92]
    f574:	ldr	x5, [x19, #72]
    f578:	ldr	w6, [x19, #80]
    f57c:	mov	w0, w21
    f580:	bl	f354 <lzma_mf_is_supported@@XZ_5.0+0xc24>
    f584:	mov	x0, x19
    f588:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f58c:	mov	w20, #0x1                   	// #1
    f590:	b	f5cc <lzma_mf_is_supported@@XZ_5.0+0xe9c>
    f594:	mov	x9, xzr
    f598:	mov	w8, #0x2                   	// #2
    f59c:	ldr	w4, [x19, #92]
    f5a0:	ldr	x5, [x19, #72]
    f5a4:	ldr	w6, [x19, #80]
    f5a8:	add	x9, x20, x9, lsl #3
    f5ac:	mov	w0, w21
    f5b0:	str	w8, [sp, #8]
    f5b4:	str	x9, [sp]
    f5b8:	bl	f150 <lzma_mf_is_supported@@XZ_5.0+0xa20>
    f5bc:	sub	x8, x0, x20
    f5c0:	mov	x0, x19
    f5c4:	lsr	x20, x8, #3
    f5c8:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f5cc:	mov	w0, w20
    f5d0:	ldp	x20, x19, [sp, #48]
    f5d4:	ldr	x21, [sp, #32]
    f5d8:	ldp	x29, x30, [sp, #16]
    f5dc:	add	sp, sp, #0x40
    f5e0:	ret
    f5e4:	mov	w9, #0x1                   	// #1
    f5e8:	b	f59c <lzma_mf_is_supported@@XZ_5.0+0xe6c>
    f5ec:	stp	x29, x30, [sp, #-48]!
    f5f0:	stp	x22, x21, [sp, #16]
    f5f4:	stp	x20, x19, [sp, #32]
    f5f8:	adrp	x22, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    f5fc:	ldr	x22, [x22, #3952]
    f600:	mov	w19, w1
    f604:	mov	x20, x0
    f608:	mov	x29, sp
    f60c:	b	f684 <lzma_mf_is_supported@@XZ_5.0+0xf54>
    f610:	mov	x0, x20
    f614:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f618:	ldrb	w8, [x0]
    f61c:	ldrb	w11, [x0, #1]
    f620:	ldp	w10, w9, [x20, #20]
    f624:	ldrb	w12, [x0, #2]
    f628:	ldr	w8, [x22, x8, lsl #2]
    f62c:	ldr	w13, [x20, #88]
    f630:	add	w1, w10, w9
    f634:	ldr	x9, [x20, #64]
    f638:	eor	w8, w8, w11
    f63c:	and	w10, w8, #0x3ff
    f640:	eor	w8, w8, w12, lsl #8
    f644:	and	w8, w8, w13
    f648:	add	w8, w8, #0x400
    f64c:	lsl	x8, x8, #2
    f650:	ldr	w3, [x9, x8]
    f654:	str	w1, [x9, w10, uxtw #2]
    f658:	str	w1, [x9, x8]
    f65c:	ldr	w4, [x20, #92]
    f660:	ldr	x5, [x20, #72]
    f664:	ldp	w6, w7, [x20, #80]
    f668:	mov	x2, x0
    f66c:	mov	w0, w21
    f670:	bl	f354 <lzma_mf_is_supported@@XZ_5.0+0xc24>
    f674:	mov	x0, x20
    f678:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f67c:	subs	w19, w19, #0x1
    f680:	b.eq	f6c0 <lzma_mf_is_supported@@XZ_5.0+0xf90>  // b.none
    f684:	mov	x0, x20
    f688:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f68c:	ldr	w21, [x20, #96]
    f690:	cmp	w21, w0
    f694:	b.ls	f610 <lzma_mf_is_supported@@XZ_5.0+0xee0>  // b.plast
    f698:	cmp	w0, #0x3
    f69c:	b.cc	f6b0 <lzma_mf_is_supported@@XZ_5.0+0xf80>  // b.lo, b.ul, b.last
    f6a0:	ldr	w8, [x20, #104]
    f6a4:	mov	w21, w0
    f6a8:	cmp	w8, #0x1
    f6ac:	b.ne	f610 <lzma_mf_is_supported@@XZ_5.0+0xee0>  // b.any
    f6b0:	mov	x0, x20
    f6b4:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f6b8:	subs	w19, w19, #0x1
    f6bc:	b.ne	f684 <lzma_mf_is_supported@@XZ_5.0+0xf54>  // b.any
    f6c0:	ldp	x20, x19, [sp, #32]
    f6c4:	ldp	x22, x21, [sp, #16]
    f6c8:	ldp	x29, x30, [sp], #48
    f6cc:	ret
    f6d0:	sub	sp, sp, #0x40
    f6d4:	stp	x29, x30, [sp, #16]
    f6d8:	stp	x22, x21, [sp, #32]
    f6dc:	stp	x20, x19, [sp, #48]
    f6e0:	add	x29, sp, #0x10
    f6e4:	mov	x20, x1
    f6e8:	mov	x19, x0
    f6ec:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f6f0:	ldr	w21, [x19, #96]
    f6f4:	cmp	w21, w0
    f6f8:	b.ls	f724 <lzma_mf_is_supported@@XZ_5.0+0xff4>  // b.plast
    f6fc:	cmp	w0, #0x4
    f700:	b.cc	f714 <lzma_mf_is_supported@@XZ_5.0+0xfe4>  // b.lo, b.ul, b.last
    f704:	ldr	w8, [x19, #104]
    f708:	mov	w21, w0
    f70c:	cmp	w8, #0x1
    f710:	b.ne	f724 <lzma_mf_is_supported@@XZ_5.0+0xff4>  // b.any
    f714:	mov	x0, x19
    f718:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f71c:	mov	w22, wzr
    f720:	b	f8d4 <lzma_mf_is_supported@@XZ_5.0+0x11a4>
    f724:	mov	x0, x19
    f728:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f72c:	adrp	x11, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    f730:	ldp	w9, w8, [x19, #20]
    f734:	ldrb	w10, [x0]
    f738:	ldr	x11, [x11, #3952]
    f73c:	ldrb	w14, [x0, #3]
    f740:	ldrb	w12, [x0, #1]
    f744:	ldrb	w13, [x0, #2]
    f748:	ldr	w10, [x11, x10, lsl #2]
    f74c:	add	w1, w9, w8
    f750:	ldr	w9, [x11, x14, lsl #2]
    f754:	ldr	w15, [x19, #88]
    f758:	eor	w10, w10, w12
    f75c:	and	w11, w10, #0x3ff
    f760:	eor	w10, w10, w13, lsl #8
    f764:	ldr	x16, [x19, #64]
    f768:	mov	w8, #0x400                 	// #1024
    f76c:	eor	w9, w10, w9, lsl #5
    f770:	movk	w8, #0x1, lsl #16
    f774:	and	w12, w10, #0xffff
    f778:	and	w9, w9, w15
    f77c:	add	w10, w12, #0x400
    f780:	add	w8, w9, w8
    f784:	lsl	x13, x11, #2
    f788:	lsl	x12, x10, #2
    f78c:	lsl	x8, x8, #2
    f790:	ldr	w11, [x16, x13]
    f794:	ldr	w10, [x16, x12]
    f798:	ldr	w3, [x16, x8]
    f79c:	str	w1, [x16, x13]
    f7a0:	str	w1, [x16, x12]
    f7a4:	str	w1, [x16, x8]
    f7a8:	ldr	w7, [x19, #84]
    f7ac:	sub	w9, w1, w11
    f7b0:	mov	x2, x0
    f7b4:	cmp	w9, w7
    f7b8:	b.cs	f7ec <lzma_mf_is_supported@@XZ_5.0+0x10bc>  // b.hs, b.nlast
    f7bc:	sub	x8, x2, w9, uxtw
    f7c0:	ldrb	w8, [x8]
    f7c4:	ldrb	w12, [x2]
    f7c8:	cmp	w8, w12
    f7cc:	b.ne	f7ec <lzma_mf_is_supported@@XZ_5.0+0x10bc>  // b.any
    f7d0:	mov	w8, #0x2                   	// #2
    f7d4:	sub	w12, w9, #0x1
    f7d8:	mov	w22, #0x1                   	// #1
    f7dc:	stp	w8, w12, [x20]
    f7e0:	cmp	w10, w11
    f7e4:	b.ne	f7fc <lzma_mf_is_supported@@XZ_5.0+0x10cc>  // b.any
    f7e8:	b	f838 <lzma_mf_is_supported@@XZ_5.0+0x1108>
    f7ec:	mov	w22, wzr
    f7f0:	mov	w8, #0x1                   	// #1
    f7f4:	cmp	w10, w11
    f7f8:	b.eq	f838 <lzma_mf_is_supported@@XZ_5.0+0x1108>  // b.none
    f7fc:	sub	w10, w1, w10
    f800:	cmp	w10, w7
    f804:	b.cs	f838 <lzma_mf_is_supported@@XZ_5.0+0x1108>  // b.hs, b.nlast
    f808:	sub	x11, x2, w10, uxtw
    f80c:	ldrb	w11, [x11]
    f810:	ldrb	w12, [x2]
    f814:	cmp	w11, w12
    f818:	b.ne	f838 <lzma_mf_is_supported@@XZ_5.0+0x1108>  // b.any
    f81c:	sub	w8, w10, #0x1
    f820:	add	x9, x20, w22, uxtw #3
    f824:	add	w11, w22, #0x1
    f828:	str	w8, [x9, #4]
    f82c:	mov	w8, #0x3                   	// #3
    f830:	mov	w22, w11
    f834:	mov	w9, w10
    f838:	cbz	w22, f898 <lzma_mf_is_supported@@XZ_5.0+0x1168>
    f83c:	cmp	w8, w21
    f840:	b.cs	f86c <lzma_mf_is_supported@@XZ_5.0+0x113c>  // b.hs, b.nlast
    f844:	sub	x9, x2, w9, uxtw
    f848:	mov	w10, w8
    f84c:	ldrb	w11, [x2, x10]
    f850:	ldrb	w10, [x9, x10]
    f854:	cmp	w11, w10
    f858:	b.ne	f86c <lzma_mf_is_supported@@XZ_5.0+0x113c>  // b.any
    f85c:	add	w8, w8, #0x1
    f860:	cmp	w21, w8
    f864:	b.ne	f848 <lzma_mf_is_supported@@XZ_5.0+0x1118>  // b.any
    f868:	mov	w8, w21
    f86c:	sub	w9, w22, #0x1
    f870:	lsl	x9, x9, #3
    f874:	cmp	w8, w21
    f878:	str	w8, [x20, x9]
    f87c:	b.ne	f898 <lzma_mf_is_supported@@XZ_5.0+0x1168>  // b.any
    f880:	ldr	w4, [x19, #92]
    f884:	ldr	x5, [x19, #72]
    f888:	ldr	w6, [x19, #80]
    f88c:	mov	w0, w21
    f890:	bl	f354 <lzma_mf_is_supported@@XZ_5.0+0xc24>
    f894:	b	f8cc <lzma_mf_is_supported@@XZ_5.0+0x119c>
    f898:	ldr	w4, [x19, #92]
    f89c:	ldr	x5, [x19, #72]
    f8a0:	ldr	w6, [x19, #80]
    f8a4:	cmp	w8, #0x3
    f8a8:	mov	w9, #0x3                   	// #3
    f8ac:	csel	w8, w8, w9, hi  // hi = pmore
    f8b0:	add	x9, x20, w22, uxtw #3
    f8b4:	mov	w0, w21
    f8b8:	str	w8, [sp, #8]
    f8bc:	str	x9, [sp]
    f8c0:	bl	f150 <lzma_mf_is_supported@@XZ_5.0+0xa20>
    f8c4:	sub	x8, x0, x20
    f8c8:	lsr	x22, x8, #3
    f8cc:	mov	x0, x19
    f8d0:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f8d4:	mov	w0, w22
    f8d8:	ldp	x20, x19, [sp, #48]
    f8dc:	ldp	x22, x21, [sp, #32]
    f8e0:	ldp	x29, x30, [sp, #16]
    f8e4:	add	sp, sp, #0x40
    f8e8:	ret
    f8ec:	stp	x29, x30, [sp, #-64]!
    f8f0:	str	x23, [sp, #16]
    f8f4:	stp	x22, x21, [sp, #32]
    f8f8:	stp	x20, x19, [sp, #48]
    f8fc:	adrp	x22, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
    f900:	ldr	x22, [x22, #3952]
    f904:	mov	w23, #0x400                 	// #1024
    f908:	mov	w19, w1
    f90c:	mov	x20, x0
    f910:	movk	w23, #0x1, lsl #16
    f914:	mov	x29, sp
    f918:	b	f9a8 <lzma_mf_is_supported@@XZ_5.0+0x1278>
    f91c:	mov	x0, x20
    f920:	bl	e9fc <lzma_mf_is_supported@@XZ_5.0+0x2cc>
    f924:	ldrb	w10, [x0]
    f928:	ldp	w9, w8, [x20, #20]
    f92c:	ldrb	w13, [x0, #3]
    f930:	ldrb	w11, [x0, #1]
    f934:	ldr	w10, [x22, x10, lsl #2]
    f938:	ldrb	w12, [x0, #2]
    f93c:	add	w1, w9, w8
    f940:	ldr	w9, [x22, x13, lsl #2]
    f944:	ldr	w8, [x20, #88]
    f948:	eor	w10, w10, w11
    f94c:	eor	w12, w10, w12, lsl #8
    f950:	ldr	x11, [x20, #64]
    f954:	eor	w9, w12, w9, lsl #5
    f958:	and	w8, w9, w8
    f95c:	and	w12, w12, #0xffff
    f960:	add	w8, w8, w23
    f964:	and	w10, w10, #0x3ff
    f968:	add	w9, w12, #0x400
    f96c:	lsl	x8, x8, #2
    f970:	ldr	w3, [x11, x8]
    f974:	str	w1, [x11, w10, uxtw #2]
    f978:	str	w1, [x11, w9, uxtw #2]
    f97c:	str	w1, [x11, x8]
    f980:	ldr	w4, [x20, #92]
    f984:	ldr	x5, [x20, #72]
    f988:	ldp	w6, w7, [x20, #80]
    f98c:	mov	x2, x0
    f990:	mov	w0, w21
    f994:	bl	f354 <lzma_mf_is_supported@@XZ_5.0+0xc24>
    f998:	mov	x0, x20
    f99c:	bl	eba8 <lzma_mf_is_supported@@XZ_5.0+0x478>
    f9a0:	subs	w19, w19, #0x1
    f9a4:	b.eq	f9e4 <lzma_mf_is_supported@@XZ_5.0+0x12b4>  // b.none
    f9a8:	mov	x0, x20
    f9ac:	bl	e9ec <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f9b0:	ldr	w21, [x20, #96]
    f9b4:	cmp	w21, w0
    f9b8:	b.ls	f91c <lzma_mf_is_supported@@XZ_5.0+0x11ec>  // b.plast
    f9bc:	cmp	w0, #0x4
    f9c0:	b.cc	f9d4 <lzma_mf_is_supported@@XZ_5.0+0x12a4>  // b.lo, b.ul, b.last
    f9c4:	ldr	w8, [x20, #104]
    f9c8:	mov	w21, w0
    f9cc:	cmp	w8, #0x1
    f9d0:	b.ne	f91c <lzma_mf_is_supported@@XZ_5.0+0x11ec>  // b.any
    f9d4:	mov	x0, x20
    f9d8:	bl	eb8c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    f9dc:	subs	w19, w19, #0x1
    f9e0:	b.ne	f9a8 <lzma_mf_is_supported@@XZ_5.0+0x1278>  // b.any
    f9e4:	ldp	x20, x19, [sp, #48]
    f9e8:	ldp	x22, x21, [sp, #32]
    f9ec:	ldr	x23, [sp, #16]
    f9f0:	ldp	x29, x30, [sp], #64
    f9f4:	ret
    f9f8:	ldr	w8, [x0, #84]
    f9fc:	ldr	w9, [x0, #108]
    fa00:	mvn	w8, w8
    fa04:	cbz	w9, fa34 <lzma_mf_is_supported@@XZ_5.0+0x1304>
    fa08:	ldr	x9, [x0, #64]
    fa0c:	mov	x10, xzr
    fa10:	lsl	x11, x10, #2
    fa14:	ldr	w12, [x9, x11]
    fa18:	add	x10, x10, #0x1
    fa1c:	subs	w12, w12, w8
    fa20:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    fa24:	str	w12, [x9, x11]
    fa28:	ldr	w11, [x0, #108]
    fa2c:	cmp	x10, x11
    fa30:	b.cc	fa10 <lzma_mf_is_supported@@XZ_5.0+0x12e0>  // b.lo, b.ul, b.last
    fa34:	ldr	w9, [x0, #112]
    fa38:	cbz	w9, fa68 <lzma_mf_is_supported@@XZ_5.0+0x1338>
    fa3c:	ldr	x9, [x0, #72]
    fa40:	mov	x10, xzr
    fa44:	lsl	x11, x10, #2
    fa48:	ldr	w12, [x9, x11]
    fa4c:	add	x10, x10, #0x1
    fa50:	subs	w12, w12, w8
    fa54:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    fa58:	str	w12, [x9, x11]
    fa5c:	ldr	w11, [x0, #112]
    fa60:	cmp	x10, x11
    fa64:	b.cc	fa44 <lzma_mf_is_supported@@XZ_5.0+0x1314>  // b.lo, b.ul, b.last
    fa68:	ldr	w9, [x0, #20]
    fa6c:	sub	w8, w9, w8
    fa70:	str	w8, [x0, #20]
    fa74:	ret
    fa78:	sub	sp, sp, #0x60
    fa7c:	stp	x29, x30, [sp, #32]
    fa80:	stp	x22, x21, [sp, #64]
    fa84:	stp	x20, x19, [sp, #80]
    fa88:	ldr	x21, [x0]
    fa8c:	str	x23, [sp, #48]
    fa90:	mov	x23, x3
    fa94:	mov	x20, x2
    fa98:	mov	x22, x0
    fa9c:	mov	x19, x1
    faa0:	add	x29, sp, #0x20
    faa4:	cbnz	x21, fb00 <lzma_mf_is_supported@@XZ_5.0+0x13d0>
    faa8:	mov	w0, #0x10b8                	// #4280
    faac:	mov	x1, x19
    fab0:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    fab4:	cbz	x0, fb38 <lzma_mf_is_supported@@XZ_5.0+0x1408>
    fab8:	adrp	x8, f000 <lzma_mf_is_supported@@XZ_5.0+0x8d0>
    fabc:	adrp	x9, f000 <lzma_mf_is_supported@@XZ_5.0+0x8d0>
    fac0:	add	x8, x8, #0xbec
    fac4:	add	x9, x9, #0xdb8
    fac8:	mov	x21, x0
    facc:	movi	v0.2d, #0x0
    fad0:	stp	x8, x9, [x22, #24]
    fad4:	mov	x8, #0xffffffffffffffff    	// #-1
    fad8:	str	x0, [x22]
    fadc:	str	xzr, [x0]
    fae0:	str	xzr, [x0, #32]
    fae4:	stp	q0, q0, [x0, #48]
    fae8:	stp	xzr, xzr, [x0, #80]
    faec:	str	x8, [x0, #96]
    faf0:	stur	q0, [x0, #104]
    faf4:	stur	q0, [x0, #120]
    faf8:	stur	q0, [x0, #136]
    fafc:	str	xzr, [x0, #152]
    fb00:	ldr	x2, [x20, #16]
    fb04:	add	x0, x21, #0x30
    fb08:	add	x3, sp, #0x8
    fb0c:	mov	x1, x19
    fb10:	blr	x23
    fb14:	cbnz	w0, fbd4 <lzma_mf_is_supported@@XZ_5.0+0x14a4>
    fb18:	ldr	x8, [sp, #8]
    fb1c:	cmp	x8, #0xfff
    fb20:	b.hi	fb2c <lzma_mf_is_supported@@XZ_5.0+0x13fc>  // b.pmore
    fb24:	mov	w8, #0x1000                	// #4096
    fb28:	str	x8, [sp, #8]
    fb2c:	ldr	x8, [sp, #8]
    fb30:	cmn	x8, #0x10
    fb34:	b.ls	fb40 <lzma_mf_is_supported@@XZ_5.0+0x1410>  // b.plast
    fb38:	mov	w0, #0x5                   	// #5
    fb3c:	b	fbd4 <lzma_mf_is_supported@@XZ_5.0+0x14a4>
    fb40:	add	x8, x8, #0xf
    fb44:	and	x8, x8, #0xfffffffffffffff0
    fb48:	str	x8, [sp, #8]
    fb4c:	ldr	x9, [x21, #32]
    fb50:	cmp	x9, x8
    fb54:	b.eq	fb80 <lzma_mf_is_supported@@XZ_5.0+0x1450>  // b.none
    fb58:	ldr	x0, [x21]
    fb5c:	mov	x1, x19
    fb60:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    fb64:	ldr	x0, [sp, #8]
    fb68:	mov	x1, x19
    fb6c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    fb70:	str	x0, [x21]
    fb74:	cbz	x0, fb38 <lzma_mf_is_supported@@XZ_5.0+0x1408>
    fb78:	ldr	x8, [sp, #8]
    fb7c:	str	x8, [x21, #32]
    fb80:	ldr	x0, [x22]
    fb84:	bl	fe14 <lzma_mf_is_supported@@XZ_5.0+0x16e4>
    fb88:	ldr	x8, [sp, #16]
    fb8c:	cbz	x8, fbbc <lzma_mf_is_supported@@XZ_5.0+0x148c>
    fb90:	ldr	x9, [sp, #24]
    fb94:	cbz	x9, fbbc <lzma_mf_is_supported@@XZ_5.0+0x148c>
    fb98:	ldr	x10, [sp, #8]
    fb9c:	ldr	x0, [x21]
    fba0:	cmp	x9, x10
    fba4:	csel	x22, x9, x10, cc  // cc = lo, ul, last
    fba8:	sub	x9, x9, x22
    fbac:	add	x1, x8, x9
    fbb0:	mov	x2, x22
    fbb4:	bl	3090 <memcpy@plt>
    fbb8:	stp	x22, x22, [x21, #8]
    fbbc:	add	x0, x21, #0x58
    fbc0:	add	x2, x20, #0x18
    fbc4:	mov	x1, x19
    fbc8:	strh	wzr, [x21, #160]
    fbcc:	stp	xzr, xzr, [x21, #168]
    fbd0:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
    fbd4:	ldp	x20, x19, [sp, #80]
    fbd8:	ldp	x22, x21, [sp, #64]
    fbdc:	ldr	x23, [sp, #48]
    fbe0:	ldp	x29, x30, [sp, #32]
    fbe4:	add	sp, sp, #0x60
    fbe8:	ret
    fbec:	sub	sp, sp, #0x80
    fbf0:	stp	x29, x30, [sp, #32]
    fbf4:	stp	x28, x27, [sp, #48]
    fbf8:	stp	x26, x25, [sp, #64]
    fbfc:	stp	x24, x23, [sp, #80]
    fc00:	stp	x22, x21, [sp, #96]
    fc04:	stp	x20, x19, [sp, #112]
    fc08:	ldr	x8, [x0, #112]
    fc0c:	add	x29, sp, #0x20
    fc10:	mov	x19, x7
    fc14:	mov	x20, x6
    fc18:	mov	x21, x5
    fc1c:	mov	x23, x3
    fc20:	mov	x25, x2
    fc24:	mov	x24, x0
    fc28:	stur	x1, [x29, #-8]
    fc2c:	cbz	x8, fd50 <lzma_mf_is_supported@@XZ_5.0+0x1620>
    fc30:	ldr	w8, [x29, #96]
    fc34:	add	x27, x24, #0xa8
    fc38:	add	x28, x24, #0xb0
    fc3c:	add	x26, x24, #0xb8
    fc40:	str	x4, [sp, #16]
    fc44:	str	w8, [sp, #12]
    fc48:	b	fc58 <lzma_mf_is_supported@@XZ_5.0+0x1528>
    fc4c:	mov	w8, wzr
    fc50:	mov	w22, w0
    fc54:	tbz	w8, #0, fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fc58:	ldr	x8, [x20]
    fc5c:	cmp	x8, x19
    fc60:	b.cs	fd78 <lzma_mf_is_supported@@XZ_5.0+0x1648>  // b.hs, b.nlast
    fc64:	ldrb	w8, [x24, #160]
    fc68:	cbnz	w8, fce8 <lzma_mf_is_supported@@XZ_5.0+0x15b8>
    fc6c:	ldr	x8, [x27]
    fc70:	ldr	x9, [x28]
    fc74:	cmp	x8, x9
    fc78:	b.ne	fce8 <lzma_mf_is_supported@@XZ_5.0+0x15b8>  // b.any
    fc7c:	stp	xzr, xzr, [x27]
    fc80:	ldr	x8, [x24, #112]
    fc84:	ldr	x0, [x24, #88]
    fc88:	ldr	w9, [sp, #12]
    fc8c:	ldur	x1, [x29, #-8]
    fc90:	ldr	x4, [sp, #16]
    fc94:	mov	w7, #0x1000                	// #4096
    fc98:	mov	x2, x25
    fc9c:	mov	x3, x23
    fca0:	mov	x5, x26
    fca4:	mov	x6, x28
    fca8:	str	w9, [sp]
    fcac:	blr	x8
    fcb0:	cbz	w0, fcc8 <lzma_mf_is_supported@@XZ_5.0+0x1598>
    fcb4:	cmp	w0, #0x1
    fcb8:	b.ne	fcdc <lzma_mf_is_supported@@XZ_5.0+0x15ac>  // b.any
    fcbc:	mov	w8, #0x1                   	// #1
    fcc0:	strb	w8, [x24, #160]
    fcc4:	b	fcd0 <lzma_mf_is_supported@@XZ_5.0+0x15a0>
    fcc8:	ldr	x8, [x28]
    fccc:	cbz	x8, fce0 <lzma_mf_is_supported@@XZ_5.0+0x15b0>
    fcd0:	mov	w8, #0x1                   	// #1
    fcd4:	cbnz	w8, fce8 <lzma_mf_is_supported@@XZ_5.0+0x15b8>
    fcd8:	b	fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fcdc:	mov	w8, wzr
    fce0:	mov	w22, w0
    fce4:	cbz	w8, fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fce8:	ldrb	w8, [x24, #161]
    fcec:	cbnz	w8, fd80 <lzma_mf_is_supported@@XZ_5.0+0x1650>
    fcf0:	ldr	x3, [x24, #176]
    fcf4:	mov	x0, x24
    fcf8:	mov	x1, x26
    fcfc:	mov	x2, x27
    fd00:	mov	x4, x21
    fd04:	mov	x5, x20
    fd08:	mov	x6, x19
    fd0c:	bl	fe58 <lzma_mf_is_supported@@XZ_5.0+0x1728>
    fd10:	cbz	w0, fd28 <lzma_mf_is_supported@@XZ_5.0+0x15f8>
    fd14:	cmp	w0, #0x1
    fd18:	b.ne	fc4c <lzma_mf_is_supported@@XZ_5.0+0x151c>  // b.any
    fd1c:	mov	w8, #0x1                   	// #1
    fd20:	strb	w8, [x24, #161]
    fd24:	b	fd48 <lzma_mf_is_supported@@XZ_5.0+0x1618>
    fd28:	ldrb	w8, [x24, #160]
    fd2c:	cbz	w8, fd48 <lzma_mf_is_supported@@XZ_5.0+0x1618>
    fd30:	ldr	x8, [x20]
    fd34:	cmp	x8, x19
    fd38:	b.cs	fd48 <lzma_mf_is_supported@@XZ_5.0+0x1618>  // b.hs, b.nlast
    fd3c:	mov	w8, wzr
    fd40:	mov	w22, #0x9                   	// #9
    fd44:	b	fc54 <lzma_mf_is_supported@@XZ_5.0+0x1524>
    fd48:	mov	w8, #0x1                   	// #1
    fd4c:	b	fc54 <lzma_mf_is_supported@@XZ_5.0+0x1524>
    fd50:	mov	x0, x24
    fd54:	mov	x1, x25
    fd58:	mov	x2, x23
    fd5c:	mov	x3, x4
    fd60:	mov	x4, x21
    fd64:	mov	x5, x20
    fd68:	mov	x6, x19
    fd6c:	bl	fe58 <lzma_mf_is_supported@@XZ_5.0+0x1728>
    fd70:	mov	w22, w0
    fd74:	b	fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fd78:	mov	w22, wzr
    fd7c:	b	fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fd80:	ldr	x8, [x24, #176]
    fd84:	cbz	x8, fd90 <lzma_mf_is_supported@@XZ_5.0+0x1660>
    fd88:	mov	w22, #0x9                   	// #9
    fd8c:	b	fd94 <lzma_mf_is_supported@@XZ_5.0+0x1664>
    fd90:	ldrb	w22, [x24, #160]
    fd94:	mov	w0, w22
    fd98:	ldp	x20, x19, [sp, #112]
    fd9c:	ldp	x22, x21, [sp, #96]
    fda0:	ldp	x24, x23, [sp, #80]
    fda4:	ldp	x26, x25, [sp, #64]
    fda8:	ldp	x28, x27, [sp, #48]
    fdac:	ldp	x29, x30, [sp, #32]
    fdb0:	add	sp, sp, #0x80
    fdb4:	ret
    fdb8:	stp	x29, x30, [sp, #-32]!
    fdbc:	stp	x20, x19, [sp, #16]
    fdc0:	mov	x20, x0
    fdc4:	add	x0, x0, #0x58
    fdc8:	mov	x29, sp
    fdcc:	mov	x19, x1
    fdd0:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
    fdd4:	ldr	x0, [x20]
    fdd8:	mov	x1, x19
    fddc:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    fde0:	ldr	x8, [x20, #80]
    fde4:	ldr	x0, [x20, #48]
    fde8:	mov	x1, x19
    fdec:	cbz	x8, fdf8 <lzma_mf_is_supported@@XZ_5.0+0x16c8>
    fdf0:	blr	x8
    fdf4:	b	fdfc <lzma_mf_is_supported@@XZ_5.0+0x16cc>
    fdf8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    fdfc:	mov	x0, x20
    fe00:	mov	x1, x19
    fe04:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
    fe08:	ldp	x20, x19, [sp, #16]
    fe0c:	ldp	x29, x30, [sp], #32
    fe10:	ret
    fe14:	ldr	x8, [x0]
    fe18:	ldr	x9, [x0, #32]
    fe1c:	stp	xzr, xzr, [x0, #8]
    fe20:	add	x8, x9, x8
    fe24:	sturb	wzr, [x8, #-1]
    fe28:	strb	wzr, [x0, #40]
    fe2c:	ret
    fe30:	mov	w8, #0x10b8                	// #4280
    fe34:	add	x0, x0, x8
    fe38:	ret
    fe3c:	stp	x29, x30, [sp, #-16]!
    fe40:	ldr	x8, [x0, #72]
    fe44:	ldr	x0, [x0, #48]
    fe48:	mov	x29, sp
    fe4c:	blr	x8
    fe50:	ldp	x29, x30, [sp], #16
    fe54:	ret
    fe58:	sub	sp, sp, #0x80
    fe5c:	stp	x29, x30, [sp, #32]
    fe60:	stp	x26, x25, [sp, #64]
    fe64:	stp	x24, x23, [sp, #80]
    fe68:	stp	x20, x19, [sp, #112]
    fe6c:	add	x29, sp, #0x20
    fe70:	mov	x19, x6
    fe74:	mov	x20, x5
    fe78:	mov	x24, x1
    fe7c:	mov	x25, x0
    fe80:	stp	x28, x27, [sp, #48]
    fe84:	stp	x22, x21, [sp, #96]
    fe88:	stur	x4, [x29, #-8]
    fe8c:	stp	x2, x3, [sp, #8]
    fe90:	b	fea0 <lzma_mf_is_supported@@XZ_5.0+0x1770>
    fe94:	mov	w8, #0x1                   	// #1
    fe98:	mov	w26, w28
    fe9c:	tbz	w8, #0, ff58 <lzma_mf_is_supported@@XZ_5.0+0x1828>
    fea0:	ldr	x9, [x25, #8]
    fea4:	ldr	x8, [x25, #32]
    fea8:	mov	w28, w26
    feac:	cmp	x9, x8
    feb0:	b.ne	feb8 <lzma_mf_is_supported@@XZ_5.0+0x1788>  // b.any
    feb4:	str	xzr, [x25, #8]
    feb8:	ldr	x22, [x20]
    febc:	ldr	x23, [x25, #8]
    fec0:	ldp	x0, x10, [x25, #48]
    fec4:	mov	x1, x25
    fec8:	sub	x9, x19, x22
    fecc:	sub	x8, x8, x23
    fed0:	cmp	x9, x8
    fed4:	csel	x8, x9, x8, cc  // cc = lo, ul, last
    fed8:	add	x8, x8, x23
    fedc:	str	x8, [x25, #24]
    fee0:	ldp	x3, x4, [sp, #8]
    fee4:	mov	x2, x24
    fee8:	blr	x10
    feec:	ldp	x8, x21, [x25]
    fef0:	ldur	x9, [x29, #-8]
    fef4:	mov	w26, w0
    fef8:	sub	x27, x21, x23
    fefc:	add	x0, x9, x22
    ff00:	add	x1, x8, x23
    ff04:	mov	x2, x27
    ff08:	bl	3090 <memcpy@plt>
    ff0c:	add	x27, x27, x22
    ff10:	str	x27, [x20]
    ff14:	ldrb	w8, [x25, #40]
    ff18:	cbz	w8, ff38 <lzma_mf_is_supported@@XZ_5.0+0x1808>
    ff1c:	mov	x0, x25
    ff20:	bl	fe14 <lzma_mf_is_supported@@XZ_5.0+0x16e4>
    ff24:	mov	w8, wzr
    ff28:	cbnz	w26, fe9c <lzma_mf_is_supported@@XZ_5.0+0x176c>
    ff2c:	cmp	x27, x19
    ff30:	b.ne	fe94 <lzma_mf_is_supported@@XZ_5.0+0x1764>  // b.any
    ff34:	b	fe9c <lzma_mf_is_supported@@XZ_5.0+0x176c>
    ff38:	cbnz	w26, fe9c <lzma_mf_is_supported@@XZ_5.0+0x176c>
    ff3c:	cmp	x27, x19
    ff40:	b.eq	fe9c <lzma_mf_is_supported@@XZ_5.0+0x176c>  // b.none
    ff44:	ldr	x8, [x25, #32]
    ff48:	cmp	x21, x8
    ff4c:	b.cs	fe94 <lzma_mf_is_supported@@XZ_5.0+0x1764>  // b.hs, b.nlast
    ff50:	mov	w8, wzr
    ff54:	b	fe9c <lzma_mf_is_supported@@XZ_5.0+0x176c>
    ff58:	mov	w0, w26
    ff5c:	ldp	x20, x19, [sp, #112]
    ff60:	ldp	x22, x21, [sp, #96]
    ff64:	ldp	x24, x23, [sp, #80]
    ff68:	ldp	x26, x25, [sp, #64]
    ff6c:	ldp	x28, x27, [sp, #48]
    ff70:	ldp	x29, x30, [sp, #32]
    ff74:	add	sp, sp, #0x80
    ff78:	ret

000000000000ff7c <lzma_lzma_preset@@XZ_5.0>:
    ff7c:	and	x9, x1, #0x1f
    ff80:	cmp	w9, #0x9
    ff84:	mov	w8, #0x1                   	// #1
    ff88:	b.hi	1007c <lzma_lzma_preset@@XZ_5.0+0x100>  // b.pmore
    ff8c:	and	w10, w1, #0x7fffffe0
    ff90:	cbnz	w10, 1007c <lzma_lzma_preset@@XZ_5.0+0x100>
    ff94:	adrp	x12, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
    ff98:	add	x12, x12, #0xe32
    ff9c:	ldrb	w12, [x12, x9]
    ffa0:	mov	x8, #0x300000000           	// #12884901888
    ffa4:	mov	w10, #0x1                   	// #1
    ffa8:	mov	x11, #0x200000000           	// #8589934592
    ffac:	stp	xzr, x8, [x0, #8]
    ffb0:	lsl	w8, w10, w12
    ffb4:	cmp	w9, #0x3
    ffb8:	str	x11, [x0, #24]
    ffbc:	str	w8, [x0]
    ffc0:	b.hi	fff4 <lzma_lzma_preset@@XZ_5.0+0x78>  // b.pmore
    ffc4:	adrp	x13, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
    ffc8:	cmp	w9, #0x0
    ffcc:	mov	w8, #0x3                   	// #3
    ffd0:	add	x13, x13, #0xe3c
    ffd4:	cinc	w14, w8, ne  // ne = any
    ffd8:	ldrb	w8, [x13, x9]
    ffdc:	mov	w11, #0x111                 	// #273
    ffe0:	mov	w12, #0x80                  	// #128
    ffe4:	cmp	w9, #0x2
    ffe8:	str	w14, [x0, #40]
    ffec:	csel	w11, w12, w11, cc  // cc = lo, ul, last
    fff0:	b	10020 <lzma_lzma_preset@@XZ_5.0+0xa4>
    fff4:	mov	w11, #0x14                  	// #20
    fff8:	cmp	w9, #0x5
    fffc:	mov	w12, #0x40                  	// #64
   10000:	mov	w13, #0x20                  	// #32
   10004:	mov	w14, #0x10                  	// #16
   10008:	str	w11, [x0, #40]
   1000c:	csel	w11, w13, w12, eq  // eq = none
   10010:	cmp	w9, #0x4
   10014:	mov	w8, wzr
   10018:	mov	w10, #0x2                   	// #2
   1001c:	csel	w11, w14, w11, eq  // eq = none
   10020:	stp	w10, w11, [x0, #32]
   10024:	str	w8, [x0, #44]
   10028:	tbnz	w1, #31, 10034 <lzma_lzma_preset@@XZ_5.0+0xb8>
   1002c:	mov	w0, wzr
   10030:	ret
   10034:	mov	w8, #0x2                   	// #2
   10038:	mov	w10, #0x14                  	// #20
   1003c:	cmp	w9, #0x5
   10040:	str	w8, [x0, #32]
   10044:	str	w10, [x0, #40]
   10048:	b.eq	10054 <lzma_lzma_preset@@XZ_5.0+0xd8>  // b.none
   1004c:	cmp	w9, #0x3
   10050:	b.ne	10068 <lzma_lzma_preset@@XZ_5.0+0xec>  // b.any
   10054:	mov	w9, #0xc0                  	// #192
   10058:	str	w9, [x0, #36]
   1005c:	str	wzr, [x0, #44]
   10060:	mov	w0, wzr
   10064:	ret
   10068:	mov	w8, wzr
   1006c:	mov	w9, #0x111                 	// #273
   10070:	mov	w10, #0x200                 	// #512
   10074:	str	w9, [x0, #36]
   10078:	str	w10, [x0, #44]
   1007c:	mov	w0, w8
   10080:	ret
   10084:	stp	x29, x30, [sp, #-96]!
   10088:	ldrb	w8, [x0, #2957]
   1008c:	stp	x24, x23, [sp, #48]
   10090:	stp	x22, x21, [sp, #64]
   10094:	stp	x20, x19, [sp, #80]
   10098:	mov	w23, w5
   1009c:	mov	x20, x4
   100a0:	mov	x21, x3
   100a4:	mov	x22, x2
   100a8:	mov	x19, x0
   100ac:	mov	x24, x1
   100b0:	str	x27, [sp, #16]
   100b4:	stp	x26, x25, [sp, #32]
   100b8:	mov	x29, sp
   100bc:	cbnz	w8, 100d0 <lzma_lzma_preset@@XZ_5.0+0x154>
   100c0:	mov	x0, x19
   100c4:	mov	x1, x24
   100c8:	bl	10228 <lzma_lzma_preset@@XZ_5.0+0x2ac>
   100cc:	tbz	w0, #0, 100f4 <lzma_lzma_preset@@XZ_5.0+0x178>
   100d0:	mov	x0, x24
   100d4:	bl	102a8 <lzma_lzma_preset@@XZ_5.0+0x32c>
   100d8:	mov	w25, w0
   100dc:	mov	x0, x19
   100e0:	mov	x1, x22
   100e4:	mov	x2, x21
   100e8:	mov	x3, x20
   100ec:	bl	102b4 <lzma_lzma_preset@@XZ_5.0+0x338>
   100f0:	tbz	w0, #0, 10114 <lzma_lzma_preset@@XZ_5.0+0x198>
   100f4:	mov	w0, wzr
   100f8:	ldp	x20, x19, [sp, #80]
   100fc:	ldp	x22, x21, [sp, #64]
   10100:	ldp	x24, x23, [sp, #48]
   10104:	ldp	x26, x25, [sp, #32]
   10108:	ldr	x27, [sp, #16]
   1010c:	ldp	x29, x30, [sp], #96
   10110:	ret
   10114:	mov	w26, #0xeffe                	// #61438
   10118:	b	10168 <lzma_lzma_preset@@XZ_5.0+0x1ec>
   1011c:	add	x2, x29, #0x18
   10120:	add	x3, x29, #0x1c
   10124:	mov	x0, x19
   10128:	mov	x1, x24
   1012c:	mov	w4, w25
   10130:	bl	1192c <lzma_mode_is_supported@@XZ_5.0+0xd60>
   10134:	ldp	w2, w3, [x29, #24]
   10138:	mov	x0, x19
   1013c:	mov	x1, x24
   10140:	mov	w4, w25
   10144:	bl	10468 <lzma_lzma_preset@@XZ_5.0+0x4ec>
   10148:	ldr	w8, [x29, #28]
   1014c:	mov	x0, x19
   10150:	mov	x1, x22
   10154:	mov	x2, x21
   10158:	mov	x3, x20
   1015c:	add	w25, w8, w25
   10160:	bl	102b4 <lzma_lzma_preset@@XZ_5.0+0x338>
   10164:	tbnz	w0, #0, 100f4 <lzma_lzma_preset@@XZ_5.0+0x178>
   10168:	cmn	w23, #0x1
   1016c:	b.eq	10198 <lzma_lzma_preset@@XZ_5.0+0x21c>  // b.none
   10170:	ldp	w8, w9, [x24, #24]
   10174:	sub	w8, w8, w9
   10178:	cmp	w8, w23
   1017c:	b.cs	101d8 <lzma_lzma_preset@@XZ_5.0+0x25c>  // b.hs, b.nlast
   10180:	ldr	x27, [x21]
   10184:	mov	x0, x19
   10188:	bl	1045c <lzma_lzma_preset@@XZ_5.0+0x4e0>
   1018c:	add	x8, x0, x27
   10190:	cmp	x8, x26
   10194:	b.hi	101d8 <lzma_lzma_preset@@XZ_5.0+0x25c>  // b.pmore
   10198:	ldr	w8, [x24, #24]
   1019c:	ldr	w9, [x24, #32]
   101a0:	cmp	w8, w9
   101a4:	b.cc	101b8 <lzma_lzma_preset@@XZ_5.0+0x23c>  // b.lo, b.ul, b.last
   101a8:	ldr	w8, [x24, #104]
   101ac:	cbz	w8, 100f4 <lzma_lzma_preset@@XZ_5.0+0x178>
   101b0:	ldr	w8, [x24, #28]
   101b4:	cbz	w8, 101d8 <lzma_lzma_preset@@XZ_5.0+0x25c>
   101b8:	ldrb	w8, [x19, #2956]
   101bc:	cbz	w8, 1011c <lzma_lzma_preset@@XZ_5.0+0x1a0>
   101c0:	add	x2, x29, #0x18
   101c4:	add	x3, x29, #0x1c
   101c8:	mov	x0, x19
   101cc:	mov	x1, x24
   101d0:	bl	11534 <lzma_mode_is_supported@@XZ_5.0+0x968>
   101d4:	b	10134 <lzma_lzma_preset@@XZ_5.0+0x1b8>
   101d8:	ldrb	w8, [x19, #2958]
   101dc:	cbnz	w8, 1021c <lzma_lzma_preset@@XZ_5.0+0x2a0>
   101e0:	mov	w8, #0x1                   	// #1
   101e4:	cmn	w23, #0x1
   101e8:	strb	w8, [x19, #2958]
   101ec:	b.ne	101fc <lzma_lzma_preset@@XZ_5.0+0x280>  // b.any
   101f0:	mov	x0, x19
   101f4:	mov	w1, w25
   101f8:	bl	1055c <lzma_lzma_preset@@XZ_5.0+0x5e0>
   101fc:	mov	x0, x19
   10200:	bl	105cc <lzma_lzma_preset@@XZ_5.0+0x650>
   10204:	mov	x0, x19
   10208:	mov	x1, x22
   1020c:	mov	x2, x21
   10210:	mov	x3, x20
   10214:	bl	102b4 <lzma_lzma_preset@@XZ_5.0+0x338>
   10218:	tbnz	w0, #0, 100f4 <lzma_lzma_preset@@XZ_5.0+0x178>
   1021c:	mov	w0, #0x1                   	// #1
   10220:	strb	wzr, [x19, #2958]
   10224:	b	100f8 <lzma_lzma_preset@@XZ_5.0+0x17c>
   10228:	stp	x29, x30, [sp, #-32]!
   1022c:	stp	x20, x19, [sp, #16]
   10230:	ldr	w8, [x1, #24]
   10234:	ldr	w9, [x1, #32]
   10238:	mov	x20, x1
   1023c:	mov	x19, x0
   10240:	mov	x29, sp
   10244:	cmp	w8, w9
   10248:	b.ne	1025c <lzma_lzma_preset@@XZ_5.0+0x2e0>  // b.any
   1024c:	ldr	w8, [x20, #104]
   10250:	cbnz	w8, 10294 <lzma_lzma_preset@@XZ_5.0+0x318>
   10254:	mov	w0, wzr
   10258:	b	1029c <lzma_lzma_preset@@XZ_5.0+0x320>
   1025c:	mov	x0, x20
   10260:	bl	10bdc <lzma_mode_is_supported@@XZ_5.0+0x10>
   10264:	mov	w8, #0x6b9c                	// #27548
   10268:	add	x1, x19, x8
   1026c:	mov	x0, x19
   10270:	mov	w2, wzr
   10274:	str	wzr, [x20, #28]
   10278:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   1027c:	ldr	x8, [x20]
   10280:	add	x1, x19, #0xb9c
   10284:	mov	w2, #0x8                   	// #8
   10288:	mov	x0, x19
   1028c:	ldrb	w3, [x8]
   10290:	bl	10c34 <lzma_mode_is_supported@@XZ_5.0+0x68>
   10294:	mov	w0, #0x1                   	// #1
   10298:	strb	w0, [x19, #2957]
   1029c:	ldp	x20, x19, [sp, #16]
   102a0:	ldp	x29, x30, [sp], #32
   102a4:	ret
   102a8:	ldp	w8, w9, [x0, #24]
   102ac:	sub	w0, w8, w9
   102b0:	ret
   102b4:	stp	x29, x30, [sp, #-80]!
   102b8:	str	x25, [sp, #16]
   102bc:	stp	x24, x23, [sp, #32]
   102c0:	stp	x22, x21, [sp, #48]
   102c4:	stp	x20, x19, [sp, #64]
   102c8:	mov	x23, x0
   102cc:	ldr	x8, [x23, #24]!
   102d0:	mov	x29, sp
   102d4:	ldr	x9, [x23, #8]
   102d8:	cmp	x9, x8
   102dc:	b.cs	103f0 <lzma_lzma_preset@@XZ_5.0+0x474>  // b.hs, b.nlast
   102e0:	adrp	x24, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xb434>
   102e4:	mov	x19, x3
   102e8:	mov	x21, x2
   102ec:	mov	x20, x0
   102f0:	mov	x22, x1
   102f4:	add	x24, x24, #0xe40
   102f8:	mov	w25, #0x800                 	// #2048
   102fc:	b	1033c <lzma_lzma_preset@@XZ_5.0+0x3c0>
   10300:	add	x9, x20, x8, lsl #3
   10304:	ldr	x9, [x9, #272]
   10308:	ldr	w10, [x20, #16]
   1030c:	ldrh	w11, [x9]
   10310:	lsr	w10, w10, #11
   10314:	mul	w10, w10, w11
   10318:	sub	w12, w25, w11
   1031c:	str	w10, [x20, #16]
   10320:	add	w10, w11, w12, lsr #5
   10324:	strh	w10, [x9]
   10328:	ldr	x9, [x20, #24]
   1032c:	add	x8, x8, #0x1
   10330:	str	x8, [x20, #32]
   10334:	cmp	x8, x9
   10338:	b.cs	103f0 <lzma_lzma_preset@@XZ_5.0+0x474>  // b.hs, b.nlast
   1033c:	ldrb	w8, [x20, #19]
   10340:	cbnz	w8, 10368 <lzma_lzma_preset@@XZ_5.0+0x3ec>
   10344:	mov	x0, x20
   10348:	mov	x1, x22
   1034c:	mov	x2, x21
   10350:	mov	x3, x19
   10354:	bl	10c98 <lzma_mode_is_supported@@XZ_5.0+0xcc>
   10358:	tbnz	w0, #0, 10440 <lzma_lzma_preset@@XZ_5.0+0x4c4>
   1035c:	ldr	w8, [x20, #16]
   10360:	lsl	w8, w8, #8
   10364:	str	w8, [x20, #16]
   10368:	ldr	x8, [x20, #32]
   1036c:	add	x9, x20, x8, lsl #2
   10370:	ldr	w9, [x9, #40]
   10374:	cmp	w9, #0x4
   10378:	b.hi	10328 <lzma_lzma_preset@@XZ_5.0+0x3ac>  // b.pmore
   1037c:	adr	x10, 10300 <lzma_lzma_preset@@XZ_5.0+0x384>
   10380:	ldrb	w11, [x24, x9]
   10384:	add	x10, x10, x11, lsl #2
   10388:	br	x10
   1038c:	add	x9, x20, x8, lsl #3
   10390:	ldr	x9, [x9, #272]
   10394:	ldr	w10, [x20, #16]
   10398:	ldr	x12, [x20]
   1039c:	ldrh	w11, [x9]
   103a0:	lsr	w13, w10, #11
   103a4:	mul	w13, w13, w11
   103a8:	sub	w11, w11, w11, lsr #5
   103ac:	add	x12, x12, x13
   103b0:	sub	w10, w10, w13
   103b4:	str	x12, [x20]
   103b8:	str	w10, [x20, #16]
   103bc:	strh	w11, [x9]
   103c0:	b	10328 <lzma_lzma_preset@@XZ_5.0+0x3ac>
   103c4:	ldr	w9, [x20, #16]
   103c8:	lsr	w9, w9, #1
   103cc:	str	w9, [x20, #16]
   103d0:	b	10328 <lzma_lzma_preset@@XZ_5.0+0x3ac>
   103d4:	ldr	w9, [x20, #16]
   103d8:	ldr	x10, [x20]
   103dc:	lsr	x9, x9, #1
   103e0:	str	w9, [x20, #16]
   103e4:	add	x9, x10, x9
   103e8:	str	x9, [x20]
   103ec:	b	10328 <lzma_lzma_preset@@XZ_5.0+0x3ac>
   103f0:	mov	w0, wzr
   103f4:	stp	xzr, xzr, [x23]
   103f8:	b	10444 <lzma_lzma_preset@@XZ_5.0+0x4c8>
   103fc:	mov	w8, #0xffffffff            	// #-1
   10400:	str	w8, [x20, #16]
   10404:	mov	x0, x20
   10408:	mov	x1, x22
   1040c:	mov	x2, x21
   10410:	mov	x3, x19
   10414:	bl	10c98 <lzma_mode_is_supported@@XZ_5.0+0xcc>
   10418:	tbnz	w0, #0, 10440 <lzma_lzma_preset@@XZ_5.0+0x4c4>
   1041c:	ldp	x9, x8, [x20, #24]
   10420:	add	x8, x8, #0x1
   10424:	cmp	x8, x9
   10428:	str	x8, [x20, #32]
   1042c:	b.cc	10404 <lzma_lzma_preset@@XZ_5.0+0x488>  // b.lo, b.ul, b.last
   10430:	mov	x0, x20
   10434:	bl	107f8 <lzma_lzma_preset@@XZ_5.0+0x87c>
   10438:	mov	w0, wzr
   1043c:	b	10444 <lzma_lzma_preset@@XZ_5.0+0x4c8>
   10440:	mov	w0, #0x1                   	// #1
   10444:	ldp	x20, x19, [sp, #64]
   10448:	ldp	x22, x21, [sp, #48]
   1044c:	ldp	x24, x23, [sp, #32]
   10450:	ldr	x25, [sp, #16]
   10454:	ldp	x29, x30, [sp], #80
   10458:	ret
   1045c:	ldr	x8, [x0, #8]
   10460:	add	x0, x8, #0x4
   10464:	ret
   10468:	stp	x29, x30, [sp, #-64]!
   1046c:	stp	x24, x23, [sp, #16]
   10470:	stp	x22, x21, [sp, #32]
   10474:	stp	x20, x19, [sp, #48]
   10478:	ldr	w8, [x0, #2960]
   1047c:	ldr	w9, [x0, #736]
   10480:	mov	w10, #0x6b9c                	// #27548
   10484:	mov	w19, w3
   10488:	and	w23, w8, w4
   1048c:	add	x8, x0, x9, lsl #5
   10490:	add	x8, x8, w23, uxtw #1
   10494:	mov	x20, x1
   10498:	mov	x21, x0
   1049c:	cmn	w2, #0x1
   104a0:	add	x1, x8, x10
   104a4:	mov	x29, sp
   104a8:	b.eq	104f8 <lzma_lzma_preset@@XZ_5.0+0x57c>  // b.none
   104ac:	mov	w22, w2
   104b0:	mov	w2, #0x1                   	// #1
   104b4:	mov	x0, x21
   104b8:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   104bc:	ldr	w8, [x21, #736]
   104c0:	mov	w9, #0x6d1c                	// #27932
   104c4:	cmp	w22, #0x3
   104c8:	add	x8, x21, x8, lsl #1
   104cc:	add	x1, x8, x9
   104d0:	b.hi	1051c <lzma_lzma_preset@@XZ_5.0+0x5a0>  // b.pmore
   104d4:	mov	w2, #0x1                   	// #1
   104d8:	mov	x0, x21
   104dc:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   104e0:	mov	x0, x21
   104e4:	mov	w1, w23
   104e8:	mov	w2, w22
   104ec:	mov	w3, w19
   104f0:	bl	10dd8 <lzma_mode_is_supported@@XZ_5.0+0x20c>
   104f4:	b	1053c <lzma_lzma_preset@@XZ_5.0+0x5c0>
   104f8:	mov	x0, x21
   104fc:	mov	w2, wzr
   10500:	mov	w24, w4
   10504:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10508:	mov	x0, x21
   1050c:	mov	x1, x20
   10510:	mov	w2, w24
   10514:	bl	10d20 <lzma_mode_is_supported@@XZ_5.0+0x154>
   10518:	b	1053c <lzma_lzma_preset@@XZ_5.0+0x5c0>
   1051c:	mov	x0, x21
   10520:	mov	w2, wzr
   10524:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10528:	sub	w2, w22, #0x4
   1052c:	mov	x0, x21
   10530:	mov	w1, w23
   10534:	mov	w3, w19
   10538:	bl	10f34 <lzma_mode_is_supported@@XZ_5.0+0x368>
   1053c:	ldr	w8, [x20, #28]
   10540:	sub	w8, w8, w19
   10544:	str	w8, [x20, #28]
   10548:	ldp	x20, x19, [sp, #48]
   1054c:	ldp	x22, x21, [sp, #32]
   10550:	ldp	x24, x23, [sp, #16]
   10554:	ldp	x29, x30, [sp], #64
   10558:	ret
   1055c:	stp	x29, x30, [sp, #-32]!
   10560:	stp	x20, x19, [sp, #16]
   10564:	ldr	w8, [x0, #2960]
   10568:	ldr	w9, [x0, #736]
   1056c:	mov	w2, #0x1                   	// #1
   10570:	mov	x29, sp
   10574:	and	w20, w8, w1
   10578:	add	x8, x0, x9, lsl #5
   1057c:	add	x8, x8, w20, uxtw #1
   10580:	mov	w9, #0x6b9c                	// #27548
   10584:	add	x1, x8, x9
   10588:	mov	x19, x0
   1058c:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10590:	ldr	w8, [x19, #736]
   10594:	mov	w9, #0x6d1c                	// #27932
   10598:	mov	x0, x19
   1059c:	mov	w2, wzr
   105a0:	add	x8, x19, x8, lsl #1
   105a4:	add	x1, x8, x9
   105a8:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   105ac:	mov	w2, #0xffffffff            	// #-1
   105b0:	mov	w3, #0x2                   	// #2
   105b4:	mov	x0, x19
   105b8:	mov	w1, w20
   105bc:	bl	10f34 <lzma_mode_is_supported@@XZ_5.0+0x368>
   105c0:	ldp	x20, x19, [sp, #16]
   105c4:	ldp	x29, x30, [sp], #32
   105c8:	ret
   105cc:	mov	w8, #0x5                   	// #5
   105d0:	mov	w9, #0x4                   	// #4
   105d4:	ldr	x10, [x0, #24]
   105d8:	subs	x8, x8, #0x1
   105dc:	add	x11, x10, #0x1
   105e0:	add	x10, x0, x10, lsl #2
   105e4:	str	x11, [x0, #24]
   105e8:	str	w9, [x10, #40]
   105ec:	b.ne	105d4 <lzma_lzma_preset@@XZ_5.0+0x658>  // b.any
   105f0:	ret
   105f4:	stp	x29, x30, [sp, #-48]!
   105f8:	stp	x20, x19, [sp, #32]
   105fc:	mov	x19, x0
   10600:	mov	x0, x1
   10604:	stp	x22, x21, [sp, #16]
   10608:	mov	x29, sp
   1060c:	mov	x20, x1
   10610:	bl	107ac <lzma_lzma_preset@@XZ_5.0+0x830>
   10614:	tbz	w0, #0, 10798 <lzma_lzma_preset@@XZ_5.0+0x81c>
   10618:	ldr	w8, [x20, #28]
   1061c:	mov	w9, #0xffffffff            	// #-1
   10620:	mov	w10, #0xe94                 	// #3732
   10624:	movk	w10, #0x1, lsl #16
   10628:	lsl	w8, w9, w8
   1062c:	mvn	w8, w8
   10630:	str	w8, [x19, #2960]
   10634:	ldr	w8, [x20, #20]
   10638:	mov	x0, x19
   1063c:	add	x21, x19, x10
   10640:	str	w8, [x19, #2964]
   10644:	ldr	w8, [x20, #24]
   10648:	lsl	w8, w9, w8
   1064c:	mvn	w8, w8
   10650:	str	w8, [x19, #2968]
   10654:	bl	107f8 <lzma_lzma_preset@@XZ_5.0+0x87c>
   10658:	movi	v0.2d, #0x0
   1065c:	str	wzr, [x19, #752]
   10660:	str	q0, [x19, #736]
   10664:	ldp	w1, w2, [x20, #20]
   10668:	add	x0, x19, #0xb9c
   1066c:	bl	10814 <lzma_lzma_preset@@XZ_5.0+0x898>
   10670:	ldr	w14, [x19, #2960]
   10674:	mov	w13, #0x6b9c                	// #27548
   10678:	mov	x8, xzr
   1067c:	mov	w9, #0x400                 	// #1024
   10680:	mov	w10, #0x6d1c                	// #27932
   10684:	mov	w11, #0x6d34                	// #27956
   10688:	mov	w12, #0x6d4c                	// #27980
   1068c:	add	x13, x19, x13
   10690:	add	x14, x14, #0x1
   10694:	mov	w15, #0x6d64                	// #28004
   10698:	mov	x16, x13
   1069c:	mov	x17, x14
   106a0:	strh	w9, [x16]
   106a4:	strh	w9, [x16, #480]
   106a8:	subs	x17, x17, #0x1
   106ac:	add	x16, x16, #0x2
   106b0:	b.ne	106a0 <lzma_lzma_preset@@XZ_5.0+0x724>  // b.any
   106b4:	add	x16, x19, x8, lsl #1
   106b8:	add	x8, x8, #0x1
   106bc:	cmp	x8, #0xc
   106c0:	add	x13, x13, #0x20
   106c4:	strh	w9, [x16, x10]
   106c8:	strh	w9, [x16, x11]
   106cc:	strh	w9, [x16, x12]
   106d0:	strh	w9, [x16, x15]
   106d4:	b.ne	10698 <lzma_lzma_preset@@XZ_5.0+0x71c>  // b.any
   106d8:	mov	w9, #0x70fc                	// #28924
   106dc:	mov	x8, xzr
   106e0:	add	x9, x19, x9
   106e4:	mov	w10, #0x400                 	// #1024
   106e8:	strh	w10, [x9, x8]
   106ec:	add	x8, x8, #0x2
   106f0:	cmp	x8, #0xe4
   106f4:	b.ne	106e8 <lzma_lzma_preset@@XZ_5.0+0x76c>  // b.any
   106f8:	mov	w9, #0x6efc                	// #28412
   106fc:	mov	x8, xzr
   10700:	add	x9, x19, x9
   10704:	mov	w10, #0x400                 	// #1024
   10708:	mov	x11, xzr
   1070c:	strh	w10, [x9, x11]
   10710:	add	x11, x11, #0x2
   10714:	cmp	x11, #0x80
   10718:	b.ne	1070c <lzma_lzma_preset@@XZ_5.0+0x790>  // b.any
   1071c:	add	x8, x8, #0x1
   10720:	cmp	x8, #0x4
   10724:	add	x9, x9, #0x80
   10728:	b.ne	10708 <lzma_lzma_preset@@XZ_5.0+0x78c>  // b.any
   1072c:	mov	w9, #0x71e0                	// #29152
   10730:	mov	x8, xzr
   10734:	add	x9, x19, x9
   10738:	mov	w10, #0x400                 	// #1024
   1073c:	strh	w10, [x9, x8]
   10740:	add	x8, x8, #0x2
   10744:	cmp	x8, #0x20
   10748:	b.ne	1073c <lzma_lzma_preset@@XZ_5.0+0x7c0>  // b.any
   1074c:	ldr	w9, [x20, #28]
   10750:	ldrb	w2, [x19, #2956]
   10754:	mov	w8, #0x7200                	// #29184
   10758:	mov	w22, #0x1                   	// #1
   1075c:	add	x0, x19, x8
   10760:	lsl	w1, w22, w9
   10764:	bl	1084c <lzma_lzma_preset@@XZ_5.0+0x8d0>
   10768:	ldr	w8, [x20, #28]
   1076c:	ldrb	w2, [x19, #2956]
   10770:	mov	w9, #0xba48                	// #47688
   10774:	add	x0, x19, x9
   10778:	lsl	w1, w22, w8
   1077c:	bl	1084c <lzma_lzma_preset@@XZ_5.0+0x8d0>
   10780:	mov	w0, wzr
   10784:	mov	w8, #0x7fffffff            	// #2147483647
   10788:	str	w8, [x21]
   1078c:	stur	x8, [x21, #68]
   10790:	str	wzr, [x21, #76]
   10794:	b	1079c <lzma_lzma_preset@@XZ_5.0+0x820>
   10798:	mov	w0, #0x8                   	// #8
   1079c:	ldp	x20, x19, [sp, #32]
   107a0:	ldp	x22, x21, [sp, #16]
   107a4:	ldp	x29, x30, [sp], #48
   107a8:	ret
   107ac:	stp	x29, x30, [sp, #-32]!
   107b0:	str	x19, [sp, #16]
   107b4:	mov	x29, sp
   107b8:	mov	x19, x0
   107bc:	bl	10b40 <lzma_lzma_preset@@XZ_5.0+0xbc4>
   107c0:	tbz	w0, #0, 107e8 <lzma_lzma_preset@@XZ_5.0+0x86c>
   107c4:	ldr	w8, [x19, #36]
   107c8:	sub	w8, w8, #0x2
   107cc:	cmp	w8, #0x10f
   107d0:	b.hi	107e8 <lzma_lzma_preset@@XZ_5.0+0x86c>  // b.pmore
   107d4:	ldr	w8, [x19, #32]
   107d8:	sub	w8, w8, #0x1
   107dc:	cmp	w8, #0x2
   107e0:	cset	w0, cc  // cc = lo, ul, last
   107e4:	b	107ec <lzma_lzma_preset@@XZ_5.0+0x870>
   107e8:	mov	w0, wzr
   107ec:	ldr	x19, [sp, #16]
   107f0:	ldp	x29, x30, [sp], #32
   107f4:	ret
   107f8:	mov	w8, #0x1                   	// #1
   107fc:	mov	w9, #0xffffffff            	// #-1
   10800:	strb	wzr, [x0, #20]
   10804:	stp	xzr, x8, [x0]
   10808:	str	w9, [x0, #16]
   1080c:	stp	xzr, xzr, [x0, #24]
   10810:	ret
   10814:	mov	w8, wzr
   10818:	add	w9, w2, w1
   1081c:	mov	w10, #0x600                 	// #1536
   10820:	mov	w11, #0x400                 	// #1024
   10824:	mov	x12, xzr
   10828:	umaddl	x13, w8, w10, x0
   1082c:	strh	w11, [x13, x12]
   10830:	add	x12, x12, #0x2
   10834:	cmp	x12, #0x600
   10838:	b.ne	1082c <lzma_lzma_preset@@XZ_5.0+0x8b0>  // b.any
   1083c:	add	w8, w8, #0x1
   10840:	lsr	w12, w8, w9
   10844:	cbz	w12, 10824 <lzma_lzma_preset@@XZ_5.0+0x8a8>
   10848:	ret
   1084c:	stp	x29, x30, [sp, #-48]!
   10850:	stp	x20, x19, [sp, #32]
   10854:	mov	w19, w1
   10858:	mov	x20, x0
   1085c:	mov	w8, #0x4000400             	// #67109888
   10860:	str	x21, [sp, #16]
   10864:	mov	x29, sp
   10868:	str	w8, [x0]
   1086c:	cbz	w1, 108c0 <lzma_lzma_preset@@XZ_5.0+0x944>
   10870:	mov	x8, xzr
   10874:	mov	w9, w19
   10878:	add	x10, x20, #0x4
   1087c:	add	x11, x20, #0x104
   10880:	mov	w12, #0x400                 	// #1024
   10884:	mov	x13, xzr
   10888:	strh	w12, [x10, x13]
   1088c:	add	x13, x13, #0x2
   10890:	cmp	x13, #0x10
   10894:	b.ne	10888 <lzma_lzma_preset@@XZ_5.0+0x90c>  // b.any
   10898:	mov	x13, xzr
   1089c:	strh	w12, [x11, x13]
   108a0:	add	x13, x13, #0x2
   108a4:	cmp	x13, #0x10
   108a8:	b.ne	1089c <lzma_lzma_preset@@XZ_5.0+0x920>  // b.any
   108ac:	add	x8, x8, #0x1
   108b0:	add	x10, x10, #0x10
   108b4:	cmp	x8, x9
   108b8:	add	x11, x11, #0x10
   108bc:	b.ne	10884 <lzma_lzma_preset@@XZ_5.0+0x908>  // b.any
   108c0:	mov	w8, #0x204                 	// #516
   108c4:	mov	w9, #0x400                 	// #1024
   108c8:	strh	w9, [x20, x8]
   108cc:	add	x8, x8, #0x2
   108d0:	cmp	x8, #0x404
   108d4:	b.ne	108c8 <lzma_lzma_preset@@XZ_5.0+0x94c>  // b.any
   108d8:	cbz	w19, 108fc <lzma_lzma_preset@@XZ_5.0+0x980>
   108dc:	tbnz	w2, #0, 108fc <lzma_lzma_preset@@XZ_5.0+0x980>
   108e0:	mov	w21, wzr
   108e4:	mov	x0, x20
   108e8:	mov	w1, w21
   108ec:	bl	111e0 <lzma_mode_is_supported@@XZ_5.0+0x614>
   108f0:	add	w21, w21, #0x1
   108f4:	cmp	w19, w21
   108f8:	b.ne	108e4 <lzma_lzma_preset@@XZ_5.0+0x968>  // b.any
   108fc:	ldp	x20, x19, [sp, #32]
   10900:	ldr	x21, [sp, #16]
   10904:	ldp	x29, x30, [sp], #48
   10908:	ret
   1090c:	stp	x29, x30, [sp, #-48]!
   10910:	stp	x20, x19, [sp, #32]
   10914:	ldr	x8, [x0]
   10918:	str	x21, [sp, #16]
   1091c:	mov	x20, x3
   10920:	mov	x19, x2
   10924:	mov	x21, x0
   10928:	mov	x29, sp
   1092c:	cbnz	x8, 10944 <lzma_lzma_preset@@XZ_5.0+0x9c8>
   10930:	mov	w0, #0xcee8                	// #52968
   10934:	movk	w0, #0x3, lsl #16
   10938:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   1093c:	str	x0, [x21]
   10940:	cbz	x0, 109fc <lzma_lzma_preset@@XZ_5.0+0xa80>
   10944:	ldr	w8, [x19, #32]
   10948:	ldr	x21, [x21]
   1094c:	cmp	w8, #0x2
   10950:	b.eq	1096c <lzma_lzma_preset@@XZ_5.0+0x9f0>  // b.none
   10954:	cmp	w8, #0x1
   10958:	b.ne	109f4 <lzma_lzma_preset@@XZ_5.0+0xa78>  // b.any
   1095c:	strb	w8, [x21, #2956]
   10960:	ldr	x8, [x19, #8]
   10964:	cbnz	x8, 109c4 <lzma_lzma_preset@@XZ_5.0+0xa48>
   10968:	b	109d0 <lzma_lzma_preset@@XZ_5.0+0xa54>
   1096c:	strb	wzr, [x21, #2956]
   10970:	ldr	w11, [x19]
   10974:	mov	w9, #0x24c                 	// #588
   10978:	movk	w9, #0x1, lsl #16
   1097c:	mov	w10, #0xba04                	// #47620
   10980:	mov	w8, wzr
   10984:	add	x9, x21, x9
   10988:	add	x10, x21, x10
   1098c:	mov	w12, #0xfffffffe            	// #-2
   10990:	mov	w13, #0x1                   	// #1
   10994:	lsl	w14, w13, w8
   10998:	add	w8, w8, #0x1
   1099c:	cmp	w14, w11
   109a0:	add	w12, w12, #0x2
   109a4:	b.cc	10994 <lzma_lzma_preset@@XZ_5.0+0xa18>  // b.lo, b.ul, b.last
   109a8:	str	w12, [x9, #3140]
   109ac:	ldr	w8, [x19, #36]
   109b0:	sub	w8, w8, #0x1
   109b4:	str	w8, [x10]
   109b8:	str	w8, [x9]
   109bc:	ldr	x8, [x19, #8]
   109c0:	cbz	x8, 109d0 <lzma_lzma_preset@@XZ_5.0+0xa54>
   109c4:	ldr	w8, [x19, #16]
   109c8:	cmp	w8, #0x0
   109cc:	cset	w8, ne  // ne = any
   109d0:	mov	x0, x20
   109d4:	mov	x1, x19
   109d8:	strb	w8, [x21, #2957]
   109dc:	strb	wzr, [x21, #2958]
   109e0:	bl	10a10 <lzma_lzma_preset@@XZ_5.0+0xa94>
   109e4:	mov	x0, x21
   109e8:	mov	x1, x19
   109ec:	bl	105f4 <lzma_lzma_preset@@XZ_5.0+0x678>
   109f0:	b	10a00 <lzma_lzma_preset@@XZ_5.0+0xa84>
   109f4:	mov	w0, #0x8                   	// #8
   109f8:	b	10a00 <lzma_lzma_preset@@XZ_5.0+0xa84>
   109fc:	mov	w0, #0x5                   	// #5
   10a00:	ldp	x20, x19, [sp, #32]
   10a04:	ldr	x21, [sp, #16]
   10a08:	ldp	x29, x30, [sp], #48
   10a0c:	ret
   10a10:	mov	w8, #0x1000                	// #4096
   10a14:	str	x8, [x0]
   10a18:	ldr	w8, [x1]
   10a1c:	mov	w9, #0x1001                	// #4097
   10a20:	stp	x8, x9, [x0, #8]
   10a24:	mov	w8, #0x111                 	// #273
   10a28:	str	x8, [x0, #24]
   10a2c:	ldr	w8, [x1, #36]
   10a30:	str	x8, [x0, #32]
   10a34:	ldr	w8, [x1, #40]
   10a38:	str	w8, [x0, #40]
   10a3c:	ldr	w8, [x1, #44]
   10a40:	str	w8, [x0, #44]
   10a44:	ldr	x8, [x1, #8]
   10a48:	str	x8, [x0, #48]
   10a4c:	ldr	w8, [x1, #16]
   10a50:	str	w8, [x0, #56]
   10a54:	ret
   10a58:	stp	x29, x30, [sp, #-16]!
   10a5c:	adrp	x3, 10000 <lzma_lzma_preset@@XZ_5.0+0x84>
   10a60:	add	x3, x3, #0xa74
   10a64:	mov	x29, sp
   10a68:	bl	e31c <lzma_crc64@@XZ_5.0+0x1f94>
   10a6c:	ldp	x29, x30, [sp], #16
   10a70:	ret
   10a74:	stp	x29, x30, [sp, #-16]!
   10a78:	adrp	x8, 11000 <lzma_mode_is_supported@@XZ_5.0+0x434>
   10a7c:	add	x8, x8, #0x504
   10a80:	mov	x29, sp
   10a84:	str	x8, [x0, #8]
   10a88:	bl	1090c <lzma_lzma_preset@@XZ_5.0+0x990>
   10a8c:	ldp	x29, x30, [sp], #16
   10a90:	ret
   10a94:	sub	sp, sp, #0x60
   10a98:	stp	x29, x30, [sp, #64]
   10a9c:	str	x19, [sp, #80]
   10aa0:	add	x29, sp, #0x40
   10aa4:	mov	x19, x0
   10aa8:	bl	107ac <lzma_lzma_preset@@XZ_5.0+0x830>
   10aac:	tbz	w0, #0, 10adc <lzma_lzma_preset@@XZ_5.0+0xb60>
   10ab0:	mov	x0, sp
   10ab4:	mov	x1, x19
   10ab8:	bl	10a10 <lzma_lzma_preset@@XZ_5.0+0xa94>
   10abc:	mov	x0, sp
   10ac0:	bl	e060 <lzma_crc64@@XZ_5.0+0x1cd8>
   10ac4:	mov	w8, #0xcee8                	// #52968
   10ac8:	movk	w8, #0x3, lsl #16
   10acc:	add	x8, x0, x8
   10ad0:	cmn	x0, #0x1
   10ad4:	csinv	x0, x8, xzr, ne  // ne = any
   10ad8:	b	10ae0 <lzma_lzma_preset@@XZ_5.0+0xb64>
   10adc:	mov	x0, #0xffffffffffffffff    	// #-1
   10ae0:	ldr	x19, [sp, #80]
   10ae4:	ldp	x29, x30, [sp, #64]
   10ae8:	add	sp, sp, #0x60
   10aec:	ret
   10af0:	stp	x29, x30, [sp, #-32]!
   10af4:	stp	x20, x19, [sp, #16]
   10af8:	mov	x29, sp
   10afc:	mov	x19, x1
   10b00:	mov	x20, x0
   10b04:	bl	10b40 <lzma_lzma_preset@@XZ_5.0+0xbc4>
   10b08:	tbz	w0, #0, 10b30 <lzma_lzma_preset@@XZ_5.0+0xbb4>
   10b0c:	ldp	w9, w8, [x20, #24]
   10b10:	ldr	w10, [x20, #20]
   10b14:	mov	w0, wzr
   10b18:	add	w8, w8, w8, lsl #2
   10b1c:	add	w8, w8, w9
   10b20:	add	w8, w8, w8, lsl #3
   10b24:	add	w8, w8, w10
   10b28:	strb	w8, [x19]
   10b2c:	b	10b34 <lzma_lzma_preset@@XZ_5.0+0xbb8>
   10b30:	mov	w0, #0x1                   	// #1
   10b34:	ldp	x20, x19, [sp, #16]
   10b38:	ldp	x29, x30, [sp], #32
   10b3c:	ret
   10b40:	ldr	w9, [x0, #20]
   10b44:	cmp	w9, #0x4
   10b48:	b.hi	10b7c <lzma_lzma_preset@@XZ_5.0+0xc00>  // b.pmore
   10b4c:	ldr	w10, [x0, #24]
   10b50:	mov	x8, x0
   10b54:	mov	w0, wzr
   10b58:	cmp	w10, #0x4
   10b5c:	b.hi	10b78 <lzma_lzma_preset@@XZ_5.0+0xbfc>  // b.pmore
   10b60:	add	w9, w10, w9
   10b64:	cmp	w9, #0x4
   10b68:	b.hi	10b78 <lzma_lzma_preset@@XZ_5.0+0xbfc>  // b.pmore
   10b6c:	ldr	w8, [x8, #28]
   10b70:	cmp	w8, #0x5
   10b74:	cset	w0, cc  // cc = lo, ul, last
   10b78:	ret
   10b7c:	mov	w0, wzr
   10b80:	ret
   10b84:	stp	x29, x30, [sp, #-32]!
   10b88:	stp	x20, x19, [sp, #16]
   10b8c:	mov	x29, sp
   10b90:	mov	x19, x1
   10b94:	mov	x20, x0
   10b98:	bl	10af0 <lzma_lzma_preset@@XZ_5.0+0xb74>
   10b9c:	tbz	w0, #0, 10ba8 <lzma_lzma_preset@@XZ_5.0+0xc2c>
   10ba0:	mov	w0, #0xb                   	// #11
   10ba4:	b	10bb8 <lzma_lzma_preset@@XZ_5.0+0xc3c>
   10ba8:	ldr	w1, [x20]
   10bac:	add	x0, x19, #0x1
   10bb0:	bl	10bc4 <lzma_lzma_preset@@XZ_5.0+0xc48>
   10bb4:	mov	w0, wzr
   10bb8:	ldp	x20, x19, [sp, #16]
   10bbc:	ldp	x29, x30, [sp], #32
   10bc0:	ret
   10bc4:	str	w1, [x0]
   10bc8:	ret

0000000000010bcc <lzma_mode_is_supported@@XZ_5.0>:
   10bcc:	sub	w8, w0, #0x1
   10bd0:	cmp	w8, #0x2
   10bd4:	cset	w0, cc  // cc = lo, ul, last
   10bd8:	ret
   10bdc:	stp	x29, x30, [sp, #-32]!
   10be0:	ldr	x8, [x0, #56]
   10be4:	mov	w1, #0x1                   	// #1
   10be8:	str	x19, [sp, #16]
   10bec:	mov	x29, sp
   10bf0:	mov	x19, x0
   10bf4:	blr	x8
   10bf8:	ldr	w8, [x19, #28]
   10bfc:	add	w8, w8, #0x1
   10c00:	str	w8, [x19, #28]
   10c04:	ldr	x19, [sp, #16]
   10c08:	ldp	x29, x30, [sp], #32
   10c0c:	ret
   10c10:	ldr	x8, [x0, #24]
   10c14:	add	x8, x0, x8, lsl #2
   10c18:	str	w2, [x8, #40]
   10c1c:	ldr	x8, [x0, #24]
   10c20:	add	x9, x0, x8, lsl #3
   10c24:	add	x8, x8, #0x1
   10c28:	str	x1, [x9, #272]
   10c2c:	str	x8, [x0, #24]
   10c30:	ret
   10c34:	stp	x29, x30, [sp, #-64]!
   10c38:	stp	x24, x23, [sp, #16]
   10c3c:	stp	x22, x21, [sp, #32]
   10c40:	stp	x20, x19, [sp, #48]
   10c44:	mov	w19, w3
   10c48:	mov	x20, x1
   10c4c:	mov	x21, x0
   10c50:	sub	w22, w2, #0x1
   10c54:	mov	w23, #0x1                   	// #1
   10c58:	mov	x29, sp
   10c5c:	lsr	w24, w19, w22
   10c60:	and	w2, w24, #0x1
   10c64:	add	x1, x20, w23, uxtw #1
   10c68:	mov	x0, x21
   10c6c:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10c70:	bfi	w24, w23, #1, #31
   10c74:	sub	w22, w22, #0x1
   10c78:	cmn	w22, #0x1
   10c7c:	mov	w23, w24
   10c80:	b.ne	10c5c <lzma_mode_is_supported@@XZ_5.0+0x90>  // b.any
   10c84:	ldp	x20, x19, [sp, #48]
   10c88:	ldp	x22, x21, [sp, #32]
   10c8c:	ldp	x24, x23, [sp, #16]
   10c90:	ldp	x29, x30, [sp], #64
   10c94:	ret
   10c98:	ldr	x8, [x0]
   10c9c:	lsr	x9, x8, #32
   10ca0:	cbnz	x9, 10cb0 <lzma_mode_is_supported@@XZ_5.0+0xe4>
   10ca4:	lsr	w8, w8, #24
   10ca8:	cmp	w8, #0xfe
   10cac:	b.hi	10cfc <lzma_mode_is_supported@@XZ_5.0+0x130>  // b.pmore
   10cb0:	mov	w8, #0xff                  	// #255
   10cb4:	ldr	x9, [x2]
   10cb8:	cmp	x9, x3
   10cbc:	b.eq	10d18 <lzma_mode_is_supported@@XZ_5.0+0x14c>  // b.none
   10cc0:	ldrb	w10, [x0, #20]
   10cc4:	ldrb	w11, [x0, #4]
   10cc8:	add	w10, w10, w11
   10ccc:	strb	w10, [x1, x9]
   10cd0:	ldr	x9, [x2]
   10cd4:	add	x9, x9, #0x1
   10cd8:	str	x9, [x2]
   10cdc:	ldr	x9, [x0, #8]
   10ce0:	strb	w8, [x0, #20]
   10ce4:	subs	x9, x9, #0x1
   10ce8:	str	x9, [x0, #8]
   10cec:	b.ne	10cb4 <lzma_mode_is_supported@@XZ_5.0+0xe8>  // b.any
   10cf0:	ldr	x8, [x0]
   10cf4:	lsr	x8, x8, #24
   10cf8:	strb	w8, [x0, #20]
   10cfc:	ldr	x9, [x0, #8]
   10d00:	ldr	w10, [x0]
   10d04:	add	x9, x9, #0x1
   10d08:	lsl	w10, w10, #8
   10d0c:	stp	x10, x9, [x0]
   10d10:	mov	w0, wzr
   10d14:	ret
   10d18:	mov	w0, #0x1                   	// #1
   10d1c:	ret
   10d20:	stp	x29, x30, [sp, #-32]!
   10d24:	str	x19, [sp, #16]
   10d28:	ldp	w9, w10, [x1, #24]
   10d2c:	ldr	x8, [x1]
   10d30:	ldr	w11, [x0, #2968]
   10d34:	ldr	w12, [x0, #2964]
   10d38:	sub	w9, w9, w10
   10d3c:	sub	w14, w9, #0x1
   10d40:	ldrb	w14, [x8, w14, uxtw]
   10d44:	mov	w13, #0x8                   	// #8
   10d48:	and	w11, w11, w2
   10d4c:	sub	w13, w13, w12
   10d50:	lsl	w11, w11, w12
   10d54:	ldr	w12, [x0, #736]
   10d58:	lsr	w13, w14, w13
   10d5c:	ldrb	w3, [x8, w9, uxtw]
   10d60:	mov	w10, #0x600                 	// #1536
   10d64:	add	w11, w13, w11
   10d68:	umaddl	x10, w11, w10, x0
   10d6c:	mov	x19, x0
   10d70:	cmp	w12, #0x6
   10d74:	add	x1, x10, #0xb9c
   10d78:	mov	x29, sp
   10d7c:	b.hi	10d90 <lzma_mode_is_supported@@XZ_5.0+0x1c4>  // b.pmore
   10d80:	mov	w2, #0x8                   	// #8
   10d84:	mov	x0, x19
   10d88:	bl	10c34 <lzma_mode_is_supported@@XZ_5.0+0x68>
   10d8c:	b	10da8 <lzma_mode_is_supported@@XZ_5.0+0x1dc>
   10d90:	ldr	w10, [x19, #740]
   10d94:	mov	x0, x19
   10d98:	mvn	w10, w10
   10d9c:	add	w9, w9, w10
   10da0:	ldrb	w2, [x8, w9, uxtw]
   10da4:	bl	11078 <lzma_mode_is_supported@@XZ_5.0+0x4ac>
   10da8:	ldr	w8, [x19, #736]
   10dac:	mov	w9, #0xfffffffa            	// #-6
   10db0:	mov	w10, #0xfffffffd            	// #-3
   10db4:	cmp	w8, #0xa
   10db8:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   10dbc:	add	w9, w9, w8
   10dc0:	cmp	w8, #0x4
   10dc4:	csel	w8, wzr, w9, cc  // cc = lo, ul, last
   10dc8:	str	w8, [x19, #736]
   10dcc:	ldr	x19, [sp, #16]
   10dd0:	ldp	x29, x30, [sp], #32
   10dd4:	ret
   10dd8:	stp	x29, x30, [sp, #-64]!
   10ddc:	stp	x22, x21, [sp, #32]
   10de0:	stp	x20, x19, [sp, #48]
   10de4:	mov	w20, w3
   10de8:	mov	w21, w1
   10dec:	mov	x19, x0
   10df0:	str	x23, [sp, #16]
   10df4:	mov	x29, sp
   10df8:	cbz	w2, 10e4c <lzma_mode_is_supported@@XZ_5.0+0x280>
   10dfc:	ldr	w8, [x19, #736]
   10e00:	add	x9, x19, w2, uxtw #2
   10e04:	ldr	w23, [x9, #740]
   10e08:	mov	w9, #0x6d34                	// #27956
   10e0c:	add	x8, x19, x8, lsl #1
   10e10:	mov	w22, w2
   10e14:	add	x1, x8, x9
   10e18:	mov	w2, #0x1                   	// #1
   10e1c:	mov	x0, x19
   10e20:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10e24:	ldr	w8, [x19, #736]
   10e28:	mov	w9, #0x6d4c                	// #27980
   10e2c:	cmp	w22, #0x1
   10e30:	add	x8, x19, x8, lsl #1
   10e34:	add	x1, x8, x9
   10e38:	b.ne	10eb4 <lzma_mode_is_supported@@XZ_5.0+0x2e8>  // b.any
   10e3c:	mov	x0, x19
   10e40:	mov	w2, wzr
   10e44:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10e48:	b	10ef4 <lzma_mode_is_supported@@XZ_5.0+0x328>
   10e4c:	ldr	w8, [x19, #736]
   10e50:	mov	w9, #0x6d34                	// #27956
   10e54:	mov	x0, x19
   10e58:	add	x8, x19, x8, lsl #1
   10e5c:	add	x1, x8, x9
   10e60:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10e64:	ldr	w8, [x19, #736]
   10e68:	mov	w9, #0x6d7c                	// #28028
   10e6c:	cmp	w20, #0x1
   10e70:	cset	w2, ne  // ne = any
   10e74:	add	x8, x19, x8, lsl #5
   10e78:	add	x8, x8, w21, uxtw #1
   10e7c:	add	x1, x8, x9
   10e80:	mov	x0, x19
   10e84:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10e88:	cmp	w20, #0x1
   10e8c:	b.eq	10f08 <lzma_mode_is_supported@@XZ_5.0+0x33c>  // b.none
   10e90:	ldrb	w4, [x19, #2956]
   10e94:	mov	w8, #0xba48                	// #47688
   10e98:	add	x1, x19, x8
   10e9c:	mov	x0, x19
   10ea0:	mov	w2, w21
   10ea4:	mov	w3, w20
   10ea8:	bl	110e8 <lzma_mode_is_supported@@XZ_5.0+0x51c>
   10eac:	mov	w8, #0x8                   	// #8
   10eb0:	b	10f0c <lzma_mode_is_supported@@XZ_5.0+0x340>
   10eb4:	mov	w2, #0x1                   	// #1
   10eb8:	mov	x0, x19
   10ebc:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10ec0:	ldr	w8, [x19, #736]
   10ec4:	mov	w9, #0x6d64                	// #28004
   10ec8:	sub	w2, w22, #0x2
   10ecc:	mov	x0, x19
   10ed0:	add	x8, x19, x8, lsl #1
   10ed4:	add	x1, x8, x9
   10ed8:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   10edc:	cmp	w22, #0x3
   10ee0:	b.ne	10eec <lzma_mode_is_supported@@XZ_5.0+0x320>  // b.any
   10ee4:	ldr	w8, [x19, #748]
   10ee8:	str	w8, [x19, #752]
   10eec:	ldr	w8, [x19, #744]
   10ef0:	str	w8, [x19, #748]
   10ef4:	ldr	w8, [x19, #740]
   10ef8:	str	w23, [x19, #740]
   10efc:	str	w8, [x19, #744]
   10f00:	cmp	w20, #0x1
   10f04:	b.ne	10e90 <lzma_mode_is_supported@@XZ_5.0+0x2c4>  // b.any
   10f08:	mov	w8, #0x9                   	// #9
   10f0c:	ldr	w9, [x19, #736]
   10f10:	ldr	x23, [sp, #16]
   10f14:	cmp	w9, #0x7
   10f18:	mov	w9, #0xb                   	// #11
   10f1c:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   10f20:	str	w8, [x19, #736]
   10f24:	ldp	x20, x19, [sp, #48]
   10f28:	ldp	x22, x21, [sp, #32]
   10f2c:	ldp	x29, x30, [sp], #64
   10f30:	ret
   10f34:	stp	x29, x30, [sp, #-64]!
   10f38:	stp	x22, x21, [sp, #32]
   10f3c:	stp	x20, x19, [sp, #48]
   10f40:	ldr	w9, [x0, #736]
   10f44:	ldrb	w4, [x0, #2956]
   10f48:	mov	w8, #0xe94                 	// #3732
   10f4c:	movk	w8, #0x1, lsl #16
   10f50:	mov	w10, #0xa                   	// #10
   10f54:	mov	w11, #0x7                   	// #7
   10f58:	mov	w12, #0x7200                	// #29184
   10f5c:	cmp	w9, #0x7
   10f60:	str	x23, [sp, #16]
   10f64:	mov	w19, w2
   10f68:	mov	w2, w1
   10f6c:	add	x23, x0, x8
   10f70:	csel	w8, w11, w10, cc  // cc = lo, ul, last
   10f74:	add	x1, x0, x12
   10f78:	mov	x29, sp
   10f7c:	mov	w22, w3
   10f80:	mov	x20, x0
   10f84:	str	w8, [x0, #736]
   10f88:	bl	110e8 <lzma_mode_is_supported@@XZ_5.0+0x51c>
   10f8c:	mov	w0, w19
   10f90:	bl	11414 <lzma_mode_is_supported@@XZ_5.0+0x848>
   10f94:	sub	w8, w22, #0x2
   10f98:	cmp	w22, #0x6
   10f9c:	mov	w9, #0x3                   	// #3
   10fa0:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   10fa4:	mov	w21, w0
   10fa8:	add	x8, x20, x8, lsl #7
   10fac:	mov	w9, #0x6efc                	// #28412
   10fb0:	add	x1, x8, x9
   10fb4:	mov	w2, #0x6                   	// #6
   10fb8:	mov	x0, x20
   10fbc:	mov	w3, w21
   10fc0:	bl	10c34 <lzma_mode_is_supported@@XZ_5.0+0x68>
   10fc4:	cmp	w21, #0x4
   10fc8:	b.cc	11040 <lzma_mode_is_supported@@XZ_5.0+0x474>  // b.lo, b.ul, b.last
   10fcc:	lsr	w8, w21, #1
   10fd0:	mov	w9, #0x2                   	// #2
   10fd4:	sub	w2, w8, #0x1
   10fd8:	bfxil	w9, w21, #0, #1
   10fdc:	lsl	w9, w9, w2
   10fe0:	cmp	w21, #0xd
   10fe4:	sub	w22, w19, w9
   10fe8:	b.hi	1100c <lzma_mode_is_supported@@XZ_5.0+0x440>  // b.pmore
   10fec:	add	x8, x20, w9, uxtw #1
   10ff0:	sub	x8, x8, w21, uxtw #1
   10ff4:	mov	w9, #0x70fa                	// #28922
   10ff8:	add	x1, x8, x9
   10ffc:	mov	x0, x20
   11000:	mov	w3, w22
   11004:	bl	1146c <lzma_mode_is_supported@@XZ_5.0+0x8a0>
   11008:	b	11040 <lzma_mode_is_supported@@XZ_5.0+0x474>
   1100c:	lsr	w1, w22, #4
   11010:	sub	w2, w8, #0x5
   11014:	mov	x0, x20
   11018:	bl	114d0 <lzma_mode_is_supported@@XZ_5.0+0x904>
   1101c:	mov	w8, #0x71e0                	// #29152
   11020:	add	x1, x20, x8
   11024:	and	w3, w22, #0xf
   11028:	mov	w2, #0x4                   	// #4
   1102c:	mov	x0, x20
   11030:	bl	1146c <lzma_mode_is_supported@@XZ_5.0+0x8a0>
   11034:	ldr	w8, [x23, #68]
   11038:	add	w8, w8, #0x1
   1103c:	str	w8, [x23, #68]
   11040:	add	x8, x20, #0x2e4
   11044:	ldr	w9, [x8, #8]
   11048:	str	w9, [x20, #752]
   1104c:	ldr	x8, [x8]
   11050:	str	w19, [x20, #740]
   11054:	str	x8, [x20, #744]
   11058:	ldr	w8, [x23]
   1105c:	add	w8, w8, #0x1
   11060:	str	w8, [x23]
   11064:	ldp	x20, x19, [sp, #48]
   11068:	ldp	x22, x21, [sp, #32]
   1106c:	ldr	x23, [sp, #16]
   11070:	ldp	x29, x30, [sp], #64
   11074:	ret
   11078:	stp	x29, x30, [sp, #-64]!
   1107c:	str	x23, [sp, #16]
   11080:	stp	x22, x21, [sp, #32]
   11084:	stp	x20, x19, [sp, #48]
   11088:	mov	w19, w2
   1108c:	mov	x20, x1
   11090:	mov	x21, x0
   11094:	add	w22, w3, #0x100
   11098:	mov	w23, #0x100                 	// #256
   1109c:	mov	x29, sp
   110a0:	lsl	w19, w19, #1
   110a4:	add	w8, w23, w22, lsr #8
   110a8:	and	w9, w19, w23
   110ac:	add	w8, w8, w9
   110b0:	ubfx	w2, w22, #7, #1
   110b4:	add	x1, x20, w8, uxtw #1
   110b8:	mov	x0, x21
   110bc:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   110c0:	lsl	w22, w22, #1
   110c4:	eor	w8, w22, w19
   110c8:	cmp	w22, #0x10, lsl #12
   110cc:	bic	w23, w23, w8
   110d0:	b.cc	110a0 <lzma_mode_is_supported@@XZ_5.0+0x4d4>  // b.lo, b.ul, b.last
   110d4:	ldp	x20, x19, [sp, #48]
   110d8:	ldp	x22, x21, [sp, #32]
   110dc:	ldr	x23, [sp, #16]
   110e0:	ldp	x29, x30, [sp], #64
   110e4:	ret
   110e8:	stp	x29, x30, [sp, #-64]!
   110ec:	stp	x24, x23, [sp, #16]
   110f0:	sub	w24, w3, #0x2
   110f4:	stp	x22, x21, [sp, #32]
   110f8:	stp	x20, x19, [sp, #48]
   110fc:	mov	w21, w4
   11100:	mov	w19, w2
   11104:	mov	x20, x1
   11108:	cmp	w24, #0x7
   1110c:	mov	x22, x0
   11110:	mov	x29, sp
   11114:	b.hi	11134 <lzma_mode_is_supported@@XZ_5.0+0x568>  // b.pmore
   11118:	mov	x0, x22
   1111c:	mov	x1, x20
   11120:	mov	w2, wzr
   11124:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   11128:	add	x8, x20, w19, uxtw #4
   1112c:	add	x1, x8, #0x4
   11130:	b	1116c <lzma_mode_is_supported@@XZ_5.0+0x5a0>
   11134:	mov	w2, #0x1                   	// #1
   11138:	mov	x0, x22
   1113c:	mov	x1, x20
   11140:	mov	w23, w3
   11144:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   11148:	sub	w24, w23, #0xa
   1114c:	cmp	w24, #0x7
   11150:	add	x1, x20, #0x2
   11154:	b.hi	11184 <lzma_mode_is_supported@@XZ_5.0+0x5b8>  // b.pmore
   11158:	mov	x0, x22
   1115c:	mov	w2, wzr
   11160:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   11164:	add	x8, x20, w19, uxtw #4
   11168:	add	x1, x8, #0x104
   1116c:	mov	w2, #0x3                   	// #3
   11170:	mov	x0, x22
   11174:	mov	w3, w24
   11178:	bl	10c34 <lzma_mode_is_supported@@XZ_5.0+0x68>
   1117c:	tbz	w21, #0, 111a8 <lzma_mode_is_supported@@XZ_5.0+0x5dc>
   11180:	b	111cc <lzma_mode_is_supported@@XZ_5.0+0x600>
   11184:	mov	w2, #0x1                   	// #1
   11188:	mov	x0, x22
   1118c:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   11190:	sub	w3, w23, #0x12
   11194:	add	x1, x20, #0x204
   11198:	mov	w2, #0x8                   	// #8
   1119c:	mov	x0, x22
   111a0:	bl	10c34 <lzma_mode_is_supported@@XZ_5.0+0x68>
   111a4:	tbnz	w21, #0, 111cc <lzma_mode_is_supported@@XZ_5.0+0x600>
   111a8:	add	x8, x20, w19, uxtw #2
   111ac:	mov	w9, #0x4808                	// #18440
   111b0:	ldr	w10, [x8, x9]
   111b4:	subs	w10, w10, #0x1
   111b8:	str	w10, [x8, x9]
   111bc:	b.ne	111cc <lzma_mode_is_supported@@XZ_5.0+0x600>  // b.any
   111c0:	mov	x0, x20
   111c4:	mov	w1, w19
   111c8:	bl	111e0 <lzma_mode_is_supported@@XZ_5.0+0x614>
   111cc:	ldp	x20, x19, [sp, #48]
   111d0:	ldp	x22, x21, [sp, #32]
   111d4:	ldp	x24, x23, [sp, #16]
   111d8:	ldp	x29, x30, [sp], #64
   111dc:	ret
   111e0:	stp	x29, x30, [sp, #-96]!
   111e4:	stp	x28, x27, [sp, #16]
   111e8:	stp	x26, x25, [sp, #32]
   111ec:	stp	x24, x23, [sp, #48]
   111f0:	stp	x22, x21, [sp, #64]
   111f4:	stp	x20, x19, [sp, #80]
   111f8:	mov	w8, #0x4804                	// #18436
   111fc:	ldr	w26, [x0, x8]
   11200:	add	x8, x0, w1, uxtw #2
   11204:	mov	w9, #0x4808                	// #18440
   11208:	mov	x19, x0
   1120c:	str	w26, [x8, x9]
   11210:	ldrh	w20, [x0]
   11214:	mov	x29, sp
   11218:	mov	w27, w1
   1121c:	mov	w0, w20
   11220:	bl	1136c <lzma_mode_is_supported@@XZ_5.0+0x7a0>
   11224:	mov	w23, w0
   11228:	mov	w0, w20
   1122c:	bl	11380 <lzma_mode_is_supported@@XZ_5.0+0x7b4>
   11230:	ldrh	w21, [x19, #2]
   11234:	mov	w20, w0
   11238:	mov	w0, w21
   1123c:	bl	1136c <lzma_mode_is_supported@@XZ_5.0+0x7a0>
   11240:	mov	w22, w0
   11244:	mov	w0, w21
   11248:	bl	11380 <lzma_mode_is_supported@@XZ_5.0+0x7b4>
   1124c:	mov	w21, w0
   11250:	cbz	w26, 112a0 <lzma_mode_is_supported@@XZ_5.0+0x6d4>
   11254:	add	x8, x19, x27, lsl #4
   11258:	mov	w9, #0x440                 	// #1088
   1125c:	add	x25, x8, #0x4
   11260:	madd	x8, x27, x9, x19
   11264:	mov	x24, xzr
   11268:	add	x28, x8, #0x404
   1126c:	mov	w1, #0x3                   	// #3
   11270:	mov	x0, x25
   11274:	mov	w2, w24
   11278:	bl	11398 <lzma_mode_is_supported@@XZ_5.0+0x7cc>
   1127c:	add	x8, x24, #0x1
   11280:	add	w9, w0, w23
   11284:	cmp	x8, x26
   11288:	str	w9, [x28, x24, lsl #2]
   1128c:	b.cs	112a4 <lzma_mode_is_supported@@XZ_5.0+0x6d8>  // b.hs, b.nlast
   11290:	cmp	x24, #0x7
   11294:	mov	x24, x8
   11298:	b.cc	1126c <lzma_mode_is_supported@@XZ_5.0+0x6a0>  // b.lo, b.ul, b.last
   1129c:	b	112a4 <lzma_mode_is_supported@@XZ_5.0+0x6d8>
   112a0:	mov	w8, wzr
   112a4:	cmp	w8, w26
   112a8:	b.cs	11300 <lzma_mode_is_supported@@XZ_5.0+0x734>  // b.hs, b.nlast
   112ac:	cmp	w8, #0xf
   112b0:	b.hi	11300 <lzma_mode_is_supported@@XZ_5.0+0x734>  // b.pmore
   112b4:	mov	w24, w8
   112b8:	mov	w8, #0x440                 	// #1088
   112bc:	add	x9, x19, x27, lsl #4
   112c0:	madd	x8, x27, x8, x19
   112c4:	add	w23, w22, w20
   112c8:	add	x22, x9, #0x104
   112cc:	add	x25, x8, #0x404
   112d0:	sub	w2, w24, #0x8
   112d4:	mov	w1, #0x3                   	// #3
   112d8:	mov	x0, x22
   112dc:	bl	11398 <lzma_mode_is_supported@@XZ_5.0+0x7cc>
   112e0:	add	x8, x24, #0x1
   112e4:	add	w9, w23, w0
   112e8:	cmp	x8, x26
   112ec:	str	w9, [x25, x24, lsl #2]
   112f0:	b.cs	11300 <lzma_mode_is_supported@@XZ_5.0+0x734>  // b.hs, b.nlast
   112f4:	cmp	x24, #0xf
   112f8:	mov	x24, x8
   112fc:	b.cc	112d0 <lzma_mode_is_supported@@XZ_5.0+0x704>  // b.lo, b.ul, b.last
   11300:	cmp	w8, w26
   11304:	b.cs	11350 <lzma_mode_is_supported@@XZ_5.0+0x784>  // b.hs, b.nlast
   11308:	mov	w9, #0x440                 	// #1088
   1130c:	mul	x9, x27, x9
   11310:	add	x9, x9, w8, uxtw #2
   11314:	add	x9, x9, x19
   11318:	add	w22, w21, w20
   1131c:	add	x20, x19, #0x204
   11320:	sub	w21, w8, #0x10
   11324:	add	x19, x9, #0x404
   11328:	sub	x23, x26, w8, uxtw
   1132c:	mov	w1, #0x8                   	// #8
   11330:	mov	x0, x20
   11334:	mov	w2, w21
   11338:	bl	11398 <lzma_mode_is_supported@@XZ_5.0+0x7cc>
   1133c:	add	w8, w22, w0
   11340:	subs	x23, x23, #0x1
   11344:	str	w8, [x19], #4
   11348:	add	w21, w21, #0x1
   1134c:	b.ne	1132c <lzma_mode_is_supported@@XZ_5.0+0x760>  // b.any
   11350:	ldp	x20, x19, [sp, #80]
   11354:	ldp	x22, x21, [sp, #64]
   11358:	ldp	x24, x23, [sp, #48]
   1135c:	ldp	x26, x25, [sp, #32]
   11360:	ldp	x28, x27, [sp, #16]
   11364:	ldp	x29, x30, [sp], #96
   11368:	ret
   1136c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11370:	ldr	x9, [x9, #3960]
   11374:	ubfx	x8, x0, #4, #12
   11378:	ldrb	w0, [x9, x8]
   1137c:	ret
   11380:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11384:	ldr	x9, [x9, #3960]
   11388:	ubfx	w8, w0, #4, #12
   1138c:	eor	x8, x8, #0x7f
   11390:	ldrb	w0, [x9, x8]
   11394:	ret
   11398:	stp	x29, x30, [sp, #-48]!
   1139c:	mov	w8, #0x1                   	// #1
   113a0:	lsl	w8, w8, w1
   113a4:	str	x21, [sp, #16]
   113a8:	stp	x20, x19, [sp, #32]
   113ac:	mov	x20, x0
   113b0:	mov	w19, wzr
   113b4:	add	w21, w8, w2
   113b8:	mov	x29, sp
   113bc:	and	w1, w21, #0x1
   113c0:	lsr	w21, w21, #1
   113c4:	lsl	w8, w21, #1
   113c8:	ldrh	w0, [x20, w8, uxtw]
   113cc:	bl	113f0 <lzma_mode_is_supported@@XZ_5.0+0x824>
   113d0:	cmp	w21, #0x1
   113d4:	add	w19, w0, w19
   113d8:	b.ne	113bc <lzma_mode_is_supported@@XZ_5.0+0x7f0>  // b.any
   113dc:	mov	w0, w19
   113e0:	ldp	x20, x19, [sp, #32]
   113e4:	ldr	x21, [sp, #16]
   113e8:	ldp	x29, x30, [sp], #48
   113ec:	ret
   113f0:	neg	w9, w1
   113f4:	and	w8, w0, #0xfff0
   113f8:	and	w9, w9, #0x7f0
   113fc:	eor	w8, w9, w8
   11400:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11404:	ldr	x9, [x9, #3960]
   11408:	lsr	x8, x8, #4
   1140c:	ldrb	w0, [x9, x8]
   11410:	ret
   11414:	lsr	w8, w0, #13
   11418:	cbnz	w8, 1142c <lzma_mode_is_supported@@XZ_5.0+0x860>
   1141c:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11420:	ldr	x8, [x8, #4008]
   11424:	ldrb	w0, [x8, w0, uxtw]
   11428:	ret
   1142c:	lsr	w8, w0, #25
   11430:	cbnz	w8, 11450 <lzma_mode_is_supported@@XZ_5.0+0x884>
   11434:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11438:	ldr	x9, [x9, #4008]
   1143c:	mov	w8, w0
   11440:	lsr	x8, x8, #12
   11444:	ldrb	w8, [x9, x8]
   11448:	add	w0, w8, #0x18
   1144c:	ret
   11450:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   11454:	ldr	x9, [x9, #4008]
   11458:	mov	w8, w0
   1145c:	lsr	x8, x8, #24
   11460:	ldrb	w8, [x9, x8]
   11464:	add	w0, w8, #0x30
   11468:	ret
   1146c:	stp	x29, x30, [sp, #-64]!
   11470:	stp	x24, x23, [sp, #16]
   11474:	stp	x22, x21, [sp, #32]
   11478:	stp	x20, x19, [sp, #48]
   1147c:	mov	w20, w3
   11480:	mov	w19, w2
   11484:	mov	x21, x1
   11488:	mov	x22, x0
   1148c:	mov	w23, #0x1                   	// #1
   11490:	mov	x29, sp
   11494:	and	w2, w20, #0x1
   11498:	add	x1, x21, w23, uxtw #1
   1149c:	mov	x0, x22
   114a0:	lsr	w24, w20, #1
   114a4:	bl	10c10 <lzma_mode_is_supported@@XZ_5.0+0x44>
   114a8:	bfi	w20, w23, #1, #31
   114ac:	subs	w19, w19, #0x1
   114b0:	mov	w23, w20
   114b4:	mov	w20, w24
   114b8:	b.ne	11494 <lzma_mode_is_supported@@XZ_5.0+0x8c8>  // b.any
   114bc:	ldp	x20, x19, [sp, #48]
   114c0:	ldp	x22, x21, [sp, #32]
   114c4:	ldp	x24, x23, [sp, #16]
   114c8:	ldp	x29, x30, [sp], #64
   114cc:	ret
   114d0:	sub	w8, w2, #0x1
   114d4:	ldr	x11, [x0, #24]
   114d8:	lsr	w9, w1, w8
   114dc:	mov	w10, #0x2                   	// #2
   114e0:	sub	w8, w8, #0x1
   114e4:	bfxil	w10, w9, #0, #1
   114e8:	cmn	w8, #0x1
   114ec:	add	x9, x11, #0x1
   114f0:	add	x11, x0, x11, lsl #2
   114f4:	str	x9, [x0, #24]
   114f8:	str	w10, [x11, #40]
   114fc:	b.ne	114d4 <lzma_mode_is_supported@@XZ_5.0+0x908>  // b.any
   11500:	ret
   11504:	stp	x29, x30, [sp, #-16]!
   11508:	ldr	w8, [x1, #104]
   1150c:	mov	x29, sp
   11510:	cmp	w8, #0x1
   11514:	b.eq	11528 <lzma_mode_is_supported@@XZ_5.0+0x95c>  // b.none
   11518:	mov	w5, #0xffffffff            	// #-1
   1151c:	bl	10084 <lzma_lzma_preset@@XZ_5.0+0x108>
   11520:	ldp	x29, x30, [sp], #16
   11524:	ret
   11528:	mov	w0, #0x8                   	// #8
   1152c:	ldp	x29, x30, [sp], #16
   11530:	ret
   11534:	sub	sp, sp, #0x80
   11538:	stp	x20, x19, [sp, #112]
   1153c:	ldr	w8, [x1, #28]
   11540:	ldr	w19, [x1, #96]
   11544:	stp	x24, x23, [sp, #80]
   11548:	stp	x22, x21, [sp, #96]
   1154c:	mov	x21, x1
   11550:	mov	x23, x0
   11554:	stp	x29, x30, [sp, #32]
   11558:	stp	x28, x27, [sp, #48]
   1155c:	stp	x26, x25, [sp, #64]
   11560:	add	x29, sp, #0x20
   11564:	stp	x2, x3, [sp, #8]
   11568:	cbz	w8, 1157c <lzma_mode_is_supported@@XZ_5.0+0x9b0>
   1156c:	ldr	w8, [x23, #2948]
   11570:	ldr	w20, [x23, #2952]
   11574:	stur	w8, [x29, #-4]
   11578:	b	11590 <lzma_mode_is_supported@@XZ_5.0+0x9c4>
   1157c:	add	x2, x23, #0x2f4
   11580:	sub	x1, x29, #0x4
   11584:	mov	x0, x21
   11588:	bl	e908 <lzma_mf_is_supported@@XZ_5.0+0x1d8>
   1158c:	mov	w20, w0
   11590:	mov	x0, x21
   11594:	bl	118d4 <lzma_mode_is_supported@@XZ_5.0+0xd08>
   11598:	mov	x24, x0
   1159c:	mov	x0, x21
   115a0:	bl	118e4 <lzma_mode_is_supported@@XZ_5.0+0xd18>
   115a4:	add	w8, w0, #0x1
   115a8:	cmp	w8, #0x111
   115ac:	mov	w8, #0x111                 	// #273
   115b0:	csinc	w25, w8, w0, cs  // cs = hs, nlast
   115b4:	cmp	w25, #0x2
   115b8:	b.cs	115d8 <lzma_mode_is_supported@@XZ_5.0+0xa0c>  // b.hs, b.nlast
   115bc:	ldr	x10, [sp, #8]
   115c0:	mov	w8, #0xffffffff            	// #-1
   115c4:	mov	w9, #0x1                   	// #1
   115c8:	str	w8, [x10]
   115cc:	ldr	x8, [sp, #16]
   115d0:	str	w9, [x8]
   115d4:	b	117d0 <lzma_mode_is_supported@@XZ_5.0+0xc04>
   115d8:	str	w20, [sp, #4]
   115dc:	mov	x20, xzr
   115e0:	mov	w27, wzr
   115e4:	mov	w28, wzr
   115e8:	sub	x26, x24, #0x1
   115ec:	sub	x22, x24, #0x2
   115f0:	add	x8, x23, x20, lsl #2
   115f4:	ldr	w8, [x8, #740]
   115f8:	ldrb	w9, [x26]
   115fc:	sub	x8, x22, x8
   11600:	ldrb	w10, [x8]
   11604:	cmp	w9, w10
   11608:	b.ne	11668 <lzma_mode_is_supported@@XZ_5.0+0xa9c>  // b.any
   1160c:	ldrb	w9, [x24]
   11610:	ldrb	w10, [x8, #1]
   11614:	cmp	w9, w10
   11618:	b.ne	11668 <lzma_mode_is_supported@@XZ_5.0+0xa9c>  // b.any
   1161c:	mov	w9, #0x2                   	// #2
   11620:	cmp	w25, #0x2
   11624:	b.eq	1164c <lzma_mode_is_supported@@XZ_5.0+0xa80>  // b.none
   11628:	mov	w10, w9
   1162c:	ldrb	w11, [x26, x10]
   11630:	ldrb	w10, [x8, x10]
   11634:	cmp	w11, w10
   11638:	b.ne	1164c <lzma_mode_is_supported@@XZ_5.0+0xa80>  // b.any
   1163c:	add	w9, w9, #0x1
   11640:	cmp	w25, w9
   11644:	b.ne	11628 <lzma_mode_is_supported@@XZ_5.0+0xa5c>  // b.any
   11648:	mov	w9, w25
   1164c:	cmp	w9, w19
   11650:	b.cs	11688 <lzma_mode_is_supported@@XZ_5.0+0xabc>  // b.hs, b.nlast
   11654:	cmp	w9, w27
   11658:	mov	w8, wzr
   1165c:	csel	w28, w20, w28, hi  // hi = pmore
   11660:	csel	w27, w9, w27, hi  // hi = pmore
   11664:	b	1166c <lzma_mode_is_supported@@XZ_5.0+0xaa0>
   11668:	mov	w8, #0x4                   	// #4
   1166c:	orr	w9, w8, #0x4
   11670:	cmp	w9, #0x4
   11674:	b.ne	116b0 <lzma_mode_is_supported@@XZ_5.0+0xae4>  // b.any
   11678:	add	x20, x20, #0x1
   1167c:	cmp	x20, #0x4
   11680:	b.ne	115f0 <lzma_mode_is_supported@@XZ_5.0+0xa24>  // b.any
   11684:	b	116ac <lzma_mode_is_supported@@XZ_5.0+0xae0>
   11688:	ldr	x8, [sp, #8]
   1168c:	sub	w1, w9, #0x1
   11690:	mov	x0, x21
   11694:	str	w20, [x8]
   11698:	ldr	x8, [sp, #16]
   1169c:	str	w9, [x8]
   116a0:	bl	118f4 <lzma_mode_is_supported@@XZ_5.0+0xd28>
   116a4:	mov	w8, #0x1                   	// #1
   116a8:	b	1166c <lzma_mode_is_supported@@XZ_5.0+0xaa0>
   116ac:	mov	w8, #0x2                   	// #2
   116b0:	cmp	w8, #0x2
   116b4:	b.ne	117d0 <lzma_mode_is_supported@@XZ_5.0+0xc04>  // b.any
   116b8:	ldr	w22, [sp, #4]
   116bc:	cmp	w22, w19
   116c0:	b.cs	11748 <lzma_mode_is_supported@@XZ_5.0+0xb7c>  // b.hs, b.nlast
   116c4:	cmp	w22, #0x2
   116c8:	b.cc	11774 <lzma_mode_is_supported@@XZ_5.0+0xba8>  // b.lo, b.ul, b.last
   116cc:	ldur	w8, [x29, #-4]
   116d0:	sub	w9, w8, #0x1
   116d4:	add	x9, x23, w9, uxtw #3
   116d8:	ldr	w19, [x9, #760]
   116dc:	cmp	w8, #0x2
   116e0:	b.cc	11730 <lzma_mode_is_supported@@XZ_5.0+0xb64>  // b.lo, b.ul, b.last
   116e4:	mov	w9, #0xfffffffe            	// #-2
   116e8:	add	x9, x8, x9
   116ec:	add	x10, x23, w9, uxtw #3
   116f0:	ldr	w10, [x10, #756]
   116f4:	add	w11, w10, #0x1
   116f8:	cmp	w22, w11
   116fc:	b.ne	11730 <lzma_mode_is_supported@@XZ_5.0+0xb64>  // b.any
   11700:	and	x11, x9, #0xffffffff
   11704:	add	x11, x23, x11, lsl #3
   11708:	ldr	w12, [x11, #760]
   1170c:	cmp	w12, w19, lsr #7
   11710:	b.cs	11730 <lzma_mode_is_supported@@XZ_5.0+0xb64>  // b.hs, b.nlast
   11714:	ldr	w19, [x11, #760]
   11718:	sub	w8, w8, #0x1
   1171c:	cmp	w8, #0x1
   11720:	sub	x9, x9, #0x1
   11724:	mov	w22, w10
   11728:	stur	w8, [x29, #-4]
   1172c:	b.hi	116ec <lzma_mode_is_supported@@XZ_5.0+0xb20>  // b.pmore
   11730:	cmp	w19, #0x7f
   11734:	ccmp	w22, #0x2, #0x0, hi  // hi = pmore
   11738:	csinc	w22, w22, wzr, ne  // ne = any
   1173c:	cmp	w27, #0x2
   11740:	b.cs	11780 <lzma_mode_is_supported@@XZ_5.0+0xbb4>  // b.hs, b.nlast
   11744:	b	117f0 <lzma_mode_is_supported@@XZ_5.0+0xc24>
   11748:	ldur	w8, [x29, #-4]
   1174c:	ldr	x9, [sp, #16]
   11750:	sub	w1, w22, #0x1
   11754:	sub	w8, w8, #0x1
   11758:	add	x8, x23, w8, uxtw #3
   1175c:	ldr	w8, [x8, #760]
   11760:	str	w22, [x9]
   11764:	ldr	x9, [sp, #8]
   11768:	add	w8, w8, #0x4
   1176c:	str	w8, [x9]
   11770:	b	117c8 <lzma_mode_is_supported@@XZ_5.0+0xbfc>
   11774:	mov	w19, wzr
   11778:	cmp	w27, #0x2
   1177c:	b.cc	117f0 <lzma_mode_is_supported@@XZ_5.0+0xc24>  // b.lo, b.ul, b.last
   11780:	add	w8, w27, #0x1
   11784:	cmp	w8, w22
   11788:	b.cs	117b4 <lzma_mode_is_supported@@XZ_5.0+0xbe8>  // b.hs, b.nlast
   1178c:	cmp	w19, #0x201
   11790:	b.cc	117a0 <lzma_mode_is_supported@@XZ_5.0+0xbd4>  // b.lo, b.ul, b.last
   11794:	add	w8, w27, #0x2
   11798:	cmp	w8, w22
   1179c:	b.cs	117b4 <lzma_mode_is_supported@@XZ_5.0+0xbe8>  // b.hs, b.nlast
   117a0:	cmp	w19, #0x8, lsl #12
   117a4:	b.ls	117f0 <lzma_mode_is_supported@@XZ_5.0+0xc24>  // b.plast
   117a8:	add	w8, w27, #0x3
   117ac:	cmp	w8, w22
   117b0:	b.cc	117f0 <lzma_mode_is_supported@@XZ_5.0+0xc24>  // b.lo, b.ul, b.last
   117b4:	ldr	x8, [sp, #8]
   117b8:	sub	w1, w27, #0x1
   117bc:	str	w28, [x8]
   117c0:	ldr	x8, [sp, #16]
   117c4:	str	w27, [x8]
   117c8:	mov	x0, x21
   117cc:	bl	118f4 <lzma_mode_is_supported@@XZ_5.0+0xd28>
   117d0:	ldp	x20, x19, [sp, #112]
   117d4:	ldp	x22, x21, [sp, #96]
   117d8:	ldp	x24, x23, [sp, #80]
   117dc:	ldp	x26, x25, [sp, #64]
   117e0:	ldp	x28, x27, [sp, #48]
   117e4:	ldp	x29, x30, [sp, #32]
   117e8:	add	sp, sp, #0x80
   117ec:	ret
   117f0:	cmp	w25, #0x3
   117f4:	b.cc	115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>  // b.lo, b.ul, b.last
   117f8:	subs	w20, w22, #0x1
   117fc:	b.ls	115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>  // b.plast
   11800:	add	x1, x23, #0xb84
   11804:	add	x2, x23, #0x2f4
   11808:	mov	x0, x21
   1180c:	bl	e908 <lzma_mf_is_supported@@XZ_5.0+0x1d8>
   11810:	cmp	w0, #0x2
   11814:	str	w0, [x23, #2952]
   11818:	b.cc	1187c <lzma_mode_is_supported@@XZ_5.0+0xcb0>  // b.lo, b.ul, b.last
   1181c:	ldr	w8, [x23, #2948]
   11820:	cmp	w0, w22
   11824:	sub	w8, w8, #0x1
   11828:	add	x8, x23, w8, uxtw #3
   1182c:	ldr	w8, [x8, #760]
   11830:	b.cc	1183c <lzma_mode_is_supported@@XZ_5.0+0xc70>  // b.lo, b.ul, b.last
   11834:	cmp	w8, w19
   11838:	b.cc	115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>  // b.lo, b.ul, b.last
   1183c:	add	w10, w22, #0x1
   11840:	cmp	w19, w8, lsr #7
   11844:	cset	w9, cs  // cs = hs, nlast
   11848:	cmp	w0, w10
   1184c:	cset	w10, eq  // eq = none
   11850:	b.hi	115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>  // b.pmore
   11854:	and	w9, w10, w9
   11858:	tbnz	w9, #0, 115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>
   1185c:	cmp	w22, #0x3
   11860:	b.cc	1187c <lzma_mode_is_supported@@XZ_5.0+0xcb0>  // b.lo, b.ul, b.last
   11864:	add	w9, w0, #0x1
   11868:	cmp	w9, w22
   1186c:	b.cc	1187c <lzma_mode_is_supported@@XZ_5.0+0xcb0>  // b.lo, b.ul, b.last
   11870:	lsr	w9, w19, #7
   11874:	cmp	w9, w8
   11878:	b.hi	115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>  // b.pmore
   1187c:	cmp	w20, #0x2
   11880:	mov	w8, #0x2                   	// #2
   11884:	mov	w27, w22
   11888:	mov	x22, xzr
   1188c:	csel	w25, w20, w8, hi  // hi = pmore
   11890:	add	x20, x23, #0x2e4
   11894:	ldr	w8, [x20, x22]
   11898:	mov	x0, x24
   1189c:	mov	x2, x25
   118a0:	sub	x1, x26, x8
   118a4:	bl	3280 <bcmp@plt>
   118a8:	cbz	w0, 115bc <lzma_mode_is_supported@@XZ_5.0+0x9f0>
   118ac:	add	x22, x22, #0x4
   118b0:	cmp	x22, #0x10
   118b4:	b.ne	11894 <lzma_mode_is_supported@@XZ_5.0+0xcc8>  // b.any
   118b8:	ldr	x9, [sp, #16]
   118bc:	add	w8, w19, #0x4
   118c0:	sub	w1, w27, #0x2
   118c4:	str	w27, [x9]
   118c8:	ldr	x9, [sp, #8]
   118cc:	str	w8, [x9]
   118d0:	b	117c8 <lzma_mode_is_supported@@XZ_5.0+0xbfc>
   118d4:	ldr	x8, [x0]
   118d8:	ldr	w9, [x0, #24]
   118dc:	add	x0, x8, x9
   118e0:	ret
   118e4:	ldr	w8, [x0, #36]
   118e8:	ldr	w9, [x0, #24]
   118ec:	sub	w0, w8, w9
   118f0:	ret
   118f4:	cbz	w1, 11928 <lzma_mode_is_supported@@XZ_5.0+0xd5c>
   118f8:	stp	x29, x30, [sp, #-32]!
   118fc:	stp	x20, x19, [sp, #16]
   11900:	ldr	x8, [x0, #56]
   11904:	mov	x29, sp
   11908:	mov	w20, w1
   1190c:	mov	x19, x0
   11910:	blr	x8
   11914:	ldr	w8, [x19, #28]
   11918:	add	w8, w8, w20
   1191c:	str	w8, [x19, #28]
   11920:	ldp	x20, x19, [sp, #16]
   11924:	ldp	x29, x30, [sp], #32
   11928:	ret
   1192c:	sub	sp, sp, #0x90
   11930:	mov	w8, #0xedc                 	// #3804
   11934:	mov	w9, #0xee0                 	// #3808
   11938:	movk	w8, #0x1, lsl #16
   1193c:	movk	w9, #0x1, lsl #16
   11940:	ldr	w10, [x0, x8]
   11944:	ldr	w8, [x0, x9]
   11948:	mov	w9, #0xe94                 	// #3732
   1194c:	movk	w9, #0x1, lsl #16
   11950:	stp	x29, x30, [sp, #48]
   11954:	stp	x22, x21, [sp, #112]
   11958:	stp	x20, x19, [sp, #128]
   1195c:	add	x29, sp, #0x30
   11960:	mov	x20, x3
   11964:	mov	x22, x2
   11968:	mov	x21, x0
   1196c:	cmp	w10, w8
   11970:	add	x19, x0, x9
   11974:	stp	x28, x27, [sp, #64]
   11978:	stp	x26, x25, [sp, #80]
   1197c:	stp	x24, x23, [sp, #96]
   11980:	stur	w4, [x29, #-20]
   11984:	b.ne	11a88 <lzma_mode_is_supported@@XZ_5.0+0xebc>  // b.any
   11988:	ldr	w8, [x1, #28]
   1198c:	mov	x23, x1
   11990:	cbnz	w8, 119bc <lzma_mode_is_supported@@XZ_5.0+0xdf0>
   11994:	ldr	w8, [x19]
   11998:	cmp	w8, #0x80
   1199c:	b.cc	119a8 <lzma_mode_is_supported@@XZ_5.0+0xddc>  // b.lo, b.ul, b.last
   119a0:	mov	x0, x21
   119a4:	bl	11af0 <lzma_mode_is_supported@@XZ_5.0+0xf24>
   119a8:	ldr	w8, [x19, #68]
   119ac:	cmp	w8, #0x10
   119b0:	b.cc	119bc <lzma_mode_is_supported@@XZ_5.0+0xdf0>  // b.lo, b.ul, b.last
   119b4:	mov	x0, x21
   119b8:	bl	11ca0 <lzma_mode_is_supported@@XZ_5.0+0x10d4>
   119bc:	ldur	w4, [x29, #-20]
   119c0:	mov	x0, x21
   119c4:	mov	x1, x23
   119c8:	mov	x2, x22
   119cc:	mov	x3, x20
   119d0:	bl	11d08 <lzma_mode_is_supported@@XZ_5.0+0x113c>
   119d4:	cmn	w0, #0x1
   119d8:	b.eq	11ad0 <lzma_mode_is_supported@@XZ_5.0+0xf04>  // b.none
   119dc:	add	x8, x21, #0x2e4
   119e0:	ldr	q0, [x8]
   119e4:	mov	w25, w0
   119e8:	cmp	w0, #0x2
   119ec:	stp	x22, x20, [sp, #8]
   119f0:	stur	q0, [x29, #-16]
   119f4:	b.cc	11abc <lzma_mode_is_supported@@XZ_5.0+0xef0>  // b.lo, b.ul, b.last
   119f8:	add	x26, x21, #0xb84
   119fc:	add	x27, x21, #0x2f4
   11a00:	mov	w24, #0x1                   	// #1
   11a04:	mov	w22, #0xffe                 	// #4094
   11a08:	mov	x0, x23
   11a0c:	mov	x1, x26
   11a10:	mov	x2, x27
   11a14:	bl	e908 <lzma_mf_is_supported@@XZ_5.0+0x1d8>
   11a18:	ldr	w28, [x23, #96]
   11a1c:	str	w0, [x21, #2952]
   11a20:	cmp	w0, w28
   11a24:	b.cs	11ac0 <lzma_mode_is_supported@@XZ_5.0+0xef4>  // b.hs, b.nlast
   11a28:	mov	x0, x23
   11a2c:	bl	12fe8 <lzma_mode_is_supported@@XZ_5.0+0x241c>
   11a30:	ldur	w8, [x29, #-20]
   11a34:	sub	x19, x0, #0x1
   11a38:	mov	x0, x23
   11a3c:	add	w20, w8, w24
   11a40:	bl	12ff8 <lzma_mode_is_supported@@XZ_5.0+0x242c>
   11a44:	add	w8, w0, #0x1
   11a48:	cmp	w8, w22
   11a4c:	csinc	w7, w22, w0, cs  // cs = hs, nlast
   11a50:	sub	x1, x29, #0x10
   11a54:	mov	x0, x21
   11a58:	mov	x2, x19
   11a5c:	mov	w3, w25
   11a60:	mov	w4, w20
   11a64:	mov	w5, w24
   11a68:	mov	w6, w28
   11a6c:	bl	12218 <lzma_mode_is_supported@@XZ_5.0+0x164c>
   11a70:	add	w24, w24, #0x1
   11a74:	mov	w25, w0
   11a78:	cmp	w24, w0
   11a7c:	sub	w22, w22, #0x1
   11a80:	b.cc	11a08 <lzma_mode_is_supported@@XZ_5.0+0xe3c>  // b.lo, b.ul, b.last
   11a84:	b	11ac0 <lzma_mode_is_supported@@XZ_5.0+0xef4>
   11a88:	mov	w9, #0x2c                  	// #44
   11a8c:	mov	w10, #0xef8                 	// #3832
   11a90:	movk	w10, #0x1, lsl #16
   11a94:	mov	w11, #0xefc                 	// #3836
   11a98:	madd	x9, x8, x9, x21
   11a9c:	movk	w11, #0x1, lsl #16
   11aa0:	ldr	w10, [x9, x10]
   11aa4:	ldr	w9, [x9, x11]
   11aa8:	sub	w8, w10, w8
   11aac:	str	w9, [x22]
   11ab0:	str	w8, [x20]
   11ab4:	str	w10, [x19, #76]
   11ab8:	b	11ad0 <lzma_mode_is_supported@@XZ_5.0+0xf04>
   11abc:	mov	w24, #0x1                   	// #1
   11ac0:	ldp	x2, x1, [sp, #8]
   11ac4:	mov	x0, x21
   11ac8:	mov	w3, w24
   11acc:	bl	13008 <lzma_mode_is_supported@@XZ_5.0+0x243c>
   11ad0:	ldp	x20, x19, [sp, #128]
   11ad4:	ldp	x22, x21, [sp, #112]
   11ad8:	ldp	x24, x23, [sp, #96]
   11adc:	ldp	x26, x25, [sp, #80]
   11ae0:	ldp	x28, x27, [sp, #64]
   11ae4:	ldp	x29, x30, [sp, #48]
   11ae8:	add	sp, sp, #0x90
   11aec:	ret
   11af0:	stp	x29, x30, [sp, #-96]!
   11af4:	mov	w8, #0xe90                 	// #3728
   11af8:	mov	w9, #0x290                 	// #656
   11afc:	mov	w10, #0x2c8                 	// #712
   11b00:	mov	w11, #0x690                 	// #1680
   11b04:	movk	w8, #0x1, lsl #16
   11b08:	movk	w9, #0x1, lsl #16
   11b0c:	movk	w10, #0x1, lsl #16
   11b10:	movk	w11, #0x1, lsl #16
   11b14:	str	x27, [sp, #16]
   11b18:	stp	x26, x25, [sp, #32]
   11b1c:	stp	x24, x23, [sp, #48]
   11b20:	stp	x22, x21, [sp, #64]
   11b24:	stp	x20, x19, [sp, #80]
   11b28:	mov	x19, x0
   11b2c:	mov	x23, xzr
   11b30:	add	x22, x0, x8
   11b34:	add	x24, x0, x9
   11b38:	add	x25, x0, x10
   11b3c:	add	x26, x0, x11
   11b40:	mov	w27, #0x6efc                	// #28412
   11b44:	mov	x29, sp
   11b48:	ldr	w8, [x22]
   11b4c:	cbz	w8, 11b80 <lzma_mode_is_supported@@XZ_5.0+0xfb4>
   11b50:	add	x8, x19, x23, lsl #7
   11b54:	mov	x20, xzr
   11b58:	add	x21, x8, x27
   11b5c:	mov	w1, #0x6                   	// #6
   11b60:	mov	x0, x21
   11b64:	mov	w2, w20
   11b68:	bl	1313c <lzma_mode_is_supported@@XZ_5.0+0x2570>
   11b6c:	str	w0, [x24, x20, lsl #2]
   11b70:	ldr	w8, [x22]
   11b74:	add	x20, x20, #0x1
   11b78:	cmp	x20, x8
   11b7c:	b.cc	11b5c <lzma_mode_is_supported@@XZ_5.0+0xf90>  // b.lo, b.ul, b.last
   11b80:	ldr	w8, [x22]
   11b84:	cmp	w8, #0xf
   11b88:	b.cc	11bc4 <lzma_mode_is_supported@@XZ_5.0+0xff8>  // b.lo, b.ul, b.last
   11b8c:	mov	x20, xzr
   11b90:	add	w8, w20, #0xe
   11b94:	lsr	w8, w8, #1
   11b98:	sub	w0, w8, #0x5
   11b9c:	bl	13194 <lzma_mode_is_supported@@XZ_5.0+0x25c8>
   11ba0:	lsl	x8, x20, #2
   11ba4:	ldr	w9, [x25, x8]
   11ba8:	add	w9, w9, w0
   11bac:	str	w9, [x25, x8]
   11bb0:	ldr	w8, [x22]
   11bb4:	add	x9, x20, #0xf
   11bb8:	add	x20, x20, #0x1
   11bbc:	cmp	x9, x8
   11bc0:	b.cc	11b90 <lzma_mode_is_supported@@XZ_5.0+0xfc4>  // b.lo, b.ul, b.last
   11bc4:	mov	x8, xzr
   11bc8:	ldr	w9, [x24, x8]
   11bcc:	str	w9, [x26, x8]
   11bd0:	add	x8, x8, #0x4
   11bd4:	cmp	x8, #0x10
   11bd8:	b.ne	11bc8 <lzma_mode_is_supported@@XZ_5.0+0xffc>  // b.any
   11bdc:	add	x23, x23, #0x1
   11be0:	add	x24, x24, #0x100
   11be4:	add	x25, x25, #0x100
   11be8:	cmp	x23, #0x4
   11bec:	add	x26, x26, #0x200
   11bf0:	b.ne	11b48 <lzma_mode_is_supported@@XZ_5.0+0xf7c>  // b.any
   11bf4:	mov	w8, #0x290                 	// #656
   11bf8:	mov	w9, #0x6a0                 	// #1696
   11bfc:	movk	w8, #0x1, lsl #16
   11c00:	movk	w9, #0x1, lsl #16
   11c04:	mov	w20, #0x4                   	// #4
   11c08:	add	x23, x19, x8
   11c0c:	add	x24, x19, x9
   11c10:	mov	w25, #0x70fa                	// #28922
   11c14:	mov	w0, w20
   11c18:	bl	1319c <lzma_mode_is_supported@@XZ_5.0+0x25d0>
   11c1c:	lsr	w8, w0, #1
   11c20:	mov	w9, #0x2                   	// #2
   11c24:	sub	w1, w8, #0x1
   11c28:	bfxil	w9, w0, #0, #1
   11c2c:	lsl	w8, w9, w1
   11c30:	add	x9, x19, w8, uxtw #1
   11c34:	sub	x9, x9, w0, uxtw #1
   11c38:	mov	w21, w0
   11c3c:	add	x0, x9, x25
   11c40:	sub	w2, w20, w8
   11c44:	bl	131f4 <lzma_mode_is_supported@@XZ_5.0+0x2628>
   11c48:	mov	x8, xzr
   11c4c:	add	x9, x23, w21, uxtw #2
   11c50:	mov	x10, x24
   11c54:	ldr	w11, [x9, x8]
   11c58:	add	x8, x8, #0x100
   11c5c:	cmp	x8, #0x400
   11c60:	add	w11, w11, w0
   11c64:	str	w11, [x10]
   11c68:	add	x10, x10, #0x200
   11c6c:	b.ne	11c54 <lzma_mode_is_supported@@XZ_5.0+0x1088>  // b.any
   11c70:	add	x20, x20, #0x1
   11c74:	cmp	x20, #0x80
   11c78:	add	x24, x24, #0x4
   11c7c:	b.ne	11c14 <lzma_mode_is_supported@@XZ_5.0+0x1048>  // b.any
   11c80:	str	wzr, [x22, #4]
   11c84:	ldp	x20, x19, [sp, #80]
   11c88:	ldp	x22, x21, [sp, #64]
   11c8c:	ldp	x24, x23, [sp, #48]
   11c90:	ldp	x26, x25, [sp, #32]
   11c94:	ldr	x27, [sp, #16]
   11c98:	ldp	x29, x30, [sp], #96
   11c9c:	ret
   11ca0:	stp	x29, x30, [sp, #-48]!
   11ca4:	mov	w9, #0xe98                 	// #3736
   11ca8:	mov	w8, #0x71e0                	// #29152
   11cac:	movk	w9, #0x1, lsl #16
   11cb0:	stp	x22, x21, [sp, #16]
   11cb4:	stp	x20, x19, [sp, #32]
   11cb8:	mov	x19, x0
   11cbc:	mov	x20, xzr
   11cc0:	add	x21, x0, x8
   11cc4:	add	x22, x0, x9
   11cc8:	mov	x29, sp
   11ccc:	mov	w1, #0x4                   	// #4
   11cd0:	mov	x0, x21
   11cd4:	mov	w2, w20
   11cd8:	bl	131f4 <lzma_mode_is_supported@@XZ_5.0+0x2628>
   11cdc:	str	w0, [x22, x20, lsl #2]
   11ce0:	add	x20, x20, #0x1
   11ce4:	cmp	x20, #0x10
   11ce8:	b.ne	11ccc <lzma_mode_is_supported@@XZ_5.0+0x1100>  // b.any
   11cec:	mov	w8, #0xed8                 	// #3800
   11cf0:	movk	w8, #0x1, lsl #16
   11cf4:	str	wzr, [x19, x8]
   11cf8:	ldp	x20, x19, [sp, #32]
   11cfc:	ldp	x22, x21, [sp, #16]
   11d00:	ldp	x29, x30, [sp], #48
   11d04:	ret
   11d08:	sub	sp, sp, #0xa0
   11d0c:	stp	x26, x25, [sp, #96]
   11d10:	ldr	w8, [x1, #28]
   11d14:	ldr	w26, [x1, #96]
   11d18:	stp	x24, x23, [sp, #112]
   11d1c:	stp	x22, x21, [sp, #128]
   11d20:	stp	x20, x19, [sp, #144]
   11d24:	mov	w22, w4
   11d28:	mov	x23, x3
   11d2c:	mov	x24, x2
   11d30:	mov	x21, x1
   11d34:	mov	x19, x0
   11d38:	stp	x29, x30, [sp, #64]
   11d3c:	stp	x28, x27, [sp, #80]
   11d40:	add	x29, sp, #0x40
   11d44:	cbz	w8, 11d58 <lzma_mode_is_supported@@XZ_5.0+0x118c>
   11d48:	ldr	w8, [x19, #2948]
   11d4c:	ldr	w20, [x19, #2952]
   11d50:	stur	w8, [x29, #-4]
   11d54:	b	11d6c <lzma_mode_is_supported@@XZ_5.0+0x11a0>
   11d58:	add	x2, x19, #0x2f4
   11d5c:	sub	x1, x29, #0x4
   11d60:	mov	x0, x21
   11d64:	bl	e908 <lzma_mf_is_supported@@XZ_5.0+0x1d8>
   11d68:	mov	w20, w0
   11d6c:	mov	x0, x21
   11d70:	bl	12ff8 <lzma_mode_is_supported@@XZ_5.0+0x242c>
   11d74:	add	w8, w0, #0x1
   11d78:	cmp	w8, #0x111
   11d7c:	mov	w8, #0x111                 	// #273
   11d80:	csinc	w27, w8, w0, cs  // cs = hs, nlast
   11d84:	cmp	w27, #0x1
   11d88:	b.hi	11da0 <lzma_mode_is_supported@@XZ_5.0+0x11d4>  // b.pmore
   11d8c:	mov	w22, #0xffffffff            	// #-1
   11d90:	mov	w8, #0x1                   	// #1
   11d94:	str	w22, [x24]
   11d98:	str	w8, [x23]
   11d9c:	b	11ff0 <lzma_mode_is_supported@@XZ_5.0+0x1424>
   11da0:	mov	w8, #0xee4                 	// #3812
   11da4:	movk	w8, #0x1, lsl #16
   11da8:	mov	x0, x21
   11dac:	add	x28, x19, x8
   11db0:	bl	12fe8 <lzma_mode_is_supported@@XZ_5.0+0x241c>
   11db4:	mov	x8, x0
   11db8:	ldrb	w11, [x8, #-1]!
   11dbc:	mov	x25, x0
   11dc0:	mov	x10, xzr
   11dc4:	mov	w9, wzr
   11dc8:	sub	x12, x0, #0x2
   11dcc:	sub	x13, x29, #0x14
   11dd0:	b	11de4 <lzma_mode_is_supported@@XZ_5.0+0x1218>
   11dd4:	str	wzr, [x13, x10, lsl #2]
   11dd8:	add	x10, x10, #0x1
   11ddc:	cmp	x10, #0x4
   11de0:	b.eq	11e50 <lzma_mode_is_supported@@XZ_5.0+0x1284>  // b.none
   11de4:	add	x14, x19, x10, lsl #2
   11de8:	ldr	w14, [x14, #740]
   11dec:	sub	x14, x12, x14
   11df0:	ldrb	w15, [x14]
   11df4:	cmp	w11, w15
   11df8:	b.ne	11dd4 <lzma_mode_is_supported@@XZ_5.0+0x1208>  // b.any
   11dfc:	ldrb	w15, [x25]
   11e00:	ldrb	w16, [x14, #1]
   11e04:	cmp	w15, w16
   11e08:	b.ne	11dd4 <lzma_mode_is_supported@@XZ_5.0+0x1208>  // b.any
   11e0c:	mov	w15, #0x2                   	// #2
   11e10:	cmp	w27, #0x2
   11e14:	b.eq	11e3c <lzma_mode_is_supported@@XZ_5.0+0x1270>  // b.none
   11e18:	mov	w16, w15
   11e1c:	ldrb	w17, [x8, x16]
   11e20:	ldrb	w16, [x14, x16]
   11e24:	cmp	w17, w16
   11e28:	b.ne	11e3c <lzma_mode_is_supported@@XZ_5.0+0x1270>  // b.any
   11e2c:	add	w15, w15, #0x1
   11e30:	cmp	w27, w15
   11e34:	b.ne	11e18 <lzma_mode_is_supported@@XZ_5.0+0x124c>  // b.any
   11e38:	mov	w15, w27
   11e3c:	str	w15, [x13, x10, lsl #2]
   11e40:	ldr	w14, [x13, w9, uxtw #2]
   11e44:	cmp	w15, w14
   11e48:	csel	w9, w10, w9, hi  // hi = pmore
   11e4c:	b	11dd8 <lzma_mode_is_supported@@XZ_5.0+0x120c>
   11e50:	sub	x10, x29, #0x14
   11e54:	ldr	w27, [x10, w9, uxtw #2]
   11e58:	cmp	w27, w26
   11e5c:	b.cs	11fb4 <lzma_mode_is_supported@@XZ_5.0+0x13e8>  // b.hs, b.nlast
   11e60:	cmp	w20, w26
   11e64:	b.cs	11fc4 <lzma_mode_is_supported@@XZ_5.0+0x13f8>  // b.hs, b.nlast
   11e68:	ldr	w9, [x19, #740]
   11e6c:	ldrb	w11, [x8]
   11e70:	cmp	w27, #0x1
   11e74:	mvn	x9, x9
   11e78:	ldrb	w26, [x9, x8]
   11e7c:	b.hi	11e90 <lzma_mode_is_supported@@XZ_5.0+0x12c4>  // b.pmore
   11e80:	cmp	w20, #0x1
   11e84:	b.hi	11e90 <lzma_mode_is_supported@@XZ_5.0+0x12c4>  // b.pmore
   11e88:	cmp	w11, w26
   11e8c:	b.ne	11d8c <lzma_mode_is_supported@@XZ_5.0+0x11c0>  // b.any
   11e90:	ldr	w8, [x19, #736]
   11e94:	mov	w10, #0x6b9c                	// #27548
   11e98:	add	x10, x19, x10
   11e9c:	str	x10, [sp, #32]
   11ea0:	str	w8, [x28]
   11ea4:	ldr	w9, [x19, #2960]
   11ea8:	cmp	x8, #0x6
   11eac:	str	w20, [sp, #28]
   11eb0:	mov	w20, w11
   11eb4:	and	w21, w9, w22
   11eb8:	add	x9, x10, x8, lsl #5
   11ebc:	lsl	x10, x21, #1
   11ec0:	ldrh	w0, [x9, x10]
   11ec4:	stp	x28, x10, [sp, #8]
   11ec8:	cset	w28, hi  // hi = pmore
   11ecc:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   11ed0:	ldurb	w2, [x25, #-2]
   11ed4:	mov	w25, w0
   11ed8:	mov	x0, x19
   11edc:	mov	w1, w22
   11ee0:	mov	w3, w28
   11ee4:	mov	w4, w26
   11ee8:	mov	w5, w20
   11eec:	bl	132cc <lzma_mode_is_supported@@XZ_5.0+0x2700>
   11ef0:	add	w8, w0, w25
   11ef4:	ldr	x25, [sp, #8]
   11ef8:	mov	w9, #0xf10                 	// #3856
   11efc:	movk	w9, #0x1, lsl #16
   11f00:	add	x0, x19, x9
   11f04:	str	w8, [x25, #60]
   11f08:	str	x0, [sp]
   11f0c:	bl	1338c <lzma_mode_is_supported@@XZ_5.0+0x27c0>
   11f10:	ldr	w28, [x19, #736]
   11f14:	ldr	x8, [sp, #32]
   11f18:	ldr	x9, [sp, #16]
   11f1c:	add	x8, x8, x28, lsl #5
   11f20:	ldrh	w0, [x8, x9]
   11f24:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   11f28:	add	x8, x19, x28, lsl #1
   11f2c:	mov	w9, #0x6d1c                	// #27932
   11f30:	ldrh	w8, [x8, x9]
   11f34:	mov	w22, w0
   11f38:	mov	w0, w8
   11f3c:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   11f40:	cmp	w20, w26
   11f44:	mov	w20, w22
   11f48:	add	w8, w0, w22
   11f4c:	str	w8, [sp, #32]
   11f50:	b.ne	11f84 <lzma_mode_is_supported@@XZ_5.0+0x13b8>  // b.any
   11f54:	mov	x0, x19
   11f58:	mov	w1, w28
   11f5c:	mov	w2, w21
   11f60:	bl	133b4 <lzma_mode_is_supported@@XZ_5.0+0x27e8>
   11f64:	ldr	w8, [sp, #32]
   11f68:	ldr	w9, [x25, #60]
   11f6c:	add	w8, w0, w8
   11f70:	cmp	w8, w9
   11f74:	b.cs	11f84 <lzma_mode_is_supported@@XZ_5.0+0x13b8>  // b.hs, b.nlast
   11f78:	ldr	x0, [sp]
   11f7c:	str	w8, [x25, #60]
   11f80:	bl	13410 <lzma_mode_is_supported@@XZ_5.0+0x2844>
   11f84:	ldr	w8, [sp, #28]
   11f88:	mov	x9, x25
   11f8c:	cmp	w8, w27
   11f90:	csel	w22, w8, w27, hi  // hi = pmore
   11f94:	cmp	w22, #0x1
   11f98:	b.hi	12014 <lzma_mode_is_supported@@XZ_5.0+0x1448>  // b.pmore
   11f9c:	ldr	w8, [x9, #68]
   11fa0:	mov	w9, #0x1                   	// #1
   11fa4:	str	w9, [x23]
   11fa8:	mov	w22, #0xffffffff            	// #-1
   11fac:	str	w8, [x24]
   11fb0:	b	11ff0 <lzma_mode_is_supported@@XZ_5.0+0x1424>
   11fb4:	sub	w1, w27, #0x1
   11fb8:	str	w9, [x24]
   11fbc:	str	w27, [x23]
   11fc0:	b	11fe4 <lzma_mode_is_supported@@XZ_5.0+0x1418>
   11fc4:	ldur	w8, [x29, #-4]
   11fc8:	str	w20, [x23]
   11fcc:	sub	w1, w20, #0x1
   11fd0:	sub	w8, w8, #0x1
   11fd4:	add	x8, x19, w8, uxtw #3
   11fd8:	ldr	w8, [x8, #760]
   11fdc:	add	w8, w8, #0x4
   11fe0:	str	w8, [x24]
   11fe4:	mov	x0, x21
   11fe8:	bl	13280 <lzma_mode_is_supported@@XZ_5.0+0x26b4>
   11fec:	mov	w22, #0xffffffff            	// #-1
   11ff0:	mov	w0, w22
   11ff4:	ldp	x20, x19, [sp, #144]
   11ff8:	ldp	x22, x21, [sp, #128]
   11ffc:	ldp	x24, x23, [sp, #112]
   12000:	ldp	x26, x25, [sp, #96]
   12004:	ldp	x28, x27, [sp, #80]
   12008:	ldp	x29, x30, [sp, #64]
   1200c:	add	sp, sp, #0xa0
   12010:	ret
   12014:	str	wzr, [x9, #64]
   12018:	mov	w9, #0xf00                 	// #3840
   1201c:	movk	w9, #0x1, lsl #16
   12020:	mov	x8, xzr
   12024:	add	x9, x19, x9
   12028:	add	x10, x19, x8
   1202c:	ldr	w10, [x10, #740]
   12030:	str	w10, [x9, x8]
   12034:	add	x8, x8, #0x4
   12038:	cmp	x8, #0x10
   1203c:	b.ne	12028 <lzma_mode_is_supported@@XZ_5.0+0x145c>  // b.any
   12040:	mov	w9, #0xef4                 	// #3828
   12044:	mov	w8, #0x2c                  	// #44
   12048:	movk	w9, #0x1, lsl #16
   1204c:	umaddl	x8, w22, w8, x9
   12050:	mov	w9, #0x40000000            	// #1073741824
   12054:	mov	w10, w22
   12058:	str	w20, [sp, #16]
   1205c:	sub	w10, w10, #0x1
   12060:	str	w9, [x19, x8]
   12064:	cmp	w10, #0x1
   12068:	sub	x8, x8, #0x2c
   1206c:	b.hi	1205c <lzma_mode_is_supported@@XZ_5.0+0x1490>  // b.pmore
   12070:	mov	w9, #0xef4                 	// #3828
   12074:	mov	w8, #0xba48                	// #47688
   12078:	movk	w9, #0x1, lsl #16
   1207c:	mov	x23, xzr
   12080:	sub	x27, x29, #0x14
   12084:	add	x24, x19, x8
   12088:	add	x28, x19, x9
   1208c:	b	1209c <lzma_mode_is_supported@@XZ_5.0+0x14d0>
   12090:	add	x23, x23, #0x1
   12094:	cmp	x23, #0x4
   12098:	b.eq	12110 <lzma_mode_is_supported@@XZ_5.0+0x1544>  // b.none
   1209c:	ldr	w26, [x27, x23, lsl #2]
   120a0:	cmp	w26, #0x2
   120a4:	b.cc	12090 <lzma_mode_is_supported@@XZ_5.0+0x14c4>  // b.lo, b.ul, b.last
   120a8:	ldr	w2, [x19, #736]
   120ac:	mov	x0, x19
   120b0:	mov	w1, w23
   120b4:	mov	w3, w21
   120b8:	bl	1341c <lzma_mode_is_supported@@XZ_5.0+0x2850>
   120bc:	ldr	w8, [sp, #32]
   120c0:	add	w25, w0, w8
   120c4:	mov	w8, #0x2c                  	// #44
   120c8:	madd	x20, x26, x8, x28
   120cc:	b	120e0 <lzma_mode_is_supported@@XZ_5.0+0x1514>
   120d0:	sub	w26, w26, #0x1
   120d4:	cmp	w26, #0x1
   120d8:	sub	x20, x20, #0x2c
   120dc:	b.ls	12090 <lzma_mode_is_supported@@XZ_5.0+0x14c4>  // b.plast
   120e0:	mov	x0, x24
   120e4:	mov	w1, w26
   120e8:	mov	w2, w21
   120ec:	bl	134d0 <lzma_mode_is_supported@@XZ_5.0+0x2904>
   120f0:	ldr	w9, [x20]
   120f4:	add	w8, w25, w0
   120f8:	cmp	w8, w9
   120fc:	b.cs	120d0 <lzma_mode_is_supported@@XZ_5.0+0x1504>  // b.hs, b.nlast
   12100:	stp	w8, wzr, [x20]
   12104:	str	w23, [x20, #8]
   12108:	sturb	wzr, [x20, #-12]
   1210c:	b	120d0 <lzma_mode_is_supported@@XZ_5.0+0x1504>
   12110:	ldr	w8, [x19, #736]
   12114:	mov	w9, #0x6d1c                	// #27932
   12118:	add	x8, x19, x8, lsl #1
   1211c:	ldrh	w0, [x8, x9]
   12120:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   12124:	ldur	w8, [x29, #-20]
   12128:	mov	w9, #0x2                   	// #2
   1212c:	cmp	w8, #0x2
   12130:	csinc	w23, w9, w8, cc  // cc = lo, ul, last
   12134:	ldr	w8, [sp, #28]
   12138:	cmp	w23, w8
   1213c:	b.hi	11ff0 <lzma_mode_is_supported@@XZ_5.0+0x1424>  // b.pmore
   12140:	ldr	w8, [sp, #16]
   12144:	mov	w25, #0xffffffff            	// #-1
   12148:	add	w24, w0, w8
   1214c:	add	w25, w25, #0x1
   12150:	add	x8, x19, w25, uxtw #3
   12154:	ldr	w8, [x8, #756]
   12158:	cmp	w23, w8
   1215c:	b.hi	1214c <lzma_mode_is_supported@@XZ_5.0+0x1580>  // b.pmore
   12160:	ldur	w26, [x29, #-4]
   12164:	mov	w27, #0x2c                  	// #44
   12168:	b	12178 <lzma_mode_is_supported@@XZ_5.0+0x15ac>
   1216c:	mov	w9, #0x1                   	// #1
   12170:	add	w23, w8, #0x1
   12174:	tbz	w9, #0, 11ff0 <lzma_mode_is_supported@@XZ_5.0+0x1424>
   12178:	add	x8, x19, w25, uxtw #3
   1217c:	ldr	w20, [x8, #760]
   12180:	mov	x0, x19
   12184:	mov	w2, w23
   12188:	mov	w3, w21
   1218c:	mov	w1, w20
   12190:	mov	w28, w25
   12194:	bl	134e8 <lzma_mode_is_supported@@XZ_5.0+0x291c>
   12198:	mov	w9, #0xef4                 	// #3828
   1219c:	umaddl	x8, w23, w27, x19
   121a0:	movk	w9, #0x1, lsl #16
   121a4:	add	x9, x8, x9
   121a8:	ldr	w8, [x9]
   121ac:	add	w10, w24, w0
   121b0:	cmp	w10, w8
   121b4:	mov	w8, w23
   121b8:	b.cs	121ec <lzma_mode_is_supported@@XZ_5.0+0x1620>  // b.hs, b.nlast
   121bc:	mov	w11, #0xef8                 	// #3832
   121c0:	str	w10, [x9]
   121c4:	madd	x9, x8, x27, x19
   121c8:	movk	w11, #0x1, lsl #16
   121cc:	str	wzr, [x9, x11]
   121d0:	mov	w11, #0xefc                 	// #3836
   121d4:	add	w10, w20, #0x4
   121d8:	movk	w11, #0x1, lsl #16
   121dc:	str	w10, [x9, x11]
   121e0:	mov	w10, #0xee8                 	// #3816
   121e4:	movk	w10, #0x1, lsl #16
   121e8:	strb	wzr, [x9, x10]
   121ec:	add	x9, x19, x28, lsl #3
   121f0:	ldr	w9, [x9, #756]
   121f4:	cmp	w8, w9
   121f8:	b.ne	1216c <lzma_mode_is_supported@@XZ_5.0+0x15a0>  // b.any
   121fc:	add	w25, w25, #0x1
   12200:	cmp	w25, w26
   12204:	b.ne	1216c <lzma_mode_is_supported@@XZ_5.0+0x15a0>  // b.any
   12208:	mov	w9, wzr
   1220c:	add	w23, w8, #0x1
   12210:	tbnz	w9, #0, 12178 <lzma_mode_is_supported@@XZ_5.0+0x15ac>
   12214:	b	11ff0 <lzma_mode_is_supported@@XZ_5.0+0x1424>
   12218:	sub	sp, sp, #0x120
   1221c:	mov	w8, #0x2c                  	// #44
   12220:	mov	w9, #0xef8                 	// #3832
   12224:	mov	w10, #0xee8                 	// #3816
   12228:	stp	x29, x30, [sp, #192]
   1222c:	stp	x28, x27, [sp, #208]
   12230:	stp	x26, x25, [sp, #224]
   12234:	stp	x24, x23, [sp, #240]
   12238:	stp	x22, x21, [sp, #256]
   1223c:	stp	x20, x19, [sp, #272]
   12240:	movk	w9, #0x1, lsl #16
   12244:	umaddl	x8, w5, w8, x0
   12248:	movk	w10, #0x1, lsl #16
   1224c:	ldr	w16, [x0, #2948]
   12250:	ldr	w17, [x0, #2952]
   12254:	ldrb	w10, [x8, x10]
   12258:	ldr	w9, [x8, x9]
   1225c:	add	x29, sp, #0xc0
   12260:	mov	w21, w5
   12264:	mov	x24, x0
   12268:	mov	w11, #0x6d24                	// #27940
   1226c:	mov	w8, w5
   12270:	mov	w12, #0x2c                  	// #44
   12274:	stur	w4, [x29, #-76]
   12278:	stur	w3, [x29, #-52]
   1227c:	cbz	w10, 122d0 <lzma_mode_is_supported@@XZ_5.0+0x1704>
   12280:	mov	w14, #0xee9                 	// #3817
   12284:	madd	x13, x8, x12, x24
   12288:	movk	w14, #0x1, lsl #16
   1228c:	ldrb	w13, [x13, x14]
   12290:	sub	w9, w9, #0x1
   12294:	cbz	w13, 122e4 <lzma_mode_is_supported@@XZ_5.0+0x1718>
   12298:	mov	w13, #0xee4                 	// #3812
   1229c:	movk	w13, #0x1, lsl #16
   122a0:	mov	w12, #0x2c                  	// #44
   122a4:	add	x13, x24, x13
   122a8:	madd	x14, x8, x12, x13
   122ac:	ldp	w15, w14, [x14, #8]
   122b0:	mul	x12, x15, x12
   122b4:	ldr	w12, [x13, x12]
   122b8:	cmp	w14, #0x3
   122bc:	b.hi	122f8 <lzma_mode_is_supported@@XZ_5.0+0x172c>  // b.pmore
   122c0:	cmp	w12, #0x7
   122c4:	mov	w12, #0xb                   	// #11
   122c8:	mov	w13, #0x8                   	// #8
   122cc:	b	12304 <lzma_mode_is_supported@@XZ_5.0+0x1738>
   122d0:	mov	w13, #0xee4                 	// #3812
   122d4:	madd	x12, x9, x12, x24
   122d8:	movk	w13, #0x1, lsl #16
   122dc:	ldr	w12, [x12, x13]
   122e0:	b	12324 <lzma_mode_is_supported@@XZ_5.0+0x1758>
   122e4:	mov	w13, #0xee4                 	// #3812
   122e8:	umaddl	x12, w9, w12, x24
   122ec:	movk	w13, #0x1, lsl #16
   122f0:	ldr	w12, [x12, x13]
   122f4:	b	12308 <lzma_mode_is_supported@@XZ_5.0+0x173c>
   122f8:	cmp	w12, #0x7
   122fc:	mov	w12, #0xa                   	// #10
   12300:	mov	w13, #0x7                   	// #7
   12304:	csel	w12, w13, w12, cc  // cc = lo, ul, last
   12308:	cmp	w12, #0xa
   1230c:	mov	w13, #0xfffffffa            	// #-6
   12310:	mov	w14, #0xfffffffd            	// #-3
   12314:	csel	w13, w14, w13, cc  // cc = lo, ul, last
   12318:	add	w13, w13, w12
   1231c:	cmp	w12, #0x4
   12320:	csel	w12, wzr, w13, cc  // cc = lo, ul, last
   12324:	add	x11, x24, x11
   12328:	str	x11, [sp, #88]
   1232c:	sub	w11, w21, #0x1
   12330:	mov	w18, #0xf00                 	// #3840
   12334:	cmp	w9, w11
   12338:	movk	w18, #0x1, lsl #16
   1233c:	b.ne	12378 <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.any
   12340:	mov	w9, #0x2c                  	// #44
   12344:	mov	w10, #0xefc                 	// #3836
   12348:	madd	x9, x8, x9, x24
   1234c:	movk	w10, #0x1, lsl #16
   12350:	ldr	w9, [x9, x10]
   12354:	cbz	w9, 123e4 <lzma_mode_is_supported@@XZ_5.0+0x1818>
   12358:	cmp	w12, #0xa
   1235c:	mov	w9, #0xfffffffa            	// #-6
   12360:	mov	w10, #0xfffffffd            	// #-3
   12364:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   12368:	add	w9, w9, w12
   1236c:	cmp	w12, #0x4
   12370:	csel	w19, wzr, w9, cc  // cc = lo, ul, last
   12374:	b	124c8 <lzma_mode_is_supported@@XZ_5.0+0x18fc>
   12378:	cbz	w10, 123b8 <lzma_mode_is_supported@@XZ_5.0+0x17ec>
   1237c:	mov	w10, #0x2c                  	// #44
   12380:	mov	w11, #0xee9                 	// #3817
   12384:	madd	x10, x8, x10, x24
   12388:	movk	w11, #0x1, lsl #16
   1238c:	ldrb	w10, [x10, x11]
   12390:	cbz	w10, 123b8 <lzma_mode_is_supported@@XZ_5.0+0x17ec>
   12394:	mov	w9, #0x2c                  	// #44
   12398:	mov	w10, #0xeec                 	// #3820
   1239c:	mov	w11, #0xef0                 	// #3824
   123a0:	movk	w10, #0x1, lsl #16
   123a4:	movk	w11, #0x1, lsl #16
   123a8:	madd	x13, x8, x9, x24
   123ac:	ldr	w9, [x13, x10]
   123b0:	ldr	w10, [x13, x11]
   123b4:	b	123d4 <lzma_mode_is_supported@@XZ_5.0+0x1808>
   123b8:	mov	w10, #0x2c                  	// #44
   123bc:	mov	w11, #0xefc                 	// #3836
   123c0:	madd	x10, x8, x10, x24
   123c4:	movk	w11, #0x1, lsl #16
   123c8:	ldr	w10, [x10, x11]
   123cc:	cmp	w10, #0x3
   123d0:	b.hi	123f8 <lzma_mode_is_supported@@XZ_5.0+0x182c>  // b.pmore
   123d4:	cmp	w12, #0x7
   123d8:	mov	w11, #0xb                   	// #11
   123dc:	mov	w12, #0x8                   	// #8
   123e0:	b	12404 <lzma_mode_is_supported@@XZ_5.0+0x1838>
   123e4:	cmp	w12, #0x7
   123e8:	mov	w9, #0xb                   	// #11
   123ec:	mov	w10, #0x9                   	// #9
   123f0:	csel	w19, w10, w9, cc  // cc = lo, ul, last
   123f4:	b	124c8 <lzma_mode_is_supported@@XZ_5.0+0x18fc>
   123f8:	cmp	w12, #0x7
   123fc:	mov	w11, #0xa                   	// #10
   12400:	mov	w12, #0x7                   	// #7
   12404:	csel	w19, w12, w11, cc  // cc = lo, ul, last
   12408:	cmp	w10, #0x3
   1240c:	b.hi	12498 <lzma_mode_is_supported@@XZ_5.0+0x18cc>  // b.pmore
   12410:	mov	w11, #0x2c                  	// #44
   12414:	umaddl	x11, w9, w11, x24
   12418:	mov	w12, #0xf00                 	// #3840
   1241c:	add	x11, x11, w10, uxtw #2
   12420:	movk	w12, #0x1, lsl #16
   12424:	ldr	w11, [x11, x12]
   12428:	mov	w9, w9
   1242c:	str	w11, [x1]
   12430:	mov	w11, #0x1                   	// #1
   12434:	cbz	w10, 12464 <lzma_mode_is_supported@@XZ_5.0+0x1898>
   12438:	mov	w12, #0x2c                  	// #44
   1243c:	mov	w13, #0xf00                 	// #3840
   12440:	madd	x12, x9, x12, x24
   12444:	movk	w13, #0x1, lsl #16
   12448:	sub	w14, w11, #0x1
   1244c:	add	x14, x12, w14, uxtw #2
   12450:	ldr	w14, [x14, x13]
   12454:	str	w14, [x1, w11, uxtw #2]
   12458:	add	w11, w11, #0x1
   1245c:	cmp	w11, w10
   12460:	b.ls	12448 <lzma_mode_is_supported@@XZ_5.0+0x187c>  // b.plast
   12464:	cmp	w11, #0x3
   12468:	b.hi	124c8 <lzma_mode_is_supported@@XZ_5.0+0x18fc>  // b.pmore
   1246c:	mov	w10, w11
   12470:	mov	w11, #0x2c                  	// #44
   12474:	madd	x9, x9, x11, x18
   12478:	lsl	x10, x10, #2
   1247c:	add	x9, x24, x9
   12480:	ldr	w11, [x9, x10]
   12484:	str	w11, [x1, x10]
   12488:	add	x10, x10, #0x4
   1248c:	cmp	x10, #0x10
   12490:	b.ne	12480 <lzma_mode_is_supported@@XZ_5.0+0x18b4>  // b.any
   12494:	b	124c8 <lzma_mode_is_supported@@XZ_5.0+0x18fc>
   12498:	mov	w13, #0x2c                  	// #44
   1249c:	sub	w12, w10, #0x4
   124a0:	mov	x10, x1
   124a4:	umaddl	x9, w9, w13, x18
   124a8:	mov	x11, xzr
   124ac:	str	w12, [x10], #4
   124b0:	add	x9, x24, x9
   124b4:	ldr	w12, [x9, x11]
   124b8:	str	w12, [x10, x11]
   124bc:	add	x11, x11, #0x4
   124c0:	cmp	x11, #0xc
   124c4:	b.ne	124b4 <lzma_mode_is_supported@@XZ_5.0+0x18e8>  // b.any
   124c8:	mov	w10, #0x2c                  	// #44
   124cc:	mul	x10, x8, x10
   124d0:	mov	w11, #0xee4                 	// #3812
   124d4:	add	x12, x24, x10
   124d8:	add	x10, x10, x18
   124dc:	mov	x9, xzr
   124e0:	movk	w11, #0x1, lsl #16
   124e4:	add	x10, x24, x10
   124e8:	str	w17, [sp, #20]
   124ec:	stur	w16, [x29, #-80]
   124f0:	stp	w7, w6, [x29, #-60]
   124f4:	str	w19, [x12, x11]
   124f8:	ldr	w11, [x1, x9]
   124fc:	str	w11, [x10, x9]
   12500:	add	x9, x9, #0x4
   12504:	cmp	x9, #0x10
   12508:	b.ne	124f8 <lzma_mode_is_supported@@XZ_5.0+0x192c>  // b.any
   1250c:	mov	w9, #0xee4                 	// #3812
   12510:	ldr	w10, [x1]
   12514:	ldr	w11, [x24, #2960]
   12518:	ldur	w20, [x29, #-76]
   1251c:	movk	w9, #0x1, lsl #16
   12520:	mov	w13, #0x2c                  	// #44
   12524:	add	x26, x24, x9
   12528:	mov	w12, w19
   1252c:	madd	x8, x8, x13, x26
   12530:	add	x9, x24, x12, lsl #5
   12534:	ldr	w23, [x8, #16]
   12538:	mvn	x8, x10
   1253c:	and	w10, w11, w20
   12540:	ldrb	w25, [x8, x2]
   12544:	add	x8, x9, w10, uxtw #1
   12548:	mov	w9, #0x6b9c                	// #27548
   1254c:	add	x27, x8, x9
   12550:	ldrh	w0, [x27]
   12554:	ldrb	w22, [x2]
   12558:	stur	x1, [x29, #-88]
   1255c:	stur	x12, [x29, #-72]
   12560:	stur	w10, [x29, #-12]
   12564:	mov	x28, x2
   12568:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   1256c:	stur	x28, [x29, #-48]
   12570:	ldrb	w2, [x28, #-1]!
   12574:	cmp	w19, #0x6
   12578:	cset	w3, hi  // hi = pmore
   1257c:	mov	w1, w20
   12580:	stur	x28, [x29, #-24]
   12584:	add	w28, w0, w23
   12588:	mov	x0, x24
   1258c:	mov	w4, w25
   12590:	mov	w5, w22
   12594:	stp	w19, w23, [x29, #-36]
   12598:	mov	w19, w25
   1259c:	mov	w20, w22
   125a0:	bl	132cc <lzma_mode_is_supported@@XZ_5.0+0x2700>
   125a4:	add	w9, w21, #0x1
   125a8:	mov	w8, #0x2c                  	// #44
   125ac:	umaddl	x25, w9, w8, x26
   125b0:	mov	x26, x25
   125b4:	ldr	w8, [x26, #16]!
   125b8:	add	w10, w28, w0
   125bc:	str	x9, [sp, #72]
   125c0:	str	w10, [sp, #64]
   125c4:	cmp	w10, w8
   125c8:	b.cs	125f8 <lzma_mode_is_supported@@XZ_5.0+0x1a2c>  // b.hs, b.nlast
   125cc:	mov	w8, #0x2c                  	// #44
   125d0:	madd	x8, x9, x8, x24
   125d4:	mov	w9, #0xef8                 	// #3832
   125d8:	movk	w9, #0x1, lsl #16
   125dc:	mov	x0, x25
   125e0:	str	w10, [x26]
   125e4:	str	w21, [x8, x9]
   125e8:	bl	1338c <lzma_mode_is_supported@@XZ_5.0+0x27c0>
   125ec:	mov	w8, #0x1                   	// #1
   125f0:	str	w8, [sp, #84]
   125f4:	b	125fc <lzma_mode_is_supported@@XZ_5.0+0x1a30>
   125f8:	str	wzr, [sp, #84]
   125fc:	ldrh	w0, [x27]
   12600:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12604:	ldur	x8, [x29, #-72]
   12608:	mov	w9, #0x6d1c                	// #27932
   1260c:	add	x8, x24, x8, lsl #1
   12610:	add	x27, x8, x9
   12614:	ldrh	w8, [x27]
   12618:	ldur	w9, [x29, #-32]
   1261c:	add	w28, w0, w9
   12620:	mov	w0, w8
   12624:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12628:	mov	w22, w20
   1262c:	cmp	w19, w20
   12630:	add	w8, w0, w28
   12634:	stur	w8, [x29, #-92]
   12638:	b.ne	126b4 <lzma_mode_is_supported@@XZ_5.0+0x1ae8>  // b.any
   1263c:	ldr	x10, [sp, #72]
   12640:	mov	w8, #0x2c                  	// #44
   12644:	mov	w9, #0xef8                 	// #3832
   12648:	movk	w9, #0x1, lsl #16
   1264c:	madd	x8, x10, x8, x24
   12650:	add	x23, x8, x9
   12654:	ldr	w8, [x23]
   12658:	cmp	w8, w21
   1265c:	b.cs	12678 <lzma_mode_is_supported@@XZ_5.0+0x1aac>  // b.hs, b.nlast
   12660:	mov	w8, #0x2c                  	// #44
   12664:	mov	w9, #0xefc                 	// #3836
   12668:	madd	x8, x10, x8, x24
   1266c:	movk	w9, #0x1, lsl #16
   12670:	ldr	w8, [x8, x9]
   12674:	cbz	w8, 126b4 <lzma_mode_is_supported@@XZ_5.0+0x1ae8>
   12678:	ldur	w1, [x29, #-36]
   1267c:	ldur	w2, [x29, #-12]
   12680:	mov	x0, x24
   12684:	bl	133b4 <lzma_mode_is_supported@@XZ_5.0+0x27e8>
   12688:	ldur	w8, [x29, #-92]
   1268c:	ldr	w9, [x26]
   12690:	add	w8, w0, w8
   12694:	cmp	w8, w9
   12698:	b.hi	126b4 <lzma_mode_is_supported@@XZ_5.0+0x1ae8>  // b.pmore
   1269c:	mov	x0, x25
   126a0:	str	w8, [x26]
   126a4:	str	w21, [x23]
   126a8:	bl	13410 <lzma_mode_is_supported@@XZ_5.0+0x2844>
   126ac:	mov	w8, #0x1                   	// #1
   126b0:	str	w8, [sp, #84]
   126b4:	ldur	w9, [x29, #-60]
   126b8:	cmp	w9, #0x2
   126bc:	b.cc	12c5c <lzma_mode_is_supported@@XZ_5.0+0x2090>  // b.lo, b.ul, b.last
   126c0:	ldur	w10, [x29, #-56]
   126c4:	ldr	w11, [sp, #84]
   126c8:	cmp	w19, w22
   126cc:	cset	w8, eq  // eq = none
   126d0:	cmp	w9, w10
   126d4:	orr	w8, w8, w11
   126d8:	csel	w15, w9, w10, cc  // cc = lo, ul, last
   126dc:	str	w15, [sp, #84]
   126e0:	str	w28, [sp, #4]
   126e4:	str	x27, [sp, #8]
   126e8:	tbz	w8, #0, 126fc <lzma_mode_is_supported@@XZ_5.0+0x1b30>
   126ec:	ldur	x13, [x29, #-48]
   126f0:	ldur	x26, [x29, #-88]
   126f4:	ldur	w27, [x29, #-36]
   126f8:	b	12898 <lzma_mode_is_supported@@XZ_5.0+0x1ccc>
   126fc:	add	w8, w10, #0x1
   12700:	cmp	w8, w9
   12704:	csinc	w8, w9, w10, hi  // hi = pmore
   12708:	cmp	w8, #0x2
   1270c:	b.cc	12754 <lzma_mode_is_supported@@XZ_5.0+0x1b88>  // b.lo, b.ul, b.last
   12710:	ldur	x26, [x29, #-88]
   12714:	ldur	x13, [x29, #-48]
   12718:	ldur	w27, [x29, #-36]
   1271c:	mov	w23, #0x1                   	// #1
   12720:	ldr	w9, [x26]
   12724:	mvn	x9, x9
   12728:	add	x9, x9, x13
   1272c:	mov	w10, w23
   12730:	ldrb	w11, [x13, x10]
   12734:	ldrb	w10, [x9, x10]
   12738:	cmp	w11, w10
   1273c:	b.ne	12764 <lzma_mode_is_supported@@XZ_5.0+0x1b98>  // b.any
   12740:	add	w23, w23, #0x1
   12744:	cmp	w8, w23
   12748:	b.ne	1272c <lzma_mode_is_supported@@XZ_5.0+0x1b60>  // b.any
   1274c:	mov	w23, w8
   12750:	b	12764 <lzma_mode_is_supported@@XZ_5.0+0x1b98>
   12754:	ldur	x13, [x29, #-48]
   12758:	ldur	x26, [x29, #-88]
   1275c:	ldur	w27, [x29, #-36]
   12760:	mov	w23, #0x1                   	// #1
   12764:	sub	w19, w23, #0x1
   12768:	cmp	w19, #0x2
   1276c:	b.cc	12898 <lzma_mode_is_supported@@XZ_5.0+0x1ccc>  // b.lo, b.ul, b.last
   12770:	ldur	w10, [x29, #-76]
   12774:	cmp	w27, #0xa
   12778:	mov	w8, #0xfffffffa            	// #-6
   1277c:	mov	w9, #0xfffffffd            	// #-3
   12780:	ldr	w11, [x24, #2960]
   12784:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   12788:	cmp	w27, #0x4
   1278c:	add	w8, w8, w27
   12790:	add	w10, w10, #0x1
   12794:	csel	w22, wzr, w8, cc  // cc = lo, ul, last
   12798:	and	w20, w11, w10
   1279c:	add	x8, x24, x22, lsl #5
   127a0:	add	x8, x8, w20, uxtw #1
   127a4:	mov	w9, #0x6b9c                	// #27548
   127a8:	ldrh	w0, [x8, x9]
   127ac:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   127b0:	add	x8, x24, w22, uxtw #1
   127b4:	mov	w9, #0x6d1c                	// #27932
   127b8:	ldrh	w8, [x8, x9]
   127bc:	ldr	w9, [sp, #64]
   127c0:	add	w25, w0, w9
   127c4:	mov	w0, w8
   127c8:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   127cc:	ldur	w8, [x29, #-52]
   127d0:	add	w23, w23, w21
   127d4:	add	w25, w25, w0
   127d8:	cmp	w23, w8
   127dc:	b.ls	1281c <lzma_mode_is_supported@@XZ_5.0+0x1c50>  // b.plast
   127e0:	mov	w12, #0xf00                 	// #3840
   127e4:	mov	w11, w8
   127e8:	mov	w10, #0x2c                  	// #44
   127ec:	movk	w12, #0x1, lsl #16
   127f0:	umaddl	x10, w11, w10, x12
   127f4:	add	x10, x10, x24
   127f8:	mov	w8, w8
   127fc:	mov	w9, w23
   12800:	add	x10, x10, #0x20
   12804:	mov	w11, #0x40000000            	// #1073741824
   12808:	add	x8, x8, #0x1
   1280c:	cmp	x9, x8
   12810:	str	w11, [x10], #44
   12814:	b.ne	12808 <lzma_mode_is_supported@@XZ_5.0+0x1c3c>  // b.any
   12818:	stur	w8, [x29, #-52]
   1281c:	mov	x0, x24
   12820:	mov	w1, w19
   12824:	mov	w2, w22
   12828:	mov	w3, w20
   1282c:	bl	135f0 <lzma_mode_is_supported@@XZ_5.0+0x2a24>
   12830:	mov	w8, #0x2c                  	// #44
   12834:	mov	w9, #0xef4                 	// #3828
   12838:	umaddl	x8, w23, w8, x24
   1283c:	movk	w9, #0x1, lsl #16
   12840:	add	x8, x8, x9
   12844:	ldr	w10, [x8]
   12848:	add	w9, w25, w0
   1284c:	cmp	w9, w10
   12850:	b.cs	12890 <lzma_mode_is_supported@@XZ_5.0+0x1cc4>  // b.hs, b.nlast
   12854:	mov	w10, w23
   12858:	str	w9, [x8]
   1285c:	mov	w8, #0x2c                  	// #44
   12860:	madd	x8, x10, x8, x24
   12864:	ldr	x10, [sp, #72]
   12868:	mov	w9, #0xef8                 	// #3832
   1286c:	mov	w11, #0xefc                 	// #3836
   12870:	mov	w12, #0xee8                 	// #3816
   12874:	movk	w9, #0x1, lsl #16
   12878:	movk	w11, #0x1, lsl #16
   1287c:	movk	w12, #0x1, lsl #16
   12880:	mov	w13, #0x1                   	// #1
   12884:	str	w10, [x8, x9]
   12888:	str	wzr, [x8, x11]
   1288c:	strh	w13, [x8, x12]
   12890:	ldur	x13, [x29, #-48]
   12894:	ldr	w15, [sp, #84]
   12898:	mov	w11, #0xf20                 	// #3872
   1289c:	mov	w8, #0xba48                	// #47688
   128a0:	cmp	w27, #0x7
   128a4:	mov	w9, #0xb                   	// #11
   128a8:	mov	w10, #0x8                   	// #8
   128ac:	movk	w11, #0x1, lsl #16
   128b0:	mov	w12, #0x6b9c                	// #27548
   128b4:	add	x28, x24, x8
   128b8:	csel	x8, x10, x9, cc  // cc = lo, ul, last
   128bc:	add	x9, x24, x11
   128c0:	mov	w22, #0xef4                 	// #3828
   128c4:	str	x9, [sp, #40]
   128c8:	add	x9, x24, x12
   128cc:	mov	x20, xzr
   128d0:	mov	w14, #0x2                   	// #2
   128d4:	mov	w23, #0x2c                  	// #44
   128d8:	mov	w16, #0x40000000            	// #1073741824
   128dc:	movk	w22, #0x1, lsl #16
   128e0:	add	x8, x9, x8, lsl #5
   128e4:	stp	x8, x9, [sp, #24]
   128e8:	b	12904 <lzma_mode_is_supported@@XZ_5.0+0x1d38>
   128ec:	ldur	x26, [x29, #-88]
   128f0:	ldr	w15, [sp, #84]
   128f4:	mov	w16, #0x40000000            	// #1073741824
   128f8:	add	x20, x20, #0x1
   128fc:	cmp	x20, #0x4
   12900:	b.eq	12c18 <lzma_mode_is_supported@@XZ_5.0+0x204c>  // b.none
   12904:	ldr	w8, [x26, x20, lsl #2]
   12908:	ldur	x9, [x29, #-24]
   1290c:	sub	x27, x9, x8
   12910:	ldrb	w8, [x13]
   12914:	ldrb	w9, [x27]
   12918:	cmp	w8, w9
   1291c:	b.ne	128f8 <lzma_mode_is_supported@@XZ_5.0+0x1d2c>  // b.any
   12920:	ldrb	w8, [x13, #1]
   12924:	ldrb	w9, [x27, #1]
   12928:	cmp	w8, w9
   1292c:	b.ne	128f8 <lzma_mode_is_supported@@XZ_5.0+0x1d2c>  // b.any
   12930:	mov	w25, #0x2                   	// #2
   12934:	cmp	w15, #0x3
   12938:	b.cc	12960 <lzma_mode_is_supported@@XZ_5.0+0x1d94>  // b.lo, b.ul, b.last
   1293c:	mov	w8, w25
   12940:	ldrb	w9, [x13, x8]
   12944:	ldrb	w8, [x27, x8]
   12948:	cmp	w9, w8
   1294c:	b.ne	12960 <lzma_mode_is_supported@@XZ_5.0+0x1d94>  // b.any
   12950:	add	w25, w25, #0x1
   12954:	cmp	w15, w25
   12958:	b.ne	1293c <lzma_mode_is_supported@@XZ_5.0+0x1d70>  // b.any
   1295c:	mov	w25, w15
   12960:	ldur	w8, [x29, #-52]
   12964:	add	w9, w25, w21
   12968:	stur	w14, [x29, #-32]
   1296c:	stur	w9, [x29, #-72]
   12970:	cmp	w8, w9
   12974:	b.cs	129a0 <lzma_mode_is_supported@@XZ_5.0+0x1dd4>  // b.hs, b.nlast
   12978:	ldr	x11, [sp, #40]
   1297c:	mov	w10, w8
   12980:	mov	w8, w8
   12984:	mov	w9, w9
   12988:	umaddl	x10, w10, w23, x11
   1298c:	add	x8, x8, #0x1
   12990:	cmp	x9, x8
   12994:	str	w16, [x10], #44
   12998:	b.ne	1298c <lzma_mode_is_supported@@XZ_5.0+0x1dc0>  // b.any
   1299c:	stur	w8, [x29, #-52]
   129a0:	ldur	w2, [x29, #-36]
   129a4:	ldur	w3, [x29, #-12]
   129a8:	mov	x0, x24
   129ac:	mov	w1, w20
   129b0:	bl	1341c <lzma_mode_is_supported@@XZ_5.0+0x2850>
   129b4:	ldur	w8, [x29, #-92]
   129b8:	mov	w19, w25
   129bc:	add	w26, w0, w8
   129c0:	b	129d0 <lzma_mode_is_supported@@XZ_5.0+0x1e04>
   129c4:	sub	w19, w19, #0x1
   129c8:	cmp	w19, #0x1
   129cc:	b.ls	12a2c <lzma_mode_is_supported@@XZ_5.0+0x1e60>  // b.plast
   129d0:	ldur	w2, [x29, #-12]
   129d4:	mov	x0, x28
   129d8:	mov	w1, w19
   129dc:	bl	134d0 <lzma_mode_is_supported@@XZ_5.0+0x2904>
   129e0:	add	w8, w21, w19
   129e4:	umaddl	x9, w8, w23, x24
   129e8:	add	x9, x9, x22
   129ec:	ldr	w11, [x9]
   129f0:	add	w10, w0, w26
   129f4:	cmp	w10, w11
   129f8:	b.cs	129c4 <lzma_mode_is_supported@@XZ_5.0+0x1df8>  // b.hs, b.nlast
   129fc:	str	w10, [x9]
   12a00:	mov	w9, #0xef8                 	// #3832
   12a04:	madd	x8, x8, x23, x24
   12a08:	movk	w9, #0x1, lsl #16
   12a0c:	str	w21, [x8, x9]
   12a10:	mov	w9, #0xefc                 	// #3836
   12a14:	movk	w9, #0x1, lsl #16
   12a18:	str	w20, [x8, x9]
   12a1c:	mov	w9, #0xee8                 	// #3816
   12a20:	movk	w9, #0x1, lsl #16
   12a24:	strb	wzr, [x8, x9]
   12a28:	b	129c4 <lzma_mode_is_supported@@XZ_5.0+0x1df8>
   12a2c:	ldp	w10, w9, [x29, #-60]
   12a30:	ldur	w14, [x29, #-32]
   12a34:	add	w8, w25, #0x1
   12a38:	cmp	x20, #0x0
   12a3c:	add	w9, w8, w9
   12a40:	csinc	w14, w14, w25, ne  // ne = any
   12a44:	cmp	w9, w10
   12a48:	csel	w10, w10, w9, hi  // hi = pmore
   12a4c:	mov	w9, w8
   12a50:	cmp	w8, w10
   12a54:	b.cs	12a84 <lzma_mode_is_supported@@XZ_5.0+0x1eb8>  // b.hs, b.nlast
   12a58:	ldur	x13, [x29, #-48]
   12a5c:	mov	w11, w9
   12a60:	ldrb	w12, [x13, x11]
   12a64:	ldrb	w11, [x27, x11]
   12a68:	cmp	w12, w11
   12a6c:	b.ne	12a88 <lzma_mode_is_supported@@XZ_5.0+0x1ebc>  // b.any
   12a70:	add	w9, w9, #0x1
   12a74:	cmp	w9, w10
   12a78:	b.cc	12a5c <lzma_mode_is_supported@@XZ_5.0+0x1e90>  // b.lo, b.ul, b.last
   12a7c:	mov	w9, w10
   12a80:	b	12a88 <lzma_mode_is_supported@@XZ_5.0+0x1ebc>
   12a84:	ldur	x13, [x29, #-48]
   12a88:	sub	w9, w9, w8
   12a8c:	cmp	w9, #0x2
   12a90:	b.cc	128ec <lzma_mode_is_supported@@XZ_5.0+0x1d20>  // b.lo, b.ul, b.last
   12a94:	ldur	w8, [x29, #-76]
   12a98:	ldr	w10, [x24, #2960]
   12a9c:	ldur	w2, [x29, #-12]
   12aa0:	mov	x0, x28
   12aa4:	add	w8, w25, w8
   12aa8:	str	x8, [sp, #56]
   12aac:	and	x8, x10, x8
   12ab0:	mov	w1, w25
   12ab4:	stur	w14, [x29, #-32]
   12ab8:	str	x10, [sp, #64]
   12abc:	str	x8, [sp, #48]
   12ac0:	str	w9, [sp, #72]
   12ac4:	mov	x19, x13
   12ac8:	bl	134d0 <lzma_mode_is_supported@@XZ_5.0+0x2904>
   12acc:	ldr	x8, [sp, #24]
   12ad0:	ldr	x9, [sp, #48]
   12ad4:	add	w26, w0, w26
   12ad8:	ldrh	w8, [x8, x9, lsl #1]
   12adc:	mov	w0, w8
   12ae0:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   12ae4:	sub	w8, w25, #0x1
   12ae8:	mov	w9, w25
   12aec:	ldrb	w2, [x19, w8, uxtw]
   12af0:	ldrb	w5, [x19, x9]
   12af4:	ldr	x19, [sp, #56]
   12af8:	ldrb	w4, [x27, x9]
   12afc:	add	w26, w26, w0
   12b00:	mov	w3, #0x1                   	// #1
   12b04:	mov	x0, x24
   12b08:	mov	w1, w19
   12b0c:	bl	132cc <lzma_mode_is_supported@@XZ_5.0+0x2700>
   12b10:	ldr	x9, [sp, #64]
   12b14:	add	w8, w19, #0x1
   12b18:	add	w19, w26, w0
   12b1c:	and	w25, w9, w8
   12b20:	ldr	x8, [sp, #32]
   12b24:	add	x8, x8, w25, uxtw #1
   12b28:	ldrh	w8, [x8, #160]
   12b2c:	mov	w0, w8
   12b30:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12b34:	ldr	x8, [sp, #88]
   12b38:	add	w27, w19, w0
   12b3c:	ldrh	w8, [x8, #2]
   12b40:	mov	w0, w8
   12b44:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12b48:	ldur	w8, [x29, #-72]
   12b4c:	ldr	w1, [sp, #72]
   12b50:	add	w27, w27, w0
   12b54:	add	w19, w8, #0x1
   12b58:	ldur	w8, [x29, #-52]
   12b5c:	add	w26, w1, w19
   12b60:	cmp	w8, w26
   12b64:	b.cs	12b94 <lzma_mode_is_supported@@XZ_5.0+0x1fc8>  // b.hs, b.nlast
   12b68:	ldr	x11, [sp, #40]
   12b6c:	mov	w10, w8
   12b70:	mov	w8, w8
   12b74:	mov	w9, w26
   12b78:	umaddl	x10, w10, w23, x11
   12b7c:	mov	w11, #0x40000000            	// #1073741824
   12b80:	add	x8, x8, #0x1
   12b84:	cmp	x9, x8
   12b88:	str	w11, [x10], #44
   12b8c:	b.ne	12b80 <lzma_mode_is_supported@@XZ_5.0+0x1fb4>  // b.any
   12b90:	stur	w8, [x29, #-52]
   12b94:	mov	w2, #0x5                   	// #5
   12b98:	mov	x0, x24
   12b9c:	mov	w3, w25
   12ba0:	bl	135f0 <lzma_mode_is_supported@@XZ_5.0+0x2a24>
   12ba4:	umaddl	x8, w26, w23, x24
   12ba8:	add	x8, x8, x22
   12bac:	ldr	w10, [x8]
   12bb0:	add	w9, w27, w0
   12bb4:	cmp	w9, w10
   12bb8:	b.cs	12c08 <lzma_mode_is_supported@@XZ_5.0+0x203c>  // b.hs, b.nlast
   12bbc:	mov	w10, w26
   12bc0:	str	w9, [x8]
   12bc4:	mov	w9, #0xef8                 	// #3832
   12bc8:	madd	x8, x10, x23, x24
   12bcc:	movk	w9, #0x1, lsl #16
   12bd0:	str	w19, [x8, x9]
   12bd4:	mov	w9, #0xefc                 	// #3836
   12bd8:	movk	w9, #0x1, lsl #16
   12bdc:	str	wzr, [x8, x9]
   12be0:	mov	w9, #0xee8                 	// #3816
   12be4:	movk	w9, #0x1, lsl #16
   12be8:	mov	w10, #0x101                 	// #257
   12bec:	strh	w10, [x8, x9]
   12bf0:	mov	w9, #0xeec                 	// #3820
   12bf4:	movk	w9, #0x1, lsl #16
   12bf8:	str	w21, [x8, x9]
   12bfc:	mov	w9, #0xef0                 	// #3824
   12c00:	movk	w9, #0x1, lsl #16
   12c04:	str	w20, [x8, x9]
   12c08:	ldur	x13, [x29, #-48]
   12c0c:	ldur	x26, [x29, #-88]
   12c10:	ldur	w14, [x29, #-32]
   12c14:	b	128f0 <lzma_mode_is_supported@@XZ_5.0+0x1d24>
   12c18:	ldr	w19, [sp, #20]
   12c1c:	ldur	w22, [x29, #-60]
   12c20:	ldur	w28, [x29, #-80]
   12c24:	ldr	x10, [sp, #8]
   12c28:	cmp	w19, w15
   12c2c:	b.ls	12c54 <lzma_mode_is_supported@@XZ_5.0+0x2088>  // b.plast
   12c30:	mov	w28, wzr
   12c34:	add	x8, x24, w28, uxtw #3
   12c38:	ldr	w9, [x8, #756]
   12c3c:	add	w28, w28, #0x1
   12c40:	cmp	w15, w9
   12c44:	b.hi	12c34 <lzma_mode_is_supported@@XZ_5.0+0x2068>  // b.pmore
   12c48:	add	x8, x8, #0x2f4
   12c4c:	mov	w19, w15
   12c50:	str	w15, [x8]
   12c54:	cmp	w19, w14
   12c58:	b.cs	12c80 <lzma_mode_is_supported@@XZ_5.0+0x20b4>  // b.hs, b.nlast
   12c5c:	ldur	w0, [x29, #-52]
   12c60:	ldp	x20, x19, [sp, #272]
   12c64:	ldp	x22, x21, [sp, #256]
   12c68:	ldp	x24, x23, [sp, #240]
   12c6c:	ldp	x26, x25, [sp, #224]
   12c70:	ldp	x28, x27, [sp, #208]
   12c74:	ldp	x29, x30, [sp, #192]
   12c78:	add	sp, sp, #0x120
   12c7c:	ret
   12c80:	ldrh	w0, [x10]
   12c84:	mov	w20, w14
   12c88:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   12c8c:	ldur	w8, [x29, #-52]
   12c90:	add	w9, w19, w21
   12c94:	cmp	w8, w9
   12c98:	b.cs	12cd0 <lzma_mode_is_supported@@XZ_5.0+0x2104>  // b.hs, b.nlast
   12c9c:	mov	w12, w8
   12ca0:	mov	w10, #0x2c                  	// #44
   12ca4:	mov	w11, #0xf20                 	// #3872
   12ca8:	movk	w11, #0x1, lsl #16
   12cac:	umaddl	x10, w12, w10, x24
   12cb0:	mov	w8, w8
   12cb4:	mov	w9, w9
   12cb8:	add	x10, x10, x11
   12cbc:	mov	w11, #0x40000000            	// #1073741824
   12cc0:	add	x8, x8, #0x1
   12cc4:	cmp	x8, x9
   12cc8:	str	w11, [x10], #44
   12ccc:	b.cc	12cc0 <lzma_mode_is_supported@@XZ_5.0+0x20f4>  // b.lo, b.ul, b.last
   12cd0:	stur	w8, [x29, #-52]
   12cd4:	ldr	w8, [sp, #4]
   12cd8:	mov	w14, w20
   12cdc:	mov	w23, #0xffffffff            	// #-1
   12ce0:	add	w8, w0, w8
   12ce4:	stur	w8, [x29, #-72]
   12ce8:	add	w23, w23, #0x1
   12cec:	add	x8, x24, w23, uxtw #3
   12cf0:	ldr	w8, [x8, #756]
   12cf4:	cmp	w14, w8
   12cf8:	b.hi	12ce8 <lzma_mode_is_supported@@XZ_5.0+0x211c>  // b.pmore
   12cfc:	ldur	w8, [x29, #-36]
   12d00:	mov	w11, #0xf20                 	// #3872
   12d04:	mov	w9, #0xa                   	// #10
   12d08:	mov	w10, #0x7                   	// #7
   12d0c:	cmp	w8, #0x7
   12d10:	ldur	w8, [x29, #-56]
   12d14:	movk	w11, #0x1, lsl #16
   12d18:	mov	w12, #0x6b9c                	// #27548
   12d1c:	csel	x9, x10, x9, cc  // cc = lo, ul, last
   12d20:	add	x10, x24, x11
   12d24:	str	x10, [sp, #56]
   12d28:	add	x10, x24, x12
   12d2c:	add	w8, w14, w8
   12d30:	add	x9, x10, x9, lsl #5
   12d34:	stp	x9, x10, [sp, #64]
   12d38:	stur	w28, [x29, #-80]
   12d3c:	b	12d50 <lzma_mode_is_supported@@XZ_5.0+0x2184>
   12d40:	mov	w9, wzr
   12d44:	ldur	w8, [x29, #-36]
   12d48:	add	w14, w14, #0x1
   12d4c:	cbnz	w9, 12c5c <lzma_mode_is_supported@@XZ_5.0+0x2090>
   12d50:	add	x9, x24, w23, uxtw #3
   12d54:	ldr	w1, [x9, #760]
   12d58:	ldur	w3, [x29, #-12]
   12d5c:	add	w10, w8, #0x1
   12d60:	cmp	w10, w22
   12d64:	mov	x0, x24
   12d68:	mov	w2, w14
   12d6c:	stur	w10, [x29, #-36]
   12d70:	csinc	w19, w22, w8, hi  // hi = pmore
   12d74:	mov	w25, w23
   12d78:	stur	x1, [x29, #-32]
   12d7c:	mov	w20, w14
   12d80:	bl	134e8 <lzma_mode_is_supported@@XZ_5.0+0x291c>
   12d84:	mov	w11, #0x2c                  	// #44
   12d88:	add	w27, w20, w21
   12d8c:	mov	w9, #0xef4                 	// #3828
   12d90:	umaddl	x8, w27, w11, x24
   12d94:	movk	w9, #0x1, lsl #16
   12d98:	add	x8, x8, x9
   12d9c:	ldur	w10, [x29, #-72]
   12da0:	ldr	w9, [x8]
   12da4:	mov	w14, w20
   12da8:	add	w26, w10, w0
   12dac:	cmp	w26, w9
   12db0:	b.cs	12de8 <lzma_mode_is_supported@@XZ_5.0+0x221c>  // b.hs, b.nlast
   12db4:	ldur	x9, [x29, #-32]
   12db8:	mov	w10, #0xef8                 	// #3832
   12dbc:	str	w26, [x8]
   12dc0:	madd	x8, x27, x11, x24
   12dc4:	movk	w10, #0x1, lsl #16
   12dc8:	str	w21, [x8, x10]
   12dcc:	mov	w10, #0xefc                 	// #3836
   12dd0:	add	w9, w9, #0x4
   12dd4:	movk	w10, #0x1, lsl #16
   12dd8:	str	w9, [x8, x10]
   12ddc:	mov	w9, #0xee8                 	// #3816
   12de0:	movk	w9, #0x1, lsl #16
   12de4:	strb	wzr, [x8, x9]
   12de8:	add	x8, x24, x25, lsl #3
   12dec:	ldr	w8, [x8, #756]
   12df0:	ldur	x13, [x29, #-48]
   12df4:	cmp	w14, w8
   12df8:	b.ne	12d40 <lzma_mode_is_supported@@XZ_5.0+0x2174>  // b.any
   12dfc:	ldur	w9, [x29, #-56]
   12e00:	add	w8, w14, #0x1
   12e04:	add	w9, w8, w9
   12e08:	cmp	w9, w22
   12e0c:	csel	w10, w22, w9, hi  // hi = pmore
   12e10:	ldp	x11, x9, [x29, #-32]
   12e14:	cmp	w8, w10
   12e18:	sub	x28, x9, x11
   12e1c:	mov	w9, w8
   12e20:	b.cs	12e48 <lzma_mode_is_supported@@XZ_5.0+0x227c>  // b.hs, b.nlast
   12e24:	mov	w11, w9
   12e28:	ldrb	w12, [x13, x11]
   12e2c:	ldrb	w11, [x28, x11]
   12e30:	cmp	w12, w11
   12e34:	b.ne	12e48 <lzma_mode_is_supported@@XZ_5.0+0x227c>  // b.any
   12e38:	add	w9, w9, #0x1
   12e3c:	cmp	w9, w10
   12e40:	b.cc	12e24 <lzma_mode_is_supported@@XZ_5.0+0x2258>  // b.lo, b.ul, b.last
   12e44:	mov	w9, w19
   12e48:	sub	w9, w9, w8
   12e4c:	cmp	w9, #0x2
   12e50:	b.cc	12fcc <lzma_mode_is_supported@@XZ_5.0+0x2400>  // b.lo, b.ul, b.last
   12e54:	ldur	w8, [x29, #-76]
   12e58:	ldr	w10, [x24, #2960]
   12e5c:	mov	x22, x13
   12e60:	mov	w19, w14
   12e64:	add	w25, w14, w8
   12e68:	ldr	x8, [sp, #64]
   12e6c:	stur	w10, [x29, #-92]
   12e70:	and	w10, w10, w25
   12e74:	str	w10, [sp, #84]
   12e78:	ldrh	w0, [x8, w10, uxtw #1]
   12e7c:	stur	w9, [x29, #-88]
   12e80:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   12e84:	sub	w8, w19, #0x1
   12e88:	mov	w9, w19
   12e8c:	ldrb	w2, [x22, w8, uxtw]
   12e90:	ldrb	w4, [x28, x9]
   12e94:	ldrb	w5, [x22, x9]
   12e98:	add	w26, w0, w26
   12e9c:	mov	w3, #0x1                   	// #1
   12ea0:	mov	x0, x24
   12ea4:	mov	w1, w25
   12ea8:	bl	132cc <lzma_mode_is_supported@@XZ_5.0+0x2700>
   12eac:	ldr	w8, [sp, #84]
   12eb0:	ldur	w9, [x29, #-92]
   12eb4:	add	w19, w26, w0
   12eb8:	add	w8, w8, #0x1
   12ebc:	and	w25, w8, w9
   12ec0:	ldr	x8, [sp, #72]
   12ec4:	add	x8, x8, w25, uxtw #1
   12ec8:	ldrh	w8, [x8, #128]
   12ecc:	mov	w0, w8
   12ed0:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12ed4:	ldr	x8, [sp, #88]
   12ed8:	add	w19, w19, w0
   12edc:	ldrh	w8, [x8]
   12ee0:	mov	w0, w8
   12ee4:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   12ee8:	ldur	w1, [x29, #-88]
   12eec:	ldur	w8, [x29, #-52]
   12ef0:	add	w26, w27, #0x1
   12ef4:	add	w28, w19, w0
   12ef8:	add	w27, w1, w26
   12efc:	cmp	w8, w27
   12f00:	b.cs	12f34 <lzma_mode_is_supported@@XZ_5.0+0x2368>  // b.hs, b.nlast
   12f04:	ldr	x12, [sp, #56]
   12f08:	mov	w10, w8
   12f0c:	mov	w11, #0x2c                  	// #44
   12f10:	mov	w8, w8
   12f14:	mov	w9, w27
   12f18:	umaddl	x10, w10, w11, x12
   12f1c:	mov	w11, #0x40000000            	// #1073741824
   12f20:	add	x8, x8, #0x1
   12f24:	cmp	x9, x8
   12f28:	str	w11, [x10], #44
   12f2c:	b.ne	12f20 <lzma_mode_is_supported@@XZ_5.0+0x2354>  // b.any
   12f30:	stur	w8, [x29, #-52]
   12f34:	ldur	w22, [x29, #-60]
   12f38:	mov	w2, #0x4                   	// #4
   12f3c:	mov	x0, x24
   12f40:	mov	w3, w25
   12f44:	bl	135f0 <lzma_mode_is_supported@@XZ_5.0+0x2a24>
   12f48:	mov	w11, #0x2c                  	// #44
   12f4c:	mov	w9, #0xef4                 	// #3828
   12f50:	umaddl	x8, w27, w11, x24
   12f54:	movk	w9, #0x1, lsl #16
   12f58:	add	x8, x8, x9
   12f5c:	ldr	w10, [x8]
   12f60:	add	w9, w28, w0
   12f64:	cmp	w9, w10
   12f68:	b.cs	12fc0 <lzma_mode_is_supported@@XZ_5.0+0x23f4>  // b.hs, b.nlast
   12f6c:	mov	w10, w27
   12f70:	str	w9, [x8]
   12f74:	madd	x9, x10, x11, x24
   12f78:	mov	w10, #0xef8                 	// #3832
   12f7c:	movk	w10, #0x1, lsl #16
   12f80:	str	w26, [x9, x10]
   12f84:	mov	w10, #0xefc                 	// #3836
   12f88:	movk	w10, #0x1, lsl #16
   12f8c:	str	wzr, [x9, x10]
   12f90:	mov	w10, #0xee8                 	// #3816
   12f94:	ldur	x8, [x29, #-32]
   12f98:	movk	w10, #0x1, lsl #16
   12f9c:	mov	w11, #0x101                 	// #257
   12fa0:	strh	w11, [x9, x10]
   12fa4:	mov	w10, #0xeec                 	// #3820
   12fa8:	movk	w10, #0x1, lsl #16
   12fac:	str	w21, [x9, x10]
   12fb0:	mov	w10, #0xef0                 	// #3824
   12fb4:	add	w8, w8, #0x4
   12fb8:	movk	w10, #0x1, lsl #16
   12fbc:	str	w8, [x9, x10]
   12fc0:	ldur	w28, [x29, #-80]
   12fc4:	mov	w14, w20
   12fc8:	b	12fd0 <lzma_mode_is_supported@@XZ_5.0+0x2404>
   12fcc:	ldur	w28, [x29, #-80]
   12fd0:	add	w23, w23, #0x1
   12fd4:	cmp	w23, w28
   12fd8:	mov	w8, #0x22                  	// #34
   12fdc:	csel	w9, w8, wzr, eq  // eq = none
   12fe0:	b.ne	12d40 <lzma_mode_is_supported@@XZ_5.0+0x2174>  // b.any
   12fe4:	b	12d44 <lzma_mode_is_supported@@XZ_5.0+0x2178>
   12fe8:	ldr	x8, [x0]
   12fec:	ldr	w9, [x0, #24]
   12ff0:	add	x0, x8, x9
   12ff4:	ret
   12ff8:	ldr	w8, [x0, #36]
   12ffc:	ldr	w9, [x0, #24]
   13000:	sub	w0, w8, w9
   13004:	ret
   13008:	sub	sp, sp, #0x80
   1300c:	mov	w8, #0xedc                 	// #3804
   13010:	movk	w8, #0x1, lsl #16
   13014:	stp	x28, x27, [sp, #48]
   13018:	stp	x26, x25, [sp, #64]
   1301c:	stp	x24, x23, [sp, #80]
   13020:	mov	w24, #0x2c                  	// #44
   13024:	mov	w26, #0xef8                 	// #3832
   13028:	mov	w27, #0xefc                 	// #3836
   1302c:	add	x8, x0, x8
   13030:	movk	w26, #0x1, lsl #16
   13034:	movk	w27, #0x1, lsl #16
   13038:	umaddl	x9, w3, w24, x0
   1303c:	str	w3, [x8]
   13040:	stp	x20, x19, [sp, #112]
   13044:	stp	x8, x1, [sp, #8]
   13048:	ldr	w8, [x9, x26]
   1304c:	ldr	w19, [x9, x27]
   13050:	mov	w9, #0xee4                 	// #3812
   13054:	movk	w9, #0x1, lsl #16
   13058:	stp	x29, x30, [sp, #32]
   1305c:	stp	x22, x21, [sp, #96]
   13060:	add	x29, sp, #0x20
   13064:	mov	w22, w3
   13068:	mov	x21, x0
   1306c:	add	x25, x0, x9
   13070:	stur	x2, [x29, #-8]
   13074:	b	13094 <lzma_mode_is_supported@@XZ_5.0+0x24c8>
   13078:	umaddl	x9, w22, w24, x21
   1307c:	ldr	w10, [x9, x27]
   13080:	ldr	w8, [x9, x26]
   13084:	str	w19, [x9, x27]
   13088:	str	w20, [x9, x26]
   1308c:	mov	w19, w10
   13090:	cbz	w22, 13100 <lzma_mode_is_supported@@XZ_5.0+0x2534>
   13094:	mov	w10, #0xee8                 	// #3816
   13098:	umaddl	x9, w22, w24, x21
   1309c:	movk	w10, #0x1, lsl #16
   130a0:	ldrb	w9, [x9, x10]
   130a4:	mov	w20, w22
   130a8:	mov	w22, w8
   130ac:	cbz	w9, 13078 <lzma_mode_is_supported@@XZ_5.0+0x24ac>
   130b0:	umaddl	x23, w22, w24, x25
   130b4:	mov	x0, x23
   130b8:	mov	w28, w20
   130bc:	bl	1338c <lzma_mode_is_supported@@XZ_5.0+0x27c0>
   130c0:	sub	w8, w22, #0x1
   130c4:	str	w8, [x23, #20]
   130c8:	madd	x9, x28, x24, x25
   130cc:	ldrb	w9, [x9, #5]
   130d0:	cbz	w9, 13078 <lzma_mode_is_supported@@XZ_5.0+0x24ac>
   130d4:	mov	w9, #0xee4                 	// #3812
   130d8:	movk	w9, #0x1, lsl #16
   130dc:	add	x9, x21, x9
   130e0:	umaddl	x8, w8, w24, x9
   130e4:	strb	wzr, [x8, #4]
   130e8:	madd	x9, x28, x24, x9
   130ec:	ldr	w10, [x9, #8]
   130f0:	str	w10, [x8, #20]
   130f4:	ldr	w9, [x9, #12]
   130f8:	str	w9, [x8, #24]
   130fc:	b	13078 <lzma_mode_is_supported@@XZ_5.0+0x24ac>
   13100:	ldr	x10, [sp, #8]
   13104:	ldp	x20, x19, [sp, #112]
   13108:	ldp	x22, x21, [sp, #96]
   1310c:	ldp	x24, x23, [sp, #80]
   13110:	ldp	w8, w9, [x10, #28]
   13114:	ldp	x26, x25, [sp, #64]
   13118:	ldp	x28, x27, [sp, #48]
   1311c:	str	w8, [x10, #4]
   13120:	ldr	x10, [sp, #16]
   13124:	str	w8, [x10]
   13128:	ldur	x8, [x29, #-8]
   1312c:	ldp	x29, x30, [sp, #32]
   13130:	str	w9, [x8]
   13134:	add	sp, sp, #0x80
   13138:	ret
   1313c:	stp	x29, x30, [sp, #-48]!
   13140:	mov	w8, #0x1                   	// #1
   13144:	lsl	w8, w8, w1
   13148:	str	x21, [sp, #16]
   1314c:	stp	x20, x19, [sp, #32]
   13150:	mov	x20, x0
   13154:	mov	w19, wzr
   13158:	add	w21, w8, w2
   1315c:	mov	x29, sp
   13160:	and	w1, w21, #0x1
   13164:	lsr	w21, w21, #1
   13168:	lsl	w8, w21, #1
   1316c:	ldrh	w0, [x20, w8, uxtw]
   13170:	bl	1325c <lzma_mode_is_supported@@XZ_5.0+0x2690>
   13174:	cmp	w21, #0x1
   13178:	add	w19, w0, w19
   1317c:	b.ne	13160 <lzma_mode_is_supported@@XZ_5.0+0x2594>  // b.any
   13180:	mov	w0, w19
   13184:	ldp	x20, x19, [sp, #32]
   13188:	ldr	x21, [sp, #16]
   1318c:	ldp	x29, x30, [sp], #48
   13190:	ret
   13194:	lsl	w0, w0, #4
   13198:	ret
   1319c:	lsr	w8, w0, #13
   131a0:	cbnz	w8, 131b4 <lzma_mode_is_supported@@XZ_5.0+0x25e8>
   131a4:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   131a8:	ldr	x8, [x8, #4008]
   131ac:	ldrb	w0, [x8, w0, uxtw]
   131b0:	ret
   131b4:	lsr	w8, w0, #25
   131b8:	cbnz	w8, 131d8 <lzma_mode_is_supported@@XZ_5.0+0x260c>
   131bc:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   131c0:	ldr	x9, [x9, #4008]
   131c4:	mov	w8, w0
   131c8:	lsr	x8, x8, #12
   131cc:	ldrb	w8, [x9, x8]
   131d0:	add	w0, w8, #0x18
   131d4:	ret
   131d8:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   131dc:	ldr	x9, [x9, #4008]
   131e0:	mov	w8, w0
   131e4:	lsr	x8, x8, #24
   131e8:	ldrb	w8, [x9, x8]
   131ec:	add	w0, w8, #0x30
   131f0:	ret
   131f4:	stp	x29, x30, [sp, #-64]!
   131f8:	stp	x24, x23, [sp, #16]
   131fc:	stp	x22, x21, [sp, #32]
   13200:	stp	x20, x19, [sp, #48]
   13204:	mov	w21, w2
   13208:	mov	w19, w1
   1320c:	mov	x22, x0
   13210:	mov	w20, wzr
   13214:	mov	w23, #0x1                   	// #1
   13218:	mov	x29, sp
   1321c:	ldrh	w0, [x22, w23, uxtw #1]
   13220:	and	w1, w21, #0x1
   13224:	lsr	w24, w21, #1
   13228:	bl	1325c <lzma_mode_is_supported@@XZ_5.0+0x2690>
   1322c:	bfi	w21, w23, #1, #31
   13230:	subs	w19, w19, #0x1
   13234:	add	w20, w0, w20
   13238:	mov	w23, w21
   1323c:	mov	w21, w24
   13240:	b.ne	1321c <lzma_mode_is_supported@@XZ_5.0+0x2650>  // b.any
   13244:	mov	w0, w20
   13248:	ldp	x20, x19, [sp, #48]
   1324c:	ldp	x22, x21, [sp, #32]
   13250:	ldp	x24, x23, [sp, #16]
   13254:	ldp	x29, x30, [sp], #64
   13258:	ret
   1325c:	neg	w9, w1
   13260:	and	w8, w0, #0xfff0
   13264:	and	w9, w9, #0x7f0
   13268:	eor	w8, w9, w8
   1326c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   13270:	ldr	x9, [x9, #3960]
   13274:	lsr	x8, x8, #4
   13278:	ldrb	w0, [x9, x8]
   1327c:	ret
   13280:	cbz	w1, 132b4 <lzma_mode_is_supported@@XZ_5.0+0x26e8>
   13284:	stp	x29, x30, [sp, #-32]!
   13288:	stp	x20, x19, [sp, #16]
   1328c:	ldr	x8, [x0, #56]
   13290:	mov	x29, sp
   13294:	mov	w20, w1
   13298:	mov	x19, x0
   1329c:	blr	x8
   132a0:	ldr	w8, [x19, #28]
   132a4:	add	w8, w8, w20
   132a8:	str	w8, [x19, #28]
   132ac:	ldp	x20, x19, [sp, #16]
   132b0:	ldp	x29, x30, [sp], #32
   132b4:	ret
   132b8:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   132bc:	ldr	x9, [x9, #3960]
   132c0:	ubfx	x8, x0, #4, #12
   132c4:	ldrb	w0, [x9, x8]
   132c8:	ret
   132cc:	stp	x29, x30, [sp, #-64]!
   132d0:	stp	x22, x21, [sp, #32]
   132d4:	stp	x20, x19, [sp, #48]
   132d8:	ldr	w8, [x0, #2968]
   132dc:	ldr	w9, [x0, #2964]
   132e0:	mov	w10, #0x8                   	// #8
   132e4:	str	x23, [sp, #16]
   132e8:	and	w8, w8, w1
   132ec:	sub	w10, w10, w9
   132f0:	lsl	w8, w8, w9
   132f4:	lsr	w9, w2, w10
   132f8:	add	w8, w9, w8
   132fc:	mov	x29, sp
   13300:	tbz	w3, #0, 13358 <lzma_mode_is_supported@@XZ_5.0+0x278c>
   13304:	mov	w9, #0x600                 	// #1536
   13308:	mov	w19, w4
   1330c:	mov	w20, wzr
   13310:	add	w21, w5, #0x100
   13314:	mov	w22, #0x100                 	// #256
   13318:	madd	x23, x8, x9, x0
   1331c:	lsl	w19, w19, #1
   13320:	and	w8, w19, w22
   13324:	add	w9, w22, w21, lsr #8
   13328:	add	w8, w9, w8
   1332c:	add	x8, x23, w8, uxtw #1
   13330:	ldrh	w0, [x8, #2972]
   13334:	ubfx	w1, w21, #7, #1
   13338:	bl	1325c <lzma_mode_is_supported@@XZ_5.0+0x2690>
   1333c:	lsl	w21, w21, #1
   13340:	eor	w8, w21, w19
   13344:	add	w20, w0, w20
   13348:	cmp	w21, #0x10, lsl #12
   1334c:	bic	w22, w22, w8
   13350:	b.cc	1331c <lzma_mode_is_supported@@XZ_5.0+0x2750>  // b.lo, b.ul, b.last
   13354:	b	13374 <lzma_mode_is_supported@@XZ_5.0+0x27a8>
   13358:	mov	w9, #0x600                 	// #1536
   1335c:	madd	x8, x8, x9, x0
   13360:	add	x0, x8, #0xb9c
   13364:	mov	w1, #0x8                   	// #8
   13368:	mov	w2, w5
   1336c:	bl	1313c <lzma_mode_is_supported@@XZ_5.0+0x2570>
   13370:	mov	w20, w0
   13374:	mov	w0, w20
   13378:	ldp	x20, x19, [sp, #48]
   1337c:	ldp	x22, x21, [sp, #32]
   13380:	ldr	x23, [sp, #16]
   13384:	ldp	x29, x30, [sp], #64
   13388:	ret
   1338c:	mov	w8, #0xffffffff            	// #-1
   13390:	str	w8, [x0, #24]
   13394:	strb	wzr, [x0, #4]
   13398:	ret
   1339c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   133a0:	ldr	x9, [x9, #3960]
   133a4:	ubfx	w8, w0, #4, #12
   133a8:	eor	x8, x8, #0x7f
   133ac:	ldrb	w0, [x9, x8]
   133b0:	ret
   133b4:	stp	x29, x30, [sp, #-48]!
   133b8:	stp	x20, x19, [sp, #32]
   133bc:	add	x8, x0, w1, uxtw #1
   133c0:	mov	w9, #0x6d34                	// #27956
   133c4:	mov	x20, x0
   133c8:	ldrh	w0, [x8, x9]
   133cc:	str	x21, [sp, #16]
   133d0:	mov	x29, sp
   133d4:	mov	w19, w2
   133d8:	mov	w21, w1
   133dc:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   133e0:	add	x8, x20, x21, lsl #5
   133e4:	add	x8, x8, w19, uxtw #1
   133e8:	mov	w9, #0x6d7c                	// #28028
   133ec:	ldrh	w8, [x8, x9]
   133f0:	mov	w19, w0
   133f4:	mov	w0, w8
   133f8:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   133fc:	add	w0, w0, w19
   13400:	ldp	x20, x19, [sp, #32]
   13404:	ldr	x21, [sp, #16]
   13408:	ldp	x29, x30, [sp], #48
   1340c:	ret
   13410:	str	wzr, [x0, #24]
   13414:	strb	wzr, [x0, #4]
   13418:	ret
   1341c:	stp	x29, x30, [sp, #-48]!
   13420:	stp	x22, x21, [sp, #16]
   13424:	stp	x20, x19, [sp, #32]
   13428:	add	x8, x0, w2, uxtw #1
   1342c:	mov	w9, #0x6d34                	// #27956
   13430:	mov	x20, x0
   13434:	ldrh	w0, [x8, x9]
   13438:	mov	w22, w2
   1343c:	mov	x29, sp
   13440:	cbz	w1, 13474 <lzma_mode_is_supported@@XZ_5.0+0x28a8>
   13444:	mov	w19, w1
   13448:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   1344c:	add	x21, x20, x22, lsl #1
   13450:	mov	w8, #0x6d4c                	// #27980
   13454:	ldrh	w8, [x21, x8]
   13458:	cmp	w19, #0x1
   1345c:	mov	w20, w0
   13460:	mov	w0, w8
   13464:	b.ne	134a0 <lzma_mode_is_supported@@XZ_5.0+0x28d4>  // b.any
   13468:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   1346c:	add	w0, w0, w20
   13470:	b	134c0 <lzma_mode_is_supported@@XZ_5.0+0x28f4>
   13474:	mov	w21, w3
   13478:	bl	132b8 <lzma_mode_is_supported@@XZ_5.0+0x26ec>
   1347c:	add	x8, x20, x22, lsl #5
   13480:	add	x8, x8, w21, uxtw #1
   13484:	mov	w9, #0x6d7c                	// #28028
   13488:	ldrh	w8, [x8, x9]
   1348c:	mov	w19, w0
   13490:	mov	w0, w8
   13494:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   13498:	add	w0, w0, w19
   1349c:	b	134c0 <lzma_mode_is_supported@@XZ_5.0+0x28f4>
   134a0:	bl	1339c <lzma_mode_is_supported@@XZ_5.0+0x27d0>
   134a4:	mov	w8, #0x6d64                	// #28004
   134a8:	ldrh	w8, [x21, x8]
   134ac:	add	w20, w0, w20
   134b0:	sub	w1, w19, #0x2
   134b4:	mov	w0, w8
   134b8:	bl	1325c <lzma_mode_is_supported@@XZ_5.0+0x2690>
   134bc:	add	w0, w20, w0
   134c0:	ldp	x20, x19, [sp, #32]
   134c4:	ldp	x22, x21, [sp, #16]
   134c8:	ldp	x29, x30, [sp], #48
   134cc:	ret
   134d0:	mov	w9, #0x440                 	// #1088
   134d4:	sub	w8, w1, #0x2
   134d8:	umaddl	x9, w2, w9, x0
   134dc:	add	x8, x9, w8, uxtw #2
   134e0:	ldr	w0, [x8, #1028]
   134e4:	ret
   134e8:	stp	x29, x30, [sp, #-64]!
   134ec:	sub	w8, w2, #0x2
   134f0:	cmp	w2, #0x6
   134f4:	mov	w9, #0x3                   	// #3
   134f8:	str	x23, [sp, #16]
   134fc:	stp	x22, x21, [sp, #32]
   13500:	stp	x20, x19, [sp, #48]
   13504:	mov	w19, w3
   13508:	mov	w20, w2
   1350c:	mov	w22, w1
   13510:	csel	w23, w8, w9, cc  // cc = lo, ul, last
   13514:	cmp	w1, #0x7f
   13518:	mov	x21, x0
   1351c:	mov	x29, sp
   13520:	b.hi	13540 <lzma_mode_is_supported@@XZ_5.0+0x2974>  // b.pmore
   13524:	mov	w8, w23
   13528:	add	x8, x21, x8, lsl #9
   1352c:	mov	w9, #0x690                 	// #1680
   13530:	add	x8, x8, w22, uxtw #2
   13534:	movk	w9, #0x1, lsl #16
   13538:	ldr	w22, [x8, x9]
   1353c:	b	13578 <lzma_mode_is_supported@@XZ_5.0+0x29ac>
   13540:	mov	w0, w22
   13544:	bl	135a4 <lzma_mode_is_supported@@XZ_5.0+0x29d8>
   13548:	mov	w8, w23
   1354c:	mov	w9, #0x290                 	// #656
   13550:	and	w10, w22, #0xf
   13554:	mov	w11, #0xe98                 	// #3736
   13558:	add	x8, x21, x8, lsl #8
   1355c:	movk	w9, #0x1, lsl #16
   13560:	movk	w11, #0x1, lsl #16
   13564:	add	x10, x21, w10, uxtw #2
   13568:	add	x8, x8, w0, uxtw #2
   1356c:	ldr	w8, [x8, x9]
   13570:	ldr	w9, [x10, x11]
   13574:	add	w22, w9, w8
   13578:	mov	w8, #0x7200                	// #29184
   1357c:	add	x0, x21, x8
   13580:	mov	w1, w20
   13584:	mov	w2, w19
   13588:	bl	134d0 <lzma_mode_is_supported@@XZ_5.0+0x2904>
   1358c:	add	w0, w0, w22
   13590:	ldp	x20, x19, [sp, #48]
   13594:	ldp	x22, x21, [sp, #32]
   13598:	ldr	x23, [sp, #16]
   1359c:	ldp	x29, x30, [sp], #64
   135a0:	ret
   135a4:	cmp	w0, #0x0
   135a8:	mov	w8, #0x1e                  	// #30
   135ac:	mov	w9, #0x12                  	// #18
   135b0:	mov	w10, #0x3c                  	// #60
   135b4:	csel	w8, w9, w8, ge  // ge = tcont
   135b8:	mov	w9, #0x24                  	// #36
   135bc:	csel	w9, w9, w10, ge  // ge = tcont
   135c0:	mov	w10, #0x6                   	// #6
   135c4:	cmp	w0, #0x80, lsl #12
   135c8:	csel	w8, w10, w8, cc  // cc = lo, ul, last
   135cc:	adrp	x10, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   135d0:	ldr	x10, [x10, #4008]
   135d4:	mov	w11, w0
   135d8:	lsr	x8, x11, x8
   135dc:	ldrb	w8, [x10, x8]
   135e0:	mov	w10, #0xc                   	// #12
   135e4:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   135e8:	add	w0, w9, w8
   135ec:	ret
   135f0:	stp	x29, x30, [sp, #-48]!
   135f4:	mov	w8, #0xba48                	// #47688
   135f8:	stp	x22, x21, [sp, #16]
   135fc:	stp	x20, x19, [sp, #32]
   13600:	mov	w20, w2
   13604:	mov	x21, x0
   13608:	add	x0, x0, x8
   1360c:	mov	w2, w3
   13610:	mov	x29, sp
   13614:	mov	w19, w3
   13618:	bl	134d0 <lzma_mode_is_supported@@XZ_5.0+0x2904>
   1361c:	mov	w22, w0
   13620:	mov	x0, x21
   13624:	mov	w1, wzr
   13628:	mov	w2, w20
   1362c:	mov	w3, w19
   13630:	bl	1341c <lzma_mode_is_supported@@XZ_5.0+0x2850>
   13634:	add	w0, w0, w22
   13638:	ldp	x20, x19, [sp, #32]
   1363c:	ldp	x22, x21, [sp, #16]
   13640:	ldp	x29, x30, [sp], #48
   13644:	ret
   13648:	stp	x29, x30, [sp, #-48]!
   1364c:	stp	x20, x19, [sp, #32]
   13650:	ldr	x8, [x0]
   13654:	mov	x19, x3
   13658:	mov	x20, x2
   1365c:	str	x21, [sp, #16]
   13660:	mov	x29, sp
   13664:	cbnz	x8, 1369c <lzma_mode_is_supported@@XZ_5.0+0x2ad0>
   13668:	mov	x21, x0
   1366c:	mov	w0, #0x6ec0                	// #28352
   13670:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   13674:	str	x0, [x21]
   13678:	cbz	x0, 136c8 <lzma_mode_is_supported@@XZ_5.0+0x2afc>
   1367c:	adrp	x8, 13000 <lzma_mode_is_supported@@XZ_5.0+0x2434>
   13680:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   13684:	adrp	x10, 16000 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   13688:	add	x8, x8, #0x6d0
   1368c:	add	x9, x9, #0x574
   13690:	add	x10, x10, #0x820
   13694:	stp	x8, x9, [x21, #8]
   13698:	str	x10, [x21, #24]
   1369c:	ldr	w8, [x20]
   136a0:	mov	w0, wzr
   136a4:	str	x8, [x19]
   136a8:	ldr	x8, [x20, #8]
   136ac:	str	x8, [x19, #8]
   136b0:	ldr	w8, [x20, #16]
   136b4:	str	x8, [x19, #16]
   136b8:	ldp	x20, x19, [sp, #32]
   136bc:	ldr	x21, [sp, #16]
   136c0:	ldp	x29, x30, [sp], #48
   136c4:	ret
   136c8:	mov	w0, #0x5                   	// #5
   136cc:	b	136b8 <lzma_mode_is_supported@@XZ_5.0+0x2aec>
   136d0:	sub	sp, sp, #0x130
   136d4:	stp	x29, x30, [sp, #208]
   136d8:	add	x29, sp, #0xd0
   136dc:	mov	w8, #0x6e6c                	// #28268
   136e0:	stp	x22, x21, [sp, #272]
   136e4:	stp	x20, x19, [sp, #288]
   136e8:	mov	x19, x3
   136ec:	mov	x20, x1
   136f0:	stur	x0, [x29, #-80]
   136f4:	add	x0, x0, x8
   136f8:	mov	x21, x2
   136fc:	mov	x1, x2
   13700:	mov	x2, x3
   13704:	mov	x3, x4
   13708:	stp	x28, x27, [sp, #224]
   1370c:	stp	x26, x25, [sp, #240]
   13710:	stp	x24, x23, [sp, #256]
   13714:	str	x4, [sp, #104]
   13718:	bl	16a58 <lzma_mode_is_supported@@XZ_5.0+0x5e8c>
   1371c:	cmp	w0, #0x1
   13720:	b.ne	16538 <lzma_mode_is_supported@@XZ_5.0+0x596c>  // b.any
   13724:	ldp	q1, q0, [x20]
   13728:	ldr	q2, [x20, #32]
   1372c:	ldur	x11, [x29, #-80]
   13730:	mov	w8, #0x6664                	// #26212
   13734:	stp	x20, x19, [sp, #16]
   13738:	stp	q1, q0, [x29, #-64]
   1373c:	add	x16, x11, x8
   13740:	stur	q2, [x29, #-32]
   13744:	ldr	w8, [x16, #2064]
   13748:	ldr	w22, [x16, #2056]
   1374c:	ldr	w20, [x16, #2060]
   13750:	ldr	w3, [x16, #2068]
   13754:	str	w8, [sp, #12]
   13758:	ldr	w8, [x16, #2076]
   1375c:	ldr	w1, [x16, #2072]
   13760:	ldr	x15, [x11, #28328]
   13764:	ldr	w25, [x16, #2124]
   13768:	stur	w8, [x29, #-92]
   1376c:	ldr	w8, [x16, #2080]
   13770:	ldr	w10, [x16, #2128]
   13774:	ldr	w28, [x16, #2132]
   13778:	ldr	x27, [x19]
   1377c:	stur	w8, [x29, #-88]
   13780:	ldr	w8, [x16, #2084]
   13784:	stur	w10, [x29, #-96]
   13788:	ldur	x9, [x29, #-56]
   1378c:	str	w8, [sp, #68]
   13790:	ldr	w8, [x16, #2088]
   13794:	str	w8, [sp, #92]
   13798:	ldr	w8, [x16, #2136]
   1379c:	stur	w8, [x29, #-68]
   137a0:	ldr	w8, [x16, #2096]
   137a4:	ldr	x10, [x11, #28312]
   137a8:	str	x8, [sp, #48]
   137ac:	ldr	w8, [x16, #2092]
   137b0:	cmn	x10, #0x1
   137b4:	str	x8, [sp, #40]
   137b8:	b.eq	137d4 <lzma_mode_is_supported@@XZ_5.0+0x2c08>  // b.none
   137bc:	ldur	x8, [x29, #-40]
   137c0:	sub	x8, x8, x9
   137c4:	cmp	x10, x8
   137c8:	b.cs	137d4 <lzma_mode_is_supported@@XZ_5.0+0x2c08>  // b.hs, b.nlast
   137cc:	add	x8, x10, x9
   137d0:	stur	x8, [x29, #-40]
   137d4:	str	x9, [sp, #32]
   137d8:	ldr	w9, [x16, #2108]
   137dc:	ldr	x17, [sp, #104]
   137e0:	add	x8, x16, #0x83c
   137e4:	mov	x18, x21
   137e8:	cmp	w9, #0x46
   137ec:	str	x8, [sp]
   137f0:	b.hi	13820 <lzma_mode_is_supported@@XZ_5.0+0x2c54>  // b.pmore
   137f4:	stp	x18, x10, [sp, #72]
   137f8:	adrp	x10, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   137fc:	add	x10, x10, #0xe48
   13800:	adr	x8, 1388c <lzma_mode_is_supported@@XZ_5.0+0x2cc0>
   13804:	ldrh	w11, [x10, x9, lsl #1]
   13808:	add	x8, x8, x11, lsl #2
   1380c:	ldr	x9, [sp, #32]
   13810:	ldr	w10, [sp, #92]
   13814:	str	x16, [sp, #96]
   13818:	and	w2, w10, w9
   1381c:	br	x8
   13820:	mov	w26, w20
   13824:	lsr	w8, w22, #24
   13828:	cbnz	w8, 13848 <lzma_mode_is_supported@@XZ_5.0+0x2c7c>
   1382c:	cmp	x27, x17
   13830:	b.eq	13858 <lzma_mode_is_supported@@XZ_5.0+0x2c8c>  // b.none
   13834:	ldrb	w8, [x18, x27]
   13838:	add	x27, x27, #0x1
   1383c:	lsl	w22, w22, #8
   13840:	bfi	w8, w26, #8, #24
   13844:	mov	w26, w8
   13848:	mov	w0, wzr
   1384c:	mov	w8, #0x1                   	// #1
   13850:	ldr	x9, [sp]
   13854:	b	16468 <lzma_mode_is_supported@@XZ_5.0+0x589c>
   13858:	ldr	x8, [sp]
   1385c:	mov	w0, wzr
   13860:	str	wzr, [x8]
   13864:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   13868:	ldur	w8, [x29, #-56]
   1386c:	ldr	w9, [sp, #92]
   13870:	ldr	x18, [sp, #72]
   13874:	ldr	x17, [sp, #104]
   13878:	mov	w1, w0
   1387c:	and	w2, w9, w8
   13880:	mov	x15, x23
   13884:	mov	x16, x19
   13888:	mov	w3, w24
   1388c:	ldr	x9, [sp, #80]
   13890:	ldur	x8, [x29, #-56]
   13894:	cmn	x9, #0x1
   13898:	b.eq	138a8 <lzma_mode_is_supported@@XZ_5.0+0x2cdc>  // b.none
   1389c:	ldur	x9, [x29, #-40]
   138a0:	cmp	x8, x9
   138a4:	b.eq	13820 <lzma_mode_is_supported@@XZ_5.0+0x2c54>  // b.none
   138a8:	lsr	w9, w22, #24
   138ac:	cbnz	w9, 138cc <lzma_mode_is_supported@@XZ_5.0+0x2d00>
   138b0:	cmp	x27, x17
   138b4:	b.eq	16458 <lzma_mode_is_supported@@XZ_5.0+0x588c>  // b.none
   138b8:	ldrb	w26, [x18, x27]
   138bc:	lsl	w9, w22, #8
   138c0:	add	x27, x27, #0x1
   138c4:	bfi	w26, w20, #8, #24
   138c8:	b	138d4 <lzma_mode_is_supported@@XZ_5.0+0x2d08>
   138cc:	mov	w9, w22
   138d0:	mov	w26, w20
   138d4:	ldur	x11, [x29, #-80]
   138d8:	mov	w10, w3
   138dc:	lsr	w12, w9, #11
   138e0:	add	x10, x11, x10, lsl #5
   138e4:	add	x10, x10, w2, uxtw #1
   138e8:	add	x10, x10, #0x6, lsl #12
   138ec:	ldrh	w11, [x10]
   138f0:	mul	w22, w12, w11
   138f4:	subs	w20, w26, w22
   138f8:	b.cs	13d58 <lzma_mode_is_supported@@XZ_5.0+0x318c>  // b.hs, b.nlast
   138fc:	ldp	x25, x12, [sp, #40]
   13900:	mov	w9, #0x800                 	// #2048
   13904:	sub	w9, w9, w11
   13908:	mov	w23, w1
   1390c:	and	x8, x8, x12
   13910:	add	w9, w11, w9, lsr #5
   13914:	sub	x0, x29, #0x40
   13918:	mov	w1, wzr
   1391c:	mov	x21, x18
   13920:	mov	x24, x16
   13924:	strh	w9, [x10]
   13928:	mov	w20, w3
   1392c:	lsl	x19, x8, x25
   13930:	bl	16ac0 <lzma_mode_is_supported@@XZ_5.0+0x5ef4>
   13934:	mov	w9, #0x8                   	// #8
   13938:	and	w8, w0, #0xff
   1393c:	sub	w9, w9, w25
   13940:	lsr	w8, w8, w9
   13944:	ldur	x9, [x29, #-80]
   13948:	mov	w10, #0x600                 	// #1536
   1394c:	add	x8, x19, x8
   13950:	mov	w3, w20
   13954:	cmp	w20, #0x6
   13958:	madd	x15, x8, x10, x9
   1395c:	b.hi	15800 <lzma_mode_is_supported@@XZ_5.0+0x4c34>  // b.pmore
   13960:	ldr	x17, [sp, #104]
   13964:	mov	w25, #0x1                   	// #1
   13968:	mov	w20, w26
   1396c:	mov	w1, w23
   13970:	mov	x16, x24
   13974:	mov	x18, x21
   13978:	lsr	w8, w22, #24
   1397c:	cbnz	w8, 1399c <lzma_mode_is_supported@@XZ_5.0+0x2dd0>
   13980:	cmp	x27, x17
   13984:	b.eq	16130 <lzma_mode_is_supported@@XZ_5.0+0x5564>  // b.none
   13988:	ldrb	w8, [x18, x27]
   1398c:	lsl	w9, w22, #8
   13990:	add	x27, x27, #0x1
   13994:	bfi	w8, w20, #8, #24
   13998:	b	139a4 <lzma_mode_is_supported@@XZ_5.0+0x2dd8>
   1399c:	mov	w9, w22
   139a0:	mov	w8, w20
   139a4:	ldrh	w11, [x15, w25, uxtw #1]
   139a8:	lsr	w10, w9, #11
   139ac:	mul	w22, w10, w11
   139b0:	subs	w20, w8, w22
   139b4:	mov	w10, w25
   139b8:	b.cs	139f8 <lzma_mode_is_supported@@XZ_5.0+0x2e2c>  // b.hs, b.nlast
   139bc:	mov	w9, #0x800                 	// #2048
   139c0:	sub	w9, w9, w11
   139c4:	add	w9, w11, w9, lsr #5
   139c8:	lsl	w25, w25, #1
   139cc:	strh	w9, [x15, x10, lsl #1]
   139d0:	mov	w20, w8
   139d4:	lsr	w8, w22, #24
   139d8:	cbnz	w8, 13a18 <lzma_mode_is_supported@@XZ_5.0+0x2e4c>
   139dc:	cmp	x27, x17
   139e0:	b.eq	1613c <lzma_mode_is_supported@@XZ_5.0+0x5570>  // b.none
   139e4:	ldrb	w8, [x18, x27]
   139e8:	lsl	w9, w22, #8
   139ec:	add	x27, x27, #0x1
   139f0:	bfi	w8, w20, #8, #24
   139f4:	b	13a20 <lzma_mode_is_supported@@XZ_5.0+0x2e54>
   139f8:	sub	w22, w9, w22
   139fc:	mov	w9, #0x1                   	// #1
   13a00:	bfi	w9, w25, #1, #31
   13a04:	sub	w8, w11, w11, lsr #5
   13a08:	mov	w25, w9
   13a0c:	strh	w8, [x15, x10, lsl #1]
   13a10:	lsr	w8, w22, #24
   13a14:	cbz	w8, 139dc <lzma_mode_is_supported@@XZ_5.0+0x2e10>
   13a18:	mov	w9, w22
   13a1c:	mov	w8, w20
   13a20:	ldrh	w11, [x15, w25, uxtw #1]
   13a24:	lsr	w10, w9, #11
   13a28:	mul	w22, w10, w11
   13a2c:	subs	w20, w8, w22
   13a30:	mov	w10, w25
   13a34:	b.cs	13a74 <lzma_mode_is_supported@@XZ_5.0+0x2ea8>  // b.hs, b.nlast
   13a38:	mov	w9, #0x800                 	// #2048
   13a3c:	sub	w9, w9, w11
   13a40:	add	w9, w11, w9, lsr #5
   13a44:	lsl	w25, w25, #1
   13a48:	strh	w9, [x15, x10, lsl #1]
   13a4c:	mov	w20, w8
   13a50:	lsr	w8, w22, #24
   13a54:	cbnz	w8, 13a94 <lzma_mode_is_supported@@XZ_5.0+0x2ec8>
   13a58:	cmp	x27, x17
   13a5c:	b.eq	16148 <lzma_mode_is_supported@@XZ_5.0+0x557c>  // b.none
   13a60:	ldrb	w8, [x18, x27]
   13a64:	lsl	w9, w22, #8
   13a68:	add	x27, x27, #0x1
   13a6c:	bfi	w8, w20, #8, #24
   13a70:	b	13a9c <lzma_mode_is_supported@@XZ_5.0+0x2ed0>
   13a74:	sub	w22, w9, w22
   13a78:	mov	w9, #0x1                   	// #1
   13a7c:	bfi	w9, w25, #1, #31
   13a80:	sub	w8, w11, w11, lsr #5
   13a84:	mov	w25, w9
   13a88:	strh	w8, [x15, x10, lsl #1]
   13a8c:	lsr	w8, w22, #24
   13a90:	cbz	w8, 13a58 <lzma_mode_is_supported@@XZ_5.0+0x2e8c>
   13a94:	mov	w9, w22
   13a98:	mov	w8, w20
   13a9c:	ldrh	w11, [x15, w25, uxtw #1]
   13aa0:	lsr	w10, w9, #11
   13aa4:	mul	w22, w10, w11
   13aa8:	subs	w20, w8, w22
   13aac:	mov	w10, w25
   13ab0:	b.cs	13af0 <lzma_mode_is_supported@@XZ_5.0+0x2f24>  // b.hs, b.nlast
   13ab4:	mov	w9, #0x800                 	// #2048
   13ab8:	sub	w9, w9, w11
   13abc:	add	w9, w11, w9, lsr #5
   13ac0:	lsl	w25, w25, #1
   13ac4:	strh	w9, [x15, x10, lsl #1]
   13ac8:	mov	w20, w8
   13acc:	lsr	w8, w22, #24
   13ad0:	cbnz	w8, 13b10 <lzma_mode_is_supported@@XZ_5.0+0x2f44>
   13ad4:	cmp	x27, x17
   13ad8:	b.eq	16154 <lzma_mode_is_supported@@XZ_5.0+0x5588>  // b.none
   13adc:	ldrb	w8, [x18, x27]
   13ae0:	lsl	w9, w22, #8
   13ae4:	add	x27, x27, #0x1
   13ae8:	bfi	w8, w20, #8, #24
   13aec:	b	13b18 <lzma_mode_is_supported@@XZ_5.0+0x2f4c>
   13af0:	sub	w22, w9, w22
   13af4:	mov	w9, #0x1                   	// #1
   13af8:	bfi	w9, w25, #1, #31
   13afc:	sub	w8, w11, w11, lsr #5
   13b00:	mov	w25, w9
   13b04:	strh	w8, [x15, x10, lsl #1]
   13b08:	lsr	w8, w22, #24
   13b0c:	cbz	w8, 13ad4 <lzma_mode_is_supported@@XZ_5.0+0x2f08>
   13b10:	mov	w9, w22
   13b14:	mov	w8, w20
   13b18:	ldrh	w11, [x15, w25, uxtw #1]
   13b1c:	lsr	w10, w9, #11
   13b20:	mul	w22, w10, w11
   13b24:	subs	w20, w8, w22
   13b28:	mov	w10, w25
   13b2c:	b.cs	13b6c <lzma_mode_is_supported@@XZ_5.0+0x2fa0>  // b.hs, b.nlast
   13b30:	mov	w9, #0x800                 	// #2048
   13b34:	sub	w9, w9, w11
   13b38:	add	w9, w11, w9, lsr #5
   13b3c:	lsl	w25, w25, #1
   13b40:	strh	w9, [x15, x10, lsl #1]
   13b44:	mov	w20, w8
   13b48:	lsr	w8, w22, #24
   13b4c:	cbnz	w8, 13b8c <lzma_mode_is_supported@@XZ_5.0+0x2fc0>
   13b50:	cmp	x27, x17
   13b54:	b.eq	16160 <lzma_mode_is_supported@@XZ_5.0+0x5594>  // b.none
   13b58:	ldrb	w8, [x18, x27]
   13b5c:	lsl	w9, w22, #8
   13b60:	add	x27, x27, #0x1
   13b64:	bfi	w8, w20, #8, #24
   13b68:	b	13b94 <lzma_mode_is_supported@@XZ_5.0+0x2fc8>
   13b6c:	sub	w22, w9, w22
   13b70:	mov	w9, #0x1                   	// #1
   13b74:	bfi	w9, w25, #1, #31
   13b78:	sub	w8, w11, w11, lsr #5
   13b7c:	mov	w25, w9
   13b80:	strh	w8, [x15, x10, lsl #1]
   13b84:	lsr	w8, w22, #24
   13b88:	cbz	w8, 13b50 <lzma_mode_is_supported@@XZ_5.0+0x2f84>
   13b8c:	mov	w9, w22
   13b90:	mov	w8, w20
   13b94:	ldrh	w11, [x15, w25, uxtw #1]
   13b98:	lsr	w10, w9, #11
   13b9c:	mul	w22, w10, w11
   13ba0:	subs	w20, w8, w22
   13ba4:	mov	w10, w25
   13ba8:	b.cs	13be8 <lzma_mode_is_supported@@XZ_5.0+0x301c>  // b.hs, b.nlast
   13bac:	mov	w9, #0x800                 	// #2048
   13bb0:	sub	w9, w9, w11
   13bb4:	add	w9, w11, w9, lsr #5
   13bb8:	lsl	w25, w25, #1
   13bbc:	strh	w9, [x15, x10, lsl #1]
   13bc0:	mov	w20, w8
   13bc4:	lsr	w8, w22, #24
   13bc8:	cbnz	w8, 13c08 <lzma_mode_is_supported@@XZ_5.0+0x303c>
   13bcc:	cmp	x27, x17
   13bd0:	b.eq	1616c <lzma_mode_is_supported@@XZ_5.0+0x55a0>  // b.none
   13bd4:	ldrb	w8, [x18, x27]
   13bd8:	lsl	w9, w22, #8
   13bdc:	add	x27, x27, #0x1
   13be0:	bfi	w8, w20, #8, #24
   13be4:	b	13c10 <lzma_mode_is_supported@@XZ_5.0+0x3044>
   13be8:	sub	w22, w9, w22
   13bec:	mov	w9, #0x1                   	// #1
   13bf0:	bfi	w9, w25, #1, #31
   13bf4:	sub	w8, w11, w11, lsr #5
   13bf8:	mov	w25, w9
   13bfc:	strh	w8, [x15, x10, lsl #1]
   13c00:	lsr	w8, w22, #24
   13c04:	cbz	w8, 13bcc <lzma_mode_is_supported@@XZ_5.0+0x3000>
   13c08:	mov	w9, w22
   13c0c:	mov	w8, w20
   13c10:	ldrh	w11, [x15, w25, uxtw #1]
   13c14:	lsr	w10, w9, #11
   13c18:	mul	w22, w10, w11
   13c1c:	subs	w20, w8, w22
   13c20:	mov	w10, w25
   13c24:	b.cs	13c64 <lzma_mode_is_supported@@XZ_5.0+0x3098>  // b.hs, b.nlast
   13c28:	mov	w9, #0x800                 	// #2048
   13c2c:	sub	w9, w9, w11
   13c30:	add	w9, w11, w9, lsr #5
   13c34:	lsl	w25, w25, #1
   13c38:	strh	w9, [x15, x10, lsl #1]
   13c3c:	mov	w20, w8
   13c40:	lsr	w8, w22, #24
   13c44:	cbnz	w8, 13c84 <lzma_mode_is_supported@@XZ_5.0+0x30b8>
   13c48:	cmp	x27, x17
   13c4c:	b.eq	16178 <lzma_mode_is_supported@@XZ_5.0+0x55ac>  // b.none
   13c50:	ldrb	w8, [x18, x27]
   13c54:	lsl	w9, w22, #8
   13c58:	add	x27, x27, #0x1
   13c5c:	bfi	w8, w20, #8, #24
   13c60:	b	13c8c <lzma_mode_is_supported@@XZ_5.0+0x30c0>
   13c64:	sub	w22, w9, w22
   13c68:	mov	w9, #0x1                   	// #1
   13c6c:	bfi	w9, w25, #1, #31
   13c70:	sub	w8, w11, w11, lsr #5
   13c74:	mov	w25, w9
   13c78:	strh	w8, [x15, x10, lsl #1]
   13c7c:	lsr	w8, w22, #24
   13c80:	cbz	w8, 13c48 <lzma_mode_is_supported@@XZ_5.0+0x307c>
   13c84:	mov	w9, w22
   13c88:	mov	w8, w20
   13c8c:	ldrh	w11, [x15, w25, uxtw #1]
   13c90:	lsr	w10, w9, #11
   13c94:	mul	w22, w10, w11
   13c98:	subs	w20, w8, w22
   13c9c:	mov	w10, w25
   13ca0:	b.cs	13ce0 <lzma_mode_is_supported@@XZ_5.0+0x3114>  // b.hs, b.nlast
   13ca4:	mov	w9, #0x800                 	// #2048
   13ca8:	sub	w9, w9, w11
   13cac:	add	w9, w11, w9, lsr #5
   13cb0:	lsl	w25, w25, #1
   13cb4:	strh	w9, [x15, x10, lsl #1]
   13cb8:	mov	w20, w8
   13cbc:	lsr	w8, w22, #24
   13cc0:	cbnz	w8, 13d00 <lzma_mode_is_supported@@XZ_5.0+0x3134>
   13cc4:	cmp	x27, x17
   13cc8:	b.eq	16184 <lzma_mode_is_supported@@XZ_5.0+0x55b8>  // b.none
   13ccc:	ldrb	w8, [x18, x27]
   13cd0:	lsl	w9, w22, #8
   13cd4:	add	x27, x27, #0x1
   13cd8:	bfi	w8, w20, #8, #24
   13cdc:	b	13d08 <lzma_mode_is_supported@@XZ_5.0+0x313c>
   13ce0:	sub	w22, w9, w22
   13ce4:	mov	w9, #0x1                   	// #1
   13ce8:	bfi	w9, w25, #1, #31
   13cec:	sub	w8, w11, w11, lsr #5
   13cf0:	mov	w25, w9
   13cf4:	strh	w8, [x15, x10, lsl #1]
   13cf8:	lsr	w8, w22, #24
   13cfc:	cbz	w8, 13cc4 <lzma_mode_is_supported@@XZ_5.0+0x30f8>
   13d00:	mov	w9, w22
   13d04:	mov	w8, w20
   13d08:	ldrh	w10, [x15, w25, uxtw #1]
   13d0c:	lsr	w11, w9, #11
   13d10:	mov	w12, w25
   13d14:	mul	w22, w11, w10
   13d18:	subs	w11, w8, w22
   13d1c:	b.cs	13d3c <lzma_mode_is_supported@@XZ_5.0+0x3170>  // b.hs, b.nlast
   13d20:	mov	w9, #0x800                 	// #2048
   13d24:	sub	w9, w9, w10
   13d28:	add	w9, w10, w9, lsr #5
   13d2c:	strh	w9, [x15, x12, lsl #1]
   13d30:	lsl	w10, w25, #1
   13d34:	mov	w9, w28
   13d38:	b	15d10 <lzma_mode_is_supported@@XZ_5.0+0x5144>
   13d3c:	sub	w8, w10, w10, lsr #5
   13d40:	mov	w10, #0x1                   	// #1
   13d44:	sub	w22, w9, w22
   13d48:	strh	w8, [x15, x12, lsl #1]
   13d4c:	bfi	w10, w25, #1, #31
   13d50:	mov	w9, w28
   13d54:	b	15d0c <lzma_mode_is_supported@@XZ_5.0+0x5140>
   13d58:	sub	w22, w9, w22
   13d5c:	sub	w8, w11, w11, lsr #5
   13d60:	strh	w8, [x10]
   13d64:	ldur	x24, [x29, #-80]
   13d68:	ldp	w9, w16, [x29, #-92]
   13d6c:	lsr	w8, w22, #24
   13d70:	stp	w9, w3, [x29, #-88]
   13d74:	cbnz	w8, 13d94 <lzma_mode_is_supported@@XZ_5.0+0x31c8>
   13d78:	cmp	x27, x17
   13d7c:	b.eq	16190 <lzma_mode_is_supported@@XZ_5.0+0x55c4>  // b.none
   13d80:	ldrb	w8, [x18, x27]
   13d84:	lsl	w10, w22, #8
   13d88:	add	x27, x27, #0x1
   13d8c:	bfi	w8, w20, #8, #24
   13d90:	b	13d9c <lzma_mode_is_supported@@XZ_5.0+0x31d0>
   13d94:	mov	w10, w22
   13d98:	mov	w8, w20
   13d9c:	ldur	w13, [x29, #-84]
   13da0:	mov	w9, #0x6180                	// #24960
   13da4:	add	x9, x24, x9
   13da8:	lsr	w12, w10, #11
   13dac:	ldrh	w11, [x9, w13, uxtw #1]
   13db0:	mul	w22, w12, w11
   13db4:	subs	w26, w8, w22
   13db8:	mov	w12, w13
   13dbc:	b.cs	13ed8 <lzma_mode_is_supported@@XZ_5.0+0x330c>  // b.hs, b.nlast
   13dc0:	str	w16, [sp, #68]
   13dc4:	ldr	x16, [sp, #96]
   13dc8:	mov	w10, #0x800                 	// #2048
   13dcc:	cmp	w13, #0x7
   13dd0:	mov	w13, #0xa                   	// #10
   13dd4:	mov	w14, #0x7                   	// #7
   13dd8:	sub	w10, w10, w11
   13ddc:	csel	w3, w14, w13, cc  // cc = lo, ul, last
   13de0:	add	w10, w11, w10, lsr #5
   13de4:	mov	w25, #0x1                   	// #1
   13de8:	mov	w20, w8
   13dec:	stur	w1, [x29, #-92]
   13df0:	strh	w10, [x9, x12, lsl #1]
   13df4:	lsr	w8, w22, #24
   13df8:	cbnz	w8, 13e18 <lzma_mode_is_supported@@XZ_5.0+0x324c>
   13dfc:	cmp	x27, x17
   13e00:	b.eq	161b4 <lzma_mode_is_supported@@XZ_5.0+0x55e8>  // b.none
   13e04:	ldrb	w8, [x18, x27]
   13e08:	lsl	w9, w22, #8
   13e0c:	add	x27, x27, #0x1
   13e10:	bfi	w8, w20, #8, #24
   13e14:	b	13e20 <lzma_mode_is_supported@@XZ_5.0+0x3254>
   13e18:	mov	w9, w22
   13e1c:	mov	w8, w20
   13e20:	ldrh	w10, [x16]
   13e24:	lsr	w11, w9, #11
   13e28:	mul	w22, w11, w10
   13e2c:	subs	w20, w8, w22
   13e30:	b.cs	140cc <lzma_mode_is_supported@@XZ_5.0+0x3500>  // b.hs, b.nlast
   13e34:	mov	w9, #0x800                 	// #2048
   13e38:	sub	w9, w9, w10
   13e3c:	add	w9, w10, w9, lsr #5
   13e40:	mov	w20, w8
   13e44:	strh	w9, [x16]
   13e48:	lsr	w8, w22, #24
   13e4c:	cbnz	w8, 13e6c <lzma_mode_is_supported@@XZ_5.0+0x32a0>
   13e50:	cmp	x27, x17
   13e54:	b.eq	161c0 <lzma_mode_is_supported@@XZ_5.0+0x55f4>  // b.none
   13e58:	ldrb	w8, [x18, x27]
   13e5c:	lsl	w22, w22, #8
   13e60:	add	x27, x27, #0x1
   13e64:	bfi	w8, w20, #8, #24
   13e68:	b	13e70 <lzma_mode_is_supported@@XZ_5.0+0x32a4>
   13e6c:	mov	w8, w20
   13e70:	ldur	x9, [x29, #-80]
   13e74:	mov	w10, #0x6668                	// #26216
   13e78:	add	x9, x9, w2, uxtw #4
   13e7c:	add	x9, x9, w25, uxtw #1
   13e80:	add	x10, x9, x10
   13e84:	ldrh	w11, [x10]
   13e88:	lsr	w9, w22, #11
   13e8c:	mul	w9, w9, w11
   13e90:	subs	w20, w8, w9
   13e94:	b.cs	143f4 <lzma_mode_is_supported@@XZ_5.0+0x3828>  // b.hs, b.nlast
   13e98:	mov	w12, #0x800                 	// #2048
   13e9c:	sub	w12, w12, w11
   13ea0:	add	w11, w11, w12, lsr #5
   13ea4:	lsl	w25, w25, #1
   13ea8:	strh	w11, [x10]
   13eac:	mov	w22, w9
   13eb0:	mov	w20, w8
   13eb4:	lsr	w8, w22, #24
   13eb8:	cbnz	w8, 14414 <lzma_mode_is_supported@@XZ_5.0+0x3848>
   13ebc:	cmp	x27, x17
   13ec0:	b.eq	161cc <lzma_mode_is_supported@@XZ_5.0+0x5600>  // b.none
   13ec4:	ldrb	w8, [x18, x27]
   13ec8:	lsl	w22, w22, #8
   13ecc:	add	x27, x27, #0x1
   13ed0:	bfi	w8, w20, #8, #24
   13ed4:	b	14418 <lzma_mode_is_supported@@XZ_5.0+0x384c>
   13ed8:	mov	w21, w1
   13edc:	sub	w8, w11, w11, lsr #5
   13ee0:	sub	x0, x29, #0x40
   13ee4:	mov	x1, xzr
   13ee8:	mov	w20, w16
   13eec:	mov	w19, w2
   13ef0:	mov	x23, x18
   13ef4:	str	x15, [sp, #56]
   13ef8:	sub	w22, w10, w22
   13efc:	strh	w8, [x9, x12, lsl #1]
   13f00:	bl	16b30 <lzma_mode_is_supported@@XZ_5.0+0x5f64>
   13f04:	tbz	w0, #0, 1643c <lzma_mode_is_supported@@XZ_5.0+0x5870>
   13f08:	ldp	w8, w3, [x29, #-88]
   13f0c:	ldp	x16, x17, [sp, #96]
   13f10:	ldr	x15, [sp, #56]
   13f14:	mov	w1, w21
   13f18:	stp	w8, w20, [x29, #-92]
   13f1c:	mov	w20, w26
   13f20:	mov	x18, x23
   13f24:	mov	w2, w19
   13f28:	lsr	w8, w22, #24
   13f2c:	cbnz	w8, 13f4c <lzma_mode_is_supported@@XZ_5.0+0x3380>
   13f30:	cmp	x27, x17
   13f34:	b.eq	161d8 <lzma_mode_is_supported@@XZ_5.0+0x560c>  // b.none
   13f38:	ldrb	w8, [x18, x27]
   13f3c:	lsl	w22, w22, #8
   13f40:	add	x27, x27, #0x1
   13f44:	bfi	w8, w20, #8, #24
   13f48:	b	13f50 <lzma_mode_is_supported@@XZ_5.0+0x3384>
   13f4c:	mov	w8, w20
   13f50:	ldur	x10, [x29, #-80]
   13f54:	mov	w9, #0x6198                	// #24984
   13f58:	mov	w12, w3
   13f5c:	add	x10, x10, x9
   13f60:	ldrh	w11, [x10, w3, uxtw #1]
   13f64:	lsr	w9, w22, #11
   13f68:	mul	w9, w9, w11
   13f6c:	subs	w20, w8, w9
   13f70:	b.cs	1403c <lzma_mode_is_supported@@XZ_5.0+0x3470>  // b.hs, b.nlast
   13f74:	mov	w13, #0x800                 	// #2048
   13f78:	sub	w13, w13, w11
   13f7c:	add	w11, w11, w13, lsr #5
   13f80:	mov	w22, w9
   13f84:	mov	w20, w8
   13f88:	strh	w11, [x10, x12, lsl #1]
   13f8c:	lsr	w8, w22, #24
   13f90:	cbnz	w8, 13fb0 <lzma_mode_is_supported@@XZ_5.0+0x33e4>
   13f94:	cmp	x27, x17
   13f98:	b.eq	161e4 <lzma_mode_is_supported@@XZ_5.0+0x5618>  // b.none
   13f9c:	ldrb	w9, [x18, x27]
   13fa0:	lsl	w22, w22, #8
   13fa4:	add	x27, x27, #0x1
   13fa8:	bfi	w9, w20, #8, #24
   13fac:	b	13fb4 <lzma_mode_is_supported@@XZ_5.0+0x33e8>
   13fb0:	mov	w9, w20
   13fb4:	ldur	x10, [x29, #-80]
   13fb8:	mov	w8, w3
   13fbc:	add	x8, x10, x8, lsl #5
   13fc0:	add	x8, x8, w2, uxtw #1
   13fc4:	mov	w10, #0x61e0                	// #25056
   13fc8:	add	x11, x8, x10
   13fcc:	ldrh	w12, [x11]
   13fd0:	lsr	w8, w22, #11
   13fd4:	mul	w10, w8, w12
   13fd8:	subs	w8, w9, w10
   13fdc:	b.cs	140b4 <lzma_mode_is_supported@@XZ_5.0+0x34e8>  // b.hs, b.nlast
   13fe0:	mov	w8, #0x800                 	// #2048
   13fe4:	cmp	w3, #0x7
   13fe8:	mov	w13, #0xb                   	// #11
   13fec:	mov	w14, #0x9                   	// #9
   13ff0:	sub	w8, w8, w12
   13ff4:	add	w8, w12, w8, lsr #5
   13ff8:	csel	w3, w14, w13, cc  // cc = lo, ul, last
   13ffc:	mov	w22, w10
   14000:	mov	w20, w9
   14004:	strh	w8, [x11]
   14008:	sub	x0, x29, #0x40
   1400c:	mov	w24, w3
   14010:	mov	x19, x16
   14014:	mov	x23, x15
   14018:	mov	w26, w1
   1401c:	bl	16ac0 <lzma_mode_is_supported@@XZ_5.0+0x5ef4>
   14020:	mov	w1, w0
   14024:	sub	x0, x29, #0x40
   14028:	bl	16af0 <lzma_mode_is_supported@@XZ_5.0+0x5f24>
   1402c:	mov	w1, w26
   14030:	tbnz	w0, #0, 160e4 <lzma_mode_is_supported@@XZ_5.0+0x5518>
   14034:	mov	w0, w1
   14038:	b	13868 <lzma_mode_is_supported@@XZ_5.0+0x2c9c>
   1403c:	sub	w22, w22, w9
   14040:	sub	w8, w11, w11, lsr #5
   14044:	strh	w8, [x10, x12, lsl #1]
   14048:	lsr	w8, w22, #24
   1404c:	cbnz	w8, 1406c <lzma_mode_is_supported@@XZ_5.0+0x34a0>
   14050:	cmp	x27, x17
   14054:	b.eq	161f0 <lzma_mode_is_supported@@XZ_5.0+0x5624>  // b.none
   14058:	ldrb	w8, [x18, x27]
   1405c:	lsl	w9, w22, #8
   14060:	add	x27, x27, #0x1
   14064:	bfi	w8, w20, #8, #24
   14068:	b	14074 <lzma_mode_is_supported@@XZ_5.0+0x34a8>
   1406c:	mov	w9, w22
   14070:	mov	w8, w20
   14074:	ldur	x11, [x29, #-80]
   14078:	mov	w10, #0x61b0                	// #25008
   1407c:	lsr	w12, w9, #11
   14080:	add	x10, x11, x10
   14084:	ldrh	w11, [x10, w3, uxtw #1]
   14088:	mul	w22, w12, w11
   1408c:	subs	w20, w8, w22
   14090:	mov	w12, w3
   14094:	b.cs	144ec <lzma_mode_is_supported@@XZ_5.0+0x3920>  // b.hs, b.nlast
   14098:	mov	w9, #0x800                 	// #2048
   1409c:	sub	w9, w9, w11
   140a0:	add	w9, w11, w9, lsr #5
   140a4:	strh	w9, [x10, x12, lsl #1]
   140a8:	ldp	w0, w9, [x29, #-92]
   140ac:	mov	w11, w1
   140b0:	b	14588 <lzma_mode_is_supported@@XZ_5.0+0x39bc>
   140b4:	sub	w9, w12, w12, lsr #5
   140b8:	strh	w9, [x11]
   140bc:	ldp	w11, w9, [x29, #-92]
   140c0:	sub	w22, w22, w10
   140c4:	mov	w0, w1
   140c8:	b	14588 <lzma_mode_is_supported@@XZ_5.0+0x39bc>
   140cc:	sub	w22, w9, w22
   140d0:	sub	w8, w10, w10, lsr #5
   140d4:	strh	w8, [x16]
   140d8:	lsr	w8, w22, #24
   140dc:	cbnz	w8, 140fc <lzma_mode_is_supported@@XZ_5.0+0x3530>
   140e0:	cmp	x27, x17
   140e4:	b.eq	161fc <lzma_mode_is_supported@@XZ_5.0+0x5630>  // b.none
   140e8:	ldrb	w8, [x18, x27]
   140ec:	lsl	w9, w22, #8
   140f0:	add	x27, x27, #0x1
   140f4:	bfi	w8, w20, #8, #24
   140f8:	b	14104 <lzma_mode_is_supported@@XZ_5.0+0x3538>
   140fc:	mov	w9, w22
   14100:	mov	w8, w20
   14104:	ldrh	w10, [x16, #2]
   14108:	lsr	w11, w9, #11
   1410c:	mul	w22, w11, w10
   14110:	subs	w20, w8, w22
   14114:	b.cs	141bc <lzma_mode_is_supported@@XZ_5.0+0x35f0>  // b.hs, b.nlast
   14118:	mov	w9, #0x800                 	// #2048
   1411c:	sub	w9, w9, w10
   14120:	add	w9, w10, w9, lsr #5
   14124:	mov	w20, w8
   14128:	strh	w9, [x16, #2]
   1412c:	lsr	w8, w22, #24
   14130:	cbnz	w8, 14150 <lzma_mode_is_supported@@XZ_5.0+0x3584>
   14134:	cmp	x27, x17
   14138:	b.eq	16208 <lzma_mode_is_supported@@XZ_5.0+0x563c>  // b.none
   1413c:	ldrb	w8, [x18, x27]
   14140:	lsl	w22, w22, #8
   14144:	add	x27, x27, #0x1
   14148:	bfi	w8, w20, #8, #24
   1414c:	b	14154 <lzma_mode_is_supported@@XZ_5.0+0x3588>
   14150:	mov	w8, w20
   14154:	ldur	x9, [x29, #-80]
   14158:	mov	w10, #0x6768                	// #26472
   1415c:	add	x9, x9, w2, uxtw #4
   14160:	add	x9, x9, w25, uxtw #1
   14164:	add	x10, x9, x10
   14168:	ldrh	w11, [x10]
   1416c:	lsr	w9, w22, #11
   14170:	mul	w9, w9, w11
   14174:	subs	w20, w8, w9
   14178:	b.cs	14254 <lzma_mode_is_supported@@XZ_5.0+0x3688>  // b.hs, b.nlast
   1417c:	mov	w12, #0x800                 	// #2048
   14180:	sub	w12, w12, w11
   14184:	add	w11, w11, w12, lsr #5
   14188:	lsl	w25, w25, #1
   1418c:	strh	w11, [x10]
   14190:	mov	w22, w9
   14194:	mov	w20, w8
   14198:	lsr	w8, w22, #24
   1419c:	cbnz	w8, 14274 <lzma_mode_is_supported@@XZ_5.0+0x36a8>
   141a0:	cmp	x27, x17
   141a4:	b.eq	16214 <lzma_mode_is_supported@@XZ_5.0+0x5648>  // b.none
   141a8:	ldrb	w8, [x18, x27]
   141ac:	lsl	w22, w22, #8
   141b0:	add	x27, x27, #0x1
   141b4:	bfi	w8, w20, #8, #24
   141b8:	b	14278 <lzma_mode_is_supported@@XZ_5.0+0x36ac>
   141bc:	sub	w22, w9, w22
   141c0:	sub	w8, w10, w10, lsr #5
   141c4:	strh	w8, [x16, #2]
   141c8:	lsr	w8, w22, #24
   141cc:	cbnz	w8, 141ec <lzma_mode_is_supported@@XZ_5.0+0x3620>
   141d0:	cmp	x27, x17
   141d4:	b.eq	16220 <lzma_mode_is_supported@@XZ_5.0+0x5654>  // b.none
   141d8:	ldrb	w8, [x18, x27]
   141dc:	lsl	w22, w22, #8
   141e0:	add	x27, x27, #0x1
   141e4:	bfi	w8, w20, #8, #24
   141e8:	b	141f0 <lzma_mode_is_supported@@XZ_5.0+0x3624>
   141ec:	mov	w8, w20
   141f0:	ldur	x10, [x29, #-80]
   141f4:	mov	w9, #0x6868                	// #26728
   141f8:	mov	w11, w25
   141fc:	add	x9, x10, x9
   14200:	ldrh	w12, [x9, w25, uxtw #1]
   14204:	lsr	w10, w22, #11
   14208:	mul	w10, w10, w12
   1420c:	subs	w20, w8, w10
   14210:	b.cs	142e0 <lzma_mode_is_supported@@XZ_5.0+0x3714>  // b.hs, b.nlast
   14214:	mov	w13, #0x800                 	// #2048
   14218:	sub	w13, w13, w12
   1421c:	add	w12, w12, w13, lsr #5
   14220:	lsl	w25, w25, #1
   14224:	strh	w12, [x9, x11, lsl #1]
   14228:	mov	w22, w10
   1422c:	mov	w20, w8
   14230:	lsr	w8, w22, #24
   14234:	cbnz	w8, 14300 <lzma_mode_is_supported@@XZ_5.0+0x3734>
   14238:	cmp	x27, x17
   1423c:	b.eq	1622c <lzma_mode_is_supported@@XZ_5.0+0x5660>  // b.none
   14240:	ldrb	w8, [x18, x27]
   14244:	lsl	w22, w22, #8
   14248:	add	x27, x27, #0x1
   1424c:	bfi	w8, w20, #8, #24
   14250:	b	14304 <lzma_mode_is_supported@@XZ_5.0+0x3738>
   14254:	sub	w22, w22, w9
   14258:	mov	w9, #0x1                   	// #1
   1425c:	bfi	w9, w25, #1, #31
   14260:	sub	w8, w11, w11, lsr #5
   14264:	mov	w25, w9
   14268:	strh	w8, [x10]
   1426c:	lsr	w8, w22, #24
   14270:	cbz	w8, 141a0 <lzma_mode_is_supported@@XZ_5.0+0x35d4>
   14274:	mov	w8, w20
   14278:	ldur	x9, [x29, #-80]
   1427c:	mov	w10, #0x6768                	// #26472
   14280:	add	x9, x9, w2, uxtw #4
   14284:	add	x9, x9, w25, uxtw #1
   14288:	add	x10, x9, x10
   1428c:	ldrh	w11, [x10]
   14290:	lsr	w9, w22, #11
   14294:	mul	w9, w9, w11
   14298:	subs	w20, w8, w9
   1429c:	b.cs	14368 <lzma_mode_is_supported@@XZ_5.0+0x379c>  // b.hs, b.nlast
   142a0:	mov	w12, #0x800                 	// #2048
   142a4:	sub	w12, w12, w11
   142a8:	add	w11, w11, w12, lsr #5
   142ac:	lsl	w25, w25, #1
   142b0:	strh	w11, [x10]
   142b4:	mov	w22, w9
   142b8:	mov	w20, w8
   142bc:	lsr	w8, w22, #24
   142c0:	cbnz	w8, 14388 <lzma_mode_is_supported@@XZ_5.0+0x37bc>
   142c4:	cmp	x27, x17
   142c8:	b.eq	16238 <lzma_mode_is_supported@@XZ_5.0+0x566c>  // b.none
   142cc:	ldrb	w8, [x18, x27]
   142d0:	lsl	w9, w22, #8
   142d4:	add	x27, x27, #0x1
   142d8:	bfi	w8, w20, #8, #24
   142dc:	b	14390 <lzma_mode_is_supported@@XZ_5.0+0x37c4>
   142e0:	sub	w22, w22, w10
   142e4:	mov	w10, #0x1                   	// #1
   142e8:	bfi	w10, w25, #1, #31
   142ec:	sub	w8, w12, w12, lsr #5
   142f0:	mov	w25, w10
   142f4:	strh	w8, [x9, x11, lsl #1]
   142f8:	lsr	w8, w22, #24
   142fc:	cbz	w8, 14238 <lzma_mode_is_supported@@XZ_5.0+0x366c>
   14300:	mov	w8, w20
   14304:	ldur	x10, [x29, #-80]
   14308:	mov	w9, #0x6868                	// #26728
   1430c:	mov	w11, w25
   14310:	add	x9, x10, x9
   14314:	ldrh	w12, [x9, w25, uxtw #1]
   14318:	lsr	w10, w22, #11
   1431c:	mul	w10, w10, w12
   14320:	subs	w20, w8, w10
   14324:	b.cs	147a4 <lzma_mode_is_supported@@XZ_5.0+0x3bd8>  // b.hs, b.nlast
   14328:	mov	w13, #0x800                 	// #2048
   1432c:	sub	w13, w13, w12
   14330:	add	w12, w12, w13, lsr #5
   14334:	lsl	w25, w25, #1
   14338:	strh	w12, [x9, x11, lsl #1]
   1433c:	mov	w22, w10
   14340:	mov	w20, w8
   14344:	lsr	w8, w22, #24
   14348:	cbnz	w8, 147c4 <lzma_mode_is_supported@@XZ_5.0+0x3bf8>
   1434c:	cmp	x27, x17
   14350:	b.eq	16244 <lzma_mode_is_supported@@XZ_5.0+0x5678>  // b.none
   14354:	ldrb	w8, [x18, x27]
   14358:	lsl	w22, w22, #8
   1435c:	add	x27, x27, #0x1
   14360:	bfi	w8, w20, #8, #24
   14364:	b	147c8 <lzma_mode_is_supported@@XZ_5.0+0x3bfc>
   14368:	sub	w22, w22, w9
   1436c:	mov	w9, #0x1                   	// #1
   14370:	bfi	w9, w25, #1, #31
   14374:	sub	w8, w11, w11, lsr #5
   14378:	mov	w25, w9
   1437c:	strh	w8, [x10]
   14380:	lsr	w8, w22, #24
   14384:	cbz	w8, 142c4 <lzma_mode_is_supported@@XZ_5.0+0x36f8>
   14388:	mov	w9, w22
   1438c:	mov	w8, w20
   14390:	ldur	x10, [x29, #-80]
   14394:	mov	w11, #0x6768                	// #26472
   14398:	add	x10, x10, w2, uxtw #4
   1439c:	add	x10, x10, w25, uxtw #1
   143a0:	add	x10, x10, x11
   143a4:	ldrh	w12, [x10]
   143a8:	lsr	w11, w9, #11
   143ac:	mul	w22, w11, w12
   143b0:	subs	w11, w8, w22
   143b4:	b.cs	143d4 <lzma_mode_is_supported@@XZ_5.0+0x3808>  // b.hs, b.nlast
   143b8:	mov	w9, #0x800                 	// #2048
   143bc:	sub	w9, w9, w12
   143c0:	add	w9, w12, w9, lsr #5
   143c4:	strh	w9, [x10]
   143c8:	lsl	w9, w25, #1
   143cc:	add	w9, w9, #0x2
   143d0:	b	14d88 <lzma_mode_is_supported@@XZ_5.0+0x41bc>
   143d4:	sub	w22, w9, w22
   143d8:	mov	w9, #0x1                   	// #1
   143dc:	sub	w8, w12, w12, lsr #5
   143e0:	bfi	w9, w25, #1, #31
   143e4:	strh	w8, [x10]
   143e8:	mov	w8, w11
   143ec:	add	w9, w9, #0x2
   143f0:	b	14d88 <lzma_mode_is_supported@@XZ_5.0+0x41bc>
   143f4:	sub	w22, w22, w9
   143f8:	mov	w9, #0x1                   	// #1
   143fc:	bfi	w9, w25, #1, #31
   14400:	sub	w8, w11, w11, lsr #5
   14404:	mov	w25, w9
   14408:	strh	w8, [x10]
   1440c:	lsr	w8, w22, #24
   14410:	cbz	w8, 13ebc <lzma_mode_is_supported@@XZ_5.0+0x32f0>
   14414:	mov	w8, w20
   14418:	ldur	x9, [x29, #-80]
   1441c:	mov	w10, #0x6668                	// #26216
   14420:	add	x9, x9, w2, uxtw #4
   14424:	add	x9, x9, w25, uxtw #1
   14428:	add	x10, x9, x10
   1442c:	ldrh	w11, [x10]
   14430:	lsr	w9, w22, #11
   14434:	mul	w9, w9, w11
   14438:	subs	w20, w8, w9
   1443c:	b.cs	14480 <lzma_mode_is_supported@@XZ_5.0+0x38b4>  // b.hs, b.nlast
   14440:	mov	w12, #0x800                 	// #2048
   14444:	sub	w12, w12, w11
   14448:	add	w11, w11, w12, lsr #5
   1444c:	lsl	w25, w25, #1
   14450:	strh	w11, [x10]
   14454:	mov	w22, w9
   14458:	mov	w20, w8
   1445c:	lsr	w8, w22, #24
   14460:	cbnz	w8, 144a0 <lzma_mode_is_supported@@XZ_5.0+0x38d4>
   14464:	cmp	x27, x17
   14468:	b.eq	16250 <lzma_mode_is_supported@@XZ_5.0+0x5684>  // b.none
   1446c:	ldrb	w8, [x18, x27]
   14470:	lsl	w9, w22, #8
   14474:	add	x27, x27, #0x1
   14478:	bfi	w8, w20, #8, #24
   1447c:	b	144a8 <lzma_mode_is_supported@@XZ_5.0+0x38dc>
   14480:	sub	w22, w22, w9
   14484:	mov	w9, #0x1                   	// #1
   14488:	bfi	w9, w25, #1, #31
   1448c:	sub	w8, w11, w11, lsr #5
   14490:	mov	w25, w9
   14494:	strh	w8, [x10]
   14498:	lsr	w8, w22, #24
   1449c:	cbz	w8, 14464 <lzma_mode_is_supported@@XZ_5.0+0x3898>
   144a0:	mov	w9, w22
   144a4:	mov	w8, w20
   144a8:	ldur	x10, [x29, #-80]
   144ac:	mov	w11, #0x6668                	// #26216
   144b0:	add	x10, x10, w2, uxtw #4
   144b4:	add	x10, x10, w25, uxtw #1
   144b8:	add	x10, x10, x11
   144bc:	ldrh	w12, [x10]
   144c0:	lsr	w11, w9, #11
   144c4:	mul	w22, w11, w12
   144c8:	subs	w11, w8, w22
   144cc:	b.cs	1493c <lzma_mode_is_supported@@XZ_5.0+0x3d70>  // b.hs, b.nlast
   144d0:	mov	w9, #0x800                 	// #2048
   144d4:	sub	w9, w9, w12
   144d8:	add	w9, w12, w9, lsr #5
   144dc:	strh	w9, [x10]
   144e0:	lsl	w9, w25, #1
   144e4:	sub	w9, w9, #0x6
   144e8:	b	14d88 <lzma_mode_is_supported@@XZ_5.0+0x41bc>
   144ec:	sub	w22, w9, w22
   144f0:	sub	w8, w11, w11, lsr #5
   144f4:	strh	w8, [x10, x12, lsl #1]
   144f8:	lsr	w8, w22, #24
   144fc:	cbnz	w8, 1451c <lzma_mode_is_supported@@XZ_5.0+0x3950>
   14500:	cmp	x27, x17
   14504:	b.eq	1625c <lzma_mode_is_supported@@XZ_5.0+0x5690>  // b.none
   14508:	ldrb	w8, [x18, x27]
   1450c:	lsl	w9, w22, #8
   14510:	add	x27, x27, #0x1
   14514:	bfi	w8, w20, #8, #24
   14518:	b	14524 <lzma_mode_is_supported@@XZ_5.0+0x3958>
   1451c:	mov	w9, w22
   14520:	mov	w8, w20
   14524:	ldur	x11, [x29, #-80]
   14528:	mov	w10, #0x61c8                	// #25032
   1452c:	mov	w13, w3
   14530:	add	x11, x11, x10
   14534:	ldrh	w12, [x11, w3, uxtw #1]
   14538:	lsr	w10, w9, #11
   1453c:	mul	w22, w10, w12
   14540:	subs	w10, w8, w22
   14544:	b.cs	14564 <lzma_mode_is_supported@@XZ_5.0+0x3998>  // b.hs, b.nlast
   14548:	mov	w9, #0x800                 	// #2048
   1454c:	ldur	w0, [x29, #-88]
   14550:	sub	w9, w9, w12
   14554:	add	w9, w12, w9, lsr #5
   14558:	strh	w9, [x11, x13, lsl #1]
   1455c:	mov	w11, w1
   14560:	b	14584 <lzma_mode_is_supported@@XZ_5.0+0x39b8>
   14564:	sub	w8, w12, w12, lsr #5
   14568:	strh	w8, [x11, x13, lsl #1]
   1456c:	ldur	w8, [x29, #-88]
   14570:	ldr	w0, [sp, #68]
   14574:	sub	w22, w9, w22
   14578:	mov	w11, w1
   1457c:	str	w8, [sp, #68]
   14580:	mov	w8, w10
   14584:	ldur	w9, [x29, #-92]
   14588:	stp	w11, w9, [x29, #-92]
   1458c:	cmp	w3, #0x7
   14590:	mov	w9, #0xb                   	// #11
   14594:	mov	w10, #0x8                   	// #8
   14598:	mov	w1, w0
   1459c:	csel	w3, w10, w9, cc  // cc = lo, ul, last
   145a0:	mov	w25, #0x1                   	// #1
   145a4:	mov	w20, w8
   145a8:	lsr	w8, w22, #24
   145ac:	mov	w26, w20
   145b0:	cbnz	w8, 145d0 <lzma_mode_is_supported@@XZ_5.0+0x3a04>
   145b4:	cmp	x27, x17
   145b8:	b.eq	16268 <lzma_mode_is_supported@@XZ_5.0+0x569c>  // b.none
   145bc:	ldrb	w8, [x18, x27]
   145c0:	add	x27, x27, #0x1
   145c4:	lsl	w22, w22, #8
   145c8:	bfi	w8, w26, #8, #24
   145cc:	mov	w26, w8
   145d0:	ldrh	w9, [x16, #1028]
   145d4:	lsr	w8, w22, #11
   145d8:	mul	w8, w8, w9
   145dc:	subs	w20, w26, w8
   145e0:	b.cs	1495c <lzma_mode_is_supported@@XZ_5.0+0x3d90>  // b.hs, b.nlast
   145e4:	mov	w10, #0x800                 	// #2048
   145e8:	sub	w10, w10, w9
   145ec:	add	w9, w9, w10, lsr #5
   145f0:	mov	w22, w8
   145f4:	mov	w20, w26
   145f8:	strh	w9, [x16, #1028]
   145fc:	lsr	w8, w22, #24
   14600:	mov	w26, w20
   14604:	cbnz	w8, 14624 <lzma_mode_is_supported@@XZ_5.0+0x3a58>
   14608:	cmp	x27, x17
   1460c:	b.eq	16274 <lzma_mode_is_supported@@XZ_5.0+0x56a8>  // b.none
   14610:	ldrb	w8, [x18, x27]
   14614:	add	x27, x27, #0x1
   14618:	lsl	w22, w22, #8
   1461c:	bfi	w8, w26, #8, #24
   14620:	mov	w26, w8
   14624:	ldur	x8, [x29, #-80]
   14628:	mov	w9, #0x6a6c                	// #27244
   1462c:	add	x8, x8, w2, uxtw #4
   14630:	add	x8, x8, w25, uxtw #1
   14634:	add	x9, x8, x9
   14638:	ldrh	w10, [x9]
   1463c:	lsr	w8, w22, #11
   14640:	mul	w8, w8, w10
   14644:	subs	w20, w26, w8
   14648:	b.cs	1468c <lzma_mode_is_supported@@XZ_5.0+0x3ac0>  // b.hs, b.nlast
   1464c:	mov	w11, #0x800                 	// #2048
   14650:	sub	w11, w11, w10
   14654:	add	w10, w10, w11, lsr #5
   14658:	lsl	w25, w25, #1
   1465c:	strh	w10, [x9]
   14660:	mov	w22, w8
   14664:	mov	w20, w26
   14668:	lsr	w8, w22, #24
   1466c:	cbnz	w8, 146ac <lzma_mode_is_supported@@XZ_5.0+0x3ae0>
   14670:	cmp	x27, x17
   14674:	b.eq	16280 <lzma_mode_is_supported@@XZ_5.0+0x56b4>  // b.none
   14678:	ldrb	w8, [x18, x27]
   1467c:	lsl	w22, w22, #8
   14680:	add	x27, x27, #0x1
   14684:	bfi	w8, w20, #8, #24
   14688:	b	146b0 <lzma_mode_is_supported@@XZ_5.0+0x3ae4>
   1468c:	sub	w22, w22, w8
   14690:	sub	w8, w10, w10, lsr #5
   14694:	mov	w10, #0x1                   	// #1
   14698:	bfi	w10, w25, #1, #31
   1469c:	mov	w25, w10
   146a0:	strh	w8, [x9]
   146a4:	lsr	w8, w22, #24
   146a8:	cbz	w8, 14670 <lzma_mode_is_supported@@XZ_5.0+0x3aa4>
   146ac:	mov	w8, w20
   146b0:	ldur	x9, [x29, #-80]
   146b4:	mov	w10, #0x6a6c                	// #27244
   146b8:	add	x9, x9, w2, uxtw #4
   146bc:	add	x9, x9, w25, uxtw #1
   146c0:	add	x10, x9, x10
   146c4:	ldrh	w11, [x10]
   146c8:	lsr	w9, w22, #11
   146cc:	mul	w9, w9, w11
   146d0:	subs	w20, w8, w9
   146d4:	b.cs	14718 <lzma_mode_is_supported@@XZ_5.0+0x3b4c>  // b.hs, b.nlast
   146d8:	mov	w12, #0x800                 	// #2048
   146dc:	sub	w12, w12, w11
   146e0:	add	w11, w11, w12, lsr #5
   146e4:	lsl	w25, w25, #1
   146e8:	strh	w11, [x10]
   146ec:	mov	w22, w9
   146f0:	mov	w20, w8
   146f4:	lsr	w8, w22, #24
   146f8:	cbnz	w8, 14738 <lzma_mode_is_supported@@XZ_5.0+0x3b6c>
   146fc:	cmp	x27, x17
   14700:	b.eq	1628c <lzma_mode_is_supported@@XZ_5.0+0x56c0>  // b.none
   14704:	ldrb	w8, [x18, x27]
   14708:	lsl	w9, w22, #8
   1470c:	add	x27, x27, #0x1
   14710:	bfi	w8, w20, #8, #24
   14714:	b	14740 <lzma_mode_is_supported@@XZ_5.0+0x3b74>
   14718:	sub	w22, w22, w9
   1471c:	mov	w9, #0x1                   	// #1
   14720:	bfi	w9, w25, #1, #31
   14724:	sub	w8, w11, w11, lsr #5
   14728:	mov	w25, w9
   1472c:	strh	w8, [x10]
   14730:	lsr	w8, w22, #24
   14734:	cbz	w8, 146fc <lzma_mode_is_supported@@XZ_5.0+0x3b30>
   14738:	mov	w9, w22
   1473c:	mov	w8, w20
   14740:	ldur	x10, [x29, #-80]
   14744:	mov	w11, #0x6a6c                	// #27244
   14748:	add	x10, x10, w2, uxtw #4
   1474c:	add	x10, x10, w25, uxtw #1
   14750:	add	x10, x10, x11
   14754:	ldrh	w12, [x10]
   14758:	lsr	w11, w9, #11
   1475c:	mul	w22, w11, w12
   14760:	subs	w11, w8, w22
   14764:	b.cs	14784 <lzma_mode_is_supported@@XZ_5.0+0x3bb8>  // b.hs, b.nlast
   14768:	mov	w9, #0x800                 	// #2048
   1476c:	sub	w9, w9, w12
   14770:	add	w9, w12, w9, lsr #5
   14774:	strh	w9, [x10]
   14778:	lsl	w9, w25, #1
   1477c:	sub	w10, w9, #0x6
   14780:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x493c>
   14784:	sub	w22, w9, w22
   14788:	mov	w9, #0x1                   	// #1
   1478c:	sub	w8, w12, w12, lsr #5
   14790:	bfi	w9, w25, #1, #31
   14794:	strh	w8, [x10]
   14798:	mov	w8, w11
   1479c:	sub	w10, w9, #0x6
   147a0:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x493c>
   147a4:	sub	w22, w22, w10
   147a8:	mov	w10, #0x1                   	// #1
   147ac:	bfi	w10, w25, #1, #31
   147b0:	sub	w8, w12, w12, lsr #5
   147b4:	mov	w25, w10
   147b8:	strh	w8, [x9, x11, lsl #1]
   147bc:	lsr	w8, w22, #24
   147c0:	cbz	w8, 1434c <lzma_mode_is_supported@@XZ_5.0+0x3780>
   147c4:	mov	w8, w20
   147c8:	ldur	x10, [x29, #-80]
   147cc:	mov	w9, #0x6868                	// #26728
   147d0:	mov	w11, w25
   147d4:	add	x9, x10, x9
   147d8:	ldrh	w12, [x9, w25, uxtw #1]
   147dc:	lsr	w10, w22, #11
   147e0:	mul	w10, w10, w12
   147e4:	subs	w20, w8, w10
   147e8:	b.cs	1482c <lzma_mode_is_supported@@XZ_5.0+0x3c60>  // b.hs, b.nlast
   147ec:	mov	w13, #0x800                 	// #2048
   147f0:	sub	w13, w13, w12
   147f4:	add	w12, w12, w13, lsr #5
   147f8:	lsl	w25, w25, #1
   147fc:	strh	w12, [x9, x11, lsl #1]
   14800:	mov	w22, w10
   14804:	mov	w20, w8
   14808:	lsr	w8, w22, #24
   1480c:	cbnz	w8, 1484c <lzma_mode_is_supported@@XZ_5.0+0x3c80>
   14810:	cmp	x27, x17
   14814:	b.eq	16298 <lzma_mode_is_supported@@XZ_5.0+0x56cc>  // b.none
   14818:	ldrb	w8, [x18, x27]
   1481c:	lsl	w22, w22, #8
   14820:	add	x27, x27, #0x1
   14824:	bfi	w8, w20, #8, #24
   14828:	b	14850 <lzma_mode_is_supported@@XZ_5.0+0x3c84>
   1482c:	sub	w22, w22, w10
   14830:	mov	w10, #0x1                   	// #1
   14834:	bfi	w10, w25, #1, #31
   14838:	sub	w8, w12, w12, lsr #5
   1483c:	mov	w25, w10
   14840:	strh	w8, [x9, x11, lsl #1]
   14844:	lsr	w8, w22, #24
   14848:	cbz	w8, 14810 <lzma_mode_is_supported@@XZ_5.0+0x3c44>
   1484c:	mov	w8, w20
   14850:	ldur	x10, [x29, #-80]
   14854:	mov	w9, #0x6868                	// #26728
   14858:	mov	w11, w25
   1485c:	add	x9, x10, x9
   14860:	ldrh	w12, [x9, w25, uxtw #1]
   14864:	lsr	w10, w22, #11
   14868:	mul	w10, w10, w12
   1486c:	subs	w20, w8, w10
   14870:	b.cs	148b4 <lzma_mode_is_supported@@XZ_5.0+0x3ce8>  // b.hs, b.nlast
   14874:	mov	w13, #0x800                 	// #2048
   14878:	sub	w13, w13, w12
   1487c:	add	w12, w12, w13, lsr #5
   14880:	lsl	w25, w25, #1
   14884:	strh	w12, [x9, x11, lsl #1]
   14888:	mov	w22, w10
   1488c:	mov	w20, w8
   14890:	lsr	w8, w22, #24
   14894:	cbnz	w8, 148d4 <lzma_mode_is_supported@@XZ_5.0+0x3d08>
   14898:	cmp	x27, x17
   1489c:	b.eq	162a4 <lzma_mode_is_supported@@XZ_5.0+0x56d8>  // b.none
   148a0:	ldrb	w8, [x18, x27]
   148a4:	lsl	w22, w22, #8
   148a8:	add	x27, x27, #0x1
   148ac:	bfi	w8, w20, #8, #24
   148b0:	b	148d8 <lzma_mode_is_supported@@XZ_5.0+0x3d0c>
   148b4:	sub	w22, w22, w10
   148b8:	mov	w10, #0x1                   	// #1
   148bc:	bfi	w10, w25, #1, #31
   148c0:	sub	w8, w12, w12, lsr #5
   148c4:	mov	w25, w10
   148c8:	strh	w8, [x9, x11, lsl #1]
   148cc:	lsr	w8, w22, #24
   148d0:	cbz	w8, 14898 <lzma_mode_is_supported@@XZ_5.0+0x3ccc>
   148d4:	mov	w8, w20
   148d8:	ldur	x10, [x29, #-80]
   148dc:	mov	w9, #0x6868                	// #26728
   148e0:	mov	w11, w25
   148e4:	add	x9, x10, x9
   148e8:	ldrh	w12, [x9, w25, uxtw #1]
   148ec:	lsr	w10, w22, #11
   148f0:	mul	w10, w10, w12
   148f4:	subs	w20, w8, w10
   148f8:	b.cs	14a4c <lzma_mode_is_supported@@XZ_5.0+0x3e80>  // b.hs, b.nlast
   148fc:	mov	w13, #0x800                 	// #2048
   14900:	sub	w13, w13, w12
   14904:	add	w12, w12, w13, lsr #5
   14908:	lsl	w25, w25, #1
   1490c:	strh	w12, [x9, x11, lsl #1]
   14910:	mov	w22, w10
   14914:	mov	w20, w8
   14918:	lsr	w8, w22, #24
   1491c:	cbnz	w8, 14a6c <lzma_mode_is_supported@@XZ_5.0+0x3ea0>
   14920:	cmp	x27, x17
   14924:	b.eq	162b0 <lzma_mode_is_supported@@XZ_5.0+0x56e4>  // b.none
   14928:	ldrb	w8, [x18, x27]
   1492c:	lsl	w22, w22, #8
   14930:	add	x27, x27, #0x1
   14934:	bfi	w8, w20, #8, #24
   14938:	b	14a70 <lzma_mode_is_supported@@XZ_5.0+0x3ea4>
   1493c:	sub	w22, w9, w22
   14940:	mov	w9, #0x1                   	// #1
   14944:	sub	w8, w12, w12, lsr #5
   14948:	bfi	w9, w25, #1, #31
   1494c:	strh	w8, [x10]
   14950:	mov	w8, w11
   14954:	sub	w9, w9, #0x6
   14958:	b	14d88 <lzma_mode_is_supported@@XZ_5.0+0x41bc>
   1495c:	sub	w22, w22, w8
   14960:	sub	w8, w9, w9, lsr #5
   14964:	strh	w8, [x16, #1028]
   14968:	lsr	w8, w22, #24
   1496c:	mov	w26, w20
   14970:	cbnz	w8, 14990 <lzma_mode_is_supported@@XZ_5.0+0x3dc4>
   14974:	cmp	x27, x17
   14978:	b.eq	162bc <lzma_mode_is_supported@@XZ_5.0+0x56f0>  // b.none
   1497c:	ldrb	w8, [x18, x27]
   14980:	add	x27, x27, #0x1
   14984:	lsl	w22, w22, #8
   14988:	bfi	w8, w26, #8, #24
   1498c:	mov	w26, w8
   14990:	ldrh	w9, [x16, #1030]
   14994:	lsr	w8, w22, #11
   14998:	mul	w8, w8, w9
   1499c:	subs	w20, w26, w8
   149a0:	b.cs	14ad4 <lzma_mode_is_supported@@XZ_5.0+0x3f08>  // b.hs, b.nlast
   149a4:	mov	w10, #0x800                 	// #2048
   149a8:	sub	w10, w10, w9
   149ac:	add	w9, w9, w10, lsr #5
   149b0:	mov	w22, w8
   149b4:	mov	w20, w26
   149b8:	strh	w9, [x16, #1030]
   149bc:	lsr	w8, w22, #24
   149c0:	mov	w26, w20
   149c4:	cbnz	w8, 149e4 <lzma_mode_is_supported@@XZ_5.0+0x3e18>
   149c8:	cmp	x27, x17
   149cc:	b.eq	162c8 <lzma_mode_is_supported@@XZ_5.0+0x56fc>  // b.none
   149d0:	ldrb	w8, [x18, x27]
   149d4:	add	x27, x27, #0x1
   149d8:	lsl	w22, w22, #8
   149dc:	bfi	w8, w26, #8, #24
   149e0:	mov	w26, w8
   149e4:	ldur	x8, [x29, #-80]
   149e8:	mov	w9, #0x6b6c                	// #27500
   149ec:	add	x8, x8, w2, uxtw #4
   149f0:	add	x8, x8, w25, uxtw #1
   149f4:	add	x9, x8, x9
   149f8:	ldrh	w10, [x9]
   149fc:	lsr	w8, w22, #11
   14a00:	mul	w8, w8, w10
   14a04:	subs	w20, w26, w8
   14a08:	b.cs	14bf4 <lzma_mode_is_supported@@XZ_5.0+0x4028>  // b.hs, b.nlast
   14a0c:	mov	w11, #0x800                 	// #2048
   14a10:	sub	w11, w11, w10
   14a14:	add	w10, w10, w11, lsr #5
   14a18:	lsl	w25, w25, #1
   14a1c:	strh	w10, [x9]
   14a20:	mov	w22, w8
   14a24:	mov	w20, w26
   14a28:	lsr	w8, w22, #24
   14a2c:	cbnz	w8, 14c14 <lzma_mode_is_supported@@XZ_5.0+0x4048>
   14a30:	cmp	x27, x17
   14a34:	b.eq	162d4 <lzma_mode_is_supported@@XZ_5.0+0x5708>  // b.none
   14a38:	ldrb	w8, [x18, x27]
   14a3c:	lsl	w22, w22, #8
   14a40:	add	x27, x27, #0x1
   14a44:	bfi	w8, w20, #8, #24
   14a48:	b	14c18 <lzma_mode_is_supported@@XZ_5.0+0x404c>
   14a4c:	sub	w22, w22, w10
   14a50:	mov	w10, #0x1                   	// #1
   14a54:	bfi	w10, w25, #1, #31
   14a58:	sub	w8, w12, w12, lsr #5
   14a5c:	mov	w25, w10
   14a60:	strh	w8, [x9, x11, lsl #1]
   14a64:	lsr	w8, w22, #24
   14a68:	cbz	w8, 14920 <lzma_mode_is_supported@@XZ_5.0+0x3d54>
   14a6c:	mov	w8, w20
   14a70:	ldur	x10, [x29, #-80]
   14a74:	mov	w9, #0x6868                	// #26728
   14a78:	mov	w11, w25
   14a7c:	add	x9, x10, x9
   14a80:	ldrh	w12, [x9, w25, uxtw #1]
   14a84:	lsr	w10, w22, #11
   14a88:	mul	w10, w10, w12
   14a8c:	subs	w20, w8, w10
   14a90:	b.cs	14c80 <lzma_mode_is_supported@@XZ_5.0+0x40b4>  // b.hs, b.nlast
   14a94:	mov	w13, #0x800                 	// #2048
   14a98:	sub	w13, w13, w12
   14a9c:	add	w12, w12, w13, lsr #5
   14aa0:	lsl	w25, w25, #1
   14aa4:	strh	w12, [x9, x11, lsl #1]
   14aa8:	mov	w22, w10
   14aac:	mov	w20, w8
   14ab0:	lsr	w8, w22, #24
   14ab4:	cbnz	w8, 14ca0 <lzma_mode_is_supported@@XZ_5.0+0x40d4>
   14ab8:	cmp	x27, x17
   14abc:	b.eq	162e0 <lzma_mode_is_supported@@XZ_5.0+0x5714>  // b.none
   14ac0:	ldrb	w8, [x18, x27]
   14ac4:	lsl	w22, w22, #8
   14ac8:	add	x27, x27, #0x1
   14acc:	bfi	w8, w20, #8, #24
   14ad0:	b	14ca4 <lzma_mode_is_supported@@XZ_5.0+0x40d8>
   14ad4:	sub	w22, w22, w8
   14ad8:	sub	w8, w9, w9, lsr #5
   14adc:	strh	w8, [x16, #1030]
   14ae0:	lsr	w8, w22, #24
   14ae4:	mov	w26, w20
   14ae8:	cbnz	w8, 14b08 <lzma_mode_is_supported@@XZ_5.0+0x3f3c>
   14aec:	cmp	x27, x17
   14af0:	b.eq	162ec <lzma_mode_is_supported@@XZ_5.0+0x5720>  // b.none
   14af4:	ldrb	w8, [x18, x27]
   14af8:	add	x27, x27, #0x1
   14afc:	lsl	w22, w22, #8
   14b00:	bfi	w8, w26, #8, #24
   14b04:	mov	w26, w8
   14b08:	ldur	x9, [x29, #-80]
   14b0c:	mov	w8, #0x6c6c                	// #27756
   14b10:	mov	w10, w25
   14b14:	add	x8, x9, x8
   14b18:	ldrh	w11, [x8, w25, uxtw #1]
   14b1c:	lsr	w9, w22, #11
   14b20:	mul	w9, w9, w11
   14b24:	subs	w20, w26, w9
   14b28:	b.cs	14b6c <lzma_mode_is_supported@@XZ_5.0+0x3fa0>  // b.hs, b.nlast
   14b2c:	mov	w12, #0x800                 	// #2048
   14b30:	sub	w12, w12, w11
   14b34:	add	w11, w11, w12, lsr #5
   14b38:	lsl	w25, w25, #1
   14b3c:	strh	w11, [x8, x10, lsl #1]
   14b40:	mov	w22, w9
   14b44:	mov	w20, w26
   14b48:	lsr	w8, w22, #24
   14b4c:	cbnz	w8, 14b8c <lzma_mode_is_supported@@XZ_5.0+0x3fc0>
   14b50:	cmp	x27, x17
   14b54:	b.eq	162f8 <lzma_mode_is_supported@@XZ_5.0+0x572c>  // b.none
   14b58:	ldrb	w8, [x18, x27]
   14b5c:	lsl	w22, w22, #8
   14b60:	add	x27, x27, #0x1
   14b64:	bfi	w8, w20, #8, #24
   14b68:	b	14b90 <lzma_mode_is_supported@@XZ_5.0+0x3fc4>
   14b6c:	sub	w22, w22, w9
   14b70:	sub	w9, w11, w11, lsr #5
   14b74:	mov	w11, #0x1                   	// #1
   14b78:	bfi	w11, w25, #1, #31
   14b7c:	mov	w25, w11
   14b80:	strh	w9, [x8, x10, lsl #1]
   14b84:	lsr	w8, w22, #24
   14b88:	cbz	w8, 14b50 <lzma_mode_is_supported@@XZ_5.0+0x3f84>
   14b8c:	mov	w8, w20
   14b90:	ldur	x10, [x29, #-80]
   14b94:	mov	w9, #0x6c6c                	// #27756
   14b98:	mov	w11, w25
   14b9c:	add	x9, x10, x9
   14ba0:	ldrh	w12, [x9, w25, uxtw #1]
   14ba4:	lsr	w10, w22, #11
   14ba8:	mul	w10, w10, w12
   14bac:	subs	w20, w8, w10
   14bb0:	b.cs	14e38 <lzma_mode_is_supported@@XZ_5.0+0x426c>  // b.hs, b.nlast
   14bb4:	mov	w13, #0x800                 	// #2048
   14bb8:	sub	w13, w13, w12
   14bbc:	add	w12, w12, w13, lsr #5
   14bc0:	lsl	w25, w25, #1
   14bc4:	strh	w12, [x9, x11, lsl #1]
   14bc8:	mov	w22, w10
   14bcc:	mov	w20, w8
   14bd0:	lsr	w8, w22, #24
   14bd4:	cbnz	w8, 14e58 <lzma_mode_is_supported@@XZ_5.0+0x428c>
   14bd8:	cmp	x27, x17
   14bdc:	b.eq	16304 <lzma_mode_is_supported@@XZ_5.0+0x5738>  // b.none
   14be0:	ldrb	w8, [x18, x27]
   14be4:	lsl	w22, w22, #8
   14be8:	add	x27, x27, #0x1
   14bec:	bfi	w8, w20, #8, #24
   14bf0:	b	14e5c <lzma_mode_is_supported@@XZ_5.0+0x4290>
   14bf4:	sub	w22, w22, w8
   14bf8:	sub	w8, w10, w10, lsr #5
   14bfc:	mov	w10, #0x1                   	// #1
   14c00:	bfi	w10, w25, #1, #31
   14c04:	mov	w25, w10
   14c08:	strh	w8, [x9]
   14c0c:	lsr	w8, w22, #24
   14c10:	cbz	w8, 14a30 <lzma_mode_is_supported@@XZ_5.0+0x3e64>
   14c14:	mov	w8, w20
   14c18:	ldur	x9, [x29, #-80]
   14c1c:	mov	w10, #0x6b6c                	// #27500
   14c20:	add	x9, x9, w2, uxtw #4
   14c24:	add	x9, x9, w25, uxtw #1
   14c28:	add	x10, x9, x10
   14c2c:	ldrh	w11, [x10]
   14c30:	lsr	w9, w22, #11
   14c34:	mul	w9, w9, w11
   14c38:	subs	w20, w8, w9
   14c3c:	b.cs	14f48 <lzma_mode_is_supported@@XZ_5.0+0x437c>  // b.hs, b.nlast
   14c40:	mov	w12, #0x800                 	// #2048
   14c44:	sub	w12, w12, w11
   14c48:	add	w11, w11, w12, lsr #5
   14c4c:	lsl	w25, w25, #1
   14c50:	strh	w11, [x10]
   14c54:	mov	w22, w9
   14c58:	mov	w20, w8
   14c5c:	lsr	w8, w22, #24
   14c60:	cbnz	w8, 14f68 <lzma_mode_is_supported@@XZ_5.0+0x439c>
   14c64:	cmp	x27, x17
   14c68:	b.eq	16310 <lzma_mode_is_supported@@XZ_5.0+0x5744>  // b.none
   14c6c:	ldrb	w8, [x18, x27]
   14c70:	lsl	w9, w22, #8
   14c74:	add	x27, x27, #0x1
   14c78:	bfi	w8, w20, #8, #24
   14c7c:	b	14f70 <lzma_mode_is_supported@@XZ_5.0+0x43a4>
   14c80:	sub	w22, w22, w10
   14c84:	mov	w10, #0x1                   	// #1
   14c88:	bfi	w10, w25, #1, #31
   14c8c:	sub	w8, w12, w12, lsr #5
   14c90:	mov	w25, w10
   14c94:	strh	w8, [x9, x11, lsl #1]
   14c98:	lsr	w8, w22, #24
   14c9c:	cbz	w8, 14ab8 <lzma_mode_is_supported@@XZ_5.0+0x3eec>
   14ca0:	mov	w8, w20
   14ca4:	ldur	x10, [x29, #-80]
   14ca8:	mov	w9, #0x6868                	// #26728
   14cac:	mov	w11, w25
   14cb0:	add	x9, x10, x9
   14cb4:	ldrh	w12, [x9, w25, uxtw #1]
   14cb8:	lsr	w10, w22, #11
   14cbc:	mul	w10, w10, w12
   14cc0:	subs	w20, w8, w10
   14cc4:	b.cs	14d08 <lzma_mode_is_supported@@XZ_5.0+0x413c>  // b.hs, b.nlast
   14cc8:	mov	w13, #0x800                 	// #2048
   14ccc:	sub	w13, w13, w12
   14cd0:	add	w12, w12, w13, lsr #5
   14cd4:	lsl	w25, w25, #1
   14cd8:	strh	w12, [x9, x11, lsl #1]
   14cdc:	mov	w22, w10
   14ce0:	mov	w20, w8
   14ce4:	lsr	w8, w22, #24
   14ce8:	cbnz	w8, 14d28 <lzma_mode_is_supported@@XZ_5.0+0x415c>
   14cec:	cmp	x27, x17
   14cf0:	b.eq	1631c <lzma_mode_is_supported@@XZ_5.0+0x5750>  // b.none
   14cf4:	ldrb	w8, [x18, x27]
   14cf8:	lsl	w9, w22, #8
   14cfc:	add	x27, x27, #0x1
   14d00:	bfi	w8, w20, #8, #24
   14d04:	b	14d30 <lzma_mode_is_supported@@XZ_5.0+0x4164>
   14d08:	sub	w22, w22, w10
   14d0c:	mov	w10, #0x1                   	// #1
   14d10:	bfi	w10, w25, #1, #31
   14d14:	sub	w8, w12, w12, lsr #5
   14d18:	mov	w25, w10
   14d1c:	strh	w8, [x9, x11, lsl #1]
   14d20:	lsr	w8, w22, #24
   14d24:	cbz	w8, 14cec <lzma_mode_is_supported@@XZ_5.0+0x4120>
   14d28:	mov	w9, w22
   14d2c:	mov	w8, w20
   14d30:	ldur	x11, [x29, #-80]
   14d34:	mov	w10, #0x6868                	// #26728
   14d38:	mov	w12, w25
   14d3c:	add	x10, x11, x10
   14d40:	ldrh	w13, [x10, w25, uxtw #1]
   14d44:	lsr	w11, w9, #11
   14d48:	mul	w22, w11, w13
   14d4c:	subs	w11, w8, w22
   14d50:	b.cs	14d6c <lzma_mode_is_supported@@XZ_5.0+0x41a0>  // b.hs, b.nlast
   14d54:	mov	w9, #0x800                 	// #2048
   14d58:	sub	w9, w9, w13
   14d5c:	add	w9, w13, w9, lsr #5
   14d60:	strh	w9, [x10, x12, lsl #1]
   14d64:	lsl	w9, w25, #1
   14d68:	b	14d84 <lzma_mode_is_supported@@XZ_5.0+0x41b8>
   14d6c:	sub	w22, w9, w22
   14d70:	sub	w8, w13, w13, lsr #5
   14d74:	mov	w9, #0x1                   	// #1
   14d78:	strh	w8, [x10, x12, lsl #1]
   14d7c:	bfi	w9, w25, #1, #31
   14d80:	mov	w8, w11
   14d84:	sub	w9, w9, #0xee
   14d88:	stur	w9, [x29, #-68]
   14d8c:	mov	w9, w9
   14d90:	mov	w10, #0x3                   	// #3
   14d94:	sub	w12, w9, #0x2
   14d98:	cmp	w9, #0x6
   14d9c:	csel	w9, w12, w10, cc  // cc = lo, ul, last
   14da0:	ldur	x10, [x29, #-80]
   14da4:	mov	w11, #0x6360                	// #25440
   14da8:	mov	w25, #0x1                   	// #1
   14dac:	mov	w20, w8
   14db0:	add	x9, x10, x9, lsl #7
   14db4:	add	x15, x9, x11
   14db8:	lsr	w8, w22, #24
   14dbc:	cbnz	w8, 14ddc <lzma_mode_is_supported@@XZ_5.0+0x4210>
   14dc0:	cmp	x27, x17
   14dc4:	b.eq	16328 <lzma_mode_is_supported@@XZ_5.0+0x575c>  // b.none
   14dc8:	ldrb	w8, [x18, x27]
   14dcc:	lsl	w9, w22, #8
   14dd0:	add	x27, x27, #0x1
   14dd4:	bfi	w8, w20, #8, #24
   14dd8:	b	14de4 <lzma_mode_is_supported@@XZ_5.0+0x4218>
   14ddc:	mov	w9, w22
   14de0:	mov	w8, w20
   14de4:	ldrh	w11, [x15, w25, uxtw #1]
   14de8:	lsr	w10, w9, #11
   14dec:	mul	w22, w10, w11
   14df0:	subs	w20, w8, w22
   14df4:	mov	w10, w25
   14df8:	b.cs	14fd4 <lzma_mode_is_supported@@XZ_5.0+0x4408>  // b.hs, b.nlast
   14dfc:	mov	w9, #0x800                 	// #2048
   14e00:	sub	w9, w9, w11
   14e04:	add	w9, w11, w9, lsr #5
   14e08:	lsl	w25, w25, #1
   14e0c:	strh	w9, [x15, x10, lsl #1]
   14e10:	mov	w20, w8
   14e14:	lsr	w8, w22, #24
   14e18:	cbnz	w8, 14ff4 <lzma_mode_is_supported@@XZ_5.0+0x4428>
   14e1c:	cmp	x27, x17
   14e20:	b.eq	16334 <lzma_mode_is_supported@@XZ_5.0+0x5768>  // b.none
   14e24:	ldrb	w8, [x18, x27]
   14e28:	lsl	w9, w22, #8
   14e2c:	add	x27, x27, #0x1
   14e30:	bfi	w8, w20, #8, #24
   14e34:	b	14ffc <lzma_mode_is_supported@@XZ_5.0+0x4430>
   14e38:	sub	w22, w22, w10
   14e3c:	mov	w10, #0x1                   	// #1
   14e40:	bfi	w10, w25, #1, #31
   14e44:	sub	w8, w12, w12, lsr #5
   14e48:	mov	w25, w10
   14e4c:	strh	w8, [x9, x11, lsl #1]
   14e50:	lsr	w8, w22, #24
   14e54:	cbz	w8, 14bd8 <lzma_mode_is_supported@@XZ_5.0+0x400c>
   14e58:	mov	w8, w20
   14e5c:	ldur	x10, [x29, #-80]
   14e60:	mov	w9, #0x6c6c                	// #27756
   14e64:	mov	w11, w25
   14e68:	add	x9, x10, x9
   14e6c:	ldrh	w12, [x9, w25, uxtw #1]
   14e70:	lsr	w10, w22, #11
   14e74:	mul	w10, w10, w12
   14e78:	subs	w20, w8, w10
   14e7c:	b.cs	14ec0 <lzma_mode_is_supported@@XZ_5.0+0x42f4>  // b.hs, b.nlast
   14e80:	mov	w13, #0x800                 	// #2048
   14e84:	sub	w13, w13, w12
   14e88:	add	w12, w12, w13, lsr #5
   14e8c:	lsl	w25, w25, #1
   14e90:	strh	w12, [x9, x11, lsl #1]
   14e94:	mov	w22, w10
   14e98:	mov	w20, w8
   14e9c:	lsr	w8, w22, #24
   14ea0:	cbnz	w8, 14ee0 <lzma_mode_is_supported@@XZ_5.0+0x4314>
   14ea4:	cmp	x27, x17
   14ea8:	b.eq	16340 <lzma_mode_is_supported@@XZ_5.0+0x5774>  // b.none
   14eac:	ldrb	w8, [x18, x27]
   14eb0:	lsl	w22, w22, #8
   14eb4:	add	x27, x27, #0x1
   14eb8:	bfi	w8, w20, #8, #24
   14ebc:	b	14ee4 <lzma_mode_is_supported@@XZ_5.0+0x4318>
   14ec0:	sub	w22, w22, w10
   14ec4:	mov	w10, #0x1                   	// #1
   14ec8:	bfi	w10, w25, #1, #31
   14ecc:	sub	w8, w12, w12, lsr #5
   14ed0:	mov	w25, w10
   14ed4:	strh	w8, [x9, x11, lsl #1]
   14ed8:	lsr	w8, w22, #24
   14edc:	cbz	w8, 14ea4 <lzma_mode_is_supported@@XZ_5.0+0x42d8>
   14ee0:	mov	w8, w20
   14ee4:	ldur	x10, [x29, #-80]
   14ee8:	mov	w9, #0x6c6c                	// #27756
   14eec:	mov	w11, w25
   14ef0:	add	x9, x10, x9
   14ef4:	ldrh	w12, [x9, w25, uxtw #1]
   14ef8:	lsr	w10, w22, #11
   14efc:	mul	w10, w10, w12
   14f00:	subs	w20, w8, w10
   14f04:	b.cs	15050 <lzma_mode_is_supported@@XZ_5.0+0x4484>  // b.hs, b.nlast
   14f08:	mov	w13, #0x800                 	// #2048
   14f0c:	sub	w13, w13, w12
   14f10:	add	w12, w12, w13, lsr #5
   14f14:	lsl	w25, w25, #1
   14f18:	strh	w12, [x9, x11, lsl #1]
   14f1c:	mov	w22, w10
   14f20:	mov	w20, w8
   14f24:	lsr	w8, w22, #24
   14f28:	cbnz	w8, 15070 <lzma_mode_is_supported@@XZ_5.0+0x44a4>
   14f2c:	cmp	x27, x17
   14f30:	b.eq	1634c <lzma_mode_is_supported@@XZ_5.0+0x5780>  // b.none
   14f34:	ldrb	w8, [x18, x27]
   14f38:	lsl	w22, w22, #8
   14f3c:	add	x27, x27, #0x1
   14f40:	bfi	w8, w20, #8, #24
   14f44:	b	15074 <lzma_mode_is_supported@@XZ_5.0+0x44a8>
   14f48:	sub	w22, w22, w9
   14f4c:	mov	w9, #0x1                   	// #1
   14f50:	bfi	w9, w25, #1, #31
   14f54:	sub	w8, w11, w11, lsr #5
   14f58:	mov	w25, w9
   14f5c:	strh	w8, [x10]
   14f60:	lsr	w8, w22, #24
   14f64:	cbz	w8, 14c64 <lzma_mode_is_supported@@XZ_5.0+0x4098>
   14f68:	mov	w9, w22
   14f6c:	mov	w8, w20
   14f70:	ldur	x10, [x29, #-80]
   14f74:	mov	w11, #0x6b6c                	// #27500
   14f78:	add	x10, x10, w2, uxtw #4
   14f7c:	add	x10, x10, w25, uxtw #1
   14f80:	add	x10, x10, x11
   14f84:	ldrh	w12, [x10]
   14f88:	lsr	w11, w9, #11
   14f8c:	mul	w22, w11, w12
   14f90:	subs	w11, w8, w22
   14f94:	b.cs	14fb4 <lzma_mode_is_supported@@XZ_5.0+0x43e8>  // b.hs, b.nlast
   14f98:	mov	w9, #0x800                 	// #2048
   14f9c:	sub	w9, w9, w12
   14fa0:	add	w9, w12, w9, lsr #5
   14fa4:	strh	w9, [x10]
   14fa8:	lsl	w9, w25, #1
   14fac:	add	w10, w9, #0x2
   14fb0:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x493c>
   14fb4:	sub	w22, w9, w22
   14fb8:	mov	w9, #0x1                   	// #1
   14fbc:	sub	w8, w12, w12, lsr #5
   14fc0:	bfi	w9, w25, #1, #31
   14fc4:	strh	w8, [x10]
   14fc8:	mov	w8, w11
   14fcc:	add	w10, w9, #0x2
   14fd0:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x493c>
   14fd4:	sub	w22, w9, w22
   14fd8:	mov	w9, #0x1                   	// #1
   14fdc:	bfi	w9, w25, #1, #31
   14fe0:	sub	w8, w11, w11, lsr #5
   14fe4:	mov	w25, w9
   14fe8:	strh	w8, [x15, x10, lsl #1]
   14fec:	lsr	w8, w22, #24
   14ff0:	cbz	w8, 14e1c <lzma_mode_is_supported@@XZ_5.0+0x4250>
   14ff4:	mov	w9, w22
   14ff8:	mov	w8, w20
   14ffc:	ldrh	w11, [x15, w25, uxtw #1]
   15000:	lsr	w10, w9, #11
   15004:	mul	w22, w10, w11
   15008:	subs	w20, w8, w22
   1500c:	mov	w10, w25
   15010:	b.cs	15160 <lzma_mode_is_supported@@XZ_5.0+0x4594>  // b.hs, b.nlast
   15014:	mov	w9, #0x800                 	// #2048
   15018:	sub	w9, w9, w11
   1501c:	add	w9, w11, w9, lsr #5
   15020:	lsl	w25, w25, #1
   15024:	strh	w9, [x15, x10, lsl #1]
   15028:	mov	w20, w8
   1502c:	lsr	w8, w22, #24
   15030:	cbnz	w8, 15180 <lzma_mode_is_supported@@XZ_5.0+0x45b4>
   15034:	cmp	x27, x17
   15038:	b.eq	16358 <lzma_mode_is_supported@@XZ_5.0+0x578c>  // b.none
   1503c:	ldrb	w8, [x18, x27]
   15040:	lsl	w9, w22, #8
   15044:	add	x27, x27, #0x1
   15048:	bfi	w8, w20, #8, #24
   1504c:	b	15188 <lzma_mode_is_supported@@XZ_5.0+0x45bc>
   15050:	sub	w22, w22, w10
   15054:	mov	w10, #0x1                   	// #1
   15058:	bfi	w10, w25, #1, #31
   1505c:	sub	w8, w12, w12, lsr #5
   15060:	mov	w25, w10
   15064:	strh	w8, [x9, x11, lsl #1]
   15068:	lsr	w8, w22, #24
   1506c:	cbz	w8, 14f2c <lzma_mode_is_supported@@XZ_5.0+0x4360>
   15070:	mov	w8, w20
   15074:	ldur	x10, [x29, #-80]
   15078:	mov	w9, #0x6c6c                	// #27756
   1507c:	mov	w11, w25
   15080:	add	x9, x10, x9
   15084:	ldrh	w12, [x9, w25, uxtw #1]
   15088:	lsr	w10, w22, #11
   1508c:	mul	w10, w10, w12
   15090:	subs	w20, w8, w10
   15094:	b.cs	150d8 <lzma_mode_is_supported@@XZ_5.0+0x450c>  // b.hs, b.nlast
   15098:	mov	w13, #0x800                 	// #2048
   1509c:	sub	w13, w13, w12
   150a0:	add	w12, w12, w13, lsr #5
   150a4:	lsl	w25, w25, #1
   150a8:	strh	w12, [x9, x11, lsl #1]
   150ac:	mov	w22, w10
   150b0:	mov	w20, w8
   150b4:	lsr	w8, w22, #24
   150b8:	cbnz	w8, 150f8 <lzma_mode_is_supported@@XZ_5.0+0x452c>
   150bc:	cmp	x27, x17
   150c0:	b.eq	16364 <lzma_mode_is_supported@@XZ_5.0+0x5798>  // b.none
   150c4:	ldrb	w8, [x18, x27]
   150c8:	lsl	w22, w22, #8
   150cc:	add	x27, x27, #0x1
   150d0:	bfi	w8, w20, #8, #24
   150d4:	b	150fc <lzma_mode_is_supported@@XZ_5.0+0x4530>
   150d8:	sub	w22, w22, w10
   150dc:	mov	w10, #0x1                   	// #1
   150e0:	bfi	w10, w25, #1, #31
   150e4:	sub	w8, w12, w12, lsr #5
   150e8:	mov	w25, w10
   150ec:	strh	w8, [x9, x11, lsl #1]
   150f0:	lsr	w8, w22, #24
   150f4:	cbz	w8, 150bc <lzma_mode_is_supported@@XZ_5.0+0x44f0>
   150f8:	mov	w8, w20
   150fc:	ldur	x10, [x29, #-80]
   15100:	mov	w9, #0x6c6c                	// #27756
   15104:	mov	w11, w25
   15108:	add	x9, x10, x9
   1510c:	ldrh	w12, [x9, w25, uxtw #1]
   15110:	lsr	w10, w22, #11
   15114:	mul	w10, w10, w12
   15118:	subs	w20, w8, w10
   1511c:	b.cs	15258 <lzma_mode_is_supported@@XZ_5.0+0x468c>  // b.hs, b.nlast
   15120:	mov	w13, #0x800                 	// #2048
   15124:	sub	w13, w13, w12
   15128:	add	w12, w12, w13, lsr #5
   1512c:	lsl	w25, w25, #1
   15130:	strh	w12, [x9, x11, lsl #1]
   15134:	mov	w22, w10
   15138:	mov	w20, w8
   1513c:	lsr	w8, w22, #24
   15140:	cbnz	w8, 15278 <lzma_mode_is_supported@@XZ_5.0+0x46ac>
   15144:	cmp	x27, x17
   15148:	b.eq	16370 <lzma_mode_is_supported@@XZ_5.0+0x57a4>  // b.none
   1514c:	ldrb	w8, [x18, x27]
   15150:	lsl	w22, w22, #8
   15154:	add	x27, x27, #0x1
   15158:	bfi	w8, w20, #8, #24
   1515c:	b	1527c <lzma_mode_is_supported@@XZ_5.0+0x46b0>
   15160:	sub	w22, w9, w22
   15164:	mov	w9, #0x1                   	// #1
   15168:	bfi	w9, w25, #1, #31
   1516c:	sub	w8, w11, w11, lsr #5
   15170:	mov	w25, w9
   15174:	strh	w8, [x15, x10, lsl #1]
   15178:	lsr	w8, w22, #24
   1517c:	cbz	w8, 15034 <lzma_mode_is_supported@@XZ_5.0+0x4468>
   15180:	mov	w9, w22
   15184:	mov	w8, w20
   15188:	ldrh	w11, [x15, w25, uxtw #1]
   1518c:	lsr	w10, w9, #11
   15190:	mul	w22, w10, w11
   15194:	subs	w20, w8, w22
   15198:	mov	w10, w25
   1519c:	b.cs	151dc <lzma_mode_is_supported@@XZ_5.0+0x4610>  // b.hs, b.nlast
   151a0:	mov	w9, #0x800                 	// #2048
   151a4:	sub	w9, w9, w11
   151a8:	add	w9, w11, w9, lsr #5
   151ac:	lsl	w25, w25, #1
   151b0:	strh	w9, [x15, x10, lsl #1]
   151b4:	mov	w20, w8
   151b8:	lsr	w8, w22, #24
   151bc:	cbnz	w8, 151fc <lzma_mode_is_supported@@XZ_5.0+0x4630>
   151c0:	cmp	x27, x17
   151c4:	b.eq	1637c <lzma_mode_is_supported@@XZ_5.0+0x57b0>  // b.none
   151c8:	ldrb	w8, [x18, x27]
   151cc:	lsl	w9, w22, #8
   151d0:	add	x27, x27, #0x1
   151d4:	bfi	w8, w20, #8, #24
   151d8:	b	15204 <lzma_mode_is_supported@@XZ_5.0+0x4638>
   151dc:	sub	w22, w9, w22
   151e0:	mov	w9, #0x1                   	// #1
   151e4:	bfi	w9, w25, #1, #31
   151e8:	sub	w8, w11, w11, lsr #5
   151ec:	mov	w25, w9
   151f0:	strh	w8, [x15, x10, lsl #1]
   151f4:	lsr	w8, w22, #24
   151f8:	cbz	w8, 151c0 <lzma_mode_is_supported@@XZ_5.0+0x45f4>
   151fc:	mov	w9, w22
   15200:	mov	w8, w20
   15204:	ldrh	w11, [x15, w25, uxtw #1]
   15208:	lsr	w10, w9, #11
   1520c:	mul	w22, w10, w11
   15210:	subs	w20, w8, w22
   15214:	mov	w10, w25
   15218:	b.cs	152e0 <lzma_mode_is_supported@@XZ_5.0+0x4714>  // b.hs, b.nlast
   1521c:	mov	w9, #0x800                 	// #2048
   15220:	sub	w9, w9, w11
   15224:	add	w9, w11, w9, lsr #5
   15228:	lsl	w25, w25, #1
   1522c:	strh	w9, [x15, x10, lsl #1]
   15230:	mov	w20, w8
   15234:	lsr	w8, w22, #24
   15238:	cbnz	w8, 15300 <lzma_mode_is_supported@@XZ_5.0+0x4734>
   1523c:	cmp	x27, x17
   15240:	b.eq	16388 <lzma_mode_is_supported@@XZ_5.0+0x57bc>  // b.none
   15244:	ldrb	w8, [x18, x27]
   15248:	lsl	w9, w22, #8
   1524c:	add	x27, x27, #0x1
   15250:	bfi	w8, w20, #8, #24
   15254:	b	15308 <lzma_mode_is_supported@@XZ_5.0+0x473c>
   15258:	sub	w22, w22, w10
   1525c:	mov	w10, #0x1                   	// #1
   15260:	bfi	w10, w25, #1, #31
   15264:	sub	w8, w12, w12, lsr #5
   15268:	mov	w25, w10
   1526c:	strh	w8, [x9, x11, lsl #1]
   15270:	lsr	w8, w22, #24
   15274:	cbz	w8, 15144 <lzma_mode_is_supported@@XZ_5.0+0x4578>
   15278:	mov	w8, w20
   1527c:	ldur	x10, [x29, #-80]
   15280:	mov	w9, #0x6c6c                	// #27756
   15284:	mov	w11, w25
   15288:	add	x9, x10, x9
   1528c:	ldrh	w12, [x9, w25, uxtw #1]
   15290:	lsr	w10, w22, #11
   15294:	mul	w10, w10, w12
   15298:	subs	w20, w8, w10
   1529c:	b.cs	15488 <lzma_mode_is_supported@@XZ_5.0+0x48bc>  // b.hs, b.nlast
   152a0:	mov	w13, #0x800                 	// #2048
   152a4:	sub	w13, w13, w12
   152a8:	add	w12, w12, w13, lsr #5
   152ac:	lsl	w25, w25, #1
   152b0:	strh	w12, [x9, x11, lsl #1]
   152b4:	mov	w22, w10
   152b8:	mov	w20, w8
   152bc:	lsr	w8, w22, #24
   152c0:	cbnz	w8, 154a8 <lzma_mode_is_supported@@XZ_5.0+0x48dc>
   152c4:	cmp	x27, x17
   152c8:	b.eq	16394 <lzma_mode_is_supported@@XZ_5.0+0x57c8>  // b.none
   152cc:	ldrb	w8, [x18, x27]
   152d0:	lsl	w9, w22, #8
   152d4:	add	x27, x27, #0x1
   152d8:	bfi	w8, w20, #8, #24
   152dc:	b	154b0 <lzma_mode_is_supported@@XZ_5.0+0x48e4>
   152e0:	sub	w22, w9, w22
   152e4:	mov	w9, #0x1                   	// #1
   152e8:	bfi	w9, w25, #1, #31
   152ec:	sub	w8, w11, w11, lsr #5
   152f0:	mov	w25, w9
   152f4:	strh	w8, [x15, x10, lsl #1]
   152f8:	lsr	w8, w22, #24
   152fc:	cbz	w8, 1523c <lzma_mode_is_supported@@XZ_5.0+0x4670>
   15300:	mov	w9, w22
   15304:	mov	w8, w20
   15308:	ldrh	w11, [x15, w25, uxtw #1]
   1530c:	lsr	w10, w9, #11
   15310:	mul	w22, w10, w11
   15314:	subs	w20, w8, w22
   15318:	mov	w10, w25
   1531c:	b.cs	15360 <lzma_mode_is_supported@@XZ_5.0+0x4794>  // b.hs, b.nlast
   15320:	mov	w9, #0x800                 	// #2048
   15324:	sub	w9, w9, w11
   15328:	add	w9, w11, w9, lsr #5
   1532c:	lsl	w25, w25, #1
   15330:	strh	w9, [x15, x10, lsl #1]
   15334:	mov	w20, w8
   15338:	lsr	w8, w22, #24
   1533c:	cbnz	w8, 15380 <lzma_mode_is_supported@@XZ_5.0+0x47b4>
   15340:	cmp	x27, x17
   15344:	b.eq	163a0 <lzma_mode_is_supported@@XZ_5.0+0x57d4>  // b.none
   15348:	ldrb	w26, [x18, x27]
   1534c:	ldur	x21, [x29, #-80]
   15350:	lsl	w8, w22, #8
   15354:	add	x27, x27, #0x1
   15358:	bfi	w26, w20, #8, #24
   1535c:	b	1538c <lzma_mode_is_supported@@XZ_5.0+0x47c0>
   15360:	sub	w22, w9, w22
   15364:	mov	w9, #0x1                   	// #1
   15368:	bfi	w9, w25, #1, #31
   1536c:	sub	w8, w11, w11, lsr #5
   15370:	mov	w25, w9
   15374:	strh	w8, [x15, x10, lsl #1]
   15378:	lsr	w8, w22, #24
   1537c:	cbz	w8, 15340 <lzma_mode_is_supported@@XZ_5.0+0x4774>
   15380:	ldur	x21, [x29, #-80]
   15384:	mov	w8, w22
   15388:	mov	w26, w20
   1538c:	ldrh	w11, [x15, w25, uxtw #1]
   15390:	lsr	w9, w8, #11
   15394:	mov	w10, w25
   15398:	stur	w3, [x29, #-84]
   1539c:	mul	w22, w9, w11
   153a0:	subs	w9, w26, w22
   153a4:	b.cs	153c0 <lzma_mode_is_supported@@XZ_5.0+0x47f4>  // b.hs, b.nlast
   153a8:	mov	w8, #0x800                 	// #2048
   153ac:	sub	w8, w8, w11
   153b0:	add	w8, w11, w8, lsr #5
   153b4:	strh	w8, [x15, x10, lsl #1]
   153b8:	lsl	w8, w25, #1
   153bc:	b	153d8 <lzma_mode_is_supported@@XZ_5.0+0x480c>
   153c0:	sub	w22, w8, w22
   153c4:	mov	w8, #0x1                   	// #1
   153c8:	sub	w11, w11, w11, lsr #5
   153cc:	bfi	w8, w25, #1, #31
   153d0:	mov	w26, w9
   153d4:	strh	w11, [x15, x10, lsl #1]
   153d8:	sub	w19, w8, #0x40
   153dc:	cmp	w19, #0x4
   153e0:	b.cs	153f0 <lzma_mode_is_supported@@XZ_5.0+0x4824>  // b.hs, b.nlast
   153e4:	mov	x23, x15
   153e8:	mov	w25, w19
   153ec:	b	15ffc <lzma_mode_is_supported@@XZ_5.0+0x5430>
   153f0:	mov	w8, #0x2                   	// #2
   153f4:	lsr	w9, w19, #1
   153f8:	cmp	w19, #0xd
   153fc:	bfxil	w8, w19, #0, #1
   15400:	b.hi	15518 <lzma_mode_is_supported@@XZ_5.0+0x494c>  // b.pmore
   15404:	sub	w10, w9, #0x1
   15408:	lsl	w8, w8, w10
   1540c:	ldur	w3, [x29, #-84]
   15410:	stur	w10, [x29, #-96]
   15414:	add	x10, x21, w8, uxtw #1
   15418:	mov	w9, #0x655e                	// #25950
   1541c:	mov	w1, w8
   15420:	sub	x8, x10, w19, uxtw #1
   15424:	mov	w28, wzr
   15428:	add	x15, x8, x9
   1542c:	mov	w25, #0x1                   	// #1
   15430:	mov	w20, w26
   15434:	ldur	w8, [x29, #-96]
   15438:	mov	x23, x15
   1543c:	stur	w3, [x29, #-84]
   15440:	sub	w8, w8, #0x1
   15444:	cmp	w8, #0x4
   15448:	b.hi	15d58 <lzma_mode_is_supported@@XZ_5.0+0x518c>  // b.pmore
   1544c:	adrp	x9, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   15450:	add	x9, x9, #0xed6
   15454:	adr	x10, 15464 <lzma_mode_is_supported@@XZ_5.0+0x4898>
   15458:	ldrh	w11, [x9, x8, lsl #1]
   1545c:	add	x10, x10, x11, lsl #2
   15460:	br	x10
   15464:	lsr	w9, w22, #24
   15468:	cbnz	w9, 15d64 <lzma_mode_is_supported@@XZ_5.0+0x5198>
   1546c:	cmp	x27, x17
   15470:	b.eq	160c8 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   15474:	ldrb	w9, [x18, x27]
   15478:	lsl	w10, w22, #8
   1547c:	add	x27, x27, #0x1
   15480:	bfi	w9, w20, #8, #24
   15484:	b	15d6c <lzma_mode_is_supported@@XZ_5.0+0x51a0>
   15488:	sub	w22, w22, w10
   1548c:	mov	w10, #0x1                   	// #1
   15490:	bfi	w10, w25, #1, #31
   15494:	sub	w8, w12, w12, lsr #5
   15498:	mov	w25, w10
   1549c:	strh	w8, [x9, x11, lsl #1]
   154a0:	lsr	w8, w22, #24
   154a4:	cbz	w8, 152c4 <lzma_mode_is_supported@@XZ_5.0+0x46f8>
   154a8:	mov	w9, w22
   154ac:	mov	w8, w20
   154b0:	ldur	x11, [x29, #-80]
   154b4:	mov	w10, #0x6c6c                	// #27756
   154b8:	mov	w12, w25
   154bc:	add	x10, x11, x10
   154c0:	ldrh	w13, [x10, w25, uxtw #1]
   154c4:	lsr	w11, w9, #11
   154c8:	mul	w22, w11, w13
   154cc:	subs	w11, w8, w22
   154d0:	b.cs	154ec <lzma_mode_is_supported@@XZ_5.0+0x4920>  // b.hs, b.nlast
   154d4:	mov	w9, #0x800                 	// #2048
   154d8:	sub	w9, w9, w13
   154dc:	add	w9, w13, w9, lsr #5
   154e0:	strh	w9, [x10, x12, lsl #1]
   154e4:	lsl	w9, w25, #1
   154e8:	b	15504 <lzma_mode_is_supported@@XZ_5.0+0x4938>
   154ec:	sub	w22, w9, w22
   154f0:	sub	w8, w13, w13, lsr #5
   154f4:	mov	w9, #0x1                   	// #1
   154f8:	strh	w8, [x10, x12, lsl #1]
   154fc:	bfi	w9, w25, #1, #31
   15500:	mov	w8, w11
   15504:	sub	w10, w9, #0xee
   15508:	mov	w25, w9
   1550c:	mov	w20, w8
   15510:	stur	w10, [x29, #-68]
   15514:	b	16020 <lzma_mode_is_supported@@XZ_5.0+0x5454>
   15518:	ldur	w3, [x29, #-84]
   1551c:	ldr	x16, [sp, #96]
   15520:	sub	w9, w9, #0x5
   15524:	mov	w1, w8
   15528:	mov	w25, w19
   1552c:	mov	w20, w26
   15530:	stur	w9, [x29, #-96]
   15534:	ldur	w12, [x29, #-96]
   15538:	mov	w26, w20
   1553c:	mov	w8, w1
   15540:	b	1556c <lzma_mode_is_supported@@XZ_5.0+0x49a0>
   15544:	lsr	w22, w22, #1
   15548:	mov	w9, #0x1                   	// #1
   1554c:	sub	w10, w26, w22
   15550:	bfi	w9, w8, #1, #31
   15554:	asr	w8, w10, #31
   15558:	and	w11, w8, w22
   1555c:	subs	w12, w12, #0x1
   15560:	add	w26, w11, w10
   15564:	add	w8, w9, w8
   15568:	b.eq	15594 <lzma_mode_is_supported@@XZ_5.0+0x49c8>  // b.none
   1556c:	lsr	w9, w22, #24
   15570:	cbnz	w9, 15544 <lzma_mode_is_supported@@XZ_5.0+0x4978>
   15574:	cmp	x27, x17
   15578:	b.eq	16088 <lzma_mode_is_supported@@XZ_5.0+0x54bc>  // b.none
   1557c:	ldrb	w9, [x18, x27]
   15580:	add	x27, x27, #0x1
   15584:	lsl	w22, w22, #8
   15588:	bfi	w9, w26, #8, #24
   1558c:	mov	w26, w9
   15590:	b	15544 <lzma_mode_is_supported@@XZ_5.0+0x4978>
   15594:	lsl	w1, w8, #4
   15598:	mov	w25, #0x1                   	// #1
   1559c:	mov	w20, w26
   155a0:	stur	wzr, [x29, #-96]
   155a4:	lsr	w8, w22, #24
   155a8:	cbnz	w8, 155c8 <lzma_mode_is_supported@@XZ_5.0+0x49fc>
   155ac:	cmp	x27, x17
   155b0:	b.eq	163ac <lzma_mode_is_supported@@XZ_5.0+0x57e0>  // b.none
   155b4:	ldrb	w8, [x18, x27]
   155b8:	lsl	w22, w22, #8
   155bc:	add	x27, x27, #0x1
   155c0:	bfi	w8, w20, #8, #24
   155c4:	b	155cc <lzma_mode_is_supported@@XZ_5.0+0x4a00>
   155c8:	mov	w8, w20
   155cc:	ldur	x10, [x29, #-80]
   155d0:	mov	w9, #0x6644                	// #26180
   155d4:	mov	w11, w25
   155d8:	add	x9, x10, x9
   155dc:	ldrh	w12, [x9, w25, uxtw #1]
   155e0:	lsr	w10, w22, #11
   155e4:	mul	w10, w10, w12
   155e8:	subs	w20, w8, w10
   155ec:	b.cs	15630 <lzma_mode_is_supported@@XZ_5.0+0x4a64>  // b.hs, b.nlast
   155f0:	mov	w13, #0x800                 	// #2048
   155f4:	sub	w13, w13, w12
   155f8:	add	w12, w12, w13, lsr #5
   155fc:	lsl	w25, w25, #1
   15600:	strh	w12, [x9, x11, lsl #1]
   15604:	mov	w22, w10
   15608:	mov	w20, w8
   1560c:	lsr	w8, w22, #24
   15610:	cbnz	w8, 15654 <lzma_mode_is_supported@@XZ_5.0+0x4a88>
   15614:	cmp	x27, x17
   15618:	b.eq	163b8 <lzma_mode_is_supported@@XZ_5.0+0x57ec>  // b.none
   1561c:	ldrb	w8, [x18, x27]
   15620:	lsl	w22, w22, #8
   15624:	add	x27, x27, #0x1
   15628:	bfi	w8, w20, #8, #24
   1562c:	b	15658 <lzma_mode_is_supported@@XZ_5.0+0x4a8c>
   15630:	sub	w22, w22, w10
   15634:	mov	w10, #0x1                   	// #1
   15638:	bfi	w10, w25, #1, #31
   1563c:	sub	w8, w12, w12, lsr #5
   15640:	add	w1, w1, #0x1
   15644:	mov	w25, w10
   15648:	strh	w8, [x9, x11, lsl #1]
   1564c:	lsr	w8, w22, #24
   15650:	cbz	w8, 15614 <lzma_mode_is_supported@@XZ_5.0+0x4a48>
   15654:	mov	w8, w20
   15658:	ldur	x10, [x29, #-80]
   1565c:	mov	w9, #0x6644                	// #26180
   15660:	mov	w11, w25
   15664:	add	x9, x10, x9
   15668:	ldrh	w12, [x9, w25, uxtw #1]
   1566c:	lsr	w10, w22, #11
   15670:	mul	w10, w10, w12
   15674:	subs	w20, w8, w10
   15678:	b.cs	156bc <lzma_mode_is_supported@@XZ_5.0+0x4af0>  // b.hs, b.nlast
   1567c:	mov	w13, #0x800                 	// #2048
   15680:	sub	w13, w13, w12
   15684:	add	w12, w12, w13, lsr #5
   15688:	lsl	w25, w25, #1
   1568c:	strh	w12, [x9, x11, lsl #1]
   15690:	mov	w22, w10
   15694:	mov	w20, w8
   15698:	lsr	w8, w22, #24
   1569c:	cbnz	w8, 156e0 <lzma_mode_is_supported@@XZ_5.0+0x4b14>
   156a0:	cmp	x27, x17
   156a4:	b.eq	163c4 <lzma_mode_is_supported@@XZ_5.0+0x57f8>  // b.none
   156a8:	ldrb	w8, [x18, x27]
   156ac:	lsl	w22, w22, #8
   156b0:	add	x27, x27, #0x1
   156b4:	bfi	w8, w20, #8, #24
   156b8:	b	156e4 <lzma_mode_is_supported@@XZ_5.0+0x4b18>
   156bc:	sub	w22, w22, w10
   156c0:	mov	w10, #0x1                   	// #1
   156c4:	bfi	w10, w25, #1, #31
   156c8:	sub	w8, w12, w12, lsr #5
   156cc:	add	w1, w1, #0x2
   156d0:	mov	w25, w10
   156d4:	strh	w8, [x9, x11, lsl #1]
   156d8:	lsr	w8, w22, #24
   156dc:	cbz	w8, 156a0 <lzma_mode_is_supported@@XZ_5.0+0x4ad4>
   156e0:	mov	w8, w20
   156e4:	ldur	x10, [x29, #-80]
   156e8:	mov	w9, #0x6644                	// #26180
   156ec:	mov	w11, w25
   156f0:	add	x9, x10, x9
   156f4:	ldrh	w12, [x9, w25, uxtw #1]
   156f8:	lsr	w10, w22, #11
   156fc:	mul	w10, w10, w12
   15700:	subs	w20, w8, w10
   15704:	b.cs	1574c <lzma_mode_is_supported@@XZ_5.0+0x4b80>  // b.hs, b.nlast
   15708:	mov	w13, #0x800                 	// #2048
   1570c:	sub	w13, w13, w12
   15710:	add	w12, w12, w13, lsr #5
   15714:	lsl	w25, w25, #1
   15718:	strh	w12, [x9, x11, lsl #1]
   1571c:	mov	w22, w10
   15720:	mov	w20, w8
   15724:	lsr	w8, w22, #24
   15728:	cbnz	w8, 15770 <lzma_mode_is_supported@@XZ_5.0+0x4ba4>
   1572c:	cmp	x27, x17
   15730:	b.eq	163d0 <lzma_mode_is_supported@@XZ_5.0+0x5804>  // b.none
   15734:	ldrb	w26, [x18, x27]
   15738:	ldur	x21, [x29, #-80]
   1573c:	lsl	w8, w22, #8
   15740:	add	x27, x27, #0x1
   15744:	bfi	w26, w20, #8, #24
   15748:	b	1577c <lzma_mode_is_supported@@XZ_5.0+0x4bb0>
   1574c:	sub	w22, w22, w10
   15750:	mov	w10, #0x1                   	// #1
   15754:	bfi	w10, w25, #1, #31
   15758:	sub	w8, w12, w12, lsr #5
   1575c:	add	w1, w1, #0x4
   15760:	mov	w25, w10
   15764:	strh	w8, [x9, x11, lsl #1]
   15768:	lsr	w8, w22, #24
   1576c:	cbz	w8, 1572c <lzma_mode_is_supported@@XZ_5.0+0x4b60>
   15770:	ldur	x21, [x29, #-80]
   15774:	mov	w8, w22
   15778:	mov	w26, w20
   1577c:	mov	w9, #0x6644                	// #26180
   15780:	add	x9, x21, x9
   15784:	ldrh	w10, [x9, w25, uxtw #1]
   15788:	lsr	w11, w8, #11
   1578c:	mov	w12, w25
   15790:	stur	w3, [x29, #-84]
   15794:	mul	w22, w11, w10
   15798:	subs	w11, w26, w22
   1579c:	b.cs	157c4 <lzma_mode_is_supported@@XZ_5.0+0x4bf8>  // b.hs, b.nlast
   157a0:	mov	w8, #0x800                 	// #2048
   157a4:	sub	w8, w8, w10
   157a8:	add	w8, w10, w8, lsr #5
   157ac:	strh	w8, [x9, x12, lsl #1]
   157b0:	mov	w19, w1
   157b4:	cmn	w19, #0x1
   157b8:	b.eq	157e0 <lzma_mode_is_supported@@XZ_5.0+0x4c14>  // b.none
   157bc:	mov	x23, x15
   157c0:	b	15ffc <lzma_mode_is_supported@@XZ_5.0+0x5430>
   157c4:	sub	w22, w8, w22
   157c8:	sub	w8, w10, w10, lsr #5
   157cc:	add	w19, w1, #0x8
   157d0:	mov	w26, w11
   157d4:	strh	w8, [x9, x12, lsl #1]
   157d8:	cmn	w19, #0x1
   157dc:	b.ne	157bc <lzma_mode_is_supported@@XZ_5.0+0x4bf0>  // b.any
   157e0:	ldr	x8, [x21, #28312]
   157e4:	cmn	x8, #0x1
   157e8:	b.eq	16050 <lzma_mode_is_supported@@XZ_5.0+0x5484>  // b.none
   157ec:	ldur	w3, [x29, #-84]
   157f0:	ldr	x16, [sp, #96]
   157f4:	mov	w0, #0x9                   	// #9
   157f8:	mov	w1, #0xffffffff            	// #-1
   157fc:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   15800:	sub	x0, x29, #0x40
   15804:	mov	w1, w23
   15808:	mov	x20, x15
   1580c:	mov	w19, w3
   15810:	bl	16ac0 <lzma_mode_is_supported@@XZ_5.0+0x5ef4>
   15814:	ldr	x17, [sp, #104]
   15818:	and	w8, w0, #0xff
   1581c:	mov	w3, w19
   15820:	mov	w1, w23
   15824:	mov	x15, x20
   15828:	mov	w25, #0x1                   	// #1
   1582c:	lsl	w8, w8, #1
   15830:	mov	w20, w26
   15834:	mov	x16, x24
   15838:	mov	w28, #0x100                 	// #256
   1583c:	mov	x18, x21
   15840:	stur	w8, [x29, #-68]
   15844:	ldur	w8, [x29, #-68]
   15848:	lsr	w9, w22, #24
   1584c:	cbnz	w9, 1586c <lzma_mode_is_supported@@XZ_5.0+0x4ca0>
   15850:	cmp	x27, x17
   15854:	b.eq	163dc <lzma_mode_is_supported@@XZ_5.0+0x5810>  // b.none
   15858:	ldrb	w9, [x18, x27]
   1585c:	lsl	w11, w22, #8
   15860:	add	x27, x27, #0x1
   15864:	bfi	w9, w20, #8, #24
   15868:	b	15874 <lzma_mode_is_supported@@XZ_5.0+0x4ca8>
   1586c:	mov	w11, w22
   15870:	mov	w9, w20
   15874:	and	w10, w8, w28
   15878:	add	w12, w28, w25
   1587c:	add	w12, w12, w10
   15880:	ldrh	w13, [x15, w12, uxtw #1]
   15884:	lsr	w14, w11, #11
   15888:	mov	w12, w12
   1588c:	mul	w22, w14, w13
   15890:	subs	w14, w9, w22
   15894:	b.cs	158b4 <lzma_mode_is_supported@@XZ_5.0+0x4ce8>  // b.hs, b.nlast
   15898:	mov	w14, #0x800                 	// #2048
   1589c:	sub	w14, w14, w13
   158a0:	add	w13, w13, w14, lsr #5
   158a4:	lsl	w11, w25, #1
   158a8:	strh	w13, [x15, x12, lsl #1]
   158ac:	eor	w10, w10, w28
   158b0:	b	158cc <lzma_mode_is_supported@@XZ_5.0+0x4d00>
   158b4:	sub	w22, w11, w22
   158b8:	sub	w9, w13, w13, lsr #5
   158bc:	mov	w11, #0x1                   	// #1
   158c0:	strh	w9, [x15, x12, lsl #1]
   158c4:	bfi	w11, w25, #1, #31
   158c8:	mov	w9, w14
   158cc:	lsl	w8, w8, #1
   158d0:	mov	w25, w11
   158d4:	mov	w28, w10
   158d8:	mov	w20, w9
   158dc:	stur	w8, [x29, #-68]
   158e0:	ldur	w8, [x29, #-68]
   158e4:	lsr	w9, w22, #24
   158e8:	cbnz	w9, 15908 <lzma_mode_is_supported@@XZ_5.0+0x4d3c>
   158ec:	cmp	x27, x17
   158f0:	b.eq	163e8 <lzma_mode_is_supported@@XZ_5.0+0x581c>  // b.none
   158f4:	ldrb	w9, [x18, x27]
   158f8:	lsl	w11, w22, #8
   158fc:	add	x27, x27, #0x1
   15900:	bfi	w9, w20, #8, #24
   15904:	b	15910 <lzma_mode_is_supported@@XZ_5.0+0x4d44>
   15908:	mov	w11, w22
   1590c:	mov	w9, w20
   15910:	and	w10, w8, w28
   15914:	add	w12, w28, w25
   15918:	add	w12, w12, w10
   1591c:	ldrh	w13, [x15, w12, uxtw #1]
   15920:	lsr	w14, w11, #11
   15924:	mov	w12, w12
   15928:	mul	w22, w14, w13
   1592c:	subs	w14, w9, w22
   15930:	b.cs	15950 <lzma_mode_is_supported@@XZ_5.0+0x4d84>  // b.hs, b.nlast
   15934:	mov	w14, #0x800                 	// #2048
   15938:	sub	w14, w14, w13
   1593c:	add	w13, w13, w14, lsr #5
   15940:	lsl	w11, w25, #1
   15944:	strh	w13, [x15, x12, lsl #1]
   15948:	eor	w10, w10, w28
   1594c:	b	15968 <lzma_mode_is_supported@@XZ_5.0+0x4d9c>
   15950:	sub	w22, w11, w22
   15954:	sub	w9, w13, w13, lsr #5
   15958:	mov	w11, #0x1                   	// #1
   1595c:	strh	w9, [x15, x12, lsl #1]
   15960:	bfi	w11, w25, #1, #31
   15964:	mov	w9, w14
   15968:	lsl	w8, w8, #1
   1596c:	mov	w25, w11
   15970:	mov	w28, w10
   15974:	mov	w20, w9
   15978:	stur	w8, [x29, #-68]
   1597c:	ldur	w8, [x29, #-68]
   15980:	lsr	w9, w22, #24
   15984:	cbnz	w9, 159a4 <lzma_mode_is_supported@@XZ_5.0+0x4dd8>
   15988:	cmp	x27, x17
   1598c:	b.eq	163f4 <lzma_mode_is_supported@@XZ_5.0+0x5828>  // b.none
   15990:	ldrb	w9, [x18, x27]
   15994:	lsl	w11, w22, #8
   15998:	add	x27, x27, #0x1
   1599c:	bfi	w9, w20, #8, #24
   159a0:	b	159ac <lzma_mode_is_supported@@XZ_5.0+0x4de0>
   159a4:	mov	w11, w22
   159a8:	mov	w9, w20
   159ac:	and	w10, w8, w28
   159b0:	add	w12, w28, w25
   159b4:	add	w12, w12, w10
   159b8:	ldrh	w13, [x15, w12, uxtw #1]
   159bc:	lsr	w14, w11, #11
   159c0:	mov	w12, w12
   159c4:	mul	w22, w14, w13
   159c8:	subs	w14, w9, w22
   159cc:	b.cs	159ec <lzma_mode_is_supported@@XZ_5.0+0x4e20>  // b.hs, b.nlast
   159d0:	mov	w14, #0x800                 	// #2048
   159d4:	sub	w14, w14, w13
   159d8:	add	w13, w13, w14, lsr #5
   159dc:	lsl	w11, w25, #1
   159e0:	strh	w13, [x15, x12, lsl #1]
   159e4:	eor	w10, w10, w28
   159e8:	b	15a04 <lzma_mode_is_supported@@XZ_5.0+0x4e38>
   159ec:	sub	w22, w11, w22
   159f0:	sub	w9, w13, w13, lsr #5
   159f4:	mov	w11, #0x1                   	// #1
   159f8:	strh	w9, [x15, x12, lsl #1]
   159fc:	bfi	w11, w25, #1, #31
   15a00:	mov	w9, w14
   15a04:	lsl	w8, w8, #1
   15a08:	mov	w25, w11
   15a0c:	mov	w28, w10
   15a10:	mov	w20, w9
   15a14:	stur	w8, [x29, #-68]
   15a18:	ldur	w8, [x29, #-68]
   15a1c:	lsr	w9, w22, #24
   15a20:	cbnz	w9, 15a40 <lzma_mode_is_supported@@XZ_5.0+0x4e74>
   15a24:	cmp	x27, x17
   15a28:	b.eq	16400 <lzma_mode_is_supported@@XZ_5.0+0x5834>  // b.none
   15a2c:	ldrb	w9, [x18, x27]
   15a30:	lsl	w11, w22, #8
   15a34:	add	x27, x27, #0x1
   15a38:	bfi	w9, w20, #8, #24
   15a3c:	b	15a48 <lzma_mode_is_supported@@XZ_5.0+0x4e7c>
   15a40:	mov	w11, w22
   15a44:	mov	w9, w20
   15a48:	and	w10, w8, w28
   15a4c:	add	w12, w28, w25
   15a50:	add	w12, w12, w10
   15a54:	ldrh	w13, [x15, w12, uxtw #1]
   15a58:	lsr	w14, w11, #11
   15a5c:	mov	w12, w12
   15a60:	mul	w22, w14, w13
   15a64:	subs	w14, w9, w22
   15a68:	b.cs	15a88 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>  // b.hs, b.nlast
   15a6c:	mov	w14, #0x800                 	// #2048
   15a70:	sub	w14, w14, w13
   15a74:	add	w13, w13, w14, lsr #5
   15a78:	lsl	w11, w25, #1
   15a7c:	strh	w13, [x15, x12, lsl #1]
   15a80:	eor	w10, w10, w28
   15a84:	b	15aa0 <lzma_mode_is_supported@@XZ_5.0+0x4ed4>
   15a88:	sub	w22, w11, w22
   15a8c:	sub	w9, w13, w13, lsr #5
   15a90:	mov	w11, #0x1                   	// #1
   15a94:	strh	w9, [x15, x12, lsl #1]
   15a98:	bfi	w11, w25, #1, #31
   15a9c:	mov	w9, w14
   15aa0:	lsl	w8, w8, #1
   15aa4:	mov	w25, w11
   15aa8:	mov	w28, w10
   15aac:	mov	w20, w9
   15ab0:	stur	w8, [x29, #-68]
   15ab4:	ldur	w8, [x29, #-68]
   15ab8:	lsr	w9, w22, #24
   15abc:	cbnz	w9, 15adc <lzma_mode_is_supported@@XZ_5.0+0x4f10>
   15ac0:	cmp	x27, x17
   15ac4:	b.eq	1640c <lzma_mode_is_supported@@XZ_5.0+0x5840>  // b.none
   15ac8:	ldrb	w9, [x18, x27]
   15acc:	lsl	w11, w22, #8
   15ad0:	add	x27, x27, #0x1
   15ad4:	bfi	w9, w20, #8, #24
   15ad8:	b	15ae4 <lzma_mode_is_supported@@XZ_5.0+0x4f18>
   15adc:	mov	w11, w22
   15ae0:	mov	w9, w20
   15ae4:	and	w10, w8, w28
   15ae8:	add	w12, w28, w25
   15aec:	add	w12, w12, w10
   15af0:	ldrh	w13, [x15, w12, uxtw #1]
   15af4:	lsr	w14, w11, #11
   15af8:	mov	w12, w12
   15afc:	mul	w22, w14, w13
   15b00:	subs	w14, w9, w22
   15b04:	b.cs	15b24 <lzma_mode_is_supported@@XZ_5.0+0x4f58>  // b.hs, b.nlast
   15b08:	mov	w14, #0x800                 	// #2048
   15b0c:	sub	w14, w14, w13
   15b10:	add	w13, w13, w14, lsr #5
   15b14:	lsl	w11, w25, #1
   15b18:	strh	w13, [x15, x12, lsl #1]
   15b1c:	eor	w10, w10, w28
   15b20:	b	15b3c <lzma_mode_is_supported@@XZ_5.0+0x4f70>
   15b24:	sub	w22, w11, w22
   15b28:	sub	w9, w13, w13, lsr #5
   15b2c:	mov	w11, #0x1                   	// #1
   15b30:	strh	w9, [x15, x12, lsl #1]
   15b34:	bfi	w11, w25, #1, #31
   15b38:	mov	w9, w14
   15b3c:	lsl	w8, w8, #1
   15b40:	mov	w25, w11
   15b44:	mov	w28, w10
   15b48:	mov	w20, w9
   15b4c:	stur	w8, [x29, #-68]
   15b50:	ldur	w8, [x29, #-68]
   15b54:	lsr	w9, w22, #24
   15b58:	cbnz	w9, 15b78 <lzma_mode_is_supported@@XZ_5.0+0x4fac>
   15b5c:	cmp	x27, x17
   15b60:	b.eq	16418 <lzma_mode_is_supported@@XZ_5.0+0x584c>  // b.none
   15b64:	ldrb	w9, [x18, x27]
   15b68:	lsl	w11, w22, #8
   15b6c:	add	x27, x27, #0x1
   15b70:	bfi	w9, w20, #8, #24
   15b74:	b	15b80 <lzma_mode_is_supported@@XZ_5.0+0x4fb4>
   15b78:	mov	w11, w22
   15b7c:	mov	w9, w20
   15b80:	and	w10, w8, w28
   15b84:	add	w12, w28, w25
   15b88:	add	w12, w12, w10
   15b8c:	ldrh	w13, [x15, w12, uxtw #1]
   15b90:	lsr	w14, w11, #11
   15b94:	mov	w12, w12
   15b98:	mul	w22, w14, w13
   15b9c:	subs	w14, w9, w22
   15ba0:	b.cs	15bc0 <lzma_mode_is_supported@@XZ_5.0+0x4ff4>  // b.hs, b.nlast
   15ba4:	mov	w14, #0x800                 	// #2048
   15ba8:	sub	w14, w14, w13
   15bac:	add	w13, w13, w14, lsr #5
   15bb0:	lsl	w11, w25, #1
   15bb4:	strh	w13, [x15, x12, lsl #1]
   15bb8:	eor	w10, w10, w28
   15bbc:	b	15bd8 <lzma_mode_is_supported@@XZ_5.0+0x500c>
   15bc0:	sub	w22, w11, w22
   15bc4:	sub	w9, w13, w13, lsr #5
   15bc8:	mov	w11, #0x1                   	// #1
   15bcc:	strh	w9, [x15, x12, lsl #1]
   15bd0:	bfi	w11, w25, #1, #31
   15bd4:	mov	w9, w14
   15bd8:	lsl	w8, w8, #1
   15bdc:	mov	w25, w11
   15be0:	mov	w28, w10
   15be4:	mov	w20, w9
   15be8:	stur	w8, [x29, #-68]
   15bec:	ldur	w8, [x29, #-68]
   15bf0:	lsr	w9, w22, #24
   15bf4:	cbnz	w9, 15c14 <lzma_mode_is_supported@@XZ_5.0+0x5048>
   15bf8:	cmp	x27, x17
   15bfc:	b.eq	16424 <lzma_mode_is_supported@@XZ_5.0+0x5858>  // b.none
   15c00:	ldrb	w9, [x18, x27]
   15c04:	lsl	w11, w22, #8
   15c08:	add	x27, x27, #0x1
   15c0c:	bfi	w9, w20, #8, #24
   15c10:	b	15c1c <lzma_mode_is_supported@@XZ_5.0+0x5050>
   15c14:	mov	w11, w22
   15c18:	mov	w9, w20
   15c1c:	and	w10, w8, w28
   15c20:	add	w12, w28, w25
   15c24:	add	w12, w12, w10
   15c28:	ldrh	w13, [x15, w12, uxtw #1]
   15c2c:	lsr	w14, w11, #11
   15c30:	mov	w12, w12
   15c34:	mul	w22, w14, w13
   15c38:	subs	w14, w9, w22
   15c3c:	b.cs	15c5c <lzma_mode_is_supported@@XZ_5.0+0x5090>  // b.hs, b.nlast
   15c40:	mov	w14, #0x800                 	// #2048
   15c44:	sub	w14, w14, w13
   15c48:	add	w13, w13, w14, lsr #5
   15c4c:	lsl	w11, w25, #1
   15c50:	strh	w13, [x15, x12, lsl #1]
   15c54:	eor	w10, w10, w28
   15c58:	b	15c74 <lzma_mode_is_supported@@XZ_5.0+0x50a8>
   15c5c:	sub	w22, w11, w22
   15c60:	sub	w9, w13, w13, lsr #5
   15c64:	mov	w11, #0x1                   	// #1
   15c68:	strh	w9, [x15, x12, lsl #1]
   15c6c:	bfi	w11, w25, #1, #31
   15c70:	mov	w9, w14
   15c74:	lsl	w8, w8, #1
   15c78:	mov	w25, w11
   15c7c:	mov	w28, w10
   15c80:	mov	w20, w9
   15c84:	stur	w8, [x29, #-68]
   15c88:	ldur	w9, [x29, #-68]
   15c8c:	lsr	w8, w22, #24
   15c90:	cbnz	w8, 15cb0 <lzma_mode_is_supported@@XZ_5.0+0x50e4>
   15c94:	cmp	x27, x17
   15c98:	b.eq	16430 <lzma_mode_is_supported@@XZ_5.0+0x5864>  // b.none
   15c9c:	ldrb	w8, [x18, x27]
   15ca0:	lsl	w10, w22, #8
   15ca4:	add	x27, x27, #0x1
   15ca8:	bfi	w8, w20, #8, #24
   15cac:	b	15cb8 <lzma_mode_is_supported@@XZ_5.0+0x50ec>
   15cb0:	mov	w10, w22
   15cb4:	mov	w8, w20
   15cb8:	and	w9, w9, w28
   15cbc:	add	w11, w28, w25
   15cc0:	add	w12, w11, w9
   15cc4:	ldrh	w13, [x15, w12, uxtw #1]
   15cc8:	lsr	w11, w10, #11
   15ccc:	mov	w12, w12
   15cd0:	mul	w22, w11, w13
   15cd4:	subs	w11, w8, w22
   15cd8:	b.cs	15cf8 <lzma_mode_is_supported@@XZ_5.0+0x512c>  // b.hs, b.nlast
   15cdc:	mov	w11, #0x800                 	// #2048
   15ce0:	sub	w11, w11, w13
   15ce4:	add	w11, w13, w11, lsr #5
   15ce8:	lsl	w10, w25, #1
   15cec:	strh	w11, [x15, x12, lsl #1]
   15cf0:	eor	w9, w9, w28
   15cf4:	b	15d10 <lzma_mode_is_supported@@XZ_5.0+0x5144>
   15cf8:	sub	w22, w10, w22
   15cfc:	mov	w10, #0x1                   	// #1
   15d00:	sub	w8, w13, w13, lsr #5
   15d04:	bfi	w10, w25, #1, #31
   15d08:	strh	w8, [x15, x12, lsl #1]
   15d0c:	mov	w8, w11
   15d10:	adrp	x11, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   15d14:	add	x11, x11, #0xee0
   15d18:	ldr	w3, [x11, w3, uxtw #2]
   15d1c:	mov	w25, w10
   15d20:	mov	w28, w9
   15d24:	mov	w20, w8
   15d28:	mov	w26, w28
   15d2c:	mov	w28, w1
   15d30:	sub	x0, x29, #0x40
   15d34:	mov	w1, w25
   15d38:	mov	w24, w3
   15d3c:	mov	x19, x16
   15d40:	mov	x23, x15
   15d44:	bl	16af0 <lzma_mode_is_supported@@XZ_5.0+0x5f24>
   15d48:	tbz	w0, #0, 16044 <lzma_mode_is_supported@@XZ_5.0+0x5478>
   15d4c:	mov	w0, wzr
   15d50:	mov	w8, #0x12                  	// #18
   15d54:	b	16108 <lzma_mode_is_supported@@XZ_5.0+0x553c>
   15d58:	mov	w19, w1
   15d5c:	mov	w26, w20
   15d60:	b	15ffc <lzma_mode_is_supported@@XZ_5.0+0x5430>
   15d64:	mov	w10, w22
   15d68:	mov	w9, w20
   15d6c:	ldrh	w13, [x15, w25, uxtw #1]
   15d70:	lsr	w11, w10, #11
   15d74:	mov	w12, w25
   15d78:	mul	w22, w11, w13
   15d7c:	subs	w11, w9, w22
   15d80:	b.cs	15d9c <lzma_mode_is_supported@@XZ_5.0+0x51d0>  // b.hs, b.nlast
   15d84:	mov	w10, #0x800                 	// #2048
   15d88:	sub	w10, w10, w13
   15d8c:	add	w10, w13, w10, lsr #5
   15d90:	strh	w10, [x15, x12, lsl #1]
   15d94:	lsl	w10, w25, #1
   15d98:	b	15db8 <lzma_mode_is_supported@@XZ_5.0+0x51ec>
   15d9c:	sub	w22, w10, w22
   15da0:	sub	w9, w13, w13, lsr #5
   15da4:	mov	w10, #0x1                   	// #1
   15da8:	add	w1, w1, #0x1
   15dac:	strh	w9, [x15, x12, lsl #1]
   15db0:	bfi	w10, w25, #1, #31
   15db4:	mov	w9, w11
   15db8:	add	w28, w28, #0x1
   15dbc:	mov	w25, w10
   15dc0:	mov	w20, w9
   15dc4:	stur	w8, [x29, #-96]
   15dc8:	lsr	w8, w22, #24
   15dcc:	cbnz	w8, 15dec <lzma_mode_is_supported@@XZ_5.0+0x5220>
   15dd0:	cmp	x27, x17
   15dd4:	b.eq	160c8 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   15dd8:	ldrb	w8, [x18, x27]
   15ddc:	lsl	w9, w22, #8
   15de0:	add	x27, x27, #0x1
   15de4:	bfi	w8, w20, #8, #24
   15de8:	b	15df4 <lzma_mode_is_supported@@XZ_5.0+0x5228>
   15dec:	mov	w9, w22
   15df0:	mov	w8, w20
   15df4:	ldrh	w12, [x15, w25, uxtw #1]
   15df8:	lsr	w10, w9, #11
   15dfc:	mov	w11, w25
   15e00:	mul	w22, w10, w12
   15e04:	subs	w10, w8, w22
   15e08:	b.cs	15e24 <lzma_mode_is_supported@@XZ_5.0+0x5258>  // b.hs, b.nlast
   15e0c:	mov	w9, #0x800                 	// #2048
   15e10:	sub	w9, w9, w12
   15e14:	add	w9, w12, w9, lsr #5
   15e18:	strh	w9, [x15, x11, lsl #1]
   15e1c:	lsl	w9, w25, #1
   15e20:	b	15e44 <lzma_mode_is_supported@@XZ_5.0+0x5278>
   15e24:	sub	w22, w9, w22
   15e28:	sub	w8, w12, w12, lsr #5
   15e2c:	mov	w9, #0x1                   	// #1
   15e30:	strh	w8, [x15, x11, lsl #1]
   15e34:	lsl	w8, w9, w28
   15e38:	add	w1, w8, w1
   15e3c:	bfi	w9, w25, #1, #31
   15e40:	mov	w8, w10
   15e44:	ldur	w10, [x29, #-96]
   15e48:	add	w28, w28, #0x1
   15e4c:	mov	w25, w9
   15e50:	mov	w20, w8
   15e54:	sub	w10, w10, #0x1
   15e58:	stur	w10, [x29, #-96]
   15e5c:	lsr	w8, w22, #24
   15e60:	cbnz	w8, 15e80 <lzma_mode_is_supported@@XZ_5.0+0x52b4>
   15e64:	cmp	x27, x17
   15e68:	b.eq	160c8 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   15e6c:	ldrb	w8, [x18, x27]
   15e70:	lsl	w9, w22, #8
   15e74:	add	x27, x27, #0x1
   15e78:	bfi	w8, w20, #8, #24
   15e7c:	b	15e88 <lzma_mode_is_supported@@XZ_5.0+0x52bc>
   15e80:	mov	w9, w22
   15e84:	mov	w8, w20
   15e88:	ldrh	w12, [x15, w25, uxtw #1]
   15e8c:	lsr	w10, w9, #11
   15e90:	mov	w11, w25
   15e94:	mul	w22, w10, w12
   15e98:	subs	w10, w8, w22
   15e9c:	b.cs	15eb8 <lzma_mode_is_supported@@XZ_5.0+0x52ec>  // b.hs, b.nlast
   15ea0:	mov	w9, #0x800                 	// #2048
   15ea4:	sub	w9, w9, w12
   15ea8:	add	w9, w12, w9, lsr #5
   15eac:	strh	w9, [x15, x11, lsl #1]
   15eb0:	lsl	w9, w25, #1
   15eb4:	b	15ed8 <lzma_mode_is_supported@@XZ_5.0+0x530c>
   15eb8:	sub	w22, w9, w22
   15ebc:	sub	w8, w12, w12, lsr #5
   15ec0:	mov	w9, #0x1                   	// #1
   15ec4:	strh	w8, [x15, x11, lsl #1]
   15ec8:	lsl	w8, w9, w28
   15ecc:	add	w1, w8, w1
   15ed0:	bfi	w9, w25, #1, #31
   15ed4:	mov	w8, w10
   15ed8:	ldur	w10, [x29, #-96]
   15edc:	add	w28, w28, #0x1
   15ee0:	mov	w25, w9
   15ee4:	mov	w20, w8
   15ee8:	sub	w10, w10, #0x1
   15eec:	stur	w10, [x29, #-96]
   15ef0:	lsr	w8, w22, #24
   15ef4:	cbnz	w8, 15f14 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   15ef8:	cmp	x27, x17
   15efc:	b.eq	160c8 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   15f00:	ldrb	w8, [x18, x27]
   15f04:	lsl	w9, w22, #8
   15f08:	add	x27, x27, #0x1
   15f0c:	bfi	w8, w20, #8, #24
   15f10:	b	15f1c <lzma_mode_is_supported@@XZ_5.0+0x5350>
   15f14:	mov	w9, w22
   15f18:	mov	w8, w20
   15f1c:	ldrh	w12, [x15, w25, uxtw #1]
   15f20:	lsr	w10, w9, #11
   15f24:	mov	w11, w25
   15f28:	mul	w22, w10, w12
   15f2c:	subs	w10, w8, w22
   15f30:	b.cs	15f4c <lzma_mode_is_supported@@XZ_5.0+0x5380>  // b.hs, b.nlast
   15f34:	mov	w9, #0x800                 	// #2048
   15f38:	sub	w9, w9, w12
   15f3c:	add	w9, w12, w9, lsr #5
   15f40:	strh	w9, [x15, x11, lsl #1]
   15f44:	lsl	w9, w25, #1
   15f48:	b	15f6c <lzma_mode_is_supported@@XZ_5.0+0x53a0>
   15f4c:	sub	w22, w9, w22
   15f50:	sub	w8, w12, w12, lsr #5
   15f54:	mov	w9, #0x1                   	// #1
   15f58:	strh	w8, [x15, x11, lsl #1]
   15f5c:	lsl	w8, w9, w28
   15f60:	add	w1, w8, w1
   15f64:	bfi	w9, w25, #1, #31
   15f68:	mov	w8, w10
   15f6c:	ldur	w10, [x29, #-96]
   15f70:	add	w28, w28, #0x1
   15f74:	mov	w25, w9
   15f78:	mov	w20, w8
   15f7c:	sub	w10, w10, #0x1
   15f80:	stur	w10, [x29, #-96]
   15f84:	lsr	w8, w22, #24
   15f88:	cbnz	w8, 15fa8 <lzma_mode_is_supported@@XZ_5.0+0x53dc>
   15f8c:	cmp	x27, x17
   15f90:	b.eq	160c8 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   15f94:	ldrb	w26, [x18, x27]
   15f98:	lsl	w9, w22, #8
   15f9c:	add	x27, x27, #0x1
   15fa0:	bfi	w26, w20, #8, #24
   15fa4:	b	15fb0 <lzma_mode_is_supported@@XZ_5.0+0x53e4>
   15fa8:	mov	w9, w22
   15fac:	mov	w26, w20
   15fb0:	ldrh	w11, [x15, w25, uxtw #1]
   15fb4:	lsr	w8, w9, #11
   15fb8:	mov	w10, w25
   15fbc:	mul	w22, w8, w11
   15fc0:	subs	w8, w26, w22
   15fc4:	b.cs	15fe0 <lzma_mode_is_supported@@XZ_5.0+0x5414>  // b.hs, b.nlast
   15fc8:	mov	w8, #0x800                 	// #2048
   15fcc:	sub	w8, w8, w11
   15fd0:	add	w8, w11, w8, lsr #5
   15fd4:	strh	w8, [x15, x10, lsl #1]
   15fd8:	mov	w19, w1
   15fdc:	b	15ffc <lzma_mode_is_supported@@XZ_5.0+0x5430>
   15fe0:	sub	w22, w9, w22
   15fe4:	sub	w9, w11, w11, lsr #5
   15fe8:	mov	w11, #0x1                   	// #1
   15fec:	strh	w9, [x15, x10, lsl #1]
   15ff0:	lsl	w9, w11, w28
   15ff4:	add	w19, w9, w1
   15ff8:	mov	w26, w8
   15ffc:	mov	w1, w19
   16000:	sub	x0, x29, #0x40
   16004:	bl	16b30 <lzma_mode_is_supported@@XZ_5.0+0x5f64>
   16008:	tbz	w0, #0, 160b0 <lzma_mode_is_supported@@XZ_5.0+0x54e4>
   1600c:	ldur	w3, [x29, #-84]
   16010:	ldr	x16, [sp, #96]
   16014:	mov	w1, w19
   16018:	mov	w20, w26
   1601c:	mov	x15, x23
   16020:	sub	x0, x29, #0x40
   16024:	sub	x2, x29, #0x44
   16028:	mov	w26, w28
   1602c:	mov	w24, w3
   16030:	mov	x19, x16
   16034:	mov	x23, x15
   16038:	mov	w28, w1
   1603c:	bl	16b40 <lzma_mode_is_supported@@XZ_5.0+0x5f74>
   16040:	tbnz	w0, #0, 16100 <lzma_mode_is_supported@@XZ_5.0+0x5534>
   16044:	mov	w0, w28
   16048:	mov	w28, w26
   1604c:	b	13868 <lzma_mode_is_supported@@XZ_5.0+0x2c9c>
   16050:	ldur	w3, [x29, #-84]
   16054:	ldr	x16, [sp, #96]
   16058:	mov	w1, #0xffffffff            	// #-1
   1605c:	mov	w20, w26
   16060:	lsr	w8, w22, #24
   16064:	cbnz	w8, 160a4 <lzma_mode_is_supported@@XZ_5.0+0x54d8>
   16068:	cmp	x27, x17
   1606c:	b.eq	16568 <lzma_mode_is_supported@@XZ_5.0+0x599c>  // b.none
   16070:	ldrb	w26, [x18, x27]
   16074:	lsl	w22, w22, #8
   16078:	add	x27, x27, #0x1
   1607c:	mov	w0, #0x1                   	// #1
   16080:	bfi	w26, w20, #8, #24
   16084:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   16088:	ldr	x10, [sp]
   1608c:	mov	w9, #0x2b                  	// #43
   16090:	stur	w12, [x29, #-96]
   16094:	mov	w0, wzr
   16098:	str	w9, [x10]
   1609c:	mov	w1, w8
   160a0:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   160a4:	mov	w0, #0x1                   	// #1
   160a8:	mov	w26, w20
   160ac:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   160b0:	ldur	w3, [x29, #-84]
   160b4:	ldr	x16, [sp, #96]
   160b8:	mov	w0, #0x9                   	// #9
   160bc:	mov	w1, w19
   160c0:	mov	x15, x23
   160c4:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   160c8:	ldr	x9, [sp]
   160cc:	mov	w8, #0x2a                  	// #42
   160d0:	mov	w0, wzr
   160d4:	mov	w26, w20
   160d8:	str	w8, [x9]
   160dc:	ldr	x16, [sp, #96]
   160e0:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   160e4:	ldr	x9, [sp]
   160e8:	mov	w0, wzr
   160ec:	mov	w8, #0x32                  	// #50
   160f0:	mov	w26, w20
   160f4:	mov	x15, x23
   160f8:	str	w8, [x9]
   160fc:	b	16124 <lzma_mode_is_supported@@XZ_5.0+0x5558>
   16100:	mov	w0, wzr
   16104:	mov	w8, #0x46                  	// #70
   16108:	ldr	x9, [sp]
   1610c:	mov	x15, x23
   16110:	mov	w1, w28
   16114:	str	w8, [x9]
   16118:	mov	w8, w26
   1611c:	mov	w26, w20
   16120:	mov	w28, w8
   16124:	mov	x16, x19
   16128:	mov	w3, w24
   1612c:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   16130:	mov	w0, wzr
   16134:	mov	w8, #0x2                   	// #2
   16138:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1613c:	mov	w0, wzr
   16140:	mov	w8, #0x3                   	// #3
   16144:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16148:	mov	w0, wzr
   1614c:	mov	w8, #0x4                   	// #4
   16150:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16154:	mov	w0, wzr
   16158:	mov	w8, #0x5                   	// #5
   1615c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16160:	mov	w0, wzr
   16164:	mov	w8, #0x6                   	// #6
   16168:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1616c:	mov	w0, wzr
   16170:	mov	w8, #0x7                   	// #7
   16174:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16178:	mov	w0, wzr
   1617c:	mov	w8, #0x8                   	// #8
   16180:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16184:	mov	w0, wzr
   16188:	mov	w8, #0x9                   	// #9
   1618c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16190:	ldr	x9, [sp]
   16194:	mov	w8, #0x13                  	// #19
   16198:	mov	w0, wzr
   1619c:	mov	w26, w20
   161a0:	str	w8, [x9]
   161a4:	ldp	w8, w3, [x29, #-88]
   161a8:	stp	w8, w16, [x29, #-92]
   161ac:	ldr	x16, [sp, #96]
   161b0:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   161b4:	mov	w0, wzr
   161b8:	mov	w8, #0x14                  	// #20
   161bc:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161c0:	mov	w0, wzr
   161c4:	mov	w8, #0x15                  	// #21
   161c8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161cc:	mov	w0, wzr
   161d0:	mov	w8, #0x16                  	// #22
   161d4:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161d8:	mov	w0, wzr
   161dc:	mov	w8, #0x31                  	// #49
   161e0:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161e4:	mov	w0, wzr
   161e8:	mov	w8, #0x33                  	// #51
   161ec:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161f0:	mov	w0, wzr
   161f4:	mov	w8, #0x34                  	// #52
   161f8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   161fc:	mov	w0, wzr
   16200:	mov	w8, #0x18                  	// #24
   16204:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16208:	mov	w0, wzr
   1620c:	mov	w8, #0x19                  	// #25
   16210:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16214:	mov	w0, wzr
   16218:	mov	w8, #0x1a                  	// #26
   1621c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16220:	mov	w0, wzr
   16224:	mov	w8, #0x1c                  	// #28
   16228:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1622c:	mov	w0, wzr
   16230:	mov	w8, #0x1d                  	// #29
   16234:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16238:	mov	w0, wzr
   1623c:	mov	w8, #0x1b                  	// #27
   16240:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16244:	mov	w0, wzr
   16248:	mov	w8, #0x1e                  	// #30
   1624c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16250:	mov	w0, wzr
   16254:	mov	w8, #0x17                  	// #23
   16258:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1625c:	mov	w0, wzr
   16260:	mov	w8, #0x35                  	// #53
   16264:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16268:	mov	w0, wzr
   1626c:	mov	w8, #0x36                  	// #54
   16270:	b	13850 <lzma_mode_is_supported@@XZ_5.0+0x2c84>
   16274:	mov	w0, wzr
   16278:	mov	w8, #0x37                  	// #55
   1627c:	b	13850 <lzma_mode_is_supported@@XZ_5.0+0x2c84>
   16280:	mov	w0, wzr
   16284:	mov	w8, #0x38                  	// #56
   16288:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1628c:	mov	w0, wzr
   16290:	mov	w8, #0x39                  	// #57
   16294:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16298:	mov	w0, wzr
   1629c:	mov	w8, #0x1f                  	// #31
   162a0:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   162a4:	mov	w0, wzr
   162a8:	mov	w8, #0x20                  	// #32
   162ac:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   162b0:	mov	w0, wzr
   162b4:	mov	w8, #0x21                  	// #33
   162b8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   162bc:	mov	w0, wzr
   162c0:	mov	w8, #0x3a                  	// #58
   162c4:	b	13850 <lzma_mode_is_supported@@XZ_5.0+0x2c84>
   162c8:	mov	w0, wzr
   162cc:	mov	w8, #0x3b                  	// #59
   162d0:	b	13850 <lzma_mode_is_supported@@XZ_5.0+0x2c84>
   162d4:	mov	w0, wzr
   162d8:	mov	w8, #0x3c                  	// #60
   162dc:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   162e0:	mov	w0, wzr
   162e4:	mov	w8, #0x22                  	// #34
   162e8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   162ec:	mov	w0, wzr
   162f0:	mov	w8, #0x3e                  	// #62
   162f4:	b	13850 <lzma_mode_is_supported@@XZ_5.0+0x2c84>
   162f8:	mov	w0, wzr
   162fc:	mov	w8, #0x3f                  	// #63
   16300:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16304:	mov	w0, wzr
   16308:	mov	w8, #0x40                  	// #64
   1630c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16310:	mov	w0, wzr
   16314:	mov	w8, #0x3d                  	// #61
   16318:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1631c:	mov	w0, wzr
   16320:	mov	w8, #0x23                  	// #35
   16324:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16328:	mov	w0, wzr
   1632c:	mov	w8, #0x24                  	// #36
   16330:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16334:	mov	w0, wzr
   16338:	mov	w8, #0x25                  	// #37
   1633c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16340:	mov	w0, wzr
   16344:	mov	w8, #0x41                  	// #65
   16348:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1634c:	mov	w0, wzr
   16350:	mov	w8, #0x42                  	// #66
   16354:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16358:	mov	w0, wzr
   1635c:	mov	w8, #0x26                  	// #38
   16360:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16364:	mov	w0, wzr
   16368:	mov	w8, #0x43                  	// #67
   1636c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16370:	mov	w0, wzr
   16374:	mov	w8, #0x44                  	// #68
   16378:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1637c:	mov	w0, wzr
   16380:	mov	w8, #0x27                  	// #39
   16384:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16388:	mov	w0, wzr
   1638c:	mov	w8, #0x28                  	// #40
   16390:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16394:	mov	w0, wzr
   16398:	mov	w8, #0x45                  	// #69
   1639c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163a0:	mov	w0, wzr
   163a4:	mov	w8, #0x29                  	// #41
   163a8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163ac:	mov	w0, wzr
   163b0:	mov	w8, #0x2c                  	// #44
   163b4:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163b8:	mov	w0, wzr
   163bc:	mov	w8, #0x2d                  	// #45
   163c0:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163c4:	mov	w0, wzr
   163c8:	mov	w8, #0x2e                  	// #46
   163cc:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163d0:	mov	w0, wzr
   163d4:	mov	w8, #0x2f                  	// #47
   163d8:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163dc:	mov	w0, wzr
   163e0:	mov	w8, #0xa                   	// #10
   163e4:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163e8:	mov	w0, wzr
   163ec:	mov	w8, #0xb                   	// #11
   163f0:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   163f4:	mov	w0, wzr
   163f8:	mov	w8, #0xc                   	// #12
   163fc:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16400:	mov	w0, wzr
   16404:	mov	w8, #0xd                   	// #13
   16408:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1640c:	mov	w0, wzr
   16410:	mov	w8, #0xe                   	// #14
   16414:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16418:	mov	w0, wzr
   1641c:	mov	w8, #0xf                   	// #15
   16420:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16424:	mov	w0, wzr
   16428:	mov	w8, #0x10                  	// #16
   1642c:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16430:	mov	w0, wzr
   16434:	mov	w8, #0x11                  	// #17
   16438:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   1643c:	ldp	w8, w3, [x29, #-88]
   16440:	ldr	x16, [sp, #96]
   16444:	ldr	x15, [sp, #56]
   16448:	mov	w0, #0x9                   	// #9
   1644c:	stp	w8, w20, [x29, #-92]
   16450:	mov	w1, w21
   16454:	b	1646c <lzma_mode_is_supported@@XZ_5.0+0x58a0>
   16458:	mov	w0, wzr
   1645c:	mov	w8, #0x1                   	// #1
   16460:	ldr	x9, [sp]
   16464:	mov	w26, w20
   16468:	str	w8, [x9]
   1646c:	ldp	x8, x9, [x29, #-56]
   16470:	ldr	x11, [sp, #16]
   16474:	mov	w10, w1
   16478:	ldur	x10, [x29, #-80]
   1647c:	stp	x8, x9, [x11, #8]
   16480:	ldr	w9, [sp, #12]
   16484:	str	w22, [x16, #2056]
   16488:	str	w26, [x16, #2060]
   1648c:	str	w9, [x16, #2064]
   16490:	ldr	x9, [sp, #24]
   16494:	str	x27, [x9]
   16498:	ldur	w9, [x29, #-92]
   1649c:	str	w3, [x16, #2068]
   164a0:	str	w1, [x16, #2072]
   164a4:	str	w9, [x16, #2076]
   164a8:	ldur	w9, [x29, #-88]
   164ac:	str	w9, [x16, #2080]
   164b0:	ldr	w9, [sp, #68]
   164b4:	str	w9, [x16, #2084]
   164b8:	ldur	w9, [x29, #-96]
   164bc:	str	x15, [x10, #28328]
   164c0:	str	w25, [x16, #2124]
   164c4:	str	w28, [x16, #2132]
   164c8:	str	w9, [x16, #2128]
   164cc:	ldur	w9, [x29, #-68]
   164d0:	str	w9, [x16, #2136]
   164d4:	ldr	x9, [x10, #28312]
   164d8:	cmn	x9, #0x1
   164dc:	b.eq	16514 <lzma_mode_is_supported@@XZ_5.0+0x5948>  // b.none
   164e0:	ldr	x10, [sp, #32]
   164e4:	sub	x8, x10, x8
   164e8:	add	x8, x9, x8
   164ec:	ldur	x9, [x29, #-80]
   164f0:	str	x8, [x9, #28312]
   164f4:	cbnz	w0, 16514 <lzma_mode_is_supported@@XZ_5.0+0x5948>
   164f8:	cbnz	x8, 16514 <lzma_mode_is_supported@@XZ_5.0+0x5948>
   164fc:	ldr	x8, [sp]
   16500:	ldr	w8, [x8]
   16504:	cbz	w8, 16558 <lzma_mode_is_supported@@XZ_5.0+0x598c>
   16508:	cmp	w8, #0x1
   1650c:	mov	w8, #0x9                   	// #9
   16510:	csinc	w0, w8, wzr, ne  // ne = any
   16514:	cmp	w0, #0x1
   16518:	b.ne	16538 <lzma_mode_is_supported@@XZ_5.0+0x596c>  // b.any
   1651c:	cmp	w26, #0x0
   16520:	mov	w8, #0x9                   	// #9
   16524:	mov	w9, #0xffffffff            	// #-1
   16528:	mov	w10, #0x5                   	// #5
   1652c:	csinc	w0, w8, wzr, ne  // ne = any
   16530:	str	x9, [x16, #2056]
   16534:	str	w10, [x16, #2064]
   16538:	ldp	x20, x19, [sp, #288]
   1653c:	ldp	x22, x21, [sp, #272]
   16540:	ldp	x24, x23, [sp, #256]
   16544:	ldp	x26, x25, [sp, #240]
   16548:	ldp	x28, x27, [sp, #224]
   1654c:	ldp	x29, x30, [sp, #208]
   16550:	add	sp, sp, #0x130
   16554:	ret
   16558:	mov	w0, wzr
   1655c:	cmp	w0, #0x1
   16560:	b.eq	1651c <lzma_mode_is_supported@@XZ_5.0+0x5950>  // b.none
   16564:	b	16538 <lzma_mode_is_supported@@XZ_5.0+0x596c>
   16568:	mov	w0, wzr
   1656c:	mov	w8, #0x30                  	// #48
   16570:	b	16460 <lzma_mode_is_supported@@XZ_5.0+0x5894>
   16574:	stp	x29, x30, [sp, #-64]!
   16578:	stp	x22, x21, [sp, #32]
   1657c:	stp	x20, x19, [sp, #48]
   16580:	ldr	w8, [x1, #28]
   16584:	mov	w22, #0xffffffff            	// #-1
   16588:	str	x23, [sp, #16]
   1658c:	mov	w23, #0x6e8c                	// #28300
   16590:	lsl	w8, w22, w8
   16594:	mvn	w8, w8
   16598:	mov	x20, x1
   1659c:	str	w8, [x0, x23]
   165a0:	ldr	w1, [x1, #20]
   165a4:	ldr	w2, [x20, #24]
   165a8:	mov	w8, #0x6664                	// #26212
   165ac:	mov	x29, sp
   165b0:	mov	x19, x0
   165b4:	add	x21, x0, x8
   165b8:	bl	16c6c <lzma_mode_is_supported@@XZ_5.0+0x60a0>
   165bc:	ldr	w8, [x20, #20]
   165c0:	mov	w10, #0x6e90                	// #28304
   165c4:	mov	w11, #0x6e94                	// #28308
   165c8:	movi	v0.2d, #0x0
   165cc:	str	w8, [x19, x10]
   165d0:	ldr	w8, [x20, #24]
   165d4:	mov	w12, #0x6e78                	// #28280
   165d8:	mov	w10, #0x6e88                	// #28296
   165dc:	mov	w13, #0x6e6c                	// #28268
   165e0:	lsl	w8, w22, w8
   165e4:	mvn	w8, w8
   165e8:	str	w8, [x19, x11]
   165ec:	str	q0, [x19, x12]
   165f0:	str	wzr, [x19, x10]
   165f4:	ldr	w8, [x20, #28]
   165f8:	mov	w14, #0x6e74                	// #28276
   165fc:	mov	w12, #0x5                   	// #5
   16600:	mov	w15, #0x61e0                	// #25056
   16604:	lsl	w11, w22, w8
   16608:	mvn	w11, w11
   1660c:	mov	w16, #0x6180                	// #24960
   16610:	mov	w17, #0x6198                	// #24984
   16614:	mov	w18, #0x61b0                	// #25008
   16618:	mov	w0, #0x61c8                	// #25032
   1661c:	mov	x9, xzr
   16620:	add	x10, x19, #0x6, lsl #12
   16624:	str	w11, [x19, x23]
   16628:	str	x22, [x19, x13]
   1662c:	str	w12, [x19, x14]
   16630:	add	x12, x19, x15
   16634:	add	x13, x19, x16
   16638:	add	x14, x19, x17
   1663c:	add	x15, x19, x18
   16640:	add	x16, x19, x0
   16644:	mov	w17, #0x400                 	// #1024
   16648:	mov	w18, wzr
   1664c:	mov	w0, w18
   16650:	lsl	x1, x9, #5
   16654:	add	w18, w18, #0x1
   16658:	add	x2, x10, x1
   1665c:	lsl	x0, x0, #1
   16660:	add	x1, x12, x1
   16664:	cmp	w18, w11
   16668:	strh	w17, [x2, x0]
   1666c:	strh	w17, [x1, x0]
   16670:	b.ls	1664c <lzma_mode_is_supported@@XZ_5.0+0x5a80>  // b.plast
   16674:	lsl	x18, x9, #1
   16678:	add	x9, x9, #0x1
   1667c:	cmp	x9, #0xc
   16680:	strh	w17, [x13, x18]
   16684:	strh	w17, [x14, x18]
   16688:	strh	w17, [x15, x18]
   1668c:	strh	w17, [x16, x18]
   16690:	b.ne	16648 <lzma_mode_is_supported@@XZ_5.0+0x5a7c>  // b.any
   16694:	mov	w10, #0x6360                	// #25440
   16698:	mov	x9, xzr
   1669c:	add	x10, x19, x10
   166a0:	mov	w11, #0x400                 	// #1024
   166a4:	mov	x12, xzr
   166a8:	strh	w11, [x10, x12]
   166ac:	add	x12, x12, #0x2
   166b0:	cmp	x12, #0x80
   166b4:	b.ne	166a8 <lzma_mode_is_supported@@XZ_5.0+0x5adc>  // b.any
   166b8:	add	x9, x9, #0x1
   166bc:	cmp	x9, #0x4
   166c0:	add	x10, x10, #0x80
   166c4:	b.ne	166a4 <lzma_mode_is_supported@@XZ_5.0+0x5ad8>  // b.any
   166c8:	mov	w10, #0x6560                	// #25952
   166cc:	mov	x9, xzr
   166d0:	add	x10, x19, x10
   166d4:	mov	w11, #0x400                 	// #1024
   166d8:	strh	w11, [x10, x9]
   166dc:	add	x9, x9, #0x2
   166e0:	cmp	x9, #0xe4
   166e4:	b.ne	166d8 <lzma_mode_is_supported@@XZ_5.0+0x5b0c>  // b.any
   166e8:	mov	w10, #0x6644                	// #26180
   166ec:	mov	x9, xzr
   166f0:	add	x10, x19, x10
   166f4:	mov	w11, #0x400                 	// #1024
   166f8:	strh	w11, [x10, x9]
   166fc:	add	x9, x9, #0x2
   16700:	cmp	x9, #0x20
   16704:	b.ne	166f8 <lzma_mode_is_supported@@XZ_5.0+0x5b2c>  // b.any
   16708:	mov	w10, #0x4000400             	// #67109888
   1670c:	mov	w11, #0x6668                	// #26216
   16710:	mov	w12, #0x6768                	// #26472
   16714:	mov	w13, #0x6a6c                	// #27244
   16718:	mov	w14, #0x6b6c                	// #27500
   1671c:	mov	w9, wzr
   16720:	str	w10, [x21]
   16724:	str	w10, [x21, #1028]
   16728:	add	x10, x19, x11
   1672c:	add	x11, x19, x12
   16730:	add	x12, x19, x13
   16734:	add	x13, x19, x14
   16738:	mov	w14, #0x400                 	// #1024
   1673c:	mov	w15, w9
   16740:	lsl	x0, x15, #4
   16744:	mov	x18, xzr
   16748:	add	x15, x13, x0
   1674c:	add	x16, x12, x0
   16750:	add	x17, x11, x0
   16754:	add	x0, x10, x0
   16758:	strh	w14, [x0, x18]
   1675c:	add	x18, x18, #0x2
   16760:	cmp	x18, #0x10
   16764:	b.ne	16758 <lzma_mode_is_supported@@XZ_5.0+0x5b8c>  // b.any
   16768:	mov	x18, xzr
   1676c:	strh	w14, [x17, x18]
   16770:	add	x18, x18, #0x2
   16774:	cmp	x18, #0x10
   16778:	b.ne	1676c <lzma_mode_is_supported@@XZ_5.0+0x5ba0>  // b.any
   1677c:	mov	x17, xzr
   16780:	strh	w14, [x16, x17]
   16784:	add	x17, x17, #0x2
   16788:	cmp	x17, #0x10
   1678c:	b.ne	16780 <lzma_mode_is_supported@@XZ_5.0+0x5bb4>  // b.any
   16790:	mov	x16, xzr
   16794:	strh	w14, [x15, x16]
   16798:	add	x16, x16, #0x2
   1679c:	cmp	x16, #0x10
   167a0:	b.ne	16794 <lzma_mode_is_supported@@XZ_5.0+0x5bc8>  // b.any
   167a4:	add	w9, w9, #0x1
   167a8:	lsr	w15, w9, w8
   167ac:	cbz	w15, 1673c <lzma_mode_is_supported@@XZ_5.0+0x5b70>
   167b0:	mov	w9, #0x6868                	// #26728
   167b4:	mov	x8, xzr
   167b8:	add	x9, x19, x9
   167bc:	mov	w10, #0x400                 	// #1024
   167c0:	strh	w10, [x9, x8]
   167c4:	add	x8, x8, #0x2
   167c8:	cmp	x8, #0x200
   167cc:	b.ne	167c0 <lzma_mode_is_supported@@XZ_5.0+0x5bf4>  // b.any
   167d0:	mov	w9, #0x6c6c                	// #27756
   167d4:	mov	x8, xzr
   167d8:	add	x9, x19, x9
   167dc:	mov	w10, #0x400                 	// #1024
   167e0:	strh	w10, [x9, x8]
   167e4:	add	x8, x8, #0x2
   167e8:	cmp	x8, #0x200
   167ec:	b.ne	167e0 <lzma_mode_is_supported@@XZ_5.0+0x5c14>  // b.any
   167f0:	mov	w8, #0x1                   	// #1
   167f4:	mov	w9, #0x6ea8                	// #28328
   167f8:	movi	v0.2d, #0x0
   167fc:	str	w8, [x21, #2108]
   16800:	add	x8, x19, x9
   16804:	str	xzr, [x8, #16]
   16808:	str	q0, [x8]
   1680c:	ldp	x20, x19, [sp, #48]
   16810:	ldp	x22, x21, [sp, #32]
   16814:	ldr	x23, [sp, #16]
   16818:	ldp	x29, x30, [sp], #64
   1681c:	ret
   16820:	str	x1, [x0, #28312]
   16824:	ret
   16828:	stp	x29, x30, [sp, #-16]!
   1682c:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   16830:	add	x3, x3, #0x844
   16834:	mov	x29, sp
   16838:	bl	fa78 <lzma_mf_is_supported@@XZ_5.0+0x1348>
   1683c:	ldp	x29, x30, [sp], #16
   16840:	ret
   16844:	stp	x29, x30, [sp, #-48]!
   16848:	stp	x20, x19, [sp, #32]
   1684c:	mov	x19, x0
   16850:	mov	x0, x2
   16854:	stp	x22, x21, [sp, #16]
   16858:	mov	x29, sp
   1685c:	mov	x21, x3
   16860:	mov	x20, x2
   16864:	mov	x22, x1
   16868:	bl	16980 <lzma_mode_is_supported@@XZ_5.0+0x5db4>
   1686c:	tbz	w0, #0, 168a8 <lzma_mode_is_supported@@XZ_5.0+0x5cdc>
   16870:	mov	x0, x19
   16874:	mov	x1, x22
   16878:	mov	x2, x20
   1687c:	mov	x3, x21
   16880:	bl	13648 <lzma_mode_is_supported@@XZ_5.0+0x2a7c>
   16884:	cbnz	w0, 168ac <lzma_mode_is_supported@@XZ_5.0+0x5ce0>
   16888:	ldr	x0, [x19]
   1688c:	mov	x1, x20
   16890:	bl	16574 <lzma_mode_is_supported@@XZ_5.0+0x59a8>
   16894:	ldr	x0, [x19]
   16898:	mov	x1, #0xffffffffffffffff    	// #-1
   1689c:	bl	16820 <lzma_mode_is_supported@@XZ_5.0+0x5c54>
   168a0:	mov	w0, wzr
   168a4:	b	168ac <lzma_mode_is_supported@@XZ_5.0+0x5ce0>
   168a8:	mov	w0, #0xb                   	// #11
   168ac:	ldp	x20, x19, [sp, #32]
   168b0:	ldp	x22, x21, [sp, #16]
   168b4:	ldp	x29, x30, [sp], #48
   168b8:	ret
   168bc:	and	w8, w1, #0xff
   168c0:	cmp	w8, #0xe0
   168c4:	b.ls	168d0 <lzma_mode_is_supported@@XZ_5.0+0x5d04>  // b.plast
   168c8:	mov	w0, #0x1                   	// #1
   168cc:	ret
   168d0:	mov	w9, #0xc16d                	// #49517
   168d4:	movk	w9, #0x6c16, lsl #16
   168d8:	umull	x9, w8, w9
   168dc:	lsr	x9, x9, #32
   168e0:	sub	w8, w8, w9
   168e4:	add	w8, w9, w8, lsr #1
   168e8:	mov	w9, #0xffffffd3            	// #-45
   168ec:	lsr	w8, w8, #5
   168f0:	madd	w9, w8, w9, w1
   168f4:	mov	w10, #0x8e39                	// #36409
   168f8:	movk	w10, #0x38e3, lsl #16
   168fc:	str	w8, [x0, #28]
   16900:	and	w8, w9, #0xff
   16904:	and	x9, x9, #0xff
   16908:	mul	x9, x9, x10
   1690c:	lsr	x9, x9, #33
   16910:	add	w10, w9, w9, lsl #3
   16914:	sub	w8, w8, w10
   16918:	stp	w8, w9, [x0, #20]
   1691c:	add	w8, w8, w9
   16920:	cmp	w8, #0x4
   16924:	cset	w0, hi  // hi = pmore
   16928:	ret
   1692c:	stp	x29, x30, [sp, #-16]!
   16930:	ldr	w0, [x0]
   16934:	mov	x29, sp
   16938:	bl	fe30 <lzma_mf_is_supported@@XZ_5.0+0x1700>
   1693c:	mov	w8, #0x6ec0                	// #28352
   16940:	add	x0, x0, x8
   16944:	ldp	x29, x30, [sp], #16
   16948:	ret
   1694c:	stp	x29, x30, [sp, #-32]!
   16950:	str	x19, [sp, #16]
   16954:	mov	x29, sp
   16958:	mov	x19, x0
   1695c:	bl	16980 <lzma_mode_is_supported@@XZ_5.0+0x5db4>
   16960:	tbz	w0, #0, 16970 <lzma_mode_is_supported@@XZ_5.0+0x5da4>
   16964:	mov	x0, x19
   16968:	bl	1692c <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   1696c:	b	16974 <lzma_mode_is_supported@@XZ_5.0+0x5da8>
   16970:	mov	x0, #0xffffffffffffffff    	// #-1
   16974:	ldr	x19, [sp, #16]
   16978:	ldp	x29, x30, [sp], #32
   1697c:	ret
   16980:	ldr	w9, [x0, #20]
   16984:	cmp	w9, #0x4
   16988:	b.hi	169bc <lzma_mode_is_supported@@XZ_5.0+0x5df0>  // b.pmore
   1698c:	ldr	w10, [x0, #24]
   16990:	mov	x8, x0
   16994:	mov	w0, wzr
   16998:	cmp	w10, #0x4
   1699c:	b.hi	169b8 <lzma_mode_is_supported@@XZ_5.0+0x5dec>  // b.pmore
   169a0:	add	w9, w10, w9
   169a4:	cmp	w9, #0x4
   169a8:	b.hi	169b8 <lzma_mode_is_supported@@XZ_5.0+0x5dec>  // b.pmore
   169ac:	ldr	w8, [x8, #28]
   169b0:	cmp	w8, #0x5
   169b4:	cset	w0, cc  // cc = lo, ul, last
   169b8:	ret
   169bc:	mov	w0, wzr
   169c0:	ret
   169c4:	stp	x29, x30, [sp, #-48]!
   169c8:	cmp	x3, #0x5
   169cc:	stp	x22, x21, [sp, #16]
   169d0:	stp	x20, x19, [sp, #32]
   169d4:	mov	x29, sp
   169d8:	b.ne	16a10 <lzma_mode_is_supported@@XZ_5.0+0x5e44>  // b.any
   169dc:	mov	x19, x0
   169e0:	mov	w0, #0x70                  	// #112
   169e4:	mov	x22, x2
   169e8:	mov	x20, x1
   169ec:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   169f0:	cbz	x0, 16a18 <lzma_mode_is_supported@@XZ_5.0+0x5e4c>
   169f4:	ldrb	w1, [x22]
   169f8:	mov	x21, x0
   169fc:	bl	168bc <lzma_mode_is_supported@@XZ_5.0+0x5cf0>
   16a00:	tbz	w0, #0, 16a20 <lzma_mode_is_supported@@XZ_5.0+0x5e54>
   16a04:	mov	x0, x21
   16a08:	mov	x1, x20
   16a0c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   16a10:	mov	w0, #0x8                   	// #8
   16a14:	b	16a40 <lzma_mode_is_supported@@XZ_5.0+0x5e74>
   16a18:	mov	w0, #0x5                   	// #5
   16a1c:	b	16a40 <lzma_mode_is_supported@@XZ_5.0+0x5e74>
   16a20:	add	x0, x22, #0x1
   16a24:	bl	16a50 <lzma_mode_is_supported@@XZ_5.0+0x5e84>
   16a28:	mov	w8, w0
   16a2c:	mov	w0, wzr
   16a30:	str	w8, [x21]
   16a34:	str	xzr, [x21, #8]
   16a38:	str	wzr, [x21, #16]
   16a3c:	str	x21, [x19]
   16a40:	ldp	x20, x19, [sp, #32]
   16a44:	ldp	x22, x21, [sp, #16]
   16a48:	ldp	x29, x30, [sp], #48
   16a4c:	ret
   16a50:	ldr	w0, [x0]
   16a54:	ret
   16a58:	ldr	w8, [x0, #8]
   16a5c:	cbz	w8, 16ab0 <lzma_mode_is_supported@@XZ_5.0+0x5ee4>
   16a60:	sub	w8, w8, #0x1
   16a64:	b	16a8c <lzma_mode_is_supported@@XZ_5.0+0x5ec0>
   16a68:	ldr	w10, [x0, #4]
   16a6c:	ldrb	w11, [x1, x9]
   16a70:	add	x9, x9, #0x1
   16a74:	bfi	w11, w10, #8, #24
   16a78:	stp	w11, w8, [x0, #4]
   16a7c:	sub	w8, w8, #0x1
   16a80:	cmn	w8, #0x1
   16a84:	str	x9, [x2]
   16a88:	b.eq	16ab0 <lzma_mode_is_supported@@XZ_5.0+0x5ee4>  // b.none
   16a8c:	ldr	x9, [x2]
   16a90:	cmp	x9, x3
   16a94:	b.eq	16ab8 <lzma_mode_is_supported@@XZ_5.0+0x5eec>  // b.none
   16a98:	cmp	w8, #0x4
   16a9c:	b.ne	16a68 <lzma_mode_is_supported@@XZ_5.0+0x5e9c>  // b.any
   16aa0:	ldrb	w10, [x1, x9]
   16aa4:	cbz	w10, 16a68 <lzma_mode_is_supported@@XZ_5.0+0x5e9c>
   16aa8:	mov	w0, #0x9                   	// #9
   16aac:	ret
   16ab0:	mov	w0, #0x1                   	// #1
   16ab4:	ret
   16ab8:	mov	w0, wzr
   16abc:	ret
   16ac0:	ldp	x8, x9, [x0]
   16ac4:	mov	w10, w1
   16ac8:	mvn	x11, x10
   16acc:	cmp	x9, x10
   16ad0:	add	x9, x9, x11
   16ad4:	b.ls	16ae0 <lzma_mode_is_supported@@XZ_5.0+0x5f14>  // b.plast
   16ad8:	mov	x10, xzr
   16adc:	b	16ae4 <lzma_mode_is_supported@@XZ_5.0+0x5f18>
   16ae0:	ldr	x10, [x0, #32]
   16ae4:	add	x9, x9, x10
   16ae8:	ldrb	w0, [x8, x9]
   16aec:	ret
   16af0:	ldr	x8, [x0, #8]
   16af4:	ldr	x9, [x0, #24]
   16af8:	cmp	x8, x9
   16afc:	b.eq	16b28 <lzma_mode_is_supported@@XZ_5.0+0x5f5c>  // b.none
   16b00:	ldr	x9, [x0]
   16b04:	add	x10, x8, #0x1
   16b08:	str	x10, [x0, #8]
   16b0c:	strb	w1, [x9, x8]
   16b10:	ldp	x9, x8, [x0, #8]
   16b14:	cmp	x9, x8
   16b18:	b.ls	16b20 <lzma_mode_is_supported@@XZ_5.0+0x5f54>  // b.plast
   16b1c:	str	x9, [x0, #16]
   16b20:	mov	w0, wzr
   16b24:	ret
   16b28:	mov	w0, #0x1                   	// #1
   16b2c:	ret
   16b30:	ldr	x8, [x0, #16]
   16b34:	cmp	x8, x1
   16b38:	cset	w0, hi  // hi = pmore
   16b3c:	ret
   16b40:	stp	x29, x30, [sp, #-64]!
   16b44:	stp	x22, x21, [sp, #32]
   16b48:	stp	x20, x19, [sp, #48]
   16b4c:	ldr	x9, [x0, #24]
   16b50:	ldr	x8, [x0, #8]
   16b54:	ldr	w10, [x2]
   16b58:	mov	x19, x2
   16b5c:	mov	w22, w1
   16b60:	sub	x9, x9, x8
   16b64:	cmp	x9, x10
   16b68:	csel	x21, x9, x10, cc  // cc = lo, ul, last
   16b6c:	mov	x20, x0
   16b70:	sub	w9, w10, w21
   16b74:	cmp	w21, w1
   16b78:	str	x23, [sp, #16]
   16b7c:	mov	x29, sp
   16b80:	str	w9, [x2]
   16b84:	b.ls	16bb4 <lzma_mode_is_supported@@XZ_5.0+0x5fe8>  // b.plast
   16b88:	mov	x0, x20
   16b8c:	mov	w1, w22
   16b90:	bl	16ac0 <lzma_mode_is_supported@@XZ_5.0+0x5ef4>
   16b94:	ldp	x8, x9, [x20]
   16b98:	subs	w21, w21, #0x1
   16b9c:	strb	w0, [x8, x9]
   16ba0:	ldr	x8, [x20, #8]
   16ba4:	add	x8, x8, #0x1
   16ba8:	str	x8, [x20, #8]
   16bac:	b.ne	16b88 <lzma_mode_is_supported@@XZ_5.0+0x5fbc>  // b.any
   16bb0:	b	16c3c <lzma_mode_is_supported@@XZ_5.0+0x6070>
   16bb4:	mov	w9, w22
   16bb8:	cmp	x8, x9
   16bbc:	b.ls	16bd4 <lzma_mode_is_supported@@XZ_5.0+0x6008>  // b.plast
   16bc0:	ldr	x10, [x20]
   16bc4:	add	x0, x10, x8
   16bc8:	mvn	x8, x9
   16bcc:	add	x1, x8, x0
   16bd0:	b	16c1c <lzma_mode_is_supported@@XZ_5.0+0x6050>
   16bd4:	ldr	w10, [x20, #32]
   16bd8:	ldr	x11, [x20]
   16bdc:	eor	x9, x9, #0xffffffff
   16be0:	add	x23, x8, x9
   16be4:	neg	x9, x23
   16be8:	add	w10, w10, w23
   16bec:	add	x0, x11, x8
   16bf0:	cmp	w21, w9
   16bf4:	add	x1, x11, x10
   16bf8:	b.ls	16c28 <lzma_mode_is_supported@@XZ_5.0+0x605c>  // b.plast
   16bfc:	and	x22, x9, #0xffffffff
   16c00:	mov	x2, x22
   16c04:	bl	30b0 <memmove@plt>
   16c08:	ldp	x1, x8, [x20]
   16c0c:	add	w21, w21, w23
   16c10:	add	x8, x8, x22
   16c14:	str	x8, [x20, #8]
   16c18:	add	x0, x1, x8
   16c1c:	mov	x2, x21
   16c20:	bl	3090 <memcpy@plt>
   16c24:	b	16c30 <lzma_mode_is_supported@@XZ_5.0+0x6064>
   16c28:	mov	x2, x21
   16c2c:	bl	30b0 <memmove@plt>
   16c30:	ldr	x8, [x20, #8]
   16c34:	add	x8, x8, x21
   16c38:	str	x8, [x20, #8]
   16c3c:	ldp	x8, x9, [x20, #8]
   16c40:	cmp	x9, x8
   16c44:	b.cs	16c4c <lzma_mode_is_supported@@XZ_5.0+0x6080>  // b.hs, b.nlast
   16c48:	str	x8, [x20, #16]
   16c4c:	ldr	w8, [x19]
   16c50:	ldp	x20, x19, [sp, #48]
   16c54:	ldp	x22, x21, [sp, #32]
   16c58:	ldr	x23, [sp, #16]
   16c5c:	cmp	w8, #0x0
   16c60:	cset	w0, ne  // ne = any
   16c64:	ldp	x29, x30, [sp], #64
   16c68:	ret
   16c6c:	mov	w8, wzr
   16c70:	add	w9, w2, w1
   16c74:	mov	w10, #0x600                 	// #1536
   16c78:	mov	w11, #0x400                 	// #1024
   16c7c:	mov	x12, xzr
   16c80:	umaddl	x13, w8, w10, x0
   16c84:	strh	w11, [x13, x12]
   16c88:	add	x12, x12, #0x2
   16c8c:	cmp	x12, #0x600
   16c90:	b.ne	16c84 <lzma_mode_is_supported@@XZ_5.0+0x60b8>  // b.any
   16c94:	add	w8, w8, #0x1
   16c98:	lsr	w12, w8, w9
   16c9c:	cbz	w12, 16c7c <lzma_mode_is_supported@@XZ_5.0+0x60b0>
   16ca0:	ret
   16ca4:	stp	x29, x30, [sp, #-16]!
   16ca8:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   16cac:	add	x3, x3, #0xcc0
   16cb0:	mov	x29, sp
   16cb4:	bl	e31c <lzma_crc64@@XZ_5.0+0x1f94>
   16cb8:	ldp	x29, x30, [sp], #16
   16cbc:	ret
   16cc0:	stp	x29, x30, [sp, #-48]!
   16cc4:	stp	x22, x21, [sp, #16]
   16cc8:	stp	x20, x19, [sp, #32]
   16ccc:	mov	x29, sp
   16cd0:	cbz	x2, 16da4 <lzma_mode_is_supported@@XZ_5.0+0x61d8>
   16cd4:	mov	x22, x0
   16cd8:	ldr	x0, [x0]
   16cdc:	mov	x19, x3
   16ce0:	mov	x21, x2
   16ce4:	mov	x20, x1
   16ce8:	cbnz	x0, 16d24 <lzma_mode_is_supported@@XZ_5.0+0x6158>
   16cec:	mov	w0, #0xa8                  	// #168
   16cf0:	movk	w0, #0x1, lsl #16
   16cf4:	mov	x1, x20
   16cf8:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   16cfc:	cbz	x0, 16dac <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   16d00:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   16d04:	adrp	x9, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   16d08:	adrp	x10, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   16d0c:	add	x8, x8, #0xec0
   16d10:	add	x9, x9, #0x144
   16d14:	add	x10, x10, #0x178
   16d18:	stp	x0, x8, [x22]
   16d1c:	stp	x9, x10, [x22, #16]
   16d20:	str	xzr, [x0, #8]
   16d24:	ldp	q2, q0, [x21, #16]
   16d28:	ldr	q1, [x21]
   16d2c:	add	x2, x0, #0x10
   16d30:	mov	w8, #0x1                   	// #1
   16d34:	stp	q2, q0, [x0, #32]
   16d38:	str	q1, [x0, #16]
   16d3c:	ldp	q0, q1, [x21, #80]
   16d40:	ldp	q2, q3, [x21, #48]
   16d44:	ldr	x9, [x0, #24]
   16d48:	str	wzr, [x0]
   16d4c:	stp	q0, q1, [x0, #96]
   16d50:	stp	q2, q3, [x0, #64]
   16d54:	strh	w8, [x0, #128]
   16d58:	cbz	x9, 16d68 <lzma_mode_is_supported@@XZ_5.0+0x619c>
   16d5c:	ldr	w8, [x0, #32]
   16d60:	cmp	w8, #0x0
   16d64:	cset	w8, eq  // eq = none
   16d68:	strb	w8, [x0, #130]
   16d6c:	add	x0, x0, #0x8
   16d70:	mov	x1, x20
   16d74:	mov	x3, x19
   16d78:	bl	1090c <lzma_lzma_preset@@XZ_5.0+0x990>
   16d7c:	cbnz	w0, 16db0 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   16d80:	ldp	x9, x8, [x19]
   16d84:	mov	w0, wzr
   16d88:	add	x9, x8, x9
   16d8c:	lsr	x9, x9, #16
   16d90:	cbnz	x9, 16db0 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   16d94:	mov	w9, #0x10000               	// #65536
   16d98:	sub	x8, x9, x8
   16d9c:	str	x8, [x19]
   16da0:	b	16db0 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   16da4:	mov	w0, #0xb                   	// #11
   16da8:	b	16db0 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   16dac:	mov	w0, #0x5                   	// #5
   16db0:	ldp	x20, x19, [sp, #32]
   16db4:	ldp	x22, x21, [sp, #16]
   16db8:	ldp	x29, x30, [sp], #48
   16dbc:	ret
   16dc0:	stp	x29, x30, [sp, #-16]!
   16dc4:	mov	x29, sp
   16dc8:	bl	10a94 <lzma_lzma_preset@@XZ_5.0+0xb18>
   16dcc:	mov	w8, #0xa8                  	// #168
   16dd0:	movk	w8, #0x1, lsl #16
   16dd4:	add	x8, x0, x8
   16dd8:	cmn	x0, #0x1
   16ddc:	csinv	x0, x8, xzr, ne  // ne = any
   16de0:	ldp	x29, x30, [sp], #16
   16de4:	ret
   16de8:	stp	x29, x30, [sp, #-32]!
   16dec:	ldr	w8, [x0]
   16df0:	str	x19, [sp, #16]
   16df4:	mov	x19, x1
   16df8:	mov	x29, sp
   16dfc:	sub	w9, w8, #0x1
   16e00:	cmp	w8, #0x1, lsl #12
   16e04:	mov	w8, #0xfff                 	// #4095
   16e08:	csel	w8, w9, w8, hi  // hi = pmore
   16e0c:	orr	w8, w8, w8, lsr #2
   16e10:	orr	w8, w8, w8, lsr #3
   16e14:	orr	w8, w8, w8, lsr #4
   16e18:	orr	w8, w8, w8, lsr #8
   16e1c:	orr	w8, w8, w8, lsr #16
   16e20:	cmn	w8, #0x1
   16e24:	b.eq	16e38 <lzma_mode_is_supported@@XZ_5.0+0x626c>  // b.none
   16e28:	add	w0, w8, #0x1
   16e2c:	bl	16e50 <lzma_mode_is_supported@@XZ_5.0+0x6284>
   16e30:	sub	w8, w0, #0x18
   16e34:	b	16e3c <lzma_mode_is_supported@@XZ_5.0+0x6270>
   16e38:	mov	w8, #0x28                  	// #40
   16e3c:	strb	w8, [x19]
   16e40:	ldr	x19, [sp, #16]
   16e44:	mov	w0, wzr
   16e48:	ldp	x29, x30, [sp], #32
   16e4c:	ret
   16e50:	lsr	w8, w0, #13
   16e54:	cbnz	w8, 16e68 <lzma_mode_is_supported@@XZ_5.0+0x629c>
   16e58:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   16e5c:	ldr	x8, [x8, #4008]
   16e60:	ldrb	w0, [x8, w0, uxtw]
   16e64:	ret
   16e68:	lsr	w8, w0, #25
   16e6c:	cbnz	w8, 16e8c <lzma_mode_is_supported@@XZ_5.0+0x62c0>
   16e70:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   16e74:	ldr	x9, [x9, #4008]
   16e78:	mov	w8, w0
   16e7c:	lsr	x8, x8, #12
   16e80:	ldrb	w8, [x9, x8]
   16e84:	add	w0, w8, #0x18
   16e88:	ret
   16e8c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1e434>
   16e90:	ldr	x9, [x9, #4008]
   16e94:	mov	w8, w0
   16e98:	lsr	x8, x8, #24
   16e9c:	ldrb	w8, [x9, x8]
   16ea0:	add	w0, w8, #0x30
   16ea4:	ret
   16ea8:	ldr	w8, [x0]
   16eac:	mov	w9, #0x100000              	// #1048576
   16eb0:	add	x8, x8, x8, lsl #1
   16eb4:	cmp	x8, #0x100, lsl #12
   16eb8:	csel	x0, x8, x9, hi  // hi = pmore
   16ebc:	ret
   16ec0:	sub	sp, sp, #0x90
   16ec4:	stp	x24, x23, [sp, #96]
   16ec8:	ldr	x24, [x3]
   16ecc:	stp	x29, x30, [sp, #48]
   16ed0:	stp	x28, x27, [sp, #64]
   16ed4:	stp	x26, x25, [sp, #80]
   16ed8:	cmp	x24, x4
   16edc:	stp	x22, x21, [sp, #112]
   16ee0:	stp	x20, x19, [sp, #128]
   16ee4:	add	x29, sp, #0x30
   16ee8:	b.cs	170f8 <lzma_mode_is_supported@@XZ_5.0+0x652c>  // b.hs, b.nlast
   16eec:	add	x8, x0, #0xa0
   16ef0:	stur	x8, [x29, #-8]
   16ef4:	add	x8, x0, #0x98
   16ef8:	stur	x8, [x29, #-16]
   16efc:	add	x8, x0, #0x10
   16f00:	str	x8, [sp, #8]
   16f04:	add	x8, x0, #0xa6
   16f08:	adrp	x25, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   16f0c:	mov	x21, x4
   16f10:	mov	x20, x3
   16f14:	mov	x19, x2
   16f18:	mov	x22, x1
   16f1c:	mov	x23, x0
   16f20:	add	x26, x0, #0x88
   16f24:	str	x8, [sp, #24]
   16f28:	add	x8, x0, #0x90
   16f2c:	add	x25, x25, #0xf10
   16f30:	str	x8, [sp, #16]
   16f34:	b	16f68 <lzma_mode_is_supported@@XZ_5.0+0x639c>
   16f38:	mov	x0, x22
   16f3c:	mov	x1, x19
   16f40:	mov	x2, x20
   16f44:	mov	x3, x21
   16f48:	mov	x4, x26
   16f4c:	bl	17334 <lzma_mode_is_supported@@XZ_5.0+0x6768>
   16f50:	ldr	x8, [x26]
   16f54:	cbnz	x8, 170f8 <lzma_mode_is_supported@@XZ_5.0+0x652c>
   16f58:	str	wzr, [x23]
   16f5c:	ldr	x24, [x20]
   16f60:	cmp	x24, x21
   16f64:	b.cs	170f8 <lzma_mode_is_supported@@XZ_5.0+0x652c>  // b.hs, b.nlast
   16f68:	ldr	w8, [x23]
   16f6c:	cmp	w8, #0x4
   16f70:	b.hi	16f5c <lzma_mode_is_supported@@XZ_5.0+0x6390>  // b.pmore
   16f74:	adr	x9, 16f38 <lzma_mode_is_supported@@XZ_5.0+0x636c>
   16f78:	ldrb	w10, [x25, x8]
   16f7c:	add	x9, x9, x10, lsl #2
   16f80:	br	x9
   16f84:	mov	x0, x22
   16f88:	bl	1721c <lzma_mode_is_supported@@XZ_5.0+0x6650>
   16f8c:	cbz	w0, 17120 <lzma_mode_is_supported@@XZ_5.0+0x6554>
   16f90:	ldrb	w8, [x23, #129]
   16f94:	cbz	w8, 16fb0 <lzma_mode_is_supported@@XZ_5.0+0x63e4>
   16f98:	ldr	x0, [x23, #8]
   16f9c:	ldr	x1, [sp, #8]
   16fa0:	bl	105f4 <lzma_lzma_preset@@XZ_5.0+0x678>
   16fa4:	cmp	w0, #0x0
   16fa8:	csel	w27, w27, w0, eq  // eq = none
   16fac:	cbnz	w0, 170fc <lzma_mode_is_supported@@XZ_5.0+0x6530>
   16fb0:	mov	w8, #0x1                   	// #1
   16fb4:	stp	xzr, xzr, [x26]
   16fb8:	str	w8, [x23]
   16fbc:	ldr	w8, [x23, #136]
   16fc0:	ldr	w9, [x22, #100]
   16fc4:	mov	w10, #0x200000              	// #2097152
   16fc8:	sub	w8, w10, w8
   16fcc:	subs	w8, w8, w9
   16fd0:	b.cs	17010 <lzma_mode_is_supported@@XZ_5.0+0x6444>  // b.hs, b.nlast
   16fd4:	mov	w5, wzr
   16fd8:	b	1701c <lzma_mode_is_supported@@XZ_5.0+0x6450>
   16fdc:	ldp	x24, x0, [x29, #-16]
   16fe0:	mov	w2, #0x3                   	// #3
   16fe4:	mov	x3, x19
   16fe8:	mov	x4, x20
   16fec:	mov	x1, x24
   16ff0:	mov	x5, x21
   16ff4:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   16ff8:	ldr	x8, [x24]
   16ffc:	cmp	x8, #0x3
   17000:	b.ne	170f8 <lzma_mode_is_supported@@XZ_5.0+0x652c>  // b.any
   17004:	mov	w8, #0x4                   	// #4
   17008:	str	w8, [x23]
   1700c:	b	16f38 <lzma_mode_is_supported@@XZ_5.0+0x636c>
   17010:	ldp	w9, w10, [x22, #24]
   17014:	add	w8, w8, w9
   17018:	sub	w5, w8, w10
   1701c:	ldp	x25, x2, [sp, #16]
   17020:	ldr	x0, [x23, #8]
   17024:	ldp	w24, w28, [x22, #24]
   17028:	mov	w4, #0x10000               	// #65536
   1702c:	mov	x1, x22
   17030:	mov	x3, x25
   17034:	bl	10084 <lzma_lzma_preset@@XZ_5.0+0x108>
   17038:	ldp	w9, w8, [x22, #24]
   1703c:	ldr	x10, [x23, #136]
   17040:	sub	w11, w28, w24
   17044:	cmp	w0, #0x1
   17048:	add	w9, w11, w9
   1704c:	sub	w9, w9, w8
   17050:	add	x9, x10, x9
   17054:	str	x9, [x23, #136]
   17058:	b.ne	1707c <lzma_mode_is_supported@@XZ_5.0+0x64b0>  // b.any
   1705c:	ldr	x10, [x25]
   17060:	cmp	x10, x9
   17064:	b.cs	17098 <lzma_mode_is_supported@@XZ_5.0+0x64cc>  // b.hs, b.nlast
   17068:	mov	x0, x23
   1706c:	bl	17264 <lzma_mode_is_supported@@XZ_5.0+0x6698>
   17070:	mov	w8, wzr
   17074:	mov	w9, #0x2                   	// #2
   17078:	b	170bc <lzma_mode_is_supported@@XZ_5.0+0x64f0>
   1707c:	adrp	x25, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   17080:	mov	w27, wzr
   17084:	mov	w8, #0x1                   	// #1
   17088:	add	x25, x25, #0xf10
   1708c:	cmp	w8, #0x4
   17090:	b.ne	170d0 <lzma_mode_is_supported@@XZ_5.0+0x6504>  // b.any
   17094:	b	16f5c <lzma_mode_is_supported@@XZ_5.0+0x6390>
   17098:	add	x8, x9, x8
   1709c:	mov	x0, x23
   170a0:	str	x8, [x23, #136]
   170a4:	str	wzr, [x22, #28]
   170a8:	bl	17230 <lzma_mode_is_supported@@XZ_5.0+0x6664>
   170ac:	mov	w8, #0x1                   	// #1
   170b0:	strb	w8, [x23, #129]
   170b4:	mov	w8, #0x4                   	// #4
   170b8:	mov	w9, #0x3                   	// #3
   170bc:	adrp	x25, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   170c0:	add	x25, x25, #0xf10
   170c4:	str	w9, [x23]
   170c8:	cmp	w8, #0x4
   170cc:	b.eq	16f5c <lzma_mode_is_supported@@XZ_5.0+0x6390>  // b.none
   170d0:	cbnz	w8, 170fc <lzma_mode_is_supported@@XZ_5.0+0x6530>
   170d4:	ldr	x2, [x23, #144]
   170d8:	ldp	x1, x0, [x29, #-16]
   170dc:	mov	x3, x19
   170e0:	mov	x4, x20
   170e4:	mov	x5, x21
   170e8:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   170ec:	ldp	x9, x8, [x23, #144]
   170f0:	cmp	x8, x9
   170f4:	b.eq	16f58 <lzma_mode_is_supported@@XZ_5.0+0x638c>  // b.none
   170f8:	mov	w27, wzr
   170fc:	mov	w0, w27
   17100:	ldp	x20, x19, [sp, #128]
   17104:	ldp	x22, x21, [sp, #112]
   17108:	ldp	x24, x23, [sp, #96]
   1710c:	ldp	x26, x25, [sp, #80]
   17110:	ldp	x28, x27, [sp, #64]
   17114:	ldp	x29, x30, [sp, #48]
   17118:	add	sp, sp, #0x90
   1711c:	ret
   17120:	ldr	w8, [x22, #104]
   17124:	cmp	w8, #0x3
   17128:	b.ne	17138 <lzma_mode_is_supported@@XZ_5.0+0x656c>  // b.any
   1712c:	add	x9, x24, #0x1
   17130:	str	x9, [x20]
   17134:	strb	wzr, [x19, x24]
   17138:	cmp	w8, #0x0
   1713c:	cset	w27, ne  // ne = any
   17140:	b	170fc <lzma_mode_is_supported@@XZ_5.0+0x6530>
   17144:	stp	x29, x30, [sp, #-32]!
   17148:	stp	x20, x19, [sp, #16]
   1714c:	mov	x19, x0
   17150:	ldr	x0, [x0, #8]
   17154:	mov	x29, sp
   17158:	mov	x20, x1
   1715c:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   17160:	mov	x0, x19
   17164:	mov	x1, x20
   17168:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   1716c:	ldp	x20, x19, [sp, #16]
   17170:	ldp	x29, x30, [sp], #32
   17174:	ret
   17178:	ldr	x9, [x1, #8]
   1717c:	cbz	x9, 17188 <lzma_mode_is_supported@@XZ_5.0+0x65bc>
   17180:	ldr	w8, [x0]
   17184:	cbz	w8, 17190 <lzma_mode_is_supported@@XZ_5.0+0x65c4>
   17188:	mov	w0, #0xb                   	// #11
   1718c:	ret
   17190:	ldr	w8, [x0, #36]
   17194:	ldr	w10, [x9, #20]
   17198:	cmp	w8, w10
   1719c:	b.ne	171c8 <lzma_mode_is_supported@@XZ_5.0+0x65fc>  // b.any
   171a0:	ldr	w8, [x0, #40]
   171a4:	ldr	w11, [x9, #24]
   171a8:	cmp	w8, w11
   171ac:	b.ne	171c8 <lzma_mode_is_supported@@XZ_5.0+0x65fc>  // b.any
   171b0:	ldr	w8, [x0, #44]
   171b4:	ldr	w11, [x9, #28]
   171b8:	cmp	w8, w11
   171bc:	b.ne	171c8 <lzma_mode_is_supported@@XZ_5.0+0x65fc>  // b.any
   171c0:	mov	w0, wzr
   171c4:	ret
   171c8:	cmp	w10, #0x4
   171cc:	b.ls	171d8 <lzma_mode_is_supported@@XZ_5.0+0x660c>  // b.plast
   171d0:	mov	w0, #0x8                   	// #8
   171d4:	ret
   171d8:	ldr	w11, [x9, #24]
   171dc:	mov	w8, #0x8                   	// #8
   171e0:	cmp	w11, #0x4
   171e4:	b.hi	17214 <lzma_mode_is_supported@@XZ_5.0+0x6648>  // b.pmore
   171e8:	add	w12, w11, w10
   171ec:	cmp	w12, #0x4
   171f0:	b.hi	17214 <lzma_mode_is_supported@@XZ_5.0+0x6648>  // b.pmore
   171f4:	ldr	w9, [x9, #28]
   171f8:	cmp	w9, #0x4
   171fc:	b.hi	171d0 <lzma_mode_is_supported@@XZ_5.0+0x6604>  // b.pmore
   17200:	mov	w8, wzr
   17204:	str	w9, [x0, #44]
   17208:	mov	w9, #0x101                 	// #257
   1720c:	stp	w10, w11, [x0, #36]
   17210:	strh	w9, [x0, #128]
   17214:	mov	w0, w8
   17218:	ret
   1721c:	ldr	w8, [x0, #36]
   17220:	ldp	w9, w10, [x0, #24]
   17224:	sub	w8, w8, w9
   17228:	add	w0, w8, w10
   1722c:	ret
   17230:	ldrb	w8, [x0, #130]
   17234:	ldr	w9, [x0, #136]
   17238:	mov	w10, #0x1                   	// #1
   1723c:	strb	wzr, [x0, #130]
   17240:	cmp	w8, #0x0
   17244:	sub	w8, w9, #0x1
   17248:	cinc	w9, w10, eq  // eq = none
   1724c:	lsr	w10, w8, #8
   17250:	strb	w8, [x0, #162]
   17254:	strb	w9, [x0, #160]
   17258:	strb	w10, [x0, #161]
   1725c:	str	xzr, [x0, #152]
   17260:	ret
   17264:	stp	x29, x30, [sp, #-32]!
   17268:	ldrb	w8, [x0, #128]
   1726c:	str	x19, [sp, #16]
   17270:	mov	x19, x0
   17274:	mov	x29, sp
   17278:	cbz	w8, 1728c <lzma_mode_is_supported@@XZ_5.0+0x66c0>
   1727c:	ldrb	w9, [x19, #130]
   17280:	cbz	w9, 1729c <lzma_mode_is_supported@@XZ_5.0+0x66d0>
   17284:	mov	w10, #0xe0                  	// #224
   17288:	b	172a0 <lzma_mode_is_supported@@XZ_5.0+0x66d4>
   1728c:	ldrb	w9, [x19, #129]
   17290:	cbz	w9, 172ac <lzma_mode_is_supported@@XZ_5.0+0x66e0>
   17294:	mov	w9, #0xa0                  	// #160
   17298:	b	172b0 <lzma_mode_is_supported@@XZ_5.0+0x66e4>
   1729c:	mov	w10, #0xc0                  	// #192
   172a0:	mov	x9, xzr
   172a4:	strb	w10, [x19, #160]
   172a8:	b	172b8 <lzma_mode_is_supported@@XZ_5.0+0x66ec>
   172ac:	mov	w9, #0x80                  	// #128
   172b0:	strb	w9, [x19, #161]
   172b4:	mov	w9, #0x1                   	// #1
   172b8:	add	x11, x19, #0xa0
   172bc:	str	x9, [x19, #152]
   172c0:	ldr	x10, [x19, #136]
   172c4:	add	x12, x11, x9
   172c8:	ldrb	w13, [x12]
   172cc:	orr	x9, x9, #0x2
   172d0:	sub	x10, x10, #0x1
   172d4:	lsr	x14, x10, #8
   172d8:	add	x11, x11, x9
   172dc:	add	w13, w13, w10, lsr #16
   172e0:	strb	w14, [x12, #1]
   172e4:	strb	w13, [x12]
   172e8:	strb	w10, [x11]
   172ec:	ldrh	w10, [x19, #144]
   172f0:	sub	w10, w10, #0x1
   172f4:	rev	w10, w10
   172f8:	lsr	w10, w10, #16
   172fc:	sturh	w10, [x11, #1]
   17300:	cbz	w8, 17314 <lzma_mode_is_supported@@XZ_5.0+0x6748>
   17304:	add	x8, x9, x19
   17308:	add	x0, x19, #0x10
   1730c:	add	x1, x8, #0xa3
   17310:	bl	10af0 <lzma_lzma_preset@@XZ_5.0+0xb74>
   17314:	ldr	x8, [x19, #144]
   17318:	strh	wzr, [x19, #128]
   1731c:	strb	wzr, [x19, #130]
   17320:	add	x8, x8, #0x6
   17324:	str	x8, [x19, #144]
   17328:	ldr	x19, [sp, #16]
   1732c:	ldp	x29, x30, [sp], #32
   17330:	ret
   17334:	stp	x29, x30, [sp, #-48]!
   17338:	stp	x20, x19, [sp, #32]
   1733c:	ldr	x8, [x2]
   17340:	ldr	x11, [x4]
   17344:	ldr	x9, [x0]
   17348:	ldr	w10, [x0, #24]
   1734c:	sub	x12, x3, x8
   17350:	cmp	x12, x11
   17354:	str	x21, [sp, #16]
   17358:	add	x0, x1, x8
   1735c:	add	x8, x9, x10
   17360:	csel	x21, x12, x11, cc  // cc = lo, ul, last
   17364:	mov	x20, x2
   17368:	sub	x1, x8, x11
   1736c:	mov	x2, x21
   17370:	mov	x29, sp
   17374:	mov	x19, x4
   17378:	bl	3090 <memcpy@plt>
   1737c:	ldr	x8, [x20]
   17380:	add	x8, x8, x21
   17384:	str	x8, [x20]
   17388:	ldr	x8, [x19]
   1738c:	sub	x8, x8, x21
   17390:	str	x8, [x19]
   17394:	ldp	x20, x19, [sp, #32]
   17398:	ldr	x21, [sp, #16]
   1739c:	ldp	x29, x30, [sp], #48
   173a0:	ret
   173a4:	stp	x29, x30, [sp, #-16]!
   173a8:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   173ac:	add	x3, x3, #0x3c0
   173b0:	mov	x29, sp
   173b4:	bl	fa78 <lzma_mf_is_supported@@XZ_5.0+0x1348>
   173b8:	ldp	x29, x30, [sp], #16
   173bc:	ret
   173c0:	stp	x29, x30, [sp, #-48]!
   173c4:	stp	x22, x21, [sp, #16]
   173c8:	stp	x20, x19, [sp, #32]
   173cc:	mov	x22, x0
   173d0:	ldr	x0, [x0]
   173d4:	mov	x19, x3
   173d8:	mov	x20, x2
   173dc:	mov	x21, x1
   173e0:	mov	x29, sp
   173e4:	cbnz	x0, 17420 <lzma_mode_is_supported@@XZ_5.0+0x6854>
   173e8:	mov	w0, #0xb8                  	// #184
   173ec:	mov	x1, x21
   173f0:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   173f4:	cbz	x0, 17468 <lzma_mode_is_supported@@XZ_5.0+0x689c>
   173f8:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   173fc:	adrp	x9, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17400:	add	x8, x8, #0x518
   17404:	add	x9, x9, #0x820
   17408:	movi	v0.2d, #0x0
   1740c:	stp	x0, x8, [x22]
   17410:	str	x9, [x22, #32]
   17414:	str	xzr, [x0, #40]
   17418:	stur	q0, [x0, #24]
   1741c:	stur	q0, [x0, #8]
   17420:	mov	w8, #0x1                   	// #1
   17424:	str	wzr, [x0]
   17428:	strb	w8, [x0, #64]
   1742c:	ldr	x9, [x20, #8]
   17430:	cbz	x9, 17440 <lzma_mode_is_supported@@XZ_5.0+0x6874>
   17434:	ldr	w8, [x20, #16]
   17438:	cmp	w8, #0x0
   1743c:	cset	w8, eq  // eq = none
   17440:	strb	w8, [x0, #65]
   17444:	add	x0, x0, #0x8
   17448:	mov	x1, x21
   1744c:	mov	x2, x20
   17450:	mov	x3, x19
   17454:	bl	13648 <lzma_mode_is_supported@@XZ_5.0+0x2a7c>
   17458:	ldp	x20, x19, [sp, #32]
   1745c:	ldp	x22, x21, [sp, #16]
   17460:	ldp	x29, x30, [sp], #48
   17464:	ret
   17468:	mov	w0, #0x5                   	// #5
   1746c:	b	17458 <lzma_mode_is_supported@@XZ_5.0+0x688c>
   17470:	stp	x29, x30, [sp, #-16]!
   17474:	mov	x29, sp
   17478:	bl	1692c <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   1747c:	add	x0, x0, #0xb8
   17480:	ldp	x29, x30, [sp], #16
   17484:	ret
   17488:	stp	x29, x30, [sp, #-32]!
   1748c:	cmp	x3, #0x1
   17490:	stp	x20, x19, [sp, #16]
   17494:	mov	x29, sp
   17498:	b.ne	174ac <lzma_mode_is_supported@@XZ_5.0+0x68e0>  // b.any
   1749c:	ldrb	w8, [x2]
   174a0:	mov	x20, x2
   174a4:	cmp	w8, #0x28
   174a8:	b.ls	174c0 <lzma_mode_is_supported@@XZ_5.0+0x68f4>  // b.plast
   174ac:	mov	w8, #0x8                   	// #8
   174b0:	ldp	x20, x19, [sp, #16]
   174b4:	mov	w0, w8
   174b8:	ldp	x29, x30, [sp], #32
   174bc:	ret
   174c0:	mov	x19, x0
   174c4:	mov	w0, #0x70                  	// #112
   174c8:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   174cc:	cbz	x0, 174e4 <lzma_mode_is_supported@@XZ_5.0+0x6918>
   174d0:	ldrb	w8, [x20]
   174d4:	cmp	w8, #0x28
   174d8:	b.ne	174ec <lzma_mode_is_supported@@XZ_5.0+0x6920>  // b.any
   174dc:	mov	w8, #0xffffffff            	// #-1
   174e0:	b	17500 <lzma_mode_is_supported@@XZ_5.0+0x6934>
   174e4:	mov	w8, #0x5                   	// #5
   174e8:	b	174b0 <lzma_mode_is_supported@@XZ_5.0+0x68e4>
   174ec:	mov	w9, #0x2                   	// #2
   174f0:	lsr	w10, w8, #1
   174f4:	bfxil	w9, w8, #0, #1
   174f8:	add	w8, w10, #0xb
   174fc:	lsl	w8, w9, w8
   17500:	str	w8, [x0]
   17504:	mov	w8, wzr
   17508:	str	xzr, [x0, #8]
   1750c:	str	wzr, [x0, #16]
   17510:	str	x0, [x19]
   17514:	b	174b0 <lzma_mode_is_supported@@XZ_5.0+0x68e4>
   17518:	stp	x29, x30, [sp, #-96]!
   1751c:	stp	x28, x27, [sp, #16]
   17520:	adrp	x27, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   17524:	stp	x26, x25, [sp, #32]
   17528:	stp	x24, x23, [sp, #48]
   1752c:	stp	x22, x21, [sp, #64]
   17530:	stp	x20, x19, [sp, #80]
   17534:	mov	x19, x4
   17538:	mov	x20, x3
   1753c:	mov	x21, x2
   17540:	mov	x22, x1
   17544:	mov	x23, x0
   17548:	add	x24, x0, #0x38
   1754c:	add	x25, x0, #0x48
   17550:	add	x27, x27, #0xf15
   17554:	mov	x29, sp
   17558:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   1755c:	add	x8, x28, #0x1
   17560:	str	x8, [x20]
   17564:	ldrb	w9, [x21, x28]
   17568:	ldr	x8, [x23, #56]
   1756c:	ldr	w10, [x23, #4]
   17570:	add	x8, x9, x8
   17574:	add	x8, x8, #0x1
   17578:	str	x8, [x23, #56]
   1757c:	str	w10, [x23]
   17580:	ldr	x28, [x20]
   17584:	cmp	x28, x19
   17588:	b.cc	17598 <lzma_mode_is_supported@@XZ_5.0+0x69cc>  // b.lo, b.ul, b.last
   1758c:	ldr	w8, [x23]
   17590:	cmp	w8, #0x6
   17594:	b.ne	177f4 <lzma_mode_is_supported@@XZ_5.0+0x6c28>  // b.any
   17598:	ldr	w8, [x23]
   1759c:	cmp	w8, #0x7
   175a0:	b.hi	177ec <lzma_mode_is_supported@@XZ_5.0+0x6c20>  // b.pmore
   175a4:	adr	x9, 1755c <lzma_mode_is_supported@@XZ_5.0+0x6990>
   175a8:	ldrb	w10, [x27, x8]
   175ac:	add	x9, x9, x10, lsl #2
   175b0:	br	x9
   175b4:	ldrb	w8, [x21, x28]
   175b8:	add	x9, x28, #0x1
   175bc:	str	x9, [x20]
   175c0:	cbz	x8, 1771c <lzma_mode_is_supported@@XZ_5.0+0x6b50>
   175c4:	cmp	w8, #0xdf
   175c8:	b.hi	17728 <lzma_mode_is_supported@@XZ_5.0+0x6b5c>  // b.pmore
   175cc:	cmp	w8, #0x1
   175d0:	b.eq	17728 <lzma_mode_is_supported@@XZ_5.0+0x6b5c>  // b.none
   175d4:	ldrb	w9, [x23, #65]
   175d8:	cbnz	w9, 177b8 <lzma_mode_is_supported@@XZ_5.0+0x6bec>
   175dc:	sxtb	w9, w8
   175e0:	tbnz	w9, #31, 17738 <lzma_mode_is_supported@@XZ_5.0+0x6b6c>
   175e4:	cmp	w8, #0x2
   175e8:	b.hi	177b8 <lzma_mode_is_supported@@XZ_5.0+0x6bec>  // b.pmore
   175ec:	mov	x8, #0x3                   	// #3
   175f0:	movk	x8, #0x7, lsl #32
   175f4:	str	x8, [x23]
   175f8:	b	17760 <lzma_mode_is_supported@@XZ_5.0+0x6b94>
   175fc:	add	x8, x28, #0x1
   17600:	str	x8, [x20]
   17604:	ldrb	w9, [x21, x28]
   17608:	ldr	x8, [x23, #48]
   1760c:	add	x8, x8, x9, lsl #8
   17610:	str	x8, [x23, #48]
   17614:	mov	w8, #0x2                   	// #2
   17618:	str	w8, [x23]
   1761c:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17620:	add	x8, x28, #0x1
   17624:	str	x8, [x20]
   17628:	ldrb	w9, [x21, x28]
   1762c:	ldr	x8, [x23, #48]
   17630:	ldr	x10, [x23, #32]
   17634:	ldr	x0, [x23, #8]
   17638:	add	x8, x9, x8
   1763c:	add	x1, x8, #0x1
   17640:	mov	w8, #0x3                   	// #3
   17644:	str	x1, [x23, #48]
   17648:	str	w8, [x23]
   1764c:	blr	x10
   17650:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17654:	ldrb	w8, [x21, x28]
   17658:	add	x9, x28, #0x1
   1765c:	str	x9, [x20]
   17660:	lsl	x8, x8, #8
   17664:	str	x8, [x23, #56]
   17668:	mov	w8, #0x4                   	// #4
   1766c:	str	w8, [x23]
   17670:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17674:	ldrb	w1, [x21, x28]
   17678:	add	x8, x28, #0x1
   1767c:	mov	x0, x25
   17680:	str	x8, [x20]
   17684:	bl	168bc <lzma_mode_is_supported@@XZ_5.0+0x5cf0>
   17688:	tbnz	w0, #0, 17818 <lzma_mode_is_supported@@XZ_5.0+0x6c4c>
   1768c:	ldr	x8, [x23, #24]
   17690:	ldr	x0, [x23, #8]
   17694:	mov	x1, x25
   17698:	blr	x8
   1769c:	mov	w8, #0x6                   	// #6
   176a0:	str	w8, [x23]
   176a4:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   176a8:	ldp	x0, x8, [x23, #8]
   176ac:	mov	x1, x22
   176b0:	mov	x2, x21
   176b4:	mov	x3, x20
   176b8:	mov	x4, x19
   176bc:	blr	x8
   176c0:	ldr	x8, [x20]
   176c4:	ldr	x9, [x23, #56]
   176c8:	sub	x8, x8, x28
   176cc:	subs	x8, x9, x8
   176d0:	b.cc	176e4 <lzma_mode_is_supported@@XZ_5.0+0x6b18>  // b.lo, b.ul, b.last
   176d4:	cmp	w0, #0x1
   176d8:	str	x8, [x23, #56]
   176dc:	b.ne	17784 <lzma_mode_is_supported@@XZ_5.0+0x6bb8>  // b.any
   176e0:	cbz	x8, 17794 <lzma_mode_is_supported@@XZ_5.0+0x6bc8>
   176e4:	mov	w26, #0x9                   	// #9
   176e8:	mov	w8, wzr
   176ec:	tbnz	wzr, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   176f0:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   176f4:	mov	x0, x22
   176f8:	mov	x1, x21
   176fc:	mov	x2, x20
   17700:	mov	x3, x19
   17704:	mov	x4, x24
   17708:	bl	17860 <lzma_mode_is_supported@@XZ_5.0+0x6c94>
   1770c:	ldr	x8, [x24]
   17710:	cbnz	x8, 177f4 <lzma_mode_is_supported@@XZ_5.0+0x6c28>
   17714:	str	wzr, [x23]
   17718:	b	17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   1771c:	mov	w26, #0x1                   	// #1
   17720:	tbnz	w8, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17724:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   17728:	mov	w9, #0x101                 	// #257
   1772c:	strh	w9, [x23, #64]
   17730:	sxtb	w9, w8
   17734:	tbz	w9, #31, 175e4 <lzma_mode_is_supported@@XZ_5.0+0x6a18>
   17738:	lsl	w9, w8, #16
   1773c:	and	x9, x9, #0x1f0000
   17740:	cmp	w8, #0xc0
   17744:	str	x9, [x23, #48]
   17748:	mov	w9, #0x1                   	// #1
   1774c:	str	w9, [x23]
   17750:	b.cc	177b0 <lzma_mode_is_supported@@XZ_5.0+0x6be4>  // b.lo, b.ul, b.last
   17754:	mov	w8, #0x5                   	// #5
   17758:	strb	wzr, [x23, #64]
   1775c:	str	w8, [x23, #4]
   17760:	ldrb	w8, [x23, #65]
   17764:	cbz	w8, 177a4 <lzma_mode_is_supported@@XZ_5.0+0x6bd8>
   17768:	mov	x0, x22
   1776c:	strb	wzr, [x23, #65]
   17770:	bl	17854 <lzma_mode_is_supported@@XZ_5.0+0x6c88>
   17774:	mov	w26, wzr
   17778:	mov	w8, wzr
   1777c:	tbnz	wzr, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17780:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   17784:	mov	w26, w0
   17788:	mov	w8, wzr
   1778c:	tbnz	wzr, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   17790:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   17794:	mov	w8, #0x1                   	// #1
   17798:	str	wzr, [x23]
   1779c:	tbnz	w8, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   177a0:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   177a4:	mov	w8, #0x1                   	// #1
   177a8:	tbnz	w8, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   177ac:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   177b0:	ldrb	w9, [x23, #64]
   177b4:	cbz	w9, 177c8 <lzma_mode_is_supported@@XZ_5.0+0x6bfc>
   177b8:	mov	w26, #0x9                   	// #9
   177bc:	mov	w8, wzr
   177c0:	tbnz	wzr, #0, 17580 <lzma_mode_is_supported@@XZ_5.0+0x69b4>
   177c4:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   177c8:	cmp	w8, #0xa0
   177cc:	mov	w8, #0x6                   	// #6
   177d0:	str	w8, [x23, #4]
   177d4:	b.cc	17760 <lzma_mode_is_supported@@XZ_5.0+0x6b94>  // b.lo, b.ul, b.last
   177d8:	ldr	x8, [x23, #24]
   177dc:	ldr	x0, [x23, #8]
   177e0:	mov	x1, x25
   177e4:	blr	x8
   177e8:	b	17760 <lzma_mode_is_supported@@XZ_5.0+0x6b94>
   177ec:	mov	w26, #0xb                   	// #11
   177f0:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   177f4:	mov	w26, wzr
   177f8:	mov	w0, w26
   177fc:	ldp	x20, x19, [sp, #80]
   17800:	ldp	x22, x21, [sp, #64]
   17804:	ldp	x24, x23, [sp, #48]
   17808:	ldp	x26, x25, [sp, #32]
   1780c:	ldp	x28, x27, [sp, #16]
   17810:	ldp	x29, x30, [sp], #96
   17814:	ret
   17818:	mov	w26, #0x9                   	// #9
   1781c:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   17820:	stp	x29, x30, [sp, #-32]!
   17824:	stp	x20, x19, [sp, #16]
   17828:	mov	x19, x0
   1782c:	ldr	x0, [x0, #8]
   17830:	mov	x29, sp
   17834:	mov	x20, x1
   17838:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   1783c:	mov	x0, x19
   17840:	mov	x1, x20
   17844:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   17848:	ldp	x20, x19, [sp, #16]
   1784c:	ldp	x29, x30, [sp], #32
   17850:	ret
   17854:	mov	w8, #0x1                   	// #1
   17858:	strb	w8, [x0, #40]
   1785c:	ret
   17860:	stp	x29, x30, [sp, #-48]!
   17864:	ldr	x10, [x2]
   17868:	str	x21, [sp, #16]
   1786c:	ldr	x21, [x4]
   17870:	ldr	x8, [x0]
   17874:	ldr	x5, [x0, #24]
   17878:	sub	x11, x3, x10
   1787c:	mov	x9, x2
   17880:	add	x10, x21, x10
   17884:	cmp	x11, x21
   17888:	stp	x20, x19, [sp, #32]
   1788c:	mov	x20, x4
   17890:	mov	x19, x0
   17894:	csel	x2, x10, x3, hi  // hi = pmore
   17898:	add	x4, x0, #0x8
   1789c:	mov	x0, x1
   178a0:	mov	x1, x9
   178a4:	mov	x3, x8
   178a8:	mov	x29, sp
   178ac:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   178b0:	ldp	x8, x9, [x19, #8]
   178b4:	sub	x10, x21, x0
   178b8:	str	x10, [x20]
   178bc:	cmp	x8, x9
   178c0:	b.ls	178c8 <lzma_mode_is_supported@@XZ_5.0+0x6cfc>  // b.plast
   178c4:	str	x8, [x19, #16]
   178c8:	ldp	x20, x19, [sp, #32]
   178cc:	ldr	x21, [sp, #16]
   178d0:	ldp	x29, x30, [sp], #48
   178d4:	ret
   178d8:	stp	x29, x30, [sp, #-48]!
   178dc:	stp	x22, x21, [sp, #16]
   178e0:	stp	x20, x19, [sp, #32]
   178e4:	ldr	x20, [x0]
   178e8:	mov	x21, x2
   178ec:	mov	x19, x1
   178f0:	mov	x29, sp
   178f4:	cbnz	x20, 17938 <lzma_mode_is_supported@@XZ_5.0+0x6d6c>
   178f8:	mov	x22, x0
   178fc:	mov	w0, #0x158                 	// #344
   17900:	mov	x1, x19
   17904:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   17908:	cbz	x0, 17998 <lzma_mode_is_supported@@XZ_5.0+0x6dcc>
   1790c:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17910:	mov	x20, x0
   17914:	add	x8, x8, #0x9ac
   17918:	mov	x9, #0xffffffffffffffff    	// #-1
   1791c:	movi	v0.2d, #0x0
   17920:	str	x0, [x22]
   17924:	str	x8, [x22, #32]
   17928:	stp	xzr, x9, [x0]
   1792c:	stp	q0, q0, [x0, #16]
   17930:	str	q0, [x0, #48]
   17934:	str	xzr, [x0, #64]
   17938:	ldr	x0, [x21, #16]
   1793c:	bl	179dc <lzma_mode_is_supported@@XZ_5.0+0x6e10>
   17940:	cmn	x0, #0x1
   17944:	b.eq	17990 <lzma_mode_is_supported@@XZ_5.0+0x6dc4>  // b.none
   17948:	ldr	x8, [x21, #16]
   1794c:	add	x2, x21, #0x18
   17950:	movi	v0.2d, #0x0
   17954:	mov	x0, x20
   17958:	ldr	w8, [x8, #4]
   1795c:	mov	x1, x19
   17960:	stp	q0, q0, [x20, #80]
   17964:	stp	q0, q0, [x20, #112]
   17968:	stp	q0, q0, [x20, #144]
   1796c:	stp	q0, q0, [x20, #176]
   17970:	stp	q0, q0, [x20, #208]
   17974:	stp	q0, q0, [x20, #240]
   17978:	stp	q0, q0, [x20, #272]
   1797c:	stp	q0, q0, [x20, #304]
   17980:	str	x8, [x20, #72]
   17984:	strb	wzr, [x20, #336]
   17988:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
   1798c:	b	1799c <lzma_mode_is_supported@@XZ_5.0+0x6dd0>
   17990:	mov	w0, #0x8                   	// #8
   17994:	b	1799c <lzma_mode_is_supported@@XZ_5.0+0x6dd0>
   17998:	mov	w0, #0x5                   	// #5
   1799c:	ldp	x20, x19, [sp, #32]
   179a0:	ldp	x22, x21, [sp, #16]
   179a4:	ldp	x29, x30, [sp], #48
   179a8:	ret
   179ac:	stp	x29, x30, [sp, #-32]!
   179b0:	stp	x20, x19, [sp, #16]
   179b4:	mov	x29, sp
   179b8:	mov	x19, x1
   179bc:	mov	x20, x0
   179c0:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
   179c4:	mov	x0, x20
   179c8:	mov	x1, x19
   179cc:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   179d0:	ldp	x20, x19, [sp, #16]
   179d4:	ldp	x29, x30, [sp], #32
   179d8:	ret
   179dc:	cbz	x0, 179e8 <lzma_mode_is_supported@@XZ_5.0+0x6e1c>
   179e0:	ldr	w8, [x0]
   179e4:	cbz	w8, 179f0 <lzma_mode_is_supported@@XZ_5.0+0x6e24>
   179e8:	mov	x0, #0xffffffffffffffff    	// #-1
   179ec:	ret
   179f0:	ldr	w8, [x0, #4]
   179f4:	sub	w8, w8, #0x1
   179f8:	cmp	w8, #0xff
   179fc:	mov	w8, #0x158                 	// #344
   17a00:	csinv	x0, x8, xzr, ls  // ls = plast
   17a04:	ret
   17a08:	stp	x29, x30, [sp, #-16]!
   17a0c:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17a10:	adrp	x9, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17a14:	add	x8, x8, #0xa34
   17a18:	add	x9, x9, #0xb24
   17a1c:	mov	x29, sp
   17a20:	str	x8, [x0, #24]
   17a24:	str	x9, [x0, #64]
   17a28:	bl	178d8 <lzma_mode_is_supported@@XZ_5.0+0x6d0c>
   17a2c:	ldp	x29, x30, [sp], #16
   17a30:	ret
   17a34:	sub	sp, sp, #0x60
   17a38:	stp	x29, x30, [sp, #16]
   17a3c:	stp	x24, x23, [sp, #48]
   17a40:	stp	x22, x21, [sp, #64]
   17a44:	stp	x20, x19, [sp, #80]
   17a48:	add	x29, sp, #0x10
   17a4c:	str	x25, [sp, #32]
   17a50:	ldr	x8, [x0, #24]
   17a54:	ldr	w25, [x29, #80]
   17a58:	mov	x19, x6
   17a5c:	mov	x22, x5
   17a60:	mov	x20, x4
   17a64:	mov	x21, x3
   17a68:	mov	x23, x0
   17a6c:	cbz	x8, 17aac <lzma_mode_is_supported@@XZ_5.0+0x6ee0>
   17a70:	ldr	x0, [x23]
   17a74:	ldr	x24, [x19]
   17a78:	mov	x3, x21
   17a7c:	mov	x4, x20
   17a80:	mov	x5, x22
   17a84:	mov	x6, x19
   17a88:	str	w25, [sp]
   17a8c:	blr	x8
   17a90:	ldr	x8, [x19]
   17a94:	mov	w20, w0
   17a98:	add	x1, x22, x24
   17a9c:	mov	x0, x23
   17aa0:	sub	x2, x8, x24
   17aa4:	bl	17bc0 <lzma_mode_is_supported@@XZ_5.0+0x6ff4>
   17aa8:	b	17b04 <lzma_mode_is_supported@@XZ_5.0+0x6f38>
   17aac:	ldr	x8, [x21]
   17ab0:	ldr	x9, [x19]
   17ab4:	mov	x0, x23
   17ab8:	sub	x10, x20, x8
   17abc:	sub	x11, x7, x9
   17ac0:	cmp	x10, x11
   17ac4:	csel	x24, x10, x11, cc  // cc = lo, ul, last
   17ac8:	add	x1, x2, x8
   17acc:	add	x2, x22, x9
   17ad0:	mov	x3, x24
   17ad4:	bl	17b80 <lzma_mode_is_supported@@XZ_5.0+0x6fb4>
   17ad8:	ldr	x8, [x21]
   17adc:	ldr	x9, [x19]
   17ae0:	add	x8, x24, x8
   17ae4:	add	x9, x9, x24
   17ae8:	str	x8, [x21]
   17aec:	str	x9, [x19]
   17af0:	cbz	w25, 17b00 <lzma_mode_is_supported@@XZ_5.0+0x6f34>
   17af4:	cmp	x8, x20
   17af8:	cset	w20, eq  // eq = none
   17afc:	b	17b04 <lzma_mode_is_supported@@XZ_5.0+0x6f38>
   17b00:	mov	w20, wzr
   17b04:	mov	w0, w20
   17b08:	ldp	x20, x19, [sp, #80]
   17b0c:	ldp	x22, x21, [sp, #64]
   17b10:	ldp	x24, x23, [sp, #48]
   17b14:	ldr	x25, [sp, #32]
   17b18:	ldp	x29, x30, [sp, #16]
   17b1c:	add	sp, sp, #0x60
   17b20:	ret
   17b24:	stp	x29, x30, [sp, #-16]!
   17b28:	add	x2, x3, #0x10
   17b2c:	mov	x29, sp
   17b30:	bl	3904 <lzma_version_string@@XZ_5.0+0x234>
   17b34:	ldp	x29, x30, [sp], #16
   17b38:	ret
   17b3c:	stp	x29, x30, [sp, #-32]!
   17b40:	stp	x20, x19, [sp, #16]
   17b44:	mov	x29, sp
   17b48:	mov	x19, x1
   17b4c:	mov	x20, x0
   17b50:	bl	179dc <lzma_mode_is_supported@@XZ_5.0+0x6e10>
   17b54:	cmn	x0, #0x1
   17b58:	b.eq	17b70 <lzma_mode_is_supported@@XZ_5.0+0x6fa4>  // b.none
   17b5c:	ldrb	w8, [x20, #4]
   17b60:	mov	w0, wzr
   17b64:	sub	w8, w8, #0x1
   17b68:	strb	w8, [x19]
   17b6c:	b	17b74 <lzma_mode_is_supported@@XZ_5.0+0x6fa8>
   17b70:	mov	w0, #0xb                   	// #11
   17b74:	ldp	x20, x19, [sp, #16]
   17b78:	ldp	x29, x30, [sp], #32
   17b7c:	ret
   17b80:	cbz	x3, 17bbc <lzma_mode_is_supported@@XZ_5.0+0x6ff0>
   17b84:	ldr	x8, [x0, #72]
   17b88:	ldrb	w9, [x0, #80]
   17b8c:	add	x10, x0, #0x51
   17b90:	subs	x3, x3, #0x1
   17b94:	add	w11, w8, w9
   17b98:	and	x11, x11, #0xff
   17b9c:	ldrb	w11, [x10, x11]
   17ba0:	ldrb	w12, [x1], #1
   17ba4:	sub	w13, w9, #0x1
   17ba8:	strb	w13, [x0, #80]
   17bac:	strb	w12, [x10, w9, uxtw]
   17bb0:	sub	w9, w12, w11
   17bb4:	strb	w9, [x2], #1
   17bb8:	b.ne	17b88 <lzma_mode_is_supported@@XZ_5.0+0x6fbc>  // b.any
   17bbc:	ret
   17bc0:	cbz	x2, 17c00 <lzma_mode_is_supported@@XZ_5.0+0x7034>
   17bc4:	ldr	x8, [x0, #72]
   17bc8:	ldrb	w9, [x0, #80]
   17bcc:	ldrb	w11, [x1]
   17bd0:	add	x10, x0, #0x51
   17bd4:	subs	x2, x2, #0x1
   17bd8:	add	w12, w8, w9
   17bdc:	sub	w13, w9, #0x1
   17be0:	and	x12, x12, #0xff
   17be4:	ldrb	w12, [x10, x12]
   17be8:	strb	w13, [x0, #80]
   17bec:	strb	w11, [x10, w9, uxtw]
   17bf0:	ldrb	w9, [x1]
   17bf4:	sub	w9, w9, w12
   17bf8:	strb	w9, [x1], #1
   17bfc:	b.ne	17bc8 <lzma_mode_is_supported@@XZ_5.0+0x6ffc>  // b.any
   17c00:	ret
   17c04:	stp	x29, x30, [sp, #-16]!
   17c08:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17c0c:	add	x8, x8, #0xc24
   17c10:	mov	x29, sp
   17c14:	str	x8, [x0, #24]
   17c18:	bl	178d8 <lzma_mode_is_supported@@XZ_5.0+0x6d0c>
   17c1c:	ldp	x29, x30, [sp], #16
   17c20:	ret
   17c24:	sub	sp, sp, #0x50
   17c28:	stp	x29, x30, [sp, #16]
   17c2c:	stp	x22, x21, [sp, #48]
   17c30:	stp	x20, x19, [sp, #64]
   17c34:	add	x29, sp, #0x10
   17c38:	mov	x21, x0
   17c3c:	ldr	w8, [x29, #64]
   17c40:	ldr	x9, [x0, #24]
   17c44:	ldr	x0, [x0]
   17c48:	str	x23, [sp, #32]
   17c4c:	ldr	x23, [x6]
   17c50:	mov	x19, x6
   17c54:	mov	x20, x5
   17c58:	str	w8, [sp]
   17c5c:	blr	x9
   17c60:	ldr	x8, [x19]
   17c64:	mov	w22, w0
   17c68:	add	x1, x20, x23
   17c6c:	mov	x0, x21
   17c70:	sub	x2, x8, x23
   17c74:	bl	17cf0 <lzma_mode_is_supported@@XZ_5.0+0x7124>
   17c78:	mov	w0, w22
   17c7c:	ldp	x20, x19, [sp, #64]
   17c80:	ldp	x22, x21, [sp, #48]
   17c84:	ldr	x23, [sp, #32]
   17c88:	ldp	x29, x30, [sp, #16]
   17c8c:	add	sp, sp, #0x50
   17c90:	ret
   17c94:	stp	x29, x30, [sp, #-32]!
   17c98:	cmp	x3, #0x1
   17c9c:	stp	x20, x19, [sp, #16]
   17ca0:	mov	x29, sp
   17ca4:	b.ne	17cd8 <lzma_mode_is_supported@@XZ_5.0+0x710c>  // b.any
   17ca8:	mov	x20, x0
   17cac:	mov	w0, #0x28                  	// #40
   17cb0:	mov	x19, x2
   17cb4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   17cb8:	cbz	x0, 17ce0 <lzma_mode_is_supported@@XZ_5.0+0x7114>
   17cbc:	ldrb	w9, [x19]
   17cc0:	mov	x8, x0
   17cc4:	mov	w0, wzr
   17cc8:	add	w9, w9, #0x1
   17ccc:	stp	wzr, w9, [x8]
   17cd0:	str	x8, [x20]
   17cd4:	b	17ce4 <lzma_mode_is_supported@@XZ_5.0+0x7118>
   17cd8:	mov	w0, #0x8                   	// #8
   17cdc:	b	17ce4 <lzma_mode_is_supported@@XZ_5.0+0x7118>
   17ce0:	mov	w0, #0x5                   	// #5
   17ce4:	ldp	x20, x19, [sp, #16]
   17ce8:	ldp	x29, x30, [sp], #32
   17cec:	ret
   17cf0:	cbz	x2, 17d30 <lzma_mode_is_supported@@XZ_5.0+0x7164>
   17cf4:	ldr	x8, [x0, #72]
   17cf8:	ldrb	w9, [x0, #80]
   17cfc:	add	x10, x0, #0x51
   17d00:	ldrb	w11, [x1]
   17d04:	subs	x2, x2, #0x1
   17d08:	add	w9, w8, w9
   17d0c:	and	x9, x9, #0xff
   17d10:	ldrb	w9, [x10, x9]
   17d14:	add	w9, w11, w9
   17d18:	strb	w9, [x1], #1
   17d1c:	ldrb	w11, [x0, #80]
   17d20:	sub	w12, w11, #0x1
   17d24:	strb	w12, [x0, #80]
   17d28:	strb	w9, [x10, x11]
   17d2c:	b.ne	17cf8 <lzma_mode_is_supported@@XZ_5.0+0x712c>  // b.any
   17d30:	ret
   17d34:	stp	x29, x30, [sp, #-96]!
   17d38:	stp	x26, x25, [sp, #32]
   17d3c:	stp	x24, x23, [sp, #48]
   17d40:	stp	x22, x21, [sp, #64]
   17d44:	stp	x20, x19, [sp, #80]
   17d48:	ldr	x22, [x0]
   17d4c:	mov	w21, w7
   17d50:	mov	w23, w6
   17d54:	mov	x20, x2
   17d58:	mov	x19, x1
   17d5c:	str	x27, [sp, #16]
   17d60:	mov	x29, sp
   17d64:	cbz	x22, 17d8c <lzma_mode_is_supported@@XZ_5.0+0x71c0>
   17d68:	ldr	x8, [x20, #16]
   17d6c:	cbz	x8, 17e14 <lzma_mode_is_supported@@XZ_5.0+0x7248>
   17d70:	ldr	w8, [x8]
   17d74:	sub	w9, w23, #0x1
   17d78:	tst	w8, w9
   17d7c:	str	w8, [x22, #96]
   17d80:	b.eq	17e18 <lzma_mode_is_supported@@XZ_5.0+0x724c>  // b.none
   17d84:	mov	w0, #0x8                   	// #8
   17d88:	b	17e3c <lzma_mode_is_supported@@XZ_5.0+0x7270>
   17d8c:	lsl	x27, x5, #1
   17d90:	mov	x26, x0
   17d94:	add	x0, x27, #0x88
   17d98:	mov	x1, x19
   17d9c:	mov	x24, x4
   17da0:	mov	x25, x3
   17da4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   17da8:	cbz	x0, 17e0c <lzma_mode_is_supported@@XZ_5.0+0x7240>
   17dac:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x6434>
   17db0:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   17db4:	add	x8, x8, #0xe60
   17db8:	add	x9, x9, #0xd8
   17dbc:	stp	x8, x9, [x26, #24]
   17dc0:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   17dc4:	add	x8, x8, #0x114
   17dc8:	mov	x22, x0
   17dcc:	str	x8, [x26, #64]
   17dd0:	mov	x8, #0xffffffffffffffff    	// #-1
   17dd4:	movi	v0.2d, #0x0
   17dd8:	str	x0, [x26]
   17ddc:	stp	xzr, x8, [x0]
   17de0:	stp	q0, q0, [x0, #16]
   17de4:	str	q0, [x0, #48]
   17de8:	str	xzr, [x0, #64]
   17dec:	str	x25, [x0, #80]
   17df0:	str	x27, [x0, #104]
   17df4:	cbz	x24, 17e58 <lzma_mode_is_supported@@XZ_5.0+0x728c>
   17df8:	mov	x0, x24
   17dfc:	mov	x1, x19
   17e00:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   17e04:	str	x0, [x22, #88]
   17e08:	cbnz	x0, 17d68 <lzma_mode_is_supported@@XZ_5.0+0x719c>
   17e0c:	mov	w0, #0x5                   	// #5
   17e10:	b	17e3c <lzma_mode_is_supported@@XZ_5.0+0x7270>
   17e14:	str	wzr, [x22, #96]
   17e18:	and	w8, w21, #0x1
   17e1c:	add	x2, x20, #0x18
   17e20:	mov	x0, x22
   17e24:	mov	x1, x19
   17e28:	strb	wzr, [x22, #72]
   17e2c:	stp	xzr, xzr, [x22, #120]
   17e30:	strb	w8, [x22, #73]
   17e34:	str	xzr, [x22, #112]
   17e38:	bl	3834 <lzma_version_string@@XZ_5.0+0x164>
   17e3c:	ldp	x20, x19, [sp, #80]
   17e40:	ldp	x22, x21, [sp, #64]
   17e44:	ldp	x24, x23, [sp, #48]
   17e48:	ldp	x26, x25, [sp, #32]
   17e4c:	ldr	x27, [sp, #16]
   17e50:	ldp	x29, x30, [sp], #96
   17e54:	ret
   17e58:	str	xzr, [x22, #88]
   17e5c:	b	17d68 <lzma_mode_is_supported@@XZ_5.0+0x719c>
   17e60:	sub	sp, sp, #0xa0
   17e64:	stp	x29, x30, [sp, #64]
   17e68:	add	x29, sp, #0x40
   17e6c:	stp	x26, x25, [sp, #96]
   17e70:	ldr	w26, [x29, #96]
   17e74:	stp	x28, x27, [sp, #80]
   17e78:	stp	x24, x23, [sp, #112]
   17e7c:	stp	x22, x21, [sp, #128]
   17e80:	cmp	w26, #0x1
   17e84:	stp	x20, x19, [sp, #144]
   17e88:	b.ne	17e94 <lzma_mode_is_supported@@XZ_5.0+0x72c8>  // b.any
   17e8c:	mov	w25, #0x8                   	// #8
   17e90:	b	18084 <lzma_mode_is_supported@@XZ_5.0+0x74b8>
   17e94:	mov	x21, x0
   17e98:	ldr	x8, [x21, #112]!
   17e9c:	mov	x27, x2
   17ea0:	mov	x19, x7
   17ea4:	mov	x20, x6
   17ea8:	ldr	x2, [x21, #8]
   17eac:	mov	x22, x5
   17eb0:	mov	x24, x4
   17eb4:	mov	x25, x3
   17eb8:	mov	x28, x1
   17ebc:	mov	x23, x0
   17ec0:	cmp	x8, x2
   17ec4:	b.cs	17ef4 <lzma_mode_is_supported@@XZ_5.0+0x7328>  // b.hs, b.nlast
   17ec8:	add	x0, x23, #0x88
   17ecc:	mov	x1, x21
   17ed0:	mov	x3, x22
   17ed4:	mov	x4, x20
   17ed8:	mov	x5, x19
   17edc:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   17ee0:	ldp	x8, x9, [x23, #112]
   17ee4:	cmp	x8, x9
   17ee8:	b.cc	18080 <lzma_mode_is_supported@@XZ_5.0+0x74b4>  // b.lo, b.ul, b.last
   17eec:	ldrb	w8, [x23, #72]
   17ef0:	cbnz	w8, 18078 <lzma_mode_is_supported@@XZ_5.0+0x74ac>
   17ef4:	stp	x24, x27, [x29, #-16]
   17ef8:	stur	x25, [x29, #-24]
   17efc:	mov	x24, x23
   17f00:	ldr	x9, [x24, #128]!
   17f04:	stur	xzr, [x24, #-8]
   17f08:	ldr	x27, [x20]
   17f0c:	ldur	x8, [x24, #-16]
   17f10:	sub	x10, x19, x27
   17f14:	sub	x25, x9, x8
   17f18:	cmp	x10, x25
   17f1c:	b.hi	17f48 <lzma_mode_is_supported@@XZ_5.0+0x737c>  // b.pmore
   17f20:	cbz	x25, 17f48 <lzma_mode_is_supported@@XZ_5.0+0x737c>
   17f24:	cbz	x8, 17f40 <lzma_mode_is_supported@@XZ_5.0+0x7374>
   17f28:	add	x0, x23, #0x88
   17f2c:	add	x1, x0, x8
   17f30:	mov	x2, x25
   17f34:	bl	30b0 <memmove@plt>
   17f38:	str	x25, [x23, #128]
   17f3c:	str	xzr, [x23, #112]
   17f40:	ldur	x27, [x29, #-8]
   17f44:	b	17fe0 <lzma_mode_is_supported@@XZ_5.0+0x7414>
   17f48:	add	x9, x23, #0x88
   17f4c:	add	x0, x22, x27
   17f50:	add	x1, x9, x8
   17f54:	mov	x2, x25
   17f58:	stp	x9, x0, [sp, #16]
   17f5c:	bl	3090 <memcpy@plt>
   17f60:	ldp	x4, x2, [x29, #-16]
   17f64:	ldur	x3, [x29, #-24]
   17f68:	add	x8, x25, x27
   17f6c:	mov	x0, x23
   17f70:	mov	x1, x28
   17f74:	mov	x5, x22
   17f78:	mov	x6, x20
   17f7c:	mov	x7, x19
   17f80:	str	x8, [x20]
   17f84:	str	w26, [sp]
   17f88:	str	x28, [sp, #32]
   17f8c:	bl	1812c <lzma_mode_is_supported@@XZ_5.0+0x7560>
   17f90:	cmp	w0, #0x0
   17f94:	mov	w25, w0
   17f98:	cset	w8, ne  // ne = any
   17f9c:	cbnz	w0, 17fd4 <lzma_mode_is_supported@@XZ_5.0+0x7408>
   17fa0:	ldr	x8, [x20]
   17fa4:	ldr	x1, [sp, #24]
   17fa8:	mov	x0, x23
   17fac:	sub	x27, x8, x27
   17fb0:	mov	x2, x27
   17fb4:	bl	181e8 <lzma_mode_is_supported@@XZ_5.0+0x761c>
   17fb8:	ldrb	w8, [x23, #72]
   17fbc:	sub	x2, x27, x0
   17fc0:	str	xzr, [x23, #112]
   17fc4:	str	x2, [x23, #128]
   17fc8:	cbz	w8, 180a8 <lzma_mode_is_supported@@XZ_5.0+0x74dc>
   17fcc:	mov	w8, wzr
   17fd0:	str	xzr, [x24]
   17fd4:	ldur	x27, [x29, #-8]
   17fd8:	ldr	x28, [sp, #32]
   17fdc:	cbnz	w8, 18084 <lzma_mode_is_supported@@XZ_5.0+0x74b8>
   17fe0:	ldr	x8, [x24]
   17fe4:	cbz	x8, 18060 <lzma_mode_is_supported@@XZ_5.0+0x7494>
   17fe8:	ldr	x7, [x23, #104]
   17fec:	ldp	x3, x4, [x29, #-24]
   17ff0:	add	x8, x23, #0x88
   17ff4:	mov	x0, x23
   17ff8:	mov	x1, x28
   17ffc:	mov	x2, x27
   18000:	mov	x5, x8
   18004:	mov	x6, x24
   18008:	str	w26, [sp]
   1800c:	mov	x26, x8
   18010:	bl	1812c <lzma_mode_is_supported@@XZ_5.0+0x7560>
   18014:	cmp	w0, #0x0
   18018:	csel	w25, w25, w0, eq  // eq = none
   1801c:	cbnz	w0, 18084 <lzma_mode_is_supported@@XZ_5.0+0x74b8>
   18020:	ldr	x2, [x23, #128]
   18024:	mov	x0, x23
   18028:	mov	x1, x26
   1802c:	bl	181e8 <lzma_mode_is_supported@@XZ_5.0+0x761c>
   18030:	ldrb	w8, [x23, #72]
   18034:	str	x0, [x23, #120]
   18038:	cbz	w8, 18044 <lzma_mode_is_supported@@XZ_5.0+0x7478>
   1803c:	ldr	x8, [x23, #128]
   18040:	str	x8, [x23, #120]
   18044:	ldr	x2, [x23, #120]
   18048:	mov	x0, x26
   1804c:	mov	x1, x21
   18050:	mov	x3, x22
   18054:	mov	x4, x20
   18058:	mov	x5, x19
   1805c:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   18060:	ldrb	w8, [x23, #72]
   18064:	cbz	w8, 18080 <lzma_mode_is_supported@@XZ_5.0+0x74b4>
   18068:	ldr	x8, [x21]
   1806c:	ldr	x9, [x24]
   18070:	cmp	x8, x9
   18074:	b.ne	18080 <lzma_mode_is_supported@@XZ_5.0+0x74b4>  // b.any
   18078:	mov	w25, #0x1                   	// #1
   1807c:	b	18084 <lzma_mode_is_supported@@XZ_5.0+0x74b8>
   18080:	mov	w25, wzr
   18084:	mov	w0, w25
   18088:	ldp	x20, x19, [sp, #144]
   1808c:	ldp	x22, x21, [sp, #128]
   18090:	ldp	x24, x23, [sp, #112]
   18094:	ldp	x26, x25, [sp, #96]
   18098:	ldp	x28, x27, [sp, #80]
   1809c:	ldp	x29, x30, [sp, #64]
   180a0:	add	sp, sp, #0xa0
   180a4:	ret
   180a8:	ldur	x27, [x29, #-8]
   180ac:	ldr	x28, [sp, #32]
   180b0:	cbz	x2, 180cc <lzma_mode_is_supported@@XZ_5.0+0x7500>
   180b4:	ldr	x8, [x20]
   180b8:	ldr	x0, [sp, #16]
   180bc:	sub	x8, x8, x2
   180c0:	add	x1, x22, x8
   180c4:	str	x8, [x20]
   180c8:	bl	3090 <memcpy@plt>
   180cc:	mov	w8, wzr
   180d0:	cbnz	wzr, 18084 <lzma_mode_is_supported@@XZ_5.0+0x74b8>
   180d4:	b	17fe0 <lzma_mode_is_supported@@XZ_5.0+0x7414>
   180d8:	stp	x29, x30, [sp, #-32]!
   180dc:	stp	x20, x19, [sp, #16]
   180e0:	mov	x29, sp
   180e4:	mov	x19, x1
   180e8:	mov	x20, x0
   180ec:	bl	38ac <lzma_version_string@@XZ_5.0+0x1dc>
   180f0:	ldr	x0, [x20, #88]
   180f4:	mov	x1, x19
   180f8:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   180fc:	mov	x0, x20
   18100:	mov	x1, x19
   18104:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   18108:	ldp	x20, x19, [sp, #16]
   1810c:	ldp	x29, x30, [sp], #32
   18110:	ret
   18114:	stp	x29, x30, [sp, #-16]!
   18118:	add	x2, x3, #0x10
   1811c:	mov	x29, sp
   18120:	bl	3904 <lzma_version_string@@XZ_5.0+0x234>
   18124:	ldp	x29, x30, [sp], #16
   18128:	ret
   1812c:	sub	sp, sp, #0x40
   18130:	stp	x29, x30, [sp, #16]
   18134:	stp	x22, x21, [sp, #32]
   18138:	stp	x20, x19, [sp, #48]
   1813c:	add	x29, sp, #0x10
   18140:	ldr	x8, [x0, #24]
   18144:	ldr	w22, [x29, #48]
   18148:	mov	x20, x4
   1814c:	mov	x21, x3
   18150:	mov	x19, x0
   18154:	cbz	x8, 18184 <lzma_mode_is_supported@@XZ_5.0+0x75b8>
   18158:	ldr	x0, [x19]
   1815c:	mov	x3, x21
   18160:	mov	x4, x20
   18164:	str	w22, [sp]
   18168:	blr	x8
   1816c:	cbz	w0, 181d0 <lzma_mode_is_supported@@XZ_5.0+0x7604>
   18170:	cmp	w0, #0x1
   18174:	b.ne	181d4 <lzma_mode_is_supported@@XZ_5.0+0x7608>  // b.any
   18178:	mov	w8, #0x1                   	// #1
   1817c:	strb	w8, [x19, #72]
   18180:	b	181d0 <lzma_mode_is_supported@@XZ_5.0+0x7604>
   18184:	mov	x0, x2
   18188:	mov	x1, x21
   1818c:	mov	x2, x20
   18190:	mov	x3, x5
   18194:	mov	x4, x6
   18198:	mov	x5, x7
   1819c:	bl	37c4 <lzma_version_string@@XZ_5.0+0xf4>
   181a0:	cmp	w22, #0x3
   181a4:	mov	w0, wzr
   181a8:	b.ne	181d4 <lzma_mode_is_supported@@XZ_5.0+0x7608>  // b.any
   181ac:	ldrb	w8, [x19, #73]
   181b0:	cbz	w8, 181d4 <lzma_mode_is_supported@@XZ_5.0+0x7608>
   181b4:	ldr	x8, [x21]
   181b8:	cmp	x8, x20
   181bc:	b.ne	181d0 <lzma_mode_is_supported@@XZ_5.0+0x7604>  // b.any
   181c0:	mov	w8, #0x1                   	// #1
   181c4:	mov	w0, wzr
   181c8:	strb	w8, [x19, #72]
   181cc:	b	181d4 <lzma_mode_is_supported@@XZ_5.0+0x7608>
   181d0:	mov	w0, wzr
   181d4:	ldp	x20, x19, [sp, #48]
   181d8:	ldp	x22, x21, [sp, #32]
   181dc:	ldp	x29, x30, [sp, #16]
   181e0:	add	sp, sp, #0x40
   181e4:	ret
   181e8:	stp	x29, x30, [sp, #-32]!
   181ec:	str	x19, [sp, #16]
   181f0:	mov	x19, x0
   181f4:	ldr	w8, [x19, #96]
   181f8:	mov	x4, x2
   181fc:	ldp	x9, x0, [x0, #80]
   18200:	ldrb	w2, [x19, #73]
   18204:	mov	x3, x1
   18208:	mov	w1, w8
   1820c:	mov	x29, sp
   18210:	blr	x9
   18214:	ldr	w8, [x19, #96]
   18218:	add	w8, w8, w0
   1821c:	str	w8, [x19, #96]
   18220:	ldr	x19, [sp, #16]
   18224:	ldp	x29, x30, [sp], #32
   18228:	ret
   1822c:	cbz	x1, 18244 <lzma_mode_is_supported@@XZ_5.0+0x7678>
   18230:	ldr	w8, [x1]
   18234:	cmp	w8, #0x0
   18238:	cset	w8, ne  // ne = any
   1823c:	lsl	w8, w8, #2
   18240:	b	18248 <lzma_mode_is_supported@@XZ_5.0+0x767c>
   18244:	mov	w8, wzr
   18248:	str	w8, [x0]
   1824c:	mov	w0, wzr
   18250:	ret
   18254:	stp	x29, x30, [sp, #-16]!
   18258:	mov	x29, sp
   1825c:	cbz	x0, 18274 <lzma_mode_is_supported@@XZ_5.0+0x76a8>
   18260:	ldr	w8, [x0]
   18264:	cbz	w8, 18274 <lzma_mode_is_supported@@XZ_5.0+0x76a8>
   18268:	mov	x0, x1
   1826c:	mov	w1, w8
   18270:	bl	18280 <lzma_mode_is_supported@@XZ_5.0+0x76b4>
   18274:	mov	w0, wzr
   18278:	ldp	x29, x30, [sp], #16
   1827c:	ret
   18280:	str	w1, [x0]
   18284:	ret
   18288:	stp	x29, x30, [sp, #-48]!
   1828c:	stp	x22, x21, [sp, #16]
   18290:	stp	x20, x19, [sp, #32]
   18294:	mov	x29, sp
   18298:	cbz	x3, 182f8 <lzma_mode_is_supported@@XZ_5.0+0x772c>
   1829c:	cmp	x3, #0x4
   182a0:	b.ne	182dc <lzma_mode_is_supported@@XZ_5.0+0x7710>  // b.any
   182a4:	mov	x20, x0
   182a8:	mov	w0, #0x4                   	// #4
   182ac:	mov	x21, x2
   182b0:	mov	x19, x1
   182b4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   182b8:	cbz	x0, 182e4 <lzma_mode_is_supported@@XZ_5.0+0x7718>
   182bc:	mov	x22, x0
   182c0:	mov	x0, x21
   182c4:	bl	1830c <lzma_mode_is_supported@@XZ_5.0+0x7740>
   182c8:	str	w0, [x22]
   182cc:	cbz	w0, 182ec <lzma_mode_is_supported@@XZ_5.0+0x7720>
   182d0:	mov	w0, wzr
   182d4:	str	x22, [x20]
   182d8:	b	182fc <lzma_mode_is_supported@@XZ_5.0+0x7730>
   182dc:	mov	w0, #0x8                   	// #8
   182e0:	b	182fc <lzma_mode_is_supported@@XZ_5.0+0x7730>
   182e4:	mov	w0, #0x5                   	// #5
   182e8:	b	182fc <lzma_mode_is_supported@@XZ_5.0+0x7730>
   182ec:	mov	x0, x22
   182f0:	mov	x1, x19
   182f4:	bl	3788 <lzma_version_string@@XZ_5.0+0xb8>
   182f8:	mov	w0, wzr
   182fc:	ldp	x20, x19, [sp, #32]
   18300:	ldp	x22, x21, [sp, #16]
   18304:	ldp	x29, x30, [sp], #48
   18308:	ret
   1830c:	ldr	w0, [x0]
   18310:	ret
   18314:	stp	x29, x30, [sp, #-16]!
   18318:	mov	w3, #0x1                   	// #1
   1831c:	mov	x29, sp
   18320:	bl	1832c <lzma_mode_is_supported@@XZ_5.0+0x7760>
   18324:	ldp	x29, x30, [sp], #16
   18328:	ret
   1832c:	stp	x29, x30, [sp, #-32]!
   18330:	and	w7, w3, #0x1
   18334:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18338:	add	x3, x3, #0x394
   1833c:	mov	w4, #0x8                   	// #8
   18340:	mov	w5, #0x5                   	// #5
   18344:	mov	w6, #0x1                   	// #1
   18348:	str	x19, [sp, #16]
   1834c:	mov	x29, sp
   18350:	mov	x19, x0
   18354:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   18358:	cbnz	w0, 18370 <lzma_mode_is_supported@@XZ_5.0+0x77a4>
   1835c:	ldr	x8, [x19]
   18360:	mov	x9, #0xfffb00000000        	// #281453501874176
   18364:	movk	x9, #0xffff, lsl #48
   18368:	ldr	x8, [x8, #88]
   1836c:	str	x9, [x8]
   18370:	ldr	x19, [sp, #16]
   18374:	ldp	x29, x30, [sp], #32
   18378:	ret
   1837c:	stp	x29, x30, [sp, #-16]!
   18380:	mov	w3, wzr
   18384:	mov	x29, sp
   18388:	bl	1832c <lzma_mode_is_supported@@XZ_5.0+0x7760>
   1838c:	ldp	x29, x30, [sp], #16
   18390:	ret
   18394:	subs	x9, x4, #0x5
   18398:	b.cs	183a4 <lzma_mode_is_supported@@XZ_5.0+0x77d8>  // b.hs, b.nlast
   1839c:	mov	x0, xzr
   183a0:	ret
   183a4:	str	x25, [sp, #-64]!
   183a8:	stp	x24, x23, [sp, #16]
   183ac:	stp	x22, x21, [sp, #32]
   183b0:	stp	x20, x19, [sp, #48]
   183b4:	mov	x8, x0
   183b8:	ldp	w10, w17, [x8]
   183bc:	sub	w18, w1, #0x5
   183c0:	adrp	x13, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   183c4:	mov	x0, xzr
   183c8:	sub	w4, w1, w17
   183cc:	cmp	w4, #0x5
   183d0:	mov	w11, #0x17                  	// #23
   183d4:	mov	w12, #0xfffffffb            	// #-5
   183d8:	add	x13, x13, #0xfa0
   183dc:	mov	w14, #0x18                  	// #24
   183e0:	mov	w15, #0xffffffff            	// #-1
   183e4:	mov	w16, #0x11                  	// #17
   183e8:	csel	w4, w18, w17, hi  // hi = pmore
   183ec:	mov	w17, #0xee                  	// #238
   183f0:	b	18400 <lzma_mode_is_supported@@XZ_5.0+0x7834>
   183f4:	add	x0, x0, #0x1
   183f8:	cmp	x0, x9
   183fc:	b.hi	18538 <lzma_mode_is_supported@@XZ_5.0+0x796c>  // b.pmore
   18400:	ldrb	w18, [x3, x0]
   18404:	and	w18, w18, #0xfe
   18408:	cmp	w18, #0xe8
   1840c:	b.ne	183f4 <lzma_mode_is_supported@@XZ_5.0+0x7828>  // b.any
   18410:	add	w18, w0, w1
   18414:	sub	w4, w18, w4
   18418:	cmp	w4, #0x5
   1841c:	b.ls	18428 <lzma_mode_is_supported@@XZ_5.0+0x785c>  // b.plast
   18420:	mov	w10, wzr
   18424:	b	18438 <lzma_mode_is_supported@@XZ_5.0+0x786c>
   18428:	cbz	w4, 18438 <lzma_mode_is_supported@@XZ_5.0+0x786c>
   1842c:	subs	w4, w4, #0x1
   18430:	and	w10, w17, w10, lsl #1
   18434:	b.ne	1842c <lzma_mode_is_supported@@XZ_5.0+0x7860>  // b.any
   18438:	add	x4, x0, #0x4
   1843c:	ldrb	w5, [x3, x4]
   18440:	cmp	w5, #0xff
   18444:	b.eq	1844c <lzma_mode_is_supported@@XZ_5.0+0x7880>  // b.none
   18448:	cbnz	w5, 18510 <lzma_mode_is_supported@@XZ_5.0+0x7944>
   1844c:	cmp	w10, #0x1f
   18450:	b.hi	18510 <lzma_mode_is_supported@@XZ_5.0+0x7944>  // b.pmore
   18454:	ubfx	w6, w10, #1, #3
   18458:	lsr	x6, x11, x6
   1845c:	tbz	w6, #0, 18510 <lzma_mode_is_supported@@XZ_5.0+0x7944>
   18460:	lsl	w20, w5, #24
   18464:	add	x5, x0, #0x3
   18468:	add	x6, x0, #0x2
   1846c:	ldrb	w22, [x3, x5]
   18470:	add	x19, x0, #0x1
   18474:	ldrb	w24, [x3, x6]
   18478:	ldrb	w25, [x3, x19]
   1847c:	bfi	w20, w22, #16, #8
   18480:	add	w21, w18, #0x5
   18484:	sub	w23, w12, w18
   18488:	tst	w2, #0x1
   1848c:	bfi	w20, w24, #8, #8
   18490:	lsr	w7, w10, #1
   18494:	orr	w22, w20, w25
   18498:	csel	w21, w21, w23, ne  // ne = any
   1849c:	b	184b4 <lzma_mode_is_supported@@XZ_5.0+0x78e8>
   184a0:	neg	w22, w23
   184a4:	lsl	w22, w15, w22
   184a8:	eon	w22, w20, w22
   184ac:	mov	w23, #0x1                   	// #1
   184b0:	tbz	w23, #0, 184e4 <lzma_mode_is_supported@@XZ_5.0+0x7918>
   184b4:	add	w20, w22, w21
   184b8:	cbz	w10, 184e4 <lzma_mode_is_supported@@XZ_5.0+0x7918>
   184bc:	ldr	w23, [x13, x7, lsl #2]
   184c0:	lsl	w23, w23, #3
   184c4:	sub	w24, w14, w23
   184c8:	lsr	w24, w20, w24
   184cc:	and	w24, w24, #0xff
   184d0:	cmp	w24, #0xff
   184d4:	b.eq	184a0 <lzma_mode_is_supported@@XZ_5.0+0x78d4>  // b.none
   184d8:	cbz	w24, 184a0 <lzma_mode_is_supported@@XZ_5.0+0x78d4>
   184dc:	mov	w23, wzr
   184e0:	tbnz	w23, #0, 184b4 <lzma_mode_is_supported@@XZ_5.0+0x78e8>
   184e4:	ubfx	w7, w20, #24, #1
   184e8:	lsr	w21, w20, #16
   184ec:	lsr	w22, w20, #8
   184f0:	neg	w7, w7
   184f4:	mov	w10, wzr
   184f8:	strb	w7, [x3, x4]
   184fc:	strb	w21, [x3, x5]
   18500:	strb	w22, [x3, x6]
   18504:	strb	w20, [x3, x19]
   18508:	add	x0, x0, #0x5
   1850c:	b	1852c <lzma_mode_is_supported@@XZ_5.0+0x7960>
   18510:	add	x0, x0, #0x1
   18514:	cbz	w5, 18528 <lzma_mode_is_supported@@XZ_5.0+0x795c>
   18518:	cmp	w5, #0xff
   1851c:	b.eq	18528 <lzma_mode_is_supported@@XZ_5.0+0x795c>  // b.none
   18520:	orr	w10, w10, #0x1
   18524:	b	1852c <lzma_mode_is_supported@@XZ_5.0+0x7960>
   18528:	orr	w10, w10, w16
   1852c:	mov	w4, w18
   18530:	cmp	x0, x9
   18534:	b.ls	18400 <lzma_mode_is_supported@@XZ_5.0+0x7834>  // b.plast
   18538:	stp	w10, w4, [x8]
   1853c:	ldp	x20, x19, [sp, #48]
   18540:	ldp	x22, x21, [sp, #32]
   18544:	ldp	x24, x23, [sp, #16]
   18548:	ldr	x25, [sp], #64
   1854c:	ret
   18550:	stp	x29, x30, [sp, #-16]!
   18554:	mov	w3, #0x1                   	// #1
   18558:	mov	x29, sp
   1855c:	bl	18568 <lzma_mode_is_supported@@XZ_5.0+0x799c>
   18560:	ldp	x29, x30, [sp], #16
   18564:	ret
   18568:	stp	x29, x30, [sp, #-16]!
   1856c:	and	w7, w3, #0x1
   18570:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18574:	add	x3, x3, #0x5ac
   18578:	mov	w5, #0x4                   	// #4
   1857c:	mov	w6, #0x4                   	// #4
   18580:	mov	x4, xzr
   18584:	mov	x29, sp
   18588:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   1858c:	ldp	x29, x30, [sp], #16
   18590:	ret
   18594:	stp	x29, x30, [sp, #-16]!
   18598:	mov	w3, wzr
   1859c:	mov	x29, sp
   185a0:	bl	18568 <lzma_mode_is_supported@@XZ_5.0+0x799c>
   185a4:	ldp	x29, x30, [sp], #16
   185a8:	ret
   185ac:	cmp	x4, #0x4
   185b0:	b.cs	185bc <lzma_mode_is_supported@@XZ_5.0+0x79f0>  // b.hs, b.nlast
   185b4:	mov	x0, xzr
   185b8:	ret
   185bc:	mov	x10, xzr
   185c0:	mov	w8, w1
   185c4:	neg	w9, w1
   185c8:	add	x11, x3, #0x1
   185cc:	b	185e8 <lzma_mode_is_supported@@XZ_5.0+0x7a1c>
   185d0:	add	x0, x10, #0x4
   185d4:	add	x10, x10, #0x8
   185d8:	cmp	x10, x4
   185dc:	sub	w9, w9, #0x4
   185e0:	mov	x10, x0
   185e4:	b.hi	18660 <lzma_mode_is_supported@@XZ_5.0+0x7a94>  // b.pmore
   185e8:	add	x12, x11, x10
   185ec:	ldurb	w15, [x12, #-1]
   185f0:	and	w13, w15, #0xfc
   185f4:	cmp	w13, #0x48
   185f8:	b.ne	185d0 <lzma_mode_is_supported@@XZ_5.0+0x7a04>  // b.any
   185fc:	ldrb	w14, [x12, #2]
   18600:	and	w13, w14, #0x3
   18604:	cmp	w13, #0x1
   18608:	b.ne	185d0 <lzma_mode_is_supported@@XZ_5.0+0x7a04>  // b.any
   1860c:	add	x16, x11, x10
   18610:	ldrb	w17, [x16]
   18614:	ldrb	w18, [x16, #1]
   18618:	bfi	w14, w15, #24, #8
   1861c:	and	w14, w14, #0x3fffffc
   18620:	add	w15, w8, w10
   18624:	tst	w2, #0x1
   18628:	orr	w14, w14, w17, lsl #16
   1862c:	csel	w15, w15, w9, ne  // ne = any
   18630:	orr	w14, w14, w18, lsl #8
   18634:	mov	w17, #0x48                  	// #72
   18638:	add	w14, w14, w15
   1863c:	bfxil	w17, w14, #24, #2
   18640:	lsr	w15, w14, #16
   18644:	lsr	w18, w14, #8
   18648:	orr	w13, w13, w14
   1864c:	sturb	w17, [x12, #-1]
   18650:	strb	w15, [x16]
   18654:	strb	w18, [x16, #1]
   18658:	strb	w13, [x12, #2]
   1865c:	b	185d0 <lzma_mode_is_supported@@XZ_5.0+0x7a04>
   18660:	ret
   18664:	stp	x29, x30, [sp, #-16]!
   18668:	mov	w3, #0x1                   	// #1
   1866c:	mov	x29, sp
   18670:	bl	1867c <lzma_mode_is_supported@@XZ_5.0+0x7ab0>
   18674:	ldp	x29, x30, [sp], #16
   18678:	ret
   1867c:	stp	x29, x30, [sp, #-16]!
   18680:	and	w7, w3, #0x1
   18684:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18688:	add	x3, x3, #0x6c0
   1868c:	mov	w5, #0x10                  	// #16
   18690:	mov	w6, #0x10                  	// #16
   18694:	mov	x4, xzr
   18698:	mov	x29, sp
   1869c:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   186a0:	ldp	x29, x30, [sp], #16
   186a4:	ret
   186a8:	stp	x29, x30, [sp, #-16]!
   186ac:	mov	w3, wzr
   186b0:	mov	x29, sp
   186b4:	bl	1867c <lzma_mode_is_supported@@XZ_5.0+0x7ab0>
   186b8:	ldp	x29, x30, [sp], #16
   186bc:	ret
   186c0:	str	x21, [sp, #-32]!
   186c4:	cmp	x4, #0x10
   186c8:	stp	x20, x19, [sp, #16]
   186cc:	b.cs	186e0 <lzma_mode_is_supported@@XZ_5.0+0x7b14>  // b.hs, b.nlast
   186d0:	mov	x0, xzr
   186d4:	ldp	x20, x19, [sp, #16]
   186d8:	ldr	x21, [sp], #32
   186dc:	ret
   186e0:	adrp	x8, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xd434>
   186e4:	mov	x9, #0xe00                 	// #3584
   186e8:	mov	x11, #0xffff000000001fff    	// #-281474976702465
   186ec:	mov	x0, xzr
   186f0:	mov	w15, #0x10                  	// #16
   186f4:	add	x8, x8, #0xfc0
   186f8:	movk	x9, #0x1e0, lsl #32
   186fc:	mov	x10, #0xa000000000          	// #687194767360
   18700:	movk	x11, #0xffee, lsl #32
   18704:	mov	w12, #0xffffffff            	// #-1
   18708:	mov	x13, x3
   1870c:	b	18720 <lzma_mode_is_supported@@XZ_5.0+0x7b54>
   18710:	add	x15, x0, #0x10
   18714:	cmp	x15, x4
   18718:	add	x13, x13, #0x10
   1871c:	b.hi	186d4 <lzma_mode_is_supported@@XZ_5.0+0x7b08>  // b.pmore
   18720:	ldrb	w16, [x3, x0]
   18724:	add	w17, w0, w1
   18728:	mov	x0, x15
   1872c:	tst	w2, #0x1
   18730:	and	x15, x16, #0x1f
   18734:	ldr	w15, [x8, x15, lsl #2]
   18738:	mov	x14, xzr
   1873c:	cneg	w16, w17, eq  // eq = none
   18740:	mov	w17, #0x5                   	// #5
   18744:	b	18758 <lzma_mode_is_supported@@XZ_5.0+0x7b8c>
   18748:	add	x14, x14, #0x1
   1874c:	cmp	x14, #0x3
   18750:	add	x17, x17, #0x29
   18754:	b.eq	18710 <lzma_mode_is_supported@@XZ_5.0+0x7b44>  // b.none
   18758:	lsr	w18, w15, w14
   1875c:	tbz	w18, #0, 18748 <lzma_mode_is_supported@@XZ_5.0+0x7b7c>
   18760:	lsr	x18, x17, #3
   18764:	mov	x6, xzr
   18768:	mov	x5, xzr
   1876c:	add	x7, x13, x18
   18770:	ldrb	w19, [x7], #1
   18774:	lsl	x19, x19, x6
   18778:	add	x6, x6, #0x8
   1877c:	cmp	x6, #0x30
   18780:	add	x5, x19, x5
   18784:	b.ne	18770 <lzma_mode_is_supported@@XZ_5.0+0x7ba4>  // b.any
   18788:	and	x7, x17, #0x7
   1878c:	lsr	x19, x5, x7
   18790:	and	x6, x19, x9
   18794:	cmp	x6, x10
   18798:	b.ne	18748 <lzma_mode_is_supported@@XZ_5.0+0x7b7c>  // b.any
   1879c:	lsr	x21, x19, #16
   187a0:	ubfx	x20, x19, #13, #20
   187a4:	and	w21, w21, #0x100000
   187a8:	orr	w20, w20, w21
   187ac:	add	w20, w16, w20, lsl #4
   187b0:	ubfx	w21, w20, #4, #20
   187b4:	lsr	w20, w20, #4
   187b8:	and	x19, x19, x11
   187bc:	and	w20, w20, #0x100000
   187c0:	bfi	x19, x21, #13, #20
   187c4:	lsr	x20, x20, #20
   187c8:	bfi	x19, x20, #36, #1
   187cc:	lsl	w20, w12, w7
   187d0:	mvn	w20, w20
   187d4:	and	x5, x5, x20
   187d8:	lsl	x7, x19, x7
   187dc:	mov	x6, xzr
   187e0:	orr	x5, x7, x5
   187e4:	lsr	x7, x5, x6
   187e8:	add	x6, x6, #0x8
   187ec:	strb	w7, [x13, x18]
   187f0:	cmp	x6, #0x30
   187f4:	add	x18, x18, #0x1
   187f8:	b.ne	187e4 <lzma_mode_is_supported@@XZ_5.0+0x7c18>  // b.any
   187fc:	b	18748 <lzma_mode_is_supported@@XZ_5.0+0x7b7c>
   18800:	stp	x29, x30, [sp, #-16]!
   18804:	mov	w3, #0x1                   	// #1
   18808:	mov	x29, sp
   1880c:	bl	18818 <lzma_mode_is_supported@@XZ_5.0+0x7c4c>
   18810:	ldp	x29, x30, [sp], #16
   18814:	ret
   18818:	stp	x29, x30, [sp, #-16]!
   1881c:	and	w7, w3, #0x1
   18820:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18824:	add	x3, x3, #0x85c
   18828:	mov	w5, #0x4                   	// #4
   1882c:	mov	w6, #0x4                   	// #4
   18830:	mov	x4, xzr
   18834:	mov	x29, sp
   18838:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   1883c:	ldp	x29, x30, [sp], #16
   18840:	ret
   18844:	stp	x29, x30, [sp, #-16]!
   18848:	mov	w3, wzr
   1884c:	mov	x29, sp
   18850:	bl	18818 <lzma_mode_is_supported@@XZ_5.0+0x7c4c>
   18854:	ldp	x29, x30, [sp], #16
   18858:	ret
   1885c:	cmp	x4, #0x4
   18860:	b.cs	1886c <lzma_mode_is_supported@@XZ_5.0+0x7ca0>  // b.hs, b.nlast
   18864:	mov	x0, xzr
   18868:	ret
   1886c:	mov	w10, #0xfffffff8            	// #-8
   18870:	mov	x8, xzr
   18874:	add	w9, w1, #0x8
   18878:	sub	w10, w10, w1
   1887c:	add	x11, x3, #0x1
   18880:	b	1889c <lzma_mode_is_supported@@XZ_5.0+0x7cd0>
   18884:	add	x0, x8, #0x4
   18888:	add	x8, x8, #0x8
   1888c:	cmp	x8, x4
   18890:	sub	w10, w10, #0x4
   18894:	mov	x8, x0
   18898:	b.hi	188f0 <lzma_mode_is_supported@@XZ_5.0+0x7d24>  // b.pmore
   1889c:	add	x12, x11, x8
   188a0:	ldrb	w13, [x12, #2]
   188a4:	cmp	w13, #0xeb
   188a8:	b.ne	18884 <lzma_mode_is_supported@@XZ_5.0+0x7cb8>  // b.any
   188ac:	ldrb	w13, [x12, #1]
   188b0:	ldrb	w14, [x12]
   188b4:	ldurb	w15, [x12, #-1]
   188b8:	tst	w2, #0x1
   188bc:	lsl	w13, w13, #16
   188c0:	bfi	w13, w14, #8, #8
   188c4:	add	w14, w9, w8
   188c8:	csel	w14, w14, w10, ne  // ne = any
   188cc:	orr	w13, w13, w15
   188d0:	add	w13, w14, w13, lsl #2
   188d4:	lsr	w14, w13, #2
   188d8:	lsr	w15, w13, #18
   188dc:	lsr	w13, w13, #10
   188e0:	strb	w15, [x12, #1]
   188e4:	strb	w13, [x12]
   188e8:	sturb	w14, [x12, #-1]
   188ec:	b	18884 <lzma_mode_is_supported@@XZ_5.0+0x7cb8>
   188f0:	ret
   188f4:	stp	x29, x30, [sp, #-16]!
   188f8:	mov	w3, #0x1                   	// #1
   188fc:	mov	x29, sp
   18900:	bl	1890c <lzma_mode_is_supported@@XZ_5.0+0x7d40>
   18904:	ldp	x29, x30, [sp], #16
   18908:	ret
   1890c:	stp	x29, x30, [sp, #-16]!
   18910:	and	w7, w3, #0x1
   18914:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18918:	add	x3, x3, #0x950
   1891c:	mov	w5, #0x4                   	// #4
   18920:	mov	w6, #0x2                   	// #2
   18924:	mov	x4, xzr
   18928:	mov	x29, sp
   1892c:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   18930:	ldp	x29, x30, [sp], #16
   18934:	ret
   18938:	stp	x29, x30, [sp, #-16]!
   1893c:	mov	w3, wzr
   18940:	mov	x29, sp
   18944:	bl	1890c <lzma_mode_is_supported@@XZ_5.0+0x7d40>
   18948:	ldp	x29, x30, [sp], #16
   1894c:	ret
   18950:	cmp	x4, #0x4
   18954:	b.cs	18960 <lzma_mode_is_supported@@XZ_5.0+0x7d94>  // b.hs, b.nlast
   18958:	mov	x0, xzr
   1895c:	ret
   18960:	mov	w8, #0x700                 	// #1792
   18964:	mov	x10, xzr
   18968:	movk	w8, #0x38, lsl #16
   1896c:	mov	w9, #0xfffffffc            	// #-4
   18970:	b	18988 <lzma_mode_is_supported@@XZ_5.0+0x7dbc>
   18974:	add	x0, x10, #0x2
   18978:	add	x10, x10, #0x6
   1897c:	cmp	x10, x4
   18980:	mov	x10, x0
   18984:	b.hi	18a18 <lzma_mode_is_supported@@XZ_5.0+0x7e4c>  // b.pmore
   18988:	add	x11, x10, #0x1
   1898c:	ldrb	w14, [x3, x11]
   18990:	and	w12, w14, #0xf8
   18994:	cmp	w12, #0xf0
   18998:	b.ne	18974 <lzma_mode_is_supported@@XZ_5.0+0x7da8>  // b.any
   1899c:	add	x12, x10, #0x3
   189a0:	ldrb	w13, [x3, x12]
   189a4:	mvn	w15, w13
   189a8:	tst	w15, #0xf8
   189ac:	b.ne	18974 <lzma_mode_is_supported@@XZ_5.0+0x7da8>  // b.any
   189b0:	lsl	w14, w14, #19
   189b4:	ldrb	w15, [x3, x10]
   189b8:	add	x16, x10, #0x2
   189bc:	bfi	w14, w13, #8, #8
   189c0:	ldrb	w13, [x3, x16]
   189c4:	add	w17, w10, w1
   189c8:	and	w14, w14, w8
   189cc:	tst	w2, #0x1
   189d0:	add	w18, w17, #0x4
   189d4:	sub	w17, w9, w17
   189d8:	bfi	w14, w15, #11, #8
   189dc:	csel	w17, w18, w17, ne  // ne = any
   189e0:	orr	w13, w14, w13
   189e4:	mov	w14, #0xf0                  	// #240
   189e8:	add	w13, w17, w13, lsl #1
   189ec:	bfxil	w14, w13, #20, #3
   189f0:	lsr	w15, w13, #1
   189f4:	strb	w14, [x3, x11]
   189f8:	lsr	w11, w13, #12
   189fc:	lsr	w13, w13, #9
   18a00:	strb	w11, [x3, x10]
   18a04:	orr	w10, w13, #0xf8
   18a08:	strb	w10, [x3, x12]
   18a0c:	mov	x10, x16
   18a10:	strb	w15, [x3, x16]
   18a14:	b	18974 <lzma_mode_is_supported@@XZ_5.0+0x7da8>
   18a18:	ret
   18a1c:	stp	x29, x30, [sp, #-16]!
   18a20:	mov	w3, #0x1                   	// #1
   18a24:	mov	x29, sp
   18a28:	bl	18a34 <lzma_mode_is_supported@@XZ_5.0+0x7e68>
   18a2c:	ldp	x29, x30, [sp], #16
   18a30:	ret
   18a34:	stp	x29, x30, [sp, #-16]!
   18a38:	and	w7, w3, #0x1
   18a3c:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x7434>
   18a40:	add	x3, x3, #0xa78
   18a44:	mov	w5, #0x4                   	// #4
   18a48:	mov	w6, #0x4                   	// #4
   18a4c:	mov	x4, xzr
   18a50:	mov	x29, sp
   18a54:	bl	17d34 <lzma_mode_is_supported@@XZ_5.0+0x7168>
   18a58:	ldp	x29, x30, [sp], #16
   18a5c:	ret
   18a60:	stp	x29, x30, [sp, #-16]!
   18a64:	mov	w3, wzr
   18a68:	mov	x29, sp
   18a6c:	bl	18a34 <lzma_mode_is_supported@@XZ_5.0+0x7e68>
   18a70:	ldp	x29, x30, [sp], #16
   18a74:	ret
   18a78:	cmp	x4, #0x4
   18a7c:	b.cs	18a88 <lzma_mode_is_supported@@XZ_5.0+0x7ebc>  // b.hs, b.nlast
   18a80:	mov	x0, xzr
   18a84:	ret
   18a88:	mov	x9, xzr
   18a8c:	neg	w8, w1
   18a90:	add	x10, x3, #0x1
   18a94:	mov	w11, w1
   18a98:	b	18b14 <lzma_mode_is_supported@@XZ_5.0+0x7f48>
   18a9c:	add	x13, x10, x9
   18aa0:	ldrb	w16, [x13, #1]
   18aa4:	ldrb	w17, [x13]
   18aa8:	ldrb	w18, [x13, #2]
   18aac:	add	w14, w11, w9
   18ab0:	lsl	w16, w16, #8
   18ab4:	tst	w2, #0x1
   18ab8:	bfi	w16, w17, #16, #8
   18abc:	csel	w14, w14, w8, ne  // ne = any
   18ac0:	orr	w16, w16, w18
   18ac4:	add	w14, w14, w16, lsl #2
   18ac8:	lsr	w16, w14, #2
   18acc:	and	w17, w16, #0x400000
   18ad0:	and	w18, w16, #0x3f0000
   18ad4:	mov	w15, #0x40                  	// #64
   18ad8:	sub	w18, w18, w17
   18adc:	neg	w17, w17
   18ae0:	lsr	w14, w14, #10
   18ae4:	bfxil	w15, w17, #24, #6
   18ae8:	lsr	w17, w18, #16
   18aec:	sturb	w15, [x12, #-1]
   18af0:	strb	w17, [x13]
   18af4:	strb	w14, [x13, #1]
   18af8:	strb	w16, [x13, #2]
   18afc:	add	x0, x9, #0x4
   18b00:	add	x9, x9, #0x8
   18b04:	cmp	x9, x4
   18b08:	sub	w8, w8, #0x4
   18b0c:	mov	x9, x0
   18b10:	b.hi	18b50 <lzma_mode_is_supported@@XZ_5.0+0x7f84>  // b.pmore
   18b14:	add	x12, x10, x9
   18b18:	ldurb	w13, [x12, #-1]
   18b1c:	cmp	w13, #0x7f
   18b20:	b.eq	18b40 <lzma_mode_is_supported@@XZ_5.0+0x7f74>  // b.none
   18b24:	cmp	w13, #0x40
   18b28:	b.ne	18afc <lzma_mode_is_supported@@XZ_5.0+0x7f30>  // b.any
   18b2c:	ldrb	w14, [x10, x9]
   18b30:	cmp	w14, #0x40
   18b34:	b.cc	18a9c <lzma_mode_is_supported@@XZ_5.0+0x7ed0>  // b.lo, b.ul, b.last
   18b38:	cmp	w13, #0x7f
   18b3c:	b.ne	18afc <lzma_mode_is_supported@@XZ_5.0+0x7f30>  // b.any
   18b40:	ldrb	w13, [x10, x9]
   18b44:	cmp	w13, #0xc0
   18b48:	b.cs	18a9c <lzma_mode_is_supported@@XZ_5.0+0x7ed0>  // b.hs, b.nlast
   18b4c:	b	18afc <lzma_mode_is_supported@@XZ_5.0+0x7f30>
   18b50:	ret

Disassembly of section .fini:

0000000000018b54 <.fini>:
   18b54:	stp	x29, x30, [sp, #-16]!
   18b58:	mov	x29, sp
   18b5c:	ldp	x29, x30, [sp], #16
   18b60:	ret
