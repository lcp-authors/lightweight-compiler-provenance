
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zstd.mod_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <FSE_versionNumber>:
       0:	mov	w0, #0x384                 	// #900
       4:	ret

0000000000000008 <FSE_isError>:
       8:	cmn	x0, #0x78
       c:	cset	w0, hi  // hi = pmore
      10:	ret

0000000000000014 <FSE_getErrorName>:
      14:	cmn	x0, #0x78
      18:	b.ls	24 <FSE_getErrorName+0x10>  // b.plast
      1c:	neg	w0, w0
      20:	b	4c8 <ERR_getErrorString>
      24:	mov	w0, #0x0                   	// #0
      28:	b	20 <FSE_getErrorName+0xc>

000000000000002c <HUF_isError>:
      2c:	cmn	x0, #0x78
      30:	cset	w0, hi  // hi = pmore
      34:	ret

0000000000000038 <HUF_getErrorName>:
      38:	cmn	x0, #0x78
      3c:	b.ls	48 <HUF_getErrorName+0x10>  // b.plast
      40:	neg	w0, w0
      44:	b	4c8 <ERR_getErrorString>
      48:	mov	w0, #0x0                   	// #0
      4c:	b	44 <HUF_getErrorName+0xc>

0000000000000050 <FSE_readNCount>:
      50:	stp	x29, x30, [sp, #-80]!
      54:	cmp	x4, #0x3
      58:	mov	x29, sp
      5c:	stp	x19, x20, [sp, #16]
      60:	mov	x20, x3
      64:	mov	x19, x4
      68:	stp	x21, x22, [sp, #32]
      6c:	mov	x22, x0
      70:	mov	x21, x1
      74:	str	x23, [sp, #48]
      78:	mov	x23, x2
      7c:	b.hi	e0 <FSE_readNCount+0x90>  // b.pmore
      80:	mov	x2, #0x4                   	// #4
      84:	mov	w1, #0x0                   	// #0
      88:	add	x0, sp, #0x48
      8c:	bl	0 <grub_memset>
      90:	mov	x2, x19
      94:	mov	x1, x20
      98:	add	x0, sp, #0x48
      9c:	bl	0 <grub_memmove>
      a0:	add	x3, sp, #0x48
      a4:	mov	x2, x23
      a8:	mov	x1, x21
      ac:	mov	x0, x22
      b0:	mov	x4, #0x4                   	// #4
      b4:	bl	50 <FSE_readNCount>
      b8:	cmn	x0, #0x78
      bc:	b.hi	cc <FSE_readNCount+0x7c>  // b.pmore
      c0:	cmp	x19, x0
      c4:	mov	x1, #0xffffffffffffffec    	// #-20
      c8:	csel	x0, x0, x1, cs  // cs = hs, nlast
      cc:	ldp	x19, x20, [sp, #16]
      d0:	ldp	x21, x22, [sp, #32]
      d4:	ldr	x23, [sp, #48]
      d8:	ldp	x29, x30, [sp], #80
      dc:	ret
      e0:	ldr	w2, [x21]
      e4:	mov	w1, #0x0                   	// #0
      e8:	add	w2, w2, #0x1
      ec:	lsl	x2, x2, #1
      f0:	bl	0 <grub_memset>
      f4:	ldr	w6, [x20]
      f8:	and	w3, w6, #0xf
      fc:	add	w0, w3, #0x5
     100:	cmp	w0, #0xf
     104:	b.hi	2f0 <FSE_readNCount+0x2a0>  // b.pmore
     108:	str	w0, [x23]
     10c:	add	x19, x20, x19
     110:	mov	w8, #0x1                   	// #1
     114:	sub	x12, x19, #0x5
     118:	ldr	w9, [x21]
     11c:	sub	x10, x19, #0x7
     120:	lsl	w8, w8, w0
     124:	lsr	w6, w6, #4
     128:	add	w1, w8, #0x1
     12c:	add	w3, w3, #0x6
     130:	mov	x4, x20
     134:	sub	x19, x19, #0x4
     138:	mov	w2, #0x0                   	// #0
     13c:	mov	w7, #0x0                   	// #0
     140:	mov	w5, #0x4                   	// #4
     144:	mov	w11, #0xffff                	// #65535
     148:	cmp	w1, #0x1
     14c:	ccmp	w9, w7, #0x0, gt
     150:	b.cs	180 <FSE_readNCount+0x130>  // b.hs, b.nlast
     154:	cmp	w1, #0x1
     158:	b.ne	300 <FSE_readNCount+0x2b0>  // b.any
     15c:	cmp	w5, #0x20
     160:	b.gt	300 <FSE_readNCount+0x2b0>
     164:	add	w0, w5, #0x7
     168:	sub	w7, w7, #0x1
     16c:	str	w7, [x21]
     170:	asr	w0, w0, #3
     174:	add	x0, x4, w0, sxtw
     178:	sub	x0, x0, x20
     17c:	b	cc <FSE_readNCount+0x7c>
     180:	cbz	w2, 214 <FSE_readNCount+0x1c4>
     184:	mov	w0, w7
     188:	b	1a4 <FSE_readNCount+0x154>
     18c:	add	w0, w0, #0x18
     190:	cmp	x4, x12
     194:	b.cs	290 <FSE_readNCount+0x240>  // b.hs, b.nlast
     198:	ldur	w6, [x4, #2]
     19c:	add	x4, x4, #0x2
     1a0:	lsr	w6, w6, w5
     1a4:	cmp	w11, w6, uxth
     1a8:	b.eq	18c <FSE_readNCount+0x13c>  // b.none
     1ac:	and	w2, w6, #0x3
     1b0:	add	w5, w5, #0x2
     1b4:	cmp	w2, #0x3
     1b8:	b.eq	29c <FSE_readNCount+0x24c>  // b.none
     1bc:	add	w2, w2, w0
     1c0:	cmp	w9, w2
     1c4:	b.cc	2f8 <FSE_readNCount+0x2a8>  // b.lo, b.ul, b.last
     1c8:	add	x14, x22, w7, uxtw #1
     1cc:	mov	x0, #0x0                   	// #0
     1d0:	add	w13, w7, w0
     1d4:	cmp	w2, w13
     1d8:	b.hi	2a8 <FSE_readNCount+0x258>  // b.pmore
     1dc:	cmp	w7, w2
     1e0:	sub	w0, w2, w7
     1e4:	csel	w0, w0, wzr, ls  // ls = plast
     1e8:	cmp	x4, x10
     1ec:	add	w7, w7, w0
     1f0:	asr	w0, w5, #3
     1f4:	add	x0, x4, w0, sxtw
     1f8:	b.ls	204 <FSE_readNCount+0x1b4>  // b.plast
     1fc:	cmp	x0, x19
     200:	b.hi	2b4 <FSE_readNCount+0x264>  // b.pmore
     204:	ldr	w6, [x0]
     208:	and	w5, w5, #0x7
     20c:	mov	x4, x0
     210:	lsr	w6, w6, w5
     214:	lsl	w0, w8, #1
     218:	sub	w2, w8, #0x1
     21c:	sub	w0, w0, #0x1
     220:	and	w2, w2, w6
     224:	sub	w13, w0, w1
     228:	cmp	w2, w13
     22c:	b.cs	2bc <FSE_readNCount+0x26c>  // b.hs, b.nlast
     230:	mov	w6, w2
     234:	sub	w2, w3, #0x1
     238:	add	w5, w2, w5
     23c:	subs	w6, w6, #0x1
     240:	add	w13, w7, #0x1
     244:	cneg	w0, w6, mi  // mi = first
     248:	cmp	w6, #0x0
     24c:	sub	w1, w1, w0
     250:	cset	w2, eq  // eq = none
     254:	strh	w6, [x22, w7, uxtw #1]
     258:	cmp	w8, w1
     25c:	b.gt	2d4 <FSE_readNCount+0x284>
     260:	asr	w0, w5, #3
     264:	cmp	x4, x10
     268:	add	x0, x4, w0, sxtw
     26c:	b.ls	278 <FSE_readNCount+0x228>  // b.plast
     270:	cmp	x19, x0
     274:	b.cc	2e0 <FSE_readNCount+0x290>  // b.lo, b.ul, b.last
     278:	and	w5, w5, #0x7
     27c:	mov	x4, x0
     280:	ldr	w6, [x4]
     284:	mov	w7, w13
     288:	lsr	w6, w6, w5
     28c:	b	148 <FSE_readNCount+0xf8>
     290:	lsr	w6, w6, #16
     294:	add	w5, w5, #0x10
     298:	b	1a4 <FSE_readNCount+0x154>
     29c:	add	w0, w0, #0x3
     2a0:	lsr	w6, w6, #2
     2a4:	b	1ac <FSE_readNCount+0x15c>
     2a8:	strh	wzr, [x14, x0, lsl #1]
     2ac:	add	x0, x0, #0x1
     2b0:	b	1d0 <FSE_readNCount+0x180>
     2b4:	lsr	w6, w6, #2
     2b8:	b	214 <FSE_readNCount+0x1c4>
     2bc:	and	w6, w0, w6
     2c0:	cmp	w8, w6
     2c4:	b.gt	2cc <FSE_readNCount+0x27c>
     2c8:	sub	w6, w6, w13
     2cc:	add	w5, w3, w5
     2d0:	b	23c <FSE_readNCount+0x1ec>
     2d4:	sub	w3, w3, #0x1
     2d8:	asr	w8, w8, #1
     2dc:	b	258 <FSE_readNCount+0x208>
     2e0:	sub	x0, x19, x4
     2e4:	mov	x4, x19
     2e8:	sub	w5, w5, w0, lsl #3
     2ec:	b	280 <FSE_readNCount+0x230>
     2f0:	mov	x0, #0xffffffffffffffd4    	// #-44
     2f4:	b	cc <FSE_readNCount+0x7c>
     2f8:	mov	x0, #0xffffffffffffffd0    	// #-48
     2fc:	b	cc <FSE_readNCount+0x7c>
     300:	mov	x0, #0xffffffffffffffec    	// #-20
     304:	b	cc <FSE_readNCount+0x7c>

0000000000000308 <HUF_readStats>:
     308:	stp	x29, x30, [sp, #-336]!
     30c:	mov	x29, sp
     310:	stp	x19, x20, [sp, #16]
     314:	stp	x21, x22, [sp, #32]
     318:	stp	x23, x24, [sp, #48]
     31c:	cbz	x6, 4bc <HUF_readStats+0x1b4>
     320:	ldrb	w21, [x5]
     324:	mov	x22, x2
     328:	mov	x23, x0
     32c:	mov	x20, x3
     330:	mov	x24, x4
     334:	mov	x2, x5
     338:	cmp	x21, #0x7f
     33c:	b.ls	458 <HUF_readStats+0x150>  // b.plast
     340:	sub	x19, x21, #0x7f
     344:	sub	x21, x21, #0x7e
     348:	lsr	x21, x21, #1
     34c:	add	x0, x21, #0x1
     350:	cmp	x0, x6
     354:	b.hi	4bc <HUF_readStats+0x1b4>  // b.pmore
     358:	cmp	x1, x19
     35c:	b.hi	450 <HUF_readStats+0x148>  // b.pmore
     360:	mov	x19, #0xffffffffffffffec    	// #-20
     364:	mov	x0, x19
     368:	ldp	x19, x20, [sp, #16]
     36c:	ldp	x21, x22, [sp, #32]
     370:	ldp	x23, x24, [sp, #48]
     374:	ldp	x29, x30, [sp], #336
     378:	ret
     37c:	lsr	w1, w0, #1
     380:	add	x1, x1, #0x1
     384:	ldrb	w3, [x2, x1]
     388:	lsr	w3, w3, #4
     38c:	strb	w3, [x23, x4]
     390:	add	w3, w0, #0x1
     394:	add	w0, w0, #0x2
     398:	ldrb	w1, [x2, x1]
     39c:	and	w1, w1, #0xf
     3a0:	strb	w1, [x23, x3]
     3a4:	mov	w4, w0
     3a8:	cmp	x19, w0, uxtw
     3ac:	b.hi	37c <HUF_readStats+0x74>  // b.pmore
     3b0:	mov	x2, #0x34                  	// #52
     3b4:	mov	w1, #0x0                   	// #0
     3b8:	mov	x0, x22
     3bc:	bl	0 <grub_memset>
     3c0:	mov	w1, #0x0                   	// #0
     3c4:	mov	w2, #0x0                   	// #0
     3c8:	mov	w5, #0x1                   	// #1
     3cc:	mov	w4, w1
     3d0:	cmp	x19, w1, uxtw
     3d4:	b.hi	48c <HUF_readStats+0x184>  // b.pmore
     3d8:	cbz	w2, 360 <HUF_readStats+0x58>
     3dc:	clz	w1, w2
     3e0:	mov	w0, #0x1f                  	// #31
     3e4:	sub	w1, w0, w1
     3e8:	add	w1, w1, #0x1
     3ec:	cmp	w1, #0xc
     3f0:	b.hi	360 <HUF_readStats+0x58>  // b.pmore
     3f4:	mov	w3, #0x1                   	// #1
     3f8:	str	w1, [x24]
     3fc:	lsl	w1, w3, w1
     400:	sub	w1, w1, w2
     404:	clz	w2, w1
     408:	sub	w0, w0, w2
     40c:	lsl	w3, w3, w0
     410:	cmp	w1, w3
     414:	b.ne	360 <HUF_readStats+0x58>  // b.any
     418:	add	w0, w0, #0x1
     41c:	strb	w0, [x23, x19]
     420:	ubfiz	x0, x0, #2, #32
     424:	ldr	w1, [x22, x0]
     428:	add	w1, w1, #0x1
     42c:	str	w1, [x22, x0]
     430:	ldr	w0, [x22, #4]
     434:	cmp	w0, #0x1
     438:	b.ls	360 <HUF_readStats+0x58>  // b.plast
     43c:	tbnz	w0, #0, 360 <HUF_readStats+0x58>
     440:	add	w19, w19, #0x1
     444:	str	w19, [x20]
     448:	add	x19, x21, #0x1
     44c:	b	364 <HUF_readStats+0x5c>
     450:	mov	w0, #0x0                   	// #0
     454:	b	3a4 <HUF_readStats+0x9c>
     458:	add	x3, x21, #0x1
     45c:	cmp	x3, x6
     460:	b.hi	4bc <HUF_readStats+0x1b4>  // b.pmore
     464:	add	x4, sp, #0x48
     468:	mov	x3, x21
     46c:	add	x2, x2, #0x1
     470:	sub	x1, x1, #0x1
     474:	mov	w5, #0x6                   	// #6
     478:	bl	c84 <FSE_decompress_wksp>
     47c:	mov	x19, x0
     480:	cmn	x0, #0x78
     484:	b.ls	3b0 <HUF_readStats+0xa8>  // b.plast
     488:	b	364 <HUF_readStats+0x5c>
     48c:	ldrb	w0, [x23, x4]
     490:	cmp	w0, #0xb
     494:	b.hi	360 <HUF_readStats+0x58>  // b.pmore
     498:	ubfiz	x0, x0, #2, #8
     49c:	add	w1, w1, #0x1
     4a0:	ldr	w3, [x22, x0]
     4a4:	add	w3, w3, #0x1
     4a8:	str	w3, [x22, x0]
     4ac:	ldrb	w0, [x23, x4]
     4b0:	lsl	w0, w5, w0
     4b4:	add	w2, w2, w0, asr #1
     4b8:	b	3cc <HUF_readStats+0xc4>
     4bc:	mov	x19, #0xffffffffffffffb8    	// #-72
     4c0:	b	364 <HUF_readStats+0x5c>
     4c4:	nop

00000000000004c8 <ERR_getErrorString>:
     4c8:	cmp	w0, #0x66
     4cc:	b.hi	4e0 <ERR_getErrorString+0x18>  // b.pmore
     4d0:	adrp	x1, 0 <FSE_versionNumber>
     4d4:	ldr	x1, [x1]
     4d8:	ldr	x0, [x1, w0, uxtw #3]
     4dc:	ret
     4e0:	adrp	x0, 0 <FSE_versionNumber>
     4e4:	ldr	x0, [x0]
     4e8:	b	4dc <ERR_getErrorString+0x14>
     4ec:	nop
	...
     500:	ldr	w3, [x0, #8]
     504:	mov	x1, x0
     508:	cmp	w3, #0x40
     50c:	b.hi	5a0 <ERR_getErrorString+0xd8>  // b.pmore
     510:	ldr	x2, [x0, #16]
     514:	ldr	x0, [x0, #32]
     518:	cmp	x2, x0
     51c:	b.cc	544 <ERR_getErrorString+0x7c>  // b.lo, b.ul, b.last
     520:	lsr	w0, w3, #3
     524:	and	w3, w3, #0x7
     528:	sub	x2, x2, x0
     52c:	ldr	x0, [x2]
     530:	str	x0, [x1]
     534:	mov	w0, #0x0                   	// #0
     538:	str	w3, [x1, #8]
     53c:	str	x2, [x1, #16]
     540:	ret
     544:	ldr	x0, [x1, #24]
     548:	cmp	x2, x0
     54c:	b.ne	560 <ERR_getErrorString+0x98>  // b.any
     550:	cmp	w3, #0x40
     554:	cset	w0, eq  // eq = none
     558:	add	w0, w0, #0x1
     55c:	b	540 <ERR_getErrorString+0x78>
     560:	lsr	w5, w3, #3
     564:	lsr	w4, w3, #3
     568:	sub	x5, x2, x5
     56c:	cmp	x0, x5
     570:	b.ls	598 <ERR_getErrorString+0xd0>  // b.plast
     574:	sub	w4, w2, w0
     578:	mov	w0, #0x1                   	// #1
     57c:	sub	x2, x2, w4, uxtw
     580:	str	x2, [x1, #16]
     584:	sub	w3, w3, w4, lsl #3
     588:	str	w3, [x1, #8]
     58c:	ldr	x2, [x2]
     590:	str	x2, [x1]
     594:	b	540 <ERR_getErrorString+0x78>
     598:	mov	w0, #0x0                   	// #0
     59c:	b	57c <ERR_getErrorString+0xb4>
     5a0:	mov	w0, #0x3                   	// #3
     5a4:	b	540 <ERR_getErrorString+0x78>
     5a8:	mov	x3, x0
     5ac:	ldr	w6, [x1, #8]
     5b0:	ldp	x4, x0, [x0]
     5b4:	lsl	x2, x4, #2
     5b8:	add	x4, x0, x4, lsl #2
     5bc:	ldrh	w5, [x0, x2]
     5c0:	ldr	x2, [x1]
     5c4:	ldrb	w0, [x4, #2]
     5c8:	ldrb	w4, [x4, #3]
     5cc:	lsl	x2, x2, x6
     5d0:	mvn	w7, w4
     5d4:	lsr	x2, x2, #1
     5d8:	add	w4, w4, w6
     5dc:	str	w4, [x1, #8]
     5e0:	lsr	x2, x2, x7
     5e4:	add	x2, x2, w5, uxth
     5e8:	str	x2, [x3]
     5ec:	ret
     5f0:	mov	x2, x0
     5f4:	ldr	w6, [x1, #8]
     5f8:	ldp	x4, x0, [x0]
     5fc:	lsl	x3, x4, #2
     600:	add	x4, x0, x4, lsl #2
     604:	ldrh	w5, [x0, x3]
     608:	ldr	x3, [x1]
     60c:	ldrb	w0, [x4, #2]
     610:	ldrb	w4, [x4, #3]
     614:	lsl	x3, x3, x6
     618:	neg	w7, w4
     61c:	add	w4, w4, w6
     620:	str	w4, [x1, #8]
     624:	lsr	x3, x3, x7
     628:	add	x3, x3, w5, uxth
     62c:	str	x3, [x2]
     630:	ret
     634:	cbnz	x2, 65c <ERR_getErrorString+0x194>
     638:	stp	x29, x30, [sp, #-16]!
     63c:	mov	x2, #0x28                  	// #40
     640:	mov	w1, #0x0                   	// #0
     644:	mov	x29, sp
     648:	bl	0 <grub_memset>
     64c:	mov	x2, #0xffffffffffffffb8    	// #-72
     650:	mov	x0, x2
     654:	ldp	x29, x30, [sp], #16
     658:	ret
     65c:	mov	x3, x0
     660:	add	x0, x1, #0x8
     664:	sub	x5, x2, #0x1
     668:	cmp	x2, #0x7
     66c:	stp	x1, x0, [x3, #24]
     670:	b.ls	6ac <ERR_getErrorString+0x1e4>  // b.plast
     674:	sub	x0, x2, #0x8
     678:	add	x4, x1, x0
     67c:	ldr	x0, [x1, x0]
     680:	str	x0, [x3]
     684:	str	x4, [x3, #16]
     688:	ldrb	w1, [x1, x5]
     68c:	cmp	w1, #0x0
     690:	clz	w0, w1
     694:	sub	w0, w0, #0x17
     698:	csinv	x2, x2, xzr, ne  // ne = any
     69c:	csel	w0, w0, wzr, ne  // ne = any
     6a0:	str	w0, [x3, #8]
     6a4:	mov	x0, x2
     6a8:	ret
     6ac:	str	x1, [x3, #16]
     6b0:	sub	x4, x2, #0x2
     6b4:	cmp	x4, #0x5
     6b8:	ldrb	w6, [x1]
     6bc:	str	x6, [x3]
     6c0:	b.hi	740 <ERR_getErrorString+0x278>  // b.pmore
     6c4:	cmp	w4, #0x5
     6c8:	b.hi	740 <ERR_getErrorString+0x278>  // b.pmore
     6cc:	adrp	x0, 0 <FSE_versionNumber>
     6d0:	ldr	x0, [x0]
     6d4:	ldrb	w0, [x0, w4, uxtw]
     6d8:	adr	x4, 6e4 <ERR_getErrorString+0x21c>
     6dc:	add	x0, x4, w0, sxtb #2
     6e0:	br	x0
     6e4:	ldrb	w0, [x1, #6]
     6e8:	add	x0, x6, x0, lsl #48
     6ec:	str	x0, [x3]
     6f0:	ldr	x4, [x3]
     6f4:	ldrb	w0, [x1, #5]
     6f8:	add	x0, x4, x0, lsl #40
     6fc:	str	x0, [x3]
     700:	ldr	x4, [x3]
     704:	ldrb	w0, [x1, #4]
     708:	add	x0, x4, x0, lsl #32
     70c:	str	x0, [x3]
     710:	ldr	x4, [x3]
     714:	ldrb	w0, [x1, #3]
     718:	add	x0, x4, x0, lsl #24
     71c:	str	x0, [x3]
     720:	ldr	x4, [x3]
     724:	ldrb	w0, [x1, #2]
     728:	add	x0, x4, x0, lsl #16
     72c:	str	x0, [x3]
     730:	ldr	x4, [x3]
     734:	ldrb	w0, [x1, #1]
     738:	add	x0, x4, x0, lsl #8
     73c:	str	x0, [x3]
     740:	ldrb	w0, [x1, x5]
     744:	cbz	w0, 768 <ERR_getErrorString+0x2a0>
     748:	clz	w0, w0
     74c:	mov	w4, #0x8                   	// #8
     750:	sub	w1, w4, w2
     754:	add	w0, w0, w4
     758:	sub	w0, w0, #0x1f
     75c:	add	w0, w0, w1, lsl #3
     760:	str	w0, [x3, #8]
     764:	b	6a4 <ERR_getErrorString+0x1dc>
     768:	mov	x2, #0xffffffffffffffec    	// #-20
     76c:	str	wzr, [x3, #8]
     770:	b	6a4 <ERR_getErrorString+0x1dc>
     774:	nop
	...
     780:	mov	x7, x0
     784:	mov	x0, x1
     788:	stp	x29, x30, [sp, #-16]!
     78c:	mov	x6, x2
     790:	mov	x29, sp
     794:	ldr	x3, [x0]
     798:	ldr	w2, [x0, #8]
     79c:	ldrh	w1, [x6], #4
     7a0:	lsl	x3, x3, x2
     7a4:	mvn	w4, w1
     7a8:	lsr	x3, x3, #1
     7ac:	add	w1, w1, w2
     7b0:	str	w1, [x0, #8]
     7b4:	lsr	x3, x3, x4
     7b8:	str	x3, [x7]
     7bc:	bl	500 <ERR_getErrorString+0x38>
     7c0:	ldp	x29, x30, [sp], #16
     7c4:	str	x6, [x7, #8]
     7c8:	ret

00000000000007cc <FSE_createDTable>:
     7cc:	cmp	w0, #0xf
     7d0:	mov	w1, #0xf                   	// #15
     7d4:	csel	w0, w0, w1, ls  // ls = plast
     7d8:	mov	w1, #0x1                   	// #1
     7dc:	lsl	w0, w1, w0
     7e0:	add	w0, w0, w1
     7e4:	sbfiz	x0, x0, #2, #32
     7e8:	b	0 <grub_malloc>

00000000000007ec <FSE_freeDTable>:
     7ec:	b	0 <grub_free>

00000000000007f0 <FSE_buildDTable>:
     7f0:	cmp	w2, #0xff
     7f4:	b.hi	984 <FSE_buildDTable+0x194>  // b.pmore
     7f8:	sub	sp, sp, #0x260
     7fc:	cmp	w3, #0xc
     800:	stp	x29, x30, [sp]
     804:	mov	x29, sp
     808:	stp	x19, x20, [sp, #16]
     80c:	mov	w20, w3
     810:	stp	x21, x22, [sp, #32]
     814:	stp	x23, x24, [sp, #48]
     818:	stp	x25, x26, [sp, #64]
     81c:	b.hi	98c <FSE_buildDTable+0x19c>  // b.pmore
     820:	mov	x19, x0
     824:	add	x26, x0, #0x4
     828:	mov	w0, #0x1                   	// #1
     82c:	strh	w3, [sp, #88]
     830:	lsl	w22, w0, w3
     834:	sub	w3, w3, #0x1
     838:	sub	w25, w22, #0x1
     83c:	add	x5, sp, #0x60
     840:	lsl	w3, w0, w3
     844:	mov	w23, w25
     848:	sxth	w3, w3
     84c:	mov	w6, w0
     850:	mov	w7, w0
     854:	mov	x24, x1
     858:	add	w21, w2, #0x1
     85c:	mov	w1, #0x0                   	// #0
     860:	mov	x2, #0x0                   	// #0
     864:	strh	w0, [sp, #90]
     868:	cmp	w21, w2
     86c:	b.hi	8e0 <FSE_buildDTable+0xf0>  // b.pmore
     870:	cbz	w1, 878 <FSE_buildDTable+0x88>
     874:	strh	w0, [sp, #90]
     878:	mov	x2, #0x4                   	// #4
     87c:	add	x1, sp, #0x58
     880:	mov	x0, x19
     884:	bl	0 <grub_memmove>
     888:	lsr	w0, w22, #3
     88c:	mov	x3, #0x0                   	// #0
     890:	add	w0, w0, w22, lsr #1
     894:	mov	w2, #0x0                   	// #0
     898:	add	w0, w0, #0x3
     89c:	cmp	w21, w3
     8a0:	b.hi	948 <FSE_buildDTable+0x158>  // b.pmore
     8a4:	cbnz	w2, 994 <FSE_buildDTable+0x1a4>
     8a8:	mov	x0, x19
     8ac:	add	x4, x19, w22, sxtw #2
     8b0:	add	x3, sp, #0x60
     8b4:	mov	w5, #0x1f                  	// #31
     8b8:	cmp	x0, x4
     8bc:	b.ne	950 <FSE_buildDTable+0x160>  // b.any
     8c0:	mov	x0, #0x0                   	// #0
     8c4:	ldp	x29, x30, [sp]
     8c8:	ldp	x19, x20, [sp, #16]
     8cc:	ldp	x21, x22, [sp, #32]
     8d0:	ldp	x23, x24, [sp, #48]
     8d4:	ldp	x25, x26, [sp, #64]
     8d8:	add	sp, sp, #0x260
     8dc:	ret
     8e0:	ldrsh	w4, [x24, x2, lsl #1]
     8e4:	cmn	w4, #0x1
     8e8:	b.ne	904 <FSE_buildDTable+0x114>  // b.any
     8ec:	add	x4, x26, w23, uxtw #2
     8f0:	sub	w23, w23, #0x1
     8f4:	strh	w7, [x5, x2, lsl #1]
     8f8:	strb	w2, [x4, #2]
     8fc:	add	x2, x2, #0x1
     900:	b	868 <FSE_buildDTable+0x78>
     904:	cmp	w4, w3
     908:	strh	w4, [x5, x2, lsl #1]
     90c:	csel	w1, w1, w6, lt  // lt = tstop
     910:	csel	w0, w0, wzr, lt  // lt = tstop
     914:	b	8fc <FSE_buildDTable+0x10c>
     918:	add	x4, x26, w2, uxtw #2
     91c:	strb	w3, [x4, #2]
     920:	add	w2, w2, w0
     924:	and	w2, w2, w25
     928:	cmp	w23, w2
     92c:	b.cc	920 <FSE_buildDTable+0x130>  // b.lo, b.ul, b.last
     930:	add	w1, w1, #0x1
     934:	ldrsh	w4, [x24, x3, lsl #1]
     938:	cmp	w4, w1
     93c:	b.gt	918 <FSE_buildDTable+0x128>
     940:	add	x3, x3, #0x1
     944:	b	89c <FSE_buildDTable+0xac>
     948:	mov	w1, #0x0                   	// #0
     94c:	b	934 <FSE_buildDTable+0x144>
     950:	ldrb	w1, [x0, #6]
     954:	ldrh	w2, [x3, x1, lsl #1]
     958:	add	w6, w2, #0x1
     95c:	strh	w6, [x3, x1, lsl #1]
     960:	clz	w1, w2
     964:	sub	w1, w5, w1
     968:	sub	w1, w20, w1
     96c:	and	w1, w1, #0xff
     970:	strb	w1, [x0, #7]
     974:	lsl	w1, w2, w1
     978:	sub	w1, w1, w22
     97c:	strh	w1, [x0, #4]!
     980:	b	8b8 <FSE_buildDTable+0xc8>
     984:	mov	x0, #0xffffffffffffffd2    	// #-46
     988:	ret
     98c:	mov	x0, #0xffffffffffffffd4    	// #-44
     990:	b	8c4 <FSE_buildDTable+0xd4>
     994:	mov	x0, #0xffffffffffffffff    	// #-1
     998:	b	8c4 <FSE_buildDTable+0xd4>

000000000000099c <FSE_buildDTable_rle>:
     99c:	str	wzr, [x0]
     9a0:	strh	wzr, [x0, #4]
     9a4:	strb	w1, [x0, #6]
     9a8:	strb	wzr, [x0, #7]
     9ac:	mov	x0, #0x0                   	// #0
     9b0:	ret

00000000000009b4 <FSE_buildDTable_raw>:
     9b4:	mov	w2, #0x1                   	// #1
     9b8:	lsl	w3, w2, w1
     9bc:	cbz	w1, 9f8 <FSE_buildDTable_raw+0x44>
     9c0:	add	x0, x0, #0x4
     9c4:	sturh	w1, [x0, #-4]
     9c8:	sturh	w2, [x0, #-2]
     9cc:	mov	w2, #0x0                   	// #0
     9d0:	cmp	w2, w3
     9d4:	b.ne	9e0 <FSE_buildDTable_raw+0x2c>  // b.any
     9d8:	mov	x0, #0x0                   	// #0
     9dc:	ret
     9e0:	add	x0, x0, #0x4
     9e4:	sturh	wzr, [x0, #-4]
     9e8:	sturb	w2, [x0, #-2]
     9ec:	add	w2, w2, #0x1
     9f0:	sturb	w1, [x0, #-1]
     9f4:	b	9d0 <FSE_buildDTable_raw+0x1c>
     9f8:	mov	x0, #0xffffffffffffffff    	// #-1
     9fc:	b	9dc <FSE_buildDTable_raw+0x28>

0000000000000a00 <FSE_decompress_usingDTable>:
     a00:	stp	x29, x30, [sp, #-128]!
     a04:	mov	x29, sp
     a08:	stp	x19, x20, [sp, #16]
     a0c:	mov	x19, x1
     a10:	add	x19, x0, x19
     a14:	mov	x20, x0
     a18:	ldrh	w0, [x4, #2]
     a1c:	stp	x21, x22, [sp, #32]
     a20:	mov	x1, x2
     a24:	mov	x21, x4
     a28:	mov	x2, x3
     a2c:	sub	x22, x19, #0x3
     a30:	cbz	w0, b70 <FSE_decompress_usingDTable+0x170>
     a34:	add	x0, sp, #0x58
     a38:	bl	634 <ERR_getErrorString+0x16c>
     a3c:	cmn	x0, #0x78
     a40:	b.hi	a8c <FSE_decompress_usingDTable+0x8c>  // b.pmore
     a44:	mov	x2, x21
     a48:	add	x1, sp, #0x58
     a4c:	add	x0, sp, #0x38
     a50:	bl	780 <ERR_getErrorString+0x2b8>
     a54:	mov	x2, x21
     a58:	add	x1, sp, #0x58
     a5c:	add	x0, sp, #0x48
     a60:	bl	780 <ERR_getErrorString+0x2b8>
     a64:	mov	x8, x20
     a68:	add	x0, sp, #0x58
     a6c:	bl	500 <ERR_getErrorString+0x38>
     a70:	cmp	w0, #0x0
     a74:	ccmp	x8, x22, #0x2, eq  // eq = none
     a78:	b.cc	a9c <FSE_decompress_usingDTable+0x9c>  // b.lo, b.ul, b.last
     a7c:	sub	x19, x19, #0x2
     a80:	cmp	x19, x8
     a84:	b.cs	aec <FSE_decompress_usingDTable+0xec>  // b.hs, b.nlast
     a88:	mov	x0, #0xffffffffffffffba    	// #-70
     a8c:	ldp	x19, x20, [sp, #16]
     a90:	ldp	x21, x22, [sp, #32]
     a94:	ldp	x29, x30, [sp], #128
     a98:	ret
     a9c:	add	x1, sp, #0x58
     aa0:	add	x0, sp, #0x38
     aa4:	bl	5f0 <ERR_getErrorString+0x128>
     aa8:	strb	w0, [x8]
     aac:	add	x1, sp, #0x58
     ab0:	add	x0, sp, #0x48
     ab4:	bl	5f0 <ERR_getErrorString+0x128>
     ab8:	strb	w0, [x8, #1]
     abc:	add	x1, sp, #0x58
     ac0:	add	x0, sp, #0x38
     ac4:	bl	5f0 <ERR_getErrorString+0x128>
     ac8:	strb	w0, [x8, #2]
     acc:	add	x1, sp, #0x58
     ad0:	add	x0, sp, #0x48
     ad4:	bl	5f0 <ERR_getErrorString+0x128>
     ad8:	add	x8, x8, #0x4
     adc:	sturb	w0, [x8, #-1]
     ae0:	b	a68 <FSE_decompress_usingDTable+0x68>
     ae4:	mov	x8, x6
     ae8:	b	a80 <FSE_decompress_usingDTable+0x80>
     aec:	add	x1, sp, #0x58
     af0:	add	x0, sp, #0x38
     af4:	bl	5f0 <ERR_getErrorString+0x128>
     af8:	strb	w0, [x8]
     afc:	add	x0, sp, #0x58
     b00:	bl	500 <ERR_getErrorString+0x38>
     b04:	cmp	w0, #0x3
     b08:	b.ne	b28 <FSE_decompress_usingDTable+0x128>  // b.any
     b0c:	add	x1, sp, #0x58
     b10:	add	x0, sp, #0x48
     b14:	bl	5f0 <ERR_getErrorString+0x128>
     b18:	add	x1, x8, #0x2
     b1c:	strb	w0, [x8, #1]
     b20:	sub	x0, x1, x20
     b24:	b	a8c <FSE_decompress_usingDTable+0x8c>
     b28:	add	x0, x8, #0x1
     b2c:	cmp	x19, x0
     b30:	b.cc	a88 <FSE_decompress_usingDTable+0x88>  // b.lo, b.ul, b.last
     b34:	add	x1, sp, #0x58
     b38:	add	x0, sp, #0x48
     b3c:	bl	5f0 <ERR_getErrorString+0x128>
     b40:	add	x6, x8, #0x2
     b44:	sturb	w0, [x6, #-1]
     b48:	add	x0, sp, #0x58
     b4c:	bl	500 <ERR_getErrorString+0x38>
     b50:	cmp	w0, #0x3
     b54:	b.ne	ae4 <FSE_decompress_usingDTable+0xe4>  // b.any
     b58:	add	x1, sp, #0x58
     b5c:	add	x0, sp, #0x38
     b60:	bl	5f0 <ERR_getErrorString+0x128>
     b64:	add	x1, x8, #0x3
     b68:	strb	w0, [x8, #2]
     b6c:	b	b20 <FSE_decompress_usingDTable+0x120>
     b70:	add	x0, sp, #0x58
     b74:	bl	634 <ERR_getErrorString+0x16c>
     b78:	cmn	x0, #0x78
     b7c:	b.hi	a8c <FSE_decompress_usingDTable+0x8c>  // b.pmore
     b80:	mov	x2, x21
     b84:	add	x1, sp, #0x58
     b88:	add	x0, sp, #0x38
     b8c:	bl	780 <ERR_getErrorString+0x2b8>
     b90:	mov	x2, x21
     b94:	add	x1, sp, #0x58
     b98:	add	x0, sp, #0x48
     b9c:	bl	780 <ERR_getErrorString+0x2b8>
     ba0:	mov	x8, x20
     ba4:	add	x0, sp, #0x58
     ba8:	bl	500 <ERR_getErrorString+0x38>
     bac:	cmp	w0, #0x0
     bb0:	ccmp	x8, x22, #0x2, eq  // eq = none
     bb4:	b.cc	bf4 <FSE_decompress_usingDTable+0x1f4>  // b.lo, b.ul, b.last
     bb8:	sub	x19, x19, #0x2
     bbc:	cmp	x19, x8
     bc0:	b.cc	a88 <FSE_decompress_usingDTable+0x88>  // b.lo, b.ul, b.last
     bc4:	add	x1, sp, #0x58
     bc8:	add	x0, sp, #0x38
     bcc:	bl	5a8 <ERR_getErrorString+0xe0>
     bd0:	strb	w0, [x8]
     bd4:	add	x0, sp, #0x58
     bd8:	bl	500 <ERR_getErrorString+0x38>
     bdc:	cmp	w0, #0x3
     be0:	b.ne	c44 <FSE_decompress_usingDTable+0x244>  // b.any
     be4:	add	x1, sp, #0x58
     be8:	add	x0, sp, #0x48
     bec:	bl	5a8 <ERR_getErrorString+0xe0>
     bf0:	b	b18 <FSE_decompress_usingDTable+0x118>
     bf4:	add	x1, sp, #0x58
     bf8:	add	x0, sp, #0x38
     bfc:	bl	5a8 <ERR_getErrorString+0xe0>
     c00:	strb	w0, [x8]
     c04:	add	x1, sp, #0x58
     c08:	add	x0, sp, #0x48
     c0c:	bl	5a8 <ERR_getErrorString+0xe0>
     c10:	strb	w0, [x8, #1]
     c14:	add	x1, sp, #0x58
     c18:	add	x0, sp, #0x38
     c1c:	bl	5a8 <ERR_getErrorString+0xe0>
     c20:	strb	w0, [x8, #2]
     c24:	add	x1, sp, #0x58
     c28:	add	x0, sp, #0x48
     c2c:	bl	5a8 <ERR_getErrorString+0xe0>
     c30:	add	x8, x8, #0x4
     c34:	sturb	w0, [x8, #-1]
     c38:	b	ba4 <FSE_decompress_usingDTable+0x1a4>
     c3c:	mov	x8, x6
     c40:	b	bbc <FSE_decompress_usingDTable+0x1bc>
     c44:	add	x0, x8, #0x1
     c48:	cmp	x19, x0
     c4c:	b.cc	a88 <FSE_decompress_usingDTable+0x88>  // b.lo, b.ul, b.last
     c50:	add	x1, sp, #0x58
     c54:	add	x0, sp, #0x48
     c58:	bl	5a8 <ERR_getErrorString+0xe0>
     c5c:	add	x6, x8, #0x2
     c60:	sturb	w0, [x6, #-1]
     c64:	add	x0, sp, #0x58
     c68:	bl	500 <ERR_getErrorString+0x38>
     c6c:	cmp	w0, #0x3
     c70:	b.ne	c3c <FSE_decompress_usingDTable+0x23c>  // b.any
     c74:	add	x1, sp, #0x58
     c78:	add	x0, sp, #0x38
     c7c:	bl	5a8 <ERR_getErrorString+0xe0>
     c80:	b	b64 <FSE_decompress_usingDTable+0x164>

0000000000000c84 <FSE_decompress_wksp>:
     c84:	sub	sp, sp, #0x260
     c88:	stp	x29, x30, [sp]
     c8c:	mov	x29, sp
     c90:	stp	x23, x24, [sp, #48]
     c94:	mov	x23, x0
     c98:	mov	w0, #0xff                  	// #255
     c9c:	mov	x24, x1
     ca0:	add	x1, sp, #0x5c
     ca4:	stp	x19, x20, [sp, #16]
     ca8:	mov	x20, x2
     cac:	stp	x21, x22, [sp, #32]
     cb0:	mov	x21, x3
     cb4:	mov	x22, x4
     cb8:	mov	x4, x3
     cbc:	mov	x3, x2
     cc0:	add	x2, sp, #0x58
     cc4:	str	x25, [sp, #64]
     cc8:	mov	w25, w5
     ccc:	str	w0, [sp, #92]
     cd0:	add	x0, sp, #0x60
     cd4:	bl	50 <FSE_readNCount>
     cd8:	mov	x19, x0
     cdc:	cmn	x0, #0x78
     ce0:	b.hi	d2c <FSE_decompress_wksp+0xa8>  // b.pmore
     ce4:	ldr	w3, [sp, #88]
     ce8:	cmp	w3, w25
     cec:	b.hi	d28 <FSE_decompress_wksp+0xa4>  // b.pmore
     cf0:	ldr	w2, [sp, #92]
     cf4:	add	x1, sp, #0x60
     cf8:	mov	x0, x22
     cfc:	bl	7f0 <FSE_buildDTable>
     d00:	cmn	x0, #0x78
     d04:	b.hi	d20 <FSE_decompress_wksp+0x9c>  // b.pmore
     d08:	mov	x4, x22
     d0c:	sub	x3, x21, x19
     d10:	add	x2, x20, x19
     d14:	mov	x1, x24
     d18:	mov	x0, x23
     d1c:	bl	a00 <FSE_decompress_usingDTable>
     d20:	mov	x19, x0
     d24:	b	d2c <FSE_decompress_wksp+0xa8>
     d28:	mov	x19, #0xffffffffffffffd4    	// #-44
     d2c:	mov	x0, x19
     d30:	ldp	x29, x30, [sp]
     d34:	ldp	x19, x20, [sp, #16]
     d38:	ldp	x21, x22, [sp, #32]
     d3c:	ldp	x23, x24, [sp, #48]
     d40:	ldr	x25, [sp, #64]
     d44:	add	sp, sp, #0x260
     d48:	ret

0000000000000d4c <FSE_decompress>:
     d4c:	mov	x12, #0x4020                	// #16416
     d50:	sub	sp, sp, x12
     d54:	add	x4, sp, #0x18
     d58:	mov	w5, #0xc                   	// #12
     d5c:	stp	x29, x30, [sp]
     d60:	mov	x29, sp
     d64:	bl	c84 <FSE_decompress_wksp>
     d68:	mov	x12, #0x4020                	// #16416
     d6c:	ldp	x29, x30, [sp]
     d70:	add	sp, sp, x12
     d74:	ret
     d78:	ldr	w2, [x0, #8]
     d7c:	neg	w1, w1
     d80:	ldr	x0, [x0]
     d84:	lsl	x0, x0, x2
     d88:	lsr	x0, x0, x1
     d8c:	ret
     d90:	ldr	w3, [x0, #8]
     d94:	mov	x1, x0
     d98:	cmp	w3, #0x40
     d9c:	b.hi	e30 <FSE_decompress+0xe4>  // b.pmore
     da0:	ldr	x2, [x0, #16]
     da4:	ldr	x0, [x0, #32]
     da8:	cmp	x2, x0
     dac:	b.cc	dd4 <FSE_decompress+0x88>  // b.lo, b.ul, b.last
     db0:	lsr	w0, w3, #3
     db4:	and	w3, w3, #0x7
     db8:	sub	x2, x2, x0
     dbc:	ldr	x0, [x2]
     dc0:	str	x0, [x1]
     dc4:	mov	w0, #0x0                   	// #0
     dc8:	str	w3, [x1, #8]
     dcc:	str	x2, [x1, #16]
     dd0:	ret
     dd4:	ldr	x0, [x1, #24]
     dd8:	cmp	x2, x0
     ddc:	b.ne	df0 <FSE_decompress+0xa4>  // b.any
     de0:	cmp	w3, #0x40
     de4:	cset	w0, eq  // eq = none
     de8:	add	w0, w0, #0x1
     dec:	b	dd0 <FSE_decompress+0x84>
     df0:	lsr	w5, w3, #3
     df4:	lsr	w4, w3, #3
     df8:	sub	x5, x2, x5
     dfc:	cmp	x0, x5
     e00:	b.ls	e28 <FSE_decompress+0xdc>  // b.plast
     e04:	sub	w4, w2, w0
     e08:	mov	w0, #0x1                   	// #1
     e0c:	sub	x2, x2, w4, uxtw
     e10:	str	x2, [x1, #16]
     e14:	sub	w3, w3, w4, lsl #3
     e18:	str	w3, [x1, #8]
     e1c:	ldr	x2, [x2]
     e20:	str	x2, [x1]
     e24:	b	dd0 <FSE_decompress+0x84>
     e28:	mov	w0, #0x0                   	// #0
     e2c:	b	e0c <FSE_decompress+0xc0>
     e30:	mov	w0, #0x3                   	// #3
     e34:	b	dd0 <FSE_decompress+0x84>
     e38:	ldp	x2, x1, [x0, #16]
     e3c:	cmp	x2, x1
     e40:	b.ne	e54 <FSE_decompress+0x108>  // b.any
     e44:	ldr	w0, [x0, #8]
     e48:	cmp	w0, #0x40
     e4c:	cset	w0, eq  // eq = none
     e50:	ret
     e54:	mov	w0, #0x0                   	// #0
     e58:	b	e50 <FSE_decompress+0x104>
     e5c:	b	0 <grub_memmove>
     e60:	stp	x29, x30, [sp, #-32]!
     e64:	mov	x1, x0
     e68:	mov	x2, #0x4                   	// #4
     e6c:	mov	x29, sp
     e70:	add	x0, sp, #0x18
     e74:	bl	e5c <FSE_decompress+0x110>
     e78:	ldr	w0, [sp, #24]
     e7c:	ldp	x29, x30, [sp], #32
     e80:	ret
     e84:	cbnz	x2, eac <FSE_decompress+0x160>
     e88:	stp	x29, x30, [sp, #-16]!
     e8c:	mov	x2, #0x28                  	// #40
     e90:	mov	w1, #0x0                   	// #0
     e94:	mov	x29, sp
     e98:	bl	0 <grub_memset>
     e9c:	mov	x2, #0xffffffffffffffb8    	// #-72
     ea0:	mov	x0, x2
     ea4:	ldp	x29, x30, [sp], #16
     ea8:	ret
     eac:	mov	x3, x0
     eb0:	add	x0, x1, #0x8
     eb4:	sub	x5, x2, #0x1
     eb8:	cmp	x2, #0x7
     ebc:	stp	x1, x0, [x3, #24]
     ec0:	b.ls	efc <FSE_decompress+0x1b0>  // b.plast
     ec4:	sub	x0, x2, #0x8
     ec8:	add	x4, x1, x0
     ecc:	ldr	x0, [x1, x0]
     ed0:	str	x0, [x3]
     ed4:	str	x4, [x3, #16]
     ed8:	ldrb	w1, [x1, x5]
     edc:	cmp	w1, #0x0
     ee0:	clz	w0, w1
     ee4:	sub	w0, w0, #0x17
     ee8:	csinv	x2, x2, xzr, ne  // ne = any
     eec:	csel	w0, w0, wzr, ne  // ne = any
     ef0:	str	w0, [x3, #8]
     ef4:	mov	x0, x2
     ef8:	ret
     efc:	str	x1, [x3, #16]
     f00:	sub	x4, x2, #0x2
     f04:	cmp	x4, #0x5
     f08:	ldrb	w6, [x1]
     f0c:	str	x6, [x3]
     f10:	b.hi	f90 <FSE_decompress+0x244>  // b.pmore
     f14:	cmp	w4, #0x5
     f18:	b.hi	f90 <FSE_decompress+0x244>  // b.pmore
     f1c:	adrp	x0, 0 <FSE_versionNumber>
     f20:	ldr	x0, [x0]
     f24:	ldrb	w0, [x0, w4, uxtw]
     f28:	adr	x4, f34 <FSE_decompress+0x1e8>
     f2c:	add	x0, x4, w0, sxtb #2
     f30:	br	x0
     f34:	ldrb	w0, [x1, #6]
     f38:	add	x0, x6, x0, lsl #48
     f3c:	str	x0, [x3]
     f40:	ldr	x4, [x3]
     f44:	ldrb	w0, [x1, #5]
     f48:	add	x0, x4, x0, lsl #40
     f4c:	str	x0, [x3]
     f50:	ldr	x4, [x3]
     f54:	ldrb	w0, [x1, #4]
     f58:	add	x0, x4, x0, lsl #32
     f5c:	str	x0, [x3]
     f60:	ldr	x4, [x3]
     f64:	ldrb	w0, [x1, #3]
     f68:	add	x0, x4, x0, lsl #24
     f6c:	str	x0, [x3]
     f70:	ldr	x4, [x3]
     f74:	ldrb	w0, [x1, #2]
     f78:	add	x0, x4, x0, lsl #16
     f7c:	str	x0, [x3]
     f80:	ldr	x4, [x3]
     f84:	ldrb	w0, [x1, #1]
     f88:	add	x0, x4, x0, lsl #8
     f8c:	str	x0, [x3]
     f90:	ldrb	w0, [x1, x5]
     f94:	cbz	w0, fb8 <FSE_decompress+0x26c>
     f98:	clz	w0, w0
     f9c:	mov	w4, #0x8                   	// #8
     fa0:	sub	w1, w4, w2
     fa4:	add	w0, w0, w4
     fa8:	sub	w0, w0, #0x1f
     fac:	add	w0, w0, w1, lsl #3
     fb0:	str	w0, [x3, #8]
     fb4:	b	ef4 <FSE_decompress+0x1a8>
     fb8:	mov	x2, #0xffffffffffffffec    	// #-20
     fbc:	str	wzr, [x3, #8]
     fc0:	b	ef4 <FSE_decompress+0x1a8>
     fc4:	nop
	...
     fd0:	stp	x29, x30, [sp, #-112]!
     fd4:	mov	x29, sp
     fd8:	stp	x19, x20, [sp, #16]
     fdc:	mov	x19, x0
     fe0:	mov	x0, x4
     fe4:	stp	x21, x22, [sp, #32]
     fe8:	mov	x21, x1
     fec:	mov	x22, x4
     ff0:	stp	x23, x24, [sp, #48]
     ff4:	mov	x23, x2
     ff8:	mov	x24, x3
     ffc:	bl	e60 <FSE_decompress+0x114>
    1000:	ubfx	x20, x0, #16, #8
    1004:	mov	x2, x24
    1008:	mov	x1, x23
    100c:	add	x0, sp, #0x48
    1010:	bl	e84 <FSE_decompress+0x138>
    1014:	cmn	x0, #0x78
    1018:	b.hi	1058 <FSE_decompress+0x30c>  // b.pmore
    101c:	add	x7, x19, x21
    1020:	add	x22, x22, #0x4
    1024:	sub	x8, x7, #0x3
    1028:	add	x0, sp, #0x48
    102c:	bl	d90 <FSE_decompress+0x44>
    1030:	cmp	w0, #0x0
    1034:	ccmp	x19, x8, #0x2, eq  // eq = none
    1038:	b.cc	106c <FSE_decompress+0x320>  // b.lo, b.ul, b.last
    103c:	cmp	x7, x19
    1040:	b.hi	1118 <FSE_decompress+0x3cc>  // b.pmore
    1044:	add	x0, sp, #0x48
    1048:	bl	e38 <FSE_decompress+0xec>
    104c:	cmp	w0, #0x0
    1050:	mov	x0, #0xffffffffffffffec    	// #-20
    1054:	csel	x0, x21, x0, ne  // ne = any
    1058:	ldp	x19, x20, [sp, #16]
    105c:	ldp	x21, x22, [sp, #32]
    1060:	ldp	x23, x24, [sp, #48]
    1064:	ldp	x29, x30, [sp], #112
    1068:	ret
    106c:	mov	w1, w20
    1070:	add	x0, sp, #0x48
    1074:	bl	d78 <FSE_decompress+0x2c>
    1078:	lsl	x1, x0, #1
    107c:	add	x0, x22, x0, lsl #1
    1080:	ldr	w3, [sp, #80]
    1084:	add	x19, x19, #0x4
    1088:	ldrb	w1, [x22, x1]
    108c:	ldrb	w4, [x0, #1]
    1090:	add	x0, sp, #0x48
    1094:	sturb	w1, [x19, #-4]
    1098:	mov	w1, w20
    109c:	add	w4, w4, w3
    10a0:	str	w4, [sp, #80]
    10a4:	bl	d78 <FSE_decompress+0x2c>
    10a8:	lsl	x1, x0, #1
    10ac:	add	x0, x22, x0, lsl #1
    10b0:	ldrb	w1, [x22, x1]
    10b4:	ldrb	w3, [x0, #1]
    10b8:	add	x0, sp, #0x48
    10bc:	sturb	w1, [x19, #-3]
    10c0:	mov	w1, w20
    10c4:	add	w4, w3, w4
    10c8:	str	w4, [sp, #80]
    10cc:	bl	d78 <FSE_decompress+0x2c>
    10d0:	lsl	x1, x0, #1
    10d4:	add	x0, x22, x0, lsl #1
    10d8:	ldrb	w1, [x22, x1]
    10dc:	ldrb	w3, [x0, #1]
    10e0:	add	x0, sp, #0x48
    10e4:	sturb	w1, [x19, #-2]
    10e8:	mov	w1, w20
    10ec:	add	w3, w3, w4
    10f0:	str	w3, [sp, #80]
    10f4:	bl	d78 <FSE_decompress+0x2c>
    10f8:	lsl	x1, x0, #1
    10fc:	add	x0, x22, x0, lsl #1
    1100:	ldrb	w1, [x22, x1]
    1104:	ldrb	w0, [x0, #1]
    1108:	sturb	w1, [x19, #-1]
    110c:	add	w3, w0, w3
    1110:	str	w3, [sp, #80]
    1114:	b	1028 <FSE_decompress+0x2dc>
    1118:	mov	w1, w20
    111c:	add	x0, sp, #0x48
    1120:	bl	d78 <FSE_decompress+0x2c>
    1124:	lsl	x1, x0, #1
    1128:	add	x0, x22, x0, lsl #1
    112c:	ldrb	w1, [x22, x1]
    1130:	ldrb	w2, [x0, #1]
    1134:	ldr	w0, [sp, #80]
    1138:	strb	w1, [x19], #1
    113c:	add	w0, w0, w2
    1140:	str	w0, [sp, #80]
    1144:	b	103c <FSE_decompress+0x2f0>
    1148:	stp	x29, x30, [sp, #-256]!
    114c:	mov	x29, sp
    1150:	stp	x25, x26, [sp, #64]
    1154:	mov	x26, x2
    1158:	ldrh	w25, [x2, #2]
    115c:	stp	x27, x28, [sp, #80]
    1160:	mov	x27, x3
    1164:	ldrh	w28, [x2]
    1168:	stp	x21, x22, [sp, #32]
    116c:	mov	x21, x0
    1170:	add	x0, x28, x25
    1174:	stp	x23, x24, [sp, #48]
    1178:	sub	x23, x3, #0x6
    117c:	ldrh	w24, [x2, #4]
    1180:	sub	x23, x23, x0
    1184:	mov	x22, x1
    1188:	sub	x23, x23, x24
    118c:	mov	x0, x4
    1190:	stp	x19, x20, [sp, #16]
    1194:	mov	x19, x4
    1198:	bl	e60 <FSE_decompress+0x114>
    119c:	cmp	x27, x23
    11a0:	b.cc	127c <FSE_decompress+0x530>  // b.lo, b.ul, b.last
    11a4:	add	x26, x26, #0x6
    11a8:	ubfx	x20, x0, #16, #8
    11ac:	mov	x2, x28
    11b0:	mov	x1, x26
    11b4:	add	x0, sp, #0x60
    11b8:	bl	e84 <FSE_decompress+0x138>
    11bc:	cmn	x0, #0x78
    11c0:	b.hi	1280 <FSE_decompress+0x534>  // b.pmore
    11c4:	add	x26, x26, x28
    11c8:	mov	x2, x25
    11cc:	mov	x1, x26
    11d0:	add	x0, sp, #0x88
    11d4:	bl	e84 <FSE_decompress+0x138>
    11d8:	cmn	x0, #0x78
    11dc:	b.hi	1280 <FSE_decompress+0x534>  // b.pmore
    11e0:	add	x25, x26, x25
    11e4:	mov	x2, x24
    11e8:	mov	x1, x25
    11ec:	add	x0, sp, #0xb0
    11f0:	bl	e84 <FSE_decompress+0x138>
    11f4:	cmn	x0, #0x78
    11f8:	b.hi	1280 <FSE_decompress+0x534>  // b.pmore
    11fc:	mov	x2, x23
    1200:	add	x1, x25, x24
    1204:	add	x0, sp, #0xd8
    1208:	bl	e84 <FSE_decompress+0x138>
    120c:	cmn	x0, #0x78
    1210:	b.hi	1280 <FSE_decompress+0x534>  // b.pmore
    1214:	add	x10, x22, #0x3
    1218:	add	x13, x21, x22
    121c:	add	x0, sp, #0x60
    1220:	add	x19, x19, #0x4
    1224:	add	x12, x21, x10, lsr #2
    1228:	add	x11, x12, x10, lsr #2
    122c:	add	x10, x11, x10, lsr #2
    1230:	bl	d90 <FSE_decompress+0x44>
    1234:	mov	w8, w0
    1238:	add	x0, sp, #0x88
    123c:	bl	d90 <FSE_decompress+0x44>
    1240:	orr	w8, w8, w0
    1244:	add	x0, sp, #0xb0
    1248:	bl	d90 <FSE_decompress+0x44>
    124c:	mov	w7, w0
    1250:	add	x0, sp, #0xd8
    1254:	bl	d90 <FSE_decompress+0x44>
    1258:	orr	w0, w7, w0
    125c:	orr	w0, w0, w8
    1260:	mov	x7, x10
    1264:	mov	x8, x11
    1268:	mov	x9, x12
    126c:	sub	x15, x13, #0x3
    1270:	cbz	w0, 155c <FSE_decompress+0x810>
    1274:	cmp	x12, x21
    1278:	b.cs	1568 <FSE_decompress+0x81c>  // b.hs, b.nlast
    127c:	mov	x0, #0xffffffffffffffec    	// #-20
    1280:	ldp	x19, x20, [sp, #16]
    1284:	ldp	x21, x22, [sp, #32]
    1288:	ldp	x23, x24, [sp, #48]
    128c:	ldp	x25, x26, [sp, #64]
    1290:	ldp	x27, x28, [sp, #80]
    1294:	ldp	x29, x30, [sp], #256
    1298:	ret
    129c:	mov	w1, w20
    12a0:	add	x0, sp, #0x60
    12a4:	bl	d78 <FSE_decompress+0x2c>
    12a8:	lsl	x1, x0, #1
    12ac:	add	x0, x19, x0, lsl #1
    12b0:	add	x21, x21, #0x4
    12b4:	ldrb	w1, [x19, x1]
    12b8:	ldrb	w14, [x0, #1]
    12bc:	ldr	w0, [sp, #104]
    12c0:	sturb	w1, [x21, #-4]
    12c4:	mov	w1, w20
    12c8:	add	w14, w14, w0
    12cc:	add	x0, sp, #0x88
    12d0:	str	w14, [sp, #104]
    12d4:	bl	d78 <FSE_decompress+0x2c>
    12d8:	lsl	x1, x0, #1
    12dc:	add	x0, x19, x0, lsl #1
    12e0:	ldrb	w1, [x19, x1]
    12e4:	ldrb	w5, [x0, #1]
    12e8:	ldr	w0, [sp, #144]
    12ec:	strb	w1, [x9]
    12f0:	mov	w1, w20
    12f4:	add	w5, w5, w0
    12f8:	add	x0, sp, #0xb0
    12fc:	str	w5, [sp, #144]
    1300:	bl	d78 <FSE_decompress+0x2c>
    1304:	lsl	x1, x0, #1
    1308:	add	x0, x19, x0, lsl #1
    130c:	ldrb	w1, [x19, x1]
    1310:	ldrb	w4, [x0, #1]
    1314:	ldr	w0, [sp, #184]
    1318:	strb	w1, [x8]
    131c:	mov	w1, w20
    1320:	add	w4, w4, w0
    1324:	add	x0, sp, #0xd8
    1328:	str	w4, [sp, #184]
    132c:	bl	d78 <FSE_decompress+0x2c>
    1330:	lsl	x1, x0, #1
    1334:	add	x0, x19, x0, lsl #1
    1338:	ldrb	w1, [x19, x1]
    133c:	ldrb	w3, [x0, #1]
    1340:	ldr	w0, [sp, #224]
    1344:	strb	w1, [x7]
    1348:	mov	w1, w20
    134c:	add	w3, w3, w0
    1350:	add	x0, sp, #0x60
    1354:	str	w3, [sp, #224]
    1358:	bl	d78 <FSE_decompress+0x2c>
    135c:	lsl	x1, x0, #1
    1360:	add	x0, x19, x0, lsl #1
    1364:	ldrb	w1, [x19, x1]
    1368:	ldrb	w0, [x0, #1]
    136c:	sturb	w1, [x21, #-3]
    1370:	mov	w1, w20
    1374:	add	w14, w0, w14
    1378:	add	x0, sp, #0x88
    137c:	str	w14, [sp, #104]
    1380:	bl	d78 <FSE_decompress+0x2c>
    1384:	lsl	x1, x0, #1
    1388:	add	x0, x19, x0, lsl #1
    138c:	ldrb	w1, [x19, x1]
    1390:	ldrb	w0, [x0, #1]
    1394:	strb	w1, [x9, #1]
    1398:	mov	w1, w20
    139c:	add	w5, w0, w5
    13a0:	add	x0, sp, #0xb0
    13a4:	str	w5, [sp, #144]
    13a8:	bl	d78 <FSE_decompress+0x2c>
    13ac:	lsl	x1, x0, #1
    13b0:	add	x0, x19, x0, lsl #1
    13b4:	ldrb	w1, [x19, x1]
    13b8:	ldrb	w0, [x0, #1]
    13bc:	strb	w1, [x8, #1]
    13c0:	mov	w1, w20
    13c4:	add	w4, w0, w4
    13c8:	add	x0, sp, #0xd8
    13cc:	str	w4, [sp, #184]
    13d0:	bl	d78 <FSE_decompress+0x2c>
    13d4:	lsl	x1, x0, #1
    13d8:	add	x0, x19, x0, lsl #1
    13dc:	ldrb	w1, [x19, x1]
    13e0:	ldrb	w0, [x0, #1]
    13e4:	strb	w1, [x7, #1]
    13e8:	mov	w1, w20
    13ec:	add	w3, w0, w3
    13f0:	add	x0, sp, #0x60
    13f4:	str	w3, [sp, #224]
    13f8:	bl	d78 <FSE_decompress+0x2c>
    13fc:	lsl	x1, x0, #1
    1400:	add	x0, x19, x0, lsl #1
    1404:	ldrb	w1, [x19, x1]
    1408:	ldrb	w0, [x0, #1]
    140c:	add	w14, w0, w14
    1410:	str	w14, [sp, #104]
    1414:	sturb	w1, [x21, #-2]
    1418:	mov	w1, w20
    141c:	add	x0, sp, #0x88
    1420:	bl	d78 <FSE_decompress+0x2c>
    1424:	lsl	x1, x0, #1
    1428:	add	x0, x19, x0, lsl #1
    142c:	ldrb	w1, [x19, x1]
    1430:	ldrb	w0, [x0, #1]
    1434:	strb	w1, [x9, #2]
    1438:	mov	w1, w20
    143c:	add	w5, w0, w5
    1440:	add	x0, sp, #0xb0
    1444:	str	w5, [sp, #144]
    1448:	bl	d78 <FSE_decompress+0x2c>
    144c:	lsl	x1, x0, #1
    1450:	add	x0, x19, x0, lsl #1
    1454:	ldrb	w1, [x19, x1]
    1458:	ldrb	w0, [x0, #1]
    145c:	strb	w1, [x8, #2]
    1460:	mov	w1, w20
    1464:	add	w4, w0, w4
    1468:	add	x0, sp, #0xd8
    146c:	str	w4, [sp, #184]
    1470:	bl	d78 <FSE_decompress+0x2c>
    1474:	lsl	x1, x0, #1
    1478:	add	x0, x19, x0, lsl #1
    147c:	ldrb	w1, [x19, x1]
    1480:	ldrb	w0, [x0, #1]
    1484:	strb	w1, [x7, #2]
    1488:	mov	w1, w20
    148c:	add	w3, w0, w3
    1490:	add	x0, sp, #0x60
    1494:	str	w3, [sp, #224]
    1498:	bl	d78 <FSE_decompress+0x2c>
    149c:	lsl	x1, x0, #1
    14a0:	add	x0, x19, x0, lsl #1
    14a4:	add	x9, x9, #0x4
    14a8:	ldrb	w1, [x19, x1]
    14ac:	ldrb	w0, [x0, #1]
    14b0:	sturb	w1, [x21, #-1]
    14b4:	mov	w1, w20
    14b8:	add	w14, w0, w14
    14bc:	add	x0, sp, #0x88
    14c0:	str	w14, [sp, #104]
    14c4:	bl	d78 <FSE_decompress+0x2c>
    14c8:	lsl	x1, x0, #1
    14cc:	add	x0, x19, x0, lsl #1
    14d0:	add	x8, x8, #0x4
    14d4:	ldrb	w1, [x19, x1]
    14d8:	ldrb	w0, [x0, #1]
    14dc:	sturb	w1, [x9, #-1]
    14e0:	mov	w1, w20
    14e4:	add	w5, w0, w5
    14e8:	add	x0, sp, #0xb0
    14ec:	str	w5, [sp, #144]
    14f0:	bl	d78 <FSE_decompress+0x2c>
    14f4:	lsl	x1, x0, #1
    14f8:	add	x0, x19, x0, lsl #1
    14fc:	add	x7, x7, #0x4
    1500:	ldrb	w1, [x19, x1]
    1504:	ldrb	w0, [x0, #1]
    1508:	sturb	w1, [x8, #-1]
    150c:	mov	w1, w20
    1510:	add	w4, w0, w4
    1514:	add	x0, sp, #0xd8
    1518:	str	w4, [sp, #184]
    151c:	bl	d78 <FSE_decompress+0x2c>
    1520:	lsl	x1, x0, #1
    1524:	add	x0, x19, x0, lsl #1
    1528:	ldrb	w1, [x19, x1]
    152c:	ldrb	w0, [x0, #1]
    1530:	sturb	w1, [x7, #-1]
    1534:	add	w3, w0, w3
    1538:	add	x0, sp, #0x60
    153c:	str	w3, [sp, #224]
    1540:	bl	d90 <FSE_decompress+0x44>
    1544:	add	x0, sp, #0x88
    1548:	bl	d90 <FSE_decompress+0x44>
    154c:	add	x0, sp, #0xb0
    1550:	bl	d90 <FSE_decompress+0x44>
    1554:	add	x0, sp, #0xd8
    1558:	bl	d90 <FSE_decompress+0x44>
    155c:	cmp	x7, x15
    1560:	b.cc	129c <FSE_decompress+0x550>  // b.lo, b.ul, b.last
    1564:	b	1274 <FSE_decompress+0x528>
    1568:	cmp	x11, x9
    156c:	b.cc	127c <FSE_decompress+0x530>  // b.lo, b.ul, b.last
    1570:	cmp	x10, x8
    1574:	b.cc	127c <FSE_decompress+0x530>  // b.lo, b.ul, b.last
    1578:	sub	x14, x12, #0x3
    157c:	add	x0, sp, #0x60
    1580:	bl	d90 <FSE_decompress+0x44>
    1584:	cmp	w0, #0x0
    1588:	ccmp	x21, x14, #0x2, eq  // eq = none
    158c:	b.cc	1638 <FSE_decompress+0x8ec>  // b.lo, b.ul, b.last
    1590:	cmp	x12, x21
    1594:	b.hi	16e4 <FSE_decompress+0x998>  // b.pmore
    1598:	sub	x12, x11, #0x3
    159c:	add	x0, sp, #0x88
    15a0:	bl	d90 <FSE_decompress+0x44>
    15a4:	cmp	w0, #0x0
    15a8:	ccmp	x9, x12, #0x2, eq  // eq = none
    15ac:	b.cc	1714 <FSE_decompress+0x9c8>  // b.lo, b.ul, b.last
    15b0:	cmp	x11, x9
    15b4:	b.hi	17c0 <FSE_decompress+0xa74>  // b.pmore
    15b8:	sub	x9, x10, #0x3
    15bc:	add	x0, sp, #0xb0
    15c0:	bl	d90 <FSE_decompress+0x44>
    15c4:	cmp	w0, #0x0
    15c8:	ccmp	x8, x9, #0x2, eq  // eq = none
    15cc:	b.cc	17f0 <FSE_decompress+0xaa4>  // b.lo, b.ul, b.last
    15d0:	cmp	x10, x8
    15d4:	b.hi	189c <FSE_decompress+0xb50>  // b.pmore
    15d8:	sub	x8, x13, #0x3
    15dc:	add	x0, sp, #0xd8
    15e0:	bl	d90 <FSE_decompress+0x44>
    15e4:	cmp	w0, #0x0
    15e8:	ccmp	x7, x8, #0x2, eq  // eq = none
    15ec:	b.cc	18cc <FSE_decompress+0xb80>  // b.lo, b.ul, b.last
    15f0:	cmp	x13, x7
    15f4:	b.hi	1978 <FSE_decompress+0xc2c>  // b.pmore
    15f8:	add	x0, sp, #0x60
    15fc:	bl	e38 <FSE_decompress+0xec>
    1600:	mov	w3, w0
    1604:	add	x0, sp, #0x88
    1608:	bl	e38 <FSE_decompress+0xec>
    160c:	and	w3, w3, w0
    1610:	add	x0, sp, #0xb0
    1614:	bl	e38 <FSE_decompress+0xec>
    1618:	mov	w4, w0
    161c:	add	x0, sp, #0xd8
    1620:	bl	e38 <FSE_decompress+0xec>
    1624:	and	w4, w4, w0
    1628:	tst	w4, w3
    162c:	b.eq	127c <FSE_decompress+0x530>  // b.none
    1630:	mov	x0, x22
    1634:	b	1280 <FSE_decompress+0x534>
    1638:	mov	w1, w20
    163c:	add	x0, sp, #0x60
    1640:	bl	d78 <FSE_decompress+0x2c>
    1644:	lsl	x1, x0, #1
    1648:	add	x0, x19, x0, lsl #1
    164c:	ldr	w3, [sp, #104]
    1650:	add	x21, x21, #0x4
    1654:	ldrb	w1, [x19, x1]
    1658:	ldrb	w4, [x0, #1]
    165c:	add	x0, sp, #0x60
    1660:	sturb	w1, [x21, #-4]
    1664:	mov	w1, w20
    1668:	add	w4, w4, w3
    166c:	str	w4, [sp, #104]
    1670:	bl	d78 <FSE_decompress+0x2c>
    1674:	lsl	x1, x0, #1
    1678:	add	x0, x19, x0, lsl #1
    167c:	ldrb	w1, [x19, x1]
    1680:	ldrb	w3, [x0, #1]
    1684:	add	x0, sp, #0x60
    1688:	sturb	w1, [x21, #-3]
    168c:	mov	w1, w20
    1690:	add	w4, w3, w4
    1694:	str	w4, [sp, #104]
    1698:	bl	d78 <FSE_decompress+0x2c>
    169c:	lsl	x1, x0, #1
    16a0:	add	x0, x19, x0, lsl #1
    16a4:	ldrb	w1, [x19, x1]
    16a8:	ldrb	w3, [x0, #1]
    16ac:	add	x0, sp, #0x60
    16b0:	sturb	w1, [x21, #-2]
    16b4:	mov	w1, w20
    16b8:	add	w3, w3, w4
    16bc:	str	w3, [sp, #104]
    16c0:	bl	d78 <FSE_decompress+0x2c>
    16c4:	lsl	x1, x0, #1
    16c8:	add	x0, x19, x0, lsl #1
    16cc:	ldrb	w1, [x19, x1]
    16d0:	ldrb	w0, [x0, #1]
    16d4:	sturb	w1, [x21, #-1]
    16d8:	add	w3, w0, w3
    16dc:	str	w3, [sp, #104]
    16e0:	b	157c <FSE_decompress+0x830>
    16e4:	mov	w1, w20
    16e8:	add	x0, sp, #0x60
    16ec:	bl	d78 <FSE_decompress+0x2c>
    16f0:	lsl	x1, x0, #1
    16f4:	add	x0, x19, x0, lsl #1
    16f8:	ldrb	w1, [x19, x1]
    16fc:	ldrb	w2, [x0, #1]
    1700:	ldr	w0, [sp, #104]
    1704:	strb	w1, [x21], #1
    1708:	add	w0, w0, w2
    170c:	str	w0, [sp, #104]
    1710:	b	1590 <FSE_decompress+0x844>
    1714:	mov	w1, w20
    1718:	add	x0, sp, #0x88
    171c:	bl	d78 <FSE_decompress+0x2c>
    1720:	lsl	x1, x0, #1
    1724:	add	x0, x19, x0, lsl #1
    1728:	ldr	w3, [sp, #144]
    172c:	ldrb	w1, [x19, x1]
    1730:	ldrb	w4, [x0, #1]
    1734:	add	x0, sp, #0x88
    1738:	strb	w1, [x9]
    173c:	mov	w1, w20
    1740:	add	w4, w4, w3
    1744:	str	w4, [sp, #144]
    1748:	bl	d78 <FSE_decompress+0x2c>
    174c:	lsl	x1, x0, #1
    1750:	add	x0, x19, x0, lsl #1
    1754:	ldrb	w1, [x19, x1]
    1758:	ldrb	w3, [x0, #1]
    175c:	add	x0, sp, #0x88
    1760:	strb	w1, [x9, #1]
    1764:	mov	w1, w20
    1768:	add	w4, w3, w4
    176c:	str	w4, [sp, #144]
    1770:	bl	d78 <FSE_decompress+0x2c>
    1774:	lsl	x1, x0, #1
    1778:	add	x0, x19, x0, lsl #1
    177c:	add	x9, x9, #0x4
    1780:	ldrb	w1, [x19, x1]
    1784:	ldrb	w3, [x0, #1]
    1788:	add	x0, sp, #0x88
    178c:	sturb	w1, [x9, #-2]
    1790:	mov	w1, w20
    1794:	add	w3, w3, w4
    1798:	str	w3, [sp, #144]
    179c:	bl	d78 <FSE_decompress+0x2c>
    17a0:	lsl	x1, x0, #1
    17a4:	add	x0, x19, x0, lsl #1
    17a8:	ldrb	w1, [x19, x1]
    17ac:	ldrb	w0, [x0, #1]
    17b0:	sturb	w1, [x9, #-1]
    17b4:	add	w3, w0, w3
    17b8:	str	w3, [sp, #144]
    17bc:	b	159c <FSE_decompress+0x850>
    17c0:	mov	w1, w20
    17c4:	add	x0, sp, #0x88
    17c8:	bl	d78 <FSE_decompress+0x2c>
    17cc:	lsl	x1, x0, #1
    17d0:	add	x0, x19, x0, lsl #1
    17d4:	ldrb	w1, [x19, x1]
    17d8:	ldrb	w2, [x0, #1]
    17dc:	ldr	w0, [sp, #144]
    17e0:	strb	w1, [x9], #1
    17e4:	add	w0, w0, w2
    17e8:	str	w0, [sp, #144]
    17ec:	b	15b0 <FSE_decompress+0x864>
    17f0:	mov	w1, w20
    17f4:	add	x0, sp, #0xb0
    17f8:	bl	d78 <FSE_decompress+0x2c>
    17fc:	lsl	x1, x0, #1
    1800:	add	x0, x19, x0, lsl #1
    1804:	ldr	w3, [sp, #184]
    1808:	ldrb	w1, [x19, x1]
    180c:	ldrb	w4, [x0, #1]
    1810:	add	x0, sp, #0xb0
    1814:	strb	w1, [x8]
    1818:	mov	w1, w20
    181c:	add	w4, w4, w3
    1820:	str	w4, [sp, #184]
    1824:	bl	d78 <FSE_decompress+0x2c>
    1828:	lsl	x1, x0, #1
    182c:	add	x0, x19, x0, lsl #1
    1830:	ldrb	w1, [x19, x1]
    1834:	ldrb	w3, [x0, #1]
    1838:	add	x0, sp, #0xb0
    183c:	strb	w1, [x8, #1]
    1840:	mov	w1, w20
    1844:	add	w4, w3, w4
    1848:	str	w4, [sp, #184]
    184c:	bl	d78 <FSE_decompress+0x2c>
    1850:	lsl	x1, x0, #1
    1854:	add	x0, x19, x0, lsl #1
    1858:	add	x8, x8, #0x4
    185c:	ldrb	w1, [x19, x1]
    1860:	ldrb	w3, [x0, #1]
    1864:	add	x0, sp, #0xb0
    1868:	sturb	w1, [x8, #-2]
    186c:	mov	w1, w20
    1870:	add	w3, w3, w4
    1874:	str	w3, [sp, #184]
    1878:	bl	d78 <FSE_decompress+0x2c>
    187c:	lsl	x1, x0, #1
    1880:	add	x0, x19, x0, lsl #1
    1884:	ldrb	w1, [x19, x1]
    1888:	ldrb	w0, [x0, #1]
    188c:	sturb	w1, [x8, #-1]
    1890:	add	w3, w0, w3
    1894:	str	w3, [sp, #184]
    1898:	b	15bc <FSE_decompress+0x870>
    189c:	mov	w1, w20
    18a0:	add	x0, sp, #0xb0
    18a4:	bl	d78 <FSE_decompress+0x2c>
    18a8:	lsl	x1, x0, #1
    18ac:	add	x0, x19, x0, lsl #1
    18b0:	ldrb	w1, [x19, x1]
    18b4:	ldrb	w2, [x0, #1]
    18b8:	ldr	w0, [sp, #184]
    18bc:	strb	w1, [x8], #1
    18c0:	add	w0, w0, w2
    18c4:	str	w0, [sp, #184]
    18c8:	b	15d0 <FSE_decompress+0x884>
    18cc:	mov	w1, w20
    18d0:	add	x0, sp, #0xd8
    18d4:	bl	d78 <FSE_decompress+0x2c>
    18d8:	lsl	x1, x0, #1
    18dc:	add	x0, x19, x0, lsl #1
    18e0:	ldr	w3, [sp, #224]
    18e4:	ldrb	w1, [x19, x1]
    18e8:	ldrb	w4, [x0, #1]
    18ec:	add	x0, sp, #0xd8
    18f0:	strb	w1, [x7]
    18f4:	mov	w1, w20
    18f8:	add	w4, w4, w3
    18fc:	str	w4, [sp, #224]
    1900:	bl	d78 <FSE_decompress+0x2c>
    1904:	lsl	x1, x0, #1
    1908:	add	x0, x19, x0, lsl #1
    190c:	ldrb	w1, [x19, x1]
    1910:	ldrb	w3, [x0, #1]
    1914:	add	x0, sp, #0xd8
    1918:	strb	w1, [x7, #1]
    191c:	mov	w1, w20
    1920:	add	w4, w3, w4
    1924:	str	w4, [sp, #224]
    1928:	bl	d78 <FSE_decompress+0x2c>
    192c:	lsl	x1, x0, #1
    1930:	add	x0, x19, x0, lsl #1
    1934:	add	x7, x7, #0x4
    1938:	ldrb	w1, [x19, x1]
    193c:	ldrb	w3, [x0, #1]
    1940:	add	x0, sp, #0xd8
    1944:	sturb	w1, [x7, #-2]
    1948:	mov	w1, w20
    194c:	add	w3, w3, w4
    1950:	str	w3, [sp, #224]
    1954:	bl	d78 <FSE_decompress+0x2c>
    1958:	lsl	x1, x0, #1
    195c:	add	x0, x19, x0, lsl #1
    1960:	ldrb	w1, [x19, x1]
    1964:	ldrb	w0, [x0, #1]
    1968:	sturb	w1, [x7, #-1]
    196c:	add	w3, w0, w3
    1970:	str	w3, [sp, #224]
    1974:	b	15dc <FSE_decompress+0x890>
    1978:	mov	w1, w20
    197c:	add	x0, sp, #0xd8
    1980:	bl	d78 <FSE_decompress+0x2c>
    1984:	lsl	x1, x0, #1
    1988:	add	x0, x19, x0, lsl #1
    198c:	ldrb	w1, [x19, x1]
    1990:	ldrb	w2, [x0, #1]
    1994:	ldr	w0, [sp, #224]
    1998:	strb	w1, [x7], #1
    199c:	add	w0, w0, w2
    19a0:	str	w0, [sp, #224]
    19a4:	b	15f0 <FSE_decompress+0x8a4>
    19a8:	stp	x29, x30, [sp, #-128]!
    19ac:	mov	x29, sp
    19b0:	stp	x19, x20, [sp, #16]
    19b4:	mov	x19, x0
    19b8:	mov	x20, x4
    19bc:	add	x0, sp, #0x58
    19c0:	stp	x21, x22, [sp, #32]
    19c4:	mov	x22, x1
    19c8:	mov	x1, x2
    19cc:	mov	x2, x3
    19d0:	stp	x23, x24, [sp, #48]
    19d4:	str	x25, [sp, #64]
    19d8:	bl	e84 <FSE_decompress+0x138>
    19dc:	cmn	x0, #0x78
    19e0:	b.hi	1a88 <FSE_decompress+0xd3c>  // b.pmore
    19e4:	add	x24, x19, x22
    19e8:	mov	x0, x20
    19ec:	add	x21, x20, #0x4
    19f0:	bl	e60 <FSE_decompress+0x114>
    19f4:	sub	x25, x24, #0x7
    19f8:	ubfx	x20, x0, #16, #8
    19fc:	add	x0, sp, #0x58
    1a00:	bl	d90 <FSE_decompress+0x44>
    1a04:	cmp	w0, #0x0
    1a08:	ccmp	x19, x25, #0x2, eq  // eq = none
    1a0c:	b.cc	1aa0 <FSE_decompress+0xd54>  // b.lo, b.ul, b.last
    1a10:	sub	x25, x24, #0x2
    1a14:	add	x0, sp, #0x58
    1a18:	bl	d90 <FSE_decompress+0x44>
    1a1c:	cmp	w0, #0x0
    1a20:	ccmp	x19, x25, #0x2, eq  // eq = none
    1a24:	b.ls	1b84 <FSE_decompress+0xe38>  // b.plast
    1a28:	cmp	x25, x19
    1a2c:	b.cs	1bc0 <FSE_decompress+0xe74>  // b.hs, b.nlast
    1a30:	cmp	x24, x19
    1a34:	b.ls	1a74 <FSE_decompress+0xd28>  // b.plast
    1a38:	mov	w1, w20
    1a3c:	add	x0, sp, #0x58
    1a40:	bl	d78 <FSE_decompress+0x2c>
    1a44:	add	x21, x21, x0, lsl #2
    1a48:	mov	x1, x21
    1a4c:	mov	x0, x19
    1a50:	mov	x2, #0x1                   	// #1
    1a54:	bl	e5c <FSE_decompress+0x110>
    1a58:	ldrb	w0, [x21, #3]
    1a5c:	cmp	w0, #0x1
    1a60:	b.ne	1bfc <FSE_decompress+0xeb0>  // b.any
    1a64:	ldrb	w1, [x21, #2]
    1a68:	ldr	w0, [sp, #96]
    1a6c:	add	w0, w0, w1
    1a70:	str	w0, [sp, #96]
    1a74:	add	x0, sp, #0x58
    1a78:	bl	e38 <FSE_decompress+0xec>
    1a7c:	cmp	w0, #0x0
    1a80:	mov	x0, #0xffffffffffffffec    	// #-20
    1a84:	csel	x0, x22, x0, ne  // ne = any
    1a88:	ldp	x19, x20, [sp, #16]
    1a8c:	ldp	x21, x22, [sp, #32]
    1a90:	ldp	x23, x24, [sp, #48]
    1a94:	ldr	x25, [sp, #64]
    1a98:	ldp	x29, x30, [sp], #128
    1a9c:	ret
    1aa0:	mov	w1, w20
    1aa4:	add	x0, sp, #0x58
    1aa8:	bl	d78 <FSE_decompress+0x2c>
    1aac:	add	x23, x21, x0, lsl #2
    1ab0:	mov	x1, x23
    1ab4:	mov	x2, #0x2                   	// #2
    1ab8:	mov	x0, x19
    1abc:	bl	e5c <FSE_decompress+0x110>
    1ac0:	ldrb	w1, [x23, #2]
    1ac4:	ldr	w0, [sp, #96]
    1ac8:	add	w0, w0, w1
    1acc:	str	w0, [sp, #96]
    1ad0:	ldrb	w0, [x23, #3]
    1ad4:	mov	w1, w20
    1ad8:	add	x19, x19, x0
    1adc:	add	x0, sp, #0x58
    1ae0:	bl	d78 <FSE_decompress+0x2c>
    1ae4:	add	x23, x21, x0, lsl #2
    1ae8:	mov	x1, x23
    1aec:	mov	x2, #0x2                   	// #2
    1af0:	mov	x0, x19
    1af4:	bl	e5c <FSE_decompress+0x110>
    1af8:	ldrb	w1, [x23, #2]
    1afc:	ldr	w0, [sp, #96]
    1b00:	add	w0, w0, w1
    1b04:	str	w0, [sp, #96]
    1b08:	ldrb	w0, [x23, #3]
    1b0c:	mov	w1, w20
    1b10:	add	x19, x19, x0
    1b14:	add	x0, sp, #0x58
    1b18:	bl	d78 <FSE_decompress+0x2c>
    1b1c:	add	x23, x21, x0, lsl #2
    1b20:	mov	x1, x23
    1b24:	mov	x2, #0x2                   	// #2
    1b28:	mov	x0, x19
    1b2c:	bl	e5c <FSE_decompress+0x110>
    1b30:	ldrb	w1, [x23, #2]
    1b34:	ldr	w0, [sp, #96]
    1b38:	add	w0, w0, w1
    1b3c:	str	w0, [sp, #96]
    1b40:	ldrb	w0, [x23, #3]
    1b44:	mov	w1, w20
    1b48:	add	x19, x19, x0
    1b4c:	add	x0, sp, #0x58
    1b50:	bl	d78 <FSE_decompress+0x2c>
    1b54:	add	x23, x21, x0, lsl #2
    1b58:	mov	x1, x23
    1b5c:	mov	x0, x19
    1b60:	mov	x2, #0x2                   	// #2
    1b64:	bl	e5c <FSE_decompress+0x110>
    1b68:	ldr	w0, [sp, #96]
    1b6c:	ldrb	w1, [x23, #2]
    1b70:	add	w0, w0, w1
    1b74:	str	w0, [sp, #96]
    1b78:	ldrb	w0, [x23, #3]
    1b7c:	add	x19, x19, x0
    1b80:	b	19fc <FSE_decompress+0xcb0>
    1b84:	mov	w1, w20
    1b88:	add	x0, sp, #0x58
    1b8c:	bl	d78 <FSE_decompress+0x2c>
    1b90:	add	x23, x21, x0, lsl #2
    1b94:	mov	x1, x23
    1b98:	mov	x0, x19
    1b9c:	mov	x2, #0x2                   	// #2
    1ba0:	bl	e5c <FSE_decompress+0x110>
    1ba4:	ldr	w0, [sp, #96]
    1ba8:	ldrb	w1, [x23, #2]
    1bac:	add	w0, w0, w1
    1bb0:	str	w0, [sp, #96]
    1bb4:	ldrb	w0, [x23, #3]
    1bb8:	add	x19, x19, x0
    1bbc:	b	1a14 <FSE_decompress+0xcc8>
    1bc0:	mov	w1, w20
    1bc4:	add	x0, sp, #0x58
    1bc8:	bl	d78 <FSE_decompress+0x2c>
    1bcc:	add	x23, x21, x0, lsl #2
    1bd0:	mov	x1, x23
    1bd4:	mov	x0, x19
    1bd8:	mov	x2, #0x2                   	// #2
    1bdc:	bl	e5c <FSE_decompress+0x110>
    1be0:	ldr	w0, [sp, #96]
    1be4:	ldrb	w1, [x23, #2]
    1be8:	add	w0, w0, w1
    1bec:	str	w0, [sp, #96]
    1bf0:	ldrb	w0, [x23, #3]
    1bf4:	add	x19, x19, x0
    1bf8:	b	1a28 <FSE_decompress+0xcdc>
    1bfc:	ldr	w1, [sp, #96]
    1c00:	cmp	w1, #0x3f
    1c04:	b.hi	1a74 <FSE_decompress+0xd28>  // b.pmore
    1c08:	ldrb	w0, [x21, #2]
    1c0c:	add	w0, w0, w1
    1c10:	cmp	w0, #0x40
    1c14:	b.ls	1a70 <FSE_decompress+0xd24>  // b.plast
    1c18:	mov	w0, #0x40                  	// #64
    1c1c:	b	1a70 <FSE_decompress+0xd24>
    1c20:	stp	x29, x30, [sp, #-304]!
    1c24:	mov	x29, sp
    1c28:	stp	x23, x24, [sp, #48]
    1c2c:	ldrh	w24, [x2, #2]
    1c30:	stp	x27, x28, [sp, #80]
    1c34:	ldrh	w27, [x2]
    1c38:	ldrh	w23, [x2, #4]
    1c3c:	stp	x21, x22, [sp, #32]
    1c40:	sub	x22, x3, #0x6
    1c44:	mov	x21, x0
    1c48:	add	x0, x27, x24
    1c4c:	stp	x19, x20, [sp, #16]
    1c50:	sub	x22, x22, x0
    1c54:	mov	x19, x4
    1c58:	sub	x22, x22, x23
    1c5c:	mov	x0, x4
    1c60:	stp	x25, x26, [sp, #64]
    1c64:	mov	x26, x3
    1c68:	mov	x25, x2
    1c6c:	str	x1, [sp, #112]
    1c70:	bl	e60 <FSE_decompress+0x114>
    1c74:	cmp	x26, x22
    1c78:	b.cc	1fcc <FSE_decompress+0x1280>  // b.lo, b.ul, b.last
    1c7c:	add	x25, x25, #0x6
    1c80:	ubfx	x20, x0, #16, #8
    1c84:	mov	x2, x27
    1c88:	mov	x1, x25
    1c8c:	add	x0, sp, #0x90
    1c90:	bl	e84 <FSE_decompress+0x138>
    1c94:	cmn	x0, #0x78
    1c98:	b.hi	1fd0 <FSE_decompress+0x1284>  // b.pmore
    1c9c:	add	x25, x25, x27
    1ca0:	mov	x2, x24
    1ca4:	mov	x1, x25
    1ca8:	add	x0, sp, #0xb8
    1cac:	bl	e84 <FSE_decompress+0x138>
    1cb0:	cmn	x0, #0x78
    1cb4:	b.hi	1fd0 <FSE_decompress+0x1284>  // b.pmore
    1cb8:	add	x24, x25, x24
    1cbc:	mov	x2, x23
    1cc0:	mov	x1, x24
    1cc4:	add	x0, sp, #0xe0
    1cc8:	bl	e84 <FSE_decompress+0x138>
    1ccc:	cmn	x0, #0x78
    1cd0:	b.hi	1fd0 <FSE_decompress+0x1284>  // b.pmore
    1cd4:	add	x25, sp, #0x108
    1cd8:	mov	x2, x22
    1cdc:	add	x1, x24, x23
    1ce0:	mov	x0, x25
    1ce4:	bl	e84 <FSE_decompress+0x138>
    1ce8:	cmn	x0, #0x78
    1cec:	b.hi	1fd0 <FSE_decompress+0x1284>  // b.pmore
    1cf0:	ldr	x0, [sp, #112]
    1cf4:	add	x19, x19, #0x4
    1cf8:	add	x0, x21, x0
    1cfc:	str	x0, [sp, #104]
    1d00:	ldr	x0, [sp, #112]
    1d04:	add	x26, x0, #0x3
    1d08:	add	x0, sp, #0x90
    1d0c:	bl	d90 <FSE_decompress+0x44>
    1d10:	mov	w7, w0
    1d14:	add	x0, sp, #0xb8
    1d18:	add	x28, x21, x26, lsr #2
    1d1c:	add	x27, x28, x26, lsr #2
    1d20:	mov	x22, x28
    1d24:	bl	d90 <FSE_decompress+0x44>
    1d28:	orr	w7, w7, w0
    1d2c:	add	x0, sp, #0xe0
    1d30:	add	x26, x27, x26, lsr #2
    1d34:	mov	x23, x26
    1d38:	mov	x24, x27
    1d3c:	bl	d90 <FSE_decompress+0x44>
    1d40:	mov	w6, w0
    1d44:	mov	x0, x25
    1d48:	bl	d90 <FSE_decompress+0x44>
    1d4c:	orr	w0, w6, w0
    1d50:	ldr	x1, [sp, #104]
    1d54:	orr	w0, w0, w7
    1d58:	sub	x1, x1, #0x7
    1d5c:	str	x1, [sp, #120]
    1d60:	cmp	w0, #0x0
    1d64:	ldr	x0, [sp, #120]
    1d68:	ccmp	x23, x0, #0x2, eq  // eq = none
    1d6c:	b.cc	1fec <FSE_decompress+0x12a0>  // b.lo, b.ul, b.last
    1d70:	cmp	x28, x21
    1d74:	b.cc	1fcc <FSE_decompress+0x1280>  // b.lo, b.ul, b.last
    1d78:	cmp	x27, x22
    1d7c:	b.cc	1fcc <FSE_decompress+0x1280>  // b.lo, b.ul, b.last
    1d80:	cmp	x26, x24
    1d84:	b.cc	1fcc <FSE_decompress+0x1280>  // b.lo, b.ul, b.last
    1d88:	sub	x0, x28, #0x7
    1d8c:	str	x0, [sp, #128]
    1d90:	add	x0, sp, #0x90
    1d94:	bl	d90 <FSE_decompress+0x44>
    1d98:	cmp	w0, #0x0
    1d9c:	ldr	x0, [sp, #128]
    1da0:	ccmp	x21, x0, #0x2, eq  // eq = none
    1da4:	b.cc	23e4 <FSE_decompress+0x1698>  // b.lo, b.ul, b.last
    1da8:	sub	x0, x28, #0x2
    1dac:	str	x0, [sp, #128]
    1db0:	add	x0, sp, #0x90
    1db4:	bl	d90 <FSE_decompress+0x44>
    1db8:	cmp	w0, #0x0
    1dbc:	ldr	x0, [sp, #128]
    1dc0:	ccmp	x21, x0, #0x2, eq  // eq = none
    1dc4:	b.ls	24d8 <FSE_decompress+0x178c>  // b.plast
    1dc8:	ldr	x0, [sp, #128]
    1dcc:	cmp	x0, x21
    1dd0:	b.cs	2518 <FSE_decompress+0x17cc>  // b.hs, b.nlast
    1dd4:	cmp	x28, x21
    1dd8:	b.ls	1e18 <FSE_decompress+0x10cc>  // b.plast
    1ddc:	mov	w1, w20
    1de0:	add	x0, sp, #0x90
    1de4:	bl	d78 <FSE_decompress+0x2c>
    1de8:	add	x28, x19, x0, lsl #2
    1dec:	mov	x1, x28
    1df0:	mov	x0, x21
    1df4:	mov	x2, #0x1                   	// #1
    1df8:	bl	e5c <FSE_decompress+0x110>
    1dfc:	ldrb	w0, [x28, #3]
    1e00:	cmp	w0, #0x1
    1e04:	b.ne	2558 <FSE_decompress+0x180c>  // b.any
    1e08:	ldrb	w1, [x28, #2]
    1e0c:	ldr	w0, [sp, #152]
    1e10:	add	w0, w0, w1
    1e14:	str	w0, [sp, #152]
    1e18:	sub	x21, x27, #0x7
    1e1c:	add	x0, sp, #0xb8
    1e20:	bl	d90 <FSE_decompress+0x44>
    1e24:	cmp	w0, #0x0
    1e28:	ccmp	x22, x21, #0x2, eq  // eq = none
    1e2c:	b.cc	257c <FSE_decompress+0x1830>  // b.lo, b.ul, b.last
    1e30:	sub	x21, x27, #0x2
    1e34:	add	x0, sp, #0xb8
    1e38:	bl	d90 <FSE_decompress+0x44>
    1e3c:	cmp	w0, #0x0
    1e40:	ccmp	x22, x21, #0x2, eq  // eq = none
    1e44:	b.ls	2660 <FSE_decompress+0x1914>  // b.plast
    1e48:	cmp	x21, x22
    1e4c:	b.cs	269c <FSE_decompress+0x1950>  // b.hs, b.nlast
    1e50:	cmp	x27, x22
    1e54:	b.ls	1e94 <FSE_decompress+0x1148>  // b.plast
    1e58:	mov	w1, w20
    1e5c:	add	x0, sp, #0xb8
    1e60:	bl	d78 <FSE_decompress+0x2c>
    1e64:	add	x21, x19, x0, lsl #2
    1e68:	mov	x1, x21
    1e6c:	mov	x0, x22
    1e70:	mov	x2, #0x1                   	// #1
    1e74:	bl	e5c <FSE_decompress+0x110>
    1e78:	ldrb	w0, [x21, #3]
    1e7c:	cmp	w0, #0x1
    1e80:	b.ne	26d8 <FSE_decompress+0x198c>  // b.any
    1e84:	ldrb	w1, [x21, #2]
    1e88:	ldr	w0, [sp, #192]
    1e8c:	add	w0, w0, w1
    1e90:	str	w0, [sp, #192]
    1e94:	sub	x21, x26, #0x7
    1e98:	add	x0, sp, #0xe0
    1e9c:	bl	d90 <FSE_decompress+0x44>
    1ea0:	cmp	w0, #0x0
    1ea4:	ccmp	x24, x21, #0x2, eq  // eq = none
    1ea8:	b.cc	26fc <FSE_decompress+0x19b0>  // b.lo, b.ul, b.last
    1eac:	sub	x21, x26, #0x2
    1eb0:	add	x0, sp, #0xe0
    1eb4:	bl	d90 <FSE_decompress+0x44>
    1eb8:	cmp	w0, #0x0
    1ebc:	ccmp	x24, x21, #0x2, eq  // eq = none
    1ec0:	b.ls	27e0 <FSE_decompress+0x1a94>  // b.plast
    1ec4:	cmp	x21, x24
    1ec8:	b.cs	281c <FSE_decompress+0x1ad0>  // b.hs, b.nlast
    1ecc:	cmp	x26, x24
    1ed0:	b.ls	1f10 <FSE_decompress+0x11c4>  // b.plast
    1ed4:	mov	w1, w20
    1ed8:	add	x0, sp, #0xe0
    1edc:	bl	d78 <FSE_decompress+0x2c>
    1ee0:	add	x21, x19, x0, lsl #2
    1ee4:	mov	x1, x21
    1ee8:	mov	x0, x24
    1eec:	mov	x2, #0x1                   	// #1
    1ef0:	bl	e5c <FSE_decompress+0x110>
    1ef4:	ldrb	w0, [x21, #3]
    1ef8:	cmp	w0, #0x1
    1efc:	b.ne	2858 <FSE_decompress+0x1b0c>  // b.any
    1f00:	ldrb	w1, [x21, #2]
    1f04:	ldr	w0, [sp, #232]
    1f08:	add	w0, w0, w1
    1f0c:	str	w0, [sp, #232]
    1f10:	mov	x0, x25
    1f14:	bl	d90 <FSE_decompress+0x44>
    1f18:	cmp	w0, #0x0
    1f1c:	ldr	x0, [sp, #120]
    1f20:	ccmp	x0, x23, #0x0, eq  // eq = none
    1f24:	b.hi	287c <FSE_decompress+0x1b30>  // b.pmore
    1f28:	ldr	x0, [sp, #104]
    1f2c:	sub	x22, x0, #0x2
    1f30:	mov	x0, x25
    1f34:	bl	d90 <FSE_decompress+0x44>
    1f38:	cmp	w0, #0x0
    1f3c:	ccmp	x23, x22, #0x2, eq  // eq = none
    1f40:	b.ls	2960 <FSE_decompress+0x1c14>  // b.plast
    1f44:	cmp	x22, x23
    1f48:	b.cs	299c <FSE_decompress+0x1c50>  // b.hs, b.nlast
    1f4c:	ldr	x0, [sp, #104]
    1f50:	cmp	x0, x23
    1f54:	b.ls	1f94 <FSE_decompress+0x1248>  // b.plast
    1f58:	mov	w1, w20
    1f5c:	mov	x0, x25
    1f60:	bl	d78 <FSE_decompress+0x2c>
    1f64:	add	x19, x19, x0, lsl #2
    1f68:	mov	x1, x19
    1f6c:	mov	x0, x23
    1f70:	mov	x2, #0x1                   	// #1
    1f74:	bl	e5c <FSE_decompress+0x110>
    1f78:	ldrb	w0, [x19, #3]
    1f7c:	cmp	w0, #0x1
    1f80:	b.ne	29d8 <FSE_decompress+0x1c8c>  // b.any
    1f84:	ldrb	w1, [x19, #2]
    1f88:	ldr	w0, [sp, #272]
    1f8c:	add	w0, w0, w1
    1f90:	str	w0, [sp, #272]
    1f94:	add	x0, sp, #0x90
    1f98:	bl	e38 <FSE_decompress+0xec>
    1f9c:	mov	w3, w0
    1fa0:	add	x0, sp, #0xb8
    1fa4:	bl	e38 <FSE_decompress+0xec>
    1fa8:	and	w3, w3, w0
    1fac:	add	x0, sp, #0xe0
    1fb0:	bl	e38 <FSE_decompress+0xec>
    1fb4:	mov	w4, w0
    1fb8:	mov	x0, x25
    1fbc:	bl	e38 <FSE_decompress+0xec>
    1fc0:	and	w4, w4, w0
    1fc4:	tst	w4, w3
    1fc8:	b.ne	29fc <FSE_decompress+0x1cb0>  // b.any
    1fcc:	mov	x0, #0xffffffffffffffec    	// #-20
    1fd0:	ldp	x19, x20, [sp, #16]
    1fd4:	ldp	x21, x22, [sp, #32]
    1fd8:	ldp	x23, x24, [sp, #48]
    1fdc:	ldp	x25, x26, [sp, #64]
    1fe0:	ldp	x27, x28, [sp, #80]
    1fe4:	ldp	x29, x30, [sp], #304
    1fe8:	ret
    1fec:	mov	w1, w20
    1ff0:	add	x0, sp, #0x90
    1ff4:	bl	d78 <FSE_decompress+0x2c>
    1ff8:	add	x1, x19, x0, lsl #2
    1ffc:	mov	x2, #0x2                   	// #2
    2000:	mov	x0, x21
    2004:	str	x1, [sp, #128]
    2008:	bl	e5c <FSE_decompress+0x110>
    200c:	ldr	x1, [sp, #128]
    2010:	ldr	w0, [sp, #152]
    2014:	ldrb	w2, [x1, #2]
    2018:	add	w0, w0, w2
    201c:	str	w0, [sp, #152]
    2020:	ldrb	w0, [x1, #3]
    2024:	mov	w1, w20
    2028:	add	x21, x21, x0
    202c:	add	x0, sp, #0xb8
    2030:	bl	d78 <FSE_decompress+0x2c>
    2034:	add	x1, x19, x0, lsl #2
    2038:	mov	x2, #0x2                   	// #2
    203c:	mov	x0, x22
    2040:	str	x1, [sp, #128]
    2044:	bl	e5c <FSE_decompress+0x110>
    2048:	ldr	x1, [sp, #128]
    204c:	ldr	w0, [sp, #192]
    2050:	ldrb	w2, [x1, #2]
    2054:	add	w0, w0, w2
    2058:	str	w0, [sp, #192]
    205c:	ldrb	w0, [x1, #3]
    2060:	mov	w1, w20
    2064:	add	x22, x22, x0
    2068:	add	x0, sp, #0xe0
    206c:	bl	d78 <FSE_decompress+0x2c>
    2070:	add	x1, x19, x0, lsl #2
    2074:	mov	x2, #0x2                   	// #2
    2078:	mov	x0, x24
    207c:	str	x1, [sp, #128]
    2080:	bl	e5c <FSE_decompress+0x110>
    2084:	ldr	x1, [sp, #128]
    2088:	ldr	w0, [sp, #232]
    208c:	ldrb	w2, [x1, #2]
    2090:	add	w0, w0, w2
    2094:	str	w0, [sp, #232]
    2098:	ldrb	w0, [x1, #3]
    209c:	mov	w1, w20
    20a0:	add	x24, x24, x0
    20a4:	mov	x0, x25
    20a8:	bl	d78 <FSE_decompress+0x2c>
    20ac:	add	x1, x19, x0, lsl #2
    20b0:	mov	x2, #0x2                   	// #2
    20b4:	mov	x0, x23
    20b8:	str	x1, [sp, #128]
    20bc:	bl	e5c <FSE_decompress+0x110>
    20c0:	ldr	x1, [sp, #128]
    20c4:	ldr	w0, [sp, #272]
    20c8:	ldrb	w2, [x1, #2]
    20cc:	add	w0, w0, w2
    20d0:	str	w0, [sp, #272]
    20d4:	ldrb	w0, [x1, #3]
    20d8:	mov	w1, w20
    20dc:	add	x23, x23, x0
    20e0:	add	x0, sp, #0x90
    20e4:	bl	d78 <FSE_decompress+0x2c>
    20e8:	add	x1, x19, x0, lsl #2
    20ec:	mov	x2, #0x2                   	// #2
    20f0:	mov	x0, x21
    20f4:	str	x1, [sp, #128]
    20f8:	bl	e5c <FSE_decompress+0x110>
    20fc:	ldr	x1, [sp, #128]
    2100:	ldr	w0, [sp, #152]
    2104:	ldrb	w2, [x1, #2]
    2108:	add	w0, w0, w2
    210c:	str	w0, [sp, #152]
    2110:	ldrb	w0, [x1, #3]
    2114:	mov	w1, w20
    2118:	add	x21, x21, x0
    211c:	add	x0, sp, #0xb8
    2120:	bl	d78 <FSE_decompress+0x2c>
    2124:	add	x1, x19, x0, lsl #2
    2128:	mov	x2, #0x2                   	// #2
    212c:	mov	x0, x22
    2130:	str	x1, [sp, #128]
    2134:	bl	e5c <FSE_decompress+0x110>
    2138:	ldr	x1, [sp, #128]
    213c:	ldr	w0, [sp, #192]
    2140:	ldrb	w2, [x1, #2]
    2144:	add	w0, w0, w2
    2148:	str	w0, [sp, #192]
    214c:	ldrb	w0, [x1, #3]
    2150:	mov	w1, w20
    2154:	add	x22, x22, x0
    2158:	add	x0, sp, #0xe0
    215c:	bl	d78 <FSE_decompress+0x2c>
    2160:	add	x1, x19, x0, lsl #2
    2164:	mov	x2, #0x2                   	// #2
    2168:	mov	x0, x24
    216c:	str	x1, [sp, #128]
    2170:	bl	e5c <FSE_decompress+0x110>
    2174:	ldr	x1, [sp, #128]
    2178:	ldr	w0, [sp, #232]
    217c:	ldrb	w2, [x1, #2]
    2180:	add	w0, w0, w2
    2184:	str	w0, [sp, #232]
    2188:	ldrb	w0, [x1, #3]
    218c:	mov	w1, w20
    2190:	add	x24, x24, x0
    2194:	mov	x0, x25
    2198:	bl	d78 <FSE_decompress+0x2c>
    219c:	add	x1, x19, x0, lsl #2
    21a0:	mov	x2, #0x2                   	// #2
    21a4:	mov	x0, x23
    21a8:	str	x1, [sp, #128]
    21ac:	bl	e5c <FSE_decompress+0x110>
    21b0:	ldr	x1, [sp, #128]
    21b4:	ldr	w0, [sp, #272]
    21b8:	ldrb	w2, [x1, #2]
    21bc:	add	w0, w0, w2
    21c0:	str	w0, [sp, #272]
    21c4:	ldrb	w0, [x1, #3]
    21c8:	mov	w1, w20
    21cc:	add	x23, x23, x0
    21d0:	add	x0, sp, #0x90
    21d4:	bl	d78 <FSE_decompress+0x2c>
    21d8:	add	x1, x19, x0, lsl #2
    21dc:	mov	x2, #0x2                   	// #2
    21e0:	mov	x0, x21
    21e4:	str	x1, [sp, #128]
    21e8:	bl	e5c <FSE_decompress+0x110>
    21ec:	ldr	x1, [sp, #128]
    21f0:	ldr	w0, [sp, #152]
    21f4:	ldrb	w2, [x1, #2]
    21f8:	add	w0, w0, w2
    21fc:	str	w0, [sp, #152]
    2200:	ldrb	w0, [x1, #3]
    2204:	mov	w1, w20
    2208:	add	x21, x21, x0
    220c:	add	x0, sp, #0xb8
    2210:	bl	d78 <FSE_decompress+0x2c>
    2214:	add	x1, x19, x0, lsl #2
    2218:	mov	x2, #0x2                   	// #2
    221c:	mov	x0, x22
    2220:	str	x1, [sp, #128]
    2224:	bl	e5c <FSE_decompress+0x110>
    2228:	ldr	x1, [sp, #128]
    222c:	ldr	w0, [sp, #192]
    2230:	ldrb	w2, [x1, #2]
    2234:	add	w0, w0, w2
    2238:	str	w0, [sp, #192]
    223c:	ldrb	w0, [x1, #3]
    2240:	mov	w1, w20
    2244:	add	x22, x22, x0
    2248:	add	x0, sp, #0xe0
    224c:	bl	d78 <FSE_decompress+0x2c>
    2250:	add	x1, x19, x0, lsl #2
    2254:	mov	x2, #0x2                   	// #2
    2258:	mov	x0, x24
    225c:	str	x1, [sp, #128]
    2260:	bl	e5c <FSE_decompress+0x110>
    2264:	ldr	x1, [sp, #128]
    2268:	ldr	w0, [sp, #232]
    226c:	ldrb	w2, [x1, #2]
    2270:	add	w0, w0, w2
    2274:	str	w0, [sp, #232]
    2278:	ldrb	w0, [x1, #3]
    227c:	mov	w1, w20
    2280:	add	x24, x24, x0
    2284:	mov	x0, x25
    2288:	bl	d78 <FSE_decompress+0x2c>
    228c:	add	x1, x19, x0, lsl #2
    2290:	mov	x2, #0x2                   	// #2
    2294:	mov	x0, x23
    2298:	str	x1, [sp, #128]
    229c:	bl	e5c <FSE_decompress+0x110>
    22a0:	ldr	x1, [sp, #128]
    22a4:	ldr	w0, [sp, #272]
    22a8:	ldrb	w2, [x1, #2]
    22ac:	add	w0, w0, w2
    22b0:	str	w0, [sp, #272]
    22b4:	ldrb	w0, [x1, #3]
    22b8:	mov	w1, w20
    22bc:	add	x23, x23, x0
    22c0:	add	x0, sp, #0x90
    22c4:	bl	d78 <FSE_decompress+0x2c>
    22c8:	add	x1, x19, x0, lsl #2
    22cc:	mov	x2, #0x2                   	// #2
    22d0:	mov	x0, x21
    22d4:	str	x1, [sp, #128]
    22d8:	bl	e5c <FSE_decompress+0x110>
    22dc:	ldr	x1, [sp, #128]
    22e0:	ldr	w0, [sp, #152]
    22e4:	ldrb	w2, [x1, #2]
    22e8:	add	w0, w0, w2
    22ec:	str	w0, [sp, #152]
    22f0:	ldrb	w0, [x1, #3]
    22f4:	mov	w1, w20
    22f8:	add	x21, x21, x0
    22fc:	add	x0, sp, #0xb8
    2300:	bl	d78 <FSE_decompress+0x2c>
    2304:	add	x1, x19, x0, lsl #2
    2308:	mov	x2, #0x2                   	// #2
    230c:	mov	x0, x22
    2310:	str	x1, [sp, #128]
    2314:	bl	e5c <FSE_decompress+0x110>
    2318:	ldr	x1, [sp, #128]
    231c:	ldr	w0, [sp, #192]
    2320:	ldrb	w2, [x1, #2]
    2324:	add	w0, w0, w2
    2328:	str	w0, [sp, #192]
    232c:	ldrb	w0, [x1, #3]
    2330:	mov	w1, w20
    2334:	add	x22, x22, x0
    2338:	add	x0, sp, #0xe0
    233c:	bl	d78 <FSE_decompress+0x2c>
    2340:	add	x1, x19, x0, lsl #2
    2344:	mov	x2, #0x2                   	// #2
    2348:	mov	x0, x24
    234c:	str	x1, [sp, #128]
    2350:	bl	e5c <FSE_decompress+0x110>
    2354:	ldr	x1, [sp, #128]
    2358:	ldr	w0, [sp, #232]
    235c:	ldrb	w2, [x1, #2]
    2360:	add	w0, w0, w2
    2364:	str	w0, [sp, #232]
    2368:	ldrb	w0, [x1, #3]
    236c:	mov	w1, w20
    2370:	add	x24, x24, x0
    2374:	mov	x0, x25
    2378:	bl	d78 <FSE_decompress+0x2c>
    237c:	add	x1, x19, x0, lsl #2
    2380:	mov	x2, #0x2                   	// #2
    2384:	mov	x0, x23
    2388:	str	x1, [sp, #128]
    238c:	bl	e5c <FSE_decompress+0x110>
    2390:	ldr	x1, [sp, #128]
    2394:	ldr	w0, [sp, #272]
    2398:	ldrb	w2, [x1, #2]
    239c:	add	w0, w0, w2
    23a0:	str	w0, [sp, #272]
    23a4:	ldrb	w0, [x1, #3]
    23a8:	add	x23, x23, x0
    23ac:	add	x0, sp, #0x90
    23b0:	bl	d90 <FSE_decompress+0x44>
    23b4:	mov	w7, w0
    23b8:	add	x0, sp, #0xb8
    23bc:	bl	d90 <FSE_decompress+0x44>
    23c0:	orr	w7, w7, w0
    23c4:	add	x0, sp, #0xe0
    23c8:	bl	d90 <FSE_decompress+0x44>
    23cc:	mov	w6, w0
    23d0:	mov	x0, x25
    23d4:	bl	d90 <FSE_decompress+0x44>
    23d8:	orr	w0, w6, w0
    23dc:	orr	w0, w0, w7
    23e0:	b	1d60 <FSE_decompress+0x1014>
    23e4:	mov	w1, w20
    23e8:	add	x0, sp, #0x90
    23ec:	bl	d78 <FSE_decompress+0x2c>
    23f0:	add	x1, x19, x0, lsl #2
    23f4:	mov	x2, #0x2                   	// #2
    23f8:	mov	x0, x21
    23fc:	str	x1, [sp, #136]
    2400:	bl	e5c <FSE_decompress+0x110>
    2404:	ldr	x1, [sp, #136]
    2408:	ldr	w0, [sp, #152]
    240c:	ldrb	w2, [x1, #2]
    2410:	add	w0, w0, w2
    2414:	str	w0, [sp, #152]
    2418:	ldrb	w0, [x1, #3]
    241c:	mov	w1, w20
    2420:	add	x21, x21, x0
    2424:	add	x0, sp, #0x90
    2428:	bl	d78 <FSE_decompress+0x2c>
    242c:	add	x1, x19, x0, lsl #2
    2430:	mov	x2, #0x2                   	// #2
    2434:	mov	x0, x21
    2438:	str	x1, [sp, #136]
    243c:	bl	e5c <FSE_decompress+0x110>
    2440:	ldr	x1, [sp, #136]
    2444:	ldr	w0, [sp, #152]
    2448:	ldrb	w2, [x1, #2]
    244c:	add	w0, w0, w2
    2450:	str	w0, [sp, #152]
    2454:	ldrb	w0, [x1, #3]
    2458:	mov	w1, w20
    245c:	add	x21, x21, x0
    2460:	add	x0, sp, #0x90
    2464:	bl	d78 <FSE_decompress+0x2c>
    2468:	add	x1, x19, x0, lsl #2
    246c:	mov	x2, #0x2                   	// #2
    2470:	mov	x0, x21
    2474:	str	x1, [sp, #136]
    2478:	bl	e5c <FSE_decompress+0x110>
    247c:	ldr	x1, [sp, #136]
    2480:	ldr	w0, [sp, #152]
    2484:	ldrb	w2, [x1, #2]
    2488:	add	w0, w0, w2
    248c:	str	w0, [sp, #152]
    2490:	ldrb	w0, [x1, #3]
    2494:	mov	w1, w20
    2498:	add	x21, x21, x0
    249c:	add	x0, sp, #0x90
    24a0:	bl	d78 <FSE_decompress+0x2c>
    24a4:	add	x1, x19, x0, lsl #2
    24a8:	mov	x2, #0x2                   	// #2
    24ac:	mov	x0, x21
    24b0:	str	x1, [sp, #136]
    24b4:	bl	e5c <FSE_decompress+0x110>
    24b8:	ldr	x1, [sp, #136]
    24bc:	ldr	w0, [sp, #152]
    24c0:	ldrb	w2, [x1, #2]
    24c4:	add	w0, w0, w2
    24c8:	str	w0, [sp, #152]
    24cc:	ldrb	w0, [x1, #3]
    24d0:	add	x21, x21, x0
    24d4:	b	1d90 <FSE_decompress+0x1044>
    24d8:	mov	w1, w20
    24dc:	add	x0, sp, #0x90
    24e0:	bl	d78 <FSE_decompress+0x2c>
    24e4:	add	x1, x19, x0, lsl #2
    24e8:	mov	x2, #0x2                   	// #2
    24ec:	mov	x0, x21
    24f0:	str	x1, [sp, #136]
    24f4:	bl	e5c <FSE_decompress+0x110>
    24f8:	ldr	x1, [sp, #136]
    24fc:	ldr	w0, [sp, #152]
    2500:	ldrb	w2, [x1, #2]
    2504:	add	w0, w0, w2
    2508:	str	w0, [sp, #152]
    250c:	ldrb	w0, [x1, #3]
    2510:	add	x21, x21, x0
    2514:	b	1db0 <FSE_decompress+0x1064>
    2518:	mov	w1, w20
    251c:	add	x0, sp, #0x90
    2520:	bl	d78 <FSE_decompress+0x2c>
    2524:	add	x1, x19, x0, lsl #2
    2528:	mov	x2, #0x2                   	// #2
    252c:	mov	x0, x21
    2530:	str	x1, [sp, #136]
    2534:	bl	e5c <FSE_decompress+0x110>
    2538:	ldr	x1, [sp, #136]
    253c:	ldr	w0, [sp, #152]
    2540:	ldrb	w2, [x1, #2]
    2544:	add	w0, w0, w2
    2548:	str	w0, [sp, #152]
    254c:	ldrb	w0, [x1, #3]
    2550:	add	x21, x21, x0
    2554:	b	1dc8 <FSE_decompress+0x107c>
    2558:	ldr	w1, [sp, #152]
    255c:	cmp	w1, #0x3f
    2560:	b.hi	1e18 <FSE_decompress+0x10cc>  // b.pmore
    2564:	ldrb	w0, [x28, #2]
    2568:	add	w0, w0, w1
    256c:	cmp	w0, #0x40
    2570:	b.ls	1e14 <FSE_decompress+0x10c8>  // b.plast
    2574:	mov	w0, #0x40                  	// #64
    2578:	b	1e14 <FSE_decompress+0x10c8>
    257c:	mov	w1, w20
    2580:	add	x0, sp, #0xb8
    2584:	bl	d78 <FSE_decompress+0x2c>
    2588:	add	x28, x19, x0, lsl #2
    258c:	mov	x1, x28
    2590:	mov	x2, #0x2                   	// #2
    2594:	mov	x0, x22
    2598:	bl	e5c <FSE_decompress+0x110>
    259c:	ldrb	w1, [x28, #2]
    25a0:	ldr	w0, [sp, #192]
    25a4:	add	w0, w0, w1
    25a8:	str	w0, [sp, #192]
    25ac:	ldrb	w0, [x28, #3]
    25b0:	mov	w1, w20
    25b4:	add	x22, x22, x0
    25b8:	add	x0, sp, #0xb8
    25bc:	bl	d78 <FSE_decompress+0x2c>
    25c0:	add	x28, x19, x0, lsl #2
    25c4:	mov	x1, x28
    25c8:	mov	x2, #0x2                   	// #2
    25cc:	mov	x0, x22
    25d0:	bl	e5c <FSE_decompress+0x110>
    25d4:	ldrb	w1, [x28, #2]
    25d8:	ldr	w0, [sp, #192]
    25dc:	add	w0, w0, w1
    25e0:	str	w0, [sp, #192]
    25e4:	ldrb	w0, [x28, #3]
    25e8:	mov	w1, w20
    25ec:	add	x22, x22, x0
    25f0:	add	x0, sp, #0xb8
    25f4:	bl	d78 <FSE_decompress+0x2c>
    25f8:	add	x28, x19, x0, lsl #2
    25fc:	mov	x1, x28
    2600:	mov	x2, #0x2                   	// #2
    2604:	mov	x0, x22
    2608:	bl	e5c <FSE_decompress+0x110>
    260c:	ldrb	w1, [x28, #2]
    2610:	ldr	w0, [sp, #192]
    2614:	add	w0, w0, w1
    2618:	str	w0, [sp, #192]
    261c:	ldrb	w0, [x28, #3]
    2620:	mov	w1, w20
    2624:	add	x22, x22, x0
    2628:	add	x0, sp, #0xb8
    262c:	bl	d78 <FSE_decompress+0x2c>
    2630:	add	x28, x19, x0, lsl #2
    2634:	mov	x1, x28
    2638:	mov	x0, x22
    263c:	mov	x2, #0x2                   	// #2
    2640:	bl	e5c <FSE_decompress+0x110>
    2644:	ldr	w0, [sp, #192]
    2648:	ldrb	w1, [x28, #2]
    264c:	add	w0, w0, w1
    2650:	str	w0, [sp, #192]
    2654:	ldrb	w0, [x28, #3]
    2658:	add	x22, x22, x0
    265c:	b	1e1c <FSE_decompress+0x10d0>
    2660:	mov	w1, w20
    2664:	add	x0, sp, #0xb8
    2668:	bl	d78 <FSE_decompress+0x2c>
    266c:	add	x28, x19, x0, lsl #2
    2670:	mov	x1, x28
    2674:	mov	x0, x22
    2678:	mov	x2, #0x2                   	// #2
    267c:	bl	e5c <FSE_decompress+0x110>
    2680:	ldr	w0, [sp, #192]
    2684:	ldrb	w1, [x28, #2]
    2688:	add	w0, w0, w1
    268c:	str	w0, [sp, #192]
    2690:	ldrb	w0, [x28, #3]
    2694:	add	x22, x22, x0
    2698:	b	1e34 <FSE_decompress+0x10e8>
    269c:	mov	w1, w20
    26a0:	add	x0, sp, #0xb8
    26a4:	bl	d78 <FSE_decompress+0x2c>
    26a8:	add	x28, x19, x0, lsl #2
    26ac:	mov	x1, x28
    26b0:	mov	x0, x22
    26b4:	mov	x2, #0x2                   	// #2
    26b8:	bl	e5c <FSE_decompress+0x110>
    26bc:	ldr	w0, [sp, #192]
    26c0:	ldrb	w1, [x28, #2]
    26c4:	add	w0, w0, w1
    26c8:	str	w0, [sp, #192]
    26cc:	ldrb	w0, [x28, #3]
    26d0:	add	x22, x22, x0
    26d4:	b	1e48 <FSE_decompress+0x10fc>
    26d8:	ldr	w1, [sp, #192]
    26dc:	cmp	w1, #0x3f
    26e0:	b.hi	1e94 <FSE_decompress+0x1148>  // b.pmore
    26e4:	ldrb	w0, [x21, #2]
    26e8:	add	w0, w0, w1
    26ec:	cmp	w0, #0x40
    26f0:	b.ls	1e90 <FSE_decompress+0x1144>  // b.plast
    26f4:	mov	w0, #0x40                  	// #64
    26f8:	b	1e90 <FSE_decompress+0x1144>
    26fc:	mov	w1, w20
    2700:	add	x0, sp, #0xe0
    2704:	bl	d78 <FSE_decompress+0x2c>
    2708:	add	x22, x19, x0, lsl #2
    270c:	mov	x1, x22
    2710:	mov	x2, #0x2                   	// #2
    2714:	mov	x0, x24
    2718:	bl	e5c <FSE_decompress+0x110>
    271c:	ldrb	w1, [x22, #2]
    2720:	ldr	w0, [sp, #232]
    2724:	ldrb	w22, [x22, #3]
    2728:	add	w0, w0, w1
    272c:	mov	w1, w20
    2730:	add	x24, x24, x22
    2734:	str	w0, [sp, #232]
    2738:	add	x0, sp, #0xe0
    273c:	bl	d78 <FSE_decompress+0x2c>
    2740:	add	x22, x19, x0, lsl #2
    2744:	mov	x2, #0x2                   	// #2
    2748:	mov	x1, x22
    274c:	mov	x0, x24
    2750:	bl	e5c <FSE_decompress+0x110>
    2754:	ldrb	w1, [x22, #2]
    2758:	ldr	w0, [sp, #232]
    275c:	ldrb	w22, [x22, #3]
    2760:	add	w0, w0, w1
    2764:	mov	w1, w20
    2768:	add	x24, x24, x22
    276c:	str	w0, [sp, #232]
    2770:	add	x0, sp, #0xe0
    2774:	bl	d78 <FSE_decompress+0x2c>
    2778:	add	x22, x19, x0, lsl #2
    277c:	mov	x2, #0x2                   	// #2
    2780:	mov	x1, x22
    2784:	mov	x0, x24
    2788:	bl	e5c <FSE_decompress+0x110>
    278c:	ldrb	w1, [x22, #2]
    2790:	ldr	w0, [sp, #232]
    2794:	ldrb	w22, [x22, #3]
    2798:	add	w0, w0, w1
    279c:	mov	w1, w20
    27a0:	add	x22, x24, x22
    27a4:	str	w0, [sp, #232]
    27a8:	add	x0, sp, #0xe0
    27ac:	bl	d78 <FSE_decompress+0x2c>
    27b0:	add	x24, x19, x0, lsl #2
    27b4:	mov	x2, #0x2                   	// #2
    27b8:	mov	x1, x24
    27bc:	mov	x0, x22
    27c0:	bl	e5c <FSE_decompress+0x110>
    27c4:	ldrb	w1, [x24, #2]
    27c8:	ldr	w0, [sp, #232]
    27cc:	ldrb	w24, [x24, #3]
    27d0:	add	w0, w0, w1
    27d4:	str	w0, [sp, #232]
    27d8:	add	x24, x22, x24
    27dc:	b	1e98 <FSE_decompress+0x114c>
    27e0:	mov	w1, w20
    27e4:	add	x0, sp, #0xe0
    27e8:	bl	d78 <FSE_decompress+0x2c>
    27ec:	add	x22, x19, x0, lsl #2
    27f0:	mov	x1, x22
    27f4:	mov	x0, x24
    27f8:	mov	x2, #0x2                   	// #2
    27fc:	bl	e5c <FSE_decompress+0x110>
    2800:	ldr	w0, [sp, #232]
    2804:	ldrb	w1, [x22, #2]
    2808:	add	w0, w0, w1
    280c:	str	w0, [sp, #232]
    2810:	ldrb	w0, [x22, #3]
    2814:	add	x24, x24, x0
    2818:	b	1eb0 <FSE_decompress+0x1164>
    281c:	mov	w1, w20
    2820:	add	x0, sp, #0xe0
    2824:	bl	d78 <FSE_decompress+0x2c>
    2828:	add	x22, x19, x0, lsl #2
    282c:	mov	x1, x22
    2830:	mov	x0, x24
    2834:	mov	x2, #0x2                   	// #2
    2838:	bl	e5c <FSE_decompress+0x110>
    283c:	ldr	w0, [sp, #232]
    2840:	ldrb	w1, [x22, #2]
    2844:	add	w0, w0, w1
    2848:	str	w0, [sp, #232]
    284c:	ldrb	w0, [x22, #3]
    2850:	add	x24, x24, x0
    2854:	b	1ec4 <FSE_decompress+0x1178>
    2858:	ldr	w1, [sp, #232]
    285c:	cmp	w1, #0x3f
    2860:	b.hi	1f10 <FSE_decompress+0x11c4>  // b.pmore
    2864:	ldrb	w0, [x21, #2]
    2868:	add	w0, w0, w1
    286c:	cmp	w0, #0x40
    2870:	b.ls	1f0c <FSE_decompress+0x11c0>  // b.plast
    2874:	mov	w0, #0x40                  	// #64
    2878:	b	1f0c <FSE_decompress+0x11c0>
    287c:	mov	w1, w20
    2880:	mov	x0, x25
    2884:	bl	d78 <FSE_decompress+0x2c>
    2888:	add	x21, x19, x0, lsl #2
    288c:	mov	x1, x21
    2890:	mov	x2, #0x2                   	// #2
    2894:	mov	x0, x23
    2898:	bl	e5c <FSE_decompress+0x110>
    289c:	ldrb	w1, [x21, #2]
    28a0:	ldr	w0, [sp, #272]
    28a4:	ldrb	w21, [x21, #3]
    28a8:	add	w0, w0, w1
    28ac:	mov	w1, w20
    28b0:	str	w0, [sp, #272]
    28b4:	mov	x0, x25
    28b8:	bl	d78 <FSE_decompress+0x2c>
    28bc:	add	x22, x19, x0, lsl #2
    28c0:	add	x23, x23, x21
    28c4:	mov	x1, x22
    28c8:	mov	x2, #0x2                   	// #2
    28cc:	mov	x0, x23
    28d0:	bl	e5c <FSE_decompress+0x110>
    28d4:	ldrb	w21, [x22, #3]
    28d8:	ldrb	w1, [x22, #2]
    28dc:	ldr	w0, [sp, #272]
    28e0:	add	x23, x23, x21
    28e4:	add	w0, w0, w1
    28e8:	mov	w1, w20
    28ec:	str	w0, [sp, #272]
    28f0:	mov	x0, x25
    28f4:	bl	d78 <FSE_decompress+0x2c>
    28f8:	add	x21, x19, x0, lsl #2
    28fc:	mov	x1, x21
    2900:	mov	x2, #0x2                   	// #2
    2904:	mov	x0, x23
    2908:	bl	e5c <FSE_decompress+0x110>
    290c:	ldrb	w1, [x21, #2]
    2910:	ldr	w0, [sp, #272]
    2914:	ldrb	w21, [x21, #3]
    2918:	add	w0, w0, w1
    291c:	mov	w1, w20
    2920:	str	w0, [sp, #272]
    2924:	mov	x0, x25
    2928:	bl	d78 <FSE_decompress+0x2c>
    292c:	add	x22, x19, x0, lsl #2
    2930:	add	x21, x23, x21
    2934:	mov	x1, x22
    2938:	mov	x0, x21
    293c:	mov	x2, #0x2                   	// #2
    2940:	bl	e5c <FSE_decompress+0x110>
    2944:	ldrb	w23, [x22, #3]
    2948:	ldr	w0, [sp, #272]
    294c:	ldrb	w1, [x22, #2]
    2950:	add	x23, x21, x23
    2954:	add	w0, w0, w1
    2958:	str	w0, [sp, #272]
    295c:	b	1f10 <FSE_decompress+0x11c4>
    2960:	mov	w1, w20
    2964:	mov	x0, x25
    2968:	bl	d78 <FSE_decompress+0x2c>
    296c:	add	x21, x19, x0, lsl #2
    2970:	mov	x1, x21
    2974:	mov	x0, x23
    2978:	mov	x2, #0x2                   	// #2
    297c:	bl	e5c <FSE_decompress+0x110>
    2980:	ldr	w0, [sp, #272]
    2984:	ldrb	w1, [x21, #2]
    2988:	add	w0, w0, w1
    298c:	str	w0, [sp, #272]
    2990:	ldrb	w0, [x21, #3]
    2994:	add	x23, x23, x0
    2998:	b	1f30 <FSE_decompress+0x11e4>
    299c:	mov	w1, w20
    29a0:	mov	x0, x25
    29a4:	bl	d78 <FSE_decompress+0x2c>
    29a8:	add	x21, x19, x0, lsl #2
    29ac:	mov	x1, x21
    29b0:	mov	x0, x23
    29b4:	mov	x2, #0x2                   	// #2
    29b8:	bl	e5c <FSE_decompress+0x110>
    29bc:	ldr	w0, [sp, #272]
    29c0:	ldrb	w1, [x21, #2]
    29c4:	add	w0, w0, w1
    29c8:	str	w0, [sp, #272]
    29cc:	ldrb	w0, [x21, #3]
    29d0:	add	x23, x23, x0
    29d4:	b	1f44 <FSE_decompress+0x11f8>
    29d8:	ldr	w1, [sp, #272]
    29dc:	cmp	w1, #0x3f
    29e0:	b.hi	1f94 <FSE_decompress+0x1248>  // b.pmore
    29e4:	ldrb	w0, [x19, #2]
    29e8:	add	w0, w0, w1
    29ec:	cmp	w0, #0x40
    29f0:	b.ls	1f90 <FSE_decompress+0x1244>  // b.plast
    29f4:	mov	w0, #0x40                  	// #64
    29f8:	b	1f90 <FSE_decompress+0x1244>
    29fc:	ldr	x0, [sp, #112]
    2a00:	b	1fd0 <FSE_decompress+0x1284>

0000000000002a04 <HUF_readDTableX1_wksp>:
    2a04:	stp	x29, x30, [sp, #-64]!
    2a08:	cmp	x4, #0x13f
    2a0c:	mov	x29, sp
    2a10:	stp	x19, x20, [sp, #16]
    2a14:	stp	x21, x22, [sp, #32]
    2a18:	stp	wzr, wzr, [sp, #56]
    2a1c:	b.ls	2a78 <HUF_readDTableX1_wksp+0x74>  // b.plast
    2a20:	mov	x19, x3
    2a24:	add	x22, x3, #0x40
    2a28:	mov	x5, x1
    2a2c:	mov	x6, x2
    2a30:	mov	x21, x0
    2a34:	add	x4, sp, #0x38
    2a38:	add	x3, sp, #0x3c
    2a3c:	mov	x2, x19
    2a40:	mov	x0, x22
    2a44:	mov	x1, #0x100                 	// #256
    2a48:	bl	308 <HUF_readStats>
    2a4c:	mov	x20, x0
    2a50:	cmn	x0, #0x78
    2a54:	b.hi	2ac8 <HUF_readDTableX1_wksp+0xc4>  // b.pmore
    2a58:	mov	x0, x21
    2a5c:	bl	e60 <FSE_decompress+0x114>
    2a60:	ldr	w2, [sp, #56]
    2a64:	and	w1, w0, #0xff
    2a68:	str	w0, [sp, #48]
    2a6c:	add	w1, w1, #0x1
    2a70:	cmp	w1, w2
    2a74:	b.cs	2a80 <HUF_readDTableX1_wksp+0x7c>  // b.hs, b.nlast
    2a78:	mov	x20, #0xffffffffffffffd4    	// #-44
    2a7c:	b	2ac8 <HUF_readDTableX1_wksp+0xc4>
    2a80:	add	x1, sp, #0x30
    2a84:	mov	x0, x21
    2a88:	strb	wzr, [sp, #49]
    2a8c:	strb	w2, [sp, #50]
    2a90:	mov	x2, #0x4                   	// #4
    2a94:	bl	e5c <FSE_decompress+0x110>
    2a98:	ldr	w3, [sp, #56]
    2a9c:	mov	x0, #0x0                   	// #0
    2aa0:	mov	w1, #0x0                   	// #0
    2aa4:	add	w3, w3, #0x1
    2aa8:	add	x0, x0, #0x1
    2aac:	cmp	w3, w0
    2ab0:	b.hi	2adc <HUF_readDTableX1_wksp+0xd8>  // b.pmore
    2ab4:	ldr	w7, [sp, #60]
    2ab8:	mov	x2, #0x0                   	// #0
    2abc:	mov	w8, #0x1                   	// #1
    2ac0:	cmp	w7, w2
    2ac4:	b.hi	2af4 <HUF_readDTableX1_wksp+0xf0>  // b.pmore
    2ac8:	mov	x0, x20
    2acc:	ldp	x19, x20, [sp, #16]
    2ad0:	ldp	x21, x22, [sp, #32]
    2ad4:	ldp	x29, x30, [sp], #64
    2ad8:	ret
    2adc:	ldr	w4, [x19, x0, lsl #2]
    2ae0:	sub	w2, w0, #0x1
    2ae4:	str	w1, [x19, x0, lsl #2]
    2ae8:	lsl	w2, w4, w2
    2aec:	add	w1, w2, w1
    2af0:	b	2aa8 <HUF_readDTableX1_wksp+0xa4>
    2af4:	ldrb	w0, [x22, x2]
    2af8:	and	w9, w2, #0xff
    2afc:	sub	w6, w3, w0
    2b00:	lsl	w4, w8, w0
    2b04:	ubfiz	x0, x0, #2, #8
    2b08:	and	w6, w6, #0xff
    2b0c:	ldr	w1, [x19, x0]
    2b10:	add	x5, x21, w1, uxtw #1
    2b14:	add	w4, w1, w4, asr #1
    2b18:	add	x5, x5, #0x2
    2b1c:	cmp	w4, w1
    2b20:	b.hi	2b30 <HUF_readDTableX1_wksp+0x12c>  // b.pmore
    2b24:	add	x2, x2, #0x1
    2b28:	str	w4, [x19, x0]
    2b2c:	b	2ac0 <HUF_readDTableX1_wksp+0xbc>
    2b30:	add	w1, w1, #0x1
    2b34:	strb	w9, [x5, #2]
    2b38:	strb	w6, [x5, #3]
    2b3c:	b	2b18 <HUF_readDTableX1_wksp+0x114>
    2b40:	stp	x29, x30, [sp, #-64]!
    2b44:	mov	x29, sp
    2b48:	stp	x19, x20, [sp, #16]
    2b4c:	mov	x20, x3
    2b50:	mov	x19, x4
    2b54:	mov	x3, x5
    2b58:	mov	x4, x6
    2b5c:	stp	x21, x22, [sp, #32]
    2b60:	mov	x21, x1
    2b64:	mov	x22, x2
    2b68:	mov	x1, x20
    2b6c:	mov	x2, x19
    2b70:	str	x23, [sp, #48]
    2b74:	mov	x23, x0
    2b78:	bl	2a04 <HUF_readDTableX1_wksp>
    2b7c:	cmn	x0, #0x78
    2b80:	b.hi	2bc0 <HUF_readDTableX1_wksp+0x1bc>  // b.pmore
    2b84:	cmp	x19, x0
    2b88:	b.ls	2bbc <HUF_readDTableX1_wksp+0x1b8>  // b.plast
    2b8c:	sub	x3, x19, x0
    2b90:	cmp	x3, #0x9
    2b94:	b.ls	2bd4 <HUF_readDTableX1_wksp+0x1d0>  // b.plast
    2b98:	add	x2, x20, x0
    2b9c:	mov	x4, x23
    2ba0:	mov	x1, x22
    2ba4:	mov	x0, x21
    2ba8:	ldp	x19, x20, [sp, #16]
    2bac:	ldp	x21, x22, [sp, #32]
    2bb0:	ldr	x23, [sp, #48]
    2bb4:	ldp	x29, x30, [sp], #64
    2bb8:	b	1148 <FSE_decompress+0x3fc>
    2bbc:	mov	x0, #0xffffffffffffffb8    	// #-72
    2bc0:	ldp	x19, x20, [sp, #16]
    2bc4:	ldp	x21, x22, [sp, #32]
    2bc8:	ldr	x23, [sp, #48]
    2bcc:	ldp	x29, x30, [sp], #64
    2bd0:	ret
    2bd4:	mov	x0, #0xffffffffffffffec    	// #-20
    2bd8:	b	2bc0 <HUF_readDTableX1_wksp+0x1bc>

0000000000002bdc <HUF_readDTableX1>:
    2bdc:	sub	sp, sp, #0x810
    2be0:	mov	x4, #0x800                 	// #2048
    2be4:	add	x3, sp, #0x10
    2be8:	stp	x29, x30, [sp]
    2bec:	mov	x29, sp
    2bf0:	bl	2a04 <HUF_readDTableX1_wksp>
    2bf4:	ldp	x29, x30, [sp]
    2bf8:	add	sp, sp, #0x810
    2bfc:	ret

0000000000002c00 <HUF_decompress1X1_usingDTable>:
    2c00:	stp	x29, x30, [sp, #-64]!
    2c04:	mov	x29, sp
    2c08:	stp	x19, x20, [sp, #16]
    2c0c:	mov	x20, x0
    2c10:	mov	x19, x4
    2c14:	mov	x0, x4
    2c18:	stp	x21, x22, [sp, #32]
    2c1c:	mov	x21, x1
    2c20:	mov	x22, x2
    2c24:	str	x23, [sp, #48]
    2c28:	mov	x23, x3
    2c2c:	bl	e60 <FSE_decompress+0x114>
    2c30:	tst	x0, #0xff00
    2c34:	b.ne	2c60 <HUF_decompress1X1_usingDTable+0x60>  // b.any
    2c38:	mov	x4, x19
    2c3c:	mov	x3, x23
    2c40:	mov	x2, x22
    2c44:	mov	x1, x21
    2c48:	mov	x0, x20
    2c4c:	ldp	x19, x20, [sp, #16]
    2c50:	ldp	x21, x22, [sp, #32]
    2c54:	ldr	x23, [sp, #48]
    2c58:	ldp	x29, x30, [sp], #64
    2c5c:	b	fd0 <FSE_decompress+0x284>
    2c60:	mov	x0, #0xffffffffffffffff    	// #-1
    2c64:	ldp	x19, x20, [sp, #16]
    2c68:	ldp	x21, x22, [sp, #32]
    2c6c:	ldr	x23, [sp, #48]
    2c70:	ldp	x29, x30, [sp], #64
    2c74:	ret

0000000000002c78 <HUF_decompress1X1_DCtx_wksp>:
    2c78:	stp	x29, x30, [sp, #-64]!
    2c7c:	mov	x29, sp
    2c80:	stp	x19, x20, [sp, #16]
    2c84:	mov	x20, x3
    2c88:	mov	x19, x4
    2c8c:	mov	x3, x5
    2c90:	mov	x4, x6
    2c94:	stp	x21, x22, [sp, #32]
    2c98:	mov	x21, x1
    2c9c:	mov	x22, x2
    2ca0:	mov	x1, x20
    2ca4:	mov	x2, x19
    2ca8:	str	x23, [sp, #48]
    2cac:	mov	x23, x0
    2cb0:	bl	2a04 <HUF_readDTableX1_wksp>
    2cb4:	cmn	x0, #0x78
    2cb8:	b.hi	2cf0 <HUF_decompress1X1_DCtx_wksp+0x78>  // b.pmore
    2cbc:	cmp	x19, x0
    2cc0:	b.ls	2cec <HUF_decompress1X1_DCtx_wksp+0x74>  // b.plast
    2cc4:	sub	x3, x19, x0
    2cc8:	add	x2, x20, x0
    2ccc:	mov	x4, x23
    2cd0:	mov	x1, x22
    2cd4:	mov	x0, x21
    2cd8:	ldp	x19, x20, [sp, #16]
    2cdc:	ldp	x21, x22, [sp, #32]
    2ce0:	ldr	x23, [sp, #48]
    2ce4:	ldp	x29, x30, [sp], #64
    2ce8:	b	fd0 <FSE_decompress+0x284>
    2cec:	mov	x0, #0xffffffffffffffb8    	// #-72
    2cf0:	ldp	x19, x20, [sp, #16]
    2cf4:	ldp	x21, x22, [sp, #32]
    2cf8:	ldr	x23, [sp, #48]
    2cfc:	ldp	x29, x30, [sp], #64
    2d00:	ret

0000000000002d04 <HUF_decompress1X1_DCtx>:
    2d04:	sub	sp, sp, #0x810
    2d08:	mov	x6, #0x800                 	// #2048
    2d0c:	add	x5, sp, #0x10
    2d10:	stp	x29, x30, [sp]
    2d14:	mov	x29, sp
    2d18:	bl	2c78 <HUF_decompress1X1_DCtx_wksp>
    2d1c:	ldp	x29, x30, [sp]
    2d20:	add	sp, sp, #0x810
    2d24:	ret

0000000000002d28 <HUF_decompress1X1>:
    2d28:	mov	x12, #0x2040                	// #8256
    2d2c:	sub	sp, sp, x12
    2d30:	stp	x29, x30, [sp]
    2d34:	mov	x29, sp
    2d38:	stp	x19, x20, [sp, #16]
    2d3c:	mov	x19, x0
    2d40:	mov	x20, x1
    2d44:	add	x0, sp, #0x38
    2d48:	mov	w1, #0x0                   	// #0
    2d4c:	stp	x21, x22, [sp, #32]
    2d50:	mov	x22, x3
    2d54:	mov	x21, x2
    2d58:	mov	x2, #0x2004                	// #8196
    2d5c:	bl	0 <memset>
    2d60:	mov	w0, #0xb                   	// #11
    2d64:	mov	x4, x22
    2d68:	movk	w0, #0xb00, lsl #16
    2d6c:	mov	x3, x21
    2d70:	mov	x2, x20
    2d74:	mov	x1, x19
    2d78:	str	w0, [sp, #56]
    2d7c:	add	x0, sp, #0x38
    2d80:	bl	2d04 <HUF_decompress1X1_DCtx>
    2d84:	mov	x12, #0x2040                	// #8256
    2d88:	ldp	x29, x30, [sp]
    2d8c:	ldp	x19, x20, [sp, #16]
    2d90:	ldp	x21, x22, [sp, #32]
    2d94:	add	sp, sp, x12
    2d98:	ret

0000000000002d9c <HUF_decompress4X1_usingDTable>:
    2d9c:	stp	x29, x30, [sp, #-64]!
    2da0:	mov	x29, sp
    2da4:	stp	x19, x20, [sp, #16]
    2da8:	mov	x19, x3
    2dac:	mov	x20, x4
    2db0:	stp	x21, x22, [sp, #32]
    2db4:	mov	x21, x0
    2db8:	mov	x22, x1
    2dbc:	mov	x0, x4
    2dc0:	str	x23, [sp, #48]
    2dc4:	mov	x23, x2
    2dc8:	bl	e60 <FSE_decompress+0x114>
    2dcc:	tst	x0, #0xff00
    2dd0:	b.ne	2e04 <HUF_decompress4X1_usingDTable+0x68>  // b.any
    2dd4:	cmp	x19, #0x9
    2dd8:	b.ls	2e1c <HUF_decompress4X1_usingDTable+0x80>  // b.plast
    2ddc:	mov	x4, x20
    2de0:	mov	x3, x19
    2de4:	mov	x2, x23
    2de8:	mov	x1, x22
    2dec:	mov	x0, x21
    2df0:	ldp	x19, x20, [sp, #16]
    2df4:	ldp	x21, x22, [sp, #32]
    2df8:	ldr	x23, [sp, #48]
    2dfc:	ldp	x29, x30, [sp], #64
    2e00:	b	1148 <FSE_decompress+0x3fc>
    2e04:	mov	x0, #0xffffffffffffffff    	// #-1
    2e08:	ldp	x19, x20, [sp, #16]
    2e0c:	ldp	x21, x22, [sp, #32]
    2e10:	ldr	x23, [sp, #48]
    2e14:	ldp	x29, x30, [sp], #64
    2e18:	ret
    2e1c:	mov	x0, #0xffffffffffffffec    	// #-20
    2e20:	b	2e08 <HUF_decompress4X1_usingDTable+0x6c>

0000000000002e24 <HUF_decompress4X1_DCtx_wksp>:
    2e24:	b	2b40 <HUF_readDTableX1_wksp+0x13c>

0000000000002e28 <HUF_decompress4X1_DCtx>:
    2e28:	sub	sp, sp, #0x810
    2e2c:	mov	x6, #0x800                 	// #2048
    2e30:	add	x5, sp, #0x10
    2e34:	stp	x29, x30, [sp]
    2e38:	mov	x29, sp
    2e3c:	bl	2b40 <HUF_readDTableX1_wksp+0x13c>
    2e40:	ldp	x29, x30, [sp]
    2e44:	add	sp, sp, #0x810
    2e48:	ret

0000000000002e4c <HUF_decompress4X1>:
    2e4c:	mov	x12, #0x2040                	// #8256
    2e50:	sub	sp, sp, x12
    2e54:	stp	x29, x30, [sp]
    2e58:	mov	x29, sp
    2e5c:	stp	x19, x20, [sp, #16]
    2e60:	mov	x19, x0
    2e64:	mov	x20, x1
    2e68:	add	x0, sp, #0x38
    2e6c:	mov	w1, #0x0                   	// #0
    2e70:	stp	x21, x22, [sp, #32]
    2e74:	mov	x22, x3
    2e78:	mov	x21, x2
    2e7c:	mov	x2, #0x2004                	// #8196
    2e80:	bl	0 <memset>
    2e84:	mov	w0, #0xb                   	// #11
    2e88:	mov	x4, x22
    2e8c:	movk	w0, #0xb00, lsl #16
    2e90:	mov	x3, x21
    2e94:	mov	x2, x20
    2e98:	mov	x1, x19
    2e9c:	str	w0, [sp, #56]
    2ea0:	add	x0, sp, #0x38
    2ea4:	bl	2e28 <HUF_decompress4X1_DCtx>
    2ea8:	mov	x12, #0x2040                	// #8256
    2eac:	ldp	x29, x30, [sp]
    2eb0:	ldp	x19, x20, [sp, #16]
    2eb4:	ldp	x21, x22, [sp, #32]
    2eb8:	add	sp, sp, x12
    2ebc:	ret

0000000000002ec0 <HUF_readDTableX2_wksp>:
    2ec0:	stp	x29, x30, [sp, #-288]!
    2ec4:	mov	x29, sp
    2ec8:	stp	x19, x20, [sp, #16]
    2ecc:	mov	x20, x4
    2ed0:	mov	x19, x3
    2ed4:	stp	x21, x22, [sp, #32]
    2ed8:	mov	x21, x1
    2edc:	stp	x23, x24, [sp, #48]
    2ee0:	mov	x24, x2
    2ee4:	stp	x25, x26, [sp, #64]
    2ee8:	mov	x25, x0
    2eec:	stp	x27, x28, [sp, #80]
    2ef0:	bl	e60 <FSE_decompress+0x114>
    2ef4:	cmp	x20, #0x5db
    2ef8:	str	w0, [sp, #160]
    2efc:	b.hi	2f24 <HUF_readDTableX2_wksp+0x64>  // b.pmore
    2f00:	mov	x24, #0xffffffffffffffd4    	// #-44
    2f04:	mov	x0, x24
    2f08:	ldp	x19, x20, [sp, #16]
    2f0c:	ldp	x21, x22, [sp, #32]
    2f10:	ldp	x23, x24, [sp, #48]
    2f14:	ldp	x25, x26, [sp, #64]
    2f18:	ldp	x27, x28, [sp, #80]
    2f1c:	ldp	x29, x30, [sp], #288
    2f20:	ret
    2f24:	ldrb	w22, [sp, #160]
    2f28:	add	x23, x19, #0x270
    2f2c:	mov	x0, x23
    2f30:	mov	x2, #0x6c                  	// #108
    2f34:	mov	w1, #0x0                   	// #0
    2f38:	bl	0 <grub_memset>
    2f3c:	add	w20, w22, #0x1
    2f40:	cmp	w22, #0xc
    2f44:	b.hi	2f00 <HUF_readDTableX2_wksp+0x40>  // b.pmore
    2f48:	add	x26, x19, #0x4dc
    2f4c:	mov	x6, x24
    2f50:	mov	x5, x21
    2f54:	add	x4, sp, #0xa8
    2f58:	add	x3, sp, #0xac
    2f5c:	mov	x2, x23
    2f60:	mov	x0, x26
    2f64:	mov	x1, #0x100                 	// #256
    2f68:	bl	308 <HUF_readStats>
    2f6c:	mov	x24, x0
    2f70:	cmn	x0, #0x78
    2f74:	b.hi	2f04 <HUF_readDTableX2_wksp+0x44>  // b.pmore
    2f78:	ldr	w21, [sp, #168]
    2f7c:	cmp	w21, w22
    2f80:	b.hi	2f00 <HUF_readDTableX2_wksp+0x40>  // b.pmore
    2f84:	mov	w0, w21
    2f88:	ldr	w1, [x23, w0, uxtw #2]
    2f8c:	cbz	w1, 3068 <HUF_readDTableX2_wksp+0x1a8>
    2f90:	mov	w2, #0x1                   	// #1
    2f94:	add	x5, x19, #0x2a8
    2f98:	add	x1, x19, #0x274
    2f9c:	add	w4, w0, w2
    2fa0:	mov	w27, #0x0                   	// #0
    2fa4:	cmp	w4, w2
    2fa8:	b.hi	3070 <HUF_readDTableX2_wksp+0x1b0>  // b.pmore
    2fac:	ldr	w6, [sp, #172]
    2fb0:	mov	x1, #0x0                   	// #0
    2fb4:	mov	x7, #0x2dc                 	// #732
    2fb8:	str	w27, [x19, #680]
    2fbc:	cmp	w6, w1
    2fc0:	b.hi	3088 <HUF_readDTableX2_wksp+0x1c8>  // b.pmore
    2fc4:	sub	w6, w22, w21
    2fc8:	mov	x1, #0x0                   	// #0
    2fcc:	mov	w2, #0x0                   	// #0
    2fd0:	str	wzr, [x19, #680]
    2fd4:	add	x1, x1, #0x1
    2fd8:	cmp	w4, w1
    2fdc:	b.hi	30b8 <HUF_readDTableX2_wksp+0x1f8>  // b.pmore
    2fe0:	add	w21, w21, #0x1
    2fe4:	mov	w1, #0x34                  	// #52
    2fe8:	sub	w26, w21, w0
    2fec:	sub	w0, w0, w21
    2ff0:	mov	w3, w26
    2ff4:	add	w0, w0, w20
    2ff8:	umaddl	x1, w26, w1, x19
    2ffc:	cmp	w0, w3
    3000:	b.hi	30f8 <HUF_readDTableX2_wksp+0x238>  // b.pmore
    3004:	add	x5, sp, #0xb0
    3008:	sub	w0, w21, w22
    300c:	mov	x1, x19
    3010:	mov	x2, #0x34                  	// #52
    3014:	str	w0, [sp, #108]
    3018:	mov	x0, x5
    301c:	bl	e5c <FSE_decompress+0x110>
    3020:	mov	x28, x19
    3024:	mov	w6, #0x1                   	// #1
    3028:	add	x7, sp, #0xe8
    302c:	mov	w11, w6
    3030:	add	x5, sp, #0xb0
    3034:	add	x0, x19, w27, uxtw #1
    3038:	str	x0, [sp, #112]
    303c:	ldr	x0, [sp, #112]
    3040:	cmp	x0, x28
    3044:	b.ne	3100 <HUF_readDTableX2_wksp+0x240>  // b.any
    3048:	mov	w0, #0x1                   	// #1
    304c:	add	x1, sp, #0xa0
    3050:	mov	x2, #0x4                   	// #4
    3054:	strb	w0, [sp, #161]
    3058:	mov	x0, x25
    305c:	strb	w22, [sp, #162]
    3060:	bl	e5c <FSE_decompress+0x110>
    3064:	b	2f04 <HUF_readDTableX2_wksp+0x44>
    3068:	sub	w0, w0, #0x1
    306c:	b	2f88 <HUF_readDTableX2_wksp+0xc8>
    3070:	ldr	w3, [x1]
    3074:	add	w2, w2, #0x1
    3078:	add	x1, x1, #0x4
    307c:	str	w27, [x1, #52]
    3080:	add	w27, w27, w3
    3084:	b	2fa4 <HUF_readDTableX2_wksp+0xe4>
    3088:	ldrb	w3, [x26, x1]
    308c:	ldrb	w8, [x26, x1]
    3090:	lsl	x3, x3, #2
    3094:	ldr	w2, [x5, x3]
    3098:	add	w9, w2, #0x1
    309c:	str	w9, [x5, x3]
    30a0:	add	x2, x7, w2, uxtw #1
    30a4:	add	x3, x19, x2
    30a8:	strb	w1, [x19, x2]
    30ac:	add	x1, x1, #0x1
    30b0:	strb	w8, [x3, #1]
    30b4:	b	2fbc <HUF_readDTableX2_wksp+0xfc>
    30b8:	sub	w3, w1, #0x1
    30bc:	add	w5, w3, w6
    30c0:	ldr	w3, [x23, x1, lsl #2]
    30c4:	str	w2, [x19, x1, lsl #2]
    30c8:	lsl	w3, w3, w5
    30cc:	add	w2, w3, w2
    30d0:	b	2fd4 <HUF_readDTableX2_wksp+0x114>
    30d4:	ldr	w5, [x19, x2, lsl #2]
    30d8:	lsr	w5, w5, w3
    30dc:	str	w5, [x1, x2, lsl #2]
    30e0:	add	x2, x2, #0x1
    30e4:	cmp	w4, w2
    30e8:	b.hi	30d4 <HUF_readDTableX2_wksp+0x214>  // b.pmore
    30ec:	add	w3, w3, #0x1
    30f0:	add	x1, x1, #0x34
    30f4:	b	2ffc <HUF_readDTableX2_wksp+0x13c>
    30f8:	mov	x2, #0x0                   	// #0
    30fc:	b	30e0 <HUF_readDTableX2_wksp+0x220>
    3100:	ldrb	w8, [x28, #733]
    3104:	sub	w3, w22, w21
    3108:	ldrb	w10, [x28, #732]
    310c:	add	w3, w3, w8
    3110:	str	w3, [sp, #156]
    3114:	ubfiz	x1, x8, #2, #8
    3118:	sub	w23, w21, w8
    311c:	cmp	w26, w3
    3120:	lsl	w12, w6, w3
    3124:	ldr	w1, [x5, x1]
    3128:	mov	w20, w1
    312c:	b.hi	3268 <HUF_readDTableX2_wksp+0x3a8>  // b.pmore
    3130:	ldr	w0, [sp, #108]
    3134:	mov	w1, #0x34                  	// #52
    3138:	mov	x2, #0x34                  	// #52
    313c:	stp	w10, w12, [sp, #136]
    3140:	add	w4, w0, w23
    3144:	umaddl	x1, w23, w1, x19
    3148:	cmp	w4, #0x0
    314c:	str	x8, [sp, #144]
    3150:	csel	w15, w4, w6, gt
    3154:	stp	w15, w4, [sp, #128]
    3158:	str	w11, [sp, #152]
    315c:	add	x20, x20, #0x1
    3160:	add	x0, x19, w15, sxtw #2
    3164:	add	x20, x25, x20, lsl #2
    3168:	ldr	w14, [x0, #676]
    316c:	mov	x0, x7
    3170:	sub	w13, w27, w14
    3174:	stp	w13, w14, [sp, #120]
    3178:	bl	e5c <FSE_decompress+0x110>
    317c:	ldp	w15, w4, [sp, #128]
    3180:	add	x7, sp, #0xe8
    3184:	ldp	w13, w14, [sp, #120]
    3188:	add	x5, sp, #0xb0
    318c:	ldp	w10, w12, [sp, #136]
    3190:	cmp	w4, #0x1
    3194:	ldp	w11, w3, [sp, #152]
    3198:	mov	w6, #0x1                   	// #1
    319c:	ldr	x8, [sp, #144]
    31a0:	b.gt	31d4 <HUF_readDTableX2_wksp+0x314>
    31a4:	add	x1, x19, w14, uxtw #1
    31a8:	sub	w0, w3, w21
    31ac:	mov	w16, #0x0                   	// #0
    31b0:	mov	w30, #0x2                   	// #2
    31b4:	cmp	w13, w16
    31b8:	b.ne	3200 <HUF_readDTableX2_wksp+0x340>  // b.any
    31bc:	lsl	x8, x8, #2
    31c0:	add	x28, x28, #0x2
    31c4:	ldr	w0, [x5, x8]
    31c8:	add	w12, w0, w12
    31cc:	str	w12, [x5, x8]
    31d0:	b	303c <HUF_readDTableX2_wksp+0x17c>
    31d4:	ldr	w1, [x7, w15, sxtw #2]
    31d8:	and	w2, w23, #0xff
    31dc:	mov	x0, x20
    31e0:	add	x1, x20, w1, uxtw #2
    31e4:	cmp	x0, x1
    31e8:	b.eq	31a4 <HUF_readDTableX2_wksp+0x2e4>  // b.none
    31ec:	add	x0, x0, #0x4
    31f0:	sturh	w10, [x0, #-4]
    31f4:	sturb	w2, [x0, #-2]
    31f8:	sturb	w11, [x0, #-1]
    31fc:	b	31e4 <HUF_readDTableX2_wksp+0x324>
    3200:	ldrb	w17, [x1, #733]
    3204:	ldrb	w3, [x1, #732]
    3208:	ldrb	w2, [x1, #733]
    320c:	ldr	w14, [x7, x17, lsl #2]
    3210:	add	w4, w0, w2
    3214:	ubfiz	w3, w3, #8, #8
    3218:	sub	w2, w21, w2
    321c:	add	w3, w10, w3
    3220:	add	w2, w2, w23
    3224:	lsl	w4, w6, w4
    3228:	and	w3, w3, #0xffff
    322c:	add	w4, w4, w14
    3230:	and	w2, w2, #0xff
    3234:	mov	w15, w14
    3238:	add	w14, w14, #0x1
    323c:	cmp	w4, w14
    3240:	ubfiz	x15, x15, #2, #32
    3244:	add	x18, x20, x15
    3248:	strh	w3, [x20, x15]
    324c:	strb	w2, [x18, #2]
    3250:	strb	w30, [x18, #3]
    3254:	b.hi	3234 <HUF_readDTableX2_wksp+0x374>  // b.pmore
    3258:	add	w16, w16, #0x1
    325c:	add	x1, x1, #0x2
    3260:	str	w4, [x7, x17, lsl #2]
    3264:	b	31b4 <HUF_readDTableX2_wksp+0x2f4>
    3268:	and	w23, w23, #0xff
    326c:	add	w0, w1, w12
    3270:	add	x20, x25, x20, lsl #2
    3274:	add	x20, x20, #0x4
    3278:	cmp	w0, w1
    327c:	b.ls	31bc <HUF_readDTableX2_wksp+0x2fc>  // b.plast
    3280:	add	w1, w1, #0x1
    3284:	strh	w10, [x20]
    3288:	strb	w23, [x20, #2]
    328c:	strb	w11, [x20, #3]
    3290:	b	3274 <HUF_readDTableX2_wksp+0x3b4>
    3294:	stp	x29, x30, [sp, #-64]!
    3298:	mov	x29, sp
    329c:	stp	x19, x20, [sp, #16]
    32a0:	mov	x20, x3
    32a4:	mov	x19, x4
    32a8:	mov	x3, x5
    32ac:	mov	x4, x6
    32b0:	stp	x21, x22, [sp, #32]
    32b4:	mov	x21, x1
    32b8:	mov	x22, x2
    32bc:	mov	x1, x20
    32c0:	mov	x2, x19
    32c4:	str	x23, [sp, #48]
    32c8:	mov	x23, x0
    32cc:	bl	2ec0 <HUF_readDTableX2_wksp>
    32d0:	cmn	x0, #0x78
    32d4:	b.hi	3314 <HUF_readDTableX2_wksp+0x454>  // b.pmore
    32d8:	cmp	x19, x0
    32dc:	b.ls	3310 <HUF_readDTableX2_wksp+0x450>  // b.plast
    32e0:	sub	x3, x19, x0
    32e4:	cmp	x3, #0x9
    32e8:	b.ls	3328 <HUF_readDTableX2_wksp+0x468>  // b.plast
    32ec:	add	x2, x20, x0
    32f0:	mov	x4, x23
    32f4:	mov	x1, x22
    32f8:	mov	x0, x21
    32fc:	ldp	x19, x20, [sp, #16]
    3300:	ldp	x21, x22, [sp, #32]
    3304:	ldr	x23, [sp, #48]
    3308:	ldp	x29, x30, [sp], #64
    330c:	b	1c20 <FSE_decompress+0xed4>
    3310:	mov	x0, #0xffffffffffffffb8    	// #-72
    3314:	ldp	x19, x20, [sp, #16]
    3318:	ldp	x21, x22, [sp, #32]
    331c:	ldr	x23, [sp, #48]
    3320:	ldp	x29, x30, [sp], #64
    3324:	ret
    3328:	mov	x0, #0xffffffffffffffec    	// #-20
    332c:	b	3314 <HUF_readDTableX2_wksp+0x454>

0000000000003330 <HUF_readDTableX2>:
    3330:	sub	sp, sp, #0x810
    3334:	mov	x4, #0x800                 	// #2048
    3338:	add	x3, sp, #0x10
    333c:	stp	x29, x30, [sp]
    3340:	mov	x29, sp
    3344:	bl	2ec0 <HUF_readDTableX2_wksp>
    3348:	ldp	x29, x30, [sp]
    334c:	add	sp, sp, #0x810
    3350:	ret

0000000000003354 <HUF_decompress1X2_usingDTable>:
    3354:	stp	x29, x30, [sp, #-64]!
    3358:	mov	x29, sp
    335c:	stp	x19, x20, [sp, #16]
    3360:	mov	x20, x0
    3364:	mov	x19, x4
    3368:	mov	x0, x4
    336c:	stp	x21, x22, [sp, #32]
    3370:	mov	x21, x1
    3374:	mov	x22, x2
    3378:	str	x23, [sp, #48]
    337c:	mov	x23, x3
    3380:	bl	e60 <FSE_decompress+0x114>
    3384:	ubfx	x0, x0, #8, #8
    3388:	cmp	w0, #0x1
    338c:	b.ne	33b8 <HUF_decompress1X2_usingDTable+0x64>  // b.any
    3390:	mov	x4, x19
    3394:	mov	x3, x23
    3398:	mov	x2, x22
    339c:	mov	x1, x21
    33a0:	mov	x0, x20
    33a4:	ldp	x19, x20, [sp, #16]
    33a8:	ldp	x21, x22, [sp, #32]
    33ac:	ldr	x23, [sp, #48]
    33b0:	ldp	x29, x30, [sp], #64
    33b4:	b	19a8 <FSE_decompress+0xc5c>
    33b8:	mov	x0, #0xffffffffffffffff    	// #-1
    33bc:	ldp	x19, x20, [sp, #16]
    33c0:	ldp	x21, x22, [sp, #32]
    33c4:	ldr	x23, [sp, #48]
    33c8:	ldp	x29, x30, [sp], #64
    33cc:	ret

00000000000033d0 <HUF_decompress1X2_DCtx_wksp>:
    33d0:	stp	x29, x30, [sp, #-64]!
    33d4:	mov	x29, sp
    33d8:	stp	x19, x20, [sp, #16]
    33dc:	mov	x20, x3
    33e0:	mov	x19, x4
    33e4:	mov	x3, x5
    33e8:	mov	x4, x6
    33ec:	stp	x21, x22, [sp, #32]
    33f0:	mov	x21, x1
    33f4:	mov	x22, x2
    33f8:	mov	x1, x20
    33fc:	mov	x2, x19
    3400:	str	x23, [sp, #48]
    3404:	mov	x23, x0
    3408:	bl	2ec0 <HUF_readDTableX2_wksp>
    340c:	cmn	x0, #0x78
    3410:	b.hi	3448 <HUF_decompress1X2_DCtx_wksp+0x78>  // b.pmore
    3414:	cmp	x19, x0
    3418:	b.ls	3444 <HUF_decompress1X2_DCtx_wksp+0x74>  // b.plast
    341c:	sub	x3, x19, x0
    3420:	add	x2, x20, x0
    3424:	mov	x4, x23
    3428:	mov	x1, x22
    342c:	mov	x0, x21
    3430:	ldp	x19, x20, [sp, #16]
    3434:	ldp	x21, x22, [sp, #32]
    3438:	ldr	x23, [sp, #48]
    343c:	ldp	x29, x30, [sp], #64
    3440:	b	19a8 <FSE_decompress+0xc5c>
    3444:	mov	x0, #0xffffffffffffffb8    	// #-72
    3448:	ldp	x19, x20, [sp, #16]
    344c:	ldp	x21, x22, [sp, #32]
    3450:	ldr	x23, [sp, #48]
    3454:	ldp	x29, x30, [sp], #64
    3458:	ret

000000000000345c <HUF_decompress1X2_DCtx>:
    345c:	sub	sp, sp, #0x810
    3460:	mov	x6, #0x800                 	// #2048
    3464:	add	x5, sp, #0x10
    3468:	stp	x29, x30, [sp]
    346c:	mov	x29, sp
    3470:	bl	33d0 <HUF_decompress1X2_DCtx_wksp>
    3474:	ldp	x29, x30, [sp]
    3478:	add	sp, sp, #0x810
    347c:	ret

0000000000003480 <HUF_decompress1X2>:
    3480:	mov	x12, #0x4040                	// #16448
    3484:	sub	sp, sp, x12
    3488:	stp	x29, x30, [sp]
    348c:	mov	x29, sp
    3490:	stp	x19, x20, [sp, #16]
    3494:	mov	x19, x0
    3498:	mov	x20, x1
    349c:	add	x0, sp, #0x38
    34a0:	mov	w1, #0x0                   	// #0
    34a4:	stp	x21, x22, [sp, #32]
    34a8:	mov	x22, x3
    34ac:	mov	x21, x2
    34b0:	mov	x2, #0x4004                	// #16388
    34b4:	bl	0 <memset>
    34b8:	mov	w0, #0xc                   	// #12
    34bc:	mov	x4, x22
    34c0:	movk	w0, #0xc00, lsl #16
    34c4:	mov	x3, x21
    34c8:	mov	x2, x20
    34cc:	mov	x1, x19
    34d0:	str	w0, [sp, #56]
    34d4:	add	x0, sp, #0x38
    34d8:	bl	345c <HUF_decompress1X2_DCtx>
    34dc:	mov	x12, #0x4040                	// #16448
    34e0:	ldp	x29, x30, [sp]
    34e4:	ldp	x19, x20, [sp, #16]
    34e8:	ldp	x21, x22, [sp, #32]
    34ec:	add	sp, sp, x12
    34f0:	ret

00000000000034f4 <HUF_decompress4X2_usingDTable>:
    34f4:	stp	x29, x30, [sp, #-64]!
    34f8:	mov	x29, sp
    34fc:	stp	x19, x20, [sp, #16]
    3500:	mov	x19, x3
    3504:	mov	x20, x4
    3508:	stp	x21, x22, [sp, #32]
    350c:	mov	x21, x0
    3510:	mov	x22, x1
    3514:	mov	x0, x4
    3518:	str	x23, [sp, #48]
    351c:	mov	x23, x2
    3520:	bl	e60 <FSE_decompress+0x114>
    3524:	ubfx	x0, x0, #8, #8
    3528:	cmp	w0, #0x1
    352c:	b.ne	3560 <HUF_decompress4X2_usingDTable+0x6c>  // b.any
    3530:	cmp	x19, #0x9
    3534:	b.ls	3578 <HUF_decompress4X2_usingDTable+0x84>  // b.plast
    3538:	mov	x4, x20
    353c:	mov	x3, x19
    3540:	mov	x2, x23
    3544:	mov	x1, x22
    3548:	mov	x0, x21
    354c:	ldp	x19, x20, [sp, #16]
    3550:	ldp	x21, x22, [sp, #32]
    3554:	ldr	x23, [sp, #48]
    3558:	ldp	x29, x30, [sp], #64
    355c:	b	1c20 <FSE_decompress+0xed4>
    3560:	mov	x0, #0xffffffffffffffff    	// #-1
    3564:	ldp	x19, x20, [sp, #16]
    3568:	ldp	x21, x22, [sp, #32]
    356c:	ldr	x23, [sp, #48]
    3570:	ldp	x29, x30, [sp], #64
    3574:	ret
    3578:	mov	x0, #0xffffffffffffffec    	// #-20
    357c:	b	3564 <HUF_decompress4X2_usingDTable+0x70>

0000000000003580 <HUF_decompress4X2_DCtx_wksp>:
    3580:	b	3294 <HUF_readDTableX2_wksp+0x3d4>

0000000000003584 <HUF_decompress4X2_DCtx>:
    3584:	sub	sp, sp, #0x810
    3588:	mov	x6, #0x800                 	// #2048
    358c:	add	x5, sp, #0x10
    3590:	stp	x29, x30, [sp]
    3594:	mov	x29, sp
    3598:	bl	3294 <HUF_readDTableX2_wksp+0x3d4>
    359c:	ldp	x29, x30, [sp]
    35a0:	add	sp, sp, #0x810
    35a4:	ret

00000000000035a8 <HUF_decompress4X2>:
    35a8:	mov	x12, #0x4040                	// #16448
    35ac:	sub	sp, sp, x12
    35b0:	stp	x29, x30, [sp]
    35b4:	mov	x29, sp
    35b8:	stp	x19, x20, [sp, #16]
    35bc:	mov	x19, x0
    35c0:	mov	x20, x1
    35c4:	add	x0, sp, #0x38
    35c8:	mov	w1, #0x0                   	// #0
    35cc:	stp	x21, x22, [sp, #32]
    35d0:	mov	x22, x3
    35d4:	mov	x21, x2
    35d8:	mov	x2, #0x4004                	// #16388
    35dc:	bl	0 <memset>
    35e0:	mov	w0, #0xc                   	// #12
    35e4:	mov	x4, x22
    35e8:	movk	w0, #0xc00, lsl #16
    35ec:	mov	x3, x21
    35f0:	mov	x2, x20
    35f4:	mov	x1, x19
    35f8:	str	w0, [sp, #56]
    35fc:	add	x0, sp, #0x38
    3600:	bl	3584 <HUF_decompress4X2_DCtx>
    3604:	mov	x12, #0x4040                	// #16448
    3608:	ldp	x29, x30, [sp]
    360c:	ldp	x19, x20, [sp, #16]
    3610:	ldp	x21, x22, [sp, #32]
    3614:	add	sp, sp, x12
    3618:	ret

000000000000361c <HUF_decompress1X_usingDTable>:
    361c:	stp	x29, x30, [sp, #-64]!
    3620:	mov	x29, sp
    3624:	stp	x19, x20, [sp, #16]
    3628:	mov	x20, x0
    362c:	mov	x19, x4
    3630:	mov	x0, x4
    3634:	stp	x21, x22, [sp, #32]
    3638:	mov	x21, x1
    363c:	mov	x22, x2
    3640:	str	x23, [sp, #48]
    3644:	mov	x23, x3
    3648:	bl	e60 <FSE_decompress+0x114>
    364c:	mov	x4, x19
    3650:	tst	x0, #0xff00
    3654:	mov	x3, x23
    3658:	mov	x2, x22
    365c:	mov	x1, x21
    3660:	mov	x0, x20
    3664:	b.eq	367c <HUF_decompress1X_usingDTable+0x60>  // b.none
    3668:	ldp	x19, x20, [sp, #16]
    366c:	ldp	x21, x22, [sp, #32]
    3670:	ldr	x23, [sp, #48]
    3674:	ldp	x29, x30, [sp], #64
    3678:	b	19a8 <FSE_decompress+0xc5c>
    367c:	ldp	x19, x20, [sp, #16]
    3680:	ldp	x21, x22, [sp, #32]
    3684:	ldr	x23, [sp, #48]
    3688:	ldp	x29, x30, [sp], #64
    368c:	b	fd0 <FSE_decompress+0x284>

0000000000003690 <HUF_decompress4X_usingDTable>:
    3690:	stp	x29, x30, [sp, #-64]!
    3694:	mov	x29, sp
    3698:	stp	x19, x20, [sp, #16]
    369c:	mov	x19, x3
    36a0:	mov	x20, x4
    36a4:	stp	x21, x22, [sp, #32]
    36a8:	mov	x21, x0
    36ac:	mov	x22, x1
    36b0:	mov	x0, x4
    36b4:	str	x23, [sp, #48]
    36b8:	mov	x23, x2
    36bc:	bl	e60 <FSE_decompress+0x114>
    36c0:	tst	x0, #0xff00
    36c4:	b.eq	36f8 <HUF_decompress4X_usingDTable+0x68>  // b.none
    36c8:	cmp	x19, #0x9
    36cc:	b.ls	3728 <HUF_decompress4X_usingDTable+0x98>  // b.plast
    36d0:	mov	x4, x20
    36d4:	mov	x3, x19
    36d8:	mov	x2, x23
    36dc:	mov	x1, x22
    36e0:	mov	x0, x21
    36e4:	ldp	x19, x20, [sp, #16]
    36e8:	ldp	x21, x22, [sp, #32]
    36ec:	ldr	x23, [sp, #48]
    36f0:	ldp	x29, x30, [sp], #64
    36f4:	b	1c20 <FSE_decompress+0xed4>
    36f8:	cmp	x19, #0x9
    36fc:	b.ls	3728 <HUF_decompress4X_usingDTable+0x98>  // b.plast
    3700:	mov	x4, x20
    3704:	mov	x3, x19
    3708:	mov	x2, x23
    370c:	mov	x1, x22
    3710:	mov	x0, x21
    3714:	ldp	x19, x20, [sp, #16]
    3718:	ldp	x21, x22, [sp, #32]
    371c:	ldr	x23, [sp, #48]
    3720:	ldp	x29, x30, [sp], #64
    3724:	b	1148 <FSE_decompress+0x3fc>
    3728:	mov	x0, #0xffffffffffffffec    	// #-20
    372c:	ldp	x19, x20, [sp, #16]
    3730:	ldp	x21, x22, [sp, #32]
    3734:	ldr	x23, [sp, #48]
    3738:	ldp	x29, x30, [sp], #64
    373c:	ret

0000000000003740 <HUF_selectDecoder>:
    3740:	cmp	x1, x0
    3744:	b.cs	3790 <HUF_selectDecoder+0x50>  // b.hs, b.nlast
    3748:	lsl	x1, x1, #4
    374c:	udiv	x1, x1, x0
    3750:	adrp	x2, 0 <FSE_versionNumber>
    3754:	mov	w1, w1
    3758:	lsr	x0, x0, #8
    375c:	ldr	x4, [x2]
    3760:	mov	x2, #0x18                  	// #24
    3764:	mul	x1, x1, x2
    3768:	add	x3, x4, x1
    376c:	ldr	w1, [x4, x1]
    3770:	ldp	w5, w2, [x3, #8]
    3774:	ldr	w3, [x3, #4]
    3778:	madd	w2, w2, w0, w5
    377c:	madd	w0, w3, w0, w1
    3780:	add	w2, w2, w2, lsr #3
    3784:	cmp	w0, w2
    3788:	cset	w0, hi  // hi = pmore
    378c:	ret
    3790:	mov	w1, #0xf                   	// #15
    3794:	b	3750 <HUF_selectDecoder+0x10>
	...

00000000000037a0 <HUF_decompress>:
    37a0:	stp	x29, x30, [sp, #-32]!
    37a4:	mov	x29, sp
    37a8:	str	x19, [sp, #16]
    37ac:	cbz	x1, 383c <HUF_decompress+0x9c>
    37b0:	mov	x19, x1
    37b4:	mov	x6, x3
    37b8:	cmp	x1, x3
    37bc:	b.cc	3844 <HUF_decompress+0xa4>  // b.lo, b.ul, b.last
    37c0:	mov	x7, x2
    37c4:	b.ne	37e4 <HUF_decompress+0x44>  // b.any
    37c8:	mov	x2, x1
    37cc:	mov	x1, x7
    37d0:	bl	e5c <FSE_decompress+0x110>
    37d4:	mov	x0, x19
    37d8:	ldr	x19, [sp, #16]
    37dc:	ldp	x29, x30, [sp], #32
    37e0:	ret
    37e4:	cmp	x3, #0x1
    37e8:	b.ne	37fc <HUF_decompress+0x5c>  // b.any
    37ec:	mov	x2, x1
    37f0:	ldrb	w1, [x7]
    37f4:	bl	0 <grub_memset>
    37f8:	b	37d4 <HUF_decompress+0x34>
    37fc:	mov	x8, x0
    3800:	mov	x1, x3
    3804:	mov	x0, x19
    3808:	bl	3740 <HUF_selectDecoder>
    380c:	mov	x3, x6
    3810:	adrp	x1, 0 <FSE_versionNumber>
    3814:	mov	x2, x7
    3818:	ldr	x1, [x1]
    381c:	add	x0, x1, w0, uxtw #3
    3820:	mov	x1, x19
    3824:	ldr	x19, [sp, #16]
    3828:	ldp	x29, x30, [sp], #32
    382c:	ldr	x4, [x0, #384]
    3830:	mov	x0, x8
    3834:	mov	x16, x4
    3838:	br	x16
    383c:	mov	x19, #0xffffffffffffffba    	// #-70
    3840:	b	37d4 <HUF_decompress+0x34>
    3844:	mov	x19, #0xffffffffffffffec    	// #-20
    3848:	b	37d4 <HUF_decompress+0x34>
    384c:	nop
	...

0000000000003858 <HUF_decompress4X_DCtx>:
    3858:	stp	x29, x30, [sp, #-32]!
    385c:	mov	x29, sp
    3860:	str	x19, [sp, #16]
    3864:	cbz	x2, 38fc <HUF_decompress4X_DCtx+0xa4>
    3868:	mov	x19, x2
    386c:	mov	x6, x4
    3870:	cmp	x2, x4
    3874:	b.cc	3904 <HUF_decompress4X_DCtx+0xac>  // b.lo, b.ul, b.last
    3878:	mov	x7, x1
    387c:	mov	x8, x3
    3880:	b.ne	38a0 <HUF_decompress4X_DCtx+0x48>  // b.any
    3884:	mov	x1, x3
    3888:	mov	x0, x7
    388c:	bl	e5c <FSE_decompress+0x110>
    3890:	mov	x0, x19
    3894:	ldr	x19, [sp, #16]
    3898:	ldp	x29, x30, [sp], #32
    389c:	ret
    38a0:	cmp	x4, #0x1
    38a4:	b.ne	38b8 <HUF_decompress4X_DCtx+0x60>  // b.any
    38a8:	ldrb	w1, [x3]
    38ac:	mov	x0, x7
    38b0:	bl	0 <grub_memset>
    38b4:	b	3890 <HUF_decompress4X_DCtx+0x38>
    38b8:	mov	x9, x0
    38bc:	mov	x1, x4
    38c0:	mov	x0, x2
    38c4:	bl	3740 <HUF_selectDecoder>
    38c8:	mov	x4, x6
    38cc:	mov	x3, x8
    38d0:	mov	x2, x19
    38d4:	mov	x1, x7
    38d8:	cbz	w0, 38ec <HUF_decompress4X_DCtx+0x94>
    38dc:	ldr	x19, [sp, #16]
    38e0:	mov	x0, x9
    38e4:	ldp	x29, x30, [sp], #32
    38e8:	b	3584 <HUF_decompress4X2_DCtx>
    38ec:	ldr	x19, [sp, #16]
    38f0:	mov	x0, x9
    38f4:	ldp	x29, x30, [sp], #32
    38f8:	b	2e28 <HUF_decompress4X1_DCtx>
    38fc:	mov	x19, #0xffffffffffffffba    	// #-70
    3900:	b	3890 <HUF_decompress4X_DCtx+0x38>
    3904:	mov	x19, #0xffffffffffffffec    	// #-20
    3908:	b	3890 <HUF_decompress4X_DCtx+0x38>

000000000000390c <HUF_decompress4X_hufOnly_wksp>:
    390c:	cbz	x2, 3970 <HUF_decompress4X_hufOnly_wksp+0x64>
    3910:	mov	x8, x4
    3914:	cbz	x4, 3978 <HUF_decompress4X_hufOnly_wksp+0x6c>
    3918:	mov	x10, x1
    391c:	mov	x9, x0
    3920:	mov	x7, x2
    3924:	mov	x11, x3
    3928:	mov	x12, x5
    392c:	stp	x29, x30, [sp, #-16]!
    3930:	mov	x1, x4
    3934:	mov	x29, sp
    3938:	mov	x0, x2
    393c:	bl	3740 <HUF_selectDecoder>
    3940:	mov	x5, x12
    3944:	mov	x4, x8
    3948:	mov	x3, x11
    394c:	mov	x2, x7
    3950:	mov	x1, x10
    3954:	cbz	w0, 3964 <HUF_decompress4X_hufOnly_wksp+0x58>
    3958:	ldp	x29, x30, [sp], #16
    395c:	mov	x0, x9
    3960:	b	3294 <HUF_readDTableX2_wksp+0x3d4>
    3964:	ldp	x29, x30, [sp], #16
    3968:	mov	x0, x9
    396c:	b	2b40 <HUF_readDTableX1_wksp+0x13c>
    3970:	mov	x0, #0xffffffffffffffba    	// #-70
    3974:	ret
    3978:	mov	x0, #0xffffffffffffffec    	// #-20
    397c:	ret

0000000000003980 <HUF_decompress4X_hufOnly>:
    3980:	sub	sp, sp, #0x810
    3984:	mov	x6, #0x800                 	// #2048
    3988:	add	x5, sp, #0x10
    398c:	stp	x29, x30, [sp]
    3990:	mov	x29, sp
    3994:	bl	390c <HUF_decompress4X_hufOnly_wksp>
    3998:	ldp	x29, x30, [sp]
    399c:	add	sp, sp, #0x810
    39a0:	ret

00000000000039a4 <HUF_decompress1X_DCtx_wksp>:
    39a4:	stp	x29, x30, [sp, #-32]!
    39a8:	mov	x29, sp
    39ac:	str	x19, [sp, #16]
    39b0:	cbz	x2, 3a50 <HUF_decompress1X_DCtx_wksp+0xac>
    39b4:	mov	x19, x2
    39b8:	mov	x7, x4
    39bc:	cmp	x2, x4
    39c0:	b.cc	3a58 <HUF_decompress1X_DCtx_wksp+0xb4>  // b.lo, b.ul, b.last
    39c4:	mov	x8, x1
    39c8:	mov	x9, x3
    39cc:	b.ne	39ec <HUF_decompress1X_DCtx_wksp+0x48>  // b.any
    39d0:	mov	x1, x3
    39d4:	mov	x0, x8
    39d8:	bl	e5c <FSE_decompress+0x110>
    39dc:	mov	x0, x19
    39e0:	ldr	x19, [sp, #16]
    39e4:	ldp	x29, x30, [sp], #32
    39e8:	ret
    39ec:	cmp	x4, #0x1
    39f0:	b.ne	3a04 <HUF_decompress1X_DCtx_wksp+0x60>  // b.any
    39f4:	ldrb	w1, [x3]
    39f8:	mov	x0, x8
    39fc:	bl	0 <grub_memset>
    3a00:	b	39dc <HUF_decompress1X_DCtx_wksp+0x38>
    3a04:	mov	x10, x0
    3a08:	mov	x11, x5
    3a0c:	mov	x1, x4
    3a10:	mov	x0, x2
    3a14:	bl	3740 <HUF_selectDecoder>
    3a18:	mov	x5, x11
    3a1c:	mov	x4, x7
    3a20:	mov	x3, x9
    3a24:	mov	x2, x19
    3a28:	mov	x1, x8
    3a2c:	cbz	w0, 3a40 <HUF_decompress1X_DCtx_wksp+0x9c>
    3a30:	ldr	x19, [sp, #16]
    3a34:	mov	x0, x10
    3a38:	ldp	x29, x30, [sp], #32
    3a3c:	b	33d0 <HUF_decompress1X2_DCtx_wksp>
    3a40:	ldr	x19, [sp, #16]
    3a44:	mov	x0, x10
    3a48:	ldp	x29, x30, [sp], #32
    3a4c:	b	2c78 <HUF_decompress1X1_DCtx_wksp>
    3a50:	mov	x19, #0xffffffffffffffba    	// #-70
    3a54:	b	39dc <HUF_decompress1X_DCtx_wksp+0x38>
    3a58:	mov	x19, #0xffffffffffffffec    	// #-20
    3a5c:	b	39dc <HUF_decompress1X_DCtx_wksp+0x38>

0000000000003a60 <HUF_decompress1X_DCtx>:
    3a60:	sub	sp, sp, #0x810
    3a64:	mov	x6, #0x800                 	// #2048
    3a68:	add	x5, sp, #0x10
    3a6c:	stp	x29, x30, [sp]
    3a70:	mov	x29, sp
    3a74:	bl	39a4 <HUF_decompress1X_DCtx_wksp>
    3a78:	ldp	x29, x30, [sp]
    3a7c:	add	sp, sp, #0x810
    3a80:	ret

0000000000003a84 <HUF_decompress1X_usingDTable_bmi2>:
    3a84:	stp	x29, x30, [sp, #-64]!
    3a88:	mov	x29, sp
    3a8c:	stp	x19, x20, [sp, #16]
    3a90:	mov	x20, x0
    3a94:	mov	x19, x4
    3a98:	mov	x0, x4
    3a9c:	stp	x21, x22, [sp, #32]
    3aa0:	mov	x21, x1
    3aa4:	mov	x22, x2
    3aa8:	str	x23, [sp, #48]
    3aac:	mov	x23, x3
    3ab0:	bl	e60 <FSE_decompress+0x114>
    3ab4:	mov	x4, x19
    3ab8:	tst	x0, #0xff00
    3abc:	mov	x3, x23
    3ac0:	mov	x2, x22
    3ac4:	mov	x1, x21
    3ac8:	mov	x0, x20
    3acc:	b.eq	3ae4 <HUF_decompress1X_usingDTable_bmi2+0x60>  // b.none
    3ad0:	ldp	x19, x20, [sp, #16]
    3ad4:	ldp	x21, x22, [sp, #32]
    3ad8:	ldr	x23, [sp, #48]
    3adc:	ldp	x29, x30, [sp], #64
    3ae0:	b	19a8 <FSE_decompress+0xc5c>
    3ae4:	ldp	x19, x20, [sp, #16]
    3ae8:	ldp	x21, x22, [sp, #32]
    3aec:	ldr	x23, [sp, #48]
    3af0:	ldp	x29, x30, [sp], #64
    3af4:	b	fd0 <FSE_decompress+0x284>

0000000000003af8 <HUF_decompress1X1_DCtx_wksp_bmi2>:
    3af8:	stp	x29, x30, [sp, #-64]!
    3afc:	mov	x29, sp
    3b00:	stp	x19, x20, [sp, #16]
    3b04:	mov	x20, x3
    3b08:	mov	x19, x4
    3b0c:	mov	x3, x5
    3b10:	mov	x4, x6
    3b14:	stp	x21, x22, [sp, #32]
    3b18:	mov	x21, x1
    3b1c:	mov	x22, x2
    3b20:	mov	x1, x20
    3b24:	mov	x2, x19
    3b28:	str	x23, [sp, #48]
    3b2c:	mov	x23, x0
    3b30:	bl	2a04 <HUF_readDTableX1_wksp>
    3b34:	cmn	x0, #0x78
    3b38:	b.hi	3b70 <HUF_decompress1X1_DCtx_wksp_bmi2+0x78>  // b.pmore
    3b3c:	cmp	x19, x0
    3b40:	b.ls	3b6c <HUF_decompress1X1_DCtx_wksp_bmi2+0x74>  // b.plast
    3b44:	sub	x3, x19, x0
    3b48:	add	x2, x20, x0
    3b4c:	mov	x4, x23
    3b50:	mov	x1, x22
    3b54:	mov	x0, x21
    3b58:	ldp	x19, x20, [sp, #16]
    3b5c:	ldp	x21, x22, [sp, #32]
    3b60:	ldr	x23, [sp, #48]
    3b64:	ldp	x29, x30, [sp], #64
    3b68:	b	fd0 <FSE_decompress+0x284>
    3b6c:	mov	x0, #0xffffffffffffffb8    	// #-72
    3b70:	ldp	x19, x20, [sp, #16]
    3b74:	ldp	x21, x22, [sp, #32]
    3b78:	ldr	x23, [sp, #48]
    3b7c:	ldp	x29, x30, [sp], #64
    3b80:	ret

0000000000003b84 <HUF_decompress4X_usingDTable_bmi2>:
    3b84:	stp	x29, x30, [sp, #-64]!
    3b88:	mov	x29, sp
    3b8c:	stp	x19, x20, [sp, #16]
    3b90:	mov	x19, x3
    3b94:	mov	x20, x4
    3b98:	stp	x21, x22, [sp, #32]
    3b9c:	mov	x21, x0
    3ba0:	mov	x22, x1
    3ba4:	mov	x0, x4
    3ba8:	str	x23, [sp, #48]
    3bac:	mov	x23, x2
    3bb0:	bl	e60 <FSE_decompress+0x114>
    3bb4:	tst	x0, #0xff00
    3bb8:	b.eq	3bec <HUF_decompress4X_usingDTable_bmi2+0x68>  // b.none
    3bbc:	cmp	x19, #0x9
    3bc0:	b.ls	3c1c <HUF_decompress4X_usingDTable_bmi2+0x98>  // b.plast
    3bc4:	mov	x4, x20
    3bc8:	mov	x3, x19
    3bcc:	mov	x2, x23
    3bd0:	mov	x1, x22
    3bd4:	mov	x0, x21
    3bd8:	ldp	x19, x20, [sp, #16]
    3bdc:	ldp	x21, x22, [sp, #32]
    3be0:	ldr	x23, [sp, #48]
    3be4:	ldp	x29, x30, [sp], #64
    3be8:	b	1c20 <FSE_decompress+0xed4>
    3bec:	cmp	x19, #0x9
    3bf0:	b.ls	3c1c <HUF_decompress4X_usingDTable_bmi2+0x98>  // b.plast
    3bf4:	mov	x4, x20
    3bf8:	mov	x3, x19
    3bfc:	mov	x2, x23
    3c00:	mov	x1, x22
    3c04:	mov	x0, x21
    3c08:	ldp	x19, x20, [sp, #16]
    3c0c:	ldp	x21, x22, [sp, #32]
    3c10:	ldr	x23, [sp, #48]
    3c14:	ldp	x29, x30, [sp], #64
    3c18:	b	1148 <FSE_decompress+0x3fc>
    3c1c:	mov	x0, #0xffffffffffffffec    	// #-20
    3c20:	ldp	x19, x20, [sp, #16]
    3c24:	ldp	x21, x22, [sp, #32]
    3c28:	ldr	x23, [sp, #48]
    3c2c:	ldp	x29, x30, [sp], #64
    3c30:	ret

0000000000003c34 <HUF_decompress4X_hufOnly_wksp_bmi2>:
    3c34:	cbz	x2, 3c98 <HUF_decompress4X_hufOnly_wksp_bmi2+0x64>
    3c38:	mov	x8, x4
    3c3c:	cbz	x4, 3ca0 <HUF_decompress4X_hufOnly_wksp_bmi2+0x6c>
    3c40:	mov	x10, x1
    3c44:	mov	x9, x0
    3c48:	mov	x7, x2
    3c4c:	mov	x11, x3
    3c50:	mov	x12, x5
    3c54:	stp	x29, x30, [sp, #-16]!
    3c58:	mov	x1, x4
    3c5c:	mov	x29, sp
    3c60:	mov	x0, x2
    3c64:	bl	3740 <HUF_selectDecoder>
    3c68:	mov	x5, x12
    3c6c:	mov	x4, x8
    3c70:	mov	x3, x11
    3c74:	mov	x2, x7
    3c78:	mov	x1, x10
    3c7c:	cbz	w0, 3c8c <HUF_decompress4X_hufOnly_wksp_bmi2+0x58>
    3c80:	ldp	x29, x30, [sp], #16
    3c84:	mov	x0, x9
    3c88:	b	3294 <HUF_readDTableX2_wksp+0x3d4>
    3c8c:	ldp	x29, x30, [sp], #16
    3c90:	mov	x0, x9
    3c94:	b	2b40 <HUF_readDTableX1_wksp+0x13c>
    3c98:	mov	x0, #0xffffffffffffffba    	// #-70
    3c9c:	ret
    3ca0:	mov	x0, #0xffffffffffffffec    	// #-20
    3ca4:	ret
    3ca8:	mov	x2, #0xeb4f                	// #60239
    3cac:	movk	x2, #0x27d4, lsl #16
    3cb0:	movk	x2, #0xae3d, lsl #32
    3cb4:	movk	x2, #0xc2b2, lsl #48
    3cb8:	mul	x1, x1, x2
    3cbc:	mov	x2, #0xca87                	// #51847
    3cc0:	movk	x2, #0x85eb, lsl #16
    3cc4:	movk	x2, #0x79b1, lsl #32
    3cc8:	movk	x2, #0x9e37, lsl #48
    3ccc:	ror	x1, x1, #33
    3cd0:	mul	x1, x1, x2
    3cd4:	eor	x1, x1, x0
    3cd8:	mov	x0, #0xae63                	// #44643
    3cdc:	movk	x0, #0xc2b2, lsl #16
    3ce0:	movk	x0, #0xca77, lsl #32
    3ce4:	movk	x0, #0x85eb, lsl #48
    3ce8:	madd	x0, x1, x2, x0
    3cec:	ret
    3cf0:	b	0 <grub_memmove>
    3cf4:	stp	x29, x30, [sp, #-32]!
    3cf8:	mov	x1, x0
    3cfc:	mov	x2, #0x4                   	// #4
    3d00:	mov	x29, sp
    3d04:	add	x0, sp, #0x1c
    3d08:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    3d0c:	ldr	w0, [sp, #28]
    3d10:	ldp	x29, x30, [sp], #32
    3d14:	ret
    3d18:	stp	x29, x30, [sp, #-32]!
    3d1c:	mov	x1, x0
    3d20:	mov	x2, #0x8                   	// #8
    3d24:	mov	x29, sp
    3d28:	add	x0, sp, #0x18
    3d2c:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    3d30:	ldr	x0, [sp, #24]
    3d34:	ldp	x29, x30, [sp], #32
    3d38:	ret

0000000000003d3c <XXH_versionNumber>:
    3d3c:	mov	w0, #0x25a                 	// #602
    3d40:	ret

0000000000003d44 <XXH32_copyState>:
    3d44:	mov	x2, #0x30                  	// #48
    3d48:	b	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>

0000000000003d4c <XXH64_copyState>:
    3d4c:	mov	x2, #0x58                  	// #88
    3d50:	b	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>

0000000000003d54 <XXH32>:
    3d54:	stp	x29, x30, [sp, #-112]!
    3d58:	tst	x0, #0x3
    3d5c:	mov	x29, sp
    3d60:	stp	x19, x20, [sp, #16]
    3d64:	mov	x20, x0
    3d68:	mov	w19, w2
    3d6c:	stp	x21, x22, [sp, #32]
    3d70:	mov	x22, x1
    3d74:	add	x21, x0, x1
    3d78:	stp	x23, x24, [sp, #48]
    3d7c:	stp	x25, x26, [sp, #64]
    3d80:	stp	x27, x28, [sp, #80]
    3d84:	b.ne	3f20 <XXH32+0x1cc>  // b.any
    3d88:	cmp	x1, #0xf
    3d8c:	b.ls	3ee8 <XXH32+0x194>  // b.plast
    3d90:	mov	w1, #0x4428                	// #17448
    3d94:	mov	w5, #0xca77                	// #51831
    3d98:	mov	w3, #0x864f                	// #34383
    3d9c:	movk	w1, #0x2423, lsl #16
    3da0:	movk	w5, #0x85eb, lsl #16
    3da4:	movk	w3, #0x61c8, lsl #16
    3da8:	mov	w7, #0x79b1                	// #31153
    3dac:	sub	x8, x21, #0x10
    3db0:	add	w1, w2, w1
    3db4:	add	w6, w2, w5
    3db8:	add	w3, w2, w3
    3dbc:	mov	x4, x0
    3dc0:	movk	w7, #0x9e37, lsl #16
    3dc4:	ldr	w0, [x4]
    3dc8:	add	x4, x4, #0x10
    3dcc:	ldur	w2, [x4, #-8]
    3dd0:	madd	w1, w0, w5, w1
    3dd4:	ldur	w0, [x4, #-12]
    3dd8:	madd	w19, w2, w5, w19
    3ddc:	ror	w1, w1, #19
    3de0:	madd	w6, w0, w5, w6
    3de4:	ldur	w0, [x4, #-4]
    3de8:	cmp	x8, x4
    3dec:	ror	w19, w19, #19
    3df0:	mul	w1, w1, w7
    3df4:	ror	w6, w6, #19
    3df8:	madd	w3, w0, w5, w3
    3dfc:	mul	w19, w19, w7
    3e00:	mul	w6, w6, w7
    3e04:	ror	w3, w3, #19
    3e08:	mul	w3, w3, w7
    3e0c:	b.cs	3dc4 <XXH32+0x70>  // b.hs, b.nlast
    3e10:	sub	x0, x22, #0x10
    3e14:	sub	x2, x21, #0xf
    3e18:	add	x4, x20, #0x1
    3e1c:	and	x0, x0, #0xfffffffffffffff0
    3e20:	cmp	x2, x4
    3e24:	add	x0, x0, #0x10
    3e28:	ror	w19, w19, #20
    3e2c:	ror	w3, w3, #14
    3e30:	ror	w1, w1, #31
    3e34:	add	w19, w19, w3
    3e38:	ror	w6, w6, #25
    3e3c:	add	w1, w1, w6
    3e40:	mov	x2, #0x10                  	// #16
    3e44:	csel	x0, x0, x2, cs  // cs = hs, nlast
    3e48:	add	w19, w19, w1
    3e4c:	add	x20, x20, x0
    3e50:	mov	w2, #0xae3d                	// #44605
    3e54:	mov	w3, #0xeb2f                	// #60207
    3e58:	add	w19, w19, w22
    3e5c:	mov	x0, x20
    3e60:	movk	w2, #0xc2b2, lsl #16
    3e64:	movk	w3, #0x27d4, lsl #16
    3e68:	add	x0, x0, #0x4
    3e6c:	cmp	x0, x21
    3e70:	b.ls	3ef8 <XXH32+0x1a4>  // b.plast
    3e74:	add	x2, x20, #0x1
    3e78:	sub	x0, x21, x20
    3e7c:	add	x1, x21, #0x1
    3e80:	and	x0, x0, #0xfffffffffffffffc
    3e84:	cmp	x1, x2
    3e88:	mov	w2, #0x79b1                	// #31153
    3e8c:	csel	x0, x0, xzr, cs  // cs = hs, nlast
    3e90:	movk	w2, #0x9e37, lsl #16
    3e94:	add	x20, x20, x0
    3e98:	mov	w0, #0x67b1                	// #26545
    3e9c:	movk	w0, #0x1656, lsl #16
    3ea0:	cmp	x20, x21
    3ea4:	b.cc	3f0c <XXH32+0x1b8>  // b.lo, b.ul, b.last
    3ea8:	eor	w19, w19, w19, lsr #15
    3eac:	mov	w0, #0xca77                	// #51831
    3eb0:	movk	w0, #0x85eb, lsl #16
    3eb4:	ldp	x21, x22, [sp, #32]
    3eb8:	mul	w0, w19, w0
    3ebc:	mov	w19, #0xae3d                	// #44605
    3ec0:	movk	w19, #0xc2b2, lsl #16
    3ec4:	eor	w0, w0, w0, lsr #13
    3ec8:	ldp	x23, x24, [sp, #48]
    3ecc:	mul	w0, w0, w19
    3ed0:	ldp	x19, x20, [sp, #16]
    3ed4:	eor	w0, w0, w0, lsr #16
    3ed8:	ldp	x25, x26, [sp, #64]
    3edc:	ldp	x27, x28, [sp, #80]
    3ee0:	ldp	x29, x30, [sp], #112
    3ee4:	ret
    3ee8:	mov	w2, #0x67b1                	// #26545
    3eec:	movk	w2, #0x1656, lsl #16
    3ef0:	add	w19, w19, w2
    3ef4:	b	3e50 <XXH32+0xfc>
    3ef8:	ldur	w1, [x0, #-4]
    3efc:	madd	w19, w1, w2, w19
    3f00:	ror	w19, w19, #15
    3f04:	mul	w19, w19, w3
    3f08:	b	3e68 <XXH32+0x114>
    3f0c:	ldrb	w1, [x20], #1
    3f10:	madd	w19, w1, w0, w19
    3f14:	ror	w19, w19, #21
    3f18:	mul	w19, w19, w2
    3f1c:	b	3ea0 <XXH32+0x14c>
    3f20:	cmp	x1, #0xf
    3f24:	b.ls	406c <XXH32+0x318>  // b.plast
    3f28:	mov	w23, #0x4428                	// #17448
    3f2c:	mov	w26, #0xca77                	// #51831
    3f30:	mov	w25, #0x864f                	// #34383
    3f34:	movk	w23, #0x2423, lsl #16
    3f38:	movk	w26, #0x85eb, lsl #16
    3f3c:	movk	w25, #0x61c8, lsl #16
    3f40:	mov	w28, #0x79b1                	// #31153
    3f44:	sub	x1, x21, #0x10
    3f48:	add	w23, w2, w23
    3f4c:	add	w27, w2, w26
    3f50:	add	w25, w2, w25
    3f54:	mov	x24, x0
    3f58:	movk	w28, #0x9e37, lsl #16
    3f5c:	mov	x0, x24
    3f60:	str	x1, [sp, #104]
    3f64:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    3f68:	madd	w23, w0, w26, w23
    3f6c:	add	x0, x24, #0x4
    3f70:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    3f74:	madd	w2, w0, w26, w27
    3f78:	add	x0, x24, #0x8
    3f7c:	ror	w23, w23, #19
    3f80:	ror	w2, w2, #19
    3f84:	mul	w23, w23, w28
    3f88:	mul	w27, w2, w28
    3f8c:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    3f90:	madd	w19, w0, w26, w19
    3f94:	add	x0, x24, #0xc
    3f98:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    3f9c:	madd	w25, w0, w26, w25
    3fa0:	ldr	x1, [sp, #104]
    3fa4:	ror	w19, w19, #19
    3fa8:	add	x24, x24, #0x10
    3fac:	ror	w25, w25, #19
    3fb0:	cmp	x1, x24
    3fb4:	mul	w19, w19, w28
    3fb8:	mul	w25, w25, w28
    3fbc:	b.cs	3f5c <XXH32+0x208>  // b.hs, b.nlast
    3fc0:	sub	x0, x22, #0x10
    3fc4:	add	x2, x20, #0x1
    3fc8:	sub	x1, x21, #0xf
    3fcc:	and	x0, x0, #0xfffffffffffffff0
    3fd0:	cmp	x1, x2
    3fd4:	add	x0, x0, #0x10
    3fd8:	ror	w19, w19, #20
    3fdc:	ror	w25, w25, #14
    3fe0:	ror	w23, w23, #31
    3fe4:	add	w19, w19, w25
    3fe8:	ror	w2, w27, #25
    3fec:	add	w23, w23, w2
    3ff0:	mov	x1, #0x10                  	// #16
    3ff4:	csel	x0, x0, x1, cs  // cs = hs, nlast
    3ff8:	add	w19, w19, w23
    3ffc:	add	x20, x20, x0
    4000:	mov	w23, #0xae3d                	// #44605
    4004:	mov	w24, #0xeb2f                	// #60207
    4008:	add	w19, w19, w22
    400c:	mov	x0, x20
    4010:	movk	w23, #0xc2b2, lsl #16
    4014:	movk	w24, #0x27d4, lsl #16
    4018:	add	x22, x0, #0x4
    401c:	cmp	x22, x21
    4020:	b.ls	407c <XXH32+0x328>  // b.plast
    4024:	add	x2, x20, #0x1
    4028:	sub	x0, x21, x20
    402c:	add	x1, x21, #0x1
    4030:	and	x0, x0, #0xfffffffffffffffc
    4034:	cmp	x1, x2
    4038:	mov	w1, #0x67b1                	// #26545
    403c:	csel	x0, x0, xzr, cs  // cs = hs, nlast
    4040:	mov	w2, #0x79b1                	// #31153
    4044:	add	x20, x20, x0
    4048:	movk	w1, #0x1656, lsl #16
    404c:	movk	w2, #0x9e37, lsl #16
    4050:	cmp	x20, x21
    4054:	b.cs	3ea8 <XXH32+0x154>  // b.hs, b.nlast
    4058:	ldrb	w0, [x20], #1
    405c:	madd	w19, w0, w1, w19
    4060:	ror	w19, w19, #21
    4064:	mul	w19, w19, w2
    4068:	b	4050 <XXH32+0x2fc>
    406c:	mov	w2, #0x67b1                	// #26545
    4070:	movk	w2, #0x1656, lsl #16
    4074:	add	w19, w19, w2
    4078:	b	4000 <XXH32+0x2ac>
    407c:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4080:	madd	w19, w0, w23, w19
    4084:	mov	x0, x22
    4088:	ror	w19, w19, #15
    408c:	mul	w19, w19, w24
    4090:	b	4018 <XXH32+0x2c4>

0000000000004094 <XXH64>:
    4094:	stp	x29, x30, [sp, #-112]!
    4098:	tst	x0, #0x7
    409c:	mov	x29, sp
    40a0:	stp	x19, x20, [sp, #16]
    40a4:	mov	x20, x0
    40a8:	mov	x19, x2
    40ac:	stp	x21, x22, [sp, #32]
    40b0:	mov	x22, x1
    40b4:	add	x21, x0, x1
    40b8:	stp	x23, x24, [sp, #48]
    40bc:	stp	x25, x26, [sp, #64]
    40c0:	stp	x27, x28, [sp, #80]
    40c4:	b.ne	4348 <XXH64+0x2b4>  // b.any
    40c8:	cmp	x1, #0x1f
    40cc:	b.ls	42f8 <XXH64+0x264>  // b.plast
    40d0:	mov	x1, #0xb5d6                	// #46550
    40d4:	mov	x4, #0xeb4f                	// #60239
    40d8:	mov	x5, #0x3579                	// #13689
    40dc:	movk	x1, #0xadc0, lsl #16
    40e0:	movk	x4, #0x27d4, lsl #16
    40e4:	movk	x5, #0x7a14, lsl #16
    40e8:	movk	x1, #0x27ee, lsl #32
    40ec:	movk	x4, #0xae3d, lsl #32
    40f0:	movk	x5, #0x864e, lsl #32
    40f4:	movk	x1, #0x60ea, lsl #48
    40f8:	movk	x4, #0xc2b2, lsl #48
    40fc:	add	x1, x2, x1
    4100:	add	x6, x2, x4
    4104:	movk	x5, #0x61c8, lsl #48
    4108:	add	x5, x2, x5
    410c:	mov	x2, #0xca87                	// #51847
    4110:	movk	x2, #0x85eb, lsl #16
    4114:	sub	x7, x21, #0x20
    4118:	movk	x2, #0x79b1, lsl #32
    411c:	mov	x3, x0
    4120:	movk	x2, #0x9e37, lsl #48
    4124:	ldr	x0, [x3]
    4128:	add	x3, x3, #0x20
    412c:	madd	x1, x0, x4, x1
    4130:	ldur	x0, [x3, #-24]
    4134:	ror	x1, x1, #33
    4138:	madd	x0, x0, x4, x6
    413c:	mul	x1, x1, x2
    4140:	ror	x0, x0, #33
    4144:	mul	x6, x0, x2
    4148:	ldur	x0, [x3, #-16]
    414c:	madd	x19, x0, x4, x19
    4150:	ldur	x0, [x3, #-8]
    4154:	cmp	x7, x3
    4158:	ror	x19, x19, #33
    415c:	madd	x5, x0, x4, x5
    4160:	mul	x19, x19, x2
    4164:	ror	x5, x5, #33
    4168:	mul	x5, x5, x2
    416c:	b.cs	4124 <XXH64+0x90>  // b.hs, b.nlast
    4170:	sub	x0, x22, #0x20
    4174:	add	x3, x20, #0x1
    4178:	sub	x2, x21, #0x1f
    417c:	and	x0, x0, #0xffffffffffffffe0
    4180:	cmp	x2, x3
    4184:	add	x0, x0, #0x20
    4188:	mov	x2, #0x20                  	// #32
    418c:	csel	x0, x0, x2, cs  // cs = hs, nlast
    4190:	add	x20, x20, x0
    4194:	ror	x3, x19, #52
    4198:	ror	x0, x5, #46
    419c:	add	x3, x3, x0
    41a0:	ror	x2, x1, #63
    41a4:	ror	x0, x6, #57
    41a8:	add	x0, x2, x0
    41ac:	add	x0, x3, x0
    41b0:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    41b4:	mov	x1, x6
    41b8:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    41bc:	mov	x1, x19
    41c0:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    41c4:	mov	x1, x5
    41c8:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    41cc:	mov	x3, #0xeb4f                	// #60239
    41d0:	mov	x2, #0xca87                	// #51847
    41d4:	mov	x4, #0xae63                	// #44643
    41d8:	movk	x3, #0x27d4, lsl #16
    41dc:	movk	x2, #0x85eb, lsl #16
    41e0:	movk	x4, #0xc2b2, lsl #16
    41e4:	movk	x3, #0xae3d, lsl #32
    41e8:	movk	x2, #0x79b1, lsl #32
    41ec:	movk	x4, #0xca77, lsl #32
    41f0:	add	x19, x22, x0
    41f4:	mov	x1, x20
    41f8:	movk	x3, #0xc2b2, lsl #48
    41fc:	movk	x2, #0x9e37, lsl #48
    4200:	movk	x4, #0x85eb, lsl #48
    4204:	add	x1, x1, #0x8
    4208:	cmp	x1, x21
    420c:	b.ls	4310 <XXH64+0x27c>  // b.plast
    4210:	add	x1, x21, #0x1
    4214:	add	x2, x20, #0x1
    4218:	sub	x0, x21, x20
    421c:	cmp	x1, x2
    4220:	and	x0, x0, #0xfffffffffffffff8
    4224:	csel	x0, x0, xzr, cs  // cs = hs, nlast
    4228:	add	x1, x20, x0
    422c:	add	x2, x1, #0x4
    4230:	cmp	x2, x21
    4234:	b.hi	4280 <XXH64+0x1ec>  // b.pmore
    4238:	mov	x1, #0xca87                	// #51847
    423c:	ldr	w0, [x20, x0]
    4240:	movk	x1, #0x85eb, lsl #16
    4244:	movk	x1, #0x79b1, lsl #32
    4248:	movk	x1, #0x9e37, lsl #48
    424c:	mul	x0, x0, x1
    4250:	mov	x1, #0x79f9                	// #31225
    4254:	movk	x1, #0x9e37, lsl #16
    4258:	eor	x19, x0, x19
    425c:	movk	x1, #0x67b1, lsl #32
    4260:	movk	x1, #0x1656, lsl #48
    4264:	ror	x0, x19, #41
    4268:	mov	x19, #0xeb4f                	// #60239
    426c:	movk	x19, #0x27d4, lsl #16
    4270:	movk	x19, #0xae3d, lsl #32
    4274:	movk	x19, #0xc2b2, lsl #48
    4278:	madd	x19, x0, x19, x1
    427c:	mov	x1, x2
    4280:	mov	x2, #0x67c5                	// #26565
    4284:	mov	x3, #0xca87                	// #51847
    4288:	movk	x2, #0x1656, lsl #16
    428c:	movk	x3, #0x85eb, lsl #16
    4290:	movk	x2, #0xeb2f, lsl #32
    4294:	movk	x3, #0x79b1, lsl #32
    4298:	movk	x2, #0x27d4, lsl #48
    429c:	movk	x3, #0x9e37, lsl #48
    42a0:	cmp	x1, x21
    42a4:	b.cc	4330 <XXH64+0x29c>  // b.lo, b.ul, b.last
    42a8:	mov	x0, #0xeb4f                	// #60239
    42ac:	eor	x19, x19, x19, lsr #33
    42b0:	movk	x0, #0x27d4, lsl #16
    42b4:	movk	x0, #0xae3d, lsl #32
    42b8:	movk	x0, #0xc2b2, lsl #48
    42bc:	ldp	x21, x22, [sp, #32]
    42c0:	mul	x0, x19, x0
    42c4:	mov	x19, #0x79f9                	// #31225
    42c8:	movk	x19, #0x9e37, lsl #16
    42cc:	eor	x0, x0, x0, lsr #29
    42d0:	movk	x19, #0x67b1, lsl #32
    42d4:	movk	x19, #0x1656, lsl #48
    42d8:	ldp	x23, x24, [sp, #48]
    42dc:	mul	x0, x0, x19
    42e0:	ldp	x19, x20, [sp, #16]
    42e4:	eor	x0, x0, x0, lsr #32
    42e8:	ldp	x25, x26, [sp, #64]
    42ec:	ldp	x27, x28, [sp, #80]
    42f0:	ldp	x29, x30, [sp], #112
    42f4:	ret
    42f8:	mov	x3, #0x67c5                	// #26565
    42fc:	movk	x3, #0x1656, lsl #16
    4300:	movk	x3, #0xeb2f, lsl #32
    4304:	movk	x3, #0x27d4, lsl #48
    4308:	add	x0, x2, x3
    430c:	b	41cc <XXH64+0x138>
    4310:	ldur	x0, [x1, #-8]
    4314:	mul	x0, x0, x3
    4318:	ror	x0, x0, #33
    431c:	mul	x0, x0, x2
    4320:	eor	x19, x0, x19
    4324:	ror	x19, x19, #37
    4328:	madd	x19, x19, x2, x4
    432c:	b	4204 <XXH64+0x170>
    4330:	ldrb	w0, [x1], #1
    4334:	mul	x0, x0, x2
    4338:	eor	x19, x0, x19
    433c:	ror	x19, x19, #53
    4340:	mul	x19, x19, x3
    4344:	b	42a0 <XXH64+0x20c>
    4348:	cmp	x1, #0x1f
    434c:	b.ls	4560 <XXH64+0x4cc>  // b.plast
    4350:	mov	x27, #0xb5d6                	// #46550
    4354:	mov	x24, #0xeb4f                	// #60239
    4358:	mov	x26, #0x3579                	// #13689
    435c:	movk	x27, #0xadc0, lsl #16
    4360:	movk	x24, #0x27d4, lsl #16
    4364:	movk	x26, #0x7a14, lsl #16
    4368:	mov	x28, #0xca87                	// #51847
    436c:	movk	x27, #0x27ee, lsl #32
    4370:	movk	x24, #0xae3d, lsl #32
    4374:	movk	x26, #0x864e, lsl #32
    4378:	movk	x28, #0x85eb, lsl #16
    437c:	movk	x27, #0x60ea, lsl #48
    4380:	movk	x24, #0xc2b2, lsl #48
    4384:	movk	x26, #0x61c8, lsl #48
    4388:	movk	x28, #0x79b1, lsl #32
    438c:	sub	x2, x21, #0x20
    4390:	add	x27, x19, x27
    4394:	add	x25, x19, x24
    4398:	add	x26, x19, x26
    439c:	mov	x23, x0
    43a0:	movk	x28, #0x9e37, lsl #48
    43a4:	mov	x0, x23
    43a8:	str	x2, [sp, #104]
    43ac:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    43b0:	madd	x27, x0, x24, x27
    43b4:	add	x0, x23, #0x8
    43b8:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    43bc:	madd	x25, x0, x24, x25
    43c0:	add	x0, x23, #0x10
    43c4:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    43c8:	madd	x19, x0, x24, x19
    43cc:	add	x0, x23, #0x18
    43d0:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    43d4:	madd	x26, x0, x24, x26
    43d8:	ror	x27, x27, #33
    43dc:	ror	x25, x25, #33
    43e0:	ror	x19, x19, #33
    43e4:	ror	x26, x26, #33
    43e8:	ldr	x2, [sp, #104]
    43ec:	add	x23, x23, #0x20
    43f0:	mul	x27, x27, x28
    43f4:	mul	x25, x25, x28
    43f8:	cmp	x2, x23
    43fc:	mul	x19, x19, x28
    4400:	mul	x26, x26, x28
    4404:	b.cs	43a4 <XXH64+0x310>  // b.hs, b.nlast
    4408:	sub	x0, x22, #0x20
    440c:	add	x2, x20, #0x1
    4410:	sub	x1, x21, #0x1f
    4414:	and	x0, x0, #0xffffffffffffffe0
    4418:	cmp	x1, x2
    441c:	add	x0, x0, #0x20
    4420:	mov	x1, #0x20                  	// #32
    4424:	csel	x0, x0, x1, cs  // cs = hs, nlast
    4428:	add	x20, x20, x0
    442c:	ror	x2, x19, #52
    4430:	ror	x0, x26, #46
    4434:	add	x2, x2, x0
    4438:	ror	x1, x27, #63
    443c:	ror	x0, x25, #57
    4440:	add	x0, x1, x0
    4444:	mov	x1, x27
    4448:	add	x0, x2, x0
    444c:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4450:	mov	x1, x25
    4454:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4458:	mov	x1, x19
    445c:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4460:	mov	x1, x26
    4464:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4468:	mov	x24, #0xeb4f                	// #60239
    446c:	mov	x23, #0xca87                	// #51847
    4470:	mov	x25, #0xae63                	// #44643
    4474:	movk	x24, #0x27d4, lsl #16
    4478:	movk	x23, #0x85eb, lsl #16
    447c:	movk	x25, #0xc2b2, lsl #16
    4480:	add	x19, x22, x0
    4484:	movk	x24, #0xae3d, lsl #32
    4488:	movk	x23, #0x79b1, lsl #32
    448c:	movk	x25, #0xca77, lsl #32
    4490:	mov	x0, x20
    4494:	movk	x24, #0xc2b2, lsl #48
    4498:	movk	x23, #0x9e37, lsl #48
    449c:	movk	x25, #0x85eb, lsl #48
    44a0:	add	x22, x0, #0x8
    44a4:	cmp	x22, x21
    44a8:	b.ls	4578 <XXH64+0x4e4>  // b.plast
    44ac:	sub	x0, x21, x20
    44b0:	add	x2, x20, #0x1
    44b4:	add	x1, x21, #0x1
    44b8:	and	x0, x0, #0xfffffffffffffff8
    44bc:	cmp	x1, x2
    44c0:	csel	x0, x0, xzr, cs  // cs = hs, nlast
    44c4:	add	x0, x20, x0
    44c8:	add	x20, x0, #0x4
    44cc:	cmp	x20, x21
    44d0:	b.hi	4520 <XXH64+0x48c>  // b.pmore
    44d4:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    44d8:	mov	w1, w0
    44dc:	mov	x0, #0xca87                	// #51847
    44e0:	movk	x0, #0x85eb, lsl #16
    44e4:	movk	x0, #0x79b1, lsl #32
    44e8:	movk	x0, #0x9e37, lsl #48
    44ec:	mul	x1, x1, x0
    44f0:	mov	x0, #0x79f9                	// #31225
    44f4:	movk	x0, #0x9e37, lsl #16
    44f8:	eor	x19, x1, x19
    44fc:	movk	x0, #0x67b1, lsl #32
    4500:	movk	x0, #0x1656, lsl #48
    4504:	ror	x1, x19, #41
    4508:	mov	x19, #0xeb4f                	// #60239
    450c:	movk	x19, #0x27d4, lsl #16
    4510:	movk	x19, #0xae3d, lsl #32
    4514:	movk	x19, #0xc2b2, lsl #48
    4518:	madd	x19, x1, x19, x0
    451c:	mov	x0, x20
    4520:	mov	x2, #0x67c5                	// #26565
    4524:	mov	x3, #0xca87                	// #51847
    4528:	movk	x2, #0x1656, lsl #16
    452c:	movk	x3, #0x85eb, lsl #16
    4530:	movk	x2, #0xeb2f, lsl #32
    4534:	movk	x3, #0x79b1, lsl #32
    4538:	movk	x2, #0x27d4, lsl #48
    453c:	movk	x3, #0x9e37, lsl #48
    4540:	cmp	x0, x21
    4544:	b.cs	42a8 <XXH64+0x214>  // b.hs, b.nlast
    4548:	ldrb	w1, [x0], #1
    454c:	mul	x1, x1, x2
    4550:	eor	x19, x1, x19
    4554:	ror	x19, x19, #53
    4558:	mul	x19, x19, x3
    455c:	b	4540 <XXH64+0x4ac>
    4560:	mov	x0, #0x67c5                	// #26565
    4564:	movk	x0, #0x1656, lsl #16
    4568:	movk	x0, #0xeb2f, lsl #32
    456c:	movk	x0, #0x27d4, lsl #48
    4570:	add	x0, x2, x0
    4574:	b	4468 <XXH64+0x3d4>
    4578:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    457c:	mul	x0, x0, x24
    4580:	ror	x0, x0, #33
    4584:	mul	x0, x0, x23
    4588:	eor	x19, x0, x19
    458c:	mov	x0, x22
    4590:	ror	x19, x19, #37
    4594:	madd	x19, x19, x23, x25
    4598:	b	44a0 <XXH64+0x40c>

000000000000459c <XXH32_createState>:
    459c:	mov	x0, #0x30                  	// #48
    45a0:	b	0 <grub_malloc>

00000000000045a4 <XXH32_freeState>:
    45a4:	stp	x29, x30, [sp, #-16]!
    45a8:	mov	x29, sp
    45ac:	bl	0 <grub_free>
    45b0:	mov	w0, #0x0                   	// #0
    45b4:	ldp	x29, x30, [sp], #16
    45b8:	ret

00000000000045bc <XXH64_createState>:
    45bc:	mov	x0, #0x58                  	// #88
    45c0:	b	0 <grub_malloc>

00000000000045c4 <XXH64_freeState>:
    45c4:	stp	x29, x30, [sp, #-16]!
    45c8:	mov	x29, sp
    45cc:	bl	0 <grub_free>
    45d0:	mov	w0, #0x0                   	// #0
    45d4:	ldp	x29, x30, [sp], #16
    45d8:	ret

00000000000045dc <XXH32_reset>:
    45dc:	stp	x29, x30, [sp, #-80]!
    45e0:	mov	x2, #0x2c                  	// #44
    45e4:	mov	x29, sp
    45e8:	stp	x19, x20, [sp, #16]
    45ec:	mov	w19, w1
    45f0:	mov	x20, x0
    45f4:	mov	w1, #0x0                   	// #0
    45f8:	add	x0, sp, #0x20
    45fc:	bl	0 <grub_memset>
    4600:	str	w19, [sp, #48]
    4604:	mov	w0, #0x4428                	// #17448
    4608:	mov	w1, #0x864f                	// #34383
    460c:	movk	w0, #0x2423, lsl #16
    4610:	add	w0, w19, w0
    4614:	str	w0, [sp, #40]
    4618:	mov	w0, #0xca77                	// #51831
    461c:	movk	w1, #0x61c8, lsl #16
    4620:	movk	w0, #0x85eb, lsl #16
    4624:	add	w0, w19, w0
    4628:	mov	x2, #0x30                  	// #48
    462c:	add	w19, w19, w1
    4630:	add	x1, sp, #0x20
    4634:	str	w0, [sp, #44]
    4638:	mov	x0, x20
    463c:	str	w19, [sp, #52]
    4640:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4644:	mov	w0, #0x0                   	// #0
    4648:	ldp	x19, x20, [sp, #16]
    464c:	ldp	x29, x30, [sp], #80
    4650:	ret

0000000000004654 <XXH64_reset>:
    4654:	stp	x29, x30, [sp, #-128]!
    4658:	mov	x2, #0x50                  	// #80
    465c:	mov	x29, sp
    4660:	stp	x19, x20, [sp, #16]
    4664:	mov	x19, x1
    4668:	mov	x20, x0
    466c:	mov	w1, #0x0                   	// #0
    4670:	add	x0, sp, #0x28
    4674:	bl	0 <grub_memset>
    4678:	str	x19, [sp, #64]
    467c:	mov	x0, #0xb5d6                	// #46550
    4680:	mov	x1, #0x3579                	// #13689
    4684:	movk	x0, #0xadc0, lsl #16
    4688:	movk	x1, #0x7a14, lsl #16
    468c:	movk	x0, #0x27ee, lsl #32
    4690:	movk	x1, #0x864e, lsl #32
    4694:	movk	x0, #0x60ea, lsl #48
    4698:	add	x0, x19, x0
    469c:	str	x0, [sp, #48]
    46a0:	mov	x0, #0xeb4f                	// #60239
    46a4:	movk	x0, #0x27d4, lsl #16
    46a8:	movk	x1, #0x61c8, lsl #48
    46ac:	movk	x0, #0xae3d, lsl #32
    46b0:	mov	x2, #0x58                  	// #88
    46b4:	movk	x0, #0xc2b2, lsl #48
    46b8:	add	x0, x19, x0
    46bc:	add	x19, x19, x1
    46c0:	add	x1, sp, #0x28
    46c4:	str	x0, [sp, #56]
    46c8:	mov	x0, x20
    46cc:	str	x19, [sp, #72]
    46d0:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    46d4:	mov	w0, #0x0                   	// #0
    46d8:	ldp	x19, x20, [sp, #16]
    46dc:	ldp	x29, x30, [sp], #128
    46e0:	ret

00000000000046e4 <XXH32_update>:
    46e4:	stp	x29, x30, [sp, #-112]!
    46e8:	cmp	x2, #0xf
    46ec:	mov	x29, sp
    46f0:	stp	x19, x20, [sp, #16]
    46f4:	mov	x19, x0
    46f8:	ldr	w0, [x0]
    46fc:	stp	x21, x22, [sp, #32]
    4700:	add	w0, w0, w2
    4704:	stp	x23, x24, [sp, #48]
    4708:	ccmp	w0, #0xf, #0x2, ls  // ls = plast
    470c:	cset	w3, hi  // hi = pmore
    4710:	stp	x25, x26, [sp, #64]
    4714:	add	x23, x1, x2
    4718:	stp	x27, x28, [sp, #80]
    471c:	str	w0, [x19]
    4720:	ldr	w0, [x19, #4]
    4724:	orr	w0, w0, w3
    4728:	ldr	w3, [x19, #40]
    472c:	str	w0, [x19, #4]
    4730:	mov	w0, w3
    4734:	add	x4, x2, w3, uxtw
    4738:	cmp	x4, #0xf
    473c:	b.hi	477c <XXH32_update+0x98>  // b.pmore
    4740:	add	x3, x19, #0x18
    4744:	mov	x21, x2
    4748:	add	x0, x3, x0
    474c:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4750:	ldr	w2, [x19, #40]
    4754:	add	w21, w2, w21
    4758:	str	w21, [x19, #40]
    475c:	mov	w0, #0x0                   	// #0
    4760:	ldp	x19, x20, [sp, #16]
    4764:	ldp	x21, x22, [sp, #32]
    4768:	ldp	x23, x24, [sp, #48]
    476c:	ldp	x25, x26, [sp, #64]
    4770:	ldp	x27, x28, [sp, #80]
    4774:	ldp	x29, x30, [sp], #112
    4778:	ret
    477c:	mov	x20, x1
    4780:	cbz	w3, 4828 <XXH32_update+0x144>
    4784:	add	x21, x19, #0x18
    4788:	mov	w24, #0x10                  	// #16
    478c:	add	x0, x21, x0
    4790:	sub	w2, w24, w3
    4794:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4798:	ldr	w25, [x19, #8]
    479c:	mov	w22, #0xca77                	// #51831
    47a0:	mov	x0, x21
    47a4:	movk	w22, #0x85eb, lsl #16
    47a8:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    47ac:	mov	w21, #0x79b1                	// #31153
    47b0:	madd	w0, w0, w22, w25
    47b4:	movk	w21, #0x9e37, lsl #16
    47b8:	ldr	w25, [x19, #12]
    47bc:	ror	w0, w0, #19
    47c0:	mul	w0, w0, w21
    47c4:	str	w0, [x19, #8]
    47c8:	add	x0, x19, #0x1c
    47cc:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    47d0:	madd	w0, w0, w22, w25
    47d4:	ldr	w25, [x19, #16]
    47d8:	ror	w0, w0, #19
    47dc:	mul	w0, w0, w21
    47e0:	str	w0, [x19, #12]
    47e4:	add	x0, x19, #0x20
    47e8:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    47ec:	madd	w0, w0, w22, w25
    47f0:	ldr	w25, [x19, #20]
    47f4:	ror	w0, w0, #19
    47f8:	mul	w0, w0, w21
    47fc:	str	w0, [x19, #16]
    4800:	add	x0, x19, #0x24
    4804:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4808:	madd	w0, w0, w22, w25
    480c:	ror	w0, w0, #19
    4810:	mul	w0, w0, w21
    4814:	str	w0, [x19, #20]
    4818:	ldr	w0, [x19, #40]
    481c:	str	wzr, [x19, #40]
    4820:	sub	w24, w24, w0
    4824:	add	x20, x20, x24
    4828:	sub	x21, x23, #0x10
    482c:	cmp	x21, x20
    4830:	b.cc	48d4 <XXH32_update+0x1f0>  // b.lo, b.ul, b.last
    4834:	ldp	w1, w28, [x19, #8]
    4838:	mov	w25, #0xca77                	// #51831
    483c:	ldp	w27, w26, [x19, #16]
    4840:	mov	w24, #0x79b1                	// #31153
    4844:	mov	x22, x20
    4848:	movk	w25, #0x85eb, lsl #16
    484c:	movk	w24, #0x9e37, lsl #16
    4850:	mov	x0, x22
    4854:	str	w1, [sp, #108]
    4858:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    485c:	ldr	w1, [sp, #108]
    4860:	madd	w0, w0, w25, w1
    4864:	ror	w0, w0, #19
    4868:	mul	w1, w0, w24
    486c:	add	x0, x22, #0x4
    4870:	str	w1, [sp, #108]
    4874:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4878:	madd	w0, w0, w25, w28
    487c:	ror	w0, w0, #19
    4880:	mul	w28, w0, w24
    4884:	add	x0, x22, #0x8
    4888:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    488c:	madd	w0, w0, w25, w27
    4890:	ror	w0, w0, #19
    4894:	mul	w27, w0, w24
    4898:	add	x0, x22, #0xc
    489c:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    48a0:	madd	w0, w0, w25, w26
    48a4:	add	x22, x22, #0x10
    48a8:	ldr	w1, [sp, #108]
    48ac:	cmp	x21, x22
    48b0:	ror	w0, w0, #19
    48b4:	mul	w26, w0, w24
    48b8:	b.cs	4850 <XXH32_update+0x16c>  // b.hs, b.nlast
    48bc:	sub	x21, x21, x20
    48c0:	stp	w1, w28, [x19, #8]
    48c4:	and	x21, x21, #0xfffffffffffffff0
    48c8:	stp	w27, w26, [x19, #16]
    48cc:	add	x21, x21, #0x10
    48d0:	add	x20, x20, x21
    48d4:	cmp	x23, x20
    48d8:	b.ls	475c <XXH32_update+0x78>  // b.plast
    48dc:	sub	x23, x23, x20
    48e0:	mov	x1, x20
    48e4:	mov	x2, x23
    48e8:	add	x0, x19, #0x18
    48ec:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    48f0:	str	w23, [x19, #40]
    48f4:	b	475c <XXH32_update+0x78>

00000000000048f8 <XXH32_digest>:
    48f8:	stp	x29, x30, [sp, #-80]!
    48fc:	mov	x29, sp
    4900:	ldr	w1, [x0, #16]
    4904:	stp	x19, x20, [sp, #16]
    4908:	mov	x20, x0
    490c:	stp	x21, x22, [sp, #32]
    4910:	add	x21, x0, #0x18
    4914:	ldr	w22, [x0, #40]
    4918:	ldr	w0, [x0, #4]
    491c:	stp	x23, x24, [sp, #48]
    4920:	add	x22, x21, x22
    4924:	str	x25, [sp, #64]
    4928:	cbz	w0, 49ec <XXH32_digest+0xf4>
    492c:	ldp	w19, w2, [x20, #8]
    4930:	ror	w19, w19, #31
    4934:	ror	w2, w2, #25
    4938:	add	w2, w19, w2
    493c:	ldr	w19, [x20, #20]
    4940:	ror	w0, w19, #14
    4944:	ror	w19, w1, #20
    4948:	add	w19, w0, w19
    494c:	add	w19, w2, w19
    4950:	ldr	w0, [x20]
    4954:	mov	w24, #0xae3d                	// #44605
    4958:	mov	w25, #0xeb2f                	// #60207
    495c:	movk	w24, #0xc2b2, lsl #16
    4960:	add	w19, w19, w0
    4964:	mov	x0, x21
    4968:	movk	w25, #0x27d4, lsl #16
    496c:	add	x23, x0, #0x4
    4970:	cmp	x22, x23
    4974:	b.cs	49fc <XXH32_digest+0x104>  // b.hs, b.nlast
    4978:	sub	x0, x22, x20
    497c:	add	x1, x22, #0x1
    4980:	sub	x0, x0, #0x18
    4984:	add	x20, x20, #0x19
    4988:	cmp	x1, x20
    498c:	and	x0, x0, #0xfffffffffffffffc
    4990:	csel	x0, x0, xzr, cs  // cs = hs, nlast
    4994:	mov	w1, #0x67b1                	// #26545
    4998:	mov	w2, #0x79b1                	// #31153
    499c:	add	x21, x21, x0
    49a0:	movk	w1, #0x1656, lsl #16
    49a4:	movk	w2, #0x9e37, lsl #16
    49a8:	cmp	x22, x21
    49ac:	b.hi	4a14 <XXH32_digest+0x11c>  // b.pmore
    49b0:	eor	w19, w19, w19, lsr #15
    49b4:	mov	w0, #0xca77                	// #51831
    49b8:	movk	w0, #0x85eb, lsl #16
    49bc:	ldp	x21, x22, [sp, #32]
    49c0:	mul	w0, w19, w0
    49c4:	mov	w19, #0xae3d                	// #44605
    49c8:	movk	w19, #0xc2b2, lsl #16
    49cc:	eor	w0, w0, w0, lsr #13
    49d0:	ldp	x23, x24, [sp, #48]
    49d4:	mul	w0, w0, w19
    49d8:	ldp	x19, x20, [sp, #16]
    49dc:	eor	w0, w0, w0, lsr #16
    49e0:	ldr	x25, [sp, #64]
    49e4:	ldp	x29, x30, [sp], #80
    49e8:	ret
    49ec:	mov	w19, #0x67b1                	// #26545
    49f0:	movk	w19, #0x1656, lsl #16
    49f4:	add	w19, w1, w19
    49f8:	b	4950 <XXH32_digest+0x58>
    49fc:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4a00:	madd	w19, w0, w24, w19
    4a04:	mov	x0, x23
    4a08:	ror	w19, w19, #15
    4a0c:	mul	w19, w19, w25
    4a10:	b	496c <XXH32_digest+0x74>
    4a14:	ldrb	w0, [x21], #1
    4a18:	madd	w19, w0, w1, w19
    4a1c:	ror	w19, w19, #21
    4a20:	mul	w19, w19, w2
    4a24:	b	49a8 <XXH32_digest+0xb0>

0000000000004a28 <XXH64_update>:
    4a28:	stp	x29, x30, [sp, #-112]!
    4a2c:	mov	x29, sp
    4a30:	ldr	w3, [x0, #72]
    4a34:	stp	x19, x20, [sp, #16]
    4a38:	mov	x19, x0
    4a3c:	ldr	x0, [x0]
    4a40:	stp	x21, x22, [sp, #32]
    4a44:	add	x4, x2, w3, uxtw
    4a48:	stp	x23, x24, [sp, #48]
    4a4c:	add	x0, x0, x2
    4a50:	add	x22, x1, x2
    4a54:	stp	x25, x26, [sp, #64]
    4a58:	cmp	x4, #0x1f
    4a5c:	stp	x27, x28, [sp, #80]
    4a60:	str	x0, [x19]
    4a64:	mov	w0, w3
    4a68:	b.hi	4aa8 <XXH64_update+0x80>  // b.pmore
    4a6c:	add	x3, x19, #0x28
    4a70:	mov	x21, x2
    4a74:	add	x0, x3, x0
    4a78:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4a7c:	ldr	w2, [x19, #72]
    4a80:	add	w21, w2, w21
    4a84:	str	w21, [x19, #72]
    4a88:	mov	w0, #0x0                   	// #0
    4a8c:	ldp	x19, x20, [sp, #16]
    4a90:	ldp	x21, x22, [sp, #32]
    4a94:	ldp	x23, x24, [sp, #48]
    4a98:	ldp	x25, x26, [sp, #64]
    4a9c:	ldp	x27, x28, [sp, #80]
    4aa0:	ldp	x29, x30, [sp], #112
    4aa4:	ret
    4aa8:	mov	x20, x1
    4aac:	cbz	w3, 4b64 <XXH64_update+0x13c>
    4ab0:	add	x21, x19, #0x28
    4ab4:	mov	x23, #0xeb4f                	// #60239
    4ab8:	add	x0, x21, x0
    4abc:	mov	w24, #0x20                  	// #32
    4ac0:	movk	x23, #0x27d4, lsl #16
    4ac4:	sub	w2, w24, w3
    4ac8:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4acc:	movk	x23, #0xae3d, lsl #32
    4ad0:	ldr	x25, [x19, #8]
    4ad4:	movk	x23, #0xc2b2, lsl #48
    4ad8:	mov	x0, x21
    4adc:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4ae0:	mov	x21, #0xca87                	// #51847
    4ae4:	madd	x0, x0, x23, x25
    4ae8:	movk	x21, #0x85eb, lsl #16
    4aec:	movk	x21, #0x79b1, lsl #32
    4af0:	movk	x21, #0x9e37, lsl #48
    4af4:	ror	x0, x0, #33
    4af8:	ldr	x25, [x19, #16]
    4afc:	mul	x0, x0, x21
    4b00:	str	x0, [x19, #8]
    4b04:	add	x0, x19, #0x30
    4b08:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4b0c:	madd	x0, x0, x23, x25
    4b10:	ldr	x25, [x19, #24]
    4b14:	ror	x0, x0, #33
    4b18:	mul	x0, x0, x21
    4b1c:	str	x0, [x19, #16]
    4b20:	add	x0, x19, #0x38
    4b24:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4b28:	madd	x0, x0, x23, x25
    4b2c:	ldr	x25, [x19, #32]
    4b30:	ror	x0, x0, #33
    4b34:	mul	x0, x0, x21
    4b38:	str	x0, [x19, #24]
    4b3c:	add	x0, x19, #0x40
    4b40:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4b44:	madd	x0, x0, x23, x25
    4b48:	ror	x0, x0, #33
    4b4c:	mul	x0, x0, x21
    4b50:	str	x0, [x19, #32]
    4b54:	ldr	w0, [x19, #72]
    4b58:	str	wzr, [x19, #72]
    4b5c:	sub	w24, w24, w0
    4b60:	add	x20, x20, x24
    4b64:	add	x0, x20, #0x20
    4b68:	cmp	x22, x0
    4b6c:	b.cc	4c24 <XXH64_update+0x1fc>  // b.lo, b.ul, b.last
    4b70:	ldp	x1, x28, [x19, #8]
    4b74:	mov	x25, #0xeb4f                	// #60239
    4b78:	ldp	x27, x26, [x19, #24]
    4b7c:	mov	x24, #0xca87                	// #51847
    4b80:	movk	x25, #0x27d4, lsl #16
    4b84:	movk	x24, #0x85eb, lsl #16
    4b88:	movk	x25, #0xae3d, lsl #32
    4b8c:	movk	x24, #0x79b1, lsl #32
    4b90:	sub	x21, x22, #0x20
    4b94:	mov	x23, x20
    4b98:	movk	x25, #0xc2b2, lsl #48
    4b9c:	movk	x24, #0x9e37, lsl #48
    4ba0:	mov	x0, x23
    4ba4:	str	x1, [sp, #104]
    4ba8:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4bac:	ldr	x1, [sp, #104]
    4bb0:	madd	x0, x0, x25, x1
    4bb4:	ror	x0, x0, #33
    4bb8:	mul	x1, x0, x24
    4bbc:	add	x0, x23, #0x8
    4bc0:	str	x1, [sp, #104]
    4bc4:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4bc8:	madd	x0, x0, x25, x28
    4bcc:	ror	x0, x0, #33
    4bd0:	mul	x28, x0, x24
    4bd4:	add	x0, x23, #0x10
    4bd8:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4bdc:	madd	x0, x0, x25, x27
    4be0:	ror	x0, x0, #33
    4be4:	mul	x27, x0, x24
    4be8:	add	x0, x23, #0x18
    4bec:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4bf0:	madd	x0, x0, x25, x26
    4bf4:	add	x23, x23, #0x20
    4bf8:	cmp	x21, x23
    4bfc:	ror	x0, x0, #33
    4c00:	ldr	x1, [sp, #104]
    4c04:	mul	x26, x0, x24
    4c08:	b.cs	4ba0 <XXH64_update+0x178>  // b.hs, b.nlast
    4c0c:	sub	x21, x21, x20
    4c10:	stp	x1, x28, [x19, #8]
    4c14:	and	x21, x21, #0xffffffffffffffe0
    4c18:	add	x21, x21, #0x20
    4c1c:	stp	x27, x26, [x19, #24]
    4c20:	add	x20, x20, x21
    4c24:	cmp	x22, x20
    4c28:	b.ls	4a88 <XXH64_update+0x60>  // b.plast
    4c2c:	sub	x22, x22, x20
    4c30:	mov	x1, x20
    4c34:	mov	x2, x22
    4c38:	add	x0, x19, #0x28
    4c3c:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4c40:	str	w22, [x19, #72]
    4c44:	b	4a88 <XXH64_update+0x60>

0000000000004c48 <XXH64_digest>:
    4c48:	stp	x29, x30, [sp, #-80]!
    4c4c:	mov	x29, sp
    4c50:	stp	x19, x20, [sp, #16]
    4c54:	add	x20, x0, #0x28
    4c58:	ldr	x19, [x0]
    4c5c:	stp	x21, x22, [sp, #32]
    4c60:	ldr	w21, [x0, #72]
    4c64:	stp	x23, x24, [sp, #48]
    4c68:	cmp	x19, #0x1f
    4c6c:	mov	x24, x0
    4c70:	stp	x25, x26, [sp, #64]
    4c74:	add	x21, x20, x21
    4c78:	ldr	x3, [x0, #24]
    4c7c:	b.ls	4df0 <XXH64_digest+0x1a8>  // b.plast
    4c80:	ldp	x1, x6, [x0, #8]
    4c84:	ror	x4, x3, #52
    4c88:	ldr	x5, [x0, #32]
    4c8c:	ror	x0, x5, #46
    4c90:	add	x4, x4, x0
    4c94:	ror	x2, x1, #63
    4c98:	ror	x0, x6, #57
    4c9c:	add	x0, x2, x0
    4ca0:	add	x0, x4, x0
    4ca4:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4ca8:	mov	x1, x6
    4cac:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4cb0:	mov	x1, x3
    4cb4:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4cb8:	mov	x1, x5
    4cbc:	bl	3ca8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x74>
    4cc0:	mov	x25, #0xeb4f                	// #60239
    4cc4:	mov	x23, #0xca87                	// #51847
    4cc8:	mov	x26, #0xae63                	// #44643
    4ccc:	movk	x25, #0x27d4, lsl #16
    4cd0:	movk	x23, #0x85eb, lsl #16
    4cd4:	movk	x26, #0xc2b2, lsl #16
    4cd8:	add	x19, x19, x0
    4cdc:	movk	x25, #0xae3d, lsl #32
    4ce0:	movk	x23, #0x79b1, lsl #32
    4ce4:	movk	x26, #0xca77, lsl #32
    4ce8:	mov	x0, x20
    4cec:	movk	x25, #0xc2b2, lsl #48
    4cf0:	movk	x23, #0x9e37, lsl #48
    4cf4:	movk	x26, #0x85eb, lsl #48
    4cf8:	add	x22, x0, #0x8
    4cfc:	cmp	x21, x22
    4d00:	b.cs	4e08 <XXH64_digest+0x1c0>  // b.hs, b.nlast
    4d04:	sub	x2, x21, x24
    4d08:	add	x0, x21, #0x1
    4d0c:	sub	x2, x2, #0x28
    4d10:	add	x1, x24, #0x29
    4d14:	cmp	x0, x1
    4d18:	and	x2, x2, #0xfffffffffffffff8
    4d1c:	csel	x2, x2, xzr, cs  // cs = hs, nlast
    4d20:	add	x0, x20, x2
    4d24:	add	x20, x0, #0x4
    4d28:	cmp	x21, x20
    4d2c:	b.cc	4d7c <XXH64_digest+0x134>  // b.lo, b.ul, b.last
    4d30:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4d34:	mov	w0, w0
    4d38:	mov	x1, #0xca87                	// #51847
    4d3c:	movk	x1, #0x85eb, lsl #16
    4d40:	movk	x1, #0x79b1, lsl #32
    4d44:	movk	x1, #0x9e37, lsl #48
    4d48:	mul	x0, x0, x1
    4d4c:	mov	x1, #0x79f9                	// #31225
    4d50:	movk	x1, #0x9e37, lsl #16
    4d54:	eor	x19, x0, x19
    4d58:	movk	x1, #0x67b1, lsl #32
    4d5c:	movk	x1, #0x1656, lsl #48
    4d60:	ror	x0, x19, #41
    4d64:	mov	x19, #0xeb4f                	// #60239
    4d68:	movk	x19, #0x27d4, lsl #16
    4d6c:	movk	x19, #0xae3d, lsl #32
    4d70:	movk	x19, #0xc2b2, lsl #48
    4d74:	madd	x19, x0, x19, x1
    4d78:	mov	x0, x20
    4d7c:	mov	x2, #0x67c5                	// #26565
    4d80:	mov	x3, #0xca87                	// #51847
    4d84:	movk	x2, #0x1656, lsl #16
    4d88:	movk	x3, #0x85eb, lsl #16
    4d8c:	movk	x2, #0xeb2f, lsl #32
    4d90:	movk	x3, #0x79b1, lsl #32
    4d94:	movk	x2, #0x27d4, lsl #48
    4d98:	movk	x3, #0x9e37, lsl #48
    4d9c:	cmp	x21, x0
    4da0:	b.hi	4e2c <XXH64_digest+0x1e4>  // b.pmore
    4da4:	mov	x0, #0xeb4f                	// #60239
    4da8:	eor	x19, x19, x19, lsr #33
    4dac:	movk	x0, #0x27d4, lsl #16
    4db0:	movk	x0, #0xae3d, lsl #32
    4db4:	movk	x0, #0xc2b2, lsl #48
    4db8:	ldp	x21, x22, [sp, #32]
    4dbc:	mul	x0, x19, x0
    4dc0:	mov	x19, #0x79f9                	// #31225
    4dc4:	movk	x19, #0x9e37, lsl #16
    4dc8:	eor	x0, x0, x0, lsr #29
    4dcc:	movk	x19, #0x67b1, lsl #32
    4dd0:	movk	x19, #0x1656, lsl #48
    4dd4:	ldp	x23, x24, [sp, #48]
    4dd8:	mul	x0, x0, x19
    4ddc:	ldp	x19, x20, [sp, #16]
    4de0:	eor	x0, x0, x0, lsr #32
    4de4:	ldp	x25, x26, [sp, #64]
    4de8:	ldp	x29, x30, [sp], #80
    4dec:	ret
    4df0:	mov	x0, #0x67c5                	// #26565
    4df4:	movk	x0, #0x1656, lsl #16
    4df8:	movk	x0, #0xeb2f, lsl #32
    4dfc:	movk	x0, #0x27d4, lsl #48
    4e00:	add	x0, x3, x0
    4e04:	b	4cc0 <XXH64_digest+0x78>
    4e08:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4e0c:	mul	x2, x0, x25
    4e10:	mov	x0, x22
    4e14:	ror	x2, x2, #33
    4e18:	mul	x2, x2, x23
    4e1c:	eor	x19, x2, x19
    4e20:	ror	x19, x19, #37
    4e24:	madd	x19, x19, x23, x26
    4e28:	b	4cf8 <XXH64_digest+0xb0>
    4e2c:	ldrb	w1, [x0], #1
    4e30:	mul	x1, x1, x2
    4e34:	eor	x19, x1, x19
    4e38:	ror	x19, x19, #53
    4e3c:	mul	x19, x19, x3
    4e40:	b	4d9c <XXH64_digest+0x154>

0000000000004e44 <XXH32_canonicalFromHash>:
    4e44:	stp	x29, x30, [sp, #-32]!
    4e48:	rev	w1, w1
    4e4c:	mov	x2, #0x4                   	// #4
    4e50:	mov	x29, sp
    4e54:	str	w1, [sp, #28]
    4e58:	add	x1, sp, #0x1c
    4e5c:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4e60:	ldp	x29, x30, [sp], #32
    4e64:	ret

0000000000004e68 <XXH64_canonicalFromHash>:
    4e68:	stp	x29, x30, [sp, #-32]!
    4e6c:	rev	x1, x1
    4e70:	mov	x2, #0x8                   	// #8
    4e74:	mov	x29, sp
    4e78:	str	x1, [sp, #24]
    4e7c:	add	x1, sp, #0x18
    4e80:	bl	3cf0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    4e84:	ldp	x29, x30, [sp], #32
    4e88:	ret

0000000000004e8c <XXH32_hashFromCanonical>:
    4e8c:	stp	x29, x30, [sp, #-16]!
    4e90:	mov	x29, sp
    4e94:	bl	3cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0xc0>
    4e98:	rev	w0, w0
    4e9c:	ldp	x29, x30, [sp], #16
    4ea0:	ret

0000000000004ea4 <XXH64_hashFromCanonical>:
    4ea4:	stp	x29, x30, [sp, #-16]!
    4ea8:	mov	x29, sp
    4eac:	bl	3d18 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe4>
    4eb0:	rev	x0, x0
    4eb4:	ldp	x29, x30, [sp], #16
    4eb8:	ret
    4ebc:	nop

0000000000004ec0 <ZSTD_versionNumber>:
    4ec0:	mov	w0, #0x2842                	// #10306
    4ec4:	ret

0000000000004ec8 <ZSTD_versionString>:
    4ec8:	adrp	x0, 0 <FSE_versionNumber>
    4ecc:	ldr	x0, [x0]
    4ed0:	ret
    4ed4:	nop
	...

0000000000004ee0 <ZSTD_isError>:
    4ee0:	cmn	x0, #0x78
    4ee4:	cset	w0, hi  // hi = pmore
    4ee8:	ret

0000000000004eec <ZSTD_getErrorName>:
    4eec:	cmn	x0, #0x78
    4ef0:	b.ls	4efc <ZSTD_getErrorName+0x10>  // b.plast
    4ef4:	neg	w0, w0
    4ef8:	b	4c8 <ERR_getErrorString>
    4efc:	mov	w0, #0x0                   	// #0
    4f00:	b	4ef8 <ZSTD_getErrorName+0xc>

0000000000004f04 <ZSTD_getErrorCode>:
    4f04:	cmn	x0, #0x78
    4f08:	b.ls	4f14 <ZSTD_getErrorCode+0x10>  // b.plast
    4f0c:	neg	w0, w0
    4f10:	ret
    4f14:	mov	w0, #0x0                   	// #0
    4f18:	b	4f10 <ZSTD_getErrorCode+0xc>

0000000000004f1c <ZSTD_getErrorString>:
    4f1c:	b	4c8 <ERR_getErrorString>

0000000000004f20 <ZSTD_malloc>:
    4f20:	ldr	x4, [x1]
    4f24:	mov	x2, x1
    4f28:	cbz	x4, 4f3c <ZSTD_malloc+0x1c>
    4f2c:	mov	x1, x0
    4f30:	mov	x16, x4
    4f34:	ldr	x0, [x2, #16]
    4f38:	br	x16
    4f3c:	b	0 <grub_malloc>

0000000000004f40 <ZSTD_calloc>:
    4f40:	ldr	x3, [x1]
    4f44:	cbnz	x3, 4f4c <ZSTD_calloc+0xc>
    4f48:	b	0 <grub_zalloc>
    4f4c:	stp	x29, x30, [sp, #-32]!
    4f50:	mov	x2, x1
    4f54:	mov	x1, x0
    4f58:	mov	x29, sp
    4f5c:	stp	x19, x20, [sp, #16]
    4f60:	mov	x19, x0
    4f64:	ldr	x0, [x2, #16]
    4f68:	blr	x3
    4f6c:	mov	x20, x0
    4f70:	mov	x2, x19
    4f74:	mov	w1, #0x0                   	// #0
    4f78:	bl	0 <grub_memset>
    4f7c:	mov	x0, x20
    4f80:	ldp	x19, x20, [sp, #16]
    4f84:	ldp	x29, x30, [sp], #32
    4f88:	ret

0000000000004f8c <ZSTD_free>:
    4f8c:	mov	x2, x1
    4f90:	cbz	x0, 4fb0 <ZSTD_free+0x24>
    4f94:	ldr	x4, [x1, #8]
    4f98:	cbz	x4, 4fac <ZSTD_free+0x20>
    4f9c:	mov	x1, x0
    4fa0:	mov	x16, x4
    4fa4:	ldr	x0, [x2, #16]
    4fa8:	br	x16
    4fac:	b	0 <grub_free>
    4fb0:	ret
    4fb4:	nop
    4fb8:	ldr	x2, [x0]
    4fbc:	mvn	w4, w1
    4fc0:	ldr	w3, [x0, #8]
    4fc4:	add	w1, w1, w3
    4fc8:	str	w1, [x0, #8]
    4fcc:	lsl	x2, x2, x3
    4fd0:	lsr	x2, x2, #1
    4fd4:	lsr	x0, x2, x4
    4fd8:	ret
    4fdc:	ldr	x2, [x0]
    4fe0:	neg	w4, w1
    4fe4:	ldr	w3, [x0, #8]
    4fe8:	add	w1, w1, w3
    4fec:	str	w1, [x0, #8]
    4ff0:	lsl	x2, x2, x3
    4ff4:	lsr	x0, x2, x4
    4ff8:	ret
    4ffc:	ldr	w3, [x0, #8]
    5000:	mov	x1, x0
    5004:	cmp	w3, #0x40
    5008:	b.hi	509c <ZSTD_free+0x110>  // b.pmore
    500c:	ldr	x2, [x0, #16]
    5010:	ldr	x0, [x0, #32]
    5014:	cmp	x2, x0
    5018:	b.cc	5040 <ZSTD_free+0xb4>  // b.lo, b.ul, b.last
    501c:	lsr	w0, w3, #3
    5020:	and	w3, w3, #0x7
    5024:	sub	x2, x2, x0
    5028:	ldr	x0, [x2]
    502c:	str	x0, [x1]
    5030:	mov	w0, #0x0                   	// #0
    5034:	str	w3, [x1, #8]
    5038:	str	x2, [x1, #16]
    503c:	ret
    5040:	ldr	x0, [x1, #24]
    5044:	cmp	x2, x0
    5048:	b.ne	505c <ZSTD_free+0xd0>  // b.any
    504c:	cmp	w3, #0x40
    5050:	cset	w0, eq  // eq = none
    5054:	add	w0, w0, #0x1
    5058:	b	503c <ZSTD_free+0xb0>
    505c:	lsr	w5, w3, #3
    5060:	lsr	w4, w3, #3
    5064:	sub	x5, x2, x5
    5068:	cmp	x0, x5
    506c:	b.ls	5094 <ZSTD_free+0x108>  // b.plast
    5070:	sub	w4, w2, w0
    5074:	mov	w0, #0x1                   	// #1
    5078:	sub	x2, x2, w4, uxtw
    507c:	str	x2, [x1, #16]
    5080:	sub	w3, w3, w4, lsl #3
    5084:	str	w3, [x1, #8]
    5088:	ldr	x2, [x2]
    508c:	str	x2, [x1]
    5090:	b	503c <ZSTD_free+0xb0>
    5094:	mov	w0, #0x0                   	// #0
    5098:	b	5078 <ZSTD_free+0xec>
    509c:	mov	w0, #0x3                   	// #3
    50a0:	b	503c <ZSTD_free+0xb0>
    50a4:	add	x1, x0, #0x4, lsl #12
    50a8:	mov	x2, #0x1                   	// #1
    50ac:	movk	x2, #0x800, lsl #16
    50b0:	mov	x4, #0x7200                	// #29184
    50b4:	str	wzr, [x1, #12560]
    50b8:	str	x2, [x0, #29072]
    50bc:	add	x2, x0, x4
    50c0:	str	xzr, [x0, #28768]
    50c4:	str	xzr, [x0, #29000]
    50c8:	str	xzr, [x0, #29016]
    50cc:	str	xzr, [x0, #29024]
    50d0:	str	xzr, [x0, #29048]
    50d4:	str	xzr, [x0, #29056]
    50d8:	str	xzr, [x0, #29088]
    50dc:	stur	xzr, [x2, #-148]
    50e0:	str	xzr, [x0, #29120]
    50e4:	str	wzr, [x1, #12624]
    50e8:	str	wzr, [x1, #12744]
    50ec:	str	wzr, [x1, #12756]
    50f0:	ret
    50f4:	cmp	w2, #0x1
    50f8:	mov	x2, #0x5                   	// #5
    50fc:	csinc	x3, x2, xzr, ne  // ne = any
    5100:	cmp	x3, x1
    5104:	b.hi	5158 <ZSTD_free+0x1cc>  // b.pmore
    5108:	add	x0, x0, x3
    510c:	ldurb	w1, [x0, #-1]
    5110:	adrp	x0, 0 <FSE_versionNumber>
    5114:	ldr	x0, [x0]
    5118:	and	x5, x1, #0x3
    511c:	ubfx	x4, x1, #6, #2
    5120:	cmp	wzr, w1, lsr #6
    5124:	add	x2, x0, #0x20
    5128:	ldr	x0, [x0, x5, lsl #3]
    512c:	ldr	x2, [x2, x4, lsl #3]
    5130:	add	x0, x0, x2
    5134:	mvn	w2, w1, lsr #5
    5138:	and	x2, x2, #0x1
    513c:	add	x2, x2, x3
    5140:	add	x2, x0, x2
    5144:	ubfx	x0, x1, #5, #1
    5148:	csel	w0, w0, wzr, eq  // eq = none
    514c:	and	x0, x0, #0xff
    5150:	add	x0, x2, x0
    5154:	ret
    5158:	mov	x0, #0xffffffffffffffb8    	// #-72
    515c:	b	5154 <ZSTD_free+0x1c8>
	...
    5168:	stp	x29, x30, [sp, #-16]!
    516c:	mov	x7, x0
    5170:	mov	x5, x1
    5174:	mov	x29, sp
    5178:	mov	x0, x1
    517c:	ldr	w1, [x2, #4]
    5180:	mov	x6, x2
    5184:	bl	4fb8 <ZSTD_free+0x2c>
    5188:	str	x0, [x7]
    518c:	mov	x0, x5
    5190:	bl	4ffc <ZSTD_free+0x70>
    5194:	add	x6, x6, #0x8
    5198:	ldp	x29, x30, [sp], #16
    519c:	str	x6, [x7, #8]
    51a0:	ret
    51a4:	ldr	x2, [x0, #28744]
    51a8:	cmp	x2, x1
    51ac:	b.eq	51cc <ZSTD_free+0x240>  // b.none
    51b0:	ldr	x3, [x0, #28752]
    51b4:	str	x2, [x0, #28768]
    51b8:	str	x1, [x0, #28744]
    51bc:	sub	x2, x2, x3
    51c0:	str	x1, [x0, #28752]
    51c4:	sub	x2, x1, x2
    51c8:	str	x2, [x0, #28760]
    51cc:	ret
    51d0:	b	0 <grub_memmove>
    51d4:	stp	x29, x30, [sp, #-224]!
    51d8:	mov	x6, #0x0                   	// #0
    51dc:	mov	x29, sp
    51e0:	stp	x21, x22, [sp, #32]
    51e4:	mov	x21, x3
    51e8:	sub	w3, w5, #0x1
    51ec:	stp	x19, x20, [sp, #16]
    51f0:	mov	x19, x0
    51f4:	mov	x22, x4
    51f8:	stp	x27, x28, [sp, #80]
    51fc:	add	x28, x0, #0x8
    5200:	mov	w0, #0x1                   	// #1
    5204:	lsl	w3, w0, w3
    5208:	stp	x23, x24, [sp, #48]
    520c:	lsl	w23, w0, w5
    5210:	sub	w27, w23, #0x1
    5214:	mov	w20, w5
    5218:	mov	x24, x1
    521c:	sxth	w3, w3
    5220:	add	x4, sp, #0x70
    5224:	mov	w7, w0
    5228:	stp	x25, x26, [sp, #64]
    522c:	mov	w25, w27
    5230:	add	w26, w2, #0x1
    5234:	stp	w0, w5, [sp, #104]
    5238:	mov	w5, w0
    523c:	mov	w2, #0x0                   	// #0
    5240:	cmp	w26, w6
    5244:	b.hi	52b4 <ZSTD_free+0x328>  // b.pmore
    5248:	cbz	w2, 5250 <ZSTD_free+0x2c4>
    524c:	str	w0, [sp, #104]
    5250:	add	x1, sp, #0x68
    5254:	mov	x0, x19
    5258:	mov	x2, #0x8                   	// #8
    525c:	bl	51d0 <ZSTD_free+0x244>
    5260:	lsr	w5, w23, #3
    5264:	mov	x3, #0x0                   	// #0
    5268:	add	w5, w5, w23, lsr #1
    526c:	mov	w0, #0x0                   	// #0
    5270:	add	w5, w5, #0x3
    5274:	mov	w4, w3
    5278:	cmp	w26, w3
    527c:	b.hi	5318 <ZSTD_free+0x38c>  // b.pmore
    5280:	mov	x0, x19
    5284:	add	x4, x19, w23, uxtw #3
    5288:	add	x3, sp, #0x70
    528c:	mov	w6, #0x1f                  	// #31
    5290:	cmp	x0, x4
    5294:	b.ne	5324 <ZSTD_free+0x398>  // b.any
    5298:	ldp	x19, x20, [sp, #16]
    529c:	ldp	x21, x22, [sp, #32]
    52a0:	ldp	x23, x24, [sp, #48]
    52a4:	ldp	x25, x26, [sp, #64]
    52a8:	ldp	x27, x28, [sp, #80]
    52ac:	ldp	x29, x30, [sp], #224
    52b0:	ret
    52b4:	ldrsh	w1, [x24, x6, lsl #1]
    52b8:	cmn	w1, #0x1
    52bc:	b.ne	52d8 <ZSTD_free+0x34c>  // b.any
    52c0:	add	x1, x28, w25, uxtw #3
    52c4:	sub	w25, w25, #0x1
    52c8:	strh	w7, [x4, x6, lsl #1]
    52cc:	str	w6, [x1, #4]
    52d0:	add	x6, x6, #0x1
    52d4:	b	5240 <ZSTD_free+0x2b4>
    52d8:	cmp	w1, w3
    52dc:	strh	w1, [x4, x6, lsl #1]
    52e0:	csel	w2, w2, w5, lt  // lt = tstop
    52e4:	csel	w0, w0, wzr, lt  // lt = tstop
    52e8:	b	52d0 <ZSTD_free+0x344>
    52ec:	add	x6, x28, w0, uxtw #3
    52f0:	str	w4, [x6, #4]
    52f4:	add	w0, w0, w5
    52f8:	and	w0, w0, w27
    52fc:	cmp	w25, w0
    5300:	b.cc	52f4 <ZSTD_free+0x368>  // b.lo, b.ul, b.last
    5304:	add	w1, w1, #0x1
    5308:	cmp	w2, w1
    530c:	b.gt	52ec <ZSTD_free+0x360>
    5310:	add	x3, x3, #0x1
    5314:	b	5274 <ZSTD_free+0x2e8>
    5318:	ldrsh	w2, [x24, x3, lsl #1]
    531c:	mov	w1, #0x0                   	// #0
    5320:	b	5308 <ZSTD_free+0x37c>
    5324:	ldr	w5, [x0, #12]
    5328:	add	x0, x0, #0x8
    532c:	ldrh	w2, [x3, x5, lsl #1]
    5330:	add	w1, w2, #0x1
    5334:	strh	w1, [x3, x5, lsl #1]
    5338:	clz	w1, w2
    533c:	lsl	x5, x5, #2
    5340:	sub	w1, w6, w1
    5344:	sub	w1, w20, w1
    5348:	and	w1, w1, #0xff
    534c:	strb	w1, [x0, #3]
    5350:	lsl	w1, w2, w1
    5354:	sub	w1, w1, w23
    5358:	strh	w1, [x0]
    535c:	ldr	w1, [x22, x5]
    5360:	strb	w1, [x0, #2]
    5364:	ldr	w1, [x21, x5]
    5368:	str	w1, [x0, #4]
    536c:	b	5290 <ZSTD_free+0x304>
    5370:	stp	x29, x30, [sp, #-208]!
    5374:	cmp	w2, #0x2
    5378:	mov	x29, sp
    537c:	stp	x19, x20, [sp, #16]
    5380:	mov	x20, x0
    5384:	ldr	w0, [sp, #224]
    5388:	stp	x21, x22, [sp, #32]
    538c:	mov	x21, x1
    5390:	mov	x22, x7
    5394:	stp	x23, x24, [sp, #48]
    5398:	mov	w23, w4
    539c:	mov	x4, x6
    53a0:	str	w3, [sp, #76]
    53a4:	ldr	x24, [sp, #208]
    53a8:	b.eq	5460 <ZSTD_free+0x4d4>  // b.none
    53ac:	cmp	w2, #0x3
    53b0:	b.eq	541c <ZSTD_free+0x490>  // b.none
    53b4:	cmp	w2, #0x1
    53b8:	b.ne	540c <ZSTD_free+0x480>  // b.any
    53bc:	cbz	x6, 54ac <ZSTD_free+0x520>
    53c0:	ldrb	w0, [x5]
    53c4:	cmp	w0, w3
    53c8:	b.hi	54b4 <ZSTD_free+0x528>  // b.pmore
    53cc:	ubfiz	x0, x0, #2, #8
    53d0:	mov	x19, #0x1                   	// #1
    53d4:	ldr	w1, [x7, x0]
    53d8:	ldr	w0, [x24, x0]
    53dc:	str	xzr, [x20]
    53e0:	strh	wzr, [x20, #8]
    53e4:	strb	w0, [x20, #10]
    53e8:	strb	wzr, [x20, #11]
    53ec:	str	w1, [x20, #12]
    53f0:	str	x20, [x21]
    53f4:	mov	x0, x19
    53f8:	ldp	x19, x20, [sp, #16]
    53fc:	ldp	x21, x22, [sp, #32]
    5400:	ldp	x23, x24, [sp, #48]
    5404:	ldp	x29, x30, [sp], #208
    5408:	ret
    540c:	ldr	x0, [sp, #216]
    5410:	str	x0, [x1]
    5414:	mov	x19, #0x0                   	// #0
    5418:	b	53f4 <ZSTD_free+0x468>
    541c:	cbz	w0, 54b4 <ZSTD_free+0x528>
    5420:	ldr	w0, [sp, #232]
    5424:	cmp	w0, #0x0
    5428:	ldr	w0, [sp, #240]
    542c:	ccmp	w0, #0x18, #0x4, ne  // ne = any
    5430:	b.le	5414 <ZSTD_free+0x488>
    5434:	mov	w0, #0x1                   	// #1
    5438:	mov	x1, #0x0                   	// #0
    543c:	lsl	w0, w0, w23
    5440:	add	w0, w0, #0x1
    5444:	ldr	x2, [x21]
    5448:	sbfiz	x0, x0, #3, #32
    544c:	prfm	pldl2keep, [x2, x1]
    5450:	add	x1, x1, #0x40
    5454:	cmp	x0, x1
    5458:	b.hi	544c <ZSTD_free+0x4c0>  // b.pmore
    545c:	b	5414 <ZSTD_free+0x488>
    5460:	mov	x3, x5
    5464:	add	x2, sp, #0x5c
    5468:	add	x1, sp, #0x4c
    546c:	add	x0, sp, #0x60
    5470:	bl	50 <FSE_readNCount>
    5474:	mov	x19, x0
    5478:	cmn	x0, #0x78
    547c:	b.hi	54b4 <ZSTD_free+0x528>  // b.pmore
    5480:	ldr	w5, [sp, #92]
    5484:	cmp	w5, w23
    5488:	b.hi	54b4 <ZSTD_free+0x528>  // b.pmore
    548c:	ldr	w2, [sp, #76]
    5490:	mov	x4, x24
    5494:	mov	x3, x22
    5498:	add	x1, sp, #0x60
    549c:	mov	x0, x20
    54a0:	bl	51d4 <ZSTD_free+0x248>
    54a4:	str	x20, [x21]
    54a8:	b	53f4 <ZSTD_free+0x468>
    54ac:	mov	x19, #0xffffffffffffffb8    	// #-72
    54b0:	b	53f4 <ZSTD_free+0x468>
    54b4:	mov	x19, #0xffffffffffffffec    	// #-20
    54b8:	b	53f4 <ZSTD_free+0x468>
    54bc:	cmp	x2, #0x8
    54c0:	b.hi	54cc <ZSTD_free+0x540>  // b.pmore
    54c4:	mov	x0, #0xffffffffffffffe2    	// #-30
    54c8:	ret
    54cc:	stp	x29, x30, [sp, #-208]!
    54d0:	mov	x3, x0
    54d4:	mov	x4, #0x2818                	// #10264
    54d8:	mov	x29, sp
    54dc:	stp	x21, x22, [sp, #32]
    54e0:	add	x21, x1, #0x8
    54e4:	stp	x19, x20, [sp, #16]
    54e8:	stp	x23, x24, [sp, #48]
    54ec:	mov	x24, x1
    54f0:	mov	x23, x2
    54f4:	mov	x1, x21
    54f8:	sub	x2, x2, #0x8
    54fc:	str	x25, [sp, #64]
    5500:	mov	x25, x0
    5504:	add	x0, x0, x4
    5508:	bl	2ec0 <HUF_readDTableX2_wksp>
    550c:	cmn	x0, #0x78
    5510:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5514:	add	x21, x21, x0
    5518:	add	x23, x24, x23
    551c:	mov	w0, #0x1f                  	// #31
    5520:	sub	x4, x23, x21
    5524:	mov	x3, x21
    5528:	add	x2, sp, #0x5c
    552c:	add	x1, sp, #0x58
    5530:	str	w0, [sp, #88]
    5534:	add	x0, sp, #0x60
    5538:	bl	50 <FSE_readNCount>
    553c:	mov	x19, x0
    5540:	cmn	x0, #0x78
    5544:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5548:	ldr	w2, [sp, #88]
    554c:	cmp	w2, #0x1f
    5550:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5554:	ldr	w5, [sp, #92]
    5558:	cmp	w5, #0x8
    555c:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5560:	adrp	x0, 0 <FSE_versionNumber>
    5564:	mov	x7, #0x1008                	// #4104
    5568:	add	x1, sp, #0x60
    556c:	add	x21, x21, x19
    5570:	ldr	x22, [x0]
    5574:	add	x0, x25, x7
    5578:	add	x4, x22, #0x40
    557c:	add	x3, x22, #0xc0
    5580:	bl	51d4 <ZSTD_free+0x248>
    5584:	mov	w0, #0x34                  	// #52
    5588:	sub	x4, x23, x21
    558c:	mov	x3, x21
    5590:	add	x2, sp, #0x5c
    5594:	add	x1, sp, #0x58
    5598:	str	w0, [sp, #88]
    559c:	add	x0, sp, #0x60
    55a0:	bl	50 <FSE_readNCount>
    55a4:	mov	x19, x0
    55a8:	cmn	x0, #0x78
    55ac:	b.ls	55cc <ZSTD_free+0x640>  // b.plast
    55b0:	mov	x0, #0xffffffffffffffe2    	// #-30
    55b4:	ldp	x19, x20, [sp, #16]
    55b8:	ldp	x21, x22, [sp, #32]
    55bc:	ldp	x23, x24, [sp, #48]
    55c0:	ldr	x25, [sp, #64]
    55c4:	ldp	x29, x30, [sp], #208
    55c8:	ret
    55cc:	ldr	w2, [sp, #88]
    55d0:	cmp	w2, #0x34
    55d4:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    55d8:	ldr	w5, [sp, #92]
    55dc:	cmp	w5, #0x9
    55e0:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    55e4:	mov	x6, #0x1810                	// #6160
    55e8:	add	x4, x22, #0x140
    55ec:	add	x0, x25, x6
    55f0:	add	x3, x22, #0x214
    55f4:	add	x1, sp, #0x60
    55f8:	bl	51d4 <ZSTD_free+0x248>
    55fc:	add	x19, x21, x19
    5600:	mov	w0, #0x23                  	// #35
    5604:	sub	x4, x23, x19
    5608:	mov	x3, x19
    560c:	add	x2, sp, #0x5c
    5610:	add	x1, sp, #0x58
    5614:	str	w0, [sp, #88]
    5618:	add	x0, sp, #0x60
    561c:	bl	50 <FSE_readNCount>
    5620:	mov	x20, x0
    5624:	cmn	x0, #0x78
    5628:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    562c:	ldr	w2, [sp, #88]
    5630:	cmp	w2, #0x23
    5634:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5638:	ldr	w5, [sp, #92]
    563c:	cmp	w5, #0x9
    5640:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5644:	add	x4, x22, #0x2e8
    5648:	add	x3, x22, #0x378
    564c:	add	x1, sp, #0x60
    5650:	mov	x0, x25
    5654:	bl	51d4 <ZSTD_free+0x248>
    5658:	add	x3, x19, x20
    565c:	add	x4, x3, #0xc
    5660:	cmp	x4, x23
    5664:	b.hi	55b0 <ZSTD_free+0x624>  // b.pmore
    5668:	mov	x0, #0x681c                	// #26652
    566c:	sub	x23, x23, x4
    5670:	add	x0, x25, x0
    5674:	ldr	w1, [x3], #4
    5678:	cbz	w1, 55b0 <ZSTD_free+0x624>
    567c:	cmp	x23, w1, uxtw
    5680:	b.ls	55b0 <ZSTD_free+0x624>  // b.plast
    5684:	str	w1, [x0], #4
    5688:	cmp	x4, x3
    568c:	b.ne	5674 <ZSTD_free+0x6e8>  // b.any
    5690:	sub	x0, x4, x24
    5694:	b	55b4 <ZSTD_free+0x628>
	...
    56a0:	stp	x29, x30, [sp, #-80]!
    56a4:	cmp	x1, #0x0
    56a8:	ccmp	w3, #0x1, #0x4, ne  // ne = any
    56ac:	mov	x29, sp
    56b0:	stp	x19, x20, [sp, #16]
    56b4:	mov	x19, x0
    56b8:	mov	x20, x2
    56bc:	stp	x21, x22, [sp, #32]
    56c0:	mov	x21, x1
    56c4:	mov	w22, w4
    56c8:	b.eq	56d0 <ZSTD_free+0x744>  // b.none
    56cc:	cbnz	x2, 5710 <ZSTD_free+0x784>
    56d0:	cmp	x21, #0x0
    56d4:	stp	xzr, x21, [x19]
    56d8:	csel	x20, x20, xzr, ne  // ne = any
    56dc:	mov	w0, #0xc                   	// #12
    56e0:	str	x20, [x19, #16]
    56e4:	movk	w0, #0xc00, lsl #16
    56e8:	str	w0, [x19, #10288]
    56ec:	str	xzr, [x19, #26688]
    56f0:	cmp	w22, #0x1
    56f4:	b.eq	5708 <ZSTD_free+0x77c>  // b.none
    56f8:	cmp	x20, #0x7
    56fc:	b.hi	574c <ZSTD_free+0x7c0>  // b.pmore
    5700:	cmp	w22, #0x2
    5704:	b.eq	5790 <ZSTD_free+0x804>  // b.none
    5708:	mov	x0, #0x0                   	// #0
    570c:	b	5794 <ZSTD_free+0x808>
    5710:	mov	x0, #0x6800                	// #26624
    5714:	add	x0, x19, x0
    5718:	add	x1, sp, #0x30
    571c:	ldp	x2, x3, [x0, #72]
    5720:	stp	x2, x3, [sp, #48]
    5724:	ldr	x0, [x19, #26712]
    5728:	str	x0, [sp, #64]
    572c:	mov	x0, x20
    5730:	bl	4f20 <ZSTD_malloc>
    5734:	stp	x0, x0, [x19]
    5738:	cbz	x0, 57a4 <ZSTD_free+0x818>
    573c:	mov	x2, x20
    5740:	mov	x1, x21
    5744:	bl	51d0 <ZSTD_free+0x244>
    5748:	b	56dc <ZSTD_free+0x750>
    574c:	ldr	x1, [x19, #8]
    5750:	mov	w0, #0xa437                	// #42039
    5754:	movk	w0, #0xec30, lsl #16
    5758:	ldr	w2, [x1]
    575c:	cmp	w2, w0
    5760:	b.ne	5700 <ZSTD_free+0x774>  // b.any
    5764:	add	x21, x19, #0x4, lsl #12
    5768:	ldr	w0, [x1, #4]
    576c:	mov	x2, x20
    5770:	str	w0, [x21, #10304]
    5774:	add	x0, x19, #0x18
    5778:	bl	54bc <ZSTD_free+0x530>
    577c:	cmn	x0, #0x78
    5780:	b.hi	5790 <ZSTD_free+0x804>  // b.pmore
    5784:	mov	w0, #0x1                   	// #1
    5788:	str	w0, [x21, #10308]
    578c:	b	5708 <ZSTD_free+0x77c>
    5790:	mov	x0, #0xffffffffffffffe2    	// #-30
    5794:	ldp	x19, x20, [sp, #16]
    5798:	ldp	x21, x22, [sp, #32]
    579c:	ldp	x29, x30, [sp], #80
    57a0:	ret
    57a4:	mov	x0, #0xffffffffffffffc0    	// #-64
    57a8:	b	5794 <ZSTD_free+0x808>
    57ac:	cbnz	x2, 57d4 <ZSTD_free+0x848>
    57b0:	stp	x29, x30, [sp, #-16]!
    57b4:	mov	x2, #0x28                  	// #40
    57b8:	mov	w1, #0x0                   	// #0
    57bc:	mov	x29, sp
    57c0:	bl	0 <grub_memset>
    57c4:	mov	x2, #0xffffffffffffffb8    	// #-72
    57c8:	mov	x0, x2
    57cc:	ldp	x29, x30, [sp], #16
    57d0:	ret
    57d4:	mov	x3, x0
    57d8:	add	x0, x1, #0x8
    57dc:	sub	x5, x2, #0x1
    57e0:	cmp	x2, #0x7
    57e4:	stp	x1, x0, [x3, #24]
    57e8:	b.ls	5824 <ZSTD_free+0x898>  // b.plast
    57ec:	sub	x0, x2, #0x8
    57f0:	add	x4, x1, x0
    57f4:	ldr	x0, [x1, x0]
    57f8:	str	x0, [x3]
    57fc:	str	x4, [x3, #16]
    5800:	ldrb	w1, [x1, x5]
    5804:	cmp	w1, #0x0
    5808:	clz	w0, w1
    580c:	sub	w0, w0, #0x17
    5810:	csinv	x2, x2, xzr, ne  // ne = any
    5814:	csel	w0, w0, wzr, ne  // ne = any
    5818:	str	w0, [x3, #8]
    581c:	mov	x0, x2
    5820:	ret
    5824:	str	x1, [x3, #16]
    5828:	sub	x4, x2, #0x2
    582c:	cmp	x4, #0x5
    5830:	ldrb	w6, [x1]
    5834:	str	x6, [x3]
    5838:	b.hi	58b8 <ZSTD_free+0x92c>  // b.pmore
    583c:	cmp	w4, #0x5
    5840:	b.hi	58b8 <ZSTD_free+0x92c>  // b.pmore
    5844:	adrp	x0, 0 <FSE_versionNumber>
    5848:	ldr	x0, [x0]
    584c:	ldrb	w0, [x0, w4, uxtw]
    5850:	adr	x4, 585c <ZSTD_free+0x8d0>
    5854:	add	x0, x4, w0, sxtb #2
    5858:	br	x0
    585c:	ldrb	w0, [x1, #6]
    5860:	add	x0, x6, x0, lsl #48
    5864:	str	x0, [x3]
    5868:	ldr	x4, [x3]
    586c:	ldrb	w0, [x1, #5]
    5870:	add	x0, x4, x0, lsl #40
    5874:	str	x0, [x3]
    5878:	ldr	x4, [x3]
    587c:	ldrb	w0, [x1, #4]
    5880:	add	x0, x4, x0, lsl #32
    5884:	str	x0, [x3]
    5888:	ldr	x4, [x3]
    588c:	ldrb	w0, [x1, #3]
    5890:	add	x0, x4, x0, lsl #24
    5894:	str	x0, [x3]
    5898:	ldr	x4, [x3]
    589c:	ldrb	w0, [x1, #2]
    58a0:	add	x0, x4, x0, lsl #16
    58a4:	str	x0, [x3]
    58a8:	ldr	x4, [x3]
    58ac:	ldrb	w0, [x1, #1]
    58b0:	add	x0, x4, x0, lsl #8
    58b4:	str	x0, [x3]
    58b8:	ldrb	w0, [x1, x5]
    58bc:	cbz	w0, 58e0 <ZSTD_free+0x954>
    58c0:	clz	w0, w0
    58c4:	mov	w4, #0x8                   	// #8
    58c8:	sub	w1, w4, w2
    58cc:	add	w0, w0, w4
    58d0:	sub	w0, w0, #0x1f
    58d4:	add	w0, w0, w1, lsl #3
    58d8:	str	w0, [x3, #8]
    58dc:	b	581c <ZSTD_free+0x890>
    58e0:	mov	x2, #0xffffffffffffffec    	// #-20
    58e4:	str	wzr, [x3, #8]
    58e8:	b	581c <ZSTD_free+0x890>
    58ec:	nop
	...
    58f8:	stp	x29, x30, [sp, #-48]!
    58fc:	mov	x29, sp
    5900:	stp	x19, x20, [sp, #16]
    5904:	mov	x19, x0
    5908:	mov	x20, x1
    590c:	str	x21, [sp, #32]
    5910:	add	x21, x0, x2
    5914:	mov	x1, x20
    5918:	mov	x0, x19
    591c:	mov	x2, #0x8                   	// #8
    5920:	add	x19, x19, #0x8
    5924:	bl	51d0 <ZSTD_free+0x244>
    5928:	add	x20, x20, #0x8
    592c:	cmp	x21, x19
    5930:	b.hi	5914 <ZSTD_free+0x988>  // b.pmore
    5934:	ldp	x19, x20, [sp, #16]
    5938:	ldr	x21, [sp, #32]
    593c:	ldp	x29, x30, [sp], #48
    5940:	ret
    5944:	stp	x29, x30, [sp, #-96]!
    5948:	mov	x29, sp
    594c:	stp	x25, x26, [sp, #64]
    5950:	add	x26, x2, x3
    5954:	stp	x21, x22, [sp, #32]
    5958:	add	x21, x0, x26
    595c:	cmp	x21, x1
    5960:	stp	x19, x20, [sp, #16]
    5964:	mov	x19, x1
    5968:	mov	x20, x3
    596c:	ldr	x1, [x5]
    5970:	stp	x23, x24, [sp, #48]
    5974:	stp	x27, x28, [sp, #80]
    5978:	add	x3, x1, x2
    597c:	ldr	x22, [sp, #104]
    5980:	b.hi	5a9c <ZSTD_free+0xb10>  // b.pmore
    5984:	cmp	x3, x6
    5988:	b.ls	59b0 <ZSTD_free+0xa24>  // b.plast
    598c:	mov	x26, #0xffffffffffffffec    	// #-20
    5990:	mov	x0, x26
    5994:	ldp	x19, x20, [sp, #16]
    5998:	ldp	x21, x22, [sp, #32]
    599c:	ldp	x23, x24, [sp, #48]
    59a0:	ldp	x25, x26, [sp, #64]
    59a4:	ldp	x27, x28, [sp, #80]
    59a8:	ldp	x29, x30, [sp], #96
    59ac:	ret
    59b0:	add	x24, x0, x2
    59b4:	sub	x19, x19, #0x8
    59b8:	mov	x8, x0
    59bc:	cmp	x24, x19
    59c0:	b.ls	5aa4 <ZSTD_free+0xb18>  // b.plast
    59c4:	mov	x25, x4
    59c8:	mov	x28, x5
    59cc:	mov	x27, x7
    59d0:	cmp	x0, x19
    59d4:	b.cs	59f4 <ZSTD_free+0xa68>  // b.hs, b.nlast
    59d8:	sub	x23, x19, x0
    59dc:	mov	x2, x23
    59e0:	bl	58f8 <ZSTD_free+0x96c>
    59e4:	ldr	x0, [x28]
    59e8:	mov	x8, x19
    59ec:	add	x0, x0, x23
    59f0:	str	x0, [x28]
    59f4:	mov	x0, x8
    59f8:	cmp	x24, x0
    59fc:	b.hi	5a50 <ZSTD_free+0xac4>  // b.pmore
    5a00:	subs	x19, x24, x8
    5a04:	sub	x0, x24, x27
    5a08:	csel	x19, x19, xzr, cs  // cs = hs, nlast
    5a0c:	cmp	x0, x25
    5a10:	add	x8, x8, x19
    5a14:	sub	x19, x24, x25
    5a18:	b.cs	5a7c <ZSTD_free+0xaf0>  // b.hs, b.nlast
    5a1c:	ldr	x0, [sp, #96]
    5a20:	sub	x0, x24, x0
    5a24:	cmp	x0, x25
    5a28:	b.cc	598c <ZSTD_free+0xa00>  // b.lo, b.ul, b.last
    5a2c:	sub	x19, x27, x19
    5a30:	sub	x1, x22, x19
    5a34:	add	x0, x1, x20
    5a38:	cmp	x22, x0
    5a3c:	b.cc	5a68 <ZSTD_free+0xadc>  // b.lo, b.ul, b.last
    5a40:	mov	x2, x20
    5a44:	mov	x0, x24
    5a48:	bl	0 <grub_memmove>
    5a4c:	b	5990 <ZSTD_free+0xa04>
    5a50:	ldr	x1, [x28]
    5a54:	add	x2, x1, #0x1
    5a58:	str	x2, [x28]
    5a5c:	ldrb	w1, [x1]
    5a60:	strb	w1, [x0], #1
    5a64:	b	59f8 <ZSTD_free+0xa6c>
    5a68:	mov	x2, x19
    5a6c:	mov	x0, x24
    5a70:	bl	0 <grub_memmove>
    5a74:	add	x8, x24, x19
    5a78:	mov	x19, x27
    5a7c:	mov	x0, #0x0                   	// #0
    5a80:	add	x1, x8, x0
    5a84:	cmp	x21, x1
    5a88:	b.ls	5990 <ZSTD_free+0xa04>  // b.plast
    5a8c:	ldrb	w1, [x19, x0]
    5a90:	strb	w1, [x8, x0]
    5a94:	add	x0, x0, #0x1
    5a98:	b	5a80 <ZSTD_free+0xaf4>
    5a9c:	mov	x26, #0xffffffffffffffba    	// #-70
    5aa0:	b	5990 <ZSTD_free+0xa04>
    5aa4:	mov	x26, #0xffffffffffffffff    	// #-1
    5aa8:	b	5990 <ZSTD_free+0xa04>
    5aac:	sub	sp, sp, #0x210
    5ab0:	stp	x29, x30, [sp, #16]
    5ab4:	add	x29, sp, #0x10
    5ab8:	str	x1, [sp, #120]
    5abc:	stp	x19, x20, [sp, #32]
    5ac0:	stp	x25, x26, [sp, #80]
    5ac4:	mov	x25, x0
    5ac8:	ldr	x19, [x0, #28984]
    5acc:	stp	x21, x22, [sp, #48]
    5ad0:	ldr	x0, [sp, #120]
    5ad4:	stp	x23, x24, [sp, #64]
    5ad8:	add	x22, x0, x2
    5adc:	stp	x27, x28, [sp, #96]
    5ae0:	ldr	x2, [x25, #28952]
    5ae4:	str	w5, [sp, #132]
    5ae8:	str	x2, [sp, #256]
    5aec:	add	x0, x2, x19
    5af0:	str	x0, [sp, #136]
    5af4:	mov	w0, w5
    5af8:	cbz	w0, 6538 <ZSTD_free+0x15ac>
    5afc:	add	x2, x25, #0x4, lsl #12
    5b00:	mov	x1, x3
    5b04:	ldr	x0, [x25, #28760]
    5b08:	str	x0, [sp, #152]
    5b0c:	add	x0, x25, #0x4, lsl #12
    5b10:	str	x0, [sp, #184]
    5b14:	mov	w0, #0x1                   	// #1
    5b18:	ldr	x23, [x25, #28752]
    5b1c:	ldr	x24, [x25, #28768]
    5b20:	str	w0, [x2, #12460]
    5b24:	ldr	w0, [x2, #10300]
    5b28:	str	x0, [sp, #480]
    5b2c:	ldr	w0, [x2, #10304]
    5b30:	str	x0, [sp, #488]
    5b34:	mov	x0, x2
    5b38:	mov	x2, x4
    5b3c:	stp	x23, x24, [sp, #504]
    5b40:	ldr	w0, [x0, #10308]
    5b44:	str	x0, [sp, #496]
    5b48:	ldr	x0, [sp, #120]
    5b4c:	sub	x0, x0, x23
    5b50:	str	x0, [sp, #520]
    5b54:	add	x0, sp, #0x188
    5b58:	bl	57ac <ZSTD_free+0x820>
    5b5c:	cmn	x0, #0x78
    5b60:	b.hi	5e38 <ZSTD_free+0xeac>  // b.pmore
    5b64:	ldr	w0, [sp, #132]
    5b68:	add	x1, sp, #0x188
    5b6c:	ldr	x2, [x25]
    5b70:	cmp	w0, #0x4
    5b74:	mov	w21, #0x4                   	// #4
    5b78:	csel	w0, w0, w21, le
    5b7c:	str	w0, [sp, #160]
    5b80:	add	x0, x1, #0x28
    5b84:	bl	5168 <ZSTD_free+0x1dc>
    5b88:	mov	w21, #0x0                   	// #0
    5b8c:	ldr	x2, [x25, #16]
    5b90:	add	x1, sp, #0x188
    5b94:	add	x0, x1, #0x38
    5b98:	bl	5168 <ZSTD_free+0x1dc>
    5b9c:	ldr	x2, [x25, #8]
    5ba0:	add	x1, sp, #0x188
    5ba4:	add	x0, x1, #0x48
    5ba8:	bl	5168 <ZSTD_free+0x1dc>
    5bac:	add	x7, sp, #0x108
    5bb0:	add	x10, sp, #0x190
    5bb4:	add	x0, sp, #0x188
    5bb8:	bl	4ffc <ZSTD_free+0x70>
    5bbc:	cmp	w0, #0x2
    5bc0:	ldr	w0, [sp, #160]
    5bc4:	b.hi	5e30 <ZSTD_free+0xea4>  // b.pmore
    5bc8:	cmp	w0, w21
    5bcc:	b.gt	5c7c <ZSTD_free+0xcf0>
    5bd0:	ldr	x19, [sp, #120]
    5bd4:	sub	x0, x22, #0x8
    5bd8:	str	x0, [sp, #144]
    5bdc:	sub	x0, x22, #0xd
    5be0:	str	x0, [sp, #224]
    5be4:	add	x0, sp, #0x188
    5be8:	bl	4ffc <ZSTD_free+0x70>
    5bec:	cmp	w0, #0x2
    5bf0:	ldr	w0, [sp, #132]
    5bf4:	b.hi	62dc <ZSTD_free+0x1350>  // b.pmore
    5bf8:	cmp	w0, w21
    5bfc:	b.gt	5e60 <ZSTD_free+0xed4>
    5c00:	ldr	w0, [sp, #160]
    5c04:	sub	x25, x22, #0x8
    5c08:	sub	w0, w21, w0
    5c0c:	str	w0, [sp, #112]
    5c10:	sub	x0, x22, #0xd
    5c14:	str	x0, [sp, #160]
    5c18:	ldr	w2, [sp, #112]
    5c1c:	ldr	w0, [sp, #132]
    5c20:	ldr	x1, [sp, #256]
    5c24:	cmp	w0, w2
    5c28:	b.gt	62e8 <ZSTD_free+0x135c>
    5c2c:	ldr	x1, [sp, #184]
    5c30:	ldr	x0, [sp, #480]
    5c34:	str	w0, [x1, #10300]
    5c38:	ldr	x0, [sp, #488]
    5c3c:	str	w0, [x1, #10304]
    5c40:	ldr	x0, [sp, #496]
    5c44:	str	w0, [x1, #10308]
    5c48:	ldr	x0, [sp, #136]
    5c4c:	sub	x22, x22, x19
    5c50:	ldr	x1, [sp, #256]
    5c54:	sub	x20, x0, x1
    5c58:	cmp	x20, x22
    5c5c:	b.hi	6030 <ZSTD_free+0x10a4>  // b.pmore
    5c60:	mov	x2, x20
    5c64:	mov	x0, x19
    5c68:	bl	51d0 <ZSTD_free+0x244>
    5c6c:	add	x19, x19, x20
    5c70:	ldr	x0, [sp, #120]
    5c74:	sub	x20, x19, x0
    5c78:	b	5e3c <ZSTD_free+0xeb0>
    5c7c:	ldp	x2, x0, [sp, #432]
    5c80:	ldp	x3, x1, [sp, #456]
    5c84:	add	x2, x0, x2, lsl #3
    5c88:	ldr	x0, [sp, #472]
    5c8c:	ldrb	w11, [x2, #2]
    5c90:	ldr	w8, [x2, #4]
    5c94:	add	x1, x0, x1, lsl #3
    5c98:	ldr	x0, [sp, #448]
    5c9c:	ldrb	w13, [x1, #2]
    5ca0:	ldr	w9, [x1, #4]
    5ca4:	add	x0, x3, x0, lsl #3
    5ca8:	add	w5, w11, w13
    5cac:	ldrb	w12, [x0, #2]
    5cb0:	add	w5, w5, w12
    5cb4:	cbz	w12, 5df8 <ZSTD_free+0xe6c>
    5cb8:	ldr	w6, [x0, #4]
    5cbc:	mov	w1, w12
    5cc0:	add	x0, sp, #0x188
    5cc4:	bl	4fdc <ZSTD_free+0x50>
    5cc8:	add	x6, x6, x0
    5ccc:	cmp	w12, #0x1
    5cd0:	b.ne	5e0c <ZSTD_free+0xe80>  // b.any
    5cd4:	cmp	w8, #0x0
    5cd8:	cinc	x1, x6, eq  // eq = none
    5cdc:	ldr	x6, [sp, #480]
    5ce0:	cbz	x1, 5d10 <ZSTD_free+0xd84>
    5ce4:	cmp	x1, #0x3
    5ce8:	b.ne	5e00 <ZSTD_free+0xe74>  // b.any
    5cec:	sub	x0, x6, #0x1
    5cf0:	cmp	x0, #0x0
    5cf4:	cinc	x0, x0, eq  // eq = none
    5cf8:	cmp	x1, #0x1
    5cfc:	b.eq	5d08 <ZSTD_free+0xd7c>  // b.none
    5d00:	ldr	x1, [sp, #488]
    5d04:	str	x1, [sp, #496]
    5d08:	stp	x0, x6, [sp, #480]
    5d0c:	mov	x6, x0
    5d10:	mov	w9, w9
    5d14:	cbz	w13, 5e20 <ZSTD_free+0xe94>
    5d18:	mov	w1, w13
    5d1c:	add	x0, sp, #0x188
    5d20:	bl	4fdc <ZSTD_free+0x50>
    5d24:	add	x9, x9, x0
    5d28:	cmp	w5, #0x1e
    5d2c:	b.ls	5d38 <ZSTD_free+0xdac>  // b.plast
    5d30:	add	x0, sp, #0x188
    5d34:	bl	4ffc <ZSTD_free+0x70>
    5d38:	mov	w8, w8
    5d3c:	cbz	w11, 5e28 <ZSTD_free+0xe9c>
    5d40:	mov	w1, w11
    5d44:	add	x0, sp, #0x188
    5d48:	bl	4fdc <ZSTD_free+0x50>
    5d4c:	ldp	x5, x1, [sp, #504]
    5d50:	add	x8, x8, x0
    5d54:	ldr	x0, [sp, #520]
    5d58:	add	w21, w21, #0x1
    5d5c:	add	x0, x8, x0
    5d60:	cmp	x0, x6
    5d64:	csel	x5, x5, x1, cs  // cs = hs, nlast
    5d68:	sub	x1, x0, x6
    5d6c:	add	x0, x9, x0
    5d70:	add	x5, x5, x1
    5d74:	str	x0, [sp, #520]
    5d78:	ldr	x0, [sp, #432]
    5d7c:	ldr	x1, [sp, #440]
    5d80:	lsl	x2, x0, #3
    5d84:	add	x0, x1, x0, lsl #3
    5d88:	ldrh	w11, [x1, x2]
    5d8c:	ldrb	w1, [x0, #3]
    5d90:	add	x0, sp, #0x188
    5d94:	bl	4fb8 <ZSTD_free+0x2c>
    5d98:	add	x11, x0, w11, uxth
    5d9c:	ldp	x0, x1, [sp, #464]
    5da0:	str	x11, [sp, #432]
    5da4:	lsl	x2, x0, #3
    5da8:	add	x0, x1, x0, lsl #3
    5dac:	ldrh	w11, [x1, x2]
    5db0:	ldrb	w1, [x0, #3]
    5db4:	add	x0, sp, #0x188
    5db8:	bl	4fb8 <ZSTD_free+0x2c>
    5dbc:	add	x11, x0, w11, uxth
    5dc0:	ldp	x0, x1, [sp, #448]
    5dc4:	str	x11, [sp, #464]
    5dc8:	lsl	x2, x0, #3
    5dcc:	add	x0, x1, x0, lsl #3
    5dd0:	ldrh	w11, [x1, x2]
    5dd4:	ldrb	w1, [x0, #3]
    5dd8:	add	x0, sp, #0x188
    5ddc:	bl	4fb8 <ZSTD_free+0x2c>
    5de0:	add	x11, x0, w11, uxth
    5de4:	stp	x8, x9, [x7]
    5de8:	stp	x6, x5, [x7, #16]
    5dec:	add	x7, x7, #0x20
    5df0:	str	x11, [sp, #448]
    5df4:	b	5bb4 <ZSTD_free+0xc28>
    5df8:	mov	x6, #0x0                   	// #0
    5dfc:	b	5cd4 <ZSTD_free+0xd48>
    5e00:	add	x0, x1, #0xa
    5e04:	ldr	x0, [x10, x0, lsl #3]
    5e08:	b	5cf0 <ZSTD_free+0xd64>
    5e0c:	ldr	x0, [sp, #488]
    5e10:	str	x0, [sp, #496]
    5e14:	ldr	x0, [sp, #480]
    5e18:	stp	x6, x0, [sp, #480]
    5e1c:	b	5d10 <ZSTD_free+0xd84>
    5e20:	mov	x0, #0x0                   	// #0
    5e24:	b	5d24 <ZSTD_free+0xd98>
    5e28:	mov	x0, #0x0                   	// #0
    5e2c:	b	5d4c <ZSTD_free+0xdc0>
    5e30:	cmp	w0, w21
    5e34:	b.le	5bd0 <ZSTD_free+0xc44>
    5e38:	mov	x20, #0xffffffffffffffec    	// #-20
    5e3c:	mov	x0, x20
    5e40:	ldp	x29, x30, [sp, #16]
    5e44:	ldp	x19, x20, [sp, #32]
    5e48:	ldp	x21, x22, [sp, #48]
    5e4c:	ldp	x23, x24, [sp, #64]
    5e50:	ldp	x25, x26, [sp, #80]
    5e54:	ldp	x27, x28, [sp, #96]
    5e58:	add	sp, sp, #0x210
    5e5c:	ret
    5e60:	ldp	x2, x0, [sp, #432]
    5e64:	ldp	x3, x1, [sp, #456]
    5e68:	add	x2, x0, x2, lsl #3
    5e6c:	ldr	x0, [sp, #472]
    5e70:	ldrb	w6, [x2, #2]
    5e74:	ldr	w7, [x2, #4]
    5e78:	add	x1, x0, x1, lsl #3
    5e7c:	ldr	x0, [sp, #448]
    5e80:	ldrb	w10, [x1, #2]
    5e84:	ldr	w9, [x1, #4]
    5e88:	add	x0, x3, x0, lsl #3
    5e8c:	add	w8, w6, w10
    5e90:	ldrb	w5, [x0, #2]
    5e94:	add	w8, w8, w5
    5e98:	cbz	w5, 6038 <ZSTD_free+0x10ac>
    5e9c:	ldr	w25, [x0, #4]
    5ea0:	mov	w1, w5
    5ea4:	add	x0, sp, #0x188
    5ea8:	bl	4fdc <ZSTD_free+0x50>
    5eac:	add	x25, x25, x0
    5eb0:	cmp	w5, #0x1
    5eb4:	b.ne	6050 <ZSTD_free+0x10c4>  // b.any
    5eb8:	cmp	w7, #0x0
    5ebc:	cinc	x1, x25, eq  // eq = none
    5ec0:	ldr	x25, [sp, #480]
    5ec4:	cbz	x1, 5ef4 <ZSTD_free+0xf68>
    5ec8:	cmp	x1, #0x3
    5ecc:	b.ne	6040 <ZSTD_free+0x10b4>  // b.any
    5ed0:	sub	x0, x25, #0x1
    5ed4:	cmp	x0, #0x0
    5ed8:	cinc	x0, x0, eq  // eq = none
    5edc:	cmp	x1, #0x1
    5ee0:	b.eq	5eec <ZSTD_free+0xf60>  // b.none
    5ee4:	ldr	x1, [sp, #488]
    5ee8:	str	x1, [sp, #496]
    5eec:	stp	x0, x25, [sp, #480]
    5ef0:	mov	x25, x0
    5ef4:	mov	w9, w9
    5ef8:	cbz	w10, 6064 <ZSTD_free+0x10d8>
    5efc:	mov	w1, w10
    5f00:	add	x0, sp, #0x188
    5f04:	bl	4fdc <ZSTD_free+0x50>
    5f08:	add	x0, x9, x0
    5f0c:	str	x0, [sp, #192]
    5f10:	cmp	w8, #0x1e
    5f14:	b.ls	5f20 <ZSTD_free+0xf94>  // b.plast
    5f18:	add	x0, sp, #0x188
    5f1c:	bl	4ffc <ZSTD_free+0x70>
    5f20:	mov	w7, w7
    5f24:	cbz	w6, 606c <ZSTD_free+0x10e0>
    5f28:	mov	w1, w6
    5f2c:	add	x0, sp, #0x188
    5f30:	bl	4fdc <ZSTD_free+0x50>
    5f34:	add	x0, x7, x0
    5f38:	str	x0, [sp, #200]
    5f3c:	ldr	x0, [sp, #520]
    5f40:	ldr	x1, [sp, #200]
    5f44:	add	x0, x1, x0
    5f48:	str	x0, [sp, #168]
    5f4c:	ldr	x0, [sp, #504]
    5f50:	str	x0, [sp, #176]
    5f54:	ldp	x0, x1, [sp, #168]
    5f58:	cmp	x0, x25
    5f5c:	ldr	x0, [sp, #512]
    5f60:	csel	x0, x1, x0, cs  // cs = hs, nlast
    5f64:	str	x0, [sp, #176]
    5f68:	ldr	x1, [sp, #168]
    5f6c:	ldr	x0, [sp, #192]
    5f70:	add	x0, x0, x1
    5f74:	str	x0, [sp, #520]
    5f78:	ldr	x0, [sp, #432]
    5f7c:	ldr	x1, [sp, #440]
    5f80:	lsl	x2, x0, #3
    5f84:	add	x0, x1, x0, lsl #3
    5f88:	ldrh	w5, [x1, x2]
    5f8c:	ldrb	w1, [x0, #3]
    5f90:	add	x0, sp, #0x188
    5f94:	bl	4fb8 <ZSTD_free+0x2c>
    5f98:	add	x5, x0, w5, uxth
    5f9c:	ldp	x0, x1, [sp, #464]
    5fa0:	str	x5, [sp, #432]
    5fa4:	lsl	x2, x0, #3
    5fa8:	add	x0, x1, x0, lsl #3
    5fac:	ldrh	w5, [x1, x2]
    5fb0:	ldrb	w1, [x0, #3]
    5fb4:	add	x0, sp, #0x188
    5fb8:	bl	4fb8 <ZSTD_free+0x2c>
    5fbc:	add	x5, x0, w5, uxth
    5fc0:	ldp	x0, x1, [sp, #448]
    5fc4:	str	x5, [sp, #464]
    5fc8:	lsl	x2, x0, #3
    5fcc:	add	x0, x1, x0, lsl #3
    5fd0:	ldrh	w5, [x1, x2]
    5fd4:	ldrb	w1, [x0, #3]
    5fd8:	add	x0, sp, #0x188
    5fdc:	bl	4fb8 <ZSTD_free+0x2c>
    5fe0:	add	x5, x0, w5, uxth
    5fe4:	ubfiz	x0, x21, #5, #2
    5fe8:	ubfiz	x1, x21, #5, #2
    5fec:	str	x0, [sp, #216]
    5ff0:	add	x0, sp, #0x108
    5ff4:	add	x0, x0, x1
    5ff8:	str	x0, [sp, #112]
    5ffc:	mov	x0, x1
    6000:	add	x1, sp, #0x108
    6004:	str	x5, [sp, #448]
    6008:	ldr	x8, [x1, x0]
    600c:	ldr	x0, [sp, #112]
    6010:	ldr	x1, [sp, #256]
    6014:	ldr	x27, [x0, #8]
    6018:	add	x28, x1, x8
    601c:	add	x20, x8, x27
    6020:	add	x0, x19, x20
    6024:	str	x0, [sp, #208]
    6028:	cmp	x22, x0
    602c:	b.cs	6074 <ZSTD_free+0x10e8>  // b.hs, b.nlast
    6030:	mov	x20, #0xffffffffffffffba    	// #-70
    6034:	b	5e3c <ZSTD_free+0xeb0>
    6038:	mov	x25, #0x0                   	// #0
    603c:	b	5eb8 <ZSTD_free+0xf2c>
    6040:	add	x0, x1, #0xa
    6044:	add	x2, sp, #0x190
    6048:	ldr	x0, [x2, x0, lsl #3]
    604c:	b	5ed4 <ZSTD_free+0xf48>
    6050:	ldr	x0, [sp, #488]
    6054:	str	x0, [sp, #496]
    6058:	ldr	x0, [sp, #480]
    605c:	stp	x25, x0, [sp, #480]
    6060:	b	5ef4 <ZSTD_free+0xf68>
    6064:	mov	x0, #0x0                   	// #0
    6068:	b	5f08 <ZSTD_free+0xf7c>
    606c:	mov	x0, #0x0                   	// #0
    6070:	b	5f34 <ZSTD_free+0xfa8>
    6074:	ldr	x0, [sp, #136]
    6078:	cmp	x0, x28
    607c:	b.cc	5e38 <ZSTD_free+0xeac>  // b.lo, b.ul, b.last
    6080:	ldr	x0, [sp, #112]
    6084:	add	x26, x19, x8
    6088:	ldr	x4, [x0, #16]
    608c:	ldr	x0, [sp, #144]
    6090:	cmp	x26, x0
    6094:	b.ls	6108 <ZSTD_free+0x117c>  // b.plast
    6098:	ldr	x6, [sp, #136]
    609c:	mov	x7, x23
    60a0:	ldr	x0, [sp, #152]
    60a4:	stp	x0, x24, [sp]
    60a8:	add	x5, sp, #0x100
    60ac:	mov	x3, x27
    60b0:	mov	x2, x8
    60b4:	mov	x1, x22
    60b8:	mov	x0, x19
    60bc:	bl	5944 <ZSTD_free+0x9b8>
    60c0:	mov	x20, x0
    60c4:	cmn	x20, #0x78
    60c8:	b.hi	5e3c <ZSTD_free+0xeb0>  // b.pmore
    60cc:	ldp	x0, x1, [sp, #168]
    60d0:	add	x2, sp, #0x108
    60d4:	ldr	x3, [sp, #200]
    60d8:	add	x19, x19, x20
    60dc:	add	w21, w21, #0x1
    60e0:	sub	x0, x0, x25
    60e4:	add	x0, x1, x0
    60e8:	ldr	x1, [sp, #216]
    60ec:	prfm	pldl2keep, [x0]
    60f0:	str	x3, [x2, x1]
    60f4:	ldr	x1, [sp, #112]
    60f8:	ldr	x2, [sp, #192]
    60fc:	stp	x2, x25, [x1, #8]
    6100:	str	x0, [x1, #24]
    6104:	b	5be4 <ZSTD_free+0xc58>
    6108:	ldr	x0, [sp, #112]
    610c:	mov	x2, #0x8                   	// #8
    6110:	str	x4, [sp, #248]
    6114:	ldr	x6, [x0, #24]
    6118:	mov	x0, x19
    611c:	stp	x6, x8, [sp, #232]
    6120:	bl	51d0 <ZSTD_free+0x244>
    6124:	ldp	x6, x8, [sp, #232]
    6128:	ldr	x4, [sp, #248]
    612c:	cmp	x8, #0x8
    6130:	b.ls	6150 <ZSTD_free+0x11c4>  // b.plast
    6134:	ldr	x1, [sp, #256]
    6138:	sub	x2, x8, #0x8
    613c:	add	x0, x19, #0x8
    6140:	stp	x4, x6, [sp, #232]
    6144:	add	x1, x1, #0x8
    6148:	bl	58f8 <ZSTD_free+0x96c>
    614c:	ldp	x4, x6, [sp, #232]
    6150:	str	x28, [sp, #256]
    6154:	sub	x0, x26, x23
    6158:	cmp	x4, x0
    615c:	b.ls	61cc <ZSTD_free+0x1240>  // b.plast
    6160:	ldr	x0, [sp, #152]
    6164:	sub	x0, x26, x0
    6168:	cmp	x4, x0
    616c:	b.hi	5e38 <ZSTD_free+0xeac>  // b.pmore
    6170:	add	x0, x6, x27
    6174:	cmp	x24, x0
    6178:	b.cc	6190 <ZSTD_free+0x1204>  // b.lo, b.ul, b.last
    617c:	mov	x2, x27
    6180:	mov	x1, x6
    6184:	mov	x0, x26
    6188:	bl	0 <grub_memmove>
    618c:	b	60c4 <ZSTD_free+0x1138>
    6190:	sub	x28, x24, x6
    6194:	mov	x0, x26
    6198:	mov	x2, x28
    619c:	mov	x1, x6
    61a0:	str	x4, [sp, #232]
    61a4:	bl	0 <grub_memmove>
    61a8:	ldr	x0, [sp, #144]
    61ac:	add	x26, x26, x28
    61b0:	sub	x27, x27, x28
    61b4:	cmp	x0, x26
    61b8:	b.cc	62a8 <ZSTD_free+0x131c>  // b.lo, b.ul, b.last
    61bc:	cmp	x27, #0x2
    61c0:	b.ls	62a8 <ZSTD_free+0x131c>  // b.plast
    61c4:	ldr	x4, [sp, #232]
    61c8:	mov	x6, x23
    61cc:	cmp	x4, #0x7
    61d0:	b.hi	62b0 <ZSTD_free+0x1324>  // b.pmore
    61d4:	adrp	x0, 0 <FSE_versionNumber>
    61d8:	mov	x2, #0x4                   	// #4
    61dc:	ldr	x0, [x0]
    61e0:	ldr	w7, [x0, x4, lsl #2]
    61e4:	ldrb	w0, [x6]
    61e8:	strb	w0, [x26]
    61ec:	str	w7, [sp, #232]
    61f0:	ldrb	w0, [x6, #1]
    61f4:	strb	w0, [x26, #1]
    61f8:	ldrb	w0, [x6, #2]
    61fc:	strb	w0, [x26, #2]
    6200:	ldrb	w0, [x6, #3]
    6204:	strb	w0, [x26, #3]
    6208:	adrp	x0, 0 <FSE_versionNumber>
    620c:	ldr	x0, [x0]
    6210:	ldr	w28, [x0, x4, lsl #2]
    6214:	add	x0, x26, x2
    6218:	add	x28, x6, x28
    621c:	mov	x1, x28
    6220:	bl	51d0 <ZSTD_free+0x244>
    6224:	ldr	w7, [sp, #232]
    6228:	sub	x6, x28, w7, sxtw
    622c:	ldr	x2, [sp, #224]
    6230:	add	x1, x19, x20
    6234:	add	x0, x26, #0x8
    6238:	add	x28, x6, #0x8
    623c:	cmp	x1, x2
    6240:	b.ls	62cc <ZSTD_free+0x1340>  // b.plast
    6244:	ldr	x1, [sp, #144]
    6248:	cmp	x1, x0
    624c:	b.ls	6268 <ZSTD_free+0x12dc>  // b.plast
    6250:	sub	x27, x1, x0
    6254:	mov	x1, x28
    6258:	mov	x2, x27
    625c:	bl	58f8 <ZSTD_free+0x96c>
    6260:	ldr	x0, [sp, #144]
    6264:	add	x28, x28, x27
    6268:	mov	x1, #0x0                   	// #0
    626c:	ldr	x3, [sp, #208]
    6270:	add	x2, x0, x1
    6274:	cmp	x3, x2
    6278:	b.ls	60c4 <ZSTD_free+0x1138>  // b.plast
    627c:	ldrb	w2, [x28, x1]
    6280:	strb	w2, [x0, x1]
    6284:	add	x1, x1, #0x1
    6288:	b	626c <ZSTD_free+0x12e0>
    628c:	ldrb	w2, [x23, x1]
    6290:	add	w0, w0, #0x1
    6294:	strb	w2, [x26, x1]
    6298:	mov	w1, w0
    629c:	cmp	x27, w0, uxtw
    62a0:	b.hi	628c <ZSTD_free+0x1300>  // b.pmore
    62a4:	b	60c4 <ZSTD_free+0x1138>
    62a8:	mov	w0, #0x0                   	// #0
    62ac:	b	6298 <ZSTD_free+0x130c>
    62b0:	mov	x1, x6
    62b4:	mov	x0, x26
    62b8:	mov	x2, #0x8                   	// #8
    62bc:	str	x6, [sp, #232]
    62c0:	bl	51d0 <ZSTD_free+0x244>
    62c4:	ldr	x6, [sp, #232]
    62c8:	b	622c <ZSTD_free+0x12a0>
    62cc:	sub	x2, x27, #0x8
    62d0:	mov	x1, x28
    62d4:	bl	58f8 <ZSTD_free+0x96c>
    62d8:	b	60c4 <ZSTD_free+0x1138>
    62dc:	cmp	w0, w21
    62e0:	b.gt	5e38 <ZSTD_free+0xeac>
    62e4:	b	5c00 <ZSTD_free+0xc74>
    62e8:	ldr	x0, [sp, #112]
    62ec:	add	x3, sp, #0x108
    62f0:	ubfiz	x2, x0, #5, #2
    62f4:	add	x0, sp, #0x108
    62f8:	add	x0, x0, x2
    62fc:	ldr	x8, [x3, x2]
    6300:	ldr	x28, [x0, #8]
    6304:	add	x27, x1, x8
    6308:	add	x20, x8, x28
    630c:	add	x2, x19, x20
    6310:	str	x2, [sp, #144]
    6314:	cmp	x22, x2
    6318:	b.cc	6030 <ZSTD_free+0x10a4>  // b.lo, b.ul, b.last
    631c:	ldr	x2, [sp, #136]
    6320:	cmp	x2, x27
    6324:	b.cc	5e38 <ZSTD_free+0xeac>  // b.lo, b.ul, b.last
    6328:	add	x21, x19, x8
    632c:	cmp	x21, x25
    6330:	ldr	x4, [x0, #16]
    6334:	b.ls	6380 <ZSTD_free+0x13f4>  // b.plast
    6338:	ldr	x0, [sp, #152]
    633c:	stp	x0, x24, [sp]
    6340:	mov	x6, x2
    6344:	mov	x7, x23
    6348:	add	x5, sp, #0x100
    634c:	mov	x3, x28
    6350:	mov	x2, x8
    6354:	mov	x1, x22
    6358:	mov	x0, x19
    635c:	bl	5944 <ZSTD_free+0x9b8>
    6360:	mov	x20, x0
    6364:	cmn	x20, #0x78
    6368:	b.hi	5e3c <ZSTD_free+0xeb0>  // b.pmore
    636c:	ldr	w0, [sp, #112]
    6370:	add	x19, x19, x20
    6374:	add	w0, w0, #0x1
    6378:	str	w0, [sp, #112]
    637c:	b	5c18 <ZSTD_free+0xc8c>
    6380:	mov	x2, #0x8                   	// #8
    6384:	stp	x8, x4, [sp, #168]
    6388:	ldr	x26, [x0, #24]
    638c:	mov	x0, x19
    6390:	bl	51d0 <ZSTD_free+0x244>
    6394:	ldp	x8, x4, [sp, #168]
    6398:	cmp	x8, #0x8
    639c:	b.ls	63bc <ZSTD_free+0x1430>  // b.plast
    63a0:	ldr	x1, [sp, #256]
    63a4:	sub	x2, x8, #0x8
    63a8:	add	x0, x19, #0x8
    63ac:	str	x4, [sp, #168]
    63b0:	add	x1, x1, #0x8
    63b4:	bl	58f8 <ZSTD_free+0x96c>
    63b8:	ldr	x4, [sp, #168]
    63bc:	str	x27, [sp, #256]
    63c0:	sub	x0, x21, x23
    63c4:	cmp	x4, x0
    63c8:	b.ls	6434 <ZSTD_free+0x14a8>  // b.plast
    63cc:	ldr	x0, [sp, #152]
    63d0:	sub	x0, x21, x0
    63d4:	cmp	x4, x0
    63d8:	b.hi	5e38 <ZSTD_free+0xeac>  // b.pmore
    63dc:	add	x0, x26, x28
    63e0:	cmp	x24, x0
    63e4:	b.cc	63fc <ZSTD_free+0x1470>  // b.lo, b.ul, b.last
    63e8:	mov	x2, x28
    63ec:	mov	x1, x26
    63f0:	mov	x0, x21
    63f4:	bl	0 <grub_memmove>
    63f8:	b	6364 <ZSTD_free+0x13d8>
    63fc:	sub	x27, x24, x26
    6400:	mov	x0, x21
    6404:	mov	x2, x27
    6408:	mov	x1, x26
    640c:	add	x21, x21, x27
    6410:	str	x4, [sp, #168]
    6414:	bl	0 <grub_memmove>
    6418:	sub	x28, x28, x27
    641c:	cmp	x25, x21
    6420:	b.cc	650c <ZSTD_free+0x1580>  // b.lo, b.ul, b.last
    6424:	cmp	x28, #0x2
    6428:	b.ls	650c <ZSTD_free+0x1580>  // b.plast
    642c:	ldr	x4, [sp, #168]
    6430:	mov	x26, x23
    6434:	cmp	x4, #0x7
    6438:	b.hi	6514 <ZSTD_free+0x1588>  // b.pmore
    643c:	adrp	x0, 0 <FSE_versionNumber>
    6440:	mov	x2, #0x4                   	// #4
    6444:	ldr	x0, [x0]
    6448:	ldr	w7, [x0, x4, lsl #2]
    644c:	ldrb	w0, [x26]
    6450:	strb	w0, [x21]
    6454:	str	w7, [sp, #168]
    6458:	ldrb	w0, [x26, #1]
    645c:	strb	w0, [x21, #1]
    6460:	ldrb	w0, [x26, #2]
    6464:	strb	w0, [x21, #2]
    6468:	ldrb	w0, [x26, #3]
    646c:	strb	w0, [x21, #3]
    6470:	adrp	x0, 0 <FSE_versionNumber>
    6474:	ldr	x0, [x0]
    6478:	ldr	w27, [x0, x4, lsl #2]
    647c:	add	x0, x21, x2
    6480:	add	x26, x26, x27
    6484:	mov	x1, x26
    6488:	bl	51d0 <ZSTD_free+0x244>
    648c:	ldr	w7, [sp, #168]
    6490:	sub	x26, x26, w7, sxtw
    6494:	ldr	x2, [sp, #160]
    6498:	add	x1, x19, x20
    649c:	add	x0, x21, #0x8
    64a0:	add	x27, x26, #0x8
    64a4:	cmp	x1, x2
    64a8:	b.ls	6528 <ZSTD_free+0x159c>  // b.plast
    64ac:	cmp	x25, x0
    64b0:	b.ls	64cc <ZSTD_free+0x1540>  // b.plast
    64b4:	sub	x28, x25, x0
    64b8:	mov	x1, x27
    64bc:	mov	x2, x28
    64c0:	bl	58f8 <ZSTD_free+0x96c>
    64c4:	add	x27, x27, x28
    64c8:	mov	x0, x25
    64cc:	mov	x1, #0x0                   	// #0
    64d0:	ldr	x3, [sp, #144]
    64d4:	add	x2, x0, x1
    64d8:	cmp	x3, x2
    64dc:	b.ls	6364 <ZSTD_free+0x13d8>  // b.plast
    64e0:	ldrb	w2, [x27, x1]
    64e4:	strb	w2, [x0, x1]
    64e8:	add	x1, x1, #0x1
    64ec:	b	64d0 <ZSTD_free+0x1544>
    64f0:	ldrb	w2, [x23, x1]
    64f4:	add	w0, w0, #0x1
    64f8:	strb	w2, [x21, x1]
    64fc:	mov	w1, w0
    6500:	cmp	x28, w0, uxtw
    6504:	b.hi	64f0 <ZSTD_free+0x1564>  // b.pmore
    6508:	b	6364 <ZSTD_free+0x13d8>
    650c:	mov	w0, #0x0                   	// #0
    6510:	b	64fc <ZSTD_free+0x1570>
    6514:	mov	x1, x26
    6518:	mov	x0, x21
    651c:	mov	x2, #0x8                   	// #8
    6520:	bl	51d0 <ZSTD_free+0x244>
    6524:	b	6494 <ZSTD_free+0x1508>
    6528:	sub	x2, x28, #0x8
    652c:	mov	x1, x27
    6530:	bl	58f8 <ZSTD_free+0x96c>
    6534:	b	6364 <ZSTD_free+0x13d8>
    6538:	ldr	x19, [sp, #120]
    653c:	b	5c48 <ZSTD_free+0xcbc>
	...

0000000000006550 <ZSTD_estimateDCtxSize>:
    6550:	mov	x0, #0x71f8                	// #29176
    6554:	movk	x0, #0x2, lsl #16
    6558:	ret

000000000000655c <ZSTD_initStaticDCtx>:
    655c:	tst	x0, #0x7
    6560:	b.ne	65a4 <ZSTD_initStaticDCtx+0x48>  // b.any
    6564:	mov	x5, x1
    6568:	mov	x1, #0x71f7                	// #29175
    656c:	movk	x1, #0x2, lsl #16
    6570:	cmp	x5, x1
    6574:	b.ls	65a4 <ZSTD_initStaticDCtx+0x48>  // b.plast
    6578:	mov	x3, x0
    657c:	stp	x29, x30, [sp, #-16]!
    6580:	mov	x29, sp
    6584:	bl	50a4 <ZSTD_free+0x118>
    6588:	add	x0, x0, #0x27, lsl #12
    658c:	add	x0, x0, #0x1f8
    6590:	str	x5, [x3, #29000]
    6594:	str	x0, [x3, #29048]
    6598:	mov	x0, x3
    659c:	ldp	x29, x30, [sp], #16
    65a0:	ret
    65a4:	mov	x3, #0x0                   	// #0
    65a8:	mov	x0, x3
    65ac:	ret

00000000000065b0 <ZSTD_createDCtx_advanced>:
    65b0:	stp	x29, x30, [sp, #-64]!
    65b4:	mov	x29, sp
    65b8:	str	x19, [sp, #16]
    65bc:	mov	x19, x0
    65c0:	ldr	x0, [x0]
    65c4:	cmp	x0, #0x0
    65c8:	ldr	x0, [x19, #8]
    65cc:	cset	w1, eq  // eq = none
    65d0:	cmp	x0, #0x0
    65d4:	cset	w0, eq  // eq = none
    65d8:	cmp	w1, w0
    65dc:	b.ne	6630 <ZSTD_createDCtx_advanced+0x80>  // b.any
    65e0:	ldp	x0, x1, [x19]
    65e4:	stp	x0, x1, [sp, #32]
    65e8:	ldr	x0, [x19, #16]
    65ec:	str	x0, [sp, #48]
    65f0:	mov	x0, #0x71f8                	// #29176
    65f4:	add	x1, sp, #0x20
    65f8:	movk	x0, #0x2, lsl #16
    65fc:	bl	4f20 <ZSTD_malloc>
    6600:	mov	x3, x0
    6604:	cbz	x0, 6620 <ZSTD_createDCtx_advanced+0x70>
    6608:	add	x1, x0, #0x7, lsl #12
    660c:	ldp	x4, x5, [x19]
    6610:	ldr	x2, [x19, #16]
    6614:	stp	x4, x5, [x1, #288]
    6618:	str	x2, [x0, #28976]
    661c:	bl	50a4 <ZSTD_free+0x118>
    6620:	mov	x0, x3
    6624:	ldr	x19, [sp, #16]
    6628:	ldp	x29, x30, [sp], #64
    662c:	ret
    6630:	mov	x3, #0x0                   	// #0
    6634:	b	6620 <ZSTD_createDCtx_advanced+0x70>

0000000000006638 <ZSTD_createDCtx>:
    6638:	stp	x29, x30, [sp, #-48]!
    663c:	adrp	x0, 0 <FSE_versionNumber>
    6640:	mov	x29, sp
    6644:	ldr	x0, [x0]
    6648:	add	x0, x0, #0x408
    664c:	ldp	x2, x3, [x0]
    6650:	stp	x2, x3, [sp, #16]
    6654:	ldr	x0, [x0, #16]
    6658:	str	x0, [sp, #32]
    665c:	add	x0, sp, #0x10
    6660:	bl	65b0 <ZSTD_createDCtx_advanced>
    6664:	ldp	x29, x30, [sp], #48
    6668:	ret
    666c:	nop
	...

0000000000006678 <ZSTD_copyDCtx>:
    6678:	mov	x2, #0x7178                	// #29048
    667c:	b	51d0 <ZSTD_free+0x244>

0000000000006680 <ZSTD_isFrame>:
    6680:	cmp	x1, #0x3
    6684:	b.ls	66b4 <ZSTD_isFrame+0x34>  // b.plast
    6688:	ldr	w0, [x0]
    668c:	mov	w1, #0xb528                	// #46376
    6690:	movk	w1, #0xfd2f, lsl #16
    6694:	cmp	w0, w1
    6698:	b.eq	66bc <ZSTD_isFrame+0x3c>  // b.none
    669c:	and	w0, w0, #0xfffffff0
    66a0:	mov	w1, #0x2a50                	// #10832
    66a4:	movk	w1, #0x184d, lsl #16
    66a8:	cmp	w0, w1
    66ac:	cset	w0, eq  // eq = none
    66b0:	ret
    66b4:	mov	w0, #0x0                   	// #0
    66b8:	b	66b0 <ZSTD_isFrame+0x30>
    66bc:	mov	w0, #0x1                   	// #1
    66c0:	b	66b0 <ZSTD_isFrame+0x30>

00000000000066c4 <ZSTD_frameHeaderSize>:
    66c4:	mov	w2, #0x0                   	// #0
    66c8:	b	50f4 <ZSTD_free+0x168>

00000000000066cc <ZSTD_getFrameHeader_advanced>:
    66cc:	stp	x29, x30, [sp, #-64]!
    66d0:	cmp	w3, #0x1
    66d4:	mov	x29, sp
    66d8:	stp	x19, x20, [sp, #16]
    66dc:	mov	x20, x1
    66e0:	mov	x19, #0x5                   	// #5
    66e4:	mov	w1, #0x0                   	// #0
    66e8:	stp	x21, x22, [sp, #32]
    66ec:	mov	x22, x2
    66f0:	mov	x21, x0
    66f4:	mov	x2, #0x28                  	// #40
    66f8:	stp	x23, x24, [sp, #48]
    66fc:	mov	w23, w3
    6700:	mov	x24, #0x1                   	// #1
    6704:	csel	x19, x24, x19, eq  // eq = none
    6708:	bl	0 <grub_memset>
    670c:	cmp	x22, x19
    6710:	b.cc	68ac <ZSTD_getFrameHeader_advanced+0x1e0>  // b.lo, b.ul, b.last
    6714:	cbz	x20, 68b4 <ZSTD_getFrameHeader_advanced+0x1e8>
    6718:	cmp	w23, #0x1
    671c:	b.eq	6784 <ZSTD_getFrameHeader_advanced+0xb8>  // b.none
    6720:	ldr	w0, [x20]
    6724:	mov	w1, #0xb528                	// #46376
    6728:	movk	w1, #0xfd2f, lsl #16
    672c:	cmp	w0, w1
    6730:	b.eq	6784 <ZSTD_getFrameHeader_advanced+0xb8>  // b.none
    6734:	and	w0, w0, #0xfffffff0
    6738:	mov	w1, #0x2a50                	// #10832
    673c:	movk	w1, #0x184d, lsl #16
    6740:	cmp	w0, w1
    6744:	b.ne	68bc <ZSTD_getFrameHeader_advanced+0x1f0>  // b.any
    6748:	cmp	x22, #0x7
    674c:	b.ls	68c4 <ZSTD_getFrameHeader_advanced+0x1f8>  // b.plast
    6750:	mov	x0, x21
    6754:	mov	x2, #0x28                  	// #40
    6758:	mov	w1, #0x0                   	// #0
    675c:	bl	0 <grub_memset>
    6760:	ldr	w0, [x20, #4]
    6764:	str	x0, [x21]
    6768:	str	w24, [x21, #20]
    676c:	mov	x0, #0x0                   	// #0
    6770:	ldp	x19, x20, [sp, #16]
    6774:	ldp	x21, x22, [sp, #32]
    6778:	ldp	x23, x24, [sp, #48]
    677c:	ldp	x29, x30, [sp], #64
    6780:	ret
    6784:	mov	w2, w23
    6788:	mov	x1, x22
    678c:	mov	x0, x20
    6790:	bl	50f4 <ZSTD_free+0x168>
    6794:	cmp	x22, x0
    6798:	b.cc	6770 <ZSTD_getFrameHeader_advanced+0xa4>  // b.lo, b.ul, b.last
    679c:	str	w0, [x21, #24]
    67a0:	add	x0, x20, x19
    67a4:	ldurb	w2, [x0, #-1]
    67a8:	ubfx	x4, x2, #5, #1
    67ac:	tbnz	w2, #3, 68cc <ZSTD_getFrameHeader_advanced+0x200>
    67b0:	cbnz	w4, 6858 <ZSTD_getFrameHeader_advanced+0x18c>
    67b4:	ldrb	w3, [x20, x19]
    67b8:	add	x5, x19, #0x1
    67bc:	lsr	w0, w3, #3
    67c0:	add	w0, w0, #0xa
    67c4:	cmp	w0, #0x1f
    67c8:	b.gt	68d4 <ZSTD_getFrameHeader_advanced+0x208>
    67cc:	mov	x1, #0x1                   	// #1
    67d0:	and	x3, x3, #0x7
    67d4:	lsl	x1, x1, x0
    67d8:	mov	x19, x5
    67dc:	lsr	x0, x1, #3
    67e0:	madd	x0, x0, x3, x1
    67e4:	and	w1, w2, #0x3
    67e8:	cmp	w1, #0x2
    67ec:	b.eq	6860 <ZSTD_getFrameHeader_advanced+0x194>  // b.none
    67f0:	cmp	w1, #0x3
    67f4:	b.eq	686c <ZSTD_getFrameHeader_advanced+0x1a0>  // b.none
    67f8:	cmp	w1, #0x1
    67fc:	b.ne	6878 <ZSTD_getFrameHeader_advanced+0x1ac>  // b.any
    6800:	ldrb	w3, [x20, x19]
    6804:	add	x19, x19, #0x1
    6808:	lsr	w1, w2, #6
    680c:	cmp	w1, #0x2
    6810:	b.eq	6894 <ZSTD_getFrameHeader_advanced+0x1c8>  // b.none
    6814:	cmp	w1, #0x3
    6818:	b.eq	689c <ZSTD_getFrameHeader_advanced+0x1d0>  // b.none
    681c:	cmp	w1, #0x1
    6820:	b.eq	6880 <ZSTD_getFrameHeader_advanced+0x1b4>  // b.none
    6824:	cbz	w4, 68a4 <ZSTD_getFrameHeader_advanced+0x1d8>
    6828:	ldrb	w0, [x20, x19]
    682c:	mov	x1, x0
    6830:	stp	x1, x0, [x21]
    6834:	mov	x1, #0x1ffff               	// #131071
    6838:	cmp	x0, x1
    683c:	ubfx	x2, x2, #2, #1
    6840:	mov	x1, #0x20000               	// #131072
    6844:	csel	x0, x0, x1, ls  // ls = plast
    6848:	str	w0, [x21, #16]
    684c:	str	wzr, [x21, #20]
    6850:	stp	w3, w2, [x21, #28]
    6854:	b	676c <ZSTD_getFrameHeader_advanced+0xa0>
    6858:	mov	x0, #0x0                   	// #0
    685c:	b	67e4 <ZSTD_getFrameHeader_advanced+0x118>
    6860:	ldrh	w3, [x20, x19]
    6864:	add	x19, x19, #0x2
    6868:	b	6808 <ZSTD_getFrameHeader_advanced+0x13c>
    686c:	ldr	w3, [x20, x19]
    6870:	add	x19, x19, #0x4
    6874:	b	6808 <ZSTD_getFrameHeader_advanced+0x13c>
    6878:	mov	w3, #0x0                   	// #0
    687c:	b	6808 <ZSTD_getFrameHeader_advanced+0x13c>
    6880:	ldrh	w1, [x20, x19]
    6884:	add	x1, x1, #0x100
    6888:	cmp	w4, #0x0
    688c:	csel	x0, x0, x1, eq  // eq = none
    6890:	b	6830 <ZSTD_getFrameHeader_advanced+0x164>
    6894:	ldr	w1, [x20, x19]
    6898:	b	6888 <ZSTD_getFrameHeader_advanced+0x1bc>
    689c:	ldr	x1, [x20, x19]
    68a0:	b	6888 <ZSTD_getFrameHeader_advanced+0x1bc>
    68a4:	mov	x1, #0xffffffffffffffff    	// #-1
    68a8:	b	6830 <ZSTD_getFrameHeader_advanced+0x164>
    68ac:	mov	x0, x19
    68b0:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68b4:	mov	x0, #0xffffffffffffffff    	// #-1
    68b8:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68bc:	mov	x0, #0xfffffffffffffff6    	// #-10
    68c0:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68c4:	mov	x0, #0x8                   	// #8
    68c8:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68cc:	mov	x0, #0xfffffffffffffff2    	// #-14
    68d0:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68d4:	mov	x0, #0xfffffffffffffff0    	// #-16
    68d8:	b	6770 <ZSTD_getFrameHeader_advanced+0xa4>
    68dc:	stp	x29, x30, [sp, #-48]!
    68e0:	mov	x3, #0x7070                	// #28784
    68e4:	mov	x29, sp
    68e8:	str	x21, [sp, #32]
    68ec:	add	x21, x0, #0x4, lsl #12
    68f0:	stp	x19, x20, [sp, #16]
    68f4:	mov	x20, x0
    68f8:	add	x0, x0, x3
    68fc:	ldr	w3, [x21, #12560]
    6900:	bl	66cc <ZSTD_getFrameHeader_advanced>
    6904:	mov	x19, x0
    6908:	cmn	x0, #0x78
    690c:	b.hi	6940 <ZSTD_getFrameHeader_advanced+0x274>  // b.pmore
    6910:	cbnz	x0, 6954 <ZSTD_getFrameHeader_advanced+0x288>
    6914:	ldr	w0, [x21, #12428]
    6918:	cbz	w0, 6928 <ZSTD_getFrameHeader_advanced+0x25c>
    691c:	ldr	w1, [x21, #12648]
    6920:	cmp	w0, w1
    6924:	b.ne	695c <ZSTD_getFrameHeader_advanced+0x290>  // b.any
    6928:	ldr	w0, [x21, #12432]
    692c:	cbz	w0, 6940 <ZSTD_getFrameHeader_advanced+0x274>
    6930:	mov	x0, #0x70b0                	// #28848
    6934:	mov	x1, #0x0                   	// #0
    6938:	add	x0, x20, x0
    693c:	bl	4654 <XXH64_reset>
    6940:	mov	x0, x19
    6944:	ldp	x19, x20, [sp, #16]
    6948:	ldr	x21, [sp, #32]
    694c:	ldp	x29, x30, [sp], #48
    6950:	ret
    6954:	mov	x19, #0xffffffffffffffb8    	// #-72
    6958:	b	6940 <ZSTD_getFrameHeader_advanced+0x274>
    695c:	mov	x19, #0xffffffffffffffe0    	// #-32
    6960:	b	6940 <ZSTD_getFrameHeader_advanced+0x274>

0000000000006964 <ZSTD_getFrameHeader>:
    6964:	mov	w3, #0x0                   	// #0
    6968:	b	66cc <ZSTD_getFrameHeader_advanced>

000000000000696c <ZSTD_getFrameContentSize>:
    696c:	stp	x29, x30, [sp, #-64]!
    6970:	mov	x2, x1
    6974:	mov	x1, x0
    6978:	mov	x29, sp
    697c:	add	x0, sp, #0x18
    6980:	bl	6964 <ZSTD_getFrameHeader>
    6984:	cbnz	x0, 69a0 <ZSTD_getFrameContentSize+0x34>
    6988:	ldr	w1, [sp, #44]
    698c:	cmp	w1, #0x1
    6990:	b.eq	6998 <ZSTD_getFrameContentSize+0x2c>  // b.none
    6994:	ldr	x0, [sp, #24]
    6998:	ldp	x29, x30, [sp], #64
    699c:	ret
    69a0:	mov	x0, #0xfffffffffffffffe    	// #-2
    69a4:	b	6998 <ZSTD_getFrameContentSize+0x2c>

00000000000069a8 <ZSTD_getDecompressedSize>:
    69a8:	stp	x29, x30, [sp, #-16]!
    69ac:	mov	x29, sp
    69b0:	bl	696c <ZSTD_getFrameContentSize>
    69b4:	cmn	x0, #0x3
    69b8:	b.ls	69c0 <ZSTD_getDecompressedSize+0x18>  // b.plast
    69bc:	mov	x0, #0x0                   	// #0
    69c0:	ldp	x29, x30, [sp], #16
    69c4:	ret

00000000000069c8 <ZSTD_getcBlockSize>:
    69c8:	cmp	x1, #0x2
    69cc:	b.ls	6a08 <ZSTD_getcBlockSize+0x40>  // b.plast
    69d0:	ldrb	w1, [x0, #2]
    69d4:	ldrh	w0, [x0]
    69d8:	add	w1, w0, w1, lsl #16
    69dc:	and	w3, w1, #0x1
    69e0:	lsr	w0, w1, #3
    69e4:	ubfx	x1, x1, #1, #2
    69e8:	stp	w1, w3, [x2]
    69ec:	cmp	w1, #0x1
    69f0:	str	w0, [x2, #8]
    69f4:	b.eq	6a10 <ZSTD_getcBlockSize+0x48>  // b.none
    69f8:	cmp	w1, #0x3
    69fc:	mov	x1, #0xffffffffffffffec    	// #-20
    6a00:	csel	x0, x0, x1, ne  // ne = any
    6a04:	ret
    6a08:	mov	x0, #0xffffffffffffffb8    	// #-72
    6a0c:	b	6a04 <ZSTD_getcBlockSize+0x3c>
    6a10:	mov	x0, #0x1                   	// #1
    6a14:	b	6a04 <ZSTD_getcBlockSize+0x3c>

0000000000006a18 <ZSTD_decodeLiteralsBlock>:
    6a18:	stp	x29, x30, [sp, #-80]!
    6a1c:	cmp	x2, #0x2
    6a20:	mov	x29, sp
    6a24:	stp	x19, x20, [sp, #16]
    6a28:	stp	x21, x22, [sp, #32]
    6a2c:	stp	x23, x24, [sp, #48]
    6a30:	str	x25, [sp, #64]
    6a34:	b.hi	6a58 <ZSTD_decodeLiteralsBlock+0x40>  // b.pmore
    6a38:	mov	x23, #0xffffffffffffffec    	// #-20
    6a3c:	mov	x0, x23
    6a40:	ldp	x19, x20, [sp, #16]
    6a44:	ldp	x21, x22, [sp, #32]
    6a48:	ldp	x23, x24, [sp, #48]
    6a4c:	ldr	x25, [sp, #64]
    6a50:	ldp	x29, x30, [sp], #80
    6a54:	ret
    6a58:	ldrb	w19, [x1]
    6a5c:	mov	x20, x0
    6a60:	and	w22, w19, #0x3
    6a64:	cmp	w22, #0x2
    6a68:	b.eq	6ad0 <ZSTD_decodeLiteralsBlock+0xb8>  // b.none
    6a6c:	cmp	w22, #0x3
    6a70:	b.eq	6ac4 <ZSTD_decodeLiteralsBlock+0xac>  // b.none
    6a74:	cmp	w22, #0x1
    6a78:	lsr	w0, w19, #2
    6a7c:	b.ne	6c2c <ZSTD_decodeLiteralsBlock+0x214>  // b.any
    6a80:	and	w0, w0, #0x3
    6a84:	cmp	w0, #0x1
    6a88:	b.eq	6cc8 <ZSTD_decodeLiteralsBlock+0x2b0>  // b.none
    6a8c:	cmp	w0, #0x3
    6a90:	b.eq	6cd8 <ZSTD_decodeLiteralsBlock+0x2c0>  // b.none
    6a94:	ubfx	x19, x19, #3, #5
    6a98:	mov	x23, #0x1                   	// #1
    6a9c:	ldrb	w1, [x1, x23]
    6aa0:	mov	x0, #0x71d8                	// #29144
    6aa4:	add	x21, x20, x0
    6aa8:	add	x2, x19, #0x8
    6aac:	mov	x0, x21
    6ab0:	add	x23, x23, #0x1
    6ab4:	bl	0 <grub_memset>
    6ab8:	str	x21, [x20, #28952]
    6abc:	str	x19, [x20, #28984]
    6ac0:	b	6a3c <ZSTD_decodeLiteralsBlock+0x24>
    6ac4:	add	x0, x0, #0x4, lsl #12
    6ac8:	ldr	w0, [x0, #12456]
    6acc:	cbz	w0, 6d04 <ZSTD_decodeLiteralsBlock+0x2ec>
    6ad0:	cmp	x2, #0x4
    6ad4:	b.ls	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.plast
    6ad8:	ldr	w3, [x1]
    6adc:	ubfx	x19, x19, #2, #2
    6ae0:	cmp	w19, #0x2
    6ae4:	lsr	w21, w3, #4
    6ae8:	b.eq	6bb0 <ZSTD_decodeLiteralsBlock+0x198>  // b.none
    6aec:	cmp	w19, #0x3
    6af0:	b.eq	6bc4 <ZSTD_decodeLiteralsBlock+0x1ac>  // b.none
    6af4:	eor	w19, w19, #0x1
    6af8:	and	x21, x21, #0x3ff
    6afc:	ubfx	x3, x3, #14, #10
    6b00:	mov	x0, #0x3                   	// #3
    6b04:	add	x23, x0, x3
    6b08:	cmp	x23, x2
    6b0c:	b.hi	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.pmore
    6b10:	add	x24, x20, #0x4, lsl #12
    6b14:	ldr	w2, [x24, #12652]
    6b18:	cbz	w2, 6b40 <ZSTD_decodeLiteralsBlock+0x128>
    6b1c:	cmp	x21, #0x300
    6b20:	b.ls	6b40 <ZSTD_decodeLiteralsBlock+0x128>  // b.plast
    6b24:	ldr	x5, [x20, #24]
    6b28:	mov	x2, #0x0                   	// #0
    6b2c:	mov	x4, #0x4040                	// #16448
    6b30:	prfm	pldl2keep, [x5, x2]
    6b34:	add	x2, x2, #0x40
    6b38:	cmp	x2, x4
    6b3c:	b.ne	6b30 <ZSTD_decodeLiteralsBlock+0x118>  // b.any
    6b40:	mov	x6, #0x71d8                	// #29144
    6b44:	ldr	w7, [x24, #12624]
    6b48:	add	x2, x1, x0
    6b4c:	add	x25, x20, x6
    6b50:	cmp	w22, #0x3
    6b54:	b.ne	6bf4 <ZSTD_decodeLiteralsBlock+0x1dc>  // b.any
    6b58:	mov	w5, w7
    6b5c:	mov	x1, x21
    6b60:	mov	x0, x25
    6b64:	ldr	x4, [x20, #24]
    6b68:	cbz	w19, 6bec <ZSTD_decodeLiteralsBlock+0x1d4>
    6b6c:	bl	3a84 <HUF_decompress1X_usingDTable_bmi2>
    6b70:	cmn	x0, #0x78
    6b74:	b.hi	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.pmore
    6b78:	str	x25, [x20, #28952]
    6b7c:	mov	w0, #0x1                   	// #1
    6b80:	str	x21, [x20, #28984]
    6b84:	cmp	w22, #0x2
    6b88:	str	w0, [x24, #12456]
    6b8c:	b.ne	6b9c <ZSTD_decodeLiteralsBlock+0x184>  // b.any
    6b90:	mov	x3, #0x2838                	// #10296
    6b94:	add	x0, x20, x3
    6b98:	str	x0, [x20, #24]
    6b9c:	add	x0, x25, x21
    6ba0:	mov	x2, #0x8                   	// #8
    6ba4:	mov	w1, #0x0                   	// #0
    6ba8:	bl	0 <grub_memset>
    6bac:	b	6a3c <ZSTD_decodeLiteralsBlock+0x24>
    6bb0:	and	x21, x21, #0x3fff
    6bb4:	lsr	w3, w3, #18
    6bb8:	mov	w19, #0x0                   	// #0
    6bbc:	mov	x0, #0x4                   	// #4
    6bc0:	b	6b04 <ZSTD_decodeLiteralsBlock+0xec>
    6bc4:	and	w4, w21, #0x3ffff
    6bc8:	ldrb	w0, [x1, #4]
    6bcc:	and	x21, x21, #0x3ffff
    6bd0:	cmp	w4, #0x20, lsl #12
    6bd4:	b.hi	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.pmore
    6bd8:	lsl	w0, w0, #10
    6bdc:	mov	w19, #0x0                   	// #0
    6be0:	add	w3, w0, w3, lsr #22
    6be4:	mov	x0, #0x5                   	// #5
    6be8:	b	6b04 <ZSTD_decodeLiteralsBlock+0xec>
    6bec:	bl	3b84 <HUF_decompress4X_usingDTable_bmi2>
    6bf0:	b	6b70 <ZSTD_decodeLiteralsBlock+0x158>
    6bf4:	mov	x4, #0x2838                	// #10296
    6bf8:	mov	x5, #0x6848                	// #26696
    6bfc:	add	x0, x20, x4
    6c00:	add	x5, x20, x5
    6c04:	mov	x4, x3
    6c08:	mov	x1, x25
    6c0c:	mov	x3, x2
    6c10:	mov	x6, #0x800                 	// #2048
    6c14:	mov	x2, x21
    6c18:	cbz	w19, 6c24 <ZSTD_decodeLiteralsBlock+0x20c>
    6c1c:	bl	3af8 <HUF_decompress1X1_DCtx_wksp_bmi2>
    6c20:	b	6b70 <ZSTD_decodeLiteralsBlock+0x158>
    6c24:	bl	3c34 <HUF_decompress4X_hufOnly_wksp_bmi2>
    6c28:	b	6b70 <ZSTD_decodeLiteralsBlock+0x158>
    6c2c:	and	w0, w0, #0x3
    6c30:	cmp	w0, #0x1
    6c34:	b.eq	6c90 <ZSTD_decodeLiteralsBlock+0x278>  // b.none
    6c38:	cmp	w0, #0x3
    6c3c:	b.eq	6ca0 <ZSTD_decodeLiteralsBlock+0x288>  // b.none
    6c40:	ubfx	x19, x19, #3, #5
    6c44:	mov	x0, #0x1                   	// #1
    6c48:	add	x23, x19, x0
    6c4c:	add	x3, x23, #0x8
    6c50:	cmp	x3, x2
    6c54:	b.ls	6cb8 <ZSTD_decodeLiteralsBlock+0x2a0>  // b.plast
    6c58:	cmp	x23, x2
    6c5c:	b.hi	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.pmore
    6c60:	mov	x2, #0x71d8                	// #29144
    6c64:	add	x21, x20, x2
    6c68:	add	x1, x1, x0
    6c6c:	mov	x2, x19
    6c70:	mov	x0, x21
    6c74:	bl	51d0 <ZSTD_free+0x244>
    6c78:	add	x0, x21, x19
    6c7c:	mov	x2, #0x8                   	// #8
    6c80:	mov	w1, #0x0                   	// #0
    6c84:	str	x21, [x20, #28952]
    6c88:	str	x19, [x20, #28984]
    6c8c:	b	6ba8 <ZSTD_decodeLiteralsBlock+0x190>
    6c90:	ldrh	w19, [x1]
    6c94:	mov	x0, #0x2                   	// #2
    6c98:	ubfx	x19, x19, #4, #12
    6c9c:	b	6c48 <ZSTD_decodeLiteralsBlock+0x230>
    6ca0:	ldrh	w0, [x1]
    6ca4:	ldrb	w19, [x1, #2]
    6ca8:	add	w19, w0, w19, lsl #16
    6cac:	mov	x0, #0x3                   	// #3
    6cb0:	ubfx	x19, x19, #4, #21
    6cb4:	b	6c48 <ZSTD_decodeLiteralsBlock+0x230>
    6cb8:	add	x1, x1, x0
    6cbc:	str	x1, [x20, #28952]
    6cc0:	str	x19, [x20, #28984]
    6cc4:	b	6a3c <ZSTD_decodeLiteralsBlock+0x24>
    6cc8:	ldrh	w19, [x1]
    6ccc:	mov	x23, #0x2                   	// #2
    6cd0:	ubfx	x19, x19, #4, #12
    6cd4:	b	6a9c <ZSTD_decodeLiteralsBlock+0x84>
    6cd8:	ldrh	w0, [x1]
    6cdc:	cmp	x2, #0x3
    6ce0:	ldrb	w19, [x1, #2]
    6ce4:	add	w19, w0, w19, lsl #16
    6ce8:	lsr	w0, w19, #4
    6cec:	ubfx	x19, x19, #4, #21
    6cf0:	b.eq	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.none
    6cf4:	cmp	w0, #0x20, lsl #12
    6cf8:	b.hi	6a38 <ZSTD_decodeLiteralsBlock+0x20>  // b.pmore
    6cfc:	mov	x23, #0x3                   	// #3
    6d00:	b	6a9c <ZSTD_decodeLiteralsBlock+0x84>
    6d04:	mov	x23, #0xffffffffffffffe2    	// #-30
    6d08:	b	6a3c <ZSTD_decodeLiteralsBlock+0x24>

0000000000006d0c <ZSTD_decodeSeqHeaders>:
    6d0c:	cbnz	x3, 6d38 <ZSTD_decodeSeqHeaders+0x2c>
    6d10:	mov	x0, #0xffffffffffffffb8    	// #-72
    6d14:	ret
    6d18:	mov	x0, #0xffffffffffffffb8    	// #-72
    6d1c:	ldp	x29, x30, [sp, #48]
    6d20:	ldp	x19, x21, [sp, #64]
    6d24:	ldp	x22, x23, [sp, #80]
    6d28:	ldp	x24, x25, [sp, #96]
    6d2c:	ldp	x26, x27, [sp, #112]
    6d30:	add	sp, sp, #0x80
    6d34:	ret
    6d38:	sub	sp, sp, #0x80
    6d3c:	stp	x29, x30, [sp, #48]
    6d40:	add	x29, sp, #0x30
    6d44:	stp	x19, x21, [sp, #64]
    6d48:	stp	x22, x23, [sp, #80]
    6d4c:	stp	x24, x25, [sp, #96]
    6d50:	mov	x24, x2
    6d54:	stp	x26, x27, [sp, #112]
    6d58:	ldrb	w21, [x2]
    6d5c:	cbnz	w21, 6d6c <ZSTD_decodeSeqHeaders+0x60>
    6d60:	mov	x0, #0x1                   	// #1
    6d64:	str	wzr, [x1]
    6d68:	b	6d1c <ZSTD_decodeSeqHeaders+0x10>
    6d6c:	mov	x22, x0
    6d70:	add	x23, x2, x3
    6d74:	add	x5, x2, #0x1
    6d78:	cmp	w21, #0x7f
    6d7c:	b.le	6da0 <ZSTD_decodeSeqHeaders+0x94>
    6d80:	cmp	w21, #0xff
    6d84:	b.ne	6e1c <ZSTD_decodeSeqHeaders+0x110>  // b.any
    6d88:	add	x5, x2, #0x3
    6d8c:	cmp	x5, x23
    6d90:	b.hi	6d18 <ZSTD_decodeSeqHeaders+0xc>  // b.pmore
    6d94:	ldurh	w21, [x2, #1]
    6d98:	mov	w9, #0x7f00                	// #32512
    6d9c:	add	w21, w21, w9
    6da0:	str	w21, [x1]
    6da4:	add	x0, x5, #0x4
    6da8:	cmp	x23, x0
    6dac:	b.cc	6d18 <ZSTD_decodeSeqHeaders+0xc>  // b.lo, b.ul, b.last
    6db0:	mov	x19, x5
    6db4:	add	x26, x22, #0x4, lsl #12
    6db8:	adrp	x0, 0 <FSE_versionNumber>
    6dbc:	mov	x1, x22
    6dc0:	mov	w4, #0x9                   	// #9
    6dc4:	mov	w3, #0x23                  	// #35
    6dc8:	ldrb	w27, [x19], #1
    6dcc:	str	w21, [sp, #32]
    6dd0:	ldr	x25, [x0]
    6dd4:	sub	x6, x23, x19
    6dd8:	ldr	w0, [x26, #12652]
    6ddc:	mov	x5, x19
    6de0:	str	w0, [sp, #24]
    6de4:	add	x7, x25, #0x378
    6de8:	lsr	w2, w27, #6
    6dec:	ldr	w0, [x26, #12460]
    6df0:	str	w0, [sp, #16]
    6df4:	add	x0, x25, #0x420
    6df8:	str	x0, [sp, #8]
    6dfc:	add	x0, x25, #0x2e8
    6e00:	str	x0, [sp]
    6e04:	add	x0, x22, #0x20
    6e08:	bl	5370 <ZSTD_free+0x3e4>
    6e0c:	cmn	x0, #0x78
    6e10:	b.ls	6e38 <ZSTD_decodeSeqHeaders+0x12c>  // b.plast
    6e14:	mov	x0, #0xffffffffffffffec    	// #-20
    6e18:	b	6d1c <ZSTD_decodeSeqHeaders+0x10>
    6e1c:	cmp	x23, x5
    6e20:	b.ls	6d18 <ZSTD_decodeSeqHeaders+0xc>  // b.plast
    6e24:	ldrb	w0, [x2, #1]
    6e28:	sub	w21, w21, #0x80
    6e2c:	add	x5, x2, #0x2
    6e30:	add	w21, w0, w21, lsl #8
    6e34:	b	6da0 <ZSTD_decodeSeqHeaders+0x94>
    6e38:	str	w21, [sp, #32]
    6e3c:	add	x19, x19, x0
    6e40:	mov	x8, #0x1028                	// #4136
    6e44:	add	x7, x25, #0xc0
    6e48:	ldr	w0, [x26, #12652]
    6e4c:	sub	x6, x23, x19
    6e50:	str	w0, [sp, #24]
    6e54:	mov	x5, x19
    6e58:	ubfx	x2, x27, #4, #2
    6e5c:	add	x1, x22, #0x10
    6e60:	ldr	w0, [x26, #12460]
    6e64:	mov	w4, #0x8                   	// #8
    6e68:	str	w0, [sp, #16]
    6e6c:	add	x0, x25, #0x628
    6e70:	str	x0, [sp, #8]
    6e74:	add	x0, x25, #0x40
    6e78:	str	x0, [sp]
    6e7c:	mov	w3, #0x1f                  	// #31
    6e80:	add	x0, x22, x8
    6e84:	bl	5370 <ZSTD_free+0x3e4>
    6e88:	cmn	x0, #0x78
    6e8c:	b.hi	6e14 <ZSTD_decodeSeqHeaders+0x108>  // b.pmore
    6e90:	str	w21, [sp, #32]
    6e94:	add	x19, x19, x0
    6e98:	add	x7, x25, #0x214
    6e9c:	sub	x6, x23, x19
    6ea0:	ldr	w0, [x26, #12652]
    6ea4:	mov	x5, x19
    6ea8:	str	w0, [sp, #24]
    6eac:	ubfx	x2, x27, #2, #2
    6eb0:	add	x1, x22, #0x8
    6eb4:	mov	w4, #0x9                   	// #9
    6eb8:	ldr	w0, [x26, #12460]
    6ebc:	mov	w3, #0x34                  	// #52
    6ec0:	str	w0, [sp, #16]
    6ec4:	add	x0, x25, #0x730
    6ec8:	str	x0, [sp, #8]
    6ecc:	add	x0, x25, #0x140
    6ed0:	str	x0, [sp]
    6ed4:	mov	x0, #0x1830                	// #6192
    6ed8:	add	x0, x22, x0
    6edc:	bl	5370 <ZSTD_free+0x3e4>
    6ee0:	cmn	x0, #0x78
    6ee4:	b.hi	6e14 <ZSTD_decodeSeqHeaders+0x108>  // b.pmore
    6ee8:	add	x19, x19, x0
    6eec:	ldr	w0, [x26, #12652]
    6ef0:	cbz	w0, 6f34 <ZSTD_decodeSeqHeaders+0x228>
    6ef4:	ldr	x0, [x22, #28752]
    6ef8:	lsl	w21, w21, #6
    6efc:	ldr	x1, [x22, #28760]
    6f00:	ldr	x2, [x22, #28768]
    6f04:	sub	x0, x0, x1
    6f08:	cmp	x0, #0x20, lsl #12
    6f0c:	mov	x1, #0x20000               	// #131072
    6f10:	csel	x0, x0, x1, ls  // ls = plast
    6f14:	sxtw	x1, w21
    6f18:	cmp	x0, w21, sxtw
    6f1c:	csel	x0, x0, x1, ls  // ls = plast
    6f20:	mov	x1, #0x0                   	// #0
    6f24:	sub	x2, x2, x0
    6f28:	cmp	x1, x0
    6f2c:	b.cc	6f3c <ZSTD_decodeSeqHeaders+0x230>  // b.lo, b.ul, b.last
    6f30:	str	wzr, [x26, #12652]
    6f34:	sub	x0, x19, x24
    6f38:	b	6d1c <ZSTD_decodeSeqHeaders+0x10>
    6f3c:	prfm	pldl2keep, [x2, x1]
    6f40:	add	x1, x1, #0x40
    6f44:	b	6f28 <ZSTD_decodeSeqHeaders+0x21c>
	...
    6f50:	sub	sp, sp, #0x150
    6f54:	stp	x29, x30, [sp, #16]
    6f58:	add	x29, sp, #0x10
    6f5c:	stp	x19, x20, [sp, #32]
    6f60:	mov	x20, x0
    6f64:	stp	x21, x22, [sp, #48]
    6f68:	mov	x21, x2
    6f6c:	mov	x2, x4
    6f70:	stp	x23, x24, [sp, #64]
    6f74:	mov	x24, x1
    6f78:	mov	x23, x4
    6f7c:	mov	x1, x3
    6f80:	stp	x25, x26, [sp, #80]
    6f84:	mov	x25, x3
    6f88:	mov	w26, w5
    6f8c:	stp	x27, x28, [sp, #96]
    6f90:	bl	6a18 <ZSTD_decodeLiteralsBlock>
    6f94:	mov	x28, x0
    6f98:	cmn	x0, #0x78
    6f9c:	b.hi	703c <ZSTD_decodeSeqHeaders+0x330>  // b.pmore
    6fa0:	add	x25, x25, x0
    6fa4:	sub	x23, x23, x0
    6fa8:	mov	x3, x23
    6fac:	mov	x2, x25
    6fb0:	add	x1, sp, #0xbc
    6fb4:	mov	x0, x20
    6fb8:	bl	6d0c <ZSTD_decodeSeqHeaders>
    6fbc:	mov	x28, x0
    6fc0:	cmn	x0, #0x78
    6fc4:	b.hi	703c <ZSTD_decodeSeqHeaders+0x330>  // b.pmore
    6fc8:	ldr	w5, [sp, #188]
    6fcc:	add	x1, x25, x0
    6fd0:	sub	x4, x23, x0
    6fd4:	cbz	w26, 6fe8 <ZSTD_decodeSeqHeaders+0x2dc>
    6fd8:	ldr	x2, [x20, #28792]
    6fdc:	mov	x0, #0x1000000             	// #16777216
    6fe0:	cmp	x2, x0
    6fe4:	b.ls	7074 <ZSTD_decodeSeqHeaders+0x368>  // b.plast
    6fe8:	cmp	w5, #0x0
    6fec:	b.le	7074 <ZSTD_decodeSeqHeaders+0x368>
    6ff0:	ldr	x7, [x20, #16]
    6ff4:	mov	w2, #0x1                   	// #1
    6ff8:	mov	w0, #0x0                   	// #0
    6ffc:	ldr	w3, [x7, #4]
    7000:	lsl	w2, w2, w3
    7004:	add	x2, x7, w2, uxtw #3
    7008:	cmp	x2, x7
    700c:	b.ne	7060 <ZSTD_decodeSeqHeaders+0x354>  // b.any
    7010:	mov	w2, #0x8                   	// #8
    7014:	sub	w2, w2, w3
    7018:	lsl	w0, w0, w2
    701c:	cmp	w0, #0x6
    7020:	b.ls	7074 <ZSTD_decodeSeqHeaders+0x368>  // b.plast
    7024:	mov	x3, x1
    7028:	mov	x2, x21
    702c:	mov	x1, x24
    7030:	mov	x0, x20
    7034:	bl	5aac <ZSTD_free+0xb20>
    7038:	mov	x28, x0
    703c:	mov	x0, x28
    7040:	ldp	x29, x30, [sp, #16]
    7044:	ldp	x19, x20, [sp, #32]
    7048:	ldp	x21, x22, [sp, #48]
    704c:	ldp	x23, x24, [sp, #64]
    7050:	ldp	x25, x26, [sp, #80]
    7054:	ldp	x27, x28, [sp, #96]
    7058:	add	sp, sp, #0x150
    705c:	ret
    7060:	ldrb	w6, [x7, #10]
    7064:	add	x7, x7, #0x8
    7068:	cmp	w6, #0x16
    706c:	cinc	w0, w0, hi  // hi = pmore
    7070:	b	7008 <ZSTD_decodeSeqHeaders+0x2fc>
    7074:	ldr	x22, [x20, #28952]
    7078:	str	w5, [sp, #116]
    707c:	ldr	x2, [x20, #28984]
    7080:	str	x22, [sp, #192]
    7084:	add	x21, x24, x21
    7088:	add	x0, x22, x2
    708c:	str	x0, [sp, #120]
    7090:	mov	w0, w5
    7094:	cbz	w0, 7574 <ZSTD_decodeSeqHeaders+0x868>
    7098:	ldr	x0, [x20, #28760]
    709c:	add	x25, x20, #0x4, lsl #12
    70a0:	str	x0, [sp, #136]
    70a4:	mov	x2, x4
    70a8:	ldr	x0, [x20, #28768]
    70ac:	str	x0, [sp, #128]
    70b0:	mov	w0, #0x1                   	// #1
    70b4:	ldr	x26, [x20, #28752]
    70b8:	str	w0, [x25, #12460]
    70bc:	ldr	w0, [x25, #10300]
    70c0:	str	x0, [sp, #288]
    70c4:	ldr	w0, [x25, #10304]
    70c8:	str	x0, [sp, #296]
    70cc:	ldr	w0, [x25, #10308]
    70d0:	str	x0, [sp, #304]
    70d4:	add	x0, sp, #0xc8
    70d8:	bl	57ac <ZSTD_free+0x820>
    70dc:	cmn	x0, #0x78
    70e0:	b.hi	7344 <ZSTD_decodeSeqHeaders+0x638>  // b.pmore
    70e4:	ldr	x2, [x20]
    70e8:	add	x1, sp, #0xc8
    70ec:	add	x0, x1, #0x28
    70f0:	mov	x19, x24
    70f4:	sub	x27, x21, #0x8
    70f8:	bl	5168 <ZSTD_free+0x1dc>
    70fc:	ldr	x2, [x20, #16]
    7100:	add	x1, sp, #0xc8
    7104:	add	x0, x1, #0x38
    7108:	bl	5168 <ZSTD_free+0x1dc>
    710c:	ldr	x2, [x20, #8]
    7110:	add	x1, sp, #0xc8
    7114:	add	x0, x1, #0x48
    7118:	bl	5168 <ZSTD_free+0x1dc>
    711c:	sub	x0, x21, #0xd
    7120:	str	x0, [sp, #160]
    7124:	add	x0, sp, #0xc8
    7128:	bl	4ffc <ZSTD_free+0x70>
    712c:	cmp	w0, #0x2
    7130:	ldr	w0, [sp, #116]
    7134:	b.hi	756c <ZSTD_decodeSeqHeaders+0x860>  // b.pmore
    7138:	cbnz	w0, 7184 <ZSTD_decodeSeqHeaders+0x478>
    713c:	ldr	x0, [sp, #288]
    7140:	str	w0, [x25, #10300]
    7144:	ldr	x0, [sp, #296]
    7148:	str	w0, [x25, #10304]
    714c:	ldr	x0, [sp, #304]
    7150:	str	w0, [x25, #10308]
    7154:	ldr	x0, [sp, #120]
    7158:	sub	x21, x21, x19
    715c:	ldr	x1, [sp, #192]
    7160:	sub	x22, x0, x1
    7164:	cmp	x22, x21
    7168:	b.hi	72f0 <ZSTD_decodeSeqHeaders+0x5e4>  // b.pmore
    716c:	mov	x0, x19
    7170:	add	x19, x19, x22
    7174:	mov	x2, x22
    7178:	sub	x28, x19, x24
    717c:	bl	51d0 <ZSTD_free+0x244>
    7180:	b	703c <ZSTD_decodeSeqHeaders+0x330>
    7184:	ldp	x2, x0, [sp, #240]
    7188:	ldp	x3, x1, [sp, #264]
    718c:	add	x2, x0, x2, lsl #3
    7190:	ldr	x0, [sp, #280]
    7194:	ldrb	w6, [x2, #2]
    7198:	ldr	w8, [x2, #4]
    719c:	add	x1, x0, x1, lsl #3
    71a0:	ldr	x0, [sp, #256]
    71a4:	ldrb	w9, [x1, #2]
    71a8:	ldr	w20, [x1, #4]
    71ac:	add	x0, x3, x0, lsl #3
    71b0:	add	w7, w6, w9
    71b4:	ldrb	w5, [x0, #2]
    71b8:	add	w7, w7, w5
    71bc:	cbz	w5, 72f8 <ZSTD_decodeSeqHeaders+0x5ec>
    71c0:	ldr	w23, [x0, #4]
    71c4:	mov	w1, w5
    71c8:	add	x0, sp, #0xc8
    71cc:	bl	4fdc <ZSTD_free+0x50>
    71d0:	add	x23, x23, x0
    71d4:	cmp	w5, #0x1
    71d8:	b.ne	7310 <ZSTD_decodeSeqHeaders+0x604>  // b.any
    71dc:	cmp	w8, #0x0
    71e0:	cinc	x1, x23, eq  // eq = none
    71e4:	ldr	x23, [sp, #288]
    71e8:	cbz	x1, 7218 <ZSTD_decodeSeqHeaders+0x50c>
    71ec:	cmp	x1, #0x3
    71f0:	b.ne	7300 <ZSTD_decodeSeqHeaders+0x5f4>  // b.any
    71f4:	sub	x0, x23, #0x1
    71f8:	cmp	x0, #0x0
    71fc:	cinc	x0, x0, eq  // eq = none
    7200:	cmp	x1, #0x1
    7204:	b.eq	7210 <ZSTD_decodeSeqHeaders+0x504>  // b.none
    7208:	ldr	x1, [sp, #296]
    720c:	str	x1, [sp, #304]
    7210:	stp	x0, x23, [sp, #288]
    7214:	mov	x23, x0
    7218:	mov	w20, w20
    721c:	cbz	w9, 7324 <ZSTD_decodeSeqHeaders+0x618>
    7220:	mov	w1, w9
    7224:	add	x0, sp, #0xc8
    7228:	bl	4fdc <ZSTD_free+0x50>
    722c:	add	x20, x20, x0
    7230:	cmp	w7, #0x1e
    7234:	b.ls	7240 <ZSTD_decodeSeqHeaders+0x534>  // b.plast
    7238:	add	x0, sp, #0xc8
    723c:	bl	4ffc <ZSTD_free+0x70>
    7240:	mov	w8, w8
    7244:	cbz	w6, 732c <ZSTD_decodeSeqHeaders+0x620>
    7248:	mov	w1, w6
    724c:	add	x0, sp, #0xc8
    7250:	bl	4fdc <ZSTD_free+0x50>
    7254:	add	x8, x8, x0
    7258:	str	x8, [sp, #144]
    725c:	ldp	x0, x1, [sp, #240]
    7260:	lsl	x2, x0, #3
    7264:	add	x0, x1, x0, lsl #3
    7268:	ldrh	w5, [x1, x2]
    726c:	ldrb	w1, [x0, #3]
    7270:	add	x0, sp, #0xc8
    7274:	bl	4fb8 <ZSTD_free+0x2c>
    7278:	add	x5, x0, w5, uxth
    727c:	ldp	x0, x1, [sp, #272]
    7280:	str	x5, [sp, #240]
    7284:	lsl	x2, x0, #3
    7288:	add	x0, x1, x0, lsl #3
    728c:	ldrh	w5, [x1, x2]
    7290:	ldrb	w1, [x0, #3]
    7294:	add	x0, sp, #0xc8
    7298:	bl	4fb8 <ZSTD_free+0x2c>
    729c:	add	x5, x0, w5, uxth
    72a0:	ldp	x0, x1, [sp, #256]
    72a4:	str	x5, [sp, #272]
    72a8:	lsl	x2, x0, #3
    72ac:	add	x0, x1, x0, lsl #3
    72b0:	ldrh	w5, [x1, x2]
    72b4:	ldrb	w1, [x0, #3]
    72b8:	add	x0, sp, #0xc8
    72bc:	bl	4fb8 <ZSTD_free+0x2c>
    72c0:	add	x5, x0, w5, uxth
    72c4:	ldr	x8, [sp, #144]
    72c8:	str	x5, [sp, #256]
    72cc:	ldr	x1, [sp, #192]
    72d0:	add	x28, x20, x8
    72d4:	add	x0, x19, x28
    72d8:	str	x0, [sp, #144]
    72dc:	add	x0, x1, x8
    72e0:	str	x0, [sp, #152]
    72e4:	add	x0, x19, x28
    72e8:	cmp	x21, x0
    72ec:	b.cs	7334 <ZSTD_decodeSeqHeaders+0x628>  // b.hs, b.nlast
    72f0:	mov	x28, #0xffffffffffffffba    	// #-70
    72f4:	b	703c <ZSTD_decodeSeqHeaders+0x330>
    72f8:	mov	x23, #0x0                   	// #0
    72fc:	b	71dc <ZSTD_decodeSeqHeaders+0x4d0>
    7300:	add	x0, x1, #0xa
    7304:	add	x2, sp, #0xd0
    7308:	ldr	x0, [x2, x0, lsl #3]
    730c:	b	71f8 <ZSTD_decodeSeqHeaders+0x4ec>
    7310:	ldr	x0, [sp, #296]
    7314:	str	x0, [sp, #304]
    7318:	ldr	x0, [sp, #288]
    731c:	stp	x23, x0, [sp, #288]
    7320:	b	7218 <ZSTD_decodeSeqHeaders+0x50c>
    7324:	mov	x0, #0x0                   	// #0
    7328:	b	722c <ZSTD_decodeSeqHeaders+0x520>
    732c:	mov	x0, #0x0                   	// #0
    7330:	b	7254 <ZSTD_decodeSeqHeaders+0x548>
    7334:	ldr	x0, [sp, #120]
    7338:	add	x2, x1, x8
    733c:	cmp	x0, x2
    7340:	b.cs	734c <ZSTD_decodeSeqHeaders+0x640>  // b.hs, b.nlast
    7344:	mov	x28, #0xffffffffffffffec    	// #-20
    7348:	b	703c <ZSTD_decodeSeqHeaders+0x330>
    734c:	add	x22, x19, x8
    7350:	cmp	x22, x27
    7354:	b.ls	73a8 <ZSTD_decodeSeqHeaders+0x69c>  // b.plast
    7358:	ldp	x6, x0, [sp, #120]
    735c:	str	x0, [sp, #8]
    7360:	ldr	x0, [sp, #136]
    7364:	str	x0, [sp]
    7368:	mov	x7, x26
    736c:	add	x5, sp, #0xc0
    7370:	mov	x4, x23
    7374:	mov	x3, x20
    7378:	mov	x2, x8
    737c:	mov	x1, x21
    7380:	mov	x0, x19
    7384:	bl	5944 <ZSTD_free+0x9b8>
    7388:	mov	x28, x0
    738c:	cmn	x28, #0x78
    7390:	b.hi	703c <ZSTD_decodeSeqHeaders+0x330>  // b.pmore
    7394:	ldr	w0, [sp, #116]
    7398:	add	x19, x19, x28
    739c:	sub	w0, w0, #0x1
    73a0:	str	w0, [sp, #116]
    73a4:	b	7124 <ZSTD_decodeSeqHeaders+0x418>
    73a8:	mov	x0, x19
    73ac:	mov	x2, #0x8                   	// #8
    73b0:	str	x8, [sp, #168]
    73b4:	bl	51d0 <ZSTD_free+0x244>
    73b8:	ldr	x8, [sp, #168]
    73bc:	cmp	x8, #0x8
    73c0:	b.ls	73d8 <ZSTD_decodeSeqHeaders+0x6cc>  // b.plast
    73c4:	ldr	x1, [sp, #192]
    73c8:	sub	x2, x8, #0x8
    73cc:	add	x0, x19, #0x8
    73d0:	add	x1, x1, #0x8
    73d4:	bl	58f8 <ZSTD_free+0x96c>
    73d8:	ldr	x0, [sp, #152]
    73dc:	str	x0, [sp, #192]
    73e0:	sub	x0, x22, x26
    73e4:	sub	x5, x22, x23
    73e8:	cmp	x23, x0
    73ec:	b.ls	745c <ZSTD_decodeSeqHeaders+0x750>  // b.plast
    73f0:	ldr	x0, [sp, #136]
    73f4:	sub	x0, x22, x0
    73f8:	cmp	x23, x0
    73fc:	b.hi	7344 <ZSTD_decodeSeqHeaders+0x638>  // b.pmore
    7400:	ldr	x0, [sp, #128]
    7404:	sub	x1, x5, x26
    7408:	ldr	x2, [sp, #128]
    740c:	add	x1, x0, x1
    7410:	add	x0, x1, x20
    7414:	cmp	x2, x0
    7418:	b.cc	742c <ZSTD_decodeSeqHeaders+0x720>  // b.lo, b.ul, b.last
    741c:	mov	x2, x20
    7420:	mov	x0, x22
    7424:	bl	0 <grub_memmove>
    7428:	b	738c <ZSTD_decodeSeqHeaders+0x680>
    742c:	sub	x2, x26, x5
    7430:	mov	x0, x22
    7434:	str	x2, [sp, #152]
    7438:	bl	0 <grub_memmove>
    743c:	ldr	x2, [sp, #152]
    7440:	add	x22, x22, x2
    7444:	sub	x20, x20, x2
    7448:	cmp	x27, x22
    744c:	b.cc	753c <ZSTD_decodeSeqHeaders+0x830>  // b.lo, b.ul, b.last
    7450:	cmp	x20, #0x2
    7454:	b.ls	753c <ZSTD_decodeSeqHeaders+0x830>  // b.plast
    7458:	mov	x5, x26
    745c:	cmp	x23, #0x7
    7460:	b.hi	7544 <ZSTD_decodeSeqHeaders+0x838>  // b.pmore
    7464:	adrp	x0, 0 <FSE_versionNumber>
    7468:	mov	x2, #0x4                   	// #4
    746c:	ldr	x0, [x0]
    7470:	add	x1, x0, #0x938
    7474:	add	x0, x0, #0x958
    7478:	ldr	w7, [x1, x23, lsl #2]
    747c:	ldrb	w1, [x5]
    7480:	strb	w1, [x22]
    7484:	str	w7, [sp, #168]
    7488:	ldrb	w1, [x5, #1]
    748c:	strb	w1, [x22, #1]
    7490:	ldrb	w1, [x5, #2]
    7494:	strb	w1, [x22, #2]
    7498:	ldrb	w1, [x5, #3]
    749c:	strb	w1, [x22, #3]
    74a0:	ldr	w1, [x0, x23, lsl #2]
    74a4:	add	x0, x22, x2
    74a8:	add	x1, x5, x1
    74ac:	str	x1, [sp, #152]
    74b0:	bl	51d0 <ZSTD_free+0x244>
    74b4:	ldr	x1, [sp, #152]
    74b8:	ldr	w7, [sp, #168]
    74bc:	sub	x5, x1, w7, sxtw
    74c0:	ldr	x3, [sp, #160]
    74c4:	add	x2, x19, x28
    74c8:	add	x0, x22, #0x8
    74cc:	add	x1, x5, #0x8
    74d0:	cmp	x2, x3
    74d4:	b.ls	7560 <ZSTD_decodeSeqHeaders+0x854>  // b.plast
    74d8:	cmp	x27, x0
    74dc:	b.ls	74fc <ZSTD_decodeSeqHeaders+0x7f0>  // b.plast
    74e0:	sub	x20, x27, x0
    74e4:	str	x1, [sp, #152]
    74e8:	mov	x2, x20
    74ec:	bl	58f8 <ZSTD_free+0x96c>
    74f0:	ldr	x1, [sp, #152]
    74f4:	mov	x0, x27
    74f8:	add	x1, x1, x20
    74fc:	mov	x2, #0x0                   	// #0
    7500:	ldr	x4, [sp, #144]
    7504:	add	x3, x0, x2
    7508:	cmp	x4, x3
    750c:	b.ls	738c <ZSTD_decodeSeqHeaders+0x680>  // b.plast
    7510:	ldrb	w3, [x1, x2]
    7514:	strb	w3, [x0, x2]
    7518:	add	x2, x2, #0x1
    751c:	b	7500 <ZSTD_decodeSeqHeaders+0x7f4>
    7520:	ldrb	w2, [x26, x1]
    7524:	add	w0, w0, #0x1
    7528:	strb	w2, [x22, x1]
    752c:	mov	w1, w0
    7530:	cmp	x20, w0, uxtw
    7534:	b.hi	7520 <ZSTD_decodeSeqHeaders+0x814>  // b.pmore
    7538:	b	738c <ZSTD_decodeSeqHeaders+0x680>
    753c:	mov	w0, #0x0                   	// #0
    7540:	b	752c <ZSTD_decodeSeqHeaders+0x820>
    7544:	mov	x1, x5
    7548:	mov	x0, x22
    754c:	mov	x2, #0x8                   	// #8
    7550:	str	x5, [sp, #152]
    7554:	bl	51d0 <ZSTD_free+0x244>
    7558:	ldr	x5, [sp, #152]
    755c:	b	74c0 <ZSTD_decodeSeqHeaders+0x7b4>
    7560:	sub	x2, x20, #0x8
    7564:	bl	58f8 <ZSTD_free+0x96c>
    7568:	b	738c <ZSTD_decodeSeqHeaders+0x680>
    756c:	cbnz	w0, 7344 <ZSTD_decodeSeqHeaders+0x638>
    7570:	b	713c <ZSTD_decodeSeqHeaders+0x430>
    7574:	mov	x19, x24
    7578:	b	7154 <ZSTD_decodeSeqHeaders+0x448>
    757c:	nop
	...

0000000000007588 <ZSTD_decompressBlock>:
    7588:	stp	x29, x30, [sp, #-32]!
    758c:	mov	x6, x2
    7590:	mov	x7, x3
    7594:	mov	x29, sp
    7598:	stp	x19, x20, [sp, #16]
    759c:	mov	x20, x0
    75a0:	mov	x19, x1
    75a4:	bl	51a4 <ZSTD_free+0x218>
    75a8:	mov	x0, #0x1ffff               	// #131071
    75ac:	cmp	x4, x0
    75b0:	b.hi	75dc <ZSTD_decompressBlock+0x54>  // b.pmore
    75b4:	mov	x3, x7
    75b8:	mov	x2, x6
    75bc:	mov	x0, x20
    75c0:	mov	w5, #0x0                   	// #0
    75c4:	bl	6f50 <ZSTD_decodeSeqHeaders+0x244>
    75c8:	add	x19, x19, x0
    75cc:	str	x19, [x20, #28744]
    75d0:	ldp	x19, x20, [sp, #16]
    75d4:	ldp	x29, x30, [sp], #32
    75d8:	ret
    75dc:	mov	x0, #0xffffffffffffffb8    	// #-72
    75e0:	b	75c8 <ZSTD_decompressBlock+0x40>

00000000000075e4 <ZSTD_insertBlock>:
    75e4:	mov	x6, x0
    75e8:	mov	x5, x2
    75ec:	stp	x29, x30, [sp, #-16]!
    75f0:	mov	x29, sp
    75f4:	bl	51a4 <ZSTD_free+0x218>
    75f8:	add	x4, x1, x5
    75fc:	ldp	x29, x30, [sp], #16
    7600:	mov	x0, x5
    7604:	str	x4, [x6, #28744]
    7608:	ret

000000000000760c <ZSTD_findFrameCompressedSize>:
    760c:	stp	x29, x30, [sp, #-96]!
    7610:	cmp	x1, #0x7
    7614:	mov	x29, sp
    7618:	stp	x19, x20, [sp, #16]
    761c:	mov	x20, x0
    7620:	mov	x19, x1
    7624:	b.ls	7654 <ZSTD_findFrameCompressedSize+0x48>  // b.plast
    7628:	ldr	w0, [x0]
    762c:	mov	w1, #0x2a50                	// #10832
    7630:	movk	w1, #0x184d, lsl #16
    7634:	and	w0, w0, #0xfffffff0
    7638:	cmp	w0, w1
    763c:	b.ne	7654 <ZSTD_findFrameCompressedSize+0x48>  // b.any
    7640:	ldr	w0, [x20, #4]
    7644:	add	x0, x0, #0x8
    7648:	ldp	x19, x20, [sp, #16]
    764c:	ldp	x29, x30, [sp], #96
    7650:	ret
    7654:	mov	x2, x19
    7658:	mov	x1, x20
    765c:	add	x0, sp, #0x38
    7660:	bl	6964 <ZSTD_getFrameHeader>
    7664:	cmn	x0, #0x78
    7668:	b.hi	7648 <ZSTD_findFrameCompressedSize+0x3c>  // b.pmore
    766c:	cbz	x0, 7678 <ZSTD_findFrameCompressedSize+0x6c>
    7670:	mov	x0, #0xffffffffffffffb8    	// #-72
    7674:	b	7648 <ZSTD_findFrameCompressedSize+0x3c>
    7678:	ldr	w4, [sp, #80]
    767c:	mov	x6, #0xfffffffffffffffd    	// #-3
    7680:	add	x5, x20, x4
    7684:	sub	x4, x19, x4
    7688:	add	x2, sp, #0x28
    768c:	mov	x1, x4
    7690:	mov	x0, x5
    7694:	bl	69c8 <ZSTD_getcBlockSize>
    7698:	cmn	x0, #0x78
    769c:	b.hi	7648 <ZSTD_findFrameCompressedSize+0x3c>  // b.pmore
    76a0:	add	x1, x0, #0x3
    76a4:	cmp	x1, x4
    76a8:	b.hi	7670 <ZSTD_findFrameCompressedSize+0x64>  // b.pmore
    76ac:	sub	x3, x6, x0
    76b0:	ldr	w0, [sp, #44]
    76b4:	add	x5, x5, x1
    76b8:	add	x4, x4, x3
    76bc:	cbz	w0, 7688 <ZSTD_findFrameCompressedSize+0x7c>
    76c0:	ldr	w0, [sp, #88]
    76c4:	cbz	w0, 76d4 <ZSTD_findFrameCompressedSize+0xc8>
    76c8:	cmp	x4, #0x3
    76cc:	b.ls	7670 <ZSTD_findFrameCompressedSize+0x64>  // b.plast
    76d0:	add	x5, x5, #0x4
    76d4:	sub	x0, x5, x20
    76d8:	b	7648 <ZSTD_findFrameCompressedSize+0x3c>

00000000000076dc <ZSTD_findDecompressedSize>:
    76dc:	stp	x29, x30, [sp, #-48]!
    76e0:	mov	x29, sp
    76e4:	stp	x19, x20, [sp, #16]
    76e8:	mov	x20, x0
    76ec:	mov	x19, x1
    76f0:	stp	x21, x22, [sp, #32]
    76f4:	mov	w22, #0x2a50                	// #10832
    76f8:	mov	x21, #0x0                   	// #0
    76fc:	movk	w22, #0x184d, lsl #16
    7700:	cmp	x19, #0x4
    7704:	b.hi	7714 <ZSTD_findDecompressedSize+0x38>  // b.pmore
    7708:	cbnz	x19, 7778 <ZSTD_findDecompressedSize+0x9c>
    770c:	mov	x0, x21
    7710:	b	777c <ZSTD_findDecompressedSize+0xa0>
    7714:	ldr	w0, [x20]
    7718:	and	w0, w0, #0xfffffff0
    771c:	cmp	w0, w22
    7720:	b.ne	7748 <ZSTD_findDecompressedSize+0x6c>  // b.any
    7724:	cmp	x19, #0x7
    7728:	b.ls	778c <ZSTD_findDecompressedSize+0xb0>  // b.plast
    772c:	ldr	w0, [x20, #4]
    7730:	add	x0, x0, #0x8
    7734:	cmp	x19, x0
    7738:	b.cc	7778 <ZSTD_findDecompressedSize+0x9c>  // b.lo, b.ul, b.last
    773c:	add	x20, x20, x0
    7740:	sub	x19, x19, x0
    7744:	b	7700 <ZSTD_findDecompressedSize+0x24>
    7748:	mov	x1, x19
    774c:	mov	x0, x20
    7750:	bl	696c <ZSTD_getFrameContentSize>
    7754:	cmn	x0, #0x3
    7758:	b.hi	777c <ZSTD_findDecompressedSize+0xa0>  // b.pmore
    775c:	adds	x21, x21, x0
    7760:	b.cs	7778 <ZSTD_findDecompressedSize+0x9c>  // b.hs, b.nlast
    7764:	mov	x1, x19
    7768:	mov	x0, x20
    776c:	bl	760c <ZSTD_findFrameCompressedSize>
    7770:	cmn	x0, #0x78
    7774:	b.ls	773c <ZSTD_findDecompressedSize+0x60>  // b.plast
    7778:	mov	x0, #0xfffffffffffffffe    	// #-2
    777c:	ldp	x19, x20, [sp, #16]
    7780:	ldp	x21, x22, [sp, #32]
    7784:	ldp	x29, x30, [sp], #48
    7788:	ret
    778c:	mov	x0, #0xffffffffffffffb8    	// #-72
    7790:	b	777c <ZSTD_findDecompressedSize+0xa0>

0000000000007794 <ZSTD_nextSrcSizeToDecompress>:
    7794:	ldr	x0, [x0, #28776]
    7798:	ret

000000000000779c <ZSTD_nextInputType>:
    779c:	add	x0, x0, #0x4, lsl #12
    77a0:	ldr	w0, [x0, #12452]
    77a4:	sub	w0, w0, #0x2
    77a8:	cmp	w0, #0x5
    77ac:	b.hi	77c4 <ZSTD_nextInputType+0x28>  // b.pmore
    77b0:	adrp	x1, 0 <FSE_versionNumber>
    77b4:	ldr	x1, [x1]
    77b8:	add	x1, x1, #0x978
    77bc:	ldrb	w0, [x1, w0, uxtw]
    77c0:	ret
    77c4:	mov	w0, #0x0                   	// #0
    77c8:	b	77c0 <ZSTD_nextInputType+0x24>
    77cc:	nop
	...

00000000000077d8 <ZSTD_decompressContinue>:
    77d8:	stp	x29, x30, [sp, #-80]!
    77dc:	mov	x6, x2
    77e0:	mov	x29, sp
    77e4:	ldr	x2, [x0, #28776]
    77e8:	stp	x19, x20, [sp, #16]
    77ec:	stp	x21, x22, [sp, #32]
    77f0:	cmp	x2, x4
    77f4:	stp	x23, x24, [sp, #48]
    77f8:	b.eq	7818 <ZSTD_decompressContinue+0x40>  // b.none
    77fc:	mov	x19, #0xffffffffffffffb8    	// #-72
    7800:	mov	x0, x19
    7804:	ldp	x19, x20, [sp, #16]
    7808:	ldp	x21, x22, [sp, #32]
    780c:	ldp	x23, x24, [sp, #48]
    7810:	ldp	x29, x30, [sp], #80
    7814:	ret
    7818:	mov	x20, x0
    781c:	mov	x24, x1
    7820:	mov	x23, x3
    7824:	mov	x22, x4
    7828:	cbz	x6, 7830 <ZSTD_decompressContinue+0x58>
    782c:	bl	51a4 <ZSTD_free+0x218>
    7830:	add	x21, x20, #0x4, lsl #12
    7834:	ldr	w0, [x21, #12452]
    7838:	cmp	w0, #0x7
    783c:	b.hi	7b18 <ZSTD_decompressContinue+0x340>  // b.pmore
    7840:	adrp	x1, 0 <FSE_versionNumber>
    7844:	ldr	x1, [x1]
    7848:	ldrh	w0, [x1, w0, uxtw #1]
    784c:	adr	x1, 7858 <ZSTD_decompressContinue+0x80>
    7850:	add	x0, x1, w0, sxth #2
    7854:	br	x0
    7858:	ldr	w2, [x21, #12560]
    785c:	cbnz	w2, 78a8 <ZSTD_decompressContinue+0xd0>
    7860:	ldr	w0, [x23]
    7864:	mov	w1, #0x2a50                	// #10832
    7868:	movk	w1, #0x184d, lsl #16
    786c:	and	w0, w0, #0xfffffff0
    7870:	cmp	w0, w1
    7874:	b.ne	78a8 <ZSTD_decompressContinue+0xd0>  // b.any
    7878:	add	x0, x20, #0x27, lsl #12
    787c:	mov	x2, x22
    7880:	mov	x1, x23
    7884:	add	x0, x0, #0x1e0
    7888:	bl	51d0 <ZSTD_free+0x244>
    788c:	mov	x4, #0x8                   	// #8
    7890:	mov	w0, #0x6                   	// #6
    7894:	sub	x4, x4, x22
    7898:	str	x4, [x20, #28776]
    789c:	str	w0, [x21, #12452]
    78a0:	mov	x19, #0x0                   	// #0
    78a4:	b	7800 <ZSTD_decompressContinue+0x28>
    78a8:	mov	x1, x22
    78ac:	mov	x0, x23
    78b0:	bl	50f4 <ZSTD_free+0x168>
    78b4:	str	x0, [x20, #28936]
    78b8:	mov	x19, x0
    78bc:	cmn	x0, #0x78
    78c0:	b.hi	7800 <ZSTD_decompressContinue+0x28>  // b.pmore
    78c4:	add	x0, x20, #0x27, lsl #12
    78c8:	mov	x2, x22
    78cc:	mov	x1, x23
    78d0:	add	x0, x0, #0x1e0
    78d4:	bl	51d0 <ZSTD_free+0x244>
    78d8:	ldr	x4, [x20, #28936]
    78dc:	mov	w0, #0x1                   	// #1
    78e0:	sub	x4, x4, x22
    78e4:	str	x4, [x20, #28776]
    78e8:	b	789c <ZSTD_decompressContinue+0xc4>
    78ec:	ldr	x0, [x20, #28936]
    78f0:	add	x19, x20, #0x27, lsl #12
    78f4:	add	x19, x19, #0x1e0
    78f8:	mov	x2, x22
    78fc:	sub	x0, x0, x22
    7900:	mov	x1, x23
    7904:	add	x0, x19, x0
    7908:	bl	51d0 <ZSTD_free+0x244>
    790c:	ldr	x2, [x20, #28936]
    7910:	mov	x1, x19
    7914:	mov	x0, x20
    7918:	bl	68dc <ZSTD_getFrameHeader_advanced+0x210>
    791c:	mov	x19, x0
    7920:	cmn	x0, #0x78
    7924:	b.hi	7800 <ZSTD_decompressContinue+0x28>  // b.pmore
    7928:	mov	x0, #0x3                   	// #3
    792c:	str	x0, [x20, #28776]
    7930:	mov	w0, #0x2                   	// #2
    7934:	b	789c <ZSTD_decompressContinue+0xc4>
    7938:	add	x2, sp, #0x40
    793c:	mov	x0, x23
    7940:	mov	x1, #0x3                   	// #3
    7944:	bl	69c8 <ZSTD_getcBlockSize>
    7948:	mov	x19, x0
    794c:	cmn	x0, #0x78
    7950:	b.hi	7800 <ZSTD_decompressContinue+0x28>  // b.pmore
    7954:	ldr	w0, [sp, #64]
    7958:	str	x19, [x20, #28776]
    795c:	str	w0, [x21, #12448]
    7960:	ldr	w0, [sp, #72]
    7964:	str	x0, [x20, #28992]
    7968:	ldr	w0, [sp, #68]
    796c:	cbz	x19, 7980 <ZSTD_decompressContinue+0x1a8>
    7970:	cmp	w0, #0x0
    7974:	cset	w0, ne  // ne = any
    7978:	add	w0, w0, #0x3
    797c:	b	789c <ZSTD_decompressContinue+0xc4>
    7980:	cbz	w0, 799c <ZSTD_decompressContinue+0x1c4>
    7984:	ldr	w0, [x21, #12432]
    7988:	cbz	w0, 7aa0 <ZSTD_decompressContinue+0x2c8>
    798c:	mov	x0, #0x4                   	// #4
    7990:	str	x0, [x20, #28776]
    7994:	mov	w0, #0x5                   	// #5
    7998:	b	79a8 <ZSTD_decompressContinue+0x1d0>
    799c:	mov	x0, #0x3                   	// #3
    79a0:	str	x0, [x20, #28776]
    79a4:	mov	w0, #0x2                   	// #2
    79a8:	str	w0, [x21, #12452]
    79ac:	b	7800 <ZSTD_decompressContinue+0x28>
    79b0:	ldr	w0, [x21, #12448]
    79b4:	cmp	w0, #0x1
    79b8:	b.eq	7a78 <ZSTD_decompressContinue+0x2a0>  // b.none
    79bc:	cmp	w0, #0x2
    79c0:	b.eq	79d0 <ZSTD_decompressContinue+0x1f8>  // b.none
    79c4:	cbz	w0, 7a54 <ZSTD_decompressContinue+0x27c>
    79c8:	mov	x19, #0xffffffffffffffec    	// #-20
    79cc:	b	7800 <ZSTD_decompressContinue+0x28>
    79d0:	mov	x0, #0x1ffff               	// #131071
    79d4:	cmp	x22, x0
    79d8:	b.hi	77fc <ZSTD_decompressContinue+0x24>  // b.pmore
    79dc:	mov	x4, x22
    79e0:	mov	x3, x23
    79e4:	mov	x2, x6
    79e8:	mov	x1, x24
    79ec:	mov	x0, x20
    79f0:	mov	w5, #0x1                   	// #1
    79f4:	bl	6f50 <ZSTD_decodeSeqHeaders+0x244>
    79f8:	mov	x19, x0
    79fc:	cmn	x19, #0x78
    7a00:	b.hi	7800 <ZSTD_decompressContinue+0x28>  // b.pmore
    7a04:	ldr	x0, [x20, #28824]
    7a08:	add	x0, x0, x19
    7a0c:	str	x0, [x20, #28824]
    7a10:	ldr	w0, [x21, #12432]
    7a14:	cbz	w0, 7a2c <ZSTD_decompressContinue+0x254>
    7a18:	mov	x3, #0x70b0                	// #28848
    7a1c:	mov	x2, x19
    7a20:	mov	x1, x24
    7a24:	add	x0, x20, x3
    7a28:	bl	4a28 <XXH64_update>
    7a2c:	ldr	w0, [x21, #12452]
    7a30:	cmp	w0, #0x4
    7a34:	b.ne	7aac <ZSTD_decompressContinue+0x2d4>  // b.any
    7a38:	ldr	x0, [x20, #28784]
    7a3c:	cmn	x0, #0x1
    7a40:	b.eq	7984 <ZSTD_decompressContinue+0x1ac>  // b.none
    7a44:	ldr	x1, [x20, #28824]
    7a48:	cmp	x0, x1
    7a4c:	b.eq	7984 <ZSTD_decompressContinue+0x1ac>  // b.none
    7a50:	b	79c8 <ZSTD_decompressContinue+0x1f0>
    7a54:	cbz	x24, 7b20 <ZSTD_decompressContinue+0x348>
    7a58:	cmp	x22, x6
    7a5c:	b.hi	7b20 <ZSTD_decompressContinue+0x348>  // b.pmore
    7a60:	mov	x2, x22
    7a64:	mov	x1, x23
    7a68:	mov	x0, x24
    7a6c:	mov	x19, x22
    7a70:	bl	51d0 <ZSTD_free+0x244>
    7a74:	b	79fc <ZSTD_decompressContinue+0x224>
    7a78:	cmp	x22, #0x1
    7a7c:	b.ne	77fc <ZSTD_decompressContinue+0x24>  // b.any
    7a80:	ldr	x19, [x20, #28992]
    7a84:	cmp	x6, x19
    7a88:	b.cc	7b20 <ZSTD_decompressContinue+0x348>  // b.lo, b.ul, b.last
    7a8c:	ldrb	w1, [x23]
    7a90:	mov	x2, x19
    7a94:	mov	x0, x24
    7a98:	bl	0 <grub_memset>
    7a9c:	b	79fc <ZSTD_decompressContinue+0x224>
    7aa0:	str	xzr, [x20, #28776]
    7aa4:	str	wzr, [x21, #12452]
    7aa8:	b	7800 <ZSTD_decompressContinue+0x28>
    7aac:	mov	w0, #0x2                   	// #2
    7ab0:	str	w0, [x21, #12452]
    7ab4:	add	x24, x24, x19
    7ab8:	mov	x0, #0x3                   	// #3
    7abc:	str	x24, [x20, #28744]
    7ac0:	str	x0, [x20, #28776]
    7ac4:	b	7800 <ZSTD_decompressContinue+0x28>
    7ac8:	mov	x0, #0x70b0                	// #28848
    7acc:	add	x0, x20, x0
    7ad0:	bl	4c48 <XXH64_digest>
    7ad4:	ldr	w1, [x23]
    7ad8:	cmp	w1, w0
    7adc:	b.ne	7b28 <ZSTD_decompressContinue+0x350>  // b.any
    7ae0:	str	xzr, [x20, #28776]
    7ae4:	str	wzr, [x21, #12452]
    7ae8:	b	78a0 <ZSTD_decompressContinue+0xc8>
    7aec:	sub	x0, x20, x22
    7af0:	mov	x2, x22
    7af4:	add	x0, x0, #0x27, lsl #12
    7af8:	mov	x1, x23
    7afc:	add	x0, x0, #0x1e8
    7b00:	bl	51d0 <ZSTD_free+0x244>
    7b04:	add	x0, x20, #0x24, lsl #12
    7b08:	ldr	w0, [x0, #12772]
    7b0c:	str	x0, [x20, #28776]
    7b10:	mov	w0, #0x7                   	// #7
    7b14:	b	789c <ZSTD_decompressContinue+0xc4>
    7b18:	mov	x19, #0xffffffffffffffff    	// #-1
    7b1c:	b	7800 <ZSTD_decompressContinue+0x28>
    7b20:	mov	x19, #0xffffffffffffffba    	// #-70
    7b24:	b	7800 <ZSTD_decompressContinue+0x28>
    7b28:	mov	x19, #0xffffffffffffffea    	// #-22
    7b2c:	b	7800 <ZSTD_decompressContinue+0x28>
	...

0000000000007b38 <ZSTD_decompressBegin>:
    7b38:	stp	x29, x30, [sp, #-32]!
    7b3c:	mov	x5, #0x683c                	// #26684
    7b40:	mov	x2, #0xc                   	// #12
    7b44:	mov	x29, sp
    7b48:	str	x19, [sp, #16]
    7b4c:	mov	x19, x0
    7b50:	add	x0, x0, #0x4, lsl #12
    7b54:	ldr	w1, [x0, #12560]
    7b58:	str	xzr, [x19, #28744]
    7b5c:	cmp	w1, #0x1
    7b60:	mov	x1, #0x5                   	// #5
    7b64:	csinc	x1, x1, xzr, ne  // ne = any
    7b68:	str	x1, [x19, #28776]
    7b6c:	mov	w1, #0xc                   	// #12
    7b70:	str	xzr, [x19, #28752]
    7b74:	movk	w1, #0xc00, lsl #16
    7b78:	str	w1, [x19, #10296]
    7b7c:	str	xzr, [x19, #28760]
    7b80:	str	xzr, [x19, #28768]
    7b84:	str	xzr, [x19, #28824]
    7b88:	str	wzr, [x0, #12452]
    7b8c:	str	xzr, [x19, #28840]
    7b90:	str	wzr, [x0, #12648]
    7b94:	adrp	x0, 0 <FSE_versionNumber>
    7b98:	ldr	x1, [x0]
    7b9c:	add	x0, x19, x5
    7ba0:	add	x1, x1, #0x980
    7ba4:	bl	51d0 <ZSTD_free+0x244>
    7ba8:	add	x0, x19, #0x20
    7bac:	mov	x6, #0x1830                	// #6192
    7bb0:	str	x0, [x19]
    7bb4:	add	x0, x19, x6
    7bb8:	mov	x7, #0x1028                	// #4136
    7bbc:	str	x0, [x19, #8]
    7bc0:	add	x0, x19, x7
    7bc4:	mov	x8, #0x2838                	// #10296
    7bc8:	str	x0, [x19, #16]
    7bcc:	add	x0, x19, x8
    7bd0:	str	x0, [x19, #24]
    7bd4:	mov	x0, #0x0                   	// #0
    7bd8:	ldr	x19, [sp, #16]
    7bdc:	ldp	x29, x30, [sp], #32
    7be0:	ret
    7be4:	nop
	...

0000000000007bf0 <ZSTD_decompressBegin_usingDict>:
    7bf0:	stp	x29, x30, [sp, #-48]!
    7bf4:	mov	x29, sp
    7bf8:	stp	x19, x20, [sp, #16]
    7bfc:	mov	x19, x0
    7c00:	mov	x20, x1
    7c04:	str	x21, [sp, #32]
    7c08:	mov	x21, x2
    7c0c:	bl	7b38 <ZSTD_decompressBegin>
    7c10:	cmn	x0, #0x78
    7c14:	b.hi	7c54 <ZSTD_decompressBegin_usingDict+0x64>  // b.pmore
    7c18:	cmp	x20, #0x0
    7c1c:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    7c20:	b.eq	7c50 <ZSTD_decompressBegin_usingDict+0x60>  // b.none
    7c24:	cmp	x21, #0x7
    7c28:	b.hi	7c64 <ZSTD_decompressBegin_usingDict+0x74>  // b.pmore
    7c2c:	ldr	x0, [x19, #28744]
    7c30:	str	x0, [x19, #28768]
    7c34:	ldr	x1, [x19, #28752]
    7c38:	str	x20, [x19, #28752]
    7c3c:	sub	x0, x0, x1
    7c40:	sub	x0, x20, x0
    7c44:	str	x0, [x19, #28760]
    7c48:	add	x20, x20, x21
    7c4c:	str	x20, [x19, #28744]
    7c50:	mov	x0, #0x0                   	// #0
    7c54:	ldp	x19, x20, [sp, #16]
    7c58:	ldr	x21, [sp, #32]
    7c5c:	ldp	x29, x30, [sp], #48
    7c60:	ret
    7c64:	ldr	w1, [x20]
    7c68:	mov	w0, #0xa437                	// #42039
    7c6c:	movk	w0, #0xec30, lsl #16
    7c70:	cmp	w1, w0
    7c74:	b.ne	7c2c <ZSTD_decompressBegin_usingDict+0x3c>  // b.any
    7c78:	add	x0, x19, #0x4, lsl #12
    7c7c:	ldr	w1, [x20, #4]
    7c80:	mov	x2, x21
    7c84:	str	w1, [x0, #12648]
    7c88:	mov	x1, x20
    7c8c:	add	x0, x19, #0x20
    7c90:	bl	54bc <ZSTD_free+0x530>
    7c94:	cmn	x0, #0x78
    7c98:	b.hi	7cc8 <ZSTD_decompressBegin_usingDict+0xd8>  // b.pmore
    7c9c:	mov	x1, #0x100000001           	// #4294967297
    7ca0:	str	x1, [x19, #28840]
    7ca4:	ldr	x1, [x19, #28744]
    7ca8:	add	x0, x20, x0
    7cac:	ldr	x2, [x19, #28752]
    7cb0:	str	x1, [x19, #28768]
    7cb4:	str	x0, [x19, #28752]
    7cb8:	sub	x1, x1, x2
    7cbc:	sub	x1, x0, x1
    7cc0:	str	x1, [x19, #28760]
    7cc4:	b	7c48 <ZSTD_decompressBegin_usingDict+0x58>
    7cc8:	mov	x0, #0xffffffffffffffe2    	// #-30
    7ccc:	b	7c54 <ZSTD_decompressBegin_usingDict+0x64>

0000000000007cd0 <ZSTD_decompressBegin_usingDDict>:
    7cd0:	stp	x29, x30, [sp, #-32]!
    7cd4:	mov	x29, sp
    7cd8:	stp	x19, x20, [sp, #16]
    7cdc:	mov	x19, x0
    7ce0:	mov	x20, x1
    7ce4:	cbz	x1, 7d04 <ZSTD_decompressBegin_usingDDict+0x34>
    7ce8:	add	x1, x0, #0x4, lsl #12
    7cec:	ldp	x0, x2, [x20, #8]
    7cf0:	add	x0, x0, x2
    7cf4:	ldr	x2, [x19, #28768]
    7cf8:	cmp	x2, x0
    7cfc:	cset	w0, ne  // ne = any
    7d00:	str	w0, [x1, #12652]
    7d04:	mov	x0, x19
    7d08:	bl	7b38 <ZSTD_decompressBegin>
    7d0c:	cmn	x0, #0x78
    7d10:	b.hi	7d98 <ZSTD_decompressBegin_usingDDict+0xc8>  // b.pmore
    7d14:	cbz	x20, 7d94 <ZSTD_decompressBegin_usingDDict+0xc4>
    7d18:	add	x1, x20, #0x4, lsl #12
    7d1c:	add	x2, x19, #0x4, lsl #12
    7d20:	ldr	x3, [x20, #16]
    7d24:	ldr	w0, [x1, #10304]
    7d28:	str	w0, [x2, #12648]
    7d2c:	ldr	x0, [x20, #8]
    7d30:	str	x0, [x19, #28752]
    7d34:	str	x0, [x19, #28760]
    7d38:	add	x0, x0, x3
    7d3c:	str	x0, [x19, #28744]
    7d40:	str	x0, [x19, #28768]
    7d44:	ldr	w0, [x1, #10308]
    7d48:	cbz	w0, 7da4 <ZSTD_decompressBegin_usingDDict+0xd4>
    7d4c:	mov	x0, #0x100000001           	// #4294967297
    7d50:	str	x0, [x19, #28840]
    7d54:	add	x0, x20, #0x18
    7d58:	str	x0, [x19]
    7d5c:	mov	x0, #0x1828                	// #6184
    7d60:	add	x0, x20, x0
    7d64:	mov	x3, #0x1020                	// #4128
    7d68:	str	x0, [x19, #8]
    7d6c:	add	x0, x20, x3
    7d70:	mov	x4, #0x2830                	// #10288
    7d74:	add	x20, x20, x4
    7d78:	stp	x0, x20, [x19, #16]
    7d7c:	ldr	w0, [x1, #10292]
    7d80:	str	w0, [x2, #10300]
    7d84:	ldr	w0, [x1, #10296]
    7d88:	str	w0, [x2, #10304]
    7d8c:	ldr	w0, [x1, #10300]
    7d90:	str	w0, [x2, #10308]
    7d94:	mov	x0, #0x0                   	// #0
    7d98:	ldp	x19, x20, [sp, #16]
    7d9c:	ldp	x29, x30, [sp], #32
    7da0:	ret
    7da4:	str	xzr, [x19, #28840]
    7da8:	b	7d94 <ZSTD_decompressBegin_usingDDict+0xc4>
    7dac:	stp	x29, x30, [sp, #-192]!
    7db0:	mov	x29, sp
    7db4:	stp	x19, x20, [sp, #16]
    7db8:	mov	x20, x0
    7dbc:	mov	x19, x4
    7dc0:	stp	x21, x22, [sp, #32]
    7dc4:	mov	x21, x3
    7dc8:	stp	x23, x24, [sp, #48]
    7dcc:	mov	x23, x7
    7dd0:	stp	x25, x26, [sp, #64]
    7dd4:	stp	x27, x28, [sp, #80]
    7dd8:	str	x2, [sp, #112]
    7ddc:	stp	x1, x5, [sp, #136]
    7de0:	str	x6, [sp, #152]
    7de4:	cbz	x7, 7df8 <ZSTD_decompressBegin_usingDDict+0x128>
    7de8:	ldr	x0, [x7, #8]
    7dec:	str	x0, [sp, #144]
    7df0:	ldr	x0, [x7, #16]
    7df4:	str	x0, [sp, #152]
    7df8:	add	x28, x20, #0x4, lsl #12
    7dfc:	str	wzr, [sp, #124]
    7e00:	ldr	x22, [sp, #136]
    7e04:	b	7e64 <ZSTD_decompressBegin_usingDDict+0x194>
    7e08:	ldr	w0, [x21]
    7e0c:	mov	w1, #0x2a50                	// #10832
    7e10:	movk	w1, #0x184d, lsl #16
    7e14:	and	w0, w0, #0xfffffff0
    7e18:	cmp	w0, w1
    7e1c:	b.ne	7e7c <ZSTD_decompressBegin_usingDDict+0x1ac>  // b.any
    7e20:	cmp	x19, #0x7
    7e24:	b.hi	7e4c <ZSTD_decompressBegin_usingDDict+0x17c>  // b.pmore
    7e28:	mov	x25, #0xffffffffffffffb8    	// #-72
    7e2c:	mov	x0, x25
    7e30:	ldp	x19, x20, [sp, #16]
    7e34:	ldp	x21, x22, [sp, #32]
    7e38:	ldp	x23, x24, [sp, #48]
    7e3c:	ldp	x25, x26, [sp, #64]
    7e40:	ldp	x27, x28, [sp, #80]
    7e44:	ldp	x29, x30, [sp], #192
    7e48:	ret
    7e4c:	ldr	w0, [x21, #4]
    7e50:	add	x0, x0, #0x8
    7e54:	cmp	x0, x19
    7e58:	b.hi	7e28 <ZSTD_decompressBegin_usingDDict+0x158>  // b.pmore
    7e5c:	add	x21, x21, x0
    7e60:	sub	x19, x19, x0
    7e64:	cmp	x19, #0x4
    7e68:	b.hi	7e08 <ZSTD_decompressBegin_usingDDict+0x138>  // b.pmore
    7e6c:	cbnz	x19, 7e28 <ZSTD_decompressBegin_usingDDict+0x158>
    7e70:	ldr	x0, [sp, #136]
    7e74:	sub	x25, x22, x0
    7e78:	b	7e2c <ZSTD_decompressBegin_usingDDict+0x15c>
    7e7c:	cbz	x23, 7eb4 <ZSTD_decompressBegin_usingDDict+0x1e4>
    7e80:	mov	x1, x23
    7e84:	mov	x0, x20
    7e88:	bl	7cd0 <ZSTD_decompressBegin_usingDDict>
    7e8c:	mov	x25, x0
    7e90:	cmn	x0, #0x78
    7e94:	b.hi	7e2c <ZSTD_decompressBegin_usingDDict+0x15c>  // b.pmore
    7e98:	mov	x1, x22
    7e9c:	mov	x0, x20
    7ea0:	bl	51a4 <ZSTD_free+0x218>
    7ea4:	cmp	x19, #0x8
    7ea8:	b.hi	7ec4 <ZSTD_decompressBegin_usingDDict+0x1f4>  // b.pmore
    7eac:	mov	x25, #0xffffffffffffffb8    	// #-72
    7eb0:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    7eb4:	ldp	x1, x2, [sp, #144]
    7eb8:	mov	x0, x20
    7ebc:	bl	7bf0 <ZSTD_decompressBegin_usingDict>
    7ec0:	b	7e8c <ZSTD_decompressBegin_usingDDict+0x1bc>
    7ec4:	mov	x0, x21
    7ec8:	mov	x1, #0x5                   	// #5
    7ecc:	bl	66c4 <ZSTD_frameHeaderSize>
    7ed0:	mov	x25, x0
    7ed4:	cmn	x0, #0x78
    7ed8:	b.hi	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>  // b.pmore
    7edc:	add	x0, x0, #0x3
    7ee0:	cmp	x0, x19
    7ee4:	b.hi	7eac <ZSTD_decompressBegin_usingDDict+0x1dc>  // b.pmore
    7ee8:	mov	x2, x25
    7eec:	mov	x1, x21
    7ef0:	mov	x0, x20
    7ef4:	bl	68dc <ZSTD_getFrameHeader_advanced+0x210>
    7ef8:	cmn	x0, #0x78
    7efc:	b.hi	80ec <ZSTD_decompressBegin_usingDDict+0x41c>  // b.pmore
    7f00:	ldr	x0, [sp, #112]
    7f04:	add	x3, x21, x25
    7f08:	sub	x1, x19, x25
    7f0c:	mov	x24, x22
    7f10:	add	x0, x22, x0
    7f14:	mov	x2, #0x70b0                	// #28848
    7f18:	str	x0, [sp, #104]
    7f1c:	add	x0, x20, x2
    7f20:	str	x0, [sp, #160]
    7f24:	add	x2, sp, #0xb0
    7f28:	mov	x0, x3
    7f2c:	str	x3, [sp, #128]
    7f30:	str	x1, [sp, #168]
    7f34:	bl	69c8 <ZSTD_getcBlockSize>
    7f38:	mov	x27, x0
    7f3c:	cmn	x0, #0x78
    7f40:	b.hi	80dc <ZSTD_decompressBegin_usingDDict+0x40c>  // b.pmore
    7f44:	ldr	x1, [sp, #168]
    7f48:	ldr	x3, [sp, #128]
    7f4c:	sub	x0, x1, #0x3
    7f50:	str	x0, [sp, #128]
    7f54:	cmp	x27, x0
    7f58:	add	x26, x3, #0x3
    7f5c:	b.hi	7eac <ZSTD_decompressBegin_usingDDict+0x1dc>  // b.pmore
    7f60:	ldr	w0, [sp, #176]
    7f64:	cmp	w0, #0x1
    7f68:	b.eq	80b4 <ZSTD_decompressBegin_usingDDict+0x3e4>  // b.none
    7f6c:	cmp	w0, #0x2
    7f70:	b.eq	7f80 <ZSTD_decompressBegin_usingDDict+0x2b0>  // b.none
    7f74:	cbz	w0, 7ff4 <ZSTD_decompressBegin_usingDDict+0x324>
    7f78:	mov	x25, #0xffffffffffffffec    	// #-20
    7f7c:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    7f80:	mov	x0, #0x1ffff               	// #131071
    7f84:	cmp	x27, x0
    7f88:	b.hi	7eac <ZSTD_decompressBegin_usingDDict+0x1dc>  // b.pmore
    7f8c:	ldr	x0, [sp, #104]
    7f90:	mov	x4, x27
    7f94:	mov	x3, x26
    7f98:	mov	x1, x24
    7f9c:	sub	x2, x0, x24
    7fa0:	mov	w5, #0x1                   	// #1
    7fa4:	mov	x0, x20
    7fa8:	bl	6f50 <ZSTD_decodeSeqHeaders+0x244>
    7fac:	mov	x25, x0
    7fb0:	cmn	x0, #0x78
    7fb4:	b.ls	801c <ZSTD_decompressBegin_usingDDict+0x34c>  // b.plast
    7fb8:	mov	x0, x25
    7fbc:	bl	4f04 <ZSTD_getErrorCode>
    7fc0:	cmp	w0, #0xa
    7fc4:	b.ne	7fd0 <ZSTD_decompressBegin_usingDDict+0x300>  // b.any
    7fc8:	ldr	w0, [sp, #124]
    7fcc:	cbnz	w0, 7e28 <ZSTD_decompressBegin_usingDDict+0x158>
    7fd0:	cmn	x25, #0x78
    7fd4:	b.hi	7e2c <ZSTD_decompressBegin_usingDDict+0x15c>  // b.pmore
    7fd8:	ldr	x0, [sp, #112]
    7fdc:	add	x22, x22, x25
    7fe0:	sub	x0, x0, x25
    7fe4:	str	x0, [sp, #112]
    7fe8:	mov	w0, #0x1                   	// #1
    7fec:	str	w0, [sp, #124]
    7ff0:	b	7e64 <ZSTD_decompressBegin_usingDDict+0x194>
    7ff4:	ldr	x0, [sp, #104]
    7ff8:	sub	x0, x0, x24
    7ffc:	cbz	x24, 80e4 <ZSTD_decompressBegin_usingDDict+0x414>
    8000:	cmp	x27, x0
    8004:	b.hi	80e4 <ZSTD_decompressBegin_usingDDict+0x414>  // b.pmore
    8008:	mov	x25, x27
    800c:	mov	x2, x27
    8010:	mov	x1, x26
    8014:	mov	x0, x24
    8018:	bl	51d0 <ZSTD_free+0x244>
    801c:	ldr	w0, [x28, #12432]
    8020:	cbz	w0, 8034 <ZSTD_decompressBegin_usingDDict+0x364>
    8024:	ldr	x0, [sp, #160]
    8028:	mov	x2, x25
    802c:	mov	x1, x24
    8030:	bl	4a28 <XXH64_update>
    8034:	ldr	x0, [sp, #128]
    8038:	add	x24, x24, x25
    803c:	add	x3, x26, x27
    8040:	sub	x1, x0, x27
    8044:	ldr	w0, [sp, #180]
    8048:	cbz	w0, 7f24 <ZSTD_decompressBegin_usingDDict+0x254>
    804c:	ldr	x0, [x20, #28784]
    8050:	cmn	x0, #0x1
    8054:	b.eq	8064 <ZSTD_decompressBegin_usingDDict+0x394>  // b.none
    8058:	sub	x2, x24, x22
    805c:	cmp	x0, x2
    8060:	b.ne	7f78 <ZSTD_decompressBegin_usingDDict+0x2a8>  // b.any
    8064:	ldr	w0, [x28, #12432]
    8068:	cbz	w0, 80a4 <ZSTD_decompressBegin_usingDDict+0x3d4>
    806c:	mov	x0, #0x70b0                	// #28848
    8070:	add	x0, x20, x0
    8074:	str	x3, [sp, #104]
    8078:	str	x1, [sp, #128]
    807c:	bl	4c48 <XXH64_digest>
    8080:	ldr	x1, [sp, #128]
    8084:	cmp	x1, #0x3
    8088:	b.ls	80f4 <ZSTD_decompressBegin_usingDDict+0x424>  // b.plast
    808c:	ldr	x3, [sp, #104]
    8090:	ldr	w2, [x3]
    8094:	cmp	w0, w2
    8098:	b.ne	80f4 <ZSTD_decompressBegin_usingDDict+0x424>  // b.any
    809c:	add	x3, x3, #0x4
    80a0:	sub	x1, x1, #0x4
    80a4:	sub	x25, x24, x22
    80a8:	mov	x19, x1
    80ac:	mov	x21, x3
    80b0:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    80b4:	ldr	x0, [sp, #104]
    80b8:	ldr	w25, [sp, #184]
    80bc:	sub	x0, x0, x24
    80c0:	cmp	x0, x25
    80c4:	b.cc	80e4 <ZSTD_decompressBegin_usingDDict+0x414>  // b.lo, b.ul, b.last
    80c8:	ldrb	w1, [x3, #3]
    80cc:	mov	x2, x25
    80d0:	mov	x0, x24
    80d4:	bl	0 <grub_memset>
    80d8:	b	801c <ZSTD_decompressBegin_usingDDict+0x34c>
    80dc:	mov	x25, x0
    80e0:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    80e4:	mov	x25, #0xffffffffffffffba    	// #-70
    80e8:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    80ec:	mov	x25, x0
    80f0:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>
    80f4:	mov	x25, #0xffffffffffffffea    	// #-22
    80f8:	b	7fb8 <ZSTD_decompressBegin_usingDDict+0x2e8>

00000000000080fc <ZSTD_decompress_usingDict>:
    80fc:	mov	x7, #0x0                   	// #0
    8100:	b	7dac <ZSTD_decompressBegin_usingDDict+0xdc>

0000000000008104 <ZSTD_decompressDCtx>:
    8104:	mov	x6, #0x0                   	// #0
    8108:	mov	x5, #0x0                   	// #0
    810c:	b	80fc <ZSTD_decompress_usingDict>

0000000000008110 <ZSTD_initStaticDDict>:
    8110:	stp	x29, x30, [sp, #-48]!
    8114:	cmp	w4, #0x1
    8118:	mov	x29, sp
    811c:	stp	x19, x20, [sp, #16]
    8120:	mov	x19, x0
    8124:	mov	x0, #0x6860                	// #26720
    8128:	stp	x21, x22, [sp, #32]
    812c:	mov	x21, x3
    8130:	add	x3, x3, x0
    8134:	csel	x3, x3, x0, ne  // ne = any
    8138:	tst	x19, #0x7
    813c:	b.ne	8184 <ZSTD_initStaticDDict+0x74>  // b.any
    8140:	cmp	x3, x1
    8144:	b.hi	8184 <ZSTD_initStaticDDict+0x74>  // b.pmore
    8148:	mov	x1, x2
    814c:	mov	w22, w5
    8150:	cbnz	w4, 8168 <ZSTD_initStaticDDict+0x58>
    8154:	add	x20, x19, x0
    8158:	mov	x2, x21
    815c:	mov	x0, x20
    8160:	bl	51d0 <ZSTD_free+0x244>
    8164:	mov	x1, x20
    8168:	mov	w4, w22
    816c:	mov	x2, x21
    8170:	mov	x0, x19
    8174:	mov	w3, #0x1                   	// #1
    8178:	bl	56a0 <ZSTD_free+0x714>
    817c:	cmn	x0, #0x78
    8180:	b.ls	8188 <ZSTD_initStaticDDict+0x78>  // b.plast
    8184:	mov	x19, #0x0                   	// #0
    8188:	mov	x0, x19
    818c:	ldp	x19, x20, [sp, #16]
    8190:	ldp	x21, x22, [sp, #32]
    8194:	ldp	x29, x30, [sp], #48
    8198:	ret

000000000000819c <ZSTD_freeDDict>:
    819c:	cbz	x0, 8208 <ZSTD_freeDDict+0x6c>
    81a0:	stp	x29, x30, [sp, #-96]!
    81a4:	mov	x29, sp
    81a8:	str	x19, [sp, #16]
    81ac:	mov	x19, x0
    81b0:	mov	x0, #0x6800                	// #26624
    81b4:	add	x0, x19, x0
    81b8:	add	x1, sp, #0x20
    81bc:	ldp	x2, x3, [x0, #72]
    81c0:	stp	x2, x3, [sp, #72]
    81c4:	ldr	x0, [x19, #26712]
    81c8:	stp	x2, x3, [sp, #32]
    81cc:	str	x0, [sp, #48]
    81d0:	str	x0, [sp, #88]
    81d4:	ldr	x0, [x19]
    81d8:	bl	4f8c <ZSTD_free>
    81dc:	ldp	x0, x1, [sp, #72]
    81e0:	stp	x0, x1, [sp, #32]
    81e4:	ldr	x0, [sp, #88]
    81e8:	add	x1, sp, #0x20
    81ec:	str	x0, [sp, #48]
    81f0:	mov	x0, x19
    81f4:	bl	4f8c <ZSTD_free>
    81f8:	mov	x0, #0x0                   	// #0
    81fc:	ldr	x19, [sp, #16]
    8200:	ldp	x29, x30, [sp], #96
    8204:	ret
    8208:	mov	x0, #0x0                   	// #0
    820c:	ret

0000000000008210 <ZSTD_freeDCtx>:
    8210:	stp	x29, x30, [sp, #-96]!
    8214:	mov	x29, sp
    8218:	stp	x19, x20, [sp, #16]
    821c:	cbz	x0, 8298 <ZSTD_freeDCtx+0x88>
    8220:	ldr	x20, [x0, #29000]
    8224:	mov	x19, x0
    8228:	cbnz	x20, 82a0 <ZSTD_freeDCtx+0x90>
    822c:	add	x0, x0, #0x7, lsl #12
    8230:	ldp	x2, x3, [x0, #288]
    8234:	stp	x2, x3, [sp, #72]
    8238:	ldr	x0, [x19, #28976]
    823c:	str	x0, [sp, #88]
    8240:	ldr	x0, [x19, #29016]
    8244:	bl	819c <ZSTD_freeDDict>
    8248:	str	xzr, [x19, #29016]
    824c:	ldp	x0, x1, [sp, #72]
    8250:	stp	x0, x1, [sp, #32]
    8254:	ldr	x0, [sp, #88]
    8258:	str	x0, [sp, #48]
    825c:	add	x1, sp, #0x20
    8260:	ldr	x0, [x19, #29048]
    8264:	bl	4f8c <ZSTD_free>
    8268:	str	xzr, [x19, #29048]
    826c:	ldp	x0, x1, [sp, #72]
    8270:	stp	x0, x1, [sp, #32]
    8274:	ldr	x0, [sp, #88]
    8278:	add	x1, sp, #0x20
    827c:	str	x0, [sp, #48]
    8280:	mov	x0, x19
    8284:	bl	4f8c <ZSTD_free>
    8288:	mov	x0, x20
    828c:	ldp	x19, x20, [sp, #16]
    8290:	ldp	x29, x30, [sp], #96
    8294:	ret
    8298:	mov	x20, #0x0                   	// #0
    829c:	b	8288 <ZSTD_freeDCtx+0x78>
    82a0:	mov	x20, #0xffffffffffffffc0    	// #-64
    82a4:	b	8288 <ZSTD_freeDCtx+0x78>

00000000000082a8 <ZSTD_decompress>:
    82a8:	stp	x29, x30, [sp, #-64]!
    82ac:	mov	x29, sp
    82b0:	stp	x19, x20, [sp, #16]
    82b4:	mov	x19, x0
    82b8:	stp	x21, x22, [sp, #32]
    82bc:	mov	x21, x1
    82c0:	mov	x22, x2
    82c4:	str	x23, [sp, #48]
    82c8:	mov	x23, x3
    82cc:	bl	6638 <ZSTD_createDCtx>
    82d0:	cbz	x0, 8310 <ZSTD_decompress+0x68>
    82d4:	mov	x1, x19
    82d8:	mov	x4, x23
    82dc:	mov	x3, x22
    82e0:	mov	x2, x21
    82e4:	mov	x20, x0
    82e8:	bl	8104 <ZSTD_decompressDCtx>
    82ec:	mov	x19, x0
    82f0:	mov	x0, x20
    82f4:	bl	8210 <ZSTD_freeDCtx>
    82f8:	mov	x0, x19
    82fc:	ldp	x19, x20, [sp, #16]
    8300:	ldp	x21, x22, [sp, #32]
    8304:	ldr	x23, [sp, #48]
    8308:	ldp	x29, x30, [sp], #64
    830c:	ret
    8310:	mov	x19, #0xffffffffffffffc0    	// #-64
    8314:	b	82f8 <ZSTD_decompress+0x50>

0000000000008318 <ZSTD_createDDict_advanced>:
    8318:	stp	x29, x30, [sp, #-96]!
    831c:	mov	x29, sp
    8320:	stp	x21, x22, [sp, #32]
    8324:	mov	x21, x0
    8328:	mov	x22, x1
    832c:	ldr	x0, [x4]
    8330:	stp	x19, x20, [sp, #16]
    8334:	cmp	x0, #0x0
    8338:	stp	x23, x24, [sp, #48]
    833c:	cset	w1, eq  // eq = none
    8340:	ldr	x0, [x4, #8]
    8344:	cmp	x0, #0x0
    8348:	cset	w0, eq  // eq = none
    834c:	cmp	w1, w0
    8350:	b.eq	8370 <ZSTD_createDDict_advanced+0x58>  // b.none
    8354:	mov	x19, #0x0                   	// #0
    8358:	mov	x0, x19
    835c:	ldp	x19, x20, [sp, #16]
    8360:	ldp	x21, x22, [sp, #32]
    8364:	ldp	x23, x24, [sp, #48]
    8368:	ldp	x29, x30, [sp], #96
    836c:	ret
    8370:	ldp	x0, x1, [x4]
    8374:	stp	x0, x1, [sp, #64]
    8378:	mov	w23, w2
    837c:	ldr	x0, [x4, #16]
    8380:	mov	w24, w3
    8384:	mov	x20, x4
    8388:	add	x1, sp, #0x40
    838c:	str	x0, [sp, #80]
    8390:	mov	x0, #0x6860                	// #26720
    8394:	bl	4f20 <ZSTD_malloc>
    8398:	mov	x19, x0
    839c:	cbz	x0, 8354 <ZSTD_createDDict_advanced+0x3c>
    83a0:	mov	x1, #0x6800                	// #26624
    83a4:	add	x1, x0, x1
    83a8:	ldp	x2, x3, [x20]
    83ac:	mov	w4, w24
    83b0:	stp	x2, x3, [x1, #72]
    83b4:	mov	x1, x21
    83b8:	mov	w3, w23
    83bc:	ldr	x2, [x20, #16]
    83c0:	str	x2, [x0, #26712]
    83c4:	mov	x2, x22
    83c8:	bl	56a0 <ZSTD_free+0x714>
    83cc:	cmn	x0, #0x78
    83d0:	b.ls	8358 <ZSTD_createDDict_advanced+0x40>  // b.plast
    83d4:	mov	x0, x19
    83d8:	bl	819c <ZSTD_freeDDict>
    83dc:	b	8354 <ZSTD_createDDict_advanced+0x3c>

00000000000083e0 <ZSTD_createDDict>:
    83e0:	stp	x29, x30, [sp, #-80]!
    83e4:	mov	x29, sp
    83e8:	stp	xzr, xzr, [sp, #56]
    83ec:	add	x4, sp, #0x10
    83f0:	ldp	x2, x3, [sp, #56]
    83f4:	stp	x2, x3, [sp, #16]
    83f8:	str	xzr, [sp, #32]
    83fc:	mov	w3, #0x0                   	// #0
    8400:	mov	w2, #0x0                   	// #0
    8404:	bl	8318 <ZSTD_createDDict_advanced>
    8408:	ldp	x29, x30, [sp], #80
    840c:	ret

0000000000008410 <ZSTD_createDDict_byReference>:
    8410:	stp	x29, x30, [sp, #-80]!
    8414:	mov	x29, sp
    8418:	stp	xzr, xzr, [sp, #56]
    841c:	add	x4, sp, #0x10
    8420:	ldp	x2, x3, [sp, #56]
    8424:	stp	x2, x3, [sp, #16]
    8428:	str	xzr, [sp, #32]
    842c:	mov	w3, #0x0                   	// #0
    8430:	mov	w2, #0x1                   	// #1
    8434:	bl	8318 <ZSTD_createDDict_advanced>
    8438:	ldp	x29, x30, [sp], #80
    843c:	ret

0000000000008440 <ZSTD_estimateDDictSize>:
    8440:	mov	x2, #0x6860                	// #26720
    8444:	cmp	w1, #0x1
    8448:	add	x0, x0, x2
    844c:	csel	x0, x0, x2, ne  // ne = any
    8450:	ret

0000000000008454 <ZSTD_sizeof_DDict>:
    8454:	mov	x1, x0
    8458:	cbz	x0, 8474 <ZSTD_sizeof_DDict+0x20>
    845c:	ldr	x2, [x1]
    8460:	mov	x0, #0x6860                	// #26720
    8464:	cbz	x2, 8470 <ZSTD_sizeof_DDict+0x1c>
    8468:	ldr	x1, [x1, #16]
    846c:	add	x0, x1, x0
    8470:	ret
    8474:	mov	x0, #0x0                   	// #0
    8478:	b	8470 <ZSTD_sizeof_DDict+0x1c>

000000000000847c <ZSTD_sizeof_DCtx>:
    847c:	cbz	x0, 84b4 <ZSTD_sizeof_DCtx+0x38>
    8480:	stp	x29, x30, [sp, #-16]!
    8484:	mov	x3, x0
    8488:	mov	x29, sp
    848c:	ldr	x0, [x0, #29016]
    8490:	bl	8454 <ZSTD_sizeof_DDict>
    8494:	add	x0, x0, #0x27, lsl #12
    8498:	ldr	x1, [x3, #29056]
    849c:	add	x0, x0, #0x1f8
    84a0:	ldr	x2, [x3, #29088]
    84a4:	ldp	x29, x30, [sp], #16
    84a8:	add	x1, x1, x2
    84ac:	add	x0, x1, x0
    84b0:	ret
    84b4:	mov	x0, #0x0                   	// #0
    84b8:	ret

00000000000084bc <ZSTD_getDictID_fromDict>:
    84bc:	cmp	x1, #0x7
    84c0:	b.ls	84e0 <ZSTD_getDictID_fromDict+0x24>  // b.plast
    84c4:	ldr	w2, [x0]
    84c8:	mov	w1, #0xa437                	// #42039
    84cc:	movk	w1, #0xec30, lsl #16
    84d0:	cmp	w2, w1
    84d4:	b.ne	84e0 <ZSTD_getDictID_fromDict+0x24>  // b.any
    84d8:	ldr	w0, [x0, #4]
    84dc:	ret
    84e0:	mov	w0, #0x0                   	// #0
    84e4:	b	84dc <ZSTD_getDictID_fromDict+0x20>

00000000000084e8 <ZSTD_getDictID_fromDDict>:
    84e8:	cbz	x0, 84f8 <ZSTD_getDictID_fromDDict+0x10>
    84ec:	ldr	x1, [x0, #16]
    84f0:	ldr	x0, [x0, #8]
    84f4:	b	84bc <ZSTD_getDictID_fromDict>
    84f8:	mov	w0, #0x0                   	// #0
    84fc:	ret

0000000000008500 <ZSTD_getDictID_fromFrame>:
    8500:	stp	x29, x30, [sp, #-64]!
    8504:	mov	x2, x1
    8508:	mov	x1, x0
    850c:	mov	x29, sp
    8510:	add	x0, sp, #0x18
    8514:	stp	xzr, xzr, [sp, #24]
    8518:	stp	xzr, xzr, [sp, #40]
    851c:	str	wzr, [sp, #56]
    8520:	bl	6964 <ZSTD_getFrameHeader>
    8524:	cmn	x0, #0x78
    8528:	b.hi	8538 <ZSTD_getDictID_fromFrame+0x38>  // b.pmore
    852c:	ldr	w0, [sp, #52]
    8530:	ldp	x29, x30, [sp], #64
    8534:	ret
    8538:	mov	w0, #0x0                   	// #0
    853c:	b	8530 <ZSTD_getDictID_fromFrame+0x30>

0000000000008540 <ZSTD_decompress_usingDDict>:
    8540:	mov	x7, x5
    8544:	mov	x6, #0x0                   	// #0
    8548:	mov	x5, #0x0                   	// #0
    854c:	b	7dac <ZSTD_decompressBegin_usingDDict+0xdc>

0000000000008550 <ZSTD_createDStream>:
    8550:	stp	x29, x30, [sp, #-80]!
    8554:	adrp	x0, 0 <FSE_versionNumber>
    8558:	mov	x29, sp
    855c:	ldr	x0, [x0]
    8560:	add	x0, x0, #0x408
    8564:	ldp	x2, x3, [x0]
    8568:	stp	x2, x3, [sp, #16]
    856c:	ldr	x0, [x0, #16]
    8570:	str	x0, [sp, #32]
    8574:	add	x0, sp, #0x10
    8578:	bl	65b0 <ZSTD_createDCtx_advanced>
    857c:	ldp	x29, x30, [sp], #80
    8580:	ret
    8584:	nop
	...

0000000000008590 <ZSTD_initStaticDStream>:
    8590:	b	655c <ZSTD_initStaticDCtx>

0000000000008594 <ZSTD_createDStream_advanced>:
    8594:	stp	x29, x30, [sp, #-48]!
    8598:	mov	x29, sp
    859c:	ldp	x2, x3, [x0]
    85a0:	stp	x2, x3, [sp, #16]
    85a4:	ldr	x0, [x0, #16]
    85a8:	str	x0, [sp, #32]
    85ac:	add	x0, sp, #0x10
    85b0:	bl	65b0 <ZSTD_createDCtx_advanced>
    85b4:	ldp	x29, x30, [sp], #48
    85b8:	ret

00000000000085bc <ZSTD_freeDStream>:
    85bc:	b	8210 <ZSTD_freeDCtx>

00000000000085c0 <ZSTD_DStreamInSize>:
    85c0:	mov	x0, #0x3                   	// #3
    85c4:	movk	x0, #0x2, lsl #16
    85c8:	ret

00000000000085cc <ZSTD_DStreamOutSize>:
    85cc:	mov	x0, #0x20000               	// #131072
    85d0:	ret

00000000000085d4 <ZSTD_DCtx_loadDictionary_advanced>:
    85d4:	stp	x29, x30, [sp, #-96]!
    85d8:	mov	x29, sp
    85dc:	stp	x19, x20, [sp, #16]
    85e0:	mov	x19, x0
    85e4:	add	x0, x0, #0x4, lsl #12
    85e8:	stp	x21, x22, [sp, #32]
    85ec:	ldr	w0, [x0, #12656]
    85f0:	str	x23, [sp, #48]
    85f4:	cbnz	w0, 867c <ZSTD_DCtx_loadDictionary_advanced+0xa8>
    85f8:	ldr	x0, [x19, #29016]
    85fc:	mov	x20, x1
    8600:	mov	x21, x2
    8604:	mov	w22, w3
    8608:	mov	w23, w4
    860c:	bl	819c <ZSTD_freeDDict>
    8610:	cmp	x20, #0x0
    8614:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    8618:	b.ls	8658 <ZSTD_DCtx_loadDictionary_advanced+0x84>  // b.plast
    861c:	add	x0, x19, #0x7, lsl #12
    8620:	add	x4, sp, #0x40
    8624:	mov	x1, x21
    8628:	ldp	x2, x3, [x0, #288]
    862c:	stp	x2, x3, [sp, #64]
    8630:	ldr	x0, [x19, #28976]
    8634:	mov	w3, w23
    8638:	mov	w2, w22
    863c:	str	x0, [sp, #80]
    8640:	mov	x0, x20
    8644:	bl	8318 <ZSTD_createDDict_advanced>
    8648:	str	x0, [x19, #29016]
    864c:	cbnz	x0, 865c <ZSTD_DCtx_loadDictionary_advanced+0x88>
    8650:	mov	x0, #0xffffffffffffffc0    	// #-64
    8654:	b	8668 <ZSTD_DCtx_loadDictionary_advanced+0x94>
    8658:	str	xzr, [x19, #29016]
    865c:	ldr	x0, [x19, #29016]
    8660:	str	x0, [x19, #29024]
    8664:	mov	x0, #0x0                   	// #0
    8668:	ldp	x19, x20, [sp, #16]
    866c:	ldp	x21, x22, [sp, #32]
    8670:	ldr	x23, [sp, #48]
    8674:	ldp	x29, x30, [sp], #96
    8678:	ret
    867c:	mov	x0, #0xffffffffffffffc4    	// #-60
    8680:	b	8668 <ZSTD_DCtx_loadDictionary_advanced+0x94>

0000000000008684 <ZSTD_DCtx_loadDictionary_byReference>:
    8684:	mov	w4, #0x0                   	// #0
    8688:	mov	w3, #0x1                   	// #1
    868c:	b	85d4 <ZSTD_DCtx_loadDictionary_advanced>

0000000000008690 <ZSTD_DCtx_loadDictionary>:
    8690:	mov	w4, #0x0                   	// #0
    8694:	mov	w3, #0x0                   	// #0
    8698:	b	85d4 <ZSTD_DCtx_loadDictionary_advanced>

000000000000869c <ZSTD_DCtx_refPrefix_advanced>:
    869c:	mov	w4, w3
    86a0:	mov	w3, #0x1                   	// #1
    86a4:	b	85d4 <ZSTD_DCtx_loadDictionary_advanced>

00000000000086a8 <ZSTD_DCtx_refPrefix>:
    86a8:	mov	w3, #0x1                   	// #1
    86ac:	b	869c <ZSTD_DCtx_refPrefix_advanced>

00000000000086b0 <ZSTD_initDStream_usingDict>:
    86b0:	stp	x29, x30, [sp, #-16]!
    86b4:	add	x3, x0, #0x4, lsl #12
    86b8:	mov	x29, sp
    86bc:	str	wzr, [x3, #12656]
    86c0:	str	wzr, [x3, #12756]
    86c4:	bl	8690 <ZSTD_DCtx_loadDictionary>
    86c8:	cmn	x0, #0x78
    86cc:	b.hi	86d4 <ZSTD_initDStream_usingDict+0x24>  // b.pmore
    86d0:	mov	x0, #0x5                   	// #5
    86d4:	ldp	x29, x30, [sp], #16
    86d8:	ret

00000000000086dc <ZSTD_initDStream>:
    86dc:	mov	x2, #0x0                   	// #0
    86e0:	mov	x1, #0x0                   	// #0
    86e4:	b	86b0 <ZSTD_initDStream_usingDict>

00000000000086e8 <ZSTD_initDStream_usingDDict>:
    86e8:	stp	x29, x30, [sp, #-32]!
    86ec:	mov	x29, sp
    86f0:	stp	x19, x20, [sp, #16]
    86f4:	mov	x19, x0
    86f8:	mov	x20, x1
    86fc:	bl	86dc <ZSTD_initDStream>
    8700:	str	x20, [x19, #29024]
    8704:	ldp	x19, x20, [sp, #16]
    8708:	ldp	x29, x30, [sp], #32
    870c:	ret

0000000000008710 <ZSTD_resetDStream>:
    8710:	add	x1, x0, #0x4, lsl #12
    8714:	mov	w2, #0x1                   	// #1
    8718:	str	w2, [x1, #12656]
    871c:	mov	x1, #0x7200                	// #29184
    8720:	str	xzr, [x0, #29064]
    8724:	str	xzr, [x0, #29096]
    8728:	str	xzr, [x0, #29104]
    872c:	str	xzr, [x0, #29112]
    8730:	add	x0, x0, x1
    8734:	stur	xzr, [x0, #-52]
    8738:	mov	x0, #0x5                   	// #5
    873c:	ret

0000000000008740 <ZSTD_setDStreamParameter>:
    8740:	add	x3, x0, #0x4, lsl #12
    8744:	ldr	w3, [x3, #12656]
    8748:	cbnz	w3, 8764 <ZSTD_setDStreamParameter+0x24>
    874c:	cbnz	w1, 876c <ZSTD_setDStreamParameter+0x2c>
    8750:	cmp	w2, #0x0
    8754:	csinv	w2, w2, wzr, ne  // ne = any
    8758:	str	x2, [x0, #29072]
    875c:	mov	x0, #0x0                   	// #0
    8760:	ret
    8764:	mov	x0, #0xffffffffffffffc4    	// #-60
    8768:	b	8760 <ZSTD_setDStreamParameter+0x20>
    876c:	mov	x0, #0xffffffffffffffd8    	// #-40
    8770:	b	8760 <ZSTD_setDStreamParameter+0x20>

0000000000008774 <ZSTD_DCtx_refDDict>:
    8774:	add	x2, x0, #0x4, lsl #12
    8778:	ldr	w2, [x2, #12656]
    877c:	cbnz	w2, 878c <ZSTD_DCtx_refDDict+0x18>
    8780:	str	x1, [x0, #29024]
    8784:	mov	x0, #0x0                   	// #0
    8788:	ret
    878c:	mov	x0, #0xffffffffffffffc4    	// #-60
    8790:	b	8788 <ZSTD_DCtx_refDDict+0x14>

0000000000008794 <ZSTD_DCtx_setMaxWindowSize>:
    8794:	add	x2, x0, #0x4, lsl #12
    8798:	ldr	w2, [x2, #12656]
    879c:	cbnz	w2, 87ac <ZSTD_DCtx_setMaxWindowSize+0x18>
    87a0:	str	x1, [x0, #29072]
    87a4:	mov	x0, #0x0                   	// #0
    87a8:	ret
    87ac:	mov	x0, #0xffffffffffffffc4    	// #-60
    87b0:	b	87a8 <ZSTD_DCtx_setMaxWindowSize+0x14>

00000000000087b4 <ZSTD_DCtx_setFormat>:
    87b4:	add	x0, x0, #0x4, lsl #12
    87b8:	ldr	w2, [x0, #12656]
    87bc:	cbnz	w2, 87cc <ZSTD_DCtx_setFormat+0x18>
    87c0:	str	w1, [x0, #12560]
    87c4:	mov	x0, #0x0                   	// #0
    87c8:	ret
    87cc:	mov	x0, #0xffffffffffffffc4    	// #-60
    87d0:	b	87c8 <ZSTD_DCtx_setFormat+0x14>

00000000000087d4 <ZSTD_sizeof_DStream>:
    87d4:	b	847c <ZSTD_sizeof_DCtx>

00000000000087d8 <ZSTD_decodingBufferSize_min>:
    87d8:	mov	x2, #0x1ffff               	// #131071
    87dc:	cmp	x0, x2
    87e0:	mov	x2, #0x20000               	// #131072
    87e4:	csel	x2, x0, x2, ls  // ls = plast
    87e8:	add	x0, x0, #0x10
    87ec:	add	x0, x0, x2
    87f0:	cmp	x0, x1
    87f4:	csel	x0, x0, x1, ls  // ls = plast
    87f8:	ret

00000000000087fc <ZSTD_estimateDStreamSize>:
    87fc:	mov	x3, x0
    8800:	stp	x29, x30, [sp, #-16]!
    8804:	mov	x1, #0xffffffffffffffff    	// #-1
    8808:	mov	x29, sp
    880c:	bl	87d8 <ZSTD_decodingBufferSize_min>
    8810:	cmp	x3, #0x20, lsl #12
    8814:	mov	x1, #0x20000               	// #131072
    8818:	csel	x3, x3, x1, ls  // ls = plast
    881c:	add	x3, x3, #0x27, lsl #12
    8820:	add	x3, x3, #0x1f8
    8824:	add	x0, x3, x0
    8828:	ldp	x29, x30, [sp], #16
    882c:	ret

0000000000008830 <ZSTD_estimateDStreamSize_fromFrame>:
    8830:	stp	x29, x30, [sp, #-64]!
    8834:	mov	x2, x1
    8838:	mov	x1, x0
    883c:	mov	x29, sp
    8840:	add	x0, sp, #0x18
    8844:	bl	6964 <ZSTD_getFrameHeader>
    8848:	cmn	x0, #0x78
    884c:	b.hi	8870 <ZSTD_estimateDStreamSize_fromFrame+0x40>  // b.pmore
    8850:	cbnz	x0, 886c <ZSTD_estimateDStreamSize_fromFrame+0x3c>
    8854:	ldr	x0, [sp, #32]
    8858:	mov	x1, #0x80000000            	// #2147483648
    885c:	cmp	x0, x1
    8860:	b.hi	8878 <ZSTD_estimateDStreamSize_fromFrame+0x48>  // b.pmore
    8864:	ldp	x29, x30, [sp], #64
    8868:	b	87fc <ZSTD_estimateDStreamSize>
    886c:	mov	x0, #0xffffffffffffffb8    	// #-72
    8870:	ldp	x29, x30, [sp], #64
    8874:	ret
    8878:	mov	x0, #0xfffffffffffffff0    	// #-16
    887c:	b	8870 <ZSTD_estimateDStreamSize_fromFrame+0x40>

0000000000008880 <ZSTD_decompressStream>:
    8880:	stp	x29, x30, [sp, #-208]!
    8884:	mov	x29, sp
    8888:	stp	x27, x28, [sp, #80]
    888c:	mov	x28, x0
    8890:	ldr	x0, [x2, #16]
    8894:	str	x0, [sp, #104]
    8898:	ldr	x0, [x2, #8]
    889c:	str	x0, [sp, #112]
    88a0:	stp	x23, x24, [sp, #48]
    88a4:	mov	x23, x1
    88a8:	ldp	x0, x1, [sp, #104]
    88ac:	stp	x19, x20, [sp, #16]
    88b0:	stp	x21, x22, [sp, #32]
    88b4:	stp	x25, x26, [sp, #64]
    88b8:	cmp	x0, x1
    88bc:	b.hi	8e7c <ZSTD_decompressStream+0x5fc>  // b.pmore
    88c0:	ldp	x0, x1, [x23, #8]
    88c4:	cmp	x1, x0
    88c8:	b.hi	8ee0 <ZSTD_decompressStream+0x660>  // b.pmore
    88cc:	mov	x20, x2
    88d0:	add	x26, x28, #0x27, lsl #12
    88d4:	ldr	x22, [x2]
    88d8:	add	x26, x26, #0x1e0
    88dc:	ldr	x2, [sp, #104]
    88e0:	ldr	x24, [x23]
    88e4:	add	x25, x22, x2
    88e8:	ldr	x2, [sp, #112]
    88ec:	add	x1, x24, x1
    88f0:	add	x0, x24, x0
    88f4:	mov	x21, x1
    88f8:	mov	x19, x25
    88fc:	add	x22, x22, x2
    8900:	stp	x0, x1, [sp, #120]
    8904:	mov	x0, #0x7070                	// #28784
    8908:	add	x0, x28, x0
    890c:	str	x0, [sp, #144]
    8910:	add	x24, x28, #0x4, lsl #12
    8914:	ldr	w0, [x24, #12656]
    8918:	cmp	w0, #0x4
    891c:	b.hi	8ec8 <ZSTD_decompressStream+0x648>  // b.pmore
    8920:	adrp	x1, 0 <FSE_versionNumber>
    8924:	ldr	x1, [x1]
    8928:	ldrh	w0, [x1, w0, uxtw #1]
    892c:	adr	x1, 8938 <ZSTD_decompressStream+0xb8>
    8930:	add	x0, x1, w0, sxth #2
    8934:	br	x0
    8938:	mov	x0, x28
    893c:	bl	8710 <ZSTD_resetDStream>
    8940:	ldr	w3, [x24, #12560]
    8944:	mov	x1, x26
    8948:	ldr	x0, [sp, #144]
    894c:	ldr	x2, [x28, #29112]
    8950:	bl	66cc <ZSTD_getFrameHeader_advanced>
    8954:	mov	x27, x0
    8958:	cmn	x0, #0x78
    895c:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8960:	cbz	x0, 89e0 <ZSTD_decompressStream+0x160>
    8964:	ldr	x0, [x28, #29112]
    8968:	sub	x2, x22, x19
    896c:	sub	x24, x27, x0
    8970:	cmp	x24, x2
    8974:	b.ls	89c4 <ZSTD_decompressStream+0x144>  // b.plast
    8978:	cbz	x2, 899c <ZSTD_decompressStream+0x11c>
    897c:	mov	x1, x19
    8980:	add	x0, x26, x0
    8984:	str	x2, [sp, #104]
    8988:	bl	51d0 <ZSTD_free+0x244>
    898c:	ldr	x2, [sp, #104]
    8990:	ldr	x0, [x28, #29112]
    8994:	add	x2, x0, x2
    8998:	str	x2, [x28, #29112]
    899c:	ldr	x0, [x20, #8]
    89a0:	str	x0, [x20, #16]
    89a4:	ldr	x0, [x28, #29112]
    89a8:	cmp	x27, #0x6
    89ac:	mov	x1, #0x3                   	// #3
    89b0:	sub	x1, x1, x0
    89b4:	mov	x0, #0x6                   	// #6
    89b8:	csel	x0, x27, x0, cs  // cs = hs, nlast
    89bc:	add	x27, x0, x1
    89c0:	b	8cb8 <ZSTD_decompressStream+0x438>
    89c4:	mov	x1, x19
    89c8:	mov	x2, x24
    89cc:	add	x0, x26, x0
    89d0:	add	x19, x19, x24
    89d4:	bl	51d0 <ZSTD_free+0x244>
    89d8:	str	x27, [x28, #29112]
    89dc:	b	8910 <ZSTD_decompressStream+0x90>
    89e0:	ldr	x0, [x28, #28784]
    89e4:	cbz	x0, 8ac8 <ZSTD_decompressStream+0x248>
    89e8:	ldr	x1, [x28, #28792]
    89ec:	cbz	x1, 8ac8 <ZSTD_decompressStream+0x248>
    89f0:	ldr	x1, [sp, #120]
    89f4:	sub	x27, x1, x21
    89f8:	cmp	x0, x27
    89fc:	b.hi	8ac8 <ZSTD_decompressStream+0x248>  // b.pmore
    8a00:	ldp	x1, x0, [sp, #104]
    8a04:	sub	x1, x0, x1
    8a08:	mov	x0, x25
    8a0c:	str	x1, [sp, #136]
    8a10:	bl	760c <ZSTD_findFrameCompressedSize>
    8a14:	ldr	x1, [sp, #136]
    8a18:	mov	x4, x0
    8a1c:	cmp	x1, x0
    8a20:	b.cc	8ac8 <ZSTD_decompressStream+0x248>  // b.lo, b.ul, b.last
    8a24:	ldr	x5, [x28, #29024]
    8a28:	mov	x2, x27
    8a2c:	mov	x3, x25
    8a30:	mov	x1, x21
    8a34:	mov	x0, x28
    8a38:	str	x4, [sp, #104]
    8a3c:	bl	8540 <ZSTD_decompress_usingDDict>
    8a40:	mov	x27, x0
    8a44:	cmn	x0, #0x78
    8a48:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8a4c:	ldr	x4, [sp, #104]
    8a50:	add	x21, x21, x0
    8a54:	str	xzr, [x28, #28776]
    8a58:	add	x19, x25, x4
    8a5c:	str	wzr, [x24, #12656]
    8a60:	ldr	x0, [x20]
    8a64:	cmp	x25, x19
    8a68:	ldr	x1, [x23]
    8a6c:	sub	x0, x19, x0
    8a70:	str	x0, [x20, #16]
    8a74:	sub	x1, x21, x1
    8a78:	str	x1, [x23, #16]
    8a7c:	ldr	x1, [sp, #128]
    8a80:	ccmp	x1, x21, #0x0, eq  // eq = none
    8a84:	b.eq	8e54 <ZSTD_decompressStream+0x5d4>  // b.none
    8a88:	str	wzr, [x24, #12756]
    8a8c:	ldr	x27, [x28, #28776]
    8a90:	cbnz	x27, 8ea8 <ZSTD_decompressStream+0x628>
    8a94:	ldr	x2, [x28, #29096]
    8a98:	ldr	x4, [x28, #29104]
    8a9c:	ldr	w1, [x24, #12752]
    8aa0:	cmp	x4, x2
    8aa4:	b.ne	8e90 <ZSTD_decompressStream+0x610>  // b.any
    8aa8:	cbz	w1, 8cb8 <ZSTD_decompressStream+0x438>
    8aac:	ldr	x1, [x20, #8]
    8ab0:	cmp	x0, x1
    8ab4:	b.cc	8e84 <ZSTD_decompressStream+0x604>  // b.lo, b.ul, b.last
    8ab8:	mov	w0, #0x2                   	// #2
    8abc:	str	w0, [x24, #12656]
    8ac0:	mov	x27, #0x1                   	// #1
    8ac4:	b	8cb8 <ZSTD_decompressStream+0x438>
    8ac8:	ldr	x1, [x28, #29024]
    8acc:	mov	x0, x28
    8ad0:	bl	7cd0 <ZSTD_decompressBegin_usingDDict>
    8ad4:	mov	x27, x0
    8ad8:	cmn	x0, #0x78
    8adc:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8ae0:	add	x1, x28, #0x24, lsl #12
    8ae4:	mov	w2, #0x2a50                	// #10832
    8ae8:	movk	w2, #0x184d, lsl #16
    8aec:	ldr	w0, [x1, #12768]
    8af0:	and	w0, w0, #0xfffffff0
    8af4:	cmp	w0, w2
    8af8:	b.ne	8c1c <ZSTD_decompressStream+0x39c>  // b.any
    8afc:	ldr	w0, [x1, #12772]
    8b00:	str	x0, [x28, #28776]
    8b04:	mov	w0, #0x7                   	// #7
    8b08:	str	w0, [x24, #12452]
    8b0c:	mov	x1, #0x400                 	// #1024
    8b10:	ldr	x0, [x28, #28792]
    8b14:	cmp	x0, #0x400
    8b18:	csel	x0, x0, x1, cs  // cs = hs, nlast
    8b1c:	str	x0, [x28, #28792]
    8b20:	ldr	x1, [x28, #29072]
    8b24:	cmp	x0, x1
    8b28:	b.hi	8ed0 <ZSTD_decompressStream+0x650>  // b.pmore
    8b2c:	ldr	w2, [x24, #12416]
    8b30:	mov	w1, #0x4                   	// #4
    8b34:	cmp	w2, #0x4
    8b38:	csel	w27, w2, w1, cs  // cs = hs, nlast
    8b3c:	ldr	x1, [x28, #28784]
    8b40:	bl	87d8 <ZSTD_decodingBufferSize_min>
    8b44:	mov	x3, x0
    8b48:	ldr	x0, [x28, #29056]
    8b4c:	cmp	x0, x27
    8b50:	b.cc	8b60 <ZSTD_decompressStream+0x2e0>  // b.lo, b.ul, b.last
    8b54:	ldr	x0, [x28, #29088]
    8b58:	cmp	x0, x3
    8b5c:	b.cs	8b90 <ZSTD_decompressStream+0x310>  // b.hs, b.nlast
    8b60:	ldr	x0, [x28, #29000]
    8b64:	add	x2, x27, x3
    8b68:	cbz	x0, 8c48 <ZSTD_decompressStream+0x3c8>
    8b6c:	sub	x0, x0, #0x27, lsl #12
    8b70:	sub	x0, x0, #0x1f8
    8b74:	cmp	x0, x2
    8b78:	b.cc	8cb4 <ZSTD_decompressStream+0x434>  // b.lo, b.ul, b.last
    8b7c:	ldr	x0, [x28, #29048]
    8b80:	str	x27, [x28, #29056]
    8b84:	str	x3, [x28, #29088]
    8b88:	add	x2, x0, x27
    8b8c:	str	x2, [x28, #29080]
    8b90:	mov	w0, #0x2                   	// #2
    8b94:	str	w0, [x24, #12656]
    8b98:	ldr	x4, [x28, #28776]
    8b9c:	cbz	x4, 8a5c <ZSTD_decompressStream+0x1dc>
    8ba0:	sub	x0, x22, x19
    8ba4:	cmp	x0, x4
    8ba8:	b.cc	8ce0 <ZSTD_decompressStream+0x460>  // b.lo, b.ul, b.last
    8bac:	ldr	x1, [x28, #29080]
    8bb0:	ldr	x0, [x28, #29096]
    8bb4:	ldr	w5, [x24, #12452]
    8bb8:	add	x1, x1, x0
    8bbc:	cmp	w5, #0x7
    8bc0:	b.eq	8cd8 <ZSTD_decompressStream+0x458>  // b.none
    8bc4:	ldr	x2, [x28, #29088]
    8bc8:	sub	x2, x2, x0
    8bcc:	mov	x3, x19
    8bd0:	mov	x0, x28
    8bd4:	str	x4, [sp, #136]
    8bd8:	str	w5, [sp, #152]
    8bdc:	bl	77d8 <ZSTD_decompressContinue>
    8be0:	mov	x27, x0
    8be4:	cmn	x0, #0x78
    8be8:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8bec:	ldr	x4, [sp, #136]
    8bf0:	cmp	x0, #0x0
    8bf4:	ldr	w5, [sp, #152]
    8bf8:	add	x19, x19, x4
    8bfc:	ccmp	w5, #0x7, #0x4, eq  // eq = none
    8c00:	b.ne	8910 <ZSTD_decompressStream+0x90>  // b.any
    8c04:	ldr	x0, [x28, #29096]
    8c08:	add	x0, x0, x27
    8c0c:	str	x0, [x28, #29104]
    8c10:	mov	w0, #0x4                   	// #4
    8c14:	str	w0, [x24, #12656]
    8c18:	b	8910 <ZSTD_decompressStream+0x90>
    8c1c:	ldr	x2, [x28, #29112]
    8c20:	mov	x1, x26
    8c24:	mov	x0, x28
    8c28:	bl	68dc <ZSTD_getFrameHeader_advanced+0x210>
    8c2c:	mov	x27, x0
    8c30:	cmn	x0, #0x78
    8c34:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8c38:	mov	x0, #0x3                   	// #3
    8c3c:	str	x0, [x28, #28776]
    8c40:	mov	w0, #0x2                   	// #2
    8c44:	b	8b08 <ZSTD_decompressStream+0x288>
    8c48:	add	x4, x28, #0x7, lsl #12
    8c4c:	stp	x4, x3, [sp, #152]
    8c50:	add	x8, x4, #0x120
    8c54:	str	x8, [sp, #136]
    8c58:	ldp	x0, x1, [x4, #288]
    8c5c:	stp	x0, x1, [sp, #176]
    8c60:	ldr	x0, [x28, #28976]
    8c64:	str	x0, [sp, #192]
    8c68:	add	x1, sp, #0xb0
    8c6c:	str	x2, [sp, #168]
    8c70:	ldr	x0, [x28, #29048]
    8c74:	bl	4f8c <ZSTD_free>
    8c78:	ldr	x4, [sp, #152]
    8c7c:	ldr	x8, [sp, #136]
    8c80:	ldp	x0, x1, [x4, #288]
    8c84:	stp	x0, x1, [sp, #176]
    8c88:	ldr	x2, [sp, #168]
    8c8c:	add	x1, sp, #0xb0
    8c90:	ldr	x0, [x8, #16]
    8c94:	str	xzr, [x28, #29056]
    8c98:	str	xzr, [x28, #29088]
    8c9c:	str	x0, [sp, #192]
    8ca0:	mov	x0, x2
    8ca4:	bl	4f20 <ZSTD_malloc>
    8ca8:	str	x0, [x28, #29048]
    8cac:	ldr	x3, [sp, #160]
    8cb0:	cbnz	x0, 8b7c <ZSTD_decompressStream+0x2fc>
    8cb4:	mov	x27, #0xffffffffffffffc0    	// #-64
    8cb8:	mov	x0, x27
    8cbc:	ldp	x19, x20, [sp, #16]
    8cc0:	ldp	x21, x22, [sp, #32]
    8cc4:	ldp	x23, x24, [sp, #48]
    8cc8:	ldp	x25, x26, [sp, #64]
    8ccc:	ldp	x27, x28, [sp, #80]
    8cd0:	ldp	x29, x30, [sp], #208
    8cd4:	ret
    8cd8:	mov	x2, #0x0                   	// #0
    8cdc:	b	8bcc <ZSTD_decompressStream+0x34c>
    8ce0:	cmp	x22, x19
    8ce4:	b.eq	8a60 <ZSTD_decompressStream+0x1e0>  // b.none
    8ce8:	mov	w0, #0x3                   	// #3
    8cec:	str	w0, [x24, #12656]
    8cf0:	ldr	w1, [x24, #12452]
    8cf4:	ldr	x27, [x28, #28776]
    8cf8:	str	w1, [sp, #136]
    8cfc:	ldr	x0, [x28, #29064]
    8d00:	mov	w1, w1
    8d04:	cmp	w1, #0x7
    8d08:	sub	x3, x27, x0
    8d0c:	b.ne	8d80 <ZSTD_decompressStream+0x500>  // b.any
    8d10:	sub	x2, x22, x19
    8d14:	cmp	x2, x3
    8d18:	csel	x2, x2, x3, ls  // ls = plast
    8d1c:	ldr	x0, [x28, #29064]
    8d20:	add	x19, x19, x2
    8d24:	cmp	x2, x3
    8d28:	add	x0, x0, x2
    8d2c:	str	x0, [x28, #29064]
    8d30:	b.cc	8a60 <ZSTD_decompressStream+0x1e0>  // b.lo, b.ul, b.last
    8d34:	ldr	x3, [x28, #29048]
    8d38:	mov	x4, x27
    8d3c:	ldr	x1, [x28, #29080]
    8d40:	ldr	x2, [x28, #29088]
    8d44:	ldr	x0, [x28, #29096]
    8d48:	sub	x2, x2, x0
    8d4c:	add	x1, x1, x0
    8d50:	mov	x0, x28
    8d54:	bl	77d8 <ZSTD_decompressContinue>
    8d58:	mov	x27, x0
    8d5c:	cmn	x0, #0x78
    8d60:	b.hi	8cb8 <ZSTD_decompressStream+0x438>  // b.pmore
    8d64:	cmp	x0, #0x0
    8d68:	ldr	w0, [sp, #136]
    8d6c:	str	xzr, [x28, #29064]
    8d70:	ccmp	w0, #0x7, #0x4, eq  // eq = none
    8d74:	b.eq	8db8 <ZSTD_decompressStream+0x538>  // b.none
    8d78:	mov	w0, #0x2                   	// #2
    8d7c:	b	8c14 <ZSTD_decompressStream+0x394>
    8d80:	ldr	x1, [x28, #29056]
    8d84:	sub	x1, x1, x0
    8d88:	cmp	x1, x3
    8d8c:	b.cc	8ed8 <ZSTD_decompressStream+0x658>  // b.lo, b.ul, b.last
    8d90:	sub	x2, x22, x19
    8d94:	mov	x1, x19
    8d98:	ldr	x5, [x28, #29048]
    8d9c:	cmp	x2, x3
    8da0:	csel	x2, x2, x3, ls  // ls = plast
    8da4:	stp	x2, x3, [sp, #152]
    8da8:	add	x0, x5, x0
    8dac:	bl	51d0 <ZSTD_free+0x244>
    8db0:	ldp	x2, x3, [sp, #152]
    8db4:	b	8d1c <ZSTD_decompressStream+0x49c>
    8db8:	ldr	x0, [x28, #29096]
    8dbc:	add	x0, x0, x27
    8dc0:	str	x0, [x28, #29104]
    8dc4:	mov	w0, #0x4                   	// #4
    8dc8:	str	w0, [x24, #12656]
    8dcc:	ldr	x1, [sp, #120]
    8dd0:	ldr	x0, [x28, #29096]
    8dd4:	sub	x4, x1, x21
    8dd8:	ldr	x3, [x28, #29104]
    8ddc:	str	x4, [sp, #152]
    8de0:	ldr	x1, [x28, #29080]
    8de4:	sub	x27, x3, x0
    8de8:	cmp	x4, x27
    8dec:	csel	x2, x4, x27, ls  // ls = plast
    8df0:	add	x1, x1, x0
    8df4:	mov	x0, x21
    8df8:	str	x2, [sp, #136]
    8dfc:	bl	51d0 <ZSTD_free+0x244>
    8e00:	ldr	x2, [sp, #136]
    8e04:	ldr	x0, [x28, #29096]
    8e08:	add	x21, x21, x2
    8e0c:	ldr	x4, [sp, #152]
    8e10:	add	x2, x2, x0
    8e14:	str	x2, [x28, #29096]
    8e18:	cmp	x4, x27
    8e1c:	b.cc	8a60 <ZSTD_decompressStream+0x1e0>  // b.lo, b.ul, b.last
    8e20:	mov	w0, #0x2                   	// #2
    8e24:	ldr	x1, [x28, #29088]
    8e28:	str	w0, [x24, #12656]
    8e2c:	ldr	x0, [x28, #28784]
    8e30:	cmp	x1, x0
    8e34:	b.cs	8910 <ZSTD_decompressStream+0x90>  // b.hs, b.nlast
    8e38:	ldr	w0, [x24, #12416]
    8e3c:	add	x2, x0, x2
    8e40:	cmp	x1, x2
    8e44:	b.cs	8910 <ZSTD_decompressStream+0x90>  // b.hs, b.nlast
    8e48:	str	xzr, [x28, #29096]
    8e4c:	str	xzr, [x28, #29104]
    8e50:	b	8910 <ZSTD_decompressStream+0x90>
    8e54:	ldr	w1, [x24, #12756]
    8e58:	add	w1, w1, #0x1
    8e5c:	str	w1, [x24, #12756]
    8e60:	cmp	w1, #0xf
    8e64:	b.le	8a8c <ZSTD_decompressStream+0x20c>
    8e68:	ldr	x1, [sp, #120]
    8e6c:	cmp	x1, x21
    8e70:	b.eq	8ee0 <ZSTD_decompressStream+0x660>  // b.none
    8e74:	cmp	x22, x19
    8e78:	b.ne	8a8c <ZSTD_decompressStream+0x20c>  // b.any
    8e7c:	mov	x27, #0xffffffffffffffb8    	// #-72
    8e80:	b	8cb8 <ZSTD_decompressStream+0x438>
    8e84:	add	x0, x0, #0x1
    8e88:	str	x0, [x20, #16]
    8e8c:	b	8cb8 <ZSTD_decompressStream+0x438>
    8e90:	cbnz	w1, 8ac0 <ZSTD_decompressStream+0x240>
    8e94:	sub	x0, x0, #0x1
    8e98:	str	x0, [x20, #16]
    8e9c:	mov	w0, #0x1                   	// #1
    8ea0:	str	w0, [x24, #12752]
    8ea4:	b	8ac0 <ZSTD_decompressStream+0x240>
    8ea8:	mov	x0, x28
    8eac:	bl	779c <ZSTD_nextInputType>
    8eb0:	cmp	w0, #0x2
    8eb4:	mov	x1, #0x3                   	// #3
    8eb8:	ldr	x0, [x28, #29064]
    8ebc:	csel	x1, x1, xzr, eq  // eq = none
    8ec0:	sub	x0, x27, x0
    8ec4:	b	89bc <ZSTD_decompressStream+0x13c>
    8ec8:	mov	x27, #0xffffffffffffffff    	// #-1
    8ecc:	b	8cb8 <ZSTD_decompressStream+0x438>
    8ed0:	mov	x27, #0xfffffffffffffff0    	// #-16
    8ed4:	b	8cb8 <ZSTD_decompressStream+0x438>
    8ed8:	mov	x27, #0xffffffffffffffec    	// #-20
    8edc:	b	8cb8 <ZSTD_decompressStream+0x438>
    8ee0:	mov	x27, #0xffffffffffffffba    	// #-70
    8ee4:	b	8cb8 <ZSTD_decompressStream+0x438>
	...

0000000000008ef0 <ZSTD_decompress_generic>:
    8ef0:	b	8880 <ZSTD_decompressStream>

0000000000008ef4 <ZSTD_decompress_generic_simpleArgs>:
    8ef4:	stp	x29, x30, [sp, #-80]!
    8ef8:	mov	x29, sp
    8efc:	stp	x1, x2, [sp, #32]
    8f00:	add	x2, sp, #0x38
    8f04:	ldr	x1, [x3]
    8f08:	stp	x19, x20, [sp, #16]
    8f0c:	mov	x20, x3
    8f10:	str	x1, [sp, #48]
    8f14:	mov	x19, x6
    8f18:	ldr	x1, [x6]
    8f1c:	stp	x4, x5, [sp, #56]
    8f20:	str	x1, [sp, #72]
    8f24:	add	x1, sp, #0x20
    8f28:	bl	8880 <ZSTD_decompressStream>
    8f2c:	ldr	x1, [sp, #48]
    8f30:	str	x1, [x20]
    8f34:	ldr	x1, [sp, #72]
    8f38:	str	x1, [x19]
    8f3c:	ldp	x19, x20, [sp, #16]
    8f40:	ldp	x29, x30, [sp], #80
    8f44:	ret

0000000000008f48 <ZSTD_DCtx_reset>:
    8f48:	stp	x29, x30, [sp, #-32]!
    8f4c:	mov	x29, sp
    8f50:	str	x19, [sp, #16]
    8f54:	mov	x19, x0
    8f58:	bl	86dc <ZSTD_initDStream>
    8f5c:	add	x0, x19, #0x4, lsl #12
    8f60:	str	wzr, [x0, #12560]
    8f64:	mov	x0, #0x1                   	// #1
    8f68:	movk	x0, #0x800, lsl #16
    8f6c:	str	x0, [x19, #29072]
    8f70:	ldr	x19, [sp, #16]
    8f74:	ldp	x29, x30, [sp], #32
    8f78:	ret
