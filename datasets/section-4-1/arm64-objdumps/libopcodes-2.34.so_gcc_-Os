
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000035028 <.init>:
   35028:	stp	x29, x30, [sp, #-16]!
   3502c:	mov	x29, sp
   35030:	bl	35c10 <aarch64_get_operand_modifier_from_value@plt+0x10>
   35034:	ldp	x29, x30, [sp], #16
   35038:	ret

Disassembly of section .plt:

0000000000035040 <aarch64_ext_sysins_op@plt-0x20>:
   35040:	stp	x16, x30, [sp, #-16]!
   35044:	adrp	x16, 97000 <aarch64_operands@@Base+0x16bc0>
   35048:	ldr	x17, [x16, #4088]
   3504c:	add	x16, x16, #0xff8
   35050:	br	x17
   35054:	nop
   35058:	nop
   3505c:	nop

0000000000035060 <aarch64_ext_sysins_op@plt>:
   35060:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35064:	ldr	x17, [x16]
   35068:	add	x16, x16, #0x0
   3506c:	br	x17

0000000000035070 <aarch64_ins_sve_float_zero_one@plt>:
   35070:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35074:	ldr	x17, [x16, #8]
   35078:	add	x16, x16, #0x8
   3507c:	br	x17

0000000000035080 <aarch64_ins_simd_addr_post@plt>:
   35080:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35084:	ldr	x17, [x16, #16]
   35088:	add	x16, x16, #0x10
   3508c:	br	x17

0000000000035090 <memcpy@plt>:
   35090:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35094:	ldr	x17, [x16, #24]
   35098:	add	x16, x16, #0x18
   3509c:	br	x17

00000000000350a0 <memmove@plt>:
   350a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350a4:	ldr	x17, [x16, #32]
   350a8:	add	x16, x16, #0x20
   350ac:	br	x17

00000000000350b0 <aarch64_ins_sve_quad_index@plt>:
   350b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350b4:	ldr	x17, [x16, #40]
   350b8:	add	x16, x16, #0x28
   350bc:	br	x17

00000000000350c0 <aarch64_ins_cond@plt>:
   350c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350c4:	ldr	x17, [x16, #48]
   350c8:	add	x16, x16, #0x30
   350cc:	br	x17

00000000000350d0 <aarch64_ext_sve_addr_zi_u5@plt>:
   350d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350d4:	ldr	x17, [x16, #56]
   350d8:	add	x16, x16, #0x38
   350dc:	br	x17

00000000000350e0 <strlen@plt>:
   350e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350e4:	ldr	x17, [x16, #64]
   350e8:	add	x16, x16, #0x40
   350ec:	br	x17

00000000000350f0 <aarch64_ins_sve_addr_rz_xtw@plt>:
   350f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   350f4:	ldr	x17, [x16, #72]
   350f8:	add	x16, x16, #0x48
   350fc:	br	x17

0000000000035100 <aarch64_ext_sysreg@plt>:
   35100:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35104:	ldr	x17, [x16, #80]
   35108:	add	x16, x16, #0x50
   3510c:	br	x17

0000000000035110 <aarch64_ins_sve_reglist@plt>:
   35110:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35114:	ldr	x17, [x16, #88]
   35118:	add	x16, x16, #0x58
   3511c:	br	x17

0000000000035120 <aarch64_ins_imm_rotate1@plt>:
   35120:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35124:	ldr	x17, [x16, #96]
   35128:	add	x16, x16, #0x60
   3512c:	br	x17

0000000000035130 <exit@plt>:
   35130:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35134:	ldr	x17, [x16, #104]
   35138:	add	x16, x16, #0x68
   3513c:	br	x17

0000000000035140 <aarch64_operand_index@plt>:
   35140:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35144:	ldr	x17, [x16, #112]
   35148:	add	x16, x16, #0x70
   3514c:	br	x17

0000000000035150 <aarch64_ext_regrt_sysins@plt>:
   35150:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35154:	ldr	x17, [x16, #120]
   35158:	add	x16, x16, #0x78
   3515c:	br	x17

0000000000035160 <aarch64_ext_fbits@plt>:
   35160:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35164:	ldr	x17, [x16, #128]
   35168:	add	x16, x16, #0x80
   3516c:	br	x17

0000000000035170 <aarch64_ins_sve_addr_rr_lsl@plt>:
   35170:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35174:	ldr	x17, [x16, #136]
   35178:	add	x16, x16, #0x88
   3517c:	br	x17

0000000000035180 <aarch64_ins_sve_scale@plt>:
   35180:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35184:	ldr	x17, [x16, #144]
   35188:	add	x16, x16, #0x90
   3518c:	br	x17

0000000000035190 <aarch64_ext_ldst_reglist_r@plt>:
   35190:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35194:	ldr	x17, [x16, #152]
   35198:	add	x16, x16, #0x98
   3519c:	br	x17

00000000000351a0 <sbrk@plt>:
   351a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351a4:	ldr	x17, [x16, #160]
   351a8:	add	x16, x16, #0xa0
   351ac:	br	x17

00000000000351b0 <aarch64_num_of_operands@plt>:
   351b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351b4:	ldr	x17, [x16, #168]
   351b8:	add	x16, x16, #0xa8
   351bc:	br	x17

00000000000351c0 <aarch64_ext_sve_shrimm@plt>:
   351c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351c4:	ldr	x17, [x16, #176]
   351c8:	add	x16, x16, #0xb0
   351cc:	br	x17

00000000000351d0 <aarch64_ext_sve_shlimm@plt>:
   351d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351d4:	ldr	x17, [x16, #184]
   351d8:	add	x16, x16, #0xb8
   351dc:	br	x17

00000000000351e0 <aarch64_ext_addr_uimm12@plt>:
   351e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351e4:	ldr	x17, [x16, #192]
   351e8:	add	x16, x16, #0xc0
   351ec:	br	x17

00000000000351f0 <aarch64_ins_addr_simm10@plt>:
   351f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   351f4:	ldr	x17, [x16, #200]
   351f8:	add	x16, x16, #0xc8
   351fc:	br	x17

0000000000035200 <aarch64_ext_aimm@plt>:
   35200:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35204:	ldr	x17, [x16, #208]
   35208:	add	x16, x16, #0xd0
   3520c:	br	x17

0000000000035210 <ldexp@plt>:
   35210:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35214:	ldr	x17, [x16, #216]
   35218:	add	x16, x16, #0xd8
   3521c:	br	x17

0000000000035220 <aarch64_ext_sve_asimm@plt>:
   35220:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35224:	ldr	x17, [x16, #224]
   35228:	add	x16, x16, #0xe0
   3522c:	br	x17

0000000000035230 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   35230:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35234:	ldr	x17, [x16, #232]
   35238:	add	x16, x16, #0xe8
   3523c:	br	x17

0000000000035240 <aarch64_ins_regno@plt>:
   35240:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35244:	ldr	x17, [x16, #240]
   35248:	add	x16, x16, #0xf0
   3524c:	br	x17

0000000000035250 <__cxa_finalize@plt>:
   35250:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35254:	ldr	x17, [x16, #248]
   35258:	add	x16, x16, #0xf8
   3525c:	br	x17

0000000000035260 <aarch64_ins_aimm@plt>:
   35260:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35264:	ldr	x17, [x16, #256]
   35268:	add	x16, x16, #0x100
   3526c:	br	x17

0000000000035270 <sprintf@plt>:
   35270:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35274:	ldr	x17, [x16, #264]
   35278:	add	x16, x16, #0x108
   3527c:	br	x17

0000000000035280 <aarch64_ins_pstatefield@plt>:
   35280:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35284:	ldr	x17, [x16, #272]
   35288:	add	x16, x16, #0x110
   3528c:	br	x17

0000000000035290 <verify_constraints@plt>:
   35290:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35294:	ldr	x17, [x16, #280]
   35298:	add	x16, x16, #0x118
   3529c:	br	x17

00000000000352a0 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   352a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352a4:	ldr	x17, [x16, #288]
   352a8:	add	x16, x16, #0x120
   352ac:	br	x17

00000000000352b0 <qsort@plt>:
   352b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352b4:	ldr	x17, [x16, #296]
   352b8:	add	x16, x16, #0x128
   352bc:	br	x17

00000000000352c0 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   352c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352c4:	ldr	x17, [x16, #304]
   352c8:	add	x16, x16, #0x130
   352cc:	br	x17

00000000000352d0 <aarch64_ins_sve_addr_zz_lsl@plt>:
   352d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352d4:	ldr	x17, [x16, #312]
   352d8:	add	x16, x16, #0x138
   352dc:	br	x17

00000000000352e0 <aarch64_ext_addr_simm@plt>:
   352e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352e4:	ldr	x17, [x16, #320]
   352e8:	add	x16, x16, #0x140
   352ec:	br	x17

00000000000352f0 <aarch64_ext_reglane@plt>:
   352f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   352f4:	ldr	x17, [x16, #328]
   352f8:	add	x16, x16, #0x148
   352fc:	br	x17

0000000000035300 <aarch64_ins_sve_addr_ri_u6@plt>:
   35300:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35304:	ldr	x17, [x16, #336]
   35308:	add	x16, x16, #0x150
   3530c:	br	x17

0000000000035310 <aarch64_ins_sve_index@plt>:
   35310:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35314:	ldr	x17, [x16, #344]
   35318:	add	x16, x16, #0x158
   3531c:	br	x17

0000000000035320 <aarch64_decode_insn@plt>:
   35320:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35324:	ldr	x17, [x16, #352]
   35328:	add	x16, x16, #0x160
   3532c:	br	x17

0000000000035330 <aarch64_find_real_opcode@plt>:
   35330:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35334:	ldr	x17, [x16, #360]
   35338:	add	x16, x16, #0x168
   3533c:	br	x17

0000000000035340 <aarch64_ins_addr_simm@plt>:
   35340:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35344:	ldr	x17, [x16, #368]
   35348:	add	x16, x16, #0x170
   3534c:	br	x17

0000000000035350 <get_cond_from_value@plt>:
   35350:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35354:	ldr	x17, [x16, #376]
   35358:	add	x16, x16, #0x178
   3535c:	br	x17

0000000000035360 <aarch64_ext_addr_simm10@plt>:
   35360:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35364:	ldr	x17, [x16, #384]
   35368:	add	x16, x16, #0x180
   3536c:	br	x17

0000000000035370 <aarch64_ins_sysins_op@plt>:
   35370:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35374:	ldr	x17, [x16, #392]
   35378:	add	x16, x16, #0x188
   3537c:	br	x17

0000000000035380 <aarch64_ins_ft@plt>:
   35380:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35384:	ldr	x17, [x16, #400]
   35388:	add	x16, x16, #0x190
   3538c:	br	x17

0000000000035390 <aarch64_ext_addr_offset@plt>:
   35390:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35394:	ldr	x17, [x16, #408]
   35398:	add	x16, x16, #0x198
   3539c:	br	x17

00000000000353a0 <aarch64_find_best_match@plt>:
   353a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353a4:	ldr	x17, [x16, #416]
   353a8:	add	x16, x16, #0x1a0
   353ac:	br	x17

00000000000353b0 <aarch64_ext_fpimm@plt>:
   353b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353b4:	ldr	x17, [x16, #424]
   353b8:	add	x16, x16, #0x1a8
   353bc:	br	x17

00000000000353c0 <snprintf@plt>:
   353c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353c4:	ldr	x17, [x16, #432]
   353c8:	add	x16, x16, #0x1b0
   353cc:	br	x17

00000000000353d0 <extract_fields@plt>:
   353d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353d4:	ldr	x17, [x16, #440]
   353d8:	add	x16, x16, #0x1b8
   353dc:	br	x17

00000000000353e0 <aarch64_ins_limm@plt>:
   353e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353e4:	ldr	x17, [x16, #448]
   353e8:	add	x16, x16, #0x1c0
   353ec:	br	x17

00000000000353f0 <aarch64_print_operand@plt>:
   353f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   353f4:	ldr	x17, [x16, #456]
   353f8:	add	x16, x16, #0x1c8
   353fc:	br	x17

0000000000035400 <aarch64_ext_reg_extended@plt>:
   35400:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35404:	ldr	x17, [x16, #464]
   35408:	add	x16, x16, #0x1d0
   3540c:	br	x17

0000000000035410 <aarch64_get_qualifier_standard_value@plt>:
   35410:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35414:	ldr	x17, [x16, #472]
   35418:	add	x16, x16, #0x1d8
   3541c:	br	x17

0000000000035420 <malloc@plt>:
   35420:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35424:	ldr	x17, [x16, #480]
   35428:	add	x16, x16, #0x1e0
   3542c:	br	x17

0000000000035430 <aarch64_get_qualifier_name@plt>:
   35430:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35434:	ldr	x17, [x16, #488]
   35438:	add	x16, x16, #0x1e8
   3543c:	br	x17

0000000000035440 <aarch64_logical_immediate_p@plt>:
   35440:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35444:	ldr	x17, [x16, #496]
   35448:	add	x16, x16, #0x1f0
   3544c:	br	x17

0000000000035450 <aarch64_replace_opcode@plt>:
   35450:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35454:	ldr	x17, [x16, #504]
   35458:	add	x16, x16, #0x1f8
   3545c:	br	x17

0000000000035460 <aarch64_ext_limm@plt>:
   35460:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35464:	ldr	x17, [x16, #512]
   35468:	add	x16, x16, #0x200
   3546c:	br	x17

0000000000035470 <aarch64_get_operand_modifier_value@plt>:
   35470:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35474:	ldr	x17, [x16, #520]
   35478:	add	x16, x16, #0x208
   3547c:	br	x17

0000000000035480 <strncmp@plt>:
   35480:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35484:	ldr	x17, [x16, #528]
   35488:	add	x16, x16, #0x210
   3548c:	br	x17

0000000000035490 <aarch64_ins_reg_shifted@plt>:
   35490:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35494:	ldr	x17, [x16, #536]
   35498:	add	x16, x16, #0x218
   3549c:	br	x17

00000000000354a0 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   354a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354a4:	ldr	x17, [x16, #544]
   354a8:	add	x16, x16, #0x220
   354ac:	br	x17

00000000000354b0 <memset@plt>:
   354b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354b4:	ldr	x17, [x16, #552]
   354b8:	add	x16, x16, #0x228
   354bc:	br	x17

00000000000354c0 <xmalloc@plt>:
   354c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354c4:	ldr	x17, [x16, #560]
   354c8:	add	x16, x16, #0x230
   354cc:	br	x17

00000000000354d0 <aarch64_ins_sysreg@plt>:
   354d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354d4:	ldr	x17, [x16, #568]
   354d8:	add	x16, x16, #0x238
   354dc:	br	x17

00000000000354e0 <print_arm_disassembler_options@plt>:
   354e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354e4:	ldr	x17, [x16, #576]
   354e8:	add	x16, x16, #0x240
   354ec:	br	x17

00000000000354f0 <aarch64_ins_fpimm@plt>:
   354f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   354f4:	ldr	x17, [x16, #584]
   354f8:	add	x16, x16, #0x248
   354fc:	br	x17

0000000000035500 <aarch64_ext_sve_reglist@plt>:
   35500:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35504:	ldr	x17, [x16, #592]
   35508:	add	x16, x16, #0x250
   3550c:	br	x17

0000000000035510 <aarch64_ext_sve_quad_index@plt>:
   35510:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35514:	ldr	x17, [x16, #600]
   35518:	add	x16, x16, #0x258
   3551c:	br	x17

0000000000035520 <aarch64_match_operands_constraint@plt>:
   35520:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35524:	ldr	x17, [x16, #608]
   35528:	add	x16, x16, #0x260
   3552c:	br	x17

0000000000035530 <aarch64_ins_sve_limm_mov@plt>:
   35530:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35534:	ldr	x17, [x16, #616]
   35538:	add	x16, x16, #0x268
   3553c:	br	x17

0000000000035540 <aarch64_ext_inv_limm@plt>:
   35540:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35544:	ldr	x17, [x16, #624]
   35548:	add	x16, x16, #0x270
   3554c:	br	x17

0000000000035550 <aarch64_ext_sve_float_half_two@plt>:
   35550:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35554:	ldr	x17, [x16, #632]
   35558:	add	x16, x16, #0x278
   3555c:	br	x17

0000000000035560 <calloc@plt>:
   35560:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35564:	ldr	x17, [x16, #640]
   35568:	add	x16, x16, #0x280
   3556c:	br	x17

0000000000035570 <bfd_get_bits@plt>:
   35570:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35574:	ldr	x17, [x16, #648]
   35578:	add	x16, x16, #0x288
   3557c:	br	x17

0000000000035580 <aarch64_sve_dupm_mov_immediate_p@plt>:
   35580:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35584:	ldr	x17, [x16, #656]
   35588:	add	x16, x16, #0x290
   3558c:	br	x17

0000000000035590 <aarch64_ins_advsimd_imm_modified@plt>:
   35590:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35594:	ldr	x17, [x16, #664]
   35598:	add	x16, x16, #0x298
   3559c:	br	x17

00000000000355a0 <aarch64_ins_ldst_reglist_r@plt>:
   355a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355a4:	ldr	x17, [x16, #672]
   355a8:	add	x16, x16, #0x2a0
   355ac:	br	x17

00000000000355b0 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   355b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355b4:	ldr	x17, [x16, #680]
   355b8:	add	x16, x16, #0x2a8
   355bc:	br	x17

00000000000355c0 <bsearch@plt>:
   355c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355c4:	ldr	x17, [x16, #688]
   355c8:	add	x16, x16, #0x2b0
   355cc:	br	x17

00000000000355d0 <aarch64_ext_ldst_reglist@plt>:
   355d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355d4:	ldr	x17, [x16, #696]
   355d8:	add	x16, x16, #0x2b8
   355dc:	br	x17

00000000000355e0 <realloc@plt>:
   355e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355e4:	ldr	x17, [x16, #704]
   355e8:	add	x16, x16, #0x2c0
   355ec:	br	x17

00000000000355f0 <aarch64_opcode_lookup@plt>:
   355f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   355f4:	ldr	x17, [x16, #712]
   355f8:	add	x16, x16, #0x2c8
   355fc:	br	x17

0000000000035600 <aarch64_ext_sve_index@plt>:
   35600:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35604:	ldr	x17, [x16, #720]
   35608:	add	x16, x16, #0x2d0
   3560c:	br	x17

0000000000035610 <aarch64_ext_imm_rotate2@plt>:
   35610:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35614:	ldr	x17, [x16, #728]
   35618:	add	x16, x16, #0x2d8
   3561c:	br	x17

0000000000035620 <aarch64_ext_hint@plt>:
   35620:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35624:	ldr	x17, [x16, #736]
   35628:	add	x16, x16, #0x2e0
   3562c:	br	x17

0000000000035630 <aarch64_ins_reglist@plt>:
   35630:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35634:	ldr	x17, [x16, #744]
   35638:	add	x16, x16, #0x2e8
   3563c:	br	x17

0000000000035640 <aarch64_extract_operand@plt>:
   35640:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35644:	ldr	x17, [x16, #752]
   35648:	add	x16, x16, #0x2f0
   3564c:	br	x17

0000000000035650 <aarch64_ins_sve_addr_ri_s4@plt>:
   35650:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35654:	ldr	x17, [x16, #760]
   35658:	add	x16, x16, #0x2f8
   3565c:	br	x17

0000000000035660 <aarch64_is_destructive_by_operands@plt>:
   35660:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35664:	ldr	x17, [x16, #768]
   35668:	add	x16, x16, #0x300
   3566c:	br	x17

0000000000035670 <aarch64_ins_prfop@plt>:
   35670:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35674:	ldr	x17, [x16, #776]
   35678:	add	x16, x16, #0x308
   3567c:	br	x17

0000000000035680 <aarch64_ins_hint@plt>:
   35680:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35684:	ldr	x17, [x16, #784]
   35688:	add	x16, x16, #0x310
   3568c:	br	x17

0000000000035690 <__gmon_start__@plt>:
   35690:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35694:	ldr	x17, [x16, #792]
   35698:	add	x16, x16, #0x318
   3569c:	br	x17

00000000000356a0 <aarch64_ins_sve_float_half_two@plt>:
   356a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356a4:	ldr	x17, [x16, #800]
   356a8:	add	x16, x16, #0x320
   356ac:	br	x17

00000000000356b0 <aarch64_ext_sve_addr_zz_lsl@plt>:
   356b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356b4:	ldr	x17, [x16, #808]
   356b8:	add	x16, x16, #0x328
   356bc:	br	x17

00000000000356c0 <abort@plt>:
   356c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356c4:	ldr	x17, [x16, #816]
   356c8:	add	x16, x16, #0x330
   356cc:	br	x17

00000000000356d0 <aarch64_get_qualifier_esize@plt>:
   356d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356d4:	ldr	x17, [x16, #824]
   356d8:	add	x16, x16, #0x338
   356dc:	br	x17

00000000000356e0 <aarch64_ins_reglane@plt>:
   356e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356e4:	ldr	x17, [x16, #832]
   356e8:	add	x16, x16, #0x340
   356ec:	br	x17

00000000000356f0 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   356f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   356f4:	ldr	x17, [x16, #840]
   356f8:	add	x16, x16, #0x348
   356fc:	br	x17

0000000000035700 <aarch64_ins_imm_rotate2@plt>:
   35700:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35704:	ldr	x17, [x16, #848]
   35708:	add	x16, x16, #0x350
   3570c:	br	x17

0000000000035710 <aarch64_ext_ldst_elemlist@plt>:
   35710:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35714:	ldr	x17, [x16, #856]
   35718:	add	x16, x16, #0x358
   3571c:	br	x17

0000000000035720 <aarch64_ins_fbits@plt>:
   35720:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35724:	ldr	x17, [x16, #864]
   35728:	add	x16, x16, #0x360
   3572c:	br	x17

0000000000035730 <aarch64_ins_imm_half@plt>:
   35730:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35734:	ldr	x17, [x16, #872]
   35738:	add	x16, x16, #0x368
   3573c:	br	x17

0000000000035740 <aarch64_ext_sve_aimm@plt>:
   35740:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35744:	ldr	x17, [x16, #880]
   35748:	add	x16, x16, #0x370
   3574c:	br	x17

0000000000035750 <aarch64_ins_addr_simple@plt>:
   35750:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35754:	ldr	x17, [x16, #888]
   35758:	add	x16, x16, #0x378
   3575c:	br	x17

0000000000035760 <aarch64_get_operand_class@plt>:
   35760:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35764:	ldr	x17, [x16, #896]
   35768:	add	x16, x16, #0x380
   3576c:	br	x17

0000000000035770 <aarch64_ext_imm@plt>:
   35770:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35774:	ldr	x17, [x16, #904]
   35778:	add	x16, x16, #0x388
   3577c:	br	x17

0000000000035780 <aarch64_ins_addr_uimm12@plt>:
   35780:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35784:	ldr	x17, [x16, #912]
   35788:	add	x16, x16, #0x390
   3578c:	br	x17

0000000000035790 <aarch64_stack_pointer_p@plt>:
   35790:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35794:	ldr	x17, [x16, #920]
   35798:	add	x16, x16, #0x398
   3579c:	br	x17

00000000000357a0 <aarch64_ext_reglist@plt>:
   357a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357a4:	ldr	x17, [x16, #928]
   357a8:	add	x16, x16, #0x3a0
   357ac:	br	x17

00000000000357b0 <aarch64_shrink_expanded_imm8@plt>:
   357b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357b4:	ldr	x17, [x16, #936]
   357b8:	add	x16, x16, #0x3a8
   357bc:	br	x17

00000000000357c0 <aarch64_ext_shll_imm@plt>:
   357c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357c4:	ldr	x17, [x16, #944]
   357c8:	add	x16, x16, #0x3b0
   357cc:	br	x17

00000000000357d0 <aarch64_ins_inv_limm@plt>:
   357d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357d4:	ldr	x17, [x16, #952]
   357d8:	add	x16, x16, #0x3b8
   357dc:	br	x17

00000000000357e0 <free@plt>:
   357e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357e4:	ldr	x17, [x16, #960]
   357e8:	add	x16, x16, #0x3c0
   357ec:	br	x17

00000000000357f0 <aarch64_ext_sve_float_zero_one@plt>:
   357f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   357f4:	ldr	x17, [x16, #968]
   357f8:	add	x16, x16, #0x3c8
   357fc:	br	x17

0000000000035800 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   35800:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35804:	ldr	x17, [x16, #976]
   35808:	add	x16, x16, #0x3d0
   3580c:	br	x17

0000000000035810 <aarch64_ext_addr_regoff@plt>:
   35810:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35814:	ldr	x17, [x16, #984]
   35818:	add	x16, x16, #0x3d8
   3581c:	br	x17

0000000000035820 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   35820:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35824:	ldr	x17, [x16, #992]
   35828:	add	x16, x16, #0x3e0
   3582c:	br	x17

0000000000035830 <aarch64_ins_imm@plt>:
   35830:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35834:	ldr	x17, [x16, #1000]
   35838:	add	x16, x16, #0x3e8
   3583c:	br	x17

0000000000035840 <aarch64_ins_addr_offset@plt>:
   35840:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35844:	ldr	x17, [x16, #1008]
   35848:	add	x16, x16, #0x3f0
   3584c:	br	x17

0000000000035850 <aarch64_ext_advsimd_imm_shift@plt>:
   35850:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35854:	ldr	x17, [x16, #1016]
   35858:	add	x16, x16, #0x3f8
   3585c:	br	x17

0000000000035860 <aarch64_ins_sve_shrimm@plt>:
   35860:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35864:	ldr	x17, [x16, #1024]
   35868:	add	x16, x16, #0x400
   3586c:	br	x17

0000000000035870 <aarch64_ins_ldst_elemlist@plt>:
   35870:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35874:	ldr	x17, [x16, #1032]
   35878:	add	x16, x16, #0x408
   3587c:	br	x17

0000000000035880 <init_insn_sequence@plt>:
   35880:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35884:	ldr	x17, [x16, #1040]
   35888:	add	x16, x16, #0x410
   3588c:	br	x17

0000000000035890 <strchr@plt>:
   35890:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35894:	ldr	x17, [x16, #1048]
   35898:	add	x16, x16, #0x418
   3589c:	br	x17

00000000000358a0 <frexp@plt>:
   358a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358a4:	ldr	x17, [x16, #1056]
   358a8:	add	x16, x16, #0x420
   358ac:	br	x17

00000000000358b0 <aarch64_ins_barrier@plt>:
   358b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358b4:	ldr	x17, [x16, #1064]
   358b8:	add	x16, x16, #0x428
   358bc:	br	x17

00000000000358c0 <get_inverted_cond@plt>:
   358c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358c4:	ldr	x17, [x16, #1072]
   358c8:	add	x16, x16, #0x430
   358cc:	br	x17

00000000000358d0 <aarch64_ext_prfop@plt>:
   358d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358d4:	ldr	x17, [x16, #1080]
   358d8:	add	x16, x16, #0x438
   358dc:	br	x17

00000000000358e0 <print_aarch64_disassembler_options@plt>:
   358e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358e4:	ldr	x17, [x16, #1088]
   358e8:	add	x16, x16, #0x440
   358ec:	br	x17

00000000000358f0 <aarch64_ext_addr_simple@plt>:
   358f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   358f4:	ldr	x17, [x16, #1096]
   358f8:	add	x16, x16, #0x448
   358fc:	br	x17

0000000000035900 <aarch64_ins_addr_regoff@plt>:
   35900:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35904:	ldr	x17, [x16, #1104]
   35908:	add	x16, x16, #0x450
   3590c:	br	x17

0000000000035910 <aarch64_ext_regno@plt>:
   35910:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35914:	ldr	x17, [x16, #1112]
   35918:	add	x16, x16, #0x458
   3591c:	br	x17

0000000000035920 <floatformat_to_double@plt>:
   35920:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35924:	ldr	x17, [x16, #1120]
   35928:	add	x16, x16, #0x460
   3592c:	br	x17

0000000000035930 <aarch64_ins_advsimd_imm_shift@plt>:
   35930:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35934:	ldr	x17, [x16, #1128]
   35938:	add	x16, x16, #0x468
   3593c:	br	x17

0000000000035940 <aarch64_get_qualifier_nelem@plt>:
   35940:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35944:	ldr	x17, [x16, #1136]
   35948:	add	x16, x16, #0x470
   3594c:	br	x17

0000000000035950 <aarch64_ext_sve_addr_rr_lsl@plt>:
   35950:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35954:	ldr	x17, [x16, #1144]
   35958:	add	x16, x16, #0x478
   3595c:	br	x17

0000000000035960 <aarch64_ext_sve_addr_ri_s4@plt>:
   35960:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35964:	ldr	x17, [x16, #1152]
   35968:	add	x16, x16, #0x480
   3596c:	br	x17

0000000000035970 <aarch64_ins_sve_aimm@plt>:
   35970:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35974:	ldr	x17, [x16, #1160]
   35978:	add	x16, x16, #0x488
   3597c:	br	x17

0000000000035980 <aarch64_ext_sve_scale@plt>:
   35980:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35984:	ldr	x17, [x16, #1168]
   35988:	add	x16, x16, #0x490
   3598c:	br	x17

0000000000035990 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   35990:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35994:	ldr	x17, [x16, #1176]
   35998:	add	x16, x16, #0x498
   3599c:	br	x17

00000000000359a0 <xexit@plt>:
   359a0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359a4:	ldr	x17, [x16, #1184]
   359a8:	add	x16, x16, #0x4a0
   359ac:	br	x17

00000000000359b0 <aarch64_ext_imm_half@plt>:
   359b0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359b4:	ldr	x17, [x16, #1192]
   359b8:	add	x16, x16, #0x4a8
   359bc:	br	x17

00000000000359c0 <disassembler_options_cmp@plt>:
   359c0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359c4:	ldr	x17, [x16, #1200]
   359c8:	add	x16, x16, #0x4b0
   359cc:	br	x17

00000000000359d0 <aarch64_insert_operand@plt>:
   359d0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359d4:	ldr	x17, [x16, #1208]
   359d8:	add	x16, x16, #0x4b8
   359dc:	br	x17

00000000000359e0 <aarch64_ins_sve_asimm@plt>:
   359e0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359e4:	ldr	x17, [x16, #1216]
   359e8:	add	x16, x16, #0x4c0
   359ec:	br	x17

00000000000359f0 <xmalloc_failed@plt>:
   359f0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   359f4:	ldr	x17, [x16, #1224]
   359f8:	add	x16, x16, #0x4c8
   359fc:	br	x17

0000000000035a00 <aarch64_ins_reg_extended@plt>:
   35a00:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a04:	ldr	x17, [x16, #1232]
   35a08:	add	x16, x16, #0x4d0
   35a0c:	br	x17

0000000000035a10 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   35a10:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a14:	ldr	x17, [x16, #1240]
   35a18:	add	x16, x16, #0x4d8
   35a1c:	br	x17

0000000000035a20 <aarch64_ext_barrier@plt>:
   35a20:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a24:	ldr	x17, [x16, #1248]
   35a28:	add	x16, x16, #0x4e0
   35a2c:	br	x17

0000000000035a30 <dcgettext@plt>:
   35a30:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a34:	ldr	x17, [x16, #1256]
   35a38:	add	x16, x16, #0x4e8
   35a3c:	br	x17

0000000000035a40 <aarch64_ext_sve_float_half_one@plt>:
   35a40:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a44:	ldr	x17, [x16, #1264]
   35a48:	add	x16, x16, #0x4f0
   35a4c:	br	x17

0000000000035a50 <aarch64_sys_ins_reg_has_xt@plt>:
   35a50:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a54:	ldr	x17, [x16, #1272]
   35a58:	add	x16, x16, #0x4f8
   35a5c:	br	x17

0000000000035a60 <_bfd_error_handler@plt>:
   35a60:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a64:	ldr	x17, [x16, #1280]
   35a68:	add	x16, x16, #0x500
   35a6c:	br	x17

0000000000035a70 <aarch64_ins_sve_addr_zi_u5@plt>:
   35a70:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a74:	ldr	x17, [x16, #1288]
   35a78:	add	x16, x16, #0x508
   35a7c:	br	x17

0000000000035a80 <aarch64_ins_sve_shlimm@plt>:
   35a80:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a84:	ldr	x17, [x16, #1296]
   35a88:	add	x16, x16, #0x510
   35a8c:	br	x17

0000000000035a90 <aarch64_wide_constant_p@plt>:
   35a90:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35a94:	ldr	x17, [x16, #1304]
   35a98:	add	x16, x16, #0x518
   35a9c:	br	x17

0000000000035aa0 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35aa0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35aa4:	ldr	x17, [x16, #1312]
   35aa8:	add	x16, x16, #0x520
   35aac:	br	x17

0000000000035ab0 <aarch64_ext_regno_pair@plt>:
   35ab0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35ab4:	ldr	x17, [x16, #1320]
   35ab8:	add	x16, x16, #0x528
   35abc:	br	x17

0000000000035ac0 <aarch64_ext_ft@plt>:
   35ac0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35ac4:	ldr	x17, [x16, #1328]
   35ac8:	add	x16, x16, #0x530
   35acc:	br	x17

0000000000035ad0 <strncpy@plt>:
   35ad0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35ad4:	ldr	x17, [x16, #1336]
   35ad8:	add	x16, x16, #0x538
   35adc:	br	x17

0000000000035ae0 <aarch64_ext_reg_shifted@plt>:
   35ae0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35ae4:	ldr	x17, [x16, #1344]
   35ae8:	add	x16, x16, #0x540
   35aec:	br	x17

0000000000035af0 <aarch64_ins_ldst_reglist@plt>:
   35af0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35af4:	ldr	x17, [x16, #1352]
   35af8:	add	x16, x16, #0x548
   35afc:	br	x17

0000000000035b00 <aarch64_ext_sve_limm_mov@plt>:
   35b00:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b04:	ldr	x17, [x16, #1360]
   35b08:	add	x16, x16, #0x550
   35b0c:	br	x17

0000000000035b10 <__assert_fail@plt>:
   35b10:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b14:	ldr	x17, [x16, #1368]
   35b18:	add	x16, x16, #0x558
   35b1c:	br	x17

0000000000035b20 <aarch64_ins_sve_float_half_one@plt>:
   35b20:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b24:	ldr	x17, [x16, #1376]
   35b28:	add	x16, x16, #0x560
   35b2c:	br	x17

0000000000035b30 <aarch64_find_next_alias_opcode@plt>:
   35b30:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b34:	ldr	x17, [x16, #1384]
   35b38:	add	x16, x16, #0x568
   35b3c:	br	x17

0000000000035b40 <aarch64_ext_imm_rotate1@plt>:
   35b40:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b44:	ldr	x17, [x16, #1392]
   35b48:	add	x16, x16, #0x570
   35b4c:	br	x17

0000000000035b50 <aarch64_sys_reg_deprecated_p@plt>:
   35b50:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b54:	ldr	x17, [x16, #1400]
   35b58:	add	x16, x16, #0x578
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_advsimd_imm_modified@plt>:
   35b60:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b64:	ldr	x17, [x16, #1408]
   35b68:	add	x16, x16, #0x580
   35b6c:	br	x17

0000000000035b70 <aarch64_ext_pstatefield@plt>:
   35b70:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b74:	ldr	x17, [x16, #1416]
   35b78:	add	x16, x16, #0x588
   35b7c:	br	x17

0000000000035b80 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35b80:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b84:	ldr	x17, [x16, #1424]
   35b88:	add	x16, x16, #0x590
   35b8c:	br	x17

0000000000035b90 <aarch64_ext_simd_addr_post@plt>:
   35b90:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35b94:	ldr	x17, [x16, #1432]
   35b98:	add	x16, x16, #0x598
   35b9c:	br	x17

0000000000035ba0 <aarch64_find_next_opcode@plt>:
   35ba0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35ba4:	ldr	x17, [x16, #1440]
   35ba8:	add	x16, x16, #0x5a0
   35bac:	br	x17

0000000000035bb0 <aarch64_ext_sve_addr_ri_u6@plt>:
   35bb0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35bb4:	ldr	x17, [x16, #1448]
   35bb8:	add	x16, x16, #0x5a8
   35bbc:	br	x17

0000000000035bc0 <aarch64_extend_operator_p@plt>:
   35bc0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35bc4:	ldr	x17, [x16, #1456]
   35bc8:	add	x16, x16, #0x5b0
   35bcc:	br	x17

0000000000035bd0 <fprintf@plt>:
   35bd0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35bd4:	ldr	x17, [x16, #1464]
   35bd8:	add	x16, x16, #0x5b8
   35bdc:	br	x17

0000000000035be0 <aarch64_ext_cond@plt>:
   35be0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35be4:	ldr	x17, [x16, #1472]
   35be8:	add	x16, x16, #0x5c0
   35bec:	br	x17

0000000000035bf0 <aarch64_find_alias_opcode@plt>:
   35bf0:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35bf4:	ldr	x17, [x16, #1480]
   35bf8:	add	x16, x16, #0x5c8
   35bfc:	br	x17

0000000000035c00 <aarch64_get_operand_modifier_from_value@plt>:
   35c00:	adrp	x16, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35c04:	ldr	x17, [x16, #1488]
   35c08:	add	x16, x16, #0x5d0
   35c0c:	br	x17

Disassembly of section .text:

0000000000035c10 <buffer_read_memory@@Base-0xd4>:
   35c10:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   35c14:	ldr	x0, [x0, #3928]
   35c18:	cbz	x0, 35c20 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35c1c:	b	35690 <__gmon_start__@plt>
   35c20:	ret
   35c24:	nop
   35c28:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   35c2c:	add	x0, x0, #0x668
   35c30:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   35c34:	add	x1, x1, #0x668
   35c38:	cmp	x1, x0
   35c3c:	b.eq	35c54 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35c40:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   35c44:	ldr	x1, [x1, #3800]
   35c48:	cbz	x1, 35c54 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35c4c:	mov	x16, x1
   35c50:	br	x16
   35c54:	ret
   35c58:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   35c5c:	add	x0, x0, #0x668
   35c60:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   35c64:	add	x1, x1, #0x668
   35c68:	sub	x1, x1, x0
   35c6c:	lsr	x2, x1, #63
   35c70:	add	x1, x2, x1, asr #3
   35c74:	cmp	xzr, x1, asr #1
   35c78:	asr	x1, x1, #1
   35c7c:	b.eq	35c94 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35c80:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   35c84:	ldr	x2, [x2, #4048]
   35c88:	cbz	x2, 35c94 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35c8c:	mov	x16, x2
   35c90:	br	x16
   35c94:	ret
   35c98:	stp	x29, x30, [sp, #-32]!
   35c9c:	mov	x29, sp
   35ca0:	str	x19, [sp, #16]
   35ca4:	adrp	x19, ee000 <aarch64_opcode_table@@Base+0x55a18>
   35ca8:	ldrb	w0, [x19, #1640]
   35cac:	cbnz	w0, 35cd4 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35cb0:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   35cb4:	ldr	x0, [x0, #3824]
   35cb8:	cbz	x0, 35cc8 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35cbc:	adrp	x0, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   35cc0:	ldr	x0, [x0, #1496]
   35cc4:	bl	35250 <__cxa_finalize@plt>
   35cc8:	bl	35c28 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35ccc:	mov	w0, #0x1                   	// #1
   35cd0:	strb	w0, [x19, #1640]
   35cd4:	ldr	x19, [sp, #16]
   35cd8:	ldp	x29, x30, [sp], #32
   35cdc:	ret
   35ce0:	b	35c58 <aarch64_get_operand_modifier_from_value@plt+0x58>

0000000000035ce4 <buffer_read_memory@@Base>:
   35ce4:	ldp	x8, x6, [x3, #152]
   35ce8:	mov	x5, x0
   35cec:	ldr	w4, [x3, #180]
   35cf0:	mov	x0, x1
   35cf4:	mov	w1, w4
   35cf8:	sub	x7, x5, x8
   35cfc:	cmp	x8, x5
   35d00:	udiv	x6, x6, x1
   35d04:	b.hi	35d60 <buffer_read_memory@@Base+0x7c>  // b.pmore
   35d08:	cmp	x7, x6
   35d0c:	b.hi	35d60 <buffer_read_memory@@Base+0x7c>  // b.pmore
   35d10:	udiv	w4, w2, w4
   35d14:	add	x8, x7, x4
   35d18:	cmp	x8, x6
   35d1c:	b.hi	35d60 <buffer_read_memory@@Base+0x7c>  // b.pmore
   35d20:	ldr	x6, [x3, #232]
   35d24:	cbz	x6, 35d3c <buffer_read_memory@@Base+0x58>
   35d28:	cmp	x6, x5
   35d2c:	b.ls	35d60 <buffer_read_memory@@Base+0x7c>  // b.plast
   35d30:	add	x4, x4, x5
   35d34:	cmp	x6, x4
   35d38:	b.cc	35d60 <buffer_read_memory@@Base+0x7c>  // b.lo, b.ul, b.last
   35d3c:	stp	x29, x30, [sp, #-16]!
   35d40:	mov	w2, w2
   35d44:	mov	x29, sp
   35d48:	ldr	x3, [x3, #144]
   35d4c:	madd	x1, x1, x7, x3
   35d50:	bl	35090 <memcpy@plt>
   35d54:	mov	w0, #0x0                   	// #0
   35d58:	ldp	x29, x30, [sp], #16
   35d5c:	ret
   35d60:	mov	w0, #0x5                   	// #5
   35d64:	ret

0000000000035d68 <perror_memory@@Base>:
   35d68:	stp	x29, x30, [sp, #-96]!
   35d6c:	cmp	w0, #0x5
   35d70:	mov	x29, sp
   35d74:	stp	x19, x20, [sp, #16]
   35d78:	mov	w20, w0
   35d7c:	mov	x19, x2
   35d80:	stp	x21, x22, [sp, #32]
   35d84:	adrp	x22, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35d88:	str	x23, [sp, #48]
   35d8c:	b.eq	35dcc <perror_memory@@Base+0x64>  // b.none
   35d90:	ldp	x21, x19, [x19]
   35d94:	mov	w2, #0x5                   	// #5
   35d98:	add	x0, x22, #0xb4a
   35d9c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35da0:	add	x1, x1, #0xb38
   35da4:	bl	35a30 <dcgettext@plt>
   35da8:	mov	w2, w20
   35dac:	mov	x1, x0
   35db0:	mov	x0, x19
   35db4:	blr	x21
   35db8:	ldp	x19, x20, [sp, #16]
   35dbc:	ldp	x21, x22, [sp, #32]
   35dc0:	ldr	x23, [sp, #48]
   35dc4:	ldp	x29, x30, [sp], #96
   35dc8:	ret
   35dcc:	add	x21, sp, #0x40
   35dd0:	mov	x2, x1
   35dd4:	mov	x0, x21
   35dd8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35ddc:	add	x1, x1, #0xb52
   35de0:	bl	35270 <sprintf@plt>
   35de4:	ldp	x23, x19, [x19]
   35de8:	mov	w2, w20
   35dec:	add	x0, x22, #0xb4a
   35df0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35df4:	add	x1, x1, #0xb59
   35df8:	bl	35a30 <dcgettext@plt>
   35dfc:	mov	x2, x21
   35e00:	mov	x1, x0
   35e04:	mov	x0, x19
   35e08:	blr	x23
   35e0c:	b	35db8 <perror_memory@@Base+0x50>

0000000000035e10 <generic_print_address@@Base>:
   35e10:	stp	x29, x30, [sp, #-64]!
   35e14:	mov	x2, x0
   35e18:	mov	x29, sp
   35e1c:	stp	x19, x20, [sp, #16]
   35e20:	mov	x19, x1
   35e24:	add	x20, sp, #0x20
   35e28:	mov	x0, x20
   35e2c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35e30:	add	x1, x1, #0xb52
   35e34:	bl	35270 <sprintf@plt>
   35e38:	ldp	x3, x0, [x19]
   35e3c:	mov	x2, x20
   35e40:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   35e44:	add	x1, x1, #0xb79
   35e48:	blr	x3
   35e4c:	ldp	x19, x20, [sp, #16]
   35e50:	ldp	x29, x30, [sp], #64
   35e54:	ret

0000000000035e58 <generic_symbol_at_address@@Base>:
   35e58:	mov	w0, #0x1                   	// #1
   35e5c:	ret

0000000000035e60 <generic_symbol_is_valid@@Base>:
   35e60:	mov	w0, #0x1                   	// #1
   35e64:	ret

0000000000035e68 <disassembler@@Base>:
   35e68:	mov	w2, w0
   35e6c:	cmp	w0, #0x21
   35e70:	b.eq	35e88 <disassembler@@Base+0x20>  // b.none
   35e74:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   35e78:	cmp	w2, #0x52
   35e7c:	ldr	x0, [x0, #4024]
   35e80:	csel	x0, x0, xzr, eq  // eq = none
   35e84:	ret
   35e88:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   35e8c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   35e90:	cmp	w1, #0x0
   35e94:	ldr	x0, [x0, #3808]
   35e98:	ldr	x1, [x2, #3952]
   35e9c:	csel	x0, x0, x1, ne  // ne = any
   35ea0:	b	35e84 <disassembler@@Base+0x1c>

0000000000035ea4 <disassembler_usage@@Base>:
   35ea4:	stp	x29, x30, [sp, #-32]!
   35ea8:	mov	x29, sp
   35eac:	str	x19, [sp, #16]
   35eb0:	mov	x19, x0
   35eb4:	bl	358e0 <print_aarch64_disassembler_options@plt>
   35eb8:	mov	x0, x19
   35ebc:	ldr	x19, [sp, #16]
   35ec0:	ldp	x29, x30, [sp], #32
   35ec4:	b	354e0 <print_arm_disassembler_options@plt>

0000000000035ec8 <disassemble_init_for_target@@Base>:
   35ec8:	cbz	x0, 35ef4 <disassemble_init_for_target@@Base+0x2c>
   35ecc:	ldr	w1, [x0, #28]
   35ed0:	cmp	w1, #0x21
   35ed4:	b.eq	35ef8 <disassemble_init_for_target@@Base+0x30>  // b.none
   35ed8:	cmp	w1, #0x52
   35edc:	b.ne	35ef4 <disassemble_init_for_target@@Base+0x2c>  // b.any
   35ee0:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   35ee4:	ldr	x1, [x1, #3856]
   35ee8:	str	x1, [x0, #136]
   35eec:	mov	w1, #0x1                   	// #1
   35ef0:	str	w1, [x0, #192]
   35ef4:	ret
   35ef8:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   35efc:	ldr	x1, [x1, #3912]
   35f00:	b	35ee8 <disassemble_init_for_target@@Base+0x20>

0000000000035f04 <disassemble_free_target@@Base>:
   35f04:	ret

0000000000035f08 <remove_whitespace_and_extra_commas@@Base>:
   35f08:	stp	x29, x30, [sp, #-64]!
   35f0c:	mov	x29, sp
   35f10:	stp	x19, x20, [sp, #16]
   35f14:	stp	x21, x22, [sp, #32]
   35f18:	str	x23, [sp, #48]
   35f1c:	cbnz	x0, 35f3c <remove_whitespace_and_extra_commas@@Base+0x34>
   35f20:	mov	x19, #0x0                   	// #0
   35f24:	mov	x0, x19
   35f28:	ldp	x19, x20, [sp, #16]
   35f2c:	ldp	x21, x22, [sp, #32]
   35f30:	ldr	x23, [sp, #48]
   35f34:	ldp	x29, x30, [sp], #64
   35f38:	ret
   35f3c:	mov	x19, x0
   35f40:	bl	350e0 <strlen@plt>
   35f44:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   35f48:	ldr	x1, [x1, #3880]
   35f4c:	cbnz	x0, 35f80 <remove_whitespace_and_extra_commas@@Base+0x78>
   35f50:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   35f54:	mov	x0, x19
   35f58:	mov	w3, #0x2c                  	// #44
   35f5c:	ldr	x1, [x1, #3880]
   35f60:	ldrb	w2, [x0]
   35f64:	cbnz	w2, 35fa4 <remove_whitespace_and_extra_commas@@Base+0x9c>
   35f68:	mov	x20, x19
   35f6c:	ldrb	w0, [x20]
   35f70:	cbnz	w0, 35fb8 <remove_whitespace_and_extra_commas@@Base+0xb0>
   35f74:	ldrb	w0, [x19]
   35f78:	cbnz	w0, 35f24 <remove_whitespace_and_extra_commas@@Base+0x1c>
   35f7c:	b	35f20 <remove_whitespace_and_extra_commas@@Base+0x18>
   35f80:	sub	x0, x0, #0x1
   35f84:	ldrb	w3, [x19, x0]
   35f88:	ldrb	w2, [x19, x0]
   35f8c:	ldrh	w3, [x1, x3, lsl #1]
   35f90:	tbnz	w3, #6, 35f9c <remove_whitespace_and_extra_commas@@Base+0x94>
   35f94:	cmp	w2, #0x2c
   35f98:	b.ne	35f50 <remove_whitespace_and_extra_commas@@Base+0x48>  // b.any
   35f9c:	strb	wzr, [x19, x0]
   35fa0:	b	35f4c <remove_whitespace_and_extra_commas@@Base+0x44>
   35fa4:	ldrh	w2, [x1, w2, sxtw #1]
   35fa8:	tbz	w2, #6, 35fb0 <remove_whitespace_and_extra_commas@@Base+0xa8>
   35fac:	strb	w3, [x0]
   35fb0:	add	x0, x0, #0x1
   35fb4:	b	35f60 <remove_whitespace_and_extra_commas@@Base+0x58>
   35fb8:	cmp	w0, #0x2c
   35fbc:	b.ne	36010 <remove_whitespace_and_extra_commas@@Base+0x108>  // b.any
   35fc0:	ldrb	w0, [x20, #1]
   35fc4:	cmp	w0, #0x2c
   35fc8:	b.eq	35fd4 <remove_whitespace_and_extra_commas@@Base+0xcc>  // b.none
   35fcc:	cmp	x20, x19
   35fd0:	b.ne	36010 <remove_whitespace_and_extra_commas@@Base+0x108>  // b.any
   35fd4:	add	x23, x20, #0x1
   35fd8:	mov	x21, x23
   35fdc:	ldrb	w0, [x21]
   35fe0:	cmp	w0, #0x2c
   35fe4:	b.eq	36018 <remove_whitespace_and_extra_commas@@Base+0x110>  // b.none
   35fe8:	mov	x0, x21
   35fec:	bl	350e0 <strlen@plt>
   35ff0:	cmp	x20, x19
   35ff4:	mov	x22, x0
   35ff8:	csel	x20, x20, x23, eq  // eq = none
   35ffc:	mov	x2, x0
   36000:	mov	x1, x21
   36004:	mov	x0, x20
   36008:	bl	350a0 <memmove@plt>
   3600c:	strb	wzr, [x20, x22]
   36010:	add	x20, x20, #0x1
   36014:	b	35f6c <remove_whitespace_and_extra_commas@@Base+0x64>
   36018:	add	x21, x21, #0x1
   3601c:	b	35fdc <remove_whitespace_and_extra_commas@@Base+0xd4>

0000000000036020 <disassembler_options_cmp@@Base>:
   36020:	mov	x4, #0x0                   	// #0
   36024:	ldrb	w3, [x0, x4]
   36028:	ldrb	w2, [x1, x4]
   3602c:	cmp	w3, #0x2c
   36030:	csel	w3, w3, wzr, ne  // ne = any
   36034:	cmp	w2, #0x2c
   36038:	b.eq	3605c <disassembler_options_cmp@@Base+0x3c>  // b.none
   3603c:	cbnz	w3, 36048 <disassembler_options_cmp@@Base+0x28>
   36040:	neg	w0, w2
   36044:	ret
   36048:	add	x4, x4, #0x1
   3604c:	cmp	w3, w2
   36050:	b.eq	36024 <disassembler_options_cmp@@Base+0x4>  // b.none
   36054:	sub	w0, w3, w2
   36058:	b	36044 <disassembler_options_cmp@@Base+0x24>
   3605c:	mov	w2, #0x0                   	// #0
   36060:	cbnz	w3, 36054 <disassembler_options_cmp@@Base+0x34>
   36064:	b	36040 <disassembler_options_cmp@@Base+0x20>

0000000000036068 <init_disassemble_info@@Base>:
   36068:	stp	x29, x30, [sp, #-48]!
   3606c:	mov	x29, sp
   36070:	stp	x19, x20, [sp, #16]
   36074:	mov	x19, x0
   36078:	mov	x20, x1
   3607c:	add	x0, x0, #0x10
   36080:	mov	w1, #0x0                   	// #0
   36084:	str	x21, [sp, #32]
   36088:	mov	x21, x2
   3608c:	mov	x2, #0xe8                  	// #232
   36090:	bl	354b0 <memset@plt>
   36094:	mov	x0, #0x200000002           	// #8589934594
   36098:	str	x0, [x19, #40]
   3609c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   360a0:	stp	x21, x20, [x19]
   360a4:	ldr	x0, [x0, #3976]
   360a8:	ldr	x21, [sp, #32]
   360ac:	str	x0, [x19, #104]
   360b0:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   360b4:	ldr	x0, [x0, #3816]
   360b8:	str	x0, [x19, #112]
   360bc:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   360c0:	ldr	x0, [x0, #3784]
   360c4:	str	x0, [x19, #120]
   360c8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   360cc:	ldr	x0, [x0, #3936]
   360d0:	str	x0, [x19, #128]
   360d4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   360d8:	ldr	x0, [x0, #3872]
   360dc:	str	x0, [x19, #136]
   360e0:	mov	x0, #0x2                   	// #2
   360e4:	movk	x0, #0x1, lsl #32
   360e8:	str	x0, [x19, #176]
   360ec:	ldp	x19, x20, [sp, #16]
   360f0:	ldp	x29, x30, [sp], #48
   360f4:	ret
   360f8:	stp	x29, x30, [sp, #-32]!
   360fc:	mov	x29, sp
   36100:	str	x19, [sp, #16]
   36104:	mov	x19, x0
   36108:	ldr	x0, [x0, #8]
   3610c:	bl	351b0 <aarch64_num_of_operands@plt>
   36110:	mov	w2, w0
   36114:	sub	x7, x19, #0x1c
   36118:	mov	w0, #0x0                   	// #0
   3611c:	mov	x6, #0x6                   	// #6
   36120:	mov	x8, #0x38                  	// #56
   36124:	sxtw	x4, w0
   36128:	mov	x1, #0x0                   	// #0
   3612c:	mul	x4, x4, x6
   36130:	b	36158 <init_disassemble_info@@Base+0xf0>
   36134:	add	x1, x1, #0x1
   36138:	ldr	x5, [x19, #8]
   3613c:	mul	x9, x1, x8
   36140:	add	x5, x5, x4
   36144:	add	x3, x5, w3, sxtw
   36148:	ldrb	w5, [x3, #56]
   3614c:	ldrb	w3, [x7, x9]
   36150:	cmp	w5, w3
   36154:	b.ne	3616c <init_disassemble_info@@Base+0x104>  // b.any
   36158:	mov	w3, w1
   3615c:	cmp	w2, w1
   36160:	b.gt	36134 <init_disassemble_info@@Base+0xcc>
   36164:	cmp	w1, w2
   36168:	b.eq	3617c <init_disassemble_info@@Base+0x114>  // b.none
   3616c:	add	w0, w0, #0x1
   36170:	cmp	w0, #0xa
   36174:	b.ne	36124 <init_disassemble_info@@Base+0xbc>  // b.any
   36178:	bl	356c0 <abort@plt>
   3617c:	ldr	x19, [sp, #16]
   36180:	ldp	x29, x30, [sp], #32
   36184:	ret
   36188:	ldr	w5, [x0, #4]
   3618c:	sub	w4, w5, #0x1
   36190:	cmp	w4, #0x1e
   36194:	b.hi	361ac <init_disassemble_info@@Base+0x144>  // b.pmore
   36198:	ldr	w4, [x0]
   3619c:	tbnz	w4, #31, 361ac <init_disassemble_info@@Base+0x144>
   361a0:	add	w0, w5, w4
   361a4:	cmp	w0, #0x20
   361a8:	b.le	361d4 <init_disassemble_info@@Base+0x16c>
   361ac:	stp	x29, x30, [sp, #-16]!
   361b0:	adrp	x3, 53000 <xexit@@Base+0x508>
   361b4:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   361b8:	mov	x29, sp
   361bc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   361c0:	add	x3, x3, #0x263
   361c4:	add	x1, x1, #0xb7e
   361c8:	add	x0, x0, #0xb9a
   361cc:	mov	w2, #0x169                 	// #361
   361d0:	bl	35b10 <__assert_fail@plt>
   361d4:	mov	w0, #0xffffffff            	// #-1
   361d8:	lsl	w0, w0, w5
   361dc:	bic	w2, w2, w0
   361e0:	lsl	w2, w2, w4
   361e4:	bic	w2, w2, w3
   361e8:	ldr	w3, [x1]
   361ec:	orr	w2, w3, w2
   361f0:	str	w2, [x1]
   361f4:	ret
   361f8:	stp	x29, x30, [sp, #-64]!
   361fc:	mov	x29, sp
   36200:	stp	x23, x24, [sp, #48]
   36204:	adrp	x24, 97000 <aarch64_operands@@Base+0x16bc0>
   36208:	mov	x23, x1
   3620c:	ldr	x24, [x24, #3944]
   36210:	stp	x19, x20, [sp, #16]
   36214:	mov	w19, w2
   36218:	stp	x21, x22, [sp, #32]
   3621c:	mov	x22, x0
   36220:	mov	w21, #0x4                   	// #4
   36224:	sub	w21, w21, #0x1
   36228:	cmn	w21, #0x1
   3622c:	b.ne	36244 <init_disassemble_info@@Base+0x1dc>  // b.any
   36230:	ldp	x19, x20, [sp, #16]
   36234:	ldp	x21, x22, [sp, #32]
   36238:	ldp	x23, x24, [sp, #48]
   3623c:	ldp	x29, x30, [sp], #64
   36240:	ret
   36244:	add	x0, x22, w21, uxtw #2
   36248:	ldr	w20, [x0, #20]
   3624c:	cbz	w20, 36224 <init_disassemble_info@@Base+0x1bc>
   36250:	add	x20, x24, w20, uxtw #3
   36254:	mov	w2, w19
   36258:	mov	x0, x20
   3625c:	mov	x1, x23
   36260:	mov	w3, #0x0                   	// #0
   36264:	bl	36188 <init_disassemble_info@@Base+0x120>
   36268:	ldr	w0, [x20, #4]
   3626c:	lsr	w19, w19, w0
   36270:	b	36224 <init_disassemble_info@@Base+0x1bc>
   36274:	stp	x29, x30, [sp, #-144]!
   36278:	cmp	w3, #0x5
   3627c:	mov	x29, sp
   36280:	stp	x21, x22, [sp, #32]
   36284:	mov	x22, x0
   36288:	add	x0, sp, #0x90
   3628c:	stp	x0, x0, [sp, #64]
   36290:	add	x0, sp, #0x60
   36294:	stp	x19, x20, [sp, #16]
   36298:	stp	x23, x24, [sp, #48]
   3629c:	str	x0, [sp, #80]
   362a0:	mov	w0, #0xffffffe0            	// #-32
   362a4:	str	w0, [sp, #88]
   362a8:	str	wzr, [sp, #92]
   362ac:	stp	x3, x4, [sp, #104]
   362b0:	stp	x5, x6, [sp, #120]
   362b4:	str	x7, [sp, #136]
   362b8:	b.hi	362f0 <init_disassemble_info@@Base+0x288>  // b.pmore
   362bc:	adrp	x24, 97000 <aarch64_operands@@Base+0x16bc0>
   362c0:	mov	w20, w1
   362c4:	mov	w23, w2
   362c8:	mov	w19, w3
   362cc:	ldr	x24, [x24, #3944]
   362d0:	sub	w19, w19, #0x1
   362d4:	cmn	w19, #0x1
   362d8:	b.ne	36314 <init_disassemble_info@@Base+0x2ac>  // b.any
   362dc:	ldp	x19, x20, [sp, #16]
   362e0:	ldp	x21, x22, [sp, #32]
   362e4:	ldp	x23, x24, [sp, #48]
   362e8:	ldp	x29, x30, [sp], #144
   362ec:	ret
   362f0:	adrp	x3, 53000 <xexit@@Base+0x508>
   362f4:	add	x3, x3, #0x263
   362f8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   362fc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36300:	add	x3, x3, #0xf
   36304:	add	x1, x1, #0xbf7
   36308:	add	x0, x0, #0xc13
   3630c:	mov	w2, #0x31                  	// #49
   36310:	bl	35b10 <__assert_fail@plt>
   36314:	ldr	w0, [sp, #88]
   36318:	ldr	x3, [sp, #64]
   3631c:	tbnz	w0, #31, 36354 <init_disassemble_info@@Base+0x2ec>
   36320:	add	x0, x3, #0xb
   36324:	and	x0, x0, #0xfffffffffffffff8
   36328:	str	x0, [sp, #64]
   3632c:	ldr	w21, [x3]
   36330:	mov	w2, w20
   36334:	mov	x1, x22
   36338:	mov	w3, w23
   3633c:	add	x21, x24, x21, lsl #3
   36340:	mov	x0, x21
   36344:	bl	36188 <init_disassemble_info@@Base+0x120>
   36348:	ldr	w0, [x21, #4]
   3634c:	lsr	w20, w20, w0
   36350:	b	362d0 <init_disassemble_info@@Base+0x268>
   36354:	add	w1, w0, #0x8
   36358:	str	w1, [sp, #88]
   3635c:	cmp	w1, #0x0
   36360:	b.gt	36320 <init_disassemble_info@@Base+0x2b8>
   36364:	ldr	x3, [sp, #72]
   36368:	add	x3, x3, w0, sxtw
   3636c:	b	3632c <init_disassemble_info@@Base+0x2c4>
   36370:	stp	x29, x30, [sp, #-48]!
   36374:	mov	w3, #0x0                   	// #0
   36378:	mov	x29, sp
   3637c:	stp	x21, x22, [sp, #32]
   36380:	mov	x21, x1
   36384:	mov	x1, x2
   36388:	stp	x19, x20, [sp, #16]
   3638c:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   36390:	mov	x20, x2
   36394:	ldr	x19, [x19, #3944]
   36398:	mov	x22, x0
   3639c:	ldr	w2, [x21, #16]
   363a0:	ldr	w0, [x0, #20]
   363a4:	add	x0, x19, x0, lsl #3
   363a8:	bl	36188 <init_disassemble_info@@Base+0x120>
   363ac:	ldr	w2, [x21, #20]
   363b0:	mov	x1, x20
   363b4:	ldr	w0, [x22, #24]
   363b8:	mov	w3, #0x0                   	// #0
   363bc:	add	x0, x19, x0, lsl #3
   363c0:	bl	36188 <init_disassemble_info@@Base+0x120>
   363c4:	ldr	w2, [x21, #40]
   363c8:	mov	x1, x20
   363cc:	add	x0, x19, #0x350
   363d0:	mov	w3, #0x0                   	// #0
   363d4:	bl	36188 <init_disassemble_info@@Base+0x120>
   363d8:	mov	w0, #0x1                   	// #1
   363dc:	ldp	x19, x20, [sp, #16]
   363e0:	ldp	x21, x22, [sp, #32]
   363e4:	ldp	x29, x30, [sp], #48
   363e8:	ret
   363ec:	adrp	x3, 53000 <xexit@@Base+0x508>
   363f0:	add	x3, x3, #0x263
   363f4:	add	x1, x3, #0x1d
   363f8:	stp	x29, x30, [sp, #-32]!
   363fc:	cmp	w0, #0x10
   36400:	mov	x29, sp
   36404:	ldp	x4, x5, [x1]
   36408:	stp	x4, x5, [sp, #16]
   3640c:	b.ls	3642c <init_disassemble_info@@Base+0x3c4>  // b.plast
   36410:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36414:	adrp	x0, 54000 <xexit@@Base+0x1508>
   36418:	add	x3, x3, #0x2d
   3641c:	add	x1, x1, #0xb7e
   36420:	add	x0, x0, #0x679
   36424:	mov	w2, #0x200                 	// #512
   36428:	bl	35b10 <__assert_fail@plt>
   3642c:	sub	w0, w0, #0x1
   36430:	add	x1, sp, #0x10
   36434:	ldrb	w0, [x1, x0]
   36438:	cmp	w0, #0xff
   3643c:	b.ne	3645c <init_disassemble_info@@Base+0x3f4>  // b.any
   36440:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36444:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36448:	add	x3, x3, #0x2d
   3644c:	add	x1, x1, #0xb7e
   36450:	add	x0, x0, #0xc1c
   36454:	mov	w2, #0x203                 	// #515
   36458:	b	36428 <init_disassemble_info@@Base+0x3c0>
   3645c:	ldp	x29, x30, [sp], #32
   36460:	ret
   36464:	stp	x29, x30, [sp, #-64]!
   36468:	mov	x29, sp
   3646c:	stp	x19, x20, [sp, #16]
   36470:	mov	x20, x1
   36474:	mov	x19, x0
   36478:	mov	w0, w3
   3647c:	stp	x21, x22, [sp, #32]
   36480:	mov	x21, x2
   36484:	mov	w22, w4
   36488:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3648c:	and	w1, w0, #0xff
   36490:	cbz	w22, 36498 <init_disassemble_info@@Base+0x430>
   36494:	mvn	x20, x20
   36498:	add	x2, sp, #0x3c
   3649c:	mov	x0, x20
   364a0:	bl	35440 <aarch64_logical_immediate_p@plt>
   364a4:	cbnz	w0, 364cc <init_disassemble_info@@Base+0x464>
   364a8:	adrp	x3, 53000 <xexit@@Base+0x508>
   364ac:	add	x3, x3, #0x263
   364b0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   364b4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   364b8:	add	x3, x3, #0x37
   364bc:	add	x1, x1, #0xbf7
   364c0:	add	x0, x0, #0xc3e
   364c4:	mov	w2, #0x220                 	// #544
   364c8:	bl	35b10 <__assert_fail@plt>
   364cc:	ldp	w6, w5, [x19, #20]
   364d0:	mov	x0, x21
   364d4:	ldr	w4, [x19, #28]
   364d8:	mov	w3, #0x3                   	// #3
   364dc:	ldr	w1, [sp, #60]
   364e0:	mov	w2, #0x0                   	// #0
   364e4:	bl	36274 <init_disassemble_info@@Base+0x20c>
   364e8:	mov	w0, #0x1                   	// #1
   364ec:	ldp	x19, x20, [sp, #16]
   364f0:	ldp	x21, x22, [sp, #32]
   364f4:	ldp	x29, x30, [sp], #64
   364f8:	ret
   364fc:	stp	x29, x30, [sp, #-48]!
   36500:	mov	w3, #0x38                  	// #56
   36504:	mov	x29, sp
   36508:	stp	x19, x20, [sp, #16]
   3650c:	mov	w19, w1
   36510:	mov	x1, #0x18                  	// #24
   36514:	mov	x20, x0
   36518:	str	x21, [sp, #32]
   3651c:	smaddl	x0, w19, w3, x1
   36520:	mov	x21, #0x38                  	// #56
   36524:	smaddl	x1, w2, w3, x1
   36528:	mov	x2, x21
   3652c:	add	x0, x20, x0
   36530:	add	x1, x20, x1
   36534:	bl	35090 <memcpy@plt>
   36538:	sxtw	x0, w19
   3653c:	madd	x0, x0, x21, x20
   36540:	ldr	x21, [sp, #32]
   36544:	str	w19, [x0, #32]
   36548:	ldp	x19, x20, [sp, #16]
   3654c:	ldp	x29, x30, [sp], #48
   36550:	ret
   36554:	stp	x29, x30, [sp, #-32]!
   36558:	mov	x29, sp
   3655c:	str	x19, [sp, #16]
   36560:	mov	x19, x0
   36564:	ldr	w0, [x0, #32]
   36568:	bl	35760 <aarch64_get_operand_class@plt>
   3656c:	cmp	w0, #0x1
   36570:	b.eq	365b0 <init_disassemble_info@@Base+0x548>  // b.none
   36574:	ldr	w0, [x19, #36]
   36578:	bl	35760 <aarch64_get_operand_class@plt>
   3657c:	mov	w1, w0
   36580:	mov	w0, #0x1                   	// #1
   36584:	cmp	w1, w0
   36588:	b.eq	365b4 <init_disassemble_info@@Base+0x54c>  // b.none
   3658c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36590:	add	x3, x3, #0x263
   36594:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36598:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3659c:	add	x3, x3, #0x4a
   365a0:	add	x1, x1, #0xb7e
   365a4:	add	x0, x0, #0x679
   365a8:	mov	w2, #0x1ab                 	// #427
   365ac:	bl	35b10 <__assert_fail@plt>
   365b0:	mov	w0, #0x0                   	// #0
   365b4:	ldr	x19, [sp, #16]
   365b8:	ldp	x29, x30, [sp], #32
   365bc:	ret

00000000000365c0 <aarch64_ins_regno@@Base>:
   365c0:	stp	x29, x30, [sp, #-16]!
   365c4:	mov	x5, x1
   365c8:	mov	x1, x2
   365cc:	mov	x29, sp
   365d0:	ldr	w4, [x0, #20]
   365d4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   365d8:	ldr	w2, [x5, #16]
   365dc:	mov	w3, #0x0                   	// #0
   365e0:	ldr	x0, [x0, #3944]
   365e4:	add	x0, x0, x4, lsl #3
   365e8:	bl	36188 <init_disassemble_info@@Base+0x120>
   365ec:	mov	w0, #0x1                   	// #1
   365f0:	ldp	x29, x30, [sp], #16
   365f4:	ret

00000000000365f8 <aarch64_ins_reglane@@Base>:
   365f8:	stp	x29, x30, [sp, #-64]!
   365fc:	mov	x29, sp
   36600:	stp	x19, x20, [sp, #16]
   36604:	mov	x20, x2
   36608:	mov	x19, x1
   3660c:	ldr	w2, [x1, #16]
   36610:	ldr	x1, [x3, #8]
   36614:	stp	x21, x22, [sp, #32]
   36618:	adrp	x21, 97000 <aarch64_operands@@Base+0x16bc0>
   3661c:	ldr	w0, [x0, #20]
   36620:	mov	x22, x3
   36624:	ldr	w3, [x1, #12]
   36628:	mov	x1, x20
   3662c:	str	x23, [sp, #48]
   36630:	ldr	x23, [x21, #3944]
   36634:	add	x0, x23, x0, lsl #3
   36638:	bl	36188 <init_disassemble_info@@Base+0x120>
   3663c:	ldr	x3, [x22, #8]
   36640:	ldr	w2, [x3, #16]
   36644:	cmp	w2, #0x17
   36648:	ccmp	w2, #0xa, #0x4, ne  // ne = any
   3664c:	b.ne	366f4 <aarch64_ins_reglane@@Base+0xfc>  // b.any
   36650:	ldrb	w2, [x19, #4]
   36654:	ldr	w0, [x19]
   36658:	sub	w2, w2, #0x5
   3665c:	cmp	w0, #0x20
   36660:	b.ne	366d0 <aarch64_ins_reglane@@Base+0xd8>  // b.any
   36664:	ldr	w0, [x3, #32]
   36668:	cmp	w0, #0x1f
   3666c:	b.ne	366d0 <aarch64_ins_reglane@@Base+0xd8>  // b.any
   36670:	ldr	w0, [x19, #8]
   36674:	cmp	w0, #0x1
   36678:	b.eq	366a0 <aarch64_ins_reglane@@Base+0xa8>  // b.none
   3667c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36680:	add	x3, x3, #0x263
   36684:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36688:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3668c:	add	x3, x3, #0x6d
   36690:	add	x1, x1, #0xbf7
   36694:	add	x0, x0, #0xc6f
   36698:	mov	w2, #0x6e                  	// #110
   3669c:	bl	35b10 <__assert_fail@plt>
   366a0:	ldr	x0, [x19, #24]
   366a4:	mov	x1, x20
   366a8:	mov	w3, #0x0                   	// #0
   366ac:	lsl	x2, x0, x2
   366b0:	add	x0, x23, #0x140
   366b4:	bl	36188 <init_disassemble_info@@Base+0x120>
   366b8:	mov	w0, #0x1                   	// #1
   366bc:	ldp	x19, x20, [sp, #16]
   366c0:	ldp	x21, x22, [sp, #32]
   366c4:	ldr	x23, [sp, #48]
   366c8:	ldp	x29, x30, [sp], #64
   366cc:	ret
   366d0:	ldr	x0, [x19, #24]
   366d4:	mov	x1, x20
   366d8:	ldr	x21, [x21, #3944]
   366dc:	mov	w3, #0x0                   	// #0
   366e0:	lsl	x0, x0, #1
   366e4:	orr	x0, x0, #0x1
   366e8:	lsl	x2, x0, x2
   366ec:	add	x0, x21, #0x158
   366f0:	b	366b4 <aarch64_ins_reglane@@Base+0xbc>
   366f4:	ldr	x0, [x19, #24]
   366f8:	cmp	w2, #0x5d
   366fc:	mov	w1, w0
   36700:	b.ne	36784 <aarch64_ins_reglane@@Base+0x18c>  // b.any
   36704:	ldrb	w1, [x19, #4]
   36708:	sub	w1, w1, #0xa
   3670c:	cmp	w1, #0x1
   36710:	b.hi	36760 <aarch64_ins_reglane@@Base+0x168>  // b.pmore
   36714:	cmp	w0, #0x3
   36718:	b.ls	36740 <aarch64_ins_reglane@@Base+0x148>  // b.plast
   3671c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36720:	add	x3, x3, #0x263
   36724:	add	x3, x3, #0x6d
   36728:	mov	w2, #0x87                  	// #135
   3672c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36730:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36734:	add	x1, x1, #0xbf7
   36738:	add	x0, x0, #0xc7e
   3673c:	b	3669c <aarch64_ins_reglane@@Base+0xa4>
   36740:	mov	w1, w0
   36744:	mov	w5, #0x3d                  	// #61
   36748:	mov	w4, #0x3e                  	// #62
   3674c:	mov	w3, #0x2                   	// #2
   36750:	mov	w2, #0x0                   	// #0
   36754:	mov	x0, x20
   36758:	bl	36274 <init_disassemble_info@@Base+0x20c>
   3675c:	b	366b8 <aarch64_ins_reglane@@Base+0xc0>
   36760:	adrp	x3, 53000 <xexit@@Base+0x508>
   36764:	add	x3, x3, #0x263
   36768:	add	x3, x3, #0x6d
   3676c:	mov	w2, #0x8b                  	// #139
   36770:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36774:	adrp	x0, 54000 <xexit@@Base+0x1508>
   36778:	add	x1, x1, #0xbf7
   3677c:	add	x0, x0, #0x679
   36780:	b	3669c <aarch64_ins_reglane@@Base+0xa4>
   36784:	cmp	w2, #0x5b
   36788:	b.ne	367bc <aarch64_ins_reglane@@Base+0x1c4>  // b.any
   3678c:	cmp	w0, #0x3
   36790:	b.ls	367a8 <aarch64_ins_reglane@@Base+0x1b0>  // b.plast
   36794:	adrp	x3, 53000 <xexit@@Base+0x508>
   36798:	add	x3, x3, #0x263
   3679c:	add	x3, x3, #0x6d
   367a0:	mov	w2, #0x92                  	// #146
   367a4:	b	3672c <aarch64_ins_reglane@@Base+0x134>
   367a8:	mov	w2, w0
   367ac:	mov	x1, x20
   367b0:	add	x0, x23, #0x3e0
   367b4:	mov	w3, #0x0                   	// #0
   367b8:	b	366b4 <aarch64_ins_reglane@@Base+0xbc>
   367bc:	ldr	w2, [x3, #20]
   367c0:	cmp	w2, #0x50
   367c4:	b.ne	367cc <aarch64_ins_reglane@@Base+0x1d4>  // b.any
   367c8:	lsl	w1, w0, #1
   367cc:	ldrb	w0, [x19, #4]
   367d0:	cmp	w0, #0x7
   367d4:	b.eq	36834 <aarch64_ins_reglane@@Base+0x23c>  // b.none
   367d8:	cmp	w0, #0x8
   367dc:	b.eq	36864 <aarch64_ins_reglane@@Base+0x26c>  // b.none
   367e0:	cmp	w0, #0x6
   367e4:	b.ne	368a8 <aarch64_ins_reglane@@Base+0x2b0>  // b.any
   367e8:	cmp	w1, #0x7
   367ec:	b.ls	36814 <aarch64_ins_reglane@@Base+0x21c>  // b.plast
   367f0:	adrp	x3, 53000 <xexit@@Base+0x508>
   367f4:	add	x3, x3, #0x263
   367f8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   367fc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36800:	add	x3, x3, #0x6d
   36804:	add	x1, x1, #0xbf7
   36808:	add	x0, x0, #0xc90
   3680c:	mov	w2, #0xa3                  	// #163
   36810:	b	3669c <aarch64_ins_reglane@@Base+0xa4>
   36814:	mov	x0, x20
   36818:	mov	w6, #0x3d                  	// #61
   3681c:	mov	w5, #0x3e                  	// #62
   36820:	mov	w4, #0x3f                  	// #63
   36824:	mov	w3, #0x3                   	// #3
   36828:	mov	w2, #0x0                   	// #0
   3682c:	bl	36274 <init_disassemble_info@@Base+0x20c>
   36830:	b	366b8 <aarch64_ins_reglane@@Base+0xc0>
   36834:	cmp	w1, #0x3
   36838:	b.ls	36850 <aarch64_ins_reglane@@Base+0x258>  // b.plast
   3683c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36840:	add	x3, x3, #0x263
   36844:	add	x3, x3, #0x6d
   36848:	mov	w2, #0xa8                  	// #168
   3684c:	b	3672c <aarch64_ins_reglane@@Base+0x134>
   36850:	mov	w5, #0x3d                  	// #61
   36854:	mov	w4, #0x3e                  	// #62
   36858:	mov	w3, #0x2                   	// #2
   3685c:	mov	w2, #0x0                   	// #0
   36860:	b	36754 <aarch64_ins_reglane@@Base+0x15c>
   36864:	cmp	w1, #0x1
   36868:	b.ls	36890 <aarch64_ins_reglane@@Base+0x298>  // b.plast
   3686c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36870:	add	x3, x3, #0x263
   36874:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36878:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3687c:	add	x3, x3, #0x6d
   36880:	add	x1, x1, #0xbf7
   36884:	add	x0, x0, #0xca2
   36888:	mov	w2, #0xad                  	// #173
   3688c:	b	3669c <aarch64_ins_reglane@@Base+0xa4>
   36890:	ldr	x21, [x21, #3944]
   36894:	mov	w2, w1
   36898:	mov	w3, #0x0                   	// #0
   3689c:	mov	x1, x20
   368a0:	add	x0, x21, #0x1e8
   368a4:	b	366b4 <aarch64_ins_reglane@@Base+0xbc>
   368a8:	adrp	x3, 53000 <xexit@@Base+0x508>
   368ac:	add	x3, x3, #0x263
   368b0:	add	x3, x3, #0x6d
   368b4:	mov	w2, #0xb1                  	// #177
   368b8:	b	36770 <aarch64_ins_reglane@@Base+0x178>

00000000000368bc <aarch64_ins_reglist@@Base>:
   368bc:	stp	x29, x30, [sp, #-48]!
   368c0:	mov	w3, #0x0                   	// #0
   368c4:	mov	x29, sp
   368c8:	stp	x19, x20, [sp, #16]
   368cc:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   368d0:	ldr	w0, [x0, #20]
   368d4:	ldr	x19, [x19, #3944]
   368d8:	mov	x20, x2
   368dc:	ldrb	w2, [x1, #16]
   368e0:	str	x21, [sp, #32]
   368e4:	mov	x21, x1
   368e8:	add	x0, x19, x0, lsl #3
   368ec:	mov	x1, x20
   368f0:	and	w2, w2, #0x1f
   368f4:	bl	36188 <init_disassemble_info@@Base+0x120>
   368f8:	ldrb	w2, [x21, #16]
   368fc:	mov	x1, x20
   36900:	add	x0, x19, #0xd8
   36904:	mov	w3, #0x0                   	// #0
   36908:	ubfx	x2, x2, #5, #3
   3690c:	sub	w2, w2, #0x1
   36910:	bl	36188 <init_disassemble_info@@Base+0x120>
   36914:	mov	w0, #0x1                   	// #1
   36918:	ldp	x19, x20, [sp, #16]
   3691c:	ldr	x21, [sp, #32]
   36920:	ldp	x29, x30, [sp], #48
   36924:	ret

0000000000036928 <aarch64_ins_ldst_reglist@@Base>:
   36928:	stp	x29, x30, [sp, #-48]!
   3692c:	mov	x29, sp
   36930:	ldr	x0, [x3, #8]
   36934:	stp	x19, x20, [sp, #16]
   36938:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   3693c:	stp	x21, x22, [sp, #32]
   36940:	mov	x22, x2
   36944:	ldrb	w2, [x1, #16]
   36948:	ldr	x0, [x0, #120]
   3694c:	mov	x21, x1
   36950:	and	w2, w2, #0x1f
   36954:	mov	x1, x22
   36958:	mov	w3, #0x0                   	// #0
   3695c:	ubfx	w20, w0, #24, #3
   36960:	ldr	x0, [x19, #3944]
   36964:	add	x0, x0, #0x60
   36968:	bl	36188 <init_disassemble_info@@Base+0x120>
   3696c:	sub	w0, w20, #0x1
   36970:	cmp	w0, #0x3
   36974:	b.hi	36a20 <aarch64_ins_ldst_reglist@@Base+0xf8>  // b.pmore
   36978:	adrp	x1, 53000 <xexit@@Base+0x508>
   3697c:	add	x1, x1, #0x1d8
   36980:	ldrb	w0, [x1, w0, uxtw]
   36984:	adr	x1, 36990 <aarch64_ins_ldst_reglist@@Base+0x68>
   36988:	add	x0, x1, w0, sxtb #2
   3698c:	br	x0
   36990:	mov	w2, #0x0                   	// #0
   36994:	ldr	x19, [x19, #3944]
   36998:	mov	x1, x22
   3699c:	mov	w3, #0x0                   	// #0
   369a0:	add	x0, x19, #0xc0
   369a4:	bl	36188 <init_disassemble_info@@Base+0x120>
   369a8:	mov	w0, #0x1                   	// #1
   369ac:	ldp	x19, x20, [sp, #16]
   369b0:	ldp	x21, x22, [sp, #32]
   369b4:	ldp	x29, x30, [sp], #48
   369b8:	ret
   369bc:	ldrb	w4, [x21, #16]
   369c0:	adrp	x3, 53000 <xexit@@Base+0x508>
   369c4:	add	x3, x3, #0x263
   369c8:	ubfx	x4, x4, #5, #3
   369cc:	sub	w4, w4, #0x1
   369d0:	and	w4, w4, #0xff
   369d4:	cmp	w4, #0x3
   369d8:	b.hi	369e8 <aarch64_ins_ldst_reglist@@Base+0xc0>  // b.pmore
   369dc:	add	x4, x3, w4, uxtb
   369e0:	ldrb	w2, [x4, #129]
   369e4:	b	36994 <aarch64_ins_ldst_reglist@@Base+0x6c>
   369e8:	add	x3, x3, #0x85
   369ec:	mov	w2, #0xdd                  	// #221
   369f0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   369f4:	adrp	x0, 54000 <xexit@@Base+0x1508>
   369f8:	add	x1, x1, #0xbf7
   369fc:	add	x0, x0, #0x679
   36a00:	bl	35b10 <__assert_fail@plt>
   36a04:	ldrb	w0, [x21, #16]
   36a08:	mov	w2, #0x8                   	// #8
   36a0c:	and	w0, w0, #0xe0
   36a10:	cmp	w0, #0x80
   36a14:	mov	w0, #0x3                   	// #3
   36a18:	csel	w2, w0, w2, eq  // eq = none
   36a1c:	b	36994 <aarch64_ins_ldst_reglist@@Base+0x6c>
   36a20:	adrp	x3, 53000 <xexit@@Base+0x508>
   36a24:	add	x3, x3, #0x263
   36a28:	add	x3, x3, #0x85
   36a2c:	mov	w2, #0xea                  	// #234
   36a30:	b	369f0 <aarch64_ins_ldst_reglist@@Base+0xc8>
   36a34:	mov	w2, #0x4                   	// #4
   36a38:	b	36994 <aarch64_ins_ldst_reglist@@Base+0x6c>

0000000000036a3c <aarch64_ins_ldst_reglist_r@@Base>:
   36a3c:	stp	x29, x30, [sp, #-48]!
   36a40:	mov	x29, sp
   36a44:	ldr	x0, [x3, #8]
   36a48:	stp	x19, x20, [sp, #16]
   36a4c:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   36a50:	stp	x21, x22, [sp, #32]
   36a54:	mov	x20, x2
   36a58:	ldrb	w2, [x1, #16]
   36a5c:	ldr	x22, [x0, #120]
   36a60:	mov	x21, x1
   36a64:	ldr	x0, [x19, #3944]
   36a68:	and	w2, w2, #0x1f
   36a6c:	mov	x1, x20
   36a70:	ubfx	w22, w22, #24, #3
   36a74:	add	x0, x0, #0x60
   36a78:	mov	w3, #0x0                   	// #0
   36a7c:	bl	36188 <init_disassemble_info@@Base+0x120>
   36a80:	cmp	w22, #0x1
   36a84:	b.ne	36ac0 <aarch64_ins_ldst_reglist_r@@Base+0x84>  // b.any
   36a88:	ldrb	w0, [x21, #16]
   36a8c:	and	w0, w0, #0xe0
   36a90:	cmp	w0, #0x40
   36a94:	cset	w2, eq  // eq = none
   36a98:	ldr	x19, [x19, #3944]
   36a9c:	mov	x1, x20
   36aa0:	mov	w3, #0x0                   	// #0
   36aa4:	add	x0, x19, #0xf8
   36aa8:	bl	36188 <init_disassemble_info@@Base+0x120>
   36aac:	mov	w0, #0x1                   	// #1
   36ab0:	ldp	x19, x20, [sp, #16]
   36ab4:	ldp	x21, x22, [sp, #32]
   36ab8:	ldp	x29, x30, [sp], #48
   36abc:	ret
   36ac0:	mov	w2, #0x0                   	// #0
   36ac4:	b	36a98 <aarch64_ins_ldst_reglist_r@@Base+0x5c>

0000000000036ac8 <aarch64_ins_ldst_elemlist@@Base>:
   36ac8:	stp	x29, x30, [sp, #-64]!
   36acc:	mov	x29, sp
   36ad0:	ldrb	w0, [x1, #17]
   36ad4:	stp	x19, x20, [sp, #16]
   36ad8:	str	x21, [sp, #32]
   36adc:	str	xzr, [sp, #56]
   36ae0:	tbnz	w0, #0, 36b08 <aarch64_ins_ldst_elemlist@@Base+0x40>
   36ae4:	adrp	x3, 53000 <xexit@@Base+0x508>
   36ae8:	add	x3, x3, #0x263
   36aec:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36af0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36af4:	add	x3, x3, #0x9e
   36af8:	add	x1, x1, #0xbf7
   36afc:	add	x0, x0, #0xcb4
   36b00:	mov	w2, #0x117                 	// #279
   36b04:	bl	35b10 <__assert_fail@plt>
   36b08:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   36b0c:	mov	x20, x1
   36b10:	mov	x21, x2
   36b14:	ldrb	w2, [x1, #16]
   36b18:	ldr	x0, [x19, #3944]
   36b1c:	and	w2, w2, #0x1f
   36b20:	mov	x1, x21
   36b24:	mov	w3, #0x0                   	// #0
   36b28:	add	x0, x0, #0x60
   36b2c:	bl	36188 <init_disassemble_info@@Base+0x120>
   36b30:	ldrb	w0, [x20, #4]
   36b34:	sub	w0, w0, #0x5
   36b38:	cmp	w0, #0x3
   36b3c:	b.hi	36bec <aarch64_ins_ldst_elemlist@@Base+0x124>  // b.pmore
   36b40:	adrp	x2, 53000 <xexit@@Base+0x508>
   36b44:	add	x2, x2, #0x1dc
   36b48:	ldr	x1, [x20, #24]
   36b4c:	ldrb	w0, [x2, w0, uxtw]
   36b50:	adr	x2, 36b5c <aarch64_ins_ldst_elemlist@@Base+0x94>
   36b54:	add	x0, x2, w0, sxtb #2
   36b58:	br	x0
   36b5c:	mov	w20, #0x0                   	// #0
   36b60:	mov	x0, x21
   36b64:	mov	w6, #0xb                   	// #11
   36b68:	mov	w5, #0x1f                  	// #31
   36b6c:	mov	w4, #0x9                   	// #9
   36b70:	mov	w3, #0x3                   	// #3
   36b74:	mov	w2, #0x0                   	// #0
   36b78:	bl	36274 <init_disassemble_info@@Base+0x20c>
   36b7c:	ldr	x19, [x19, #3944]
   36b80:	ldr	w0, [x19, #212]
   36b84:	cmp	w0, #0x2
   36b88:	b.le	36ba0 <aarch64_ins_ldst_elemlist@@Base+0xd8>
   36b8c:	ldr	w0, [x19, #208]
   36b90:	add	w0, w0, #0x1
   36b94:	str	w0, [sp, #56]
   36b98:	mov	w0, #0x2                   	// #2
   36b9c:	str	w0, [sp, #60]
   36ba0:	mov	w2, w20
   36ba4:	mov	x1, x21
   36ba8:	add	x0, sp, #0x38
   36bac:	mov	w3, #0x0                   	// #0
   36bb0:	bl	36188 <init_disassemble_info@@Base+0x120>
   36bb4:	mov	w0, #0x1                   	// #1
   36bb8:	ldp	x19, x20, [sp, #16]
   36bbc:	ldr	x21, [sp, #32]
   36bc0:	ldp	x29, x30, [sp], #64
   36bc4:	ret
   36bc8:	lsl	w1, w1, #1
   36bcc:	mov	w20, #0x1                   	// #1
   36bd0:	b	36b60 <aarch64_ins_ldst_elemlist@@Base+0x98>
   36bd4:	lsl	w1, w1, #2
   36bd8:	mov	w20, #0x2                   	// #2
   36bdc:	b	36b60 <aarch64_ins_ldst_elemlist@@Base+0x98>
   36be0:	lsl	x1, x1, #3
   36be4:	orr	w1, w1, #0x1
   36be8:	b	36bd8 <aarch64_ins_ldst_elemlist@@Base+0x110>
   36bec:	adrp	x3, 53000 <xexit@@Base+0x508>
   36bf0:	add	x3, x3, #0x263
   36bf4:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36bf8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   36bfc:	add	x3, x3, #0x9e
   36c00:	add	x1, x1, #0xbf7
   36c04:	add	x0, x0, #0x679
   36c08:	mov	w2, #0x133                 	// #307
   36c0c:	b	36b04 <aarch64_ins_ldst_elemlist@@Base+0x3c>

0000000000036c10 <aarch64_ins_advsimd_imm_shift@@Base>:
   36c10:	stp	x29, x30, [sp, #-48]!
   36c14:	mov	x29, sp
   36c18:	stp	x19, x20, [sp, #16]
   36c1c:	mov	x20, x1
   36c20:	stp	x21, x22, [sp, #32]
   36c24:	mov	x22, x3
   36c28:	mov	x21, x2
   36c2c:	ldrb	w0, [x1, #4]
   36c30:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   36c34:	mov	w19, w0
   36c38:	ldr	x0, [x22, #8]
   36c3c:	ldr	w1, [x0, #16]
   36c40:	cmp	w1, #0xe
   36c44:	b.ne	36c68 <aarch64_ins_advsimd_imm_shift@@Base+0x58>  // b.any
   36c48:	ldr	w3, [x0, #12]
   36c4c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   36c50:	and	w2, w19, #0x1
   36c54:	mov	x1, x21
   36c58:	ldr	x0, [x0, #3944]
   36c5c:	lsr	w19, w19, #1
   36c60:	add	x0, x0, #0x58
   36c64:	bl	36188 <init_disassemble_info@@Base+0x120>
   36c68:	ldr	w0, [x20]
   36c6c:	sub	w1, w0, #0x2b
   36c70:	cmp	w1, #0x1
   36c74:	b.ls	36c9c <aarch64_ins_advsimd_imm_shift@@Base+0x8c>  // b.plast
   36c78:	adrp	x3, 53000 <xexit@@Base+0x508>
   36c7c:	add	x3, x3, #0x263
   36c80:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36c84:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36c88:	add	x3, x3, #0xb8
   36c8c:	add	x1, x1, #0xbf7
   36c90:	add	x0, x0, #0xccc
   36c94:	mov	w2, #0x15a                 	// #346
   36c98:	bl	35b10 <__assert_fail@plt>
   36c9c:	ldr	x2, [x20, #16]
   36ca0:	mov	w6, #0x10                  	// #16
   36ca4:	cmp	w0, #0x2c
   36ca8:	lsl	w6, w6, w19
   36cac:	sub	w6, w6, w2
   36cb0:	mov	w1, #0x8                   	// #8
   36cb4:	lsl	w19, w1, w19
   36cb8:	add	w1, w19, w2
   36cbc:	mov	x0, x21
   36cc0:	csel	w1, w1, w6, ne  // ne = any
   36cc4:	mov	w5, #0x36                  	// #54
   36cc8:	mov	w4, #0x35                  	// #53
   36ccc:	mov	w3, #0x2                   	// #2
   36cd0:	mov	w2, #0x0                   	// #0
   36cd4:	bl	36274 <init_disassemble_info@@Base+0x20c>
   36cd8:	mov	w0, #0x1                   	// #1
   36cdc:	ldp	x19, x20, [sp, #16]
   36ce0:	ldp	x21, x22, [sp, #32]
   36ce4:	ldp	x29, x30, [sp], #48
   36ce8:	ret

0000000000036cec <aarch64_ins_imm@@Base>:
   36cec:	mov	x3, x1
   36cf0:	stp	x29, x30, [sp, #-16]!
   36cf4:	mov	x1, x2
   36cf8:	mov	x29, sp
   36cfc:	ldr	x2, [x3, #16]
   36d00:	ldr	w3, [x0, #16]
   36d04:	tbz	w3, #3, 36d0c <aarch64_ins_imm@@Base+0x20>
   36d08:	asr	x2, x2, #2
   36d0c:	tbz	w3, #9, 36d14 <aarch64_ins_imm@@Base+0x28>
   36d10:	asr	x2, x2, #4
   36d14:	bl	361f8 <init_disassemble_info@@Base+0x190>
   36d18:	mov	w0, #0x1                   	// #1
   36d1c:	ldp	x29, x30, [sp], #16
   36d20:	ret

0000000000036d24 <aarch64_ins_imm_half@@Base>:
   36d24:	stp	x29, x30, [sp, #-32]!
   36d28:	mov	x29, sp
   36d2c:	stp	x19, x20, [sp, #16]
   36d30:	mov	x20, x1
   36d34:	mov	x19, x2
   36d38:	bl	35830 <aarch64_ins_imm@plt>
   36d3c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   36d40:	mov	x1, x19
   36d44:	ldr	x2, [x20, #40]
   36d48:	mov	w3, #0x0                   	// #0
   36d4c:	ldr	x0, [x0, #3944]
   36d50:	ubfx	x2, x2, #4, #32
   36d54:	add	x0, x0, #0x100
   36d58:	bl	36188 <init_disassemble_info@@Base+0x120>
   36d5c:	mov	w0, #0x1                   	// #1
   36d60:	ldp	x19, x20, [sp, #16]
   36d64:	ldp	x29, x30, [sp], #32
   36d68:	ret

0000000000036d6c <aarch64_ins_advsimd_imm_modified@@Base>:
   36d6c:	stp	x29, x30, [sp, #-80]!
   36d70:	mov	x29, sp
   36d74:	ldrb	w0, [x1, #24]
   36d78:	stp	x19, x20, [sp, #16]
   36d7c:	mov	x20, x2
   36d80:	stp	x21, x22, [sp, #32]
   36d84:	ldr	w22, [x1, #32]
   36d88:	str	xzr, [sp, #72]
   36d8c:	ldr	x21, [x1, #16]
   36d90:	ldr	x19, [x1, #40]
   36d94:	str	x23, [sp, #48]
   36d98:	ldrb	w23, [x3, #28]
   36d9c:	tbnz	w0, #0, 36de8 <aarch64_ins_advsimd_imm_modified@@Base+0x7c>
   36da0:	mov	w0, w23
   36da4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   36da8:	and	w0, w0, #0xff
   36dac:	cmp	w0, #0x8
   36db0:	b.ne	36de8 <aarch64_ins_advsimd_imm_modified@@Base+0x7c>  // b.any
   36db4:	mov	x0, x21
   36db8:	bl	357b0 <aarch64_shrink_expanded_imm8@plt>
   36dbc:	sxtw	x21, w0
   36dc0:	tbz	w0, #31, 36de8 <aarch64_ins_advsimd_imm_modified@@Base+0x7c>
   36dc4:	adrp	x3, 53000 <xexit@@Base+0x508>
   36dc8:	add	x3, x3, #0x263
   36dcc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36dd0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36dd4:	add	x3, x3, #0xd6
   36dd8:	add	x1, x1, #0xbf7
   36ddc:	add	x0, x0, #0xd17
   36de0:	mov	w2, #0x1ae                 	// #430
   36de4:	bl	35b10 <__assert_fail@plt>
   36de8:	mov	w1, w21
   36dec:	mov	x0, x20
   36df0:	mov	w5, #0x4                   	// #4
   36df4:	mov	w4, #0x3                   	// #3
   36df8:	mov	w3, #0x2                   	// #2
   36dfc:	mov	w2, #0x0                   	// #0
   36e00:	bl	36274 <init_disassemble_info@@Base+0x20c>
   36e04:	cbz	w22, 36ed0 <aarch64_ins_advsimd_imm_modified@@Base+0x164>
   36e08:	and	w21, w22, #0xfffffffb
   36e0c:	cmp	w21, #0x1
   36e10:	b.eq	36e38 <aarch64_ins_advsimd_imm_modified@@Base+0xcc>  // b.none
   36e14:	adrp	x3, 53000 <xexit@@Base+0x508>
   36e18:	add	x3, x3, #0x263
   36e1c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36e20:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36e24:	add	x3, x3, #0xd6
   36e28:	add	x1, x1, #0xbf7
   36e2c:	add	x0, x0, #0xd25
   36e30:	mov	w2, #0x1b6                 	// #438
   36e34:	b	36de4 <aarch64_ins_advsimd_imm_modified@@Base+0x78>
   36e38:	cmp	w22, #0x5
   36e3c:	b.ne	36f00 <aarch64_ins_advsimd_imm_modified@@Base+0x194>  // b.any
   36e40:	mov	w0, w23
   36e44:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   36e48:	and	w0, w0, #0xff
   36e4c:	cmp	w0, #0x4
   36e50:	ccmp	w0, #0x2, #0x4, ne  // ne = any
   36e54:	b.eq	36e84 <aarch64_ins_advsimd_imm_modified@@Base+0x118>  // b.none
   36e58:	cmp	w0, #0x1
   36e5c:	b.eq	36ed0 <aarch64_ins_advsimd_imm_modified@@Base+0x164>  // b.none
   36e60:	adrp	x3, 53000 <xexit@@Base+0x508>
   36e64:	add	x3, x3, #0x263
   36e68:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36e6c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36e70:	add	x3, x3, #0xd6
   36e74:	add	x1, x1, #0xbf7
   36e78:	add	x0, x0, #0xd58
   36e7c:	mov	w2, #0x1bb                 	// #443
   36e80:	b	36de4 <aarch64_ins_advsimd_imm_modified@@Base+0x78>
   36e84:	cmp	w0, #0x1
   36e88:	b.eq	36ed0 <aarch64_ins_advsimd_imm_modified@@Base+0x164>  // b.none
   36e8c:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   36e90:	asr	w2, w19, #3
   36e94:	cmp	w0, #0x4
   36e98:	ldr	x1, [x1, #3944]
   36e9c:	ldr	w3, [x1, #204]
   36ea0:	b.ne	36ee8 <aarch64_ins_advsimd_imm_modified@@Base+0x17c>  // b.any
   36ea4:	cmp	w3, #0x2
   36ea8:	b.le	36ec0 <aarch64_ins_advsimd_imm_modified@@Base+0x154>
   36eac:	ldr	w0, [x1, #200]
   36eb0:	add	w0, w0, #0x1
   36eb4:	str	w0, [sp, #72]
   36eb8:	mov	w0, #0x2                   	// #2
   36ebc:	str	w0, [sp, #76]
   36ec0:	mov	x1, x20
   36ec4:	add	x0, sp, #0x48
   36ec8:	mov	w3, #0x0                   	// #0
   36ecc:	bl	36188 <init_disassemble_info@@Base+0x120>
   36ed0:	mov	w0, #0x1                   	// #1
   36ed4:	ldp	x19, x20, [sp, #16]
   36ed8:	ldp	x21, x22, [sp, #32]
   36edc:	ldr	x23, [sp, #48]
   36ee0:	ldp	x29, x30, [sp], #80
   36ee4:	ret
   36ee8:	cmp	w3, #0x1
   36eec:	b.le	36ec0 <aarch64_ins_advsimd_imm_modified@@Base+0x154>
   36ef0:	ldr	w0, [x1, #200]
   36ef4:	add	w0, w0, #0x1
   36ef8:	stp	w0, w21, [sp, #72]
   36efc:	b	36ec0 <aarch64_ins_advsimd_imm_modified@@Base+0x154>
   36f00:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   36f04:	asr	w2, w19, #4
   36f08:	ldr	x0, [x0, #3944]
   36f0c:	ldr	w1, [x0, #204]
   36f10:	cmp	w1, #0x0
   36f14:	b.le	36ec0 <aarch64_ins_advsimd_imm_modified@@Base+0x154>
   36f18:	ldr	w0, [x0, #200]
   36f1c:	b	36ef8 <aarch64_ins_advsimd_imm_modified@@Base+0x18c>

0000000000036f20 <aarch64_ins_fpimm@@Base>:
   36f20:	mov	x3, x1
   36f24:	stp	x29, x30, [sp, #-16]!
   36f28:	mov	x1, x2
   36f2c:	mov	x29, sp
   36f30:	ldr	w2, [x3, #16]
   36f34:	bl	361f8 <init_disassemble_info@@Base+0x190>
   36f38:	mov	w0, #0x1                   	// #1
   36f3c:	ldp	x29, x30, [sp], #16
   36f40:	ret

0000000000036f44 <aarch64_ins_imm_rotate1@@Base>:
   36f44:	mov	x4, x1
   36f48:	stp	x29, x30, [sp, #-16]!
   36f4c:	mov	x1, x2
   36f50:	mov	x29, sp
   36f54:	ldr	x4, [x4, #16]
   36f58:	mov	x2, #0xb4                  	// #180
   36f5c:	sub	x4, x4, #0x5a
   36f60:	sdiv	x2, x4, x2
   36f64:	cmp	x2, #0x1
   36f68:	b.ls	36f90 <aarch64_ins_imm_rotate1@@Base+0x4c>  // b.plast
   36f6c:	adrp	x3, 53000 <xexit@@Base+0x508>
   36f70:	add	x3, x3, #0x263
   36f74:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36f78:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36f7c:	add	x3, x3, #0xf7
   36f80:	add	x1, x1, #0xbf7
   36f84:	add	x0, x0, #0xd7f
   36f88:	mov	w2, #0x1e4                 	// #484
   36f8c:	bl	35b10 <__assert_fail@plt>
   36f90:	ldr	x3, [x3, #8]
   36f94:	ldr	w4, [x0, #20]
   36f98:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   36f9c:	ldr	w3, [x3, #12]
   36fa0:	ldr	x0, [x0, #3944]
   36fa4:	add	x0, x0, x4, lsl #3
   36fa8:	bl	36188 <init_disassemble_info@@Base+0x120>
   36fac:	mov	w0, #0x1                   	// #1
   36fb0:	ldp	x29, x30, [sp], #16
   36fb4:	ret

0000000000036fb8 <aarch64_ins_imm_rotate2@@Base>:
   36fb8:	mov	x4, x1
   36fbc:	stp	x29, x30, [sp, #-16]!
   36fc0:	mov	x1, x2
   36fc4:	mov	x29, sp
   36fc8:	ldr	x4, [x4, #16]
   36fcc:	mov	x2, #0x5a                  	// #90
   36fd0:	sdiv	x2, x4, x2
   36fd4:	cmp	x2, #0x3
   36fd8:	b.ls	37000 <aarch64_ins_imm_rotate2@@Base+0x48>  // b.plast
   36fdc:	adrp	x3, 53000 <xexit@@Base+0x508>
   36fe0:	add	x3, x3, #0x263
   36fe4:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36fe8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   36fec:	add	x3, x3, #0x10f
   36ff0:	add	x1, x1, #0xbf7
   36ff4:	add	x0, x0, #0xd88
   36ff8:	mov	w2, #0x1f1                 	// #497
   36ffc:	bl	35b10 <__assert_fail@plt>
   37000:	ldr	x3, [x3, #8]
   37004:	ldr	w4, [x0, #20]
   37008:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3700c:	ldr	w3, [x3, #12]
   37010:	ldr	x0, [x0, #3944]
   37014:	add	x0, x0, x4, lsl #3
   37018:	bl	36188 <init_disassemble_info@@Base+0x120>
   3701c:	mov	w0, #0x1                   	// #1
   37020:	ldp	x29, x30, [sp], #16
   37024:	ret

0000000000037028 <aarch64_ins_fbits@@Base>:
   37028:	mov	x3, x1
   3702c:	stp	x29, x30, [sp, #-16]!
   37030:	mov	x1, x2
   37034:	mov	x29, sp
   37038:	ldr	x2, [x3, #16]
   3703c:	mov	w3, #0x0                   	// #0
   37040:	ldr	w4, [x0, #20]
   37044:	mov	w0, #0x40                  	// #64
   37048:	sub	w2, w0, w2
   3704c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37050:	ldr	x0, [x0, #3944]
   37054:	add	x0, x0, x4, lsl #3
   37058:	bl	36188 <init_disassemble_info@@Base+0x120>
   3705c:	mov	w0, #0x1                   	// #1
   37060:	ldp	x29, x30, [sp], #16
   37064:	ret

0000000000037068 <aarch64_ins_aimm@@Base>:
   37068:	stp	x29, x30, [sp, #-48]!
   3706c:	mov	w3, #0x0                   	// #0
   37070:	mov	x29, sp
   37074:	stp	x21, x22, [sp, #32]
   37078:	mov	x21, x1
   3707c:	mov	x22, x0
   37080:	stp	x19, x20, [sp, #16]
   37084:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37088:	mov	x20, x2
   3708c:	ldr	x0, [x21, #40]
   37090:	mov	x1, x2
   37094:	ldr	x19, [x19, #3944]
   37098:	cmp	x0, #0x0
   3709c:	ldr	w0, [x22, #20]
   370a0:	cset	w2, ne  // ne = any
   370a4:	add	x0, x19, x0, lsl #3
   370a8:	bl	36188 <init_disassemble_info@@Base+0x120>
   370ac:	ldr	w2, [x21, #16]
   370b0:	mov	x1, x20
   370b4:	ldr	w0, [x22, #24]
   370b8:	mov	w3, #0x0                   	// #0
   370bc:	add	x0, x19, x0, lsl #3
   370c0:	bl	36188 <init_disassemble_info@@Base+0x120>
   370c4:	mov	w0, #0x1                   	// #1
   370c8:	ldp	x19, x20, [sp, #16]
   370cc:	ldp	x21, x22, [sp, #32]
   370d0:	ldp	x29, x30, [sp], #48
   370d4:	ret

00000000000370d8 <aarch64_ins_limm@@Base>:
   370d8:	ldr	x4, [x3, #8]
   370dc:	ldrb	w3, [x3, #28]
   370e0:	ldr	x1, [x1, #16]
   370e4:	ldr	w4, [x4, #20]
   370e8:	cmp	w4, #0x2a
   370ec:	cset	w4, eq  // eq = none
   370f0:	b	36464 <init_disassemble_info@@Base+0x3fc>

00000000000370f4 <aarch64_ins_inv_limm@@Base>:
   370f4:	ldrb	w3, [x3, #28]
   370f8:	mov	w4, #0x1                   	// #1
   370fc:	ldr	x1, [x1, #16]
   37100:	b	36464 <init_disassemble_info@@Base+0x3fc>

0000000000037104 <aarch64_ins_ft@@Base>:
   37104:	stp	x29, x30, [sp, #-48]!
   37108:	mov	x29, sp
   3710c:	ldr	w5, [x1, #8]
   37110:	stp	x19, x20, [sp, #16]
   37114:	str	x21, [sp, #32]
   37118:	cbz	w5, 37140 <aarch64_ins_ft@@Base+0x3c>
   3711c:	adrp	x3, 53000 <xexit@@Base+0x508>
   37120:	add	x3, x3, #0x263
   37124:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37128:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3712c:	add	x3, x3, #0x127
   37130:	add	x1, x1, #0xbf7
   37134:	add	x0, x0, #0xd91
   37138:	mov	w2, #0x245                 	// #581
   3713c:	bl	35b10 <__assert_fail@plt>
   37140:	mov	x21, x3
   37144:	mov	x19, x1
   37148:	mov	x20, x2
   3714c:	bl	35240 <aarch64_ins_regno@plt>
   37150:	ldr	x0, [x21, #8]
   37154:	ldr	w0, [x0, #16]
   37158:	sub	w0, w0, #0x3d
   3715c:	cmp	w0, #0x3
   37160:	b.hi	371c8 <aarch64_ins_ft@@Base+0xc4>  // b.pmore
   37164:	ldrb	w2, [x19, #4]
   37168:	sub	w2, w2, #0x7
   3716c:	and	w0, w2, #0xff
   37170:	cmp	w0, #0x2
   37174:	b.hi	371a4 <aarch64_ins_ft@@Base+0xa0>  // b.pmore
   37178:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3717c:	mov	x1, x20
   37180:	mov	w3, #0x0                   	// #0
   37184:	ldr	x0, [x0, #3944]
   37188:	add	x0, x0, #0x128
   3718c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37190:	mov	w0, #0x1                   	// #1
   37194:	ldp	x19, x20, [sp, #16]
   37198:	ldr	x21, [sp, #32]
   3719c:	ldp	x29, x30, [sp], #48
   371a0:	ret
   371a4:	adrp	x3, 53000 <xexit@@Base+0x508>
   371a8:	add	x3, x3, #0x263
   371ac:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   371b0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   371b4:	add	x3, x3, #0x127
   371b8:	add	x1, x1, #0xbf7
   371bc:	add	x0, x0, #0x679
   371c0:	mov	w2, #0x254                 	// #596
   371c4:	b	3713c <aarch64_ins_ft@@Base+0x38>
   371c8:	ldrb	w0, [x19, #4]
   371cc:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   371d0:	mov	w1, w0
   371d4:	mov	w5, #0x22                  	// #34
   371d8:	mov	x0, x20
   371dc:	mov	w4, #0x25                  	// #37
   371e0:	mov	w3, #0x2                   	// #2
   371e4:	mov	w2, #0x0                   	// #0
   371e8:	bl	36274 <init_disassemble_info@@Base+0x20c>
   371ec:	b	37190 <aarch64_ins_ft@@Base+0x8c>

00000000000371f0 <aarch64_ins_addr_simple@@Base>:
   371f0:	stp	x29, x30, [sp, #-16]!
   371f4:	mov	x0, x2
   371f8:	mov	w3, #0x0                   	// #0
   371fc:	mov	x29, sp
   37200:	ldr	w2, [x1, #16]
   37204:	mov	x1, x0
   37208:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3720c:	ldr	x0, [x0, #3944]
   37210:	add	x0, x0, #0x70
   37214:	bl	36188 <init_disassemble_info@@Base+0x120>
   37218:	mov	w0, #0x1                   	// #1
   3721c:	ldp	x29, x30, [sp], #16
   37220:	ret

0000000000037224 <aarch64_ins_addr_regoff@@Base>:
   37224:	stp	x29, x30, [sp, #-64]!
   37228:	mov	w3, #0x0                   	// #0
   3722c:	mov	x29, sp
   37230:	stp	x19, x20, [sp, #16]
   37234:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37238:	mov	x19, x1
   3723c:	stp	x21, x22, [sp, #32]
   37240:	mov	x21, x2
   37244:	ldr	w2, [x1, #16]
   37248:	ldr	x22, [x20, #3944]
   3724c:	str	x23, [sp, #48]
   37250:	ldr	w23, [x1, #32]
   37254:	mov	x1, x21
   37258:	add	x0, x22, #0x70
   3725c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37260:	ldr	w2, [x19, #20]
   37264:	mov	x1, x21
   37268:	mov	w3, #0x0                   	// #0
   3726c:	add	x0, x22, #0xe0
   37270:	bl	36188 <init_disassemble_info@@Base+0x120>
   37274:	cmp	w23, #0x5
   37278:	mov	w0, #0x9                   	// #9
   3727c:	csel	w0, w23, w0, ne  // ne = any
   37280:	bl	35470 <aarch64_get_operand_modifier_value@plt>
   37284:	mov	w2, w0
   37288:	mov	x1, x21
   3728c:	add	x0, x22, #0xf0
   37290:	mov	w3, #0x0                   	// #0
   37294:	bl	36188 <init_disassemble_info@@Base+0x120>
   37298:	ldrb	w0, [x19, #4]
   3729c:	cmp	w0, #0x5
   372a0:	b.eq	372dc <aarch64_ins_addr_regoff@@Base+0xb8>  // b.none
   372a4:	ldr	x0, [x19, #40]
   372a8:	cmp	x0, #0x0
   372ac:	cset	w2, ne  // ne = any
   372b0:	ldr	x20, [x20, #3944]
   372b4:	mov	x1, x21
   372b8:	mov	w3, #0x0                   	// #0
   372bc:	add	x0, x20, #0xf8
   372c0:	bl	36188 <init_disassemble_info@@Base+0x120>
   372c4:	mov	w0, #0x1                   	// #1
   372c8:	ldp	x19, x20, [sp, #16]
   372cc:	ldp	x21, x22, [sp, #32]
   372d0:	ldr	x23, [sp, #48]
   372d4:	ldp	x29, x30, [sp], #64
   372d8:	ret
   372dc:	ldrb	w0, [x19, #36]
   372e0:	and	w0, w0, #0x3
   372e4:	cmp	w0, #0x3
   372e8:	cset	w2, eq  // eq = none
   372ec:	b	372b0 <aarch64_ins_addr_regoff@@Base+0x8c>

00000000000372f0 <aarch64_ins_addr_offset@@Base>:
   372f0:	stp	x29, x30, [sp, #-48]!
   372f4:	mov	w3, #0x0                   	// #0
   372f8:	mov	x29, sp
   372fc:	stp	x19, x20, [sp, #16]
   37300:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37304:	mov	x20, x2
   37308:	ldr	x19, [x19, #3944]
   3730c:	stp	x21, x22, [sp, #32]
   37310:	ldr	w2, [x1, #16]
   37314:	mov	x21, x0
   37318:	ldr	w0, [x0, #20]
   3731c:	mov	x22, x1
   37320:	mov	x1, x20
   37324:	add	x0, x19, x0, lsl #3
   37328:	bl	36188 <init_disassemble_info@@Base+0x120>
   3732c:	ldr	w2, [x22, #20]
   37330:	mov	x1, x20
   37334:	ldr	w0, [x21, #24]
   37338:	mov	w3, #0x0                   	// #0
   3733c:	add	x0, x19, x0, lsl #3
   37340:	bl	36188 <init_disassemble_info@@Base+0x120>
   37344:	ldrb	w0, [x22, #28]
   37348:	tbz	w0, #1, 37394 <aarch64_ins_addr_offset@@Base+0xa4>
   3734c:	and	w0, w0, #0xc
   37350:	cmp	w0, #0x4
   37354:	b.eq	3737c <aarch64_ins_addr_offset@@Base+0x8c>  // b.none
   37358:	adrp	x3, 53000 <xexit@@Base+0x508>
   3735c:	add	x3, x3, #0x263
   37360:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37364:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37368:	add	x3, x3, #0x136
   3736c:	add	x1, x1, #0xbf7
   37370:	add	x0, x0, #0xda0
   37374:	mov	w2, #0x2a2                 	// #674
   37378:	bl	35b10 <__assert_fail@plt>
   3737c:	ldr	w0, [x21, #28]
   37380:	mov	x1, x20
   37384:	mov	w3, #0x0                   	// #0
   37388:	mov	w2, #0x1                   	// #1
   3738c:	add	x0, x19, x0, lsl #3
   37390:	bl	36188 <init_disassemble_info@@Base+0x120>
   37394:	mov	w0, #0x1                   	// #1
   37398:	ldp	x19, x20, [sp, #16]
   3739c:	ldp	x21, x22, [sp, #32]
   373a0:	ldp	x29, x30, [sp], #48
   373a4:	ret

00000000000373a8 <aarch64_ins_addr_simm@@Base>:
   373a8:	stp	x29, x30, [sp, #-64]!
   373ac:	mov	x29, sp
   373b0:	stp	x19, x20, [sp, #16]
   373b4:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   373b8:	mov	x20, x1
   373bc:	stp	x21, x22, [sp, #32]
   373c0:	mov	x21, x2
   373c4:	ldr	w2, [x1, #16]
   373c8:	mov	x22, x0
   373cc:	mov	x1, x21
   373d0:	ldr	x0, [x19, #3944]
   373d4:	stp	x23, x24, [sp, #48]
   373d8:	mov	x23, x3
   373dc:	add	x0, x0, #0x70
   373e0:	mov	w3, #0x0                   	// #0
   373e4:	bl	36188 <init_disassemble_info@@Base+0x120>
   373e8:	ldr	w24, [x20, #20]
   373ec:	ldr	w0, [x22, #20]
   373f0:	cmp	w0, #0x2c
   373f4:	b.eq	37404 <aarch64_ins_addr_simm@@Base+0x5c>  // b.none
   373f8:	ldrb	w0, [x20, #4]
   373fc:	cmp	w0, #0x19
   37400:	b.ne	37418 <aarch64_ins_addr_simm@@Base+0x70>  // b.any
   37404:	ldrb	w0, [x20, #4]
   37408:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3740c:	and	w0, w0, #0xff
   37410:	bl	363ec <init_disassemble_info@@Base+0x384>
   37414:	asr	w24, w24, w0
   37418:	ldr	x19, [x19, #3944]
   3741c:	mov	x1, x21
   37420:	ldr	w0, [x22, #20]
   37424:	mov	w2, w24
   37428:	mov	w3, #0x0                   	// #0
   3742c:	add	x0, x19, x0, lsl #3
   37430:	bl	36188 <init_disassemble_info@@Base+0x120>
   37434:	ldrb	w1, [x20, #28]
   37438:	tbz	w1, #1, 374d4 <aarch64_ins_addr_simm@@Base+0x12c>
   3743c:	ldr	x0, [x23, #8]
   37440:	ldr	w0, [x0, #16]
   37444:	sub	w2, w0, #0x3d
   37448:	cmp	w2, #0x1
   3744c:	b.ls	3745c <aarch64_ins_addr_simm@@Base+0xb4>  // b.plast
   37450:	sub	w0, w0, #0x3a
   37454:	cmp	w0, #0x1
   37458:	b.hi	37480 <aarch64_ins_addr_simm@@Base+0xd8>  // b.pmore
   3745c:	adrp	x3, 53000 <xexit@@Base+0x508>
   37460:	add	x3, x3, #0x263
   37464:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37468:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3746c:	add	x3, x3, #0x14e
   37470:	add	x1, x1, #0xbf7
   37474:	add	x0, x0, #0xdd2
   37478:	mov	w2, #0x2be                 	// #702
   3747c:	bl	35b10 <__assert_fail@plt>
   37480:	mov	w0, w1
   37484:	ubfx	x2, x0, #2, #1
   37488:	ubfx	x0, x0, #3, #1
   3748c:	cmp	w2, w0
   37490:	b.ne	374b8 <aarch64_ins_addr_simm@@Base+0x110>  // b.any
   37494:	adrp	x3, 53000 <xexit@@Base+0x508>
   37498:	add	x3, x3, #0x263
   3749c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   374a0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   374a4:	add	x3, x3, #0x14e
   374a8:	add	x1, x1, #0xbf7
   374ac:	add	x0, x0, #0xe72
   374b0:	mov	w2, #0x2c2                 	// #706
   374b4:	b	3747c <aarch64_ins_addr_simm@@Base+0xd4>
   374b8:	tbz	w1, #2, 374d4 <aarch64_ins_addr_simm@@Base+0x12c>
   374bc:	ldr	w0, [x22, #24]
   374c0:	mov	x1, x21
   374c4:	mov	w3, #0x0                   	// #0
   374c8:	mov	w2, #0x1                   	// #1
   374cc:	add	x0, x19, x0, lsl #3
   374d0:	bl	36188 <init_disassemble_info@@Base+0x120>
   374d4:	mov	w0, #0x1                   	// #1
   374d8:	ldp	x19, x20, [sp, #16]
   374dc:	ldp	x21, x22, [sp, #32]
   374e0:	ldp	x23, x24, [sp, #48]
   374e4:	ldp	x29, x30, [sp], #64
   374e8:	ret

00000000000374ec <aarch64_ins_addr_simm10@@Base>:
   374ec:	stp	x29, x30, [sp, #-64]!
   374f0:	mov	w3, #0x0                   	// #0
   374f4:	mov	x29, sp
   374f8:	stp	x19, x20, [sp, #16]
   374fc:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37500:	mov	x20, x2
   37504:	ldr	x19, [x19, #3944]
   37508:	stp	x21, x22, [sp, #32]
   3750c:	ldr	w2, [x1, #16]
   37510:	mov	x21, x0
   37514:	ldr	w0, [x0, #20]
   37518:	mov	x22, x1
   3751c:	mov	x1, x20
   37520:	str	x23, [sp, #48]
   37524:	add	x0, x19, x0, lsl #3
   37528:	bl	36188 <init_disassemble_info@@Base+0x120>
   3752c:	ldr	w0, [x21, #24]
   37530:	mov	x1, x20
   37534:	ldr	w23, [x22, #20]
   37538:	mov	w3, #0x0                   	// #0
   3753c:	add	x0, x19, x0, lsl #3
   37540:	asr	w2, w23, #12
   37544:	bl	36188 <init_disassemble_info@@Base+0x120>
   37548:	ldr	w0, [x21, #28]
   3754c:	asr	w2, w23, #3
   37550:	mov	x1, x20
   37554:	mov	w3, #0x0                   	// #0
   37558:	add	x0, x19, x0, lsl #3
   3755c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37560:	ldrb	w0, [x22, #28]
   37564:	tbz	w0, #1, 375b0 <aarch64_ins_addr_simm10@@Base+0xc4>
   37568:	and	w0, w0, #0xc
   3756c:	cmp	w0, #0x4
   37570:	b.eq	37598 <aarch64_ins_addr_simm10@@Base+0xac>  // b.none
   37574:	adrp	x3, 53000 <xexit@@Base+0x508>
   37578:	add	x3, x3, #0x263
   3757c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37580:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37584:	add	x3, x3, #0x164
   37588:	add	x1, x1, #0xbf7
   3758c:	add	x0, x0, #0xda0
   37590:	mov	w2, #0x2dd                 	// #733
   37594:	bl	35b10 <__assert_fail@plt>
   37598:	ldr	w0, [x21, #32]
   3759c:	mov	x1, x20
   375a0:	mov	w3, #0x0                   	// #0
   375a4:	mov	w2, #0x1                   	// #1
   375a8:	add	x0, x19, x0, lsl #3
   375ac:	bl	36188 <init_disassemble_info@@Base+0x120>
   375b0:	mov	w0, #0x1                   	// #1
   375b4:	ldp	x19, x20, [sp, #16]
   375b8:	ldp	x21, x22, [sp, #32]
   375bc:	ldr	x23, [sp, #48]
   375c0:	ldp	x29, x30, [sp], #64
   375c4:	ret

00000000000375c8 <aarch64_ins_addr_uimm12@@Base>:
   375c8:	stp	x29, x30, [sp, #-64]!
   375cc:	mov	x29, sp
   375d0:	stp	x19, x20, [sp, #16]
   375d4:	mov	x19, x1
   375d8:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   375dc:	stp	x21, x22, [sp, #32]
   375e0:	mov	x22, x0
   375e4:	mov	x21, x2
   375e8:	ldrb	w0, [x1, #4]
   375ec:	str	x23, [sp, #48]
   375f0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   375f4:	and	w0, w0, #0xff
   375f8:	bl	363ec <init_disassemble_info@@Base+0x384>
   375fc:	mov	w23, w0
   37600:	ldr	x20, [x20, #3944]
   37604:	mov	x1, x21
   37608:	ldr	w2, [x19, #16]
   3760c:	mov	w3, #0x0                   	// #0
   37610:	ldr	w0, [x22, #20]
   37614:	add	x0, x20, x0, lsl #3
   37618:	bl	36188 <init_disassemble_info@@Base+0x120>
   3761c:	ldr	w2, [x19, #20]
   37620:	mov	x1, x21
   37624:	ldr	w0, [x22, #24]
   37628:	mov	w3, #0x0                   	// #0
   3762c:	asr	w2, w2, w23
   37630:	add	x0, x20, x0, lsl #3
   37634:	bl	36188 <init_disassemble_info@@Base+0x120>
   37638:	mov	w0, #0x1                   	// #1
   3763c:	ldp	x19, x20, [sp, #16]
   37640:	ldp	x21, x22, [sp, #32]
   37644:	ldr	x23, [sp, #48]
   37648:	ldp	x29, x30, [sp], #64
   3764c:	ret

0000000000037650 <aarch64_ins_simd_addr_post@@Base>:
   37650:	stp	x29, x30, [sp, #-48]!
   37654:	mov	w3, #0x0                   	// #0
   37658:	mov	x29, sp
   3765c:	stp	x19, x20, [sp, #16]
   37660:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37664:	mov	x20, x2
   37668:	ldr	w2, [x1, #16]
   3766c:	ldr	x19, [x19, #3944]
   37670:	str	x21, [sp, #32]
   37674:	mov	x21, x1
   37678:	mov	x1, x20
   3767c:	add	x0, x19, #0x70
   37680:	bl	36188 <init_disassemble_info@@Base+0x120>
   37684:	mov	w3, #0x0                   	// #0
   37688:	ldr	w0, [x21, #24]
   3768c:	cbz	w0, 376b4 <aarch64_ins_simd_addr_post@@Base+0x64>
   37690:	ldr	w2, [x21, #20]
   37694:	mov	x1, x20
   37698:	add	x0, x19, #0xe0
   3769c:	bl	36188 <init_disassemble_info@@Base+0x120>
   376a0:	mov	w0, #0x1                   	// #1
   376a4:	ldp	x19, x20, [sp, #16]
   376a8:	ldr	x21, [sp, #32]
   376ac:	ldp	x29, x30, [sp], #48
   376b0:	ret
   376b4:	mov	w2, #0x1f                  	// #31
   376b8:	b	37694 <aarch64_ins_simd_addr_post@@Base+0x44>

00000000000376bc <aarch64_ins_cond@@Base>:
   376bc:	stp	x29, x30, [sp, #-16]!
   376c0:	mov	x0, x2
   376c4:	mov	w3, #0x0                   	// #0
   376c8:	mov	x29, sp
   376cc:	ldr	x1, [x1, #16]
   376d0:	ldr	w2, [x1, #32]
   376d4:	mov	x1, x0
   376d8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   376dc:	ldr	x0, [x0, #3944]
   376e0:	add	x0, x0, #0xb8
   376e4:	bl	36188 <init_disassemble_info@@Base+0x120>
   376e8:	mov	w0, #0x1                   	// #1
   376ec:	ldp	x29, x30, [sp], #16
   376f0:	ret

00000000000376f4 <aarch64_ins_sysreg@@Base>:
   376f4:	sub	sp, sp, #0x40
   376f8:	stp	x29, x30, [sp, #16]
   376fc:	add	x29, sp, #0x10
   37700:	ldr	x0, [x3, #8]
   37704:	stp	x19, x20, [sp, #32]
   37708:	mov	x20, x1
   3770c:	stp	x21, x22, [sp, #48]
   37710:	mov	x22, x2
   37714:	ldr	w1, [x0, #16]
   37718:	mov	x21, x3
   3771c:	cmp	w1, #0x46
   37720:	b.ne	37788 <aarch64_ins_sysreg@@Base+0x94>  // b.any
   37724:	ldr	x1, [x0, #120]
   37728:	mov	x3, #0x20000000            	// #536870912
   3772c:	ldr	w0, [x20, #20]
   37730:	mov	x19, x4
   37734:	and	x1, x1, #0x60000000
   37738:	ands	w0, w0, #0x18
   3773c:	cset	w2, ne  // ne = any
   37740:	cmp	w2, #0x0
   37744:	ccmp	x1, x3, #0x0, ne  // ne = any
   37748:	b.ne	377d0 <aarch64_ins_sysreg@@Base+0xdc>  // b.any
   3774c:	cmp	w0, #0x8
   37750:	b.eq	37788 <aarch64_ins_sysreg@@Base+0x94>  // b.none
   37754:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37758:	add	x1, x1, #0xe9a
   3775c:	mov	w0, #0x2                   	// #2
   37760:	mov	w2, #0x5                   	// #5
   37764:	str	w0, [x4]
   37768:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3776c:	add	x0, x0, #0xb4a
   37770:	bl	35a30 <dcgettext@plt>
   37774:	str	x0, [x19, #8]
   37778:	ldr	w0, [x20, #8]
   3777c:	str	w0, [x19, #4]
   37780:	mov	w0, #0x1                   	// #1
   37784:	str	w0, [x19, #28]
   37788:	ldr	x0, [x21, #8]
   3778c:	mov	w1, #0x15                  	// #21
   37790:	str	w1, [sp]
   37794:	mov	w7, #0x14                  	// #20
   37798:	mov	w6, #0x13                  	// #19
   3779c:	mov	w5, #0x12                  	// #18
   377a0:	ldr	w2, [x0, #12]
   377a4:	mov	w4, #0x11                  	// #17
   377a8:	ldr	w1, [x20, #16]
   377ac:	mov	x0, x22
   377b0:	mov	w3, #0x5                   	// #5
   377b4:	bl	36274 <init_disassemble_info@@Base+0x20c>
   377b8:	mov	w0, #0x1                   	// #1
   377bc:	ldp	x29, x30, [sp, #16]
   377c0:	ldp	x19, x20, [sp, #32]
   377c4:	ldp	x21, x22, [sp, #48]
   377c8:	add	sp, sp, #0x40
   377cc:	ret
   377d0:	cmp	w2, #0x0
   377d4:	mov	x2, #0x40000000            	// #1073741824
   377d8:	ccmp	x1, x2, #0x0, ne  // ne = any
   377dc:	b.ne	37788 <aarch64_ins_sysreg@@Base+0x94>  // b.any
   377e0:	cmp	w0, #0x10
   377e4:	b.eq	37788 <aarch64_ins_sysreg@@Base+0x94>  // b.none
   377e8:	mov	w0, #0x2                   	// #2
   377ec:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   377f0:	mov	w2, #0x5                   	// #5
   377f4:	add	x1, x1, #0xec1
   377f8:	str	w0, [x4]
   377fc:	b	37768 <aarch64_ins_sysreg@@Base+0x74>

0000000000037800 <aarch64_ins_pstatefield@@Base>:
   37800:	stp	x29, x30, [sp, #-16]!
   37804:	mov	x0, x2
   37808:	mov	w5, #0x14                  	// #20
   3780c:	mov	x29, sp
   37810:	ldr	x2, [x3, #8]
   37814:	mov	w4, #0x11                  	// #17
   37818:	ldr	w1, [x1, #16]
   3781c:	mov	w3, #0x2                   	// #2
   37820:	ldr	w2, [x2, #12]
   37824:	bl	36274 <init_disassemble_info@@Base+0x20c>
   37828:	mov	w0, #0x1                   	// #1
   3782c:	ldp	x29, x30, [sp], #16
   37830:	ret

0000000000037834 <aarch64_ins_sysins_op@@Base>:
   37834:	stp	x29, x30, [sp, #-16]!
   37838:	mov	x0, x2
   3783c:	mov	w7, #0x14                  	// #20
   37840:	mov	x29, sp
   37844:	ldr	x2, [x3, #8]
   37848:	mov	w6, #0x13                  	// #19
   3784c:	ldr	x1, [x1, #16]
   37850:	mov	w5, #0x12                  	// #18
   37854:	ldr	w2, [x2, #12]
   37858:	mov	w4, #0x11                  	// #17
   3785c:	mov	w3, #0x4                   	// #4
   37860:	ldr	w1, [x1, #8]
   37864:	bl	36274 <init_disassemble_info@@Base+0x20c>
   37868:	mov	w0, #0x1                   	// #1
   3786c:	ldp	x29, x30, [sp], #16
   37870:	ret

0000000000037874 <aarch64_ins_barrier@@Base>:
   37874:	stp	x29, x30, [sp, #-16]!
   37878:	mov	x0, x2
   3787c:	mov	w3, #0x0                   	// #0
   37880:	mov	x29, sp
   37884:	ldr	x1, [x1, #16]
   37888:	ldr	w2, [x1, #8]
   3788c:	mov	x1, x0
   37890:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37894:	ldr	x0, [x0, #3944]
   37898:	add	x0, x0, #0x90
   3789c:	bl	36188 <init_disassemble_info@@Base+0x120>
   378a0:	mov	w0, #0x1                   	// #1
   378a4:	ldp	x29, x30, [sp], #16
   378a8:	ret

00000000000378ac <aarch64_ins_prfop@@Base>:
   378ac:	stp	x29, x30, [sp, #-16]!
   378b0:	mov	x0, x2
   378b4:	mov	w3, #0x0                   	// #0
   378b8:	mov	x29, sp
   378bc:	ldr	x1, [x1, #16]
   378c0:	ldr	w2, [x1, #8]
   378c4:	mov	x1, x0
   378c8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   378cc:	ldr	x0, [x0, #3944]
   378d0:	add	x0, x0, #0x60
   378d4:	bl	36188 <init_disassemble_info@@Base+0x120>
   378d8:	mov	w0, #0x1                   	// #1
   378dc:	ldp	x29, x30, [sp], #16
   378e0:	ret

00000000000378e4 <aarch64_ins_hint@@Base>:
   378e4:	stp	x29, x30, [sp, #-16]!
   378e8:	mov	x0, x2
   378ec:	mov	w5, #0x12                  	// #18
   378f0:	mov	x29, sp
   378f4:	ldr	x1, [x1, #16]
   378f8:	mov	w4, #0x11                  	// #17
   378fc:	mov	w3, #0x2                   	// #2
   37900:	mov	w2, #0x0                   	// #0
   37904:	ldr	w1, [x1, #8]
   37908:	bl	36274 <init_disassemble_info@@Base+0x20c>
   3790c:	mov	w0, #0x1                   	// #1
   37910:	ldp	x29, x30, [sp], #16
   37914:	ret

0000000000037918 <aarch64_ins_reg_extended@@Base>:
   37918:	stp	x29, x30, [sp, #-48]!
   3791c:	mov	w3, #0x0                   	// #0
   37920:	mov	x29, sp
   37924:	stp	x19, x20, [sp, #16]
   37928:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   3792c:	mov	x20, x1
   37930:	str	x21, [sp, #32]
   37934:	mov	x21, x2
   37938:	ldr	w2, [x1, #16]
   3793c:	mov	x1, x21
   37940:	ldr	x0, [x19, #3944]
   37944:	add	x0, x0, #0xe0
   37948:	bl	36188 <init_disassemble_info@@Base+0x120>
   3794c:	ldr	w0, [x20, #32]
   37950:	cmp	w0, #0x5
   37954:	b.ne	37968 <aarch64_ins_reg_extended@@Base+0x50>  // b.any
   37958:	ldrb	w0, [x20, #4]
   3795c:	cmp	w0, #0x1
   37960:	cset	w0, ne  // ne = any
   37964:	add	w0, w0, #0x8
   37968:	bl	35470 <aarch64_get_operand_modifier_value@plt>
   3796c:	mov	w2, w0
   37970:	ldr	x19, [x19, #3944]
   37974:	mov	x1, x21
   37978:	mov	w3, #0x0                   	// #0
   3797c:	add	x0, x19, #0xf0
   37980:	bl	36188 <init_disassemble_info@@Base+0x120>
   37984:	ldr	w2, [x20, #40]
   37988:	mov	x1, x21
   3798c:	add	x0, x19, #0xb0
   37990:	mov	w3, #0x0                   	// #0
   37994:	bl	36188 <init_disassemble_info@@Base+0x120>
   37998:	mov	w0, #0x1                   	// #1
   3799c:	ldp	x19, x20, [sp, #16]
   379a0:	ldr	x21, [sp, #32]
   379a4:	ldp	x29, x30, [sp], #48
   379a8:	ret

00000000000379ac <aarch64_ins_reg_shifted@@Base>:
   379ac:	stp	x29, x30, [sp, #-48]!
   379b0:	mov	w3, #0x0                   	// #0
   379b4:	mov	x29, sp
   379b8:	str	x21, [sp, #32]
   379bc:	mov	x21, x1
   379c0:	stp	x19, x20, [sp, #16]
   379c4:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   379c8:	mov	x20, x2
   379cc:	mov	x1, x2
   379d0:	ldr	w2, [x21, #16]
   379d4:	ldr	x19, [x19, #3944]
   379d8:	add	x0, x19, #0xe0
   379dc:	bl	36188 <init_disassemble_info@@Base+0x120>
   379e0:	ldr	w0, [x21, #32]
   379e4:	bl	35470 <aarch64_get_operand_modifier_value@plt>
   379e8:	mov	w2, w0
   379ec:	mov	x1, x20
   379f0:	add	x0, x19, #0x118
   379f4:	mov	w3, #0x0                   	// #0
   379f8:	bl	36188 <init_disassemble_info@@Base+0x120>
   379fc:	ldr	w2, [x21, #40]
   37a00:	mov	x1, x20
   37a04:	add	x0, x19, #0x130
   37a08:	mov	w3, #0x0                   	// #0
   37a0c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37a10:	mov	w0, #0x1                   	// #1
   37a14:	ldp	x19, x20, [sp, #16]
   37a18:	ldr	x21, [sp, #32]
   37a1c:	ldp	x29, x30, [sp], #48
   37a20:	ret

0000000000037a24 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   37a24:	stp	x29, x30, [sp, #-48]!
   37a28:	mov	w3, #0x0                   	// #0
   37a2c:	mov	x29, sp
   37a30:	stp	x21, x22, [sp, #32]
   37a34:	mov	x22, x1
   37a38:	mov	x21, x2
   37a3c:	stp	x19, x20, [sp, #16]
   37a40:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37a44:	mov	x1, x2
   37a48:	ldr	x20, [x20, #3944]
   37a4c:	ldp	w19, w0, [x0, #16]
   37a50:	ldr	w2, [x22, #16]
   37a54:	add	x0, x20, x0, lsl #3
   37a58:	ubfx	x19, x19, #5, #3
   37a5c:	add	w19, w19, #0x1
   37a60:	bl	36188 <init_disassemble_info@@Base+0x120>
   37a64:	ldr	w2, [x22, #20]
   37a68:	mov	x1, x21
   37a6c:	add	x0, x20, #0x308
   37a70:	mov	w3, #0x0                   	// #0
   37a74:	sdiv	w2, w2, w19
   37a78:	bl	36188 <init_disassemble_info@@Base+0x120>
   37a7c:	mov	w0, #0x1                   	// #1
   37a80:	ldp	x19, x20, [sp, #16]
   37a84:	ldp	x21, x22, [sp, #32]
   37a88:	ldp	x29, x30, [sp], #48
   37a8c:	ret

0000000000037a90 <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   37a90:	stp	x29, x30, [sp, #-48]!
   37a94:	mov	w3, #0x0                   	// #0
   37a98:	mov	x29, sp
   37a9c:	stp	x21, x22, [sp, #32]
   37aa0:	mov	x22, x1
   37aa4:	mov	x21, x2
   37aa8:	stp	x19, x20, [sp, #16]
   37aac:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37ab0:	mov	x1, x2
   37ab4:	ldr	x20, [x20, #3944]
   37ab8:	ldp	w19, w0, [x0, #16]
   37abc:	ldr	w2, [x22, #16]
   37ac0:	add	x0, x20, x0, lsl #3
   37ac4:	ubfx	x19, x19, #5, #3
   37ac8:	add	w19, w19, #0x1
   37acc:	bl	36188 <init_disassemble_info@@Base+0x120>
   37ad0:	ldr	w2, [x22, #20]
   37ad4:	mov	x1, x21
   37ad8:	add	x0, x20, #0x320
   37adc:	mov	w3, #0x0                   	// #0
   37ae0:	sdiv	w2, w2, w19
   37ae4:	bl	36188 <init_disassemble_info@@Base+0x120>
   37ae8:	mov	w0, #0x1                   	// #1
   37aec:	ldp	x19, x20, [sp, #16]
   37af0:	ldp	x21, x22, [sp, #32]
   37af4:	ldp	x29, x30, [sp], #48
   37af8:	ret

0000000000037afc <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   37afc:	stp	x29, x30, [sp, #-48]!
   37b00:	mov	w3, #0x0                   	// #0
   37b04:	mov	x29, sp
   37b08:	stp	x19, x20, [sp, #16]
   37b0c:	mov	x20, x2
   37b10:	ldp	w19, w4, [x0, #16]
   37b14:	str	x21, [sp, #32]
   37b18:	mov	x21, x1
   37b1c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37b20:	mov	x1, x2
   37b24:	ldr	x0, [x0, #3944]
   37b28:	ubfx	x19, x19, #5, #3
   37b2c:	ldr	w2, [x21, #16]
   37b30:	add	w19, w19, #0x1
   37b34:	add	x0, x0, x4, lsl #3
   37b38:	bl	36188 <init_disassemble_info@@Base+0x120>
   37b3c:	ldr	w1, [x21, #20]
   37b40:	mov	x0, x20
   37b44:	mov	w5, #0x64                  	// #100
   37b48:	mov	w4, #0x16                  	// #22
   37b4c:	mov	w3, #0x2                   	// #2
   37b50:	mov	w2, #0x0                   	// #0
   37b54:	sdiv	w1, w1, w19
   37b58:	bl	36274 <init_disassemble_info@@Base+0x20c>
   37b5c:	mov	w0, #0x1                   	// #1
   37b60:	ldp	x19, x20, [sp, #16]
   37b64:	ldr	x21, [sp, #32]
   37b68:	ldp	x29, x30, [sp], #48
   37b6c:	ret

0000000000037b70 <aarch64_ins_sve_addr_ri_s4@@Base>:
   37b70:	stp	x29, x30, [sp, #-64]!
   37b74:	mov	w3, #0x0                   	// #0
   37b78:	mov	x29, sp
   37b7c:	stp	x21, x22, [sp, #32]
   37b80:	mov	x22, x1
   37b84:	mov	x21, x2
   37b88:	stp	x19, x20, [sp, #16]
   37b8c:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37b90:	mov	x1, x2
   37b94:	ldr	x20, [x20, #3944]
   37b98:	ldp	w19, w0, [x0, #16]
   37b9c:	ldr	w2, [x22, #16]
   37ba0:	str	x23, [sp, #48]
   37ba4:	mov	w23, #0x1                   	// #1
   37ba8:	add	x0, x20, x0, lsl #3
   37bac:	ubfx	x19, x19, #5, #3
   37bb0:	bl	36188 <init_disassemble_info@@Base+0x120>
   37bb4:	lsl	w19, w23, w19
   37bb8:	ldr	w2, [x22, #20]
   37bbc:	mov	x1, x21
   37bc0:	add	x0, x20, #0x308
   37bc4:	mov	w3, #0x0                   	// #0
   37bc8:	sdiv	w2, w2, w19
   37bcc:	bl	36188 <init_disassemble_info@@Base+0x120>
   37bd0:	mov	w0, w23
   37bd4:	ldp	x19, x20, [sp, #16]
   37bd8:	ldp	x21, x22, [sp, #32]
   37bdc:	ldr	x23, [sp, #48]
   37be0:	ldp	x29, x30, [sp], #64
   37be4:	ret

0000000000037be8 <aarch64_ins_sve_addr_ri_u6@@Base>:
   37be8:	stp	x29, x30, [sp, #-64]!
   37bec:	mov	w3, #0x0                   	// #0
   37bf0:	mov	x29, sp
   37bf4:	stp	x21, x22, [sp, #32]
   37bf8:	mov	x22, x1
   37bfc:	mov	x21, x2
   37c00:	stp	x19, x20, [sp, #16]
   37c04:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37c08:	mov	x1, x2
   37c0c:	ldr	x20, [x20, #3944]
   37c10:	ldp	w19, w0, [x0, #16]
   37c14:	ldr	w2, [x22, #16]
   37c18:	str	x23, [sp, #48]
   37c1c:	mov	w23, #0x1                   	// #1
   37c20:	add	x0, x20, x0, lsl #3
   37c24:	ubfx	x19, x19, #5, #3
   37c28:	bl	36188 <init_disassemble_info@@Base+0x120>
   37c2c:	lsl	w19, w23, w19
   37c30:	ldr	w2, [x22, #20]
   37c34:	mov	x1, x21
   37c38:	add	x0, x20, #0x320
   37c3c:	mov	w3, #0x0                   	// #0
   37c40:	sdiv	w2, w2, w19
   37c44:	bl	36188 <init_disassemble_info@@Base+0x120>
   37c48:	mov	w0, w23
   37c4c:	ldp	x19, x20, [sp, #16]
   37c50:	ldp	x21, x22, [sp, #32]
   37c54:	ldr	x23, [sp, #48]
   37c58:	ldp	x29, x30, [sp], #64
   37c5c:	ret

0000000000037c60 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   37c60:	stp	x29, x30, [sp, #-48]!
   37c64:	mov	w3, #0x0                   	// #0
   37c68:	mov	x29, sp
   37c6c:	stp	x21, x22, [sp, #32]
   37c70:	mov	x21, x1
   37c74:	mov	x1, x2
   37c78:	stp	x19, x20, [sp, #16]
   37c7c:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37c80:	mov	x20, x2
   37c84:	ldr	x19, [x19, #3944]
   37c88:	mov	x22, x0
   37c8c:	ldr	w2, [x21, #16]
   37c90:	ldr	w0, [x0, #20]
   37c94:	add	x0, x19, x0, lsl #3
   37c98:	bl	36188 <init_disassemble_info@@Base+0x120>
   37c9c:	ldr	w2, [x21, #20]
   37ca0:	mov	x1, x20
   37ca4:	ldr	w0, [x22, #24]
   37ca8:	mov	w3, #0x0                   	// #0
   37cac:	add	x0, x19, x0, lsl #3
   37cb0:	bl	36188 <init_disassemble_info@@Base+0x120>
   37cb4:	mov	w0, #0x1                   	// #1
   37cb8:	ldp	x19, x20, [sp, #16]
   37cbc:	ldp	x21, x22, [sp, #32]
   37cc0:	ldp	x29, x30, [sp], #48
   37cc4:	ret

0000000000037cc8 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   37cc8:	stp	x29, x30, [sp, #-48]!
   37ccc:	mov	w3, #0x0                   	// #0
   37cd0:	mov	x29, sp
   37cd4:	stp	x19, x20, [sp, #16]
   37cd8:	adrp	x19, 97000 <aarch64_operands@@Base+0x16bc0>
   37cdc:	mov	x20, x2
   37ce0:	ldr	x19, [x19, #3944]
   37ce4:	stp	x21, x22, [sp, #32]
   37ce8:	ldr	w2, [x1, #16]
   37cec:	mov	x21, x0
   37cf0:	ldr	w0, [x0, #20]
   37cf4:	mov	x22, x1
   37cf8:	mov	x1, x20
   37cfc:	add	x0, x19, x0, lsl #3
   37d00:	bl	36188 <init_disassemble_info@@Base+0x120>
   37d04:	ldr	w2, [x22, #20]
   37d08:	mov	w3, #0x0                   	// #0
   37d0c:	ldr	w0, [x21, #24]
   37d10:	mov	x1, x20
   37d14:	add	x0, x19, x0, lsl #3
   37d18:	bl	36188 <init_disassemble_info@@Base+0x120>
   37d1c:	ldr	w0, [x22, #32]
   37d20:	mov	w3, #0x0                   	// #0
   37d24:	cmp	w0, #0x8
   37d28:	ldr	w0, [x21, #28]
   37d2c:	b.ne	37d54 <aarch64_ins_sve_addr_rz_xtw@@Base+0x8c>  // b.any
   37d30:	mov	w2, #0x0                   	// #0
   37d34:	mov	x1, x20
   37d38:	add	x0, x19, x0, lsl #3
   37d3c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37d40:	mov	w0, #0x1                   	// #1
   37d44:	ldp	x19, x20, [sp, #16]
   37d48:	ldp	x21, x22, [sp, #32]
   37d4c:	ldp	x29, x30, [sp], #48
   37d50:	ret
   37d54:	mov	w2, #0x1                   	// #1
   37d58:	b	37d34 <aarch64_ins_sve_addr_rz_xtw@@Base+0x6c>

0000000000037d5c <aarch64_ins_sve_addr_zi_u5@@Base>:
   37d5c:	stp	x29, x30, [sp, #-64]!
   37d60:	mov	w3, #0x0                   	// #0
   37d64:	mov	x29, sp
   37d68:	stp	x21, x22, [sp, #32]
   37d6c:	mov	x22, x1
   37d70:	mov	x21, x2
   37d74:	stp	x19, x20, [sp, #16]
   37d78:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   37d7c:	mov	x1, x2
   37d80:	ldr	x20, [x20, #3944]
   37d84:	ldp	w19, w0, [x0, #16]
   37d88:	ldr	w2, [x22, #16]
   37d8c:	str	x23, [sp, #48]
   37d90:	mov	w23, #0x1                   	// #1
   37d94:	add	x0, x20, x0, lsl #3
   37d98:	ubfx	x19, x19, #5, #3
   37d9c:	bl	36188 <init_disassemble_info@@Base+0x120>
   37da0:	lsl	w19, w23, w19
   37da4:	ldr	w2, [x22, #20]
   37da8:	mov	x1, x21
   37dac:	add	x0, x20, #0x158
   37db0:	mov	w3, #0x0                   	// #0
   37db4:	sdiv	w2, w2, w19
   37db8:	bl	36188 <init_disassemble_info@@Base+0x120>
   37dbc:	mov	w0, w23
   37dc0:	ldp	x19, x20, [sp, #16]
   37dc4:	ldp	x21, x22, [sp, #32]
   37dc8:	ldr	x23, [sp, #48]
   37dcc:	ldp	x29, x30, [sp], #64
   37dd0:	ret

0000000000037dd4 <aarch64_ins_sve_addr_zz_lsl@@Base>:
   37dd4:	b	36370 <init_disassemble_info@@Base+0x308>

0000000000037dd8 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   37dd8:	b	36370 <init_disassemble_info@@Base+0x308>

0000000000037ddc <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   37ddc:	b	36370 <init_disassemble_info@@Base+0x308>

0000000000037de0 <aarch64_ins_sve_aimm@@Base>:
   37de0:	mov	x4, x1
   37de4:	stp	x29, x30, [sp, #-16]!
   37de8:	mov	x1, x2
   37dec:	mov	x29, sp
   37df0:	ldr	x2, [x4, #40]
   37df4:	ldr	x3, [x4, #16]
   37df8:	cmp	x2, #0x8
   37dfc:	b.ne	37e18 <aarch64_ins_sve_aimm@@Base+0x38>  // b.any
   37e00:	and	w3, w3, #0xff
   37e04:	orr	w2, w3, #0x100
   37e08:	bl	361f8 <init_disassemble_info@@Base+0x190>
   37e0c:	mov	w0, #0x1                   	// #1
   37e10:	ldp	x29, x30, [sp], #16
   37e14:	ret
   37e18:	mov	x5, x0
   37e1c:	cbz	x3, 37e34 <aarch64_ins_sve_aimm@@Base+0x54>
   37e20:	tst	w3, #0xff
   37e24:	b.ne	37e34 <aarch64_ins_sve_aimm@@Base+0x54>  // b.any
   37e28:	mov	x2, #0x100                 	// #256
   37e2c:	sdiv	x3, x3, x2
   37e30:	b	37e00 <aarch64_ins_sve_aimm@@Base+0x20>
   37e34:	and	w2, w3, #0xff
   37e38:	mov	x0, x5
   37e3c:	b	37e08 <aarch64_ins_sve_aimm@@Base+0x28>

0000000000037e40 <aarch64_ins_sve_asimm@@Base>:
   37e40:	b	35970 <aarch64_ins_sve_aimm@plt>

0000000000037e44 <aarch64_ins_sve_index@@Base>:
   37e44:	stp	x29, x30, [sp, #-48]!
   37e48:	mov	x29, sp
   37e4c:	stp	x19, x20, [sp, #16]
   37e50:	mov	x19, x1
   37e54:	mov	x20, x2
   37e58:	stp	x21, x22, [sp, #32]
   37e5c:	mov	x22, x0
   37e60:	ldrb	w0, [x1, #4]
   37e64:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   37e68:	and	w21, w0, #0xff
   37e6c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37e70:	ldr	w4, [x22, #20]
   37e74:	ldr	w2, [x19, #16]
   37e78:	mov	x1, x20
   37e7c:	ldr	x0, [x0, #3944]
   37e80:	mov	w3, #0x0                   	// #0
   37e84:	add	x0, x0, x4, lsl #3
   37e88:	bl	36188 <init_disassemble_info@@Base+0x120>
   37e8c:	ldr	x1, [x19, #24]
   37e90:	mov	x0, x20
   37e94:	mov	w5, #0x74                  	// #116
   37e98:	mov	w4, #0x2b                  	// #43
   37e9c:	mov	w3, #0x2                   	// #2
   37ea0:	mov	w2, #0x0                   	// #0
   37ea4:	lsl	x1, x1, #1
   37ea8:	madd	w1, w21, w1, w21
   37eac:	bl	36274 <init_disassemble_info@@Base+0x20c>
   37eb0:	mov	w0, #0x1                   	// #1
   37eb4:	ldp	x19, x20, [sp, #16]
   37eb8:	ldp	x21, x22, [sp, #32]
   37ebc:	ldp	x29, x30, [sp], #48
   37ec0:	ret

0000000000037ec4 <aarch64_ins_sve_limm_mov@@Base>:
   37ec4:	b	353e0 <aarch64_ins_limm@plt>

0000000000037ec8 <aarch64_ins_sve_quad_index@@Base>:
   37ec8:	stp	x29, x30, [sp, #-16]!
   37ecc:	mov	x4, x1
   37ed0:	mov	x1, x2
   37ed4:	mov	x29, sp
   37ed8:	ldr	w3, [x0, #16]
   37edc:	ldr	w2, [x4, #16]
   37ee0:	ubfx	x3, x3, #5, #3
   37ee4:	lsr	w5, w2, w3
   37ee8:	cbz	w5, 37f10 <aarch64_ins_sve_quad_index@@Base+0x48>
   37eec:	adrp	x3, 53000 <xexit@@Base+0x508>
   37ef0:	add	x3, x3, #0x263
   37ef4:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37ef8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37efc:	add	x3, x3, #0x17c
   37f00:	add	x1, x1, #0xbf7
   37f04:	add	x0, x0, #0xee9
   37f08:	mov	w2, #0x4a2                 	// #1186
   37f0c:	bl	35b10 <__assert_fail@plt>
   37f10:	ldr	x4, [x4, #24]
   37f14:	lsl	x3, x4, x3
   37f18:	add	w2, w2, w3
   37f1c:	bl	361f8 <init_disassemble_info@@Base+0x190>
   37f20:	mov	w0, #0x1                   	// #1
   37f24:	ldp	x29, x30, [sp], #16
   37f28:	ret

0000000000037f2c <aarch64_ins_sve_reglist@@Base>:
   37f2c:	stp	x29, x30, [sp, #-16]!
   37f30:	mov	x3, x1
   37f34:	mov	x1, x2
   37f38:	mov	x29, sp
   37f3c:	ldr	w4, [x0, #20]
   37f40:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37f44:	ldrb	w2, [x3, #16]
   37f48:	mov	w3, #0x0                   	// #0
   37f4c:	ldr	x0, [x0, #3944]
   37f50:	and	w2, w2, #0x1f
   37f54:	add	x0, x0, x4, lsl #3
   37f58:	bl	36188 <init_disassemble_info@@Base+0x120>
   37f5c:	mov	w0, #0x1                   	// #1
   37f60:	ldp	x29, x30, [sp], #16
   37f64:	ret

0000000000037f68 <aarch64_ins_sve_scale@@Base>:
   37f68:	stp	x29, x30, [sp, #-32]!
   37f6c:	mov	x29, sp
   37f70:	stp	x19, x20, [sp, #16]
   37f74:	mov	x20, x1
   37f78:	mov	x19, x2
   37f7c:	mov	x1, x2
   37f80:	ldr	w2, [x20, #16]
   37f84:	bl	361f8 <init_disassemble_info@@Base+0x190>
   37f88:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   37f8c:	mov	x1, x19
   37f90:	ldr	x2, [x20, #40]
   37f94:	mov	w3, #0x0                   	// #0
   37f98:	ldr	x0, [x0, #3944]
   37f9c:	sub	w2, w2, #0x1
   37fa0:	add	x0, x0, #0x308
   37fa4:	bl	36188 <init_disassemble_info@@Base+0x120>
   37fa8:	mov	w0, #0x1                   	// #1
   37fac:	ldp	x19, x20, [sp, #16]
   37fb0:	ldp	x29, x30, [sp], #32
   37fb4:	ret

0000000000037fb8 <aarch64_ins_sve_shlimm@@Base>:
   37fb8:	stp	x29, x30, [sp, #-48]!
   37fbc:	mov	x29, sp
   37fc0:	ldr	w4, [x1, #8]
   37fc4:	stp	x19, x20, [sp, #16]
   37fc8:	cmp	w4, #0x0
   37fcc:	str	x21, [sp, #32]
   37fd0:	b.gt	37ff8 <aarch64_ins_sve_shlimm@@Base+0x40>
   37fd4:	adrp	x3, 53000 <xexit@@Base+0x508>
   37fd8:	add	x3, x3, #0x263
   37fdc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37fe0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   37fe4:	add	x3, x3, #0x197
   37fe8:	add	x1, x1, #0xbf7
   37fec:	add	x0, x0, #0xf10
   37ff0:	mov	w2, #0x4cc                 	// #1228
   37ff4:	bl	35b10 <__assert_fail@plt>
   37ff8:	sub	w4, w4, #0x1
   37ffc:	mov	x20, x0
   38000:	mov	x0, #0x38                  	// #56
   38004:	mov	x19, x1
   38008:	sxtw	x4, w4
   3800c:	mov	x21, x2
   38010:	madd	x3, x4, x0, x3
   38014:	ldrb	w0, [x3, #28]
   38018:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3801c:	ldr	x2, [x19, #16]
   38020:	mov	x1, x21
   38024:	add	w2, w2, w0, uxtb #3
   38028:	mov	x0, x20
   3802c:	bl	361f8 <init_disassemble_info@@Base+0x190>
   38030:	mov	w0, #0x1                   	// #1
   38034:	ldp	x19, x20, [sp, #16]
   38038:	ldr	x21, [sp, #32]
   3803c:	ldp	x29, x30, [sp], #48
   38040:	ret

0000000000038044 <aarch64_ins_sve_shrimm@@Base>:
   38044:	stp	x29, x30, [sp, #-48]!
   38048:	mov	x29, sp
   3804c:	ldr	w4, [x0, #16]
   38050:	stp	x19, x20, [sp, #16]
   38054:	mov	x19, x0
   38058:	ubfx	x0, x4, #5, #3
   3805c:	ldr	w4, [x1, #8]
   38060:	str	x21, [sp, #32]
   38064:	cmp	w4, w0
   38068:	b.ge	38090 <aarch64_ins_sve_shrimm@@Base+0x4c>  // b.tcont
   3806c:	adrp	x3, 53000 <xexit@@Base+0x508>
   38070:	add	x3, x3, #0x263
   38074:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38078:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3807c:	add	x3, x3, #0x1ae
   38080:	add	x1, x1, #0xbf7
   38084:	add	x0, x0, #0xf1e
   38088:	mov	w2, #0x4de                 	// #1246
   3808c:	bl	35b10 <__assert_fail@plt>
   38090:	sub	w4, w4, w0
   38094:	mov	x0, #0x38                  	// #56
   38098:	mov	x20, x1
   3809c:	mov	x21, x2
   380a0:	madd	x4, x4, x0, x3
   380a4:	ldrb	w0, [x4, #28]
   380a8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   380ac:	ubfiz	w0, w0, #4, #8
   380b0:	ldr	x2, [x20, #16]
   380b4:	mov	x1, x21
   380b8:	sub	w2, w0, w2
   380bc:	mov	x0, x19
   380c0:	bl	361f8 <init_disassemble_info@@Base+0x190>
   380c4:	mov	w0, #0x1                   	// #1
   380c8:	ldp	x19, x20, [sp, #16]
   380cc:	ldr	x21, [sp, #32]
   380d0:	ldp	x29, x30, [sp], #48
   380d4:	ret

00000000000380d8 <aarch64_ins_sve_float_half_one@@Base>:
   380d8:	stp	x29, x30, [sp, #-16]!
   380dc:	mov	x3, x1
   380e0:	mov	x1, x2
   380e4:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   380e8:	mov	x29, sp
   380ec:	ldr	w0, [x0, #20]
   380f0:	ldr	x2, [x2, #3944]
   380f4:	ldr	x3, [x3, #16]
   380f8:	add	x0, x2, x0, lsl #3
   380fc:	mov	x2, #0x3f000000            	// #1056964608
   38100:	cmp	x3, x2
   38104:	mov	w3, #0x0                   	// #0
   38108:	b.ne	38120 <aarch64_ins_sve_float_half_one@@Base+0x48>  // b.any
   3810c:	mov	w2, #0x0                   	// #0
   38110:	bl	36188 <init_disassemble_info@@Base+0x120>
   38114:	mov	w0, #0x1                   	// #1
   38118:	ldp	x29, x30, [sp], #16
   3811c:	ret
   38120:	mov	w2, #0x1                   	// #1
   38124:	b	38110 <aarch64_ins_sve_float_half_one@@Base+0x38>

0000000000038128 <aarch64_ins_sve_float_half_two@@Base>:
   38128:	b	380d8 <aarch64_ins_sve_float_half_one@@Base>

000000000003812c <aarch64_ins_sve_float_zero_one@@Base>:
   3812c:	stp	x29, x30, [sp, #-16]!
   38130:	mov	x3, x1
   38134:	mov	x1, x2
   38138:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3813c:	mov	x29, sp
   38140:	ldr	w0, [x0, #20]
   38144:	ldr	x2, [x2, #3944]
   38148:	add	x0, x2, x0, lsl #3
   3814c:	ldr	x2, [x3, #16]
   38150:	mov	w3, #0x0                   	// #0
   38154:	cbnz	x2, 38168 <aarch64_ins_sve_float_zero_one@@Base+0x3c>
   38158:	bl	36188 <init_disassemble_info@@Base+0x120>
   3815c:	mov	w0, #0x1                   	// #1
   38160:	ldp	x29, x30, [sp], #16
   38164:	ret
   38168:	mov	w2, #0x1                   	// #1
   3816c:	b	38158 <aarch64_ins_sve_float_zero_one@@Base+0x2c>

0000000000038170 <aarch64_opcode_encode@@Base>:
   38170:	stp	x29, x30, [sp, #-464]!
   38174:	mov	x29, sp
   38178:	stp	x19, x20, [sp, #16]
   3817c:	add	x19, sp, #0x68
   38180:	mov	x20, x0
   38184:	mov	x0, x19
   38188:	stp	x21, x22, [sp, #32]
   3818c:	mov	x21, x3
   38190:	mov	x22, x4
   38194:	stp	x23, x24, [sp, #48]
   38198:	mov	x23, x2
   3819c:	mov	x24, x5
   381a0:	mov	x2, #0x168                 	// #360
   381a4:	stp	x25, x26, [sp, #64]
   381a8:	stp	x27, x28, [sp, #80]
   381ac:	bl	35090 <memcpy@plt>
   381b0:	ldr	x0, [sp, #112]
   381b4:	cbz	x0, 381e4 <aarch64_opcode_encode@@Base+0x74>
   381b8:	cmp	x0, x20
   381bc:	b.eq	381e8 <aarch64_opcode_encode@@Base+0x78>  // b.none
   381c0:	adrp	x3, 53000 <xexit@@Base+0x508>
   381c4:	add	x3, x3, #0x263
   381c8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   381cc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   381d0:	add	x3, x3, #0x1c5
   381d4:	add	x1, x1, #0xbf7
   381d8:	add	x0, x0, #0xf3f
   381dc:	mov	w2, #0x7cb                 	// #1995
   381e0:	bl	35b10 <__assert_fail@plt>
   381e4:	str	x20, [sp, #112]
   381e8:	mov	x1, x22
   381ec:	mov	x0, x19
   381f0:	bl	35520 <aarch64_match_operands_constraint@plt>
   381f4:	cbnz	w0, 38218 <aarch64_opcode_encode@@Base+0xa8>
   381f8:	mov	w0, #0x0                   	// #0
   381fc:	ldp	x19, x20, [sp, #16]
   38200:	ldp	x21, x22, [sp, #32]
   38204:	ldp	x23, x24, [sp, #48]
   38208:	ldp	x25, x26, [sp, #64]
   3820c:	ldp	x27, x28, [sp, #80]
   38210:	ldp	x29, x30, [sp], #464
   38214:	ret
   38218:	ldr	w0, [x20, #8]
   3821c:	str	w0, [sp, #104]
   38220:	mov	x0, x20
   38224:	bl	351b0 <aarch64_num_of_operands@plt>
   38228:	cbnz	w0, 3823c <aarch64_opcode_encode@@Base+0xcc>
   3822c:	ldr	w0, [sp, #104]
   38230:	str	w0, [x23]
   38234:	mov	w0, #0x1                   	// #1
   38238:	b	381fc <aarch64_opcode_encode@@Base+0x8c>
   3823c:	mov	x1, x19
   38240:	add	x2, x20, #0x20
   38244:	mov	x0, #0x0                   	// #0
   38248:	ldr	w4, [x2, x0, lsl #2]
   3824c:	ldr	w3, [x1, #24]
   38250:	cmp	w4, w3
   38254:	b.eq	3827c <aarch64_opcode_encode@@Base+0x10c>  // b.none
   38258:	adrp	x3, 53000 <xexit@@Base+0x508>
   3825c:	add	x3, x3, #0x263
   38260:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38264:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38268:	add	x3, x3, #0x1c5
   3826c:	add	x1, x1, #0xbf7
   38270:	add	x0, x0, #0xf6e
   38274:	mov	w2, #0x7e5                 	// #2021
   38278:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   3827c:	str	w0, [x1, #32]
   38280:	cbz	x21, 3828c <aarch64_opcode_encode@@Base+0x11c>
   38284:	ldrb	w3, [x1, #28]
   38288:	strb	w3, [x21]
   3828c:	add	x0, x0, #0x1
   38290:	add	x1, x1, #0x38
   38294:	cmp	x0, #0x6
   38298:	b.ne	38248 <aarch64_opcode_encode@@Base+0xd8>  // b.any
   3829c:	mov	x0, x20
   382a0:	bl	35330 <aarch64_find_real_opcode@plt>
   382a4:	mov	x21, x0
   382a8:	cbz	x0, 38310 <aarch64_opcode_encode@@Base+0x1a0>
   382ac:	ldr	x0, [x20, #120]
   382b0:	tbz	w0, #20, 38310 <aarch64_opcode_encode@@Base+0x1a0>
   382b4:	ldr	x0, [sp, #112]
   382b8:	ldr	x1, [x0, #120]
   382bc:	tbz	w1, #20, 38300 <aarch64_opcode_encode@@Base+0x190>
   382c0:	ldr	w1, [x0, #20]
   382c4:	sub	w2, w1, #0x23
   382c8:	cmp	w2, #0x21
   382cc:	b.hi	38300 <aarch64_opcode_encode@@Base+0x190>  // b.pmore
   382d0:	adrp	x0, 53000 <xexit@@Base+0x508>
   382d4:	add	x0, x0, #0x1e0
   382d8:	ldrh	w0, [x0, w2, uxtw #1]
   382dc:	adr	x2, 382e8 <aarch64_opcode_encode@@Base+0x178>
   382e0:	add	x0, x2, w0, sxth #2
   382e4:	br	x0
   382e8:	ldrb	w0, [sp, #244]
   382ec:	mov	x1, #0x3f                  	// #63
   382f0:	cmp	w0, #0x1d
   382f4:	mov	x0, #0x1f                  	// #31
   382f8:	csel	x0, x0, x1, eq  // eq = none
   382fc:	str	x0, [sp, #312]
   38300:	mov	x20, x21
   38304:	mov	x1, x21
   38308:	mov	x0, x19
   3830c:	bl	35450 <aarch64_replace_opcode@plt>
   38310:	adrp	x26, 97000 <aarch64_operands@@Base+0x16bc0>
   38314:	add	x25, x20, #0x20
   38318:	add	x27, x20, #0x38
   3831c:	add	x21, x19, #0x18
   38320:	ldr	x26, [x26, #4032]
   38324:	mov	x28, #0x30                  	// #48
   38328:	ldr	w0, [x25]
   3832c:	cbnz	w0, 386fc <aarch64_opcode_encode@@Base+0x58c>
   38330:	ldr	x1, [x20, #120]
   38334:	mov	x0, #0xff0                 	// #4080
   38338:	movk	x0, #0x8c0, lsl #16
   3833c:	tst	x1, x0
   38340:	b.eq	38cc0 <aarch64_opcode_encode@@Base+0xb50>  // b.none
   38344:	ldr	x0, [sp, #112]
   38348:	ldr	x0, [x0, #120]
   3834c:	tbz	w0, #4, 38370 <aarch64_opcode_encode@@Base+0x200>
   38350:	ldr	x0, [sp, #120]
   38354:	mov	x1, x19
   38358:	mov	w3, #0x0                   	// #0
   3835c:	ldr	w2, [x0, #32]
   38360:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38364:	ldr	x0, [x0, #3944]
   38368:	add	x0, x0, #0x8
   3836c:	bl	36188 <init_disassemble_info@@Base+0x120>
   38370:	ldr	x0, [sp, #112]
   38374:	ldr	x1, [x0, #120]
   38378:	tbz	w1, #5, 383dc <aarch64_opcode_encode@@Base+0x26c>
   3837c:	bl	36554 <init_disassemble_info@@Base+0x4ec>
   38380:	sxtw	x0, w0
   38384:	mov	x1, #0x38                  	// #56
   38388:	adrp	x21, 97000 <aarch64_operands@@Base+0x16bc0>
   3838c:	mov	w3, #0x0                   	// #0
   38390:	mul	x0, x0, x1
   38394:	add	x1, sp, #0x84
   38398:	ldr	x21, [x21, #3944]
   3839c:	ldrb	w0, [x1, x0]
   383a0:	mov	x1, x19
   383a4:	cmp	w0, #0x2
   383a8:	ccmp	w0, #0x4, #0x4, ne  // ne = any
   383ac:	add	x0, x21, #0x1d8
   383b0:	cset	w25, eq  // eq = none
   383b4:	mov	w2, w25
   383b8:	bl	36188 <init_disassemble_info@@Base+0x120>
   383bc:	ldr	x0, [sp, #112]
   383c0:	ldr	x1, [x0, #120]
   383c4:	tbz	w1, #23, 383dc <aarch64_opcode_encode@@Base+0x26c>
   383c8:	ldr	w3, [x0, #12]
   383cc:	mov	w2, w25
   383d0:	mov	x1, x19
   383d4:	add	x0, x21, #0x1c0
   383d8:	bl	36188 <init_disassemble_info@@Base+0x120>
   383dc:	ldr	x0, [sp, #112]
   383e0:	ldr	x1, [x0, #120]
   383e4:	tbz	w1, #27, 38424 <aarch64_opcode_encode@@Base+0x2b4>
   383e8:	bl	36554 <init_disassemble_info@@Base+0x4ec>
   383ec:	sxtw	x0, w0
   383f0:	mov	x1, #0x38                  	// #56
   383f4:	mov	w3, #0x0                   	// #0
   383f8:	mul	x0, x0, x1
   383fc:	add	x1, sp, #0x84
   38400:	ldrb	w0, [x1, x0]
   38404:	mov	x1, x19
   38408:	cmp	w0, #0x2
   3840c:	ccmp	w0, #0x4, #0x4, ne  // ne = any
   38410:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38414:	cset	w2, eq  // eq = none
   38418:	ldr	x0, [x0, #3944]
   3841c:	add	x0, x0, #0x1e0
   38420:	bl	36188 <init_disassemble_info@@Base+0x120>
   38424:	ldr	x0, [sp, #112]
   38428:	ldr	x1, [x0, #120]
   3842c:	tbz	w1, #6, 3849c <aarch64_opcode_encode@@Base+0x32c>
   38430:	bl	35800 <aarch64_select_operand_for_sizeq_field_coding@plt>
   38434:	sxtw	x0, w0
   38438:	mov	x1, #0x38                  	// #56
   3843c:	adrp	x21, 97000 <aarch64_operands@@Base+0x16bc0>
   38440:	mul	x0, x0, x1
   38444:	add	x1, sp, #0x84
   38448:	ldrb	w0, [x1, x0]
   3844c:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   38450:	and	w2, w0, #0x1
   38454:	mov	w25, w0
   38458:	mov	x1, x19
   3845c:	ldr	x0, [sp, #112]
   38460:	ldr	x21, [x21, #3944]
   38464:	ldr	w3, [x0, #12]
   38468:	add	x0, x21, #0x58
   3846c:	bl	36188 <init_disassemble_info@@Base+0x120>
   38470:	ldr	x1, [sp, #112]
   38474:	ubfx	x2, x25, #1, #2
   38478:	ldp	w3, w0, [x1, #12]
   3847c:	mov	x1, x19
   38480:	sub	w0, w0, #0x12
   38484:	cmp	w0, #0x4
   38488:	cset	w4, cc  // cc = lo, ul, last
   3848c:	add	w4, w4, #0x8
   38490:	ubfiz	x4, x4, #3, #5
   38494:	add	x0, x21, x4
   38498:	bl	36188 <init_disassemble_info@@Base+0x120>
   3849c:	ldr	x21, [sp, #112]
   384a0:	ldr	x0, [x21, #120]
   384a4:	tbz	w0, #7, 38790 <aarch64_opcode_encode@@Base+0x620>
   384a8:	ldr	w0, [x21, #36]
   384ac:	bl	35760 <aarch64_get_operand_class@plt>
   384b0:	cmp	w0, #0x3
   384b4:	b.eq	38744 <aarch64_opcode_encode@@Base+0x5d4>  // b.none
   384b8:	ldr	w0, [x21, #32]
   384bc:	bl	35760 <aarch64_get_operand_class@plt>
   384c0:	cmp	w0, #0x3
   384c4:	mov	x1, #0x0                   	// #0
   384c8:	b.eq	38748 <aarch64_opcode_encode@@Base+0x5d8>  // b.none
   384cc:	adrp	x3, 53000 <xexit@@Base+0x508>
   384d0:	add	x3, x3, #0x263
   384d4:	add	x3, x3, #0x1f3
   384d8:	mov	w2, #0x1c0                 	// #448
   384dc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   384e0:	add	x1, x1, #0xb7e
   384e4:	b	38670 <aarch64_opcode_encode@@Base+0x500>
   384e8:	ldr	x1, [sp, #256]
   384ec:	ldrb	w2, [sp, #244]
   384f0:	neg	x0, x1
   384f4:	cmp	w2, #0x1d
   384f8:	b.ne	38510 <aarch64_opcode_encode@@Base+0x3a0>  // b.any
   384fc:	and	x0, x0, #0x1f
   38500:	str	x0, [sp, #256]
   38504:	mov	x0, #0x1f                  	// #31
   38508:	sub	x0, x0, x1
   3850c:	b	382fc <aarch64_opcode_encode@@Base+0x18c>
   38510:	and	x0, x0, #0x3f
   38514:	str	x0, [sp, #256]
   38518:	mov	x0, #0x3f                  	// #63
   3851c:	b	38508 <aarch64_opcode_encode@@Base+0x398>
   38520:	mov	x0, x19
   38524:	mov	w2, #0x2                   	// #2
   38528:	mov	w1, #0x3                   	// #3
   3852c:	bl	364fc <init_disassemble_info@@Base+0x494>
   38530:	mov	x0, x19
   38534:	mov	w2, #0x1                   	// #1
   38538:	mov	w1, #0x2                   	// #2
   3853c:	bl	364fc <init_disassemble_info@@Base+0x494>
   38540:	ldr	x0, [sp, #312]
   38544:	bl	358c0 <get_inverted_cond@plt>
   38548:	b	382fc <aarch64_opcode_encode@@Base+0x18c>
   3854c:	mov	x0, x19
   38550:	mov	w2, #0x1                   	// #1
   38554:	mov	w1, #0x3                   	// #3
   38558:	bl	364fc <init_disassemble_info@@Base+0x494>
   3855c:	mov	x0, x19
   38560:	mov	w2, #0x0                   	// #0
   38564:	mov	w1, #0x2                   	// #2
   38568:	bl	364fc <init_disassemble_info@@Base+0x494>
   3856c:	mov	x0, x19
   38570:	mov	w2, #0x0                   	// #0
   38574:	mov	w1, #0x1                   	// #1
   38578:	bl	364fc <init_disassemble_info@@Base+0x494>
   3857c:	mov	w0, #0x1f                  	// #31
   38580:	str	w0, [sp, #200]
   38584:	str	w0, [sp, #256]
   38588:	b	38540 <aarch64_opcode_encode@@Base+0x3d0>
   3858c:	ldr	x0, [sp, #256]
   38590:	ldr	x1, [sp, #312]
   38594:	add	x0, x0, x1
   38598:	sub	x0, x0, #0x1
   3859c:	b	382fc <aarch64_opcode_encode@@Base+0x18c>
   385a0:	ldr	x0, [sp, #256]
   385a4:	ldr	x1, [sp, #312]
   385a8:	neg	x0, x0
   385ac:	ldrb	w2, [sp, #244]
   385b0:	sub	x1, x1, #0x1
   385b4:	cmp	w2, #0x1d
   385b8:	b.ne	38620 <aarch64_opcode_encode@@Base+0x4b0>  // b.any
   385bc:	and	x0, x0, #0x1f
   385c0:	str	x0, [sp, #256]
   385c4:	str	x1, [sp, #312]
   385c8:	b	38300 <aarch64_opcode_encode@@Base+0x190>
   385cc:	mov	x0, x19
   385d0:	mov	w2, #0x2                   	// #2
   385d4:	mov	w1, #0x3                   	// #3
   385d8:	bl	364fc <init_disassemble_info@@Base+0x494>
   385dc:	mov	x0, x19
   385e0:	mov	w2, #0x1                   	// #1
   385e4:	mov	w1, #0x2                   	// #2
   385e8:	bl	364fc <init_disassemble_info@@Base+0x494>
   385ec:	mov	x0, x19
   385f0:	mov	w1, #0x1                   	// #1
   385f4:	mov	w2, #0x0                   	// #0
   385f8:	bl	364fc <init_disassemble_info@@Base+0x494>
   385fc:	mov	w0, #0x1f                  	// #31
   38600:	str	w0, [sp, #200]
   38604:	ldrb	w0, [sp, #244]
   38608:	ldr	x1, [sp, #312]
   3860c:	cmp	w0, #0x1d
   38610:	ldr	x0, [sp, #256]
   38614:	sub	x1, x1, #0x1
   38618:	neg	x0, x0
   3861c:	b	385b8 <aarch64_opcode_encode@@Base+0x448>
   38620:	and	x0, x0, #0x3f
   38624:	b	385c0 <aarch64_opcode_encode@@Base+0x450>
   38628:	mov	w0, #0x46                  	// #70
   3862c:	str	w0, [sp, #184]
   38630:	ldr	x20, [sp, #200]
   38634:	cmp	w1, #0x25
   38638:	ldrb	w0, [sp, #132]
   3863c:	add	x2, sp, #0x60
   38640:	cinv	x20, x20, eq  // eq = none
   38644:	cmp	w0, #0x1
   38648:	mov	x0, x20
   3864c:	cset	w1, eq  // eq = none
   38650:	bl	35a90 <aarch64_wide_constant_p@plt>
   38654:	cbnz	w0, 3867c <aarch64_opcode_encode@@Base+0x50c>
   38658:	adrp	x3, 53000 <xexit@@Base+0x508>
   3865c:	add	x3, x3, #0x263
   38660:	add	x3, x3, #0x1db
   38664:	mov	w2, #0x75e                 	// #1886
   38668:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3866c:	add	x1, x1, #0xbf7
   38670:	adrp	x0, 54000 <xexit@@Base+0x1508>
   38674:	add	x0, x0, #0x679
   38678:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   3867c:	ldr	w0, [sp, #96]
   38680:	mov	w1, #0x5                   	// #5
   38684:	str	w1, [sp, #216]
   38688:	lsr	x20, x20, x0
   3868c:	mov	w0, w0
   38690:	and	x20, x20, #0xffff
   38694:	str	x20, [sp, #200]
   38698:	str	x0, [sp, #224]
   3869c:	b	38300 <aarch64_opcode_encode@@Base+0x190>
   386a0:	mov	x0, x19
   386a4:	mov	w2, #0x1                   	// #1
   386a8:	mov	w1, #0x2                   	// #2
   386ac:	bl	364fc <init_disassemble_info@@Base+0x494>
   386b0:	mov	w0, #0x1f                  	// #31
   386b4:	str	w0, [sp, #200]
   386b8:	ldrb	w0, [sp, #232]
   386bc:	and	w0, w0, #0xfffffffe
   386c0:	strb	w0, [sp, #232]
   386c4:	b	38300 <aarch64_opcode_encode@@Base+0x190>
   386c8:	mov	x0, x19
   386cc:	mov	w2, #0x2                   	// #2
   386d0:	mov	w1, #0x3                   	// #3
   386d4:	bl	364fc <init_disassemble_info@@Base+0x494>
   386d8:	mov	x0, x19
   386dc:	mov	w2, #0x1                   	// #1
   386e0:	mov	w1, #0x2                   	// #2
   386e4:	bl	364fc <init_disassemble_info@@Base+0x494>
   386e8:	b	38300 <aarch64_opcode_encode@@Base+0x190>
   386ec:	ldrb	w0, [sp, #188]
   386f0:	strb	w0, [sp, #244]
   386f4:	str	xzr, [sp, #256]
   386f8:	b	38300 <aarch64_opcode_encode@@Base+0x190>
   386fc:	ldrb	w1, [x21, #48]
   38700:	tbz	w1, #0, 38718 <aarch64_opcode_encode@@Base+0x5a8>
   38704:	add	x25, x25, #0x4
   38708:	add	x21, x21, #0x38
   3870c:	cmp	x27, x25
   38710:	b.ne	38328 <aarch64_opcode_encode@@Base+0x1b8>  // b.any
   38714:	b	38330 <aarch64_opcode_encode@@Base+0x1c0>
   38718:	mov	w0, w0
   3871c:	madd	x0, x0, x28, x26
   38720:	ldr	w1, [x0, #16]
   38724:	tbz	w1, #0, 38704 <aarch64_opcode_encode@@Base+0x594>
   38728:	mov	x4, x22
   3872c:	mov	x3, x19
   38730:	mov	x2, x19
   38734:	mov	x1, x21
   38738:	bl	359d0 <aarch64_insert_operand@plt>
   3873c:	cbnz	w0, 38704 <aarch64_opcode_encode@@Base+0x594>
   38740:	b	381f8 <aarch64_opcode_encode@@Base+0x88>
   38744:	mov	x1, #0x1                   	// #1
   38748:	mov	x0, #0x38                  	// #56
   3874c:	mul	x1, x1, x0
   38750:	add	x0, sp, #0x84
   38754:	ldrb	w0, [x0, x1]
   38758:	sub	w0, w0, #0x6
   3875c:	and	w0, w0, #0xff
   38760:	cmp	w0, #0x2
   38764:	b.hi	387f4 <aarch64_opcode_encode@@Base+0x684>  // b.pmore
   38768:	and	x0, x0, #0xff
   3876c:	adrp	x1, 53000 <xexit@@Base+0x508>
   38770:	add	x1, x1, #0x4bd
   38774:	mov	w3, #0x0                   	// #0
   38778:	ldrb	w2, [x1, x0]
   3877c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38780:	mov	x1, x19
   38784:	ldr	x0, [x0, #3944]
   38788:	add	x0, x0, #0x120
   3878c:	bl	36188 <init_disassemble_info@@Base+0x120>
   38790:	ldr	x25, [sp, #112]
   38794:	ldr	x0, [x25, #120]
   38798:	tbz	w0, #8, 38894 <aarch64_opcode_encode@@Base+0x724>
   3879c:	ldr	w0, [x25, #32]
   387a0:	bl	35760 <aarch64_get_operand_class@plt>
   387a4:	cmp	w0, #0x6
   387a8:	b.ne	38808 <aarch64_opcode_encode@@Base+0x698>  // b.any
   387ac:	ldrb	w0, [x25, #56]
   387b0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   387b4:	and	w21, w0, #0xff
   387b8:	ldr	w0, [x25, #36]
   387bc:	bl	35760 <aarch64_get_operand_class@plt>
   387c0:	cmp	w0, #0x6
   387c4:	b.ne	38810 <aarch64_opcode_encode@@Base+0x6a0>  // b.any
   387c8:	ldrb	w0, [x25, #57]
   387cc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   387d0:	and	w0, w0, #0xff
   387d4:	cmp	w0, #0x0
   387d8:	ccmp	w0, w21, #0x0, eq  // eq = none
   387dc:	b.ne	38818 <aarch64_opcode_encode@@Base+0x6a8>  // b.any
   387e0:	adrp	x3, 53000 <xexit@@Base+0x508>
   387e4:	add	x3, x3, #0x263
   387e8:	add	x3, x3, #0x22e
   387ec:	mov	w2, #0x1d4                 	// #468
   387f0:	b	384dc <aarch64_opcode_encode@@Base+0x36c>
   387f4:	adrp	x3, 53000 <xexit@@Base+0x508>
   387f8:	add	x3, x3, #0x263
   387fc:	add	x3, x3, #0x21a
   38800:	mov	w2, #0x5fb                 	// #1531
   38804:	b	38668 <aarch64_opcode_encode@@Base+0x4f8>
   38808:	mov	w21, #0x0                   	// #0
   3880c:	b	387b8 <aarch64_opcode_encode@@Base+0x648>
   38810:	mov	w0, #0x0                   	// #0
   38814:	b	387d4 <aarch64_opcode_encode@@Base+0x664>
   38818:	cbz	w21, 38868 <aarch64_opcode_encode@@Base+0x6f8>
   3881c:	cmp	w21, w0, lsl #1
   38820:	cset	w0, eq  // eq = none
   38824:	sxtw	x0, w0
   38828:	mov	x1, #0x38                  	// #56
   3882c:	mul	x0, x0, x1
   38830:	add	x1, sp, #0x84
   38834:	ldrb	w0, [x1, x0]
   38838:	sub	w1, w0, #0x5
   3883c:	cmp	w1, #0x4
   38840:	b.ls	38870 <aarch64_opcode_encode@@Base+0x700>  // b.plast
   38844:	adrp	x3, 53000 <xexit@@Base+0x508>
   38848:	add	x3, x3, #0x263
   3884c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38850:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38854:	add	x3, x3, #0x21a
   38858:	add	x1, x1, #0xbf7
   3885c:	add	x0, x0, #0xf9c
   38860:	mov	w2, #0x604                 	// #1540
   38864:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38868:	mov	w0, #0x1                   	// #1
   3886c:	b	38824 <aarch64_opcode_encode@@Base+0x6b4>
   38870:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   38874:	mov	w2, w0
   38878:	ldr	x1, [sp, #112]
   3887c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38880:	ldr	x0, [x0, #3944]
   38884:	ldr	w3, [x1, #12]
   38888:	mov	x1, x19
   3888c:	add	x0, x0, #0x40
   38890:	bl	36188 <init_disassemble_info@@Base+0x120>
   38894:	ldr	x0, [sp, #112]
   38898:	ldr	x1, [x0, #120]
   3889c:	tbz	w1, #9, 38978 <aarch64_opcode_encode@@Base+0x808>
   388a0:	str	xzr, [sp, #96]
   388a4:	ldrb	w21, [sp, #132]
   388a8:	ldr	w0, [x0, #32]
   388ac:	bl	35760 <aarch64_get_operand_class@plt>
   388b0:	cmp	w0, #0x4
   388b4:	b.ne	388c4 <aarch64_opcode_encode@@Base+0x754>  // b.any
   388b8:	sub	w0, w21, #0xd
   388bc:	cmp	w0, #0x8
   388c0:	b.ls	388e8 <aarch64_opcode_encode@@Base+0x778>  // b.plast
   388c4:	adrp	x3, 53000 <xexit@@Base+0x508>
   388c8:	add	x3, x3, #0x263
   388cc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   388d0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   388d4:	add	x3, x3, #0x21a
   388d8:	add	x1, x1, #0xbf7
   388dc:	add	x0, x0, #0xfe3
   388e0:	mov	w2, #0x611                 	// #1553
   388e4:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   388e8:	mov	w0, w21
   388ec:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   388f0:	mov	w25, w0
   388f4:	and	w2, w0, #0x1
   388f8:	ldr	x0, [sp, #112]
   388fc:	adrp	x21, 97000 <aarch64_operands@@Base+0x16bc0>
   38900:	mov	x1, x19
   38904:	ldr	x21, [x21, #3944]
   38908:	ldr	w3, [x0, #12]
   3890c:	add	x0, x21, #0x58
   38910:	bl	36188 <init_disassemble_info@@Base+0x120>
   38914:	asr	w0, w25, #1
   38918:	cmp	w25, #0x7
   3891c:	b.ls	38944 <aarch64_opcode_encode@@Base+0x7d4>  // b.plast
   38920:	adrp	x3, 53000 <xexit@@Base+0x508>
   38924:	add	x3, x3, #0x263
   38928:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3892c:	adrp	x0, 53000 <xexit@@Base+0x508>
   38930:	add	x3, x3, #0x21a
   38934:	add	x1, x1, #0xbf7
   38938:	add	x0, x0, #0x84
   3893c:	mov	w2, #0x622                 	// #1570
   38940:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38944:	ldr	w2, [x21, #348]
   38948:	add	w1, w0, #0x1
   3894c:	cmp	w1, w2
   38950:	b.gt	3895c <aarch64_opcode_encode@@Base+0x7ec>
   38954:	ldr	w2, [x21, #344]
   38958:	stp	w2, w1, [sp, #96]
   3895c:	ldr	x1, [sp, #112]
   38960:	mov	w2, #0x1                   	// #1
   38964:	lsl	w2, w2, w0
   38968:	add	x0, sp, #0x60
   3896c:	ldr	w3, [x1, #12]
   38970:	mov	x1, x19
   38974:	bl	36188 <init_disassemble_info@@Base+0x120>
   38978:	ldr	x0, [sp, #112]
   3897c:	ldr	x1, [x0, #120]
   38980:	tbz	w1, #10, 38a38 <aarch64_opcode_encode@@Base+0x8c8>
   38984:	add	x0, x0, #0x20
   38988:	mov	w1, #0x4                   	// #4
   3898c:	bl	35140 <aarch64_operand_index@plt>
   38990:	cmn	w0, #0x1
   38994:	b.eq	389c4 <aarch64_opcode_encode@@Base+0x854>  // b.none
   38998:	cmp	w0, #0x1
   3899c:	b.ls	389c8 <aarch64_opcode_encode@@Base+0x858>  // b.plast
   389a0:	adrp	x3, 53000 <xexit@@Base+0x508>
   389a4:	add	x3, x3, #0x263
   389a8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   389ac:	adrp	x0, 53000 <xexit@@Base+0x508>
   389b0:	add	x3, x3, #0x21a
   389b4:	add	x1, x1, #0xbf7
   389b8:	add	x0, x0, #0x99
   389bc:	mov	w2, #0x630                 	// #1584
   389c0:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   389c4:	mov	w0, #0x0                   	// #0
   389c8:	sxtw	x21, w0
   389cc:	ldr	x0, [sp, #112]
   389d0:	add	x1, x21, #0x8
   389d4:	ldr	w0, [x0, x1, lsl #2]
   389d8:	bl	35760 <aarch64_get_operand_class@plt>
   389dc:	cmp	w0, #0x1
   389e0:	b.eq	38a08 <aarch64_opcode_encode@@Base+0x898>  // b.none
   389e4:	adrp	x3, 53000 <xexit@@Base+0x508>
   389e8:	add	x3, x3, #0x263
   389ec:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   389f0:	adrp	x0, 53000 <xexit@@Base+0x508>
   389f4:	add	x3, x3, #0x21a
   389f8:	add	x1, x1, #0xbf7
   389fc:	add	x0, x0, #0xae
   38a00:	mov	w2, #0x631                 	// #1585
   38a04:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38a08:	mov	x0, #0x38                  	// #56
   38a0c:	add	x1, sp, #0x84
   38a10:	mul	x0, x21, x0
   38a14:	ldrb	w0, [x1, x0]
   38a18:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   38a1c:	mov	w2, w0
   38a20:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38a24:	mov	x1, x19
   38a28:	mov	w3, #0x0                   	// #0
   38a2c:	ldr	x0, [x0, #3944]
   38a30:	add	x0, x0, #0x58
   38a34:	bl	36188 <init_disassemble_info@@Base+0x120>
   38a38:	ldr	x0, [sp, #112]
   38a3c:	ldr	x1, [x0, #120]
   38a40:	tbz	w1, #11, 38ab8 <aarch64_opcode_encode@@Base+0x948>
   38a44:	str	xzr, [sp, #96]
   38a48:	ldr	w0, [x0, #32]
   38a4c:	bl	35760 <aarch64_get_operand_class@plt>
   38a50:	cmp	w0, #0x1
   38a54:	b.eq	38a7c <aarch64_opcode_encode@@Base+0x90c>  // b.none
   38a58:	adrp	x3, 53000 <xexit@@Base+0x508>
   38a5c:	add	x3, x3, #0x263
   38a60:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38a64:	adrp	x0, 53000 <xexit@@Base+0x508>
   38a68:	add	x3, x3, #0x21a
   38a6c:	add	x1, x1, #0xbf7
   38a70:	add	x0, x0, #0x104
   38a74:	mov	w2, #0x63c                 	// #1596
   38a78:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38a7c:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   38a80:	ldr	x1, [x1, #3944]
   38a84:	ldr	w2, [x1, #268]
   38a88:	cmp	w2, #0x0
   38a8c:	b.le	38a98 <aarch64_opcode_encode@@Base+0x928>
   38a90:	ldr	w1, [x1, #264]
   38a94:	stp	w1, w0, [sp, #96]
   38a98:	ldrb	w0, [sp, #132]
   38a9c:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   38aa0:	mov	w2, #0x1                   	// #1
   38aa4:	mov	x1, x19
   38aa8:	sub	w2, w2, w0
   38aac:	mov	w3, #0x0                   	// #0
   38ab0:	add	x0, sp, #0x60
   38ab4:	bl	36188 <init_disassemble_info@@Base+0x120>
   38ab8:	ldr	x0, [sp, #112]
   38abc:	ldr	x1, [x0, #120]
   38ac0:	tbz	w1, #22, 38cc0 <aarch64_opcode_encode@@Base+0xb50>
   38ac4:	ldr	w0, [x0, #20]
   38ac8:	sub	w2, w0, #0x3a
   38acc:	cmp	w2, #0x15
   38ad0:	b.hi	38cc0 <aarch64_opcode_encode@@Base+0xb50>  // b.pmore
   38ad4:	adrp	x1, 53000 <xexit@@Base+0x508>
   38ad8:	add	x1, x1, #0x224
   38adc:	ldrh	w1, [x1, w2, uxtw #1]
   38ae0:	adr	x2, 38aec <aarch64_opcode_encode@@Base+0x97c>
   38ae4:	add	x1, x2, w1, sxth #2
   38ae8:	br	x1
   38aec:	mov	x0, #0xf                   	// #15
   38af0:	movk	x0, #0x2, lsl #32
   38af4:	str	x0, [sp, #96]
   38af8:	ldrb	w0, [sp, #132]
   38afc:	sub	w0, w0, #0x6
   38b00:	and	w0, w0, #0xff
   38b04:	cmp	w0, #0x2
   38b08:	b.hi	38b34 <aarch64_opcode_encode@@Base+0x9c4>  // b.pmore
   38b0c:	adrp	x1, 53000 <xexit@@Base+0x508>
   38b10:	add	x1, x1, #0x263
   38b14:	and	x0, x0, #0xff
   38b18:	add	x1, x1, #0x25a
   38b1c:	mov	w3, #0x0                   	// #0
   38b20:	ldrb	w2, [x1, x0]
   38b24:	mov	x1, x19
   38b28:	add	x0, sp, #0x60
   38b2c:	bl	36188 <init_disassemble_info@@Base+0x120>
   38b30:	b	38cc0 <aarch64_opcode_encode@@Base+0xb50>
   38b34:	bl	356c0 <abort@plt>
   38b38:	sub	w1, w0, #0x3d
   38b3c:	ldrb	w2, [sp, #188]
   38b40:	ldrb	w0, [sp, #132]
   38b44:	cmp	w1, #0x2
   38b48:	str	xzr, [sp, #96]
   38b4c:	csel	w0, w0, w2, cc  // cc = lo, ul, last
   38b50:	cmp	w0, #0x13
   38b54:	ccmp	w0, #0x15, #0x4, ne  // ne = any
   38b58:	b.eq	38b80 <aarch64_opcode_encode@@Base+0xa10>  // b.none
   38b5c:	adrp	x3, 53000 <xexit@@Base+0x508>
   38b60:	add	x3, x3, #0x263
   38b64:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38b68:	adrp	x0, 53000 <xexit@@Base+0x508>
   38b6c:	add	x3, x3, #0x25d
   38b70:	add	x1, x1, #0xbf7
   38b74:	add	x0, x0, #0x158
   38b78:	mov	w2, #0x530                 	// #1328
   38b7c:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38b80:	cmp	w0, #0x13
   38b84:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38b88:	cset	w2, ne  // ne = any
   38b8c:	ldr	x0, [x0, #3944]
   38b90:	ldr	w1, [x0, #68]
   38b94:	cmp	w1, #0x0
   38b98:	b.le	38bac <aarch64_opcode_encode@@Base+0xa3c>
   38b9c:	ldr	w0, [x0, #64]
   38ba0:	str	w0, [sp, #96]
   38ba4:	mov	w0, #0x1                   	// #1
   38ba8:	str	w0, [sp, #100]
   38bac:	mov	w3, #0x0                   	// #0
   38bb0:	b	38b24 <aarch64_opcode_encode@@Base+0x9b4>
   38bb4:	ldrb	w0, [sp, #132]
   38bb8:	str	xzr, [sp, #96]
   38bbc:	cmp	w0, #0x7
   38bc0:	b.eq	38be8 <aarch64_opcode_encode@@Base+0xa78>  // b.none
   38bc4:	adrp	x3, 53000 <xexit@@Base+0x508>
   38bc8:	add	x3, x3, #0x263
   38bcc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   38bd0:	adrp	x0, 53000 <xexit@@Base+0x508>
   38bd4:	add	x3, x3, #0x26f
   38bd8:	add	x1, x1, #0xbf7
   38bdc:	add	x0, x0, #0x1a1
   38be0:	mov	w2, #0x53f                 	// #1343
   38be4:	b	381e0 <aarch64_opcode_encode@@Base+0x70>
   38be8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38bec:	ldr	x0, [x0, #3944]
   38bf0:	ldr	w1, [x0, #68]
   38bf4:	cmp	w1, #0x0
   38bf8:	b.le	38c0c <aarch64_opcode_encode@@Base+0xa9c>
   38bfc:	ldr	w0, [x0, #64]
   38c00:	str	w0, [sp, #96]
   38c04:	mov	w0, #0x1                   	// #1
   38c08:	str	w0, [sp, #100]
   38c0c:	mov	w3, #0x0                   	// #0
   38c10:	mov	w2, #0x1                   	// #1
   38c14:	b	38b24 <aarch64_opcode_encode@@Base+0x9b4>
   38c18:	adrp	x21, 97000 <aarch64_operands@@Base+0x16bc0>
   38c1c:	ldr	w2, [sp, #104]
   38c20:	mov	x1, x19
   38c24:	mov	w3, #0x0                   	// #0
   38c28:	ldr	x21, [x21, #3944]
   38c2c:	ldr	w25, [x21, #616]
   38c30:	ldr	w0, [x21, #620]
   38c34:	lsr	w2, w2, w25
   38c38:	mov	w25, #0xffffffff            	// #-1
   38c3c:	lsl	w25, w25, w0
   38c40:	bic	w25, w2, w25
   38c44:	mov	w2, w25
   38c48:	add	x0, x21, #0x260
   38c4c:	bl	36188 <init_disassemble_info@@Base+0x120>
   38c50:	mov	w2, w25
   38c54:	mov	x1, x19
   38c58:	add	x0, x21, #0x250
   38c5c:	mov	w3, #0x0                   	// #0
   38c60:	b	38b2c <aarch64_opcode_encode@@Base+0x9bc>
   38c64:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38c68:	ldr	w1, [sp, #104]
   38c6c:	ldr	x0, [x0, #3944]
   38c70:	ldr	w2, [x0, #688]
   38c74:	ldr	w3, [x0, #692]
   38c78:	lsr	w1, w1, w2
   38c7c:	mov	w2, #0xffffffff            	// #-1
   38c80:	add	x0, x0, #0x2c0
   38c84:	lsl	w2, w2, w3
   38c88:	mov	w3, #0x0                   	// #0
   38c8c:	bic	w2, w1, w2
   38c90:	mov	x1, x19
   38c94:	b	38b2c <aarch64_opcode_encode@@Base+0x9bc>
   38c98:	mov	x0, x19
   38c9c:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38ca0:	mov	w1, #0x1                   	// #1
   38ca4:	mov	w5, #0x74                  	// #116
   38ca8:	lsl	w1, w1, w0
   38cac:	mov	w4, #0x2b                  	// #43
   38cb0:	mov	x0, x19
   38cb4:	mov	w3, #0x2                   	// #2
   38cb8:	mov	w2, #0x0                   	// #0
   38cbc:	bl	36274 <init_disassemble_info@@Base+0x20c>
   38cc0:	ldr	x0, [sp, #112]
   38cc4:	ldr	w0, [x0, #16]
   38cc8:	sub	w0, w0, #0x47
   38ccc:	cmp	w0, #0x12
   38cd0:	b.hi	38d98 <aarch64_opcode_encode@@Base+0xc28>  // b.pmore
   38cd4:	adrp	x1, 53000 <xexit@@Base+0x508>
   38cd8:	add	x1, x1, #0x250
   38cdc:	ldrb	w0, [x1, w0, uxtw]
   38ce0:	adr	x1, 38cec <aarch64_opcode_encode@@Base+0xb7c>
   38ce4:	add	x0, x1, w0, sxtb #2
   38ce8:	br	x0
   38cec:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38cf0:	ldr	w1, [sp, #104]
   38cf4:	ldr	x0, [x0, #3944]
   38cf8:	ldr	w2, [x0, #712]
   38cfc:	ldr	w3, [x0, #716]
   38d00:	lsr	w1, w1, w2
   38d04:	b	38c7c <aarch64_opcode_encode@@Base+0xb0c>
   38d08:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38d0c:	ldr	w1, [sp, #104]
   38d10:	ldr	x0, [x0, #3944]
   38d14:	ldr	w2, [x0, #568]
   38d18:	ldr	w3, [x0, #572]
   38d1c:	lsr	w1, w1, w2
   38d20:	mov	w2, #0xffffffff            	// #-1
   38d24:	add	x0, x0, #0x260
   38d28:	lsl	w2, w2, w3
   38d2c:	mov	w3, #0x0                   	// #0
   38d30:	bic	w2, w1, w2
   38d34:	mov	x1, x19
   38d38:	b	38b2c <aarch64_opcode_encode@@Base+0x9bc>
   38d3c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38d40:	ldr	w1, [sp, #104]
   38d44:	ldr	x0, [x0, #3944]
   38d48:	ldr	w2, [x0, #616]
   38d4c:	ldr	w3, [x0, #620]
   38d50:	lsr	w1, w1, w2
   38d54:	b	38d20 <aarch64_opcode_encode@@Base+0xbb0>
   38d58:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38d5c:	ldr	w1, [sp, #104]
   38d60:	ldr	x0, [x0, #3944]
   38d64:	ldr	w2, [x0, #592]
   38d68:	ldr	w3, [x0, #596]
   38d6c:	lsr	w1, w1, w2
   38d70:	b	38d20 <aarch64_opcode_encode@@Base+0xbb0>
   38d74:	mov	x0, x19
   38d78:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38d7c:	mov	w5, #0x8                   	// #8
   38d80:	mov	w4, #0x44                  	// #68
   38d84:	mov	w1, w0
   38d88:	mov	w3, #0x2                   	// #2
   38d8c:	mov	w2, #0x0                   	// #0
   38d90:	mov	x0, x19
   38d94:	bl	36274 <init_disassemble_info@@Base+0x20c>
   38d98:	ldr	x6, [x20, #136]
   38d9c:	ldr	w1, [x23]
   38da0:	cbnz	x6, 38ef0 <aarch64_opcode_encode@@Base+0xd80>
   38da4:	ldr	w1, [x23]
   38da8:	mov	x5, x24
   38dac:	mov	x4, x22
   38db0:	mov	x0, x19
   38db4:	mov	w3, #0x1                   	// #1
   38db8:	mov	x2, #0x0                   	// #0
   38dbc:	bl	35290 <verify_constraints@plt>
   38dc0:	sub	w0, w0, #0x1
   38dc4:	cmp	w0, #0x2
   38dc8:	b.ls	381f8 <aarch64_opcode_encode@@Base+0x88>  // b.plast
   38dcc:	b	3822c <aarch64_opcode_encode@@Base+0xbc>
   38dd0:	mov	x0, x19
   38dd4:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38dd8:	mov	w5, #0x8                   	// #8
   38ddc:	mov	w4, #0x45                  	// #69
   38de0:	b	38d84 <aarch64_opcode_encode@@Base+0xc14>
   38de4:	mov	x0, x19
   38de8:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38dec:	mov	w2, w0
   38df0:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38df4:	mov	x1, x19
   38df8:	mov	w3, #0x0                   	// #0
   38dfc:	ldr	x0, [x0, #3944]
   38e00:	add	x0, x0, #0x218
   38e04:	bl	36188 <init_disassemble_info@@Base+0x120>
   38e08:	b	38d98 <aarch64_opcode_encode@@Base+0xc28>
   38e0c:	mov	x0, x19
   38e10:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38e14:	mov	w2, w0
   38e18:	mov	w3, #0x0                   	// #0
   38e1c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38e20:	mov	x1, x19
   38e24:	ldr	x0, [x0, #3944]
   38e28:	add	x0, x0, #0x40
   38e2c:	b	38e04 <aarch64_opcode_encode@@Base+0xc94>
   38e30:	mov	x0, x19
   38e34:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38e38:	mov	w3, #0x0                   	// #0
   38e3c:	add	w2, w0, #0x1
   38e40:	b	38e1c <aarch64_opcode_encode@@Base+0xcac>
   38e44:	mov	x0, x19
   38e48:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38e4c:	mov	w2, w0
   38e50:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38e54:	mov	x1, x19
   38e58:	mov	w3, #0x0                   	// #0
   38e5c:	ldr	x0, [x0, #3944]
   38e60:	add	x0, x0, #0x380
   38e64:	b	38e04 <aarch64_opcode_encode@@Base+0xc94>
   38e68:	mov	x0, x19
   38e6c:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38e70:	mov	w2, w0
   38e74:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38e78:	mov	x1, x19
   38e7c:	mov	w3, #0x0                   	// #0
   38e80:	ldr	x0, [x0, #3944]
   38e84:	add	x0, x0, #0x390
   38e88:	b	38e04 <aarch64_opcode_encode@@Base+0xc94>
   38e8c:	mov	x0, x19
   38e90:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38e94:	add	w2, w0, #0x1
   38e98:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38e9c:	mov	x1, x19
   38ea0:	mov	w3, #0x0                   	// #0
   38ea4:	ldr	x0, [x0, #3944]
   38ea8:	add	x0, x0, #0x388
   38eac:	b	38e04 <aarch64_opcode_encode@@Base+0xc94>
   38eb0:	mov	x0, x19
   38eb4:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38eb8:	mov	w1, #0x1                   	// #1
   38ebc:	mov	w5, #0x70                  	// #112
   38ec0:	mov	w4, #0x76                  	// #118
   38ec4:	mov	w3, #0x2                   	// #2
   38ec8:	mov	w2, #0x0                   	// #0
   38ecc:	lsl	w1, w1, w0
   38ed0:	b	38d90 <aarch64_opcode_encode@@Base+0xc20>
   38ed4:	mov	x0, x19
   38ed8:	bl	360f8 <init_disassemble_info@@Base+0x90>
   38edc:	cmp	w0, #0x1
   38ee0:	mov	w2, #0x3                   	// #3
   38ee4:	mov	w3, #0x0                   	// #0
   38ee8:	csinc	w2, w2, w0, eq  // eq = none
   38eec:	b	38e1c <aarch64_opcode_encode@@Base+0xcac>
   38ef0:	mov	x5, x24
   38ef4:	mov	x4, x22
   38ef8:	mov	x0, x19
   38efc:	mov	w3, #0x1                   	// #1
   38f00:	mov	x2, #0x0                   	// #0
   38f04:	blr	x6
   38f08:	sub	w0, w0, #0x1
   38f0c:	cmp	w0, #0x2
   38f10:	b.hi	38da4 <aarch64_opcode_encode@@Base+0xc34>  // b.pmore
   38f14:	b	381f8 <aarch64_opcode_encode@@Base+0x88>
   38f18:	bic	w2, w1, w2
   38f1c:	ldr	w1, [x0]
   38f20:	lsr	w2, w2, w1
   38f24:	ldr	w1, [x0, #4]
   38f28:	mov	w0, #0xffffffff            	// #-1
   38f2c:	lsl	w0, w0, w1
   38f30:	bic	w0, w2, w0
   38f34:	ret
   38f38:	ldr	w5, [x0, #20]
   38f3c:	adrp	x8, 97000 <aarch64_operands@@Base+0x16bc0>
   38f40:	add	x6, x0, #0x14
   38f44:	add	x3, x0, #0x24
   38f48:	ldr	x8, [x8, #3944]
   38f4c:	mov	w7, w1
   38f50:	mov	w0, #0x0                   	// #0
   38f54:	cbnz	w5, 38f5c <aarch64_opcode_encode@@Base+0xdec>
   38f58:	ret
   38f5c:	stp	x29, x30, [sp, #-16]!
   38f60:	mov	x29, sp
   38f64:	add	x5, x8, w5, uxtw #3
   38f68:	mov	w1, w7
   38f6c:	mov	w2, #0x0                   	// #0
   38f70:	ldr	w4, [x5, #4]
   38f74:	lsl	w4, w0, w4
   38f78:	mov	x0, x5
   38f7c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   38f80:	add	x6, x6, #0x4
   38f84:	orr	w0, w4, w0
   38f88:	cmp	x6, x3
   38f8c:	b.eq	38f98 <aarch64_opcode_encode@@Base+0xe28>  // b.none
   38f90:	ldr	w5, [x6]
   38f94:	cbnz	w5, 38f64 <aarch64_opcode_encode@@Base+0xdf4>
   38f98:	ldp	x29, x30, [sp], #16
   38f9c:	ret
   38fa0:	stp	x29, x30, [sp, #-16]!
   38fa4:	mov	x5, x0
   38fa8:	mov	x4, x1
   38fac:	mov	x29, sp
   38fb0:	ldr	w6, [x0, #20]
   38fb4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   38fb8:	mov	w1, w2
   38fbc:	mov	w2, #0x0                   	// #0
   38fc0:	ldr	x0, [x0, #3944]
   38fc4:	add	x0, x0, x6, lsl #3
   38fc8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   38fcc:	str	w0, [x4, #16]
   38fd0:	ldrb	w0, [x4, #28]
   38fd4:	ldr	w1, [x5, #16]
   38fd8:	and	w0, w0, #0xfffffff9
   38fdc:	orr	w0, w0, #0x4
   38fe0:	strb	w0, [x4, #28]
   38fe4:	ubfx	x1, x1, #5, #3
   38fe8:	madd	w1, w1, w3, w3
   38fec:	stp	w1, wzr, [x4, #20]
   38ff0:	cbz	x3, 38ffc <aarch64_opcode_encode@@Base+0xe8c>
   38ff4:	mov	w0, #0xf                   	// #15
   38ff8:	str	w0, [x4, #32]
   38ffc:	ldrb	w2, [x4, #36]
   39000:	cmp	w1, #0x0
   39004:	cset	w1, ne  // ne = any
   39008:	mov	x0, #0x1                   	// #1
   3900c:	and	w2, w2, #0xfffffffc
   39010:	orr	w1, w2, w1
   39014:	strb	w1, [x4, #36]
   39018:	ldp	x29, x30, [sp], #16
   3901c:	str	x0, [x4, #40]
   39020:	ret
   39024:	mov	x5, x0
   39028:	stp	x29, x30, [sp, #-16]!
   3902c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   39030:	mov	x29, sp
   39034:	ldr	w6, [x5, #20]
   39038:	mov	x4, x1
   3903c:	ldr	x0, [x0, #3944]
   39040:	mov	w1, w2
   39044:	mov	w2, #0x0                   	// #0
   39048:	add	x0, x0, x6, lsl #3
   3904c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39050:	ldp	x29, x30, [sp], #16
   39054:	str	w0, [x4, #16]
   39058:	ldr	w0, [x5, #16]
   3905c:	ubfx	x0, x0, #5, #3
   39060:	lsl	w3, w3, w0
   39064:	ldrb	w0, [x4, #28]
   39068:	stp	w3, wzr, [x4, #20]
   3906c:	and	w0, w0, #0xfffffff9
   39070:	orr	w0, w0, #0x4
   39074:	strb	w0, [x4, #28]
   39078:	ldrb	w0, [x4, #36]
   3907c:	and	w0, w0, #0xfffffffc
   39080:	strb	w0, [x4, #36]
   39084:	mov	w0, #0x1                   	// #1
   39088:	ret
   3908c:	stp	x29, x30, [sp, #-16]!
   39090:	adrp	x6, 97000 <aarch64_operands@@Base+0x16bc0>
   39094:	mov	x4, x1
   39098:	mov	x29, sp
   3909c:	ldr	x6, [x6, #3944]
   390a0:	mov	w7, w2
   390a4:	mov	x5, x0
   390a8:	ldr	w0, [x0, #20]
   390ac:	mov	w1, w7
   390b0:	mov	w2, #0x0                   	// #0
   390b4:	add	x0, x6, x0, lsl #3
   390b8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   390bc:	str	w0, [x4, #16]
   390c0:	mov	w1, w7
   390c4:	ldr	w0, [x5, #24]
   390c8:	mov	w2, #0x0                   	// #0
   390cc:	add	x0, x6, x0, lsl #3
   390d0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   390d4:	mov	w5, #0x1                   	// #1
   390d8:	stp	w0, w5, [x4, #20]
   390dc:	ldrb	w0, [x4, #28]
   390e0:	mov	w1, w7
   390e4:	str	w3, [x4, #32]
   390e8:	mov	w2, #0x0                   	// #0
   390ec:	and	w0, w0, #0xfffffff9
   390f0:	orr	w0, w0, #0x4
   390f4:	strb	w0, [x4, #28]
   390f8:	add	x0, x6, #0x350
   390fc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39100:	mov	w0, w0
   39104:	str	x0, [x4, #40]
   39108:	cmp	w3, #0x5
   3910c:	b.ne	39118 <aarch64_opcode_encode@@Base+0xfa8>  // b.any
   39110:	cmp	x0, #0x0
   39114:	cset	w5, ne  // ne = any
   39118:	cmp	x0, #0x0
   3911c:	ldrb	w1, [x4, #36]
   39120:	cset	w0, ne  // ne = any
   39124:	and	w1, w1, #0xfffffffc
   39128:	orr	w0, w5, w0, lsl #1
   3912c:	orr	w0, w0, w1
   39130:	strb	w0, [x4, #36]
   39134:	mov	w0, #0x1                   	// #1
   39138:	ldp	x29, x30, [sp], #16
   3913c:	ret
   39140:	stp	x29, x30, [sp, #-48]!
   39144:	mov	x29, sp
   39148:	stp	x19, x20, [sp, #16]
   3914c:	mov	w20, w0
   39150:	mov	x19, x1
   39154:	stp	x21, x22, [sp, #32]
   39158:	mov	w21, w2
   3915c:	add	x22, x1, #0x28
   39160:	ldr	w0, [x19]
   39164:	cbz	w0, 39198 <aarch64_opcode_encode@@Base+0x1028>
   39168:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   3916c:	eor	w0, w0, w20
   39170:	tst	w0, w21
   39174:	b.ne	3918c <aarch64_opcode_encode@@Base+0x101c>  // b.any
   39178:	ldr	w0, [x19]
   3917c:	ldp	x19, x20, [sp, #16]
   39180:	ldp	x21, x22, [sp, #32]
   39184:	ldp	x29, x30, [sp], #48
   39188:	ret
   3918c:	add	x19, x19, #0x4
   39190:	cmp	x19, x22
   39194:	b.ne	39160 <aarch64_opcode_encode@@Base+0xff0>  // b.any
   39198:	mov	w0, #0x0                   	// #0
   3919c:	b	3917c <aarch64_opcode_encode@@Base+0x100c>
   391a0:	ldr	x0, [x0, #72]
   391a4:	ldr	x1, [x0, w1, sxtw #3]
   391a8:	ldrb	w0, [x1, #72]
   391ac:	and	w0, w0, #0xf
   391b0:	cmp	w0, #0x2
   391b4:	b.ne	391c4 <aarch64_opcode_encode@@Base+0x1054>  // b.any
   391b8:	str	wzr, [x2]
   391bc:	mov	w0, #0x1                   	// #1
   391c0:	ret
   391c4:	ldr	x1, [x1, #8]
   391c8:	ldrb	w0, [x1]
   391cc:	cmp	w0, #0x24
   391d0:	b.ne	39208 <aarch64_opcode_encode@@Base+0x1098>  // b.any
   391d4:	ldrb	w0, [x1, #1]
   391d8:	mov	w3, #0x64                  	// #100
   391dc:	cmp	w0, #0x78
   391e0:	ccmp	w0, w3, #0x4, ne  // ne = any
   391e4:	b.ne	39208 <aarch64_opcode_encode@@Base+0x1098>  // b.any
   391e8:	ldrb	w1, [x1, #2]
   391ec:	cmp	w1, #0x2e
   391f0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   391f4:	b.ne	39208 <aarch64_opcode_encode@@Base+0x1098>  // b.any
   391f8:	cmp	w0, #0x78
   391fc:	cset	w0, ne  // ne = any
   39200:	str	w0, [x2]
   39204:	b	391bc <aarch64_opcode_encode@@Base+0x104c>
   39208:	mov	w0, #0x0                   	// #0
   3920c:	b	391c0 <aarch64_opcode_encode@@Base+0x1050>
   39210:	adrp	x3, 53000 <xexit@@Base+0x508>
   39214:	add	x3, x3, #0xc28
   39218:	stp	x29, x30, [sp, #-32]!
   3921c:	cmp	w0, #0x10
   39220:	mov	x29, sp
   39224:	ldp	x4, x5, [x3]
   39228:	stp	x4, x5, [sp, #16]
   3922c:	b.ls	3924c <aarch64_opcode_encode@@Base+0x10dc>  // b.plast
   39230:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   39234:	adrp	x0, 54000 <xexit@@Base+0x1508>
   39238:	add	x3, x3, #0x10
   3923c:	add	x1, x1, #0xb7e
   39240:	add	x0, x0, #0x679
   39244:	mov	w2, #0x200                 	// #512
   39248:	bl	35b10 <__assert_fail@plt>
   3924c:	sub	w0, w0, #0x1
   39250:	add	x1, sp, #0x10
   39254:	ldrb	w0, [x1, x0]
   39258:	cmp	w0, #0xff
   3925c:	b.ne	3927c <aarch64_opcode_encode@@Base+0x110c>  // b.any
   39260:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   39264:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   39268:	add	x3, x3, #0x10
   3926c:	add	x1, x1, #0xb7e
   39270:	add	x0, x0, #0xc1c
   39274:	mov	w2, #0x203                 	// #515
   39278:	b	39248 <aarch64_opcode_encode@@Base+0x10d8>
   3927c:	ldp	x29, x30, [sp], #32
   39280:	ret
   39284:	stp	x29, x30, [sp, #-16]!
   39288:	adrp	x3, 53000 <xexit@@Base+0x508>
   3928c:	add	x3, x3, #0xc28
   39290:	mov	x29, sp
   39294:	adrp	x1, 53000 <xexit@@Base+0x508>
   39298:	adrp	x0, 53000 <xexit@@Base+0x508>
   3929c:	add	x3, x3, #0x1a
   392a0:	add	x1, x1, #0x4e6
   392a4:	add	x0, x0, #0x502
   392a8:	mov	w2, #0xba                  	// #186
   392ac:	bl	35b10 <__assert_fail@plt>
   392b0:	stp	x29, x30, [sp, #-32]!
   392b4:	mov	x29, sp
   392b8:	str	x19, [sp, #16]
   392bc:	mov	x19, x0
   392c0:	ldr	w0, [x0, #32]
   392c4:	bl	35760 <aarch64_get_operand_class@plt>
   392c8:	cmp	w0, #0x1
   392cc:	b.eq	3930c <aarch64_opcode_encode@@Base+0x119c>  // b.none
   392d0:	ldr	w0, [x19, #36]
   392d4:	bl	35760 <aarch64_get_operand_class@plt>
   392d8:	mov	w1, w0
   392dc:	mov	w0, #0x1                   	// #1
   392e0:	cmp	w1, w0
   392e4:	b.eq	39310 <aarch64_opcode_encode@@Base+0x11a0>  // b.none
   392e8:	adrp	x3, 53000 <xexit@@Base+0x508>
   392ec:	add	x3, x3, #0xc28
   392f0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   392f4:	adrp	x0, 54000 <xexit@@Base+0x1508>
   392f8:	add	x3, x3, #0x26
   392fc:	add	x1, x1, #0xb7e
   39300:	add	x0, x0, #0x679
   39304:	mov	w2, #0x1ab                 	// #427
   39308:	bl	35b10 <__assert_fail@plt>
   3930c:	mov	w0, #0x0                   	// #0
   39310:	ldr	x19, [sp, #16]
   39314:	ldp	x29, x30, [sp], #32
   39318:	ret
   3931c:	stp	x29, x30, [sp, #-32]!
   39320:	cmp	w0, #0x4
   39324:	mov	x29, sp
   39328:	stp	x19, x20, [sp, #16]
   3932c:	b.ls	39354 <aarch64_opcode_encode@@Base+0x11e4>  // b.plast
   39330:	adrp	x3, 53000 <xexit@@Base+0x508>
   39334:	add	x3, x3, #0xc28
   39338:	adrp	x1, 53000 <xexit@@Base+0x508>
   3933c:	adrp	x0, 53000 <xexit@@Base+0x508>
   39340:	add	x3, x3, #0x49
   39344:	add	x1, x1, #0x4e6
   39348:	add	x0, x0, #0x509
   3934c:	mov	w2, #0xe5                  	// #229
   39350:	bl	35b10 <__assert_fail@plt>
   39354:	mov	w19, w0
   39358:	add	w20, w0, #0x5
   3935c:	mov	w0, w20
   39360:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   39364:	cmp	w0, w19
   39368:	b.ne	39330 <aarch64_opcode_encode@@Base+0x11c0>  // b.any
   3936c:	mov	w0, w20
   39370:	ldp	x19, x20, [sp, #16]
   39374:	ldp	x29, x30, [sp], #32
   39378:	ret
   3937c:	stp	x29, x30, [sp, #-32]!
   39380:	mov	x29, sp
   39384:	stp	x19, x20, [sp, #16]
   39388:	add	w20, w0, #0xd
   3938c:	mov	w19, w0
   39390:	cmp	w20, #0xe
   39394:	b.ls	3939c <aarch64_opcode_encode@@Base+0x122c>  // b.plast
   39398:	add	w20, w0, #0xe
   3939c:	cmp	w19, #0x8
   393a0:	b.ls	393c8 <aarch64_opcode_encode@@Base+0x1258>  // b.plast
   393a4:	adrp	x3, 53000 <xexit@@Base+0x508>
   393a8:	add	x3, x3, #0xc28
   393ac:	adrp	x1, 53000 <xexit@@Base+0x508>
   393b0:	adrp	x0, 53000 <xexit@@Base+0x508>
   393b4:	add	x3, x3, #0x67
   393b8:	add	x1, x1, #0x4e6
   393bc:	add	x0, x0, #0x553
   393c0:	mov	w2, #0xda                  	// #218
   393c4:	bl	35b10 <__assert_fail@plt>
   393c8:	mov	w0, w20
   393cc:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   393d0:	cmp	w0, w19
   393d4:	b.ne	393a4 <aarch64_opcode_encode@@Base+0x1234>  // b.any
   393d8:	mov	w0, w20
   393dc:	ldp	x19, x20, [sp, #16]
   393e0:	ldp	x29, x30, [sp], #32
   393e4:	ret
   393e8:	stp	x29, x30, [sp, #-32]!
   393ec:	cmp	w0, #0x1
   393f0:	mov	x29, sp
   393f4:	stp	x19, x20, [sp, #16]
   393f8:	b.ls	39420 <aarch64_opcode_encode@@Base+0x12b0>  // b.plast
   393fc:	adrp	x3, 53000 <xexit@@Base+0x508>
   39400:	add	x3, x3, #0xc28
   39404:	adrp	x1, 53000 <xexit@@Base+0x508>
   39408:	adrp	x0, 53000 <xexit@@Base+0x508>
   3940c:	add	x3, x3, #0x85
   39410:	add	x1, x1, #0x4e6
   39414:	add	x0, x0, #0x59d
   39418:	mov	w2, #0xc8                  	// #200
   3941c:	bl	35b10 <__assert_fail@plt>
   39420:	mov	w19, w0
   39424:	add	w20, w0, #0x1
   39428:	mov	w0, w20
   3942c:	bl	35410 <aarch64_get_qualifier_standard_value@plt>
   39430:	cmp	w0, w19
   39434:	b.ne	393fc <aarch64_opcode_encode@@Base+0x128c>  // b.any
   39438:	mov	w0, w20
   3943c:	ldp	x19, x20, [sp, #16]
   39440:	ldp	x29, x30, [sp], #32
   39444:	ret
   39448:	stp	x29, x30, [sp, #-64]!
   3944c:	mov	x29, sp
   39450:	stp	x19, x20, [sp, #16]
   39454:	sxtw	x20, w1
   39458:	mov	x1, #0x38                  	// #56
   3945c:	str	x21, [sp, #32]
   39460:	madd	x1, x20, x1, x0
   39464:	ldrb	w19, [x1, #28]
   39468:	cbz	w19, 39490 <aarch64_opcode_encode@@Base+0x1320>
   3946c:	adrp	x3, 53000 <xexit@@Base+0x508>
   39470:	add	x3, x3, #0xc28
   39474:	adrp	x1, 53000 <xexit@@Base+0x508>
   39478:	adrp	x0, 53000 <xexit@@Base+0x508>
   3947c:	add	x3, x3, #0xa3
   39480:	add	x1, x1, #0x4e6
   39484:	add	x0, x0, #0x5e7
   39488:	mov	w2, #0xf4                  	// #244
   3948c:	bl	35b10 <__assert_fail@plt>
   39490:	ldr	x1, [x0, #8]
   39494:	add	x21, sp, #0x38
   39498:	mov	x2, x20
   3949c:	mov	x3, x21
   394a0:	add	x1, x1, #0x38
   394a4:	bl	353a0 <aarch64_find_best_match@plt>
   394a8:	cbz	w0, 394b0 <aarch64_opcode_encode@@Base+0x1340>
   394ac:	ldrb	w19, [x21, x20]
   394b0:	mov	w0, w19
   394b4:	ldp	x19, x20, [sp, #16]
   394b8:	ldr	x21, [sp, #32]
   394bc:	ldp	x29, x30, [sp], #64
   394c0:	ret
   394c4:	stp	x29, x30, [sp, #-32]!
   394c8:	mov	x29, sp
   394cc:	stp	x19, x20, [sp, #16]
   394d0:	mov	x20, x0
   394d4:	sxtw	x19, w1
   394d8:	ldr	x0, [x0, #8]
   394dc:	bl	351b0 <aarch64_num_of_operands@plt>
   394e0:	cmp	w0, w19
   394e4:	b.gt	3950c <aarch64_opcode_encode@@Base+0x139c>
   394e8:	adrp	x3, 53000 <xexit@@Base+0x508>
   394ec:	add	x3, x3, #0xc28
   394f0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   394f4:	adrp	x0, 53000 <xexit@@Base+0x508>
   394f8:	add	x3, x3, #0xba
   394fc:	add	x1, x1, #0xb7e
   39500:	add	x0, x0, #0x61b
   39504:	mov	w2, #0x148                 	// #328
   39508:	bl	35b10 <__assert_fail@plt>
   3950c:	mov	x0, #0x38                  	// #56
   39510:	madd	x19, x19, x0, x20
   39514:	strb	wzr, [x19, #28]
   39518:	ldp	x19, x20, [sp, #16]
   3951c:	ldp	x29, x30, [sp], #32
   39520:	ret
   39524:	stp	x29, x30, [sp, #-16]!
   39528:	adrp	x3, 53000 <xexit@@Base+0x508>
   3952c:	add	x3, x3, #0xc28
   39530:	mov	x29, sp
   39534:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   39538:	adrp	x0, 53000 <xexit@@Base+0x508>
   3953c:	add	x3, x3, #0xd2
   39540:	add	x1, x1, #0xb7e
   39544:	add	x0, x0, #0x653
   39548:	mov	w2, #0x1f0                 	// #496
   3954c:	bl	35b10 <__assert_fail@plt>
   39550:	mov	x0, x2
   39554:	ldr	w2, [x2, #172]
   39558:	cmp	w2, #0x2
   3955c:	b.eq	3958c <aarch64_opcode_encode@@Base+0x141c>  // b.none
   39560:	cmp	w2, #0x4
   39564:	b.eq	395a0 <aarch64_opcode_encode@@Base+0x1430>  // b.none
   39568:	cmp	w2, #0x1
   3956c:	b.ne	395b4 <aarch64_opcode_encode@@Base+0x1444>  // b.any
   39570:	ldr	x3, [x0]
   39574:	mov	w2, w1
   39578:	adrp	x1, 53000 <xexit@@Base+0x508>
   3957c:	add	x1, x1, #0x6a4
   39580:	ldr	x0, [x0, #8]
   39584:	mov	x16, x3
   39588:	br	x16
   3958c:	mov	w2, w1
   39590:	adrp	x1, 53000 <xexit@@Base+0x508>
   39594:	add	x1, x1, #0x6b1
   39598:	ldr	x3, [x0]
   3959c:	b	39580 <aarch64_opcode_encode@@Base+0x1410>
   395a0:	mov	w2, w1
   395a4:	adrp	x1, 53000 <xexit@@Base+0x508>
   395a8:	add	x1, x1, #0x6bf
   395ac:	ldr	x3, [x0]
   395b0:	b	39580 <aarch64_opcode_encode@@Base+0x1410>
   395b4:	stp	x29, x30, [sp, #-16]!
   395b8:	mov	x29, sp
   395bc:	bl	356c0 <abort@plt>
   395c0:	stp	x29, x30, [sp, #-48]!
   395c4:	mov	x29, sp
   395c8:	stp	x19, x20, [sp, #16]
   395cc:	mov	x20, x0
   395d0:	mov	x19, x1
   395d4:	ldr	x0, [x1, #8]
   395d8:	str	x21, [sp, #32]
   395dc:	mov	w1, #0x2e                  	// #46
   395e0:	ldr	x21, [x0]
   395e4:	mov	x0, x21
   395e8:	bl	35890 <strchr@plt>
   395ec:	cbz	x0, 395f8 <aarch64_opcode_encode@@Base+0x1488>
   395f0:	ldr	x1, [x19, #16]
   395f4:	cbnz	x1, 3961c <aarch64_opcode_encode@@Base+0x14ac>
   395f8:	adrp	x3, 53000 <xexit@@Base+0x508>
   395fc:	add	x3, x3, #0xc28
   39600:	adrp	x1, 53000 <xexit@@Base+0x508>
   39604:	adrp	x0, 53000 <xexit@@Base+0x508>
   39608:	add	x3, x3, #0xe4
   3960c:	add	x1, x1, #0x4e6
   39610:	add	x0, x0, #0x6cc
   39614:	mov	w2, #0xc19                 	// #3097
   39618:	bl	35b10 <__assert_fail@plt>
   3961c:	sub	x19, x0, x21
   39620:	cmp	x19, #0x7
   39624:	b.ls	3964c <aarch64_opcode_encode@@Base+0x14dc>  // b.plast
   39628:	adrp	x3, 53000 <xexit@@Base+0x508>
   3962c:	add	x3, x3, #0xc28
   39630:	adrp	x1, 53000 <xexit@@Base+0x508>
   39634:	adrp	x0, 53000 <xexit@@Base+0x508>
   39638:	add	x3, x3, #0xe4
   3963c:	add	x1, x1, #0x4e6
   39640:	add	x0, x0, #0x6de
   39644:	mov	w2, #0xc1b                 	// #3099
   39648:	b	39618 <aarch64_opcode_encode@@Base+0x14a8>
   3964c:	mov	x2, x19
   39650:	mov	x1, x21
   39654:	mov	x0, x20
   39658:	bl	35ad0 <strncpy@plt>
   3965c:	strb	wzr, [x20, x19]
   39660:	ldp	x19, x20, [sp, #16]
   39664:	ldr	x21, [sp, #32]
   39668:	ldp	x29, x30, [sp], #48
   3966c:	ret

0000000000039670 <extract_fields@@Base>:
   39670:	stp	x29, x30, [sp, #-96]!
   39674:	mov	w8, w0
   39678:	cmp	w2, #0x5
   3967c:	add	x0, sp, #0x60
   39680:	mov	x29, sp
   39684:	stp	x0, x0, [sp, #16]
   39688:	add	x0, sp, #0x30
   3968c:	str	x0, [sp, #32]
   39690:	mov	w0, #0xffffffd8            	// #-40
   39694:	str	w0, [sp, #40]
   39698:	str	wzr, [sp, #44]
   3969c:	stp	x2, x3, [sp, #48]
   396a0:	stp	x4, x5, [sp, #64]
   396a4:	stp	x6, x7, [sp, #80]
   396a8:	b.hi	396dc <extract_fields@@Base+0x6c>  // b.pmore
   396ac:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   396b0:	mov	w9, w1
   396b4:	add	x6, sp, #0x60
   396b8:	mov	w3, w2
   396bc:	ldr	x5, [x5, #3944]
   396c0:	mov	w2, #0x0                   	// #0
   396c4:	sub	w3, w3, #0x1
   396c8:	cmn	w3, #0x1
   396cc:	b.ne	39700 <extract_fields@@Base+0x90>  // b.any
   396d0:	mov	w0, w2
   396d4:	ldp	x29, x30, [sp], #96
   396d8:	ret
   396dc:	adrp	x3, 53000 <xexit@@Base+0x508>
   396e0:	add	x3, x3, #0xc28
   396e4:	adrp	x1, 53000 <xexit@@Base+0x508>
   396e8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   396ec:	add	x3, x3, #0xf6
   396f0:	add	x1, x1, #0x4e6
   396f4:	add	x0, x0, #0xc13
   396f8:	mov	w2, #0x94                  	// #148
   396fc:	bl	35b10 <__assert_fail@plt>
   39700:	ldr	w0, [sp, #40]
   39704:	ldr	x4, [sp, #16]
   39708:	tbnz	w0, #31, 3973c <extract_fields@@Base+0xcc>
   3970c:	add	x0, x4, #0xb
   39710:	and	x0, x0, #0xfffffffffffffff8
   39714:	str	x0, [sp, #16]
   39718:	ldr	w4, [x4]
   3971c:	mov	w1, w8
   39720:	add	x0, x5, x4, lsl #3
   39724:	ldr	w4, [x0, #4]
   39728:	lsl	w4, w2, w4
   3972c:	mov	w2, w9
   39730:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39734:	orr	w2, w4, w0
   39738:	b	396c4 <extract_fields@@Base+0x54>
   3973c:	add	w1, w0, #0x8
   39740:	str	w1, [sp, #40]
   39744:	cmp	w1, #0x0
   39748:	b.gt	3970c <extract_fields@@Base+0x9c>
   3974c:	add	x4, x6, w0, sxtw
   39750:	b	39718 <extract_fields@@Base+0xa8>
   39754:	stp	x29, x30, [sp, #-144]!
   39758:	cmp	x0, #0x0
   3975c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
   39760:	mov	x29, sp
   39764:	stp	x19, x20, [sp, #16]
   39768:	stp	x21, x22, [sp, #32]
   3976c:	stp	x23, x24, [sp, #48]
   39770:	stp	x25, x26, [sp, #64]
   39774:	stp	x27, x28, [sp, #80]
   39778:	b.ne	397a0 <extract_fields@@Base+0x130>  // b.any
   3977c:	adrp	x3, 53000 <xexit@@Base+0x508>
   39780:	add	x3, x3, #0xc28
   39784:	adrp	x1, 53000 <xexit@@Base+0x508>
   39788:	adrp	x0, 53000 <xexit@@Base+0x508>
   3978c:	add	x3, x3, #0x105
   39790:	add	x1, x1, #0x4e6
   39794:	add	x0, x0, #0x6e6
   39798:	mov	w2, #0xb4b                 	// #2891
   3979c:	bl	35b10 <__assert_fail@plt>
   397a0:	mov	x20, x0
   397a4:	mov	x19, x2
   397a8:	mov	w21, w1
   397ac:	mov	w23, w3
   397b0:	mov	w1, #0x0                   	// #0
   397b4:	mov	x22, x4
   397b8:	mov	x0, x19
   397bc:	mov	x2, #0x168                 	// #360
   397c0:	bl	354b0 <memset@plt>
   397c4:	ldp	w0, w1, [x20, #8]
   397c8:	eor	w0, w21, w0
   397cc:	tst	w0, w1
   397d0:	b.eq	397f8 <extract_fields@@Base+0x188>  // b.none
   397d4:	mov	w20, #0x0                   	// #0
   397d8:	mov	w0, w20
   397dc:	ldp	x19, x20, [sp, #16]
   397e0:	ldp	x21, x22, [sp, #32]
   397e4:	ldp	x23, x24, [sp, #48]
   397e8:	ldp	x25, x26, [sp, #64]
   397ec:	ldp	x27, x28, [sp, #80]
   397f0:	ldp	x29, x30, [sp], #144
   397f4:	ret
   397f8:	mov	x0, x19
   397fc:	str	x20, [x19, #8]
   39800:	add	x24, x20, #0x20
   39804:	mov	x1, #0x0                   	// #0
   39808:	str	w21, [x0], #24
   3980c:	mov	x25, x0
   39810:	ldr	w2, [x24, x1, lsl #2]
   39814:	cbnz	w2, 39858 <extract_fields@@Base+0x1e8>
   39818:	ldr	x0, [x20, #120]
   3981c:	mov	x1, #0xff0                 	// #4080
   39820:	movk	x1, #0x8c0, lsl #16
   39824:	tst	x0, x1
   39828:	b.ne	39874 <extract_fields@@Base+0x204>  // b.any
   3982c:	ldr	x0, [x19, #8]
   39830:	ldr	w0, [x0, #16]
   39834:	sub	w0, w0, #0x47
   39838:	cmp	w0, #0x12
   3983c:	b.hi	3a018 <extract_fields@@Base+0x9a8>  // b.pmore
   39840:	adrp	x1, 53000 <xexit@@Base+0x508>
   39844:	add	x1, x1, #0xb88
   39848:	ldrh	w0, [x1, w0, uxtw #1]
   3984c:	adr	x1, 39858 <extract_fields@@Base+0x1e8>
   39850:	add	x0, x1, w0, sxth #2
   39854:	br	x0
   39858:	str	w2, [x0]
   3985c:	add	x0, x0, #0x38
   39860:	stur	w1, [x0, #-48]
   39864:	add	x1, x1, #0x1
   39868:	cmp	x1, #0x6
   3986c:	b.ne	39810 <extract_fields@@Base+0x1a0>  // b.any
   39870:	b	39818 <extract_fields@@Base+0x1a8>
   39874:	tbz	w0, #4, 39898 <extract_fields@@Base+0x228>
   39878:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3987c:	mov	w1, w21
   39880:	mov	w2, #0x0                   	// #0
   39884:	ldr	x0, [x0, #3944]
   39888:	add	x0, x0, #0x8
   3988c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39890:	bl	35350 <get_cond_from_value@plt>
   39894:	str	x0, [x19, #16]
   39898:	ldr	x0, [x19, #8]
   3989c:	ldr	x1, [x0, #120]
   398a0:	tbnz	w1, #5, 3996c <extract_fields@@Base+0x2fc>
   398a4:	ldr	x0, [x19, #8]
   398a8:	ldr	x1, [x0, #120]
   398ac:	tbz	w1, #27, 398e0 <extract_fields@@Base+0x270>
   398b0:	bl	392b0 <aarch64_opcode_encode@@Base+0x1140>
   398b4:	sxtw	x26, w0
   398b8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   398bc:	ldr	w1, [x19]
   398c0:	mov	w2, #0x0                   	// #0
   398c4:	ldr	x0, [x0, #3944]
   398c8:	add	x0, x0, #0x1e0
   398cc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   398d0:	bl	393e8 <aarch64_opcode_encode@@Base+0x1278>
   398d4:	mov	x1, #0x38                  	// #56
   398d8:	madd	x26, x26, x1, x19
   398dc:	strb	w0, [x26, #28]
   398e0:	ldr	x27, [x19, #8]
   398e4:	ldr	x0, [x27, #120]
   398e8:	and	x26, x0, #0x40
   398ec:	tbz	w0, #6, 39a08 <extract_fields@@Base+0x398>
   398f0:	ldp	w1, w0, [x27, #12]
   398f4:	mov	w4, #0xb                   	// #11
   398f8:	mov	w2, #0x2                   	// #2
   398fc:	sub	w0, w0, #0x12
   39900:	cmp	w0, #0x4
   39904:	ldr	w0, [x19]
   39908:	cset	w26, cc  // cc = lo, ul, last
   3990c:	add	w26, w26, #0x8
   39910:	mov	w3, w26
   39914:	bl	353d0 <extract_fields@plt>
   39918:	mov	w27, w0
   3991c:	ldr	x0, [x19, #8]
   39920:	mov	w3, w26
   39924:	mov	w4, #0xb                   	// #11
   39928:	mov	w2, #0x2                   	// #2
   3992c:	mov	w1, #0x0                   	// #0
   39930:	ldr	w0, [x0, #12]
   39934:	mvn	w0, w0
   39938:	bl	353d0 <extract_fields@plt>
   3993c:	mov	w28, w0
   39940:	ldr	x0, [x19, #8]
   39944:	bl	35800 <aarch64_select_operand_for_sizeq_field_coding@plt>
   39948:	sxtw	x26, w0
   3994c:	cmp	w28, #0x7
   39950:	b.ne	399c8 <extract_fields@@Base+0x358>  // b.any
   39954:	mov	w0, w27
   39958:	bl	3937c <aarch64_opcode_encode@@Base+0x120c>
   3995c:	mov	x1, #0x38                  	// #56
   39960:	madd	x26, x26, x1, x19
   39964:	strb	w0, [x26, #28]
   39968:	b	3982c <extract_fields@@Base+0x1bc>
   3996c:	bl	392b0 <aarch64_opcode_encode@@Base+0x1140>
   39970:	adrp	x28, 97000 <aarch64_operands@@Base+0x16bc0>
   39974:	ldr	w1, [x19]
   39978:	mov	w2, #0x0                   	// #0
   3997c:	ldr	x28, [x28, #3944]
   39980:	sxtw	x26, w0
   39984:	add	x0, x28, #0x1d8
   39988:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3998c:	mov	w27, w0
   39990:	bl	393e8 <aarch64_opcode_encode@@Base+0x1278>
   39994:	mov	x1, #0x38                  	// #56
   39998:	madd	x26, x26, x1, x19
   3999c:	strb	w0, [x26, #28]
   399a0:	ldr	x0, [x19, #8]
   399a4:	ldr	x0, [x0, #120]
   399a8:	tbz	w0, #23, 398a4 <extract_fields@@Base+0x234>
   399ac:	ldr	w1, [x19]
   399b0:	add	x0, x28, #0x1c0
   399b4:	mov	w2, #0x0                   	// #0
   399b8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   399bc:	cmp	w27, w0
   399c0:	b.ne	397d4 <extract_fields@@Base+0x164>  // b.any
   399c4:	b	398a4 <extract_fields@@Base+0x234>
   399c8:	ldr	x3, [x19, #8]
   399cc:	add	x1, sp, #0x68
   399d0:	mov	x0, #0x0                   	// #0
   399d4:	add	x3, x3, x26
   399d8:	ldrb	w2, [x3, #56]
   399dc:	str	w2, [x1, x0, lsl #2]
   399e0:	cbz	w2, 399f4 <extract_fields@@Base+0x384>
   399e4:	add	x0, x0, #0x1
   399e8:	add	x3, x3, #0x6
   399ec:	cmp	x0, #0xa
   399f0:	b.ne	399d8 <extract_fields@@Base+0x368>  // b.any
   399f4:	mov	w2, w28
   399f8:	mov	w0, w27
   399fc:	bl	39140 <aarch64_opcode_encode@@Base+0xfd0>
   39a00:	cbnz	w0, 3995c <extract_fields@@Base+0x2ec>
   39a04:	b	397d4 <extract_fields@@Base+0x164>
   39a08:	tbz	w0, #7, 39a94 <extract_fields@@Base+0x424>
   39a0c:	ldr	w0, [x27, #36]
   39a10:	bl	35760 <aarch64_get_operand_class@plt>
   39a14:	cmp	w0, #0x3
   39a18:	b.eq	39a54 <extract_fields@@Base+0x3e4>  // b.none
   39a1c:	ldr	w0, [x27, #32]
   39a20:	bl	35760 <aarch64_get_operand_class@plt>
   39a24:	cmp	w0, #0x3
   39a28:	mov	x3, #0x0                   	// #0
   39a2c:	b.eq	39a58 <extract_fields@@Base+0x3e8>  // b.none
   39a30:	adrp	x3, 53000 <xexit@@Base+0x508>
   39a34:	add	x3, x3, #0xc28
   39a38:	add	x3, x3, #0x11b
   39a3c:	mov	w2, #0x1c0                 	// #448
   39a40:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   39a44:	adrp	x0, 54000 <xexit@@Base+0x1508>
   39a48:	add	x1, x1, #0xb7e
   39a4c:	add	x0, x0, #0x679
   39a50:	b	3979c <extract_fields@@Base+0x12c>
   39a54:	mov	x3, #0x1                   	// #1
   39a58:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   39a5c:	ldr	w1, [x19]
   39a60:	mov	w2, #0x0                   	// #0
   39a64:	ldr	x0, [x0, #3944]
   39a68:	add	x0, x0, #0x120
   39a6c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39a70:	cmp	w0, #0x1
   39a74:	b.eq	39af8 <extract_fields@@Base+0x488>  // b.none
   39a78:	cmp	w0, #0x3
   39a7c:	b.eq	39b08 <extract_fields@@Base+0x498>  // b.none
   39a80:	cbnz	w0, 397d4 <extract_fields@@Base+0x164>
   39a84:	mov	x0, #0x38                  	// #56
   39a88:	madd	x3, x3, x0, x19
   39a8c:	mov	w0, #0x7                   	// #7
   39a90:	strb	w0, [x3, #28]
   39a94:	ldr	x28, [x19, #8]
   39a98:	ldr	x0, [x28, #120]
   39a9c:	tbz	w0, #8, 39b8c <extract_fields@@Base+0x51c>
   39aa0:	ldr	w0, [x28, #32]
   39aa4:	bl	35760 <aarch64_get_operand_class@plt>
   39aa8:	cmp	w0, #0x6
   39aac:	b.ne	39b18 <extract_fields@@Base+0x4a8>  // b.any
   39ab0:	ldrb	w0, [x28, #56]
   39ab4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   39ab8:	and	w27, w0, #0xff
   39abc:	ldr	w0, [x28, #36]
   39ac0:	bl	35760 <aarch64_get_operand_class@plt>
   39ac4:	cmp	w0, #0x6
   39ac8:	b.ne	39b20 <extract_fields@@Base+0x4b0>  // b.any
   39acc:	ldrb	w0, [x28, #57]
   39ad0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   39ad4:	and	w0, w0, #0xff
   39ad8:	cmp	w0, #0x0
   39adc:	ccmp	w0, w27, #0x0, eq  // eq = none
   39ae0:	b.ne	39b28 <extract_fields@@Base+0x4b8>  // b.any
   39ae4:	adrp	x3, 53000 <xexit@@Base+0x508>
   39ae8:	add	x3, x3, #0xc28
   39aec:	add	x3, x3, #0x142
   39af0:	mov	w2, #0x1d4                 	// #468
   39af4:	b	39a40 <extract_fields@@Base+0x3d0>
   39af8:	mov	x0, #0x38                  	// #56
   39afc:	madd	x3, x3, x0, x19
   39b00:	mov	w0, #0x8                   	// #8
   39b04:	b	39a90 <extract_fields@@Base+0x420>
   39b08:	mov	x0, #0x38                  	// #56
   39b0c:	madd	x3, x3, x0, x19
   39b10:	mov	w0, #0x6                   	// #6
   39b14:	b	39a90 <extract_fields@@Base+0x420>
   39b18:	mov	w27, #0x0                   	// #0
   39b1c:	b	39abc <extract_fields@@Base+0x44c>
   39b20:	mov	w0, #0x0                   	// #0
   39b24:	b	39ad8 <extract_fields@@Base+0x468>
   39b28:	cbz	w27, 39bcc <extract_fields@@Base+0x55c>
   39b2c:	cmp	w27, w0, lsl #1
   39b30:	cset	w27, eq  // eq = none
   39b34:	ldr	x3, [x19, #8]
   39b38:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   39b3c:	ldr	w1, [x19]
   39b40:	sxtw	x27, w27
   39b44:	ldr	x5, [x5, #3944]
   39b48:	ldr	w6, [x3, #12]
   39b4c:	add	x0, x5, #0x40
   39b50:	mov	w2, w6
   39b54:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39b58:	mov	w4, w0
   39b5c:	mov	w2, #0x0                   	// #0
   39b60:	mvn	w1, w6
   39b64:	add	x0, x5, #0x40
   39b68:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39b6c:	mov	w2, w0
   39b70:	cmp	w0, #0x3
   39b74:	b.ne	39bd4 <extract_fields@@Base+0x564>  // b.any
   39b78:	mov	w0, w4
   39b7c:	bl	3931c <aarch64_opcode_encode@@Base+0x11ac>
   39b80:	mov	x1, #0x38                  	// #56
   39b84:	madd	x27, x27, x1, x19
   39b88:	strb	w0, [x27, #28]
   39b8c:	ldr	x0, [x19, #8]
   39b90:	ldr	x1, [x0, #120]
   39b94:	tbz	w1, #9, 3a318 <extract_fields@@Base+0xca8>
   39b98:	ldr	w0, [x0, #32]
   39b9c:	bl	35760 <aarch64_get_operand_class@plt>
   39ba0:	cmp	w0, #0x4
   39ba4:	b.eq	39c04 <extract_fields@@Base+0x594>  // b.none
   39ba8:	adrp	x3, 53000 <xexit@@Base+0x508>
   39bac:	add	x3, x3, #0xc28
   39bb0:	adrp	x1, 53000 <xexit@@Base+0x508>
   39bb4:	adrp	x0, 53000 <xexit@@Base+0x508>
   39bb8:	add	x3, x3, #0x16e
   39bbc:	add	x1, x1, #0x4e6
   39bc0:	add	x0, x0, #0x6f5
   39bc4:	mov	w2, #0x884                 	// #2180
   39bc8:	b	3979c <extract_fields@@Base+0x12c>
   39bcc:	mov	w27, #0x1                   	// #1
   39bd0:	b	39b34 <extract_fields@@Base+0x4c4>
   39bd4:	add	x3, x3, x27
   39bd8:	add	x1, sp, #0x68
   39bdc:	ldrb	w0, [x3, #56]
   39be0:	str	w0, [x1, x26, lsl #2]
   39be4:	cbz	w0, 39bf8 <extract_fields@@Base+0x588>
   39be8:	add	x26, x26, #0x1
   39bec:	add	x3, x3, #0x6
   39bf0:	cmp	x26, #0xa
   39bf4:	b.ne	39bdc <extract_fields@@Base+0x56c>  // b.any
   39bf8:	mov	w0, w4
   39bfc:	bl	39140 <aarch64_opcode_encode@@Base+0xfd0>
   39c00:	b	39b80 <extract_fields@@Base+0x510>
   39c04:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39c08:	ldr	w5, [x19]
   39c0c:	mov	w2, #0x0                   	// #0
   39c10:	ldr	x0, [x3, #3944]
   39c14:	mov	w1, w5
   39c18:	add	x0, x0, #0x158
   39c1c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39c20:	mov	w4, #0x0                   	// #0
   39c24:	tbnz	w0, #0, 3a2f4 <extract_fields@@Base+0xc84>
   39c28:	add	w4, w4, #0x1
   39c2c:	cmp	w4, #0x4
   39c30:	b.eq	397d4 <extract_fields@@Base+0x164>  // b.none
   39c34:	lsr	w0, w0, #1
   39c38:	b	39c24 <extract_fields@@Base+0x5b4>
   39c3c:	cmp	w26, #0x1
   39c40:	b.ls	39c68 <extract_fields@@Base+0x5f8>  // b.plast
   39c44:	adrp	x3, 53000 <xexit@@Base+0x508>
   39c48:	add	x3, x3, #0xc28
   39c4c:	adrp	x1, 53000 <xexit@@Base+0x508>
   39c50:	adrp	x0, 53000 <xexit@@Base+0x508>
   39c54:	add	x3, x3, #0x16e
   39c58:	add	x1, x1, #0x4e6
   39c5c:	add	x0, x0, #0x99
   39c60:	mov	w2, #0x8a7                 	// #2215
   39c64:	b	3979c <extract_fields@@Base+0x12c>
   39c68:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   39c6c:	ldr	w1, [x19]
   39c70:	mov	w2, #0x0                   	// #0
   39c74:	ldr	x0, [x0, #3944]
   39c78:	add	x0, x0, #0x58
   39c7c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39c80:	bl	393e8 <aarch64_opcode_encode@@Base+0x1278>
   39c84:	mov	x1, #0x38                  	// #56
   39c88:	madd	x26, x26, x1, x19
   39c8c:	strb	w0, [x26, #28]
   39c90:	ldr	x0, [x19, #8]
   39c94:	ldr	x1, [x0, #120]
   39c98:	tbz	w1, #11, 39d00 <extract_fields@@Base+0x690>
   39c9c:	str	xzr, [sp, #104]
   39ca0:	ldr	w0, [x0, #32]
   39ca4:	bl	35760 <aarch64_get_operand_class@plt>
   39ca8:	cmp	w0, #0x1
   39cac:	b.eq	39cc4 <extract_fields@@Base+0x654>  // b.none
   39cb0:	adrp	x3, 53000 <xexit@@Base+0x508>
   39cb4:	add	x3, x3, #0xc28
   39cb8:	add	x3, x3, #0x16e
   39cbc:	mov	w2, #0x8af                 	// #2223
   39cc0:	b	3a364 <extract_fields@@Base+0xcf4>
   39cc4:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   39cc8:	ldr	x1, [x1, #3944]
   39ccc:	ldr	w2, [x1, #268]
   39cd0:	cmp	w2, #0x0
   39cd4:	b.le	39ce0 <extract_fields@@Base+0x670>
   39cd8:	ldr	w1, [x1, #264]
   39cdc:	stp	w1, w0, [sp, #104]
   39ce0:	ldr	w1, [x19]
   39ce4:	add	x0, sp, #0x68
   39ce8:	mov	w2, #0x0                   	// #0
   39cec:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39cf0:	cmp	w0, #0x0
   39cf4:	cset	w0, eq  // eq = none
   39cf8:	add	w0, w0, #0x1
   39cfc:	strb	w0, [x19, #28]
   39d00:	ldr	x0, [x19, #8]
   39d04:	ldr	x1, [x0, #120]
   39d08:	tbz	w1, #22, 3982c <extract_fields@@Base+0x1bc>
   39d0c:	ldr	w3, [x0, #20]
   39d10:	sub	w1, w3, #0x3a
   39d14:	cmp	w1, #0x15
   39d18:	b.hi	397d4 <extract_fields@@Base+0x164>  // b.pmore
   39d1c:	adrp	x0, 53000 <xexit@@Base+0x508>
   39d20:	add	x0, x0, #0xbb0
   39d24:	ldrh	w0, [x0, w1, uxtw #1]
   39d28:	adr	x1, 39d34 <extract_fields@@Base+0x6c4>
   39d2c:	add	x0, x1, w0, sxth #2
   39d30:	br	x0
   39d34:	ldr	w0, [x19]
   39d38:	ubfx	x0, x0, #15, #2
   39d3c:	cmp	w0, #0x1
   39d40:	b.eq	39d5c <extract_fields@@Base+0x6ec>  // b.none
   39d44:	cmp	w0, #0x3
   39d48:	b.eq	39d64 <extract_fields@@Base+0x6f4>  // b.none
   39d4c:	cbnz	w0, 397d4 <extract_fields@@Base+0x164>
   39d50:	mov	w0, #0x7                   	// #7
   39d54:	strb	w0, [x19, #28]
   39d58:	b	3982c <extract_fields@@Base+0x1bc>
   39d5c:	mov	w0, #0x8                   	// #8
   39d60:	b	39d54 <extract_fields@@Base+0x6e4>
   39d64:	mov	w0, #0x6                   	// #6
   39d68:	b	39d54 <extract_fields@@Base+0x6e4>
   39d6c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   39d70:	str	xzr, [sp, #104]
   39d74:	ldr	x0, [x0, #3944]
   39d78:	ldr	w1, [x0, #68]
   39d7c:	cmp	w1, #0x0
   39d80:	b.le	39d94 <extract_fields@@Base+0x724>
   39d84:	ldr	w0, [x0, #64]
   39d88:	str	w0, [sp, #104]
   39d8c:	mov	w0, #0x1                   	// #1
   39d90:	str	w0, [sp, #108]
   39d94:	ldr	w1, [x19]
   39d98:	add	x0, sp, #0x68
   39d9c:	mov	w2, #0x0                   	// #0
   39da0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39da4:	cmp	w0, #0x0
   39da8:	sub	w3, w3, #0x3d
   39dac:	mov	w0, #0x13                  	// #19
   39db0:	mov	w1, #0x15                  	// #21
   39db4:	csel	w0, w0, w1, eq  // eq = none
   39db8:	cmp	w3, #0x1
   39dbc:	b.ls	39d54 <extract_fields@@Base+0x6e4>  // b.plast
   39dc0:	strb	w0, [x19, #84]
   39dc4:	b	3982c <extract_fields@@Base+0x1bc>
   39dc8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   39dcc:	str	xzr, [sp, #104]
   39dd0:	ldr	x0, [x0, #3944]
   39dd4:	ldr	w1, [x0, #68]
   39dd8:	cmp	w1, #0x0
   39ddc:	b.le	39df0 <extract_fields@@Base+0x780>
   39de0:	ldr	w0, [x0, #64]
   39de4:	str	w0, [sp, #104]
   39de8:	mov	w0, #0x1                   	// #1
   39dec:	str	w0, [sp, #108]
   39df0:	ldr	w1, [x19]
   39df4:	add	x0, sp, #0x68
   39df8:	mov	w2, #0x0                   	// #0
   39dfc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e00:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   39e04:	mov	w0, #0x7                   	// #7
   39e08:	b	39d54 <extract_fields@@Base+0x6e4>
   39e0c:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39e10:	ldr	w5, [x19]
   39e14:	mov	w2, #0x0                   	// #0
   39e18:	ldr	x3, [x3, #3944]
   39e1c:	mov	w1, w5
   39e20:	add	x0, x3, #0x268
   39e24:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e28:	mov	w4, w0
   39e2c:	mov	w1, w5
   39e30:	add	x0, x3, #0x260
   39e34:	mov	w2, #0x0                   	// #0
   39e38:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e3c:	cmp	w4, w0
   39e40:	b.ne	397d4 <extract_fields@@Base+0x164>  // b.any
   39e44:	mov	w1, w5
   39e48:	add	x0, x3, #0x250
   39e4c:	mov	w2, #0x0                   	// #0
   39e50:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e54:	cmp	w4, w0
   39e58:	b.ne	397d4 <extract_fields@@Base+0x164>  // b.any
   39e5c:	b	3982c <extract_fields@@Base+0x1bc>
   39e60:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39e64:	ldr	w5, [x19]
   39e68:	mov	w2, #0x0                   	// #0
   39e6c:	ldr	x3, [x3, #3944]
   39e70:	mov	w1, w5
   39e74:	add	x0, x3, #0x2b0
   39e78:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e7c:	mov	w4, w0
   39e80:	mov	w1, w5
   39e84:	add	x0, x3, #0x2c0
   39e88:	mov	w2, #0x0                   	// #0
   39e8c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39e90:	cmp	w4, w0
   39e94:	cset	w0, eq  // eq = none
   39e98:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   39e9c:	b	3982c <extract_fields@@Base+0x1bc>
   39ea0:	ldr	w0, [x19]
   39ea4:	mov	w1, #0x0                   	// #0
   39ea8:	mov	w4, #0x2b                  	// #43
   39eac:	mov	w3, #0x74                  	// #116
   39eb0:	mov	w2, #0x2                   	// #2
   39eb4:	bl	353d0 <extract_fields@plt>
   39eb8:	sub	w1, w0, #0x1
   39ebc:	cmp	w1, #0xf
   39ec0:	b.hi	397d4 <extract_fields@@Base+0x164>  // b.pmore
   39ec4:	neg	w1, w0
   39ec8:	bics	wzr, w0, w1
   39ecc:	b.ne	397d4 <extract_fields@@Base+0x164>  // b.any
   39ed0:	b	3982c <extract_fields@@Base+0x1bc>
   39ed4:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39ed8:	ldr	w5, [x19]
   39edc:	mov	w2, #0x0                   	// #0
   39ee0:	ldr	x3, [x3, #3944]
   39ee4:	mov	w1, w5
   39ee8:	add	x0, x3, #0x2c8
   39eec:	b	39e78 <extract_fields@@Base+0x808>
   39ef0:	ldr	w0, [x19]
   39ef4:	mov	w4, #0x2b                  	// #43
   39ef8:	mov	w3, #0x74                  	// #116
   39efc:	mov	w2, #0x2                   	// #2
   39f00:	mov	w1, #0x0                   	// #0
   39f04:	bl	353d0 <extract_fields@plt>
   39f08:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   39f0c:	neg	w1, w0
   39f10:	bics	wzr, w0, w1
   39f14:	b.ne	3982c <extract_fields@@Base+0x1bc>  // b.any
   39f18:	b	397d4 <extract_fields@@Base+0x164>
   39f1c:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39f20:	ldr	w5, [x19]
   39f24:	mov	w2, #0x0                   	// #0
   39f28:	ldr	x3, [x3, #3944]
   39f2c:	mov	w1, w5
   39f30:	add	x0, x3, #0x238
   39f34:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39f38:	mov	w4, w0
   39f3c:	mov	w1, w5
   39f40:	add	x0, x3, #0x260
   39f44:	mov	w2, #0x0                   	// #0
   39f48:	b	39e8c <extract_fields@@Base+0x81c>
   39f4c:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39f50:	ldr	w5, [x19]
   39f54:	mov	w2, #0x0                   	// #0
   39f58:	ldr	x3, [x3, #3944]
   39f5c:	mov	w1, w5
   39f60:	add	x0, x3, #0x268
   39f64:	b	39f34 <extract_fields@@Base+0x8c4>
   39f68:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   39f6c:	ldr	w5, [x19]
   39f70:	mov	w2, #0x0                   	// #0
   39f74:	ldr	x3, [x3, #3944]
   39f78:	mov	w1, w5
   39f7c:	add	x0, x3, #0x260
   39f80:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   39f84:	mov	w4, w0
   39f88:	mov	w1, w5
   39f8c:	add	x0, x3, #0x250
   39f90:	mov	w2, #0x0                   	// #0
   39f94:	b	39e8c <extract_fields@@Base+0x81c>
   39f98:	mov	w4, #0x44                  	// #68
   39f9c:	ldr	w0, [x19]
   39fa0:	mov	w3, #0x8                   	// #8
   39fa4:	mov	w2, #0x2                   	// #2
   39fa8:	mov	w1, #0x0                   	// #0
   39fac:	bl	353d0 <extract_fields@plt>
   39fb0:	b	39fe0 <extract_fields@@Base+0x970>
   39fb4:	ldr	w0, [x19]
   39fb8:	mov	w1, #0x0                   	// #0
   39fbc:	mov	w4, #0x2b                  	// #43
   39fc0:	mov	w3, #0x74                  	// #116
   39fc4:	mov	w2, #0x2                   	// #2
   39fc8:	bl	353d0 <extract_fields@plt>
   39fcc:	mov	w1, w0
   39fd0:	tst	x1, #0x1f
   39fd4:	b.eq	397d4 <extract_fields@@Base+0x164>  // b.none
   39fd8:	mov	w0, #0x0                   	// #0
   39fdc:	tbz	w1, #0, 3a068 <extract_fields@@Base+0x9f8>
   39fe0:	mov	w1, #0x6                   	// #6
   39fe4:	add	x3, x19, #0x1c
   39fe8:	mov	x5, #0x38                  	// #56
   39fec:	smull	x0, w0, w1
   39ff0:	ldr	x1, [x19, #8]
   39ff4:	add	x0, x0, #0x38
   39ff8:	add	x0, x1, x0
   39ffc:	mov	x1, #0x0                   	// #0
   3a000:	mul	x2, x1, x5
   3a004:	ldrb	w4, [x0, x1]
   3a008:	add	x1, x1, #0x1
   3a00c:	cmp	x1, #0x6
   3a010:	strb	w4, [x3, x2]
   3a014:	b.ne	3a000 <extract_fields@@Base+0x990>  // b.any
   3a018:	adrp	x27, 97000 <aarch64_operands@@Base+0x16bc0>
   3a01c:	mov	x26, #0x0                   	// #0
   3a020:	mov	x5, #0x30                  	// #48
   3a024:	mov	x28, #0xe                   	// #14
   3a028:	ldr	x27, [x27, #4032]
   3a02c:	ldr	w0, [x24, x26]
   3a030:	cbnz	w0, 3a290 <extract_fields@@Base+0xc20>
   3a034:	ldr	x6, [x20, #136]
   3a038:	cbnz	x6, 3a2d0 <extract_fields@@Base+0xc60>
   3a03c:	mov	x0, x19
   3a040:	mov	x1, #0x0                   	// #0
   3a044:	bl	35520 <aarch64_match_operands_constraint@plt>
   3a048:	mov	w20, w0
   3a04c:	cmp	w0, #0x1
   3a050:	b.ne	397d4 <extract_fields@@Base+0x164>  // b.any
   3a054:	cbnz	w23, 397d8 <extract_fields@@Base+0x168>
   3a058:	mov	x1, x22
   3a05c:	mov	x0, x19
   3a060:	bl	3a378 <extract_fields@@Base+0xd08>
   3a064:	b	397d8 <extract_fields@@Base+0x168>
   3a068:	asr	w1, w1, #1
   3a06c:	add	w0, w0, #0x1
   3a070:	b	39fdc <extract_fields@@Base+0x96c>
   3a074:	ldr	w2, [x19]
   3a078:	and	w0, w2, #0x3fe00
   3a07c:	and	w0, w0, #0xfffe07ff
   3a080:	cmp	w0, #0x600
   3a084:	b.eq	3a280 <extract_fields@@Base+0xc10>  // b.none
   3a088:	and	w0, w2, #0x3fc00
   3a08c:	and	w0, w0, #0xfffe07ff
   3a090:	cmp	w0, #0x400
   3a094:	b.eq	3a288 <extract_fields@@Base+0xc18>  // b.none
   3a098:	ubfx	x0, x2, #17, #1
   3a09c:	add	w0, w0, #0x2
   3a0a0:	b	39fe0 <extract_fields@@Base+0x970>
   3a0a4:	mov	w4, #0x45                  	// #69
   3a0a8:	b	39f9c <extract_fields@@Base+0x92c>
   3a0ac:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a0b0:	ldr	w1, [x19]
   3a0b4:	mov	w2, #0x0                   	// #0
   3a0b8:	ldr	x0, [x0, #3944]
   3a0bc:	add	x0, x0, #0x218
   3a0c0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a0c4:	b	39fe0 <extract_fields@@Base+0x970>
   3a0c8:	mov	w4, #0x75                  	// #117
   3a0cc:	ldr	w0, [x19]
   3a0d0:	mov	w1, #0x0                   	// #0
   3a0d4:	mov	w3, #0x74                  	// #116
   3a0d8:	mov	w2, #0x2                   	// #2
   3a0dc:	bl	353d0 <extract_fields@plt>
   3a0e0:	mov	w1, w0
   3a0e4:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   3a0e8:	mov	w0, #0x0                   	// #0
   3a0ec:	cmp	w1, #0x1
   3a0f0:	b.eq	39fe0 <extract_fields@@Base+0x970>  // b.none
   3a0f4:	asr	w1, w1, #1
   3a0f8:	add	w0, w0, #0x1
   3a0fc:	b	3a0ec <extract_fields@@Base+0xa7c>
   3a100:	mov	w4, #0x76                  	// #118
   3a104:	b	3a0cc <extract_fields@@Base+0xa5c>
   3a108:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a10c:	ldr	w1, [x19]
   3a110:	mov	w2, #0x0                   	// #0
   3a114:	ldr	x0, [x0, #3944]
   3a118:	add	x0, x0, #0x40
   3a11c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a120:	cmp	w0, #0x2
   3a124:	b.le	39fe0 <extract_fields@@Base+0x970>
   3a128:	b	397d4 <extract_fields@@Base+0x164>
   3a12c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a130:	ldr	w1, [x19]
   3a134:	mov	w2, #0x0                   	// #0
   3a138:	ldr	x0, [x0, #3944]
   3a13c:	add	x0, x0, #0x40
   3a140:	b	3a0c0 <extract_fields@@Base+0xa50>
   3a144:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a148:	ldr	w1, [x19]
   3a14c:	mov	w2, #0x0                   	// #0
   3a150:	ldr	x0, [x0, #3944]
   3a154:	add	x0, x0, #0x40
   3a158:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a15c:	cmp	w0, #0x0
   3a160:	b.le	397d4 <extract_fields@@Base+0x164>
   3a164:	sub	w0, w0, #0x1
   3a168:	b	39fe0 <extract_fields@@Base+0x970>
   3a16c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a170:	ldr	w1, [x19]
   3a174:	mov	w2, #0x0                   	// #0
   3a178:	ldr	x0, [x0, #3944]
   3a17c:	add	x0, x0, #0x380
   3a180:	b	3a0c0 <extract_fields@@Base+0xa50>
   3a184:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a188:	ldr	w1, [x19]
   3a18c:	mov	w2, #0x0                   	// #0
   3a190:	ldr	x0, [x0, #3944]
   3a194:	add	x0, x0, #0x390
   3a198:	b	3a0c0 <extract_fields@@Base+0xa50>
   3a19c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a1a0:	ldr	w1, [x19]
   3a1a4:	mov	w2, #0x0                   	// #0
   3a1a8:	ldr	x0, [x0, #3944]
   3a1ac:	add	x0, x0, #0x388
   3a1b0:	b	3a158 <extract_fields@@Base+0xae8>
   3a1b4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a1b8:	ldr	w1, [x19]
   3a1bc:	mov	w2, #0x0                   	// #0
   3a1c0:	ldr	x0, [x0, #3944]
   3a1c4:	add	x0, x0, #0x40
   3a1c8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a1cc:	ubfx	x0, x0, #1, #1
   3a1d0:	b	39fe0 <extract_fields@@Base+0x970>
   3a1d4:	ldr	w0, [x19]
   3a1d8:	mov	w1, #0x0                   	// #0
   3a1dc:	mov	w4, #0x76                  	// #118
   3a1e0:	mov	w3, #0x74                  	// #116
   3a1e4:	mov	w2, #0x2                   	// #2
   3a1e8:	bl	353d0 <extract_fields@plt>
   3a1ec:	mov	w1, w0
   3a1f0:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   3a1f4:	mov	w0, #0x0                   	// #0
   3a1f8:	cmp	w1, #0x1
   3a1fc:	b.eq	39fe0 <extract_fields@@Base+0x970>  // b.none
   3a200:	asr	w1, w1, #1
   3a204:	add	w0, w0, #0x1
   3a208:	b	3a1f8 <extract_fields@@Base+0xb88>
   3a20c:	ldr	w0, [x19]
   3a210:	mov	w1, #0x0                   	// #0
   3a214:	mov	w4, #0x76                  	// #118
   3a218:	mov	w3, #0x70                  	// #112
   3a21c:	mov	w2, #0x2                   	// #2
   3a220:	bl	353d0 <extract_fields@plt>
   3a224:	mov	w1, w0
   3a228:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   3a22c:	mov	w0, #0x0                   	// #0
   3a230:	cmp	w1, #0x1
   3a234:	b.eq	39fe0 <extract_fields@@Base+0x970>  // b.none
   3a238:	tbnz	w1, #0, 397d4 <extract_fields@@Base+0x164>
   3a23c:	asr	w1, w1, #1
   3a240:	add	w0, w0, #0x1
   3a244:	b	3a230 <extract_fields@@Base+0xbc0>
   3a248:	ldr	w0, [x19]
   3a24c:	mov	w1, #0x0                   	// #0
   3a250:	mov	w4, #0x76                  	// #118
   3a254:	mov	w3, #0x70                  	// #112
   3a258:	mov	w2, #0x2                   	// #2
   3a25c:	bl	353d0 <extract_fields@plt>
   3a260:	mov	w1, w0
   3a264:	cbz	w0, 397d4 <extract_fields@@Base+0x164>
   3a268:	mov	w0, #0x0                   	// #0
   3a26c:	cmp	w1, #0x1
   3a270:	b.eq	39fe0 <extract_fields@@Base+0x970>  // b.none
   3a274:	asr	w1, w1, #1
   3a278:	add	w0, w0, #0x1
   3a27c:	b	3a26c <extract_fields@@Base+0xbfc>
   3a280:	mov	w0, #0x0                   	// #0
   3a284:	b	39fe0 <extract_fields@@Base+0x970>
   3a288:	mov	w0, #0x1                   	// #1
   3a28c:	b	39fe0 <extract_fields@@Base+0x970>
   3a290:	mov	w0, w0
   3a294:	madd	x0, x0, x5, x27
   3a298:	ldr	w1, [x0, #16]
   3a29c:	tbnz	w1, #1, 3a2b0 <extract_fields@@Base+0xc40>
   3a2a0:	add	x26, x26, #0x4
   3a2a4:	cmp	x26, #0x18
   3a2a8:	b.ne	3a02c <extract_fields@@Base+0x9bc>  // b.any
   3a2ac:	b	3a034 <extract_fields@@Base+0x9c4>
   3a2b0:	madd	x1, x26, x28, x25
   3a2b4:	mov	x4, x22
   3a2b8:	mov	x3, x19
   3a2bc:	mov	w2, w21
   3a2c0:	bl	35640 <aarch64_extract_operand@plt>
   3a2c4:	mov	x5, #0x30                  	// #48
   3a2c8:	cbnz	w0, 3a2a0 <extract_fields@@Base+0xc30>
   3a2cc:	b	397d4 <extract_fields@@Base+0x164>
   3a2d0:	mov	x4, x22
   3a2d4:	mov	w1, w21
   3a2d8:	mov	x0, x19
   3a2dc:	mov	x5, #0x0                   	// #0
   3a2e0:	mov	w3, #0x0                   	// #0
   3a2e4:	mov	x2, #0x0                   	// #0
   3a2e8:	blr	x6
   3a2ec:	cbz	w0, 3a03c <extract_fields@@Base+0x9cc>
   3a2f0:	b	397d4 <extract_fields@@Base+0x164>
   3a2f4:	ldr	x0, [x19, #8]
   3a2f8:	mov	w1, w5
   3a2fc:	ldr	x3, [x3, #3944]
   3a300:	ldr	w2, [x0, #12]
   3a304:	add	x0, x3, #0x58
   3a308:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a30c:	orr	w0, w0, w4, lsl #1
   3a310:	bl	3937c <aarch64_opcode_encode@@Base+0x120c>
   3a314:	strb	w0, [x19, #28]
   3a318:	ldr	x0, [x19, #8]
   3a31c:	ldr	x1, [x0, #120]
   3a320:	tbz	w1, #10, 39c90 <extract_fields@@Base+0x620>
   3a324:	add	x0, x0, #0x20
   3a328:	mov	w1, #0x4                   	// #4
   3a32c:	bl	35140 <aarch64_operand_index@plt>
   3a330:	sxtw	x26, w0
   3a334:	cmn	w26, #0x1
   3a338:	b.ne	39c3c <extract_fields@@Base+0x5cc>  // b.any
   3a33c:	ldr	x0, [x19, #8]
   3a340:	mov	x26, #0x0                   	// #0
   3a344:	ldr	w0, [x0, #32]
   3a348:	bl	35760 <aarch64_get_operand_class@plt>
   3a34c:	cmp	w0, #0x1
   3a350:	b.eq	39c68 <extract_fields@@Base+0x5f8>  // b.none
   3a354:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a358:	add	x3, x3, #0xc28
   3a35c:	add	x3, x3, #0x16e
   3a360:	mov	w2, #0x8a3                 	// #2211
   3a364:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a368:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a36c:	add	x1, x1, #0x4e6
   3a370:	add	x0, x0, #0x104
   3a374:	b	3979c <extract_fields@@Base+0x12c>
   3a378:	stp	x29, x30, [sp, #-480]!
   3a37c:	mov	x29, sp
   3a380:	stp	x23, x24, [sp, #48]
   3a384:	ldr	x23, [x0, #8]
   3a388:	stp	x21, x22, [sp, #32]
   3a38c:	mov	x21, x0
   3a390:	stp	x19, x20, [sp, #16]
   3a394:	ldr	x0, [x23, #120]
   3a398:	stp	x25, x26, [sp, #64]
   3a39c:	stp	x27, x28, [sp, #80]
   3a3a0:	tst	w0, #0x2
   3a3a4:	b.eq	3a46c <extract_fields@@Base+0xdfc>  // b.none
   3a3a8:	mov	x24, x1
   3a3ac:	mov	x0, x23
   3a3b0:	bl	35bf0 <aarch64_find_alias_opcode@plt>
   3a3b4:	mov	x19, x0
   3a3b8:	cbz	x0, 3a404 <extract_fields@@Base+0xd94>
   3a3bc:	adrp	x25, 53000 <xexit@@Base+0x508>
   3a3c0:	add	x20, sp, #0x78
   3a3c4:	add	x25, x25, #0xbdc
   3a3c8:	add	x26, sp, #0xc8
   3a3cc:	add	x27, sp, #0x100
   3a3d0:	ldr	x0, [x19, #120]
   3a3d4:	tbnz	w0, #0, 3a428 <extract_fields@@Base+0xdb8>
   3a3d8:	ldr	x1, [x23, #120]
   3a3dc:	tbnz	w1, #1, 3a428 <extract_fields@@Base+0xdb8>
   3a3e0:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a3e4:	add	x3, x3, #0xc28
   3a3e8:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a3ec:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a3f0:	add	x3, x3, #0x182
   3a3f4:	add	x1, x1, #0x4e6
   3a3f8:	add	x0, x0, #0x750
   3a3fc:	mov	w2, #0xa6b                 	// #2667
   3a400:	b	3a424 <extract_fields@@Base+0xdb4>
   3a404:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a408:	add	x3, x3, #0xc28
   3a40c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a410:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a414:	add	x3, x3, #0x182
   3a418:	add	x1, x1, #0x4e6
   3a41c:	add	x0, x0, #0x74a
   3a420:	mov	w2, #0xa58                 	// #2648
   3a424:	bl	35b10 <__assert_fail@plt>
   3a428:	tbnz	w0, #21, 3a754 <extract_fields@@Base+0x10e4>
   3a42c:	ldr	w1, [x19, #12]
   3a430:	ldr	w0, [x21]
   3a434:	and	w0, w0, w1
   3a438:	ldr	w1, [x19, #8]
   3a43c:	cmp	w0, w1
   3a440:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a444:	mov	x0, x19
   3a448:	bl	351b0 <aarch64_num_of_operands@plt>
   3a44c:	cbnz	w0, 3a488 <extract_fields@@Base+0xe18>
   3a450:	ldr	w1, [x19, #8]
   3a454:	ldr	w0, [x21]
   3a458:	cmp	w1, w0
   3a45c:	b.ne	3a488 <extract_fields@@Base+0xe18>  // b.any
   3a460:	mov	x1, x19
   3a464:	mov	x0, x21
   3a468:	bl	35450 <aarch64_replace_opcode@plt>
   3a46c:	ldp	x19, x20, [sp, #16]
   3a470:	ldp	x21, x22, [sp, #32]
   3a474:	ldp	x23, x24, [sp, #48]
   3a478:	ldp	x25, x26, [sp, #64]
   3a47c:	ldp	x27, x28, [sp, #80]
   3a480:	ldp	x29, x30, [sp], #480
   3a484:	ret
   3a488:	ldr	x0, [x19, #120]
   3a48c:	mov	x2, #0x168                 	// #360
   3a490:	tbz	w0, #20, 3a884 <extract_fields@@Base+0x1214>
   3a494:	mov	x1, x21
   3a498:	mov	x0, x20
   3a49c:	bl	35090 <memcpy@plt>
   3a4a0:	ldr	w0, [x19, #20]
   3a4a4:	sub	w0, w0, #0x23
   3a4a8:	cmp	w0, #0x21
   3a4ac:	b.hi	3a754 <extract_fields@@Base+0x10e4>  // b.pmore
   3a4b0:	ldrh	w0, [x25, w0, uxtw #1]
   3a4b4:	adr	x1, 3a4c0 <extract_fields@@Base+0xe50>
   3a4b8:	add	x0, x1, w0, sxth #2
   3a4bc:	br	x0
   3a4c0:	ldrb	w0, [sp, #260]
   3a4c4:	mov	x1, #0x3f                  	// #63
   3a4c8:	cmp	w0, #0x1d
   3a4cc:	mov	x0, #0x1f                  	// #31
   3a4d0:	csel	x0, x0, x1, eq  // eq = none
   3a4d4:	ldr	x1, [sp, #328]
   3a4d8:	cmp	x1, x0
   3a4dc:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a4e0:	str	wzr, [sp, #312]
   3a4e4:	b	3a528 <extract_fields@@Base+0xeb8>
   3a4e8:	ldrb	w0, [sp, #260]
   3a4ec:	mov	x3, #0x3f                  	// #63
   3a4f0:	ldr	x2, [sp, #272]
   3a4f4:	cmp	w0, #0x1d
   3a4f8:	ldr	x1, [sp, #328]
   3a4fc:	mov	x0, #0x1f                  	// #31
   3a500:	csel	x0, x0, x3, eq  // eq = none
   3a504:	cmp	x2, #0x0
   3a508:	ccmp	x1, x0, #0x0, eq  // eq = none
   3a50c:	b.eq	3a51c <extract_fields@@Base+0xeac>  // b.none
   3a510:	add	x3, x1, #0x1
   3a514:	cmp	x2, x3
   3a518:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a51c:	sub	x0, x0, x1
   3a520:	str	x0, [sp, #272]
   3a524:	str	wzr, [sp, #312]
   3a528:	mov	x1, x19
   3a52c:	mov	x0, x20
   3a530:	bl	35450 <aarch64_replace_opcode@plt>
   3a534:	mov	x0, x20
   3a538:	mov	x1, #0x0                   	// #0
   3a53c:	bl	35520 <aarch64_match_operands_constraint@plt>
   3a540:	cbnz	w0, 3a8b0 <extract_fields@@Base+0x1240>
   3a544:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a548:	add	x3, x3, #0xc28
   3a54c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a550:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a554:	add	x3, x3, #0x182
   3a558:	add	x1, x1, #0x4e6
   3a55c:	add	x0, x0, #0x7a8
   3a560:	mov	w2, #0xa8c                 	// #2700
   3a564:	b	3a424 <extract_fields@@Base+0xdb4>
   3a568:	ldr	w1, [sp, #216]
   3a56c:	ldr	w0, [sp, #272]
   3a570:	cmp	w1, w0
   3a574:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a578:	ldr	x22, [sp, #328]
   3a57c:	ldr	w0, [x22, #32]
   3a580:	and	w0, w0, #0xe
   3a584:	cmp	w0, #0xe
   3a588:	b.eq	3a754 <extract_fields@@Base+0x10e4>  // b.none
   3a58c:	add	x1, sp, #0x138
   3a590:	mov	x2, #0x38                  	// #56
   3a594:	add	x0, sp, #0x100
   3a598:	bl	35090 <memcpy@plt>
   3a59c:	mov	w0, #0x2                   	// #2
   3a5a0:	str	w0, [sp, #264]
   3a5a4:	mov	x0, x22
   3a5a8:	bl	358c0 <get_inverted_cond@plt>
   3a5ac:	str	x0, [sp, #272]
   3a5b0:	b	3a4e0 <extract_fields@@Base+0xe70>
   3a5b4:	ldr	w0, [sp, #216]
   3a5b8:	cmp	w0, #0x1f
   3a5bc:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a5c0:	ldr	w0, [sp, #272]
   3a5c4:	cmp	w0, #0x1f
   3a5c8:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a5cc:	ldr	x22, [sp, #328]
   3a5d0:	ldr	w0, [x22, #32]
   3a5d4:	and	w0, w0, #0xe
   3a5d8:	cmp	w0, #0xe
   3a5dc:	b.eq	3a754 <extract_fields@@Base+0x10e4>  // b.none
   3a5e0:	add	x1, sp, #0x138
   3a5e4:	mov	x2, #0x38                  	// #56
   3a5e8:	add	x0, sp, #0xc8
   3a5ec:	bl	35090 <memcpy@plt>
   3a5f0:	mov	w0, #0x1                   	// #1
   3a5f4:	str	w0, [sp, #208]
   3a5f8:	mov	x0, x22
   3a5fc:	bl	358c0 <get_inverted_cond@plt>
   3a600:	str	x0, [sp, #216]
   3a604:	str	wzr, [sp, #312]
   3a608:	str	wzr, [sp, #256]
   3a60c:	b	3a528 <extract_fields@@Base+0xeb8>
   3a610:	ldr	x1, [sp, #272]
   3a614:	ldr	x0, [sp, #328]
   3a618:	cmp	x1, x0
   3a61c:	b.gt	3a754 <extract_fields@@Base+0x10e4>
   3a620:	add	x0, x0, #0x1
   3a624:	sub	x0, x0, x1
   3a628:	str	x0, [sp, #328]
   3a62c:	mov	x0, x20
   3a630:	mov	w1, #0x2                   	// #2
   3a634:	bl	394c4 <aarch64_opcode_encode@@Base+0x1354>
   3a638:	mov	x0, x20
   3a63c:	mov	w1, #0x3                   	// #3
   3a640:	bl	394c4 <aarch64_opcode_encode@@Base+0x1354>
   3a644:	b	3a528 <extract_fields@@Base+0xeb8>
   3a648:	ldrb	w1, [sp, #260]
   3a64c:	mov	x3, #0x40                  	// #64
   3a650:	ldr	x0, [sp, #272]
   3a654:	cmp	w1, #0x1d
   3a658:	ldr	x2, [sp, #328]
   3a65c:	mov	x1, #0x20                  	// #32
   3a660:	csel	x1, x1, x3, eq  // eq = none
   3a664:	cmp	x0, x2
   3a668:	b.le	3a754 <extract_fields@@Base+0x10e4>
   3a66c:	sub	x0, x1, x0
   3a670:	sub	x1, x1, #0x1
   3a674:	and	x0, x0, x1
   3a678:	add	x2, x2, #0x1
   3a67c:	str	x0, [sp, #272]
   3a680:	str	x2, [sp, #328]
   3a684:	b	3a62c <extract_fields@@Base+0xfbc>
   3a688:	ldr	w0, [sp, #216]
   3a68c:	cmp	w0, #0x1f
   3a690:	b.eq	3a6b8 <extract_fields@@Base+0x1048>  // b.none
   3a694:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a698:	add	x3, x3, #0xc28
   3a69c:	add	x3, x3, #0x1a5
   3a6a0:	mov	w2, #0x941                 	// #2369
   3a6a4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a6a8:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a6ac:	add	x1, x1, #0x4e6
   3a6b0:	add	x0, x0, #0x784
   3a6b4:	b	3a424 <extract_fields@@Base+0xdb4>
   3a6b8:	ldrb	w0, [sp, #260]
   3a6bc:	mov	x28, #0x20                  	// #32
   3a6c0:	ldr	x22, [sp, #272]
   3a6c4:	cmp	w0, #0x1d
   3a6c8:	ldr	x3, [sp, #328]
   3a6cc:	mov	x0, #0x40                  	// #64
   3a6d0:	csel	x28, x28, x0, eq  // eq = none
   3a6d4:	cmp	x22, x3
   3a6d8:	b.le	3a754 <extract_fields@@Base+0x10e4>
   3a6dc:	add	x23, sp, #0x100
   3a6e0:	add	x0, sp, #0xc8
   3a6e4:	mov	x1, x23
   3a6e8:	mov	x2, #0x38                  	// #56
   3a6ec:	str	x3, [sp, #104]
   3a6f0:	bl	35090 <memcpy@plt>
   3a6f4:	add	x1, sp, #0x138
   3a6f8:	mov	w24, #0x1                   	// #1
   3a6fc:	mov	x0, x23
   3a700:	mov	x2, #0x38                  	// #56
   3a704:	str	w24, [sp, #208]
   3a708:	bl	35090 <memcpy@plt>
   3a70c:	ldr	x3, [sp, #104]
   3a710:	sub	x22, x28, x22
   3a714:	sub	x28, x28, #0x1
   3a718:	mov	w23, #0x2                   	// #2
   3a71c:	add	x3, x3, #0x1
   3a720:	and	x22, x22, x28
   3a724:	mov	w1, w24
   3a728:	mov	x0, x20
   3a72c:	str	x22, [sp, #216]
   3a730:	str	w23, [sp, #264]
   3a734:	str	x3, [sp, #272]
   3a738:	str	wzr, [sp, #312]
   3a73c:	bl	394c4 <aarch64_opcode_encode@@Base+0x1354>
   3a740:	b	3a62c <extract_fields@@Base+0xfbc>
   3a744:	ldr	w1, [sp, #216]
   3a748:	ldr	w0, [sp, #272]
   3a74c:	cmp	w1, w0
   3a750:	b.eq	3a608 <extract_fields@@Base+0xf98>  // b.none
   3a754:	mov	x0, x19
   3a758:	bl	35b30 <aarch64_find_next_alias_opcode@plt>
   3a75c:	mov	x19, x0
   3a760:	cbnz	x0, 3a3d0 <extract_fields@@Base+0xd60>
   3a764:	b	3a46c <extract_fields@@Base+0xdfc>
   3a768:	ldr	x22, [sp, #216]
   3a76c:	ldr	x0, [sp, #240]
   3a770:	cbnz	x22, 3a778 <extract_fields@@Base+0x1108>
   3a774:	cbnz	x0, 3a754 <extract_fields@@Base+0x10e4>
   3a778:	lsl	x22, x22, x0
   3a77c:	mov	w1, #0x48                  	// #72
   3a780:	ldr	x0, [sp, #128]
   3a784:	ldr	w0, [x0, #20]
   3a788:	str	w1, [sp, #200]
   3a78c:	str	wzr, [sp, #232]
   3a790:	cmp	w0, #0x20
   3a794:	b.ne	3a7b8 <extract_fields@@Base+0x1148>  // b.any
   3a798:	ldrb	w0, [sp, #148]
   3a79c:	mvn	x22, x22
   3a7a0:	mov	x2, #0x0                   	// #0
   3a7a4:	cmp	w0, #0x1
   3a7a8:	mov	x0, x22
   3a7ac:	cset	w1, eq  // eq = none
   3a7b0:	bl	35a90 <aarch64_wide_constant_p@plt>
   3a7b4:	cbnz	w0, 3a754 <extract_fields@@Base+0x10e4>
   3a7b8:	str	x22, [sp, #216]
   3a7bc:	str	xzr, [sp, #240]
   3a7c0:	b	3a528 <extract_fields@@Base+0xeb8>
   3a7c4:	ldr	w0, [sp, #216]
   3a7c8:	cmp	w0, #0x1f
   3a7cc:	b.eq	3a7e4 <extract_fields@@Base+0x1174>  // b.none
   3a7d0:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a7d4:	add	x3, x3, #0xc28
   3a7d8:	add	x3, x3, #0x1b8
   3a7dc:	mov	w2, #0x9d0                 	// #2512
   3a7e0:	b	3a6a4 <extract_fields@@Base+0x1034>
   3a7e4:	mov	x1, x27
   3a7e8:	mov	x0, x26
   3a7ec:	mov	x2, #0x38                  	// #56
   3a7f0:	bl	35090 <memcpy@plt>
   3a7f4:	mov	w1, #0x48                  	// #72
   3a7f8:	mov	w0, #0x1                   	// #1
   3a7fc:	str	w1, [sp, #200]
   3a800:	ldr	w1, [sp, #160]
   3a804:	str	w0, [sp, #208]
   3a808:	cmp	w1, #0x1f
   3a80c:	ldrb	w0, [sp, #148]
   3a810:	b.eq	3a608 <extract_fields@@Base+0xf98>  // b.none
   3a814:	cmp	w0, #0x1
   3a818:	mov	x2, #0x0                   	// #0
   3a81c:	ldr	x22, [sp, #216]
   3a820:	cset	w28, eq  // eq = none
   3a824:	mov	w1, w28
   3a828:	mov	x0, x22
   3a82c:	bl	35a90 <aarch64_wide_constant_p@plt>
   3a830:	cbnz	w0, 3a754 <extract_fields@@Base+0x10e4>
   3a834:	mov	w1, w28
   3a838:	mvn	x0, x22
   3a83c:	mov	x2, #0x0                   	// #0
   3a840:	bl	35a90 <aarch64_wide_constant_p@plt>
   3a844:	cbz	w0, 3a608 <extract_fields@@Base+0xf98>
   3a848:	b	3a754 <extract_fields@@Base+0x10e4>
   3a84c:	ldr	w1, [sp, #216]
   3a850:	ldr	w0, [sp, #272]
   3a854:	cmp	w1, w0
   3a858:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a85c:	add	x1, sp, #0x138
   3a860:	add	x0, sp, #0x100
   3a864:	mov	x2, #0x38                  	// #56
   3a868:	bl	35090 <memcpy@plt>
   3a86c:	mov	w0, #0x2                   	// #2
   3a870:	str	w0, [sp, #264]
   3a874:	b	3a4e0 <extract_fields@@Base+0xe70>
   3a878:	ldr	x0, [sp, #272]
   3a87c:	cbnz	x0, 3a754 <extract_fields@@Base+0x10e4>
   3a880:	b	3a608 <extract_fields@@Base+0xf98>
   3a884:	mov	w1, #0x0                   	// #0
   3a888:	mov	x0, x20
   3a88c:	bl	354b0 <memset@plt>
   3a890:	ldr	w1, [x21]
   3a894:	mov	x4, x24
   3a898:	mov	x2, x20
   3a89c:	mov	x0, x19
   3a8a0:	mov	w3, #0x1                   	// #1
   3a8a4:	bl	39754 <extract_fields@@Base+0xe4>
   3a8a8:	cmp	w0, #0x1
   3a8ac:	b.ne	3a754 <extract_fields@@Base+0x10e4>  // b.any
   3a8b0:	mov	x1, x20
   3a8b4:	mov	x0, x21
   3a8b8:	mov	x2, #0x168                 	// #360
   3a8bc:	bl	35090 <memcpy@plt>
   3a8c0:	b	3a46c <extract_fields@@Base+0xdfc>

000000000003a8c4 <aarch64_ext_regno@@Base>:
   3a8c4:	stp	x29, x30, [sp, #-16]!
   3a8c8:	mov	x3, x1
   3a8cc:	mov	w1, w2
   3a8d0:	mov	x29, sp
   3a8d4:	ldr	w4, [x0, #20]
   3a8d8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a8dc:	mov	w2, #0x0                   	// #0
   3a8e0:	ldr	x0, [x0, #3944]
   3a8e4:	add	x0, x0, x4, lsl #3
   3a8e8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a8ec:	ldp	x29, x30, [sp], #16
   3a8f0:	str	w0, [x3, #16]
   3a8f4:	mov	w0, #0x1                   	// #1
   3a8f8:	ret

000000000003a8fc <aarch64_ext_regno_pair@@Base>:
   3a8fc:	ldr	w2, [x1, #8]
   3a900:	and	w0, w2, #0xfffffffd
   3a904:	cmp	w0, #0x1
   3a908:	b.eq	3a938 <aarch64_ext_regno_pair@@Base+0x3c>  // b.none
   3a90c:	stp	x29, x30, [sp, #-16]!
   3a910:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a914:	add	x3, x3, #0xc28
   3a918:	mov	x29, sp
   3a91c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a920:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a924:	add	x3, x3, #0x1d3
   3a928:	add	x1, x1, #0x4e6
   3a92c:	add	x0, x0, #0x7d8
   3a930:	mov	w2, #0x10e                 	// #270
   3a934:	bl	35b10 <__assert_fail@plt>
   3a938:	sub	w2, w2, #0x1
   3a93c:	mov	x4, #0x38                  	// #56
   3a940:	sxtw	x2, w2
   3a944:	madd	x2, x2, x4, x3
   3a948:	ldr	w2, [x2, #40]
   3a94c:	add	w2, w2, #0x1
   3a950:	str	w2, [x1, #16]
   3a954:	ret

000000000003a958 <aarch64_ext_regrt_sysins@@Base>:
   3a958:	stp	x29, x30, [sp, #-48]!
   3a95c:	mov	x29, sp
   3a960:	stp	x19, x20, [sp, #16]
   3a964:	mov	x20, x3
   3a968:	ldr	w3, [x0, #20]
   3a96c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3a970:	mov	x19, x1
   3a974:	mov	w1, w2
   3a978:	mov	w2, #0x0                   	// #0
   3a97c:	ldr	x0, [x0, #3944]
   3a980:	str	x21, [sp, #32]
   3a984:	add	x0, x0, x3, lsl #3
   3a988:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3a98c:	ldr	w21, [x19, #8]
   3a990:	str	w0, [x19, #16]
   3a994:	cmp	w21, #0x1
   3a998:	b.eq	3a9c0 <aarch64_ext_regrt_sysins@@Base+0x68>  // b.none
   3a99c:	adrp	x3, 53000 <xexit@@Base+0x508>
   3a9a0:	add	x3, x3, #0xc28
   3a9a4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3a9a8:	adrp	x0, 53000 <xexit@@Base+0x508>
   3a9ac:	add	x3, x3, #0x1ea
   3a9b0:	add	x1, x1, #0x4e6
   3a9b4:	add	x0, x0, #0x7f8
   3a9b8:	mov	w2, #0x11c                 	// #284
   3a9bc:	bl	35b10 <__assert_fail@plt>
   3a9c0:	ldr	w0, [x20, #24]
   3a9c4:	bl	35760 <aarch64_get_operand_class@plt>
   3a9c8:	cmp	w0, #0xc
   3a9cc:	b.ne	3a99c <aarch64_ext_regrt_sysins@@Base+0x44>  // b.any
   3a9d0:	ldr	x0, [x20, #40]
   3a9d4:	bl	35a50 <aarch64_sys_ins_reg_has_xt@plt>
   3a9d8:	ldrb	w1, [x19, #48]
   3a9dc:	bfi	w1, w0, #1, #1
   3a9e0:	strb	w1, [x19, #48]
   3a9e4:	mov	w0, w21
   3a9e8:	ldp	x19, x20, [sp, #16]
   3a9ec:	ldr	x21, [sp, #32]
   3a9f0:	ldp	x29, x30, [sp], #48
   3a9f4:	ret

000000000003a9f8 <aarch64_ext_reglane@@Base>:
   3a9f8:	stp	x29, x30, [sp, #-64]!
   3a9fc:	mov	x29, sp
   3aa00:	ldr	x4, [x3, #8]
   3aa04:	stp	x21, x22, [sp, #32]
   3aa08:	mov	x22, x3
   3aa0c:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   3aa10:	ldr	w0, [x0, #20]
   3aa14:	mov	w21, w2
   3aa18:	stp	x19, x20, [sp, #16]
   3aa1c:	mov	x19, x1
   3aa20:	mov	w1, w2
   3aa24:	ldr	w2, [x4, #12]
   3aa28:	str	x23, [sp, #48]
   3aa2c:	ldr	x23, [x3, #3944]
   3aa30:	add	x0, x23, x0, lsl #3
   3aa34:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aa38:	str	w0, [x19, #16]
   3aa3c:	ldr	w0, [x4, #16]
   3aa40:	cmp	w0, #0x17
   3aa44:	ccmp	w0, #0xa, #0x4, ne  // ne = any
   3aa48:	b.ne	3ab30 <aarch64_ext_reglane@@Base+0x138>  // b.any
   3aa4c:	ldr	w0, [x19]
   3aa50:	cmp	w0, #0x20
   3aa54:	b.ne	3aae4 <aarch64_ext_reglane@@Base+0xec>  // b.any
   3aa58:	ldr	w0, [x4, #32]
   3aa5c:	cmp	w0, #0x1f
   3aa60:	b.ne	3aae4 <aarch64_ext_reglane@@Base+0xec>  // b.any
   3aa64:	ldr	w20, [x19, #8]
   3aa68:	cmp	w20, #0x1
   3aa6c:	b.eq	3aa94 <aarch64_ext_reglane@@Base+0x9c>  // b.none
   3aa70:	adrp	x3, 53000 <xexit@@Base+0x508>
   3aa74:	add	x3, x3, #0xc28
   3aa78:	adrp	x1, 53000 <xexit@@Base+0x508>
   3aa7c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3aa80:	add	x3, x3, #0x203
   3aa84:	add	x1, x1, #0x4e6
   3aa88:	add	x0, x0, #0xc6f
   3aa8c:	mov	w2, #0x13b                 	// #315
   3aa90:	bl	35b10 <__assert_fail@plt>
   3aa94:	mov	w2, #0x0                   	// #0
   3aa98:	mov	w1, w21
   3aa9c:	add	x0, x23, #0x140
   3aaa0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aaa4:	mov	w1, w20
   3aaa8:	mov	w21, w0
   3aaac:	mov	x0, x22
   3aab0:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3aab4:	strb	w0, [x19, #4]
   3aab8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3aabc:	and	w0, w0, #0xff
   3aac0:	bl	39210 <aarch64_opcode_encode@@Base+0x10a0>
   3aac4:	lsr	w21, w21, w0
   3aac8:	str	x21, [x19, #24]
   3aacc:	mov	w0, w20
   3aad0:	ldp	x19, x20, [sp, #16]
   3aad4:	ldp	x21, x22, [sp, #32]
   3aad8:	ldr	x23, [sp, #48]
   3aadc:	ldp	x29, x30, [sp], #64
   3aae0:	ret
   3aae4:	ldr	x0, [x3, #3944]
   3aae8:	mov	w1, w21
   3aaec:	mov	w2, #0x0                   	// #0
   3aaf0:	add	x0, x0, #0x158
   3aaf4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aaf8:	mov	w20, w0
   3aafc:	mov	w0, #0xffffffff            	// #-1
   3ab00:	add	w0, w0, #0x1
   3ab04:	cmp	w0, #0x4
   3ab08:	b.ne	3ab14 <aarch64_ext_reglane@@Base+0x11c>  // b.any
   3ab0c:	mov	w20, #0x0                   	// #0
   3ab10:	b	3aacc <aarch64_ext_reglane@@Base+0xd4>
   3ab14:	and	w1, w20, #0x1
   3ab18:	lsr	w20, w20, #1
   3ab1c:	cbz	w1, 3ab00 <aarch64_ext_reglane@@Base+0x108>
   3ab20:	bl	3931c <aarch64_opcode_encode@@Base+0x11ac>
   3ab24:	strb	w0, [x19, #4]
   3ab28:	str	x20, [x19, #24]
   3ab2c:	b	3ab84 <aarch64_ext_reglane@@Base+0x18c>
   3ab30:	cmp	w0, #0x5d
   3ab34:	b.ne	3ab8c <aarch64_ext_reglane@@Base+0x194>  // b.any
   3ab38:	ldr	w1, [x19, #8]
   3ab3c:	mov	x0, x22
   3ab40:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3ab44:	and	w1, w0, #0xff
   3ab48:	strb	w0, [x19, #4]
   3ab4c:	sub	w0, w1, #0xa
   3ab50:	cmp	w0, #0x1
   3ab54:	b.hi	3ab0c <aarch64_ext_reglane@@Base+0x114>  // b.pmore
   3ab58:	mov	w0, w21
   3ab5c:	mov	w4, #0x3e                  	// #62
   3ab60:	mov	w3, #0x3d                  	// #61
   3ab64:	mov	w2, #0x2                   	// #2
   3ab68:	mov	w1, #0x0                   	// #0
   3ab6c:	bl	353d0 <extract_fields@plt>
   3ab70:	mov	w0, w0
   3ab74:	str	x0, [x19, #24]
   3ab78:	ldr	w0, [x19, #16]
   3ab7c:	and	w0, w0, #0x1f
   3ab80:	str	w0, [x19, #16]
   3ab84:	mov	w20, #0x1                   	// #1
   3ab88:	b	3aacc <aarch64_ext_reglane@@Base+0xd4>
   3ab8c:	cmp	w0, #0x5b
   3ab90:	b.ne	3abb0 <aarch64_ext_reglane@@Base+0x1b8>  // b.any
   3ab94:	mov	w1, w21
   3ab98:	add	x0, x23, #0x3e0
   3ab9c:	mov	w2, #0x0                   	// #0
   3aba0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aba4:	mov	w0, w0
   3aba8:	str	x0, [x19, #24]
   3abac:	b	3ab84 <aarch64_ext_reglane@@Base+0x18c>
   3abb0:	ldr	w1, [x19, #8]
   3abb4:	mov	x0, x22
   3abb8:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3abbc:	strb	w0, [x19, #4]
   3abc0:	and	w1, w0, #0xff
   3abc4:	cmp	w1, #0x7
   3abc8:	b.eq	3ac48 <aarch64_ext_reglane@@Base+0x250>  // b.none
   3abcc:	cmp	w1, #0x8
   3abd0:	b.eq	3ac6c <aarch64_ext_reglane@@Base+0x274>  // b.none
   3abd4:	cmp	w1, #0x6
   3abd8:	b.ne	3ab0c <aarch64_ext_reglane@@Base+0x114>  // b.any
   3abdc:	ldr	w0, [x19]
   3abe0:	cmp	w0, #0x22
   3abe4:	b.ne	3ac48 <aarch64_ext_reglane@@Base+0x250>  // b.any
   3abe8:	mov	w0, w21
   3abec:	mov	w5, #0x3f                  	// #63
   3abf0:	mov	w4, #0x3e                  	// #62
   3abf4:	mov	w3, #0x3d                  	// #61
   3abf8:	mov	w2, #0x3                   	// #3
   3abfc:	mov	w1, #0x0                   	// #0
   3ac00:	bl	353d0 <extract_fields@plt>
   3ac04:	mov	w0, w0
   3ac08:	str	x0, [x19, #24]
   3ac0c:	ldr	w0, [x19, #16]
   3ac10:	and	w0, w0, #0xf
   3ac14:	str	w0, [x19, #16]
   3ac18:	ldr	x0, [x22, #8]
   3ac1c:	ldr	w0, [x0, #20]
   3ac20:	cmp	w0, #0x50
   3ac24:	b.ne	3ab84 <aarch64_ext_reglane@@Base+0x18c>  // b.any
   3ac28:	ldrb	w0, [x19, #4]
   3ac2c:	cmp	w0, #0x6
   3ac30:	b.eq	3ab84 <aarch64_ext_reglane@@Base+0x18c>  // b.none
   3ac34:	ldr	x0, [x19, #24]
   3ac38:	tbnz	w0, #0, 3ab0c <aarch64_ext_reglane@@Base+0x114>
   3ac3c:	mov	x1, #0x2                   	// #2
   3ac40:	sdiv	x0, x0, x1
   3ac44:	b	3aba8 <aarch64_ext_reglane@@Base+0x1b0>
   3ac48:	mov	w0, w21
   3ac4c:	mov	w4, #0x3e                  	// #62
   3ac50:	mov	w3, #0x3d                  	// #61
   3ac54:	mov	w2, #0x2                   	// #2
   3ac58:	mov	w1, #0x0                   	// #0
   3ac5c:	bl	353d0 <extract_fields@plt>
   3ac60:	mov	w0, w0
   3ac64:	str	x0, [x19, #24]
   3ac68:	b	3ac18 <aarch64_ext_reglane@@Base+0x220>
   3ac6c:	mov	w1, w21
   3ac70:	add	x0, x23, #0x1e8
   3ac74:	mov	w2, #0x0                   	// #0
   3ac78:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ac7c:	b	3ac60 <aarch64_ext_reglane@@Base+0x268>

000000000003ac80 <aarch64_ext_reglist@@Base>:
   3ac80:	stp	x29, x30, [sp, #-16]!
   3ac84:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   3ac88:	mov	x4, x1
   3ac8c:	mov	x29, sp
   3ac90:	ldr	x5, [x5, #3944]
   3ac94:	mov	w6, w2
   3ac98:	ldr	w0, [x0, #20]
   3ac9c:	mov	w1, w6
   3aca0:	mov	w2, #0x0                   	// #0
   3aca4:	add	x0, x5, x0, lsl #3
   3aca8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3acac:	ldrb	w3, [x4, #16]
   3acb0:	mov	w1, w6
   3acb4:	mov	w2, #0x0                   	// #0
   3acb8:	bfxil	w3, w0, #0, #5
   3acbc:	strb	w3, [x4, #16]
   3acc0:	add	x0, x5, #0xd8
   3acc4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3acc8:	add	w0, w0, #0x1
   3accc:	bfi	w3, w0, #5, #3
   3acd0:	strb	w3, [x4, #16]
   3acd4:	mov	w0, #0x1                   	// #1
   3acd8:	ldp	x29, x30, [sp], #16
   3acdc:	ret

000000000003ace0 <aarch64_ext_ldst_reglist@@Base>:
   3ace0:	stp	x29, x30, [sp, #-192]!
   3ace4:	mov	x29, sp
   3ace8:	ldr	x0, [x3, #8]
   3acec:	stp	x19, x20, [sp, #16]
   3acf0:	mov	x19, x1
   3acf4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3acf8:	add	x1, x1, #0xc28
   3acfc:	stp	x21, x22, [sp, #32]
   3ad00:	add	x22, sp, #0x38
   3ad04:	mov	w20, w2
   3ad08:	add	x1, x1, #0x218
   3ad0c:	mov	x2, #0x84                  	// #132
   3ad10:	ldr	x21, [x0, #120]
   3ad14:	mov	x0, x22
   3ad18:	bl	35090 <memcpy@plt>
   3ad1c:	adrp	x4, 97000 <aarch64_operands@@Base+0x16bc0>
   3ad20:	mov	w1, w20
   3ad24:	mov	w2, #0x0                   	// #0
   3ad28:	ldr	x4, [x4, #3944]
   3ad2c:	add	x0, x4, #0x60
   3ad30:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ad34:	ldrb	w3, [x19, #16]
   3ad38:	mov	w1, w20
   3ad3c:	mov	w2, #0x0                   	// #0
   3ad40:	bfxil	w3, w0, #0, #5
   3ad44:	strb	w3, [x19, #16]
   3ad48:	add	x0, x4, #0xc0
   3ad4c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ad50:	cmp	w0, #0xa
   3ad54:	b.hi	3ada4 <aarch64_ext_ldst_reglist@@Base+0xc4>  // b.pmore
   3ad58:	mov	w0, w0
   3ad5c:	mov	x1, #0xc                   	// #12
   3ad60:	ubfx	w21, w21, #24, #3
   3ad64:	mul	x0, x0, x1
   3ad68:	add	x1, sp, #0x40
   3ad6c:	ldr	w1, [x1, x0]
   3ad70:	cmp	w1, w21
   3ad74:	b.ne	3ada4 <aarch64_ext_ldst_reglist@@Base+0xc4>  // b.any
   3ad78:	ldr	w1, [x22, x0]
   3ad7c:	cbnz	w1, 3ada4 <aarch64_ext_ldst_reglist@@Base+0xc4>
   3ad80:	add	x1, sp, #0x3c
   3ad84:	ldr	w0, [x1, x0]
   3ad88:	bfi	w3, w0, #5, #3
   3ad8c:	mov	w0, #0x1                   	// #1
   3ad90:	strb	w3, [x19, #16]
   3ad94:	ldp	x19, x20, [sp, #16]
   3ad98:	ldp	x21, x22, [sp, #32]
   3ad9c:	ldp	x29, x30, [sp], #192
   3ada0:	ret
   3ada4:	mov	w0, #0x0                   	// #0
   3ada8:	b	3ad94 <aarch64_ext_ldst_reglist@@Base+0xb4>

000000000003adac <aarch64_ext_ldst_reglist_r@@Base>:
   3adac:	stp	x29, x30, [sp, #-16]!
   3adb0:	adrp	x6, 97000 <aarch64_operands@@Base+0x16bc0>
   3adb4:	mov	x5, x1
   3adb8:	mov	x29, sp
   3adbc:	ldr	x6, [x6, #3944]
   3adc0:	mov	w7, w2
   3adc4:	mov	w1, w7
   3adc8:	mov	w2, #0x0                   	// #0
   3adcc:	add	x0, x6, #0x60
   3add0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3add4:	ldrb	w4, [x5, #16]
   3add8:	mov	w1, w7
   3addc:	mov	w2, #0x0                   	// #0
   3ade0:	bfxil	w4, w0, #0, #5
   3ade4:	strb	w4, [x5, #16]
   3ade8:	add	x0, x6, #0xf8
   3adec:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3adf0:	mov	w2, w4
   3adf4:	ldr	x1, [x3, #8]
   3adf8:	ldr	x1, [x1, #120]
   3adfc:	ubfx	w1, w1, #24, #3
   3ae00:	bfi	w2, w1, #5, #3
   3ae04:	strb	w2, [x5, #16]
   3ae08:	ands	w3, w2, #0xe0
   3ae0c:	b.eq	3ae18 <aarch64_ext_ldst_reglist_r@@Base+0x6c>  // b.none
   3ae10:	cmp	w1, #0x4
   3ae14:	b.ls	3ae3c <aarch64_ext_ldst_reglist_r@@Base+0x90>  // b.plast
   3ae18:	adrp	x3, 53000 <xexit@@Base+0x508>
   3ae1c:	add	x3, x3, #0xc28
   3ae20:	adrp	x1, 53000 <xexit@@Base+0x508>
   3ae24:	adrp	x0, 53000 <xexit@@Base+0x508>
   3ae28:	add	x3, x3, #0x29c
   3ae2c:	add	x1, x1, #0x4e6
   3ae30:	add	x0, x0, #0x85c
   3ae34:	mov	w2, #0x1e5                 	// #485
   3ae38:	bl	35b10 <__assert_fail@plt>
   3ae3c:	cmp	w3, #0x20
   3ae40:	b.ne	3ae58 <aarch64_ext_ldst_reglist_r@@Base+0xac>  // b.any
   3ae44:	cmp	w0, #0x1
   3ae48:	b.ne	3ae58 <aarch64_ext_ldst_reglist_r@@Base+0xac>  // b.any
   3ae4c:	mov	w0, #0x2                   	// #2
   3ae50:	bfi	w2, w0, #5, #3
   3ae54:	strb	w2, [x5, #16]
   3ae58:	mov	w0, #0x1                   	// #1
   3ae5c:	ldp	x29, x30, [sp], #16
   3ae60:	ret

000000000003ae64 <aarch64_ext_ldst_elemlist@@Base>:
   3ae64:	stp	x29, x30, [sp, #-80]!
   3ae68:	mov	x29, sp
   3ae6c:	stp	x19, x20, [sp, #16]
   3ae70:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   3ae74:	mov	x19, x1
   3ae78:	stp	x21, x22, [sp, #32]
   3ae7c:	mov	x21, x3
   3ae80:	mov	w22, w2
   3ae84:	ldr	x3, [x20, #3944]
   3ae88:	mov	w1, w22
   3ae8c:	mov	w2, #0x0                   	// #0
   3ae90:	str	x23, [sp, #48]
   3ae94:	add	x0, x3, #0x60
   3ae98:	str	xzr, [sp, #72]
   3ae9c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aea0:	ldrb	w1, [x19, #16]
   3aea4:	bfxil	w1, w0, #0, #5
   3aea8:	ldr	w0, [x3, #212]
   3aeac:	strb	w1, [x19, #16]
   3aeb0:	cmp	w0, #0x2
   3aeb4:	b.le	3aecc <aarch64_ext_ldst_elemlist@@Base+0x68>
   3aeb8:	ldr	w0, [x3, #208]
   3aebc:	add	w0, w0, #0x1
   3aec0:	str	w0, [sp, #72]
   3aec4:	mov	w0, #0x2                   	// #2
   3aec8:	str	w0, [sp, #76]
   3aecc:	mov	w1, w22
   3aed0:	mov	w2, #0x0                   	// #0
   3aed4:	add	x0, sp, #0x48
   3aed8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3aedc:	mov	w4, #0x1f                  	// #31
   3aee0:	mov	w23, w0
   3aee4:	mov	w5, #0x9                   	// #9
   3aee8:	mov	w0, w22
   3aeec:	mov	w3, #0xb                   	// #11
   3aef0:	mov	w2, #0x3                   	// #3
   3aef4:	mov	w1, #0x0                   	// #0
   3aef8:	bl	353d0 <extract_fields@plt>
   3aefc:	cmp	w23, #0x1
   3af00:	mov	w4, w0
   3af04:	b.eq	3af80 <aarch64_ext_ldst_elemlist@@Base+0x11c>  // b.none
   3af08:	cmp	w23, #0x2
   3af0c:	b.eq	3af94 <aarch64_ext_ldst_elemlist@@Base+0x130>  // b.none
   3af10:	cbnz	w23, 3afd4 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3af14:	mov	w0, #0x5                   	// #5
   3af18:	strb	w0, [x19, #4]
   3af1c:	ldrh	w0, [x19, #16]
   3af20:	and	w0, w0, #0xfffffe1f
   3af24:	orr	w0, w0, #0x100
   3af28:	strh	w0, [x19, #16]
   3af2c:	ldr	x0, [x21, #8]
   3af30:	str	x4, [x19, #24]
   3af34:	ldr	x1, [x0, #120]
   3af38:	ldrb	w0, [x19, #16]
   3af3c:	ubfx	w1, w1, #24, #3
   3af40:	bfi	w0, w1, #5, #3
   3af44:	strb	w0, [x19, #16]
   3af48:	tst	w0, #0xe0
   3af4c:	b.eq	3af5c <aarch64_ext_ldst_elemlist@@Base+0xf8>  // b.none
   3af50:	cmp	w1, #0x4
   3af54:	mov	w0, #0x1                   	// #1
   3af58:	b.ls	3afd8 <aarch64_ext_ldst_elemlist@@Base+0x174>  // b.plast
   3af5c:	adrp	x3, 53000 <xexit@@Base+0x508>
   3af60:	add	x3, x3, #0xc28
   3af64:	adrp	x1, 53000 <xexit@@Base+0x508>
   3af68:	adrp	x0, 53000 <xexit@@Base+0x508>
   3af6c:	add	x3, x3, #0x2b7
   3af70:	add	x1, x1, #0x4e6
   3af74:	add	x0, x0, #0x85c
   3af78:	mov	w2, #0x22d                 	// #557
   3af7c:	bl	35b10 <__assert_fail@plt>
   3af80:	tbnz	w4, #0, 3afd4 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3af84:	mov	w0, #0x6                   	// #6
   3af88:	lsr	w4, w4, #1
   3af8c:	strb	w0, [x19, #4]
   3af90:	b	3af1c <aarch64_ext_ldst_elemlist@@Base+0xb8>
   3af94:	tbnz	w4, #1, 3afd4 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3af98:	tbnz	w4, #0, 3afac <aarch64_ext_ldst_elemlist@@Base+0x148>
   3af9c:	mov	w0, #0x7                   	// #7
   3afa0:	lsr	w4, w4, #2
   3afa4:	strb	w0, [x19, #4]
   3afa8:	b	3af1c <aarch64_ext_ldst_elemlist@@Base+0xb8>
   3afac:	ldr	x0, [x20, #3944]
   3afb0:	mov	w1, w22
   3afb4:	mov	w2, #0x0                   	// #0
   3afb8:	add	x0, x0, #0xf8
   3afbc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3afc0:	cbnz	w0, 3afd4 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3afc4:	mov	w0, #0x8                   	// #8
   3afc8:	lsr	w4, w4, #3
   3afcc:	strb	w0, [x19, #4]
   3afd0:	b	3af1c <aarch64_ext_ldst_elemlist@@Base+0xb8>
   3afd4:	mov	w0, #0x0                   	// #0
   3afd8:	ldp	x19, x20, [sp, #16]
   3afdc:	ldp	x21, x22, [sp, #32]
   3afe0:	ldr	x23, [sp, #48]
   3afe4:	ldp	x29, x30, [sp], #80
   3afe8:	ret

000000000003afec <aarch64_ext_advsimd_imm_shift@@Base>:
   3afec:	stp	x29, x30, [sp, #-80]!
   3aff0:	mov	x29, sp
   3aff4:	stp	x21, x22, [sp, #32]
   3aff8:	adrp	x22, 97000 <aarch64_operands@@Base+0x16bc0>
   3affc:	ldr	x0, [x22, #3944]
   3b000:	stp	x23, x24, [sp, #48]
   3b004:	mov	w24, w2
   3b008:	add	x0, x0, #0x1b0
   3b00c:	mov	w2, #0x0                   	// #0
   3b010:	stp	x19, x20, [sp, #16]
   3b014:	mov	x19, x1
   3b018:	mov	w1, w24
   3b01c:	str	x25, [sp, #64]
   3b020:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b024:	cbz	w0, 3b128 <aarch64_ext_advsimd_imm_shift@@Base+0x13c>
   3b028:	mov	w23, w0
   3b02c:	mov	w4, #0x35                  	// #53
   3b030:	ldr	x0, [x3, #8]
   3b034:	mov	w2, #0x2                   	// #2
   3b038:	mov	w1, #0x0                   	// #0
   3b03c:	mov	w3, #0x36                  	// #54
   3b040:	mov	w20, #0x4                   	// #4
   3b044:	ldr	w25, [x0, #16]
   3b048:	mov	w0, w24
   3b04c:	bl	353d0 <extract_fields@plt>
   3b050:	mov	w21, w0
   3b054:	sub	w20, w20, #0x1
   3b058:	cmn	w20, #0x1
   3b05c:	b.eq	3b064 <aarch64_ext_advsimd_imm_shift@@Base+0x78>  // b.none
   3b060:	tbz	w23, #3, 3b0a4 <aarch64_ext_advsimd_imm_shift@@Base+0xb8>
   3b064:	cmp	w25, #0xe
   3b068:	ccmp	w25, #0x1a, #0x4, ne  // ne = any
   3b06c:	b.ne	3b080 <aarch64_ext_advsimd_imm_shift@@Base+0x94>  // b.any
   3b070:	ldr	w0, [x19]
   3b074:	sub	w0, w0, #0x2b
   3b078:	cmp	w0, #0x1
   3b07c:	b.ls	3b0ac <aarch64_ext_advsimd_imm_shift@@Base+0xc0>  // b.plast
   3b080:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b084:	add	x3, x3, #0xc28
   3b088:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b08c:	adrp	x0, 53000 <xexit@@Base+0x508>
   3b090:	add	x3, x3, #0x2d1
   3b094:	add	x1, x1, #0x4e6
   3b098:	add	x0, x0, #0x897
   3b09c:	mov	w2, #0x249                 	// #585
   3b0a0:	bl	35b10 <__assert_fail@plt>
   3b0a4:	lsl	w23, w23, #1
   3b0a8:	b	3b054 <aarch64_ext_advsimd_imm_shift@@Base+0x68>
   3b0ac:	cmp	w25, #0xe
   3b0b0:	b.ne	3b10c <aarch64_ext_advsimd_imm_shift@@Base+0x120>  // b.any
   3b0b4:	ldr	x0, [x22, #3944]
   3b0b8:	mov	w1, w24
   3b0bc:	mov	w2, #0x0                   	// #0
   3b0c0:	add	x0, x0, #0x58
   3b0c4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b0c8:	orr	w0, w0, w20, lsl #1
   3b0cc:	bl	3937c <aarch64_opcode_encode@@Base+0x120c>
   3b0d0:	strb	w0, [x19, #4]
   3b0d4:	ldr	w0, [x19]
   3b0d8:	cmp	w0, #0x2c
   3b0dc:	b.ne	3b118 <aarch64_ext_advsimd_imm_shift@@Base+0x12c>  // b.any
   3b0e0:	mov	w0, #0x10                  	// #16
   3b0e4:	lsl	w20, w0, w20
   3b0e8:	sub	w21, w20, w21
   3b0ec:	mov	w0, #0x1                   	// #1
   3b0f0:	str	x21, [x19, #16]
   3b0f4:	ldp	x19, x20, [sp, #16]
   3b0f8:	ldp	x21, x22, [sp, #32]
   3b0fc:	ldp	x23, x24, [sp, #48]
   3b100:	ldr	x25, [sp, #64]
   3b104:	ldp	x29, x30, [sp], #80
   3b108:	ret
   3b10c:	mov	w0, w20
   3b110:	bl	3931c <aarch64_opcode_encode@@Base+0x11ac>
   3b114:	b	3b0d0 <aarch64_ext_advsimd_imm_shift@@Base+0xe4>
   3b118:	mov	w0, #0x8                   	// #8
   3b11c:	lsl	w20, w0, w20
   3b120:	sub	w21, w21, w20
   3b124:	b	3b0ec <aarch64_ext_advsimd_imm_shift@@Base+0x100>
   3b128:	mov	w0, #0x0                   	// #0
   3b12c:	b	3b0f4 <aarch64_ext_advsimd_imm_shift@@Base+0x108>

000000000003b130 <aarch64_ext_shll_imm@@Base>:
   3b130:	stp	x29, x30, [sp, #-16]!
   3b134:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b138:	mov	x3, x1
   3b13c:	mov	x29, sp
   3b140:	ldr	x0, [x0, #3944]
   3b144:	mov	w1, w2
   3b148:	mov	w2, #0x0                   	// #0
   3b14c:	add	x0, x0, #0x40
   3b150:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b154:	cmp	w0, #0x2
   3b158:	b.hi	3b17c <aarch64_ext_shll_imm@@Base+0x4c>  // b.pmore
   3b15c:	adrp	x2, 53000 <xexit@@Base+0x508>
   3b160:	add	x2, x2, #0xc28
   3b164:	add	x2, x2, #0x2ef
   3b168:	ldrsb	x0, [x2, w0, uxtw]
   3b16c:	str	x0, [x3, #16]
   3b170:	mov	w0, #0x1                   	// #1
   3b174:	ldp	x29, x30, [sp], #16
   3b178:	ret
   3b17c:	mov	w0, #0x0                   	// #0
   3b180:	b	3b174 <aarch64_ext_shll_imm@@Base+0x44>

000000000003b184 <aarch64_ext_imm@@Base>:
   3b184:	mov	x9, x0
   3b188:	mov	x10, x1
   3b18c:	stp	x29, x30, [sp, #-16]!
   3b190:	mov	w1, w2
   3b194:	mov	x29, sp
   3b198:	bl	38f38 <aarch64_opcode_encode@@Base+0xdc8>
   3b19c:	ldr	w4, [x9, #16]
   3b1a0:	mov	w2, w0
   3b1a4:	tbz	w4, #2, 3b220 <aarch64_ext_imm@@Base+0x9c>
   3b1a8:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   3b1ac:	add	x9, x9, #0x14
   3b1b0:	mov	w0, #0x0                   	// #0
   3b1b4:	ldr	x3, [x3, #3944]
   3b1b8:	ldr	w1, [x9], #4
   3b1bc:	cbnz	w1, 3b1f0 <aarch64_ext_imm@@Base+0x6c>
   3b1c0:	sub	w3, w0, #0x1
   3b1c4:	cmp	w3, #0x1e
   3b1c8:	b.ls	3b200 <aarch64_ext_imm@@Base+0x7c>  // b.plast
   3b1cc:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b1d0:	add	x3, x3, #0xc28
   3b1d4:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3b1d8:	adrp	x0, 53000 <xexit@@Base+0x508>
   3b1dc:	add	x3, x3, #0x2f2
   3b1e0:	add	x1, x1, #0xb7e
   3b1e4:	add	x0, x0, #0x912
   3b1e8:	mov	w2, #0x12e                 	// #302
   3b1ec:	bl	35b10 <__assert_fail@plt>
   3b1f0:	add	x1, x3, w1, uxtw #3
   3b1f4:	ldr	w1, [x1, #4]
   3b1f8:	add	w0, w0, w1
   3b1fc:	b	3b1b8 <aarch64_ext_imm@@Base+0x34>
   3b200:	mov	x0, #0x2                   	// #2
   3b204:	mov	x1, #0x1                   	// #1
   3b208:	lsl	x0, x0, x3
   3b20c:	sub	x0, x0, #0x1
   3b210:	and	x2, x0, x2
   3b214:	lsl	x1, x1, x3
   3b218:	eor	x2, x2, x1
   3b21c:	sub	x2, x2, x1
   3b220:	tbz	w4, #3, 3b248 <aarch64_ext_imm@@Base+0xc4>
   3b224:	lsl	x2, x2, #2
   3b228:	ldr	w0, [x10]
   3b22c:	cmp	w0, #0x4e
   3b230:	b.ne	3b238 <aarch64_ext_imm@@Base+0xb4>  // b.any
   3b234:	lsl	x2, x2, #12
   3b238:	ldp	x29, x30, [sp], #16
   3b23c:	mov	w0, #0x1                   	// #1
   3b240:	str	x2, [x10, #16]
   3b244:	ret
   3b248:	tbz	w4, #9, 3b228 <aarch64_ext_imm@@Base+0xa4>
   3b24c:	lsl	x2, x2, #4
   3b250:	b	3b228 <aarch64_ext_imm@@Base+0xa4>

000000000003b254 <aarch64_ext_imm_half@@Base>:
   3b254:	stp	x29, x30, [sp, #-32]!
   3b258:	mov	x29, sp
   3b25c:	stp	x19, x20, [sp, #16]
   3b260:	mov	x19, x1
   3b264:	mov	w20, w2
   3b268:	bl	35770 <aarch64_ext_imm@plt>
   3b26c:	mov	w0, #0x5                   	// #5
   3b270:	str	w0, [x19, #32]
   3b274:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b278:	mov	w1, w20
   3b27c:	mov	w2, #0x0                   	// #0
   3b280:	ldr	x0, [x0, #3944]
   3b284:	add	x0, x0, #0x100
   3b288:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b28c:	lsl	w0, w0, #4
   3b290:	str	x0, [x19, #40]
   3b294:	mov	w0, #0x1                   	// #1
   3b298:	ldp	x19, x20, [sp, #16]
   3b29c:	ldp	x29, x30, [sp], #32
   3b2a0:	ret

000000000003b2a4 <aarch64_ext_advsimd_imm_modified@@Base>:
   3b2a4:	stp	x29, x30, [sp, #-80]!
   3b2a8:	mov	x29, sp
   3b2ac:	ldr	w0, [x1, #8]
   3b2b0:	stp	x19, x20, [sp, #16]
   3b2b4:	cmp	w0, #0x1
   3b2b8:	stp	x21, x22, [sp, #32]
   3b2bc:	stp	x23, x24, [sp, #48]
   3b2c0:	str	xzr, [sp, #72]
   3b2c4:	ldrb	w24, [x3, #28]
   3b2c8:	b.eq	3b2f0 <aarch64_ext_advsimd_imm_modified@@Base+0x4c>  // b.none
   3b2cc:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b2d0:	add	x3, x3, #0xc28
   3b2d4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b2d8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3b2dc:	add	x3, x3, #0x30b
   3b2e0:	add	x1, x1, #0x4e6
   3b2e4:	add	x0, x0, #0xc6f
   3b2e8:	mov	w2, #0x2bf                 	// #703
   3b2ec:	bl	35b10 <__assert_fail@plt>
   3b2f0:	ldr	w0, [x1]
   3b2f4:	mov	x19, x1
   3b2f8:	mov	w20, w2
   3b2fc:	mov	x21, x3
   3b300:	cmp	w0, #0x2f
   3b304:	b.ne	3b314 <aarch64_ext_advsimd_imm_modified@@Base+0x70>  // b.any
   3b308:	ldrb	w0, [x1, #24]
   3b30c:	orr	w0, w0, #0x1
   3b310:	strb	w0, [x1, #24]
   3b314:	mov	w0, w20
   3b318:	mov	w4, #0x3                   	// #3
   3b31c:	mov	w3, #0x4                   	// #4
   3b320:	mov	w2, #0x2                   	// #2
   3b324:	mov	w1, #0x0                   	// #0
   3b328:	bl	353d0 <extract_fields@plt>
   3b32c:	mov	w22, w0
   3b330:	ldrb	w0, [x19, #24]
   3b334:	mov	x23, x22
   3b338:	tbnz	w0, #0, 3b37c <aarch64_ext_advsimd_imm_modified@@Base+0xd8>
   3b33c:	mov	w0, w24
   3b340:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3b344:	and	w0, w0, #0xff
   3b348:	cmp	w0, #0x8
   3b34c:	b.ne	3b37c <aarch64_ext_advsimd_imm_modified@@Base+0xd8>  // b.any
   3b350:	mov	w1, #0x0                   	// #0
   3b354:	mov	x22, #0x0                   	// #0
   3b358:	mov	x2, #0xff                  	// #255
   3b35c:	lsr	w0, w23, w1
   3b360:	tbz	w0, #0, 3b370 <aarch64_ext_advsimd_imm_modified@@Base+0xcc>
   3b364:	lsl	w0, w1, #3
   3b368:	lsl	x0, x2, x0
   3b36c:	orr	x22, x22, x0
   3b370:	add	w1, w1, #0x1
   3b374:	cmp	w1, #0x8
   3b378:	b.ne	3b35c <aarch64_ext_advsimd_imm_modified@@Base+0xb8>  // b.any
   3b37c:	ldr	w1, [x19, #8]
   3b380:	mov	x0, x21
   3b384:	str	x22, [x19, #16]
   3b388:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3b38c:	strb	w0, [x19, #4]
   3b390:	and	w1, w0, #0xff
   3b394:	cmp	w1, #0x21
   3b398:	b.eq	3b3c4 <aarch64_ext_advsimd_imm_modified@@Base+0x120>  // b.none
   3b39c:	cmp	w1, #0x22
   3b3a0:	b.eq	3b484 <aarch64_ext_advsimd_imm_modified@@Base+0x1e0>  // b.none
   3b3a4:	cbnz	w1, 3b4cc <aarch64_ext_advsimd_imm_modified@@Base+0x228>
   3b3a8:	str	wzr, [x19, #32]
   3b3ac:	mov	w0, #0x1                   	// #1
   3b3b0:	ldp	x19, x20, [sp, #16]
   3b3b4:	ldp	x21, x22, [sp, #32]
   3b3b8:	ldp	x23, x24, [sp, #48]
   3b3bc:	ldp	x29, x30, [sp], #80
   3b3c0:	ret
   3b3c4:	mov	w0, #0x5                   	// #5
   3b3c8:	str	w0, [x19, #32]
   3b3cc:	mov	w0, w24
   3b3d0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3b3d4:	and	w0, w0, #0xff
   3b3d8:	cmp	w0, #0x2
   3b3dc:	b.eq	3b438 <aarch64_ext_advsimd_imm_modified@@Base+0x194>  // b.none
   3b3e0:	cmp	w0, #0x4
   3b3e4:	b.eq	3b40c <aarch64_ext_advsimd_imm_modified@@Base+0x168>  // b.none
   3b3e8:	cmp	w0, #0x1
   3b3ec:	b.ne	3b460 <aarch64_ext_advsimd_imm_modified@@Base+0x1bc>  // b.any
   3b3f0:	mov	w1, w20
   3b3f4:	add	x0, sp, #0x48
   3b3f8:	mov	w2, #0x0                   	// #0
   3b3fc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b400:	lsl	w0, w0, #3
   3b404:	str	x0, [x19, #40]
   3b408:	b	3b3ac <aarch64_ext_advsimd_imm_modified@@Base+0x108>
   3b40c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b410:	ldr	x0, [x0, #3944]
   3b414:	ldr	w1, [x0, #204]
   3b418:	cmp	w1, #0x2
   3b41c:	b.le	3b3f0 <aarch64_ext_advsimd_imm_modified@@Base+0x14c>
   3b420:	ldr	w0, [x0, #200]
   3b424:	add	w0, w0, #0x1
   3b428:	str	w0, [sp, #72]
   3b42c:	mov	w0, #0x2                   	// #2
   3b430:	str	w0, [sp, #76]
   3b434:	b	3b3f0 <aarch64_ext_advsimd_imm_modified@@Base+0x14c>
   3b438:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b43c:	ldr	x0, [x0, #3944]
   3b440:	ldr	w1, [x0, #204]
   3b444:	cmp	w1, #0x1
   3b448:	b.le	3b3f0 <aarch64_ext_advsimd_imm_modified@@Base+0x14c>
   3b44c:	ldr	w0, [x0, #200]
   3b450:	add	w0, w0, #0x1
   3b454:	str	w0, [sp, #72]
   3b458:	mov	w0, #0x1                   	// #1
   3b45c:	b	3b430 <aarch64_ext_advsimd_imm_modified@@Base+0x18c>
   3b460:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b464:	add	x3, x3, #0xc28
   3b468:	add	x3, x3, #0x30b
   3b46c:	mov	w2, #0x2e5                 	// #741
   3b470:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b474:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3b478:	add	x1, x1, #0x4e6
   3b47c:	add	x0, x0, #0x679
   3b480:	b	3b2ec <aarch64_ext_advsimd_imm_modified@@Base+0x48>
   3b484:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b488:	mov	w1, #0x1                   	// #1
   3b48c:	str	w1, [x19, #32]
   3b490:	ldr	x0, [x0, #3944]
   3b494:	ldr	w2, [x0, #204]
   3b498:	cmp	w2, #0x0
   3b49c:	b.le	3b4a8 <aarch64_ext_advsimd_imm_modified@@Base+0x204>
   3b4a0:	ldr	w0, [x0, #200]
   3b4a4:	stp	w0, w1, [sp, #72]
   3b4a8:	mov	w1, w20
   3b4ac:	add	x0, sp, #0x48
   3b4b0:	mov	w2, #0x0                   	// #0
   3b4b4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b4b8:	cmp	w0, #0x0
   3b4bc:	mov	x1, #0x8                   	// #8
   3b4c0:	mov	x0, #0x10                  	// #16
   3b4c4:	csel	x0, x0, x1, ne  // ne = any
   3b4c8:	b	3b404 <aarch64_ext_advsimd_imm_modified@@Base+0x160>
   3b4cc:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b4d0:	add	x3, x3, #0xc28
   3b4d4:	add	x3, x3, #0x30b
   3b4d8:	mov	w2, #0x2f1                 	// #753
   3b4dc:	b	3b470 <aarch64_ext_advsimd_imm_modified@@Base+0x1cc>

000000000003b4e0 <aarch64_ext_fpimm@@Base>:
   3b4e0:	mov	x9, x1
   3b4e4:	stp	x29, x30, [sp, #-16]!
   3b4e8:	mov	w1, w2
   3b4ec:	mov	x29, sp
   3b4f0:	bl	38f38 <aarch64_opcode_encode@@Base+0xdc8>
   3b4f4:	mov	w0, w0
   3b4f8:	ldp	x29, x30, [sp], #16
   3b4fc:	str	x0, [x9, #16]
   3b500:	ldrb	w0, [x9, #24]
   3b504:	orr	w0, w0, #0x1
   3b508:	strb	w0, [x9, #24]
   3b50c:	mov	w0, #0x1                   	// #1
   3b510:	ret

000000000003b514 <aarch64_ext_imm_rotate1@@Base>:
   3b514:	stp	x29, x30, [sp, #-16]!
   3b518:	mov	x3, x1
   3b51c:	mov	w1, w2
   3b520:	mov	x29, sp
   3b524:	ldr	w4, [x0, #20]
   3b528:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b52c:	mov	w2, #0x0                   	// #0
   3b530:	ldr	x0, [x0, #3944]
   3b534:	add	x0, x0, x4, lsl #3
   3b538:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b53c:	cmp	w0, #0x1
   3b540:	b.ls	3b568 <aarch64_ext_imm_rotate1@@Base+0x54>  // b.plast
   3b544:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b548:	add	x3, x3, #0xc28
   3b54c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b550:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3b554:	add	x3, x3, #0x32c
   3b558:	add	x1, x1, #0x4e6
   3b55c:	add	x0, x0, #0xd7f
   3b560:	mov	w2, #0x30c                 	// #780
   3b564:	bl	35b10 <__assert_fail@plt>
   3b568:	mov	w2, #0xb4                  	// #180
   3b56c:	mov	x1, #0x5a                  	// #90
   3b570:	umaddl	x0, w0, w2, x1
   3b574:	str	x0, [x3, #16]
   3b578:	mov	w0, #0x1                   	// #1
   3b57c:	ldp	x29, x30, [sp], #16
   3b580:	ret

000000000003b584 <aarch64_ext_imm_rotate2@@Base>:
   3b584:	stp	x29, x30, [sp, #-16]!
   3b588:	mov	x3, x1
   3b58c:	mov	w1, w2
   3b590:	mov	x29, sp
   3b594:	ldr	w4, [x0, #20]
   3b598:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b59c:	mov	w2, #0x0                   	// #0
   3b5a0:	ldr	x0, [x0, #3944]
   3b5a4:	add	x0, x0, x4, lsl #3
   3b5a8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b5ac:	cmp	w0, #0x3
   3b5b0:	b.ls	3b5d8 <aarch64_ext_imm_rotate2@@Base+0x54>  // b.plast
   3b5b4:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b5b8:	add	x3, x3, #0xc28
   3b5bc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b5c0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3b5c4:	add	x3, x3, #0x344
   3b5c8:	add	x1, x1, #0x4e6
   3b5cc:	add	x0, x0, #0xd88
   3b5d0:	mov	w2, #0x319                 	// #793
   3b5d4:	bl	35b10 <__assert_fail@plt>
   3b5d8:	mov	w1, #0x5a                  	// #90
   3b5dc:	umull	x0, w0, w1
   3b5e0:	str	x0, [x3, #16]
   3b5e4:	mov	w0, #0x1                   	// #1
   3b5e8:	ldp	x29, x30, [sp], #16
   3b5ec:	ret

000000000003b5f0 <aarch64_ext_fbits@@Base>:
   3b5f0:	stp	x29, x30, [sp, #-16]!
   3b5f4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b5f8:	mov	x3, x1
   3b5fc:	mov	x29, sp
   3b600:	ldr	x0, [x0, #3944]
   3b604:	mov	w1, w2
   3b608:	mov	w2, #0x0                   	// #0
   3b60c:	add	x0, x0, #0x210
   3b610:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b614:	ldp	x29, x30, [sp], #16
   3b618:	mov	w1, #0x40                  	// #64
   3b61c:	sub	w1, w1, w0
   3b620:	mov	w0, #0x1                   	// #1
   3b624:	str	x1, [x3, #16]
   3b628:	ret

000000000003b62c <aarch64_ext_aimm@@Base>:
   3b62c:	stp	x29, x30, [sp, #-16]!
   3b630:	adrp	x4, 97000 <aarch64_operands@@Base+0x16bc0>
   3b634:	mov	w5, w2
   3b638:	mov	x29, sp
   3b63c:	ldr	x4, [x4, #3944]
   3b640:	mov	x3, x1
   3b644:	mov	w0, #0x5                   	// #5
   3b648:	str	w0, [x1, #32]
   3b64c:	mov	w2, #0x0                   	// #0
   3b650:	mov	w1, w5
   3b654:	add	x0, x4, #0x118
   3b658:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b65c:	cmp	w0, #0x1
   3b660:	b.hi	3b698 <aarch64_ext_aimm@@Base+0x6c>  // b.pmore
   3b664:	cmp	w0, #0x0
   3b668:	mov	x0, #0xc                   	// #12
   3b66c:	csel	x0, x0, xzr, ne  // ne = any
   3b670:	str	x0, [x3, #40]
   3b674:	mov	w1, w5
   3b678:	add	x0, x4, #0x178
   3b67c:	mov	w2, #0x0                   	// #0
   3b680:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b684:	mov	w0, w0
   3b688:	str	x0, [x3, #16]
   3b68c:	mov	w0, #0x1                   	// #1
   3b690:	ldp	x29, x30, [sp], #16
   3b694:	ret
   3b698:	mov	w0, #0x0                   	// #0
   3b69c:	b	3b690 <aarch64_ext_aimm@@Base+0x64>

000000000003b6a0 <aarch64_ext_limm@@Base>:
   3b6a0:	stp	x29, x30, [sp, #-48]!
   3b6a4:	mov	x6, x0
   3b6a8:	mov	w0, w2
   3b6ac:	mov	x29, sp
   3b6b0:	ldp	w4, w5, [x6, #24]
   3b6b4:	str	x21, [sp, #32]
   3b6b8:	mov	x21, x3
   3b6bc:	ldr	w3, [x6, #20]
   3b6c0:	mov	w2, #0x3                   	// #3
   3b6c4:	stp	x19, x20, [sp, #16]
   3b6c8:	mov	x20, x1
   3b6cc:	mov	w1, #0x0                   	// #0
   3b6d0:	bl	353d0 <extract_fields@plt>
   3b6d4:	mov	w19, w0
   3b6d8:	ldrb	w0, [x21, #28]
   3b6dc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3b6e0:	and	w0, w0, #0xff
   3b6e4:	and	w2, w19, #0x3f
   3b6e8:	ubfx	x6, x19, #6, #6
   3b6ec:	tbnz	w19, #12, 3b7ec <aarch64_ext_limm@@Base+0x14c>
   3b6f0:	cmp	w2, #0x37
   3b6f4:	b.hi	3b7a4 <aarch64_ext_limm@@Base+0x104>  // b.pmore
   3b6f8:	cmp	w2, #0x2f
   3b6fc:	b.hi	3b7c0 <aarch64_ext_limm@@Base+0x120>  // b.pmore
   3b700:	tbz	w19, #5, 3b7e4 <aarch64_ext_limm@@Base+0x144>
   3b704:	and	w2, w19, #0xf
   3b708:	mov	w3, #0x10                  	// #16
   3b70c:	sub	w1, w3, #0x1
   3b710:	mov	x5, #0x1                   	// #1
   3b714:	lsl	x5, x5, x3
   3b718:	and	w6, w6, w1
   3b71c:	sub	x5, x5, #0x1
   3b720:	cmp	w3, w0, lsl #3
   3b724:	b.hi	3b7b8 <aarch64_ext_limm@@Base+0x118>  // b.pmore
   3b728:	sub	w1, w3, #0x1
   3b72c:	cmp	w1, w2
   3b730:	b.eq	3b7b8 <aarch64_ext_limm@@Base+0x118>  // b.none
   3b734:	add	w4, w2, #0x1
   3b738:	mov	x2, #0x1                   	// #1
   3b73c:	lsl	x2, x2, x4
   3b740:	sub	x2, x2, #0x1
   3b744:	cbz	w6, 3b75c <aarch64_ext_limm@@Base+0xbc>
   3b748:	sub	w1, w3, w6
   3b74c:	lsl	x1, x2, x1
   3b750:	and	x5, x1, x5
   3b754:	lsr	x2, x2, x6
   3b758:	orr	x2, x5, x2
   3b75c:	cmp	w3, #0x10
   3b760:	b.eq	3b840 <aarch64_ext_limm@@Base+0x1a0>  // b.none
   3b764:	b.hi	3b7f8 <aarch64_ext_limm@@Base+0x158>  // b.pmore
   3b768:	cmp	w3, #0x4
   3b76c:	b.eq	3b838 <aarch64_ext_limm@@Base+0x198>  // b.none
   3b770:	cmp	w3, #0x8
   3b774:	b.eq	3b83c <aarch64_ext_limm@@Base+0x19c>  // b.none
   3b778:	cmp	w3, #0x2
   3b77c:	b.eq	3b834 <aarch64_ext_limm@@Base+0x194>  // b.none
   3b780:	adrp	x3, 53000 <xexit@@Base+0x508>
   3b784:	add	x3, x3, #0xc28
   3b788:	adrp	x1, 53000 <xexit@@Base+0x508>
   3b78c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3b790:	add	x3, x3, #0x35c
   3b794:	add	x1, x1, #0x4e6
   3b798:	add	x0, x0, #0x679
   3b79c:	mov	w2, #0x37f                 	// #895
   3b7a0:	bl	35b10 <__assert_fail@plt>
   3b7a4:	cmp	w2, #0x3b
   3b7a8:	b.ls	3b7cc <aarch64_ext_limm@@Base+0x12c>  // b.plast
   3b7ac:	sub	w2, w2, #0x3c
   3b7b0:	cmp	w2, #0x1
   3b7b4:	b.ls	3b7d8 <aarch64_ext_limm@@Base+0x138>  // b.plast
   3b7b8:	mov	w0, #0x0                   	// #0
   3b7bc:	b	3b824 <aarch64_ext_limm@@Base+0x184>
   3b7c0:	and	w2, w19, #0x7
   3b7c4:	mov	w3, #0x8                   	// #8
   3b7c8:	b	3b70c <aarch64_ext_limm@@Base+0x6c>
   3b7cc:	and	w2, w19, #0x3
   3b7d0:	mov	w3, #0x4                   	// #4
   3b7d4:	b	3b70c <aarch64_ext_limm@@Base+0x6c>
   3b7d8:	and	w2, w19, #0x1
   3b7dc:	mov	w3, #0x2                   	// #2
   3b7e0:	b	3b70c <aarch64_ext_limm@@Base+0x6c>
   3b7e4:	mov	w3, #0x20                  	// #32
   3b7e8:	b	3b70c <aarch64_ext_limm@@Base+0x6c>
   3b7ec:	mov	w3, #0x40                  	// #64
   3b7f0:	mov	x5, #0xffffffffffffffff    	// #-1
   3b7f4:	b	3b720 <aarch64_ext_limm@@Base+0x80>
   3b7f8:	cmp	w3, #0x20
   3b7fc:	b.eq	3b844 <aarch64_ext_limm@@Base+0x1a4>  // b.none
   3b800:	cmp	w3, #0x40
   3b804:	b.ne	3b780 <aarch64_ext_limm@@Base+0xe0>  // b.any
   3b808:	lsl	w3, w0, #2
   3b80c:	mov	x0, #0xffffffffffffffff    	// #-1
   3b810:	lsl	x0, x0, x3
   3b814:	lsl	x0, x0, x3
   3b818:	bic	x2, x2, x0
   3b81c:	mov	w0, #0x1                   	// #1
   3b820:	str	x2, [x20, #16]
   3b824:	ldp	x19, x20, [sp, #16]
   3b828:	ldr	x21, [sp, #32]
   3b82c:	ldp	x29, x30, [sp], #48
   3b830:	ret
   3b834:	orr	x2, x2, x2, lsl #2
   3b838:	orr	x2, x2, x2, lsl #4
   3b83c:	orr	x2, x2, x2, lsl #8
   3b840:	orr	x2, x2, x2, lsl #16
   3b844:	orr	x2, x2, x2, lsl #32
   3b848:	b	3b808 <aarch64_ext_limm@@Base+0x168>

000000000003b84c <aarch64_ext_inv_limm@@Base>:
   3b84c:	stp	x29, x30, [sp, #-32]!
   3b850:	mov	x29, sp
   3b854:	str	x19, [sp, #16]
   3b858:	mov	x19, x1
   3b85c:	bl	35460 <aarch64_ext_limm@plt>
   3b860:	cbz	w0, 3b874 <aarch64_ext_inv_limm@@Base+0x28>
   3b864:	ldr	x0, [x19, #16]
   3b868:	mvn	x0, x0
   3b86c:	str	x0, [x19, #16]
   3b870:	mov	w0, #0x1                   	// #1
   3b874:	ldr	x19, [sp, #16]
   3b878:	ldp	x29, x30, [sp], #32
   3b87c:	ret

000000000003b880 <aarch64_ext_ft@@Base>:
   3b880:	stp	x29, x30, [sp, #-32]!
   3b884:	adrp	x4, 97000 <aarch64_operands@@Base+0x16bc0>
   3b888:	mov	w5, w2
   3b88c:	mov	x29, sp
   3b890:	ldr	x4, [x4, #3944]
   3b894:	str	x19, [sp, #16]
   3b898:	mov	x19, x1
   3b89c:	mov	w2, #0x0                   	// #0
   3b8a0:	mov	w1, w5
   3b8a4:	add	x0, x4, #0x60
   3b8a8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b8ac:	mov	w1, w5
   3b8b0:	str	w0, [x19, #16]
   3b8b4:	mov	w2, #0x0                   	// #0
   3b8b8:	add	x0, x4, #0x128
   3b8bc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b8c0:	ldr	x1, [x3, #8]
   3b8c4:	ldr	w1, [x1, #16]
   3b8c8:	sub	w1, w1, #0x3d
   3b8cc:	cmp	w1, #0x3
   3b8d0:	b.hi	3b8fc <aarch64_ext_ft@@Base+0x7c>  // b.pmore
   3b8d4:	cmp	w0, #0x2
   3b8d8:	b.ls	3b8ec <aarch64_ext_ft@@Base+0x6c>  // b.plast
   3b8dc:	mov	w0, #0x0                   	// #0
   3b8e0:	ldr	x19, [sp, #16]
   3b8e4:	ldp	x29, x30, [sp], #32
   3b8e8:	ret
   3b8ec:	add	w0, w0, #0x7
   3b8f0:	strb	w0, [x19, #4]
   3b8f4:	mov	w0, #0x1                   	// #1
   3b8f8:	b	3b8e0 <aarch64_ext_ft@@Base+0x60>
   3b8fc:	mov	w0, w5
   3b900:	mov	w4, #0x25                  	// #37
   3b904:	mov	w3, #0x22                  	// #34
   3b908:	mov	w2, #0x2                   	// #2
   3b90c:	mov	w1, #0x0                   	// #0
   3b910:	bl	353d0 <extract_fields@plt>
   3b914:	cmp	w0, #0x4
   3b918:	b.hi	3b8dc <aarch64_ext_ft@@Base+0x5c>  // b.pmore
   3b91c:	bl	3931c <aarch64_opcode_encode@@Base+0x11ac>
   3b920:	b	3b8f0 <aarch64_ext_ft@@Base+0x70>

000000000003b924 <aarch64_ext_addr_simple@@Base>:
   3b924:	stp	x29, x30, [sp, #-16]!
   3b928:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3b92c:	mov	x3, x1
   3b930:	mov	x29, sp
   3b934:	ldr	x0, [x0, #3944]
   3b938:	mov	w1, w2
   3b93c:	mov	w2, #0x0                   	// #0
   3b940:	add	x0, x0, #0x70
   3b944:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b948:	ldp	x29, x30, [sp], #16
   3b94c:	str	w0, [x3, #16]
   3b950:	mov	w0, #0x1                   	// #1
   3b954:	ret

000000000003b958 <aarch64_ext_addr_offset@@Base>:
   3b958:	stp	x29, x30, [sp, #-48]!
   3b95c:	mov	x29, sp
   3b960:	stp	x19, x20, [sp, #16]
   3b964:	mov	x19, x1
   3b968:	ldr	w1, [x1, #8]
   3b96c:	stp	x21, x22, [sp, #32]
   3b970:	mov	x21, x0
   3b974:	adrp	x22, 97000 <aarch64_operands@@Base+0x16bc0>
   3b978:	mov	w20, w2
   3b97c:	mov	x0, x3
   3b980:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3b984:	strb	w0, [x19, #4]
   3b988:	ldr	x22, [x22, #3944]
   3b98c:	mov	w1, w20
   3b990:	ldr	w0, [x21, #20]
   3b994:	mov	w2, #0x0                   	// #0
   3b998:	add	x0, x22, x0, lsl #3
   3b99c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b9a0:	ldr	w3, [x21, #24]
   3b9a4:	mov	w2, #0x1                   	// #1
   3b9a8:	str	w0, [x19, #16]
   3b9ac:	mov	w1, #0x0                   	// #0
   3b9b0:	mov	w0, w20
   3b9b4:	bl	353d0 <extract_fields@plt>
   3b9b8:	sbfx	x0, x0, #0, #9
   3b9bc:	str	w0, [x19, #20]
   3b9c0:	mov	w1, w20
   3b9c4:	ldr	w0, [x21, #28]
   3b9c8:	mov	w2, #0x0                   	// #0
   3b9cc:	add	x0, x22, x0, lsl #3
   3b9d0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3b9d4:	cmp	w0, #0x1
   3b9d8:	b.ne	3b9e8 <aarch64_ext_addr_offset@@Base+0x90>  // b.any
   3b9dc:	ldrb	w0, [x19, #28]
   3b9e0:	orr	w0, w0, #0x6
   3b9e4:	strb	w0, [x19, #28]
   3b9e8:	mov	w0, #0x1                   	// #1
   3b9ec:	ldp	x19, x20, [sp, #16]
   3b9f0:	ldp	x21, x22, [sp, #32]
   3b9f4:	ldp	x29, x30, [sp], #48
   3b9f8:	ret

000000000003b9fc <aarch64_ext_addr_regoff@@Base>:
   3b9fc:	stp	x29, x30, [sp, #-48]!
   3ba00:	mov	x29, sp
   3ba04:	stp	x19, x20, [sp, #16]
   3ba08:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   3ba0c:	mov	x19, x1
   3ba10:	ldr	x20, [x20, #3944]
   3ba14:	stp	x21, x22, [sp, #32]
   3ba18:	mov	w21, w2
   3ba1c:	mov	x22, x3
   3ba20:	mov	w1, w21
   3ba24:	mov	w2, #0x0                   	// #0
   3ba28:	add	x0, x20, #0x70
   3ba2c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ba30:	str	w0, [x19, #16]
   3ba34:	mov	w1, w21
   3ba38:	mov	w2, #0x0                   	// #0
   3ba3c:	add	x0, x20, #0xe0
   3ba40:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ba44:	str	w0, [x19, #20]
   3ba48:	mov	w2, #0x0                   	// #0
   3ba4c:	mov	w1, w21
   3ba50:	add	x0, x20, #0xf0
   3ba54:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ba58:	mov	w1, #0x1                   	// #1
   3ba5c:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3ba60:	cmp	w0, #0x9
   3ba64:	mov	w1, #0x5                   	// #5
   3ba68:	csel	w0, w0, w1, ne  // ne = any
   3ba6c:	str	w0, [x19, #32]
   3ba70:	mov	w1, w21
   3ba74:	add	x0, x20, #0xf8
   3ba78:	mov	w2, #0x0                   	// #0
   3ba7c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3ba80:	cbnz	w0, 3baa8 <aarch64_ext_addr_regoff@@Base+0xac>
   3ba84:	ldrb	w0, [x19, #36]
   3ba88:	str	xzr, [x19, #40]
   3ba8c:	and	w0, w0, #0xfffffffd
   3ba90:	strb	w0, [x19, #36]
   3ba94:	mov	w0, #0x1                   	// #1
   3ba98:	ldp	x19, x20, [sp, #16]
   3ba9c:	ldp	x21, x22, [sp, #32]
   3baa0:	ldp	x29, x30, [sp], #48
   3baa4:	ret
   3baa8:	ldr	w1, [x19, #8]
   3baac:	mov	x0, x22
   3bab0:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3bab4:	strb	w0, [x19, #4]
   3bab8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3babc:	and	w0, w0, #0xff
   3bac0:	bl	39210 <aarch64_opcode_encode@@Base+0x10a0>
   3bac4:	mov	w0, w0
   3bac8:	str	x0, [x19, #40]
   3bacc:	ldrb	w0, [x19, #36]
   3bad0:	orr	w0, w0, #0x2
   3bad4:	b	3ba90 <aarch64_ext_addr_regoff@@Base+0x94>

000000000003bad8 <aarch64_ext_addr_simm@@Base>:
   3bad8:	stp	x29, x30, [sp, #-64]!
   3badc:	mov	x29, sp
   3bae0:	stp	x19, x20, [sp, #16]
   3bae4:	mov	x19, x1
   3bae8:	ldr	w1, [x1, #8]
   3baec:	str	x23, [sp, #48]
   3baf0:	adrp	x23, 97000 <aarch64_operands@@Base+0x16bc0>
   3baf4:	mov	w20, w2
   3baf8:	stp	x21, x22, [sp, #32]
   3bafc:	mov	x21, x0
   3bb00:	mov	x22, x3
   3bb04:	mov	x0, x3
   3bb08:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3bb0c:	and	w7, w0, #0xff
   3bb10:	ldr	x3, [x23, #3944]
   3bb14:	strb	w7, [x19, #4]
   3bb18:	mov	w1, w20
   3bb1c:	mov	w2, #0x0                   	// #0
   3bb20:	add	x0, x3, #0x70
   3bb24:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bb28:	ldr	w5, [x21, #20]
   3bb2c:	mov	w1, w20
   3bb30:	str	w0, [x19, #16]
   3bb34:	mov	w2, #0x0                   	// #0
   3bb38:	add	x3, x3, w5, uxtw #3
   3bb3c:	mov	x0, x3
   3bb40:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bb44:	mov	w1, w0
   3bb48:	ldr	w0, [x3, #4]
   3bb4c:	sub	w2, w0, #0x1
   3bb50:	cmp	w2, #0x1f
   3bb54:	b.ls	3bb5c <aarch64_ext_addr_simm@@Base+0x84>  // b.plast
   3bb58:	bl	39284 <aarch64_opcode_encode@@Base+0x1114>
   3bb5c:	mov	x0, #0x2                   	// #2
   3bb60:	mov	x3, #0x1                   	// #1
   3bb64:	lsl	x0, x0, x2
   3bb68:	sub	x0, x0, #0x1
   3bb6c:	and	w1, w1, w0
   3bb70:	lsl	x3, x3, x2
   3bb74:	eor	x1, x1, x3
   3bb78:	mov	w4, w7
   3bb7c:	sub	x1, x1, x3
   3bb80:	str	w1, [x19, #20]
   3bb84:	cmp	w5, #0x2c
   3bb88:	b.eq	3bb94 <aarch64_ext_addr_simm@@Base+0xbc>  // b.none
   3bb8c:	cmp	w7, #0x19
   3bb90:	b.ne	3bbac <aarch64_ext_addr_simm@@Base+0xd4>  // b.any
   3bb94:	mov	w0, w4
   3bb98:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3bb9c:	ldr	w1, [x19, #20]
   3bba0:	and	w0, w0, #0xff
   3bba4:	mul	w1, w1, w0
   3bba8:	str	w1, [x19, #20]
   3bbac:	ldr	x0, [x22, #8]
   3bbb0:	ldrb	w3, [x19, #28]
   3bbb4:	ldr	w1, [x0, #16]
   3bbb8:	sub	w0, w1, #0x3d
   3bbbc:	cmp	w0, #0x1
   3bbc0:	b.ls	3bbd0 <aarch64_ext_addr_simm@@Base+0xf8>  // b.plast
   3bbc4:	sub	w1, w1, #0x3a
   3bbc8:	cmp	w1, #0x1
   3bbcc:	b.hi	3bbf0 <aarch64_ext_addr_simm@@Base+0x118>  // b.pmore
   3bbd0:	and	w3, w3, #0xfffffffd
   3bbd4:	strb	w3, [x19, #28]
   3bbd8:	mov	w0, #0x1                   	// #1
   3bbdc:	ldp	x19, x20, [sp, #16]
   3bbe0:	ldp	x21, x22, [sp, #32]
   3bbe4:	ldr	x23, [sp, #48]
   3bbe8:	ldp	x29, x30, [sp], #64
   3bbec:	ret
   3bbf0:	orr	w4, w3, #0x2
   3bbf4:	strb	w4, [x19, #28]
   3bbf8:	ldr	x0, [x23, #3944]
   3bbfc:	mov	w1, w20
   3bc00:	ldr	w5, [x21, #24]
   3bc04:	mov	w2, #0x0                   	// #0
   3bc08:	add	x0, x0, x5, lsl #3
   3bc0c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bc10:	cmp	w0, #0x1
   3bc14:	b.ne	3bc20 <aarch64_ext_addr_simm@@Base+0x148>  // b.any
   3bc18:	orr	w3, w3, #0x6
   3bc1c:	b	3bbd4 <aarch64_ext_addr_simm@@Base+0xfc>
   3bc20:	orr	w4, w4, #0x8
   3bc24:	strb	w4, [x19, #28]
   3bc28:	b	3bbd8 <aarch64_ext_addr_simm@@Base+0x100>

000000000003bc2c <aarch64_ext_addr_uimm12@@Base>:
   3bc2c:	stp	x29, x30, [sp, #-48]!
   3bc30:	mov	x29, sp
   3bc34:	stp	x19, x20, [sp, #16]
   3bc38:	mov	x19, x1
   3bc3c:	ldr	w1, [x1, #8]
   3bc40:	mov	w20, w2
   3bc44:	str	x21, [sp, #32]
   3bc48:	mov	x21, x0
   3bc4c:	mov	x0, x3
   3bc50:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3bc54:	strb	w0, [x19, #4]
   3bc58:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3bc5c:	and	w0, w0, #0xff
   3bc60:	bl	39210 <aarch64_opcode_encode@@Base+0x10a0>
   3bc64:	mov	w4, w0
   3bc68:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   3bc6c:	ldr	w0, [x21, #20]
   3bc70:	mov	w1, w20
   3bc74:	mov	w2, #0x0                   	// #0
   3bc78:	ldr	x3, [x3, #3944]
   3bc7c:	add	x0, x3, x0, lsl #3
   3bc80:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bc84:	str	w0, [x19, #16]
   3bc88:	mov	w1, w20
   3bc8c:	ldr	w0, [x21, #24]
   3bc90:	mov	w2, #0x0                   	// #0
   3bc94:	add	x0, x3, x0, lsl #3
   3bc98:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bc9c:	lsl	w0, w0, w4
   3bca0:	ldr	x21, [sp, #32]
   3bca4:	str	w0, [x19, #20]
   3bca8:	mov	w0, #0x1                   	// #1
   3bcac:	ldp	x19, x20, [sp, #16]
   3bcb0:	ldp	x29, x30, [sp], #48
   3bcb4:	ret

000000000003bcb8 <aarch64_ext_addr_simm10@@Base>:
   3bcb8:	stp	x29, x30, [sp, #-48]!
   3bcbc:	mov	x29, sp
   3bcc0:	stp	x19, x20, [sp, #16]
   3bcc4:	mov	x19, x1
   3bcc8:	ldr	w1, [x1, #8]
   3bccc:	mov	x20, x0
   3bcd0:	stp	x21, x22, [sp, #32]
   3bcd4:	adrp	x22, 97000 <aarch64_operands@@Base+0x16bc0>
   3bcd8:	mov	w21, w2
   3bcdc:	mov	x0, x3
   3bce0:	bl	39448 <aarch64_opcode_encode@@Base+0x12d8>
   3bce4:	strb	w0, [x19, #4]
   3bce8:	ldr	x22, [x22, #3944]
   3bcec:	mov	w1, w21
   3bcf0:	ldr	w0, [x20, #20]
   3bcf4:	mov	w2, #0x0                   	// #0
   3bcf8:	add	x0, x22, x0, lsl #3
   3bcfc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bd00:	ldp	w3, w4, [x20, #24]
   3bd04:	str	w0, [x19, #16]
   3bd08:	mov	w2, #0x2                   	// #2
   3bd0c:	mov	w1, #0x0                   	// #0
   3bd10:	mov	w0, w21
   3bd14:	bl	353d0 <extract_fields@plt>
   3bd18:	sbfiz	x0, x0, #3, #10
   3bd1c:	str	w0, [x19, #20]
   3bd20:	mov	w1, w21
   3bd24:	ldr	w0, [x20, #32]
   3bd28:	mov	w2, #0x0                   	// #0
   3bd2c:	add	x0, x22, x0, lsl #3
   3bd30:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bd34:	cmp	w0, #0x1
   3bd38:	b.ne	3bd48 <aarch64_ext_addr_simm10@@Base+0x90>  // b.any
   3bd3c:	ldrb	w0, [x19, #28]
   3bd40:	orr	w0, w0, #0x6
   3bd44:	strb	w0, [x19, #28]
   3bd48:	mov	w0, #0x1                   	// #1
   3bd4c:	ldp	x19, x20, [sp, #16]
   3bd50:	ldp	x21, x22, [sp, #32]
   3bd54:	ldp	x29, x30, [sp], #48
   3bd58:	ret

000000000003bd5c <aarch64_ext_simd_addr_post@@Base>:
   3bd5c:	stp	x29, x30, [sp, #-48]!
   3bd60:	mov	w4, w2
   3bd64:	mov	w2, #0x0                   	// #0
   3bd68:	mov	x29, sp
   3bd6c:	ldr	x5, [x3, #8]
   3bd70:	stp	x19, x20, [sp, #16]
   3bd74:	mov	x19, x1
   3bd78:	mov	w1, w4
   3bd7c:	ldr	x20, [x5, #120]
   3bd80:	str	x21, [sp, #32]
   3bd84:	mov	x21, x3
   3bd88:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   3bd8c:	ldr	x3, [x3, #3944]
   3bd90:	add	x0, x3, #0x70
   3bd94:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bd98:	str	w0, [x19, #16]
   3bd9c:	mov	w1, w4
   3bda0:	add	x0, x3, #0xe0
   3bda4:	mov	w2, #0x0                   	// #0
   3bda8:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3bdac:	str	w0, [x19, #20]
   3bdb0:	cmp	w0, #0x1f
   3bdb4:	b.ne	3be3c <aarch64_ext_simd_addr_post@@Base+0xe0>  // b.any
   3bdb8:	ldr	w0, [x5, #32]
   3bdbc:	cmp	w0, #0x25
   3bdc0:	b.ne	3be0c <aarch64_ext_simd_addr_post@@Base+0xb0>  // b.any
   3bdc4:	ubfx	w20, w20, #24, #3
   3bdc8:	cmp	w20, #0x1
   3bdcc:	b.eq	3bdd8 <aarch64_ext_simd_addr_post@@Base+0x7c>  // b.none
   3bdd0:	ldrb	w20, [x21, #40]
   3bdd4:	ubfx	x20, x20, #5, #3
   3bdd8:	ldrb	w0, [x21, #28]
   3bddc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3bde0:	and	w0, w0, #0xff
   3bde4:	mul	w20, w0, w20
   3bde8:	str	w20, [x19, #20]
   3bdec:	ldrb	w0, [x19, #28]
   3bdf0:	ldr	x21, [sp, #32]
   3bdf4:	orr	w0, w0, #0x2
   3bdf8:	strb	w0, [x19, #28]
   3bdfc:	mov	w0, #0x1                   	// #1
   3be00:	ldp	x19, x20, [sp, #16]
   3be04:	ldp	x29, x30, [sp], #48
   3be08:	ret
   3be0c:	ldrb	w0, [x21, #28]
   3be10:	ldrb	w20, [x21, #40]
   3be14:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3be18:	ubfx	x20, x20, #5, #3
   3be1c:	and	w0, w0, #0xff
   3be20:	mul	w20, w0, w20
   3be24:	ldrb	w0, [x21, #28]
   3be28:	bl	35940 <aarch64_get_qualifier_nelem@plt>
   3be2c:	and	w0, w0, #0xff
   3be30:	mul	w0, w0, w20
   3be34:	str	w0, [x19, #20]
   3be38:	b	3bdec <aarch64_ext_simd_addr_post@@Base+0x90>
   3be3c:	mov	w0, #0x1                   	// #1
   3be40:	str	w0, [x19, #24]
   3be44:	b	3bdec <aarch64_ext_simd_addr_post@@Base+0x90>

000000000003be48 <aarch64_ext_cond@@Base>:
   3be48:	stp	x29, x30, [sp, #-32]!
   3be4c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3be50:	mov	x29, sp
   3be54:	ldr	x0, [x0, #3944]
   3be58:	str	x19, [sp, #16]
   3be5c:	mov	x19, x1
   3be60:	mov	w1, w2
   3be64:	mov	w2, #0x0                   	// #0
   3be68:	add	x0, x0, #0xb8
   3be6c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3be70:	bl	35350 <get_cond_from_value@plt>
   3be74:	str	x0, [x19, #16]
   3be78:	mov	w0, #0x1                   	// #1
   3be7c:	ldr	x19, [sp, #16]
   3be80:	ldp	x29, x30, [sp], #32
   3be84:	ret

000000000003be88 <aarch64_ext_sysreg@@Base>:
   3be88:	stp	x29, x30, [sp, #-32]!
   3be8c:	mov	w0, w2
   3be90:	mov	w7, #0x11                  	// #17
   3be94:	mov	x29, sp
   3be98:	stp	x19, x20, [sp, #16]
   3be9c:	mov	x19, x1
   3bea0:	mov	x20, x3
   3bea4:	mov	w1, #0x0                   	// #0
   3bea8:	mov	w6, #0x12                  	// #18
   3beac:	mov	w5, #0x13                  	// #19
   3beb0:	mov	w4, #0x14                  	// #20
   3beb4:	mov	w3, #0x15                  	// #21
   3beb8:	mov	w2, #0x5                   	// #5
   3bebc:	bl	353d0 <extract_fields@plt>
   3bec0:	stp	w0, wzr, [x19, #16]
   3bec4:	ldr	x0, [x20, #8]
   3bec8:	ldr	w1, [x0, #16]
   3becc:	cmp	w1, #0x46
   3bed0:	b.ne	3bef0 <aarch64_ext_sysreg@@Base+0x68>  // b.any
   3bed4:	ldr	x0, [x0, #120]
   3bed8:	mov	x1, #0x20000000            	// #536870912
   3bedc:	and	x0, x0, #0x60000000
   3bee0:	cmp	x0, x1
   3bee4:	b.ne	3bf00 <aarch64_ext_sysreg@@Base+0x78>  // b.any
   3bee8:	mov	w0, #0x8                   	// #8
   3beec:	str	w0, [x19, #20]
   3bef0:	mov	w0, #0x1                   	// #1
   3bef4:	ldp	x19, x20, [sp, #16]
   3bef8:	ldp	x29, x30, [sp], #32
   3befc:	ret
   3bf00:	mov	x1, #0x40000000            	// #1073741824
   3bf04:	cmp	x0, x1
   3bf08:	b.ne	3bef0 <aarch64_ext_sysreg@@Base+0x68>  // b.any
   3bf0c:	mov	w0, #0x10                  	// #16
   3bf10:	b	3beec <aarch64_ext_sysreg@@Base+0x64>

000000000003bf14 <aarch64_ext_pstatefield@@Base>:
   3bf14:	stp	x29, x30, [sp, #-32]!
   3bf18:	mov	w0, w2
   3bf1c:	mov	w4, #0x11                  	// #17
   3bf20:	mov	x29, sp
   3bf24:	mov	w3, #0x14                  	// #20
   3bf28:	mov	w2, #0x2                   	// #2
   3bf2c:	str	x19, [sp, #16]
   3bf30:	mov	x19, x1
   3bf34:	mov	w1, #0x0                   	// #0
   3bf38:	bl	353d0 <extract_fields@plt>
   3bf3c:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3bf40:	str	w0, [x19, #16]
   3bf44:	ldr	x1, [x1, #3832]
   3bf48:	ldr	x2, [x1]
   3bf4c:	cbnz	x2, 3bf60 <aarch64_ext_pstatefield@@Base+0x4c>
   3bf50:	mov	w0, #0x0                   	// #0
   3bf54:	ldr	x19, [sp, #16]
   3bf58:	ldp	x29, x30, [sp], #32
   3bf5c:	ret
   3bf60:	ldr	w2, [x1, #8]
   3bf64:	add	x1, x1, #0x10
   3bf68:	cmp	w0, w2
   3bf6c:	b.ne	3bf48 <aarch64_ext_pstatefield@@Base+0x34>  // b.any
   3bf70:	mov	w0, #0x1                   	// #1
   3bf74:	b	3bf54 <aarch64_ext_pstatefield@@Base+0x40>

000000000003bf78 <aarch64_ext_sysins_op@@Base>:
   3bf78:	stp	x29, x30, [sp, #-32]!
   3bf7c:	mov	w0, w2
   3bf80:	mov	w7, #0x11                  	// #17
   3bf84:	mov	x29, sp
   3bf88:	str	x19, [sp, #16]
   3bf8c:	mov	x19, x1
   3bf90:	mov	w6, #0x12                  	// #18
   3bf94:	mov	w1, #0x0                   	// #0
   3bf98:	mov	w5, #0x13                  	// #19
   3bf9c:	mov	w4, #0x14                  	// #20
   3bfa0:	mov	w3, #0x15                  	// #21
   3bfa4:	mov	w2, #0x5                   	// #5
   3bfa8:	bl	353d0 <extract_fields@plt>
   3bfac:	ldr	w1, [x19]
   3bfb0:	sub	w1, w1, #0x61
   3bfb4:	cmp	w1, #0x4
   3bfb8:	b.hi	3c00c <aarch64_ext_sysins_op@@Base+0x94>  // b.pmore
   3bfbc:	adrp	x2, 53000 <xexit@@Base+0x508>
   3bfc0:	add	x2, x2, #0xc20
   3bfc4:	ldrb	w1, [x2, w1, uxtw]
   3bfc8:	adr	x2, 3bfd4 <aarch64_ext_sysins_op@@Base+0x5c>
   3bfcc:	add	x1, x2, w1, sxtb #2
   3bfd0:	br	x1
   3bfd4:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3bfd8:	ldr	x2, [x2, #3920]
   3bfdc:	mov	x3, x2
   3bfe0:	ldr	x1, [x2]
   3bfe4:	cbnz	x1, 3c048 <aarch64_ext_sysins_op@@Base+0xd0>
   3bfe8:	mov	w0, #0x0                   	// #0
   3bfec:	b	3c060 <aarch64_ext_sysins_op@@Base+0xe8>
   3bff0:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3bff4:	ldr	x2, [x2, #3896]
   3bff8:	b	3bfdc <aarch64_ext_sysins_op@@Base+0x64>
   3bffc:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3c000:	and	w0, w0, #0xfffffff8
   3c004:	ldr	x2, [x2, #4064]
   3c008:	b	3bfdc <aarch64_ext_sysins_op@@Base+0x64>
   3c00c:	adrp	x3, 53000 <xexit@@Base+0x508>
   3c010:	add	x3, x3, #0xc28
   3c014:	adrp	x1, 53000 <xexit@@Base+0x508>
   3c018:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3c01c:	add	x3, x3, #0x368
   3c020:	add	x1, x1, #0x4e6
   3c024:	add	x0, x0, #0x679
   3c028:	mov	w2, #0x4e6                 	// #1254
   3c02c:	bl	35b10 <__assert_fail@plt>
   3c030:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3c034:	ldr	x2, [x2, #3992]
   3c038:	b	3bfdc <aarch64_ext_sysins_op@@Base+0x64>
   3c03c:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3c040:	ldr	x2, [x2, #3888]
   3c044:	b	3bfdc <aarch64_ext_sysins_op@@Base+0x64>
   3c048:	ldr	w1, [x2, #8]
   3c04c:	add	x2, x2, #0x10
   3c050:	cmp	w1, w0
   3c054:	b.ne	3bfdc <aarch64_ext_sysins_op@@Base+0x64>  // b.any
   3c058:	mov	w0, #0x1                   	// #1
   3c05c:	str	x3, [x19, #16]
   3c060:	ldr	x19, [sp, #16]
   3c064:	ldp	x29, x30, [sp], #32
   3c068:	ret

000000000003c06c <aarch64_ext_barrier@@Base>:
   3c06c:	stp	x29, x30, [sp, #-16]!
   3c070:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c074:	mov	x3, x1
   3c078:	mov	x29, sp
   3c07c:	ldr	x0, [x0, #3944]
   3c080:	mov	w1, w2
   3c084:	mov	w2, #0x0                   	// #0
   3c088:	add	x0, x0, #0x90
   3c08c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c090:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3c094:	ubfiz	x0, x0, #4, #32
   3c098:	ldp	x29, x30, [sp], #16
   3c09c:	ldr	x1, [x1, #4040]
   3c0a0:	add	x0, x0, x1
   3c0a4:	str	x0, [x3, #16]
   3c0a8:	mov	w0, #0x1                   	// #1
   3c0ac:	ret

000000000003c0b0 <aarch64_ext_prfop@@Base>:
   3c0b0:	stp	x29, x30, [sp, #-16]!
   3c0b4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c0b8:	mov	x3, x1
   3c0bc:	mov	x29, sp
   3c0c0:	ldr	x0, [x0, #3944]
   3c0c4:	mov	w1, w2
   3c0c8:	mov	w2, #0x0                   	// #0
   3c0cc:	add	x0, x0, #0x60
   3c0d0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c0d4:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3c0d8:	ubfiz	x0, x0, #4, #32
   3c0dc:	ldp	x29, x30, [sp], #16
   3c0e0:	ldr	x1, [x1, #3960]
   3c0e4:	add	x0, x0, x1
   3c0e8:	str	x0, [x3, #16]
   3c0ec:	mov	w0, #0x1                   	// #1
   3c0f0:	ret

000000000003c0f4 <aarch64_ext_hint@@Base>:
   3c0f4:	stp	x29, x30, [sp, #-32]!
   3c0f8:	mov	w0, w2
   3c0fc:	mov	w4, #0x11                  	// #17
   3c100:	mov	x29, sp
   3c104:	mov	w3, #0x12                  	// #18
   3c108:	mov	w2, #0x2                   	// #2
   3c10c:	str	x19, [sp, #16]
   3c110:	mov	x19, x1
   3c114:	mov	w1, #0x0                   	// #0
   3c118:	bl	353d0 <extract_fields@plt>
   3c11c:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3c120:	mov	w3, #0x0                   	// #0
   3c124:	ldr	x4, [x2, #4016]
   3c128:	mov	x5, x4
   3c12c:	ldr	x1, [x4]
   3c130:	cbnz	x1, 3c13c <aarch64_ext_hint@@Base+0x48>
   3c134:	mov	w0, #0x0                   	// #0
   3c138:	b	3c15c <aarch64_ext_hint@@Base+0x68>
   3c13c:	ldrb	w1, [x5, #8]
   3c140:	add	x4, x4, #0x10
   3c144:	cmp	w1, w0
   3c148:	b.ne	3c168 <aarch64_ext_hint@@Base+0x74>  // b.any
   3c14c:	ldr	x2, [x2, #4016]
   3c150:	mov	w0, #0x1                   	// #1
   3c154:	add	x2, x2, w3, sxtw #4
   3c158:	str	x2, [x19, #16]
   3c15c:	ldr	x19, [sp, #16]
   3c160:	ldp	x29, x30, [sp], #32
   3c164:	ret
   3c168:	add	w3, w3, #0x1
   3c16c:	b	3c128 <aarch64_ext_hint@@Base+0x34>

000000000003c170 <aarch64_ext_reg_extended@@Base>:
   3c170:	stp	x29, x30, [sp, #-48]!
   3c174:	mov	x29, sp
   3c178:	stp	x19, x20, [sp, #16]
   3c17c:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   3c180:	mov	x19, x1
   3c184:	ldr	x20, [x20, #3944]
   3c188:	stp	x21, x22, [sp, #32]
   3c18c:	mov	w21, w2
   3c190:	mov	x22, x3
   3c194:	mov	w1, w21
   3c198:	mov	w2, #0x0                   	// #0
   3c19c:	add	x0, x20, #0xe0
   3c1a0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c1a4:	str	w0, [x19, #16]
   3c1a8:	mov	w2, #0x0                   	// #0
   3c1ac:	mov	w1, w21
   3c1b0:	add	x0, x20, #0xf0
   3c1b4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c1b8:	mov	w1, #0x1                   	// #1
   3c1bc:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3c1c0:	mov	w4, w0
   3c1c4:	str	w0, [x19, #32]
   3c1c8:	mov	w1, w21
   3c1cc:	add	x0, x20, #0xb0
   3c1d0:	mov	w2, #0x0                   	// #0
   3c1d4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c1d8:	mov	w0, w0
   3c1dc:	str	x0, [x19, #40]
   3c1e0:	ldrb	w0, [x19, #36]
   3c1e4:	orr	w0, w0, #0x1
   3c1e8:	strb	w0, [x19, #36]
   3c1ec:	ldrb	w0, [x22, #28]
   3c1f0:	cbnz	w0, 3c218 <aarch64_ext_reg_extended@@Base+0xa8>
   3c1f4:	adrp	x3, 53000 <xexit@@Base+0x508>
   3c1f8:	add	x3, x3, #0xc28
   3c1fc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3c200:	adrp	x0, 53000 <xexit@@Base+0x508>
   3c204:	add	x3, x3, #0x37e
   3c208:	add	x1, x1, #0x4e6
   3c20c:	add	x0, x0, #0x92a
   3c210:	mov	w2, #0x547                 	// #1351
   3c214:	bl	35b10 <__assert_fail@plt>
   3c218:	mov	w0, #0x1                   	// #1
   3c21c:	strb	w0, [x19, #4]
   3c220:	ldrb	w0, [x22, #28]
   3c224:	cmp	w0, #0x2
   3c228:	b.ne	3c23c <aarch64_ext_reg_extended@@Base+0xcc>  // b.any
   3c22c:	and	w4, w4, #0xfffffffb
   3c230:	cmp	w4, #0x9
   3c234:	b.ne	3c23c <aarch64_ext_reg_extended@@Base+0xcc>  // b.any
   3c238:	strb	w0, [x19, #4]
   3c23c:	mov	w0, #0x1                   	// #1
   3c240:	ldp	x19, x20, [sp, #16]
   3c244:	ldp	x21, x22, [sp, #32]
   3c248:	ldp	x29, x30, [sp], #48
   3c24c:	ret

000000000003c250 <aarch64_ext_reg_shifted@@Base>:
   3c250:	stp	x29, x30, [sp, #-48]!
   3c254:	mov	x29, sp
   3c258:	stp	x19, x20, [sp, #16]
   3c25c:	adrp	x20, 97000 <aarch64_operands@@Base+0x16bc0>
   3c260:	mov	x19, x1
   3c264:	stp	x21, x22, [sp, #32]
   3c268:	mov	x22, x3
   3c26c:	mov	w21, w2
   3c270:	ldr	x3, [x20, #3944]
   3c274:	mov	w1, w21
   3c278:	mov	w2, #0x0                   	// #0
   3c27c:	add	x0, x3, #0xe0
   3c280:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c284:	str	w0, [x19, #16]
   3c288:	mov	w2, #0x0                   	// #0
   3c28c:	mov	w1, w21
   3c290:	add	x0, x3, #0x118
   3c294:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c298:	mov	w1, #0x0                   	// #0
   3c29c:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3c2a0:	str	w0, [x19, #32]
   3c2a4:	cmp	w0, #0x2
   3c2a8:	b.ne	3c2bc <aarch64_ext_reg_shifted@@Base+0x6c>  // b.any
   3c2ac:	ldr	x0, [x22, #8]
   3c2b0:	ldr	w0, [x0, #16]
   3c2b4:	cmp	w0, #0x42
   3c2b8:	b.ne	3c2f8 <aarch64_ext_reg_shifted@@Base+0xa8>  // b.any
   3c2bc:	ldr	x0, [x20, #3944]
   3c2c0:	mov	w1, w21
   3c2c4:	mov	w2, #0x0                   	// #0
   3c2c8:	add	x0, x0, #0x130
   3c2cc:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c2d0:	mov	w0, w0
   3c2d4:	str	x0, [x19, #40]
   3c2d8:	ldrb	w0, [x19, #36]
   3c2dc:	orr	w0, w0, #0x1
   3c2e0:	strb	w0, [x19, #36]
   3c2e4:	mov	w0, #0x1                   	// #1
   3c2e8:	ldp	x19, x20, [sp, #16]
   3c2ec:	ldp	x21, x22, [sp, #32]
   3c2f0:	ldp	x29, x30, [sp], #48
   3c2f4:	ret
   3c2f8:	mov	w0, #0x0                   	// #0
   3c2fc:	b	3c2e8 <aarch64_ext_reg_shifted@@Base+0x98>

000000000003c300 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   3c300:	mov	x5, x0
   3c304:	stp	x29, x30, [sp, #-16]!
   3c308:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c30c:	mov	w4, w2
   3c310:	mov	x6, x1
   3c314:	mov	x29, sp
   3c318:	ldr	x0, [x0, #3944]
   3c31c:	mov	w1, w4
   3c320:	mov	w2, #0x0                   	// #0
   3c324:	add	x0, x0, #0x308
   3c328:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c32c:	ldp	x29, x30, [sp], #16
   3c330:	add	w3, w0, #0x8
   3c334:	and	w3, w3, #0xf
   3c338:	mov	w2, w4
   3c33c:	sub	w3, w3, #0x8
   3c340:	mov	x1, x6
   3c344:	mov	x0, x5
   3c348:	sxtw	x3, w3
   3c34c:	b	38fa0 <aarch64_opcode_encode@@Base+0xe30>

000000000003c350 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   3c350:	mov	x5, x0
   3c354:	stp	x29, x30, [sp, #-16]!
   3c358:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c35c:	mov	w4, w2
   3c360:	mov	x6, x1
   3c364:	mov	x29, sp
   3c368:	ldr	x0, [x0, #3944]
   3c36c:	mov	w1, w4
   3c370:	mov	w2, #0x0                   	// #0
   3c374:	add	x0, x0, #0x320
   3c378:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c37c:	ldp	x29, x30, [sp], #16
   3c380:	add	w3, w0, #0x20
   3c384:	and	w3, w3, #0x3f
   3c388:	mov	w2, w4
   3c38c:	sub	w3, w3, #0x20
   3c390:	mov	x1, x6
   3c394:	mov	x0, x5
   3c398:	sxtw	x3, w3
   3c39c:	b	38fa0 <aarch64_opcode_encode@@Base+0xe30>

000000000003c3a0 <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   3c3a0:	stp	x29, x30, [sp, #-48]!
   3c3a4:	mov	w4, #0x16                  	// #22
   3c3a8:	mov	w3, #0x64                  	// #100
   3c3ac:	mov	x29, sp
   3c3b0:	stp	x19, x20, [sp, #16]
   3c3b4:	mov	w19, w2
   3c3b8:	mov	x20, x0
   3c3bc:	mov	w2, #0x2                   	// #2
   3c3c0:	mov	w0, w19
   3c3c4:	str	x21, [sp, #32]
   3c3c8:	mov	x21, x1
   3c3cc:	mov	w1, #0x0                   	// #0
   3c3d0:	bl	353d0 <extract_fields@plt>
   3c3d4:	mov	w2, w19
   3c3d8:	add	w3, w0, #0x100
   3c3dc:	mov	x1, x21
   3c3e0:	mov	x0, x20
   3c3e4:	ldp	x19, x20, [sp, #16]
   3c3e8:	and	w3, w3, #0x1ff
   3c3ec:	ldr	x21, [sp, #32]
   3c3f0:	sub	w3, w3, #0x100
   3c3f4:	ldp	x29, x30, [sp], #48
   3c3f8:	sxtw	x3, w3
   3c3fc:	b	38fa0 <aarch64_opcode_encode@@Base+0xe30>

000000000003c400 <aarch64_ext_sve_addr_ri_s4@@Base>:
   3c400:	mov	x5, x0
   3c404:	stp	x29, x30, [sp, #-16]!
   3c408:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c40c:	mov	w4, w2
   3c410:	mov	x6, x1
   3c414:	mov	x29, sp
   3c418:	ldr	x0, [x0, #3944]
   3c41c:	mov	w1, w4
   3c420:	mov	w2, #0x0                   	// #0
   3c424:	add	x0, x0, #0x308
   3c428:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c42c:	ldp	x29, x30, [sp], #16
   3c430:	sbfx	x3, x0, #0, #4
   3c434:	mov	w2, w4
   3c438:	mov	x1, x6
   3c43c:	mov	x0, x5
   3c440:	b	39024 <aarch64_opcode_encode@@Base+0xeb4>

000000000003c444 <aarch64_ext_sve_addr_ri_u6@@Base>:
   3c444:	mov	x5, x0
   3c448:	stp	x29, x30, [sp, #-16]!
   3c44c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c450:	mov	w4, w2
   3c454:	mov	x6, x1
   3c458:	mov	x29, sp
   3c45c:	ldr	x0, [x0, #3944]
   3c460:	mov	w1, w4
   3c464:	mov	w2, #0x0                   	// #0
   3c468:	add	x0, x0, #0x320
   3c46c:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c470:	ldp	x29, x30, [sp], #16
   3c474:	sxtw	x3, w0
   3c478:	mov	w2, w4
   3c47c:	mov	x1, x6
   3c480:	mov	x0, x5
   3c484:	b	39024 <aarch64_opcode_encode@@Base+0xeb4>

000000000003c488 <aarch64_ext_sve_addr_rr_lsl@@Base>:
   3c488:	stp	x29, x30, [sp, #-16]!
   3c48c:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   3c490:	mov	x4, x0
   3c494:	mov	x29, sp
   3c498:	ldr	w6, [x0, #24]
   3c49c:	mov	w7, w2
   3c4a0:	ldr	x0, [x5, #3944]
   3c4a4:	mov	x3, x1
   3c4a8:	mov	w2, #0x0                   	// #0
   3c4ac:	mov	w1, w7
   3c4b0:	add	x0, x0, x6, lsl #3
   3c4b4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c4b8:	mov	w6, w0
   3c4bc:	cmp	w0, #0x1f
   3c4c0:	b.ne	3c4cc <aarch64_ext_sve_addr_rr_lsl@@Base+0x44>  // b.any
   3c4c4:	ldr	w0, [x4, #16]
   3c4c8:	tbnz	w0, #8, 3c534 <aarch64_ext_sve_addr_rr_lsl@@Base+0xac>
   3c4cc:	ldr	x5, [x5, #3944]
   3c4d0:	mov	w1, w7
   3c4d4:	ldr	w0, [x4, #20]
   3c4d8:	mov	w2, #0x0                   	// #0
   3c4dc:	add	x0, x5, x0, lsl #3
   3c4e0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c4e4:	ldrb	w1, [x3, #28]
   3c4e8:	stp	w0, w6, [x3, #16]
   3c4ec:	mov	w0, #0x1                   	// #1
   3c4f0:	and	w1, w1, #0xfffffff9
   3c4f4:	str	w0, [x3, #24]
   3c4f8:	orr	w1, w1, #0x4
   3c4fc:	strb	w1, [x3, #28]
   3c500:	mov	w1, #0x5                   	// #5
   3c504:	str	w1, [x3, #32]
   3c508:	ldr	w1, [x4, #16]
   3c50c:	ubfx	x1, x1, #5, #3
   3c510:	str	x1, [x3, #40]
   3c514:	cmp	x1, #0x0
   3c518:	ldrb	w1, [x3, #36]
   3c51c:	cset	w2, ne  // ne = any
   3c520:	bfxil	w1, w2, #0, #1
   3c524:	bfi	w1, w2, #1, #1
   3c528:	strb	w1, [x3, #36]
   3c52c:	ldp	x29, x30, [sp], #16
   3c530:	ret
   3c534:	mov	w0, #0x0                   	// #0
   3c538:	b	3c52c <aarch64_ext_sve_addr_rr_lsl@@Base+0xa4>

000000000003c53c <aarch64_ext_sve_addr_rz_xtw@@Base>:
   3c53c:	stp	x29, x30, [sp, #-16]!
   3c540:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   3c544:	mov	x3, x1
   3c548:	mov	x29, sp
   3c54c:	ldr	x5, [x5, #3944]
   3c550:	mov	x4, x0
   3c554:	mov	w6, w2
   3c558:	ldr	w0, [x0, #20]
   3c55c:	mov	w1, w6
   3c560:	mov	w2, #0x0                   	// #0
   3c564:	add	x0, x5, x0, lsl #3
   3c568:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c56c:	str	w0, [x3, #16]
   3c570:	mov	w1, w6
   3c574:	ldr	w0, [x4, #24]
   3c578:	mov	w2, #0x0                   	// #0
   3c57c:	add	x0, x5, x0, lsl #3
   3c580:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c584:	mov	w7, #0x1                   	// #1
   3c588:	stp	w0, w7, [x3, #20]
   3c58c:	ldrb	w0, [x3, #28]
   3c590:	mov	w1, w6
   3c594:	mov	w2, #0x0                   	// #0
   3c598:	and	w0, w0, #0xfffffff9
   3c59c:	orr	w0, w0, #0x4
   3c5a0:	strb	w0, [x3, #28]
   3c5a4:	ldr	w0, [x4, #28]
   3c5a8:	add	x0, x5, x0, lsl #3
   3c5ac:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c5b0:	cmp	w0, #0x0
   3c5b4:	mov	w1, #0x8                   	// #8
   3c5b8:	ldp	x29, x30, [sp], #16
   3c5bc:	mov	w0, #0xc                   	// #12
   3c5c0:	csel	w0, w0, w1, ne  // ne = any
   3c5c4:	str	w0, [x3, #32]
   3c5c8:	ldrb	w1, [x3, #36]
   3c5cc:	ldr	w0, [x4, #16]
   3c5d0:	ubfx	x0, x0, #5, #3
   3c5d4:	str	x0, [x3, #40]
   3c5d8:	cmp	x0, #0x0
   3c5dc:	cset	w0, ne  // ne = any
   3c5e0:	ubfiz	w0, w0, #1, #7
   3c5e4:	orr	w0, w0, #0x1
   3c5e8:	bfxil	w1, w0, #0, #2
   3c5ec:	mov	w0, w7
   3c5f0:	strb	w1, [x3, #36]
   3c5f4:	ret

000000000003c5f8 <aarch64_ext_sve_addr_zi_u5@@Base>:
   3c5f8:	mov	x5, x0
   3c5fc:	stp	x29, x30, [sp, #-16]!
   3c600:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c604:	mov	w4, w2
   3c608:	mov	x6, x1
   3c60c:	mov	x29, sp
   3c610:	ldr	x0, [x0, #3944]
   3c614:	mov	w1, w4
   3c618:	mov	w2, #0x0                   	// #0
   3c61c:	add	x0, x0, #0x158
   3c620:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c624:	ldp	x29, x30, [sp], #16
   3c628:	sxtw	x3, w0
   3c62c:	mov	w2, w4
   3c630:	mov	x1, x6
   3c634:	mov	x0, x5
   3c638:	b	39024 <aarch64_opcode_encode@@Base+0xeb4>

000000000003c63c <aarch64_ext_sve_addr_zz_lsl@@Base>:
   3c63c:	mov	w3, #0x5                   	// #5
   3c640:	b	3908c <aarch64_opcode_encode@@Base+0xf1c>

000000000003c644 <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   3c644:	mov	w3, #0xc                   	// #12
   3c648:	b	3908c <aarch64_opcode_encode@@Base+0xf1c>

000000000003c64c <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   3c64c:	mov	w3, #0x8                   	// #8
   3c650:	b	3908c <aarch64_opcode_encode@@Base+0xf1c>

000000000003c654 <aarch64_ext_sve_aimm@@Base>:
   3c654:	stp	x29, x30, [sp, #-32]!
   3c658:	mov	x29, sp
   3c65c:	str	x19, [sp, #16]
   3c660:	mov	x19, x1
   3c664:	bl	35770 <aarch64_ext_imm@plt>
   3c668:	cbz	w0, 3c6b4 <aarch64_ext_sve_aimm@@Base+0x60>
   3c66c:	ldr	x0, [x19, #16]
   3c670:	mov	w2, #0x5                   	// #5
   3c674:	str	w2, [x19, #32]
   3c678:	str	xzr, [x19, #40]
   3c67c:	and	x1, x0, #0xff
   3c680:	tbz	w0, #8, 3c690 <aarch64_ext_sve_aimm@@Base+0x3c>
   3c684:	cbnz	x1, 3c6c0 <aarch64_ext_sve_aimm@@Base+0x6c>
   3c688:	mov	x0, #0x8                   	// #8
   3c68c:	str	x0, [x19, #40]
   3c690:	ldr	x0, [x19, #40]
   3c694:	str	x1, [x19, #16]
   3c698:	cmp	x0, #0x0
   3c69c:	ldrb	w0, [x19, #36]
   3c6a0:	cset	w2, ne  // ne = any
   3c6a4:	bfxil	w0, w2, #0, #1
   3c6a8:	bfi	w0, w2, #1, #1
   3c6ac:	strb	w0, [x19, #36]
   3c6b0:	mov	w0, #0x1                   	// #1
   3c6b4:	ldr	x19, [sp, #16]
   3c6b8:	ldp	x29, x30, [sp], #32
   3c6bc:	ret
   3c6c0:	lsl	x1, x1, #8
   3c6c4:	b	3c690 <aarch64_ext_sve_aimm@@Base+0x3c>

000000000003c6c8 <aarch64_ext_sve_asimm@@Base>:
   3c6c8:	stp	x29, x30, [sp, #-32]!
   3c6cc:	mov	x29, sp
   3c6d0:	str	x19, [sp, #16]
   3c6d4:	mov	x19, x1
   3c6d8:	bl	35770 <aarch64_ext_imm@plt>
   3c6dc:	cbz	w0, 3c728 <aarch64_ext_sve_asimm@@Base+0x60>
   3c6e0:	ldr	x0, [x19, #16]
   3c6e4:	mov	w2, #0x5                   	// #5
   3c6e8:	str	w2, [x19, #32]
   3c6ec:	str	xzr, [x19, #40]
   3c6f0:	sxtb	x1, w0
   3c6f4:	tbz	w0, #8, 3c704 <aarch64_ext_sve_asimm@@Base+0x3c>
   3c6f8:	cbnz	x1, 3c734 <aarch64_ext_sve_asimm@@Base+0x6c>
   3c6fc:	mov	x0, #0x8                   	// #8
   3c700:	str	x0, [x19, #40]
   3c704:	ldr	x0, [x19, #40]
   3c708:	str	x1, [x19, #16]
   3c70c:	cmp	x0, #0x0
   3c710:	ldrb	w0, [x19, #36]
   3c714:	cset	w2, ne  // ne = any
   3c718:	bfxil	w0, w2, #0, #1
   3c71c:	bfi	w0, w2, #1, #1
   3c720:	strb	w0, [x19, #36]
   3c724:	mov	w0, #0x1                   	// #1
   3c728:	ldr	x19, [sp, #16]
   3c72c:	ldp	x29, x30, [sp], #32
   3c730:	ret
   3c734:	lsl	x1, x1, #8
   3c738:	b	3c704 <aarch64_ext_sve_asimm@@Base+0x3c>

000000000003c73c <aarch64_ext_sve_float_half_one@@Base>:
   3c73c:	stp	x29, x30, [sp, #-16]!
   3c740:	mov	x3, x1
   3c744:	mov	w1, w2
   3c748:	mov	x29, sp
   3c74c:	ldr	w4, [x0, #20]
   3c750:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c754:	mov	w2, #0x0                   	// #0
   3c758:	ldr	x0, [x0, #3944]
   3c75c:	add	x0, x0, x4, lsl #3
   3c760:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c764:	cmp	w0, #0x0
   3c768:	mov	x1, #0x3f000000            	// #1056964608
   3c76c:	mov	x0, #0x3f800000            	// #1065353216
   3c770:	csel	x0, x0, x1, ne  // ne = any
   3c774:	ldp	x29, x30, [sp], #16
   3c778:	str	x0, [x3, #16]
   3c77c:	ldrb	w0, [x3, #24]
   3c780:	orr	w0, w0, #0x1
   3c784:	strb	w0, [x3, #24]
   3c788:	mov	w0, #0x1                   	// #1
   3c78c:	ret

000000000003c790 <aarch64_ext_sve_float_half_two@@Base>:
   3c790:	stp	x29, x30, [sp, #-16]!
   3c794:	mov	x3, x1
   3c798:	mov	w1, w2
   3c79c:	mov	x29, sp
   3c7a0:	ldr	w4, [x0, #20]
   3c7a4:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c7a8:	mov	w2, #0x0                   	// #0
   3c7ac:	ldr	x0, [x0, #3944]
   3c7b0:	add	x0, x0, x4, lsl #3
   3c7b4:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c7b8:	cmp	w0, #0x0
   3c7bc:	mov	x1, #0x3f000000            	// #1056964608
   3c7c0:	mov	x0, #0x40000000            	// #1073741824
   3c7c4:	csel	x0, x0, x1, ne  // ne = any
   3c7c8:	ldp	x29, x30, [sp], #16
   3c7cc:	str	x0, [x3, #16]
   3c7d0:	ldrb	w0, [x3, #24]
   3c7d4:	orr	w0, w0, #0x1
   3c7d8:	strb	w0, [x3, #24]
   3c7dc:	mov	w0, #0x1                   	// #1
   3c7e0:	ret

000000000003c7e4 <aarch64_ext_sve_float_zero_one@@Base>:
   3c7e4:	stp	x29, x30, [sp, #-16]!
   3c7e8:	mov	x3, x1
   3c7ec:	mov	w1, w2
   3c7f0:	mov	x29, sp
   3c7f4:	ldr	w4, [x0, #20]
   3c7f8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c7fc:	mov	w2, #0x0                   	// #0
   3c800:	ldr	x0, [x0, #3944]
   3c804:	add	x0, x0, x4, lsl #3
   3c808:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c80c:	cmp	w0, #0x0
   3c810:	mov	x0, #0x3f800000            	// #1065353216
   3c814:	csel	x0, x0, xzr, ne  // ne = any
   3c818:	ldp	x29, x30, [sp], #16
   3c81c:	str	x0, [x3, #16]
   3c820:	ldrb	w0, [x3, #24]
   3c824:	orr	w0, w0, #0x1
   3c828:	strb	w0, [x3, #24]
   3c82c:	mov	w0, #0x1                   	// #1
   3c830:	ret

000000000003c834 <aarch64_ext_sve_index@@Base>:
   3c834:	stp	x29, x30, [sp, #-32]!
   3c838:	mov	w5, w2
   3c83c:	mov	w2, #0x0                   	// #0
   3c840:	mov	x29, sp
   3c844:	ldr	w3, [x0, #20]
   3c848:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c84c:	str	x19, [sp, #16]
   3c850:	mov	x19, x1
   3c854:	ldr	x0, [x0, #3944]
   3c858:	mov	w1, w5
   3c85c:	add	x0, x0, x3, lsl #3
   3c860:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c864:	str	w0, [x19, #16]
   3c868:	mov	w2, #0x2                   	// #2
   3c86c:	mov	w0, w5
   3c870:	mov	w4, #0x2b                  	// #43
   3c874:	mov	w3, #0x74                  	// #116
   3c878:	mov	w1, #0x0                   	// #0
   3c87c:	bl	353d0 <extract_fields@plt>
   3c880:	mov	w2, w0
   3c884:	ands	w0, w0, #0x1f
   3c888:	b.eq	3c8a4 <aarch64_ext_sve_index@@Base+0x70>  // b.none
   3c88c:	mov	w1, #0x2                   	// #2
   3c890:	and	w0, w2, #0x1
   3c894:	sdiv	w2, w2, w1
   3c898:	cbz	w0, 3c890 <aarch64_ext_sve_index@@Base+0x5c>
   3c89c:	sxtw	x2, w2
   3c8a0:	str	x2, [x19, #24]
   3c8a4:	ldr	x19, [sp, #16]
   3c8a8:	ldp	x29, x30, [sp], #32
   3c8ac:	ret

000000000003c8b0 <aarch64_ext_sve_limm_mov@@Base>:
   3c8b0:	stp	x29, x30, [sp, #-64]!
   3c8b4:	mov	x29, sp
   3c8b8:	stp	x19, x20, [sp, #16]
   3c8bc:	mov	x19, x1
   3c8c0:	mov	x20, x3
   3c8c4:	stp	x21, x22, [sp, #32]
   3c8c8:	mov	x22, x0
   3c8cc:	stp	x23, x24, [sp, #48]
   3c8d0:	mov	w23, w2
   3c8d4:	mov	x24, x4
   3c8d8:	ldrb	w0, [x3, #28]
   3c8dc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3c8e0:	and	w21, w0, #0xff
   3c8e4:	mov	x4, x24
   3c8e8:	mov	x3, x20
   3c8ec:	mov	w2, w23
   3c8f0:	mov	x1, x19
   3c8f4:	mov	x0, x22
   3c8f8:	bl	35460 <aarch64_ext_limm@plt>
   3c8fc:	cbz	w0, 3c914 <aarch64_ext_sve_limm_mov@@Base+0x64>
   3c900:	ldr	x0, [x19, #16]
   3c904:	mov	w1, w21
   3c908:	bl	35580 <aarch64_sve_dupm_mov_immediate_p@plt>
   3c90c:	cmp	w0, #0x0
   3c910:	cset	w0, ne  // ne = any
   3c914:	ldp	x19, x20, [sp, #16]
   3c918:	ldp	x21, x22, [sp, #32]
   3c91c:	ldp	x23, x24, [sp, #48]
   3c920:	ldp	x29, x30, [sp], #64
   3c924:	ret

000000000003c928 <aarch64_ext_sve_quad_index@@Base>:
   3c928:	stp	x29, x30, [sp, #-16]!
   3c92c:	mov	x9, x1
   3c930:	mov	w1, w2
   3c934:	mov	x29, sp
   3c938:	ldr	w10, [x0, #16]
   3c93c:	ubfx	x10, x10, #5, #3
   3c940:	bl	38f38 <aarch64_opcode_encode@@Base+0xdc8>
   3c944:	mov	w2, w0
   3c948:	mov	w0, #0x1                   	// #1
   3c94c:	lsl	w3, w0, w10
   3c950:	sub	w3, w3, #0x1
   3c954:	ldp	x29, x30, [sp], #16
   3c958:	and	w3, w3, w2
   3c95c:	lsr	w2, w2, w10
   3c960:	str	w3, [x9, #16]
   3c964:	str	x2, [x9, #24]
   3c968:	ret

000000000003c96c <aarch64_ext_sve_reglist@@Base>:
   3c96c:	stp	x29, x30, [sp, #-16]!
   3c970:	mov	x4, x1
   3c974:	mov	w1, w2
   3c978:	mov	x29, sp
   3c97c:	ldr	w5, [x0, #20]
   3c980:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c984:	mov	w2, #0x0                   	// #0
   3c988:	ldr	x0, [x0, #3944]
   3c98c:	add	x0, x0, x5, lsl #3
   3c990:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c994:	ldrb	w2, [x4, #16]
   3c998:	bfxil	w2, w0, #0, #5
   3c99c:	strb	w2, [x4, #16]
   3c9a0:	ldr	x0, [x3, #8]
   3c9a4:	ldp	x29, x30, [sp], #16
   3c9a8:	ldr	x0, [x0, #120]
   3c9ac:	lsr	x0, x0, #24
   3c9b0:	bfi	w2, w0, #5, #3
   3c9b4:	mov	w0, #0x1                   	// #1
   3c9b8:	strb	w2, [x4, #16]
   3c9bc:	ret

000000000003c9c0 <aarch64_ext_sve_scale@@Base>:
   3c9c0:	stp	x29, x30, [sp, #-32]!
   3c9c4:	mov	x29, sp
   3c9c8:	stp	x19, x20, [sp, #16]
   3c9cc:	mov	x19, x1
   3c9d0:	mov	w20, w2
   3c9d4:	bl	35770 <aarch64_ext_imm@plt>
   3c9d8:	cbz	w0, 3ca24 <aarch64_ext_sve_scale@@Base+0x64>
   3c9dc:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3c9e0:	mov	w1, w20
   3c9e4:	mov	w2, #0x0                   	// #0
   3c9e8:	ldr	x0, [x0, #3944]
   3c9ec:	add	x0, x0, #0x308
   3c9f0:	bl	38f18 <aarch64_opcode_encode@@Base+0xda8>
   3c9f4:	mov	w1, #0xe                   	// #14
   3c9f8:	str	w1, [x19, #32]
   3c9fc:	add	w1, w0, #0x1
   3ca00:	cmp	w0, #0x0
   3ca04:	ldrb	w0, [x19, #36]
   3ca08:	sxtw	x1, w1
   3ca0c:	str	x1, [x19, #40]
   3ca10:	cset	w1, ne  // ne = any
   3ca14:	bfxil	w0, w1, #0, #1
   3ca18:	bfi	w0, w1, #1, #1
   3ca1c:	strb	w0, [x19, #36]
   3ca20:	mov	w0, #0x1                   	// #1
   3ca24:	ldp	x19, x20, [sp, #16]
   3ca28:	ldp	x29, x30, [sp], #32
   3ca2c:	ret

000000000003ca30 <aarch64_ext_sve_shlimm@@Base>:
   3ca30:	stp	x29, x30, [sp, #-32]!
   3ca34:	mov	x29, sp
   3ca38:	str	x19, [sp, #16]
   3ca3c:	mov	x19, x1
   3ca40:	bl	35770 <aarch64_ext_imm@plt>
   3ca44:	cbz	w0, 3ca6c <aarch64_ext_sve_shlimm@@Base+0x3c>
   3ca48:	ldr	x2, [x19, #16]
   3ca4c:	cbz	x2, 3ca84 <aarch64_ext_sve_shlimm@@Base+0x54>
   3ca50:	mov	x0, x2
   3ca54:	neg	x1, x0
   3ca58:	bics	xzr, x0, x1
   3ca5c:	b.ne	3ca78 <aarch64_ext_sve_shlimm@@Base+0x48>  // b.any
   3ca60:	sub	x0, x2, x0
   3ca64:	str	x0, [x19, #16]
   3ca68:	mov	w0, #0x1                   	// #1
   3ca6c:	ldr	x19, [sp, #16]
   3ca70:	ldp	x29, x30, [sp], #32
   3ca74:	ret
   3ca78:	sub	x1, x0, #0x1
   3ca7c:	and	x0, x0, x1
   3ca80:	b	3ca54 <aarch64_ext_sve_shlimm@@Base+0x24>
   3ca84:	mov	w0, #0x0                   	// #0
   3ca88:	b	3ca6c <aarch64_ext_sve_shlimm@@Base+0x3c>

000000000003ca8c <aarch64_ext_sve_shrimm@@Base>:
   3ca8c:	stp	x29, x30, [sp, #-32]!
   3ca90:	mov	x29, sp
   3ca94:	str	x19, [sp, #16]
   3ca98:	mov	x19, x1
   3ca9c:	bl	35770 <aarch64_ext_imm@plt>
   3caa0:	cbz	w0, 3cacc <aarch64_ext_sve_shrimm@@Base+0x40>
   3caa4:	ldr	x1, [x19, #16]
   3caa8:	cbz	x1, 3cae4 <aarch64_ext_sve_shrimm@@Base+0x58>
   3caac:	mov	x0, x1
   3cab0:	neg	x2, x0
   3cab4:	bics	xzr, x0, x2
   3cab8:	b.ne	3cad8 <aarch64_ext_sve_shrimm@@Base+0x4c>  // b.any
   3cabc:	lsl	x0, x0, #1
   3cac0:	sub	x0, x0, x1
   3cac4:	str	x0, [x19, #16]
   3cac8:	mov	w0, #0x1                   	// #1
   3cacc:	ldr	x19, [sp, #16]
   3cad0:	ldp	x29, x30, [sp], #32
   3cad4:	ret
   3cad8:	sub	x2, x0, #0x1
   3cadc:	and	x0, x0, x2
   3cae0:	b	3cab0 <aarch64_ext_sve_shrimm@@Base+0x24>
   3cae4:	mov	w0, #0x0                   	// #0
   3cae8:	b	3cacc <aarch64_ext_sve_shrimm@@Base+0x40>

000000000003caec <aarch64_decode_insn@@Base>:
   3caec:	stp	x29, x30, [sp, #-64]!
   3caf0:	mov	x29, sp
   3caf4:	stp	x19, x20, [sp, #16]
   3caf8:	mov	w20, w0
   3cafc:	stp	x21, x22, [sp, #32]
   3cb00:	mov	x21, x1
   3cb04:	mov	w22, w2
   3cb08:	str	x23, [sp, #48]
   3cb0c:	mov	x23, x3
   3cb10:	bl	355f0 <aarch64_opcode_lookup@plt>
   3cb14:	mov	x19, x0
   3cb18:	cbnz	x0, 3cb34 <aarch64_decode_insn@@Base+0x48>
   3cb1c:	mov	w0, #0x1                   	// #1
   3cb20:	ldp	x19, x20, [sp, #16]
   3cb24:	ldp	x21, x22, [sp, #32]
   3cb28:	ldr	x23, [sp, #48]
   3cb2c:	ldp	x29, x30, [sp], #64
   3cb30:	ret
   3cb34:	mov	x4, x23
   3cb38:	mov	w3, w22
   3cb3c:	mov	x2, x21
   3cb40:	mov	w1, w20
   3cb44:	mov	x0, x19
   3cb48:	bl	39754 <extract_fields@@Base+0xe4>
   3cb4c:	cmp	w0, #0x1
   3cb50:	b.eq	3cb60 <aarch64_decode_insn@@Base+0x74>  // b.none
   3cb54:	mov	x0, x19
   3cb58:	bl	35ba0 <aarch64_find_next_opcode@plt>
   3cb5c:	b	3cb14 <aarch64_decode_insn@@Base+0x28>
   3cb60:	mov	w0, #0x0                   	// #0
   3cb64:	b	3cb20 <aarch64_decode_insn@@Base+0x34>
   3cb68:	sub	sp, sp, #0x2a0
   3cb6c:	stp	x29, x30, [sp, #16]
   3cb70:	add	x29, sp, #0x10
   3cb74:	stp	x21, x22, [sp, #48]
   3cb78:	mov	w21, w1
   3cb7c:	mov	w22, #0x1                   	// #1
   3cb80:	ldr	x1, [x2, #88]
   3cb84:	stp	x23, x24, [sp, #64]
   3cb88:	adrp	x23, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3cb8c:	stp	x19, x20, [sp, #32]
   3cb90:	add	x20, sp, #0x138
   3cb94:	tst	x1, #0x80000000
   3cb98:	stp	x25, x26, [sp, #80]
   3cb9c:	mov	x25, x2
   3cba0:	csel	x0, x0, xzr, eq  // eq = none
   3cba4:	stp	x27, x28, [sp, #96]
   3cba8:	mov	x1, x20
   3cbac:	mov	x19, x3
   3cbb0:	strh	w22, [x2, #196]
   3cbb4:	strb	wzr, [x2, #198]
   3cbb8:	stp	xzr, xzr, [x2, #208]
   3cbbc:	ldr	w2, [x23, #1648]
   3cbc0:	str	x0, [sp, #120]
   3cbc4:	mov	w0, w21
   3cbc8:	bl	35320 <aarch64_decode_insn@plt>
   3cbcc:	str	x23, [sp, #128]
   3cbd0:	ubfx	x1, x21, #21, #10
   3cbd4:	cmp	w1, #0x1
   3cbd8:	b.ne	3cc04 <aarch64_decode_insn@@Base+0x118>  // b.any
   3cbdc:	cbnz	w0, 3cc18 <aarch64_decode_insn@@Base+0x12c>
   3cbe0:	adrp	x3, 53000 <xexit@@Base+0x508>
   3cbe4:	add	x3, x3, #0xc28
   3cbe8:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cbec:	adrp	x0, 53000 <xexit@@Base+0x508>
   3cbf0:	add	x3, x3, #0x397
   3cbf4:	add	x1, x1, #0x4e6
   3cbf8:	add	x0, x0, #0x967
   3cbfc:	mov	w2, #0xca8                 	// #3240
   3cc00:	bl	35b10 <__assert_fail@plt>
   3cc04:	cbz	w0, 3cc60 <aarch64_decode_insn@@Base+0x174>
   3cc08:	sub	w1, w0, #0x1
   3cc0c:	cmp	w1, #0x2
   3cc10:	b.ls	3cc1c <aarch64_decode_insn@@Base+0x130>  // b.plast
   3cc14:	bl	356c0 <abort@plt>
   3cc18:	mov	w0, #0x3                   	// #3
   3cc1c:	adrp	x1, 7d000 <_sch_istable@@Base+0x135c8>
   3cc20:	add	x1, x1, #0x3a0
   3cc24:	str	wzr, [x25, #200]
   3cc28:	mov	w2, w21
   3cc2c:	ldr	x3, [x1, w0, uxtw #3]
   3cc30:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cc34:	ldp	x4, x0, [x25]
   3cc38:	add	x1, x1, #0x975
   3cc3c:	blr	x4
   3cc40:	ldp	x29, x30, [sp, #16]
   3cc44:	ldp	x19, x20, [sp, #32]
   3cc48:	ldp	x21, x22, [sp, #48]
   3cc4c:	ldp	x23, x24, [sp, #64]
   3cc50:	ldp	x25, x26, [sp, #80]
   3cc54:	ldp	x27, x28, [sp, #96]
   3cc58:	add	sp, sp, #0x2a0
   3cc5c:	ret
   3cc60:	ldr	x0, [sp, #320]
   3cc64:	ldr	w1, [x0, #16]
   3cc68:	cmp	w1, #0x5a
   3cc6c:	b.ne	3cc80 <aarch64_decode_insn@@Base+0x194>  // b.any
   3cc70:	ldr	x1, [sp, #408]
   3cc74:	cmp	x1, #0x1f
   3cc78:	b.gt	3cc80 <aarch64_decode_insn@@Base+0x194>
   3cc7c:	strb	w22, [sp, #340]
   3cc80:	ldr	x1, [x0, #120]
   3cc84:	tbz	w1, #4, 3ce70 <aarch64_decode_insn@@Base+0x384>
   3cc88:	add	x22, sp, #0xb8
   3cc8c:	mov	x1, x20
   3cc90:	mov	x0, x22
   3cc94:	bl	395c0 <aarch64_opcode_encode@@Base+0x1450>
   3cc98:	ldr	x0, [sp, #328]
   3cc9c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cca0:	ldr	x4, [x25]
   3cca4:	mov	x2, x22
   3cca8:	ldr	x3, [x0]
   3ccac:	add	x1, x1, #0x998
   3ccb0:	ldr	x0, [x25, #8]
   3ccb4:	blr	x4
   3ccb8:	ldr	x26, [sp, #320]
   3ccbc:	add	x0, sp, #0xb0
   3ccc0:	mov	x23, x20
   3ccc4:	add	x28, sp, #0xac
   3ccc8:	add	x27, sp, #0xb8
   3cccc:	mov	x22, #0x0                   	// #0
   3ccd0:	mov	w24, #0x0                   	// #0
   3ccd4:	str	x0, [sp, #136]
   3ccd8:	adrp	x0, 5c000 <fields@@Base+0x35a8>
   3ccdc:	add	x0, x0, #0x17e
   3cce0:	str	x0, [sp, #144]
   3cce4:	str	xzr, [sp, #176]
   3cce8:	add	x0, x26, #0x20
   3ccec:	ldr	w0, [x0, x22, lsl #2]
   3ccf0:	cbz	w0, 3cd90 <aarch64_decode_insn@@Base+0x2a4>
   3ccf4:	ldr	w0, [x23, #24]
   3ccf8:	cbz	w0, 3cd90 <aarch64_decode_insn@@Base+0x2a4>
   3ccfc:	ldr	x2, [sp, #120]
   3cd00:	add	x7, x25, #0xd0
   3cd04:	ldr	x0, [sp, #136]
   3cd08:	str	x0, [sp]
   3cd0c:	mov	x6, x28
   3cd10:	mov	x0, x27
   3cd14:	mov	w5, w22
   3cd18:	add	x4, x20, #0x18
   3cd1c:	mov	x3, x26
   3cd20:	mov	x1, #0x80                  	// #128
   3cd24:	bl	353f0 <aarch64_print_operand@plt>
   3cd28:	ldrb	w0, [sp, #184]
   3cd2c:	cbz	w0, 3cd68 <aarch64_decode_insn@@Base+0x27c>
   3cd30:	ldr	x0, [sp, #144]
   3cd34:	cmp	w24, #0x0
   3cd38:	adrp	x2, 53000 <xexit@@Base+0x508>
   3cd3c:	add	x2, x2, #0x95e
   3cd40:	csel	x2, x2, x0, eq  // eq = none
   3cd44:	add	w3, w24, #0x1
   3cd48:	ldr	x4, [x25]
   3cd4c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   3cd50:	ldr	x0, [x25, #8]
   3cd54:	add	x1, x1, #0xa63
   3cd58:	str	w3, [sp, #156]
   3cd5c:	blr	x4
   3cd60:	ldr	w3, [sp, #156]
   3cd64:	mov	w24, w3
   3cd68:	ldr	w0, [sp, #172]
   3cd6c:	cbz	w0, 3ce88 <aarch64_decode_insn@@Base+0x39c>
   3cd70:	ldr	x2, [x25, #120]
   3cd74:	mov	x1, x25
   3cd78:	ldr	x0, [x25, #208]
   3cd7c:	blr	x2
   3cd80:	add	x22, x22, #0x1
   3cd84:	add	x23, x23, #0x38
   3cd88:	cmp	x22, #0x6
   3cd8c:	b.ne	3cce8 <aarch64_decode_insn@@Base+0x1fc>  // b.any
   3cd90:	ldr	x2, [sp, #176]
   3cd94:	cbz	x2, 3cea0 <aarch64_decode_insn@@Base+0x3b4>
   3cd98:	adrp	x0, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   3cd9c:	ldr	w0, [x0, #1504]
   3cda0:	cbnz	w0, 3cea0 <aarch64_decode_insn@@Base+0x3b4>
   3cda4:	ldp	x3, x0, [x25]
   3cda8:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cdac:	mov	w23, #0x1                   	// #1
   3cdb0:	add	x1, x1, #0x987
   3cdb4:	blr	x3
   3cdb8:	ldr	x0, [sp, #320]
   3cdbc:	ldr	x0, [x0, #120]
   3cdc0:	tbz	w0, #4, 3ce1c <aarch64_decode_insn@@Base+0x330>
   3cdc4:	adrp	x24, 53000 <xexit@@Base+0x508>
   3cdc8:	adrp	x26, 53000 <xexit@@Base+0x508>
   3cdcc:	add	x24, x24, #0x965
   3cdd0:	add	x26, x26, #0x960
   3cdd4:	mov	w22, #0x1                   	// #1
   3cdd8:	adrp	x28, 53000 <xexit@@Base+0x508>
   3cddc:	add	x27, sp, #0xb8
   3cde0:	mov	x1, x20
   3cde4:	mov	x0, x27
   3cde8:	bl	395c0 <aarch64_opcode_encode@@Base+0x1450>
   3cdec:	ldr	x0, [sp, #328]
   3cdf0:	ldr	x4, [x0, w22, uxtw #3]
   3cdf4:	cbz	x4, 3ce1c <aarch64_decode_insn@@Base+0x330>
   3cdf8:	ldp	x5, x0, [x25]
   3cdfc:	cmp	w22, #0x1
   3ce00:	csel	x2, x26, x24, eq  // eq = none
   3ce04:	mov	x3, x27
   3ce08:	add	x1, x28, #0x995
   3ce0c:	add	w22, w22, #0x1
   3ce10:	blr	x5
   3ce14:	cmp	w22, #0x4
   3ce18:	b.ne	3cdec <aarch64_decode_insn@@Base+0x300>  // b.any
   3ce1c:	cbnz	w23, 3cc40 <aarch64_decode_insn@@Base+0x154>
   3ce20:	ldp	x2, x0, [sp, #120]
   3ce24:	mov	x4, x19
   3ce28:	mov	w1, w21
   3ce2c:	mov	w3, #0x0                   	// #0
   3ce30:	add	x5, x0, #0x670
   3ce34:	mov	x0, x20
   3ce38:	add	x5, x5, #0x8
   3ce3c:	bl	35290 <verify_constraints@plt>
   3ce40:	cmp	w0, #0x3
   3ce44:	b.hi	3cea8 <aarch64_decode_insn@@Base+0x3bc>  // b.pmore
   3ce48:	cbz	w0, 3cc40 <aarch64_decode_insn@@Base+0x154>
   3ce4c:	adrp	x3, 53000 <xexit@@Base+0x508>
   3ce50:	add	x3, x3, #0xc28
   3ce54:	adrp	x1, 53000 <xexit@@Base+0x508>
   3ce58:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3ce5c:	add	x3, x3, #0x3af
   3ce60:	add	x1, x1, #0x4e6
   3ce64:	add	x0, x0, #0x679
   3ce68:	mov	w2, #0xc79                 	// #3193
   3ce6c:	b	3cc00 <aarch64_decode_insn@@Base+0x114>
   3ce70:	ldr	x2, [x0]
   3ce74:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   3ce78:	ldp	x3, x0, [x25]
   3ce7c:	add	x1, x1, #0xa63
   3ce80:	blr	x3
   3ce84:	b	3ccb8 <aarch64_decode_insn@@Base+0x1cc>
   3ce88:	ldp	x3, x0, [x25]
   3ce8c:	mov	x2, x27
   3ce90:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   3ce94:	add	x1, x1, #0xa63
   3ce98:	blr	x3
   3ce9c:	b	3cd80 <aarch64_decode_insn@@Base+0x294>
   3cea0:	mov	w23, #0x0                   	// #0
   3cea4:	b	3cdb8 <aarch64_decode_insn@@Base+0x2cc>
   3cea8:	cmp	w0, #0x4
   3ceac:	b.ne	3cc40 <aarch64_decode_insn@@Base+0x154>  // b.any
   3ceb0:	adrp	x0, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   3ceb4:	ldr	w0, [x0, #1504]
   3ceb8:	cbnz	w0, 3cc40 <aarch64_decode_insn@@Base+0x154>
   3cebc:	ldr	w0, [x19, #28]
   3cec0:	cbnz	w0, 3cee8 <aarch64_decode_insn@@Base+0x3fc>
   3cec4:	adrp	x3, 53000 <xexit@@Base+0x508>
   3cec8:	add	x3, x3, #0xc28
   3cecc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3ced0:	adrp	x0, 53000 <xexit@@Base+0x508>
   3ced4:	add	x3, x3, #0x3c2
   3ced8:	add	x1, x1, #0x4e6
   3cedc:	add	x0, x0, #0x99e
   3cee0:	mov	w2, #0xc52                 	// #3154
   3cee4:	b	3cc00 <aarch64_decode_insn@@Base+0x114>
   3cee8:	ldr	x2, [x19, #8]
   3ceec:	cbnz	x2, 3cf14 <aarch64_decode_insn@@Base+0x428>
   3cef0:	adrp	x3, 53000 <xexit@@Base+0x508>
   3cef4:	add	x3, x3, #0xc28
   3cef8:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cefc:	adrp	x0, 53000 <xexit@@Base+0x508>
   3cf00:	add	x3, x3, #0x3c2
   3cf04:	add	x1, x1, #0x4e6
   3cf08:	add	x0, x0, #0x9b0
   3cf0c:	mov	w2, #0xc53                 	// #3155
   3cf10:	b	3cc00 <aarch64_decode_insn@@Base+0x114>
   3cf14:	ldp	x3, x0, [x25]
   3cf18:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cf1c:	add	x1, x1, #0x987
   3cf20:	blr	x3
   3cf24:	ldr	w2, [x19, #4]
   3cf28:	tbnz	w2, #31, 3cc40 <aarch64_decode_insn@@Base+0x154>
   3cf2c:	ldp	x3, x0, [x25]
   3cf30:	add	w2, w2, #0x1
   3cf34:	adrp	x1, 53000 <xexit@@Base+0x508>
   3cf38:	add	x1, x1, #0x9be
   3cf3c:	blr	x3
   3cf40:	b	3cc40 <aarch64_decode_insn@@Base+0x154>

000000000003cf44 <aarch64_symbol_is_valid@@Base>:
   3cf44:	cbz	x0, 3cf84 <aarch64_symbol_is_valid@@Base+0x40>
   3cf48:	ldr	x0, [x0, #8]
   3cf4c:	cbz	x0, 3cf84 <aarch64_symbol_is_valid@@Base+0x40>
   3cf50:	ldrb	w1, [x0]
   3cf54:	cmp	w1, #0x24
   3cf58:	b.ne	3cf8c <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3cf5c:	ldrb	w1, [x0, #1]
   3cf60:	mov	w2, #0x64                  	// #100
   3cf64:	cmp	w1, #0x78
   3cf68:	ccmp	w1, w2, #0x4, ne  // ne = any
   3cf6c:	b.ne	3cf8c <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3cf70:	ldrb	w0, [x0, #2]
   3cf74:	cmp	w0, #0x2e
   3cf78:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   3cf7c:	cset	w0, ne  // ne = any
   3cf80:	ret
   3cf84:	mov	w0, #0x0                   	// #0
   3cf88:	b	3cf80 <aarch64_symbol_is_valid@@Base+0x3c>
   3cf8c:	mov	w0, #0x1                   	// #1
   3cf90:	b	3cf80 <aarch64_symbol_is_valid@@Base+0x3c>

000000000003cf94 <print_insn_aarch64@@Base>:
   3cf94:	stp	x29, x30, [sp, #-112]!
   3cf98:	mov	x29, sp
   3cf9c:	stp	x19, x20, [sp, #16]
   3cfa0:	mov	x19, x1
   3cfa4:	ldr	x20, [x1, #224]
   3cfa8:	stp	x21, x22, [sp, #32]
   3cfac:	mov	x21, x0
   3cfb0:	stp	x23, x24, [sp, #48]
   3cfb4:	cbz	x20, 3cfd4 <print_insn_aarch64@@Base+0x40>
   3cfb8:	adrp	x23, 53000 <xexit@@Base+0x508>
   3cfbc:	adrp	x24, 53000 <xexit@@Base+0x508>
   3cfc0:	add	x23, x23, #0x9cd
   3cfc4:	add	x24, x24, #0x9d0
   3cfc8:	ldrb	w0, [x20]
   3cfcc:	cbnz	w0, 3d0b0 <print_insn_aarch64@@Base+0x11c>
   3cfd0:	str	xzr, [x19, #224]
   3cfd4:	mov	w0, #0x1                   	// #1
   3cfd8:	str	w0, [x19, #44]
   3cfdc:	str	w0, [sp, #76]
   3cfe0:	ldr	x0, [x19, #48]
   3cfe4:	cbz	x0, 3cff0 <print_insn_aarch64@@Base+0x5c>
   3cfe8:	ldr	w0, [x0, #32]
   3cfec:	tbz	w0, #4, 3cff4 <print_insn_aarch64@@Base+0x60>
   3cff0:	str	wzr, [sp, #76]
   3cff4:	ldr	w0, [x19, #84]
   3cff8:	cbz	w0, 3d344 <print_insn_aarch64@@Base+0x3b0>
   3cffc:	ldr	x0, [x19, #72]
   3d000:	ldr	x0, [x0]
   3d004:	ldr	w1, [x0, #24]
   3d008:	tbnz	w1, #21, 3d344 <print_insn_aarch64@@Base+0x3b0>
   3d00c:	ldr	x0, [x0]
   3d010:	ldr	x0, [x0, #8]
   3d014:	ldr	w0, [x0, #8]
   3d018:	cmp	w0, #0x5
   3d01c:	b.ne	3d344 <print_insn_aarch64@@Base+0x3b0>  // b.any
   3d020:	adrp	x10, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   3d024:	cbnz	x21, 3d034 <print_insn_aarch64@@Base+0xa0>
   3d028:	add	x0, x10, #0x5e0
   3d02c:	mov	w1, #0xffffffff            	// #-1
   3d030:	str	w1, [x0, #4]
   3d034:	add	x0, x10, #0x5e0
   3d038:	ldr	w4, [x19, #80]
   3d03c:	add	w4, w4, #0x1
   3d040:	ldr	w5, [x0, #4]
   3d044:	tbnz	w5, #31, 3d05c <print_insn_aarch64@@Base+0xc8>
   3d048:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d04c:	ldr	x1, [x19, #240]
   3d050:	ldr	x0, [x0, #1688]
   3d054:	cmp	x1, x0
   3d058:	b.eq	3d3a4 <print_insn_aarch64@@Base+0x410>  // b.none
   3d05c:	mov	w6, #0x0                   	// #0
   3d060:	sbfiz	x8, x4, #3, #32
   3d064:	add	x2, sp, #0x4c
   3d068:	mov	w9, #0xffffffff            	// #-1
   3d06c:	mov	w7, #0x0                   	// #0
   3d070:	mov	w11, #0x1                   	// #1
   3d074:	ldr	w0, [x19, #84]
   3d078:	cmp	w0, w4
   3d07c:	b.gt	3d18c <print_insn_aarch64@@Base+0x1f8>
   3d080:	cbnz	w7, 3d21c <print_insn_aarch64@@Base+0x288>
   3d084:	ldr	w4, [x19, #80]
   3d088:	cmp	w5, w4
   3d08c:	b.gt	3d098 <print_insn_aarch64@@Base+0x104>
   3d090:	cmp	w6, #0x0
   3d094:	csel	w4, w4, w5, eq  // eq = none
   3d098:	ldr	x0, [x19, #48]
   3d09c:	cbz	x0, 3d334 <print_insn_aarch64@@Base+0x3a0>
   3d0a0:	ldr	x6, [x0, #40]
   3d0a4:	sbfiz	x5, x4, #3, #32
   3d0a8:	add	x2, sp, #0x4c
   3d0ac:	b	3d218 <print_insn_aarch64@@Base+0x284>
   3d0b0:	add	x22, x20, #0x1
   3d0b4:	cmp	w0, #0x2c
   3d0b8:	b.ne	3d0c8 <print_insn_aarch64@@Base+0x134>  // b.any
   3d0bc:	mov	x20, x22
   3d0c0:	b	3cfc8 <print_insn_aarch64@@Base+0x34>
   3d0c4:	add	x22, x22, #0x1
   3d0c8:	ldrb	w0, [x22]
   3d0cc:	cmp	w0, #0x2c
   3d0d0:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   3d0d4:	b.ne	3d0c4 <print_insn_aarch64@@Base+0x130>  // b.any
   3d0d8:	mov	x1, x23
   3d0dc:	mov	x0, x20
   3d0e0:	mov	x2, #0xa                   	// #10
   3d0e4:	bl	35480 <strncmp@plt>
   3d0e8:	cbnz	w0, 3d0fc <print_insn_aarch64@@Base+0x168>
   3d0ec:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d0f0:	mov	w1, #0x1                   	// #1
   3d0f4:	str	w1, [x0, #1648]
   3d0f8:	b	3d0bc <print_insn_aarch64@@Base+0x128>
   3d0fc:	mov	x1, x24
   3d100:	mov	x0, x20
   3d104:	mov	x2, #0x7                   	// #7
   3d108:	bl	35480 <strncmp@plt>
   3d10c:	cbnz	w0, 3d11c <print_insn_aarch64@@Base+0x188>
   3d110:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d114:	str	wzr, [x0, #1648]
   3d118:	b	3d0bc <print_insn_aarch64@@Base+0x128>
   3d11c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d120:	mov	x0, x20
   3d124:	add	x1, x1, #0x9d8
   3d128:	mov	x2, #0x8                   	// #8
   3d12c:	bl	35480 <strncmp@plt>
   3d130:	cbnz	w0, 3d144 <print_insn_aarch64@@Base+0x1b0>
   3d134:	adrp	x0, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   3d138:	mov	w1, #0x1                   	// #1
   3d13c:	str	w1, [x0, #1504]
   3d140:	b	3d0bc <print_insn_aarch64@@Base+0x128>
   3d144:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d148:	mov	x0, x20
   3d14c:	add	x1, x1, #0x9db
   3d150:	mov	x2, #0x5                   	// #5
   3d154:	bl	35480 <strncmp@plt>
   3d158:	cbnz	w0, 3d168 <print_insn_aarch64@@Base+0x1d4>
   3d15c:	adrp	x0, 98000 <aarch64_ext_sysins_op@@Base+0x5c088>
   3d160:	str	wzr, [x0, #1504]
   3d164:	b	3d0bc <print_insn_aarch64@@Base+0x128>
   3d168:	mov	w2, #0x5                   	// #5
   3d16c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d170:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d174:	add	x1, x1, #0x9e1
   3d178:	add	x0, x0, #0xb4a
   3d17c:	bl	35a30 <dcgettext@plt>
   3d180:	mov	x1, x20
   3d184:	bl	35a60 <_bfd_error_handler@plt>
   3d188:	b	3d0bc <print_insn_aarch64@@Base+0x128>
   3d18c:	ldr	x0, [x19, #72]
   3d190:	ldr	x0, [x0, x8]
   3d194:	ldr	x1, [x0, #32]
   3d198:	ldr	x0, [x0, #16]
   3d19c:	ldr	x3, [x1, #40]
   3d1a0:	add	x0, x0, x3
   3d1a4:	cmp	x0, x21
   3d1a8:	b.hi	3d080 <print_insn_aarch64@@Base+0xec>  // b.pmore
   3d1ac:	ldr	x0, [x19, #48]
   3d1b0:	cbz	x0, 3d1bc <print_insn_aarch64@@Base+0x228>
   3d1b4:	cmp	x1, x0
   3d1b8:	b.ne	3d1d4 <print_insn_aarch64@@Base+0x240>  // b.any
   3d1bc:	mov	w1, w4
   3d1c0:	mov	x0, x19
   3d1c4:	bl	391a0 <aarch64_opcode_encode@@Base+0x1030>
   3d1c8:	cmp	w0, #0x0
   3d1cc:	csel	w9, w9, w4, eq  // eq = none
   3d1d0:	csel	w7, w7, w11, eq  // eq = none
   3d1d4:	add	w4, w4, #0x1
   3d1d8:	add	x8, x8, #0x8
   3d1dc:	b	3d074 <print_insn_aarch64@@Base+0xe0>
   3d1e0:	ldr	x0, [x19, #72]
   3d1e4:	ldr	x3, [x0, x5]
   3d1e8:	ldr	x1, [x3, #32]
   3d1ec:	ldr	x3, [x3, #16]
   3d1f0:	ldr	x0, [x1, #40]
   3d1f4:	add	x0, x0, x3
   3d1f8:	cmp	x6, x0
   3d1fc:	b.hi	3d21c <print_insn_aarch64@@Base+0x288>  // b.pmore
   3d200:	ldr	x0, [x19, #48]
   3d204:	cbz	x0, 3d31c <print_insn_aarch64@@Base+0x388>
   3d208:	cmp	x1, x0
   3d20c:	b.eq	3d31c <print_insn_aarch64@@Base+0x388>  // b.none
   3d210:	sub	w4, w4, #0x1
   3d214:	sub	x5, x5, #0x8
   3d218:	tbz	w4, #31, 3d1e0 <print_insn_aarch64@@Base+0x24c>
   3d21c:	add	x10, x10, #0x5e0
   3d220:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d224:	add	x0, x0, #0x670
   3d228:	ldr	w1, [sp, #76]
   3d22c:	ldr	x2, [x19, #240]
   3d230:	str	w9, [x10, #4]
   3d234:	str	x2, [x0, #40]
   3d238:	cmp	w1, #0x1
   3d23c:	str	w1, [x0, #48]
   3d240:	mov	w20, #0x4                   	// #4
   3d244:	b.ne	3d2ac <print_insn_aarch64@@Base+0x318>  // b.any
   3d248:	and	w0, w21, #0x3
   3d24c:	ldr	w4, [x19, #84]
   3d250:	sub	w20, w20, w0
   3d254:	add	w0, w9, #0x1
   3d258:	sbfiz	x2, x0, #3, #32
   3d25c:	cmp	w4, w0
   3d260:	b.le	3d298 <print_insn_aarch64@@Base+0x304>
   3d264:	ldr	x1, [x19, #72]
   3d268:	ldr	x3, [x1, x2]
   3d26c:	add	x2, x2, #0x8
   3d270:	ldr	x1, [x3, #32]
   3d274:	ldr	x3, [x3, #16]
   3d278:	ldr	x1, [x1, #40]
   3d27c:	add	x1, x1, x3
   3d280:	cmp	x21, x1
   3d284:	b.cs	3d33c <print_insn_aarch64@@Base+0x3a8>  // b.hs, b.nlast
   3d288:	sub	x0, x1, x21
   3d28c:	cmp	x0, w20, uxtw
   3d290:	b.cs	3d298 <print_insn_aarch64@@Base+0x304>  // b.hs, b.nlast
   3d294:	sub	w20, w1, w21
   3d298:	and	x0, x21, #0x1
   3d29c:	cmp	w20, #0x3
   3d2a0:	mov	x1, #0x2                   	// #2
   3d2a4:	sub	x0, x1, x0
   3d2a8:	csel	w20, w20, w0, ne  // ne = any
   3d2ac:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d2b0:	ldr	w0, [x0, #1696]
   3d2b4:	cmp	w0, #0x1
   3d2b8:	b.ne	3d358 <print_insn_aarch64@@Base+0x3c4>  // b.any
   3d2bc:	ldr	x0, [x19, #88]
   3d2c0:	tbnz	w0, #30, 3d358 <print_insn_aarch64@@Base+0x3c4>
   3d2c4:	ldr	w0, [x19, #40]
   3d2c8:	adrp	x22, 39000 <aarch64_opcode_encode@@Base+0xe90>
   3d2cc:	add	x22, x22, #0x550
   3d2d0:	stp	w20, w0, [x19, #172]
   3d2d4:	ldr	x4, [x19, #104]
   3d2d8:	add	x23, sp, #0x48
   3d2dc:	mov	x3, x19
   3d2e0:	mov	w2, w20
   3d2e4:	mov	x1, x23
   3d2e8:	mov	x0, x21
   3d2ec:	blr	x4
   3d2f0:	cbz	w0, 3d370 <print_insn_aarch64@@Base+0x3dc>
   3d2f4:	ldr	x3, [x19, #112]
   3d2f8:	mov	x2, x19
   3d2fc:	mov	x1, x21
   3d300:	blr	x3
   3d304:	mov	w0, #0xffffffff            	// #-1
   3d308:	ldp	x19, x20, [sp, #16]
   3d30c:	ldp	x21, x22, [sp, #32]
   3d310:	ldp	x23, x24, [sp, #48]
   3d314:	ldp	x29, x30, [sp], #112
   3d318:	ret
   3d31c:	mov	w1, w4
   3d320:	mov	x0, x19
   3d324:	bl	391a0 <aarch64_opcode_encode@@Base+0x1030>
   3d328:	cbz	w0, 3d210 <print_insn_aarch64@@Base+0x27c>
   3d32c:	mov	w9, w4
   3d330:	b	3d21c <print_insn_aarch64@@Base+0x288>
   3d334:	mov	x6, #0x0                   	// #0
   3d338:	b	3d0a4 <print_insn_aarch64@@Base+0x110>
   3d33c:	add	w0, w0, #0x1
   3d340:	b	3d25c <print_insn_aarch64@@Base+0x2c8>
   3d344:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3d348:	ldr	w1, [sp, #76]
   3d34c:	mov	w20, #0x4                   	// #4
   3d350:	str	w1, [x0, #1696]
   3d354:	b	3d2ac <print_insn_aarch64@@Base+0x318>
   3d358:	ldr	w0, [x19, #44]
   3d35c:	mov	w20, #0x4                   	// #4
   3d360:	adrp	x22, 3c000 <aarch64_ext_sysins_op@@Base+0x88>
   3d364:	add	x22, x22, #0xb68
   3d368:	stp	w20, w0, [x19, #172]
   3d36c:	b	3d2d4 <print_insn_aarch64@@Base+0x340>
   3d370:	ldr	w0, [x19, #176]
   3d374:	lsl	w1, w20, #3
   3d378:	cmp	w0, #0x0
   3d37c:	mov	x0, x23
   3d380:	cset	w2, eq  // eq = none
   3d384:	bl	35570 <bfd_get_bits@plt>
   3d388:	mov	w1, w0
   3d38c:	add	x3, sp, #0x50
   3d390:	mov	x0, x21
   3d394:	mov	x2, x19
   3d398:	blr	x22
   3d39c:	mov	w0, w20
   3d3a0:	b	3d308 <print_insn_aarch64@@Base+0x374>
   3d3a4:	cmp	w4, w5
   3d3a8:	mov	w6, #0x1                   	// #1
   3d3ac:	csel	w4, w4, w5, le
   3d3b0:	b	3d060 <print_insn_aarch64@@Base+0xcc>

000000000003d3b4 <print_aarch64_disassembler_options@@Base>:
   3d3b4:	stp	x29, x30, [sp, #-32]!
   3d3b8:	mov	w2, #0x5                   	// #5
   3d3bc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d3c0:	mov	x29, sp
   3d3c4:	stp	x19, x20, [sp, #16]
   3d3c8:	adrp	x20, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d3cc:	add	x20, x20, #0xb4a
   3d3d0:	mov	x19, x0
   3d3d4:	add	x1, x1, #0xa06
   3d3d8:	mov	x0, x20
   3d3dc:	bl	35a30 <dcgettext@plt>
   3d3e0:	mov	x1, x0
   3d3e4:	mov	x0, x19
   3d3e8:	bl	35bd0 <fprintf@plt>
   3d3ec:	mov	w2, #0x5                   	// #5
   3d3f0:	mov	x0, x20
   3d3f4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d3f8:	add	x1, x1, #0xa97
   3d3fc:	bl	35a30 <dcgettext@plt>
   3d400:	mov	x1, x0
   3d404:	mov	x0, x19
   3d408:	bl	35bd0 <fprintf@plt>
   3d40c:	mov	w2, #0x5                   	// #5
   3d410:	mov	x0, x20
   3d414:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d418:	add	x1, x1, #0xacf
   3d41c:	bl	35a30 <dcgettext@plt>
   3d420:	mov	x1, x0
   3d424:	mov	x0, x19
   3d428:	bl	35bd0 <fprintf@plt>
   3d42c:	mov	w2, #0x5                   	// #5
   3d430:	mov	x0, x20
   3d434:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d438:	add	x1, x1, #0xb04
   3d43c:	bl	35a30 <dcgettext@plt>
   3d440:	mov	x1, x0
   3d444:	mov	x0, x19
   3d448:	bl	35bd0 <fprintf@plt>
   3d44c:	mov	w2, #0x5                   	// #5
   3d450:	mov	x0, x20
   3d454:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d458:	add	x1, x1, #0xb38
   3d45c:	bl	35a30 <dcgettext@plt>
   3d460:	mov	x1, x0
   3d464:	mov	x0, x19
   3d468:	bl	35bd0 <fprintf@plt>
   3d46c:	mov	x0, x20
   3d470:	mov	w2, #0x5                   	// #5
   3d474:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d478:	add	x1, x1, #0xb77
   3d47c:	bl	35a30 <dcgettext@plt>
   3d480:	mov	x1, x0
   3d484:	mov	x0, x19
   3d488:	ldp	x19, x20, [sp, #16]
   3d48c:	ldp	x29, x30, [sp], #32
   3d490:	b	35bd0 <fprintf@plt>
   3d494:	ldr	x2, [x0]
   3d498:	ldr	x1, [x1]
   3d49c:	cmp	x2, x1
   3d4a0:	cset	w0, hi  // hi = pmore
   3d4a4:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
   3d4a8:	ret
   3d4ac:	and	w4, w1, #0x1f
   3d4b0:	ubfx	x3, x1, #10, #5
   3d4b4:	ubfx	x0, x1, #23, #1
   3d4b8:	tbz	w1, #23, 3d4d4 <print_aarch64_disassembler_options@@Base+0x120>
   3d4bc:	ubfx	x2, x1, #5, #5
   3d4c0:	cmp	w4, w2
   3d4c4:	ccmp	w2, w3, #0x4, ne  // ne = any
   3d4c8:	b.ne	3d4d4 <print_aarch64_disassembler_options@@Base+0x120>  // b.any
   3d4cc:	cmp	w2, #0x1f
   3d4d0:	b.ne	3d4e4 <print_aarch64_disassembler_options@@Base+0x130>  // b.any
   3d4d4:	ubfx	x0, x1, #22, #1
   3d4d8:	tbz	w1, #22, 3d4e4 <print_aarch64_disassembler_options@@Base+0x130>
   3d4dc:	cmp	w4, w3
   3d4e0:	cset	w0, eq  // eq = none
   3d4e4:	ret
   3d4e8:	ubfx	x3, x1, #7, #1
   3d4ec:	and	w5, w1, #0x7f
   3d4f0:	ubfx	x1, x1, #6, #1
   3d4f4:	cmp	w0, #0x8
   3d4f8:	lsl	w3, w3, #31
   3d4fc:	lsl	w4, w1, #2
   3d500:	lsl	w2, w1, #1
   3d504:	orr	w2, w2, w1
   3d508:	orr	w4, w4, w1, lsl #3
   3d50c:	orr	w4, w4, w2
   3d510:	lsl	w2, w1, #30
   3d514:	lsl	w4, w4, #26
   3d518:	b.ne	3d544 <print_aarch64_disassembler_options@@Base+0x190>  // b.any
   3d51c:	lsl	w0, w1, #23
   3d520:	orr	w3, w3, w1, lsl #25
   3d524:	eor	w2, w2, #0x40000000
   3d528:	orr	w1, w0, w1, lsl #24
   3d52c:	orr	w1, w3, w1
   3d530:	orr	w0, w2, w5, lsl #16
   3d534:	orr	w0, w1, w0
   3d538:	orr	w0, w0, w4
   3d53c:	lsl	x0, x0, #32
   3d540:	ret
   3d544:	cmp	w0, #0x4
   3d548:	ccmp	w0, #0x2, #0x4, ne  // ne = any
   3d54c:	b.ne	3d564 <print_aarch64_disassembler_options@@Base+0x1b0>  // b.any
   3d550:	eor	w0, w2, #0x40000000
   3d554:	orr	w3, w3, w5, lsl #19
   3d558:	orr	w0, w0, w4
   3d55c:	orr	w0, w0, w3
   3d560:	ret
   3d564:	stp	x29, x30, [sp, #-16]!
   3d568:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d56c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d570:	mov	x29, sp
   3d574:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3d578:	add	x3, x3, #0x710
   3d57c:	add	x1, x1, #0xfff
   3d580:	add	x0, x0, #0x679
   3d584:	mov	w2, #0xbac                 	// #2988
   3d588:	bl	35b10 <__assert_fail@plt>
   3d58c:	stp	x29, x30, [sp, #-80]!
   3d590:	mov	x29, sp
   3d594:	stp	x19, x20, [sp, #16]
   3d598:	mov	x19, x0
   3d59c:	mov	x20, x1
   3d5a0:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3d5a4:	ldr	w1, [x2, #32]
   3d5a8:	stp	x21, x22, [sp, #32]
   3d5ac:	mov	x21, x3
   3d5b0:	mov	x22, x4
   3d5b4:	ldr	x0, [x0, #3904]
   3d5b8:	ubfiz	x3, x1, #4, #32
   3d5bc:	ldr	x3, [x0, x3]
   3d5c0:	ldr	x0, [x2, #40]
   3d5c4:	str	x23, [sp, #48]
   3d5c8:	add	x23, sp, #0x40
   3d5cc:	cbnz	x0, 3d63c <print_aarch64_disassembler_options@@Base+0x288>
   3d5d0:	ldrb	w4, [x2, #4]
   3d5d4:	cmp	w4, #0x5
   3d5d8:	b.ne	3d5e4 <print_aarch64_disassembler_options@@Base+0x230>  // b.any
   3d5dc:	ldrb	w2, [x2, #36]
   3d5e0:	tbnz	w2, #1, 3d63c <print_aarch64_disassembler_options@@Base+0x288>
   3d5e4:	cmp	w1, #0x5
   3d5e8:	b.ne	3d624 <print_aarch64_disassembler_options@@Base+0x270>  // b.any
   3d5ec:	strb	wzr, [sp, #64]
   3d5f0:	mov	x5, x23
   3d5f4:	mov	x4, x22
   3d5f8:	mov	x3, x21
   3d5fc:	mov	x1, x20
   3d600:	mov	x0, x19
   3d604:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d608:	add	x2, x2, #0x1b
   3d60c:	bl	353c0 <snprintf@plt>
   3d610:	ldp	x19, x20, [sp, #16]
   3d614:	ldp	x21, x22, [sp, #32]
   3d618:	ldr	x23, [sp, #48]
   3d61c:	ldp	x29, x30, [sp], #80
   3d620:	ret
   3d624:	mov	x0, x23
   3d628:	adrp	x2, 5f000 <fields@@Base+0x65a8>
   3d62c:	mov	x1, #0x10                  	// #16
   3d630:	add	x2, x2, #0xc8e
   3d634:	bl	353c0 <snprintf@plt>
   3d638:	b	3d5f0 <print_aarch64_disassembler_options@@Base+0x23c>
   3d63c:	mov	x1, #0x64                  	// #100
   3d640:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d644:	add	x2, x2, #0x3b3
   3d648:	sdiv	x4, x0, x1
   3d64c:	msub	x4, x4, x1, x0
   3d650:	mov	x0, x23
   3d654:	mov	x1, #0x10                  	// #16
   3d658:	bl	353c0 <snprintf@plt>
   3d65c:	b	3d5f0 <print_aarch64_disassembler_options@@Base+0x23c>
   3d660:	adrp	x3, 97000 <aarch64_operands@@Base+0x16bc0>
   3d664:	add	x2, x0, #0x14
   3d668:	mov	w0, #0x0                   	// #0
   3d66c:	ldr	x3, [x3, #3944]
   3d670:	ldr	w1, [x2], #4
   3d674:	cbnz	w1, 3d6b0 <print_aarch64_disassembler_options@@Base+0x2fc>
   3d678:	sub	w1, w0, #0x1
   3d67c:	cmp	w1, #0x1e
   3d680:	b.ls	3d6c0 <print_aarch64_disassembler_options@@Base+0x30c>  // b.plast
   3d684:	stp	x29, x30, [sp, #-16]!
   3d688:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d68c:	add	x3, x3, #0x710
   3d690:	mov	x29, sp
   3d694:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d698:	adrp	x0, 53000 <xexit@@Base+0x508>
   3d69c:	add	x3, x3, #0xe
   3d6a0:	add	x1, x1, #0xb7e
   3d6a4:	add	x0, x0, #0x912
   3d6a8:	mov	w2, #0x12e                 	// #302
   3d6ac:	bl	35b10 <__assert_fail@plt>
   3d6b0:	add	x1, x3, w1, uxtw #3
   3d6b4:	ldr	w1, [x1, #4]
   3d6b8:	add	w0, w0, w1
   3d6bc:	b	3d670 <print_aarch64_disassembler_options@@Base+0x2bc>
   3d6c0:	ret
   3d6c4:	cmp	w1, #0x1f
   3d6c8:	b.ls	3d6f8 <print_aarch64_disassembler_options@@Base+0x344>  // b.plast
   3d6cc:	stp	x29, x30, [sp, #-16]!
   3d6d0:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d6d4:	add	x3, x3, #0x710
   3d6d8:	mov	x29, sp
   3d6dc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d6e0:	adrp	x0, 53000 <xexit@@Base+0x508>
   3d6e4:	add	x3, x3, #0x27
   3d6e8:	add	x1, x1, #0xfff
   3d6ec:	add	x0, x0, #0x91f
   3d6f0:	mov	w2, #0x222                 	// #546
   3d6f4:	bl	35b10 <__assert_fail@plt>
   3d6f8:	sub	w1, w1, #0x1
   3d6fc:	mov	x2, #0x1                   	// #1
   3d700:	lsl	x1, x2, x1
   3d704:	neg	x2, x1
   3d708:	cmp	x2, x0
   3d70c:	b.gt	3d71c <print_aarch64_disassembler_options@@Base+0x368>
   3d710:	cmp	x1, x0
   3d714:	cset	w0, gt
   3d718:	ret
   3d71c:	mov	w0, #0x0                   	// #0
   3d720:	ret
   3d724:	and	w1, w1, #0xff
   3d728:	sub	w2, w1, #0x7
   3d72c:	and	w2, w2, #0xff
   3d730:	cmp	w2, #0x1
   3d734:	b.ls	3d764 <print_aarch64_disassembler_options@@Base+0x3b0>  // b.plast
   3d738:	stp	x29, x30, [sp, #-16]!
   3d73c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d740:	add	x3, x3, #0x710
   3d744:	mov	x29, sp
   3d748:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d74c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3d750:	add	x3, x3, #0x40
   3d754:	add	x1, x1, #0xfff
   3d758:	add	x0, x0, #0x26
   3d75c:	mov	w2, #0xb6d                 	// #2925
   3d760:	bl	35b10 <__assert_fail@plt>
   3d764:	cmp	w1, #0x8
   3d768:	cset	x1, eq  // eq = none
   3d76c:	lsl	x1, x1, #5
   3d770:	add	x0, x1, w0, sxtw
   3d774:	adrp	x1, 7d000 <_sch_istable@@Base+0x135c8>
   3d778:	add	x1, x1, #0x3d0
   3d77c:	ldr	x0, [x1, x0, lsl #3]
   3d780:	ret
   3d784:	cbz	x0, 3d7e0 <print_aarch64_disassembler_options@@Base+0x42c>
   3d788:	stp	x29, x30, [sp, #-48]!
   3d78c:	mov	x29, sp
   3d790:	stp	x19, x20, [sp, #16]
   3d794:	mov	x19, x0
   3d798:	mov	w20, w3
   3d79c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d7a0:	add	x0, x0, #0xb4a
   3d7a4:	stp	x21, x22, [sp, #32]
   3d7a8:	mov	w22, w1
   3d7ac:	mov	w21, w2
   3d7b0:	adrp	x1, 5a000 <fields@@Base+0x15a8>
   3d7b4:	mov	w2, #0x5                   	// #5
   3d7b8:	add	x1, x1, #0x57e
   3d7bc:	bl	35a30 <dcgettext@plt>
   3d7c0:	mov	w1, #0x6                   	// #6
   3d7c4:	stp	w1, w22, [x19]
   3d7c8:	str	x0, [x19, #8]
   3d7cc:	stp	w21, w20, [x19, #16]
   3d7d0:	ldp	x19, x20, [sp, #16]
   3d7d4:	ldp	x21, x22, [sp, #32]
   3d7d8:	ldp	x29, x30, [sp], #48
   3d7dc:	ret
   3d7e0:	ret
   3d7e4:	cbz	x0, 3d840 <print_aarch64_disassembler_options@@Base+0x48c>
   3d7e8:	stp	x29, x30, [sp, #-48]!
   3d7ec:	mov	x29, sp
   3d7f0:	stp	x19, x20, [sp, #16]
   3d7f4:	mov	x19, x0
   3d7f8:	mov	w20, w3
   3d7fc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d800:	add	x0, x0, #0xb4a
   3d804:	stp	x21, x22, [sp, #32]
   3d808:	mov	w22, w1
   3d80c:	mov	w21, w2
   3d810:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3d814:	mov	w2, #0x5                   	// #5
   3d818:	add	x1, x1, #0x6d
   3d81c:	bl	35a30 <dcgettext@plt>
   3d820:	mov	w1, #0x6                   	// #6
   3d824:	stp	w1, w22, [x19]
   3d828:	str	x0, [x19, #8]
   3d82c:	stp	w21, w20, [x19, #16]
   3d830:	ldp	x19, x20, [sp, #16]
   3d834:	ldp	x21, x22, [sp, #32]
   3d838:	ldp	x29, x30, [sp], #48
   3d83c:	ret
   3d840:	ret
   3d844:	ldrb	w8, [x2, #28]
   3d848:	tbz	w8, #1, 3d8a0 <print_aarch64_disassembler_options@@Base+0x4ec>
   3d84c:	ldr	w4, [x2, #20]
   3d850:	tbz	w8, #2, 3d894 <print_aarch64_disassembler_options@@Base+0x4e0>
   3d854:	ldr	w2, [x2]
   3d858:	mov	x5, x0
   3d85c:	mov	x6, x1
   3d860:	mov	x7, x3
   3d864:	cmp	w2, #0x58
   3d868:	b.ne	3d87c <print_aarch64_disassembler_options@@Base+0x4c8>  // b.any
   3d86c:	cbnz	w4, 3d87c <print_aarch64_disassembler_options@@Base+0x4c8>
   3d870:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d874:	add	x2, x2, #0x7d
   3d878:	b	353c0 <snprintf@plt>
   3d87c:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d880:	mov	x3, x7
   3d884:	add	x2, x2, #0x83
   3d888:	mov	x1, x6
   3d88c:	mov	x0, x5
   3d890:	b	353c0 <snprintf@plt>
   3d894:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d898:	add	x2, x2, #0x8e
   3d89c:	b	3d890 <print_aarch64_disassembler_options@@Base+0x4dc>
   3d8a0:	ldrb	w4, [x2, #36]
   3d8a4:	tbz	w4, #0, 3d8f0 <print_aarch64_disassembler_options@@Base+0x53c>
   3d8a8:	ldr	w4, [x2, #32]
   3d8ac:	cmp	w4, #0xf
   3d8b0:	b.eq	3d8e0 <print_aarch64_disassembler_options@@Base+0x52c>  // b.none
   3d8b4:	stp	x29, x30, [sp, #-16]!
   3d8b8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d8bc:	add	x3, x3, #0x710
   3d8c0:	mov	x29, sp
   3d8c4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d8c8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3d8cc:	add	x3, x3, #0x56
   3d8d0:	add	x1, x1, #0xfff
   3d8d4:	add	x0, x0, #0x98
   3d8d8:	mov	w2, #0xc05                 	// #3077
   3d8dc:	bl	35b10 <__assert_fail@plt>
   3d8e0:	ldr	w4, [x2, #20]
   3d8e4:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d8e8:	add	x2, x2, #0xc1
   3d8ec:	b	3d890 <print_aarch64_disassembler_options@@Base+0x4dc>
   3d8f0:	ldr	w4, [x2, #20]
   3d8f4:	cbz	w4, 3d904 <print_aarch64_disassembler_options@@Base+0x550>
   3d8f8:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d8fc:	add	x2, x2, #0xd3
   3d900:	b	3d890 <print_aarch64_disassembler_options@@Base+0x4dc>
   3d904:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3d908:	add	x2, x2, #0xdd
   3d90c:	b	3d878 <print_aarch64_disassembler_options@@Base+0x4c4>
   3d910:	mov	x2, x0
   3d914:	stp	x29, x30, [sp, #-16]!
   3d918:	mov	w0, w1
   3d91c:	mov	x29, sp
   3d920:	ldr	x1, [x2, #8]
   3d924:	cbnz	x1, 3d94c <print_aarch64_disassembler_options@@Base+0x598>
   3d928:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d92c:	add	x3, x3, #0x710
   3d930:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d934:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3d938:	add	x3, x3, #0x75
   3d93c:	add	x1, x1, #0xfff
   3d940:	add	x0, x0, #0xe2
   3d944:	mov	w2, #0x12b7                	// #4791
   3d948:	bl	35b10 <__assert_fail@plt>
   3d94c:	ldr	w1, [x1, #40]
   3d950:	cmp	w1, #0x21
   3d954:	b.eq	3d97c <print_aarch64_disassembler_options@@Base+0x5c8>  // b.none
   3d958:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d95c:	add	x3, x3, #0x710
   3d960:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d964:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3d968:	add	x3, x3, #0x75
   3d96c:	add	x1, x1, #0xfff
   3d970:	add	x0, x0, #0xef
   3d974:	mov	w2, #0x12b8                	// #4792
   3d978:	b	3d948 <print_aarch64_disassembler_options@@Base+0x594>
   3d97c:	cbz	w3, 3d984 <print_aarch64_disassembler_options@@Base+0x5d0>
   3d980:	ldr	w0, [x2]
   3d984:	cbnz	w0, 3d9ac <print_aarch64_disassembler_options@@Base+0x5f8>
   3d988:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3d98c:	add	x3, x3, #0x710
   3d990:	adrp	x1, 53000 <xexit@@Base+0x508>
   3d994:	adrp	x0, 53000 <xexit@@Base+0x508>
   3d998:	add	x3, x3, #0x75
   3d99c:	add	x1, x1, #0xfff
   3d9a0:	add	x0, x0, #0x5e1
   3d9a4:	mov	w2, #0x12ba                	// #4794
   3d9a8:	b	3d948 <print_aarch64_disassembler_options@@Base+0x594>
   3d9ac:	mov	w4, #0x3e                  	// #62
   3d9b0:	mov	w3, #0x7d                  	// #125
   3d9b4:	mov	w2, #0x2                   	// #2
   3d9b8:	mov	w1, #0x0                   	// #0
   3d9bc:	bl	353d0 <extract_fields@plt>
   3d9c0:	cmp	w0, #0x3
   3d9c4:	cset	w0, eq  // eq = none
   3d9c8:	ldp	x29, x30, [sp], #16
   3d9cc:	ret
   3d9d0:	cbz	x0, 3da28 <print_aarch64_disassembler_options@@Base+0x674>
   3d9d4:	stp	x29, x30, [sp, #-48]!
   3d9d8:	mov	x29, sp
   3d9dc:	stp	x19, x20, [sp, #16]
   3d9e0:	mov	x19, x0
   3d9e4:	mov	w20, w2
   3d9e8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3d9ec:	mov	w2, #0x5                   	// #5
   3d9f0:	add	x0, x0, #0xb4a
   3d9f4:	str	x21, [sp, #32]
   3d9f8:	mov	w21, w1
   3d9fc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3da00:	add	x1, x1, #0xa41
   3da04:	bl	35a30 <dcgettext@plt>
   3da08:	mov	w1, #0x6                   	// #6
   3da0c:	stp	w1, w21, [x19]
   3da10:	str	x0, [x19, #8]
   3da14:	stp	wzr, w20, [x19, #16]
   3da18:	ldp	x19, x20, [sp, #16]
   3da1c:	ldr	x21, [sp, #32]
   3da20:	ldp	x29, x30, [sp], #48
   3da24:	ret
   3da28:	ret
   3da2c:	cbz	x0, 3da84 <print_aarch64_disassembler_options@@Base+0x6d0>
   3da30:	stp	x29, x30, [sp, #-48]!
   3da34:	mov	x29, sp
   3da38:	stp	x19, x20, [sp, #16]
   3da3c:	mov	x19, x0
   3da40:	mov	w20, w2
   3da44:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3da48:	mov	w2, #0x5                   	// #5
   3da4c:	add	x0, x0, #0xb4a
   3da50:	str	x21, [sp, #32]
   3da54:	mov	w21, w1
   3da58:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3da5c:	add	x1, x1, #0x11c
   3da60:	bl	35a30 <dcgettext@plt>
   3da64:	mov	w1, #0x6                   	// #6
   3da68:	stp	w1, w21, [x19]
   3da6c:	str	x0, [x19, #8]
   3da70:	stp	wzr, w20, [x19, #16]
   3da74:	ldp	x19, x20, [sp, #16]
   3da78:	ldr	x21, [sp, #32]
   3da7c:	ldp	x29, x30, [sp], #48
   3da80:	ret
   3da84:	ret

000000000003da88 <aarch64_get_operand_class@@Base>:
   3da88:	mov	w0, w0
   3da8c:	mov	x1, #0x30                  	// #48
   3da90:	mul	x0, x0, x1
   3da94:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3da98:	ldr	x1, [x1, #4032]
   3da9c:	ldr	w0, [x1, x0]
   3daa0:	ret

000000000003daa4 <aarch64_get_operand_name@@Base>:
   3daa4:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3daa8:	mov	w0, w0
   3daac:	mov	x2, #0x30                  	// #48
   3dab0:	ldr	x1, [x1, #4032]
   3dab4:	madd	x0, x0, x2, x1
   3dab8:	ldr	x0, [x0, #8]
   3dabc:	ret

000000000003dac0 <aarch64_get_operand_desc@@Base>:
   3dac0:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3dac4:	mov	w0, w0
   3dac8:	mov	x2, #0x30                  	// #48
   3dacc:	ldr	x1, [x1, #4032]
   3dad0:	madd	x0, x0, x2, x1
   3dad4:	ldr	x0, [x0, #40]
   3dad8:	ret

000000000003dadc <get_cond_from_value@@Base>:
   3dadc:	cmp	w0, #0xf
   3dae0:	b.ls	3db10 <get_cond_from_value@@Base+0x34>  // b.plast
   3dae4:	stp	x29, x30, [sp, #-16]!
   3dae8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3daec:	add	x3, x3, #0x710
   3daf0:	mov	x29, sp
   3daf4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3daf8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3dafc:	add	x3, x3, #0x84
   3db00:	add	x1, x1, #0xfff
   3db04:	add	x0, x0, #0x133
   3db08:	mov	w2, #0x178                 	// #376
   3db0c:	bl	35b10 <__assert_fail@plt>
   3db10:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3db14:	mov	w2, #0x28                  	// #40
   3db18:	ldr	x1, [x1, #4000]
   3db1c:	umaddl	x0, w0, w2, x1
   3db20:	ret

000000000003db24 <get_inverted_cond@@Base>:
   3db24:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3db28:	ldr	w0, [x0, #32]
   3db2c:	mov	w2, #0x28                  	// #40
   3db30:	ldr	x1, [x1, #4000]
   3db34:	eor	w0, w0, #0x1
   3db38:	umaddl	x0, w0, w2, x1
   3db3c:	ret

000000000003db40 <aarch64_get_operand_modifier@@Base>:
   3db40:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3db44:	ldr	x1, [x1, #3904]
   3db48:	sub	x0, x0, x1
   3db4c:	ubfx	x0, x0, #4, #32
   3db50:	ret

000000000003db54 <aarch64_get_operand_modifier_value@@Base>:
   3db54:	ubfiz	x1, x0, #4, #32
   3db58:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3db5c:	ldr	x0, [x0, #3904]
   3db60:	add	x0, x0, x1
   3db64:	ldr	w0, [x0, #8]
   3db68:	ret

000000000003db6c <aarch64_get_operand_modifier_from_value@@Base>:
   3db6c:	add	w3, w0, #0x6
   3db70:	cmp	w1, #0x1
   3db74:	mov	w2, #0x5                   	// #5
   3db78:	sub	w0, w2, w0
   3db7c:	csel	w0, w0, w3, ne  // ne = any
   3db80:	ret

000000000003db84 <aarch64_extend_operator_p@@Base>:
   3db84:	sub	w0, w0, #0x6
   3db88:	cmp	w0, #0x7
   3db8c:	cset	w0, ls  // ls = plast
   3db90:	ret

000000000003db94 <aarch64_stack_pointer_p@@Base>:
   3db94:	stp	x29, x30, [sp, #-32]!
   3db98:	mov	x29, sp
   3db9c:	str	x19, [sp, #16]
   3dba0:	mov	x19, x0
   3dba4:	ldr	w0, [x0]
   3dba8:	bl	35760 <aarch64_get_operand_class@plt>
   3dbac:	cmp	w0, #0x1
   3dbb0:	b.ne	3dbec <aarch64_stack_pointer_p@@Base+0x58>  // b.any
   3dbb4:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3dbb8:	ldr	w0, [x19]
   3dbbc:	mov	x2, #0x30                  	// #48
   3dbc0:	ldr	x1, [x1, #4032]
   3dbc4:	madd	x0, x0, x2, x1
   3dbc8:	ldr	w1, [x0, #16]
   3dbcc:	ubfx	x0, x1, #4, #1
   3dbd0:	tbz	w1, #4, 3dbe0 <aarch64_stack_pointer_p@@Base+0x4c>
   3dbd4:	ldr	w0, [x19, #16]
   3dbd8:	cmp	w0, #0x1f
   3dbdc:	cset	w0, eq  // eq = none
   3dbe0:	ldr	x19, [sp, #16]
   3dbe4:	ldp	x29, x30, [sp], #32
   3dbe8:	ret
   3dbec:	mov	w0, #0x0                   	// #0
   3dbf0:	b	3dbe0 <aarch64_stack_pointer_p@@Base+0x4c>

000000000003dbf4 <aarch64_zero_register_p@@Base>:
   3dbf4:	stp	x29, x30, [sp, #-32]!
   3dbf8:	mov	x29, sp
   3dbfc:	str	x19, [sp, #16]
   3dc00:	mov	x19, x0
   3dc04:	ldr	w0, [x0]
   3dc08:	bl	35760 <aarch64_get_operand_class@plt>
   3dc0c:	cmp	w0, #0x1
   3dc10:	b.ne	3dc48 <aarch64_zero_register_p@@Base+0x54>  // b.any
   3dc14:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3dc18:	ldr	w0, [x19]
   3dc1c:	mov	x2, #0x30                  	// #48
   3dc20:	ldr	x1, [x1, #4032]
   3dc24:	madd	x0, x0, x2, x1
   3dc28:	ldr	w0, [x0, #16]
   3dc2c:	tbnz	w0, #4, 3dc48 <aarch64_zero_register_p@@Base+0x54>
   3dc30:	ldr	w0, [x19, #16]
   3dc34:	cmp	w0, #0x1f
   3dc38:	cset	w0, eq  // eq = none
   3dc3c:	ldr	x19, [sp, #16]
   3dc40:	ldp	x29, x30, [sp], #32
   3dc44:	ret
   3dc48:	mov	w0, #0x0                   	// #0
   3dc4c:	b	3dc3c <aarch64_zero_register_p@@Base+0x48>

000000000003dc50 <aarch64_get_expected_qualifier@@Base>:
   3dc50:	ands	w2, w2, #0xff
   3dc54:	sxtw	x3, w3
   3dc58:	b.ne	3dc90 <aarch64_get_expected_qualifier@@Base+0x40>  // b.any
   3dc5c:	ldrb	w2, [x0, x3]
   3dc60:	cbz	w2, 3dcd0 <aarch64_get_expected_qualifier@@Base+0x80>
   3dc64:	stp	x29, x30, [sp, #-16]!
   3dc68:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3dc6c:	add	x3, x3, #0x710
   3dc70:	mov	x29, sp
   3dc74:	adrp	x1, 53000 <xexit@@Base+0x508>
   3dc78:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3dc7c:	add	x3, x3, #0x98
   3dc80:	add	x1, x1, #0xfff
   3dc84:	add	x0, x0, #0x13e
   3dc88:	mov	w2, #0x28f                 	// #655
   3dc8c:	bl	35b10 <__assert_fail@plt>
   3dc90:	add	x3, x0, x3
   3dc94:	mov	x5, #0x0                   	// #0
   3dc98:	mov	w4, #0xffffffff            	// #-1
   3dc9c:	mov	x6, #0x6                   	// #6
   3dca0:	mul	x7, x5, x6
   3dca4:	ldrb	w7, [x3, x7]
   3dca8:	cmp	w7, w2
   3dcac:	b.ne	3dcbc <aarch64_get_expected_qualifier@@Base+0x6c>  // b.any
   3dcb0:	cmn	w4, #0x1
   3dcb4:	b.ne	3dcd8 <aarch64_get_expected_qualifier@@Base+0x88>  // b.any
   3dcb8:	mov	w4, w5
   3dcbc:	add	x5, x5, #0x1
   3dcc0:	cmp	x5, #0xa
   3dcc4:	b.ne	3dca0 <aarch64_get_expected_qualifier@@Base+0x50>  // b.any
   3dcc8:	mov	w2, #0x6                   	// #6
   3dccc:	smaddl	x0, w4, w2, x0
   3dcd0:	ldrb	w0, [x0, w1, sxtw]
   3dcd4:	ret
   3dcd8:	mov	w0, #0x0                   	// #0
   3dcdc:	ret

000000000003dce0 <aarch64_get_qualifier_name@@Base>:
   3dce0:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3dce4:	ubfiz	x0, x0, #5, #8
   3dce8:	ldr	x1, [x1, #3776]
   3dcec:	add	x1, x1, x0
   3dcf0:	ldr	x0, [x1, #16]
   3dcf4:	ret
   3dcf8:	sub	sp, sp, #0xb0
   3dcfc:	stp	x29, x30, [sp, #64]
   3dd00:	add	x29, sp, #0x40
   3dd04:	stp	x19, x20, [sp, #80]
   3dd08:	mov	x20, x3
   3dd0c:	ldrb	w19, [x2, #16]
   3dd10:	stp	x21, x22, [sp, #96]
   3dd14:	mov	x22, x0
   3dd18:	mov	x21, x2
   3dd1c:	stp	x23, x24, [sp, #112]
   3dd20:	mov	x23, x1
   3dd24:	stp	x25, x26, [sp, #128]
   3dd28:	ubfx	x26, x19, #5, #3
   3dd2c:	and	w19, w19, #0x1f
   3dd30:	ldrb	w0, [x2, #4]
   3dd34:	add	w24, w26, w19
   3dd38:	sub	w24, w24, #0x1
   3dd3c:	and	w24, w24, #0x1f
   3dd40:	bl	35430 <aarch64_get_qualifier_name@plt>
   3dd44:	mov	x5, x0
   3dd48:	ldr	w0, [x21]
   3dd4c:	cmp	w0, #0x26
   3dd50:	b.ne	3dd80 <aarch64_get_qualifier_name@@Base+0xa0>  // b.any
   3dd54:	ldrb	w0, [x21, #17]
   3dd58:	tbnz	w0, #0, 3dd80 <aarch64_get_qualifier_name@@Base+0xa0>
   3dd5c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3dd60:	add	x3, x3, #0x710
   3dd64:	adrp	x1, 53000 <xexit@@Base+0x508>
   3dd68:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3dd6c:	add	x3, x3, #0xb7
   3dd70:	add	x1, x1, #0xfff
   3dd74:	add	x0, x0, #0x16a
   3dd78:	mov	w2, #0xbbf                 	// #3007
   3dd7c:	bl	35b10 <__assert_fail@plt>
   3dd80:	sub	w25, w26, #0x1
   3dd84:	cmp	w25, #0x3
   3dd88:	b.ls	3ddb0 <aarch64_get_qualifier_name@@Base+0xd0>  // b.plast
   3dd8c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3dd90:	add	x3, x3, #0x710
   3dd94:	adrp	x1, 53000 <xexit@@Base+0x508>
   3dd98:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3dd9c:	add	x3, x3, #0xb7
   3dda0:	add	x1, x1, #0xfff
   3dda4:	add	x0, x0, #0x1a4
   3dda8:	mov	w2, #0xbc0                 	// #3008
   3ddac:	b	3dd7c <aarch64_get_qualifier_name@@Base+0x9c>
   3ddb0:	ldrb	w0, [x21, #17]
   3ddb4:	tbz	w0, #0, 3de20 <aarch64_get_qualifier_name@@Base+0x140>
   3ddb8:	ldr	x1, [x21, #24]
   3ddbc:	mov	x0, #0x64                  	// #100
   3ddc0:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ddc4:	add	x2, x2, #0x3d1
   3ddc8:	str	x5, [sp, #152]
   3ddcc:	sdiv	x3, x1, x0
   3ddd0:	msub	x3, x3, x0, x1
   3ddd4:	add	x0, sp, #0xa8
   3ddd8:	mov	x1, #0x8                   	// #8
   3dddc:	bl	353c0 <snprintf@plt>
   3dde0:	ldr	x5, [sp, #152]
   3dde4:	cmp	w26, #0x2
   3dde8:	ccmp	w19, w24, #0x0, gt
   3ddec:	b.ge	3de28 <aarch64_get_qualifier_name@@Base+0x148>  // b.tcont
   3ddf0:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ddf4:	mov	w7, w24
   3ddf8:	mov	x6, x20
   3ddfc:	mov	w4, w19
   3de00:	mov	x3, x20
   3de04:	add	x2, x2, #0x1c3
   3de08:	add	x0, sp, #0xa8
   3de0c:	stp	x5, x0, [sp]
   3de10:	mov	x1, x23
   3de14:	mov	x0, x22
   3de18:	bl	353c0 <snprintf@plt>
   3de1c:	b	3de78 <aarch64_get_qualifier_name@@Base+0x198>
   3de20:	strb	wzr, [sp, #168]
   3de24:	b	3dde4 <aarch64_get_qualifier_name@@Base+0x104>
   3de28:	add	w7, w19, #0x1
   3de2c:	add	w0, w19, #0x2
   3de30:	and	w7, w7, #0x1f
   3de34:	and	w0, w0, #0x1f
   3de38:	cmp	w25, #0x3
   3de3c:	b.hi	3de78 <aarch64_get_qualifier_name@@Base+0x198>  // b.pmore
   3de40:	adrp	x1, 58000 <xexit@@Base+0x5508>
   3de44:	add	x6, sp, #0xa8
   3de48:	add	x1, x1, #0x3c8
   3de4c:	ldrb	w1, [x1, w25, uxtw]
   3de50:	adr	x2, 3de5c <aarch64_get_qualifier_name@@Base+0x17c>
   3de54:	add	x1, x2, w1, sxtb #2
   3de58:	br	x1
   3de5c:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3de60:	mov	w4, w19
   3de64:	mov	x3, x20
   3de68:	add	x2, x2, #0x1d7
   3de6c:	mov	x1, x23
   3de70:	mov	x0, x22
   3de74:	bl	353c0 <snprintf@plt>
   3de78:	ldp	x29, x30, [sp, #64]
   3de7c:	ldp	x19, x20, [sp, #80]
   3de80:	ldp	x21, x22, [sp, #96]
   3de84:	ldp	x23, x24, [sp, #112]
   3de88:	ldp	x25, x26, [sp, #128]
   3de8c:	add	sp, sp, #0xb0
   3de90:	ret
   3de94:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3de98:	mov	w4, w19
   3de9c:	add	x2, x2, #0x1e3
   3dea0:	mov	x3, x20
   3dea4:	stp	x5, x6, [sp]
   3dea8:	mov	x6, x20
   3deac:	b	3de10 <aarch64_get_qualifier_name@@Base+0x130>
   3deb0:	stp	x5, x20, [sp]
   3deb4:	mov	w4, w19
   3deb8:	mov	x1, x23
   3debc:	str	w0, [sp, #16]
   3dec0:	mov	x3, x20
   3dec4:	stp	x5, x6, [sp, #24]
   3dec8:	mov	x0, x22
   3decc:	mov	x6, x20
   3ded0:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ded4:	add	x2, x2, #0x1f8
   3ded8:	bl	353c0 <snprintf@plt>
   3dedc:	b	3de78 <aarch64_get_qualifier_name@@Base+0x198>
   3dee0:	add	w1, w19, #0x3
   3dee4:	stp	x5, x20, [sp]
   3dee8:	and	w1, w1, #0x1f
   3deec:	str	w0, [sp, #16]
   3def0:	mov	w4, w19
   3def4:	stp	x5, x20, [sp, #24]
   3def8:	mov	x3, x20
   3defc:	mov	x0, x22
   3df00:	str	w1, [sp, #40]
   3df04:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3df08:	stp	x5, x6, [sp, #48]
   3df0c:	add	x2, x2, #0x216
   3df10:	mov	x6, x20
   3df14:	mov	x1, x23
   3df18:	bl	353c0 <snprintf@plt>
   3df1c:	b	3de78 <aarch64_get_qualifier_name@@Base+0x198>

000000000003df20 <aarch64_get_qualifier_esize@@Base>:
   3df20:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3df24:	ubfiz	x0, x0, #5, #8
   3df28:	ldr	x1, [x1, #3776]
   3df2c:	add	x2, x1, x0
   3df30:	ldr	w2, [x2, #24]
   3df34:	cmp	w2, #0x1
   3df38:	b.eq	3df68 <aarch64_get_qualifier_esize@@Base+0x48>  // b.none
   3df3c:	stp	x29, x30, [sp, #-16]!
   3df40:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3df44:	add	x3, x3, #0x710
   3df48:	mov	x29, sp
   3df4c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3df50:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3df54:	add	x3, x3, #0xcb
   3df58:	add	x1, x1, #0xfff
   3df5c:	add	x0, x0, #0x23d
   3df60:	mov	w2, #0x30e                 	// #782
   3df64:	bl	35b10 <__assert_fail@plt>
   3df68:	ldrb	w0, [x1, x0]
   3df6c:	ret

000000000003df70 <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   3df70:	stp	x29, x30, [sp, #-32]!
   3df74:	mov	x29, sp
   3df78:	stp	x19, x20, [sp, #16]
   3df7c:	mov	x19, x0
   3df80:	ldrb	w1, [x0, #56]
   3df84:	sub	w0, w1, #0xd
   3df88:	cmp	w0, #0x9
   3df8c:	b.hi	3e0b8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x148>  // b.pmore
   3df90:	ldrb	w0, [x19, #57]
   3df94:	cmp	w0, w1
   3df98:	b.eq	3dfe4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x74>  // b.none
   3df9c:	ldrb	w0, [x19, #57]
   3dfa0:	sub	w0, w0, #0xd
   3dfa4:	cmp	w0, #0x9
   3dfa8:	b.hi	3e030 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xc0>  // b.pmore
   3dfac:	ldrb	w0, [x19, #56]
   3dfb0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3dfb4:	tst	w0, #0xff
   3dfb8:	b.eq	3e030 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xc0>  // b.none
   3dfbc:	ldrb	w0, [x19, #56]
   3dfc0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3dfc4:	and	w20, w0, #0xff
   3dfc8:	ldrb	w0, [x19, #57]
   3dfcc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3dfd0:	ubfiz	w0, w0, #1, #8
   3dfd4:	cmp	w20, w0
   3dfd8:	b.ne	3e030 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xc0>  // b.any
   3dfdc:	mov	x0, #0x2                   	// #2
   3dfe0:	b	3e09c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x12c>
   3dfe4:	ldrb	w1, [x19, #58]
   3dfe8:	sub	w1, w1, #0xd
   3dfec:	cmp	w1, #0x9
   3dff0:	b.hi	3df9c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x2c>  // b.pmore
   3dff4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3dff8:	and	w20, w0, #0xff
   3dffc:	ldrb	w0, [x19, #57]
   3e000:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e004:	cmp	w20, w0, uxtb
   3e008:	b.ne	3df9c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x2c>  // b.any
   3e00c:	ldrb	w0, [x19, #56]
   3e010:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e014:	and	w20, w0, #0xff
   3e018:	ldrb	w0, [x19, #58]
   3e01c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e020:	cmp	w20, w0, uxtb
   3e024:	b.ne	3df9c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x2c>  // b.any
   3e028:	mov	x0, #0x1                   	// #1
   3e02c:	b	3e09c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x12c>
   3e030:	ldrb	w1, [x19, #56]
   3e034:	ldrb	w0, [x19, #57]
   3e038:	cmp	w0, w1
   3e03c:	b.ne	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.any
   3e040:	ldrb	w1, [x19, #58]
   3e044:	sub	w1, w1, #0xd
   3e048:	cmp	w1, #0x9
   3e04c:	b.hi	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.pmore
   3e050:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e054:	tst	w0, #0xff
   3e058:	b.eq	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.none
   3e05c:	ldrb	w0, [x19, #56]
   3e060:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e064:	and	w20, w0, #0xff
   3e068:	ldrb	w0, [x19, #58]
   3e06c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e070:	ubfiz	w0, w0, #1, #8
   3e074:	cmp	w20, w0
   3e078:	b.ne	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.any
   3e07c:	ldrb	w0, [x19, #56]
   3e080:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e084:	and	w20, w0, #0xff
   3e088:	ldrb	w0, [x19, #57]
   3e08c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e090:	cmp	w20, w0, uxtb
   3e094:	b.eq	3e0e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x174>  // b.none
   3e098:	mov	x0, #0x0                   	// #0
   3e09c:	adrp	x1, 58000 <xexit@@Base+0x5508>
   3e0a0:	add	x1, x1, #0x710
   3e0a4:	add	x1, x1, #0xe7
   3e0a8:	ldp	x19, x20, [sp, #16]
   3e0ac:	ldrb	w0, [x1, x0]
   3e0b0:	ldp	x29, x30, [sp], #32
   3e0b4:	ret
   3e0b8:	sub	w1, w1, #0x5
   3e0bc:	cmp	w1, #0x4
   3e0c0:	b.hi	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.pmore
   3e0c4:	ldrb	w0, [x19, #57]
   3e0c8:	sub	w0, w0, #0xd
   3e0cc:	cmp	w0, #0x9
   3e0d0:	b.hi	3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>  // b.pmore
   3e0d4:	ldrb	w0, [x19, #58]
   3e0d8:	cbnz	w0, 3e098 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x128>
   3e0dc:	mov	x0, #0x4                   	// #4
   3e0e0:	b	3e09c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x12c>
   3e0e4:	mov	x0, #0x3                   	// #3
   3e0e8:	b	3e09c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x12c>

000000000003e0ec <aarch64_get_qualifier_nelem@@Base>:
   3e0ec:	ubfiz	x1, x0, #5, #8
   3e0f0:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3e0f4:	ldr	x0, [x0, #3776]
   3e0f8:	add	x0, x0, x1
   3e0fc:	ldr	w1, [x0, #24]
   3e100:	cmp	w1, #0x1
   3e104:	b.eq	3e134 <aarch64_get_qualifier_nelem@@Base+0x48>  // b.none
   3e108:	stp	x29, x30, [sp, #-16]!
   3e10c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e110:	add	x3, x3, #0x710
   3e114:	mov	x29, sp
   3e118:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e11c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e120:	add	x3, x3, #0xec
   3e124:	add	x1, x1, #0xfff
   3e128:	add	x0, x0, #0x23d
   3e12c:	mov	w2, #0x315                 	// #789
   3e130:	bl	35b10 <__assert_fail@plt>
   3e134:	ldrb	w0, [x0, #4]
   3e138:	ret

000000000003e13c <aarch64_get_qualifier_standard_value@@Base>:
   3e13c:	ubfiz	x1, x0, #5, #8
   3e140:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3e144:	ldr	x0, [x0, #3776]
   3e148:	add	x0, x0, x1
   3e14c:	ldr	w1, [x0, #24]
   3e150:	cmp	w1, #0x1
   3e154:	b.eq	3e184 <aarch64_get_qualifier_standard_value@@Base+0x48>  // b.none
   3e158:	stp	x29, x30, [sp, #-16]!
   3e15c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e160:	add	x3, x3, #0x710
   3e164:	mov	x29, sp
   3e168:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e16c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e170:	add	x3, x3, #0x108
   3e174:	add	x1, x1, #0xfff
   3e178:	add	x0, x0, #0x23d
   3e17c:	mov	w2, #0x31c                 	// #796
   3e180:	bl	35b10 <__assert_fail@plt>
   3e184:	ldr	w0, [x0, #8]
   3e188:	ret

000000000003e18c <aarch64_is_destructive_by_operands@@Base>:
   3e18c:	ldr	w2, [x0, #32]
   3e190:	cbz	w2, 3e1a0 <aarch64_is_destructive_by_operands@@Base+0x14>
   3e194:	add	x0, x0, #0x24
   3e198:	ldr	w1, [x0]
   3e19c:	cbnz	w1, 3e1a8 <aarch64_is_destructive_by_operands@@Base+0x1c>
   3e1a0:	mov	w0, #0x0                   	// #0
   3e1a4:	ret
   3e1a8:	add	x0, x0, #0x4
   3e1ac:	cmp	w2, w1
   3e1b0:	b.ne	3e198 <aarch64_is_destructive_by_operands@@Base+0xc>  // b.any
   3e1b4:	mov	w0, #0x1                   	// #1
   3e1b8:	b	3e1a4 <aarch64_is_destructive_by_operands@@Base+0x18>

000000000003e1bc <aarch64_num_of_operands@@Base>:
   3e1bc:	add	x2, x0, #0x1c
   3e1c0:	mov	x1, #0x0                   	// #0
   3e1c4:	mov	w0, w1
   3e1c8:	add	x1, x1, #0x1
   3e1cc:	ldr	w3, [x2, x1, lsl #2]
   3e1d0:	cbnz	w3, 3e1c4 <aarch64_num_of_operands@@Base+0x8>
   3e1d4:	cmp	w0, #0x6
   3e1d8:	b.le	3e208 <aarch64_num_of_operands@@Base+0x4c>
   3e1dc:	stp	x29, x30, [sp, #-16]!
   3e1e0:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e1e4:	add	x3, x3, #0x710
   3e1e8:	mov	x29, sp
   3e1ec:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e1f0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e1f4:	add	x3, x3, #0x12d
   3e1f8:	add	x1, x1, #0xfff
   3e1fc:	add	x0, x0, #0x26d
   3e200:	mov	w2, #0x372                 	// #882
   3e204:	bl	35b10 <__assert_fail@plt>
   3e208:	ret

000000000003e20c <aarch64_find_best_match@@Base>:
   3e20c:	stp	x29, x30, [sp, #-112]!
   3e210:	mov	x29, sp
   3e214:	stp	x23, x24, [sp, #48]
   3e218:	mov	x24, x0
   3e21c:	mov	x23, x3
   3e220:	ldr	x0, [x0, #8]
   3e224:	stp	x19, x20, [sp, #16]
   3e228:	mov	x20, x1
   3e22c:	mov	w19, w2
   3e230:	stp	x21, x22, [sp, #32]
   3e234:	stp	x25, x26, [sp, #64]
   3e238:	stp	x27, x28, [sp, #80]
   3e23c:	bl	351b0 <aarch64_num_of_operands@plt>
   3e240:	cbnz	w0, 3e264 <aarch64_find_best_match@@Base+0x58>
   3e244:	mov	w0, #0x1                   	// #1
   3e248:	ldp	x19, x20, [sp, #16]
   3e24c:	ldp	x21, x22, [sp, #32]
   3e250:	ldp	x23, x24, [sp, #48]
   3e254:	ldp	x25, x26, [sp, #64]
   3e258:	ldp	x27, x28, [sp, #80]
   3e25c:	ldp	x29, x30, [sp], #112
   3e260:	ret
   3e264:	cmp	w19, #0x0
   3e268:	adrp	x26, 97000 <aarch64_operands@@Base+0x16bc0>
   3e26c:	ccmp	w0, w19, #0x4, ge  // ge = tcont
   3e270:	sub	w2, w0, #0x1
   3e274:	mov	w22, w0
   3e278:	adrp	x25, 58000 <xexit@@Base+0x5508>
   3e27c:	add	x0, x25, #0x3cc
   3e280:	csel	w19, w2, w19, le
   3e284:	str	x0, [sp, #96]
   3e288:	mov	w28, #0x0                   	// #0
   3e28c:	ldr	x0, [x26, #4032]
   3e290:	str	x0, [sp, #104]
   3e294:	mov	x0, #0x0                   	// #0
   3e298:	ldrb	w1, [x20, x0]
   3e29c:	cbz	w1, 3e2e8 <aarch64_find_best_match@@Base+0xdc>
   3e2a0:	add	x21, x24, #0x18
   3e2a4:	mov	x25, #0x0                   	// #0
   3e2a8:	mov	x27, #0x30                  	// #48
   3e2ac:	cmp	w22, w25
   3e2b0:	ccmp	w19, w25, #0x1, gt
   3e2b4:	b.ge	3e2fc <aarch64_find_best_match@@Base+0xf0>  // b.tcont
   3e2b8:	mov	x0, #0x0                   	// #0
   3e2bc:	cmp	w19, w0
   3e2c0:	b.ge	3e3a8 <aarch64_find_best_match@@Base+0x19c>  // b.tcont
   3e2c4:	cmp	w19, #0x0
   3e2c8:	csinv	w19, w19, wzr, ge  // ge = tcont
   3e2cc:	add	w19, w19, #0x1
   3e2d0:	sxtw	x19, w19
   3e2d4:	cmp	w19, #0x5
   3e2d8:	b.gt	3e244 <aarch64_find_best_match@@Base+0x38>
   3e2dc:	strb	wzr, [x23, x19]
   3e2e0:	add	x19, x19, #0x1
   3e2e4:	b	3e2d4 <aarch64_find_best_match@@Base+0xc8>
   3e2e8:	add	x0, x0, #0x1
   3e2ec:	cmp	x0, #0x6
   3e2f0:	b.ne	3e298 <aarch64_find_best_match@@Base+0x8c>  // b.any
   3e2f4:	cbnz	w28, 3e360 <aarch64_find_best_match@@Base+0x154>
   3e2f8:	b	3e2b8 <aarch64_find_best_match@@Base+0xac>
   3e2fc:	ldrb	w0, [x21, #4]
   3e300:	cbnz	w0, 3e310 <aarch64_find_best_match@@Base+0x104>
   3e304:	add	x25, x25, #0x1
   3e308:	add	x21, x21, #0x38
   3e30c:	b	3e2ac <aarch64_find_best_match@@Base+0xa0>
   3e310:	ldrb	w2, [x20, x25]
   3e314:	cmp	w0, w2
   3e318:	b.eq	3e304 <aarch64_find_best_match@@Base+0xf8>  // b.none
   3e31c:	sub	w0, w0, #0x1
   3e320:	cmp	w0, #0x3
   3e324:	b.hi	3e350 <aarch64_find_best_match@@Base+0x144>  // b.pmore
   3e328:	ldr	x1, [sp, #96]
   3e32c:	ldrb	w0, [x1, w0, uxtw]
   3e330:	adr	x1, 3e33c <aarch64_find_best_match@@Base+0x130>
   3e334:	add	x0, x1, w0, sxtb #2
   3e338:	br	x0
   3e33c:	cmp	w2, #0x3
   3e340:	b.ne	3e350 <aarch64_find_best_match@@Base+0x144>  // b.any
   3e344:	mov	x0, x21
   3e348:	bl	35790 <aarch64_stack_pointer_p@plt>
   3e34c:	cbnz	w0, 3e304 <aarch64_find_best_match@@Base+0xf8>
   3e350:	add	w28, w28, #0x1
   3e354:	add	x20, x20, #0x6
   3e358:	cmp	w28, #0xa
   3e35c:	b.ne	3e294 <aarch64_find_best_match@@Base+0x88>  // b.any
   3e360:	mov	w0, #0x0                   	// #0
   3e364:	b	3e248 <aarch64_find_best_match@@Base+0x3c>
   3e368:	cmp	w2, #0x4
   3e36c:	b	3e340 <aarch64_find_best_match@@Base+0x134>
   3e370:	cmp	w2, #0x1
   3e374:	b.ne	3e350 <aarch64_find_best_match@@Base+0x144>  // b.any
   3e378:	ldr	x2, [x26, #4032]
   3e37c:	ldr	w0, [x21]
   3e380:	madd	x0, x0, x27, x2
   3e384:	ldr	w0, [x0, #16]
   3e388:	ubfx	x0, x0, #4, #1
   3e38c:	b	3e34c <aarch64_find_best_match@@Base+0x140>
   3e390:	cmp	w2, #0x2
   3e394:	b.ne	3e350 <aarch64_find_best_match@@Base+0x144>  // b.any
   3e398:	ldr	w0, [x21]
   3e39c:	ldr	x1, [sp, #104]
   3e3a0:	madd	x0, x0, x27, x1
   3e3a4:	b	3e384 <aarch64_find_best_match@@Base+0x178>
   3e3a8:	ldrb	w1, [x20, x0]
   3e3ac:	strb	w1, [x23, x0]
   3e3b0:	add	x0, x0, #0x1
   3e3b4:	b	3e2bc <aarch64_find_best_match@@Base+0xb0>

000000000003e3b8 <aarch64_wide_constant_p@@Base>:
   3e3b8:	mov	x3, x0
   3e3bc:	mov	w0, w1
   3e3c0:	cbz	w1, 3e3dc <aarch64_wide_constant_p@@Base+0x24>
   3e3c4:	lsr	x1, x3, #32
   3e3c8:	mov	x4, #0xffffffff            	// #4294967295
   3e3cc:	cmp	x1, #0x0
   3e3d0:	ccmp	x1, x4, #0x4, ne  // ne = any
   3e3d4:	b.ne	3e42c <aarch64_wide_constant_p@@Base+0x74>  // b.any
   3e3d8:	and	x3, x3, x4
   3e3dc:	tst	x3, #0xffffffffffff0000
   3e3e0:	b.eq	3e414 <aarch64_wide_constant_p@@Base+0x5c>  // b.none
   3e3e4:	tst	x3, #0xffffffff0000ffff
   3e3e8:	b.eq	3e41c <aarch64_wide_constant_p@@Base+0x64>  // b.none
   3e3ec:	cbnz	w0, 3e42c <aarch64_wide_constant_p@@Base+0x74>
   3e3f0:	tst	x3, #0xffff0000ffffffff
   3e3f4:	b.eq	3e424 <aarch64_wide_constant_p@@Base+0x6c>  // b.none
   3e3f8:	tst	x3, #0xffffffffffff
   3e3fc:	b.ne	3e430 <aarch64_wide_constant_p@@Base+0x78>  // b.any
   3e400:	mov	w0, #0x30                  	// #48
   3e404:	cbz	x2, 3e40c <aarch64_wide_constant_p@@Base+0x54>
   3e408:	str	w0, [x2]
   3e40c:	mov	w0, #0x1                   	// #1
   3e410:	b	3e430 <aarch64_wide_constant_p@@Base+0x78>
   3e414:	mov	w0, #0x0                   	// #0
   3e418:	b	3e404 <aarch64_wide_constant_p@@Base+0x4c>
   3e41c:	mov	w0, #0x10                  	// #16
   3e420:	b	3e404 <aarch64_wide_constant_p@@Base+0x4c>
   3e424:	mov	w0, #0x20                  	// #32
   3e428:	b	3e404 <aarch64_wide_constant_p@@Base+0x4c>
   3e42c:	mov	w0, #0x0                   	// #0
   3e430:	ret

000000000003e434 <aarch64_logical_immediate_p@@Base>:
   3e434:	stp	x29, x30, [sp, #-64]!
   3e438:	mov	x29, sp
   3e43c:	stp	x21, x22, [sp, #32]
   3e440:	adrp	x22, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3e444:	mov	x21, x0
   3e448:	ldr	w0, [x22, #1704]
   3e44c:	stp	x19, x20, [sp, #16]
   3e450:	mov	w20, w1
   3e454:	mov	x19, x2
   3e458:	cbnz	w0, 3e5b8 <aarch64_logical_immediate_p@@Base+0x184>
   3e45c:	mov	w4, #0x1                   	// #1
   3e460:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3e464:	adrp	x10, 58000 <xexit@@Base+0x5508>
   3e468:	mov	w12, w4
   3e46c:	add	x14, x0, #0x6b0
   3e470:	add	x10, x10, #0x3d0
   3e474:	mov	w2, #0x0                   	// #0
   3e478:	mov	x13, #0x1                   	// #1
   3e47c:	mov	w15, #0x6                   	// #6
   3e480:	mov	w1, w4
   3e484:	lsl	w6, w12, w4
   3e488:	cmp	w1, #0x6
   3e48c:	add	w4, w4, #0x1
   3e490:	b.eq	3e504 <aarch64_logical_immediate_p@@Base+0xd0>  // b.none
   3e494:	sub	w3, w15, w4
   3e498:	lsl	x7, x13, x6
   3e49c:	sub	x7, x7, #0x1
   3e4a0:	mov	w5, #0x0                   	// #0
   3e4a4:	lsl	w3, w12, w3
   3e4a8:	sub	w3, w3, #0x1
   3e4ac:	lsl	w3, w3, w4
   3e4b0:	add	x9, x14, w2, sxtw #4
   3e4b4:	sub	w1, w1, #0x2
   3e4b8:	sub	w17, w6, #0x1
   3e4bc:	orr	w8, w3, w5, lsl #12
   3e4c0:	mov	w16, #0x0                   	// #0
   3e4c4:	mov	w5, #0x0                   	// #0
   3e4c8:	add	w11, w16, #0x1
   3e4cc:	lsl	x3, x13, x11
   3e4d0:	sub	x3, x3, #0x1
   3e4d4:	cbz	w5, 3e4ec <aarch64_logical_immediate_p@@Base+0xb8>
   3e4d8:	sub	w30, w6, w5
   3e4dc:	lsr	x18, x3, x5
   3e4e0:	lsl	x3, x3, x30
   3e4e4:	and	x3, x3, x7
   3e4e8:	orr	x3, x18, x3
   3e4ec:	cmp	w1, #0x4
   3e4f0:	b.hi	3e524 <aarch64_logical_immediate_p@@Base+0xf0>  // b.pmore
   3e4f4:	ldrb	w18, [x10, w1, uxtw]
   3e4f8:	adr	x30, 3e504 <aarch64_logical_immediate_p@@Base+0xd0>
   3e4fc:	add	x18, x30, w18, sxtb #2
   3e500:	br	x18
   3e504:	mov	w5, #0x1                   	// #1
   3e508:	mov	x7, #0xffffffffffffffff    	// #-1
   3e50c:	mov	w3, #0x0                   	// #0
   3e510:	b	3e4b0 <aarch64_logical_immediate_p@@Base+0x7c>
   3e514:	mov	w16, w11
   3e518:	mov	w5, #0x0                   	// #0
   3e51c:	add	x9, x9, #0x10
   3e520:	b	3e4c8 <aarch64_logical_immediate_p@@Base+0x94>
   3e524:	orr	x3, x3, x3, lsl #2
   3e528:	orr	x3, x3, x3, lsl #4
   3e52c:	orr	x3, x3, x3, lsl #8
   3e530:	orr	x3, x3, x3, lsl #16
   3e534:	orr	x3, x3, x3, lsl #32
   3e538:	str	x3, [x9]
   3e53c:	orr	w3, w8, w16
   3e540:	orr	w3, w3, w5, lsl #6
   3e544:	str	w3, [x9, #8]
   3e548:	add	w5, w5, #0x1
   3e54c:	add	w2, w2, #0x1
   3e550:	cmp	w6, w5
   3e554:	b.hi	3e51c <aarch64_logical_immediate_p@@Base+0xe8>  // b.pmore
   3e558:	cmp	w11, w17
   3e55c:	b.cc	3e514 <aarch64_logical_immediate_p@@Base+0xe0>  // b.lo, b.ul, b.last
   3e560:	cmp	w4, #0x7
   3e564:	b.ne	3e480 <aarch64_logical_immediate_p@@Base+0x4c>  // b.any
   3e568:	mov	w1, #0x14d6                	// #5334
   3e56c:	cmp	w2, w1
   3e570:	b.eq	3e598 <aarch64_logical_immediate_p@@Base+0x164>  // b.none
   3e574:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e578:	add	x3, x3, #0x710
   3e57c:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e580:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e584:	add	x3, x3, #0x145
   3e588:	add	x1, x1, #0xfff
   3e58c:	add	x0, x0, #0x291
   3e590:	mov	w2, #0x4c9                 	// #1225
   3e594:	bl	35b10 <__assert_fail@plt>
   3e598:	add	x0, x0, #0x6b0
   3e59c:	adrp	x3, 3d000 <print_insn_aarch64@@Base+0x6c>
   3e5a0:	mov	x2, #0x10                  	// #16
   3e5a4:	add	x3, x3, #0x494
   3e5a8:	mov	x1, #0x14d6                	// #5334
   3e5ac:	bl	352b0 <qsort@plt>
   3e5b0:	mov	w0, #0x1                   	// #1
   3e5b4:	str	w0, [x22, #1704]
   3e5b8:	lsl	w0, w20, #2
   3e5bc:	mov	x1, #0xffffffffffffffff    	// #-1
   3e5c0:	lsl	x1, x1, x0
   3e5c4:	lsl	x1, x1, x0
   3e5c8:	bic	x0, x21, x1
   3e5cc:	tst	x1, x21
   3e5d0:	b.eq	3e5f0 <aarch64_logical_immediate_p@@Base+0x1bc>  // b.none
   3e5d4:	bics	xzr, x1, x21
   3e5d8:	b.eq	3e5f0 <aarch64_logical_immediate_p@@Base+0x1bc>  // b.none
   3e5dc:	mov	w0, #0x0                   	// #0
   3e5e0:	ldp	x19, x20, [sp, #16]
   3e5e4:	ldp	x21, x22, [sp, #32]
   3e5e8:	ldp	x29, x30, [sp], #64
   3e5ec:	ret
   3e5f0:	lsl	w1, w20, #3
   3e5f4:	cmp	w1, #0x3f
   3e5f8:	b.le	3e638 <aarch64_logical_immediate_p@@Base+0x204>
   3e5fc:	adrp	x4, 3d000 <print_insn_aarch64@@Base+0x6c>
   3e600:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   3e604:	add	x4, x4, #0x494
   3e608:	add	x1, x1, #0x6b0
   3e60c:	mov	x3, #0x10                  	// #16
   3e610:	mov	x2, #0x14d6                	// #5334
   3e614:	str	x0, [sp, #48]
   3e618:	add	x0, sp, #0x30
   3e61c:	bl	355c0 <bsearch@plt>
   3e620:	cbz	x0, 3e5dc <aarch64_logical_immediate_p@@Base+0x1a8>
   3e624:	cbz	x19, 3e630 <aarch64_logical_immediate_p@@Base+0x1fc>
   3e628:	ldr	w0, [x0, #8]
   3e62c:	str	w0, [x19]
   3e630:	mov	w0, #0x1                   	// #1
   3e634:	b	3e5e0 <aarch64_logical_immediate_p@@Base+0x1ac>
   3e638:	lsl	x2, x0, x1
   3e63c:	lsl	w1, w1, #1
   3e640:	orr	x0, x0, x2
   3e644:	b	3e5f4 <aarch64_logical_immediate_p@@Base+0x1c0>

000000000003e648 <aarch64_shrink_expanded_imm8@@Base>:
   3e648:	mov	x3, x0
   3e64c:	mov	w2, #0x0                   	// #0
   3e650:	mov	w0, #0x0                   	// #0
   3e654:	mov	w4, #0x1                   	// #1
   3e658:	lsl	w1, w2, #3
   3e65c:	lsr	x1, x3, x1
   3e660:	and	w1, w1, #0xff
   3e664:	cmp	w1, #0xff
   3e668:	b.ne	3e684 <aarch64_shrink_expanded_imm8@@Base+0x3c>  // b.any
   3e66c:	lsl	w1, w4, w2
   3e670:	orr	w0, w0, w1
   3e674:	add	w2, w2, #0x1
   3e678:	cmp	w2, #0x8
   3e67c:	b.ne	3e658 <aarch64_shrink_expanded_imm8@@Base+0x10>  // b.any
   3e680:	ret
   3e684:	cbz	w1, 3e674 <aarch64_shrink_expanded_imm8@@Base+0x2c>
   3e688:	mov	w0, #0xffffffff            	// #-1
   3e68c:	b	3e680 <aarch64_shrink_expanded_imm8@@Base+0x38>

000000000003e690 <aarch64_replace_opcode@@Base>:
   3e690:	mov	x2, x0
   3e694:	mov	x3, #0x0                   	// #0
   3e698:	add	x2, x2, #0x18
   3e69c:	mov	x5, #0xe                   	// #14
   3e6a0:	ldr	x0, [x0, #8]
   3e6a4:	stur	x1, [x2, #-16]
   3e6a8:	add	x1, x1, #0x20
   3e6ac:	mul	x6, x3, x5
   3e6b0:	ldr	w4, [x1, x3]
   3e6b4:	str	w4, [x2, x6]
   3e6b8:	cbz	w4, 3e6c8 <aarch64_replace_opcode@@Base+0x38>
   3e6bc:	add	x3, x3, #0x4
   3e6c0:	cmp	x3, #0x18
   3e6c4:	b.ne	3e6ac <aarch64_replace_opcode@@Base+0x1c>  // b.any
   3e6c8:	ret

000000000003e6cc <aarch64_operand_index@@Base>:
   3e6cc:	mov	x3, x0
   3e6d0:	mov	x2, #0x0                   	// #0
   3e6d4:	ldr	w4, [x3, x2, lsl #2]
   3e6d8:	mov	w0, w2
   3e6dc:	cmp	w4, w1
   3e6e0:	b.eq	3e6f8 <aarch64_operand_index@@Base+0x2c>  // b.none
   3e6e4:	cbz	w4, 3e6f4 <aarch64_operand_index@@Base+0x28>
   3e6e8:	add	x2, x2, #0x1
   3e6ec:	cmp	x2, #0x6
   3e6f0:	b.ne	3e6d4 <aarch64_operand_index@@Base+0x8>  // b.any
   3e6f4:	mov	w0, #0xffffffff            	// #-1
   3e6f8:	ret

000000000003e6fc <aarch64_sys_reg_deprecated_p@@Base>:
   3e6fc:	ldr	w0, [x0, #12]
   3e700:	and	w0, w0, #0x1
   3e704:	ret

000000000003e708 <aarch64_print_operand@@Base>:
   3e708:	stp	x29, x30, [sp, #-112]!
   3e70c:	mov	x29, sp
   3e710:	stp	x19, x20, [sp, #16]
   3e714:	mov	x20, x0
   3e718:	mov	w0, #0x38                  	// #56
   3e71c:	stp	x21, x22, [sp, #32]
   3e720:	mov	x21, x1
   3e724:	smull	x0, w5, w0
   3e728:	stp	x23, x24, [sp, #48]
   3e72c:	mov	w22, w5
   3e730:	mov	x23, x4
   3e734:	stp	x25, x26, [sp, #64]
   3e738:	add	x19, x4, x0
   3e73c:	stp	x27, x28, [sp, #80]
   3e740:	strb	wzr, [x20]
   3e744:	ldr	x24, [sp, #112]
   3e748:	cbz	x6, 3e750 <aarch64_print_operand@@Base+0x48>
   3e74c:	str	wzr, [x6]
   3e750:	ldr	w0, [x23, x0]
   3e754:	sub	w4, w0, #0x1
   3e758:	cmp	w4, #0xce
   3e75c:	b.hi	3f4a4 <aarch64_print_operand@@Base+0xd9c>  // b.pmore
   3e760:	adrp	x1, 58000 <xexit@@Base+0x5508>
   3e764:	add	x1, x1, #0x3d8
   3e768:	ldrh	w1, [x1, w4, uxtw #1]
   3e76c:	adr	x4, 3e778 <aarch64_print_operand@@Base+0x70>
   3e770:	add	x1, x4, w1, sxth #2
   3e774:	br	x1
   3e778:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   3e77c:	ldr	x0, [x0, #3832]
   3e780:	mov	x1, x0
   3e784:	ldr	x3, [x0]
   3e788:	cbnz	x3, 3f424 <aarch64_print_operand@@Base+0xd1c>
   3e78c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e790:	add	x3, x3, #0x710
   3e794:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e798:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e79c:	add	x3, x3, #0x15b
   3e7a0:	add	x1, x1, #0xfff
   3e7a4:	add	x0, x0, #0x554
   3e7a8:	mov	w2, #0xe95                 	// #3733
   3e7ac:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3e7b0:	adrp	x22, 97000 <aarch64_operands@@Base+0x16bc0>
   3e7b4:	adrp	x27, 54000 <xexit@@Base+0x1508>
   3e7b8:	adrp	x26, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3e7bc:	add	x27, x27, #0x51a
   3e7c0:	ldr	x22, [x22, #3968]
   3e7c4:	add	x26, x26, #0xb4a
   3e7c8:	mov	x25, #0x0                   	// #0
   3e7cc:	ldr	x23, [x22]
   3e7d0:	cbnz	x23, 3f354 <aarch64_print_operand@@Base+0xc4c>
   3e7d4:	cbz	x25, 3f3e0 <aarch64_print_operand@@Base+0xcd8>
   3e7d8:	mov	x23, x25
   3e7dc:	b	3f3a0 <aarch64_print_operand@@Base+0xc98>
   3e7e0:	cmp	w0, #0x9
   3e7e4:	b.ne	3e828 <aarch64_print_operand@@Base+0x120>  // b.any
   3e7e8:	ldrb	w0, [x19, #48]
   3e7ec:	tbz	w0, #1, 3e84c <aarch64_print_operand@@Base+0x144>
   3e7f0:	ldrb	w0, [x19, #4]
   3e7f4:	sub	w1, w0, #0x1
   3e7f8:	and	w1, w1, #0xff
   3e7fc:	cmp	w1, #0x1
   3e800:	b.ls	3e868 <aarch64_print_operand@@Base+0x160>  // b.plast
   3e804:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e808:	add	x3, x3, #0x710
   3e80c:	add	x3, x3, #0x15b
   3e810:	mov	w2, #0xc6d                 	// #3181
   3e814:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e818:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e81c:	add	x1, x1, #0xfff
   3e820:	add	x0, x0, #0x2a9
   3e824:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3e828:	ldr	x0, [x3, #120]
   3e82c:	add	w22, w22, #0x1
   3e830:	ubfx	x1, x0, #12, #3
   3e834:	cmp	x22, x1
   3e838:	b.ne	3e7f0 <aarch64_print_operand@@Base+0xe8>  // b.any
   3e83c:	ldr	w1, [x19, #16]
   3e840:	ubfx	w0, w0, #15, #5
   3e844:	cmp	w1, w0
   3e848:	b.ne	3e7f0 <aarch64_print_operand@@Base+0xe8>  // b.any
   3e84c:	ldp	x19, x20, [sp, #16]
   3e850:	ldp	x21, x22, [sp, #32]
   3e854:	ldp	x23, x24, [sp, #48]
   3e858:	ldp	x25, x26, [sp, #64]
   3e85c:	ldp	x27, x28, [sp, #80]
   3e860:	ldp	x29, x30, [sp], #112
   3e864:	ret
   3e868:	ldr	w19, [x19, #16]
   3e86c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e870:	and	w0, w0, #0xff
   3e874:	cmp	w0, #0x4
   3e878:	cset	x0, ne  // ne = any
   3e87c:	lsl	x0, x0, #5
   3e880:	add	x19, x0, w19, sxtw
   3e884:	adrp	x0, 7d000 <_sch_istable@@Base+0x135c8>
   3e888:	add	x0, x0, #0x3d0
   3e88c:	add	x19, x0, x19, lsl #3
   3e890:	ldr	x3, [x19, #1024]
   3e894:	b	3e8fc <aarch64_print_operand@@Base+0x1f4>
   3e898:	ldrb	w0, [x19, #4]
   3e89c:	sub	w1, w0, #0x1
   3e8a0:	and	w1, w1, #0xff
   3e8a4:	cmp	w1, #0x3
   3e8a8:	b.ls	3e8d0 <aarch64_print_operand@@Base+0x1c8>  // b.plast
   3e8ac:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e8b0:	add	x3, x3, #0x710
   3e8b4:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e8b8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e8bc:	add	x3, x3, #0x15b
   3e8c0:	add	x1, x1, #0xfff
   3e8c4:	add	x0, x0, #0x2f8
   3e8c8:	mov	w2, #0xc78                 	// #3192
   3e8cc:	bl	35b10 <__assert_fail@plt>
   3e8d0:	ldr	w19, [x19, #16]
   3e8d4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e8d8:	and	w1, w0, #0xff
   3e8dc:	adrp	x0, 7d000 <_sch_istable@@Base+0x135c8>
   3e8e0:	cmp	w1, #0x4
   3e8e4:	add	x0, x0, #0x3d0
   3e8e8:	cset	x1, ne  // ne = any
   3e8ec:	add	x0, x0, #0x200
   3e8f0:	lsl	x1, x1, #5
   3e8f4:	add	x19, x1, w19, sxtw
   3e8f8:	ldr	x3, [x0, x19, lsl #3]
   3e8fc:	adrp	x2, 5b000 <fields@@Base+0x25a8>
   3e900:	add	x2, x2, #0xa63
   3e904:	b	3ed08 <aarch64_print_operand@@Base+0x600>
   3e908:	sub	w0, w22, #0x1
   3e90c:	ldr	w24, [x19, #32]
   3e910:	cmp	w0, #0x1
   3e914:	b.ls	3e93c <aarch64_print_operand@@Base+0x234>  // b.plast
   3e918:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3e91c:	add	x3, x3, #0x710
   3e920:	adrp	x1, 53000 <xexit@@Base+0x508>
   3e924:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3e928:	add	x3, x3, #0x15b
   3e92c:	add	x1, x1, #0xfff
   3e930:	add	x0, x0, #0x39c
   3e934:	mov	w2, #0xc82                 	// #3202
   3e938:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3e93c:	mov	x0, x23
   3e940:	adrp	x25, 7d000 <_sch_istable@@Base+0x135c8>
   3e944:	bl	35790 <aarch64_stack_pointer_p@plt>
   3e948:	cbz	w0, 3e99c <aarch64_print_operand@@Base+0x294>
   3e94c:	ldrb	w0, [x19, #4]
   3e950:	cmp	w0, #0x1
   3e954:	b.ne	3ea24 <aarch64_print_operand@@Base+0x31c>  // b.any
   3e958:	ldrb	w1, [x23, #4]
   3e95c:	cmp	w1, #0x1
   3e960:	b.ne	3e9b0 <aarch64_print_operand@@Base+0x2a8>  // b.any
   3e964:	cmp	w24, #0x8
   3e968:	b.ne	3e9b0 <aarch64_print_operand@@Base+0x2a8>  // b.any
   3e96c:	ldr	x1, [x19, #40]
   3e970:	cbnz	x1, 3ea34 <aarch64_print_operand@@Base+0x32c>
   3e974:	ldr	w19, [x19, #16]
   3e978:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e97c:	and	w2, w0, #0xff
   3e980:	add	x1, x25, #0x3d0
   3e984:	cmp	w2, #0x4
   3e988:	cset	x2, ne  // ne = any
   3e98c:	lsl	x2, x2, #5
   3e990:	add	x19, x2, w19, sxtw
   3e994:	add	x19, x1, x19, lsl #3
   3e998:	b	3e890 <aarch64_print_operand@@Base+0x188>
   3e99c:	cmp	w22, #0x2
   3e9a0:	b.ne	3e9b0 <aarch64_print_operand@@Base+0x2a8>  // b.any
   3e9a4:	add	x0, x23, #0x38
   3e9a8:	bl	35790 <aarch64_stack_pointer_p@plt>
   3e9ac:	cbnz	w0, 3e94c <aarch64_print_operand@@Base+0x244>
   3e9b0:	ldr	x1, [x19, #40]
   3e9b4:	mov	w24, w24
   3e9b8:	ldrb	w0, [x19, #4]
   3e9bc:	adrp	x23, 97000 <aarch64_operands@@Base+0x16bc0>
   3e9c0:	ldrsw	x22, [x19, #16]
   3e9c4:	cbz	x1, 3ea3c <aarch64_print_operand@@Base+0x334>
   3e9c8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3e9cc:	and	w4, w0, #0xff
   3e9d0:	cmp	w4, #0x4
   3e9d4:	lsl	x24, x24, #4
   3e9d8:	ldr	x3, [x23, #3904]
   3e9dc:	cset	x0, ne  // ne = any
   3e9e0:	add	x1, x25, #0x3d0
   3e9e4:	add	x0, x22, x0, lsl #5
   3e9e8:	ldr	x4, [x3, x24]
   3e9ec:	add	x0, x1, x0, lsl #3
   3e9f0:	ldr	x5, [x19, #40]
   3e9f4:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3e9f8:	ldr	x3, [x0, #1024]
   3e9fc:	add	x2, x2, #0x3b1
   3ea00:	mov	x1, x21
   3ea04:	mov	x0, x20
   3ea08:	ldp	x19, x20, [sp, #16]
   3ea0c:	ldp	x21, x22, [sp, #32]
   3ea10:	ldp	x23, x24, [sp, #48]
   3ea14:	ldp	x25, x26, [sp, #64]
   3ea18:	ldp	x27, x28, [sp, #80]
   3ea1c:	ldp	x29, x30, [sp], #112
   3ea20:	b	353c0 <snprintf@plt>
   3ea24:	cmp	w0, #0x2
   3ea28:	b.ne	3e9b0 <aarch64_print_operand@@Base+0x2a8>  // b.any
   3ea2c:	cmp	w24, #0x9
   3ea30:	b	3e968 <aarch64_print_operand@@Base+0x260>
   3ea34:	mov	w24, #0x5                   	// #5
   3ea38:	b	3e9b0 <aarch64_print_operand@@Base+0x2a8>
   3ea3c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3ea40:	and	w0, w0, #0xff
   3ea44:	cmp	w0, #0x4
   3ea48:	add	x1, x25, #0x3d0
   3ea4c:	cset	x0, ne  // ne = any
   3ea50:	lsl	x2, x24, #4
   3ea54:	ldr	x3, [x23, #3904]
   3ea58:	add	x0, x22, x0, lsl #5
   3ea5c:	add	x0, x1, x0, lsl #3
   3ea60:	ldr	x4, [x3, x2]
   3ea64:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ea68:	ldr	x3, [x0, #1024]
   3ea6c:	add	x2, x2, #0x3bd
   3ea70:	mov	x1, x21
   3ea74:	mov	x0, x20
   3ea78:	b	3ee7c <aarch64_print_operand@@Base+0x774>
   3ea7c:	ldrb	w0, [x19, #4]
   3ea80:	sub	w1, w0, #0x1
   3ea84:	and	w1, w1, #0xff
   3ea88:	cmp	w1, #0x1
   3ea8c:	b.ls	3eaa4 <aarch64_print_operand@@Base+0x39c>  // b.plast
   3ea90:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3ea94:	add	x3, x3, #0x710
   3ea98:	add	x3, x3, #0x15b
   3ea9c:	mov	w2, #0xca1                 	// #3233
   3eaa0:	b	3e814 <aarch64_print_operand@@Base+0x10c>
   3eaa4:	ldr	x1, [x19, #40]
   3eaa8:	adrp	x22, 7d000 <_sch_istable@@Base+0x135c8>
   3eaac:	ldrsw	x23, [x19, #16]
   3eab0:	cbnz	x1, 3eae4 <aarch64_print_operand@@Base+0x3dc>
   3eab4:	ldr	w1, [x19, #32]
   3eab8:	cmp	w1, #0x5
   3eabc:	b.ne	3eae4 <aarch64_print_operand@@Base+0x3dc>  // b.any
   3eac0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3eac4:	and	w2, w0, #0xff
   3eac8:	cmp	w2, #0x4
   3eacc:	add	x1, x22, #0x3d0
   3ead0:	cset	x0, ne  // ne = any
   3ead4:	add	x0, x23, x0, lsl #5
   3ead8:	add	x0, x1, x0, lsl #3
   3eadc:	ldr	x3, [x0, #1024]
   3eae0:	b	3e8fc <aarch64_print_operand@@Base+0x1f4>
   3eae4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3eae8:	and	w0, w0, #0xff
   3eaec:	cmp	w0, #0x4
   3eaf0:	add	x1, x22, #0x3d0
   3eaf4:	cset	x0, ne  // ne = any
   3eaf8:	ldr	w2, [x19, #32]
   3eafc:	ldr	x5, [x19, #40]
   3eb00:	add	x0, x23, x0, lsl #5
   3eb04:	lsl	x2, x2, #4
   3eb08:	add	x0, x1, x0, lsl #3
   3eb0c:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3eb10:	ldr	x1, [x1, #3904]
   3eb14:	ldr	x4, [x1, x2]
   3eb18:	b	3e9f4 <aarch64_print_operand@@Base+0x2ec>
   3eb1c:	ldrb	w0, [x19, #4]
   3eb20:	bl	35430 <aarch64_get_qualifier_name@plt>
   3eb24:	mov	x3, x0
   3eb28:	ldr	w4, [x19, #16]
   3eb2c:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   3eb30:	add	x2, x2, #0xb5
   3eb34:	mov	x1, x21
   3eb38:	mov	x0, x20
   3eb3c:	ldp	x19, x20, [sp, #16]
   3eb40:	ldp	x21, x22, [sp, #32]
   3eb44:	ldp	x23, x24, [sp, #48]
   3eb48:	ldp	x25, x26, [sp, #64]
   3eb4c:	ldp	x27, x28, [sp, #80]
   3eb50:	ldp	x29, x30, [sp], #112
   3eb54:	b	353c0 <snprintf@plt>
   3eb58:	ldrb	w0, [x19, #4]
   3eb5c:	ldr	w22, [x19, #16]
   3eb60:	bl	35430 <aarch64_get_qualifier_name@plt>
   3eb64:	mov	x4, x0
   3eb68:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3eb6c:	mov	w3, w22
   3eb70:	add	x2, x2, #0x3c4
   3eb74:	mov	x1, x21
   3eb78:	mov	x0, x20
   3eb7c:	ldp	x19, x20, [sp, #16]
   3eb80:	ldp	x21, x22, [sp, #32]
   3eb84:	ldp	x23, x24, [sp, #48]
   3eb88:	ldp	x25, x26, [sp, #64]
   3eb8c:	ldp	x27, x28, [sp, #80]
   3eb90:	ldp	x29, x30, [sp], #112
   3eb94:	b	353c0 <snprintf@plt>
   3eb98:	ldrb	w0, [x19, #4]
   3eb9c:	ldr	w22, [x19, #16]
   3eba0:	bl	35430 <aarch64_get_qualifier_name@plt>
   3eba4:	mov	x4, x0
   3eba8:	ldr	x5, [x19, #24]
   3ebac:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ebb0:	mov	w3, w22
   3ebb4:	add	x2, x2, #0x3cb
   3ebb8:	mov	x1, x21
   3ebbc:	mov	x0, x20
   3ebc0:	ldp	x19, x20, [sp, #16]
   3ebc4:	ldp	x21, x22, [sp, #32]
   3ebc8:	ldp	x23, x24, [sp, #48]
   3ebcc:	ldp	x25, x26, [sp, #64]
   3ebd0:	ldp	x27, x28, [sp, #80]
   3ebd4:	ldp	x29, x30, [sp], #112
   3ebd8:	b	353c0 <snprintf@plt>
   3ebdc:	ldr	w3, [x19, #16]
   3ebe0:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ebe4:	add	x2, x2, #0x3d7
   3ebe8:	mov	x1, x21
   3ebec:	mov	x0, x20
   3ebf0:	ldp	x19, x20, [sp, #16]
   3ebf4:	ldp	x21, x22, [sp, #32]
   3ebf8:	ldp	x23, x24, [sp, #48]
   3ebfc:	ldp	x25, x26, [sp, #64]
   3ec00:	ldp	x27, x28, [sp, #80]
   3ec04:	ldp	x29, x30, [sp], #112
   3ec08:	b	353c0 <snprintf@plt>
   3ec0c:	adrp	x3, 61000 <fields@@Base+0x85a8>
   3ec10:	add	x3, x3, #0x80a
   3ec14:	mov	x2, x19
   3ec18:	mov	x1, x21
   3ec1c:	mov	x0, x20
   3ec20:	ldp	x19, x20, [sp, #16]
   3ec24:	ldp	x21, x22, [sp, #32]
   3ec28:	ldp	x23, x24, [sp, #48]
   3ec2c:	ldp	x25, x26, [sp, #64]
   3ec30:	ldp	x27, x28, [sp, #80]
   3ec34:	ldp	x29, x30, [sp], #112
   3ec38:	b	3dcf8 <aarch64_get_qualifier_name@@Base+0x18>
   3ec3c:	ldrb	w0, [x19, #4]
   3ec40:	ldr	w19, [x19, #16]
   3ec44:	cbnz	w0, 3ec58 <aarch64_print_operand@@Base+0x550>
   3ec48:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ec4c:	mov	w3, w19
   3ec50:	add	x2, x2, #0x3e0
   3ec54:	b	3ebe8 <aarch64_print_operand@@Base+0x4e0>
   3ec58:	sub	w1, w0, #0x17
   3ec5c:	and	w1, w1, #0xff
   3ec60:	cmp	w1, #0x1
   3ec64:	b.hi	3ec80 <aarch64_print_operand@@Base+0x578>  // b.pmore
   3ec68:	bl	35430 <aarch64_get_qualifier_name@plt>
   3ec6c:	mov	x4, x0
   3ec70:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ec74:	mov	w3, w19
   3ec78:	add	x2, x2, #0x3e4
   3ec7c:	b	3eb74 <aarch64_print_operand@@Base+0x46c>
   3ec80:	bl	35430 <aarch64_get_qualifier_name@plt>
   3ec84:	mov	x4, x0
   3ec88:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ec8c:	mov	w3, w19
   3ec90:	add	x2, x2, #0x3eb
   3ec94:	b	3eb74 <aarch64_print_operand@@Base+0x46c>
   3ec98:	ldrb	w0, [x19, #4]
   3ec9c:	ldr	w19, [x19, #16]
   3eca0:	cbnz	w0, 3ecb4 <aarch64_print_operand@@Base+0x5ac>
   3eca4:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3eca8:	mov	w3, w19
   3ecac:	add	x2, x2, #0x3f2
   3ecb0:	b	3ebe8 <aarch64_print_operand@@Base+0x4e0>
   3ecb4:	bl	35430 <aarch64_get_qualifier_name@plt>
   3ecb8:	mov	x4, x0
   3ecbc:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ecc0:	mov	w3, w19
   3ecc4:	add	x2, x2, #0x3f6
   3ecc8:	b	3eb74 <aarch64_print_operand@@Base+0x46c>
   3eccc:	adrp	x3, 55000 <xexit@@Base+0x2508>
   3ecd0:	add	x3, x3, #0x23d
   3ecd4:	b	3ec14 <aarch64_print_operand@@Base+0x50c>
   3ecd8:	ldrb	w0, [x19, #4]
   3ecdc:	ldr	w22, [x19, #16]
   3ece0:	bl	35430 <aarch64_get_qualifier_name@plt>
   3ece4:	mov	x4, x0
   3ece8:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ecec:	mov	w3, w22
   3ecf0:	add	x2, x2, #0x3fd
   3ecf4:	ldr	x5, [x19, #24]
   3ecf8:	b	3ebb8 <aarch64_print_operand@@Base+0x4b0>
   3ecfc:	ldr	x3, [x19, #16]
   3ed00:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ed04:	add	x2, x2, #0x409
   3ed08:	mov	x1, x21
   3ed0c:	mov	x0, x20
   3ed10:	ldp	x19, x20, [sp, #16]
   3ed14:	ldp	x21, x22, [sp, #32]
   3ed18:	ldp	x23, x24, [sp, #48]
   3ed1c:	ldp	x25, x26, [sp, #64]
   3ed20:	ldp	x27, x28, [sp, #80]
   3ed24:	ldp	x29, x30, [sp], #112
   3ed28:	b	353c0 <snprintf@plt>
   3ed2c:	ldr	x3, [x19, #16]
   3ed30:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ed34:	add	x2, x2, #0x497
   3ed38:	b	3ed08 <aarch64_print_operand@@Base+0x600>
   3ed3c:	ldr	s0, [x19, #16]
   3ed40:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ed44:	add	x2, x2, #0x40e
   3ed48:	fcvt	d0, s0
   3ed4c:	mov	x1, x21
   3ed50:	mov	x0, x20
   3ed54:	ldp	x19, x20, [sp, #16]
   3ed58:	ldp	x21, x22, [sp, #32]
   3ed5c:	ldp	x23, x24, [sp, #48]
   3ed60:	ldp	x25, x26, [sp, #64]
   3ed64:	ldp	x27, x28, [sp, #80]
   3ed68:	ldp	x29, x30, [sp], #112
   3ed6c:	b	353c0 <snprintf@plt>
   3ed70:	ldr	x1, [x3, #120]
   3ed74:	add	w22, w22, #0x1
   3ed78:	ldr	x0, [x19, #16]
   3ed7c:	ubfx	x2, x1, #12, #3
   3ed80:	cmp	x2, x22
   3ed84:	b.ne	3ed94 <aarch64_print_operand@@Base+0x68c>  // b.any
   3ed88:	ubfx	x1, x1, #15, #5
   3ed8c:	cmp	x1, x0
   3ed90:	b.eq	3e84c <aarch64_print_operand@@Base+0x144>  // b.none
   3ed94:	cmp	x0, #0x1f
   3ed98:	b.ls	3edc0 <aarch64_print_operand@@Base+0x6b8>  // b.plast
   3ed9c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3eda0:	add	x3, x3, #0x710
   3eda4:	add	x3, x3, #0x15b
   3eda8:	mov	w2, #0xd49                 	// #3401
   3edac:	adrp	x1, 53000 <xexit@@Base+0x508>
   3edb0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3edb4:	add	x1, x1, #0xfff
   3edb8:	add	x0, x0, #0x414
   3edbc:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3edc0:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3edc4:	ldr	x1, [x1, #3792]
   3edc8:	ldr	x3, [x1, x0, lsl #3]
   3edcc:	cbnz	x3, 3e8fc <aarch64_print_operand@@Base+0x1f4>
   3edd0:	mov	x3, x0
   3edd4:	b	3ed30 <aarch64_print_operand@@Base+0x628>
   3edd8:	ldr	x1, [x3, #120]
   3eddc:	add	w22, w22, #0x1
   3ede0:	ldr	x0, [x19, #16]
   3ede4:	ubfx	x2, x1, #12, #3
   3ede8:	cmp	x2, x22
   3edec:	b.ne	3ee04 <aarch64_print_operand@@Base+0x6fc>  // b.any
   3edf0:	ldrb	w2, [x19, #36]
   3edf4:	tbnz	w2, #0, 3ee04 <aarch64_print_operand@@Base+0x6fc>
   3edf8:	ubfx	x1, x1, #15, #5
   3edfc:	cmp	x1, x0
   3ee00:	b.eq	3e84c <aarch64_print_operand@@Base+0x144>  // b.none
   3ee04:	cmp	x0, #0x1f
   3ee08:	b.ls	3ee20 <aarch64_print_operand@@Base+0x718>  // b.plast
   3ee0c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3ee10:	add	x3, x3, #0x710
   3ee14:	add	x3, x3, #0x15b
   3ee18:	mov	w2, #0xd56                 	// #3414
   3ee1c:	b	3edac <aarch64_print_operand@@Base+0x6a4>
   3ee20:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3ee24:	ldr	x1, [x1, #3792]
   3ee28:	ldr	x3, [x1, x0, lsl #3]
   3ee2c:	cbz	x3, 3ee98 <aarch64_print_operand@@Base+0x790>
   3ee30:	adrp	x2, 5b000 <fields@@Base+0x25a8>
   3ee34:	add	x2, x2, #0xa63
   3ee38:	mov	x1, x21
   3ee3c:	mov	x0, x20
   3ee40:	bl	353c0 <snprintf@plt>
   3ee44:	ldrb	w0, [x19, #36]
   3ee48:	tbz	w0, #0, 3e84c <aarch64_print_operand@@Base+0x144>
   3ee4c:	mov	x0, x20
   3ee50:	bl	350e0 <strlen@plt>
   3ee54:	ldr	w1, [x19, #32]
   3ee58:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   3ee5c:	ldr	x4, [x19, #40]
   3ee60:	ldr	x2, [x2, #3904]
   3ee64:	lsl	x1, x1, #4
   3ee68:	ldr	x3, [x2, x1]
   3ee6c:	sub	x1, x21, x0
   3ee70:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ee74:	add	x0, x20, x0
   3ee78:	add	x2, x2, #0x3b3
   3ee7c:	ldp	x19, x20, [sp, #16]
   3ee80:	ldp	x21, x22, [sp, #32]
   3ee84:	ldp	x23, x24, [sp, #48]
   3ee88:	ldp	x25, x26, [sp, #64]
   3ee8c:	ldp	x27, x28, [sp, #80]
   3ee90:	ldp	x29, x30, [sp], #112
   3ee94:	b	353c0 <snprintf@plt>
   3ee98:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ee9c:	mov	x3, x0
   3eea0:	add	x2, x2, #0x497
   3eea4:	b	3ee38 <aarch64_print_operand@@Base+0x730>
   3eea8:	ldr	x0, [x19, #16]
   3eeac:	cmp	x0, #0xf
   3eeb0:	b.ls	3eed8 <aarch64_print_operand@@Base+0x7d0>  // b.plast
   3eeb4:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3eeb8:	add	x3, x3, #0x710
   3eebc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3eec0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3eec4:	add	x3, x3, #0x15b
   3eec8:	add	x1, x1, #0xfff
   3eecc:	add	x0, x0, #0x448
   3eed0:	mov	w2, #0xd66                 	// #3430
   3eed4:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3eed8:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3eedc:	ldr	x1, [x1, #4056]
   3eee0:	b	3edc8 <aarch64_print_operand@@Base+0x6c0>
   3eee4:	ldrb	w0, [x23, #4]
   3eee8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3eeec:	and	w0, w0, #0xff
   3eef0:	cmp	w0, #0x4
   3eef4:	b.eq	3ef24 <aarch64_print_operand@@Base+0x81c>  // b.none
   3eef8:	cmp	w0, #0x8
   3eefc:	b.eq	3ef58 <aarch64_print_operand@@Base+0x850>  // b.none
   3ef00:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3ef04:	add	x3, x3, #0x710
   3ef08:	add	x3, x3, #0x15b
   3ef0c:	mov	w2, #0xd7a                 	// #3450
   3ef10:	adrp	x1, 53000 <xexit@@Base+0x508>
   3ef14:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3ef18:	add	x1, x1, #0xfff
   3ef1c:	add	x0, x0, #0x679
   3ef20:	b	3e8cc <aarch64_print_operand@@Base+0x1c4>
   3ef24:	mov	x1, x21
   3ef28:	mov	x0, x20
   3ef2c:	ldr	x3, [x19, #16]
   3ef30:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ef34:	ldp	x19, x20, [sp, #16]
   3ef38:	add	x2, x2, #0x47a
   3ef3c:	ldp	x21, x22, [sp, #32]
   3ef40:	mov	w4, w3
   3ef44:	ldp	x23, x24, [sp, #48]
   3ef48:	ldp	x25, x26, [sp, #64]
   3ef4c:	ldp	x27, x28, [sp, #80]
   3ef50:	ldp	x29, x30, [sp], #112
   3ef54:	b	353c0 <snprintf@plt>
   3ef58:	ldr	x4, [x19, #16]
   3ef5c:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3ef60:	add	x2, x2, #0x48a
   3ef64:	mov	x3, x4
   3ef68:	b	3ea70 <aarch64_print_operand@@Base+0x368>
   3ef6c:	mov	x1, x21
   3ef70:	mov	x0, x20
   3ef74:	ldp	x19, x20, [sp, #16]
   3ef78:	adrp	x2, 66000 <fields@@Base+0xd5a8>
   3ef7c:	ldp	x21, x22, [sp, #32]
   3ef80:	add	x2, x2, #0xfee
   3ef84:	ldp	x23, x24, [sp, #48]
   3ef88:	ldp	x25, x26, [sp, #64]
   3ef8c:	ldp	x27, x28, [sp, #80]
   3ef90:	ldp	x29, x30, [sp], #112
   3ef94:	b	353c0 <snprintf@plt>
   3ef98:	ldr	x4, [x19, #40]
   3ef9c:	ldr	x3, [x19, #16]
   3efa0:	cbz	x4, 3efcc <aarch64_print_operand@@Base+0x8c4>
   3efa4:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3efa8:	add	x2, x2, #0x49c
   3efac:	b	3ea70 <aarch64_print_operand@@Base+0x368>
   3efb0:	ldr	x5, [x19, #40]
   3efb4:	ldr	w0, [x19, #32]
   3efb8:	cbnz	x5, 3efc4 <aarch64_print_operand@@Base+0x8bc>
   3efbc:	cmp	w0, #0x5
   3efc0:	b.eq	3efc8 <aarch64_print_operand@@Base+0x8c0>  // b.none
   3efc4:	cbnz	w0, 3efd8 <aarch64_print_operand@@Base+0x8d0>
   3efc8:	ldr	x3, [x19, #16]
   3efcc:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3efd0:	add	x2, x2, #0x4ad
   3efd4:	b	3ed08 <aarch64_print_operand@@Base+0x600>
   3efd8:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   3efdc:	ubfiz	x0, x0, #4, #32
   3efe0:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3efe4:	add	x2, x2, #0x4b4
   3efe8:	ldr	x1, [x1, #3904]
   3efec:	ldr	x3, [x19, #16]
   3eff0:	ldr	x4, [x1, x0]
   3eff4:	b	3ea00 <aarch64_print_operand@@Base+0x2f8>
   3eff8:	ldr	x4, [x19, #40]
   3effc:	ldr	x3, [x19, #16]
   3f000:	cbz	x4, 3ed30 <aarch64_print_operand@@Base+0x628>
   3f004:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f008:	add	x2, x2, #0x4c4
   3f00c:	b	3ea70 <aarch64_print_operand@@Base+0x368>
   3f010:	ldrb	w0, [x23, #4]
   3f014:	adrp	x22, 54000 <xexit@@Base+0x1508>
   3f018:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3f01c:	and	w0, w0, #0xff
   3f020:	cmp	w0, #0x4
   3f024:	b.eq	3f038 <aarch64_print_operand@@Base+0x930>  // b.none
   3f028:	cmp	w0, #0x8
   3f02c:	b.eq	3f050 <aarch64_print_operand@@Base+0x948>  // b.none
   3f030:	cmp	w0, #0x2
   3f034:	b.ne	3f060 <aarch64_print_operand@@Base+0x958>  // b.any
   3f038:	ldr	w1, [x19, #16]
   3f03c:	bl	3d4e8 <print_aarch64_disassembler_options@@Base+0x134>
   3f040:	fmov	s0, w0
   3f044:	fcvt	d0, s0
   3f048:	add	x2, x22, #0x4d3
   3f04c:	b	3ed4c <aarch64_print_operand@@Base+0x644>
   3f050:	ldr	w1, [x19, #16]
   3f054:	bl	3d4e8 <print_aarch64_disassembler_options@@Base+0x134>
   3f058:	fmov	d0, x0
   3f05c:	b	3f048 <aarch64_print_operand@@Base+0x940>
   3f060:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3f064:	add	x3, x3, #0x710
   3f068:	add	x3, x3, #0x15b
   3f06c:	mov	w2, #0xdbd                 	// #3517
   3f070:	b	3ef10 <aarch64_print_operand@@Base+0x808>
   3f074:	ldr	x0, [x3, #120]
   3f078:	add	w22, w22, #0x1
   3f07c:	ldr	x3, [x19, #16]
   3f080:	ubfx	x1, x0, #12, #3
   3f084:	cmp	x1, x22
   3f088:	b.ne	3f098 <aarch64_print_operand@@Base+0x990>  // b.any
   3f08c:	ubfx	x0, x0, #15, #5
   3f090:	cmp	x0, x3
   3f094:	b.eq	3e84c <aarch64_print_operand@@Base+0x144>  // b.none
   3f098:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f09c:	add	x2, x2, #0x4da
   3f0a0:	b	3ebe8 <aarch64_print_operand@@Base+0x4e0>
   3f0a4:	ldr	x0, [x19, #16]
   3f0a8:	adrp	x2, 5b000 <fields@@Base+0x25a8>
   3f0ac:	adrp	x24, 5f000 <fields@@Base+0x65a8>
   3f0b0:	adrp	x25, 54000 <xexit@@Base+0x1508>
   3f0b4:	add	x2, x2, #0xa63
   3f0b8:	mov	x1, x21
   3f0bc:	ldr	x3, [x0]
   3f0c0:	add	x24, x24, #0xc8e
   3f0c4:	add	x25, x25, #0x4e0
   3f0c8:	mov	x0, x20
   3f0cc:	mov	w22, #0x1                   	// #1
   3f0d0:	bl	353c0 <snprintf@plt>
   3f0d4:	ldr	x26, [x19, #16]
   3f0d8:	ldr	x23, [x26, w22, uxtw #3]
   3f0dc:	cbz	x23, 3e84c <aarch64_print_operand@@Base+0x144>
   3f0e0:	mov	x0, x20
   3f0e4:	bl	350e0 <strlen@plt>
   3f0e8:	mov	x1, x0
   3f0ec:	cmp	w22, #0x1
   3f0f0:	add	x0, x20, x0
   3f0f4:	sub	x1, x21, x1
   3f0f8:	b.ne	3f11c <aarch64_print_operand@@Base+0xa14>  // b.any
   3f0fc:	ldr	x3, [x26]
   3f100:	mov	x4, x23
   3f104:	mov	x2, x25
   3f108:	bl	353c0 <snprintf@plt>
   3f10c:	add	w22, w22, #0x1
   3f110:	cmp	w22, #0x4
   3f114:	b.ne	3f0d4 <aarch64_print_operand@@Base+0x9cc>  // b.any
   3f118:	b	3e84c <aarch64_print_operand@@Base+0x144>
   3f11c:	mov	x3, x23
   3f120:	mov	x2, x24
   3f124:	bl	353c0 <snprintf@plt>
   3f128:	b	3f10c <aarch64_print_operand@@Base+0xa04>
   3f12c:	and	x2, x2, #0xfffffffffffff000
   3f130:	ldr	x3, [x19, #16]
   3f134:	add	x3, x2, x3
   3f138:	cbz	x6, 3f144 <aarch64_print_operand@@Base+0xa3c>
   3f13c:	mov	w0, #0x1                   	// #1
   3f140:	str	w0, [x6]
   3f144:	cbz	x7, 3efcc <aarch64_print_operand@@Base+0x8c4>
   3f148:	str	x3, [x7]
   3f14c:	b	3efcc <aarch64_print_operand@@Base+0x8c4>
   3f150:	ldrsw	x1, [x19, #16]
   3f154:	adrp	x2, 7d000 <_sch_istable@@Base+0x135c8>
   3f158:	add	x2, x2, #0x3d0
   3f15c:	cmp	w0, #0x5e
   3f160:	add	x1, x2, x1, lsl #3
   3f164:	ldr	x3, [x1, #768]
   3f168:	b.ne	3f348 <aarch64_print_operand@@Base+0xc40>  // b.any
   3f16c:	ldp	w4, w0, [x19, #20]
   3f170:	cbz	w0, 3f180 <aarch64_print_operand@@Base+0xa78>
   3f174:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f178:	add	x2, x2, #0x4ed
   3f17c:	b	3eb34 <aarch64_print_operand@@Base+0x42c>
   3f180:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f184:	add	x2, x2, #0x8e
   3f188:	b	3eb34 <aarch64_print_operand@@Base+0x42c>
   3f18c:	ldrsw	x0, [x19, #16]
   3f190:	adrp	x23, 7d000 <_sch_istable@@Base+0x135c8>
   3f194:	add	x1, x23, #0x3d0
   3f198:	add	x0, x1, x0, lsl #3
   3f19c:	ldr	x24, [x0, #768]
   3f1a0:	ldr	w0, [x19, #32]
   3f1a4:	sub	w0, w0, #0x5
   3f1a8:	cmp	w0, #0x8
   3f1ac:	b.hi	3f250 <aarch64_print_operand@@Base+0xb48>  // b.pmore
   3f1b0:	adrp	x1, 58000 <xexit@@Base+0x5508>
   3f1b4:	add	x1, x1, #0x578
   3f1b8:	ldrb	w0, [x1, w0, uxtw]
   3f1bc:	adr	x1, 3f1c8 <aarch64_print_operand@@Base+0xac0>
   3f1c0:	add	x0, x1, w0, sxtb #2
   3f1c4:	br	x0
   3f1c8:	add	x25, x23, #0x3d0
   3f1cc:	mov	w0, #0x1                   	// #1
   3f1d0:	ldr	w23, [x19, #20]
   3f1d4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3f1d8:	and	w0, w0, #0xff
   3f1dc:	cmp	w0, #0x4
   3f1e0:	cset	x0, ne  // ne = any
   3f1e4:	lsl	x0, x0, #5
   3f1e8:	add	x23, x0, w23, sxtw
   3f1ec:	add	x23, x25, x23, lsl #3
   3f1f0:	ldr	x4, [x23, #1024]
   3f1f4:	mov	x3, x24
   3f1f8:	mov	x2, x19
   3f1fc:	mov	x1, x21
   3f200:	mov	x0, x20
   3f204:	ldp	x19, x20, [sp, #16]
   3f208:	ldp	x21, x22, [sp, #32]
   3f20c:	ldp	x23, x24, [sp, #48]
   3f210:	ldp	x25, x26, [sp, #64]
   3f214:	ldp	x27, x28, [sp, #80]
   3f218:	ldp	x29, x30, [sp], #112
   3f21c:	b	3d58c <print_aarch64_disassembler_options@@Base+0x1d8>
   3f220:	ldr	w22, [x19, #20]
   3f224:	mov	w0, #0x2                   	// #2
   3f228:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3f22c:	and	w0, w0, #0xff
   3f230:	cmp	w0, #0x4
   3f234:	add	x23, x23, #0x3d0
   3f238:	cset	x0, ne  // ne = any
   3f23c:	lsl	x0, x0, #5
   3f240:	add	x22, x0, w22, sxtw
   3f244:	add	x22, x23, x22, lsl #3
   3f248:	ldr	x4, [x22, #1024]
   3f24c:	b	3f1f4 <aarch64_print_operand@@Base+0xaec>
   3f250:	bl	356c0 <abort@plt>
   3f254:	ldrb	w1, [x19, #4]
   3f258:	ldr	w0, [x19, #16]
   3f25c:	bl	3d724 <print_aarch64_disassembler_options@@Base+0x370>
   3f260:	mov	x3, x0
   3f264:	ldrsw	x1, [x19, #20]
   3f268:	adrp	x2, 7d000 <_sch_istable@@Base+0x135c8>
   3f26c:	add	x2, x2, #0x3d0
   3f270:	add	x1, x2, x1, lsl #3
   3f274:	ldr	x4, [x1, #1280]
   3f278:	b	3f1f8 <aarch64_print_operand@@Base+0xaf0>
   3f27c:	ldrb	w1, [x19, #4]
   3f280:	ldr	w0, [x19, #20]
   3f284:	bl	3d724 <print_aarch64_disassembler_options@@Base+0x370>
   3f288:	mov	x4, x0
   3f28c:	ldrsw	x1, [x19, #16]
   3f290:	adrp	x2, 7d000 <_sch_istable@@Base+0x135c8>
   3f294:	add	x2, x2, #0x3d0
   3f298:	add	x1, x2, x1, lsl #3
   3f29c:	ldr	x3, [x1, #768]
   3f2a0:	b	3f1f8 <aarch64_print_operand@@Base+0xaf0>
   3f2a4:	ldrsw	x0, [x19, #16]
   3f2a8:	adrp	x1, 7d000 <_sch_istable@@Base+0x135c8>
   3f2ac:	add	x1, x1, #0x3d0
   3f2b0:	add	x0, x1, x0, lsl #3
   3f2b4:	ldr	x3, [x0, #768]
   3f2b8:	mov	x2, x19
   3f2bc:	mov	x1, x21
   3f2c0:	mov	x0, x20
   3f2c4:	ldp	x19, x20, [sp, #16]
   3f2c8:	ldp	x21, x22, [sp, #32]
   3f2cc:	ldp	x23, x24, [sp, #48]
   3f2d0:	ldp	x25, x26, [sp, #64]
   3f2d4:	ldp	x27, x28, [sp, #80]
   3f2d8:	ldp	x29, x30, [sp], #112
   3f2dc:	b	3d844 <print_aarch64_disassembler_options@@Base+0x490>
   3f2e0:	ldrb	w1, [x19, #4]
   3f2e4:	ldr	w0, [x19, #16]
   3f2e8:	bl	3d724 <print_aarch64_disassembler_options@@Base+0x370>
   3f2ec:	mov	x3, x0
   3f2f0:	b	3f2b8 <aarch64_print_operand@@Base+0xbb0>
   3f2f4:	ldr	w0, [x19, #16]
   3f2f8:	ldrb	w23, [x19, #4]
   3f2fc:	mov	w1, w23
   3f300:	bl	3d724 <print_aarch64_disassembler_options@@Base+0x370>
   3f304:	mov	x22, x0
   3f308:	ldr	w0, [x19, #20]
   3f30c:	mov	w1, w23
   3f310:	bl	3d724 <print_aarch64_disassembler_options@@Base+0x370>
   3f314:	mov	x4, x0
   3f318:	mov	x3, x22
   3f31c:	b	3f1f8 <aarch64_print_operand@@Base+0xaf0>
   3f320:	ldrsw	x0, [x19, #16]
   3f324:	adrp	x1, 7d000 <_sch_istable@@Base+0x135c8>
   3f328:	ldr	w4, [x19, #20]
   3f32c:	add	x1, x1, #0x3d0
   3f330:	add	x0, x1, x0, lsl #3
   3f334:	ldr	x3, [x0, #768]
   3f338:	cbz	w4, 3f348 <aarch64_print_operand@@Base+0xc40>
   3f33c:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f340:	add	x2, x2, #0xd3
   3f344:	b	3eb34 <aarch64_print_operand@@Base+0x42c>
   3f348:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f34c:	add	x2, x2, #0xdd
   3f350:	b	3ed08 <aarch64_print_operand@@Base+0x600>
   3f354:	ldr	w0, [x19, #16]
   3f358:	ldr	w1, [x22, #8]
   3f35c:	cmp	w1, w0
   3f360:	b.ne	3f3c8 <aarch64_print_operand@@Base+0xcc0>  // b.any
   3f364:	ldr	w1, [x19, #20]
   3f368:	mov	x0, x22
   3f36c:	ldr	w28, [x22, #12]
   3f370:	str	w1, [sp, #108]
   3f374:	bl	35b50 <aarch64_sys_reg_deprecated_p@plt>
   3f378:	cbnz	w0, 3f3c8 <aarch64_print_operand@@Base+0xcc0>
   3f37c:	ldr	w1, [sp, #108]
   3f380:	cmp	x25, #0x0
   3f384:	and	w0, w28, w1
   3f388:	ccmp	w1, w0, #0x4, ne  // ne = any
   3f38c:	b.ne	3f3c8 <aarch64_print_operand@@Base+0xcc0>  // b.any
   3f390:	cmp	w1, w0
   3f394:	b.ne	3f3a8 <aarch64_print_operand@@Base+0xca0>  // b.any
   3f398:	cbz	x24, 3f3a0 <aarch64_print_operand@@Base+0xc98>
   3f39c:	str	xzr, [x24]
   3f3a0:	mov	x3, x23
   3f3a4:	b	3e8fc <aarch64_print_operand@@Base+0x1f4>
   3f3a8:	tbz	w28, #4, 3f3d0 <aarch64_print_operand@@Base+0xcc8>
   3f3ac:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3f3b0:	add	x1, x1, #0x4f7
   3f3b4:	mov	w2, #0x5                   	// #5
   3f3b8:	mov	x0, x26
   3f3bc:	bl	35a30 <dcgettext@plt>
   3f3c0:	str	x0, [x24]
   3f3c4:	mov	x25, x23
   3f3c8:	add	x22, x22, #0x10
   3f3cc:	b	3e7cc <aarch64_print_operand@@Base+0xc4>
   3f3d0:	tbz	w28, #3, 3f3c4 <aarch64_print_operand@@Base+0xcbc>
   3f3d4:	mov	x1, x27
   3f3d8:	mov	w2, #0x5                   	// #5
   3f3dc:	b	3f3b8 <aarch64_print_operand@@Base+0xcb0>
   3f3e0:	ldr	w3, [x19, #16]
   3f3e4:	mov	x1, x21
   3f3e8:	mov	x0, x20
   3f3ec:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f3f0:	ldp	x19, x20, [sp, #16]
   3f3f4:	and	w7, w3, #0x7
   3f3f8:	ldp	x21, x22, [sp, #32]
   3f3fc:	ubfx	x6, x3, #3, #4
   3f400:	ldp	x23, x24, [sp, #48]
   3f404:	ubfx	x5, x3, #7, #4
   3f408:	ldp	x25, x26, [sp, #64]
   3f40c:	ubfx	x4, x3, #11, #3
   3f410:	ldp	x27, x28, [sp, #80]
   3f414:	add	x2, x2, #0x53a
   3f418:	ldp	x29, x30, [sp], #112
   3f41c:	ubfx	x3, x3, #14, #2
   3f420:	b	353c0 <snprintf@plt>
   3f424:	ldr	w2, [x1, #8]
   3f428:	add	x0, x0, #0x10
   3f42c:	ldr	w1, [x19, #16]
   3f430:	cmp	w2, w1
   3f434:	b.ne	3e780 <aarch64_print_operand@@Base+0x78>  // b.any
   3f438:	b	3e8fc <aarch64_print_operand@@Base+0x1f4>
   3f43c:	ldr	x0, [x19, #16]
   3f440:	ldr	x3, [x0]
   3f444:	b	3e8fc <aarch64_print_operand@@Base+0x1f4>
   3f448:	ldr	x0, [x3, #120]
   3f44c:	add	w22, w22, #0x1
   3f450:	ubfx	x1, x0, #12, #3
   3f454:	cmp	x1, x22
   3f458:	ldr	x1, [x19, #16]
   3f45c:	b.ne	3f470 <aarch64_print_operand@@Base+0xd68>  // b.any
   3f460:	ldr	w2, [x1, #8]
   3f464:	ubfx	w0, w0, #15, #5
   3f468:	cmp	w2, w0
   3f46c:	b.eq	3e84c <aarch64_print_operand@@Base+0x144>  // b.none
   3f470:	ldr	w3, [x1, #8]
   3f474:	b	3f098 <aarch64_print_operand@@Base+0x990>
   3f478:	ldr	x0, [x19, #16]
   3f47c:	ldr	x3, [x0]
   3f480:	cbnz	x3, 3e8fc <aarch64_print_operand@@Base+0x1f4>
   3f484:	adrp	x2, 54000 <xexit@@Base+0x1508>
   3f488:	ldr	w3, [x0, #8]
   3f48c:	add	x2, x2, #0x54c
   3f490:	b	3ebe8 <aarch64_print_operand@@Base+0x4e0>
   3f494:	ldr	x0, [x19, #16]
   3f498:	ldr	w1, [x0, #8]
   3f49c:	tbnz	w1, #8, 3e84c <aarch64_print_operand@@Base+0x144>
   3f4a0:	b	3f440 <aarch64_print_operand@@Base+0xd38>
   3f4a4:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3f4a8:	add	x3, x3, #0x710
   3f4ac:	add	x3, x3, #0x15b
   3f4b0:	mov	w2, #0xebb                 	// #3771
   3f4b4:	b	3ef10 <aarch64_print_operand@@Base+0x808>

000000000003f4b8 <aarch64_sys_reg_supported_p@@Base>:
   3f4b8:	ldr	w2, [x1, #12]
   3f4bc:	tbz	w2, #1, 3f838 <aarch64_sys_reg_supported_p@@Base+0x380>
   3f4c0:	ldr	w1, [x1, #8]
   3f4c4:	mov	w2, #0xc213                	// #49683
   3f4c8:	cmp	w1, w2
   3f4cc:	b.ne	3f4dc <aarch64_sys_reg_supported_p@@Base+0x24>  // b.any
   3f4d0:	tbnz	w0, #21, 3f70c <aarch64_sys_reg_supported_p@@Base+0x254>
   3f4d4:	mov	w0, #0x0                   	// #0
   3f4d8:	b	3f6e0 <aarch64_sys_reg_supported_p@@Base+0x228>
   3f4dc:	and	w3, w1, #0xffffdfff
   3f4e0:	mov	w2, #0xc687                	// #50823
   3f4e4:	cmp	w3, w2
   3f4e8:	mov	w2, #0xde87                	// #56967
   3f4ec:	ccmp	w1, w2, #0x4, ne  // ne = any
   3f4f0:	b.eq	3f50c <aarch64_sys_reg_supported_p@@Base+0x54>  // b.none
   3f4f4:	mov	w2, #0xf687                	// #63111
   3f4f8:	cmp	w1, w2
   3f4fc:	b.eq	3f50c <aarch64_sys_reg_supported_p@@Base+0x54>  // b.none
   3f500:	mov	w2, #0xee87                	// #61063
   3f504:	cmp	w1, w2
   3f508:	b.ne	3f510 <aarch64_sys_reg_supported_p@@Base+0x58>  // b.any
   3f50c:	tbz	x0, #45, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f510:	mov	w2, #0xc01c                	// #49180
   3f514:	cmp	w1, w2
   3f518:	b.ne	3f6e4 <aarch64_sys_reg_supported_p@@Base+0x22c>  // b.any
   3f51c:	tbz	x0, #46, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f520:	mov	w14, #0xffff1700            	// #-59648
   3f524:	add	w2, w1, w14
   3f528:	cmp	w2, #0x2
   3f52c:	b.ls	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.plast
   3f530:	mov	w13, #0xffff1578            	// #-60040
   3f534:	add	w2, w1, w13
   3f538:	cmp	w2, #0x1
   3f53c:	b.ls	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.plast
   3f540:	mov	w2, #0xea90                	// #60048
   3f544:	cmp	w1, w2
   3f548:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f54c:	mov	w2, #0xeb00                	// #60160
   3f550:	cmp	w1, w2
   3f554:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f558:	and	w3, w1, #0xfffffff7
   3f55c:	mov	w2, #0xed10                	// #60688
   3f560:	cmp	w3, w2
   3f564:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f568:	mov	w2, #0xee00                	// #60928
   3f56c:	cmp	w1, w2
   3f570:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f574:	mov	w2, #0xee81                	// #61057
   3f578:	cmp	w1, w2
   3f57c:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f580:	mov	w2, #0xef08                	// #61192
   3f584:	cmp	w1, w2
   3f588:	b.eq	3f73c <aarch64_sys_reg_supported_p@@Base+0x284>  // b.none
   3f58c:	and	w2, w1, #0xfffffff7
   3f590:	mov	w12, #0xffff10f0            	// #-61200
   3f594:	add	w3, w2, w12
   3f598:	cmp	w3, #0x2
   3f59c:	b.hi	3f5a4 <aarch64_sys_reg_supported_p@@Base+0xec>  // b.pmore
   3f5a0:	tbz	w0, #24, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f5a4:	mov	w3, #0xc03a                	// #49210
   3f5a8:	cmp	w1, w3
   3f5ac:	b.ne	3f744 <aarch64_sys_reg_supported_p@@Base+0x28c>  // b.any
   3f5b0:	tbz	w0, #5, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f5b4:	mov	w4, #0xe293                	// #58003
   3f5b8:	and	w3, w1, #0xffffdfff
   3f5bc:	cmp	w1, w4
   3f5c0:	mov	w4, #0xc609                	// #50697
   3f5c4:	ccmp	w3, w4, #0x4, ne  // ne = any
   3f5c8:	b.ne	3f5d0 <aarch64_sys_reg_supported_p@@Base+0x118>  // b.any
   3f5cc:	tbz	w0, #26, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f5d0:	and	w5, w1, #0xfffffffb
   3f5d4:	mov	w4, #0xc4d3                	// #50387
   3f5d8:	cmp	w5, w4
   3f5dc:	b.eq	3f608 <aarch64_sys_reg_supported_p@@Base+0x150>  // b.none
   3f5e0:	mov	w4, #0xc4c8                	// #50376
   3f5e4:	cmp	w3, w4
   3f5e8:	b.eq	3f608 <aarch64_sys_reg_supported_p@@Base+0x150>  // b.none
   3f5ec:	mov	w10, #0xffff3b36            	// #-50378
   3f5f0:	add	w4, w1, w10
   3f5f4:	cmp	w4, #0x7
   3f5f8:	b.ls	3f608 <aarch64_sys_reg_supported_p@@Base+0x150>  // b.plast
   3f5fc:	mov	w4, #0xecc8                	// #60616
   3f600:	cmp	w1, w4
   3f604:	b.ne	3f60c <aarch64_sys_reg_supported_p@@Base+0x154>  // b.any
   3f608:	tbz	w0, #27, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f60c:	mov	w9, #0xffff3ef8            	// #-49416
   3f610:	add	w5, w1, w9
   3f614:	cmp	w5, #0x11
   3f618:	b.hi	3f630 <aarch64_sys_reg_supported_p@@Base+0x178>  // b.pmore
   3f61c:	mov	x4, #0xf0f                 	// #3855
   3f620:	movk	x4, #0x3, lsl #16
   3f624:	lsr	x4, x4, x5
   3f628:	tbz	w4, #0, 3f630 <aarch64_sys_reg_supported_p@@Base+0x178>
   3f62c:	tbz	w0, #6, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f630:	mov	w4, #0xc024                	// #49188
   3f634:	cmp	w1, w4
   3f638:	mov	w4, #0xc090                	// #49296
   3f63c:	ccmp	w3, w4, #0x4, ne  // ne = any
   3f640:	b.eq	3f668 <aarch64_sys_reg_supported_p@@Base+0x1b0>  // b.none
   3f644:	mov	w3, #0xf090                	// #61584
   3f648:	cmp	w1, w3
   3f64c:	b.eq	3f668 <aarch64_sys_reg_supported_p@@Base+0x1b0>  // b.none
   3f650:	mov	w3, #0xe890                	// #59536
   3f654:	cmp	w1, w3
   3f658:	b.eq	3f668 <aarch64_sys_reg_supported_p@@Base+0x1b0>  // b.none
   3f65c:	mov	w3, #0xc007                	// #49159
   3f660:	cmp	w1, w3
   3f664:	b.ne	3f66c <aarch64_sys_reg_supported_p@@Base+0x1b4>  // b.any
   3f668:	tbz	w0, #28, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f66c:	mov	w3, #0xda15                	// #55829
   3f670:	cmp	w1, w3
   3f674:	b.ne	3f778 <aarch64_sys_reg_supported_p@@Base+0x2c0>  // b.any
   3f678:	tbz	w0, #11, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f67c:	mov	w7, #0xffffbbf8            	// #-17416
   3f680:	add	w3, w1, w7
   3f684:	cmp	w3, #0x2f
   3f688:	b.hi	3f69c <aarch64_sys_reg_supported_p@@Base+0x1e4>  // b.pmore
   3f68c:	mov	x2, #0xaaaf                	// #43695
   3f690:	movk	x2, #0xaaaa, lsl #32
   3f694:	lsr	x2, x2, x3
   3f698:	tbnz	w2, #0, 3f6c0 <aarch64_sys_reg_supported_p@@Base+0x208>
   3f69c:	mov	w6, #0xffff8bf3            	// #-29709
   3f6a0:	add	w3, w1, w6
   3f6a4:	cmp	w3, #0x28
   3f6a8:	b.ls	3f7b4 <aarch64_sys_reg_supported_p@@Base+0x2fc>  // b.plast
   3f6ac:	mov	w2, #0xffffeffe            	// #-4098
   3f6b0:	and	w2, w1, w2
   3f6b4:	mov	w3, #0x6408                	// #25608
   3f6b8:	cmp	w2, w3
   3f6bc:	b.ne	3f7c8 <aarch64_sys_reg_supported_p@@Base+0x310>  // b.any
   3f6c0:	tbz	w0, #11, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f6c4:	mov	w4, #0xffff26e0            	// #-55584
   3f6c8:	add	w2, w1, w4
   3f6cc:	cmp	w2, #0x1
   3f6d0:	b.hi	3f840 <aarch64_sys_reg_supported_p@@Base+0x388>  // b.pmore
   3f6d4:	mov	x1, #0x82000000000         	// #8933531975680
   3f6d8:	bics	xzr, x1, x0
   3f6dc:	cset	w0, eq  // eq = none
   3f6e0:	ret
   3f6e4:	mov	w2, #0xda16                	// #55830
   3f6e8:	cmp	w1, w2
   3f6ec:	b.ne	3f6f8 <aarch64_sys_reg_supported_p@@Base+0x240>  // b.any
   3f6f0:	tbnz	x0, #47, 3f520 <aarch64_sys_reg_supported_p@@Base+0x68>
   3f6f4:	b	3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f6f8:	mov	w2, #0xe101                	// #57601
   3f6fc:	cmp	w1, w2
   3f700:	mov	w2, #0xe681                	// #59009
   3f704:	ccmp	w1, w2, #0x4, ne  // ne = any
   3f708:	b.eq	3f71c <aarch64_sys_reg_supported_p@@Base+0x264>  // b.none
   3f70c:	mov	w16, #0xffff18e8            	// #-59160
   3f710:	add	w2, w1, w16
   3f714:	cmp	w2, #0x2
   3f718:	b.hi	3f720 <aarch64_sys_reg_supported_p@@Base+0x268>  // b.pmore
   3f71c:	tbz	w0, #24, 3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f720:	mov	w15, #0xffff1600            	// #-59904
   3f724:	add	w3, w1, w15
   3f728:	cmp	w3, #0x1
   3f72c:	and	w2, w1, #0xfffffffd
   3f730:	mov	w3, #0xe880                	// #59520
   3f734:	ccmp	w2, w3, #0x4, hi  // hi = pmore
   3f738:	b.ne	3f520 <aarch64_sys_reg_supported_p@@Base+0x68>  // b.any
   3f73c:	tbnz	w0, #24, 3f58c <aarch64_sys_reg_supported_p@@Base+0xd4>
   3f740:	b	3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f744:	mov	w3, #0xc214                	// #49684
   3f748:	cmp	w1, w3
   3f74c:	b.eq	3f5b0 <aarch64_sys_reg_supported_p@@Base+0xf8>  // b.none
   3f750:	mov	w11, #0xffff3d68            	// #-49816
   3f754:	add	w4, w1, w11
   3f758:	cmp	w4, #0x11
   3f75c:	b.hi	3f5b4 <aarch64_sys_reg_supported_p@@Base+0xfc>  // b.pmore
   3f760:	mov	x3, #0xf0f                 	// #3855
   3f764:	movk	x3, #0x3, lsl #16
   3f768:	lsr	x3, x3, x4
   3f76c:	tbz	w3, #0, 3f5b4 <aarch64_sys_reg_supported_p@@Base+0xfc>
   3f770:	tbnz	w0, #26, 3f5b4 <aarch64_sys_reg_supported_p@@Base+0xfc>
   3f774:	b	3f4d4 <aarch64_sys_reg_supported_p@@Base+0x1c>
   3f778:	mov	w3, #0xe132                	// #57650
   3f77c:	cmp	w1, w3
   3f780:	b.eq	3f678 <aarch64_sys_reg_supported_p@@Base+0x1c0>  // b.none
   3f784:	mov	w8, #0xffff18e0            	// #-59168
   3f788:	add	w2, w2, w8
   3f78c:	cmp	w2, #0x2
   3f790:	b.ls	3f678 <aarch64_sys_reg_supported_p@@Base+0x1c0>  // b.plast
   3f794:	mov	w2, #0xe099                	// #57497
   3f798:	cmp	w1, w2
   3f79c:	b.eq	3f678 <aarch64_sys_reg_supported_p@@Base+0x1c0>  // b.none
   3f7a0:	and	w3, w1, #0xffffffdf
   3f7a4:	mov	w2, #0xe110                	// #57616
   3f7a8:	cmp	w3, w2
   3f7ac:	b.eq	3f678 <aarch64_sys_reg_supported_p@@Base+0x1c0>  // b.none
   3f7b0:	b	3f67c <aarch64_sys_reg_supported_p@@Base+0x1c4>
   3f7b4:	mov	x2, #0x111                 	// #273
   3f7b8:	movk	x2, #0x1000, lsl #16
   3f7bc:	movk	x2, #0x111, lsl #32
   3f7c0:	lsr	x2, x2, x3
   3f7c4:	tbnz	w2, #0, 3f6c0 <aarch64_sys_reg_supported_p@@Base+0x208>
   3f7c8:	mov	w5, #0xffff9bfe            	// #-25602
   3f7cc:	add	w3, w1, w5
   3f7d0:	cmp	w3, #0x33
   3f7d4:	b.hi	3f6c4 <aarch64_sys_reg_supported_p@@Base+0x20c>  // b.pmore
   3f7d8:	mov	x2, #0x9c11                	// #39953
   3f7dc:	movk	x2, #0x4008, lsl #16
   3f7e0:	movk	x2, #0x88b7, lsl #32
   3f7e4:	movk	x2, #0x8, lsl #48
   3f7e8:	lsr	x2, x2, x3
   3f7ec:	tbnz	w2, #0, 3f6c0 <aarch64_sys_reg_supported_p@@Base+0x208>
   3f7f0:	mov	w3, #0xffff3d50            	// #-49840
   3f7f4:	add	w2, w1, w3
   3f7f8:	cmp	w2, #0x1
   3f7fc:	b.ls	3f84c <aarch64_sys_reg_supported_p@@Base+0x394>  // b.plast
   3f800:	and	w3, w1, #0xfffff7ff
   3f804:	mov	w2, #0xe2b0                	// #58032
   3f808:	cmp	w3, w2
   3f80c:	b.eq	3f84c <aarch64_sys_reg_supported_p@@Base+0x394>  // b.none
   3f810:	mov	w2, #0xf2b0                	// #62128
   3f814:	cmp	w1, w2
   3f818:	b.eq	3f84c <aarch64_sys_reg_supported_p@@Base+0x394>  // b.none
   3f81c:	mov	w2, #0xffff3f7b            	// #-49285
   3f820:	add	w2, w1, w2
   3f824:	cmp	w2, #0x1
   3f828:	b.ls	3f84c <aarch64_sys_reg_supported_p@@Base+0x394>  // b.plast
   3f82c:	mov	w2, #0xc804                	// #51204
   3f830:	cmp	w1, w2
   3f834:	b.eq	3f84c <aarch64_sys_reg_supported_p@@Base+0x394>  // b.none
   3f838:	mov	w0, #0x1                   	// #1
   3f83c:	b	3f6e0 <aarch64_sys_reg_supported_p@@Base+0x228>
   3f840:	mov	w2, #0xda17                	// #55831
   3f844:	cmp	w1, w2
   3f848:	b.ne	3f7f0 <aarch64_sys_reg_supported_p@@Base+0x338>  // b.any
   3f84c:	ubfx	x0, x0, #48, #1
   3f850:	b	3f6e0 <aarch64_sys_reg_supported_p@@Base+0x228>

000000000003f854 <aarch64_pstatefield_supported_p@@Base>:
   3f854:	ldr	w2, [x1, #12]
   3f858:	tbz	w2, #1, 3f8b0 <aarch64_pstatefield_supported_p@@Base+0x5c>
   3f85c:	ldr	w1, [x1, #8]
   3f860:	cmp	w1, #0x4
   3f864:	b.ne	3f870 <aarch64_pstatefield_supported_p@@Base+0x1c>  // b.any
   3f868:	ubfx	w0, w0, #21, #1
   3f86c:	ret
   3f870:	cmp	w1, #0x3
   3f874:	b.ne	3f880 <aarch64_pstatefield_supported_p@@Base+0x2c>  // b.any
   3f878:	ubfx	w0, w0, #5, #1
   3f87c:	b	3f86c <aarch64_pstatefield_supported_p@@Base+0x18>
   3f880:	cmp	w1, #0x19
   3f884:	b.ne	3f890 <aarch64_pstatefield_supported_p@@Base+0x3c>  // b.any
   3f888:	ubfx	x0, x0, #47, #1
   3f88c:	b	3f86c <aarch64_pstatefield_supported_p@@Base+0x18>
   3f890:	cmp	w1, #0x1a
   3f894:	b.ne	3f8a0 <aarch64_pstatefield_supported_p@@Base+0x4c>  // b.any
   3f898:	ubfx	w0, w0, #11, #1
   3f89c:	b	3f86c <aarch64_pstatefield_supported_p@@Base+0x18>
   3f8a0:	ubfx	x0, x0, #48, #1
   3f8a4:	cmp	w1, #0x1c
   3f8a8:	csinc	w0, w0, wzr, eq  // eq = none
   3f8ac:	b	3f86c <aarch64_pstatefield_supported_p@@Base+0x18>
   3f8b0:	mov	w0, #0x1                   	// #1
   3f8b4:	b	3f86c <aarch64_pstatefield_supported_p@@Base+0x18>

000000000003f8b8 <aarch64_sys_ins_reg_has_xt@@Base>:
   3f8b8:	ldr	w0, [x0, #12]
   3f8bc:	ubfx	x0, x0, #2, #1
   3f8c0:	ret

000000000003f8c4 <aarch64_sys_ins_reg_supported_p@@Base>:
   3f8c4:	ldr	w2, [x1, #12]
   3f8c8:	tbz	w2, #1, 3f97c <aarch64_sys_ins_reg_supported_p@@Base+0xb8>
   3f8cc:	ldr	w1, [x1, #8]
   3f8d0:	mov	w2, #0x5be1                	// #23521
   3f8d4:	cmp	w1, w2
   3f8d8:	b.ne	3f8e4 <aarch64_sys_ins_reg_supported_p@@Base+0x20>  // b.any
   3f8dc:	ubfx	w0, w0, #5, #1
   3f8e0:	b	3f8f4 <aarch64_sys_ins_reg_supported_p@@Base+0x30>
   3f8e4:	mov	w2, #0x5be9                	// #23529
   3f8e8:	cmp	w1, w2
   3f8ec:	b.ne	3f8f8 <aarch64_sys_ins_reg_supported_p@@Base+0x34>  // b.any
   3f8f0:	ubfx	x0, x0, #42, #1
   3f8f4:	ret
   3f8f8:	mov	w3, #0xffffffdd            	// #-35
   3f8fc:	and	w3, w1, w3
   3f900:	mov	w5, #0xffffbc4d            	// #-17331
   3f904:	mov	w4, #0x43d4                	// #17364
   3f908:	add	w2, w1, w5
   3f90c:	cmp	w3, w4
   3f910:	ccmp	w2, #0x3, #0x0, ne  // ne = any
   3f914:	b.ls	3f938 <aarch64_sys_ins_reg_supported_p@@Base+0x74>  // b.plast
   3f918:	mov	w4, #0xffffa42d            	// #-23507
   3f91c:	add	w3, w1, w4
   3f920:	cmp	w3, #0x22
   3f924:	b.ls	3f944 <aarch64_sys_ins_reg_supported_p@@Base+0x80>  // b.plast
   3f928:	mov	w3, #0xffffa45d            	// #-23459
   3f92c:	add	w2, w1, w3
   3f930:	cmp	w2, #0x1
   3f934:	b.hi	3f958 <aarch64_sys_ins_reg_supported_p@@Base+0x94>  // b.pmore
   3f938:	tbnz	x0, #48, 3f958 <aarch64_sys_ins_reg_supported_p@@Base+0x94>
   3f93c:	mov	w0, #0x0                   	// #0
   3f940:	b	3f8f4 <aarch64_sys_ins_reg_supported_p@@Base+0x30>
   3f944:	mov	x2, #0x5                   	// #5
   3f948:	movk	x2, #0x505, lsl #16
   3f94c:	movk	x2, #0x5, lsl #32
   3f950:	lsr	x2, x2, x3
   3f954:	tbnz	w2, #0, 3f938 <aarch64_sys_ins_reg_supported_p@@Base+0x74>
   3f958:	mov	w2, #0xffffbc38            	// #-17352
   3f95c:	add	w2, w1, w2
   3f960:	cmp	w2, #0x1
   3f964:	b.ls	3f8dc <aarch64_sys_ins_reg_supported_p@@Base+0x18>  // b.plast
   3f968:	ubfx	x0, x0, #41, #1
   3f96c:	mov	w2, #0x5b98                	// #23448
   3f970:	cmp	w1, w2
   3f974:	csinc	w0, w0, wzr, eq  // eq = none
   3f978:	b	3f8f4 <aarch64_sys_ins_reg_supported_p@@Base+0x30>
   3f97c:	mov	w0, #0x1                   	// #1
   3f980:	b	3f8f4 <aarch64_sys_ins_reg_supported_p@@Base+0x30>

000000000003f984 <init_insn_sequence@@Base>:
   3f984:	stp	x29, x30, [sp, #-32]!
   3f988:	mov	x29, sp
   3f98c:	stp	x19, x20, [sp, #16]
   3f990:	mov	x20, x0
   3f994:	mov	x19, x1
   3f998:	ldr	x0, [x1]
   3f99c:	str	wzr, [x1, #8]
   3f9a0:	str	wzr, [x1, #24]
   3f9a4:	cbz	x0, 3f9ac <init_insn_sequence@@Base+0x28>
   3f9a8:	bl	357e0 <free@plt>
   3f9ac:	str	xzr, [x19]
   3f9b0:	cbz	x20, 3fa0c <init_insn_sequence@@Base+0x88>
   3f9b4:	mov	x0, #0x168                 	// #360
   3f9b8:	bl	354c0 <xmalloc@plt>
   3f9bc:	str	x0, [x19]
   3f9c0:	mov	x1, x20
   3f9c4:	mov	x2, #0x168                 	// #360
   3f9c8:	bl	35090 <memcpy@plt>
   3f9cc:	ldr	x0, [x20, #8]
   3f9d0:	ldr	w20, [x0, #128]
   3f9d4:	and	w20, w20, #0x1
   3f9d8:	ldr	x0, [x19, #16]
   3f9dc:	cbz	x0, 3f9e4 <init_insn_sequence@@Base+0x60>
   3f9e0:	bl	357e0 <free@plt>
   3f9e4:	str	xzr, [x19, #16]
   3f9e8:	cbz	w20, 3fa14 <init_insn_sequence@@Base+0x90>
   3f9ec:	mov	x0, #0x168                 	// #360
   3f9f0:	bl	354c0 <xmalloc@plt>
   3f9f4:	str	x0, [x19, #16]
   3f9f8:	mov	x2, #0x168                 	// #360
   3f9fc:	ldp	x19, x20, [sp, #16]
   3fa00:	mov	w1, #0x0                   	// #0
   3fa04:	ldp	x29, x30, [sp], #32
   3fa08:	b	354b0 <memset@plt>
   3fa0c:	mov	w20, #0x0                   	// #0
   3fa10:	b	3f9d8 <init_insn_sequence@@Base+0x54>
   3fa14:	ldp	x19, x20, [sp, #16]
   3fa18:	ldp	x29, x30, [sp], #32
   3fa1c:	ret

000000000003fa20 <verify_constraints@@Base>:
   3fa20:	stp	x29, x30, [sp, #-320]!
   3fa24:	mov	x29, sp
   3fa28:	stp	x19, x20, [sp, #16]
   3fa2c:	stp	x21, x22, [sp, #32]
   3fa30:	stp	x23, x24, [sp, #48]
   3fa34:	stp	x25, x26, [sp, #64]
   3fa38:	stp	x27, x28, [sp, #80]
   3fa3c:	cbnz	x0, 3fa64 <verify_constraints@@Base+0x44>
   3fa40:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3fa44:	add	x3, x3, #0x710
   3fa48:	adrp	x1, 53000 <xexit@@Base+0x508>
   3fa4c:	adrp	x0, 53000 <xexit@@Base+0x508>
   3fa50:	add	x3, x3, #0x171
   3fa54:	add	x1, x1, #0xfff
   3fa58:	add	x0, x0, #0x6f0
   3fa5c:	mov	w2, #0x12ff                	// #4863
   3fa60:	bl	35b10 <__assert_fail@plt>
   3fa64:	ldr	x22, [x0, #8]
   3fa68:	mov	x20, x0
   3fa6c:	cbnz	x22, 3fa94 <verify_constraints@@Base+0x74>
   3fa70:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3fa74:	add	x3, x3, #0x710
   3fa78:	adrp	x1, 53000 <xexit@@Base+0x508>
   3fa7c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3fa80:	add	x3, x3, #0x171
   3fa84:	add	x1, x1, #0xfff
   3fa88:	add	x0, x0, #0xe2
   3fa8c:	mov	w2, #0x1300                	// #4864
   3fa90:	b	3fa60 <verify_constraints@@Base+0x40>
   3fa94:	mov	x19, x5
   3fa98:	ldr	w5, [x22, #128]
   3fa9c:	mov	x25, x4
   3faa0:	cbnz	w5, 3fab4 <verify_constraints@@Base+0x94>
   3faa4:	ldr	x0, [x19]
   3faa8:	cbnz	x0, 3fadc <verify_constraints@@Base+0xbc>
   3faac:	mov	w21, #0x0                   	// #0
   3fab0:	b	3fb94 <verify_constraints@@Base+0x174>
   3fab4:	cbnz	x19, 3fadc <verify_constraints@@Base+0xbc>
   3fab8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3fabc:	add	x3, x3, #0x710
   3fac0:	adrp	x1, 53000 <xexit@@Base+0x508>
   3fac4:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3fac8:	add	x3, x3, #0x171
   3facc:	add	x1, x1, #0xfff
   3fad0:	add	x0, x0, #0x571
   3fad4:	mov	w2, #0x1306                	// #4870
   3fad8:	b	3fa60 <verify_constraints@@Base+0x40>
   3fadc:	ldr	x0, [x22, #120]
   3fae0:	ldr	x1, [x19]
   3fae4:	tbz	w0, #31, 3fb3c <verify_constraints@@Base+0x11c>
   3fae8:	cbz	x1, 3fb34 <verify_constraints@@Base+0x114>
   3faec:	mov	w0, #0x2                   	// #2
   3faf0:	str	w0, [x25]
   3faf4:	mov	w2, #0x5                   	// #5
   3faf8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fafc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3fb00:	add	x1, x1, #0x57f
   3fb04:	add	x0, x0, #0xb4a
   3fb08:	bl	35a30 <dcgettext@plt>
   3fb0c:	str	x0, [x25, #8]
   3fb10:	mov	w0, #0xffffffff            	// #-1
   3fb14:	mov	w21, #0x4                   	// #4
   3fb18:	str	w0, [x25, #4]
   3fb1c:	mov	w0, #0x1                   	// #1
   3fb20:	str	w0, [x25, #28]
   3fb24:	mov	x1, x19
   3fb28:	mov	x0, x20
   3fb2c:	bl	35880 <init_insn_sequence@plt>
   3fb30:	b	3fb94 <verify_constraints@@Base+0x174>
   3fb34:	mov	w21, #0x0                   	// #0
   3fb38:	b	3fb24 <verify_constraints@@Base+0x104>
   3fb3c:	cbz	x1, 3faac <verify_constraints@@Base+0x8c>
   3fb40:	cmp	w3, #0x0
   3fb44:	ccmp	x2, #0x0, #0x0, eq  // eq = none
   3fb48:	ldr	x0, [x1, #8]
   3fb4c:	b.ne	3fbb4 <verify_constraints@@Base+0x194>  // b.any
   3fb50:	mov	w0, #0x2                   	// #2
   3fb54:	str	w0, [x25]
   3fb58:	mov	w2, #0x5                   	// #5
   3fb5c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fb60:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3fb64:	add	x1, x1, #0x5c5
   3fb68:	add	x0, x0, #0xb4a
   3fb6c:	bl	35a30 <dcgettext@plt>
   3fb70:	str	x0, [x25, #8]
   3fb74:	mov	w0, #0xffffffff            	// #-1
   3fb78:	str	w0, [x25, #4]
   3fb7c:	mov	w0, #0x1                   	// #1
   3fb80:	str	w0, [x25, #28]
   3fb84:	mov	x1, x19
   3fb88:	mov	w21, #0x4                   	// #4
   3fb8c:	mov	x0, #0x0                   	// #0
   3fb90:	bl	35880 <init_insn_sequence@plt>
   3fb94:	mov	w0, w21
   3fb98:	ldp	x19, x20, [sp, #16]
   3fb9c:	ldp	x21, x22, [sp, #32]
   3fba0:	ldp	x23, x24, [sp, #48]
   3fba4:	ldp	x25, x26, [sp, #64]
   3fba8:	ldp	x27, x28, [sp, #80]
   3fbac:	ldp	x29, x30, [sp], #320
   3fbb0:	ret
   3fbb4:	ldr	w0, [x0, #128]
   3fbb8:	and	w21, w0, #0x1
   3fbbc:	tbz	w0, #0, 3fe60 <verify_constraints@@Base+0x440>
   3fbc0:	ldr	x0, [x22, #24]
   3fbc4:	cbz	x0, 3fbd8 <verify_constraints@@Base+0x1b8>
   3fbc8:	ldr	x0, [x0]
   3fbcc:	and	x0, x0, #0x1ffffff0
   3fbd0:	and	x0, x0, #0xfffffffff000001f
   3fbd4:	cbnz	x0, 3fc08 <verify_constraints@@Base+0x1e8>
   3fbd8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fbdc:	add	x1, x1, #0x5ec
   3fbe0:	mov	w0, #0x2                   	// #2
   3fbe4:	mov	w2, #0x5                   	// #5
   3fbe8:	str	w0, [x25]
   3fbec:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3fbf0:	add	x0, x0, #0xb4a
   3fbf4:	bl	35a30 <dcgettext@plt>
   3fbf8:	str	x0, [x25, #8]
   3fbfc:	mov	w0, #0xffffffff            	// #-1
   3fc00:	str	w0, [x25, #4]
   3fc04:	b	3fe54 <verify_constraints@@Base+0x434>
   3fc08:	tbnz	w5, #0, 3fc24 <verify_constraints@@Base+0x204>
   3fc0c:	mov	w0, #0x2                   	// #2
   3fc10:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fc14:	mov	w2, #0x5                   	// #5
   3fc18:	add	x1, x1, #0x615
   3fc1c:	str	w0, [x25]
   3fc20:	b	3fbec <verify_constraints@@Base+0x1cc>
   3fc24:	ldrb	w2, [x1, #28]
   3fc28:	str	w2, [sp, #116]
   3fc2c:	ldr	w2, [x1, #40]
   3fc30:	ldr	w0, [x1, #24]
   3fc34:	str	w2, [sp, #120]
   3fc38:	stp	xzr, xzr, [sp, #152]
   3fc3c:	cmp	w0, #0xc1
   3fc40:	stp	xzr, xzr, [sp, #168]
   3fc44:	stp	xzr, xzr, [sp, #184]
   3fc48:	str	xzr, [sp, #200]
   3fc4c:	stp	xzr, xzr, [sp, #208]
   3fc50:	stp	xzr, xzr, [sp, #224]
   3fc54:	stp	xzr, xzr, [sp, #240]
   3fc58:	str	xzr, [sp, #256]
   3fc5c:	b.eq	3fc84 <verify_constraints@@Base+0x264>  // b.none
   3fc60:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3fc64:	add	x3, x3, #0x710
   3fc68:	adrp	x1, 53000 <xexit@@Base+0x508>
   3fc6c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3fc70:	add	x3, x3, #0x171
   3fc74:	add	x1, x1, #0xfff
   3fc78:	add	x0, x0, #0x643
   3fc7c:	mov	w2, #0x1352                	// #4946
   3fc80:	b	3fa60 <verify_constraints@@Base+0x40>
   3fc84:	ldr	w0, [x1, #80]
   3fc88:	cmp	w0, #0xa4
   3fc8c:	b.ne	3fd18 <verify_constraints@@Base+0x2f8>  // b.any
   3fc90:	add	x1, x1, #0x50
   3fc94:	add	x0, sp, #0x98
   3fc98:	mov	x2, #0x38                  	// #56
   3fc9c:	bl	35090 <memcpy@plt>
   3fca0:	mov	w0, #0x1                   	// #1
   3fca4:	str	w0, [sp, #108]
   3fca8:	mov	x0, x22
   3fcac:	bl	351b0 <aarch64_num_of_operands@plt>
   3fcb0:	add	x27, x20, #0x18
   3fcb4:	add	x28, sp, #0x108
   3fcb8:	str	w0, [sp, #124]
   3fcbc:	adrp	x0, 58000 <xexit@@Base+0x5508>
   3fcc0:	add	x0, x0, #0x584
   3fcc4:	mov	w24, #0xffffffff            	// #-1
   3fcc8:	mov	w26, #0x0                   	// #0
   3fccc:	mov	w23, #0x0                   	// #0
   3fcd0:	mov	w21, #0x0                   	// #0
   3fcd4:	str	wzr, [sp, #112]
   3fcd8:	str	x0, [sp, #128]
   3fcdc:	add	x0, sp, #0xd0
   3fce0:	str	x0, [sp, #136]
   3fce4:	ldr	w0, [sp, #124]
   3fce8:	cmp	w26, w0
   3fcec:	b.lt	3fd20 <verify_constraints@@Base+0x300>  // b.tstop
   3fcf0:	cbnz	w21, 3fddc <verify_constraints@@Base+0x3bc>
   3fcf4:	adrp	x3, 58000 <xexit@@Base+0x5508>
   3fcf8:	add	x3, x3, #0x710
   3fcfc:	adrp	x1, 53000 <xexit@@Base+0x508>
   3fd00:	adrp	x0, 54000 <xexit@@Base+0x1508>
   3fd04:	add	x3, x3, #0x171
   3fd08:	add	x1, x1, #0xfff
   3fd0c:	add	x0, x0, #0x668
   3fd10:	mov	w2, #0x138b                	// #5003
   3fd14:	b	3fa60 <verify_constraints@@Base+0x40>
   3fd18:	str	wzr, [sp, #108]
   3fd1c:	b	3fca8 <verify_constraints@@Base+0x288>
   3fd20:	mov	x1, x27
   3fd24:	mov	x2, #0x38                  	// #56
   3fd28:	mov	x0, x28
   3fd2c:	bl	35090 <memcpy@plt>
   3fd30:	ldr	w1, [x27]
   3fd34:	ldrb	w0, [x27, #4]
   3fd38:	ldr	w2, [x27, #16]
   3fd3c:	cmp	w1, #0xaa
   3fd40:	b.hi	3fd9c <verify_constraints@@Base+0x37c>  // b.pmore
   3fd44:	cmp	w1, #0xa2
   3fd48:	b.hi	3fdbc <verify_constraints@@Base+0x39c>  // b.pmore
   3fd4c:	cmp	w1, #0x19
   3fd50:	b.hi	3fd84 <verify_constraints@@Base+0x364>  // b.pmore
   3fd54:	cmp	w1, #0x16
   3fd58:	b.ls	3fd90 <verify_constraints@@Base+0x370>  // b.plast
   3fd5c:	ldr	w1, [sp, #120]
   3fd60:	cmp	w2, w1
   3fd64:	b.ne	3fd70 <verify_constraints@@Base+0x350>  // b.any
   3fd68:	add	w23, w23, #0x1
   3fd6c:	str	w26, [sp, #112]
   3fd70:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3fd74:	cmp	w21, w0, uxtb
   3fd78:	csel	w21, w0, w21, cc  // cc = lo, ul, last
   3fd7c:	and	w21, w21, #0xff
   3fd80:	b	3fd90 <verify_constraints@@Base+0x370>
   3fd84:	sub	w1, w1, #0x1b
   3fd88:	cmp	w1, #0x1
   3fd8c:	b.ls	3fd5c <verify_constraints@@Base+0x33c>  // b.plast
   3fd90:	add	w26, w26, #0x1
   3fd94:	add	x27, x27, #0x38
   3fd98:	b	3fce4 <verify_constraints@@Base+0x2c4>
   3fd9c:	sub	w1, w1, #0xbd
   3fda0:	cmp	w1, #0xf
   3fda4:	b.hi	3fd90 <verify_constraints@@Base+0x370>  // b.pmore
   3fda8:	ldr	x3, [sp, #128]
   3fdac:	ldrb	w1, [x3, w1, uxtw]
   3fdb0:	adr	x3, 3fdbc <verify_constraints@@Base+0x39c>
   3fdb4:	add	x1, x3, w1, sxtb #2
   3fdb8:	br	x1
   3fdbc:	strb	w0, [sp, #268]
   3fdc0:	mov	x1, x28
   3fdc4:	ldr	x0, [sp, #136]
   3fdc8:	mov	w24, w26
   3fdcc:	str	w2, [sp, #280]
   3fdd0:	mov	x2, #0x38                  	// #56
   3fdd4:	bl	35090 <memcpy@plt>
   3fdd8:	b	3fd90 <verify_constraints@@Base+0x370>
   3fddc:	ldr	w0, [x20, #40]
   3fde0:	ldrb	w28, [x20, #28]
   3fde4:	mov	w26, w0
   3fde8:	ldr	w0, [x22, #128]
   3fdec:	tbnz	w0, #1, 3fdfc <verify_constraints@@Base+0x3dc>
   3fdf0:	mov	w0, w28
   3fdf4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3fdf8:	and	w21, w0, #0xff
   3fdfc:	ldr	w0, [sp, #108]
   3fe00:	cbz	w0, 3fec4 <verify_constraints@@Base+0x4a4>
   3fe04:	tbz	w24, #31, 3fe20 <verify_constraints@@Base+0x400>
   3fe08:	mov	w0, #0x2                   	// #2
   3fe0c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fe10:	mov	w2, #0x5                   	// #5
   3fe14:	add	x1, x1, #0x67b
   3fe18:	str	w0, [x25]
   3fe1c:	b	3fbec <verify_constraints@@Base+0x1cc>
   3fe20:	ldrb	w0, [sp, #212]
   3fe24:	cmp	w0, #0x18
   3fe28:	b.eq	3fe9c <verify_constraints@@Base+0x47c>  // b.none
   3fe2c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fe30:	add	x1, x1, #0x6ab
   3fe34:	mov	w0, #0x2                   	// #2
   3fe38:	mov	w2, #0x5                   	// #5
   3fe3c:	str	w0, [x25]
   3fe40:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3fe44:	add	x0, x0, #0xb4a
   3fe48:	bl	35a30 <dcgettext@plt>
   3fe4c:	str	w24, [x25, #4]
   3fe50:	str	x0, [x25, #8]
   3fe54:	mov	w0, #0x1                   	// #1
   3fe58:	mov	w21, #0x4                   	// #4
   3fe5c:	str	w0, [x25, #28]
   3fe60:	ldr	w0, [x19, #24]
   3fe64:	mov	x2, #0x168                 	// #360
   3fe68:	ldr	x3, [x19, #16]
   3fe6c:	add	w1, w0, #0x1
   3fe70:	str	w1, [x19, #24]
   3fe74:	mov	x1, x20
   3fe78:	add	x0, x3, w0, sxtw #3
   3fe7c:	bl	35090 <memcpy@plt>
   3fe80:	ldr	w0, [x19, #8]
   3fe84:	ldr	w1, [x19, #24]
   3fe88:	cmp	w1, w0
   3fe8c:	b.lt	3fb94 <verify_constraints@@Base+0x174>  // b.tstop
   3fe90:	mov	x1, x19
   3fe94:	mov	x0, #0x0                   	// #0
   3fe98:	b	3fb2c <verify_constraints@@Base+0x10c>
   3fe9c:	ldr	w1, [sp, #168]
   3fea0:	ldr	w0, [sp, #224]
   3fea4:	cmp	w1, w0
   3fea8:	b.eq	3fec4 <verify_constraints@@Base+0x4a4>  // b.none
   3feac:	mov	w0, #0x2                   	// #2
   3feb0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3feb4:	mov	w2, #0x5                   	// #5
   3feb8:	add	x1, x1, #0x6e1
   3febc:	str	w0, [x25]
   3fec0:	b	3fe40 <verify_constraints@@Base+0x420>
   3fec4:	mov	x0, x22
   3fec8:	bl	35660 <aarch64_is_destructive_by_operands@plt>
   3fecc:	cmp	w0, #0x0
   3fed0:	cset	w0, ne  // ne = any
   3fed4:	add	w0, w0, #0x1
   3fed8:	cbnz	w23, 3ff08 <verify_constraints@@Base+0x4e8>
   3fedc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3fee0:	add	x1, x1, #0x71d
   3fee4:	mov	w0, #0x2                   	// #2
   3fee8:	mov	w2, #0x5                   	// #5
   3feec:	str	w0, [x25]
   3fef0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3fef4:	add	x0, x0, #0xb4a
   3fef8:	bl	35a30 <dcgettext@plt>
   3fefc:	str	wzr, [x25, #4]
   3ff00:	str	x0, [x25, #8]
   3ff04:	b	3fe54 <verify_constraints@@Base+0x434>
   3ff08:	ldr	w1, [sp, #120]
   3ff0c:	cmp	w1, w26
   3ff10:	b.eq	3ff2c <verify_constraints@@Base+0x50c>  // b.none
   3ff14:	mov	w0, #0x2                   	// #2
   3ff18:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3ff1c:	mov	w2, #0x5                   	// #5
   3ff20:	add	x1, x1, #0x764
   3ff24:	str	w0, [x25]
   3ff28:	b	3fef0 <verify_constraints@@Base+0x4d0>
   3ff2c:	cmp	w23, w0
   3ff30:	b.le	3ff60 <verify_constraints@@Base+0x540>
   3ff34:	mov	w0, #0x2                   	// #2
   3ff38:	str	w0, [x25]
   3ff3c:	mov	w2, #0x5                   	// #5
   3ff40:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3ff44:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   3ff48:	add	x1, x1, #0x79e
   3ff4c:	add	x0, x0, #0xb4a
   3ff50:	bl	35a30 <dcgettext@plt>
   3ff54:	str	x0, [x25, #8]
   3ff58:	ldr	w0, [sp, #112]
   3ff5c:	b	3fc00 <verify_constraints@@Base+0x1e0>
   3ff60:	cbz	w28, 3ff94 <verify_constraints@@Base+0x574>
   3ff64:	ldr	w0, [sp, #116]
   3ff68:	cbz	w0, 3ff94 <verify_constraints@@Base+0x574>
   3ff6c:	ldrb	w0, [sp, #116]
   3ff70:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   3ff74:	cmp	w21, w0, uxtb
   3ff78:	b.eq	3ff94 <verify_constraints@@Base+0x574>  // b.none
   3ff7c:	mov	w0, #0x2                   	// #2
   3ff80:	adrp	x1, 54000 <xexit@@Base+0x1508>
   3ff84:	mov	w2, #0x5                   	// #5
   3ff88:	add	x1, x1, #0x7d3
   3ff8c:	str	w0, [x25]
   3ff90:	b	3fef0 <verify_constraints@@Base+0x4d0>
   3ff94:	mov	w21, #0x0                   	// #0
   3ff98:	b	3fe60 <verify_constraints@@Base+0x440>

000000000003ff9c <aarch64_sve_dupm_mov_immediate_p@@Base>:
   3ff9c:	lsl	w3, w1, #2
   3ffa0:	mov	x2, #0xffffffffffffffff    	// #-1
   3ffa4:	lsl	x2, x2, x3
   3ffa8:	lsl	x2, x2, x3
   3ffac:	tst	x2, x0
   3ffb0:	b.eq	3ffbc <aarch64_sve_dupm_mov_immediate_p@@Base+0x20>  // b.none
   3ffb4:	bics	xzr, x2, x0
   3ffb8:	b.ne	40028 <aarch64_sve_dupm_mov_immediate_p@@Base+0x8c>  // b.any
   3ffbc:	cmp	w1, #0x4
   3ffc0:	b.le	3fff0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x54>
   3ffc4:	lsr	x1, x0, #32
   3ffc8:	cmp	w0, w1
   3ffcc:	b.eq	3fff8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x5c>  // b.none
   3ffd0:	tst	w0, #0xff
   3ffd4:	b.ne	3ffe0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x44>  // b.any
   3ffd8:	mov	x1, #0x100                 	// #256
   3ffdc:	sdiv	x0, x0, x1
   3ffe0:	add	x0, x0, #0x80
   3ffe4:	cmp	x0, #0xff
   3ffe8:	cset	w0, hi  // hi = pmore
   3ffec:	ret
   3fff0:	cmp	w1, #0x2
   3fff4:	b.le	4000c <aarch64_sve_dupm_mov_immediate_p@@Base+0x70>
   3fff8:	lsr	w1, w0, #16
   3fffc:	cmp	w1, w0, uxth
   40000:	b.eq	40014 <aarch64_sve_dupm_mov_immediate_p@@Base+0x78>  // b.none
   40004:	sxtw	x0, w0
   40008:	b	3ffd0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x34>
   4000c:	cmp	w1, #0x1
   40010:	b.eq	40028 <aarch64_sve_dupm_mov_immediate_p@@Base+0x8c>  // b.none
   40014:	ubfx	w1, w0, #8, #8
   40018:	cmp	w1, w0, uxtb
   4001c:	b.eq	40028 <aarch64_sve_dupm_mov_immediate_p@@Base+0x8c>  // b.none
   40020:	sxth	x0, w0
   40024:	b	3ffd0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x34>
   40028:	mov	w0, #0x0                   	// #0
   4002c:	b	3ffec <aarch64_sve_dupm_mov_immediate_p@@Base+0x50>

0000000000040030 <aarch64_match_operands_constraint@@Base>:
   40030:	stp	x29, x30, [sp, #-144]!
   40034:	mov	x29, sp
   40038:	stp	x19, x20, [sp, #16]
   4003c:	mov	x19, x1
   40040:	ldr	x1, [x0, #8]
   40044:	stp	x21, x22, [sp, #32]
   40048:	stp	x23, x24, [sp, #48]
   4004c:	mov	x23, x0
   40050:	stp	x25, x26, [sp, #64]
   40054:	stp	x27, x28, [sp, #80]
   40058:	ldrb	w2, [x1, #132]
   4005c:	cbz	w2, 400b8 <aarch64_match_operands_constraint@@Base+0x88>
   40060:	sxtw	x0, w2
   40064:	mov	x3, #0x38                  	// #56
   40068:	madd	x0, x0, x3, x23
   4006c:	ldr	w3, [x23, #40]
   40070:	ldr	w0, [x0, #40]
   40074:	cmp	w3, w0
   40078:	b.eq	400b8 <aarch64_match_operands_constraint@@Base+0x88>  // b.none
   4007c:	cbnz	x19, 400a4 <aarch64_match_operands_constraint@@Base+0x74>
   40080:	mov	w20, #0x0                   	// #0
   40084:	mov	w0, w20
   40088:	ldp	x19, x20, [sp, #16]
   4008c:	ldp	x21, x22, [sp, #32]
   40090:	ldp	x23, x24, [sp, #48]
   40094:	ldp	x25, x26, [sp, #64]
   40098:	ldp	x27, x28, [sp, #80]
   4009c:	ldp	x29, x30, [sp], #144
   400a0:	ret
   400a4:	mov	w0, #0x5                   	// #5
   400a8:	mov	w20, #0x0                   	// #0
   400ac:	stp	w0, w2, [x19]
   400b0:	str	xzr, [x19, #8]
   400b4:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   400b8:	add	x26, sp, #0x80
   400bc:	add	x1, x1, #0x38
   400c0:	mov	x3, x26
   400c4:	mov	x0, x23
   400c8:	mov	w2, #0xffffffff            	// #-1
   400cc:	bl	353a0 <aarch64_find_best_match@plt>
   400d0:	cbnz	w0, 400ec <aarch64_match_operands_constraint@@Base+0xbc>
   400d4:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   400d8:	mov	x0, #0xffffffffffff0004    	// #-65532
   400dc:	mov	w20, #0x0                   	// #0
   400e0:	movk	x0, #0x0, lsl #16
   400e4:	stp	x0, xzr, [x19]
   400e8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   400ec:	ldr	x0, [x23, #8]
   400f0:	ldr	x1, [x0, #120]
   400f4:	tbnz	w1, #28, 401b0 <aarch64_match_operands_constraint@@Base+0x180>
   400f8:	ldr	x1, [x23, #8]
   400fc:	add	x3, x23, #0x1c
   40100:	mov	x0, #0x0                   	// #0
   40104:	mov	x5, #0x38                  	// #56
   40108:	add	x1, x1, #0x20
   4010c:	ldr	w2, [x1, x0, lsl #2]
   40110:	cbz	w2, 4012c <aarch64_match_operands_constraint@@Base+0xfc>
   40114:	mul	x2, x0, x5
   40118:	ldrb	w4, [x26, x0]
   4011c:	add	x0, x0, #0x1
   40120:	cmp	x0, #0x6
   40124:	strb	w4, [x3, x2]
   40128:	b.ne	4010c <aarch64_match_operands_constraint@@Base+0xdc>  // b.any
   4012c:	adrp	x24, 97000 <aarch64_operands@@Base+0x16bc0>
   40130:	add	x28, x23, #0x18
   40134:	adrp	x25, 58000 <xexit@@Base+0x5508>
   40138:	mov	x22, x28
   4013c:	ldr	x0, [x24, #4032]
   40140:	str	x0, [sp, #104]
   40144:	add	x0, x25, #0x710
   40148:	mov	w21, #0x0                   	// #0
   4014c:	str	x0, [sp, #96]
   40150:	add	x0, x0, #0x1a5
   40154:	str	x0, [sp, #112]
   40158:	sxtw	x0, w21
   4015c:	ldr	x27, [x23, #8]
   40160:	add	x1, x0, #0x8
   40164:	ldr	w20, [x27, x1, lsl #2]
   40168:	cbz	w20, 42434 <aarch64_match_operands_constraint@@Base+0x2404>
   4016c:	mov	x1, #0x38                  	// #56
   40170:	madd	x0, x0, x1, x23
   40174:	ldrb	w0, [x0, #72]
   40178:	tbnz	w0, #0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   4017c:	ldr	w0, [x28]
   40180:	ldrb	w25, [x28, #4]
   40184:	cmp	w20, w0
   40188:	b.eq	401e8 <aarch64_match_operands_constraint@@Base+0x1b8>  // b.none
   4018c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40190:	add	x3, x3, #0x710
   40194:	adrp	x1, 53000 <xexit@@Base+0x508>
   40198:	adrp	x0, 54000 <xexit@@Base+0x1508>
   4019c:	add	x3, x3, #0x184
   401a0:	add	x1, x1, #0xfff
   401a4:	add	x0, x0, #0x808
   401a8:	mov	w2, #0x5b3                 	// #1459
   401ac:	bl	35b10 <__assert_fail@plt>
   401b0:	bl	351b0 <aarch64_num_of_operands@plt>
   401b4:	add	x2, x23, #0x1c
   401b8:	mov	x1, #0x0                   	// #0
   401bc:	mov	x3, #0x38                  	// #56
   401c0:	cmp	w0, w1
   401c4:	b.le	400f8 <aarch64_match_operands_constraint@@Base+0xc8>
   401c8:	mul	x4, x1, x3
   401cc:	add	x1, x1, #0x1
   401d0:	add	x5, x26, x1
   401d4:	ldrb	w4, [x2, x4]
   401d8:	ldurb	w5, [x5, #-1]
   401dc:	cmp	w5, w4
   401e0:	b.eq	401c0 <aarch64_match_operands_constraint@@Base+0x190>  // b.none
   401e4:	b	400d4 <aarch64_match_operands_constraint@@Base+0xa4>
   401e8:	mov	w7, w20
   401ec:	mov	x0, #0x30                  	// #48
   401f0:	ldr	x1, [sp, #104]
   401f4:	mul	x0, x7, x0
   401f8:	ldr	w0, [x1, x0]
   401fc:	sub	w0, w0, #0x1
   40200:	cmp	w0, #0xc
   40204:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   40208:	adrp	x2, 58000 <xexit@@Base+0x5508>
   4020c:	add	x2, x2, #0x594
   40210:	ldrh	w0, [x2, w0, uxtw #1]
   40214:	adr	x1, 40220 <aarch64_match_operands_constraint@@Base+0x1f0>
   40218:	add	x0, x1, w0, sxth #2
   4021c:	br	x0
   40220:	cmp	w20, #0xd
   40224:	b.ne	402d4 <aarch64_match_operands_constraint@@Base+0x2a4>  // b.any
   40228:	and	w0, w21, #0xfffffffd
   4022c:	cmp	w0, #0x1
   40230:	b.eq	40258 <aarch64_match_operands_constraint@@Base+0x228>  // b.none
   40234:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40238:	add	x3, x3, #0x710
   4023c:	adrp	x1, 53000 <xexit@@Base+0x508>
   40240:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40244:	add	x3, x3, #0x184
   40248:	add	x1, x1, #0xfff
   4024c:	add	x0, x0, #0x842
   40250:	mov	w2, #0x5bb                 	// #1467
   40254:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40258:	ldur	w0, [x28, #-40]
   4025c:	tbz	w0, #0, 40294 <aarch64_match_operands_constraint@@Base+0x264>
   40260:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40264:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40268:	sub	w21, w21, #0x1
   4026c:	add	x1, x1, #0x857
   40270:	add	x0, x0, #0xb4a
   40274:	mov	w2, #0x5                   	// #5
   40278:	bl	35a30 <dcgettext@plt>
   4027c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40280:	mov	w1, #0x2                   	// #2
   40284:	mov	w20, #0x0                   	// #0
   40288:	stp	w1, w21, [x19]
   4028c:	str	x0, [x19, #8]
   40290:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40294:	ldr	w1, [x28, #16]
   40298:	add	w0, w0, #0x1
   4029c:	cmp	w1, w0
   402a0:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   402a4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   402a8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   402ac:	add	x1, x1, #0x879
   402b0:	add	x0, x0, #0xb4a
   402b4:	mov	w2, #0x5                   	// #5
   402b8:	bl	35a30 <dcgettext@plt>
   402bc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   402c0:	mov	w1, #0x2                   	// #2
   402c4:	mov	w20, #0x0                   	// #0
   402c8:	stp	w1, w21, [x19]
   402cc:	str	x0, [x19, #8]
   402d0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   402d4:	cmp	w20, #0x9
   402d8:	b.ne	403a4 <aarch64_match_operands_constraint@@Base+0x374>  // b.any
   402dc:	cmp	w21, #0x1
   402e0:	b.eq	40308 <aarch64_match_operands_constraint@@Base+0x2d8>  // b.none
   402e4:	adrp	x3, 58000 <xexit@@Base+0x5508>
   402e8:	add	x3, x3, #0x710
   402ec:	adrp	x1, 53000 <xexit@@Base+0x508>
   402f0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   402f4:	add	x3, x3, #0x184
   402f8:	add	x1, x1, #0xfff
   402fc:	add	x0, x0, #0x895
   40300:	mov	w2, #0x5ce                 	// #1486
   40304:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40308:	ldr	w0, [x22]
   4030c:	bl	35760 <aarch64_get_operand_class@plt>
   40310:	cmp	w0, #0xc
   40314:	b.ne	402e4 <aarch64_match_operands_constraint@@Base+0x2b4>  // b.any
   40318:	ldrb	w0, [x23, #128]
   4031c:	add	x27, x23, #0x50
   40320:	tbnz	w0, #1, 40360 <aarch64_match_operands_constraint@@Base+0x330>
   40324:	ldr	x0, [x22, #16]
   40328:	bl	35a50 <aarch64_sys_ins_reg_has_xt@plt>
   4032c:	cbz	w0, 403a4 <aarch64_match_operands_constraint@@Base+0x374>
   40330:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40334:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40338:	add	x1, x1, #0x8fe
   4033c:	add	x0, x0, #0xb4a
   40340:	mov	w2, #0x5                   	// #5
   40344:	bl	35a30 <dcgettext@plt>
   40348:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   4034c:	mov	x1, #0x9                   	// #9
   40350:	mov	w20, #0x0                   	// #0
   40354:	movk	x1, #0x1, lsl #32
   40358:	stp	x1, x0, [x19]
   4035c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40360:	ldr	x0, [x22, #16]
   40364:	bl	35a50 <aarch64_sys_ins_reg_has_xt@plt>
   40368:	mov	w20, w0
   4036c:	cbnz	w0, 4039c <aarch64_match_operands_constraint@@Base+0x36c>
   40370:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40374:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40378:	add	x1, x1, #0x8ea
   4037c:	add	x0, x0, #0xb4a
   40380:	mov	w2, #0x5                   	// #5
   40384:	bl	35a30 <dcgettext@plt>
   40388:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   4038c:	mov	x1, #0x9                   	// #9
   40390:	movk	x1, #0x1, lsl #32
   40394:	stp	x1, x0, [x19]
   40398:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4039c:	ldrb	w0, [x27, #48]
   403a0:	tbz	w0, #1, 40324 <aarch64_match_operands_constraint@@Base+0x2f4>
   403a4:	sub	w1, w25, #0x3
   403a8:	cmp	w1, #0x1
   403ac:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   403b0:	mov	x0, x28
   403b4:	bl	35790 <aarch64_stack_pointer_p@plt>
   403b8:	mov	w20, w0
   403bc:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   403c0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   403c4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   403c8:	add	x1, x1, #0x90f
   403cc:	add	x0, x0, #0xb4a
   403d0:	mov	w2, #0x5                   	// #5
   403d4:	bl	35a30 <dcgettext@plt>
   403d8:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   403dc:	mov	w1, #0x9                   	// #9
   403e0:	stp	w1, w21, [x19]
   403e4:	str	x0, [x19, #8]
   403e8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   403ec:	sub	w20, w20, #0xc4
   403f0:	cmp	w20, #0x9
   403f4:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   403f8:	adrp	x0, 58000 <xexit@@Base+0x5508>
   403fc:	add	x0, x0, #0x5b0
   40400:	ldrb	w0, [x0, w20, uxtw]
   40404:	adr	x1, 40410 <aarch64_match_operands_constraint@@Base+0x3e0>
   40408:	add	x0, x1, w0, sxtb #2
   4040c:	br	x0
   40410:	ldr	x20, [x24, #4032]
   40414:	mov	x0, #0x30                  	// #48
   40418:	madd	x20, x7, x0, x20
   4041c:	mov	x0, x20
   40420:	bl	3d660 <print_aarch64_disassembler_options@@Base+0x2ac>
   40424:	ldr	w6, [x28, #16]
   40428:	mov	w2, #0x1                   	// #1
   4042c:	ldr	w1, [x20, #16]
   40430:	ubfx	x1, x1, #5, #3
   40434:	lsl	w3, w2, w1
   40438:	sub	w3, w3, #0x1
   4043c:	sxtw	x5, w3
   40440:	cmp	x6, w3, sxtw
   40444:	b.ls	404bc <aarch64_match_operands_constraint@@Base+0x48c>  // b.plast
   40448:	and	x0, x5, #0xfffffffffffffff7
   4044c:	cmp	x0, #0x7
   40450:	b.eq	40478 <aarch64_match_operands_constraint@@Base+0x448>  // b.none
   40454:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40458:	add	x3, x3, #0x710
   4045c:	adrp	x1, 53000 <xexit@@Base+0x508>
   40460:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40464:	add	x3, x3, #0x184
   40468:	add	x1, x1, #0xfff
   4046c:	add	x0, x0, #0x92f
   40470:	mov	w2, #0x5fa                 	// #1530
   40474:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40478:	cmp	x5, #0xf
   4047c:	mov	w2, #0x5                   	// #5
   40480:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40484:	b.ne	404b0 <aarch64_match_operands_constraint@@Base+0x480>  // b.any
   40488:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4048c:	add	x1, x1, #0x947
   40490:	add	x0, x0, #0xb4a
   40494:	bl	35a30 <dcgettext@plt>
   40498:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   4049c:	mov	w1, #0x9                   	// #9
   404a0:	mov	w20, #0x0                   	// #0
   404a4:	stp	w1, w21, [x19]
   404a8:	str	x0, [x19, #8]
   404ac:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   404b0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   404b4:	add	x1, x1, #0x957
   404b8:	b	40490 <aarch64_match_operands_constraint@@Base+0x460>
   404bc:	ldr	x3, [x28, #24]
   404c0:	and	w0, w0, #0xff
   404c4:	sub	w0, w0, w1
   404c8:	lsl	w2, w2, w0
   404cc:	sub	w2, w2, #0x1
   404d0:	tbnz	x3, #63, 404dc <aarch64_match_operands_constraint@@Base+0x4ac>
   404d4:	cmp	x3, w2, sxtw
   404d8:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   404dc:	mov	w1, w21
   404e0:	mov	x0, x19
   404e4:	mov	w20, #0x0                   	// #0
   404e8:	bl	3da2c <print_aarch64_disassembler_options@@Base+0x678>
   404ec:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   404f0:	mov	w0, w25
   404f4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   404f8:	and	w0, w0, #0xff
   404fc:	mov	w2, #0x40                  	// #64
   40500:	ldr	x1, [x28, #24]
   40504:	udiv	w2, w2, w0
   40508:	sub	w2, w2, #0x1
   4050c:	tbnz	x1, #63, 40518 <aarch64_match_operands_constraint@@Base+0x4e8>
   40510:	cmp	x1, w2, sxtw
   40514:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40518:	mov	w1, w21
   4051c:	mov	x0, x19
   40520:	mov	w20, #0x0                   	// #0
   40524:	bl	3da2c <print_aarch64_disassembler_options@@Base+0x678>
   40528:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4052c:	ldr	x0, [x27, #120]
   40530:	ldrb	w1, [x28, #16]
   40534:	ubfx	w0, w0, #24, #3
   40538:	ubfx	x1, x1, #5, #3
   4053c:	cmp	w1, w0
   40540:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   40544:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40548:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4054c:	add	x1, x1, #0x966
   40550:	add	x0, x0, #0xb4a
   40554:	mov	w2, #0x5                   	// #5
   40558:	bl	35a30 <dcgettext@plt>
   4055c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40560:	mov	w1, #0x9                   	// #9
   40564:	mov	w20, #0x0                   	// #0
   40568:	stp	w1, w21, [x19]
   4056c:	str	x0, [x19, #8]
   40570:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40574:	ldr	w0, [x28, #16]
   40578:	cmp	w0, #0x7
   4057c:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   40580:	ldr	x0, [x24, #4032]
   40584:	mov	x1, #0x30                  	// #48
   40588:	madd	x0, x7, x1, x0
   4058c:	bl	3d660 <print_aarch64_disassembler_options@@Base+0x2ac>
   40590:	cmp	w0, #0x3
   40594:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   40598:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4059c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   405a0:	add	x1, x1, #0x97c
   405a4:	add	x0, x0, #0xb4a
   405a8:	mov	w2, #0x5                   	// #5
   405ac:	bl	35a30 <dcgettext@plt>
   405b0:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   405b4:	mov	w1, #0x9                   	// #9
   405b8:	mov	w20, #0x0                   	// #0
   405bc:	stp	w1, w21, [x19]
   405c0:	str	x0, [x19, #8]
   405c4:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   405c8:	cmp	w20, #0x4d
   405cc:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   405d0:	ldr	x0, [x28, #16]
   405d4:	ldr	w0, [x0, #32]
   405d8:	and	w0, w0, #0xe
   405dc:	cmp	w0, #0xe
   405e0:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   405e4:	cbz	x19, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   405e8:	mov	w0, #0x2                   	// #2
   405ec:	stp	w0, w21, [x19]
   405f0:	str	xzr, [x19, #8]
   405f4:	add	w21, w21, #0x1
   405f8:	add	x28, x28, #0x38
   405fc:	cmp	w21, #0x6
   40600:	b.ne	40158 <aarch64_match_operands_constraint@@Base+0x128>  // b.any
   40604:	mov	w20, #0x1                   	// #1
   40608:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4060c:	ldr	w2, [x27, #16]
   40610:	ldrb	w0, [x28, #28]
   40614:	cmp	w2, #0x3f
   40618:	b.hi	40634 <aarch64_match_operands_constraint@@Base+0x604>  // b.pmore
   4061c:	cmp	w2, #0x35
   40620:	b.hi	4065c <aarch64_match_operands_constraint@@Base+0x62c>  // b.pmore
   40624:	cmp	w2, #0x13
   40628:	b.eq	406f4 <aarch64_match_operands_constraint@@Base+0x6c4>  // b.none
   4062c:	cmp	w2, #0x15
   40630:	b.eq	406f4 <aarch64_match_operands_constraint@@Base+0x6c4>  // b.none
   40634:	tbz	w0, #1, 4243c <aarch64_match_operands_constraint@@Base+0x240c>
   40638:	adrp	x3, 58000 <xexit@@Base+0x5508>
   4063c:	add	x3, x3, #0x710
   40640:	adrp	x1, 53000 <xexit@@Base+0x508>
   40644:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40648:	add	x3, x3, #0x184
   4064c:	add	x1, x1, #0xfff
   40650:	add	x0, x0, #0x9c3
   40654:	mov	w2, #0x658                 	// #1624
   40658:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   4065c:	sub	w2, w2, #0x36
   40660:	cmp	w2, #0x9
   40664:	b.hi	40634 <aarch64_match_operands_constraint@@Base+0x604>  // b.pmore
   40668:	adrp	x3, 58000 <xexit@@Base+0x5508>
   4066c:	add	x3, x3, #0x5bc
   40670:	ldrb	w1, [x3, w2, uxtw]
   40674:	adr	x2, 40680 <aarch64_match_operands_constraint@@Base+0x650>
   40678:	add	x1, x2, w1, sxtb #2
   4067c:	br	x1
   40680:	tbz	w0, #1, 4243c <aarch64_match_operands_constraint@@Base+0x240c>
   40684:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40688:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4068c:	add	x1, x1, #0x98b
   40690:	add	x0, x0, #0xb4a
   40694:	mov	w2, #0x5                   	// #5
   40698:	bl	35a30 <dcgettext@plt>
   4069c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   406a0:	mov	w1, #0x2                   	// #2
   406a4:	mov	w20, #0x0                   	// #0
   406a8:	stp	w1, w21, [x19]
   406ac:	str	x0, [x19, #8]
   406b0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   406b4:	and	w3, w0, #0x6
   406b8:	cmp	w3, #0x2
   406bc:	b.ne	4243c <aarch64_match_operands_constraint@@Base+0x240c>  // b.any
   406c0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   406c4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   406c8:	add	x1, x1, #0x98b
   406cc:	add	x0, x0, #0xb4a
   406d0:	mov	w2, #0x5                   	// #5
   406d4:	str	w3, [sp, #96]
   406d8:	bl	35a30 <dcgettext@plt>
   406dc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   406e0:	ldr	w3, [sp, #96]
   406e4:	mov	w20, #0x0                   	// #0
   406e8:	stp	w3, w21, [x19]
   406ec:	str	x0, [x19, #8]
   406f0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   406f4:	tbnz	w0, #1, 4243c <aarch64_match_operands_constraint@@Base+0x240c>
   406f8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   406fc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40700:	add	x1, x1, #0x9a8
   40704:	add	x0, x0, #0xb4a
   40708:	mov	w2, #0x5                   	// #5
   4070c:	bl	35a30 <dcgettext@plt>
   40710:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40714:	mov	w1, #0x2                   	// #2
   40718:	mov	w20, #0x0                   	// #0
   4071c:	stp	w1, w21, [x19]
   40720:	str	x0, [x19, #8]
   40724:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40728:	mov	w0, w25
   4072c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   40730:	and	w5, w0, #0xff
   40734:	mov	w2, #0xffffffc0            	// #-64
   40738:	ldrsw	x1, [x28, #20]
   4073c:	mov	w3, #0x3f                  	// #63
   40740:	mul	w2, w5, w2
   40744:	mul	w3, w5, w3
   40748:	cmp	x1, w2, sxtw
   4074c:	b.lt	40758 <aarch64_match_operands_constraint@@Base+0x728>  // b.tstop
   40750:	cmp	x1, w3, sxtw
   40754:	b.le	4076c <aarch64_match_operands_constraint@@Base+0x73c>
   40758:	mov	w1, w21
   4075c:	mov	x0, x19
   40760:	mov	w20, #0x0                   	// #0
   40764:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40768:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4076c:	and	x0, x0, #0xff
   40770:	sdiv	x2, x1, x0
   40774:	msub	x0, x2, x0, x1
   40778:	cbz	x0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   4077c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40780:	mov	w0, #0x7                   	// #7
   40784:	mov	w20, #0x0                   	// #0
   40788:	stp	w0, w21, [x19]
   4078c:	str	xzr, [x19, #8]
   40790:	str	w5, [x19, #16]
   40794:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40798:	ldr	w0, [x28, #20]
   4079c:	add	w0, w0, #0x100
   407a0:	cmp	w0, #0x1ff
   407a4:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   407a8:	mov	w1, w21
   407ac:	mov	x0, x19
   407b0:	mov	w3, #0xff                  	// #255
   407b4:	mov	w2, #0xffffff00            	// #-256
   407b8:	mov	w20, #0x0                   	// #0
   407bc:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   407c0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   407c4:	mov	w0, w25
   407c8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   407cc:	ldrsw	x1, [x28, #20]
   407d0:	tbnz	x1, #63, 4081c <aarch64_match_operands_constraint@@Base+0x7ec>
   407d4:	cmp	x1, #0xff
   407d8:	b.gt	407ec <aarch64_match_operands_constraint@@Base+0x7bc>
   407dc:	and	x0, x0, #0xff
   407e0:	sdiv	x2, x1, x0
   407e4:	msub	x0, x2, x0, x1
   407e8:	cbnz	x0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   407ec:	adrp	x1, 54000 <xexit@@Base+0x1508>
   407f0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   407f4:	add	x1, x1, #0x9dd
   407f8:	add	x0, x0, #0xb4a
   407fc:	mov	w2, #0x5                   	// #5
   40800:	bl	35a30 <dcgettext@plt>
   40804:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40808:	mov	w1, #0x9                   	// #9
   4080c:	mov	w20, #0x0                   	// #0
   40810:	stp	w1, w21, [x19]
   40814:	str	x0, [x19, #8]
   40818:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4081c:	cmn	x1, #0x100
   40820:	b.lt	407ec <aarch64_match_operands_constraint@@Base+0x7bc>  // b.tstop
   40824:	b	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40828:	ldr	w0, [x28, #20]
   4082c:	mov	w1, #0x1ff8                	// #8184
   40830:	add	w2, w0, #0x1, lsl #12
   40834:	cmp	w2, w1
   40838:	b.ls	40858 <aarch64_match_operands_constraint@@Base+0x828>  // b.plast
   4083c:	mov	w1, w21
   40840:	mov	x0, x19
   40844:	mov	w3, #0xff8                 	// #4088
   40848:	mov	w2, #0xfffff000            	// #-4096
   4084c:	mov	w20, #0x0                   	// #0
   40850:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40854:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40858:	tst	x0, #0x7
   4085c:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   40860:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40864:	mov	w0, #0x7                   	// #7
   40868:	mov	w20, #0x0                   	// #0
   4086c:	stp	w0, w21, [x19]
   40870:	mov	w0, #0x8                   	// #8
   40874:	str	xzr, [x19, #8]
   40878:	str	w0, [x19, #16]
   4087c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40880:	ldr	w0, [x28, #20]
   40884:	add	w1, w0, #0x400
   40888:	cmp	w1, #0x7f0
   4088c:	b.ls	408ac <aarch64_match_operands_constraint@@Base+0x87c>  // b.plast
   40890:	mov	w1, w21
   40894:	mov	x0, x19
   40898:	mov	w3, #0x3f0                 	// #1008
   4089c:	mov	w2, #0xfffffc00            	// #-1024
   408a0:	mov	w20, #0x0                   	// #0
   408a4:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   408a8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   408ac:	tst	x0, #0xf
   408b0:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   408b4:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   408b8:	mov	w0, #0x7                   	// #7
   408bc:	mov	w20, #0x0                   	// #0
   408c0:	stp	w0, w21, [x19]
   408c4:	mov	w0, #0x10                  	// #16
   408c8:	str	xzr, [x19, #8]
   408cc:	str	w0, [x19, #16]
   408d0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   408d4:	ldr	w0, [x28, #20]
   408d8:	mov	w1, #0x1ff0                	// #8176
   408dc:	add	w2, w0, #0x1, lsl #12
   408e0:	cmp	w2, w1
   408e4:	b.ls	40904 <aarch64_match_operands_constraint@@Base+0x8d4>  // b.plast
   408e8:	mov	w1, w21
   408ec:	mov	x0, x19
   408f0:	mov	w3, #0xff0                 	// #4080
   408f4:	mov	w2, #0xfffff000            	// #-4096
   408f8:	mov	w20, #0x0                   	// #0
   408fc:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40900:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40904:	tst	x0, #0xf
   40908:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   4090c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40910:	mov	w0, #0x7                   	// #7
   40914:	mov	w20, #0x0                   	// #0
   40918:	stp	w0, w21, [x19]
   4091c:	mov	w0, #0x10                  	// #16
   40920:	str	xzr, [x19, #8]
   40924:	str	w0, [x19, #16]
   40928:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4092c:	cmp	w21, #0x1
   40930:	b.eq	40958 <aarch64_match_operands_constraint@@Base+0x928>  // b.none
   40934:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40938:	add	x3, x3, #0x710
   4093c:	add	x3, x3, #0x184
   40940:	mov	w2, #0x6b3                 	// #1715
   40944:	adrp	x1, 53000 <xexit@@Base+0x508>
   40948:	adrp	x0, 53000 <xexit@@Base+0x508>
   4094c:	add	x1, x1, #0xfff
   40950:	add	x0, x0, #0xa5
   40954:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40958:	ldr	w0, [x28, #24]
   4095c:	cbz	w0, 4099c <aarch64_match_operands_constraint@@Base+0x96c>
   40960:	ldr	w0, [x28, #20]
   40964:	cmp	w0, #0x1e
   40968:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   4096c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40970:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40974:	add	x1, x1, #0xa03
   40978:	add	x0, x0, #0xb4a
   4097c:	mov	w2, #0x5                   	// #5
   40980:	bl	35a30 <dcgettext@plt>
   40984:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40988:	mov	x1, #0x9                   	// #9
   4098c:	mov	w20, #0x0                   	// #0
   40990:	movk	x1, #0x1, lsl #32
   40994:	stp	x1, x0, [x19]
   40998:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4099c:	ldr	w1, [x27, #32]
   409a0:	ldurb	w0, [x28, #-52]
   409a4:	cmp	w1, #0x25
   409a8:	b.ne	40a14 <aarch64_match_operands_constraint@@Base+0x9e4>  // b.any
   409ac:	ldr	x1, [x27, #120]
   409b0:	ubfx	w1, w1, #24, #3
   409b4:	cmp	w1, #0x1
   409b8:	b.eq	40a0c <aarch64_match_operands_constraint@@Base+0x9dc>  // b.none
   409bc:	ldurb	w20, [x28, #-40]
   409c0:	ubfx	x20, x20, #5, #3
   409c4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   409c8:	and	w0, w0, #0xff
   409cc:	ldr	w1, [x28, #20]
   409d0:	mul	w0, w0, w20
   409d4:	cmp	w1, w0
   409d8:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   409dc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   409e0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   409e4:	add	x1, x1, #0xa1b
   409e8:	add	x0, x0, #0xb4a
   409ec:	mov	w2, #0x5                   	// #5
   409f0:	bl	35a30 <dcgettext@plt>
   409f4:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   409f8:	mov	x1, #0x9                   	// #9
   409fc:	mov	w20, #0x0                   	// #0
   40a00:	movk	x1, #0x1, lsl #32
   40a04:	stp	x1, x0, [x19]
   40a08:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40a0c:	mov	w20, w21
   40a10:	b	409c4 <aarch64_match_operands_constraint@@Base+0x994>
   40a14:	ldurb	w20, [x28, #-40]
   40a18:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   40a1c:	and	w0, w0, #0xff
   40a20:	ubfx	x20, x20, #5, #3
   40a24:	mul	w20, w0, w20
   40a28:	ldurb	w0, [x28, #-52]
   40a2c:	bl	35940 <aarch64_get_qualifier_nelem@plt>
   40a30:	b	409c8 <aarch64_match_operands_constraint@@Base+0x998>
   40a34:	mov	w0, w25
   40a38:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   40a3c:	ldr	x1, [x28, #40]
   40a40:	and	w0, w0, #0xff
   40a44:	cbz	x1, 40ae4 <aarch64_match_operands_constraint@@Base+0xab4>
   40a48:	ldr	x2, [sp, #112]
   40a4c:	cmp	w0, #0x10
   40a50:	ldp	x2, x3, [x2]
   40a54:	stp	x2, x3, [sp, #128]
   40a58:	b.ls	40a7c <aarch64_match_operands_constraint@@Base+0xa4c>  // b.plast
   40a5c:	ldr	x0, [sp, #96]
   40a60:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40a64:	add	x1, x1, #0xb7e
   40a68:	mov	w2, #0x200                 	// #512
   40a6c:	add	x3, x0, #0x1b5
   40a70:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40a74:	add	x0, x0, #0x679
   40a78:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40a7c:	sub	w0, w0, #0x1
   40a80:	ldrb	w0, [x26, x0]
   40a84:	cmp	w0, #0xff
   40a88:	b.ne	40aac <aarch64_match_operands_constraint@@Base+0xa7c>  // b.any
   40a8c:	ldr	x0, [sp, #96]
   40a90:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40a94:	mov	w2, #0x203                 	// #515
   40a98:	add	x1, x1, #0xb7e
   40a9c:	add	x3, x0, #0x1b5
   40aa0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40aa4:	add	x0, x0, #0xc1c
   40aa8:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40aac:	cmp	x1, w0, uxtb
   40ab0:	b.eq	40ae4 <aarch64_match_operands_constraint@@Base+0xab4>  // b.none
   40ab4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40ab8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40abc:	add	x1, x1, #0xa39
   40ac0:	add	x0, x0, #0xb4a
   40ac4:	mov	w2, #0x5                   	// #5
   40ac8:	bl	35a30 <dcgettext@plt>
   40acc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40ad0:	mov	w1, #0x9                   	// #9
   40ad4:	mov	w20, #0x0                   	// #0
   40ad8:	stp	w1, w21, [x19]
   40adc:	str	x0, [x19, #8]
   40ae0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40ae4:	ldr	w1, [x28, #32]
   40ae8:	cmp	w1, #0xd
   40aec:	b.hi	40b04 <aarch64_match_operands_constraint@@Base+0xad4>  // b.pmore
   40af0:	mov	x0, #0x1                   	// #1
   40af4:	lsl	x0, x0, x1
   40af8:	mov	x1, #0x3120                	// #12576
   40afc:	tst	x0, x1
   40b00:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   40b04:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40b08:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40b0c:	add	x1, x1, #0xa4e
   40b10:	add	x0, x0, #0xb4a
   40b14:	mov	w2, #0x5                   	// #5
   40b18:	bl	35a30 <dcgettext@plt>
   40b1c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40b20:	mov	w1, #0x9                   	// #9
   40b24:	mov	w20, #0x0                   	// #0
   40b28:	stp	w1, w21, [x19]
   40b2c:	str	x0, [x19, #8]
   40b30:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40b34:	mov	w0, w25
   40b38:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   40b3c:	ldrsw	x1, [x28, #20]
   40b40:	and	w5, w0, #0xff
   40b44:	mov	w3, #0xfff                 	// #4095
   40b48:	mul	w3, w5, w3
   40b4c:	tbnz	x1, #63, 40b58 <aarch64_match_operands_constraint@@Base+0xb28>
   40b50:	cmp	x1, w3, sxtw
   40b54:	b.le	40b70 <aarch64_match_operands_constraint@@Base+0xb40>
   40b58:	mov	w1, w21
   40b5c:	mov	x0, x19
   40b60:	mov	w2, #0x0                   	// #0
   40b64:	mov	w20, #0x0                   	// #0
   40b68:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40b6c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40b70:	and	x0, x0, #0xff
   40b74:	sdiv	x2, x1, x0
   40b78:	msub	x0, x2, x0, x1
   40b7c:	cbz	x0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40b80:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40b84:	mov	w0, #0x7                   	// #7
   40b88:	mov	w20, #0x0                   	// #0
   40b8c:	stp	w0, w21, [x19]
   40b90:	str	xzr, [x19, #8]
   40b94:	str	w5, [x19, #16]
   40b98:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40b9c:	ldr	x0, [x24, #4032]
   40ba0:	mov	x1, #0x30                  	// #48
   40ba4:	ldr	x20, [x28, #16]
   40ba8:	madd	x0, x7, x1, x0
   40bac:	ldr	w1, [x0, #16]
   40bb0:	tbz	w1, #3, 40be0 <aarch64_match_operands_constraint@@Base+0xbb0>
   40bb4:	tst	x20, #0x3
   40bb8:	b.eq	40bdc <aarch64_match_operands_constraint@@Base+0xbac>  // b.none
   40bbc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40bc0:	mov	w0, #0x7                   	// #7
   40bc4:	mov	w20, #0x0                   	// #0
   40bc8:	stp	w0, w21, [x19]
   40bcc:	mov	w0, #0x4                   	// #4
   40bd0:	str	xzr, [x19, #8]
   40bd4:	str	w0, [x19, #16]
   40bd8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40bdc:	asr	x20, x20, #2
   40be0:	bl	3d660 <print_aarch64_disassembler_options@@Base+0x2ac>
   40be4:	and	w1, w0, #0xff
   40be8:	mov	x0, x20
   40bec:	bl	3d6c4 <print_aarch64_disassembler_options@@Base+0x310>
   40bf0:	mov	w20, w0
   40bf4:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40bf8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40bfc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40c00:	add	x1, x1, #0xa6c
   40c04:	add	x0, x0, #0xb4a
   40c08:	mov	w2, #0x5                   	// #5
   40c0c:	bl	35a30 <dcgettext@plt>
   40c10:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40c14:	mov	w1, #0x9                   	// #9
   40c18:	stp	w1, w21, [x19]
   40c1c:	str	x0, [x19, #8]
   40c20:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40c24:	mov	x3, #0x7                   	// #7
   40c28:	mov	x2, #0xfffffffffffffff8    	// #-8
   40c2c:	ldr	w1, [x28, #24]
   40c30:	cbz	w1, 40c58 <aarch64_match_operands_constraint@@Base+0xc28>
   40c34:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40c38:	add	x3, x3, #0x710
   40c3c:	add	x3, x3, #0x184
   40c40:	mov	w2, #0x728                 	// #1832
   40c44:	adrp	x1, 53000 <xexit@@Base+0x508>
   40c48:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40c4c:	add	x1, x1, #0xfff
   40c50:	add	x0, x0, #0xa83
   40c54:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40c58:	tbnz	w0, #2, 40c80 <aarch64_match_operands_constraint@@Base+0xc50>
   40c5c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40c60:	add	x3, x3, #0x710
   40c64:	add	x3, x3, #0x184
   40c68:	mov	w2, #0x729                 	// #1833
   40c6c:	adrp	x1, 53000 <xexit@@Base+0x508>
   40c70:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40c74:	add	x1, x1, #0xfff
   40c78:	add	x0, x0, #0xa9d
   40c7c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40c80:	ldr	w6, [x28, #20]
   40c84:	ldrb	w0, [x28, #36]
   40c88:	and	w0, w0, #0x1
   40c8c:	cbz	w6, 40cc4 <aarch64_match_operands_constraint@@Base+0xc94>
   40c90:	cbnz	w0, 40cc8 <aarch64_match_operands_constraint@@Base+0xc98>
   40c94:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40c98:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40c9c:	add	x1, x1, #0xaaf
   40ca0:	add	x0, x0, #0xb4a
   40ca4:	mov	w2, #0x5                   	// #5
   40ca8:	bl	35a30 <dcgettext@plt>
   40cac:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40cb0:	mov	w1, #0x9                   	// #9
   40cb4:	mov	w20, #0x0                   	// #0
   40cb8:	stp	w1, w21, [x19]
   40cbc:	str	x0, [x19, #8]
   40cc0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40cc4:	cbz	w0, 40cd4 <aarch64_match_operands_constraint@@Base+0xca4>
   40cc8:	ldr	w0, [x28, #32]
   40ccc:	cmp	w0, #0xf
   40cd0:	b.ne	40c94 <aarch64_match_operands_constraint@@Base+0xc64>  // b.any
   40cd4:	ldr	x0, [x24, #4032]
   40cd8:	mov	x1, #0x30                  	// #48
   40cdc:	sxtw	x5, w6
   40ce0:	madd	x7, x7, x1, x0
   40ce4:	ldr	w0, [x7, #16]
   40ce8:	ubfx	x0, x0, #5, #3
   40cec:	add	w1, w0, #0x1
   40cf0:	mov	x0, x1
   40cf4:	mul	x2, x1, x2
   40cf8:	mul	x3, x1, x3
   40cfc:	cmp	x2, w6, sxtw
   40d00:	b.gt	40d0c <aarch64_match_operands_constraint@@Base+0xcdc>
   40d04:	cmp	x3, x5
   40d08:	b.ge	40d20 <aarch64_match_operands_constraint@@Base+0xcf0>  // b.tcont
   40d0c:	mov	w1, w21
   40d10:	mov	x0, x19
   40d14:	mov	w20, #0x0                   	// #0
   40d18:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40d1c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40d20:	sdiv	x2, x5, x1
   40d24:	msub	x1, x2, x1, x5
   40d28:	cbz	x1, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40d2c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40d30:	mov	w1, #0x7                   	// #7
   40d34:	mov	w20, #0x0                   	// #0
   40d38:	stp	w1, w21, [x19]
   40d3c:	str	xzr, [x19, #8]
   40d40:	str	w0, [x19, #16]
   40d44:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40d48:	mov	x3, #0x3f                  	// #63
   40d4c:	mov	x2, #0x0                   	// #0
   40d50:	ldr	w1, [x28, #24]
   40d54:	cbz	w1, 40d6c <aarch64_match_operands_constraint@@Base+0xd3c>
   40d58:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40d5c:	add	x3, x3, #0x710
   40d60:	add	x3, x3, #0x184
   40d64:	mov	w2, #0x753                 	// #1875
   40d68:	b	40c44 <aarch64_match_operands_constraint@@Base+0xc14>
   40d6c:	tbnz	w0, #2, 40d84 <aarch64_match_operands_constraint@@Base+0xd54>
   40d70:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40d74:	add	x3, x3, #0x710
   40d78:	add	x3, x3, #0x184
   40d7c:	mov	w2, #0x754                 	// #1876
   40d80:	b	40c6c <aarch64_match_operands_constraint@@Base+0xc3c>
   40d84:	ldr	x0, [x24, #4032]
   40d88:	mov	x1, #0x30                  	// #48
   40d8c:	ldrb	w5, [x28, #36]
   40d90:	madd	x7, x7, x1, x0
   40d94:	tst	x5, #0x3
   40d98:	ldr	w0, [x7, #16]
   40d9c:	ubfx	x1, x0, #5, #3
   40da0:	mov	w0, #0x1                   	// #1
   40da4:	lsl	w0, w0, w1
   40da8:	sxtw	x1, w0
   40dac:	mul	x2, x1, x2
   40db0:	mul	x3, x1, x3
   40db4:	b.eq	40de8 <aarch64_match_operands_constraint@@Base+0xdb8>  // b.none
   40db8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40dbc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40dc0:	add	x1, x1, #0xaaf
   40dc4:	add	x0, x0, #0xb4a
   40dc8:	mov	w2, #0x5                   	// #5
   40dcc:	bl	35a30 <dcgettext@plt>
   40dd0:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40dd4:	mov	w1, #0x9                   	// #9
   40dd8:	mov	w20, #0x0                   	// #0
   40ddc:	stp	w1, w21, [x19]
   40de0:	str	x0, [x19, #8]
   40de4:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40de8:	ldrsw	x5, [x28, #20]
   40dec:	cmp	x2, x5
   40df0:	b.gt	40dfc <aarch64_match_operands_constraint@@Base+0xdcc>
   40df4:	cmp	x3, x5
   40df8:	b.ge	40e10 <aarch64_match_operands_constraint@@Base+0xde0>  // b.tcont
   40dfc:	mov	w1, w21
   40e00:	mov	x0, x19
   40e04:	mov	w20, #0x0                   	// #0
   40e08:	bl	3d784 <print_aarch64_disassembler_options@@Base+0x3d0>
   40e0c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40e10:	sdiv	x2, x5, x1
   40e14:	msub	x1, x2, x1, x5
   40e18:	cbz	x1, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40e1c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40e20:	mov	w1, #0x7                   	// #7
   40e24:	mov	w20, #0x0                   	// #0
   40e28:	stp	w1, w21, [x19]
   40e2c:	str	xzr, [x19, #8]
   40e30:	str	w0, [x19, #16]
   40e34:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40e38:	ldr	w1, [x28, #24]
   40e3c:	cbnz	w1, 40e64 <aarch64_match_operands_constraint@@Base+0xe34>
   40e40:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40e44:	add	x3, x3, #0x710
   40e48:	add	x3, x3, #0x184
   40e4c:	mov	w2, #0x776                 	// #1910
   40e50:	adrp	x1, 53000 <xexit@@Base+0x508>
   40e54:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40e58:	add	x1, x1, #0xfff
   40e5c:	add	x0, x0, #0xa84
   40e60:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40e64:	tbnz	w0, #2, 40e7c <aarch64_match_operands_constraint@@Base+0xe4c>
   40e68:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40e6c:	add	x3, x3, #0x710
   40e70:	add	x3, x3, #0x184
   40e74:	mov	w2, #0x777                 	// #1911
   40e78:	b	40c6c <aarch64_match_operands_constraint@@Base+0xc3c>
   40e7c:	ldr	x0, [x24, #4032]
   40e80:	ldr	w0, [x0, #6160]
   40e84:	tbz	w0, #8, 40eac <aarch64_match_operands_constraint@@Base+0xe7c>
   40e88:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40e8c:	add	x3, x3, #0x710
   40e90:	adrp	x1, 53000 <xexit@@Base+0x508>
   40e94:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40e98:	add	x3, x3, #0x184
   40e9c:	add	x1, x1, #0xfff
   40ea0:	add	x0, x0, #0xac7
   40ea4:	mov	w2, #0x778                 	// #1912
   40ea8:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40eac:	ldr	w0, [x28, #32]
   40eb0:	cmp	w0, #0x5
   40eb4:	b.eq	40edc <aarch64_match_operands_constraint@@Base+0xeac>  // b.none
   40eb8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40ebc:	add	x3, x3, #0x710
   40ec0:	add	x3, x3, #0x184
   40ec4:	mov	w2, #0x779                 	// #1913
   40ec8:	adrp	x1, 53000 <xexit@@Base+0x508>
   40ecc:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40ed0:	add	x1, x1, #0xfff
   40ed4:	add	x0, x0, #0xfa8
   40ed8:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40edc:	ldrb	w0, [x28, #36]
   40ee0:	tbz	w0, #0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   40ee4:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40ee8:	add	x3, x3, #0x710
   40eec:	adrp	x1, 53000 <xexit@@Base+0x508>
   40ef0:	adrp	x0, 54000 <xexit@@Base+0x1508>
   40ef4:	add	x3, x3, #0x184
   40ef8:	add	x1, x1, #0xfff
   40efc:	add	x0, x0, #0xaf9
   40f00:	mov	w2, #0x77a                 	// #1914
   40f04:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   40f08:	mov	w2, #0x20                  	// #32
   40f0c:	ldr	w1, [x28, #24]
   40f10:	cbnz	w1, 40f28 <aarch64_match_operands_constraint@@Base+0xef8>
   40f14:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40f18:	add	x3, x3, #0x710
   40f1c:	add	x3, x3, #0x184
   40f20:	mov	w2, #0x78c                 	// #1932
   40f24:	b	40e50 <aarch64_match_operands_constraint@@Base+0xe20>
   40f28:	tbnz	w0, #2, 40f40 <aarch64_match_operands_constraint@@Base+0xf10>
   40f2c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   40f30:	add	x3, x3, #0x710
   40f34:	add	x3, x3, #0x184
   40f38:	mov	w2, #0x78d                 	// #1933
   40f3c:	b	40c6c <aarch64_match_operands_constraint@@Base+0xc3c>
   40f40:	ldr	x0, [x24, #4032]
   40f44:	mov	x1, #0x30                  	// #48
   40f48:	madd	x0, x7, x1, x0
   40f4c:	ldr	w0, [x0, #16]
   40f50:	tbz	w0, #8, 40f90 <aarch64_match_operands_constraint@@Base+0xf60>
   40f54:	ldr	w0, [x28, #20]
   40f58:	cmp	w0, #0x1f
   40f5c:	b.ne	40f90 <aarch64_match_operands_constraint@@Base+0xf60>  // b.any
   40f60:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40f64:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40f68:	add	x1, x1, #0xb1d
   40f6c:	add	x0, x0, #0xb4a
   40f70:	mov	w2, #0x5                   	// #5
   40f74:	bl	35a30 <dcgettext@plt>
   40f78:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40f7c:	mov	w1, #0x9                   	// #9
   40f80:	mov	w20, #0x0                   	// #0
   40f84:	stp	w1, w21, [x19]
   40f88:	str	x0, [x19, #8]
   40f8c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40f90:	ldr	w1, [x28, #32]
   40f94:	mov	w0, #0x1                   	// #1
   40f98:	lsl	w0, w0, w1
   40f9c:	tst	w0, w2
   40fa0:	b.eq	40fc4 <aarch64_match_operands_constraint@@Base+0xf94>  // b.none
   40fa4:	ldr	x0, [x24, #4032]
   40fa8:	mov	x1, #0x30                  	// #48
   40fac:	madd	x7, x7, x1, x0
   40fb0:	ldr	x1, [x28, #40]
   40fb4:	ldr	w0, [x7, #16]
   40fb8:	ubfx	x0, x0, #5, #3
   40fbc:	cmp	x1, x0
   40fc0:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   40fc4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   40fc8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   40fcc:	add	x1, x1, #0xaaf
   40fd0:	add	x0, x0, #0xb4a
   40fd4:	mov	w2, #0x5                   	// #5
   40fd8:	bl	35a30 <dcgettext@plt>
   40fdc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   40fe0:	mov	w1, #0x9                   	// #9
   40fe4:	mov	w20, #0x0                   	// #0
   40fe8:	stp	w1, w21, [x19]
   40fec:	str	x0, [x19, #8]
   40ff0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   40ff4:	mov	w1, #0x20                  	// #32
   40ff8:	ldr	w2, [x28, #24]
   40ffc:	cbnz	w2, 41014 <aarch64_match_operands_constraint@@Base+0xfe4>
   41000:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41004:	add	x3, x3, #0x710
   41008:	add	x3, x3, #0x184
   4100c:	mov	w2, #0x7b5                 	// #1973
   41010:	b	40e50 <aarch64_match_operands_constraint@@Base+0xe20>
   41014:	tbnz	w0, #2, 4102c <aarch64_match_operands_constraint@@Base+0xffc>
   41018:	adrp	x3, 58000 <xexit@@Base+0x5508>
   4101c:	add	x3, x3, #0x710
   41020:	add	x3, x3, #0x184
   41024:	mov	w2, #0x7b6                 	// #1974
   41028:	b	40c6c <aarch64_match_operands_constraint@@Base+0xc3c>
   4102c:	ldr	w2, [x28, #32]
   41030:	mov	w0, #0x1                   	// #1
   41034:	lsl	w0, w0, w2
   41038:	tst	w0, w1
   4103c:	b.eq	4104c <aarch64_match_operands_constraint@@Base+0x101c>  // b.none
   41040:	ldr	x0, [x28, #40]
   41044:	cmp	x0, #0x3
   41048:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   4104c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41050:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41054:	add	x1, x1, #0xaaf
   41058:	add	x0, x0, #0xb4a
   4105c:	mov	w2, #0x5                   	// #5
   41060:	bl	35a30 <dcgettext@plt>
   41064:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41068:	mov	w1, #0x9                   	// #9
   4106c:	mov	w20, #0x0                   	// #0
   41070:	stp	w1, w21, [x19]
   41074:	str	x0, [x19, #8]
   41078:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4107c:	cmp	w20, #0x26
   41080:	b.ne	410c0 <aarch64_match_operands_constraint@@Base+0x1090>  // b.any
   41084:	mov	w0, w25
   41088:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   4108c:	and	w0, w0, #0xff
   41090:	mov	w2, #0x10                  	// #16
   41094:	udiv	w2, w2, w0
   41098:	ldr	x0, [x28, #24]
   4109c:	sub	w2, w2, #0x1
   410a0:	tbnz	x0, #63, 410ac <aarch64_match_operands_constraint@@Base+0x107c>
   410a4:	cmp	x0, w2, sxtw
   410a8:	b.le	410c0 <aarch64_match_operands_constraint@@Base+0x1090>
   410ac:	mov	w1, w21
   410b0:	mov	x0, x19
   410b4:	mov	w20, #0x0                   	// #0
   410b8:	bl	3da2c <print_aarch64_disassembler_options@@Base+0x678>
   410bc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   410c0:	ldr	x0, [x27, #120]
   410c4:	cmp	w20, #0x24
   410c8:	ubfx	w0, w0, #24, #3
   410cc:	b.eq	410fc <aarch64_match_operands_constraint@@Base+0x10cc>  // b.none
   410d0:	sub	w20, w20, #0x25
   410d4:	cmp	w20, #0x1
   410d8:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   410dc:	sub	w1, w0, #0x1
   410e0:	cmp	w1, #0x3
   410e4:	b.ls	41160 <aarch64_match_operands_constraint@@Base+0x1130>  // b.plast
   410e8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   410ec:	add	x3, x3, #0x710
   410f0:	add	x3, x3, #0x184
   410f4:	mov	w2, #0x7ea                 	// #2026
   410f8:	b	41118 <aarch64_match_operands_constraint@@Base+0x10e8>
   410fc:	sub	w1, w0, #0x1
   41100:	cmp	w1, #0x3
   41104:	b.ls	4112c <aarch64_match_operands_constraint@@Base+0x10fc>  // b.plast
   41108:	adrp	x3, 58000 <xexit@@Base+0x5508>
   4110c:	add	x3, x3, #0x710
   41110:	add	x3, x3, #0x184
   41114:	mov	w2, #0x7df                 	// #2015
   41118:	adrp	x1, 53000 <xexit@@Base+0x508>
   4111c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   41120:	add	x1, x1, #0xfff
   41124:	add	x0, x0, #0xb3f
   41128:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   4112c:	cmp	w0, #0x1
   41130:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41134:	ldrb	w1, [x28, #16]
   41138:	ubfx	x1, x1, #5, #3
   4113c:	cmp	w0, w1
   41140:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41144:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41148:	mov	w1, #0x8                   	// #8
   4114c:	mov	w20, #0x0                   	// #0
   41150:	stp	w1, w21, [x19]
   41154:	str	xzr, [x19, #8]
   41158:	str	w0, [x19, #16]
   4115c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41160:	ldrb	w1, [x28, #16]
   41164:	ubfx	x1, x1, #5, #3
   41168:	cmp	w0, w1
   4116c:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41170:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41174:	mov	w1, #0x8                   	// #8
   41178:	mov	w20, #0x0                   	// #0
   4117c:	stp	w1, w21, [x19]
   41180:	str	xzr, [x19, #8]
   41184:	str	w0, [x19, #16]
   41188:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4118c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   41190:	sbfiz	x2, x25, #5, #32
   41194:	sxtw	x8, w25
   41198:	ldr	x10, [x0, #3776]
   4119c:	ldr	x5, [x28, #16]
   411a0:	add	x3, x10, x2
   411a4:	ldr	w9, [x3, #24]
   411a8:	cmp	w9, #0x2
   411ac:	b.ne	424a4 <aarch64_match_operands_constraint@@Base+0x2474>  // b.any
   411b0:	ldr	w2, [x10, x2]
   411b4:	ldr	w3, [x3, #4]
   411b8:	cmp	x5, w2, sxtw
   411bc:	b.lt	411c8 <aarch64_match_operands_constraint@@Base+0x1198>  // b.tstop
   411c0:	cmp	x5, w3, sxtw
   411c4:	b.le	424a4 <aarch64_match_operands_constraint@@Base+0x2474>
   411c8:	mov	w1, w21
   411cc:	mov	x0, x19
   411d0:	mov	w20, #0x0                   	// #0
   411d4:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   411d8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   411dc:	ldr	w2, [x28, #32]
   411e0:	cmp	w2, #0x5
   411e4:	b.eq	41218 <aarch64_match_operands_constraint@@Base+0x11e8>  // b.none
   411e8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   411ec:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   411f0:	add	x1, x1, #0xb54
   411f4:	add	x0, x0, #0xb4a
   411f8:	mov	w2, #0x5                   	// #5
   411fc:	bl	35a30 <dcgettext@plt>
   41200:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41204:	mov	w1, #0x9                   	// #9
   41208:	mov	w20, #0x0                   	// #0
   4120c:	stp	w1, w21, [x19]
   41210:	str	x0, [x19, #8]
   41214:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41218:	ldr	x0, [x28, #40]
   4121c:	cmp	x0, #0x0
   41220:	ccmp	x0, #0xc, #0x4, ne  // ne = any
   41224:	b.eq	41254 <aarch64_match_operands_constraint@@Base+0x1224>  // b.none
   41228:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4122c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41230:	add	x1, x1, #0xb6b
   41234:	add	x0, x0, #0xb4a
   41238:	bl	35a30 <dcgettext@plt>
   4123c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41240:	mov	w1, #0x9                   	// #9
   41244:	mov	w20, #0x0                   	// #0
   41248:	stp	w1, w21, [x19]
   4124c:	str	x0, [x19, #8]
   41250:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41254:	cmp	x5, #0xfff
   41258:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   4125c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41260:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41264:	add	x1, x1, #0xa6c
   41268:	add	x0, x0, #0xb4a
   4126c:	bl	35a30 <dcgettext@plt>
   41270:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41274:	mov	w1, #0x9                   	// #9
   41278:	mov	w20, #0x0                   	// #0
   4127c:	stp	w1, w21, [x19]
   41280:	str	x0, [x19, #8]
   41284:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41288:	cmp	w21, #0x1
   4128c:	b.ne	4129c <aarch64_match_operands_constraint@@Base+0x126c>  // b.any
   41290:	ldr	w0, [x22]
   41294:	cmp	w0, #0x1
   41298:	b.eq	412c0 <aarch64_match_operands_constraint@@Base+0x1290>  // b.none
   4129c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   412a0:	add	x3, x3, #0x710
   412a4:	adrp	x1, 53000 <xexit@@Base+0x508>
   412a8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   412ac:	add	x3, x3, #0x184
   412b0:	add	x1, x1, #0xfff
   412b4:	add	x0, x0, #0xb88
   412b8:	mov	w2, #0x81e                 	// #2078
   412bc:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   412c0:	ldr	w20, [x28, #32]
   412c4:	cmp	w20, #0x5
   412c8:	b.eq	412fc <aarch64_match_operands_constraint@@Base+0x12cc>  // b.none
   412cc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   412d0:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   412d4:	add	x1, x1, #0xb54
   412d8:	add	x0, x0, #0xb4a
   412dc:	mov	w2, #0x5                   	// #5
   412e0:	bl	35a30 <dcgettext@plt>
   412e4:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   412e8:	mov	x1, #0x9                   	// #9
   412ec:	mov	w20, #0x0                   	// #0
   412f0:	movk	x1, #0x1, lsl #32
   412f4:	stp	x1, x0, [x19]
   412f8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   412fc:	ldrb	w0, [x22, #4]
   41300:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41304:	and	w0, w0, #0xff
   41308:	ldr	x1, [x28, #40]
   4130c:	tst	x1, #0xf
   41310:	b.eq	41344 <aarch64_match_operands_constraint@@Base+0x1314>  // b.none
   41314:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41318:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4131c:	mov	w2, w20
   41320:	add	x1, x1, #0xbb5
   41324:	add	x0, x0, #0xb4a
   41328:	bl	35a30 <dcgettext@plt>
   4132c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41330:	mov	x1, #0x9                   	// #9
   41334:	mov	w20, #0x0                   	// #0
   41338:	movk	x1, #0x1, lsl #32
   4133c:	stp	x1, x0, [x19]
   41340:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41344:	sub	w0, w0, #0x2
   41348:	lsl	w2, w0, #3
   4134c:	tbnz	x1, #63, 41358 <aarch64_match_operands_constraint@@Base+0x1328>
   41350:	cmp	x1, w2, sxtw
   41354:	b.le	4136c <aarch64_match_operands_constraint@@Base+0x133c>
   41358:	mov	x0, x19
   4135c:	mov	w1, #0x1                   	// #1
   41360:	mov	w20, #0x0                   	// #0
   41364:	bl	3d9d0 <print_aarch64_disassembler_options@@Base+0x61c>
   41368:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4136c:	ldr	x0, [x28, #16]
   41370:	tbz	x0, #63, 413a4 <aarch64_match_operands_constraint@@Base+0x1374>
   41374:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41378:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4137c:	mov	w2, w20
   41380:	add	x1, x1, #0xbdb
   41384:	add	x0, x0, #0xb4a
   41388:	bl	35a30 <dcgettext@plt>
   4138c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41390:	mov	x1, #0x9                   	// #9
   41394:	mov	w20, #0x0                   	// #0
   41398:	movk	x1, #0x1, lsl #32
   4139c:	stp	x1, x0, [x19]
   413a0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   413a4:	mov	x1, #0xffff                	// #65535
   413a8:	cmp	x0, x1
   413ac:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   413b0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   413b4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   413b8:	mov	w2, w20
   413bc:	add	x1, x1, #0xa6c
   413c0:	add	x0, x0, #0xb4a
   413c4:	bl	35a30 <dcgettext@plt>
   413c8:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   413cc:	mov	x1, #0x9                   	// #9
   413d0:	mov	w20, #0x0                   	// #0
   413d4:	movk	x1, #0x1, lsl #32
   413d8:	stp	x1, x0, [x19]
   413dc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   413e0:	ldrb	w0, [x22, #4]
   413e4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   413e8:	and	w1, w0, #0xff
   413ec:	cmp	w21, #0x1
   413f0:	ldr	x0, [x28, #16]
   413f4:	b.eq	4140c <aarch64_match_operands_constraint@@Base+0x13dc>  // b.none
   413f8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   413fc:	add	x3, x3, #0x710
   41400:	add	x3, x3, #0x184
   41404:	mov	w2, #0x844                 	// #2116
   41408:	b	40944 <aarch64_match_operands_constraint@@Base+0x914>
   4140c:	ldr	w2, [x27, #20]
   41410:	cmp	w2, #0x24
   41414:	b.eq	41468 <aarch64_match_operands_constraint@@Base+0x1438>  // b.none
   41418:	cmp	w2, #0x25
   4141c:	b.eq	41464 <aarch64_match_operands_constraint@@Base+0x1434>  // b.none
   41420:	cmp	w2, #0x23
   41424:	b.ne	414ac <aarch64_match_operands_constraint@@Base+0x147c>  // b.any
   41428:	mov	x2, #0x0                   	// #0
   4142c:	bl	35440 <aarch64_logical_immediate_p@plt>
   41430:	mov	w20, w0
   41434:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41438:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4143c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41440:	add	x1, x1, #0xa6c
   41444:	add	x0, x0, #0xb4a
   41448:	mov	w2, #0x5                   	// #5
   4144c:	bl	35a30 <dcgettext@plt>
   41450:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41454:	mov	x1, #0x9                   	// #9
   41458:	movk	x1, #0x1, lsl #32
   4145c:	stp	x1, x0, [x19]
   41460:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41464:	mvn	x0, x0
   41468:	cmp	w1, #0x4
   4146c:	mov	x2, #0x0                   	// #0
   41470:	cset	w1, eq  // eq = none
   41474:	bl	35a90 <aarch64_wide_constant_p@plt>
   41478:	mov	w20, w0
   4147c:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41480:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41484:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41488:	add	x1, x1, #0xa6c
   4148c:	add	x0, x0, #0xb4a
   41490:	mov	w2, #0x5                   	// #5
   41494:	bl	35a30 <dcgettext@plt>
   41498:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   4149c:	mov	x1, #0x9                   	// #9
   414a0:	movk	x1, #0x1, lsl #32
   414a4:	stp	x1, x0, [x19]
   414a8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   414ac:	adrp	x3, 58000 <xexit@@Base+0x5508>
   414b0:	add	x3, x3, #0x710
   414b4:	add	x3, x3, #0x184
   414b8:	mov	w2, #0x85b                 	// #2139
   414bc:	adrp	x1, 53000 <xexit@@Base+0x508>
   414c0:	add	x1, x1, #0xfff
   414c4:	b	40a70 <aarch64_match_operands_constraint@@Base+0xa40>
   414c8:	ldr	x0, [x24, #4032]
   414cc:	mov	x1, #0x30                  	// #48
   414d0:	str	x5, [sp, #120]
   414d4:	madd	x0, x7, x1, x0
   414d8:	bl	3d660 <print_aarch64_disassembler_options@@Base+0x2ac>
   414dc:	and	w1, w0, #0xff
   414e0:	cmp	w1, #0x1f
   414e4:	ldr	x5, [sp, #120]
   414e8:	b.ls	41510 <aarch64_match_operands_constraint@@Base+0x14e0>  // b.plast
   414ec:	adrp	x3, 58000 <xexit@@Base+0x5508>
   414f0:	add	x3, x3, #0x710
   414f4:	add	x3, x3, #0x184
   414f8:	mov	w2, #0x86f                 	// #2159
   414fc:	adrp	x1, 53000 <xexit@@Base+0x508>
   41500:	adrp	x0, 54000 <xexit@@Base+0x1508>
   41504:	add	x1, x1, #0xfff
   41508:	add	x0, x0, #0xc00
   4150c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41510:	and	w1, w0, #0xff
   41514:	tst	w0, #0xe0
   41518:	b.eq	41540 <aarch64_match_operands_constraint@@Base+0x1510>  // b.none
   4151c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41520:	add	x3, x3, #0x710
   41524:	adrp	x1, 53000 <xexit@@Base+0x508>
   41528:	adrp	x0, 53000 <xexit@@Base+0x508>
   4152c:	add	x3, x3, #0x1bf
   41530:	add	x1, x1, #0xfff
   41534:	add	x0, x0, #0x91f
   41538:	mov	w2, #0x230                 	// #560
   4153c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41540:	mov	x3, #0x1                   	// #1
   41544:	lsl	x0, x3, x1
   41548:	cmp	x0, x5
   4154c:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   41550:	lsl	w3, w3, w1
   41554:	mov	x0, x19
   41558:	sub	w3, w3, #0x1
   4155c:	mov	w1, w21
   41560:	mov	w2, #0x0                   	// #0
   41564:	mov	w20, #0x0                   	// #0
   41568:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   4156c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41570:	cmp	x5, #0x3f0
   41574:	b.ls	41594 <aarch64_match_operands_constraint@@Base+0x1564>  // b.plast
   41578:	mov	w1, w21
   4157c:	mov	x0, x19
   41580:	mov	w3, #0x3f0                 	// #1008
   41584:	mov	w2, #0x0                   	// #0
   41588:	mov	w20, #0x0                   	// #0
   4158c:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   41590:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41594:	tst	x5, #0xf
   41598:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   4159c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   415a0:	mov	w0, #0x7                   	// #7
   415a4:	mov	w20, #0x0                   	// #0
   415a8:	stp	w0, w21, [x19]
   415ac:	mov	w0, #0x10                  	// #16
   415b0:	str	xzr, [x19, #8]
   415b4:	str	w0, [x19, #16]
   415b8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   415bc:	ldr	x0, [x24, #4032]
   415c0:	mov	x1, #0x30                  	// #48
   415c4:	str	x5, [sp, #120]
   415c8:	madd	x0, x7, x1, x0
   415cc:	bl	3d660 <print_aarch64_disassembler_options@@Base+0x2ac>
   415d0:	and	w1, w0, #0xff
   415d4:	cmp	w1, #0x1f
   415d8:	ldr	x5, [sp, #120]
   415dc:	b.ls	415f4 <aarch64_match_operands_constraint@@Base+0x15c4>  // b.plast
   415e0:	adrp	x3, 58000 <xexit@@Base+0x5508>
   415e4:	add	x3, x3, #0x710
   415e8:	add	x3, x3, #0x184
   415ec:	mov	w2, #0x88d                 	// #2189
   415f0:	b	414fc <aarch64_match_operands_constraint@@Base+0x14cc>
   415f4:	and	w25, w0, #0xff
   415f8:	mov	x0, x5
   415fc:	mov	w1, w25
   41600:	bl	3d6c4 <print_aarch64_disassembler_options@@Base+0x310>
   41604:	mov	w20, w0
   41608:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   4160c:	sub	w1, w25, #0x1
   41610:	mov	w2, #0x1                   	// #1
   41614:	mov	x0, x19
   41618:	lsl	w2, w2, w1
   4161c:	mov	w1, w21
   41620:	sub	w3, w2, #0x1
   41624:	neg	w2, w2
   41628:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   4162c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41630:	cmp	w21, #0x1
   41634:	b.le	41650 <aarch64_match_operands_constraint@@Base+0x1620>
   41638:	ldur	w1, [x28, #-56]
   4163c:	cmp	w1, #0x37
   41640:	b.ne	41650 <aarch64_match_operands_constraint@@Base+0x1620>  // b.any
   41644:	ldr	w2, [x22]
   41648:	cmp	w2, #0x1
   4164c:	b.eq	41674 <aarch64_match_operands_constraint@@Base+0x1644>  // b.none
   41650:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41654:	add	x3, x3, #0x710
   41658:	adrp	x1, 53000 <xexit@@Base+0x508>
   4165c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   41660:	add	x3, x3, #0x184
   41664:	add	x1, x1, #0xfff
   41668:	add	x0, x0, #0xc0a
   4166c:	mov	w2, #0x898                 	// #2200
   41670:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41674:	cmp	w9, #0x2
   41678:	b.eq	416a0 <aarch64_match_operands_constraint@@Base+0x1670>  // b.none
   4167c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41680:	add	x3, x3, #0x710
   41684:	adrp	x1, 53000 <xexit@@Base+0x508>
   41688:	adrp	x0, 54000 <xexit@@Base+0x1508>
   4168c:	add	x3, x3, #0x1da
   41690:	add	x1, x1, #0xfff
   41694:	add	x0, x0, #0xc5f
   41698:	mov	w2, #0x32a                 	// #810
   4169c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   416a0:	ldr	x0, [x0, #3776]
   416a4:	ldur	x3, [x28, #-40]
   416a8:	add	x0, x0, x8, lsl #5
   416ac:	add	x5, x5, x3
   416b0:	ldr	w0, [x0, #4]
   416b4:	cmp	x5, w0, uxtb
   416b8:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   416bc:	and	w0, w0, #0xff
   416c0:	mov	w1, w21
   416c4:	sub	w3, w0, w3
   416c8:	mov	w20, #0x0                   	// #0
   416cc:	mov	x0, x19
   416d0:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   416d4:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   416d8:	ldrb	w0, [x22, #4]
   416dc:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   416e0:	and	w1, w0, #0xff
   416e4:	ldr	w2, [x27, #20]
   416e8:	ldr	x0, [x28, #16]
   416ec:	cmp	w2, #0x2a
   416f0:	b.ne	416f8 <aarch64_match_operands_constraint@@Base+0x16c8>  // b.any
   416f4:	mvn	x0, x0
   416f8:	mov	x2, #0x0                   	// #0
   416fc:	bl	35440 <aarch64_logical_immediate_p@plt>
   41700:	mov	w20, w0
   41704:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41708:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4170c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41710:	add	x1, x1, #0xa6c
   41714:	add	x0, x0, #0xb4a
   41718:	mov	w2, #0x5                   	// #5
   4171c:	bl	35a30 <dcgettext@plt>
   41720:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41724:	mov	w1, #0x9                   	// #9
   41728:	stp	w1, w21, [x19]
   4172c:	str	x0, [x19, #8]
   41730:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41734:	cbz	x5, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41738:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4173c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41740:	add	x1, x1, #0xc99
   41744:	add	x0, x0, #0xb4a
   41748:	mov	w2, #0x5                   	// #5
   4174c:	bl	35a30 <dcgettext@plt>
   41750:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41754:	mov	w1, #0x9                   	// #9
   41758:	mov	w20, #0x0                   	// #0
   4175c:	stp	w1, w21, [x19]
   41760:	str	x0, [x19, #8]
   41764:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41768:	cmp	x5, #0x5a
   4176c:	ccmp	x5, #0x0, #0x4, ne  // ne = any
   41770:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41774:	cmp	x5, #0xb4
   41778:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   4177c:	cmp	x5, #0x10e
   41780:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41784:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41788:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4178c:	add	x1, x1, #0xcb1
   41790:	add	x0, x0, #0xb4a
   41794:	mov	w2, #0x5                   	// #5
   41798:	bl	35a30 <dcgettext@plt>
   4179c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   417a0:	mov	w1, #0x9                   	// #9
   417a4:	mov	w20, #0x0                   	// #0
   417a8:	stp	w1, w21, [x19]
   417ac:	str	x0, [x19, #8]
   417b0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   417b4:	cmp	x5, #0x5a
   417b8:	mov	x0, #0x10e                 	// #270
   417bc:	ccmp	x5, x0, #0x4, ne  // ne = any
   417c0:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   417c4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   417c8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   417cc:	add	x1, x1, #0xcd9
   417d0:	add	x0, x0, #0xb4a
   417d4:	mov	w2, #0x5                   	// #5
   417d8:	bl	35a30 <dcgettext@plt>
   417dc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   417e0:	mov	w1, #0x9                   	// #9
   417e4:	mov	w20, #0x0                   	// #0
   417e8:	stp	w1, w21, [x19]
   417ec:	str	x0, [x19, #8]
   417f0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   417f4:	cmp	w21, #0x2
   417f8:	b.eq	41820 <aarch64_match_operands_constraint@@Base+0x17f0>  // b.none
   417fc:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41800:	add	x3, x3, #0x710
   41804:	adrp	x1, 53000 <xexit@@Base+0x508>
   41808:	adrp	x0, 54000 <xexit@@Base+0x1508>
   4180c:	add	x3, x3, #0x184
   41810:	add	x1, x1, #0xfff
   41814:	add	x0, x0, #0x3a8
   41818:	mov	w2, #0x8d8                 	// #2264
   4181c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41820:	ldurb	w0, [x28, #-52]
   41824:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41828:	ubfiz	x0, x0, #3, #5
   4182c:	ldr	x1, [x28, #16]
   41830:	cmp	x1, x0
   41834:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41838:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4183c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41840:	add	x1, x1, #0xa39
   41844:	add	x0, x0, #0xb4a
   41848:	mov	w2, #0x5                   	// #5
   4184c:	bl	35a30 <dcgettext@plt>
   41850:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41854:	mov	x1, #0x9                   	// #9
   41858:	mov	w20, #0x0                   	// #0
   4185c:	movk	x1, #0x2, lsl #32
   41860:	stp	x1, x0, [x19]
   41864:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41868:	mov	w0, w25
   4186c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41870:	ldr	x1, [x28, #16]
   41874:	ubfiz	w3, w0, #3, #8
   41878:	sub	w3, w3, #0x1
   4187c:	tbnz	x1, #63, 41888 <aarch64_match_operands_constraint@@Base+0x1858>
   41880:	cmp	x1, w3, sxtw
   41884:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41888:	mov	w1, w21
   4188c:	mov	x0, x19
   41890:	mov	w2, #0x0                   	// #0
   41894:	mov	w20, #0x0                   	// #0
   41898:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   4189c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   418a0:	mov	w0, w25
   418a4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   418a8:	ldr	x1, [x28, #16]
   418ac:	ubfiz	w3, w0, #3, #8
   418b0:	cmp	x1, #0x0
   418b4:	b.le	418c0 <aarch64_match_operands_constraint@@Base+0x1890>
   418b8:	cmp	x1, w3, sxtw
   418bc:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   418c0:	mov	w1, w21
   418c4:	mov	x0, x19
   418c8:	mov	w2, #0x1                   	// #1
   418cc:	mov	w20, #0x0                   	// #0
   418d0:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   418d4:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   418d8:	cmp	w25, #0x21
   418dc:	b.eq	41924 <aarch64_match_operands_constraint@@Base+0x18f4>  // b.none
   418e0:	cmp	w25, #0x22
   418e4:	b.eq	41960 <aarch64_match_operands_constraint@@Base+0x1930>  // b.none
   418e8:	cbnz	w25, 4199c <aarch64_match_operands_constraint@@Base+0x196c>
   418ec:	ldr	w0, [x28, #32]
   418f0:	cbz	w0, 419b0 <aarch64_match_operands_constraint@@Base+0x1980>
   418f4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   418f8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   418fc:	add	x1, x1, #0xcf9
   41900:	add	x0, x0, #0xb4a
   41904:	mov	w2, #0x5                   	// #5
   41908:	bl	35a30 <dcgettext@plt>
   4190c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41910:	mov	w1, #0x9                   	// #9
   41914:	mov	w20, #0x0                   	// #0
   41918:	stp	w1, w21, [x19]
   4191c:	str	x0, [x19, #8]
   41920:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41924:	ldr	w0, [x28, #32]
   41928:	cmp	w0, #0x5
   4192c:	b.eq	419b0 <aarch64_match_operands_constraint@@Base+0x1980>  // b.none
   41930:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41934:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41938:	add	x1, x1, #0xb54
   4193c:	add	x0, x0, #0xb4a
   41940:	mov	w2, #0x5                   	// #5
   41944:	bl	35a30 <dcgettext@plt>
   41948:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   4194c:	mov	w1, #0x9                   	// #9
   41950:	mov	w20, #0x0                   	// #0
   41954:	stp	w1, w21, [x19]
   41958:	str	x0, [x19, #8]
   4195c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41960:	ldr	w0, [x28, #32]
   41964:	cmp	w0, #0x1
   41968:	b.eq	419b0 <aarch64_match_operands_constraint@@Base+0x1980>  // b.none
   4196c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41970:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41974:	add	x1, x1, #0xb54
   41978:	add	x0, x0, #0xb4a
   4197c:	mov	w2, #0x5                   	// #5
   41980:	bl	35a30 <dcgettext@plt>
   41984:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41988:	mov	w1, #0x9                   	// #9
   4198c:	mov	w20, #0x0                   	// #0
   41990:	stp	w1, w21, [x19]
   41994:	str	x0, [x19, #8]
   41998:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4199c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   419a0:	add	x3, x3, #0x710
   419a4:	add	x3, x3, #0x184
   419a8:	mov	w2, #0x913                 	// #2323
   419ac:	b	414bc <aarch64_match_operands_constraint@@Base+0x148c>
   419b0:	cmp	w21, #0x1
   419b4:	b.eq	419cc <aarch64_match_operands_constraint@@Base+0x199c>  // b.none
   419b8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   419bc:	add	x3, x3, #0x710
   419c0:	add	x3, x3, #0x184
   419c4:	mov	w2, #0x917                 	// #2327
   419c8:	b	40944 <aarch64_match_operands_constraint@@Base+0x914>
   419cc:	ldrb	w0, [x22, #4]
   419d0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   419d4:	and	w0, w0, #0xff
   419d8:	cmp	w0, #0x8
   419dc:	ldr	x0, [x28, #16]
   419e0:	b.eq	41a0c <aarch64_match_operands_constraint@@Base+0x19dc>  // b.none
   419e4:	add	x0, x0, #0x80
   419e8:	cmp	x0, #0x17f
   419ec:	b.ls	41a44 <aarch64_match_operands_constraint@@Base+0x1a14>  // b.plast
   419f0:	mov	w1, w21
   419f4:	mov	x0, x19
   419f8:	mov	w3, #0xff                  	// #255
   419fc:	mov	w2, #0xffffff80            	// #-128
   41a00:	mov	w20, #0x0                   	// #0
   41a04:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   41a08:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41a0c:	bl	357b0 <aarch64_shrink_expanded_imm8@plt>
   41a10:	tbz	w0, #31, 41a44 <aarch64_match_operands_constraint@@Base+0x1a14>
   41a14:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41a18:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41a1c:	add	x1, x1, #0xd10
   41a20:	add	x0, x0, #0xb4a
   41a24:	mov	w2, #0x5                   	// #5
   41a28:	bl	35a30 <dcgettext@plt>
   41a2c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41a30:	mov	x1, #0x9                   	// #9
   41a34:	mov	w20, #0x0                   	// #0
   41a38:	movk	x1, #0x1, lsl #32
   41a3c:	stp	x1, x0, [x19]
   41a40:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41a44:	ldr	w0, [x28, #32]
   41a48:	cmp	w0, #0x1
   41a4c:	b.eq	41ab4 <aarch64_match_operands_constraint@@Base+0x1a84>  // b.none
   41a50:	cmp	w0, #0x5
   41a54:	b.ne	41af4 <aarch64_match_operands_constraint@@Base+0x1ac4>  // b.any
   41a58:	ldrb	w0, [x22, #4]
   41a5c:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41a60:	ubfiz	w2, w0, #3, #8
   41a64:	ldr	x1, [x28, #40]
   41a68:	sub	w2, w2, #0x8
   41a6c:	tbnz	x1, #63, 41a78 <aarch64_match_operands_constraint@@Base+0x1a48>
   41a70:	cmp	x1, w2, sxtw
   41a74:	b.le	41a8c <aarch64_match_operands_constraint@@Base+0x1a5c>
   41a78:	mov	x0, x19
   41a7c:	mov	w1, #0x1                   	// #1
   41a80:	mov	w20, #0x0                   	// #0
   41a84:	bl	3d9d0 <print_aarch64_disassembler_options@@Base+0x61c>
   41a88:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41a8c:	tst	x1, #0x7
   41a90:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41a94:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41a98:	mov	x0, #0x7                   	// #7
   41a9c:	mov	w20, #0x0                   	// #0
   41aa0:	movk	x0, #0x1, lsl #32
   41aa4:	stp	x0, xzr, [x19]
   41aa8:	mov	w0, #0x8                   	// #8
   41aac:	str	w0, [x19, #16]
   41ab0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41ab4:	ldr	x0, [x28, #40]
   41ab8:	cmp	x0, #0x8
   41abc:	ccmp	x0, #0x10, #0x4, ne  // ne = any
   41ac0:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41ac4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41ac8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41acc:	add	x1, x1, #0xd2c
   41ad0:	add	x0, x0, #0xb4a
   41ad4:	mov	w2, #0x5                   	// #5
   41ad8:	bl	35a30 <dcgettext@plt>
   41adc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41ae0:	mov	x1, #0x9                   	// #9
   41ae4:	mov	w20, #0x0                   	// #0
   41ae8:	movk	x1, #0x1, lsl #32
   41aec:	stp	x1, x0, [x19]
   41af0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41af4:	cbz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41af8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41afc:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41b00:	add	x1, x1, #0xb54
   41b04:	add	x0, x0, #0xb4a
   41b08:	mov	w2, #0x5                   	// #5
   41b0c:	bl	35a30 <dcgettext@plt>
   41b10:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41b14:	mov	x1, #0x9                   	// #9
   41b18:	mov	w20, #0x0                   	// #0
   41b1c:	movk	x1, #0x1, lsl #32
   41b20:	stp	x1, x0, [x19]
   41b24:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41b28:	ldrb	w0, [x28, #24]
   41b2c:	tbnz	w0, #0, 41b60 <aarch64_match_operands_constraint@@Base+0x1b30>
   41b30:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41b34:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41b38:	add	x1, x1, #0xd49
   41b3c:	add	x0, x0, #0xb4a
   41b40:	mov	w2, #0x5                   	// #5
   41b44:	bl	35a30 <dcgettext@plt>
   41b48:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41b4c:	mov	w1, #0x9                   	// #9
   41b50:	mov	w20, #0x0                   	// #0
   41b54:	stp	w1, w21, [x19]
   41b58:	str	x0, [x19, #8]
   41b5c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41b60:	cmp	x5, #0xff
   41b64:	b.ls	41b98 <aarch64_match_operands_constraint@@Base+0x1b68>  // b.plast
   41b68:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41b6c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41b70:	add	x1, x1, #0xa6c
   41b74:	add	x0, x0, #0xb4a
   41b78:	mov	w2, #0x5                   	// #5
   41b7c:	bl	35a30 <dcgettext@plt>
   41b80:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41b84:	mov	w1, #0x9                   	// #9
   41b88:	mov	w20, #0x0                   	// #0
   41b8c:	stp	w1, w21, [x19]
   41b90:	str	x0, [x19, #8]
   41b94:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41b98:	ldr	w0, [x28, #32]
   41b9c:	cbz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41ba0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41ba4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41ba8:	add	x1, x1, #0xb54
   41bac:	add	x0, x0, #0xb4a
   41bb0:	mov	w2, #0x5                   	// #5
   41bb4:	bl	35a30 <dcgettext@plt>
   41bb8:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41bbc:	mov	w1, #0x9                   	// #9
   41bc0:	mov	w20, #0x0                   	// #0
   41bc4:	stp	w1, w21, [x19]
   41bc8:	str	x0, [x19, #8]
   41bcc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41bd0:	mov	x25, #0x0                   	// #0
   41bd4:	ldr	w20, [x28, #32]
   41bd8:	cmp	w20, #0x5
   41bdc:	b.eq	41bf4 <aarch64_match_operands_constraint@@Base+0x1bc4>  // b.none
   41be0:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41be4:	add	x3, x3, #0x710
   41be8:	add	x3, x3, #0x184
   41bec:	mov	w2, #0x96d                 	// #2413
   41bf0:	b	40ec8 <aarch64_match_operands_constraint@@Base+0xe98>
   41bf4:	ldrb	w0, [x22, #4]
   41bf8:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41bfc:	ubfiz	w3, w0, #2, #8
   41c00:	and	w6, w0, #0xff
   41c04:	mov	x0, #0xffffffffffffffff    	// #-1
   41c08:	lsl	x0, x0, x3
   41c0c:	cmp	w6, #0x1
   41c10:	lsl	x0, x0, x3
   41c14:	mvn	x0, x0
   41c18:	ldr	x3, [x28, #40]
   41c1c:	ldr	x1, [x28, #16]
   41c20:	mov	w5, w3
   41c24:	b.ne	41c5c <aarch64_match_operands_constraint@@Base+0x1c2c>  // b.any
   41c28:	cbz	w3, 41cac <aarch64_match_operands_constraint@@Base+0x1c7c>
   41c2c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41c30:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41c34:	mov	w2, w20
   41c38:	add	x1, x1, #0xd6b
   41c3c:	add	x0, x0, #0xb4a
   41c40:	bl	35a30 <dcgettext@plt>
   41c44:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41c48:	mov	w1, #0x9                   	// #9
   41c4c:	mov	w20, #0x0                   	// #0
   41c50:	stp	w1, w21, [x19]
   41c54:	str	x0, [x19, #8]
   41c58:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41c5c:	tst	w3, #0xfffffff7
   41c60:	b.eq	41c94 <aarch64_match_operands_constraint@@Base+0x1c64>  // b.none
   41c64:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41c68:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41c6c:	mov	w2, w20
   41c70:	add	x1, x1, #0xd97
   41c74:	add	x0, x0, #0xb4a
   41c78:	bl	35a30 <dcgettext@plt>
   41c7c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41c80:	mov	w1, #0x9                   	// #9
   41c84:	mov	w20, #0x0                   	// #0
   41c88:	stp	w1, w21, [x19]
   41c8c:	str	x0, [x19, #8]
   41c90:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41c94:	cbnz	w3, 41cac <aarch64_match_operands_constraint@@Base+0x1c7c>
   41c98:	tst	w1, #0xff
   41c9c:	b.ne	41cac <aarch64_match_operands_constraint@@Base+0x1c7c>  // b.any
   41ca0:	mov	x3, #0x100                 	// #256
   41ca4:	mov	w5, #0x8                   	// #8
   41ca8:	sdiv	x1, x1, x3
   41cac:	lsr	x0, x0, x5
   41cb0:	bics	xzr, x1, x0
   41cb4:	b.eq	41cf4 <aarch64_match_operands_constraint@@Base+0x1cc4>  // b.none
   41cb8:	orn	x3, x1, x0
   41cbc:	cmp	x1, x3
   41cc0:	b.eq	41cf4 <aarch64_match_operands_constraint@@Base+0x1cc4>  // b.none
   41cc4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41cc8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41ccc:	add	x1, x1, #0xdb3
   41cd0:	add	x0, x0, #0xb4a
   41cd4:	mov	w2, #0x5                   	// #5
   41cd8:	bl	35a30 <dcgettext@plt>
   41cdc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41ce0:	mov	w1, #0x9                   	// #9
   41ce4:	mov	w20, #0x0                   	// #0
   41ce8:	stp	w1, w21, [x19]
   41cec:	str	x0, [x19, #8]
   41cf0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41cf4:	sub	x1, x1, x25
   41cf8:	and	x0, x0, x1
   41cfc:	cmp	x0, #0xff
   41d00:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   41d04:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41d08:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41d0c:	add	x1, x1, #0xdd6
   41d10:	add	x0, x0, #0xb4a
   41d14:	mov	w2, #0x5                   	// #5
   41d18:	bl	35a30 <dcgettext@plt>
   41d1c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41d20:	mov	w1, #0x9                   	// #9
   41d24:	mov	w20, #0x0                   	// #0
   41d28:	stp	w1, w21, [x19]
   41d2c:	str	x0, [x19, #8]
   41d30:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41d34:	ldrb	w0, [x28, #24]
   41d38:	tbnz	w0, #0, 41d60 <aarch64_match_operands_constraint@@Base+0x1d30>
   41d3c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41d40:	add	x3, x3, #0x710
   41d44:	add	x3, x3, #0x184
   41d48:	mov	w2, #0x99f                 	// #2463
   41d4c:	adrp	x1, 53000 <xexit@@Base+0x508>
   41d50:	adrp	x0, 54000 <xexit@@Base+0x1508>
   41d54:	add	x1, x1, #0xfff
   41d58:	add	x0, x0, #0xdf3
   41d5c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41d60:	and	x5, x5, #0xffffffffff7fffff
   41d64:	mov	x0, #0x3f000000            	// #1056964608
   41d68:	cmp	x5, x0
   41d6c:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41d70:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41d74:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41d78:	add	x1, x1, #0xe03
   41d7c:	add	x0, x0, #0xb4a
   41d80:	mov	w2, #0x5                   	// #5
   41d84:	bl	35a30 <dcgettext@plt>
   41d88:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41d8c:	mov	w1, #0x9                   	// #9
   41d90:	mov	w20, #0x0                   	// #0
   41d94:	stp	w1, w21, [x19]
   41d98:	str	x0, [x19, #8]
   41d9c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41da0:	ldrb	w0, [x28, #24]
   41da4:	tbnz	w0, #0, 41dbc <aarch64_match_operands_constraint@@Base+0x1d8c>
   41da8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41dac:	add	x3, x3, #0x710
   41db0:	add	x3, x3, #0x184
   41db4:	mov	w2, #0x9a9                 	// #2473
   41db8:	b	41d4c <aarch64_match_operands_constraint@@Base+0x1d1c>
   41dbc:	mov	x0, #0x3f000000            	// #1056964608
   41dc0:	cmp	x5, x0
   41dc4:	mov	x0, #0x40000000            	// #1073741824
   41dc8:	ccmp	x5, x0, #0x4, ne  // ne = any
   41dcc:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41dd0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41dd4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41dd8:	add	x1, x1, #0xe2b
   41ddc:	add	x0, x0, #0xb4a
   41de0:	mov	w2, #0x5                   	// #5
   41de4:	bl	35a30 <dcgettext@plt>
   41de8:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41dec:	mov	w1, #0x9                   	// #9
   41df0:	mov	w20, #0x0                   	// #0
   41df4:	stp	w1, w21, [x19]
   41df8:	str	x0, [x19, #8]
   41dfc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41e00:	ldrb	w0, [x28, #24]
   41e04:	tbnz	w0, #0, 41e1c <aarch64_match_operands_constraint@@Base+0x1dec>
   41e08:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41e0c:	add	x3, x3, #0x710
   41e10:	add	x3, x3, #0x184
   41e14:	mov	w2, #0x9b3                 	// #2483
   41e18:	b	41d4c <aarch64_match_operands_constraint@@Base+0x1d1c>
   41e1c:	cmp	x5, #0x0
   41e20:	mov	x0, #0x3f800000            	// #1065353216
   41e24:	ccmp	x5, x0, #0x4, ne  // ne = any
   41e28:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   41e2c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41e30:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41e34:	add	x1, x1, #0xe53
   41e38:	add	x0, x0, #0xb4a
   41e3c:	mov	w2, #0x5                   	// #5
   41e40:	bl	35a30 <dcgettext@plt>
   41e44:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41e48:	mov	w1, #0x9                   	// #9
   41e4c:	mov	w20, #0x0                   	// #0
   41e50:	stp	w1, w21, [x19]
   41e54:	str	x0, [x19, #8]
   41e58:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41e5c:	ldrb	w0, [x22, #4]
   41e60:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41e64:	and	w1, w0, #0xff
   41e68:	ldr	x3, [x28, #16]
   41e6c:	mov	x2, #0x0                   	// #0
   41e70:	mvn	x0, x3
   41e74:	bl	35440 <aarch64_logical_immediate_p@plt>
   41e78:	mov	w20, w0
   41e7c:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41e80:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41e84:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41e88:	add	x1, x1, #0xa6c
   41e8c:	add	x0, x0, #0xb4a
   41e90:	mov	w2, #0x5                   	// #5
   41e94:	bl	35a30 <dcgettext@plt>
   41e98:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41e9c:	mov	w1, #0x9                   	// #9
   41ea0:	stp	w1, w21, [x19]
   41ea4:	str	x0, [x19, #8]
   41ea8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41eac:	ldrb	w0, [x22, #4]
   41eb0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41eb4:	and	w27, w0, #0xff
   41eb8:	ldr	x25, [x28, #16]
   41ebc:	mov	w1, w27
   41ec0:	mov	x2, #0x0                   	// #0
   41ec4:	mov	x0, x25
   41ec8:	bl	35440 <aarch64_logical_immediate_p@plt>
   41ecc:	mov	w20, w0
   41ed0:	cbnz	w0, 41f00 <aarch64_match_operands_constraint@@Base+0x1ed0>
   41ed4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41ed8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41edc:	add	x1, x1, #0xa6c
   41ee0:	add	x0, x0, #0xb4a
   41ee4:	mov	w2, #0x5                   	// #5
   41ee8:	bl	35a30 <dcgettext@plt>
   41eec:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41ef0:	mov	w1, #0x9                   	// #9
   41ef4:	stp	w1, w21, [x19]
   41ef8:	str	x0, [x19, #8]
   41efc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41f00:	mov	w1, w27
   41f04:	mov	x0, x25
   41f08:	bl	35580 <aarch64_sve_dupm_mov_immediate_p@plt>
   41f0c:	mov	w20, w0
   41f10:	cbnz	w0, 405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41f14:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41f18:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41f1c:	add	x1, x1, #0xe7b
   41f20:	add	x0, x0, #0xb4a
   41f24:	mov	w2, #0x5                   	// #5
   41f28:	bl	35a30 <dcgettext@plt>
   41f2c:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41f30:	mov	w1, #0x9                   	// #9
   41f34:	stp	w1, w21, [x19]
   41f38:	str	x0, [x19, #8]
   41f3c:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41f40:	ldr	w0, [x28, #32]
   41f44:	cmp	w0, #0xe
   41f48:	b.eq	41f70 <aarch64_match_operands_constraint@@Base+0x1f40>  // b.none
   41f4c:	adrp	x3, 58000 <xexit@@Base+0x5508>
   41f50:	add	x3, x3, #0x710
   41f54:	adrp	x1, 53000 <xexit@@Base+0x508>
   41f58:	adrp	x0, 54000 <xexit@@Base+0x1508>
   41f5c:	add	x3, x3, #0x184
   41f60:	add	x1, x1, #0xfff
   41f64:	add	x0, x0, #0xe9c
   41f68:	mov	w2, #0x9dd                 	// #2525
   41f6c:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   41f70:	ldr	x0, [x28, #40]
   41f74:	sub	x0, x0, #0x1
   41f78:	cmp	x0, #0xf
   41f7c:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   41f80:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   41f84:	mov	w2, #0x5                   	// #5
   41f88:	adrp	x1, 54000 <xexit@@Base+0x1508>
   41f8c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   41f90:	add	x1, x1, #0xec2
   41f94:	add	x0, x0, #0xb4a
   41f98:	bl	35a30 <dcgettext@plt>
   41f9c:	str	x0, [x19, #8]
   41fa0:	mov	x0, #0x1                   	// #1
   41fa4:	mov	w1, #0x6                   	// #6
   41fa8:	movk	x0, #0x10, lsl #32
   41fac:	mov	w20, #0x0                   	// #0
   41fb0:	stp	w1, w21, [x19]
   41fb4:	str	x0, [x19, #16]
   41fb8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41fbc:	ldurb	w0, [x28, #-52]
   41fc0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   41fc4:	ubfiz	w3, w0, #3, #8
   41fc8:	ldr	x1, [x28, #16]
   41fcc:	sub	w3, w3, #0x1
   41fd0:	tbnz	x1, #63, 41fdc <aarch64_match_operands_constraint@@Base+0x1fac>
   41fd4:	cmp	x1, w3, sxtw
   41fd8:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   41fdc:	mov	w1, w21
   41fe0:	mov	x0, x19
   41fe4:	mov	w2, #0x0                   	// #0
   41fe8:	mov	w20, #0x0                   	// #0
   41fec:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   41ff0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   41ff4:	cmp	w20, #0xb2
   41ff8:	mov	w1, #0x38                  	// #56
   41ffc:	cset	w0, eq  // eq = none
   42000:	add	w0, w0, #0x1
   42004:	sub	w0, w21, w0
   42008:	umaddl	x0, w0, w1, x22
   4200c:	ldrb	w0, [x0, #4]
   42010:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   42014:	ubfiz	w3, w0, #3, #8
   42018:	ldr	x1, [x28, #16]
   4201c:	cmp	x1, #0x0
   42020:	b.le	4202c <aarch64_match_operands_constraint@@Base+0x1ffc>
   42024:	cmp	x1, w3, sxtw
   42028:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   4202c:	mov	w1, w21
   42030:	mov	x0, x19
   42034:	mov	w2, #0x1                   	// #1
   42038:	mov	w20, #0x0                   	// #0
   4203c:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   42040:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   42044:	cmp	w20, #0x60
   42048:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   4204c:	cbnz	w21, 42060 <aarch64_match_operands_constraint@@Base+0x2030>
   42050:	ldr	w0, [x23, #80]
   42054:	add	x1, x23, #0x50
   42058:	cmp	w0, #0x3b
   4205c:	b.eq	42084 <aarch64_match_operands_constraint@@Base+0x2054>  // b.none
   42060:	adrp	x3, 58000 <xexit@@Base+0x5508>
   42064:	add	x3, x3, #0x710
   42068:	adrp	x1, 53000 <xexit@@Base+0x508>
   4206c:	adrp	x0, 54000 <xexit@@Base+0x1508>
   42070:	add	x3, x3, #0x184
   42074:	add	x1, x1, #0xfff
   42078:	add	x0, x0, #0xecd
   4207c:	mov	w2, #0xa06                 	// #2566
   42080:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   42084:	ldr	w0, [x28, #16]
   42088:	sub	w2, w0, #0x3
   4208c:	sub	w0, w0, #0x19
   42090:	cmp	w2, #0x2
   42094:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   42098:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   4209c:	ldr	x0, [x1, #16]
   420a0:	cmp	x0, #0x1
   420a4:	b.le	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>
   420a8:	mov	x0, x19
   420ac:	mov	w3, #0x1                   	// #1
   420b0:	mov	w2, #0x0                   	// #0
   420b4:	mov	w1, #0x0                   	// #0
   420b8:	mov	w20, #0x0                   	// #0
   420bc:	bl	3d7e4 <print_aarch64_disassembler_options@@Base+0x430>
   420c0:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   420c4:	ldr	w0, [x27, #20]
   420c8:	cmp	w0, #0x50
   420cc:	b.ne	4213c <aarch64_match_operands_constraint@@Base+0x210c>  // b.any
   420d0:	ldrb	w0, [x22, #4]
   420d4:	bl	35940 <aarch64_get_qualifier_nelem@plt>
   420d8:	and	w27, w0, #0xff
   420dc:	ldrb	w0, [x22, #4]
   420e0:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   420e4:	and	w0, w0, #0xff
   420e8:	mul	w2, w27, w0
   420ec:	asr	w27, w2, #1
   420f0:	mov	w0, w25
   420f4:	bl	356d0 <aarch64_get_qualifier_esize@plt>
   420f8:	and	w0, w0, #0xff
   420fc:	udiv	w2, w27, w0
   42100:	mov	w0, w25
   42104:	sub	w27, w2, #0x1
   42108:	bl	35940 <aarch64_get_qualifier_nelem@plt>
   4210c:	and	w0, w0, #0xff
   42110:	cmp	w0, #0x1
   42114:	b.eq	42144 <aarch64_match_operands_constraint@@Base+0x2114>  // b.none
   42118:	adrp	x3, 58000 <xexit@@Base+0x5508>
   4211c:	add	x3, x3, #0x710
   42120:	adrp	x1, 53000 <xexit@@Base+0x508>
   42124:	adrp	x0, 54000 <xexit@@Base+0x1508>
   42128:	add	x3, x3, #0x184
   4212c:	add	x1, x1, #0xfff
   42130:	add	x0, x0, #0xefd
   42134:	mov	w2, #0xa2e                 	// #2606
   42138:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   4213c:	mov	w27, #0x10                  	// #16
   42140:	b	420f0 <aarch64_match_operands_constraint@@Base+0x20c0>
   42144:	ldr	x0, [x28, #24]
   42148:	tbnz	x0, #63, 42154 <aarch64_match_operands_constraint@@Base+0x2124>
   4214c:	cmp	x0, w27, sxtw
   42150:	b.le	4216c <aarch64_match_operands_constraint@@Base+0x213c>
   42154:	mov	w2, w27
   42158:	mov	w1, w21
   4215c:	mov	x0, x19
   42160:	mov	w20, #0x0                   	// #0
   42164:	bl	3da2c <print_aarch64_disassembler_options@@Base+0x678>
   42168:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4216c:	cmp	w20, #0x22
   42170:	ccmp	w25, #0x6, #0x0, eq  // eq = none
   42174:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   42178:	ldr	w0, [x28, #16]
   4217c:	cmp	w0, #0xf
   42180:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   42184:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   42188:	mov	w2, #0x5                   	// #5
   4218c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   42190:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   42194:	add	x1, x1, #0xf2a
   42198:	add	x0, x0, #0xb4a
   4219c:	bl	35a30 <dcgettext@plt>
   421a0:	mov	w1, #0x6                   	// #6
   421a4:	mov	w20, #0x0                   	// #0
   421a8:	stp	w1, w21, [x19]
   421ac:	str	x0, [x19, #8]
   421b0:	mov	x0, #0xf00000000           	// #64424509440
   421b4:	str	x0, [x19, #16]
   421b8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   421bc:	sub	w0, w21, #0x1
   421c0:	cmp	w0, #0x1
   421c4:	b.ls	421ec <aarch64_match_operands_constraint@@Base+0x21bc>  // b.plast
   421c8:	adrp	x3, 58000 <xexit@@Base+0x5508>
   421cc:	add	x3, x3, #0x710
   421d0:	adrp	x1, 53000 <xexit@@Base+0x508>
   421d4:	adrp	x0, 54000 <xexit@@Base+0x1508>
   421d8:	add	x3, x3, #0x184
   421dc:	add	x1, x1, #0xfff
   421e0:	add	x0, x0, #0x39c
   421e4:	mov	w2, #0xa47                 	// #2631
   421e8:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   421ec:	cmp	w20, #0xe
   421f0:	b.eq	4223c <aarch64_match_operands_constraint@@Base+0x220c>  // b.none
   421f4:	cmp	w20, #0xf
   421f8:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   421fc:	ldr	w0, [x28, #32]
   42200:	sub	w2, w0, #0x2
   42204:	cmp	w2, #0x3
   42208:	b.ls	423bc <aarch64_match_operands_constraint@@Base+0x238c>  // b.plast
   4220c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   42210:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   42214:	add	x1, x1, #0xfe2
   42218:	add	x0, x0, #0xb4a
   4221c:	mov	w2, #0x5                   	// #5
   42220:	bl	35a30 <dcgettext@plt>
   42224:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   42228:	mov	w1, #0x9                   	// #9
   4222c:	mov	w20, #0x0                   	// #0
   42230:	stp	w1, w21, [x19]
   42234:	str	x0, [x19, #8]
   42238:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4223c:	ldr	w0, [x28, #32]
   42240:	bl	35bc0 <aarch64_extend_operator_p@plt>
   42244:	mov	w20, w0
   42248:	cbnz	w0, 42284 <aarch64_match_operands_constraint@@Base+0x2254>
   4224c:	ldr	w0, [x28, #32]
   42250:	cmp	w0, #0x5
   42254:	b.eq	42284 <aarch64_match_operands_constraint@@Base+0x2254>  // b.none
   42258:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4225c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   42260:	add	x1, x1, #0xf3a
   42264:	add	x0, x0, #0xb4a
   42268:	mov	w2, #0x5                   	// #5
   4226c:	bl	35a30 <dcgettext@plt>
   42270:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   42274:	mov	w1, #0x9                   	// #9
   42278:	stp	w1, w21, [x19]
   4227c:	str	x0, [x19, #8]
   42280:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   42284:	mov	x0, x22
   42288:	bl	35790 <aarch64_stack_pointer_p@plt>
   4228c:	mov	w20, w0
   42290:	cbnz	w0, 422dc <aarch64_match_operands_constraint@@Base+0x22ac>
   42294:	cmp	w21, #0x2
   42298:	b.eq	422d0 <aarch64_match_operands_constraint@@Base+0x22a0>  // b.none
   4229c:	ldrb	w0, [x28, #36]
   422a0:	tbnz	w0, #0, 42314 <aarch64_match_operands_constraint@@Base+0x22e4>
   422a4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   422a8:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   422ac:	add	x1, x1, #0xf53
   422b0:	add	x0, x0, #0xb4a
   422b4:	mov	w2, #0x5                   	// #5
   422b8:	bl	35a30 <dcgettext@plt>
   422bc:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   422c0:	mov	w1, #0x9                   	// #9
   422c4:	stp	w1, w21, [x19]
   422c8:	str	x0, [x19, #8]
   422cc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   422d0:	add	x0, x23, #0x50
   422d4:	bl	35790 <aarch64_stack_pointer_p@plt>
   422d8:	cbz	w0, 4229c <aarch64_match_operands_constraint@@Base+0x226c>
   422dc:	ldrb	w0, [x28, #36]
   422e0:	tbnz	w0, #0, 42348 <aarch64_match_operands_constraint@@Base+0x2318>
   422e4:	ldr	w0, [x28, #32]
   422e8:	cmp	w0, #0x5
   422ec:	b.eq	42348 <aarch64_match_operands_constraint@@Base+0x2318>  // b.none
   422f0:	adrp	x3, 58000 <xexit@@Base+0x5508>
   422f4:	add	x3, x3, #0x710
   422f8:	adrp	x1, 53000 <xexit@@Base+0x508>
   422fc:	adrp	x0, 54000 <xexit@@Base+0x1508>
   42300:	add	x3, x3, #0x184
   42304:	add	x1, x1, #0xfff
   42308:	add	x0, x0, #0xf86
   4230c:	mov	w2, #0xa66                 	// #2662
   42310:	b	401ac <aarch64_match_operands_constraint@@Base+0x17c>
   42314:	ldr	w2, [x28, #32]
   42318:	cmp	w2, #0x5
   4231c:	b.ne	42348 <aarch64_match_operands_constraint@@Base+0x2318>  // b.any
   42320:	adrp	x1, 54000 <xexit@@Base+0x1508>
   42324:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   42328:	add	x1, x1, #0xf6b
   4232c:	add	x0, x0, #0xb4a
   42330:	bl	35a30 <dcgettext@plt>
   42334:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   42338:	mov	w1, #0x9                   	// #9
   4233c:	stp	w1, w21, [x19]
   42340:	str	x0, [x19, #8]
   42344:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   42348:	ldr	x0, [x28, #40]
   4234c:	cmp	x0, #0x4
   42350:	b.ls	4236c <aarch64_match_operands_constraint@@Base+0x233c>  // b.plast
   42354:	mov	w1, w21
   42358:	mov	x0, x19
   4235c:	mov	w2, #0x4                   	// #4
   42360:	mov	w20, #0x0                   	// #0
   42364:	bl	3d9d0 <print_aarch64_disassembler_options@@Base+0x61c>
   42368:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4236c:	cmp	w25, #0x2
   42370:	b.ne	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.any
   42374:	ldr	w0, [x28, #32]
   42378:	and	w1, w0, #0xfffffff7
   4237c:	cmp	w1, #0x5
   42380:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   42384:	cmp	w0, #0x9
   42388:	b.eq	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.none
   4238c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   42390:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   42394:	add	x1, x1, #0xfce
   42398:	add	x0, x0, #0xb4a
   4239c:	mov	w2, #0x5                   	// #5
   423a0:	bl	35a30 <dcgettext@plt>
   423a4:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   423a8:	mov	w1, #0x9                   	// #9
   423ac:	mov	w20, #0x0                   	// #0
   423b0:	stp	w1, w21, [x19]
   423b4:	str	x0, [x19, #8]
   423b8:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   423bc:	cmp	w0, #0x2
   423c0:	b.ne	42400 <aarch64_match_operands_constraint@@Base+0x23d0>  // b.any
   423c4:	ldr	w0, [x27, #16]
   423c8:	cmp	w0, #0x42
   423cc:	b.eq	42400 <aarch64_match_operands_constraint@@Base+0x23d0>  // b.none
   423d0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   423d4:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   423d8:	add	x1, x1, #0xffa
   423dc:	add	x0, x0, #0xb4a
   423e0:	mov	w2, #0x5                   	// #5
   423e4:	bl	35a30 <dcgettext@plt>
   423e8:	cbz	x19, 40080 <aarch64_match_operands_constraint@@Base+0x50>
   423ec:	mov	w1, #0x9                   	// #9
   423f0:	mov	w20, #0x0                   	// #0
   423f4:	stp	w1, w21, [x19]
   423f8:	str	x0, [x19, #8]
   423fc:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   42400:	cmp	w25, #0x1
   42404:	mov	w0, #0x3f                  	// #63
   42408:	ldr	x1, [x28, #40]
   4240c:	mov	w2, #0x1f                  	// #31
   42410:	csel	w2, w2, w0, eq  // eq = none
   42414:	mov	w0, w2
   42418:	cmp	x1, x0
   4241c:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   42420:	mov	w1, w21
   42424:	mov	x0, x19
   42428:	mov	w20, #0x0                   	// #0
   4242c:	bl	3d9d0 <print_aarch64_disassembler_options@@Base+0x61c>
   42430:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   42434:	mov	w20, #0x1                   	// #1
   42438:	b	40084 <aarch64_match_operands_constraint@@Base+0x54>
   4243c:	sub	w20, w20, #0x4f
   42440:	cmp	w20, #0x44
   42444:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   42448:	adrp	x2, 58000 <xexit@@Base+0x5508>
   4244c:	add	x2, x2, #0x5c8
   42450:	ldrh	w1, [x2, w20, uxtw #1]
   42454:	adr	x2, 42460 <aarch64_match_operands_constraint@@Base+0x2430>
   42458:	add	x1, x2, w1, sxth #2
   4245c:	br	x1
   42460:	mov	w1, #0x100                 	// #256
   42464:	b	40ff8 <aarch64_match_operands_constraint@@Base+0xfc8>
   42468:	mov	x3, #0x1f                  	// #31
   4246c:	b	40d4c <aarch64_match_operands_constraint@@Base+0xd1c>
   42470:	mov	w2, #0x1100                	// #4352
   42474:	b	40f0c <aarch64_match_operands_constraint@@Base+0xedc>
   42478:	mov	x3, #0xff                  	// #255
   4247c:	mov	x2, #0xffffffffffffff00    	// #-256
   42480:	b	40c2c <aarch64_match_operands_constraint@@Base+0xbfc>
   42484:	mov	w1, #0x1000                	// #4096
   42488:	b	40ff8 <aarch64_match_operands_constraint@@Base+0xfc8>
   4248c:	mov	x3, #0x1f                  	// #31
   42490:	mov	x2, #0xffffffffffffffe0    	// #-32
   42494:	b	40c2c <aarch64_match_operands_constraint@@Base+0xbfc>
   42498:	mov	x3, #0x7                   	// #7
   4249c:	mov	x2, #0xfffffffffffffff8    	// #-8
   424a0:	b	40d50 <aarch64_match_operands_constraint@@Base+0xd20>
   424a4:	cmp	w20, #0x4b
   424a8:	b.hi	424e0 <aarch64_match_operands_constraint@@Base+0x24b0>  // b.pmore
   424ac:	cmp	w20, #0x2a
   424b0:	b.ls	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.plast
   424b4:	sub	w20, w20, #0x2b
   424b8:	cmp	w20, #0x20
   424bc:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   424c0:	adrp	x2, 58000 <xexit@@Base+0x5508>
   424c4:	add	x2, x2, #0x654
   424c8:	ldrh	w1, [x2, w20, uxtw #1]
   424cc:	adr	x2, 424d8 <aarch64_match_operands_constraint@@Base+0x24a8>
   424d0:	add	x1, x2, w1, sxth #2
   424d4:	br	x1
   424d8:	mov	x25, #0xffffffffffffff80    	// #-128
   424dc:	b	41bd4 <aarch64_match_operands_constraint@@Base+0x1ba4>
   424e0:	sub	w1, w20, #0x94
   424e4:	cmp	w1, #0x3a
   424e8:	b.hi	405f4 <aarch64_match_operands_constraint@@Base+0x5c4>  // b.pmore
   424ec:	adrp	x0, 58000 <xexit@@Base+0x5508>
   424f0:	add	x0, x0, #0x698
   424f4:	ldrh	w0, [x0, w1, uxtw #1]
   424f8:	adr	x1, 42504 <aarch64_find_real_opcode@@Base>
   424fc:	add	x0, x1, w0, sxth #2
   42500:	br	x0

0000000000042504 <aarch64_find_real_opcode@@Base>:
   42504:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   42508:	ldr	x1, [x2, #3848]
   4250c:	sub	x1, x0, x1
   42510:	mov	x0, #0x8e39                	// #36409
   42514:	movk	x0, #0x38e3, lsl #16
   42518:	asr	x1, x1, #4
   4251c:	movk	x0, #0xe38e, lsl #32
   42520:	movk	x0, #0x8e38, lsl #48
   42524:	mul	x1, x1, x0
   42528:	mov	w0, w1
   4252c:	cmp	w1, #0x58f
   42530:	b.gt	42774 <aarch64_find_real_opcode@@Base+0x270>
   42534:	cmp	w1, #0x3dd
   42538:	b.gt	42588 <aarch64_find_real_opcode@@Base+0x84>
   4253c:	cmp	w1, #0x218
   42540:	b.gt	4272c <aarch64_find_real_opcode@@Base+0x228>
   42544:	cmp	w1, #0x216
   42548:	b.gt	42b1c <aarch64_find_real_opcode@@Base+0x618>
   4254c:	cmp	w1, #0x1c
   42550:	b.gt	42690 <aarch64_find_real_opcode@@Base+0x18c>
   42554:	cmp	w1, #0x1
   42558:	b.gt	42664 <aarch64_find_real_opcode@@Base+0x160>
   4255c:	mov	x0, #0x0                   	// #0
   42560:	b	425bc <aarch64_find_real_opcode@@Base+0xb8>
   42564:	sub	w1, w1, #0x7f2
   42568:	cmp	w1, #0xb
   4256c:	b.hi	42a44 <aarch64_find_real_opcode@@Base+0x540>  // b.pmore
   42570:	adrp	x0, 58000 <xexit@@Base+0x5508>
   42574:	add	x0, x0, #0xe48
   42578:	ldrh	w0, [x0, w1, uxtw #1]
   4257c:	adr	x1, 42588 <aarch64_find_real_opcode@@Base+0x84>
   42580:	add	x0, x1, w0, sxth #2
   42584:	br	x0
   42588:	sub	w1, w1, #0x3de
   4258c:	cmp	w1, #0x1b1
   42590:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42594:	adrp	x0, 58000 <xexit@@Base+0x5508>
   42598:	add	x0, x0, #0xe60
   4259c:	ldrh	w0, [x0, w1, uxtw #1]
   425a0:	adr	x1, 425ac <aarch64_find_real_opcode@@Base+0xa8>
   425a4:	add	x0, x1, w0, sxth #2
   425a8:	br	x0
   425ac:	mov	w0, #0x572                 	// #1394
   425b0:	ldr	x2, [x2, #3848]
   425b4:	mov	w1, #0x90                  	// #144
   425b8:	smaddl	x0, w0, w1, x2
   425bc:	ret
   425c0:	mov	w0, #0x570                 	// #1392
   425c4:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425c8:	mov	w0, #0x563                 	// #1379
   425cc:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425d0:	mov	w0, #0x562                 	// #1378
   425d4:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425d8:	mov	w0, #0x55a                 	// #1370
   425dc:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425e0:	mov	w0, #0x531                 	// #1329
   425e4:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425e8:	mov	w0, #0x52e                 	// #1326
   425ec:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425f0:	mov	w0, #0x52c                 	// #1324
   425f4:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   425f8:	mov	w0, #0x529                 	// #1321
   425fc:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42600:	mov	w0, #0x503                 	// #1283
   42604:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42608:	mov	w0, #0x6de                 	// #1758
   4260c:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42610:	mov	w0, #0x549                 	// #1353
   42614:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42618:	mov	w0, #0x557                 	// #1367
   4261c:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42620:	mov	w0, #0x6dd                 	// #1757
   42624:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42628:	mov	w0, #0x6da                 	// #1754
   4262c:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42630:	mov	w0, #0x3de                 	// #990
   42634:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42638:	sub	w1, w1, #0x297
   4263c:	cmp	w1, #0x5f
   42640:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42644:	adrp	x0, 59000 <fields@@Base+0x5a8>
   42648:	add	x0, x0, #0x1c4
   4264c:	ldrh	w0, [x0, w1, uxtw #1]
   42650:	adr	x1, 4265c <aarch64_find_real_opcode@@Base+0x158>
   42654:	add	x0, x1, w0, sxth #2
   42658:	br	x0
   4265c:	mov	w0, #0x297                 	// #663
   42660:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42664:	sub	w1, w1, #0x2
   42668:	cmp	w1, #0x1a
   4266c:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42670:	adrp	x0, 59000 <fields@@Base+0x5a8>
   42674:	add	x0, x0, #0x284
   42678:	ldrh	w0, [x0, w1, uxtw #1]
   4267c:	adr	x1, 42688 <aarch64_find_real_opcode@@Base+0x184>
   42680:	add	x0, x1, w0, sxth #2
   42684:	br	x0
   42688:	mov	w0, #0x4                   	// #4
   4268c:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42690:	cmp	w1, #0x13e
   42694:	b.gt	426dc <aarch64_find_real_opcode@@Base+0x1d8>
   42698:	cmp	w1, #0x13c
   4269c:	b.gt	42b4c <aarch64_find_real_opcode@@Base+0x648>
   426a0:	cmp	w1, #0x9d
   426a4:	b.gt	426c8 <aarch64_find_real_opcode@@Base+0x1c4>
   426a8:	cmp	w1, #0x9b
   426ac:	b.gt	42b54 <aarch64_find_real_opcode@@Base+0x650>
   426b0:	cmp	w1, #0x99
   426b4:	b.gt	42b5c <aarch64_find_real_opcode@@Base+0x658>
   426b8:	cmp	w1, #0x97
   426bc:	b.le	4255c <aarch64_find_real_opcode@@Base+0x58>
   426c0:	mov	w0, #0x98                  	// #152
   426c4:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   426c8:	sub	w1, w1, #0xf2
   426cc:	cmp	w1, #0x1
   426d0:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   426d4:	mov	w0, #0xf2                  	// #242
   426d8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   426dc:	cmp	w1, #0x19d
   426e0:	b.gt	42718 <aarch64_find_real_opcode@@Base+0x214>
   426e4:	cmp	w1, #0x19b
   426e8:	b.gt	42b64 <aarch64_find_real_opcode@@Base+0x660>
   426ec:	cmp	w1, #0x185
   426f0:	b.gt	42704 <aarch64_find_real_opcode@@Base+0x200>
   426f4:	cmp	w1, #0x183
   426f8:	b.le	4255c <aarch64_find_real_opcode@@Base+0x58>
   426fc:	mov	w0, #0x184                 	// #388
   42700:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42704:	sub	w1, w1, #0x186
   42708:	cmp	w1, #0x1
   4270c:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42710:	mov	w0, #0x186                 	// #390
   42714:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42718:	sub	w1, w1, #0x19e
   4271c:	cmp	w1, #0x1
   42720:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42724:	mov	w0, #0x19e                 	// #414
   42728:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4272c:	cmp	w1, #0x2f6
   42730:	b.gt	4255c <aarch64_find_real_opcode@@Base+0x58>
   42734:	cmp	w1, #0x296
   42738:	b.gt	42638 <aarch64_find_real_opcode@@Base+0x134>
   4273c:	cmp	w1, #0x274
   42740:	b.gt	42760 <aarch64_find_real_opcode@@Base+0x25c>
   42744:	cmp	w1, #0x270
   42748:	b.gt	42b6c <aarch64_find_real_opcode@@Base+0x668>
   4274c:	sub	w1, w1, #0x26a
   42750:	cmp	w1, #0x6
   42754:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   42758:	mov	w0, #0x26a                 	// #618
   4275c:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42760:	sub	w1, w1, #0x275
   42764:	cmp	w1, #0x6
   42768:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   4276c:	mov	w0, #0x275                 	// #629
   42770:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42774:	cmp	w1, #0x7fd
   42778:	b.gt	4255c <aarch64_find_real_opcode@@Base+0x58>
   4277c:	cmp	w1, #0x7f0
   42780:	b.gt	42564 <aarch64_find_real_opcode@@Base+0x60>
   42784:	cmp	w1, #0x6de
   42788:	b.gt	427b8 <aarch64_find_real_opcode@@Base+0x2b4>
   4278c:	cmp	w1, #0x6d9
   42790:	b.le	4255c <aarch64_find_real_opcode@@Base+0x58>
   42794:	sub	w1, w1, #0x6da
   42798:	cmp	w1, #0x4
   4279c:	b.hi	4255c <aarch64_find_real_opcode@@Base+0x58>  // b.pmore
   427a0:	adrp	x3, 59000 <fields@@Base+0x5a8>
   427a4:	add	x3, x3, #0x2bc
   427a8:	ldrh	w1, [x3, w1, uxtw #1]
   427ac:	adr	x3, 427b8 <aarch64_find_real_opcode@@Base+0x2b4>
   427b0:	add	x1, x3, w1, sxth #2
   427b4:	br	x1
   427b8:	cmp	w1, #0x71c
   427bc:	b.eq	425b0 <aarch64_find_real_opcode@@Base+0xac>  // b.none
   427c0:	cmp	w1, #0x71d
   427c4:	b.eq	425b0 <aarch64_find_real_opcode@@Base+0xac>  // b.none
   427c8:	b	4255c <aarch64_find_real_opcode@@Base+0x58>
   427cc:	mov	w0, #0x7                   	// #7
   427d0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427d4:	mov	w0, #0xa                   	// #10
   427d8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427dc:	mov	w0, #0xc                   	// #12
   427e0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427e4:	mov	w0, #0xe                   	// #14
   427e8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427ec:	mov	w0, #0x11                  	// #17
   427f0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427f4:	mov	w0, #0x16                  	// #22
   427f8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   427fc:	mov	w0, #0x18                  	// #24
   42800:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42804:	mov	w0, #0x1a                  	// #26
   42808:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4280c:	mov	w0, #0x29d                 	// #669
   42810:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42814:	mov	w0, #0x2b0                 	// #688
   42818:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4281c:	mov	w0, #0x2c9                 	// #713
   42820:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42824:	mov	w0, #0x2cb                 	// #715
   42828:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4282c:	mov	w0, #0x2cd                 	// #717
   42830:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42834:	mov	w0, #0x2cf                 	// #719
   42838:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4283c:	mov	w0, #0x2d2                 	// #722
   42840:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42844:	mov	w0, #0x2df                 	// #735
   42848:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4284c:	mov	w0, #0x2e1                 	// #737
   42850:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42854:	mov	w0, #0x2e3                 	// #739
   42858:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4285c:	mov	w0, #0x2e5                 	// #741
   42860:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42864:	mov	w0, #0x2e8                 	// #744
   42868:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4286c:	mov	w0, #0x2ea                 	// #746
   42870:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42874:	mov	w0, #0x2f5                 	// #757
   42878:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4287c:	mov	w0, #0x3e3                 	// #995
   42880:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42884:	mov	w0, #0x3e7                 	// #999
   42888:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4288c:	mov	w0, #0x3ea                 	// #1002
   42890:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42894:	mov	w0, #0x3ee                 	// #1006
   42898:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4289c:	mov	w0, #0x40d                 	// #1037
   428a0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428a4:	mov	w0, #0x40e                 	// #1038
   428a8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428ac:	mov	w0, #0x40f                 	// #1039
   428b0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428b4:	mov	w0, #0x411                 	// #1041
   428b8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428bc:	mov	w0, #0x414                 	// #1044
   428c0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428c4:	mov	w0, #0x417                 	// #1047
   428c8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428cc:	mov	w0, #0x419                 	// #1049
   428d0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428d4:	mov	w0, #0x41a                 	// #1050
   428d8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428dc:	mov	w0, #0x41b                 	// #1051
   428e0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428e4:	mov	w0, #0x41d                 	// #1053
   428e8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428ec:	mov	w0, #0x420                 	// #1056
   428f0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428f4:	mov	w0, #0x423                 	// #1059
   428f8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   428fc:	mov	w0, #0x425                 	// #1061
   42900:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42904:	mov	w0, #0x426                 	// #1062
   42908:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4290c:	mov	w0, #0x427                 	// #1063
   42910:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42914:	mov	w0, #0x429                 	// #1065
   42918:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4291c:	mov	w0, #0x42c                 	// #1068
   42920:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42924:	mov	w0, #0x42f                 	// #1071
   42928:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4292c:	mov	w0, #0x431                 	// #1073
   42930:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42934:	mov	w0, #0x432                 	// #1074
   42938:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4293c:	mov	w0, #0x433                 	// #1075
   42940:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42944:	mov	w0, #0x435                 	// #1077
   42948:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4294c:	mov	w0, #0x438                 	// #1080
   42950:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42954:	mov	w0, #0x43b                 	// #1083
   42958:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4295c:	mov	w0, #0x43d                 	// #1085
   42960:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42964:	mov	w0, #0x43e                 	// #1086
   42968:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4296c:	mov	w0, #0x43f                 	// #1087
   42970:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42974:	mov	w0, #0x441                 	// #1089
   42978:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4297c:	mov	w0, #0x444                 	// #1092
   42980:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42984:	mov	w0, #0x447                 	// #1095
   42988:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4298c:	mov	w0, #0x449                 	// #1097
   42990:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42994:	mov	w0, #0x44a                 	// #1098
   42998:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   4299c:	mov	w0, #0x44b                 	// #1099
   429a0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429a4:	mov	w0, #0x44d                 	// #1101
   429a8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429ac:	mov	w0, #0x450                 	// #1104
   429b0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429b4:	mov	w0, #0x453                 	// #1107
   429b8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429bc:	mov	w0, #0x455                 	// #1109
   429c0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429c4:	mov	w0, #0x456                 	// #1110
   429c8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429cc:	mov	w0, #0x457                 	// #1111
   429d0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429d4:	mov	w0, #0x459                 	// #1113
   429d8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429dc:	mov	w0, #0x45c                 	// #1116
   429e0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429e4:	mov	w0, #0x45f                 	// #1119
   429e8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429ec:	mov	w0, #0x461                 	// #1121
   429f0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429f4:	mov	w0, #0x462                 	// #1122
   429f8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   429fc:	mov	w0, #0x463                 	// #1123
   42a00:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a04:	mov	w0, #0x465                 	// #1125
   42a08:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a0c:	mov	w0, #0x468                 	// #1128
   42a10:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a14:	mov	w0, #0x46b                 	// #1131
   42a18:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a1c:	mov	w0, #0x49d                 	// #1181
   42a20:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a24:	mov	w0, #0x49f                 	// #1183
   42a28:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a2c:	mov	w0, #0x4a9                 	// #1193
   42a30:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a34:	mov	w0, #0x4ba                 	// #1210
   42a38:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a3c:	mov	w0, #0x4c0                 	// #1216
   42a40:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a44:	mov	w0, #0x503                 	// #1283
   42a48:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a4c:	mov	w0, #0x505                 	// #1285
   42a50:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a54:	mov	w0, #0x506                 	// #1286
   42a58:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a5c:	mov	w0, #0x529                 	// #1321
   42a60:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a64:	mov	w0, #0x52c                 	// #1324
   42a68:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a6c:	mov	w0, #0x52e                 	// #1326
   42a70:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a74:	mov	w0, #0x531                 	// #1329
   42a78:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a7c:	mov	w0, #0x547                 	// #1351
   42a80:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a84:	mov	w0, #0x548                 	// #1352
   42a88:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a8c:	mov	w0, #0x549                 	// #1353
   42a90:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a94:	mov	w0, #0x555                 	// #1365
   42a98:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42a9c:	mov	w0, #0x556                 	// #1366
   42aa0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42aa4:	mov	w0, #0x557                 	// #1367
   42aa8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42aac:	mov	w0, #0x558                 	// #1368
   42ab0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42ab4:	mov	w0, #0x55a                 	// #1370
   42ab8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42abc:	mov	w0, #0x55c                 	// #1372
   42ac0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42ac4:	mov	w0, #0x55d                 	// #1373
   42ac8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42acc:	mov	w0, #0x562                 	// #1378
   42ad0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42ad4:	mov	w0, #0x563                 	// #1379
   42ad8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42adc:	mov	w0, #0x570                 	// #1392
   42ae0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42ae4:	mov	w0, #0x572                 	// #1394
   42ae8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42aec:	mov	w0, #0x578                 	// #1400
   42af0:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42af4:	mov	w0, #0x58f                 	// #1423
   42af8:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42afc:	mov	w0, #0x6dd                 	// #1757
   42b00:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b04:	mov	w0, #0x6de                 	// #1758
   42b08:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b0c:	mov	w0, #0x71c                 	// #1820
   42b10:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b14:	mov	w0, #0x71d                 	// #1821
   42b18:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b1c:	mov	w0, #0x217                 	// #535
   42b20:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b24:	mov	w0, #0x6db                 	// #1755
   42b28:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b2c:	mov	w0, #0x6da                 	// #1754
   42b30:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b34:	mov	w0, #0x3e0                 	// #992
   42b38:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b3c:	mov	w0, #0x29a                 	// #666
   42b40:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b44:	mov	w0, #0x2                   	// #2
   42b48:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b4c:	mov	w0, #0x13d                 	// #317
   42b50:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b54:	mov	w0, #0x9c                  	// #156
   42b58:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b5c:	mov	w0, #0x9a                  	// #154
   42b60:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b64:	mov	w0, #0x19c                 	// #412
   42b68:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>
   42b6c:	mov	w0, #0x271                 	// #625
   42b70:	b	425b0 <aarch64_find_real_opcode@@Base+0xac>

0000000000042b74 <aarch64_insert_operand@@Base>:
   42b74:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   42b78:	mov	x6, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   42b7c:	movk	x6, #0xaaab
   42b80:	ldr	x5, [x5, #4032]
   42b84:	sub	x5, x0, x5
   42b88:	asr	x5, x5, #4
   42b8c:	mul	x5, x5, x6
   42b90:	sub	w5, w5, #0x1
   42b94:	cmp	w5, #0xce
   42b98:	b.hi	42c98 <aarch64_insert_operand@@Base+0x124>  // b.pmore
   42b9c:	adrp	x6, 59000 <fields@@Base+0x5a8>
   42ba0:	add	x6, x6, #0x2c8
   42ba4:	ldrb	w5, [x6, w5, uxtw]
   42ba8:	adr	x6, 42bb4 <aarch64_insert_operand@@Base+0x40>
   42bac:	add	x5, x6, w5, sxtb #2
   42bb0:	br	x5
   42bb4:	b	35240 <aarch64_ins_regno@plt>
   42bb8:	b	35a00 <aarch64_ins_reg_extended@plt>
   42bbc:	b	35490 <aarch64_ins_reg_shifted@plt>
   42bc0:	b	35380 <aarch64_ins_ft@plt>
   42bc4:	b	356e0 <aarch64_ins_reglane@plt>
   42bc8:	b	35630 <aarch64_ins_reglist@plt>
   42bcc:	b	35af0 <aarch64_ins_ldst_reglist@plt>
   42bd0:	b	355a0 <aarch64_ins_ldst_reglist_r@plt>
   42bd4:	b	35870 <aarch64_ins_ldst_elemlist@plt>
   42bd8:	b	35830 <aarch64_ins_imm@plt>
   42bdc:	b	35930 <aarch64_ins_advsimd_imm_shift@plt>
   42be0:	b	35590 <aarch64_ins_advsimd_imm_modified@plt>
   42be4:	b	354f0 <aarch64_ins_fpimm@plt>
   42be8:	b	353e0 <aarch64_ins_limm@plt>
   42bec:	b	35260 <aarch64_ins_aimm@plt>
   42bf0:	b	35730 <aarch64_ins_imm_half@plt>
   42bf4:	b	35720 <aarch64_ins_fbits@plt>
   42bf8:	b	35700 <aarch64_ins_imm_rotate2@plt>
   42bfc:	b	35120 <aarch64_ins_imm_rotate1@plt>
   42c00:	b	350c0 <aarch64_ins_cond@plt>
   42c04:	b	35750 <aarch64_ins_addr_simple@plt>
   42c08:	b	35900 <aarch64_ins_addr_regoff@plt>
   42c0c:	b	35340 <aarch64_ins_addr_simm@plt>
   42c10:	b	351f0 <aarch64_ins_addr_simm10@plt>
   42c14:	b	35780 <aarch64_ins_addr_uimm12@plt>
   42c18:	b	35840 <aarch64_ins_addr_offset@plt>
   42c1c:	b	35080 <aarch64_ins_simd_addr_post@plt>
   42c20:	b	354d0 <aarch64_ins_sysreg@plt>
   42c24:	b	35280 <aarch64_ins_pstatefield@plt>
   42c28:	b	35370 <aarch64_ins_sysins_op@plt>
   42c2c:	b	358b0 <aarch64_ins_barrier@plt>
   42c30:	b	35670 <aarch64_ins_prfop@plt>
   42c34:	b	35680 <aarch64_ins_hint@plt>
   42c38:	b	35650 <aarch64_ins_sve_addr_ri_s4@plt>
   42c3c:	b	35230 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   42c40:	b	35990 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   42c44:	b	35b80 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   42c48:	b	35300 <aarch64_ins_sve_addr_ri_u6@plt>
   42c4c:	b	35170 <aarch64_ins_sve_addr_rr_lsl@plt>
   42c50:	b	350f0 <aarch64_ins_sve_addr_rz_xtw@plt>
   42c54:	b	35a70 <aarch64_ins_sve_addr_zi_u5@plt>
   42c58:	b	352d0 <aarch64_ins_sve_addr_zz_lsl@plt>
   42c5c:	b	355b0 <aarch64_ins_sve_addr_zz_sxtw@plt>
   42c60:	b	356f0 <aarch64_ins_sve_addr_zz_uxtw@plt>
   42c64:	b	35970 <aarch64_ins_sve_aimm@plt>
   42c68:	b	359e0 <aarch64_ins_sve_asimm@plt>
   42c6c:	b	35b20 <aarch64_ins_sve_float_half_one@plt>
   42c70:	b	356a0 <aarch64_ins_sve_float_half_two@plt>
   42c74:	b	35070 <aarch64_ins_sve_float_zero_one@plt>
   42c78:	b	357d0 <aarch64_ins_inv_limm@plt>
   42c7c:	b	35530 <aarch64_ins_sve_limm_mov@plt>
   42c80:	b	35180 <aarch64_ins_sve_scale@plt>
   42c84:	b	35a80 <aarch64_ins_sve_shlimm@plt>
   42c88:	b	35860 <aarch64_ins_sve_shrimm@plt>
   42c8c:	b	350b0 <aarch64_ins_sve_quad_index@plt>
   42c90:	b	35310 <aarch64_ins_sve_index@plt>
   42c94:	b	35110 <aarch64_ins_sve_reglist@plt>
   42c98:	stp	x29, x30, [sp, #-16]!
   42c9c:	adrp	x3, 59000 <fields@@Base+0x5a8>
   42ca0:	adrp	x1, 59000 <fields@@Base+0x5a8>
   42ca4:	mov	x29, sp
   42ca8:	adrp	x0, 54000 <xexit@@Base+0x1508>
   42cac:	add	x3, x3, #0x397
   42cb0:	add	x1, x1, #0x3ae
   42cb4:	add	x0, x0, #0x679
   42cb8:	mov	w2, #0x35f                 	// #863
   42cbc:	bl	35b10 <__assert_fail@plt>

0000000000042cc0 <aarch64_opcode_lookup@@Base>:
   42cc0:	and	w1, w0, #0x8000000
   42cc4:	tbnz	w0, #26, 439ec <aarch64_opcode_lookup@@Base+0xd2c>
   42cc8:	tbnz	w0, #25, 43614 <aarch64_opcode_lookup@@Base+0x954>
   42ccc:	cbnz	w1, 42d20 <aarch64_opcode_lookup@@Base+0x60>
   42cd0:	tbnz	w0, #24, 42cf0 <aarch64_opcode_lookup@@Base+0x30>
   42cd4:	lsr	w0, w0, #31
   42cd8:	add	w0, w0, #0x4a2
   42cdc:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   42ce0:	mov	w2, #0x90                  	// #144
   42ce4:	ldr	x1, [x1, #3848]
   42ce8:	smaddl	x0, w0, w2, x1
   42cec:	ret
   42cf0:	and	w1, w0, #0x40000000
   42cf4:	tbnz	w0, #29, 42d0c <aarch64_opcode_lookup@@Base+0x4c>
   42cf8:	cmp	w1, #0x0
   42cfc:	mov	w0, #0xc                   	// #12
   42d00:	mov	w1, #0x10                  	// #16
   42d04:	csel	w0, w0, w1, eq  // eq = none
   42d08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42d0c:	cmp	w1, #0x0
   42d10:	mov	w0, #0xe                   	// #14
   42d14:	mov	w1, #0x11                  	// #17
   42d18:	csel	w0, w0, w1, eq  // eq = none
   42d1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42d20:	and	w1, w0, #0x20000000
   42d24:	tbnz	w0, #28, 42f30 <aarch64_opcode_lookup@@Base+0x270>
   42d28:	and	w2, w0, #0x800000
   42d2c:	tbnz	w0, #22, 42e2c <aarch64_opcode_lookup@@Base+0x16c>
   42d30:	cbnz	w2, 42db4 <aarch64_opcode_lookup@@Base+0xf4>
   42d34:	cbnz	w1, 42da0 <aarch64_opcode_lookup@@Base+0xe0>
   42d38:	and	w1, w0, #0x200000
   42d3c:	tbnz	w0, #15, 42d70 <aarch64_opcode_lookup@@Base+0xb0>
   42d40:	cbnz	w1, 42d5c <aarch64_opcode_lookup@@Base+0x9c>
   42d44:	tbnz	w0, #31, 48258 <aarch64_opcode_lookup@@Base+0x5598>
   42d48:	tst	x0, #0x40000000
   42d4c:	mov	w1, #0x3ae                 	// #942
   42d50:	mov	w0, #0x3a8                 	// #936
   42d54:	csel	w0, w0, w1, eq  // eq = none
   42d58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42d5c:	cmp	w0, #0x0
   42d60:	mov	w1, #0x3b6                 	// #950
   42d64:	mov	w0, #0x3fd                 	// #1021
   42d68:	csel	w0, w0, w1, ge  // ge = tcont
   42d6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42d70:	cbnz	w1, 42d8c <aarch64_opcode_lookup@@Base+0xcc>
   42d74:	tbnz	w0, #31, 48260 <aarch64_opcode_lookup@@Base+0x55a0>
   42d78:	tst	x0, #0x40000000
   42d7c:	mov	w1, #0x3af                 	// #943
   42d80:	mov	w0, #0x3a9                 	// #937
   42d84:	csel	w0, w0, w1, eq  // eq = none
   42d88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42d8c:	cmp	w0, #0x0
   42d90:	mov	w1, #0x3b7                 	// #951
   42d94:	mov	w0, #0x3ff                 	// #1023
   42d98:	csel	w0, w0, w1, ge  // ge = tcont
   42d9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42da0:	tst	x0, #0x40000000
   42da4:	mov	w1, #0x3d3                 	// #979
   42da8:	mov	w0, #0x3ca                 	// #970
   42dac:	csel	w0, w0, w1, eq  // eq = none
   42db0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42db4:	cbnz	w1, 42e18 <aarch64_opcode_lookup@@Base+0x158>
   42db8:	and	w1, w0, #0x200000
   42dbc:	tbnz	w0, #15, 42de4 <aarch64_opcode_lookup@@Base+0x124>
   42dc0:	cbnz	w1, 42dd4 <aarch64_opcode_lookup@@Base+0x114>
   42dc4:	mvn	w0, w0
   42dc8:	lsr	w0, w0, #31
   42dcc:	add	w0, w0, #0x3c7
   42dd0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42dd4:	tbnz	w0, #31, 48268 <aarch64_opcode_lookup@@Base+0x55a8>
   42dd8:	ubfx	x0, x0, #30, #1
   42ddc:	add	w0, w0, #0x3f1
   42de0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42de4:	cbnz	w1, 42e00 <aarch64_opcode_lookup@@Base+0x140>
   42de8:	tbnz	w0, #31, 48270 <aarch64_opcode_lookup@@Base+0x55b0>
   42dec:	tst	x0, #0x40000000
   42df0:	mov	w1, #0x3b2                 	// #946
   42df4:	mov	w0, #0x3ac                 	// #940
   42df8:	csel	w0, w0, w1, eq  // eq = none
   42dfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e00:	tbnz	w0, #31, 48278 <aarch64_opcode_lookup@@Base+0x55b8>
   42e04:	tst	x0, #0x40000000
   42e08:	mov	w1, #0x3f8                 	// #1016
   42e0c:	mov	w0, #0x3f5                 	// #1013
   42e10:	csel	w0, w0, w1, eq  // eq = none
   42e14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e18:	tst	x0, #0x40000000
   42e1c:	mov	w1, #0x3d9                 	// #985
   42e20:	mov	w0, #0x3d4                 	// #980
   42e24:	csel	w0, w0, w1, eq  // eq = none
   42e28:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e2c:	cbnz	w2, 42eb0 <aarch64_opcode_lookup@@Base+0x1f0>
   42e30:	cbnz	w1, 42e9c <aarch64_opcode_lookup@@Base+0x1dc>
   42e34:	and	w1, w0, #0x200000
   42e38:	tbnz	w0, #15, 42e6c <aarch64_opcode_lookup@@Base+0x1ac>
   42e3c:	cbnz	w1, 42e58 <aarch64_opcode_lookup@@Base+0x198>
   42e40:	tbnz	w0, #31, 48280 <aarch64_opcode_lookup@@Base+0x55c0>
   42e44:	tst	x0, #0x40000000
   42e48:	mov	w1, #0x3b0                 	// #944
   42e4c:	mov	w0, #0x3aa                 	// #938
   42e50:	csel	w0, w0, w1, eq  // eq = none
   42e54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e58:	cmp	w0, #0x0
   42e5c:	mov	w1, #0x3ba                 	// #954
   42e60:	mov	w0, #0x3fe                 	// #1022
   42e64:	csel	w0, w0, w1, ge  // ge = tcont
   42e68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e6c:	cbnz	w1, 42e88 <aarch64_opcode_lookup@@Base+0x1c8>
   42e70:	tbnz	w0, #31, 48288 <aarch64_opcode_lookup@@Base+0x55c8>
   42e74:	tst	x0, #0x40000000
   42e78:	mov	w1, #0x3b1                 	// #945
   42e7c:	mov	w0, #0x3ab                 	// #939
   42e80:	csel	w0, w0, w1, eq  // eq = none
   42e84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e88:	cmp	w0, #0x0
   42e8c:	mov	w1, #0x3bb                 	// #955
   42e90:	mov	w0, #0x400                 	// #1024
   42e94:	csel	w0, w0, w1, ge  // ge = tcont
   42e98:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42e9c:	tst	x0, #0x40000000
   42ea0:	mov	w1, #0x3d2                 	// #978
   42ea4:	mov	w0, #0x3cb                 	// #971
   42ea8:	csel	w0, w0, w1, eq  // eq = none
   42eac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42eb0:	cbnz	w1, 42f1c <aarch64_opcode_lookup@@Base+0x25c>
   42eb4:	and	w1, w0, #0x200000
   42eb8:	tbnz	w0, #15, 42ee8 <aarch64_opcode_lookup@@Base+0x228>
   42ebc:	cbnz	w1, 42ed0 <aarch64_opcode_lookup@@Base+0x210>
   42ec0:	tbnz	w0, #31, 48290 <aarch64_opcode_lookup@@Base+0x55d0>
   42ec4:	ubfx	x0, x0, #30, #1
   42ec8:	add	w0, w0, #0x3c5
   42ecc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42ed0:	tbnz	w0, #31, 48298 <aarch64_opcode_lookup@@Base+0x55d8>
   42ed4:	tst	x0, #0x40000000
   42ed8:	mov	w1, #0x3f7                 	// #1015
   42edc:	mov	w0, #0x3f4                 	// #1012
   42ee0:	csel	w0, w0, w1, eq  // eq = none
   42ee4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42ee8:	cbnz	w1, 42f04 <aarch64_opcode_lookup@@Base+0x244>
   42eec:	tbnz	w0, #31, 482a0 <aarch64_opcode_lookup@@Base+0x55e0>
   42ef0:	tst	x0, #0x40000000
   42ef4:	mov	w1, #0x3b3                 	// #947
   42ef8:	mov	w0, #0x3ad                 	// #941
   42efc:	csel	w0, w0, w1, eq  // eq = none
   42f00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f04:	tbnz	w0, #31, 482a8 <aarch64_opcode_lookup@@Base+0x55e8>
   42f08:	tst	x0, #0x40000000
   42f0c:	mov	w1, #0x3f9                 	// #1017
   42f10:	mov	w0, #0x3f6                 	// #1014
   42f14:	csel	w0, w0, w1, eq  // eq = none
   42f18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f1c:	tst	x0, #0x40000000
   42f20:	mov	w1, #0x3d8                 	// #984
   42f24:	mov	w0, #0x3d5                 	// #981
   42f28:	csel	w0, w0, w1, eq  // eq = none
   42f2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f30:	tbnz	w0, #24, 434c0 <aarch64_opcode_lookup@@Base+0x800>
   42f34:	cbnz	w1, 42f48 <aarch64_opcode_lookup@@Base+0x288>
   42f38:	tbz	w0, #31, 482b0 <aarch64_opcode_lookup@@Base+0x55f0>
   42f3c:	ubfx	x0, x0, #30, #1
   42f40:	add	w0, w0, #0x3dc
   42f44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f48:	and	w1, w0, #0x200000
   42f4c:	tbnz	w0, #10, 43458 <aarch64_opcode_lookup@@Base+0x798>
   42f50:	tbnz	w0, #11, 4339c <aarch64_opcode_lookup@@Base+0x6dc>
   42f54:	cbnz	w1, 42fbc <aarch64_opcode_lookup@@Base+0x2fc>
   42f58:	tbnz	w0, #23, 42f90 <aarch64_opcode_lookup@@Base+0x2d0>
   42f5c:	tbnz	w0, #22, 42f78 <aarch64_opcode_lookup@@Base+0x2b8>
   42f60:	tbnz	w0, #31, 482b8 <aarch64_opcode_lookup@@Base+0x55f8>
   42f64:	tst	x0, #0x40000000
   42f68:	mov	w1, #0x39e                 	// #926
   42f6c:	mov	w0, #0x399                 	// #921
   42f70:	csel	w0, w0, w1, eq  // eq = none
   42f74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f78:	tbnz	w0, #31, 482c0 <aarch64_opcode_lookup@@Base+0x5600>
   42f7c:	tst	x0, #0x40000000
   42f80:	mov	w1, #0x39f                 	// #927
   42f84:	mov	w0, #0x39a                 	// #922
   42f88:	csel	w0, w0, w1, eq  // eq = none
   42f8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42f90:	tbnz	w0, #30, 42fa8 <aarch64_opcode_lookup@@Base+0x2e8>
   42f94:	cmp	w0, #0x0
   42f98:	mov	w1, #0x3a3                 	// #931
   42f9c:	mov	w0, #0x39b                 	// #923
   42fa0:	csel	w0, w0, w1, ge  // ge = tcont
   42fa4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42fa8:	cmp	w0, #0x0
   42fac:	mov	w1, #0x3a4                 	// #932
   42fb0:	mov	w0, #0x3a0                 	// #928
   42fb4:	csel	w0, w0, w1, ge  // ge = tcont
   42fb8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42fbc:	and	w4, w0, #0x2000
   42fc0:	and	w3, w0, #0x4000
   42fc4:	tbnz	w0, #12, 431f8 <aarch64_opcode_lookup@@Base+0x538>
   42fc8:	cbnz	w4, 43124 <aarch64_opcode_lookup@@Base+0x464>
   42fcc:	and	w2, w0, #0x8000
   42fd0:	cbnz	w3, 430a8 <aarch64_opcode_lookup@@Base+0x3e8>
   42fd4:	and	w3, w0, #0x400000
   42fd8:	and	w1, w0, #0x800000
   42fdc:	cbnz	w2, 43044 <aarch64_opcode_lookup@@Base+0x384>
   42fe0:	cbnz	w3, 43010 <aarch64_opcode_lookup@@Base+0x350>
   42fe4:	cbnz	w1, 42ff8 <aarch64_opcode_lookup@@Base+0x338>
   42fe8:	tbnz	w0, #31, 482c8 <aarch64_opcode_lookup@@Base+0x5608>
   42fec:	ubfx	x0, x0, #30, #1
   42ff0:	add	w0, w0, #0x40d
   42ff4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   42ff8:	tbnz	w0, #31, 482d0 <aarch64_opcode_lookup@@Base+0x5610>
   42ffc:	tst	x0, #0x40000000
   43000:	mov	w1, #0x413                 	// #1043
   43004:	mov	w0, #0x410                 	// #1040
   43008:	csel	w0, w0, w1, eq  // eq = none
   4300c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43010:	cbnz	w1, 4302c <aarch64_opcode_lookup@@Base+0x36c>
   43014:	tbnz	w0, #31, 482d8 <aarch64_opcode_lookup@@Base+0x5618>
   43018:	tst	x0, #0x40000000
   4301c:	mov	w1, #0x414                 	// #1044
   43020:	mov	w0, #0x411                 	// #1041
   43024:	csel	w0, w0, w1, eq  // eq = none
   43028:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4302c:	tbnz	w0, #31, 482e0 <aarch64_opcode_lookup@@Base+0x5620>
   43030:	tst	x0, #0x40000000
   43034:	mov	w1, #0x415                 	// #1045
   43038:	mov	w0, #0x412                 	// #1042
   4303c:	csel	w0, w0, w1, eq  // eq = none
   43040:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43044:	cbnz	w3, 43074 <aarch64_opcode_lookup@@Base+0x3b4>
   43048:	cbnz	w1, 4305c <aarch64_opcode_lookup@@Base+0x39c>
   4304c:	tbnz	w0, #31, 482e8 <aarch64_opcode_lookup@@Base+0x5628>
   43050:	ubfx	x0, x0, #30, #1
   43054:	add	w0, w0, #0x401
   43058:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4305c:	tbnz	w0, #31, 482f0 <aarch64_opcode_lookup@@Base+0x5630>
   43060:	tst	x0, #0x40000000
   43064:	mov	w1, #0x407                 	// #1031
   43068:	mov	w0, #0x404                 	// #1028
   4306c:	csel	w0, w0, w1, eq  // eq = none
   43070:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43074:	cbnz	w1, 43090 <aarch64_opcode_lookup@@Base+0x3d0>
   43078:	tbnz	w0, #31, 482f8 <aarch64_opcode_lookup@@Base+0x5638>
   4307c:	tst	x0, #0x40000000
   43080:	mov	w1, #0x408                 	// #1032
   43084:	mov	w0, #0x405                 	// #1029
   43088:	csel	w0, w0, w1, eq  // eq = none
   4308c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43090:	tbnz	w0, #31, 48300 <aarch64_opcode_lookup@@Base+0x5640>
   43094:	tst	x0, #0x40000000
   43098:	mov	w1, #0x409                 	// #1033
   4309c:	mov	w0, #0x406                 	// #1030
   430a0:	csel	w0, w0, w1, eq  // eq = none
   430a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   430a8:	cbnz	w2, 43114 <aarch64_opcode_lookup@@Base+0x454>
   430ac:	and	w1, w0, #0x800000
   430b0:	tbnz	w0, #22, 430e0 <aarch64_opcode_lookup@@Base+0x420>
   430b4:	cbnz	w1, 430c8 <aarch64_opcode_lookup@@Base+0x408>
   430b8:	tbnz	w0, #31, 48308 <aarch64_opcode_lookup@@Base+0x5648>
   430bc:	ubfx	x0, x0, #30, #1
   430c0:	add	w0, w0, #0x43d
   430c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   430c8:	tbnz	w0, #31, 48310 <aarch64_opcode_lookup@@Base+0x5650>
   430cc:	tst	x0, #0x40000000
   430d0:	mov	w1, #0x443                 	// #1091
   430d4:	mov	w0, #0x440                 	// #1088
   430d8:	csel	w0, w0, w1, eq  // eq = none
   430dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   430e0:	cbnz	w1, 430fc <aarch64_opcode_lookup@@Base+0x43c>
   430e4:	tbnz	w0, #31, 48318 <aarch64_opcode_lookup@@Base+0x5658>
   430e8:	tst	x0, #0x40000000
   430ec:	mov	w1, #0x444                 	// #1092
   430f0:	mov	w0, #0x441                 	// #1089
   430f4:	csel	w0, w0, w1, eq  // eq = none
   430f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   430fc:	tbnz	w0, #31, 48320 <aarch64_opcode_lookup@@Base+0x5660>
   43100:	tst	x0, #0x40000000
   43104:	mov	w1, #0x445                 	// #1093
   43108:	mov	w0, #0x442                 	// #1090
   4310c:	csel	w0, w0, w1, eq  // eq = none
   43110:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43114:	tbnz	w0, #31, 48328 <aarch64_opcode_lookup@@Base+0x5668>
   43118:	ubfx	x0, x0, #30, #1
   4311c:	add	w0, w0, #0x3be
   43120:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43124:	and	w2, w0, #0x400000
   43128:	and	w1, w0, #0x800000
   4312c:	cbnz	w3, 43194 <aarch64_opcode_lookup@@Base+0x4d4>
   43130:	cbnz	w2, 43160 <aarch64_opcode_lookup@@Base+0x4a0>
   43134:	cbnz	w1, 43148 <aarch64_opcode_lookup@@Base+0x488>
   43138:	tbnz	w0, #31, 48330 <aarch64_opcode_lookup@@Base+0x5670>
   4313c:	ubfx	x0, x0, #30, #1
   43140:	add	w0, w0, #0x425
   43144:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43148:	tbnz	w0, #31, 48338 <aarch64_opcode_lookup@@Base+0x5678>
   4314c:	tst	x0, #0x40000000
   43150:	mov	w1, #0x42b                 	// #1067
   43154:	mov	w0, #0x428                 	// #1064
   43158:	csel	w0, w0, w1, eq  // eq = none
   4315c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43160:	cbnz	w1, 4317c <aarch64_opcode_lookup@@Base+0x4bc>
   43164:	tbnz	w0, #31, 48340 <aarch64_opcode_lookup@@Base+0x5680>
   43168:	tst	x0, #0x40000000
   4316c:	mov	w1, #0x42c                 	// #1068
   43170:	mov	w0, #0x429                 	// #1065
   43174:	csel	w0, w0, w1, eq  // eq = none
   43178:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4317c:	tbnz	w0, #31, 48348 <aarch64_opcode_lookup@@Base+0x5688>
   43180:	tst	x0, #0x40000000
   43184:	mov	w1, #0x42d                 	// #1069
   43188:	mov	w0, #0x42a                 	// #1066
   4318c:	csel	w0, w0, w1, eq  // eq = none
   43190:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43194:	cbnz	w2, 431c4 <aarch64_opcode_lookup@@Base+0x504>
   43198:	cbnz	w1, 431ac <aarch64_opcode_lookup@@Base+0x4ec>
   4319c:	tbnz	w0, #31, 48350 <aarch64_opcode_lookup@@Base+0x5690>
   431a0:	ubfx	x0, x0, #30, #1
   431a4:	add	w0, w0, #0x455
   431a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   431ac:	tbnz	w0, #31, 48358 <aarch64_opcode_lookup@@Base+0x5698>
   431b0:	tst	x0, #0x40000000
   431b4:	mov	w1, #0x45b                 	// #1115
   431b8:	mov	w0, #0x458                 	// #1112
   431bc:	csel	w0, w0, w1, eq  // eq = none
   431c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   431c4:	cbnz	w1, 431e0 <aarch64_opcode_lookup@@Base+0x520>
   431c8:	tbnz	w0, #31, 48360 <aarch64_opcode_lookup@@Base+0x56a0>
   431cc:	tst	x0, #0x40000000
   431d0:	mov	w1, #0x45c                 	// #1116
   431d4:	mov	w0, #0x459                 	// #1113
   431d8:	csel	w0, w0, w1, eq  // eq = none
   431dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   431e0:	tbnz	w0, #31, 48368 <aarch64_opcode_lookup@@Base+0x56a8>
   431e4:	tst	x0, #0x40000000
   431e8:	mov	w1, #0x45d                 	// #1117
   431ec:	mov	w0, #0x45a                 	// #1114
   431f0:	csel	w0, w0, w1, eq  // eq = none
   431f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   431f8:	and	w2, w0, #0x400000
   431fc:	and	w1, w0, #0x800000
   43200:	cbnz	w4, 432d0 <aarch64_opcode_lookup@@Base+0x610>
   43204:	cbnz	w3, 4326c <aarch64_opcode_lookup@@Base+0x5ac>
   43208:	cbnz	w2, 43238 <aarch64_opcode_lookup@@Base+0x578>
   4320c:	cbnz	w1, 43220 <aarch64_opcode_lookup@@Base+0x560>
   43210:	tbnz	w0, #31, 48370 <aarch64_opcode_lookup@@Base+0x56b0>
   43214:	ubfx	x0, x0, #30, #1
   43218:	add	w0, w0, #0x419
   4321c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43220:	tbnz	w0, #31, 48378 <aarch64_opcode_lookup@@Base+0x56b8>
   43224:	tst	x0, #0x40000000
   43228:	mov	w1, #0x41f                 	// #1055
   4322c:	mov	w0, #0x41c                 	// #1052
   43230:	csel	w0, w0, w1, eq  // eq = none
   43234:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43238:	cbnz	w1, 43254 <aarch64_opcode_lookup@@Base+0x594>
   4323c:	tbnz	w0, #31, 48380 <aarch64_opcode_lookup@@Base+0x56c0>
   43240:	tst	x0, #0x40000000
   43244:	mov	w1, #0x420                 	// #1056
   43248:	mov	w0, #0x41d                 	// #1053
   4324c:	csel	w0, w0, w1, eq  // eq = none
   43250:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43254:	tbnz	w0, #31, 48388 <aarch64_opcode_lookup@@Base+0x56c8>
   43258:	tst	x0, #0x40000000
   4325c:	mov	w1, #0x421                 	// #1057
   43260:	mov	w0, #0x41e                 	// #1054
   43264:	csel	w0, w0, w1, eq  // eq = none
   43268:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4326c:	cbnz	w2, 4329c <aarch64_opcode_lookup@@Base+0x5dc>
   43270:	cbnz	w1, 43284 <aarch64_opcode_lookup@@Base+0x5c4>
   43274:	tbnz	w0, #31, 48390 <aarch64_opcode_lookup@@Base+0x56d0>
   43278:	ubfx	x0, x0, #30, #1
   4327c:	add	w0, w0, #0x449
   43280:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43284:	tbnz	w0, #31, 48398 <aarch64_opcode_lookup@@Base+0x56d8>
   43288:	tst	x0, #0x40000000
   4328c:	mov	w1, #0x44f                 	// #1103
   43290:	mov	w0, #0x44c                 	// #1100
   43294:	csel	w0, w0, w1, eq  // eq = none
   43298:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4329c:	cbnz	w1, 432b8 <aarch64_opcode_lookup@@Base+0x5f8>
   432a0:	tbnz	w0, #31, 483a0 <aarch64_opcode_lookup@@Base+0x56e0>
   432a4:	tst	x0, #0x40000000
   432a8:	mov	w1, #0x450                 	// #1104
   432ac:	mov	w0, #0x44d                 	// #1101
   432b0:	csel	w0, w0, w1, eq  // eq = none
   432b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   432b8:	tbnz	w0, #31, 483a8 <aarch64_opcode_lookup@@Base+0x56e8>
   432bc:	tst	x0, #0x40000000
   432c0:	mov	w1, #0x451                 	// #1105
   432c4:	mov	w0, #0x44e                 	// #1102
   432c8:	csel	w0, w0, w1, eq  // eq = none
   432cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   432d0:	cbnz	w3, 43338 <aarch64_opcode_lookup@@Base+0x678>
   432d4:	cbnz	w2, 43304 <aarch64_opcode_lookup@@Base+0x644>
   432d8:	cbnz	w1, 432ec <aarch64_opcode_lookup@@Base+0x62c>
   432dc:	tbnz	w0, #31, 483b0 <aarch64_opcode_lookup@@Base+0x56f0>
   432e0:	ubfx	x0, x0, #30, #1
   432e4:	add	w0, w0, #0x431
   432e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   432ec:	tbnz	w0, #31, 483b8 <aarch64_opcode_lookup@@Base+0x56f8>
   432f0:	tst	x0, #0x40000000
   432f4:	mov	w1, #0x437                 	// #1079
   432f8:	mov	w0, #0x434                 	// #1076
   432fc:	csel	w0, w0, w1, eq  // eq = none
   43300:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43304:	cbnz	w1, 43320 <aarch64_opcode_lookup@@Base+0x660>
   43308:	tbnz	w0, #31, 483c0 <aarch64_opcode_lookup@@Base+0x5700>
   4330c:	tst	x0, #0x40000000
   43310:	mov	w1, #0x438                 	// #1080
   43314:	mov	w0, #0x435                 	// #1077
   43318:	csel	w0, w0, w1, eq  // eq = none
   4331c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43320:	tbnz	w0, #31, 483c8 <aarch64_opcode_lookup@@Base+0x5708>
   43324:	tst	x0, #0x40000000
   43328:	mov	w1, #0x439                 	// #1081
   4332c:	mov	w0, #0x436                 	// #1078
   43330:	csel	w0, w0, w1, eq  // eq = none
   43334:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43338:	cbnz	w2, 43368 <aarch64_opcode_lookup@@Base+0x6a8>
   4333c:	cbnz	w1, 43350 <aarch64_opcode_lookup@@Base+0x690>
   43340:	tbnz	w0, #31, 483d0 <aarch64_opcode_lookup@@Base+0x5710>
   43344:	ubfx	x0, x0, #30, #1
   43348:	add	w0, w0, #0x461
   4334c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43350:	tbnz	w0, #31, 483d8 <aarch64_opcode_lookup@@Base+0x5718>
   43354:	tst	x0, #0x40000000
   43358:	mov	w1, #0x467                 	// #1127
   4335c:	mov	w0, #0x464                 	// #1124
   43360:	csel	w0, w0, w1, eq  // eq = none
   43364:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43368:	cbnz	w1, 43384 <aarch64_opcode_lookup@@Base+0x6c4>
   4336c:	tbnz	w0, #31, 483e0 <aarch64_opcode_lookup@@Base+0x5720>
   43370:	tst	x0, #0x40000000
   43374:	mov	w1, #0x468                 	// #1128
   43378:	mov	w0, #0x465                 	// #1125
   4337c:	csel	w0, w0, w1, eq  // eq = none
   43380:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43384:	tbnz	w0, #31, 483e8 <aarch64_opcode_lookup@@Base+0x5728>
   43388:	tst	x0, #0x40000000
   4338c:	mov	w1, #0x469                 	// #1129
   43390:	mov	w0, #0x466                 	// #1126
   43394:	csel	w0, w0, w1, eq  // eq = none
   43398:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4339c:	and	w2, w0, #0x800000
   433a0:	cbnz	w1, 433f4 <aarch64_opcode_lookup@@Base+0x734>
   433a4:	cbnz	w2, 433dc <aarch64_opcode_lookup@@Base+0x71c>
   433a8:	tbnz	w0, #22, 433c4 <aarch64_opcode_lookup@@Base+0x704>
   433ac:	tbnz	w0, #31, 483f0 <aarch64_opcode_lookup@@Base+0x5730>
   433b0:	tst	x0, #0x40000000
   433b4:	mov	w1, #0x393                 	// #915
   433b8:	mov	w0, #0x390                 	// #912
   433bc:	csel	w0, w0, w1, eq  // eq = none
   433c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   433c4:	tbnz	w0, #31, 483f8 <aarch64_opcode_lookup@@Base+0x5738>
   433c8:	tst	x0, #0x40000000
   433cc:	mov	w1, #0x394                 	// #916
   433d0:	mov	w0, #0x391                 	// #913
   433d4:	csel	w0, w0, w1, eq  // eq = none
   433d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   433dc:	tbnz	w0, #30, 48400 <aarch64_opcode_lookup@@Base+0x5740>
   433e0:	cmp	w0, #0x0
   433e4:	mov	w1, #0x398                 	// #920
   433e8:	mov	w0, #0x392                 	// #914
   433ec:	csel	w0, w0, w1, ge  // ge = tcont
   433f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   433f4:	cbnz	w2, 4342c <aarch64_opcode_lookup@@Base+0x76c>
   433f8:	tbnz	w0, #22, 43414 <aarch64_opcode_lookup@@Base+0x754>
   433fc:	tbnz	w0, #31, 48408 <aarch64_opcode_lookup@@Base+0x5748>
   43400:	tst	x0, #0x40000000
   43404:	mov	w1, #0x389                 	// #905
   43408:	mov	w0, #0x384                 	// #900
   4340c:	csel	w0, w0, w1, eq  // eq = none
   43410:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43414:	tbnz	w0, #31, 48410 <aarch64_opcode_lookup@@Base+0x5750>
   43418:	tst	x0, #0x40000000
   4341c:	mov	w1, #0x38a                 	// #906
   43420:	mov	w0, #0x385                 	// #901
   43424:	csel	w0, w0, w1, eq  // eq = none
   43428:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4342c:	tbnz	w0, #30, 43444 <aarch64_opcode_lookup@@Base+0x784>
   43430:	cmp	w0, #0x0
   43434:	mov	w1, #0x38e                 	// #910
   43438:	mov	w0, #0x386                 	// #902
   4343c:	csel	w0, w0, w1, ge  // ge = tcont
   43440:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43444:	cmp	w0, #0x0
   43448:	mov	w1, #0x38f                 	// #911
   4344c:	mov	w0, #0x38b                 	// #907
   43450:	csel	w0, w0, w1, ge  // ge = tcont
   43454:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43458:	and	w2, w0, #0x800000
   4345c:	cbnz	w1, 434b0 <aarch64_opcode_lookup@@Base+0x7f0>
   43460:	cbnz	w2, 43498 <aarch64_opcode_lookup@@Base+0x7d8>
   43464:	tbnz	w0, #22, 43480 <aarch64_opcode_lookup@@Base+0x7c0>
   43468:	tbnz	w0, #31, 48418 <aarch64_opcode_lookup@@Base+0x5758>
   4346c:	tst	x0, #0x40000000
   43470:	mov	w1, #0x36a                 	// #874
   43474:	mov	w0, #0x365                 	// #869
   43478:	csel	w0, w0, w1, eq  // eq = none
   4347c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43480:	tbnz	w0, #31, 48420 <aarch64_opcode_lookup@@Base+0x5760>
   43484:	tst	x0, #0x40000000
   43488:	mov	w1, #0x36b                 	// #875
   4348c:	mov	w0, #0x366                 	// #870
   43490:	csel	w0, w0, w1, eq  // eq = none
   43494:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43498:	tbnz	w0, #30, 48428 <aarch64_opcode_lookup@@Base+0x5768>
   4349c:	cmp	w0, #0x0
   434a0:	mov	w1, #0x36f                 	// #879
   434a4:	mov	w0, #0x367                 	// #871
   434a8:	csel	w0, w0, w1, ge  // ge = tcont
   434ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   434b0:	cmp	w2, #0x0
   434b4:	cset	w0, ne  // ne = any
   434b8:	add	w0, w0, #0x3a6
   434bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   434c0:	tbnz	w0, #23, 43570 <aarch64_opcode_lookup@@Base+0x8b0>
   434c4:	tbnz	w0, #22, 4351c <aarch64_opcode_lookup@@Base+0x85c>
   434c8:	cbnz	w1, 43504 <aarch64_opcode_lookup@@Base+0x844>
   434cc:	tbnz	w0, #10, 48430 <aarch64_opcode_lookup@@Base+0x5770>
   434d0:	tbnz	w0, #11, 48438 <aarch64_opcode_lookup@@Base+0x5778>
   434d4:	tbnz	w0, #21, 48440 <aarch64_opcode_lookup@@Base+0x5780>
   434d8:	tbnz	w0, #30, 434f0 <aarch64_opcode_lookup@@Base+0x830>
   434dc:	cmp	w0, #0x0
   434e0:	mov	w1, #0x951                 	// #2385
   434e4:	mov	w0, #0x949                 	// #2377
   434e8:	csel	w0, w0, w1, ge  // ge = tcont
   434ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   434f0:	cmp	w0, #0x0
   434f4:	mov	w1, #0x954                 	// #2388
   434f8:	mov	w0, #0x94d                 	// #2381
   434fc:	csel	w0, w0, w1, ge  // ge = tcont
   43500:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43504:	tbnz	w0, #31, 48448 <aarch64_opcode_lookup@@Base+0x5788>
   43508:	tst	x0, #0x40000000
   4350c:	mov	w1, #0x37d                 	// #893
   43510:	mov	w0, #0x378                 	// #888
   43514:	csel	w0, w0, w1, eq  // eq = none
   43518:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4351c:	cbnz	w1, 43558 <aarch64_opcode_lookup@@Base+0x898>
   43520:	tbnz	w0, #10, 48450 <aarch64_opcode_lookup@@Base+0x5790>
   43524:	tbnz	w0, #11, 48458 <aarch64_opcode_lookup@@Base+0x5798>
   43528:	tbnz	w0, #21, 48460 <aarch64_opcode_lookup@@Base+0x57a0>
   4352c:	tbnz	w0, #30, 43544 <aarch64_opcode_lookup@@Base+0x884>
   43530:	cmp	w0, #0x0
   43534:	mov	w1, #0x952                 	// #2386
   43538:	mov	w0, #0x94a                 	// #2378
   4353c:	csel	w0, w0, w1, ge  // ge = tcont
   43540:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43544:	cmp	w0, #0x0
   43548:	mov	w1, #0x955                 	// #2389
   4354c:	mov	w0, #0x94e                 	// #2382
   43550:	csel	w0, w0, w1, ge  // ge = tcont
   43554:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43558:	tbnz	w0, #31, 48468 <aarch64_opcode_lookup@@Base+0x57a8>
   4355c:	tst	x0, #0x40000000
   43560:	mov	w1, #0x37e                 	// #894
   43564:	mov	w0, #0x379                 	// #889
   43568:	csel	w0, w0, w1, eq  // eq = none
   4356c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43570:	cbnz	w1, 435e8 <aarch64_opcode_lookup@@Base+0x928>
   43574:	and	w1, w0, #0x400000
   43578:	tbnz	w0, #10, 435d8 <aarch64_opcode_lookup@@Base+0x918>
   4357c:	tbnz	w0, #11, 435c8 <aarch64_opcode_lookup@@Base+0x908>
   43580:	tbnz	w0, #21, 435b8 <aarch64_opcode_lookup@@Base+0x8f8>
   43584:	and	w2, w0, #0x40000000
   43588:	cbnz	w1, 435a4 <aarch64_opcode_lookup@@Base+0x8e4>
   4358c:	cbnz	w2, 48470 <aarch64_opcode_lookup@@Base+0x57b0>
   43590:	cmp	w0, #0x0
   43594:	mov	w1, #0x953                 	// #2387
   43598:	mov	w0, #0x94c                 	// #2380
   4359c:	csel	w0, w0, w1, ge  // ge = tcont
   435a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   435a4:	cmp	w2, #0x0
   435a8:	mov	w0, #0x94b                 	// #2379
   435ac:	mov	w1, #0x94f                 	// #2383
   435b0:	csel	w0, w0, w1, eq  // eq = none
   435b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   435b8:	cmp	w1, #0x0
   435bc:	cset	w0, eq  // eq = none
   435c0:	add	w0, w0, #0x3c1
   435c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   435c8:	cmp	w1, #0x0
   435cc:	cset	w0, ne  // ne = any
   435d0:	add	w0, w0, #0x372
   435d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   435d8:	cmp	w1, #0x0
   435dc:	cset	w0, ne  // ne = any
   435e0:	add	w0, w0, #0x376
   435e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   435e8:	tbnz	w0, #30, 43600 <aarch64_opcode_lookup@@Base+0x940>
   435ec:	cmp	w0, #0x0
   435f0:	mov	w1, #0x382                 	// #898
   435f4:	mov	w0, #0x37a                 	// #890
   435f8:	csel	w0, w0, w1, ge  // ge = tcont
   435fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43600:	cmp	w0, #0x0
   43604:	mov	w1, #0x383                 	// #899
   43608:	mov	w0, #0x37f                 	// #895
   4360c:	csel	w0, w0, w1, ge  // ge = tcont
   43610:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43614:	tbnz	w0, #24, 43918 <aarch64_opcode_lookup@@Base+0xc58>
   43618:	cbnz	w1, 43668 <aarch64_opcode_lookup@@Base+0x9a8>
   4361c:	and	w1, w0, #0x20000000
   43620:	tbnz	w0, #23, 43650 <aarch64_opcode_lookup@@Base+0x990>
   43624:	and	w0, w0, #0x40000000
   43628:	cmp	w0, #0x0
   4362c:	cbnz	w1, 43640 <aarch64_opcode_lookup@@Base+0x980>
   43630:	mov	w0, #0x3de                 	// #990
   43634:	mov	w1, #0x3e2                 	// #994
   43638:	csel	w0, w0, w1, eq  // eq = none
   4363c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43640:	mov	w0, #0x3e0                 	// #992
   43644:	mov	w1, #0x3e3                 	// #995
   43648:	csel	w0, w0, w1, eq  // eq = none
   4364c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43650:	cbnz	w1, 48478 <aarch64_opcode_lookup@@Base+0x57b8>
   43654:	tst	x0, #0x40000000
   43658:	mov	w1, #0x49f                 	// #1183
   4365c:	mov	w0, #0x49d                 	// #1181
   43660:	csel	w0, w0, w1, eq  // eq = none
   43664:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43668:	tbnz	w0, #21, 438e8 <aarch64_opcode_lookup@@Base+0xc28>
   4366c:	tbnz	w0, #28, 436a0 <aarch64_opcode_lookup@@Base+0x9e0>
   43670:	and	w1, w0, #0x40000000
   43674:	tbnz	w0, #29, 4368c <aarch64_opcode_lookup@@Base+0x9cc>
   43678:	cmp	w1, #0x0
   4367c:	mov	w0, #0x3e5                 	// #997
   43680:	mov	w1, #0x3ec                 	// #1004
   43684:	csel	w0, w0, w1, eq  // eq = none
   43688:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4368c:	cmp	w1, #0x0
   43690:	mov	w0, #0x3e7                 	// #999
   43694:	mov	w1, #0x3ee                 	// #1006
   43698:	csel	w0, w0, w1, eq  // eq = none
   4369c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   436a0:	and	w1, w0, #0x800
   436a4:	tbnz	w0, #10, 43808 <aarch64_opcode_lookup@@Base+0xb48>
   436a8:	and	w2, w0, #0x400000
   436ac:	cbnz	w1, 43790 <aarch64_opcode_lookup@@Base+0xad0>
   436b0:	and	w3, w0, #0x800000
   436b4:	cbnz	w2, 436f8 <aarch64_opcode_lookup@@Base+0xa38>
   436b8:	and	w1, w0, #0x40000000
   436bc:	cbnz	w3, 436e4 <aarch64_opcode_lookup@@Base+0xa24>
   436c0:	tbnz	w0, #29, 436d4 <aarch64_opcode_lookup@@Base+0xa14>
   436c4:	cmp	w1, #0x0
   436c8:	cset	w0, ne  // ne = any
   436cc:	lsl	w0, w0, #1
   436d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   436d4:	cmp	w1, #0x0
   436d8:	mov	w0, #0x4                   	// #4
   436dc:	csinc	w0, w0, wzr, ne  // ne = any
   436e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   436e4:	cmp	w1, #0x0
   436e8:	mov	w0, #0x296                 	// #662
   436ec:	mov	w1, #0x29a                 	// #666
   436f0:	csel	w0, w0, w1, eq  // eq = none
   436f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   436f8:	cbnz	w3, 43708 <aarch64_opcode_lookup@@Base+0xa48>
   436fc:	ubfx	x0, x0, #30, #1
   43700:	add	w0, w0, #0x294
   43704:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43708:	and	w1, w0, #0x2000
   4370c:	tbnz	w0, #12, 4375c <aarch64_opcode_lookup@@Base+0xa9c>
   43710:	cbnz	w1, 43748 <aarch64_opcode_lookup@@Base+0xa88>
   43714:	tbnz	w0, #14, 43734 <aarch64_opcode_lookup@@Base+0xa74>
   43718:	tbnz	w0, #29, 48480 <aarch64_opcode_lookup@@Base+0x57c0>
   4371c:	tbz	w0, #30, 48488 <aarch64_opcode_lookup@@Base+0x57c8>
   43720:	tst	x0, #0x10000
   43724:	mov	w1, #0x2b5                 	// #693
   43728:	mov	w0, #0x2ad                 	// #685
   4372c:	csel	w0, w0, w1, eq  // eq = none
   43730:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43734:	tst	x0, #0x40000000
   43738:	mov	w1, #0x2c5                 	// #709
   4373c:	mov	w0, #0x2d7                 	// #727
   43740:	csel	w0, w0, w1, eq  // eq = none
   43744:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43748:	tst	x0, #0x40000000
   4374c:	mov	w1, #0x2bd                 	// #701
   43750:	mov	w0, #0x2c9                 	// #713
   43754:	csel	w0, w0, w1, eq  // eq = none
   43758:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4375c:	cbnz	w1, 4377c <aarch64_opcode_lookup@@Base+0xabc>
   43760:	tbnz	w0, #14, 48490 <aarch64_opcode_lookup@@Base+0x57d0>
   43764:	tbz	w0, #30, 48498 <aarch64_opcode_lookup@@Base+0x57d8>
   43768:	tst	x0, #0x10000
   4376c:	mov	w1, #0x2b9                 	// #697
   43770:	mov	w0, #0x2b2                 	// #690
   43774:	csel	w0, w0, w1, eq  // eq = none
   43778:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4377c:	tst	x0, #0x40000000
   43780:	mov	w1, #0x2c1                 	// #705
   43784:	mov	w0, #0x2d6                 	// #726
   43788:	csel	w0, w0, w1, eq  // eq = none
   4378c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43790:	cbnz	w2, 437a0 <aarch64_opcode_lookup@@Base+0xae0>
   43794:	ubfx	x0, x0, #14, #1
   43798:	add	w0, w0, #0x947
   4379c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   437a0:	tbnz	w0, #23, 437b0 <aarch64_opcode_lookup@@Base+0xaf0>
   437a4:	ubfx	x0, x0, #30, #1
   437a8:	add	w0, w0, #0x292
   437ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   437b0:	and	w1, w0, #0x2000
   437b4:	tbnz	w0, #12, 437f0 <aarch64_opcode_lookup@@Base+0xb30>
   437b8:	cbnz	w1, 437dc <aarch64_opcode_lookup@@Base+0xb1c>
   437bc:	tbnz	w0, #14, 484a0 <aarch64_opcode_lookup@@Base+0x57e0>
   437c0:	tbz	w0, #30, 484a8 <aarch64_opcode_lookup@@Base+0x57e8>
   437c4:	tbnz	w0, #16, 484b0 <aarch64_opcode_lookup@@Base+0x57f0>
   437c8:	cmp	w0, #0x0
   437cc:	mov	w1, #0x2b4                 	// #692
   437d0:	mov	w0, #0x2af                 	// #687
   437d4:	csel	w0, w0, w1, ge  // ge = tcont
   437d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   437dc:	tst	x0, #0x40000000
   437e0:	mov	w1, #0x2bf                 	// #703
   437e4:	mov	w0, #0x2cd                 	// #717
   437e8:	csel	w0, w0, w1, eq  // eq = none
   437ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   437f0:	cbnz	w1, 484b8 <aarch64_opcode_lookup@@Base+0x57f8>
   437f4:	tst	x0, #0x4000
   437f8:	mov	w1, #0x2dd                 	// #733
   437fc:	mov	w0, #0x2bb                 	// #699
   43800:	csel	w0, w0, w1, eq  // eq = none
   43804:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43808:	cbnz	w1, 43894 <aarch64_opcode_lookup@@Base+0xbd4>
   4380c:	tbnz	w0, #22, 43828 <aarch64_opcode_lookup@@Base+0xb68>
   43810:	tbz	w0, #23, 484c0 <aarch64_opcode_lookup@@Base+0x5800>
   43814:	tst	x0, #0x40000000
   43818:	mov	w1, #0x29d                 	// #669
   4381c:	mov	w0, #0x297                 	// #663
   43820:	csel	w0, w0, w1, eq  // eq = none
   43824:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43828:	and	w1, w0, #0x2000
   4382c:	tbnz	w0, #12, 43874 <aarch64_opcode_lookup@@Base+0xbb4>
   43830:	cbnz	w1, 43860 <aarch64_opcode_lookup@@Base+0xba0>
   43834:	tbnz	w0, #14, 4384c <aarch64_opcode_lookup@@Base+0xb8c>
   43838:	tst	x0, #0x10000
   4383c:	mov	w1, #0x2b6                 	// #694
   43840:	mov	w0, #0x2ae                 	// #686
   43844:	csel	w0, w0, w1, eq  // eq = none
   43848:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4384c:	tst	x0, #0x40000000
   43850:	mov	w1, #0x2c6                 	// #710
   43854:	mov	w0, #0x2d8                 	// #728
   43858:	csel	w0, w0, w1, eq  // eq = none
   4385c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43860:	tst	x0, #0x40000000
   43864:	mov	w1, #0x2be                 	// #702
   43868:	mov	w0, #0x2cb                 	// #715
   4386c:	csel	w0, w0, w1, eq  // eq = none
   43870:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43874:	cbnz	w1, 484c8 <aarch64_opcode_lookup@@Base+0x5808>
   43878:	tbnz	w0, #14, 484d0 <aarch64_opcode_lookup@@Base+0x5810>
   4387c:	tbz	w0, #30, 484d8 <aarch64_opcode_lookup@@Base+0x5818>
   43880:	tst	x0, #0x10000
   43884:	mov	w1, #0x2ba                 	// #698
   43888:	mov	w0, #0x2b3                 	// #691
   4388c:	csel	w0, w0, w1, eq  // eq = none
   43890:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43894:	and	w1, w0, #0x2000
   43898:	tbnz	w0, #12, 438d0 <aarch64_opcode_lookup@@Base+0xc10>
   4389c:	cbnz	w1, 438bc <aarch64_opcode_lookup@@Base+0xbfc>
   438a0:	tbnz	w0, #14, 484e0 <aarch64_opcode_lookup@@Base+0x5820>
   438a4:	tbz	w0, #30, 484e8 <aarch64_opcode_lookup@@Base+0x5828>
   438a8:	tst	x0, #0x10000
   438ac:	mov	w1, #0x2b8                 	// #696
   438b0:	mov	w0, #0x2b0                 	// #688
   438b4:	csel	w0, w0, w1, eq  // eq = none
   438b8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   438bc:	tst	x0, #0x40000000
   438c0:	mov	w1, #0x2c0                 	// #704
   438c4:	mov	w0, #0x2cf                 	// #719
   438c8:	csel	w0, w0, w1, eq  // eq = none
   438cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   438d0:	cbnz	w1, 484f0 <aarch64_opcode_lookup@@Base+0x5830>
   438d4:	tst	x0, #0x4000
   438d8:	mov	w1, #0x2de                 	// #734
   438dc:	mov	w0, #0x2bc                 	// #700
   438e0:	csel	w0, w0, w1, eq  // eq = none
   438e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   438e8:	and	w1, w0, #0x40000000
   438ec:	tbnz	w0, #29, 43904 <aarch64_opcode_lookup@@Base+0xc44>
   438f0:	cmp	w1, #0x0
   438f4:	mov	w0, #0x3e6                 	// #998
   438f8:	mov	w1, #0x3ed                 	// #1005
   438fc:	csel	w0, w0, w1, eq  // eq = none
   43900:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43904:	cmp	w1, #0x0
   43908:	mov	w0, #0x3ea                 	// #1002
   4390c:	mov	w1, #0x3f0                 	// #1008
   43910:	csel	w0, w0, w1, eq  // eq = none
   43914:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43918:	cbnz	w1, 43938 <aarch64_opcode_lookup@@Base+0xc78>
   4391c:	tbnz	w0, #23, 484f8 <aarch64_opcode_lookup@@Base+0x5838>
   43920:	tbnz	w0, #29, 48500 <aarch64_opcode_lookup@@Base+0x5840>
   43924:	tst	x0, #0x40000000
   43928:	mov	w1, #0x275                 	// #629
   4392c:	mov	w0, #0x26a                 	// #618
   43930:	csel	w0, w0, w1, eq  // eq = none
   43934:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43938:	tbnz	w0, #21, 4398c <aarch64_opcode_lookup@@Base+0xccc>
   4393c:	tbnz	w0, #28, 43970 <aarch64_opcode_lookup@@Base+0xcb0>
   43940:	and	w1, w0, #0x40000000
   43944:	tbnz	w0, #29, 4395c <aarch64_opcode_lookup@@Base+0xc9c>
   43948:	cmp	w1, #0x0
   4394c:	mov	w0, #0x15                  	// #21
   43950:	mov	w1, #0x18                  	// #24
   43954:	csel	w0, w0, w1, eq  // eq = none
   43958:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4395c:	cmp	w1, #0x0
   43960:	mov	w0, #0x16                  	// #22
   43964:	mov	w1, #0x1a                  	// #26
   43968:	csel	w0, w0, w1, eq  // eq = none
   4396c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43970:	tbnz	w0, #15, 48508 <aarch64_opcode_lookup@@Base+0x5848>
   43974:	tbz	w0, #22, 48510 <aarch64_opcode_lookup@@Base+0x5850>
   43978:	tst	x0, #0x800000
   4397c:	mov	w1, #0x2ec                 	// #748
   43980:	mov	w0, #0x2e7                 	// #743
   43984:	csel	w0, w0, w1, eq  // eq = none
   43988:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4398c:	tbnz	w0, #23, 439d8 <aarch64_opcode_lookup@@Base+0xd18>
   43990:	tbnz	w0, #28, 439c4 <aarch64_opcode_lookup@@Base+0xd04>
   43994:	and	w1, w0, #0x40000000
   43998:	tbnz	w0, #29, 439b0 <aarch64_opcode_lookup@@Base+0xcf0>
   4399c:	cmp	w1, #0x0
   439a0:	mov	w0, #0x6                   	// #6
   439a4:	mov	w1, #0x9                   	// #9
   439a8:	csel	w0, w0, w1, eq  // eq = none
   439ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   439b0:	cmp	w1, #0x0
   439b4:	mov	w0, #0x7                   	// #7
   439b8:	mov	w1, #0xa                   	// #10
   439bc:	csel	w0, w0, w1, eq  // eq = none
   439c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   439c4:	tst	x0, #0x8000
   439c8:	mov	w1, #0x2e5                 	// #741
   439cc:	mov	w0, #0x2e3                 	// #739
   439d0:	csel	w0, w0, w1, eq  // eq = none
   439d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   439d8:	tst	x0, #0x8000
   439dc:	mov	w1, #0x2ea                 	// #746
   439e0:	mov	w0, #0x2e8                 	// #744
   439e4:	csel	w0, w0, w1, eq  // eq = none
   439e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   439ec:	and	w2, w0, #0x10000000
   439f0:	cbnz	w1, 46790 <aarch64_opcode_lookup@@Base+0x3ad0>
   439f4:	and	w3, w0, #0x20000000
   439f8:	cbnz	w2, 46640 <aarch64_opcode_lookup@@Base+0x3980>
   439fc:	tbnz	w0, #24, 450f8 <aarch64_opcode_lookup@@Base+0x2438>
   43a00:	cbnz	w3, 449f8 <aarch64_opcode_lookup@@Base+0x1d38>
   43a04:	and	w2, w0, #0x8000
   43a08:	and	w3, w0, #0x4000
   43a0c:	tbnz	w0, #13, 44208 <aarch64_opcode_lookup@@Base+0x1548>
   43a10:	cbnz	w3, 43f50 <aarch64_opcode_lookup@@Base+0x1290>
   43a14:	cbnz	w2, 43c6c <aarch64_opcode_lookup@@Base+0xfac>
   43a18:	and	w1, w0, #0x40000000
   43a1c:	tbnz	w0, #21, 43b68 <aarch64_opcode_lookup@@Base+0xea8>
   43a20:	cbnz	w1, 43b1c <aarch64_opcode_lookup@@Base+0xe5c>
   43a24:	tbnz	w0, #31, 43b08 <aarch64_opcode_lookup@@Base+0xe48>
   43a28:	and	w2, w0, #0x20000
   43a2c:	and	w1, w0, #0x40000
   43a30:	tbnz	w0, #16, 43a9c <aarch64_opcode_lookup@@Base+0xddc>
   43a34:	cbnz	w2, 43a80 <aarch64_opcode_lookup@@Base+0xdc0>
   43a38:	and	w2, w0, #0x80000
   43a3c:	cbnz	w1, 43a6c <aarch64_opcode_lookup@@Base+0xdac>
   43a40:	and	w0, w0, #0x100000
   43a44:	cmp	w0, #0x0
   43a48:	cbnz	w2, 43a5c <aarch64_opcode_lookup@@Base+0xd9c>
   43a4c:	mov	w0, #0x4fc                 	// #1276
   43a50:	mov	w1, #0x6d1                 	// #1745
   43a54:	csel	w0, w0, w1, eq  // eq = none
   43a58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43a5c:	mov	w0, #0x720                 	// #1824
   43a60:	mov	w1, #0x6dc                 	// #1756
   43a64:	csel	w0, w0, w1, eq  // eq = none
   43a68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43a6c:	cmp	w2, #0x0
   43a70:	mov	w0, #0x717                 	// #1815
   43a74:	mov	w1, #0x70e                 	// #1806
   43a78:	csel	w0, w0, w1, eq  // eq = none
   43a7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43a80:	cbnz	w1, 48518 <aarch64_opcode_lookup@@Base+0x5858>
   43a84:	tbz	w0, #19, 48520 <aarch64_opcode_lookup@@Base+0x5860>
   43a88:	tst	x0, #0x100000
   43a8c:	mov	w1, #0x504                 	// #1284
   43a90:	mov	w0, #0x723                 	// #1827
   43a94:	csel	w0, w0, w1, eq  // eq = none
   43a98:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43a9c:	cbnz	w2, 43ad4 <aarch64_opcode_lookup@@Base+0xe14>
   43aa0:	and	w2, w0, #0x80000
   43aa4:	cbnz	w1, 43ac0 <aarch64_opcode_lookup@@Base+0xe00>
   43aa8:	cbz	w2, 48528 <aarch64_opcode_lookup@@Base+0x5868>
   43aac:	tst	x0, #0x100000
   43ab0:	mov	w1, #0x55b                 	// #1371
   43ab4:	mov	w0, #0x7b5                 	// #1973
   43ab8:	csel	w0, w0, w1, eq  // eq = none
   43abc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ac0:	cmp	w2, #0x0
   43ac4:	mov	w0, #0x7af                 	// #1967
   43ac8:	mov	w1, #0x7a6                 	// #1958
   43acc:	csel	w0, w0, w1, eq  // eq = none
   43ad0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ad4:	cbnz	w1, 48530 <aarch64_opcode_lookup@@Base+0x5870>
   43ad8:	and	w1, w0, #0x100000
   43adc:	tbnz	w0, #19, 43af4 <aarch64_opcode_lookup@@Base+0xe34>
   43ae0:	cmp	w1, #0x0
   43ae4:	mov	w0, #0x79b                 	// #1947
   43ae8:	mov	w1, #0x7ba                 	// #1978
   43aec:	csel	w0, w0, w1, eq  // eq = none
   43af0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43af4:	cmp	w1, #0x0
   43af8:	mov	w0, #0x7b8                 	// #1976
   43afc:	mov	w1, #0x510                 	// #1296
   43b00:	csel	w0, w0, w1, eq  // eq = none
   43b04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b08:	tst	x0, #0x800000
   43b0c:	mov	w1, #0x621                 	// #1569
   43b10:	mov	w0, #0x616                 	// #1558
   43b14:	csel	w0, w0, w1, eq  // eq = none
   43b18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b1c:	tbnz	w0, #31, 43b54 <aarch64_opcode_lookup@@Base+0xe94>
   43b20:	tbnz	w0, #12, 48538 <aarch64_opcode_lookup@@Base+0x5878>
   43b24:	and	w1, w0, #0x800
   43b28:	tbnz	w0, #10, 43b40 <aarch64_opcode_lookup@@Base+0xe80>
   43b2c:	cmp	w1, #0x0
   43b30:	mov	w0, #0x719                 	// #1817
   43b34:	mov	w1, #0x877                 	// #2167
   43b38:	csel	w0, w0, w1, eq  // eq = none
   43b3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b40:	cmp	w1, #0x0
   43b44:	mov	w0, #0x7b1                 	// #1969
   43b48:	mov	w1, #0x87e                 	// #2174
   43b4c:	csel	w0, w0, w1, eq  // eq = none
   43b50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b54:	tst	x0, #0x800000
   43b58:	mov	w1, #0x625                 	// #1573
   43b5c:	mov	w0, #0x61a                 	// #1562
   43b60:	csel	w0, w0, w1, eq  // eq = none
   43b64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b68:	cbnz	w1, 43bbc <aarch64_opcode_lookup@@Base+0xefc>
   43b6c:	tbnz	w0, #31, 43ba8 <aarch64_opcode_lookup@@Base+0xee8>
   43b70:	and	w1, w0, #0x800
   43b74:	tbnz	w0, #10, 43b90 <aarch64_opcode_lookup@@Base+0xed0>
   43b78:	cbnz	w1, 48540 <aarch64_opcode_lookup@@Base+0x5880>
   43b7c:	tst	x0, #0x1000
   43b80:	mov	w1, #0x727                 	// #1831
   43b84:	mov	w0, #0x4fa                 	// #1274
   43b88:	csel	w0, w0, w1, eq  // eq = none
   43b8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43b90:	cbnz	w1, 48548 <aarch64_opcode_lookup@@Base+0x5888>
   43b94:	tst	x0, #0x1000
   43b98:	mov	w1, #0x7bb                 	// #1979
   43b9c:	mov	w0, #0x797                 	// #1943
   43ba0:	csel	w0, w0, w1, eq  // eq = none
   43ba4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ba8:	tst	x0, #0x800000
   43bac:	mov	w1, #0x622                 	// #1570
   43bb0:	mov	w0, #0x6e4                 	// #1764
   43bb4:	csel	w0, w0, w1, eq  // eq = none
   43bb8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43bbc:	tbnz	w0, #23, 43bf4 <aarch64_opcode_lookup@@Base+0xf34>
   43bc0:	tbnz	w0, #31, 48550 <aarch64_opcode_lookup@@Base+0x5890>
   43bc4:	and	w1, w0, #0x800
   43bc8:	tbnz	w0, #10, 43be0 <aarch64_opcode_lookup@@Base+0xf20>
   43bcc:	cmp	w1, #0x0
   43bd0:	mov	w0, #0x890                 	// #2192
   43bd4:	mov	w1, #0x833                 	// #2099
   43bd8:	csel	w0, w0, w1, eq  // eq = none
   43bdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43be0:	cmp	w1, #0x0
   43be4:	mov	w0, #0x894                 	// #2196
   43be8:	mov	w1, #0x836                 	// #2102
   43bec:	csel	w0, w0, w1, eq  // eq = none
   43bf0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43bf4:	tbnz	w0, #31, 48558 <aarch64_opcode_lookup@@Base+0x5898>
   43bf8:	and	w2, w0, #0x800
   43bfc:	and	w1, w0, #0x1000
   43c00:	tbnz	w0, #10, 43c38 <aarch64_opcode_lookup@@Base+0xf78>
   43c04:	cbnz	w2, 43c28 <aarch64_opcode_lookup@@Base+0xf68>
   43c08:	and	w0, w0, #0x400000
   43c0c:	cmp	w0, #0x0
   43c10:	cset	w0, ne  // ne = any
   43c14:	cbnz	w1, 43c20 <aarch64_opcode_lookup@@Base+0xf60>
   43c18:	add	w0, w0, #0x71a
   43c1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c20:	add	w0, w0, #0x891
   43c24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c28:	cbnz	w1, 48560 <aarch64_opcode_lookup@@Base+0x58a0>
   43c2c:	ubfx	x0, x0, #22, #1
   43c30:	add	w0, w0, #0x834
   43c34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c38:	cbnz	w2, 43c5c <aarch64_opcode_lookup@@Base+0xf9c>
   43c3c:	and	w0, w0, #0x400000
   43c40:	cmp	w0, #0x0
   43c44:	cset	w0, ne  // ne = any
   43c48:	cbnz	w1, 43c54 <aarch64_opcode_lookup@@Base+0xf94>
   43c4c:	add	w0, w0, #0x7b2
   43c50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c54:	add	w0, w0, #0x895
   43c58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c5c:	cbnz	w1, 48568 <aarch64_opcode_lookup@@Base+0x58a8>
   43c60:	ubfx	x0, x0, #22, #1
   43c64:	add	w0, w0, #0x837
   43c68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43c6c:	tbnz	w0, #31, 43ed8 <aarch64_opcode_lookup@@Base+0x1218>
   43c70:	tbnz	w0, #21, 43e5c <aarch64_opcode_lookup@@Base+0x119c>
   43c74:	and	w4, w0, #0x20000
   43c78:	and	w3, w0, #0x40000
   43c7c:	and	w1, w0, #0x80000
   43c80:	tbnz	w0, #16, 43d54 <aarch64_opcode_lookup@@Base+0x1094>
   43c84:	and	w2, w0, #0x100000
   43c88:	cbnz	w4, 43cf8 <aarch64_opcode_lookup@@Base+0x1038>
   43c8c:	cbnz	w3, 43cc4 <aarch64_opcode_lookup@@Base+0x1004>
   43c90:	cbnz	w1, 43cac <aarch64_opcode_lookup@@Base+0xfec>
   43c94:	cbz	w2, 48570 <aarch64_opcode_lookup@@Base+0x58b0>
   43c98:	tst	x0, #0x40000000
   43c9c:	mov	w1, #0x855                 	// #2133
   43ca0:	mov	w0, #0x50a                 	// #1290
   43ca4:	csel	w0, w0, w1, eq  // eq = none
   43ca8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43cac:	cbz	w2, 48578 <aarch64_opcode_lookup@@Base+0x58b8>
   43cb0:	tst	x0, #0x40000000
   43cb4:	mov	w1, #0x872                 	// #2162
   43cb8:	mov	w0, #0x50b                 	// #1291
   43cbc:	csel	w0, w0, w1, eq  // eq = none
   43cc0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43cc4:	cbnz	w1, 43ce0 <aarch64_opcode_lookup@@Base+0x1020>
   43cc8:	cbz	w2, 48580 <aarch64_opcode_lookup@@Base+0x58c0>
   43ccc:	tst	x0, #0x40000000
   43cd0:	mov	w1, #0x8b0                 	// #2224
   43cd4:	mov	w0, #0x50e                 	// #1294
   43cd8:	csel	w0, w0, w1, eq  // eq = none
   43cdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ce0:	cbnz	w2, 48588 <aarch64_opcode_lookup@@Base+0x58c8>
   43ce4:	tst	x0, #0x40000000
   43ce8:	mov	w1, #0x8a4                 	// #2212
   43cec:	mov	w0, #0x8b4                 	// #2228
   43cf0:	csel	w0, w0, w1, eq  // eq = none
   43cf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43cf8:	cbnz	w3, 43d24 <aarch64_opcode_lookup@@Base+0x1064>
   43cfc:	cmp	w2, #0x0
   43d00:	cbnz	w1, 43d14 <aarch64_opcode_lookup@@Base+0x1054>
   43d04:	mov	w0, #0x8b2                 	// #2226
   43d08:	mov	w1, #0x858                 	// #2136
   43d0c:	csel	w0, w0, w1, eq  // eq = none
   43d10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d14:	mov	w0, #0x89c                 	// #2204
   43d18:	mov	w1, #0x8aa                 	// #2218
   43d1c:	csel	w0, w0, w1, eq  // eq = none
   43d20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d24:	cbnz	w1, 43d40 <aarch64_opcode_lookup@@Base+0x1080>
   43d28:	cbnz	w2, 48590 <aarch64_opcode_lookup@@Base+0x58d0>
   43d2c:	tst	x0, #0x40000000
   43d30:	mov	w1, #0x8b3                 	// #2227
   43d34:	mov	w0, #0x8a2                 	// #2210
   43d38:	csel	w0, w0, w1, eq  // eq = none
   43d3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d40:	cmp	w2, #0x0
   43d44:	mov	w0, #0x89d                 	// #2205
   43d48:	mov	w1, #0x8ab                 	// #2219
   43d4c:	csel	w0, w0, w1, eq  // eq = none
   43d50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d54:	cbnz	w4, 43dc4 <aarch64_opcode_lookup@@Base+0x1104>
   43d58:	cbnz	w3, 43d94 <aarch64_opcode_lookup@@Base+0x10d4>
   43d5c:	and	w2, w0, #0x100000
   43d60:	cbnz	w1, 43d7c <aarch64_opcode_lookup@@Base+0x10bc>
   43d64:	cbz	w2, 48598 <aarch64_opcode_lookup@@Base+0x58d8>
   43d68:	tst	x0, #0x40000000
   43d6c:	mov	w1, #0x8d5                 	// #2261
   43d70:	mov	w0, #0x6c6                 	// #1734
   43d74:	csel	w0, w0, w1, eq  // eq = none
   43d78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d7c:	cbz	w2, 485a0 <aarch64_opcode_lookup@@Base+0x58e0>
   43d80:	tst	x0, #0x40000000
   43d84:	mov	w1, #0x8ed                 	// #2285
   43d88:	mov	w0, #0x6c7                 	// #1735
   43d8c:	csel	w0, w0, w1, eq  // eq = none
   43d90:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43d94:	cbnz	w1, 43dac <aarch64_opcode_lookup@@Base+0x10ec>
   43d98:	tst	x0, #0x40000000
   43d9c:	mov	w1, #0x8fc                 	// #2300
   43da0:	mov	w0, #0x6c9                 	// #1737
   43da4:	csel	w0, w0, w1, eq  // eq = none
   43da8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43dac:	tbnz	w0, #20, 485a8 <aarch64_opcode_lookup@@Base+0x58e8>
   43db0:	tst	x0, #0x40000000
   43db4:	mov	w1, #0x8f4                 	// #2292
   43db8:	mov	w0, #0x8ff                 	// #2303
   43dbc:	csel	w0, w0, w1, eq  // eq = none
   43dc0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43dc4:	and	w2, w0, #0x100000
   43dc8:	cbnz	w3, 43e14 <aarch64_opcode_lookup@@Base+0x1154>
   43dcc:	cbnz	w1, 43dfc <aarch64_opcode_lookup@@Base+0x113c>
   43dd0:	and	w0, w0, #0x40000000
   43dd4:	cmp	w0, #0x0
   43dd8:	cbnz	w2, 43dec <aarch64_opcode_lookup@@Base+0x112c>
   43ddc:	mov	w0, #0x6c2                 	// #1730
   43de0:	mov	w1, #0x8fd                 	// #2301
   43de4:	csel	w0, w0, w1, eq  // eq = none
   43de8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43dec:	mov	w0, #0x6c0                 	// #1728
   43df0:	mov	w1, #0x8d6                 	// #2262
   43df4:	csel	w0, w0, w1, eq  // eq = none
   43df8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43dfc:	cbz	w2, 485b0 <aarch64_opcode_lookup@@Base+0x58f0>
   43e00:	tst	x0, #0x40000000
   43e04:	mov	w1, #0x8f7                 	// #2295
   43e08:	mov	w0, #0x6c1                 	// #1729
   43e0c:	csel	w0, w0, w1, eq  // eq = none
   43e10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e14:	cbnz	w1, 43e44 <aarch64_opcode_lookup@@Base+0x1184>
   43e18:	and	w0, w0, #0x40000000
   43e1c:	cmp	w0, #0x0
   43e20:	cbnz	w2, 43e34 <aarch64_opcode_lookup@@Base+0x1174>
   43e24:	mov	w0, #0x8f2                 	// #2290
   43e28:	mov	w1, #0x8fe                 	// #2302
   43e2c:	csel	w0, w0, w1, eq  // eq = none
   43e30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e34:	mov	w0, #0x6c3                 	// #1731
   43e38:	mov	w1, #0x8d7                 	// #2263
   43e3c:	csel	w0, w0, w1, eq  // eq = none
   43e40:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e44:	cbnz	w2, 485b8 <aarch64_opcode_lookup@@Base+0x58f8>
   43e48:	tst	x0, #0x40000000
   43e4c:	mov	w1, #0x8ef                 	// #2287
   43e50:	mov	w0, #0x8a5                 	// #2213
   43e54:	csel	w0, w0, w1, eq  // eq = none
   43e58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e5c:	and	w1, w0, #0x40000000
   43e60:	and	w2, w0, #0x1000
   43e64:	tbnz	w0, #10, 43e8c <aarch64_opcode_lookup@@Base+0x11cc>
   43e68:	cbnz	w2, 43e7c <aarch64_opcode_lookup@@Base+0x11bc>
   43e6c:	cbz	w1, 485c0 <aarch64_opcode_lookup@@Base+0x5900>
   43e70:	ubfx	x0, x0, #22, #1
   43e74:	add	w0, w0, #0x85d
   43e78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e7c:	cbz	w1, 485c8 <aarch64_opcode_lookup@@Base+0x5908>
   43e80:	ubfx	x0, x0, #22, #1
   43e84:	add	w0, w0, #0x8da
   43e88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43e8c:	cbnz	w2, 43eb4 <aarch64_opcode_lookup@@Base+0x11f4>
   43e90:	cbnz	w1, 43ea8 <aarch64_opcode_lookup@@Base+0x11e8>
   43e94:	tst	x0, #0x800
   43e98:	mov	w1, #0x6be                 	// #1726
   43e9c:	mov	w0, #0x6c4                 	// #1732
   43ea0:	csel	w0, w0, w1, eq  // eq = none
   43ea4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ea8:	ubfx	x0, x0, #22, #1
   43eac:	add	w0, w0, #0x860
   43eb0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43eb4:	cbnz	w1, 43ecc <aarch64_opcode_lookup@@Base+0x120c>
   43eb8:	tst	x0, #0x800
   43ebc:	mov	w1, #0x6bf                 	// #1727
   43ec0:	mov	w0, #0x6c5                 	// #1733
   43ec4:	csel	w0, w0, w1, eq  // eq = none
   43ec8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ecc:	ubfx	x0, x0, #22, #1
   43ed0:	add	w0, w0, #0x8dd
   43ed4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ed8:	and	w1, w0, #0x800000
   43edc:	tbnz	w0, #22, 43f20 <aarch64_opcode_lookup@@Base+0x1260>
   43ee0:	tbnz	w0, #21, 43ef4 <aarch64_opcode_lookup@@Base+0x1234>
   43ee4:	cmp	w1, #0x0
   43ee8:	cset	w0, ne  // ne = any
   43eec:	add	w0, w0, #0x82d
   43ef0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43ef4:	and	w0, w0, #0x40000000
   43ef8:	cmp	w0, #0x0
   43efc:	cbnz	w1, 43f10 <aarch64_opcode_lookup@@Base+0x1250>
   43f00:	mov	w0, #0x61c                 	// #1564
   43f04:	mov	w1, #0x620                 	// #1568
   43f08:	csel	w0, w0, w1, eq  // eq = none
   43f0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43f10:	mov	w0, #0x629                 	// #1577
   43f14:	mov	w1, #0x62c                 	// #1580
   43f18:	csel	w0, w0, w1, eq  // eq = none
   43f1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43f20:	and	w2, w0, #0x40000000
   43f24:	cbnz	w1, 43f40 <aarch64_opcode_lookup@@Base+0x1280>
   43f28:	cbz	w2, 485d0 <aarch64_opcode_lookup@@Base+0x5910>
   43f2c:	tst	x0, #0x200000
   43f30:	mov	w1, #0x6e6                 	// #1766
   43f34:	mov	w0, #0x61b                 	// #1563
   43f38:	csel	w0, w0, w1, eq  // eq = none
   43f3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43f40:	cbz	w2, 485d8 <aarch64_opcode_lookup@@Base+0x5918>
   43f44:	ubfx	x0, x0, #21, #1
   43f48:	add	w0, w0, #0x627
   43f4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43f50:	and	w1, w0, #0x40000000
   43f54:	cbnz	w2, 44060 <aarch64_opcode_lookup@@Base+0x13a0>
   43f58:	tbnz	w0, #21, 43fec <aarch64_opcode_lookup@@Base+0x132c>
   43f5c:	cbnz	w1, 43f78 <aarch64_opcode_lookup@@Base+0x12b8>
   43f60:	tbz	w0, #31, 485e0 <aarch64_opcode_lookup@@Base+0x5920>
   43f64:	tst	x0, #0x800000
   43f68:	mov	w1, #0x5f0                 	// #1520
   43f6c:	mov	w0, #0x5dc                 	// #1500
   43f70:	csel	w0, w0, w1, eq  // eq = none
   43f74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43f78:	tbnz	w0, #31, 43fd8 <aarch64_opcode_lookup@@Base+0x1318>
   43f7c:	and	w2, w0, #0x800
   43f80:	and	w1, w0, #0x1000
   43f84:	tbnz	w0, #10, 43fb0 <aarch64_opcode_lookup@@Base+0x12f0>
   43f88:	cmp	w1, #0x0
   43f8c:	cbnz	w2, 43fa0 <aarch64_opcode_lookup@@Base+0x12e0>
   43f90:	mov	w0, #0x85f                 	// #2143
   43f94:	mov	w1, #0x865                 	// #2149
   43f98:	csel	w0, w0, w1, eq  // eq = none
   43f9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43fa0:	mov	w0, #0x8dc                 	// #2268
   43fa4:	mov	w1, #0x8e2                 	// #2274
   43fa8:	csel	w0, w0, w1, eq  // eq = none
   43fac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43fb0:	cmp	w1, #0x0
   43fb4:	cbnz	w2, 43fc8 <aarch64_opcode_lookup@@Base+0x1308>
   43fb8:	mov	w0, #0x862                 	// #2146
   43fbc:	mov	w1, #0x868                 	// #2152
   43fc0:	csel	w0, w0, w1, eq  // eq = none
   43fc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43fc8:	mov	w0, #0x8df                 	// #2271
   43fcc:	mov	w1, #0x8e5                 	// #2277
   43fd0:	csel	w0, w0, w1, eq  // eq = none
   43fd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43fd8:	tst	x0, #0x800000
   43fdc:	mov	w1, #0x5f5                 	// #1525
   43fe0:	mov	w0, #0x5e1                 	// #1505
   43fe4:	csel	w0, w0, w1, eq  // eq = none
   43fe8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   43fec:	cbnz	w1, 44048 <aarch64_opcode_lookup@@Base+0x1388>
   43ff0:	tbnz	w0, #31, 44034 <aarch64_opcode_lookup@@Base+0x1374>
   43ff4:	tbnz	w0, #11, 44020 <aarch64_opcode_lookup@@Base+0x1360>
   43ff8:	tbnz	w0, #12, 44008 <aarch64_opcode_lookup@@Base+0x1348>
   43ffc:	ubfx	x0, x0, #10, #1
   44000:	add	w0, w0, #0x5d3
   44004:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44008:	tbnz	w0, #22, 485e8 <aarch64_opcode_lookup@@Base+0x5928>
   4400c:	tst	x0, #0x800000
   44010:	mov	w1, #0x708                 	// #1800
   44014:	mov	w0, #0x4fe                 	// #1278
   44018:	csel	w0, w0, w1, eq  // eq = none
   4401c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44020:	tst	x0, #0x400
   44024:	mov	w1, #0x5d2                 	// #1490
   44028:	mov	w0, #0x5d5                 	// #1493
   4402c:	csel	w0, w0, w1, eq  // eq = none
   44030:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44034:	tst	x0, #0x800000
   44038:	mov	w1, #0x5f1                 	// #1521
   4403c:	mov	w0, #0x6f8                 	// #1784
   44040:	csel	w0, w0, w1, eq  // eq = none
   44044:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44048:	tbz	w0, #23, 485f0 <aarch64_opcode_lookup@@Base+0x5930>
   4404c:	tbnz	w0, #31, 485f8 <aarch64_opcode_lookup@@Base+0x5938>
   44050:	tst	x0, #0x400000
   44054:	cset	w0, eq  // eq = none
   44058:	add	w0, w0, #0x809
   4405c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44060:	cbnz	w1, 44160 <aarch64_opcode_lookup@@Base+0x14a0>
   44064:	tbnz	w0, #31, 44118 <aarch64_opcode_lookup@@Base+0x1458>
   44068:	tbz	w0, #21, 48600 <aarch64_opcode_lookup@@Base+0x5940>
   4406c:	and	w1, w0, #0x400000
   44070:	and	w2, w0, #0x800
   44074:	tbnz	w0, #10, 440c8 <aarch64_opcode_lookup@@Base+0x1408>
   44078:	cbnz	w2, 440b0 <aarch64_opcode_lookup@@Base+0x13f0>
   4407c:	tbnz	w0, #20, 44098 <aarch64_opcode_lookup@@Base+0x13d8>
   44080:	cbz	w1, 48608 <aarch64_opcode_lookup@@Base+0x5948>
   44084:	tst	x0, #0x800000
   44088:	mov	w1, #0x739                 	// #1849
   4408c:	mov	w0, #0x73c                 	// #1852
   44090:	csel	w0, w0, w1, eq  // eq = none
   44094:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44098:	cbz	w1, 48610 <aarch64_opcode_lookup@@Base+0x5950>
   4409c:	tst	x0, #0x800000
   440a0:	mov	w1, #0x5ca                 	// #1482
   440a4:	mov	w0, #0x5cc                 	// #1484
   440a8:	csel	w0, w0, w1, eq  // eq = none
   440ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   440b0:	cbz	w1, 48618 <aarch64_opcode_lookup@@Base+0x5958>
   440b4:	tst	x0, #0x800000
   440b8:	mov	w1, #0x72b                 	// #1835
   440bc:	mov	w0, #0x72e                 	// #1838
   440c0:	csel	w0, w0, w1, eq  // eq = none
   440c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   440c8:	cbnz	w2, 44100 <aarch64_opcode_lookup@@Base+0x1440>
   440cc:	tbnz	w0, #20, 440e8 <aarch64_opcode_lookup@@Base+0x1428>
   440d0:	cbz	w1, 48620 <aarch64_opcode_lookup@@Base+0x5960>
   440d4:	tst	x0, #0x800000
   440d8:	mov	w1, #0x7cd                 	// #1997
   440dc:	mov	w0, #0x7d0                 	// #2000
   440e0:	csel	w0, w0, w1, eq  // eq = none
   440e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   440e8:	cbz	w1, 48628 <aarch64_opcode_lookup@@Base+0x5968>
   440ec:	tst	x0, #0x800000
   440f0:	mov	w1, #0x54d                 	// #1357
   440f4:	mov	w0, #0x54f                 	// #1359
   440f8:	csel	w0, w0, w1, eq  // eq = none
   440fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44100:	cbz	w1, 48630 <aarch64_opcode_lookup@@Base+0x5970>
   44104:	tst	x0, #0x800000
   44108:	mov	w1, #0x7bf                 	// #1983
   4410c:	mov	w0, #0x7c2                 	// #1986
   44110:	csel	w0, w0, w1, eq  // eq = none
   44114:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44118:	and	w1, w0, #0x800000
   4411c:	tbnz	w0, #22, 4414c <aarch64_opcode_lookup@@Base+0x148c>
   44120:	tbnz	w0, #21, 44138 <aarch64_opcode_lookup@@Base+0x1478>
   44124:	cmp	w1, #0x0
   44128:	mov	w0, #0x6e3                 	// #1763
   4412c:	mov	w1, #0x6f2                 	// #1778
   44130:	csel	w0, w0, w1, eq  // eq = none
   44134:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44138:	cmp	w1, #0x0
   4413c:	mov	w0, #0x5e3                 	// #1507
   44140:	mov	w1, #0x5f9                 	// #1529
   44144:	csel	w0, w0, w1, eq  // eq = none
   44148:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4414c:	cmp	w1, #0x0
   44150:	mov	w0, #0x600                 	// #1536
   44154:	mov	w1, #0x604                 	// #1540
   44158:	csel	w0, w0, w1, eq  // eq = none
   4415c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44160:	and	w2, w0, #0x400000
   44164:	and	w1, w0, #0x800000
   44168:	tbnz	w0, #21, 44194 <aarch64_opcode_lookup@@Base+0x14d4>
   4416c:	cmp	w1, #0x0
   44170:	cbnz	w2, 44184 <aarch64_opcode_lookup@@Base+0x14c4>
   44174:	mov	w0, #0x829                 	// #2089
   44178:	mov	w1, #0x82c                 	// #2092
   4417c:	csel	w0, w0, w1, eq  // eq = none
   44180:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44184:	mov	w0, #0x5e2                 	// #1506
   44188:	mov	w1, #0x5f7                 	// #1527
   4418c:	csel	w0, w0, w1, eq  // eq = none
   44190:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44194:	cbnz	w2, 441d0 <aarch64_opcode_lookup@@Base+0x1510>
   44198:	cbz	w1, 48638 <aarch64_opcode_lookup@@Base+0x5978>
   4419c:	tbnz	w0, #31, 48640 <aarch64_opcode_lookup@@Base+0x5980>
   441a0:	and	w1, w0, #0x1000
   441a4:	tbnz	w0, #10, 441bc <aarch64_opcode_lookup@@Base+0x14fc>
   441a8:	cmp	w1, #0x0
   441ac:	mov	w0, #0x86a                 	// #2154
   441b0:	mov	w1, #0x8e7                 	// #2279
   441b4:	csel	w0, w0, w1, eq  // eq = none
   441b8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   441bc:	cmp	w1, #0x0
   441c0:	mov	w0, #0x86d                 	// #2157
   441c4:	mov	w1, #0x8ea                 	// #2282
   441c8:	csel	w0, w0, w1, eq  // eq = none
   441cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   441d0:	cbz	w1, 48648 <aarch64_opcode_lookup@@Base+0x5988>
   441d4:	tbnz	w0, #31, 48650 <aarch64_opcode_lookup@@Base+0x5990>
   441d8:	and	w1, w0, #0x1000
   441dc:	tbnz	w0, #10, 441f4 <aarch64_opcode_lookup@@Base+0x1534>
   441e0:	cmp	w1, #0x0
   441e4:	mov	w0, #0x86b                 	// #2155
   441e8:	mov	w1, #0x8e8                 	// #2280
   441ec:	csel	w0, w0, w1, eq  // eq = none
   441f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   441f4:	cmp	w1, #0x0
   441f8:	mov	w0, #0x86e                 	// #2158
   441fc:	mov	w1, #0x8eb                 	// #2283
   44200:	csel	w0, w0, w1, eq  // eq = none
   44204:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44208:	and	w1, w0, #0x40000000
   4420c:	cbnz	w3, 445dc <aarch64_opcode_lookup@@Base+0x191c>
   44210:	cbnz	w2, 443b4 <aarch64_opcode_lookup@@Base+0x16f4>
   44214:	tbnz	w0, #21, 442c8 <aarch64_opcode_lookup@@Base+0x1608>
   44218:	cbnz	w1, 4429c <aarch64_opcode_lookup@@Base+0x15dc>
   4421c:	tbnz	w0, #31, 44288 <aarch64_opcode_lookup@@Base+0x15c8>
   44220:	tbnz	w0, #17, 44270 <aarch64_opcode_lookup@@Base+0x15b0>
   44224:	and	w1, w0, #0x100000
   44228:	tbnz	w0, #19, 44244 <aarch64_opcode_lookup@@Base+0x1584>
   4422c:	cbnz	w1, 48658 <aarch64_opcode_lookup@@Base+0x5998>
   44230:	tst	x0, #0x10000
   44234:	mov	w1, #0x7a7                 	// #1959
   44238:	mov	w0, #0x70f                 	// #1807
   4423c:	csel	w0, w0, w1, eq  // eq = none
   44240:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44244:	tbnz	w0, #16, 4425c <aarch64_opcode_lookup@@Base+0x159c>
   44248:	cmp	w1, #0x0
   4424c:	mov	w0, #0x721                 	// #1825
   44250:	mov	w1, #0x6df                 	// #1759
   44254:	csel	w0, w0, w1, eq  // eq = none
   44258:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4425c:	cmp	w1, #0x0
   44260:	mov	w0, #0x7b6                 	// #1974
   44264:	mov	w1, #0x55e                 	// #1374
   44268:	csel	w0, w0, w1, eq  // eq = none
   4426c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44270:	tbnz	w0, #16, 48660 <aarch64_opcode_lookup@@Base+0x59a0>
   44274:	tst	x0, #0x100000
   44278:	mov	w1, #0x507                 	// #1287
   4427c:	mov	w0, #0x724                 	// #1828
   44280:	csel	w0, w0, w1, eq  // eq = none
   44284:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44288:	tst	x0, #0x800000
   4428c:	mov	w1, #0x685                 	// #1669
   44290:	mov	w0, #0x67a                 	// #1658
   44294:	csel	w0, w0, w1, eq  // eq = none
   44298:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4429c:	tbnz	w0, #31, 442b4 <aarch64_opcode_lookup@@Base+0x15f4>
   442a0:	tst	x0, #0x1000
   442a4:	mov	w1, #0x88f                 	// #2191
   442a8:	mov	w0, #0x80b                 	// #2059
   442ac:	csel	w0, w0, w1, eq  // eq = none
   442b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   442b4:	tst	x0, #0x800000
   442b8:	mov	w1, #0x68b                 	// #1675
   442bc:	mov	w0, #0x681                 	// #1665
   442c0:	csel	w0, w0, w1, eq  // eq = none
   442c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   442c8:	cbnz	w1, 44368 <aarch64_opcode_lookup@@Base+0x16a8>
   442cc:	tbnz	w0, #31, 44354 <aarch64_opcode_lookup@@Base+0x1694>
   442d0:	and	w1, w0, #0x800
   442d4:	tbnz	w0, #10, 44320 <aarch64_opcode_lookup@@Base+0x1660>
   442d8:	and	w2, w0, #0x400000
   442dc:	cbnz	w1, 4430c <aarch64_opcode_lookup@@Base+0x164c>
   442e0:	and	w0, w0, #0x800000
   442e4:	cmp	w0, #0x0
   442e8:	cbnz	w2, 442fc <aarch64_opcode_lookup@@Base+0x163c>
   442ec:	mov	w0, #0x502                 	// #1282
   442f0:	mov	w1, #0x559                 	// #1369
   442f4:	csel	w0, w0, w1, eq  // eq = none
   442f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   442fc:	mov	w0, #0x6da                 	// #1754
   44300:	mov	w1, #0x50f                 	// #1295
   44304:	csel	w0, w0, w1, eq  // eq = none
   44308:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4430c:	cmp	w2, #0x0
   44310:	mov	w0, #0x80e                 	// #2062
   44314:	mov	w1, #0x803                 	// #2051
   44318:	csel	w0, w0, w1, eq  // eq = none
   4431c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44320:	cbz	w1, 48668 <aarch64_opcode_lookup@@Base+0x59a8>
   44324:	and	w1, w0, #0x800000
   44328:	tbnz	w0, #22, 44340 <aarch64_opcode_lookup@@Base+0x1680>
   4432c:	cmp	w1, #0x0
   44330:	mov	w0, #0x804                 	// #2052
   44334:	mov	w1, #0x806                 	// #2054
   44338:	csel	w0, w0, w1, eq  // eq = none
   4433c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44340:	cmp	w1, #0x0
   44344:	mov	w0, #0x805                 	// #2053
   44348:	mov	w1, #0x83d                 	// #2109
   4434c:	csel	w0, w0, w1, eq  // eq = none
   44350:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44354:	tst	x0, #0x800000
   44358:	mov	w1, #0x686                 	// #1670
   4435c:	mov	w0, #0x6f1                 	// #1777
   44360:	csel	w0, w0, w1, eq  // eq = none
   44364:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44368:	tbz	w0, #23, 48670 <aarch64_opcode_lookup@@Base+0x59b0>
   4436c:	tbnz	w0, #31, 48678 <aarch64_opcode_lookup@@Base+0x59b8>
   44370:	and	w1, w0, #0x400000
   44374:	and	w2, w0, #0x1000
   44378:	tbnz	w0, #10, 44398 <aarch64_opcode_lookup@@Base+0x16d8>
   4437c:	cmp	w1, #0x0
   44380:	cset	w0, ne  // ne = any
   44384:	cbnz	w2, 44390 <aarch64_opcode_lookup@@Base+0x16d0>
   44388:	add	w0, w0, #0x874
   4438c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44390:	add	w0, w0, #0x87b
   44394:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44398:	cmp	w1, #0x0
   4439c:	cset	w0, ne  // ne = any
   443a0:	cbnz	w2, 443ac <aarch64_opcode_lookup@@Base+0x16ec>
   443a4:	add	w0, w0, #0x878
   443a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   443ac:	add	w0, w0, #0x87f
   443b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   443b4:	cbnz	w1, 444dc <aarch64_opcode_lookup@@Base+0x181c>
   443b8:	tbnz	w0, #31, 44494 <aarch64_opcode_lookup@@Base+0x17d4>
   443bc:	tbnz	w0, #21, 44468 <aarch64_opcode_lookup@@Base+0x17a8>
   443c0:	and	w2, w0, #0x20000
   443c4:	and	w1, w0, #0x40000
   443c8:	tbnz	w0, #16, 44420 <aarch64_opcode_lookup@@Base+0x1760>
   443cc:	and	w0, w0, #0x80000
   443d0:	cmp	w0, #0x0
   443d4:	cbnz	w2, 443fc <aarch64_opcode_lookup@@Base+0x173c>
   443d8:	cbnz	w1, 443ec <aarch64_opcode_lookup@@Base+0x172c>
   443dc:	mov	w0, #0x79e                 	// #1950
   443e0:	mov	w1, #0x523                 	// #1315
   443e4:	csel	w0, w0, w1, eq  // eq = none
   443e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   443ec:	mov	w0, #0x7a0                 	// #1952
   443f0:	mov	w1, #0x561                 	// #1377
   443f4:	csel	w0, w0, w1, eq  // eq = none
   443f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   443fc:	cbnz	w1, 44410 <aarch64_opcode_lookup@@Base+0x1750>
   44400:	mov	w0, #0x79f                 	// #1951
   44404:	mov	w1, #0x540                 	// #1344
   44408:	csel	w0, w0, w1, eq  // eq = none
   4440c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44410:	mov	w0, #0x4f9                 	// #1273
   44414:	mov	w1, #0x6d7                 	// #1751
   44418:	csel	w0, w0, w1, eq  // eq = none
   4441c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44420:	cbnz	w2, 44450 <aarch64_opcode_lookup@@Base+0x1790>
   44424:	and	w0, w0, #0x80000
   44428:	cmp	w0, #0x0
   4442c:	cbnz	w1, 44440 <aarch64_opcode_lookup@@Base+0x1780>
   44430:	mov	w0, #0x7dd                 	// #2013
   44434:	mov	w1, #0x524                 	// #1316
   44438:	csel	w0, w0, w1, eq  // eq = none
   4443c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44440:	mov	w0, #0x7df                 	// #2015
   44444:	mov	w1, #0x5ae                 	// #1454
   44448:	csel	w0, w0, w1, eq  // eq = none
   4444c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44450:	cbnz	w1, 48680 <aarch64_opcode_lookup@@Base+0x59c0>
   44454:	tst	x0, #0x80000
   44458:	mov	w1, #0x53f                 	// #1343
   4445c:	mov	w0, #0x7de                 	// #2014
   44460:	csel	w0, w0, w1, eq  // eq = none
   44464:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44468:	tbnz	w0, #12, 4447c <aarch64_opcode_lookup@@Base+0x17bc>
   4446c:	tbnz	w0, #23, 48688 <aarch64_opcode_lookup@@Base+0x59c8>
   44470:	ubfx	x0, x0, #22, #1
   44474:	add	w0, w0, #0x4ff
   44478:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4447c:	tbnz	w0, #10, 48690 <aarch64_opcode_lookup@@Base+0x59d0>
   44480:	tst	x0, #0x800
   44484:	mov	w1, #0x590                 	// #1424
   44488:	mov	w0, #0x5c8                 	// #1480
   4448c:	csel	w0, w0, w1, eq  // eq = none
   44490:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44494:	and	w1, w0, #0x800000
   44498:	tbnz	w0, #22, 444c8 <aarch64_opcode_lookup@@Base+0x1808>
   4449c:	tbnz	w0, #21, 444b4 <aarch64_opcode_lookup@@Base+0x17f4>
   444a0:	cmp	w1, #0x0
   444a4:	mov	w0, #0x828                 	// #2088
   444a8:	mov	w1, #0x82b                 	// #2091
   444ac:	csel	w0, w0, w1, eq  // eq = none
   444b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   444b4:	cmp	w1, #0x0
   444b8:	mov	w0, #0x683                 	// #1667
   444bc:	mov	w1, #0x68f                 	// #1679
   444c0:	csel	w0, w0, w1, eq  // eq = none
   444c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   444c8:	cmp	w1, #0x0
   444cc:	mov	w0, #0x5ff                 	// #1535
   444d0:	mov	w1, #0x603                 	// #1539
   444d4:	csel	w0, w0, w1, eq  // eq = none
   444d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   444dc:	tbnz	w0, #21, 44564 <aarch64_opcode_lookup@@Base+0x18a4>
   444e0:	tbnz	w0, #31, 44550 <aarch64_opcode_lookup@@Base+0x1890>
   444e4:	and	w1, w0, #0x20000
   444e8:	tbnz	w0, #16, 4451c <aarch64_opcode_lookup@@Base+0x185c>
   444ec:	cbnz	w1, 48698 <aarch64_opcode_lookup@@Base+0x59d8>
   444f0:	tbnz	w0, #18, 44508 <aarch64_opcode_lookup@@Base+0x1848>
   444f4:	tst	x0, #0x80000
   444f8:	mov	w1, #0x871                 	// #2161
   444fc:	mov	w0, #0x8fb                 	// #2299
   44500:	csel	w0, w0, w1, eq  // eq = none
   44504:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44508:	tst	x0, #0x100000
   4450c:	mov	w1, #0x85b                 	// #2139
   44510:	mov	w0, #0x84d                 	// #2125
   44514:	csel	w0, w0, w1, eq  // eq = none
   44518:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4451c:	cbnz	w1, 486a0 <aarch64_opcode_lookup@@Base+0x59e0>
   44520:	tbnz	w0, #18, 4453c <aarch64_opcode_lookup@@Base+0x187c>
   44524:	tbnz	w0, #19, 486a8 <aarch64_opcode_lookup@@Base+0x59e8>
   44528:	tst	x0, #0x100000
   4452c:	mov	w1, #0x802                 	// #2050
   44530:	mov	w0, #0x900                 	// #2304
   44534:	csel	w0, w0, w1, eq  // eq = none
   44538:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4453c:	tst	x0, #0x100000
   44540:	mov	w1, #0x8d8                 	// #2264
   44544:	mov	w0, #0x8d0                 	// #2256
   44548:	csel	w0, w0, w1, eq  // eq = none
   4454c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44550:	tst	x0, #0x800000
   44554:	mov	w1, #0x68d                 	// #1677
   44558:	mov	w0, #0x682                 	// #1666
   4455c:	csel	w0, w0, w1, eq  // eq = none
   44560:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44564:	and	w1, w0, #0x800000
   44568:	tbnz	w0, #22, 445a4 <aarch64_opcode_lookup@@Base+0x18e4>
   4456c:	cbz	w1, 486b0 <aarch64_opcode_lookup@@Base+0x59f0>
   44570:	tbnz	w0, #31, 486b8 <aarch64_opcode_lookup@@Base+0x59f8>
   44574:	and	w1, w0, #0x1000
   44578:	tbnz	w0, #10, 44590 <aarch64_opcode_lookup@@Base+0x18d0>
   4457c:	cmp	w1, #0x0
   44580:	mov	w0, #0x863                 	// #2147
   44584:	mov	w1, #0x8e0                 	// #2272
   44588:	csel	w0, w0, w1, eq  // eq = none
   4458c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44590:	cmp	w1, #0x0
   44594:	mov	w0, #0x866                 	// #2150
   44598:	mov	w1, #0x8e3                 	// #2275
   4459c:	csel	w0, w0, w1, eq  // eq = none
   445a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   445a4:	cbz	w1, 486c0 <aarch64_opcode_lookup@@Base+0x5a00>
   445a8:	tbnz	w0, #31, 486c8 <aarch64_opcode_lookup@@Base+0x5a08>
   445ac:	and	w1, w0, #0x1000
   445b0:	tbnz	w0, #10, 445c8 <aarch64_opcode_lookup@@Base+0x1908>
   445b4:	cmp	w1, #0x0
   445b8:	mov	w0, #0x864                 	// #2148
   445bc:	mov	w1, #0x8e1                 	// #2273
   445c0:	csel	w0, w0, w1, eq  // eq = none
   445c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   445c8:	cmp	w1, #0x0
   445cc:	mov	w0, #0x867                 	// #2151
   445d0:	mov	w1, #0x8e4                 	// #2276
   445d4:	csel	w0, w0, w1, eq  // eq = none
   445d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   445dc:	cbnz	w2, 446e8 <aarch64_opcode_lookup@@Base+0x1a28>
   445e0:	tbnz	w0, #21, 44664 <aarch64_opcode_lookup@@Base+0x19a4>
   445e4:	cbnz	w1, 44600 <aarch64_opcode_lookup@@Base+0x1940>
   445e8:	tbz	w0, #31, 486d0 <aarch64_opcode_lookup@@Base+0x5a10>
   445ec:	tst	x0, #0x800000
   445f0:	mov	w1, #0x66c                 	// #1644
   445f4:	mov	w0, #0x658                 	// #1624
   445f8:	csel	w0, w0, w1, eq  // eq = none
   445fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44600:	tbnz	w0, #31, 44650 <aarch64_opcode_lookup@@Base+0x1990>
   44604:	and	w1, w0, #0x800
   44608:	tbnz	w0, #10, 44638 <aarch64_opcode_lookup@@Base+0x1978>
   4460c:	and	w0, w0, #0x1000
   44610:	cmp	w0, #0x0
   44614:	cbnz	w1, 44628 <aarch64_opcode_lookup@@Base+0x1968>
   44618:	mov	w0, #0x876                 	// #2166
   4461c:	mov	w1, #0x893                 	// #2195
   44620:	csel	w0, w0, w1, eq  // eq = none
   44624:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44628:	mov	w0, #0x87d                 	// #2173
   4462c:	mov	w1, #0x95a                 	// #2394
   44630:	csel	w0, w0, w1, eq  // eq = none
   44634:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44638:	cbnz	w1, 486d8 <aarch64_opcode_lookup@@Base+0x5a18>
   4463c:	tst	x0, #0x1000
   44640:	mov	w1, #0x897                 	// #2199
   44644:	mov	w0, #0x87a                 	// #2170
   44648:	csel	w0, w0, w1, eq  // eq = none
   4464c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44650:	tst	x0, #0x800000
   44654:	mov	w1, #0x674                 	// #1652
   44658:	mov	w0, #0x661                 	// #1633
   4465c:	csel	w0, w0, w1, eq  // eq = none
   44660:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44664:	cbnz	w1, 446b8 <aarch64_opcode_lookup@@Base+0x19f8>
   44668:	tbnz	w0, #31, 446a4 <aarch64_opcode_lookup@@Base+0x19e4>
   4466c:	and	w1, w0, #0x800
   44670:	tbnz	w0, #10, 4468c <aarch64_opcode_lookup@@Base+0x19cc>
   44674:	cbnz	w1, 486e0 <aarch64_opcode_lookup@@Base+0x5a20>
   44678:	tst	x0, #0x1000
   4467c:	mov	w1, #0x885                 	// #2181
   44680:	mov	w0, #0x83c                 	// #2108
   44684:	csel	w0, w0, w1, eq  // eq = none
   44688:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4468c:	cbnz	w1, 486e8 <aarch64_opcode_lookup@@Base+0x5a28>
   44690:	tst	x0, #0x1000
   44694:	mov	w1, #0x89b                 	// #2203
   44698:	mov	w0, #0x83f                 	// #2111
   4469c:	csel	w0, w0, w1, eq  // eq = none
   446a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   446a4:	tst	x0, #0x800000
   446a8:	mov	w1, #0x66d                 	// #1645
   446ac:	mov	w0, #0x6ea                 	// #1770
   446b0:	csel	w0, w0, w1, eq  // eq = none
   446b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   446b8:	tbz	w0, #23, 486f0 <aarch64_opcode_lookup@@Base+0x5a30>
   446bc:	tbnz	w0, #31, 486f8 <aarch64_opcode_lookup@@Base+0x5a38>
   446c0:	and	w1, w0, #0x400000
   446c4:	tbnz	w0, #12, 446d8 <aarch64_opcode_lookup@@Base+0x1a18>
   446c8:	cmp	w1, #0x0
   446cc:	cset	w0, ne  // ne = any
   446d0:	add	w0, w0, #0x80c
   446d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   446d8:	cmp	w1, #0x0
   446dc:	cset	w0, ne  // ne = any
   446e0:	add	w0, w0, #0x88d
   446e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   446e8:	cbnz	w1, 4491c <aarch64_opcode_lookup@@Base+0x1c5c>
   446ec:	tbnz	w0, #31, 448d4 <aarch64_opcode_lookup@@Base+0x1c14>
   446f0:	tbz	w0, #21, 48700 <aarch64_opcode_lookup@@Base+0x5a40>
   446f4:	and	w2, w0, #0x400000
   446f8:	and	w1, w0, #0x800000
   446fc:	and	w4, w0, #0x800
   44700:	tbnz	w0, #10, 447fc <aarch64_opcode_lookup@@Base+0x1b3c>
   44704:	and	w3, w0, #0x100000
   44708:	cbnz	w4, 447ac <aarch64_opcode_lookup@@Base+0x1aec>
   4470c:	tbnz	w0, #12, 4475c <aarch64_opcode_lookup@@Base+0x1a9c>
   44710:	cmp	w1, #0x0
   44714:	cbnz	w3, 44738 <aarch64_opcode_lookup@@Base+0x1a78>
   44718:	cbnz	w2, 4472c <aarch64_opcode_lookup@@Base+0x1a6c>
   4471c:	mov	w0, #0x541                 	// #1345
   44720:	mov	w1, #0x545                 	// #1349
   44724:	csel	w0, w0, w1, eq  // eq = none
   44728:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4472c:	cset	w0, eq  // eq = none
   44730:	add	w0, w0, #0x542
   44734:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44738:	cbnz	w2, 4474c <aarch64_opcode_lookup@@Base+0x1a8c>
   4473c:	mov	w0, #0x5c9                 	// #1481
   44740:	mov	w1, #0x5d1                 	// #1489
   44744:	csel	w0, w0, w1, eq  // eq = none
   44748:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4474c:	mov	w0, #0x5cd                 	// #1485
   44750:	mov	w1, #0x5cb                 	// #1483
   44754:	csel	w0, w0, w1, eq  // eq = none
   44758:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4475c:	cmp	w1, #0x0
   44760:	cbnz	w3, 44788 <aarch64_opcode_lookup@@Base+0x1ac8>
   44764:	cbnz	w2, 44778 <aarch64_opcode_lookup@@Base+0x1ab8>
   44768:	mov	w0, #0x738                 	// #1848
   4476c:	mov	w1, #0x744                 	// #1860
   44770:	csel	w0, w0, w1, eq  // eq = none
   44774:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44778:	mov	w0, #0x73e                 	// #1854
   4477c:	mov	w1, #0x73b                 	// #1851
   44780:	csel	w0, w0, w1, eq  // eq = none
   44784:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44788:	cbnz	w2, 4479c <aarch64_opcode_lookup@@Base+0x1adc>
   4478c:	mov	w0, #0x737                 	// #1847
   44790:	mov	w1, #0x743                 	// #1859
   44794:	csel	w0, w0, w1, eq  // eq = none
   44798:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4479c:	mov	w0, #0x73d                 	// #1853
   447a0:	mov	w1, #0x73a                 	// #1850
   447a4:	csel	w0, w0, w1, eq  // eq = none
   447a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   447ac:	cmp	w1, #0x0
   447b0:	cbnz	w3, 447d8 <aarch64_opcode_lookup@@Base+0x1b18>
   447b4:	cbnz	w2, 447c8 <aarch64_opcode_lookup@@Base+0x1b08>
   447b8:	mov	w0, #0x72a                 	// #1834
   447bc:	mov	w1, #0x736                 	// #1846
   447c0:	csel	w0, w0, w1, eq  // eq = none
   447c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   447c8:	mov	w0, #0x730                 	// #1840
   447cc:	mov	w1, #0x72d                 	// #1837
   447d0:	csel	w0, w0, w1, eq  // eq = none
   447d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   447d8:	cbnz	w2, 447ec <aarch64_opcode_lookup@@Base+0x1b2c>
   447dc:	mov	w0, #0x729                 	// #1833
   447e0:	mov	w1, #0x735                 	// #1845
   447e4:	csel	w0, w0, w1, eq  // eq = none
   447e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   447ec:	mov	w0, #0x72f                 	// #1839
   447f0:	mov	w1, #0x72c                 	// #1836
   447f4:	csel	w0, w0, w1, eq  // eq = none
   447f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   447fc:	cbnz	w4, 44880 <aarch64_opcode_lookup@@Base+0x1bc0>
   44800:	tbnz	w0, #12, 4482c <aarch64_opcode_lookup@@Base+0x1b6c>
   44804:	cmp	w1, #0x0
   44808:	cbnz	w2, 4481c <aarch64_opcode_lookup@@Base+0x1b5c>
   4480c:	mov	w0, #0x54c                 	// #1356
   44810:	mov	w1, #0x554                 	// #1364
   44814:	csel	w0, w0, w1, eq  // eq = none
   44818:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4481c:	mov	w0, #0x550                 	// #1360
   44820:	mov	w1, #0x54e                 	// #1358
   44824:	csel	w0, w0, w1, eq  // eq = none
   44828:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4482c:	tbnz	w0, #20, 44858 <aarch64_opcode_lookup@@Base+0x1b98>
   44830:	cmp	w1, #0x0
   44834:	cbnz	w2, 44848 <aarch64_opcode_lookup@@Base+0x1b88>
   44838:	mov	w0, #0x7cb                 	// #1995
   4483c:	mov	w1, #0x7d7                 	// #2007
   44840:	csel	w0, w0, w1, eq  // eq = none
   44844:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44848:	mov	w0, #0x7d1                 	// #2001
   4484c:	mov	w1, #0x7ce                 	// #1998
   44850:	csel	w0, w0, w1, eq  // eq = none
   44854:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44858:	cmp	w1, #0x0
   4485c:	cbnz	w2, 44870 <aarch64_opcode_lookup@@Base+0x1bb0>
   44860:	mov	w0, #0x7cc                 	// #1996
   44864:	mov	w1, #0x7d8                 	// #2008
   44868:	csel	w0, w0, w1, eq  // eq = none
   4486c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44870:	mov	w0, #0x7d2                 	// #2002
   44874:	mov	w1, #0x7cf                 	// #1999
   44878:	csel	w0, w0, w1, eq  // eq = none
   4487c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44880:	tbnz	w0, #20, 448ac <aarch64_opcode_lookup@@Base+0x1bec>
   44884:	cmp	w1, #0x0
   44888:	cbnz	w2, 4489c <aarch64_opcode_lookup@@Base+0x1bdc>
   4488c:	mov	w0, #0x7bd                 	// #1981
   44890:	mov	w1, #0x7c9                 	// #1993
   44894:	csel	w0, w0, w1, eq  // eq = none
   44898:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4489c:	mov	w0, #0x7c3                 	// #1987
   448a0:	mov	w1, #0x7c0                 	// #1984
   448a4:	csel	w0, w0, w1, eq  // eq = none
   448a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   448ac:	cmp	w1, #0x0
   448b0:	cbnz	w2, 448c4 <aarch64_opcode_lookup@@Base+0x1c04>
   448b4:	mov	w0, #0x7be                 	// #1982
   448b8:	mov	w1, #0x7ca                 	// #1994
   448bc:	csel	w0, w0, w1, eq  // eq = none
   448c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   448c4:	mov	w0, #0x7c4                 	// #1988
   448c8:	mov	w1, #0x7c1                 	// #1985
   448cc:	csel	w0, w0, w1, eq  // eq = none
   448d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   448d4:	and	w1, w0, #0x800000
   448d8:	tbnz	w0, #22, 44908 <aarch64_opcode_lookup@@Base+0x1c48>
   448dc:	tbnz	w0, #21, 448f4 <aarch64_opcode_lookup@@Base+0x1c34>
   448e0:	cmp	w1, #0x0
   448e4:	mov	w0, #0x6e7                 	// #1767
   448e8:	mov	w1, #0x6f5                 	// #1781
   448ec:	csel	w0, w0, w1, eq  // eq = none
   448f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   448f4:	cmp	w1, #0x0
   448f8:	mov	w0, #0x663                 	// #1635
   448fc:	mov	w1, #0x678                 	// #1656
   44900:	csel	w0, w0, w1, eq  // eq = none
   44904:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44908:	cmp	w1, #0x0
   4490c:	mov	w0, #0x601                 	// #1537
   44910:	mov	w1, #0x605                 	// #1541
   44914:	csel	w0, w0, w1, eq  // eq = none
   44918:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4491c:	and	w1, w0, #0x800000
   44920:	tbnz	w0, #21, 44950 <aarch64_opcode_lookup@@Base+0x1c90>
   44924:	tbnz	w0, #22, 4493c <aarch64_opcode_lookup@@Base+0x1c7c>
   44928:	cmp	w1, #0x0
   4492c:	mov	w0, #0x6e9                 	// #1769
   44930:	mov	w1, #0x6f7                 	// #1783
   44934:	csel	w0, w0, w1, eq  // eq = none
   44938:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4493c:	cmp	w1, #0x0
   44940:	mov	w0, #0x662                 	// #1634
   44944:	mov	w1, #0x676                 	// #1654
   44948:	csel	w0, w0, w1, eq  // eq = none
   4494c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44950:	cbnz	w1, 44984 <aarch64_opcode_lookup@@Base+0x1cc4>
   44954:	tbnz	w0, #31, 44970 <aarch64_opcode_lookup@@Base+0x1cb0>
   44958:	tbnz	w0, #10, 48708 <aarch64_opcode_lookup@@Base+0x5a48>
   4495c:	tst	x0, #0x800
   44960:	mov	w1, #0x839                 	// #2105
   44964:	mov	w0, #0x882                 	// #2178
   44968:	csel	w0, w0, w1, eq  // eq = none
   4496c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44970:	tst	x0, #0x400000
   44974:	mov	w1, #0x6ed                 	// #1773
   44978:	mov	w0, #0x664                 	// #1636
   4497c:	csel	w0, w0, w1, eq  // eq = none
   44980:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44984:	tbnz	w0, #22, 449c0 <aarch64_opcode_lookup@@Base+0x1d00>
   44988:	tbnz	w0, #31, 48710 <aarch64_opcode_lookup@@Base+0x5a50>
   4498c:	and	w1, w0, #0x1000
   44990:	tbnz	w0, #10, 449ac <aarch64_opcode_lookup@@Base+0x1cec>
   44994:	cbz	w1, 48718 <aarch64_opcode_lookup@@Base+0x5a58>
   44998:	tst	x0, #0x800
   4499c:	mov	w1, #0x83a                 	// #2106
   449a0:	mov	w0, #0x883                 	// #2179
   449a4:	csel	w0, w0, w1, eq  // eq = none
   449a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   449ac:	cmp	w1, #0x0
   449b0:	mov	w0, #0x889                 	// #2185
   449b4:	mov	w1, #0x899                 	// #2201
   449b8:	csel	w0, w0, w1, eq  // eq = none
   449bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   449c0:	tbnz	w0, #31, 48720 <aarch64_opcode_lookup@@Base+0x5a60>
   449c4:	and	w1, w0, #0x1000
   449c8:	tbnz	w0, #10, 449e4 <aarch64_opcode_lookup@@Base+0x1d24>
   449cc:	cbz	w1, 48728 <aarch64_opcode_lookup@@Base+0x5a68>
   449d0:	tst	x0, #0x800
   449d4:	mov	w1, #0x83b                 	// #2107
   449d8:	mov	w0, #0x884                 	// #2180
   449dc:	csel	w0, w0, w1, eq  // eq = none
   449e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   449e4:	cmp	w1, #0x0
   449e8:	mov	w0, #0x88a                 	// #2186
   449ec:	mov	w1, #0x89a                 	// #2202
   449f0:	csel	w0, w0, w1, eq  // eq = none
   449f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   449f8:	and	w1, w0, #0x40000000
   449fc:	tbnz	w0, #21, 44dc8 <aarch64_opcode_lookup@@Base+0x2108>
   44a00:	tbnz	w0, #15, 44b7c <aarch64_opcode_lookup@@Base+0x1ebc>
   44a04:	cbnz	w1, 44b00 <aarch64_opcode_lookup@@Base+0x1e40>
   44a08:	and	w1, w0, #0x4000
   44a0c:	tbnz	w0, #13, 44a88 <aarch64_opcode_lookup@@Base+0x1dc8>
   44a10:	cbnz	w1, 44a40 <aarch64_opcode_lookup@@Base+0x1d80>
   44a14:	tbnz	w0, #31, 44a2c <aarch64_opcode_lookup@@Base+0x1d6c>
   44a18:	tst	x0, #0x10
   44a1c:	mov	w1, #0x52e                 	// #1326
   44a20:	mov	w0, #0x531                 	// #1329
   44a24:	csel	w0, w0, w1, eq  // eq = none
   44a28:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44a2c:	tst	x0, #0x800000
   44a30:	mov	w1, #0x60b                 	// #1547
   44a34:	mov	w0, #0x607                 	// #1543
   44a38:	csel	w0, w0, w1, eq  // eq = none
   44a3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44a40:	tbnz	w0, #31, 44a58 <aarch64_opcode_lookup@@Base+0x1d98>
   44a44:	tst	x0, #0x10
   44a48:	mov	w1, #0x52b                 	// #1323
   44a4c:	mov	w0, #0x528                 	// #1320
   44a50:	csel	w0, w0, w1, eq  // eq = none
   44a54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44a58:	and	w1, w0, #0x800000
   44a5c:	tbnz	w0, #22, 44a74 <aarch64_opcode_lookup@@Base+0x1db4>
   44a60:	cmp	w1, #0x0
   44a64:	mov	w0, #0x5dd                 	// #1501
   44a68:	mov	w1, #0x62d                 	// #1581
   44a6c:	csel	w0, w0, w1, eq  // eq = none
   44a70:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44a74:	cmp	w1, #0x0
   44a78:	mov	w0, #0x5df                 	// #1503
   44a7c:	mov	w1, #0x5f3                 	// #1523
   44a80:	csel	w0, w0, w1, eq  // eq = none
   44a84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44a88:	cbnz	w1, 44ab8 <aarch64_opcode_lookup@@Base+0x1df8>
   44a8c:	tbnz	w0, #31, 44aa4 <aarch64_opcode_lookup@@Base+0x1de4>
   44a90:	tst	x0, #0x10
   44a94:	mov	w1, #0x53c                 	// #1340
   44a98:	mov	w0, #0x525                 	// #1317
   44a9c:	csel	w0, w0, w1, eq  // eq = none
   44aa0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44aa4:	tst	x0, #0x800000
   44aa8:	mov	w1, #0x60a                 	// #1546
   44aac:	mov	w0, #0x606                 	// #1542
   44ab0:	csel	w0, w0, w1, eq  // eq = none
   44ab4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ab8:	tbnz	w0, #31, 44ad0 <aarch64_opcode_lookup@@Base+0x1e10>
   44abc:	tst	x0, #0x10
   44ac0:	mov	w1, #0x534                 	// #1332
   44ac4:	mov	w0, #0x53a                 	// #1338
   44ac8:	csel	w0, w0, w1, eq  // eq = none
   44acc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ad0:	and	w1, w0, #0x800000
   44ad4:	tbnz	w0, #22, 44aec <aarch64_opcode_lookup@@Base+0x1e2c>
   44ad8:	cmp	w1, #0x0
   44adc:	mov	w0, #0x659                 	// #1625
   44ae0:	mov	w1, #0x691                 	// #1681
   44ae4:	csel	w0, w0, w1, eq  // eq = none
   44ae8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44aec:	cmp	w1, #0x0
   44af0:	mov	w0, #0x65d                 	// #1629
   44af4:	mov	w1, #0x670                 	// #1648
   44af8:	csel	w0, w0, w1, eq  // eq = none
   44afc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b00:	tbz	w0, #31, 48730 <aarch64_opcode_lookup@@Base+0x5a70>
   44b04:	and	w2, w0, #0x400000
   44b08:	tbnz	w0, #13, 44b24 <aarch64_opcode_lookup@@Base+0x1e64>
   44b0c:	cbz	w2, 48738 <aarch64_opcode_lookup@@Base+0x5a78>
   44b10:	tst	x0, #0x800000
   44b14:	mov	w1, #0x760                 	// #1888
   44b18:	mov	w0, #0x74b                 	// #1867
   44b1c:	csel	w0, w0, w1, eq  // eq = none
   44b20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b24:	and	w1, w0, #0x800000
   44b28:	tbnz	w0, #14, 44b54 <aarch64_opcode_lookup@@Base+0x1e94>
   44b2c:	cmp	w1, #0x0
   44b30:	cbnz	w2, 44b44 <aarch64_opcode_lookup@@Base+0x1e84>
   44b34:	mov	w0, #0x8c0                 	// #2240
   44b38:	mov	w1, #0x8c3                 	// #2243
   44b3c:	csel	w0, w0, w1, eq  // eq = none
   44b40:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b44:	mov	w0, #0x8bf                 	// #2239
   44b48:	mov	w1, #0x8c2                 	// #2242
   44b4c:	csel	w0, w0, w1, eq  // eq = none
   44b50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b54:	cmp	w1, #0x0
   44b58:	cbnz	w2, 44b6c <aarch64_opcode_lookup@@Base+0x1eac>
   44b5c:	mov	w0, #0x78d                 	// #1933
   44b60:	mov	w1, #0x791                 	// #1937
   44b64:	csel	w0, w0, w1, eq  // eq = none
   44b68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b6c:	mov	w0, #0x77d                 	// #1917
   44b70:	mov	w1, #0x781                 	// #1921
   44b74:	csel	w0, w0, w1, eq  // eq = none
   44b78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b7c:	tbnz	w0, #13, 44c5c <aarch64_opcode_lookup@@Base+0x1f9c>
   44b80:	cbnz	w1, 44be4 <aarch64_opcode_lookup@@Base+0x1f24>
   44b84:	tbnz	w0, #14, 44b9c <aarch64_opcode_lookup@@Base+0x1edc>
   44b88:	tst	x0, #0x10
   44b8c:	mov	w1, #0x52c                 	// #1324
   44b90:	mov	w0, #0x529                 	// #1321
   44b94:	csel	w0, w0, w1, eq  // eq = none
   44b98:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44b9c:	tbnz	w0, #31, 44bb4 <aarch64_opcode_lookup@@Base+0x1ef4>
   44ba0:	tst	x0, #0x10
   44ba4:	mov	w1, #0x52f                 	// #1327
   44ba8:	mov	w0, #0x532                 	// #1330
   44bac:	csel	w0, w0, w1, eq  // eq = none
   44bb0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44bb4:	and	w1, w0, #0x800000
   44bb8:	tbnz	w0, #22, 44bd0 <aarch64_opcode_lookup@@Base+0x1f10>
   44bbc:	cmp	w1, #0x0
   44bc0:	mov	w0, #0x6b4                 	// #1716
   44bc4:	mov	w1, #0x6b8                 	// #1720
   44bc8:	csel	w0, w0, w1, eq  // eq = none
   44bcc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44bd0:	cmp	w1, #0x0
   44bd4:	mov	w0, #0x648                 	// #1608
   44bd8:	mov	w1, #0x64c                 	// #1612
   44bdc:	csel	w0, w0, w1, eq  // eq = none
   44be0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44be4:	tbnz	w0, #31, 44c2c <aarch64_opcode_lookup@@Base+0x1f6c>
   44be8:	tbnz	w0, #17, 44c18 <aarch64_opcode_lookup@@Base+0x1f58>
   44bec:	tbnz	w0, #18, 44c04 <aarch64_opcode_lookup@@Base+0x1f44>
   44bf0:	tst	x0, #0x100000
   44bf4:	mov	w1, #0x812                 	// #2066
   44bf8:	mov	w0, #0x569                 	// #1385
   44bfc:	csel	w0, w0, w1, eq  // eq = none
   44c00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c04:	tst	x0, #0x10000
   44c08:	mov	w1, #0x81c                 	// #2076
   44c0c:	mov	w0, #0x81a                 	// #2074
   44c10:	csel	w0, w0, w1, eq  // eq = none
   44c14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c18:	tst	x0, #0x10000
   44c1c:	mov	w1, #0x81d                 	// #2077
   44c20:	mov	w0, #0x81b                 	// #2075
   44c24:	csel	w0, w0, w1, eq  // eq = none
   44c28:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c2c:	and	w1, w0, #0x800000
   44c30:	tbnz	w0, #22, 44c48 <aarch64_opcode_lookup@@Base+0x1f88>
   44c34:	cmp	w1, #0x0
   44c38:	mov	w0, #0x748                 	// #1864
   44c3c:	mov	w1, #0x75b                 	// #1883
   44c40:	csel	w0, w0, w1, eq  // eq = none
   44c44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c48:	cmp	w1, #0x0
   44c4c:	mov	w0, #0x74c                 	// #1868
   44c50:	mov	w1, #0x761                 	// #1889
   44c54:	csel	w0, w0, w1, eq  // eq = none
   44c58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c5c:	tbnz	w0, #14, 44d30 <aarch64_opcode_lookup@@Base+0x2070>
   44c60:	cbnz	w1, 44cd8 <aarch64_opcode_lookup@@Base+0x2018>
   44c64:	tbnz	w0, #31, 44c7c <aarch64_opcode_lookup@@Base+0x1fbc>
   44c68:	tst	x0, #0x10
   44c6c:	mov	w1, #0x53d                 	// #1341
   44c70:	mov	w0, #0x526                 	// #1318
   44c74:	csel	w0, w0, w1, eq  // eq = none
   44c78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44c7c:	and	w2, w0, #0x400000
   44c80:	and	w1, w0, #0x800000
   44c84:	tbnz	w0, #20, 44cb0 <aarch64_opcode_lookup@@Base+0x1ff0>
   44c88:	cmp	w1, #0x0
   44c8c:	cbnz	w2, 44ca0 <aarch64_opcode_lookup@@Base+0x1fe0>
   44c90:	mov	w0, #0x5e4                 	// #1508
   44c94:	mov	w1, #0x632                 	// #1586
   44c98:	csel	w0, w0, w1, eq  // eq = none
   44c9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ca0:	mov	w0, #0x5e6                 	// #1510
   44ca4:	mov	w1, #0x5fb                 	// #1531
   44ca8:	csel	w0, w0, w1, eq  // eq = none
   44cac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44cb0:	cmp	w1, #0x0
   44cb4:	cbnz	w2, 44cc8 <aarch64_opcode_lookup@@Base+0x2008>
   44cb8:	mov	w0, #0x6a4                 	// #1700
   44cbc:	mov	w1, #0x6b1                 	// #1713
   44cc0:	csel	w0, w0, w1, eq  // eq = none
   44cc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44cc8:	mov	w0, #0x6a6                 	// #1702
   44ccc:	mov	w1, #0x6aa                 	// #1706
   44cd0:	csel	w0, w0, w1, eq  // eq = none
   44cd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44cd8:	and	w1, w0, #0x800000
   44cdc:	tbnz	w0, #22, 44d14 <aarch64_opcode_lookup@@Base+0x2054>
   44ce0:	cbnz	w1, 44cf8 <aarch64_opcode_lookup@@Base+0x2038>
   44ce4:	cmp	w0, #0x0
   44ce8:	mov	w1, #0x749                 	// #1865
   44cec:	mov	w0, #0x818                 	// #2072
   44cf0:	csel	w0, w0, w1, ge  // ge = tcont
   44cf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44cf8:	tbnz	w0, #31, 48740 <aarch64_opcode_lookup@@Base+0x5a80>
   44cfc:	tbnz	w0, #16, 48748 <aarch64_opcode_lookup@@Base+0x5a88>
   44d00:	tst	x0, #0x20000
   44d04:	mov	w1, #0x977                 	// #2423
   44d08:	mov	w0, #0x815                 	// #2069
   44d0c:	csel	w0, w0, w1, eq  // eq = none
   44d10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d14:	cbz	w1, 48750 <aarch64_opcode_lookup@@Base+0x5a90>
   44d18:	tbnz	w0, #31, 48758 <aarch64_opcode_lookup@@Base+0x5a98>
   44d1c:	tst	x0, #0x10000
   44d20:	mov	w1, #0x814                 	// #2068
   44d24:	mov	w0, #0x816                 	// #2070
   44d28:	csel	w0, w0, w1, eq  // eq = none
   44d2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d30:	cbnz	w1, 44d7c <aarch64_opcode_lookup@@Base+0x20bc>
   44d34:	tbnz	w0, #31, 44d4c <aarch64_opcode_lookup@@Base+0x208c>
   44d38:	tst	x0, #0x10
   44d3c:	mov	w1, #0x538                 	// #1336
   44d40:	mov	w0, #0x536                 	// #1334
   44d44:	csel	w0, w0, w1, eq  // eq = none
   44d48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d4c:	and	w1, w0, #0x800000
   44d50:	tbnz	w0, #22, 44d68 <aarch64_opcode_lookup@@Base+0x20a8>
   44d54:	cmp	w1, #0x0
   44d58:	mov	w0, #0x6b5                 	// #1717
   44d5c:	mov	w1, #0x6b9                 	// #1721
   44d60:	csel	w0, w0, w1, eq  // eq = none
   44d64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d68:	cmp	w1, #0x0
   44d6c:	mov	w0, #0x649                 	// #1609
   44d70:	mov	w1, #0x64d                 	// #1613
   44d74:	csel	w0, w0, w1, eq  // eq = none
   44d78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d7c:	and	w1, w0, #0x400000
   44d80:	tbnz	w0, #20, 44d9c <aarch64_opcode_lookup@@Base+0x20dc>
   44d84:	cbz	w1, 48760 <aarch64_opcode_lookup@@Base+0x5aa0>
   44d88:	tst	x0, #0x800000
   44d8c:	mov	w1, #0x766                 	// #1894
   44d90:	mov	w0, #0x751                 	// #1873
   44d94:	csel	w0, w0, w1, eq  // eq = none
   44d98:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44d9c:	and	w0, w0, #0x800000
   44da0:	cmp	w0, #0x0
   44da4:	cbnz	w1, 44db8 <aarch64_opcode_lookup@@Base+0x20f8>
   44da8:	mov	w0, #0x78e                 	// #1934
   44dac:	mov	w1, #0x792                 	// #1938
   44db0:	csel	w0, w0, w1, eq  // eq = none
   44db4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44db8:	mov	w0, #0x77e                 	// #1918
   44dbc:	mov	w1, #0x782                 	// #1922
   44dc0:	csel	w0, w0, w1, eq  // eq = none
   44dc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44dc8:	tbnz	w0, #13, 44f1c <aarch64_opcode_lookup@@Base+0x225c>
   44dcc:	cbnz	w1, 44e58 <aarch64_opcode_lookup@@Base+0x2198>
   44dd0:	tbnz	w0, #31, 44de8 <aarch64_opcode_lookup@@Base+0x2128>
   44dd4:	tst	x0, #0x10
   44dd8:	mov	w1, #0x530                 	// #1328
   44ddc:	mov	w0, #0x533                 	// #1331
   44de0:	csel	w0, w0, w1, eq  // eq = none
   44de4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44de8:	and	w1, w0, #0x800000
   44dec:	tbnz	w0, #14, 44e00 <aarch64_opcode_lookup@@Base+0x2140>
   44df0:	cmp	w1, #0x0
   44df4:	cset	w0, ne  // ne = any
   44df8:	add	w0, w0, #0x95f
   44dfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e00:	and	w2, w0, #0x400000
   44e04:	tbnz	w0, #15, 44e30 <aarch64_opcode_lookup@@Base+0x2170>
   44e08:	cmp	w1, #0x0
   44e0c:	cbnz	w2, 44e20 <aarch64_opcode_lookup@@Base+0x2160>
   44e10:	mov	w0, #0x5de                 	// #1502
   44e14:	mov	w1, #0x5f2                 	// #1522
   44e18:	csel	w0, w0, w1, eq  // eq = none
   44e1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e20:	mov	w0, #0x5e0                 	// #1504
   44e24:	mov	w1, #0x5f4                 	// #1524
   44e28:	csel	w0, w0, w1, eq  // eq = none
   44e2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e30:	cmp	w1, #0x0
   44e34:	cbnz	w2, 44e48 <aarch64_opcode_lookup@@Base+0x2188>
   44e38:	mov	w0, #0x640                 	// #1600
   44e3c:	mov	w1, #0x644                 	// #1604
   44e40:	csel	w0, w0, w1, eq  // eq = none
   44e44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e48:	mov	w0, #0x650                 	// #1616
   44e4c:	mov	w1, #0x654                 	// #1620
   44e50:	csel	w0, w0, w1, eq  // eq = none
   44e54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e58:	tbnz	w0, #15, 44ee8 <aarch64_opcode_lookup@@Base+0x2228>
   44e5c:	tbnz	w0, #14, 44e98 <aarch64_opcode_lookup@@Base+0x21d8>
   44e60:	tbnz	w0, #12, 44e8c <aarch64_opcode_lookup@@Base+0x21cc>
   44e64:	and	w1, w0, #0x800000
   44e68:	tbnz	w0, #10, 44e7c <aarch64_opcode_lookup@@Base+0x21bc>
   44e6c:	cbz	w1, 48768 <aarch64_opcode_lookup@@Base+0x5aa8>
   44e70:	ubfx	x0, x0, #22, #1
   44e74:	add	w0, w0, #0x5a0
   44e78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e7c:	cbz	w1, 48770 <aarch64_opcode_lookup@@Base+0x5ab0>
   44e80:	ubfx	x0, x0, #22, #1
   44e84:	add	w0, w0, #0x5a4
   44e88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e8c:	ubfx	x0, x0, #22, #1
   44e90:	add	w0, w0, #0x56b
   44e94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44e98:	and	w1, w0, #0x800000
   44e9c:	tbnz	w0, #22, 44ebc <aarch64_opcode_lookup@@Base+0x21fc>
   44ea0:	cbz	w1, 48778 <aarch64_opcode_lookup@@Base+0x5ab8>
   44ea4:	tbnz	w0, #31, 48780 <aarch64_opcode_lookup@@Base+0x5ac0>
   44ea8:	tst	x0, #0x400
   44eac:	mov	w1, #0x820                 	// #2080
   44eb0:	mov	w0, #0x81e                 	// #2078
   44eb4:	csel	w0, w0, w1, eq  // eq = none
   44eb8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ebc:	cbnz	w1, 44ed4 <aarch64_opcode_lookup@@Base+0x2214>
   44ec0:	cmp	w0, #0x0
   44ec4:	mov	w1, #0x74d                 	// #1869
   44ec8:	mov	w0, #0x974                 	// #2420
   44ecc:	csel	w0, w0, w1, ge  // ge = tcont
   44ed0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ed4:	tbnz	w0, #31, 48788 <aarch64_opcode_lookup@@Base+0x5ac8>
   44ed8:	tst	x0, #0x400
   44edc:	cset	w0, eq  // eq = none
   44ee0:	add	w0, w0, #0x97a
   44ee4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ee8:	tbnz	w0, #22, 44f04 <aarch64_opcode_lookup@@Base+0x2244>
   44eec:	tbnz	w0, #31, 48790 <aarch64_opcode_lookup@@Base+0x5ad0>
   44ef0:	tst	x0, #0x400
   44ef4:	mov	w1, #0x821                 	// #2081
   44ef8:	mov	w0, #0x81f                 	// #2079
   44efc:	csel	w0, w0, w1, eq  // eq = none
   44f00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f04:	tbz	w0, #23, 48798 <aarch64_opcode_lookup@@Base+0x5ad8>
   44f08:	tbnz	w0, #31, 487a0 <aarch64_opcode_lookup@@Base+0x5ae0>
   44f0c:	tst	x0, #0x400
   44f10:	cset	w0, eq  // eq = none
   44f14:	add	w0, w0, #0x978
   44f18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f1c:	cbnz	w1, 45004 <aarch64_opcode_lookup@@Base+0x2344>
   44f20:	tbnz	w0, #31, 44f38 <aarch64_opcode_lookup@@Base+0x2278>
   44f24:	tst	x0, #0x10
   44f28:	mov	w1, #0x539                 	// #1337
   44f2c:	mov	w0, #0x537                 	// #1335
   44f30:	csel	w0, w0, w1, eq  // eq = none
   44f34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f38:	and	w1, w0, #0x800000
   44f3c:	and	w2, w0, #0x8000
   44f40:	tbnz	w0, #14, 44fb0 <aarch64_opcode_lookup@@Base+0x22f0>
   44f44:	cbnz	w2, 44f58 <aarch64_opcode_lookup@@Base+0x2298>
   44f48:	cmp	w1, #0x0
   44f4c:	cset	w0, ne  // ne = any
   44f50:	add	w0, w0, #0x963
   44f54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f58:	and	w2, w0, #0x400000
   44f5c:	tbnz	w0, #20, 44f88 <aarch64_opcode_lookup@@Base+0x22c8>
   44f60:	cmp	w1, #0x0
   44f64:	cbnz	w2, 44f78 <aarch64_opcode_lookup@@Base+0x22b8>
   44f68:	mov	w0, #0x5e5                 	// #1509
   44f6c:	mov	w1, #0x5fa                 	// #1530
   44f70:	csel	w0, w0, w1, eq  // eq = none
   44f74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f78:	mov	w0, #0x5e7                 	// #1511
   44f7c:	mov	w1, #0x5fc                 	// #1532
   44f80:	csel	w0, w0, w1, eq  // eq = none
   44f84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44f88:	cmp	w1, #0x0
   44f8c:	cbnz	w2, 44fa0 <aarch64_opcode_lookup@@Base+0x22e0>
   44f90:	mov	w0, #0x6a5                 	// #1701
   44f94:	mov	w1, #0x6a9                 	// #1705
   44f98:	csel	w0, w0, w1, eq  // eq = none
   44f9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44fa0:	mov	w0, #0x6a7                 	// #1703
   44fa4:	mov	w1, #0x6ab                 	// #1707
   44fa8:	csel	w0, w0, w1, eq  // eq = none
   44fac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44fb0:	and	w0, w0, #0x400000
   44fb4:	cmp	w1, #0x0
   44fb8:	cbnz	w2, 44fe0 <aarch64_opcode_lookup@@Base+0x2320>
   44fbc:	cbnz	w0, 44fd0 <aarch64_opcode_lookup@@Base+0x2310>
   44fc0:	mov	w0, #0x65b                 	// #1627
   44fc4:	mov	w1, #0x66e                 	// #1646
   44fc8:	csel	w0, w0, w1, eq  // eq = none
   44fcc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44fd0:	mov	w0, #0x65f                 	// #1631
   44fd4:	mov	w1, #0x672                 	// #1650
   44fd8:	csel	w0, w0, w1, eq  // eq = none
   44fdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44fe0:	cbnz	w0, 44ff4 <aarch64_opcode_lookup@@Base+0x2334>
   44fe4:	mov	w0, #0x641                 	// #1601
   44fe8:	mov	w1, #0x645                 	// #1605
   44fec:	csel	w0, w0, w1, eq  // eq = none
   44ff0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   44ff4:	mov	w0, #0x651                 	// #1617
   44ff8:	mov	w1, #0x655                 	// #1621
   44ffc:	csel	w0, w0, w1, eq  // eq = none
   45000:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45004:	and	w3, w0, #0x8000
   45008:	tbnz	w0, #14, 45050 <aarch64_opcode_lookup@@Base+0x2390>
   4500c:	cbnz	w3, 45020 <aarch64_opcode_lookup@@Base+0x2360>
   45010:	tbz	w0, #23, 487a8 <aarch64_opcode_lookup@@Base+0x5ae8>
   45014:	ubfx	x0, x0, #22, #1
   45018:	add	w0, w0, #0x5ab
   4501c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45020:	tbnz	w0, #22, 4503c <aarch64_opcode_lookup@@Base+0x237c>
   45024:	tbnz	w0, #31, 487b0 <aarch64_opcode_lookup@@Base+0x5af0>
   45028:	tst	x0, #0x400
   4502c:	mov	w1, #0x825                 	// #2085
   45030:	mov	w0, #0x823                 	// #2083
   45034:	csel	w0, w0, w1, eq  // eq = none
   45038:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4503c:	tst	x0, #0x800000
   45040:	mov	w1, #0x767                 	// #1895
   45044:	mov	w0, #0x752                 	// #1874
   45048:	csel	w0, w0, w1, eq  // eq = none
   4504c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45050:	and	w2, w0, #0x400000
   45054:	and	w1, w0, #0x800000
   45058:	cbnz	w3, 45090 <aarch64_opcode_lookup@@Base+0x23d0>
   4505c:	cbnz	w2, 4507c <aarch64_opcode_lookup@@Base+0x23bc>
   45060:	cbz	w1, 487b8 <aarch64_opcode_lookup@@Base+0x5af8>
   45064:	tbnz	w0, #31, 487c0 <aarch64_opcode_lookup@@Base+0x5b00>
   45068:	tst	x0, #0x400
   4506c:	mov	w1, #0x824                 	// #2084
   45070:	mov	w0, #0x822                 	// #2082
   45074:	csel	w0, w0, w1, eq  // eq = none
   45078:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4507c:	cmp	w1, #0x0
   45080:	mov	w0, #0x785                 	// #1925
   45084:	mov	w1, #0x789                 	// #1929
   45088:	csel	w0, w0, w1, eq  // eq = none
   4508c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45090:	cbnz	w2, 450c4 <aarch64_opcode_lookup@@Base+0x2404>
   45094:	cbnz	w1, 450ac <aarch64_opcode_lookup@@Base+0x23ec>
   45098:	tst	x0, #0x100000
   4509c:	mov	w1, #0x776                 	// #1910
   450a0:	mov	w0, #0x74f                 	// #1871
   450a4:	csel	w0, w0, w1, eq  // eq = none
   450a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   450ac:	tbz	w0, #31, 487c8 <aarch64_opcode_lookup@@Base+0x5b08>
   450b0:	tst	x0, #0x100000
   450b4:	mov	w1, #0x77a                 	// #1914
   450b8:	mov	w0, #0x764                 	// #1892
   450bc:	csel	w0, w0, w1, eq  // eq = none
   450c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   450c4:	cbnz	w1, 450e0 <aarch64_opcode_lookup@@Base+0x2420>
   450c8:	tbz	w0, #31, 487d0 <aarch64_opcode_lookup@@Base+0x5b10>
   450cc:	tst	x0, #0x100000
   450d0:	mov	w1, #0x786                 	// #1926
   450d4:	mov	w0, #0x753                 	// #1875
   450d8:	csel	w0, w0, w1, eq  // eq = none
   450dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   450e0:	tbz	w0, #31, 487d8 <aarch64_opcode_lookup@@Base+0x5b18>
   450e4:	tst	x0, #0x100000
   450e8:	mov	w1, #0x78a                 	// #1930
   450ec:	mov	w0, #0x768                 	// #1896
   450f0:	csel	w0, w0, w1, eq  // eq = none
   450f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   450f8:	and	w1, w0, #0x40000000
   450fc:	cbnz	w3, 45a64 <aarch64_opcode_lookup@@Base+0x2da4>
   45100:	cbnz	w1, 45468 <aarch64_opcode_lookup@@Base+0x27a8>
   45104:	tbnz	w0, #31, 45370 <aarch64_opcode_lookup@@Base+0x26b0>
   45108:	tbnz	w0, #21, 45154 <aarch64_opcode_lookup@@Base+0x2494>
   4510c:	tbnz	w0, #20, 45140 <aarch64_opcode_lookup@@Base+0x2480>
   45110:	and	w1, w0, #0x800000
   45114:	tbnz	w0, #22, 4512c <aarch64_opcode_lookup@@Base+0x246c>
   45118:	cmp	w1, #0x0
   4511c:	mov	w0, #0x6db                 	// #1755
   45120:	mov	w1, #0x503                 	// #1283
   45124:	csel	w0, w0, w1, eq  // eq = none
   45128:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4512c:	cmp	w1, #0x0
   45130:	mov	w0, #0x55a                 	// #1370
   45134:	mov	w1, #0x558                 	// #1368
   45138:	csel	w0, w0, w1, eq  // eq = none
   4513c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45140:	tst	x0, #0x8000
   45144:	mov	w1, #0x578                 	// #1400
   45148:	mov	w0, #0x549                 	// #1353
   4514c:	csel	w0, w0, w1, eq  // eq = none
   45150:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45154:	and	w1, w0, #0x8000
   45158:	tbnz	w0, #14, 452e0 <aarch64_opcode_lookup@@Base+0x2620>
   4515c:	tbnz	w0, #13, 45240 <aarch64_opcode_lookup@@Base+0x2580>
   45160:	cbnz	w1, 451a4 <aarch64_opcode_lookup@@Base+0x24e4>
   45164:	tbnz	w0, #22, 487e0 <aarch64_opcode_lookup@@Base+0x5b20>
   45168:	tbz	w0, #23, 487e8 <aarch64_opcode_lookup@@Base+0x5b28>
   4516c:	and	w1, w0, #0x800
   45170:	tbnz	w0, #10, 4518c <aarch64_opcode_lookup@@Base+0x24cc>
   45174:	cbz	w1, 487f0 <aarch64_opcode_lookup@@Base+0x5b30>
   45178:	tst	x0, #0x1000
   4517c:	mov	w1, #0x96b                 	// #2411
   45180:	mov	w0, #0x969                 	// #2409
   45184:	csel	w0, w0, w1, eq  // eq = none
   45188:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4518c:	cbz	w1, 487f8 <aarch64_opcode_lookup@@Base+0x5b38>
   45190:	tst	x0, #0x1000
   45194:	mov	w1, #0x96c                 	// #2412
   45198:	mov	w0, #0x96a                 	// #2410
   4519c:	csel	w0, w0, w1, eq  // eq = none
   451a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   451a4:	and	w2, w0, #0x20000
   451a8:	and	w1, w0, #0x40000
   451ac:	tbnz	w0, #16, 451f8 <aarch64_opcode_lookup@@Base+0x2538>
   451b0:	cbnz	w2, 451e0 <aarch64_opcode_lookup@@Base+0x2520>
   451b4:	and	w0, w0, #0x80000
   451b8:	cmp	w0, #0x0
   451bc:	cbnz	w1, 451d0 <aarch64_opcode_lookup@@Base+0x2510>
   451c0:	mov	w0, #0x547                 	// #1351
   451c4:	mov	w1, #0x51d                 	// #1309
   451c8:	csel	w0, w0, w1, eq  // eq = none
   451cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   451d0:	mov	w0, #0x70b                 	// #1803
   451d4:	mov	w1, #0x726                 	// #1830
   451d8:	csel	w0, w0, w1, eq  // eq = none
   451dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   451e0:	cbnz	w1, 48800 <aarch64_opcode_lookup@@Base+0x5b40>
   451e4:	tst	x0, #0x80000
   451e8:	mov	w1, #0x51e                 	// #1310
   451ec:	mov	w0, #0x5d9                 	// #1497
   451f0:	csel	w0, w0, w1, eq  // eq = none
   451f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   451f8:	cbnz	w2, 45228 <aarch64_opcode_lookup@@Base+0x2568>
   451fc:	and	w0, w0, #0x80000
   45200:	cmp	w0, #0x0
   45204:	cbnz	w1, 45218 <aarch64_opcode_lookup@@Base+0x2558>
   45208:	mov	w0, #0x546                 	// #1350
   4520c:	mov	w1, #0x520                 	// #1312
   45210:	csel	w0, w0, w1, eq  // eq = none
   45214:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45218:	mov	w0, #0x70c                 	// #1804
   4521c:	mov	w1, #0x870                 	// #2160
   45220:	csel	w0, w0, w1, eq  // eq = none
   45224:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45228:	cbnz	w1, 48808 <aarch64_opcode_lookup@@Base+0x5b48>
   4522c:	tst	x0, #0x80000
   45230:	mov	w1, #0x521                 	// #1313
   45234:	mov	w0, #0x5db                 	// #1499
   45238:	csel	w0, w0, w1, eq  // eq = none
   4523c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45240:	cbnz	w1, 452b0 <aarch64_opcode_lookup@@Base+0x25f0>
   45244:	tbnz	w0, #10, 48810 <aarch64_opcode_lookup@@Base+0x5b50>
   45248:	and	w1, w0, #0x1000
   4524c:	tbnz	w0, #11, 45264 <aarch64_opcode_lookup@@Base+0x25a4>
   45250:	cmp	w1, #0x0
   45254:	mov	w0, #0x556                 	// #1366
   45258:	mov	w1, #0x7a1                 	// #1953
   4525c:	csel	w0, w0, w1, eq  // eq = none
   45260:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45264:	cbz	w1, 48818 <aarch64_opcode_lookup@@Base+0x5b58>
   45268:	and	w1, w0, #0x20000
   4526c:	tbnz	w0, #16, 4529c <aarch64_opcode_lookup@@Base+0x25dc>
   45270:	cbnz	w1, 48820 <aarch64_opcode_lookup@@Base+0x5b60>
   45274:	tbnz	w0, #18, 45290 <aarch64_opcode_lookup@@Base+0x25d0>
   45278:	tbnz	w0, #19, 48828 <aarch64_opcode_lookup@@Base+0x5b68>
   4527c:	tst	x0, #0x100000
   45280:	mov	w1, #0x79d                 	// #1949
   45284:	mov	w0, #0x555                 	// #1365
   45288:	csel	w0, w0, w1, eq  // eq = none
   4528c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45290:	ubfx	x0, x0, #20, #1
   45294:	add	w0, w0, #0x5d6
   45298:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4529c:	cmp	w1, #0x0
   452a0:	mov	w0, #0x79c                 	// #1948
   452a4:	mov	w1, #0x7db                 	// #2011
   452a8:	csel	w0, w0, w1, eq  // eq = none
   452ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   452b0:	tbnz	w0, #16, 452cc <aarch64_opcode_lookup@@Base+0x260c>
   452b4:	tbnz	w0, #19, 48830 <aarch64_opcode_lookup@@Base+0x5b70>
   452b8:	tst	x0, #0x100000
   452bc:	mov	w1, #0x51f                 	// #1311
   452c0:	mov	w0, #0x5d8                 	// #1496
   452c4:	csel	w0, w0, w1, eq  // eq = none
   452c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   452cc:	tst	x0, #0x100000
   452d0:	mov	w1, #0x522                 	// #1314
   452d4:	mov	w0, #0x5da                 	// #1498
   452d8:	csel	w0, w0, w1, eq  // eq = none
   452dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   452e0:	cbnz	w1, 48838 <aarch64_opcode_lookup@@Base+0x5b78>
   452e4:	and	w2, w0, #0x800
   452e8:	and	w1, w0, #0x2000
   452ec:	tbnz	w0, #10, 45338 <aarch64_opcode_lookup@@Base+0x2678>
   452f0:	cbnz	w2, 45328 <aarch64_opcode_lookup@@Base+0x2668>
   452f4:	tbnz	w0, #12, 45318 <aarch64_opcode_lookup@@Base+0x2658>
   452f8:	cbnz	w1, 48840 <aarch64_opcode_lookup@@Base+0x5b80>
   452fc:	tbz	w0, #20, 48848 <aarch64_opcode_lookup@@Base+0x5b88>
   45300:	tbnz	w0, #16, 48850 <aarch64_opcode_lookup@@Base+0x5b90>
   45304:	tst	x0, #0x40000
   45308:	mov	w1, #0x709                 	// #1801
   4530c:	mov	w0, #0x703                 	// #1795
   45310:	csel	w0, w0, w1, eq  // eq = none
   45314:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45318:	cmp	w1, #0x0
   4531c:	cset	w0, ne  // ne = any
   45320:	add	w0, w0, #0x7a2
   45324:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45328:	cmp	w1, #0x0
   4532c:	cset	w0, ne  // ne = any
   45330:	add	w0, w0, #0x7e0
   45334:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45338:	cbnz	w2, 45360 <aarch64_opcode_lookup@@Base+0x26a0>
   4533c:	tbnz	w0, #12, 45350 <aarch64_opcode_lookup@@Base+0x2690>
   45340:	cmp	w1, #0x0
   45344:	cset	w0, ne  // ne = any
   45348:	add	w0, w0, #0x7ef
   4534c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45350:	cmp	w1, #0x0
   45354:	cset	w0, ne  // ne = any
   45358:	add	w0, w0, #0x7a4
   4535c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45360:	cmp	w1, #0x0
   45364:	cset	w0, ne  // ne = any
   45368:	add	w0, w0, #0x7e2
   4536c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45370:	and	w1, w0, #0x8000
   45374:	and	w2, w0, #0x4000
   45378:	tbnz	w0, #13, 45404 <aarch64_opcode_lookup@@Base+0x2744>
   4537c:	cbnz	w2, 453ac <aarch64_opcode_lookup@@Base+0x26ec>
   45380:	cbnz	w1, 45398 <aarch64_opcode_lookup@@Base+0x26d8>
   45384:	tst	x0, #0x400000
   45388:	mov	w1, #0x6e8                 	// #1768
   4538c:	mov	w0, #0x6bc                 	// #1724
   45390:	csel	w0, w0, w1, eq  // eq = none
   45394:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45398:	tst	x0, #0x800000
   4539c:	mov	w1, #0x60e                 	// #1550
   453a0:	mov	w0, #0x611                 	// #1553
   453a4:	csel	w0, w0, w1, eq  // eq = none
   453a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   453ac:	cbnz	w1, 453d4 <aarch64_opcode_lookup@@Base+0x2714>
   453b0:	tbnz	w0, #23, 453c0 <aarch64_opcode_lookup@@Base+0x2700>
   453b4:	ubfx	x0, x0, #21, #1
   453b8:	add	w0, w0, #0x634
   453bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   453c0:	tst	x0, #0x400000
   453c4:	mov	w1, #0x6fd                 	// #1789
   453c8:	mov	w0, #0x6bd                 	// #1725
   453cc:	csel	w0, w0, w1, eq  // eq = none
   453d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   453d4:	tbnz	w0, #22, 453f0 <aarch64_opcode_lookup@@Base+0x2730>
   453d8:	tbnz	w0, #21, 48858 <aarch64_opcode_lookup@@Base+0x5b98>
   453dc:	tst	x0, #0x800000
   453e0:	mov	w1, #0x6eb                 	// #1771
   453e4:	mov	w0, #0x6f9                 	// #1785
   453e8:	csel	w0, w0, w1, eq  // eq = none
   453ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   453f0:	tst	x0, #0x800000
   453f4:	mov	w1, #0x610                 	// #1552
   453f8:	mov	w0, #0x614                 	// #1556
   453fc:	csel	w0, w0, w1, eq  // eq = none
   45400:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45404:	cbnz	w2, 45424 <aarch64_opcode_lookup@@Base+0x2764>
   45408:	cbz	w1, 48860 <aarch64_opcode_lookup@@Base+0x5ba0>
   4540c:	tbz	w0, #22, 48868 <aarch64_opcode_lookup@@Base+0x5ba8>
   45410:	tst	x0, #0x800000
   45414:	mov	w1, #0x60f                 	// #1551
   45418:	mov	w0, #0x612                 	// #1554
   4541c:	csel	w0, w0, w1, eq  // eq = none
   45420:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45424:	cbnz	w1, 45438 <aarch64_opcode_lookup@@Base+0x2778>
   45428:	tbnz	w0, #23, 48870 <aarch64_opcode_lookup@@Base+0x5bb0>
   4542c:	ubfx	x0, x0, #21, #1
   45430:	add	w0, w0, #0x698
   45434:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45438:	tbnz	w0, #22, 45454 <aarch64_opcode_lookup@@Base+0x2794>
   4543c:	tbnz	w0, #21, 48878 <aarch64_opcode_lookup@@Base+0x5bb8>
   45440:	tst	x0, #0x800000
   45444:	mov	w1, #0x6ee                 	// #1774
   45448:	mov	w0, #0x6fc                 	// #1788
   4544c:	csel	w0, w0, w1, eq  // eq = none
   45450:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45454:	tst	x0, #0x800000
   45458:	mov	w1, #0x602                 	// #1538
   4545c:	mov	w0, #0x615                 	// #1557
   45460:	csel	w0, w0, w1, eq  // eq = none
   45464:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45468:	and	w2, w0, #0x8000
   4546c:	and	w1, w0, #0x200000
   45470:	and	w3, w0, #0x4000
   45474:	tbnz	w0, #13, 45764 <aarch64_opcode_lookup@@Base+0x2aa4>
   45478:	cbnz	w3, 455e0 <aarch64_opcode_lookup@@Base+0x2920>
   4547c:	cbnz	w2, 45544 <aarch64_opcode_lookup@@Base+0x2884>
   45480:	cbnz	w1, 454e4 <aarch64_opcode_lookup@@Base+0x2824>
   45484:	tbnz	w0, #31, 48880 <aarch64_opcode_lookup@@Base+0x5bc0>
   45488:	and	w2, w0, #0x800
   4548c:	and	w1, w0, #0x1000
   45490:	tbnz	w0, #10, 454bc <aarch64_opcode_lookup@@Base+0x27fc>
   45494:	cmp	w1, #0x0
   45498:	cbnz	w2, 454ac <aarch64_opcode_lookup@@Base+0x27ec>
   4549c:	mov	w0, #0x84e                 	// #2126
   454a0:	mov	w1, #0x8b9                 	// #2233
   454a4:	csel	w0, w0, w1, eq  // eq = none
   454a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   454ac:	mov	w0, #0x8d1                 	// #2257
   454b0:	mov	w1, #0x906                 	// #2310
   454b4:	csel	w0, w0, w1, eq  // eq = none
   454b8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   454bc:	cmp	w1, #0x0
   454c0:	cbnz	w2, 454d4 <aarch64_opcode_lookup@@Base+0x2814>
   454c4:	mov	w0, #0x850                 	// #2128
   454c8:	mov	w1, #0x8bb                 	// #2235
   454cc:	csel	w0, w0, w1, eq  // eq = none
   454d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   454d4:	mov	w0, #0x8d2                 	// #2258
   454d8:	mov	w1, #0x907                 	// #2311
   454dc:	csel	w0, w0, w1, eq  // eq = none
   454e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   454e4:	tbnz	w0, #31, 48888 <aarch64_opcode_lookup@@Base+0x5bc8>
   454e8:	and	w2, w0, #0x800
   454ec:	and	w1, w0, #0x1000
   454f0:	tbnz	w0, #10, 4551c <aarch64_opcode_lookup@@Base+0x285c>
   454f4:	cmp	w1, #0x0
   454f8:	cbnz	w2, 4550c <aarch64_opcode_lookup@@Base+0x284c>
   454fc:	mov	w0, #0x8a8                 	// #2216
   45500:	mov	w1, #0x856                 	// #2134
   45504:	csel	w0, w0, w1, eq  // eq = none
   45508:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4550c:	mov	w0, #0x8a0                 	// #2208
   45510:	mov	w1, #0x844                 	// #2116
   45514:	csel	w0, w0, w1, eq  // eq = none
   45518:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4551c:	cmp	w1, #0x0
   45520:	cbnz	w2, 45534 <aarch64_opcode_lookup@@Base+0x2874>
   45524:	mov	w0, #0x8a9                 	// #2217
   45528:	mov	w1, #0x857                 	// #2135
   4552c:	csel	w0, w0, w1, eq  // eq = none
   45530:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45534:	mov	w0, #0x8a1                 	// #2209
   45538:	mov	w1, #0x845                 	// #2117
   4553c:	csel	w0, w0, w1, eq  // eq = none
   45540:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45544:	cbnz	w1, 455b4 <aarch64_opcode_lookup@@Base+0x28f4>
   45548:	tbnz	w0, #31, 455a0 <aarch64_opcode_lookup@@Base+0x28e0>
   4554c:	and	w1, w0, #0x800
   45550:	tbnz	w0, #10, 4558c <aarch64_opcode_lookup@@Base+0x28cc>
   45554:	and	w2, w0, #0x1000
   45558:	cbnz	w1, 45570 <aarch64_opcode_lookup@@Base+0x28b0>
   4555c:	cmp	w2, #0x0
   45560:	mov	w0, #0x84f                 	// #2127
   45564:	mov	w1, #0x80f                 	// #2063
   45568:	csel	w0, w0, w1, eq  // eq = none
   4556c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45570:	cbz	w2, 48890 <aarch64_opcode_lookup@@Base+0x5bd0>
   45574:	tbnz	w0, #22, 48898 <aarch64_opcode_lookup@@Base+0x5bd8>
   45578:	tst	x0, #0x800000
   4557c:	mov	w1, #0x959                 	// #2393
   45580:	mov	w0, #0x957                 	// #2391
   45584:	csel	w0, w0, w1, eq  // eq = none
   45588:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4558c:	cmp	w1, #0x0
   45590:	mov	w0, #0x810                 	// #2064
   45594:	mov	w1, #0x8bc                 	// #2236
   45598:	csel	w0, w0, w1, eq  // eq = none
   4559c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   455a0:	tst	x0, #0x400000
   455a4:	mov	w1, #0x630                 	// #1584
   455a8:	mov	w0, #0x82f                 	// #2095
   455ac:	csel	w0, w0, w1, eq  // eq = none
   455b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   455b4:	tbnz	w0, #31, 455cc <aarch64_opcode_lookup@@Base+0x290c>
   455b8:	tst	x0, #0x10
   455bc:	mov	w1, #0x83e                 	// #2110
   455c0:	mov	w0, #0x832                 	// #2098
   455c4:	csel	w0, w0, w1, eq  // eq = none
   455c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   455cc:	tst	x0, #0x400000
   455d0:	mov	w1, #0x631                 	// #1585
   455d4:	mov	w0, #0x633                 	// #1587
   455d8:	csel	w0, w0, w1, eq  // eq = none
   455dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   455e0:	cbnz	w2, 4569c <aarch64_opcode_lookup@@Base+0x29dc>
   455e4:	cbnz	w1, 4565c <aarch64_opcode_lookup@@Base+0x299c>
   455e8:	tbnz	w0, #31, 45648 <aarch64_opcode_lookup@@Base+0x2988>
   455ec:	and	w2, w0, #0x800
   455f0:	and	w1, w0, #0x1000
   455f4:	tbnz	w0, #10, 45620 <aarch64_opcode_lookup@@Base+0x2960>
   455f8:	cmp	w1, #0x0
   455fc:	cbnz	w2, 45610 <aarch64_opcode_lookup@@Base+0x2950>
   45600:	mov	w0, #0x851                 	// #2129
   45604:	mov	w1, #0x8bd                 	// #2237
   45608:	csel	w0, w0, w1, eq  // eq = none
   4560c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45610:	mov	w0, #0x8d3                 	// #2259
   45614:	mov	w1, #0x908                 	// #2312
   45618:	csel	w0, w0, w1, eq  // eq = none
   4561c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45620:	cmp	w1, #0x0
   45624:	cbnz	w2, 45638 <aarch64_opcode_lookup@@Base+0x2978>
   45628:	mov	w0, #0x852                 	// #2130
   4562c:	mov	w1, #0x8be                 	// #2238
   45630:	csel	w0, w0, w1, eq  // eq = none
   45634:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45638:	mov	w0, #0x8d4                 	// #2260
   4563c:	mov	w1, #0x909                 	// #2313
   45640:	csel	w0, w0, w1, eq  // eq = none
   45644:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45648:	tst	x0, #0x800000
   4564c:	mov	w1, #0x5ea                 	// #1514
   45650:	mov	w0, #0x638                 	// #1592
   45654:	csel	w0, w0, w1, eq  // eq = none
   45658:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4565c:	tbnz	w0, #23, 488a0 <aarch64_opcode_lookup@@Base+0x5be0>
   45660:	tbnz	w0, #31, 488a8 <aarch64_opcode_lookup@@Base+0x5be8>
   45664:	and	w1, w0, #0x800
   45668:	tbnz	w0, #10, 45684 <aarch64_opcode_lookup@@Base+0x29c4>
   4566c:	cbnz	w1, 488b0 <aarch64_opcode_lookup@@Base+0x5bf0>
   45670:	tst	x0, #0x1000
   45674:	mov	w1, #0x8ae                 	// #2222
   45678:	mov	w0, #0x8ac                 	// #2220
   4567c:	csel	w0, w0, w1, eq  // eq = none
   45680:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45684:	cbnz	w1, 488b8 <aarch64_opcode_lookup@@Base+0x5bf8>
   45688:	tst	x0, #0x1000
   4568c:	mov	w1, #0x8af                 	// #2223
   45690:	mov	w0, #0x8ad                 	// #2221
   45694:	csel	w0, w0, w1, eq  // eq = none
   45698:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4569c:	cbnz	w1, 45734 <aarch64_opcode_lookup@@Base+0x2a74>
   456a0:	tbnz	w0, #31, 45704 <aarch64_opcode_lookup@@Base+0x2a44>
   456a4:	and	w1, w0, #0x1000
   456a8:	tbnz	w0, #11, 456e0 <aarch64_opcode_lookup@@Base+0x2a20>
   456ac:	tbnz	w0, #10, 456c8 <aarch64_opcode_lookup@@Base+0x2a08>
   456b0:	cbz	w1, 488c0 <aarch64_opcode_lookup@@Base+0x5c00>
   456b4:	tst	x0, #0x800000
   456b8:	mov	w1, #0x853                 	// #2131
   456bc:	mov	w0, #0x7fe                 	// #2046
   456c0:	csel	w0, w0, w1, eq  // eq = none
   456c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   456c8:	cbz	w1, 488c8 <aarch64_opcode_lookup@@Base+0x5c08>
   456cc:	tst	x0, #0x800000
   456d0:	mov	w1, #0x854                 	// #2132
   456d4:	mov	w0, #0x7ff                 	// #2047
   456d8:	csel	w0, w0, w1, eq  // eq = none
   456dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   456e0:	cbnz	w1, 456f0 <aarch64_opcode_lookup@@Base+0x2a30>
   456e4:	ubfx	x0, x0, #10, #1
   456e8:	add	w0, w0, #0x8cc
   456ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   456f0:	tst	x0, #0x10000
   456f4:	mov	w1, #0x873                 	// #2163
   456f8:	mov	w0, #0x807                 	// #2055
   456fc:	csel	w0, w0, w1, eq  // eq = none
   45700:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45704:	and	w1, w0, #0x800000
   45708:	tbnz	w0, #22, 45720 <aarch64_opcode_lookup@@Base+0x2a60>
   4570c:	cmp	w1, #0x0
   45710:	mov	w0, #0x831                 	// #2097
   45714:	mov	w1, #0x82a                 	// #2090
   45718:	csel	w0, w0, w1, eq  // eq = none
   4571c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45720:	cmp	w1, #0x0
   45724:	mov	w0, #0x63a                 	// #1594
   45728:	mov	w1, #0x5ec                 	// #1516
   4572c:	csel	w0, w0, w1, eq  // eq = none
   45730:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45734:	tbnz	w0, #23, 4574c <aarch64_opcode_lookup@@Base+0x2a8c>
   45738:	tst	x0, #0x400000
   4573c:	mov	w1, #0x63b                 	// #1595
   45740:	mov	w0, #0x63f                 	// #1599
   45744:	csel	w0, w0, w1, eq  // eq = none
   45748:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4574c:	tbz	w0, #31, 488d0 <aarch64_opcode_lookup@@Base+0x5c10>
   45750:	tst	x0, #0x400000
   45754:	mov	w1, #0x5ed                 	// #1517
   45758:	mov	w0, #0x5ef                 	// #1519
   4575c:	csel	w0, w0, w1, eq  // eq = none
   45760:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45764:	cbnz	w3, 45870 <aarch64_opcode_lookup@@Base+0x2bb0>
   45768:	cbnz	w2, 45804 <aarch64_opcode_lookup@@Base+0x2b44>
   4576c:	cbnz	w1, 457a4 <aarch64_opcode_lookup@@Base+0x2ae4>
   45770:	tbnz	w0, #31, 488d8 <aarch64_opcode_lookup@@Base+0x5c18>
   45774:	and	w1, w0, #0x800
   45778:	tbnz	w0, #10, 45790 <aarch64_opcode_lookup@@Base+0x2ad0>
   4577c:	cmp	w1, #0x0
   45780:	mov	w0, #0x84b                 	// #2123
   45784:	mov	w1, #0x8ce                 	// #2254
   45788:	csel	w0, w0, w1, eq  // eq = none
   4578c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45790:	cmp	w1, #0x0
   45794:	mov	w0, #0x84c                 	// #2124
   45798:	mov	w1, #0x8cf                 	// #2255
   4579c:	csel	w0, w0, w1, eq  // eq = none
   457a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   457a4:	tbnz	w0, #31, 488e0 <aarch64_opcode_lookup@@Base+0x5c20>
   457a8:	and	w2, w0, #0x800
   457ac:	and	w1, w0, #0x1000
   457b0:	tbnz	w0, #10, 457dc <aarch64_opcode_lookup@@Base+0x2b1c>
   457b4:	cmp	w1, #0x0
   457b8:	cbnz	w2, 457cc <aarch64_opcode_lookup@@Base+0x2b0c>
   457bc:	mov	w0, #0x8a6                 	// #2214
   457c0:	mov	w1, #0x8f5                 	// #2293
   457c4:	csel	w0, w0, w1, eq  // eq = none
   457c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   457cc:	mov	w0, #0x89e                 	// #2206
   457d0:	mov	w1, #0x8f0                 	// #2288
   457d4:	csel	w0, w0, w1, eq  // eq = none
   457d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   457dc:	cmp	w1, #0x0
   457e0:	cbnz	w2, 457f4 <aarch64_opcode_lookup@@Base+0x2b34>
   457e4:	mov	w0, #0x8a7                 	// #2215
   457e8:	mov	w1, #0x8f6                 	// #2294
   457ec:	csel	w0, w0, w1, eq  // eq = none
   457f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   457f4:	mov	w0, #0x89f                 	// #2207
   457f8:	mov	w1, #0x8f1                 	// #2289
   457fc:	csel	w0, w0, w1, eq  // eq = none
   45800:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45804:	cbnz	w1, 45858 <aarch64_opcode_lookup@@Base+0x2b98>
   45808:	tbnz	w0, #31, 488e8 <aarch64_opcode_lookup@@Base+0x5c28>
   4580c:	and	w1, w0, #0x800
   45810:	tbnz	w0, #10, 45840 <aarch64_opcode_lookup@@Base+0x2b80>
   45814:	and	w0, w0, #0x1000
   45818:	cmp	w0, #0x0
   4581c:	cbnz	w1, 45830 <aarch64_opcode_lookup@@Base+0x2b70>
   45820:	mov	w0, #0x8b6                 	// #2230
   45824:	mov	w1, #0x91f                 	// #2335
   45828:	csel	w0, w0, w1, eq  // eq = none
   4582c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45830:	mov	w0, #0x902                 	// #2306
   45834:	mov	w1, #0x920                 	// #2336
   45838:	csel	w0, w0, w1, eq  // eq = none
   4583c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45840:	cbnz	w1, 488f0 <aarch64_opcode_lookup@@Base+0x5c30>
   45844:	tst	x0, #0x1000
   45848:	mov	w1, #0x91e                 	// #2334
   4584c:	mov	w0, #0x8b7                 	// #2231
   45850:	csel	w0, w0, w1, eq  // eq = none
   45854:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45858:	tbnz	w0, #22, 488f8 <aarch64_opcode_lookup@@Base+0x5c38>
   4585c:	cmp	w0, #0x0
   45860:	mov	w1, #0x697                 	// #1687
   45864:	mov	w0, #0x827                 	// #2087
   45868:	csel	w0, w0, w1, ge  // ge = tcont
   4586c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45870:	cbnz	w2, 45970 <aarch64_opcode_lookup@@Base+0x2cb0>
   45874:	cbnz	w1, 458fc <aarch64_opcode_lookup@@Base+0x2c3c>
   45878:	tbnz	w0, #31, 458e8 <aarch64_opcode_lookup@@Base+0x2c28>
   4587c:	and	w2, w0, #0x800
   45880:	and	w1, w0, #0x1000
   45884:	tbnz	w0, #10, 458b8 <aarch64_opcode_lookup@@Base+0x2bf8>
   45888:	cbnz	w2, 458a0 <aarch64_opcode_lookup@@Base+0x2be0>
   4588c:	cmp	w1, #0x0
   45890:	mov	w0, #0x888                 	// #2184
   45894:	mov	w1, #0x86c                 	// #2156
   45898:	csel	w0, w0, w1, eq  // eq = none
   4589c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   458a0:	cbnz	w1, 48900 <aarch64_opcode_lookup@@Base+0x5c40>
   458a4:	tst	x0, #0x400000
   458a8:	mov	w1, #0x840                 	// #2112
   458ac:	mov	w0, #0x91b                 	// #2331
   458b0:	csel	w0, w0, w1, eq  // eq = none
   458b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   458b8:	cbnz	w2, 458d0 <aarch64_opcode_lookup@@Base+0x2c10>
   458bc:	cmp	w1, #0x0
   458c0:	mov	w0, #0x88b                 	// #2187
   458c4:	mov	w1, #0x86f                 	// #2159
   458c8:	csel	w0, w0, w1, eq  // eq = none
   458cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   458d0:	cbnz	w1, 48908 <aarch64_opcode_lookup@@Base+0x5c48>
   458d4:	tst	x0, #0x400000
   458d8:	mov	w1, #0x841                 	// #2113
   458dc:	mov	w0, #0x91c                 	// #2332
   458e0:	csel	w0, w0, w1, eq  // eq = none
   458e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   458e8:	tst	x0, #0x800000
   458ec:	mov	w1, #0x667                 	// #1639
   458f0:	mov	w0, #0x69e                 	// #1694
   458f4:	csel	w0, w0, w1, eq  // eq = none
   458f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   458fc:	tbnz	w0, #31, 4595c <aarch64_opcode_lookup@@Base+0x2c9c>
   45900:	and	w2, w0, #0x800
   45904:	and	w1, w0, #0x1000
   45908:	tbnz	w0, #10, 45934 <aarch64_opcode_lookup@@Base+0x2c74>
   4590c:	cmp	w1, #0x0
   45910:	cbnz	w2, 45924 <aarch64_opcode_lookup@@Base+0x2c64>
   45914:	mov	w0, #0x800                 	// #2048
   45918:	mov	w1, #0x8c6                 	// #2246
   4591c:	csel	w0, w0, w1, eq  // eq = none
   45920:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45924:	mov	w0, #0x842                 	// #2114
   45928:	mov	w1, #0x846                 	// #2118
   4592c:	csel	w0, w0, w1, eq  // eq = none
   45930:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45934:	cmp	w1, #0x0
   45938:	cbnz	w2, 4594c <aarch64_opcode_lookup@@Base+0x2c8c>
   4593c:	mov	w0, #0x801                 	// #2049
   45940:	mov	w1, #0x8c7                 	// #2247
   45944:	csel	w0, w0, w1, eq  // eq = none
   45948:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4594c:	mov	w0, #0x843                 	// #2115
   45950:	mov	w1, #0x847                 	// #2119
   45954:	csel	w0, w0, w1, eq  // eq = none
   45958:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4595c:	tst	x0, #0x800000
   45960:	mov	w1, #0x668                 	// #1640
   45964:	mov	w0, #0x69f                 	// #1695
   45968:	csel	w0, w0, w1, eq  // eq = none
   4596c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45970:	cbnz	w1, 45a04 <aarch64_opcode_lookup@@Base+0x2d44>
   45974:	tbnz	w0, #31, 459d4 <aarch64_opcode_lookup@@Base+0x2d14>
   45978:	and	w2, w0, #0x800
   4597c:	and	w1, w0, #0x1000
   45980:	tbnz	w0, #10, 459ac <aarch64_opcode_lookup@@Base+0x2cec>
   45984:	cmp	w1, #0x0
   45988:	cbnz	w2, 4599c <aarch64_opcode_lookup@@Base+0x2cdc>
   4598c:	mov	w0, #0x8b8                 	// #2232
   45990:	mov	w1, #0x8b1                 	// #2225
   45994:	csel	w0, w0, w1, eq  // eq = none
   45998:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4599c:	mov	w0, #0x8b5                 	// #2229
   459a0:	mov	w1, #0x848                 	// #2120
   459a4:	csel	w0, w0, w1, eq  // eq = none
   459a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   459ac:	cmp	w1, #0x0
   459b0:	cbnz	w2, 459c4 <aarch64_opcode_lookup@@Base+0x2d04>
   459b4:	mov	w0, #0x905                 	// #2309
   459b8:	mov	w1, #0x85a                 	// #2138
   459bc:	csel	w0, w0, w1, eq  // eq = none
   459c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   459c4:	mov	w0, #0x901                 	// #2305
   459c8:	mov	w1, #0x8cb                 	// #2251
   459cc:	csel	w0, w0, w1, eq  // eq = none
   459d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   459d4:	and	w1, w0, #0x800000
   459d8:	tbnz	w0, #22, 459f0 <aarch64_opcode_lookup@@Base+0x2d30>
   459dc:	cmp	w1, #0x0
   459e0:	mov	w0, #0x6fe                 	// #1790
   459e4:	mov	w1, #0x6f0                 	// #1776
   459e8:	csel	w0, w0, w1, eq  // eq = none
   459ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   459f0:	cmp	w1, #0x0
   459f4:	mov	w0, #0x6a0                 	// #1696
   459f8:	mov	w1, #0x669                 	// #1641
   459fc:	csel	w0, w0, w1, eq  // eq = none
   45a00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45a04:	and	w1, w0, #0x800000
   45a08:	tbnz	w0, #22, 45a50 <aarch64_opcode_lookup@@Base+0x2d90>
   45a0c:	cbnz	w1, 48910 <aarch64_opcode_lookup@@Base+0x5c50>
   45a10:	tbnz	w0, #31, 48918 <aarch64_opcode_lookup@@Base+0x5c58>
   45a14:	and	w1, w0, #0x1000
   45a18:	tbnz	w0, #10, 45a38 <aarch64_opcode_lookup@@Base+0x2d78>
   45a1c:	cbnz	w1, 48920 <aarch64_opcode_lookup@@Base+0x5c60>
   45a20:	tbnz	w0, #16, 48928 <aarch64_opcode_lookup@@Base+0x5c68>
   45a24:	tst	x0, #0x20000
   45a28:	mov	w1, #0x918                 	// #2328
   45a2c:	mov	w0, #0x91a                 	// #2330
   45a30:	csel	w0, w0, w1, eq  // eq = none
   45a34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45a38:	cbnz	w1, 48930 <aarch64_opcode_lookup@@Base+0x5c70>
   45a3c:	tst	x0, #0x20000
   45a40:	mov	w1, #0x917                 	// #2327
   45a44:	mov	w0, #0x919                 	// #2329
   45a48:	csel	w0, w0, w1, eq  // eq = none
   45a4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45a50:	cmp	w1, #0x0
   45a54:	mov	w0, #0x6a1                 	// #1697
   45a58:	mov	w1, #0x66a                 	// #1642
   45a5c:	csel	w0, w0, w1, eq  // eq = none
   45a60:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45a64:	tbnz	w0, #15, 45ecc <aarch64_opcode_lookup@@Base+0x320c>
   45a68:	tbnz	w0, #14, 45c78 <aarch64_opcode_lookup@@Base+0x2fb8>
   45a6c:	tbnz	w0, #13, 45b6c <aarch64_opcode_lookup@@Base+0x2eac>
   45a70:	cbnz	w1, 45b2c <aarch64_opcode_lookup@@Base+0x2e6c>
   45a74:	tbnz	w0, #21, 45aa4 <aarch64_opcode_lookup@@Base+0x2de4>
   45a78:	tbnz	w0, #31, 45a90 <aarch64_opcode_lookup@@Base+0x2dd0>
   45a7c:	tst	x0, #0x10
   45a80:	mov	w1, #0x52d                 	// #1325
   45a84:	mov	w0, #0x52a                 	// #1322
   45a88:	csel	w0, w0, w1, eq  // eq = none
   45a8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45a90:	tst	x0, #0x800000
   45a94:	mov	w1, #0x609                 	// #1545
   45a98:	mov	w0, #0x60d                 	// #1549
   45a9c:	csel	w0, w0, w1, eq  // eq = none
   45aa0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45aa4:	tbnz	w0, #31, 45b20 <aarch64_opcode_lookup@@Base+0x2e60>
   45aa8:	and	w3, w0, #0x400
   45aac:	and	w2, w0, #0x800
   45ab0:	and	w1, w0, #0x1000
   45ab4:	tbnz	w0, #4, 45aec <aarch64_opcode_lookup@@Base+0x2e2c>
   45ab8:	cmp	w1, #0x0
   45abc:	cset	w0, ne  // ne = any
   45ac0:	cbnz	w3, 45ad8 <aarch64_opcode_lookup@@Base+0x2e18>
   45ac4:	cbnz	w2, 45ad0 <aarch64_opcode_lookup@@Base+0x2e10>
   45ac8:	add	w0, w0, #0x90a
   45acc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ad0:	add	w0, w0, #0x910
   45ad4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ad8:	cbnz	w2, 45ae4 <aarch64_opcode_lookup@@Base+0x2e24>
   45adc:	add	w0, w0, #0x7ea
   45ae0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ae4:	add	w0, w0, #0x7e6
   45ae8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45aec:	cmp	w1, #0x0
   45af0:	cset	w0, ne  // ne = any
   45af4:	cbnz	w3, 45b0c <aarch64_opcode_lookup@@Base+0x2e4c>
   45af8:	cbnz	w2, 45b04 <aarch64_opcode_lookup@@Base+0x2e44>
   45afc:	add	w0, w0, #0x90c
   45b00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b04:	add	w0, w0, #0x90e
   45b08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b0c:	cbnz	w2, 45b18 <aarch64_opcode_lookup@@Base+0x2e58>
   45b10:	add	w0, w0, #0x7e4
   45b14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b18:	add	w0, w0, #0x7e8
   45b1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b20:	ubfx	x0, x0, #23, #1
   45b24:	add	w0, w0, #0x961
   45b28:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b2c:	tbnz	w0, #31, 48938 <aarch64_opcode_lookup@@Base+0x5c78>
   45b30:	tbnz	w0, #21, 48940 <aarch64_opcode_lookup@@Base+0x5c80>
   45b34:	and	w1, w0, #0x800
   45b38:	tbnz	w0, #10, 45b54 <aarch64_opcode_lookup@@Base+0x2e94>
   45b3c:	cbz	w1, 48948 <aarch64_opcode_lookup@@Base+0x5c88>
   45b40:	tst	x0, #0x1000
   45b44:	mov	w1, #0x5b4                 	// #1460
   45b48:	mov	w0, #0x5a7                 	// #1447
   45b4c:	csel	w0, w0, w1, eq  // eq = none
   45b50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b54:	cbz	w1, 48950 <aarch64_opcode_lookup@@Base+0x5c90>
   45b58:	tst	x0, #0x1000
   45b5c:	mov	w1, #0x5be                 	// #1470
   45b60:	mov	w0, #0x5c7                 	// #1479
   45b64:	csel	w0, w0, w1, eq  // eq = none
   45b68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b6c:	tbnz	w0, #21, 45c34 <aarch64_opcode_lookup@@Base+0x2f74>
   45b70:	cbnz	w1, 45ba0 <aarch64_opcode_lookup@@Base+0x2ee0>
   45b74:	tbnz	w0, #31, 45b8c <aarch64_opcode_lookup@@Base+0x2ecc>
   45b78:	tst	x0, #0x10
   45b7c:	mov	w1, #0x535                 	// #1333
   45b80:	mov	w0, #0x53b                 	// #1339
   45b84:	csel	w0, w0, w1, eq  // eq = none
   45b88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45b8c:	tst	x0, #0x800000
   45b90:	mov	w1, #0x608                 	// #1544
   45b94:	mov	w0, #0x60c                 	// #1548
   45b98:	csel	w0, w0, w1, eq  // eq = none
   45b9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ba0:	tbnz	w0, #31, 45c1c <aarch64_opcode_lookup@@Base+0x2f5c>
   45ba4:	and	w2, w0, #0x20000
   45ba8:	and	w1, w0, #0x40000
   45bac:	tbnz	w0, #16, 45bec <aarch64_opcode_lookup@@Base+0x2f2c>
   45bb0:	cbnz	w2, 45bd4 <aarch64_opcode_lookup@@Base+0x2f14>
   45bb4:	cbnz	w1, 48958 <aarch64_opcode_lookup@@Base+0x5c98>
   45bb8:	tbnz	w0, #19, 48960 <aarch64_opcode_lookup@@Base+0x5ca0>
   45bbc:	tbz	w0, #20, 48968 <aarch64_opcode_lookup@@Base+0x5ca8>
   45bc0:	tst	x0, #0x10
   45bc4:	mov	w1, #0x571                 	// #1393
   45bc8:	mov	w0, #0x56f                 	// #1391
   45bcc:	csel	w0, w0, w1, eq  // eq = none
   45bd0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45bd4:	cbz	w1, 48970 <aarch64_opcode_lookup@@Base+0x5cb0>
   45bd8:	tst	x0, #0x80000
   45bdc:	mov	w1, #0x5b3                 	// #1459
   45be0:	mov	w0, #0x597                 	// #1431
   45be4:	csel	w0, w0, w1, eq  // eq = none
   45be8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45bec:	cbnz	w2, 45c04 <aarch64_opcode_lookup@@Base+0x2f44>
   45bf0:	cbnz	w1, 48978 <aarch64_opcode_lookup@@Base+0x5cb8>
   45bf4:	tst	x0, #0x10
   45bf8:	cset	w0, eq  // eq = none
   45bfc:	add	w0, w0, #0x573
   45c00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c04:	cbz	w1, 48980 <aarch64_opcode_lookup@@Base+0x5cc0>
   45c08:	tst	x0, #0x80000
   45c0c:	mov	w1, #0x5bd                 	// #1469
   45c10:	mov	w0, #0x59d                 	// #1437
   45c14:	csel	w0, w0, w1, eq  // eq = none
   45c18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c1c:	tbnz	w0, #22, 48988 <aarch64_opcode_lookup@@Base+0x5cc8>
   45c20:	tst	x0, #0x800000
   45c24:	mov	w1, #0x8c1                 	// #2241
   45c28:	mov	w0, #0x8c5                 	// #2245
   45c2c:	csel	w0, w0, w1, eq  // eq = none
   45c30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c34:	cbnz	w1, 48990 <aarch64_opcode_lookup@@Base+0x5cd0>
   45c38:	tbnz	w0, #31, 45c6c <aarch64_opcode_lookup@@Base+0x2fac>
   45c3c:	and	w1, w0, #0x1000
   45c40:	tbnz	w0, #4, 45c58 <aarch64_opcode_lookup@@Base+0x2f98>
   45c44:	cmp	w1, #0x0
   45c48:	mov	w0, #0x54a                 	// #1354
   45c4c:	mov	w1, #0x913                 	// #2323
   45c50:	csel	w0, w0, w1, eq  // eq = none
   45c54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c58:	cmp	w1, #0x0
   45c5c:	mov	w0, #0x54b                 	// #1355
   45c60:	mov	w1, #0x912                 	// #2322
   45c64:	csel	w0, w0, w1, eq  // eq = none
   45c68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c6c:	ubfx	x0, x0, #23, #1
   45c70:	add	w0, w0, #0x965
   45c74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45c78:	cbnz	w1, 45e10 <aarch64_opcode_lookup@@Base+0x3150>
   45c7c:	and	w2, w0, #0x400000
   45c80:	and	w1, w0, #0x800000
   45c84:	tbnz	w0, #21, 45dbc <aarch64_opcode_lookup@@Base+0x30fc>
   45c88:	cbnz	w2, 45d34 <aarch64_opcode_lookup@@Base+0x3074>
   45c8c:	cbnz	w1, 45cec <aarch64_opcode_lookup@@Base+0x302c>
   45c90:	tbnz	w0, #31, 45cd8 <aarch64_opcode_lookup@@Base+0x3018>
   45c94:	tbnz	w0, #9, 45cc4 <aarch64_opcode_lookup@@Base+0x3004>
   45c98:	tbnz	w0, #20, 45cb0 <aarch64_opcode_lookup@@Base+0x2ff0>
   45c9c:	tst	x0, #0x10
   45ca0:	mov	w1, #0x511                 	// #1297
   45ca4:	mov	w0, #0x505                 	// #1285
   45ca8:	csel	w0, w0, w1, eq  // eq = none
   45cac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45cb0:	tst	x0, #0x80000
   45cb4:	mov	w1, #0x517                 	// #1303
   45cb8:	mov	w0, #0x513                 	// #1299
   45cbc:	csel	w0, w0, w1, eq  // eq = none
   45cc0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45cc4:	tst	x0, #0x10
   45cc8:	mov	w1, #0x71d                 	// #1821
   45ccc:	mov	w0, #0x55c                 	// #1372
   45cd0:	csel	w0, w0, w1, eq  // eq = none
   45cd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45cd8:	tst	x0, #0x2000
   45cdc:	mov	w1, #0x687                 	// #1671
   45ce0:	mov	w0, #0x623                 	// #1571
   45ce4:	csel	w0, w0, w1, eq  // eq = none
   45ce8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45cec:	tbnz	w0, #31, 45d20 <aarch64_opcode_lookup@@Base+0x3060>
   45cf0:	tbnz	w0, #9, 45d0c <aarch64_opcode_lookup@@Base+0x304c>
   45cf4:	tbnz	w0, #20, 48998 <aarch64_opcode_lookup@@Base+0x5cd8>
   45cf8:	tst	x0, #0x10
   45cfc:	mov	w1, #0x6d8                 	// #1752
   45d00:	mov	w0, #0x6dd                 	// #1757
   45d04:	csel	w0, w0, w1, eq  // eq = none
   45d08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d0c:	tst	x0, #0x10
   45d10:	mov	w1, #0x6d2                 	// #1746
   45d14:	mov	w0, #0x6d5                 	// #1749
   45d18:	csel	w0, w0, w1, eq  // eq = none
   45d1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d20:	tst	x0, #0x2000
   45d24:	mov	w1, #0x67b                 	// #1659
   45d28:	mov	w0, #0x617                 	// #1559
   45d2c:	csel	w0, w0, w1, eq  // eq = none
   45d30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d34:	cbnz	w1, 45d70 <aarch64_opcode_lookup@@Base+0x30b0>
   45d38:	tbnz	w0, #31, 45d5c <aarch64_opcode_lookup@@Base+0x309c>
   45d3c:	tbnz	w0, #4, 489a0 <aarch64_opcode_lookup@@Base+0x5ce0>
   45d40:	tbnz	w0, #9, 489a8 <aarch64_opcode_lookup@@Base+0x5ce8>
   45d44:	tbz	w0, #20, 489b0 <aarch64_opcode_lookup@@Base+0x5cf0>
   45d48:	tst	x0, #0x80000
   45d4c:	mov	w1, #0x518                 	// #1304
   45d50:	mov	w0, #0x514                 	// #1300
   45d54:	csel	w0, w0, w1, eq  // eq = none
   45d58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d5c:	tst	x0, #0x2000
   45d60:	mov	w1, #0x69a                 	// #1690
   45d64:	mov	w0, #0x636                 	// #1590
   45d68:	csel	w0, w0, w1, eq  // eq = none
   45d6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d70:	tbnz	w0, #31, 45da8 <aarch64_opcode_lookup@@Base+0x30e8>
   45d74:	and	w1, w0, #0x200
   45d78:	tbnz	w0, #4, 45d94 <aarch64_opcode_lookup@@Base+0x30d4>
   45d7c:	cbnz	w1, 489b8 <aarch64_opcode_lookup@@Base+0x5cf8>
   45d80:	tst	x0, #0x100000
   45d84:	mov	w1, #0x516                 	// #1302
   45d88:	mov	w0, #0x6de                 	// #1758
   45d8c:	csel	w0, w0, w1, eq  // eq = none
   45d90:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45d94:	cmp	w1, #0x0
   45d98:	mov	w0, #0x6d9                 	// #1753
   45d9c:	mov	w1, #0x6d3                 	// #1747
   45da0:	csel	w0, w0, w1, eq  // eq = none
   45da4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45da8:	tst	x0, #0x2000
   45dac:	mov	w1, #0x67f                 	// #1663
   45db0:	mov	w0, #0x619                 	// #1561
   45db4:	csel	w0, w0, w1, eq  // eq = none
   45db8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45dbc:	tbnz	w0, #13, 45de8 <aarch64_opcode_lookup@@Base+0x3128>
   45dc0:	cmp	w1, #0x0
   45dc4:	cbnz	w2, 45dd8 <aarch64_opcode_lookup@@Base+0x3118>
   45dc8:	mov	w0, #0x624                 	// #1572
   45dcc:	mov	w1, #0x618                 	// #1560
   45dd0:	csel	w0, w0, w1, eq  // eq = none
   45dd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45dd8:	mov	w0, #0x637                 	// #1591
   45ddc:	mov	w1, #0x5e9                 	// #1513
   45de0:	csel	w0, w0, w1, eq  // eq = none
   45de4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45de8:	cmp	w1, #0x0
   45dec:	cbnz	w2, 45e00 <aarch64_opcode_lookup@@Base+0x3140>
   45df0:	mov	w0, #0x689                 	// #1673
   45df4:	mov	w1, #0x67d                 	// #1661
   45df8:	csel	w0, w0, w1, eq  // eq = none
   45dfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e00:	mov	w0, #0x69c                 	// #1692
   45e04:	mov	w1, #0x665                 	// #1637
   45e08:	csel	w0, w0, w1, eq  // eq = none
   45e0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e10:	tbnz	w0, #13, 45e4c <aarch64_opcode_lookup@@Base+0x318c>
   45e14:	tbnz	w0, #31, 45e30 <aarch64_opcode_lookup@@Base+0x3170>
   45e18:	tbnz	w0, #21, 489c0 <aarch64_opcode_lookup@@Base+0x5d00>
   45e1c:	tst	x0, #0x10
   45e20:	mov	w1, #0x572                 	// #1394
   45e24:	mov	w0, #0x570                 	// #1392
   45e28:	csel	w0, w0, w1, eq  // eq = none
   45e2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e30:	tbz	w0, #22, 489c8 <aarch64_opcode_lookup@@Base+0x5d08>
   45e34:	tbz	w0, #21, 489d0 <aarch64_opcode_lookup@@Base+0x5d10>
   45e38:	tst	x0, #0x800000
   45e3c:	mov	w1, #0x758                 	// #1880
   45e40:	mov	w0, #0x76f                 	// #1903
   45e44:	csel	w0, w0, w1, eq  // eq = none
   45e48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e4c:	tbnz	w0, #21, 45e98 <aarch64_opcode_lookup@@Base+0x31d8>
   45e50:	tbnz	w0, #31, 45e68 <aarch64_opcode_lookup@@Base+0x31a8>
   45e54:	tst	x0, #0x10
   45e58:	mov	w1, #0x576                 	// #1398
   45e5c:	mov	w0, #0x56e                 	// #1390
   45e60:	csel	w0, w0, w1, eq  // eq = none
   45e64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e68:	and	w1, w0, #0x800000
   45e6c:	tbnz	w0, #22, 45e84 <aarch64_opcode_lookup@@Base+0x31c4>
   45e70:	cmp	w1, #0x0
   45e74:	mov	w0, #0x793                 	// #1939
   45e78:	mov	w1, #0x78f                 	// #1935
   45e7c:	csel	w0, w0, w1, eq  // eq = none
   45e80:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e84:	cmp	w1, #0x0
   45e88:	mov	w0, #0x783                 	// #1923
   45e8c:	mov	w1, #0x77f                 	// #1919
   45e90:	csel	w0, w0, w1, eq  // eq = none
   45e94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45e98:	tbz	w0, #31, 489d8 <aarch64_opcode_lookup@@Base+0x5d18>
   45e9c:	and	w1, w0, #0x800000
   45ea0:	tbnz	w0, #22, 45eb8 <aarch64_opcode_lookup@@Base+0x31f8>
   45ea4:	cmp	w1, #0x0
   45ea8:	mov	w0, #0x77b                 	// #1915
   45eac:	mov	w1, #0x777                 	// #1911
   45eb0:	csel	w0, w0, w1, eq  // eq = none
   45eb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45eb8:	cmp	w1, #0x0
   45ebc:	mov	w0, #0x78b                 	// #1931
   45ec0:	mov	w1, #0x787                 	// #1927
   45ec4:	csel	w0, w0, w1, eq  // eq = none
   45ec8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ecc:	tbnz	w0, #21, 46394 <aarch64_opcode_lookup@@Base+0x36d4>
   45ed0:	cbnz	w1, 46014 <aarch64_opcode_lookup@@Base+0x3354>
   45ed4:	tbnz	w0, #14, 45f4c <aarch64_opcode_lookup@@Base+0x328c>
   45ed8:	tbnz	w0, #13, 45ef0 <aarch64_opcode_lookup@@Base+0x3230>
   45edc:	tst	x0, #0x10
   45ee0:	mov	w1, #0x53e                 	// #1342
   45ee4:	mov	w0, #0x527                 	// #1319
   45ee8:	csel	w0, w0, w1, eq  // eq = none
   45eec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45ef0:	and	w2, w0, #0x400000
   45ef4:	and	w1, w0, #0x800000
   45ef8:	tbnz	w0, #20, 45f24 <aarch64_opcode_lookup@@Base+0x3264>
   45efc:	cmp	w1, #0x0
   45f00:	cbnz	w2, 45f14 <aarch64_opcode_lookup@@Base+0x3254>
   45f04:	mov	w0, #0x62a                 	// #1578
   45f08:	mov	w1, #0x61d                 	// #1565
   45f0c:	csel	w0, w0, w1, eq  // eq = none
   45f10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f14:	mov	w0, #0x63d                 	// #1597
   45f18:	mov	w1, #0x61f                 	// #1567
   45f1c:	csel	w0, w0, w1, eq  // eq = none
   45f20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f24:	cmp	w1, #0x0
   45f28:	cbnz	w2, 45f3c <aarch64_opcode_lookup@@Base+0x327c>
   45f2c:	mov	w0, #0x6af                 	// #1711
   45f30:	mov	w1, #0x6ac                 	// #1708
   45f34:	csel	w0, w0, w1, eq  // eq = none
   45f38:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f3c:	mov	w0, #0x6b2                 	// #1714
   45f40:	mov	w1, #0x6ae                 	// #1710
   45f44:	csel	w0, w0, w1, eq  // eq = none
   45f48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f4c:	tbnz	w0, #31, 45fb8 <aarch64_opcode_lookup@@Base+0x32f8>
   45f50:	tbnz	w0, #4, 45fac <aarch64_opcode_lookup@@Base+0x32ec>
   45f54:	tbnz	w0, #20, 45f64 <aarch64_opcode_lookup@@Base+0x32a4>
   45f58:	ubfx	x0, x0, #22, #1
   45f5c:	add	w0, w0, #0x519
   45f60:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f64:	tbnz	w0, #16, 45f94 <aarch64_opcode_lookup@@Base+0x32d4>
   45f68:	tbz	w0, #19, 489e0 <aarch64_opcode_lookup@@Base+0x5d20>
   45f6c:	tbnz	w0, #10, 489e8 <aarch64_opcode_lookup@@Base+0x5d28>
   45f70:	tbnz	w0, #12, 45f88 <aarch64_opcode_lookup@@Base+0x32c8>
   45f74:	tst	x0, #0x2000
   45f78:	mov	w1, #0x700                 	// #1792
   45f7c:	mov	w0, #0x6e1                 	// #1761
   45f80:	csel	w0, w0, w1, eq  // eq = none
   45f84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f88:	ubfx	x0, x0, #22, #1
   45f8c:	add	w0, w0, #0x706
   45f90:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45f94:	tbnz	w0, #10, 489f0 <aarch64_opcode_lookup@@Base+0x5d30>
   45f98:	tst	x0, #0x1000
   45f9c:	mov	w1, #0x705                 	// #1797
   45fa0:	mov	w0, #0x701                 	// #1793
   45fa4:	csel	w0, w0, w1, eq  // eq = none
   45fa8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45fac:	ubfx	x0, x0, #22, #1
   45fb0:	add	w0, w0, #0x51b
   45fb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45fb8:	and	w2, w0, #0x400000
   45fbc:	and	w1, w0, #0x800000
   45fc0:	tbnz	w0, #13, 45fec <aarch64_opcode_lookup@@Base+0x332c>
   45fc4:	cmp	w1, #0x0
   45fc8:	cbnz	w2, 45fdc <aarch64_opcode_lookup@@Base+0x331c>
   45fcc:	mov	w0, #0x6ba                 	// #1722
   45fd0:	mov	w1, #0x6b6                 	// #1718
   45fd4:	csel	w0, w0, w1, eq  // eq = none
   45fd8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45fdc:	mov	w0, #0x64e                 	// #1614
   45fe0:	mov	w1, #0x64a                 	// #1610
   45fe4:	csel	w0, w0, w1, eq  // eq = none
   45fe8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   45fec:	cmp	w1, #0x0
   45ff0:	cbnz	w2, 46004 <aarch64_opcode_lookup@@Base+0x3344>
   45ff4:	mov	w0, #0x6bb                 	// #1723
   45ff8:	mov	w1, #0x6b7                 	// #1719
   45ffc:	csel	w0, w0, w1, eq  // eq = none
   46000:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46004:	mov	w0, #0x64f                 	// #1615
   46008:	mov	w1, #0x64b                 	// #1611
   4600c:	csel	w0, w0, w1, eq  // eq = none
   46010:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46014:	tbnz	w0, #13, 46148 <aarch64_opcode_lookup@@Base+0x3488>
   46018:	tbnz	w0, #31, 46130 <aarch64_opcode_lookup@@Base+0x3470>
   4601c:	tbnz	w0, #14, 4611c <aarch64_opcode_lookup@@Base+0x345c>
   46020:	tbnz	w0, #19, 46084 <aarch64_opcode_lookup@@Base+0x33c4>
   46024:	tbnz	w0, #20, 489f8 <aarch64_opcode_lookup@@Base+0x5d38>
   46028:	and	w2, w0, #0x20000
   4602c:	and	w1, w0, #0x40000
   46030:	tbnz	w0, #16, 4605c <aarch64_opcode_lookup@@Base+0x339c>
   46034:	cmp	w1, #0x0
   46038:	cbnz	w2, 4604c <aarch64_opcode_lookup@@Base+0x338c>
   4603c:	mov	w0, #0x565                 	// #1381
   46040:	mov	w1, #0x594                 	// #1428
   46044:	csel	w0, w0, w1, eq  // eq = none
   46048:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4604c:	mov	w0, #0x5a8                 	// #1448
   46050:	mov	w1, #0x592                 	// #1426
   46054:	csel	w0, w0, w1, eq  // eq = none
   46058:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4605c:	cmp	w1, #0x0
   46060:	cbnz	w2, 46074 <aarch64_opcode_lookup@@Base+0x33b4>
   46064:	mov	w0, #0x5c2                 	// #1474
   46068:	mov	w1, #0x59a                 	// #1434
   4606c:	csel	w0, w0, w1, eq  // eq = none
   46070:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46074:	mov	w0, #0x5c4                 	// #1476
   46078:	mov	w1, #0x598                 	// #1432
   4607c:	csel	w0, w0, w1, eq  // eq = none
   46080:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46084:	and	w2, w0, #0x20000
   46088:	and	w1, w0, #0x40000
   4608c:	tbnz	w0, #16, 460d8 <aarch64_opcode_lookup@@Base+0x3418>
   46090:	cbnz	w2, 460c0 <aarch64_opcode_lookup@@Base+0x3400>
   46094:	and	w0, w0, #0x100000
   46098:	cmp	w0, #0x0
   4609c:	cbnz	w1, 460b0 <aarch64_opcode_lookup@@Base+0x33f0>
   460a0:	mov	w0, #0x560                 	// #1376
   460a4:	mov	w1, #0x566                 	// #1382
   460a8:	csel	w0, w0, w1, eq  // eq = none
   460ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   460b0:	mov	w0, #0x58e                 	// #1422
   460b4:	mov	w1, #0x595                 	// #1429
   460b8:	csel	w0, w0, w1, eq  // eq = none
   460bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   460c0:	cbnz	w1, 48a00 <aarch64_opcode_lookup@@Base+0x5d40>
   460c4:	tst	x0, #0x100000
   460c8:	mov	w1, #0x5a9                 	// #1449
   460cc:	mov	w0, #0x5ad                 	// #1453
   460d0:	csel	w0, w0, w1, eq  // eq = none
   460d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   460d8:	cbnz	w2, 46108 <aarch64_opcode_lookup@@Base+0x3448>
   460dc:	and	w0, w0, #0x100000
   460e0:	cmp	w0, #0x0
   460e4:	cbnz	w1, 460f8 <aarch64_opcode_lookup@@Base+0x3438>
   460e8:	mov	w0, #0x5bf                 	// #1471
   460ec:	mov	w1, #0x5c3                 	// #1475
   460f0:	csel	w0, w0, w1, eq  // eq = none
   460f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   460f8:	mov	w0, #0x58d                 	// #1421
   460fc:	mov	w1, #0x59b                 	// #1435
   46100:	csel	w0, w0, w1, eq  // eq = none
   46104:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46108:	cmp	w1, #0x0
   4610c:	mov	w0, #0x5c5                 	// #1477
   46110:	mov	w1, #0x599                 	// #1433
   46114:	csel	w0, w0, w1, eq  // eq = none
   46118:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4611c:	tst	x0, #0x10
   46120:	mov	w1, #0x562                 	// #1378
   46124:	mov	w0, #0x577                 	// #1399
   46128:	csel	w0, w0, w1, eq  // eq = none
   4612c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46130:	tbnz	w0, #22, 48a08 <aarch64_opcode_lookup@@Base+0x5d48>
   46134:	tst	x0, #0x800000
   46138:	mov	w1, #0x754                 	// #1876
   4613c:	mov	w0, #0x769                 	// #1897
   46140:	csel	w0, w0, w1, eq  // eq = none
   46144:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46148:	tbnz	w0, #14, 4635c <aarch64_opcode_lookup@@Base+0x369c>
   4614c:	tbnz	w0, #31, 4632c <aarch64_opcode_lookup@@Base+0x366c>
   46150:	and	w1, w0, #0x80000
   46154:	tbnz	w0, #16, 46254 <aarch64_opcode_lookup@@Base+0x3594>
   46158:	and	w2, w0, #0x100000
   4615c:	cbnz	w1, 461cc <aarch64_opcode_lookup@@Base+0x350c>
   46160:	and	w1, w0, #0x40000
   46164:	tbnz	w0, #17, 4619c <aarch64_opcode_lookup@@Base+0x34dc>
   46168:	cbnz	w1, 46180 <aarch64_opcode_lookup@@Base+0x34c0>
   4616c:	cmp	w2, #0x0
   46170:	mov	w0, #0x5b9                 	// #1465
   46174:	mov	w1, #0x713                 	// #1811
   46178:	csel	w0, w0, w1, eq  // eq = none
   4617c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46180:	cbz	w2, 48a10 <aarch64_opcode_lookup@@Base+0x5d50>
   46184:	tbz	w0, #22, 48a18 <aarch64_opcode_lookup@@Base+0x5d58>
   46188:	tst	x0, #0x800000
   4618c:	mov	w1, #0x715                 	// #1813
   46190:	mov	w0, #0x711                 	// #1809
   46194:	csel	w0, w0, w1, eq  // eq = none
   46198:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4619c:	cbnz	w1, 461b4 <aarch64_opcode_lookup@@Base+0x34f4>
   461a0:	cmp	w2, #0x0
   461a4:	mov	w0, #0x5b8                 	// #1464
   461a8:	mov	w1, #0x710                 	// #1808
   461ac:	csel	w0, w0, w1, eq  // eq = none
   461b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   461b4:	cbz	w2, 48a20 <aarch64_opcode_lookup@@Base+0x5d60>
   461b8:	tst	x0, #0x800000
   461bc:	mov	w1, #0x716                 	// #1814
   461c0:	mov	w0, #0x714                 	// #1812
   461c4:	csel	w0, w0, w1, eq  // eq = none
   461c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   461cc:	cbnz	w2, 46204 <aarch64_opcode_lookup@@Base+0x3544>
   461d0:	tbnz	w0, #17, 461ec <aarch64_opcode_lookup@@Base+0x352c>
   461d4:	tbnz	w0, #18, 48a28 <aarch64_opcode_lookup@@Base+0x5d68>
   461d8:	tst	x0, #0x400000
   461dc:	mov	w1, #0x57b                 	// #1403
   461e0:	mov	w0, #0x579                 	// #1401
   461e4:	csel	w0, w0, w1, eq  // eq = none
   461e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   461ec:	tbnz	w0, #22, 48a30 <aarch64_opcode_lookup@@Base+0x5d70>
   461f0:	tst	x0, #0x800000
   461f4:	mov	w1, #0x976                 	// #2422
   461f8:	mov	w0, #0x817                 	// #2071
   461fc:	csel	w0, w0, w1, eq  // eq = none
   46200:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46204:	tbnz	w0, #22, 4621c <aarch64_opcode_lookup@@Base+0x355c>
   46208:	tst	x0, #0x800000
   4620c:	mov	w1, #0x582                 	// #1410
   46210:	mov	w0, #0x819                 	// #2073
   46214:	csel	w0, w0, w1, eq  // eq = none
   46218:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4621c:	and	w1, w0, #0x40000
   46220:	tbnz	w0, #17, 4623c <aarch64_opcode_lookup@@Base+0x357c>
   46224:	cbz	w1, 48a38 <aarch64_opcode_lookup@@Base+0x5d78>
   46228:	tst	x0, #0x800000
   4622c:	mov	w1, #0x584                 	// #1412
   46230:	mov	w0, #0x580                 	// #1408
   46234:	csel	w0, w0, w1, eq  // eq = none
   46238:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4623c:	cbz	w1, 48a40 <aarch64_opcode_lookup@@Base+0x5d80>
   46240:	tst	x0, #0x800000
   46244:	mov	w1, #0x585                 	// #1413
   46248:	mov	w0, #0x581                 	// #1409
   4624c:	csel	w0, w0, w1, eq  // eq = none
   46250:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46254:	and	w2, w0, #0x40000
   46258:	tbnz	w0, #17, 462cc <aarch64_opcode_lookup@@Base+0x360c>
   4625c:	cbnz	w2, 46294 <aarch64_opcode_lookup@@Base+0x35d4>
   46260:	and	w2, w0, #0x100000
   46264:	cbnz	w1, 4627c <aarch64_opcode_lookup@@Base+0x35bc>
   46268:	cmp	w2, #0x0
   4626c:	mov	w0, #0x5ba                 	// #1466
   46270:	mov	w1, #0x7ab                 	// #1963
   46274:	csel	w0, w0, w1, eq  // eq = none
   46278:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4627c:	cbnz	w2, 48a48 <aarch64_opcode_lookup@@Base+0x5d88>
   46280:	tst	x0, #0x400000
   46284:	mov	w1, #0x57c                 	// #1404
   46288:	mov	w0, #0x57a                 	// #1402
   4628c:	csel	w0, w0, w1, eq  // eq = none
   46290:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46294:	cbnz	w1, 462b0 <aarch64_opcode_lookup@@Base+0x35f0>
   46298:	tbz	w0, #22, 48a50 <aarch64_opcode_lookup@@Base+0x5d90>
   4629c:	tst	x0, #0x800000
   462a0:	mov	w1, #0x7ad                 	// #1965
   462a4:	mov	w0, #0x7a9                 	// #1961
   462a8:	csel	w0, w0, w1, eq  // eq = none
   462ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   462b0:	tbz	w0, #20, 48a58 <aarch64_opcode_lookup@@Base+0x5d98>
   462b4:	tbz	w0, #22, 48a60 <aarch64_opcode_lookup@@Base+0x5da0>
   462b8:	tst	x0, #0x800000
   462bc:	mov	w1, #0x58b                 	// #1419
   462c0:	mov	w0, #0x587                 	// #1415
   462c4:	csel	w0, w0, w1, eq  // eq = none
   462c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   462cc:	cbnz	w2, 462fc <aarch64_opcode_lookup@@Base+0x363c>
   462d0:	and	w0, w0, #0x100000
   462d4:	cmp	w0, #0x0
   462d8:	cbnz	w1, 462ec <aarch64_opcode_lookup@@Base+0x362c>
   462dc:	mov	w0, #0x5bc                 	// #1468
   462e0:	mov	w1, #0x7a8                 	// #1960
   462e4:	csel	w0, w0, w1, eq  // eq = none
   462e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   462ec:	mov	w0, #0x57e                 	// #1406
   462f0:	mov	w1, #0x586                 	// #1414
   462f4:	csel	w0, w0, w1, eq  // eq = none
   462f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   462fc:	cbnz	w1, 46318 <aarch64_opcode_lookup@@Base+0x3658>
   46300:	tbz	w0, #20, 48a68 <aarch64_opcode_lookup@@Base+0x5da8>
   46304:	tst	x0, #0x800000
   46308:	mov	w1, #0x7ae                 	// #1966
   4630c:	mov	w0, #0x7ac                 	// #1964
   46310:	csel	w0, w0, w1, eq  // eq = none
   46314:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46318:	tst	x0, #0x800000
   4631c:	mov	w1, #0x58c                 	// #1420
   46320:	mov	w0, #0x588                 	// #1416
   46324:	csel	w0, w0, w1, eq  // eq = none
   46328:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4632c:	and	w1, w0, #0x800000
   46330:	tbnz	w0, #22, 46348 <aarch64_opcode_lookup@@Base+0x3688>
   46334:	cmp	w1, #0x0
   46338:	mov	w0, #0x76a                 	// #1898
   4633c:	mov	w1, #0x755                 	// #1877
   46340:	csel	w0, w0, w1, eq  // eq = none
   46344:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46348:	cmp	w1, #0x0
   4634c:	mov	w0, #0x771                 	// #1905
   46350:	mov	w1, #0x759                 	// #1881
   46354:	csel	w0, w0, w1, eq  // eq = none
   46358:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4635c:	tbz	w0, #31, 48a70 <aarch64_opcode_lookup@@Base+0x5db0>
   46360:	tbz	w0, #20, 48a78 <aarch64_opcode_lookup@@Base+0x5db8>
   46364:	and	w1, w0, #0x800000
   46368:	tbnz	w0, #22, 46380 <aarch64_opcode_lookup@@Base+0x36c0>
   4636c:	cmp	w1, #0x0
   46370:	mov	w0, #0x794                 	// #1940
   46374:	mov	w1, #0x790                 	// #1936
   46378:	csel	w0, w0, w1, eq  // eq = none
   4637c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46380:	cmp	w1, #0x0
   46384:	mov	w0, #0x784                 	// #1924
   46388:	mov	w1, #0x780                 	// #1920
   4638c:	csel	w0, w0, w1, eq  // eq = none
   46390:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46394:	cbnz	w1, 465a0 <aarch64_opcode_lookup@@Base+0x38e0>
   46398:	tbnz	w0, #14, 464b0 <aarch64_opcode_lookup@@Base+0x37f0>
   4639c:	tbnz	w0, #20, 46480 <aarch64_opcode_lookup@@Base+0x37c0>
   463a0:	tbnz	w0, #31, 46450 <aarch64_opcode_lookup@@Base+0x3790>
   463a4:	and	w1, w0, #0x20000
   463a8:	tbnz	w0, #16, 46404 <aarch64_opcode_lookup@@Base+0x3744>
   463ac:	cbnz	w1, 463ec <aarch64_opcode_lookup@@Base+0x372c>
   463b0:	tbnz	w0, #18, 463d4 <aarch64_opcode_lookup@@Base+0x3714>
   463b4:	tbz	w0, #19, 48a80 <aarch64_opcode_lookup@@Base+0x5dc0>
   463b8:	tbnz	w0, #10, 48a88 <aarch64_opcode_lookup@@Base+0x5dc8>
   463bc:	tbnz	w0, #11, 48a90 <aarch64_opcode_lookup@@Base+0x5dd0>
   463c0:	tst	x0, #0x1000
   463c4:	mov	w1, #0x7ec                 	// #2028
   463c8:	mov	w0, #0x73f                 	// #1855
   463cc:	csel	w0, w0, w1, eq  // eq = none
   463d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   463d4:	tbnz	w0, #11, 48a98 <aarch64_opcode_lookup@@Base+0x5dd8>
   463d8:	tst	x0, #0x1000
   463dc:	mov	w1, #0x71e                 	// #1822
   463e0:	mov	w0, #0x5ce                 	// #1486
   463e4:	csel	w0, w0, w1, eq  // eq = none
   463e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   463ec:	tbnz	w0, #10, 48aa0 <aarch64_opcode_lookup@@Base+0x5de0>
   463f0:	tst	x0, #0x800
   463f4:	mov	w1, #0x733                 	// #1843
   463f8:	mov	w0, #0x731                 	// #1841
   463fc:	csel	w0, w0, w1, eq  // eq = none
   46400:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46404:	tbnz	w0, #10, 4643c <aarch64_opcode_lookup@@Base+0x377c>
   46408:	tbnz	w0, #11, 46424 <aarch64_opcode_lookup@@Base+0x3764>
   4640c:	cbnz	w1, 48aa8 <aarch64_opcode_lookup@@Base+0x5de8>
   46410:	tst	x0, #0x40000
   46414:	mov	w1, #0x551                 	// #1361
   46418:	mov	w0, #0x7d3                 	// #2003
   4641c:	csel	w0, w0, w1, eq  // eq = none
   46420:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46424:	cbnz	w1, 48ab0 <aarch64_opcode_lookup@@Base+0x5df0>
   46428:	tst	x0, #0x40000
   4642c:	mov	w1, #0x552                 	// #1362
   46430:	mov	w0, #0x7d4                 	// #2004
   46434:	csel	w0, w0, w1, eq  // eq = none
   46438:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4643c:	cmp	w1, #0x0
   46440:	mov	w0, #0x7d5                 	// #2005
   46444:	mov	w1, #0x7c7                 	// #1991
   46448:	csel	w0, w0, w1, eq  // eq = none
   4644c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46450:	and	w1, w0, #0x800000
   46454:	tbnz	w0, #22, 4646c <aarch64_opcode_lookup@@Base+0x37ac>
   46458:	cmp	w1, #0x0
   4645c:	mov	w0, #0x62b                 	// #1579
   46460:	mov	w1, #0x61e                 	// #1566
   46464:	csel	w0, w0, w1, eq  // eq = none
   46468:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4646c:	cmp	w1, #0x0
   46470:	mov	w0, #0x63e                 	// #1598
   46474:	mov	w1, #0x5ee                 	// #1518
   46478:	csel	w0, w0, w1, eq  // eq = none
   4647c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46480:	and	w1, w0, #0x800000
   46484:	tbnz	w0, #22, 4649c <aarch64_opcode_lookup@@Base+0x37dc>
   46488:	cmp	w1, #0x0
   4648c:	mov	w0, #0x6b0                 	// #1712
   46490:	mov	w1, #0x6ad                 	// #1709
   46494:	csel	w0, w0, w1, eq  // eq = none
   46498:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4649c:	cmp	w1, #0x0
   464a0:	mov	w0, #0x6b3                 	// #1715
   464a4:	mov	w1, #0x6a8                 	// #1704
   464a8:	csel	w0, w0, w1, eq  // eq = none
   464ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   464b0:	tbnz	w0, #31, 46544 <aarch64_opcode_lookup@@Base+0x3884>
   464b4:	and	w2, w0, #0x20000
   464b8:	and	w1, w0, #0x40000
   464bc:	tbnz	w0, #16, 4650c <aarch64_opcode_lookup@@Base+0x384c>
   464c0:	cbnz	w2, 464f8 <aarch64_opcode_lookup@@Base+0x3838>
   464c4:	cbnz	w1, 48ab8 <aarch64_opcode_lookup@@Base+0x5df8>
   464c8:	and	w1, w0, #0x100000
   464cc:	tbnz	w0, #19, 464e4 <aarch64_opcode_lookup@@Base+0x3824>
   464d0:	cmp	w1, #0x0
   464d4:	mov	w0, #0x4fb                 	// #1275
   464d8:	mov	w1, #0x6d0                 	// #1744
   464dc:	csel	w0, w0, w1, eq  // eq = none
   464e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   464e4:	cmp	w1, #0x0
   464e8:	mov	w0, #0x71f                 	// #1823
   464ec:	mov	w1, #0x557                 	// #1367
   464f0:	csel	w0, w0, w1, eq  // eq = none
   464f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   464f8:	cmp	w1, #0x0
   464fc:	mov	w0, #0x722                 	// #1826
   46500:	mov	w1, #0x746                 	// #1862
   46504:	csel	w0, w0, w1, eq  // eq = none
   46508:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4650c:	cbnz	w2, 4652c <aarch64_opcode_lookup@@Base+0x386c>
   46510:	cbnz	w1, 48ac0 <aarch64_opcode_lookup@@Base+0x5e00>
   46514:	tbz	w0, #19, 48ac8 <aarch64_opcode_lookup@@Base+0x5e08>
   46518:	tst	x0, #0x100000
   4651c:	mov	w1, #0x58f                 	// #1423
   46520:	mov	w0, #0x7b4                 	// #1972
   46524:	csel	w0, w0, w1, eq  // eq = none
   46528:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4652c:	cbnz	w1, 48ad0 <aarch64_opcode_lookup@@Base+0x5e10>
   46530:	tst	x0, #0x80000
   46534:	mov	w1, #0x7b7                 	// #1975
   46538:	mov	w0, #0x79a                 	// #1946
   4653c:	csel	w0, w0, w1, eq  // eq = none
   46540:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46544:	and	w2, w0, #0x400000
   46548:	and	w1, w0, #0x800000
   4654c:	tbnz	w0, #13, 46578 <aarch64_opcode_lookup@@Base+0x38b8>
   46550:	cmp	w1, #0x0
   46554:	cbnz	w2, 46568 <aarch64_opcode_lookup@@Base+0x38a8>
   46558:	mov	w0, #0x646                 	// #1606
   4655c:	mov	w1, #0x642                 	// #1602
   46560:	csel	w0, w0, w1, eq  // eq = none
   46564:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46568:	mov	w0, #0x656                 	// #1622
   4656c:	mov	w1, #0x652                 	// #1618
   46570:	csel	w0, w0, w1, eq  // eq = none
   46574:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46578:	cmp	w1, #0x0
   4657c:	cbnz	w2, 46590 <aarch64_opcode_lookup@@Base+0x38d0>
   46580:	mov	w0, #0x647                 	// #1607
   46584:	mov	w1, #0x643                 	// #1603
   46588:	csel	w0, w0, w1, eq  // eq = none
   4658c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46590:	mov	w0, #0x657                 	// #1623
   46594:	mov	w1, #0x653                 	// #1619
   46598:	csel	w0, w0, w1, eq  // eq = none
   4659c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   465a0:	tbnz	w0, #13, 465d4 <aarch64_opcode_lookup@@Base+0x3914>
   465a4:	tbnz	w0, #31, 465bc <aarch64_opcode_lookup@@Base+0x38fc>
   465a8:	tst	x0, #0x4000
   465ac:	mov	w1, #0x5af                 	// #1455
   465b0:	mov	w0, #0x591                 	// #1425
   465b4:	csel	w0, w0, w1, eq  // eq = none
   465b8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   465bc:	tbnz	w0, #22, 48ad8 <aarch64_opcode_lookup@@Base+0x5e18>
   465c0:	tst	x0, #0x800000
   465c4:	mov	w1, #0x756                 	// #1878
   465c8:	mov	w0, #0x76b                 	// #1899
   465cc:	csel	w0, w0, w1, eq  // eq = none
   465d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   465d4:	tbnz	w0, #14, 465f4 <aarch64_opcode_lookup@@Base+0x3934>
   465d8:	tbz	w0, #31, 48ae0 <aarch64_opcode_lookup@@Base+0x5e20>
   465dc:	tbnz	w0, #22, 48ae8 <aarch64_opcode_lookup@@Base+0x5e28>
   465e0:	tst	x0, #0x800000
   465e4:	mov	w1, #0x757                 	// #1879
   465e8:	mov	w0, #0x76c                 	// #1900
   465ec:	csel	w0, w0, w1, eq  // eq = none
   465f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   465f4:	tbz	w0, #31, 48af0 <aarch64_opcode_lookup@@Base+0x5e30>
   465f8:	and	w1, w0, #0x800000
   465fc:	tbnz	w0, #20, 46614 <aarch64_opcode_lookup@@Base+0x3954>
   46600:	cmp	w1, #0x0
   46604:	mov	w0, #0x774                 	// #1908
   46608:	mov	w1, #0x75a                 	// #1882
   4660c:	csel	w0, w0, w1, eq  // eq = none
   46610:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46614:	tbnz	w0, #22, 4662c <aarch64_opcode_lookup@@Base+0x396c>
   46618:	cmp	w1, #0x0
   4661c:	mov	w0, #0x77c                 	// #1916
   46620:	mov	w1, #0x778                 	// #1912
   46624:	csel	w0, w0, w1, eq  // eq = none
   46628:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4662c:	cmp	w1, #0x0
   46630:	mov	w0, #0x78c                 	// #1932
   46634:	mov	w1, #0x788                 	// #1928
   46638:	csel	w0, w0, w1, eq  // eq = none
   4663c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46640:	cbnz	w3, 46760 <aarch64_opcode_lookup@@Base+0x3aa0>
   46644:	tbnz	w0, #30, 46654 <aarch64_opcode_lookup@@Base+0x3994>
   46648:	lsr	w0, w0, #31
   4664c:	add	w0, w0, #0x27c
   46650:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46654:	tbnz	w0, #24, 46738 <aarch64_opcode_lookup@@Base+0x3a78>
   46658:	tbnz	w0, #4, 466f8 <aarch64_opcode_lookup@@Base+0x3a38>
   4665c:	tbnz	w0, #25, 466c8 <aarch64_opcode_lookup@@Base+0x3a08>
   46660:	tbz	w0, #31, 48af8 <aarch64_opcode_lookup@@Base+0x5e38>
   46664:	and	w1, w0, #0x200000
   46668:	and	w2, w0, #0x2
   4666c:	tbnz	w0, #0, 466a0 <aarch64_opcode_lookup@@Base+0x39e0>
   46670:	cbnz	w2, 4668c <aarch64_opcode_lookup@@Base+0x39cc>
   46674:	cbz	w1, 48b00 <aarch64_opcode_lookup@@Base+0x5e40>
   46678:	tst	x0, #0x400000
   4667c:	mov	w1, #0x4a7                 	// #1191
   46680:	mov	w0, #0x2f0                 	// #752
   46684:	csel	w0, w0, w1, eq  // eq = none
   46688:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4668c:	cmp	w1, #0x0
   46690:	mov	w0, #0x2ee                 	// #750
   46694:	mov	w1, #0x2f3                 	// #755
   46698:	csel	w0, w0, w1, eq  // eq = none
   4669c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   466a0:	cmp	w1, #0x0
   466a4:	cbnz	w2, 466b8 <aarch64_opcode_lookup@@Base+0x39f8>
   466a8:	mov	w0, #0x2ed                 	// #749
   466ac:	mov	w1, #0x2f2                 	// #754
   466b0:	csel	w0, w0, w1, eq  // eq = none
   466b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   466b8:	mov	w0, #0x2ef                 	// #751
   466bc:	mov	w1, #0x2f4                 	// #756
   466c0:	csel	w0, w0, w1, eq  // eq = none
   466c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   466c8:	tbnz	w0, #21, 466e4 <aarch64_opcode_lookup@@Base+0x3a24>
   466cc:	tbnz	w0, #22, 48b08 <aarch64_opcode_lookup@@Base+0x5e48>
   466d0:	tst	x0, #0x800000
   466d4:	mov	w1, #0x281                 	// #641
   466d8:	mov	w0, #0x27e                 	// #638
   466dc:	csel	w0, w0, w1, eq  // eq = none
   466e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   466e4:	tst	x0, #0x800000
   466e8:	mov	w1, #0x282                 	// #642
   466ec:	mov	w0, #0x27f                 	// #639
   466f0:	csel	w0, w0, w1, eq  // eq = none
   466f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   466f8:	and	w1, w0, #0x200000
   466fc:	tbnz	w0, #10, 4671c <aarch64_opcode_lookup@@Base+0x3a5c>
   46700:	cbnz	w1, 48b10 <aarch64_opcode_lookup@@Base+0x5e50>
   46704:	tbnz	w0, #22, 48b18 <aarch64_opcode_lookup@@Base+0x5e58>
   46708:	tst	x0, #0x800000
   4670c:	mov	w1, #0x28d                 	// #653
   46710:	mov	w0, #0x287                 	// #647
   46714:	csel	w0, w0, w1, eq  // eq = none
   46718:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4671c:	cbnz	w1, 48b20 <aarch64_opcode_lookup@@Base+0x5e60>
   46720:	tbnz	w0, #22, 48b28 <aarch64_opcode_lookup@@Base+0x5e68>
   46724:	tst	x0, #0x800000
   46728:	mov	w1, #0x28e                 	// #654
   4672c:	mov	w0, #0x288                 	// #648
   46730:	csel	w0, w0, w1, eq  // eq = none
   46734:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46738:	and	w1, w0, #0x2000000
   4673c:	tbnz	w0, #21, 46750 <aarch64_opcode_lookup@@Base+0x3a90>
   46740:	cbz	w1, 48b30 <aarch64_opcode_lookup@@Base+0x5e70>
   46744:	ubfx	x0, x0, #10, #1
   46748:	add	w0, w0, #0x283
   4674c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46750:	cbz	w1, 48b38 <aarch64_opcode_lookup@@Base+0x5e78>
   46754:	ubfx	x0, x0, #10, #1
   46758:	add	w0, w0, #0x285
   4675c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46760:	and	w1, w0, #0x2000000
   46764:	tbnz	w0, #24, 4677c <aarch64_opcode_lookup@@Base+0x3abc>
   46768:	cmp	w1, #0x0
   4676c:	mov	w0, #0x28f                 	// #655
   46770:	mov	w1, #0x4d4                 	// #1236
   46774:	csel	w0, w0, w1, eq  // eq = none
   46778:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4677c:	cmp	w1, #0x0
   46780:	mov	w0, #0x290                 	// #656
   46784:	mov	w1, #0x4d5                 	// #1237
   46788:	csel	w0, w0, w1, eq  // eq = none
   4678c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46790:	tbnz	w0, #25, 468dc <aarch64_opcode_lookup@@Base+0x3c1c>
   46794:	cbnz	w2, 4688c <aarch64_opcode_lookup@@Base+0x3bcc>
   46798:	and	w1, w0, #0x20000000
   4679c:	and	w2, w0, #0x800000
   467a0:	tbnz	w0, #22, 46818 <aarch64_opcode_lookup@@Base+0x3b58>
   467a4:	cbnz	w2, 467f4 <aarch64_opcode_lookup@@Base+0x3b34>
   467a8:	tbnz	w0, #24, 467c0 <aarch64_opcode_lookup@@Base+0x3b00>
   467ac:	cmp	w1, #0x0
   467b0:	mov	w0, #0x1b8                 	// #440
   467b4:	mov	w1, #0x3cc                 	// #972
   467b8:	csel	w0, w0, w1, eq  // eq = none
   467bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   467c0:	cbnz	w1, 48b40 <aarch64_opcode_lookup@@Base+0x5e80>
   467c4:	and	w1, w0, #0x200000
   467c8:	tbnz	w0, #13, 467e0 <aarch64_opcode_lookup@@Base+0x3b20>
   467cc:	cmp	w1, #0x0
   467d0:	mov	w0, #0x1c8                 	// #456
   467d4:	mov	w1, #0x1ca                 	// #458
   467d8:	csel	w0, w0, w1, eq  // eq = none
   467dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   467e0:	cmp	w1, #0x0
   467e4:	mov	w0, #0x1c9                 	// #457
   467e8:	mov	w1, #0x1cb                 	// #459
   467ec:	csel	w0, w0, w1, eq  // eq = none
   467f0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   467f4:	cbnz	w1, 48b48 <aarch64_opcode_lookup@@Base+0x5e88>
   467f8:	tbnz	w0, #21, 4680c <aarch64_opcode_lookup@@Base+0x3b4c>
   467fc:	tbz	w0, #24, 48b50 <aarch64_opcode_lookup@@Base+0x5e90>
   46800:	ubfx	x0, x0, #13, #1
   46804:	add	w0, w0, #0x1d4
   46808:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4680c:	ubfx	x0, x0, #13, #1
   46810:	add	w0, w0, #0x1d6
   46814:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46818:	cbnz	w2, 46868 <aarch64_opcode_lookup@@Base+0x3ba8>
   4681c:	tbnz	w0, #24, 46834 <aarch64_opcode_lookup@@Base+0x3b74>
   46820:	cmp	w1, #0x0
   46824:	mov	w0, #0x1bc                 	// #444
   46828:	mov	w1, #0x3cd                 	// #973
   4682c:	csel	w0, w0, w1, eq  // eq = none
   46830:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46834:	cbnz	w1, 48b58 <aarch64_opcode_lookup@@Base+0x5e98>
   46838:	and	w1, w0, #0x200000
   4683c:	tbnz	w0, #13, 46854 <aarch64_opcode_lookup@@Base+0x3b94>
   46840:	cmp	w1, #0x0
   46844:	mov	w0, #0x1cc                 	// #460
   46848:	mov	w1, #0x1d0                 	// #464
   4684c:	csel	w0, w0, w1, eq  // eq = none
   46850:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46854:	cmp	w1, #0x0
   46858:	mov	w0, #0x1cd                 	// #461
   4685c:	mov	w1, #0x1d1                 	// #465
   46860:	csel	w0, w0, w1, eq  // eq = none
   46864:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46868:	cbnz	w1, 48b60 <aarch64_opcode_lookup@@Base+0x5ea0>
   4686c:	tbnz	w0, #21, 46880 <aarch64_opcode_lookup@@Base+0x3bc0>
   46870:	tbz	w0, #24, 48b68 <aarch64_opcode_lookup@@Base+0x5ea8>
   46874:	ubfx	x0, x0, #13, #1
   46878:	add	w0, w0, #0x1d8
   4687c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46880:	ubfx	x0, x0, #13, #1
   46884:	add	w0, w0, #0x1dc
   46888:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4688c:	tbnz	w0, #24, 468d0 <aarch64_opcode_lookup@@Base+0x3c10>
   46890:	tbz	w0, #29, 48b70 <aarch64_opcode_lookup@@Base+0x5eb0>
   46894:	and	w1, w0, #0x400000
   46898:	tbnz	w0, #10, 468c0 <aarch64_opcode_lookup@@Base+0x3c00>
   4689c:	tbnz	w0, #11, 468b0 <aarch64_opcode_lookup@@Base+0x3bf0>
   468a0:	cmp	w1, #0x0
   468a4:	cset	w0, ne  // ne = any
   468a8:	add	w0, w0, #0x39c
   468ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   468b0:	cmp	w1, #0x0
   468b4:	cset	w0, ne  // ne = any
   468b8:	add	w0, w0, #0x387
   468bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   468c0:	cmp	w1, #0x0
   468c4:	cset	w0, ne  // ne = any
   468c8:	add	w0, w0, #0x368
   468cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   468d0:	ubfx	x0, x0, #22, #1
   468d4:	add	w0, w0, #0x37b
   468d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   468dc:	tbnz	w0, #24, 47db8 <aarch64_opcode_lookup@@Base+0x50f8>
   468e0:	tbnz	w0, #21, 46c5c <aarch64_opcode_lookup@@Base+0x3f9c>
   468e4:	and	w1, w0, #0x20000000
   468e8:	cbnz	w2, 46b6c <aarch64_opcode_lookup@@Base+0x3eac>
   468ec:	cbnz	w1, 46a84 <aarch64_opcode_lookup@@Base+0x3dc4>
   468f0:	tbnz	w0, #31, 46a30 <aarch64_opcode_lookup@@Base+0x3d70>
   468f4:	and	w3, w0, #0x800
   468f8:	and	w2, w0, #0x1000
   468fc:	tbnz	w0, #10, 4695c <aarch64_opcode_lookup@@Base+0x3c9c>
   46900:	cbnz	w3, 46914 <aarch64_opcode_lookup@@Base+0x3c54>
   46904:	cmp	w2, #0x0
   46908:	cset	w0, ne  // ne = any
   4690c:	add	w0, w0, #0x1a4
   46910:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46914:	and	w1, w0, #0x4000
   46918:	cbnz	w2, 46930 <aarch64_opcode_lookup@@Base+0x3c70>
   4691c:	cmp	w1, #0x0
   46920:	mov	w0, #0x107                 	// #263
   46924:	mov	w1, #0x10a                 	// #266
   46928:	csel	w0, w0, w1, eq  // eq = none
   4692c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46930:	tbnz	w0, #13, 46948 <aarch64_opcode_lookup@@Base+0x3c88>
   46934:	cmp	w1, #0x0
   46938:	mov	w0, #0x106                 	// #262
   4693c:	mov	w1, #0x109                 	// #265
   46940:	csel	w0, w0, w1, eq  // eq = none
   46944:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46948:	cmp	w1, #0x0
   4694c:	mov	w0, #0x108                 	// #264
   46950:	mov	w1, #0x10b                 	// #267
   46954:	csel	w0, w0, w1, eq  // eq = none
   46958:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4695c:	and	w1, w0, #0x2000
   46960:	cbnz	w3, 469c8 <aarch64_opcode_lookup@@Base+0x3d08>
   46964:	cbnz	w2, 46998 <aarch64_opcode_lookup@@Base+0x3cd8>
   46968:	cbnz	w1, 46984 <aarch64_opcode_lookup@@Base+0x3cc4>
   4696c:	tbz	w0, #22, 48b78 <aarch64_opcode_lookup@@Base+0x5eb8>
   46970:	tst	x0, #0x800000
   46974:	mov	w1, #0x134                 	// #308
   46978:	mov	w0, #0x124                 	// #292
   4697c:	csel	w0, w0, w1, eq  // eq = none
   46980:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46984:	tst	x0, #0x8000
   46988:	mov	w1, #0x96d                 	// #2413
   4698c:	mov	w0, #0x12c                 	// #300
   46990:	csel	w0, w0, w1, eq  // eq = none
   46994:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46998:	cbnz	w1, 469b4 <aarch64_opcode_lookup@@Base+0x3cf4>
   4699c:	tbnz	w0, #15, 48b80 <aarch64_opcode_lookup@@Base+0x5ec0>
   469a0:	tst	x0, #0x800000
   469a4:	mov	w1, #0x138                 	// #312
   469a8:	mov	w0, #0x128                 	// #296
   469ac:	csel	w0, w0, w1, eq  // eq = none
   469b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   469b4:	tst	x0, #0x800000
   469b8:	mov	w1, #0x13a                 	// #314
   469bc:	mov	w0, #0x12e                 	// #302
   469c0:	csel	w0, w0, w1, eq  // eq = none
   469c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   469c8:	cbnz	w2, 469fc <aarch64_opcode_lookup@@Base+0x3d3c>
   469cc:	cbnz	w1, 469e8 <aarch64_opcode_lookup@@Base+0x3d28>
   469d0:	tbz	w0, #22, 48b88 <aarch64_opcode_lookup@@Base+0x5ec8>
   469d4:	tst	x0, #0x800000
   469d8:	mov	w1, #0x136                 	// #310
   469dc:	mov	w0, #0x126                 	// #294
   469e0:	csel	w0, w0, w1, eq  // eq = none
   469e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   469e8:	tst	x0, #0x8000
   469ec:	mov	w1, #0x96f                 	// #2415
   469f0:	mov	w0, #0x97                  	// #151
   469f4:	csel	w0, w0, w1, eq  // eq = none
   469f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   469fc:	cbnz	w1, 46a18 <aarch64_opcode_lookup@@Base+0x3d58>
   46a00:	tbnz	w0, #15, 48b90 <aarch64_opcode_lookup@@Base+0x5ed0>
   46a04:	tst	x0, #0x400000
   46a08:	mov	w1, #0x12a                 	// #298
   46a0c:	mov	w0, #0x9a                  	// #154
   46a10:	csel	w0, w0, w1, eq  // eq = none
   46a14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46a18:	tbz	w0, #22, 48b98 <aarch64_opcode_lookup@@Base+0x5ed8>
   46a1c:	tst	x0, #0x800000
   46a20:	mov	w1, #0x13c                 	// #316
   46a24:	mov	w0, #0x130                 	// #304
   46a28:	csel	w0, w0, w1, eq  // eq = none
   46a2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46a30:	tbnz	w0, #22, 46a48 <aarch64_opcode_lookup@@Base+0x3d88>
   46a34:	tst	x0, #0x800000
   46a38:	mov	w1, #0x92b                 	// #2347
   46a3c:	mov	w0, #0x929                 	// #2345
   46a40:	csel	w0, w0, w1, eq  // eq = none
   46a44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46a48:	tbz	w0, #15, 48ba0 <aarch64_opcode_lookup@@Base+0x5ee0>
   46a4c:	and	w1, w0, #0x800
   46a50:	tbnz	w0, #10, 46a6c <aarch64_opcode_lookup@@Base+0x3dac>
   46a54:	cbnz	w1, 48ba8 <aarch64_opcode_lookup@@Base+0x5ee8>
   46a58:	tst	x0, #0x800000
   46a5c:	mov	w1, #0x927                 	// #2343
   46a60:	mov	w0, #0x92e                 	// #2350
   46a64:	csel	w0, w0, w1, eq  // eq = none
   46a68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46a6c:	cbnz	w1, 48bb0 <aarch64_opcode_lookup@@Base+0x5ef0>
   46a70:	tst	x0, #0x800000
   46a74:	mov	w1, #0x934                 	// #2356
   46a78:	mov	w0, #0x92f                 	// #2351
   46a7c:	csel	w0, w0, w1, eq  // eq = none
   46a80:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46a84:	tbz	w0, #10, 48bb8 <aarch64_opcode_lookup@@Base+0x5ef8>
   46a88:	tbnz	w0, #15, 46b1c <aarch64_opcode_lookup@@Base+0x3e5c>
   46a8c:	tbz	w0, #22, 48bc0 <aarch64_opcode_lookup@@Base+0x5f00>
   46a90:	and	w2, w0, #0x1000
   46a94:	tbnz	w0, #11, 46af0 <aarch64_opcode_lookup@@Base+0x3e30>
   46a98:	and	w1, w0, #0x800000
   46a9c:	and	w0, w0, #0x2000
   46aa0:	cmp	w1, #0x0
   46aa4:	cbnz	w2, 46acc <aarch64_opcode_lookup@@Base+0x3e0c>
   46aa8:	cbnz	w0, 46abc <aarch64_opcode_lookup@@Base+0x3dfc>
   46aac:	mov	w0, #0x157                 	// #343
   46ab0:	mov	w1, #0x167                 	// #359
   46ab4:	csel	w0, w0, w1, eq  // eq = none
   46ab8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46abc:	mov	w0, #0x15d                 	// #349
   46ac0:	mov	w1, #0x16b                 	// #363
   46ac4:	csel	w0, w0, w1, eq  // eq = none
   46ac8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46acc:	cbnz	w0, 46ae0 <aarch64_opcode_lookup@@Base+0x3e20>
   46ad0:	mov	w0, #0x159                 	// #345
   46ad4:	mov	w1, #0x169                 	// #361
   46ad8:	csel	w0, w0, w1, eq  // eq = none
   46adc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ae0:	mov	w0, #0x161                 	// #353
   46ae4:	mov	w1, #0x16f                 	// #367
   46ae8:	csel	w0, w0, w1, eq  // eq = none
   46aec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46af0:	cbnz	w2, 46b08 <aarch64_opcode_lookup@@Base+0x3e48>
   46af4:	tst	x0, #0x800000
   46af8:	mov	w1, #0x16d                 	// #365
   46afc:	mov	w0, #0x15f                 	// #351
   46b00:	csel	w0, w0, w1, eq  // eq = none
   46b04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b08:	tst	x0, #0x2000
   46b0c:	mov	w1, #0x163                 	// #355
   46b10:	mov	w0, #0x15b                 	// #347
   46b14:	csel	w0, w0, w1, eq  // eq = none
   46b18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b1c:	tbnz	w0, #13, 46b3c <aarch64_opcode_lookup@@Base+0x3e7c>
   46b20:	tbnz	w0, #14, 48bc8 <aarch64_opcode_lookup@@Base+0x5f08>
   46b24:	tbnz	w0, #11, 48bd0 <aarch64_opcode_lookup@@Base+0x5f10>
   46b28:	tst	x0, #0x1000
   46b2c:	mov	w1, #0x921                 	// #2337
   46b30:	mov	w0, #0x172                 	// #370
   46b34:	csel	w0, w0, w1, eq  // eq = none
   46b38:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b3c:	tbnz	w0, #11, 46b54 <aarch64_opcode_lookup@@Base+0x3e94>
   46b40:	tst	x0, #0x4000
   46b44:	mov	w1, #0x175                 	// #373
   46b48:	mov	w0, #0x96e                 	// #2414
   46b4c:	csel	w0, w0, w1, eq  // eq = none
   46b50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b54:	tbz	w0, #12, 48bd8 <aarch64_opcode_lookup@@Base+0x5f18>
   46b58:	tbz	w0, #23, 48be0 <aarch64_opcode_lookup@@Base+0x5f20>
   46b5c:	tst	x0, #0x40000000
   46b60:	cset	w0, eq  // eq = none
   46b64:	add	w0, w0, #0x982
   46b68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b6c:	cbnz	w1, 46c24 <aarch64_opcode_lookup@@Base+0x3f64>
   46b70:	tbnz	w0, #30, 46ba4 <aarch64_opcode_lookup@@Base+0x3ee4>
   46b74:	and	w1, w0, #0x20000
   46b78:	tbnz	w0, #16, 46b90 <aarch64_opcode_lookup@@Base+0x3ed0>
   46b7c:	cmp	w1, #0x0
   46b80:	mov	w0, #0x2fb                 	// #763
   46b84:	mov	w1, #0x2f7                 	// #759
   46b88:	csel	w0, w0, w1, eq  // eq = none
   46b8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46b90:	cmp	w1, #0x0
   46b94:	mov	w0, #0x2fd                 	// #765
   46b98:	mov	w1, #0x2f9                 	// #761
   46b9c:	csel	w0, w0, w1, eq  // eq = none
   46ba0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ba4:	and	w1, w0, #0x2000
   46ba8:	tbnz	w0, #10, 46bf4 <aarch64_opcode_lookup@@Base+0x3f34>
   46bac:	tbnz	w0, #12, 46bdc <aarch64_opcode_lookup@@Base+0x3f1c>
   46bb0:	and	w0, w0, #0x4000
   46bb4:	cmp	w0, #0x0
   46bb8:	cbnz	w1, 46bcc <aarch64_opcode_lookup@@Base+0x3f0c>
   46bbc:	mov	w0, #0x2a6                 	// #678
   46bc0:	mov	w1, #0x2aa                 	// #682
   46bc4:	csel	w0, w0, w1, eq  // eq = none
   46bc8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46bcc:	mov	w0, #0x2a8                 	// #680
   46bd0:	mov	w1, #0x2ac                 	// #684
   46bd4:	csel	w0, w0, w1, eq  // eq = none
   46bd8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46bdc:	cbnz	w1, 48be8 <aarch64_opcode_lookup@@Base+0x5f28>
   46be0:	tst	x0, #0x4000
   46be4:	mov	w1, #0x2ab                 	// #683
   46be8:	mov	w0, #0x2a7                 	// #679
   46bec:	csel	w0, w0, w1, eq  // eq = none
   46bf0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46bf4:	tbnz	w0, #11, 46c0c <aarch64_opcode_lookup@@Base+0x3f4c>
   46bf8:	cmp	w1, #0x0
   46bfc:	mov	w0, #0x217                 	// #535
   46c00:	mov	w1, #0x22c                 	// #556
   46c04:	csel	w0, w0, w1, eq  // eq = none
   46c08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46c0c:	cbz	w1, 48bf0 <aarch64_opcode_lookup@@Base+0x5f30>
   46c10:	tst	x0, #0x800000
   46c14:	mov	w1, #0x230                 	// #560
   46c18:	mov	w0, #0x22e                 	// #558
   46c1c:	csel	w0, w0, w1, eq  // eq = none
   46c20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46c24:	tbnz	w0, #11, 46c44 <aarch64_opcode_lookup@@Base+0x3f84>
   46c28:	tbnz	w0, #12, 48bf8 <aarch64_opcode_lookup@@Base+0x5f38>
   46c2c:	tbz	w0, #13, 48c00 <aarch64_opcode_lookup@@Base+0x5f40>
   46c30:	tst	x0, #0x800000
   46c34:	mov	w1, #0x243                 	// #579
   46c38:	mov	w0, #0x23d                 	// #573
   46c3c:	csel	w0, w0, w1, eq  // eq = none
   46c40:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46c44:	tbz	w0, #13, 48c08 <aarch64_opcode_lookup@@Base+0x5f48>
   46c48:	tst	x0, #0x800000
   46c4c:	mov	w1, #0x245                 	// #581
   46c50:	mov	w0, #0x23f                 	// #575
   46c54:	csel	w0, w0, w1, eq  // eq = none
   46c58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46c5c:	cbnz	w2, 47748 <aarch64_opcode_lookup@@Base+0x4a88>
   46c60:	tbnz	w0, #15, 4708c <aarch64_opcode_lookup@@Base+0x43cc>
   46c64:	tbnz	w0, #29, 46e98 <aarch64_opcode_lookup@@Base+0x41d8>
   46c68:	tbnz	w0, #31, 48c10 <aarch64_opcode_lookup@@Base+0x5f50>
   46c6c:	and	w4, w0, #0x800
   46c70:	and	w3, w0, #0x1000
   46c74:	and	w2, w0, #0x2000
   46c78:	and	w1, w0, #0x4000
   46c7c:	tbnz	w0, #10, 46dcc <aarch64_opcode_lookup@@Base+0x410c>
   46c80:	cbnz	w4, 46cec <aarch64_opcode_lookup@@Base+0x402c>
   46c84:	and	w0, w0, #0x40000000
   46c88:	cmp	w0, #0x0
   46c8c:	cset	w0, ne  // ne = any
   46c90:	cbnz	w3, 46cc0 <aarch64_opcode_lookup@@Base+0x4000>
   46c94:	cbnz	w2, 46cac <aarch64_opcode_lookup@@Base+0x3fec>
   46c98:	cbnz	w1, 46ca4 <aarch64_opcode_lookup@@Base+0x3fe4>
   46c9c:	add	w0, w0, #0x2c
   46ca0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ca4:	add	w0, w0, #0x34
   46ca8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cac:	cbnz	w1, 46cb8 <aarch64_opcode_lookup@@Base+0x3ff8>
   46cb0:	add	w0, w0, #0x30
   46cb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cb8:	add	w0, w0, #0x38
   46cbc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cc0:	cbnz	w2, 46cd8 <aarch64_opcode_lookup@@Base+0x4018>
   46cc4:	cbnz	w1, 46cd0 <aarch64_opcode_lookup@@Base+0x4010>
   46cc8:	add	w0, w0, #0x2e
   46ccc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cd0:	add	w0, w0, #0x36
   46cd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cd8:	cbnz	w1, 46ce4 <aarch64_opcode_lookup@@Base+0x4024>
   46cdc:	add	w0, w0, #0x32
   46ce0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ce4:	add	w0, w0, #0x3a
   46ce8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46cec:	cbnz	w3, 46d74 <aarch64_opcode_lookup@@Base+0x40b4>
   46cf0:	cbnz	w2, 46d1c <aarch64_opcode_lookup@@Base+0x405c>
   46cf4:	cbz	w1, 48c18 <aarch64_opcode_lookup@@Base+0x5f58>
   46cf8:	tbnz	w0, #16, 46d10 <aarch64_opcode_lookup@@Base+0x4050>
   46cfc:	tst	x0, #0x80000
   46d00:	mov	w1, #0x29f                 	// #671
   46d04:	mov	w0, #0xa6                  	// #166
   46d08:	csel	w0, w0, w1, eq  // eq = none
   46d0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d10:	ubfx	x0, x0, #30, #1
   46d14:	add	w0, w0, #0xb0
   46d18:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d1c:	and	w2, w0, #0x10000
   46d20:	cbnz	w1, 46d34 <aarch64_opcode_lookup@@Base+0x4074>
   46d24:	cbz	w2, 48c20 <aarch64_opcode_lookup@@Base+0x5f60>
   46d28:	ubfx	x0, x0, #30, #1
   46d2c:	add	w0, w0, #0xae
   46d30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d34:	cbnz	w2, 46d4c <aarch64_opcode_lookup@@Base+0x408c>
   46d38:	tst	x0, #0x80000
   46d3c:	mov	w1, #0x2a1                 	// #673
   46d40:	mov	w0, #0xa8                  	// #168
   46d44:	csel	w0, w0, w1, eq  // eq = none
   46d48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d4c:	and	w1, w0, #0x40000000
   46d50:	tbnz	w0, #23, 46d64 <aarch64_opcode_lookup@@Base+0x40a4>
   46d54:	cmp	w1, #0x0
   46d58:	cset	w0, ne  // ne = any
   46d5c:	add	w0, w0, #0xb2
   46d60:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d64:	cmp	w1, #0x0
   46d68:	cset	w0, ne  // ne = any
   46d6c:	add	w0, w0, #0x97f
   46d70:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d74:	cbnz	w2, 46d90 <aarch64_opcode_lookup@@Base+0x40d0>
   46d78:	cbz	w1, 48c28 <aarch64_opcode_lookup@@Base+0x5f68>
   46d7c:	tst	x0, #0x80000
   46d80:	mov	w1, #0x2a0                 	// #672
   46d84:	mov	w0, #0xa7                  	// #167
   46d88:	csel	w0, w0, w1, eq  // eq = none
   46d8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46d90:	cbnz	w1, 46da8 <aarch64_opcode_lookup@@Base+0x40e8>
   46d94:	tst	x0, #0x100000
   46d98:	mov	w1, #0x1d                  	// #29
   46d9c:	mov	w0, #0xa5                  	// #165
   46da0:	csel	w0, w0, w1, eq  // eq = none
   46da4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46da8:	tbnz	w0, #16, 46dc0 <aarch64_opcode_lookup@@Base+0x4100>
   46dac:	tst	x0, #0x80000
   46db0:	mov	w1, #0x2a2                 	// #674
   46db4:	mov	w0, #0xa9                  	// #169
   46db8:	csel	w0, w0, w1, eq  // eq = none
   46dbc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46dc0:	ubfx	x0, x0, #30, #1
   46dc4:	add	w0, w0, #0xb4
   46dc8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46dcc:	cbnz	w4, 46e20 <aarch64_opcode_lookup@@Base+0x4160>
   46dd0:	cmp	w1, #0x0
   46dd4:	cbnz	w3, 46dfc <aarch64_opcode_lookup@@Base+0x413c>
   46dd8:	cbnz	w2, 46dec <aarch64_opcode_lookup@@Base+0x412c>
   46ddc:	mov	w0, #0x10c                 	// #268
   46de0:	mov	w1, #0x113                 	// #275
   46de4:	csel	w0, w0, w1, eq  // eq = none
   46de8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46dec:	mov	w0, #0x10f                 	// #271
   46df0:	mov	w1, #0x117                 	// #279
   46df4:	csel	w0, w0, w1, eq  // eq = none
   46df8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46dfc:	cbnz	w2, 46e10 <aarch64_opcode_lookup@@Base+0x4150>
   46e00:	mov	w0, #0x10e                 	// #270
   46e04:	mov	w1, #0x115                 	// #277
   46e08:	csel	w0, w0, w1, eq  // eq = none
   46e0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e10:	mov	w0, #0x111                 	// #273
   46e14:	mov	w1, #0x119                 	// #281
   46e18:	csel	w0, w0, w1, eq  // eq = none
   46e1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e20:	cbnz	w3, 46e4c <aarch64_opcode_lookup@@Base+0x418c>
   46e24:	cmp	w1, #0x0
   46e28:	cbnz	w2, 46e3c <aarch64_opcode_lookup@@Base+0x417c>
   46e2c:	mov	w0, #0x10d                 	// #269
   46e30:	mov	w1, #0x114                 	// #276
   46e34:	csel	w0, w0, w1, eq  // eq = none
   46e38:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e3c:	mov	w0, #0x110                 	// #272
   46e40:	mov	w1, #0x118                 	// #280
   46e44:	csel	w0, w0, w1, eq  // eq = none
   46e48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e4c:	cbnz	w2, 46e84 <aarch64_opcode_lookup@@Base+0x41c4>
   46e50:	cbnz	w1, 48c30 <aarch64_opcode_lookup@@Base+0x5f70>
   46e54:	and	w1, w0, #0x800000
   46e58:	tbnz	w0, #22, 46e70 <aarch64_opcode_lookup@@Base+0x41b0>
   46e5c:	cmp	w1, #0x0
   46e60:	mov	w0, #0x131                 	// #305
   46e64:	mov	w1, #0x13d                 	// #317
   46e68:	csel	w0, w0, w1, eq  // eq = none
   46e6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e70:	cmp	w1, #0x0
   46e74:	mov	w0, #0x132                 	// #306
   46e78:	mov	w1, #0x13f                 	// #319
   46e7c:	csel	w0, w0, w1, eq  // eq = none
   46e80:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e84:	cmp	w1, #0x0
   46e88:	mov	w0, #0x112                 	// #274
   46e8c:	mov	w1, #0x11a                 	// #282
   46e90:	csel	w0, w0, w1, eq  // eq = none
   46e94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46e98:	and	w4, w0, #0x800
   46e9c:	and	w3, w0, #0x1000
   46ea0:	and	w2, w0, #0x2000
   46ea4:	tbnz	w0, #10, 46fbc <aarch64_opcode_lookup@@Base+0x42fc>
   46ea8:	cbnz	w4, 46f34 <aarch64_opcode_lookup@@Base+0x4274>
   46eac:	and	w1, w0, #0x40000000
   46eb0:	and	w0, w0, #0x4000
   46eb4:	cmp	w1, #0x0
   46eb8:	cbnz	w3, 46ef8 <aarch64_opcode_lookup@@Base+0x4238>
   46ebc:	cbnz	w2, 46edc <aarch64_opcode_lookup@@Base+0x421c>
   46ec0:	cbnz	w0, 46ed0 <aarch64_opcode_lookup@@Base+0x4210>
   46ec4:	cset	w0, ne  // ne = any
   46ec8:	add	w0, w0, #0x4c
   46ecc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ed0:	cset	w0, ne  // ne = any
   46ed4:	add	w0, w0, #0x54
   46ed8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46edc:	cbnz	w0, 46eec <aarch64_opcode_lookup@@Base+0x422c>
   46ee0:	cset	w0, ne  // ne = any
   46ee4:	add	w0, w0, #0x50
   46ee8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46eec:	cset	w0, ne  // ne = any
   46ef0:	add	w0, w0, #0x58
   46ef4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ef8:	cbnz	w2, 46f18 <aarch64_opcode_lookup@@Base+0x4258>
   46efc:	cbnz	w0, 46f0c <aarch64_opcode_lookup@@Base+0x424c>
   46f00:	cset	w0, ne  // ne = any
   46f04:	add	w0, w0, #0x4e
   46f08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f0c:	cset	w0, ne  // ne = any
   46f10:	add	w0, w0, #0x56
   46f14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f18:	cbnz	w0, 46f28 <aarch64_opcode_lookup@@Base+0x4268>
   46f1c:	cset	w0, ne  // ne = any
   46f20:	add	w0, w0, #0x52
   46f24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f28:	cset	w0, ne  // ne = any
   46f2c:	add	w0, w0, #0x5a
   46f30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f34:	cbnz	w3, 46f7c <aarch64_opcode_lookup@@Base+0x42bc>
   46f38:	and	w3, w0, #0x4000
   46f3c:	cbnz	w2, 46f54 <aarch64_opcode_lookup@@Base+0x4294>
   46f40:	cbz	w3, 48c38 <aarch64_opcode_lookup@@Base+0x5f78>
   46f44:	tbz	w0, #16, 48c40 <aarch64_opcode_lookup@@Base+0x5f80>
   46f48:	ubfx	x0, x0, #30, #1
   46f4c:	add	w0, w0, #0xe2
   46f50:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f54:	and	w1, w0, #0x10000
   46f58:	cbnz	w3, 46f6c <aarch64_opcode_lookup@@Base+0x42ac>
   46f5c:	cbz	w1, 48c48 <aarch64_opcode_lookup@@Base+0x5f88>
   46f60:	ubfx	x0, x0, #30, #1
   46f64:	add	w0, w0, #0xde
   46f68:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f6c:	cbz	w1, 48c50 <aarch64_opcode_lookup@@Base+0x5f90>
   46f70:	ubfx	x0, x0, #30, #1
   46f74:	add	w0, w0, #0xe4
   46f78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f7c:	cbnz	w2, 46f94 <aarch64_opcode_lookup@@Base+0x42d4>
   46f80:	tst	x0, #0x400000
   46f84:	mov	w1, #0xf4                  	// #244
   46f88:	mov	w0, #0xf2                  	// #242
   46f8c:	csel	w0, w0, w1, eq  // eq = none
   46f90:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46f94:	tbnz	w0, #14, 48c58 <aarch64_opcode_lookup@@Base+0x5f98>
   46f98:	tbnz	w0, #16, 46fb0 <aarch64_opcode_lookup@@Base+0x42f0>
   46f9c:	tst	x0, #0x100000
   46fa0:	mov	w1, #0x21                  	// #33
   46fa4:	mov	w0, #0xd7                  	// #215
   46fa8:	csel	w0, w0, w1, eq  // eq = none
   46fac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46fb0:	ubfx	x0, x0, #30, #1
   46fb4:	add	w0, w0, #0xe0
   46fb8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46fbc:	and	w1, w0, #0x4000
   46fc0:	cbnz	w4, 47014 <aarch64_opcode_lookup@@Base+0x4354>
   46fc4:	cmp	w1, #0x0
   46fc8:	cbnz	w3, 46ff0 <aarch64_opcode_lookup@@Base+0x4330>
   46fcc:	cbnz	w2, 46fe0 <aarch64_opcode_lookup@@Base+0x4320>
   46fd0:	mov	w0, #0x140                 	// #320
   46fd4:	mov	w1, #0x147                 	// #327
   46fd8:	csel	w0, w0, w1, eq  // eq = none
   46fdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46fe0:	mov	w0, #0x143                 	// #323
   46fe4:	mov	w1, #0x14b                 	// #331
   46fe8:	csel	w0, w0, w1, eq  // eq = none
   46fec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   46ff0:	cbnz	w2, 47004 <aarch64_opcode_lookup@@Base+0x4344>
   46ff4:	mov	w0, #0x142                 	// #322
   46ff8:	mov	w1, #0x149                 	// #329
   46ffc:	csel	w0, w0, w1, eq  // eq = none
   47000:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47004:	mov	w0, #0x145                 	// #325
   47008:	mov	w1, #0x14d                 	// #333
   4700c:	csel	w0, w0, w1, eq  // eq = none
   47010:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47014:	cbnz	w3, 47040 <aarch64_opcode_lookup@@Base+0x4380>
   47018:	cmp	w1, #0x0
   4701c:	cbnz	w2, 47030 <aarch64_opcode_lookup@@Base+0x4370>
   47020:	mov	w0, #0x141                 	// #321
   47024:	mov	w1, #0x148                 	// #328
   47028:	csel	w0, w0, w1, eq  // eq = none
   4702c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47030:	mov	w0, #0x144                 	// #324
   47034:	mov	w1, #0x14c                 	// #332
   47038:	csel	w0, w0, w1, eq  // eq = none
   4703c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47040:	cbnz	w2, 47078 <aarch64_opcode_lookup@@Base+0x43b8>
   47044:	cbnz	w1, 48c60 <aarch64_opcode_lookup@@Base+0x5fa0>
   47048:	and	w1, w0, #0x800000
   4704c:	tbnz	w0, #22, 47064 <aarch64_opcode_lookup@@Base+0x43a4>
   47050:	cmp	w1, #0x0
   47054:	mov	w0, #0x164                 	// #356
   47058:	mov	w1, #0x170                 	// #368
   4705c:	csel	w0, w0, w1, eq  // eq = none
   47060:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47064:	cmp	w1, #0x0
   47068:	mov	w0, #0x165                 	// #357
   4706c:	mov	w1, #0x171                 	// #369
   47070:	csel	w0, w0, w1, eq  // eq = none
   47074:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47078:	cmp	w1, #0x0
   4707c:	mov	w0, #0x146                 	// #326
   47080:	mov	w1, #0x14e                 	// #334
   47084:	csel	w0, w0, w1, eq  // eq = none
   47088:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4708c:	and	w4, w0, #0x800
   47090:	and	w3, w0, #0x1000
   47094:	and	w2, w0, #0x2000
   47098:	tbnz	w0, #10, 47534 <aarch64_opcode_lookup@@Base+0x4874>
   4709c:	cbnz	w4, 4719c <aarch64_opcode_lookup@@Base+0x44dc>
   470a0:	and	w1, w0, #0x40000000
   470a4:	cbnz	w3, 47164 <aarch64_opcode_lookup@@Base+0x44a4>
   470a8:	and	w3, w0, #0x4000
   470ac:	cbnz	w2, 47110 <aarch64_opcode_lookup@@Base+0x4450>
   470b0:	and	w2, w0, #0x20000000
   470b4:	cbnz	w3, 470e4 <aarch64_opcode_lookup@@Base+0x4424>
   470b8:	cbnz	w2, 470d4 <aarch64_opcode_lookup@@Base+0x4414>
   470bc:	cbz	w1, 48c68 <aarch64_opcode_lookup@@Base+0x5fa8>
   470c0:	cmp	w0, #0x0
   470c4:	mov	w1, #0x925                 	// #2341
   470c8:	mov	w0, #0x3d                  	// #61
   470cc:	csel	w0, w0, w1, ge  // ge = tcont
   470d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   470d4:	cmp	w1, #0x0
   470d8:	cset	w0, ne  // ne = any
   470dc:	add	w0, w0, #0x5c
   470e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   470e4:	cbnz	w2, 47100 <aarch64_opcode_lookup@@Base+0x4440>
   470e8:	cbz	w1, 48c70 <aarch64_opcode_lookup@@Base+0x5fb0>
   470ec:	cmp	w0, #0x0
   470f0:	mov	w1, #0x932                 	// #2354
   470f4:	mov	w0, #0x45                  	// #69
   470f8:	csel	w0, w0, w1, ge  // ge = tcont
   470fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47100:	cmp	w1, #0x0
   47104:	cset	w0, ne  // ne = any
   47108:	add	w0, w0, #0x60
   4710c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47110:	cbnz	w3, 47138 <aarch64_opcode_lookup@@Base+0x4478>
   47114:	tbnz	w0, #29, 47128 <aarch64_opcode_lookup@@Base+0x4468>
   47118:	cmp	w1, #0x0
   4711c:	cset	w0, ne  // ne = any
   47120:	add	w0, w0, #0x40
   47124:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47128:	cmp	w1, #0x0
   4712c:	cset	w0, ne  // ne = any
   47130:	add	w0, w0, #0x5e
   47134:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47138:	tbnz	w0, #22, 47150 <aarch64_opcode_lookup@@Base+0x4490>
   4713c:	cmp	w1, #0x0
   47140:	mov	w0, #0x48                  	// #72
   47144:	mov	w1, #0x4a                  	// #74
   47148:	csel	w0, w0, w1, eq  // eq = none
   4714c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47150:	cmp	w1, #0x0
   47154:	mov	w0, #0x49                  	// #73
   47158:	mov	w1, #0x4b                  	// #75
   4715c:	csel	w0, w0, w1, eq  // eq = none
   47160:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47164:	cbnz	w2, 4718c <aarch64_opcode_lookup@@Base+0x44cc>
   47168:	tbnz	w0, #14, 4717c <aarch64_opcode_lookup@@Base+0x44bc>
   4716c:	cmp	w1, #0x0
   47170:	cset	w0, ne  // ne = any
   47174:	add	w0, w0, #0x3e
   47178:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4717c:	cmp	w1, #0x0
   47180:	cset	w0, ne  // ne = any
   47184:	add	w0, w0, #0x46
   47188:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4718c:	cmp	w1, #0x0
   47190:	cset	w0, ne  // ne = any
   47194:	add	w0, w0, #0x42
   47198:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4719c:	and	w4, w0, #0x4000
   471a0:	cbnz	w3, 47338 <aarch64_opcode_lookup@@Base+0x4678>
   471a4:	cbnz	w2, 47280 <aarch64_opcode_lookup@@Base+0x45c0>
   471a8:	and	w1, w0, #0x20000000
   471ac:	cbnz	w4, 471fc <aarch64_opcode_lookup@@Base+0x453c>
   471b0:	cbnz	w1, 471ec <aarch64_opcode_lookup@@Base+0x452c>
   471b4:	tbnz	w0, #31, 48c78 <aarch64_opcode_lookup@@Base+0x5fb8>
   471b8:	tbz	w0, #16, 48c80 <aarch64_opcode_lookup@@Base+0x5fc0>
   471bc:	and	w1, w0, #0x800000
   471c0:	tbnz	w0, #19, 471d8 <aarch64_opcode_lookup@@Base+0x4518>
   471c4:	cmp	w1, #0x0
   471c8:	mov	w0, #0xb6                  	// #182
   471cc:	mov	w1, #0xca                  	// #202
   471d0:	csel	w0, w0, w1, eq  // eq = none
   471d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   471d8:	cmp	w1, #0x0
   471dc:	mov	w0, #0xb7                  	// #183
   471e0:	mov	w1, #0xcb                  	// #203
   471e4:	csel	w0, w0, w1, eq  // eq = none
   471e8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   471ec:	tbz	w0, #16, 48c88 <aarch64_opcode_lookup@@Base+0x5fc8>
   471f0:	ubfx	x0, x0, #19, #1
   471f4:	add	w0, w0, #0xe6
   471f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   471fc:	tbnz	w0, #23, 47228 <aarch64_opcode_lookup@@Base+0x4568>
   47200:	cbnz	w1, 47218 <aarch64_opcode_lookup@@Base+0x4558>
   47204:	tbnz	w0, #31, 48c90 <aarch64_opcode_lookup@@Base+0x5fd0>
   47208:	tbz	w0, #16, 48c98 <aarch64_opcode_lookup@@Base+0x5fd8>
   4720c:	ubfx	x0, x0, #19, #1
   47210:	add	w0, w0, #0xbe
   47214:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47218:	tbz	w0, #16, 48ca0 <aarch64_opcode_lookup@@Base+0x5fe0>
   4721c:	ubfx	x0, x0, #19, #1
   47220:	add	w0, w0, #0xee
   47224:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47228:	tbnz	w0, #16, 4726c <aarch64_opcode_lookup@@Base+0x45ac>
   4722c:	tbnz	w0, #19, 47258 <aarch64_opcode_lookup@@Base+0x4598>
   47230:	tbnz	w0, #20, 47248 <aarch64_opcode_lookup@@Base+0x4588>
   47234:	cmp	w1, #0x0
   47238:	mov	w0, #0xc2                  	// #194
   4723c:	mov	w1, #0xf5                  	// #245
   47240:	csel	w0, w0, w1, eq  // eq = none
   47244:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47248:	cmp	w1, #0x0
   4724c:	cset	w0, eq  // eq = none
   47250:	add	w0, w0, #0x28
   47254:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47258:	cmp	w1, #0x0
   4725c:	mov	w0, #0xc3                  	// #195
   47260:	mov	w1, #0xf6                  	// #246
   47264:	csel	w0, w0, w1, eq  // eq = none
   47268:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4726c:	cmp	w1, #0x0
   47270:	mov	w0, #0xd2                  	// #210
   47274:	mov	w1, #0x101                 	// #257
   47278:	csel	w0, w0, w1, eq  // eq = none
   4727c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47280:	and	w1, w0, #0x10000
   47284:	cbnz	w4, 4731c <aarch64_opcode_lookup@@Base+0x465c>
   47288:	cbnz	w1, 472a4 <aarch64_opcode_lookup@@Base+0x45e4>
   4728c:	tbz	w0, #20, 48ca8 <aarch64_opcode_lookup@@Base+0x5fe8>
   47290:	tst	x0, #0x20000000
   47294:	mov	w1, #0x22                  	// #34
   47298:	mov	w0, #0x1e                  	// #30
   4729c:	csel	w0, w0, w1, eq  // eq = none
   472a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   472a4:	and	w1, w0, #0x20000000
   472a8:	tbnz	w0, #19, 472f0 <aarch64_opcode_lookup@@Base+0x4630>
   472ac:	tbnz	w0, #20, 472dc <aarch64_opcode_lookup@@Base+0x461c>
   472b0:	tbnz	w0, #23, 472c8 <aarch64_opcode_lookup@@Base+0x4608>
   472b4:	cmp	w1, #0x0
   472b8:	mov	w0, #0xba                  	// #186
   472bc:	mov	w1, #0xea                  	// #234
   472c0:	csel	w0, w0, w1, eq  // eq = none
   472c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   472c8:	cmp	w1, #0x0
   472cc:	mov	w0, #0xce                  	// #206
   472d0:	mov	w1, #0xfd                  	// #253
   472d4:	csel	w0, w0, w1, eq  // eq = none
   472d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   472dc:	cmp	w1, #0x0
   472e0:	mov	w0, #0x1f                  	// #31
   472e4:	mov	w1, #0x23                  	// #35
   472e8:	csel	w0, w0, w1, eq  // eq = none
   472ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   472f0:	tbnz	w0, #23, 47308 <aarch64_opcode_lookup@@Base+0x4648>
   472f4:	cmp	w1, #0x0
   472f8:	mov	w0, #0xbb                  	// #187
   472fc:	mov	w1, #0xeb                  	// #235
   47300:	csel	w0, w0, w1, eq  // eq = none
   47304:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47308:	cmp	w1, #0x0
   4730c:	mov	w0, #0xcf                  	// #207
   47310:	mov	w1, #0xfe                  	// #254
   47314:	csel	w0, w0, w1, eq  // eq = none
   47318:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4731c:	cbnz	w1, 4732c <aarch64_opcode_lookup@@Base+0x466c>
   47320:	ubfx	x0, x0, #19, #1
   47324:	add	w0, w0, #0xc6
   47328:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4732c:	ubfx	x0, x0, #29, #1
   47330:	add	w0, w0, #0x9e
   47334:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47338:	and	w3, w0, #0x10000
   4733c:	cbnz	w2, 4743c <aarch64_opcode_lookup@@Base+0x477c>
   47340:	and	w1, w0, #0x20000000
   47344:	cbnz	w4, 473b8 <aarch64_opcode_lookup@@Base+0x46f8>
   47348:	cbnz	w3, 47360 <aarch64_opcode_lookup@@Base+0x46a0>
   4734c:	cmp	w1, #0x0
   47350:	mov	w0, #0xab                  	// #171
   47354:	mov	w1, #0xdc                  	// #220
   47358:	csel	w0, w0, w1, eq  // eq = none
   4735c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47360:	and	w2, w0, #0x800000
   47364:	tbnz	w0, #19, 47390 <aarch64_opcode_lookup@@Base+0x46d0>
   47368:	cmp	w1, #0x0
   4736c:	cbnz	w2, 47380 <aarch64_opcode_lookup@@Base+0x46c0>
   47370:	mov	w0, #0xb8                  	// #184
   47374:	mov	w1, #0xe8                  	// #232
   47378:	csel	w0, w0, w1, eq  // eq = none
   4737c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47380:	mov	w0, #0xcc                  	// #204
   47384:	mov	w1, #0xfb                  	// #251
   47388:	csel	w0, w0, w1, eq  // eq = none
   4738c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47390:	cmp	w1, #0x0
   47394:	cbnz	w2, 473a8 <aarch64_opcode_lookup@@Base+0x46e8>
   47398:	mov	w0, #0xb9                  	// #185
   4739c:	mov	w1, #0xe9                  	// #233
   473a0:	csel	w0, w0, w1, eq  // eq = none
   473a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   473a8:	mov	w0, #0xcd                  	// #205
   473ac:	mov	w1, #0xfc                  	// #252
   473b0:	csel	w0, w0, w1, eq  // eq = none
   473b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   473b8:	and	w2, w0, #0x80000
   473bc:	cbnz	w3, 473e8 <aarch64_opcode_lookup@@Base+0x4728>
   473c0:	cmp	w1, #0x0
   473c4:	cbnz	w2, 473d8 <aarch64_opcode_lookup@@Base+0x4718>
   473c8:	mov	w0, #0xc4                  	// #196
   473cc:	mov	w1, #0xf7                  	// #247
   473d0:	csel	w0, w0, w1, eq  // eq = none
   473d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   473d8:	mov	w0, #0xc5                  	// #197
   473dc:	mov	w1, #0xf8                  	// #248
   473e0:	csel	w0, w0, w1, eq  // eq = none
   473e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   473e8:	and	w0, w0, #0x800000
   473ec:	cmp	w1, #0x0
   473f0:	cbnz	w2, 47418 <aarch64_opcode_lookup@@Base+0x4758>
   473f4:	cbnz	w0, 47408 <aarch64_opcode_lookup@@Base+0x4748>
   473f8:	mov	w0, #0xc0                  	// #192
   473fc:	mov	w1, #0xf0                  	// #240
   47400:	csel	w0, w0, w1, eq  // eq = none
   47404:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47408:	mov	w0, #0xd3                  	// #211
   4740c:	mov	w1, #0x102                 	// #258
   47410:	csel	w0, w0, w1, eq  // eq = none
   47414:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47418:	cbnz	w0, 4742c <aarch64_opcode_lookup@@Base+0x476c>
   4741c:	mov	w0, #0xc1                  	// #193
   47420:	mov	w1, #0xf1                  	// #241
   47424:	csel	w0, w0, w1, eq  // eq = none
   47428:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4742c:	mov	w0, #0xd4                  	// #212
   47430:	mov	w1, #0x103                 	// #259
   47434:	csel	w0, w0, w1, eq  // eq = none
   47438:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4743c:	cbnz	w4, 474c0 <aarch64_opcode_lookup@@Base+0x4800>
   47440:	cbnz	w3, 47458 <aarch64_opcode_lookup@@Base+0x4798>
   47444:	tst	x0, #0x20000000
   47448:	mov	w1, #0xdd                  	// #221
   4744c:	mov	w0, #0xad                  	// #173
   47450:	csel	w0, w0, w1, eq  // eq = none
   47454:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47458:	tbnz	w0, #19, 47490 <aarch64_opcode_lookup@@Base+0x47d0>
   4745c:	tbnz	w0, #20, 48cb0 <aarch64_opcode_lookup@@Base+0x5ff0>
   47460:	and	w1, w0, #0x20000000
   47464:	tbnz	w0, #23, 4747c <aarch64_opcode_lookup@@Base+0x47bc>
   47468:	cmp	w1, #0x0
   4746c:	mov	w0, #0xbc                  	// #188
   47470:	mov	w1, #0xec                  	// #236
   47474:	csel	w0, w0, w1, eq  // eq = none
   47478:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4747c:	cmp	w1, #0x0
   47480:	mov	w0, #0xd0                  	// #208
   47484:	mov	w1, #0xff                  	// #255
   47488:	csel	w0, w0, w1, eq  // eq = none
   4748c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47490:	and	w1, w0, #0x20000000
   47494:	tbnz	w0, #23, 474ac <aarch64_opcode_lookup@@Base+0x47ec>
   47498:	cmp	w1, #0x0
   4749c:	mov	w0, #0xbd                  	// #189
   474a0:	mov	w1, #0xed                  	// #237
   474a4:	csel	w0, w0, w1, eq  // eq = none
   474a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   474ac:	cmp	w1, #0x0
   474b0:	mov	w0, #0xd1                  	// #209
   474b4:	mov	w1, #0x100                 	// #256
   474b8:	csel	w0, w0, w1, eq  // eq = none
   474bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   474c0:	and	w2, w0, #0x80000
   474c4:	cbnz	w3, 47520 <aarch64_opcode_lookup@@Base+0x4860>
   474c8:	and	w1, w0, #0x20000000
   474cc:	cbnz	w2, 4750c <aarch64_opcode_lookup@@Base+0x484c>
   474d0:	tbnz	w0, #20, 474e8 <aarch64_opcode_lookup@@Base+0x4828>
   474d4:	cmp	w1, #0x0
   474d8:	mov	w0, #0xc8                  	// #200
   474dc:	mov	w1, #0xf9                  	// #249
   474e0:	csel	w0, w0, w1, eq  // eq = none
   474e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   474e8:	tbnz	w0, #23, 474fc <aarch64_opcode_lookup@@Base+0x483c>
   474ec:	cmp	w1, #0x0
   474f0:	cset	w0, eq  // eq = none
   474f4:	add	w0, w0, #0x26
   474f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   474fc:	cmp	w1, #0x0
   47500:	cset	w0, eq  // eq = none
   47504:	add	w0, w0, #0x2a
   47508:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4750c:	cmp	w1, #0x0
   47510:	mov	w0, #0xc9                  	// #201
   47514:	mov	w1, #0xfa                  	// #250
   47518:	csel	w0, w0, w1, eq  // eq = none
   4751c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47520:	cbnz	w2, 48cb8 <aarch64_opcode_lookup@@Base+0x5ff8>
   47524:	tbnz	w0, #23, 48cc0 <aarch64_opcode_lookup@@Base+0x6000>
   47528:	ubfx	x0, x0, #29, #1
   4752c:	add	w0, w0, #0xa0
   47530:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47534:	and	w1, w0, #0x4000
   47538:	cbnz	w4, 47654 <aarch64_opcode_lookup@@Base+0x4994>
   4753c:	cbnz	w3, 475c4 <aarch64_opcode_lookup@@Base+0x4904>
   47540:	cbnz	w2, 47594 <aarch64_opcode_lookup@@Base+0x48d4>
   47544:	and	w2, w0, #0x20000000
   47548:	cbnz	w1, 47564 <aarch64_opcode_lookup@@Base+0x48a4>
   4754c:	cbnz	w2, 48cc8 <aarch64_opcode_lookup@@Base+0x6008>
   47550:	cmp	w0, #0x0
   47554:	mov	w1, #0x926                 	// #2342
   47558:	mov	w0, #0x11b                 	// #283
   4755c:	csel	w0, w0, w1, ge  // ge = tcont
   47560:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47564:	tbnz	w0, #23, 47580 <aarch64_opcode_lookup@@Base+0x48c0>
   47568:	cbnz	w2, 48cd0 <aarch64_opcode_lookup@@Base+0x6010>
   4756c:	cmp	w0, #0x0
   47570:	mov	w1, #0x933                 	// #2355
   47574:	mov	w0, #0x123                 	// #291
   47578:	csel	w0, w0, w1, ge  // ge = tcont
   4757c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47580:	cmp	w2, #0x0
   47584:	mov	w0, #0x133                 	// #307
   47588:	mov	w1, #0x166                 	// #358
   4758c:	csel	w0, w0, w1, eq  // eq = none
   47590:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47594:	cbnz	w1, 475ac <aarch64_opcode_lookup@@Base+0x48ec>
   47598:	tst	x0, #0x20000000
   4759c:	mov	w1, #0x153                 	// #339
   475a0:	mov	w0, #0x11f                 	// #287
   475a4:	csel	w0, w0, w1, eq  // eq = none
   475a8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   475ac:	tbnz	w0, #23, 48cd8 <aarch64_opcode_lookup@@Base+0x6018>
   475b0:	tst	x0, #0x20000000
   475b4:	mov	w1, #0x15c                 	// #348
   475b8:	mov	w0, #0x12b                 	// #299
   475bc:	csel	w0, w0, w1, eq  // eq = none
   475c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   475c4:	and	w3, w0, #0x20000000
   475c8:	cbnz	w2, 47610 <aarch64_opcode_lookup@@Base+0x4950>
   475cc:	cbnz	w1, 475e4 <aarch64_opcode_lookup@@Base+0x4924>
   475d0:	cmp	w3, #0x0
   475d4:	mov	w0, #0x11d                 	// #285
   475d8:	mov	w1, #0x151                 	// #337
   475dc:	csel	w0, w0, w1, eq  // eq = none
   475e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   475e4:	tbnz	w0, #23, 475fc <aarch64_opcode_lookup@@Base+0x493c>
   475e8:	cmp	w3, #0x0
   475ec:	mov	w0, #0x127                 	// #295
   475f0:	mov	w1, #0x158                 	// #344
   475f4:	csel	w0, w0, w1, eq  // eq = none
   475f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   475fc:	cmp	w3, #0x0
   47600:	mov	w0, #0x137                 	// #311
   47604:	mov	w1, #0x168                 	// #360
   47608:	csel	w0, w0, w1, eq  // eq = none
   4760c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47610:	cbnz	w1, 47628 <aarch64_opcode_lookup@@Base+0x4968>
   47614:	cmp	w3, #0x0
   47618:	mov	w0, #0x121                 	// #289
   4761c:	mov	w1, #0x155                 	// #341
   47620:	csel	w0, w0, w1, eq  // eq = none
   47624:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47628:	tbnz	w0, #23, 47640 <aarch64_opcode_lookup@@Base+0x4980>
   4762c:	cmp	w3, #0x0
   47630:	mov	w0, #0x12d                 	// #301
   47634:	mov	w1, #0x160                 	// #352
   47638:	csel	w0, w0, w1, eq  // eq = none
   4763c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47640:	cmp	w3, #0x0
   47644:	mov	w0, #0x139                 	// #313
   47648:	mov	w1, #0x16e                 	// #366
   4764c:	csel	w0, w0, w1, eq  // eq = none
   47650:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47654:	cbnz	w3, 476fc <aarch64_opcode_lookup@@Base+0x4a3c>
   47658:	and	w3, w0, #0x20000000
   4765c:	cbnz	w2, 476b0 <aarch64_opcode_lookup@@Base+0x49f0>
   47660:	cbnz	w1, 4767c <aarch64_opcode_lookup@@Base+0x49bc>
   47664:	cbnz	w3, 48ce0 <aarch64_opcode_lookup@@Base+0x6020>
   47668:	cmp	w0, #0x0
   4766c:	mov	w1, #0x92a                 	// #2346
   47670:	mov	w0, #0x11c                 	// #284
   47674:	csel	w0, w0, w1, ge  // ge = tcont
   47678:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4767c:	tbnz	w0, #23, 47698 <aarch64_opcode_lookup@@Base+0x49d8>
   47680:	cbz	w3, 48ce8 <aarch64_opcode_lookup@@Base+0x6028>
   47684:	tst	x0, #0x40000000
   47688:	mov	w1, #0x93c                 	// #2364
   4768c:	mov	w0, #0x938                 	// #2360
   47690:	csel	w0, w0, w1, eq  // eq = none
   47694:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47698:	cbz	w3, 48cf0 <aarch64_opcode_lookup@@Base+0x6030>
   4769c:	tst	x0, #0x40000000
   476a0:	mov	w1, #0x93d                 	// #2365
   476a4:	mov	w0, #0x939                 	// #2361
   476a8:	csel	w0, w0, w1, eq  // eq = none
   476ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   476b0:	cbnz	w1, 476c8 <aarch64_opcode_lookup@@Base+0x4a08>
   476b4:	cmp	w3, #0x0
   476b8:	mov	w0, #0x120                 	// #288
   476bc:	mov	w1, #0x154                 	// #340
   476c0:	csel	w0, w0, w1, eq  // eq = none
   476c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   476c8:	tbnz	w0, #23, 476e4 <aarch64_opcode_lookup@@Base+0x4a24>
   476cc:	cbnz	w3, 48cf8 <aarch64_opcode_lookup@@Base+0x6038>
   476d0:	tst	x0, #0x40000000
   476d4:	mov	w1, #0x93a                 	// #2362
   476d8:	mov	w0, #0x936                 	// #2358
   476dc:	csel	w0, w0, w1, eq  // eq = none
   476e0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   476e4:	cbnz	w3, 48d00 <aarch64_opcode_lookup@@Base+0x6040>
   476e8:	tst	x0, #0x40000000
   476ec:	mov	w1, #0x93b                 	// #2363
   476f0:	mov	w0, #0x937                 	// #2359
   476f4:	csel	w0, w0, w1, eq  // eq = none
   476f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   476fc:	cbnz	w2, 4772c <aarch64_opcode_lookup@@Base+0x4a6c>
   47700:	and	w0, w0, #0x20000000
   47704:	cmp	w0, #0x0
   47708:	cbnz	w1, 4771c <aarch64_opcode_lookup@@Base+0x4a5c>
   4770c:	mov	w0, #0x11e                 	// #286
   47710:	mov	w1, #0x152                 	// #338
   47714:	csel	w0, w0, w1, eq  // eq = none
   47718:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4771c:	mov	w0, #0x129                 	// #297
   47720:	mov	w1, #0x15a                 	// #346
   47724:	csel	w0, w0, w1, eq  // eq = none
   47728:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4772c:	cbz	w1, 48d08 <aarch64_opcode_lookup@@Base+0x6048>
   47730:	tbnz	w0, #23, 48d10 <aarch64_opcode_lookup@@Base+0x6050>
   47734:	tst	x0, #0x20000000
   47738:	mov	w1, #0x162                 	// #354
   4773c:	mov	w0, #0x12f                 	// #303
   47740:	csel	w0, w0, w1, eq  // eq = none
   47744:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47748:	and	w2, w0, #0x800
   4774c:	tbnz	w0, #10, 47c4c <aarch64_opcode_lookup@@Base+0x4f8c>
   47750:	and	w4, w0, #0x1000
   47754:	cbnz	w2, 478f0 <aarch64_opcode_lookup@@Base+0x4c30>
   47758:	cbnz	w4, 478d4 <aarch64_opcode_lookup@@Base+0x4c14>
   4775c:	tbnz	w0, #13, 478a4 <aarch64_opcode_lookup@@Base+0x4be4>
   47760:	and	w2, w0, #0x20000
   47764:	and	w1, w0, #0x40000
   47768:	tbnz	w0, #14, 47814 <aarch64_opcode_lookup@@Base+0x4b54>
   4776c:	tbnz	w0, #16, 477c4 <aarch64_opcode_lookup@@Base+0x4b04>
   47770:	cbnz	w2, 477a8 <aarch64_opcode_lookup@@Base+0x4ae8>
   47774:	cbnz	w1, 48d18 <aarch64_opcode_lookup@@Base+0x6058>
   47778:	and	w1, w0, #0x100000
   4777c:	tbnz	w0, #19, 47794 <aarch64_opcode_lookup@@Base+0x4ad4>
   47780:	cmp	w1, #0x0
   47784:	mov	w0, #0x2ff                 	// #767
   47788:	mov	w1, #0x313                 	// #787
   4778c:	csel	w0, w0, w1, eq  // eq = none
   47790:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47794:	cmp	w1, #0x0
   47798:	mov	w0, #0x30f                 	// #783
   4779c:	mov	w1, #0x317                 	// #791
   477a0:	csel	w0, w0, w1, eq  // eq = none
   477a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   477a8:	cbz	w1, 48d20 <aarch64_opcode_lookup@@Base+0x6060>
   477ac:	tbz	w0, #19, 48d28 <aarch64_opcode_lookup@@Base+0x6068>
   477b0:	tst	x0, #0x100000
   477b4:	mov	w1, #0x31d                 	// #797
   477b8:	mov	w0, #0x31b                 	// #795
   477bc:	csel	w0, w0, w1, eq  // eq = none
   477c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   477c4:	cbnz	w2, 477fc <aarch64_opcode_lookup@@Base+0x4b3c>
   477c8:	cbnz	w1, 48d30 <aarch64_opcode_lookup@@Base+0x6070>
   477cc:	and	w1, w0, #0x100000
   477d0:	tbnz	w0, #19, 477e8 <aarch64_opcode_lookup@@Base+0x4b28>
   477d4:	cmp	w1, #0x0
   477d8:	mov	w0, #0x301                 	// #769
   477dc:	mov	w1, #0x315                 	// #789
   477e0:	csel	w0, w0, w1, eq  // eq = none
   477e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   477e8:	cmp	w1, #0x0
   477ec:	mov	w0, #0x311                 	// #785
   477f0:	mov	w1, #0x319                 	// #793
   477f4:	csel	w0, w0, w1, eq  // eq = none
   477f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   477fc:	cbz	w1, 48d38 <aarch64_opcode_lookup@@Base+0x6078>
   47800:	tst	x0, #0x80000
   47804:	mov	w1, #0x31c                 	// #796
   47808:	mov	w0, #0x30d                 	// #781
   4780c:	csel	w0, w0, w1, eq  // eq = none
   47810:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47814:	cbnz	w2, 47888 <aarch64_opcode_lookup@@Base+0x4bc8>
   47818:	and	w2, w0, #0x10000
   4781c:	tbnz	w0, #15, 47854 <aarch64_opcode_lookup@@Base+0x4b94>
   47820:	cbnz	w2, 4783c <aarch64_opcode_lookup@@Base+0x4b7c>
   47824:	cbnz	w1, 48d40 <aarch64_opcode_lookup@@Base+0x6080>
   47828:	tst	x0, #0x80000
   4782c:	mov	w1, #0x32c                 	// #812
   47830:	mov	w0, #0x330                 	// #816
   47834:	csel	w0, w0, w1, eq  // eq = none
   47838:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4783c:	cbnz	w1, 48d48 <aarch64_opcode_lookup@@Base+0x6088>
   47840:	tst	x0, #0x80000
   47844:	mov	w1, #0x32e                 	// #814
   47848:	mov	w0, #0x334                 	// #820
   4784c:	csel	w0, w0, w1, eq  // eq = none
   47850:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47854:	cbnz	w2, 47870 <aarch64_opcode_lookup@@Base+0x4bb0>
   47858:	cbnz	w1, 48d50 <aarch64_opcode_lookup@@Base+0x6090>
   4785c:	tst	x0, #0x80000
   47860:	mov	w1, #0x32d                 	// #813
   47864:	mov	w0, #0x332                 	// #818
   47868:	csel	w0, w0, w1, eq  // eq = none
   4786c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47870:	cbnz	w1, 48d58 <aarch64_opcode_lookup@@Base+0x6098>
   47874:	tst	x0, #0x80000
   47878:	mov	w1, #0x32f                 	// #815
   4787c:	mov	w0, #0x336                 	// #822
   47880:	csel	w0, w0, w1, eq  // eq = none
   47884:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47888:	cbz	w1, 48d60 <aarch64_opcode_lookup@@Base+0x60a0>
   4788c:	tbnz	w0, #15, 48d68 <aarch64_opcode_lookup@@Base+0x60a8>
   47890:	tst	x0, #0x10000
   47894:	mov	w1, #0x343                 	// #835
   47898:	mov	w0, #0x341                 	// #833
   4789c:	csel	w0, w0, w1, eq  // eq = none
   478a0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   478a4:	and	w1, w0, #0x10
   478a8:	tbnz	w0, #3, 478c0 <aarch64_opcode_lookup@@Base+0x4c00>
   478ac:	cmp	w1, #0x0
   478b0:	mov	w0, #0x322                 	// #802
   478b4:	mov	w1, #0x324                 	// #804
   478b8:	csel	w0, w0, w1, eq  // eq = none
   478bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   478c0:	cmp	w1, #0x0
   478c4:	mov	w0, #0x326                 	// #806
   478c8:	mov	w1, #0x328                 	// #808
   478cc:	csel	w0, w0, w1, eq  // eq = none
   478d0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   478d4:	tbz	w0, #30, 48d70 <aarch64_opcode_lookup@@Base+0x60b0>
   478d8:	tbnz	w0, #13, 48d78 <aarch64_opcode_lookup@@Base+0x60b8>
   478dc:	tst	x0, #0x4000
   478e0:	mov	w1, #0x1a8                 	// #424
   478e4:	mov	w0, #0x1a6                 	// #422
   478e8:	csel	w0, w0, w1, eq  // eq = none
   478ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   478f0:	and	w1, w0, #0x8000
   478f4:	and	w3, w0, #0x2000
   478f8:	and	w2, w0, #0x4000
   478fc:	cbnz	w4, 47a80 <aarch64_opcode_lookup@@Base+0x4dc0>
   47900:	cbnz	w3, 479dc <aarch64_opcode_lookup@@Base+0x4d1c>
   47904:	cbnz	w2, 47938 <aarch64_opcode_lookup@@Base+0x4c78>
   47908:	cbnz	w1, 47920 <aarch64_opcode_lookup@@Base+0x4c60>
   4790c:	tst	x0, #0x40000000
   47910:	mov	w1, #0x2a3                 	// #675
   47914:	mov	w0, #0x347                 	// #839
   47918:	csel	w0, w0, w1, eq  // eq = none
   4791c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47920:	tbnz	w0, #29, 48d80 <aarch64_opcode_lookup@@Base+0x60c0>
   47924:	tst	x0, #0x40000000
   47928:	mov	w1, #0x1e2                 	// #482
   4792c:	mov	w0, #0x357                 	// #855
   47930:	csel	w0, w0, w1, eq  // eq = none
   47934:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47938:	and	w2, w0, #0x20000000
   4793c:	cbnz	w1, 47958 <aarch64_opcode_lookup@@Base+0x4c98>
   47940:	cbnz	w2, 48d88 <aarch64_opcode_lookup@@Base+0x60c8>
   47944:	tst	x0, #0x40000000
   47948:	mov	w1, #0x1e6                 	// #486
   4794c:	mov	w0, #0x34f                 	// #847
   47950:	csel	w0, w0, w1, eq  // eq = none
   47954:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47958:	and	w1, w0, #0x80000
   4795c:	tbnz	w0, #16, 479b4 <aarch64_opcode_lookup@@Base+0x4cf4>
   47960:	cbnz	w1, 479a0 <aarch64_opcode_lookup@@Base+0x4ce0>
   47964:	tbnz	w0, #20, 4797c <aarch64_opcode_lookup@@Base+0x4cbc>
   47968:	cmp	w2, #0x0
   4796c:	mov	w0, #0x1ef                 	// #495
   47970:	mov	w1, #0x20d                 	// #525
   47974:	csel	w0, w0, w1, eq  // eq = none
   47978:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4797c:	tbnz	w0, #23, 47990 <aarch64_opcode_lookup@@Base+0x4cd0>
   47980:	cmp	w2, #0x0
   47984:	cset	w0, eq  // eq = none
   47988:	add	w0, w0, #0x21a
   4798c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47990:	cmp	w2, #0x0
   47994:	cset	w0, eq  // eq = none
   47998:	add	w0, w0, #0x220
   4799c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   479a0:	cmp	w2, #0x0
   479a4:	mov	w0, #0x1f0                 	// #496
   479a8:	mov	w1, #0x20e                 	// #526
   479ac:	csel	w0, w0, w1, eq  // eq = none
   479b0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   479b4:	cmp	w2, #0x0
   479b8:	cbnz	w1, 479cc <aarch64_opcode_lookup@@Base+0x4d0c>
   479bc:	mov	w0, #0x1eb                 	// #491
   479c0:	mov	w1, #0x209                 	// #521
   479c4:	csel	w0, w0, w1, eq  // eq = none
   479c8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   479cc:	mov	w0, #0x1ec                 	// #492
   479d0:	mov	w1, #0x20a                 	// #522
   479d4:	csel	w0, w0, w1, eq  // eq = none
   479d8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   479dc:	cbnz	w2, 47a5c <aarch64_opcode_lookup@@Base+0x4d9c>
   479e0:	cbnz	w1, 479fc <aarch64_opcode_lookup@@Base+0x4d3c>
   479e4:	tbnz	w0, #29, 48d90 <aarch64_opcode_lookup@@Base+0x60d0>
   479e8:	tst	x0, #0x40000000
   479ec:	mov	w1, #0x2a5                 	// #677
   479f0:	mov	w0, #0x34b                 	// #843
   479f4:	csel	w0, w0, w1, eq  // eq = none
   479f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   479fc:	tbz	w0, #16, 48d98 <aarch64_opcode_lookup@@Base+0x60d8>
   47a00:	and	w1, w0, #0x20000000
   47a04:	and	w2, w0, #0x800000
   47a08:	tbnz	w0, #19, 47a34 <aarch64_opcode_lookup@@Base+0x4d74>
   47a0c:	cmp	w1, #0x0
   47a10:	cbnz	w2, 47a24 <aarch64_opcode_lookup@@Base+0x4d64>
   47a14:	mov	w0, #0x1e7                 	// #487
   47a18:	mov	w1, #0x205                 	// #517
   47a1c:	csel	w0, w0, w1, eq  // eq = none
   47a20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a24:	mov	w0, #0x1f5                 	// #501
   47a28:	mov	w1, #0x211                 	// #529
   47a2c:	csel	w0, w0, w1, eq  // eq = none
   47a30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a34:	cmp	w1, #0x0
   47a38:	cbnz	w2, 47a4c <aarch64_opcode_lookup@@Base+0x4d8c>
   47a3c:	mov	w0, #0x1e8                 	// #488
   47a40:	mov	w1, #0x206                 	// #518
   47a44:	csel	w0, w0, w1, eq  // eq = none
   47a48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a4c:	mov	w0, #0x1f6                 	// #502
   47a50:	mov	w1, #0x212                 	// #530
   47a54:	csel	w0, w0, w1, eq  // eq = none
   47a58:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a5c:	cbnz	w1, 47a74 <aarch64_opcode_lookup@@Base+0x4db4>
   47a60:	tst	x0, #0x20000000
   47a64:	mov	w1, #0x204                 	// #516
   47a68:	mov	w0, #0x353                 	// #851
   47a6c:	csel	w0, w0, w1, eq  // eq = none
   47a70:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a74:	ubfx	x0, x0, #19, #1
   47a78:	add	w0, w0, #0x1f3
   47a7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47a80:	cbnz	w3, 47b58 <aarch64_opcode_lookup@@Base+0x4e98>
   47a84:	cbnz	w2, 47ab4 <aarch64_opcode_lookup@@Base+0x4df4>
   47a88:	cbnz	w1, 47aa0 <aarch64_opcode_lookup@@Base+0x4de0>
   47a8c:	tst	x0, #0x40000000
   47a90:	mov	w1, #0x2a4                 	// #676
   47a94:	mov	w0, #0x349                 	// #841
   47a98:	csel	w0, w0, w1, eq  // eq = none
   47a9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47aa0:	tst	x0, #0x20000000
   47aa4:	mov	w1, #0x200                 	// #512
   47aa8:	mov	w0, #0x1e3                 	// #483
   47aac:	csel	w0, w0, w1, eq  // eq = none
   47ab0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47ab4:	cbz	w1, 48da0 <aarch64_opcode_lookup@@Base+0x60e0>
   47ab8:	and	w1, w0, #0x20000000
   47abc:	and	w2, w0, #0x80000
   47ac0:	tbnz	w0, #16, 47b04 <aarch64_opcode_lookup@@Base+0x4e44>
   47ac4:	cbnz	w2, 47af0 <aarch64_opcode_lookup@@Base+0x4e30>
   47ac8:	tbnz	w0, #20, 47ae0 <aarch64_opcode_lookup@@Base+0x4e20>
   47acc:	cmp	w1, #0x0
   47ad0:	mov	w0, #0x1f1                 	// #497
   47ad4:	mov	w1, #0x20f                 	// #527
   47ad8:	csel	w0, w0, w1, eq  // eq = none
   47adc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47ae0:	cmp	w1, #0x0
   47ae4:	cset	w0, eq  // eq = none
   47ae8:	add	w0, w0, #0x21c
   47aec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47af0:	cmp	w1, #0x0
   47af4:	mov	w0, #0x1f2                 	// #498
   47af8:	mov	w1, #0x210                 	// #528
   47afc:	csel	w0, w0, w1, eq  // eq = none
   47b00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b04:	and	w0, w0, #0x800000
   47b08:	cmp	w1, #0x0
   47b0c:	cbnz	w2, 47b34 <aarch64_opcode_lookup@@Base+0x4e74>
   47b10:	cbnz	w0, 47b24 <aarch64_opcode_lookup@@Base+0x4e64>
   47b14:	mov	w0, #0x1ed                 	// #493
   47b18:	mov	w1, #0x20b                 	// #523
   47b1c:	csel	w0, w0, w1, eq  // eq = none
   47b20:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b24:	mov	w0, #0x1f9                 	// #505
   47b28:	mov	w1, #0x215                 	// #533
   47b2c:	csel	w0, w0, w1, eq  // eq = none
   47b30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b34:	cbnz	w0, 47b48 <aarch64_opcode_lookup@@Base+0x4e88>
   47b38:	mov	w0, #0x1ee                 	// #494
   47b3c:	mov	w1, #0x20c                 	// #524
   47b40:	csel	w0, w0, w1, eq  // eq = none
   47b44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b48:	mov	w0, #0x1fa                 	// #506
   47b4c:	mov	w1, #0x216                 	// #534
   47b50:	csel	w0, w0, w1, eq  // eq = none
   47b54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b58:	cbnz	w2, 47bf8 <aarch64_opcode_lookup@@Base+0x4f38>
   47b5c:	cbnz	w1, 47b78 <aarch64_opcode_lookup@@Base+0x4eb8>
   47b60:	tbnz	w0, #29, 48da8 <aarch64_opcode_lookup@@Base+0x60e8>
   47b64:	tst	x0, #0x40000000
   47b68:	mov	w1, #0x1e0                 	// #480
   47b6c:	mov	w0, #0x34d                 	// #845
   47b70:	csel	w0, w0, w1, eq  // eq = none
   47b74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b78:	tbnz	w0, #16, 47b90 <aarch64_opcode_lookup@@Base+0x4ed0>
   47b7c:	tst	x0, #0x20000000
   47b80:	mov	w1, #0x201                 	// #513
   47b84:	mov	w0, #0x1e5                 	// #485
   47b88:	csel	w0, w0, w1, eq  // eq = none
   47b8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47b90:	tbnz	w0, #19, 47bc8 <aarch64_opcode_lookup@@Base+0x4f08>
   47b94:	tbnz	w0, #20, 48db0 <aarch64_opcode_lookup@@Base+0x60f0>
   47b98:	and	w1, w0, #0x20000000
   47b9c:	tbnz	w0, #23, 47bb4 <aarch64_opcode_lookup@@Base+0x4ef4>
   47ba0:	cmp	w1, #0x0
   47ba4:	mov	w0, #0x1e9                 	// #489
   47ba8:	mov	w1, #0x207                 	// #519
   47bac:	csel	w0, w0, w1, eq  // eq = none
   47bb0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47bb4:	cmp	w1, #0x0
   47bb8:	mov	w0, #0x1f7                 	// #503
   47bbc:	mov	w1, #0x213                 	// #531
   47bc0:	csel	w0, w0, w1, eq  // eq = none
   47bc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47bc8:	and	w1, w0, #0x20000000
   47bcc:	tbnz	w0, #23, 47be4 <aarch64_opcode_lookup@@Base+0x4f24>
   47bd0:	cmp	w1, #0x0
   47bd4:	mov	w0, #0x1ea                 	// #490
   47bd8:	mov	w1, #0x208                 	// #520
   47bdc:	csel	w0, w0, w1, eq  // eq = none
   47be0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47be4:	cmp	w1, #0x0
   47be8:	mov	w0, #0x1f8                 	// #504
   47bec:	mov	w1, #0x214                 	// #532
   47bf0:	csel	w0, w0, w1, eq  // eq = none
   47bf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47bf8:	cbnz	w1, 47c14 <aarch64_opcode_lookup@@Base+0x4f54>
   47bfc:	tbnz	w0, #29, 48db8 <aarch64_opcode_lookup@@Base+0x60f8>
   47c00:	tst	x0, #0x40000000
   47c04:	mov	w1, #0x1e1                 	// #481
   47c08:	mov	w0, #0x355                 	// #853
   47c0c:	csel	w0, w0, w1, eq  // eq = none
   47c10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c14:	tbnz	w0, #16, 47c40 <aarch64_opcode_lookup@@Base+0x4f80>
   47c18:	and	w1, w0, #0x20000000
   47c1c:	tbnz	w0, #23, 47c30 <aarch64_opcode_lookup@@Base+0x4f70>
   47c20:	cmp	w1, #0x0
   47c24:	cset	w0, eq  // eq = none
   47c28:	add	w0, w0, #0x21e
   47c2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c30:	cmp	w1, #0x0
   47c34:	cset	w0, eq  // eq = none
   47c38:	add	w0, w0, #0x222
   47c3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c40:	ubfx	x0, x0, #19, #1
   47c44:	add	w0, w0, #0x1fb
   47c48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c4c:	and	w1, w0, #0x20000000
   47c50:	cbnz	w2, 47d08 <aarch64_opcode_lookup@@Base+0x5048>
   47c54:	cbnz	w1, 47ca8 <aarch64_opcode_lookup@@Base+0x4fe8>
   47c58:	tbnz	w0, #30, 47c70 <aarch64_opcode_lookup@@Base+0x4fb0>
   47c5c:	tst	x0, #0x10
   47c60:	mov	w1, #0x320                 	// #800
   47c64:	mov	w0, #0x31e                 	// #798
   47c68:	csel	w0, w0, w1, eq  // eq = none
   47c6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c70:	and	w1, w0, #0x2000
   47c74:	tbnz	w0, #12, 47c90 <aarch64_opcode_lookup@@Base+0x4fd0>
   47c78:	cbnz	w1, 48dc0 <aarch64_opcode_lookup@@Base+0x6100>
   47c7c:	tst	x0, #0x4000
   47c80:	mov	w1, #0x233                 	// #563
   47c84:	mov	w0, #0x235                 	// #565
   47c88:	csel	w0, w0, w1, eq  // eq = none
   47c8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47c90:	cbz	w1, 48dc8 <aarch64_opcode_lookup@@Base+0x6108>
   47c94:	tst	x0, #0x8000
   47c98:	mov	w1, #0x228                 	// #552
   47c9c:	mov	w0, #0x231                 	// #561
   47ca0:	csel	w0, w0, w1, eq  // eq = none
   47ca4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47ca8:	and	w1, w0, #0x2000
   47cac:	tbnz	w0, #12, 47cdc <aarch64_opcode_lookup@@Base+0x501c>
   47cb0:	cbnz	w1, 47cc8 <aarch64_opcode_lookup@@Base+0x5008>
   47cb4:	tst	x0, #0x4000
   47cb8:	mov	w1, #0x248                 	// #584
   47cbc:	mov	w0, #0x24a                 	// #586
   47cc0:	csel	w0, w0, w1, eq  // eq = none
   47cc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47cc8:	tst	x0, #0x800000
   47ccc:	mov	w1, #0x242                 	// #578
   47cd0:	mov	w0, #0x23c                 	// #572
   47cd4:	csel	w0, w0, w1, eq  // eq = none
   47cd8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47cdc:	and	w0, w0, #0x8000
   47ce0:	cmp	w0, #0x0
   47ce4:	cbnz	w1, 47cf8 <aarch64_opcode_lookup@@Base+0x5038>
   47ce8:	mov	w0, #0x249                 	// #585
   47cec:	mov	w1, #0x240                 	// #576
   47cf0:	csel	w0, w0, w1, eq  // eq = none
   47cf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47cf8:	mov	w0, #0x246                 	// #582
   47cfc:	mov	w1, #0x23b                 	// #571
   47d00:	csel	w0, w0, w1, eq  // eq = none
   47d04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47d08:	cbnz	w1, 47d64 <aarch64_opcode_lookup@@Base+0x50a4>
   47d0c:	tbz	w0, #30, 48dd0 <aarch64_opcode_lookup@@Base+0x6110>
   47d10:	and	w1, w0, #0x2000
   47d14:	tbnz	w0, #12, 47d34 <aarch64_opcode_lookup@@Base+0x5074>
   47d18:	cbnz	w1, 48dd8 <aarch64_opcode_lookup@@Base+0x6118>
   47d1c:	tbnz	w0, #14, 48de0 <aarch64_opcode_lookup@@Base+0x6120>
   47d20:	tst	x0, #0x8000
   47d24:	mov	w1, #0x236                 	// #566
   47d28:	mov	w0, #0x224                 	// #548
   47d2c:	csel	w0, w0, w1, eq  // eq = none
   47d30:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47d34:	cbnz	w1, 47d4c <aarch64_opcode_lookup@@Base+0x508c>
   47d38:	tst	x0, #0x8000
   47d3c:	mov	w1, #0x229                 	// #553
   47d40:	mov	w0, #0x227                 	// #551
   47d44:	csel	w0, w0, w1, eq  // eq = none
   47d48:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47d4c:	tbz	w0, #14, 48de8 <aarch64_opcode_lookup@@Base+0x6128>
   47d50:	tst	x0, #0x800000
   47d54:	mov	w1, #0x22f                 	// #559
   47d58:	mov	w0, #0x22d                 	// #557
   47d5c:	csel	w0, w0, w1, eq  // eq = none
   47d60:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47d64:	and	w1, w0, #0x2000
   47d68:	tbnz	w0, #12, 47da4 <aarch64_opcode_lookup@@Base+0x50e4>
   47d6c:	and	w2, w0, #0x4000
   47d70:	cbnz	w1, 47d8c <aarch64_opcode_lookup@@Base+0x50cc>
   47d74:	cbnz	w2, 48df0 <aarch64_opcode_lookup@@Base+0x6130>
   47d78:	tst	x0, #0x8000
   47d7c:	mov	w1, #0x24b                 	// #587
   47d80:	mov	w0, #0x237                 	// #567
   47d84:	csel	w0, w0, w1, eq  // eq = none
   47d88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47d8c:	cbz	w2, 48df8 <aarch64_opcode_lookup@@Base+0x6138>
   47d90:	tst	x0, #0x800000
   47d94:	mov	w1, #0x244                 	// #580
   47d98:	mov	w0, #0x23e                 	// #574
   47d9c:	csel	w0, w0, w1, eq  // eq = none
   47da0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47da4:	cmp	w1, #0x0
   47da8:	mov	w0, #0x23a                 	// #570
   47dac:	mov	w1, #0x247                 	// #583
   47db0:	csel	w0, w0, w1, eq  // eq = none
   47db4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47db8:	tbnz	w0, #15, 47fb4 <aarch64_opcode_lookup@@Base+0x52f4>
   47dbc:	and	w1, w0, #0x20000000
   47dc0:	cbnz	w2, 47eb8 <aarch64_opcode_lookup@@Base+0x51f8>
   47dc4:	and	w2, w0, #0x1000
   47dc8:	tbnz	w0, #10, 47e90 <aarch64_opcode_lookup@@Base+0x51d0>
   47dcc:	cbnz	w2, 47e44 <aarch64_opcode_lookup@@Base+0x5184>
   47dd0:	and	w2, w0, #0x4000
   47dd4:	tbnz	w0, #13, 47e0c <aarch64_opcode_lookup@@Base+0x514c>
   47dd8:	cbnz	w2, 47df4 <aarch64_opcode_lookup@@Base+0x5134>
   47ddc:	cbnz	w1, 48e00 <aarch64_opcode_lookup@@Base+0x6140>
   47de0:	tst	x0, #0x40000000
   47de4:	mov	w1, #0x942                 	// #2370
   47de8:	mov	w0, #0x93e                 	// #2366
   47dec:	csel	w0, w0, w1, eq  // eq = none
   47df0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47df4:	cbnz	w1, 48e08 <aarch64_opcode_lookup@@Base+0x6148>
   47df8:	tst	x0, #0x40000000
   47dfc:	mov	w1, #0x943                 	// #2371
   47e00:	mov	w0, #0x93f                 	// #2367
   47e04:	csel	w0, w0, w1, eq  // eq = none
   47e08:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e0c:	and	w0, w0, #0x40000000
   47e10:	cmp	w0, #0x0
   47e14:	cset	w0, ne  // ne = any
   47e18:	cbnz	w2, 47e30 <aarch64_opcode_lookup@@Base+0x5170>
   47e1c:	cbnz	w1, 47e28 <aarch64_opcode_lookup@@Base+0x5168>
   47e20:	add	w0, w0, #0x62
   47e24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e28:	add	w0, w0, #0x78
   47e2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e30:	cbnz	w1, 47e3c <aarch64_opcode_lookup@@Base+0x517c>
   47e34:	add	w0, w0, #0x66
   47e38:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e3c:	add	w0, w0, #0x7b
   47e40:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e44:	cbnz	w1, 48e10 <aarch64_opcode_lookup@@Base+0x6150>
   47e48:	and	w1, w0, #0x4000
   47e4c:	tbnz	w0, #13, 47e70 <aarch64_opcode_lookup@@Base+0x51b0>
   47e50:	and	w0, w0, #0x800000
   47e54:	cmp	w0, #0x0
   47e58:	cset	w0, eq  // eq = none
   47e5c:	cbnz	w1, 47e68 <aarch64_opcode_lookup@@Base+0x51a8>
   47e60:	add	w0, w0, #0x71
   47e64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e68:	add	w0, w0, #0x73
   47e6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e70:	and	w0, w0, #0x40000000
   47e74:	cmp	w0, #0x0
   47e78:	cset	w0, ne  // ne = any
   47e7c:	cbnz	w1, 47e88 <aarch64_opcode_lookup@@Base+0x51c8>
   47e80:	add	w0, w0, #0x64
   47e84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e88:	add	w0, w0, #0x68
   47e8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47e90:	cmp	w1, #0x0
   47e94:	cbnz	w2, 47ea8 <aarch64_opcode_lookup@@Base+0x51e8>
   47e98:	mov	w0, #0x85                  	// #133
   47e9c:	mov	w1, #0x8d                  	// #141
   47ea0:	csel	w0, w0, w1, eq  // eq = none
   47ea4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47ea8:	mov	w0, #0x86                  	// #134
   47eac:	mov	w1, #0x8e                  	// #142
   47eb0:	csel	w0, w0, w1, eq  // eq = none
   47eb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47eb8:	cbnz	w1, 47f58 <aarch64_opcode_lookup@@Base+0x5298>
   47ebc:	tbnz	w0, #30, 47ed4 <aarch64_opcode_lookup@@Base+0x5214>
   47ec0:	tst	x0, #0x200000
   47ec4:	mov	w1, #0x35d                 	// #861
   47ec8:	mov	w0, #0x359                 	// #857
   47ecc:	csel	w0, w0, w1, eq  // eq = none
   47ed0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47ed4:	and	w1, w0, #0x2000
   47ed8:	tbnz	w0, #10, 47f14 <aarch64_opcode_lookup@@Base+0x5254>
   47edc:	and	w2, w0, #0x4000
   47ee0:	cbnz	w1, 47f04 <aarch64_opcode_lookup@@Base+0x5244>
   47ee4:	and	w0, w0, #0x800000
   47ee8:	cmp	w0, #0x0
   47eec:	cset	w0, eq  // eq = none
   47ef0:	cbnz	w2, 47efc <aarch64_opcode_lookup@@Base+0x523c>
   47ef4:	add	w0, w0, #0x1ae
   47ef8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47efc:	add	w0, w0, #0x1b0
   47f00:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f04:	cmp	w2, #0x0
   47f08:	cset	w0, ne  // ne = any
   47f0c:	add	w0, w0, #0x1a9
   47f10:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f14:	tbnz	w0, #12, 47f2c <aarch64_opcode_lookup@@Base+0x526c>
   47f18:	cmp	w1, #0x0
   47f1c:	mov	w0, #0x24e                 	// #590
   47f20:	mov	w1, #0x250                 	// #592
   47f24:	csel	w0, w0, w1, eq  // eq = none
   47f28:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f2c:	and	w0, w0, #0x4000
   47f30:	cmp	w0, #0x0
   47f34:	cbnz	w1, 47f48 <aarch64_opcode_lookup@@Base+0x5288>
   47f38:	mov	w0, #0x24f                 	// #591
   47f3c:	mov	w1, #0x252                 	// #594
   47f40:	csel	w0, w0, w1, eq  // eq = none
   47f44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f48:	mov	w0, #0x251                 	// #593
   47f4c:	mov	w1, #0x253                 	// #595
   47f50:	csel	w0, w0, w1, eq  // eq = none
   47f54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f58:	and	w2, w0, #0x2000
   47f5c:	and	w1, w0, #0x4000
   47f60:	tbnz	w0, #12, 47f8c <aarch64_opcode_lookup@@Base+0x52cc>
   47f64:	cmp	w1, #0x0
   47f68:	cbnz	w2, 47f7c <aarch64_opcode_lookup@@Base+0x52bc>
   47f6c:	mov	w0, #0x25a                 	// #602
   47f70:	mov	w1, #0x25e                 	// #606
   47f74:	csel	w0, w0, w1, eq  // eq = none
   47f78:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f7c:	mov	w0, #0x25c                 	// #604
   47f80:	mov	w1, #0x260                 	// #608
   47f84:	csel	w0, w0, w1, eq  // eq = none
   47f88:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47f8c:	cmp	w1, #0x0
   47f90:	cbnz	w2, 47fa4 <aarch64_opcode_lookup@@Base+0x52e4>
   47f94:	mov	w0, #0x25b                 	// #603
   47f98:	mov	w1, #0x25f                 	// #607
   47f9c:	csel	w0, w0, w1, eq  // eq = none
   47fa0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47fa4:	mov	w0, #0x25d                 	// #605
   47fa8:	mov	w1, #0x261                 	// #609
   47fac:	csel	w0, w0, w1, eq  // eq = none
   47fb0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47fb4:	cbnz	w2, 4819c <aarch64_opcode_lookup@@Base+0x54dc>
   47fb8:	tbnz	w0, #10, 480c4 <aarch64_opcode_lookup@@Base+0x5404>
   47fbc:	and	w3, w0, #0x2000
   47fc0:	and	w1, w0, #0x4000
   47fc4:	tbnz	w0, #12, 48038 <aarch64_opcode_lookup@@Base+0x5378>
   47fc8:	and	w2, w0, #0x20000000
   47fcc:	cbnz	w3, 48004 <aarch64_opcode_lookup@@Base+0x5344>
   47fd0:	cbnz	w1, 47fec <aarch64_opcode_lookup@@Base+0x532c>
   47fd4:	cbz	w2, 48e18 <aarch64_opcode_lookup@@Base+0x6158>
   47fd8:	tst	x0, #0x40000000
   47fdc:	mov	w1, #0x944                 	// #2372
   47fe0:	mov	w0, #0x940                 	// #2368
   47fe4:	csel	w0, w0, w1, eq  // eq = none
   47fe8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   47fec:	cbz	w2, 48e20 <aarch64_opcode_lookup@@Base+0x6160>
   47ff0:	tst	x0, #0x40000000
   47ff4:	mov	w1, #0x945                 	// #2373
   47ff8:	mov	w0, #0x941                 	// #2369
   47ffc:	csel	w0, w0, w1, eq  // eq = none
   48000:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48004:	cbnz	w1, 48028 <aarch64_opcode_lookup@@Base+0x5368>
   48008:	and	w0, w0, #0x40000000
   4800c:	cmp	w0, #0x0
   48010:	cset	w0, ne  // ne = any
   48014:	cbnz	w2, 48020 <aarch64_opcode_lookup@@Base+0x5360>
   48018:	add	w0, w0, #0x6b
   4801c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48020:	add	w0, w0, #0x7d
   48024:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48028:	cmp	w2, #0x0
   4802c:	cset	w0, eq  // eq = none
   48030:	add	w0, w0, #0x923
   48034:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48038:	cbnz	w3, 48084 <aarch64_opcode_lookup@@Base+0x53c4>
   4803c:	and	w2, w0, #0x20000000
   48040:	cbnz	w1, 48070 <aarch64_opcode_lookup@@Base+0x53b0>
   48044:	tbnz	w0, #23, 4805c <aarch64_opcode_lookup@@Base+0x539c>
   48048:	cmp	w2, #0x0
   4804c:	mov	w0, #0x76                  	// #118
   48050:	mov	w1, #0x80                  	// #128
   48054:	csel	w0, w0, w1, eq  // eq = none
   48058:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4805c:	cmp	w2, #0x0
   48060:	mov	w0, #0x75                  	// #117
   48064:	mov	w1, #0x7f                  	// #127
   48068:	csel	w0, w0, w1, eq  // eq = none
   4806c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48070:	cmp	w2, #0x0
   48074:	mov	w0, #0x70                  	// #112
   48078:	mov	w1, #0x81                  	// #129
   4807c:	csel	w0, w0, w1, eq  // eq = none
   48080:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48084:	cbnz	w1, 48094 <aarch64_opcode_lookup@@Base+0x53d4>
   48088:	ubfx	x0, x0, #30, #1
   4808c:	add	w0, w0, #0x6d
   48090:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48094:	tbnz	w0, #29, 48e28 <aarch64_opcode_lookup@@Base+0x6168>
   48098:	and	w1, w0, #0x800000
   4809c:	tbnz	w0, #22, 480b0 <aarch64_opcode_lookup@@Base+0x53f0>
   480a0:	cmp	w1, #0x0
   480a4:	cset	w0, eq  // eq = none
   480a8:	add	w0, w0, #0x971
   480ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   480b0:	cbz	w1, 48e30 <aarch64_opcode_lookup@@Base+0x6170>
   480b4:	tst	x0, #0x40000000
   480b8:	cset	w0, eq  // eq = none
   480bc:	add	w0, w0, #0x984
   480c0:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   480c4:	and	w1, w0, #0x20000000
   480c8:	tbnz	w0, #11, 48140 <aarch64_opcode_lookup@@Base+0x5480>
   480cc:	tbnz	w0, #14, 480fc <aarch64_opcode_lookup@@Base+0x543c>
   480d0:	tbnz	w0, #12, 480e8 <aarch64_opcode_lookup@@Base+0x5428>
   480d4:	cmp	w1, #0x0
   480d8:	mov	w0, #0x87                  	// #135
   480dc:	mov	w1, #0x8f                  	// #143
   480e0:	csel	w0, w0, w1, eq  // eq = none
   480e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   480e8:	cmp	w1, #0x0
   480ec:	mov	w0, #0x88                  	// #136
   480f0:	mov	w1, #0x90                  	// #144
   480f4:	csel	w0, w0, w1, eq  // eq = none
   480f8:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   480fc:	tbnz	w0, #13, 48114 <aarch64_opcode_lookup@@Base+0x5454>
   48100:	cmp	w1, #0x0
   48104:	mov	w0, #0x89                  	// #137
   48108:	mov	w1, #0x91                  	// #145
   4810c:	csel	w0, w0, w1, eq  // eq = none
   48110:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48114:	tbnz	w0, #12, 4812c <aarch64_opcode_lookup@@Base+0x546c>
   48118:	cmp	w1, #0x0
   4811c:	mov	w0, #0x8a                  	// #138
   48120:	mov	w1, #0x92                  	// #146
   48124:	csel	w0, w0, w1, eq  // eq = none
   48128:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4812c:	cmp	w1, #0x0
   48130:	mov	w0, #0x8b                  	// #139
   48134:	mov	w1, #0x94                  	// #148
   48138:	csel	w0, w0, w1, eq  // eq = none
   4813c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48140:	tbnz	w0, #12, 48164 <aarch64_opcode_lookup@@Base+0x54a4>
   48144:	and	w0, w0, #0x40000000
   48148:	cmp	w0, #0x0
   4814c:	cset	w0, ne  // ne = any
   48150:	cbnz	w1, 4815c <aarch64_opcode_lookup@@Base+0x549c>
   48154:	add	w0, w0, #0x17e
   48158:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4815c:	add	w0, w0, #0x196
   48160:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48164:	tbnz	w0, #13, 48188 <aarch64_opcode_lookup@@Base+0x54c8>
   48168:	and	w0, w0, #0x40000000
   4816c:	cmp	w0, #0x0
   48170:	cset	w0, ne  // ne = any
   48174:	cbnz	w1, 48180 <aarch64_opcode_lookup@@Base+0x54c0>
   48178:	add	w0, w0, #0x182
   4817c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48180:	add	w0, w0, #0x19a
   48184:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48188:	cmp	w1, #0x0
   4818c:	mov	w0, #0x8c                  	// #140
   48190:	mov	w1, #0x1a2                 	// #418
   48194:	csel	w0, w0, w1, eq  // eq = none
   48198:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   4819c:	tbnz	w0, #29, 48204 <aarch64_opcode_lookup@@Base+0x5544>
   481a0:	tbnz	w0, #30, 481b8 <aarch64_opcode_lookup@@Base+0x54f8>
   481a4:	tst	x0, #0x200000
   481a8:	mov	w1, #0x35f                 	// #863
   481ac:	mov	w0, #0x35b                 	// #859
   481b0:	csel	w0, w0, w1, eq  // eq = none
   481b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   481b8:	tbnz	w0, #10, 481d8 <aarch64_opcode_lookup@@Base+0x5518>
   481bc:	tbz	w0, #12, 48e38 <aarch64_opcode_lookup@@Base+0x6178>
   481c0:	tbnz	w0, #13, 48e40 <aarch64_opcode_lookup@@Base+0x6180>
   481c4:	tbnz	w0, #14, 48e48 <aarch64_opcode_lookup@@Base+0x6188>
   481c8:	tst	x0, #0x800000
   481cc:	cset	w0, eq  // eq = none
   481d0:	add	w0, w0, #0x1b2
   481d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   481d8:	tbnz	w0, #11, 481f0 <aarch64_opcode_lookup@@Base+0x5530>
   481dc:	tst	x0, #0x1000
   481e0:	mov	w1, #0x254                 	// #596
   481e4:	mov	w0, #0x256                 	// #598
   481e8:	csel	w0, w0, w1, eq  // eq = none
   481ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   481f0:	tst	x0, #0x2000
   481f4:	mov	w1, #0x258                 	// #600
   481f8:	mov	w0, #0x255                 	// #597
   481fc:	csel	w0, w0, w1, eq  // eq = none
   48200:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48204:	tbnz	w0, #10, 48220 <aarch64_opcode_lookup@@Base+0x5560>
   48208:	tbnz	w0, #13, 48e50 <aarch64_opcode_lookup@@Base+0x6190>
   4820c:	tbnz	w0, #14, 48e58 <aarch64_opcode_lookup@@Base+0x6198>
   48210:	tst	x0, #0x800000
   48214:	cset	w0, eq  // eq = none
   48218:	add	w0, w0, #0x1b4
   4821c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48220:	and	w1, w0, #0x1000
   48224:	tbnz	w0, #11, 48240 <aarch64_opcode_lookup@@Base+0x5580>
   48228:	cbnz	w1, 48e60 <aarch64_opcode_lookup@@Base+0x61a0>
   4822c:	tst	x0, #0x2000
   48230:	mov	w1, #0x266                 	// #614
   48234:	mov	w0, #0x262                 	// #610
   48238:	csel	w0, w0, w1, eq  // eq = none
   4823c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48240:	cbz	w1, 48e68 <aarch64_opcode_lookup@@Base+0x61a8>
   48244:	tst	x0, #0x2000
   48248:	mov	w1, #0x268                 	// #616
   4824c:	mov	w0, #0x265                 	// #613
   48250:	csel	w0, w0, w1, eq  // eq = none
   48254:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48258:	mov	w0, #0x3b4                 	// #948
   4825c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48260:	mov	w0, #0x3b5                 	// #949
   48264:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48268:	mov	w0, #0x3f3                 	// #1011
   4826c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48270:	mov	w0, #0x3bc                 	// #956
   48274:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48278:	mov	w0, #0x3fb                 	// #1019
   4827c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48280:	mov	w0, #0x3b8                 	// #952
   48284:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48288:	mov	w0, #0x3b9                 	// #953
   4828c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48290:	mov	w0, #0x3c4                 	// #964
   48294:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48298:	mov	w0, #0x3fa                 	// #1018
   4829c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482a0:	mov	w0, #0x3bd                 	// #957
   482a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482a8:	mov	w0, #0x3fc                 	// #1020
   482ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482b0:	mov	w0, #0x3da                 	// #986
   482b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482b8:	mov	w0, #0x3a1                 	// #929
   482bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482c0:	mov	w0, #0x3a2                 	// #930
   482c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482c8:	mov	w0, #0x40f                 	// #1039
   482cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482d0:	mov	w0, #0x416                 	// #1046
   482d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482d8:	mov	w0, #0x417                 	// #1047
   482dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482e0:	mov	w0, #0x418                 	// #1048
   482e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482e8:	mov	w0, #0x403                 	// #1027
   482ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482f0:	mov	w0, #0x40a                 	// #1034
   482f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   482f8:	mov	w0, #0x40b                 	// #1035
   482fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48300:	mov	w0, #0x40c                 	// #1036
   48304:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48308:	mov	w0, #0x43f                 	// #1087
   4830c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48310:	mov	w0, #0x446                 	// #1094
   48314:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48318:	mov	w0, #0x447                 	// #1095
   4831c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48320:	mov	w0, #0x448                 	// #1096
   48324:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48328:	mov	w0, #0x3c0                 	// #960
   4832c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48330:	mov	w0, #0x427                 	// #1063
   48334:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48338:	mov	w0, #0x42e                 	// #1070
   4833c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48340:	mov	w0, #0x42f                 	// #1071
   48344:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48348:	mov	w0, #0x430                 	// #1072
   4834c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48350:	mov	w0, #0x457                 	// #1111
   48354:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48358:	mov	w0, #0x45e                 	// #1118
   4835c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48360:	mov	w0, #0x45f                 	// #1119
   48364:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48368:	mov	w0, #0x460                 	// #1120
   4836c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48370:	mov	w0, #0x41b                 	// #1051
   48374:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48378:	mov	w0, #0x422                 	// #1058
   4837c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48380:	mov	w0, #0x423                 	// #1059
   48384:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48388:	mov	w0, #0x424                 	// #1060
   4838c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48390:	mov	w0, #0x44b                 	// #1099
   48394:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48398:	mov	w0, #0x452                 	// #1106
   4839c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483a0:	mov	w0, #0x453                 	// #1107
   483a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483a8:	mov	w0, #0x454                 	// #1108
   483ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483b0:	mov	w0, #0x433                 	// #1075
   483b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483b8:	mov	w0, #0x43a                 	// #1082
   483bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483c0:	mov	w0, #0x43b                 	// #1083
   483c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483c8:	mov	w0, #0x43c                 	// #1084
   483cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483d0:	mov	w0, #0x463                 	// #1123
   483d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483d8:	mov	w0, #0x46a                 	// #1130
   483dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483e0:	mov	w0, #0x46b                 	// #1131
   483e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483e8:	mov	w0, #0x46c                 	// #1132
   483ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483f0:	mov	w0, #0x396                 	// #918
   483f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   483f8:	mov	w0, #0x397                 	// #919
   483fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48400:	mov	w0, #0x395                 	// #917
   48404:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48408:	mov	w0, #0x38c                 	// #908
   4840c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48410:	mov	w0, #0x38d                 	// #909
   48414:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48418:	mov	w0, #0x36d                 	// #877
   4841c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48420:	mov	w0, #0x36e                 	// #878
   48424:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48428:	mov	w0, #0x36c                 	// #876
   4842c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48430:	mov	w0, #0x374                 	// #884
   48434:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48438:	mov	w0, #0x370                 	// #880
   4843c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48440:	mov	w0, #0x3c3                 	// #963
   48444:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48448:	mov	w0, #0x380                 	// #896
   4844c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48450:	mov	w0, #0x375                 	// #885
   48454:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48458:	mov	w0, #0x371                 	// #881
   4845c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48460:	mov	w0, #0x3a5                 	// #933
   48464:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48468:	mov	w0, #0x381                 	// #897
   4846c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48470:	mov	w0, #0x950                 	// #2384
   48474:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48478:	mov	w0, #0x4a1                 	// #1185
   4847c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48480:	mov	w0, #0x2d2                 	// #722
   48484:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48488:	mov	w0, #0x2d1                 	// #721
   4848c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48490:	mov	w0, #0x2db                 	// #731
   48494:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48498:	mov	w0, #0x2d4                 	// #724
   4849c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484a0:	mov	w0, #0x2d9                 	// #729
   484a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484a8:	mov	w0, #0x2c7                 	// #711
   484ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484b0:	mov	w0, #0x2b7                 	// #695
   484b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484b8:	mov	w0, #0x2c3                 	// #707
   484bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484c0:	mov	w0, #0x946                 	// #2374
   484c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484c8:	mov	w0, #0x2c2                 	// #706
   484cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484d0:	mov	w0, #0x2dc                 	// #732
   484d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484d8:	mov	w0, #0x2d5                 	// #725
   484dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484e0:	mov	w0, #0x2da                 	// #730
   484e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484e8:	mov	w0, #0x2c8                 	// #712
   484ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484f0:	mov	w0, #0x2c4                 	// #708
   484f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   484f8:	mov	w0, #0x2f5                 	// #757
   484fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48500:	mov	w0, #0x271                 	// #625
   48504:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48508:	mov	w0, #0x2e1                 	// #737
   4850c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48510:	mov	w0, #0x2df                 	// #735
   48514:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48518:	mov	w0, #0x718                 	// #1816
   4851c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48520:	mov	w0, #0x725                 	// #1829
   48524:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48528:	mov	w0, #0x799                 	// #1945
   4852c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48530:	mov	w0, #0x7b0                 	// #1968
   48534:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48538:	mov	w0, #0x808                 	// #2056
   4853c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48540:	mov	w0, #0x745                 	// #1861
   48544:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48548:	mov	w0, #0x7d9                 	// #2009
   4854c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48550:	mov	w0, #0x6e5                 	// #1765
   48554:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48558:	mov	w0, #0x626                 	// #1574
   4855c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48560:	mov	w0, #0x95b                 	// #2395
   48564:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48568:	mov	w0, #0x95c                 	// #2396
   4856c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48570:	mov	w0, #0x50c                 	// #1292
   48574:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48578:	mov	w0, #0x8a3                 	// #2211
   4857c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48580:	mov	w0, #0x50d                 	// #1293
   48584:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48588:	mov	w0, #0x8c8                 	// #2248
   4858c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48590:	mov	w0, #0x859                 	// #2137
   48594:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48598:	mov	w0, #0x6c8                 	// #1736
   4859c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485a0:	mov	w0, #0x8f3                 	// #2291
   485a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485a8:	mov	w0, #0x904                 	// #2308
   485ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485b0:	mov	w0, #0x8ee                 	// #2286
   485b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485b8:	mov	w0, #0x8f8                 	// #2296
   485bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485c0:	mov	w0, #0x508                 	// #1288
   485c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485c8:	mov	w0, #0x509                 	// #1289
   485cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485d0:	mov	w0, #0x5fe                 	// #1534
   485d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485d8:	mov	w0, #0x613                 	// #1555
   485dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485e0:	mov	w0, #0x6cb                 	// #1739
   485e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485e8:	mov	w0, #0x4fd                 	// #1277
   485ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485f0:	mov	w0, #0x6fa                 	// #1786
   485f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   485f8:	mov	w0, #0x5f6                 	// #1526
   485fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48600:	mov	w0, #0x6ca                 	// #1738
   48604:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48608:	mov	w0, #0x742                 	// #1858
   4860c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48610:	mov	w0, #0x5d0                 	// #1488
   48614:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48618:	mov	w0, #0x734                 	// #1844
   4861c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48620:	mov	w0, #0x7d6                 	// #2006
   48624:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48628:	mov	w0, #0x553                 	// #1363
   4862c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48630:	mov	w0, #0x7c8                 	// #1992
   48634:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48638:	mov	w0, #0x5e8                 	// #1512
   4863c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48640:	mov	w0, #0x5fd                 	// #1533
   48644:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48648:	mov	w0, #0x6fb                 	// #1787
   4864c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48650:	mov	w0, #0x5f8                 	// #1528
   48654:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48658:	mov	w0, #0x6ce                 	// #1742
   4865c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48660:	mov	w0, #0x7b9                 	// #1977
   48664:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48668:	mov	w0, #0x914                 	// #2324
   4866c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48670:	mov	w0, #0x6f3                 	// #1779
   48674:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48678:	mov	w0, #0x68c                 	// #1676
   4867c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48680:	mov	w0, #0x6d4                 	// #1748
   48684:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48688:	mov	w0, #0x501                 	// #1281
   4868c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48690:	mov	w0, #0x6cd                 	// #1741
   48694:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48698:	mov	w0, #0x85c                 	// #2140
   4869c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486a0:	mov	w0, #0x8d9                 	// #2265
   486a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486a8:	mov	w0, #0x88c                 	// #2188
   486ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486b0:	mov	w0, #0x684                 	// #1668
   486b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486b8:	mov	w0, #0x690                 	// #1680
   486bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486c0:	mov	w0, #0x6f4                 	// #1780
   486c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486c8:	mov	w0, #0x68e                 	// #1678
   486cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486d0:	mov	w0, #0x6cc                 	// #1740
   486d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486d8:	mov	w0, #0x881                 	// #2177
   486dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486e0:	mov	w0, #0x869                 	// #2153
   486e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486e8:	mov	w0, #0x8e6                 	// #2278
   486ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486f0:	mov	w0, #0x6ec                 	// #1772
   486f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   486f8:	mov	w0, #0x675                 	// #1653
   486fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48700:	mov	w0, #0x6cf                 	// #1743
   48704:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48708:	mov	w0, #0x898                 	// #2200
   4870c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48710:	mov	w0, #0x679                 	// #1657
   48714:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48718:	mov	w0, #0x886                 	// #2182
   4871c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48720:	mov	w0, #0x677                 	// #1655
   48724:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48728:	mov	w0, #0x887                 	// #2183
   4872c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48730:	mov	w0, #0x56a                 	// #1386
   48734:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48738:	mov	w0, #0x747                 	// #1863
   4873c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48740:	mov	w0, #0x75c                 	// #1884
   48744:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48748:	mov	w0, #0x813                 	// #2067
   4874c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48750:	mov	w0, #0x750                 	// #1872
   48754:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48758:	mov	w0, #0x765                 	// #1893
   4875c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48760:	mov	w0, #0x74e                 	// #1870
   48764:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48768:	mov	w0, #0x59f                 	// #1439
   4876c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48770:	mov	w0, #0x5a3                 	// #1443
   48774:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48778:	mov	w0, #0x74a                 	// #1866
   4877c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48780:	mov	w0, #0x75d                 	// #1885
   48784:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48788:	mov	w0, #0x762                 	// #1890
   4878c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48790:	mov	w0, #0x75e                 	// #1886
   48794:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48798:	mov	w0, #0x973                 	// #2419
   4879c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487a0:	mov	w0, #0x763                 	// #1891
   487a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487a8:	mov	w0, #0x5aa                 	// #1450
   487ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487b0:	mov	w0, #0x75f                 	// #1887
   487b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487b8:	mov	w0, #0x775                 	// #1909
   487bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487c0:	mov	w0, #0x779                 	// #1913
   487c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487c8:	mov	w0, #0x95d                 	// #2397
   487cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487d0:	mov	w0, #0x975                 	// #2421
   487d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487d8:	mov	w0, #0x95e                 	// #2398
   487dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487e0:	mov	w0, #0x811                 	// #2065
   487e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487e8:	mov	w0, #0x55f                 	// #1375
   487ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487f0:	mov	w0, #0x967                 	// #2407
   487f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   487f8:	mov	w0, #0x968                 	// #2408
   487fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48800:	mov	w0, #0x70d                 	// #1805
   48804:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48808:	mov	w0, #0x704                 	// #1796
   4880c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48810:	mov	w0, #0x8ca                 	// #2250
   48814:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48818:	mov	w0, #0x8c9                 	// #2249
   4881c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48820:	mov	w0, #0x7dc                 	// #2012
   48824:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48828:	mov	w0, #0x70a                 	// #1802
   4882c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48830:	mov	w0, #0x548                 	// #1352
   48834:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48838:	mov	w0, #0x71c                 	// #1820
   4883c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48840:	mov	w0, #0x7ee                 	// #2030
   48844:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48848:	mov	w0, #0x7ed                 	// #2029
   4884c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48850:	mov	w0, #0x702                 	// #1794
   48854:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48858:	mov	w0, #0x63c                 	// #1596
   4885c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48860:	mov	w0, #0x6f6                 	// #1782
   48864:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48868:	mov	w0, #0x830                 	// #2096
   4886c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48870:	mov	w0, #0x6ef                 	// #1775
   48874:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48878:	mov	w0, #0x6a2                 	// #1698
   4887c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48880:	mov	w0, #0x62e                 	// #1582
   48884:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48888:	mov	w0, #0x62f                 	// #1583
   4888c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48890:	mov	w0, #0x8ba                 	// #2234
   48894:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48898:	mov	w0, #0x958                 	// #2392
   4889c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488a0:	mov	w0, #0x5eb                 	// #1515
   488a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488a8:	mov	w0, #0x639                 	// #1593
   488ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488b0:	mov	w0, #0x8f9                 	// #2297
   488b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488b8:	mov	w0, #0x8fa                 	// #2298
   488bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488c0:	mov	w0, #0x849                 	// #2121
   488c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488c8:	mov	w0, #0x84a                 	// #2122
   488cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488d0:	mov	w0, #0x826                 	// #2086
   488d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488d8:	mov	w0, #0x693                 	// #1683
   488dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488e0:	mov	w0, #0x694                 	// #1684
   488e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488e8:	mov	w0, #0x695                 	// #1685
   488ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488f0:	mov	w0, #0x903                 	// #2307
   488f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   488f8:	mov	w0, #0x696                 	// #1686
   488fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48900:	mov	w0, #0x8e9                 	// #2281
   48904:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48908:	mov	w0, #0x8ec                 	// #2284
   4890c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48910:	mov	w0, #0x66b                 	// #1643
   48914:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48918:	mov	w0, #0x6a3                 	// #1699
   4891c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48920:	mov	w0, #0x916                 	// #2326
   48924:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48928:	mov	w0, #0x915                 	// #2325
   4892c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48930:	mov	w0, #0x91d                 	// #2333
   48934:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48938:	mov	w0, #0x795                 	// #1941
   4893c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48940:	mov	w0, #0x59e                 	// #1438
   48944:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48948:	mov	w0, #0x564                 	// #1380
   4894c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48950:	mov	w0, #0x5c1                 	// #1473
   48954:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48958:	mov	w0, #0x596                 	// #1430
   4895c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48960:	mov	w0, #0x567                 	// #1383
   48964:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48968:	mov	w0, #0x568                 	// #1384
   4896c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48970:	mov	w0, #0x56d                 	// #1389
   48974:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48978:	mov	w0, #0x59c                 	// #1436
   4897c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48980:	mov	w0, #0x575                 	// #1397
   48984:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48988:	mov	w0, #0x8c4                 	// #2244
   4898c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48990:	mov	w0, #0x5a2                 	// #1442
   48994:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48998:	mov	w0, #0x515                 	// #1301
   4899c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489a0:	mov	w0, #0x512                 	// #1298
   489a4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489a8:	mov	w0, #0x55d                 	// #1373
   489ac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489b0:	mov	w0, #0x506                 	// #1286
   489b4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489b8:	mov	w0, #0x6d6                 	// #1750
   489bc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489c0:	mov	w0, #0x5b0                 	// #1456
   489c4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489c8:	mov	w0, #0x796                 	// #1942
   489cc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489d0:	mov	w0, #0x76d                 	// #1901
   489d4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489d8:	mov	w0, #0x5b1                 	// #1457
   489dc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489e0:	mov	w0, #0x6ff                 	// #1791
   489e4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489e8:	mov	w0, #0x6e0                 	// #1760
   489ec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489f0:	mov	w0, #0x6e2                 	// #1762
   489f4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   489f8:	mov	w0, #0x5c6                 	// #1478
   489fc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a00:	mov	w0, #0x593                 	// #1427
   48a04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a08:	mov	w0, #0x76e                 	// #1902
   48a0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a10:	mov	w0, #0x5b6                 	// #1462
   48a14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a18:	mov	w0, #0x712                 	// #1810
   48a1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a20:	mov	w0, #0x5bb                 	// #1467
   48a24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a28:	mov	w0, #0x5b5                 	// #1461
   48a2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a30:	mov	w0, #0x57d                 	// #1405
   48a34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a38:	mov	w0, #0x583                 	// #1411
   48a3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a40:	mov	w0, #0x57f                 	// #1407
   48a44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a48:	mov	w0, #0x58a                 	// #1418
   48a4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a50:	mov	w0, #0x7aa                 	// #1962
   48a54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a58:	mov	w0, #0x5c0                 	// #1472
   48a5c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a60:	mov	w0, #0x589                 	// #1417
   48a64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a68:	mov	w0, #0x5b7                 	// #1463
   48a6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a70:	mov	w0, #0x563                 	// #1379
   48a74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a78:	mov	w0, #0x772                 	// #1906
   48a7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a80:	mov	w0, #0x544                 	// #1348
   48a84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a88:	mov	w0, #0x740                 	// #1856
   48a8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a90:	mov	w0, #0x741                 	// #1857
   48a94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48a98:	mov	w0, #0x5cf                 	// #1487
   48a9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48aa0:	mov	w0, #0x732                 	// #1842
   48aa4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48aa8:	mov	w0, #0x7c5                 	// #1989
   48aac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ab0:	mov	w0, #0x7c6                 	// #1990
   48ab4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ab8:	mov	w0, #0x728                 	// #1832
   48abc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ac0:	mov	w0, #0x7bc                 	// #1980
   48ac4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ac8:	mov	w0, #0x798                 	// #1944
   48acc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ad0:	mov	w0, #0x7da                 	// #2010
   48ad4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ad8:	mov	w0, #0x770                 	// #1904
   48adc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ae0:	mov	w0, #0x5a6                 	// #1446
   48ae4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ae8:	mov	w0, #0x773                 	// #1907
   48aec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48af0:	mov	w0, #0x5b2                 	// #1458
   48af4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48af8:	mov	w0, #0x291                 	// #657
   48afc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b00:	mov	w0, #0x2f1                 	// #753
   48b04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b08:	mov	w0, #0x280                 	// #640
   48b0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b10:	mov	w0, #0x289                 	// #649
   48b14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b18:	mov	w0, #0x28b                 	// #651
   48b1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b20:	mov	w0, #0x28a                 	// #650
   48b24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b28:	mov	w0, #0x28c                 	// #652
   48b2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b30:	mov	w0, #0x32a                 	// #810
   48b34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b38:	mov	w0, #0x4a4                 	// #1188
   48b3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b40:	mov	w0, #0x3d0                 	// #976
   48b44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b48:	mov	w0, #0x3d6                 	// #982
   48b4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b50:	mov	w0, #0x1c0                 	// #448
   48b54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b58:	mov	w0, #0x3d1                 	// #977
   48b5c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b60:	mov	w0, #0x3d7                 	// #983
   48b64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b68:	mov	w0, #0x1c4                 	// #452
   48b6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b70:	mov	w0, #0x3db                 	// #987
   48b74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b78:	mov	w0, #0x95                  	// #149
   48b7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b80:	mov	w0, #0x922                 	// #2338
   48b84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b88:	mov	w0, #0x96                  	// #150
   48b8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b90:	mov	w0, #0x970                 	// #2416
   48b94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48b98:	mov	w0, #0x98                  	// #152
   48b9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ba0:	mov	w0, #0x92d                 	// #2349
   48ba4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ba8:	mov	w0, #0x930                 	// #2352
   48bac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bb0:	mov	w0, #0x931                 	// #2353
   48bb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bb8:	mov	w0, #0x84                  	// #132
   48bbc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bc0:	mov	w0, #0x9c                  	// #156
   48bc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bc8:	mov	w0, #0x174                 	// #372
   48bcc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bd0:	mov	w0, #0x173                 	// #371
   48bd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bd8:	mov	w0, #0x97e                 	// #2430
   48bdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48be0:	mov	w0, #0x97c                 	// #2428
   48be4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48be8:	mov	w0, #0x2a9                 	// #681
   48bec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bf0:	mov	w0, #0x22a                 	// #554
   48bf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48bf8:	mov	w0, #0x241                 	// #577
   48bfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c00:	mov	w0, #0x24c                 	// #588
   48c04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c08:	mov	w0, #0x24d                 	// #589
   48c0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c10:	mov	w0, #0x92c                 	// #2348
   48c14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c18:	mov	w0, #0xa2                  	// #162
   48c1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c20:	mov	w0, #0xa4                  	// #164
   48c24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c28:	mov	w0, #0xa3                  	// #163
   48c2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c30:	mov	w0, #0x116                 	// #278
   48c34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c38:	mov	w0, #0xd5                  	// #213
   48c3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c40:	mov	w0, #0xd8                  	// #216
   48c44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c48:	mov	w0, #0xd6                  	// #214
   48c4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c50:	mov	w0, #0xd9                  	// #217
   48c54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c58:	mov	w0, #0xda                  	// #218
   48c5c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c60:	mov	w0, #0x14a                 	// #330
   48c64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c68:	mov	w0, #0x3c                  	// #60
   48c6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c70:	mov	w0, #0x44                  	// #68
   48c74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c78:	mov	w0, #0x928                 	// #2344
   48c7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c80:	mov	w0, #0xaa                  	// #170
   48c84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c88:	mov	w0, #0xdb                  	// #219
   48c8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c90:	mov	w0, #0x935                 	// #2357
   48c94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48c98:	mov	w0, #0x25                  	// #37
   48c9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ca0:	mov	w0, #0x24                  	// #36
   48ca4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ca8:	mov	w0, #0xac                  	// #172
   48cac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cb0:	mov	w0, #0x20                  	// #32
   48cb4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cb8:	mov	w0, #0x105                 	// #261
   48cbc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cc0:	mov	w0, #0x104                 	// #260
   48cc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cc8:	mov	w0, #0x14f                 	// #335
   48ccc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cd0:	mov	w0, #0x156                 	// #342
   48cd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cd8:	mov	w0, #0x16a                 	// #362
   48cdc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ce0:	mov	w0, #0x150                 	// #336
   48ce4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48ce8:	mov	w0, #0x125                 	// #293
   48cec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cf0:	mov	w0, #0x135                 	// #309
   48cf4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48cf8:	mov	w0, #0x15e                 	// #350
   48cfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d00:	mov	w0, #0x16c                 	// #364
   48d04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d08:	mov	w0, #0x122                 	// #290
   48d0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d10:	mov	w0, #0x13b                 	// #315
   48d14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d18:	mov	w0, #0x307                 	// #775
   48d1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d20:	mov	w0, #0x303                 	// #771
   48d24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d28:	mov	w0, #0x30b                 	// #779
   48d2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d30:	mov	w0, #0x309                 	// #777
   48d34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d38:	mov	w0, #0x305                 	// #773
   48d3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d40:	mov	w0, #0x339                 	// #825
   48d44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d48:	mov	w0, #0x33d                 	// #829
   48d4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d50:	mov	w0, #0x33b                 	// #827
   48d54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d58:	mov	w0, #0x33f                 	// #831
   48d5c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d60:	mov	w0, #0x338                 	// #824
   48d64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d68:	mov	w0, #0x345                 	// #837
   48d6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d70:	mov	w0, #0x361                 	// #865
   48d74:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d78:	mov	w0, #0x1a7                 	// #423
   48d7c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d80:	mov	w0, #0x1ff                 	// #511
   48d84:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d88:	mov	w0, #0x203                 	// #515
   48d8c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d90:	mov	w0, #0x202                 	// #514
   48d94:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48d98:	mov	w0, #0x1e4                 	// #484
   48d9c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48da0:	mov	w0, #0x351                 	// #849
   48da4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48da8:	mov	w0, #0x1fd                 	// #509
   48dac:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48db0:	mov	w0, #0x219                 	// #537
   48db4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48db8:	mov	w0, #0x1fe                 	// #510
   48dbc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48dc0:	mov	w0, #0x22b                 	// #555
   48dc4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48dc8:	mov	w0, #0x234                 	// #564
   48dcc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48dd0:	mov	w0, #0x363                 	// #867
   48dd4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48dd8:	mov	w0, #0x225                 	// #549
   48ddc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48de0:	mov	w0, #0x226                 	// #550
   48de4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48de8:	mov	w0, #0x232                 	// #562
   48dec:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48df0:	mov	w0, #0x239                 	// #569
   48df4:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48df8:	mov	w0, #0x238                 	// #568
   48dfc:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e00:	mov	w0, #0x77                  	// #119
   48e04:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e08:	mov	w0, #0x7a                  	// #122
   48e0c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e10:	mov	w0, #0x83                  	// #131
   48e14:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e18:	mov	w0, #0x6a                  	// #106
   48e1c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e20:	mov	w0, #0x6f                  	// #111
   48e24:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e28:	mov	w0, #0x82                  	// #130
   48e2c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e30:	mov	w0, #0x97d                 	// #2429
   48e34:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e38:	mov	w0, #0x1ac                 	// #428
   48e3c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e40:	mov	w0, #0x1ab                 	// #427
   48e44:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e48:	mov	w0, #0x1ad                 	// #429
   48e4c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e50:	mov	w0, #0x1b7                 	// #439
   48e54:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e58:	mov	w0, #0x1b6                 	// #438
   48e5c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e60:	mov	w0, #0x264                 	// #612
   48e64:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>
   48e68:	mov	w0, #0x263                 	// #611
   48e6c:	b	42cdc <aarch64_opcode_lookup@@Base+0x1c>

0000000000048e70 <aarch64_find_next_opcode@@Base>:
   48e70:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   48e74:	ldr	x1, [x2, #3848]
   48e78:	sub	x1, x0, x1
   48e7c:	mov	x0, #0x8e39                	// #36409
   48e80:	movk	x0, #0x38e3, lsl #16
   48e84:	asr	x1, x1, #4
   48e88:	movk	x0, #0xe38e, lsl #32
   48e8c:	movk	x0, #0x8e38, lsl #48
   48e90:	mul	x1, x1, x0
   48e94:	cmp	w1, #0x363
   48e98:	b.gt	49010 <aarch64_find_next_opcode@@Base+0x1a0>
   48e9c:	cmp	w1, #0x2f6
   48ea0:	b.gt	48f60 <aarch64_find_next_opcode@@Base+0xf0>
   48ea4:	cmp	w1, #0x1dd
   48ea8:	b.gt	48fe4 <aarch64_find_next_opcode@@Base+0x174>
   48eac:	cmp	w1, #0x175
   48eb0:	b.gt	48f8c <aarch64_find_next_opcode@@Base+0x11c>
   48eb4:	cmp	w1, #0x93
   48eb8:	b.gt	4905c <aarch64_find_next_opcode@@Base+0x1ec>
   48ebc:	cmp	w1, #0x84
   48ec0:	b.gt	48fb8 <aarch64_find_next_opcode@@Base+0x148>
   48ec4:	cmp	w1, #0xc
   48ec8:	b.eq	49458 <aarch64_find_next_opcode@@Base+0x5e8>  // b.none
   48ecc:	cmp	w1, #0x10
   48ed0:	mov	w0, #0x14                  	// #20
   48ed4:	b.eq	48f04 <aarch64_find_next_opcode@@Base+0x94>  // b.none
   48ed8:	b	4905c <aarch64_find_next_opcode@@Base+0x1ec>
   48edc:	sub	w1, w1, #0x66e
   48ee0:	cmp	w1, #0x11
   48ee4:	b.hi	4905c <aarch64_find_next_opcode@@Base+0x1ec>  // b.pmore
   48ee8:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48eec:	add	x0, x0, #0x3cc
   48ef0:	ldrh	w0, [x0, w1, uxtw #1]
   48ef4:	adr	x1, 48f00 <aarch64_find_next_opcode@@Base+0x90>
   48ef8:	add	x0, x1, w0, sxth #2
   48efc:	br	x0
   48f00:	mov	w0, #0x671                 	// #1649
   48f04:	ldr	x2, [x2, #3848]
   48f08:	mov	w1, #0x90                  	// #144
   48f0c:	smaddl	x0, w0, w1, x2
   48f10:	ret
   48f14:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48f18:	add	x0, x0, #0x3f0
   48f1c:	ldrh	w0, [x0, w1, uxtw #1]
   48f20:	adr	x1, 48f2c <aarch64_find_next_opcode@@Base+0xbc>
   48f24:	add	x0, x1, w0, sxth #2
   48f28:	br	x0
   48f2c:	mov	w0, #0x65a                 	// #1626
   48f30:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   48f34:	sub	w1, w1, #0x4a4
   48f38:	cmp	w1, #0x26
   48f3c:	b.hi	4905c <aarch64_find_next_opcode@@Base+0x1ec>  // b.pmore
   48f40:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48f44:	add	x0, x0, #0x40c
   48f48:	ldrh	w0, [x0, w1, uxtw #1]
   48f4c:	adr	x1, 48f58 <aarch64_find_next_opcode@@Base+0xe8>
   48f50:	add	x0, x1, w0, sxth #2
   48f54:	br	x0
   48f58:	mov	w0, #0x4a8                 	// #1192
   48f5c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   48f60:	sub	w1, w1, #0x2f7
   48f64:	cmp	w1, #0x6c
   48f68:	b.hi	4905c <aarch64_find_next_opcode@@Base+0x1ec>  // b.pmore
   48f6c:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48f70:	add	x0, x0, #0x45c
   48f74:	ldrh	w0, [x0, w1, uxtw #1]
   48f78:	adr	x1, 48f84 <aarch64_find_next_opcode@@Base+0x114>
   48f7c:	add	x0, x1, w0, sxth #2
   48f80:	br	x0
   48f84:	mov	w0, #0x32b                 	// #811
   48f88:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   48f8c:	sub	w1, w1, #0x176
   48f90:	cmp	w1, #0x67
   48f94:	b.hi	4905c <aarch64_find_next_opcode@@Base+0x1ec>  // b.pmore
   48f98:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48f9c:	add	x0, x0, #0x538
   48fa0:	ldrh	w0, [x0, w1, uxtw #1]
   48fa4:	adr	x1, 48fb0 <aarch64_find_next_opcode@@Base+0x140>
   48fa8:	add	x0, x1, w0, sxth #2
   48fac:	br	x0
   48fb0:	mov	w0, #0x1b9                 	// #441
   48fb4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   48fb8:	sub	w1, w1, #0x85
   48fbc:	cmp	w1, #0xe
   48fc0:	b.hi	4905c <aarch64_find_next_opcode@@Base+0x1ec>  // b.pmore
   48fc4:	adrp	x0, 59000 <fields@@Base+0x5a8>
   48fc8:	add	x0, x0, #0x608
   48fcc:	ldrh	w0, [x0, w1, uxtw #1]
   48fd0:	adr	x1, 48fdc <aarch64_find_next_opcode@@Base+0x16c>
   48fd4:	add	x0, x1, w0, sxth #2
   48fd8:	br	x0
   48fdc:	mov	w0, #0x176                 	// #374
   48fe0:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   48fe4:	cmp	w1, #0x266
   48fe8:	b.eq	49490 <aarch64_find_next_opcode@@Base+0x620>  // b.none
   48fec:	b.gt	49004 <aarch64_find_next_opcode@@Base+0x194>
   48ff0:	cmp	w1, #0x256
   48ff4:	b.eq	49498 <aarch64_find_next_opcode@@Base+0x628>  // b.none
   48ff8:	cmp	w1, #0x258
   48ffc:	mov	w0, #0x259                 	// #601
   49000:	b	48ed4 <aarch64_find_next_opcode@@Base+0x64>
   49004:	cmp	w1, #0x268
   49008:	mov	w0, #0x269                 	// #617
   4900c:	b	48ed4 <aarch64_find_next_opcode@@Base+0x64>
   49010:	cmp	w1, #0x4ca
   49014:	b.gt	49040 <aarch64_find_next_opcode@@Base+0x1d0>
   49018:	cmp	w1, #0x4a3
   4901c:	b.gt	48f34 <aarch64_find_next_opcode@@Base+0xc4>
   49020:	cmp	w1, #0x3ca
   49024:	b.eq	494a0 <aarch64_find_next_opcode@@Base+0x630>  // b.none
   49028:	cmp	w1, #0x3cb
   4902c:	mov	w0, #0x3cf                 	// #975
   49030:	b.eq	48f04 <aarch64_find_next_opcode@@Base+0x94>  // b.none
   49034:	cmp	w1, #0x3c8
   49038:	mov	w0, #0x3c9                 	// #969
   4903c:	b	48ed4 <aarch64_find_next_opcode@@Base+0x64>
   49040:	cmp	w1, #0x67f
   49044:	b.gt	49064 <aarch64_find_next_opcode@@Base+0x1f4>
   49048:	cmp	w1, #0x66d
   4904c:	b.gt	48edc <aarch64_find_next_opcode@@Base+0x6c>
   49050:	sub	w1, w1, #0x659
   49054:	cmp	w1, #0xc
   49058:	b.ls	48f14 <aarch64_find_next_opcode@@Base+0xa4>  // b.plast
   4905c:	mov	x0, #0x0                   	// #0
   49060:	b	48f10 <aarch64_find_next_opcode@@Base+0xa0>
   49064:	cmp	w1, #0x691
   49068:	b.eq	494a8 <aarch64_find_next_opcode@@Base+0x638>  // b.none
   4906c:	b.gt	49084 <aarch64_find_next_opcode@@Base+0x214>
   49070:	cmp	w1, #0x687
   49074:	b.eq	494b0 <aarch64_find_next_opcode@@Base+0x640>  // b.none
   49078:	cmp	w1, #0x689
   4907c:	mov	w0, #0x68a                 	// #1674
   49080:	b	48ed4 <aarch64_find_next_opcode@@Base+0x64>
   49084:	cmp	w1, #0x69a
   49088:	b.eq	494b8 <aarch64_find_next_opcode@@Base+0x648>  // b.none
   4908c:	cmp	w1, #0x69c
   49090:	mov	w0, #0x69d                 	// #1693
   49094:	b	48ed4 <aarch64_find_next_opcode@@Base+0x64>
   49098:	mov	w0, #0x65c                 	// #1628
   4909c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490a0:	mov	w0, #0x660                 	// #1632
   490a4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490a8:	mov	w0, #0x673                 	// #1651
   490ac:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490b0:	mov	w0, #0x67c                 	// #1660
   490b4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490b8:	mov	w0, #0x680                 	// #1664
   490bc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490c0:	mov	w0, #0x67e                 	// #1662
   490c4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490c8:	mov	w0, #0x666                 	// #1638
   490cc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490d0:	mov	w0, #0x4b9                 	// #1209
   490d4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490d8:	mov	w0, #0x4ba                 	// #1210
   490dc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490e0:	mov	w0, #0x4bd                 	// #1213
   490e4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490e8:	mov	w0, #0x4be                 	// #1214
   490ec:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490f0:	mov	w0, #0x4bf                 	// #1215
   490f4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   490f8:	mov	w0, #0x4c0                 	// #1216
   490fc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49100:	mov	w0, #0x4c8                 	// #1224
   49104:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49108:	mov	w0, #0x4c9                 	// #1225
   4910c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49110:	mov	w0, #0x956                 	// #2390
   49114:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49118:	mov	w0, #0x4a6                 	// #1190
   4911c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49120:	mov	w0, #0x4ca                 	// #1226
   49124:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49128:	mov	w0, #0x4cb                 	// #1227
   4912c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49130:	mov	w0, #0x1bb                 	// #443
   49134:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49138:	mov	w0, #0x1c1                 	// #449
   4913c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49140:	mov	w0, #0x1c2                 	// #450
   49144:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49148:	mov	w0, #0x1c3                 	// #451
   4914c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49150:	mov	w0, #0x1bd                 	// #445
   49154:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49158:	mov	w0, #0x1be                 	// #446
   4915c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49160:	mov	w0, #0x1bf                 	// #447
   49164:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49168:	mov	w0, #0x1ce                 	// #462
   4916c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49170:	mov	w0, #0x1d2                 	// #466
   49174:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49178:	mov	w0, #0x1cf                 	// #463
   4917c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49180:	mov	w0, #0x1d3                 	// #467
   49184:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49188:	mov	w0, #0x1c5                 	// #453
   4918c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49190:	mov	w0, #0x1c6                 	// #454
   49194:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49198:	mov	w0, #0x1c7                 	// #455
   4919c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491a0:	mov	w0, #0x1da                 	// #474
   491a4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491a8:	mov	w0, #0x1db                 	// #475
   491ac:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491b0:	mov	w0, #0x1de                 	// #478
   491b4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491b8:	mov	w0, #0x1df                 	// #479
   491bc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491c0:	mov	w0, #0x2fc                 	// #764
   491c4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491c8:	mov	w0, #0x2f8                 	// #760
   491cc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491d0:	mov	w0, #0x2fe                 	// #766
   491d4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491d8:	mov	w0, #0x2fa                 	// #762
   491dc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491e0:	mov	w0, #0x300                 	// #768
   491e4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491e8:	mov	w0, #0x314                 	// #788
   491ec:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491f0:	mov	w0, #0x310                 	// #784
   491f4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   491f8:	mov	w0, #0x318                 	// #792
   491fc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49200:	mov	w0, #0x308                 	// #776
   49204:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49208:	mov	w0, #0x304                 	// #772
   4920c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49210:	mov	w0, #0x30c                 	// #780
   49214:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49218:	mov	w0, #0x302                 	// #770
   4921c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49220:	mov	w0, #0x316                 	// #790
   49224:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49228:	mov	w0, #0x312                 	// #786
   4922c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49230:	mov	w0, #0x31a                 	// #794
   49234:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49238:	mov	w0, #0x30a                 	// #778
   4923c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49240:	mov	w0, #0x306                 	// #774
   49244:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49248:	mov	w0, #0x30e                 	// #782
   4924c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49250:	mov	w0, #0x331                 	// #817
   49254:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49258:	mov	w0, #0x33a                 	// #826
   4925c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49260:	mov	w0, #0x335                 	// #821
   49264:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49268:	mov	w0, #0x33e                 	// #830
   4926c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49270:	mov	w0, #0x333                 	// #819
   49274:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49278:	mov	w0, #0x33c                 	// #828
   4927c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49280:	mov	w0, #0x337                 	// #823
   49284:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49288:	mov	w0, #0x340                 	// #832
   4928c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49290:	mov	w0, #0x981                 	// #2433
   49294:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49298:	mov	w0, #0x342                 	// #834
   4929c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492a0:	mov	w0, #0x344                 	// #836
   492a4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492a8:	mov	w0, #0x346                 	// #838
   492ac:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492b0:	mov	w0, #0x323                 	// #803
   492b4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492b8:	mov	w0, #0x325                 	// #805
   492bc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492c0:	mov	w0, #0x327                 	// #807
   492c4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492c8:	mov	w0, #0x329                 	// #809
   492cc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492d0:	mov	w0, #0x362                 	// #866
   492d4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492d8:	mov	w0, #0x348                 	// #840
   492dc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492e0:	mov	w0, #0x358                 	// #856
   492e4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492e8:	mov	w0, #0x350                 	// #848
   492ec:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492f0:	mov	w0, #0x34c                 	// #844
   492f4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   492f8:	mov	w0, #0x354                 	// #852
   492fc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49300:	mov	w0, #0x34a                 	// #842
   49304:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49308:	mov	w0, #0x352                 	// #850
   4930c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49310:	mov	w0, #0x34e                 	// #846
   49314:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49318:	mov	w0, #0x356                 	// #854
   4931c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49320:	mov	w0, #0x31f                 	// #799
   49324:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49328:	mov	w0, #0x321                 	// #801
   4932c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49330:	mov	w0, #0x364                 	// #868
   49334:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49338:	mov	w0, #0x178                 	// #376
   4933c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49340:	mov	w0, #0x18e                 	// #398
   49344:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49348:	mov	w0, #0x190                 	// #400
   4934c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49350:	mov	w0, #0x192                 	// #402
   49354:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49358:	mov	w0, #0x177                 	// #375
   4935c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49360:	mov	w0, #0x179                 	// #377
   49364:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49368:	mov	w0, #0x17a                 	// #378
   4936c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49370:	mov	w0, #0x17b                 	// #379
   49374:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49378:	mov	w0, #0x18d                 	// #397
   4937c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49380:	mov	w0, #0x18f                 	// #399
   49384:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49388:	mov	w0, #0x191                 	// #401
   4938c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49390:	mov	w0, #0x193                 	// #403
   49394:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49398:	mov	w0, #0x35a                 	// #858
   4939c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493a0:	mov	w0, #0x35e                 	// #862
   493a4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493a8:	mov	w0, #0x17c                 	// #380
   493ac:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493b0:	mov	w0, #0x17d                 	// #381
   493b4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493b8:	mov	w0, #0x184                 	// #388
   493bc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493c0:	mov	w0, #0x186                 	// #390
   493c4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493c8:	mov	w0, #0x194                 	// #404
   493cc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493d0:	mov	w0, #0x195                 	// #405
   493d4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493d8:	mov	w0, #0x19c                 	// #412
   493dc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493e0:	mov	w0, #0x19e                 	// #414
   493e4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493e8:	mov	w0, #0x180                 	// #384
   493ec:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493f0:	mov	w0, #0x181                 	// #385
   493f4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   493f8:	mov	w0, #0x198                 	// #408
   493fc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49400:	mov	w0, #0x199                 	// #409
   49404:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49408:	mov	w0, #0x188                 	// #392
   4940c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49410:	mov	w0, #0x189                 	// #393
   49414:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49418:	mov	w0, #0x93                  	// #147
   4941c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49420:	mov	w0, #0x1a0                 	// #416
   49424:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49428:	mov	w0, #0x1a1                 	// #417
   4942c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49430:	mov	w0, #0x18a                 	// #394
   49434:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49438:	mov	w0, #0x18b                 	// #395
   4943c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49440:	mov	w0, #0x1a3                 	// #419
   49444:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49448:	mov	w0, #0x35c                 	// #860
   4944c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49450:	mov	w0, #0x360                 	// #864
   49454:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49458:	mov	w0, #0x13                  	// #19
   4945c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49460:	mov	w0, #0x66f                 	// #1647
   49464:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49468:	mov	w0, #0x65e                 	// #1630
   4946c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49470:	mov	w0, #0x4a9                 	// #1193
   49474:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49478:	mov	w0, #0x4a5                 	// #1189
   4947c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49480:	mov	w0, #0x1ba                 	// #442
   49484:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49488:	mov	w0, #0x18c                 	// #396
   4948c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49490:	mov	w0, #0x267                 	// #615
   49494:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   49498:	mov	w0, #0x257                 	// #599
   4949c:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   494a0:	mov	w0, #0x3ce                 	// #974
   494a4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   494a8:	mov	w0, #0x692                 	// #1682
   494ac:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   494b0:	mov	w0, #0x688                 	// #1672
   494b4:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>
   494b8:	mov	w0, #0x69b                 	// #1691
   494bc:	b	48f04 <aarch64_find_next_opcode@@Base+0x94>

00000000000494c0 <aarch64_find_alias_opcode@@Base>:
   494c0:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   494c4:	ldr	x1, [x2, #3848]
   494c8:	sub	x1, x0, x1
   494cc:	mov	x0, #0x8e39                	// #36409
   494d0:	movk	x0, #0x38e3, lsl #16
   494d4:	asr	x1, x1, #4
   494d8:	movk	x0, #0xe38e, lsl #32
   494dc:	movk	x0, #0x8e38, lsl #48
   494e0:	mul	x1, x1, x0
   494e4:	mov	w0, w1
   494e8:	cmp	w1, #0x49f
   494ec:	b.gt	49760 <aarch64_find_alias_opcode@@Base+0x2a0>
   494f0:	cmp	w1, #0x40c
   494f4:	b.gt	495b8 <aarch64_find_alias_opcode@@Base+0xf8>
   494f8:	cmp	w1, #0x275
   494fc:	b.eq	49a98 <aarch64_find_alias_opcode@@Base+0x5d8>  // b.none
   49500:	b.gt	496ec <aarch64_find_alias_opcode@@Base+0x22c>
   49504:	cmp	w1, #0x9a
   49508:	b.eq	49aa0 <aarch64_find_alias_opcode@@Base+0x5e0>  // b.none
   4950c:	b.gt	49680 <aarch64_find_alias_opcode@@Base+0x1c0>
   49510:	cmp	w1, #0x1a
   49514:	b.gt	49670 <aarch64_find_alias_opcode@@Base+0x1b0>
   49518:	cmp	w1, #0x1
   4951c:	b.gt	49644 <aarch64_find_alias_opcode@@Base+0x184>
   49520:	mov	x0, #0x0                   	// #0
   49524:	b	4955c <aarch64_find_alias_opcode@@Base+0x9c>
   49528:	sub	w1, w1, #0x6da
   4952c:	cmp	w1, #0x4
   49530:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   49534:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49538:	add	x0, x0, #0x628
   4953c:	ldrh	w0, [x0, w1, uxtw #1]
   49540:	adr	x1, 4954c <aarch64_find_alias_opcode@@Base+0x8c>
   49544:	add	x0, x1, w0, sxth #2
   49548:	br	x0
   4954c:	mov	w0, #0x4e8                 	// #1256
   49550:	ldr	x2, [x2, #3848]
   49554:	mov	w1, #0x90                  	// #144
   49558:	smaddl	x0, w0, w1, x2
   4955c:	ret
   49560:	sub	w1, w1, #0x555
   49564:	cmp	w1, #0x23
   49568:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   4956c:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49570:	add	x0, x0, #0x634
   49574:	ldrh	w0, [x0, w1, uxtw #1]
   49578:	adr	x1, 49584 <aarch64_find_alias_opcode@@Base+0xc4>
   4957c:	add	x0, x1, w0, sxth #2
   49580:	br	x0
   49584:	mov	w0, #0x4ea                 	// #1258
   49588:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   4958c:	sub	w1, w1, #0x529
   49590:	cmp	w1, #0x8
   49594:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   49598:	adrp	x0, 59000 <fields@@Base+0x5a8>
   4959c:	add	x0, x0, #0x67c
   495a0:	ldrh	w0, [x0, w1, uxtw #1]
   495a4:	adr	x1, 495b0 <aarch64_find_alias_opcode@@Base+0xf0>
   495a8:	add	x0, x1, w0, sxth #2
   495ac:	br	x0
   495b0:	mov	w0, #0x7f2                 	// #2034
   495b4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   495b8:	sub	w1, w1, #0x40d
   495bc:	cmp	w1, #0x92
   495c0:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   495c4:	adrp	x0, 59000 <fields@@Base+0x5a8>
   495c8:	add	x0, x0, #0x690
   495cc:	ldrh	w0, [x0, w1, uxtw #1]
   495d0:	adr	x1, 495dc <aarch64_find_alias_opcode@@Base+0x11c>
   495d4:	add	x0, x1, w0, sxth #2
   495d8:	br	x0
   495dc:	mov	w0, #0x46d                 	// #1133
   495e0:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   495e4:	mov	w0, #0x3df                 	// #991
   495e8:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   495ec:	sub	w1, w1, #0x2df
   495f0:	cmp	w1, #0xb
   495f4:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   495f8:	adrp	x0, 59000 <fields@@Base+0x5a8>
   495fc:	add	x0, x0, #0x7b8
   49600:	ldrh	w0, [x0, w1, uxtw #1]
   49604:	adr	x1, 49610 <aarch64_find_alias_opcode@@Base+0x150>
   49608:	add	x0, x1, w0, sxth #2
   4960c:	br	x0
   49610:	mov	w0, #0x2e0                 	// #736
   49614:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49618:	sub	w1, w1, #0x2c9
   4961c:	cmp	w1, #0x9
   49620:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   49624:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49628:	add	x0, x0, #0x7d0
   4962c:	ldrh	w0, [x0, w1, uxtw #1]
   49630:	adr	x1, 4963c <aarch64_find_alias_opcode@@Base+0x17c>
   49634:	add	x0, x1, w0, sxth #2
   49638:	br	x0
   4963c:	mov	w0, #0x2ca                 	// #714
   49640:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49644:	sub	w1, w1, #0x2
   49648:	cmp	w1, #0x18
   4964c:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   49650:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49654:	add	x0, x0, #0x7e4
   49658:	ldrh	w0, [x0, w1, uxtw #1]
   4965c:	adr	x1, 49668 <aarch64_find_alias_opcode@@Base+0x1a8>
   49660:	add	x0, x1, w0, sxth #2
   49664:	br	x0
   49668:	mov	w0, #0x5                   	// #5
   4966c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49670:	cmp	w1, #0x98
   49674:	mov	w0, #0x99                  	// #153
   49678:	b.eq	49550 <aarch64_find_alias_opcode@@Base+0x90>  // b.none
   4967c:	b	49520 <aarch64_find_alias_opcode@@Base+0x60>
   49680:	cmp	w1, #0x19c
   49684:	b.eq	49ae8 <aarch64_find_alias_opcode@@Base+0x628>  // b.none
   49688:	b.gt	496c0 <aarch64_find_alias_opcode@@Base+0x200>
   4968c:	cmp	w1, #0x13d
   49690:	b.eq	49af0 <aarch64_find_alias_opcode@@Base+0x630>  // b.none
   49694:	b.gt	496ac <aarch64_find_alias_opcode@@Base+0x1ec>
   49698:	cmp	w1, #0x9c
   4969c:	b.eq	49af8 <aarch64_find_alias_opcode@@Base+0x638>  // b.none
   496a0:	cmp	w1, #0xf2
   496a4:	mov	w0, #0xf3                  	// #243
   496a8:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   496ac:	cmp	w1, #0x184
   496b0:	b.eq	49b00 <aarch64_find_alias_opcode@@Base+0x640>  // b.none
   496b4:	cmp	w1, #0x186
   496b8:	mov	w0, #0x187                 	// #391
   496bc:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   496c0:	cmp	w1, #0x26a
   496c4:	b.eq	49b08 <aarch64_find_alias_opcode@@Base+0x648>  // b.none
   496c8:	b.gt	496e0 <aarch64_find_alias_opcode@@Base+0x220>
   496cc:	cmp	w1, #0x19e
   496d0:	b.eq	49b10 <aarch64_find_alias_opcode@@Base+0x650>  // b.none
   496d4:	cmp	w1, #0x217
   496d8:	mov	w0, #0x218                 	// #536
   496dc:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   496e0:	cmp	w1, #0x271
   496e4:	mov	w0, #0x273                 	// #627
   496e8:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   496ec:	cmp	w1, #0x2ea
   496f0:	b.gt	49734 <aarch64_find_alias_opcode@@Base+0x274>
   496f4:	cmp	w1, #0x2de
   496f8:	b.gt	495ec <aarch64_find_alias_opcode@@Base+0x12c>
   496fc:	cmp	w1, #0x2d2
   49700:	b.gt	49520 <aarch64_find_alias_opcode@@Base+0x60>
   49704:	cmp	w1, #0x2c8
   49708:	b.gt	49618 <aarch64_find_alias_opcode@@Base+0x158>
   4970c:	cmp	w1, #0x29d
   49710:	b.eq	49b18 <aarch64_find_alias_opcode@@Base+0x658>  // b.none
   49714:	b.gt	4972c <aarch64_find_alias_opcode@@Base+0x26c>
   49718:	cmp	w1, #0x297
   4971c:	b.eq	49b20 <aarch64_find_alias_opcode@@Base+0x660>  // b.none
   49720:	cmp	w1, #0x29a
   49724:	mov	w0, #0x29c                 	// #668
   49728:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   4972c:	cmp	w1, #0x2b0
   49730:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   49734:	cmp	w1, #0x2f5
   49738:	b.eq	49b28 <aarch64_find_alias_opcode@@Base+0x668>  // b.none
   4973c:	sub	w1, w1, #0x3de
   49740:	cmp	w1, #0x10
   49744:	b.hi	49520 <aarch64_find_alias_opcode@@Base+0x60>  // b.pmore
   49748:	adrp	x0, 59000 <fields@@Base+0x5a8>
   4974c:	add	x0, x0, #0x818
   49750:	ldrh	w0, [x0, w1, uxtw #1]
   49754:	adr	x1, 49760 <aarch64_find_alias_opcode@@Base+0x2a0>
   49758:	add	x0, x1, w0, sxth #2
   4975c:	br	x0
   49760:	cmp	w1, #0x578
   49764:	b.gt	497e0 <aarch64_find_alias_opcode@@Base+0x320>
   49768:	cmp	w1, #0x554
   4976c:	b.gt	49560 <aarch64_find_alias_opcode@@Base+0xa0>
   49770:	cmp	w1, #0x531
   49774:	b.gt	497c0 <aarch64_find_alias_opcode@@Base+0x300>
   49778:	cmp	w1, #0x528
   4977c:	b.gt	4958c <aarch64_find_alias_opcode@@Base+0xcc>
   49780:	cmp	w1, #0x503
   49784:	b.eq	49b30 <aarch64_find_alias_opcode@@Base+0x670>  // b.none
   49788:	b.gt	497ac <aarch64_find_alias_opcode@@Base+0x2ec>
   4978c:	cmp	w1, #0x4ba
   49790:	b.eq	49b38 <aarch64_find_alias_opcode@@Base+0x678>  // b.none
   49794:	cmp	w1, #0x4c0
   49798:	mov	w0, #0x4c7                 	// #1223
   4979c:	b.eq	49550 <aarch64_find_alias_opcode@@Base+0x90>  // b.none
   497a0:	cmp	w1, #0x4a9
   497a4:	mov	w0, #0x4d3                 	// #1235
   497a8:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   497ac:	cmp	w1, #0x505
   497b0:	b.eq	49b40 <aarch64_find_alias_opcode@@Base+0x680>  // b.none
   497b4:	cmp	w1, #0x506
   497b8:	mov	w0, #0x4f6                 	// #1270
   497bc:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   497c0:	cmp	w1, #0x548
   497c4:	b.eq	49b48 <aarch64_find_alias_opcode@@Base+0x688>  // b.none
   497c8:	cmp	w1, #0x549
   497cc:	mov	w0, #0x7fc                 	// #2044
   497d0:	b.eq	49550 <aarch64_find_alias_opcode@@Base+0x90>  // b.none
   497d4:	cmp	w1, #0x547
   497d8:	mov	w0, #0x4ef                 	// #1263
   497dc:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   497e0:	cmp	w1, #0x6de
   497e4:	b.gt	497fc <aarch64_find_alias_opcode@@Base+0x33c>
   497e8:	cmp	w1, #0x6d9
   497ec:	b.gt	49528 <aarch64_find_alias_opcode@@Base+0x68>
   497f0:	cmp	w1, #0x58f
   497f4:	mov	w0, #0x4e6                 	// #1254
   497f8:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   497fc:	cmp	w1, #0x71c
   49800:	b.eq	49b50 <aarch64_find_alias_opcode@@Base+0x690>  // b.none
   49804:	cmp	w1, #0x71d
   49808:	mov	w0, #0x4f3                 	// #1267
   4980c:	b	49678 <aarch64_find_alias_opcode@@Base+0x1b8>
   49810:	mov	w0, #0x8                   	// #8
   49814:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49818:	mov	w0, #0xb                   	// #11
   4981c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49820:	mov	w0, #0xd                   	// #13
   49824:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49828:	mov	w0, #0xf                   	// #15
   4982c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49830:	mov	w0, #0x12                  	// #18
   49834:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49838:	mov	w0, #0x17                  	// #23
   4983c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49840:	mov	w0, #0x19                  	// #25
   49844:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49848:	mov	w0, #0x1b                  	// #27
   4984c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49850:	mov	w0, #0x2ce                 	// #718
   49854:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49858:	mov	w0, #0x2d0                 	// #720
   4985c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49860:	mov	w0, #0x2d3                 	// #723
   49864:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49868:	mov	w0, #0x2e4                 	// #740
   4986c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49870:	mov	w0, #0x2e6                 	// #742
   49874:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49878:	mov	w0, #0x2e9                 	// #745
   4987c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49880:	mov	w0, #0x2eb                 	// #747
   49884:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49888:	mov	w0, #0x3e4                 	// #996
   4988c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49890:	mov	w0, #0x3e9                 	// #1001
   49894:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49898:	mov	w0, #0x3eb                 	// #1003
   4989c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498a0:	mov	w0, #0x3ef                 	// #1007
   498a4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498a8:	mov	w0, #0x46f                 	// #1135
   498ac:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498b0:	mov	w0, #0x470                 	// #1136
   498b4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498b8:	mov	w0, #0x471                 	// #1137
   498bc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498c0:	mov	w0, #0x472                 	// #1138
   498c4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498c8:	mov	w0, #0x473                 	// #1139
   498cc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498d0:	mov	w0, #0x474                 	// #1140
   498d4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498d8:	mov	w0, #0x475                 	// #1141
   498dc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498e0:	mov	w0, #0x476                 	// #1142
   498e4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498e8:	mov	w0, #0x477                 	// #1143
   498ec:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498f0:	mov	w0, #0x478                 	// #1144
   498f4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   498f8:	mov	w0, #0x479                 	// #1145
   498fc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49900:	mov	w0, #0x47a                 	// #1146
   49904:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49908:	mov	w0, #0x47b                 	// #1147
   4990c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49910:	mov	w0, #0x47c                 	// #1148
   49914:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49918:	mov	w0, #0x47d                 	// #1149
   4991c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49920:	mov	w0, #0x47e                 	// #1150
   49924:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49928:	mov	w0, #0x47f                 	// #1151
   4992c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49930:	mov	w0, #0x480                 	// #1152
   49934:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49938:	mov	w0, #0x481                 	// #1153
   4993c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49940:	mov	w0, #0x482                 	// #1154
   49944:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49948:	mov	w0, #0x483                 	// #1155
   4994c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49950:	mov	w0, #0x484                 	// #1156
   49954:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49958:	mov	w0, #0x485                 	// #1157
   4995c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49960:	mov	w0, #0x486                 	// #1158
   49964:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49968:	mov	w0, #0x487                 	// #1159
   4996c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49970:	mov	w0, #0x488                 	// #1160
   49974:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49978:	mov	w0, #0x489                 	// #1161
   4997c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49980:	mov	w0, #0x48a                 	// #1162
   49984:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49988:	mov	w0, #0x48b                 	// #1163
   4998c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49990:	mov	w0, #0x48c                 	// #1164
   49994:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49998:	mov	w0, #0x48d                 	// #1165
   4999c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499a0:	mov	w0, #0x48e                 	// #1166
   499a4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499a8:	mov	w0, #0x48f                 	// #1167
   499ac:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499b0:	mov	w0, #0x490                 	// #1168
   499b4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499b8:	mov	w0, #0x491                 	// #1169
   499bc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499c0:	mov	w0, #0x492                 	// #1170
   499c4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499c8:	mov	w0, #0x493                 	// #1171
   499cc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499d0:	mov	w0, #0x494                 	// #1172
   499d4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499d8:	mov	w0, #0x495                 	// #1173
   499dc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499e0:	mov	w0, #0x496                 	// #1174
   499e4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499e8:	mov	w0, #0x497                 	// #1175
   499ec:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499f0:	mov	w0, #0x498                 	// #1176
   499f4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   499f8:	mov	w0, #0x499                 	// #1177
   499fc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a00:	mov	w0, #0x49a                 	// #1178
   49a04:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a08:	mov	w0, #0x49b                 	// #1179
   49a0c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a10:	mov	w0, #0x49c                 	// #1180
   49a14:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a18:	mov	w0, #0x49e                 	// #1182
   49a1c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a20:	mov	w0, #0x4a0                 	// #1184
   49a24:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a28:	mov	w0, #0x7f3                 	// #2035
   49a2c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a30:	mov	w0, #0x7f4                 	// #2036
   49a34:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a38:	mov	w0, #0x7fb                 	// #2043
   49a3c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a40:	mov	w0, #0x4ed                 	// #1261
   49a44:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a48:	mov	w0, #0x7f6                 	// #2038
   49a4c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a50:	mov	w0, #0x4f7                 	// #1271
   49a54:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a58:	mov	w0, #0x4f8                 	// #1272
   49a5c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a60:	mov	w0, #0x7f7                 	// #2039
   49a64:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a68:	mov	w0, #0x7f8                 	// #2040
   49a6c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a70:	mov	w0, #0x7f9                 	// #2041
   49a74:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a78:	mov	w0, #0x7fa                 	// #2042
   49a7c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a80:	mov	w0, #0x4e7                 	// #1255
   49a84:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a88:	mov	w0, #0x4eb                 	// #1259
   49a8c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a90:	mov	w0, #0x4f5                 	// #1269
   49a94:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49a98:	mov	w0, #0x279                 	// #633
   49a9c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49aa0:	mov	w0, #0x9b                  	// #155
   49aa4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49aa8:	mov	w0, #0x7fd                 	// #2045
   49aac:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ab0:	mov	w0, #0x4ec                 	// #1260
   49ab4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ab8:	mov	w0, #0x7f5                 	// #2037
   49abc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ac0:	mov	w0, #0x46e                 	// #1134
   49ac4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ac8:	mov	w0, #0x3e1                 	// #993
   49acc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ad0:	mov	w0, #0x2e2                 	// #738
   49ad4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ad8:	mov	w0, #0x2cc                 	// #716
   49adc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ae0:	mov	w0, #0x3                   	// #3
   49ae4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49ae8:	mov	w0, #0x19d                 	// #413
   49aec:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49af0:	mov	w0, #0x13e                 	// #318
   49af4:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49af8:	mov	w0, #0x9d                  	// #157
   49afc:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b00:	mov	w0, #0x185                 	// #389
   49b04:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b08:	mov	w0, #0x26f                 	// #623
   49b0c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b10:	mov	w0, #0x19f                 	// #415
   49b14:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b18:	mov	w0, #0x29e                 	// #670
   49b1c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b20:	mov	w0, #0x299                 	// #665
   49b24:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b28:	mov	w0, #0x2f6                 	// #758
   49b2c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b30:	mov	w0, #0x7f1                 	// #2033
   49b34:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b38:	mov	w0, #0x4bc                 	// #1212
   49b3c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b40:	mov	w0, #0x4f2                 	// #1266
   49b44:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b48:	mov	w0, #0x4f1                 	// #1265
   49b4c:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>
   49b50:	mov	w0, #0x4f0                 	// #1264
   49b54:	b	49550 <aarch64_find_alias_opcode@@Base+0x90>

0000000000049b58 <aarch64_find_next_alias_opcode@@Base>:
   49b58:	adrp	x2, 97000 <aarch64_operands@@Base+0x16bc0>
   49b5c:	ldr	x1, [x2, #3848]
   49b60:	sub	x1, x0, x1
   49b64:	mov	x0, #0x8e39                	// #36409
   49b68:	movk	x0, #0x38e3, lsl #16
   49b6c:	asr	x1, x1, #4
   49b70:	movk	x0, #0xe38e, lsl #32
   49b74:	movk	x0, #0x8e38, lsl #48
   49b78:	mul	x1, x1, x0
   49b7c:	cmp	w1, #0x4f8
   49b80:	b.gt	49d38 <aarch64_find_next_alias_opcode@@Base+0x1e0>
   49b84:	cmp	w1, #0x3de
   49b88:	b.gt	49bc8 <aarch64_find_next_alias_opcode@@Base+0x70>
   49b8c:	cmp	w1, #0x29e
   49b90:	b.gt	49cf0 <aarch64_find_next_alias_opcode@@Base+0x198>
   49b94:	cmp	w1, #0x26a
   49b98:	b.gt	49c28 <aarch64_find_next_alias_opcode@@Base+0xd0>
   49b9c:	cmp	w1, #0x1c
   49ba0:	b.gt	49c80 <aarch64_find_next_alias_opcode@@Base+0x128>
   49ba4:	cmp	w1, #0x2
   49ba8:	b.gt	49c54 <aarch64_find_next_alias_opcode@@Base+0xfc>
   49bac:	mov	x0, #0x0                   	// #0
   49bb0:	b	49bc4 <aarch64_find_next_alias_opcode@@Base+0x6c>
   49bb4:	mov	w0, #0x503                 	// #1283
   49bb8:	ldr	x2, [x2, #3848]
   49bbc:	mov	w1, #0x90                  	// #144
   49bc0:	smaddl	x0, w0, w1, x2
   49bc4:	ret
   49bc8:	sub	w1, w1, #0x3df
   49bcc:	cmp	w1, #0x119
   49bd0:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49bd4:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49bd8:	add	x0, x0, #0x83c
   49bdc:	ldrh	w0, [x0, w1, uxtw #1]
   49be0:	adr	x1, 49bec <aarch64_find_next_alias_opcode@@Base+0x94>
   49be4:	add	x0, x1, w0, sxth #2
   49be8:	br	x0
   49bec:	mov	w0, #0x3de                 	// #990
   49bf0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49bf4:	sub	w1, w1, #0x2e0
   49bf8:	cmp	w1, #0xb
   49bfc:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49c00:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49c04:	add	x0, x0, #0xa70
   49c08:	ldrh	w0, [x0, w1, uxtw #1]
   49c0c:	adr	x1, 49c18 <aarch64_find_next_alias_opcode@@Base+0xc0>
   49c10:	add	x0, x1, w0, sxth #2
   49c14:	br	x0
   49c18:	mov	w0, #0x2df                 	// #735
   49c1c:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49c20:	mov	w0, #0x2c9                 	// #713
   49c24:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49c28:	sub	w1, w1, #0x26b
   49c2c:	cmp	w1, #0x33
   49c30:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49c34:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49c38:	add	x0, x0, #0xa88
   49c3c:	ldrh	w0, [x0, w1, uxtw #1]
   49c40:	adr	x1, 49c4c <aarch64_find_next_alias_opcode@@Base+0xf4>
   49c44:	add	x0, x1, w0, sxth #2
   49c48:	br	x0
   49c4c:	mov	w0, #0x26e                 	// #622
   49c50:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49c54:	sub	w1, w1, #0x3
   49c58:	cmp	w1, #0x19
   49c5c:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49c60:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49c64:	add	x0, x0, #0xaf0
   49c68:	ldrh	w0, [x0, w1, uxtw #1]
   49c6c:	adr	x1, 49c78 <aarch64_find_next_alias_opcode@@Base+0x120>
   49c70:	add	x0, x1, w0, sxth #2
   49c74:	br	x0
   49c78:	mov	w0, #0x4                   	// #4
   49c7c:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49c80:	cmp	w1, #0x185
   49c84:	b.eq	4a244 <aarch64_find_next_alias_opcode@@Base+0x6ec>  // b.none
   49c88:	b.gt	49cc4 <aarch64_find_next_alias_opcode@@Base+0x16c>
   49c8c:	cmp	w1, #0x9d
   49c90:	b.eq	4a24c <aarch64_find_next_alias_opcode@@Base+0x6f4>  // b.none
   49c94:	b.gt	49cb0 <aarch64_find_next_alias_opcode@@Base+0x158>
   49c98:	cmp	w1, #0x99
   49c9c:	b.eq	4a254 <aarch64_find_next_alias_opcode@@Base+0x6fc>  // b.none
   49ca0:	cmp	w1, #0x9b
   49ca4:	mov	w0, #0x9a                  	// #154
   49ca8:	b.eq	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>  // b.none
   49cac:	b	49bac <aarch64_find_next_alias_opcode@@Base+0x54>
   49cb0:	cmp	w1, #0xf3
   49cb4:	b.eq	4a25c <aarch64_find_next_alias_opcode@@Base+0x704>  // b.none
   49cb8:	cmp	w1, #0x13e
   49cbc:	mov	w0, #0x13d                 	// #317
   49cc0:	b	49ca8 <aarch64_find_next_alias_opcode@@Base+0x150>
   49cc4:	cmp	w1, #0x19f
   49cc8:	b.eq	4a264 <aarch64_find_next_alias_opcode@@Base+0x70c>  // b.none
   49ccc:	b.gt	49ce4 <aarch64_find_next_alias_opcode@@Base+0x18c>
   49cd0:	cmp	w1, #0x187
   49cd4:	b.eq	4a26c <aarch64_find_next_alias_opcode@@Base+0x714>  // b.none
   49cd8:	cmp	w1, #0x19d
   49cdc:	mov	w0, #0x19c                 	// #412
   49ce0:	b	49ca8 <aarch64_find_next_alias_opcode@@Base+0x150>
   49ce4:	cmp	w1, #0x218
   49ce8:	mov	w0, #0x217                 	// #535
   49cec:	b	49ca8 <aarch64_find_next_alias_opcode@@Base+0x150>
   49cf0:	cmp	w1, #0x2eb
   49cf4:	b.gt	49d2c <aarch64_find_next_alias_opcode@@Base+0x1d4>
   49cf8:	cmp	w1, #0x2df
   49cfc:	b.gt	49bf4 <aarch64_find_next_alias_opcode@@Base+0x9c>
   49d00:	cmp	w1, #0x2b0
   49d04:	b.eq	4a274 <aarch64_find_next_alias_opcode@@Base+0x71c>  // b.none
   49d08:	sub	w1, w1, #0x2ca
   49d0c:	cmp	w1, #0x9
   49d10:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49d14:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49d18:	add	x0, x0, #0xb24
   49d1c:	ldrh	w0, [x0, w1, uxtw #1]
   49d20:	adr	x1, 49d2c <aarch64_find_next_alias_opcode@@Base+0x1d4>
   49d24:	add	x0, x1, w0, sxth #2
   49d28:	br	x0
   49d2c:	cmp	w1, #0x2f6
   49d30:	mov	w0, #0x2f5                 	// #757
   49d34:	b	49ca8 <aarch64_find_next_alias_opcode@@Base+0x150>
   49d38:	sub	w1, w1, #0x7f1
   49d3c:	cmp	w1, #0xc
   49d40:	b.hi	49bac <aarch64_find_next_alias_opcode@@Base+0x54>  // b.pmore
   49d44:	adrp	x0, 59000 <fields@@Base+0x5a8>
   49d48:	add	x0, x0, #0xb38
   49d4c:	ldrh	w0, [x0, w1, uxtw #1]
   49d50:	adr	x1, 49d5c <aarch64_find_next_alias_opcode@@Base+0x204>
   49d54:	add	x0, x1, w0, sxth #2
   49d58:	br	x0
   49d5c:	mov	w0, #0x7                   	// #7
   49d60:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d64:	mov	w0, #0xa                   	// #10
   49d68:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d6c:	mov	w0, #0xc                   	// #12
   49d70:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d74:	mov	w0, #0xe                   	// #14
   49d78:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d7c:	mov	w0, #0x11                  	// #17
   49d80:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d84:	mov	w0, #0x16                  	// #22
   49d88:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d8c:	mov	w0, #0x18                  	// #24
   49d90:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d94:	mov	w0, #0x1c                  	// #28
   49d98:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49d9c:	mov	w0, #0x1a                  	// #26
   49da0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49da4:	mov	w0, #0x270                 	// #624
   49da8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dac:	mov	w0, #0x26c                 	// #620
   49db0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49db4:	mov	w0, #0x26b                 	// #619
   49db8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dbc:	mov	w0, #0x26a                 	// #618
   49dc0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dc4:	mov	w0, #0x274                 	// #628
   49dc8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dcc:	mov	w0, #0x272                 	// #626
   49dd0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dd4:	mov	w0, #0x271                 	// #625
   49dd8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ddc:	mov	w0, #0x278                 	// #632
   49de0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49de4:	mov	w0, #0x27b                 	// #635
   49de8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dec:	mov	w0, #0x27a                 	// #634
   49df0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49df4:	mov	w0, #0x277                 	// #631
   49df8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49dfc:	mov	w0, #0x276                 	// #630
   49e00:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e04:	mov	w0, #0x275                 	// #629
   49e08:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e0c:	mov	w0, #0x298                 	// #664
   49e10:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e14:	mov	w0, #0x297                 	// #663
   49e18:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e1c:	mov	w0, #0x29b                 	// #667
   49e20:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e24:	mov	w0, #0x29a                 	// #666
   49e28:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e2c:	mov	w0, #0x29d                 	// #669
   49e30:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e34:	mov	w0, #0x2cd                 	// #717
   49e38:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e3c:	mov	w0, #0x2cf                 	// #719
   49e40:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e44:	mov	w0, #0x2d2                 	// #722
   49e48:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e4c:	mov	w0, #0x2e3                 	// #739
   49e50:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e54:	mov	w0, #0x2e5                 	// #741
   49e58:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e5c:	mov	w0, #0x2e8                 	// #744
   49e60:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e64:	mov	w0, #0x2ea                 	// #746
   49e68:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e6c:	mov	w0, #0x3e3                 	// #995
   49e70:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e74:	mov	w0, #0x3e8                 	// #1000
   49e78:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e7c:	mov	w0, #0x3e7                 	// #999
   49e80:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e84:	mov	w0, #0x3ea                 	// #1002
   49e88:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e8c:	mov	w0, #0x3ee                 	// #1006
   49e90:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e94:	mov	w0, #0x40d                 	// #1037
   49e98:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49e9c:	mov	w0, #0x40e                 	// #1038
   49ea0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ea4:	mov	w0, #0x40f                 	// #1039
   49ea8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49eac:	mov	w0, #0x411                 	// #1041
   49eb0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49eb4:	mov	w0, #0x414                 	// #1044
   49eb8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ebc:	mov	w0, #0x417                 	// #1047
   49ec0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ec4:	mov	w0, #0x419                 	// #1049
   49ec8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ecc:	mov	w0, #0x41a                 	// #1050
   49ed0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ed4:	mov	w0, #0x41b                 	// #1051
   49ed8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49edc:	mov	w0, #0x41d                 	// #1053
   49ee0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ee4:	mov	w0, #0x420                 	// #1056
   49ee8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49eec:	mov	w0, #0x423                 	// #1059
   49ef0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ef4:	mov	w0, #0x425                 	// #1061
   49ef8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49efc:	mov	w0, #0x426                 	// #1062
   49f00:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f04:	mov	w0, #0x427                 	// #1063
   49f08:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f0c:	mov	w0, #0x429                 	// #1065
   49f10:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f14:	mov	w0, #0x42c                 	// #1068
   49f18:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f1c:	mov	w0, #0x42f                 	// #1071
   49f20:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f24:	mov	w0, #0x431                 	// #1073
   49f28:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f2c:	mov	w0, #0x432                 	// #1074
   49f30:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f34:	mov	w0, #0x433                 	// #1075
   49f38:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f3c:	mov	w0, #0x435                 	// #1077
   49f40:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f44:	mov	w0, #0x438                 	// #1080
   49f48:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f4c:	mov	w0, #0x43b                 	// #1083
   49f50:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f54:	mov	w0, #0x43d                 	// #1085
   49f58:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f5c:	mov	w0, #0x43e                 	// #1086
   49f60:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f64:	mov	w0, #0x43f                 	// #1087
   49f68:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f6c:	mov	w0, #0x441                 	// #1089
   49f70:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f74:	mov	w0, #0x444                 	// #1092
   49f78:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f7c:	mov	w0, #0x447                 	// #1095
   49f80:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f84:	mov	w0, #0x449                 	// #1097
   49f88:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f8c:	mov	w0, #0x44a                 	// #1098
   49f90:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f94:	mov	w0, #0x44b                 	// #1099
   49f98:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49f9c:	mov	w0, #0x44d                 	// #1101
   49fa0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fa4:	mov	w0, #0x450                 	// #1104
   49fa8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fac:	mov	w0, #0x453                 	// #1107
   49fb0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fb4:	mov	w0, #0x455                 	// #1109
   49fb8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fbc:	mov	w0, #0x456                 	// #1110
   49fc0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fc4:	mov	w0, #0x457                 	// #1111
   49fc8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fcc:	mov	w0, #0x459                 	// #1113
   49fd0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fd4:	mov	w0, #0x45c                 	// #1116
   49fd8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fdc:	mov	w0, #0x45f                 	// #1119
   49fe0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fe4:	mov	w0, #0x461                 	// #1121
   49fe8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49fec:	mov	w0, #0x462                 	// #1122
   49ff0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ff4:	mov	w0, #0x463                 	// #1123
   49ff8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   49ffc:	mov	w0, #0x465                 	// #1125
   4a000:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a004:	mov	w0, #0x468                 	// #1128
   4a008:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a00c:	mov	w0, #0x46b                 	// #1131
   4a010:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a014:	mov	w0, #0x49d                 	// #1181
   4a018:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a01c:	mov	w0, #0x49f                 	// #1183
   4a020:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a024:	mov	w0, #0x4d2                 	// #1234
   4a028:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a02c:	mov	w0, #0x4d1                 	// #1233
   4a030:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a034:	mov	w0, #0x4d0                 	// #1232
   4a038:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a03c:	mov	w0, #0x4cf                 	// #1231
   4a040:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a044:	mov	w0, #0x4ce                 	// #1230
   4a048:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a04c:	mov	w0, #0x4cd                 	// #1229
   4a050:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a054:	mov	w0, #0x4cc                 	// #1228
   4a058:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a05c:	mov	w0, #0x4b8                 	// #1208
   4a060:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a064:	mov	w0, #0x4b7                 	// #1207
   4a068:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a06c:	mov	w0, #0x4b6                 	// #1206
   4a070:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a074:	mov	w0, #0x4b5                 	// #1205
   4a078:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a07c:	mov	w0, #0x4b4                 	// #1204
   4a080:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a084:	mov	w0, #0x4b3                 	// #1203
   4a088:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a08c:	mov	w0, #0x4b2                 	// #1202
   4a090:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a094:	mov	w0, #0x4b1                 	// #1201
   4a098:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a09c:	mov	w0, #0x4b0                 	// #1200
   4a0a0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0a4:	mov	w0, #0x4af                 	// #1199
   4a0a8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0ac:	mov	w0, #0x4ae                 	// #1198
   4a0b0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0b4:	mov	w0, #0x4ad                 	// #1197
   4a0b8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0bc:	mov	w0, #0x4ac                 	// #1196
   4a0c0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0c4:	mov	w0, #0x4ab                 	// #1195
   4a0c8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0cc:	mov	w0, #0x4aa                 	// #1194
   4a0d0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0d4:	mov	w0, #0x4a9                 	// #1193
   4a0d8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0dc:	mov	w0, #0x4bb                 	// #1211
   4a0e0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0e4:	mov	w0, #0x4ba                 	// #1210
   4a0e8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0ec:	mov	w0, #0x4c6                 	// #1222
   4a0f0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0f4:	mov	w0, #0x4c5                 	// #1221
   4a0f8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a0fc:	mov	w0, #0x4c4                 	// #1220
   4a100:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a104:	mov	w0, #0x4c3                 	// #1219
   4a108:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a10c:	mov	w0, #0x4c2                 	// #1218
   4a110:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a114:	mov	w0, #0x4c1                 	// #1217
   4a118:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a11c:	mov	w0, #0x4c0                 	// #1216
   4a120:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a124:	mov	w0, #0x505                 	// #1285
   4a128:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a12c:	mov	w0, #0x506                 	// #1286
   4a130:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a134:	mov	w0, #0x52c                 	// #1324
   4a138:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a13c:	mov	w0, #0x52e                 	// #1326
   4a140:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a144:	mov	w0, #0x531                 	// #1329
   4a148:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a14c:	mov	w0, #0x547                 	// #1351
   4a150:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a154:	mov	w0, #0x548                 	// #1352
   4a158:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a15c:	mov	w0, #0x4f4                 	// #1268
   4a160:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a164:	mov	w0, #0x549                 	// #1353
   4a168:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a16c:	mov	w0, #0x555                 	// #1365
   4a170:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a174:	mov	w0, #0x4e9                 	// #1257
   4a178:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a17c:	mov	w0, #0x556                 	// #1366
   4a180:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a184:	mov	w0, #0x4ee                 	// #1262
   4a188:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a18c:	mov	w0, #0x557                 	// #1367
   4a190:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a194:	mov	w0, #0x558                 	// #1368
   4a198:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a19c:	mov	w0, #0x55a                 	// #1370
   4a1a0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1a4:	mov	w0, #0x55c                 	// #1372
   4a1a8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1ac:	mov	w0, #0x55d                 	// #1373
   4a1b0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1b4:	mov	w0, #0x562                 	// #1378
   4a1b8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1bc:	mov	w0, #0x563                 	// #1379
   4a1c0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1c4:	mov	w0, #0x570                 	// #1392
   4a1c8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1cc:	mov	w0, #0x572                 	// #1394
   4a1d0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1d4:	mov	w0, #0x578                 	// #1400
   4a1d8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1dc:	mov	w0, #0x58f                 	// #1423
   4a1e0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1e4:	mov	w0, #0x6da                 	// #1754
   4a1e8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1ec:	mov	w0, #0x6db                 	// #1755
   4a1f0:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1f4:	mov	w0, #0x6dd                 	// #1757
   4a1f8:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a1fc:	mov	w0, #0x6de                 	// #1758
   4a200:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a204:	mov	w0, #0x71c                 	// #1820
   4a208:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a20c:	mov	w0, #0x71d                 	// #1821
   4a210:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a214:	mov	w0, #0x529                 	// #1321
   4a218:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a21c:	mov	w0, #0x3e0                 	// #992
   4a220:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a224:	mov	w0, #0x2e1                 	// #737
   4a228:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a22c:	mov	w0, #0x2cb                 	// #715
   4a230:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a234:	mov	w0, #0x26d                 	// #621
   4a238:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a23c:	mov	w0, #0x2                   	// #2
   4a240:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a244:	mov	w0, #0x184                 	// #388
   4a248:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a24c:	mov	w0, #0x9c                  	// #156
   4a250:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a254:	mov	w0, #0x98                  	// #152
   4a258:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a25c:	mov	w0, #0xf2                  	// #242
   4a260:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a264:	mov	w0, #0x19e                 	// #414
   4a268:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a26c:	mov	w0, #0x186                 	// #390
   4a270:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>
   4a274:	mov	w0, #0x2b1                 	// #689
   4a278:	b	49bb8 <aarch64_find_next_alias_opcode@@Base+0x60>

000000000004a27c <aarch64_extract_operand@@Base>:
   4a27c:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   4a280:	mov	x6, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   4a284:	movk	x6, #0xaaab
   4a288:	ldr	x5, [x5, #4032]
   4a28c:	sub	x5, x0, x5
   4a290:	asr	x5, x5, #4
   4a294:	mul	x5, x5, x6
   4a298:	sub	w5, w5, #0x1
   4a29c:	cmp	w5, #0xce
   4a2a0:	b.hi	4a3ac <aarch64_extract_operand@@Base+0x130>  // b.pmore
   4a2a4:	adrp	x6, 59000 <fields@@Base+0x5a8>
   4a2a8:	add	x6, x6, #0xb54
   4a2ac:	ldrb	w5, [x6, w5, uxtw]
   4a2b0:	adr	x6, 4a2bc <aarch64_extract_operand@@Base+0x40>
   4a2b4:	add	x5, x6, w5, sxtb #2
   4a2b8:	br	x5
   4a2bc:	b	35910 <aarch64_ext_regno@plt>
   4a2c0:	b	35150 <aarch64_ext_regrt_sysins@plt>
   4a2c4:	b	35ab0 <aarch64_ext_regno_pair@plt>
   4a2c8:	b	35400 <aarch64_ext_reg_extended@plt>
   4a2cc:	b	35ae0 <aarch64_ext_reg_shifted@plt>
   4a2d0:	b	35ac0 <aarch64_ext_ft@plt>
   4a2d4:	b	352f0 <aarch64_ext_reglane@plt>
   4a2d8:	b	357a0 <aarch64_ext_reglist@plt>
   4a2dc:	b	355d0 <aarch64_ext_ldst_reglist@plt>
   4a2e0:	b	35190 <aarch64_ext_ldst_reglist_r@plt>
   4a2e4:	b	35710 <aarch64_ext_ldst_elemlist@plt>
   4a2e8:	b	35770 <aarch64_ext_imm@plt>
   4a2ec:	b	35850 <aarch64_ext_advsimd_imm_shift@plt>
   4a2f0:	b	35b60 <aarch64_ext_advsimd_imm_modified@plt>
   4a2f4:	b	357c0 <aarch64_ext_shll_imm@plt>
   4a2f8:	b	353b0 <aarch64_ext_fpimm@plt>
   4a2fc:	b	35460 <aarch64_ext_limm@plt>
   4a300:	b	35200 <aarch64_ext_aimm@plt>
   4a304:	b	359b0 <aarch64_ext_imm_half@plt>
   4a308:	b	35160 <aarch64_ext_fbits@plt>
   4a30c:	b	35610 <aarch64_ext_imm_rotate2@plt>
   4a310:	b	35b40 <aarch64_ext_imm_rotate1@plt>
   4a314:	b	35be0 <aarch64_ext_cond@plt>
   4a318:	b	358f0 <aarch64_ext_addr_simple@plt>
   4a31c:	b	35810 <aarch64_ext_addr_regoff@plt>
   4a320:	b	352e0 <aarch64_ext_addr_simm@plt>
   4a324:	b	35360 <aarch64_ext_addr_simm10@plt>
   4a328:	b	351e0 <aarch64_ext_addr_uimm12@plt>
   4a32c:	b	35390 <aarch64_ext_addr_offset@plt>
   4a330:	b	35b90 <aarch64_ext_simd_addr_post@plt>
   4a334:	b	35100 <aarch64_ext_sysreg@plt>
   4a338:	b	35b70 <aarch64_ext_pstatefield@plt>
   4a33c:	b	35060 <aarch64_ext_sysins_op@plt>
   4a340:	b	35a20 <aarch64_ext_barrier@plt>
   4a344:	b	358d0 <aarch64_ext_prfop@plt>
   4a348:	b	35620 <aarch64_ext_hint@plt>
   4a34c:	b	35960 <aarch64_ext_sve_addr_ri_s4@plt>
   4a350:	b	354a0 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   4a354:	b	35a10 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   4a358:	b	352a0 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   4a35c:	b	35bb0 <aarch64_ext_sve_addr_ri_u6@plt>
   4a360:	b	35950 <aarch64_ext_sve_addr_rr_lsl@plt>
   4a364:	b	35aa0 <aarch64_ext_sve_addr_rz_xtw@plt>
   4a368:	b	350d0 <aarch64_ext_sve_addr_zi_u5@plt>
   4a36c:	b	356b0 <aarch64_ext_sve_addr_zz_lsl@plt>
   4a370:	b	352c0 <aarch64_ext_sve_addr_zz_sxtw@plt>
   4a374:	b	35820 <aarch64_ext_sve_addr_zz_uxtw@plt>
   4a378:	b	35740 <aarch64_ext_sve_aimm@plt>
   4a37c:	b	35220 <aarch64_ext_sve_asimm@plt>
   4a380:	b	35a40 <aarch64_ext_sve_float_half_one@plt>
   4a384:	b	35550 <aarch64_ext_sve_float_half_two@plt>
   4a388:	b	357f0 <aarch64_ext_sve_float_zero_one@plt>
   4a38c:	b	35540 <aarch64_ext_inv_limm@plt>
   4a390:	b	35b00 <aarch64_ext_sve_limm_mov@plt>
   4a394:	b	35980 <aarch64_ext_sve_scale@plt>
   4a398:	b	351d0 <aarch64_ext_sve_shlimm@plt>
   4a39c:	b	351c0 <aarch64_ext_sve_shrimm@plt>
   4a3a0:	b	35510 <aarch64_ext_sve_quad_index@plt>
   4a3a4:	b	35600 <aarch64_ext_sve_index@plt>
   4a3a8:	b	35500 <aarch64_ext_sve_reglist@plt>
   4a3ac:	stp	x29, x30, [sp, #-16]!
   4a3b0:	adrp	x3, 59000 <fields@@Base+0x5a8>
   4a3b4:	adrp	x1, 59000 <fields@@Base+0x5a8>
   4a3b8:	mov	x29, sp
   4a3bc:	adrp	x0, 54000 <xexit@@Base+0x1508>
   4a3c0:	add	x3, x3, #0xc23
   4a3c4:	add	x1, x1, #0xc3b
   4a3c8:	add	x0, x0, #0x679
   4a3cc:	mov	w2, #0x5dcb                	// #24011
   4a3d0:	bl	35b10 <__assert_fail@plt>

000000000004a3d4 <aarch64_get_opcode@@Base>:
   4a3d4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a3d8:	add	x1, x1, #0x5d0
   4a3dc:	ldr	w2, [x1, w0, uxtw #2]
   4a3e0:	adrp	x1, 97000 <aarch64_operands@@Base+0x16bc0>
   4a3e4:	mov	w0, #0x90                  	// #144
   4a3e8:	ldr	x1, [x1, #3848]
   4a3ec:	umaddl	x0, w2, w0, x1
   4a3f0:	ret
   4a3f4:	stp	x29, x30, [sp, #-48]!
   4a3f8:	mov	x29, sp
   4a3fc:	stp	x19, x20, [sp, #16]
   4a400:	ldp	x19, x20, [x0]
   4a404:	str	x21, [sp, #32]
   4a408:	mov	w21, w1
   4a40c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a410:	add	x1, x1, #0x714
   4a414:	mov	x0, x20
   4a418:	blr	x19
   4a41c:	cmp	w21, #0x10
   4a420:	b.hi	4a51c <aarch64_get_opcode@@Base+0x148>  // b.pmore
   4a424:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4a428:	add	x0, x0, #0x9d0
   4a42c:	ldrb	w0, [x0, w21, uxtw]
   4a430:	adr	x1, 4a43c <aarch64_get_opcode@@Base+0x68>
   4a434:	add	x0, x1, w0, sxtb #2
   4a438:	br	x0
   4a43c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a440:	add	x1, x1, #0x72e
   4a444:	mov	x0, x20
   4a448:	mov	x16, x19
   4a44c:	ldp	x19, x20, [sp, #16]
   4a450:	ldr	x21, [sp, #32]
   4a454:	ldp	x29, x30, [sp], #48
   4a458:	br	x16
   4a45c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a460:	add	x1, x1, #0x73b
   4a464:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a468:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a46c:	add	x1, x1, #0x74c
   4a470:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a474:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a478:	add	x1, x1, #0x75c
   4a47c:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a480:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a484:	add	x1, x1, #0x76e
   4a488:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a48c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a490:	add	x1, x1, #0x778
   4a494:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a498:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a49c:	add	x1, x1, #0x78c
   4a4a0:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4a4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4a8:	add	x1, x1, #0x7a0
   4a4ac:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4b0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4b4:	add	x1, x1, #0x7b4
   4a4b8:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4bc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4c0:	add	x1, x1, #0x7d1
   4a4c4:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4c8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4cc:	add	x1, x1, #0x7ed
   4a4d0:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4d4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4d8:	add	x1, x1, #0x806
   4a4dc:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4e0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4e4:	add	x1, x1, #0x7fa
   4a4e8:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4ec:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4f0:	add	x1, x1, #0x813
   4a4f4:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a4f8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a4fc:	add	x1, x1, #0x83a
   4a500:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a504:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a508:	add	x1, x1, #0x861
   4a50c:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a510:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4a514:	add	x1, x1, #0x880
   4a518:	b	4a444 <aarch64_get_opcode@@Base+0x70>
   4a51c:	ldp	x19, x20, [sp, #16]
   4a520:	ldr	x21, [sp, #32]
   4a524:	ldp	x29, x30, [sp], #48
   4a528:	ret
   4a52c:	cmp	w0, #0x4f
   4a530:	b.hi	4a580 <aarch64_get_opcode@@Base+0x1ac>  // b.pmore
   4a534:	cmp	w0, #0xe
   4a538:	b.hi	4a550 <aarch64_get_opcode@@Base+0x17c>  // b.pmore
   4a53c:	mov	x0, #0x0                   	// #0
   4a540:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a544:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a548:	add	x0, x0, #0x95f
   4a54c:	ret
   4a550:	sub	w0, w0, #0xf
   4a554:	cmp	w0, #0x40
   4a558:	b.hi	4a53c <aarch64_get_opcode@@Base+0x168>  // b.pmore
   4a55c:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4a560:	add	x1, x1, #0x9e4
   4a564:	ldrb	w0, [x1, w0, uxtw]
   4a568:	adr	x1, 4a574 <aarch64_get_opcode@@Base+0x1a0>
   4a56c:	add	x0, x1, w0, sxtb #2
   4a570:	br	x0
   4a574:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a578:	add	x0, x0, #0x99e
   4a57c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a580:	sub	w0, w0, #0x6e
   4a584:	cmp	w0, #0x10
   4a588:	b.hi	4a53c <aarch64_get_opcode@@Base+0x168>  // b.pmore
   4a58c:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4a590:	add	x1, x1, #0xa28
   4a594:	ldrb	w0, [x1, w0, uxtw]
   4a598:	adr	x1, 4a5a4 <aarch64_get_opcode@@Base+0x1d0>
   4a59c:	add	x0, x1, w0, sxtb #2
   4a5a0:	br	x0
   4a5a4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5a8:	add	x0, x0, #0x8a4
   4a5ac:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5b0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5b4:	add	x0, x0, #0x8ab
   4a5b8:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5bc:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5c0:	add	x0, x0, #0x8b3
   4a5c4:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5c8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5cc:	add	x0, x0, #0x8bb
   4a5d0:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5d4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5d8:	add	x0, x0, #0x8c3
   4a5dc:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5e0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5e4:	add	x0, x0, #0x8ca
   4a5e8:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5ec:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5f0:	add	x0, x0, #0x8d1
   4a5f4:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a5f8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a5fc:	add	x0, x0, #0x8d8
   4a600:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a604:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a608:	add	x0, x0, #0x8df
   4a60c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a610:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a614:	add	x0, x0, #0x8e7
   4a618:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a61c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a620:	add	x0, x0, #0x8ef
   4a624:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a628:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a62c:	add	x0, x0, #0x8f7
   4a630:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a634:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a638:	add	x0, x0, #0x8fe
   4a63c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a640:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a644:	add	x0, x0, #0x905
   4a648:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a64c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a650:	add	x0, x0, #0x90c
   4a654:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a658:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a65c:	add	x0, x0, #0x913
   4a660:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a664:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a668:	add	x0, x0, #0x91a
   4a66c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a670:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a674:	add	x0, x0, #0x921
   4a678:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a67c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a680:	add	x0, x0, #0x928
   4a684:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a688:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a68c:	add	x0, x0, #0x92f
   4a690:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a694:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a698:	add	x0, x0, #0x936
   4a69c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6a0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6a4:	add	x0, x0, #0x93d
   4a6a8:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6ac:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6b0:	add	x0, x0, #0x944
   4a6b4:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6b8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6bc:	add	x0, x0, #0x94b
   4a6c0:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6c4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6c8:	add	x0, x0, #0x953
   4a6cc:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6d0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6d4:	add	x0, x0, #0x95a
   4a6d8:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6dc:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6e0:	add	x0, x0, #0x971
   4a6e4:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6e8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6ec:	add	x0, x0, #0x97a
   4a6f0:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a6f4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a6f8:	add	x0, x0, #0x983
   4a6fc:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a700:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a704:	add	x0, x0, #0x98c
   4a708:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a70c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a710:	add	x0, x0, #0x995
   4a714:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a718:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a71c:	add	x0, x0, #0x968
   4a720:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a724:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a728:	add	x0, x0, #0x89f
   4a72c:	b	4a54c <aarch64_get_opcode@@Base+0x178>
   4a730:	sub	w0, w0, #0x1
   4a734:	cmp	w0, #0xe
   4a738:	b.hi	4a7d8 <aarch64_get_opcode@@Base+0x404>  // b.pmore
   4a73c:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4a740:	add	x1, x1, #0xa3c
   4a744:	ldrb	w0, [x1, w0, uxtw]
   4a748:	adr	x1, 4a754 <aarch64_get_opcode@@Base+0x380>
   4a74c:	add	x0, x1, w0, sxtb #2
   4a750:	br	x0
   4a754:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a758:	add	x0, x0, #0x357
   4a75c:	ret
   4a760:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a764:	add	x0, x0, #0xaa8
   4a768:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a76c:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a770:	add	x0, x0, #0x32d
   4a774:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a778:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a77c:	add	x0, x0, #0x327
   4a780:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a784:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a788:	add	x0, x0, #0x321
   4a78c:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a790:	adrp	x0, 55000 <xexit@@Base+0x2508>
   4a794:	add	x0, x0, #0x577
   4a798:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a79c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a7a0:	add	x0, x0, #0x9a5
   4a7a4:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7a8:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a7ac:	add	x0, x0, #0x30b
   4a7b0:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7b4:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a7b8:	add	x0, x0, #0x301
   4a7bc:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7c0:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a7c4:	add	x0, x0, #0x2fb
   4a7c8:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7cc:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a7d0:	add	x0, x0, #0x2f5
   4a7d4:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7d8:	mov	x0, #0x0                   	// #0
   4a7dc:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7e0:	adrp	x0, 58000 <xexit@@Base+0x5508>
   4a7e4:	add	x0, x0, #0x337
   4a7e8:	b	4a75c <aarch64_get_opcode@@Base+0x388>
   4a7ec:	cmp	w0, #0x14
   4a7f0:	b.le	4a830 <aarch64_get_opcode@@Base+0x45c>
   4a7f4:	sub	w0, w0, #0x88
   4a7f8:	cmp	w0, #0x10
   4a7fc:	b.ls	4a80c <aarch64_get_opcode@@Base+0x438>  // b.plast
   4a800:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a804:	add	x0, x0, #0x9aa
   4a808:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a80c:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4a810:	add	x1, x1, #0xa4c
   4a814:	ldrb	w0, [x1, w0, uxtw]
   4a818:	adr	x1, 4a824 <aarch64_get_opcode@@Base+0x450>
   4a81c:	add	x0, x1, w0, sxtb #2
   4a820:	br	x0
   4a824:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a828:	add	x0, x0, #0xa09
   4a82c:	ret
   4a830:	b.hi	4a800 <aarch64_get_opcode@@Base+0x42c>  // b.pmore
   4a834:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4a838:	add	x1, x1, #0xa60
   4a83c:	ldrb	w0, [x1, w0, uxtw]
   4a840:	adr	x1, 4a84c <aarch64_get_opcode@@Base+0x478>
   4a844:	add	x0, x1, w0, sxtb #2
   4a848:	br	x0
   4a84c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a850:	add	x0, x0, #0xa59
   4a854:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a858:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a85c:	add	x0, x0, #0x9b4
   4a860:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a864:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a868:	add	x0, x0, #0x9b6
   4a86c:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a870:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a874:	add	x0, x0, #0x9ba
   4a878:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a87c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a880:	add	x0, x0, #0x9c0
   4a884:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a888:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a88c:	add	x0, x0, #0x9bf
   4a890:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a894:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a898:	add	x0, x0, #0x9c5
   4a89c:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8a0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8a4:	add	x0, x0, #0x9c9
   4a8a8:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8ac:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8b0:	add	x0, x0, #0x9cd
   4a8b4:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8b8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8bc:	add	x0, x0, #0x9d4
   4a8c0:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8c4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8c8:	add	x0, x0, #0x9db
   4a8cc:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8d0:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8d4:	add	x0, x0, #0x9e3
   4a8d8:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8dc:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8e0:	add	x0, x0, #0x9eb
   4a8e4:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8e8:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8ec:	add	x0, x0, #0x9f7
   4a8f0:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a8f4:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a8f8:	add	x0, x0, #0xa01
   4a8fc:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a900:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a904:	add	x0, x0, #0xa17
   4a908:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a90c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a910:	add	x0, x0, #0xa21
   4a914:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a918:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a91c:	add	x0, x0, #0xa2b
   4a920:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a924:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a928:	add	x0, x0, #0xa36
   4a92c:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a930:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a934:	add	x0, x0, #0xa41
   4a938:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a93c:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a940:	add	x0, x0, #0xa4e
   4a944:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a948:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a94c:	add	x0, x0, #0xa0a
   4a950:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a954:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a958:	add	x0, x0, #0xa10
   4a95c:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a960:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4a964:	add	x0, x0, #0x9b5
   4a968:	b	4a82c <aarch64_get_opcode@@Base+0x458>
   4a96c:	sub	w2, w2, w1
   4a970:	subs	w4, w4, w3
   4a974:	b.pl	4a984 <aarch64_get_opcode@@Base+0x5b0>  // b.nfrst
   4a978:	stp	x29, x30, [sp, #-16]!
   4a97c:	mov	x29, sp
   4a980:	bl	356c0 <abort@plt>
   4a984:	tbnz	w2, #31, 4a978 <aarch64_get_opcode@@Base+0x5a4>
   4a988:	mov	x5, #0x2                   	// #2
   4a98c:	lsr	x3, x0, x3
   4a990:	lsl	x4, x5, x4
   4a994:	sub	x4, x4, #0x1
   4a998:	and	x3, x4, x3
   4a99c:	lsl	x5, x5, x2
   4a9a0:	add	w4, w2, #0x1
   4a9a4:	sub	x5, x5, #0x1
   4a9a8:	lsr	x0, x0, x1
   4a9ac:	and	x0, x5, x0
   4a9b0:	lsl	x3, x3, x4
   4a9b4:	orr	x0, x3, x0
   4a9b8:	ret
   4a9bc:	cmp	w1, #0xdb
   4a9c0:	b.hi	4abf4 <aarch64_get_opcode@@Base+0x820>  // b.pmore
   4a9c4:	stp	x29, x30, [sp, #-32]!
   4a9c8:	mov	x29, sp
   4a9cc:	str	x19, [sp, #16]
   4a9d0:	mov	x19, x0
   4a9d4:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4a9d8:	add	x0, x0, #0xa78
   4a9dc:	ldrh	w0, [x0, w1, uxtw #1]
   4a9e0:	adr	x2, 4a9ec <aarch64_get_opcode@@Base+0x618>
   4a9e4:	add	x0, x2, w0, sxth #2
   4a9e8:	br	x0
   4a9ec:	mov	w4, #0x16                  	// #22
   4a9f0:	mov	x0, x19
   4a9f4:	mov	w3, w4
   4a9f8:	mov	w2, #0xf                   	// #15
   4a9fc:	mov	w1, #0xd                   	// #13
   4aa00:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4aa04:	cmp	x0, #0x0
   4aa08:	cset	w0, eq  // eq = none
   4aa0c:	ldr	x19, [sp, #16]
   4aa10:	ldp	x29, x30, [sp], #32
   4aa14:	ret
   4aa18:	mov	w4, #0x16                  	// #22
   4aa1c:	mov	x0, x19
   4aa20:	mov	w3, w4
   4aa24:	mov	w2, #0xf                   	// #15
   4aa28:	mov	w1, #0xd                   	// #13
   4aa2c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4aa30:	cbz	x0, 4abe4 <aarch64_get_opcode@@Base+0x810>
   4aa34:	and	x0, x19, #0x1
   4aa38:	tst	x19, #0x1000
   4aa3c:	csel	w0, wzr, w0, ne  // ne = any
   4aa40:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4aa44:	mov	w4, #0x16                  	// #22
   4aa48:	mov	x0, x19
   4aa4c:	mov	w3, w4
   4aa50:	mov	w2, #0xf                   	// #15
   4aa54:	mov	w1, #0xd                   	// #13
   4aa58:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4aa5c:	cbz	x0, 4abe4 <aarch64_get_opcode@@Base+0x810>
   4aa60:	and	x19, x19, #0xf
   4aa64:	cmp	x19, #0xd
   4aa68:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4aa6c:	mov	w4, #0x16                  	// #22
   4aa70:	mov	x0, x19
   4aa74:	mov	w3, w4
   4aa78:	mov	w2, #0xf                   	// #15
   4aa7c:	mov	w1, #0xd                   	// #13
   4aa80:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4aa84:	cbz	x0, 4abe4 <aarch64_get_opcode@@Base+0x810>
   4aa88:	ubfx	x19, x19, #20, #2
   4aa8c:	cmp	x19, #0x3
   4aa90:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4aa94:	lsr	x0, x19, #21
   4aa98:	orr	x0, x0, x19, lsr #24
   4aa9c:	tbz	w0, #0, 4abe4 <aarch64_get_opcode@@Base+0x810>
   4aaa0:	ubfx	x19, x19, #7, #2
   4aaa4:	b	4aa8c <aarch64_get_opcode@@Base+0x6b8>
   4aaa8:	lsr	x0, x19, #21
   4aaac:	orr	x0, x0, x19, lsr #24
   4aab0:	mvn	x0, x0
   4aab4:	and	w0, w0, #0x1
   4aab8:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4aabc:	lsr	x19, x19, #16
   4aac0:	tst	x19, #0x38
   4aac4:	cset	w0, eq  // eq = none
   4aac8:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4aacc:	lsr	x0, x19, #8
   4aad0:	tbz	w19, #8, 4abe4 <aarch64_get_opcode@@Base+0x810>
   4aad4:	and	x0, x0, #0xc
   4aad8:	cmp	x0, #0xc
   4aadc:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4aae0:	lsr	x1, x19, #8
   4aae4:	ubfx	x19, x19, #8, #4
   4aae8:	cmp	x19, #0xe
   4aaec:	b.eq	4abe4 <aarch64_get_opcode@@Base+0x810>  // b.none
   4aaf0:	mov	x0, #0x9                   	// #9
   4aaf4:	and	x0, x1, x0
   4aaf8:	cmp	x0, #0x1
   4aafc:	b.eq	4aa0c <aarch64_get_opcode@@Base+0x638>  // b.none
   4ab00:	mov	x0, #0xd                   	// #13
   4ab04:	and	x1, x1, x0
   4ab08:	cmp	x1, #0x9
   4ab0c:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4ab10:	tbz	w19, #5, 4abec <aarch64_get_opcode@@Base+0x818>
   4ab14:	ubfx	x19, x19, #8, #4
   4ab18:	cmp	x19, #0xe
   4ab1c:	cset	w0, ne  // ne = any
   4ab20:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4ab24:	ubfx	x0, x19, #19, #2
   4ab28:	tst	x19, #0x180000
   4ab2c:	ccmp	x0, #0x3, #0x4, ne  // ne = any
   4ab30:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4ab34:	ubfx	x19, x19, #18, #2
   4ab38:	b	4aa8c <aarch64_get_opcode@@Base+0x6b8>
   4ab3c:	ubfx	x19, x19, #20, #3
   4ab40:	cmp	x19, #0x7
   4ab44:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4ab48:	lsr	x19, x19, #20
   4ab4c:	and	x19, x19, #0x6
   4ab50:	cmp	x19, #0x6
   4ab54:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4ab58:	ubfx	x0, x19, #20, #2
   4ab5c:	cmp	x0, #0x3
   4ab60:	b.eq	4abe4 <aarch64_get_opcode@@Base+0x810>  // b.none
   4ab64:	ubfx	x19, x19, #1, #3
   4ab68:	b	4ab40 <aarch64_get_opcode@@Base+0x76c>
   4ab6c:	tst	x19, #0x70000
   4ab70:	b.ne	4abec <aarch64_get_opcode@@Base+0x818>  // b.any
   4ab74:	ubfx	x19, x19, #19, #2
   4ab78:	sub	x19, x19, #0x1
   4ab7c:	cmp	x19, #0x1
   4ab80:	cset	w0, ls  // ls = plast
   4ab84:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4ab88:	tst	x19, #0x380000
   4ab8c:	b	4aac4 <aarch64_get_opcode@@Base+0x6f0>
   4ab90:	ubfx	x19, x19, #16, #4
   4ab94:	cmp	x19, #0xf
   4ab98:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4ab9c:	ubfx	x19, x19, #9, #3
   4aba0:	b	4ab40 <aarch64_get_opcode@@Base+0x76c>
   4aba4:	and	x2, x19, #0xf
   4aba8:	ubfx	x0, x19, #16, #4
   4abac:	cmp	x2, #0xf
   4abb0:	ccmp	x0, #0xf, #0x0, eq  // eq = none
   4abb4:	b.eq	4abe4 <aarch64_get_opcode@@Base+0x810>  // b.none
   4abb8:	cmp	x0, x2
   4abbc:	ccmp	x0, #0xf, #0x4, eq  // eq = none
   4abc0:	b.ne	4abe4 <aarch64_get_opcode@@Base+0x810>  // b.any
   4abc4:	and	x0, x19, #0xf
   4abc8:	cmp	x0, #0xd
   4abcc:	b.eq	4abe4 <aarch64_get_opcode@@Base+0x810>  // b.none
   4abd0:	cmp	w1, #0xda
   4abd4:	b.ne	4abec <aarch64_get_opcode@@Base+0x818>  // b.any
   4abd8:	ubfx	x19, x19, #16, #4
   4abdc:	cmp	x19, x0
   4abe0:	b	4aa08 <aarch64_get_opcode@@Base+0x634>
   4abe4:	mov	w0, #0x1                   	// #1
   4abe8:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4abec:	mov	w0, #0x0                   	// #0
   4abf0:	b	4aa0c <aarch64_get_opcode@@Base+0x638>
   4abf4:	mov	w0, #0x0                   	// #0
   4abf8:	ret
   4abfc:	stp	x29, x30, [sp, #-32]!
   4ac00:	sub	w1, w1, #0x11
   4ac04:	cmp	w1, #0xb0
   4ac08:	mov	x29, sp
   4ac0c:	str	x19, [sp, #16]
   4ac10:	mov	x19, x2
   4ac14:	mov	w2, #0x11                  	// #17
   4ac18:	str	w2, [x19]
   4ac1c:	b.hi	4acdc <aarch64_get_opcode@@Base+0x908>  // b.pmore
   4ac20:	adrp	x2, 68000 <fields@@Base+0xf5a8>
   4ac24:	add	x2, x2, #0xc30
   4ac28:	ldrh	w1, [x2, w1, uxtw #1]
   4ac2c:	adr	x2, 4ac38 <aarch64_get_opcode@@Base+0x864>
   4ac30:	add	x1, x2, w1, sxth #2
   4ac34:	br	x1
   4ac38:	mov	w4, #0x16                  	// #22
   4ac3c:	mov	w2, #0x5                   	// #5
   4ac40:	mov	w3, w4
   4ac44:	mov	w1, w2
   4ac48:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4ac4c:	cmp	x0, #0x3
   4ac50:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ac54:	mov	w0, #0x3                   	// #3
   4ac58:	str	w0, [x19]
   4ac5c:	b	4ae54 <aarch64_get_opcode@@Base+0xa80>
   4ac60:	ubfx	x0, x0, #20, #2
   4ac64:	b	4ac4c <aarch64_get_opcode@@Base+0x878>
   4ac68:	ubfx	x0, x0, #7, #2
   4ac6c:	b	4ac4c <aarch64_get_opcode@@Base+0x878>
   4ac70:	tbnz	w0, #8, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ac74:	mov	w0, #0x4                   	// #4
   4ac78:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ac7c:	tst	x0, #0x180
   4ac80:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ac84:	mov	w0, #0x1                   	// #1
   4ac88:	str	w0, [x19]
   4ac8c:	ldr	x19, [sp, #16]
   4ac90:	ldp	x29, x30, [sp], #32
   4ac94:	ret
   4ac98:	ubfx	x1, x0, #7, #2
   4ac9c:	cmp	x1, #0x3
   4aca0:	b.eq	4ac54 <aarch64_get_opcode@@Base+0x880>  // b.none
   4aca4:	ubfx	x0, x0, #28, #1
   4aca8:	orr	x0, x0, x1
   4acac:	cbnz	x0, 4acdc <aarch64_get_opcode@@Base+0x908>
   4acb0:	mov	w0, #0x8                   	// #8
   4acb4:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4acb8:	ubfx	x1, x0, #7, #2
   4acbc:	cmp	x1, #0x3
   4acc0:	b.eq	4ac54 <aarch64_get_opcode@@Base+0x880>  // b.none
   4acc4:	tbnz	w0, #28, 4acd8 <aarch64_get_opcode@@Base+0x904>
   4acc8:	cmp	x1, #0x1
   4accc:	b.ne	4acd8 <aarch64_get_opcode@@Base+0x904>  // b.any
   4acd0:	mov	w0, #0x9                   	// #9
   4acd4:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4acd8:	cbz	x1, 4ac84 <aarch64_get_opcode@@Base+0x8b0>
   4acdc:	mov	w0, #0x0                   	// #0
   4ace0:	b	4ac8c <aarch64_get_opcode@@Base+0x8b8>
   4ace4:	ubfx	x1, x0, #7, #2
   4ace8:	cmp	x1, #0x2
   4acec:	b.eq	4acf8 <aarch64_get_opcode@@Base+0x924>  // b.none
   4acf0:	mov	w0, #0x6                   	// #6
   4acf4:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4acf8:	tbnz	w0, #28, 4acdc <aarch64_get_opcode@@Base+0x908>
   4acfc:	mov	w0, #0xa                   	// #10
   4ad00:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ad04:	ubfx	x1, x0, #7, #2
   4ad08:	cmp	x1, #0x3
   4ad0c:	b.eq	4acf8 <aarch64_get_opcode@@Base+0x924>  // b.none
   4ad10:	mov	w0, #0x7                   	// #7
   4ad14:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ad18:	ubfx	x0, x0, #7, #2
   4ad1c:	cmp	x0, #0x3
   4ad20:	b.eq	4ac54 <aarch64_get_opcode@@Base+0x880>  // b.none
   4ad24:	cbz	x0, 4ac84 <aarch64_get_opcode@@Base+0x8b0>
   4ad28:	b	4acdc <aarch64_get_opcode@@Base+0x908>
   4ad2c:	ubfx	x0, x0, #7, #2
   4ad30:	cmp	x0, #0x2
   4ad34:	b.ne	4acf0 <aarch64_get_opcode@@Base+0x91c>  // b.any
   4ad38:	b	4acdc <aarch64_get_opcode@@Base+0x908>
   4ad3c:	ubfx	x0, x0, #7, #2
   4ad40:	cmp	x0, #0x3
   4ad44:	b.ne	4ad10 <aarch64_get_opcode@@Base+0x93c>  // b.any
   4ad48:	b	4acdc <aarch64_get_opcode@@Base+0x908>
   4ad4c:	lsr	x1, x0, #16
   4ad50:	tbnz	w0, #21, 4ad5c <aarch64_get_opcode@@Base+0x988>
   4ad54:	mov	w0, #0xb                   	// #11
   4ad58:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ad5c:	tbnz	w0, #9, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ad60:	and	x1, x1, #0x30
   4ad64:	cmp	x1, #0x20
   4ad68:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ad6c:	mov	w0, #0xc                   	// #12
   4ad70:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ad74:	ubfx	x1, x0, #18, #2
   4ad78:	tst	x0, #0xc0000
   4ad7c:	b.eq	4ac84 <aarch64_get_opcode@@Base+0x8b0>  // b.none
   4ad80:	cmp	x1, #0x3
   4ad84:	b	4ac50 <aarch64_get_opcode@@Base+0x87c>
   4ad88:	tst	x0, #0x60
   4ad8c:	lsr	x1, x0, #21
   4ad90:	ubfx	x2, x0, #5, #2
   4ad94:	ubfx	w0, w0, #23, #1
   4ad98:	csel	w0, w0, wzr, eq  // eq = none
   4ad9c:	cbz	w0, 4adac <aarch64_get_opcode@@Base+0x9d8>
   4ada0:	tbnz	w1, #1, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ada4:	mov	w0, #0xe                   	// #14
   4ada8:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4adac:	cmp	x2, #0x2
   4adb0:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4adb4:	tbnz	w1, #1, 4acdc <aarch64_get_opcode@@Base+0x908>
   4adb8:	mov	w0, #0xd                   	// #13
   4adbc:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4adc0:	ubfx	x1, x0, #5, #2
   4adc4:	cmp	x1, #0x2
   4adc8:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4adcc:	tbz	w0, #22, 4adb8 <aarch64_get_opcode@@Base+0x9e4>
   4add0:	b	4acdc <aarch64_get_opcode@@Base+0x908>
   4add4:	lsr	x1, x0, #22
   4add8:	orr	x0, x1, x0, lsr #5
   4addc:	and	w0, w0, #0x1
   4ade0:	b	4ac8c <aarch64_get_opcode@@Base+0x8b8>
   4ade4:	tbnz	w0, #5, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ade8:	mov	x2, #0x9                   	// #9
   4adec:	lsr	x1, x0, #8
   4adf0:	and	x0, x2, x0, lsr #8
   4adf4:	cmp	x0, #0x1
   4adf8:	b.eq	4ae0c <aarch64_get_opcode@@Base+0xa38>  // b.none
   4adfc:	mov	x0, #0x5                   	// #5
   4ae00:	and	x1, x1, x0
   4ae04:	cmp	x1, #0x1
   4ae08:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ae0c:	mov	w0, #0xf                   	// #15
   4ae10:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ae14:	ubfx	x0, x0, #18, #2
   4ae18:	cmp	x0, #0x2
   4ae1c:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ae20:	mov	w0, #0x2                   	// #2
   4ae24:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ae28:	mov	w1, #0x10001000            	// #268439552
   4ae2c:	bics	xzr, x1, x0
   4ae30:	b.ne	4acdc <aarch64_get_opcode@@Base+0x908>  // b.any
   4ae34:	mov	w0, #0x10                  	// #16
   4ae38:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4ae3c:	lsr	x1, x0, #19
   4ae40:	ubfx	x0, x0, #19, #2
   4ae44:	cmp	x0, #0x1
   4ae48:	b.eq	4acdc <aarch64_get_opcode@@Base+0x908>  // b.none
   4ae4c:	tbnz	w1, #1, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ae50:	str	wzr, [x19]
   4ae54:	mov	w0, #0x1                   	// #1
   4ae58:	b	4ac8c <aarch64_get_opcode@@Base+0x8b8>
   4ae5c:	lsr	x1, x0, #19
   4ae60:	ubfx	x0, x0, #19, #3
   4ae64:	cmp	x0, #0x1
   4ae68:	b.eq	4acdc <aarch64_get_opcode@@Base+0x908>  // b.none
   4ae6c:	and	x0, x1, #0x6
   4ae70:	cmp	x0, #0x2
   4ae74:	b.eq	4acdc <aarch64_get_opcode@@Base+0x908>  // b.none
   4ae78:	tbnz	w1, #2, 4acdc <aarch64_get_opcode@@Base+0x908>
   4ae7c:	b	4ae50 <aarch64_get_opcode@@Base+0xa7c>
   4ae80:	tst	x0, #0x180000
   4ae84:	b	4ac80 <aarch64_get_opcode@@Base+0x8ac>
   4ae88:	ubfx	x0, x0, #18, #2
   4ae8c:	b	4ac4c <aarch64_get_opcode@@Base+0x878>
   4ae90:	tst	x0, #0xc0000
   4ae94:	b.eq	4acdc <aarch64_get_opcode@@Base+0x908>  // b.none
   4ae98:	mov	w0, #0x5                   	// #5
   4ae9c:	b	4ac58 <aarch64_get_opcode@@Base+0x884>
   4aea0:	tbnz	w0, #19, 4ae20 <aarch64_get_opcode@@Base+0xa4c>
   4aea4:	b	4acdc <aarch64_get_opcode@@Base+0x908>
   4aea8:	mov	x4, x0
   4aeac:	mov	w7, #0x0                   	// #0
   4aeb0:	mov	x8, #0x0                   	// #0
   4aeb4:	mov	w10, #0xa                   	// #10
   4aeb8:	mov	x11, #0x2                   	// #2
   4aebc:	mov	x0, x4
   4aec0:	mov	w5, #0x0                   	// #0
   4aec4:	mov	x4, x0
   4aec8:	ldrb	w6, [x4], #1
   4aecc:	sub	w9, w6, #0x30
   4aed0:	and	w9, w9, #0xff
   4aed4:	cmp	w9, #0x9
   4aed8:	b.ls	4af14 <aarch64_get_opcode@@Base+0xb40>  // b.plast
   4aedc:	cmp	w6, #0x2d
   4aee0:	b.ne	4af34 <aarch64_get_opcode@@Base+0xb60>  // b.any
   4aee4:	mov	x0, x4
   4aee8:	mov	w4, #0x0                   	// #0
   4aeec:	ldrb	w9, [x0]
   4aef0:	sub	w6, w9, #0x30
   4aef4:	and	w6, w6, #0xff
   4aef8:	cmp	w6, #0x9
   4aefc:	b.ls	4af24 <aarch64_get_opcode@@Base+0xb50>  // b.plast
   4af00:	subs	w4, w4, w5
   4af04:	b.pl	4af3c <aarch64_get_opcode@@Base+0xb68>  // b.nfrst
   4af08:	stp	x29, x30, [sp, #-16]!
   4af0c:	mov	x29, sp
   4af10:	bl	356c0 <abort@plt>
   4af14:	madd	w5, w5, w10, w6
   4af18:	mov	x0, x4
   4af1c:	sub	w5, w5, #0x30
   4af20:	b	4aec4 <aarch64_get_opcode@@Base+0xaf0>
   4af24:	madd	w4, w4, w10, w9
   4af28:	add	x0, x0, #0x1
   4af2c:	sub	w4, w4, #0x30
   4af30:	b	4aeec <aarch64_get_opcode@@Base+0xb18>
   4af34:	mov	w4, w5
   4af38:	b	4af00 <aarch64_get_opcode@@Base+0xb2c>
   4af3c:	lsl	x6, x11, x4
   4af40:	sub	x6, x6, #0x1
   4af44:	lsr	x5, x1, x5
   4af48:	and	x5, x6, x5
   4af4c:	add	w4, w4, #0x1
   4af50:	lsl	x5, x5, x7
   4af54:	add	w7, w7, w4
   4af58:	mov	x4, x0
   4af5c:	orr	x8, x8, x5
   4af60:	ldrb	w5, [x4], #1
   4af64:	cmp	w5, #0x2c
   4af68:	b.eq	4aebc <aarch64_get_opcode@@Base+0xae8>  // b.none
   4af6c:	str	x8, [x2]
   4af70:	str	w7, [x3]
   4af74:	ret
   4af78:	stp	x29, x30, [sp, #-192]!
   4af7c:	mov	x29, sp
   4af80:	stp	x19, x20, [sp, #16]
   4af84:	stp	x21, x22, [sp, #32]
   4af88:	mov	x22, x1
   4af8c:	mov	x21, x2
   4af90:	stp	x23, x24, [sp, #48]
   4af94:	adrp	x23, 82000 <aarch64_operands@@Base+0x1bc0>
   4af98:	ldp	x20, x19, [x1]
   4af9c:	add	x1, x23, #0xb70
   4afa0:	stp	x25, x26, [sp, #64]
   4afa4:	stp	x27, x28, [sp, #80]
   4afa8:	ldr	x28, [x1, #32]
   4afac:	cbnz	x28, 4afe0 <aarch64_get_opcode@@Base+0xc0c>
   4afb0:	mov	w2, w21
   4afb4:	mov	x0, x19
   4afb8:	mov	x16, x20
   4afbc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4afc0:	ldp	x19, x20, [sp, #16]
   4afc4:	add	x1, x1, #0xab4
   4afc8:	ldp	x21, x22, [sp, #32]
   4afcc:	ldp	x23, x24, [sp, #48]
   4afd0:	ldp	x25, x26, [sp, #64]
   4afd4:	ldp	x27, x28, [sp, #80]
   4afd8:	ldp	x29, x30, [sp], #192
   4afdc:	br	x16
   4afe0:	ldrh	w2, [x1, #26]
   4afe4:	ldrh	w3, [x1, #24]
   4afe8:	and	x2, x2, x21
   4afec:	cmp	x2, x3
   4aff0:	b.ne	4b5fc <aarch64_get_opcode@@Base+0x1228>  // b.any
   4aff4:	add	x26, x0, #0x4
   4aff8:	tst	x21, #0x7c0
   4affc:	ubfx	x0, x21, #6, #5
   4b000:	mov	x1, #0x20                  	// #32
   4b004:	csel	x0, x0, x1, ne  // ne = any
   4b008:	asr	x1, x21, #2
   4b00c:	str	x0, [sp, #160]
   4b010:	asr	x0, x21, #3
   4b014:	and	x2, x0, #0x40
   4b018:	and	x1, x1, #0x3e
   4b01c:	orr	x1, x1, x2
   4b020:	ubfx	w2, w21, #8, #3
   4b024:	add	x1, x1, x26
   4b028:	str	x1, [sp, #112]
   4b02c:	mov	w1, #0x1                   	// #1
   4b030:	and	x0, x0, #0x7
   4b034:	lsl	w1, w1, w2
   4b038:	tst	x21, #0x40
   4b03c:	sxtw	x1, w1
   4b040:	add	x23, x23, #0xb70
   4b044:	and	x1, x1, x21
   4b048:	str	x1, [sp, #136]
   4b04c:	add	x1, x0, #0x8
   4b050:	add	x27, x23, #0xe70
   4b054:	csel	x0, x0, x1, eq  // eq = none
   4b058:	str	x0, [sp, #144]
   4b05c:	lsl	w0, w21, #1
   4b060:	str	w0, [sp, #184]
   4b064:	ubfx	x0, x21, #4, #4
   4b068:	str	x0, [sp, #128]
   4b06c:	and	x0, x21, #0x7
   4b070:	tst	x21, #0x80
   4b074:	add	x1, x0, #0x8
   4b078:	mov	x24, #0x0                   	// #0
   4b07c:	csel	x0, x0, x1, eq  // eq = none
   4b080:	str	w21, [sp, #124]
   4b084:	str	x0, [sp, #152]
   4b088:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   4b08c:	add	x0, x0, #0xaa6
   4b090:	str	x0, [sp, #176]
   4b094:	ldrb	w2, [x28]
   4b098:	cbnz	w2, 4b0d8 <aarch64_get_opcode@@Base+0xd04>
   4b09c:	add	x0, x24, #0x10
   4b0a0:	cmp	x0, #0x30
   4b0a4:	b.ls	4b610 <aarch64_get_opcode@@Base+0x123c>  // b.plast
   4b0a8:	mov	x2, x24
   4b0ac:	mov	x0, x19
   4b0b0:	mov	x16, x20
   4b0b4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b0b8:	ldp	x19, x20, [sp, #16]
   4b0bc:	add	x1, x1, #0xaab
   4b0c0:	ldp	x21, x22, [sp, #32]
   4b0c4:	ldp	x23, x24, [sp, #48]
   4b0c8:	ldp	x25, x26, [sp, #64]
   4b0cc:	ldp	x27, x28, [sp, #80]
   4b0d0:	ldp	x29, x30, [sp], #192
   4b0d4:	br	x16
   4b0d8:	add	x25, x28, #0x1
   4b0dc:	cmp	w2, #0x25
   4b0e0:	b.eq	4b100 <aarch64_get_opcode@@Base+0xd2c>  // b.none
   4b0e4:	mov	x25, x28
   4b0e8:	mov	x0, x19
   4b0ec:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4b0f0:	add	x1, x1, #0xdca
   4b0f4:	blr	x20
   4b0f8:	add	x28, x25, #0x1
   4b0fc:	b	4b094 <aarch64_get_opcode@@Base+0xcc0>
   4b100:	ldrb	w0, [x28, #1]
   4b104:	cmp	w0, #0x63
   4b108:	b.hi	4b1b4 <aarch64_get_opcode@@Base+0xde0>  // b.pmore
   4b10c:	cmp	w0, #0x42
   4b110:	b.hi	4b190 <aarch64_get_opcode@@Base+0xdbc>  // b.pmore
   4b114:	cmp	w0, #0x25
   4b118:	b.eq	4b1c8 <aarch64_get_opcode@@Base+0xdf4>  // b.none
   4b11c:	sub	w0, w0, #0x30
   4b120:	and	w1, w0, #0xff
   4b124:	cmp	w1, #0x9
   4b128:	b.hi	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.pmore
   4b12c:	add	x2, x28, #0x2
   4b130:	mov	w4, #0xa                   	// #10
   4b134:	ldrb	w3, [x2]
   4b138:	sub	w1, w3, #0x30
   4b13c:	and	w1, w1, #0xff
   4b140:	cmp	w1, #0x9
   4b144:	b.ls	4b488 <aarch64_get_opcode@@Base+0x10b4>  // b.plast
   4b148:	cmp	w3, #0x2d
   4b14c:	b.eq	4b498 <aarch64_get_opcode@@Base+0x10c4>  // b.none
   4b150:	cmp	w3, #0x3f
   4b154:	mov	w1, #0x1                   	// #1
   4b158:	b.eq	4b5d4 <aarch64_get_opcode@@Base+0x1200>  // b.none
   4b15c:	cmp	w3, #0x27
   4b160:	b.ne	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.any
   4b164:	lsl	w0, w1, w0
   4b168:	add	x25, x2, #0x1
   4b16c:	sxtw	x0, w0
   4b170:	tst	x0, x21
   4b174:	b.eq	4b0f8 <aarch64_get_opcode@@Base+0xd24>  // b.none
   4b178:	ldrb	w2, [x2, #1]
   4b17c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4b180:	add	x1, x1, #0xdca
   4b184:	mov	x0, x19
   4b188:	blr	x20
   4b18c:	b	4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b190:	sub	w0, w0, #0x43
   4b194:	cmp	w0, #0x20
   4b198:	b.hi	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.pmore
   4b19c:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4b1a0:	add	x1, x1, #0xd94
   4b1a4:	ldrh	w0, [x1, w0, uxtw #1]
   4b1a8:	adr	x1, 4b1b4 <aarch64_get_opcode@@Base+0xde0>
   4b1ac:	add	x0, x1, w0, sxth #2
   4b1b0:	br	x0
   4b1b4:	cmp	w0, #0x73
   4b1b8:	b.eq	4b47c <aarch64_get_opcode@@Base+0x10a8>  // b.none
   4b1bc:	cmp	w0, #0x78
   4b1c0:	b.eq	4b290 <aarch64_get_opcode@@Base+0xebc>  // b.none
   4b1c4:	bl	356c0 <abort@plt>
   4b1c8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b1cc:	add	x1, x1, #0xa5f
   4b1d0:	mov	x0, x19
   4b1d4:	blr	x20
   4b1d8:	b	4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b1dc:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b1e0:	ldr	w0, [x0, #1040]
   4b1e4:	cbz	w0, 4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b1e8:	add	x1, x23, #0xde8
   4b1ec:	ubfx	x0, x0, #4, #4
   4b1f0:	ldr	x2, [x1, x0, lsl #3]
   4b1f4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b1f8:	add	x1, x1, #0xa63
   4b1fc:	b	4b258 <aarch64_get_opcode@@Base+0xe84>
   4b200:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b204:	ldr	w0, [x0, #1040]
   4b208:	cbnz	w0, 4b1e8 <aarch64_get_opcode@@Base+0xe14>
   4b20c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b210:	add	x1, x1, #0xa64
   4b214:	b	4b1d0 <aarch64_get_opcode@@Base+0xdfc>
   4b218:	ldr	w0, [sp, #124]
   4b21c:	adrp	x1, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b220:	ldr	w28, [sp, #184]
   4b224:	adrp	x2, 59000 <fields@@Base+0x5a8>
   4b228:	adrp	x3, 5e000 <fields@@Base+0x55a8>
   4b22c:	add	x2, x2, #0xe54
   4b230:	add	x3, x3, #0x88c
   4b234:	and	w0, w0, #0xff
   4b238:	str	w0, [x1, #1044]
   4b23c:	tst	w28, #0xe
   4b240:	b.ne	4b264 <aarch64_get_opcode@@Base+0xe90>  // b.any
   4b244:	ldr	x1, [sp, #128]
   4b248:	add	x0, x23, #0xde8
   4b24c:	ldr	x2, [x0, x1, lsl #3]
   4b250:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b254:	add	x1, x1, #0xa62
   4b258:	mov	x0, x19
   4b25c:	blr	x20
   4b260:	b	4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b264:	eor	x0, x21, x28
   4b268:	str	x3, [sp, #104]
   4b26c:	str	x2, [sp, #168]
   4b270:	lsl	w28, w28, #1
   4b274:	tst	x0, #0x10
   4b278:	mov	x0, x19
   4b27c:	csel	x1, x3, x2, ne  // ne = any
   4b280:	blr	x20
   4b284:	ldr	x3, [sp, #104]
   4b288:	ldr	x2, [sp, #168]
   4b28c:	b	4b23c <aarch64_get_opcode@@Base+0xe68>
   4b290:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b294:	ldr	w0, [x0, #1044]
   4b298:	cbz	w0, 4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b29c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b2a0:	add	x1, x1, #0xa66
   4b2a4:	b	4b1d0 <aarch64_get_opcode@@Base+0xdfc>
   4b2a8:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b2ac:	ldr	w0, [x0, #1040]
   4b2b0:	cbz	w0, 4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b2b4:	add	x1, x23, #0xde8
   4b2b8:	ubfx	x0, x0, #4, #4
   4b2bc:	ldr	x2, [x1, x0, lsl #3]
   4b2c0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b2c4:	add	x1, x1, #0xa8b
   4b2c8:	b	4b258 <aarch64_get_opcode@@Base+0xe84>
   4b2cc:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b2d0:	mov	x1, #0x12                  	// #18
   4b2d4:	ldr	x2, [sp, #144]
   4b2d8:	ldr	w0, [x0, #1624]
   4b2dc:	madd	x0, x0, x1, x2
   4b2e0:	add	x0, x0, #0x2
   4b2e4:	ldr	x2, [x27, x0, lsl #3]
   4b2e8:	b	4b1f4 <aarch64_get_opcode@@Base+0xe20>
   4b2ec:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b2f0:	mov	x1, #0x12                  	// #18
   4b2f4:	ldr	x2, [sp, #152]
   4b2f8:	ldr	w0, [x0, #1624]
   4b2fc:	b	4b2dc <aarch64_get_opcode@@Base+0xf08>
   4b300:	ubfx	w0, w21, #8, #1
   4b304:	str	w0, [sp, #104]
   4b308:	mov	w28, #0x0                   	// #0
   4b30c:	mov	x0, x19
   4b310:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b314:	add	x1, x1, #0xaa4
   4b318:	blr	x20
   4b31c:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b320:	mov	w3, #0x0                   	// #0
   4b324:	add	x1, x1, #0x658
   4b328:	mov	w0, #0x0                   	// #0
   4b32c:	str	x1, [sp, #168]
   4b330:	mov	w1, #0x1                   	// #1
   4b334:	lsl	w1, w1, w3
   4b338:	sxtw	x1, w1
   4b33c:	tst	x1, x21
   4b340:	b.eq	4b398 <aarch64_get_opcode@@Base+0xfc4>  // b.none
   4b344:	cbz	w0, 4b360 <aarch64_get_opcode@@Base+0xf8c>
   4b348:	str	w3, [sp, #188]
   4b34c:	mov	x0, x19
   4b350:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4b354:	add	x1, x1, #0x17e
   4b358:	blr	x20
   4b35c:	ldr	w3, [sp, #188]
   4b360:	ldr	x0, [sp, #168]
   4b364:	mov	x1, #0x12                  	// #18
   4b368:	str	w3, [sp, #188]
   4b36c:	ldr	w0, [x0]
   4b370:	mul	x0, x0, x1
   4b374:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b378:	add	x1, x1, #0xa63
   4b37c:	add	x0, x0, w3, sxtw
   4b380:	add	x0, x0, #0x2
   4b384:	ldr	x2, [x27, x0, lsl #3]
   4b388:	mov	x0, x19
   4b38c:	blr	x20
   4b390:	ldr	w3, [sp, #188]
   4b394:	mov	w0, #0x1                   	// #1
   4b398:	add	w3, w3, #0x1
   4b39c:	cmp	w3, #0x8
   4b3a0:	b.ne	4b330 <aarch64_get_opcode@@Base+0xf5c>  // b.any
   4b3a4:	ldr	w1, [sp, #104]
   4b3a8:	cbz	w1, 4b430 <aarch64_get_opcode@@Base+0x105c>
   4b3ac:	cbz	w0, 4b3c0 <aarch64_get_opcode@@Base+0xfec>
   4b3b0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4b3b4:	mov	x0, x19
   4b3b8:	add	x1, x1, #0x17e
   4b3bc:	blr	x20
   4b3c0:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b3c4:	mov	x1, #0x90                  	// #144
   4b3c8:	ldr	w0, [x0, #1624]
   4b3cc:	madd	x0, x0, x1, x27
   4b3d0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b3d4:	add	x1, x1, #0xa63
   4b3d8:	ldr	x2, [x0, #128]
   4b3dc:	mov	x0, x19
   4b3e0:	blr	x20
   4b3e4:	cbz	w28, 4b41c <aarch64_get_opcode@@Base+0x1048>
   4b3e8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4b3ec:	mov	x0, x19
   4b3f0:	add	x1, x1, #0x17e
   4b3f4:	blr	x20
   4b3f8:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b3fc:	mov	x1, #0x90                  	// #144
   4b400:	ldr	w0, [x0, #1624]
   4b404:	madd	x0, x0, x1, x27
   4b408:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b40c:	add	x1, x1, #0xa63
   4b410:	ldr	x2, [x0, #136]
   4b414:	mov	x0, x19
   4b418:	blr	x20
   4b41c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b420:	add	x1, x1, #0xb12
   4b424:	b	4b1d0 <aarch64_get_opcode@@Base+0xdfc>
   4b428:	str	wzr, [sp, #104]
   4b42c:	b	4b308 <aarch64_get_opcode@@Base+0xf34>
   4b430:	cbz	w28, 4b41c <aarch64_get_opcode@@Base+0x1048>
   4b434:	cbz	w0, 4b3f8 <aarch64_get_opcode@@Base+0x1024>
   4b438:	b	4b3e8 <aarch64_get_opcode@@Base+0x1014>
   4b43c:	ldr	x0, [sp, #136]
   4b440:	cbnz	x0, 4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b444:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4b448:	add	x1, x1, #0xe9f
   4b44c:	b	4b1d0 <aarch64_get_opcode@@Base+0xdfc>
   4b450:	ldr	x0, [sp, #112]
   4b454:	mov	x1, x22
   4b458:	ldr	x2, [x22, #120]
   4b45c:	blr	x2
   4b460:	mov	w0, #0x1                   	// #1
   4b464:	strb	w0, [x22, #196]
   4b468:	mov	w0, #0x2                   	// #2
   4b46c:	str	w0, [x22, #200]
   4b470:	ldr	x0, [sp, #112]
   4b474:	str	x0, [x22, #208]
   4b478:	b	4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b47c:	ldr	x2, [sp, #160]
   4b480:	ldr	x1, [sp, #176]
   4b484:	b	4b258 <aarch64_get_opcode@@Base+0xe84>
   4b488:	madd	w0, w0, w4, w3
   4b48c:	add	x2, x2, #0x1
   4b490:	sub	w0, w0, #0x30
   4b494:	b	4b134 <aarch64_get_opcode@@Base+0xd60>
   4b498:	add	x25, x2, #0x1
   4b49c:	mov	w1, #0x0                   	// #0
   4b4a0:	mov	w4, #0xa                   	// #10
   4b4a4:	ldrb	w3, [x25]
   4b4a8:	sub	w2, w3, #0x30
   4b4ac:	and	w2, w2, #0xff
   4b4b0:	cmp	w2, #0x9
   4b4b4:	b.ls	4b508 <aarch64_get_opcode@@Base+0x1134>  // b.plast
   4b4b8:	cbz	w1, 4b1c4 <aarch64_get_opcode@@Base+0xdf0>
   4b4bc:	sub	w2, w1, w0
   4b4c0:	mov	w4, #0x2                   	// #2
   4b4c4:	asr	x5, x21, x0
   4b4c8:	cmp	w3, #0x63
   4b4cc:	lsl	w2, w4, w2
   4b4d0:	sub	w2, w2, #0x1
   4b4d4:	sxtw	x2, w2
   4b4d8:	and	x2, x2, x5
   4b4dc:	b.eq	4b5c8 <aarch64_get_opcode@@Base+0x11f4>  // b.none
   4b4e0:	b.hi	4b53c <aarch64_get_opcode@@Base+0x1168>  // b.pmore
   4b4e4:	cmp	w3, #0x57
   4b4e8:	b.eq	4b578 <aarch64_get_opcode@@Base+0x11a4>  // b.none
   4b4ec:	b.hi	4b518 <aarch64_get_opcode@@Base+0x1144>  // b.pmore
   4b4f0:	cmp	w3, #0x42
   4b4f4:	b.eq	4b58c <aarch64_get_opcode@@Base+0x11b8>  // b.none
   4b4f8:	cmp	w3, #0x48
   4b4fc:	b.ne	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.any
   4b500:	lsl	x24, x2, #1
   4b504:	b	4b558 <aarch64_get_opcode@@Base+0x1184>
   4b508:	madd	w1, w1, w4, w3
   4b50c:	add	x25, x25, #0x1
   4b510:	sub	w1, w1, #0x30
   4b514:	b	4b4a4 <aarch64_get_opcode@@Base+0x10d0>
   4b518:	cmp	w3, #0x61
   4b51c:	b.ne	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.any
   4b520:	ldr	x3, [x22, #120]
   4b524:	and	x0, x26, #0xfffffffffffffffc
   4b528:	mov	x1, x22
   4b52c:	add	x0, x0, x2, lsl #2
   4b530:	blr	x3
   4b534:	mov	x24, #0x0                   	// #0
   4b538:	b	4b0f8 <aarch64_get_opcode@@Base+0xd24>
   4b53c:	cmp	w3, #0x72
   4b540:	b.eq	4b568 <aarch64_get_opcode@@Base+0x1194>  // b.none
   4b544:	cmp	w3, #0x78
   4b548:	b.eq	4b580 <aarch64_get_opcode@@Base+0x11ac>  // b.none
   4b54c:	cmp	w3, #0x64
   4b550:	b.ne	4b1c4 <aarch64_get_opcode@@Base+0xdf0>  // b.any
   4b554:	mov	x24, x2
   4b558:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b55c:	mov	x2, x24
   4b560:	add	x1, x1, #0xaa7
   4b564:	b	4b258 <aarch64_get_opcode@@Base+0xe84>
   4b568:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4b56c:	mov	x1, #0x12                  	// #18
   4b570:	ldr	w0, [x0, #1624]
   4b574:	b	4b2dc <aarch64_get_opcode@@Base+0xf08>
   4b578:	lsl	x24, x2, #2
   4b57c:	b	4b558 <aarch64_get_opcode@@Base+0x1184>
   4b580:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4b584:	add	x1, x1, #0xd8d
   4b588:	b	4b258 <aarch64_get_opcode@@Base+0xe84>
   4b58c:	mov	w28, #0x1                   	// #1
   4b590:	lsl	w24, w28, w1
   4b594:	mov	x1, x22
   4b598:	sxtw	x0, w24
   4b59c:	eor	x24, x0, x2
   4b5a0:	ldr	x2, [x22, #120]
   4b5a4:	sub	x24, x24, x0
   4b5a8:	add	x24, x26, x24, lsl #1
   4b5ac:	mov	x0, x24
   4b5b0:	blr	x2
   4b5b4:	mov	w4, #0x2                   	// #2
   4b5b8:	strb	w28, [x22, #196]
   4b5bc:	str	w4, [x22, #200]
   4b5c0:	str	x24, [x22, #208]
   4b5c4:	b	4b534 <aarch64_get_opcode@@Base+0x1160>
   4b5c8:	add	x0, x23, #0xde8
   4b5cc:	ldr	x2, [x0, x2, lsl #3]
   4b5d0:	b	4b1f4 <aarch64_get_opcode@@Base+0xe20>
   4b5d4:	lsl	w0, w1, w0
   4b5d8:	add	x25, x2, #0x2
   4b5dc:	sxtw	x0, w0
   4b5e0:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4b5e4:	tst	x0, x21
   4b5e8:	b.eq	4b5f4 <aarch64_get_opcode@@Base+0x1220>  // b.none
   4b5ec:	ldrb	w2, [x2, #1]
   4b5f0:	b	4b180 <aarch64_get_opcode@@Base+0xdac>
   4b5f4:	ldrb	w2, [x2, #2]
   4b5f8:	b	4b180 <aarch64_get_opcode@@Base+0xdac>
   4b5fc:	add	x1, x1, #0x28
   4b600:	b	4afa8 <aarch64_get_opcode@@Base+0xbd4>
   4b604:	ubfx	w28, w21, #8, #1
   4b608:	str	wzr, [sp, #104]
   4b60c:	b	4b30c <aarch64_get_opcode@@Base+0xf38>
   4b610:	ldp	x19, x20, [sp, #16]
   4b614:	ldp	x21, x22, [sp, #32]
   4b618:	ldp	x23, x24, [sp, #48]
   4b61c:	ldp	x25, x26, [sp, #64]
   4b620:	ldp	x27, x28, [sp, #80]
   4b624:	ldp	x29, x30, [sp], #192
   4b628:	ret
   4b62c:	stp	x29, x30, [sp, #-368]!
   4b630:	mov	x16, #0x10                  	// #16
   4b634:	lsr	w11, w3, #28
   4b638:	mov	x29, sp
   4b63c:	str	x1, [sp, #336]
   4b640:	movk	x16, #0xfe00, lsl #16
   4b644:	ldr	x1, [x2, #96]
   4b648:	stp	x21, x22, [sp, #32]
   4b64c:	mov	x21, x3
   4b650:	stp	x23, x24, [sp, #48]
   4b654:	mov	x24, #0x10                  	// #16
   4b658:	mov	x13, #0xffffffffffcfffff    	// #-3145729
   4b65c:	ldp	x8, x7, [x1]
   4b660:	stp	x27, x28, [sp, #80]
   4b664:	and	x27, x3, #0xf0000000
   4b668:	ldr	x1, [x1, #16]
   4b66c:	str	x1, [sp, #120]
   4b670:	ubfx	w1, w3, #8, #4
   4b674:	str	w1, [sp, #216]
   4b678:	adrp	x1, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4b67c:	and	x12, x7, #0x8000
   4b680:	mov	x17, #0xfc000000            	// #4227858432
   4b684:	mov	x18, #0xe000000             	// #234881024
   4b688:	ldr	w9, [x1, #1040]
   4b68c:	mov	x30, #0xfe000000            	// #4261412864
   4b690:	movk	x24, #0xe10, lsl #16
   4b694:	mov	x28, #0xf0000000            	// #4026531840
   4b698:	mov	w14, #0x10                  	// #16
   4b69c:	stp	x19, x20, [sp, #16]
   4b6a0:	ubfx	x1, x9, #4, #4
   4b6a4:	str	x1, [sp, #112]
   4b6a8:	lsr	x1, x3, #21
   4b6ac:	orr	x1, x1, x3, lsr #24
   4b6b0:	stp	x25, x26, [sp, #64]
   4b6b4:	and	x1, x1, #0x1
   4b6b8:	str	x1, [sp, #96]
   4b6bc:	ubfx	w1, w3, #8, #4
   4b6c0:	sub	w10, w1, #0x9
   4b6c4:	sub	w1, w1, #0xe
   4b6c8:	cmp	w1, #0x1
   4b6cc:	ubfx	w1, w3, #8, #4
   4b6d0:	cset	w6, ls  // ls = plast
   4b6d4:	cmp	w1, #0x8
   4b6d8:	csinc	w6, w6, wzr, ne  // ne = any
   4b6dc:	cmp	w10, #0x2
   4b6e0:	cset	w22, ls  // ls = plast
   4b6e4:	mov	x26, x2
   4b6e8:	mov	x25, #0xc000000             	// #201326592
   4b6ec:	mov	w1, #0x0                   	// #0
   4b6f0:	str	xzr, [sp, #360]
   4b6f4:	ldp	x20, x19, [x2]
   4b6f8:	mov	x2, #0x0                   	// #0
   4b6fc:	ldr	x23, [x0, #48]
   4b700:	cbnz	x23, 4b70c <aarch64_get_opcode@@Base+0x1338>
   4b704:	mov	w22, #0x0                   	// #0
   4b708:	b	4bd1c <aarch64_get_opcode@@Base+0x1948>
   4b70c:	ldr	x15, [x0, #8]
   4b710:	ldr	x3, [x0, #32]
   4b714:	cbnz	x15, 4b784 <aarch64_get_opcode@@Base+0x13b0>
   4b718:	ldr	x5, [x0, #16]
   4b71c:	cbnz	x5, 4b784 <aarch64_get_opcode@@Base+0x13b0>
   4b720:	ldr	x5, [x0, #24]
   4b724:	cbnz	x5, 4b784 <aarch64_get_opcode@@Base+0x13b0>
   4b728:	cmp	x3, #0x1
   4b72c:	b.eq	4b748 <aarch64_get_opcode@@Base+0x1374>  // b.none
   4b730:	sub	x3, x3, #0x2
   4b734:	cmp	x3, #0x1
   4b738:	b.ls	4b7b4 <aarch64_get_opcode@@Base+0x13e0>  // b.plast
   4b73c:	cbz	w1, 4b744 <aarch64_get_opcode@@Base+0x1370>
   4b740:	str	x2, [sp, #360]
   4b744:	bl	356c0 <abort@plt>
   4b748:	ldr	x3, [x26, #32]
   4b74c:	sub	x5, x3, #0xc
   4b750:	cmp	x5, #0x1
   4b754:	ccmp	x3, #0xa, #0x4, hi  // hi = pmore
   4b758:	b.eq	4b7b4 <aarch64_get_opcode@@Base+0x13e0>  // b.none
   4b75c:	ldr	x3, [x0, #64]
   4b760:	add	x0, x0, #0x38
   4b764:	cbnz	x3, 4b778 <aarch64_get_opcode@@Base+0x13a4>
   4b768:	ldr	x3, [x0, #16]
   4b76c:	cbnz	x3, 4b778 <aarch64_get_opcode@@Base+0x13a4>
   4b770:	ldr	x3, [x0, #24]
   4b774:	cbz	x3, 4b7b4 <aarch64_get_opcode@@Base+0x13e0>
   4b778:	ldr	x3, [x0, #32]
   4b77c:	cmp	x3, #0x2
   4b780:	b	4b758 <aarch64_get_opcode@@Base+0x1384>
   4b784:	ldr	x5, [x0, #40]
   4b788:	cbz	w4, 4b7bc <aarch64_get_opcode@@Base+0x13e8>
   4b78c:	ldr	w1, [sp, #112]
   4b790:	cmp	w9, #0x0
   4b794:	orr	x5, x5, #0xf0000000
   4b798:	orr	x2, x3, #0xe0000000
   4b79c:	csel	w1, w1, w14, ne  // ne = any
   4b7a0:	str	w1, [sp, #108]
   4b7a4:	ldr	w1, [x0]
   4b7a8:	cmp	w1, #0x1
   4b7ac:	b.ne	4b7e4 <aarch64_get_opcode@@Base+0x1410>  // b.any
   4b7b0:	cbnz	w4, 4b7f0 <aarch64_get_opcode@@Base+0x141c>
   4b7b4:	add	x0, x0, #0x38
   4b7b8:	b	4b6fc <aarch64_get_opcode@@Base+0x1328>
   4b7bc:	cmp	x27, x28
   4b7c0:	b.ne	4b7d4 <aarch64_get_opcode@@Base+0x1400>  // b.any
   4b7c4:	orr	x5, x5, #0xf0000000
   4b7c8:	mov	x2, x3
   4b7cc:	mov	w1, #0x10                  	// #16
   4b7d0:	b	4b7a0 <aarch64_get_opcode@@Base+0x13cc>
   4b7d4:	cmp	w11, #0xe
   4b7d8:	mov	x2, x3
   4b7dc:	csel	w1, w11, w14, ne  // ne = any
   4b7e0:	b	4b7a0 <aarch64_get_opcode@@Base+0x13cc>
   4b7e4:	cmp	w1, #0x2
   4b7e8:	b.ne	4b7f0 <aarch64_get_opcode@@Base+0x141c>  // b.any
   4b7ec:	cbnz	w4, 4bb20 <aarch64_get_opcode@@Base+0x174c>
   4b7f0:	and	x5, x21, x5
   4b7f4:	cmp	x5, x2
   4b7f8:	b.ne	4bb20 <aarch64_get_opcode@@Base+0x174c>  // b.any
   4b7fc:	tst	x15, x8
   4b800:	b.ne	4b820 <aarch64_get_opcode@@Base+0x144c>  // b.any
   4b804:	ldr	x1, [x0, #16]
   4b808:	tst	x7, x1
   4b80c:	b.ne	4b820 <aarch64_get_opcode@@Base+0x144c>  // b.any
   4b810:	ldr	x1, [x0, #24]
   4b814:	ldr	x5, [sp, #120]
   4b818:	tst	x5, x1
   4b81c:	b.eq	4bb20 <aarch64_get_opcode@@Base+0x174c>  // b.none
   4b820:	and	x1, x3, #0xffffffffffefffff
   4b824:	cmp	x1, x16
   4b828:	b.eq	4b834 <aarch64_get_opcode@@Base+0x1460>  // b.none
   4b82c:	cmp	x1, x17
   4b830:	b.ne	4bab8 <aarch64_get_opcode@@Base+0x16e4>  // b.any
   4b834:	cbnz	x12, 4ba9c <aarch64_get_opcode@@Base+0x16c8>
   4b838:	str	x2, [sp, #360]
   4b83c:	asr	x2, x21, #22
   4b840:	ubfx	w28, w21, #12, #4
   4b844:	and	w4, w2, #0x1
   4b848:	ubfx	w5, w21, #16, #4
   4b84c:	ubfiz	w0, w2, #4, #1
   4b850:	and	w2, w2, #0x6
   4b854:	orr	w0, w0, w28
   4b858:	str	w0, [sp, #220]
   4b85c:	add	w0, w4, w28, lsl #1
   4b860:	str	w0, [sp, #224]
   4b864:	ubfx	w0, w21, #16, #4
   4b868:	str	w0, [sp, #228]
   4b86c:	asr	x0, x21, #7
   4b870:	asr	x1, x21, #16
   4b874:	and	x1, x1, #0xf0
   4b878:	mov	w25, #0x73                  	// #115
   4b87c:	ubfiz	w3, w0, #4, #1
   4b880:	and	w0, w0, #0x1
   4b884:	orr	w3, w3, w5
   4b888:	add	w0, w0, w5, lsl #1
   4b88c:	asr	x5, x21, #5
   4b890:	str	w0, [sp, #312]
   4b894:	and	w0, w21, #0xf
   4b898:	str	w3, [sp, #308]
   4b89c:	ubfiz	w6, w5, #4, #1
   4b8a0:	mov	w3, w0
   4b8a4:	and	w5, w5, #0x1
   4b8a8:	orr	w0, w6, w0
   4b8ac:	str	w0, [sp, #316]
   4b8b0:	add	w0, w5, w3, lsl #1
   4b8b4:	ubfx	w5, w21, #4, #4
   4b8b8:	str	w5, [sp, #128]
   4b8bc:	ubfx	w5, w21, #21, #1
   4b8c0:	str	w0, [sp, #320]
   4b8c4:	orr	w2, w5, w2
   4b8c8:	str	w2, [sp, #160]
   4b8cc:	ubfx	x2, x21, #16, #4
   4b8d0:	str	x2, [sp, #152]
   4b8d4:	ands	x2, x21, #0x800000
   4b8d8:	mov	w5, #0x2b                  	// #43
   4b8dc:	str	x2, [sp, #96]
   4b8e0:	mov	w2, #0x2d                  	// #45
   4b8e4:	csel	w2, w5, w2, ne  // ne = any
   4b8e8:	str	w2, [sp, #212]
   4b8ec:	ldr	w2, [sp, #160]
   4b8f0:	mov	w5, #0x4                   	// #4
   4b8f4:	and	w0, w21, #0xff
   4b8f8:	str	w0, [sp, #240]
   4b8fc:	and	w2, w2, #0xfffffffd
   4b900:	str	w2, [sp, #284]
   4b904:	ands	x2, x21, #0x100
   4b908:	ubfx	w0, w21, #1, #7
   4b90c:	csinc	w5, w5, wzr, ne  // ne = any
   4b910:	str	w5, [sp, #208]
   4b914:	and	w5, w21, #0xff
   4b918:	str	w0, [sp, #324]
   4b91c:	ldr	w6, [sp, #208]
   4b920:	asr	x0, x21, #4
   4b924:	and	x0, x0, #0x10
   4b928:	mul	w5, w5, w6
   4b92c:	ands	x6, x21, #0x800000
   4b930:	str	w5, [sp, #148]
   4b934:	cmp	x6, #0x0
   4b938:	str	x5, [sp, #232]
   4b93c:	neg	x5, x5
   4b940:	adrp	x6, 5c000 <fields@@Base+0x35a8>
   4b944:	add	x6, x6, #0x63
   4b948:	str	x5, [sp, #328]
   4b94c:	adrp	x5, 53000 <xexit@@Base+0x508>
   4b950:	add	x5, x5, #0x95f
   4b954:	csel	x6, x6, x5, eq  // eq = none
   4b958:	str	x6, [sp, #200]
   4b95c:	ands	x6, x21, #0x200000
   4b960:	str	x6, [sp, #264]
   4b964:	adrp	x6, 5e000 <fields@@Base+0x55a8>
   4b968:	add	x6, x6, #0xe9f
   4b96c:	csel	x5, x6, x5, ne  // ne = any
   4b970:	str	x5, [sp, #192]
   4b974:	and	x5, x21, #0xf
   4b978:	str	x5, [sp, #272]
   4b97c:	orr	x0, x0, x5
   4b980:	mov	x5, #0x20                  	// #32
   4b984:	cmp	x0, #0x0
   4b988:	csel	x0, x0, x5, ne  // ne = any
   4b98c:	str	x0, [sp, #296]
   4b990:	and	x0, x21, #0xf
   4b994:	orr	x0, x1, x0
   4b998:	str	x0, [sp, #176]
   4b99c:	asr	x1, x21, #1
   4b9a0:	ldr	w0, [sp, #176]
   4b9a4:	and	w6, w1, #0x70
   4b9a8:	str	w0, [sp, #280]
   4b9ac:	orr	w0, w6, w3
   4b9b0:	tst	x6, #0x40
   4b9b4:	sub	w3, w0, #0x80
   4b9b8:	csel	w0, w0, w3, eq  // eq = none
   4b9bc:	cmp	x2, #0x0
   4b9c0:	orr	w3, w28, w4, lsl #4
   4b9c4:	str	w0, [sp, #288]
   4b9c8:	orr	w0, w4, w28, lsl #1
   4b9cc:	csel	w0, w3, w0, ne  // ne = any
   4b9d0:	str	w0, [sp, #120]
   4b9d4:	cset	w0, ne  // ne = any
   4b9d8:	mov	w3, #0x1f                  	// #31
   4b9dc:	asr	x0, x21, x0
   4b9e0:	and	w0, w0, #0x7f
   4b9e4:	str	w0, [sp, #164]
   4b9e8:	mov	w0, #0xf                   	// #15
   4b9ec:	csel	w0, w3, w0, eq  // eq = none
   4b9f0:	str	w0, [sp, #292]
   4b9f4:	ldr	w0, [sp, #120]
   4b9f8:	ldr	w3, [sp, #164]
   4b9fc:	add	w0, w0, w3
   4ba00:	sub	w0, w0, #0x1
   4ba04:	str	w0, [sp, #132]
   4ba08:	mov	w0, #0x64                  	// #100
   4ba0c:	csel	w25, w25, w0, eq  // eq = none
   4ba10:	ldr	w0, [sp, #132]
   4ba14:	ldr	w2, [sp, #132]
   4ba18:	asr	w0, w0, #1
   4ba1c:	csel	w0, w2, w0, ne  // ne = any
   4ba20:	str	w0, [sp, #304]
   4ba24:	asr	x0, x21, #18
   4ba28:	tst	x21, #0x80
   4ba2c:	and	w0, w0, #0x10
   4ba30:	orr	w0, w0, w28
   4ba34:	str	w0, [sp, #144]
   4ba38:	and	w0, w1, #0x3f
   4ba3c:	str	w0, [sp, #244]
   4ba40:	ldr	w0, [sp, #144]
   4ba44:	mov	x28, #0x0                   	// #0
   4ba48:	ldr	w1, [sp, #244]
   4ba4c:	add	w0, w0, w1
   4ba50:	str	w0, [sp, #168]
   4ba54:	sub	w0, w0, #0x1
   4ba58:	str	w0, [sp, #172]
   4ba5c:	mov	w0, #0x10                  	// #16
   4ba60:	csel	w5, w5, w0, ne  // ne = any
   4ba64:	sxtw	x0, w5
   4ba68:	str	x0, [sp, #256]
   4ba6c:	mov	x0, #0x10                  	// #16
   4ba70:	str	x0, [sp, #184]
   4ba74:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   4ba78:	add	x0, x0, #0xb70
   4ba7c:	str	x0, [sp, #248]
   4ba80:	add	x0, x0, #0xe70
   4ba84:	str	x0, [sp, #112]
   4ba88:	mov	x0, #0x100                 	// #256
   4ba8c:	movk	x0, #0x40, lsl #16
   4ba90:	and	x0, x21, x0
   4ba94:	str	x0, [sp, #136]
   4ba98:	b	4bce0 <aarch64_get_opcode@@Base+0x190c>
   4ba9c:	cmn	x8, #0x1
   4baa0:	b.ne	4baac <aarch64_get_opcode@@Base+0x16d8>  // b.any
   4baa4:	cmp	x7, x13
   4baa8:	b.eq	4b838 <aarch64_get_opcode@@Base+0x1464>  // b.none
   4baac:	cbz	w6, 4b838 <aarch64_get_opcode@@Base+0x1464>
   4bab0:	mov	w1, w6
   4bab4:	b	4b7b4 <aarch64_get_opcode@@Base+0x13e0>
   4bab8:	and	x5, x3, #0xffffffffffffffef
   4babc:	cmp	x5, x18
   4bac0:	ccmp	x3, x30, #0x4, ne  // ne = any
   4bac4:	b.eq	4bad8 <aarch64_get_opcode@@Base+0x1704>  // b.none
   4bac8:	cmp	x3, x24
   4bacc:	b.eq	4bad8 <aarch64_get_opcode@@Base+0x1704>  // b.none
   4bad0:	cmp	x1, x25
   4bad4:	b.ne	4bb08 <aarch64_get_opcode@@Base+0x1734>  // b.any
   4bad8:	cmp	w10, #0x2
   4badc:	b.ls	4bb20 <aarch64_get_opcode@@Base+0x174c>  // b.plast
   4bae0:	cbnz	x12, 4baf0 <aarch64_get_opcode@@Base+0x171c>
   4bae4:	mov	w22, #0x0                   	// #0
   4bae8:	str	x2, [sp, #360]
   4baec:	b	4b83c <aarch64_get_opcode@@Base+0x1468>
   4baf0:	cmn	x8, #0x1
   4baf4:	b.ne	4bb00 <aarch64_get_opcode@@Base+0x172c>  // b.any
   4baf8:	cmp	x7, x13
   4bafc:	b.eq	4bae4 <aarch64_get_opcode@@Base+0x1710>  // b.none
   4bb00:	cbz	w6, 4bae4 <aarch64_get_opcode@@Base+0x1710>
   4bb04:	b	4bab0 <aarch64_get_opcode@@Base+0x16dc>
   4bb08:	mov	x3, #0xf80                 	// #3968
   4bb0c:	movk	x3, #0xec00, lsl #16
   4bb10:	cmp	x1, x3
   4bb14:	b.ne	4bae4 <aarch64_get_opcode@@Base+0x1710>  // b.any
   4bb18:	ldr	x1, [sp, #96]
   4bb1c:	cbnz	x1, 4bae4 <aarch64_get_opcode@@Base+0x1710>
   4bb20:	mov	w1, #0x1                   	// #1
   4bb24:	b	4b7b4 <aarch64_get_opcode@@Base+0x13e0>
   4bb28:	cmp	w2, #0x25
   4bb2c:	b.ne	4c418 <aarch64_get_opcode@@Base+0x2044>  // b.any
   4bb30:	ldrb	w27, [x23, #1]
   4bb34:	add	x24, x23, #0x1
   4bb38:	cmp	w27, #0x7a
   4bb3c:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4bb40:	cmp	w27, #0x40
   4bb44:	b.hi	4bbc8 <aarch64_get_opcode@@Base+0x17f4>  // b.pmore
   4bb48:	cmp	w27, #0x25
   4bb4c:	b.eq	4bbec <aarch64_get_opcode@@Base+0x1818>  // b.none
   4bb50:	sub	w27, w27, #0x30
   4bb54:	and	w27, w27, #0xff
   4bb58:	cmp	w27, #0x9
   4bb5c:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4bb60:	mov	x0, x24
   4bb64:	add	x3, sp, #0x164
   4bb68:	add	x2, sp, #0x168
   4bb6c:	mov	x1, x21
   4bb70:	bl	4aea8 <aarch64_get_opcode@@Base+0xad4>
   4bb74:	mov	x24, x0
   4bb78:	ldrb	w0, [x0]
   4bb7c:	cmp	w0, #0x78
   4bb80:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4bb84:	cmp	w0, #0x5f
   4bb88:	b.hi	4c0b4 <aarch64_get_opcode@@Base+0x1ce0>  // b.pmore
   4bb8c:	cmp	w0, #0x47
   4bb90:	b.hi	4c0fc <aarch64_get_opcode@@Base+0x1d28>  // b.pmore
   4bb94:	cmp	w0, #0x3e
   4bb98:	b.hi	4c0d8 <aarch64_get_opcode@@Base+0x1d04>  // b.pmore
   4bb9c:	cmp	w0, #0x27
   4bba0:	b.ne	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.any
   4bba4:	ldr	w1, [sp, #356]
   4bba8:	mov	x0, #0x1                   	// #1
   4bbac:	add	x23, x24, #0x1
   4bbb0:	lsl	x0, x0, x1
   4bbb4:	sub	x0, x0, #0x1
   4bbb8:	ldr	x1, [sp, #360]
   4bbbc:	cmp	x0, x1
   4bbc0:	b.ne	4c188 <aarch64_get_opcode@@Base+0x1db4>  // b.any
   4bbc4:	b	4c414 <aarch64_get_opcode@@Base+0x2040>
   4bbc8:	sub	w1, w27, #0x41
   4bbcc:	cmp	w1, #0x39
   4bbd0:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4bbd4:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4bbd8:	add	x0, x0, #0xdd8
   4bbdc:	ldrh	w0, [x0, w1, uxtw #1]
   4bbe0:	adr	x1, 4bbec <aarch64_get_opcode@@Base+0x1818>
   4bbe4:	add	x0, x1, w0, sxth #2
   4bbe8:	br	x0
   4bbec:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bbf0:	add	x1, x1, #0xa5f
   4bbf4:	mov	x0, x19
   4bbf8:	blr	x20
   4bbfc:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4bc00:	cmp	w27, #0x4b
   4bc04:	and	x0, x21, #0xff
   4bc08:	and	x23, x21, #0x7f
   4bc0c:	mov	x1, #0x12                  	// #18
   4bc10:	csel	x23, x23, x0, eq  // eq = none
   4bc14:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4bc18:	ldr	x2, [sp, #152]
   4bc1c:	mov	x27, #0x1200000             	// #18874368
   4bc20:	ldr	w0, [x0, #1624]
   4bc24:	madd	x0, x0, x1, x2
   4bc28:	ldr	x1, [sp, #112]
   4bc2c:	add	x0, x0, #0x2
   4bc30:	ldr	x2, [x1, x0, lsl #3]
   4bc34:	mov	x0, x19
   4bc38:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bc3c:	add	x1, x1, #0xc6e
   4bc40:	blr	x20
   4bc44:	ands	x27, x21, x27
   4bc48:	b.eq	4bc78 <aarch64_get_opcode@@Base+0x18a4>  // b.none
   4bc4c:	ldr	w1, [sp, #216]
   4bc50:	lsl	x0, x23, #1
   4bc54:	lsl	x23, x23, #2
   4bc58:	cmp	w1, #0x9
   4bc5c:	csel	x23, x23, x0, ne  // ne = any
   4bc60:	ldr	x0, [sp, #96]
   4bc64:	cbnz	x0, 4bc6c <aarch64_get_opcode@@Base+0x1898>
   4bc68:	neg	x23, x23
   4bc6c:	ldr	w0, [sp, #228]
   4bc70:	cmp	w0, #0xf
   4bc74:	csel	x28, x28, x23, eq  // eq = none
   4bc78:	tbz	w21, #24, 4bd64 <aarch64_get_opcode@@Base+0x1990>
   4bc7c:	cbz	x23, 4bd3c <aarch64_get_opcode@@Base+0x1968>
   4bc80:	ldr	x3, [sp, #192]
   4bc84:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bc88:	mov	w2, w23
   4bc8c:	add	x1, x1, #0xad6
   4bc90:	mov	x0, x19
   4bc94:	blr	x20
   4bc98:	ldr	w0, [sp, #228]
   4bc9c:	cmp	w0, #0xf
   4bca0:	b.ne	4bcdc <aarch64_get_opcode@@Base+0x1908>  // b.any
   4bca4:	cbz	x27, 4bcdc <aarch64_get_opcode@@Base+0x1908>
   4bca8:	mov	x0, x19
   4bcac:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4bcb0:	add	x1, x1, #0xaa
   4bcb4:	blr	x20
   4bcb8:	ldr	w0, [x26, #172]
   4bcbc:	ldr	x1, [sp, #336]
   4bcc0:	ldr	x2, [x26, #120]
   4bcc4:	lsl	w0, w0, #1
   4bcc8:	and	x1, x1, #0xfffffffffffffffc
   4bccc:	add	x0, x1, w0, sxtw
   4bcd0:	mov	x1, x26
   4bcd4:	add	x0, x0, x23
   4bcd8:	blr	x2
   4bcdc:	add	x23, x24, #0x1
   4bce0:	ldrb	w2, [x23]
   4bce4:	cbnz	w2, 4bb28 <aarch64_get_opcode@@Base+0x1754>
   4bce8:	add	x0, x28, #0x10
   4bcec:	cmp	x0, #0x30
   4bcf0:	b.ls	4bd08 <aarch64_get_opcode@@Base+0x1934>  // b.plast
   4bcf4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bcf8:	mov	w2, w28
   4bcfc:	add	x1, x1, #0xaab
   4bd00:	mov	x0, x19
   4bd04:	blr	x20
   4bd08:	cbz	w22, 4c760 <aarch64_get_opcode@@Base+0x238c>
   4bd0c:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4bd10:	mov	x0, x19
   4bd14:	add	x1, x1, #0x203
   4bd18:	blr	x20
   4bd1c:	mov	w0, w22
   4bd20:	ldp	x19, x20, [sp, #16]
   4bd24:	ldp	x21, x22, [sp, #32]
   4bd28:	ldp	x23, x24, [sp, #48]
   4bd2c:	ldp	x25, x26, [sp, #64]
   4bd30:	ldp	x27, x28, [sp, #80]
   4bd34:	ldp	x29, x30, [sp], #368
   4bd38:	ret
   4bd3c:	ldr	x0, [sp, #96]
   4bd40:	cbnz	x0, 4bd58 <aarch64_get_opcode@@Base+0x1984>
   4bd44:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bd48:	add	x1, x1, #0xadf
   4bd4c:	mov	x0, x19
   4bd50:	blr	x20
   4bd54:	b	4bc98 <aarch64_get_opcode@@Base+0x18c4>
   4bd58:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bd5c:	add	x1, x1, #0xae4
   4bd60:	b	4bd4c <aarch64_get_opcode@@Base+0x1978>
   4bd64:	mov	x0, x19
   4bd68:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bd6c:	add	x1, x1, #0xae4
   4bd70:	blr	x20
   4bd74:	ldr	x0, [sp, #264]
   4bd78:	cbz	x0, 4bdac <aarch64_get_opcode@@Base+0x19d8>
   4bd7c:	cbz	x23, 4bd98 <aarch64_get_opcode@@Base+0x19c4>
   4bd80:	mov	w2, w23
   4bd84:	mov	x0, x19
   4bd88:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4bd8c:	add	x1, x1, #0x92
   4bd90:	blr	x20
   4bd94:	b	4bc98 <aarch64_get_opcode@@Base+0x18c4>
   4bd98:	ldr	x0, [sp, #96]
   4bd9c:	cbnz	x0, 4bc98 <aarch64_get_opcode@@Base+0x18c4>
   4bda0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bda4:	add	x1, x1, #0xae6
   4bda8:	b	4bd4c <aarch64_get_opcode@@Base+0x1978>
   4bdac:	ldr	x0, [sp, #96]
   4bdb0:	cbnz	x0, 4bde8 <aarch64_get_opcode@@Base+0x1a14>
   4bdb4:	cmp	x23, #0x0
   4bdb8:	adrp	x0, 53000 <xexit@@Base+0x508>
   4bdbc:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4bdc0:	add	x0, x0, #0x95f
   4bdc4:	add	x2, x2, #0x63
   4bdc8:	csel	x2, x2, x0, eq  // eq = none
   4bdcc:	mov	w3, w23
   4bdd0:	mov	x0, x19
   4bdd4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bdd8:	mov	x28, x23
   4bddc:	add	x1, x1, #0xaec
   4bde0:	blr	x20
   4bde4:	b	4bc98 <aarch64_get_opcode@@Base+0x18c4>
   4bde8:	adrp	x2, 53000 <xexit@@Base+0x508>
   4bdec:	add	x2, x2, #0x95f
   4bdf0:	b	4bdcc <aarch64_get_opcode@@Base+0x19f8>
   4bdf4:	ldr	w0, [sp, #244]
   4bdf8:	cmp	w0, #0x1
   4bdfc:	b.ne	4be18 <aarch64_get_opcode@@Base+0x1a44>  // b.any
   4be00:	ldr	w2, [sp, #144]
   4be04:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4be08:	add	x1, x1, #0xaf5
   4be0c:	mov	x0, x19
   4be10:	blr	x20
   4be14:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4be18:	ldp	w0, w3, [sp, #168]
   4be1c:	ldr	w2, [sp, #144]
   4be20:	cmp	w0, #0x20
   4be24:	b.ls	4be3c <aarch64_get_opcode@@Base+0x1a68>  // b.plast
   4be28:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4be2c:	add	x1, x1, #0xafb
   4be30:	mov	x0, x19
   4be34:	blr	x20
   4be38:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4be3c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4be40:	add	x1, x1, #0xb14
   4be44:	b	4be30 <aarch64_get_opcode@@Base+0x1a5c>
   4be48:	ldr	w0, [sp, #164]
   4be4c:	cbnz	w0, 4be5c <aarch64_get_opcode@@Base+0x1a88>
   4be50:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4be54:	add	x1, x1, #0xb1e
   4be58:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4be5c:	ldr	w0, [sp, #164]
   4be60:	cmp	w0, #0x1
   4be64:	b.ne	4be7c <aarch64_get_opcode@@Base+0x1aa8>  // b.any
   4be68:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4be6c:	ldr	w3, [sp, #120]
   4be70:	mov	w2, w25
   4be74:	add	x1, x1, #0xb24
   4be78:	b	4be30 <aarch64_get_opcode@@Base+0x1a5c>
   4be7c:	ldr	w1, [sp, #132]
   4be80:	ldr	w0, [sp, #292]
   4be84:	cmp	w0, w1
   4be88:	b.ge	4beac <aarch64_get_opcode@@Base+0x1ad8>  // b.tcont
   4be8c:	ldr	w3, [sp, #120]
   4be90:	mov	w2, w25
   4be94:	ldr	w4, [sp, #304]
   4be98:	mov	x0, x19
   4be9c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bea0:	add	x1, x1, #0xb30
   4bea4:	blr	x20
   4bea8:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4beac:	ldr	w3, [sp, #120]
   4beb0:	mov	w4, w25
   4beb4:	ldr	w5, [sp, #132]
   4beb8:	mov	w2, w25
   4bebc:	mov	x0, x19
   4bec0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bec4:	add	x1, x1, #0xb4e
   4bec8:	blr	x20
   4becc:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4bed0:	ldr	w0, [sp, #108]
   4bed4:	cmp	w0, #0x10
   4bed8:	csinc	w22, w22, wzr, eq  // eq = none
   4bedc:	ldr	w0, [sp, #108]
   4bee0:	cmp	w0, #0x10
   4bee4:	ldr	w0, [sp, #216]
   4bee8:	ccmp	w0, #0x9, #0x0, ne  // ne = any
   4beec:	csinc	w22, w22, wzr, ne  // ne = any
   4bef0:	ldr	x0, [sp, #248]
   4bef4:	ldr	w1, [sp, #108]
   4bef8:	add	x0, x0, #0xde8
   4befc:	ldr	x2, [x0, w1, sxtw #3]
   4bf00:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf04:	b	4c358 <aarch64_get_opcode@@Base+0x1f84>
   4bf08:	ldr	w2, [sp, #288]
   4bf0c:	adrp	x1, 62000 <fields@@Base+0x95a8>
   4bf10:	add	x1, x1, #0x23e
   4bf14:	b	4be0c <aarch64_get_opcode@@Base+0x1a38>
   4bf18:	mov	w1, #0xd                   	// #13
   4bf1c:	mov	w4, #0x16                  	// #22
   4bf20:	mov	w2, #0xf                   	// #15
   4bf24:	mov	w3, w4
   4bf28:	mov	x0, x21
   4bf2c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4bf30:	sub	x1, x0, #0x1
   4bf34:	mov	x2, x0
   4bf38:	cmp	x1, #0xe
   4bf3c:	b.hi	4bfa8 <aarch64_get_opcode@@Base+0x1bd4>  // b.pmore
   4bf40:	cmp	w1, #0xe
   4bf44:	b.hi	4bfa8 <aarch64_get_opcode@@Base+0x1bd4>  // b.pmore
   4bf48:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4bf4c:	add	x0, x0, #0xe4c
   4bf50:	ldrb	w0, [x0, w1, uxtw]
   4bf54:	adr	x1, 4bf60 <aarch64_get_opcode@@Base+0x1b8c>
   4bf58:	add	x0, x1, w0, sxtb #2
   4bf5c:	br	x0
   4bf60:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf64:	add	x1, x1, #0xb5f
   4bf68:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bf6c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf70:	add	x1, x1, #0xb65
   4bf74:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bf78:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf7c:	add	x1, x1, #0xb72
   4bf80:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bf84:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf88:	add	x1, x1, #0xb76
   4bf8c:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bf90:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bf94:	add	x1, x1, #0xb79
   4bf98:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bf9c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bfa0:	add	x1, x1, #0xb81
   4bfa4:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bfa8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bfac:	add	x1, x1, #0xb88
   4bfb0:	mov	x0, x19
   4bfb4:	blr	x20
   4bfb8:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4bfbc:	and	x0, x21, #0x7f8000
   4bfc0:	and	x0, x0, #0xffffffffffc0ffff
   4bfc4:	cmp	x0, #0x8, lsl #12
   4bfc8:	b.eq	4bfe4 <aarch64_get_opcode@@Base+0x1c10>  // b.none
   4bfcc:	cmp	x0, #0x400, lsl #12
   4bfd0:	b.eq	4bff0 <aarch64_get_opcode@@Base+0x1c1c>  // b.none
   4bfd4:	cbnz	x0, 4bffc <aarch64_get_opcode@@Base+0x1c28>
   4bfd8:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4bfdc:	add	x1, x1, #0xc8e
   4bfe0:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bfe4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4bfe8:	add	x1, x1, #0xf17
   4bfec:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bff0:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4bff4:	add	x1, x1, #0xcb2
   4bff8:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4bffc:	adrp	x1, 53000 <xexit@@Base+0x508>
   4c000:	add	x1, x1, #0x97
   4c004:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c008:	and	x0, x21, #0xfff80
   4c00c:	and	x0, x0, #0xfffffffffff800ff
   4c010:	cmp	x0, #0x80
   4c014:	b.eq	4c5a4 <aarch64_get_opcode@@Base+0x21d0>  // b.none
   4c018:	cmp	x0, #0x80, lsl #12
   4c01c:	b.eq	4c078 <aarch64_get_opcode@@Base+0x1ca4>  // b.none
   4c020:	cbnz	x0, 4c030 <aarch64_get_opcode@@Base+0x1c5c>
   4c024:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c028:	add	x1, x1, #0xa64
   4c02c:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c030:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c034:	add	x1, x1, #0xb9a
   4c038:	mov	w2, #0x5                   	// #5
   4c03c:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4c040:	add	x0, x0, #0xb4a
   4c044:	bl	35a30 <dcgettext@plt>
   4c048:	mov	x1, x0
   4c04c:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c050:	and	x0, x21, #0x7f8000
   4c054:	and	x0, x0, #0xffffffffffc0ffff
   4c058:	cmp	x0, #0x8, lsl #12
   4c05c:	b.eq	4c5a4 <aarch64_get_opcode@@Base+0x21d0>  // b.none
   4c060:	cmp	x0, #0x400, lsl #12
   4c064:	b.eq	4c078 <aarch64_get_opcode@@Base+0x1ca4>  // b.none
   4c068:	cbz	x0, 4c024 <aarch64_get_opcode@@Base+0x1c50>
   4c06c:	adrp	x1, 55000 <xexit@@Base+0x2508>
   4c070:	add	x1, x1, #0x723
   4c074:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c078:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4c07c:	add	x1, x1, #0x88c
   4c080:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c084:	and	x0, x21, #0x60
   4c088:	cmp	x0, #0x20
   4c08c:	b.eq	4c06c <aarch64_get_opcode@@Base+0x1c98>  // b.none
   4c090:	cmp	x0, #0x40
   4c094:	b.eq	4c0a8 <aarch64_get_opcode@@Base+0x1cd4>  // b.none
   4c098:	cbz	x0, 4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c09c:	adrp	x1, 55000 <xexit@@Base+0x2508>
   4c0a0:	add	x1, x1, #0x23d
   4c0a4:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c0a8:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4c0ac:	add	x1, x1, #0x135
   4c0b0:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c0b4:	sub	w0, w0, #0x60
   4c0b8:	cmp	w0, #0x18
   4c0bc:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4c0c0:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4c0c4:	add	x1, x1, #0xe5c
   4c0c8:	ldrh	w0, [x1, w0, uxtw #1]
   4c0cc:	adr	x1, 4c0d8 <aarch64_get_opcode@@Base+0x1d04>
   4c0d0:	add	x0, x1, w0, sxth #2
   4c0d4:	br	x0
   4c0d8:	sub	w0, w0, #0x3f
   4c0dc:	cmp	w0, #0x8
   4c0e0:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4c0e4:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4c0e8:	add	x1, x1, #0xe90
   4c0ec:	ldrh	w0, [x1, w0, uxtw #1]
   4c0f0:	adr	x1, 4c0fc <aarch64_get_opcode@@Base+0x1d28>
   4c0f4:	add	x0, x1, w0, sxth #2
   4c0f8:	br	x0
   4c0fc:	cmp	w0, #0x52
   4c100:	b.eq	4c12c <aarch64_get_opcode@@Base+0x1d58>  // b.none
   4c104:	cmp	w0, #0x56
   4c108:	b.eq	4c1a0 <aarch64_get_opcode@@Base+0x1dcc>  // b.none
   4c10c:	cmp	w0, #0x51
   4c110:	b.ne	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.any
   4c114:	ldr	x0, [sp, #360]
   4c118:	lsr	x2, x0, #1
   4c11c:	tbz	w0, #0, 4c1b4 <aarch64_get_opcode@@Base+0x1de0>
   4c120:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c124:	add	x1, x1, #0xbb3
   4c128:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c12c:	ldr	x0, [sp, #360]
   4c130:	cmp	x0, #0xf
   4c134:	csinc	w22, w22, wzr, ne  // ne = any
   4c138:	ldrb	w0, [x24, #1]
   4c13c:	add	x23, x24, #0x1
   4c140:	ldr	x1, [sp, #360]
   4c144:	cmp	w0, #0x75
   4c148:	b.ne	4c190 <aarch64_get_opcode@@Base+0x1dbc>  // b.any
   4c14c:	ldr	x0, [sp, #184]
   4c150:	cmp	x0, x1
   4c154:	b.ne	4c198 <aarch64_get_opcode@@Base+0x1dc4>  // b.any
   4c158:	mov	w22, #0x1                   	// #1
   4c15c:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4c160:	mov	x2, #0x12                  	// #18
   4c164:	ldr	w0, [x0, #1624]
   4c168:	madd	x0, x0, x2, x1
   4c16c:	ldr	x1, [sp, #112]
   4c170:	add	x0, x0, #0x2
   4c174:	ldr	x2, [x1, x0, lsl #3]
   4c178:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c17c:	mov	x0, x19
   4c180:	add	x1, x1, #0xa63
   4c184:	blr	x20
   4c188:	mov	x24, x23
   4c18c:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c190:	mov	x23, x24
   4c194:	b	4c15c <aarch64_get_opcode@@Base+0x1d88>
   4c198:	str	x1, [sp, #184]
   4c19c:	b	4c15c <aarch64_get_opcode@@Base+0x1d88>
   4c1a0:	tbnz	w21, #6, 4c114 <aarch64_get_opcode@@Base+0x1d40>
   4c1a4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c1a8:	add	x1, x1, #0xbae
   4c1ac:	ldr	x2, [sp, #360]
   4c1b0:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c1b4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c1b8:	add	x1, x1, #0xbc8
   4c1bc:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c1c0:	ldr	x2, [sp, #360]
   4c1c4:	mov	x0, x19
   4c1c8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c1cc:	add	x1, x1, #0xaa7
   4c1d0:	blr	x20
   4c1d4:	ldr	x28, [sp, #360]
   4c1d8:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c1dc:	ldr	x2, [sp, #360]
   4c1e0:	mov	w1, #0x40000000            	// #1073741824
   4c1e4:	mov	w6, #0x312d                	// #12589
   4c1e8:	mov	w5, #0x10c6                	// #4294
   4c1ec:	movk	w6, #0x1, lsl #16
   4c1f0:	and	x4, x2, #0x80
   4c1f4:	lsl	w3, w2, #24
   4c1f8:	ubfiz	w0, w2, #19, #6
   4c1fc:	tst	x2, #0x40
   4c200:	and	w3, w3, #0x80000000
   4c204:	orr	w3, w3, w0
   4c208:	mov	w0, #0x3e000000            	// #1040187392
   4c20c:	csel	w0, w0, w1, ne  // ne = any
   4c210:	mov	w1, #0x6139                	// #24889
   4c214:	orr	w3, w3, w0
   4c218:	movk	w1, #0x68c2, lsl #16
   4c21c:	ubfx	x0, x3, #23, #8
   4c220:	sub	w0, w0, #0x7c
   4c224:	lsl	w6, w6, w0
   4c228:	and	x0, x2, #0xf
   4c22c:	add	x0, x0, #0x10
   4c230:	mul	w0, w6, w0
   4c234:	mul	w1, w0, w1
   4c238:	ror	w1, w1, #6
   4c23c:	cmp	w1, w5
   4c240:	b.hi	4c284 <aarch64_get_opcode@@Base+0x1eb0>  // b.pmore
   4c244:	mov	w6, #0x9680                	// #38528
   4c248:	cmp	x4, #0x0
   4c24c:	movk	w6, #0x98, lsl #16
   4c250:	mov	w4, #0x2d                  	// #45
   4c254:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c258:	add	x1, x1, #0xbcd
   4c25c:	udiv	w5, w0, w6
   4c260:	msub	w6, w5, w6, w0
   4c264:	mov	w0, #0x4240                	// #16960
   4c268:	movk	w0, #0xf, lsl #16
   4c26c:	udiv	w6, w6, w0
   4c270:	mov	w0, #0x20                  	// #32
   4c274:	csel	w4, w4, w0, ne  // ne = any
   4c278:	mov	x0, x19
   4c27c:	blr	x20
   4c280:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c284:	mov	w1, #0x2710                	// #10000
   4c288:	mov	w6, #0x9680                	// #38528
   4c28c:	cmp	x4, #0x0
   4c290:	movk	w6, #0x98, lsl #16
   4c294:	udiv	w5, w0, w1
   4c298:	msub	w5, w5, w1, w0
   4c29c:	cbnz	w5, 4c2c4 <aarch64_get_opcode@@Base+0x1ef0>
   4c2a0:	udiv	w5, w0, w6
   4c2a4:	mov	w4, #0x2d                  	// #45
   4c2a8:	msub	w6, w5, w6, w0
   4c2ac:	mov	w0, #0x20                  	// #32
   4c2b0:	csel	w4, w4, w0, ne  // ne = any
   4c2b4:	udiv	w6, w6, w1
   4c2b8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c2bc:	add	x1, x1, #0xbe4
   4c2c0:	b	4c278 <aarch64_get_opcode@@Base+0x1ea4>
   4c2c4:	udiv	w5, w0, w6
   4c2c8:	mov	w4, #0x2d                  	// #45
   4c2cc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c2d0:	add	x1, x1, #0xbfb
   4c2d4:	msub	w6, w5, w6, w0
   4c2d8:	mov	w0, #0x20                  	// #32
   4c2dc:	csel	w4, w4, w0, ne  // ne = any
   4c2e0:	b	4c278 <aarch64_get_opcode@@Base+0x1ea4>
   4c2e4:	ldr	x0, [sp, #256]
   4c2e8:	ldr	x2, [sp, #360]
   4c2ec:	sub	x2, x0, x2
   4c2f0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c2f4:	add	x1, x1, #0xaa7
   4c2f8:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c2fc:	ldr	x2, [sp, #360]
   4c300:	cmp	x2, #0x7
   4c304:	b.ls	4c328 <aarch64_get_opcode@@Base+0x1f54>  // b.plast
   4c308:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4c30c:	add	x0, x0, #0xc70
   4c310:	and	x2, x2, #0x7
   4c314:	add	x0, x0, #0x1f0
   4c318:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c31c:	add	x1, x1, #0xc12
   4c320:	ldr	x2, [x0, x2, lsl #3]
   4c324:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c328:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c32c:	add	x1, x1, #0xc16
   4c330:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c334:	ldr	w0, [sp, #356]
   4c338:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c33c:	ldr	x2, [sp, #360]
   4c340:	cmp	w0, #0x2
   4c344:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4c348:	add	x0, x0, #0xc70
   4c34c:	b.ne	4c360 <aarch64_get_opcode@@Base+0x1f8c>  // b.any
   4c350:	add	x0, x0, #0x230
   4c354:	ldr	x2, [x0, x2, lsl #3]
   4c358:	add	x1, x1, #0xa63
   4c35c:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c360:	add	x0, x0, #0x250
   4c364:	b	4c354 <aarch64_get_opcode@@Base+0x1f80>
   4c368:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4c36c:	add	x0, x0, #0xc70
   4c370:	add	x0, x0, #0x2d0
   4c374:	ldr	x1, [sp, #360]
   4c378:	ldr	x2, [x0, x1, lsl #3]
   4c37c:	b	4bf00 <aarch64_get_opcode@@Base+0x1b2c>
   4c380:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4c384:	add	x0, x0, #0xc70
   4c388:	add	x0, x0, #0x350
   4c38c:	b	4c374 <aarch64_get_opcode@@Base+0x1fa0>
   4c390:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c394:	ldr	w2, [sp, #360]
   4c398:	add	x1, x1, #0xaae
   4c39c:	b	4bfb0 <aarch64_get_opcode@@Base+0x1bdc>
   4c3a0:	ldr	x1, [sp, #360]
   4c3a4:	cmp	x1, #0x3
   4c3a8:	b.hi	4c3fc <aarch64_get_opcode@@Base+0x2028>  // b.pmore
   4c3ac:	cmp	w1, #0x3
   4c3b0:	b.hi	4c3fc <aarch64_get_opcode@@Base+0x2028>  // b.pmore
   4c3b4:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4c3b8:	add	x0, x0, #0xea4
   4c3bc:	ldrb	w0, [x0, w1, uxtw]
   4c3c0:	adr	x1, 4c3cc <aarch64_get_opcode@@Base+0x1ff8>
   4c3c4:	add	x0, x1, w0, sxtb #2
   4c3c8:	br	x0
   4c3cc:	adrp	x1, 56000 <xexit@@Base+0x3508>
   4c3d0:	add	x1, x1, #0xeb
   4c3d4:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c3d8:	adrp	x1, 56000 <xexit@@Base+0x3508>
   4c3dc:	add	x1, x1, #0x107
   4c3e0:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c3e4:	adrp	x1, 5a000 <fields@@Base+0x15a8>
   4c3e8:	add	x1, x1, #0x3da
   4c3ec:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c3f0:	adrp	x1, 56000 <xexit@@Base+0x3508>
   4c3f4:	add	x1, x1, #0x11b
   4c3f8:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c3fc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c400:	add	x1, x1, #0xc1b
   4c404:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c408:	ldr	x0, [sp, #360]
   4c40c:	add	x23, x24, #0x1
   4c410:	cbnz	x0, 4c188 <aarch64_get_opcode@@Base+0x1db4>
   4c414:	ldrb	w2, [x24, #1]
   4c418:	mov	x0, x19
   4c41c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4c420:	add	x1, x1, #0xdca
   4c424:	blr	x20
   4c428:	b	4c188 <aarch64_get_opcode@@Base+0x1db4>
   4c42c:	ldr	w0, [sp, #356]
   4c430:	mov	w23, #0x1                   	// #1
   4c434:	ldr	x1, [sp, #360]
   4c438:	lsl	w0, w23, w0
   4c43c:	sub	w0, w0, w1
   4c440:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4c444:	add	x1, x1, #0xdca
   4c448:	ldrb	w2, [x24, w0, sxtw]
   4c44c:	mov	x0, x19
   4c450:	blr	x20
   4c454:	ldr	w0, [sp, #356]
   4c458:	lsl	w23, w23, w0
   4c45c:	add	x24, x24, w23, sxtw
   4c460:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c464:	ldrb	w0, [x23, #2]
   4c468:	add	x24, x23, #0x2
   4c46c:	sub	w0, w0, #0x30
   4c470:	cmp	w0, #0x4
   4c474:	b.hi	4b744 <aarch64_get_opcode@@Base+0x1370>  // b.pmore
   4c478:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4c47c:	add	x1, x1, #0xea8
   4c480:	ldrb	w0, [x1, w0, uxtw]
   4c484:	adr	x1, 4c490 <aarch64_get_opcode@@Base+0x20bc>
   4c488:	add	x0, x1, w0, sxtb #2
   4c48c:	br	x0
   4c490:	cmp	w27, #0x79
   4c494:	b.ne	4c534 <aarch64_get_opcode@@Base+0x2160>  // b.any
   4c498:	ldr	w3, [sp, #320]
   4c49c:	mov	w2, #0x73                  	// #115
   4c4a0:	str	w2, [sp, #344]
   4c4a4:	mov	x0, x19
   4c4a8:	str	w3, [sp, #348]
   4c4ac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c4b0:	add	x1, x1, #0xc26
   4c4b4:	blr	x20
   4c4b8:	ldrb	w0, [x23, #2]
   4c4bc:	ldr	w2, [sp, #344]
   4c4c0:	ldr	w3, [sp, #348]
   4c4c4:	cmp	w0, #0x33
   4c4c8:	b.ne	4c550 <aarch64_get_opcode@@Base+0x217c>  // b.any
   4c4cc:	ldr	w0, [sp, #240]
   4c4d0:	cmp	w27, #0x79
   4c4d4:	ldr	w1, [sp, #324]
   4c4d8:	csel	w0, w0, w1, eq  // eq = none
   4c4dc:	subs	w0, w0, #0x1
   4c4e0:	b.eq	4c4f8 <aarch64_get_opcode@@Base+0x2124>  // b.none
   4c4e4:	add	w3, w0, w3
   4c4e8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c4ec:	mov	x0, x19
   4c4f0:	add	x1, x1, #0xc1e
   4c4f4:	blr	x20
   4c4f8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c4fc:	add	x1, x1, #0xb12
   4c500:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c504:	cmp	w27, #0x79
   4c508:	b.ne	4c540 <aarch64_get_opcode@@Base+0x216c>  // b.any
   4c50c:	ldr	w3, [sp, #312]
   4c510:	b	4c49c <aarch64_get_opcode@@Base+0x20c8>
   4c514:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c518:	mov	x0, x19
   4c51c:	add	x1, x1, #0xaa4
   4c520:	blr	x20
   4c524:	cmp	w27, #0x79
   4c528:	b.ne	4c548 <aarch64_get_opcode@@Base+0x2174>  // b.any
   4c52c:	ldr	w3, [sp, #224]
   4c530:	b	4c49c <aarch64_get_opcode@@Base+0x20c8>
   4c534:	ldr	w3, [sp, #316]
   4c538:	mov	w2, #0x64                  	// #100
   4c53c:	b	4c4a0 <aarch64_get_opcode@@Base+0x20cc>
   4c540:	ldr	w3, [sp, #308]
   4c544:	b	4c538 <aarch64_get_opcode@@Base+0x2164>
   4c548:	ldr	w3, [sp, #220]
   4c54c:	b	4c538 <aarch64_get_opcode@@Base+0x2164>
   4c550:	cmp	w0, #0x34
   4c554:	b.ne	4bcdc <aarch64_get_opcode@@Base+0x1908>  // b.any
   4c558:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c55c:	add	w3, w3, #0x1
   4c560:	add	x1, x1, #0xc24
   4c564:	b	4be30 <aarch64_get_opcode@@Base+0x1a5c>
   4c568:	ldr	x0, [sp, #136]
   4c56c:	cmp	x0, #0x400, lsl #12
   4c570:	b.eq	4c5bc <aarch64_get_opcode@@Base+0x21e8>  // b.none
   4c574:	b.gt	4c590 <aarch64_get_opcode@@Base+0x21bc>
   4c578:	cbz	x0, 4c5b0 <aarch64_get_opcode@@Base+0x21dc>
   4c57c:	cmp	x0, #0x100
   4c580:	b.ne	4bcdc <aarch64_get_opcode@@Base+0x1908>  // b.any
   4c584:	adrp	x1, 62000 <fields@@Base+0x95a8>
   4c588:	add	x1, x1, #0x18f
   4c58c:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c590:	ldr	x0, [sp, #136]
   4c594:	mov	x1, #0x100                 	// #256
   4c598:	movk	x1, #0x40, lsl #16
   4c59c:	cmp	x0, x1
   4c5a0:	b.ne	4bcdc <aarch64_get_opcode@@Base+0x1908>  // b.any
   4c5a4:	adrp	x1, 62000 <fields@@Base+0x95a8>
   4c5a8:	add	x1, x1, #0x23f
   4c5ac:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c5b0:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4c5b4:	add	x1, x1, #0x1e7
   4c5b8:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c5bc:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4c5c0:	add	x1, x1, #0xb98
   4c5c4:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c5c8:	ldr	x0, [sp, #176]
   4c5cc:	str	x0, [sp, #360]
   4c5d0:	ldr	w2, [sp, #280]
   4c5d4:	b	4bf0c <aarch64_get_opcode@@Base+0x1b38>
   4c5d8:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4c5dc:	mov	x1, #0x12                  	// #18
   4c5e0:	ldr	x2, [sp, #152]
   4c5e4:	ldr	w0, [x0, #1624]
   4c5e8:	madd	x0, x0, x1, x2
   4c5ec:	ldr	x1, [sp, #112]
   4c5f0:	add	x0, x0, #0x2
   4c5f4:	ldr	x2, [x1, x0, lsl #3]
   4c5f8:	mov	x0, x19
   4c5fc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c600:	add	x1, x1, #0xc6e
   4c604:	blr	x20
   4c608:	ldr	w0, [sp, #208]
   4c60c:	cmp	w0, #0x1
   4c610:	b.eq	4c628 <aarch64_get_opcode@@Base+0x2254>  // b.none
   4c614:	ldr	x0, [sp, #96]
   4c618:	ldr	x1, [sp, #232]
   4c61c:	cmp	x0, #0x0
   4c620:	ldr	x0, [sp, #328]
   4c624:	csel	x28, x0, x1, eq  // eq = none
   4c628:	ldr	w0, [sp, #240]
   4c62c:	cbz	w0, 4c66c <aarch64_get_opcode@@Base+0x2298>
   4c630:	tbz	w21, #24, 4c650 <aarch64_get_opcode@@Base+0x227c>
   4c634:	ldp	x4, x2, [sp, #192]
   4c638:	mov	x0, x19
   4c63c:	ldr	w3, [sp, #148]
   4c640:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c644:	add	x1, x1, #0xc2b
   4c648:	blr	x20
   4c64c:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c650:	ldr	w3, [sp, #148]
   4c654:	mov	x0, x19
   4c658:	ldr	x2, [sp, #200]
   4c65c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4c660:	add	x1, x1, #0xb1
   4c664:	blr	x20
   4c668:	b	4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c66c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c670:	add	x1, x1, #0xae4
   4c674:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c678:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4c67c:	mov	x1, #0x12                  	// #18
   4c680:	ldr	x2, [sp, #112]
   4c684:	ldr	w0, [x0, #1624]
   4c688:	mul	x0, x0, x1
   4c68c:	ldr	x1, [sp, #272]
   4c690:	add	x1, x0, x1
   4c694:	add	x1, x1, #0x2
   4c698:	ldr	x4, [x2, x1, lsl #3]
   4c69c:	ldr	x1, [sp, #152]
   4c6a0:	add	x0, x0, x1
   4c6a4:	add	x0, x0, #0x2
   4c6a8:	ldr	x2, [x2, x0, lsl #3]
   4c6ac:	ldr	w0, [sp, #160]
   4c6b0:	cmp	w0, #0x3
   4c6b4:	b.eq	4c714 <aarch64_get_opcode@@Base+0x2340>  // b.none
   4c6b8:	b.gt	4c6d0 <aarch64_get_opcode@@Base+0x22fc>
   4c6bc:	cmp	w0, #0x1
   4c6c0:	b.eq	4c714 <aarch64_get_opcode@@Base+0x2340>  // b.none
   4c6c4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c6c8:	add	x1, x1, #0xc55
   4c6cc:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c6d0:	ldr	w3, [sp, #212]
   4c6d4:	mov	x0, x19
   4c6d8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c6dc:	add	x1, x1, #0xc36
   4c6e0:	blr	x20
   4c6e4:	ldr	w0, [sp, #128]
   4c6e8:	cbnz	w0, 4c740 <aarch64_get_opcode@@Base+0x236c>
   4c6ec:	mov	x0, x19
   4c6f0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c6f4:	add	x1, x1, #0xae4
   4c6f8:	blr	x20
   4c6fc:	ldr	w0, [sp, #284]
   4c700:	cmp	w0, #0x5
   4c704:	b.ne	4bcdc <aarch64_get_opcode@@Base+0x1908>  // b.any
   4c708:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4c70c:	add	x1, x1, #0xe9f
   4c710:	b	4bbf4 <aarch64_get_opcode@@Base+0x1820>
   4c714:	ldr	w3, [sp, #212]
   4c718:	mov	x0, x19
   4c71c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c720:	add	x1, x1, #0xc40
   4c724:	blr	x20
   4c728:	ldr	w0, [sp, #128]
   4c72c:	cbz	w0, 4bcdc <aarch64_get_opcode@@Base+0x1908>
   4c730:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c734:	mov	x2, x0
   4c738:	add	x1, x1, #0xc4b
   4c73c:	b	4be0c <aarch64_get_opcode@@Base+0x1a38>
   4c740:	ldr	w2, [sp, #128]
   4c744:	mov	x0, x19
   4c748:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4c74c:	add	x1, x1, #0xc4b
   4c750:	blr	x20
   4c754:	b	4c6ec <aarch64_get_opcode@@Base+0x2318>
   4c758:	ldr	x2, [sp, #296]
   4c75c:	b	4c2f0 <aarch64_get_opcode@@Base+0x1f1c>
   4c760:	mov	w22, #0x1                   	// #1
   4c764:	b	4bd1c <aarch64_get_opcode@@Base+0x1948>
   4c768:	stp	x29, x30, [sp, #-384]!
   4c76c:	mov	x29, sp
   4c770:	stp	x19, x20, [sp, #16]
   4c774:	stp	x21, x22, [sp, #32]
   4c778:	mov	x21, x1
   4c77c:	mov	w1, w2
   4c780:	stp	x23, x24, [sp, #48]
   4c784:	stp	x25, x26, [sp, #64]
   4c788:	stp	x27, x28, [sp, #80]
   4c78c:	str	w2, [sp, #168]
   4c790:	cbz	w1, 4c7bc <aarch64_get_opcode@@Base+0x23e8>
   4c794:	mov	x1, #0xef000000            	// #4009754624
   4c798:	bics	xzr, x1, x21
   4c79c:	b.ne	4cacc <aarch64_get_opcode@@Base+0x26f8>  // b.any
   4c7a0:	and	x1, x21, #0xffffff
   4c7a4:	tst	x21, #0x10000000
   4c7a8:	mov	x2, #0xf3000000            	// #4076863488
   4c7ac:	mov	x3, #0xf2000000            	// #4060086272
   4c7b0:	orr	x2, x1, x2
   4c7b4:	orr	x1, x1, x3
   4c7b8:	csel	x21, x1, x2, eq  // eq = none
   4c7bc:	adrp	x1, 8e000 <aarch64_operands@@Base+0xdbc0>
   4c7c0:	add	x1, x1, #0x570
   4c7c4:	ldr	x27, [x1, #40]
   4c7c8:	cbz	x27, 4cb18 <aarch64_get_opcode@@Base+0x2744>
   4c7cc:	ldp	x3, x2, [x1, #24]
   4c7d0:	and	x2, x21, x2
   4c7d4:	cmp	x2, x3
   4c7d8:	b.ne	4d3b0 <aarch64_get_opcode@@Base+0x2fdc>  // b.any
   4c7dc:	ubfx	w1, w21, #16, #4
   4c7e0:	str	w1, [sp, #184]
   4c7e4:	asr	x1, x21, #3
   4c7e8:	ubfx	w2, w21, #16, #4
   4c7ec:	and	w1, w1, #0x10
   4c7f0:	ubfx	w28, w21, #8, #2
   4c7f4:	orr	w1, w1, w2
   4c7f8:	str	w1, [sp, #144]
   4c7fc:	ldp	x19, x20, [x0]
   4c800:	asr	x0, x21, #16
   4c804:	ldr	w2, [sp, #144]
   4c808:	and	w24, w21, #0xf
   4c80c:	ubfiz	w0, w0, #4, #3
   4c810:	mov	w3, #0x40                  	// #64
   4c814:	add	w2, w2, w28
   4c818:	str	w2, [sp, #172]
   4c81c:	ubfx	w2, w21, #8, #4
   4c820:	str	w2, [sp, #148]
   4c824:	ubfx	w2, w21, #5, #1
   4c828:	str	w2, [sp, #224]
   4c82c:	asr	x2, x21, #24
   4c830:	asr	x1, x21, #8
   4c834:	asr	x23, x21, #22
   4c838:	mov	w5, #0x2                   	// #2
   4c83c:	ubfiz	w2, w2, #7, #1
   4c840:	ubfx	w25, w21, #10, #2
   4c844:	orr	w0, w2, w0
   4c848:	ubfiz	w23, w23, #4, #1
   4c84c:	orr	w0, w24, w0
   4c850:	str	w0, [sp, #104]
   4c854:	adrp	x26, 82000 <aarch64_operands@@Base+0x1bc0>
   4c858:	add	x26, x26, #0xb70
   4c85c:	sxtw	x0, w0
   4c860:	str	x0, [sp, #120]
   4c864:	ldr	x0, [sp, #104]
   4c868:	ldr	x4, [sp, #120]
   4c86c:	ubfiz	x2, x0, #19, #7
   4c870:	ldr	w0, [sp, #104]
   4c874:	sbfiz	x0, x0, #24, #32
   4c878:	and	x0, x0, #0x80000000
   4c87c:	orr	x0, x0, x2
   4c880:	ldr	x2, [sp, #104]
   4c884:	tst	x2, #0x40
   4c888:	mov	w2, #0x3c                  	// #60
   4c88c:	csel	w2, w2, w3, ne  // ne = any
   4c890:	mov	x3, #0x1                   	// #1
   4c894:	sbfiz	x2, x2, #24, #32
   4c898:	orr	x2, x2, x0
   4c89c:	ubfx	w0, w0, #16, #8
   4c8a0:	str	w0, [sp, #252]
   4c8a4:	ubfx	x0, x2, #24, #32
   4c8a8:	str	x0, [sp, #256]
   4c8ac:	ubfx	w0, w21, #8, #1
   4c8b0:	str	x2, [sp, #208]
   4c8b4:	add	w0, w0, #0x1
   4c8b8:	ldr	x2, [sp, #120]
   4c8bc:	lsl	w0, w0, #3
   4c8c0:	lsl	x2, x2, x0
   4c8c4:	lsl	x0, x3, x0
   4c8c8:	sub	x0, x0, #0x1
   4c8cc:	orr	x0, x0, x2
   4c8d0:	ubfx	w2, w21, #9, #1
   4c8d4:	lsl	w2, w2, #3
   4c8d8:	lsl	x2, x4, x2
   4c8dc:	str	x2, [sp, #216]
   4c8e0:	ubfx	w2, w21, #9, #2
   4c8e4:	lsl	w2, w2, #3
   4c8e8:	lsl	x2, x4, x2
   4c8ec:	str	x2, [sp, #128]
   4c8f0:	and	x2, x2, #0x80000000
   4c8f4:	str	x2, [sp, #264]
   4c8f8:	ands	w2, w1, #0x8
   4c8fc:	str	w2, [sp, #280]
   4c900:	ldr	x2, [sp, #128]
   4c904:	ubfx	w4, w21, #20, #2
   4c908:	csel	x0, x0, x2, ne  // ne = any
   4c90c:	str	x0, [sp, #192]
   4c910:	orr	x0, x2, #0xffffffff00000000
   4c914:	str	x0, [sp, #288]
   4c918:	asr	x0, x21, #1
   4c91c:	mov	w2, #0x4                   	// #4
   4c920:	and	w0, w0, #0x10
   4c924:	lsl	w2, w2, w4
   4c928:	orr	w0, w0, w24
   4c92c:	sub	w2, w2, #0x1
   4c930:	and	w2, w2, w0
   4c934:	cmp	w28, #0x0
   4c938:	str	w2, [sp, #296]
   4c93c:	add	w2, w28, #0x1
   4c940:	asr	w0, w0, w4
   4c944:	str	w2, [sp, #136]
   4c948:	cset	w2, eq  // eq = none
   4c94c:	asr	w0, w0, #2
   4c950:	ands	w2, w2, w21, lsr #5
   4c954:	str	w0, [sp, #300]
   4c958:	csinc	w5, w5, w28, ne  // ne = any
   4c95c:	ubfx	w0, w21, #12, #4
   4c960:	cmp	w2, #0x0
   4c964:	ubfx	w2, w21, #5, #1
   4c968:	orr	w23, w23, w0
   4c96c:	cinc	w2, w2, eq  // eq = none
   4c970:	str	w2, [sp, #272]
   4c974:	sub	w2, w23, #0x1
   4c978:	add	w2, w2, w5
   4c97c:	str	w2, [sp, #240]
   4c980:	add	w2, w28, #0x1
   4c984:	ubfx	w0, w21, #4, #1
   4c988:	str	w5, [sp, #188]
   4c98c:	asr	x4, x21, #4
   4c990:	lsl	w5, w2, #3
   4c994:	ubfx	w2, w21, #6, #2
   4c998:	str	w0, [sp, #152]
   4c99c:	asr	x0, x21, #6
   4c9a0:	orr	w1, w1, w0
   4c9a4:	lsl	w2, w5, w2
   4c9a8:	str	w2, [sp, #156]
   4c9ac:	and	w2, w0, #0x2
   4c9b0:	and	w0, w1, #0x3
   4c9b4:	add	w1, w25, #0x1
   4c9b8:	str	w0, [sp, #244]
   4c9bc:	ubfx	w0, w21, #4, #4
   4c9c0:	cmp	w25, #0x0
   4c9c4:	str	w2, [sp, #284]
   4c9c8:	asr	w1, w0, w1
   4c9cc:	str	w1, [sp, #308]
   4c9d0:	asr	w1, w0, w25
   4c9d4:	and	w1, w1, #0x1
   4c9d8:	str	w1, [sp, #200]
   4c9dc:	ubfx	w1, w21, #4, #2
   4c9e0:	str	w1, [sp, #140]
   4c9e4:	and	w1, w4, #0x2
   4c9e8:	str	w1, [sp, #236]
   4c9ec:	mov	w1, #0x10                  	// #16
   4c9f0:	lsl	w1, w1, w25
   4c9f4:	str	w1, [sp, #320]
   4c9f8:	lsl	w1, w3, w25
   4c9fc:	sub	w1, w1, #0x1
   4ca00:	and	w0, w0, w1
   4ca04:	str	w0, [sp, #204]
   4ca08:	mov	w0, #0x8                   	// #8
   4ca0c:	str	w1, [sp, #228]
   4ca10:	lsl	w0, w0, w25
   4ca14:	str	w0, [sp, #324]
   4ca18:	mov	w0, #0x20                  	// #32
   4ca1c:	ldr	w2, [sp, #156]
   4ca20:	lsl	w1, w0, w25
   4ca24:	str	w1, [sp, #312]
   4ca28:	ubfx	w1, w21, #4, #2
   4ca2c:	str	wzr, [sp, #116]
   4ca30:	asr	w2, w2, #1
   4ca34:	str	xzr, [sp, #176]
   4ca38:	lsl	w1, w1, #6
   4ca3c:	str	w1, [sp, #316]
   4ca40:	ldrb	w1, [sp, #140]
   4ca44:	str	w2, [sp, #304]
   4ca48:	lsl	w0, w0, w1
   4ca4c:	str	w0, [sp, #232]
   4ca50:	ldr	w0, [sp, #188]
   4ca54:	add	w0, w23, w0, lsl #1
   4ca58:	str	w0, [sp, #248]
   4ca5c:	add	w0, w28, #0x1
   4ca60:	ccmp	w0, #0x1, #0x4, gt
   4ca64:	ldr	w0, [sp, #200]
   4ca68:	csinc	w0, w3, w0, le
   4ca6c:	str	w0, [sp, #276]
   4ca70:	adrp	x0, 5d000 <fields@@Base+0x45a8>
   4ca74:	add	x0, x0, #0xdca
   4ca78:	str	x0, [sp, #160]
   4ca7c:	add	x0, x26, #0xde8
   4ca80:	str	x0, [sp, #328]
   4ca84:	ldrb	w2, [x27]
   4ca88:	cbnz	w2, 4cb3c <aarch64_get_opcode@@Base+0x2768>
   4ca8c:	ldr	x0, [sp, #176]
   4ca90:	add	x0, x0, #0x10
   4ca94:	cmp	x0, #0x30
   4ca98:	b.ls	4cab0 <aarch64_get_opcode@@Base+0x26dc>  // b.plast
   4ca9c:	ldr	x2, [sp, #176]
   4caa0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4caa4:	mov	x0, x20
   4caa8:	add	x1, x1, #0xaab
   4caac:	blr	x19
   4cab0:	ldr	w0, [sp, #116]
   4cab4:	cbz	w0, 4d3b8 <aarch64_get_opcode@@Base+0x2fe4>
   4cab8:	mov	x0, x20
   4cabc:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4cac0:	add	x1, x1, #0x203
   4cac4:	blr	x19
   4cac8:	b	4cb1c <aarch64_get_opcode@@Base+0x2748>
   4cacc:	and	x2, x21, #0xff000000
   4cad0:	mov	x1, #0xf9000000            	// #4177526784
   4cad4:	cmp	x2, x1
   4cad8:	b.ne	4cae8 <aarch64_get_opcode@@Base+0x2714>  // b.any
   4cadc:	mov	x1, #0xd000000             	// #218103808
   4cae0:	eor	x21, x21, x1
   4cae4:	b	4c7bc <aarch64_get_opcode@@Base+0x23e8>
   4cae8:	mov	x1, #0xfd000000            	// #4244635648
   4caec:	and	x1, x21, x1
   4caf0:	mov	x2, #0xfc000000            	// #4227858432
   4caf4:	cmp	x1, x2
   4caf8:	b.eq	4c7bc <aarch64_get_opcode@@Base+0x23e8>  // b.none
   4cafc:	mov	x1, #0xf5f                 	// #3935
   4cb00:	mov	x2, #0xb10                 	// #2832
   4cb04:	movk	x1, #0xff91, lsl #16
   4cb08:	and	x1, x21, x1
   4cb0c:	movk	x2, #0xee80, lsl #16
   4cb10:	cmp	x1, x2
   4cb14:	b.eq	4c7bc <aarch64_get_opcode@@Base+0x23e8>  // b.none
   4cb18:	str	wzr, [sp, #116]
   4cb1c:	ldr	w0, [sp, #116]
   4cb20:	ldp	x19, x20, [sp, #16]
   4cb24:	ldp	x21, x22, [sp, #32]
   4cb28:	ldp	x23, x24, [sp, #48]
   4cb2c:	ldp	x25, x26, [sp, #64]
   4cb30:	ldp	x27, x28, [sp, #80]
   4cb34:	ldp	x29, x30, [sp], #384
   4cb38:	ret
   4cb3c:	cmp	w2, #0x25
   4cb40:	b.ne	4d374 <aarch64_get_opcode@@Base+0x2fa0>  // b.any
   4cb44:	ldrb	w0, [x27, #1]
   4cb48:	add	x22, x27, #0x1
   4cb4c:	cmp	w0, #0x46
   4cb50:	b.hi	4cb8c <aarch64_get_opcode@@Base+0x27b8>  // b.pmore
   4cb54:	cmp	w0, #0x2f
   4cb58:	b.hi	4cb68 <aarch64_get_opcode@@Base+0x2794>  // b.pmore
   4cb5c:	cmp	w0, #0x25
   4cb60:	b.eq	4cbe4 <aarch64_get_opcode@@Base+0x2810>  // b.none
   4cb64:	bl	356c0 <abort@plt>
   4cb68:	sub	w0, w0, #0x30
   4cb6c:	cmp	w0, #0x16
   4cb70:	b.hi	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.pmore
   4cb74:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4cb78:	add	x1, x1, #0xeb0
   4cb7c:	ldrh	w0, [x1, w0, uxtw #1]
   4cb80:	adr	x1, 4cb8c <aarch64_get_opcode@@Base+0x27b8>
   4cb84:	add	x0, x1, w0, sxth #2
   4cb88:	br	x0
   4cb8c:	cmp	w0, #0x63
   4cb90:	b.eq	4cbf8 <aarch64_get_opcode@@Base+0x2824>  // b.none
   4cb94:	cmp	w0, #0x75
   4cb98:	b.ne	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.any
   4cb9c:	ldr	w0, [sp, #168]
   4cba0:	cbz	w0, 4cc00 <aarch64_get_opcode@@Base+0x282c>
   4cba4:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4cba8:	ldr	w1, [sp, #168]
   4cbac:	ldr	w0, [x0, #1040]
   4cbb0:	cmp	w0, #0x0
   4cbb4:	ldr	w0, [sp, #116]
   4cbb8:	csel	w0, w0, w1, eq  // eq = none
   4cbbc:	str	w0, [sp, #116]
   4cbc0:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4cbc4:	ldr	w0, [x0, #1040]
   4cbc8:	cbz	w0, 4cc00 <aarch64_get_opcode@@Base+0x282c>
   4cbcc:	ldr	x1, [sp, #328]
   4cbd0:	ubfx	x0, x0, #4, #4
   4cbd4:	ldr	x2, [x1, x0, lsl #3]
   4cbd8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cbdc:	add	x1, x1, #0xa63
   4cbe0:	b	4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4cbe4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cbe8:	add	x1, x1, #0xa5f
   4cbec:	mov	x0, x20
   4cbf0:	blr	x19
   4cbf4:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4cbf8:	ldr	w0, [sp, #168]
   4cbfc:	cbnz	w0, 4cbc0 <aarch64_get_opcode@@Base+0x27ec>
   4cc00:	add	x27, x22, #0x1
   4cc04:	b	4ca84 <aarch64_get_opcode@@Base+0x26b0>
   4cc08:	ldr	w1, [sp, #148]
   4cc0c:	adrp	x0, 69000 <fields@@Base+0x105a8>
   4cc10:	add	x0, x0, #0x57f
   4cc14:	ldrb	w27, [x0, w1, sxtw]
   4cc18:	mov	x0, x20
   4cc1c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cc20:	add	x1, x1, #0xaa4
   4cc24:	and	w4, w27, #0xf
   4cc28:	str	w4, [sp, #336]
   4cc2c:	lsr	w27, w27, #4
   4cc30:	add	w27, w27, #0x1
   4cc34:	blr	x19
   4cc38:	ldr	w4, [sp, #336]
   4cc3c:	cmp	w27, #0x1
   4cc40:	b.eq	4ccf0 <aarch64_get_opcode@@Base+0x291c>  // b.none
   4cc44:	adrp	x6, 53000 <xexit@@Base+0x508>
   4cc48:	adrp	x7, 53000 <xexit@@Base+0x508>
   4cc4c:	mov	w3, w23
   4cc50:	add	x6, x6, #0x95f
   4cc54:	add	x7, x7, #0x965
   4cc58:	mov	w5, #0x0                   	// #0
   4cc5c:	cmp	w5, w4
   4cc60:	adrp	x8, 5b000 <fields@@Base+0x25a8>
   4cc64:	b.ne	4ccb0 <aarch64_get_opcode@@Base+0x28dc>  // b.any
   4cc68:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4cc6c:	mov	x1, #0x12                  	// #18
   4cc70:	ldr	w0, [x0, #1624]
   4cc74:	mul	x0, x0, x1
   4cc78:	ldr	w1, [sp, #184]
   4cc7c:	add	x0, x0, w1, sxtw
   4cc80:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cc84:	add	x1, x1, #0xc6b
   4cc88:	add	x0, x26, x0, lsl #3
   4cc8c:	ldr	x2, [x0, #3712]
   4cc90:	mov	x0, x20
   4cc94:	blr	x19
   4cc98:	ldr	w0, [sp, #140]
   4cc9c:	cbz	w0, 4cfb0 <aarch64_get_opcode@@Base+0x2bdc>
   4cca0:	ldr	w2, [sp, #232]
   4cca4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cca8:	add	x1, x1, #0xc72
   4ccac:	b	4cfa8 <aarch64_get_opcode@@Base+0x2bd4>
   4ccb0:	cmp	w5, #0x0
   4ccb4:	stp	x7, x6, [sp, #336]
   4ccb8:	csel	x2, x7, x6, ne  // ne = any
   4ccbc:	str	w5, [sp, #352]
   4ccc0:	add	x1, x8, #0xc5d
   4ccc4:	str	w3, [sp, #360]
   4ccc8:	mov	x0, x20
   4cccc:	str	w4, [sp, #364]
   4ccd0:	blr	x19
   4ccd4:	ldr	w5, [sp, #352]
   4ccd8:	ldr	w3, [sp, #360]
   4ccdc:	ldr	w4, [sp, #364]
   4cce0:	add	w5, w5, #0x1
   4cce4:	add	w3, w3, w27
   4cce8:	ldp	x7, x6, [sp, #336]
   4ccec:	b	4cc5c <aarch64_get_opcode@@Base+0x2888>
   4ccf0:	cmp	w4, #0x1
   4ccf4:	b.ne	4cd10 <aarch64_get_opcode@@Base+0x293c>  // b.any
   4ccf8:	mov	w2, w23
   4ccfc:	mov	x0, x20
   4cd00:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cd04:	add	x1, x1, #0xc67
   4cd08:	blr	x19
   4cd0c:	b	4cc68 <aarch64_get_opcode@@Base+0x2894>
   4cd10:	add	w3, w23, w4
   4cd14:	mov	w2, w23
   4cd18:	sub	w3, w3, #0x1
   4cd1c:	mov	x0, x20
   4cd20:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cd24:	add	x1, x1, #0xc63
   4cd28:	blr	x19
   4cd2c:	b	4cc68 <aarch64_get_opcode@@Base+0x2894>
   4cd30:	ldr	w0, [sp, #136]
   4cd34:	cmp	w0, #0x3
   4cd38:	b.eq	4cd98 <aarch64_get_opcode@@Base+0x29c4>  // b.none
   4cd3c:	cmp	w0, #0x4
   4cd40:	b.eq	4cdb0 <aarch64_get_opcode@@Base+0x29dc>  // b.none
   4cd44:	cmp	w0, #0x2
   4cd48:	b.eq	4cd74 <aarch64_get_opcode@@Base+0x29a0>  // b.none
   4cd4c:	ldr	w0, [sp, #200]
   4cd50:	cbnz	w0, 4cb18 <aarch64_get_opcode@@Base+0x2744>
   4cd54:	cbz	w25, 4cd6c <aarch64_get_opcode@@Base+0x2998>
   4cd58:	ldr	w0, [sp, #204]
   4cd5c:	ldr	w1, [sp, #228]
   4cd60:	cmp	w0, w1
   4cd64:	b.eq	4ce8c <aarch64_get_opcode@@Base+0x2ab8>  // b.none
   4cd68:	cbnz	w0, 4cb18 <aarch64_get_opcode@@Base+0x2744>
   4cd6c:	mov	w27, #0x0                   	// #0
   4cd70:	b	4cdc8 <aarch64_get_opcode@@Base+0x29f4>
   4cd74:	cmp	w25, #0x2
   4cd78:	b.ne	4cd84 <aarch64_get_opcode@@Base+0x29b0>  // b.any
   4cd7c:	ldr	w0, [sp, #236]
   4cd80:	cbnz	w0, 4cb18 <aarch64_get_opcode@@Base+0x2744>
   4cd84:	ldr	w0, [sp, #152]
   4cd88:	cmp	w0, #0x0
   4cd8c:	ldr	w0, [sp, #320]
   4cd90:	csel	w27, w0, wzr, ne  // ne = any
   4cd94:	b	4cdc8 <aarch64_get_opcode@@Base+0x29f4>
   4cd98:	cmp	w25, #0x2
   4cd9c:	b.ne	4cda8 <aarch64_get_opcode@@Base+0x29d4>  // b.any
   4cda0:	ldr	w0, [sp, #140]
   4cda4:	cbnz	w0, 4cb18 <aarch64_get_opcode@@Base+0x2744>
   4cda8:	ldr	w0, [sp, #152]
   4cdac:	b	4cd68 <aarch64_get_opcode@@Base+0x2994>
   4cdb0:	cmp	w25, #0x2
   4cdb4:	b.ne	4ce7c <aarch64_get_opcode@@Base+0x2aa8>  // b.any
   4cdb8:	ldr	w0, [sp, #140]
   4cdbc:	cmp	w0, #0x3
   4cdc0:	b.eq	4cb18 <aarch64_get_opcode@@Base+0x2744>  // b.none
   4cdc4:	ldr	w27, [sp, #316]
   4cdc8:	mov	x0, x20
   4cdcc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cdd0:	add	x1, x1, #0xaa4
   4cdd4:	blr	x19
   4cdd8:	adrp	x2, 53000 <xexit@@Base+0x508>
   4cddc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cde0:	adrp	x6, 53000 <xexit@@Base+0x508>
   4cde4:	mov	w3, w23
   4cde8:	add	x2, x2, #0x95f
   4cdec:	add	x1, x1, #0xc77
   4cdf0:	add	x6, x6, #0x965
   4cdf4:	mov	w5, #0x0                   	// #0
   4cdf8:	ldr	w4, [sp, #308]
   4cdfc:	mov	x0, x20
   4ce00:	str	x1, [sp, #336]
   4ce04:	str	w3, [sp, #344]
   4ce08:	str	x6, [sp, #352]
   4ce0c:	str	w5, [sp, #360]
   4ce10:	blr	x19
   4ce14:	ldr	w0, [sp, #276]
   4ce18:	ldr	w3, [sp, #344]
   4ce1c:	ldr	w5, [sp, #360]
   4ce20:	ldr	x6, [sp, #352]
   4ce24:	add	w3, w3, w0
   4ce28:	ldr	w0, [sp, #136]
   4ce2c:	add	w5, w5, #0x1
   4ce30:	mov	x2, x6
   4ce34:	cmp	w0, w5
   4ce38:	ldr	x1, [sp, #336]
   4ce3c:	b.gt	4cdf8 <aarch64_get_opcode@@Base+0x2a24>
   4ce40:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4ce44:	mov	x1, #0x12                  	// #18
   4ce48:	ldr	w0, [x0, #1624]
   4ce4c:	mul	x0, x0, x1
   4ce50:	ldr	w1, [sp, #184]
   4ce54:	add	x0, x0, w1, sxtw
   4ce58:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ce5c:	add	x1, x1, #0xc6b
   4ce60:	add	x0, x26, x0, lsl #3
   4ce64:	ldr	x2, [x0, #3712]
   4ce68:	mov	x0, x20
   4ce6c:	blr	x19
   4ce70:	cbz	w27, 4cfb0 <aarch64_get_opcode@@Base+0x2bdc>
   4ce74:	mov	w2, w27
   4ce78:	b	4cca4 <aarch64_get_opcode@@Base+0x28d0>
   4ce7c:	ldr	w0, [sp, #152]
   4ce80:	cmp	w0, #0x0
   4ce84:	ldr	w0, [sp, #312]
   4ce88:	b	4cd90 <aarch64_get_opcode@@Base+0x29bc>
   4ce8c:	ldr	w27, [sp, #324]
   4ce90:	b	4cdc8 <aarch64_get_opcode@@Base+0x29f4>
   4ce94:	mov	x0, x20
   4ce98:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ce9c:	add	x1, x1, #0xaa4
   4cea0:	blr	x19
   4cea4:	ldr	w0, [sp, #272]
   4cea8:	cmp	w0, #0x2
   4ceac:	b.ne	4cf54 <aarch64_get_opcode@@Base+0x2b80>  // b.any
   4ceb0:	adrp	x2, 53000 <xexit@@Base+0x508>
   4ceb4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ceb8:	adrp	x4, 53000 <xexit@@Base+0x508>
   4cebc:	mov	w27, w23
   4cec0:	add	x2, x2, #0x95f
   4cec4:	add	x1, x1, #0xc81
   4cec8:	add	x4, x4, #0x965
   4cecc:	stp	x1, x4, [sp, #336]
   4ced0:	mov	w3, w27
   4ced4:	mov	x0, x20
   4ced8:	blr	x19
   4cedc:	add	w27, w27, #0x2
   4cee0:	ldp	x1, x4, [sp, #336]
   4cee4:	ldr	w0, [sp, #248]
   4cee8:	cmp	w0, w27
   4ceec:	mov	x2, x4
   4cef0:	b.ne	4cecc <aarch64_get_opcode@@Base+0x2af8>  // b.any
   4cef4:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4cef8:	mov	x1, #0x12                  	// #18
   4cefc:	ldr	w0, [x0, #1624]
   4cf00:	mul	x0, x0, x1
   4cf04:	ldr	w1, [sp, #184]
   4cf08:	add	x0, x0, w1, sxtw
   4cf0c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cf10:	add	x1, x1, #0xc6b
   4cf14:	add	x0, x26, x0, lsl #3
   4cf18:	ldr	x2, [x0, #3712]
   4cf1c:	mov	x0, x20
   4cf20:	blr	x19
   4cf24:	ldr	w0, [sp, #152]
   4cf28:	cbz	w0, 4cfb0 <aarch64_get_opcode@@Base+0x2bdc>
   4cf2c:	cmp	w28, #0x3
   4cf30:	b.ne	4cf94 <aarch64_get_opcode@@Base+0x2bc0>  // b.any
   4cf34:	ldr	w0, [sp, #284]
   4cf38:	ldr	w1, [sp, #304]
   4cf3c:	cmp	w0, #0x0
   4cf40:	ldr	w0, [sp, #156]
   4cf44:	csel	w2, w0, w1, eq  // eq = none
   4cf48:	ldr	w0, [sp, #244]
   4cf4c:	cbnz	w0, 4cca4 <aarch64_get_opcode@@Base+0x28d0>
   4cf50:	b	4cfa0 <aarch64_get_opcode@@Base+0x2bcc>
   4cf54:	ldr	w0, [sp, #188]
   4cf58:	cmp	w0, #0x1
   4cf5c:	b.ne	4cf78 <aarch64_get_opcode@@Base+0x2ba4>  // b.any
   4cf60:	mov	w2, w23
   4cf64:	mov	x0, x20
   4cf68:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cf6c:	add	x1, x1, #0xc8f
   4cf70:	blr	x19
   4cf74:	b	4cef4 <aarch64_get_opcode@@Base+0x2b20>
   4cf78:	ldr	w3, [sp, #240]
   4cf7c:	mov	w2, w23
   4cf80:	mov	x0, x20
   4cf84:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cf88:	add	x1, x1, #0xc89
   4cf8c:	blr	x19
   4cf90:	b	4cef4 <aarch64_get_opcode@@Base+0x2b20>
   4cf94:	ldr	w2, [sp, #156]
   4cf98:	cmp	w28, #0x2
   4cf9c:	b.ne	4cf48 <aarch64_get_opcode@@Base+0x2b74>  // b.any
   4cfa0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cfa4:	add	x1, x1, #0xc95
   4cfa8:	mov	x0, x20
   4cfac:	blr	x19
   4cfb0:	mov	x0, x20
   4cfb4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4cfb8:	add	x1, x1, #0xae4
   4cfbc:	blr	x19
   4cfc0:	cmp	w24, #0xd
   4cfc4:	b.ne	4cfd4 <aarch64_get_opcode@@Base+0x2c00>  // b.any
   4cfc8:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4cfcc:	add	x1, x1, #0xe9f
   4cfd0:	b	4cbec <aarch64_get_opcode@@Base+0x2818>
   4cfd4:	cmp	w24, #0xf
   4cfd8:	b.eq	4cc00 <aarch64_get_opcode@@Base+0x282c>  // b.none
   4cfdc:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4cfe0:	mov	x1, #0x12                  	// #18
   4cfe4:	ldr	w0, [x0, #1624]
   4cfe8:	mul	x0, x0, x1
   4cfec:	adrp	x1, 5f000 <fields@@Base+0x65a8>
   4cff0:	add	x1, x1, #0xc8e
   4cff4:	add	x0, x0, w24, sxtw
   4cff8:	add	x0, x26, x0, lsl #3
   4cffc:	ldr	x2, [x0, #3712]
   4d000:	mov	x0, x20
   4d004:	blr	x19
   4d008:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d00c:	ldr	w2, [sp, #296]
   4d010:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d014:	ldr	w3, [sp, #300]
   4d018:	add	x1, x1, #0xc79
   4d01c:	mov	x0, x20
   4d020:	blr	x19
   4d024:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d028:	ldr	w0, [sp, #280]
   4d02c:	cbnz	w0, 4d04c <aarch64_get_opcode@@Base+0x2c78>
   4d030:	ldr	x0, [sp, #264]
   4d034:	cbnz	x0, 4d158 <aarch64_get_opcode@@Base+0x2d84>
   4d038:	ldr	x3, [sp, #128]
   4d03c:	ldr	x2, [sp, #192]
   4d040:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d044:	add	x1, x1, #0xcf2
   4d048:	b	4d068 <aarch64_get_opcode@@Base+0x2c94>
   4d04c:	ldr	w0, [sp, #148]
   4d050:	cmp	w0, #0xb
   4d054:	b.gt	4d074 <aarch64_get_opcode@@Base+0x2ca0>
   4d058:	ldr	x3, [sp, #216]
   4d05c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d060:	add	x1, x1, #0xca6
   4d064:	mov	x2, x3
   4d068:	mov	x0, x20
   4d06c:	blr	x19
   4d070:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d074:	ldr	w0, [sp, #148]
   4d078:	cmp	w0, #0xd
   4d07c:	b.le	4d164 <aarch64_get_opcode@@Base+0x2d90>
   4d080:	cmp	w0, #0xe
   4d084:	ldr	w0, [sp, #224]
   4d088:	b.ne	4d0f0 <aarch64_get_opcode@@Base+0x2d1c>  // b.any
   4d08c:	cbz	w0, 4d0dc <aarch64_get_opcode@@Base+0x2d08>
   4d090:	mov	w0, #0x7                   	// #7
   4d094:	mov	x2, #0x0                   	// #0
   4d098:	mov	x3, #0x0                   	// #0
   4d09c:	mov	x4, #0xff                  	// #255
   4d0a0:	ldr	w1, [sp, #104]
   4d0a4:	asr	w1, w1, w0
   4d0a8:	tst	x1, #0x1
   4d0ac:	csel	x1, x4, xzr, ne  // ne = any
   4d0b0:	cmp	w0, #0x3
   4d0b4:	b.gt	4d0d4 <aarch64_get_opcode@@Base+0x2d00>
   4d0b8:	orr	x3, x1, x3, lsl #8
   4d0bc:	sub	w0, w0, #0x1
   4d0c0:	cmn	w0, #0x1
   4d0c4:	b.ne	4d0a0 <aarch64_get_opcode@@Base+0x2ccc>  // b.any
   4d0c8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d0cc:	add	x1, x1, #0xd2c
   4d0d0:	b	4d068 <aarch64_get_opcode@@Base+0x2c94>
   4d0d4:	orr	x2, x1, x2, lsl #8
   4d0d8:	b	4d0bc <aarch64_get_opcode@@Base+0x2ce8>
   4d0dc:	ldr	x3, [sp, #120]
   4d0e0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d0e4:	add	x1, x1, #0xcb5
   4d0e8:	mov	x2, x3
   4d0ec:	b	4d068 <aarch64_get_opcode@@Base+0x2c94>
   4d0f0:	cbnz	w0, 4d138 <aarch64_get_opcode@@Base+0x2d64>
   4d0f4:	ldrb	w0, [sp, #252]
   4d0f8:	add	x2, sp, #0x178
   4d0fc:	strb	w0, [sp, #370]
   4d100:	add	x1, sp, #0x170
   4d104:	ldrb	w0, [sp, #256]
   4d108:	strb	w0, [sp, #371]
   4d10c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   4d110:	strh	wzr, [sp, #368]
   4d114:	ldr	x0, [x0, #3864]
   4d118:	bl	35920 <floatformat_to_double@plt>
   4d11c:	ldr	x2, [sp, #208]
   4d120:	mov	x0, x20
   4d124:	ldr	d0, [sp, #376]
   4d128:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d12c:	add	x1, x1, #0xcc4
   4d130:	blr	x19
   4d134:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d138:	ldr	w2, [sp, #104]
   4d13c:	mov	x0, x20
   4d140:	mov	w4, #0x1                   	// #1
   4d144:	mov	w3, #0xf                   	// #15
   4d148:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d14c:	add	x1, x1, #0xcd4
   4d150:	blr	x19
   4d154:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d158:	ldr	x3, [sp, #128]
   4d15c:	ldr	x2, [sp, #288]
   4d160:	b	4d040 <aarch64_get_opcode@@Base+0x2c6c>
   4d164:	ldr	x3, [sp, #192]
   4d168:	mov	x2, x3
   4d16c:	b	4d040 <aarch64_get_opcode@@Base+0x2c6c>
   4d170:	cbnz	w28, 4d18c <aarch64_get_opcode@@Base+0x2db8>
   4d174:	ldr	w2, [sp, #144]
   4d178:	mov	x0, x20
   4d17c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d180:	add	x1, x1, #0xaf5
   4d184:	blr	x19
   4d188:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d18c:	ldr	w0, [sp, #172]
   4d190:	cmp	w0, #0x1f
   4d194:	b.ls	4d1ac <aarch64_get_opcode@@Base+0x2dd8>  // b.plast
   4d198:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d19c:	ldr	w2, [sp, #144]
   4d1a0:	mov	x3, x0
   4d1a4:	add	x1, x1, #0xd01
   4d1a8:	b	4d01c <aarch64_get_opcode@@Base+0x2c48>
   4d1ac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d1b0:	ldr	w2, [sp, #144]
   4d1b4:	ldr	w3, [sp, #172]
   4d1b8:	add	x1, x1, #0xb14
   4d1bc:	b	4d01c <aarch64_get_opcode@@Base+0x2c48>
   4d1c0:	add	x2, sp, #0x178
   4d1c4:	mov	x0, x22
   4d1c8:	add	x3, sp, #0x170
   4d1cc:	mov	x1, x21
   4d1d0:	bl	4aea8 <aarch64_get_opcode@@Base+0xad4>
   4d1d4:	ldrb	w2, [x0]
   4d1d8:	mov	x22, x0
   4d1dc:	cmp	w2, #0x65
   4d1e0:	b.hi	4d254 <aarch64_get_opcode@@Base+0x2e80>  // b.pmore
   4d1e4:	cmp	w2, #0x50
   4d1e8:	b.hi	4d22c <aarch64_get_opcode@@Base+0x2e58>  // b.pmore
   4d1ec:	cmp	w2, #0x3f
   4d1f0:	b.eq	4d37c <aarch64_get_opcode@@Base+0x2fa8>  // b.none
   4d1f4:	cmp	w2, #0x44
   4d1f8:	b.eq	4d334 <aarch64_get_opcode@@Base+0x2f60>  // b.none
   4d1fc:	cmp	w2, #0x27
   4d200:	b.ne	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.any
   4d204:	ldr	w1, [sp, #368]
   4d208:	add	x27, x0, #0x1
   4d20c:	mov	x0, #0x1                   	// #1
   4d210:	lsl	x0, x0, x1
   4d214:	sub	x0, x0, #0x1
   4d218:	ldr	x1, [sp, #376]
   4d21c:	cmp	x0, x1
   4d220:	b.eq	4d370 <aarch64_get_opcode@@Base+0x2f9c>  // b.none
   4d224:	mov	x22, x27
   4d228:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d22c:	sub	w1, w2, #0x51
   4d230:	cmp	w1, #0x14
   4d234:	b.hi	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.pmore
   4d238:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4d23c:	add	x27, x22, #0x1
   4d240:	add	x0, x0, #0xee0
   4d244:	ldrh	w0, [x0, w1, uxtw #1]
   4d248:	adr	x1, 4d254 <aarch64_get_opcode@@Base+0x2e80>
   4d24c:	add	x0, x1, w0, sxth #2
   4d250:	br	x0
   4d254:	cmp	w2, #0x72
   4d258:	b.ne	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.any
   4d25c:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4d260:	mov	x2, #0x12                  	// #18
   4d264:	ldr	x1, [sp, #376]
   4d268:	ldr	w0, [x0, #1624]
   4d26c:	madd	x0, x0, x2, x1
   4d270:	add	x0, x26, x0, lsl #3
   4d274:	ldr	x2, [x0, #3712]
   4d278:	b	4cbd8 <aarch64_get_opcode@@Base+0x2804>
   4d27c:	ldr	x2, [sp, #376]
   4d280:	mov	x0, x20
   4d284:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d288:	add	x1, x1, #0xaa7
   4d28c:	blr	x19
   4d290:	ldr	x0, [sp, #376]
   4d294:	str	x0, [sp, #176]
   4d298:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d29c:	ldr	w2, [sp, #368]
   4d2a0:	mov	x0, #0x1                   	// #1
   4d2a4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d2a8:	add	x1, x1, #0xaa7
   4d2ac:	lsl	x0, x0, x2
   4d2b0:	ldr	x2, [sp, #376]
   4d2b4:	sub	x2, x0, x2
   4d2b8:	b	4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4d2bc:	ldrb	w1, [x22, #1]
   4d2c0:	sub	w2, w2, #0x53
   4d2c4:	mov	w0, #0x8                   	// #8
   4d2c8:	lsl	w2, w0, w2
   4d2cc:	sub	w0, w1, #0x30
   4d2d0:	and	w3, w0, #0xff
   4d2d4:	cmp	w3, #0x9
   4d2d8:	b.ls	4d2f0 <aarch64_get_opcode@@Base+0x2f1c>  // b.plast
   4d2dc:	sub	w0, w1, #0x61
   4d2e0:	and	w0, w0, #0xff
   4d2e4:	cmp	w0, #0x5
   4d2e8:	b.hi	4cb64 <aarch64_get_opcode@@Base+0x2790>  // b.pmore
   4d2ec:	sub	w0, w1, #0x57
   4d2f0:	ldr	x1, [sp, #376]
   4d2f4:	asr	w3, w0, #2
   4d2f8:	lsl	w2, w2, w1
   4d2fc:	cmp	x1, w3, sxtw
   4d300:	b.cc	4d310 <aarch64_get_opcode@@Base+0x2f3c>  // b.lo, b.ul, b.last
   4d304:	and	x0, x0, #0x3
   4d308:	cmp	x1, x0
   4d30c:	b.ls	4d324 <aarch64_get_opcode@@Base+0x2f50>  // b.plast
   4d310:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d314:	add	x1, x1, #0xd19
   4d318:	mov	x0, x20
   4d31c:	blr	x19
   4d320:	b	4d224 <aarch64_get_opcode@@Base+0x2e50>
   4d324:	adrp	x1, 62000 <fields@@Base+0x95a8>
   4d328:	add	x1, x1, #0x23e
   4d32c:	b	4d318 <aarch64_get_opcode@@Base+0x2f44>
   4d330:	tbnz	w21, #6, 4d344 <aarch64_get_opcode@@Base+0x2f70>
   4d334:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d338:	add	x1, x1, #0xbae
   4d33c:	ldr	x2, [sp, #376]
   4d340:	b	4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4d344:	ldr	x0, [sp, #376]
   4d348:	lsr	x2, x0, #1
   4d34c:	tbz	w0, #0, 4d35c <aarch64_get_opcode@@Base+0x2f88>
   4d350:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d354:	add	x1, x1, #0xbb3
   4d358:	b	4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4d35c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d360:	add	x1, x1, #0xbc8
   4d364:	b	4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4d368:	ldr	x0, [sp, #376]
   4d36c:	cbnz	x0, 4d224 <aarch64_get_opcode@@Base+0x2e50>
   4d370:	ldrb	w2, [x22, #1]
   4d374:	ldr	x1, [sp, #160]
   4d378:	b	4d318 <aarch64_get_opcode@@Base+0x2f44>
   4d37c:	ldr	w0, [sp, #368]
   4d380:	mov	w27, #0x1                   	// #1
   4d384:	ldr	x1, [sp, #376]
   4d388:	lsl	w0, w27, w0
   4d38c:	sub	w0, w0, w1
   4d390:	ldr	x1, [sp, #160]
   4d394:	ldrb	w2, [x22, w0, sxtw]
   4d398:	mov	x0, x20
   4d39c:	blr	x19
   4d3a0:	ldr	w0, [sp, #368]
   4d3a4:	lsl	w27, w27, w0
   4d3a8:	add	x22, x22, w27, sxtw
   4d3ac:	b	4cc00 <aarch64_get_opcode@@Base+0x282c>
   4d3b0:	add	x1, x1, #0x30
   4d3b4:	b	4c7c4 <aarch64_get_opcode@@Base+0x23f0>
   4d3b8:	mov	w0, #0x1                   	// #1
   4d3bc:	str	w0, [sp, #116]
   4d3c0:	b	4cb1c <aarch64_get_opcode@@Base+0x2748>
   4d3c4:	stp	x29, x30, [sp, #-80]!
   4d3c8:	mov	x29, sp
   4d3cc:	str	x25, [sp, #64]
   4d3d0:	adrp	x25, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4d3d4:	stp	x19, x20, [sp, #16]
   4d3d8:	mov	x19, x0
   4d3dc:	mov	x20, x1
   4d3e0:	and	x1, x0, #0xf
   4d3e4:	ldr	w0, [x25, #1624]
   4d3e8:	stp	x23, x24, [sp, #48]
   4d3ec:	mov	x24, #0x12                  	// #18
   4d3f0:	mov	w23, w3
   4d3f4:	stp	x21, x22, [sp, #32]
   4d3f8:	adrp	x22, 82000 <aarch64_operands@@Base+0x1bc0>
   4d3fc:	madd	x0, x0, x24, x1
   4d400:	add	x22, x22, #0xb70
   4d404:	mov	x21, x2
   4d408:	add	x0, x0, #0x2
   4d40c:	add	x22, x22, #0xe70
   4d410:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d414:	add	x1, x1, #0xa63
   4d418:	ldr	x2, [x22, x0, lsl #3]
   4d41c:	mov	x0, x21
   4d420:	blr	x20
   4d424:	tst	x19, #0xff0
   4d428:	b.eq	4d56c <aarch64_get_opcode@@Base+0x3198>  // b.none
   4d42c:	tbnz	w19, #4, 4d4dc <aarch64_get_opcode@@Base+0x3108>
   4d430:	ubfx	w2, w19, #7, #5
   4d434:	ubfx	w1, w19, #5, #2
   4d438:	tst	w19, #0xf80
   4d43c:	b.ne	4d474 <aarch64_get_opcode@@Base+0x30a0>  // b.any
   4d440:	cmp	w1, #0x3
   4d444:	b.ne	4d470 <aarch64_get_opcode@@Base+0x309c>  // b.any
   4d448:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d44c:	add	x1, x1, #0xd3a
   4d450:	mov	x0, x21
   4d454:	mov	x16, x20
   4d458:	ldp	x19, x20, [sp, #16]
   4d45c:	ldp	x21, x22, [sp, #32]
   4d460:	ldp	x23, x24, [sp, #48]
   4d464:	ldr	x25, [sp, #64]
   4d468:	ldp	x29, x30, [sp], #80
   4d46c:	br	x16
   4d470:	mov	w2, #0x20                  	// #32
   4d474:	cbz	w23, 4d4b4 <aarch64_get_opcode@@Base+0x30e0>
   4d478:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4d47c:	add	x0, x0, #0xc70
   4d480:	add	x0, x0, #0x3d0
   4d484:	mov	w3, w2
   4d488:	mov	x16, x20
   4d48c:	ldp	x19, x20, [sp, #16]
   4d490:	ldr	x2, [x0, w1, sxtw #3]
   4d494:	mov	x0, x21
   4d498:	ldp	x21, x22, [sp, #32]
   4d49c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d4a0:	ldp	x23, x24, [sp, #48]
   4d4a4:	add	x1, x1, #0xd40
   4d4a8:	ldr	x25, [sp, #64]
   4d4ac:	ldp	x29, x30, [sp], #80
   4d4b0:	br	x16
   4d4b4:	mov	x0, x21
   4d4b8:	mov	x16, x20
   4d4bc:	ldp	x19, x20, [sp, #16]
   4d4c0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4d4c4:	ldp	x21, x22, [sp, #32]
   4d4c8:	add	x1, x1, #0x92
   4d4cc:	ldp	x23, x24, [sp, #48]
   4d4d0:	ldr	x25, [sp, #64]
   4d4d4:	ldp	x29, x30, [sp], #80
   4d4d8:	br	x16
   4d4dc:	tbz	w19, #7, 4d4ec <aarch64_get_opcode@@Base+0x3118>
   4d4e0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d4e4:	add	x1, x1, #0xd49
   4d4e8:	b	4d450 <aarch64_get_opcode@@Base+0x307c>
   4d4ec:	ldr	w0, [x25, #1624]
   4d4f0:	ubfx	x1, x19, #8, #4
   4d4f4:	madd	x0, x0, x24, x1
   4d4f8:	add	x0, x0, #0x2
   4d4fc:	ldr	x2, [x22, x0, lsl #3]
   4d500:	cbz	w23, 4d544 <aarch64_get_opcode@@Base+0x3170>
   4d504:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4d508:	add	x0, x0, #0xc70
   4d50c:	ubfx	x19, x19, #5, #2
   4d510:	add	x0, x0, #0x3d0
   4d514:	mov	x3, x2
   4d518:	mov	x16, x20
   4d51c:	ldp	x23, x24, [sp, #48]
   4d520:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d524:	ldr	x2, [x0, x19, lsl #3]
   4d528:	mov	x0, x21
   4d52c:	ldp	x19, x20, [sp, #16]
   4d530:	add	x1, x1, #0xd66
   4d534:	ldp	x21, x22, [sp, #32]
   4d538:	ldr	x25, [sp, #64]
   4d53c:	ldp	x29, x30, [sp], #80
   4d540:	br	x16
   4d544:	mov	x0, x21
   4d548:	mov	x16, x20
   4d54c:	ldp	x19, x20, [sp, #16]
   4d550:	adrp	x1, 5f000 <fields@@Base+0x65a8>
   4d554:	ldp	x21, x22, [sp, #32]
   4d558:	add	x1, x1, #0xc8e
   4d55c:	ldp	x23, x24, [sp, #48]
   4d560:	ldr	x25, [sp, #64]
   4d564:	ldp	x29, x30, [sp], #80
   4d568:	br	x16
   4d56c:	ldp	x19, x20, [sp, #16]
   4d570:	ldp	x21, x22, [sp, #32]
   4d574:	ldp	x23, x24, [sp, #48]
   4d578:	ldr	x25, [sp, #64]
   4d57c:	ldp	x29, x30, [sp], #80
   4d580:	ret
   4d584:	stp	x29, x30, [sp, #-80]!
   4d588:	mov	x29, sp
   4d58c:	stp	x19, x20, [sp, #16]
   4d590:	mov	x19, x2
   4d594:	stp	x21, x22, [sp, #32]
   4d598:	stp	x23, x24, [sp, #48]
   4d59c:	and	x23, x2, #0x800000
   4d5a0:	stp	x25, x26, [sp, #64]
   4d5a4:	mov	x25, x0
   4d5a8:	mov	x0, #0x20f0000             	// #34537472
   4d5ac:	and	x0, x2, x0
   4d5b0:	and	x26, x2, #0x1000000
   4d5b4:	cmp	x0, #0xf0, lsl #12
   4d5b8:	ldp	x20, x21, [x1]
   4d5bc:	b.ne	4d6c4 <aarch64_get_opcode@@Base+0x32f0>  // b.any
   4d5c0:	mov	x24, x1
   4d5c4:	and	x22, x2, #0xfff
   4d5c8:	mov	x0, x21
   4d5cc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d5d0:	add	x25, x25, #0x8
   4d5d4:	add	x1, x1, #0xd6e
   4d5d8:	blr	x20
   4d5dc:	cbz	x26, 4d694 <aarch64_get_opcode@@Base+0x32c0>
   4d5e0:	mov	x0, #0xa00000              	// #10485760
   4d5e4:	and	x0, x19, x0
   4d5e8:	cmp	x0, #0x800, lsl #12
   4d5ec:	b.ne	4d5f4 <aarch64_get_opcode@@Base+0x3220>  // b.any
   4d5f0:	cbz	x22, 4d620 <aarch64_get_opcode@@Base+0x324c>
   4d5f4:	cmp	x23, #0x0
   4d5f8:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d5fc:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d600:	add	x0, x0, #0x95f
   4d604:	add	x2, x2, #0x63
   4d608:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4d60c:	csel	x2, x2, x0, eq  // eq = none
   4d610:	mov	w3, w22
   4d614:	add	x1, x1, #0xb2
   4d618:	mov	x0, x21
   4d61c:	blr	x20
   4d620:	cbnz	x23, 4d628 <aarch64_get_opcode@@Base+0x3254>
   4d624:	neg	x22, x22
   4d628:	tst	x19, #0x200000
   4d62c:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d630:	adrp	x2, 5e000 <fields@@Base+0x55a8>
   4d634:	add	x0, x0, #0x95f
   4d638:	add	x2, x2, #0xe9f
   4d63c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d640:	csel	x2, x2, x0, ne  // ne = any
   4d644:	add	x25, x25, x22
   4d648:	add	x1, x1, #0xadb
   4d64c:	mov	x0, x21
   4d650:	blr	x20
   4d654:	mov	x0, x21
   4d658:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4d65c:	add	x1, x1, #0xaa
   4d660:	blr	x20
   4d664:	ldr	x2, [x24, #120]
   4d668:	mov	x1, x24
   4d66c:	mov	x0, x25
   4d670:	mov	x22, #0x0                   	// #0
   4d674:	blr	x2
   4d678:	mov	x0, x22
   4d67c:	ldp	x19, x20, [sp, #16]
   4d680:	ldp	x21, x22, [sp, #32]
   4d684:	ldp	x23, x24, [sp, #48]
   4d688:	ldp	x25, x26, [sp, #64]
   4d68c:	ldp	x29, x30, [sp], #80
   4d690:	ret
   4d694:	cmp	x23, #0x0
   4d698:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d69c:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d6a0:	add	x0, x0, #0x95f
   4d6a4:	add	x2, x2, #0x63
   4d6a8:	mov	w3, w22
   4d6ac:	csel	x2, x2, x0, eq  // eq = none
   4d6b0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4d6b4:	mov	x0, x21
   4d6b8:	add	x1, x1, #0xb1
   4d6bc:	blr	x20
   4d6c0:	b	4d654 <aarch64_get_opcode@@Base+0x3280>
   4d6c4:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4d6c8:	ldr	w1, [x0, #1624]
   4d6cc:	ubfx	x0, x2, #16, #4
   4d6d0:	mov	x2, #0x12                  	// #18
   4d6d4:	madd	x0, x1, x2, x0
   4d6d8:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4d6dc:	add	x1, x1, #0xb70
   4d6e0:	add	x0, x1, x0, lsl #3
   4d6e4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d6e8:	add	x1, x1, #0xc6e
   4d6ec:	ldr	x2, [x0, #3712]
   4d6f0:	mov	x0, x21
   4d6f4:	blr	x20
   4d6f8:	and	x0, x19, #0x2000000
   4d6fc:	cbz	x26, 4d7c0 <aarch64_get_opcode@@Base+0x33ec>
   4d700:	cbnz	x0, 4d77c <aarch64_get_opcode@@Base+0x33a8>
   4d704:	mov	x0, #0xa00000              	// #10485760
   4d708:	and	x0, x19, x0
   4d70c:	and	x22, x19, #0xfff
   4d710:	cmp	x0, #0x800, lsl #12
   4d714:	b.ne	4d71c <aarch64_get_opcode@@Base+0x3348>  // b.any
   4d718:	cbz	x22, 4d748 <aarch64_get_opcode@@Base+0x3374>
   4d71c:	cmp	x23, #0x0
   4d720:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d724:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d728:	add	x0, x0, #0x95f
   4d72c:	add	x2, x2, #0x63
   4d730:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4d734:	csel	x2, x2, x0, eq  // eq = none
   4d738:	mov	w3, w22
   4d73c:	add	x1, x1, #0xb2
   4d740:	mov	x0, x21
   4d744:	blr	x20
   4d748:	tst	x19, #0x200000
   4d74c:	adrp	x0, 5e000 <fields@@Base+0x55a8>
   4d750:	adrp	x2, 53000 <xexit@@Base+0x508>
   4d754:	add	x0, x0, #0xe9f
   4d758:	add	x2, x2, #0x95f
   4d75c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d760:	csel	x2, x2, x0, eq  // eq = none
   4d764:	add	x1, x1, #0xadb
   4d768:	mov	x0, x21
   4d76c:	blr	x20
   4d770:	cbnz	x23, 4d678 <aarch64_get_opcode@@Base+0x32a4>
   4d774:	neg	x22, x22
   4d778:	b	4d678 <aarch64_get_opcode@@Base+0x32a4>
   4d77c:	cmp	x23, #0x0
   4d780:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d784:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d788:	add	x0, x0, #0x95f
   4d78c:	add	x2, x2, #0x63
   4d790:	adrp	x1, 5f000 <fields@@Base+0x65a8>
   4d794:	csel	x2, x2, x0, eq  // eq = none
   4d798:	add	x1, x1, #0xc8e
   4d79c:	mov	x0, x21
   4d7a0:	blr	x20
   4d7a4:	mov	x2, x21
   4d7a8:	mov	x1, x20
   4d7ac:	mov	x0, x19
   4d7b0:	mov	w3, #0x1                   	// #1
   4d7b4:	mov	x22, #0x0                   	// #0
   4d7b8:	bl	4d3c4 <aarch64_get_opcode@@Base+0x2ff0>
   4d7bc:	b	4d748 <aarch64_get_opcode@@Base+0x3374>
   4d7c0:	cbnz	x0, 4d7f8 <aarch64_get_opcode@@Base+0x3424>
   4d7c4:	cmp	x23, #0x0
   4d7c8:	and	x22, x19, #0xfff
   4d7cc:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d7d0:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d7d4:	add	x0, x0, #0x95f
   4d7d8:	add	x2, x2, #0x63
   4d7dc:	csel	x2, x2, x0, eq  // eq = none
   4d7e0:	mov	w3, w22
   4d7e4:	mov	x0, x21
   4d7e8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4d7ec:	add	x1, x1, #0xb1
   4d7f0:	blr	x20
   4d7f4:	b	4d770 <aarch64_get_opcode@@Base+0x339c>
   4d7f8:	cmp	x23, #0x0
   4d7fc:	adrp	x0, 53000 <xexit@@Base+0x508>
   4d800:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   4d804:	add	x0, x0, #0x95f
   4d808:	add	x2, x2, #0x63
   4d80c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d810:	csel	x2, x2, x0, eq  // eq = none
   4d814:	add	x1, x1, #0xd72
   4d818:	mov	x0, x21
   4d81c:	blr	x20
   4d820:	mov	x2, x21
   4d824:	mov	x1, x20
   4d828:	mov	x0, x19
   4d82c:	mov	w3, #0x1                   	// #1
   4d830:	mov	x22, #0x0                   	// #0
   4d834:	bl	4d3c4 <aarch64_get_opcode@@Base+0x2ff0>
   4d838:	b	4d770 <aarch64_get_opcode@@Base+0x339c>
   4d83c:	ldr	x3, [x0, #48]
   4d840:	ldr	x0, [x0, #72]
   4d844:	ldr	x0, [x0, w1, sxtw #3]
   4d848:	cbz	x3, 4d858 <aarch64_get_opcode@@Base+0x3484>
   4d84c:	ldr	x1, [x0, #32]
   4d850:	cmp	x3, x1
   4d854:	b.ne	4d8b8 <aarch64_get_opcode@@Base+0x34e4>  // b.any
   4d858:	ldr	x1, [x0, #8]
   4d85c:	ldrb	w0, [x1]
   4d860:	cmp	w0, #0x24
   4d864:	b.ne	4d8b8 <aarch64_get_opcode@@Base+0x34e4>  // b.any
   4d868:	ldrb	w0, [x1, #1]
   4d86c:	cmp	w0, #0x61
   4d870:	b.eq	4d880 <aarch64_get_opcode@@Base+0x34ac>  // b.none
   4d874:	and	w3, w0, #0xffffffef
   4d878:	cmp	w3, #0x64
   4d87c:	b.ne	4d8b8 <aarch64_get_opcode@@Base+0x34e4>  // b.any
   4d880:	ldrb	w1, [x1, #2]
   4d884:	cmp	w1, #0x2e
   4d888:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   4d88c:	b.ne	4d8b8 <aarch64_get_opcode@@Base+0x34e4>  // b.any
   4d890:	cmp	w0, #0x61
   4d894:	b.eq	4d8b0 <aarch64_get_opcode@@Base+0x34dc>  // b.none
   4d898:	cmp	w0, #0x74
   4d89c:	cset	w0, ne  // ne = any
   4d8a0:	add	w0, w0, #0x1
   4d8a4:	str	w0, [x2]
   4d8a8:	mov	w0, #0x1                   	// #1
   4d8ac:	ret
   4d8b0:	mov	w0, #0x0                   	// #0
   4d8b4:	b	4d8a4 <aarch64_get_opcode@@Base+0x34d0>
   4d8b8:	mov	w0, #0x0                   	// #0
   4d8bc:	b	4d8ac <aarch64_get_opcode@@Base+0x34d8>
   4d8c0:	mov	x0, x1
   4d8c4:	ldr	w1, [x1, #172]
   4d8c8:	cmp	w1, #0x2
   4d8cc:	b.eq	4d8f8 <aarch64_get_opcode@@Base+0x3524>  // b.none
   4d8d0:	cmp	w1, #0x4
   4d8d4:	b.eq	4d908 <aarch64_get_opcode@@Base+0x3534>  // b.none
   4d8d8:	cmp	w1, #0x1
   4d8dc:	b.ne	4d918 <aarch64_get_opcode@@Base+0x3544>  // b.any
   4d8e0:	ldr	x3, [x0]
   4d8e4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d8e8:	add	x1, x1, #0xd78
   4d8ec:	ldr	x0, [x0, #8]
   4d8f0:	mov	x16, x3
   4d8f4:	br	x16
   4d8f8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d8fc:	add	x1, x1, #0xd86
   4d900:	ldr	x3, [x0]
   4d904:	b	4d8ec <aarch64_get_opcode@@Base+0x3518>
   4d908:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4d90c:	add	x1, x1, #0xd95
   4d910:	ldr	x3, [x0]
   4d914:	b	4d8ec <aarch64_get_opcode@@Base+0x3518>
   4d918:	stp	x29, x30, [sp, #-16]!
   4d91c:	mov	x29, sp
   4d920:	bl	356c0 <abort@plt>
   4d924:	sub	sp, sp, #0x210
   4d928:	stp	x29, x30, [sp]
   4d92c:	mov	x29, sp
   4d930:	stp	x23, x24, [sp, #48]
   4d934:	mov	x24, x0
   4d938:	lsr	x0, x1, #9
   4d93c:	stp	x25, x26, [sp, #64]
   4d940:	and	x26, x1, #0xf
   4d944:	ubfiz	x0, x0, #1, #3
   4d948:	orr	x0, x0, #0x1
   4d94c:	str	x0, [sp, #176]
   4d950:	lsr	x0, x1, #16
   4d954:	str	x0, [sp, #160]
   4d958:	ubfx	x0, x1, #20, #1
   4d95c:	str	x0, [sp, #152]
   4d960:	ubfx	x0, x1, #20, #2
   4d964:	str	x0, [sp, #136]
   4d968:	ubfx	x0, x1, #1, #3
   4d96c:	str	x0, [sp, #128]
   4d970:	ubfx	x0, x1, #20, #3
   4d974:	str	x0, [sp, #184]
   4d978:	lsr	x0, x1, #28
   4d97c:	str	x0, [sp, #280]
   4d980:	ubfx	x0, x1, #28, #1
   4d984:	str	x0, [sp, #144]
   4d988:	lsr	x0, x1, #12
   4d98c:	cmp	x26, #0xd
   4d990:	stp	x27, x28, [sp, #80]
   4d994:	ubfx	x27, x1, #16, #4
   4d998:	mov	w25, #0x1                   	// #1
   4d99c:	str	x0, [sp, #240]
   4d9a0:	ubfx	x0, x1, #12, #4
   4d9a4:	str	x0, [sp, #120]
   4d9a8:	cset	w0, eq  // eq = none
   4d9ac:	cmp	x27, #0xd
   4d9b0:	stp	x19, x20, [sp, #16]
   4d9b4:	csinc	w0, w0, wzr, ne  // ne = any
   4d9b8:	cmp	x26, #0xf
   4d9bc:	str	w0, [sp, #216]
   4d9c0:	cset	w0, eq  // eq = none
   4d9c4:	cmp	x27, #0xf
   4d9c8:	csinc	w0, w0, wzr, ne  // ne = any
   4d9cc:	str	w0, [sp, #224]
   4d9d0:	lsr	x0, x1, #21
   4d9d4:	str	x0, [sp, #200]
   4d9d8:	ubfx	x0, x1, #21, #1
   4d9dc:	str	x0, [sp, #112]
   4d9e0:	ubfx	x0, x1, #12, #1
   4d9e4:	str	x0, [sp, #168]
   4d9e8:	lsr	x0, x1, #5
   4d9ec:	str	x0, [sp, #208]
   4d9f0:	ubfx	x0, x1, #5, #1
   4d9f4:	stp	x21, x22, [sp, #32]
   4d9f8:	mov	x20, x1
   4d9fc:	str	x0, [sp, #232]
   4da00:	ubfx	x0, x1, #17, #3
   4da04:	ldp	x23, x22, [x24]
   4da08:	str	x0, [sp, #192]
   4da0c:	adrp	x0, 8b000 <aarch64_operands@@Base+0xabc0>
   4da10:	add	x28, x0, #0x240
   4da14:	add	x0, sp, #0x1fc
   4da18:	str	x0, [sp, #248]
   4da1c:	adrp	x0, 68000 <fields@@Base+0xf5a8>
   4da20:	add	x0, x0, #0xf0c
   4da24:	str	x0, [sp, #256]
   4da28:	ldp	x1, x0, [x28, #32]
   4da2c:	and	x0, x20, x0
   4da30:	cmp	x0, x1
   4da34:	b.ne	4f980 <aarch64_get_opcode@@Base+0x55ac>  // b.any
   4da38:	ldr	w0, [x28, #24]
   4da3c:	str	w0, [sp, #104]
   4da40:	mov	w1, w0
   4da44:	mov	x0, x20
   4da48:	bl	4a9bc <aarch64_get_opcode@@Base+0x5e8>
   4da4c:	cbnz	w0, 4f980 <aarch64_get_opcode@@Base+0x55ac>
   4da50:	mov	w0, #0x11                  	// #17
   4da54:	str	w0, [sp, #508]
   4da58:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4da5c:	ldr	w0, [x0, #1040]
   4da60:	cbz	w0, 4da9c <aarch64_get_opcode@@Base+0x36c8>
   4da64:	ldr	w0, [sp, #104]
   4da68:	cmp	w0, #0x41
   4da6c:	b.hi	4da8c <aarch64_get_opcode@@Base+0x36b8>  // b.pmore
   4da70:	cmp	w0, #0x3e
   4da74:	b.hi	4da9c <aarch64_get_opcode@@Base+0x36c8>  // b.pmore
   4da78:	cmp	w0, #0x3c
   4da7c:	b.eq	4dfe4 <aarch64_get_opcode@@Base+0x3c10>  // b.none
   4da80:	mov	w19, #0x0                   	// #0
   4da84:	mov	w21, #0x1                   	// #1
   4da88:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4da8c:	ldr	w0, [sp, #104]
   4da90:	sub	w0, w0, #0xc2
   4da94:	cmp	w0, #0x10
   4da98:	b.hi	4da80 <aarch64_get_opcode@@Base+0x36ac>  // b.pmore
   4da9c:	ldr	w0, [sp, #104]
   4daa0:	sub	w0, w0, #0x2
   4daa4:	cmp	w0, #0xcf
   4daa8:	b.hi	4dad0 <aarch64_get_opcode@@Base+0x36fc>  // b.pmore
   4daac:	ldr	x1, [sp, #256]
   4dab0:	ldrh	w0, [x1, w0, uxtw #1]
   4dab4:	adr	x1, 4dac0 <aarch64_get_opcode@@Base+0x36ec>
   4dab8:	add	x0, x1, w0, sxth #2
   4dabc:	br	x0
   4dac0:	ldr	x0, [sp, #168]
   4dac4:	cbnz	x0, 4dad0 <aarch64_get_opcode@@Base+0x36fc>
   4dac8:	ldr	x0, [sp, #232]
   4dacc:	cbnz	x0, 4e2ac <aarch64_get_opcode@@Base+0x3ed8>
   4dad0:	mov	w21, #0x0                   	// #0
   4dad4:	mov	w19, #0xc                   	// #12
   4dad8:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4dadc:	cmp	x26, #0xd
   4dae0:	mov	w19, #0xc                   	// #12
   4dae4:	mov	w0, #0x2                   	// #2
   4dae8:	b	4db00 <aarch64_get_opcode@@Base+0x372c>
   4daec:	cmp	x26, #0xd
   4daf0:	b.eq	4e2c4 <aarch64_get_opcode@@Base+0x3ef0>  // b.none
   4daf4:	cmp	x26, #0xf
   4daf8:	mov	w19, #0xc                   	// #12
   4dafc:	mov	w0, #0x3                   	// #3
   4db00:	csel	w19, w19, w0, ne  // ne = any
   4db04:	b	4e16c <aarch64_get_opcode@@Base+0x3d98>
   4db08:	cmp	x27, #0xd
   4db0c:	b.ne	4db20 <aarch64_get_opcode@@Base+0x374c>  // b.any
   4db10:	ldr	x0, [sp, #112]
   4db14:	cbz	x0, 4db28 <aarch64_get_opcode@@Base+0x3754>
   4db18:	mov	w19, #0x6                   	// #6
   4db1c:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4db20:	cmp	x27, #0xf
   4db24:	b.eq	4dee8 <aarch64_get_opcode@@Base+0x3b14>  // b.none
   4db28:	mov	w4, #0x16                  	// #22
   4db2c:	mov	w1, #0xd                   	// #13
   4db30:	mov	w3, w4
   4db34:	mov	x0, x20
   4db38:	mov	w2, #0xf                   	// #15
   4db3c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4db40:	cmp	x0, #0x7
   4db44:	mov	w19, #0xc                   	// #12
   4db48:	mov	w1, #0x5                   	// #5
   4db4c:	csel	w19, w19, w1, cc  // cc = lo, ul, last
   4db50:	csel	w21, wzr, w25, cc  // cc = lo, ul, last
   4db54:	ldr	w1, [sp, #104]
   4db58:	mov	x0, x20
   4db5c:	ldr	x2, [sp, #248]
   4db60:	bl	4abfc <aarch64_get_opcode@@Base+0x828>
   4db64:	str	w0, [sp, #276]
   4db68:	ldr	w0, [x28, #24]
   4db6c:	cmp	w0, #0x45
   4db70:	b.ne	4db84 <aarch64_get_opcode@@Base+0x37b0>  // b.any
   4db74:	ldr	x1, [sp, #128]
   4db78:	ldr	x0, [sp, #192]
   4db7c:	cmp	x0, x1
   4db80:	b.eq	4f980 <aarch64_get_opcode@@Base+0x55ac>  // b.none
   4db84:	ubfx	x0, x20, #23, #1
   4db88:	str	x0, [sp, #216]
   4db8c:	ldr	x0, [sp, #208]
   4db90:	lsr	x2, x20, #7
   4db94:	lsr	x6, x20, #6
   4db98:	ubfx	x5, x20, #7, #1
   4db9c:	and	x0, x0, #0x3
   4dba0:	str	x0, [sp, #136]
   4dba4:	ldr	x0, [sp, #200]
   4dba8:	ubfiz	x4, x6, #1, #1
   4dbac:	tst	x2, #0x1
   4dbb0:	asr	x25, x20, #19
   4dbb4:	and	x0, x0, #0x2
   4dbb8:	str	x0, [sp, #224]
   4dbbc:	ldr	x0, [sp, #136]
   4dbc0:	and	x25, x25, #0x8
   4dbc4:	ldr	x1, [sp, #224]
   4dbc8:	and	x6, x6, #0x3
   4dbcc:	ldr	x3, [x28, #48]
   4dbd0:	orr	x0, x0, x1
   4dbd4:	lsr	x1, x20, #27
   4dbd8:	str	x0, [sp, #456]
   4dbdc:	ubfx	x0, x20, #18, #2
   4dbe0:	and	x1, x1, #0x2
   4dbe4:	str	x0, [sp, #264]
   4dbe8:	and	x0, x2, #0x4
   4dbec:	orr	x1, x1, x0
   4dbf0:	ubfx	x0, x20, #8, #1
   4dbf4:	orr	x1, x1, x0
   4dbf8:	str	x1, [sp, #376]
   4dbfc:	ubfx	x1, x20, #4, #1
   4dc00:	add	w0, w0, #0x1
   4dc04:	orr	x1, x4, x1
   4dc08:	str	x1, [sp, #288]
   4dc0c:	ubfx	x1, x20, #7, #1
   4dc10:	str	x1, [sp, #352]
   4dc14:	asr	x1, x20, #4
   4dc18:	ubfx	x4, x20, #7, #1
   4dc1c:	and	x1, x1, #0x2
   4dc20:	lsl	w0, w0, #3
   4dc24:	orr	x1, x1, x4
   4dc28:	lsr	x7, x20, #8
   4dc2c:	orr	x4, x1, #0x4
   4dc30:	str	x4, [sp, #360]
   4dc34:	ubfx	x4, x20, #7, #1
   4dc38:	ubfx	x26, x20, #7, #2
   4dc3c:	orr	x4, x4, #0x2
   4dc40:	str	x4, [sp, #344]
   4dc44:	ubfiz	x4, x20, #1, #1
   4dc48:	orr	x4, x4, x5
   4dc4c:	orr	x5, x4, #0x4
   4dc50:	str	x5, [sp, #336]
   4dc54:	asr	x5, x20, #10
   4dc58:	and	x5, x5, #0x4
   4dc5c:	orr	x1, x5, x1
   4dc60:	str	x1, [sp, #328]
   4dc64:	orr	x1, x5, x4
   4dc68:	str	x1, [sp, #320]
   4dc6c:	and	x1, x2, #0x7
   4dc70:	str	x1, [sp, #368]
   4dc74:	ubfx	x1, x20, #8, #2
   4dc78:	mov	w5, #0x40                  	// #64
   4dc7c:	str	x1, [sp, #192]
   4dc80:	mov	w1, #0x30                  	// #48
   4dc84:	csel	w1, w5, w1, eq  // eq = none
   4dc88:	str	w1, [sp, #312]
   4dc8c:	ldr	x1, [sp, #240]
   4dc90:	tst	x20, #0x800000
   4dc94:	adrp	x2, 53000 <xexit@@Base+0x508>
   4dc98:	add	x2, x2, #0x95f
   4dc9c:	ubfiz	x4, x1, #2, #3
   4dca0:	ubfx	x1, x20, #13, #3
   4dca4:	orr	x25, x25, x1
   4dca8:	and	x1, x20, #0x7f
   4dcac:	str	x1, [sp, #176]
   4dcb0:	ubfiz	x1, x20, #2, #7
   4dcb4:	str	x1, [sp, #256]
   4dcb8:	ubfiz	x1, x20, #1, #7
   4dcbc:	str	x1, [sp, #248]
   4dcc0:	orr	w4, w4, w6
   4dcc4:	ldr	x1, [sp, #160]
   4dcc8:	and	x1, x1, #0x7
   4dccc:	str	x1, [sp, #240]
   4dcd0:	ubfx	x1, x20, #24, #1
   4dcd4:	str	x1, [sp, #304]
   4dcd8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4dcdc:	add	x1, x1, #0x63
   4dce0:	csel	x1, x2, x1, ne  // ne = any
   4dce4:	str	x1, [sp, #184]
   4dce8:	ldr	w1, [sp, #200]
   4dcec:	and	w1, w1, #0x1
   4dcf0:	str	w1, [sp, #316]
   4dcf4:	ldr	x1, [sp, #136]
   4dcf8:	lsr	x1, x1, #1
   4dcfc:	str	x1, [sp, #416]
   4dd00:	ldr	x1, [sp, #160]
   4dd04:	ldr	x2, [sp, #112]
   4dd08:	ubfiz	x1, x1, #1, #1
   4dd0c:	orr	x1, x1, x2
   4dd10:	str	x1, [sp, #424]
   4dd14:	ubfx	w1, w20, #8, #4
   4dd18:	str	w1, [sp, #200]
   4dd1c:	ldr	w1, [sp, #208]
   4dd20:	ldr	w2, [sp, #160]
   4dd24:	and	w1, w1, #0x1
   4dd28:	str	w1, [sp, #272]
   4dd2c:	ldr	w1, [sp, #280]
   4dd30:	ubfiz	w2, w2, #4, #3
   4dd34:	str	xzr, [sp, #160]
   4dd38:	ubfiz	w1, w1, #7, #1
   4dd3c:	orr	w1, w1, w2
   4dd40:	and	w2, w20, #0xf
   4dd44:	orr	w6, w1, w2
   4dd48:	str	w6, [sp, #128]
   4dd4c:	orr	w1, w1, w2
   4dd50:	str	x1, [sp, #152]
   4dd54:	ldr	x1, [sp, #128]
   4dd58:	and	w6, w7, #0x8
   4dd5c:	str	w6, [sp, #432]
   4dd60:	ubfiz	x2, x1, #19, #7
   4dd64:	ldr	w1, [sp, #128]
   4dd68:	lsl	w1, w1, #24
   4dd6c:	and	x1, x1, #0x80000000
   4dd70:	orr	x1, x1, x2
   4dd74:	ldr	x2, [sp, #128]
   4dd78:	tst	x2, #0x40
   4dd7c:	mov	w2, #0x3c                  	// #60
   4dd80:	csel	w2, w2, w5, ne  // ne = any
   4dd84:	cmp	w4, #0x0
   4dd88:	sbfiz	x2, x2, #24, #32
   4dd8c:	orr	x1, x2, x1
   4dd90:	str	x1, [sp, #408]
   4dd94:	ldr	x1, [sp, #152]
   4dd98:	lsl	x2, x1, x0
   4dd9c:	mov	x1, #0x1                   	// #1
   4dda0:	lsl	x0, x1, x0
   4dda4:	sub	x0, x0, #0x1
   4dda8:	orr	x0, x0, x2
   4ddac:	str	x0, [sp, #400]
   4ddb0:	ubfx	w0, w20, #9, #1
   4ddb4:	ldr	x1, [sp, #152]
   4ddb8:	lsl	w0, w0, #3
   4ddbc:	lsl	x0, x1, x0
   4ddc0:	str	x0, [sp, #392]
   4ddc4:	ubfx	w0, w20, #9, #2
   4ddc8:	lsl	w0, w0, #3
   4ddcc:	lsl	x0, x1, x0
   4ddd0:	str	x0, [sp, #384]
   4ddd4:	ubfiz	x0, x20, #3, #7
   4ddd8:	ubfx	w1, w20, #16, #6
   4dddc:	str	x0, [sp, #296]
   4dde0:	asr	x0, x20, #16
   4dde4:	str	w1, [sp, #436]
   4dde8:	and	w1, w0, #0x20
   4ddec:	and	w0, w0, #0x1f
   4ddf0:	str	w0, [sp, #440]
   4ddf4:	mov	w0, #0x20                  	// #32
   4ddf8:	csel	w0, w4, w0, ne  // ne = any
   4ddfc:	str	w1, [sp, #444]
   4de00:	ubfx	w1, w20, #16, #6
   4de04:	sub	w1, w5, w1
   4de08:	str	w0, [sp, #280]
   4de0c:	adrp	x0, 5d000 <fields@@Base+0x45a8>
   4de10:	add	x0, x0, #0xdca
   4de14:	str	w1, [sp, #452]
   4de18:	ubfx	w1, w20, #16, #6
   4de1c:	str	x0, [sp, #464]
   4de20:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   4de24:	add	x0, x0, #0xc70
   4de28:	sub	w1, w1, #0x20
   4de2c:	str	x0, [sp, #208]
   4de30:	add	x0, x0, #0x470
   4de34:	str	x0, [sp, #104]
   4de38:	str	w1, [sp, #448]
   4de3c:	ldrb	w2, [x3]
   4de40:	cbnz	w2, 4e2cc <aarch64_get_opcode@@Base+0x3ef8>
   4de44:	ldr	x0, [sp, #160]
   4de48:	add	x0, x0, #0x10
   4de4c:	cmp	x0, #0x30
   4de50:	b.ls	4de68 <aarch64_get_opcode@@Base+0x3a94>  // b.plast
   4de54:	ldr	x2, [sp, #160]
   4de58:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4de5c:	mov	x0, x22
   4de60:	add	x1, x1, #0xaab
   4de64:	blr	x23
   4de68:	cbz	w21, 4f6a4 <aarch64_get_opcode@@Base+0x52d0>
   4de6c:	ldp	x21, x22, [x24]
   4de70:	adrp	x2, 60000 <fields@@Base+0x75a8>
   4de74:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4de78:	add	x2, x2, #0x203
   4de7c:	add	x1, x1, #0xed4
   4de80:	mov	x0, x22
   4de84:	blr	x21
   4de88:	cmp	w19, #0xb
   4de8c:	b.hi	4f6a4 <aarch64_get_opcode@@Base+0x52d0>  // b.pmore
   4de90:	adrp	x0, 69000 <fields@@Base+0x105a8>
   4de94:	add	x0, x0, #0xac
   4de98:	ldrh	w0, [x0, w19, uxtw #1]
   4de9c:	adr	x1, 4dea8 <aarch64_get_opcode@@Base+0x3ad4>
   4dea0:	add	x0, x1, w0, sxth #2
   4dea4:	br	x0
   4dea8:	cmp	x27, #0xd
   4deac:	b.ne	4dee0 <aarch64_get_opcode@@Base+0x3b0c>  // b.any
   4deb0:	ldr	x0, [sp, #112]
   4deb4:	cbnz	x0, 4db18 <aarch64_get_opcode@@Base+0x3744>
   4deb8:	mov	w4, #0x16                  	// #22
   4debc:	mov	w1, #0xd                   	// #13
   4dec0:	mov	w3, w4
   4dec4:	mov	x0, x20
   4dec8:	mov	w2, #0xf                   	// #15
   4decc:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4ded0:	mov	w19, #0xc                   	// #12
   4ded4:	cmp	x0, #0x5
   4ded8:	mov	w1, #0x4                   	// #4
   4dedc:	b	4db4c <aarch64_get_opcode@@Base+0x3778>
   4dee0:	cmp	x27, #0xf
   4dee4:	b.ne	4deb8 <aarch64_get_opcode@@Base+0x3ae4>  // b.any
   4dee8:	mov	w19, #0x3                   	// #3
   4deec:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4def0:	cmp	x27, #0xd
   4def4:	b.ne	4df54 <aarch64_get_opcode@@Base+0x3b80>  // b.any
   4def8:	ldr	x0, [sp, #112]
   4defc:	mov	w19, #0x6                   	// #6
   4df00:	cmp	x0, #0x0
   4df04:	csel	w21, w25, wzr, ne  // ne = any
   4df08:	mov	w0, #0xc                   	// #12
   4df0c:	csel	w19, w19, w0, ne  // ne = any
   4df10:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4df14:	tbnz	w20, #0, 4e2b4 <aarch64_get_opcode@@Base+0x3ee0>
   4df18:	mov	w4, #0x16                  	// #22
   4df1c:	mov	w2, #0xf                   	// #15
   4df20:	mov	w3, w4
   4df24:	mov	w1, #0xd                   	// #13
   4df28:	mov	x0, x20
   4df2c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4df30:	mov	x19, x0
   4df34:	mov	w4, #0x5                   	// #5
   4df38:	mov	x0, x20
   4df3c:	mov	w3, w4
   4df40:	mov	w2, #0x3                   	// #3
   4df44:	mov	w1, #0x1                   	// #1
   4df48:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4df4c:	cmp	x19, x0
   4df50:	b.eq	4e2bc <aarch64_get_opcode@@Base+0x3ee8>  // b.none
   4df54:	cmp	x27, #0xf
   4df58:	b	4daf8 <aarch64_get_opcode@@Base+0x3724>
   4df5c:	mov	w4, #0x16                  	// #22
   4df60:	mov	w2, #0xf                   	// #15
   4df64:	mov	w3, w4
   4df68:	mov	w1, #0xd                   	// #13
   4df6c:	mov	x0, x20
   4df70:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4df74:	mov	w4, #0x7                   	// #7
   4df78:	mov	x21, x0
   4df7c:	mov	w3, w4
   4df80:	mov	w2, #0x13                  	// #19
   4df84:	mov	w1, #0x11                  	// #17
   4df88:	mov	x0, x20
   4df8c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4df90:	mov	w19, #0xc                   	// #12
   4df94:	cmp	x21, x0
   4df98:	mov	w1, #0x7                   	// #7
   4df9c:	b	4e148 <aarch64_get_opcode@@Base+0x3d74>
   4dfa0:	cmp	x27, #0xf
   4dfa4:	b.eq	4dee8 <aarch64_get_opcode@@Base+0x3b14>  // b.none
   4dfa8:	ands	x0, x20, #0x1
   4dfac:	mov	w19, #0x8                   	// #8
   4dfb0:	csel	w21, w25, wzr, ne  // ne = any
   4dfb4:	cmp	x0, #0x0
   4dfb8:	b	4df08 <aarch64_get_opcode@@Base+0x3b34>
   4dfbc:	ldr	w0, [sp, #216]
   4dfc0:	cbnz	w0, 4e2c4 <aarch64_get_opcode@@Base+0x3ef0>
   4dfc4:	ldr	w0, [sp, #224]
   4dfc8:	cbnz	w0, 4dee8 <aarch64_get_opcode@@Base+0x3b14>
   4dfcc:	cmp	x26, x27
   4dfd0:	mov	w19, #0x9                   	// #9
   4dfd4:	csel	w21, w25, wzr, eq  // eq = none
   4dfd8:	mov	w0, #0xc                   	// #12
   4dfdc:	csel	w19, w19, w0, eq  // eq = none
   4dfe0:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4dfe4:	ldr	x0, [sp, #120]
   4dfe8:	cmp	x0, #0xd
   4dfec:	b.eq	4e2c4 <aarch64_get_opcode@@Base+0x3ef0>  // b.none
   4dff0:	cmp	x0, #0xf
   4dff4:	mov	w19, #0x3                   	// #3
   4dff8:	csel	w21, w25, wzr, eq  // eq = none
   4dffc:	b	4dfd8 <aarch64_get_opcode@@Base+0x3c04>
   4e000:	ldr	x0, [sp, #136]
   4e004:	cmp	x0, #0x2
   4e008:	b.ne	4dad0 <aarch64_get_opcode@@Base+0x36fc>  // b.any
   4e00c:	mov	w4, #0x16                  	// #22
   4e010:	mov	w2, #0xf                   	// #15
   4e014:	mov	w3, w4
   4e018:	mov	w1, #0xd                   	// #13
   4e01c:	mov	x0, x20
   4e020:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e024:	mov	w4, #0x5                   	// #5
   4e028:	mov	x19, x0
   4e02c:	mov	w3, w4
   4e030:	mov	w2, #0x3                   	// #3
   4e034:	mov	w1, #0x1                   	// #1
   4e038:	mov	x0, x20
   4e03c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e040:	mov	x21, x0
   4e044:	mov	w4, #0x7                   	// #7
   4e048:	mov	w1, #0x11                  	// #17
   4e04c:	mov	w3, w4
   4e050:	mov	x0, x20
   4e054:	mov	w2, #0x13                  	// #19
   4e058:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e05c:	cmp	x19, x0
   4e060:	mov	w1, #0xb                   	// #11
   4e064:	ccmp	x19, x21, #0x4, ne  // ne = any
   4e068:	mov	w19, #0xc                   	// #12
   4e06c:	cset	w0, eq  // eq = none
   4e070:	cmp	w0, #0x0
   4e074:	csel	w19, w19, w1, eq  // eq = none
   4e078:	b	4e23c <aarch64_get_opcode@@Base+0x3e68>
   4e07c:	ldr	x0, [sp, #144]
   4e080:	cbz	x0, 4dad0 <aarch64_get_opcode@@Base+0x36fc>
   4e084:	mov	w4, #0x16                  	// #22
   4e088:	mov	w2, #0xf                   	// #15
   4e08c:	mov	w3, w4
   4e090:	mov	w1, #0xd                   	// #13
   4e094:	mov	x0, x20
   4e098:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e09c:	mov	w4, #0x5                   	// #5
   4e0a0:	mov	x19, x0
   4e0a4:	mov	w3, w4
   4e0a8:	mov	w2, #0x3                   	// #3
   4e0ac:	mov	w1, #0x1                   	// #1
   4e0b0:	mov	x0, x20
   4e0b4:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e0b8:	mov	x21, x0
   4e0bc:	mov	w4, #0x7                   	// #7
   4e0c0:	mov	w1, #0x11                  	// #17
   4e0c4:	mov	w3, w4
   4e0c8:	mov	x0, x20
   4e0cc:	mov	w2, #0x13                  	// #19
   4e0d0:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e0d4:	cmp	x19, x0
   4e0d8:	mov	w1, #0xa                   	// #10
   4e0dc:	ccmp	x19, x21, #0x4, ne  // ne = any
   4e0e0:	mov	w19, #0xc                   	// #12
   4e0e4:	cset	w0, eq  // eq = none
   4e0e8:	cmp	w0, #0x0
   4e0ec:	b	4e074 <aarch64_get_opcode@@Base+0x3ca0>
   4e0f0:	cmp	x26, #0xd
   4e0f4:	b.eq	4e2c4 <aarch64_get_opcode@@Base+0x3ef0>  // b.none
   4e0f8:	cmp	x26, #0xf
   4e0fc:	b.eq	4dee8 <aarch64_get_opcode@@Base+0x3b14>  // b.none
   4e100:	ldr	x0, [sp, #144]
   4e104:	cbz	x0, 4dad0 <aarch64_get_opcode@@Base+0x36fc>
   4e108:	mov	w4, #0x16                  	// #22
   4e10c:	mov	w2, #0xf                   	// #15
   4e110:	mov	w3, w4
   4e114:	mov	w1, #0xd                   	// #13
   4e118:	mov	x0, x20
   4e11c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e120:	mov	x21, x0
   4e124:	mov	w4, #0x7                   	// #7
   4e128:	mov	w1, #0x11                  	// #17
   4e12c:	mov	w3, w4
   4e130:	mov	x0, x20
   4e134:	mov	w2, #0x13                  	// #19
   4e138:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e13c:	cmp	x21, x0
   4e140:	mov	w19, #0xc                   	// #12
   4e144:	mov	w1, #0xa                   	// #10
   4e148:	csel	w19, w19, w1, ne  // ne = any
   4e14c:	b	4e16c <aarch64_get_opcode@@Base+0x3d98>
   4e150:	ldr	x0, [sp, #184]
   4e154:	mov	w19, #0xc                   	// #12
   4e158:	cmp	x0, #0x6
   4e15c:	mov	w0, #0x2                   	// #2
   4e160:	csel	w19, w19, w0, ne  // ne = any
   4e164:	ldr	x0, [sp, #184]
   4e168:	cmp	x0, #0x6
   4e16c:	csel	w21, wzr, w25, ne  // ne = any
   4e170:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4e174:	ldr	x0, [sp, #128]
   4e178:	mov	w19, #0x2                   	// #2
   4e17c:	cmp	x0, #0x6
   4e180:	csel	w21, w25, wzr, eq  // eq = none
   4e184:	b	4dfd8 <aarch64_get_opcode@@Base+0x3c04>
   4e188:	mov	w4, #0x16                  	// #22
   4e18c:	mov	w2, #0xf                   	// #15
   4e190:	mov	w3, w4
   4e194:	mov	w1, #0xd                   	// #13
   4e198:	mov	x0, x20
   4e19c:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e1a0:	mov	x19, x0
   4e1a4:	mov	w4, #0x5                   	// #5
   4e1a8:	mov	x0, x20
   4e1ac:	mov	w3, w4
   4e1b0:	mov	w2, #0x3                   	// #3
   4e1b4:	mov	w1, #0x1                   	// #1
   4e1b8:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e1bc:	cmp	x19, x0
   4e1c0:	b.ne	4dad0 <aarch64_get_opcode@@Base+0x36fc>  // b.any
   4e1c4:	ldr	x0, [sp, #136]
   4e1c8:	mov	w19, #0xc                   	// #12
   4e1cc:	cmp	x0, #0x2
   4e1d0:	mov	w0, #0xb                   	// #11
   4e1d4:	csel	w19, w19, w0, ne  // ne = any
   4e1d8:	ldr	x0, [sp, #136]
   4e1dc:	cmp	x0, #0x2
   4e1e0:	b	4e16c <aarch64_get_opcode@@Base+0x3d98>
   4e1e4:	mov	w4, #0x16                  	// #22
   4e1e8:	mov	w2, #0xf                   	// #15
   4e1ec:	mov	w3, w4
   4e1f0:	mov	w1, #0xd                   	// #13
   4e1f4:	mov	x0, x20
   4e1f8:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e1fc:	mov	x19, x0
   4e200:	mov	w4, #0x5                   	// #5
   4e204:	mov	x0, x20
   4e208:	mov	w3, w4
   4e20c:	mov	w2, #0x3                   	// #3
   4e210:	mov	w1, #0x1                   	// #1
   4e214:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e218:	cmp	x19, x0
   4e21c:	b.ne	4dad0 <aarch64_get_opcode@@Base+0x36fc>  // b.any
   4e220:	ldr	x0, [sp, #152]
   4e224:	mov	w19, #0xc                   	// #12
   4e228:	cmp	x0, #0x0
   4e22c:	mov	w0, #0xa                   	// #10
   4e230:	csel	w19, w19, w0, eq  // eq = none
   4e234:	ldr	x0, [sp, #152]
   4e238:	cmp	x0, #0x0
   4e23c:	csel	w21, wzr, w25, eq  // eq = none
   4e240:	b	4db54 <aarch64_get_opcode@@Base+0x3780>
   4e244:	ldr	x0, [sp, #152]
   4e248:	b	4e080 <aarch64_get_opcode@@Base+0x3cac>
   4e24c:	cmp	x27, #0xd
   4e250:	b	4dae0 <aarch64_get_opcode@@Base+0x370c>
   4e254:	mov	w4, #0x16                  	// #22
   4e258:	mov	w2, #0xf                   	// #15
   4e25c:	mov	w3, w4
   4e260:	mov	w1, #0xd                   	// #13
   4e264:	mov	x0, x20
   4e268:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e26c:	mov	w4, #0x6                   	// #6
   4e270:	mov	x21, x0
   4e274:	mov	w3, w4
   4e278:	mov	w2, #0x3                   	// #3
   4e27c:	mov	w1, #0x1                   	// #1
   4e280:	b	4df88 <aarch64_get_opcode@@Base+0x3bb4>
   4e284:	ldr	x0, [sp, #176]
   4e288:	cmp	x0, #0xd
   4e28c:	b.eq	4e2c4 <aarch64_get_opcode@@Base+0x3ef0>  // b.none
   4e290:	cmp	x0, #0xf
   4e294:	mov	w0, #0x3                   	// #3
   4e298:	mov	w19, #0xc                   	// #12
   4e29c:	csel	w19, w19, w0, ne  // ne = any
   4e2a0:	ldr	x0, [sp, #176]
   4e2a4:	cmp	x0, #0xf
   4e2a8:	b	4e16c <aarch64_get_opcode@@Base+0x3d98>
   4e2ac:	mov	w19, #0x1                   	// #1
   4e2b0:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4e2b4:	mov	w19, #0x8                   	// #8
   4e2b8:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4e2bc:	mov	w19, #0x7                   	// #7
   4e2c0:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4e2c4:	mov	w19, #0x2                   	// #2
   4e2c8:	b	4da84 <aarch64_get_opcode@@Base+0x36b0>
   4e2cc:	cmp	w2, #0x25
   4e2d0:	b.ne	4f680 <aarch64_get_opcode@@Base+0x52ac>  // b.any
   4e2d4:	add	x0, x3, #0x1
   4e2d8:	str	x0, [sp, #120]
   4e2dc:	ldrb	w0, [x3, #1]
   4e2e0:	cmp	w0, #0x77
   4e2e4:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4e2e8:	cmp	w0, #0x41
   4e2ec:	b.hi	4e358 <aarch64_get_opcode@@Base+0x3f84>  // b.pmore
   4e2f0:	cmp	w0, #0x25
   4e2f4:	b.eq	4e37c <aarch64_get_opcode@@Base+0x3fa8>  // b.none
   4e2f8:	sub	w0, w0, #0x30
   4e2fc:	and	w0, w0, #0xff
   4e300:	cmp	w0, #0x9
   4e304:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4e308:	ldr	x0, [sp, #120]
   4e30c:	add	x3, sp, #0x200
   4e310:	add	x2, sp, #0x208
   4e314:	mov	x1, x20
   4e318:	bl	4aea8 <aarch64_get_opcode@@Base+0xad4>
   4e31c:	str	x0, [sp, #120]
   4e320:	ldrb	w0, [x0]
   4e324:	cmp	w0, #0x49
   4e328:	b.hi	4ed80 <aarch64_get_opcode@@Base+0x49ac>  // b.pmore
   4e32c:	cmp	w0, #0x40
   4e330:	b.ls	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.plast
   4e334:	sub	w0, w0, #0x41
   4e338:	cmp	w0, #0x8
   4e33c:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4e340:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4e344:	add	x1, x1, #0xc4
   4e348:	ldrh	w0, [x1, w0, uxtw #1]
   4e34c:	adr	x1, 4e358 <aarch64_get_opcode@@Base+0x3f84>
   4e350:	add	x0, x1, w0, sxth #2
   4e354:	br	x0
   4e358:	sub	w0, w0, #0x42
   4e35c:	cmp	w0, #0x35
   4e360:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4e364:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4e368:	add	x1, x1, #0xd8
   4e36c:	ldrh	w0, [x1, w0, uxtw #1]
   4e370:	adr	x1, 4e37c <aarch64_get_opcode@@Base+0x3fa8>
   4e374:	add	x0, x1, w0, sxth #2
   4e378:	br	x0
   4e37c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e380:	mov	x0, x22
   4e384:	add	x1, x1, #0xa5f
   4e388:	blr	x23
   4e38c:	ldr	x0, [sp, #120]
   4e390:	add	x3, x0, #0x1
   4e394:	b	4de3c <aarch64_get_opcode@@Base+0x3a68>
   4e398:	ldr	x0, [sp, #216]
   4e39c:	cbnz	x0, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e3a0:	mov	x0, x22
   4e3a4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e3a8:	add	x1, x1, #0x63
   4e3ac:	blr	x23
   4e3b0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e3b4:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4e3b8:	ldr	w1, [x0, #1040]
   4e3bc:	cbz	w1, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e3c0:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   4e3c4:	add	x0, x0, #0xb70
   4e3c8:	ubfx	x1, x1, #4, #4
   4e3cc:	add	x0, x0, #0xde8
   4e3d0:	ldr	x2, [x0, x1, lsl #3]
   4e3d4:	mov	x0, x22
   4e3d8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e3dc:	add	x1, x1, #0xa63
   4e3e0:	blr	x23
   4e3e4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e3e8:	ldr	w1, [x28, #24]
   4e3ec:	ldp	x5, x0, [x24]
   4e3f0:	sub	w1, w1, #0x20
   4e3f4:	cmp	w1, #0x9
   4e3f8:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4e3fc:	adrp	x2, 69000 <fields@@Base+0x105a8>
   4e400:	add	x2, x2, #0x144
   4e404:	ldrb	w1, [x2, w1, uxtw]
   4e408:	adr	x2, 4e414 <aarch64_get_opcode@@Base+0x4040>
   4e40c:	add	x1, x2, w1, sxtb #2
   4e410:	br	x1
   4e414:	ldr	x4, [sp, #248]
   4e418:	ldr	x1, [sp, #240]
   4e41c:	b	4e428 <aarch64_get_opcode@@Base+0x4054>
   4e420:	ldr	x4, [sp, #248]
   4e424:	mov	x1, x27
   4e428:	ldr	x2, [sp, #304]
   4e42c:	cbz	x2, 4e494 <aarch64_get_opcode@@Base+0x40c0>
   4e430:	adrp	x2, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4e434:	mov	x3, #0x12                  	// #18
   4e438:	ldr	w2, [x2, #1624]
   4e43c:	madd	x1, x2, x3, x1
   4e440:	adrp	x2, 82000 <aarch64_operands@@Base+0x1bc0>
   4e444:	add	x2, x2, #0xb70
   4e448:	ldr	x3, [sp, #184]
   4e44c:	add	x1, x2, x1, lsl #3
   4e450:	ldr	x2, [x1, #3712]
   4e454:	ldr	x1, [sp, #112]
   4e458:	cbnz	x1, 4e484 <aarch64_get_opcode@@Base+0x40b0>
   4e45c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e460:	add	x1, x1, #0xdc1
   4e464:	blr	x5
   4e468:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e46c:	ldr	x4, [sp, #256]
   4e470:	b	4e424 <aarch64_get_opcode@@Base+0x4050>
   4e474:	ldr	x4, [sp, #176]
   4e478:	b	4e424 <aarch64_get_opcode@@Base+0x4050>
   4e47c:	ldr	x4, [sp, #176]
   4e480:	b	4e418 <aarch64_get_opcode@@Base+0x4044>
   4e484:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e488:	add	x1, x1, #0xdce
   4e48c:	blr	x5
   4e490:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e494:	ldr	w2, [sp, #316]
   4e498:	cbz	w2, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e49c:	adrp	x2, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4e4a0:	mov	x3, #0x12                  	// #18
   4e4a4:	ldr	w2, [x2, #1624]
   4e4a8:	madd	x1, x2, x3, x1
   4e4ac:	adrp	x2, 82000 <aarch64_operands@@Base+0x1bc0>
   4e4b0:	add	x2, x2, #0xb70
   4e4b4:	ldr	x3, [sp, #184]
   4e4b8:	add	x1, x2, x1, lsl #3
   4e4bc:	ldr	x2, [x1, #3712]
   4e4c0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e4c4:	add	x1, x1, #0xddc
   4e4c8:	blr	x5
   4e4cc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e4d0:	ldr	x0, [sp, #208]
   4e4d4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e4d8:	add	x1, x1, #0xa63
   4e4dc:	add	x0, x0, #0x3f0
   4e4e0:	ldr	x2, [x0, x25, lsl #3]
   4e4e4:	mov	x0, x22
   4e4e8:	blr	x23
   4e4ec:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e4f0:	ldr	w2, [sp, #280]
   4e4f4:	mov	x0, x22
   4e4f8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e4fc:	add	x1, x1, #0x199
   4e500:	blr	x23
   4e504:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e508:	ldr	w2, [sp, #312]
   4e50c:	mov	x0, x22
   4e510:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e514:	add	x1, x1, #0x199
   4e518:	blr	x23
   4e51c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e520:	ldr	w2, [x28, #24]
   4e524:	ldp	x3, x0, [x24]
   4e528:	sub	w2, w2, #0x1
   4e52c:	cmp	w2, #0xf
   4e530:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4e534:	adrp	x4, 69000 <fields@@Base+0x105a8>
   4e538:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e53c:	add	x4, x4, #0x150
   4e540:	ldrb	w2, [x4, w2, uxtw]
   4e544:	adr	x4, 4e550 <aarch64_get_opcode@@Base+0x417c>
   4e548:	add	x2, x4, w2, sxtb #2
   4e54c:	br	x2
   4e550:	ldr	x2, [sp, #104]
   4e554:	add	x1, x1, #0xa63
   4e558:	ldr	x4, [sp, #320]
   4e55c:	ldr	x2, [x2, x4, lsl #3]
   4e560:	blr	x3
   4e564:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e568:	ldr	x2, [sp, #104]
   4e56c:	add	x1, x1, #0xa63
   4e570:	ldr	x4, [sp, #328]
   4e574:	ldr	x2, [x2, x4, lsl #3]
   4e578:	blr	x3
   4e57c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e580:	ldr	x2, [sp, #104]
   4e584:	add	x1, x1, #0xa63
   4e588:	ldr	x4, [sp, #336]
   4e58c:	ldr	x2, [x2, x4, lsl #3]
   4e590:	blr	x3
   4e594:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e598:	ldr	x2, [sp, #104]
   4e59c:	add	x1, x1, #0xa63
   4e5a0:	ldr	x4, [sp, #352]
   4e5a4:	ldr	x2, [x2, x4, lsl #3]
   4e5a8:	blr	x3
   4e5ac:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e5b0:	ldr	x2, [sp, #104]
   4e5b4:	add	x1, x1, #0xa63
   4e5b8:	ldr	x4, [sp, #344]
   4e5bc:	ldr	x2, [x2, x4, lsl #3]
   4e5c0:	blr	x3
   4e5c4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e5c8:	ldr	x2, [sp, #104]
   4e5cc:	add	x1, x1, #0xa63
   4e5d0:	ldr	x4, [sp, #360]
   4e5d4:	ldr	x2, [x2, x4, lsl #3]
   4e5d8:	blr	x3
   4e5dc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e5e0:	tbz	w20, #0, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e5e4:	ldr	x2, [sp, #288]
   4e5e8:	mov	x0, x22
   4e5ec:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e5f0:	add	x1, x1, #0xde9
   4e5f4:	blr	x23
   4e5f8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e5fc:	ldr	w1, [x28, #24]
   4e600:	ldp	x2, x0, [x24]
   4e604:	cmp	w1, #0x39
   4e608:	b.eq	4e630 <aarch64_get_opcode@@Base+0x425c>  // b.none
   4e60c:	cmp	w1, #0x3a
   4e610:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4e614:	ldr	w3, [sp, #368]
   4e618:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4e61c:	add	x1, x1, #0x160
   4e620:	ldrh	w1, [x1, w3, uxtw #1]
   4e624:	adr	x3, 4e630 <aarch64_get_opcode@@Base+0x425c>
   4e628:	add	x1, x3, w1, sxth #2
   4e62c:	br	x1
   4e630:	ldr	x1, [sp, #192]
   4e634:	cmp	x1, #0x2
   4e638:	b.eq	4e66c <aarch64_get_opcode@@Base+0x4298>  // b.none
   4e63c:	cmp	x1, #0x3
   4e640:	b.eq	4e67c <aarch64_get_opcode@@Base+0x42a8>  // b.none
   4e644:	cmp	x1, #0x1
   4e648:	b.eq	4e65c <aarch64_get_opcode@@Base+0x4288>  // b.none
   4e64c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4e650:	add	x1, x1, #0x5ba
   4e654:	blr	x2
   4e658:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e65c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e660:	add	x1, x1, #0x5a7
   4e664:	blr	x2
   4e668:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e66c:	adrp	x1, 55000 <xexit@@Base+0x2508>
   4e670:	add	x1, x1, #0x723
   4e674:	blr	x2
   4e678:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e67c:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4e680:	add	x1, x1, #0x135
   4e684:	blr	x2
   4e688:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e68c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e690:	add	x1, x1, #0x5a7
   4e694:	blr	x2
   4e698:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e69c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4e6a0:	add	x1, x1, #0xd63
   4e6a4:	blr	x2
   4e6a8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e6ac:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4e6b0:	add	x1, x1, #0x5ba
   4e6b4:	blr	x2
   4e6b8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e6bc:	adrp	x1, 55000 <xexit@@Base+0x2508>
   4e6c0:	add	x1, x1, #0x23d
   4e6c4:	blr	x2
   4e6c8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e6cc:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4e6d0:	add	x1, x1, #0x135
   4e6d4:	blr	x2
   4e6d8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e6dc:	adrp	x1, 55000 <xexit@@Base+0x2508>
   4e6e0:	add	x1, x1, #0x723
   4e6e4:	blr	x2
   4e6e8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e6ec:	ldr	w0, [x28, #24]
   4e6f0:	ldp	x5, x6, [x24]
   4e6f4:	sub	w0, w0, #0x36
   4e6f8:	cmp	w0, #0x3
   4e6fc:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4e700:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4e704:	add	x1, x1, #0x170
   4e708:	ldrb	w0, [x1, w0, uxtw]
   4e70c:	adr	x1, 4e718 <aarch64_get_opcode@@Base+0x4344>
   4e710:	add	x0, x1, w0, sxtb #2
   4e714:	br	x0
   4e718:	ldr	x0, [sp, #376]
   4e71c:	sub	x1, x0, #0x1
   4e720:	cmp	x1, #0x6
   4e724:	b.hi	4e748 <aarch64_get_opcode@@Base+0x4374>  // b.pmore
   4e728:	cmp	w1, #0x6
   4e72c:	b.hi	4e748 <aarch64_get_opcode@@Base+0x4374>  // b.pmore
   4e730:	adrp	x0, 69000 <fields@@Base+0x105a8>
   4e734:	add	x0, x0, #0x174
   4e738:	ldrb	w0, [x0, w1, uxtw]
   4e73c:	adr	x1, 4e748 <aarch64_get_opcode@@Base+0x4374>
   4e740:	add	x0, x1, w0, sxtb #2
   4e744:	br	x0
   4e748:	mov	x0, x6
   4e74c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e750:	add	x1, x1, #0xdf5
   4e754:	blr	x5
   4e758:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e75c:	mov	x0, x6
   4e760:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e764:	add	x1, x1, #0xdfd
   4e768:	blr	x5
   4e76c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e770:	mov	x0, x6
   4e774:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e778:	add	x1, x1, #0xe05
   4e77c:	blr	x5
   4e780:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e784:	mov	x0, x6
   4e788:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e78c:	add	x1, x1, #0xe0d
   4e790:	blr	x5
   4e794:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e798:	mov	x0, x6
   4e79c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e7a0:	add	x1, x1, #0xe15
   4e7a4:	blr	x5
   4e7a8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e7ac:	mov	x0, x6
   4e7b0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e7b4:	add	x1, x1, #0xe1d
   4e7b8:	blr	x5
   4e7bc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e7c0:	mov	x0, x6
   4e7c4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e7c8:	add	x1, x1, #0xe25
   4e7cc:	blr	x5
   4e7d0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e7d4:	mov	x0, x6
   4e7d8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e7dc:	add	x1, x1, #0xe2d
   4e7e0:	blr	x5
   4e7e4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e7e8:	ldr	x0, [sp, #264]
   4e7ec:	cmp	x0, #0x1
   4e7f0:	b.ne	4e85c <aarch64_get_opcode@@Base+0x4488>  // b.any
   4e7f4:	cmp	x26, #0x2
   4e7f8:	b.eq	4e834 <aarch64_get_opcode@@Base+0x4460>  // b.none
   4e7fc:	cmp	x26, #0x3
   4e800:	b.eq	4e848 <aarch64_get_opcode@@Base+0x4474>  // b.none
   4e804:	cmp	x26, #0x1
   4e808:	b.eq	4e820 <aarch64_get_opcode@@Base+0x444c>  // b.none
   4e80c:	mov	x0, x6
   4e810:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e814:	add	x1, x1, #0xdf5
   4e818:	blr	x5
   4e81c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e820:	mov	x0, x6
   4e824:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e828:	add	x1, x1, #0xe05
   4e82c:	blr	x5
   4e830:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e834:	mov	x0, x6
   4e838:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e83c:	add	x1, x1, #0xdfd
   4e840:	blr	x5
   4e844:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e848:	mov	x0, x6
   4e84c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e850:	add	x1, x1, #0xe0d
   4e854:	blr	x5
   4e858:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e85c:	ldr	x0, [sp, #264]
   4e860:	cmp	x0, #0x2
   4e864:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4e868:	cmp	x26, #0x2
   4e86c:	b.eq	4e8a8 <aarch64_get_opcode@@Base+0x44d4>  // b.none
   4e870:	cmp	x26, #0x3
   4e874:	b.eq	4e8bc <aarch64_get_opcode@@Base+0x44e8>  // b.none
   4e878:	cmp	x26, #0x1
   4e87c:	b.eq	4e894 <aarch64_get_opcode@@Base+0x44c0>  // b.none
   4e880:	mov	x0, x6
   4e884:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e888:	add	x1, x1, #0xe15
   4e88c:	blr	x5
   4e890:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e894:	mov	x0, x6
   4e898:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e89c:	add	x1, x1, #0xe25
   4e8a0:	blr	x5
   4e8a4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e8a8:	mov	x0, x6
   4e8ac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e8b0:	add	x1, x1, #0xe1d
   4e8b4:	blr	x5
   4e8b8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e8bc:	mov	x0, x6
   4e8c0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e8c4:	add	x1, x1, #0xe2d
   4e8c8:	blr	x5
   4e8cc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e8d0:	ldr	x0, [sp, #144]
   4e8d4:	cbnz	x0, 4e8ec <aarch64_get_opcode@@Base+0x4518>
   4e8d8:	mov	x0, x6
   4e8dc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e8e0:	add	x1, x1, #0xe35
   4e8e4:	blr	x5
   4e8e8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e8ec:	mov	x0, x6
   4e8f0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e8f4:	add	x1, x1, #0xe3d
   4e8f8:	blr	x5
   4e8fc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e900:	mov	w2, #0x7                   	// #7
   4e904:	mov	x0, x20
   4e908:	mov	w1, w2
   4e90c:	mov	w4, #0x13                  	// #19
   4e910:	mov	w3, #0x12                  	// #18
   4e914:	stp	x6, x5, [sp, #472]
   4e918:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4e91c:	sub	x0, x0, #0x2
   4e920:	cmp	x0, #0x3
   4e924:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4e928:	cmp	w0, #0x3
   4e92c:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4e930:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4e934:	add	x1, x1, #0x17c
   4e938:	ldp	x6, x5, [sp, #472]
   4e93c:	ldrb	w0, [x1, w0, uxtw]
   4e940:	adr	x1, 4e94c <aarch64_get_opcode@@Base+0x4578>
   4e944:	add	x0, x1, w0, sxtb #2
   4e948:	br	x0
   4e94c:	mov	x0, x6
   4e950:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e954:	add	x1, x1, #0xdfd
   4e958:	blr	x5
   4e95c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e960:	mov	x0, x6
   4e964:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e968:	add	x1, x1, #0xe0d
   4e96c:	blr	x5
   4e970:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e974:	mov	x0, x6
   4e978:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e97c:	add	x1, x1, #0xe1d
   4e980:	blr	x5
   4e984:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e988:	mov	x0, x6
   4e98c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e990:	add	x1, x1, #0xe2d
   4e994:	blr	x5
   4e998:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e99c:	ldr	w0, [x28, #24]
   4e9a0:	cmp	w0, #0x41
   4e9a4:	b.ne	4e9e0 <aarch64_get_opcode@@Base+0x460c>  // b.any
   4e9a8:	ldr	x0, [sp, #216]
   4e9ac:	cbnz	x0, 4e9cc <aarch64_get_opcode@@Base+0x45f8>
   4e9b0:	ldr	x0, [sp, #456]
   4e9b4:	cbz	x0, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e9b8:	mov	x0, x22
   4e9bc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e9c0:	add	x1, x1, #0xa64
   4e9c4:	blr	x23
   4e9c8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e9cc:	mov	x0, x22
   4e9d0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4e9d4:	add	x1, x1, #0x19b
   4e9d8:	blr	x23
   4e9dc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e9e0:	ldr	x0, [sp, #144]
   4e9e4:	cbnz	x0, 4e9fc <aarch64_get_opcode@@Base+0x4628>
   4e9e8:	mov	x0, x22
   4e9ec:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4e9f0:	add	x1, x1, #0xa64
   4e9f4:	blr	x23
   4e9f8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4e9fc:	mov	x0, x22
   4ea00:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4ea04:	add	x1, x1, #0x19b
   4ea08:	blr	x23
   4ea0c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ea10:	adrp	x1, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4ea14:	ldp	x2, x0, [x24]
   4ea18:	ldr	w1, [x1, #1052]
   4ea1c:	cmp	w1, #0x1
   4ea20:	b.ne	4ea34 <aarch64_get_opcode@@Base+0x4660>  // b.any
   4ea24:	adrp	x1, 59000 <fields@@Base+0x5a8>
   4ea28:	add	x1, x1, #0xe54
   4ea2c:	blr	x2
   4ea30:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ea34:	cmp	w1, #0x2
   4ea38:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4ea3c:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4ea40:	add	x1, x1, #0x88c
   4ea44:	blr	x2
   4ea48:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ea4c:	ldr	x0, [sp, #112]
   4ea50:	cbz	x0, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ea54:	mov	x0, x22
   4ea58:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   4ea5c:	add	x1, x1, #0xe9f
   4ea60:	blr	x23
   4ea64:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ea68:	ldp	x6, x7, [x24]
   4ea6c:	mov	w4, #0x16                  	// #22
   4ea70:	mov	w2, #0xf                   	// #15
   4ea74:	mov	w3, w4
   4ea78:	mov	x0, x20
   4ea7c:	mov	w1, #0xd                   	// #13
   4ea80:	stp	x6, x7, [sp, #472]
   4ea84:	bl	4a96c <aarch64_get_opcode@@Base+0x598>
   4ea88:	mov	x2, x0
   4ea8c:	ldr	w0, [x28, #24]
   4ea90:	sub	w0, w0, #0x1c
   4ea94:	cmp	w0, #0x3
   4ea98:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4ea9c:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4eaa0:	add	x1, x1, #0x180
   4eaa4:	ldp	x6, x7, [sp, #472]
   4eaa8:	ldrb	w0, [x1, w0, uxtw]
   4eaac:	adr	x1, 4eab8 <aarch64_get_opcode@@Base+0x46e4>
   4eab0:	add	x0, x1, w0, sxtb #2
   4eab4:	br	x0
   4eab8:	cmp	x2, #0x6
   4eabc:	b.hi	4ead8 <aarch64_get_opcode@@Base+0x4704>  // b.pmore
   4eac0:	add	x3, x2, #0x1
   4eac4:	mov	x0, x7
   4eac8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eacc:	add	x1, x1, #0xe45
   4ead0:	blr	x6
   4ead4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ead8:	mov	x0, x7
   4eadc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eae0:	add	x1, x1, #0xe52
   4eae4:	blr	x6
   4eae8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4eaec:	cmp	x2, #0x4
   4eaf0:	b.hi	4eb14 <aarch64_get_opcode@@Base+0x4740>  // b.pmore
   4eaf4:	add	x5, x2, #0x3
   4eaf8:	add	x4, x2, #0x2
   4eafc:	add	x3, x2, #0x1
   4eb00:	mov	x0, x7
   4eb04:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eb08:	add	x1, x1, #0xe65
   4eb0c:	blr	x6
   4eb10:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4eb14:	mov	x0, x7
   4eb18:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eb1c:	add	x1, x1, #0xe52
   4eb20:	blr	x6
   4eb24:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4eb28:	ldr	w0, [sp, #432]
   4eb2c:	ldp	x6, x5, [x24]
   4eb30:	cbz	w0, 4ebec <aarch64_get_opcode@@Base+0x4818>
   4eb34:	ldr	w0, [sp, #200]
   4eb38:	cmp	w0, #0xb
   4eb3c:	b.le	4ebfc <aarch64_get_opcode@@Base+0x4828>
   4eb40:	cmp	w0, #0xd
   4eb44:	b.le	4ec10 <aarch64_get_opcode@@Base+0x483c>
   4eb48:	cmp	w0, #0xe
   4eb4c:	ldr	w0, [sp, #272]
   4eb50:	b.ne	4ebc8 <aarch64_get_opcode@@Base+0x47f4>  // b.any
   4eb54:	cbz	w0, 4ec1c <aarch64_get_opcode@@Base+0x4848>
   4eb58:	mov	x2, #0x0                   	// #0
   4eb5c:	mov	x3, #0x0                   	// #0
   4eb60:	mov	w0, #0x7                   	// #7
   4eb64:	mov	x4, #0xff                  	// #255
   4eb68:	ldr	w1, [sp, #128]
   4eb6c:	asr	w1, w1, w0
   4eb70:	tst	x1, #0x1
   4eb74:	csel	x1, x4, xzr, ne  // ne = any
   4eb78:	cmp	w0, #0x3
   4eb7c:	b.gt	4ebc0 <aarch64_get_opcode@@Base+0x47ec>
   4eb80:	orr	x3, x1, x3, lsl #8
   4eb84:	sub	w0, w0, #0x1
   4eb88:	cmn	w0, #0x1
   4eb8c:	b.ne	4eb68 <aarch64_get_opcode@@Base+0x4794>  // b.any
   4eb90:	mov	w1, #0x0                   	// #0
   4eb94:	mov	w0, #0x40                  	// #64
   4eb98:	ldr	w4, [x28, #24]
   4eb9c:	sub	w4, w4, #0x3d
   4eba0:	cmp	w4, #0xa
   4eba4:	b.hi	4ec38 <aarch64_get_opcode@@Base+0x4864>  // b.pmore
   4eba8:	adrp	x7, 69000 <fields@@Base+0x105a8>
   4ebac:	add	x7, x7, #0x184
   4ebb0:	ldrh	w4, [x7, w4, uxtw #1]
   4ebb4:	adr	x7, 4ebc0 <aarch64_get_opcode@@Base+0x47ec>
   4ebb8:	add	x4, x7, w4, sxth #2
   4ebbc:	br	x4
   4ebc0:	orr	x2, x1, x2, lsl #8
   4ebc4:	b	4eb84 <aarch64_get_opcode@@Base+0x47b0>
   4ebc8:	cbz	w0, 4ec2c <aarch64_get_opcode@@Base+0x4858>
   4ebcc:	ldr	w2, [sp, #128]
   4ebd0:	mov	x0, x5
   4ebd4:	mov	w4, #0x1                   	// #1
   4ebd8:	mov	w3, #0xf                   	// #15
   4ebdc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ebe0:	add	x1, x1, #0xcd4
   4ebe4:	blr	x6
   4ebe8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ebec:	ldr	x3, [sp, #384]
   4ebf0:	mov	w1, #0x0                   	// #0
   4ebf4:	mov	w0, #0x20                  	// #32
   4ebf8:	b	4ec08 <aarch64_get_opcode@@Base+0x4834>
   4ebfc:	ldr	x3, [sp, #392]
   4ec00:	mov	w1, #0x0                   	// #0
   4ec04:	mov	w0, #0x10                  	// #16
   4ec08:	mov	x2, #0x0                   	// #0
   4ec0c:	b	4eb98 <aarch64_get_opcode@@Base+0x47c4>
   4ec10:	mov	w1, #0x0                   	// #0
   4ec14:	ldr	x3, [sp, #400]
   4ec18:	b	4ebf4 <aarch64_get_opcode@@Base+0x4820>
   4ec1c:	mov	w1, #0x0                   	// #0
   4ec20:	mov	w0, #0x8                   	// #8
   4ec24:	ldr	x3, [sp, #152]
   4ec28:	b	4ec08 <aarch64_get_opcode@@Base+0x4834>
   4ec2c:	mov	w1, #0x1                   	// #1
   4ec30:	ldr	x3, [sp, #408]
   4ec34:	b	4ebf4 <aarch64_get_opcode@@Base+0x4820>
   4ec38:	cmp	w0, #0x20
   4ec3c:	b.eq	4fa08 <aarch64_get_opcode@@Base+0x5634>  // b.none
   4ec40:	b.gt	4f9c4 <aarch64_get_opcode@@Base+0x55f0>
   4ec44:	cmp	w0, #0x8
   4ec48:	b.eq	4f9a4 <aarch64_get_opcode@@Base+0x55d0>  // b.none
   4ec4c:	cmp	w0, #0x10
   4ec50:	b.eq	4ec58 <aarch64_get_opcode@@Base+0x4884>  // b.none
   4ec54:	bl	356c0 <abort@plt>
   4ec58:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ec5c:	add	x1, x1, #0xca6
   4ec60:	mov	x2, x3
   4ec64:	mov	x0, x5
   4ec68:	blr	x6
   4ec6c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ec70:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ec74:	add	x1, x1, #0xda3
   4ec78:	b	4ec60 <aarch64_get_opcode@@Base+0x488c>
   4ec7c:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   4ec80:	add	x2, sp, #0x208
   4ec84:	add	x1, sp, #0x200
   4ec88:	stp	x3, x5, [sp, #472]
   4ec8c:	ldr	x0, [x0, #3864]
   4ec90:	str	x6, [sp, #488]
   4ec94:	str	w3, [sp, #512]
   4ec98:	bl	35920 <floatformat_to_double@plt>
   4ec9c:	ldp	x3, x5, [sp, #472]
   4eca0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eca4:	ldr	x6, [sp, #488]
   4eca8:	add	x1, x1, #0xcc4
   4ecac:	ldr	d0, [sp, #520]
   4ecb0:	mov	x2, x3
   4ecb4:	mov	x0, x5
   4ecb8:	blr	x6
   4ecbc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ecc0:	mov	x2, x3
   4ecc4:	b	4f9fc <aarch64_get_opcode@@Base+0x5628>
   4ecc8:	ldr	x1, [sp, #224]
   4eccc:	ldp	x4, x0, [x24]
   4ecd0:	cbnz	x1, 4ecf4 <aarch64_get_opcode@@Base+0x4920>
   4ecd4:	ldr	x1, [sp, #232]
   4ecd8:	cbnz	x1, 4ed1c <aarch64_get_opcode@@Base+0x4948>
   4ecdc:	ldr	x1, [sp, #136]
   4ece0:	cbz	x1, 4ed28 <aarch64_get_opcode@@Base+0x4954>
   4ece4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ece8:	add	x1, x1, #0xe7e
   4ecec:	blr	x4
   4ecf0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ecf4:	ldr	x1, [sp, #136]
   4ecf8:	mov	x3, #0x8                   	// #8
   4ecfc:	mov	x2, #0x20                  	// #32
   4ed00:	udiv	x2, x2, x3
   4ed04:	ldr	x3, [sp, #424]
   4ed08:	madd	x2, x2, x3, x1
   4ed0c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4ed10:	add	x1, x1, #0x105
   4ed14:	blr	x4
   4ed18:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ed1c:	mov	x3, #0x10                  	// #16
   4ed20:	ldr	x1, [sp, #416]
   4ed24:	b	4ecfc <aarch64_get_opcode@@Base+0x4928>
   4ed28:	mov	x1, #0x0                   	// #0
   4ed2c:	mov	x3, #0x20                  	// #32
   4ed30:	b	4ecfc <aarch64_get_opcode@@Base+0x4928>
   4ed34:	ldr	x0, [sp, #168]
   4ed38:	cbnz	x0, 4ed50 <aarch64_get_opcode@@Base+0x497c>
   4ed3c:	mov	x0, x22
   4ed40:	adrp	x1, 60000 <fields@@Base+0x75a8>
   4ed44:	add	x1, x1, #0x1e7
   4ed48:	blr	x23
   4ed4c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ed50:	mov	x0, x22
   4ed54:	adrp	x1, 59000 <fields@@Base+0x5a8>
   4ed58:	add	x1, x1, #0xe54
   4ed5c:	blr	x23
   4ed60:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ed64:	ldr	x0, [sp, #168]
   4ed68:	cbz	x0, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ed6c:	mov	x0, x22
   4ed70:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4ed74:	add	x1, x1, #0xd63
   4ed78:	blr	x23
   4ed7c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ed80:	sub	w0, w0, #0x51
   4ed84:	and	w1, w0, #0xff
   4ed88:	cmp	w1, #0x27
   4ed8c:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4ed90:	cmp	w0, #0x27
   4ed94:	b.hi	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.pmore
   4ed98:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4ed9c:	add	x1, x1, #0x19c
   4eda0:	ldrh	w0, [x1, w0, uxtw #1]
   4eda4:	adr	x1, 4edb0 <aarch64_get_opcode@@Base+0x49dc>
   4eda8:	add	x0, x1, w0, sxth #2
   4edac:	br	x0
   4edb0:	ldr	x1, [sp, #520]
   4edb4:	cmp	x1, #0xd
   4edb8:	b.eq	4f670 <aarch64_get_opcode@@Base+0x529c>  // b.none
   4edbc:	cmp	x1, #0xf
   4edc0:	b.ne	4edd8 <aarch64_get_opcode@@Base+0x4a04>  // b.any
   4edc4:	mov	x0, x22
   4edc8:	adrp	x1, 58000 <xexit@@Base+0x5508>
   4edcc:	add	x1, x1, #0x1d3
   4edd0:	blr	x23
   4edd4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4edd8:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4eddc:	mov	x2, #0x12                  	// #18
   4ede0:	ldr	w0, [x0, #1624]
   4ede4:	madd	x0, x0, x2, x1
   4ede8:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4edec:	add	x1, x1, #0xb70
   4edf0:	add	x0, x1, x0, lsl #3
   4edf4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4edf8:	add	x1, x1, #0xa63
   4edfc:	ldr	x2, [x0, #3712]
   4ee00:	mov	x0, x22
   4ee04:	blr	x23
   4ee08:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ee0c:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   4ee10:	add	x0, x0, #0xb70
   4ee14:	ldr	x1, [sp, #520]
   4ee18:	add	x0, x0, #0xde8
   4ee1c:	ldr	x2, [x0, x1, lsl #3]
   4ee20:	mov	x0, x22
   4ee24:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ee28:	add	x1, x1, #0xa63
   4ee2c:	blr	x23
   4ee30:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ee34:	ldr	x1, [sp, #520]
   4ee38:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   4ee3c:	add	x0, x0, #0xb70
   4ee40:	eor	x1, x1, #0x1
   4ee44:	add	x0, x0, #0xde8
   4ee48:	str	x1, [sp, #520]
   4ee4c:	ldr	x2, [x0, x1, lsl #3]
   4ee50:	mov	x0, x22
   4ee54:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ee58:	add	x1, x1, #0xa63
   4ee5c:	blr	x23
   4ee60:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ee64:	ldr	x1, [sp, #520]
   4ee68:	and	x0, x1, #0xfffffffffffffffd
   4ee6c:	cmp	x0, #0xd
   4ee70:	b.eq	4f678 <aarch64_get_opcode@@Base+0x52a4>  // b.none
   4ee74:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4ee78:	mov	x2, #0x12                  	// #18
   4ee7c:	ldr	w0, [x0, #1624]
   4ee80:	madd	x0, x0, x2, x1
   4ee84:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4ee88:	add	x1, x1, #0xb70
   4ee8c:	add	x0, x1, x0, lsl #3
   4ee90:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ee94:	add	x1, x1, #0xa63
   4ee98:	ldr	x2, [x0, #3712]
   4ee9c:	mov	x0, x22
   4eea0:	blr	x23
   4eea4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4eea8:	ldr	w2, [x28, #24]
   4eeac:	ldp	x3, x0, [x24]
   4eeb0:	sub	w2, w2, #0x1
   4eeb4:	cmp	w2, #0xc0
   4eeb8:	ldr	x1, [sp, #520]
   4eebc:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4eec0:	adrp	x4, 69000 <fields@@Base+0x105a8>
   4eec4:	add	x4, x4, #0x1ec
   4eec8:	ldrh	w2, [x4, w2, uxtw #1]
   4eecc:	adr	x4, 4eed8 <aarch64_get_opcode@@Base+0x4b04>
   4eed0:	add	x2, x4, w2, sxth #2
   4eed4:	br	x2
   4eed8:	cmp	x1, #0x3
   4eedc:	b.hi	4eefc <aarch64_get_opcode@@Base+0x4b28>  // b.pmore
   4eee0:	ldr	x2, [sp, #208]
   4eee4:	add	x2, x2, #0x4b0
   4eee8:	ldr	x2, [x2, x1, lsl #3]
   4eeec:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4eef0:	add	x1, x1, #0xa63
   4eef4:	blr	x3
   4eef8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4eefc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4ef00:	add	x1, x1, #0xe90
   4ef04:	blr	x3
   4ef08:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef0c:	cbnz	x1, 4ef20 <aarch64_get_opcode@@Base+0x4b4c>
   4ef10:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4ef14:	add	x1, x1, #0xc07
   4ef18:	blr	x3
   4ef1c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef20:	cmp	x1, #0x1
   4ef24:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4ef28:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4ef2c:	add	x1, x1, #0x13b
   4ef30:	blr	x3
   4ef34:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef38:	cbnz	x1, 4ef4c <aarch64_get_opcode@@Base+0x4b78>
   4ef3c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4ef40:	add	x1, x1, #0x13b
   4ef44:	blr	x3
   4ef48:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef4c:	cmp	x1, #0x1
   4ef50:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4ef54:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4ef58:	add	x1, x1, #0xc07
   4ef5c:	blr	x3
   4ef60:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef64:	cmp	x1, #0x1
   4ef68:	b.ne	4ef7c <aarch64_get_opcode@@Base+0x4ba8>  // b.any
   4ef6c:	adrp	x1, 53000 <xexit@@Base+0x508>
   4ef70:	add	x1, x1, #0x6e4
   4ef74:	blr	x3
   4ef78:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef7c:	cmp	x1, #0x2
   4ef80:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4ef84:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4ef88:	add	x1, x1, #0x13b
   4ef8c:	blr	x3
   4ef90:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4ef94:	cmp	x1, #0x1
   4ef98:	b.eq	4efb8 <aarch64_get_opcode@@Base+0x4be4>  // b.none
   4ef9c:	cmp	x1, #0x2
   4efa0:	b.eq	4efc8 <aarch64_get_opcode@@Base+0x4bf4>  // b.none
   4efa4:	cbnz	x1, 4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4efa8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4efac:	add	x1, x1, #0xc07
   4efb0:	blr	x3
   4efb4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4efb8:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4efbc:	add	x1, x1, #0x13b
   4efc0:	blr	x3
   4efc4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4efc8:	adrp	x1, 53000 <xexit@@Base+0x508>
   4efcc:	add	x1, x1, #0x6e4
   4efd0:	blr	x3
   4efd4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4efd8:	cmp	x1, #0xf
   4efdc:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4efe0:	cmp	w1, #0xf
   4efe4:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4efe8:	adrp	x2, 69000 <fields@@Base+0x105a8>
   4efec:	add	x2, x2, #0x370
   4eff0:	ldrh	w1, [x2, w1, uxtw #1]
   4eff4:	adr	x2, 4f000 <aarch64_get_opcode@@Base+0x4c2c>
   4eff8:	add	x1, x2, w1, sxth #2
   4effc:	br	x1
   4f000:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f004:	add	x1, x1, #0xc07
   4f008:	blr	x3
   4f00c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f010:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f014:	add	x1, x1, #0x13b
   4f018:	blr	x3
   4f01c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f020:	adrp	x1, 53000 <xexit@@Base+0x508>
   4f024:	add	x1, x1, #0x6e4
   4f028:	blr	x3
   4f02c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f030:	cmp	x1, #0x1e
   4f034:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f038:	cmp	w1, #0x1e
   4f03c:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f040:	adrp	x2, 69000 <fields@@Base+0x105a8>
   4f044:	add	x2, x2, #0x390
   4f048:	ldrh	w1, [x2, w1, uxtw #1]
   4f04c:	adr	x2, 4f058 <aarch64_get_opcode@@Base+0x4c84>
   4f050:	add	x1, x2, w1, sxth #2
   4f054:	br	x1
   4f058:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f05c:	add	x1, x1, #0xe9d
   4f060:	blr	x3
   4f064:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f068:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f06c:	add	x1, x1, #0xea1
   4f070:	blr	x3
   4f074:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f078:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f07c:	add	x1, x1, #0xea5
   4f080:	blr	x3
   4f084:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f088:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f08c:	add	x1, x1, #0xea8
   4f090:	blr	x3
   4f094:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f098:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f09c:	add	x1, x1, #0xe21
   4f0a0:	blr	x3
   4f0a4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f0a8:	cbnz	x1, 4f0bc <aarch64_get_opcode@@Base+0x4ce8>
   4f0ac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f0b0:	add	x1, x1, #0xeac
   4f0b4:	blr	x3
   4f0b8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f0bc:	cmp	x1, #0x1
   4f0c0:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f0c4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f0c8:	add	x1, x1, #0xeaf
   4f0cc:	blr	x3
   4f0d0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f0d4:	cmp	x1, #0xd
   4f0d8:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f0dc:	cmp	w1, #0xd
   4f0e0:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f0e4:	adrp	x2, 69000 <fields@@Base+0x105a8>
   4f0e8:	add	x2, x2, #0x3d0
   4f0ec:	ldrh	w1, [x2, w1, uxtw #1]
   4f0f0:	adr	x2, 4f0fc <aarch64_get_opcode@@Base+0x4d28>
   4f0f4:	add	x1, x2, w1, sxth #2
   4f0f8:	br	x1
   4f0fc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f100:	add	x1, x1, #0xc07
   4f104:	blr	x3
   4f108:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f10c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f110:	add	x1, x1, #0x13b
   4f114:	blr	x3
   4f118:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f11c:	sub	x1, x1, #0x1
   4f120:	cmp	x1, #0xa
   4f124:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f128:	cmp	w1, #0xa
   4f12c:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f130:	adrp	x2, 69000 <fields@@Base+0x105a8>
   4f134:	add	x2, x2, #0x3ec
   4f138:	ldrh	w1, [x2, w1, uxtw #1]
   4f13c:	adr	x2, 4f148 <aarch64_get_opcode@@Base+0x4d74>
   4f140:	add	x1, x2, w1, sxth #2
   4f144:	br	x1
   4f148:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f14c:	add	x1, x1, #0xc07
   4f150:	blr	x3
   4f154:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f158:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f15c:	add	x1, x1, #0x13b
   4f160:	blr	x3
   4f164:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f168:	cmp	x1, #0x1
   4f16c:	b.eq	4f18c <aarch64_get_opcode@@Base+0x4db8>  // b.none
   4f170:	sub	x1, x1, #0x2
   4f174:	cmp	x1, #0x1
   4f178:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f17c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f180:	add	x1, x1, #0xc07
   4f184:	blr	x3
   4f188:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f18c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f190:	add	x1, x1, #0x13b
   4f194:	blr	x3
   4f198:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f19c:	cmp	x1, #0x3
   4f1a0:	b.hi	4f1c0 <aarch64_get_opcode@@Base+0x4dec>  // b.pmore
   4f1a4:	cmp	x1, #0x1
   4f1a8:	b.hi	4f1dc <aarch64_get_opcode@@Base+0x4e08>  // b.pmore
   4f1ac:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f1b0:	adrp	x1, 53000 <xexit@@Base+0x508>
   4f1b4:	add	x1, x1, #0x6e4
   4f1b8:	blr	x3
   4f1bc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f1c0:	sub	x1, x1, #0x4
   4f1c4:	cmp	x1, #0x3
   4f1c8:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f1cc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f1d0:	add	x1, x1, #0xc07
   4f1d4:	blr	x3
   4f1d8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f1dc:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f1e0:	add	x1, x1, #0x13b
   4f1e4:	blr	x3
   4f1e8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f1ec:	ldr	x0, [sp, #520]
   4f1f0:	cmp	x0, #0x1
   4f1f4:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f1f8:	mov	x0, x22
   4f1fc:	adrp	x1, 66000 <fields@@Base+0xd5a8>
   4f200:	add	x1, x1, #0x205
   4f204:	blr	x23
   4f208:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f20c:	ldr	x0, [sp, #520]
   4f210:	cmp	x0, #0x1
   4f214:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f218:	mov	x0, x22
   4f21c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   4f220:	add	x1, x1, #0x5ba
   4f224:	blr	x23
   4f228:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f22c:	ldr	x0, [sp, #520]
   4f230:	mov	x2, #0x12                  	// #18
   4f234:	lsl	w0, w0, #1
   4f238:	orr	w1, w0, #0x1
   4f23c:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4f240:	ldr	w0, [x0, #1624]
   4f244:	madd	x0, x0, x2, x1
   4f248:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4f24c:	add	x1, x1, #0xb70
   4f250:	add	x0, x1, x0, lsl #3
   4f254:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f258:	add	x1, x1, #0xa63
   4f25c:	ldr	x2, [x0, #3712]
   4f260:	mov	x0, x22
   4f264:	blr	x23
   4f268:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f26c:	ldr	w0, [x28, #24]
   4f270:	sub	w0, w0, #0x2e
   4f274:	cmp	w0, #0x7
   4f278:	b.hi	4f2b4 <aarch64_get_opcode@@Base+0x4ee0>  // b.pmore
   4f27c:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4f280:	add	x1, x1, #0x404
   4f284:	ldrb	w0, [x1, w0, uxtw]
   4f288:	adr	x1, 4f294 <aarch64_get_opcode@@Base+0x4ec0>
   4f28c:	add	x0, x1, w0, sxtb #2
   4f290:	br	x0
   4f294:	ldr	x2, [sp, #256]
   4f298:	mov	x0, x22
   4f29c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4f2a0:	add	x1, x1, #0x105
   4f2a4:	blr	x23
   4f2a8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f2ac:	ldr	x2, [sp, #296]
   4f2b0:	b	4f298 <aarch64_get_opcode@@Base+0x4ec4>
   4f2b4:	ldr	x2, [sp, #176]
   4f2b8:	b	4f298 <aarch64_get_opcode@@Base+0x4ec4>
   4f2bc:	ldr	x0, [sp, #520]
   4f2c0:	mov	x2, #0x40                  	// #64
   4f2c4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4f2c8:	add	x1, x1, #0x105
   4f2cc:	sub	x2, x2, x0
   4f2d0:	mov	x0, x22
   4f2d4:	blr	x23
   4f2d8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f2dc:	ldr	x0, [sp, #520]
   4f2e0:	mov	x2, #0x12                  	// #18
   4f2e4:	lsl	w1, w0, #1
   4f2e8:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4f2ec:	ldr	w0, [x0, #1624]
   4f2f0:	madd	x0, x0, x2, x1
   4f2f4:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4f2f8:	add	x1, x1, #0xb70
   4f2fc:	add	x0, x1, x0, lsl #3
   4f300:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f304:	add	x1, x1, #0xa63
   4f308:	ldr	x2, [x0, #3712]
   4f30c:	mov	x0, x22
   4f310:	blr	x23
   4f314:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f318:	ldr	x1, [sp, #520]
   4f31c:	cmp	x1, #0x3
   4f320:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f324:	cmp	w1, #0x3
   4f328:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f32c:	adrp	x0, 69000 <fields@@Base+0x105a8>
   4f330:	add	x0, x0, #0x40c
   4f334:	ldrb	w0, [x0, w1, uxtw]
   4f338:	adr	x1, 4f344 <aarch64_get_opcode@@Base+0x4f70>
   4f33c:	add	x0, x1, w0, sxtb #2
   4f340:	br	x0
   4f344:	mov	x0, x22
   4f348:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f34c:	add	x1, x1, #0xf17
   4f350:	blr	x23
   4f354:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f358:	mov	x0, x22
   4f35c:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4f360:	add	x1, x1, #0xcb2
   4f364:	blr	x23
   4f368:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f36c:	mov	x0, x22
   4f370:	adrp	x1, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4f374:	add	x1, x1, #0xc8e
   4f378:	blr	x23
   4f37c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f380:	mov	x0, x22
   4f384:	adrp	x1, 53000 <xexit@@Base+0x508>
   4f388:	add	x1, x1, #0x6e4
   4f38c:	blr	x23
   4f390:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f394:	ldrsw	x3, [sp, #512]
   4f398:	ldp	x2, x0, [x24]
   4f39c:	cmp	x3, #0x1
   4f3a0:	ldr	x1, [sp, #520]
   4f3a4:	b.ne	4f3d4 <aarch64_get_opcode@@Base+0x5000>  // b.any
   4f3a8:	cbz	x1, 4f3c4 <aarch64_get_opcode@@Base+0x4ff0>
   4f3ac:	cmp	x1, #0x1
   4f3b0:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f3b4:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f3b8:	add	x1, x1, #0xcd5
   4f3bc:	blr	x2
   4f3c0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f3c4:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4f3c8:	add	x1, x1, #0x366
   4f3cc:	blr	x2
   4f3d0:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f3d4:	cmp	x3, #0x2
   4f3d8:	b.ne	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.any
   4f3dc:	cmp	x1, #0x3
   4f3e0:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f3e4:	cmp	w1, #0x3
   4f3e8:	b.hi	4e38c <aarch64_get_opcode@@Base+0x3fb8>  // b.pmore
   4f3ec:	adrp	x3, 69000 <fields@@Base+0x105a8>
   4f3f0:	add	x3, x3, #0x410
   4f3f4:	ldrb	w1, [x3, w1, uxtw]
   4f3f8:	adr	x3, 4f404 <aarch64_get_opcode@@Base+0x5030>
   4f3fc:	add	x1, x3, w1, sxtb #2
   4f400:	br	x1
   4f404:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f408:	add	x1, x1, #0x679
   4f40c:	blr	x2
   4f410:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f414:	adrp	x1, 68000 <fields@@Base+0xf5a8>
   4f418:	add	x1, x1, #0x366
   4f41c:	blr	x2
   4f420:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f424:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f428:	add	x1, x1, #0xeb3
   4f42c:	blr	x2
   4f430:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f434:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f438:	add	x1, x1, #0xcd5
   4f43c:	blr	x2
   4f440:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f444:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4f448:	mov	x2, #0x12                  	// #18
   4f44c:	ldr	x1, [sp, #520]
   4f450:	ldr	w0, [x0, #1624]
   4f454:	madd	x0, x0, x2, x1
   4f458:	adrp	x1, 82000 <aarch64_operands@@Base+0x1bc0>
   4f45c:	add	x1, x1, #0xb70
   4f460:	add	x0, x1, x0, lsl #3
   4f464:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f468:	add	x1, x1, #0xa63
   4f46c:	ldr	x2, [x0, #3712]
   4f470:	mov	x0, x22
   4f474:	blr	x23
   4f478:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f47c:	ldr	w2, [x28, #24]
   4f480:	mov	w1, #0x1                   	// #1
   4f484:	sub	w0, w2, #0x77
   4f488:	sub	w4, w2, #0x7e
   4f48c:	cmp	w0, #0x1
   4f490:	mov	x0, #0xf47                 	// #3911
   4f494:	lsr	x0, x0, x4
   4f498:	mvn	x0, x0
   4f49c:	cset	w3, ls  // ls = plast
   4f4a0:	and	w0, w0, w1
   4f4a4:	cmp	w4, #0xc
   4f4a8:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   4f4ac:	eor	w0, w0, w1
   4f4b0:	orr	w0, w3, w0
   4f4b4:	cbnz	w0, 4f4ec <aarch64_get_opcode@@Base+0x5118>
   4f4b8:	cmp	w2, #0x85
   4f4bc:	ldr	x0, [sp, #520]
   4f4c0:	b.ne	4f5dc <aarch64_get_opcode@@Base+0x5208>  // b.any
   4f4c4:	cmp	x0, #0x1
   4f4c8:	b.eq	4f598 <aarch64_get_opcode@@Base+0x51c4>  // b.none
   4f4cc:	cmp	x0, #0x10
   4f4d0:	b.eq	4f5ac <aarch64_get_opcode@@Base+0x51d8>  // b.none
   4f4d4:	cbnz	x0, 4f5b8 <aarch64_get_opcode@@Base+0x51e4>
   4f4d8:	mov	x0, x22
   4f4dc:	adrp	x1, 53000 <xexit@@Base+0x508>
   4f4e0:	add	x1, x1, #0x6e4
   4f4e4:	blr	x23
   4f4e8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f4ec:	and	w0, w2, #0xfffffffb
   4f4f0:	cmp	w0, #0x80
   4f4f4:	ccmp	w3, #0x0, #0x0, ne  // ne = any
   4f4f8:	ldp	x4, x5, [x24]
   4f4fc:	b.ne	4f508 <aarch64_get_opcode@@Base+0x5134>  // b.any
   4f500:	cmp	w2, #0x88
   4f504:	cset	w1, eq  // eq = none
   4f508:	cmp	w2, #0x84
   4f50c:	b.eq	4f53c <aarch64_get_opcode@@Base+0x5168>  // b.none
   4f510:	ldr	w0, [sp, #444]
   4f514:	cbz	w0, 4f55c <aarch64_get_opcode@@Base+0x5188>
   4f518:	cmp	w1, #0x0
   4f51c:	ldr	w0, [sp, #448]
   4f520:	ldr	w1, [sp, #452]
   4f524:	csel	w2, w0, w1, ne  // ne = any
   4f528:	mov	x0, x5
   4f52c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4f530:	add	x1, x1, #0x19a
   4f534:	blr	x4
   4f538:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f53c:	ldr	w0, [sp, #440]
   4f540:	tbz	w0, #4, 4f564 <aarch64_get_opcode@@Base+0x5190>
   4f544:	sub	w3, w0, #0x10
   4f548:	mov	w2, #0x20                  	// #32
   4f54c:	sub	w2, w2, w0
   4f550:	cmp	w1, #0x0
   4f554:	csel	w2, w2, w3, eq  // eq = none
   4f558:	b	4f528 <aarch64_get_opcode@@Base+0x5154>
   4f55c:	ldr	w0, [sp, #436]
   4f560:	b	4f540 <aarch64_get_opcode@@Base+0x516c>
   4f564:	and	w2, w0, #0x8
   4f568:	tbz	w0, #3, 4f578 <aarch64_get_opcode@@Base+0x51a4>
   4f56c:	sub	w3, w0, #0x8
   4f570:	mov	w2, #0x10                  	// #16
   4f574:	b	4f54c <aarch64_get_opcode@@Base+0x5178>
   4f578:	mov	x0, x24
   4f57c:	mov	w1, #0x1                   	// #1
   4f580:	stp	x5, x4, [sp, #472]
   4f584:	str	w2, [sp, #488]
   4f588:	bl	4a3f4 <aarch64_get_opcode@@Base+0x20>
   4f58c:	ldr	w2, [sp, #488]
   4f590:	ldp	x5, x4, [sp, #472]
   4f594:	b	4f528 <aarch64_get_opcode@@Base+0x5154>
   4f598:	mov	x0, x22
   4f59c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   4f5a0:	add	x1, x1, #0x13b
   4f5a4:	blr	x23
   4f5a8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f5ac:	mov	x0, x24
   4f5b0:	bl	4a3f4 <aarch64_get_opcode@@Base+0x20>
   4f5b4:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f5b8:	adrp	x3, 69000 <fields@@Base+0x105a8>
   4f5bc:	add	x3, x3, #0x57f
   4f5c0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f5c4:	adrp	x0, 54000 <xexit@@Base+0x1508>
   4f5c8:	add	x3, x3, #0x10
   4f5cc:	add	x1, x1, #0xeb7
   4f5d0:	add	x0, x0, #0x679
   4f5d4:	mov	w2, #0x2570                	// #9584
   4f5d8:	bl	35b10 <__assert_fail@plt>
   4f5dc:	cmp	w2, #0x83
   4f5e0:	b.ne	4f5f0 <aarch64_get_opcode@@Base+0x521c>  // b.any
   4f5e4:	cbnz	x0, 4f5f0 <aarch64_get_opcode@@Base+0x521c>
   4f5e8:	mov	x0, #0x20                  	// #32
   4f5ec:	str	x0, [sp, #520]
   4f5f0:	ldr	x2, [sp, #520]
   4f5f4:	mov	x0, x22
   4f5f8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f5fc:	add	x1, x1, #0xaa7
   4f600:	blr	x23
   4f604:	ldr	x0, [sp, #520]
   4f608:	str	x0, [sp, #160]
   4f60c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f610:	ldr	x2, [sp, #520]
   4f614:	mov	x0, x22
   4f618:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f61c:	add	x1, x1, #0xecf
   4f620:	blr	x23
   4f624:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f628:	ldr	x2, [sp, #520]
   4f62c:	tbz	w2, #3, 4f644 <aarch64_get_opcode@@Base+0x5270>
   4f630:	mov	x0, x22
   4f634:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f638:	add	x1, x1, #0xbb3
   4f63c:	blr	x23
   4f640:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f644:	mov	x0, x22
   4f648:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f64c:	add	x1, x1, #0xbc8
   4f650:	blr	x23
   4f654:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f658:	ldr	x2, [sp, #520]
   4f65c:	mov	x0, x22
   4f660:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f664:	add	x1, x1, #0xd9b
   4f668:	blr	x23
   4f66c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f670:	mov	w21, #0x1                   	// #1
   4f674:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f678:	mov	w21, #0x1                   	// #1
   4f67c:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f680:	ldr	x1, [sp, #464]
   4f684:	str	x3, [sp, #120]
   4f688:	mov	x0, x22
   4f68c:	blr	x23
   4f690:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f694:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f698:	add	x1, x1, #0xed9
   4f69c:	mov	x0, x22
   4f6a0:	blr	x21
   4f6a4:	ldr	w0, [sp, #276]
   4f6a8:	cbz	w0, 4f6b8 <aarch64_get_opcode@@Base+0x52e4>
   4f6ac:	ldr	w1, [sp, #508]
   4f6b0:	mov	x0, x24
   4f6b4:	bl	4a3f4 <aarch64_get_opcode@@Base+0x20>
   4f6b8:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4f6bc:	add	x3, x0, #0x410
   4f6c0:	add	x1, x3, #0x8
   4f6c4:	ldr	w2, [x3, #8]
   4f6c8:	cbnz	w2, 4f8cc <aarch64_get_opcode@@Base+0x54f8>
   4f6cc:	ldr	w1, [x0, #1040]
   4f6d0:	cbnz	w1, 4f794 <aarch64_get_opcode@@Base+0x53c0>
   4f6d4:	and	x1, x20, #0x7fe000
   4f6d8:	and	x1, x1, #0xffffffffffc0ffff
   4f6dc:	cbz	x1, 4f794 <aarch64_get_opcode@@Base+0x53c0>
   4f6e0:	mov	x1, #0xf50                 	// #3920
   4f6e4:	mov	x2, #0xf00                 	// #3840
   4f6e8:	movk	x1, #0xefb1, lsl #16
   4f6ec:	and	x1, x20, x1
   4f6f0:	movk	x2, #0xee31, lsl #16
   4f6f4:	cmp	x1, x2
   4f6f8:	b.ne	4f830 <aarch64_get_opcode@@Base+0x545c>  // b.any
   4f6fc:	mov	x1, #0x1001                	// #4097
   4f700:	and	x1, x20, x1
   4f704:	cmp	x1, #0x1
   4f708:	b.ne	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.any
   4f70c:	mov	x1, #0x1f51                	// #8017
   4f710:	mov	x2, #0xf00                 	// #3840
   4f714:	movk	x1, #0xff81, lsl #16
   4f718:	and	x1, x20, x1
   4f71c:	movk	x2, #0xfe01, lsl #16
   4f720:	cmp	x1, x2
   4f724:	b.eq	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.none
   4f728:	add	x2, x2, #0x1
   4f72c:	cmp	x1, x2
   4f730:	b.ne	4f740 <aarch64_get_opcode@@Base+0x536c>  // b.any
   4f734:	and	x1, x20, #0x300000
   4f738:	cmp	x1, #0x300, lsl #12
   4f73c:	b.ne	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.any
   4f740:	mov	x1, #0x1f50                	// #8016
   4f744:	mov	x2, #0x1f00                	// #7936
   4f748:	movk	x1, #0xff81, lsl #16
   4f74c:	and	x1, x20, x1
   4f750:	movk	x2, #0xfe01, lsl #16
   4f754:	cmp	x1, x2
   4f758:	b.eq	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.none
   4f75c:	mov	x1, #0xf50                 	// #3920
   4f760:	mov	x2, #0xf40                 	// #3904
   4f764:	movk	x1, #0xff81, lsl #16
   4f768:	and	x1, x20, x1
   4f76c:	movk	x2, #0xfe01, lsl #16
   4f770:	cmp	x1, x2
   4f774:	b.eq	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.none
   4f778:	mov	x1, #0x1fff                	// #8191
   4f77c:	movk	x1, #0xffbf, lsl #16
   4f780:	and	x20, x20, x1
   4f784:	mov	x1, #0xf4d                 	// #3917
   4f788:	movk	x1, #0xfe31, lsl #16
   4f78c:	cmp	x20, x1
   4f790:	b.eq	4f840 <aarch64_get_opcode@@Base+0x546c>  // b.none
   4f794:	mov	w0, #0x1                   	// #1
   4f798:	ldp	x29, x30, [sp]
   4f79c:	ldp	x19, x20, [sp, #16]
   4f7a0:	ldp	x21, x22, [sp, #32]
   4f7a4:	ldp	x23, x24, [sp, #48]
   4f7a8:	ldp	x25, x26, [sp, #64]
   4f7ac:	ldp	x27, x28, [sp, #80]
   4f7b0:	add	sp, sp, #0x210
   4f7b4:	ret
   4f7b8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7bc:	add	x1, x1, #0xef5
   4f7c0:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f7c4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7c8:	add	x1, x1, #0xf19
   4f7cc:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f7d0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7d4:	add	x1, x1, #0xf29
   4f7d8:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f7dc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7e0:	add	x1, x1, #0xf39
   4f7e4:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f7e8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7ec:	add	x1, x1, #0xf53
   4f7f0:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f7f4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f7f8:	add	x1, x1, #0xf6d
   4f7fc:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f800:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f804:	add	x1, x1, #0xf87
   4f808:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f80c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f810:	add	x1, x1, #0xfc3
   4f814:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f818:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f81c:	add	x1, x1, #0xfd8
   4f820:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f824:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4f828:	add	x1, x1, #0xd
   4f82c:	b	4f69c <aarch64_get_opcode@@Base+0x52c8>
   4f830:	mov	x2, #0xf40                 	// #3904
   4f834:	movk	x2, #0xee31, lsl #16
   4f838:	cmp	x1, x2
   4f83c:	b.ne	4f70c <aarch64_get_opcode@@Base+0x5338>  // b.any
   4f840:	add	x2, x0, #0x410
   4f844:	mov	x3, #0x100000001           	// #4294967297
   4f848:	add	x1, x2, #0x8
   4f84c:	str	x3, [x2, #8]
   4f850:	stp	x25, xzr, [x1, #8]
   4f854:	cbz	x25, 4f888 <aarch64_get_opcode@@Base+0x54b4>
   4f858:	cmp	x25, #0x8
   4f85c:	b.eq	4f8c4 <aarch64_get_opcode@@Base+0x54f0>  // b.none
   4f860:	and	x2, x25, #0x7
   4f864:	cmp	x2, #0x4
   4f868:	b.eq	4f8bc <aarch64_get_opcode@@Base+0x54e8>  // b.none
   4f86c:	and	x2, x25, #0x3
   4f870:	cmp	x2, #0x2
   4f874:	b.eq	4f8b4 <aarch64_get_opcode@@Base+0x54e0>  // b.none
   4f878:	tbz	w25, #0, 4f888 <aarch64_get_opcode@@Base+0x54b4>
   4f87c:	mov	x0, #0x4                   	// #4
   4f880:	str	x0, [x1, #24]
   4f884:	b	4f794 <aarch64_get_opcode@@Base+0x53c0>
   4f888:	add	x0, x0, #0x410
   4f88c:	adrp	x3, 69000 <fields@@Base+0x105a8>
   4f890:	add	x3, x3, #0x57f
   4f894:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f898:	add	x3, x3, #0x1f
   4f89c:	add	x1, x1, #0xeb7
   4f8a0:	mov	w2, #0x148f                	// #5263
   4f8a4:	str	xzr, [x0, #32]
   4f8a8:	adrp	x0, 5c000 <fields@@Base+0x35a8>
   4f8ac:	add	x0, x0, #0x37
   4f8b0:	b	4f5d8 <aarch64_get_opcode@@Base+0x5204>
   4f8b4:	mov	x0, #0x3                   	// #3
   4f8b8:	b	4f880 <aarch64_get_opcode@@Base+0x54ac>
   4f8bc:	mov	x0, #0x2                   	// #2
   4f8c0:	b	4f880 <aarch64_get_opcode@@Base+0x54ac>
   4f8c4:	mov	x0, #0x1                   	// #1
   4f8c8:	b	4f880 <aarch64_get_opcode@@Base+0x54ac>
   4f8cc:	cmp	w2, #0x1
   4f8d0:	b.ne	4f794 <aarch64_get_opcode@@Base+0x53c0>  // b.any
   4f8d4:	ldp	x2, x5, [x1, #16]
   4f8d8:	add	x4, x2, #0x1
   4f8dc:	str	x4, [x1, #16]
   4f8e0:	cmp	x4, x5
   4f8e4:	b.ne	4f8f8 <aarch64_get_opcode@@Base+0x5524>  // b.any
   4f8e8:	stp	xzr, xzr, [x1, #8]
   4f8ec:	str	xzr, [x3, #8]
   4f8f0:	str	xzr, [x1, #24]
   4f8f4:	b	4f794 <aarch64_get_opcode@@Base+0x53c0>
   4f8f8:	cmp	x2, #0x3
   4f8fc:	b.hi	4f968 <aarch64_get_opcode@@Base+0x5594>  // b.pmore
   4f900:	cmp	w2, #0x3
   4f904:	b.hi	4f968 <aarch64_get_opcode@@Base+0x5594>  // b.pmore
   4f908:	adrp	x1, 69000 <fields@@Base+0x105a8>
   4f90c:	add	x1, x1, #0x414
   4f910:	ldrb	w1, [x1, w2, uxtw]
   4f914:	adr	x2, 4f920 <aarch64_get_opcode@@Base+0x554c>
   4f918:	add	x1, x2, w1, sxtb #2
   4f91c:	br	x1
   4f920:	mov	x2, #0x8                   	// #8
   4f924:	add	x3, x0, #0x410
   4f928:	add	x3, x3, #0x8
   4f92c:	ldr	w1, [x3, #4]
   4f930:	ldr	x3, [x3, #8]
   4f934:	tst	x2, x3
   4f938:	b.eq	4f94c <aarch64_get_opcode@@Base+0x5578>  // b.none
   4f93c:	cmp	w1, #0x1
   4f940:	b.eq	4f978 <aarch64_get_opcode@@Base+0x55a4>  // b.none
   4f944:	cmp	w1, #0x2
   4f948:	cset	w1, eq  // eq = none
   4f94c:	add	x0, x0, #0x410
   4f950:	str	w1, [x0, #12]
   4f954:	b	4f794 <aarch64_get_opcode@@Base+0x53c0>
   4f958:	mov	x2, #0x4                   	// #4
   4f95c:	b	4f924 <aarch64_get_opcode@@Base+0x5550>
   4f960:	mov	x2, #0x2                   	// #2
   4f964:	b	4f924 <aarch64_get_opcode@@Base+0x5550>
   4f968:	mov	x2, #0x0                   	// #0
   4f96c:	b	4f924 <aarch64_get_opcode@@Base+0x5550>
   4f970:	mov	w1, #0x0                   	// #0
   4f974:	b	4f94c <aarch64_get_opcode@@Base+0x5578>
   4f978:	mov	w1, #0x2                   	// #2
   4f97c:	b	4f94c <aarch64_get_opcode@@Base+0x5578>
   4f980:	ldr	x0, [x28, #104]
   4f984:	add	x28, x28, #0x38
   4f988:	cbnz	x0, 4da28 <aarch64_get_opcode@@Base+0x3654>
   4f98c:	b	4f798 <aarch64_get_opcode@@Base+0x53c4>
   4f990:	cmp	w0, #0x10
   4f994:	b.eq	4ec70 <aarch64_get_opcode@@Base+0x489c>  // b.none
   4f998:	b.gt	4f9bc <aarch64_get_opcode@@Base+0x55e8>
   4f99c:	cmp	w0, #0x8
   4f9a0:	b.ne	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.any
   4f9a4:	mov	x2, x3
   4f9a8:	mov	x0, x5
   4f9ac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f9b0:	add	x1, x1, #0xcb5
   4f9b4:	blr	x6
   4f9b8:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f9bc:	cmp	w0, #0x20
   4f9c0:	b.eq	4f9e0 <aarch64_get_opcode@@Base+0x560c>  // b.none
   4f9c4:	cmp	w0, #0x40
   4f9c8:	b.ne	4ec54 <aarch64_get_opcode@@Base+0x4880>  // b.any
   4f9cc:	mov	x0, x5
   4f9d0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f9d4:	add	x1, x1, #0xd2c
   4f9d8:	blr	x6
   4f9dc:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4f9e0:	cbnz	w1, 4ec7c <aarch64_get_opcode@@Base+0x48a8>
   4f9e4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4f9e8:	add	x1, x1, #0xdb2
   4f9ec:	mov	w0, #0x1                   	// #1
   4f9f0:	tbz	w3, #31, 4ecc0 <aarch64_get_opcode@@Base+0x48ec>
   4f9f4:	cbnz	w0, 4ecc0 <aarch64_get_opcode@@Base+0x48ec>
   4f9f8:	orr	x2, x3, #0xffffffff00000000
   4f9fc:	mov	x0, x5
   4fa00:	blr	x6
   4fa04:	b	4e38c <aarch64_get_opcode@@Base+0x3fb8>
   4fa08:	cbnz	w1, 4ec7c <aarch64_get_opcode@@Base+0x48a8>
   4fa0c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   4fa10:	mov	w0, #0x0                   	// #0
   4fa14:	add	x1, x1, #0xcf2
   4fa18:	b	4f9f0 <aarch64_get_opcode@@Base+0x561c>
   4fa1c:	stp	x29, x30, [sp, #-32]!
   4fa20:	mov	x9, x0
   4fa24:	mov	w0, #0x2                   	// #2
   4fa28:	mov	x29, sp
   4fa2c:	str	w0, [sp, #28]
   4fa30:	mov	x4, x1
   4fa34:	ldr	x0, [x1, #48]
   4fa38:	mov	x11, x2
   4fa3c:	cbz	x0, 4fa48 <aarch64_get_opcode@@Base+0x5674>
   4fa40:	ldr	w0, [x0, #32]
   4fa44:	tbz	w0, #4, 4fa4c <aarch64_get_opcode@@Base+0x5678>
   4fa48:	str	wzr, [sp, #28]
   4fa4c:	ldr	x7, [x4, #96]
   4fa50:	cbz	x7, 4fc14 <aarch64_get_opcode@@Base+0x5840>
   4fa54:	ldr	x0, [x4, #72]
   4fa58:	ldr	x0, [x0]
   4fa5c:	ldr	w1, [x0, #24]
   4fa60:	tbnz	w1, #21, 4fc14 <aarch64_get_opcode@@Base+0x5840>
   4fa64:	ldr	x0, [x0]
   4fa68:	ldr	x0, [x0, #8]
   4fa6c:	ldr	w0, [x0, #8]
   4fa70:	cmp	w0, #0x5
   4fa74:	b.ne	4fc14 <aarch64_get_opcode@@Base+0x5840>  // b.any
   4fa78:	ldr	w0, [x4, #84]
   4fa7c:	mov	w8, #0xffffffff            	// #-1
   4fa80:	cbz	w0, 4fb8c <aarch64_get_opcode@@Base+0x57b8>
   4fa84:	ldr	x0, [x7, #40]
   4fa88:	cmp	x0, x9
   4fa8c:	b.cc	4fa94 <aarch64_get_opcode@@Base+0x56c0>  // b.lo, b.ul, b.last
   4fa90:	str	w8, [x7, #28]
   4fa94:	ldr	w0, [x7, #28]
   4fa98:	ldr	w6, [x4, #80]
   4fa9c:	add	w6, w6, #0x1
   4faa0:	tbnz	w0, #31, 4fab4 <aarch64_get_opcode@@Base+0x56e0>
   4faa4:	ldr	x1, [x7, #32]
   4faa8:	ldr	x2, [x4, #240]
   4faac:	cmp	x2, x1
   4fab0:	b.eq	4fc1c <aarch64_get_opcode@@Base+0x5848>  // b.none
   4fab4:	mov	w10, #0x0                   	// #0
   4fab8:	sbfiz	x12, x6, #3, #32
   4fabc:	add	x2, sp, #0x1c
   4fac0:	mov	w5, #0x0                   	// #0
   4fac4:	mov	w8, #0xffffffff            	// #-1
   4fac8:	mov	w13, #0x1                   	// #1
   4facc:	ldr	w0, [x4, #84]
   4fad0:	cmp	w6, w0
   4fad4:	b.lt	4fb0c <aarch64_get_opcode@@Base+0x5738>  // b.tstop
   4fad8:	cbnz	w5, 4fbdc <aarch64_get_opcode@@Base+0x5808>
   4fadc:	ldr	w5, [x4, #80]
   4fae0:	ldr	w0, [x7, #28]
   4fae4:	cmp	w5, w0
   4fae8:	b.lt	4faf4 <aarch64_get_opcode@@Base+0x5720>  // b.tstop
   4faec:	cmp	w10, #0x0
   4faf0:	csel	w5, w5, w0, eq  // eq = none
   4faf4:	ldr	x0, [x4, #48]
   4faf8:	cbz	x0, 4fbfc <aarch64_get_opcode@@Base+0x5828>
   4fafc:	ldr	x9, [x0, #40]
   4fb00:	sbfiz	x6, x5, #3, #32
   4fb04:	add	x2, sp, #0x1c
   4fb08:	b	4fb88 <aarch64_get_opcode@@Base+0x57b4>
   4fb0c:	ldr	x0, [x4, #72]
   4fb10:	ldr	x1, [x0, x12]
   4fb14:	ldr	x0, [x1, #32]
   4fb18:	ldr	x1, [x1, #16]
   4fb1c:	ldr	x0, [x0, #40]
   4fb20:	add	x0, x0, x1
   4fb24:	cmp	x9, x0
   4fb28:	b.cc	4fad8 <aarch64_get_opcode@@Base+0x5704>  // b.lo, b.ul, b.last
   4fb2c:	mov	w1, w6
   4fb30:	mov	x0, x4
   4fb34:	bl	4d83c <aarch64_get_opcode@@Base+0x3468>
   4fb38:	cmp	w0, #0x0
   4fb3c:	csel	w8, w8, w6, eq  // eq = none
   4fb40:	csel	w5, w5, w13, eq  // eq = none
   4fb44:	add	w6, w6, #0x1
   4fb48:	add	x12, x12, #0x8
   4fb4c:	b	4facc <aarch64_get_opcode@@Base+0x56f8>
   4fb50:	ldr	x0, [x4, #72]
   4fb54:	ldr	x1, [x0, x6]
   4fb58:	ldr	x0, [x1, #32]
   4fb5c:	ldr	x1, [x1, #16]
   4fb60:	ldr	x0, [x0, #40]
   4fb64:	add	x0, x0, x1
   4fb68:	cmp	x0, x9
   4fb6c:	b.cc	4fb8c <aarch64_get_opcode@@Base+0x57b8>  // b.lo, b.ul, b.last
   4fb70:	mov	w1, w5
   4fb74:	mov	x0, x4
   4fb78:	bl	4d83c <aarch64_get_opcode@@Base+0x3468>
   4fb7c:	sub	x6, x6, #0x8
   4fb80:	cbnz	w0, 4fc04 <aarch64_get_opcode@@Base+0x5830>
   4fb84:	sub	w5, w5, #0x1
   4fb88:	tbz	w5, #31, 4fb50 <aarch64_get_opcode@@Base+0x577c>
   4fb8c:	ldr	w0, [x4, #80]
   4fb90:	tbnz	w0, #31, 4fc0c <aarch64_get_opcode@@Base+0x5838>
   4fb94:	ldr	x2, [x4, #48]
   4fb98:	ldr	x1, [x4, #72]
   4fb9c:	ldr	x1, [x1, w0, sxtw #3]
   4fba0:	cbz	x2, 4fbb0 <aarch64_get_opcode@@Base+0x57dc>
   4fba4:	ldr	x3, [x1, #32]
   4fba8:	cmp	x2, x3
   4fbac:	b.ne	4fc0c <aarch64_get_opcode@@Base+0x5838>  // b.any
   4fbb0:	ldrb	w2, [x1, #72]
   4fbb4:	and	w2, w2, #0x7
   4fbb8:	cmp	w2, #0x2
   4fbbc:	b.ne	4fc0c <aarch64_get_opcode@@Base+0x5838>  // b.any
   4fbc0:	ldrb	w1, [x1, #74]
   4fbc4:	mov	w8, w0
   4fbc8:	and	w1, w1, #0x3
   4fbcc:	cmp	w1, #0x1
   4fbd0:	cset	w1, eq  // eq = none
   4fbd4:	str	w1, [sp, #28]
   4fbd8:	mov	w5, #0x1                   	// #1
   4fbdc:	ldr	w0, [sp, #28]
   4fbe0:	ldr	x1, [x4, #240]
   4fbe4:	stp	w0, w8, [x7, #24]
   4fbe8:	str	x1, [x7, #32]
   4fbec:	str	w0, [x11]
   4fbf0:	mov	w0, w5
   4fbf4:	ldp	x29, x30, [sp], #32
   4fbf8:	ret
   4fbfc:	mov	x9, #0x0                   	// #0
   4fc00:	b	4fb00 <aarch64_get_opcode@@Base+0x572c>
   4fc04:	mov	w8, w5
   4fc08:	b	4fbd8 <aarch64_get_opcode@@Base+0x5804>
   4fc0c:	mov	w5, #0x0                   	// #0
   4fc10:	b	4fbdc <aarch64_get_opcode@@Base+0x5808>
   4fc14:	mov	w5, #0x0                   	// #0
   4fc18:	b	4fbf0 <aarch64_get_opcode@@Base+0x581c>
   4fc1c:	cmp	w6, w0
   4fc20:	mov	w10, #0x1                   	// #1
   4fc24:	csel	w6, w6, w0, le
   4fc28:	b	4fab8 <aarch64_get_opcode@@Base+0x56e4>
   4fc2c:	stp	x29, x30, [sp, #-144]!
   4fc30:	mov	x29, sp
   4fc34:	stp	x19, x20, [sp, #16]
   4fc38:	mov	x19, x1
   4fc3c:	ldr	x20, [x1, #224]
   4fc40:	stp	x21, x22, [sp, #32]
   4fc44:	mov	x22, x0
   4fc48:	stp	x23, x24, [sp, #48]
   4fc4c:	mov	w24, w2
   4fc50:	stp	x25, x26, [sp, #64]
   4fc54:	stp	x27, x28, [sp, #80]
   4fc58:	strh	wzr, [x1, #196]
   4fc5c:	strb	wzr, [x1, #198]
   4fc60:	str	wzr, [x1, #200]
   4fc64:	stp	xzr, xzr, [x1, #208]
   4fc68:	cbz	x20, 4fccc <aarch64_get_opcode@@Base+0x58f8>
   4fc6c:	adrp	x23, 82000 <aarch64_operands@@Base+0x1bc0>
   4fc70:	add	x23, x23, #0xb70
   4fc74:	adrp	x25, 5c000 <fields@@Base+0x35a8>
   4fc78:	add	x23, x23, #0xe70
   4fc7c:	add	x25, x25, #0x5a
   4fc80:	mov	x1, x25
   4fc84:	mov	x0, x20
   4fc88:	mov	x2, #0xa                   	// #10
   4fc8c:	bl	35480 <strncmp@plt>
   4fc90:	cbnz	w0, 4fd0c <aarch64_get_opcode@@Base+0x5938>
   4fc94:	mov	x21, #0x0                   	// #0
   4fc98:	mov	x26, #0x90                  	// #144
   4fc9c:	mul	x0, x21, x26
   4fca0:	ldr	x1, [x0, x23]
   4fca4:	mov	x0, x20
   4fca8:	bl	359c0 <disassembler_options_cmp@plt>
   4fcac:	cbnz	w0, 4fcf0 <aarch64_get_opcode@@Base+0x591c>
   4fcb0:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   4fcb4:	str	w21, [x0, #1624]
   4fcb8:	mov	x0, x20
   4fcbc:	mov	w1, #0x2c                  	// #44
   4fcc0:	bl	35890 <strchr@plt>
   4fcc4:	cbnz	x0, 4fd7c <aarch64_get_opcode@@Base+0x59a8>
   4fcc8:	str	xzr, [x19, #224]
   4fccc:	ldr	x0, [x19, #96]
   4fcd0:	cbnz	x0, 4fdd8 <aarch64_get_opcode@@Base+0x5a04>
   4fcd4:	ldr	x0, [x19, #88]
   4fcd8:	adrp	x2, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4fcdc:	tbnz	w0, #29, 4fd84 <aarch64_get_opcode@@Base+0x59b0>
   4fce0:	str	xzr, [x19, #32]
   4fce4:	mov	x1, #0xffffffffffcfffff    	// #-3145729
   4fce8:	mov	x3, #0xffffffffffffffff    	// #-1
   4fcec:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   4fcf0:	add	x21, x21, #0x1
   4fcf4:	cmp	x21, #0x8
   4fcf8:	b.ne	4fc9c <aarch64_get_opcode@@Base+0x58c8>  // b.any
   4fcfc:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4fd00:	mov	w2, #0x5                   	// #5
   4fd04:	add	x1, x1, #0x74
   4fd08:	b	4fd64 <aarch64_get_opcode@@Base+0x5990>
   4fd0c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4fd10:	mov	x0, x20
   4fd14:	add	x1, x1, #0x68
   4fd18:	mov	x2, #0xb                   	// #11
   4fd1c:	bl	35480 <strncmp@plt>
   4fd20:	cbnz	w0, 4fd34 <aarch64_get_opcode@@Base+0x5960>
   4fd24:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4fd28:	mov	w1, #0x1                   	// #1
   4fd2c:	str	w1, [x0, #1080]
   4fd30:	b	4fcb8 <aarch64_get_opcode@@Base+0x58e4>
   4fd34:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   4fd38:	mov	x0, x20
   4fd3c:	add	x1, x1, #0x65
   4fd40:	mov	x2, #0xe                   	// #14
   4fd44:	bl	35480 <strncmp@plt>
   4fd48:	cbnz	w0, 4fd58 <aarch64_get_opcode@@Base+0x5984>
   4fd4c:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4fd50:	str	wzr, [x0, #1080]
   4fd54:	b	4fcb8 <aarch64_get_opcode@@Base+0x58e4>
   4fd58:	adrp	x1, 53000 <xexit@@Base+0x508>
   4fd5c:	add	x1, x1, #0x9e1
   4fd60:	mov	w2, #0x5                   	// #5
   4fd64:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   4fd68:	add	x0, x0, #0xb4a
   4fd6c:	bl	35a30 <dcgettext@plt>
   4fd70:	mov	x1, x20
   4fd74:	bl	35a60 <_bfd_error_handler@plt>
   4fd78:	b	4fcb8 <aarch64_get_opcode@@Base+0x58e4>
   4fd7c:	add	x20, x0, #0x1
   4fd80:	b	4fc80 <aarch64_get_opcode@@Base+0x58ac>
   4fd84:	ldr	x1, [x19, #32]
   4fd88:	cmp	x1, #0x1b
   4fd8c:	b.hi	500d0 <aarch64_get_opcode@@Base+0x5cfc>  // b.pmore
   4fd90:	cmp	w1, #0x1b
   4fd94:	b.hi	500d0 <aarch64_get_opcode@@Base+0x5cfc>  // b.pmore
   4fd98:	adrp	x0, 69000 <fields@@Base+0x105a8>
   4fd9c:	add	x0, x0, #0x418
   4fda0:	ldrh	w0, [x0, w1, uxtw #1]
   4fda4:	adr	x3, 4fdb0 <aarch64_get_opcode@@Base+0x59dc>
   4fda8:	add	x0, x3, w0, sxth #2
   4fdac:	br	x0
   4fdb0:	mov	x1, #0x0                   	// #0
   4fdb4:	mov	x3, #0x7                   	// #7
   4fdb8:	add	x2, x2, #0x410
   4fdbc:	add	x0, x2, #0x30
   4fdc0:	str	x0, [x19, #96]
   4fdc4:	stp	x3, x1, [x2, #48]
   4fdc8:	mov	x1, #0xffffffffffffffff    	// #-1
   4fdcc:	str	x1, [x2, #64]
   4fdd0:	str	w1, [x2, #76]
   4fdd4:	stp	xzr, xzr, [x2, #80]
   4fdd8:	ldr	w21, [x19, #84]
   4fddc:	ldr	w0, [x19, #44]
   4fde0:	cmp	w0, #0x1
   4fde4:	csinc	w25, w24, wzr, ne  // ne = any
   4fde8:	cbz	w21, 500f8 <aarch64_get_opcode@@Base+0x5d24>
   4fdec:	ldr	x0, [x19, #72]
   4fdf0:	ldr	x0, [x0]
   4fdf4:	ldr	w1, [x0, #24]
   4fdf8:	tbnz	w1, #21, 50108 <aarch64_get_opcode@@Base+0x5d34>
   4fdfc:	ldr	x0, [x0]
   4fe00:	ldr	x0, [x0, #8]
   4fe04:	ldr	w0, [x0, #8]
   4fe08:	cmp	w0, #0x5
   4fe0c:	b.ne	50108 <aarch64_get_opcode@@Base+0x5d34>  // b.any
   4fe10:	ldr	x14, [x19, #96]
   4fe14:	mov	x1, x19
   4fe18:	add	x2, sp, #0x8c
   4fe1c:	mov	x0, x22
   4fe20:	str	wzr, [sp, #140]
   4fe24:	mov	w20, #0x4                   	// #4
   4fe28:	bl	4fa1c <aarch64_get_opcode@@Base+0x5648>
   4fe2c:	ldr	w1, [x14, #24]
   4fe30:	cmp	w1, #0x1
   4fe34:	cset	w21, eq  // eq = none
   4fe38:	cmp	w1, #0x2
   4fe3c:	cset	w3, eq  // eq = none
   4fe40:	b.ne	4febc <aarch64_get_opcode@@Base+0x5ae8>  // b.any
   4fe44:	ldr	w1, [x14, #28]
   4fe48:	and	w2, w22, #0x3
   4fe4c:	ldr	w7, [x19, #84]
   4fe50:	mov	w8, w22
   4fe54:	add	w1, w1, #0x1
   4fe58:	sub	w20, w20, w2
   4fe5c:	sbfiz	x4, x1, #3, #32
   4fe60:	cmp	w7, w1
   4fe64:	b.le	4fea8 <aarch64_get_opcode@@Base+0x5ad4>
   4fe68:	ldr	x2, [x19, #72]
   4fe6c:	ldr	x2, [x2, x4]
   4fe70:	ldr	x5, [x2, #32]
   4fe74:	ldr	x2, [x2, #16]
   4fe78:	ldr	x6, [x5, #40]
   4fe7c:	add	x2, x2, x6
   4fe80:	cmp	x22, x2
   4fe84:	b.cs	500ec <aarch64_get_opcode@@Base+0x5d18>  // b.hs, b.nlast
   4fe88:	ldr	x6, [x19, #48]
   4fe8c:	cbz	x6, 4fe98 <aarch64_get_opcode@@Base+0x5ac4>
   4fe90:	cmp	x6, x5
   4fe94:	b.ne	500ec <aarch64_get_opcode@@Base+0x5d18>  // b.any
   4fe98:	sub	x1, x2, x22
   4fe9c:	cmp	x1, w20, uxtw
   4fea0:	b.cs	4fea8 <aarch64_get_opcode@@Base+0x5ad4>  // b.hs, b.nlast
   4fea4:	sub	w20, w2, w8
   4fea8:	and	x1, x22, #0x1
   4feac:	cmp	w20, #0x3
   4feb0:	mov	x2, #0x2                   	// #2
   4feb4:	sub	x1, x2, x1
   4feb8:	csel	w20, w20, w1, ne  // ne = any
   4febc:	ldr	x1, [x19, #56]
   4fec0:	cbz	x1, 4ff0c <aarch64_get_opcode@@Base+0x5b38>
   4fec4:	ldr	x1, [x1]
   4fec8:	ldr	w2, [x1, #24]
   4fecc:	tbnz	w2, #21, 4ff0c <aarch64_get_opcode@@Base+0x5b38>
   4fed0:	ldr	x2, [x1]
   4fed4:	ldr	x2, [x2, #8]
   4fed8:	ldr	w2, [x2, #8]
   4fedc:	cmp	w2, #0x2
   4fee0:	b.ne	5011c <aarch64_get_opcode@@Base+0x5d48>  // b.any
   4fee4:	ldr	x0, [x1, #48]
   4fee8:	ldrb	w21, [x0, #40]
   4feec:	add	w0, w21, #0x7e
   4fef0:	mov	x21, #0x13                  	// #19
   4fef4:	and	w1, w0, #0xff
   4fef8:	movk	x21, #0x30, lsl #16
   4fefc:	cmp	w1, #0x16
   4ff00:	lsr	x21, x21, x0
   4ff04:	and	w21, w21, #0x1
   4ff08:	csel	w21, w21, wzr, cc  // cc = lo, ul, last
   4ff0c:	adrp	x23, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   4ff10:	add	x0, x23, #0x410
   4ff14:	add	x26, sp, #0x88
   4ff18:	ldr	x5, [x19, #104]
   4ff1c:	ldr	w0, [x0, #40]
   4ff20:	cmp	w0, #0x0
   4ff24:	csinc	w21, w21, wzr, eq  // eq = none
   4ff28:	cmp	w3, #0x0
   4ff2c:	csel	w0, w25, w24, eq  // eq = none
   4ff30:	str	w0, [x19, #176]
   4ff34:	mov	w0, #0x4                   	// #4
   4ff38:	str	w0, [x19, #168]
   4ff3c:	cbz	w3, 50190 <aarch64_get_opcode@@Base+0x5dbc>
   4ff40:	ldr	x0, [x19, #88]
   4ff44:	and	x28, x0, #0x40000000
   4ff48:	tbnz	w0, #30, 50190 <aarch64_get_opcode@@Base+0x5dbc>
   4ff4c:	str	w20, [x19, #172]
   4ff50:	mov	x3, x19
   4ff54:	mov	w2, w20
   4ff58:	mov	x1, x26
   4ff5c:	mov	x0, x22
   4ff60:	blr	x5
   4ff64:	mov	w6, w0
   4ff68:	cbz	w24, 50188 <aarch64_get_opcode@@Base+0x5db4>
   4ff6c:	sub	w0, w20, #0x1
   4ff70:	sxtw	x0, w0
   4ff74:	tbz	w0, #31, 50160 <aarch64_get_opcode@@Base+0x5d8c>
   4ff78:	adrp	x5, 4d000 <aarch64_get_opcode@@Base+0x2c2c>
   4ff7c:	add	x27, x5, #0x8c0
   4ff80:	cbz	w6, 5040c <aarch64_get_opcode@@Base+0x6038>
   4ff84:	ldr	x3, [x19, #112]
   4ff88:	mov	w0, w6
   4ff8c:	mov	x2, x19
   4ff90:	mov	x1, x22
   4ff94:	blr	x3
   4ff98:	mov	w0, #0xffffffff            	// #-1
   4ff9c:	ldp	x19, x20, [sp, #16]
   4ffa0:	ldp	x21, x22, [sp, #32]
   4ffa4:	ldp	x23, x24, [sp, #48]
   4ffa8:	ldp	x25, x26, [sp, #64]
   4ffac:	ldp	x27, x28, [sp, #80]
   4ffb0:	ldp	x29, x30, [sp], #144
   4ffb4:	ret
   4ffb8:	mov	x1, #0x0                   	// #0
   4ffbc:	mov	x3, #0x1f                  	// #31
   4ffc0:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   4ffc4:	mov	x1, #0x0                   	// #0
   4ffc8:	mov	x3, #0x3f                  	// #63
   4ffcc:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   4ffd0:	mov	x1, #0x0                   	// #0
   4ffd4:	mov	x3, #0x7f                  	// #127
   4ffd8:	movk	x3, #0x2000, lsl #16
   4ffdc:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   4ffe0:	mov	x1, #0x0                   	// #0
   4ffe4:	mov	x3, #0xbf                  	// #191
   4ffe8:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   4ffec:	mov	x1, #0x0                   	// #0
   4fff0:	mov	x3, #0x1ff                 	// #511
   4fff4:	b	4ffd8 <aarch64_get_opcode@@Base+0x5c04>
   4fff8:	mov	x1, #0x0                   	// #0
   4fffc:	mov	x3, #0x7ff                 	// #2047
   50000:	b	4ffd8 <aarch64_get_opcode@@Base+0x5c04>
   50004:	mov	x1, #0x0                   	// #0
   50008:	mov	x3, #0xfff                 	// #4095
   5000c:	b	4ffd8 <aarch64_get_opcode@@Base+0x5c04>
   50010:	mov	x1, #0x0                   	// #0
   50014:	mov	x3, #0x1fff                	// #8191
   50018:	b	4ffd8 <aarch64_get_opcode@@Base+0x5c04>
   5001c:	mov	x3, #0x3fff                	// #16383
   50020:	mov	x1, #0x0                   	// #0
   50024:	movk	x3, #0x3000, lsl #16
   50028:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   5002c:	mov	x3, #0xbfff                	// #49151
   50030:	mov	x1, #0x10                  	// #16
   50034:	movk	x3, #0x3604, lsl #16
   50038:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   5003c:	mov	x1, #0x0                   	// #0
   50040:	mov	x3, #0x3fff                	// #16383
   50044:	b	4ffd8 <aarch64_get_opcode@@Base+0x5c04>
   50048:	mov	x3, #0xbfff                	// #49151
   5004c:	mov	x1, #0x10                  	// #16
   50050:	movk	x3, #0xff1d, lsl #16
   50054:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   50058:	mov	x3, #0x35c0                	// #13760
   5005c:	mov	x1, #0x0                   	// #0
   50060:	movk	x3, #0x380, lsl #16
   50064:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   50068:	mov	x3, #0x35c0                	// #13760
   5006c:	mov	x1, #0x0                   	// #0
   50070:	movk	x3, #0x2380, lsl #16
   50074:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   50078:	mov	x3, #0xb7c0                	// #47040
   5007c:	mov	x1, #0x10                  	// #16
   50080:	movk	x3, #0x27c9, lsl #16
   50084:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   50088:	mov	x1, #0x7fbb                	// #32699
   5008c:	movk	x1, #0xb, lsl #16
   50090:	mov	w3, #0xff1dffff            	// #-14811137
   50094:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   50098:	mov	x3, #0x35c0                	// #13760
   5009c:	mov	x1, #0x1c                  	// #28
   500a0:	movk	x3, #0x2381, lsl #16
   500a4:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   500a8:	mov	x1, #0x5c                  	// #92
   500ac:	mov	x3, #0xb5c0                	// #46528
   500b0:	movk	x3, #0x23c9, lsl #16
   500b4:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   500b8:	add	x0, x2, #0x410
   500bc:	mov	w1, #0x1                   	// #1
   500c0:	str	w1, [x0, #40]
   500c4:	mov	x1, #0x807c                	// #32892
   500c8:	movk	x1, #0x30, lsl #16
   500cc:	b	500ac <aarch64_get_opcode@@Base+0x5cd8>
   500d0:	bl	356c0 <abort@plt>
   500d4:	mov	x1, #0x0                   	// #0
   500d8:	mov	x3, #0x3                   	// #3
   500dc:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   500e0:	mov	x1, #0x0                   	// #0
   500e4:	mov	x3, #0xf                   	// #15
   500e8:	b	4fdb8 <aarch64_get_opcode@@Base+0x59e4>
   500ec:	add	w1, w1, #0x1
   500f0:	add	x4, x4, #0x8
   500f4:	b	4fe60 <aarch64_get_opcode@@Base+0x5a8c>
   500f8:	mov	w0, #0x0                   	// #0
   500fc:	mov	w3, #0x0                   	// #0
   50100:	mov	w20, #0x4                   	// #4
   50104:	b	4febc <aarch64_get_opcode@@Base+0x5ae8>
   50108:	mov	w0, #0x0                   	// #0
   5010c:	mov	w20, #0x4                   	// #4
   50110:	mov	w3, #0x0                   	// #0
   50114:	mov	w21, #0x0                   	// #0
   50118:	b	4febc <aarch64_get_opcode@@Base+0x5ae8>
   5011c:	cmp	w2, #0x5
   50120:	b.ne	5014c <aarch64_get_opcode@@Base+0x5d78>  // b.any
   50124:	cbnz	w0, 4ff0c <aarch64_get_opcode@@Base+0x5b38>
   50128:	ldrb	w21, [x1, #74]
   5012c:	ldrb	w0, [x1, #72]
   50130:	and	w21, w21, #0x3
   50134:	cmp	w21, #0x1
   50138:	b.eq	4ff0c <aarch64_get_opcode@@Base+0x5b38>  // b.none
   5013c:	and	w0, w0, #0xf
   50140:	cmp	w0, #0xf
   50144:	cset	w21, eq  // eq = none
   50148:	b	4ff0c <aarch64_get_opcode@@Base+0x5b38>
   5014c:	cmp	w2, #0x11
   50150:	b.ne	4ff0c <aarch64_get_opcode@@Base+0x5b38>  // b.any
   50154:	ldrh	w21, [x1, #50]
   50158:	and	w21, w21, #0x8
   5015c:	b	4ff0c <aarch64_get_opcode@@Base+0x5b38>
   50160:	ldrb	w1, [x26, x0]
   50164:	sub	x0, x0, #0x1
   50168:	orr	x28, x1, x28, lsl #8
   5016c:	b	4ff74 <aarch64_get_opcode@@Base+0x5ba0>
   50170:	ldrb	w1, [x26, x0]
   50174:	add	x0, x0, #0x1
   50178:	orr	x28, x1, x28, lsl #8
   5017c:	cmp	w20, w0
   50180:	b.gt	50170 <aarch64_get_opcode@@Base+0x5d9c>
   50184:	b	4ff78 <aarch64_get_opcode@@Base+0x5ba4>
   50188:	mov	x0, #0x0                   	// #0
   5018c:	b	5017c <aarch64_get_opcode@@Base+0x5da8>
   50190:	cbnz	w21, 501d4 <aarch64_get_opcode@@Base+0x5e00>
   50194:	mov	w20, #0x4                   	// #4
   50198:	str	w20, [x19, #172]
   5019c:	mov	x3, x19
   501a0:	mov	w2, w20
   501a4:	mov	x1, x26
   501a8:	mov	x0, x22
   501ac:	blr	x5
   501b0:	mov	w6, w0
   501b4:	adrp	x5, 50000 <aarch64_get_opcode@@Base+0x5c2c>
   501b8:	cbz	w25, 501c8 <aarch64_get_opcode@@Base+0x5df4>
   501bc:	ldr	w28, [sp, #136]
   501c0:	add	x27, x5, #0x448
   501c4:	b	4ff80 <aarch64_get_opcode@@Base+0x5bac>
   501c8:	ldr	w4, [sp, #136]
   501cc:	rev	w28, w4
   501d0:	b	501c0 <aarch64_get_opcode@@Base+0x5dec>
   501d4:	mov	w2, #0x2                   	// #2
   501d8:	str	w2, [x19, #172]
   501dc:	mov	x3, x19
   501e0:	mov	x1, x26
   501e4:	mov	x0, x22
   501e8:	blr	x5
   501ec:	mov	w6, w0
   501f0:	cbz	w25, 502b8 <aarch64_get_opcode@@Base+0x5ee4>
   501f4:	ldrh	w28, [sp, #136]
   501f8:	cbnz	w6, 502d4 <aarch64_get_opcode@@Base+0x5f00>
   501fc:	and	x0, x28, #0xf800
   50200:	cmp	x0, #0xf, lsl #12
   50204:	b.eq	50214 <aarch64_get_opcode@@Base+0x5e40>  // b.none
   50208:	mov	x0, #0xe800                	// #59392
   5020c:	bics	xzr, x0, x28
   50210:	b.ne	502d4 <aarch64_get_opcode@@Base+0x5f00>  // b.any
   50214:	ldr	x5, [x19, #104]
   50218:	mov	x3, x19
   5021c:	mov	x1, x26
   50220:	add	x0, x22, #0x2
   50224:	mov	w2, #0x2                   	// #2
   50228:	blr	x5
   5022c:	mov	w6, w0
   50230:	lsl	x4, x28, #16
   50234:	ldrh	w0, [sp, #136]
   50238:	adrp	x5, 51000 <aarch64_get_opcode@@Base+0x6c2c>
   5023c:	cbz	w25, 502c8 <aarch64_get_opcode@@Base+0x5ef4>
   50240:	orr	x28, x0, x4
   50244:	add	x27, x5, #0xfc
   50248:	mov	w20, #0x4                   	// #4
   5024c:	add	x0, x23, #0x410
   50250:	ldr	x1, [x0, #96]
   50254:	cmp	x1, x22
   50258:	b.eq	5028c <aarch64_get_opcode@@Base+0x5eb8>  // b.none
   5025c:	mov	x9, x22
   50260:	str	x22, [x0, #96]
   50264:	add	x0, sp, #0x80
   50268:	str	wzr, [x23, #1040]
   5026c:	mov	w26, #0x0                   	// #0
   50270:	mov	w24, #0x1                   	// #1
   50274:	str	x0, [sp, #96]
   50278:	add	x0, sp, #0x8c
   5027c:	str	x0, [sp, #104]
   50280:	str	wzr, [sp, #120]
   50284:	cbnz	x9, 502e4 <aarch64_get_opcode@@Base+0x5f10>
   50288:	cbnz	w26, 503e4 <aarch64_get_opcode@@Base+0x6010>
   5028c:	ldr	w0, [x23, #1040]
   50290:	add	x2, x23, #0x410
   50294:	cbz	w0, 4ff80 <aarch64_get_opcode@@Base+0x5bac>
   50298:	and	w3, w0, #0xf
   5029c:	ubfiz	w1, w0, #1, #4
   502a0:	and	w0, w0, #0xe0
   502a4:	cmp	w3, #0x8
   502a8:	orr	w0, w1, w0
   502ac:	csel	w0, wzr, w0, eq  // eq = none
   502b0:	str	w0, [x2, #4]
   502b4:	b	4ff80 <aarch64_get_opcode@@Base+0x5bac>
   502b8:	ldrh	w4, [sp, #136]
   502bc:	rev16	w4, w4
   502c0:	and	x28, x4, #0xffff
   502c4:	b	501f8 <aarch64_get_opcode@@Base+0x5e24>
   502c8:	rev16	w0, w0
   502cc:	and	x0, x0, #0xffff
   502d0:	b	50240 <aarch64_get_opcode@@Base+0x5e6c>
   502d4:	adrp	x5, 4a000 <aarch64_find_next_alias_opcode@@Base+0x4a8>
   502d8:	mov	w20, #0x2                   	// #2
   502dc:	add	x27, x5, #0xf78
   502e0:	b	5024c <aarch64_get_opcode@@Base+0x5e78>
   502e4:	ldr	x2, [x19, #128]
   502e8:	mov	x0, x9
   502ec:	mov	x1, x19
   502f0:	str	x9, [sp, #112]
   502f4:	str	w6, [sp, #124]
   502f8:	blr	x2
   502fc:	ldr	w6, [sp, #124]
   50300:	ldr	x9, [sp, #112]
   50304:	cbnz	w0, 50288 <aarch64_get_opcode@@Base+0x5eb4>
   50308:	ldr	x1, [sp, #96]
   5030c:	sub	x9, x9, #0x2
   50310:	ldr	x10, [x19, #104]
   50314:	mov	x3, x19
   50318:	mov	x0, x9
   5031c:	mov	w2, #0x2                   	// #2
   50320:	str	x9, [sp, #112]
   50324:	str	w6, [sp, #124]
   50328:	blr	x10
   5032c:	ldr	w6, [sp, #124]
   50330:	cbnz	w0, 5028c <aarch64_get_opcode@@Base+0x5eb8>
   50334:	ldrh	w0, [sp, #128]
   50338:	cmp	w25, #0x0
   5033c:	ldr	x9, [sp, #112]
   50340:	rev16	w14, w0
   50344:	and	w14, w14, #0xffff
   50348:	csel	w14, w14, w0, eq  // eq = none
   5034c:	and	w15, w14, #0xf800
   50350:	cbz	w26, 50368 <aarch64_get_opcode@@Base+0x5f94>
   50354:	mov	w0, #0xe7ff                	// #59391
   50358:	cmp	w15, w0
   5035c:	b.hi	50368 <aarch64_get_opcode@@Base+0x5f94>  // b.pmore
   50360:	tbnz	w24, #0, 503e8 <aarch64_get_opcode@@Base+0x6014>
   50364:	mov	w26, #0x0                   	// #0
   50368:	and	w1, w14, #0xff00
   5036c:	mov	w0, #0xbf00                	// #48896
   50370:	cmp	w1, w0
   50374:	b.ne	503c0 <aarch64_get_opcode@@Base+0x5fec>  // b.any
   50378:	tst	x14, #0xf
   5037c:	b.eq	503c0 <aarch64_get_opcode@@Base+0x5fec>  // b.none
   50380:	ldr	x2, [sp, #104]
   50384:	mov	x0, x9
   50388:	mov	x1, x19
   5038c:	str	x9, [sp, #112]
   50390:	str	w6, [sp, #124]
   50394:	str	wzr, [sp, #140]
   50398:	bl	4fa1c <aarch64_get_opcode@@Base+0x5648>
   5039c:	ldr	w6, [sp, #124]
   503a0:	ldr	x9, [sp, #112]
   503a4:	cbz	w0, 503b4 <aarch64_get_opcode@@Base+0x5fe0>
   503a8:	ldr	w0, [sp, #140]
   503ac:	cmp	w0, #0x1
   503b0:	b.ne	503c0 <aarch64_get_opcode@@Base+0x5fec>  // b.any
   503b4:	mov	w26, w14
   503b8:	asr	w0, w24, #1
   503bc:	str	w0, [sp, #120]
   503c0:	add	w0, w24, #0x2
   503c4:	mov	w1, #0xe7ff                	// #59391
   503c8:	orr	w0, w0, #0x1
   503cc:	cmp	w15, w1
   503d0:	csinc	w24, w0, w24, ls  // ls = plast
   503d4:	cmp	w26, #0x0
   503d8:	ccmp	w24, #0x7, #0x4, eq  // eq = none
   503dc:	b.le	50284 <aarch64_get_opcode@@Base+0x5eb0>
   503e0:	b	5028c <aarch64_get_opcode@@Base+0x5eb8>
   503e4:	tbz	w24, #0, 5028c <aarch64_get_opcode@@Base+0x5eb8>
   503e8:	ldrb	w0, [sp, #120]
   503ec:	and	w7, w26, #0xe0
   503f0:	lsl	w24, w26, w0
   503f4:	and	w24, w24, #0x1f
   503f8:	orr	w7, w24, w7
   503fc:	tst	x24, #0xf
   50400:	csel	w7, w7, wzr, ne  // ne = any
   50404:	str	w7, [x23, #1040]
   50408:	b	5028c <aarch64_get_opcode@@Base+0x5eb8>
   5040c:	ldr	x0, [x19, #88]
   50410:	mov	x2, x28
   50414:	mov	x1, x19
   50418:	tst	x0, #0x80000000
   5041c:	csel	x0, x22, xzr, eq  // eq = none
   50420:	blr	x27
   50424:	cbz	w21, 50440 <aarch64_get_opcode@@Base+0x606c>
   50428:	add	x0, x23, #0x410
   5042c:	ldr	w1, [x0, #4]
   50430:	str	w1, [x23, #1040]
   50434:	ldr	x1, [x0, #96]
   50438:	add	x1, x1, w20, uxtw
   5043c:	str	x1, [x0, #96]
   50440:	mov	w0, w20
   50444:	b	4ff9c <aarch64_get_opcode@@Base+0x5bc8>
   50448:	stp	x29, x30, [sp, #-400]!
   5044c:	mov	x3, x2
   50450:	mov	w4, #0x0                   	// #0
   50454:	mov	x29, sp
   50458:	stp	x25, x26, [sp, #64]
   5045c:	mov	x26, x0
   50460:	ldr	x0, [x1, #96]
   50464:	stp	x19, x20, [sp, #16]
   50468:	stp	x21, x22, [sp, #32]
   5046c:	mov	x21, x2
   50470:	mov	x2, x1
   50474:	stp	x23, x24, [sp, #48]
   50478:	mov	x24, x1
   5047c:	stp	x27, x28, [sp, #80]
   50480:	str	x0, [sp, #136]
   50484:	adrp	x0, 91000 <aarch64_operands@@Base+0x10bc0>
   50488:	add	x0, x0, #0xe70
   5048c:	ldp	x19, x20, [x1]
   50490:	mov	x1, x26
   50494:	bl	4b62c <aarch64_get_opcode@@Base+0x1258>
   50498:	cbnz	w0, 50888 <aarch64_get_opcode@@Base+0x64b4>
   5049c:	mov	x1, x21
   504a0:	mov	x0, x24
   504a4:	mov	w2, #0x0                   	// #0
   504a8:	bl	4c768 <aarch64_get_opcode@@Base+0x2394>
   504ac:	cbnz	w0, 50888 <aarch64_get_opcode@@Base+0x64b4>
   504b0:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   504b4:	add	x0, x0, #0xc70
   504b8:	mov	x3, x21
   504bc:	mov	x2, x24
   504c0:	mov	x1, x26
   504c4:	add	x0, x0, #0x4d0
   504c8:	mov	w4, #0x0                   	// #0
   504cc:	bl	4b62c <aarch64_get_opcode@@Base+0x1258>
   504d0:	cbnz	w0, 50888 <aarch64_get_opcode@@Base+0x64b4>
   504d4:	adrp	x0, 87000 <aarch64_operands@@Base+0x6bc0>
   504d8:	and	x2, x21, #0xf0000000
   504dc:	add	x0, x0, #0x280
   504e0:	mov	x4, #0xf0000000            	// #4026531840
   504e4:	ldr	x28, [x0, #40]
   504e8:	cbnz	x28, 50504 <aarch64_get_opcode@@Base+0x6130>
   504ec:	mov	w2, w21
   504f0:	mov	x0, x20
   504f4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   504f8:	add	x1, x1, #0x11c
   504fc:	blr	x19
   50500:	b	50888 <aarch64_get_opcode@@Base+0x64b4>
   50504:	ldp	x3, x1, [x0, #24]
   50508:	and	x5, x1, x21
   5050c:	cmp	x5, x3
   50510:	b.ne	510f4 <aarch64_get_opcode@@Base+0x6d20>  // b.any
   50514:	ldr	x5, [sp, #136]
   50518:	ldr	x6, [x0]
   5051c:	ldr	x5, [x5]
   50520:	tst	x6, x5
   50524:	b.ne	50550 <aarch64_get_opcode@@Base+0x617c>  // b.any
   50528:	ldr	x5, [sp, #136]
   5052c:	ldr	x6, [x0, #8]
   50530:	ldr	x5, [x5, #8]
   50534:	tst	x6, x5
   50538:	b.ne	50550 <aarch64_get_opcode@@Base+0x617c>  // b.any
   5053c:	ldr	x5, [sp, #136]
   50540:	ldr	x6, [x0, #16]
   50544:	ldr	x5, [x5, #16]
   50548:	tst	x6, x5
   5054c:	b.eq	510f4 <aarch64_get_opcode@@Base+0x6d20>  // b.none
   50550:	cmp	x2, x4
   50554:	b.ne	5056c <aarch64_get_opcode@@Base+0x6198>  // b.any
   50558:	and	x5, x1, #0xf0000000
   5055c:	cmp	x5, x2
   50560:	b.eq	5056c <aarch64_get_opcode@@Base+0x6198>  // b.none
   50564:	orr	x1, x1, x3
   50568:	cbnz	x1, 510f4 <aarch64_get_opcode@@Base+0x6d20>
   5056c:	asr	x4, x21, #7
   50570:	and	w27, w21, #0xff
   50574:	and	w0, w4, #0x1e
   50578:	str	w0, [sp, #148]
   5057c:	asr	x1, x21, #4
   50580:	and	w2, w21, #0xf
   50584:	ldrb	w0, [sp, #148]
   50588:	add	x3, x26, #0x8
   5058c:	asr	x5, x21, #16
   50590:	str	w21, [sp, #340]
   50594:	mov	w25, #0x0                   	// #0
   50598:	mov	x22, #0x0                   	// #0
   5059c:	ror	w0, w27, w0
   505a0:	str	w0, [sp, #292]
   505a4:	ldrb	w0, [sp, #148]
   505a8:	ror	w0, w27, w0
   505ac:	str	x0, [sp, #344]
   505b0:	and	w0, w21, #0xf
   505b4:	str	w0, [sp, #288]
   505b8:	and	w0, w1, #0xfff0
   505bc:	orr	w0, w0, w2
   505c0:	sbfiz	x2, x21, #2, #24
   505c4:	add	x2, x2, x3
   505c8:	and	x3, x1, #0xf000
   505cc:	str	x2, [sp, #296]
   505d0:	and	x2, x21, #0xfff
   505d4:	orr	x2, x3, x2
   505d8:	and	w3, w21, #0xf
   505dc:	str	x2, [sp, #304]
   505e0:	and	w2, w1, #0xf0
   505e4:	orr	w2, w2, w3
   505e8:	ands	x3, x21, #0x800000
   505ec:	str	w2, [sp, #192]
   505f0:	ubfx	x2, x21, #16, #4
   505f4:	str	x3, [sp, #168]
   505f8:	adrp	x3, 5c000 <fields@@Base+0x35a8>
   505fc:	add	x3, x3, #0x63
   50600:	str	x2, [sp, #208]
   50604:	adrp	x2, 53000 <xexit@@Base+0x508>
   50608:	add	x2, x2, #0x95f
   5060c:	csel	x3, x3, x2, eq  // eq = none
   50610:	str	x3, [sp, #120]
   50614:	eor	x3, x21, x21, asr #12
   50618:	str	w0, [sp, #336]
   5061c:	and	x3, x3, #0xf
   50620:	str	x3, [sp, #216]
   50624:	ands	x3, x21, #0x800000
   50628:	sxtw	x0, w0
   5062c:	cmp	x3, #0x0
   50630:	ldr	w3, [sp, #192]
   50634:	str	x0, [sp, #352]
   50638:	lsr	w0, w21, #28
   5063c:	cneg	w3, w3, eq  // eq = none
   50640:	str	x0, [sp, #224]
   50644:	add	x0, x26, #0x8
   50648:	str	x0, [sp, #368]
   5064c:	sxtw	x3, w3
   50650:	str	x3, [sp, #184]
   50654:	ands	x3, x21, #0x200000
   50658:	str	x3, [sp, #160]
   5065c:	adrp	x3, 5e000 <fields@@Base+0x55a8>
   50660:	add	x3, x3, #0xe9f
   50664:	csel	x2, x3, x2, ne  // ne = any
   50668:	str	x2, [sp, #280]
   5066c:	and	x2, x21, #0xf
   50670:	and	x3, x21, #0xf
   50674:	str	x2, [sp, #152]
   50678:	and	x2, x1, #0xf0
   5067c:	orr	x2, x2, x3
   50680:	str	x2, [sp, #128]
   50684:	and	w1, w1, #0x30
   50688:	and	x0, x21, #0xffffff
   5068c:	ldr	w2, [sp, #128]
   50690:	str	w2, [sp, #232]
   50694:	ldr	x2, [sp, #128]
   50698:	neg	x2, x2
   5069c:	str	x2, [sp, #360]
   506a0:	mov	w2, #0x4f                  	// #79
   506a4:	and	w2, w5, w2
   506a8:	orr	w1, w1, w2
   506ac:	str	w1, [sp, #196]
   506b0:	sxtw	x1, w1
   506b4:	str	x1, [sp, #248]
   506b8:	and	x1, x5, #0x1f
   506bc:	str	x1, [sp, #312]
   506c0:	and	x1, x4, #0x1f
   506c4:	str	x1, [sp, #200]
   506c8:	ldr	x1, [sp, #312]
   506cc:	ldr	x2, [sp, #200]
   506d0:	add	x1, x1, #0x1
   506d4:	sub	x1, x1, x2
   506d8:	str	x1, [sp, #320]
   506dc:	ands	x1, x21, #0x400000
   506e0:	mov	w2, #0x53                  	// #83
   506e4:	str	x1, [sp, #240]
   506e8:	mov	w1, #0x43                  	// #67
   506ec:	csel	w1, w2, w1, ne  // ne = any
   506f0:	str	w1, [sp, #376]
   506f4:	ands	x1, x21, #0x800000
   506f8:	cmp	x1, #0x0
   506fc:	mov	x1, #0xffffffffff000000    	// #-16777216
   50700:	csel	x1, x1, xzr, ne  // ne = any
   50704:	ands	x2, x21, #0x1000000
   50708:	add	x0, x0, x1
   5070c:	str	x2, [sp, #176]
   50710:	add	x0, x26, x0, lsl #2
   50714:	add	x1, x0, #0x8
   50718:	add	x0, x0, #0xa
   5071c:	csel	x0, x1, x0, eq  // eq = none
   50720:	ands	x1, x21, #0x800000
   50724:	cmp	x1, #0x0
   50728:	str	x0, [sp, #272]
   5072c:	ubfiz	x0, x27, #2, #8
   50730:	cneg	x0, x0, eq  // eq = none
   50734:	str	x0, [sp, #112]
   50738:	ldr	w0, [sp, #112]
   5073c:	str	w0, [sp, #236]
   50740:	mov	x0, #0x10                  	// #16
   50744:	stp	x0, x0, [sp, #256]
   50748:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   5074c:	add	x0, x0, #0xb70
   50750:	str	x0, [sp, #328]
   50754:	add	x0, x0, #0xe70
   50758:	str	x0, [sp, #104]
   5075c:	b	5084c <aarch64_get_opcode@@Base+0x6478>
   50760:	cmp	w2, #0x25
   50764:	b.ne	51004 <aarch64_get_opcode@@Base+0x6c30>  // b.any
   50768:	ldrb	w0, [x28, #1]
   5076c:	add	x23, x28, #0x1
   50770:	cmp	w0, #0x74
   50774:	b.hi	50e98 <aarch64_get_opcode@@Base+0x6ac4>  // b.pmore
   50778:	cmp	w0, #0x40
   5077c:	b.hi	507fc <aarch64_get_opcode@@Base+0x6428>  // b.pmore
   50780:	cmp	w0, #0x25
   50784:	b.eq	50820 <aarch64_get_opcode@@Base+0x644c>  // b.none
   50788:	sub	w0, w0, #0x30
   5078c:	and	w0, w0, #0xff
   50790:	cmp	w0, #0x9
   50794:	b.hi	50e98 <aarch64_get_opcode@@Base+0x6ac4>  // b.pmore
   50798:	mov	x0, x23
   5079c:	add	x3, sp, #0x184
   507a0:	add	x2, sp, #0x188
   507a4:	mov	x1, x21
   507a8:	bl	4aea8 <aarch64_get_opcode@@Base+0xad4>
   507ac:	mov	x23, x0
   507b0:	ldrb	w0, [x0]
   507b4:	cmp	w0, #0x64
   507b8:	b.ls	50e80 <aarch64_get_opcode@@Base+0x6aac>  // b.plast
   507bc:	cmp	w0, #0x72
   507c0:	b.eq	50ecc <aarch64_get_opcode@@Base+0x6af8>  // b.none
   507c4:	cmp	w0, #0x78
   507c8:	b.ne	50e98 <aarch64_get_opcode@@Base+0x6ac4>  // b.any
   507cc:	ldr	x2, [sp, #392]
   507d0:	mov	x0, x20
   507d4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   507d8:	add	x1, x1, #0xd9b
   507dc:	blr	x19
   507e0:	and	x0, x21, #0xfffffff
   507e4:	mov	x1, #0xff00000             	// #267386880
   507e8:	cmp	x0, x1
   507ec:	b.ne	50fc4 <aarch64_get_opcode@@Base+0x6bf0>  // b.any
   507f0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   507f4:	add	x1, x1, #0xe5
   507f8:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   507fc:	sub	w0, w0, #0x41
   50800:	cmp	w0, #0x33
   50804:	b.hi	50e98 <aarch64_get_opcode@@Base+0x6ac4>  // b.pmore
   50808:	adrp	x1, 69000 <fields@@Base+0x105a8>
   5080c:	add	x1, x1, #0x450
   50810:	ldrh	w0, [x1, w0, uxtw #1]
   50814:	adr	x1, 50820 <aarch64_get_opcode@@Base+0x644c>
   50818:	add	x0, x1, w0, sxth #2
   5081c:	br	x0
   50820:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50824:	add	x1, x1, #0xa5f
   50828:	mov	x0, x20
   5082c:	blr	x19
   50830:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50834:	mov	x2, x21
   50838:	mov	x1, x24
   5083c:	mov	x0, x26
   50840:	bl	4d584 <aarch64_get_opcode@@Base+0x31b0>
   50844:	mov	x22, x0
   50848:	add	x28, x23, #0x1
   5084c:	ldrb	w2, [x28]
   50850:	cbnz	w2, 50760 <aarch64_get_opcode@@Base+0x638c>
   50854:	add	x0, x22, #0x10
   50858:	cmp	x0, #0x30
   5085c:	b.ls	50874 <aarch64_get_opcode@@Base+0x64a0>  // b.plast
   50860:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50864:	mov	w2, w22
   50868:	add	x1, x1, #0xaab
   5086c:	mov	x0, x20
   50870:	blr	x19
   50874:	cbz	w25, 50888 <aarch64_get_opcode@@Base+0x64b4>
   50878:	adrp	x1, 60000 <fields@@Base+0x75a8>
   5087c:	mov	x0, x20
   50880:	add	x1, x1, #0x203
   50884:	blr	x19
   50888:	ldp	x19, x20, [sp, #16]
   5088c:	ldp	x21, x22, [sp, #32]
   50890:	ldp	x23, x24, [sp, #48]
   50894:	ldp	x25, x26, [sp, #64]
   50898:	ldp	x27, x28, [sp, #80]
   5089c:	ldp	x29, x30, [sp], #400
   508a0:	ret
   508a4:	orr	x2, x21, #0x1000000
   508a8:	b	50838 <aarch64_get_opcode@@Base+0x6464>
   508ac:	mov	w28, #0x1                   	// #1
   508b0:	mov	x0, #0x4f0000              	// #5177344
   508b4:	and	x0, x21, x0
   508b8:	cmp	x0, #0x4f0, lsl #12
   508bc:	b.ne	50984 <aarch64_get_opcode@@Base+0x65b0>  // b.any
   508c0:	ldr	x0, [sp, #176]
   508c4:	cbz	x0, 50960 <aarch64_get_opcode@@Base+0x658c>
   508c8:	ldr	x0, [sp, #128]
   508cc:	cbnz	x0, 508f8 <aarch64_get_opcode@@Base+0x6524>
   508d0:	ldr	x0, [sp, #168]
   508d4:	cbz	x0, 50954 <aarch64_get_opcode@@Base+0x6580>
   508d8:	mov	x0, x20
   508dc:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   508e0:	add	x1, x1, #0xa6
   508e4:	blr	x19
   508e8:	mov	x0, #0x0                   	// #0
   508ec:	b	5093c <aarch64_get_opcode@@Base+0x6568>
   508f0:	mov	w28, #0x0                   	// #0
   508f4:	b	508b0 <aarch64_get_opcode@@Base+0x64dc>
   508f8:	ldr	x1, [sp, #168]
   508fc:	adrp	x0, 53000 <xexit@@Base+0x508>
   50900:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   50904:	add	x0, x0, #0x95f
   50908:	add	x2, x2, #0x63
   5090c:	cmp	x1, #0x0
   50910:	csel	x2, x2, x0, eq  // eq = none
   50914:	ldr	w3, [sp, #232]
   50918:	mov	x0, x20
   5091c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50920:	add	x1, x1, #0x97
   50924:	blr	x19
   50928:	ldr	x0, [sp, #168]
   5092c:	ldr	x1, [sp, #360]
   50930:	cmp	x0, #0x0
   50934:	ldr	x0, [sp, #128]
   50938:	csel	x0, x0, x1, ne  // ne = any
   5093c:	ldr	x2, [x24, #120]
   50940:	mov	x1, x24
   50944:	ldr	x3, [sp, #368]
   50948:	add	x0, x0, x3
   5094c:	blr	x2
   50950:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50954:	adrp	x2, 5c000 <fields@@Base+0x35a8>
   50958:	add	x2, x2, #0x63
   5095c:	b	50914 <aarch64_get_opcode@@Base+0x6540>
   50960:	ldr	w3, [sp, #232]
   50964:	mov	x0, x20
   50968:	ldr	x2, [sp, #120]
   5096c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50970:	add	x1, x1, #0xae
   50974:	blr	x19
   50978:	cmp	w28, #0x0
   5097c:	csinc	w25, w25, wzr, ne  // ne = any
   50980:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50984:	adrp	x4, ee000 <aarch64_opcode_table@@Base+0x55a18>
   50988:	mov	x3, #0x12                  	// #18
   5098c:	ldr	x1, [sp, #208]
   50990:	ldr	w0, [x4, #1624]
   50994:	madd	x0, x0, x3, x1
   50998:	ldr	x1, [sp, #104]
   5099c:	add	x0, x0, #0x2
   509a0:	ldr	x2, [x1, x0, lsl #3]
   509a4:	mov	x0, x20
   509a8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   509ac:	add	x1, x1, #0xc6e
   509b0:	blr	x19
   509b4:	ldr	x0, [sp, #176]
   509b8:	mov	x3, #0x12                  	// #18
   509bc:	adrp	x4, ee000 <aarch64_opcode_table@@Base+0x55a18>
   509c0:	cbz	x0, 50a60 <aarch64_get_opcode@@Base+0x668c>
   509c4:	ldr	x0, [sp, #240]
   509c8:	cbz	x0, 50a18 <aarch64_get_opcode@@Base+0x6644>
   509cc:	mov	x0, #0xa00000              	// #10485760
   509d0:	and	x0, x21, x0
   509d4:	cmp	x0, #0x800, lsl #12
   509d8:	b.ne	509e4 <aarch64_get_opcode@@Base+0x6610>  // b.any
   509dc:	ldr	w0, [sp, #192]
   509e0:	cbz	w0, 509fc <aarch64_get_opcode@@Base+0x6628>
   509e4:	ldr	w3, [sp, #192]
   509e8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   509ec:	ldr	x2, [sp, #120]
   509f0:	add	x1, x1, #0xb2
   509f4:	mov	x0, x20
   509f8:	blr	x19
   509fc:	ldr	x22, [sp, #184]
   50a00:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50a04:	ldr	x2, [sp, #280]
   50a08:	add	x1, x1, #0xadb
   50a0c:	mov	x0, x20
   50a10:	blr	x19
   50a14:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50a18:	ldr	w0, [x4, #1624]
   50a1c:	ldr	x1, [sp, #152]
   50a20:	ldr	x2, [sp, #120]
   50a24:	madd	x0, x0, x3, x1
   50a28:	ldr	x1, [sp, #104]
   50a2c:	add	x0, x0, #0x2
   50a30:	ldr	x3, [x1, x0, lsl #3]
   50a34:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50a38:	mov	x0, x20
   50a3c:	add	x1, x1, #0xbb
   50a40:	blr	x19
   50a44:	cbnz	w28, 50a00 <aarch64_get_opcode@@Base+0x662c>
   50a48:	ldr	x0, [sp, #160]
   50a4c:	cbz	x0, 50a00 <aarch64_get_opcode@@Base+0x662c>
   50a50:	ldr	x0, [sp, #216]
   50a54:	cmp	x0, #0x0
   50a58:	csinc	w25, w25, wzr, ne  // ne = any
   50a5c:	b	50a00 <aarch64_get_opcode@@Base+0x662c>
   50a60:	ldr	x0, [sp, #240]
   50a64:	cbz	x0, 50aa4 <aarch64_get_opcode@@Base+0x66d0>
   50a68:	ldr	w3, [sp, #192]
   50a6c:	mov	x0, x20
   50a70:	ldr	x2, [sp, #120]
   50a74:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50a78:	add	x1, x1, #0xb1
   50a7c:	blr	x19
   50a80:	ldr	x22, [sp, #184]
   50a84:	cbnz	w28, 50848 <aarch64_get_opcode@@Base+0x6474>
   50a88:	ldr	x0, [sp, #160]
   50a8c:	cbnz	x0, 510ec <aarch64_get_opcode@@Base+0x6d18>
   50a90:	mov	x0, #0xf                   	// #15
   50a94:	movk	x0, #0x40, lsl #16
   50a98:	and	x0, x21, x0
   50a9c:	cmp	x0, #0xf
   50aa0:	b	5097c <aarch64_get_opcode@@Base+0x65a8>
   50aa4:	ldr	w0, [x4, #1624]
   50aa8:	ldr	x1, [sp, #152]
   50aac:	ldr	x2, [sp, #120]
   50ab0:	madd	x0, x0, x3, x1
   50ab4:	ldr	x1, [sp, #104]
   50ab8:	add	x0, x0, #0x2
   50abc:	ldr	x3, [x1, x0, lsl #3]
   50ac0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50ac4:	mov	x0, x20
   50ac8:	add	x1, x1, #0xba
   50acc:	blr	x19
   50ad0:	cbnz	w28, 50848 <aarch64_get_opcode@@Base+0x6474>
   50ad4:	ldr	x0, [sp, #216]
   50ad8:	cmp	x0, #0x0
   50adc:	csinc	w25, w25, wzr, ne  // ne = any
   50ae0:	b	50a88 <aarch64_get_opcode@@Base+0x66b4>
   50ae4:	ldr	x2, [x24, #120]
   50ae8:	mov	x1, x24
   50aec:	ldr	x0, [sp, #296]
   50af0:	blr	x2
   50af4:	mov	w0, #0x1                   	// #1
   50af8:	strb	w0, [x24, #196]
   50afc:	mov	w0, #0x2                   	// #2
   50b00:	str	w0, [x24, #200]
   50b04:	ldr	x0, [sp, #296]
   50b08:	str	x0, [x24, #208]
   50b0c:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50b10:	ldr	x0, [sp, #224]
   50b14:	cmp	x0, #0xe
   50b18:	b.eq	50848 <aarch64_get_opcode@@Base+0x6474>  // b.none
   50b1c:	ldr	x0, [sp, #328]
   50b20:	ldr	x1, [sp, #224]
   50b24:	add	x0, x0, #0xde8
   50b28:	ldr	x2, [x0, x1, lsl #3]
   50b2c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50b30:	add	x1, x1, #0xa63
   50b34:	b	50a0c <aarch64_get_opcode@@Base+0x6638>
   50b38:	mov	x0, x20
   50b3c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50b40:	adrp	x28, ee000 <aarch64_opcode_table@@Base+0x55a18>
   50b44:	add	x1, x1, #0xaa4
   50b48:	add	x28, x28, #0x658
   50b4c:	blr	x19
   50b50:	mov	w3, #0x0                   	// #0
   50b54:	mov	w2, #0x0                   	// #0
   50b58:	mov	w0, #0x1                   	// #1
   50b5c:	lsl	w0, w0, w3
   50b60:	sxtw	x0, w0
   50b64:	tst	x0, x21
   50b68:	b.eq	50bc0 <aarch64_get_opcode@@Base+0x67ec>  // b.none
   50b6c:	cbz	w2, 50b88 <aarch64_get_opcode@@Base+0x67b4>
   50b70:	str	w3, [sp, #380]
   50b74:	mov	x0, x20
   50b78:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50b7c:	add	x1, x1, #0x17e
   50b80:	blr	x19
   50b84:	ldr	w3, [sp, #380]
   50b88:	ldr	w0, [x28]
   50b8c:	mov	x1, #0x12                  	// #18
   50b90:	str	w3, [sp, #380]
   50b94:	mul	x0, x0, x1
   50b98:	ldr	x1, [sp, #104]
   50b9c:	add	x0, x0, w3, sxtw
   50ba0:	add	x0, x0, #0x2
   50ba4:	ldr	x2, [x1, x0, lsl #3]
   50ba8:	mov	x0, x20
   50bac:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50bb0:	add	x1, x1, #0xa63
   50bb4:	blr	x19
   50bb8:	ldr	w3, [sp, #380]
   50bbc:	mov	w2, #0x1                   	// #1
   50bc0:	add	w3, w3, #0x1
   50bc4:	cmp	w3, #0x10
   50bc8:	b.ne	50b58 <aarch64_get_opcode@@Base+0x6784>  // b.any
   50bcc:	str	w2, [sp, #380]
   50bd0:	mov	x0, x20
   50bd4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50bd8:	add	x1, x1, #0xb12
   50bdc:	blr	x19
   50be0:	ldr	w2, [sp, #380]
   50be4:	cmp	w2, #0x0
   50be8:	b	5097c <aarch64_get_opcode@@Base+0x65a8>
   50bec:	mov	w3, #0x0                   	// #0
   50bf0:	mov	x2, x20
   50bf4:	mov	x1, x19
   50bf8:	mov	x0, x21
   50bfc:	bl	4d3c4 <aarch64_get_opcode@@Base+0x2ff0>
   50c00:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50c04:	tbz	w21, #25, 50c70 <aarch64_get_opcode@@Base+0x689c>
   50c08:	mov	w0, #0x0                   	// #0
   50c0c:	ldr	w2, [sp, #292]
   50c10:	neg	w1, w0
   50c14:	ror	w1, w2, w1
   50c18:	cmp	w1, #0xff
   50c1c:	b.ls	50c4c <aarch64_get_opcode@@Base+0x6878>  // b.plast
   50c20:	add	w0, w0, #0x2
   50c24:	cmp	w0, #0x20
   50c28:	b.ne	50c0c <aarch64_get_opcode@@Base+0x6838>  // b.any
   50c2c:	ldr	w3, [sp, #148]
   50c30:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50c34:	mov	w2, w27
   50c38:	add	x1, x1, #0xc2
   50c3c:	mov	x0, x20
   50c40:	blr	x19
   50c44:	ldr	x22, [sp, #344]
   50c48:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50c4c:	ldr	w1, [sp, #148]
   50c50:	cmp	w1, w0
   50c54:	b.ne	50c2c <aarch64_get_opcode@@Base+0x6858>  // b.any
   50c58:	ldr	w2, [sp, #292]
   50c5c:	mov	x0, x20
   50c60:	adrp	x1, 54000 <xexit@@Base+0x1508>
   50c64:	add	x1, x1, #0x94
   50c68:	blr	x19
   50c6c:	b	50c44 <aarch64_get_opcode@@Base+0x6870>
   50c70:	mov	w3, #0x1                   	// #1
   50c74:	b	50bf0 <aarch64_get_opcode@@Base+0x681c>
   50c78:	and	x0, x21, #0xf000
   50c7c:	cmp	x0, #0xf, lsl #12
   50c80:	b.ne	50848 <aarch64_get_opcode@@Base+0x6474>  // b.any
   50c84:	ldr	x0, [sp, #136]
   50c88:	ldr	x0, [x0]
   50c8c:	tbnz	w0, #12, 510ec <aarch64_get_opcode@@Base+0x6d18>
   50c90:	adrp	x1, 55000 <xexit@@Base+0x2508>
   50c94:	add	x1, x1, #0x723
   50c98:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   50c9c:	mov	x0, #0x1200000             	// #18874368
   50ca0:	and	x0, x21, x0
   50ca4:	cmp	x0, #0x200, lsl #12
   50ca8:	b.ne	50848 <aarch64_get_opcode@@Base+0x6474>  // b.any
   50cac:	adrp	x1, 59000 <fields@@Base+0x5a8>
   50cb0:	add	x1, x1, #0xe54
   50cb4:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   50cb8:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   50cbc:	mov	x1, #0x12                  	// #18
   50cc0:	ldr	x2, [sp, #208]
   50cc4:	ldr	w0, [x0, #1624]
   50cc8:	madd	x0, x0, x1, x2
   50ccc:	ldr	x1, [sp, #104]
   50cd0:	add	x0, x0, #0x2
   50cd4:	ldr	x2, [x1, x0, lsl #3]
   50cd8:	mov	x0, x20
   50cdc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50ce0:	add	x1, x1, #0xc6e
   50ce4:	blr	x19
   50ce8:	ldr	x0, [sp, #176]
   50cec:	cbz	x0, 50d28 <aarch64_get_opcode@@Base+0x6954>
   50cf0:	cbz	w27, 50d14 <aarch64_get_opcode@@Base+0x6940>
   50cf4:	ldr	w2, [sp, #236]
   50cf8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50cfc:	ldr	x3, [sp, #280]
   50d00:	add	x1, x1, #0xad6
   50d04:	mov	x0, x20
   50d08:	blr	x19
   50d0c:	ldr	x22, [sp, #112]
   50d10:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50d14:	mov	x0, x20
   50d18:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50d1c:	add	x1, x1, #0xae4
   50d20:	blr	x19
   50d24:	b	50d0c <aarch64_get_opcode@@Base+0x6938>
   50d28:	mov	x0, x20
   50d2c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50d30:	add	x1, x1, #0xae4
   50d34:	blr	x19
   50d38:	ldr	x0, [sp, #160]
   50d3c:	cbz	x0, 50d5c <aarch64_get_opcode@@Base+0x6988>
   50d40:	cbz	w27, 50d0c <aarch64_get_opcode@@Base+0x6938>
   50d44:	ldr	w2, [sp, #236]
   50d48:	mov	x0, x20
   50d4c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   50d50:	add	x1, x1, #0x92
   50d54:	blr	x19
   50d58:	b	50d0c <aarch64_get_opcode@@Base+0x6938>
   50d5c:	mov	w2, w27
   50d60:	mov	x0, x20
   50d64:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50d68:	sxtw	x22, w27
   50d6c:	add	x1, x1, #0xca
   50d70:	blr	x19
   50d74:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50d78:	ldr	x2, [x24, #120]
   50d7c:	mov	x1, x24
   50d80:	ldr	x0, [sp, #272]
   50d84:	blr	x2
   50d88:	mov	w0, #0x1                   	// #1
   50d8c:	strb	w0, [x24, #196]
   50d90:	mov	w0, #0x2                   	// #2
   50d94:	str	w0, [x24, #200]
   50d98:	ldr	x0, [sp, #272]
   50d9c:	b	50b08 <aarch64_get_opcode@@Base+0x6734>
   50da0:	and	x0, x21, #0x3fffe00
   50da4:	and	x0, x0, #0xfffffffffe0003ff
   50da8:	cmp	x0, #0x200
   50dac:	b.ne	50dd0 <aarch64_get_opcode@@Base+0x69fc>  // b.any
   50db0:	ldr	w0, [sp, #196]
   50db4:	bl	4a52c <aarch64_get_opcode@@Base+0x158>
   50db8:	mov	x2, x0
   50dbc:	cbnz	x0, 50b2c <aarch64_get_opcode@@Base+0x6758>
   50dc0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50dc4:	add	x1, x1, #0xd1
   50dc8:	ldr	x2, [sp, #248]
   50dcc:	b	50a0c <aarch64_get_opcode@@Base+0x6638>
   50dd0:	ldr	w2, [sp, #376]
   50dd4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50dd8:	mov	x0, x20
   50ddc:	add	x1, x1, #0xde
   50de0:	blr	x19
   50de4:	tbz	w21, #19, 50df8 <aarch64_get_opcode@@Base+0x6a24>
   50de8:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   50dec:	mov	x0, x20
   50df0:	add	x1, x1, #0x989
   50df4:	blr	x19
   50df8:	tbz	w21, #18, 50e0c <aarch64_get_opcode@@Base+0x6a38>
   50dfc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50e00:	mov	x0, x20
   50e04:	add	x1, x1, #0xa64
   50e08:	blr	x19
   50e0c:	tbz	w21, #17, 50e20 <aarch64_get_opcode@@Base+0x6a4c>
   50e10:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   50e14:	mov	x0, x20
   50e18:	add	x1, x1, #0xd63
   50e1c:	blr	x19
   50e20:	tbz	w21, #16, 50848 <aarch64_get_opcode@@Base+0x6474>
   50e24:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   50e28:	add	x1, x1, #0xdcb
   50e2c:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   50e30:	and	x0, x21, #0xf0
   50e34:	cmp	x0, #0x60
   50e38:	b.ne	50e54 <aarch64_get_opcode@@Base+0x6a80>  // b.any
   50e3c:	ldr	x0, [sp, #152]
   50e40:	cmp	x0, #0xf
   50e44:	b.ne	50e68 <aarch64_get_opcode@@Base+0x6a94>  // b.any
   50e48:	adrp	x1, 58000 <xexit@@Base+0x5508>
   50e4c:	add	x1, x1, #0x337
   50e50:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   50e54:	ldr	w0, [sp, #340]
   50e58:	and	w0, w0, #0xf
   50e5c:	bl	4a730 <aarch64_get_opcode@@Base+0x35c>
   50e60:	mov	x2, x0
   50e64:	cbnz	x0, 50b2c <aarch64_get_opcode@@Base+0x6758>
   50e68:	ldr	w2, [sp, #288]
   50e6c:	mov	x0, x20
   50e70:	adrp	x1, 54000 <xexit@@Base+0x1508>
   50e74:	add	x1, x1, #0x94
   50e78:	blr	x19
   50e7c:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50e80:	cmp	w0, #0x51
   50e84:	b.hi	50e9c <aarch64_get_opcode@@Base+0x6ac8>  // b.pmore
   50e88:	cmp	w0, #0x27
   50e8c:	b.eq	51018 <aarch64_get_opcode@@Base+0x6c44>  // b.none
   50e90:	cmp	w0, #0x3f
   50e94:	b.eq	51040 <aarch64_get_opcode@@Base+0x6c6c>  // b.none
   50e98:	bl	356c0 <abort@plt>
   50e9c:	sub	w0, w0, #0x52
   50ea0:	cmp	w0, #0x12
   50ea4:	b.hi	50e98 <aarch64_get_opcode@@Base+0x6ac4>  // b.pmore
   50ea8:	adrp	x1, 69000 <fields@@Base+0x105a8>
   50eac:	add	x1, x1, #0x4b8
   50eb0:	ldrb	w0, [x1, w0, uxtw]
   50eb4:	adr	x1, 50ec0 <aarch64_get_opcode@@Base+0x6aec>
   50eb8:	add	x0, x1, w0, sxtb #2
   50ebc:	br	x0
   50ec0:	ldr	x0, [sp, #392]
   50ec4:	cmp	x0, #0xf
   50ec8:	csinc	w25, w25, wzr, ne  // ne = any
   50ecc:	ldrb	w2, [x23, #1]
   50ed0:	add	x0, x23, #0x1
   50ed4:	ldr	x1, [sp, #392]
   50ed8:	cmp	w2, #0x75
   50edc:	b.ne	50f40 <aarch64_get_opcode@@Base+0x6b6c>  // b.any
   50ee0:	ldr	x2, [sp, #256]
   50ee4:	cmp	x2, x1
   50ee8:	b.ne	50f48 <aarch64_get_opcode@@Base+0x6b74>  // b.any
   50eec:	mov	w25, #0x1                   	// #1
   50ef0:	ldrb	w2, [x0, #1]
   50ef4:	add	x23, x0, #0x1
   50ef8:	cmp	w2, #0x55
   50efc:	b.ne	50f50 <aarch64_get_opcode@@Base+0x6b7c>  // b.any
   50f00:	ldr	x0, [sp, #264]
   50f04:	cmp	x0, x1
   50f08:	b.ne	50f58 <aarch64_get_opcode@@Base+0x6b84>  // b.any
   50f0c:	mov	w25, #0x1                   	// #1
   50f10:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   50f14:	mov	x2, #0x12                  	// #18
   50f18:	ldr	w0, [x0, #1624]
   50f1c:	madd	x0, x0, x2, x1
   50f20:	ldr	x1, [sp, #104]
   50f24:	add	x0, x0, #0x2
   50f28:	ldr	x2, [x1, x0, lsl #3]
   50f2c:	b	50b2c <aarch64_get_opcode@@Base+0x6758>
   50f30:	ldr	x0, [sp, #392]
   50f34:	add	x0, x0, #0x1
   50f38:	str	x0, [sp, #392]
   50f3c:	b	50ecc <aarch64_get_opcode@@Base+0x6af8>
   50f40:	mov	x0, x23
   50f44:	b	50ef0 <aarch64_get_opcode@@Base+0x6b1c>
   50f48:	str	x1, [sp, #256]
   50f4c:	b	50ef0 <aarch64_get_opcode@@Base+0x6b1c>
   50f50:	mov	x23, x0
   50f54:	b	50f10 <aarch64_get_opcode@@Base+0x6b3c>
   50f58:	str	x1, [sp, #264]
   50f5c:	b	50f10 <aarch64_get_opcode@@Base+0x6b3c>
   50f60:	ldr	x2, [sp, #392]
   50f64:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50f68:	add	x1, x1, #0xaa7
   50f6c:	mov	x0, x20
   50f70:	blr	x19
   50f74:	ldr	x22, [sp, #392]
   50f78:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50f7c:	ldr	x2, [sp, #392]
   50f80:	mov	x0, x20
   50f84:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50f88:	add	x1, x1, #0xaa7
   50f8c:	lsl	x2, x2, #3
   50f90:	blr	x19
   50f94:	ldr	x22, [sp, #392]
   50f98:	lsl	x22, x22, #3
   50f9c:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50fa0:	ldr	x2, [sp, #392]
   50fa4:	mov	x0, x20
   50fa8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   50fac:	add	x1, x1, #0xaa7
   50fb0:	add	x2, x2, #0x1
   50fb4:	blr	x19
   50fb8:	ldr	x22, [sp, #392]
   50fbc:	add	x22, x22, #0x1
   50fc0:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   50fc4:	mov	x1, #0x1                   	// #1
   50fc8:	movk	x1, #0xff0, lsl #16
   50fcc:	cmp	x0, x1
   50fd0:	b.ne	50848 <aarch64_get_opcode@@Base+0x6474>  // b.any
   50fd4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50fd8:	add	x1, x1, #0xec
   50fdc:	b	50828 <aarch64_get_opcode@@Base+0x6454>
   50fe0:	ldr	x2, [sp, #392]
   50fe4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   50fe8:	add	x1, x1, #0xf8
   50fec:	and	x2, x2, #0xf
   50ff0:	b	50f6c <aarch64_get_opcode@@Base+0x6b98>
   50ff4:	ldr	x0, [sp, #392]
   50ff8:	add	x28, x23, #0x1
   50ffc:	cbnz	x0, 51038 <aarch64_get_opcode@@Base+0x6c64>
   51000:	ldrb	w2, [x23, #1]
   51004:	mov	x0, x20
   51008:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   5100c:	add	x1, x1, #0xdca
   51010:	blr	x19
   51014:	b	51038 <aarch64_get_opcode@@Base+0x6c64>
   51018:	ldr	w1, [sp, #388]
   5101c:	mov	x0, #0x1                   	// #1
   51020:	add	x28, x23, #0x1
   51024:	lsl	x0, x0, x1
   51028:	sub	x0, x0, #0x1
   5102c:	ldr	x1, [sp, #392]
   51030:	cmp	x0, x1
   51034:	b.eq	51000 <aarch64_get_opcode@@Base+0x6c2c>  // b.none
   51038:	mov	x23, x28
   5103c:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   51040:	ldr	w0, [sp, #388]
   51044:	mov	w28, #0x1                   	// #1
   51048:	ldr	x1, [sp, #392]
   5104c:	lsl	w0, w28, w0
   51050:	sub	w0, w0, w1
   51054:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   51058:	add	x1, x1, #0xdca
   5105c:	ldrb	w2, [x23, w0, sxtw]
   51060:	mov	x0, x20
   51064:	blr	x19
   51068:	ldr	w0, [sp, #388]
   5106c:	lsl	w28, w28, w0
   51070:	add	x23, x23, w28, sxtw
   51074:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   51078:	ldr	w2, [sp, #336]
   5107c:	mov	x0, x20
   51080:	adrp	x1, 62000 <fields@@Base+0x95a8>
   51084:	add	x1, x1, #0x23e
   51088:	blr	x19
   5108c:	ldr	x22, [sp, #352]
   51090:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   51094:	ldr	x0, [sp, #320]
   51098:	cmp	x0, #0x0
   5109c:	b.le	510bc <aarch64_get_opcode@@Base+0x6ce8>
   510a0:	ldr	x2, [sp, #200]
   510a4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   510a8:	mov	x3, x0
   510ac:	add	x1, x1, #0xfe
   510b0:	mov	x0, x20
   510b4:	blr	x19
   510b8:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   510bc:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   510c0:	add	x1, x1, #0x109
   510c4:	ldr	x2, [sp, #200]
   510c8:	ldr	x3, [sp, #312]
   510cc:	b	510b0 <aarch64_get_opcode@@Base+0x6cdc>
   510d0:	ldr	x2, [sp, #304]
   510d4:	mov	x0, x20
   510d8:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   510dc:	add	x1, x1, #0x104
   510e0:	blr	x19
   510e4:	ldr	x22, [sp, #304]
   510e8:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   510ec:	mov	w25, #0x1                   	// #1
   510f0:	b	50848 <aarch64_get_opcode@@Base+0x6474>
   510f4:	add	x0, x0, #0x30
   510f8:	b	504e4 <aarch64_get_opcode@@Base+0x6110>
   510fc:	stp	x29, x30, [sp, #-448]!
   51100:	mov	x29, sp
   51104:	stp	x23, x24, [sp, #48]
   51108:	mov	x23, x0
   5110c:	ldr	x0, [x1, #96]
   51110:	stp	x19, x20, [sp, #16]
   51114:	stp	x21, x22, [sp, #32]
   51118:	mov	x22, x1
   5111c:	mov	x21, x2
   51120:	ldp	x20, x19, [x1]
   51124:	stp	x25, x26, [sp, #64]
   51128:	ldp	x1, x0, [x0]
   5112c:	stp	x27, x28, [sp, #80]
   51130:	tbz	w0, #15, 511cc <aarch64_get_opcode@@Base+0x6df8>
   51134:	cmn	x1, #0x1
   51138:	b.ne	511d4 <aarch64_get_opcode@@Base+0x6e00>  // b.any
   5113c:	mov	x1, #0xffffffffffcfffff    	// #-3145729
   51140:	cmp	x0, x1
   51144:	cset	w24, ne  // ne = any
   51148:	adrp	x0, 91000 <aarch64_operands@@Base+0x10bc0>
   5114c:	mov	x3, x21
   51150:	mov	x2, x22
   51154:	mov	x1, x23
   51158:	add	x0, x0, #0xe70
   5115c:	mov	w4, #0x1                   	// #1
   51160:	bl	4b62c <aarch64_get_opcode@@Base+0x1258>
   51164:	cbnz	w0, 515e4 <aarch64_get_opcode@@Base+0x7210>
   51168:	cbnz	w24, 52070 <aarch64_get_opcode@@Base+0x7c9c>
   5116c:	mov	x1, x21
   51170:	mov	x0, x22
   51174:	mov	w2, #0x1                   	// #1
   51178:	bl	4c768 <aarch64_get_opcode@@Base+0x2394>
   5117c:	cbnz	w0, 515e4 <aarch64_get_opcode@@Base+0x7210>
   51180:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   51184:	add	x0, x0, #0xc70
   51188:	mov	x3, x21
   5118c:	mov	x2, x22
   51190:	mov	x1, x23
   51194:	add	x0, x0, #0x4d0
   51198:	mov	w4, #0x1                   	// #1
   5119c:	bl	4b62c <aarch64_get_opcode@@Base+0x1258>
   511a0:	cbnz	w0, 515e4 <aarch64_get_opcode@@Base+0x7210>
   511a4:	adrp	x0, 84000 <aarch64_operands@@Base+0x3bc0>
   511a8:	add	x0, x0, #0x4c0
   511ac:	ldr	x28, [x0, #40]
   511b0:	cbnz	x28, 511dc <aarch64_get_opcode@@Base+0x6e08>
   511b4:	mov	w2, w21
   511b8:	mov	x0, x19
   511bc:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   511c0:	add	x1, x1, #0x11c
   511c4:	blr	x20
   511c8:	b	515e4 <aarch64_get_opcode@@Base+0x7210>
   511cc:	mov	w24, #0x0                   	// #0
   511d0:	b	51148 <aarch64_get_opcode@@Base+0x6d74>
   511d4:	mov	w24, #0x1                   	// #1
   511d8:	b	51148 <aarch64_get_opcode@@Base+0x6d74>
   511dc:	ldp	x2, x1, [x0, #24]
   511e0:	and	x1, x21, x1
   511e4:	cmp	x1, x2
   511e8:	b.ne	52068 <aarch64_get_opcode@@Base+0x7c94>  // b.any
   511ec:	ubfx	w0, w21, #24, #1
   511f0:	str	w0, [sp, #380]
   511f4:	ubfx	w0, w21, #21, #2
   511f8:	tst	w21, #0x1000000
   511fc:	adrp	x1, 56000 <xexit@@Base+0x3508>
   51200:	add	x1, x1, #0x2e4
   51204:	str	w0, [sp, #144]
   51208:	adrp	x0, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   5120c:	add	x0, x0, #0xb98
   51210:	asr	x2, x21, #11
   51214:	csel	x0, x1, x0, ne  // ne = any
   51218:	tst	w21, #0x1000000
   5121c:	adrp	x1, 56000 <xexit@@Base+0x3508>
   51220:	add	x1, x1, #0x2de
   51224:	str	x0, [sp, #368]
   51228:	adrp	x0, 60000 <fields@@Base+0x75a8>
   5122c:	add	x0, x0, #0x1e7
   51230:	asr	x4, x21, #13
   51234:	csel	x0, x1, x0, ne  // ne = any
   51238:	str	x0, [sp, #360]
   5123c:	asr	x0, x21, #10
   51240:	ubfiz	w3, w4, #18, #1
   51244:	ubfiz	w1, w2, #19, #1
   51248:	tst	w21, #0x4000000
   5124c:	and	w0, w0, #0x1c
   51250:	ubfx	w25, w21, #6, #2
   51254:	orr	w25, w25, w0
   51258:	orr	w1, w1, w3
   5125c:	asr	x0, x21, #4
   51260:	mov	x3, #0x100000              	// #1048576
   51264:	csel	x3, x3, xzr, eq  // eq = none
   51268:	ubfiz	x5, x21, #1, #11
   5126c:	orr	x1, x1, x3
   51270:	and	x3, x0, #0x3f000
   51274:	orr	x3, x3, x5
   51278:	asr	x7, x21, #16
   5127c:	orr	x1, x1, x3
   51280:	sub	x3, x23, #0xff, lsl #12
   51284:	sub	x3, x3, #0xffc
   51288:	ubfiz	w8, w7, #12, #1
   5128c:	add	x1, x1, x3
   51290:	str	x1, [sp, #208]
   51294:	ubfx	w1, w21, #16, #4
   51298:	str	w1, [sp, #128]
   5129c:	ubfx	w1, w21, #8, #4
   512a0:	str	w1, [sp, #220]
   512a4:	ubfx	w1, w21, #4, #2
   512a8:	str	w1, [sp, #224]
   512ac:	asr	x1, x21, #1
   512b0:	ubfiz	w9, w2, #1, #1
   512b4:	add	x10, x23, #0x4
   512b8:	str	x10, [sp, #352]
   512bc:	ubfiz	w1, w1, #2, #10
   512c0:	and	w26, w21, #0xff
   512c4:	orr	w8, w8, w1
   512c8:	orr	w1, w1, w9
   512cc:	orr	w3, w8, w9
   512d0:	orr	w11, w26, w26, lsl #8
   512d4:	tst	x8, #0x1000
   512d8:	sub	x10, x3, #0x2, lsl #12
   512dc:	csel	x3, x3, x10, eq  // eq = none
   512e0:	add	x8, x23, #0x4
   512e4:	add	x3, x3, x8
   512e8:	str	x3, [sp, #296]
   512ec:	asr	x3, x21, #23
   512f0:	tst	w21, #0x20000
   512f4:	mov	w8, #0x2                   	// #2
   512f8:	str	w21, [sp, #112]
   512fc:	ubfiz	w3, w3, #1, #4
   51300:	str	w3, [sp, #228]
   51304:	mov	w3, #0x4                   	// #4
   51308:	csel	w3, w3, w8, ne  // ne = any
   5130c:	ldr	w8, [sp, #228]
   51310:	ubfx	w6, w21, #26, #1
   51314:	str	w21, [sp, #156]
   51318:	and	w4, w4, #0x1
   5131c:	add	w3, w3, w8
   51320:	str	w3, [sp, #320]
   51324:	ubfiz	w3, w7, #12, #7
   51328:	and	w2, w2, #0x1
   5132c:	orr	w9, w3, w1
   51330:	orr	w3, w3, w1
   51334:	sub	x8, x3, #0x80, lsl #12
   51338:	mov	w27, w26
   5133c:	tst	x9, #0x40000
   51340:	csel	x3, x3, x8, eq  // eq = none
   51344:	add	x8, x23, #0x4
   51348:	add	x3, x3, x8
   5134c:	str	x3, [sp, #288]
   51350:	ubfiz	w3, w7, #12, #5
   51354:	orr	w9, w3, w1
   51358:	orr	w3, w3, w1
   5135c:	sub	x8, x3, #0x20, lsl #12
   51360:	tst	x9, #0x10000
   51364:	lsl	w9, w26, #8
   51368:	csel	x3, x3, x8, eq  // eq = none
   5136c:	add	x8, x23, #0x4
   51370:	add	x3, x3, x8
   51374:	and	w8, w0, #0xf000
   51378:	str	x3, [sp, #280]
   5137c:	and	w3, w21, #0xfff
   51380:	orr	w3, w3, w8
   51384:	str	w3, [sp, #148]
   51388:	orr	w9, w9, w26, lsl #24
   5138c:	str	w9, [sp, #388]
   51390:	sxtw	x3, w3
   51394:	str	x3, [sp, #232]
   51398:	and	w3, w0, #0x3
   5139c:	str	w3, [sp, #132]
   513a0:	ubfiz	w3, w0, #3, #2
   513a4:	str	w3, [sp, #324]
   513a8:	add	x3, x23, #0x4
   513ac:	orr	w9, w26, #0x80
   513b0:	add	x3, x3, w1, uxtw
   513b4:	str	x3, [sp, #304]
   513b8:	add	x3, x23, #0x4
   513bc:	sub	x1, x3, w1, uxtw
   513c0:	asr	x3, x21, #15
   513c4:	and	w3, w3, #0x800
   513c8:	str	x1, [sp, #312]
   513cc:	and	w1, w0, #0x700
   513d0:	and	x0, x0, #0x3ff000
   513d4:	orr	w3, w3, w1
   513d8:	orr	x0, x0, x5
   513dc:	orr	w1, w26, w3
   513e0:	str	w1, [sp, #240]
   513e4:	lsr	w1, w3, #8
   513e8:	str	w1, [sp, #152]
   513ec:	lsl	w1, w26, #16
   513f0:	orr	w10, w1, w26, lsl #24
   513f4:	orr	w1, w1, w26
   513f8:	str	w1, [sp, #392]
   513fc:	orr	w1, w26, w3
   51400:	orr	w10, w11, w10
   51404:	str	w10, [sp, #384]
   51408:	lsr	w1, w1, #7
   5140c:	ror	w1, w9, w1
   51410:	str	w1, [sp, #396]
   51414:	and	x1, x7, #0xf
   51418:	str	x1, [sp, #168]
   5141c:	and	x1, x21, #0xff
   51420:	ands	x9, x21, #0x800000
   51424:	and	x7, x23, #0xfffffffffffffffc
   51428:	str	x1, [sp, #176]
   5142c:	ubfiz	x1, x21, #2, #8
   51430:	add	x7, x7, #0x4
   51434:	cneg	x1, x1, eq  // eq = none
   51438:	str	x9, [sp, #184]
   5143c:	add	x1, x7, x1
   51440:	str	x1, [sp, #344]
   51444:	ldr	w1, [sp, #168]
   51448:	ubfiz	w7, w21, #12, #4
   5144c:	tst	x21, #0x100000
   51450:	sub	x23, x23, #0xfff, lsl #12
   51454:	orr	w7, w7, w1
   51458:	and	w1, w21, #0xff0
   5145c:	orr	w1, w7, w1
   51460:	str	w1, [sp, #244]
   51464:	sub	x23, x23, #0xffc
   51468:	str	wzr, [sp, #124]
   5146c:	sxtw	x1, w1
   51470:	str	x1, [sp, #400]
   51474:	orr	w1, w26, w8
   51478:	str	wzr, [sp, #192]
   5147c:	orr	w1, w1, w3
   51480:	str	w1, [sp, #248]
   51484:	and	w3, w21, #0x30
   51488:	sxtw	x1, w1
   5148c:	str	x1, [sp, #408]
   51490:	ldrsw	x1, [sp, #240]
   51494:	str	x1, [sp, #416]
   51498:	and	w1, w21, #0x1f
   5149c:	add	w1, w1, #0x1
   514a0:	str	w1, [sp, #164]
   514a4:	sub	w1, w1, w25
   514a8:	str	w1, [sp, #276]
   514ac:	asr	x1, x21, #14
   514b0:	and	w1, w1, #0x40
   514b4:	orr	w1, w1, w3
   514b8:	ubfx	w3, w21, #16, #4
   514bc:	orr	w3, w3, w1
   514c0:	str	w3, [sp, #252]
   514c4:	sxtw	x3, w3
   514c8:	str	x3, [sp, #336]
   514cc:	ubfx	w3, w21, #8, #4
   514d0:	orr	w1, w3, w1
   514d4:	str	w1, [sp, #272]
   514d8:	mov	w3, #0x53                  	// #83
   514dc:	sxtw	x1, w1
   514e0:	str	x1, [sp, #328]
   514e4:	mov	w1, #0x43                  	// #67
   514e8:	csel	w1, w3, w1, ne  // ne = any
   514ec:	cmp	w6, w4
   514f0:	str	w1, [sp, #376]
   514f4:	mov	x1, #0x800000              	// #8388608
   514f8:	csel	x1, x1, xzr, eq  // eq = none
   514fc:	cmp	w6, #0x0
   51500:	mov	x3, #0x1000000             	// #16777216
   51504:	csel	x3, x3, xzr, eq  // eq = none
   51508:	cmp	w6, w2
   5150c:	orr	x1, x1, x3
   51510:	orr	x0, x1, x0
   51514:	mov	x1, #0x400000              	// #4194304
   51518:	csel	x1, x1, xzr, eq  // eq = none
   5151c:	tst	x21, #0x1000
   51520:	orr	x0, x0, x1
   51524:	add	x0, x23, x0
   51528:	mov	x23, #0x0                   	// #0
   5152c:	and	x1, x0, #0xffffffff
   51530:	and	x1, x1, #0xfffffffffffffffd
   51534:	csel	x0, x0, x1, ne  // ne = any
   51538:	str	x0, [sp, #200]
   5153c:	ands	x0, x21, #0x800000
   51540:	mov	w1, #0x2b                  	// #43
   51544:	cmp	x0, #0x0
   51548:	mov	w0, #0x2d                  	// #45
   5154c:	csel	w0, w1, w0, ne  // ne = any
   51550:	str	w0, [sp, #216]
   51554:	lsl	w0, w26, #2
   51558:	str	w0, [sp, #160]
   5155c:	ands	x0, x21, #0x800000
   51560:	cmp	x0, #0x0
   51564:	mov	w0, #0xffffffff            	// #-1
   51568:	csinc	w0, w0, wzr, eq  // eq = none
   5156c:	cmp	w25, #0x0
   51570:	mul	w0, w0, w26
   51574:	lsl	w0, w0, #2
   51578:	str	x0, [sp, #256]
   5157c:	mov	w0, #0x20                  	// #32
   51580:	csel	w0, w25, w0, ne  // ne = any
   51584:	str	w0, [sp, #196]
   51588:	add	x0, sp, #0x1b4
   5158c:	str	x0, [sp, #424]
   51590:	adrp	x0, 82000 <aarch64_operands@@Base+0x1bc0>
   51594:	add	x0, x0, #0xb70
   51598:	str	x0, [sp, #136]
   5159c:	add	x0, x0, #0xe70
   515a0:	str	x0, [sp, #104]
   515a4:	ldrb	w2, [x28]
   515a8:	cbnz	w2, 51600 <aarch64_get_opcode@@Base+0x722c>
   515ac:	add	x0, x23, #0x10
   515b0:	cmp	x0, #0x30
   515b4:	b.ls	515cc <aarch64_get_opcode@@Base+0x71f8>  // b.plast
   515b8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   515bc:	mov	x2, x23
   515c0:	add	x1, x1, #0xaab
   515c4:	mov	x0, x19
   515c8:	blr	x20
   515cc:	ldr	w0, [sp, #124]
   515d0:	cbz	w0, 515e4 <aarch64_get_opcode@@Base+0x7210>
   515d4:	adrp	x1, 60000 <fields@@Base+0x75a8>
   515d8:	mov	x0, x19
   515dc:	add	x1, x1, #0x203
   515e0:	blr	x20
   515e4:	ldp	x19, x20, [sp, #16]
   515e8:	ldp	x21, x22, [sp, #32]
   515ec:	ldp	x23, x24, [sp, #48]
   515f0:	ldp	x25, x26, [sp, #64]
   515f4:	ldp	x27, x28, [sp, #80]
   515f8:	ldp	x29, x30, [sp], #448
   515fc:	ret
   51600:	cmp	w2, #0x25
   51604:	b.eq	5161c <aarch64_get_opcode@@Base+0x7248>  // b.none
   51608:	mov	x0, x19
   5160c:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   51610:	add	x1, x1, #0xdca
   51614:	blr	x20
   51618:	b	51f14 <aarch64_get_opcode@@Base+0x7b40>
   5161c:	ldrb	w0, [x28, #1]
   51620:	add	x24, x28, #0x1
   51624:	sub	w0, w0, #0x25
   51628:	cmp	w0, #0x53
   5162c:	b.hi	51e88 <aarch64_get_opcode@@Base+0x7ab4>  // b.pmore
   51630:	adrp	x1, 69000 <fields@@Base+0x105a8>
   51634:	add	x1, x1, #0x4cc
   51638:	ldrh	w0, [x1, w0, uxtw #1]
   5163c:	adr	x1, 51648 <aarch64_get_opcode@@Base+0x7274>
   51640:	add	x0, x1, w0, sxth #2
   51644:	br	x0
   51648:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   5164c:	add	x1, x1, #0xa5f
   51650:	mov	x0, x19
   51654:	blr	x20
   51658:	add	x28, x24, #0x1
   5165c:	b	515a4 <aarch64_get_opcode@@Base+0x71d0>
   51660:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   51664:	ldr	w0, [x0, #1040]
   51668:	cbz	w0, 51658 <aarch64_get_opcode@@Base+0x7284>
   5166c:	ldr	x1, [sp, #136]
   51670:	ubfx	x0, x0, #4, #4
   51674:	add	x1, x1, #0xde8
   51678:	ldr	x2, [x1, x0, lsl #3]
   5167c:	b	51d64 <aarch64_get_opcode@@Base+0x7990>
   51680:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   51684:	ldr	w0, [x0, #1044]
   51688:	cbz	w0, 51658 <aarch64_get_opcode@@Base+0x7284>
   5168c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51690:	add	x1, x1, #0xa66
   51694:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51698:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   5169c:	ldr	w0, [x0, #1040]
   516a0:	cbz	w0, 51658 <aarch64_get_opcode@@Base+0x7284>
   516a4:	ldr	x1, [sp, #136]
   516a8:	ubfx	x0, x0, #4, #4
   516ac:	add	x1, x1, #0xde8
   516b0:	ldr	x2, [x1, x0, lsl #3]
   516b4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   516b8:	add	x1, x1, #0xa8b
   516bc:	mov	x0, x19
   516c0:	blr	x20
   516c4:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   516c8:	ldr	w2, [sp, #240]
   516cc:	mov	x0, x19
   516d0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   516d4:	add	x1, x1, #0x199
   516d8:	blr	x20
   516dc:	ldr	x23, [sp, #416]
   516e0:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   516e4:	ldr	w0, [sp, #152]
   516e8:	cmp	w0, #0x3
   516ec:	b.hi	5173c <aarch64_get_opcode@@Base+0x7368>  // b.pmore
   516f0:	ldr	w1, [sp, #152]
   516f4:	adrp	x0, 69000 <fields@@Base+0x105a8>
   516f8:	add	x0, x0, #0x574
   516fc:	ldrb	w0, [x0, w1, uxtw]
   51700:	adr	x1, 5170c <aarch64_get_opcode@@Base+0x7338>
   51704:	add	x0, x1, w0, sxtb #2
   51708:	br	x0
   5170c:	ldr	w23, [sp, #392]
   51710:	mov	w2, w23
   51714:	mov	x0, x19
   51718:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   5171c:	mov	w23, w23
   51720:	add	x1, x1, #0x199
   51724:	blr	x20
   51728:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   5172c:	ldr	w23, [sp, #388]
   51730:	b	51710 <aarch64_get_opcode@@Base+0x733c>
   51734:	ldr	w23, [sp, #384]
   51738:	b	51710 <aarch64_get_opcode@@Base+0x733c>
   5173c:	ldr	w23, [sp, #396]
   51740:	b	51710 <aarch64_get_opcode@@Base+0x733c>
   51744:	mov	w23, w27
   51748:	b	51710 <aarch64_get_opcode@@Base+0x733c>
   5174c:	ldr	w2, [sp, #248]
   51750:	mov	x0, x19
   51754:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51758:	add	x1, x1, #0x199
   5175c:	blr	x20
   51760:	ldr	x23, [sp, #408]
   51764:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51768:	ldr	w2, [sp, #244]
   5176c:	mov	x0, x19
   51770:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51774:	add	x1, x1, #0x199
   51778:	blr	x20
   5177c:	ldr	x23, [sp, #400]
   51780:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51784:	ldr	w2, [sp, #148]
   51788:	mov	x0, x19
   5178c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51790:	add	x1, x1, #0x199
   51794:	blr	x20
   51798:	ldr	x23, [sp, #232]
   5179c:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   517a0:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   517a4:	mov	x2, #0x12                  	// #18
   517a8:	ldr	x0, [sp, #112]
   517ac:	ldr	w1, [x1, #1624]
   517b0:	and	x0, x0, #0xf
   517b4:	madd	x0, x1, x2, x0
   517b8:	ldr	x1, [sp, #104]
   517bc:	add	x0, x0, #0x2
   517c0:	ldr	x2, [x1, x0, lsl #3]
   517c4:	mov	x0, x19
   517c8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   517cc:	add	x1, x1, #0xa63
   517d0:	blr	x20
   517d4:	ldr	w0, [sp, #132]
   517d8:	cmp	w0, #0x2
   517dc:	b.eq	5181c <aarch64_get_opcode@@Base+0x7448>  // b.none
   517e0:	cmp	w0, #0x3
   517e4:	b.eq	5182c <aarch64_get_opcode@@Base+0x7458>  // b.none
   517e8:	cmp	w0, #0x1
   517ec:	b.eq	51804 <aarch64_get_opcode@@Base+0x7430>  // b.none
   517f0:	cbz	w25, 51658 <aarch64_get_opcode@@Base+0x7284>
   517f4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   517f8:	mov	w2, w25
   517fc:	add	x1, x1, #0x13e
   51800:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   51804:	ldr	w2, [sp, #196]
   51808:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   5180c:	add	x1, x1, #0x148
   51810:	mov	x0, x19
   51814:	blr	x20
   51818:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   5181c:	ldr	w2, [sp, #196]
   51820:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51824:	add	x1, x1, #0x152
   51828:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   5182c:	cbnz	w25, 5183c <aarch64_get_opcode@@Base+0x7468>
   51830:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51834:	add	x1, x1, #0xd3a
   51838:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   5183c:	mov	w2, w25
   51840:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51844:	add	x1, x1, #0x15c
   51848:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   5184c:	ldr	w0, [sp, #112]
   51850:	adrp	x4, ee000 <aarch64_opcode_table@@Base+0x55a18>
   51854:	mov	x3, #0x12                  	// #18
   51858:	ldr	w1, [x4, #1624]
   5185c:	and	w28, w0, #0xfff
   51860:	ldr	w0, [sp, #128]
   51864:	madd	x0, x1, x3, x0
   51868:	ldr	x1, [sp, #104]
   5186c:	add	x0, x0, #0x2
   51870:	ldr	x2, [x1, x0, lsl #3]
   51874:	mov	x0, x19
   51878:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   5187c:	add	x1, x1, #0xc6e
   51880:	blr	x20
   51884:	ldr	x0, [sp, #184]
   51888:	mov	x3, #0x12                  	// #18
   5188c:	adrp	x4, ee000 <aarch64_opcode_table@@Base+0x55a18>
   51890:	cbz	x0, 518b0 <aarch64_get_opcode@@Base+0x74dc>
   51894:	ldr	w0, [sp, #128]
   51898:	cmp	w0, #0xf
   5189c:	csel	x23, x23, x28, eq  // eq = none
   518a0:	cbnz	x28, 5199c <aarch64_get_opcode@@Base+0x75c8>
   518a4:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   518a8:	add	x1, x1, #0xae4
   518ac:	b	519d4 <aarch64_get_opcode@@Base+0x7600>
   518b0:	ldr	w0, [sp, #128]
   518b4:	cmp	w0, #0xf
   518b8:	b.ne	518c8 <aarch64_get_opcode@@Base+0x74f4>  // b.any
   518bc:	neg	w28, w28
   518c0:	sxtw	x28, w28
   518c4:	b	518a0 <aarch64_get_opcode@@Base+0x74cc>
   518c8:	ldr	w0, [sp, #220]
   518cc:	cbnz	w0, 51924 <aarch64_get_opcode@@Base+0x7550>
   518d0:	ldr	x0, [sp, #112]
   518d4:	ldr	w1, [x4, #1624]
   518d8:	and	x0, x0, #0xf
   518dc:	madd	x0, x1, x3, x0
   518e0:	ldr	x1, [sp, #104]
   518e4:	add	x0, x0, #0x2
   518e8:	ldr	x2, [x1, x0, lsl #3]
   518ec:	mov	x0, x19
   518f0:	adrp	x1, 5f000 <fields@@Base+0x65a8>
   518f4:	add	x1, x1, #0xc8e
   518f8:	blr	x20
   518fc:	ldr	w0, [sp, #224]
   51900:	cbz	w0, 51918 <aarch64_get_opcode@@Base+0x7544>
   51904:	mov	x2, x0
   51908:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   5190c:	mov	x0, x19
   51910:	add	x1, x1, #0x13e
   51914:	blr	x20
   51918:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   5191c:	add	x1, x1, #0xae4
   51920:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51924:	ldr	w0, [sp, #220]
   51928:	sub	w1, w0, #0x9
   5192c:	cmp	w1, #0x6
   51930:	b.hi	51990 <aarch64_get_opcode@@Base+0x75bc>  // b.pmore
   51934:	adrp	x0, 69000 <fields@@Base+0x105a8>
   51938:	add	x0, x0, #0x578
   5193c:	ldrb	w0, [x0, w1, uxtw]
   51940:	adr	x1, 5194c <aarch64_get_opcode@@Base+0x7578>
   51944:	add	x0, x1, w0, sxtb #2
   51948:	br	x0
   5194c:	mov	w28, w26
   51950:	b	518a0 <aarch64_get_opcode@@Base+0x74cc>
   51954:	neg	w28, w26
   51958:	b	518a0 <aarch64_get_opcode@@Base+0x74cc>
   5195c:	mov	w28, w26
   51960:	cbnz	x28, 51a14 <aarch64_get_opcode@@Base+0x7640>
   51964:	adrp	x1, 54000 <xexit@@Base+0x1508>
   51968:	add	x1, x1, #0x8b
   5196c:	b	519d4 <aarch64_get_opcode@@Base+0x7600>
   51970:	neg	w28, w26
   51974:	b	51960 <aarch64_get_opcode@@Base+0x758c>
   51978:	mov	w2, w26
   5197c:	adrp	x1, 54000 <xexit@@Base+0x1508>
   51980:	add	x1, x1, #0x91
   51984:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   51988:	neg	w2, w26
   5198c:	b	5197c <aarch64_get_opcode@@Base+0x75a8>
   51990:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51994:	add	x1, x1, #0x166
   51998:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   5199c:	mov	w3, #0x0                   	// #0
   519a0:	str	w3, [sp, #264]
   519a4:	mov	w2, w28
   519a8:	mov	x0, x19
   519ac:	adrp	x1, 54000 <xexit@@Base+0x1508>
   519b0:	add	x1, x1, #0x92
   519b4:	blr	x20
   519b8:	ldr	w3, [sp, #264]
   519bc:	adrp	x0, 5b000 <fields@@Base+0x25a8>
   519c0:	adrp	x1, 54000 <xexit@@Base+0x1508>
   519c4:	add	x0, x0, #0xae4
   519c8:	add	x1, x1, #0x8b
   519cc:	cmp	w3, #0x0
   519d0:	csel	x1, x1, x0, ne  // ne = any
   519d4:	mov	x0, x19
   519d8:	blr	x20
   519dc:	ldr	w0, [sp, #128]
   519e0:	cmp	w0, #0xf
   519e4:	b.ne	51658 <aarch64_get_opcode@@Base+0x7284>  // b.any
   519e8:	mov	x0, x19
   519ec:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   519f0:	add	x1, x1, #0xaa
   519f4:	blr	x20
   519f8:	ldr	x0, [sp, #352]
   519fc:	mov	x1, x22
   51a00:	ldr	x2, [x22, #120]
   51a04:	and	x0, x0, #0xfffffffffffffffc
   51a08:	add	x0, x0, x28
   51a0c:	blr	x2
   51a10:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51a14:	mov	w3, #0x1                   	// #1
   51a18:	b	519a0 <aarch64_get_opcode@@Base+0x75cc>
   51a1c:	ldr	w0, [sp, #112]
   51a20:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   51a24:	mov	x2, #0x12                  	// #18
   51a28:	ldr	w1, [x1, #1624]
   51a2c:	and	w28, w0, #0x200000
   51a30:	ldr	w0, [sp, #128]
   51a34:	madd	x0, x1, x2, x0
   51a38:	ldr	x1, [sp, #104]
   51a3c:	add	x0, x0, #0x2
   51a40:	ldr	x2, [x1, x0, lsl #3]
   51a44:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51a48:	mov	x0, x19
   51a4c:	add	x1, x1, #0xc6e
   51a50:	blr	x20
   51a54:	tbz	w21, #24, 51aa4 <aarch64_get_opcode@@Base+0x76d0>
   51a58:	ldr	x0, [sp, #184]
   51a5c:	cmp	w26, #0x0
   51a60:	ccmp	x0, #0x0, #0x4, eq  // eq = none
   51a64:	b.ne	51a84 <aarch64_get_opcode@@Base+0x76b0>  // b.any
   51a68:	ldr	w3, [sp, #160]
   51a6c:	mov	x0, x19
   51a70:	ldr	w2, [sp, #216]
   51a74:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51a78:	add	x1, x1, #0x175
   51a7c:	blr	x20
   51a80:	ldr	x23, [sp, #256]
   51a84:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51a88:	mov	x0, x19
   51a8c:	add	x1, x1, #0xae4
   51a90:	blr	x20
   51a94:	cbz	w28, 51658 <aarch64_get_opcode@@Base+0x7284>
   51a98:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   51a9c:	add	x1, x1, #0xe9f
   51aa0:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51aa4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51aa8:	mov	x0, x19
   51aac:	add	x1, x1, #0x17d
   51ab0:	blr	x20
   51ab4:	cbz	w28, 51ad8 <aarch64_get_opcode@@Base+0x7704>
   51ab8:	ldr	w3, [sp, #160]
   51abc:	mov	x0, x19
   51ac0:	ldr	w2, [sp, #216]
   51ac4:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51ac8:	add	x1, x1, #0x177
   51acc:	blr	x20
   51ad0:	ldr	x23, [sp, #256]
   51ad4:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51ad8:	mov	w2, w26
   51adc:	mov	x0, x19
   51ae0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51ae4:	mov	w23, w26
   51ae8:	add	x1, x1, #0x181
   51aec:	blr	x20
   51af0:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51af4:	ldr	w0, [sp, #144]
   51af8:	cmp	w0, #0x2
   51afc:	b.eq	51b20 <aarch64_get_opcode@@Base+0x774c>  // b.none
   51b00:	cmp	w0, #0x3
   51b04:	b.eq	51b28 <aarch64_get_opcode@@Base+0x7754>  // b.none
   51b08:	cmp	w0, #0x1
   51b0c:	b.eq	51b18 <aarch64_get_opcode@@Base+0x7744>  // b.none
   51b10:	ldr	x1, [sp, #360]
   51b14:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51b18:	ldr	x1, [sp, #368]
   51b1c:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51b20:	ldr	w0, [sp, #380]
   51b24:	cbz	w0, 51658 <aarch64_get_opcode@@Base+0x7284>
   51b28:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51b2c:	add	x1, x1, #0xc1b
   51b30:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51b34:	mov	w0, #0x1                   	// #1
   51b38:	str	w0, [sp, #192]
   51b3c:	mov	x0, x19
   51b40:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51b44:	add	x1, x1, #0xaa4
   51b48:	blr	x20
   51b4c:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   51b50:	mov	w28, #0x0                   	// #0
   51b54:	add	x0, x0, #0x658
   51b58:	mov	w1, #0x0                   	// #0
   51b5c:	str	x0, [sp, #264]
   51b60:	mov	w0, #0x1                   	// #1
   51b64:	lsl	w0, w0, w28
   51b68:	sxtw	x0, w0
   51b6c:	tst	x0, x21
   51b70:	b.eq	51bc4 <aarch64_get_opcode@@Base+0x77f0>  // b.none
   51b74:	cbz	w1, 51b88 <aarch64_get_opcode@@Base+0x77b4>
   51b78:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51b7c:	mov	x0, x19
   51b80:	add	x1, x1, #0x17e
   51b84:	blr	x20
   51b88:	ldr	w0, [sp, #192]
   51b8c:	cmp	w0, #0x0
   51b90:	ccmp	w28, #0xd, #0x0, ne  // ne = any
   51b94:	b.ne	51bdc <aarch64_get_opcode@@Base+0x7808>  // b.any
   51b98:	ldr	x0, [sp, #264]
   51b9c:	mov	x1, #0x90                  	// #144
   51ba0:	ldr	x2, [sp, #104]
   51ba4:	ldr	w0, [x0]
   51ba8:	madd	x0, x0, x1, x2
   51bac:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51bb0:	add	x1, x1, #0x186
   51bb4:	ldr	x2, [x0, #120]
   51bb8:	mov	x0, x19
   51bbc:	blr	x20
   51bc0:	mov	w1, #0x1                   	// #1
   51bc4:	add	w28, w28, #0x1
   51bc8:	cmp	w28, #0x10
   51bcc:	b.ne	51b60 <aarch64_get_opcode@@Base+0x778c>  // b.any
   51bd0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51bd4:	add	x1, x1, #0xb12
   51bd8:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51bdc:	cmp	w0, #0x0
   51be0:	ccmp	w28, #0xf, #0x0, ne  // ne = any
   51be4:	b.ne	51bfc <aarch64_get_opcode@@Base+0x7828>  // b.any
   51be8:	adrp	x2, 5b000 <fields@@Base+0x25a8>
   51bec:	add	x2, x2, #0x9b5
   51bf0:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51bf4:	add	x1, x1, #0xa63
   51bf8:	b	51bb8 <aarch64_get_opcode@@Base+0x77e4>
   51bfc:	ldr	x0, [sp, #264]
   51c00:	mov	x1, #0x12                  	// #18
   51c04:	ldr	w0, [x0]
   51c08:	mul	x0, x0, x1
   51c0c:	ldr	x1, [sp, #104]
   51c10:	add	x0, x0, w28, sxtw
   51c14:	add	x0, x0, #0x2
   51c18:	ldr	x2, [x1, x0, lsl #3]
   51c1c:	b	51bf0 <aarch64_get_opcode@@Base+0x781c>
   51c20:	ldr	w3, [sp, #276]
   51c24:	mov	w2, w25
   51c28:	mov	x0, x19
   51c2c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51c30:	add	x1, x1, #0x194
   51c34:	blr	x20
   51c38:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51c3c:	ldr	w3, [sp, #164]
   51c40:	b	51c24 <aarch64_get_opcode@@Base+0x7850>
   51c44:	ldr	w2, [sp, #228]
   51c48:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   51c4c:	add	x1, x1, #0xd62
   51c50:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   51c54:	mov	x1, x22
   51c58:	ldr	x2, [x22, #120]
   51c5c:	ldr	x0, [sp, #280]
   51c60:	b	51a0c <aarch64_get_opcode@@Base+0x7638>
   51c64:	mov	x1, x22
   51c68:	ldr	x2, [x22, #120]
   51c6c:	ldr	x0, [sp, #288]
   51c70:	b	51a0c <aarch64_get_opcode@@Base+0x7638>
   51c74:	ldr	x2, [x22, #120]
   51c78:	mov	x1, x22
   51c7c:	ldr	x0, [sp, #296]
   51c80:	blr	x2
   51c84:	mov	x0, x19
   51c88:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51c8c:	add	x1, x1, #0x17e
   51c90:	blr	x20
   51c94:	ldr	w2, [sp, #320]
   51c98:	b	51c48 <aarch64_get_opcode@@Base+0x7874>
   51c9c:	mov	x1, x22
   51ca0:	ldr	x2, [x22, #120]
   51ca4:	ldr	x0, [sp, #304]
   51ca8:	b	51a0c <aarch64_get_opcode@@Base+0x7638>
   51cac:	mov	x1, x22
   51cb0:	ldr	x2, [x22, #120]
   51cb4:	ldr	x0, [sp, #312]
   51cb8:	b	51a0c <aarch64_get_opcode@@Base+0x7638>
   51cbc:	ldr	x2, [x22, #120]
   51cc0:	mov	x1, x22
   51cc4:	ldr	x0, [sp, #208]
   51cc8:	blr	x2
   51ccc:	mov	w0, #0x1                   	// #1
   51cd0:	strb	w0, [x22, #196]
   51cd4:	mov	w0, #0x2                   	// #2
   51cd8:	str	w0, [x22, #200]
   51cdc:	ldr	x0, [sp, #208]
   51ce0:	str	x0, [x22, #208]
   51ce4:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51ce8:	ldr	x2, [x22, #120]
   51cec:	mov	x1, x22
   51cf0:	ldr	x0, [sp, #200]
   51cf4:	blr	x2
   51cf8:	mov	w0, #0x1                   	// #1
   51cfc:	strb	w0, [x22, #196]
   51d00:	mov	w0, #0x2                   	// #2
   51d04:	str	w0, [x22, #200]
   51d08:	ldr	x0, [sp, #200]
   51d0c:	b	51ce0 <aarch64_get_opcode@@Base+0x790c>
   51d10:	tbz	w21, #21, 517f0 <aarch64_get_opcode@@Base+0x741c>
   51d14:	mov	w2, w25
   51d18:	b	51820 <aarch64_get_opcode@@Base+0x744c>
   51d1c:	ldr	w0, [sp, #132]
   51d20:	cbz	w0, 51658 <aarch64_get_opcode@@Base+0x7284>
   51d24:	ldr	w2, [sp, #324]
   51d28:	b	51840 <aarch64_get_opcode@@Base+0x746c>
   51d2c:	and	x0, x21, #0xf0
   51d30:	cmp	x0, #0x60
   51d34:	b.ne	51d50 <aarch64_get_opcode@@Base+0x797c>  // b.any
   51d38:	and	x0, x21, #0xf
   51d3c:	cmp	x0, #0xf
   51d40:	b.ne	51d70 <aarch64_get_opcode@@Base+0x799c>  // b.any
   51d44:	adrp	x1, 58000 <xexit@@Base+0x5508>
   51d48:	add	x1, x1, #0x337
   51d4c:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51d50:	ldr	w0, [sp, #112]
   51d54:	and	w0, w0, #0xf
   51d58:	bl	4a730 <aarch64_get_opcode@@Base+0x35c>
   51d5c:	mov	x2, x0
   51d60:	cbz	x0, 51d70 <aarch64_get_opcode@@Base+0x799c>
   51d64:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51d68:	add	x1, x1, #0xa63
   51d6c:	b	516bc <aarch64_get_opcode@@Base+0x72e8>
   51d70:	ldr	w0, [sp, #156]
   51d74:	adrp	x1, 54000 <xexit@@Base+0x1508>
   51d78:	add	x1, x1, #0x94
   51d7c:	and	w2, w0, #0xf
   51d80:	b	51810 <aarch64_get_opcode@@Base+0x743c>
   51d84:	ldr	x0, [sp, #176]
   51d88:	cbnz	x0, 51dec <aarch64_get_opcode@@Base+0x7a18>
   51d8c:	ldr	w2, [sp, #376]
   51d90:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51d94:	mov	x0, x19
   51d98:	add	x1, x1, #0xde
   51d9c:	blr	x20
   51da0:	tbz	w21, #11, 51db4 <aarch64_get_opcode@@Base+0x79e0>
   51da4:	adrp	x1, 5e000 <fields@@Base+0x55a8>
   51da8:	mov	x0, x19
   51dac:	add	x1, x1, #0x989
   51db0:	blr	x20
   51db4:	tbz	w21, #10, 51dc8 <aarch64_get_opcode@@Base+0x79f4>
   51db8:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51dbc:	mov	x0, x19
   51dc0:	add	x1, x1, #0xa64
   51dc4:	blr	x20
   51dc8:	tbz	w21, #9, 51ddc <aarch64_get_opcode@@Base+0x7a08>
   51dcc:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   51dd0:	mov	x0, x19
   51dd4:	add	x1, x1, #0xd63
   51dd8:	blr	x20
   51ddc:	tbz	w21, #8, 51658 <aarch64_get_opcode@@Base+0x7284>
   51de0:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   51de4:	add	x1, x1, #0xdcb
   51de8:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51dec:	tbz	w21, #5, 51e34 <aarch64_get_opcode@@Base+0x7a60>
   51df0:	ldr	w0, [sp, #272]
   51df4:	bl	4a52c <aarch64_get_opcode@@Base+0x158>
   51df8:	mov	x2, x0
   51dfc:	cbnz	x0, 51d64 <aarch64_get_opcode@@Base+0x7990>
   51e00:	ldr	x2, [sp, #328]
   51e04:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51e08:	add	x1, x1, #0xd1
   51e0c:	b	516bc <aarch64_get_opcode@@Base+0x72e8>
   51e10:	ldr	x0, [sp, #176]
   51e14:	cbz	x0, 51e1c <aarch64_get_opcode@@Base+0x7a48>
   51e18:	tbz	w21, #5, 51e34 <aarch64_get_opcode@@Base+0x7a60>
   51e1c:	ldr	w0, [sp, #252]
   51e20:	bl	4a52c <aarch64_get_opcode@@Base+0x158>
   51e24:	mov	x2, x0
   51e28:	cbnz	x0, 51d64 <aarch64_get_opcode@@Base+0x7990>
   51e2c:	ldr	x2, [sp, #336]
   51e30:	b	51e04 <aarch64_get_opcode@@Base+0x7a30>
   51e34:	mov	w0, w26
   51e38:	bl	4a7ec <aarch64_get_opcode@@Base+0x418>
   51e3c:	mov	x2, x0
   51e40:	b	51d64 <aarch64_get_opcode@@Base+0x7990>
   51e44:	ldr	x3, [sp, #424]
   51e48:	mov	x0, x24
   51e4c:	add	x2, sp, #0x1b8
   51e50:	mov	x1, x21
   51e54:	bl	4aea8 <aarch64_get_opcode@@Base+0xad4>
   51e58:	mov	x24, x0
   51e5c:	ldrb	w0, [x0]
   51e60:	cmp	w0, #0x57
   51e64:	b.eq	51fa8 <aarch64_get_opcode@@Base+0x7bd4>  // b.none
   51e68:	b.hi	51ee4 <aarch64_get_opcode@@Base+0x7b10>  // b.pmore
   51e6c:	cmp	w0, #0x44
   51e70:	b.eq	51f84 <aarch64_get_opcode@@Base+0x7bb0>  // b.none
   51e74:	b.hi	51e8c <aarch64_get_opcode@@Base+0x7ab8>  // b.pmore
   51e78:	cmp	w0, #0x27
   51e7c:	b.eq	51fdc <aarch64_get_opcode@@Base+0x7c08>  // b.none
   51e80:	cmp	w0, #0x3f
   51e84:	b.eq	52004 <aarch64_get_opcode@@Base+0x7c30>  // b.none
   51e88:	bl	356c0 <abort@plt>
   51e8c:	cmp	w0, #0x52
   51e90:	b.eq	51eb0 <aarch64_get_opcode@@Base+0x7adc>  // b.none
   51e94:	cmp	w0, #0x53
   51e98:	b.ne	51e88 <aarch64_get_opcode@@Base+0x7ab4>  // b.any
   51e9c:	ldr	x0, [sp, #440]
   51ea0:	cmp	x0, #0xd
   51ea4:	ldr	w0, [sp, #124]
   51ea8:	csinc	w0, w0, wzr, ne  // ne = any
   51eac:	str	w0, [sp, #124]
   51eb0:	ldr	x0, [sp, #440]
   51eb4:	cmp	x0, #0xf
   51eb8:	ldr	w0, [sp, #124]
   51ebc:	csinc	w0, w0, wzr, ne  // ne = any
   51ec0:	str	w0, [sp, #124]
   51ec4:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   51ec8:	mov	x2, #0x12                  	// #18
   51ecc:	ldr	x1, [sp, #440]
   51ed0:	ldr	w0, [x0, #1624]
   51ed4:	madd	x0, x0, x2, x1
   51ed8:	ldr	x1, [sp, #104]
   51edc:	add	x0, x0, #0x2
   51ee0:	b	51678 <aarch64_get_opcode@@Base+0x72a4>
   51ee4:	cmp	w0, #0x72
   51ee8:	b.eq	51ec4 <aarch64_get_opcode@@Base+0x7af0>  // b.none
   51eec:	b.hi	51f1c <aarch64_get_opcode@@Base+0x7b48>  // b.pmore
   51ef0:	cmp	w0, #0x63
   51ef4:	b.eq	51fcc <aarch64_get_opcode@@Base+0x7bf8>  // b.none
   51ef8:	cmp	w0, #0x64
   51efc:	b.eq	51f68 <aarch64_get_opcode@@Base+0x7b94>  // b.none
   51f00:	cmp	w0, #0x60
   51f04:	b.ne	51e88 <aarch64_get_opcode@@Base+0x7ab4>  // b.any
   51f08:	ldr	x0, [sp, #440]
   51f0c:	add	x28, x24, #0x1
   51f10:	cbz	x0, 51ffc <aarch64_get_opcode@@Base+0x7c28>
   51f14:	mov	x24, x28
   51f18:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51f1c:	cmp	w0, #0x73
   51f20:	b.eq	51f3c <aarch64_get_opcode@@Base+0x7b68>  // b.none
   51f24:	cmp	w0, #0x78
   51f28:	b.ne	51e88 <aarch64_get_opcode@@Base+0x7ab4>  // b.any
   51f2c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51f30:	ldr	w2, [sp, #440]
   51f34:	add	x1, x1, #0xaae
   51f38:	b	516bc <aarch64_get_opcode@@Base+0x72e8>
   51f3c:	ldr	x1, [sp, #440]
   51f40:	cmp	x1, #0x3
   51f44:	b.hi	51f5c <aarch64_get_opcode@@Base+0x7b88>  // b.pmore
   51f48:	adrp	x0, 83000 <aarch64_operands@@Base+0x2bc0>
   51f4c:	add	x0, x0, #0xc70
   51f50:	add	x0, x0, #0x4b0
   51f54:	ldr	x2, [x0, x1, lsl #3]
   51f58:	b	51d64 <aarch64_get_opcode@@Base+0x7990>
   51f5c:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   51f60:	add	x1, x1, #0xe90
   51f64:	b	51650 <aarch64_get_opcode@@Base+0x727c>
   51f68:	ldr	x2, [sp, #440]
   51f6c:	mov	x0, x19
   51f70:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51f74:	add	x1, x1, #0x105
   51f78:	blr	x20
   51f7c:	ldr	x23, [sp, #440]
   51f80:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51f84:	ldr	x2, [sp, #440]
   51f88:	mov	x0, x19
   51f8c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51f90:	add	x1, x1, #0x105
   51f94:	add	x2, x2, #0x1
   51f98:	blr	x20
   51f9c:	ldr	x23, [sp, #440]
   51fa0:	add	x23, x23, #0x1
   51fa4:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51fa8:	ldr	x2, [sp, #440]
   51fac:	mov	x0, x19
   51fb0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   51fb4:	add	x1, x1, #0x105
   51fb8:	lsl	x2, x2, #2
   51fbc:	blr	x20
   51fc0:	ldr	x23, [sp, #440]
   51fc4:	lsl	x23, x23, #2
   51fc8:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   51fcc:	ldr	x0, [sp, #136]
   51fd0:	ldr	x1, [sp, #440]
   51fd4:	add	x0, x0, #0xde8
   51fd8:	b	51f54 <aarch64_get_opcode@@Base+0x7b80>
   51fdc:	ldr	w1, [sp, #436]
   51fe0:	mov	x0, #0x1                   	// #1
   51fe4:	add	x28, x24, #0x1
   51fe8:	lsl	x0, x0, x1
   51fec:	sub	x0, x0, #0x1
   51ff0:	ldr	x1, [sp, #440]
   51ff4:	cmp	x0, x1
   51ff8:	b.ne	51f14 <aarch64_get_opcode@@Base+0x7b40>  // b.any
   51ffc:	ldrb	w2, [x24, #1]
   52000:	b	51608 <aarch64_get_opcode@@Base+0x7234>
   52004:	ldr	w0, [sp, #436]
   52008:	mov	w28, #0x1                   	// #1
   5200c:	ldr	x1, [sp, #440]
   52010:	lsl	w0, w28, w0
   52014:	sub	w0, w0, w1
   52018:	adrp	x1, 5d000 <fields@@Base+0x45a8>
   5201c:	add	x1, x1, #0xdca
   52020:	ldrb	w2, [x24, w0, sxtw]
   52024:	mov	x0, x19
   52028:	blr	x20
   5202c:	ldr	w0, [sp, #436]
   52030:	lsl	w28, w28, w0
   52034:	add	x24, x24, w28, sxtw
   52038:	b	51658 <aarch64_get_opcode@@Base+0x7284>
   5203c:	ldr	x0, [sp, #168]
   52040:	cmp	x0, #0xf
   52044:	b.ne	51658 <aarch64_get_opcode@@Base+0x7284>  // b.any
   52048:	mov	x0, x19
   5204c:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   52050:	add	x1, x1, #0xaa
   52054:	blr	x20
   52058:	mov	x1, x22
   5205c:	ldr	x2, [x22, #120]
   52060:	ldr	x0, [sp, #344]
   52064:	b	51a0c <aarch64_get_opcode@@Base+0x7638>
   52068:	add	x0, x0, #0x30
   5206c:	b	511ac <aarch64_get_opcode@@Base+0x6dd8>
   52070:	mov	x1, x21
   52074:	mov	x0, x22
   52078:	bl	4d924 <aarch64_get_opcode@@Base+0x3550>
   5207c:	b	5117c <aarch64_get_opcode@@Base+0x6da8>

0000000000052080 <arm_symbol_is_valid@@Base>:
   52080:	cbz	x0, 520c0 <arm_symbol_is_valid@@Base+0x40>
   52084:	ldr	x0, [x0, #8]
   52088:	cbz	x0, 520c0 <arm_symbol_is_valid@@Base+0x40>
   5208c:	ldrb	w1, [x0]
   52090:	cmp	w1, #0x24
   52094:	b.eq	520c0 <arm_symbol_is_valid@@Base+0x40>  // b.none
   52098:	stp	x29, x30, [sp, #-16]!
   5209c:	mov	x2, #0xa                   	// #10
   520a0:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   520a4:	mov	x29, sp
   520a8:	add	x1, x1, #0x19d
   520ac:	bl	35480 <strncmp@plt>
   520b0:	cmp	w0, #0x0
   520b4:	cset	w0, ne  // ne = any
   520b8:	ldp	x29, x30, [sp], #16
   520bc:	ret
   520c0:	mov	w0, #0x0                   	// #0
   520c4:	ret

00000000000520c8 <print_insn_big_arm@@Base>:
   520c8:	ldr	w2, [x1, #24]
   520cc:	cmp	w2, #0x5
   520d0:	b.ne	520f4 <print_insn_big_arm@@Base+0x2c>  // b.any
   520d4:	ldr	x2, [x1, #48]
   520d8:	cbz	x2, 520f4 <print_insn_big_arm@@Base+0x2c>
   520dc:	ldr	x2, [x2, #240]
   520e0:	ldr	x2, [x2, #248]
   520e4:	ldr	x2, [x2, #48]
   520e8:	tbz	w2, #23, 520f4 <print_insn_big_arm@@Base+0x2c>
   520ec:	mov	w2, #0x1                   	// #1
   520f0:	str	w2, [x1, #44]
   520f4:	mov	w2, #0x0                   	// #0
   520f8:	b	4fc2c <aarch64_get_opcode@@Base+0x5858>

00000000000520fc <print_insn_little_arm@@Base>:
   520fc:	mov	w2, #0x1                   	// #1
   52100:	b	4fc2c <aarch64_get_opcode@@Base+0x5858>

0000000000052104 <disassembler_options_arm@@Base>:
   52104:	stp	x29, x30, [sp, #-64]!
   52108:	mov	x29, sp
   5210c:	stp	x19, x20, [sp, #16]
   52110:	stp	x21, x22, [sp, #32]
   52114:	adrp	x21, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   52118:	add	x20, x21, #0x410
   5211c:	stp	x23, x24, [sp, #48]
   52120:	ldr	x0, [x20, #104]
   52124:	cbnz	x0, 521b0 <disassembler_options_arm@@Base+0xac>
   52128:	mov	x0, #0x20                  	// #32
   5212c:	bl	354c0 <xmalloc@plt>
   52130:	mov	x19, x0
   52134:	str	x19, [x20, #104]
   52138:	adrp	x20, 82000 <aarch64_operands@@Base+0x1bc0>
   5213c:	add	x20, x20, #0xb70
   52140:	mov	x0, #0x48                  	// #72
   52144:	adrp	x23, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   52148:	add	x20, x20, #0xe70
   5214c:	add	x23, x23, #0xb4a
   52150:	str	xzr, [x19, #24]
   52154:	bl	354c0 <xmalloc@plt>
   52158:	mov	x22, #0x0                   	// #0
   5215c:	str	x0, [x19]
   52160:	mov	x0, #0x48                  	// #72
   52164:	bl	354c0 <xmalloc@plt>
   52168:	stp	x0, xzr, [x19, #8]
   5216c:	ldr	x1, [x20]
   52170:	ldp	x0, x24, [x19]
   52174:	str	x1, [x0, x22]
   52178:	ldr	x1, [x20, #8]
   5217c:	cbz	x1, 521cc <disassembler_options_arm@@Base+0xc8>
   52180:	mov	x0, x23
   52184:	mov	w2, #0x5                   	// #5
   52188:	bl	35a30 <dcgettext@plt>
   5218c:	str	x0, [x24, x22]
   52190:	add	x22, x22, #0x8
   52194:	add	x20, x20, #0x90
   52198:	cmp	x22, #0x40
   5219c:	b.ne	5216c <disassembler_options_arm@@Base+0x68>  // b.any
   521a0:	ldr	x0, [x19]
   521a4:	str	xzr, [x0, #64]
   521a8:	ldr	x0, [x19, #8]
   521ac:	str	xzr, [x0, #64]
   521b0:	add	x21, x21, #0x410
   521b4:	ldp	x19, x20, [sp, #16]
   521b8:	ldp	x23, x24, [sp, #48]
   521bc:	ldr	x0, [x21, #104]
   521c0:	ldp	x21, x22, [sp, #32]
   521c4:	ldp	x29, x30, [sp], #64
   521c8:	ret
   521cc:	str	xzr, [x24, x22]
   521d0:	b	52190 <disassembler_options_arm@@Base+0x8c>

00000000000521d4 <print_arm_disassembler_options@@Base>:
   521d4:	stp	x29, x30, [sp, #-80]!
   521d8:	mov	w2, #0x5                   	// #5
   521dc:	adrp	x1, 5c000 <fields@@Base+0x35a8>
   521e0:	mov	x29, sp
   521e4:	stp	x19, x20, [sp, #16]
   521e8:	adrp	x19, 82000 <aarch64_operands@@Base+0x1bc0>
   521ec:	add	x19, x19, #0xb70
   521f0:	add	x19, x19, #0xe70
   521f4:	mov	x20, #0x0                   	// #0
   521f8:	stp	x23, x24, [sp, #48]
   521fc:	mov	w23, #0x0                   	// #0
   52200:	mov	x24, #0x90                  	// #144
   52204:	add	x1, x1, #0x1a8
   52208:	stp	x21, x22, [sp, #32]
   5220c:	mov	x22, x0
   52210:	adrp	x21, 52000 <aarch64_get_opcode@@Base+0x7c2c>
   52214:	add	x0, x21, #0xb4a
   52218:	stp	x25, x26, [sp, #64]
   5221c:	bl	35a30 <dcgettext@plt>
   52220:	mov	x1, x0
   52224:	mov	x0, x22
   52228:	bl	35bd0 <fprintf@plt>
   5222c:	mul	x0, x20, x24
   52230:	add	x20, x20, #0x1
   52234:	ldr	x0, [x0, x19]
   52238:	bl	350e0 <strlen@plt>
   5223c:	cmp	w23, w0
   52240:	csel	w23, w23, w0, cs  // cs = hs, nlast
   52244:	cmp	x20, #0x8
   52248:	b.ne	5222c <print_arm_disassembler_options@@Base+0x58>  // b.any
   5224c:	adrp	x24, 5c000 <fields@@Base+0x35a8>
   52250:	add	w23, w23, #0x1
   52254:	add	x21, x21, #0xb4a
   52258:	add	x24, x24, #0x204
   5225c:	ldr	x26, [x19]
   52260:	add	x19, x19, #0x90
   52264:	mov	x0, x26
   52268:	bl	350e0 <strlen@plt>
   5226c:	ldur	x1, [x19, #-136]
   52270:	mov	x25, x0
   52274:	mov	w2, #0x5                   	// #5
   52278:	mov	x0, x21
   5227c:	bl	35a30 <dcgettext@plt>
   52280:	mov	x5, x0
   52284:	sub	w3, w23, w25
   52288:	mov	x2, x26
   5228c:	mov	x1, x24
   52290:	mov	x0, x22
   52294:	mov	w4, #0x20                  	// #32
   52298:	bl	35bd0 <fprintf@plt>
   5229c:	subs	w20, w20, #0x1
   522a0:	b.ne	5225c <print_arm_disassembler_options@@Base+0x88>  // b.any
   522a4:	ldp	x19, x20, [sp, #16]
   522a8:	ldp	x21, x22, [sp, #32]
   522ac:	ldp	x23, x24, [sp, #48]
   522b0:	ldp	x25, x26, [sp, #64]
   522b4:	ldp	x29, x30, [sp], #80
   522b8:	ret
   522bc:	mov	w0, #0x1                   	// #1
   522c0:	ret
   522c4:	add	w3, w3, w4
   522c8:	mov	w5, #0xffffffff            	// #-1
   522cc:	sub	w2, w2, w3
   522d0:	add	w3, w3, w5
   522d4:	cmp	w1, #0x0
   522d8:	mov	x9, x0
   522dc:	lsr	w3, w3, #3
   522e0:	lsr	w0, w2, #3
   522e4:	and	w2, w2, #0x7
   522e8:	csel	w1, w3, w0, ne  // ne = any
   522ec:	add	w3, w2, w4
   522f0:	cneg	w7, w5, eq  // eq = none
   522f4:	mov	w5, #0x8                   	// #8
   522f8:	cmp	w3, w5
   522fc:	csel	w3, w3, w5, ls  // ls = plast
   52300:	mov	w6, w5
   52304:	mov	w8, #0x0                   	// #0
   52308:	mov	x0, #0x0                   	// #0
   5230c:	mov	w10, #0x1                   	// #1
   52310:	ldrb	w5, [x9, w1, uxtw]
   52314:	sub	w3, w3, w2
   52318:	sub	w4, w4, w3
   5231c:	add	w1, w1, w7
   52320:	cmp	w4, #0x8
   52324:	asr	w2, w5, w2
   52328:	lsl	w5, w10, w3
   5232c:	sub	w5, w5, #0x1
   52330:	and	w2, w2, w5
   52334:	lsl	w2, w2, w8
   52338:	add	w8, w8, w3
   5233c:	orr	x0, x0, x2
   52340:	csel	w3, w4, w6, ls  // ls = plast
   52344:	mov	w2, #0x0                   	// #0
   52348:	cbnz	w4, 52310 <print_arm_disassembler_options@@Base+0x13c>
   5234c:	ret
   52350:	mov	x11, x0
   52354:	stp	x29, x30, [sp, #-16]!
   52358:	mov	x12, x1
   5235c:	mov	x29, sp
   52360:	ldp	w14, w15, [x11]
   52364:	mov	x0, x1
   52368:	ldp	w3, w4, [x11, #12]
   5236c:	mov	w2, w15
   52370:	mov	w1, w14
   52374:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52378:	ldr	w3, [x11, #28]
   5237c:	mov	x13, x0
   52380:	mov	w1, w14
   52384:	mov	w2, w15
   52388:	mov	x0, x12
   5238c:	mov	w4, #0x1                   	// #1
   52390:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52394:	cmp	x13, #0x0
   52398:	cset	w1, eq  // eq = none
   5239c:	cmp	x0, #0x0
   523a0:	cset	w0, eq  // eq = none
   523a4:	cmp	w1, w0
   523a8:	cset	w0, eq  // eq = none
   523ac:	ldp	x29, x30, [sp], #16
   523b0:	ret
   523b4:	ldp	w13, w12, [x0, #28]
   523b8:	mov	x11, x0
   523bc:	mov	x14, x1
   523c0:	mov	w18, #0x20                  	// #32
   523c4:	cmp	w12, #0x0
   523c8:	b.gt	523dc <print_arm_disassembler_options@@Base+0x208>
   523cc:	mov	w0, #0x0                   	// #0
   523d0:	ret
   523d4:	mov	w0, #0x1                   	// #1
   523d8:	b	52418 <print_arm_disassembler_options@@Base+0x244>
   523dc:	stp	x29, x30, [sp, #-16]!
   523e0:	mov	x29, sp
   523e4:	cmp	w12, #0x20
   523e8:	mov	w3, w13
   523ec:	ldp	w1, w2, [x11]
   523f0:	csel	w15, w12, w18, le
   523f4:	mov	w4, w15
   523f8:	mov	x0, x14
   523fc:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52400:	cbnz	x0, 523d4 <print_arm_disassembler_options@@Base+0x200>
   52404:	sub	w12, w12, w15
   52408:	add	w13, w13, w15
   5240c:	cmp	w12, #0x0
   52410:	b.gt	523e4 <print_arm_disassembler_options@@Base+0x210>
   52414:	mov	w0, #0x0                   	// #0
   52418:	ldp	x29, x30, [sp], #16
   5241c:	ret
   52420:	stp	x29, x30, [sp, #-48]!
   52424:	mov	x12, x1
   52428:	mov	x29, sp
   5242c:	stp	x19, x20, [sp, #16]
   52430:	ldr	x19, [x0, #56]
   52434:	mov	x0, x1
   52438:	stp	x21, x22, [sp, #32]
   5243c:	ldp	w15, w18, [x19]
   52440:	ldp	w13, w14, [x19, #12]
   52444:	mov	w2, w18
   52448:	mov	w1, w15
   5244c:	mov	w4, w14
   52450:	mov	w3, w13
   52454:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52458:	mov	x11, x0
   5245c:	add	x21, x12, #0x8
   52460:	mov	w4, w14
   52464:	mov	w3, w13
   52468:	mov	w2, w18
   5246c:	mov	w1, w15
   52470:	mov	x0, x21
   52474:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52478:	mov	x20, x0
   5247c:	ldr	w0, [x19, #24]
   52480:	cmp	x11, x0
   52484:	b.ne	524a0 <print_arm_disassembler_options@@Base+0x2cc>  // b.any
   52488:	mov	x1, x12
   5248c:	mov	x0, x19
   52490:	bl	523b4 <print_arm_disassembler_options@@Base+0x1e0>
   52494:	cbz	w0, 524a4 <print_arm_disassembler_options@@Base+0x2d0>
   52498:	mov	w0, #0x1                   	// #1
   5249c:	b	5254c <print_arm_disassembler_options@@Base+0x378>
   524a0:	cbnz	x11, 524bc <print_arm_disassembler_options@@Base+0x2e8>
   524a4:	cbnz	x20, 524d8 <print_arm_disassembler_options@@Base+0x304>
   524a8:	mov	x1, x21
   524ac:	mov	x0, x19
   524b0:	bl	523b4 <print_arm_disassembler_options@@Base+0x1e0>
   524b4:	cmp	w0, #0x0
   524b8:	b	52548 <print_arm_disassembler_options@@Base+0x374>
   524bc:	sub	x22, x11, #0x35
   524c0:	cmp	x22, x20
   524c4:	b.gt	52498 <print_arm_disassembler_options@@Base+0x2c4>
   524c8:	sub	x11, x11, #0x34
   524cc:	cmp	x11, x20
   524d0:	b.gt	524e0 <print_arm_disassembler_options@@Base+0x30c>
   524d4:	cbz	x20, 524e4 <print_arm_disassembler_options@@Base+0x310>
   524d8:	mov	w0, #0x0                   	// #0
   524dc:	b	5254c <print_arm_disassembler_options@@Base+0x378>
   524e0:	cbnz	x20, 52590 <print_arm_disassembler_options@@Base+0x3bc>
   524e4:	ldr	w20, [x19, #32]
   524e8:	mov	w13, #0x0                   	// #0
   524ec:	mov	w14, #0xffffffff            	// #-1
   524f0:	cmp	w20, w13
   524f4:	b.ne	5255c <print_arm_disassembler_options@@Base+0x388>  // b.any
   524f8:	cmn	w14, #0x1
   524fc:	b.eq	52498 <print_arm_disassembler_options@@Base+0x2c4>  // b.none
   52500:	mov	w13, #0xffffffff            	// #-1
   52504:	neg	w14, w14
   52508:	sxtw	x0, w14
   5250c:	cmp	x22, w14, sxtw
   52510:	b.gt	52498 <print_arm_disassembler_options@@Base+0x2c4>
   52514:	cmp	x11, x0
   52518:	b.le	524d8 <print_arm_disassembler_options@@Base+0x304>
   5251c:	cmn	w13, #0x1
   52520:	b.ne	524d8 <print_arm_disassembler_options@@Base+0x304>  // b.any
   52524:	ldr	w3, [x19, #28]
   52528:	mov	w2, w18
   5252c:	mov	w1, w15
   52530:	mov	x0, x12
   52534:	add	w3, w20, w3
   52538:	mov	w4, #0x1                   	// #1
   5253c:	sub	w3, w3, #0x1
   52540:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52544:	cmp	x0, #0x0
   52548:	cset	w0, eq  // eq = none
   5254c:	ldp	x19, x20, [sp, #16]
   52550:	ldp	x21, x22, [sp, #32]
   52554:	ldp	x29, x30, [sp], #48
   52558:	ret
   5255c:	ldr	w3, [x19, #28]
   52560:	mov	w2, w18
   52564:	mov	w1, w15
   52568:	mov	x0, x21
   5256c:	add	w3, w13, w3
   52570:	mov	w4, #0x1                   	// #1
   52574:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52578:	cbz	x0, 52588 <print_arm_disassembler_options@@Base+0x3b4>
   5257c:	cmn	w14, #0x1
   52580:	b.ne	52504 <print_arm_disassembler_options@@Base+0x330>  // b.any
   52584:	mov	w14, w13
   52588:	add	w13, w13, #0x1
   5258c:	b	524f0 <print_arm_disassembler_options@@Base+0x31c>
   52590:	ldp	w3, w0, [x19, #28]
   52594:	mov	w2, w18
   52598:	mov	w1, w15
   5259c:	mov	w4, #0x1                   	// #1
   525a0:	add	w3, w3, w0
   525a4:	mov	x0, x12
   525a8:	sub	w3, w3, #0x1
   525ac:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   525b0:	cbnz	x0, 524d8 <print_arm_disassembler_options@@Base+0x304>
   525b4:	b	524a8 <print_arm_disassembler_options@@Base+0x2d4>
   525b8:	add	w3, w3, w4
   525bc:	cmp	w1, #0x0
   525c0:	sub	w2, w2, w3
   525c4:	sub	w3, w3, #0x1
   525c8:	mov	w6, #0xffffffff            	// #-1
   525cc:	cneg	w8, w6, eq  // eq = none
   525d0:	lsr	w3, w3, #3
   525d4:	lsr	w6, w2, #3
   525d8:	and	w2, w2, #0x7
   525dc:	csel	w1, w3, w6, ne  // ne = any
   525e0:	add	w3, w2, w4
   525e4:	mov	w6, #0x8                   	// #8
   525e8:	cmp	w3, w6
   525ec:	mov	w7, w6
   525f0:	csel	w3, w3, w6, ls  // ls = plast
   525f4:	mov	w10, #0x1                   	// #1
   525f8:	sub	w3, w3, w2
   525fc:	ldrb	w9, [x0, w1, uxtw]
   52600:	sub	w4, w4, w3
   52604:	lsl	w6, w10, w3
   52608:	sub	w6, w6, #0x1
   5260c:	cmp	w4, #0x8
   52610:	lsl	w6, w6, w2
   52614:	lsl	x2, x5, x2
   52618:	eor	w2, w9, w2
   5261c:	and	w2, w6, w2
   52620:	lsr	x5, x5, x3
   52624:	eor	w2, w9, w2
   52628:	strb	w2, [x0, w1, uxtw]
   5262c:	csel	w3, w4, w7, ls  // ls = plast
   52630:	add	w1, w1, w8
   52634:	mov	w2, #0x0                   	// #0
   52638:	cbnz	w4, 525f8 <print_arm_disassembler_options@@Base+0x424>
   5263c:	ret

0000000000052640 <floatformat_to_double@@Base>:
   52640:	stp	x29, x30, [sp, #-96]!
   52644:	mov	x29, sp
   52648:	ldp	w3, w4, [x0, #12]
   5264c:	stp	x19, x20, [sp, #16]
   52650:	mov	x20, x0
   52654:	stp	x21, x22, [sp, #32]
   52658:	mov	x21, x1
   5265c:	ldp	w19, w22, [x0]
   52660:	mov	x0, x21
   52664:	stp	x23, x24, [sp, #48]
   52668:	mov	x24, x2
   5266c:	mov	w1, w19
   52670:	mov	w2, w22
   52674:	stp	x25, x26, [sp, #64]
   52678:	str	d8, [sp, #80]
   5267c:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52680:	ldr	w1, [x20, #24]
   52684:	cmp	x0, x1
   52688:	b.ne	526f0 <floatformat_to_double@@Base+0xb0>  // b.any
   5268c:	mov	x1, x21
   52690:	mov	x0, x20
   52694:	bl	523b4 <print_arm_disassembler_options@@Base+0x1e0>
   52698:	cmp	w0, #0x0
   5269c:	mov	x1, #0x7ff8000000000000    	// #9221120237041090560
   526a0:	fmov	d0, x1
   526a4:	mov	x1, #0x7ff0000000000000    	// #9218868437227405312
   526a8:	fmov	d1, x1
   526ac:	ldr	w3, [x20, #8]
   526b0:	mov	w2, w22
   526b4:	fcsel	d0, d0, d1, ne  // ne = any
   526b8:	mov	w1, w19
   526bc:	mov	x0, x21
   526c0:	mov	w4, #0x1                   	// #1
   526c4:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   526c8:	cbz	x0, 526d0 <floatformat_to_double@@Base+0x90>
   526cc:	fneg	d0, d0
   526d0:	str	d0, [x24]
   526d4:	ldp	x19, x20, [sp, #16]
   526d8:	ldp	x21, x22, [sp, #32]
   526dc:	ldp	x23, x24, [sp, #48]
   526e0:	ldp	x25, x26, [sp, #64]
   526e4:	ldr	d8, [sp, #80]
   526e8:	ldp	x29, x30, [sp], #96
   526ec:	ret
   526f0:	ldr	w1, [x20, #20]
   526f4:	ldp	w25, w22, [x20, #28]
   526f8:	cbnz	x0, 52710 <floatformat_to_double@@Base+0xd0>
   526fc:	mov	w19, #0x1                   	// #1
   52700:	sub	w19, w19, w1
   52704:	sxtw	x19, w19
   52708:	movi	d8, #0x0
   5270c:	b	52730 <floatformat_to_double@@Base+0xf0>
   52710:	sub	x19, x0, w1, sxtw
   52714:	ldr	w0, [x20, #36]
   52718:	cmp	w0, #0x1
   5271c:	b.ne	52760 <floatformat_to_double@@Base+0x120>  // b.any
   52720:	fmov	d0, #1.000000000000000000e+00
   52724:	mov	w0, w19
   52728:	bl	35210 <ldexp@plt>
   5272c:	fmov	d8, d0
   52730:	mov	w26, #0x20                  	// #32
   52734:	ldp	w1, w2, [x20]
   52738:	cmp	w22, #0x0
   5273c:	b.gt	52768 <floatformat_to_double@@Base+0x128>
   52740:	ldr	w3, [x20, #8]
   52744:	mov	x0, x21
   52748:	mov	w4, #0x1                   	// #1
   5274c:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52750:	cbz	x0, 52758 <floatformat_to_double@@Base+0x118>
   52754:	fneg	d8, d8
   52758:	str	d8, [x24]
   5275c:	b	526d4 <floatformat_to_double@@Base+0x94>
   52760:	add	x19, x19, #0x1
   52764:	b	52708 <floatformat_to_double@@Base+0xc8>
   52768:	cmp	w22, #0x20
   5276c:	mov	w3, w25
   52770:	csel	w23, w22, w26, le
   52774:	mov	x0, x21
   52778:	mov	w4, w23
   5277c:	add	w25, w25, w23
   52780:	bl	522c4 <print_arm_disassembler_options@@Base+0xf0>
   52784:	mov	x1, x0
   52788:	sub	w22, w22, w23
   5278c:	sub	w0, w19, w23
   52790:	ucvtf	d0, x1
   52794:	sub	x19, x19, w23, sxtw
   52798:	bl	35210 <ldexp@plt>
   5279c:	fadd	d8, d8, d0
   527a0:	b	52734 <floatformat_to_double@@Base+0xf4>

00000000000527a4 <floatformat_from_double@@Base>:
   527a4:	stp	x29, x30, [sp, #-80]!
   527a8:	mov	x29, sp
   527ac:	stp	x19, x20, [sp, #16]
   527b0:	mov	x20, x2
   527b4:	ldr	w2, [x0, #4]
   527b8:	str	d8, [sp, #40]
   527bc:	mov	x19, x0
   527c0:	ldr	d8, [x1]
   527c4:	mov	x0, x20
   527c8:	lsr	w2, w2, #3
   527cc:	mov	w1, #0x0                   	// #0
   527d0:	str	x21, [sp, #32]
   527d4:	bl	354b0 <memset@plt>
   527d8:	fcmpe	d8, #0.0
   527dc:	b.pl	527fc <floatformat_from_double@@Base+0x58>  // b.nfrst
   527e0:	ldp	w1, w2, [x19]
   527e4:	mov	x5, #0x1                   	// #1
   527e8:	ldr	w3, [x19, #8]
   527ec:	mov	w4, w5
   527f0:	mov	x0, x20
   527f4:	bl	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   527f8:	fneg	d8, d8
   527fc:	fcmp	d8, #0.0
   52800:	b.eq	528b4 <floatformat_from_double@@Base+0x110>  // b.none
   52804:	fcmp	d8, d8
   52808:	ldp	w1, w2, [x19]
   5280c:	ldp	w3, w4, [x19, #12]
   52810:	b.eq	52848 <floatformat_from_double@@Base+0xa4>  // b.none
   52814:	ldr	w5, [x19, #24]
   52818:	mov	x0, x20
   5281c:	bl	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   52820:	ldp	w1, w2, [x19]
   52824:	mov	x5, #0x1                   	// #1
   52828:	ldr	w3, [x19, #28]
   5282c:	mov	w4, #0x20                  	// #32
   52830:	mov	x0, x20
   52834:	ldr	d8, [sp, #40]
   52838:	ldp	x19, x20, [sp, #16]
   5283c:	ldr	x21, [sp, #32]
   52840:	ldp	x29, x30, [sp], #80
   52844:	b	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   52848:	fadd	d0, d8, d8
   5284c:	fcmp	d0, d8
   52850:	b.ne	5285c <floatformat_from_double@@Base+0xb8>  // b.any
   52854:	ldr	w5, [x19, #24]
   52858:	b	52830 <floatformat_from_double@@Base+0x8c>
   5285c:	fmov	d0, d8
   52860:	add	x0, sp, #0x4c
   52864:	stp	w4, w1, [sp, #48]
   52868:	stp	w3, w2, [sp, #56]
   5286c:	bl	358a0 <frexp@plt>
   52870:	ldr	w21, [sp, #76]
   52874:	ldr	w5, [x19, #20]
   52878:	ldp	w4, w1, [sp, #48]
   5287c:	add	w5, w21, w5
   52880:	ldp	w3, w2, [sp, #56]
   52884:	cmp	w5, #0x1
   52888:	b.le	528c8 <floatformat_from_double@@Base+0x124>
   5288c:	sub	w5, w5, #0x1
   52890:	mov	x0, x20
   52894:	sxtw	x5, w5
   52898:	bl	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   5289c:	adrp	x0, 69000 <fields@@Base+0x105a8>
   528a0:	mov	w14, #0x20                  	// #32
   528a4:	ldp	w13, w11, [x19, #28]
   528a8:	ldr	d1, [x0, #2096]
   528ac:	cmp	w11, #0x0
   528b0:	b.gt	528e8 <floatformat_from_double@@Base+0x144>
   528b4:	ldp	x19, x20, [sp, #16]
   528b8:	ldr	x21, [sp, #32]
   528bc:	ldr	d8, [sp, #40]
   528c0:	ldp	x29, x30, [sp], #80
   528c4:	ret
   528c8:	mov	x0, x20
   528cc:	mov	x5, #0x0                   	// #0
   528d0:	bl	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   528d4:	ldr	w0, [x19, #20]
   528d8:	add	w0, w21, w0
   528dc:	sub	w0, w0, #0x1
   528e0:	bl	35210 <ldexp@plt>
   528e4:	b	5289c <floatformat_from_double@@Base+0xf8>
   528e8:	fmul	d0, d0, d1
   528ec:	ldr	w0, [x19, #32]
   528f0:	cmp	w11, #0x20
   528f4:	csel	w12, w11, w14, le
   528f8:	cmp	w0, w11
   528fc:	fcvtzu	x5, d0
   52900:	ucvtf	d2, x5
   52904:	fsub	d0, d0, d2
   52908:	b.ne	52950 <floatformat_from_double@@Base+0x1ac>  // b.any
   5290c:	ldr	w0, [x19, #36]
   52910:	cmp	w0, #0x1
   52914:	b.ne	52950 <floatformat_from_double@@Base+0x1ac>  // b.any
   52918:	ldr	w0, [x19, #20]
   5291c:	add	w0, w21, w0
   52920:	cmp	w0, #0x1
   52924:	b.le	52950 <floatformat_from_double@@Base+0x1ac>
   52928:	and	x5, x5, #0x7fffffff
   5292c:	sub	w12, w12, #0x1
   52930:	ldp	w1, w2, [x19]
   52934:	mov	w3, w13
   52938:	mov	w4, w12
   5293c:	mov	x0, x20
   52940:	bl	525b8 <print_arm_disassembler_options@@Base+0x3e4>
   52944:	add	w13, w13, w12
   52948:	sub	w11, w11, w12
   5294c:	b	528ac <floatformat_from_double@@Base+0x108>
   52950:	cmp	w11, #0x1f
   52954:	b.gt	52964 <floatformat_from_double@@Base+0x1c0>
   52958:	sub	w0, w14, w12
   5295c:	lsr	x5, x5, x0
   52960:	b	52930 <floatformat_from_double@@Base+0x18c>
   52964:	mov	w12, #0x20                  	// #32
   52968:	b	52930 <floatformat_from_double@@Base+0x18c>

000000000005296c <floatformat_is_valid@@Base>:
   5296c:	ldr	x2, [x0, #48]
   52970:	mov	x16, x2
   52974:	br	x16

0000000000052978 <xmalloc_set_program_name@@Base>:
   52978:	stp	x29, x30, [sp, #-32]!
   5297c:	adrp	x1, ee000 <aarch64_opcode_table@@Base+0x55a18>
   52980:	mov	x29, sp
   52984:	str	x19, [sp, #16]
   52988:	adrp	x19, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   5298c:	str	x0, [x1, #1632]
   52990:	ldr	x0, [x19, #1152]
   52994:	cbnz	x0, 529a0 <xmalloc_set_program_name@@Base+0x28>
   52998:	bl	351a0 <sbrk@plt>
   5299c:	str	x0, [x19, #1152]
   529a0:	ldr	x19, [sp, #16]
   529a4:	ldp	x29, x30, [sp], #32
   529a8:	ret

00000000000529ac <xmalloc_failed@@Base>:
   529ac:	stp	x29, x30, [sp, #-32]!
   529b0:	mov	x29, sp
   529b4:	stp	x19, x20, [sp, #16]
   529b8:	mov	x19, x0
   529bc:	adrp	x0, 103000 <aarch64_opnd_qualifiers@@Base+0x14e28>
   529c0:	ldr	x20, [x0, #1152]
   529c4:	mov	x0, #0x0                   	// #0
   529c8:	cbz	x20, 52a1c <xmalloc_failed@@Base+0x70>
   529cc:	bl	351a0 <sbrk@plt>
   529d0:	sub	x5, x0, x20
   529d4:	adrp	x0, ee000 <aarch64_opcode_table@@Base+0x55a18>
   529d8:	adrp	x3, 53000 <xexit@@Base+0x508>
   529dc:	adrp	x1, 5b000 <fields@@Base+0x25a8>
   529e0:	add	x3, x3, #0x95f
   529e4:	ldr	x2, [x0, #1632]
   529e8:	add	x1, x1, #0x72b
   529ec:	mov	x4, x19
   529f0:	ldrb	w0, [x2]
   529f4:	cmp	w0, #0x0
   529f8:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   529fc:	csel	x3, x1, x3, ne  // ne = any
   52a00:	adrp	x1, 69000 <fields@@Base+0x105a8>
   52a04:	ldr	x0, [x0, #3840]
   52a08:	add	x1, x1, #0xc38
   52a0c:	ldr	x0, [x0]
   52a10:	bl	35bd0 <fprintf@plt>
   52a14:	mov	w0, #0x1                   	// #1
   52a18:	bl	359a0 <xexit@plt>
   52a1c:	bl	351a0 <sbrk@plt>
   52a20:	adrp	x5, 97000 <aarch64_operands@@Base+0x16bc0>
   52a24:	ldr	x5, [x5, #4008]
   52a28:	sub	x5, x0, x5
   52a2c:	b	529d4 <xmalloc_failed@@Base+0x28>

0000000000052a30 <xmalloc@@Base>:
   52a30:	stp	x29, x30, [sp, #-32]!
   52a34:	cmp	x0, #0x0
   52a38:	mov	x29, sp
   52a3c:	str	x19, [sp, #16]
   52a40:	csinc	x19, x0, xzr, ne  // ne = any
   52a44:	mov	x0, x19
   52a48:	bl	35420 <malloc@plt>
   52a4c:	cbnz	x0, 52a58 <xmalloc@@Base+0x28>
   52a50:	mov	x0, x19
   52a54:	bl	359f0 <xmalloc_failed@plt>
   52a58:	ldr	x19, [sp, #16]
   52a5c:	ldp	x29, x30, [sp], #32
   52a60:	ret

0000000000052a64 <xcalloc@@Base>:
   52a64:	stp	x29, x30, [sp, #-32]!
   52a68:	cmp	x0, #0x0
   52a6c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   52a70:	mov	x29, sp
   52a74:	stp	x19, x20, [sp, #16]
   52a78:	b.ne	52a9c <xcalloc@@Base+0x38>  // b.any
   52a7c:	mov	x19, #0x1                   	// #1
   52a80:	mov	x20, x19
   52a84:	mov	x1, x19
   52a88:	mov	x0, x20
   52a8c:	bl	35560 <calloc@plt>
   52a90:	cbnz	x0, 52aa8 <xcalloc@@Base+0x44>
   52a94:	mul	x0, x20, x19
   52a98:	bl	359f0 <xmalloc_failed@plt>
   52a9c:	mov	x20, x0
   52aa0:	mov	x19, x1
   52aa4:	b	52a84 <xcalloc@@Base+0x20>
   52aa8:	ldp	x19, x20, [sp, #16]
   52aac:	ldp	x29, x30, [sp], #32
   52ab0:	ret

0000000000052ab4 <xrealloc@@Base>:
   52ab4:	stp	x29, x30, [sp, #-32]!
   52ab8:	cmp	x1, #0x0
   52abc:	mov	x29, sp
   52ac0:	str	x19, [sp, #16]
   52ac4:	csinc	x19, x1, xzr, ne  // ne = any
   52ac8:	cbnz	x0, 52ae0 <xrealloc@@Base+0x2c>
   52acc:	mov	x0, x19
   52ad0:	bl	35420 <malloc@plt>
   52ad4:	cbnz	x0, 52aec <xrealloc@@Base+0x38>
   52ad8:	mov	x0, x19
   52adc:	bl	359f0 <xmalloc_failed@plt>
   52ae0:	mov	x1, x19
   52ae4:	bl	355e0 <realloc@plt>
   52ae8:	b	52ad4 <xrealloc@@Base+0x20>
   52aec:	ldr	x19, [sp, #16]
   52af0:	ldp	x29, x30, [sp], #32
   52af4:	ret

0000000000052af8 <xexit@@Base>:
   52af8:	stp	x29, x30, [sp, #-32]!
   52afc:	mov	x29, sp
   52b00:	str	x19, [sp, #16]
   52b04:	mov	w19, w0
   52b08:	adrp	x0, 97000 <aarch64_operands@@Base+0x16bc0>
   52b0c:	ldr	x0, [x0, #3984]
   52b10:	ldr	x0, [x0]
   52b14:	cbz	x0, 52b1c <xexit@@Base+0x24>
   52b18:	blr	x0
   52b1c:	mov	w0, w19
   52b20:	bl	35130 <exit@plt>

Disassembly of section .fini:

0000000000052b24 <.fini>:
   52b24:	stp	x29, x30, [sp, #-16]!
   52b28:	mov	x29, sp
   52b2c:	ldp	x29, x30, [sp], #16
   52b30:	ret
