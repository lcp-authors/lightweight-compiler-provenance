
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 14000 <__FRAME_END__+0xfa34>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 14000 <__FRAME_END__+0xfa34>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret
    1204:	nop

0000000000001208 <deregister_tm_clones>:
    1208:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    120c:	add	x0, x0, #0x1b0
    1210:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1214:	add	x1, x1, #0x1b0
    1218:	cmp	x1, x0
    121c:	b.eq	1234 <deregister_tm_clones+0x2c>  // b.none
    1220:	adrp	x1, 14000 <__FRAME_END__+0xfa34>
    1224:	ldr	x1, [x1, #3992]
    1228:	cbz	x1, 1234 <deregister_tm_clones+0x2c>
    122c:	mov	x16, x1
    1230:	br	x16
    1234:	ret

0000000000001238 <register_tm_clones>:
    1238:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    123c:	add	x0, x0, #0x1b0
    1240:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1244:	add	x1, x1, #0x1b0
    1248:	sub	x1, x1, x0
    124c:	lsr	x2, x1, #63
    1250:	add	x1, x2, x1, asr #3
    1254:	cmp	xzr, x1, asr #1
    1258:	asr	x1, x1, #1
    125c:	b.eq	1274 <register_tm_clones+0x3c>  // b.none
    1260:	adrp	x2, 14000 <__FRAME_END__+0xfa34>
    1264:	ldr	x2, [x2, #4064]
    1268:	cbz	x2, 1274 <register_tm_clones+0x3c>
    126c:	mov	x16, x2
    1270:	br	x16
    1274:	ret

0000000000001278 <__do_global_dtors_aux>:
    1278:	stp	x29, x30, [sp, #-32]!
    127c:	mov	x29, sp
    1280:	str	x19, [sp, #16]
    1284:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1288:	ldrb	w0, [x19, #432]
    128c:	cbnz	w0, 12b4 <__do_global_dtors_aux+0x3c>
    1290:	adrp	x0, 14000 <__FRAME_END__+0xfa34>
    1294:	ldr	x0, [x0, #4000]
    1298:	cbz	x0, 12a8 <__do_global_dtors_aux+0x30>
    129c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12a0:	ldr	x0, [x0, #248]
    12a4:	bl	1050 <__cxa_finalize@plt>
    12a8:	bl	1208 <deregister_tm_clones>
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	strb	w0, [x19, #432]
    12b4:	ldr	x19, [sp, #16]
    12b8:	ldp	x29, x30, [sp], #32
    12bc:	ret

00000000000012c0 <frame_dummy>:
    12c0:	b	1238 <register_tm_clones>

00000000000012c4 <print_fltseq>:
    12c4:	sub	sp, sp, #0xa0
    12c8:	stp	x29, x30, [sp, #144]
    12cc:	add	x29, sp, #0x90
    12d0:	stur	x0, [x29, #-16]
    12d4:	stur	q0, [x29, #-32]
    12d8:	stur	q1, [x29, #-48]
    12dc:	stur	q2, [x29, #-64]
    12e0:	mov	w8, wzr
    12e4:	stur	w8, [x29, #-68]
    12e8:	adrp	x9, 3000 <__eqtf2+0x30>
    12ec:	add	x9, x9, #0xf12
    12f0:	str	x9, [sp, #40]
    12f4:	ldur	q0, [x29, #-32]
    12f8:	str	q0, [sp, #48]
    12fc:	b	1300 <print_fltseq+0x3c>
    1300:	ldur	q0, [x29, #-64]
    1304:	adrp	x8, 3000 <__eqtf2+0x30>
    1308:	ldr	q1, [x8, #3792]
    130c:	bl	30d8 <__getf2>
    1310:	tbnz	w0, #31, 1334 <print_fltseq+0x70>
    1314:	b	1318 <print_fltseq+0x54>
    1318:	ldr	q0, [sp, #48]
    131c:	ldur	q1, [x29, #-48]
    1320:	bl	3220 <__letf2>
    1324:	subs	w8, w0, #0x0
    1328:	cset	w9, le
    132c:	str	w9, [sp, #36]
    1330:	b	1350 <print_fltseq+0x8c>
    1334:	ldr	q0, [sp, #48]
    1338:	ldur	q1, [x29, #-48]
    133c:	bl	30d8 <__getf2>
    1340:	subs	w8, w0, #0x0
    1344:	cset	w9, ge  // ge = tcont
    1348:	str	w9, [sp, #36]
    134c:	b	1350 <print_fltseq+0x8c>
    1350:	ldr	w8, [sp, #36]
    1354:	cbz	w8, 145c <print_fltseq+0x198>
    1358:	b	135c <print_fltseq+0x98>
    135c:	b	1360 <print_fltseq+0x9c>
    1360:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1364:	ldr	x8, [x8, #4048]
    1368:	ldr	w9, [x8]
    136c:	cbz	w9, 1388 <print_fltseq+0xc4>
    1370:	b	1374 <print_fltseq+0xb0>
    1374:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1378:	ldr	x8, [x8, #4048]
    137c:	ldr	w0, [x8]
    1380:	bl	1190 <termsig_handler@plt>
    1384:	b	1388 <print_fltseq+0xc4>
    1388:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    138c:	ldr	x8, [x8, #4024]
    1390:	ldr	w9, [x8]
    1394:	cbz	w9, 13a4 <print_fltseq+0xe0>
    1398:	b	139c <print_fltseq+0xd8>
    139c:	bl	11b0 <throw_to_top_level@plt>
    13a0:	b	13a4 <print_fltseq+0xe0>
    13a4:	b	13a8 <print_fltseq+0xe4>
    13a8:	ldr	x8, [sp, #40]
    13ac:	ldrb	w9, [x8]
    13b0:	cbz	w9, 13e8 <print_fltseq+0x124>
    13b4:	b	13b8 <print_fltseq+0xf4>
    13b8:	ldr	x0, [sp, #40]
    13bc:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    13c0:	ldr	x8, [x8, #4016]
    13c4:	ldr	x1, [x8]
    13c8:	bl	1020 <fputs@plt>
    13cc:	adds	w9, w0, #0x1
    13d0:	b.ne	13e8 <print_fltseq+0x124>  // b.any
    13d4:	b	13d8 <print_fltseq+0x114>
    13d8:	mov	w0, #0x1                   	// #1
    13dc:	bl	1170 <sh_chkwrite@plt>
    13e0:	stur	w0, [x29, #-4]
    13e4:	b	14b0 <print_fltseq+0x1ec>
    13e8:	ldur	x0, [x29, #-16]
    13ec:	ldr	q0, [sp, #48]
    13f0:	bl	11c0 <printf@plt>
    13f4:	tbz	w0, #31, 140c <print_fltseq+0x148>
    13f8:	b	13fc <print_fltseq+0x138>
    13fc:	mov	w0, #0x1                   	// #1
    1400:	bl	1170 <sh_chkwrite@plt>
    1404:	stur	w0, [x29, #-4]
    1408:	b	14b0 <print_fltseq+0x1ec>
    140c:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1410:	ldr	x8, [x8, #440]
    1414:	str	x8, [sp, #40]
    1418:	ldur	w9, [x29, #-68]
    141c:	add	w9, w9, #0x1
    1420:	stur	w9, [x29, #-68]
    1424:	b	1428 <print_fltseq+0x164>
    1428:	ldur	q0, [x29, #-32]
    142c:	ldur	w0, [x29, #-68]
    1430:	str	q0, [sp, #16]
    1434:	bl	3b48 <__floatsitf>
    1438:	ldur	q1, [x29, #-64]
    143c:	bl	3360 <__multf3>
    1440:	ldr	q1, [sp, #16]
    1444:	str	q0, [sp]
    1448:	mov	v0.16b, v1.16b
    144c:	ldr	q1, [sp]
    1450:	bl	24a8 <__addtf3>
    1454:	str	q0, [sp, #48]
    1458:	b	1300 <print_fltseq+0x3c>
    145c:	ldur	w8, [x29, #-68]
    1460:	subs	w8, w8, #0x1
    1464:	b.lt	14a0 <print_fltseq+0x1dc>  // b.tstop
    1468:	b	146c <print_fltseq+0x1a8>
    146c:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1470:	ldr	x8, [x8, #4016]
    1474:	ldr	x1, [x8]
    1478:	adrp	x0, 4000 <_fini+0x140>
    147c:	add	x0, x0, #0x350
    1480:	bl	1020 <fputs@plt>
    1484:	adds	w9, w0, #0x1
    1488:	b.ne	14a0 <print_fltseq+0x1dc>  // b.any
    148c:	b	1490 <print_fltseq+0x1cc>
    1490:	mov	w0, #0x1                   	// #1
    1494:	bl	1170 <sh_chkwrite@plt>
    1498:	stur	w0, [x29, #-4]
    149c:	b	14b0 <print_fltseq+0x1ec>
    14a0:	mov	w0, wzr
    14a4:	bl	1170 <sh_chkwrite@plt>
    14a8:	stur	w0, [x29, #-4]
    14ac:	b	14b0 <print_fltseq+0x1ec>
    14b0:	ldur	w0, [x29, #-4]
    14b4:	ldp	x29, x30, [sp, #144]
    14b8:	add	sp, sp, #0xa0
    14bc:	ret

00000000000014c0 <width_needed>:
    14c0:	sub	sp, sp, #0x10
    14c4:	str	x0, [sp, #8]
    14c8:	ldr	x8, [sp, #8]
    14cc:	cmp	x8, #0x0
    14d0:	cset	w9, lt  // lt = tstop
    14d4:	and	w9, w9, #0x1
    14d8:	str	w9, [sp, #4]
    14dc:	ldr	w9, [sp, #4]
    14e0:	cbz	w9, 14f4 <width_needed+0x34>
    14e4:	ldr	x8, [sp, #8]
    14e8:	mov	x9, xzr
    14ec:	subs	x8, x9, x8
    14f0:	str	x8, [sp, #8]
    14f4:	ldr	w8, [sp, #4]
    14f8:	add	w8, w8, #0x1
    14fc:	str	w8, [sp, #4]
    1500:	ldr	x8, [sp, #8]
    1504:	mov	x9, #0xa                   	// #10
    1508:	sdiv	x8, x8, x9
    150c:	str	x8, [sp, #8]
    1510:	cbnz	x8, 14f4 <width_needed+0x34>
    1514:	ldr	w0, [sp, #4]
    1518:	add	sp, sp, #0x10
    151c:	ret

0000000000001520 <print_intseq>:
    1520:	sub	sp, sp, #0x80
    1524:	stp	x29, x30, [sp, #112]
    1528:	add	x29, sp, #0x70
    152c:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1530:	add	x8, x8, #0x1c0
    1534:	stur	x0, [x29, #-16]
    1538:	stur	x1, [x29, #-24]
    153c:	stur	x2, [x29, #-32]
    1540:	ldr	w9, [x8]
    1544:	cbz	w9, 15a4 <print_intseq+0x84>
    1548:	ldur	x0, [x29, #-16]
    154c:	bl	11a0 <width_needed@plt>
    1550:	str	w0, [sp, #28]
    1554:	ldur	x0, [x29, #-24]
    1558:	bl	11a0 <width_needed@plt>
    155c:	str	w0, [sp, #24]
    1560:	ldr	w8, [sp, #28]
    1564:	ldr	w9, [sp, #24]
    1568:	cmp	w8, w9
    156c:	b.ge	157c <print_intseq+0x5c>  // b.tcont
    1570:	ldr	w8, [sp, #24]
    1574:	str	w8, [sp, #16]
    1578:	b	1584 <print_intseq+0x64>
    157c:	ldr	w8, [sp, #28]
    1580:	str	w8, [sp, #16]
    1584:	ldr	w8, [sp, #16]
    1588:	str	w8, [sp, #20]
    158c:	ldr	w3, [sp, #20]
    1590:	sub	x0, x29, #0x34
    1594:	mov	x1, #0x14                  	// #20
    1598:	adrp	x2, 3000 <__eqtf2+0x30>
    159c:	add	x2, x2, #0xf00
    15a0:	bl	1070 <snprintf@plt>
    15a4:	adrp	x8, 3000 <__eqtf2+0x30>
    15a8:	add	x8, x8, #0xf12
    15ac:	str	x8, [sp, #48]
    15b0:	ldur	x8, [x29, #-16]
    15b4:	str	x8, [sp, #40]
    15b8:	ldur	x8, [x29, #-16]
    15bc:	ldur	x9, [x29, #-24]
    15c0:	cmp	x8, x9
    15c4:	b.gt	15e4 <print_intseq+0xc4>
    15c8:	ldr	x8, [sp, #40]
    15cc:	ldur	x9, [x29, #-24]
    15d0:	cmp	x8, x9
    15d4:	cset	w10, le
    15d8:	and	w10, w10, #0x1
    15dc:	str	w10, [sp, #12]
    15e0:	b	15fc <print_intseq+0xdc>
    15e4:	ldr	x8, [sp, #40]
    15e8:	ldur	x9, [x29, #-24]
    15ec:	cmp	x8, x9
    15f0:	cset	w10, ge  // ge = tcont
    15f4:	and	w10, w10, #0x1
    15f8:	str	w10, [sp, #12]
    15fc:	ldr	w8, [sp, #12]
    1600:	cbz	w8, 16bc <print_intseq+0x19c>
    1604:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1608:	ldr	x8, [x8, #4048]
    160c:	ldr	w9, [x8]
    1610:	cbz	w9, 1624 <print_intseq+0x104>
    1614:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1618:	ldr	x8, [x8, #4048]
    161c:	ldr	w0, [x8]
    1620:	bl	1190 <termsig_handler@plt>
    1624:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1628:	ldr	x8, [x8, #4024]
    162c:	ldr	w9, [x8]
    1630:	cbz	w9, 1638 <print_intseq+0x118>
    1634:	bl	11b0 <throw_to_top_level@plt>
    1638:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    163c:	add	x8, x8, #0x1c0
    1640:	ldr	w9, [x8]
    1644:	cbz	w9, 1654 <print_intseq+0x134>
    1648:	sub	x8, x29, #0x34
    164c:	str	x8, [sp]
    1650:	b	1660 <print_intseq+0x140>
    1654:	adrp	x8, 3000 <__eqtf2+0x30>
    1658:	add	x8, x8, #0xf0b
    165c:	str	x8, [sp]
    1660:	ldr	x8, [sp]
    1664:	ldr	x1, [sp, #48]
    1668:	ldr	x2, [sp, #40]
    166c:	mov	x0, x8
    1670:	bl	11c0 <printf@plt>
    1674:	cmp	w0, #0x0
    1678:	cset	w9, ge  // ge = tcont
    167c:	tbnz	w9, #0, 1690 <print_intseq+0x170>
    1680:	mov	w0, #0x1                   	// #1
    1684:	bl	1170 <sh_chkwrite@plt>
    1688:	stur	w0, [x29, #-4]
    168c:	b	1700 <print_intseq+0x1e0>
    1690:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1694:	add	x8, x8, #0x1b8
    1698:	ldr	x8, [x8]
    169c:	str	x8, [sp, #48]
    16a0:	ldr	x8, [sp, #40]
    16a4:	ldur	x9, [x29, #-32]
    16a8:	add	x8, x8, x9
    16ac:	str	x8, [sp, #32]
    16b0:	ldr	x8, [sp, #32]
    16b4:	str	x8, [sp, #40]
    16b8:	b	15b8 <print_intseq+0x98>
    16bc:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    16c0:	ldr	x8, [x8, #4016]
    16c4:	ldr	x1, [x8]
    16c8:	adrp	x0, 4000 <_fini+0x140>
    16cc:	add	x0, x0, #0x350
    16d0:	bl	1020 <fputs@plt>
    16d4:	mov	w9, #0xffffffff            	// #-1
    16d8:	cmp	w0, w9
    16dc:	b.ne	16f0 <print_intseq+0x1d0>  // b.any
    16e0:	mov	w0, #0x1                   	// #1
    16e4:	bl	1170 <sh_chkwrite@plt>
    16e8:	stur	w0, [x29, #-4]
    16ec:	b	1700 <print_intseq+0x1e0>
    16f0:	mov	w8, wzr
    16f4:	mov	w0, w8
    16f8:	bl	1170 <sh_chkwrite@plt>
    16fc:	stur	w0, [x29, #-4]
    1700:	ldur	w0, [x29, #-4]
    1704:	ldp	x29, x30, [sp, #112]
    1708:	add	sp, sp, #0x80
    170c:	ret

0000000000001710 <seq_builtin>:
    1710:	sub	sp, sp, #0xe0
    1714:	stp	x29, x30, [sp, #208]
    1718:	add	x29, sp, #0xd0
    171c:	stur	x0, [x29, #-16]
    1720:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1724:	mov	w9, wzr
    1728:	str	w9, [x8, #448]
    172c:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1730:	adrp	x10, 3000 <__eqtf2+0x30>
    1734:	add	x10, x10, #0xf11
    1738:	str	x10, [x8, #440]
    173c:	mov	x8, xzr
    1740:	str	x8, [sp, #64]
    1744:	adrp	x10, 3000 <__eqtf2+0x30>
    1748:	ldr	q0, [x10, #3808]
    174c:	stur	q0, [x29, #-32]
    1750:	adrp	x10, 3000 <__eqtf2+0x30>
    1754:	ldr	q0, [x10, #3792]
    1758:	stur	q0, [x29, #-48]
    175c:	stur	q0, [x29, #-64]
    1760:	stur	x8, [x29, #-88]
    1764:	stur	x8, [x29, #-80]
    1768:	stur	x8, [x29, #-72]
    176c:	str	x8, [sp, #72]
    1770:	str	x8, [sp, #80]
    1774:	str	x8, [sp, #88]
    1778:	str	w9, [sp, #96]
    177c:	str	w9, [sp, #100]
    1780:	stur	w9, [x29, #-100]
    1784:	bl	1140 <reset_internal_getopt@plt>
    1788:	b	178c <seq_builtin+0x7c>
    178c:	ldur	w8, [x29, #-100]
    1790:	adds	w8, w8, #0x1
    1794:	b.eq	1958 <seq_builtin+0x248>  // b.none
    1798:	b	179c <seq_builtin+0x8c>
    179c:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    17a0:	ldr	x8, [x8, #4008]
    17a4:	ldr	x8, [x8]
    17a8:	cbz	x8, 17c4 <seq_builtin+0xb4>
    17ac:	b	17b0 <seq_builtin+0xa0>
    17b0:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    17b4:	ldr	x8, [x8, #4008]
    17b8:	ldr	x8, [x8]
    17bc:	str	x8, [sp, #56]
    17c0:	b	17d0 <seq_builtin+0xc0>
    17c4:	ldur	x8, [x29, #-16]
    17c8:	str	x8, [sp, #56]
    17cc:	b	17d0 <seq_builtin+0xc0>
    17d0:	ldr	x8, [sp, #56]
    17d4:	stur	x8, [x29, #-96]
    17d8:	ldur	x8, [x29, #-96]
    17dc:	cbz	x8, 188c <seq_builtin+0x17c>
    17e0:	b	17e4 <seq_builtin+0xd4>
    17e4:	ldur	x8, [x29, #-96]
    17e8:	ldr	x8, [x8, #8]
    17ec:	cbz	x8, 188c <seq_builtin+0x17c>
    17f0:	b	17f4 <seq_builtin+0xe4>
    17f4:	ldur	x8, [x29, #-96]
    17f8:	ldr	x8, [x8, #8]
    17fc:	ldr	x8, [x8]
    1800:	cbz	x8, 188c <seq_builtin+0x17c>
    1804:	b	1808 <seq_builtin+0xf8>
    1808:	ldur	x8, [x29, #-96]
    180c:	ldr	x8, [x8, #8]
    1810:	ldr	x8, [x8]
    1814:	ldrb	w9, [x8]
    1818:	subs	w9, w9, #0x2d
    181c:	b.ne	188c <seq_builtin+0x17c>  // b.any
    1820:	b	1824 <seq_builtin+0x114>
    1824:	ldur	x8, [x29, #-96]
    1828:	ldr	x8, [x8, #8]
    182c:	ldr	x8, [x8]
    1830:	ldrb	w9, [x8, #1]
    1834:	subs	w9, w9, #0x2e
    1838:	b.eq	1878 <seq_builtin+0x168>  // b.none
    183c:	b	1840 <seq_builtin+0x130>
    1840:	ldur	x8, [x29, #-96]
    1844:	ldr	x8, [x8, #8]
    1848:	ldr	x8, [x8]
    184c:	ldrb	w9, [x8, #1]
    1850:	subs	w9, w9, #0x30
    1854:	b.lt	188c <seq_builtin+0x17c>  // b.tstop
    1858:	b	185c <seq_builtin+0x14c>
    185c:	ldur	x8, [x29, #-96]
    1860:	ldr	x8, [x8, #8]
    1864:	ldr	x8, [x8]
    1868:	ldrb	w9, [x8, #1]
    186c:	subs	w9, w9, #0x39
    1870:	b.gt	188c <seq_builtin+0x17c>
    1874:	b	1878 <seq_builtin+0x168>
    1878:	ldur	x8, [x29, #-96]
    187c:	adrp	x9, 14000 <__FRAME_END__+0xfa34>
    1880:	ldr	x9, [x9, #4056]
    1884:	str	x8, [x9]
    1888:	b	1958 <seq_builtin+0x248>
    188c:	ldur	x0, [x29, #-16]
    1890:	adrp	x1, 3000 <__eqtf2+0x30>
    1894:	add	x1, x1, #0xf13
    1898:	bl	1130 <internal_getopt@plt>
    189c:	stur	w0, [x29, #-100]
    18a0:	adds	w8, w0, #0x1
    18a4:	b.ne	18b0 <seq_builtin+0x1a0>  // b.any
    18a8:	b	18ac <seq_builtin+0x19c>
    18ac:	b	1958 <seq_builtin+0x248>
    18b0:	ldur	w8, [x29, #-100]
    18b4:	mov	w9, w8
    18b8:	adds	w8, w8, #0x63
    18bc:	str	w9, [sp, #52]
    18c0:	b.eq	1934 <seq_builtin+0x224>  // b.none
    18c4:	b	18c8 <seq_builtin+0x1b8>
    18c8:	ldr	w8, [sp, #52]
    18cc:	subs	w9, w8, #0x66
    18d0:	b.eq	18f8 <seq_builtin+0x1e8>  // b.none
    18d4:	b	18d8 <seq_builtin+0x1c8>
    18d8:	ldr	w8, [sp, #52]
    18dc:	subs	w9, w8, #0x73
    18e0:	b.eq	190c <seq_builtin+0x1fc>  // b.none
    18e4:	b	18e8 <seq_builtin+0x1d8>
    18e8:	ldr	w8, [sp, #52]
    18ec:	subs	w9, w8, #0x77
    18f0:	b.eq	1924 <seq_builtin+0x214>  // b.none
    18f4:	b	1944 <seq_builtin+0x234>
    18f8:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    18fc:	ldr	x8, [x8, #4040]
    1900:	ldr	x8, [x8]
    1904:	str	x8, [sp, #64]
    1908:	b	1954 <seq_builtin+0x244>
    190c:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    1910:	ldr	x8, [x8, #4040]
    1914:	ldr	x8, [x8]
    1918:	adrp	x9, 15000 <memcpy@GLIBC_2.17>
    191c:	str	x8, [x9, #440]
    1920:	b	1954 <seq_builtin+0x244>
    1924:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1928:	mov	w9, #0x1                   	// #1
    192c:	str	w9, [x8, #448]
    1930:	b	1954 <seq_builtin+0x244>
    1934:	bl	10a0 <builtin_help@plt>
    1938:	mov	w8, #0x102                 	// #258
    193c:	stur	w8, [x29, #-4]
    1940:	b	1dc0 <seq_builtin+0x6b0>
    1944:	bl	10c0 <builtin_usage@plt>
    1948:	mov	w8, #0x102                 	// #258
    194c:	stur	w8, [x29, #-4]
    1950:	b	1dc0 <seq_builtin+0x6b0>
    1954:	b	178c <seq_builtin+0x7c>
    1958:	adrp	x8, 14000 <__FRAME_END__+0xfa34>
    195c:	ldr	x8, [x8, #4056]
    1960:	ldr	x8, [x8]
    1964:	stur	x8, [x29, #-16]
    1968:	ldur	x8, [x29, #-16]
    196c:	cbnz	x8, 1984 <seq_builtin+0x274>
    1970:	b	1974 <seq_builtin+0x264>
    1974:	bl	10c0 <builtin_usage@plt>
    1978:	mov	w8, #0x1                   	// #1
    197c:	stur	w8, [x29, #-4]
    1980:	b	1dc0 <seq_builtin+0x6b0>
    1984:	mov	w8, #0x1                   	// #1
    1988:	str	w8, [sp, #104]
    198c:	ldur	x9, [x29, #-16]
    1990:	stur	x9, [x29, #-96]
    1994:	b	1998 <seq_builtin+0x288>
    1998:	ldur	x8, [x29, #-96]
    199c:	ldr	x8, [x8]
    19a0:	cbz	x8, 19c8 <seq_builtin+0x2b8>
    19a4:	b	19a8 <seq_builtin+0x298>
    19a8:	ldr	w8, [sp, #104]
    19ac:	add	w8, w8, #0x1
    19b0:	str	w8, [sp, #104]
    19b4:	b	19b8 <seq_builtin+0x2a8>
    19b8:	ldur	x8, [x29, #-96]
    19bc:	ldr	x8, [x8]
    19c0:	stur	x8, [x29, #-96]
    19c4:	b	1998 <seq_builtin+0x288>
    19c8:	ldr	w8, [sp, #104]
    19cc:	subs	w8, w8, #0x4
    19d0:	b.lt	19e8 <seq_builtin+0x2d8>  // b.tstop
    19d4:	b	19d8 <seq_builtin+0x2c8>
    19d8:	bl	10c0 <builtin_usage@plt>
    19dc:	mov	w8, #0x1                   	// #1
    19e0:	stur	w8, [x29, #-4]
    19e4:	b	1dc0 <seq_builtin+0x6b0>
    19e8:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    19ec:	mov	w9, wzr
    19f0:	str	w9, [x8, #452]
    19f4:	ldur	x10, [x29, #-96]
    19f8:	ldr	x10, [x10, #8]
    19fc:	ldr	x10, [x10]
    1a00:	str	x10, [sp, #72]
    1a04:	mov	x0, x10
    1a08:	str	x8, [sp, #40]
    1a0c:	bl	1dd0 <getfloatmax>
    1a10:	stur	q0, [x29, #-48]
    1a14:	ldr	x8, [sp, #40]
    1a18:	ldr	w9, [x8, #452]
    1a1c:	cbz	w9, 1a30 <seq_builtin+0x320>
    1a20:	b	1a24 <seq_builtin+0x314>
    1a24:	mov	w8, #0x1                   	// #1
    1a28:	stur	w8, [x29, #-4]
    1a2c:	b	1dc0 <seq_builtin+0x6b0>
    1a30:	ldr	w8, [sp, #104]
    1a34:	subs	w8, w8, #0x2
    1a38:	b.lt	1a8c <seq_builtin+0x37c>  // b.tstop
    1a3c:	b	1a40 <seq_builtin+0x330>
    1a40:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1a44:	mov	w9, wzr
    1a48:	str	w9, [x8, #452]
    1a4c:	ldur	x10, [x29, #-16]
    1a50:	ldr	x10, [x10, #8]
    1a54:	ldr	x10, [x10]
    1a58:	str	x10, [sp, #88]
    1a5c:	mov	x0, x10
    1a60:	str	x8, [sp, #32]
    1a64:	bl	1dd0 <getfloatmax>
    1a68:	stur	q0, [x29, #-32]
    1a6c:	ldr	x8, [sp, #32]
    1a70:	ldr	w9, [x8, #452]
    1a74:	cbz	w9, 1a88 <seq_builtin+0x378>
    1a78:	b	1a7c <seq_builtin+0x36c>
    1a7c:	mov	w8, #0x1                   	// #1
    1a80:	stur	w8, [x29, #-4]
    1a84:	b	1dc0 <seq_builtin+0x6b0>
    1a88:	b	1a8c <seq_builtin+0x37c>
    1a8c:	ldr	w8, [sp, #104]
    1a90:	subs	w8, w8, #0x3
    1a94:	b.lt	1b44 <seq_builtin+0x434>  // b.tstop
    1a98:	b	1a9c <seq_builtin+0x38c>
    1a9c:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1aa0:	mov	w9, wzr
    1aa4:	str	w9, [x8, #452]
    1aa8:	ldur	x10, [x29, #-16]
    1aac:	ldr	x10, [x10]
    1ab0:	ldr	x10, [x10, #8]
    1ab4:	ldr	x10, [x10]
    1ab8:	str	x10, [sp, #80]
    1abc:	mov	x0, x10
    1ac0:	str	x8, [sp, #24]
    1ac4:	bl	1dd0 <getfloatmax>
    1ac8:	stur	q0, [x29, #-64]
    1acc:	ldr	x8, [sp, #24]
    1ad0:	ldr	w9, [x8, #452]
    1ad4:	cbz	w9, 1ae8 <seq_builtin+0x3d8>
    1ad8:	b	1adc <seq_builtin+0x3cc>
    1adc:	mov	w8, #0x1                   	// #1
    1ae0:	stur	w8, [x29, #-4]
    1ae4:	b	1dc0 <seq_builtin+0x6b0>
    1ae8:	ldur	q0, [x29, #-64]
    1aec:	adrp	x8, 3000 <__eqtf2+0x30>
    1af0:	ldr	q1, [x8, #3792]
    1af4:	bl	2fd0 <__eqtf2>
    1af8:	cbnz	w0, 1b40 <seq_builtin+0x430>
    1afc:	b	1b00 <seq_builtin+0x3f0>
    1b00:	ldur	q0, [x29, #-32]
    1b04:	ldur	q1, [x29, #-48]
    1b08:	bl	3220 <__letf2>
    1b0c:	adrp	x8, 3000 <__eqtf2+0x30>
    1b10:	add	x8, x8, #0xf2b
    1b14:	adrp	x9, 3000 <__eqtf2+0x30>
    1b18:	add	x9, x9, #0xf28
    1b1c:	subs	w10, w0, #0x0
    1b20:	csel	x1, x9, x8, lt  // lt = tstop
    1b24:	adrp	x0, 3000 <__eqtf2+0x30>
    1b28:	add	x0, x0, #0xf19
    1b2c:	str	w10, [sp, #20]
    1b30:	bl	1030 <builtin_error@plt>
    1b34:	mov	w10, #0x1                   	// #1
    1b38:	stur	w10, [x29, #-4]
    1b3c:	b	1dc0 <seq_builtin+0x6b0>
    1b40:	b	1b44 <seq_builtin+0x434>
    1b44:	ldur	q0, [x29, #-64]
    1b48:	adrp	x8, 3000 <__eqtf2+0x30>
    1b4c:	ldr	q1, [x8, #3792]
    1b50:	bl	2fd0 <__eqtf2>
    1b54:	cbnz	w0, 1b88 <seq_builtin+0x478>
    1b58:	b	1b5c <seq_builtin+0x44c>
    1b5c:	ldur	q0, [x29, #-32]
    1b60:	ldur	q1, [x29, #-48]
    1b64:	bl	3220 <__letf2>
    1b68:	subs	w8, w0, #0x0
    1b6c:	fmov	d2, #-1.000000000000000000e+00
    1b70:	fmov	d3, #1.000000000000000000e+00
    1b74:	fcsel	d0, d3, d2, le
    1b78:	str	w8, [sp, #16]
    1b7c:	bl	3d00 <__extenddftf2>
    1b80:	stur	q0, [x29, #-64]
    1b84:	b	1b88 <seq_builtin+0x478>
    1b88:	ldur	q0, [x29, #-64]
    1b8c:	adrp	x8, 3000 <__eqtf2+0x30>
    1b90:	ldr	q1, [x8, #3792]
    1b94:	bl	3220 <__letf2>
    1b98:	subs	w9, w0, #0x0
    1b9c:	b.ge	1bb8 <seq_builtin+0x4a8>  // b.tcont
    1ba0:	b	1ba4 <seq_builtin+0x494>
    1ba4:	ldur	q0, [x29, #-32]
    1ba8:	ldur	q1, [x29, #-48]
    1bac:	bl	3220 <__letf2>
    1bb0:	tbnz	w0, #31, 1bec <seq_builtin+0x4dc>
    1bb4:	b	1bb8 <seq_builtin+0x4a8>
    1bb8:	ldur	q0, [x29, #-64]
    1bbc:	adrp	x8, 3000 <__eqtf2+0x30>
    1bc0:	ldr	q1, [x8, #3792]
    1bc4:	bl	30d8 <__getf2>
    1bc8:	subs	w9, w0, #0x0
    1bcc:	b.le	1c2c <seq_builtin+0x51c>
    1bd0:	b	1bd4 <seq_builtin+0x4c4>
    1bd4:	ldur	q0, [x29, #-32]
    1bd8:	ldur	q1, [x29, #-48]
    1bdc:	bl	30d8 <__getf2>
    1be0:	subs	w8, w0, #0x0
    1be4:	b.le	1c2c <seq_builtin+0x51c>
    1be8:	b	1bec <seq_builtin+0x4dc>
    1bec:	ldur	q0, [x29, #-32]
    1bf0:	ldur	q1, [x29, #-48]
    1bf4:	bl	3220 <__letf2>
    1bf8:	adrp	x8, 3000 <__eqtf2+0x30>
    1bfc:	add	x8, x8, #0xf2b
    1c00:	adrp	x9, 3000 <__eqtf2+0x30>
    1c04:	add	x9, x9, #0xf28
    1c08:	subs	w10, w0, #0x0
    1c0c:	csel	x1, x9, x8, lt  // lt = tstop
    1c10:	adrp	x0, 3000 <__eqtf2+0x30>
    1c14:	add	x0, x0, #0xf2e
    1c18:	str	w10, [sp, #12]
    1c1c:	bl	1030 <builtin_error@plt>
    1c20:	mov	w10, #0x1                   	// #1
    1c24:	stur	w10, [x29, #-4]
    1c28:	b	1dc0 <seq_builtin+0x6b0>
    1c2c:	ldr	x8, [sp, #64]
    1c30:	cbz	x8, 1c68 <seq_builtin+0x558>
    1c34:	b	1c38 <seq_builtin+0x528>
    1c38:	ldr	x0, [sp, #64]
    1c3c:	bl	1eb0 <long_double_format>
    1c40:	str	x0, [sp, #64]
    1c44:	mov	w8, #0x1                   	// #1
    1c48:	str	w8, [sp, #96]
    1c4c:	ldr	x9, [sp, #64]
    1c50:	cbnz	x9, 1c64 <seq_builtin+0x554>
    1c54:	b	1c58 <seq_builtin+0x548>
    1c58:	mov	w8, #0x1                   	// #1
    1c5c:	stur	w8, [x29, #-4]
    1c60:	b	1dc0 <seq_builtin+0x6b0>
    1c64:	b	1c68 <seq_builtin+0x558>
    1c68:	ldr	x8, [sp, #64]
    1c6c:	cbz	x8, 1ca0 <seq_builtin+0x590>
    1c70:	b	1c74 <seq_builtin+0x564>
    1c74:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1c78:	ldr	w9, [x8, #448]
    1c7c:	cbz	w9, 1ca0 <seq_builtin+0x590>
    1c80:	b	1c84 <seq_builtin+0x574>
    1c84:	adrp	x0, 3000 <__eqtf2+0x30>
    1c88:	add	x0, x0, #0xf42
    1c8c:	bl	1040 <builtin_warning@plt>
    1c90:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1c94:	mov	w9, wzr
    1c98:	str	w9, [x8, #448]
    1c9c:	b	1ca0 <seq_builtin+0x590>
    1ca0:	ldr	x8, [sp, #72]
    1ca4:	cbz	x8, 1d0c <seq_builtin+0x5fc>
    1ca8:	b	1cac <seq_builtin+0x59c>
    1cac:	ldr	x0, [sp, #72]
    1cb0:	bl	1010 <all_digits@plt>
    1cb4:	cbz	w0, 1d0c <seq_builtin+0x5fc>
    1cb8:	b	1cbc <seq_builtin+0x5ac>
    1cbc:	ldr	x8, [sp, #88]
    1cc0:	cbz	x8, 1cd8 <seq_builtin+0x5c8>
    1cc4:	b	1cc8 <seq_builtin+0x5b8>
    1cc8:	ldr	x0, [sp, #88]
    1ccc:	bl	1010 <all_digits@plt>
    1cd0:	cbz	w0, 1d0c <seq_builtin+0x5fc>
    1cd4:	b	1cd8 <seq_builtin+0x5c8>
    1cd8:	ldr	x8, [sp, #80]
    1cdc:	cbz	x8, 1cf4 <seq_builtin+0x5e4>
    1ce0:	b	1ce4 <seq_builtin+0x5d4>
    1ce4:	ldr	x0, [sp, #80]
    1ce8:	bl	1010 <all_digits@plt>
    1cec:	cbz	w0, 1d0c <seq_builtin+0x5fc>
    1cf0:	b	1cf4 <seq_builtin+0x5e4>
    1cf4:	ldr	x8, [sp, #64]
    1cf8:	cbnz	x8, 1d0c <seq_builtin+0x5fc>
    1cfc:	b	1d00 <seq_builtin+0x5f0>
    1d00:	mov	w8, #0x1                   	// #1
    1d04:	str	w8, [sp, #100]
    1d08:	b	1d0c <seq_builtin+0x5fc>
    1d0c:	ldr	w8, [sp, #100]
    1d10:	cbz	w8, 1d54 <seq_builtin+0x644>
    1d14:	b	1d18 <seq_builtin+0x608>
    1d18:	ldur	q0, [x29, #-32]
    1d1c:	bl	3bc8 <__fixtfdi>
    1d20:	stur	x0, [x29, #-72]
    1d24:	ldur	q0, [x29, #-48]
    1d28:	bl	3bc8 <__fixtfdi>
    1d2c:	stur	x0, [x29, #-80]
    1d30:	ldur	q0, [x29, #-64]
    1d34:	bl	3bc8 <__fixtfdi>
    1d38:	stur	x0, [x29, #-88]
    1d3c:	ldur	x0, [x29, #-72]
    1d40:	ldur	x1, [x29, #-80]
    1d44:	ldur	x2, [x29, #-88]
    1d48:	bl	1090 <print_intseq@plt>
    1d4c:	stur	w0, [x29, #-4]
    1d50:	b	1dc0 <seq_builtin+0x6b0>
    1d54:	bl	1080 <locale_decpoint@plt>
    1d58:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1d5c:	strb	w0, [x8, #456]
    1d60:	ldr	x8, [sp, #64]
    1d64:	cbnz	x8, 1d84 <seq_builtin+0x674>
    1d68:	b	1d6c <seq_builtin+0x65c>
    1d6c:	ldur	q0, [x29, #-32]
    1d70:	ldur	q1, [x29, #-64]
    1d74:	ldur	q2, [x29, #-48]
    1d78:	bl	21f0 <genformat>
    1d7c:	str	x0, [sp, #64]
    1d80:	b	1d84 <seq_builtin+0x674>
    1d84:	ldr	x0, [sp, #64]
    1d88:	ldur	q0, [x29, #-32]
    1d8c:	ldur	q1, [x29, #-48]
    1d90:	ldur	q2, [x29, #-64]
    1d94:	bl	1110 <print_fltseq@plt>
    1d98:	ldr	w8, [sp, #96]
    1d9c:	cbz	w8, 1db0 <seq_builtin+0x6a0>
    1da0:	b	1da4 <seq_builtin+0x694>
    1da4:	ldr	x0, [sp, #64]
    1da8:	bl	1120 <free@plt>
    1dac:	b	1db0 <seq_builtin+0x6a0>
    1db0:	mov	w0, wzr
    1db4:	bl	1170 <sh_chkwrite@plt>
    1db8:	stur	w0, [x29, #-4]
    1dbc:	b	1dc0 <seq_builtin+0x6b0>
    1dc0:	ldur	w0, [x29, #-4]
    1dc4:	ldp	x29, x30, [sp, #208]
    1dc8:	add	sp, sp, #0xe0
    1dcc:	ret

0000000000001dd0 <getfloatmax>:
    1dd0:	sub	sp, sp, #0x50
    1dd4:	stp	x29, x30, [sp, #64]
    1dd8:	add	x29, sp, #0x40
    1ddc:	stur	x0, [x29, #-8]
    1de0:	bl	11d0 <__errno_location@plt>
    1de4:	mov	w8, wzr
    1de8:	str	w8, [x0]
    1dec:	ldur	x0, [x29, #-8]
    1df0:	add	x1, sp, #0x18
    1df4:	bl	1100 <strtold@plt>
    1df8:	str	q0, [sp, #32]
    1dfc:	ldr	x9, [sp, #24]
    1e00:	ldrb	w8, [x9]
    1e04:	cbz	w8, 1e24 <getfloatmax+0x54>
    1e08:	b	1e0c <getfloatmax+0x3c>
    1e0c:	ldur	x0, [x29, #-8]
    1e10:	bl	11e0 <sh_invalidnum@plt>
    1e14:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1e18:	mov	w9, #0x1                   	// #1
    1e1c:	str	w9, [x8, #452]
    1e20:	b	1e78 <getfloatmax+0xa8>
    1e24:	bl	11d0 <__errno_location@plt>
    1e28:	ldr	w8, [x0]
    1e2c:	subs	w8, w8, #0x22
    1e30:	b.ne	1e74 <getfloatmax+0xa4>  // b.any
    1e34:	b	1e38 <getfloatmax+0x68>
    1e38:	ldur	x1, [x29, #-8]
    1e3c:	mov	w0, #0x22                  	// #34
    1e40:	str	x1, [sp, #16]
    1e44:	bl	10d0 <strerror@plt>
    1e48:	adrp	x8, 4000 <_fini+0x140>
    1e4c:	add	x8, x8, #0x294
    1e50:	str	x0, [sp, #8]
    1e54:	mov	x0, x8
    1e58:	ldr	x1, [sp, #16]
    1e5c:	ldr	x2, [sp, #8]
    1e60:	bl	1030 <builtin_error@plt>
    1e64:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1e68:	mov	w9, #0x1                   	// #1
    1e6c:	str	w9, [x8, #452]
    1e70:	b	1e74 <getfloatmax+0xa4>
    1e74:	b	1e78 <getfloatmax+0xa8>
    1e78:	ldr	q0, [sp, #32]
    1e7c:	adrp	x8, 3000 <__eqtf2+0x30>
    1e80:	ldr	q1, [x8, #3824]
    1e84:	bl	2fd0 <__eqtf2>
    1e88:	cbnz	w0, 1ea0 <getfloatmax+0xd0>
    1e8c:	b	1e90 <getfloatmax+0xc0>
    1e90:	adrp	x8, 3000 <__eqtf2+0x30>
    1e94:	ldr	q0, [x8, #3792]
    1e98:	str	q0, [sp, #32]
    1e9c:	b	1ea0 <getfloatmax+0xd0>
    1ea0:	ldr	q0, [sp, #32]
    1ea4:	ldp	x29, x30, [sp, #64]
    1ea8:	add	sp, sp, #0x50
    1eac:	ret

0000000000001eb0 <long_double_format>:
    1eb0:	sub	sp, sp, #0x50
    1eb4:	stp	x29, x30, [sp, #64]
    1eb8:	add	x29, sp, #0x40
    1ebc:	stur	x0, [x29, #-16]
    1ec0:	stur	xzr, [x29, #-24]
    1ec4:	ldur	x8, [x29, #-16]
    1ec8:	ldur	x9, [x29, #-24]
    1ecc:	ldrb	w10, [x8, x9]
    1ed0:	mov	w11, #0x0                   	// #0
    1ed4:	cmp	w10, #0x25
    1ed8:	str	w11, [sp, #4]
    1edc:	b.ne	1efc <long_double_format+0x4c>  // b.any
    1ee0:	ldur	x8, [x29, #-16]
    1ee4:	ldur	x9, [x29, #-24]
    1ee8:	add	x9, x9, #0x1
    1eec:	ldrb	w10, [x8, x9]
    1ef0:	cmp	w10, #0x25
    1ef4:	cset	w10, ne  // ne = any
    1ef8:	str	w10, [sp, #4]
    1efc:	ldr	w8, [sp, #4]
    1f00:	eor	w8, w8, #0x1
    1f04:	tbnz	w8, #0, 1f0c <long_double_format+0x5c>
    1f08:	b	1f68 <long_double_format+0xb8>
    1f0c:	ldur	x8, [x29, #-16]
    1f10:	ldur	x9, [x29, #-24]
    1f14:	add	x8, x8, x9
    1f18:	ldrb	w10, [x8]
    1f1c:	cbnz	w10, 1f3c <long_double_format+0x8c>
    1f20:	ldur	x1, [x29, #-16]
    1f24:	adrp	x0, 4000 <_fini+0x140>
    1f28:	add	x0, x0, #0x2a4
    1f2c:	bl	1030 <builtin_error@plt>
    1f30:	mov	x8, xzr
    1f34:	stur	x8, [x29, #-8]
    1f38:	b	21e0 <long_double_format+0x330>
    1f3c:	ldur	x8, [x29, #-16]
    1f40:	ldur	x9, [x29, #-24]
    1f44:	ldrb	w10, [x8, x9]
    1f48:	cmp	w10, #0x25
    1f4c:	cset	w10, eq  // eq = none
    1f50:	and	w10, w10, #0x1
    1f54:	add	w10, w10, #0x1
    1f58:	ldur	x8, [x29, #-24]
    1f5c:	add	x8, x8, w10, sxtw
    1f60:	stur	x8, [x29, #-24]
    1f64:	b	1ec4 <long_double_format+0x14>
    1f68:	ldur	x8, [x29, #-24]
    1f6c:	add	x8, x8, #0x1
    1f70:	stur	x8, [x29, #-24]
    1f74:	ldur	x8, [x29, #-16]
    1f78:	ldur	x9, [x29, #-24]
    1f7c:	add	x0, x8, x9
    1f80:	adrp	x1, 4000 <_fini+0x140>
    1f84:	add	x1, x1, #0x2c2
    1f88:	bl	1150 <strspn@plt>
    1f8c:	ldur	x8, [x29, #-24]
    1f90:	add	x8, x8, x0
    1f94:	stur	x8, [x29, #-24]
    1f98:	ldur	x8, [x29, #-16]
    1f9c:	ldur	x9, [x29, #-24]
    1fa0:	add	x0, x8, x9
    1fa4:	adrp	x1, 4000 <_fini+0x140>
    1fa8:	add	x1, x1, #0x2c9
    1fac:	bl	1150 <strspn@plt>
    1fb0:	ldur	x8, [x29, #-24]
    1fb4:	add	x8, x8, x0
    1fb8:	stur	x8, [x29, #-24]
    1fbc:	ldur	x8, [x29, #-16]
    1fc0:	ldur	x9, [x29, #-24]
    1fc4:	ldrb	w10, [x8, x9]
    1fc8:	cmp	w10, #0x2e
    1fcc:	b.ne	2000 <long_double_format+0x150>  // b.any
    1fd0:	ldur	x8, [x29, #-24]
    1fd4:	add	x8, x8, #0x1
    1fd8:	stur	x8, [x29, #-24]
    1fdc:	ldur	x8, [x29, #-16]
    1fe0:	ldur	x9, [x29, #-24]
    1fe4:	add	x0, x8, x9
    1fe8:	adrp	x1, 4000 <_fini+0x140>
    1fec:	add	x1, x1, #0x2c9
    1ff0:	bl	1150 <strspn@plt>
    1ff4:	ldur	x8, [x29, #-24]
    1ff8:	add	x8, x8, x0
    1ffc:	stur	x8, [x29, #-24]
    2000:	ldur	x8, [x29, #-24]
    2004:	str	x8, [sp, #32]
    2008:	ldur	x8, [x29, #-16]
    200c:	ldur	x9, [x29, #-24]
    2010:	ldrb	w10, [x8, x9]
    2014:	cmp	w10, #0x4c
    2018:	cset	w10, eq  // eq = none
    201c:	and	w10, w10, #0x1
    2020:	str	w10, [sp, #28]
    2024:	ldrsw	x8, [sp, #28]
    2028:	ldur	x9, [x29, #-24]
    202c:	add	x8, x9, x8
    2030:	stur	x8, [x29, #-24]
    2034:	ldur	x8, [x29, #-16]
    2038:	ldur	x9, [x29, #-24]
    203c:	ldrb	w10, [x8, x9]
    2040:	str	w10, [sp]
    2044:	cbz	w10, 2094 <long_double_format+0x1e4>
    2048:	b	204c <long_double_format+0x19c>
    204c:	ldr	w8, [sp]
    2050:	cmp	w8, #0x41
    2054:	b.eq	20b0 <long_double_format+0x200>  // b.none
    2058:	b	205c <long_double_format+0x1ac>
    205c:	ldr	w8, [sp]
    2060:	subs	w9, w8, #0x45
    2064:	cmp	w9, #0x2
    2068:	b.ls	20b0 <long_double_format+0x200>  // b.plast
    206c:	b	2070 <long_double_format+0x1c0>
    2070:	ldr	w8, [sp]
    2074:	cmp	w8, #0x61
    2078:	b.eq	20b0 <long_double_format+0x200>  // b.none
    207c:	b	2080 <long_double_format+0x1d0>
    2080:	ldr	w8, [sp]
    2084:	subs	w9, w8, #0x65
    2088:	cmp	w9, #0x2
    208c:	b.ls	20b0 <long_double_format+0x200>  // b.plast
    2090:	b	20b4 <long_double_format+0x204>
    2094:	ldur	x1, [x29, #-16]
    2098:	adrp	x0, 4000 <_fini+0x140>
    209c:	add	x0, x0, #0x2d4
    20a0:	bl	1030 <builtin_error@plt>
    20a4:	mov	x8, xzr
    20a8:	stur	x8, [x29, #-8]
    20ac:	b	21e0 <long_double_format+0x330>
    20b0:	b	20dc <long_double_format+0x22c>
    20b4:	ldur	x1, [x29, #-16]
    20b8:	ldur	x8, [x29, #-16]
    20bc:	ldur	x9, [x29, #-24]
    20c0:	ldrb	w2, [x8, x9]
    20c4:	adrp	x0, 4000 <_fini+0x140>
    20c8:	add	x0, x0, #0x2e9
    20cc:	bl	1030 <builtin_error@plt>
    20d0:	mov	x8, xzr
    20d4:	stur	x8, [x29, #-8]
    20d8:	b	21e0 <long_double_format+0x330>
    20dc:	ldur	x8, [x29, #-24]
    20e0:	add	x8, x8, #0x1
    20e4:	stur	x8, [x29, #-24]
    20e8:	ldur	x8, [x29, #-16]
    20ec:	ldur	x9, [x29, #-24]
    20f0:	ldrb	w10, [x8, x9]
    20f4:	cmp	w10, #0x25
    20f8:	b.ne	2130 <long_double_format+0x280>  // b.any
    20fc:	ldur	x8, [x29, #-16]
    2100:	ldur	x9, [x29, #-24]
    2104:	add	x9, x9, #0x1
    2108:	ldrb	w10, [x8, x9]
    210c:	cmp	w10, #0x25
    2110:	b.eq	2130 <long_double_format+0x280>  // b.none
    2114:	ldur	x1, [x29, #-16]
    2118:	adrp	x0, 4000 <_fini+0x140>
    211c:	add	x0, x0, #0x310
    2120:	bl	1030 <builtin_error@plt>
    2124:	mov	x8, xzr
    2128:	stur	x8, [x29, #-8]
    212c:	b	21e0 <long_double_format+0x330>
    2130:	ldur	x8, [x29, #-16]
    2134:	ldur	x9, [x29, #-24]
    2138:	ldrb	w10, [x8, x9]
    213c:	cbnz	w10, 21b4 <long_double_format+0x304>
    2140:	ldur	x8, [x29, #-24]
    2144:	add	x8, x8, #0x1
    2148:	str	x8, [sp, #16]
    214c:	ldr	x8, [sp, #16]
    2150:	add	x0, x8, #0x1
    2154:	bl	10b0 <xmalloc@plt>
    2158:	str	x0, [sp, #8]
    215c:	ldr	x0, [sp, #8]
    2160:	ldur	x1, [x29, #-16]
    2164:	ldr	x2, [sp, #32]
    2168:	bl	1000 <memcpy@plt>
    216c:	ldr	x8, [sp, #8]
    2170:	ldr	x9, [sp, #32]
    2174:	add	x8, x8, x9
    2178:	mov	w10, #0x4c                  	// #76
    217c:	strb	w10, [x8]
    2180:	ldr	x8, [sp, #8]
    2184:	ldr	x9, [sp, #32]
    2188:	add	x8, x8, x9
    218c:	add	x0, x8, #0x1
    2190:	ldur	x8, [x29, #-16]
    2194:	ldr	x9, [sp, #32]
    2198:	add	x8, x8, x9
    219c:	ldrsw	x9, [sp, #28]
    21a0:	add	x1, x8, x9
    21a4:	bl	1180 <strcpy@plt>
    21a8:	ldr	x8, [sp, #8]
    21ac:	stur	x8, [x29, #-8]
    21b0:	b	21e0 <long_double_format+0x330>
    21b4:	ldur	x8, [x29, #-16]
    21b8:	ldur	x9, [x29, #-24]
    21bc:	ldrb	w10, [x8, x9]
    21c0:	cmp	w10, #0x25
    21c4:	cset	w10, eq  // eq = none
    21c8:	and	w10, w10, #0x1
    21cc:	add	w10, w10, #0x1
    21d0:	ldur	x8, [x29, #-24]
    21d4:	add	x8, x8, w10, sxtw
    21d8:	stur	x8, [x29, #-24]
    21dc:	b	20e8 <long_double_format+0x238>
    21e0:	ldur	x0, [x29, #-8]
    21e4:	ldp	x29, x30, [sp, #64]
    21e8:	add	sp, sp, #0x50
    21ec:	ret

00000000000021f0 <genformat>:
    21f0:	sub	sp, sp, #0x90
    21f4:	stp	x29, x30, [sp, #128]
    21f8:	add	x29, sp, #0x80
    21fc:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    2200:	add	x8, x8, #0x1c0
    2204:	adrp	x9, 15000 <memcpy@GLIBC_2.17>
    2208:	add	x9, x9, #0x1c9
    220c:	adrp	x10, 4000 <_fini+0x140>
    2210:	add	x10, x10, #0x335
    2214:	stur	q0, [x29, #-32]
    2218:	stur	q1, [x29, #-48]
    221c:	str	q2, [sp, #64]
    2220:	ldr	w11, [x8]
    2224:	str	x9, [sp, #24]
    2228:	str	x10, [sp, #16]
    222c:	cbnz	w11, 223c <genformat+0x4c>
    2230:	ldr	x8, [sp, #16]
    2234:	stur	x8, [x29, #-8]
    2238:	b	23dc <genformat+0x1ec>
    223c:	ldur	q0, [x29, #-48]
    2240:	ldr	x0, [sp, #24]
    2244:	mov	x8, #0x1c                  	// #28
    2248:	mov	x1, x8
    224c:	ldr	x2, [sp, #16]
    2250:	str	x8, [sp, #8]
    2254:	bl	1070 <snprintf@plt>
    2258:	ldr	x8, [sp, #24]
    225c:	mov	x0, x8
    2260:	bl	23ec <getprec>
    2264:	str	w0, [sp, #48]
    2268:	ldur	q0, [x29, #-32]
    226c:	ldr	x0, [sp, #24]
    2270:	ldr	x1, [sp, #8]
    2274:	ldr	x2, [sp, #16]
    2278:	bl	1070 <snprintf@plt>
    227c:	str	w0, [sp, #60]
    2280:	ldr	x0, [sp, #24]
    2284:	bl	23ec <getprec>
    2288:	str	w0, [sp, #44]
    228c:	ldr	w9, [sp, #44]
    2290:	ldr	w10, [sp, #48]
    2294:	cmp	w9, w10
    2298:	b.ge	22a8 <genformat+0xb8>  // b.tcont
    229c:	ldr	w8, [sp, #48]
    22a0:	str	w8, [sp, #4]
    22a4:	b	22b0 <genformat+0xc0>
    22a8:	ldr	w8, [sp, #44]
    22ac:	str	w8, [sp, #4]
    22b0:	ldr	w8, [sp, #4]
    22b4:	str	w8, [sp, #36]
    22b8:	ldr	q0, [sp, #64]
    22bc:	ldr	x0, [sp, #24]
    22c0:	mov	x1, #0x1c                  	// #28
    22c4:	ldr	x2, [sp, #16]
    22c8:	bl	1070 <snprintf@plt>
    22cc:	str	w0, [sp, #56]
    22d0:	ldr	x0, [sp, #24]
    22d4:	bl	23ec <getprec>
    22d8:	str	w0, [sp, #40]
    22dc:	ldr	w8, [sp, #36]
    22e0:	ldr	w9, [sp, #44]
    22e4:	subs	w8, w8, w9
    22e8:	ldr	w9, [sp, #60]
    22ec:	add	w8, w9, w8
    22f0:	str	w8, [sp, #60]
    22f4:	ldr	w8, [sp, #36]
    22f8:	ldr	w9, [sp, #40]
    22fc:	subs	w8, w8, w9
    2300:	ldr	w9, [sp, #56]
    2304:	add	w8, w9, w8
    2308:	str	w8, [sp, #56]
    230c:	ldr	w8, [sp, #40]
    2310:	cbz	w8, 2328 <genformat+0x138>
    2314:	ldr	w8, [sp, #36]
    2318:	cbnz	w8, 2328 <genformat+0x138>
    231c:	ldr	w8, [sp, #56]
    2320:	subs	w8, w8, #0x1
    2324:	str	w8, [sp, #56]
    2328:	ldr	w8, [sp, #40]
    232c:	cbnz	w8, 2344 <genformat+0x154>
    2330:	ldr	w8, [sp, #36]
    2334:	cbz	w8, 2344 <genformat+0x154>
    2338:	ldr	w8, [sp, #56]
    233c:	add	w8, w8, #0x1
    2340:	str	w8, [sp, #56]
    2344:	ldr	w8, [sp, #44]
    2348:	cbnz	w8, 2360 <genformat+0x170>
    234c:	ldr	w8, [sp, #36]
    2350:	cbz	w8, 2360 <genformat+0x170>
    2354:	ldr	w8, [sp, #60]
    2358:	add	w8, w8, #0x1
    235c:	str	w8, [sp, #60]
    2360:	ldr	w8, [sp, #60]
    2364:	ldr	w9, [sp, #56]
    2368:	cmp	w8, w9
    236c:	b.ge	237c <genformat+0x18c>  // b.tcont
    2370:	ldr	w8, [sp, #56]
    2374:	str	w8, [sp]
    2378:	b	2384 <genformat+0x194>
    237c:	ldr	w8, [sp, #60]
    2380:	str	w8, [sp]
    2384:	ldr	w8, [sp]
    2388:	str	w8, [sp, #52]
    238c:	ldr	w8, [sp, #52]
    2390:	cbz	w8, 23b8 <genformat+0x1c8>
    2394:	ldr	w2, [sp, #52]
    2398:	ldr	w3, [sp, #36]
    239c:	ldr	x0, [sp, #24]
    23a0:	adrp	x1, 4000 <_fini+0x140>
    23a4:	add	x1, x1, #0x339
    23a8:	adrp	x4, 4000 <_fini+0x140>
    23ac:	add	x4, x4, #0x345
    23b0:	bl	1060 <sprintf@plt>
    23b4:	b	23d4 <genformat+0x1e4>
    23b8:	ldr	w2, [sp, #36]
    23bc:	ldr	x0, [sp, #24]
    23c0:	adrp	x1, 4000 <_fini+0x140>
    23c4:	add	x1, x1, #0x347
    23c8:	adrp	x3, 4000 <_fini+0x140>
    23cc:	add	x3, x3, #0x345
    23d0:	bl	1060 <sprintf@plt>
    23d4:	ldr	x8, [sp, #24]
    23d8:	stur	x8, [x29, #-8]
    23dc:	ldur	x0, [x29, #-8]
    23e0:	ldp	x29, x30, [sp, #128]
    23e4:	add	sp, sp, #0x90
    23e8:	ret

00000000000023ec <getprec>:
    23ec:	sub	sp, sp, #0x30
    23f0:	stp	x29, x30, [sp, #32]
    23f4:	add	x29, sp, #0x20
    23f8:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    23fc:	add	x8, x8, #0x1c8
    2400:	stur	x0, [x29, #-8]
    2404:	ldur	x0, [x29, #-8]
    2408:	ldrb	w1, [x8]
    240c:	bl	1160 <strchr@plt>
    2410:	str	x0, [sp, #8]
    2414:	cbz	x0, 2424 <getprec+0x38>
    2418:	ldr	x8, [sp, #8]
    241c:	add	x8, x8, #0x1
    2420:	str	x8, [sp, #8]
    2424:	stur	wzr, [x29, #-12]
    2428:	ldr	x8, [sp, #8]
    242c:	mov	w9, #0x0                   	// #0
    2430:	str	w9, [sp, #4]
    2434:	cbz	x8, 246c <getprec+0x80>
    2438:	ldr	x8, [sp, #8]
    243c:	ldrb	w9, [x8]
    2440:	mov	w10, #0x0                   	// #0
    2444:	str	w10, [sp, #4]
    2448:	cbz	w9, 246c <getprec+0x80>
    244c:	bl	10f0 <__ctype_b_loc@plt>
    2450:	ldr	x8, [x0]
    2454:	ldr	x9, [sp, #8]
    2458:	ldrb	w10, [x9]
    245c:	ldrh	w10, [x8, w10, sxtw #1]
    2460:	tst	w10, #0x800
    2464:	cset	w10, ne  // ne = any
    2468:	str	w10, [sp, #4]
    246c:	ldr	w8, [sp, #4]
    2470:	tbnz	w8, #0, 2478 <getprec+0x8c>
    2474:	b	2494 <getprec+0xa8>
    2478:	ldur	w8, [x29, #-12]
    247c:	add	w8, w8, #0x1
    2480:	stur	w8, [x29, #-12]
    2484:	ldr	x8, [sp, #8]
    2488:	add	x8, x8, #0x1
    248c:	str	x8, [sp, #8]
    2490:	b	2428 <getprec+0x3c>
    2494:	ldur	w0, [x29, #-12]
    2498:	ldp	x29, x30, [sp, #32]
    249c:	add	sp, sp, #0x30
    24a0:	ret
    24a4:	nop

00000000000024a8 <__addtf3>:
    24a8:	stp	x29, x30, [sp, #-48]!
    24ac:	mov	x29, sp
    24b0:	str	q0, [sp, #16]
    24b4:	str	q1, [sp, #32]
    24b8:	ldp	x6, x1, [sp, #16]
    24bc:	ldp	x0, x3, [sp, #32]
    24c0:	mrs	x15, fpcr
    24c4:	lsr	x7, x1, #63
    24c8:	mov	x10, x0
    24cc:	ubfiz	x4, x3, #3, #48
    24d0:	lsr	x5, x3, #63
    24d4:	mov	x12, x7
    24d8:	ubfiz	x2, x1, #3, #48
    24dc:	orr	x4, x4, x0, lsr #61
    24e0:	ubfx	x8, x1, #48, #15
    24e4:	ubfx	x0, x3, #48, #15
    24e8:	and	w7, w7, #0xff
    24ec:	mov	x16, x12
    24f0:	cmp	x12, x5
    24f4:	and	w11, w5, #0xff
    24f8:	orr	x2, x2, x6, lsr #61
    24fc:	mov	x1, x8
    2500:	lsl	x9, x6, #3
    2504:	mov	x3, x0
    2508:	lsl	x13, x10, #3
    250c:	b.eq	26b8 <__addtf3+0x210>  // b.none
    2510:	sub	w0, w8, w0
    2514:	cmp	w0, #0x0
    2518:	b.le	2664 <__addtf3+0x1bc>
    251c:	cbz	x3, 2718 <__addtf3+0x270>
    2520:	orr	x4, x4, #0x8000000000000
    2524:	mov	x3, #0x7fff                	// #32767
    2528:	cmp	x1, x3
    252c:	b.eq	291c <__addtf3+0x474>  // b.none
    2530:	cmp	w0, #0x74
    2534:	b.gt	29a0 <__addtf3+0x4f8>
    2538:	cmp	w0, #0x3f
    253c:	b.gt	2b00 <__addtf3+0x658>
    2540:	mov	w3, #0x40                  	// #64
    2544:	sub	w3, w3, w0
    2548:	lsr	x6, x13, x0
    254c:	lsl	x13, x13, x3
    2550:	cmp	x13, #0x0
    2554:	cset	x5, ne  // ne = any
    2558:	lsl	x3, x4, x3
    255c:	orr	x3, x3, x6
    2560:	lsr	x0, x4, x0
    2564:	orr	x3, x3, x5
    2568:	sub	x2, x2, x0
    256c:	subs	x9, x9, x3
    2570:	sbc	x2, x2, xzr
    2574:	and	x3, x2, #0x7ffffffffffff
    2578:	tbz	x2, #51, 2758 <__addtf3+0x2b0>
    257c:	cbz	x3, 2984 <__addtf3+0x4dc>
    2580:	clz	x0, x3
    2584:	sub	w0, w0, #0xc
    2588:	neg	w2, w0
    258c:	lsl	x4, x3, x0
    2590:	lsl	x3, x9, x0
    2594:	lsr	x9, x9, x2
    2598:	orr	x2, x9, x4
    259c:	cmp	x1, w0, sxtw
    25a0:	sxtw	x4, w0
    25a4:	b.gt	2964 <__addtf3+0x4bc>
    25a8:	sub	w1, w0, w1
    25ac:	add	w0, w1, #0x1
    25b0:	cmp	w0, #0x3f
    25b4:	b.gt	2ac8 <__addtf3+0x620>
    25b8:	mov	w1, #0x40                  	// #64
    25bc:	sub	w1, w1, w0
    25c0:	lsr	x4, x3, x0
    25c4:	lsl	x3, x3, x1
    25c8:	cmp	x3, #0x0
    25cc:	lsl	x9, x2, x1
    25d0:	cset	x1, ne  // ne = any
    25d4:	orr	x9, x9, x4
    25d8:	lsr	x2, x2, x0
    25dc:	orr	x9, x9, x1
    25e0:	orr	x8, x9, x2
    25e4:	cbz	x8, 276c <__addtf3+0x2c4>
    25e8:	and	x0, x9, #0x7
    25ec:	mov	x1, #0x0                   	// #0
    25f0:	mov	w5, #0x1                   	// #1
    25f4:	cbz	x0, 29b0 <__addtf3+0x508>
    25f8:	and	x3, x15, #0xc00000
    25fc:	cmp	x3, #0x400, lsl #12
    2600:	b.eq	28f4 <__addtf3+0x44c>  // b.none
    2604:	cmp	x3, #0x800, lsl #12
    2608:	b.eq	28d4 <__addtf3+0x42c>  // b.none
    260c:	cbz	x3, 2900 <__addtf3+0x458>
    2610:	and	x3, x2, #0x8000000000000
    2614:	mov	w0, #0x10                  	// #16
    2618:	cbz	w5, 2620 <__addtf3+0x178>
    261c:	orr	w0, w0, #0x8
    2620:	cbz	x3, 2938 <__addtf3+0x490>
    2624:	add	x1, x1, #0x1
    2628:	mov	x3, #0x7fff                	// #32767
    262c:	cmp	x1, x3
    2630:	b.eq	281c <__addtf3+0x374>  // b.none
    2634:	and	w1, w1, #0x7fff
    2638:	extr	x8, x2, x9, #3
    263c:	ubfx	x2, x2, #3, #48
    2640:	mov	x5, #0x0                   	// #0
    2644:	orr	w1, w1, w7, lsl #15
    2648:	bfxil	x5, x2, #0, #48
    264c:	fmov	d0, x8
    2650:	bfi	x5, x1, #48, #16
    2654:	fmov	v0.d[1], x5
    2658:	cbnz	w0, 2878 <__addtf3+0x3d0>
    265c:	ldp	x29, x30, [sp], #48
    2660:	ret
    2664:	mov	x14, x5
    2668:	b.eq	2784 <__addtf3+0x2dc>  // b.none
    266c:	cbnz	x8, 2a08 <__addtf3+0x560>
    2670:	orr	x1, x2, x9
    2674:	cbz	x1, 2734 <__addtf3+0x28c>
    2678:	cmn	w0, #0x1
    267c:	b.eq	2e24 <__addtf3+0x97c>  // b.none
    2680:	mov	x1, #0x7fff                	// #32767
    2684:	mvn	w0, w0
    2688:	cmp	x3, x1
    268c:	b.ne	2a1c <__addtf3+0x574>  // b.any
    2690:	orr	x0, x4, x13
    2694:	cbnz	x0, 2d7c <__addtf3+0x8d4>
    2698:	mov	x16, x14
    269c:	nop
    26a0:	mov	x4, #0x0                   	// #0
    26a4:	fmov	d0, x4
    26a8:	lsl	x16, x16, #63
    26ac:	orr	x5, x16, #0x7fff000000000000
    26b0:	fmov	v0.d[1], x5
    26b4:	b	265c <__addtf3+0x1b4>
    26b8:	sub	w5, w8, w0
    26bc:	cmp	w5, #0x0
    26c0:	b.le	288c <__addtf3+0x3e4>
    26c4:	cbz	x0, 27cc <__addtf3+0x324>
    26c8:	orr	x4, x4, #0x8000000000000
    26cc:	mov	x0, #0x7fff                	// #32767
    26d0:	cmp	x1, x0
    26d4:	b.eq	291c <__addtf3+0x474>  // b.none
    26d8:	cmp	w5, #0x74
    26dc:	b.gt	2ab0 <__addtf3+0x608>
    26e0:	cmp	w5, #0x3f
    26e4:	b.gt	2bb0 <__addtf3+0x708>
    26e8:	mov	w0, #0x40                  	// #64
    26ec:	sub	w0, w0, w5
    26f0:	lsr	x6, x13, x5
    26f4:	lsl	x13, x13, x0
    26f8:	cmp	x13, #0x0
    26fc:	lsl	x0, x4, x0
    2700:	cset	x3, ne  // ne = any
    2704:	orr	x0, x0, x6
    2708:	lsr	x4, x4, x5
    270c:	orr	x0, x0, x3
    2710:	add	x2, x2, x4
    2714:	b	2abc <__addtf3+0x614>
    2718:	orr	x3, x4, x13
    271c:	cbz	x3, 2a8c <__addtf3+0x5e4>
    2720:	subs	w0, w0, #0x1
    2724:	b.ne	2524 <__addtf3+0x7c>  // b.any
    2728:	subs	x9, x9, x13
    272c:	sbc	x2, x2, x4
    2730:	b	2574 <__addtf3+0xcc>
    2734:	mov	x0, #0x7fff                	// #32767
    2738:	cmp	x3, x0
    273c:	b.eq	2e70 <__addtf3+0x9c8>  // b.none
    2740:	mov	w7, w11
    2744:	mov	x2, x4
    2748:	mov	x9, x13
    274c:	mov	x1, x3
    2750:	mov	x12, x5
    2754:	nop
    2758:	orr	x8, x9, x2
    275c:	and	x0, x9, #0x7
    2760:	mov	w5, #0x0                   	// #0
    2764:	cbnz	x1, 25f4 <__addtf3+0x14c>
    2768:	cbnz	x8, 25e8 <__addtf3+0x140>
    276c:	mov	x2, #0x0                   	// #0
    2770:	mov	x1, #0x0                   	// #0
    2774:	mov	w0, #0x0                   	// #0
    2778:	and	x2, x2, #0xffffffffffff
    277c:	and	w1, w1, #0x7fff
    2780:	b	2640 <__addtf3+0x198>
    2784:	add	x5, x8, #0x1
    2788:	tst	x5, #0x7ffe
    278c:	b.ne	2a5c <__addtf3+0x5b4>  // b.any
    2790:	orr	x5, x2, x9
    2794:	orr	x8, x4, x13
    2798:	cbnz	x1, 2c1c <__addtf3+0x774>
    279c:	cbz	x5, 2cc4 <__addtf3+0x81c>
    27a0:	cbz	x8, 2cd8 <__addtf3+0x830>
    27a4:	subs	x5, x9, x13
    27a8:	cmp	x9, x13
    27ac:	sbc	x3, x2, x4
    27b0:	tbz	x3, #51, 2ea4 <__addtf3+0x9fc>
    27b4:	subs	x9, x13, x9
    27b8:	mov	w7, w11
    27bc:	sbc	x2, x4, x2
    27c0:	mov	x12, x14
    27c4:	orr	x8, x9, x2
    27c8:	b	25e4 <__addtf3+0x13c>
    27cc:	orr	x0, x4, x13
    27d0:	cbz	x0, 2ca4 <__addtf3+0x7fc>
    27d4:	subs	w5, w5, #0x1
    27d8:	b.ne	26cc <__addtf3+0x224>  // b.any
    27dc:	adds	x9, x9, x13
    27e0:	adc	x2, x4, x2
    27e4:	nop
    27e8:	tbz	x2, #51, 2758 <__addtf3+0x2b0>
    27ec:	add	x1, x1, #0x1
    27f0:	mov	x0, #0x7fff                	// #32767
    27f4:	cmp	x1, x0
    27f8:	b.eq	2ce4 <__addtf3+0x83c>  // b.none
    27fc:	and	x0, x9, #0x1
    2800:	and	x3, x2, #0xfff7ffffffffffff
    2804:	orr	x9, x0, x9, lsr #1
    2808:	mov	w5, #0x0                   	// #0
    280c:	orr	x9, x9, x2, lsl #63
    2810:	lsr	x2, x3, #1
    2814:	and	x0, x9, #0x7
    2818:	b	25f4 <__addtf3+0x14c>
    281c:	and	x3, x15, #0xc00000
    2820:	cbz	x3, 2858 <__addtf3+0x3b0>
    2824:	cmp	x3, #0x400, lsl #12
    2828:	b.eq	2850 <__addtf3+0x3a8>  // b.none
    282c:	cmp	x3, #0x800, lsl #12
    2830:	csel	w12, w12, wzr, eq  // eq = none
    2834:	cbnz	w12, 2858 <__addtf3+0x3b0>
    2838:	mov	w1, #0x14                  	// #20
    283c:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    2840:	orr	w0, w0, w1
    2844:	mov	x8, #0xffffffffffffffff    	// #-1
    2848:	mov	x1, #0x7ffe                	// #32766
    284c:	b	2778 <__addtf3+0x2d0>
    2850:	cbnz	x12, 2838 <__addtf3+0x390>
    2854:	nop
    2858:	mov	w1, #0x14                  	// #20
    285c:	and	x16, x7, #0xff
    2860:	orr	w0, w0, w1
    2864:	mov	x4, #0x0                   	// #0
    2868:	fmov	d0, x4
    286c:	lsl	x16, x16, #63
    2870:	orr	x5, x16, #0x7fff000000000000
    2874:	fmov	v0.d[1], x5
    2878:	str	q0, [sp, #16]
    287c:	bl	3e50 <__sfp_handle_exceptions>
    2880:	ldr	q0, [sp, #16]
    2884:	ldp	x29, x30, [sp], #48
    2888:	ret
    288c:	b.eq	29cc <__addtf3+0x524>  // b.none
    2890:	cbnz	x8, 2b50 <__addtf3+0x6a8>
    2894:	orr	x0, x2, x9
    2898:	cbz	x0, 2dbc <__addtf3+0x914>
    289c:	cmn	w5, #0x1
    28a0:	b.eq	2f1c <__addtf3+0xa74>  // b.none
    28a4:	mov	x0, #0x7fff                	// #32767
    28a8:	mvn	w5, w5
    28ac:	cmp	x3, x0
    28b0:	b.ne	2b64 <__addtf3+0x6bc>  // b.any
    28b4:	orr	x0, x4, x13
    28b8:	cbz	x0, 26a0 <__addtf3+0x1f8>
    28bc:	lsr	x5, x4, #50
    28c0:	mov	x9, x13
    28c4:	eor	x5, x5, #0x1
    28c8:	mov	x2, x4
    28cc:	and	w5, w5, #0x1
    28d0:	b	2930 <__addtf3+0x488>
    28d4:	mov	w0, #0x10                  	// #16
    28d8:	cbz	x12, 28e4 <__addtf3+0x43c>
    28dc:	adds	x9, x9, #0x8
    28e0:	cinc	x2, x2, cs  // cs = hs, nlast
    28e4:	and	x3, x2, #0x8000000000000
    28e8:	cbz	w5, 2620 <__addtf3+0x178>
    28ec:	orr	w0, w0, #0x8
    28f0:	b	2620 <__addtf3+0x178>
    28f4:	mov	w0, #0x10                  	// #16
    28f8:	cbnz	x12, 28e4 <__addtf3+0x43c>
    28fc:	b	28dc <__addtf3+0x434>
    2900:	and	x3, x9, #0xf
    2904:	mov	w0, #0x10                  	// #16
    2908:	cmp	x3, #0x4
    290c:	b.eq	28e4 <__addtf3+0x43c>  // b.none
    2910:	adds	x9, x9, #0x4
    2914:	cinc	x2, x2, cs  // cs = hs, nlast
    2918:	b	28e4 <__addtf3+0x43c>
    291c:	orr	x0, x2, x9
    2920:	cbz	x0, 26a0 <__addtf3+0x1f8>
    2924:	lsr	x5, x2, #50
    2928:	eor	x5, x5, #0x1
    292c:	and	w5, w5, #0x1
    2930:	mov	w0, w5
    2934:	mov	x1, #0x7fff                	// #32767
    2938:	mov	x3, #0x7fff                	// #32767
    293c:	extr	x8, x2, x9, #3
    2940:	cmp	x1, x3
    2944:	lsr	x2, x2, #3
    2948:	b.ne	2778 <__addtf3+0x2d0>  // b.any
    294c:	orr	x1, x8, x2
    2950:	cbz	x1, 2fbc <__addtf3+0xb14>
    2954:	orr	x2, x2, #0x800000000000
    2958:	mov	w1, #0x7fff                	// #32767
    295c:	and	x2, x2, #0xffffffffffff
    2960:	b	2640 <__addtf3+0x198>
    2964:	mov	x9, x3
    2968:	and	x2, x2, #0xfff7ffffffffffff
    296c:	sub	x1, x1, x4
    2970:	orr	x8, x9, x2
    2974:	and	x0, x9, #0x7
    2978:	mov	w5, #0x0                   	// #0
    297c:	cbz	x1, 2768 <__addtf3+0x2c0>
    2980:	b	25f4 <__addtf3+0x14c>
    2984:	clz	x2, x9
    2988:	add	w0, w2, #0x34
    298c:	cmp	w0, #0x3f
    2990:	b.le	2588 <__addtf3+0xe0>
    2994:	sub	w2, w2, #0xc
    2998:	lsl	x2, x9, x2
    299c:	b	259c <__addtf3+0xf4>
    29a0:	orr	x4, x4, x13
    29a4:	cmp	x4, #0x0
    29a8:	cset	x3, ne  // ne = any
    29ac:	b	256c <__addtf3+0xc4>
    29b0:	and	x3, x2, #0x8000000000000
    29b4:	mov	w0, #0x0                   	// #0
    29b8:	cbz	w5, 2620 <__addtf3+0x178>
    29bc:	mov	w0, #0x0                   	// #0
    29c0:	tbz	w15, #11, 2620 <__addtf3+0x178>
    29c4:	orr	w0, w0, #0x8
    29c8:	b	2620 <__addtf3+0x178>
    29cc:	add	x0, x8, #0x1
    29d0:	tst	x0, #0x7ffe
    29d4:	b.ne	2bdc <__addtf3+0x734>  // b.any
    29d8:	orr	x0, x2, x9
    29dc:	cbnz	x8, 2d98 <__addtf3+0x8f0>
    29e0:	orr	x8, x4, x13
    29e4:	cbz	x0, 2dec <__addtf3+0x944>
    29e8:	cbz	x8, 2cd8 <__addtf3+0x830>
    29ec:	adds	x9, x9, x13
    29f0:	adc	x2, x4, x2
    29f4:	tbz	x2, #51, 27c4 <__addtf3+0x31c>
    29f8:	and	x2, x2, #0xfff7ffffffffffff
    29fc:	and	x0, x9, #0x7
    2a00:	mov	x1, #0x1                   	// #1
    2a04:	b	25f4 <__addtf3+0x14c>
    2a08:	mov	x1, #0x7fff                	// #32767
    2a0c:	neg	w0, w0
    2a10:	orr	x2, x2, #0x8000000000000
    2a14:	cmp	x3, x1
    2a18:	b.eq	2690 <__addtf3+0x1e8>  // b.none
    2a1c:	cmp	w0, #0x74
    2a20:	b.gt	2b2c <__addtf3+0x684>
    2a24:	cmp	w0, #0x3f
    2a28:	b.gt	2d48 <__addtf3+0x8a0>
    2a2c:	mov	w1, #0x40                  	// #64
    2a30:	sub	w1, w1, w0
    2a34:	lsr	x5, x9, x0
    2a38:	lsl	x9, x9, x1
    2a3c:	cmp	x9, #0x0
    2a40:	lsl	x9, x2, x1
    2a44:	cset	x1, ne  // ne = any
    2a48:	orr	x9, x9, x5
    2a4c:	lsr	x0, x2, x0
    2a50:	orr	x9, x9, x1
    2a54:	sub	x4, x4, x0
    2a58:	b	2b38 <__addtf3+0x690>
    2a5c:	subs	x5, x9, x13
    2a60:	cmp	x9, x13
    2a64:	sbc	x3, x2, x4
    2a68:	tbnz	x3, #51, 2c04 <__addtf3+0x75c>
    2a6c:	orr	x8, x5, x3
    2a70:	cbnz	x8, 2d30 <__addtf3+0x888>
    2a74:	and	x15, x15, #0xc00000
    2a78:	mov	x2, #0x0                   	// #0
    2a7c:	cmp	x15, #0x800, lsl #12
    2a80:	mov	x1, #0x0                   	// #0
    2a84:	cset	w7, eq  // eq = none
    2a88:	b	2778 <__addtf3+0x2d0>
    2a8c:	mov	x0, #0x7fff                	// #32767
    2a90:	cmp	x8, x0
    2a94:	b.ne	2758 <__addtf3+0x2b0>  // b.any
    2a98:	orr	x0, x2, x9
    2a9c:	cbnz	x0, 2924 <__addtf3+0x47c>
    2aa0:	mov	x2, #0x0                   	// #0
    2aa4:	mov	x8, #0x0                   	// #0
    2aa8:	mov	w0, #0x0                   	// #0
    2aac:	b	294c <__addtf3+0x4a4>
    2ab0:	orr	x4, x4, x13
    2ab4:	cmp	x4, #0x0
    2ab8:	cset	x0, ne  // ne = any
    2abc:	adds	x9, x0, x9
    2ac0:	cinc	x2, x2, cs  // cs = hs, nlast
    2ac4:	b	27e8 <__addtf3+0x340>
    2ac8:	mov	w4, #0x80                  	// #128
    2acc:	sub	w4, w4, w0
    2ad0:	cmp	w0, #0x40
    2ad4:	sub	w9, w1, #0x3f
    2ad8:	lsl	x0, x2, x4
    2adc:	orr	x0, x3, x0
    2ae0:	csel	x3, x0, x3, ne  // ne = any
    2ae4:	lsr	x9, x2, x9
    2ae8:	cmp	x3, #0x0
    2aec:	mov	x2, #0x0                   	// #0
    2af0:	cset	x0, ne  // ne = any
    2af4:	orr	x9, x0, x9
    2af8:	mov	x8, x9
    2afc:	b	25e4 <__addtf3+0x13c>
    2b00:	mov	w5, #0x80                  	// #128
    2b04:	sub	w5, w5, w0
    2b08:	subs	w0, w0, #0x40
    2b0c:	lsl	x5, x4, x5
    2b10:	orr	x5, x13, x5
    2b14:	csel	x13, x5, x13, ne  // ne = any
    2b18:	lsr	x4, x4, x0
    2b1c:	cmp	x13, #0x0
    2b20:	cset	x3, ne  // ne = any
    2b24:	orr	x3, x3, x4
    2b28:	b	256c <__addtf3+0xc4>
    2b2c:	orr	x2, x2, x9
    2b30:	cmp	x2, #0x0
    2b34:	cset	x9, ne  // ne = any
    2b38:	subs	x9, x13, x9
    2b3c:	mov	w7, w11
    2b40:	sbc	x2, x4, xzr
    2b44:	mov	x1, x3
    2b48:	mov	x12, x14
    2b4c:	b	2574 <__addtf3+0xcc>
    2b50:	mov	x0, #0x7fff                	// #32767
    2b54:	neg	w5, w5
    2b58:	orr	x2, x2, #0x8000000000000
    2b5c:	cmp	x3, x0
    2b60:	b.eq	28b4 <__addtf3+0x40c>  // b.none
    2b64:	cmp	w5, #0x74
    2b68:	b.gt	2d38 <__addtf3+0x890>
    2b6c:	cmp	w5, #0x3f
    2b70:	b.gt	2df8 <__addtf3+0x950>
    2b74:	mov	w1, #0x40                  	// #64
    2b78:	sub	w1, w1, w5
    2b7c:	lsr	x6, x9, x5
    2b80:	lsl	x9, x9, x1
    2b84:	cmp	x9, #0x0
    2b88:	cset	x0, ne  // ne = any
    2b8c:	lsl	x9, x2, x1
    2b90:	orr	x9, x9, x6
    2b94:	lsr	x5, x2, x5
    2b98:	orr	x9, x9, x0
    2b9c:	add	x4, x4, x5
    2ba0:	adds	x9, x9, x13
    2ba4:	mov	x1, x3
    2ba8:	cinc	x2, x4, cs  // cs = hs, nlast
    2bac:	b	27e8 <__addtf3+0x340>
    2bb0:	mov	w0, #0x80                  	// #128
    2bb4:	sub	w0, w0, w5
    2bb8:	subs	w5, w5, #0x40
    2bbc:	lsl	x0, x4, x0
    2bc0:	orr	x0, x13, x0
    2bc4:	csel	x13, x0, x13, ne  // ne = any
    2bc8:	lsr	x4, x4, x5
    2bcc:	cmp	x13, #0x0
    2bd0:	cset	x0, ne  // ne = any
    2bd4:	orr	x0, x0, x4
    2bd8:	b	2abc <__addtf3+0x614>
    2bdc:	mov	x1, #0x7fff                	// #32767
    2be0:	cmp	x0, x1
    2be4:	b.eq	2e40 <__addtf3+0x998>  // b.none
    2be8:	adds	x9, x9, x13
    2bec:	mov	x1, x0
    2bf0:	adc	x2, x4, x2
    2bf4:	ubfx	x0, x9, #1, #3
    2bf8:	extr	x9, x2, x9, #1
    2bfc:	lsr	x2, x2, #1
    2c00:	b	25f4 <__addtf3+0x14c>
    2c04:	cmp	x13, x9
    2c08:	mov	w7, w11
    2c0c:	sbc	x3, x4, x2
    2c10:	sub	x9, x13, x9
    2c14:	mov	x12, x14
    2c18:	b	257c <__addtf3+0xd4>
    2c1c:	mov	x12, #0x7fff                	// #32767
    2c20:	cmp	x1, x12
    2c24:	b.eq	2c50 <__addtf3+0x7a8>  // b.none
    2c28:	cmp	x3, x12
    2c2c:	b.eq	2e80 <__addtf3+0x9d8>  // b.none
    2c30:	cbnz	x5, 2c68 <__addtf3+0x7c0>
    2c34:	mov	w5, w0
    2c38:	cbnz	x8, 2f60 <__addtf3+0xab8>
    2c3c:	mov	w7, #0x0                   	// #0
    2c40:	mov	x2, #0xffffffffffff        	// #281474976710655
    2c44:	mov	w0, #0x1                   	// #1
    2c48:	mov	x8, #0xffffffffffffffff    	// #-1
    2c4c:	b	2954 <__addtf3+0x4ac>
    2c50:	cbz	x5, 2f7c <__addtf3+0xad4>
    2c54:	lsr	x0, x2, #50
    2c58:	cmp	x3, x1
    2c5c:	eor	x0, x0, #0x1
    2c60:	and	w0, w0, #0x1
    2c64:	b.eq	2e80 <__addtf3+0x9d8>  // b.none
    2c68:	cbz	x8, 2e9c <__addtf3+0x9f4>
    2c6c:	bfi	x6, x2, #61, #3
    2c70:	lsr	x3, x2, #3
    2c74:	tbz	x2, #50, 2c90 <__addtf3+0x7e8>
    2c78:	lsr	x1, x4, #3
    2c7c:	tbnz	x4, #50, 2c90 <__addtf3+0x7e8>
    2c80:	mov	x6, x10
    2c84:	mov	w7, w11
    2c88:	bfi	x6, x4, #61, #3
    2c8c:	mov	x3, x1
    2c90:	extr	x2, x3, x6, #61
    2c94:	bfi	x6, x2, #61, #3
    2c98:	lsr	x2, x2, #3
    2c9c:	mov	x8, x6
    2ca0:	b	294c <__addtf3+0x4a4>
    2ca4:	mov	x0, #0x7fff                	// #32767
    2ca8:	cmp	x8, x0
    2cac:	b.ne	2758 <__addtf3+0x2b0>  // b.any
    2cb0:	orr	x0, x2, x9
    2cb4:	cbz	x0, 2aa0 <__addtf3+0x5f8>
    2cb8:	lsr	x5, x2, #50
    2cbc:	eor	w5, w5, #0x1
    2cc0:	b	2930 <__addtf3+0x488>
    2cc4:	cbz	x8, 2dd8 <__addtf3+0x930>
    2cc8:	mov	w7, w11
    2ccc:	mov	x2, x4
    2cd0:	mov	x9, x13
    2cd4:	mov	x12, x14
    2cd8:	mov	x1, #0x0                   	// #0
    2cdc:	mov	x3, #0x0                   	// #0
    2ce0:	b	29bc <__addtf3+0x514>
    2ce4:	ands	x3, x15, #0xc00000
    2ce8:	b.eq	2d74 <__addtf3+0x8cc>  // b.none
    2cec:	cmp	x3, #0x400, lsl #12
    2cf0:	eor	w0, w7, #0x1
    2cf4:	cset	w1, eq  // eq = none
    2cf8:	tst	w1, w0
    2cfc:	b.ne	2f98 <__addtf3+0xaf0>  // b.any
    2d00:	cmp	x3, #0x800, lsl #12
    2d04:	b.eq	2f44 <__addtf3+0xa9c>  // b.none
    2d08:	cmp	x3, #0x400, lsl #12
    2d0c:	mov	w0, #0x14                  	// #20
    2d10:	b.ne	2820 <__addtf3+0x378>  // b.any
    2d14:	mov	x2, #0xffffffffffffffff    	// #-1
    2d18:	mov	x1, #0x7ffe                	// #32766
    2d1c:	mov	x9, x2
    2d20:	mov	w5, #0x0                   	// #0
    2d24:	mov	w0, #0x14                  	// #20
    2d28:	cbnz	x12, 28e4 <__addtf3+0x43c>
    2d2c:	b	28dc <__addtf3+0x434>
    2d30:	mov	x9, x5
    2d34:	b	257c <__addtf3+0xd4>
    2d38:	orr	x2, x2, x9
    2d3c:	cmp	x2, #0x0
    2d40:	cset	x9, ne  // ne = any
    2d44:	b	2ba0 <__addtf3+0x6f8>
    2d48:	mov	w1, #0x80                  	// #128
    2d4c:	sub	w1, w1, w0
    2d50:	subs	w0, w0, #0x40
    2d54:	lsl	x1, x2, x1
    2d58:	orr	x1, x9, x1
    2d5c:	csel	x9, x1, x9, ne  // ne = any
    2d60:	lsr	x2, x2, x0
    2d64:	cmp	x9, #0x0
    2d68:	cset	x9, ne  // ne = any
    2d6c:	orr	x9, x9, x2
    2d70:	b	2b38 <__addtf3+0x690>
    2d74:	mov	w0, #0x14                  	// #20
    2d78:	b	2864 <__addtf3+0x3bc>
    2d7c:	lsr	x5, x4, #50
    2d80:	mov	w7, w11
    2d84:	eor	x5, x5, #0x1
    2d88:	mov	x9, x13
    2d8c:	and	w5, w5, #0x1
    2d90:	mov	x2, x4
    2d94:	b	2930 <__addtf3+0x488>
    2d98:	mov	x8, #0x7fff                	// #32767
    2d9c:	cmp	x1, x8
    2da0:	b.eq	2ec0 <__addtf3+0xa18>  // b.none
    2da4:	cmp	x3, x8
    2da8:	b.eq	2f34 <__addtf3+0xa8c>  // b.none
    2dac:	cbnz	x0, 2ed8 <__addtf3+0xa30>
    2db0:	mov	x2, x4
    2db4:	mov	x9, x13
    2db8:	b	2930 <__addtf3+0x488>
    2dbc:	mov	x0, #0x7fff                	// #32767
    2dc0:	cmp	x3, x0
    2dc4:	b.eq	2f70 <__addtf3+0xac8>  // b.none
    2dc8:	mov	x2, x4
    2dcc:	mov	x9, x13
    2dd0:	mov	x1, x3
    2dd4:	b	2758 <__addtf3+0x2b0>
    2dd8:	and	x15, x15, #0xc00000
    2ddc:	mov	x2, #0x0                   	// #0
    2de0:	cmp	x15, #0x800, lsl #12
    2de4:	cset	w7, eq  // eq = none
    2de8:	b	2778 <__addtf3+0x2d0>
    2dec:	mov	x2, x4
    2df0:	mov	x9, x13
    2df4:	b	25e4 <__addtf3+0x13c>
    2df8:	mov	w0, #0x80                  	// #128
    2dfc:	sub	w0, w0, w5
    2e00:	subs	w5, w5, #0x40
    2e04:	lsl	x0, x2, x0
    2e08:	orr	x0, x9, x0
    2e0c:	csel	x9, x0, x9, ne  // ne = any
    2e10:	lsr	x2, x2, x5
    2e14:	cmp	x9, #0x0
    2e18:	cset	x9, ne  // ne = any
    2e1c:	orr	x9, x9, x2
    2e20:	b	2ba0 <__addtf3+0x6f8>
    2e24:	cmp	x13, x9
    2e28:	mov	w7, w11
    2e2c:	sbc	x2, x4, x2
    2e30:	sub	x9, x13, x9
    2e34:	mov	x1, x3
    2e38:	mov	x12, x5
    2e3c:	b	2574 <__addtf3+0xcc>
    2e40:	ands	x3, x15, #0xc00000
    2e44:	b.eq	2d74 <__addtf3+0x8cc>  // b.none
    2e48:	cmp	x3, #0x400, lsl #12
    2e4c:	eor	w0, w7, #0x1
    2e50:	csel	w0, w0, wzr, eq  // eq = none
    2e54:	cbnz	w0, 2f98 <__addtf3+0xaf0>
    2e58:	cmp	x3, #0x800, lsl #12
    2e5c:	b.ne	2d08 <__addtf3+0x860>  // b.any
    2e60:	cbz	x12, 2f48 <__addtf3+0xaa0>
    2e64:	mov	w0, #0x14                  	// #20
    2e68:	mov	x16, #0x1                   	// #1
    2e6c:	b	2864 <__addtf3+0x3bc>
    2e70:	orr	x0, x4, x13
    2e74:	cbnz	x0, 2d7c <__addtf3+0x8d4>
    2e78:	mov	w7, w11
    2e7c:	b	2aa0 <__addtf3+0x5f8>
    2e80:	cbz	x8, 2f8c <__addtf3+0xae4>
    2e84:	tst	x4, #0x4000000000000
    2e88:	csinc	w0, w0, wzr, ne  // ne = any
    2e8c:	cbnz	x5, 2c6c <__addtf3+0x7c4>
    2e90:	mov	w7, w11
    2e94:	mov	x2, x4
    2e98:	mov	x9, x13
    2e9c:	mov	w5, w0
    2ea0:	b	2930 <__addtf3+0x488>
    2ea4:	orr	x8, x5, x3
    2ea8:	cbz	x8, 2dd8 <__addtf3+0x930>
    2eac:	and	x0, x5, #0x7
    2eb0:	mov	x9, x5
    2eb4:	mov	x2, x3
    2eb8:	mov	w5, #0x1                   	// #1
    2ebc:	b	25f4 <__addtf3+0x14c>
    2ec0:	cbz	x0, 2f2c <__addtf3+0xa84>
    2ec4:	lsr	x5, x2, #50
    2ec8:	cmp	x3, x1
    2ecc:	eor	x5, x5, #0x1
    2ed0:	and	w5, w5, #0x1
    2ed4:	b.eq	2fa4 <__addtf3+0xafc>  // b.none
    2ed8:	orr	x13, x4, x13
    2edc:	cbz	x13, 2930 <__addtf3+0x488>
    2ee0:	bfi	x6, x2, #61, #3
    2ee4:	lsr	x0, x2, #3
    2ee8:	tbz	x2, #50, 2f04 <__addtf3+0xa5c>
    2eec:	lsr	x1, x4, #3
    2ef0:	tbnz	x4, #50, 2f04 <__addtf3+0xa5c>
    2ef4:	and	x6, x10, #0x1fffffffffffffff
    2ef8:	mov	w7, w11
    2efc:	orr	x6, x6, x4, lsl #61
    2f00:	mov	x0, x1
    2f04:	extr	x2, x0, x6, #61
    2f08:	mov	w0, w5
    2f0c:	bfi	x6, x2, #61, #3
    2f10:	lsr	x2, x2, #3
    2f14:	mov	x8, x6
    2f18:	b	294c <__addtf3+0x4a4>
    2f1c:	adds	x9, x9, x13
    2f20:	mov	x1, x3
    2f24:	adc	x2, x4, x2
    2f28:	b	27e8 <__addtf3+0x340>
    2f2c:	cmp	x3, x1
    2f30:	b.ne	2db0 <__addtf3+0x908>  // b.any
    2f34:	orr	x1, x4, x13
    2f38:	cbnz	x1, 2fac <__addtf3+0xb04>
    2f3c:	cbz	x0, 2aa0 <__addtf3+0x5f8>
    2f40:	b	2930 <__addtf3+0x488>
    2f44:	cbnz	x16, 2e64 <__addtf3+0x9bc>
    2f48:	mov	x2, #0xffffffffffffffff    	// #-1
    2f4c:	mov	w7, #0x0                   	// #0
    2f50:	mov	x9, x2
    2f54:	mov	x1, #0x7ffe                	// #32766
    2f58:	mov	w0, #0x14                  	// #20
    2f5c:	b	2624 <__addtf3+0x17c>
    2f60:	mov	w7, w11
    2f64:	mov	x2, x4
    2f68:	mov	x9, x13
    2f6c:	b	2930 <__addtf3+0x488>
    2f70:	orr	x0, x4, x13
    2f74:	cbz	x0, 2aa0 <__addtf3+0x5f8>
    2f78:	b	28bc <__addtf3+0x414>
    2f7c:	cmp	x3, x1
    2f80:	b.eq	2e80 <__addtf3+0x9d8>  // b.none
    2f84:	mov	w5, #0x0                   	// #0
    2f88:	b	2c38 <__addtf3+0x790>
    2f8c:	cbnz	x5, 2e9c <__addtf3+0x9f4>
    2f90:	mov	w5, w0
    2f94:	b	2c38 <__addtf3+0x790>
    2f98:	mov	w0, #0x14                  	// #20
    2f9c:	mov	x16, #0x0                   	// #0
    2fa0:	b	2864 <__addtf3+0x3bc>
    2fa4:	orr	x1, x4, x13
    2fa8:	cbz	x1, 2930 <__addtf3+0x488>
    2fac:	tst	x4, #0x4000000000000
    2fb0:	csinc	w5, w5, wzr, ne  // ne = any
    2fb4:	cbnz	x0, 2ee0 <__addtf3+0xa38>
    2fb8:	b	2db0 <__addtf3+0x908>
    2fbc:	mov	x8, #0x0                   	// #0
    2fc0:	mov	w1, #0x7fff                	// #32767
    2fc4:	mov	x2, #0x0                   	// #0
    2fc8:	b	2640 <__addtf3+0x198>
    2fcc:	nop

0000000000002fd0 <__eqtf2>:
    2fd0:	stp	x29, x30, [sp, #-48]!
    2fd4:	mov	x29, sp
    2fd8:	str	q0, [sp, #16]
    2fdc:	str	q1, [sp, #32]
    2fe0:	ldp	x6, x1, [sp, #16]
    2fe4:	ldp	x7, x0, [sp, #32]
    2fe8:	mrs	x2, fpcr
    2fec:	ubfx	x4, x1, #48, #15
    2ff0:	lsr	x2, x1, #63
    2ff4:	lsr	x3, x0, #63
    2ff8:	ubfx	x9, x0, #0, #48
    2ffc:	mov	x5, #0x7fff                	// #32767
    3000:	mov	x10, x6
    3004:	cmp	x4, x5
    3008:	and	w2, w2, #0xff
    300c:	ubfx	x1, x1, #0, #48
    3010:	and	w3, w3, #0xff
    3014:	ubfx	x0, x0, #48, #15
    3018:	b.eq	304c <__eqtf2+0x7c>  // b.none
    301c:	cmp	x0, x5
    3020:	b.eq	3038 <__eqtf2+0x68>  // b.none
    3024:	cmp	x4, x0
    3028:	mov	w0, #0x1                   	// #1
    302c:	b.eq	3064 <__eqtf2+0x94>  // b.none
    3030:	ldp	x29, x30, [sp], #48
    3034:	ret
    3038:	orr	x8, x9, x7
    303c:	cbnz	x8, 30c8 <__eqtf2+0xf8>
    3040:	mov	w0, #0x1                   	// #1
    3044:	ldp	x29, x30, [sp], #48
    3048:	ret
    304c:	orr	x5, x1, x6
    3050:	cbnz	x5, 3098 <__eqtf2+0xc8>
    3054:	cmp	x0, x4
    3058:	b.ne	3040 <__eqtf2+0x70>  // b.any
    305c:	orr	x8, x9, x7
    3060:	cbnz	x8, 30c8 <__eqtf2+0xf8>
    3064:	cmp	x1, x9
    3068:	mov	w0, #0x1                   	// #1
    306c:	ccmp	x6, x7, #0x0, eq  // eq = none
    3070:	b.ne	3030 <__eqtf2+0x60>  // b.any
    3074:	cmp	w2, w3
    3078:	mov	w0, #0x0                   	// #0
    307c:	b.eq	3030 <__eqtf2+0x60>  // b.none
    3080:	mov	w0, #0x1                   	// #1
    3084:	cbnz	x4, 3030 <__eqtf2+0x60>
    3088:	orr	x1, x1, x10
    308c:	cmp	x1, #0x0
    3090:	cset	w0, ne  // ne = any
    3094:	b	3030 <__eqtf2+0x60>
    3098:	tst	x1, #0x800000000000
    309c:	b.ne	30b4 <__eqtf2+0xe4>  // b.any
    30a0:	mov	w0, #0x1                   	// #1
    30a4:	bl	3e50 <__sfp_handle_exceptions>
    30a8:	mov	w0, #0x1                   	// #1
    30ac:	ldp	x29, x30, [sp], #48
    30b0:	ret
    30b4:	cmp	x0, x4
    30b8:	mov	w0, #0x1                   	// #1
    30bc:	b.ne	3030 <__eqtf2+0x60>  // b.any
    30c0:	orr	x8, x9, x7
    30c4:	cbz	x8, 3030 <__eqtf2+0x60>
    30c8:	tst	x9, #0x800000000000
    30cc:	b.eq	30a0 <__eqtf2+0xd0>  // b.none
    30d0:	b	3040 <__eqtf2+0x70>
    30d4:	nop

00000000000030d8 <__getf2>:
    30d8:	stp	x29, x30, [sp, #-48]!
    30dc:	mov	x29, sp
    30e0:	str	q0, [sp, #16]
    30e4:	str	q1, [sp, #32]
    30e8:	ldp	x8, x1, [sp, #16]
    30ec:	ldp	x9, x0, [sp, #32]
    30f0:	mrs	x2, fpcr
    30f4:	ubfx	x4, x1, #48, #15
    30f8:	ubfx	x10, x1, #0, #48
    30fc:	lsr	x2, x1, #63
    3100:	mov	x7, #0x7fff                	// #32767
    3104:	mov	x5, x8
    3108:	cmp	x4, x7
    310c:	ubfx	x11, x0, #0, #48
    3110:	ubfx	x6, x0, #48, #15
    3114:	lsr	x1, x0, #63
    3118:	mov	x3, x9
    311c:	b.eq	3158 <__getf2+0x80>  // b.none
    3120:	cmp	x6, x7
    3124:	b.eq	3168 <__getf2+0x90>  // b.none
    3128:	cbnz	x4, 3190 <__getf2+0xb8>
    312c:	orr	x5, x10, x8
    3130:	cmp	x5, #0x0
    3134:	cset	w0, eq  // eq = none
    3138:	cbnz	x6, 3144 <__getf2+0x6c>
    313c:	orr	x3, x11, x9
    3140:	cbz	x3, 31b0 <__getf2+0xd8>
    3144:	cbz	w0, 3174 <__getf2+0x9c>
    3148:	cmp	x1, #0x0
    314c:	csinv	w0, w0, wzr, ne  // ne = any
    3150:	ldp	x29, x30, [sp], #48
    3154:	ret
    3158:	orr	x0, x10, x8
    315c:	cbnz	x0, 31bc <__getf2+0xe4>
    3160:	cmp	x6, x4
    3164:	b.ne	3190 <__getf2+0xb8>  // b.any
    3168:	orr	x3, x11, x3
    316c:	cbnz	x3, 31bc <__getf2+0xe4>
    3170:	cbz	x4, 31a0 <__getf2+0xc8>
    3174:	cmp	x2, x1
    3178:	b.eq	31d0 <__getf2+0xf8>  // b.none
    317c:	cmp	x2, #0x0
    3180:	mov	w0, #0xffffffff            	// #-1
    3184:	cneg	w0, w0, eq  // eq = none
    3188:	ldp	x29, x30, [sp], #48
    318c:	ret
    3190:	cbnz	x6, 3174 <__getf2+0x9c>
    3194:	orr	x3, x11, x3
    3198:	cbnz	x3, 3174 <__getf2+0x9c>
    319c:	b	317c <__getf2+0xa4>
    31a0:	orr	x5, x10, x5
    31a4:	cmp	x5, #0x0
    31a8:	cset	w0, eq  // eq = none
    31ac:	b	3144 <__getf2+0x6c>
    31b0:	mov	w0, #0x0                   	// #0
    31b4:	cbz	x5, 3150 <__getf2+0x78>
    31b8:	b	317c <__getf2+0xa4>
    31bc:	mov	w0, #0x1                   	// #1
    31c0:	bl	3e50 <__sfp_handle_exceptions>
    31c4:	mov	w0, #0xfffffffe            	// #-2
    31c8:	ldp	x29, x30, [sp], #48
    31cc:	ret
    31d0:	cmp	x4, x6
    31d4:	b.gt	317c <__getf2+0xa4>
    31d8:	b.lt	3210 <__getf2+0x138>  // b.tstop
    31dc:	cmp	x10, x11
    31e0:	b.hi	317c <__getf2+0xa4>  // b.pmore
    31e4:	cset	w0, eq  // eq = none
    31e8:	cmp	w0, #0x0
    31ec:	ccmp	x8, x9, #0x0, ne  // ne = any
    31f0:	b.hi	317c <__getf2+0xa4>  // b.pmore
    31f4:	cmp	x10, x11
    31f8:	b.cc	3210 <__getf2+0x138>  // b.lo, b.ul, b.last
    31fc:	cmp	w0, #0x0
    3200:	mov	w0, #0x0                   	// #0
    3204:	ccmp	x8, x9, #0x2, ne  // ne = any
    3208:	b.cs	3150 <__getf2+0x78>  // b.hs, b.nlast
    320c:	nop
    3210:	cmp	x2, #0x0
    3214:	mov	w0, #0x1                   	// #1
    3218:	cneg	w0, w0, eq  // eq = none
    321c:	b	3150 <__getf2+0x78>

0000000000003220 <__letf2>:
    3220:	stp	x29, x30, [sp, #-48]!
    3224:	mov	x29, sp
    3228:	str	q0, [sp, #16]
    322c:	str	q1, [sp, #32]
    3230:	ldp	x8, x1, [sp, #16]
    3234:	ldp	x9, x0, [sp, #32]
    3238:	mrs	x2, fpcr
    323c:	ubfx	x4, x1, #48, #15
    3240:	ubfx	x10, x1, #0, #48
    3244:	lsr	x2, x1, #63
    3248:	mov	x5, #0x7fff                	// #32767
    324c:	mov	x6, x8
    3250:	cmp	x4, x5
    3254:	ubfx	x11, x0, #0, #48
    3258:	ubfx	x7, x0, #48, #15
    325c:	lsr	x1, x0, #63
    3260:	mov	x3, x9
    3264:	b.eq	329c <__letf2+0x7c>  // b.none
    3268:	cmp	x7, x5
    326c:	b.eq	32ac <__letf2+0x8c>  // b.none
    3270:	cbnz	x4, 32d8 <__letf2+0xb8>
    3274:	orr	x6, x10, x8
    3278:	cmp	x6, #0x0
    327c:	cset	w0, eq  // eq = none
    3280:	cbnz	x7, 32c4 <__letf2+0xa4>
    3284:	orr	x3, x11, x9
    3288:	cbnz	x3, 32c4 <__letf2+0xa4>
    328c:	mov	w0, #0x0                   	// #0
    3290:	cbnz	x6, 32ec <__letf2+0xcc>
    3294:	ldp	x29, x30, [sp], #48
    3298:	ret
    329c:	orr	x0, x10, x8
    32a0:	cbnz	x0, 3300 <__letf2+0xe0>
    32a4:	cmp	x7, x4
    32a8:	b.ne	32d8 <__letf2+0xb8>  // b.any
    32ac:	orr	x3, x11, x3
    32b0:	cbnz	x3, 3300 <__letf2+0xe0>
    32b4:	cbnz	x4, 32e4 <__letf2+0xc4>
    32b8:	orr	x6, x10, x6
    32bc:	cmp	x6, #0x0
    32c0:	cset	w0, eq  // eq = none
    32c4:	cbz	w0, 32e4 <__letf2+0xc4>
    32c8:	cmp	x1, #0x0
    32cc:	csinv	w0, w0, wzr, ne  // ne = any
    32d0:	ldp	x29, x30, [sp], #48
    32d4:	ret
    32d8:	cbnz	x7, 32e4 <__letf2+0xc4>
    32dc:	orr	x3, x11, x3
    32e0:	cbz	x3, 32ec <__letf2+0xcc>
    32e4:	cmp	x2, x1
    32e8:	b.eq	3314 <__letf2+0xf4>  // b.none
    32ec:	cmp	x2, #0x0
    32f0:	mov	w0, #0xffffffff            	// #-1
    32f4:	cneg	w0, w0, eq  // eq = none
    32f8:	ldp	x29, x30, [sp], #48
    32fc:	ret
    3300:	mov	w0, #0x1                   	// #1
    3304:	bl	3e50 <__sfp_handle_exceptions>
    3308:	mov	w0, #0x2                   	// #2
    330c:	ldp	x29, x30, [sp], #48
    3310:	ret
    3314:	cmp	x4, x7
    3318:	b.gt	32ec <__letf2+0xcc>
    331c:	b.lt	3350 <__letf2+0x130>  // b.tstop
    3320:	cmp	x10, x11
    3324:	b.hi	32ec <__letf2+0xcc>  // b.pmore
    3328:	cset	w0, eq  // eq = none
    332c:	cmp	w0, #0x0
    3330:	ccmp	x8, x9, #0x0, ne  // ne = any
    3334:	b.hi	32ec <__letf2+0xcc>  // b.pmore
    3338:	cmp	x10, x11
    333c:	b.cc	3350 <__letf2+0x130>  // b.lo, b.ul, b.last
    3340:	cmp	w0, #0x0
    3344:	mov	w0, #0x0                   	// #0
    3348:	ccmp	x8, x9, #0x2, ne  // ne = any
    334c:	b.cs	3294 <__letf2+0x74>  // b.hs, b.nlast
    3350:	cmp	x2, #0x0
    3354:	mov	w0, #0x1                   	// #1
    3358:	cneg	w0, w0, eq  // eq = none
    335c:	b	3294 <__letf2+0x74>

0000000000003360 <__multf3>:
    3360:	stp	x29, x30, [sp, #-80]!
    3364:	mov	x29, sp
    3368:	str	q0, [sp, #48]
    336c:	str	q1, [sp, #64]
    3370:	ldp	x1, x0, [sp, #48]
    3374:	ldp	x6, x2, [sp, #64]
    3378:	mrs	x11, fpcr
    337c:	lsr	x3, x0, #63
    3380:	ubfx	x7, x0, #0, #48
    3384:	and	w12, w3, #0xff
    3388:	mov	x14, x3
    338c:	ubfx	x3, x0, #48, #15
    3390:	cbz	w3, 3738 <__multf3+0x3d8>
    3394:	mov	w4, #0x7fff                	// #32767
    3398:	cmp	w3, w4
    339c:	b.eq	37dc <__multf3+0x47c>  // b.none
    33a0:	and	x3, x3, #0xffff
    33a4:	extr	x4, x7, x1, #61
    33a8:	mov	x18, #0xffffffffffffc001    	// #-16383
    33ac:	orr	x7, x4, #0x8000000000000
    33b0:	add	x3, x3, x18
    33b4:	lsl	x5, x1, #3
    33b8:	mov	x16, #0x0                   	// #0
    33bc:	mov	x1, #0x0                   	// #0
    33c0:	mov	w0, #0x0                   	// #0
    33c4:	lsr	x8, x2, #63
    33c8:	ubfx	x4, x2, #0, #48
    33cc:	and	w15, w8, #0xff
    33d0:	mov	x13, x8
    33d4:	ubfx	x9, x2, #48, #15
    33d8:	cbz	w9, 3798 <__multf3+0x438>
    33dc:	mov	w8, #0x7fff                	// #32767
    33e0:	cmp	w9, w8
    33e4:	b.eq	3468 <__multf3+0x108>  // b.none
    33e8:	and	x9, x9, #0xffff
    33ec:	mov	x17, #0xffffffffffffc001    	// #-16383
    33f0:	add	x9, x9, x17
    33f4:	extr	x2, x4, x6, #61
    33f8:	add	x9, x9, x3
    33fc:	lsl	x6, x6, #3
    3400:	orr	x4, x2, #0x8000000000000
    3404:	mov	x2, #0x0                   	// #0
    3408:	eor	w8, w12, w15
    340c:	cmp	x1, #0xa
    3410:	and	w10, w8, #0xff
    3414:	add	x3, x9, #0x1
    3418:	and	x8, x8, #0xff
    341c:	b.le	34a0 <__multf3+0x140>
    3420:	cmp	x1, #0xb
    3424:	b.eq	3b38 <__multf3+0x7d8>  // b.none
    3428:	mov	w15, w12
    342c:	mov	x13, x14
    3430:	mov	w10, w15
    3434:	cmp	x16, #0x2
    3438:	b.eq	37fc <__multf3+0x49c>  // b.none
    343c:	mov	x4, x7
    3440:	mov	x6, x5
    3444:	mov	x2, x16
    3448:	mov	x8, x13
    344c:	cmp	x2, #0x3
    3450:	b.ne	34bc <__multf3+0x15c>  // b.any
    3454:	orr	x4, x4, #0x800000000000
    3458:	mov	x5, x6
    345c:	and	x4, x4, #0xffffffffffff
    3460:	mov	w1, #0x7fff                	// #32767
    3464:	b	34d0 <__multf3+0x170>
    3468:	mov	x8, #0x7fff                	// #32767
    346c:	orr	x2, x4, x6
    3470:	add	x9, x3, x8
    3474:	cbnz	x2, 34f4 <__multf3+0x194>
    3478:	eor	w8, w12, w15
    347c:	orr	x1, x1, #0x2
    3480:	and	w10, w8, #0xff
    3484:	cmp	x1, #0xa
    3488:	add	x3, x3, #0x8, lsl #12
    348c:	and	x8, x8, #0xff
    3490:	mov	x6, #0x0                   	// #0
    3494:	b.gt	3aac <__multf3+0x74c>
    3498:	mov	x4, #0x0                   	// #0
    349c:	mov	x2, #0x2                   	// #2
    34a0:	cmp	x1, #0x2
    34a4:	b.gt	351c <__multf3+0x1bc>
    34a8:	sub	x1, x1, #0x1
    34ac:	cmp	x1, #0x1
    34b0:	b.hi	3558 <__multf3+0x1f8>  // b.pmore
    34b4:	cmp	x2, #0x2
    34b8:	b.eq	37fc <__multf3+0x49c>  // b.none
    34bc:	cmp	x2, #0x1
    34c0:	b.ne	36b8 <__multf3+0x358>  // b.any
    34c4:	mov	w1, #0x0                   	// #0
    34c8:	mov	x4, #0x0                   	// #0
    34cc:	mov	x5, #0x0                   	// #0
    34d0:	mov	x3, #0x0                   	// #0
    34d4:	orr	w1, w1, w10, lsl #15
    34d8:	bfxil	x3, x4, #0, #48
    34dc:	fmov	d0, x5
    34e0:	bfi	x3, x1, #48, #16
    34e4:	fmov	v0.d[1], x3
    34e8:	cbnz	w0, 3928 <__multf3+0x5c8>
    34ec:	ldp	x29, x30, [sp], #80
    34f0:	ret
    34f4:	tst	x4, #0x800000000000
    34f8:	eor	w8, w12, w15
    34fc:	orr	x1, x1, #0x3
    3500:	csinc	w0, w0, wzr, ne  // ne = any
    3504:	and	w10, w8, #0xff
    3508:	add	x3, x3, #0x8, lsl #12
    350c:	cmp	x1, #0xa
    3510:	and	x8, x8, #0xff
    3514:	mov	x2, #0x3                   	// #3
    3518:	b.gt	3b2c <__multf3+0x7cc>
    351c:	mov	x12, #0x1                   	// #1
    3520:	mov	x14, #0x530                 	// #1328
    3524:	lsl	x1, x12, x1
    3528:	tst	x1, x14
    352c:	b.ne	372c <__multf3+0x3cc>  // b.any
    3530:	mov	x14, #0x240                 	// #576
    3534:	tst	x1, x14
    3538:	b.ne	3714 <__multf3+0x3b4>  // b.any
    353c:	mov	x12, #0x88                  	// #136
    3540:	tst	x1, x12
    3544:	b.eq	3558 <__multf3+0x1f8>  // b.none
    3548:	mov	x7, x4
    354c:	mov	x5, x6
    3550:	mov	x16, x2
    3554:	b	3430 <__multf3+0xd0>
    3558:	lsr	x13, x5, #32
    355c:	and	x12, x6, #0xffffffff
    3560:	and	x15, x5, #0xffffffff
    3564:	lsr	x6, x6, #32
    3568:	and	x18, x4, #0xffffffff
    356c:	lsr	x2, x4, #32
    3570:	mul	x4, x13, x12
    3574:	stp	x21, x22, [sp, #32]
    3578:	lsr	x22, x7, #32
    357c:	and	x5, x7, #0xffffffff
    3580:	mul	x16, x12, x15
    3584:	madd	x7, x6, x15, x4
    3588:	stp	x19, x20, [sp, #16]
    358c:	mul	x1, x13, x18
    3590:	mul	x17, x15, x18
    3594:	and	x30, x16, #0xffffffff
    3598:	madd	x15, x2, x15, x1
    359c:	add	x16, x7, x16, lsr #32
    35a0:	mul	x21, x22, x12
    35a4:	cmp	x4, x16
    35a8:	mul	x20, x22, x18
    35ac:	mov	x14, #0x100000000           	// #4294967296
    35b0:	mul	x19, x13, x6
    35b4:	add	x15, x15, x17, lsr #32
    35b8:	mul	x12, x12, x5
    35bc:	and	x17, x17, #0xffffffff
    35c0:	mul	x18, x5, x18
    35c4:	add	x4, x19, x14
    35c8:	madd	x7, x6, x5, x21
    35cc:	csel	x19, x4, x19, hi  // hi = pmore
    35d0:	madd	x5, x2, x5, x20
    35d4:	cmp	x1, x15
    35d8:	mul	x13, x13, x2
    35dc:	add	x17, x17, x15, lsl #32
    35e0:	mul	x6, x6, x22
    35e4:	add	x7, x7, x12, lsr #32
    35e8:	add	x5, x5, x18, lsr #32
    35ec:	add	x4, x13, x14
    35f0:	mul	x2, x2, x22
    35f4:	csel	x13, x4, x13, hi  // hi = pmore
    35f8:	and	x1, x18, #0xffffffff
    35fc:	cmp	x21, x7
    3600:	add	x4, x6, x14
    3604:	add	x30, x30, x16, lsl #32
    3608:	csel	x6, x4, x6, hi  // hi = pmore
    360c:	add	x13, x13, x15, lsr #32
    3610:	cmp	x20, x5
    3614:	add	x1, x1, x5, lsl #32
    3618:	add	x16, x17, x16, lsr #32
    361c:	add	x14, x2, x14
    3620:	csel	x2, x14, x2, hi  // hi = pmore
    3624:	add	x16, x19, x16
    3628:	adds	x1, x1, x13
    362c:	and	x12, x12, #0xffffffff
    3630:	cset	x13, cs  // cs = hs, nlast
    3634:	cmp	x16, x17
    3638:	cset	x4, cc  // cc = lo, ul, last
    363c:	add	x12, x12, x7, lsl #32
    3640:	adds	x1, x1, x4
    3644:	lsr	x5, x5, #32
    3648:	cset	x4, cs  // cs = hs, nlast
    364c:	cmp	x13, #0x0
    3650:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    3654:	add	x7, x6, x7, lsr #32
    3658:	cinc	x5, x5, ne  // ne = any
    365c:	adds	x6, x16, x12
    3660:	cset	x4, cs  // cs = hs, nlast
    3664:	adds	x1, x1, x7
    3668:	cset	x7, cs  // cs = hs, nlast
    366c:	adds	x4, x1, x4
    3670:	cset	x1, cs  // cs = hs, nlast
    3674:	cmp	x7, #0x0
    3678:	orr	x30, x30, x6, lsl #13
    367c:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    3680:	cinc	x1, x2, ne  // ne = any
    3684:	cmp	x30, #0x0
    3688:	add	x1, x1, x5
    368c:	cset	x2, ne  // ne = any
    3690:	orr	x6, x2, x6, lsr #51
    3694:	orr	x6, x6, x4, lsl #13
    3698:	extr	x4, x1, x4, #51
    369c:	tbz	x1, #39, 39b0 <__multf3+0x650>
    36a0:	ldp	x19, x20, [sp, #16]
    36a4:	and	x1, x6, #0x1
    36a8:	ldp	x21, x22, [sp, #32]
    36ac:	orr	x6, x1, x6, lsr #1
    36b0:	orr	x6, x6, x4, lsl #63
    36b4:	lsr	x4, x4, #1
    36b8:	mov	x1, #0x3fff                	// #16383
    36bc:	add	x2, x3, x1
    36c0:	cmp	x2, #0x0
    36c4:	b.le	385c <__multf3+0x4fc>
    36c8:	tst	x6, #0x7
    36cc:	b.eq	36ec <__multf3+0x38c>  // b.none
    36d0:	and	x1, x11, #0xc00000
    36d4:	orr	w0, w0, #0x10
    36d8:	cmp	x1, #0x400, lsl #12
    36dc:	b.eq	3aa4 <__multf3+0x744>  // b.none
    36e0:	cmp	x1, #0x800, lsl #12
    36e4:	b.eq	3a4c <__multf3+0x6ec>  // b.none
    36e8:	cbz	x1, 3a34 <__multf3+0x6d4>
    36ec:	tbz	x4, #52, 36f8 <__multf3+0x398>
    36f0:	and	x4, x4, #0xffefffffffffffff
    36f4:	add	x2, x3, #0x4, lsl #12
    36f8:	mov	x1, #0x7ffe                	// #32766
    36fc:	cmp	x2, x1
    3700:	b.gt	3984 <__multf3+0x624>
    3704:	and	w1, w2, #0x7fff
    3708:	extr	x5, x4, x6, #3
    370c:	ubfx	x4, x4, #3, #48
    3710:	b	34d0 <__multf3+0x170>
    3714:	mov	w0, w12
    3718:	mov	w10, #0x0                   	// #0
    371c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3720:	mov	x5, #0xffffffffffffffff    	// #-1
    3724:	mov	w1, #0x7fff                	// #32767
    3728:	b	34d0 <__multf3+0x170>
    372c:	mov	w15, w10
    3730:	mov	x13, x8
    3734:	b	3430 <__multf3+0xd0>
    3738:	orr	x5, x7, x1
    373c:	cbz	x5, 3844 <__multf3+0x4e4>
    3740:	cbz	x7, 3960 <__multf3+0x600>
    3744:	clz	x0, x7
    3748:	sub	x4, x0, #0xf
    374c:	add	w5, w4, #0x3
    3750:	mov	w3, #0x3d                  	// #61
    3754:	sub	w3, w3, w4
    3758:	lsl	x4, x7, x5
    375c:	lsr	x3, x1, x3
    3760:	orr	x7, x3, x4
    3764:	lsl	x5, x1, x5
    3768:	lsr	x8, x2, #63
    376c:	mov	x3, #0xffffffffffffc011    	// #-16367
    3770:	ubfx	x4, x2, #0, #48
    3774:	sub	x3, x3, x0
    3778:	and	w15, w8, #0xff
    377c:	mov	x13, x8
    3780:	ubfx	x9, x2, #48, #15
    3784:	mov	x1, #0x0                   	// #0
    3788:	mov	x16, #0x0                   	// #0
    378c:	mov	w0, #0x0                   	// #0
    3790:	cbnz	w9, 33dc <__multf3+0x7c>
    3794:	nop
    3798:	orr	x2, x4, x6
    379c:	cbz	x2, 380c <__multf3+0x4ac>
    37a0:	cbz	x4, 393c <__multf3+0x5dc>
    37a4:	clz	x9, x4
    37a8:	sub	x2, x9, #0xf
    37ac:	add	w10, w2, #0x3
    37b0:	mov	w8, #0x3d                  	// #61
    37b4:	sub	w8, w8, w2
    37b8:	lsl	x2, x4, x10
    37bc:	lsr	x8, x6, x8
    37c0:	orr	x4, x8, x2
    37c4:	lsl	x6, x6, x10
    37c8:	sub	x9, x3, x9
    37cc:	mov	x10, #0xffffffffffffc011    	// #-16367
    37d0:	mov	x2, #0x0                   	// #0
    37d4:	add	x9, x9, x10
    37d8:	b	3408 <__multf3+0xa8>
    37dc:	orr	x5, x7, x1
    37e0:	cbnz	x5, 3824 <__multf3+0x4c4>
    37e4:	mov	x7, #0x0                   	// #0
    37e8:	mov	x1, #0x8                   	// #8
    37ec:	mov	x3, #0x7fff                	// #32767
    37f0:	mov	x16, #0x2                   	// #2
    37f4:	mov	w0, #0x0                   	// #0
    37f8:	b	33c4 <__multf3+0x64>
    37fc:	mov	w1, #0x7fff                	// #32767
    3800:	mov	x4, #0x0                   	// #0
    3804:	mov	x5, #0x0                   	// #0
    3808:	b	34d0 <__multf3+0x170>
    380c:	orr	x1, x1, #0x1
    3810:	mov	x9, x3
    3814:	mov	x4, #0x0                   	// #0
    3818:	mov	x6, #0x0                   	// #0
    381c:	mov	x2, #0x1                   	// #1
    3820:	b	3408 <__multf3+0xa8>
    3824:	lsr	x0, x7, #47
    3828:	mov	x5, x1
    382c:	eor	x0, x0, #0x1
    3830:	mov	x1, #0xc                   	// #12
    3834:	and	w0, w0, #0x1
    3838:	mov	x3, #0x7fff                	// #32767
    383c:	mov	x16, #0x3                   	// #3
    3840:	b	33c4 <__multf3+0x64>
    3844:	mov	x7, #0x0                   	// #0
    3848:	mov	x1, #0x4                   	// #4
    384c:	mov	x3, #0x0                   	// #0
    3850:	mov	x16, #0x1                   	// #1
    3854:	mov	w0, #0x0                   	// #0
    3858:	b	33c4 <__multf3+0x64>
    385c:	mov	x1, #0x1                   	// #1
    3860:	sub	x2, x1, x2
    3864:	cmp	x2, #0x74
    3868:	b.gt	38e0 <__multf3+0x580>
    386c:	cmp	x2, #0x3f
    3870:	b.le	39c0 <__multf3+0x660>
    3874:	mov	w1, #0x80                  	// #128
    3878:	sub	w1, w1, w2
    387c:	cmp	x2, #0x40
    3880:	sub	w2, w2, #0x40
    3884:	lsl	x1, x4, x1
    3888:	orr	x1, x6, x1
    388c:	csel	x6, x1, x6, ne  // ne = any
    3890:	lsr	x2, x4, x2
    3894:	cmp	x6, #0x0
    3898:	cset	x5, ne  // ne = any
    389c:	orr	x5, x5, x2
    38a0:	ands	x2, x5, #0x7
    38a4:	b.eq	39f4 <__multf3+0x694>  // b.none
    38a8:	mov	x2, #0x0                   	// #0
    38ac:	and	x11, x11, #0xc00000
    38b0:	orr	w0, w0, #0x10
    38b4:	cmp	x11, #0x400, lsl #12
    38b8:	b.eq	3b04 <__multf3+0x7a4>  // b.none
    38bc:	cmp	x11, #0x800, lsl #12
    38c0:	b.eq	3b18 <__multf3+0x7b8>  // b.none
    38c4:	cbz	x11, 3a5c <__multf3+0x6fc>
    38c8:	tbnz	x2, #51, 3a74 <__multf3+0x714>
    38cc:	ubfx	x4, x2, #3, #48
    38d0:	extr	x5, x2, x5, #3
    38d4:	orr	w0, w0, #0x8
    38d8:	mov	w1, #0x0                   	// #0
    38dc:	b	3910 <__multf3+0x5b0>
    38e0:	orr	x5, x6, x4
    38e4:	cbz	x5, 3904 <__multf3+0x5a4>
    38e8:	and	x11, x11, #0xc00000
    38ec:	orr	w0, w0, #0x10
    38f0:	cmp	x11, #0x400, lsl #12
    38f4:	sub	x5, x1, x8
    38f8:	b.eq	3904 <__multf3+0x5a4>  // b.none
    38fc:	cmp	x11, #0x800, lsl #12
    3900:	csel	x5, x8, xzr, eq  // eq = none
    3904:	orr	w0, w0, #0x8
    3908:	mov	w1, #0x0                   	// #0
    390c:	mov	x4, #0x0                   	// #0
    3910:	mov	x3, #0x0                   	// #0
    3914:	fmov	d0, x5
    3918:	bfxil	x3, x4, #0, #48
    391c:	bfi	x3, x1, #48, #15
    3920:	bfi	x3, x10, #63, #1
    3924:	fmov	v0.d[1], x3
    3928:	str	q0, [sp, #48]
    392c:	bl	3e50 <__sfp_handle_exceptions>
    3930:	ldr	q0, [sp, #48]
    3934:	ldp	x29, x30, [sp], #80
    3938:	ret
    393c:	clz	x9, x6
    3940:	add	x2, x9, #0x31
    3944:	add	x9, x9, #0x40
    3948:	cmp	x2, #0x3c
    394c:	b.le	37ac <__multf3+0x44c>
    3950:	sub	w2, w2, #0x3d
    3954:	lsl	x4, x6, x2
    3958:	mov	x6, #0x0                   	// #0
    395c:	b	37c8 <__multf3+0x468>
    3960:	clz	x3, x1
    3964:	add	x4, x3, #0x31
    3968:	add	x0, x3, #0x40
    396c:	cmp	x4, #0x3c
    3970:	b.le	374c <__multf3+0x3ec>
    3974:	sub	w4, w4, #0x3d
    3978:	mov	x5, #0x0                   	// #0
    397c:	lsl	x7, x1, x4
    3980:	b	3768 <__multf3+0x408>
    3984:	and	x5, x11, #0xc00000
    3988:	cmp	x5, #0x400, lsl #12
    398c:	b.eq	3a88 <__multf3+0x728>  // b.none
    3990:	cmp	x5, #0x800, lsl #12
    3994:	b.eq	3a18 <__multf3+0x6b8>  // b.none
    3998:	cbz	x5, 3a0c <__multf3+0x6ac>
    399c:	mov	x4, #0xffffffffffff        	// #281474976710655
    39a0:	mov	x5, #0xffffffffffffffff    	// #-1
    39a4:	mov	w2, #0x14                  	// #20
    39a8:	orr	w0, w0, w2
    39ac:	b	3910 <__multf3+0x5b0>
    39b0:	mov	x3, x9
    39b4:	ldp	x19, x20, [sp, #16]
    39b8:	ldp	x21, x22, [sp, #32]
    39bc:	b	36b8 <__multf3+0x358>
    39c0:	mov	w1, #0x40                  	// #64
    39c4:	sub	w1, w1, w2
    39c8:	lsr	x3, x6, x2
    39cc:	lsl	x6, x6, x1
    39d0:	cmp	x6, #0x0
    39d4:	lsl	x5, x4, x1
    39d8:	cset	x1, ne  // ne = any
    39dc:	orr	x5, x5, x3
    39e0:	lsr	x2, x4, x2
    39e4:	orr	x5, x5, x1
    39e8:	tst	x5, #0x7
    39ec:	b.ne	38ac <__multf3+0x54c>  // b.any
    39f0:	tbnz	x2, #51, 3b24 <__multf3+0x7c4>
    39f4:	ubfx	x4, x2, #3, #48
    39f8:	extr	x5, x2, x5, #3
    39fc:	mov	w1, #0x0                   	// #0
    3a00:	tbz	w11, #11, 34d0 <__multf3+0x170>
    3a04:	orr	w0, w0, #0x8
    3a08:	b	3910 <__multf3+0x5b0>
    3a0c:	mov	w1, #0x7fff                	// #32767
    3a10:	mov	x4, #0x0                   	// #0
    3a14:	b	39a4 <__multf3+0x644>
    3a18:	cmp	x8, #0x0
    3a1c:	mov	w2, #0x7fff                	// #32767
    3a20:	mov	x4, #0xffffffffffff        	// #281474976710655
    3a24:	csel	w1, w1, w2, eq  // eq = none
    3a28:	csel	x4, x4, xzr, eq  // eq = none
    3a2c:	csetm	x5, eq  // eq = none
    3a30:	b	39a4 <__multf3+0x644>
    3a34:	and	x1, x6, #0xf
    3a38:	cmp	x1, #0x4
    3a3c:	b.eq	36ec <__multf3+0x38c>  // b.none
    3a40:	adds	x6, x6, #0x4
    3a44:	cinc	x4, x4, cs  // cs = hs, nlast
    3a48:	b	36ec <__multf3+0x38c>
    3a4c:	cbz	x8, 36ec <__multf3+0x38c>
    3a50:	adds	x6, x6, #0x8
    3a54:	cinc	x4, x4, cs  // cs = hs, nlast
    3a58:	b	36ec <__multf3+0x38c>
    3a5c:	and	x1, x5, #0xf
    3a60:	cmp	x1, #0x4
    3a64:	b.eq	3a70 <__multf3+0x710>  // b.none
    3a68:	adds	x5, x5, #0x4
    3a6c:	cinc	x2, x2, cs  // cs = hs, nlast
    3a70:	tbz	x2, #51, 38cc <__multf3+0x56c>
    3a74:	orr	w0, w0, #0x8
    3a78:	mov	w1, #0x1                   	// #1
    3a7c:	mov	x4, #0x0                   	// #0
    3a80:	mov	x5, #0x0                   	// #0
    3a84:	b	3910 <__multf3+0x5b0>
    3a88:	cmp	x8, #0x0
    3a8c:	mov	w2, #0x7fff                	// #32767
    3a90:	mov	x4, #0xffffffffffff        	// #281474976710655
    3a94:	csel	w1, w1, w2, ne  // ne = any
    3a98:	csel	x4, x4, xzr, ne  // ne = any
    3a9c:	csetm	x5, ne  // ne = any
    3aa0:	b	39a4 <__multf3+0x644>
    3aa4:	cbnz	x8, 36ec <__multf3+0x38c>
    3aa8:	b	3a50 <__multf3+0x6f0>
    3aac:	mov	x4, #0x2                   	// #2
    3ab0:	cmp	x1, #0xf
    3ab4:	b.ne	3ad8 <__multf3+0x778>  // b.any
    3ab8:	tbz	x7, #47, 3af0 <__multf3+0x790>
    3abc:	tbnz	x2, #47, 3af0 <__multf3+0x790>
    3ac0:	orr	x4, x2, #0x800000000000
    3ac4:	mov	w10, w15
    3ac8:	and	x4, x4, #0xffffffffffff
    3acc:	mov	x5, x6
    3ad0:	mov	w1, #0x7fff                	// #32767
    3ad4:	b	34d0 <__multf3+0x170>
    3ad8:	cmp	x1, #0xb
    3adc:	b.ne	3428 <__multf3+0xc8>  // b.any
    3ae0:	mov	x7, x2
    3ae4:	mov	x5, x6
    3ae8:	mov	x16, x4
    3aec:	b	3430 <__multf3+0xd0>
    3af0:	orr	x4, x7, #0x800000000000
    3af4:	mov	w10, w12
    3af8:	and	x4, x4, #0xffffffffffff
    3afc:	mov	w1, #0x7fff                	// #32767
    3b00:	b	34d0 <__multf3+0x170>
    3b04:	cbnz	x8, 3a70 <__multf3+0x710>
    3b08:	adds	x5, x5, #0x8
    3b0c:	cinc	x2, x2, cs  // cs = hs, nlast
    3b10:	tbnz	x2, #51, 3a74 <__multf3+0x714>
    3b14:	b	38cc <__multf3+0x56c>
    3b18:	cbnz	x8, 3b08 <__multf3+0x7a8>
    3b1c:	tbnz	x2, #51, 3a74 <__multf3+0x714>
    3b20:	b	38cc <__multf3+0x56c>
    3b24:	orr	w0, w0, #0x10
    3b28:	b	3a74 <__multf3+0x714>
    3b2c:	mov	x2, x4
    3b30:	mov	x4, #0x3                   	// #3
    3b34:	b	3ab0 <__multf3+0x750>
    3b38:	mov	w10, w15
    3b3c:	mov	x8, x13
    3b40:	b	344c <__multf3+0xec>
    3b44:	nop

0000000000003b48 <__floatsitf>:
    3b48:	cmp	w0, #0x0
    3b4c:	cbz	w0, 3b98 <__floatsitf+0x50>
    3b50:	cneg	w1, w0, lt  // lt = tstop
    3b54:	mov	w4, #0x403e                	// #16446
    3b58:	clz	x3, x1
    3b5c:	mov	w2, #0x402f                	// #16431
    3b60:	sub	w4, w4, w3
    3b64:	lsr	w0, w0, #31
    3b68:	sub	w2, w2, w4
    3b6c:	mov	x3, #0x0                   	// #0
    3b70:	and	w4, w4, #0x7fff
    3b74:	lsl	x1, x1, x2
    3b78:	and	x1, x1, #0xffffffffffff
    3b7c:	orr	w0, w4, w0, lsl #15
    3b80:	mov	x2, #0x0                   	// #0
    3b84:	bfxil	x3, x1, #0, #48
    3b88:	fmov	d0, x2
    3b8c:	bfi	x3, x0, #48, #16
    3b90:	fmov	v0.d[1], x3
    3b94:	ret
    3b98:	mov	w4, #0x0                   	// #0
    3b9c:	mov	x1, #0x0                   	// #0
    3ba0:	mov	w0, #0x0                   	// #0
    3ba4:	mov	x3, #0x0                   	// #0
    3ba8:	orr	w0, w4, w0, lsl #15
    3bac:	bfxil	x3, x1, #0, #48
    3bb0:	mov	x2, #0x0                   	// #0
    3bb4:	fmov	d0, x2
    3bb8:	bfi	x3, x0, #48, #16
    3bbc:	fmov	v0.d[1], x3
    3bc0:	ret
    3bc4:	nop

0000000000003bc8 <__fixtfdi>:
    3bc8:	stp	x29, x30, [sp, #-48]!
    3bcc:	mov	x29, sp
    3bd0:	str	x19, [sp, #16]
    3bd4:	str	q0, [sp, #32]
    3bd8:	ldp	x2, x0, [sp, #32]
    3bdc:	mrs	x1, fpcr
    3be0:	ubfx	x19, x0, #48, #15
    3be4:	mov	x3, #0x3ffe                	// #16382
    3be8:	ubfx	x4, x0, #0, #48
    3bec:	cmp	x19, x3
    3bf0:	b.gt	3c18 <__fixtfdi+0x50>
    3bf4:	cbnz	x19, 3cb8 <__fixtfdi+0xf0>
    3bf8:	orr	x2, x4, x2
    3bfc:	cbz	x2, 3c08 <__fixtfdi+0x40>
    3c00:	mov	w0, #0x10                  	// #16
    3c04:	bl	3e50 <__sfp_handle_exceptions>
    3c08:	mov	x0, x19
    3c0c:	ldr	x19, [sp, #16]
    3c10:	ldp	x29, x30, [sp], #48
    3c14:	ret
    3c18:	lsr	x1, x0, #63
    3c1c:	and	w3, w1, #0xff
    3c20:	mov	x1, #0x403d                	// #16445
    3c24:	cmp	x19, x1
    3c28:	b.le	3c60 <__fixtfdi+0x98>
    3c2c:	mov	x0, #0x403e                	// #16446
    3c30:	and	x5, x3, #0xff
    3c34:	cmp	x19, x0
    3c38:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    3c3c:	csel	w1, w3, wzr, eq  // eq = none
    3c40:	add	x19, x5, x0
    3c44:	cbz	w1, 3cc8 <__fixtfdi+0x100>
    3c48:	extr	x4, x4, x2, #49
    3c4c:	cbnz	x4, 3cc8 <__fixtfdi+0x100>
    3c50:	cmp	xzr, x2, lsl #15
    3c54:	b.eq	3c08 <__fixtfdi+0x40>  // b.none
    3c58:	mov	w0, #0x10                  	// #16
    3c5c:	b	3c04 <__fixtfdi+0x3c>
    3c60:	mov	x5, #0x406f                	// #16495
    3c64:	sub	x1, x5, x19
    3c68:	mov	x0, x19
    3c6c:	cmp	x1, #0x3f
    3c70:	orr	x19, x4, #0x1000000000000
    3c74:	b.le	3cd4 <__fixtfdi+0x10c>
    3c78:	mov	w4, #0xffffc011            	// #-16367
    3c7c:	add	w4, w0, w4
    3c80:	cmp	x1, #0x40
    3c84:	mov	w1, #0x402f                	// #16431
    3c88:	sub	w0, w1, w0
    3c8c:	lsl	x1, x19, x4
    3c90:	orr	x1, x2, x1
    3c94:	csel	x2, x1, x2, ne  // ne = any
    3c98:	lsr	x19, x19, x0
    3c9c:	cmp	x2, #0x0
    3ca0:	cset	w0, ne  // ne = any
    3ca4:	cmp	w3, #0x0
    3ca8:	cneg	x19, x19, ne  // ne = any
    3cac:	cbz	w0, 3c08 <__fixtfdi+0x40>
    3cb0:	mov	w0, #0x10                  	// #16
    3cb4:	b	3c04 <__fixtfdi+0x3c>
    3cb8:	mov	x19, #0x0                   	// #0
    3cbc:	mov	w0, #0x10                  	// #16
    3cc0:	bl	3e50 <__sfp_handle_exceptions>
    3cc4:	b	3c08 <__fixtfdi+0x40>
    3cc8:	mov	w0, #0x1                   	// #1
    3ccc:	bl	3e50 <__sfp_handle_exceptions>
    3cd0:	b	3c08 <__fixtfdi+0x40>
    3cd4:	mov	w6, #0xffffbfd1            	// #-16431
    3cd8:	add	w4, w0, w6
    3cdc:	sub	w0, w5, w0
    3ce0:	lsl	x1, x2, x4
    3ce4:	cmp	x1, #0x0
    3ce8:	lsr	x2, x2, x0
    3cec:	cset	w0, ne  // ne = any
    3cf0:	lsl	x19, x19, x4
    3cf4:	orr	x19, x2, x19
    3cf8:	b	3ca4 <__fixtfdi+0xdc>
    3cfc:	nop

0000000000003d00 <__extenddftf2>:
    3d00:	mrs	x0, fpcr
    3d04:	fmov	x0, d0
    3d08:	ubfx	x1, x0, #52, #11
    3d0c:	lsr	x4, x0, #63
    3d10:	add	x2, x1, #0x1
    3d14:	and	w4, w4, #0xff
    3d18:	tst	x2, #0x7fe
    3d1c:	ubfx	x0, x0, #0, #52
    3d20:	b.eq	3d54 <__extenddftf2+0x54>  // b.none
    3d24:	lsr	x5, x0, #4
    3d28:	mov	x3, #0x0                   	// #0
    3d2c:	and	x5, x5, #0xffffffffffff
    3d30:	mov	w2, #0x3c00                	// #15360
    3d34:	add	w1, w1, w2
    3d38:	lsl	x0, x0, #60
    3d3c:	bfxil	x3, x5, #0, #48
    3d40:	fmov	d0, x0
    3d44:	bfi	x3, x1, #48, #15
    3d48:	bfi	x3, x4, #63, #1
    3d4c:	fmov	v0.d[1], x3
    3d50:	ret
    3d54:	cbnz	x1, 3da8 <__extenddftf2+0xa8>
    3d58:	cbz	x0, 3df4 <__extenddftf2+0xf4>
    3d5c:	clz	x2, x0
    3d60:	cmp	w2, #0xe
    3d64:	b.gt	3e40 <__extenddftf2+0x140>
    3d68:	add	w1, w2, #0x31
    3d6c:	mov	w5, #0xf                   	// #15
    3d70:	sub	w5, w5, w2
    3d74:	lsr	x5, x0, x5
    3d78:	lsl	x0, x0, x1
    3d7c:	and	x5, x5, #0xffffffffffff
    3d80:	mov	w1, #0x3c0c                	// #15372
    3d84:	mov	x3, #0x0                   	// #0
    3d88:	sub	w1, w1, w2
    3d8c:	and	w1, w1, #0x7fff
    3d90:	bfxil	x3, x5, #0, #48
    3d94:	fmov	d0, x0
    3d98:	bfi	x3, x1, #48, #15
    3d9c:	bfi	x3, x4, #63, #1
    3da0:	fmov	v0.d[1], x3
    3da4:	ret
    3da8:	cbz	x0, 3e18 <__extenddftf2+0x118>
    3dac:	lsr	x1, x0, #4
    3db0:	mov	x3, #0x0                   	// #0
    3db4:	orr	x1, x1, #0x800000000000
    3db8:	lsl	x2, x0, #60
    3dbc:	fmov	d0, x2
    3dc0:	bfxil	x3, x1, #0, #48
    3dc4:	orr	x3, x3, #0x7fff000000000000
    3dc8:	bfi	x3, x4, #63, #1
    3dcc:	fmov	v0.d[1], x3
    3dd0:	tbnz	x0, #51, 3e3c <__extenddftf2+0x13c>
    3dd4:	stp	x29, x30, [sp, #-32]!
    3dd8:	mov	w0, #0x1                   	// #1
    3ddc:	mov	x29, sp
    3de0:	str	q0, [sp, #16]
    3de4:	bl	3e50 <__sfp_handle_exceptions>
    3de8:	ldr	q0, [sp, #16]
    3dec:	ldp	x29, x30, [sp], #32
    3df0:	ret
    3df4:	mov	x5, #0x0                   	// #0
    3df8:	mov	x3, #0x0                   	// #0
    3dfc:	bfxil	x3, x5, #0, #48
    3e00:	mov	w1, #0x0                   	// #0
    3e04:	fmov	d0, x0
    3e08:	bfi	x3, x1, #48, #15
    3e0c:	bfi	x3, x4, #63, #1
    3e10:	fmov	v0.d[1], x3
    3e14:	ret
    3e18:	mov	x5, #0x0                   	// #0
    3e1c:	mov	x3, #0x0                   	// #0
    3e20:	bfxil	x3, x5, #0, #48
    3e24:	mov	w1, #0x7fff                	// #32767
    3e28:	fmov	d0, x0
    3e2c:	bfi	x3, x1, #48, #15
    3e30:	bfi	x3, x4, #63, #1
    3e34:	fmov	v0.d[1], x3
    3e38:	ret
    3e3c:	ret
    3e40:	sub	w5, w2, #0xf
    3e44:	lsl	x5, x0, x5
    3e48:	mov	x0, #0x0                   	// #0
    3e4c:	b	3d7c <__extenddftf2+0x7c>

0000000000003e50 <__sfp_handle_exceptions>:
    3e50:	tbz	w0, #0, 3e60 <__sfp_handle_exceptions+0x10>
    3e54:	movi	v1.2s, #0x0
    3e58:	fdiv	s0, s1, s1
    3e5c:	mrs	x1, fpsr
    3e60:	tbz	w0, #1, 3e74 <__sfp_handle_exceptions+0x24>
    3e64:	fmov	s1, #1.000000000000000000e+00
    3e68:	movi	v2.2s, #0x0
    3e6c:	fdiv	s0, s1, s2
    3e70:	mrs	x1, fpsr
    3e74:	tbz	w0, #2, 3e94 <__sfp_handle_exceptions+0x44>
    3e78:	mov	w2, #0xc5ae                	// #50606
    3e7c:	mov	w1, #0x7f7fffff            	// #2139095039
    3e80:	movk	w2, #0x749d, lsl #16
    3e84:	fmov	s1, w1
    3e88:	fmov	s2, w2
    3e8c:	fadd	s0, s1, s2
    3e90:	mrs	x1, fpsr
    3e94:	tbz	w0, #3, 3ea4 <__sfp_handle_exceptions+0x54>
    3e98:	movi	v1.2s, #0x80, lsl #16
    3e9c:	fmul	s0, s1, s1
    3ea0:	mrs	x1, fpsr
    3ea4:	tbz	w0, #4, 3ebc <__sfp_handle_exceptions+0x6c>
    3ea8:	mov	w0, #0x7f7fffff            	// #2139095039
    3eac:	fmov	s2, #1.000000000000000000e+00
    3eb0:	fmov	s1, w0
    3eb4:	fsub	s0, s1, s2
    3eb8:	mrs	x0, fpsr
    3ebc:	ret

Disassembly of section .fini:

0000000000003ec0 <_fini>:
    3ec0:	stp	x29, x30, [sp, #-16]!
    3ec4:	mov	x29, sp
    3ec8:	ldp	x29, x30, [sp], #16
    3ecc:	ret
