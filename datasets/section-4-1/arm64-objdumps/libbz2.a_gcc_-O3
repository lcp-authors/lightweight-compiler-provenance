In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_gcc_-O3:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fallbackSort>:
       0:	sub	sp, sp, #0xba0
       4:	cmp	w4, #0x3
       8:	stp	x29, x30, [sp]
       c:	mov	x29, sp
      10:	stp	x19, x20, [sp, #16]
      14:	mov	x19, x0
      18:	mov	x20, x1
      1c:	stp	x21, x22, [sp, #32]
      20:	mov	x21, x2
      24:	stp	x23, x24, [sp, #48]
      28:	stp	x25, x26, [sp, #64]
      2c:	mov	w25, w3
      30:	stp	x27, x28, [sp, #80]
      34:	str	w4, [sp, #108]
      38:	b.gt	a9c <fallbackSort+0xa9c>
      3c:	add	x23, sp, #0x798
      40:	mov	x2, #0x404                 	// #1028
      44:	mov	x0, x23
      48:	mov	w1, #0x0                   	// #0
      4c:	bl	0 <memset>
      50:	cmp	w25, #0x0
      54:	b.le	80 <fallbackSort+0x80>
      58:	sub	w3, w25, #0x1
      5c:	mov	x1, x20
      60:	add	x3, x3, #0x1
      64:	add	x3, x3, x20
      68:	ldrb	w2, [x1], #1
      6c:	cmp	x3, x1
      70:	ldr	w0, [x23, x2, lsl #2]
      74:	add	w0, w0, #0x1
      78:	str	w0, [x23, x2, lsl #2]
      7c:	b.ne	68 <fallbackSort+0x68>  // b.any
      80:	mov	x1, x23
      84:	add	x0, sp, #0x398
      88:	mov	x2, #0x400                 	// #1024
      8c:	bl	0 <memcpy>
      90:	ldr	w1, [sp, #1944]
      94:	mov	x22, x23
      98:	add	x0, x23, #0x4
      9c:	add	x3, x23, #0x404
      a0:	ldr	w2, [x0]
      a4:	add	w1, w1, w2
      a8:	str	w1, [x0], #4
      ac:	cmp	x3, x0
      b0:	b.ne	a0 <fallbackSort+0xa0>  // b.any
      b4:	cmp	w25, #0x0
      b8:	add	w3, w25, #0x1f
      bc:	csel	w3, w3, w25, lt  // lt = tstop
      c0:	asr	w3, w3, #5
      c4:	b.le	b00 <fallbackSort+0xb00>
      c8:	mov	x0, #0x0                   	// #0
      cc:	nop
      d0:	ldrb	w2, [x20, x0]
      d4:	ldr	w1, [x23, x2, lsl #2]
      d8:	sub	w1, w1, #0x1
      dc:	str	w1, [x23, x2, lsl #2]
      e0:	str	w0, [x19, w1, sxtw #2]
      e4:	add	x0, x0, #0x1
      e8:	cmp	w25, w0
      ec:	b.gt	d0 <fallbackSort+0xd0>
      f0:	add	w2, w3, #0x1
      f4:	cmn	w25, #0x3f
      f8:	add	x2, x2, #0x1
      fc:	mov	x3, #0x4                   	// #4
     100:	mov	x0, x21
     104:	mov	w1, #0x0                   	// #0
     108:	lsl	x2, x2, #2
     10c:	csel	x2, x2, x3, ge  // ge = tcont
     110:	bl	0 <memset>
     114:	add	x3, x23, #0x400
     118:	mov	w5, #0x1                   	// #1
     11c:	nop
     120:	ldr	w1, [x22], #4
     124:	cmp	x3, x22
     128:	asr	w0, w1, #5
     12c:	lsl	w1, w5, w1
     130:	sxtw	x0, w0
     134:	ldr	w2, [x21, x0, lsl #2]
     138:	orr	w1, w2, w1
     13c:	str	w1, [x21, x0, lsl #2]
     140:	b.ne	120 <fallbackSort+0x120>  // b.any
     144:	mov	w1, w25
     148:	add	w8, w25, #0x40
     14c:	mov	w6, #0x1                   	// #1
     150:	asr	w3, w1, #5
     154:	add	w0, w1, #0x1
     158:	lsl	w5, w6, w1
     15c:	add	w1, w1, #0x2
     160:	sxtw	x3, w3
     164:	asr	w2, w0, #5
     168:	lsl	w0, w6, w0
     16c:	cmp	w8, w1
     170:	sxtw	x2, w2
     174:	ldr	w4, [x21, x3, lsl #2]
     178:	orr	w4, w4, w5
     17c:	str	w4, [x21, x3, lsl #2]
     180:	ldr	w3, [x21, x2, lsl #2]
     184:	bic	w0, w3, w0
     188:	str	w0, [x21, x2, lsl #2]
     18c:	b.ne	150 <fallbackSort+0x150>  // b.any
     190:	add	x15, sp, #0x78
     194:	add	x4, sp, #0x208
     198:	mov	w12, #0x1                   	// #1
     19c:	nop
     1a0:	ldr	w0, [sp, #108]
     1a4:	cmp	w0, #0x3
     1a8:	b.gt	a70 <fallbackSort+0xa70>
     1ac:	cmp	w25, #0x0
     1b0:	mov	x0, #0x0                   	// #0
     1b4:	mov	w5, #0x0                   	// #0
     1b8:	mov	w6, #0x1                   	// #1
     1bc:	b.le	1f4 <fallbackSort+0x1f4>
     1c0:	asr	w3, w0, #5
     1c4:	ldr	w1, [x19, x0, lsl #2]
     1c8:	lsl	w2, w6, w0
     1cc:	ldr	w3, [x21, w3, sxtw #2]
     1d0:	tst	w2, w3
     1d4:	csel	w5, w5, w0, eq  // eq = none
     1d8:	subs	w1, w1, w12
     1dc:	add	x0, x0, #0x1
     1e0:	add	w2, w25, w1
     1e4:	b.mi	9a8 <fallbackSort+0x9a8>  // b.first
     1e8:	str	w5, [x20, w1, sxtw #2]
     1ec:	cmp	w25, w0
     1f0:	b.gt	1c0 <fallbackSort+0x1c0>
     1f4:	mov	w23, w12
     1f8:	mov	w24, #0xffffffff            	// #-1
     1fc:	str	wzr, [sp, #104]
     200:	add	w0, w24, #0x1
     204:	mov	w5, #0x1                   	// #1
     208:	and	w3, w0, #0x1f
     20c:	asr	w2, w0, #5
     210:	lsl	w1, w5, w3
     214:	ldr	w2, [x21, w2, sxtw #2]
     218:	tst	w1, w2
     21c:	b.eq	3a8 <fallbackSort+0x3a8>  // b.none
     220:	cbz	w3, 8b0 <fallbackSort+0x8b0>
     224:	mov	w22, w0
     228:	add	w0, w0, #0x1
     22c:	and	w3, w0, #0x1f
     230:	asr	w2, w0, #5
     234:	lsl	w1, w5, w3
     238:	ldr	w2, [x21, w2, sxtw #2]
     23c:	tst	w1, w2
     240:	b.ne	220 <fallbackSort+0x220>  // b.any
     244:	cmp	w25, w22
     248:	b.le	3b8 <fallbackSort+0x3b8>
     24c:	mov	w1, w0
     250:	mov	w6, #0x1                   	// #1
     254:	nop
     258:	cbz	w3, 914 <fallbackSort+0x914>
     25c:	mov	w24, w1
     260:	add	w1, w1, #0x1
     264:	and	w3, w1, #0x1f
     268:	asr	w2, w1, #5
     26c:	lsl	w5, w6, w3
     270:	ldr	w2, [x21, w2, sxtw #2]
     274:	tst	w5, w2
     278:	b.eq	258 <fallbackSort+0x258>  // b.none
     27c:	cmp	w25, w24
     280:	b.le	3b8 <fallbackSort+0x3b8>
     284:	cmp	w1, w0
     288:	b.le	200 <fallbackSort+0x200>
     28c:	sub	w0, w1, w0
     290:	ldr	w1, [sp, #104]
     294:	add	w0, w0, #0x1
     298:	mov	w28, #0x0                   	// #0
     29c:	add	w0, w1, w0
     2a0:	mov	w6, #0x1                   	// #1
     2a4:	str	w0, [sp, #104]
     2a8:	mov	w0, w25
     2ac:	mov	w26, w24
     2b0:	mov	x25, x21
     2b4:	mov	w27, w22
     2b8:	mov	w21, w28
     2bc:	sxtw	x28, w6
     2c0:	mov	w6, w0
     2c4:	mov	x7, #0xfffffffffffffff0    	// #-16
     2c8:	str	w22, [sp, #120]
     2cc:	str	w24, [sp, #520]
     2d0:	sub	w0, w26, w27
     2d4:	sub	w9, w28, #0x1
     2d8:	cmp	w0, #0x9
     2dc:	b.le	504 <fallbackSort+0x504>
     2e0:	mov	w0, #0x1dc5                	// #7621
     2e4:	mul	w21, w21, w0
     2e8:	mov	w0, #0xaaab                	// #43691
     2ec:	movk	w0, #0xaaaa, lsl #16
     2f0:	add	w21, w21, #0x1
     2f4:	and	w21, w21, #0x7fff
     2f8:	umull	x0, w21, w0
     2fc:	lsr	x0, x0, #33
     300:	add	w0, w0, w0, lsl #1
     304:	subs	w0, w21, w0
     308:	b.ne	9b8 <fallbackSort+0x9b8>  // b.any
     30c:	ldr	w0, [x19, w27, sxtw #2]
     310:	ldr	w12, [x20, x0, lsl #2]
     314:	cmp	w27, w26
     318:	b.gt	4b8 <fallbackSort+0x4b8>
     31c:	sbfiz	x17, x27, #2, #32
     320:	sxtw	x18, w27
     324:	add	x16, x19, x17
     328:	mov	w0, w27
     32c:	mov	x14, x16
     330:	mov	x10, x16
     334:	mov	w5, w26
     338:	mov	w13, w27
     33c:	mov	w3, w26
     340:	ldr	w2, [x10]
     344:	mov	w11, w0
     348:	ldr	w1, [x20, w2, uxtw #2]
     34c:	sub	w1, w1, w12
     350:	cmp	w1, #0x0
     354:	cbz	w1, 884 <fallbackSort+0x884>
     358:	b.le	8a4 <fallbackSort+0x8a4>
     35c:	cmp	w0, w3
     360:	b.gt	4b0 <fallbackSort+0x4b0>
     364:	add	x2, x19, w3, sxtw #2
     368:	b	37c <fallbackSort+0x37c>
     36c:	b.mi	490 <fallbackSort+0x490>  // b.first
     370:	sub	x2, x2, #0x4
     374:	cmp	w0, w3
     378:	b.gt	4b0 <fallbackSort+0x4b0>
     37c:	ldr	w8, [x2]
     380:	sub	w3, w3, #0x1
     384:	ldr	w1, [x20, w8, uxtw #2]
     388:	subs	w1, w1, w12
     38c:	cbnz	w1, 36c <fallbackSort+0x36c>
     390:	sxtw	x1, w5
     394:	sub	w5, w5, #0x1
     398:	ldr	w30, [x19, x1, lsl #2]
     39c:	str	w30, [x2]
     3a0:	str	w8, [x19, x1, lsl #2]
     3a4:	b	370 <fallbackSort+0x370>
     3a8:	mov	w22, w24
     3ac:	cmp	w25, w22
     3b0:	b.gt	24c <fallbackSort+0x24c>
     3b4:	nop
     3b8:	ldr	w0, [sp, #108]
     3bc:	mov	w12, w23
     3c0:	cmp	w0, #0x3
     3c4:	b.le	3f0 <fallbackSort+0x3f0>
     3c8:	adrp	x0, 0 <stderr>
     3cc:	ldr	w2, [sp, #104]
     3d0:	adrp	x1, 0 <fallbackSort>
     3d4:	add	x1, x1, #0x0
     3d8:	ldr	x0, [x0]
     3dc:	str	w23, [sp, #100]
     3e0:	bl	0 <fprintf>
     3e4:	ldr	w12, [sp, #100]
     3e8:	add	x4, sp, #0x208
     3ec:	add	x15, sp, #0x78
     3f0:	ldr	w0, [sp, #104]
     3f4:	lsl	w12, w12, #1
     3f8:	cmp	w0, #0x0
     3fc:	ccmp	w25, w12, #0x1, ne  // ne = any
     400:	b.ge	1a0 <fallbackSort+0x1a0>  // b.tcont
     404:	ldr	w0, [sp, #108]
     408:	cmp	w0, #0x3
     40c:	b.gt	ae0 <fallbackSort+0xae0>
     410:	cmp	w25, #0x0
     414:	b.le	470 <fallbackSort+0x470>
     418:	ldr	w1, [sp, #920]
     41c:	mov	x3, #0x0                   	// #0
     420:	mov	w2, #0x0                   	// #0
     424:	mov	x5, #0x0                   	// #0
     428:	mov	x0, x5
     42c:	cbnz	w1, 448 <fallbackSort+0x448>
     430:	add	w2, w0, #0x1
     434:	add	x1, sp, #0x398
     438:	add	x0, x0, #0x1
     43c:	ldr	w1, [x1, x0, lsl #2]
     440:	cbz	w1, 430 <fallbackSort+0x430>
     444:	sxtw	x5, w2
     448:	ldr	w0, [x19, x3, lsl #2]
     44c:	add	x4, sp, #0x398
     450:	sub	w1, w1, #0x1
     454:	add	x3, x3, #0x1
     458:	cmp	w25, w3
     45c:	str	w1, [x4, x5, lsl #2]
     460:	strb	w2, [x20, x0]
     464:	b.gt	428 <fallbackSort+0x428>
     468:	cmp	w2, #0xff
     46c:	b.gt	abc <fallbackSort+0xabc>
     470:	ldp	x29, x30, [sp]
     474:	ldp	x19, x20, [sp, #16]
     478:	ldp	x21, x22, [sp, #32]
     47c:	ldp	x23, x24, [sp, #48]
     480:	ldp	x25, x26, [sp, #64]
     484:	ldp	x27, x28, [sp, #80]
     488:	add	sp, sp, #0xba0
     48c:	ret
     490:	add	w11, w0, #0x1
     494:	ldr	w1, [x10]
     498:	mov	w0, w11
     49c:	str	w8, [x10]
     4a0:	str	w1, [x2]
     4a4:	add	x10, x10, #0x4
     4a8:	cmp	w0, w3
     4ac:	b.le	340 <fallbackSort+0x340>
     4b0:	cmp	w13, w5
     4b4:	b.le	654 <fallbackSort+0x654>
     4b8:	cbz	w9, 604 <fallbackSort+0x604>
     4bc:	sub	w0, w28, #0x2
     4c0:	sxtw	x28, w9
     4c4:	sxtw	x0, w0
     4c8:	ldr	w27, [x15, x0, lsl #2]
     4cc:	ldr	w26, [x4, x0, lsl #2]
     4d0:	cmp	w28, #0x62
     4d4:	b.le	2d0 <fallbackSort+0x2d0>
     4d8:	mov	w0, #0x3ec                 	// #1004
     4dc:	str	w6, [sp, #100]
     4e0:	bl	0 <BZ2_bz__AssertH__fail>
     4e4:	sub	w0, w26, w27
     4e8:	ldr	w6, [sp, #100]
     4ec:	add	x4, sp, #0x208
     4f0:	add	x15, sp, #0x78
     4f4:	sub	w9, w28, #0x1
     4f8:	cmp	w0, #0x9
     4fc:	mov	x7, #0xfffffffffffffff0    	// #-16
     500:	b.gt	2e0 <fallbackSort+0x2e0>
     504:	cmp	w27, w26
     508:	b.eq	4b8 <fallbackSort+0x4b8>  // b.none
     50c:	cmp	w0, #0x3
     510:	b.le	588 <fallbackSort+0x588>
     514:	sub	w11, w26, #0x4
     518:	cmp	w11, w27
     51c:	b.lt	588 <fallbackSort+0x588>  // b.tstop
     520:	sxtw	x11, w11
     524:	mov	w10, w26
     528:	ldr	w12, [x19, x11, lsl #2]
     52c:	add	x0, x7, w10, sxtw #2
     530:	add	x3, x19, x11, lsl #2
     534:	cmp	w10, w26
     538:	add	x0, x19, x0
     53c:	mov	w1, w10
     540:	ldr	w8, [x20, w12, sxtw #2]
     544:	b.le	55c <fallbackSort+0x55c>
     548:	b	574 <fallbackSort+0x574>
     54c:	str	w2, [x0]
     550:	cmp	w1, w26
     554:	add	x0, x3, #0x10
     558:	b.gt	988 <fallbackSort+0x988>
     55c:	ldr	w2, [x0, #16]
     560:	add	w1, w1, #0x4
     564:	mov	x3, x0
     568:	ldr	w5, [x20, w2, uxtw #2]
     56c:	cmp	w8, w5
     570:	b.hi	54c <fallbackSort+0x54c>  // b.pmore
     574:	str	w12, [x3]
     578:	sub	x11, x11, #0x1
     57c:	cmp	w27, w11
     580:	sub	w10, w10, #0x1
     584:	b.le	528 <fallbackSort+0x528>
     588:	sub	w10, w26, #0x1
     58c:	mov	w8, w26
     590:	cmp	w10, w27
     594:	mov	x13, #0xfffffffffffffffc    	// #-4
     598:	sxtw	x10, w10
     59c:	b.lt	4b8 <fallbackSort+0x4b8>  // b.tstop
     5a0:	ldr	w12, [x19, x10, lsl #2]
     5a4:	add	x0, x13, w8, sxtw #2
     5a8:	add	x3, x19, x10, lsl #2
     5ac:	cmp	w8, w26
     5b0:	add	x0, x19, x0
     5b4:	mov	w1, w8
     5b8:	ldr	w11, [x20, w12, sxtw #2]
     5bc:	b.le	5d4 <fallbackSort+0x5d4>
     5c0:	b	5ec <fallbackSort+0x5ec>
     5c4:	str	w2, [x0]
     5c8:	cmp	w1, w26
     5cc:	add	x0, x3, #0x4
     5d0:	b.gt	968 <fallbackSort+0x968>
     5d4:	ldr	w2, [x0, #4]
     5d8:	add	w1, w1, #0x1
     5dc:	mov	x3, x0
     5e0:	ldr	w5, [x20, w2, uxtw #2]
     5e4:	cmp	w11, w5
     5e8:	b.hi	5c4 <fallbackSort+0x5c4>  // b.pmore
     5ec:	str	w12, [x3]
     5f0:	sub	x10, x10, #0x1
     5f4:	cmp	w27, w10
     5f8:	sub	w8, w8, #0x1
     5fc:	b.le	5a0 <fallbackSort+0x5a0>
     600:	cbnz	w9, 4bc <fallbackSort+0x4bc>
     604:	mov	x21, x25
     608:	sxtw	x22, w22
     60c:	mov	w25, w6
     610:	mov	w1, #0xffffffff            	// #-1
     614:	mov	w7, #0x1                   	// #1
     618:	ldr	w5, [x19, x22, lsl #2]
     61c:	asr	w0, w22, #5
     620:	mov	w3, w1
     624:	lsl	w6, w7, w22
     628:	sxtw	x0, w0
     62c:	add	x22, x22, #0x1
     630:	ldr	w1, [x20, x5, lsl #2]
     634:	cmp	w1, w3
     638:	b.eq	648 <fallbackSort+0x648>  // b.none
     63c:	ldr	w2, [x21, x0, lsl #2]
     640:	orr	w2, w2, w6
     644:	str	w2, [x21, x0, lsl #2]
     648:	cmp	w24, w22
     64c:	b.ge	618 <fallbackSort+0x618>  // b.tcont
     650:	b	200 <fallbackSort+0x200>
     654:	sub	w2, w11, w13
     658:	sub	w0, w13, w27
     65c:	cmp	w2, w0
     660:	csel	w2, w2, w0, le
     664:	cmp	w2, #0x0
     668:	sub	w8, w11, w2
     66c:	b.le	744 <fallbackSort+0x744>
     670:	sxtw	x0, w8
     674:	add	x30, x17, #0x10
     678:	add	x10, x0, #0x4
     67c:	sub	w12, w2, #0x1
     680:	lsl	x10, x10, #2
     684:	sub	x1, x10, #0x10
     688:	cmp	x1, x30
     68c:	ccmp	x17, x10, #0x0, lt  // lt = tstop
     690:	ccmp	w12, #0x4, #0x0, ge  // ge = tcont
     694:	b.ls	a34 <fallbackSort+0xa34>  // b.plast
     698:	lsr	w10, w2, #2
     69c:	add	x1, x19, x1
     6a0:	mov	x0, #0x0                   	// #0
     6a4:	lsl	x10, x10, #4
     6a8:	ldr	q1, [x1, x0]
     6ac:	ldr	q0, [x16, x0]
     6b0:	str	q1, [x16, x0]
     6b4:	str	q0, [x1, x0]
     6b8:	add	x0, x0, #0x10
     6bc:	cmp	x10, x0
     6c0:	b.ne	6a8 <fallbackSort+0x6a8>  // b.any
     6c4:	and	w0, w2, #0xfffffffc
     6c8:	cmp	w0, w2
     6cc:	add	w8, w8, w0
     6d0:	sub	w2, w2, w0
     6d4:	add	w0, w0, w27
     6d8:	b.eq	744 <fallbackSort+0x744>  // b.none
     6dc:	sxtw	x1, w8
     6e0:	sxtw	x10, w0
     6e4:	cmp	w2, #0x1
     6e8:	add	w8, w8, #0x1
     6ec:	add	w0, w0, #0x1
     6f0:	ldr	w14, [x19, x1, lsl #2]
     6f4:	ldr	w12, [x19, x10, lsl #2]
     6f8:	str	w14, [x19, x10, lsl #2]
     6fc:	str	w12, [x19, x1, lsl #2]
     700:	b.eq	744 <fallbackSort+0x744>  // b.none
     704:	sxtw	x1, w8
     708:	sxtw	x10, w0
     70c:	cmp	w2, #0x2
     710:	sbfiz	x8, x8, #2, #32
     714:	sbfiz	x0, x0, #2, #32
     718:	ldr	w12, [x19, x1, lsl #2]
     71c:	ldr	w2, [x19, x10, lsl #2]
     720:	str	w12, [x19, x10, lsl #2]
     724:	str	w2, [x19, x1, lsl #2]
     728:	b.eq	744 <fallbackSort+0x744>  // b.none
     72c:	add	x1, x8, #0x4
     730:	add	x0, x0, #0x4
     734:	ldr	w8, [x19, x1]
     738:	ldr	w2, [x19, x0]
     73c:	str	w8, [x19, x0]
     740:	str	w2, [x19, x1]
     744:	sub	w3, w5, w3
     748:	sub	w5, w26, w5
     74c:	cmp	w5, w3
     750:	csel	w5, w5, w3, le
     754:	sub	w10, w26, w5
     758:	cmp	w5, #0x0
     75c:	add	w8, w10, #0x1
     760:	b.le	844 <fallbackSort+0x844>
     764:	sxtw	x0, w8
     768:	sbfiz	x2, x11, #2, #32
     76c:	add	x0, x0, #0x4
     770:	add	x14, x2, #0x10
     774:	sub	w12, w5, #0x1
     778:	sxtw	x16, w11
     77c:	lsl	x0, x0, #2
     780:	sub	x1, x0, #0x10
     784:	cmp	x1, x14
     788:	ccmp	x2, x0, #0x0, lt  // lt = tstop
     78c:	ccmp	w12, #0x4, #0x0, ge  // ge = tcont
     790:	b.ls	9f8 <fallbackSort+0x9f8>  // b.plast
     794:	lsr	w10, w5, #2
     798:	add	x2, x19, x2
     79c:	add	x1, x19, x1
     7a0:	mov	x0, #0x0                   	// #0
     7a4:	lsl	x10, x10, #4
     7a8:	ldr	q1, [x1, x0]
     7ac:	ldr	q0, [x2, x0]
     7b0:	str	q1, [x2, x0]
     7b4:	str	q0, [x1, x0]
     7b8:	add	x0, x0, #0x10
     7bc:	cmp	x10, x0
     7c0:	b.ne	7a8 <fallbackSort+0x7a8>  // b.any
     7c4:	and	w0, w5, #0xfffffffc
     7c8:	cmp	w0, w5
     7cc:	add	w8, w8, w0
     7d0:	sub	w5, w5, w0
     7d4:	add	w0, w11, w0
     7d8:	b.eq	844 <fallbackSort+0x844>  // b.none
     7dc:	sxtw	x1, w8
     7e0:	sxtw	x2, w0
     7e4:	cmp	w5, #0x1
     7e8:	add	w8, w8, #0x1
     7ec:	add	w0, w0, #0x1
     7f0:	ldr	w12, [x19, x1, lsl #2]
     7f4:	ldr	w10, [x19, x2, lsl #2]
     7f8:	str	w12, [x19, x2, lsl #2]
     7fc:	str	w10, [x19, x1, lsl #2]
     800:	b.eq	844 <fallbackSort+0x844>  // b.none
     804:	sxtw	x1, w8
     808:	sxtw	x2, w0
     80c:	cmp	w5, #0x2
     810:	sbfiz	x8, x8, #2, #32
     814:	sbfiz	x0, x0, #2, #32
     818:	ldr	w10, [x19, x1, lsl #2]
     81c:	ldr	w5, [x19, x2, lsl #2]
     820:	str	w10, [x19, x2, lsl #2]
     824:	str	w5, [x19, x1, lsl #2]
     828:	b.eq	844 <fallbackSort+0x844>  // b.none
     82c:	add	x1, x8, #0x4
     830:	add	x0, x0, #0x4
     834:	ldr	w5, [x19, x1]
     838:	ldr	w2, [x19, x0]
     83c:	str	w5, [x19, x0]
     840:	str	w2, [x19, x1]
     844:	add	w0, w11, w27
     848:	sub	w3, w26, w3
     84c:	sub	w0, w0, w13
     850:	add	w1, w3, #0x1
     854:	sub	w0, w0, #0x1
     858:	sub	w3, w26, w1
     85c:	sub	w5, w0, w27
     860:	add	w2, w28, #0x1
     864:	cmp	w5, w3
     868:	b.le	9cc <fallbackSort+0x9cc>
     86c:	str	w0, [x4, w9, sxtw #2]
     870:	mov	w27, w1
     874:	str	w1, [x15, x28, lsl #2]
     878:	str	w26, [x4, x28, lsl #2]
     87c:	sxtw	x28, w2
     880:	b	4d0 <fallbackSort+0x4d0>
     884:	sxtw	x1, w13
     888:	add	w0, w0, #0x1
     88c:	add	w13, w13, #0x1
     890:	mov	w11, w0
     894:	ldr	w8, [x19, x1, lsl #2]
     898:	str	w8, [x10]
     89c:	str	w2, [x19, x1, lsl #2]
     8a0:	b	4a4 <fallbackSort+0x4a4>
     8a4:	add	w0, w0, #0x1
     8a8:	mov	w11, w0
     8ac:	b	4a4 <fallbackSort+0x4a4>
     8b0:	cmn	w2, #0x1
     8b4:	b.ne	8e8 <fallbackSort+0x8e8>  // b.any
     8b8:	mov	w22, w0
     8bc:	add	w0, w0, #0x20
     8c0:	asr	w1, w0, #5
     8c4:	ldr	w2, [x21, w1, sxtw #2]
     8c8:	cmn	w2, #0x1
     8cc:	b.eq	8b8 <fallbackSort+0x8b8>  // b.none
     8d0:	and	w3, w0, #0x1f
     8d4:	mov	w1, #0x1                   	// #1
     8d8:	add	w22, w22, #0x1f
     8dc:	lsl	w1, w1, w3
     8e0:	tst	w1, w2
     8e4:	b.eq	244 <fallbackSort+0x244>  // b.none
     8e8:	mov	w5, #0x1                   	// #1
     8ec:	nop
     8f0:	mov	w22, w0
     8f4:	add	w0, w0, #0x1
     8f8:	and	w3, w0, #0x1f
     8fc:	asr	w2, w0, #5
     900:	lsl	w1, w5, w3
     904:	ldr	w2, [x21, w2, sxtw #2]
     908:	tst	w1, w2
     90c:	b.ne	8f0 <fallbackSort+0x8f0>  // b.any
     910:	b	244 <fallbackSort+0x244>
     914:	cbnz	w2, a68 <fallbackSort+0xa68>
     918:	add	w1, w1, #0x20
     91c:	asr	w2, w1, #5
     920:	ldr	w2, [x21, w2, sxtw #2]
     924:	cbz	w2, 918 <fallbackSort+0x918>
     928:	and	w6, w1, #0x1f
     92c:	mov	w3, #0x1                   	// #1
     930:	sub	w24, w1, #0x1
     934:	mov	w5, w3
     938:	lsl	w3, w3, w6
     93c:	tst	w3, w2
     940:	b.ne	27c <fallbackSort+0x27c>  // b.any
     944:	nop
     948:	mov	w24, w1
     94c:	add	w1, w1, #0x1
     950:	asr	w2, w1, #5
     954:	lsl	w3, w5, w1
     958:	ldr	w2, [x21, w2, sxtw #2]
     95c:	tst	w3, w2
     960:	b.eq	948 <fallbackSort+0x948>  // b.none
     964:	b	27c <fallbackSort+0x27c>
     968:	add	x1, x13, w1, sxtw #2
     96c:	sub	x10, x10, #0x1
     970:	add	x3, x19, x1
     974:	cmp	w27, w10
     978:	sub	w8, w8, #0x1
     97c:	str	w12, [x3]
     980:	b.le	5a0 <fallbackSort+0x5a0>
     984:	b	600 <fallbackSort+0x600>
     988:	add	x1, x7, w1, sxtw #2
     98c:	sub	x11, x11, #0x1
     990:	add	x3, x19, x1
     994:	cmp	w27, w11
     998:	sub	w10, w10, #0x1
     99c:	str	w12, [x3]
     9a0:	b.le	528 <fallbackSort+0x528>
     9a4:	b	588 <fallbackSort+0x588>
     9a8:	str	w5, [x20, w2, sxtw #2]
     9ac:	cmp	w25, w0
     9b0:	b.gt	1c0 <fallbackSort+0x1c0>
     9b4:	b	1f4 <fallbackSort+0x1f4>
     9b8:	cmp	w0, #0x1
     9bc:	b.eq	9e4 <fallbackSort+0x9e4>  // b.none
     9c0:	ldr	w0, [x19, w26, sxtw #2]
     9c4:	ldr	w12, [x20, x0, lsl #2]
     9c8:	b	314 <fallbackSort+0x314>
     9cc:	str	w1, [x15, w9, sxtw #2]
     9d0:	mov	w26, w0
     9d4:	str	w0, [x4, x28, lsl #2]
     9d8:	str	w27, [x15, x28, lsl #2]
     9dc:	sxtw	x28, w2
     9e0:	b	4d0 <fallbackSort+0x4d0>
     9e4:	add	w0, w27, w26
     9e8:	asr	w0, w0, #1
     9ec:	ldr	w0, [x19, w0, sxtw #2]
     9f0:	ldr	w12, [x20, x0, lsl #2]
     9f4:	b	314 <fallbackSort+0x314>
     9f8:	add	x12, x16, w12, uxtw
     9fc:	sxtw	x5, w10
     a00:	add	x1, x19, #0x4
     a04:	add	x0, x19, x2
     a08:	sub	x5, x5, x16
     a0c:	add	x2, x1, x12, lsl #2
     a10:	mov	x1, x0
     a14:	ldr	w8, [x1], #4
     a18:	cmp	x2, x1
     a1c:	ldr	w10, [x1, x5, lsl #2]
     a20:	str	w10, [x0]
     a24:	mov	x0, x1
     a28:	str	w8, [x1, x5, lsl #2]
     a2c:	b.ne	a10 <fallbackSort+0xa10>  // b.any
     a30:	b	844 <fallbackSort+0x844>
     a34:	add	x12, x18, w12, uxtw
     a38:	add	x1, x19, #0x4
     a3c:	sub	x18, x0, x18
     a40:	add	x0, x1, x12, lsl #2
     a44:	nop
     a48:	ldr	w2, [x14, x18, lsl #2]
     a4c:	ldr	w1, [x14]
     a50:	str	w2, [x14]
     a54:	str	w1, [x14, x18, lsl #2]
     a58:	add	x14, x14, #0x4
     a5c:	cmp	x0, x14
     a60:	b.ne	a48 <fallbackSort+0xa48>  // b.any
     a64:	b	744 <fallbackSort+0x744>
     a68:	mov	w6, #0x0                   	// #0
     a6c:	b	92c <fallbackSort+0x92c>
     a70:	adrp	x0, 0 <stderr>
     a74:	mov	w2, w12
     a78:	adrp	x1, 0 <fallbackSort>
     a7c:	add	x1, x1, #0x0
     a80:	ldr	x0, [x0]
     a84:	str	w12, [sp, #100]
     a88:	bl	0 <fprintf>
     a8c:	ldr	w12, [sp, #100]
     a90:	add	x4, sp, #0x208
     a94:	add	x15, sp, #0x78
     a98:	b	1ac <fallbackSort+0x1ac>
     a9c:	adrp	x1, 0 <stderr>
     aa0:	adrp	x0, 0 <fallbackSort>
     aa4:	mov	x2, #0x1b                  	// #27
     aa8:	add	x0, x0, #0x0
     aac:	ldr	x3, [x1]
     ab0:	mov	x1, #0x1                   	// #1
     ab4:	bl	0 <fwrite>
     ab8:	b	3c <fallbackSort+0x3c>
     abc:	ldp	x29, x30, [sp]
     ac0:	mov	w0, #0x3ed                 	// #1005
     ac4:	ldp	x19, x20, [sp, #16]
     ac8:	ldp	x21, x22, [sp, #32]
     acc:	ldp	x23, x24, [sp, #48]
     ad0:	ldp	x25, x26, [sp, #64]
     ad4:	ldp	x27, x28, [sp, #80]
     ad8:	add	sp, sp, #0xba0
     adc:	b	0 <BZ2_bz__AssertH__fail>
     ae0:	adrp	x1, 0 <stderr>
     ae4:	adrp	x0, 0 <fallbackSort>
     ae8:	mov	x2, #0x21                  	// #33
     aec:	add	x0, x0, #0x0
     af0:	ldr	x3, [x1]
     af4:	mov	x1, #0x1                   	// #1
     af8:	bl	0 <fwrite>
     afc:	b	410 <fallbackSort+0x410>
     b00:	cmn	w25, #0x3f
     b04:	b.lt	114 <fallbackSort+0x114>  // b.tstop
     b08:	b	f0 <fallbackSort+0xf0>
     b0c:	nop

0000000000000b10 <mainSort>:
     b10:	mov	x12, #0x12e0                	// #4832
     b14:	sub	sp, sp, x12
     b18:	cmp	w5, #0x3
     b1c:	stp	x29, x30, [sp]
     b20:	mov	x29, sp
     b24:	stp	x19, x20, [sp, #16]
     b28:	stp	x21, x22, [sp, #32]
     b2c:	stp	x23, x24, [sp, #48]
     b30:	stp	x25, x26, [sp, #64]
     b34:	mov	x25, x1
     b38:	stp	x27, x28, [sp, #80]
     b3c:	str	x3, [sp, #152]
     b40:	str	x0, [sp, #168]
     b44:	str	x6, [sp, #192]
     b48:	str	w4, [sp, #228]
     b4c:	str	w5, [sp, #240]
     b50:	str	x2, [sp, #264]
     b54:	b.gt	263c <mainSort+0x1b2c>
     b58:	ldr	x19, [sp, #152]
     b5c:	mov	w2, #0x40004               	// #262148
     b60:	mov	w1, #0x0                   	// #0
     b64:	mov	x0, x19
     b68:	bl	0 <memset>
     b6c:	ldr	w2, [sp, #228]
     b70:	ldrb	w0, [x25]
     b74:	sub	w3, w2, #0x1
     b78:	str	w3, [sp, #280]
     b7c:	cmp	w3, #0x2
     b80:	lsl	w0, w0, #8
     b84:	b.le	2694 <mainSort+0x1b84>
     b88:	sub	w5, w2, #0x4
     b8c:	sbfiz	x2, x3, #1, #32
     b90:	ldr	x6, [sp, #264]
     b94:	lsr	w5, w5, #2
     b98:	add	x4, x2, #0x2
     b9c:	add	x3, x25, w3, sxtw
     ba0:	sub	x1, x6, #0xa
     ba4:	sub	x4, x4, w5, uxtw #3
     ba8:	add	x4, x4, x1
     bac:	add	x2, x6, x2
     bb0:	mov	x1, x19
     bb4:	nop
     bb8:	strh	wzr, [x2]
     bbc:	sub	x2, x2, #0x8
     bc0:	sub	x3, x3, #0x4
     bc4:	ldrb	w6, [x3, #4]
     bc8:	lsl	w6, w6, #8
     bcc:	orr	w0, w6, w0, asr #8
     bd0:	sxtw	x7, w0
     bd4:	ldr	w6, [x1, x7, lsl #2]
     bd8:	add	w6, w6, #0x1
     bdc:	str	w6, [x1, x7, lsl #2]
     be0:	strh	wzr, [x2, #6]
     be4:	ldrb	w6, [x3, #3]
     be8:	lsl	w6, w6, #8
     bec:	orr	w0, w6, w0, asr #8
     bf0:	sxtw	x7, w0
     bf4:	ldr	w6, [x1, x7, lsl #2]
     bf8:	add	w6, w6, #0x1
     bfc:	str	w6, [x1, x7, lsl #2]
     c00:	strh	wzr, [x2, #4]
     c04:	ldrb	w6, [x3, #2]
     c08:	lsl	w6, w6, #8
     c0c:	orr	w0, w6, w0, asr #8
     c10:	sxtw	x7, w0
     c14:	ldr	w6, [x1, x7, lsl #2]
     c18:	add	w6, w6, #0x1
     c1c:	str	w6, [x1, x7, lsl #2]
     c20:	strh	wzr, [x2, #2]
     c24:	cmp	x4, x2
     c28:	ldrb	w6, [x3, #1]
     c2c:	lsl	w6, w6, #8
     c30:	orr	w0, w6, w0, asr #8
     c34:	sxtw	x7, w0
     c38:	ldr	w6, [x1, x7, lsl #2]
     c3c:	add	w6, w6, #0x1
     c40:	str	w6, [x1, x7, lsl #2]
     c44:	b.ne	bb8 <mainSort+0xa8>  // b.any
     c48:	ldr	w1, [sp, #228]
     c4c:	sub	w1, w1, #0x5
     c50:	sub	w5, w1, w5, lsl #2
     c54:	tbnz	w5, #31, cd0 <mainSort+0x1c0>
     c58:	ldr	x6, [sp, #264]
     c5c:	sub	w2, w5, #0x1
     c60:	ldr	x4, [sp, #152]
     c64:	strh	wzr, [x6, w5, sxtw #1]
     c68:	ldrb	w1, [x25, w5, sxtw]
     c6c:	lsl	w1, w1, #8
     c70:	orr	w0, w1, w0, asr #8
     c74:	sxtw	x3, w0
     c78:	ldr	w1, [x4, x3, lsl #2]
     c7c:	add	w1, w1, #0x1
     c80:	str	w1, [x4, x3, lsl #2]
     c84:	cbz	w5, cd0 <mainSort+0x1c0>
     c88:	strh	wzr, [x6, w2, sxtw #1]
     c8c:	cmp	w5, #0x2
     c90:	ldrb	w1, [x25, w2, sxtw]
     c94:	lsl	w1, w1, #8
     c98:	orr	w0, w1, w0, asr #8
     c9c:	sxtw	x2, w0
     ca0:	ldr	w1, [x4, x2, lsl #2]
     ca4:	add	w1, w1, #0x1
     ca8:	str	w1, [x4, x2, lsl #2]
     cac:	b.ne	cd0 <mainSort+0x1c0>  // b.any
     cb0:	strh	wzr, [x6]
     cb4:	ldrb	w1, [x25]
     cb8:	lsl	w1, w1, #8
     cbc:	orr	w0, w1, w0, asr #8
     cc0:	sxtw	x0, w0
     cc4:	ldr	w1, [x4, x0, lsl #2]
     cc8:	add	w1, w1, #0x1
     ccc:	str	w1, [x4, x0, lsl #2]
     cd0:	ldrsw	x1, [sp, #228]
     cd4:	add	x4, x25, #0x22
     cd8:	ldr	x2, [sp, #264]
     cdc:	add	x0, x1, #0x22
     ce0:	add	x7, x25, x0
     ce4:	add	x3, x25, x1
     ce8:	lsl	x0, x0, #1
     cec:	add	x1, x1, #0x10
     cf0:	sub	x6, x0, #0x44
     cf4:	add	x0, x2, x0
     cf8:	add	x2, x2, x6
     cfc:	add	x5, x25, #0x10
     d00:	cmp	x4, x2
     d04:	ccmp	x25, x0, #0x2, hi  // hi = pmore
     d08:	cset	w4, cs  // cs = hs, nlast
     d0c:	cmp	x2, x7
     d10:	ccmp	x3, x0, #0x2, cc  // cc = lo, ul, last
     d14:	cset	w7, cs  // cs = hs, nlast
     d18:	cmp	x1, #0x0
     d1c:	ccmp	x5, x3, #0x0, gt
     d20:	and	w1, w4, w7
     d24:	cset	w4, ls  // ls = plast
     d28:	tst	w4, w1
     d2c:	b.eq	2674 <mainSort+0x1b64>  // b.none
     d30:	ldr	w5, [sp, #228]
     d34:	ldr	q1, [x25]
     d38:	add	w1, w5, #0x21
     d3c:	movi	v0.4s, #0x0
     d40:	add	w4, w5, #0x20
     d44:	str	q1, [x25, w5, sxtw]
     d48:	ldr	x5, [sp, #264]
     d4c:	str	q0, [x5, x6]
     d50:	str	q0, [x2, #16]
     d54:	ldr	q1, [x25, #16]
     d58:	str	q1, [x3, #16]
     d5c:	stp	q0, q0, [x2, #32]
     d60:	ldrb	w3, [x25, #32]
     d64:	strb	w3, [x25, w4, sxtw]
     d68:	sturh	wzr, [x0, #-4]
     d6c:	mov	w0, w1
     d70:	ldrb	w2, [x25, #33]
     d74:	strb	w2, [x25, w1, sxtw]
     d78:	strh	wzr, [x5, w0, sxtw #1]
     d7c:	ldr	w0, [sp, #240]
     d80:	cmp	w0, #0x3
     d84:	b.gt	261c <mainSort+0x1b0c>
     d88:	ldr	x1, [sp, #152]
     d8c:	mov	x0, x1
     d90:	add	x3, x1, #0x40, lsl #12
     d94:	add	x3, x3, #0x4
     d98:	ldr	w1, [x0], #4
     d9c:	nop
     da0:	ldr	w2, [x0]
     da4:	add	w1, w1, w2
     da8:	str	w1, [x0], #4
     dac:	cmp	x3, x0
     db0:	b.ne	da0 <mainSort+0x290>  // b.any
     db4:	ldrb	w0, [x25]
     db8:	ldr	w1, [sp, #280]
     dbc:	ubfiz	w0, w0, #8, #8
     dc0:	cmp	w1, #0x2
     dc4:	b.le	269c <mainSort+0x1b8c>
     dc8:	ldr	x2, [sp, #152]
     dcc:	add	x3, x25, w1, sxtw
     dd0:	ldr	x5, [sp, #168]
     dd4:	nop
     dd8:	lsr	w0, w0, #8
     ddc:	ldrb	w4, [x3]
     de0:	sub	w9, w1, #0x1
     de4:	sub	w8, w1, #0x2
     de8:	sub	w7, w1, #0x3
     dec:	sub	x3, x3, #0x4
     df0:	orr	w6, w0, w4, lsl #8
     df4:	lsr	w4, w6, #8
     df8:	ldr	w0, [x2, x6, lsl #2]
     dfc:	sub	w0, w0, #0x1
     e00:	str	w0, [x2, x6, lsl #2]
     e04:	str	w1, [x5, w0, sxtw #2]
     e08:	sub	w1, w1, #0x4
     e0c:	cmp	w1, #0x2
     e10:	ldrb	w0, [x3, #3]
     e14:	orr	w6, w4, w0, lsl #8
     e18:	lsr	w4, w6, #8
     e1c:	ldr	w0, [x2, x6, lsl #2]
     e20:	sub	w0, w0, #0x1
     e24:	str	w0, [x2, x6, lsl #2]
     e28:	str	w9, [x5, w0, sxtw #2]
     e2c:	ldrb	w0, [x3, #2]
     e30:	orr	w6, w4, w0, lsl #8
     e34:	lsr	w4, w6, #8
     e38:	ldr	w0, [x2, x6, lsl #2]
     e3c:	sub	w0, w0, #0x1
     e40:	str	w0, [x2, x6, lsl #2]
     e44:	str	w8, [x5, w0, sxtw #2]
     e48:	ldrb	w0, [x3, #1]
     e4c:	orr	w6, w4, w0, lsl #8
     e50:	mov	x0, x6
     e54:	ldr	w4, [x2, x6, lsl #2]
     e58:	sub	w4, w4, #0x1
     e5c:	str	w4, [x2, x6, lsl #2]
     e60:	str	w7, [x5, w4, sxtw #2]
     e64:	b.gt	dd8 <mainSort+0x2c8>
     e68:	ldr	w2, [sp, #228]
     e6c:	sub	w1, w2, #0x4
     e70:	sub	w2, w2, #0x5
     e74:	neg	w1, w1, lsr #2
     e78:	add	w1, w2, w1, lsl #2
     e7c:	tbnz	w1, #31, eec <mainSort+0x3dc>
     e80:	ldrb	w2, [x25, w1, sxtw]
     e84:	lsr	w0, w0, #8
     e88:	ldr	x5, [sp, #152]
     e8c:	sub	w3, w1, #0x1
     e90:	orr	w4, w0, w2, lsl #8
     e94:	ldr	x6, [sp, #168]
     e98:	ldr	w0, [x5, x4, lsl #2]
     e9c:	sub	w0, w0, #0x1
     ea0:	str	w0, [x5, x4, lsl #2]
     ea4:	str	w1, [x6, w0, sxtw #2]
     ea8:	cbz	w1, eec <mainSort+0x3dc>
     eac:	ldrb	w0, [x25, w3, sxtw]
     eb0:	ubfx	x2, x4, #8, #16
     eb4:	cmp	w1, #0x2
     eb8:	orr	w2, w2, w0, lsl #8
     ebc:	ldr	w0, [x5, x2, lsl #2]
     ec0:	sub	w0, w0, #0x1
     ec4:	str	w0, [x5, x2, lsl #2]
     ec8:	str	w3, [x6, w0, sxtw #2]
     ecc:	b.ne	eec <mainSort+0x3dc>  // b.any
     ed0:	ldrb	w0, [x25]
     ed4:	ubfx	x1, x2, #8, #16
     ed8:	orr	w0, w1, w0, lsl #8
     edc:	ldr	w1, [x5, x0, lsl #2]
     ee0:	sub	w1, w1, #0x1
     ee4:	str	w1, [x5, x0, lsl #2]
     ee8:	str	wzr, [x6, w1, sxtw #2]
     eec:	mov	x2, #0x100                 	// #256
     ef0:	mov	w1, #0x0                   	// #0
     ef4:	add	x0, sp, #0x130
     ef8:	bl	0 <memset>
     efc:	adrp	x2, 0 <fallbackSort>
     f00:	add	x15, sp, #0x6e0
     f04:	movi	v2.4s, #0x4
     f08:	mov	x0, x15
     f0c:	ldr	q0, [x2]
     f10:	add	x1, x15, #0x400
     f14:	str	x15, [sp, #272]
     f18:	str	x1, [sp, #288]
     f1c:	nop
     f20:	mov	v1.16b, v0.16b
     f24:	add	v0.4s, v0.4s, v2.4s
     f28:	str	q1, [x0], #16
     f2c:	cmp	x1, x0
     f30:	b.ne	f20 <mainSort+0x410>  // b.any
     f34:	ldr	x5, [sp, #152]
     f38:	mov	w16, #0x5556                	// #21846
     f3c:	mov	w6, #0x16c                 	// #364
     f40:	movk	w16, #0x5555, lsl #16
     f44:	nop
     f48:	smull	x0, w6, w16
     f4c:	mov	x13, x15
     f50:	mov	x17, #0x0                   	// #0
     f54:	lsr	x0, x0, #32
     f58:	sub	w6, w0, w6, asr #31
     f5c:	neg	w11, w6
     f60:	sxtw	x18, w6
     f64:	mov	x12, x18
     f68:	ldr	w14, [x13, x18, lsl #2]
     f6c:	mov	w4, w12
     f70:	mov	x3, x13
     f74:	sub	x10, x12, x17
     f78:	add	w0, w14, #0x1
     f7c:	lsl	w1, w14, #8
     f80:	lsl	w0, w0, #8
     f84:	ldr	w1, [x5, w1, sxtw #2]
     f88:	ldr	w9, [x5, w0, sxtw #2]
     f8c:	sub	w9, w9, w1
     f90:	b	fa4 <mainSort+0x494>
     f94:	str	w2, [x3, x10, lsl #2]
     f98:	cmp	w4, w6
     f9c:	add	x3, x3, w11, sxtw #2
     fa0:	b.lt	2004 <mainSort+0x14f4>  // b.tstop
     fa4:	ldr	w2, [x3]
     fa8:	mov	w7, w4
     fac:	sub	w4, w4, w6
     fb0:	add	w1, w2, #0x1
     fb4:	lsl	w0, w2, #8
     fb8:	lsl	w1, w1, #8
     fbc:	ldr	w8, [x5, w0, sxtw #2]
     fc0:	ldr	w0, [x5, w1, sxtw #2]
     fc4:	sub	w0, w0, w8
     fc8:	cmp	w0, w9
     fcc:	b.hi	f94 <mainSort+0x484>  // b.pmore
     fd0:	str	w14, [x15, w7, sxtw #2]
     fd4:	add	x12, x12, #0x1
     fd8:	cmp	w12, #0xff
     fdc:	add	x17, x17, #0x1
     fe0:	add	x13, x13, #0x4
     fe4:	b.le	f68 <mainSort+0x458>
     fe8:	cmp	w6, #0x1
     fec:	b.ne	f48 <mainSort+0x438>  // b.any
     ff0:	mov	x26, x25
     ff4:	add	x0, x15, #0x3fc
     ff8:	str	wzr, [sp, #220]
     ffc:	str	x0, [sp, #296]
    1000:	ldr	x0, [sp, #272]
    1004:	mov	x24, x26
    1008:	str	wzr, [sp, #140]
    100c:	ldr	w0, [x0]
    1010:	str	w0, [sp, #208]
    1014:	lsl	w0, w0, #8
    1018:	str	w0, [sp, #216]
    101c:	nop
    1020:	ldr	w0, [sp, #140]
    1024:	ldr	w1, [sp, #208]
    1028:	cmp	w1, w0
    102c:	b.eq	1d38 <mainSort+0x1228>  // b.none
    1030:	ldr	w1, [sp, #216]
    1034:	ldr	x3, [sp, #152]
    1038:	add	w0, w0, w1
    103c:	sxtw	x2, w0
    1040:	str	x2, [sp, #160]
    1044:	add	x1, x3, w0, sxtw #2
    1048:	ldr	w0, [x3, x2, lsl #2]
    104c:	tbnz	w0, #21, 1d2c <mainSort+0x121c>
    1050:	ldr	w1, [x1, #4]
    1054:	and	w2, w0, #0xffdfffff
    1058:	str	w2, [sp, #184]
    105c:	and	w1, w1, #0xffdfffff
    1060:	sub	w28, w1, #0x1
    1064:	cmp	w2, w28
    1068:	b.ge	1d2c <mainSort+0x121c>  // b.tcont
    106c:	ldr	w0, [sp, #240]
    1070:	sub	w20, w28, w2
    1074:	str	w20, [sp, #224]
    1078:	cmp	w0, #0x3
    107c:	b.gt	21d4 <mainSort+0x16c4>
    1080:	adrp	x1, 0 <fallbackSort>
    1084:	add	x1, x1, #0x0
    1088:	mov	w0, #0x2                   	// #2
    108c:	mov	x25, x24
    1090:	mov	w26, w0
    1094:	mov	w24, w28
    1098:	str	x1, [sp, #200]
    109c:	mov	w19, #0x1                   	// #1
    10a0:	ldr	w1, [sp, #184]
    10a4:	str	wzr, [sp, #212]
    10a8:	str	w1, [sp, #560]
    10ac:	str	w28, [sp, #960]
    10b0:	str	w0, [sp, #1360]
    10b4:	cmp	w26, #0xe
    10b8:	ccmp	w20, #0x13, #0x4, le
    10bc:	b.gt	2024 <mainSort+0x1514>
    10c0:	add	w0, w20, #0x1
    10c4:	cmp	w0, #0x1
    10c8:	b.le	1cf8 <mainSort+0x11e8>
    10cc:	cmp	w0, #0x4
    10d0:	b.le	2544 <mainSort+0x1a34>
    10d4:	cmp	w0, #0xd
    10d8:	b.le	254c <mainSort+0x1a3c>
    10dc:	cmp	w0, #0x28
    10e0:	b.le	2554 <mainSort+0x1a44>
    10e4:	cmp	w0, #0x79
    10e8:	b.le	255c <mainSort+0x1a4c>
    10ec:	cmp	w0, #0x16c
    10f0:	b.le	2564 <mainSort+0x1a54>
    10f4:	cmp	w0, #0x445
    10f8:	b.le	2578 <mainSort+0x1a68>
    10fc:	cmp	w0, #0xcd0
    1100:	b.le	2580 <mainSort+0x1a70>
    1104:	mov	w1, #0x2671                	// #9841
    1108:	cmp	w0, w1
    110c:	b.le	2588 <mainSort+0x1a78>
    1110:	mov	w1, #0x7354                	// #29524
    1114:	cmp	w0, w1
    1118:	b.le	2590 <mainSort+0x1a80>
    111c:	mov	w1, #0x59fd                	// #23037
    1120:	movk	w1, #0x1, lsl #16
    1124:	cmp	w0, w1
    1128:	b.le	2598 <mainSort+0x1a88>
    112c:	mov	w1, #0xdf8                 	// #3576
    1130:	movk	w1, #0x4, lsl #16
    1134:	cmp	w0, w1
    1138:	b.le	25a0 <mainSort+0x1a90>
    113c:	mov	w1, #0x29e9                	// #10729
    1140:	movk	w1, #0xc, lsl #16
    1144:	cmp	w0, w1
    1148:	cset	w0, gt
    114c:	add	w0, w0, #0xb
    1150:	ldrsw	x10, [sp, #184]
    1154:	sxtw	x0, w0
    1158:	str	x0, [sp, #144]
    115c:	add	x10, x10, #0x2
    1160:	str	w24, [sp, #188]
    1164:	lsl	x0, x10, #2
    1168:	str	x0, [sp, #176]
    116c:	ldp	x22, x0, [sp, #192]
    1170:	ldr	x1, [sp, #144]
    1174:	ldr	w21, [sp, #188]
    1178:	ldr	w30, [x0, x1, lsl #2]
    117c:	ldp	x1, x0, [sp, #168]
    1180:	add	x5, x1, x0
    1184:	ldr	w0, [sp, #184]
    1188:	add	w20, w30, w0
    118c:	neg	w0, w30
    1190:	add	w19, w20, #0x2
    1194:	add	w24, w20, #0x1
    1198:	add	x2, x1, w20, sxtw #2
    119c:	mov	w28, w20
    11a0:	add	x2, x2, #0x8
    11a4:	sbfiz	x27, x0, #2, #32
    11a8:	sxtw	x0, w30
    11ac:	str	x0, [sp, #96]
    11b0:	cmp	w28, w21
    11b4:	b.gt	1ce4 <mainSort+0x11d4>
    11b8:	ldur	w6, [x2, #-8]
    11bc:	sub	x3, x5, #0x8
    11c0:	mov	w4, w28
    11c4:	add	w0, w6, w26
    11c8:	add	w7, w6, w26
    11cc:	add	w1, w0, #0x9
    11d0:	add	w11, w0, #0x1
    11d4:	add	w10, w0, #0x2
    11d8:	add	w9, w0, #0x3
    11dc:	add	w12, w0, #0x4
    11e0:	add	w14, w0, #0x5
    11e4:	add	w15, w0, #0x6
    11e8:	add	w16, w0, #0x7
    11ec:	add	w23, w0, #0x8
    11f0:	add	x7, x25, x7
    11f4:	str	x1, [sp, #104]
    11f8:	add	w1, w0, #0xa
    11fc:	str	x1, [sp, #112]
    1200:	add	w1, w0, #0xb
    1204:	str	x1, [sp, #120]
    1208:	ldr	w1, [x3]
    120c:	mov	w18, w4
    1210:	ldrb	w8, [x7]
    1214:	sub	w4, w4, w30
    1218:	add	w1, w26, w1
    121c:	mov	x13, x3
    1220:	ldrb	w17, [x25, w1, uxtw]
    1224:	cmp	w17, w8
    1228:	b.ne	1528 <mainSort+0xa18>  // b.any
    122c:	add	w8, w1, #0x1
    1230:	ldrb	w17, [x25, x11]
    1234:	ldrb	w8, [x25, w8, uxtw]
    1238:	cmp	w8, w17
    123c:	b.ne	1528 <mainSort+0xa18>  // b.any
    1240:	add	w8, w1, #0x2
    1244:	ldrb	w17, [x25, x10]
    1248:	ldrb	w8, [x25, w8, uxtw]
    124c:	cmp	w8, w17
    1250:	b.ne	1528 <mainSort+0xa18>  // b.any
    1254:	add	w8, w1, #0x3
    1258:	ldrb	w17, [x25, x9]
    125c:	ldrb	w8, [x25, w8, uxtw]
    1260:	cmp	w8, w17
    1264:	b.ne	1528 <mainSort+0xa18>  // b.any
    1268:	add	w8, w1, #0x4
    126c:	ldrb	w17, [x25, x12]
    1270:	ldrb	w8, [x25, w8, uxtw]
    1274:	cmp	w8, w17
    1278:	b.ne	1528 <mainSort+0xa18>  // b.any
    127c:	add	w8, w1, #0x5
    1280:	ldrb	w17, [x25, x14]
    1284:	ldrb	w8, [x25, w8, uxtw]
    1288:	cmp	w8, w17
    128c:	b.ne	1528 <mainSort+0xa18>  // b.any
    1290:	add	w8, w1, #0x6
    1294:	ldrb	w17, [x25, x15]
    1298:	ldrb	w8, [x25, w8, uxtw]
    129c:	cmp	w8, w17
    12a0:	b.ne	1528 <mainSort+0xa18>  // b.any
    12a4:	add	w8, w1, #0x7
    12a8:	ldrb	w17, [x25, x16]
    12ac:	ldrb	w8, [x25, w8, uxtw]
    12b0:	cmp	w8, w17
    12b4:	b.ne	1528 <mainSort+0xa18>  // b.any
    12b8:	add	w8, w1, #0x8
    12bc:	ldrb	w17, [x25, x23]
    12c0:	ldrb	w8, [x25, w8, uxtw]
    12c4:	cmp	w8, w17
    12c8:	b.ne	1528 <mainSort+0xa18>  // b.any
    12cc:	ldr	x17, [sp, #104]
    12d0:	add	w8, w1, #0x9
    12d4:	ldrb	w17, [x25, x17]
    12d8:	ldrb	w8, [x25, w8, uxtw]
    12dc:	cmp	w8, w17
    12e0:	b.ne	1528 <mainSort+0xa18>  // b.any
    12e4:	ldr	x17, [sp, #112]
    12e8:	add	w8, w1, #0xa
    12ec:	ldrb	w17, [x25, x17]
    12f0:	ldrb	w8, [x25, w8, uxtw]
    12f4:	cmp	w8, w17
    12f8:	b.ne	1528 <mainSort+0xa18>  // b.any
    12fc:	ldr	x17, [sp, #120]
    1300:	add	w8, w1, #0xb
    1304:	ldrb	w17, [x25, x17]
    1308:	ldrb	w8, [x25, w8, uxtw]
    130c:	cmp	w8, w17
    1310:	b.ne	1528 <mainSort+0xa18>  // b.any
    1314:	ldr	w8, [sp, #228]
    1318:	add	w17, w0, #0xc
    131c:	str	x3, [sp, #248]
    1320:	add	w1, w1, #0xc
    1324:	add	w8, w8, #0x8
    1328:	str	w18, [sp, #260]
    132c:	ldr	w18, [sp, #228]
    1330:	ldr	x3, [sp, #264]
    1334:	str	w0, [sp, #256]
    1338:	mov	w0, w8
    133c:	str	x27, [sp, #128]
    1340:	str	w30, [sp, #232]
    1344:	str	w20, [sp, #244]
    1348:	ldrb	w30, [x25, w1, uxtw]
    134c:	mov	w20, w1
    1350:	ldrb	w27, [x25, w17, uxtw]
    1354:	mov	w8, w17
    1358:	cmp	w30, w27
    135c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1360:	ldrh	w20, [x3, x20, lsl #1]
    1364:	ldrh	w8, [x3, x8, lsl #1]
    1368:	cmp	w20, w8
    136c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1370:	add	w20, w1, #0x1
    1374:	add	w8, w17, #0x1
    1378:	add	w30, w1, #0x1
    137c:	add	w27, w17, #0x1
    1380:	ldrb	w20, [x25, w20, uxtw]
    1384:	ldrb	w8, [x25, w8, uxtw]
    1388:	cmp	w20, w8
    138c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1390:	ldrh	w8, [x3, x30, lsl #1]
    1394:	ldrh	w20, [x3, x27, lsl #1]
    1398:	cmp	w8, w20
    139c:	b.ne	1510 <mainSort+0xa00>  // b.any
    13a0:	add	w30, w1, #0x2
    13a4:	add	w8, w17, #0x2
    13a8:	add	w27, w1, #0x2
    13ac:	add	w20, w17, #0x2
    13b0:	ldrb	w30, [x25, w30, uxtw]
    13b4:	ldrb	w8, [x25, w8, uxtw]
    13b8:	cmp	w30, w8
    13bc:	b.ne	1510 <mainSort+0xa00>  // b.any
    13c0:	ldrh	w8, [x3, x27, lsl #1]
    13c4:	ldrh	w20, [x3, x20, lsl #1]
    13c8:	cmp	w8, w20
    13cc:	b.ne	1510 <mainSort+0xa00>  // b.any
    13d0:	add	w30, w1, #0x3
    13d4:	add	w8, w17, #0x3
    13d8:	add	w27, w1, #0x3
    13dc:	add	w20, w17, #0x3
    13e0:	ldrb	w30, [x25, w30, uxtw]
    13e4:	ldrb	w8, [x25, w8, uxtw]
    13e8:	cmp	w30, w8
    13ec:	b.ne	1510 <mainSort+0xa00>  // b.any
    13f0:	ldrh	w8, [x3, x27, lsl #1]
    13f4:	ldrh	w20, [x3, x20, lsl #1]
    13f8:	cmp	w8, w20
    13fc:	b.ne	1510 <mainSort+0xa00>  // b.any
    1400:	add	w20, w1, #0x4
    1404:	add	w8, w17, #0x4
    1408:	add	w30, w1, #0x4
    140c:	add	w27, w17, #0x4
    1410:	ldrb	w20, [x25, w20, uxtw]
    1414:	ldrb	w8, [x25, w8, uxtw]
    1418:	cmp	w20, w8
    141c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1420:	ldrh	w8, [x3, x30, lsl #1]
    1424:	ldrh	w20, [x3, x27, lsl #1]
    1428:	cmp	w8, w20
    142c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1430:	add	w30, w1, #0x5
    1434:	add	w8, w17, #0x5
    1438:	add	w27, w1, #0x5
    143c:	add	w20, w17, #0x5
    1440:	ldrb	w30, [x25, w30, uxtw]
    1444:	ldrb	w8, [x25, w8, uxtw]
    1448:	cmp	w30, w8
    144c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1450:	ldrh	w8, [x3, x27, lsl #1]
    1454:	ldrh	w20, [x3, x20, lsl #1]
    1458:	cmp	w8, w20
    145c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1460:	add	w30, w1, #0x6
    1464:	add	w8, w17, #0x6
    1468:	add	w27, w1, #0x6
    146c:	add	w20, w17, #0x6
    1470:	ldrb	w30, [x25, w30, uxtw]
    1474:	ldrb	w8, [x25, w8, uxtw]
    1478:	cmp	w30, w8
    147c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1480:	ldrh	w8, [x3, x27, lsl #1]
    1484:	ldrh	w20, [x3, x20, lsl #1]
    1488:	cmp	w8, w20
    148c:	b.ne	1510 <mainSort+0xa00>  // b.any
    1490:	add	w30, w1, #0x7
    1494:	add	w8, w17, #0x7
    1498:	add	w27, w1, #0x7
    149c:	add	w20, w17, #0x7
    14a0:	ldrb	w30, [x25, w30, uxtw]
    14a4:	ldrb	w8, [x25, w8, uxtw]
    14a8:	cmp	w30, w8
    14ac:	b.ne	1510 <mainSort+0xa00>  // b.any
    14b0:	ldrh	w8, [x3, x27, lsl #1]
    14b4:	ldrh	w20, [x3, x20, lsl #1]
    14b8:	cmp	w8, w20
    14bc:	b.ne	1510 <mainSort+0xa00>  // b.any
    14c0:	ldr	w8, [x22]
    14c4:	add	w1, w1, #0x8
    14c8:	add	w17, w17, #0x8
    14cc:	cmp	w1, w18
    14d0:	sub	w8, w8, #0x1
    14d4:	sub	w20, w1, w18
    14d8:	str	w8, [x22]
    14dc:	csel	w1, w20, w1, cs  // cs = hs, nlast
    14e0:	sub	w8, w17, w18
    14e4:	cmp	w17, w18
    14e8:	csel	w17, w8, w17, cs  // cs = hs, nlast
    14ec:	subs	w0, w0, #0x8
    14f0:	b.pl	1348 <mainSort+0x838>  // b.nfrst
    14f4:	ldr	x0, [sp, #168]
    14f8:	ldr	w8, [sp, #260]
    14fc:	ldr	w30, [sp, #232]
    1500:	ldr	w20, [sp, #244]
    1504:	add	x8, x0, w8, sxtw #2
    1508:	ldr	x27, [sp, #128]
    150c:	b	1550 <mainSort+0xa40>
    1510:	ldr	w30, [sp, #232]
    1514:	ldr	w20, [sp, #244]
    1518:	ldr	w0, [sp, #256]
    151c:	ldr	x27, [sp, #128]
    1520:	ldr	x3, [sp, #248]
    1524:	nop
    1528:	cset	w1, hi  // hi = pmore
    152c:	add	x8, x3, w30, sxtw #2
    1530:	cbz	w1, 1550 <mainSort+0xa40>
    1534:	ldr	x8, [sp, #96]
    1538:	cmp	w20, w4
    153c:	ldr	w1, [x3]
    1540:	str	w1, [x3, x8, lsl #2]
    1544:	add	x3, x3, x27
    1548:	b.le	1208 <mainSort+0x6f8>
    154c:	mov	x8, x13
    1550:	str	w6, [x8]
    1554:	cmp	w24, w21
    1558:	mov	w6, w24
    155c:	b.gt	1ce4 <mainSort+0x11d4>
    1560:	mov	x3, x2
    1564:	sub	x4, x5, #0x4
    1568:	ldr	w8, [x3, #-4]!
    156c:	add	w0, w8, w26
    1570:	add	w9, w8, w26
    1574:	add	w1, w0, #0x8
    1578:	str	x1, [sp, #104]
    157c:	add	w1, w0, #0x9
    1580:	add	w12, w0, #0x1
    1584:	add	w11, w0, #0x2
    1588:	add	w10, w0, #0x3
    158c:	add	w13, w0, #0x4
    1590:	add	w15, w0, #0x5
    1594:	add	w16, w0, #0x6
    1598:	add	w23, w0, #0x7
    159c:	add	x9, x25, x9
    15a0:	str	x1, [sp, #112]
    15a4:	add	w1, w0, #0xa
    15a8:	str	x1, [sp, #120]
    15ac:	add	w1, w0, #0xb
    15b0:	str	x1, [sp, #128]
    15b4:	nop
    15b8:	ldr	w1, [x4]
    15bc:	mov	w18, w6
    15c0:	ldrb	w7, [x9]
    15c4:	sub	w6, w6, w30
    15c8:	add	w1, w26, w1
    15cc:	mov	x14, x4
    15d0:	ldrb	w17, [x25, w1, uxtw]
    15d4:	cmp	w17, w7
    15d8:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    15dc:	add	w7, w1, #0x1
    15e0:	ldrb	w17, [x25, x12]
    15e4:	ldrb	w7, [x25, w7, uxtw]
    15e8:	cmp	w7, w17
    15ec:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    15f0:	add	w7, w1, #0x2
    15f4:	ldrb	w17, [x25, x11]
    15f8:	ldrb	w7, [x25, w7, uxtw]
    15fc:	cmp	w7, w17
    1600:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1604:	add	w7, w1, #0x3
    1608:	ldrb	w17, [x25, x10]
    160c:	ldrb	w7, [x25, w7, uxtw]
    1610:	cmp	w7, w17
    1614:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1618:	add	w7, w1, #0x4
    161c:	ldrb	w17, [x25, x13]
    1620:	ldrb	w7, [x25, w7, uxtw]
    1624:	cmp	w7, w17
    1628:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    162c:	add	w7, w1, #0x5
    1630:	ldrb	w17, [x25, x15]
    1634:	ldrb	w7, [x25, w7, uxtw]
    1638:	cmp	w7, w17
    163c:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1640:	add	w7, w1, #0x6
    1644:	ldrb	w17, [x25, x16]
    1648:	ldrb	w7, [x25, w7, uxtw]
    164c:	cmp	w7, w17
    1650:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1654:	add	w7, w1, #0x7
    1658:	ldrb	w17, [x25, x23]
    165c:	ldrb	w7, [x25, w7, uxtw]
    1660:	cmp	w7, w17
    1664:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1668:	ldr	x17, [sp, #104]
    166c:	add	w7, w1, #0x8
    1670:	ldrb	w17, [x25, x17]
    1674:	ldrb	w7, [x25, w7, uxtw]
    1678:	cmp	w7, w17
    167c:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1680:	ldr	x17, [sp, #112]
    1684:	add	w7, w1, #0x9
    1688:	ldrb	w17, [x25, x17]
    168c:	ldrb	w7, [x25, w7, uxtw]
    1690:	cmp	w7, w17
    1694:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    1698:	ldr	x17, [sp, #120]
    169c:	add	w7, w1, #0xa
    16a0:	ldrb	w17, [x25, x17]
    16a4:	ldrb	w7, [x25, w7, uxtw]
    16a8:	cmp	w7, w17
    16ac:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    16b0:	ldr	x17, [sp, #128]
    16b4:	add	w7, w1, #0xb
    16b8:	ldrb	w17, [x25, x17]
    16bc:	ldrb	w7, [x25, w7, uxtw]
    16c0:	cmp	w7, w17
    16c4:	b.ne	18d0 <mainSort+0xdc0>  // b.any
    16c8:	ldr	w7, [sp, #228]
    16cc:	add	w17, w0, #0xc
    16d0:	stp	w30, w20, [sp, #244]
    16d4:	add	w1, w1, #0xc
    16d8:	add	w7, w7, #0x8
    16dc:	ldr	w20, [sp, #228]
    16e0:	str	w0, [sp, #260]
    16e4:	mov	w0, w7
    16e8:	ldr	x7, [sp, #264]
    16ec:	str	x27, [sp, #232]
    16f0:	str	w28, [sp, #256]
    16f4:	str	w18, [sp, #284]
    16f8:	ldrb	w30, [x25, w1, uxtw]
    16fc:	mov	w27, w1
    1700:	ldrb	w28, [x25, w17, uxtw]
    1704:	mov	w18, w17
    1708:	cmp	w30, w28
    170c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1710:	ldrh	w27, [x7, x27, lsl #1]
    1714:	ldrh	w18, [x7, x18, lsl #1]
    1718:	cmp	w27, w18
    171c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1720:	add	w30, w1, #0x1
    1724:	add	w18, w17, #0x1
    1728:	add	w28, w1, #0x1
    172c:	add	w27, w17, #0x1
    1730:	ldrb	w30, [x25, w30, uxtw]
    1734:	ldrb	w18, [x25, w18, uxtw]
    1738:	cmp	w30, w18
    173c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1740:	ldrh	w18, [x7, x28, lsl #1]
    1744:	ldrh	w27, [x7, x27, lsl #1]
    1748:	cmp	w18, w27
    174c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1750:	add	w30, w1, #0x2
    1754:	add	w18, w17, #0x2
    1758:	add	w28, w1, #0x2
    175c:	add	w27, w17, #0x2
    1760:	ldrb	w30, [x25, w30, uxtw]
    1764:	ldrb	w18, [x25, w18, uxtw]
    1768:	cmp	w30, w18
    176c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1770:	ldrh	w18, [x7, x28, lsl #1]
    1774:	ldrh	w27, [x7, x27, lsl #1]
    1778:	cmp	w18, w27
    177c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1780:	add	w30, w1, #0x3
    1784:	add	w18, w17, #0x3
    1788:	add	w28, w1, #0x3
    178c:	add	w27, w17, #0x3
    1790:	ldrb	w30, [x25, w30, uxtw]
    1794:	ldrb	w18, [x25, w18, uxtw]
    1798:	cmp	w30, w18
    179c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    17a0:	ldrh	w18, [x7, x28, lsl #1]
    17a4:	ldrh	w27, [x7, x27, lsl #1]
    17a8:	cmp	w18, w27
    17ac:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    17b0:	add	w30, w1, #0x4
    17b4:	add	w18, w17, #0x4
    17b8:	add	w28, w1, #0x4
    17bc:	add	w27, w17, #0x4
    17c0:	ldrb	w30, [x25, w30, uxtw]
    17c4:	ldrb	w18, [x25, w18, uxtw]
    17c8:	cmp	w30, w18
    17cc:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    17d0:	ldrh	w18, [x7, x28, lsl #1]
    17d4:	ldrh	w27, [x7, x27, lsl #1]
    17d8:	cmp	w18, w27
    17dc:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    17e0:	add	w30, w1, #0x5
    17e4:	add	w18, w17, #0x5
    17e8:	add	w28, w1, #0x5
    17ec:	add	w27, w17, #0x5
    17f0:	ldrb	w30, [x25, w30, uxtw]
    17f4:	ldrb	w18, [x25, w18, uxtw]
    17f8:	cmp	w30, w18
    17fc:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1800:	ldrh	w18, [x7, x28, lsl #1]
    1804:	ldrh	w27, [x7, x27, lsl #1]
    1808:	cmp	w18, w27
    180c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1810:	add	w30, w1, #0x6
    1814:	add	w18, w17, #0x6
    1818:	add	w28, w1, #0x6
    181c:	add	w27, w17, #0x6
    1820:	ldrb	w30, [x25, w30, uxtw]
    1824:	ldrb	w18, [x25, w18, uxtw]
    1828:	cmp	w30, w18
    182c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1830:	ldrh	w18, [x7, x28, lsl #1]
    1834:	ldrh	w27, [x7, x27, lsl #1]
    1838:	cmp	w18, w27
    183c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1840:	add	w30, w1, #0x7
    1844:	add	w18, w17, #0x7
    1848:	add	w28, w1, #0x7
    184c:	add	w27, w17, #0x7
    1850:	ldrb	w30, [x25, w30, uxtw]
    1854:	ldrb	w18, [x25, w18, uxtw]
    1858:	cmp	w30, w18
    185c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1860:	ldrh	w18, [x7, x28, lsl #1]
    1864:	ldrh	w27, [x7, x27, lsl #1]
    1868:	cmp	w18, w27
    186c:	b.ne	18c0 <mainSort+0xdb0>  // b.any
    1870:	ldr	w18, [x22]
    1874:	add	w1, w1, #0x8
    1878:	add	w17, w17, #0x8
    187c:	cmp	w1, w20
    1880:	sub	w18, w18, #0x1
    1884:	sub	w27, w1, w20
    1888:	str	w18, [x22]
    188c:	csel	w1, w27, w1, cs  // cs = hs, nlast
    1890:	sub	w18, w17, w20
    1894:	cmp	w17, w20
    1898:	csel	w17, w18, w17, cs  // cs = hs, nlast
    189c:	subs	w0, w0, #0x8
    18a0:	b.pl	16f8 <mainSort+0xbe8>  // b.nfrst
    18a4:	ldr	x0, [sp, #168]
    18a8:	ldr	w7, [sp, #284]
    18ac:	ldp	w30, w20, [sp, #244]
    18b0:	ldr	w28, [sp, #256]
    18b4:	add	x7, x0, w7, sxtw #2
    18b8:	ldr	x27, [sp, #232]
    18bc:	b	18f8 <mainSort+0xde8>
    18c0:	ldp	w30, w20, [sp, #244]
    18c4:	ldr	w28, [sp, #256]
    18c8:	ldr	w0, [sp, #260]
    18cc:	ldr	x27, [sp, #232]
    18d0:	cset	w1, hi  // hi = pmore
    18d4:	mov	x7, x3
    18d8:	cbz	w1, 18f8 <mainSort+0xde8>
    18dc:	ldr	w1, [x4]
    18e0:	cmp	w20, w6
    18e4:	str	w1, [x3]
    18e8:	add	x4, x4, x27
    18ec:	add	x3, x7, x27
    18f0:	b.le	15b8 <mainSort+0xaa8>
    18f4:	mov	x7, x14
    18f8:	str	w8, [x7]
    18fc:	cmp	w19, w21
    1900:	mov	w4, w19
    1904:	b.gt	1ce4 <mainSort+0x11d4>
    1908:	ldr	w7, [x2]
    190c:	mov	x9, x2
    1910:	mov	x3, x5
    1914:	add	w0, w7, w26
    1918:	add	w8, w7, w26
    191c:	add	w1, w0, #0x8
    1920:	str	x1, [sp, #104]
    1924:	add	w1, w0, #0x9
    1928:	add	w12, w0, #0x1
    192c:	add	w11, w0, #0x2
    1930:	add	w10, w0, #0x3
    1934:	add	w13, w0, #0x4
    1938:	add	w15, w0, #0x5
    193c:	add	w16, w0, #0x6
    1940:	add	w23, w0, #0x7
    1944:	add	x8, x25, x8
    1948:	str	x1, [sp, #112]
    194c:	add	w1, w0, #0xa
    1950:	str	x1, [sp, #120]
    1954:	add	w1, w0, #0xb
    1958:	str	x1, [sp, #128]
    195c:	nop
    1960:	ldr	w1, [x3]
    1964:	mov	w18, w4
    1968:	ldrb	w6, [x8]
    196c:	sub	w4, w4, w30
    1970:	add	w1, w26, w1
    1974:	mov	x14, x3
    1978:	ldrb	w17, [x25, w1, uxtw]
    197c:	cmp	w17, w6
    1980:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1984:	add	w6, w1, #0x1
    1988:	ldrb	w17, [x25, x12]
    198c:	ldrb	w6, [x25, w6, uxtw]
    1990:	cmp	w6, w17
    1994:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1998:	add	w6, w1, #0x2
    199c:	ldrb	w17, [x25, x11]
    19a0:	ldrb	w6, [x25, w6, uxtw]
    19a4:	cmp	w6, w17
    19a8:	b.ne	1c78 <mainSort+0x1168>  // b.any
    19ac:	add	w6, w1, #0x3
    19b0:	ldrb	w17, [x25, x10]
    19b4:	ldrb	w6, [x25, w6, uxtw]
    19b8:	cmp	w6, w17
    19bc:	b.ne	1c78 <mainSort+0x1168>  // b.any
    19c0:	add	w6, w1, #0x4
    19c4:	ldrb	w17, [x25, x13]
    19c8:	ldrb	w6, [x25, w6, uxtw]
    19cc:	cmp	w6, w17
    19d0:	b.ne	1c78 <mainSort+0x1168>  // b.any
    19d4:	add	w6, w1, #0x5
    19d8:	ldrb	w17, [x25, x15]
    19dc:	ldrb	w6, [x25, w6, uxtw]
    19e0:	cmp	w6, w17
    19e4:	b.ne	1c78 <mainSort+0x1168>  // b.any
    19e8:	add	w6, w1, #0x6
    19ec:	ldrb	w17, [x25, x16]
    19f0:	ldrb	w6, [x25, w6, uxtw]
    19f4:	cmp	w6, w17
    19f8:	b.ne	1c78 <mainSort+0x1168>  // b.any
    19fc:	add	w6, w1, #0x7
    1a00:	ldrb	w17, [x25, x23]
    1a04:	ldrb	w6, [x25, w6, uxtw]
    1a08:	cmp	w6, w17
    1a0c:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1a10:	ldr	x17, [sp, #104]
    1a14:	add	w6, w1, #0x8
    1a18:	ldrb	w17, [x25, x17]
    1a1c:	ldrb	w6, [x25, w6, uxtw]
    1a20:	cmp	w6, w17
    1a24:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1a28:	ldr	x17, [sp, #112]
    1a2c:	add	w6, w1, #0x9
    1a30:	ldrb	w17, [x25, x17]
    1a34:	ldrb	w6, [x25, w6, uxtw]
    1a38:	cmp	w6, w17
    1a3c:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1a40:	ldr	x17, [sp, #120]
    1a44:	add	w6, w1, #0xa
    1a48:	ldrb	w17, [x25, x17]
    1a4c:	ldrb	w6, [x25, w6, uxtw]
    1a50:	cmp	w6, w17
    1a54:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1a58:	ldr	x17, [sp, #128]
    1a5c:	add	w6, w1, #0xb
    1a60:	ldrb	w17, [x25, x17]
    1a64:	ldrb	w6, [x25, w6, uxtw]
    1a68:	cmp	w6, w17
    1a6c:	b.ne	1c78 <mainSort+0x1168>  // b.any
    1a70:	ldr	w6, [sp, #228]
    1a74:	add	w17, w0, #0xc
    1a78:	stp	w30, w20, [sp, #244]
    1a7c:	add	w1, w1, #0xc
    1a80:	add	w6, w6, #0x8
    1a84:	ldr	w20, [sp, #228]
    1a88:	str	w0, [sp, #260]
    1a8c:	mov	w0, w6
    1a90:	ldr	x6, [sp, #264]
    1a94:	str	x27, [sp, #232]
    1a98:	str	w28, [sp, #256]
    1a9c:	str	w18, [sp, #284]
    1aa0:	ldrb	w30, [x25, w1, uxtw]
    1aa4:	mov	w27, w1
    1aa8:	ldrb	w28, [x25, w17, uxtw]
    1aac:	mov	w18, w17
    1ab0:	cmp	w30, w28
    1ab4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1ab8:	ldrh	w27, [x6, x27, lsl #1]
    1abc:	ldrh	w18, [x6, x18, lsl #1]
    1ac0:	cmp	w27, w18
    1ac4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1ac8:	add	w30, w1, #0x1
    1acc:	add	w18, w17, #0x1
    1ad0:	add	w28, w1, #0x1
    1ad4:	add	w27, w17, #0x1
    1ad8:	ldrb	w30, [x25, w30, uxtw]
    1adc:	ldrb	w18, [x25, w18, uxtw]
    1ae0:	cmp	w30, w18
    1ae4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1ae8:	ldrh	w18, [x6, x28, lsl #1]
    1aec:	ldrh	w27, [x6, x27, lsl #1]
    1af0:	cmp	w18, w27
    1af4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1af8:	add	w30, w1, #0x2
    1afc:	add	w18, w17, #0x2
    1b00:	add	w28, w1, #0x2
    1b04:	add	w27, w17, #0x2
    1b08:	ldrb	w30, [x25, w30, uxtw]
    1b0c:	ldrb	w18, [x25, w18, uxtw]
    1b10:	cmp	w30, w18
    1b14:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b18:	ldrh	w18, [x6, x28, lsl #1]
    1b1c:	ldrh	w27, [x6, x27, lsl #1]
    1b20:	cmp	w18, w27
    1b24:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b28:	add	w30, w1, #0x3
    1b2c:	add	w18, w17, #0x3
    1b30:	add	w28, w1, #0x3
    1b34:	add	w27, w17, #0x3
    1b38:	ldrb	w30, [x25, w30, uxtw]
    1b3c:	ldrb	w18, [x25, w18, uxtw]
    1b40:	cmp	w30, w18
    1b44:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b48:	ldrh	w18, [x6, x28, lsl #1]
    1b4c:	ldrh	w27, [x6, x27, lsl #1]
    1b50:	cmp	w18, w27
    1b54:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b58:	add	w30, w1, #0x4
    1b5c:	add	w18, w17, #0x4
    1b60:	add	w28, w1, #0x4
    1b64:	add	w27, w17, #0x4
    1b68:	ldrb	w30, [x25, w30, uxtw]
    1b6c:	ldrb	w18, [x25, w18, uxtw]
    1b70:	cmp	w30, w18
    1b74:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b78:	ldrh	w18, [x6, x28, lsl #1]
    1b7c:	ldrh	w27, [x6, x27, lsl #1]
    1b80:	cmp	w18, w27
    1b84:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1b88:	add	w30, w1, #0x5
    1b8c:	add	w18, w17, #0x5
    1b90:	add	w28, w1, #0x5
    1b94:	add	w27, w17, #0x5
    1b98:	ldrb	w30, [x25, w30, uxtw]
    1b9c:	ldrb	w18, [x25, w18, uxtw]
    1ba0:	cmp	w30, w18
    1ba4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1ba8:	ldrh	w18, [x6, x28, lsl #1]
    1bac:	ldrh	w27, [x6, x27, lsl #1]
    1bb0:	cmp	w18, w27
    1bb4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1bb8:	add	w27, w1, #0x6
    1bbc:	add	w18, w17, #0x6
    1bc0:	add	w30, w1, #0x6
    1bc4:	add	w28, w17, #0x6
    1bc8:	ldrb	w27, [x25, w27, uxtw]
    1bcc:	ldrb	w18, [x25, w18, uxtw]
    1bd0:	cmp	w27, w18
    1bd4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1bd8:	ldrh	w18, [x6, x30, lsl #1]
    1bdc:	ldrh	w27, [x6, x28, lsl #1]
    1be0:	cmp	w18, w27
    1be4:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1be8:	add	w30, w1, #0x7
    1bec:	add	w18, w17, #0x7
    1bf0:	add	w28, w1, #0x7
    1bf4:	add	w27, w17, #0x7
    1bf8:	ldrb	w30, [x25, w30, uxtw]
    1bfc:	ldrb	w18, [x25, w18, uxtw]
    1c00:	cmp	w30, w18
    1c04:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1c08:	ldrh	w18, [x6, x28, lsl #1]
    1c0c:	ldrh	w27, [x6, x27, lsl #1]
    1c10:	cmp	w18, w27
    1c14:	b.ne	1c68 <mainSort+0x1158>  // b.any
    1c18:	ldr	w18, [x22]
    1c1c:	add	w1, w1, #0x8
    1c20:	add	w17, w17, #0x8
    1c24:	cmp	w1, w20
    1c28:	sub	w18, w18, #0x1
    1c2c:	sub	w27, w1, w20
    1c30:	str	w18, [x22]
    1c34:	csel	w1, w27, w1, cs  // cs = hs, nlast
    1c38:	sub	w18, w17, w20
    1c3c:	cmp	w17, w20
    1c40:	csel	w17, w18, w17, cs  // cs = hs, nlast
    1c44:	subs	w0, w0, #0x8
    1c48:	b.pl	1aa0 <mainSort+0xf90>  // b.nfrst
    1c4c:	ldr	x0, [sp, #168]
    1c50:	ldr	w6, [sp, #284]
    1c54:	ldp	w30, w20, [sp, #244]
    1c58:	ldr	w28, [sp, #256]
    1c5c:	add	x6, x0, w6, sxtw #2
    1c60:	ldr	x27, [sp, #232]
    1c64:	b	1ca0 <mainSort+0x1190>
    1c68:	ldp	w30, w20, [sp, #244]
    1c6c:	ldr	w28, [sp, #256]
    1c70:	ldr	w0, [sp, #260]
    1c74:	ldr	x27, [sp, #232]
    1c78:	cset	w1, hi  // hi = pmore
    1c7c:	mov	x6, x9
    1c80:	cbz	w1, 1ca0 <mainSort+0x1190>
    1c84:	ldr	w1, [x3]
    1c88:	cmp	w20, w4
    1c8c:	str	w1, [x9]
    1c90:	add	x3, x3, x27
    1c94:	add	x9, x6, x27
    1c98:	b.le	1960 <mainSort+0xe50>
    1c9c:	mov	x6, x14
    1ca0:	str	w7, [x6]
    1ca4:	add	w28, w28, #0x3
    1ca8:	add	w19, w19, #0x3
    1cac:	add	x5, x5, #0xc
    1cb0:	ldr	w0, [x22]
    1cb4:	add	x2, x2, #0xc
    1cb8:	add	w24, w24, #0x3
    1cbc:	tbz	w0, #31, 11b0 <mainSort+0x6a0>
    1cc0:	mov	x12, #0x12e0                	// #4832
    1cc4:	ldp	x29, x30, [sp]
    1cc8:	ldp	x19, x20, [sp, #16]
    1ccc:	ldp	x21, x22, [sp, #32]
    1cd0:	ldp	x23, x24, [sp, #48]
    1cd4:	ldp	x25, x26, [sp, #64]
    1cd8:	ldp	x27, x28, [sp, #80]
    1cdc:	add	sp, sp, x12
    1ce0:	ret
    1ce4:	ldr	x0, [sp, #144]
    1ce8:	sub	x0, x0, #0x1
    1cec:	str	x0, [sp, #144]
    1cf0:	cmn	w0, #0x1
    1cf4:	b.ne	116c <mainSort+0x65c>  // b.any
    1cf8:	ldr	x0, [sp, #192]
    1cfc:	ldr	w0, [x0]
    1d00:	tbnz	w0, #31, 1cc0 <mainSort+0x11b0>
    1d04:	ldr	w0, [sp, #212]
    1d08:	cbnz	w0, 26a4 <mainSort+0x1b94>
    1d0c:	ldr	w0, [sp, #224]
    1d10:	mov	x24, x25
    1d14:	add	w1, w0, #0x1
    1d18:	ldp	x0, x2, [sp, #152]
    1d1c:	ldr	w0, [x0, x2, lsl #2]
    1d20:	ldr	w2, [sp, #220]
    1d24:	add	w1, w2, w1
    1d28:	str	w1, [sp, #220]
    1d2c:	ldp	x1, x2, [sp, #152]
    1d30:	orr	w0, w0, #0x200000
    1d34:	str	w0, [x1, x2, lsl #2]
    1d38:	ldr	w0, [sp, #140]
    1d3c:	add	w0, w0, #0x1
    1d40:	str	w0, [sp, #140]
    1d44:	cmp	w0, #0x100
    1d48:	b.ne	1020 <mainSort+0x510>  // b.any
    1d4c:	ldr	w1, [sp, #208]
    1d50:	add	x0, sp, #0x130
    1d54:	mov	x26, x24
    1d58:	sxtw	x21, w1
    1d5c:	ldrb	w0, [x0, w1, sxtw]
    1d60:	cbnz	w0, 265c <mainSort+0x1b4c>
    1d64:	ldr	x0, [sp, #152]
    1d68:	lsl	x20, x21, #2
    1d6c:	add	x7, sp, #0xae0
    1d70:	add	x6, sp, #0xee0
    1d74:	add	x19, x0, x20
    1d78:	mov	x2, #0x1                   	// #1
    1d7c:	mov	x3, x19
    1d80:	ldp	w4, w0, [x3]
    1d84:	lsl	x1, x2, #2
    1d88:	add	x5, x6, x1
    1d8c:	add	x1, x7, x1
    1d90:	and	w0, w0, #0xffdfffff
    1d94:	and	w4, w4, #0xffdfffff
    1d98:	sub	w0, w0, #0x1
    1d9c:	add	x2, x2, #0x1
    1da0:	stur	w4, [x1, #-4]
    1da4:	cmp	x2, #0x101
    1da8:	stur	w0, [x5, #-4]
    1dac:	add	x3, x3, #0x400
    1db0:	b.ne	1d80 <mainSort+0x1270>  // b.any
    1db4:	ldrsw	x22, [sp, #216]
    1db8:	lsl	x4, x21, #2
    1dbc:	ldr	x0, [sp, #152]
    1dc0:	ldr	w3, [x7, x21, lsl #2]
    1dc4:	ldr	w1, [x0, x22, lsl #2]
    1dc8:	and	w1, w1, #0xffdfffff
    1dcc:	cmp	w1, w3
    1dd0:	b.ge	1e24 <mainSort+0x1314>  // b.tcont
    1dd4:	ldr	x5, [sp, #168]
    1dd8:	sxtw	x1, w1
    1ddc:	nop
    1de0:	ldr	w0, [x5, x1, lsl #2]
    1de4:	add	x8, sp, #0x130
    1de8:	ldr	w2, [sp, #228]
    1dec:	subs	w0, w0, #0x1
    1df0:	add	w2, w0, w2
    1df4:	csel	w0, w2, w0, mi  // mi = first
    1df8:	ldrb	w3, [x26, w0, sxtw]
    1dfc:	ldrb	w2, [x8, w3, sxtw]
    1e00:	cbnz	w2, 21fc <mainSort+0x16ec>
    1e04:	ldr	w2, [x7, x3, lsl #2]
    1e08:	add	x1, x1, #0x1
    1e0c:	add	w8, w2, #0x1
    1e10:	str	w8, [x7, x3, lsl #2]
    1e14:	ldr	w3, [x7, x4]
    1e18:	str	w0, [x5, w2, sxtw #2]
    1e1c:	cmp	w3, w1
    1e20:	b.gt	1de0 <mainSort+0x12d0>
    1e24:	ldr	w0, [sp, #208]
    1e28:	lsl	x5, x21, #2
    1e2c:	ldr	x1, [sp, #152]
    1e30:	add	w23, w0, #0x1
    1e34:	ldr	w0, [x6, x21, lsl #2]
    1e38:	lsl	w23, w23, #8
    1e3c:	sxtw	x23, w23
    1e40:	ldr	w1, [x1, x23, lsl #2]
    1e44:	and	w1, w1, #0xffdfffff
    1e48:	sub	w1, w1, #0x1
    1e4c:	cmp	w1, w0
    1e50:	b.le	1ea4 <mainSort+0x1394>
    1e54:	ldr	x7, [sp, #168]
    1e58:	sxtw	x1, w1
    1e5c:	nop
    1e60:	ldr	w0, [x7, x1, lsl #2]
    1e64:	add	x8, sp, #0x130
    1e68:	ldr	w2, [sp, #228]
    1e6c:	subs	w0, w0, #0x1
    1e70:	add	w2, w0, w2
    1e74:	csel	w0, w2, w0, mi  // mi = first
    1e78:	ldrb	w4, [x26, w0, sxtw]
    1e7c:	ldrb	w2, [x8, w4, sxtw]
    1e80:	cbnz	w2, 2210 <mainSort+0x1700>
    1e84:	ldr	w2, [x6, x4, lsl #2]
    1e88:	sub	x1, x1, #0x1
    1e8c:	sub	w8, w2, #0x1
    1e90:	str	w8, [x6, x4, lsl #2]
    1e94:	str	w0, [x7, w2, sxtw #2]
    1e98:	ldr	w0, [x6, x5]
    1e9c:	cmp	w0, w1
    1ea0:	b.lt	1e60 <mainSort+0x1350>  // b.tstop
    1ea4:	sub	w1, w3, #0x1
    1ea8:	cmp	w1, w0
    1eac:	b.eq	1ec8 <mainSort+0x13b8>  // b.none
    1eb0:	ldr	w1, [sp, #280]
    1eb4:	cmp	w3, #0x0
    1eb8:	ccmp	w1, w0, #0x0, eq  // eq = none
    1ebc:	b.eq	1ec8 <mainSort+0x13b8>  // b.none
    1ec0:	mov	w0, #0x3ef                 	// #1007
    1ec4:	bl	0 <BZ2_bz__AssertH__fail>
    1ec8:	ldr	x0, [sp, #152]
    1ecc:	add	x1, x0, #0x40, lsl #12
    1ed0:	add	x1, x1, x20
    1ed4:	nop
    1ed8:	ldr	w0, [x19]
    1edc:	orr	w0, w0, #0x200000
    1ee0:	str	w0, [x19]
    1ee4:	add	x19, x19, #0x400
    1ee8:	cmp	x1, x19
    1eec:	b.ne	1ed8 <mainSort+0x13c8>  // b.any
    1ef0:	ldr	w1, [sp, #208]
    1ef4:	add	x2, sp, #0x130
    1ef8:	mov	w0, #0x1                   	// #1
    1efc:	strb	w0, [x2, w1, sxtw]
    1f00:	ldr	x1, [sp, #272]
    1f04:	ldr	x0, [sp, #296]
    1f08:	cmp	x0, x1
    1f0c:	b.eq	1fb8 <mainSort+0x14a8>  // b.none
    1f10:	ldr	x0, [sp, #152]
    1f14:	mov	w3, #0xfffe                	// #65534
    1f18:	ldr	w4, [x0, x22, lsl #2]
    1f1c:	ldr	w0, [x0, x23, lsl #2]
    1f20:	and	w4, w4, #0xffdfffff
    1f24:	and	w0, w0, #0xffdfffff
    1f28:	sub	w0, w0, w4
    1f2c:	sub	w6, w0, #0x1
    1f30:	cmp	w0, w3
    1f34:	b.le	2668 <mainSort+0x1b58>
    1f38:	mov	w1, #0x0                   	// #0
    1f3c:	add	w1, w1, #0x1
    1f40:	asr	w2, w0, w1
    1f44:	cmp	w2, w3
    1f48:	b.gt	1f3c <mainSort+0x142c>
    1f4c:	ldr	x0, [sp, #168]
    1f50:	ldr	w8, [sp, #228]
    1f54:	ldr	x5, [sp, #264]
    1f58:	add	x4, x0, w4, sxtw #2
    1f5c:	sxtw	x0, w6
    1f60:	ldr	w3, [x4, x0, lsl #2]
    1f64:	asr	w2, w0, w1
    1f68:	and	w2, w2, #0xffff
    1f6c:	sub	x0, x0, #0x1
    1f70:	add	w7, w8, w3
    1f74:	cmp	w3, #0x21
    1f78:	strh	w2, [x5, w3, sxtw #1]
    1f7c:	b.gt	1f84 <mainSort+0x1474>
    1f80:	strh	w2, [x5, w7, sxtw #1]
    1f84:	tbz	w0, #31, 1f60 <mainSort+0x1450>
    1f88:	asr	w1, w6, w1
    1f8c:	mov	w0, #0xffff                	// #65535
    1f90:	cmp	w1, w0
    1f94:	b.le	1fa0 <mainSort+0x1490>
    1f98:	mov	w0, #0x3ea                 	// #1002
    1f9c:	bl	0 <BZ2_bz__AssertH__fail>
    1fa0:	ldr	x0, [sp, #272]
    1fa4:	ldr	x1, [sp, #288]
    1fa8:	add	x0, x0, #0x4
    1fac:	str	x0, [sp, #272]
    1fb0:	cmp	x1, x0
    1fb4:	b.ne	1000 <mainSort+0x4f0>  // b.any
    1fb8:	ldr	w0, [sp, #240]
    1fbc:	cmp	w0, #0x3
    1fc0:	b.le	1cc0 <mainSort+0x11b0>
    1fc4:	adrp	x0, 0 <stderr>
    1fc8:	ldr	w3, [sp, #220]
    1fcc:	ldp	x29, x30, [sp]
    1fd0:	mov	x12, #0x12e0                	// #4832
    1fd4:	ldp	x19, x20, [sp, #16]
    1fd8:	adrp	x1, 0 <fallbackSort>
    1fdc:	ldp	x21, x22, [sp, #32]
    1fe0:	add	x1, x1, #0x0
    1fe4:	ldp	x23, x24, [sp, #48]
    1fe8:	ldp	x25, x26, [sp, #64]
    1fec:	ldp	x27, x28, [sp, #80]
    1ff0:	ldr	w2, [sp, #228]
    1ff4:	ldr	x0, [x0]
    1ff8:	sub	w4, w2, w3
    1ffc:	add	sp, sp, x12
    2000:	b	0 <fprintf>
    2004:	mov	w7, w4
    2008:	add	x12, x12, #0x1
    200c:	cmp	w12, #0xff
    2010:	add	x17, x17, #0x1
    2014:	add	x13, x13, #0x4
    2018:	str	w14, [x15, w7, sxtw #2]
    201c:	b.le	f68 <mainSort+0x458>
    2020:	b	fe8 <mainSort+0x4d8>
    2024:	ldr	w2, [sp, #184]
    2028:	ldr	x1, [sp, #168]
    202c:	add	w0, w2, w24
    2030:	sxtw	x10, w2
    2034:	sbfiz	x14, x2, #2, #32
    2038:	asr	w0, w0, #1
    203c:	add	x12, x1, x14
    2040:	ldr	w3, [x1, w24, sxtw #2]
    2044:	ldr	w2, [x1, x10, lsl #2]
    2048:	add	w3, w26, w3
    204c:	ldr	w1, [x1, w0, sxtw #2]
    2050:	add	w2, w26, w2
    2054:	add	w1, w26, w1
    2058:	ldrb	w6, [x25, w3, uxtw]
    205c:	ldrb	w0, [x25, w2, uxtw]
    2060:	ldrb	w1, [x25, w1, uxtw]
    2064:	cmp	w0, w6
    2068:	csel	w2, w0, w6, ls  // ls = plast
    206c:	csel	w6, w6, w0, ls  // ls = plast
    2070:	cmp	w1, w6
    2074:	b.cs	2084 <mainSort+0x1574>  // b.hs, b.nlast
    2078:	cmp	w2, w1
    207c:	csel	w1, w2, w1, hi  // hi = pmore
    2080:	and	w6, w1, #0xff
    2084:	ldr	w1, [sp, #184]
    2088:	cmp	w1, w24
    208c:	b.gt	213c <mainSort+0x162c>
    2090:	mov	w4, w1
    2094:	sub	w0, w0, w6
    2098:	mov	x13, x12
    209c:	mov	x8, x12
    20a0:	mov	w5, w24
    20a4:	mov	w11, w1
    20a8:	mov	w2, w24
    20ac:	mov	w9, w4
    20b0:	cmp	w0, #0x0
    20b4:	ldr	x7, [sp, #168]
    20b8:	cbz	w0, 21a4 <mainSort+0x1694>
    20bc:	nop
    20c0:	b.le	21c8 <mainSort+0x16b8>
    20c4:	cmp	w4, w2
    20c8:	b.gt	2134 <mainSort+0x1624>
    20cc:	add	x1, x7, w2, sxtw #2
    20d0:	b	20e4 <mainSort+0x15d4>
    20d4:	b.mi	2114 <mainSort+0x1604>  // b.first
    20d8:	sub	x1, x1, #0x4
    20dc:	cmp	w4, w2
    20e0:	b.gt	2134 <mainSort+0x1624>
    20e4:	ldr	w3, [x1]
    20e8:	sub	w2, w2, #0x1
    20ec:	add	w0, w26, w3
    20f0:	ldrb	w0, [x25, w0, uxtw]
    20f4:	subs	w0, w0, w6
    20f8:	cbnz	w0, 20d4 <mainSort+0x15c4>
    20fc:	sxtw	x0, w5
    2100:	sub	w5, w5, #0x1
    2104:	ldr	w15, [x7, x0, lsl #2]
    2108:	str	w15, [x1]
    210c:	str	w3, [x7, x0, lsl #2]
    2110:	b	20d8 <mainSort+0x15c8>
    2114:	add	w9, w4, #0x1
    2118:	ldr	w0, [x8]
    211c:	mov	w4, w9
    2120:	str	w3, [x8]
    2124:	str	w0, [x1]
    2128:	add	x8, x8, #0x4
    212c:	cmp	w4, w2
    2130:	b.le	2188 <mainSort+0x1678>
    2134:	cmp	w11, w5
    2138:	b.le	2224 <mainSort+0x1714>
    213c:	ldr	w1, [sp, #212]
    2140:	add	x2, sp, #0x550
    2144:	add	w0, w26, #0x1
    2148:	str	w0, [x2, w1, sxtw #2]
    214c:	ldrsw	x0, [sp, #212]
    2150:	add	x1, sp, #0x230
    2154:	ldr	w1, [x1, x0, lsl #2]
    2158:	str	w1, [sp, #184]
    215c:	add	x1, sp, #0x3c0
    2160:	ldr	w24, [x1, x0, lsl #2]
    2164:	add	x1, sp, #0x550
    2168:	ldr	w26, [x1, x0, lsl #2]
    216c:	cmp	w19, #0x61
    2170:	b.le	217c <mainSort+0x166c>
    2174:	mov	w0, #0x3e9                 	// #1001
    2178:	bl	0 <BZ2_bz__AssertH__fail>
    217c:	ldr	w0, [sp, #184]
    2180:	sub	w20, w24, w0
    2184:	b	10b4 <mainSort+0x5a4>
    2188:	ldr	w0, [x7, w4, sxtw #2]
    218c:	mov	w9, w4
    2190:	add	w0, w26, w0
    2194:	ldrb	w0, [x25, w0, uxtw]
    2198:	sub	w0, w0, w6
    219c:	cmp	w0, #0x0
    21a0:	cbnz	w0, 20c0 <mainSort+0x15b0>
    21a4:	sxtw	x0, w11
    21a8:	ldr	w1, [x8]
    21ac:	add	w4, w4, #0x1
    21b0:	add	w11, w11, #0x1
    21b4:	mov	w9, w4
    21b8:	ldr	w3, [x7, x0, lsl #2]
    21bc:	str	w3, [x8]
    21c0:	str	w1, [x7, x0, lsl #2]
    21c4:	b	2128 <mainSort+0x1618>
    21c8:	add	w4, w4, #0x1
    21cc:	mov	w9, w4
    21d0:	b	2128 <mainSort+0x1618>
    21d4:	adrp	x0, 0 <stderr>
    21d8:	ldr	w3, [sp, #140]
    21dc:	ldr	w2, [sp, #208]
    21e0:	add	w5, w20, #0x1
    21e4:	ldr	w4, [sp, #220]
    21e8:	adrp	x1, 0 <fallbackSort>
    21ec:	ldr	x0, [x0]
    21f0:	add	x1, x1, #0x0
    21f4:	bl	0 <fprintf>
    21f8:	b	1080 <mainSort+0x570>
    21fc:	ldr	w3, [x7, x4]
    2200:	add	x1, x1, #0x1
    2204:	cmp	w3, w1
    2208:	b.gt	1de0 <mainSort+0x12d0>
    220c:	b	1e24 <mainSort+0x1314>
    2210:	ldr	w0, [x6, x5]
    2214:	sub	x1, x1, #0x1
    2218:	cmp	w0, w1
    221c:	b.lt	1e60 <mainSort+0x1350>  // b.tstop
    2220:	b	1ea4 <mainSort+0x1394>
    2224:	ldr	w0, [sp, #184]
    2228:	sub	w1, w9, w11
    222c:	sub	w0, w11, w0
    2230:	cmp	w1, w0
    2234:	csel	w1, w1, w0, le
    2238:	cmp	w1, #0x0
    223c:	sub	w6, w9, w1
    2240:	b.le	2324 <mainSort+0x1814>
    2244:	sxtw	x0, w6
    2248:	add	x8, x14, #0x10
    224c:	add	x7, x0, #0x4
    2250:	sub	w4, w1, #0x1
    2254:	lsl	x7, x7, #2
    2258:	sub	x3, x7, #0x10
    225c:	cmp	x3, x8
    2260:	ccmp	x14, x7, #0x0, lt  // lt = tstop
    2264:	ccmp	w4, #0x4, #0x0, ge  // ge = tcont
    2268:	b.ls	25e8 <mainSort+0x1ad8>  // b.plast
    226c:	lsr	w4, w1, #2
    2270:	ldr	x0, [sp, #168]
    2274:	lsl	x4, x4, #4
    2278:	add	x3, x0, x3
    227c:	mov	x0, #0x0                   	// #0
    2280:	ldr	q1, [x3, x0]
    2284:	ldr	q0, [x12, x0]
    2288:	str	q1, [x12, x0]
    228c:	str	q0, [x3, x0]
    2290:	add	x0, x0, #0x10
    2294:	cmp	x4, x0
    2298:	b.ne	2280 <mainSort+0x1770>  // b.any
    229c:	ldr	w3, [sp, #184]
    22a0:	and	w0, w1, #0xfffffffc
    22a4:	cmp	w0, w1
    22a8:	add	w6, w6, w0
    22ac:	sub	w1, w1, w0
    22b0:	add	w0, w3, w0
    22b4:	b.eq	2324 <mainSort+0x1814>  // b.none
    22b8:	ldr	x10, [sp, #168]
    22bc:	sxtw	x3, w6
    22c0:	sxtw	x4, w0
    22c4:	cmp	w1, #0x1
    22c8:	add	w6, w6, #0x1
    22cc:	add	w0, w0, #0x1
    22d0:	ldr	w8, [x10, x3, lsl #2]
    22d4:	ldr	w7, [x10, x4, lsl #2]
    22d8:	str	w8, [x10, x4, lsl #2]
    22dc:	str	w7, [x10, x3, lsl #2]
    22e0:	b.eq	2324 <mainSort+0x1814>  // b.none
    22e4:	sxtw	x3, w6
    22e8:	sxtw	x4, w0
    22ec:	cmp	w1, #0x2
    22f0:	sbfiz	x6, x6, #2, #32
    22f4:	sbfiz	x0, x0, #2, #32
    22f8:	ldr	w7, [x10, x3, lsl #2]
    22fc:	ldr	w1, [x10, x4, lsl #2]
    2300:	str	w7, [x10, x4, lsl #2]
    2304:	str	w1, [x10, x3, lsl #2]
    2308:	b.eq	2324 <mainSort+0x1814>  // b.none
    230c:	add	x1, x6, #0x4
    2310:	add	x0, x0, #0x4
    2314:	ldr	w4, [x10, x1]
    2318:	ldr	w3, [x10, x0]
    231c:	str	w4, [x10, x0]
    2320:	str	w3, [x10, x1]
    2324:	sub	w2, w5, w2
    2328:	sub	w1, w24, w5
    232c:	cmp	w1, w2
    2330:	csel	w7, w1, w2, le
    2334:	sub	w6, w24, w7
    2338:	cmp	w7, #0x0
    233c:	add	w5, w6, #0x1
    2340:	b.le	2430 <mainSort+0x1920>
    2344:	sxtw	x4, w5
    2348:	sbfiz	x0, x9, #2, #32
    234c:	add	x4, x4, #0x4
    2350:	add	x8, x0, #0x10
    2354:	sub	w1, w7, #0x1
    2358:	lsl	x4, x4, #2
    235c:	sub	x3, x4, #0x10
    2360:	cmp	x3, x8
    2364:	sxtw	x8, w9
    2368:	ccmp	x0, x4, #0x0, lt  // lt = tstop
    236c:	ccmp	w1, #0x4, #0x0, ge  // ge = tcont
    2370:	b.ls	25a8 <mainSort+0x1a98>  // b.plast
    2374:	ldr	x6, [sp, #168]
    2378:	lsr	w4, w7, #2
    237c:	add	x3, x6, x3
    2380:	lsl	x4, x4, #4
    2384:	add	x1, x6, x0
    2388:	mov	x0, #0x0                   	// #0
    238c:	nop
    2390:	ldr	q1, [x3, x0]
    2394:	ldr	q0, [x1, x0]
    2398:	str	q1, [x1, x0]
    239c:	str	q0, [x3, x0]
    23a0:	add	x0, x0, #0x10
    23a4:	cmp	x4, x0
    23a8:	b.ne	2390 <mainSort+0x1880>  // b.any
    23ac:	and	w0, w7, #0xfffffffc
    23b0:	add	w5, w5, w0
    23b4:	cmp	w0, w7
    23b8:	sub	w1, w7, w0
    23bc:	add	w0, w9, w0
    23c0:	b.eq	2430 <mainSort+0x1920>  // b.none
    23c4:	ldr	x8, [sp, #168]
    23c8:	sxtw	x3, w5
    23cc:	sxtw	x4, w0
    23d0:	cmp	w1, #0x1
    23d4:	add	w5, w5, #0x1
    23d8:	add	w0, w0, #0x1
    23dc:	ldr	w7, [x8, x3, lsl #2]
    23e0:	ldr	w6, [x8, x4, lsl #2]
    23e4:	str	w7, [x8, x4, lsl #2]
    23e8:	str	w6, [x8, x3, lsl #2]
    23ec:	b.eq	2430 <mainSort+0x1920>  // b.none
    23f0:	sxtw	x3, w5
    23f4:	sxtw	x4, w0
    23f8:	cmp	w1, #0x2
    23fc:	sbfiz	x5, x5, #2, #32
    2400:	sbfiz	x0, x0, #2, #32
    2404:	ldr	w6, [x8, x3, lsl #2]
    2408:	ldr	w1, [x8, x4, lsl #2]
    240c:	str	w6, [x8, x4, lsl #2]
    2410:	str	w1, [x8, x3, lsl #2]
    2414:	b.eq	2430 <mainSort+0x1920>  // b.none
    2418:	add	x1, x5, #0x4
    241c:	add	x0, x0, #0x4
    2420:	ldr	w4, [x8, x1]
    2424:	ldr	w3, [x8, x0]
    2428:	str	w4, [x8, x0]
    242c:	str	w3, [x8, x1]
    2430:	ldr	w0, [sp, #184]
    2434:	sub	w2, w24, w2
    2438:	add	w1, w2, #0x1
    243c:	add	w5, w26, #0x1
    2440:	add	w9, w9, w0
    2444:	sub	w3, w24, w1
    2448:	sub	w11, w9, w11
    244c:	mov	w9, w0
    2450:	sub	w4, w11, #0x1
    2454:	mov	w7, w24
    2458:	sub	w0, w4, w0
    245c:	cmp	w0, w3
    2460:	b.lt	2484 <mainSort+0x1974>  // b.tstop
    2464:	mov	w8, w0
    2468:	mov	w6, w1
    246c:	mov	w0, w3
    2470:	mov	w7, w4
    2474:	mov	w3, w8
    2478:	mov	w1, w9
    247c:	mov	w4, w24
    2480:	str	w6, [sp, #184]
    2484:	sub	w6, w2, w11
    2488:	cmp	w6, w0
    248c:	b.gt	256c <mainSort+0x1a5c>
    2490:	mov	w8, w5
    2494:	mov	w24, w2
    2498:	mov	w6, w0
    249c:	mov	w2, w4
    24a0:	mov	w5, w26
    24a4:	mov	w9, w11
    24a8:	ldr	w11, [sp, #184]
    24ac:	str	w9, [sp, #184]
    24b0:	cmp	w3, w6
    24b4:	b.ge	24dc <mainSort+0x19cc>  // b.tcont
    24b8:	mov	w4, w26
    24bc:	mov	w3, w7
    24c0:	mov	w0, w1
    24c4:	mov	w26, w5
    24c8:	mov	w7, w2
    24cc:	mov	w1, w11
    24d0:	mov	w5, w4
    24d4:	mov	w2, w3
    24d8:	mov	w11, w0
    24dc:	ldrsw	x4, [sp, #212]
    24e0:	add	x6, sp, #0x230
    24e4:	sxtw	x3, w19
    24e8:	add	w0, w19, #0x1
    24ec:	add	w19, w19, #0x2
    24f0:	sxtw	x0, w0
    24f4:	str	w1, [x6, x4, lsl #2]
    24f8:	add	x1, sp, #0x3c0
    24fc:	str	w11, [x6, x3, lsl #2]
    2500:	str	w7, [x1, x4, lsl #2]
    2504:	sub	w1, w19, #0x1
    2508:	str	w1, [sp, #212]
    250c:	add	x1, sp, #0x550
    2510:	str	w26, [x1, x4, lsl #2]
    2514:	add	x1, sp, #0x3c0
    2518:	mov	w26, w8
    251c:	str	w2, [x1, x3, lsl #2]
    2520:	add	x1, sp, #0x550
    2524:	ldr	w2, [sp, #184]
    2528:	str	w2, [x6, x0, lsl #2]
    252c:	str	w5, [x1, x3, lsl #2]
    2530:	add	x1, sp, #0x3c0
    2534:	str	w24, [x1, x0, lsl #2]
    2538:	add	x1, sp, #0x550
    253c:	str	w8, [x1, x0, lsl #2]
    2540:	b	216c <mainSort+0x165c>
    2544:	mov	w0, #0x0                   	// #0
    2548:	b	1150 <mainSort+0x640>
    254c:	mov	w0, #0x1                   	// #1
    2550:	b	1150 <mainSort+0x640>
    2554:	mov	w0, #0x2                   	// #2
    2558:	b	1150 <mainSort+0x640>
    255c:	mov	w0, #0x3                   	// #3
    2560:	b	1150 <mainSort+0x640>
    2564:	mov	w0, #0x4                   	// #4
    2568:	b	1150 <mainSort+0x640>
    256c:	mov	w24, w4
    2570:	mov	w8, w26
    2574:	b	24b0 <mainSort+0x19a0>
    2578:	mov	w0, #0x5                   	// #5
    257c:	b	1150 <mainSort+0x640>
    2580:	mov	w0, #0x6                   	// #6
    2584:	b	1150 <mainSort+0x640>
    2588:	mov	w0, #0x7                   	// #7
    258c:	b	1150 <mainSort+0x640>
    2590:	mov	w0, #0x8                   	// #8
    2594:	b	1150 <mainSort+0x640>
    2598:	mov	w0, #0x9                   	// #9
    259c:	b	1150 <mainSort+0x640>
    25a0:	mov	w0, #0xa                   	// #10
    25a4:	b	1150 <mainSort+0x640>
    25a8:	ldr	x5, [sp, #168]
    25ac:	add	x1, x8, w1, uxtw
    25b0:	sxtw	x3, w6
    25b4:	add	x4, x5, #0x4
    25b8:	sub	x3, x3, x8
    25bc:	add	x0, x5, x0
    25c0:	add	x4, x4, x1, lsl #2
    25c4:	mov	x1, x0
    25c8:	ldr	w5, [x1], #4
    25cc:	cmp	x4, x1
    25d0:	ldr	w6, [x1, x3, lsl #2]
    25d4:	str	w6, [x0]
    25d8:	mov	x0, x1
    25dc:	str	w5, [x1, x3, lsl #2]
    25e0:	b.ne	25c4 <mainSort+0x1ab4>  // b.any
    25e4:	b	2430 <mainSort+0x1920>
    25e8:	ldr	x1, [sp, #168]
    25ec:	add	x4, x10, w4, uxtw
    25f0:	sub	x10, x0, x10
    25f4:	add	x1, x1, #0x4
    25f8:	add	x0, x1, x4, lsl #2
    25fc:	ldr	w3, [x13, x10, lsl #2]
    2600:	ldr	w1, [x13]
    2604:	str	w3, [x13]
    2608:	str	w1, [x13, x10, lsl #2]
    260c:	add	x13, x13, #0x4
    2610:	cmp	x0, x13
    2614:	b.ne	25fc <mainSort+0x1aec>  // b.any
    2618:	b	2324 <mainSort+0x1814>
    261c:	adrp	x1, 0 <stderr>
    2620:	adrp	x0, 0 <fallbackSort>
    2624:	mov	x2, #0x1b                  	// #27
    2628:	add	x0, x0, #0x0
    262c:	ldr	x3, [x1]
    2630:	mov	x1, #0x1                   	// #1
    2634:	bl	0 <fwrite>
    2638:	b	d88 <mainSort+0x278>
    263c:	adrp	x1, 0 <stderr>
    2640:	adrp	x0, 0 <fallbackSort>
    2644:	mov	x2, #0x21                  	// #33
    2648:	add	x0, x0, #0x0
    264c:	ldr	x3, [x1]
    2650:	mov	x1, #0x1                   	// #1
    2654:	bl	0 <fwrite>
    2658:	b	b58 <mainSort+0x48>
    265c:	mov	w0, #0x3ee                 	// #1006
    2660:	bl	0 <BZ2_bz__AssertH__fail>
    2664:	b	1d64 <mainSort+0x1254>
    2668:	tbnz	w6, #31, 1fa0 <mainSort+0x1490>
    266c:	mov	w1, #0x0                   	// #0
    2670:	b	1f4c <mainSort+0x143c>
    2674:	mov	x0, #0x0                   	// #0
    2678:	ldrb	w1, [x25, x0]
    267c:	strb	w1, [x3, x0]
    2680:	strh	wzr, [x2, x0, lsl #1]
    2684:	add	x0, x0, #0x1
    2688:	cmp	x0, #0x22
    268c:	b.ne	2678 <mainSort+0x1b68>  // b.any
    2690:	b	d7c <mainSort+0x26c>
    2694:	ldr	w5, [sp, #280]
    2698:	b	c54 <mainSort+0x144>
    269c:	ldr	w1, [sp, #280]
    26a0:	b	e7c <mainSort+0x36c>
    26a4:	mov	w19, w0
    26a8:	sub	w0, w0, #0x1
    26ac:	str	w0, [sp, #212]
    26b0:	b	214c <mainSort+0x163c>
    26b4:	nop

00000000000026b8 <BZ2_blockSort>:
    26b8:	stp	x29, x30, [sp, #-96]!
    26bc:	mov	w1, #0x270f                	// #9999
    26c0:	mov	x29, sp
    26c4:	stp	x19, x20, [sp, #16]
    26c8:	mov	x20, x0
    26cc:	stp	x21, x22, [sp, #32]
    26d0:	ldr	w22, [x0, #108]
    26d4:	stp	x23, x24, [sp, #48]
    26d8:	cmp	w22, w1
    26dc:	ldr	w23, [x0, #656]
    26e0:	ldr	x24, [x0, #40]
    26e4:	ldr	x21, [x0, #56]
    26e8:	b.le	2764 <BZ2_blockSort+0xac>
    26ec:	ldr	w1, [x20, #88]
    26f0:	mov	w3, #0x64                  	// #100
    26f4:	mov	w0, #0xaaab                	// #43691
    26f8:	and	w2, w22, #0x1
    26fc:	cmp	w1, w3
    2700:	movk	w0, #0xaaaa, lsl #16
    2704:	csel	w1, w1, w3, le
    2708:	add	w2, w2, w22
    270c:	cmp	w1, #0x0
    2710:	add	w2, w2, #0x22
    2714:	csinc	w19, w1, wzr, gt
    2718:	add	x6, sp, #0x5c
    271c:	sub	w19, w19, #0x1
    2720:	mov	w5, w23
    2724:	ldr	x1, [x20, #64]
    2728:	mov	w4, w22
    272c:	umull	x19, w19, w0
    2730:	mov	x3, x24
    2734:	mov	x0, x21
    2738:	add	x2, x1, w2, sxtw
    273c:	lsr	x19, x19, #33
    2740:	mul	w19, w19, w22
    2744:	str	w19, [sp, #92]
    2748:	bl	b10 <mainSort>
    274c:	cmp	w23, #0x2
    2750:	b.gt	27c0 <BZ2_blockSort+0x108>
    2754:	ldr	w0, [sp, #92]
    2758:	tbz	w0, #31, 2778 <BZ2_blockSort+0xc0>
    275c:	cmp	w23, #0x2
    2760:	b.eq	2820 <BZ2_blockSort+0x168>  // b.none
    2764:	ldp	x0, x1, [x20, #24]
    2768:	mov	w4, w23
    276c:	mov	w3, w22
    2770:	mov	x2, x24
    2774:	bl	0 <fallbackSort>
    2778:	mov	w0, #0xffffffff            	// #-1
    277c:	str	w0, [x20, #48]
    2780:	ldr	w0, [x20, #108]
    2784:	cmp	w0, #0x0
    2788:	b.le	2804 <BZ2_blockSort+0x14c>
    278c:	mov	x1, #0x0                   	// #0
    2790:	b	27a0 <BZ2_blockSort+0xe8>
    2794:	add	x1, x1, #0x1
    2798:	cmp	w0, w1
    279c:	b.le	2804 <BZ2_blockSort+0x14c>
    27a0:	ldr	w2, [x21, x1, lsl #2]
    27a4:	cbnz	w2, 2794 <BZ2_blockSort+0xdc>
    27a8:	str	w1, [x20, #48]
    27ac:	ldp	x19, x20, [sp, #16]
    27b0:	ldp	x21, x22, [sp, #32]
    27b4:	ldp	x23, x24, [sp, #48]
    27b8:	ldp	x29, x30, [sp], #96
    27bc:	ret
    27c0:	ldr	w2, [sp, #92]
    27c4:	scvtf	s1, w22
    27c8:	str	x25, [sp, #64]
    27cc:	adrp	x25, 0 <stderr>
    27d0:	sub	w2, w19, w2
    27d4:	mov	w3, w22
    27d8:	ldr	x0, [x25]
    27dc:	scvtf	s0, w2
    27e0:	adrp	x1, 0 <fallbackSort>
    27e4:	add	x1, x1, #0x0
    27e8:	fdiv	s0, s0, s1
    27ec:	fcvt	d0, s0
    27f0:	bl	0 <fprintf>
    27f4:	ldr	w0, [sp, #92]
    27f8:	tbnz	w0, #31, 2828 <BZ2_blockSort+0x170>
    27fc:	ldr	x25, [sp, #64]
    2800:	b	2778 <BZ2_blockSort+0xc0>
    2804:	mov	w0, #0x3eb                 	// #1003
    2808:	bl	0 <BZ2_bz__AssertH__fail>
    280c:	ldp	x19, x20, [sp, #16]
    2810:	ldp	x21, x22, [sp, #32]
    2814:	ldp	x23, x24, [sp, #48]
    2818:	ldp	x29, x30, [sp], #96
    281c:	ret
    2820:	str	x25, [sp, #64]
    2824:	adrp	x25, 0 <stderr>
    2828:	ldr	x3, [x25]
    282c:	adrp	x0, 0 <fallbackSort>
    2830:	mov	x2, #0x35                  	// #53
    2834:	add	x0, x0, #0x0
    2838:	mov	x1, #0x1                   	// #1
    283c:	bl	0 <fwrite>
    2840:	ldr	x25, [sp, #64]
    2844:	b	2764 <BZ2_blockSort+0xac>

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	mov	x12, #0x14b0                	// #5296
   4:	sub	sp, sp, x12
   8:	sub	w5, w2, #0x1
   c:	cmp	w2, #0x0
  10:	stp	x29, x30, [sp]
  14:	mov	x29, sp
  18:	stp	x19, x20, [sp, #16]
  1c:	stp	x21, x22, [sp, #32]
  20:	mov	w22, w2
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x23, x0
  2c:	mov	w24, w3
  30:	stp	x25, x26, [sp, #64]
  34:	stp	x27, x28, [sp, #80]
  38:	b.le	550 <BZ2_hbMakeCodeLengths+0x550>
  3c:	cmp	w5, #0x2
  40:	b.ls	560 <BZ2_hbMakeCodeLengths+0x560>  // b.plast
  44:	lsr	w3, w2, #2
  48:	lsr	w4, w2, #2
  4c:	movi	v2.4s, #0x1, lsl #8
  50:	add	x20, sp, #0x490
  54:	lsl	x3, x3, #4
  58:	mov	x0, #0x0                   	// #0
  5c:	ldr	q0, [x1, x0]
  60:	add	x2, x20, x0
  64:	add	x0, x0, #0x10
  68:	cmp	x0, x3
  6c:	shl	v1.4s, v0.4s, #8
  70:	cmeq	v0.4s, v0.4s, #0
  74:	bsl	v0.16b, v2.16b, v1.16b
  78:	stur	q0, [x2, #4]
  7c:	b.ne	5c <BZ2_hbMakeCodeLengths+0x5c>  // b.any
  80:	and	w28, w22, #0xfffffffc
  84:	cmp	w22, w28
  88:	mov	w0, w28
  8c:	b.eq	f4 <BZ2_hbMakeCodeLengths+0xf4>  // b.none
  90:	ldr	w2, [x1, w0, sxtw #2]
  94:	add	w6, w0, #0x1
  98:	mov	w3, #0x100                 	// #256
  9c:	sbfiz	x7, x0, #2, #32
  a0:	cmp	w2, #0x0
  a4:	lsl	w2, w2, #8
  a8:	csel	w2, w2, w3, ne  // ne = any
  ac:	str	w2, [x20, w6, sxtw #2]
  b0:	cmp	w22, w6
  b4:	b.le	f4 <BZ2_hbMakeCodeLengths+0xf4>
  b8:	add	x1, x1, x7
  bc:	add	w6, w0, #0x2
  c0:	ldr	w2, [x1, #4]
  c4:	cmp	w2, #0x0
  c8:	lsl	w2, w2, #8
  cc:	csel	w2, w2, w3, ne  // ne = any
  d0:	str	w2, [x20, w6, sxtw #2]
  d4:	cmp	w22, w6
  d8:	b.le	f4 <BZ2_hbMakeCodeLengths+0xf4>
  dc:	ldr	w1, [x1, #8]
  e0:	add	w0, w0, #0x3
  e4:	cmp	w1, #0x0
  e8:	lsl	w1, w1, #8
  ec:	csel	w1, w1, w3, ne  // ne = any
  f0:	str	w1, [x20, w0, sxtw #2]
  f4:	add	x19, sp, #0x80
  f8:	ubfiz	x26, x4, #4, #30
  fc:	lsl	w27, w22, #1
 100:	add	x4, x19, w22, sxtw #2
 104:	add	x26, x20, x26
 108:	sub	x4, x4, #0x4
 10c:	sub	w27, w27, #0x1
 110:	sxtw	x6, w22
 114:	add	w7, w28, #0x1
 118:	add	x21, sp, #0xca0
 11c:	mov	w25, #0x1                   	// #1
 120:	mov	w0, #0xfffffffe            	// #-2
 124:	str	wzr, [sp, #128]
 128:	str	wzr, [sp, #1168]
 12c:	cmp	w22, #0x0
 130:	str	w0, [sp, #3232]
 134:	b.le	4d0 <BZ2_hbMakeCodeLengths+0x4d0>
 138:	add	w13, w22, #0x1
 13c:	mov	x11, #0x0                   	// #0
 140:	mov	w10, #0x1                   	// #1
 144:	mov	w12, #0xffffffff            	// #-1
 148:	add	x3, x19, x11
 14c:	add	x1, x21, x11
 150:	asr	w0, w10, #1
 154:	add	x2, x20, x11
 158:	str	w10, [x3, #4]
 15c:	str	w12, [x1, #4]
 160:	ldr	w1, [x19, w0, sxtw #2]
 164:	ldr	w9, [x2, #4]
 168:	ldr	w2, [x20, w1, sxtw #2]
 16c:	cmp	w9, w2
 170:	b.ge	51c <BZ2_hbMakeCodeLengths+0x51c>  // b.tcont
 174:	mov	w3, w10
 178:	b	180 <BZ2_hbMakeCodeLengths+0x180>
 17c:	mov	w0, w2
 180:	asr	w2, w0, #1
 184:	str	w1, [x19, w3, sxtw #2]
 188:	mov	w3, w0
 18c:	ldr	w1, [x19, w2, sxtw #2]
 190:	ldr	w8, [x20, w1, sxtw #2]
 194:	cmp	w8, w9
 198:	b.gt	17c <BZ2_hbMakeCodeLengths+0x17c>
 19c:	str	w10, [x19, w0, sxtw #2]
 1a0:	add	w10, w10, #0x1
 1a4:	cmp	w10, w13
 1a8:	add	x11, x11, #0x4
 1ac:	b.ne	148 <BZ2_hbMakeCodeLengths+0x148>  // b.any
 1b0:	cmp	w22, #0x1
 1b4:	b.eq	3b0 <BZ2_hbMakeCodeLengths+0x3b0>  // b.none
 1b8:	sub	w9, w22, #0x2
 1bc:	mov	x10, x4
 1c0:	mov	x11, x6
 1c4:	mov	w8, w22
 1c8:	mov	w12, #0xffffffff            	// #-1
 1cc:	nop
 1d0:	ldr	w18, [x10, #4]
 1d4:	sub	w8, w8, #0x1
 1d8:	ldr	w14, [sp, #132]
 1dc:	cmp	w8, #0x1
 1e0:	str	w18, [sp, #132]
 1e4:	b.eq	540 <BZ2_hbMakeCodeLengths+0x540>  // b.none
 1e8:	ldr	w17, [x20, w18, sxtw #2]
 1ec:	mov	w1, #0x2                   	// #2
 1f0:	mov	w13, #0x1                   	// #1
 1f4:	b	218 <BZ2_hbMakeCodeLengths+0x218>
 1f8:	mov	w0, w1
 1fc:	lsl	w1, w0, #1
 200:	cmp	w17, w3
 204:	b.lt	258 <BZ2_hbMakeCodeLengths+0x258>  // b.tstop
 208:	str	w2, [x19, w13, sxtw #2]
 20c:	cmp	w8, w0, lsl #1
 210:	mov	w13, w0
 214:	b.lt	258 <BZ2_hbMakeCodeLengths+0x258>  // b.tstop
 218:	ldr	w2, [x19, w1, sxtw #2]
 21c:	mov	w0, w1
 220:	cmp	w8, w1
 224:	ldr	w3, [x20, w2, sxtw #2]
 228:	b.le	1fc <BZ2_hbMakeCodeLengths+0x1fc>
 22c:	add	w0, w1, #0x1
 230:	ldr	w15, [x19, w0, sxtw #2]
 234:	ldr	w16, [x20, w15, sxtw #2]
 238:	cmp	w16, w3
 23c:	b.ge	1f8 <BZ2_hbMakeCodeLengths+0x1f8>  // b.tcont
 240:	mov	w3, w16
 244:	mov	w2, w15
 248:	lsl	w1, w0, #1
 24c:	cmp	w17, w3
 250:	b.ge	208 <BZ2_hbMakeCodeLengths+0x208>  // b.tcont
 254:	nop
 258:	str	w18, [x19, w13, sxtw #2]
 25c:	cmp	w9, #0x1
 260:	ldr	w18, [x10]
 264:	ldr	w30, [sp, #132]
 268:	str	w18, [sp, #132]
 26c:	b.le	538 <BZ2_hbMakeCodeLengths+0x538>
 270:	ldr	w17, [x20, w18, sxtw #2]
 274:	mov	w1, #0x2                   	// #2
 278:	mov	w13, #0x1                   	// #1
 27c:	b	2a0 <BZ2_hbMakeCodeLengths+0x2a0>
 280:	mov	w0, w1
 284:	lsl	w1, w0, #1
 288:	cmp	w17, w3
 28c:	b.lt	2e0 <BZ2_hbMakeCodeLengths+0x2e0>  // b.tstop
 290:	str	w2, [x19, w13, sxtw #2]
 294:	cmp	w9, w0, lsl #1
 298:	mov	w13, w0
 29c:	b.lt	2e0 <BZ2_hbMakeCodeLengths+0x2e0>  // b.tstop
 2a0:	ldr	w2, [x19, w1, sxtw #2]
 2a4:	mov	w0, w1
 2a8:	cmp	w1, w9
 2ac:	ldr	w3, [x20, w2, sxtw #2]
 2b0:	b.ge	284 <BZ2_hbMakeCodeLengths+0x284>  // b.tcont
 2b4:	add	w0, w1, #0x1
 2b8:	ldr	w15, [x19, w0, sxtw #2]
 2bc:	ldr	w16, [x20, w15, sxtw #2]
 2c0:	cmp	w16, w3
 2c4:	b.ge	280 <BZ2_hbMakeCodeLengths+0x280>  // b.tcont
 2c8:	mov	w3, w16
 2cc:	mov	w2, w15
 2d0:	lsl	w1, w0, #1
 2d4:	cmp	w17, w3
 2d8:	b.ge	290 <BZ2_hbMakeCodeLengths+0x290>  // b.tcont
 2dc:	nop
 2e0:	sxtw	x14, w14
 2e4:	sxtw	x30, w30
 2e8:	str	w18, [x19, w13, sxtw #2]
 2ec:	asr	w0, w8, #1
 2f0:	add	w15, w11, #0x1
 2f4:	lsl	x2, x11, #2
 2f8:	ldr	w17, [x20, x30, lsl #2]
 2fc:	add	x16, x20, x2
 300:	ldr	w13, [x20, x14, lsl #2]
 304:	add	x2, x21, x2
 308:	str	w15, [x10]
 30c:	and	w3, w17, #0xff
 310:	and	w1, w13, #0xff
 314:	and	w13, w13, #0xffffff00
 318:	cmp	w1, w17, uxtb
 31c:	and	w17, w17, #0xffffff00
 320:	csel	w3, w3, w1, le
 324:	ldr	w1, [x19, w0, sxtw #2]
 328:	add	w3, w3, #0x1
 32c:	add	w13, w13, w17
 330:	orr	w3, w3, w13
 334:	str	w15, [x21, x30, lsl #2]
 338:	str	w3, [x16, #4]
 33c:	str	w15, [x21, x14, lsl #2]
 340:	str	w12, [x2, #4]
 344:	ldr	w2, [x20, w1, sxtw #2]
 348:	cmp	w3, w2
 34c:	b.ge	4fc <BZ2_hbMakeCodeLengths+0x4fc>  // b.tcont
 350:	mov	w13, w8
 354:	b	35c <BZ2_hbMakeCodeLengths+0x35c>
 358:	mov	w0, w2
 35c:	asr	w2, w0, #1
 360:	str	w1, [x19, w13, sxtw #2]
 364:	mov	w13, w0
 368:	ldr	w1, [x19, w2, sxtw #2]
 36c:	ldr	w14, [x20, w1, sxtw #2]
 370:	cmp	w3, w14
 374:	b.lt	358 <BZ2_hbMakeCodeLengths+0x358>  // b.tstop
 378:	str	w15, [x19, w0, sxtw #2]
 37c:	add	x11, x11, #0x1
 380:	sub	w9, w9, #0x1
 384:	sub	x10, x10, #0x4
 388:	cmp	w8, #0x1
 38c:	b.ne	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.any
 390:	cmp	w27, #0x203
 394:	b.le	3b0 <BZ2_hbMakeCodeLengths+0x3b0>
 398:	mov	w0, #0x7d2                 	// #2002
 39c:	stp	x4, x6, [sp, #104]
 3a0:	stp	w7, w5, [sp, #120]
 3a4:	bl	0 <BZ2_bz__AssertH__fail>
 3a8:	ldp	x4, x6, [sp, #104]
 3ac:	ldp	w7, w5, [sp, #120]
 3b0:	mov	x2, #0x0                   	// #0
 3b4:	mov	w3, #0x0                   	// #0
 3b8:	add	x0, x21, x2, lsl #2
 3bc:	mov	w1, #0x0                   	// #0
 3c0:	ldr	w0, [x0, #4]
 3c4:	tbnz	w0, #31, 4f4 <BZ2_hbMakeCodeLengths+0x4f4>
 3c8:	ldr	w0, [x21, w0, sxtw #2]
 3cc:	add	w1, w1, #0x1
 3d0:	tbz	w0, #31, 3c8 <BZ2_hbMakeCodeLengths+0x3c8>
 3d4:	and	w0, w1, #0xff
 3d8:	strb	w0, [x23, x2]
 3dc:	add	x2, x2, #0x1
 3e0:	cmp	w24, w1
 3e4:	add	w0, w2, #0x1
 3e8:	csel	w3, w3, w25, ge  // ge = tcont
 3ec:	cmp	w22, w0
 3f0:	b.ge	3b8 <BZ2_hbMakeCodeLengths+0x3b8>  // b.tcont
 3f4:	cbz	w3, 4d0 <BZ2_hbMakeCodeLengths+0x4d0>
 3f8:	cmp	w5, #0x2
 3fc:	b.ls	548 <BZ2_hbMakeCodeLengths+0x548>  // b.plast
 400:	movi	v2.4s, #0x1
 404:	mov	x0, x20
 408:	ldur	q0, [x0, #4]
 40c:	add	x0, x0, #0x10
 410:	sshr	v0.4s, v0.4s, #8
 414:	cmlt	v1.4s, v0.4s, #0
 418:	sub	v0.4s, v0.4s, v1.4s
 41c:	sshr	v0.4s, v0.4s, #1
 420:	add	v0.4s, v0.4s, v2.4s
 424:	shl	v0.4s, v0.4s, #8
 428:	stur	q0, [x0, #-12]
 42c:	cmp	x26, x0
 430:	b.ne	408 <BZ2_hbMakeCodeLengths+0x408>  // b.any
 434:	mov	w1, w7
 438:	cmp	w28, w22
 43c:	b.eq	120 <BZ2_hbMakeCodeLengths+0x120>  // b.none
 440:	sxtw	x3, w1
 444:	add	w2, w1, #0x1
 448:	cmp	w2, w22
 44c:	ldr	w0, [x20, x3, lsl #2]
 450:	lsr	w8, w0, #31
 454:	add	w0, w8, w0, asr #8
 458:	asr	w0, w0, #1
 45c:	add	w0, w0, #0x1
 460:	lsl	w0, w0, #8
 464:	str	w0, [x20, x3, lsl #2]
 468:	b.gt	120 <BZ2_hbMakeCodeLengths+0x120>
 46c:	sxtw	x2, w2
 470:	add	w1, w1, #0x2
 474:	cmp	w1, w22
 478:	ldr	w0, [x20, x2, lsl #2]
 47c:	lsr	w3, w0, #31
 480:	add	w0, w3, w0, asr #8
 484:	asr	w0, w0, #1
 488:	add	w0, w0, #0x1
 48c:	lsl	w0, w0, #8
 490:	str	w0, [x20, x2, lsl #2]
 494:	b.gt	120 <BZ2_hbMakeCodeLengths+0x120>
 498:	sxtw	x1, w1
 49c:	str	wzr, [sp, #128]
 4a0:	cmp	w22, #0x0
 4a4:	ldr	w0, [x20, x1, lsl #2]
 4a8:	lsr	w2, w0, #31
 4ac:	add	w0, w2, w0, asr #8
 4b0:	asr	w0, w0, #1
 4b4:	add	w0, w0, #0x1
 4b8:	lsl	w0, w0, #8
 4bc:	str	w0, [x20, x1, lsl #2]
 4c0:	mov	w0, #0xfffffffe            	// #-2
 4c4:	str	wzr, [sp, #1168]
 4c8:	str	w0, [sp, #3232]
 4cc:	b.gt	138 <BZ2_hbMakeCodeLengths+0x138>
 4d0:	mov	x12, #0x14b0                	// #5296
 4d4:	ldp	x29, x30, [sp]
 4d8:	ldp	x19, x20, [sp, #16]
 4dc:	ldp	x21, x22, [sp, #32]
 4e0:	ldp	x23, x24, [sp, #48]
 4e4:	ldp	x25, x26, [sp, #64]
 4e8:	ldp	x27, x28, [sp, #80]
 4ec:	add	sp, sp, x12
 4f0:	ret
 4f4:	mov	w0, #0x0                   	// #0
 4f8:	b	3d8 <BZ2_hbMakeCodeLengths+0x3d8>
 4fc:	mov	w0, w8
 500:	add	x11, x11, #0x1
 504:	sub	w9, w9, #0x1
 508:	sub	x10, x10, #0x4
 50c:	cmp	w8, #0x1
 510:	str	w15, [x19, w0, sxtw #2]
 514:	b.ne	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.any
 518:	b	390 <BZ2_hbMakeCodeLengths+0x390>
 51c:	mov	w0, w10
 520:	add	x11, x11, #0x4
 524:	str	w10, [x19, w0, sxtw #2]
 528:	add	w10, w10, #0x1
 52c:	cmp	w10, w13
 530:	b.ne	148 <BZ2_hbMakeCodeLengths+0x148>  // b.any
 534:	b	1b0 <BZ2_hbMakeCodeLengths+0x1b0>
 538:	mov	w13, #0x1                   	// #1
 53c:	b	2e0 <BZ2_hbMakeCodeLengths+0x2e0>
 540:	mov	w13, w8
 544:	b	258 <BZ2_hbMakeCodeLengths+0x258>
 548:	mov	w1, #0x1                   	// #1
 54c:	b	440 <BZ2_hbMakeCodeLengths+0x440>
 550:	add	x20, sp, #0x490
 554:	lsr	w4, w2, #2
 558:	and	w28, w2, #0xfffffffc
 55c:	b	f4 <BZ2_hbMakeCodeLengths+0xf4>
 560:	add	x20, sp, #0x490
 564:	lsr	w4, w2, #2
 568:	and	w28, w2, #0xfffffffc
 56c:	mov	w0, #0x0                   	// #0
 570:	b	90 <BZ2_hbMakeCodeLengths+0x90>
 574:	nop

0000000000000578 <BZ2_hbAssignCodes>:
 578:	cmp	w2, w3
 57c:	b.gt	5c8 <BZ2_hbAssignCodes+0x50>
 580:	cmp	w4, #0x0
 584:	b.le	5c8 <BZ2_hbAssignCodes+0x50>
 588:	add	w7, w3, #0x1
 58c:	mov	w6, #0x0                   	// #0
 590:	mov	x3, #0x0                   	// #0
 594:	nop
 598:	ldrb	w5, [x1, x3]
 59c:	cmp	w5, w2
 5a0:	b.ne	5ac <BZ2_hbAssignCodes+0x34>  // b.any
 5a4:	str	w6, [x0, x3, lsl #2]
 5a8:	add	w6, w6, #0x1
 5ac:	add	x3, x3, #0x1
 5b0:	cmp	w4, w3
 5b4:	b.gt	598 <BZ2_hbAssignCodes+0x20>
 5b8:	add	w2, w2, #0x1
 5bc:	lsl	w6, w6, #1
 5c0:	cmp	w2, w7
 5c4:	b.ne	590 <BZ2_hbAssignCodes+0x18>  // b.any
 5c8:	ret
 5cc:	nop

00000000000005d0 <BZ2_hbCreateDecodeTables>:
 5d0:	cmp	w4, w5
 5d4:	b.gt	820 <BZ2_hbCreateDecodeTables+0x250>
 5d8:	cmp	w6, #0x0
 5dc:	b.le	848 <BZ2_hbCreateDecodeTables+0x278>
 5e0:	add	w11, w5, #0x1
 5e4:	mov	w9, w4
 5e8:	mov	w10, #0x0                   	// #0
 5ec:	nop
 5f0:	mov	x7, #0x0                   	// #0
 5f4:	nop
 5f8:	ldrb	w8, [x3, x7]
 5fc:	cmp	w8, w9
 600:	b.ne	60c <BZ2_hbCreateDecodeTables+0x3c>  // b.any
 604:	str	w7, [x2, w10, sxtw #2]
 608:	add	w10, w10, #0x1
 60c:	add	x7, x7, #0x1
 610:	cmp	w6, w7
 614:	b.gt	5f8 <BZ2_hbCreateDecodeTables+0x28>
 618:	add	w9, w9, #0x1
 61c:	cmp	w9, w11
 620:	b.ne	5f0 <BZ2_hbCreateDecodeTables+0x20>  // b.any
 624:	stp	xzr, xzr, [x1]
 628:	stp	xzr, xzr, [x1, #16]
 62c:	stp	xzr, xzr, [x1, #32]
 630:	stp	xzr, xzr, [x1, #48]
 634:	stp	xzr, xzr, [x1, #64]
 638:	str	xzr, [x1, #80]
 63c:	str	wzr, [x1, #88]
 640:	sub	w6, w6, #0x1
 644:	add	x7, x3, #0x1
 648:	add	x7, x7, x6
 64c:	nop
 650:	ldrb	w2, [x3], #1
 654:	add	x2, x2, #0x1
 658:	cmp	x3, x7
 65c:	ldr	w6, [x1, x2, lsl #2]
 660:	add	w6, w6, #0x1
 664:	str	w6, [x1, x2, lsl #2]
 668:	b.ne	650 <BZ2_hbCreateDecodeTables+0x80>  // b.any
 66c:	mov	x8, x1
 670:	add	x7, x1, #0x5c
 674:	ldr	w3, [x8], #4
 678:	mov	x2, x8
 67c:	nop
 680:	ldr	w6, [x2]
 684:	add	w3, w3, w6
 688:	str	w3, [x2], #4
 68c:	cmp	x7, x2
 690:	b.ne	680 <BZ2_hbCreateDecodeTables+0xb0>  // b.any
 694:	stp	xzr, xzr, [x0]
 698:	cmp	w4, w5
 69c:	stp	xzr, xzr, [x0, #16]
 6a0:	stp	xzr, xzr, [x0, #32]
 6a4:	stp	xzr, xzr, [x0, #48]
 6a8:	stp	xzr, xzr, [x0, #64]
 6ac:	str	xzr, [x0, #80]
 6b0:	str	wzr, [x0, #88]
 6b4:	b.gt	6e8 <BZ2_hbCreateDecodeTables+0x118>
 6b8:	sxtw	x2, w4
 6bc:	mov	w3, #0x0                   	// #0
 6c0:	ldr	w6, [x8, x2, lsl #2]
 6c4:	ldr	w7, [x1, x2, lsl #2]
 6c8:	sub	w6, w6, w7
 6cc:	add	w3, w6, w3
 6d0:	sub	w6, w3, #0x1
 6d4:	str	w6, [x0, x2, lsl #2]
 6d8:	add	x2, x2, #0x1
 6dc:	lsl	w3, w3, #1
 6e0:	cmp	w5, w2
 6e4:	b.ge	6c0 <BZ2_hbCreateDecodeTables+0xf0>  // b.tcont
 6e8:	add	w8, w4, #0x1
 6ec:	cmp	w5, w8
 6f0:	b.lt	7f0 <BZ2_hbCreateDecodeTables+0x220>  // b.tstop
 6f4:	sxtw	x6, w8
 6f8:	sub	w9, w5, #0x1
 6fc:	add	x2, x6, #0x3
 700:	sub	w9, w9, w4
 704:	lsl	x2, x2, #2
 708:	sub	x7, x2, #0x10
 70c:	add	x10, x2, #0x4
 710:	sub	x3, x2, #0xc
 714:	add	x7, x0, x7
 718:	add	x10, x1, x10
 71c:	add	x3, x1, x3
 720:	cmp	x7, x10
 724:	add	x2, x0, x2
 728:	ccmp	x3, x2, #0x2, cc  // cc = lo, ul, last
 72c:	ccmp	w9, #0x3, #0x0, cs  // cs = hs, nlast
 730:	b.ls	7f4 <BZ2_hbCreateDecodeTables+0x224>  // b.plast
 734:	sub	w4, w5, w4
 738:	mov	x2, #0x0                   	// #0
 73c:	movi	v2.4s, #0x1
 740:	lsr	w6, w4, #2
 744:	lsl	x6, x6, #4
 748:	ldr	q0, [x7, x2]
 74c:	ldr	q1, [x3, x2]
 750:	add	v0.4s, v0.4s, v2.4s
 754:	shl	v0.4s, v0.4s, #1
 758:	sub	v0.4s, v0.4s, v1.4s
 75c:	str	q0, [x3, x2]
 760:	add	x2, x2, #0x10
 764:	cmp	x6, x2
 768:	b.ne	748 <BZ2_hbCreateDecodeTables+0x178>  // b.any
 76c:	and	w2, w4, #0xfffffffc
 770:	add	w8, w2, w8
 774:	cmp	w2, w4
 778:	b.eq	7f0 <BZ2_hbCreateDecodeTables+0x220>  // b.none
 77c:	sbfiz	x3, x8, #2, #32
 780:	add	w2, w8, #0x1
 784:	add	x6, x0, x3
 788:	sxtw	x4, w8
 78c:	cmp	w2, w5
 790:	ldur	w2, [x6, #-4]
 794:	ldr	w7, [x1, x4, lsl #2]
 798:	add	w2, w2, #0x1
 79c:	lsl	w2, w2, #1
 7a0:	sub	w2, w2, w7
 7a4:	str	w2, [x1, x4, lsl #2]
 7a8:	b.gt	7f0 <BZ2_hbCreateDecodeTables+0x220>
 7ac:	ldr	w0, [x0, x4, lsl #2]
 7b0:	add	x2, x3, #0x4
 7b4:	add	w8, w8, #0x2
 7b8:	add	w0, w0, #0x1
 7bc:	cmp	w8, w5
 7c0:	ldr	w4, [x1, x2]
 7c4:	lsl	w0, w0, #1
 7c8:	sub	w0, w0, w4
 7cc:	str	w0, [x1, x2]
 7d0:	b.gt	7f0 <BZ2_hbCreateDecodeTables+0x220>
 7d4:	ldr	w0, [x6, #4]
 7d8:	add	x3, x3, #0x8
 7dc:	add	w0, w0, #0x1
 7e0:	ldr	w2, [x1, x3]
 7e4:	lsl	w0, w0, #1
 7e8:	sub	w0, w0, w2
 7ec:	str	w0, [x1, x3]
 7f0:	ret
 7f4:	sub	x0, x0, #0x4
 7f8:	ldr	w2, [x0, x6, lsl #2]
 7fc:	ldr	w3, [x1, x6, lsl #2]
 800:	add	w2, w2, #0x1
 804:	lsl	w2, w2, #1
 808:	sub	w2, w2, w3
 80c:	str	w2, [x1, x6, lsl #2]
 810:	add	x6, x6, #0x1
 814:	cmp	w5, w6
 818:	b.ge	7f8 <BZ2_hbCreateDecodeTables+0x228>  // b.tcont
 81c:	ret
 820:	stp	xzr, xzr, [x1]
 824:	cmp	w6, #0x0
 828:	stp	xzr, xzr, [x1, #16]
 82c:	stp	xzr, xzr, [x1, #32]
 830:	stp	xzr, xzr, [x1, #48]
 834:	stp	xzr, xzr, [x1, #64]
 838:	str	xzr, [x1, #80]
 83c:	str	wzr, [x1, #88]
 840:	b.gt	640 <BZ2_hbCreateDecodeTables+0x70>
 844:	b	66c <BZ2_hbCreateDecodeTables+0x9c>
 848:	stp	xzr, xzr, [x1]
 84c:	stp	xzr, xzr, [x1, #16]
 850:	stp	xzr, xzr, [x1, #32]
 854:	stp	xzr, xzr, [x1, #48]
 858:	stp	xzr, xzr, [x1, #64]
 85c:	str	xzr, [x1, #80]
 860:	str	wzr, [x1, #88]
 864:	b	66c <BZ2_hbCreateDecodeTables+0x9c>

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <bsPutUInt32>:
       0:	ldr	w3, [x0, #644]
       4:	lsr	w4, w1, #24
       8:	ldr	w2, [x0, #640]
       c:	cmp	w3, #0x7
      10:	b.le	18c <bsPutUInt32+0x18c>
      14:	ldr	w5, [x0, #116]
      18:	ldr	x6, [x0, #80]
      1c:	lsr	w3, w2, #24
      20:	strb	w3, [x6, w5, sxtw]
      24:	ldr	w3, [x0, #640]
      28:	ldr	w5, [x0, #116]
      2c:	ldr	w6, [x0, #644]
      30:	lsl	w2, w3, #8
      34:	add	w5, w5, #0x1
      38:	sub	w3, w6, #0x8
      3c:	str	w5, [x0, #116]
      40:	str	w2, [x0, #640]
      44:	cmp	w3, #0x7
      48:	str	w3, [x0, #644]
      4c:	b.gt	18 <bsPutUInt32+0x18>
      50:	mov	w5, #0x18                  	// #24
      54:	sub	w3, w5, w3
      58:	str	w6, [x0, #644]
      5c:	cmp	w6, #0x7
      60:	lsl	w3, w4, w3
      64:	orr	w3, w3, w2
      68:	str	w3, [x0, #640]
      6c:	ubfx	x4, x1, #16, #8
      70:	b.le	194 <bsPutUInt32+0x194>
      74:	ldr	w2, [x0, #116]
      78:	ldr	x5, [x0, #80]
      7c:	lsr	w3, w3, #24
      80:	strb	w3, [x5, w2, sxtw]
      84:	ldr	w3, [x0, #640]
      88:	ldr	w2, [x0, #116]
      8c:	ldr	w5, [x0, #644]
      90:	lsl	w3, w3, #8
      94:	add	w2, w2, #0x1
      98:	sub	w6, w5, #0x8
      9c:	str	w2, [x0, #116]
      a0:	str	w3, [x0, #640]
      a4:	cmp	w6, #0x7
      a8:	str	w6, [x0, #644]
      ac:	b.gt	78 <bsPutUInt32+0x78>
      b0:	mov	w2, #0x18                  	// #24
      b4:	sub	w2, w2, w6
      b8:	str	w5, [x0, #644]
      bc:	cmp	w5, #0x7
      c0:	lsl	w2, w4, w2
      c4:	orr	w3, w2, w3
      c8:	str	w3, [x0, #640]
      cc:	ubfx	x2, x1, #8, #8
      d0:	b.le	19c <bsPutUInt32+0x19c>
      d4:	ldr	w6, [x0, #116]
      d8:	ldr	x4, [x0, #80]
      dc:	lsr	w3, w3, #24
      e0:	strb	w3, [x4, w6, sxtw]
      e4:	ldr	w3, [x0, #640]
      e8:	ldr	w6, [x0, #116]
      ec:	ldr	w4, [x0, #644]
      f0:	lsl	w3, w3, #8
      f4:	add	w6, w6, #0x1
      f8:	sub	w5, w4, #0x8
      fc:	str	w6, [x0, #116]
     100:	str	w3, [x0, #640]
     104:	cmp	w5, #0x7
     108:	str	w5, [x0, #644]
     10c:	b.gt	d8 <bsPutUInt32+0xd8>
     110:	mov	w6, #0x18                  	// #24
     114:	sub	w5, w6, w5
     118:	str	w4, [x0, #644]
     11c:	and	w1, w1, #0xff
     120:	lsl	w2, w2, w5
     124:	orr	w2, w2, w3
     128:	str	w2, [x0, #640]
     12c:	cmp	w4, #0x7
     130:	b.le	1a4 <bsPutUInt32+0x1a4>
     134:	ldr	w3, [x0, #116]
     138:	ldr	x4, [x0, #80]
     13c:	lsr	w2, w2, #24
     140:	strb	w2, [x4, w3, sxtw]
     144:	ldr	w2, [x0, #640]
     148:	ldr	w3, [x0, #116]
     14c:	ldr	w5, [x0, #644]
     150:	lsl	w2, w2, #8
     154:	add	w3, w3, #0x1
     158:	sub	w4, w5, #0x8
     15c:	str	w3, [x0, #116]
     160:	str	w2, [x0, #640]
     164:	cmp	w4, #0x7
     168:	str	w4, [x0, #644]
     16c:	b.gt	138 <bsPutUInt32+0x138>
     170:	mov	w3, #0x18                  	// #24
     174:	sub	w4, w3, w4
     178:	str	w5, [x0, #644]
     17c:	lsl	w1, w1, w4
     180:	orr	w2, w1, w2
     184:	str	w2, [x0, #640]
     188:	ret
     18c:	add	w6, w3, #0x8
     190:	b	50 <bsPutUInt32+0x50>
     194:	add	w5, w6, #0x8
     198:	b	b0 <bsPutUInt32+0xb0>
     19c:	add	w4, w5, #0x8
     1a0:	b	110 <bsPutUInt32+0x110>
     1a4:	add	w5, w4, #0x8
     1a8:	mov	w3, #0x18                  	// #24
     1ac:	sub	w4, w3, w4
     1b0:	str	w5, [x0, #644]
     1b4:	lsl	w1, w1, w4
     1b8:	orr	w2, w1, w2
     1bc:	str	w2, [x0, #640]
     1c0:	ret
     1c4:	nop

00000000000001c8 <BZ2_bsInitWrite>:
     1c8:	str	xzr, [x0, #640]
     1cc:	ret

00000000000001d0 <BZ2_compressBlock>:
     1d0:	sub	sp, sp, #0x3d0
     1d4:	and	w1, w1, #0xff
     1d8:	stp	x29, x30, [sp]
     1dc:	mov	x29, sp
     1e0:	ldr	w5, [x0, #108]
     1e4:	stp	x23, x24, [sp, #48]
     1e8:	mov	x24, x0
     1ec:	ldr	w2, [x0, #660]
     1f0:	str	w1, [sp, #612]
     1f4:	cmp	w5, #0x0
     1f8:	b.le	23c <BZ2_compressBlock+0x6c>
     1fc:	ldr	w3, [x0, #648]
     200:	cmp	w2, #0x1
     204:	ldr	w4, [x0, #652]
     208:	mvn	w3, w3
     20c:	str	w3, [x0, #648]
     210:	eor	w4, w3, w4, ror #31
     214:	str	w4, [x0, #652]
     218:	b.le	220 <BZ2_compressBlock+0x50>
     21c:	str	wzr, [x0, #116]
     220:	ldr	w0, [x24, #656]
     224:	cmp	w0, #0x1
     228:	b.gt	270 <BZ2_compressBlock+0xa0>
     22c:	mov	x0, x24
     230:	bl	0 <BZ2_blockSort>
     234:	ldr	w5, [x24, #108]
     238:	ldr	w2, [x24, #660]
     23c:	ldr	x0, [x24, #32]
     240:	cmp	w2, #0x1
     244:	add	x0, x0, w5, sxtw
     248:	str	x0, [x24, #80]
     24c:	b.eq	58c4 <BZ2_compressBlock+0x56f4>  // b.none
     250:	cmp	w5, #0x0
     254:	b.gt	288 <BZ2_compressBlock+0xb8>
     258:	ldr	w0, [sp, #612]
     25c:	cbnz	w0, acc <BZ2_compressBlock+0x8fc>
     260:	ldp	x29, x30, [sp]
     264:	ldp	x23, x24, [sp, #48]
     268:	add	sp, sp, #0x3d0
     26c:	ret
     270:	adrp	x0, 0 <stderr>
     274:	adrp	x1, 0 <bsPutUInt32>
     278:	add	x1, x1, #0x0
     27c:	ldr	x0, [x0]
     280:	bl	0 <fprintf>
     284:	b	22c <BZ2_compressBlock+0x5c>
     288:	ldr	w0, [x24, #644]
     28c:	stp	x19, x20, [sp, #16]
     290:	ldr	w1, [x24, #640]
     294:	stp	x21, x22, [sp, #32]
     298:	cmp	w0, #0x7
     29c:	stp	x25, x26, [sp, #64]
     2a0:	stp	x27, x28, [sp, #80]
     2a4:	str	d8, [sp, #96]
     2a8:	b.le	5b78 <BZ2_compressBlock+0x59a8>
     2ac:	ldr	w3, [x24, #116]
     2b0:	ldr	x0, [x24, #80]
     2b4:	lsr	w1, w1, #24
     2b8:	strb	w1, [x0, w3, sxtw]
     2bc:	ldr	w1, [x24, #640]
     2c0:	ldr	w3, [x24, #116]
     2c4:	ldr	w2, [x24, #644]
     2c8:	lsl	w1, w1, #8
     2cc:	add	w3, w3, #0x1
     2d0:	sub	w0, w2, #0x8
     2d4:	str	w3, [x24, #116]
     2d8:	str	w1, [x24, #640]
     2dc:	cmp	w0, #0x7
     2e0:	str	w0, [x24, #644]
     2e4:	b.gt	2b0 <BZ2_compressBlock+0xe0>
     2e8:	mov	w3, #0x18                  	// #24
     2ec:	sub	w3, w3, w0
     2f0:	mov	w0, #0x31                  	// #49
     2f4:	str	w2, [x24, #644]
     2f8:	lsl	w0, w0, w3
     2fc:	orr	w0, w0, w1
     300:	str	w0, [x24, #640]
     304:	cmp	w2, #0x7
     308:	b.le	5b80 <BZ2_compressBlock+0x59b0>
     30c:	ldr	w1, [x24, #116]
     310:	ldr	x2, [x24, #80]
     314:	lsr	w0, w0, #24
     318:	strb	w0, [x2, w1, sxtw]
     31c:	ldr	w0, [x24, #640]
     320:	ldr	w1, [x24, #116]
     324:	ldr	w3, [x24, #644]
     328:	lsl	w0, w0, #8
     32c:	add	w1, w1, #0x1
     330:	sub	w2, w3, #0x8
     334:	str	w1, [x24, #116]
     338:	str	w0, [x24, #640]
     33c:	cmp	w2, #0x7
     340:	str	w2, [x24, #644]
     344:	b.gt	310 <BZ2_compressBlock+0x140>
     348:	mov	w1, #0x18                  	// #24
     34c:	sub	w2, w1, w2
     350:	mov	w1, #0x41                  	// #65
     354:	str	w3, [x24, #644]
     358:	lsl	w1, w1, w2
     35c:	orr	w0, w1, w0
     360:	str	w0, [x24, #640]
     364:	cmp	w3, #0x7
     368:	b.le	5b88 <BZ2_compressBlock+0x59b8>
     36c:	ldr	w4, [x24, #116]
     370:	ldr	x1, [x24, #80]
     374:	lsr	w0, w0, #24
     378:	strb	w0, [x1, w4, sxtw]
     37c:	ldr	w0, [x24, #640]
     380:	ldr	w4, [x24, #116]
     384:	ldr	w2, [x24, #644]
     388:	lsl	w0, w0, #8
     38c:	add	w4, w4, #0x1
     390:	sub	w3, w2, #0x8
     394:	str	w4, [x24, #116]
     398:	str	w0, [x24, #640]
     39c:	cmp	w3, #0x7
     3a0:	str	w3, [x24, #644]
     3a4:	b.gt	370 <BZ2_compressBlock+0x1a0>
     3a8:	mov	w1, #0x18                  	// #24
     3ac:	sub	w3, w1, w3
     3b0:	mov	w1, #0x59                  	// #89
     3b4:	str	w2, [x24, #644]
     3b8:	lsl	w1, w1, w3
     3bc:	orr	w1, w1, w0
     3c0:	str	w1, [x24, #640]
     3c4:	cmp	w2, #0x7
     3c8:	b.le	5b90 <BZ2_compressBlock+0x59c0>
     3cc:	ldr	w0, [x24, #116]
     3d0:	ldr	x2, [x24, #80]
     3d4:	lsr	w1, w1, #24
     3d8:	strb	w1, [x2, w0, sxtw]
     3dc:	ldr	w1, [x24, #640]
     3e0:	ldr	w0, [x24, #116]
     3e4:	ldr	w3, [x24, #644]
     3e8:	lsl	w1, w1, #8
     3ec:	add	w0, w0, #0x1
     3f0:	sub	w2, w3, #0x8
     3f4:	str	w0, [x24, #116]
     3f8:	str	w1, [x24, #640]
     3fc:	cmp	w2, #0x7
     400:	str	w2, [x24, #644]
     404:	b.gt	3d0 <BZ2_compressBlock+0x200>
     408:	mov	w0, #0x18                  	// #24
     40c:	sub	w2, w0, w2
     410:	mov	w0, #0x26                  	// #38
     414:	str	w3, [x24, #644]
     418:	lsl	w0, w0, w2
     41c:	orr	w1, w0, w1
     420:	str	w1, [x24, #640]
     424:	cmp	w3, #0x7
     428:	b.le	5b98 <BZ2_compressBlock+0x59c8>
     42c:	ldr	w4, [x24, #116]
     430:	ldr	x0, [x24, #80]
     434:	lsr	w1, w1, #24
     438:	strb	w1, [x0, w4, sxtw]
     43c:	ldr	w1, [x24, #640]
     440:	ldr	w4, [x24, #116]
     444:	ldr	w2, [x24, #644]
     448:	lsl	w1, w1, #8
     44c:	add	w4, w4, #0x1
     450:	sub	w3, w2, #0x8
     454:	str	w4, [x24, #116]
     458:	str	w1, [x24, #640]
     45c:	cmp	w3, #0x7
     460:	str	w3, [x24, #644]
     464:	b.gt	430 <BZ2_compressBlock+0x260>
     468:	mov	w0, #0x18                  	// #24
     46c:	sub	w3, w0, w3
     470:	mov	w0, #0x53                  	// #83
     474:	str	w2, [x24, #644]
     478:	lsl	w0, w0, w3
     47c:	orr	w0, w0, w1
     480:	str	w0, [x24, #640]
     484:	cmp	w2, #0x7
     488:	b.le	5ba0 <BZ2_compressBlock+0x59d0>
     48c:	ldr	w1, [x24, #116]
     490:	ldr	x2, [x24, #80]
     494:	lsr	w0, w0, #24
     498:	strb	w0, [x2, w1, sxtw]
     49c:	ldr	w0, [x24, #640]
     4a0:	ldr	w1, [x24, #116]
     4a4:	ldr	w3, [x24, #644]
     4a8:	lsl	w0, w0, #8
     4ac:	add	w1, w1, #0x1
     4b0:	sub	w2, w3, #0x8
     4b4:	str	w1, [x24, #116]
     4b8:	str	w0, [x24, #640]
     4bc:	cmp	w2, #0x7
     4c0:	str	w2, [x24, #644]
     4c4:	b.gt	490 <BZ2_compressBlock+0x2c0>
     4c8:	ldr	w1, [x24, #648]
     4cc:	mov	w4, #0x18                  	// #24
     4d0:	sub	w4, w4, w2
     4d4:	mov	w2, #0x59                  	// #89
     4d8:	str	w3, [x24, #644]
     4dc:	lsl	w2, w2, w4
     4e0:	orr	w0, w2, w0
     4e4:	str	w0, [x24, #640]
     4e8:	mov	x0, x24
     4ec:	bl	0 <bsPutUInt32>
     4f0:	ldr	w1, [x24, #644]
     4f4:	cmp	w1, #0x7
     4f8:	b.le	5ba8 <BZ2_compressBlock+0x59d8>
     4fc:	ldr	w2, [x24, #116]
     500:	ldr	w0, [x24, #640]
     504:	nop
     508:	ldr	x1, [x24, #80]
     50c:	lsr	w0, w0, #24
     510:	strb	w0, [x1, w2, sxtw]
     514:	ldr	w0, [x24, #640]
     518:	ldr	w2, [x24, #116]
     51c:	ldr	w1, [x24, #644]
     520:	lsl	w0, w0, #8
     524:	add	w2, w2, #0x1
     528:	sub	w1, w1, #0x8
     52c:	str	w2, [x24, #116]
     530:	str	w0, [x24, #640]
     534:	cmp	w1, #0x7
     538:	str	w1, [x24, #644]
     53c:	b.gt	508 <BZ2_compressBlock+0x338>
     540:	add	w1, w1, #0x1
     544:	str	w1, [x24, #644]
     548:	ldr	w4, [x24, #48]
     54c:	cmp	w1, #0x8
     550:	b.ne	590 <BZ2_compressBlock+0x3c0>  // b.any
     554:	ldr	w2, [x24, #116]
     558:	ldr	x1, [x24, #80]
     55c:	lsr	w0, w0, #24
     560:	strb	w0, [x1, w2, sxtw]
     564:	ldr	w0, [x24, #640]
     568:	ldr	w2, [x24, #116]
     56c:	ldr	w1, [x24, #644]
     570:	lsl	w0, w0, #8
     574:	add	w2, w2, #0x1
     578:	sub	w1, w1, #0x8
     57c:	str	w2, [x24, #116]
     580:	str	w0, [x24, #640]
     584:	cmp	w1, #0x7
     588:	str	w1, [x24, #644]
     58c:	b.gt	558 <BZ2_compressBlock+0x388>
     590:	mov	w5, #0x8                   	// #8
     594:	sub	w5, w5, w1
     598:	ldp	x25, x26, [x24, #56]
     59c:	lsl	w4, w4, w5
     5a0:	add	x23, x24, #0x80
     5a4:	orr	w0, w4, w0
     5a8:	mov	x2, x23
     5ac:	mov	w4, #0x1                   	// #1
     5b0:	add	x3, x24, #0x180
     5b4:	str	w0, [x24, #640]
     5b8:	mov	w0, w4
     5bc:	add	w1, w1, #0x18
     5c0:	ldr	x5, [x24, #72]
     5c4:	mov	w20, #0x0                   	// #0
     5c8:	str	x5, [sp, #120]
     5cc:	str	wzr, [x24, #124]
     5d0:	str	w1, [x24, #644]
     5d4:	nop
     5d8:	ldrb	w4, [x2]
     5dc:	add	w1, w20, #0x2
     5e0:	mov	w21, w0
     5e4:	cbz	w4, 5fc <BZ2_compressBlock+0x42c>
     5e8:	strb	w20, [x2, #256]
     5ec:	mov	w21, w1
     5f0:	mov	w20, w0
     5f4:	str	w0, [x24, #124]
     5f8:	add	w0, w0, #0x1
     5fc:	add	x2, x2, #0x1
     600:	cmp	x3, x2
     604:	b.ne	5d8 <BZ2_compressBlock+0x408>  // b.any
     608:	sxtw	x2, w0
     60c:	cmn	w20, #0x1
     610:	add	x2, x2, #0x1
     614:	mov	x3, #0x4                   	// #4
     618:	add	x19, x24, #0x2a0
     61c:	mov	w1, #0x0                   	// #0
     620:	lsl	x2, x2, #2
     624:	str	w0, [sp, #556]
     628:	csel	x2, x2, x3, ge  // ge = tcont
     62c:	mov	x0, x19
     630:	bl	0 <memset>
     634:	cbz	w20, 5b30 <BZ2_compressBlock+0x5960>
     638:	sub	w0, w20, #0x1
     63c:	cmp	w0, #0xe
     640:	b.ls	5bb0 <BZ2_compressBlock+0x59e0>  // b.plast
     644:	adrp	x0, 0 <bsPutUInt32>
     648:	ldr	q0, [x0]
     64c:	lsr	w0, w20, #4
     650:	cmp	w0, #0x1
     654:	str	q0, [sp, #720]
     658:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     65c:	adrp	x1, 0 <bsPutUInt32>
     660:	cmp	w0, #0x2
     664:	ldr	q0, [x1]
     668:	str	q0, [sp, #736]
     66c:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     670:	adrp	x1, 0 <bsPutUInt32>
     674:	cmp	w0, #0x3
     678:	ldr	q0, [x1]
     67c:	str	q0, [sp, #752]
     680:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     684:	adrp	x1, 0 <bsPutUInt32>
     688:	cmp	w0, #0x4
     68c:	ldr	q0, [x1]
     690:	str	q0, [sp, #768]
     694:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     698:	adrp	x1, 0 <bsPutUInt32>
     69c:	cmp	w0, #0x5
     6a0:	ldr	q0, [x1]
     6a4:	str	q0, [sp, #784]
     6a8:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     6ac:	adrp	x1, 0 <bsPutUInt32>
     6b0:	cmp	w0, #0x6
     6b4:	ldr	q0, [x1]
     6b8:	str	q0, [sp, #800]
     6bc:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     6c0:	adrp	x1, 0 <bsPutUInt32>
     6c4:	cmp	w0, #0x7
     6c8:	ldr	q0, [x1]
     6cc:	str	q0, [sp, #816]
     6d0:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     6d4:	adrp	x1, 0 <bsPutUInt32>
     6d8:	cmp	w0, #0x8
     6dc:	ldr	q0, [x1]
     6e0:	str	q0, [sp, #832]
     6e4:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     6e8:	adrp	x1, 0 <bsPutUInt32>
     6ec:	cmp	w0, #0x9
     6f0:	ldr	q0, [x1]
     6f4:	str	q0, [sp, #848]
     6f8:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     6fc:	adrp	x1, 0 <bsPutUInt32>
     700:	cmp	w0, #0xa
     704:	ldr	q0, [x1]
     708:	str	q0, [sp, #864]
     70c:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     710:	adrp	x1, 0 <bsPutUInt32>
     714:	cmp	w0, #0xb
     718:	ldr	q0, [x1]
     71c:	str	q0, [sp, #880]
     720:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     724:	adrp	x1, 0 <bsPutUInt32>
     728:	cmp	w0, #0xc
     72c:	ldr	q0, [x1]
     730:	str	q0, [sp, #896]
     734:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     738:	adrp	x1, 0 <bsPutUInt32>
     73c:	cmp	w0, #0xd
     740:	ldr	q0, [x1]
     744:	str	q0, [sp, #912]
     748:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     74c:	adrp	x1, 0 <bsPutUInt32>
     750:	cmp	w0, #0xe
     754:	ldr	q0, [x1]
     758:	str	q0, [sp, #928]
     75c:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     760:	adrp	x1, 0 <bsPutUInt32>
     764:	cmp	w0, #0xf
     768:	ldr	q0, [x1]
     76c:	str	q0, [sp, #944]
     770:	b.eq	780 <BZ2_compressBlock+0x5b0>  // b.none
     774:	adrp	x0, 0 <bsPutUInt32>
     778:	ldr	q0, [x0]
     77c:	str	q0, [sp, #960]
     780:	tst	x20, #0xf
     784:	and	w0, w20, #0xfffffff0
     788:	b.eq	5b30 <BZ2_compressBlock+0x5960>  // b.none
     78c:	add	x2, sp, #0x2d0
     790:	str	x2, [sp, #152]
     794:	add	w1, w0, #0x1
     798:	cmp	w1, w20
     79c:	strb	w0, [x2, w0, sxtw]
     7a0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7a4:	strb	w1, [x2, w1, sxtw]
     7a8:	add	w1, w0, #0x2
     7ac:	cmp	w1, w20
     7b0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7b4:	strb	w1, [x2, w1, sxtw]
     7b8:	add	w1, w0, #0x3
     7bc:	cmp	w1, w20
     7c0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7c4:	strb	w1, [x2, w1, sxtw]
     7c8:	add	w1, w0, #0x4
     7cc:	cmp	w1, w20
     7d0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7d4:	strb	w1, [x2, w1, sxtw]
     7d8:	add	w1, w0, #0x5
     7dc:	cmp	w1, w20
     7e0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7e4:	strb	w1, [x2, w1, sxtw]
     7e8:	add	w1, w0, #0x6
     7ec:	cmp	w1, w20
     7f0:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     7f4:	strb	w1, [x2, w1, sxtw]
     7f8:	add	w1, w0, #0x7
     7fc:	cmp	w1, w20
     800:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     804:	strb	w1, [x2, w1, sxtw]
     808:	add	w1, w0, #0x8
     80c:	cmp	w1, w20
     810:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     814:	strb	w1, [x2, w1, sxtw]
     818:	add	w1, w0, #0x9
     81c:	cmp	w1, w20
     820:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     824:	strb	w1, [x2, w1, sxtw]
     828:	add	w1, w0, #0xa
     82c:	cmp	w1, w20
     830:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     834:	strb	w1, [x2, w1, sxtw]
     838:	add	w1, w0, #0xb
     83c:	cmp	w1, w20
     840:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     844:	strb	w1, [x2, w1, sxtw]
     848:	add	w1, w0, #0xc
     84c:	cmp	w1, w20
     850:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     854:	strb	w1, [x2, w1, sxtw]
     858:	add	w1, w0, #0xd
     85c:	cmp	w1, w20
     860:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     864:	strb	w1, [x2, w1, sxtw]
     868:	add	w0, w0, #0xe
     86c:	cmp	w0, w20
     870:	b.ge	878 <BZ2_compressBlock+0x6a8>  // b.tcont
     874:	strb	w0, [x2, w0, sxtw]
     878:	ldr	w2, [x24, #108]
     87c:	mov	x4, #0x0                   	// #0
     880:	mov	w22, #0x0                   	// #0
     884:	mov	w0, #0x0                   	// #0
     888:	cmp	w2, #0x0
     88c:	mov	w6, #0x1                   	// #1
     890:	b.le	5b6c <BZ2_compressBlock+0x599c>
     894:	ldr	x7, [sp, #120]
     898:	ldr	x8, [sp, #152]
     89c:	b	8b0 <BZ2_compressBlock+0x6e0>
     8a0:	add	x4, x4, #0x1
     8a4:	add	w0, w0, #0x1
     8a8:	cmp	w2, w4
     8ac:	b.le	93c <BZ2_compressBlock+0x76c>
     8b0:	ldr	w1, [x25, x4, lsl #2]
     8b4:	ldrb	w9, [sp, #720]
     8b8:	subs	w1, w1, #0x1
     8bc:	add	w3, w1, w2
     8c0:	csel	w1, w3, w1, mi  // mi = first
     8c4:	ldrb	w1, [x26, w1, sxtw]
     8c8:	add	x1, x24, x1
     8cc:	ldrb	w5, [x1, #384]
     8d0:	cmp	w5, w9
     8d4:	b.eq	8a0 <BZ2_compressBlock+0x6d0>  // b.none
     8d8:	cbnz	w0, a54 <BZ2_compressBlock+0x884>
     8dc:	ldrb	w3, [sp, #721]
     8e0:	strb	w9, [sp, #721]
     8e4:	cmp	w5, w3
     8e8:	b.eq	ac0 <BZ2_compressBlock+0x8f0>  // b.none
     8ec:	add	x0, x8, #0x1
     8f0:	mov	w1, w3
     8f4:	ldrb	w3, [x0, #1]!
     8f8:	strb	w1, [x0]
     8fc:	cmp	w5, w3
     900:	b.ne	8f0 <BZ2_compressBlock+0x720>  // b.any
     904:	sub	x1, x0, x8
     908:	add	w1, w1, #0x1
     90c:	and	w0, w1, #0xffff
     910:	add	x1, x24, w1, sxtw #2
     914:	strb	w3, [sp, #720]
     918:	strh	w0, [x7, w22, sxtw #1]
     91c:	add	x4, x4, #0x1
     920:	add	w22, w22, #0x1
     924:	cmp	w2, w4
     928:	ldr	w3, [x1, #672]
     92c:	mov	w0, #0x0                   	// #0
     930:	add	w3, w3, #0x1
     934:	str	w3, [x1, #672]
     938:	b.gt	8b0 <BZ2_compressBlock+0x6e0>
     93c:	cbz	w0, 5b10 <BZ2_compressBlock+0x5940>
     940:	sub	w0, w0, #0x1
     944:	sxtw	x1, w22
     948:	mov	w5, #0x1                   	// #1
     94c:	ldr	x6, [sp, #120]
     950:	b	978 <BZ2_compressBlock+0x7a8>
     954:	ldr	w3, [x24, #676]
     958:	cmp	w0, #0x1
     95c:	strh	w5, [x6, x1, lsl #1]
     960:	add	x1, x1, #0x1
     964:	add	w3, w3, #0x1
     968:	str	w3, [x24, #676]
     96c:	sub	w3, w0, #0x2
     970:	b.le	9a4 <BZ2_compressBlock+0x7d4>
     974:	asr	w0, w3, #1
     978:	mov	w22, w1
     97c:	add	w4, w1, #0x1
     980:	tbnz	w0, #0, 954 <BZ2_compressBlock+0x784>
     984:	ldr	w3, [x24, #672]
     988:	cmp	w0, #0x1
     98c:	strh	wzr, [x6, x1, lsl #1]
     990:	add	x1, x1, #0x1
     994:	add	w3, w3, #0x1
     998:	str	w3, [x24, #672]
     99c:	sub	w3, w0, #0x2
     9a0:	b.gt	974 <BZ2_compressBlock+0x7a4>
     9a4:	ldr	x0, [sp, #120]
     9a8:	add	w28, w22, #0x2
     9ac:	add	x4, x0, w4, sxtw #1
     9b0:	add	x1, x24, w21, sxtw #2
     9b4:	strh	w21, [x4]
     9b8:	add	w22, w20, #0x2
     9bc:	ldr	w0, [x1, #672]
     9c0:	add	w0, w0, #0x1
     9c4:	str	w0, [x1, #672]
     9c8:	str	w28, [x24, #668]
     9cc:	ldr	w0, [x24, #656]
     9d0:	cmp	w0, #0x2
     9d4:	b.gt	5abc <BZ2_compressBlock+0x58ec>
     9d8:	ldr	w21, [sp, #556]
     9dc:	mov	x0, #0x934c                	// #37708
     9e0:	add	x0, x24, x0
     9e4:	mov	x1, #0x9958                	// #39256
     9e8:	mov	x20, x0
     9ec:	add	x21, x21, #0x1
     9f0:	add	x25, x24, x1
     9f4:	str	x0, [sp, #584]
     9f8:	str	x25, [sp, #672]
     9fc:	nop
     a00:	mov	x0, x20
     a04:	mov	x2, x21
     a08:	add	x20, x20, #0x102
     a0c:	mov	w1, #0xf                   	// #15
     a10:	bl	0 <memset>
     a14:	cmp	x20, x25
     a18:	b.ne	a00 <BZ2_compressBlock+0x830>  // b.any
     a1c:	cmp	w28, #0x0
     a20:	b.le	5b20 <BZ2_compressBlock+0x5950>
     a24:	cmp	w28, #0xc7
     a28:	b.le	d88 <BZ2_compressBlock+0xbb8>
     a2c:	cmp	w28, #0x257
     a30:	b.le	5a1c <BZ2_compressBlock+0x584c>
     a34:	cmp	w28, #0x4af
     a38:	b.le	5b3c <BZ2_compressBlock+0x596c>
     a3c:	cmp	w28, #0x95f
     a40:	b.gt	5b4c <BZ2_compressBlock+0x597c>
     a44:	mov	w0, #0x5                   	// #5
     a48:	str	w0, [sp, #608]
     a4c:	str	w0, [sp, #668]
     a50:	b	d94 <BZ2_compressBlock+0xbc4>
     a54:	sub	w0, w0, #0x1
     a58:	sxtw	x1, w22
     a5c:	b	a84 <BZ2_compressBlock+0x8b4>
     a60:	ldr	w3, [x24, #676]
     a64:	cmp	w0, #0x1
     a68:	strh	w6, [x7, x1, lsl #1]
     a6c:	add	x1, x1, #0x1
     a70:	add	w3, w3, #0x1
     a74:	str	w3, [x24, #676]
     a78:	sub	w3, w0, #0x2
     a7c:	b.le	aac <BZ2_compressBlock+0x8dc>
     a80:	asr	w0, w3, #1
     a84:	add	w22, w1, #0x1
     a88:	tbnz	w0, #0, a60 <BZ2_compressBlock+0x890>
     a8c:	ldr	w3, [x24, #672]
     a90:	cmp	w0, #0x1
     a94:	strh	wzr, [x7, x1, lsl #1]
     a98:	add	x1, x1, #0x1
     a9c:	add	w3, w3, #0x1
     aa0:	str	w3, [x24, #672]
     aa4:	sub	w3, w0, #0x2
     aa8:	b.gt	a80 <BZ2_compressBlock+0x8b0>
     aac:	ldrb	w9, [sp, #720]
     ab0:	ldrb	w3, [sp, #721]
     ab4:	strb	w9, [sp, #721]
     ab8:	cmp	w5, w3
     abc:	b.ne	8ec <BZ2_compressBlock+0x71c>  // b.any
     ac0:	mov	w1, #0x2                   	// #2
     ac4:	mov	w0, w1
     ac8:	b	910 <BZ2_compressBlock+0x740>
     acc:	ldr	w0, [x24, #644]
     ad0:	ldr	w1, [x24, #640]
     ad4:	cmp	w0, #0x7
     ad8:	b.le	5bb8 <BZ2_compressBlock+0x59e8>
     adc:	ldr	w3, [x24, #116]
     ae0:	ldr	x0, [x24, #80]
     ae4:	lsr	w1, w1, #24
     ae8:	strb	w1, [x0, w3, sxtw]
     aec:	ldr	w1, [x24, #640]
     af0:	ldr	w3, [x24, #116]
     af4:	ldr	w2, [x24, #644]
     af8:	lsl	w1, w1, #8
     afc:	add	w3, w3, #0x1
     b00:	sub	w0, w2, #0x8
     b04:	str	w3, [x24, #116]
     b08:	str	w1, [x24, #640]
     b0c:	cmp	w0, #0x7
     b10:	str	w0, [x24, #644]
     b14:	b.gt	ae0 <BZ2_compressBlock+0x910>
     b18:	mov	w3, #0x18                  	// #24
     b1c:	sub	w3, w3, w0
     b20:	mov	w0, #0x17                  	// #23
     b24:	str	w2, [x24, #644]
     b28:	lsl	w0, w0, w3
     b2c:	orr	w0, w0, w1
     b30:	str	w0, [x24, #640]
     b34:	cmp	w2, #0x7
     b38:	b.le	5bc0 <BZ2_compressBlock+0x59f0>
     b3c:	ldr	w1, [x24, #116]
     b40:	ldr	x2, [x24, #80]
     b44:	lsr	w0, w0, #24
     b48:	strb	w0, [x2, w1, sxtw]
     b4c:	ldr	w0, [x24, #640]
     b50:	ldr	w1, [x24, #116]
     b54:	ldr	w3, [x24, #644]
     b58:	lsl	w0, w0, #8
     b5c:	add	w1, w1, #0x1
     b60:	sub	w2, w3, #0x8
     b64:	str	w1, [x24, #116]
     b68:	str	w0, [x24, #640]
     b6c:	cmp	w2, #0x7
     b70:	str	w2, [x24, #644]
     b74:	b.gt	b40 <BZ2_compressBlock+0x970>
     b78:	mov	w1, #0x18                  	// #24
     b7c:	sub	w2, w1, w2
     b80:	mov	w1, #0x72                  	// #114
     b84:	str	w3, [x24, #644]
     b88:	lsl	w1, w1, w2
     b8c:	orr	w0, w1, w0
     b90:	str	w0, [x24, #640]
     b94:	cmp	w3, #0x7
     b98:	b.le	5bc8 <BZ2_compressBlock+0x59f8>
     b9c:	ldr	w4, [x24, #116]
     ba0:	ldr	x1, [x24, #80]
     ba4:	lsr	w0, w0, #24
     ba8:	strb	w0, [x1, w4, sxtw]
     bac:	ldr	w0, [x24, #640]
     bb0:	ldr	w4, [x24, #116]
     bb4:	ldr	w2, [x24, #644]
     bb8:	lsl	w0, w0, #8
     bbc:	add	w4, w4, #0x1
     bc0:	sub	w3, w2, #0x8
     bc4:	str	w4, [x24, #116]
     bc8:	str	w0, [x24, #640]
     bcc:	cmp	w3, #0x7
     bd0:	str	w3, [x24, #644]
     bd4:	b.gt	ba0 <BZ2_compressBlock+0x9d0>
     bd8:	mov	w1, #0x18                  	// #24
     bdc:	sub	w3, w1, w3
     be0:	mov	w1, #0x45                  	// #69
     be4:	str	w2, [x24, #644]
     be8:	lsl	w1, w1, w3
     bec:	orr	w1, w1, w0
     bf0:	str	w1, [x24, #640]
     bf4:	cmp	w2, #0x7
     bf8:	b.le	5bd0 <BZ2_compressBlock+0x5a00>
     bfc:	ldr	w0, [x24, #116]
     c00:	ldr	x2, [x24, #80]
     c04:	lsr	w1, w1, #24
     c08:	strb	w1, [x2, w0, sxtw]
     c0c:	ldr	w1, [x24, #640]
     c10:	ldr	w0, [x24, #116]
     c14:	ldr	w3, [x24, #644]
     c18:	lsl	w1, w1, #8
     c1c:	add	w0, w0, #0x1
     c20:	sub	w2, w3, #0x8
     c24:	str	w0, [x24, #116]
     c28:	str	w1, [x24, #640]
     c2c:	cmp	w2, #0x7
     c30:	str	w2, [x24, #644]
     c34:	b.gt	c00 <BZ2_compressBlock+0xa30>
     c38:	mov	w0, #0x18                  	// #24
     c3c:	sub	w2, w0, w2
     c40:	mov	w0, #0x38                  	// #56
     c44:	str	w3, [x24, #644]
     c48:	lsl	w0, w0, w2
     c4c:	orr	w1, w0, w1
     c50:	str	w1, [x24, #640]
     c54:	cmp	w3, #0x7
     c58:	b.le	5bd8 <BZ2_compressBlock+0x5a08>
     c5c:	ldr	w4, [x24, #116]
     c60:	ldr	x0, [x24, #80]
     c64:	lsr	w1, w1, #24
     c68:	strb	w1, [x0, w4, sxtw]
     c6c:	ldr	w1, [x24, #640]
     c70:	ldr	w4, [x24, #116]
     c74:	ldr	w2, [x24, #644]
     c78:	lsl	w1, w1, #8
     c7c:	add	w4, w4, #0x1
     c80:	sub	w3, w2, #0x8
     c84:	str	w4, [x24, #116]
     c88:	str	w1, [x24, #640]
     c8c:	cmp	w3, #0x7
     c90:	str	w3, [x24, #644]
     c94:	b.gt	c60 <BZ2_compressBlock+0xa90>
     c98:	mov	w0, #0x18                  	// #24
     c9c:	sub	w3, w0, w3
     ca0:	mov	w0, #0x50                  	// #80
     ca4:	str	w2, [x24, #644]
     ca8:	lsl	w0, w0, w3
     cac:	orr	w0, w0, w1
     cb0:	str	w0, [x24, #640]
     cb4:	cmp	w2, #0x7
     cb8:	b.le	5be0 <BZ2_compressBlock+0x5a10>
     cbc:	ldr	w1, [x24, #116]
     cc0:	ldr	x2, [x24, #80]
     cc4:	lsr	w0, w0, #24
     cc8:	strb	w0, [x2, w1, sxtw]
     ccc:	ldr	w0, [x24, #640]
     cd0:	ldr	w1, [x24, #116]
     cd4:	ldr	w3, [x24, #644]
     cd8:	lsl	w0, w0, #8
     cdc:	add	w1, w1, #0x1
     ce0:	sub	w2, w3, #0x8
     ce4:	str	w1, [x24, #116]
     ce8:	str	w0, [x24, #640]
     cec:	cmp	w2, #0x7
     cf0:	str	w2, [x24, #644]
     cf4:	b.gt	cc0 <BZ2_compressBlock+0xaf0>
     cf8:	ldr	w1, [x24, #652]
     cfc:	mov	w4, #0x18                  	// #24
     d00:	sub	w4, w4, w2
     d04:	mov	w2, #0x90                  	// #144
     d08:	str	w3, [x24, #644]
     d0c:	lsl	w2, w2, w4
     d10:	orr	w0, w2, w0
     d14:	str	w0, [x24, #640]
     d18:	mov	x0, x24
     d1c:	bl	0 <bsPutUInt32>
     d20:	ldr	w0, [x24, #656]
     d24:	cmp	w0, #0x1
     d28:	b.gt	5a00 <BZ2_compressBlock+0x5830>
     d2c:	ldr	w0, [x24, #644]
     d30:	cmp	w0, #0x0
     d34:	b.le	260 <BZ2_compressBlock+0x90>
     d38:	ldr	w1, [x24, #116]
     d3c:	ldr	w0, [x24, #640]
     d40:	ldr	x2, [x24, #80]
     d44:	lsr	w0, w0, #24
     d48:	strb	w0, [x2, w1, sxtw]
     d4c:	ldr	w0, [x24, #640]
     d50:	ldr	w1, [x24, #116]
     d54:	ldr	w2, [x24, #644]
     d58:	lsl	w0, w0, #8
     d5c:	add	w1, w1, #0x1
     d60:	sub	w2, w2, #0x8
     d64:	str	w1, [x24, #116]
     d68:	str	w0, [x24, #640]
     d6c:	cmp	w2, #0x0
     d70:	str	w2, [x24, #644]
     d74:	b.gt	d40 <BZ2_compressBlock+0xb70>
     d78:	ldp	x29, x30, [sp]
     d7c:	ldp	x23, x24, [sp, #48]
     d80:	add	sp, sp, #0x3d0
     d84:	ret
     d88:	mov	w0, #0x2                   	// #2
     d8c:	str	w0, [sp, #608]
     d90:	str	w0, [sp, #668]
     d94:	ldr	w3, [sp, #608]
     d98:	mov	w2, #0x102                 	// #258
     d9c:	mov	x0, #0x4059000000000000    	// #4636737291354636288
     da0:	adrp	x1, 0 <bsPutUInt32>
     da4:	mov	w26, w3
     da8:	fmov	d8, x0
     dac:	str	x23, [sp, #144]
     db0:	mov	w23, w3
     db4:	smaddl	x0, w3, w2, x24
     db8:	add	x7, x1, #0x0
     dbc:	sdiv	w3, w28, w26
     dc0:	lsr	w1, w22, #4
     dc4:	cmp	w23, w26
     dc8:	and	w25, w22, #0xfffffff0
     dcc:	str	w25, [sp, #636]
     dd0:	cset	w8, ne  // ne = any
     dd4:	str	w1, [sp, #664]
     dd8:	and	x1, x22, #0xfffffff0
     ddc:	str	x1, [sp, #592]
     de0:	cmp	w26, #0x1
     de4:	mov	x30, #0x924a                	// #37450
     de8:	add	x6, x0, x30
     dec:	mov	x11, x19
     df0:	cset	w4, ne  // ne = any
     df4:	mov	x19, x6
     df8:	mov	w27, #0x0                   	// #0
     dfc:	ldr	w6, [sp, #556]
     e00:	sub	w21, w27, #0x1
     e04:	cmp	w3, #0x0
     e08:	mov	w20, #0xf                   	// #15
     e0c:	b.le	11f8 <BZ2_compressBlock+0x1028>
     e10:	cmp	w21, w6
     e14:	b.ge	11f8 <BZ2_compressBlock+0x1028>  // b.tcont
     e18:	sxtw	x0, w27
     e1c:	sub	w1, w6, w27
     e20:	add	x2, x0, #0x1
     e24:	mov	w5, #0x0                   	// #0
     e28:	add	x1, x2, x1
     e2c:	b	e38 <BZ2_compressBlock+0xc68>
     e30:	cmp	x0, x1
     e34:	b.eq	e50 <BZ2_compressBlock+0xc80>  // b.none
     e38:	ldr	w2, [x11, x0, lsl #2]
     e3c:	mov	w21, w0
     e40:	add	x0, x0, #0x1
     e44:	add	w5, w5, w2
     e48:	cmp	w3, w5
     e4c:	b.gt	e30 <BZ2_compressBlock+0xc60>
     e50:	cmp	w8, #0x0
     e54:	ccmp	w4, #0x0, #0x4, ne  // ne = any
     e58:	cset	w0, ne  // ne = any
     e5c:	cmp	w21, w27
     e60:	cset	w1, gt
     e64:	and	w0, w0, w1
     e68:	cbnz	w0, 1200 <BZ2_compressBlock+0x1030>
     e6c:	ldr	w0, [x24, #656]
     e70:	add	w8, w21, #0x1
     e74:	cmp	w0, #0x2
     e78:	b.gt	1228 <BZ2_compressBlock+0x1058>
     e7c:	sub	w26, w26, #0x1
     e80:	cmp	w22, #0x0
     e84:	b.le	11c8 <BZ2_compressBlock+0xff8>
     e88:	cmp	w6, #0xe
     e8c:	b.ls	58b4 <BZ2_compressBlock+0x56e4>  // b.plast
     e90:	adrp	x2, 0 <bsPutUInt32>
     e94:	dup	v5.4s, w27
     e98:	ldr	x0, [sp, #592]
     e9c:	dup	v4.4s, w21
     ea0:	ldr	q18, [x2]
     ea4:	add	x1, x19, x0
     ea8:	movi	v23.4s, #0x10
     eac:	mov	x0, x19
     eb0:	movi	v22.4s, #0x4
     eb4:	movi	v21.4s, #0x8
     eb8:	movi	v20.4s, #0xc
     ebc:	movi	v19.16b, #0xf
     ec0:	mov	v0.16b, v18.16b
     ec4:	add	v18.4s, v18.4s, v23.4s
     ec8:	add	v3.4s, v0.4s, v22.4s
     ecc:	add	v2.4s, v0.4s, v21.4s
     ed0:	add	v1.4s, v0.4s, v20.4s
     ed4:	cmge	v17.4s, v4.4s, v0.4s
     ed8:	cmge	v16.4s, v4.4s, v3.4s
     edc:	cmge	v7.4s, v4.4s, v2.4s
     ee0:	cmge	v6.4s, v4.4s, v1.4s
     ee4:	cmge	v3.4s, v3.4s, v5.4s
     ee8:	cmge	v0.4s, v0.4s, v5.4s
     eec:	cmge	v2.4s, v2.4s, v5.4s
     ef0:	cmge	v1.4s, v1.4s, v5.4s
     ef4:	and	v3.16b, v16.16b, v3.16b
     ef8:	and	v0.16b, v17.16b, v0.16b
     efc:	and	v2.16b, v7.16b, v2.16b
     f00:	and	v1.16b, v6.16b, v1.16b
     f04:	xtn	v6.4h, v0.4s
     f08:	xtn2	v6.8h, v3.4s
     f0c:	xtn	v3.4h, v2.4s
     f10:	xtn2	v3.8h, v1.4s
     f14:	xtn	v0.8b, v6.8h
     f18:	xtn2	v0.16b, v3.8h
     f1c:	bic	v0.16b, v19.16b, v0.16b
     f20:	str	q0, [x0], #16
     f24:	cmp	x1, x0
     f28:	b.ne	ec0 <BZ2_compressBlock+0xcf0>  // b.any
     f2c:	cmp	w25, w22
     f30:	b.eq	11c8 <BZ2_compressBlock+0xff8>  // b.none
     f34:	mov	w1, w25
     f38:	sxtw	x0, w26
     f3c:	sbfiz	x2, x26, #7, #32
     f40:	add	x2, x2, x0
     f44:	cmp	w21, w1
     f48:	ccmp	w27, w1, #0x0, ge  // ge = tcont
     f4c:	add	x2, x24, x2, lsl #1
     f50:	add	x2, x2, w1, sxtw
     f54:	add	x2, x2, #0x9, lsl #12
     f58:	b.gt	128c <BZ2_compressBlock+0x10bc>
     f5c:	strb	wzr, [x2, #844]
     f60:	add	w2, w1, #0x1
     f64:	cmp	w2, w22
     f68:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
     f6c:	add	x3, x0, x0, lsl #7
     f70:	cmp	w21, w2
     f74:	ccmp	w27, w2, #0x0, ge  // ge = tcont
     f78:	add	x3, x24, x3, lsl #1
     f7c:	add	x2, x3, w2, sxtw
     f80:	add	x2, x2, #0x9, lsl #12
     f84:	b.gt	1294 <BZ2_compressBlock+0x10c4>
     f88:	strb	wzr, [x2, #844]
     f8c:	add	w2, w1, #0x2
     f90:	cmp	w2, w22
     f94:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
     f98:	add	x3, x0, x0, lsl #7
     f9c:	cmp	w21, w2
     fa0:	ccmp	w27, w2, #0x0, ge  // ge = tcont
     fa4:	add	x3, x24, x3, lsl #1
     fa8:	add	x2, x3, w2, sxtw
     fac:	add	x2, x2, #0x9, lsl #12
     fb0:	b.gt	129c <BZ2_compressBlock+0x10cc>
     fb4:	strb	wzr, [x2, #844]
     fb8:	add	w2, w1, #0x3
     fbc:	cmp	w2, w22
     fc0:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
     fc4:	add	x3, x0, x0, lsl #7
     fc8:	cmp	w21, w2
     fcc:	ccmp	w27, w2, #0x0, ge  // ge = tcont
     fd0:	add	x3, x24, x3, lsl #1
     fd4:	add	x2, x3, w2, sxtw
     fd8:	add	x2, x2, #0x9, lsl #12
     fdc:	b.gt	12a4 <BZ2_compressBlock+0x10d4>
     fe0:	strb	wzr, [x2, #844]
     fe4:	add	w2, w1, #0x4
     fe8:	cmp	w2, w22
     fec:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
     ff0:	add	x3, x0, x0, lsl #7
     ff4:	cmp	w21, w2
     ff8:	ccmp	w27, w2, #0x0, ge  // ge = tcont
     ffc:	add	x3, x24, x3, lsl #1
    1000:	add	x2, x3, w2, sxtw
    1004:	add	x2, x2, #0x9, lsl #12
    1008:	b.gt	12ac <BZ2_compressBlock+0x10dc>
    100c:	strb	wzr, [x2, #844]
    1010:	add	w2, w1, #0x5
    1014:	cmp	w2, w22
    1018:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    101c:	add	x3, x0, x0, lsl #7
    1020:	cmp	w21, w2
    1024:	ccmp	w27, w2, #0x0, ge  // ge = tcont
    1028:	add	x3, x24, x3, lsl #1
    102c:	add	x2, x3, w2, sxtw
    1030:	add	x2, x2, #0x9, lsl #12
    1034:	b.gt	12b4 <BZ2_compressBlock+0x10e4>
    1038:	strb	wzr, [x2, #844]
    103c:	add	w2, w1, #0x6
    1040:	cmp	w2, w22
    1044:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    1048:	add	x3, x0, x0, lsl #7
    104c:	cmp	w21, w2
    1050:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    1054:	add	x3, x24, x3, lsl #1
    1058:	add	x2, x3, w2, sxtw
    105c:	add	x2, x2, #0x9, lsl #12
    1060:	b.lt	12bc <BZ2_compressBlock+0x10ec>  // b.tstop
    1064:	strb	wzr, [x2, #844]
    1068:	add	w2, w1, #0x7
    106c:	cmp	w2, w22
    1070:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    1074:	add	x3, x0, x0, lsl #7
    1078:	cmp	w21, w2
    107c:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    1080:	add	x3, x24, x3, lsl #1
    1084:	add	x2, x3, w2, sxtw
    1088:	add	x2, x2, #0x9, lsl #12
    108c:	b.lt	12c4 <BZ2_compressBlock+0x10f4>  // b.tstop
    1090:	strb	wzr, [x2, #844]
    1094:	add	w2, w1, #0x8
    1098:	cmp	w2, w22
    109c:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    10a0:	add	x3, x0, x0, lsl #7
    10a4:	cmp	w21, w2
    10a8:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    10ac:	add	x3, x24, x3, lsl #1
    10b0:	add	x2, x3, w2, sxtw
    10b4:	add	x2, x2, #0x9, lsl #12
    10b8:	b.lt	5074 <BZ2_compressBlock+0x4ea4>  // b.tstop
    10bc:	strb	wzr, [x2, #844]
    10c0:	add	w2, w1, #0x9
    10c4:	cmp	w2, w22
    10c8:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    10cc:	add	x3, x0, x0, lsl #7
    10d0:	cmp	w21, w2
    10d4:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    10d8:	add	x3, x24, x3, lsl #1
    10dc:	add	x2, x3, w2, sxtw
    10e0:	add	x2, x2, #0x9, lsl #12
    10e4:	b.lt	5094 <BZ2_compressBlock+0x4ec4>  // b.tstop
    10e8:	strb	wzr, [x2, #844]
    10ec:	add	w2, w1, #0xa
    10f0:	cmp	w2, w22
    10f4:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    10f8:	add	x3, x0, x0, lsl #7
    10fc:	cmp	w21, w2
    1100:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    1104:	add	x3, x24, x3, lsl #1
    1108:	add	x2, x3, w2, sxtw
    110c:	add	x2, x2, #0x9, lsl #12
    1110:	b.lt	509c <BZ2_compressBlock+0x4ecc>  // b.tstop
    1114:	strb	wzr, [x2, #844]
    1118:	add	w2, w1, #0xb
    111c:	cmp	w2, w22
    1120:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    1124:	add	x3, x0, x0, lsl #7
    1128:	cmp	w21, w2
    112c:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    1130:	add	x3, x24, x3, lsl #1
    1134:	add	x2, x3, w2, sxtw
    1138:	add	x2, x2, #0x9, lsl #12
    113c:	b.lt	50b8 <BZ2_compressBlock+0x4ee8>  // b.tstop
    1140:	strb	wzr, [x2, #844]
    1144:	add	w2, w1, #0xc
    1148:	cmp	w2, w22
    114c:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    1150:	add	x3, x0, x0, lsl #7
    1154:	cmp	w21, w2
    1158:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    115c:	add	x3, x24, x3, lsl #1
    1160:	add	x2, x3, w2, sxtw
    1164:	add	x2, x2, #0x9, lsl #12
    1168:	b.lt	50c8 <BZ2_compressBlock+0x4ef8>  // b.tstop
    116c:	strb	wzr, [x2, #844]
    1170:	add	w2, w1, #0xd
    1174:	cmp	w2, w22
    1178:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    117c:	add	x3, x0, x0, lsl #7
    1180:	cmp	w21, w2
    1184:	ccmp	w2, w27, #0x1, ge  // ge = tcont
    1188:	add	x3, x24, x3, lsl #1
    118c:	add	x2, x3, w2, sxtw
    1190:	add	x2, x2, #0x9, lsl #12
    1194:	b.lt	589c <BZ2_compressBlock+0x56cc>  // b.tstop
    1198:	strb	wzr, [x2, #844]
    119c:	add	w1, w1, #0xe
    11a0:	cmp	w1, w22
    11a4:	b.ge	11c8 <BZ2_compressBlock+0xff8>  // b.tcont
    11a8:	add	x0, x0, x0, lsl #7
    11ac:	cmp	w21, w1
    11b0:	ccmp	w1, w27, #0x1, ge  // ge = tcont
    11b4:	add	x0, x24, x0, lsl #1
    11b8:	add	x1, x0, w1, sxtw
    11bc:	add	x1, x1, #0x9, lsl #12
    11c0:	b.ge	58bc <BZ2_compressBlock+0x56ec>  // b.tcont
    11c4:	strb	w20, [x1, #844]
    11c8:	sub	w28, w28, w5
    11cc:	sub	x19, x19, #0x102
    11d0:	cbz	w26, 12cc <BZ2_compressBlock+0x10fc>
    11d4:	sdiv	w3, w28, w26
    11d8:	cmp	w23, w26
    11dc:	mov	w27, w8
    11e0:	cset	w8, ne  // ne = any
    11e4:	cmp	w26, #0x1
    11e8:	sub	w21, w27, #0x1
    11ec:	cset	w4, ne  // ne = any
    11f0:	cmp	w3, #0x0
    11f4:	b.gt	e10 <BZ2_compressBlock+0xc40>
    11f8:	mov	w5, #0x0                   	// #0
    11fc:	b	e6c <BZ2_compressBlock+0xc9c>
    1200:	sub	w0, w23, w26
    1204:	tbz	w0, #0, e6c <BZ2_compressBlock+0xc9c>
    1208:	add	x0, x24, w21, sxtw #2
    120c:	mov	w8, w21
    1210:	sub	w21, w21, #0x1
    1214:	ldr	w0, [x0, #672]
    1218:	sub	w5, w5, w0
    121c:	ldr	w0, [x24, #656]
    1220:	cmp	w0, #0x2
    1224:	b.le	e7c <BZ2_compressBlock+0xcac>
    1228:	scvtf	s1, w5
    122c:	ldr	s0, [x24, #668]
    1230:	adrp	x0, 0 <stderr>
    1234:	mov	x1, x7
    1238:	mov	w4, w21
    123c:	mov	w3, w27
    1240:	scvtf	s0, s0
    1244:	mov	w2, w26
    1248:	fcvt	d1, s1
    124c:	str	w8, [sp, #112]
    1250:	ldr	x0, [x0]
    1254:	str	x11, [sp, #128]
    1258:	fcvt	d0, s0
    125c:	str	w6, [sp, #136]
    1260:	fmul	d1, d1, d8
    1264:	str	w5, [sp, #160]
    1268:	fdiv	d0, d1, d0
    126c:	bl	0 <fprintf>
    1270:	adrp	x0, 0 <bsPutUInt32>
    1274:	ldr	w8, [sp, #112]
    1278:	ldr	w6, [sp, #136]
    127c:	add	x7, x0, #0x0
    1280:	ldr	w5, [sp, #160]
    1284:	ldr	x11, [sp, #128]
    1288:	b	e7c <BZ2_compressBlock+0xcac>
    128c:	strb	w20, [x2, #844]
    1290:	b	f60 <BZ2_compressBlock+0xd90>
    1294:	strb	w20, [x2, #844]
    1298:	b	f8c <BZ2_compressBlock+0xdbc>
    129c:	strb	w20, [x2, #844]
    12a0:	b	fb8 <BZ2_compressBlock+0xde8>
    12a4:	strb	w20, [x2, #844]
    12a8:	b	fe4 <BZ2_compressBlock+0xe14>
    12ac:	strb	w20, [x2, #844]
    12b0:	b	1010 <BZ2_compressBlock+0xe40>
    12b4:	strb	w20, [x2, #844]
    12b8:	b	103c <BZ2_compressBlock+0xe6c>
    12bc:	strb	w20, [x2, #844]
    12c0:	b	1068 <BZ2_compressBlock+0xe98>
    12c4:	strb	w20, [x2, #844]
    12c8:	b	1094 <BZ2_compressBlock+0xec4>
    12cc:	mov	x25, #0xb590                	// #46480
    12d0:	ldr	w2, [sp, #556]
    12d4:	add	x4, x24, x25
    12d8:	ldr	w25, [sp, #608]
    12dc:	add	x7, x2, #0x1
    12e0:	mov	w5, #0x408                 	// #1032
    12e4:	sub	w1, w25, #0x1
    12e8:	mov	x27, #0x944e                	// #37966
    12ec:	ldp	x23, x2, [sp, #144]
    12f0:	mov	x0, x1
    12f4:	add	x1, x1, #0x1
    12f8:	add	x6, x24, x27
    12fc:	mov	w3, #0x102                 	// #258
    1300:	str	w22, [sp, #548]
    1304:	umaddl	x4, w0, w5, x4
    1308:	mov	x22, x24
    130c:	str	x4, [sp, #616]
    1310:	lsl	x4, x1, #2
    1314:	lsl	x1, x1, #1
    1318:	add	x2, x2, #0x4
    131c:	str	x1, [sp, #576]
    1320:	lsl	x1, x7, #2
    1324:	str	x1, [sp, #624]
    1328:	add	x1, x2, w0, uxtw #2
    132c:	umaddl	x0, w0, w3, x6
    1330:	mov	x28, #0xb188                	// #45448
    1334:	str	wzr, [sp, #544]
    1338:	str	x0, [sp, #568]
    133c:	add	x0, x24, x28
    1340:	str	x0, [sp, #560]
    1344:	str	x4, [sp, #600]
    1348:	str	w26, [sp, #632]
    134c:	str	x6, [sp, #640]
    1350:	str	x7, [sp, #648]
    1354:	str	x23, [sp, #656]
    1358:	str	x1, [sp, #680]
    135c:	ldr	x0, [sp, #152]
    1360:	mov	w1, #0x0                   	// #0
    1364:	ldr	x2, [sp, #600]
    1368:	bl	0 <memset>
    136c:	ldr	w0, [sp, #548]
    1370:	ldr	x19, [sp, #560]
    1374:	cmp	w0, #0x0
    1378:	b.le	13ac <BZ2_compressBlock+0x11dc>
    137c:	ldr	x20, [sp, #616]
    1380:	ldr	x21, [sp, #624]
    1384:	nop
    1388:	mov	x0, x19
    138c:	mov	x2, x21
    1390:	add	x19, x19, #0x408
    1394:	mov	w1, #0x0                   	// #0
    1398:	bl	0 <memset>
    139c:	cmp	x20, x19
    13a0:	b.ne	1388 <BZ2_compressBlock+0x11b8>  // b.any
    13a4:	cmp	w25, #0x6
    13a8:	b.eq	5130 <BZ2_compressBlock+0x4f60>  // b.none
    13ac:	ldr	w0, [x22, #668]
    13b0:	str	w0, [sp, #164]
    13b4:	cmp	w0, #0x0
    13b8:	b.le	5a2c <BZ2_compressBlock+0x585c>
    13bc:	mov	x1, #0x1                   	// #1
    13c0:	sub	w0, w0, #0x1
    13c4:	mov	w19, #0x0                   	// #0
    13c8:	mov	w28, w19
    13cc:	str	wzr, [sp, #128]
    13d0:	str	x1, [sp, #136]
    13d4:	add	x1, x22, #0x6a7
    13d8:	str	w25, [sp, #160]
    13dc:	str	x1, [sp, #168]
    13e0:	str	w0, [sp, #552]
    13e4:	b	25bc <BZ2_compressBlock+0x23ec>
    13e8:	ldr	x2, [sp, #576]
    13ec:	add	w0, w28, #0x32
    13f0:	mov	w1, #0x0                   	// #0
    13f4:	str	w0, [sp, #144]
    13f8:	add	x0, sp, #0x2b0
    13fc:	bl	0 <memset>
    1400:	ldr	w0, [sp, #160]
    1404:	cmp	w0, #0x6
    1408:	b.ne	25fc <BZ2_compressBlock+0x242c>  // b.any
    140c:	ldr	w0, [sp, #112]
    1410:	sub	w0, w0, w28
    1414:	cmp	w0, #0x31
    1418:	b.ne	25fc <BZ2_compressBlock+0x242c>  // b.any
    141c:	ldr	x2, [sp, #120]
    1420:	sbfiz	x0, x28, #1, #32
    1424:	str	x0, [sp, #400]
    1428:	add	x0, x2, x0
    142c:	ldrh	w3, [x0, #8]
    1430:	ldrh	w2, [x0, #2]
    1434:	ldrh	w1, [x0, #4]
    1438:	add	x15, x3, #0xc9b
    143c:	ldrh	w30, [x0, #6]
    1440:	add	x18, x2, #0xc9b
    1444:	ldrh	w6, [x0, #26]
    1448:	add	x17, x1, #0xc9b
    144c:	ldrh	w5, [x0, #14]
    1450:	add	x16, x30, #0xc9b
    1454:	ldrh	w4, [x0, #28]
    1458:	add	x18, x22, x18, lsl #4
    145c:	stp	x6, x4, [sp, #192]
    1460:	add	x6, x6, #0xc9b
    1464:	add	x12, x5, #0xc9b
    1468:	add	x17, x22, x17, lsl #4
    146c:	add	x16, x22, x16, lsl #4
    1470:	add	x15, x22, x15, lsl #4
    1474:	ldrh	w27, [x0, #10]
    1478:	ldrh	w26, [x0, #12]
    147c:	add	x6, x22, x6, lsl #4
    1480:	ldrh	w19, [x0, #24]
    1484:	add	x12, x22, x12, lsl #4
    1488:	ldrh	w24, [x0, #16]
    148c:	add	x14, x27, #0xc9b
    1490:	ldrh	w23, [x0, #18]
    1494:	add	x13, x26, #0xc9b
    1498:	ldrh	w21, [x0, #20]
    149c:	add	x11, x24, #0xc9b
    14a0:	ldrh	w20, [x0, #22]
    14a4:	add	x10, x23, #0xc9b
    14a8:	stp	x3, x5, [sp, #176]
    14ac:	add	x9, x21, #0xc9b
    14b0:	ldrh	w5, [x0, #32]
    14b4:	ldrh	w3, [x0, #30]
    14b8:	add	x8, x20, #0xc9b
    14bc:	ldr	w16, [x16, #8]
    14c0:	mov	x25, x5
    14c4:	ldr	w17, [x17, #8]
    14c8:	add	x7, x19, #0xc9b
    14cc:	ldr	w18, [x18, #8]
    14d0:	add	x30, x22, x30, lsl #4
    14d4:	ldr	w15, [x15, #8]
    14d8:	add	x5, x4, #0xc9b
    14dc:	str	x3, [sp, #208]
    14e0:	add	x14, x22, x14, lsl #4
    14e4:	str	x30, [sp, #216]
    14e8:	add	x13, x22, x13, lsl #4
    14ec:	str	w18, [sp, #344]
    14f0:	add	x8, x22, x8, lsl #4
    14f4:	str	w17, [sp, #352]
    14f8:	add	x7, x22, x7, lsl #4
    14fc:	str	w16, [sp, #360]
    1500:	add	x5, x22, x5, lsl #4
    1504:	str	w15, [sp, #368]
    1508:	add	x11, x22, x11, lsl #4
    150c:	ldr	x15, [sp, #176]
    1510:	add	x10, x22, x10, lsl #4
    1514:	ldr	w17, [x6, #8]
    1518:	add	x9, x22, x9, lsl #4
    151c:	ldr	x6, [sp, #192]
    1520:	add	x16, x22, x19, lsl #4
    1524:	ldr	w12, [x12, #8]
    1528:	add	x27, x22, x27, lsl #4
    152c:	str	w12, [sp, #392]
    1530:	add	x26, x22, x26, lsl #4
    1534:	ldr	x12, [sp, #184]
    1538:	add	x6, x22, x6, lsl #4
    153c:	ldr	w13, [x13, #8]
    1540:	add	x24, x22, x24, lsl #4
    1544:	ldr	w14, [x14, #8]
    1548:	add	x23, x22, x23, lsl #4
    154c:	ldr	w9, [x9, #8]
    1550:	add	x21, x22, x21, lsl #4
    1554:	ldr	w10, [x10, #8]
    1558:	add	x15, x22, x15, lsl #4
    155c:	ldr	w11, [x11, #8]
    1560:	add	x12, x22, x12, lsl #4
    1564:	str	x6, [sp, #272]
    1568:	add	x4, x3, #0xc9b
    156c:	ldr	w6, [x5, #8]
    1570:	add	x3, x25, #0xc9b
    1574:	str	w14, [sp, #376]
    1578:	add	x2, x22, x2, lsl #4
    157c:	ldr	w14, [x7, #8]
    1580:	add	x1, x22, x1, lsl #4
    1584:	str	w13, [sp, #384]
    1588:	add	x3, x22, x3, lsl #4
    158c:	ldr	w13, [x8, #8]
    1590:	add	x4, x22, x4, lsl #4
    1594:	str	x15, [sp, #176]
    1598:	add	x15, x2, #0xc, lsl #12
    159c:	str	x12, [sp, #184]
    15a0:	add	x20, x22, x20, lsl #4
    15a4:	stp	x27, x26, [sp, #224]
    15a8:	add	x20, x20, #0xc, lsl #12
    15ac:	stp	x24, x23, [sp, #240]
    15b0:	stp	x21, x16, [sp, #256]
    15b4:	str	w11, [sp, #408]
    15b8:	str	w10, [sp, #416]
    15bc:	str	w9, [sp, #420]
    15c0:	str	w13, [sp, #424]
    15c4:	str	w14, [sp, #428]
    15c8:	str	w17, [sp, #432]
    15cc:	add	x17, x1, #0xc, lsl #12
    15d0:	str	w6, [sp, #436]
    15d4:	ldr	x5, [sp, #200]
    15d8:	stp	x15, x17, [sp, #488]
    15dc:	ldrh	w14, [x0, #38]
    15e0:	ldrh	w16, [x0, #34]
    15e4:	add	x18, x22, x5, lsl #4
    15e8:	add	x2, x14, #0xc9b
    15ec:	ldr	x5, [sp, #208]
    15f0:	add	x1, x16, #0xc9b
    15f4:	add	x2, x22, x2, lsl #4
    15f8:	ldr	w23, [x3, #8]
    15fc:	add	x1, x22, x1, lsl #4
    1600:	add	x3, x22, x25, lsl #4
    1604:	mov	x25, x2
    1608:	ldrh	w13, [x0, #40]
    160c:	ldrh	w8, [x0, #50]
    1610:	add	x21, x22, x5, lsl #4
    1614:	ldrh	w15, [x0, #36]
    1618:	add	x27, x13, #0xc9b
    161c:	stp	x18, x21, [sp, #280]
    1620:	add	x18, sp, #0x1c0
    1624:	ldrh	w7, [x0, #52]
    1628:	ldrh	w6, [x0, #54]
    162c:	add	x19, x8, #0xc9b
    1630:	ldr	w1, [x1, #8]
    1634:	add	x30, x15, #0xc9b
    1638:	ldr	w4, [x4, #8]
    163c:	add	x19, x22, x19, lsl #4
    1640:	ldr	w25, [x25, #8]
    1644:	add	x17, x6, #0xc9b
    1648:	stp	w4, w23, [x18, #-8]
    164c:	add	x27, x22, x27, lsl #4
    1650:	stp	w1, w25, [x18]
    1654:	add	x18, x7, #0xc9b
    1658:	add	x30, x22, x30, lsl #4
    165c:	add	x17, x22, x17, lsl #4
    1660:	add	x18, x22, x18, lsl #4
    1664:	ldrh	w1, [x0, #64]
    1668:	ldrh	w12, [x0, #42]
    166c:	add	x7, x22, x7, lsl #4
    1670:	ldrh	w11, [x0, #44]
    1674:	add	x7, x7, #0xc, lsl #12
    1678:	ldrh	w10, [x0, #46]
    167c:	add	x26, x12, #0xc9b
    1680:	ldrh	w9, [x0, #48]
    1684:	add	x24, x11, #0xc9b
    1688:	ldrh	w2, [x0, #62]
    168c:	add	x23, x10, #0xc9b
    1690:	ldrh	w5, [x0, #56]
    1694:	add	x21, x9, #0xc9b
    1698:	ldrh	w4, [x0, #58]
    169c:	add	x26, x22, x26, lsl #4
    16a0:	ldr	w30, [x30, #8]
    16a4:	add	x24, x22, x24, lsl #4
    16a8:	str	x3, [sp, #296]
    16ac:	add	x23, x22, x23, lsl #4
    16b0:	ldrh	w3, [x0, #60]
    16b4:	add	x21, x22, x21, lsl #4
    16b8:	ldr	w27, [x27, #8]
    16bc:	add	x8, x22, x8, lsl #4
    16c0:	ldr	w25, [x19, #8]
    16c4:	add	x8, x8, #0xc, lsl #12
    16c8:	ldr	x19, [sp, #216]
    16cc:	str	x20, [sp, #192]
    16d0:	ldr	w18, [x18, #8]
    16d4:	add	x14, x22, x14, lsl #4
    16d8:	str	w18, [sp, #460]
    16dc:	add	x6, x22, x6, lsl #4
    16e0:	ldr	w18, [x17, #8]
    16e4:	add	x17, x5, #0xc9b
    16e8:	str	w18, [sp, #464]
    16ec:	add	x18, x19, #0xc, lsl #12
    16f0:	ldr	x19, [sp, #176]
    16f4:	add	x17, x22, x17, lsl #4
    16f8:	ldr	x20, [sp, #264]
    16fc:	add	x19, x19, #0xc, lsl #12
    1700:	stp	x18, x19, [sp, #472]
    1704:	add	x5, x22, x5, lsl #4
    1708:	add	x20, x20, #0xc, lsl #12
    170c:	ldr	x19, [sp, #224]
    1710:	str	x20, [sp, #200]
    1714:	ldr	x20, [sp, #272]
    1718:	add	x18, x19, #0xc, lsl #12
    171c:	ldr	x19, [sp, #232]
    1720:	add	x20, x20, #0xc, lsl #12
    1724:	str	w25, [sp, #456]
    1728:	add	x5, x5, #0xc, lsl #12
    172c:	add	x19, x19, #0xc, lsl #12
    1730:	stp	x18, x19, [sp, #504]
    1734:	ldr	w21, [x21, #8]
    1738:	ldr	x19, [sp, #184]
    173c:	add	x14, x14, #0xc, lsl #12
    1740:	ldr	w26, [x26, #8]
    1744:	add	x6, x6, #0xc, lsl #12
    1748:	add	x18, x19, #0xc, lsl #12
    174c:	str	x18, [sp, #520]
    1750:	ldr	x19, [sp, #240]
    1754:	add	x13, x22, x13, lsl #4
    1758:	ldr	w18, [x17, #8]
    175c:	add	x17, x4, #0xc9b
    1760:	add	x19, x19, #0xc, lsl #12
    1764:	str	x19, [sp, #176]
    1768:	ldr	x19, [sp, #248]
    176c:	add	x17, x22, x17, lsl #4
    1770:	ldr	w23, [x23, #8]
    1774:	add	x4, x22, x4, lsl #4
    1778:	add	x19, x19, #0xc, lsl #12
    177c:	str	x19, [sp, #184]
    1780:	ldr	x19, [sp, #256]
    1784:	add	x9, x22, x9, lsl #4
    1788:	ldr	w24, [x24, #8]
    178c:	add	x13, x13, #0xc, lsl #12
    1790:	add	x19, x19, #0xc, lsl #12
    1794:	str	x19, [sp, #528]
    1798:	str	x20, [sp, #208]
    179c:	add	x9, x9, #0xc, lsl #12
    17a0:	ldr	x20, [sp, #280]
    17a4:	stp	x8, x7, [sp, #304]
    17a8:	add	x7, x1, #0xc9b
    17ac:	add	x20, x20, #0xc, lsl #12
    17b0:	str	x20, [sp, #216]
    17b4:	ldr	x20, [sp, #288]
    17b8:	stp	x6, x5, [sp, #320]
    17bc:	ldr	w8, [sp, #352]
    17c0:	add	x5, x4, #0xc, lsl #12
    17c4:	add	x4, x22, x7, lsl #4
    17c8:	ldr	w7, [sp, #344]
    17cc:	add	x20, x20, #0xc, lsl #12
    17d0:	ldr	w19, [x17, #8]
    17d4:	add	x17, x3, #0xc9b
    17d8:	stp	x14, x13, [sp, #256]
    17dc:	add	x14, x2, #0xc9b
    17e0:	add	w7, w7, w8
    17e4:	ldr	w8, [sp, #360]
    17e8:	add	x14, x22, x14, lsl #4
    17ec:	str	x20, [sp, #224]
    17f0:	add	x17, x22, x17, lsl #4
    17f4:	ldr	x20, [sp, #296]
    17f8:	str	x9, [sp, #296]
    17fc:	ldr	w9, [sp, #368]
    1800:	add	x16, x22, x16, lsl #4
    1804:	add	x2, x22, x2, lsl #4
    1808:	add	x16, x16, #0xc, lsl #12
    180c:	add	x15, x22, x15, lsl #4
    1810:	add	x2, x2, #0xc, lsl #12
    1814:	add	x12, x22, x12, lsl #4
    1818:	add	x11, x22, x11, lsl #4
    181c:	add	x10, x22, x10, lsl #4
    1820:	add	x3, x22, x3, lsl #4
    1824:	stp	x5, x2, [sp, #336]
    1828:	add	x5, x22, x1, lsl #4
    182c:	add	w1, w8, w9
    1830:	ldr	w8, [x4, #8]
    1834:	add	x12, x12, #0xc, lsl #12
    1838:	add	x11, x11, #0xc, lsl #12
    183c:	add	x10, x10, #0xc, lsl #12
    1840:	add	x3, x3, #0xc, lsl #12
    1844:	add	x20, x20, #0xc, lsl #12
    1848:	str	x20, [sp, #232]
    184c:	add	w1, w7, w1
    1850:	str	x16, [sp, #240]
    1854:	add	x16, x15, #0xc, lsl #12
    1858:	str	x16, [sp, #248]
    185c:	add	w24, w26, w24
    1860:	str	x12, [sp, #272]
    1864:	add	w23, w23, w21
    1868:	str	x11, [sp, #280]
    186c:	str	x10, [sp, #288]
    1870:	str	w8, [sp, #468]
    1874:	str	x3, [sp, #536]
    1878:	add	x3, x5, #0xc, lsl #12
    187c:	ldr	w13, [x17, #8]
    1880:	ldrh	w2, [x0, #68]
    1884:	ldrh	w4, [x0, #66]
    1888:	add	w19, w19, w13
    188c:	ldr	w6, [x14, #8]
    1890:	str	x3, [sp, #352]
    1894:	add	x3, x4, #0xc9b
    1898:	ldr	w7, [sp, #376]
    189c:	add	x4, x22, x4, lsl #4
    18a0:	ldr	w10, [sp, #384]
    18a4:	add	x3, x22, x3, lsl #4
    18a8:	ldr	w11, [sp, #392]
    18ac:	add	w5, w7, w10
    18b0:	add	x10, x4, #0xc, lsl #12
    18b4:	add	w1, w1, w5
    18b8:	ldr	w5, [sp, #408]
    18bc:	str	x10, [sp, #360]
    18c0:	add	w4, w11, w5
    18c4:	ldr	w11, [sp, #416]
    18c8:	ldr	w5, [sp, #420]
    18cc:	add	w1, w1, w4
    18d0:	ldr	w10, [sp, #428]
    18d4:	add	w5, w11, w5
    18d8:	ldr	w11, [sp, #424]
    18dc:	ldr	w12, [x3, #8]
    18e0:	add	x3, x2, #0xc9b
    18e4:	add	x2, x22, x2, lsl #4
    18e8:	add	w4, w11, w10
    18ec:	ldr	w10, [sp, #436]
    18f0:	add	x11, x2, #0xc, lsl #12
    18f4:	ldr	w2, [sp, #432]
    18f8:	add	w1, w1, w5
    18fc:	ldrh	w9, [x0, #70]
    1900:	add	w1, w1, w4
    1904:	add	w2, w2, w10
    1908:	ldr	w10, [sp, #440]
    190c:	str	x11, [sp, #368]
    1910:	add	x3, x22, x3, lsl #4
    1914:	ldr	w11, [sp, #444]
    1918:	add	w1, w1, w2
    191c:	ldrh	w8, [x0, #72]
    1920:	add	w11, w10, w11
    1924:	add	x10, x9, #0xc9b
    1928:	add	x9, x22, x9, lsl #4
    192c:	ldrh	w7, [x0, #74]
    1930:	add	x9, x9, #0xc, lsl #12
    1934:	ldr	w25, [sp, #448]
    1938:	str	x9, [sp, #376]
    193c:	add	x9, x8, #0xc9b
    1940:	add	x8, x22, x8, lsl #4
    1944:	add	w30, w25, w30
    1948:	add	x16, x22, x9, lsl #4
    194c:	ldr	w25, [sp, #452]
    1950:	add	x10, x22, x10, lsl #4
    1954:	add	x8, x8, #0xc, lsl #12
    1958:	add	w1, w1, w11
    195c:	str	x8, [sp, #384]
    1960:	add	x8, x7, #0xc9b
    1964:	add	x7, x22, x7, lsl #4
    1968:	add	w27, w25, w27
    196c:	add	x26, x7, #0xc, lsl #12
    1970:	add	w30, w1, w30
    1974:	ldrh	w5, [x0, #76]
    1978:	ldrh	w2, [x0, #80]
    197c:	add	w30, w30, w27
    1980:	ldrh	w9, [x0, #84]
    1984:	add	x20, x22, x8, lsl #4
    1988:	ldr	w17, [x16, #8]
    198c:	add	w30, w30, w24
    1990:	ldrh	w16, [x0, #86]
    1994:	add	w30, w30, w23
    1998:	ldrh	w8, [x0, #88]
    199c:	add	x7, x5, #0xc9b
    19a0:	ldr	w4, [x3, #8]
    19a4:	add	x5, x22, x5, lsl #4
    19a8:	ldrh	w3, [x0, #78]
    19ac:	add	x1, x22, x7, lsl #4
    19b0:	ldr	w15, [x10, #8]
    19b4:	add	w4, w12, w4
    19b8:	ldrh	w10, [x0, #82]
    19bc:	add	x27, x5, #0xc, lsl #12
    19c0:	str	x26, [sp, #392]
    19c4:	add	x5, x3, #0xc9b
    19c8:	ldr	w25, [sp, #456]
    19cc:	add	w15, w15, w17
    19d0:	ldr	w26, [sp, #460]
    19d4:	add	x21, x22, x5, lsl #4
    19d8:	ldrh	w11, [x0, #90]
    19dc:	add	x3, x22, x3, lsl #4
    19e0:	add	w23, w25, w26
    19e4:	ldr	w25, [sp, #464]
    19e8:	add	w30, w30, w23
    19ec:	add	x26, x10, #0xc9b
    19f0:	add	w18, w25, w18
    19f4:	ldr	w25, [sp, #468]
    19f8:	add	w30, w30, w18
    19fc:	add	x26, x22, x26, lsl #4
    1a00:	add	w6, w6, w25
    1a04:	add	w30, w30, w19
    1a08:	add	w30, w30, w6
    1a0c:	ldrh	w14, [x0, #94]
    1a10:	add	w30, w30, w4
    1a14:	add	x4, x16, #0xc9b
    1a18:	ldr	w23, [x26, #8]
    1a1c:	add	x26, x9, #0xc9b
    1a20:	add	x4, x22, x4, lsl #4
    1a24:	ldr	w1, [x1, #8]
    1a28:	add	x26, x22, x26, lsl #4
    1a2c:	ldr	w20, [x20, #8]
    1a30:	ldrh	w5, [x0, #96]
    1a34:	add	w30, w30, w15
    1a38:	ldr	w18, [x4, #8]
    1a3c:	add	x4, x11, #0xc9b
    1a40:	ldr	w13, [x26, #8]
    1a44:	add	w20, w20, w1
    1a48:	add	x4, x22, x4, lsl #4
    1a4c:	add	x1, x14, #0xc9b
    1a50:	add	x26, x8, #0xc9b
    1a54:	ldr	w24, [x21, #8]
    1a58:	add	x21, x2, #0xc9b
    1a5c:	ldrh	w7, [x0, #92]
    1a60:	ldr	w6, [x4, #8]
    1a64:	add	x26, x22, x26, lsl #4
    1a68:	add	x4, x22, x14, lsl #4
    1a6c:	add	x14, x22, x1, lsl #4
    1a70:	add	x1, x5, #0xc9b
    1a74:	add	x21, x22, x21, lsl #4
    1a78:	ldr	w12, [x26, #8]
    1a7c:	add	x26, x4, #0xc, lsl #12
    1a80:	add	x1, x22, x1, lsl #4
    1a84:	str	x27, [sp, #408]
    1a88:	add	x27, x7, #0xc9b
    1a8c:	ldr	w21, [x21, #8]
    1a90:	add	w18, w18, w12
    1a94:	add	w30, w30, w20
    1a98:	ldr	w12, [x1, #8]
    1a9c:	add	x27, x22, x27, lsl #4
    1aa0:	ldr	x4, [sp, #120]
    1aa4:	add	w24, w24, w21
    1aa8:	ldr	x1, [sp, #400]
    1aac:	add	w23, w23, w13
    1ab0:	ldr	w19, [x27, #8]
    1ab4:	add	w30, w30, w24
    1ab8:	ldrh	w0, [x0, #98]
    1abc:	add	w30, w30, w23
    1ac0:	ldrh	w27, [x4, x1]
    1ac4:	add	w6, w6, w19
    1ac8:	add	w30, w30, w18
    1acc:	add	x4, x0, #0xc9b
    1ad0:	ldp	x18, x19, [sp, #472]
    1ad4:	add	x1, x27, #0xc9b
    1ad8:	ldr	x15, [sp, #488]
    1adc:	add	x1, x22, x1, lsl #4
    1ae0:	add	x4, x22, x4, lsl #4
    1ae4:	ldr	w14, [x14, #8]
    1ae8:	add	w30, w30, w6
    1aec:	add	x2, x22, x2, lsl #4
    1af0:	ldr	w6, [x18, #2492]
    1af4:	add	w14, w14, w12
    1af8:	ldr	w4, [x4, #8]
    1afc:	add	w30, w30, w14
    1b00:	ldr	w12, [x19, #2492]
    1b04:	add	x3, x3, #0xc, lsl #12
    1b08:	ldr	w1, [x1, #8]
    1b0c:	add	x2, x2, #0xc, lsl #12
    1b10:	ldr	w13, [x15, #2492]
    1b14:	add	x10, x22, x10, lsl #4
    1b18:	ldp	x17, x20, [sp, #496]
    1b1c:	add	w1, w1, w4
    1b20:	add	w30, w30, w1
    1b24:	add	w4, w6, w12
    1b28:	ldr	x21, [sp, #512]
    1b2c:	add	x9, x22, x9, lsl #4
    1b30:	ldr	x24, [sp, #520]
    1b34:	add	x9, x9, #0xc, lsl #12
    1b38:	ldr	w1, [x17, #2492]
    1b3c:	add	x10, x10, #0xc, lsl #12
    1b40:	ldr	w6, [x20, #2492]
    1b44:	add	x8, x22, x8, lsl #4
    1b48:	add	w1, w13, w1
    1b4c:	ldr	w12, [x21, #2492]
    1b50:	add	w1, w4, w1
    1b54:	ldr	w13, [x24, #2492]
    1b58:	ldr	x4, [sp, #176]
    1b5c:	add	x16, x22, x16, lsl #4
    1b60:	ldr	x25, [sp, #528]
    1b64:	add	x8, x8, #0xc, lsl #12
    1b68:	ldr	w14, [x4, #2492]
    1b6c:	add	w4, w6, w12
    1b70:	add	w1, w1, w4
    1b74:	add	x16, x16, #0xc, lsl #12
    1b78:	add	w4, w13, w14
    1b7c:	ldr	w12, [x25, #2492]
    1b80:	ldp	x6, x13, [sp, #184]
    1b84:	add	w4, w1, w4
    1b88:	ldr	x1, [sp, #200]
    1b8c:	add	x7, x22, x7, lsl #4
    1b90:	ldr	x23, [sp, #240]
    1b94:	add	x11, x22, x11, lsl #4
    1b98:	ldr	w6, [x6, #2492]
    1b9c:	add	x7, x7, #0xc, lsl #12
    1ba0:	ldr	w14, [x1, #2492]
    1ba4:	add	x11, x11, #0xc, lsl #12
    1ba8:	add	w1, w6, w12
    1bac:	ldr	w13, [x13, #2492]
    1bb0:	add	w4, w4, w1
    1bb4:	add	x5, x22, x5, lsl #4
    1bb8:	ldp	x6, x1, [sp, #208]
    1bbc:	add	x5, x5, #0xc, lsl #12
    1bc0:	add	x27, x22, x27, lsl #4
    1bc4:	add	x0, x22, x0, lsl #4
    1bc8:	add	x0, x0, #0xc, lsl #12
    1bcc:	add	x27, x27, #0xc, lsl #12
    1bd0:	ldr	w12, [x1, #2492]
    1bd4:	add	w1, w13, w14
    1bd8:	add	w1, w4, w1
    1bdc:	ldr	w6, [x6, #2492]
    1be0:	ldp	x14, x4, [sp, #224]
    1be4:	ldr	w13, [x14, #2492]
    1be8:	ldr	w14, [x4, #2492]
    1bec:	add	w4, w6, w12
    1bf0:	add	w1, w1, w4
    1bf4:	ldr	w6, [x23, #2492]
    1bf8:	ldr	x4, [sp, #248]
    1bfc:	ldr	w12, [x4, #2492]
    1c00:	add	w4, w13, w14
    1c04:	ldr	x14, [sp, #256]
    1c08:	add	w4, w1, w4
    1c0c:	ldr	w13, [x14, #2492]
    1c10:	ldr	x1, [sp, #264]
    1c14:	ldr	x23, [sp, #304]
    1c18:	ldr	w14, [x1, #2492]
    1c1c:	add	w1, w6, w12
    1c20:	add	w4, w4, w1
    1c24:	ldp	x12, x1, [sp, #272]
    1c28:	ldr	w6, [x12, #2492]
    1c2c:	ldr	w12, [x1, #2492]
    1c30:	add	w1, w13, w14
    1c34:	add	w1, w4, w1
    1c38:	ldp	x13, x4, [sp, #288]
    1c3c:	ldr	w14, [x4, #2492]
    1c40:	add	w4, w6, w12
    1c44:	add	w1, w1, w4
    1c48:	ldr	w13, [x13, #2492]
    1c4c:	ldr	x4, [sp, #312]
    1c50:	ldr	w6, [x23, #2492]
    1c54:	ldr	x23, [sp, #336]
    1c58:	ldr	w12, [x4, #2492]
    1c5c:	add	w4, w13, w14
    1c60:	add	w4, w1, w4
    1c64:	ldp	x13, x1, [sp, #320]
    1c68:	ldr	w23, [x23, #2492]
    1c6c:	ldr	w14, [x1, #2492]
    1c70:	add	w1, w6, w12
    1c74:	ldr	w13, [x13, #2492]
    1c78:	add	w4, w4, w1
    1c7c:	ldr	w12, [x15, #2496]
    1c80:	ldr	w6, [x17, #2496]
    1c84:	add	w1, w13, w14
    1c88:	ldr	w14, [x19, #2496]
    1c8c:	add	w4, w4, w1
    1c90:	add	w6, w12, w6
    1c94:	ldr	w13, [x18, #2496]
    1c98:	ldp	x19, x12, [sp, #176]
    1c9c:	add	w13, w13, w14
    1ca0:	ldr	w15, [x20, #2496]
    1ca4:	add	w6, w6, w13
    1ca8:	ldr	w17, [x21, #2496]
    1cac:	and	w1, w30, #0xffff
    1cb0:	ldr	w18, [x24, #2496]
    1cb4:	add	w15, w15, w17
    1cb8:	ldr	w19, [x19, #2496]
    1cbc:	add	w6, w6, w15
    1cc0:	ldr	w20, [x12, #2496]
    1cc4:	ldr	w21, [x25, #2496]
    1cc8:	add	w18, w18, w19
    1ccc:	add	w6, w6, w18
    1cd0:	add	w20, w20, w21
    1cd4:	ldp	x17, x18, [sp, #344]
    1cd8:	add	w6, w6, w20
    1cdc:	ldp	x19, x21, [sp, #360]
    1ce0:	ldr	x24, [sp, #536]
    1ce4:	ldr	w14, [x18, #2492]
    1ce8:	ldr	w13, [x17, #2492]
    1cec:	ldr	w15, [x19, #2492]
    1cf0:	ldp	x18, x19, [sp, #376]
    1cf4:	ldr	w17, [x21, #2492]
    1cf8:	ldr	w12, [x24, #2492]
    1cfc:	ldr	x21, [sp, #392]
    1d00:	add	w12, w23, w12
    1d04:	ldr	x25, [sp, #408]
    1d08:	add	w4, w4, w12
    1d0c:	ldr	w18, [x18, #2492]
    1d10:	add	w12, w13, w14
    1d14:	ldr	w13, [x19, #2492]
    1d18:	add	w12, w4, w12
    1d1c:	ldr	w14, [x21, #2492]
    1d20:	add	w4, w15, w17
    1d24:	ldr	w15, [x25, #2492]
    1d28:	add	w12, w12, w4
    1d2c:	ldr	w17, [x3, #2492]
    1d30:	add	w4, w18, w13
    1d34:	ldr	w13, [x2, #2492]
    1d38:	add	w4, w12, w4
    1d3c:	ldr	w18, [x10, #2492]
    1d40:	add	w12, w14, w15
    1d44:	ldr	w14, [x9, #2492]
    1d48:	add	w4, w4, w12
    1d4c:	ldr	w15, [x16, #2492]
    1d50:	add	w12, w17, w13
    1d54:	ldr	w13, [x8, #2492]
    1d58:	add	w12, w4, w12
    1d5c:	ldr	w17, [x11, #2492]
    1d60:	add	w4, w18, w14
    1d64:	ldr	w14, [x7, #2492]
    1d68:	add	w12, w12, w4
    1d6c:	ldr	x20, [sp, #192]
    1d70:	add	w4, w15, w13
    1d74:	ldr	w18, [x26, #2492]
    1d78:	add	w4, w12, w4
    1d7c:	ldr	w13, [x5, #2492]
    1d80:	add	w12, w17, w14
    1d84:	add	w4, w4, w12
    1d88:	ldr	w19, [x0, #2492]
    1d8c:	add	w13, w18, w13
    1d90:	ldr	w15, [x27, #2492]
    1d94:	add	w4, w4, w13
    1d98:	ldr	w12, [x20, #2496]
    1d9c:	ldp	x20, x13, [sp, #200]
    1da0:	ldr	x23, [sp, #240]
    1da4:	ldr	w20, [x20, #2496]
    1da8:	ldr	w14, [x13, #2496]
    1dac:	add	w13, w15, w19
    1db0:	add	w20, w12, w20
    1db4:	add	w4, w4, w13
    1db8:	ldp	x15, x12, [sp, #216]
    1dbc:	add	w20, w6, w20
    1dc0:	ldr	x6, [sp, #232]
    1dc4:	ldr	w17, [x15, #2496]
    1dc8:	ldr	w6, [x6, #2496]
    1dcc:	ldr	w12, [x12, #2496]
    1dd0:	add	w14, w14, w17
    1dd4:	add	w20, w20, w14
    1dd8:	ldr	w15, [x23, #2496]
    1ddc:	add	w12, w12, w6
    1de0:	add	w20, w20, w12
    1de4:	ldp	x6, x12, [sp, #264]
    1de8:	ldr	x14, [sp, #248]
    1dec:	ldr	w21, [x6, #2496]
    1df0:	ldr	w18, [x14, #2496]
    1df4:	ldr	x14, [sp, #256]
    1df8:	add	w15, w15, w18
    1dfc:	ldr	x6, [sp, #280]
    1e00:	add	w20, w20, w15
    1e04:	ldr	w19, [x14, #2496]
    1e08:	ldr	w23, [x12, #2496]
    1e0c:	ldr	w14, [x6, #2496]
    1e10:	add	w19, w19, w21
    1e14:	ldr	x6, [sp, #288]
    1e18:	add	w23, w23, w14
    1e1c:	ldr	x12, [sp, #304]
    1e20:	add	w20, w20, w19
    1e24:	ldr	w17, [x6, #2496]
    1e28:	add	w20, w20, w23
    1e2c:	ldr	x6, [sp, #296]
    1e30:	ldr	x14, [sp, #312]
    1e34:	ldr	w6, [x6, #2496]
    1e38:	ldr	w12, [x12, #2496]
    1e3c:	add	w17, w17, w6
    1e40:	ldr	w15, [x14, #2496]
    1e44:	ldr	x6, [sp, #320]
    1e48:	add	w12, w12, w15
    1e4c:	add	w20, w20, w17
    1e50:	add	w20, w20, w12
    1e54:	ldr	w18, [x6, #2496]
    1e58:	ldp	x6, x23, [sp, #328]
    1e5c:	ldr	w24, [x24, #2496]
    1e60:	ldr	x17, [sp, #344]
    1e64:	ldr	w2, [x2, #2496]
    1e68:	ldr	w19, [x6, #2496]
    1e6c:	ldr	w21, [x23, #2496]
    1e70:	add	w18, w18, w19
    1e74:	ldr	w14, [x17, #2496]
    1e78:	add	w20, w20, w18
    1e7c:	add	w21, w21, w24
    1e80:	ldp	x18, x19, [sp, #352]
    1e84:	add	w20, w20, w21
    1e88:	ldr	x21, [sp, #368]
    1e8c:	ldr	w23, [x25, #2496]
    1e90:	ldr	w3, [x3, #2496]
    1e94:	ldr	w6, [x18, #2496]
    1e98:	ldr	w17, [x19, #2496]
    1e9c:	add	w3, w3, w2
    1ea0:	ldp	x18, x19, [sp, #376]
    1ea4:	add	w6, w14, w6
    1ea8:	ldr	w12, [x21, #2496]
    1eac:	add	w20, w20, w6
    1eb0:	ldr	x21, [sp, #392]
    1eb4:	add	w17, w17, w12
    1eb8:	add	w20, w20, w17
    1ebc:	ldr	w6, [x9, #2496]
    1ec0:	ldr	w15, [x18, #2496]
    1ec4:	ldr	w18, [x19, #2496]
    1ec8:	ldr	w19, [x21, #2496]
    1ecc:	add	w15, w15, w18
    1ed0:	ldr	w10, [x10, #2496]
    1ed4:	add	w20, w20, w15
    1ed8:	add	w19, w19, w23
    1edc:	ldr	w12, [x8, #2496]
    1ee0:	add	w20, w20, w19
    1ee4:	ldr	w9, [x16, #2496]
    1ee8:	add	w10, w10, w6
    1eec:	ldr	w2, [x7, #2496]
    1ef0:	add	w20, w20, w3
    1ef4:	ldr	w8, [x11, #2496]
    1ef8:	add	w9, w9, w12
    1efc:	ldr	w7, [x5, #2496]
    1f00:	add	w10, w20, w10
    1f04:	ldr	w3, [x26, #2496]
    1f08:	add	w5, w8, w2
    1f0c:	ldr	w6, [x0, #2496]
    1f10:	add	w10, w10, w9
    1f14:	ldr	w2, [x27, #2496]
    1f18:	add	w0, w10, w5
    1f1c:	add	w3, w3, w7
    1f20:	str	w30, [sp, #688]
    1f24:	add	w0, w0, w3
    1f28:	add	w2, w2, w6
    1f2c:	add	w0, w0, w2
    1f30:	str	w4, [sp, #692]
    1f34:	str	w0, [sp, #696]
    1f38:	ldrh	w2, [sp, #690]
    1f3c:	mov	w0, #0x0                   	// #0
    1f40:	cmp	w1, w2
    1f44:	b.le	1f50 <BZ2_compressBlock+0x1d80>
    1f48:	mov	w1, w2
    1f4c:	mov	w0, #0x1                   	// #1
    1f50:	ldr	w2, [sp, #160]
    1f54:	cmp	w2, #0x2
    1f58:	b.eq	31b8 <BZ2_compressBlock+0x2fe8>  // b.none
    1f5c:	ldrh	w2, [sp, #692]
    1f60:	cmp	w2, w1
    1f64:	b.ge	1f70 <BZ2_compressBlock+0x1da0>  // b.tcont
    1f68:	mov	w1, w2
    1f6c:	mov	w0, #0x2                   	// #2
    1f70:	ldr	w2, [sp, #160]
    1f74:	cmp	w2, #0x3
    1f78:	b.eq	284c <BZ2_compressBlock+0x267c>  // b.none
    1f7c:	ldrh	w2, [sp, #694]
    1f80:	cmp	w2, w1
    1f84:	b.ge	1f90 <BZ2_compressBlock+0x1dc0>  // b.tcont
    1f88:	mov	w1, w2
    1f8c:	mov	w0, #0x3                   	// #3
    1f90:	ldr	w2, [sp, #160]
    1f94:	cmp	w2, #0x4
    1f98:	b.eq	284c <BZ2_compressBlock+0x267c>  // b.none
    1f9c:	ldrh	w2, [sp, #696]
    1fa0:	cmp	w2, w1
    1fa4:	b.ge	1fb0 <BZ2_compressBlock+0x1de0>  // b.tcont
    1fa8:	mov	w1, w2
    1fac:	mov	w0, #0x4                   	// #4
    1fb0:	ldr	w2, [sp, #160]
    1fb4:	cmp	w2, #0x6
    1fb8:	b.ne	284c <BZ2_compressBlock+0x267c>  // b.any
    1fbc:	ldrh	w2, [sp, #698]
    1fc0:	cmp	w1, w2
    1fc4:	b.le	1fd0 <BZ2_compressBlock+0x1e00>
    1fc8:	mov	w1, w2
    1fcc:	mov	w0, #0x5                   	// #5
    1fd0:	ldr	w3, [sp, #128]
    1fd4:	sxtw	x2, w0
    1fd8:	add	w1, w3, w1
    1fdc:	str	w1, [sp, #128]
    1fe0:	ldr	x1, [sp, #136]
    1fe4:	ldr	x3, [sp, #168]
    1fe8:	mov	w6, w1
    1fec:	strb	w0, [x3, x1]
    1ff0:	ldr	x3, [sp, #152]
    1ff4:	ldr	w1, [x3, x2, lsl #2]
    1ff8:	add	w1, w1, #0x1
    1ffc:	str	w1, [x3, x2, lsl #2]
    2000:	ldr	w1, [sp, #112]
    2004:	sub	w1, w1, w28
    2008:	cmp	w1, #0x31
    200c:	b.ne	2888 <BZ2_compressBlock+0x26b8>  // b.any
    2010:	ldr	x4, [sp, #120]
    2014:	sbfiz	x2, x28, #1, #32
    2018:	mov	w3, #0x102                 	// #258
    201c:	add	x1, x4, x2
    2020:	smull	x0, w0, w3
    2024:	ldrh	w3, [x4, x2]
    2028:	add	x3, x3, x0
    202c:	ldrh	w2, [x1, #2]
    2030:	ldrh	w4, [x1, #4]
    2034:	add	x3, x22, x3, lsl #2
    2038:	add	x2, x2, x0
    203c:	add	x3, x3, #0x8, lsl #12
    2040:	add	x4, x4, x0
    2044:	add	x2, x22, x2, lsl #2
    2048:	add	x2, x2, #0x8, lsl #12
    204c:	add	x4, x22, x4, lsl #2
    2050:	ldr	w5, [x3, #12680]
    2054:	add	x4, x4, #0x8, lsl #12
    2058:	add	w5, w5, #0x1
    205c:	str	w5, [x3, #12680]
    2060:	ldrh	w3, [x1, #6]
    2064:	ldr	w5, [x2, #12680]
    2068:	add	x3, x3, x0
    206c:	add	w5, w5, #0x1
    2070:	str	w5, [x2, #12680]
    2074:	add	x3, x22, x3, lsl #2
    2078:	ldrh	w2, [x1, #8]
    207c:	ldr	w5, [x4, #12680]
    2080:	add	x3, x3, #0x8, lsl #12
    2084:	add	x2, x2, x0
    2088:	add	w5, w5, #0x1
    208c:	str	w5, [x4, #12680]
    2090:	add	x2, x22, x2, lsl #2
    2094:	ldrh	w4, [x1, #10]
    2098:	ldr	w5, [x3, #12680]
    209c:	add	x2, x2, #0x8, lsl #12
    20a0:	add	x4, x4, x0
    20a4:	add	w5, w5, #0x1
    20a8:	str	w5, [x3, #12680]
    20ac:	add	x4, x22, x4, lsl #2
    20b0:	ldrh	w3, [x1, #12]
    20b4:	ldr	w5, [x2, #12680]
    20b8:	add	x4, x4, #0x8, lsl #12
    20bc:	add	x3, x3, x0
    20c0:	add	w5, w5, #0x1
    20c4:	str	w5, [x2, #12680]
    20c8:	add	x3, x22, x3, lsl #2
    20cc:	ldrh	w2, [x1, #14]
    20d0:	ldr	w5, [x4, #12680]
    20d4:	add	x3, x3, #0x8, lsl #12
    20d8:	add	x2, x2, x0
    20dc:	add	w5, w5, #0x1
    20e0:	str	w5, [x4, #12680]
    20e4:	add	x2, x22, x2, lsl #2
    20e8:	ldrh	w4, [x1, #16]
    20ec:	ldr	w5, [x3, #12680]
    20f0:	add	x2, x2, #0x8, lsl #12
    20f4:	add	x4, x4, x0
    20f8:	add	w5, w5, #0x1
    20fc:	str	w5, [x3, #12680]
    2100:	add	x4, x22, x4, lsl #2
    2104:	ldrh	w3, [x1, #18]
    2108:	ldr	w5, [x2, #12680]
    210c:	add	x4, x4, #0x8, lsl #12
    2110:	add	x3, x3, x0
    2114:	add	w5, w5, #0x1
    2118:	str	w5, [x2, #12680]
    211c:	add	x3, x22, x3, lsl #2
    2120:	ldrh	w2, [x1, #20]
    2124:	ldr	w5, [x4, #12680]
    2128:	add	x3, x3, #0x8, lsl #12
    212c:	add	x2, x2, x0
    2130:	add	w5, w5, #0x1
    2134:	str	w5, [x4, #12680]
    2138:	add	x2, x22, x2, lsl #2
    213c:	ldr	w4, [x3, #12680]
    2140:	add	x2, x2, #0x8, lsl #12
    2144:	add	w4, w4, #0x1
    2148:	str	w4, [x3, #12680]
    214c:	ldr	w3, [x2, #12680]
    2150:	ldrh	w4, [x1, #26]
    2154:	add	w3, w3, #0x1
    2158:	str	w3, [x2, #12680]
    215c:	ldrh	w3, [x1, #22]
    2160:	add	x4, x4, x0
    2164:	ldrh	w2, [x1, #24]
    2168:	add	x3, x3, x0
    216c:	add	x4, x22, x4, lsl #2
    2170:	add	x2, x2, x0
    2174:	add	x4, x4, #0x8, lsl #12
    2178:	add	x3, x22, x3, lsl #2
    217c:	add	x3, x3, #0x8, lsl #12
    2180:	add	x2, x22, x2, lsl #2
    2184:	add	x2, x2, #0x8, lsl #12
    2188:	ldr	w5, [x3, #12680]
    218c:	add	w5, w5, #0x1
    2190:	str	w5, [x3, #12680]
    2194:	ldrh	w3, [x1, #28]
    2198:	ldr	w5, [x2, #12680]
    219c:	add	x3, x3, x0
    21a0:	add	w5, w5, #0x1
    21a4:	str	w5, [x2, #12680]
    21a8:	add	x3, x22, x3, lsl #2
    21ac:	ldrh	w2, [x1, #30]
    21b0:	ldr	w5, [x4, #12680]
    21b4:	add	x3, x3, #0x8, lsl #12
    21b8:	add	x2, x2, x0
    21bc:	add	w5, w5, #0x1
    21c0:	str	w5, [x4, #12680]
    21c4:	add	x2, x22, x2, lsl #2
    21c8:	ldrh	w4, [x1, #32]
    21cc:	ldr	w5, [x3, #12680]
    21d0:	add	x2, x2, #0x8, lsl #12
    21d4:	add	x4, x4, x0
    21d8:	add	w5, w5, #0x1
    21dc:	str	w5, [x3, #12680]
    21e0:	add	x4, x22, x4, lsl #2
    21e4:	ldrh	w3, [x1, #34]
    21e8:	ldr	w5, [x2, #12680]
    21ec:	add	x4, x4, #0x8, lsl #12
    21f0:	add	x3, x3, x0
    21f4:	add	w5, w5, #0x1
    21f8:	str	w5, [x2, #12680]
    21fc:	add	x3, x22, x3, lsl #2
    2200:	ldrh	w2, [x1, #36]
    2204:	ldr	w5, [x4, #12680]
    2208:	add	x3, x3, #0x8, lsl #12
    220c:	add	x2, x2, x0
    2210:	add	w5, w5, #0x1
    2214:	str	w5, [x4, #12680]
    2218:	add	x2, x22, x2, lsl #2
    221c:	ldrh	w4, [x1, #38]
    2220:	ldr	w5, [x3, #12680]
    2224:	add	x2, x2, #0x8, lsl #12
    2228:	add	x4, x4, x0
    222c:	add	w5, w5, #0x1
    2230:	str	w5, [x3, #12680]
    2234:	add	x4, x22, x4, lsl #2
    2238:	ldrh	w3, [x1, #40]
    223c:	ldr	w5, [x2, #12680]
    2240:	add	x4, x4, #0x8, lsl #12
    2244:	add	x3, x3, x0
    2248:	add	w5, w5, #0x1
    224c:	str	w5, [x2, #12680]
    2250:	ldrh	w2, [x1, #42]
    2254:	add	x3, x22, x3, lsl #2
    2258:	ldr	w5, [x4, #12680]
    225c:	add	x3, x3, #0x8, lsl #12
    2260:	add	x2, x2, x0
    2264:	add	w5, w5, #0x1
    2268:	str	w5, [x4, #12680]
    226c:	add	x2, x22, x2, lsl #2
    2270:	add	x2, x2, #0x8, lsl #12
    2274:	ldr	w4, [x3, #12680]
    2278:	add	w4, w4, #0x1
    227c:	str	w4, [x3, #12680]
    2280:	ldr	w3, [x2, #12680]
    2284:	ldrh	w4, [x1, #48]
    2288:	add	w3, w3, #0x1
    228c:	str	w3, [x2, #12680]
    2290:	ldrh	w3, [x1, #44]
    2294:	add	x4, x4, x0
    2298:	ldrh	w2, [x1, #46]
    229c:	add	x3, x3, x0
    22a0:	add	x4, x22, x4, lsl #2
    22a4:	add	x2, x2, x0
    22a8:	add	x4, x4, #0x8, lsl #12
    22ac:	add	x3, x22, x3, lsl #2
    22b0:	add	x3, x3, #0x8, lsl #12
    22b4:	add	x2, x22, x2, lsl #2
    22b8:	add	x2, x2, #0x8, lsl #12
    22bc:	ldr	w5, [x3, #12680]
    22c0:	add	w5, w5, #0x1
    22c4:	str	w5, [x3, #12680]
    22c8:	ldrh	w3, [x1, #50]
    22cc:	ldr	w5, [x2, #12680]
    22d0:	add	x3, x3, x0
    22d4:	add	w5, w5, #0x1
    22d8:	str	w5, [x2, #12680]
    22dc:	add	x3, x22, x3, lsl #2
    22e0:	ldrh	w2, [x1, #52]
    22e4:	ldr	w5, [x4, #12680]
    22e8:	add	x3, x3, #0x8, lsl #12
    22ec:	add	x2, x2, x0
    22f0:	add	w5, w5, #0x1
    22f4:	str	w5, [x4, #12680]
    22f8:	add	x2, x22, x2, lsl #2
    22fc:	ldrh	w4, [x1, #54]
    2300:	ldr	w5, [x3, #12680]
    2304:	add	x2, x2, #0x8, lsl #12
    2308:	add	x4, x4, x0
    230c:	add	w5, w5, #0x1
    2310:	str	w5, [x3, #12680]
    2314:	add	x4, x22, x4, lsl #2
    2318:	ldrh	w3, [x1, #56]
    231c:	ldr	w5, [x2, #12680]
    2320:	add	x4, x4, #0x8, lsl #12
    2324:	add	x3, x3, x0
    2328:	add	w5, w5, #0x1
    232c:	str	w5, [x2, #12680]
    2330:	add	x3, x22, x3, lsl #2
    2334:	ldrh	w2, [x1, #58]
    2338:	ldr	w5, [x4, #12680]
    233c:	add	x3, x3, #0x8, lsl #12
    2340:	add	x2, x2, x0
    2344:	add	w5, w5, #0x1
    2348:	str	w5, [x4, #12680]
    234c:	add	x2, x22, x2, lsl #2
    2350:	ldrh	w4, [x1, #60]
    2354:	ldr	w5, [x3, #12680]
    2358:	add	x2, x2, #0x8, lsl #12
    235c:	add	x4, x4, x0
    2360:	add	w5, w5, #0x1
    2364:	str	w5, [x3, #12680]
    2368:	add	x4, x22, x4, lsl #2
    236c:	ldrh	w3, [x1, #62]
    2370:	ldr	w5, [x2, #12680]
    2374:	add	x4, x4, #0x8, lsl #12
    2378:	add	x3, x3, x0
    237c:	add	w5, w5, #0x1
    2380:	str	w5, [x2, #12680]
    2384:	ldrh	w2, [x1, #64]
    2388:	add	x3, x22, x3, lsl #2
    238c:	ldr	w5, [x4, #12680]
    2390:	add	x3, x3, #0x8, lsl #12
    2394:	add	x2, x2, x0
    2398:	add	w5, w5, #0x1
    239c:	str	w5, [x4, #12680]
    23a0:	add	x2, x22, x2, lsl #2
    23a4:	add	x2, x2, #0x8, lsl #12
    23a8:	ldr	w4, [x3, #12680]
    23ac:	add	w4, w4, #0x1
    23b0:	str	w4, [x3, #12680]
    23b4:	ldr	w3, [x2, #12680]
    23b8:	ldrh	w4, [x1, #70]
    23bc:	add	w3, w3, #0x1
    23c0:	str	w3, [x2, #12680]
    23c4:	ldrh	w3, [x1, #66]
    23c8:	add	x4, x4, x0
    23cc:	ldrh	w2, [x1, #68]
    23d0:	add	x3, x3, x0
    23d4:	add	x4, x22, x4, lsl #2
    23d8:	add	x2, x2, x0
    23dc:	add	x4, x4, #0x8, lsl #12
    23e0:	add	x3, x22, x3, lsl #2
    23e4:	add	x3, x3, #0x8, lsl #12
    23e8:	add	x2, x22, x2, lsl #2
    23ec:	add	x2, x2, #0x8, lsl #12
    23f0:	ldr	w5, [x3, #12680]
    23f4:	add	w5, w5, #0x1
    23f8:	str	w5, [x3, #12680]
    23fc:	ldrh	w3, [x1, #72]
    2400:	ldr	w5, [x2, #12680]
    2404:	add	x3, x3, x0
    2408:	add	w5, w5, #0x1
    240c:	str	w5, [x2, #12680]
    2410:	add	x3, x22, x3, lsl #2
    2414:	ldrh	w2, [x1, #74]
    2418:	ldr	w5, [x4, #12680]
    241c:	add	x3, x3, #0x8, lsl #12
    2420:	add	x2, x2, x0
    2424:	add	w5, w5, #0x1
    2428:	str	w5, [x4, #12680]
    242c:	add	x2, x22, x2, lsl #2
    2430:	ldrh	w4, [x1, #76]
    2434:	ldr	w5, [x3, #12680]
    2438:	add	x2, x2, #0x8, lsl #12
    243c:	add	x4, x4, x0
    2440:	add	w5, w5, #0x1
    2444:	str	w5, [x3, #12680]
    2448:	add	x4, x22, x4, lsl #2
    244c:	ldrh	w3, [x1, #78]
    2450:	ldr	w5, [x2, #12680]
    2454:	add	x4, x4, #0x8, lsl #12
    2458:	add	x3, x3, x0
    245c:	add	w5, w5, #0x1
    2460:	str	w5, [x2, #12680]
    2464:	add	x3, x22, x3, lsl #2
    2468:	ldrh	w2, [x1, #80]
    246c:	ldr	w5, [x4, #12680]
    2470:	add	x3, x3, #0x8, lsl #12
    2474:	add	x2, x2, x0
    2478:	add	w5, w5, #0x1
    247c:	str	w5, [x4, #12680]
    2480:	add	x2, x22, x2, lsl #2
    2484:	ldrh	w4, [x1, #82]
    2488:	ldr	w5, [x3, #12680]
    248c:	add	x2, x2, #0x8, lsl #12
    2490:	add	x4, x4, x0
    2494:	add	w5, w5, #0x1
    2498:	str	w5, [x3, #12680]
    249c:	add	x4, x22, x4, lsl #2
    24a0:	ldrh	w3, [x1, #84]
    24a4:	ldr	w5, [x2, #12680]
    24a8:	add	x4, x4, #0x8, lsl #12
    24ac:	add	x3, x3, x0
    24b0:	add	w5, w5, #0x1
    24b4:	str	w5, [x2, #12680]
    24b8:	ldrh	w2, [x1, #86]
    24bc:	add	x3, x22, x3, lsl #2
    24c0:	ldr	w5, [x4, #12680]
    24c4:	add	x3, x3, #0x8, lsl #12
    24c8:	add	x2, x2, x0
    24cc:	add	w5, w5, #0x1
    24d0:	str	w5, [x4, #12680]
    24d4:	add	x2, x22, x2, lsl #2
    24d8:	add	x2, x2, #0x8, lsl #12
    24dc:	ldr	w4, [x3, #12680]
    24e0:	add	w4, w4, #0x1
    24e4:	str	w4, [x3, #12680]
    24e8:	ldr	w3, [x2, #12680]
    24ec:	ldrh	w4, [x1, #92]
    24f0:	add	w3, w3, #0x1
    24f4:	str	w3, [x2, #12680]
    24f8:	ldrh	w3, [x1, #88]
    24fc:	add	x4, x4, x0
    2500:	ldrh	w2, [x1, #90]
    2504:	add	x3, x3, x0
    2508:	add	x4, x22, x4, lsl #2
    250c:	add	x2, x2, x0
    2510:	add	x4, x4, #0x8, lsl #12
    2514:	add	x3, x22, x3, lsl #2
    2518:	add	x3, x3, #0x8, lsl #12
    251c:	add	x2, x22, x2, lsl #2
    2520:	add	x2, x2, #0x8, lsl #12
    2524:	ldr	w5, [x3, #12680]
    2528:	add	w5, w5, #0x1
    252c:	str	w5, [x3, #12680]
    2530:	ldrh	w3, [x1, #94]
    2534:	ldr	w5, [x2, #12680]
    2538:	add	x3, x3, x0
    253c:	add	w5, w5, #0x1
    2540:	str	w5, [x2, #12680]
    2544:	add	x3, x22, x3, lsl #2
    2548:	ldrh	w2, [x1, #96]
    254c:	ldr	w5, [x4, #12680]
    2550:	add	x3, x3, #0x8, lsl #12
    2554:	ldrh	w1, [x1, #98]
    2558:	add	x2, x2, x0
    255c:	add	w5, w5, #0x1
    2560:	str	w5, [x4, #12680]
    2564:	add	x2, x22, x2, lsl #2
    2568:	add	x0, x1, x0
    256c:	ldr	w4, [x3, #12680]
    2570:	add	x1, x2, #0x8, lsl #12
    2574:	add	x0, x22, x0, lsl #2
    2578:	add	w2, w4, #0x1
    257c:	str	w2, [x3, #12680]
    2580:	add	x0, x0, #0x8, lsl #12
    2584:	ldr	w2, [x1, #12680]
    2588:	add	w2, w2, #0x1
    258c:	str	w2, [x1, #12680]
    2590:	ldr	w1, [x0, #12680]
    2594:	add	w1, w1, #0x1
    2598:	str	w1, [x0, #12680]
    259c:	ldr	x0, [sp, #136]
    25a0:	ldr	w1, [sp, #144]
    25a4:	add	x0, x0, #0x1
    25a8:	str	x0, [sp, #136]
    25ac:	ldr	w0, [sp, #164]
    25b0:	cmp	w0, w1
    25b4:	b.le	28f0 <BZ2_compressBlock+0x2720>
    25b8:	ldr	w28, [sp, #144]
    25bc:	add	w0, w28, #0x31
    25c0:	ldr	w1, [sp, #164]
    25c4:	str	w0, [sp, #112]
    25c8:	cmp	w0, w1
    25cc:	b.lt	13e8 <BZ2_compressBlock+0x1218>  // b.tstop
    25d0:	ldr	x2, [sp, #576]
    25d4:	mov	w1, #0x0                   	// #0
    25d8:	ldr	w0, [sp, #552]
    25dc:	str	w0, [sp, #112]
    25e0:	ldr	w0, [sp, #164]
    25e4:	str	w0, [sp, #144]
    25e8:	add	x0, sp, #0x2b0
    25ec:	bl	0 <memset>
    25f0:	ldr	w0, [sp, #160]
    25f4:	cmp	w0, #0x6
    25f8:	b.eq	140c <BZ2_compressBlock+0x123c>  // b.none
    25fc:	ldr	w0, [sp, #112]
    2600:	cmp	w0, w28
    2604:	b.lt	31ec <BZ2_compressBlock+0x301c>  // b.tstop
    2608:	ldr	w1, [sp, #112]
    260c:	add	w0, w28, #0x1
    2610:	cmp	w1, w0
    2614:	b.le	31f4 <BZ2_compressBlock+0x3024>
    2618:	sub	w0, w1, w28
    261c:	add	w2, w28, #0x2
    2620:	ldr	x1, [sp, #120]
    2624:	sub	w0, w0, #0x2
    2628:	and	w0, w0, #0xfffffffe
    262c:	ldr	w25, [sp, #160]
    2630:	add	w2, w0, w2
    2634:	mov	w3, w28
    2638:	add	x4, x1, w28, sxtw #1
    263c:	add	x4, x4, #0x2
    2640:	ldurh	w6, [x4, #-2]
    2644:	add	w3, w3, #0x2
    2648:	ldrh	w0, [x4]
    264c:	cmp	w25, #0x2
    2650:	add	x6, x22, x6
    2654:	ldrh	w8, [sp, #688]
    2658:	add	x6, x6, #0x9, lsl #12
    265c:	add	x0, x22, x0
    2660:	add	x0, x0, #0x9, lsl #12
    2664:	ldrh	w7, [sp, #690]
    2668:	add	x4, x4, #0x4
    266c:	ldrb	w5, [x6, #844]
    2670:	ldrb	w1, [x6, #1102]
    2674:	add	w5, w5, w8
    2678:	ldrb	w8, [x0, #844]
    267c:	add	w1, w1, w7
    2680:	ldrb	w7, [x0, #1102]
    2684:	add	w5, w5, w8
    2688:	strh	w5, [sp, #688]
    268c:	add	w1, w1, w7
    2690:	strh	w1, [sp, #690]
    2694:	b.eq	2710 <BZ2_compressBlock+0x2540>  // b.none
    2698:	ldrh	w7, [sp, #692]
    269c:	cmp	w25, #0x3
    26a0:	ldrb	w1, [x6, #1360]
    26a4:	ldrb	w5, [x0, #1360]
    26a8:	add	w1, w1, w7
    26ac:	add	w1, w1, w5
    26b0:	strh	w1, [sp, #692]
    26b4:	b.eq	2710 <BZ2_compressBlock+0x2540>  // b.none
    26b8:	ldrh	w7, [sp, #694]
    26bc:	cmp	w25, #0x4
    26c0:	ldrb	w1, [x6, #1618]
    26c4:	ldrb	w5, [x0, #1618]
    26c8:	add	w1, w1, w7
    26cc:	add	w1, w1, w5
    26d0:	strh	w1, [sp, #694]
    26d4:	b.eq	2710 <BZ2_compressBlock+0x2540>  // b.none
    26d8:	ldrh	w7, [sp, #696]
    26dc:	cmp	w25, #0x6
    26e0:	ldrb	w1, [x6, #1876]
    26e4:	ldrb	w5, [x0, #1876]
    26e8:	add	w1, w1, w7
    26ec:	add	w1, w1, w5
    26f0:	strh	w1, [sp, #696]
    26f4:	b.ne	2710 <BZ2_compressBlock+0x2540>  // b.any
    26f8:	ldrh	w1, [sp, #698]
    26fc:	ldrb	w6, [x6, #2134]
    2700:	ldrb	w5, [x0, #2134]
    2704:	add	w0, w1, w6
    2708:	add	w0, w0, w5
    270c:	strh	w0, [sp, #698]
    2710:	cmp	w2, w3
    2714:	b.ne	2640 <BZ2_compressBlock+0x2470>  // b.any
    2718:	str	w25, [sp, #160]
    271c:	ldrh	w1, [sp, #688]
    2720:	sxtw	x3, w3
    2724:	ldrh	w4, [sp, #690]
    2728:	mov	w2, #0x0                   	// #0
    272c:	ldrh	w10, [sp, #692]
    2730:	mov	w9, #0x0                   	// #0
    2734:	ldrh	w6, [sp, #694]
    2738:	mov	w8, #0x0                   	// #0
    273c:	ldrh	w7, [sp, #696]
    2740:	mov	w11, #0x0                   	// #0
    2744:	ldrh	w5, [sp, #698]
    2748:	ldr	w25, [sp, #160]
    274c:	b	27a4 <BZ2_compressBlock+0x25d4>
    2750:	ldrb	w8, [x0, #1618]
    2754:	cmp	w25, #0x4
    2758:	add	w6, w6, w8
    275c:	and	w6, w6, #0xffff
    2760:	b.eq	2840 <BZ2_compressBlock+0x2670>  // b.none
    2764:	ldrb	w8, [x0, #1876]
    2768:	mov	w2, #0x1                   	// #1
    276c:	cmp	w25, #0x6
    2770:	mov	w9, w2
    2774:	add	w7, w7, w8
    2778:	mov	w8, w2
    277c:	and	w7, w7, #0xffff
    2780:	b.ne	2830 <BZ2_compressBlock+0x2660>  // b.any
    2784:	ldrb	w0, [x0, #2134]
    2788:	mov	w11, w2
    278c:	add	w5, w5, w0
    2790:	and	w5, w5, #0xffff
    2794:	ldr	w0, [sp, #112]
    2798:	add	x3, x3, #0x1
    279c:	cmp	w0, w3
    27a0:	b.lt	2800 <BZ2_compressBlock+0x2630>  // b.tstop
    27a4:	ldr	x0, [sp, #120]
    27a8:	cmp	w25, #0x2
    27ac:	ldrh	w0, [x0, x3, lsl #1]
    27b0:	add	x0, x22, x0
    27b4:	add	x0, x0, #0x9, lsl #12
    27b8:	ldrb	w13, [x0, #844]
    27bc:	ldrb	w12, [x0, #1102]
    27c0:	add	w1, w1, w13
    27c4:	add	w4, w4, w12
    27c8:	and	w1, w1, #0xffff
    27cc:	and	w4, w4, #0xffff
    27d0:	b.eq	2794 <BZ2_compressBlock+0x25c4>  // b.none
    27d4:	ldrb	w8, [x0, #1360]
    27d8:	cmp	w25, #0x3
    27dc:	add	w10, w10, w8
    27e0:	and	w10, w10, #0xffff
    27e4:	b.ne	2750 <BZ2_compressBlock+0x2580>  // b.any
    27e8:	ldr	w0, [sp, #112]
    27ec:	add	x3, x3, #0x1
    27f0:	mov	w8, #0x1                   	// #1
    27f4:	cmp	w0, w3
    27f8:	b.ge	27a4 <BZ2_compressBlock+0x25d4>  // b.tcont
    27fc:	nop
    2800:	str	w25, [sp, #160]
    2804:	strh	w1, [sp, #688]
    2808:	cbz	w11, 2810 <BZ2_compressBlock+0x2640>
    280c:	strh	w5, [sp, #698]
    2810:	strh	w4, [sp, #690]
    2814:	cbz	w8, 281c <BZ2_compressBlock+0x264c>
    2818:	strh	w10, [sp, #692]
    281c:	cbz	w9, 2824 <BZ2_compressBlock+0x2654>
    2820:	strh	w6, [sp, #694]
    2824:	cbz	w2, 1f38 <BZ2_compressBlock+0x1d68>
    2828:	strh	w7, [sp, #696]
    282c:	b	1f38 <BZ2_compressBlock+0x1d68>
    2830:	mov	w2, #0x1                   	// #1
    2834:	mov	w9, w2
    2838:	mov	w8, w2
    283c:	b	2794 <BZ2_compressBlock+0x25c4>
    2840:	mov	w9, #0x1                   	// #1
    2844:	mov	w8, w9
    2848:	b	2794 <BZ2_compressBlock+0x25c4>
    284c:	ldr	x3, [sp, #136]
    2850:	sxtw	x2, w0
    2854:	ldr	x4, [sp, #168]
    2858:	mov	w6, w3
    285c:	strb	w0, [x4, x3]
    2860:	ldr	w4, [sp, #128]
    2864:	ldr	x3, [sp, #152]
    2868:	add	w1, w4, w1
    286c:	str	w1, [sp, #128]
    2870:	ldr	w1, [sp, #160]
    2874:	cmp	w1, #0x6
    2878:	ldr	w1, [x3, x2, lsl #2]
    287c:	add	w1, w1, #0x1
    2880:	str	w1, [x3, x2, lsl #2]
    2884:	b.eq	2000 <BZ2_compressBlock+0x1e30>  // b.none
    2888:	ldr	w1, [sp, #112]
    288c:	sxtw	x2, w28
    2890:	mov	w4, #0x102                 	// #258
    2894:	cmp	w1, w28
    2898:	b.lt	259c <BZ2_compressBlock+0x23cc>  // b.tstop
    289c:	ldr	w25, [sp, #160]
    28a0:	ldr	x1, [sp, #120]
    28a4:	ldr	w3, [sp, #112]
    28a8:	ldrh	w1, [x1, x2, lsl #1]
    28ac:	add	x2, x2, #0x1
    28b0:	cmp	w3, w2
    28b4:	smaddl	x1, w0, w4, x1
    28b8:	add	x1, x22, x1, lsl #2
    28bc:	add	x1, x1, #0x8, lsl #12
    28c0:	ldr	w3, [x1, #12680]
    28c4:	add	w3, w3, #0x1
    28c8:	str	w3, [x1, #12680]
    28cc:	b.ge	28a0 <BZ2_compressBlock+0x26d0>  // b.tcont
    28d0:	ldr	x0, [sp, #136]
    28d4:	str	w25, [sp, #160]
    28d8:	ldr	w1, [sp, #144]
    28dc:	add	x0, x0, #0x1
    28e0:	str	x0, [sp, #136]
    28e4:	ldr	w0, [sp, #164]
    28e8:	cmp	w0, w1
    28ec:	b.gt	25b8 <BZ2_compressBlock+0x23e8>
    28f0:	ldr	w25, [sp, #160]
    28f4:	mov	w28, w6
    28f8:	ldr	w1, [sp, #544]
    28fc:	ldr	w0, [x22, #656]
    2900:	add	w1, w1, #0x1
    2904:	str	w1, [sp, #544]
    2908:	cmp	w0, #0x2
    290c:	b.gt	50d0 <BZ2_compressBlock+0x4f00>
    2910:	ldr	x19, [sp, #584]
    2914:	ldr	w23, [sp, #548]
    2918:	ldr	x20, [sp, #560]
    291c:	mov	x21, x19
    2920:	mov	x0, x19
    2924:	mov	x1, x20
    2928:	mov	w2, w23
    292c:	mov	w3, #0x11                  	// #17
    2930:	bl	0 <BZ2_hbMakeCodeLengths>
    2934:	add	x19, x19, #0x102
    2938:	ldr	x0, [sp, #568]
    293c:	add	x20, x20, #0x408
    2940:	cmp	x19, x0
    2944:	b.ne	2920 <BZ2_compressBlock+0x2750>  // b.any
    2948:	ldr	w0, [sp, #544]
    294c:	cmp	w0, #0x4
    2950:	b.ne	135c <BZ2_compressBlock+0x118c>  // b.any
    2954:	ldr	w1, [sp, #608]
    2958:	mov	w0, #0x1                   	// #1
    295c:	strb	w0, [sp, #705]
    2960:	mov	x24, x22
    2964:	cmp	w1, #0x2
    2968:	ldr	w22, [sp, #548]
    296c:	ldr	x23, [sp, #656]
    2970:	b.eq	29b0 <BZ2_compressBlock+0x27e0>  // b.none
    2974:	mov	w0, #0x2                   	// #2
    2978:	strb	w0, [sp, #706]
    297c:	cmp	w1, #0x3
    2980:	b.eq	29b0 <BZ2_compressBlock+0x27e0>  // b.none
    2984:	mov	w0, #0x3                   	// #3
    2988:	strb	w0, [sp, #707]
    298c:	cmp	w1, #0x4
    2990:	mov	w0, w1
    2994:	b.eq	29b0 <BZ2_compressBlock+0x27e0>  // b.none
    2998:	ldrb	w1, [sp, #544]
    299c:	cmp	w0, #0x6
    29a0:	strb	w1, [sp, #708]
    29a4:	b.ne	29b0 <BZ2_compressBlock+0x27e0>  // b.any
    29a8:	mov	w0, #0x5                   	// #5
    29ac:	strb	w0, [sp, #709]
    29b0:	cbz	w28, 2a60 <BZ2_compressBlock+0x2890>
    29b4:	mov	x6, #0x4cfa                	// #19706
    29b8:	ldrb	w5, [sp, #705]
    29bc:	add	x8, x24, x6
    29c0:	ldrb	w4, [sp, #706]
    29c4:	ldrb	w3, [sp, #707]
    29c8:	add	x9, x24, #0x6a8
    29cc:	ldrb	w2, [sp, #708]
    29d0:	mov	x0, #0x0                   	// #0
    29d4:	ldrb	w10, [sp, #709]
    29d8:	mov	w6, #0x0                   	// #0
    29dc:	b	2a3c <BZ2_compressBlock+0x286c>
    29e0:	cmp	w1, w5
    29e4:	b.eq	31fc <BZ2_compressBlock+0x302c>  // b.none
    29e8:	cmp	w1, w4
    29ec:	b.eq	507c <BZ2_compressBlock+0x4eac>  // b.none
    29f0:	cmp	w1, w3
    29f4:	b.eq	50a4 <BZ2_compressBlock+0x4ed4>  // b.none
    29f8:	cmp	w1, w2
    29fc:	b.eq	50c0 <BZ2_compressBlock+0x4ef0>  // b.none
    2a00:	mov	w1, w2
    2a04:	mov	w2, w10
    2a08:	mov	w10, w1
    2a0c:	mov	w1, #0x5                   	// #5
    2a10:	and	w1, w1, #0xff
    2a14:	strb	w1, [x8, x0]
    2a18:	mov	w7, w6
    2a1c:	add	x0, x0, #0x1
    2a20:	mov	w6, w2
    2a24:	cmp	w28, w0
    2a28:	mov	w2, w3
    2a2c:	mov	w3, w4
    2a30:	mov	w4, w5
    2a34:	mov	w5, w7
    2a38:	b.le	2a60 <BZ2_compressBlock+0x2890>
    2a3c:	ldrb	w1, [x9, x0]
    2a40:	cmp	w6, w1
    2a44:	b.ne	29e0 <BZ2_compressBlock+0x2810>  // b.any
    2a48:	mov	w1, #0x0                   	// #0
    2a4c:	strb	w1, [x8, x0]
    2a50:	add	x0, x0, #0x1
    2a54:	cmp	w28, w0
    2a58:	b.gt	2a3c <BZ2_compressBlock+0x286c>
    2a5c:	nop
    2a60:	ldr	x25, [sp, #584]
    2a64:	mov	w0, w22
    2a68:	ldr	x26, [sp, #672]
    2a6c:	mov	w27, #0x0                   	// #0
    2a70:	str	x21, [sp, #112]
    2a74:	mov	w22, w27
    2a78:	ldr	w21, [sp, #664]
    2a7c:	mov	w27, w0
    2a80:	str	x23, [sp, #128]
    2a84:	mov	x23, x25
    2a88:	ldr	w25, [sp, #636]
    2a8c:	str	w28, [sp, #160]
    2a90:	mov	x28, x26
    2a94:	ldr	w26, [sp, #608]
    2a98:	cmp	w27, #0x0
    2a9c:	mov	w20, #0x0                   	// #0
    2aa0:	mov	w19, #0x20                  	// #32
    2aa4:	b.le	3184 <BZ2_compressBlock+0x2fb4>
    2aa8:	ldr	w0, [sp, #556]
    2aac:	cmp	w0, #0xe
    2ab0:	b.ls	58a4 <BZ2_compressBlock+0x56d4>  // b.plast
    2ab4:	ldr	q3, [x23]
    2ab8:	cmp	w21, #0x1
    2abc:	uxtl	v2.8h, v3.8b
    2ac0:	uxtl2	v3.8h, v3.16b
    2ac4:	uxtl	v4.4s, v2.4h
    2ac8:	uxtl2	v2.4s, v2.8h
    2acc:	uxtl	v0.4s, v3.4h
    2ad0:	uxtl2	v3.4s, v3.8h
    2ad4:	smax	v1.4s, v2.4s, v4.4s
    2ad8:	smin	v2.4s, v2.4s, v4.4s
    2adc:	movi	v4.4s, #0x0
    2ae0:	smax	v1.4s, v1.4s, v4.4s
    2ae4:	movi	v4.4s, #0x20
    2ae8:	smax	v1.4s, v1.4s, v0.4s
    2aec:	smin	v2.4s, v2.4s, v4.4s
    2af0:	smax	v1.4s, v1.4s, v3.4s
    2af4:	smin	v0.4s, v2.4s, v0.4s
    2af8:	smin	v0.4s, v0.4s, v3.4s
    2afc:	b.ls	2ef8 <BZ2_compressBlock+0x2d28>  // b.plast
    2b00:	ldr	q3, [x23, #16]
    2b04:	cmp	w21, #0x2
    2b08:	uxtl	v2.8h, v3.8b
    2b0c:	uxtl2	v3.8h, v3.16b
    2b10:	uxtl	v6.4s, v2.4h
    2b14:	uxtl2	v2.4s, v2.8h
    2b18:	uxtl	v5.4s, v3.4h
    2b1c:	uxtl2	v3.4s, v3.8h
    2b20:	smax	v4.4s, v2.4s, v6.4s
    2b24:	smin	v2.4s, v2.4s, v6.4s
    2b28:	smax	v4.4s, v4.4s, v5.4s
    2b2c:	smin	v2.4s, v2.4s, v5.4s
    2b30:	smax	v4.4s, v4.4s, v3.4s
    2b34:	smin	v2.4s, v2.4s, v3.4s
    2b38:	smax	v1.4s, v1.4s, v4.4s
    2b3c:	smin	v0.4s, v0.4s, v2.4s
    2b40:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2b44:	ldr	q3, [x23, #32]
    2b48:	cmp	w21, #0x3
    2b4c:	uxtl	v2.8h, v3.8b
    2b50:	uxtl2	v3.8h, v3.16b
    2b54:	uxtl	v6.4s, v2.4h
    2b58:	uxtl2	v2.4s, v2.8h
    2b5c:	uxtl	v5.4s, v3.4h
    2b60:	uxtl2	v3.4s, v3.8h
    2b64:	smax	v4.4s, v2.4s, v6.4s
    2b68:	smin	v2.4s, v2.4s, v6.4s
    2b6c:	smax	v4.4s, v4.4s, v5.4s
    2b70:	smin	v2.4s, v2.4s, v5.4s
    2b74:	smax	v4.4s, v4.4s, v3.4s
    2b78:	smin	v2.4s, v2.4s, v3.4s
    2b7c:	smax	v1.4s, v1.4s, v4.4s
    2b80:	smin	v0.4s, v0.4s, v2.4s
    2b84:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2b88:	ldr	q3, [x23, #48]
    2b8c:	cmp	w21, #0x4
    2b90:	uxtl	v2.8h, v3.8b
    2b94:	uxtl2	v3.8h, v3.16b
    2b98:	uxtl	v6.4s, v2.4h
    2b9c:	uxtl2	v2.4s, v2.8h
    2ba0:	uxtl	v5.4s, v3.4h
    2ba4:	uxtl2	v3.4s, v3.8h
    2ba8:	smax	v4.4s, v2.4s, v6.4s
    2bac:	smin	v2.4s, v2.4s, v6.4s
    2bb0:	smax	v4.4s, v4.4s, v5.4s
    2bb4:	smin	v2.4s, v2.4s, v5.4s
    2bb8:	smax	v4.4s, v4.4s, v3.4s
    2bbc:	smin	v2.4s, v2.4s, v3.4s
    2bc0:	smax	v1.4s, v1.4s, v4.4s
    2bc4:	smin	v0.4s, v0.4s, v2.4s
    2bc8:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2bcc:	ldr	q3, [x23, #64]
    2bd0:	cmp	w21, #0x5
    2bd4:	uxtl	v2.8h, v3.8b
    2bd8:	uxtl2	v3.8h, v3.16b
    2bdc:	uxtl	v6.4s, v2.4h
    2be0:	uxtl2	v2.4s, v2.8h
    2be4:	uxtl	v5.4s, v3.4h
    2be8:	uxtl2	v3.4s, v3.8h
    2bec:	smax	v4.4s, v2.4s, v6.4s
    2bf0:	smin	v2.4s, v2.4s, v6.4s
    2bf4:	smax	v4.4s, v4.4s, v5.4s
    2bf8:	smin	v2.4s, v2.4s, v5.4s
    2bfc:	smax	v4.4s, v4.4s, v3.4s
    2c00:	smin	v2.4s, v2.4s, v3.4s
    2c04:	smax	v1.4s, v1.4s, v4.4s
    2c08:	smin	v0.4s, v0.4s, v2.4s
    2c0c:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2c10:	ldr	q3, [x23, #80]
    2c14:	cmp	w21, #0x6
    2c18:	uxtl	v2.8h, v3.8b
    2c1c:	uxtl2	v3.8h, v3.16b
    2c20:	uxtl	v6.4s, v2.4h
    2c24:	uxtl2	v2.4s, v2.8h
    2c28:	uxtl	v5.4s, v3.4h
    2c2c:	uxtl2	v3.4s, v3.8h
    2c30:	smax	v4.4s, v2.4s, v6.4s
    2c34:	smin	v2.4s, v2.4s, v6.4s
    2c38:	smax	v4.4s, v4.4s, v5.4s
    2c3c:	smin	v2.4s, v2.4s, v5.4s
    2c40:	smax	v4.4s, v4.4s, v3.4s
    2c44:	smin	v2.4s, v2.4s, v3.4s
    2c48:	smax	v1.4s, v1.4s, v4.4s
    2c4c:	smin	v0.4s, v0.4s, v2.4s
    2c50:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2c54:	ldr	q3, [x23, #96]
    2c58:	cmp	w21, #0x7
    2c5c:	uxtl	v2.8h, v3.8b
    2c60:	uxtl2	v3.8h, v3.16b
    2c64:	uxtl	v6.4s, v2.4h
    2c68:	uxtl2	v2.4s, v2.8h
    2c6c:	uxtl	v5.4s, v3.4h
    2c70:	uxtl2	v3.4s, v3.8h
    2c74:	smax	v4.4s, v2.4s, v6.4s
    2c78:	smin	v2.4s, v2.4s, v6.4s
    2c7c:	smax	v4.4s, v4.4s, v5.4s
    2c80:	smin	v2.4s, v2.4s, v5.4s
    2c84:	smax	v4.4s, v4.4s, v3.4s
    2c88:	smin	v2.4s, v2.4s, v3.4s
    2c8c:	smax	v1.4s, v1.4s, v4.4s
    2c90:	smin	v0.4s, v0.4s, v2.4s
    2c94:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2c98:	ldr	q3, [x23, #112]
    2c9c:	cmp	w21, #0x8
    2ca0:	uxtl	v2.8h, v3.8b
    2ca4:	uxtl2	v3.8h, v3.16b
    2ca8:	uxtl	v6.4s, v2.4h
    2cac:	uxtl2	v2.4s, v2.8h
    2cb0:	uxtl	v5.4s, v3.4h
    2cb4:	uxtl2	v3.4s, v3.8h
    2cb8:	smax	v4.4s, v2.4s, v6.4s
    2cbc:	smin	v2.4s, v2.4s, v6.4s
    2cc0:	smax	v4.4s, v4.4s, v5.4s
    2cc4:	smin	v2.4s, v2.4s, v5.4s
    2cc8:	smax	v4.4s, v4.4s, v3.4s
    2ccc:	smin	v2.4s, v2.4s, v3.4s
    2cd0:	smax	v1.4s, v1.4s, v4.4s
    2cd4:	smin	v0.4s, v0.4s, v2.4s
    2cd8:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2cdc:	ldr	q3, [x23, #128]
    2ce0:	cmp	w21, #0x9
    2ce4:	uxtl	v2.8h, v3.8b
    2ce8:	uxtl2	v3.8h, v3.16b
    2cec:	uxtl	v6.4s, v2.4h
    2cf0:	uxtl2	v2.4s, v2.8h
    2cf4:	uxtl	v5.4s, v3.4h
    2cf8:	uxtl2	v3.4s, v3.8h
    2cfc:	smax	v4.4s, v2.4s, v6.4s
    2d00:	smin	v2.4s, v2.4s, v6.4s
    2d04:	smax	v4.4s, v4.4s, v5.4s
    2d08:	smin	v2.4s, v2.4s, v5.4s
    2d0c:	smax	v4.4s, v4.4s, v3.4s
    2d10:	smin	v2.4s, v2.4s, v3.4s
    2d14:	smax	v1.4s, v1.4s, v4.4s
    2d18:	smin	v0.4s, v0.4s, v2.4s
    2d1c:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2d20:	ldr	q3, [x23, #144]
    2d24:	cmp	w21, #0xa
    2d28:	uxtl	v2.8h, v3.8b
    2d2c:	uxtl2	v3.8h, v3.16b
    2d30:	uxtl	v6.4s, v2.4h
    2d34:	uxtl2	v2.4s, v2.8h
    2d38:	uxtl	v5.4s, v3.4h
    2d3c:	uxtl2	v3.4s, v3.8h
    2d40:	smax	v4.4s, v2.4s, v6.4s
    2d44:	smin	v2.4s, v2.4s, v6.4s
    2d48:	smax	v4.4s, v4.4s, v5.4s
    2d4c:	smin	v2.4s, v2.4s, v5.4s
    2d50:	smax	v4.4s, v4.4s, v3.4s
    2d54:	smin	v2.4s, v2.4s, v3.4s
    2d58:	smax	v1.4s, v1.4s, v4.4s
    2d5c:	smin	v0.4s, v0.4s, v2.4s
    2d60:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2d64:	ldr	q3, [x23, #160]
    2d68:	cmp	w21, #0xb
    2d6c:	uxtl	v2.8h, v3.8b
    2d70:	uxtl2	v3.8h, v3.16b
    2d74:	uxtl	v6.4s, v2.4h
    2d78:	uxtl2	v2.4s, v2.8h
    2d7c:	uxtl	v5.4s, v3.4h
    2d80:	uxtl2	v3.4s, v3.8h
    2d84:	smax	v4.4s, v2.4s, v6.4s
    2d88:	smin	v2.4s, v2.4s, v6.4s
    2d8c:	smax	v4.4s, v4.4s, v5.4s
    2d90:	smin	v2.4s, v2.4s, v5.4s
    2d94:	smax	v4.4s, v4.4s, v3.4s
    2d98:	smin	v2.4s, v2.4s, v3.4s
    2d9c:	smax	v1.4s, v1.4s, v4.4s
    2da0:	smin	v0.4s, v0.4s, v2.4s
    2da4:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2da8:	ldr	q3, [x23, #176]
    2dac:	cmp	w21, #0xc
    2db0:	uxtl	v2.8h, v3.8b
    2db4:	uxtl2	v3.8h, v3.16b
    2db8:	uxtl	v6.4s, v2.4h
    2dbc:	uxtl2	v2.4s, v2.8h
    2dc0:	uxtl	v5.4s, v3.4h
    2dc4:	uxtl2	v3.4s, v3.8h
    2dc8:	smax	v4.4s, v2.4s, v6.4s
    2dcc:	smin	v2.4s, v2.4s, v6.4s
    2dd0:	smax	v4.4s, v4.4s, v5.4s
    2dd4:	smin	v2.4s, v2.4s, v5.4s
    2dd8:	smax	v4.4s, v4.4s, v3.4s
    2ddc:	smin	v2.4s, v2.4s, v3.4s
    2de0:	smax	v1.4s, v1.4s, v4.4s
    2de4:	smin	v0.4s, v0.4s, v2.4s
    2de8:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2dec:	ldr	q3, [x23, #192]
    2df0:	cmp	w21, #0xd
    2df4:	uxtl	v2.8h, v3.8b
    2df8:	uxtl2	v3.8h, v3.16b
    2dfc:	uxtl	v6.4s, v2.4h
    2e00:	uxtl2	v2.4s, v2.8h
    2e04:	uxtl	v5.4s, v3.4h
    2e08:	uxtl2	v3.4s, v3.8h
    2e0c:	smax	v4.4s, v2.4s, v6.4s
    2e10:	smin	v2.4s, v2.4s, v6.4s
    2e14:	smax	v4.4s, v4.4s, v5.4s
    2e18:	smin	v2.4s, v2.4s, v5.4s
    2e1c:	smax	v4.4s, v4.4s, v3.4s
    2e20:	smin	v2.4s, v2.4s, v3.4s
    2e24:	smax	v1.4s, v1.4s, v4.4s
    2e28:	smin	v0.4s, v0.4s, v2.4s
    2e2c:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2e30:	ldr	q3, [x23, #208]
    2e34:	cmp	w21, #0xe
    2e38:	uxtl	v2.8h, v3.8b
    2e3c:	uxtl2	v3.8h, v3.16b
    2e40:	uxtl	v6.4s, v2.4h
    2e44:	uxtl2	v2.4s, v2.8h
    2e48:	uxtl	v5.4s, v3.4h
    2e4c:	uxtl2	v3.4s, v3.8h
    2e50:	smax	v4.4s, v2.4s, v6.4s
    2e54:	smin	v2.4s, v2.4s, v6.4s
    2e58:	smax	v4.4s, v4.4s, v5.4s
    2e5c:	smin	v2.4s, v2.4s, v5.4s
    2e60:	smax	v4.4s, v4.4s, v3.4s
    2e64:	smin	v2.4s, v2.4s, v3.4s
    2e68:	smax	v1.4s, v1.4s, v4.4s
    2e6c:	smin	v0.4s, v0.4s, v2.4s
    2e70:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2e74:	ldr	q3, [x23, #224]
    2e78:	cmp	w21, #0xf
    2e7c:	uxtl	v2.8h, v3.8b
    2e80:	uxtl2	v3.8h, v3.16b
    2e84:	uxtl	v6.4s, v2.4h
    2e88:	uxtl2	v2.4s, v2.8h
    2e8c:	uxtl	v5.4s, v3.4h
    2e90:	uxtl2	v3.4s, v3.8h
    2e94:	smax	v4.4s, v2.4s, v6.4s
    2e98:	smin	v2.4s, v2.4s, v6.4s
    2e9c:	smax	v4.4s, v4.4s, v5.4s
    2ea0:	smin	v2.4s, v2.4s, v5.4s
    2ea4:	smax	v4.4s, v4.4s, v3.4s
    2ea8:	smin	v2.4s, v2.4s, v3.4s
    2eac:	smax	v1.4s, v1.4s, v4.4s
    2eb0:	smin	v0.4s, v0.4s, v2.4s
    2eb4:	b.eq	2ef8 <BZ2_compressBlock+0x2d28>  // b.none
    2eb8:	ldr	q3, [x23, #240]
    2ebc:	uxtl	v2.8h, v3.8b
    2ec0:	uxtl2	v3.8h, v3.16b
    2ec4:	uxtl	v6.4s, v2.4h
    2ec8:	uxtl2	v2.4s, v2.8h
    2ecc:	uxtl	v5.4s, v3.4h
    2ed0:	uxtl2	v3.4s, v3.8h
    2ed4:	smax	v4.4s, v2.4s, v6.4s
    2ed8:	smin	v2.4s, v2.4s, v6.4s
    2edc:	smax	v4.4s, v4.4s, v5.4s
    2ee0:	smin	v2.4s, v2.4s, v5.4s
    2ee4:	smax	v4.4s, v4.4s, v3.4s
    2ee8:	smin	v2.4s, v2.4s, v3.4s
    2eec:	smax	v1.4s, v1.4s, v4.4s
    2ef0:	smin	v0.4s, v0.4s, v2.4s
    2ef4:	nop
    2ef8:	sminv	s0, v0.4s
    2efc:	cmp	w25, w27
    2f00:	smaxv	s1, v1.4s
    2f04:	mov	w19, v0.s[0]
    2f08:	mov	w20, v1.s[0]
    2f0c:	b.eq	3178 <BZ2_compressBlock+0x2fa8>  // b.none
    2f10:	mov	w2, w25
    2f14:	sxtw	x8, w22
    2f18:	sbfiz	x0, x22, #7, #32
    2f1c:	add	x0, x0, x8
    2f20:	add	w3, w2, #0x1
    2f24:	add	x0, x24, x0, lsl #1
    2f28:	add	x4, x0, w2, sxtw
    2f2c:	add	x4, x4, #0x9, lsl #12
    2f30:	ldrb	w4, [x4, #844]
    2f34:	cmp	w20, w4
    2f38:	csel	w20, w20, w4, ge  // ge = tcont
    2f3c:	cmp	w19, w4
    2f40:	csel	w19, w19, w4, le
    2f44:	cmp	w3, w27
    2f48:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    2f4c:	add	x3, x0, w3, sxtw
    2f50:	add	w4, w2, #0x2
    2f54:	add	x3, x3, #0x9, lsl #12
    2f58:	ldrb	w3, [x3, #844]
    2f5c:	cmp	w20, w3
    2f60:	csel	w20, w20, w3, ge  // ge = tcont
    2f64:	cmp	w19, w3
    2f68:	csel	w19, w19, w3, le
    2f6c:	cmp	w4, w27
    2f70:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    2f74:	add	x4, x0, w4, sxtw
    2f78:	add	w3, w2, #0x3
    2f7c:	add	x4, x4, #0x9, lsl #12
    2f80:	ldrb	w4, [x4, #844]
    2f84:	cmp	w20, w4
    2f88:	csel	w20, w20, w4, ge  // ge = tcont
    2f8c:	cmp	w19, w4
    2f90:	csel	w19, w19, w4, le
    2f94:	cmp	w3, w27
    2f98:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    2f9c:	add	x3, x0, w3, sxtw
    2fa0:	add	w4, w2, #0x4
    2fa4:	add	x3, x3, #0x9, lsl #12
    2fa8:	ldrb	w3, [x3, #844]
    2fac:	cmp	w20, w3
    2fb0:	csel	w20, w20, w3, ge  // ge = tcont
    2fb4:	cmp	w19, w3
    2fb8:	csel	w19, w19, w3, le
    2fbc:	cmp	w4, w27
    2fc0:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    2fc4:	add	x4, x0, w4, sxtw
    2fc8:	add	w3, w2, #0x5
    2fcc:	add	x4, x4, #0x9, lsl #12
    2fd0:	ldrb	w4, [x4, #844]
    2fd4:	cmp	w20, w4
    2fd8:	csel	w20, w20, w4, ge  // ge = tcont
    2fdc:	cmp	w19, w4
    2fe0:	csel	w19, w19, w4, le
    2fe4:	cmp	w3, w27
    2fe8:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    2fec:	add	x3, x0, w3, sxtw
    2ff0:	add	w4, w2, #0x6
    2ff4:	add	x3, x3, #0x9, lsl #12
    2ff8:	ldrb	w3, [x3, #844]
    2ffc:	cmp	w20, w3
    3000:	csel	w20, w20, w3, ge  // ge = tcont
    3004:	cmp	w19, w3
    3008:	csel	w19, w19, w3, le
    300c:	cmp	w4, w27
    3010:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    3014:	add	x4, x0, w4, sxtw
    3018:	add	w3, w2, #0x7
    301c:	add	x4, x4, #0x9, lsl #12
    3020:	ldrb	w4, [x4, #844]
    3024:	cmp	w20, w4
    3028:	csel	w20, w20, w4, ge  // ge = tcont
    302c:	cmp	w19, w4
    3030:	csel	w19, w19, w4, le
    3034:	cmp	w3, w27
    3038:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    303c:	add	x3, x0, w3, sxtw
    3040:	add	w4, w2, #0x8
    3044:	add	x3, x3, #0x9, lsl #12
    3048:	ldrb	w3, [x3, #844]
    304c:	cmp	w20, w3
    3050:	csel	w20, w20, w3, ge  // ge = tcont
    3054:	cmp	w19, w3
    3058:	csel	w19, w19, w3, le
    305c:	cmp	w4, w27
    3060:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    3064:	add	x4, x0, w4, sxtw
    3068:	add	w3, w2, #0x9
    306c:	add	x4, x4, #0x9, lsl #12
    3070:	ldrb	w4, [x4, #844]
    3074:	cmp	w20, w4
    3078:	csel	w20, w20, w4, ge  // ge = tcont
    307c:	cmp	w19, w4
    3080:	csel	w19, w19, w4, le
    3084:	cmp	w3, w27
    3088:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    308c:	add	x0, x0, w3, sxtw
    3090:	add	w3, w2, #0xa
    3094:	add	x0, x0, #0x9, lsl #12
    3098:	ldrb	w0, [x0, #844]
    309c:	cmp	w20, w0
    30a0:	csel	w20, w20, w0, ge  // ge = tcont
    30a4:	cmp	w19, w0
    30a8:	csel	w19, w19, w0, le
    30ac:	cmp	w3, w27
    30b0:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    30b4:	add	x8, x8, x8, lsl #7
    30b8:	add	w0, w2, #0xb
    30bc:	add	x8, x24, x8, lsl #1
    30c0:	add	x3, x8, w3, sxtw
    30c4:	add	x3, x3, #0x9, lsl #12
    30c8:	ldrb	w3, [x3, #844]
    30cc:	cmp	w20, w3
    30d0:	csel	w20, w20, w3, ge  // ge = tcont
    30d4:	cmp	w19, w3
    30d8:	csel	w19, w19, w3, le
    30dc:	cmp	w0, w27
    30e0:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    30e4:	add	x0, x8, w0, sxtw
    30e8:	add	w3, w2, #0xc
    30ec:	add	x0, x0, #0x9, lsl #12
    30f0:	ldrb	w0, [x0, #844]
    30f4:	cmp	w20, w0
    30f8:	csel	w20, w20, w0, ge  // ge = tcont
    30fc:	cmp	w19, w0
    3100:	csel	w19, w19, w0, le
    3104:	cmp	w3, w27
    3108:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    310c:	add	x3, x8, w3, sxtw
    3110:	add	w0, w2, #0xd
    3114:	add	x3, x3, #0x9, lsl #12
    3118:	ldrb	w3, [x3, #844]
    311c:	cmp	w20, w3
    3120:	csel	w20, w20, w3, ge  // ge = tcont
    3124:	cmp	w19, w3
    3128:	csel	w19, w19, w3, le
    312c:	cmp	w0, w27
    3130:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    3134:	add	x0, x8, w0, sxtw
    3138:	add	w2, w2, #0xe
    313c:	add	x0, x0, #0x9, lsl #12
    3140:	ldrb	w0, [x0, #844]
    3144:	cmp	w20, w0
    3148:	csel	w20, w20, w0, ge  // ge = tcont
    314c:	cmp	w19, w0
    3150:	csel	w19, w19, w0, le
    3154:	cmp	w2, w27
    3158:	b.ge	3178 <BZ2_compressBlock+0x2fa8>  // b.tcont
    315c:	add	x2, x8, w2, sxtw
    3160:	add	x2, x2, #0x9, lsl #12
    3164:	ldrb	w0, [x2, #844]
    3168:	cmp	w20, w0
    316c:	csel	w20, w20, w0, ge  // ge = tcont
    3170:	cmp	w19, w0
    3174:	csel	w19, w19, w0, le
    3178:	cmp	w20, #0x11
    317c:	b.gt	3218 <BZ2_compressBlock+0x3048>
    3180:	cbz	w19, 3224 <BZ2_compressBlock+0x3054>
    3184:	mov	w2, w19
    3188:	mov	x1, x23
    318c:	mov	x0, x28
    3190:	mov	w3, w20
    3194:	mov	w4, w27
    3198:	add	w19, w22, #0x1
    319c:	bl	0 <BZ2_hbAssignCodes>
    31a0:	add	x23, x23, #0x102
    31a4:	add	x28, x28, #0x408
    31a8:	cmp	w26, w19
    31ac:	b.eq	3230 <BZ2_compressBlock+0x3060>  // b.none
    31b0:	mov	w22, w19
    31b4:	b	2a98 <BZ2_compressBlock+0x28c8>
    31b8:	ldr	w3, [sp, #128]
    31bc:	sxtw	x2, w0
    31c0:	add	w1, w3, w1
    31c4:	str	w1, [sp, #128]
    31c8:	ldr	x1, [sp, #136]
    31cc:	ldr	x3, [sp, #168]
    31d0:	mov	w6, w1
    31d4:	strb	w0, [x3, x1]
    31d8:	ldr	x3, [sp, #152]
    31dc:	ldr	w1, [x3, x2, lsl #2]
    31e0:	add	w1, w1, #0x1
    31e4:	str	w1, [x3, x2, lsl #2]
    31e8:	b	2888 <BZ2_compressBlock+0x26b8>
    31ec:	ldrh	w1, [sp, #688]
    31f0:	b	1f38 <BZ2_compressBlock+0x1d68>
    31f4:	mov	w3, w28
    31f8:	b	271c <BZ2_compressBlock+0x254c>
    31fc:	mov	w7, w2
    3200:	mov	w1, #0x1                   	// #1
    3204:	mov	w2, w5
    3208:	mov	w5, w4
    320c:	mov	w4, w3
    3210:	mov	w3, w7
    3214:	b	2a10 <BZ2_compressBlock+0x2840>
    3218:	mov	w0, #0xbbc                 	// #3004
    321c:	bl	0 <BZ2_bz__AssertH__fail>
    3220:	cbnz	w19, 3184 <BZ2_compressBlock+0x2fb4>
    3224:	mov	w0, #0xbbd                 	// #3005
    3228:	bl	0 <BZ2_bz__AssertH__fail>
    322c:	b	3184 <BZ2_compressBlock+0x2fb4>
    3230:	add	x2, sp, #0x200
    3234:	mov	w0, w27
    3238:	add	x4, sp, #0x2c0
    323c:	ldr	w28, [sp, #160]
    3240:	ldr	x21, [sp, #112]
    3244:	mov	w27, w22
    3248:	ldr	x23, [sp, #128]
    324c:	mov	w22, w0
    3250:	add	x5, x4, #0x10
    3254:	mov	x0, x4
    3258:	mov	w1, #0x1                   	// #1
    325c:	stp	xzr, xzr, [x2, #192]
    3260:	ldrb	w2, [x23]
    3264:	cbz	w2, 326c <BZ2_compressBlock+0x309c>
    3268:	strb	w1, [x0]
    326c:	ldrb	w2, [x23, #1]
    3270:	cbz	w2, 3278 <BZ2_compressBlock+0x30a8>
    3274:	strb	w1, [x0]
    3278:	ldrb	w2, [x23, #2]
    327c:	cbz	w2, 3284 <BZ2_compressBlock+0x30b4>
    3280:	strb	w1, [x0]
    3284:	ldrb	w2, [x23, #3]
    3288:	cbz	w2, 3290 <BZ2_compressBlock+0x30c0>
    328c:	strb	w1, [x0]
    3290:	ldrb	w2, [x23, #4]
    3294:	cbz	w2, 329c <BZ2_compressBlock+0x30cc>
    3298:	strb	w1, [x0]
    329c:	ldrb	w2, [x23, #5]
    32a0:	cbz	w2, 32a8 <BZ2_compressBlock+0x30d8>
    32a4:	strb	w1, [x0]
    32a8:	ldrb	w2, [x23, #6]
    32ac:	cbz	w2, 32b4 <BZ2_compressBlock+0x30e4>
    32b0:	strb	w1, [x0]
    32b4:	ldrb	w2, [x23, #7]
    32b8:	cbz	w2, 32c0 <BZ2_compressBlock+0x30f0>
    32bc:	strb	w1, [x0]
    32c0:	ldrb	w2, [x23, #8]
    32c4:	cbz	w2, 32cc <BZ2_compressBlock+0x30fc>
    32c8:	strb	w1, [x0]
    32cc:	ldrb	w2, [x23, #9]
    32d0:	cbz	w2, 32d8 <BZ2_compressBlock+0x3108>
    32d4:	strb	w1, [x0]
    32d8:	ldrb	w2, [x23, #10]
    32dc:	cbz	w2, 32e4 <BZ2_compressBlock+0x3114>
    32e0:	strb	w1, [x0]
    32e4:	ldrb	w2, [x23, #11]
    32e8:	cbz	w2, 32f0 <BZ2_compressBlock+0x3120>
    32ec:	strb	w1, [x0]
    32f0:	ldrb	w2, [x23, #12]
    32f4:	cbz	w2, 32fc <BZ2_compressBlock+0x312c>
    32f8:	strb	w1, [x0]
    32fc:	ldrb	w2, [x23, #13]
    3300:	cbz	w2, 3308 <BZ2_compressBlock+0x3138>
    3304:	strb	w1, [x0]
    3308:	ldrb	w2, [x23, #14]
    330c:	cbz	w2, 3314 <BZ2_compressBlock+0x3144>
    3310:	strb	w1, [x0]
    3314:	ldrb	w2, [x23, #15]
    3318:	cbz	w2, 3320 <BZ2_compressBlock+0x3150>
    331c:	strb	w1, [x0]
    3320:	add	x0, x0, #0x1
    3324:	add	x23, x23, #0x10
    3328:	cmp	x0, x5
    332c:	b.ne	3260 <BZ2_compressBlock+0x3090>  // b.any
    3330:	ldr	w6, [x24, #116]
    3334:	add	x7, sp, #0x2c0
    3338:	ldr	w0, [x24, #644]
    333c:	mov	w8, #0x80000000            	// #-2147483648
    3340:	mov	w1, w6
    3344:	nop
    3348:	ldrb	w2, [x7]
    334c:	cmp	w0, #0x7
    3350:	cbnz	w2, 34a0 <BZ2_compressBlock+0x32d0>
    3354:	b.le	3398 <BZ2_compressBlock+0x31c8>
    3358:	ldr	w2, [x24, #640]
    335c:	nop
    3360:	ldr	x0, [x24, #80]
    3364:	lsr	w2, w2, #24
    3368:	strb	w2, [x0, w1, sxtw]
    336c:	ldr	w2, [x24, #640]
    3370:	ldr	w1, [x24, #116]
    3374:	ldr	w0, [x24, #644]
    3378:	lsl	w2, w2, #8
    337c:	add	w1, w1, #0x1
    3380:	sub	w0, w0, #0x8
    3384:	str	w1, [x24, #116]
    3388:	str	w2, [x24, #640]
    338c:	cmp	w0, #0x7
    3390:	str	w0, [x24, #644]
    3394:	b.gt	3360 <BZ2_compressBlock+0x3190>
    3398:	add	w0, w0, #0x1
    339c:	str	w0, [x24, #644]
    33a0:	add	x7, x7, #0x1
    33a4:	cmp	x7, x5
    33a8:	b.ne	3348 <BZ2_compressBlock+0x3178>  // b.any
    33ac:	add	x8, x24, #0x90
    33b0:	mov	w9, #0x80000000            	// #-2147483648
    33b4:	b	33c8 <BZ2_compressBlock+0x31f8>
    33b8:	add	x4, x4, #0x1
    33bc:	add	x8, x8, #0x10
    33c0:	cmp	x4, x5
    33c4:	b.eq	34f8 <BZ2_compressBlock+0x3328>  // b.none
    33c8:	ldrb	w0, [x4]
    33cc:	cbz	w0, 33b8 <BZ2_compressBlock+0x31e8>
    33d0:	ldurb	w2, [x8, #-16]
    33d4:	sub	x3, x8, #0x10
    33d8:	ldr	w0, [x24, #644]
    33dc:	cmp	w0, #0x7
    33e0:	cbnz	w2, 3448 <BZ2_compressBlock+0x3278>
    33e4:	nop
    33e8:	b.le	3428 <BZ2_compressBlock+0x3258>
    33ec:	ldr	w2, [x24, #640]
    33f0:	ldr	x0, [x24, #80]
    33f4:	lsr	w2, w2, #24
    33f8:	strb	w2, [x0, w1, sxtw]
    33fc:	ldr	w2, [x24, #640]
    3400:	ldr	w1, [x24, #116]
    3404:	ldr	w0, [x24, #644]
    3408:	lsl	w2, w2, #8
    340c:	add	w1, w1, #0x1
    3410:	sub	w0, w0, #0x8
    3414:	str	w1, [x24, #116]
    3418:	str	w2, [x24, #640]
    341c:	cmp	w0, #0x7
    3420:	str	w0, [x24, #644]
    3424:	b.gt	33f0 <BZ2_compressBlock+0x3220>
    3428:	add	w0, w0, #0x1
    342c:	str	w0, [x24, #644]
    3430:	add	x3, x3, #0x1
    3434:	cmp	x8, x3
    3438:	b.eq	33b8 <BZ2_compressBlock+0x31e8>  // b.none
    343c:	ldrb	w2, [x3]
    3440:	cmp	w0, #0x7
    3444:	cbz	w2, 33e8 <BZ2_compressBlock+0x3218>
    3448:	ldr	w2, [x24, #640]
    344c:	b.le	3488 <BZ2_compressBlock+0x32b8>
    3450:	ldr	x0, [x24, #80]
    3454:	lsr	w2, w2, #24
    3458:	strb	w2, [x0, w1, sxtw]
    345c:	ldr	w2, [x24, #640]
    3460:	ldr	w1, [x24, #116]
    3464:	ldr	w0, [x24, #644]
    3468:	lsl	w2, w2, #8
    346c:	add	w1, w1, #0x1
    3470:	sub	w0, w0, #0x8
    3474:	str	w1, [x24, #116]
    3478:	str	w2, [x24, #640]
    347c:	cmp	w0, #0x7
    3480:	str	w0, [x24, #644]
    3484:	b.gt	3450 <BZ2_compressBlock+0x3280>
    3488:	lsr	w7, w9, w0
    348c:	add	w0, w0, #0x1
    3490:	orr	w2, w7, w2
    3494:	str	w2, [x24, #640]
    3498:	str	w0, [x24, #644]
    349c:	b	3430 <BZ2_compressBlock+0x3260>
    34a0:	ldr	w2, [x24, #640]
    34a4:	b.le	34e0 <BZ2_compressBlock+0x3310>
    34a8:	ldr	x0, [x24, #80]
    34ac:	lsr	w2, w2, #24
    34b0:	strb	w2, [x0, w1, sxtw]
    34b4:	ldr	w2, [x24, #640]
    34b8:	ldr	w1, [x24, #116]
    34bc:	ldr	w0, [x24, #644]
    34c0:	lsl	w2, w2, #8
    34c4:	add	w1, w1, #0x1
    34c8:	sub	w0, w0, #0x8
    34cc:	str	w1, [x24, #116]
    34d0:	str	w2, [x24, #640]
    34d4:	cmp	w0, #0x7
    34d8:	str	w0, [x24, #644]
    34dc:	b.gt	34a8 <BZ2_compressBlock+0x32d8>
    34e0:	lsr	w3, w8, w0
    34e4:	add	w0, w0, #0x1
    34e8:	orr	w2, w3, w2
    34ec:	str	w2, [x24, #640]
    34f0:	str	w0, [x24, #644]
    34f4:	b	33a0 <BZ2_compressBlock+0x31d0>
    34f8:	ldr	w0, [x24, #656]
    34fc:	cmp	w0, #0x2
    3500:	b.gt	5a9c <BZ2_compressBlock+0x58cc>
    3504:	ldr	w0, [x24, #644]
    3508:	mov	w4, w1
    350c:	ldr	w5, [x24, #640]
    3510:	cmp	w0, #0x7
    3514:	b.le	3550 <BZ2_compressBlock+0x3380>
    3518:	ldr	x0, [x24, #80]
    351c:	lsr	w5, w5, #24
    3520:	strb	w5, [x0, w4, sxtw]
    3524:	ldr	w5, [x24, #640]
    3528:	ldr	w4, [x24, #116]
    352c:	ldr	w0, [x24, #644]
    3530:	lsl	w5, w5, #8
    3534:	add	w4, w4, #0x1
    3538:	sub	w0, w0, #0x8
    353c:	str	w4, [x24, #116]
    3540:	str	w5, [x24, #640]
    3544:	cmp	w0, #0x7
    3548:	str	w0, [x24, #644]
    354c:	b.gt	3518 <BZ2_compressBlock+0x3348>
    3550:	ldr	w2, [sp, #668]
    3554:	mov	w3, #0x1d                  	// #29
    3558:	sub	w3, w3, w0
    355c:	add	w0, w0, #0x3
    3560:	str	w0, [x24, #644]
    3564:	cmp	w0, #0x7
    3568:	lsl	w3, w2, w3
    356c:	orr	w3, w3, w5
    3570:	str	w3, [x24, #640]
    3574:	b.le	35b0 <BZ2_compressBlock+0x33e0>
    3578:	ldr	x0, [x24, #80]
    357c:	lsr	w3, w3, #24
    3580:	strb	w3, [x0, w4, sxtw]
    3584:	ldr	w3, [x24, #640]
    3588:	ldr	w4, [x24, #116]
    358c:	ldr	w0, [x24, #644]
    3590:	lsl	w3, w3, #8
    3594:	add	w4, w4, #0x1
    3598:	sub	w0, w0, #0x8
    359c:	str	w4, [x24, #116]
    35a0:	str	w3, [x24, #640]
    35a4:	cmp	w0, #0x7
    35a8:	str	w0, [x24, #644]
    35ac:	b.gt	3578 <BZ2_compressBlock+0x33a8>
    35b0:	mov	w2, #0x11                  	// #17
    35b4:	sub	w2, w2, w0
    35b8:	add	w0, w0, #0xf
    35bc:	str	w0, [x24, #644]
    35c0:	lsl	w2, w28, w2
    35c4:	orr	w3, w2, w3
    35c8:	str	w3, [x24, #640]
    35cc:	cbz	w28, 36bc <BZ2_compressBlock+0x34ec>
    35d0:	sub	w8, w28, #0x1
    35d4:	mov	x2, #0x4cfb                	// #19707
    35d8:	add	x2, x24, x2
    35dc:	mov	x3, #0x4cfa                	// #19706
    35e0:	add	x8, x8, x2
    35e4:	add	x6, x24, x3
    35e8:	mov	w9, #0x80000000            	// #-2147483648
    35ec:	nop
    35f0:	ldrb	w3, [x6]
    35f4:	cbz	w3, 3664 <BZ2_compressBlock+0x3494>
    35f8:	ldr	w2, [x24, #640]
    35fc:	mov	w5, #0x0                   	// #0
    3600:	cmp	w0, #0x7
    3604:	b.le	3644 <BZ2_compressBlock+0x3474>
    3608:	ldr	x0, [x24, #80]
    360c:	lsr	w2, w2, #24
    3610:	strb	w2, [x0, w4, sxtw]
    3614:	ldr	w2, [x24, #640]
    3618:	ldr	w4, [x24, #116]
    361c:	ldr	w0, [x24, #644]
    3620:	lsl	w2, w2, #8
    3624:	add	w4, w4, #0x1
    3628:	sub	w0, w0, #0x8
    362c:	str	w4, [x24, #116]
    3630:	str	w2, [x24, #640]
    3634:	cmp	w0, #0x7
    3638:	str	w0, [x24, #644]
    363c:	b.gt	3608 <BZ2_compressBlock+0x3438>
    3640:	ldrb	w3, [x6]
    3644:	lsr	w7, w9, w0
    3648:	add	w0, w0, #0x1
    364c:	orr	w2, w2, w7
    3650:	str	w2, [x24, #640]
    3654:	str	w0, [x24, #644]
    3658:	add	w5, w5, #0x1
    365c:	cmp	w5, w3
    3660:	b.lt	3600 <BZ2_compressBlock+0x3430>  // b.tstop
    3664:	cmp	w0, #0x7
    3668:	b.le	36a8 <BZ2_compressBlock+0x34d8>
    366c:	ldr	w2, [x24, #640]
    3670:	ldr	x0, [x24, #80]
    3674:	lsr	w2, w2, #24
    3678:	strb	w2, [x0, w4, sxtw]
    367c:	ldr	w2, [x24, #640]
    3680:	ldr	w4, [x24, #116]
    3684:	ldr	w0, [x24, #644]
    3688:	lsl	w2, w2, #8
    368c:	add	w4, w4, #0x1
    3690:	sub	w0, w0, #0x8
    3694:	str	w4, [x24, #116]
    3698:	str	w2, [x24, #640]
    369c:	cmp	w0, #0x7
    36a0:	str	w0, [x24, #644]
    36a4:	b.gt	3670 <BZ2_compressBlock+0x34a0>
    36a8:	add	w0, w0, #0x1
    36ac:	str	w0, [x24, #644]
    36b0:	add	x6, x6, #0x1
    36b4:	cmp	x6, x8
    36b8:	b.ne	35f0 <BZ2_compressBlock+0x3420>  // b.any
    36bc:	ldr	w2, [x24, #656]
    36c0:	cmp	w2, #0x2
    36c4:	b.gt	5a78 <BZ2_compressBlock+0x58a8>
    36c8:	ldr	x2, [sp, #640]
    36cc:	mov	w1, #0x102                 	// #258
    36d0:	ldr	x3, [sp, #648]
    36d4:	mov	w23, w4
    36d8:	umaddl	x12, w27, w1, x2
    36dc:	mov	w6, #0x1b                  	// #27
    36e0:	mov	w5, #0x1e                  	// #30
    36e4:	mov	w8, #0x2                   	// #2
    36e8:	mov	w7, #0x3                   	// #3
    36ec:	nop
    36f0:	ldrb	w2, [x21]
    36f4:	cmp	w0, #0x7
    36f8:	ldr	w1, [x24, #640]
    36fc:	b.le	3738 <BZ2_compressBlock+0x3568>
    3700:	ldr	x0, [x24, #80]
    3704:	lsr	w1, w1, #24
    3708:	strb	w1, [x0, w23, sxtw]
    370c:	ldr	w1, [x24, #640]
    3710:	ldr	w23, [x24, #116]
    3714:	ldr	w0, [x24, #644]
    3718:	lsl	w1, w1, #8
    371c:	add	w23, w23, #0x1
    3720:	sub	w0, w0, #0x8
    3724:	str	w23, [x24, #116]
    3728:	str	w1, [x24, #640]
    372c:	cmp	w0, #0x7
    3730:	str	w0, [x24, #644]
    3734:	b.gt	3700 <BZ2_compressBlock+0x3530>
    3738:	sub	w9, w6, w0
    373c:	add	w0, w0, #0x5
    3740:	str	w0, [x24, #644]
    3744:	cmp	w22, #0x0
    3748:	lsl	w9, w2, w9
    374c:	orr	w1, w9, w1
    3750:	str	w1, [x24, #640]
    3754:	mov	x10, x21
    3758:	add	x11, x21, x3
    375c:	b.le	38ac <BZ2_compressBlock+0x36dc>
    3760:	ldrb	w9, [x10]
    3764:	cmp	w9, w2
    3768:	b.le	37d8 <BZ2_compressBlock+0x3608>
    376c:	ldr	w1, [x24, #640]
    3770:	cmp	w0, #0x7
    3774:	b.le	37b4 <BZ2_compressBlock+0x35e4>
    3778:	ldr	x0, [x24, #80]
    377c:	lsr	w1, w1, #24
    3780:	strb	w1, [x0, w23, sxtw]
    3784:	ldr	w1, [x24, #640]
    3788:	ldr	w23, [x24, #116]
    378c:	ldr	w0, [x24, #644]
    3790:	lsl	w1, w1, #8
    3794:	add	w23, w23, #0x1
    3798:	sub	w0, w0, #0x8
    379c:	str	w23, [x24, #116]
    37a0:	str	w1, [x24, #640]
    37a4:	cmp	w0, #0x7
    37a8:	str	w0, [x24, #644]
    37ac:	b.gt	3778 <BZ2_compressBlock+0x35a8>
    37b0:	ldrb	w9, [x10]
    37b4:	sub	w13, w5, w0
    37b8:	add	w0, w0, #0x2
    37bc:	str	w0, [x24, #644]
    37c0:	add	w2, w2, #0x1
    37c4:	lsl	w13, w8, w13
    37c8:	orr	w1, w1, w13
    37cc:	str	w1, [x24, #640]
    37d0:	cmp	w2, w9
    37d4:	b.lt	3770 <BZ2_compressBlock+0x35a0>  // b.tstop
    37d8:	cmp	w2, w9
    37dc:	b.le	3850 <BZ2_compressBlock+0x3680>
    37e0:	ldr	w1, [x24, #640]
    37e4:	nop
    37e8:	cmp	w0, #0x7
    37ec:	b.le	382c <BZ2_compressBlock+0x365c>
    37f0:	ldr	x0, [x24, #80]
    37f4:	lsr	w1, w1, #24
    37f8:	strb	w1, [x0, w23, sxtw]
    37fc:	ldr	w1, [x24, #640]
    3800:	ldr	w23, [x24, #116]
    3804:	ldr	w0, [x24, #644]
    3808:	lsl	w1, w1, #8
    380c:	add	w23, w23, #0x1
    3810:	sub	w0, w0, #0x8
    3814:	str	w23, [x24, #116]
    3818:	str	w1, [x24, #640]
    381c:	cmp	w0, #0x7
    3820:	str	w0, [x24, #644]
    3824:	b.gt	37f0 <BZ2_compressBlock+0x3620>
    3828:	ldrb	w9, [x10]
    382c:	sub	w13, w5, w0
    3830:	add	w0, w0, #0x2
    3834:	str	w0, [x24, #644]
    3838:	sub	w2, w2, #0x1
    383c:	lsl	w13, w7, w13
    3840:	orr	w1, w1, w13
    3844:	str	w1, [x24, #640]
    3848:	cmp	w2, w9
    384c:	b.gt	37e8 <BZ2_compressBlock+0x3618>
    3850:	cmp	w0, #0x7
    3854:	b.le	3898 <BZ2_compressBlock+0x36c8>
    3858:	ldr	w1, [x24, #640]
    385c:	nop
    3860:	ldr	x0, [x24, #80]
    3864:	lsr	w1, w1, #24
    3868:	strb	w1, [x0, w23, sxtw]
    386c:	ldr	w1, [x24, #640]
    3870:	ldr	w23, [x24, #116]
    3874:	ldr	w0, [x24, #644]
    3878:	lsl	w1, w1, #8
    387c:	add	w23, w23, #0x1
    3880:	sub	w0, w0, #0x8
    3884:	str	w23, [x24, #116]
    3888:	str	w1, [x24, #640]
    388c:	cmp	w0, #0x7
    3890:	str	w0, [x24, #644]
    3894:	b.gt	3860 <BZ2_compressBlock+0x3690>
    3898:	add	w0, w0, #0x1
    389c:	str	w0, [x24, #644]
    38a0:	add	x10, x10, #0x1
    38a4:	cmp	x11, x10
    38a8:	b.ne	3760 <BZ2_compressBlock+0x3590>  // b.any
    38ac:	add	x21, x21, #0x102
    38b0:	cmp	x21, x12
    38b4:	b.ne	36f0 <BZ2_compressBlock+0x3520>  // b.any
    38b8:	ldr	w0, [x24, #656]
    38bc:	cmp	w0, #0x2
    38c0:	b.gt	5a58 <BZ2_compressBlock+0x5888>
    38c4:	ldr	w0, [x24, #668]
    38c8:	cmp	w0, #0x0
    38cc:	b.le	503c <BZ2_compressBlock+0x4e6c>
    38d0:	ldr	w21, [sp, #632]
    38d4:	add	x27, x24, #0x6a7
    38d8:	str	w23, [sp, #112]
    38dc:	mov	x25, #0x1                   	// #1
    38e0:	ldr	x23, [sp, #120]
    38e4:	mov	x20, #0x2654                	// #9812
    38e8:	mov	w22, #0x20                  	// #32
    38ec:	str	w28, [sp, #160]
    38f0:	add	w28, w21, #0x31
    38f4:	add	w26, w21, #0x32
    38f8:	cmp	w28, w0
    38fc:	b.lt	3908 <BZ2_compressBlock+0x3738>  // b.tstop
    3900:	sub	w28, w0, #0x1
    3904:	mov	w26, w0
    3908:	ldrb	w0, [x27, x25]
    390c:	cmp	w19, w0
    3910:	b.le	39fc <BZ2_compressBlock+0x382c>
    3914:	cmp	w19, #0x6
    3918:	b.ne	3928 <BZ2_compressBlock+0x3758>  // b.any
    391c:	sub	w0, w28, w21
    3920:	cmp	w0, #0x31
    3924:	b.eq	3a08 <BZ2_compressBlock+0x3838>  // b.none
    3928:	cmp	w28, w21
    392c:	b.lt	39e0 <BZ2_compressBlock+0x3810>  // b.tstop
    3930:	ldr	w2, [x24, #640]
    3934:	sxtw	x21, w21
    3938:	ldr	w0, [x24, #644]
    393c:	nop
    3940:	ldrb	w1, [x27, x25]
    3944:	cmp	w0, #0x7
    3948:	ldrh	w6, [x23, x21, lsl #1]
    394c:	add	x1, x1, x1, lsl #7
    3950:	lsl	x1, x1, #1
    3954:	add	x4, x1, x6
    3958:	add	x1, x24, x1
    395c:	add	x4, x4, x20
    3960:	add	x1, x1, x6
    3964:	add	x1, x1, #0x9, lsl #12
    3968:	add	x4, x24, x4, lsl #2
    396c:	ldrb	w6, [x1, #844]
    3970:	ldr	w4, [x4, #8]
    3974:	b.le	39b8 <BZ2_compressBlock+0x37e8>
    3978:	ldr	w1, [x24, #116]
    397c:	nop
    3980:	ldr	x0, [x24, #80]
    3984:	lsr	w2, w2, #24
    3988:	strb	w2, [x0, w1, sxtw]
    398c:	ldr	w2, [x24, #640]
    3990:	ldr	w1, [x24, #116]
    3994:	ldr	w0, [x24, #644]
    3998:	lsl	w2, w2, #8
    399c:	add	w1, w1, #0x1
    39a0:	sub	w0, w0, #0x8
    39a4:	str	w1, [x24, #116]
    39a8:	str	w2, [x24, #640]
    39ac:	cmp	w0, #0x7
    39b0:	str	w0, [x24, #644]
    39b4:	b.gt	3980 <BZ2_compressBlock+0x37b0>
    39b8:	sub	w1, w22, w0
    39bc:	add	w0, w0, w6
    39c0:	sub	w1, w1, w6
    39c4:	str	w0, [x24, #644]
    39c8:	add	x21, x21, #0x1
    39cc:	lsl	w1, w4, w1
    39d0:	orr	w2, w2, w1
    39d4:	str	w2, [x24, #640]
    39d8:	cmp	w28, w21
    39dc:	b.ge	3940 <BZ2_compressBlock+0x3770>  // b.tcont
    39e0:	ldr	w0, [x24, #668]
    39e4:	mov	w21, w25
    39e8:	add	x25, x25, #0x1
    39ec:	cmp	w0, w26
    39f0:	b.le	5030 <BZ2_compressBlock+0x4e60>
    39f4:	mov	w21, w26
    39f8:	b	38f0 <BZ2_compressBlock+0x3720>
    39fc:	mov	w0, #0xbbe                 	// #3006
    3a00:	bl	0 <BZ2_bz__AssertH__fail>
    3a04:	b	3914 <BZ2_compressBlock+0x3744>
    3a08:	ldrb	w1, [x27, x25]
    3a0c:	sbfiz	x0, x21, #1, #32
    3a10:	mov	x2, #0x934c                	// #37708
    3a14:	mov	x3, #0x9958                	// #39256
    3a18:	ldr	w8, [x24, #644]
    3a1c:	add	x1, x1, x1, lsl #7
    3a20:	ldrh	w7, [x23, x0]
    3a24:	ldr	w6, [x24, #640]
    3a28:	cmp	w8, #0x7
    3a2c:	add	x2, x2, x1, lsl #1
    3a30:	add	x1, x3, x1, lsl #3
    3a34:	add	x2, x24, x2
    3a38:	add	x1, x24, x1
    3a3c:	and	x5, x7, #0xffff
    3a40:	ldr	w9, [x1, x7, lsl #2]
    3a44:	ldrb	w4, [x2, x5]
    3a48:	b.le	3a88 <BZ2_compressBlock+0x38b8>
    3a4c:	ldr	w7, [x24, #116]
    3a50:	ldr	x8, [x24, #80]
    3a54:	lsr	w6, w6, #24
    3a58:	strb	w6, [x8, w7, sxtw]
    3a5c:	ldr	w6, [x24, #640]
    3a60:	ldr	w7, [x24, #116]
    3a64:	ldr	w8, [x24, #644]
    3a68:	lsl	w6, w6, #8
    3a6c:	add	w7, w7, #0x1
    3a70:	sub	w8, w8, #0x8
    3a74:	str	w7, [x24, #116]
    3a78:	str	w6, [x24, #640]
    3a7c:	cmp	w8, #0x7
    3a80:	str	w8, [x24, #644]
    3a84:	b.gt	3a50 <BZ2_compressBlock+0x3880>
    3a88:	add	x0, x23, x0
    3a8c:	sub	w5, w22, w8
    3a90:	sub	w5, w5, w4
    3a94:	add	w8, w4, w8
    3a98:	cmp	w8, #0x7
    3a9c:	ldrh	w4, [x0, #2]
    3aa0:	lsl	w7, w9, w5
    3aa4:	orr	w5, w7, w6
    3aa8:	str	w5, [x24, #640]
    3aac:	and	x6, x4, #0xffff
    3ab0:	str	w8, [x24, #644]
    3ab4:	ldr	w4, [x1, x4, lsl #2]
    3ab8:	ldrb	w7, [x2, x6]
    3abc:	b.le	3b00 <BZ2_compressBlock+0x3930>
    3ac0:	ldr	w9, [x24, #116]
    3ac4:	nop
    3ac8:	ldr	x8, [x24, #80]
    3acc:	lsr	w6, w5, #24
    3ad0:	strb	w6, [x8, w9, sxtw]
    3ad4:	ldr	w6, [x24, #640]
    3ad8:	ldr	w9, [x24, #116]
    3adc:	ldr	w8, [x24, #644]
    3ae0:	lsl	w5, w6, #8
    3ae4:	add	w9, w9, #0x1
    3ae8:	sub	w8, w8, #0x8
    3aec:	str	w9, [x24, #116]
    3af0:	str	w5, [x24, #640]
    3af4:	cmp	w8, #0x7
    3af8:	str	w8, [x24, #644]
    3afc:	b.gt	3ac8 <BZ2_compressBlock+0x38f8>
    3b00:	ldrh	w9, [x0, #4]
    3b04:	sub	w6, w22, w8
    3b08:	sub	w6, w6, w7
    3b0c:	add	w8, w7, w8
    3b10:	and	x7, x9, #0xffff
    3b14:	str	w8, [x24, #644]
    3b18:	lsl	w6, w4, w6
    3b1c:	orr	w6, w6, w5
    3b20:	str	w6, [x24, #640]
    3b24:	cmp	w8, #0x7
    3b28:	ldrb	w7, [x2, x7]
    3b2c:	ldr	w4, [x1, x9, lsl #2]
    3b30:	b.le	3b70 <BZ2_compressBlock+0x39a0>
    3b34:	ldr	w5, [x24, #116]
    3b38:	ldr	x8, [x24, #80]
    3b3c:	lsr	w6, w6, #24
    3b40:	strb	w6, [x8, w5, sxtw]
    3b44:	ldr	w6, [x24, #640]
    3b48:	ldr	w5, [x24, #116]
    3b4c:	ldr	w8, [x24, #644]
    3b50:	lsl	w6, w6, #8
    3b54:	add	w5, w5, #0x1
    3b58:	sub	w8, w8, #0x8
    3b5c:	str	w5, [x24, #116]
    3b60:	str	w6, [x24, #640]
    3b64:	cmp	w8, #0x7
    3b68:	str	w8, [x24, #644]
    3b6c:	b.gt	3b38 <BZ2_compressBlock+0x3968>
    3b70:	ldrh	w9, [x0, #6]
    3b74:	sub	w5, w22, w8
    3b78:	sub	w5, w5, w7
    3b7c:	add	w8, w7, w8
    3b80:	and	x7, x9, #0xffff
    3b84:	str	w8, [x24, #644]
    3b88:	lsl	w5, w4, w5
    3b8c:	orr	w6, w5, w6
    3b90:	str	w6, [x24, #640]
    3b94:	cmp	w8, #0x7
    3b98:	ldrb	w7, [x2, x7]
    3b9c:	ldr	w4, [x1, x9, lsl #2]
    3ba0:	b.le	3be0 <BZ2_compressBlock+0x3a10>
    3ba4:	ldr	w9, [x24, #116]
    3ba8:	ldr	x8, [x24, #80]
    3bac:	lsr	w5, w6, #24
    3bb0:	strb	w5, [x8, w9, sxtw]
    3bb4:	ldr	w5, [x24, #640]
    3bb8:	ldr	w9, [x24, #116]
    3bbc:	ldr	w8, [x24, #644]
    3bc0:	lsl	w6, w5, #8
    3bc4:	add	w9, w9, #0x1
    3bc8:	sub	w8, w8, #0x8
    3bcc:	str	w9, [x24, #116]
    3bd0:	str	w6, [x24, #640]
    3bd4:	cmp	w8, #0x7
    3bd8:	str	w8, [x24, #644]
    3bdc:	b.gt	3ba8 <BZ2_compressBlock+0x39d8>
    3be0:	ldrh	w9, [x0, #8]
    3be4:	sub	w5, w22, w8
    3be8:	sub	w5, w5, w7
    3bec:	add	w8, w7, w8
    3bf0:	and	x7, x9, #0xffff
    3bf4:	str	w8, [x24, #644]
    3bf8:	lsl	w5, w4, w5
    3bfc:	orr	w5, w5, w6
    3c00:	str	w5, [x24, #640]
    3c04:	cmp	w8, #0x7
    3c08:	ldrb	w7, [x2, x7]
    3c0c:	ldr	w4, [x1, x9, lsl #2]
    3c10:	b.le	3c50 <BZ2_compressBlock+0x3a80>
    3c14:	ldr	w6, [x24, #116]
    3c18:	ldr	x8, [x24, #80]
    3c1c:	lsr	w5, w5, #24
    3c20:	strb	w5, [x8, w6, sxtw]
    3c24:	ldr	w5, [x24, #640]
    3c28:	ldr	w6, [x24, #116]
    3c2c:	ldr	w8, [x24, #644]
    3c30:	lsl	w5, w5, #8
    3c34:	add	w6, w6, #0x1
    3c38:	sub	w8, w8, #0x8
    3c3c:	str	w6, [x24, #116]
    3c40:	str	w5, [x24, #640]
    3c44:	cmp	w8, #0x7
    3c48:	str	w8, [x24, #644]
    3c4c:	b.gt	3c18 <BZ2_compressBlock+0x3a48>
    3c50:	ldrh	w9, [x0, #10]
    3c54:	sub	w6, w22, w8
    3c58:	sub	w6, w6, w7
    3c5c:	add	w8, w7, w8
    3c60:	and	x7, x9, #0xffff
    3c64:	str	w8, [x24, #644]
    3c68:	lsl	w6, w4, w6
    3c6c:	orr	w5, w6, w5
    3c70:	str	w5, [x24, #640]
    3c74:	cmp	w8, #0x7
    3c78:	ldrb	w7, [x2, x7]
    3c7c:	ldr	w4, [x1, x9, lsl #2]
    3c80:	b.le	3cc0 <BZ2_compressBlock+0x3af0>
    3c84:	ldr	w9, [x24, #116]
    3c88:	ldr	x8, [x24, #80]
    3c8c:	lsr	w6, w5, #24
    3c90:	strb	w6, [x8, w9, sxtw]
    3c94:	ldr	w6, [x24, #640]
    3c98:	ldr	w9, [x24, #116]
    3c9c:	ldr	w8, [x24, #644]
    3ca0:	lsl	w5, w6, #8
    3ca4:	add	w9, w9, #0x1
    3ca8:	sub	w8, w8, #0x8
    3cac:	str	w9, [x24, #116]
    3cb0:	str	w5, [x24, #640]
    3cb4:	cmp	w8, #0x7
    3cb8:	str	w8, [x24, #644]
    3cbc:	b.gt	3c88 <BZ2_compressBlock+0x3ab8>
    3cc0:	ldrh	w9, [x0, #12]
    3cc4:	sub	w6, w22, w8
    3cc8:	sub	w6, w6, w7
    3ccc:	add	w8, w7, w8
    3cd0:	and	x7, x9, #0xffff
    3cd4:	str	w8, [x24, #644]
    3cd8:	lsl	w6, w4, w6
    3cdc:	orr	w6, w6, w5
    3ce0:	str	w6, [x24, #640]
    3ce4:	cmp	w8, #0x7
    3ce8:	ldrb	w7, [x2, x7]
    3cec:	ldr	w4, [x1, x9, lsl #2]
    3cf0:	b.le	3d30 <BZ2_compressBlock+0x3b60>
    3cf4:	ldr	w5, [x24, #116]
    3cf8:	ldr	x8, [x24, #80]
    3cfc:	lsr	w6, w6, #24
    3d00:	strb	w6, [x8, w5, sxtw]
    3d04:	ldr	w6, [x24, #640]
    3d08:	ldr	w5, [x24, #116]
    3d0c:	ldr	w8, [x24, #644]
    3d10:	lsl	w6, w6, #8
    3d14:	add	w5, w5, #0x1
    3d18:	sub	w8, w8, #0x8
    3d1c:	str	w5, [x24, #116]
    3d20:	str	w6, [x24, #640]
    3d24:	cmp	w8, #0x7
    3d28:	str	w8, [x24, #644]
    3d2c:	b.gt	3cf8 <BZ2_compressBlock+0x3b28>
    3d30:	ldrh	w9, [x0, #14]
    3d34:	sub	w5, w22, w8
    3d38:	sub	w5, w5, w7
    3d3c:	add	w8, w7, w8
    3d40:	and	x7, x9, #0xffff
    3d44:	str	w8, [x24, #644]
    3d48:	lsl	w5, w4, w5
    3d4c:	orr	w6, w5, w6
    3d50:	str	w6, [x24, #640]
    3d54:	cmp	w8, #0x7
    3d58:	ldrb	w7, [x2, x7]
    3d5c:	ldr	w4, [x1, x9, lsl #2]
    3d60:	b.le	3da0 <BZ2_compressBlock+0x3bd0>
    3d64:	ldr	w9, [x24, #116]
    3d68:	ldr	x8, [x24, #80]
    3d6c:	lsr	w5, w6, #24
    3d70:	strb	w5, [x8, w9, sxtw]
    3d74:	ldr	w5, [x24, #640]
    3d78:	ldr	w9, [x24, #116]
    3d7c:	ldr	w8, [x24, #644]
    3d80:	lsl	w6, w5, #8
    3d84:	add	w9, w9, #0x1
    3d88:	sub	w8, w8, #0x8
    3d8c:	str	w9, [x24, #116]
    3d90:	str	w6, [x24, #640]
    3d94:	cmp	w8, #0x7
    3d98:	str	w8, [x24, #644]
    3d9c:	b.gt	3d68 <BZ2_compressBlock+0x3b98>
    3da0:	ldrh	w9, [x0, #16]
    3da4:	sub	w5, w22, w8
    3da8:	sub	w5, w5, w7
    3dac:	add	w8, w7, w8
    3db0:	and	x7, x9, #0xffff
    3db4:	str	w8, [x24, #644]
    3db8:	lsl	w5, w4, w5
    3dbc:	orr	w5, w5, w6
    3dc0:	str	w5, [x24, #640]
    3dc4:	cmp	w8, #0x7
    3dc8:	ldrb	w7, [x2, x7]
    3dcc:	ldr	w4, [x1, x9, lsl #2]
    3dd0:	b.le	3e10 <BZ2_compressBlock+0x3c40>
    3dd4:	ldr	w6, [x24, #116]
    3dd8:	ldr	x8, [x24, #80]
    3ddc:	lsr	w5, w5, #24
    3de0:	strb	w5, [x8, w6, sxtw]
    3de4:	ldr	w5, [x24, #640]
    3de8:	ldr	w6, [x24, #116]
    3dec:	ldr	w8, [x24, #644]
    3df0:	lsl	w5, w5, #8
    3df4:	add	w6, w6, #0x1
    3df8:	sub	w8, w8, #0x8
    3dfc:	str	w6, [x24, #116]
    3e00:	str	w5, [x24, #640]
    3e04:	cmp	w8, #0x7
    3e08:	str	w8, [x24, #644]
    3e0c:	b.gt	3dd8 <BZ2_compressBlock+0x3c08>
    3e10:	ldrh	w9, [x0, #18]
    3e14:	sub	w6, w22, w8
    3e18:	sub	w6, w6, w7
    3e1c:	add	w8, w7, w8
    3e20:	and	x7, x9, #0xffff
    3e24:	str	w8, [x24, #644]
    3e28:	lsl	w6, w4, w6
    3e2c:	orr	w5, w6, w5
    3e30:	str	w5, [x24, #640]
    3e34:	cmp	w8, #0x7
    3e38:	ldrb	w7, [x2, x7]
    3e3c:	ldr	w4, [x1, x9, lsl #2]
    3e40:	b.le	3e80 <BZ2_compressBlock+0x3cb0>
    3e44:	ldr	w9, [x24, #116]
    3e48:	ldr	x8, [x24, #80]
    3e4c:	lsr	w6, w5, #24
    3e50:	strb	w6, [x8, w9, sxtw]
    3e54:	ldr	w6, [x24, #640]
    3e58:	ldr	w9, [x24, #116]
    3e5c:	ldr	w8, [x24, #644]
    3e60:	lsl	w5, w6, #8
    3e64:	add	w9, w9, #0x1
    3e68:	sub	w8, w8, #0x8
    3e6c:	str	w9, [x24, #116]
    3e70:	str	w5, [x24, #640]
    3e74:	cmp	w8, #0x7
    3e78:	str	w8, [x24, #644]
    3e7c:	b.gt	3e48 <BZ2_compressBlock+0x3c78>
    3e80:	ldrh	w9, [x0, #20]
    3e84:	sub	w6, w22, w8
    3e88:	sub	w6, w6, w7
    3e8c:	add	w8, w7, w8
    3e90:	and	x7, x9, #0xffff
    3e94:	str	w8, [x24, #644]
    3e98:	lsl	w6, w4, w6
    3e9c:	orr	w6, w6, w5
    3ea0:	str	w6, [x24, #640]
    3ea4:	cmp	w8, #0x7
    3ea8:	ldrb	w7, [x2, x7]
    3eac:	ldr	w4, [x1, x9, lsl #2]
    3eb0:	b.le	3ef0 <BZ2_compressBlock+0x3d20>
    3eb4:	ldr	w5, [x24, #116]
    3eb8:	ldr	x8, [x24, #80]
    3ebc:	lsr	w6, w6, #24
    3ec0:	strb	w6, [x8, w5, sxtw]
    3ec4:	ldr	w6, [x24, #640]
    3ec8:	ldr	w5, [x24, #116]
    3ecc:	ldr	w8, [x24, #644]
    3ed0:	lsl	w6, w6, #8
    3ed4:	add	w5, w5, #0x1
    3ed8:	sub	w8, w8, #0x8
    3edc:	str	w5, [x24, #116]
    3ee0:	str	w6, [x24, #640]
    3ee4:	cmp	w8, #0x7
    3ee8:	str	w8, [x24, #644]
    3eec:	b.gt	3eb8 <BZ2_compressBlock+0x3ce8>
    3ef0:	ldrh	w9, [x0, #22]
    3ef4:	sub	w5, w22, w8
    3ef8:	sub	w5, w5, w7
    3efc:	add	w8, w7, w8
    3f00:	and	x7, x9, #0xffff
    3f04:	str	w8, [x24, #644]
    3f08:	lsl	w5, w4, w5
    3f0c:	orr	w6, w5, w6
    3f10:	str	w6, [x24, #640]
    3f14:	cmp	w8, #0x7
    3f18:	ldrb	w7, [x2, x7]
    3f1c:	ldr	w4, [x1, x9, lsl #2]
    3f20:	b.le	3f60 <BZ2_compressBlock+0x3d90>
    3f24:	ldr	w9, [x24, #116]
    3f28:	ldr	x8, [x24, #80]
    3f2c:	lsr	w5, w6, #24
    3f30:	strb	w5, [x8, w9, sxtw]
    3f34:	ldr	w5, [x24, #640]
    3f38:	ldr	w9, [x24, #116]
    3f3c:	ldr	w8, [x24, #644]
    3f40:	lsl	w6, w5, #8
    3f44:	add	w9, w9, #0x1
    3f48:	sub	w8, w8, #0x8
    3f4c:	str	w9, [x24, #116]
    3f50:	str	w6, [x24, #640]
    3f54:	cmp	w8, #0x7
    3f58:	str	w8, [x24, #644]
    3f5c:	b.gt	3f28 <BZ2_compressBlock+0x3d58>
    3f60:	ldrh	w9, [x0, #24]
    3f64:	sub	w5, w22, w8
    3f68:	sub	w5, w5, w7
    3f6c:	add	w8, w7, w8
    3f70:	and	x7, x9, #0xffff
    3f74:	str	w8, [x24, #644]
    3f78:	lsl	w5, w4, w5
    3f7c:	orr	w5, w5, w6
    3f80:	str	w5, [x24, #640]
    3f84:	cmp	w8, #0x7
    3f88:	ldrb	w7, [x2, x7]
    3f8c:	ldr	w4, [x1, x9, lsl #2]
    3f90:	b.le	3fd0 <BZ2_compressBlock+0x3e00>
    3f94:	ldr	w6, [x24, #116]
    3f98:	ldr	x8, [x24, #80]
    3f9c:	lsr	w5, w5, #24
    3fa0:	strb	w5, [x8, w6, sxtw]
    3fa4:	ldr	w5, [x24, #640]
    3fa8:	ldr	w6, [x24, #116]
    3fac:	ldr	w8, [x24, #644]
    3fb0:	lsl	w5, w5, #8
    3fb4:	add	w6, w6, #0x1
    3fb8:	sub	w8, w8, #0x8
    3fbc:	str	w6, [x24, #116]
    3fc0:	str	w5, [x24, #640]
    3fc4:	cmp	w8, #0x7
    3fc8:	str	w8, [x24, #644]
    3fcc:	b.gt	3f98 <BZ2_compressBlock+0x3dc8>
    3fd0:	ldrh	w9, [x0, #26]
    3fd4:	sub	w6, w22, w8
    3fd8:	sub	w6, w6, w7
    3fdc:	add	w8, w7, w8
    3fe0:	and	x7, x9, #0xffff
    3fe4:	str	w8, [x24, #644]
    3fe8:	lsl	w6, w4, w6
    3fec:	orr	w5, w6, w5
    3ff0:	str	w5, [x24, #640]
    3ff4:	cmp	w8, #0x7
    3ff8:	ldrb	w7, [x2, x7]
    3ffc:	ldr	w4, [x1, x9, lsl #2]
    4000:	b.le	4040 <BZ2_compressBlock+0x3e70>
    4004:	ldr	w9, [x24, #116]
    4008:	ldr	x8, [x24, #80]
    400c:	lsr	w6, w5, #24
    4010:	strb	w6, [x8, w9, sxtw]
    4014:	ldr	w6, [x24, #640]
    4018:	ldr	w9, [x24, #116]
    401c:	ldr	w8, [x24, #644]
    4020:	lsl	w5, w6, #8
    4024:	add	w9, w9, #0x1
    4028:	sub	w8, w8, #0x8
    402c:	str	w9, [x24, #116]
    4030:	str	w5, [x24, #640]
    4034:	cmp	w8, #0x7
    4038:	str	w8, [x24, #644]
    403c:	b.gt	4008 <BZ2_compressBlock+0x3e38>
    4040:	ldrh	w9, [x0, #28]
    4044:	sub	w6, w22, w8
    4048:	sub	w6, w6, w7
    404c:	add	w8, w7, w8
    4050:	and	x7, x9, #0xffff
    4054:	str	w8, [x24, #644]
    4058:	lsl	w6, w4, w6
    405c:	orr	w6, w6, w5
    4060:	str	w6, [x24, #640]
    4064:	cmp	w8, #0x7
    4068:	ldrb	w7, [x2, x7]
    406c:	ldr	w4, [x1, x9, lsl #2]
    4070:	b.le	40b0 <BZ2_compressBlock+0x3ee0>
    4074:	ldr	w5, [x24, #116]
    4078:	ldr	x8, [x24, #80]
    407c:	lsr	w6, w6, #24
    4080:	strb	w6, [x8, w5, sxtw]
    4084:	ldr	w6, [x24, #640]
    4088:	ldr	w5, [x24, #116]
    408c:	ldr	w8, [x24, #644]
    4090:	lsl	w6, w6, #8
    4094:	add	w5, w5, #0x1
    4098:	sub	w8, w8, #0x8
    409c:	str	w5, [x24, #116]
    40a0:	str	w6, [x24, #640]
    40a4:	cmp	w8, #0x7
    40a8:	str	w8, [x24, #644]
    40ac:	b.gt	4078 <BZ2_compressBlock+0x3ea8>
    40b0:	ldrh	w9, [x0, #30]
    40b4:	sub	w5, w22, w8
    40b8:	sub	w5, w5, w7
    40bc:	add	w8, w7, w8
    40c0:	and	x7, x9, #0xffff
    40c4:	str	w8, [x24, #644]
    40c8:	lsl	w5, w4, w5
    40cc:	orr	w6, w5, w6
    40d0:	str	w6, [x24, #640]
    40d4:	cmp	w8, #0x7
    40d8:	ldrb	w7, [x2, x7]
    40dc:	ldr	w4, [x1, x9, lsl #2]
    40e0:	b.le	4120 <BZ2_compressBlock+0x3f50>
    40e4:	ldr	w9, [x24, #116]
    40e8:	ldr	x8, [x24, #80]
    40ec:	lsr	w5, w6, #24
    40f0:	strb	w5, [x8, w9, sxtw]
    40f4:	ldr	w5, [x24, #640]
    40f8:	ldr	w9, [x24, #116]
    40fc:	ldr	w8, [x24, #644]
    4100:	lsl	w6, w5, #8
    4104:	add	w9, w9, #0x1
    4108:	sub	w8, w8, #0x8
    410c:	str	w9, [x24, #116]
    4110:	str	w6, [x24, #640]
    4114:	cmp	w8, #0x7
    4118:	str	w8, [x24, #644]
    411c:	b.gt	40e8 <BZ2_compressBlock+0x3f18>
    4120:	ldrh	w9, [x0, #32]
    4124:	sub	w5, w22, w8
    4128:	sub	w5, w5, w7
    412c:	add	w8, w7, w8
    4130:	and	x7, x9, #0xffff
    4134:	str	w8, [x24, #644]
    4138:	lsl	w5, w4, w5
    413c:	orr	w5, w5, w6
    4140:	str	w5, [x24, #640]
    4144:	cmp	w8, #0x7
    4148:	ldrb	w7, [x2, x7]
    414c:	ldr	w4, [x1, x9, lsl #2]
    4150:	b.le	4190 <BZ2_compressBlock+0x3fc0>
    4154:	ldr	w6, [x24, #116]
    4158:	ldr	x8, [x24, #80]
    415c:	lsr	w5, w5, #24
    4160:	strb	w5, [x8, w6, sxtw]
    4164:	ldr	w5, [x24, #640]
    4168:	ldr	w6, [x24, #116]
    416c:	ldr	w8, [x24, #644]
    4170:	lsl	w5, w5, #8
    4174:	add	w6, w6, #0x1
    4178:	sub	w8, w8, #0x8
    417c:	str	w6, [x24, #116]
    4180:	str	w5, [x24, #640]
    4184:	cmp	w8, #0x7
    4188:	str	w8, [x24, #644]
    418c:	b.gt	4158 <BZ2_compressBlock+0x3f88>
    4190:	ldrh	w9, [x0, #34]
    4194:	sub	w6, w22, w8
    4198:	sub	w6, w6, w7
    419c:	add	w8, w7, w8
    41a0:	and	x7, x9, #0xffff
    41a4:	str	w8, [x24, #644]
    41a8:	lsl	w6, w4, w6
    41ac:	orr	w5, w6, w5
    41b0:	str	w5, [x24, #640]
    41b4:	cmp	w8, #0x7
    41b8:	ldrb	w7, [x2, x7]
    41bc:	ldr	w4, [x1, x9, lsl #2]
    41c0:	b.le	4200 <BZ2_compressBlock+0x4030>
    41c4:	ldr	w9, [x24, #116]
    41c8:	ldr	x8, [x24, #80]
    41cc:	lsr	w6, w5, #24
    41d0:	strb	w6, [x8, w9, sxtw]
    41d4:	ldr	w6, [x24, #640]
    41d8:	ldr	w9, [x24, #116]
    41dc:	ldr	w8, [x24, #644]
    41e0:	lsl	w5, w6, #8
    41e4:	add	w9, w9, #0x1
    41e8:	sub	w8, w8, #0x8
    41ec:	str	w9, [x24, #116]
    41f0:	str	w5, [x24, #640]
    41f4:	cmp	w8, #0x7
    41f8:	str	w8, [x24, #644]
    41fc:	b.gt	41c8 <BZ2_compressBlock+0x3ff8>
    4200:	ldrh	w9, [x0, #36]
    4204:	sub	w6, w22, w8
    4208:	sub	w6, w6, w7
    420c:	add	w8, w7, w8
    4210:	and	x7, x9, #0xffff
    4214:	str	w8, [x24, #644]
    4218:	lsl	w6, w4, w6
    421c:	orr	w6, w6, w5
    4220:	str	w6, [x24, #640]
    4224:	cmp	w8, #0x7
    4228:	ldrb	w7, [x2, x7]
    422c:	ldr	w4, [x1, x9, lsl #2]
    4230:	b.le	4270 <BZ2_compressBlock+0x40a0>
    4234:	ldr	w5, [x24, #116]
    4238:	ldr	x8, [x24, #80]
    423c:	lsr	w6, w6, #24
    4240:	strb	w6, [x8, w5, sxtw]
    4244:	ldr	w6, [x24, #640]
    4248:	ldr	w5, [x24, #116]
    424c:	ldr	w8, [x24, #644]
    4250:	lsl	w6, w6, #8
    4254:	add	w5, w5, #0x1
    4258:	sub	w8, w8, #0x8
    425c:	str	w5, [x24, #116]
    4260:	str	w6, [x24, #640]
    4264:	cmp	w8, #0x7
    4268:	str	w8, [x24, #644]
    426c:	b.gt	4238 <BZ2_compressBlock+0x4068>
    4270:	ldrh	w9, [x0, #38]
    4274:	sub	w5, w22, w8
    4278:	sub	w5, w5, w7
    427c:	add	w8, w7, w8
    4280:	and	x7, x9, #0xffff
    4284:	str	w8, [x24, #644]
    4288:	lsl	w5, w4, w5
    428c:	orr	w6, w5, w6
    4290:	str	w6, [x24, #640]
    4294:	cmp	w8, #0x7
    4298:	ldrb	w7, [x2, x7]
    429c:	ldr	w4, [x1, x9, lsl #2]
    42a0:	b.le	42e0 <BZ2_compressBlock+0x4110>
    42a4:	ldr	w9, [x24, #116]
    42a8:	ldr	x8, [x24, #80]
    42ac:	lsr	w5, w6, #24
    42b0:	strb	w5, [x8, w9, sxtw]
    42b4:	ldr	w5, [x24, #640]
    42b8:	ldr	w9, [x24, #116]
    42bc:	ldr	w8, [x24, #644]
    42c0:	lsl	w6, w5, #8
    42c4:	add	w9, w9, #0x1
    42c8:	sub	w8, w8, #0x8
    42cc:	str	w9, [x24, #116]
    42d0:	str	w6, [x24, #640]
    42d4:	cmp	w8, #0x7
    42d8:	str	w8, [x24, #644]
    42dc:	b.gt	42a8 <BZ2_compressBlock+0x40d8>
    42e0:	ldrh	w9, [x0, #40]
    42e4:	sub	w5, w22, w8
    42e8:	sub	w5, w5, w7
    42ec:	add	w8, w7, w8
    42f0:	and	x7, x9, #0xffff
    42f4:	str	w8, [x24, #644]
    42f8:	lsl	w5, w4, w5
    42fc:	orr	w5, w5, w6
    4300:	str	w5, [x24, #640]
    4304:	cmp	w8, #0x7
    4308:	ldrb	w7, [x2, x7]
    430c:	ldr	w4, [x1, x9, lsl #2]
    4310:	b.le	4350 <BZ2_compressBlock+0x4180>
    4314:	ldr	w6, [x24, #116]
    4318:	ldr	x8, [x24, #80]
    431c:	lsr	w5, w5, #24
    4320:	strb	w5, [x8, w6, sxtw]
    4324:	ldr	w5, [x24, #640]
    4328:	ldr	w6, [x24, #116]
    432c:	ldr	w8, [x24, #644]
    4330:	lsl	w5, w5, #8
    4334:	add	w6, w6, #0x1
    4338:	sub	w8, w8, #0x8
    433c:	str	w6, [x24, #116]
    4340:	str	w5, [x24, #640]
    4344:	cmp	w8, #0x7
    4348:	str	w8, [x24, #644]
    434c:	b.gt	4318 <BZ2_compressBlock+0x4148>
    4350:	ldrh	w9, [x0, #42]
    4354:	sub	w6, w22, w8
    4358:	sub	w6, w6, w7
    435c:	add	w8, w7, w8
    4360:	and	x7, x9, #0xffff
    4364:	str	w8, [x24, #644]
    4368:	lsl	w6, w4, w6
    436c:	orr	w5, w6, w5
    4370:	str	w5, [x24, #640]
    4374:	cmp	w8, #0x7
    4378:	ldrb	w7, [x2, x7]
    437c:	ldr	w4, [x1, x9, lsl #2]
    4380:	b.le	43c0 <BZ2_compressBlock+0x41f0>
    4384:	ldr	w9, [x24, #116]
    4388:	ldr	x8, [x24, #80]
    438c:	lsr	w6, w5, #24
    4390:	strb	w6, [x8, w9, sxtw]
    4394:	ldr	w6, [x24, #640]
    4398:	ldr	w9, [x24, #116]
    439c:	ldr	w8, [x24, #644]
    43a0:	lsl	w5, w6, #8
    43a4:	add	w9, w9, #0x1
    43a8:	sub	w8, w8, #0x8
    43ac:	str	w9, [x24, #116]
    43b0:	str	w5, [x24, #640]
    43b4:	cmp	w8, #0x7
    43b8:	str	w8, [x24, #644]
    43bc:	b.gt	4388 <BZ2_compressBlock+0x41b8>
    43c0:	ldrh	w9, [x0, #44]
    43c4:	sub	w6, w22, w8
    43c8:	sub	w6, w6, w7
    43cc:	add	w8, w7, w8
    43d0:	and	x7, x9, #0xffff
    43d4:	str	w8, [x24, #644]
    43d8:	lsl	w6, w4, w6
    43dc:	orr	w6, w6, w5
    43e0:	str	w6, [x24, #640]
    43e4:	cmp	w8, #0x7
    43e8:	ldrb	w7, [x2, x7]
    43ec:	ldr	w4, [x1, x9, lsl #2]
    43f0:	b.le	4430 <BZ2_compressBlock+0x4260>
    43f4:	ldr	w5, [x24, #116]
    43f8:	ldr	x8, [x24, #80]
    43fc:	lsr	w6, w6, #24
    4400:	strb	w6, [x8, w5, sxtw]
    4404:	ldr	w6, [x24, #640]
    4408:	ldr	w5, [x24, #116]
    440c:	ldr	w8, [x24, #644]
    4410:	lsl	w6, w6, #8
    4414:	add	w5, w5, #0x1
    4418:	sub	w8, w8, #0x8
    441c:	str	w5, [x24, #116]
    4420:	str	w6, [x24, #640]
    4424:	cmp	w8, #0x7
    4428:	str	w8, [x24, #644]
    442c:	b.gt	43f8 <BZ2_compressBlock+0x4228>
    4430:	ldrh	w9, [x0, #46]
    4434:	sub	w5, w22, w8
    4438:	sub	w5, w5, w7
    443c:	add	w8, w7, w8
    4440:	and	x7, x9, #0xffff
    4444:	str	w8, [x24, #644]
    4448:	lsl	w5, w4, w5
    444c:	orr	w6, w5, w6
    4450:	str	w6, [x24, #640]
    4454:	cmp	w8, #0x7
    4458:	ldrb	w7, [x2, x7]
    445c:	ldr	w4, [x1, x9, lsl #2]
    4460:	b.le	44a0 <BZ2_compressBlock+0x42d0>
    4464:	ldr	w9, [x24, #116]
    4468:	ldr	x8, [x24, #80]
    446c:	lsr	w5, w6, #24
    4470:	strb	w5, [x8, w9, sxtw]
    4474:	ldr	w5, [x24, #640]
    4478:	ldr	w9, [x24, #116]
    447c:	ldr	w8, [x24, #644]
    4480:	lsl	w6, w5, #8
    4484:	add	w9, w9, #0x1
    4488:	sub	w8, w8, #0x8
    448c:	str	w9, [x24, #116]
    4490:	str	w6, [x24, #640]
    4494:	cmp	w8, #0x7
    4498:	str	w8, [x24, #644]
    449c:	b.gt	4468 <BZ2_compressBlock+0x4298>
    44a0:	ldrh	w9, [x0, #48]
    44a4:	sub	w5, w22, w8
    44a8:	sub	w5, w5, w7
    44ac:	add	w8, w7, w8
    44b0:	and	x7, x9, #0xffff
    44b4:	str	w8, [x24, #644]
    44b8:	lsl	w5, w4, w5
    44bc:	orr	w5, w5, w6
    44c0:	str	w5, [x24, #640]
    44c4:	cmp	w8, #0x7
    44c8:	ldrb	w7, [x2, x7]
    44cc:	ldr	w4, [x1, x9, lsl #2]
    44d0:	b.le	4510 <BZ2_compressBlock+0x4340>
    44d4:	ldr	w6, [x24, #116]
    44d8:	ldr	x8, [x24, #80]
    44dc:	lsr	w5, w5, #24
    44e0:	strb	w5, [x8, w6, sxtw]
    44e4:	ldr	w5, [x24, #640]
    44e8:	ldr	w6, [x24, #116]
    44ec:	ldr	w8, [x24, #644]
    44f0:	lsl	w5, w5, #8
    44f4:	add	w6, w6, #0x1
    44f8:	sub	w8, w8, #0x8
    44fc:	str	w6, [x24, #116]
    4500:	str	w5, [x24, #640]
    4504:	cmp	w8, #0x7
    4508:	str	w8, [x24, #644]
    450c:	b.gt	44d8 <BZ2_compressBlock+0x4308>
    4510:	ldrh	w9, [x0, #50]
    4514:	sub	w6, w22, w8
    4518:	sub	w6, w6, w7
    451c:	add	w8, w7, w8
    4520:	and	x7, x9, #0xffff
    4524:	str	w8, [x24, #644]
    4528:	lsl	w6, w4, w6
    452c:	orr	w5, w6, w5
    4530:	str	w5, [x24, #640]
    4534:	cmp	w8, #0x7
    4538:	ldrb	w7, [x2, x7]
    453c:	ldr	w4, [x1, x9, lsl #2]
    4540:	b.le	4580 <BZ2_compressBlock+0x43b0>
    4544:	ldr	w9, [x24, #116]
    4548:	ldr	x8, [x24, #80]
    454c:	lsr	w6, w5, #24
    4550:	strb	w6, [x8, w9, sxtw]
    4554:	ldr	w6, [x24, #640]
    4558:	ldr	w9, [x24, #116]
    455c:	ldr	w8, [x24, #644]
    4560:	lsl	w5, w6, #8
    4564:	add	w9, w9, #0x1
    4568:	sub	w8, w8, #0x8
    456c:	str	w9, [x24, #116]
    4570:	str	w5, [x24, #640]
    4574:	cmp	w8, #0x7
    4578:	str	w8, [x24, #644]
    457c:	b.gt	4548 <BZ2_compressBlock+0x4378>
    4580:	ldrh	w9, [x0, #52]
    4584:	sub	w6, w22, w8
    4588:	sub	w6, w6, w7
    458c:	add	w8, w7, w8
    4590:	and	x7, x9, #0xffff
    4594:	str	w8, [x24, #644]
    4598:	lsl	w6, w4, w6
    459c:	orr	w6, w6, w5
    45a0:	str	w6, [x24, #640]
    45a4:	cmp	w8, #0x7
    45a8:	ldrb	w7, [x2, x7]
    45ac:	ldr	w4, [x1, x9, lsl #2]
    45b0:	b.le	45f0 <BZ2_compressBlock+0x4420>
    45b4:	ldr	w5, [x24, #116]
    45b8:	ldr	x8, [x24, #80]
    45bc:	lsr	w6, w6, #24
    45c0:	strb	w6, [x8, w5, sxtw]
    45c4:	ldr	w6, [x24, #640]
    45c8:	ldr	w5, [x24, #116]
    45cc:	ldr	w8, [x24, #644]
    45d0:	lsl	w6, w6, #8
    45d4:	add	w5, w5, #0x1
    45d8:	sub	w8, w8, #0x8
    45dc:	str	w5, [x24, #116]
    45e0:	str	w6, [x24, #640]
    45e4:	cmp	w8, #0x7
    45e8:	str	w8, [x24, #644]
    45ec:	b.gt	45b8 <BZ2_compressBlock+0x43e8>
    45f0:	ldrh	w9, [x0, #54]
    45f4:	sub	w5, w22, w8
    45f8:	sub	w5, w5, w7
    45fc:	add	w8, w7, w8
    4600:	and	x7, x9, #0xffff
    4604:	str	w8, [x24, #644]
    4608:	lsl	w5, w4, w5
    460c:	orr	w6, w5, w6
    4610:	str	w6, [x24, #640]
    4614:	cmp	w8, #0x7
    4618:	ldrb	w7, [x2, x7]
    461c:	ldr	w4, [x1, x9, lsl #2]
    4620:	b.le	4660 <BZ2_compressBlock+0x4490>
    4624:	ldr	w9, [x24, #116]
    4628:	ldr	x8, [x24, #80]
    462c:	lsr	w5, w6, #24
    4630:	strb	w5, [x8, w9, sxtw]
    4634:	ldr	w5, [x24, #640]
    4638:	ldr	w9, [x24, #116]
    463c:	ldr	w8, [x24, #644]
    4640:	lsl	w6, w5, #8
    4644:	add	w9, w9, #0x1
    4648:	sub	w8, w8, #0x8
    464c:	str	w9, [x24, #116]
    4650:	str	w6, [x24, #640]
    4654:	cmp	w8, #0x7
    4658:	str	w8, [x24, #644]
    465c:	b.gt	4628 <BZ2_compressBlock+0x4458>
    4660:	ldrh	w9, [x0, #56]
    4664:	sub	w5, w22, w8
    4668:	sub	w5, w5, w7
    466c:	add	w8, w7, w8
    4670:	and	x7, x9, #0xffff
    4674:	str	w8, [x24, #644]
    4678:	lsl	w5, w4, w5
    467c:	orr	w5, w5, w6
    4680:	str	w5, [x24, #640]
    4684:	cmp	w8, #0x7
    4688:	ldrb	w7, [x2, x7]
    468c:	ldr	w4, [x1, x9, lsl #2]
    4690:	b.le	46d0 <BZ2_compressBlock+0x4500>
    4694:	ldr	w6, [x24, #116]
    4698:	ldr	x8, [x24, #80]
    469c:	lsr	w5, w5, #24
    46a0:	strb	w5, [x8, w6, sxtw]
    46a4:	ldr	w5, [x24, #640]
    46a8:	ldr	w6, [x24, #116]
    46ac:	ldr	w8, [x24, #644]
    46b0:	lsl	w5, w5, #8
    46b4:	add	w6, w6, #0x1
    46b8:	sub	w8, w8, #0x8
    46bc:	str	w6, [x24, #116]
    46c0:	str	w5, [x24, #640]
    46c4:	cmp	w8, #0x7
    46c8:	str	w8, [x24, #644]
    46cc:	b.gt	4698 <BZ2_compressBlock+0x44c8>
    46d0:	ldrh	w9, [x0, #58]
    46d4:	sub	w6, w22, w8
    46d8:	sub	w6, w6, w7
    46dc:	add	w8, w7, w8
    46e0:	and	x7, x9, #0xffff
    46e4:	str	w8, [x24, #644]
    46e8:	lsl	w6, w4, w6
    46ec:	orr	w5, w6, w5
    46f0:	str	w5, [x24, #640]
    46f4:	cmp	w8, #0x7
    46f8:	ldrb	w7, [x2, x7]
    46fc:	ldr	w4, [x1, x9, lsl #2]
    4700:	b.le	4740 <BZ2_compressBlock+0x4570>
    4704:	ldr	w9, [x24, #116]
    4708:	ldr	x8, [x24, #80]
    470c:	lsr	w6, w5, #24
    4710:	strb	w6, [x8, w9, sxtw]
    4714:	ldr	w6, [x24, #640]
    4718:	ldr	w9, [x24, #116]
    471c:	ldr	w8, [x24, #644]
    4720:	lsl	w5, w6, #8
    4724:	add	w9, w9, #0x1
    4728:	sub	w8, w8, #0x8
    472c:	str	w9, [x24, #116]
    4730:	str	w5, [x24, #640]
    4734:	cmp	w8, #0x7
    4738:	str	w8, [x24, #644]
    473c:	b.gt	4708 <BZ2_compressBlock+0x4538>
    4740:	ldrh	w9, [x0, #60]
    4744:	sub	w6, w22, w8
    4748:	sub	w6, w6, w7
    474c:	add	w8, w7, w8
    4750:	and	x7, x9, #0xffff
    4754:	str	w8, [x24, #644]
    4758:	lsl	w6, w4, w6
    475c:	orr	w6, w6, w5
    4760:	str	w6, [x24, #640]
    4764:	cmp	w8, #0x7
    4768:	ldrb	w7, [x2, x7]
    476c:	ldr	w4, [x1, x9, lsl #2]
    4770:	b.le	47b0 <BZ2_compressBlock+0x45e0>
    4774:	ldr	w5, [x24, #116]
    4778:	ldr	x8, [x24, #80]
    477c:	lsr	w6, w6, #24
    4780:	strb	w6, [x8, w5, sxtw]
    4784:	ldr	w6, [x24, #640]
    4788:	ldr	w5, [x24, #116]
    478c:	ldr	w8, [x24, #644]
    4790:	lsl	w6, w6, #8
    4794:	add	w5, w5, #0x1
    4798:	sub	w8, w8, #0x8
    479c:	str	w5, [x24, #116]
    47a0:	str	w6, [x24, #640]
    47a4:	cmp	w8, #0x7
    47a8:	str	w8, [x24, #644]
    47ac:	b.gt	4778 <BZ2_compressBlock+0x45a8>
    47b0:	ldrh	w9, [x0, #62]
    47b4:	sub	w5, w22, w8
    47b8:	sub	w5, w5, w7
    47bc:	add	w8, w7, w8
    47c0:	and	x7, x9, #0xffff
    47c4:	str	w8, [x24, #644]
    47c8:	lsl	w5, w4, w5
    47cc:	orr	w6, w5, w6
    47d0:	str	w6, [x24, #640]
    47d4:	cmp	w8, #0x7
    47d8:	ldrb	w7, [x2, x7]
    47dc:	ldr	w4, [x1, x9, lsl #2]
    47e0:	b.le	4820 <BZ2_compressBlock+0x4650>
    47e4:	ldr	w9, [x24, #116]
    47e8:	ldr	x8, [x24, #80]
    47ec:	lsr	w5, w6, #24
    47f0:	strb	w5, [x8, w9, sxtw]
    47f4:	ldr	w5, [x24, #640]
    47f8:	ldr	w9, [x24, #116]
    47fc:	ldr	w8, [x24, #644]
    4800:	lsl	w6, w5, #8
    4804:	add	w9, w9, #0x1
    4808:	sub	w8, w8, #0x8
    480c:	str	w9, [x24, #116]
    4810:	str	w6, [x24, #640]
    4814:	cmp	w8, #0x7
    4818:	str	w8, [x24, #644]
    481c:	b.gt	47e8 <BZ2_compressBlock+0x4618>
    4820:	ldrh	w9, [x0, #64]
    4824:	sub	w5, w22, w8
    4828:	sub	w5, w5, w7
    482c:	add	w8, w7, w8
    4830:	and	x7, x9, #0xffff
    4834:	str	w8, [x24, #644]
    4838:	lsl	w5, w4, w5
    483c:	orr	w5, w5, w6
    4840:	str	w5, [x24, #640]
    4844:	cmp	w8, #0x7
    4848:	ldrb	w7, [x2, x7]
    484c:	ldr	w4, [x1, x9, lsl #2]
    4850:	b.le	4890 <BZ2_compressBlock+0x46c0>
    4854:	ldr	w6, [x24, #116]
    4858:	ldr	x8, [x24, #80]
    485c:	lsr	w5, w5, #24
    4860:	strb	w5, [x8, w6, sxtw]
    4864:	ldr	w5, [x24, #640]
    4868:	ldr	w6, [x24, #116]
    486c:	ldr	w8, [x24, #644]
    4870:	lsl	w5, w5, #8
    4874:	add	w6, w6, #0x1
    4878:	sub	w8, w8, #0x8
    487c:	str	w6, [x24, #116]
    4880:	str	w5, [x24, #640]
    4884:	cmp	w8, #0x7
    4888:	str	w8, [x24, #644]
    488c:	b.gt	4858 <BZ2_compressBlock+0x4688>
    4890:	ldrh	w9, [x0, #66]
    4894:	sub	w6, w22, w8
    4898:	sub	w6, w6, w7
    489c:	add	w8, w7, w8
    48a0:	and	x7, x9, #0xffff
    48a4:	str	w8, [x24, #644]
    48a8:	lsl	w6, w4, w6
    48ac:	orr	w5, w6, w5
    48b0:	str	w5, [x24, #640]
    48b4:	cmp	w8, #0x7
    48b8:	ldrb	w7, [x2, x7]
    48bc:	ldr	w4, [x1, x9, lsl #2]
    48c0:	b.le	4900 <BZ2_compressBlock+0x4730>
    48c4:	ldr	w9, [x24, #116]
    48c8:	ldr	x8, [x24, #80]
    48cc:	lsr	w6, w5, #24
    48d0:	strb	w6, [x8, w9, sxtw]
    48d4:	ldr	w6, [x24, #640]
    48d8:	ldr	w9, [x24, #116]
    48dc:	ldr	w8, [x24, #644]
    48e0:	lsl	w5, w6, #8
    48e4:	add	w9, w9, #0x1
    48e8:	sub	w8, w8, #0x8
    48ec:	str	w9, [x24, #116]
    48f0:	str	w5, [x24, #640]
    48f4:	cmp	w8, #0x7
    48f8:	str	w8, [x24, #644]
    48fc:	b.gt	48c8 <BZ2_compressBlock+0x46f8>
    4900:	ldrh	w9, [x0, #68]
    4904:	sub	w6, w22, w8
    4908:	sub	w6, w6, w7
    490c:	add	w8, w7, w8
    4910:	and	x7, x9, #0xffff
    4914:	str	w8, [x24, #644]
    4918:	lsl	w6, w4, w6
    491c:	orr	w6, w6, w5
    4920:	str	w6, [x24, #640]
    4924:	cmp	w8, #0x7
    4928:	ldrb	w7, [x2, x7]
    492c:	ldr	w4, [x1, x9, lsl #2]
    4930:	b.le	4970 <BZ2_compressBlock+0x47a0>
    4934:	ldr	w5, [x24, #116]
    4938:	ldr	x8, [x24, #80]
    493c:	lsr	w6, w6, #24
    4940:	strb	w6, [x8, w5, sxtw]
    4944:	ldr	w6, [x24, #640]
    4948:	ldr	w5, [x24, #116]
    494c:	ldr	w8, [x24, #644]
    4950:	lsl	w6, w6, #8
    4954:	add	w5, w5, #0x1
    4958:	sub	w8, w8, #0x8
    495c:	str	w5, [x24, #116]
    4960:	str	w6, [x24, #640]
    4964:	cmp	w8, #0x7
    4968:	str	w8, [x24, #644]
    496c:	b.gt	4938 <BZ2_compressBlock+0x4768>
    4970:	ldrh	w9, [x0, #70]
    4974:	sub	w5, w22, w8
    4978:	sub	w5, w5, w7
    497c:	add	w8, w7, w8
    4980:	and	x7, x9, #0xffff
    4984:	str	w8, [x24, #644]
    4988:	lsl	w5, w4, w5
    498c:	orr	w6, w5, w6
    4990:	str	w6, [x24, #640]
    4994:	cmp	w8, #0x7
    4998:	ldrb	w7, [x2, x7]
    499c:	ldr	w4, [x1, x9, lsl #2]
    49a0:	b.le	49e0 <BZ2_compressBlock+0x4810>
    49a4:	ldr	w9, [x24, #116]
    49a8:	ldr	x8, [x24, #80]
    49ac:	lsr	w5, w6, #24
    49b0:	strb	w5, [x8, w9, sxtw]
    49b4:	ldr	w5, [x24, #640]
    49b8:	ldr	w9, [x24, #116]
    49bc:	ldr	w8, [x24, #644]
    49c0:	lsl	w6, w5, #8
    49c4:	add	w9, w9, #0x1
    49c8:	sub	w8, w8, #0x8
    49cc:	str	w9, [x24, #116]
    49d0:	str	w6, [x24, #640]
    49d4:	cmp	w8, #0x7
    49d8:	str	w8, [x24, #644]
    49dc:	b.gt	49a8 <BZ2_compressBlock+0x47d8>
    49e0:	ldrh	w9, [x0, #72]
    49e4:	sub	w5, w22, w8
    49e8:	sub	w5, w5, w7
    49ec:	add	w8, w7, w8
    49f0:	and	x7, x9, #0xffff
    49f4:	str	w8, [x24, #644]
    49f8:	lsl	w5, w4, w5
    49fc:	orr	w5, w5, w6
    4a00:	str	w5, [x24, #640]
    4a04:	cmp	w8, #0x7
    4a08:	ldrb	w7, [x2, x7]
    4a0c:	ldr	w4, [x1, x9, lsl #2]
    4a10:	b.le	4a50 <BZ2_compressBlock+0x4880>
    4a14:	ldr	w6, [x24, #116]
    4a18:	ldr	x8, [x24, #80]
    4a1c:	lsr	w5, w5, #24
    4a20:	strb	w5, [x8, w6, sxtw]
    4a24:	ldr	w5, [x24, #640]
    4a28:	ldr	w6, [x24, #116]
    4a2c:	ldr	w8, [x24, #644]
    4a30:	lsl	w5, w5, #8
    4a34:	add	w6, w6, #0x1
    4a38:	sub	w8, w8, #0x8
    4a3c:	str	w6, [x24, #116]
    4a40:	str	w5, [x24, #640]
    4a44:	cmp	w8, #0x7
    4a48:	str	w8, [x24, #644]
    4a4c:	b.gt	4a18 <BZ2_compressBlock+0x4848>
    4a50:	ldrh	w9, [x0, #74]
    4a54:	sub	w6, w22, w8
    4a58:	sub	w6, w6, w7
    4a5c:	add	w8, w7, w8
    4a60:	and	x7, x9, #0xffff
    4a64:	str	w8, [x24, #644]
    4a68:	lsl	w6, w4, w6
    4a6c:	orr	w5, w6, w5
    4a70:	str	w5, [x24, #640]
    4a74:	cmp	w8, #0x7
    4a78:	ldrb	w7, [x2, x7]
    4a7c:	ldr	w4, [x1, x9, lsl #2]
    4a80:	b.le	4ac0 <BZ2_compressBlock+0x48f0>
    4a84:	ldr	w9, [x24, #116]
    4a88:	ldr	x8, [x24, #80]
    4a8c:	lsr	w6, w5, #24
    4a90:	strb	w6, [x8, w9, sxtw]
    4a94:	ldr	w6, [x24, #640]
    4a98:	ldr	w9, [x24, #116]
    4a9c:	ldr	w8, [x24, #644]
    4aa0:	lsl	w5, w6, #8
    4aa4:	add	w9, w9, #0x1
    4aa8:	sub	w8, w8, #0x8
    4aac:	str	w9, [x24, #116]
    4ab0:	str	w5, [x24, #640]
    4ab4:	cmp	w8, #0x7
    4ab8:	str	w8, [x24, #644]
    4abc:	b.gt	4a88 <BZ2_compressBlock+0x48b8>
    4ac0:	ldrh	w9, [x0, #76]
    4ac4:	sub	w6, w22, w8
    4ac8:	sub	w6, w6, w7
    4acc:	add	w8, w7, w8
    4ad0:	and	x7, x9, #0xffff
    4ad4:	str	w8, [x24, #644]
    4ad8:	lsl	w6, w4, w6
    4adc:	orr	w6, w6, w5
    4ae0:	str	w6, [x24, #640]
    4ae4:	cmp	w8, #0x7
    4ae8:	ldrb	w7, [x2, x7]
    4aec:	ldr	w4, [x1, x9, lsl #2]
    4af0:	b.le	4b30 <BZ2_compressBlock+0x4960>
    4af4:	ldr	w5, [x24, #116]
    4af8:	ldr	x8, [x24, #80]
    4afc:	lsr	w6, w6, #24
    4b00:	strb	w6, [x8, w5, sxtw]
    4b04:	ldr	w6, [x24, #640]
    4b08:	ldr	w5, [x24, #116]
    4b0c:	ldr	w8, [x24, #644]
    4b10:	lsl	w6, w6, #8
    4b14:	add	w5, w5, #0x1
    4b18:	sub	w8, w8, #0x8
    4b1c:	str	w5, [x24, #116]
    4b20:	str	w6, [x24, #640]
    4b24:	cmp	w8, #0x7
    4b28:	str	w8, [x24, #644]
    4b2c:	b.gt	4af8 <BZ2_compressBlock+0x4928>
    4b30:	ldrh	w9, [x0, #78]
    4b34:	sub	w5, w22, w8
    4b38:	sub	w5, w5, w7
    4b3c:	add	w8, w7, w8
    4b40:	and	x7, x9, #0xffff
    4b44:	str	w8, [x24, #644]
    4b48:	lsl	w5, w4, w5
    4b4c:	orr	w6, w5, w6
    4b50:	str	w6, [x24, #640]
    4b54:	cmp	w8, #0x7
    4b58:	ldrb	w7, [x2, x7]
    4b5c:	ldr	w4, [x1, x9, lsl #2]
    4b60:	b.le	4ba0 <BZ2_compressBlock+0x49d0>
    4b64:	ldr	w9, [x24, #116]
    4b68:	ldr	x8, [x24, #80]
    4b6c:	lsr	w5, w6, #24
    4b70:	strb	w5, [x8, w9, sxtw]
    4b74:	ldr	w5, [x24, #640]
    4b78:	ldr	w9, [x24, #116]
    4b7c:	ldr	w8, [x24, #644]
    4b80:	lsl	w6, w5, #8
    4b84:	add	w9, w9, #0x1
    4b88:	sub	w8, w8, #0x8
    4b8c:	str	w9, [x24, #116]
    4b90:	str	w6, [x24, #640]
    4b94:	cmp	w8, #0x7
    4b98:	str	w8, [x24, #644]
    4b9c:	b.gt	4b68 <BZ2_compressBlock+0x4998>
    4ba0:	ldrh	w9, [x0, #80]
    4ba4:	sub	w5, w22, w8
    4ba8:	sub	w5, w5, w7
    4bac:	add	w8, w7, w8
    4bb0:	and	x7, x9, #0xffff
    4bb4:	str	w8, [x24, #644]
    4bb8:	lsl	w5, w4, w5
    4bbc:	orr	w5, w5, w6
    4bc0:	str	w5, [x24, #640]
    4bc4:	cmp	w8, #0x7
    4bc8:	ldrb	w7, [x2, x7]
    4bcc:	ldr	w4, [x1, x9, lsl #2]
    4bd0:	b.le	4c10 <BZ2_compressBlock+0x4a40>
    4bd4:	ldr	w6, [x24, #116]
    4bd8:	ldr	x8, [x24, #80]
    4bdc:	lsr	w5, w5, #24
    4be0:	strb	w5, [x8, w6, sxtw]
    4be4:	ldr	w5, [x24, #640]
    4be8:	ldr	w6, [x24, #116]
    4bec:	ldr	w8, [x24, #644]
    4bf0:	lsl	w5, w5, #8
    4bf4:	add	w6, w6, #0x1
    4bf8:	sub	w8, w8, #0x8
    4bfc:	str	w6, [x24, #116]
    4c00:	str	w5, [x24, #640]
    4c04:	cmp	w8, #0x7
    4c08:	str	w8, [x24, #644]
    4c0c:	b.gt	4bd8 <BZ2_compressBlock+0x4a08>
    4c10:	ldrh	w9, [x0, #82]
    4c14:	sub	w6, w22, w8
    4c18:	sub	w6, w6, w7
    4c1c:	add	w8, w7, w8
    4c20:	and	x7, x9, #0xffff
    4c24:	str	w8, [x24, #644]
    4c28:	lsl	w6, w4, w6
    4c2c:	orr	w5, w6, w5
    4c30:	str	w5, [x24, #640]
    4c34:	cmp	w8, #0x7
    4c38:	ldrb	w7, [x2, x7]
    4c3c:	ldr	w4, [x1, x9, lsl #2]
    4c40:	b.le	4c80 <BZ2_compressBlock+0x4ab0>
    4c44:	ldr	w9, [x24, #116]
    4c48:	ldr	x8, [x24, #80]
    4c4c:	lsr	w6, w5, #24
    4c50:	strb	w6, [x8, w9, sxtw]
    4c54:	ldr	w6, [x24, #640]
    4c58:	ldr	w9, [x24, #116]
    4c5c:	ldr	w8, [x24, #644]
    4c60:	lsl	w5, w6, #8
    4c64:	add	w9, w9, #0x1
    4c68:	sub	w8, w8, #0x8
    4c6c:	str	w9, [x24, #116]
    4c70:	str	w5, [x24, #640]
    4c74:	cmp	w8, #0x7
    4c78:	str	w8, [x24, #644]
    4c7c:	b.gt	4c48 <BZ2_compressBlock+0x4a78>
    4c80:	ldrh	w9, [x0, #84]
    4c84:	sub	w6, w22, w8
    4c88:	sub	w6, w6, w7
    4c8c:	add	w8, w7, w8
    4c90:	and	x7, x9, #0xffff
    4c94:	str	w8, [x24, #644]
    4c98:	lsl	w6, w4, w6
    4c9c:	orr	w6, w6, w5
    4ca0:	str	w6, [x24, #640]
    4ca4:	cmp	w8, #0x7
    4ca8:	ldrb	w7, [x2, x7]
    4cac:	ldr	w4, [x1, x9, lsl #2]
    4cb0:	b.le	4cf0 <BZ2_compressBlock+0x4b20>
    4cb4:	ldr	w5, [x24, #116]
    4cb8:	ldr	x8, [x24, #80]
    4cbc:	lsr	w6, w6, #24
    4cc0:	strb	w6, [x8, w5, sxtw]
    4cc4:	ldr	w6, [x24, #640]
    4cc8:	ldr	w5, [x24, #116]
    4ccc:	ldr	w8, [x24, #644]
    4cd0:	lsl	w6, w6, #8
    4cd4:	add	w5, w5, #0x1
    4cd8:	sub	w8, w8, #0x8
    4cdc:	str	w5, [x24, #116]
    4ce0:	str	w6, [x24, #640]
    4ce4:	cmp	w8, #0x7
    4ce8:	str	w8, [x24, #644]
    4cec:	b.gt	4cb8 <BZ2_compressBlock+0x4ae8>
    4cf0:	ldrh	w9, [x0, #86]
    4cf4:	sub	w5, w22, w8
    4cf8:	sub	w5, w5, w7
    4cfc:	add	w8, w7, w8
    4d00:	and	x7, x9, #0xffff
    4d04:	str	w8, [x24, #644]
    4d08:	lsl	w5, w4, w5
    4d0c:	orr	w6, w5, w6
    4d10:	str	w6, [x24, #640]
    4d14:	cmp	w8, #0x7
    4d18:	ldrb	w7, [x2, x7]
    4d1c:	ldr	w4, [x1, x9, lsl #2]
    4d20:	b.le	4d60 <BZ2_compressBlock+0x4b90>
    4d24:	ldr	w9, [x24, #116]
    4d28:	ldr	x8, [x24, #80]
    4d2c:	lsr	w5, w6, #24
    4d30:	strb	w5, [x8, w9, sxtw]
    4d34:	ldr	w5, [x24, #640]
    4d38:	ldr	w9, [x24, #116]
    4d3c:	ldr	w8, [x24, #644]
    4d40:	lsl	w6, w5, #8
    4d44:	add	w9, w9, #0x1
    4d48:	sub	w8, w8, #0x8
    4d4c:	str	w9, [x24, #116]
    4d50:	str	w6, [x24, #640]
    4d54:	cmp	w8, #0x7
    4d58:	str	w8, [x24, #644]
    4d5c:	b.gt	4d28 <BZ2_compressBlock+0x4b58>
    4d60:	ldrh	w9, [x0, #88]
    4d64:	sub	w5, w22, w8
    4d68:	sub	w5, w5, w7
    4d6c:	add	w8, w7, w8
    4d70:	and	x7, x9, #0xffff
    4d74:	str	w8, [x24, #644]
    4d78:	lsl	w5, w4, w5
    4d7c:	orr	w5, w5, w6
    4d80:	str	w5, [x24, #640]
    4d84:	cmp	w8, #0x7
    4d88:	ldrb	w7, [x2, x7]
    4d8c:	ldr	w4, [x1, x9, lsl #2]
    4d90:	b.le	4dd0 <BZ2_compressBlock+0x4c00>
    4d94:	ldr	w6, [x24, #116]
    4d98:	ldr	x8, [x24, #80]
    4d9c:	lsr	w5, w5, #24
    4da0:	strb	w5, [x8, w6, sxtw]
    4da4:	ldr	w5, [x24, #640]
    4da8:	ldr	w6, [x24, #116]
    4dac:	ldr	w8, [x24, #644]
    4db0:	lsl	w5, w5, #8
    4db4:	add	w6, w6, #0x1
    4db8:	sub	w8, w8, #0x8
    4dbc:	str	w6, [x24, #116]
    4dc0:	str	w5, [x24, #640]
    4dc4:	cmp	w8, #0x7
    4dc8:	str	w8, [x24, #644]
    4dcc:	b.gt	4d98 <BZ2_compressBlock+0x4bc8>
    4dd0:	ldrh	w9, [x0, #90]
    4dd4:	sub	w6, w22, w8
    4dd8:	sub	w6, w6, w7
    4ddc:	add	w8, w7, w8
    4de0:	and	x7, x9, #0xffff
    4de4:	str	w8, [x24, #644]
    4de8:	lsl	w6, w4, w6
    4dec:	orr	w5, w6, w5
    4df0:	str	w5, [x24, #640]
    4df4:	cmp	w8, #0x7
    4df8:	ldrb	w7, [x2, x7]
    4dfc:	ldr	w4, [x1, x9, lsl #2]
    4e00:	b.le	4e40 <BZ2_compressBlock+0x4c70>
    4e04:	ldr	w9, [x24, #116]
    4e08:	ldr	x8, [x24, #80]
    4e0c:	lsr	w6, w5, #24
    4e10:	strb	w6, [x8, w9, sxtw]
    4e14:	ldr	w6, [x24, #640]
    4e18:	ldr	w9, [x24, #116]
    4e1c:	ldr	w8, [x24, #644]
    4e20:	lsl	w5, w6, #8
    4e24:	add	w9, w9, #0x1
    4e28:	sub	w8, w8, #0x8
    4e2c:	str	w9, [x24, #116]
    4e30:	str	w5, [x24, #640]
    4e34:	cmp	w8, #0x7
    4e38:	str	w8, [x24, #644]
    4e3c:	b.gt	4e08 <BZ2_compressBlock+0x4c38>
    4e40:	ldrh	w9, [x0, #92]
    4e44:	sub	w6, w22, w8
    4e48:	sub	w6, w6, w7
    4e4c:	add	w8, w7, w8
    4e50:	and	x7, x9, #0xffff
    4e54:	str	w8, [x24, #644]
    4e58:	lsl	w6, w4, w6
    4e5c:	orr	w6, w6, w5
    4e60:	str	w6, [x24, #640]
    4e64:	cmp	w8, #0x7
    4e68:	ldrb	w7, [x2, x7]
    4e6c:	ldr	w4, [x1, x9, lsl #2]
    4e70:	b.le	4eb0 <BZ2_compressBlock+0x4ce0>
    4e74:	ldr	w5, [x24, #116]
    4e78:	ldr	x8, [x24, #80]
    4e7c:	lsr	w6, w6, #24
    4e80:	strb	w6, [x8, w5, sxtw]
    4e84:	ldr	w6, [x24, #640]
    4e88:	ldr	w5, [x24, #116]
    4e8c:	ldr	w8, [x24, #644]
    4e90:	lsl	w6, w6, #8
    4e94:	add	w5, w5, #0x1
    4e98:	sub	w8, w8, #0x8
    4e9c:	str	w5, [x24, #116]
    4ea0:	str	w6, [x24, #640]
    4ea4:	cmp	w8, #0x7
    4ea8:	str	w8, [x24, #644]
    4eac:	b.gt	4e78 <BZ2_compressBlock+0x4ca8>
    4eb0:	ldrh	w9, [x0, #94]
    4eb4:	sub	w5, w22, w8
    4eb8:	sub	w5, w5, w7
    4ebc:	add	w8, w7, w8
    4ec0:	and	x7, x9, #0xffff
    4ec4:	str	w8, [x24, #644]
    4ec8:	lsl	w5, w4, w5
    4ecc:	orr	w6, w5, w6
    4ed0:	str	w6, [x24, #640]
    4ed4:	cmp	w8, #0x7
    4ed8:	ldrb	w7, [x2, x7]
    4edc:	ldr	w4, [x1, x9, lsl #2]
    4ee0:	b.le	4f20 <BZ2_compressBlock+0x4d50>
    4ee4:	ldr	w9, [x24, #116]
    4ee8:	ldr	x8, [x24, #80]
    4eec:	lsr	w5, w6, #24
    4ef0:	strb	w5, [x8, w9, sxtw]
    4ef4:	ldr	w5, [x24, #640]
    4ef8:	ldr	w9, [x24, #116]
    4efc:	ldr	w8, [x24, #644]
    4f00:	lsl	w6, w5, #8
    4f04:	add	w9, w9, #0x1
    4f08:	sub	w8, w8, #0x8
    4f0c:	str	w9, [x24, #116]
    4f10:	str	w6, [x24, #640]
    4f14:	cmp	w8, #0x7
    4f18:	str	w8, [x24, #644]
    4f1c:	b.gt	4ee8 <BZ2_compressBlock+0x4d18>
    4f20:	ldrh	w9, [x0, #96]
    4f24:	sub	w5, w22, w8
    4f28:	sub	w5, w5, w7
    4f2c:	add	w8, w7, w8
    4f30:	and	x7, x9, #0xffff
    4f34:	str	w8, [x24, #644]
    4f38:	lsl	w5, w4, w5
    4f3c:	orr	w5, w5, w6
    4f40:	str	w5, [x24, #640]
    4f44:	cmp	w8, #0x7
    4f48:	ldrb	w7, [x2, x7]
    4f4c:	ldr	w4, [x1, x9, lsl #2]
    4f50:	b.le	4f90 <BZ2_compressBlock+0x4dc0>
    4f54:	ldr	w9, [x24, #116]
    4f58:	ldr	x6, [x24, #80]
    4f5c:	lsr	w5, w5, #24
    4f60:	strb	w5, [x6, w9, sxtw]
    4f64:	ldr	w5, [x24, #640]
    4f68:	ldr	w9, [x24, #116]
    4f6c:	ldr	w6, [x24, #644]
    4f70:	lsl	w5, w5, #8
    4f74:	add	w9, w9, #0x1
    4f78:	sub	w8, w6, #0x8
    4f7c:	str	w9, [x24, #116]
    4f80:	str	w5, [x24, #640]
    4f84:	cmp	w8, #0x7
    4f88:	str	w8, [x24, #644]
    4f8c:	b.gt	4f58 <BZ2_compressBlock+0x4d88>
    4f90:	ldrh	w9, [x0, #98]
    4f94:	sub	w0, w22, w8
    4f98:	sub	w0, w0, w7
    4f9c:	add	w6, w7, w8
    4fa0:	and	x7, x9, #0xffff
    4fa4:	str	w6, [x24, #644]
    4fa8:	lsl	w0, w4, w0
    4fac:	orr	w0, w0, w5
    4fb0:	str	w0, [x24, #640]
    4fb4:	cmp	w6, #0x7
    4fb8:	ldrb	w5, [x2, x7]
    4fbc:	ldr	w4, [x1, x9, lsl #2]
    4fc0:	b.le	5000 <BZ2_compressBlock+0x4e30>
    4fc4:	ldr	w1, [x24, #116]
    4fc8:	ldr	x2, [x24, #80]
    4fcc:	lsr	w0, w0, #24
    4fd0:	strb	w0, [x2, w1, sxtw]
    4fd4:	ldr	w0, [x24, #640]
    4fd8:	ldr	w1, [x24, #116]
    4fdc:	ldr	w6, [x24, #644]
    4fe0:	lsl	w0, w0, #8
    4fe4:	add	w1, w1, #0x1
    4fe8:	sub	w6, w6, #0x8
    4fec:	str	w1, [x24, #116]
    4ff0:	str	w0, [x24, #640]
    4ff4:	cmp	w6, #0x7
    4ff8:	str	w6, [x24, #644]
    4ffc:	b.gt	4fc8 <BZ2_compressBlock+0x4df8>
    5000:	sub	w1, w22, w6
    5004:	add	w6, w5, w6
    5008:	sub	w1, w1, w5
    500c:	str	w6, [x24, #644]
    5010:	mov	w21, w25
    5014:	add	x25, x25, #0x1
    5018:	lsl	w1, w4, w1
    501c:	orr	w0, w1, w0
    5020:	str	w0, [x24, #640]
    5024:	ldr	w0, [x24, #668]
    5028:	cmp	w0, w26
    502c:	b.gt	39f4 <BZ2_compressBlock+0x3824>
    5030:	ldr	w23, [sp, #112]
    5034:	ldr	w28, [sp, #160]
    5038:	str	w21, [sp, #632]
    503c:	ldr	w0, [sp, #632]
    5040:	cmp	w28, w0
    5044:	b.eq	5050 <BZ2_compressBlock+0x4e80>  // b.none
    5048:	mov	w0, #0xbbf                 	// #3007
    504c:	bl	0 <BZ2_bz__AssertH__fail>
    5050:	ldr	w0, [x24, #656]
    5054:	cmp	w0, #0x2
    5058:	b.gt	5a38 <BZ2_compressBlock+0x5868>
    505c:	ldp	x19, x20, [sp, #16]
    5060:	ldp	x21, x22, [sp, #32]
    5064:	ldp	x25, x26, [sp, #64]
    5068:	ldp	x27, x28, [sp, #80]
    506c:	ldr	d8, [sp, #96]
    5070:	b	258 <BZ2_compressBlock+0x88>
    5074:	strb	w20, [x2, #844]
    5078:	b	10c0 <BZ2_compressBlock+0xef0>
    507c:	mov	w7, w2
    5080:	mov	w1, #0x2                   	// #2
    5084:	mov	w2, w4
    5088:	mov	w4, w3
    508c:	mov	w3, w7
    5090:	b	2a10 <BZ2_compressBlock+0x2840>
    5094:	strb	w20, [x2, #844]
    5098:	b	10ec <BZ2_compressBlock+0xf1c>
    509c:	strb	w20, [x2, #844]
    50a0:	b	1118 <BZ2_compressBlock+0xf48>
    50a4:	mov	w7, w2
    50a8:	mov	w1, #0x3                   	// #3
    50ac:	mov	w2, w3
    50b0:	mov	w3, w7
    50b4:	b	2a10 <BZ2_compressBlock+0x2840>
    50b8:	strb	w20, [x2, #844]
    50bc:	b	1144 <BZ2_compressBlock+0xf74>
    50c0:	mov	w1, #0x4                   	// #4
    50c4:	b	2a10 <BZ2_compressBlock+0x2840>
    50c8:	strb	w20, [x2, #844]
    50cc:	b	1170 <BZ2_compressBlock+0xfa0>
    50d0:	ldr	w0, [sp, #128]
    50d4:	adrp	x19, 0 <stderr>
    50d8:	ldr	w2, [sp, #544]
    50dc:	adrp	x1, 0 <bsPutUInt32>
    50e0:	add	x1, x1, #0x0
    50e4:	add	x20, x19, #0x0
    50e8:	asr	w3, w0, #3
    50ec:	ldr	x0, [x19]
    50f0:	ldr	x21, [sp, #152]
    50f4:	bl	0 <fprintf>
    50f8:	ldr	x24, [sp, #680]
    50fc:	adrp	x0, 0 <bsPutUInt32>
    5100:	add	x23, x0, #0x0
    5104:	nop
    5108:	ldr	w2, [x21], #4
    510c:	mov	x1, x23
    5110:	ldr	x0, [x20]
    5114:	bl	0 <fprintf>
    5118:	cmp	x24, x21
    511c:	b.ne	5108 <BZ2_compressBlock+0x4f38>  // b.any
    5120:	ldr	x1, [x19]
    5124:	mov	w0, #0xa                   	// #10
    5128:	bl	0 <fputc>
    512c:	b	2910 <BZ2_compressBlock+0x2740>
    5130:	ldr	w0, [sp, #556]
    5134:	cmp	w0, #0xe
    5138:	b.ls	5be8 <BZ2_compressBlock+0x5a18>  // b.plast
    513c:	ldr	x11, [sp, #584]
    5140:	mov	x19, #0x9652                	// #38482
    5144:	ldr	x9, [sp, #592]
    5148:	mov	x20, #0x9550                	// #38224
    514c:	ldr	x10, [sp, #640]
    5150:	mov	x21, #0x9856                	// #38998
    5154:	mov	x23, #0x9754                	// #38740
    5158:	mov	x24, #0xc9b8                	// #51640
    515c:	add	x8, x22, x19
    5160:	add	x7, x22, x20
    5164:	add	x6, x22, x21
    5168:	add	x5, x22, x23
    516c:	add	x0, x22, x24
    5170:	mov	x1, #0x0                   	// #0
    5174:	nop
    5178:	ldr	q0, [x10, x1]
    517c:	mov	x2, x0
    5180:	ldr	q16, [x11, x1]
    5184:	add	x4, x0, #0x20
    5188:	uxtl	v1.8h, v0.8b
    518c:	add	x3, x0, #0x30
    5190:	uxtl2	v0.8h, v0.16b
    5194:	uxtl	v2.8h, v16.8b
    5198:	uxtl2	v16.8h, v16.16b
    519c:	uxtl	v7.4s, v1.4h
    51a0:	uxtl2	v6.4s, v1.8h
    51a4:	uxtl	v1.4s, v2.4h
    51a8:	uxtl2	v2.4s, v2.8h
    51ac:	shl	v7.4s, v7.4s, #16
    51b0:	shl	v6.4s, v6.4s, #16
    51b4:	uxtl	v8.4s, v0.4h
    51b8:	ldr	q3, [x8, x1]
    51bc:	orr	v7.16b, v7.16b, v1.16b
    51c0:	orr	v6.16b, v6.16b, v2.16b
    51c4:	uxtl2	v4.4s, v0.8h
    51c8:	ldr	q2, [x7, x1]
    51cc:	ldr	q0, [x5, x1]
    51d0:	ldr	q1, [x6, x1]
    51d4:	str	s7, [x2], #16
    51d8:	add	x1, x1, #0x10
    51dc:	st1	{v7.s}[1], [x2]
    51e0:	add	x2, x0, #0x70
    51e4:	st1	{v7.s}[2], [x4]
    51e8:	add	x4, x0, #0x50
    51ec:	uxtl	v5.8h, v3.8b
    51f0:	st1	{v7.s}[3], [x3]
    51f4:	uxtl	v17.4s, v16.4h
    51f8:	add	x3, x0, #0x60
    51fc:	shl	v8.4s, v8.4s, #16
    5200:	str	s6, [x0, #64]
    5204:	cmp	x1, x9
    5208:	uxtl2	v16.4s, v16.8h
    520c:	st1	{v6.s}[1], [x4]
    5210:	st1	{v6.s}[2], [x3]
    5214:	add	x4, x0, #0x90
    5218:	orr	v8.16b, v8.16b, v17.16b
    521c:	st1	{v6.s}[3], [x2]
    5220:	uxtl	v7.4s, v5.4h
    5224:	add	x3, x0, #0xa0
    5228:	uxtl	v6.8h, v2.8b
    522c:	add	x2, x0, #0xb0
    5230:	shl	v4.4s, v4.4s, #16
    5234:	uxtl2	v5.4s, v5.8h
    5238:	str	s8, [x0, #128]
    523c:	shl	v7.4s, v7.4s, #16
    5240:	st1	{v8.s}[1], [x4]
    5244:	orr	v4.16b, v4.16b, v16.16b
    5248:	add	x4, x0, #0xd0
    524c:	uxtl	v16.4s, v6.4h
    5250:	st1	{v8.s}[2], [x3]
    5254:	uxtl2	v3.8h, v3.16b
    5258:	add	x3, x0, #0xe0
    525c:	shl	v5.4s, v5.4s, #16
    5260:	st1	{v8.s}[3], [x2]
    5264:	add	x2, x0, #0xf0
    5268:	str	s4, [x0, #192]
    526c:	orr	v7.16b, v7.16b, v16.16b
    5270:	st1	{v4.s}[1], [x4]
    5274:	uxtl2	v16.4s, v6.8h
    5278:	add	x4, x0, #0x14
    527c:	uxtl2	v8.8h, v2.16b
    5280:	st1	{v4.s}[2], [x3]
    5284:	uxtl	v6.4s, v3.4h
    5288:	st1	{v4.s}[3], [x2]
    528c:	add	x2, x0, #0x24
    5290:	add	x3, x0, #0x34
    5294:	orr	v4.16b, v5.16b, v16.16b
    5298:	str	s7, [x0, #4]
    529c:	uxtl2	v2.4s, v3.8h
    52a0:	st1	{v7.s}[1], [x4]
    52a4:	uxtl	v16.4s, v8.4h
    52a8:	st1	{v7.s}[2], [x2]
    52ac:	shl	v6.4s, v6.4s, #16
    52b0:	add	x2, x0, #0x54
    52b4:	uxtl	v3.8h, v1.8b
    52b8:	st1	{v7.s}[3], [x3]
    52bc:	uxtl2	v8.4s, v8.8h
    52c0:	add	x3, x0, #0x64
    52c4:	shl	v2.4s, v2.4s, #16
    52c8:	str	s4, [x0, #68]
    52cc:	add	x4, x0, #0x94
    52d0:	orr	v6.16b, v6.16b, v16.16b
    52d4:	st1	{v4.s}[1], [x2]
    52d8:	add	x2, x0, #0x74
    52dc:	st1	{v4.s}[2], [x3]
    52e0:	uxtl	v5.4s, v3.4h
    52e4:	add	x3, x0, #0xa4
    52e8:	uxtl	v7.8h, v0.8b
    52ec:	orr	v2.16b, v2.16b, v8.16b
    52f0:	st1	{v4.s}[3], [x2]
    52f4:	add	x2, x0, #0xb4
    52f8:	str	s6, [x0, #132]
    52fc:	uxtl2	v1.8h, v1.16b
    5300:	st1	{v6.s}[1], [x4]
    5304:	add	x4, x0, #0xd4
    5308:	st1	{v6.s}[2], [x3]
    530c:	shl	v4.4s, v5.4s, #16
    5310:	add	x3, x0, #0xe4
    5314:	uxtl	v8.4s, v7.4h
    5318:	st1	{v6.s}[3], [x2]
    531c:	uxtl2	v3.4s, v3.8h
    5320:	add	x2, x0, #0xf4
    5324:	uxtl2	v5.8h, v0.16b
    5328:	str	s2, [x0, #196]
    532c:	orr	v4.16b, v4.16b, v8.16b
    5330:	st1	{v2.s}[1], [x4]
    5334:	st1	{v2.s}[2], [x3]
    5338:	add	x4, x0, #0x18
    533c:	shl	v3.4s, v3.4s, #16
    5340:	st1	{v2.s}[3], [x2]
    5344:	uxtl2	v7.4s, v7.8h
    5348:	add	x3, x0, #0x28
    534c:	uxtl	v2.4s, v1.4h
    5350:	add	x2, x0, #0x38
    5354:	uxtl2	v0.4s, v1.8h
    5358:	str	s4, [x0, #8]
    535c:	orr	v1.16b, v3.16b, v7.16b
    5360:	st1	{v4.s}[1], [x4]
    5364:	uxtl	v3.4s, v5.4h
    5368:	add	x4, x0, #0x58
    536c:	shl	v2.4s, v2.4s, #16
    5370:	st1	{v4.s}[2], [x3]
    5374:	add	x3, x0, #0x68
    5378:	st1	{v4.s}[3], [x2]
    537c:	shl	v0.4s, v0.4s, #16
    5380:	add	x2, x0, #0x78
    5384:	uxtl2	v5.4s, v5.8h
    5388:	str	s1, [x0, #72]
    538c:	orr	v2.16b, v2.16b, v3.16b
    5390:	st1	{v1.s}[1], [x4]
    5394:	add	x4, x0, #0x98
    5398:	st1	{v1.s}[2], [x3]
    539c:	add	x3, x0, #0xa8
    53a0:	st1	{v1.s}[3], [x2]
    53a4:	orr	v0.16b, v0.16b, v5.16b
    53a8:	add	x2, x0, #0xb8
    53ac:	str	s2, [x0, #136]
    53b0:	st1	{v2.s}[1], [x4]
    53b4:	add	x4, x0, #0xd8
    53b8:	st1	{v2.s}[2], [x3]
    53bc:	add	x3, x0, #0xe8
    53c0:	st1	{v2.s}[3], [x2]
    53c4:	add	x2, x0, #0xf8
    53c8:	str	s0, [x0, #200]
    53cc:	add	x0, x0, #0x100
    53d0:	st1	{v0.s}[1], [x4]
    53d4:	st1	{v0.s}[2], [x3]
    53d8:	st1	{v0.s}[3], [x2]
    53dc:	b.ne	5178 <BZ2_compressBlock+0x4fa8>  // b.any
    53e0:	ldr	w1, [sp, #548]
    53e4:	ldr	w0, [sp, #636]
    53e8:	cmp	w0, w1
    53ec:	b.eq	13ac <BZ2_compressBlock+0x11dc>  // b.none
    53f0:	mov	w1, w0
    53f4:	add	x2, x22, w1, sxtw
    53f8:	add	x0, x22, w1, sxtw #4
    53fc:	add	x2, x2, #0x9, lsl #12
    5400:	add	x0, x0, #0xc, lsl #12
    5404:	ldr	w7, [sp, #548]
    5408:	add	w3, w1, #0x1
    540c:	ldrb	w5, [x2, #844]
    5410:	cmp	w3, w7
    5414:	ldrb	w4, [x2, #1102]
    5418:	orr	w4, w5, w4, lsl #16
    541c:	str	w4, [x0, #2488]
    5420:	ldrb	w4, [x2, #1618]
    5424:	ldrb	w5, [x2, #1360]
    5428:	orr	w4, w5, w4, lsl #16
    542c:	str	w4, [x0, #2492]
    5430:	ldrb	w4, [x2, #2134]
    5434:	ldrb	w2, [x2, #1876]
    5438:	orr	w2, w2, w4, lsl #16
    543c:	str	w2, [x0, #2496]
    5440:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5444:	sxtw	x3, w3
    5448:	add	w4, w1, #0x2
    544c:	add	x5, x22, x3
    5450:	cmp	w4, w7
    5454:	add	x5, x5, #0x9, lsl #12
    5458:	add	x3, x22, x3, lsl #4
    545c:	add	x2, x3, #0xc, lsl #12
    5460:	ldrb	w6, [x5, #844]
    5464:	ldrb	w3, [x5, #1102]
    5468:	orr	w3, w6, w3, lsl #16
    546c:	str	w3, [x0, #2504]
    5470:	ldrb	w3, [x5, #1618]
    5474:	ldrb	w6, [x5, #1360]
    5478:	orr	w3, w6, w3, lsl #16
    547c:	str	w3, [x2, #2492]
    5480:	ldrb	w3, [x5, #2134]
    5484:	ldrb	w5, [x5, #1876]
    5488:	orr	w3, w5, w3, lsl #16
    548c:	str	w3, [x2, #2496]
    5490:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5494:	sxtw	x4, w4
    5498:	add	w3, w1, #0x3
    549c:	add	x5, x22, x4
    54a0:	cmp	w3, w7
    54a4:	add	x5, x5, #0x9, lsl #12
    54a8:	add	x4, x22, x4, lsl #4
    54ac:	add	x2, x4, #0xc, lsl #12
    54b0:	ldrb	w6, [x5, #844]
    54b4:	ldrb	w4, [x5, #1102]
    54b8:	orr	w4, w6, w4, lsl #16
    54bc:	str	w4, [x0, #2520]
    54c0:	ldrb	w4, [x5, #1618]
    54c4:	ldrb	w6, [x5, #1360]
    54c8:	orr	w4, w6, w4, lsl #16
    54cc:	str	w4, [x2, #2492]
    54d0:	ldrb	w4, [x5, #2134]
    54d4:	ldrb	w5, [x5, #1876]
    54d8:	orr	w4, w5, w4, lsl #16
    54dc:	str	w4, [x2, #2496]
    54e0:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    54e4:	sxtw	x3, w3
    54e8:	add	w4, w1, #0x4
    54ec:	add	x5, x22, x3
    54f0:	cmp	w4, w7
    54f4:	add	x5, x5, #0x9, lsl #12
    54f8:	add	x3, x22, x3, lsl #4
    54fc:	add	x2, x3, #0xc, lsl #12
    5500:	ldrb	w6, [x5, #844]
    5504:	ldrb	w3, [x5, #1102]
    5508:	orr	w3, w6, w3, lsl #16
    550c:	str	w3, [x0, #2536]
    5510:	ldrb	w3, [x5, #1618]
    5514:	ldrb	w6, [x5, #1360]
    5518:	orr	w3, w6, w3, lsl #16
    551c:	str	w3, [x2, #2492]
    5520:	ldrb	w3, [x5, #2134]
    5524:	ldrb	w5, [x5, #1876]
    5528:	orr	w3, w5, w3, lsl #16
    552c:	str	w3, [x2, #2496]
    5530:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5534:	sxtw	x4, w4
    5538:	add	w3, w1, #0x5
    553c:	add	x5, x22, x4
    5540:	cmp	w3, w7
    5544:	add	x5, x5, #0x9, lsl #12
    5548:	add	x4, x22, x4, lsl #4
    554c:	add	x2, x4, #0xc, lsl #12
    5550:	ldrb	w6, [x5, #844]
    5554:	ldrb	w4, [x5, #1102]
    5558:	orr	w4, w6, w4, lsl #16
    555c:	str	w4, [x0, #2552]
    5560:	ldrb	w4, [x5, #1618]
    5564:	ldrb	w6, [x5, #1360]
    5568:	orr	w4, w6, w4, lsl #16
    556c:	str	w4, [x2, #2492]
    5570:	ldrb	w4, [x5, #2134]
    5574:	ldrb	w5, [x5, #1876]
    5578:	orr	w4, w5, w4, lsl #16
    557c:	str	w4, [x2, #2496]
    5580:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5584:	sxtw	x3, w3
    5588:	add	w4, w1, #0x6
    558c:	add	x5, x22, x3
    5590:	cmp	w4, w7
    5594:	add	x5, x5, #0x9, lsl #12
    5598:	add	x3, x22, x3, lsl #4
    559c:	add	x2, x3, #0xc, lsl #12
    55a0:	ldrb	w6, [x5, #844]
    55a4:	ldrb	w3, [x5, #1102]
    55a8:	orr	w3, w6, w3, lsl #16
    55ac:	str	w3, [x0, #2568]
    55b0:	ldrb	w3, [x5, #1618]
    55b4:	ldrb	w6, [x5, #1360]
    55b8:	orr	w3, w6, w3, lsl #16
    55bc:	str	w3, [x2, #2492]
    55c0:	ldrb	w3, [x5, #2134]
    55c4:	ldrb	w5, [x5, #1876]
    55c8:	orr	w3, w5, w3, lsl #16
    55cc:	str	w3, [x2, #2496]
    55d0:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    55d4:	sxtw	x4, w4
    55d8:	add	w3, w1, #0x7
    55dc:	add	x5, x22, x4
    55e0:	cmp	w3, w7
    55e4:	add	x5, x5, #0x9, lsl #12
    55e8:	add	x4, x22, x4, lsl #4
    55ec:	add	x2, x4, #0xc, lsl #12
    55f0:	ldrb	w6, [x5, #844]
    55f4:	ldrb	w4, [x5, #1102]
    55f8:	orr	w4, w6, w4, lsl #16
    55fc:	str	w4, [x0, #2584]
    5600:	ldrb	w4, [x5, #1618]
    5604:	ldrb	w6, [x5, #1360]
    5608:	orr	w4, w6, w4, lsl #16
    560c:	str	w4, [x2, #2492]
    5610:	ldrb	w4, [x5, #2134]
    5614:	ldrb	w5, [x5, #1876]
    5618:	orr	w4, w5, w4, lsl #16
    561c:	str	w4, [x2, #2496]
    5620:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5624:	sxtw	x3, w3
    5628:	add	w4, w1, #0x8
    562c:	add	x5, x22, x3
    5630:	cmp	w4, w7
    5634:	add	x5, x5, #0x9, lsl #12
    5638:	add	x3, x22, x3, lsl #4
    563c:	add	x2, x3, #0xc, lsl #12
    5640:	ldrb	w6, [x5, #844]
    5644:	ldrb	w3, [x5, #1102]
    5648:	orr	w3, w6, w3, lsl #16
    564c:	str	w3, [x0, #2600]
    5650:	ldrb	w3, [x5, #1618]
    5654:	ldrb	w6, [x5, #1360]
    5658:	orr	w3, w6, w3, lsl #16
    565c:	str	w3, [x2, #2492]
    5660:	ldrb	w3, [x5, #2134]
    5664:	ldrb	w5, [x5, #1876]
    5668:	orr	w3, w5, w3, lsl #16
    566c:	str	w3, [x2, #2496]
    5670:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5674:	sxtw	x4, w4
    5678:	add	w3, w1, #0x9
    567c:	add	x5, x22, x4
    5680:	cmp	w3, w7
    5684:	add	x5, x5, #0x9, lsl #12
    5688:	add	x4, x22, x4, lsl #4
    568c:	add	x2, x4, #0xc, lsl #12
    5690:	ldrb	w6, [x5, #844]
    5694:	ldrb	w4, [x5, #1102]
    5698:	orr	w4, w6, w4, lsl #16
    569c:	str	w4, [x0, #2616]
    56a0:	ldrb	w4, [x5, #1618]
    56a4:	ldrb	w6, [x5, #1360]
    56a8:	orr	w4, w6, w4, lsl #16
    56ac:	str	w4, [x2, #2492]
    56b0:	ldrb	w4, [x5, #2134]
    56b4:	ldrb	w5, [x5, #1876]
    56b8:	orr	w4, w5, w4, lsl #16
    56bc:	str	w4, [x2, #2496]
    56c0:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    56c4:	sxtw	x3, w3
    56c8:	add	w4, w1, #0xa
    56cc:	add	x5, x22, x3
    56d0:	cmp	w4, w7
    56d4:	add	x5, x5, #0x9, lsl #12
    56d8:	add	x3, x22, x3, lsl #4
    56dc:	add	x2, x3, #0xc, lsl #12
    56e0:	ldrb	w6, [x5, #844]
    56e4:	ldrb	w3, [x5, #1102]
    56e8:	orr	w3, w6, w3, lsl #16
    56ec:	str	w3, [x0, #2632]
    56f0:	ldrb	w3, [x5, #1618]
    56f4:	ldrb	w6, [x5, #1360]
    56f8:	orr	w3, w6, w3, lsl #16
    56fc:	str	w3, [x2, #2492]
    5700:	ldrb	w3, [x5, #2134]
    5704:	ldrb	w5, [x5, #1876]
    5708:	orr	w3, w5, w3, lsl #16
    570c:	str	w3, [x2, #2496]
    5710:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5714:	sxtw	x4, w4
    5718:	add	w3, w1, #0xb
    571c:	add	x5, x22, x4
    5720:	cmp	w3, w7
    5724:	add	x5, x5, #0x9, lsl #12
    5728:	add	x4, x22, x4, lsl #4
    572c:	add	x2, x4, #0xc, lsl #12
    5730:	ldrb	w6, [x5, #844]
    5734:	ldrb	w4, [x5, #1102]
    5738:	orr	w4, w6, w4, lsl #16
    573c:	str	w4, [x0, #2648]
    5740:	ldrb	w4, [x5, #1618]
    5744:	ldrb	w6, [x5, #1360]
    5748:	orr	w4, w6, w4, lsl #16
    574c:	str	w4, [x2, #2492]
    5750:	ldrb	w4, [x5, #2134]
    5754:	ldrb	w5, [x5, #1876]
    5758:	orr	w4, w5, w4, lsl #16
    575c:	str	w4, [x2, #2496]
    5760:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5764:	sxtw	x3, w3
    5768:	add	w4, w1, #0xc
    576c:	add	x5, x22, x3
    5770:	cmp	w4, w7
    5774:	add	x5, x5, #0x9, lsl #12
    5778:	add	x3, x22, x3, lsl #4
    577c:	add	x2, x3, #0xc, lsl #12
    5780:	ldrb	w6, [x5, #844]
    5784:	ldrb	w3, [x5, #1102]
    5788:	orr	w3, w6, w3, lsl #16
    578c:	str	w3, [x0, #2664]
    5790:	ldrb	w3, [x5, #1618]
    5794:	ldrb	w6, [x5, #1360]
    5798:	orr	w3, w6, w3, lsl #16
    579c:	str	w3, [x2, #2492]
    57a0:	ldrb	w3, [x5, #2134]
    57a4:	ldrb	w5, [x5, #1876]
    57a8:	orr	w3, w5, w3, lsl #16
    57ac:	str	w3, [x2, #2496]
    57b0:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    57b4:	sxtw	x4, w4
    57b8:	add	w3, w1, #0xd
    57bc:	add	x5, x22, x4
    57c0:	cmp	w3, w7
    57c4:	add	x5, x5, #0x9, lsl #12
    57c8:	add	x4, x22, x4, lsl #4
    57cc:	add	x2, x4, #0xc, lsl #12
    57d0:	ldrb	w6, [x5, #844]
    57d4:	ldrb	w4, [x5, #1102]
    57d8:	orr	w4, w6, w4, lsl #16
    57dc:	str	w4, [x0, #2680]
    57e0:	ldrb	w4, [x5, #1618]
    57e4:	ldrb	w6, [x5, #1360]
    57e8:	orr	w4, w6, w4, lsl #16
    57ec:	str	w4, [x2, #2492]
    57f0:	ldrb	w4, [x5, #2134]
    57f4:	ldrb	w5, [x5, #1876]
    57f8:	orr	w4, w5, w4, lsl #16
    57fc:	str	w4, [x2, #2496]
    5800:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5804:	sxtw	x3, w3
    5808:	add	w1, w1, #0xe
    580c:	add	x4, x22, x3
    5810:	cmp	w1, w7
    5814:	add	x4, x4, #0x9, lsl #12
    5818:	add	x3, x22, x3, lsl #4
    581c:	add	x2, x3, #0xc, lsl #12
    5820:	ldrb	w5, [x4, #844]
    5824:	ldrb	w3, [x4, #1102]
    5828:	orr	w3, w5, w3, lsl #16
    582c:	str	w3, [x0, #2696]
    5830:	ldrb	w3, [x4, #1618]
    5834:	ldrb	w5, [x4, #1360]
    5838:	orr	w3, w5, w3, lsl #16
    583c:	str	w3, [x2, #2492]
    5840:	ldrb	w3, [x4, #2134]
    5844:	ldrb	w4, [x4, #1876]
    5848:	orr	w3, w4, w3, lsl #16
    584c:	str	w3, [x2, #2496]
    5850:	b.ge	13ac <BZ2_compressBlock+0x11dc>  // b.tcont
    5854:	sxtw	x1, w1
    5858:	add	x2, x22, x1
    585c:	add	x2, x2, #0x9, lsl #12
    5860:	add	x1, x22, x1, lsl #4
    5864:	add	x1, x1, #0xc, lsl #12
    5868:	ldrb	w3, [x2, #1102]
    586c:	ldrb	w4, [x2, #844]
    5870:	orr	w3, w4, w3, lsl #16
    5874:	str	w3, [x0, #2712]
    5878:	ldrb	w0, [x2, #1618]
    587c:	ldrb	w3, [x2, #1360]
    5880:	orr	w0, w3, w0, lsl #16
    5884:	str	w0, [x1, #2492]
    5888:	ldrb	w0, [x2, #2134]
    588c:	ldrb	w2, [x2, #1876]
    5890:	orr	w0, w2, w0, lsl #16
    5894:	str	w0, [x1, #2496]
    5898:	b	13ac <BZ2_compressBlock+0x11dc>
    589c:	strb	w20, [x2, #844]
    58a0:	b	119c <BZ2_compressBlock+0xfcc>
    58a4:	mov	w20, #0x0                   	// #0
    58a8:	mov	w2, #0x0                   	// #0
    58ac:	mov	w19, #0x20                  	// #32
    58b0:	b	2f14 <BZ2_compressBlock+0x2d44>
    58b4:	mov	w1, #0x0                   	// #0
    58b8:	b	f38 <BZ2_compressBlock+0xd68>
    58bc:	strb	wzr, [x1, #844]
    58c0:	b	11c8 <BZ2_compressBlock+0xff8>
    58c4:	ldrsw	x1, [x24, #116]
    58c8:	mov	x2, #0x42000000            	// #1107296256
    58cc:	movk	x2, #0x8, lsl #32
    58d0:	str	x2, [x24, #640]
    58d4:	mov	w2, #0x42                  	// #66
    58d8:	strb	w2, [x0, x1]
    58dc:	b	58ec <BZ2_compressBlock+0x571c>
    58e0:	ldr	x1, [x24, #80]
    58e4:	lsr	w2, w2, #24
    58e8:	strb	w2, [x1, w0, sxtw]
    58ec:	ldr	w2, [x24, #640]
    58f0:	ldr	w0, [x24, #116]
    58f4:	ldr	w3, [x24, #644]
    58f8:	lsl	w2, w2, #8
    58fc:	add	w0, w0, #0x1
    5900:	sub	w1, w3, #0x8
    5904:	str	w0, [x24, #116]
    5908:	str	w2, [x24, #640]
    590c:	cmp	w1, #0x7
    5910:	str	w1, [x24, #644]
    5914:	b.gt	58e0 <BZ2_compressBlock+0x5710>
    5918:	mov	w4, #0x18                  	// #24
    591c:	sub	w4, w4, w1
    5920:	mov	w1, #0x5a                  	// #90
    5924:	str	w3, [x24, #644]
    5928:	lsl	w1, w1, w4
    592c:	orr	w2, w1, w2
    5930:	str	w2, [x24, #640]
    5934:	cmp	w3, #0x7
    5938:	b.le	5b5c <BZ2_compressBlock+0x598c>
    593c:	nop
    5940:	ldr	x1, [x24, #80]
    5944:	lsr	w2, w2, #24
    5948:	strb	w2, [x1, w0, sxtw]
    594c:	ldr	w2, [x24, #640]
    5950:	ldr	w0, [x24, #116]
    5954:	ldr	w4, [x24, #644]
    5958:	lsl	w2, w2, #8
    595c:	add	w0, w0, #0x1
    5960:	sub	w3, w4, #0x8
    5964:	str	w0, [x24, #116]
    5968:	str	w2, [x24, #640]
    596c:	cmp	w3, #0x7
    5970:	str	w3, [x24, #644]
    5974:	b.gt	5940 <BZ2_compressBlock+0x5770>
    5978:	mov	w1, #0x18                  	// #24
    597c:	sub	w5, w1, w3
    5980:	ldr	w3, [x24, #664]
    5984:	mov	w1, #0x68                  	// #104
    5988:	lsl	w1, w1, w5
    598c:	orr	w1, w1, w2
    5990:	str	w1, [x24, #640]
    5994:	add	w3, w3, #0x30
    5998:	str	w4, [x24, #644]
    599c:	cmp	w4, #0x7
    59a0:	and	w3, w3, #0xff
    59a4:	b.le	5b64 <BZ2_compressBlock+0x5994>
    59a8:	ldr	x2, [x24, #80]
    59ac:	lsr	w1, w1, #24
    59b0:	strb	w1, [x2, w0, sxtw]
    59b4:	ldr	w1, [x24, #640]
    59b8:	ldr	w0, [x24, #116]
    59bc:	ldr	w2, [x24, #644]
    59c0:	lsl	w1, w1, #8
    59c4:	add	w0, w0, #0x1
    59c8:	sub	w4, w2, #0x8
    59cc:	str	w0, [x24, #116]
    59d0:	str	w1, [x24, #640]
    59d4:	cmp	w4, #0x7
    59d8:	str	w4, [x24, #644]
    59dc:	b.gt	59a8 <BZ2_compressBlock+0x57d8>
    59e0:	mov	w0, #0x18                  	// #24
    59e4:	sub	w4, w0, w4
    59e8:	ldr	w5, [x24, #108]
    59ec:	lsl	w4, w3, w4
    59f0:	orr	w1, w4, w1
    59f4:	str	w1, [x24, #640]
    59f8:	str	w2, [x24, #644]
    59fc:	b	250 <BZ2_compressBlock+0x80>
    5a00:	adrp	x0, 0 <stderr>
    5a04:	ldr	w2, [x24, #652]
    5a08:	adrp	x1, 0 <bsPutUInt32>
    5a0c:	add	x1, x1, #0x0
    5a10:	ldr	x0, [x0]
    5a14:	bl	0 <fprintf>
    5a18:	b	d2c <BZ2_compressBlock+0xb5c>
    5a1c:	mov	w0, #0x3                   	// #3
    5a20:	str	w0, [sp, #608]
    5a24:	str	w0, [sp, #668]
    5a28:	b	d94 <BZ2_compressBlock+0xbc4>
    5a2c:	mov	w28, #0x0                   	// #0
    5a30:	str	wzr, [sp, #128]
    5a34:	b	28f8 <BZ2_compressBlock+0x2728>
    5a38:	adrp	x0, 0 <stderr>
    5a3c:	ldr	w2, [x24, #116]
    5a40:	adrp	x1, 0 <bsPutUInt32>
    5a44:	add	x1, x1, #0x0
    5a48:	ldr	x0, [x0]
    5a4c:	sub	w2, w2, w23
    5a50:	bl	0 <fprintf>
    5a54:	b	505c <BZ2_compressBlock+0x4e8c>
    5a58:	adrp	x0, 0 <stderr>
    5a5c:	sub	w2, w23, w4
    5a60:	adrp	x1, 0 <bsPutUInt32>
    5a64:	add	x1, x1, #0x0
    5a68:	ldr	x0, [x0]
    5a6c:	bl	0 <fprintf>
    5a70:	ldr	w23, [x24, #116]
    5a74:	b	38c4 <BZ2_compressBlock+0x36f4>
    5a78:	adrp	x0, 0 <stderr>
    5a7c:	sub	w2, w4, w1
    5a80:	adrp	x1, 0 <bsPutUInt32>
    5a84:	add	x1, x1, #0x0
    5a88:	ldr	x0, [x0]
    5a8c:	bl	0 <fprintf>
    5a90:	ldr	w4, [x24, #116]
    5a94:	ldr	w0, [x24, #644]
    5a98:	b	36c8 <BZ2_compressBlock+0x34f8>
    5a9c:	adrp	x0, 0 <stderr>
    5aa0:	sub	w2, w1, w6
    5aa4:	adrp	x1, 0 <bsPutUInt32>
    5aa8:	add	x1, x1, #0x0
    5aac:	ldr	x0, [x0]
    5ab0:	bl	0 <fprintf>
    5ab4:	ldr	w1, [x24, #116]
    5ab8:	b	3504 <BZ2_compressBlock+0x3334>
    5abc:	adrp	x0, 0 <stderr>
    5ac0:	mov	w4, w20
    5ac4:	mov	w3, w28
    5ac8:	adrp	x1, 0 <bsPutUInt32>
    5acc:	ldr	x0, [x0]
    5ad0:	add	x1, x1, #0x0
    5ad4:	bl	0 <fprintf>
    5ad8:	ldr	w20, [x24, #124]
    5adc:	ldr	w28, [x24, #668]
    5ae0:	add	w0, w20, #0x1
    5ae4:	str	w0, [sp, #556]
    5ae8:	add	w22, w20, #0x2
    5aec:	cmp	w22, #0x0
    5af0:	b.gt	9d8 <BZ2_compressBlock+0x808>
    5af4:	mov	x2, #0x934c                	// #37708
    5af8:	add	x0, x24, x2
    5afc:	mov	x3, #0x9958                	// #39256
    5b00:	str	x0, [sp, #584]
    5b04:	add	x0, x24, x3
    5b08:	str	x0, [sp, #672]
    5b0c:	b	a1c <BZ2_compressBlock+0x84c>
    5b10:	ldr	x0, [sp, #120]
    5b14:	add	w28, w22, #0x1
    5b18:	add	x4, x0, w22, sxtw #1
    5b1c:	b	9b0 <BZ2_compressBlock+0x7e0>
    5b20:	mov	w0, #0xbb9                 	// #3001
    5b24:	bl	0 <BZ2_bz__AssertH__fail>
    5b28:	ldr	w28, [x24, #668]
    5b2c:	b	a24 <BZ2_compressBlock+0x854>
    5b30:	add	x0, sp, #0x2d0
    5b34:	str	x0, [sp, #152]
    5b38:	b	878 <BZ2_compressBlock+0x6a8>
    5b3c:	mov	w0, #0x4                   	// #4
    5b40:	str	w0, [sp, #608]
    5b44:	str	w0, [sp, #668]
    5b48:	b	d94 <BZ2_compressBlock+0xbc4>
    5b4c:	mov	w0, #0x6                   	// #6
    5b50:	str	w0, [sp, #608]
    5b54:	str	w0, [sp, #668]
    5b58:	b	d94 <BZ2_compressBlock+0xbc4>
    5b5c:	add	w4, w3, #0x8
    5b60:	b	5978 <BZ2_compressBlock+0x57a8>
    5b64:	add	w2, w4, #0x8
    5b68:	b	59e0 <BZ2_compressBlock+0x5810>
    5b6c:	mov	w28, #0x1                   	// #1
    5b70:	ldr	x4, [sp, #120]
    5b74:	b	9b0 <BZ2_compressBlock+0x7e0>
    5b78:	add	w2, w0, #0x8
    5b7c:	b	2e8 <BZ2_compressBlock+0x118>
    5b80:	add	w3, w2, #0x8
    5b84:	b	348 <BZ2_compressBlock+0x178>
    5b88:	add	w2, w3, #0x8
    5b8c:	b	3a8 <BZ2_compressBlock+0x1d8>
    5b90:	add	w3, w2, #0x8
    5b94:	b	408 <BZ2_compressBlock+0x238>
    5b98:	add	w2, w3, #0x8
    5b9c:	b	468 <BZ2_compressBlock+0x298>
    5ba0:	add	w3, w2, #0x8
    5ba4:	b	4c8 <BZ2_compressBlock+0x2f8>
    5ba8:	ldr	w0, [x24, #640]
    5bac:	b	540 <BZ2_compressBlock+0x370>
    5bb0:	mov	w0, #0x0                   	// #0
    5bb4:	b	78c <BZ2_compressBlock+0x5bc>
    5bb8:	add	w2, w0, #0x8
    5bbc:	b	b18 <BZ2_compressBlock+0x948>
    5bc0:	add	w3, w2, #0x8
    5bc4:	b	b78 <BZ2_compressBlock+0x9a8>
    5bc8:	add	w2, w3, #0x8
    5bcc:	b	bd8 <BZ2_compressBlock+0xa08>
    5bd0:	add	w3, w2, #0x8
    5bd4:	b	c38 <BZ2_compressBlock+0xa68>
    5bd8:	add	w2, w3, #0x8
    5bdc:	b	c98 <BZ2_compressBlock+0xac8>
    5be0:	add	w3, w2, #0x8
    5be4:	b	cf8 <BZ2_compressBlock+0xb28>
    5be8:	mov	w1, #0x0                   	// #0
    5bec:	b	53f4 <BZ2_compressBlock+0x5224>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	stp	x29, x30, [sp, #-256]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x0
      10:	ldr	w0, [x0, #8]
      14:	stp	x21, x22, [sp, #32]
      18:	cmp	w0, #0xa
      1c:	stp	x23, x24, [sp, #48]
      20:	stp	x25, x26, [sp, #64]
      24:	stp	x27, x28, [sp, #80]
      28:	ldr	x14, [x19]
      2c:	b.eq	1c8 <BZ2_decompress+0x1c8>  // b.none
      30:	add	x20, x19, #0xc, lsl #12
      34:	add	x21, x19, #0x8, lsl #12
      38:	sub	w0, w0, #0xb
      3c:	cmp	w0, #0x27
      40:	ldr	w1, [x20, #14936]
      44:	str	w1, [sp, #116]
      48:	ldr	w1, [x20, #14944]
      4c:	str	w1, [sp, #124]
      50:	ldr	w1, [x20, #14960]
      54:	str	w1, [sp, #120]
      58:	ldr	w1, [x20, #14964]
      5c:	str	w1, [sp, #112]
      60:	ldr	x1, [x21, #31368]
      64:	str	x1, [sp, #104]
      68:	ldr	w3, [x20, #14884]
      6c:	ldr	w25, [x20, #14888]
      70:	ldr	w13, [x20, #14892]
      74:	ldr	w27, [x20, #14896]
      78:	ldr	w26, [x20, #14900]
      7c:	ldr	w28, [x20, #14904]
      80:	ldr	w18, [x20, #14908]
      84:	ldr	w6, [x20, #14912]
      88:	ldr	w5, [x20, #14916]
      8c:	ldr	w11, [x20, #14920]
      90:	ldr	w12, [x20, #14924]
      94:	ldr	w4, [x20, #14928]
      98:	ldr	w10, [x20, #14932]
      9c:	ldr	w7, [x20, #14940]
      a0:	ldr	w22, [x20, #14948]
      a4:	ldr	w23, [x20, #14952]
      a8:	ldr	w24, [x20, #14956]
      ac:	ldr	x9, [x21, #31352]
      b0:	ldr	x8, [x21, #31360]
      b4:	b.ls	1b0 <BZ2_decompress+0x1b0>  // b.plast
      b8:	mov	w0, #0xfa1                 	// #4001
      bc:	str	w3, [sp, #128]
      c0:	str	w13, [sp, #136]
      c4:	str	w18, [sp, #144]
      c8:	stp	w6, w5, [sp, #152]
      cc:	str	w12, [sp, #160]
      d0:	str	w4, [sp, #168]
      d4:	str	w10, [sp, #176]
      d8:	str	w7, [sp, #184]
      dc:	stp	x9, x8, [sp, #192]
      e0:	str	w11, [sp, #232]
      e4:	bl	0 <BZ2_bz__AssertH__fail>
      e8:	mov	w0, #0xfa2                 	// #4002
      ec:	bl	0 <BZ2_bz__AssertH__fail>
      f0:	mov	w0, #0x0                   	// #0
      f4:	ldp	x9, x8, [sp, #192]
      f8:	ldr	w3, [sp, #128]
      fc:	ldr	w13, [sp, #136]
     100:	ldr	w18, [sp, #144]
     104:	ldp	w6, w5, [sp, #152]
     108:	ldr	w12, [sp, #160]
     10c:	ldr	w4, [sp, #168]
     110:	ldr	w10, [sp, #176]
     114:	ldr	w7, [sp, #184]
     118:	ldr	w11, [sp, #232]
     11c:	nop
     120:	ldr	w1, [sp, #116]
     124:	str	w1, [x20, #14936]
     128:	ldr	w1, [sp, #124]
     12c:	str	w1, [x20, #14944]
     130:	ldr	w1, [sp, #120]
     134:	str	w1, [x20, #14960]
     138:	ldr	w1, [sp, #112]
     13c:	str	w3, [x20, #14884]
     140:	str	w25, [x20, #14888]
     144:	str	w13, [x20, #14892]
     148:	str	w27, [x20, #14896]
     14c:	str	w26, [x20, #14900]
     150:	str	w28, [x20, #14904]
     154:	str	w18, [x20, #14908]
     158:	str	w6, [x20, #14912]
     15c:	str	w5, [x20, #14916]
     160:	str	w11, [x20, #14920]
     164:	str	w12, [x20, #14924]
     168:	str	w4, [x20, #14928]
     16c:	str	w10, [x20, #14932]
     170:	str	w7, [x20, #14940]
     174:	str	w22, [x20, #14948]
     178:	str	w23, [x20, #14952]
     17c:	str	w24, [x20, #14956]
     180:	str	w1, [x20, #14964]
     184:	ldr	x1, [sp, #104]
     188:	str	x9, [x21, #31352]
     18c:	str	x8, [x21, #31360]
     190:	str	x1, [x21, #31368]
     194:	ldp	x19, x20, [sp, #16]
     198:	ldp	x21, x22, [sp, #32]
     19c:	ldp	x23, x24, [sp, #48]
     1a0:	ldp	x25, x26, [sp, #64]
     1a4:	ldp	x27, x28, [sp, #80]
     1a8:	ldp	x29, x30, [sp], #256
     1ac:	ret
     1b0:	adrp	x1, 0 <BZ2_decompress>
     1b4:	add	x1, x1, #0x0
     1b8:	ldrh	w0, [x1, w0, uxtw #1]
     1bc:	adr	x1, 1c8 <BZ2_decompress+0x1c8>
     1c0:	add	x0, x1, w0, sxth #2
     1c4:	br	x0
     1c8:	movi	v0.4s, #0x0
     1cc:	mov	x2, #0xfa00                	// #64000
     1d0:	add	x1, x19, x2
     1d4:	add	x20, x19, #0xc, lsl #12
     1d8:	add	x21, x19, #0x8, lsl #12
     1dc:	stur	q0, [x1, #36]
     1e0:	stur	q0, [x1, #52]
     1e4:	stur	q0, [x1, #68]
     1e8:	stur	q0, [x1, #84]
     1ec:	stur	q0, [x1, #100]
     1f0:	ldr	w2, [x19, #36]
     1f4:	str	wzr, [x20, #14964]
     1f8:	stp	xzr, xzr, [x1, #120]
     1fc:	str	xzr, [x21, #31368]
     200:	str	w0, [x19, #8]
     204:	b	240 <BZ2_decompress+0x240>
     208:	ldr	w0, [x14, #8]
     20c:	cbz	w0, 295c <BZ2_decompress+0x295c>
     210:	ldr	x3, [x14]
     214:	add	w2, w2, #0x8
     218:	ldr	w4, [x19, #32]
     21c:	sub	w0, w0, #0x1
     220:	ldr	w1, [x14, #12]
     224:	ldrb	w5, [x3], #1
     228:	add	w1, w1, #0x1
     22c:	orr	w4, w5, w4, lsl #8
     230:	stp	w4, w2, [x19, #32]
     234:	str	x3, [x14]
     238:	stp	w0, w1, [x14, #8]
     23c:	cbz	w1, 29ec <BZ2_decompress+0x29ec>
     240:	cmp	w2, #0x7
     244:	b.le	208 <BZ2_decompress+0x208>
     248:	ldr	w1, [x19, #32]
     24c:	sub	w0, w2, #0x8
     250:	str	w0, [x19, #36]
     254:	lsr	w1, w1, w0
     258:	and	w1, w1, #0xff
     25c:	cmp	w1, #0x42
     260:	b.ne	29fc <BZ2_decompress+0x29fc>  // b.any
     264:	mov	x8, #0x0                   	// #0
     268:	mov	x9, #0x0                   	// #0
     26c:	mov	w24, #0x0                   	// #0
     270:	mov	w23, #0x0                   	// #0
     274:	mov	w22, #0x0                   	// #0
     278:	mov	w7, #0x0                   	// #0
     27c:	mov	w10, #0x0                   	// #0
     280:	mov	w4, #0x0                   	// #0
     284:	mov	w12, #0x0                   	// #0
     288:	mov	w11, #0x0                   	// #0
     28c:	mov	w5, #0x0                   	// #0
     290:	mov	w6, #0x0                   	// #0
     294:	mov	w18, #0x0                   	// #0
     298:	mov	w28, #0x0                   	// #0
     29c:	mov	w26, #0x0                   	// #0
     2a0:	mov	w27, #0x0                   	// #0
     2a4:	mov	w13, #0x0                   	// #0
     2a8:	mov	w25, #0x0                   	// #0
     2ac:	mov	w3, #0x0                   	// #0
     2b0:	str	xzr, [sp, #104]
     2b4:	stp	wzr, wzr, [sp, #112]
     2b8:	stp	wzr, wzr, [sp, #120]
     2bc:	b	24e4 <BZ2_decompress+0x24e4>
     2c0:	lsl	w1, w1, #2
     2c4:	mov	w2, #0x1                   	// #1
     2c8:	str	w3, [sp, #128]
     2cc:	str	w13, [sp, #136]
     2d0:	str	w18, [sp, #144]
     2d4:	stp	w6, w5, [sp, #152]
     2d8:	str	w12, [sp, #160]
     2dc:	str	w4, [sp, #168]
     2e0:	str	w10, [sp, #176]
     2e4:	str	w7, [sp, #184]
     2e8:	stp	x9, x8, [sp, #192]
     2ec:	str	w11, [sp, #232]
     2f0:	blr	x15
     2f4:	str	x0, [x19, #3152]
     2f8:	ldr	w3, [sp, #128]
     2fc:	ldr	w13, [sp, #136]
     300:	ldr	w18, [sp, #144]
     304:	ldp	w6, w5, [sp, #152]
     308:	ldr	w12, [sp, #160]
     30c:	ldr	w4, [sp, #168]
     310:	ldr	w10, [sp, #176]
     314:	ldr	w7, [sp, #184]
     318:	ldr	w11, [sp, #232]
     31c:	ldp	x9, x8, [sp, #192]
     320:	cbz	x0, 2454 <BZ2_decompress+0x2454>
     324:	mov	w1, #0xe                   	// #14
     328:	ldr	w0, [x19, #36]
     32c:	str	w1, [x19, #8]
     330:	b	370 <BZ2_decompress+0x370>
     334:	ldr	x1, [x19]
     338:	ldr	w2, [x1, #8]
     33c:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     340:	ldr	x16, [x1]
     344:	sub	w15, w2, #0x1
     348:	ldr	w14, [x19, #32]
     34c:	add	w0, w0, #0x8
     350:	ldr	w2, [x1, #12]
     354:	ldrb	w17, [x16], #1
     358:	add	w2, w2, #0x1
     35c:	orr	w14, w17, w14, lsl #8
     360:	stp	w14, w0, [x19, #32]
     364:	str	x16, [x1]
     368:	stp	w15, w2, [x1, #8]
     36c:	cbz	w2, 286c <BZ2_decompress+0x286c>
     370:	cmp	w0, #0x7
     374:	b.le	334 <BZ2_decompress+0x334>
     378:	ldr	w1, [x19, #32]
     37c:	sub	w0, w0, #0x8
     380:	str	w0, [x19, #36]
     384:	lsr	w1, w1, w0
     388:	and	w1, w1, #0xff
     38c:	cmp	w1, #0x17
     390:	b.eq	207c <BZ2_decompress+0x207c>  // b.none
     394:	cmp	w1, #0x31
     398:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     39c:	mov	w1, #0xf                   	// #15
     3a0:	str	w1, [x19, #8]
     3a4:	b	3e4 <BZ2_decompress+0x3e4>
     3a8:	ldr	x1, [x19]
     3ac:	ldr	w2, [x1, #8]
     3b0:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     3b4:	ldr	x16, [x1]
     3b8:	sub	w15, w2, #0x1
     3bc:	ldr	w14, [x19, #32]
     3c0:	add	w0, w0, #0x8
     3c4:	ldr	w2, [x1, #12]
     3c8:	ldrb	w17, [x16], #1
     3cc:	add	w2, w2, #0x1
     3d0:	orr	w14, w17, w14, lsl #8
     3d4:	stp	w14, w0, [x19, #32]
     3d8:	str	x16, [x1]
     3dc:	stp	w15, w2, [x1, #8]
     3e0:	cbz	w2, 28cc <BZ2_decompress+0x28cc>
     3e4:	cmp	w0, #0x7
     3e8:	b.le	3a8 <BZ2_decompress+0x3a8>
     3ec:	ldr	w1, [x19, #32]
     3f0:	sub	w0, w0, #0x8
     3f4:	str	w0, [x19, #36]
     3f8:	lsr	w1, w1, w0
     3fc:	and	w1, w1, #0xff
     400:	cmp	w1, #0x41
     404:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     408:	mov	w1, #0x10                  	// #16
     40c:	str	w1, [x19, #8]
     410:	b	450 <BZ2_decompress+0x450>
     414:	ldr	x1, [x19]
     418:	ldr	w2, [x1, #8]
     41c:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     420:	ldr	x16, [x1]
     424:	sub	w15, w2, #0x1
     428:	ldr	w14, [x19, #32]
     42c:	add	w0, w0, #0x8
     430:	ldr	w2, [x1, #12]
     434:	ldrb	w17, [x16], #1
     438:	add	w2, w2, #0x1
     43c:	orr	w14, w17, w14, lsl #8
     440:	stp	w14, w0, [x19, #32]
     444:	str	x16, [x1]
     448:	stp	w15, w2, [x1, #8]
     44c:	cbz	w2, 288c <BZ2_decompress+0x288c>
     450:	cmp	w0, #0x7
     454:	b.le	414 <BZ2_decompress+0x414>
     458:	ldr	w1, [x19, #32]
     45c:	sub	w0, w0, #0x8
     460:	str	w0, [x19, #36]
     464:	lsr	w1, w1, w0
     468:	and	w1, w1, #0xff
     46c:	cmp	w1, #0x59
     470:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     474:	mov	w1, #0x11                  	// #17
     478:	str	w1, [x19, #8]
     47c:	b	4bc <BZ2_decompress+0x4bc>
     480:	ldr	x1, [x19]
     484:	ldr	w2, [x1, #8]
     488:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     48c:	ldr	x16, [x1]
     490:	sub	w15, w2, #0x1
     494:	ldr	w14, [x19, #32]
     498:	add	w0, w0, #0x8
     49c:	ldr	w2, [x1, #12]
     4a0:	ldrb	w17, [x16], #1
     4a4:	add	w2, w2, #0x1
     4a8:	orr	w14, w17, w14, lsl #8
     4ac:	stp	w14, w0, [x19, #32]
     4b0:	str	x16, [x1]
     4b4:	stp	w15, w2, [x1, #8]
     4b8:	cbz	w2, 285c <BZ2_decompress+0x285c>
     4bc:	cmp	w0, #0x7
     4c0:	b.le	480 <BZ2_decompress+0x480>
     4c4:	ldr	w1, [x19, #32]
     4c8:	sub	w0, w0, #0x8
     4cc:	str	w0, [x19, #36]
     4d0:	lsr	w1, w1, w0
     4d4:	and	w1, w1, #0xff
     4d8:	cmp	w1, #0x26
     4dc:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     4e0:	mov	w1, #0x12                  	// #18
     4e4:	str	w1, [x19, #8]
     4e8:	b	528 <BZ2_decompress+0x528>
     4ec:	ldr	x1, [x19]
     4f0:	ldr	w2, [x1, #8]
     4f4:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     4f8:	ldr	x16, [x1]
     4fc:	sub	w15, w2, #0x1
     500:	ldr	w14, [x19, #32]
     504:	add	w0, w0, #0x8
     508:	ldr	w2, [x1, #12]
     50c:	ldrb	w17, [x16], #1
     510:	add	w2, w2, #0x1
     514:	orr	w14, w17, w14, lsl #8
     518:	stp	w14, w0, [x19, #32]
     51c:	str	x16, [x1]
     520:	stp	w15, w2, [x1, #8]
     524:	cbz	w2, 27dc <BZ2_decompress+0x27dc>
     528:	cmp	w0, #0x7
     52c:	b.le	4ec <BZ2_decompress+0x4ec>
     530:	ldr	w1, [x19, #32]
     534:	sub	w0, w0, #0x8
     538:	str	w0, [x19, #36]
     53c:	lsr	w1, w1, w0
     540:	and	w1, w1, #0xff
     544:	cmp	w1, #0x53
     548:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     54c:	mov	w1, #0x13                  	// #19
     550:	str	w1, [x19, #8]
     554:	b	594 <BZ2_decompress+0x594>
     558:	ldr	x1, [x19]
     55c:	ldr	w2, [x1, #8]
     560:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     564:	ldr	x16, [x1]
     568:	sub	w15, w2, #0x1
     56c:	ldr	w14, [x19, #32]
     570:	add	w0, w0, #0x8
     574:	ldr	w2, [x1, #12]
     578:	ldrb	w17, [x16], #1
     57c:	add	w2, w2, #0x1
     580:	orr	w14, w17, w14, lsl #8
     584:	stp	w14, w0, [x19, #32]
     588:	str	x16, [x1]
     58c:	stp	w15, w2, [x1, #8]
     590:	cbz	w2, 27ec <BZ2_decompress+0x27ec>
     594:	cmp	w0, #0x7
     598:	b.le	558 <BZ2_decompress+0x558>
     59c:	ldr	w1, [x19, #32]
     5a0:	sub	w0, w0, #0x8
     5a4:	str	w0, [x19, #36]
     5a8:	lsr	w1, w1, w0
     5ac:	and	w1, w1, #0xff
     5b0:	cmp	w1, #0x59
     5b4:	b.ne	1d98 <BZ2_decompress+0x1d98>  // b.any
     5b8:	ldp	w2, w1, [x19, #48]
     5bc:	add	w2, w2, #0x1
     5c0:	str	w2, [x19, #48]
     5c4:	cmp	w1, #0x1
     5c8:	b.gt	2694 <BZ2_decompress+0x2694>
     5cc:	str	wzr, [x19, #3176]
     5d0:	b	2470 <BZ2_decompress+0x2470>
     5d4:	ldr	w0, [x19, #36]
     5d8:	mov	w1, #0x23                  	// #35
     5dc:	str	w1, [x19, #8]
     5e0:	b	620 <BZ2_decompress+0x620>
     5e4:	ldr	x1, [x19]
     5e8:	ldr	w2, [x1, #8]
     5ec:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     5f0:	ldr	x16, [x1]
     5f4:	sub	w15, w2, #0x1
     5f8:	ldr	w14, [x19, #32]
     5fc:	add	w0, w0, #0x8
     600:	ldr	w2, [x1, #12]
     604:	ldrb	w17, [x16], #1
     608:	add	w2, w2, #0x1
     60c:	orr	w14, w17, w14, lsl #8
     610:	stp	w14, w0, [x19, #32]
     614:	str	x16, [x1]
     618:	stp	w15, w2, [x1, #8]
     61c:	cbz	w2, 28ac <BZ2_decompress+0x28ac>
     620:	cmp	w0, #0x0
     624:	b.le	5e4 <BZ2_decompress+0x5e4>
     628:	ldr	w1, [x19, #32]
     62c:	sub	w0, w0, #0x1
     630:	str	w0, [x19, #36]
     634:	sub	w2, w7, #0x1
     638:	lsr	w0, w1, w0
     63c:	tst	x0, #0x1
     640:	csinc	w7, w2, w7, ne  // ne = any
     644:	sub	w0, w7, #0x1
     648:	cmp	w0, #0x13
     64c:	b.hi	1d98 <BZ2_decompress+0x1d98>  // b.pmore
     650:	mov	w1, #0x22                  	// #34
     654:	ldr	w0, [x19, #36]
     658:	str	w1, [x19, #8]
     65c:	b	69c <BZ2_decompress+0x69c>
     660:	ldr	x1, [x19]
     664:	ldr	w2, [x1, #8]
     668:	cbz	w2, 2704 <BZ2_decompress+0x2704>
     66c:	ldr	x16, [x1]
     670:	sub	w15, w2, #0x1
     674:	ldr	w14, [x19, #32]
     678:	add	w0, w0, #0x8
     67c:	ldr	w2, [x1, #12]
     680:	ldrb	w17, [x16], #1
     684:	add	w2, w2, #0x1
     688:	orr	w14, w17, w14, lsl #8
     68c:	stp	w14, w0, [x19, #32]
     690:	str	x16, [x1]
     694:	stp	w15, w2, [x1, #8]
     698:	cbz	w2, 28ec <BZ2_decompress+0x28ec>
     69c:	cmp	w0, #0x0
     6a0:	b.le	660 <BZ2_decompress+0x660>
     6a4:	ldr	w1, [x19, #32]
     6a8:	sub	w0, w0, #0x1
     6ac:	str	w0, [x19, #36]
     6b0:	lsr	w1, w1, w0
     6b4:	tbnz	w1, #0, 5d8 <BZ2_decompress+0x5d8>
     6b8:	sbfiz	x0, x13, #7, #32
     6bc:	add	x0, x0, w13, sxtw
     6c0:	add	x0, x19, x0, lsl #1
     6c4:	add	x0, x0, w3, sxtw
     6c8:	add	w3, w3, #0x1
     6cc:	add	x0, x0, #0xa, lsl #12
     6d0:	strb	w7, [x0, #2928]
     6d4:	cmp	w3, w27
     6d8:	b.lt	644 <BZ2_decompress+0x644>  // b.tstop
     6dc:	add	w13, w13, #0x1
     6e0:	cmp	w13, w26
     6e4:	b.lt	135c <BZ2_decompress+0x135c>  // b.tstop
     6e8:	cmp	w26, #0x0
     6ec:	b.le	2d70 <BZ2_decompress+0x2d70>
     6f0:	sub	w1, w27, #0x1
     6f4:	mov	x13, #0xab70                	// #43888
     6f8:	lsr	w14, w27, #4
     6fc:	add	x3, x19, x13
     700:	mov	x12, #0xb17c                	// #45436
     704:	mov	x15, #0xfa0c                	// #64012
     708:	add	x0, x19, x12
     70c:	add	x2, x19, x15
     710:	str	w1, [sp, #128]
     714:	and	w1, w27, #0xfffffff0
     718:	mov	x13, #0x0                   	// #0
     71c:	str	w25, [sp, #136]
     720:	mov	w25, w1
     724:	str	w28, [sp, #144]
     728:	mov	x28, x2
     72c:	str	w22, [sp, #160]
     730:	mov	x22, x3
     734:	str	w23, [sp, #168]
     738:	mov	x23, x0
     73c:	str	w24, [sp, #176]
     740:	mov	x24, x13
     744:	stp	x20, x21, [sp, #200]
     748:	mov	w21, w27
     74c:	mov	w27, w14
     750:	stp	w11, w10, [sp, #152]
     754:	stp	x9, x8, [sp, #184]
     758:	str	w7, [sp, #232]
     75c:	nop
     760:	cmp	w21, #0x0
     764:	mov	w2, w24
     768:	mov	w5, #0x0                   	// #0
     76c:	mov	w20, #0x20                  	// #32
     770:	b.le	e40 <BZ2_decompress+0xe40>
     774:	ldr	w0, [sp, #128]
     778:	cmp	w0, #0xe
     77c:	b.ls	2b3c <BZ2_decompress+0x2b3c>  // b.plast
     780:	ldr	q2, [x22]
     784:	cmp	w27, #0x1
     788:	uxtl	v0.8h, v2.8b
     78c:	uxtl2	v2.8h, v2.16b
     790:	uxtl	v4.4s, v0.4h
     794:	uxtl2	v0.4s, v0.8h
     798:	uxtl	v3.4s, v2.4h
     79c:	uxtl2	v2.4s, v2.8h
     7a0:	smax	v1.4s, v0.4s, v4.4s
     7a4:	smin	v0.4s, v0.4s, v4.4s
     7a8:	movi	v4.4s, #0x0
     7ac:	smax	v1.4s, v1.4s, v4.4s
     7b0:	movi	v4.4s, #0x20
     7b4:	smax	v1.4s, v1.4s, v3.4s
     7b8:	smin	v0.4s, v0.4s, v4.4s
     7bc:	smax	v1.4s, v1.4s, v2.4s
     7c0:	smin	v0.4s, v0.4s, v3.4s
     7c4:	smin	v0.4s, v0.4s, v2.4s
     7c8:	b.ls	bc0 <BZ2_decompress+0xbc0>  // b.plast
     7cc:	ldr	q3, [x22, #16]
     7d0:	cmp	w27, #0x2
     7d4:	uxtl	v2.8h, v3.8b
     7d8:	uxtl2	v3.8h, v3.16b
     7dc:	uxtl	v6.4s, v2.4h
     7e0:	uxtl2	v2.4s, v2.8h
     7e4:	uxtl	v5.4s, v3.4h
     7e8:	uxtl2	v3.4s, v3.8h
     7ec:	smax	v4.4s, v2.4s, v6.4s
     7f0:	smin	v2.4s, v2.4s, v6.4s
     7f4:	smax	v4.4s, v4.4s, v5.4s
     7f8:	smin	v2.4s, v2.4s, v5.4s
     7fc:	smax	v4.4s, v4.4s, v3.4s
     800:	smin	v2.4s, v2.4s, v3.4s
     804:	smax	v1.4s, v1.4s, v4.4s
     808:	smin	v0.4s, v0.4s, v2.4s
     80c:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     810:	ldr	q3, [x22, #32]
     814:	cmp	w27, #0x3
     818:	uxtl	v2.8h, v3.8b
     81c:	uxtl2	v3.8h, v3.16b
     820:	uxtl	v6.4s, v2.4h
     824:	uxtl2	v2.4s, v2.8h
     828:	uxtl	v5.4s, v3.4h
     82c:	uxtl2	v3.4s, v3.8h
     830:	smax	v4.4s, v2.4s, v6.4s
     834:	smin	v2.4s, v2.4s, v6.4s
     838:	smax	v4.4s, v4.4s, v5.4s
     83c:	smin	v2.4s, v2.4s, v5.4s
     840:	smax	v4.4s, v4.4s, v3.4s
     844:	smin	v2.4s, v2.4s, v3.4s
     848:	smax	v1.4s, v1.4s, v4.4s
     84c:	smin	v0.4s, v0.4s, v2.4s
     850:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     854:	ldr	q3, [x22, #48]
     858:	cmp	w27, #0x4
     85c:	uxtl	v2.8h, v3.8b
     860:	uxtl2	v3.8h, v3.16b
     864:	uxtl	v6.4s, v2.4h
     868:	uxtl2	v2.4s, v2.8h
     86c:	uxtl	v5.4s, v3.4h
     870:	uxtl2	v3.4s, v3.8h
     874:	smax	v4.4s, v2.4s, v6.4s
     878:	smin	v2.4s, v2.4s, v6.4s
     87c:	smax	v4.4s, v4.4s, v5.4s
     880:	smin	v2.4s, v2.4s, v5.4s
     884:	smax	v4.4s, v4.4s, v3.4s
     888:	smin	v2.4s, v2.4s, v3.4s
     88c:	smax	v1.4s, v1.4s, v4.4s
     890:	smin	v0.4s, v0.4s, v2.4s
     894:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     898:	ldr	q3, [x22, #64]
     89c:	cmp	w27, #0x5
     8a0:	uxtl	v2.8h, v3.8b
     8a4:	uxtl2	v3.8h, v3.16b
     8a8:	uxtl	v6.4s, v2.4h
     8ac:	uxtl2	v2.4s, v2.8h
     8b0:	uxtl	v5.4s, v3.4h
     8b4:	uxtl2	v3.4s, v3.8h
     8b8:	smax	v4.4s, v2.4s, v6.4s
     8bc:	smin	v2.4s, v2.4s, v6.4s
     8c0:	smax	v4.4s, v4.4s, v5.4s
     8c4:	smin	v2.4s, v2.4s, v5.4s
     8c8:	smax	v4.4s, v4.4s, v3.4s
     8cc:	smin	v2.4s, v2.4s, v3.4s
     8d0:	smax	v1.4s, v1.4s, v4.4s
     8d4:	smin	v0.4s, v0.4s, v2.4s
     8d8:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     8dc:	ldr	q3, [x22, #80]
     8e0:	cmp	w27, #0x6
     8e4:	uxtl	v2.8h, v3.8b
     8e8:	uxtl2	v3.8h, v3.16b
     8ec:	uxtl	v6.4s, v2.4h
     8f0:	uxtl2	v2.4s, v2.8h
     8f4:	uxtl	v5.4s, v3.4h
     8f8:	uxtl2	v3.4s, v3.8h
     8fc:	smax	v4.4s, v2.4s, v6.4s
     900:	smin	v2.4s, v2.4s, v6.4s
     904:	smax	v4.4s, v4.4s, v5.4s
     908:	smin	v2.4s, v2.4s, v5.4s
     90c:	smax	v4.4s, v4.4s, v3.4s
     910:	smin	v2.4s, v2.4s, v3.4s
     914:	smax	v1.4s, v1.4s, v4.4s
     918:	smin	v0.4s, v0.4s, v2.4s
     91c:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     920:	ldr	q3, [x22, #96]
     924:	cmp	w27, #0x7
     928:	uxtl	v2.8h, v3.8b
     92c:	uxtl2	v3.8h, v3.16b
     930:	uxtl	v6.4s, v2.4h
     934:	uxtl2	v2.4s, v2.8h
     938:	uxtl	v5.4s, v3.4h
     93c:	uxtl2	v3.4s, v3.8h
     940:	smax	v4.4s, v2.4s, v6.4s
     944:	smin	v2.4s, v2.4s, v6.4s
     948:	smax	v4.4s, v4.4s, v5.4s
     94c:	smin	v2.4s, v2.4s, v5.4s
     950:	smax	v4.4s, v4.4s, v3.4s
     954:	smin	v2.4s, v2.4s, v3.4s
     958:	smax	v1.4s, v1.4s, v4.4s
     95c:	smin	v0.4s, v0.4s, v2.4s
     960:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     964:	ldr	q3, [x22, #112]
     968:	cmp	w27, #0x8
     96c:	uxtl	v2.8h, v3.8b
     970:	uxtl2	v3.8h, v3.16b
     974:	uxtl	v6.4s, v2.4h
     978:	uxtl2	v2.4s, v2.8h
     97c:	uxtl	v5.4s, v3.4h
     980:	uxtl2	v3.4s, v3.8h
     984:	smax	v4.4s, v2.4s, v6.4s
     988:	smin	v2.4s, v2.4s, v6.4s
     98c:	smax	v4.4s, v4.4s, v5.4s
     990:	smin	v2.4s, v2.4s, v5.4s
     994:	smax	v4.4s, v4.4s, v3.4s
     998:	smin	v2.4s, v2.4s, v3.4s
     99c:	smax	v1.4s, v1.4s, v4.4s
     9a0:	smin	v0.4s, v0.4s, v2.4s
     9a4:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     9a8:	ldr	q3, [x22, #128]
     9ac:	cmp	w27, #0x9
     9b0:	uxtl	v2.8h, v3.8b
     9b4:	uxtl2	v3.8h, v3.16b
     9b8:	uxtl	v6.4s, v2.4h
     9bc:	uxtl2	v2.4s, v2.8h
     9c0:	uxtl	v5.4s, v3.4h
     9c4:	uxtl2	v3.4s, v3.8h
     9c8:	smax	v4.4s, v2.4s, v6.4s
     9cc:	smin	v2.4s, v2.4s, v6.4s
     9d0:	smax	v4.4s, v4.4s, v5.4s
     9d4:	smin	v2.4s, v2.4s, v5.4s
     9d8:	smax	v4.4s, v4.4s, v3.4s
     9dc:	smin	v2.4s, v2.4s, v3.4s
     9e0:	smax	v1.4s, v1.4s, v4.4s
     9e4:	smin	v0.4s, v0.4s, v2.4s
     9e8:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     9ec:	ldr	q3, [x22, #144]
     9f0:	cmp	w27, #0xa
     9f4:	uxtl	v2.8h, v3.8b
     9f8:	uxtl2	v3.8h, v3.16b
     9fc:	uxtl	v6.4s, v2.4h
     a00:	uxtl2	v2.4s, v2.8h
     a04:	uxtl	v5.4s, v3.4h
     a08:	uxtl2	v3.4s, v3.8h
     a0c:	smax	v4.4s, v2.4s, v6.4s
     a10:	smin	v2.4s, v2.4s, v6.4s
     a14:	smax	v4.4s, v4.4s, v5.4s
     a18:	smin	v2.4s, v2.4s, v5.4s
     a1c:	smax	v4.4s, v4.4s, v3.4s
     a20:	smin	v2.4s, v2.4s, v3.4s
     a24:	smax	v1.4s, v1.4s, v4.4s
     a28:	smin	v0.4s, v0.4s, v2.4s
     a2c:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     a30:	ldr	q3, [x22, #160]
     a34:	cmp	w27, #0xb
     a38:	uxtl	v2.8h, v3.8b
     a3c:	uxtl2	v3.8h, v3.16b
     a40:	uxtl	v6.4s, v2.4h
     a44:	uxtl2	v2.4s, v2.8h
     a48:	uxtl	v5.4s, v3.4h
     a4c:	uxtl2	v3.4s, v3.8h
     a50:	smax	v4.4s, v2.4s, v6.4s
     a54:	smin	v2.4s, v2.4s, v6.4s
     a58:	smax	v4.4s, v4.4s, v5.4s
     a5c:	smin	v2.4s, v2.4s, v5.4s
     a60:	smax	v4.4s, v4.4s, v3.4s
     a64:	smin	v2.4s, v2.4s, v3.4s
     a68:	smax	v1.4s, v1.4s, v4.4s
     a6c:	smin	v0.4s, v0.4s, v2.4s
     a70:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     a74:	ldr	q3, [x22, #176]
     a78:	cmp	w27, #0xc
     a7c:	uxtl	v2.8h, v3.8b
     a80:	uxtl2	v3.8h, v3.16b
     a84:	uxtl	v6.4s, v2.4h
     a88:	uxtl2	v2.4s, v2.8h
     a8c:	uxtl	v5.4s, v3.4h
     a90:	uxtl2	v3.4s, v3.8h
     a94:	smax	v4.4s, v2.4s, v6.4s
     a98:	smin	v2.4s, v2.4s, v6.4s
     a9c:	smax	v4.4s, v4.4s, v5.4s
     aa0:	smin	v2.4s, v2.4s, v5.4s
     aa4:	smax	v4.4s, v4.4s, v3.4s
     aa8:	smin	v2.4s, v2.4s, v3.4s
     aac:	smax	v1.4s, v1.4s, v4.4s
     ab0:	smin	v0.4s, v0.4s, v2.4s
     ab4:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     ab8:	ldr	q3, [x22, #192]
     abc:	cmp	w27, #0xd
     ac0:	uxtl	v2.8h, v3.8b
     ac4:	uxtl2	v3.8h, v3.16b
     ac8:	uxtl	v6.4s, v2.4h
     acc:	uxtl2	v2.4s, v2.8h
     ad0:	uxtl	v5.4s, v3.4h
     ad4:	uxtl2	v3.4s, v3.8h
     ad8:	smax	v4.4s, v2.4s, v6.4s
     adc:	smin	v2.4s, v2.4s, v6.4s
     ae0:	smax	v4.4s, v4.4s, v5.4s
     ae4:	smin	v2.4s, v2.4s, v5.4s
     ae8:	smax	v4.4s, v4.4s, v3.4s
     aec:	smin	v2.4s, v2.4s, v3.4s
     af0:	smax	v1.4s, v1.4s, v4.4s
     af4:	smin	v0.4s, v0.4s, v2.4s
     af8:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     afc:	ldr	q3, [x22, #208]
     b00:	cmp	w27, #0xe
     b04:	uxtl	v2.8h, v3.8b
     b08:	uxtl2	v3.8h, v3.16b
     b0c:	uxtl	v6.4s, v2.4h
     b10:	uxtl2	v2.4s, v2.8h
     b14:	uxtl	v5.4s, v3.4h
     b18:	uxtl2	v3.4s, v3.8h
     b1c:	smax	v4.4s, v2.4s, v6.4s
     b20:	smin	v2.4s, v2.4s, v6.4s
     b24:	smax	v4.4s, v4.4s, v5.4s
     b28:	smin	v2.4s, v2.4s, v5.4s
     b2c:	smax	v4.4s, v4.4s, v3.4s
     b30:	smin	v2.4s, v2.4s, v3.4s
     b34:	smax	v1.4s, v1.4s, v4.4s
     b38:	smin	v0.4s, v0.4s, v2.4s
     b3c:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     b40:	ldr	q3, [x22, #224]
     b44:	cmp	w27, #0xf
     b48:	uxtl	v2.8h, v3.8b
     b4c:	uxtl2	v3.8h, v3.16b
     b50:	uxtl	v6.4s, v2.4h
     b54:	uxtl2	v2.4s, v2.8h
     b58:	uxtl	v5.4s, v3.4h
     b5c:	uxtl2	v3.4s, v3.8h
     b60:	smax	v4.4s, v2.4s, v6.4s
     b64:	smin	v2.4s, v2.4s, v6.4s
     b68:	smax	v4.4s, v4.4s, v5.4s
     b6c:	smin	v2.4s, v2.4s, v5.4s
     b70:	smax	v4.4s, v4.4s, v3.4s
     b74:	smin	v2.4s, v2.4s, v3.4s
     b78:	smax	v1.4s, v1.4s, v4.4s
     b7c:	smin	v0.4s, v0.4s, v2.4s
     b80:	b.eq	bc0 <BZ2_decompress+0xbc0>  // b.none
     b84:	ldr	q3, [x22, #240]
     b88:	uxtl	v2.8h, v3.8b
     b8c:	uxtl2	v3.8h, v3.16b
     b90:	uxtl	v6.4s, v2.4h
     b94:	uxtl2	v2.4s, v2.8h
     b98:	uxtl	v5.4s, v3.4h
     b9c:	uxtl2	v3.4s, v3.8h
     ba0:	smax	v4.4s, v2.4s, v6.4s
     ba4:	smin	v2.4s, v2.4s, v6.4s
     ba8:	smax	v4.4s, v4.4s, v5.4s
     bac:	smin	v2.4s, v2.4s, v5.4s
     bb0:	smax	v4.4s, v4.4s, v3.4s
     bb4:	smin	v2.4s, v2.4s, v3.4s
     bb8:	smax	v1.4s, v1.4s, v4.4s
     bbc:	smin	v0.4s, v0.4s, v2.4s
     bc0:	sminv	s0, v0.4s
     bc4:	cmp	w21, w25
     bc8:	smaxv	s1, v1.4s
     bcc:	mov	w20, v0.s[0]
     bd0:	mov	w5, v1.s[0]
     bd4:	b.eq	e40 <BZ2_decompress+0xe40>  // b.none
     bd8:	mov	w7, w25
     bdc:	sxtw	x9, w2
     be0:	sbfiz	x1, x2, #7, #32
     be4:	add	x1, x1, x9
     be8:	add	w2, w7, #0x1
     bec:	add	x1, x19, x1, lsl #1
     bf0:	add	x8, x1, w7, sxtw
     bf4:	add	x8, x8, #0xa, lsl #12
     bf8:	ldrb	w8, [x8, #2928]
     bfc:	cmp	w5, w8
     c00:	csel	w5, w5, w8, ge  // ge = tcont
     c04:	cmp	w20, w8
     c08:	csel	w20, w20, w8, le
     c0c:	cmp	w21, w2
     c10:	b.le	e40 <BZ2_decompress+0xe40>
     c14:	add	x2, x1, w2, sxtw
     c18:	add	w8, w7, #0x2
     c1c:	add	x2, x2, #0xa, lsl #12
     c20:	ldrb	w2, [x2, #2928]
     c24:	cmp	w5, w2
     c28:	csel	w5, w5, w2, ge  // ge = tcont
     c2c:	cmp	w20, w2
     c30:	csel	w20, w20, w2, le
     c34:	cmp	w21, w8
     c38:	b.le	e40 <BZ2_decompress+0xe40>
     c3c:	add	x2, x1, w8, sxtw
     c40:	add	w8, w7, #0x3
     c44:	add	x2, x2, #0xa, lsl #12
     c48:	ldrb	w2, [x2, #2928]
     c4c:	cmp	w5, w2
     c50:	csel	w5, w5, w2, ge  // ge = tcont
     c54:	cmp	w20, w2
     c58:	csel	w20, w20, w2, le
     c5c:	cmp	w21, w8
     c60:	b.le	e40 <BZ2_decompress+0xe40>
     c64:	add	x2, x1, w8, sxtw
     c68:	add	w8, w7, #0x4
     c6c:	add	x2, x2, #0xa, lsl #12
     c70:	ldrb	w2, [x2, #2928]
     c74:	cmp	w5, w2
     c78:	csel	w5, w5, w2, ge  // ge = tcont
     c7c:	cmp	w20, w2
     c80:	csel	w20, w20, w2, le
     c84:	cmp	w21, w8
     c88:	b.le	e40 <BZ2_decompress+0xe40>
     c8c:	add	x2, x1, w8, sxtw
     c90:	add	w8, w7, #0x5
     c94:	add	x2, x2, #0xa, lsl #12
     c98:	ldrb	w2, [x2, #2928]
     c9c:	cmp	w5, w2
     ca0:	csel	w5, w5, w2, ge  // ge = tcont
     ca4:	cmp	w20, w2
     ca8:	csel	w20, w20, w2, le
     cac:	cmp	w21, w8
     cb0:	b.le	e40 <BZ2_decompress+0xe40>
     cb4:	add	x2, x1, w8, sxtw
     cb8:	add	w8, w7, #0x6
     cbc:	add	x2, x2, #0xa, lsl #12
     cc0:	ldrb	w2, [x2, #2928]
     cc4:	cmp	w5, w2
     cc8:	csel	w5, w5, w2, ge  // ge = tcont
     ccc:	cmp	w20, w2
     cd0:	csel	w20, w20, w2, le
     cd4:	cmp	w21, w8
     cd8:	b.le	e40 <BZ2_decompress+0xe40>
     cdc:	add	x2, x1, w8, sxtw
     ce0:	add	w8, w7, #0x7
     ce4:	add	x2, x2, #0xa, lsl #12
     ce8:	ldrb	w2, [x2, #2928]
     cec:	cmp	w5, w2
     cf0:	csel	w5, w5, w2, ge  // ge = tcont
     cf4:	cmp	w20, w2
     cf8:	csel	w20, w20, w2, le
     cfc:	cmp	w21, w8
     d00:	b.le	e40 <BZ2_decompress+0xe40>
     d04:	add	x2, x1, w8, sxtw
     d08:	add	w8, w7, #0x8
     d0c:	add	x2, x2, #0xa, lsl #12
     d10:	ldrb	w2, [x2, #2928]
     d14:	cmp	w5, w2
     d18:	csel	w5, w5, w2, ge  // ge = tcont
     d1c:	cmp	w20, w2
     d20:	csel	w20, w20, w2, le
     d24:	cmp	w21, w8
     d28:	b.le	e40 <BZ2_decompress+0xe40>
     d2c:	add	x2, x1, w8, sxtw
     d30:	add	w8, w7, #0x9
     d34:	add	x2, x2, #0xa, lsl #12
     d38:	ldrb	w2, [x2, #2928]
     d3c:	cmp	w5, w2
     d40:	csel	w5, w5, w2, ge  // ge = tcont
     d44:	cmp	w20, w2
     d48:	csel	w20, w20, w2, le
     d4c:	cmp	w21, w8
     d50:	b.le	e40 <BZ2_decompress+0xe40>
     d54:	add	x1, x1, w8, sxtw
     d58:	add	w8, w7, #0xa
     d5c:	add	x1, x1, #0xa, lsl #12
     d60:	ldrb	w1, [x1, #2928]
     d64:	cmp	w5, w1
     d68:	csel	w5, w5, w1, ge  // ge = tcont
     d6c:	cmp	w20, w1
     d70:	csel	w20, w20, w1, le
     d74:	cmp	w21, w8
     d78:	b.le	e40 <BZ2_decompress+0xe40>
     d7c:	add	x9, x9, x9, lsl #7
     d80:	add	w10, w7, #0xb
     d84:	add	x2, x19, x9, lsl #1
     d88:	add	x1, x2, w8, sxtw
     d8c:	add	x1, x1, #0xa, lsl #12
     d90:	ldrb	w1, [x1, #2928]
     d94:	cmp	w5, w1
     d98:	csel	w5, w5, w1, ge  // ge = tcont
     d9c:	cmp	w20, w1
     da0:	csel	w20, w20, w1, le
     da4:	cmp	w21, w10
     da8:	b.le	e40 <BZ2_decompress+0xe40>
     dac:	add	x1, x2, w10, sxtw
     db0:	add	w8, w7, #0xc
     db4:	add	x1, x1, #0xa, lsl #12
     db8:	ldrb	w1, [x1, #2928]
     dbc:	cmp	w5, w1
     dc0:	csel	w5, w5, w1, ge  // ge = tcont
     dc4:	cmp	w20, w1
     dc8:	csel	w20, w20, w1, le
     dcc:	cmp	w21, w8
     dd0:	b.le	e40 <BZ2_decompress+0xe40>
     dd4:	add	x8, x2, w8, sxtw
     dd8:	add	w1, w7, #0xd
     ddc:	add	x8, x8, #0xa, lsl #12
     de0:	ldrb	w8, [x8, #2928]
     de4:	cmp	w5, w8
     de8:	csel	w5, w5, w8, ge  // ge = tcont
     dec:	cmp	w20, w8
     df0:	csel	w20, w20, w8, le
     df4:	cmp	w21, w1
     df8:	b.le	e40 <BZ2_decompress+0xe40>
     dfc:	add	x8, x2, w1, sxtw
     e00:	add	w1, w7, #0xe
     e04:	add	x7, x8, #0xa, lsl #12
     e08:	ldrb	w7, [x7, #2928]
     e0c:	cmp	w5, w7
     e10:	csel	w5, w5, w7, ge  // ge = tcont
     e14:	cmp	w20, w7
     e18:	csel	w20, w20, w7, le
     e1c:	cmp	w21, w1
     e20:	b.le	e40 <BZ2_decompress+0xe40>
     e24:	add	x1, x2, w1, sxtw
     e28:	add	x1, x1, #0xa, lsl #12
     e2c:	ldrb	w1, [x1, #2928]
     e30:	cmp	w5, w1
     e34:	csel	w5, w5, w1, ge  // ge = tcont
     e38:	cmp	w20, w1
     e3c:	csel	w20, w20, w1, le
     e40:	mov	x10, #0x3060                	// #12384
     e44:	mov	x11, #0x1830                	// #6192
     e48:	mov	x3, x22
     e4c:	add	x2, x23, x10
     e50:	add	x1, x23, x11
     e54:	mov	x0, x23
     e58:	mov	w6, w21
     e5c:	mov	w4, w20
     e60:	bl	0 <BZ2_hbCreateDecodeTables>
     e64:	str	w20, [x28, x24, lsl #2]
     e68:	add	x24, x24, #0x1
     e6c:	add	x22, x22, #0x102
     e70:	cmp	w26, w24
     e74:	add	x23, x23, #0x408
     e78:	b.gt	760 <BZ2_decompress+0x760>
     e7c:	mov	w27, w21
     e80:	ldr	w25, [sp, #136]
     e84:	ldp	x9, x8, [sp, #184]
     e88:	mov	w13, w26
     e8c:	ldp	x20, x21, [sp, #200]
     e90:	ldr	w28, [sp, #144]
     e94:	ldp	w11, w10, [sp, #152]
     e98:	ldr	w22, [sp, #160]
     e9c:	ldr	w23, [sp, #168]
     ea0:	ldr	w24, [sp, #176]
     ea4:	ldr	w7, [sp, #232]
     ea8:	ldr	w4, [x19, #40]
     eac:	mov	w3, #0x86a0                	// #34464
     eb0:	movk	w3, #0x1, lsl #16
     eb4:	ldr	w5, [x19, #3192]
     eb8:	mov	x2, #0x400                 	// #1024
     ebc:	mov	w1, #0x0                   	// #0
     ec0:	add	w18, w5, #0x1
     ec4:	add	x0, x19, #0x44
     ec8:	mul	w12, w4, w3
     ecc:	str	w18, [sp, #136]
     ed0:	str	w12, [sp, #128]
     ed4:	str	w13, [sp, #144]
     ed8:	stp	w11, w10, [sp, #152]
     edc:	stp	x9, x8, [sp, #160]
     ee0:	str	w7, [sp, #232]
     ee4:	bl	0 <memset>
     ee8:	mov	w1, #0xff0                 	// #4080
     eec:	mov	x2, #0xfd0                 	// #4048
     ef0:	str	w1, [x19, #7880]
     ef4:	mov	x1, #0x9190                	// #37264
     ef8:	mov	x9, #0x1e00                	// #7680
     efc:	movk	x2, #0xfe0, lsl #32
     f00:	add	x0, x19, x9
     f04:	movk	x1, #0x9392, lsl #16
     f08:	movk	x1, #0x9594, lsl #32
     f0c:	str	x2, [x19, #7872]
     f10:	mov	x2, #0x9998                	// #39320
     f14:	movk	x1, #0x9796, lsl #48
     f18:	movk	x2, #0x9b9a, lsl #16
     f1c:	stur	x1, [x0, #28]
     f20:	movk	x2, #0x9d9c, lsl #32
     f24:	mov	x1, #0xa1a0                	// #41376
     f28:	movk	x2, #0x9f9e, lsl #48
     f2c:	movk	x1, #0xa3a2, lsl #16
     f30:	movk	x1, #0xa5a4, lsl #32
     f34:	stur	x2, [x0, #36]
     f38:	mov	x2, #0xa9a8                	// #43432
     f3c:	movk	x1, #0xa7a6, lsl #48
     f40:	movk	x2, #0xabaa, lsl #16
     f44:	stur	x1, [x0, #44]
     f48:	movk	x2, #0xadac, lsl #32
     f4c:	mov	x1, #0xb1b0                	// #45488
     f50:	movk	x2, #0xafae, lsl #48
     f54:	movk	x1, #0xb3b2, lsl #16
     f58:	movk	x1, #0xb5b4, lsl #32
     f5c:	stur	x2, [x0, #52]
     f60:	mov	x2, #0xb9b8                	// #47544
     f64:	movk	x1, #0xb7b6, lsl #48
     f68:	movk	x2, #0xbbba, lsl #16
     f6c:	stur	x1, [x0, #60]
     f70:	movk	x2, #0xbdbc, lsl #32
     f74:	mov	x1, #0xc1c0                	// #49600
     f78:	movk	x2, #0xbfbe, lsl #48
     f7c:	movk	x1, #0xc3c2, lsl #16
     f80:	movk	x1, #0xc5c4, lsl #32
     f84:	stur	x2, [x0, #68]
     f88:	mov	x2, #0xc9c8                	// #51656
     f8c:	movk	x1, #0xc7c6, lsl #48
     f90:	movk	x2, #0xcbca, lsl #16
     f94:	stur	x1, [x0, #76]
     f98:	movk	x2, #0xcdcc, lsl #32
     f9c:	mov	x1, #0xd1d0                	// #53712
     fa0:	movk	x2, #0xcfce, lsl #48
     fa4:	movk	x1, #0xd3d2, lsl #16
     fa8:	movk	x1, #0xd5d4, lsl #32
     fac:	stur	x2, [x0, #84]
     fb0:	mov	x2, #0xd9d8                	// #55768
     fb4:	movk	x1, #0xd7d6, lsl #48
     fb8:	movk	x2, #0xdbda, lsl #16
     fbc:	stur	x1, [x0, #92]
     fc0:	movk	x2, #0xdddc, lsl #32
     fc4:	mov	x1, #0xe1e0                	// #57824
     fc8:	movk	x2, #0xdfde, lsl #48
     fcc:	movk	x1, #0xe3e2, lsl #16
     fd0:	movk	x1, #0xe5e4, lsl #32
     fd4:	stur	x2, [x0, #100]
     fd8:	mov	x2, #0xe9e8                	// #59880
     fdc:	movk	x1, #0xe7e6, lsl #48
     fe0:	movk	x2, #0xebea, lsl #16
     fe4:	stur	x1, [x0, #108]
     fe8:	movk	x2, #0xedec, lsl #32
     fec:	mov	x1, #0xf1f0                	// #61936
     ff0:	movk	x2, #0xefee, lsl #48
     ff4:	movk	x1, #0xf3f2, lsl #16
     ff8:	movk	x1, #0xf5f4, lsl #32
     ffc:	stur	x2, [x0, #116]
    1000:	mov	x2, #0xf9f8                	// #63992
    1004:	movk	x1, #0xf7f6, lsl #48
    1008:	movk	x2, #0xfbfa, lsl #16
    100c:	stur	x1, [x0, #124]
    1010:	movk	x2, #0xfdfc, lsl #32
    1014:	mov	x1, #0xf60                 	// #3936
    1018:	movk	x2, #0xfffe, lsl #48
    101c:	movk	x1, #0xf70, lsl #32
    1020:	stur	x2, [x0, #132]
    1024:	mov	x2, #0xf80                 	// #3968
    1028:	stur	x1, [x0, #164]
    102c:	mov	x1, #0xfa0                 	// #4000
    1030:	movk	x2, #0xf90, lsl #32
    1034:	movk	x1, #0xfb0, lsl #32
    1038:	stur	x2, [x0, #172]
    103c:	mov	x2, #0xf30                 	// #3888
    1040:	stur	x1, [x0, #180]
    1044:	mov	w1, #0xfc0                 	// #4032
    1048:	movk	x2, #0xf40, lsl #32
    104c:	str	w1, [x19, #7868]
    1050:	mov	x1, #0x908                 	// #2312
    1054:	str	x2, [x19, #7832]
    1058:	movk	x1, #0xb0a, lsl #16
    105c:	mov	w2, #0xf50                 	// #3920
    1060:	movk	x1, #0xd0c, lsl #32
    1064:	str	w2, [x19, #7840]
    1068:	mov	x2, #0x100                 	// #256
    106c:	movk	x1, #0xf0e, lsl #48
    1070:	movk	x2, #0x302, lsl #16
    1074:	stur	x1, [x0, #-108]
    1078:	movk	x2, #0x504, lsl #32
    107c:	mov	x1, #0x1918                	// #6424
    1080:	movk	x2, #0x706, lsl #48
    1084:	movk	x1, #0x1b1a, lsl #16
    1088:	movk	x1, #0x1d1c, lsl #32
    108c:	stur	x2, [x0, #-116]
    1090:	mov	x2, #0x1110                	// #4368
    1094:	movk	x1, #0x1f1e, lsl #48
    1098:	movk	x2, #0x1312, lsl #16
    109c:	stur	x1, [x0, #-92]
    10a0:	movk	x2, #0x1514, lsl #32
    10a4:	mov	x1, #0x2928                	// #10536
    10a8:	movk	x2, #0x1716, lsl #48
    10ac:	movk	x1, #0x2b2a, lsl #16
    10b0:	movk	x1, #0x2d2c, lsl #32
    10b4:	stur	x2, [x0, #-100]
    10b8:	mov	x2, #0x2120                	// #8480
    10bc:	movk	x1, #0x2f2e, lsl #48
    10c0:	movk	x2, #0x2322, lsl #16
    10c4:	stur	x1, [x0, #-76]
    10c8:	movk	x2, #0x2524, lsl #32
    10cc:	mov	x1, #0x3938                	// #14648
    10d0:	movk	x2, #0x2726, lsl #48
    10d4:	movk	x1, #0x3b3a, lsl #16
    10d8:	movk	x1, #0x3d3c, lsl #32
    10dc:	stur	x2, [x0, #-84]
    10e0:	mov	x2, #0x3130                	// #12592
    10e4:	movk	x1, #0x3f3e, lsl #48
    10e8:	movk	x2, #0x3332, lsl #16
    10ec:	stur	x1, [x0, #-60]
    10f0:	movk	x2, #0x3534, lsl #32
    10f4:	mov	x1, #0x4948                	// #18760
    10f8:	movk	x2, #0x3736, lsl #48
    10fc:	movk	x1, #0x4b4a, lsl #16
    1100:	movk	x1, #0x4d4c, lsl #32
    1104:	stur	x2, [x0, #-68]
    1108:	mov	x2, #0x4140                	// #16704
    110c:	movk	x1, #0x4f4e, lsl #48
    1110:	movk	x2, #0x4342, lsl #16
    1114:	stur	x1, [x0, #-44]
    1118:	movk	x2, #0x4544, lsl #32
    111c:	mov	x1, #0x5150                	// #20816
    1120:	movk	x2, #0x4746, lsl #48
    1124:	movk	x1, #0x5352, lsl #16
    1128:	movk	x1, #0x5554, lsl #32
    112c:	stur	x2, [x0, #-52]
    1130:	mov	x2, #0x5958                	// #22872
    1134:	movk	x1, #0x5756, lsl #48
    1138:	movk	x2, #0x5b5a, lsl #16
    113c:	stur	x1, [x0, #-36]
    1140:	movk	x2, #0x5d5c, lsl #32
    1144:	mov	x1, #0x6160                	// #24928
    1148:	movk	x2, #0x5f5e, lsl #48
    114c:	movk	x1, #0x6362, lsl #16
    1150:	movk	x1, #0x6564, lsl #32
    1154:	stur	x2, [x0, #-28]
    1158:	mov	x2, #0x6968                	// #26984
    115c:	movk	x1, #0x6766, lsl #48
    1160:	movk	x2, #0x6b6a, lsl #16
    1164:	stur	x1, [x0, #-20]
    1168:	movk	x2, #0x6d6c, lsl #32
    116c:	mov	x1, #0x7170                	// #29040
    1170:	movk	x2, #0x6f6e, lsl #48
    1174:	movk	x1, #0x7372, lsl #16
    1178:	movk	x1, #0x7574, lsl #32
    117c:	stur	x2, [x0, #-12]
    1180:	mov	x2, #0x7978                	// #31096
    1184:	movk	x1, #0x7776, lsl #48
    1188:	movk	x2, #0x7b7a, lsl #16
    118c:	stur	x1, [x0, #-4]
    1190:	movk	x2, #0x7d7c, lsl #32
    1194:	mov	x1, #0x8180                	// #33152
    1198:	movk	x2, #0x7f7e, lsl #48
    119c:	movk	x1, #0x8382, lsl #16
    11a0:	movk	x1, #0x8584, lsl #32
    11a4:	stur	x2, [x0, #4]
    11a8:	mov	x2, #0x8988                	// #35208
    11ac:	movk	x1, #0x8786, lsl #48
    11b0:	movk	x2, #0x8b8a, lsl #16
    11b4:	stur	x1, [x0, #12]
    11b8:	movk	x2, #0x8d8c, lsl #32
    11bc:	mov	x1, #0xf00                 	// #3840
    11c0:	movk	x2, #0x8f8e, lsl #48
    11c4:	movk	x1, #0xf10, lsl #32
    11c8:	stur	x2, [x0, #20]
    11cc:	cmp	w28, #0x0
    11d0:	stur	x1, [x0, #140]
    11d4:	mov	w0, #0xf20                 	// #3872
    11d8:	str	w0, [x19, #7828]
    11dc:	ldr	w12, [sp, #128]
    11e0:	ldr	w18, [sp, #136]
    11e4:	ldr	w13, [sp, #144]
    11e8:	ldp	w11, w10, [sp, #152]
    11ec:	ldr	w7, [sp, #232]
    11f0:	ldp	x9, x8, [sp, #160]
    11f4:	b.le	2d58 <BZ2_decompress+0x2d58>
    11f8:	add	x0, x19, #0x1, lsl #12
    11fc:	mov	x22, #0xfa00                	// #64000
    1200:	mov	x8, #0xc9ac                	// #51628
    1204:	mov	x30, #0xb17c                	// #45436
    1208:	mov	w4, #0x0                   	// #0
    120c:	mov	w5, #0x31                  	// #49
    1210:	ldrb	w2, [x0, #3788]
    1214:	mov	w6, #0x0                   	// #0
    1218:	mov	w3, #0x100                 	// #256
    121c:	str	w2, [sp, #120]
    1220:	mov	x0, x2
    1224:	add	x1, x19, w2, sxtw #2
    1228:	ubfiz	x0, x0, #7, #8
    122c:	add	x1, x1, x22
    1230:	add	x0, x0, w2, uxtb
    1234:	lsl	x0, x0, #3
    1238:	ldr	w22, [x1, #12]
    123c:	add	x9, x0, x30
    1240:	mov	x1, #0xe1dc                	// #57820
    1244:	add	x1, x0, x1
    1248:	add	x0, x0, x8
    124c:	add	x9, x19, x9
    1250:	add	x8, x19, x0
    1254:	add	x1, x19, x1
    1258:	str	x1, [sp, #104]
    125c:	str	w22, [sp, #112]
    1260:	mov	w1, #0x24                  	// #36
    1264:	ldr	w0, [x19, #36]
    1268:	str	w1, [x19, #8]
    126c:	b	12ac <BZ2_decompress+0x12ac>
    1270:	ldr	x1, [x19]
    1274:	ldr	w2, [x1, #8]
    1278:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    127c:	ldr	x16, [x1]
    1280:	sub	w15, w2, #0x1
    1284:	ldr	w14, [x19, #32]
    1288:	add	w0, w0, #0x8
    128c:	ldr	w2, [x1, #12]
    1290:	ldrb	w17, [x16], #1
    1294:	add	w2, w2, #0x1
    1298:	orr	w14, w17, w14, lsl #8
    129c:	stp	w14, w0, [x19, #32]
    12a0:	str	x16, [x1]
    12a4:	stp	w15, w2, [x1, #8]
    12a8:	cbz	w2, 294c <BZ2_decompress+0x294c>
    12ac:	cmp	w22, w0
    12b0:	b.gt	1270 <BZ2_decompress+0x1270>
    12b4:	ldr	w23, [x19, #32]
    12b8:	sub	w0, w0, w22
    12bc:	mov	w1, #0x1                   	// #1
    12c0:	str	w0, [x19, #36]
    12c4:	lsl	w1, w1, w22
    12c8:	sub	w1, w1, #0x1
    12cc:	lsr	w23, w23, w0
    12d0:	and	w23, w23, w1
    12d4:	cmp	w22, #0x14
    12d8:	b.gt	1d98 <BZ2_decompress+0x1d98>
    12dc:	sxtw	x1, w22
    12e0:	ldr	w2, [x9, x1, lsl #2]
    12e4:	cmp	w2, w23
    12e8:	b.ge	13cc <BZ2_decompress+0x13cc>  // b.tcont
    12ec:	add	w22, w22, #0x1
    12f0:	mov	w1, #0x25                  	// #37
    12f4:	str	w1, [x19, #8]
    12f8:	b	1338 <BZ2_decompress+0x1338>
    12fc:	ldr	x1, [x19]
    1300:	ldr	w2, [x1, #8]
    1304:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1308:	ldr	x16, [x1]
    130c:	sub	w15, w2, #0x1
    1310:	ldr	w14, [x19, #32]
    1314:	add	w0, w0, #0x8
    1318:	ldr	w2, [x1, #12]
    131c:	ldrb	w17, [x16], #1
    1320:	add	w2, w2, #0x1
    1324:	orr	w14, w17, w14, lsl #8
    1328:	stp	w14, w0, [x19, #32]
    132c:	str	x16, [x1]
    1330:	stp	w15, w2, [x1, #8]
    1334:	cbz	w2, 28fc <BZ2_decompress+0x28fc>
    1338:	cmp	w0, #0x0
    133c:	b.le	12fc <BZ2_decompress+0x12fc>
    1340:	ldr	w24, [x19, #32]
    1344:	sub	w0, w0, #0x1
    1348:	str	w0, [x19, #36]
    134c:	lsr	w24, w24, w0
    1350:	and	w24, w24, #0x1
    1354:	orr	w23, w24, w23, lsl #1
    1358:	b	12d4 <BZ2_decompress+0x12d4>
    135c:	mov	w0, #0x21                  	// #33
    1360:	ldr	w14, [x19, #36]
    1364:	str	w0, [x19, #8]
    1368:	b	13a8 <BZ2_decompress+0x13a8>
    136c:	ldr	x0, [x19]
    1370:	ldr	w1, [x0, #8]
    1374:	cbz	w1, 2704 <BZ2_decompress+0x2704>
    1378:	ldr	x16, [x0]
    137c:	sub	w15, w1, #0x1
    1380:	ldr	w2, [x19, #32]
    1384:	add	w14, w14, #0x8
    1388:	ldr	w1, [x0, #12]
    138c:	ldrb	w17, [x16], #1
    1390:	add	w1, w1, #0x1
    1394:	orr	w2, w17, w2, lsl #8
    1398:	stp	w2, w14, [x19, #32]
    139c:	str	x16, [x0]
    13a0:	stp	w15, w1, [x0, #8]
    13a4:	cbz	w1, 293c <BZ2_decompress+0x293c>
    13a8:	cmp	w14, #0x4
    13ac:	b.le	136c <BZ2_decompress+0x136c>
    13b0:	ldr	w7, [x19, #32]
    13b4:	sub	w14, w14, #0x5
    13b8:	mov	w3, #0x0                   	// #0
    13bc:	str	w14, [x19, #36]
    13c0:	lsr	w14, w7, w14
    13c4:	and	w7, w14, #0x1f
    13c8:	b	6d4 <BZ2_decompress+0x6d4>
    13cc:	ldr	w0, [x8, x1, lsl #2]
    13d0:	sub	w0, w23, w0
    13d4:	cmp	w0, #0x101
    13d8:	b.hi	1d98 <BZ2_decompress+0x1d98>  // b.pmore
    13dc:	ldr	x1, [sp, #104]
    13e0:	ldr	w11, [x1, w0, sxtw #2]
    13e4:	cmp	w18, w11
    13e8:	b.eq	2b4c <BZ2_decompress+0x2b4c>  // b.none
    13ec:	cmp	w11, #0x1
    13f0:	b.ls	1da0 <BZ2_decompress+0x1da0>  // b.plast
    13f4:	cmp	w12, w4
    13f8:	b.le	1d98 <BZ2_decompress+0x1d98>
    13fc:	sub	w14, w11, #0x1
    1400:	cmp	w14, #0xf
    1404:	mov	w2, w14
    1408:	b.hi	2d84 <BZ2_decompress+0x2d84>  // b.pmore
    140c:	ldr	w0, [x19, #7820]
    1410:	cmp	w14, #0x3
    1414:	add	w1, w0, w14
    1418:	add	w17, w0, w14
    141c:	add	x1, x19, x1
    1420:	ldrb	w1, [x1, #3724]
    1424:	str	w1, [sp, #128]
    1428:	b.ls	1524 <BZ2_decompress+0x1524>  // b.plast
    142c:	sub	w2, w17, #0x1
    1430:	add	x15, x19, w17, sxtw
    1434:	sub	w14, w17, #0x2
    1438:	sub	w1, w17, #0x3
    143c:	add	x2, x19, w2, sxtw
    1440:	sub	w17, w17, #0x4
    1444:	add	x14, x19, w14, sxtw
    1448:	add	x1, x19, w1, sxtw
    144c:	add	x17, x19, w17, sxtw
    1450:	ldrb	w16, [x2, #3724]
    1454:	strb	w16, [x15, #3724]
    1458:	ldrb	w15, [x14, #3724]
    145c:	strb	w15, [x2, #3724]
    1460:	sub	w2, w11, #0x5
    1464:	cmp	w2, #0x3
    1468:	ldrb	w15, [x1, #3724]
    146c:	strb	w15, [x14, #3724]
    1470:	ldrb	w14, [x17, #3724]
    1474:	strb	w14, [x1, #3724]
    1478:	b.ls	1518 <BZ2_decompress+0x1518>  // b.plast
    147c:	add	w1, w0, w2
    1480:	sub	w17, w11, #0x9
    1484:	sub	w16, w1, #0x1
    1488:	sub	w15, w1, #0x2
    148c:	add	x30, x19, w1, sxtw
    1490:	cmp	w17, #0x3
    1494:	add	x16, x19, w16, sxtw
    1498:	add	x15, x19, w15, sxtw
    149c:	ldrb	w14, [x16, #3724]
    14a0:	strb	w14, [x30, #3724]
    14a4:	sub	w14, w1, #0x3
    14a8:	sub	w30, w1, #0x4
    14ac:	add	x14, x19, w14, sxtw
    14b0:	ldrb	w1, [x15, #3724]
    14b4:	strb	w1, [x16, #3724]
    14b8:	add	x1, x19, w30, sxtw
    14bc:	ldrb	w16, [x14, #3724]
    14c0:	strb	w16, [x15, #3724]
    14c4:	ldrb	w1, [x1, #3724]
    14c8:	strb	w1, [x14, #3724]
    14cc:	b.ls	1518 <BZ2_decompress+0x1518>  // b.plast
    14d0:	add	w17, w0, w17
    14d4:	sub	w15, w17, #0x1
    14d8:	sub	w14, w17, #0x2
    14dc:	add	x30, x19, w17, sxtw
    14e0:	sub	w1, w17, #0x3
    14e4:	add	x15, x19, w15, sxtw
    14e8:	add	x14, x19, w14, sxtw
    14ec:	add	x1, x19, w1, sxtw
    14f0:	sub	w17, w17, #0x4
    14f4:	ldrb	w16, [x15, #3724]
    14f8:	add	x17, x19, w17, sxtw
    14fc:	strb	w16, [x30, #3724]
    1500:	ldrb	w16, [x14, #3724]
    1504:	strb	w16, [x15, #3724]
    1508:	ldrb	w15, [x1, #3724]
    150c:	strb	w15, [x14, #3724]
    1510:	ldrb	w14, [x17, #3724]
    1514:	strb	w14, [x1, #3724]
    1518:	lsr	w14, w2, #2
    151c:	mov	w1, #0xfffffffc            	// #-4
    1520:	madd	w2, w14, w1, w2
    1524:	cbz	w2, 157c <BZ2_decompress+0x157c>
    1528:	add	w1, w0, w2
    152c:	subs	w2, w2, #0x1
    1530:	sub	w14, w1, #0x1
    1534:	add	x14, x19, x14
    1538:	add	x1, x19, w1, uxtw
    153c:	ldrb	w14, [x14, #3724]
    1540:	strb	w14, [x1, #3724]
    1544:	b.eq	157c <BZ2_decompress+0x157c>  // b.none
    1548:	add	w1, w0, w2
    154c:	cmp	w2, #0x1
    1550:	sub	w2, w1, #0x1
    1554:	add	x2, x19, x2
    1558:	add	x1, x19, w1, uxtw
    155c:	ldrb	w2, [x2, #3724]
    1560:	strb	w2, [x1, #3724]
    1564:	b.eq	157c <BZ2_decompress+0x157c>  // b.none
    1568:	add	x2, x19, w0, uxtw
    156c:	add	w1, w0, #0x1
    1570:	add	x1, x19, x1
    1574:	ldrb	w2, [x2, #3724]
    1578:	strb	w2, [x1, #3724]
    157c:	add	x0, x19, w0, sxtw
    1580:	ldrb	w1, [sp, #128]
    1584:	strb	w1, [x0, #3724]
    1588:	ldr	w0, [sp, #128]
    158c:	add	x1, x19, w0, sxtw
    1590:	ldrb	w0, [x1, #3468]
    1594:	ldrb	w2, [x1, #3468]
    1598:	add	x0, x19, x0, lsl #2
    159c:	ldr	w1, [x0, #68]
    15a0:	add	w1, w1, #0x1
    15a4:	str	w1, [x0, #68]
    15a8:	ldrb	w0, [x19, #44]
    15ac:	cbz	w0, 2d78 <BZ2_decompress+0x2d78>
    15b0:	ldr	x0, [x19, #3160]
    15b4:	strh	w2, [x0, w4, sxtw #1]
    15b8:	add	w4, w4, #0x1
    15bc:	cbnz	w5, 162c <BZ2_decompress+0x162c>
    15c0:	add	w6, w6, #0x1
    15c4:	cmp	w28, w6
    15c8:	b.le	1d98 <BZ2_decompress+0x1d98>
    15cc:	add	x1, x19, w6, sxtw
    15d0:	mov	x8, #0x408                 	// #1032
    15d4:	add	x1, x1, #0x1, lsl #12
    15d8:	mov	x9, #0x3e80                	// #16000
    15dc:	mov	x14, #0xb17c                	// #45436
    15e0:	mov	x15, #0xe1dc                	// #57820
    15e4:	mov	x16, #0xc9ac                	// #51628
    15e8:	mov	w5, #0x32                  	// #50
    15ec:	ldrb	w2, [x1, #3788]
    15f0:	ldrb	w1, [x1, #3788]
    15f4:	mov	x0, x2
    15f8:	add	x2, x2, x9
    15fc:	str	w1, [sp, #120]
    1600:	add	x1, x19, x2, lsl #2
    1604:	mul	x0, x0, x8
    1608:	add	x9, x0, x14
    160c:	add	x2, x0, x15
    1610:	add	x0, x0, x16
    1614:	ldr	w1, [x1, #12]
    1618:	add	x9, x19, x9
    161c:	add	x8, x19, x0
    1620:	str	w1, [sp, #112]
    1624:	add	x1, x19, x2
    1628:	str	x1, [sp, #104]
    162c:	ldr	w22, [sp, #112]
    1630:	sub	w5, w5, #0x1
    1634:	nop
    1638:	mov	w1, #0x28                  	// #40
    163c:	ldr	w0, [x19, #36]
    1640:	str	w1, [x19, #8]
    1644:	b	1684 <BZ2_decompress+0x1684>
    1648:	ldr	x1, [x19]
    164c:	ldr	w2, [x1, #8]
    1650:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1654:	ldr	x16, [x1]
    1658:	sub	w15, w2, #0x1
    165c:	ldr	w14, [x19, #32]
    1660:	add	w0, w0, #0x8
    1664:	ldr	w2, [x1, #12]
    1668:	ldrb	w17, [x16], #1
    166c:	add	w2, w2, #0x1
    1670:	orr	w14, w17, w14, lsl #8
    1674:	stp	w14, w0, [x19, #32]
    1678:	str	x16, [x1]
    167c:	stp	w15, w2, [x1, #8]
    1680:	cbz	w2, 29dc <BZ2_decompress+0x29dc>
    1684:	cmp	w22, w0
    1688:	b.gt	1648 <BZ2_decompress+0x1648>
    168c:	ldr	w23, [x19, #32]
    1690:	sub	w0, w0, w22
    1694:	mov	w1, #0x1                   	// #1
    1698:	str	w0, [x19, #36]
    169c:	lsl	w1, w1, w22
    16a0:	sub	w1, w1, #0x1
    16a4:	lsr	w23, w23, w0
    16a8:	and	w23, w23, w1
    16ac:	cmp	w22, #0x14
    16b0:	b.gt	1d98 <BZ2_decompress+0x1d98>
    16b4:	sxtw	x1, w22
    16b8:	ldr	w2, [x9, x1, lsl #2]
    16bc:	cmp	w2, w23
    16c0:	b.ge	2b1c <BZ2_decompress+0x2b1c>  // b.tcont
    16c4:	add	w22, w22, #0x1
    16c8:	mov	w1, #0x29                  	// #41
    16cc:	str	w1, [x19, #8]
    16d0:	b	1710 <BZ2_decompress+0x1710>
    16d4:	ldr	x1, [x19]
    16d8:	ldr	w2, [x1, #8]
    16dc:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    16e0:	ldr	x16, [x1]
    16e4:	sub	w15, w2, #0x1
    16e8:	ldr	w14, [x19, #32]
    16ec:	add	w0, w0, #0x8
    16f0:	ldr	w2, [x1, #12]
    16f4:	ldrb	w17, [x16], #1
    16f8:	add	w2, w2, #0x1
    16fc:	orr	w14, w17, w14, lsl #8
    1700:	stp	w14, w0, [x19, #32]
    1704:	str	x16, [x1]
    1708:	stp	w15, w2, [x1, #8]
    170c:	cbz	w2, 290c <BZ2_decompress+0x290c>
    1710:	cmp	w0, #0x0
    1714:	b.le	16d4 <BZ2_decompress+0x16d4>
    1718:	ldr	w24, [x19, #32]
    171c:	sub	w0, w0, #0x1
    1720:	str	w0, [x19, #36]
    1724:	lsr	w24, w24, w0
    1728:	and	w24, w24, #0x1
    172c:	orr	w23, w24, w23, lsl #1
    1730:	b	16ac <BZ2_decompress+0x16ac>
    1734:	ldr	w0, [x19, #36]
    1738:	mov	w1, #0x15                  	// #21
    173c:	str	w1, [x19, #8]
    1740:	b	1780 <BZ2_decompress+0x1780>
    1744:	ldr	x1, [x19]
    1748:	ldr	w2, [x1, #8]
    174c:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1750:	ldr	x16, [x1]
    1754:	sub	w15, w2, #0x1
    1758:	ldr	w14, [x19, #32]
    175c:	add	w0, w0, #0x8
    1760:	ldr	w2, [x1, #12]
    1764:	ldrb	w17, [x16], #1
    1768:	add	w2, w2, #0x1
    176c:	orr	w14, w17, w14, lsl #8
    1770:	stp	w14, w0, [x19, #32]
    1774:	str	x16, [x1]
    1778:	stp	w15, w2, [x1, #8]
    177c:	cbz	w2, 27cc <BZ2_decompress+0x27cc>
    1780:	cmp	w0, #0x7
    1784:	b.le	1744 <BZ2_decompress+0x1744>
    1788:	ldr	w1, [x19, #32]
    178c:	sub	w0, w0, #0x8
    1790:	ldr	w2, [x19, #3176]
    1794:	str	w0, [x19, #36]
    1798:	lsr	w1, w1, w0
    179c:	bfi	w1, w2, #8, #24
    17a0:	str	w1, [x19, #3176]
    17a4:	mov	w1, #0x16                  	// #22
    17a8:	str	w1, [x19, #8]
    17ac:	b	17ec <BZ2_decompress+0x17ec>
    17b0:	ldr	x1, [x19]
    17b4:	ldr	w2, [x1, #8]
    17b8:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    17bc:	ldr	x16, [x1]
    17c0:	sub	w15, w2, #0x1
    17c4:	ldr	w14, [x19, #32]
    17c8:	add	w0, w0, #0x8
    17cc:	ldr	w2, [x1, #12]
    17d0:	ldrb	w17, [x16], #1
    17d4:	add	w2, w2, #0x1
    17d8:	orr	w14, w17, w14, lsl #8
    17dc:	stp	w14, w0, [x19, #32]
    17e0:	str	x16, [x1]
    17e4:	stp	w15, w2, [x1, #8]
    17e8:	cbz	w2, 279c <BZ2_decompress+0x279c>
    17ec:	cmp	w0, #0x7
    17f0:	b.le	17b0 <BZ2_decompress+0x17b0>
    17f4:	ldr	w1, [x19, #32]
    17f8:	sub	w0, w0, #0x8
    17fc:	ldr	w2, [x19, #3176]
    1800:	str	w0, [x19, #36]
    1804:	lsr	w1, w1, w0
    1808:	bfi	w1, w2, #8, #24
    180c:	str	w1, [x19, #3176]
    1810:	mov	w1, #0x17                  	// #23
    1814:	str	w1, [x19, #8]
    1818:	b	1858 <BZ2_decompress+0x1858>
    181c:	ldr	x1, [x19]
    1820:	ldr	w2, [x1, #8]
    1824:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1828:	ldr	x16, [x1]
    182c:	sub	w15, w2, #0x1
    1830:	ldr	w14, [x19, #32]
    1834:	add	w0, w0, #0x8
    1838:	ldr	w2, [x1, #12]
    183c:	ldrb	w17, [x16], #1
    1840:	add	w2, w2, #0x1
    1844:	orr	w14, w17, w14, lsl #8
    1848:	stp	w14, w0, [x19, #32]
    184c:	str	x16, [x1]
    1850:	stp	w15, w2, [x1, #8]
    1854:	cbz	w2, 277c <BZ2_decompress+0x277c>
    1858:	cmp	w0, #0x7
    185c:	b.le	181c <BZ2_decompress+0x181c>
    1860:	ldr	w1, [x19, #32]
    1864:	sub	w0, w0, #0x8
    1868:	ldr	w2, [x19, #3176]
    186c:	str	w0, [x19, #36]
    1870:	lsr	w1, w1, w0
    1874:	bfi	w1, w2, #8, #24
    1878:	str	w1, [x19, #3176]
    187c:	mov	w1, #0x18                  	// #24
    1880:	str	w1, [x19, #8]
    1884:	b	18c4 <BZ2_decompress+0x18c4>
    1888:	ldr	x1, [x19]
    188c:	ldr	w2, [x1, #8]
    1890:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1894:	ldr	x16, [x1]
    1898:	sub	w15, w2, #0x1
    189c:	ldr	w14, [x19, #32]
    18a0:	add	w0, w0, #0x8
    18a4:	ldr	w2, [x1, #12]
    18a8:	ldrb	w17, [x16], #1
    18ac:	add	w2, w2, #0x1
    18b0:	orr	w14, w17, w14, lsl #8
    18b4:	stp	w14, w0, [x19, #32]
    18b8:	str	x16, [x1]
    18bc:	stp	w15, w2, [x1, #8]
    18c0:	cbz	w2, 275c <BZ2_decompress+0x275c>
    18c4:	cmp	w0, #0x0
    18c8:	b.le	1888 <BZ2_decompress+0x1888>
    18cc:	ldr	w1, [x19, #32]
    18d0:	sub	w0, w0, #0x1
    18d4:	str	w0, [x19, #36]
    18d8:	str	wzr, [x19, #56]
    18dc:	lsr	w1, w1, w0
    18e0:	and	w1, w1, #0x1
    18e4:	strb	w1, [x19, #20]
    18e8:	mov	w1, #0x19                  	// #25
    18ec:	str	w1, [x19, #8]
    18f0:	b	1930 <BZ2_decompress+0x1930>
    18f4:	ldr	x1, [x19]
    18f8:	ldr	w2, [x1, #8]
    18fc:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1900:	ldr	x16, [x1]
    1904:	sub	w15, w2, #0x1
    1908:	ldr	w14, [x19, #32]
    190c:	add	w0, w0, #0x8
    1910:	ldr	w2, [x1, #12]
    1914:	ldrb	w17, [x16], #1
    1918:	add	w2, w2, #0x1
    191c:	orr	w14, w17, w14, lsl #8
    1920:	stp	w14, w0, [x19, #32]
    1924:	str	x16, [x1]
    1928:	stp	w15, w2, [x1, #8]
    192c:	cbz	w2, 274c <BZ2_decompress+0x274c>
    1930:	cmp	w0, #0x7
    1934:	b.le	18f4 <BZ2_decompress+0x18f4>
    1938:	ldr	w1, [x19, #32]
    193c:	sub	w0, w0, #0x8
    1940:	ldr	w2, [x19, #56]
    1944:	str	w0, [x19, #36]
    1948:	lsr	w1, w1, w0
    194c:	bfi	w1, w2, #8, #24
    1950:	str	w1, [x19, #56]
    1954:	mov	w1, #0x1a                  	// #26
    1958:	str	w1, [x19, #8]
    195c:	b	199c <BZ2_decompress+0x199c>
    1960:	ldr	x1, [x19]
    1964:	ldr	w2, [x1, #8]
    1968:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    196c:	ldr	x16, [x1]
    1970:	sub	w15, w2, #0x1
    1974:	ldr	w14, [x19, #32]
    1978:	add	w0, w0, #0x8
    197c:	ldr	w2, [x1, #12]
    1980:	ldrb	w17, [x16], #1
    1984:	add	w2, w2, #0x1
    1988:	orr	w14, w17, w14, lsl #8
    198c:	stp	w14, w0, [x19, #32]
    1990:	str	x16, [x1]
    1994:	stp	w15, w2, [x1, #8]
    1998:	cbz	w2, 273c <BZ2_decompress+0x273c>
    199c:	cmp	w0, #0x7
    19a0:	b.le	1960 <BZ2_decompress+0x1960>
    19a4:	ldr	w1, [x19, #32]
    19a8:	sub	w0, w0, #0x8
    19ac:	ldr	w2, [x19, #56]
    19b0:	str	w0, [x19, #36]
    19b4:	lsr	w1, w1, w0
    19b8:	bfi	w1, w2, #8, #24
    19bc:	str	w1, [x19, #56]
    19c0:	mov	w1, #0x1b                  	// #27
    19c4:	str	w1, [x19, #8]
    19c8:	b	1a08 <BZ2_decompress+0x1a08>
    19cc:	ldr	x1, [x19]
    19d0:	ldr	w2, [x1, #8]
    19d4:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    19d8:	ldr	x16, [x1]
    19dc:	sub	w15, w2, #0x1
    19e0:	ldr	w14, [x19, #32]
    19e4:	add	w0, w0, #0x8
    19e8:	ldr	w2, [x1, #12]
    19ec:	ldrb	w17, [x16], #1
    19f0:	add	w2, w2, #0x1
    19f4:	orr	w14, w17, w14, lsl #8
    19f8:	stp	w14, w0, [x19, #32]
    19fc:	str	x16, [x1]
    1a00:	stp	w15, w2, [x1, #8]
    1a04:	cbz	w2, 272c <BZ2_decompress+0x272c>
    1a08:	cmp	w0, #0x7
    1a0c:	b.le	19cc <BZ2_decompress+0x19cc>
    1a10:	ldr	w1, [x19, #32]
    1a14:	sub	w0, w0, #0x8
    1a18:	ldr	w2, [x19, #56]
    1a1c:	str	w0, [x19, #36]
    1a20:	lsr	w1, w1, w0
    1a24:	bfi	w1, w2, #8, #24
    1a28:	str	w1, [x19, #56]
    1a2c:	tbnz	w1, #31, 1d98 <BZ2_decompress+0x1d98>
    1a30:	ldr	w2, [x19, #40]
    1a34:	mov	w14, #0x86a0                	// #34464
    1a38:	movk	w14, #0x1, lsl #16
    1a3c:	mul	w2, w2, w14
    1a40:	add	w2, w2, #0xa
    1a44:	cmp	w1, w2
    1a48:	b.gt	1d98 <BZ2_decompress+0x1d98>
    1a4c:	mov	w3, #0x0                   	// #0
    1a50:	sxtw	x17, w3
    1a54:	add	x1, x19, #0xd7c
    1a58:	str	x1, [sp, #128]
    1a5c:	mov	w1, #0x1c                  	// #28
    1a60:	mov	w3, w17
    1a64:	str	w1, [x19, #8]
    1a68:	b	1aa8 <BZ2_decompress+0x1aa8>
    1a6c:	ldr	x1, [x19]
    1a70:	ldr	w2, [x1, #8]
    1a74:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1a78:	ldr	x15, [x1]
    1a7c:	add	w0, w0, #0x8
    1a80:	ldr	w30, [x19, #32]
    1a84:	sub	w2, w2, #0x1
    1a88:	ldr	w14, [x1, #12]
    1a8c:	ldrb	w16, [x15], #1
    1a90:	add	w14, w14, #0x1
    1a94:	orr	w16, w16, w30, lsl #8
    1a98:	stp	w16, w0, [x19, #32]
    1a9c:	str	x15, [x1]
    1aa0:	stp	w2, w14, [x1, #8]
    1aa4:	cbz	w14, 270c <BZ2_decompress+0x270c>
    1aa8:	cmp	w0, #0x0
    1aac:	b.le	1a6c <BZ2_decompress+0x1a6c>
    1ab0:	ldr	x2, [sp, #128]
    1ab4:	sub	w0, w0, #0x1
    1ab8:	ldr	w1, [x19, #32]
    1abc:	str	w0, [x19, #36]
    1ac0:	lsr	w1, w1, w0
    1ac4:	and	w1, w1, #0x1
    1ac8:	strb	w1, [x2, x17]
    1acc:	add	x17, x17, #0x1
    1ad0:	cmp	w17, #0xf
    1ad4:	b.le	1a5c <BZ2_decompress+0x1a5c>
    1ad8:	mov	w3, #0x0                   	// #0
    1adc:	add	x0, x19, #0xc7c
    1ae0:	mov	x2, #0x100                 	// #256
    1ae4:	mov	w1, #0x0                   	// #0
    1ae8:	str	w3, [sp, #128]
    1aec:	str	w13, [sp, #136]
    1af0:	str	w18, [sp, #144]
    1af4:	stp	w6, w5, [sp, #152]
    1af8:	str	w12, [sp, #160]
    1afc:	str	w4, [sp, #168]
    1b00:	str	w10, [sp, #176]
    1b04:	str	w7, [sp, #184]
    1b08:	stp	x9, x8, [sp, #192]
    1b0c:	str	w11, [sp, #232]
    1b10:	bl	0 <memset>
    1b14:	ldp	x9, x8, [sp, #192]
    1b18:	ldr	w3, [sp, #128]
    1b1c:	ldr	w13, [sp, #136]
    1b20:	ldr	w18, [sp, #144]
    1b24:	ldp	w6, w5, [sp, #152]
    1b28:	ldr	w12, [sp, #160]
    1b2c:	ldr	w4, [sp, #168]
    1b30:	ldr	w10, [sp, #176]
    1b34:	ldr	w7, [sp, #184]
    1b38:	ldr	w11, [sp, #232]
    1b3c:	add	x0, x19, w3, sxtw
    1b40:	ldrb	w0, [x0, #3452]
    1b44:	cbz	w0, 1be0 <BZ2_decompress+0x1be0>
    1b48:	mov	w25, #0x0                   	// #0
    1b4c:	nop
    1b50:	ldr	w14, [x19, #36]
    1b54:	lsl	w0, w3, #4
    1b58:	mov	w17, #0x1d                  	// #29
    1b5c:	str	w0, [sp, #128]
    1b60:	str	w17, [x19, #8]
    1b64:	b	1ba4 <BZ2_decompress+0x1ba4>
    1b68:	ldr	x0, [x19]
    1b6c:	ldr	w1, [x0, #8]
    1b70:	cbz	w1, 2704 <BZ2_decompress+0x2704>
    1b74:	ldr	x15, [x0]
    1b78:	add	w14, w14, #0x8
    1b7c:	ldr	w30, [x19, #32]
    1b80:	sub	w1, w1, #0x1
    1b84:	ldr	w2, [x0, #12]
    1b88:	ldrb	w16, [x15], #1
    1b8c:	add	w2, w2, #0x1
    1b90:	orr	w16, w16, w30, lsl #8
    1b94:	stp	w16, w14, [x19, #32]
    1b98:	str	x15, [x0]
    1b9c:	stp	w1, w2, [x0, #8]
    1ba0:	cbz	w2, 276c <BZ2_decompress+0x276c>
    1ba4:	cmp	w14, #0x0
    1ba8:	b.le	1b68 <BZ2_decompress+0x1b68>
    1bac:	ldr	w0, [x19, #32]
    1bb0:	sub	w14, w14, #0x1
    1bb4:	str	w14, [x19, #36]
    1bb8:	lsr	w0, w0, w14
    1bbc:	tbz	w0, #0, 1bd4 <BZ2_decompress+0x1bd4>
    1bc0:	ldr	w0, [sp, #128]
    1bc4:	mov	w1, #0x1                   	// #1
    1bc8:	add	w0, w25, w0
    1bcc:	add	x0, x19, w0, sxtw
    1bd0:	strb	w1, [x0, #3196]
    1bd4:	add	w25, w25, #0x1
    1bd8:	cmp	w25, #0xf
    1bdc:	b.le	1b60 <BZ2_decompress+0x1b60>
    1be0:	add	w3, w3, #0x1
    1be4:	cmp	w3, #0xf
    1be8:	b.le	1b3c <BZ2_decompress+0x1b3c>
    1bec:	add	x14, x19, #0xc7c
    1bf0:	mov	x0, #0x0                   	// #0
    1bf4:	mov	w1, #0x0                   	// #0
    1bf8:	str	wzr, [x19, #3192]
    1bfc:	nop
    1c00:	ldrb	w2, [x14, x0]
    1c04:	cbz	w2, 1c18 <BZ2_decompress+0x1c18>
    1c08:	add	x2, x19, w1, sxtw
    1c0c:	add	w1, w1, #0x1
    1c10:	strb	w0, [x2, #3468]
    1c14:	str	w1, [x19, #3192]
    1c18:	add	x0, x0, #0x1
    1c1c:	cmp	x0, #0x100
    1c20:	b.ne	1c00 <BZ2_decompress+0x1c00>  // b.any
    1c24:	cbz	w1, 1d98 <BZ2_decompress+0x1d98>
    1c28:	add	w27, w1, #0x2
    1c2c:	nop
    1c30:	mov	w1, #0x1e                  	// #30
    1c34:	ldr	w0, [x19, #36]
    1c38:	str	w1, [x19, #8]
    1c3c:	b	1c7c <BZ2_decompress+0x1c7c>
    1c40:	ldr	x1, [x19]
    1c44:	ldr	w2, [x1, #8]
    1c48:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1c4c:	ldr	x16, [x1]
    1c50:	sub	w15, w2, #0x1
    1c54:	ldr	w14, [x19, #32]
    1c58:	add	w0, w0, #0x8
    1c5c:	ldr	w2, [x1, #12]
    1c60:	ldrb	w17, [x16], #1
    1c64:	add	w2, w2, #0x1
    1c68:	orr	w14, w17, w14, lsl #8
    1c6c:	stp	w14, w0, [x19, #32]
    1c70:	str	x16, [x1]
    1c74:	stp	w15, w2, [x1, #8]
    1c78:	cbz	w2, 29bc <BZ2_decompress+0x29bc>
    1c7c:	cmp	w0, #0x2
    1c80:	b.le	1c40 <BZ2_decompress+0x1c40>
    1c84:	ldr	w26, [x19, #32]
    1c88:	sub	w0, w0, #0x3
    1c8c:	str	w0, [x19, #36]
    1c90:	lsr	w26, w26, w0
    1c94:	and	w26, w26, #0x7
    1c98:	sub	w1, w26, #0x2
    1c9c:	cmp	w1, #0x4
    1ca0:	b.hi	1d98 <BZ2_decompress+0x1d98>  // b.pmore
    1ca4:	mov	w1, #0x1f                  	// #31
    1ca8:	str	w1, [x19, #8]
    1cac:	b	1cec <BZ2_decompress+0x1cec>
    1cb0:	ldr	x1, [x19]
    1cb4:	ldr	w2, [x1, #8]
    1cb8:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1cbc:	ldr	x16, [x1]
    1cc0:	sub	w15, w2, #0x1
    1cc4:	ldr	w14, [x19, #32]
    1cc8:	add	w0, w0, #0x8
    1ccc:	ldr	w2, [x1, #12]
    1cd0:	ldrb	w17, [x16], #1
    1cd4:	add	w2, w2, #0x1
    1cd8:	orr	w14, w17, w14, lsl #8
    1cdc:	stp	w14, w0, [x19, #32]
    1ce0:	str	x16, [x1]
    1ce4:	stp	w15, w2, [x1, #8]
    1ce8:	cbz	w2, 27fc <BZ2_decompress+0x27fc>
    1cec:	cmp	w0, #0xe
    1cf0:	b.le	1cb0 <BZ2_decompress+0x1cb0>
    1cf4:	ldr	w1, [x19, #32]
    1cf8:	sub	w0, w0, #0xf
    1cfc:	str	w0, [x19, #36]
    1d00:	lsr	w1, w1, w0
    1d04:	ands	w28, w1, #0x7fff
    1d08:	b.eq	2a5c <BZ2_decompress+0x2a5c>  // b.none
    1d0c:	mov	w25, #0x0                   	// #0
    1d10:	mov	w3, #0x0                   	// #0
    1d14:	sxtw	x30, w3
    1d18:	mov	x1, #0x651e                	// #25886
    1d1c:	add	x1, x19, x1
    1d20:	str	x1, [sp, #128]
    1d24:	mov	w3, w30
    1d28:	mov	w1, #0x20                  	// #32
    1d2c:	str	w1, [x19, #8]
    1d30:	b	1d70 <BZ2_decompress+0x1d70>
    1d34:	ldr	x1, [x19]
    1d38:	ldr	w2, [x1, #8]
    1d3c:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1d40:	ldr	x15, [x1]
    1d44:	add	w0, w0, #0x8
    1d48:	ldr	w17, [x19, #32]
    1d4c:	sub	w2, w2, #0x1
    1d50:	ldr	w14, [x1, #12]
    1d54:	ldrb	w16, [x15], #1
    1d58:	add	w14, w14, #0x1
    1d5c:	orr	w16, w16, w17, lsl #8
    1d60:	stp	w16, w0, [x19, #32]
    1d64:	str	x15, [x1]
    1d68:	stp	w2, w14, [x1, #8]
    1d6c:	cbz	w14, 271c <BZ2_decompress+0x271c>
    1d70:	cmp	w0, #0x0
    1d74:	b.le	1d34 <BZ2_decompress+0x1d34>
    1d78:	ldr	w1, [x19, #32]
    1d7c:	sub	w0, w0, #0x1
    1d80:	str	w0, [x19, #36]
    1d84:	lsr	w1, w1, w0
    1d88:	tbz	w1, #0, 2b90 <BZ2_decompress+0x2b90>
    1d8c:	add	w25, w25, #0x1
    1d90:	cmp	w25, w26
    1d94:	b.lt	1d28 <BZ2_decompress+0x1d28>  // b.tstop
    1d98:	mov	w0, #0xfffffffc            	// #-4
    1d9c:	b	120 <BZ2_decompress+0x120>
    1da0:	mov	w0, #0x1                   	// #1
    1da4:	mov	w10, #0xffffffff            	// #-1
    1da8:	str	w0, [sp, #116]
    1dac:	ldr	w1, [sp, #116]
    1db0:	cmp	w11, #0x0
    1db4:	add	w0, w10, w1
    1db8:	add	w10, w10, w1, lsl #1
    1dbc:	lsl	w2, w1, #1
    1dc0:	csel	w10, w10, w0, ne  // ne = any
    1dc4:	cbnz	w5, 1e34 <BZ2_decompress+0x1e34>
    1dc8:	add	w6, w6, #0x1
    1dcc:	cmp	w6, w28
    1dd0:	b.ge	32ac <BZ2_decompress+0x32ac>  // b.tcont
    1dd4:	add	x1, x19, w6, sxtw
    1dd8:	mov	x14, #0x3e80                	// #16000
    1ddc:	add	x1, x1, #0x1, lsl #12
    1de0:	mov	x9, #0x408                 	// #1032
    1de4:	mov	x15, #0xb17c                	// #45436
    1de8:	mov	x16, #0xe1dc                	// #57820
    1dec:	mov	x17, #0xc9ac                	// #51628
    1df0:	mov	w5, #0x32                  	// #50
    1df4:	ldrb	w8, [x1, #3788]
    1df8:	ldrb	w1, [x1, #3788]
    1dfc:	mov	x0, x8
    1e00:	add	x8, x8, x14
    1e04:	str	w1, [sp, #120]
    1e08:	add	x1, x19, x8, lsl #2
    1e0c:	mul	x0, x0, x9
    1e10:	ldr	w1, [x1, #12]
    1e14:	add	x8, x0, x16
    1e18:	add	x9, x0, x15
    1e1c:	add	x0, x0, x17
    1e20:	add	x9, x19, x9
    1e24:	str	w1, [sp, #112]
    1e28:	add	x1, x19, x8
    1e2c:	add	x8, x19, x0
    1e30:	str	x1, [sp, #104]
    1e34:	ldr	w22, [sp, #112]
    1e38:	sub	w5, w5, #0x1
    1e3c:	str	w2, [sp, #116]
    1e40:	mov	w1, #0x26                  	// #38
    1e44:	ldr	w0, [x19, #36]
    1e48:	str	w1, [x19, #8]
    1e4c:	b	1e8c <BZ2_decompress+0x1e8c>
    1e50:	ldr	x1, [x19]
    1e54:	ldr	w2, [x1, #8]
    1e58:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1e5c:	ldr	x16, [x1]
    1e60:	sub	w15, w2, #0x1
    1e64:	ldr	w14, [x19, #32]
    1e68:	add	w0, w0, #0x8
    1e6c:	ldr	w2, [x1, #12]
    1e70:	ldrb	w17, [x16], #1
    1e74:	add	w2, w2, #0x1
    1e78:	orr	w14, w17, w14, lsl #8
    1e7c:	stp	w14, w0, [x19, #32]
    1e80:	str	x16, [x1]
    1e84:	stp	w15, w2, [x1, #8]
    1e88:	cbz	w2, 29cc <BZ2_decompress+0x29cc>
    1e8c:	cmp	w22, w0
    1e90:	b.gt	1e50 <BZ2_decompress+0x1e50>
    1e94:	ldr	w23, [x19, #32]
    1e98:	sub	w0, w0, w22
    1e9c:	mov	w1, #0x1                   	// #1
    1ea0:	str	w0, [x19, #36]
    1ea4:	lsl	w1, w1, w22
    1ea8:	sub	w1, w1, #0x1
    1eac:	lsr	w23, w23, w0
    1eb0:	and	w23, w23, w1
    1eb4:	b	2664 <BZ2_decompress+0x2664>
    1eb8:	ldr	w1, [x19, #36]
    1ebc:	mov	w0, #0x31                  	// #49
    1ec0:	str	w0, [x19, #8]
    1ec4:	b	1f04 <BZ2_decompress+0x1f04>
    1ec8:	ldr	x0, [x19]
    1ecc:	ldr	w2, [x0, #8]
    1ed0:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1ed4:	ldr	x16, [x0]
    1ed8:	sub	w15, w2, #0x1
    1edc:	ldr	w14, [x19, #32]
    1ee0:	add	w1, w1, #0x8
    1ee4:	ldr	w2, [x0, #12]
    1ee8:	ldrb	w17, [x16], #1
    1eec:	add	w2, w2, #0x1
    1ef0:	orr	w14, w17, w14, lsl #8
    1ef4:	stp	w14, w1, [x19, #32]
    1ef8:	str	x16, [x0]
    1efc:	stp	w15, w2, [x0, #8]
    1f00:	cbz	w2, 27ac <BZ2_decompress+0x27ac>
    1f04:	cmp	w1, #0x7
    1f08:	b.le	1ec8 <BZ2_decompress+0x1ec8>
    1f0c:	ldr	w0, [x19, #32]
    1f10:	sub	w1, w1, #0x8
    1f14:	ldr	w2, [x19, #3180]
    1f18:	str	w1, [x19, #36]
    1f1c:	lsr	w0, w0, w1
    1f20:	bfi	w0, w2, #8, #24
    1f24:	str	w0, [x19, #3180]
    1f28:	mov	w0, #0x32                  	// #50
    1f2c:	str	w0, [x19, #8]
    1f30:	b	1f70 <BZ2_decompress+0x1f70>
    1f34:	ldr	x0, [x19]
    1f38:	ldr	w2, [x0, #8]
    1f3c:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1f40:	ldr	x16, [x0]
    1f44:	sub	w15, w2, #0x1
    1f48:	ldr	w14, [x19, #32]
    1f4c:	add	w1, w1, #0x8
    1f50:	ldr	w2, [x0, #12]
    1f54:	ldrb	w17, [x16], #1
    1f58:	add	w2, w2, #0x1
    1f5c:	orr	w14, w17, w14, lsl #8
    1f60:	stp	w14, w1, [x19, #32]
    1f64:	str	x16, [x0]
    1f68:	stp	w15, w2, [x0, #8]
    1f6c:	cbz	w2, 278c <BZ2_decompress+0x278c>
    1f70:	cmp	w1, #0x7
    1f74:	b.le	1f34 <BZ2_decompress+0x1f34>
    1f78:	ldr	w0, [x19, #32]
    1f7c:	sub	w1, w1, #0x8
    1f80:	ldr	w2, [x19, #3180]
    1f84:	str	w1, [x19, #36]
    1f88:	lsr	w1, w0, w1
    1f8c:	mov	w0, #0x1                   	// #1
    1f90:	bfi	w1, w2, #8, #24
    1f94:	str	w0, [x19, #8]
    1f98:	mov	w0, #0x4                   	// #4
    1f9c:	str	w1, [x19, #3180]
    1fa0:	b	120 <BZ2_decompress+0x120>
    1fa4:	ldr	w1, [x19, #36]
    1fa8:	b	1f28 <BZ2_decompress+0x1f28>
    1fac:	ldr	w0, [x19, #36]
    1fb0:	b	474 <BZ2_decompress+0x474>
    1fb4:	ldr	w0, [x19, #36]
    1fb8:	b	39c <BZ2_decompress+0x39c>
    1fbc:	ldr	w0, [x19, #36]
    1fc0:	b	408 <BZ2_decompress+0x408>
    1fc4:	ldr	w1, [x19, #36]
    1fc8:	mov	w0, #0x30                  	// #48
    1fcc:	str	w0, [x19, #8]
    1fd0:	b	2010 <BZ2_decompress+0x2010>
    1fd4:	ldr	x0, [x19]
    1fd8:	ldr	w2, [x0, #8]
    1fdc:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    1fe0:	ldr	x16, [x0]
    1fe4:	sub	w15, w2, #0x1
    1fe8:	ldr	w14, [x19, #32]
    1fec:	add	w1, w1, #0x8
    1ff0:	ldr	w2, [x0, #12]
    1ff4:	ldrb	w17, [x16], #1
    1ff8:	add	w2, w2, #0x1
    1ffc:	orr	w14, w17, w14, lsl #8
    2000:	stp	w14, w1, [x19, #32]
    2004:	str	x16, [x0]
    2008:	stp	w15, w2, [x0, #8]
    200c:	cbz	w2, 27bc <BZ2_decompress+0x27bc>
    2010:	cmp	w1, #0x7
    2014:	b.le	1fd4 <BZ2_decompress+0x1fd4>
    2018:	ldr	w0, [x19, #32]
    201c:	sub	w1, w1, #0x8
    2020:	ldr	w2, [x19, #3180]
    2024:	str	w1, [x19, #36]
    2028:	lsr	w0, w0, w1
    202c:	bfi	w0, w2, #8, #24
    2030:	str	w0, [x19, #3180]
    2034:	b	1ebc <BZ2_decompress+0x1ebc>
    2038:	ldr	w0, [x19, #36]
    203c:	b	17a4 <BZ2_decompress+0x17a4>
    2040:	ldr	w0, [x19, #36]
    2044:	b	1810 <BZ2_decompress+0x1810>
    2048:	ldr	w0, [x19, #36]
    204c:	b	187c <BZ2_decompress+0x187c>
    2050:	ldr	w0, [x19, #36]
    2054:	b	18e8 <BZ2_decompress+0x18e8>
    2058:	ldr	w0, [x19, #36]
    205c:	b	1954 <BZ2_decompress+0x1954>
    2060:	ldr	w0, [x19, #36]
    2064:	b	19c0 <BZ2_decompress+0x19c0>
    2068:	ldr	w0, [x19, #36]
    206c:	b	1a50 <BZ2_decompress+0x1a50>
    2070:	ldr	w0, [x19, #36]
    2074:	b	16c8 <BZ2_decompress+0x16c8>
    2078:	ldr	w0, [x19, #36]
    207c:	mov	w1, #0x2a                  	// #42
    2080:	str	w1, [x19, #8]
    2084:	b	20c4 <BZ2_decompress+0x20c4>
    2088:	ldr	x1, [x19]
    208c:	ldr	w2, [x1, #8]
    2090:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2094:	ldr	x16, [x1]
    2098:	sub	w15, w2, #0x1
    209c:	ldr	w14, [x19, #32]
    20a0:	add	w0, w0, #0x8
    20a4:	ldr	w2, [x1, #12]
    20a8:	ldrb	w17, [x16], #1
    20ac:	add	w2, w2, #0x1
    20b0:	orr	w14, w17, w14, lsl #8
    20b4:	stp	w14, w0, [x19, #32]
    20b8:	str	x16, [x1]
    20bc:	stp	w15, w2, [x1, #8]
    20c0:	cbz	w2, 292c <BZ2_decompress+0x292c>
    20c4:	cmp	w0, #0x7
    20c8:	b.le	2088 <BZ2_decompress+0x2088>
    20cc:	ldr	w2, [x19, #32]
    20d0:	sub	w1, w0, #0x8
    20d4:	str	w1, [x19, #36]
    20d8:	mov	w0, #0xfffffffc            	// #-4
    20dc:	lsr	w2, w2, w1
    20e0:	and	w2, w2, #0xff
    20e4:	cmp	w2, #0x72
    20e8:	b.ne	120 <BZ2_decompress+0x120>  // b.any
    20ec:	mov	w0, #0x2b                  	// #43
    20f0:	str	w0, [x19, #8]
    20f4:	b	2134 <BZ2_decompress+0x2134>
    20f8:	ldr	x0, [x19]
    20fc:	ldr	w2, [x0, #8]
    2100:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2104:	ldr	x16, [x0]
    2108:	sub	w15, w2, #0x1
    210c:	ldr	w14, [x19, #32]
    2110:	add	w1, w1, #0x8
    2114:	ldr	w2, [x0, #12]
    2118:	ldrb	w17, [x16], #1
    211c:	add	w2, w2, #0x1
    2120:	orr	w14, w17, w14, lsl #8
    2124:	stp	w14, w1, [x19, #32]
    2128:	str	x16, [x0]
    212c:	stp	w15, w2, [x0, #8]
    2130:	cbz	w2, 28bc <BZ2_decompress+0x28bc>
    2134:	cmp	w1, #0x7
    2138:	b.le	20f8 <BZ2_decompress+0x20f8>
    213c:	ldr	w2, [x19, #32]
    2140:	sub	w1, w1, #0x8
    2144:	str	w1, [x19, #36]
    2148:	mov	w0, #0xfffffffc            	// #-4
    214c:	lsr	w2, w2, w1
    2150:	and	w2, w2, #0xff
    2154:	cmp	w2, #0x45
    2158:	b.ne	120 <BZ2_decompress+0x120>  // b.any
    215c:	mov	w0, #0x2c                  	// #44
    2160:	str	w0, [x19, #8]
    2164:	b	21a4 <BZ2_decompress+0x21a4>
    2168:	ldr	x0, [x19]
    216c:	ldr	w2, [x0, #8]
    2170:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2174:	ldr	x16, [x0]
    2178:	sub	w15, w2, #0x1
    217c:	ldr	w14, [x19, #32]
    2180:	add	w1, w1, #0x8
    2184:	ldr	w2, [x0, #12]
    2188:	ldrb	w17, [x16], #1
    218c:	add	w2, w2, #0x1
    2190:	orr	w14, w17, w14, lsl #8
    2194:	stp	w14, w1, [x19, #32]
    2198:	str	x16, [x0]
    219c:	stp	w15, w2, [x0, #8]
    21a0:	cbz	w2, 287c <BZ2_decompress+0x287c>
    21a4:	cmp	w1, #0x7
    21a8:	b.le	2168 <BZ2_decompress+0x2168>
    21ac:	ldr	w2, [x19, #32]
    21b0:	sub	w1, w1, #0x8
    21b4:	str	w1, [x19, #36]
    21b8:	mov	w0, #0xfffffffc            	// #-4
    21bc:	lsr	w2, w2, w1
    21c0:	and	w2, w2, #0xff
    21c4:	cmp	w2, #0x38
    21c8:	b.ne	120 <BZ2_decompress+0x120>  // b.any
    21cc:	mov	w0, #0x2d                  	// #45
    21d0:	str	w0, [x19, #8]
    21d4:	b	2214 <BZ2_decompress+0x2214>
    21d8:	ldr	x0, [x19]
    21dc:	ldr	w2, [x0, #8]
    21e0:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    21e4:	ldr	x16, [x0]
    21e8:	sub	w15, w2, #0x1
    21ec:	ldr	w14, [x19, #32]
    21f0:	add	w1, w1, #0x8
    21f4:	ldr	w2, [x0, #12]
    21f8:	ldrb	w17, [x16], #1
    21fc:	add	w2, w2, #0x1
    2200:	orr	w14, w17, w14, lsl #8
    2204:	stp	w14, w1, [x19, #32]
    2208:	str	x16, [x0]
    220c:	stp	w15, w2, [x0, #8]
    2210:	cbz	w2, 280c <BZ2_decompress+0x280c>
    2214:	cmp	w1, #0x7
    2218:	b.le	21d8 <BZ2_decompress+0x21d8>
    221c:	ldr	w2, [x19, #32]
    2220:	sub	w1, w1, #0x8
    2224:	str	w1, [x19, #36]
    2228:	mov	w0, #0xfffffffc            	// #-4
    222c:	lsr	w2, w2, w1
    2230:	and	w2, w2, #0xff
    2234:	cmp	w2, #0x50
    2238:	b.ne	120 <BZ2_decompress+0x120>  // b.any
    223c:	mov	w0, #0x2e                  	// #46
    2240:	str	w0, [x19, #8]
    2244:	b	2284 <BZ2_decompress+0x2284>
    2248:	ldr	x0, [x19]
    224c:	ldr	w2, [x0, #8]
    2250:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2254:	ldr	x16, [x0]
    2258:	sub	w15, w2, #0x1
    225c:	ldr	w14, [x19, #32]
    2260:	add	w1, w1, #0x8
    2264:	ldr	w2, [x0, #12]
    2268:	ldrb	w17, [x16], #1
    226c:	add	w2, w2, #0x1
    2270:	orr	w14, w17, w14, lsl #8
    2274:	stp	w14, w1, [x19, #32]
    2278:	str	x16, [x0]
    227c:	stp	w15, w2, [x0, #8]
    2280:	cbz	w2, 281c <BZ2_decompress+0x281c>
    2284:	cmp	w1, #0x7
    2288:	b.le	2248 <BZ2_decompress+0x2248>
    228c:	ldr	w2, [x19, #32]
    2290:	sub	w1, w1, #0x8
    2294:	str	w1, [x19, #36]
    2298:	mov	w0, #0xfffffffc            	// #-4
    229c:	lsr	w2, w2, w1
    22a0:	and	w2, w2, #0xff
    22a4:	cmp	w2, #0x90
    22a8:	b.ne	120 <BZ2_decompress+0x120>  // b.any
    22ac:	str	wzr, [x19, #3180]
    22b0:	mov	w0, #0x2f                  	// #47
    22b4:	str	w0, [x19, #8]
    22b8:	b	22f8 <BZ2_decompress+0x22f8>
    22bc:	ldr	x0, [x19]
    22c0:	ldr	w2, [x0, #8]
    22c4:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    22c8:	ldr	x16, [x0]
    22cc:	sub	w15, w2, #0x1
    22d0:	ldr	w14, [x19, #32]
    22d4:	add	w1, w1, #0x8
    22d8:	ldr	w2, [x0, #12]
    22dc:	ldrb	w17, [x16], #1
    22e0:	add	w2, w2, #0x1
    22e4:	orr	w14, w17, w14, lsl #8
    22e8:	stp	w14, w1, [x19, #32]
    22ec:	str	x16, [x0]
    22f0:	stp	w15, w2, [x0, #8]
    22f4:	cbz	w2, 282c <BZ2_decompress+0x282c>
    22f8:	cmp	w1, #0x7
    22fc:	b.le	22bc <BZ2_decompress+0x22bc>
    2300:	ldr	w0, [x19, #32]
    2304:	sub	w1, w1, #0x8
    2308:	ldr	w2, [x19, #3180]
    230c:	str	w1, [x19, #36]
    2310:	lsr	w0, w0, w1
    2314:	bfi	w0, w2, #8, #24
    2318:	str	w0, [x19, #3180]
    231c:	b	1fc8 <BZ2_decompress+0x1fc8>
    2320:	ldr	w0, [x19, #36]
    2324:	mov	w1, #0xd                   	// #13
    2328:	str	w1, [x19, #8]
    232c:	b	2368 <BZ2_decompress+0x2368>
    2330:	ldr	w1, [x14, #8]
    2334:	cbz	w1, 2704 <BZ2_decompress+0x2704>
    2338:	ldr	x16, [x14]
    233c:	sub	w15, w1, #0x1
    2340:	ldr	w2, [x19, #32]
    2344:	add	w0, w0, #0x8
    2348:	ldr	w1, [x14, #12]
    234c:	ldrb	w17, [x16], #1
    2350:	add	w1, w1, #0x1
    2354:	orr	w2, w17, w2, lsl #8
    2358:	stp	w2, w0, [x19, #32]
    235c:	str	x16, [x14]
    2360:	stp	w15, w1, [x14, #8]
    2364:	cbz	w1, 284c <BZ2_decompress+0x284c>
    2368:	cmp	w0, #0x7
    236c:	b.le	2330 <BZ2_decompress+0x2330>
    2370:	ldr	w1, [x19, #32]
    2374:	sub	w0, w0, #0x8
    2378:	str	w0, [x19, #36]
    237c:	lsr	w0, w1, w0
    2380:	and	w0, w0, #0xff
    2384:	sub	w1, w0, #0x31
    2388:	cmp	w1, #0x8
    238c:	b.hi	2a68 <BZ2_decompress+0x2a68>  // b.pmore
    2390:	ldrb	w2, [x19, #44]
    2394:	sub	w0, w0, #0x30
    2398:	mov	w1, #0x86a0                	// #34464
    239c:	str	x14, [sp, #128]
    23a0:	movk	w1, #0x1, lsl #16
    23a4:	ldr	x15, [x14, #56]
    23a8:	str	w0, [x19, #40]
    23ac:	mul	w1, w0, w1
    23b0:	ldr	x0, [x14, #72]
    23b4:	cbz	w2, 2c0 <BZ2_decompress+0x2c0>
    23b8:	lsl	w1, w1, #1
    23bc:	mov	w2, #0x1                   	// #1
    23c0:	str	w3, [sp, #136]
    23c4:	str	w13, [sp, #144]
    23c8:	stp	w18, w6, [sp, #152]
    23cc:	str	w11, [sp, #160]
    23d0:	str	w12, [sp, #168]
    23d4:	str	w4, [sp, #176]
    23d8:	str	w10, [sp, #184]
    23dc:	str	w7, [sp, #192]
    23e0:	stp	x9, x8, [sp, #200]
    23e4:	str	w5, [sp, #232]
    23e8:	blr	x15
    23ec:	ldr	x14, [sp, #128]
    23f0:	mov	w2, #0x86a0                	// #34464
    23f4:	ldr	w1, [x19, #40]
    23f8:	movk	w2, #0x1, lsl #16
    23fc:	ldr	x15, [x14, #56]
    2400:	str	x0, [x19, #3160]
    2404:	ldr	x0, [x14, #72]
    2408:	mul	w1, w1, w2
    240c:	mov	w2, #0x1                   	// #1
    2410:	asr	w1, w1, #1
    2414:	blr	x15
    2418:	ldr	x1, [x19, #3160]
    241c:	str	x0, [x19, #3168]
    2420:	ldr	w3, [sp, #136]
    2424:	cmp	x1, #0x0
    2428:	ldr	w13, [sp, #144]
    242c:	ldp	w18, w6, [sp, #152]
    2430:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    2434:	ldr	w11, [sp, #160]
    2438:	ldr	w12, [sp, #168]
    243c:	ldr	w4, [sp, #176]
    2440:	ldr	w10, [sp, #184]
    2444:	ldr	w7, [sp, #192]
    2448:	ldr	w5, [sp, #232]
    244c:	ldp	x9, x8, [sp, #200]
    2450:	b.ne	324 <BZ2_decompress+0x324>  // b.any
    2454:	mov	w0, #0xfffffffd            	// #-3
    2458:	b	120 <BZ2_decompress+0x120>
    245c:	ldr	w0, [x19, #36]
    2460:	b	54c <BZ2_decompress+0x54c>
    2464:	ldr	w0, [x19, #36]
    2468:	b	4e0 <BZ2_decompress+0x4e0>
    246c:	ldr	w0, [x19, #36]
    2470:	mov	w1, #0x14                  	// #20
    2474:	str	w1, [x19, #8]
    2478:	b	24b8 <BZ2_decompress+0x24b8>
    247c:	ldr	x1, [x19]
    2480:	ldr	w2, [x1, #8]
    2484:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2488:	ldr	x16, [x1]
    248c:	sub	w15, w2, #0x1
    2490:	ldr	w14, [x19, #32]
    2494:	add	w0, w0, #0x8
    2498:	ldr	w2, [x1, #12]
    249c:	ldrb	w17, [x16], #1
    24a0:	add	w2, w2, #0x1
    24a4:	orr	w14, w17, w14, lsl #8
    24a8:	stp	w14, w0, [x19, #32]
    24ac:	str	x16, [x1]
    24b0:	stp	w15, w2, [x1, #8]
    24b4:	cbz	w2, 283c <BZ2_decompress+0x283c>
    24b8:	cmp	w0, #0x7
    24bc:	b.le	247c <BZ2_decompress+0x247c>
    24c0:	ldr	w1, [x19, #32]
    24c4:	sub	w0, w0, #0x8
    24c8:	ldr	w2, [x19, #3176]
    24cc:	str	w0, [x19, #36]
    24d0:	lsr	w1, w1, w0
    24d4:	bfi	w1, w2, #8, #24
    24d8:	str	w1, [x19, #3176]
    24dc:	b	1738 <BZ2_decompress+0x1738>
    24e0:	ldr	w0, [x19, #36]
    24e4:	mov	w1, #0xb                   	// #11
    24e8:	str	w1, [x19, #8]
    24ec:	b	2528 <BZ2_decompress+0x2528>
    24f0:	ldr	w1, [x14, #8]
    24f4:	cbz	w1, 2704 <BZ2_decompress+0x2704>
    24f8:	ldr	x16, [x14]
    24fc:	sub	w15, w1, #0x1
    2500:	ldr	w2, [x19, #32]
    2504:	add	w0, w0, #0x8
    2508:	ldr	w1, [x14, #12]
    250c:	ldrb	w17, [x16], #1
    2510:	add	w1, w1, #0x1
    2514:	orr	w2, w17, w2, lsl #8
    2518:	stp	w2, w0, [x19, #32]
    251c:	str	x16, [x14]
    2520:	stp	w15, w1, [x14, #8]
    2524:	cbz	w1, 28dc <BZ2_decompress+0x28dc>
    2528:	cmp	w0, #0x7
    252c:	b.le	24f0 <BZ2_decompress+0x24f0>
    2530:	ldr	w1, [x19, #32]
    2534:	sub	w0, w0, #0x8
    2538:	str	w0, [x19, #36]
    253c:	lsr	w1, w1, w0
    2540:	and	w1, w1, #0xff
    2544:	cmp	w1, #0x5a
    2548:	b.eq	2558 <BZ2_decompress+0x2558>  // b.none
    254c:	mov	w0, #0xfffffffb            	// #-5
    2550:	b	120 <BZ2_decompress+0x120>
    2554:	ldr	w0, [x19, #36]
    2558:	mov	w1, #0xc                   	// #12
    255c:	str	w1, [x19, #8]
    2560:	b	259c <BZ2_decompress+0x259c>
    2564:	ldr	w1, [x14, #8]
    2568:	cbz	w1, 2704 <BZ2_decompress+0x2704>
    256c:	ldr	x16, [x14]
    2570:	sub	w15, w1, #0x1
    2574:	ldr	w2, [x19, #32]
    2578:	add	w0, w0, #0x8
    257c:	ldr	w1, [x14, #12]
    2580:	ldrb	w17, [x16], #1
    2584:	add	w1, w1, #0x1
    2588:	orr	w2, w17, w2, lsl #8
    258c:	stp	w2, w0, [x19, #32]
    2590:	str	x16, [x14]
    2594:	stp	w15, w1, [x14, #8]
    2598:	cbz	w1, 289c <BZ2_decompress+0x289c>
    259c:	cmp	w0, #0x7
    25a0:	b.le	2564 <BZ2_decompress+0x2564>
    25a4:	ldr	w1, [x19, #32]
    25a8:	sub	w0, w0, #0x8
    25ac:	str	w0, [x19, #36]
    25b0:	lsr	w1, w1, w0
    25b4:	and	w1, w1, #0xff
    25b8:	cmp	w1, #0x68
    25bc:	b.eq	2324 <BZ2_decompress+0x2324>  // b.none
    25c0:	mov	w0, #0xfffffffb            	// #-5
    25c4:	b	120 <BZ2_decompress+0x120>
    25c8:	ldr	w1, [x19, #36]
    25cc:	b	21cc <BZ2_decompress+0x21cc>
    25d0:	ldr	w0, [x19, #36]
    25d4:	b	1d14 <BZ2_decompress+0x1d14>
    25d8:	ldr	w0, [x19, #36]
    25dc:	b	1ca4 <BZ2_decompress+0x1ca4>
    25e0:	ldr	w0, [x19, #36]
    25e4:	b	12f0 <BZ2_decompress+0x12f0>
    25e8:	ldr	w1, [x19, #36]
    25ec:	b	223c <BZ2_decompress+0x223c>
    25f0:	ldr	w1, [x19, #36]
    25f4:	b	22b0 <BZ2_decompress+0x22b0>
    25f8:	ldr	w0, [x19, #36]
    25fc:	mov	w1, #0x27                  	// #39
    2600:	str	w1, [x19, #8]
    2604:	b	2644 <BZ2_decompress+0x2644>
    2608:	ldr	x1, [x19]
    260c:	ldr	w2, [x1, #8]
    2610:	cbz	w2, 2704 <BZ2_decompress+0x2704>
    2614:	ldr	x16, [x1]
    2618:	sub	w15, w2, #0x1
    261c:	ldr	w14, [x19, #32]
    2620:	add	w0, w0, #0x8
    2624:	ldr	w2, [x1, #12]
    2628:	ldrb	w17, [x16], #1
    262c:	add	w2, w2, #0x1
    2630:	orr	w14, w17, w14, lsl #8
    2634:	stp	w14, w0, [x19, #32]
    2638:	str	x16, [x1]
    263c:	stp	w15, w2, [x1, #8]
    2640:	cbz	w2, 291c <BZ2_decompress+0x291c>
    2644:	cmp	w0, #0x0
    2648:	b.le	2608 <BZ2_decompress+0x2608>
    264c:	ldr	w24, [x19, #32]
    2650:	sub	w0, w0, #0x1
    2654:	str	w0, [x19, #36]
    2658:	lsr	w24, w24, w0
    265c:	and	w24, w24, #0x1
    2660:	orr	w23, w24, w23, lsl #1
    2664:	cmp	w22, #0x14
    2668:	b.gt	1d98 <BZ2_decompress+0x1d98>
    266c:	sxtw	x1, w22
    2670:	ldr	w2, [x9, x1, lsl #2]
    2674:	cmp	w2, w23
    2678:	b.ge	2a74 <BZ2_decompress+0x2a74>  // b.tcont
    267c:	add	w22, w22, #0x1
    2680:	b	25fc <BZ2_decompress+0x25fc>
    2684:	ldr	w1, [x19, #36]
    2688:	b	20ec <BZ2_decompress+0x20ec>
    268c:	ldr	w1, [x19, #36]
    2690:	b	215c <BZ2_decompress+0x215c>
    2694:	adrp	x0, 0 <stderr>
    2698:	adrp	x1, 0 <BZ2_decompress>
    269c:	add	x1, x1, #0x0
    26a0:	str	w3, [sp, #128]
    26a4:	ldr	x0, [x0]
    26a8:	str	w13, [sp, #136]
    26ac:	str	w18, [sp, #144]
    26b0:	stp	w6, w5, [sp, #152]
    26b4:	str	w12, [sp, #160]
    26b8:	str	w4, [sp, #168]
    26bc:	str	w10, [sp, #176]
    26c0:	str	w7, [sp, #184]
    26c4:	stp	x9, x8, [sp, #192]
    26c8:	str	w11, [sp, #232]
    26cc:	bl	0 <fprintf>
    26d0:	ldr	w0, [x19, #36]
    26d4:	ldr	w3, [sp, #128]
    26d8:	ldr	w13, [sp, #136]
    26dc:	ldr	w18, [sp, #144]
    26e0:	ldp	w6, w5, [sp, #152]
    26e4:	str	wzr, [x19, #3176]
    26e8:	ldr	w12, [sp, #160]
    26ec:	ldr	w4, [sp, #168]
    26f0:	ldr	w10, [sp, #176]
    26f4:	ldr	w7, [sp, #184]
    26f8:	ldr	w11, [sp, #232]
    26fc:	ldp	x9, x8, [sp, #192]
    2700:	b	2470 <BZ2_decompress+0x2470>
    2704:	mov	w0, #0x0                   	// #0
    2708:	b	120 <BZ2_decompress+0x120>
    270c:	ldr	w2, [x1, #16]
    2710:	add	w2, w2, #0x1
    2714:	str	w2, [x1, #16]
    2718:	b	1aa8 <BZ2_decompress+0x1aa8>
    271c:	ldr	w2, [x1, #16]
    2720:	add	w2, w2, #0x1
    2724:	str	w2, [x1, #16]
    2728:	b	1d70 <BZ2_decompress+0x1d70>
    272c:	ldr	w2, [x1, #16]
    2730:	add	w2, w2, #0x1
    2734:	str	w2, [x1, #16]
    2738:	b	1a08 <BZ2_decompress+0x1a08>
    273c:	ldr	w2, [x1, #16]
    2740:	add	w2, w2, #0x1
    2744:	str	w2, [x1, #16]
    2748:	b	199c <BZ2_decompress+0x199c>
    274c:	ldr	w2, [x1, #16]
    2750:	add	w2, w2, #0x1
    2754:	str	w2, [x1, #16]
    2758:	b	1930 <BZ2_decompress+0x1930>
    275c:	ldr	w2, [x1, #16]
    2760:	add	w2, w2, #0x1
    2764:	str	w2, [x1, #16]
    2768:	b	18c4 <BZ2_decompress+0x18c4>
    276c:	ldr	w1, [x0, #16]
    2770:	add	w1, w1, #0x1
    2774:	str	w1, [x0, #16]
    2778:	b	1ba4 <BZ2_decompress+0x1ba4>
    277c:	ldr	w2, [x1, #16]
    2780:	add	w2, w2, #0x1
    2784:	str	w2, [x1, #16]
    2788:	b	1858 <BZ2_decompress+0x1858>
    278c:	ldr	w2, [x0, #16]
    2790:	add	w2, w2, #0x1
    2794:	str	w2, [x0, #16]
    2798:	b	1f70 <BZ2_decompress+0x1f70>
    279c:	ldr	w2, [x1, #16]
    27a0:	add	w2, w2, #0x1
    27a4:	str	w2, [x1, #16]
    27a8:	b	17ec <BZ2_decompress+0x17ec>
    27ac:	ldr	w2, [x0, #16]
    27b0:	add	w2, w2, #0x1
    27b4:	str	w2, [x0, #16]
    27b8:	b	1f04 <BZ2_decompress+0x1f04>
    27bc:	ldr	w2, [x0, #16]
    27c0:	add	w2, w2, #0x1
    27c4:	str	w2, [x0, #16]
    27c8:	b	2010 <BZ2_decompress+0x2010>
    27cc:	ldr	w2, [x1, #16]
    27d0:	add	w2, w2, #0x1
    27d4:	str	w2, [x1, #16]
    27d8:	b	1780 <BZ2_decompress+0x1780>
    27dc:	ldr	w2, [x1, #16]
    27e0:	add	w2, w2, #0x1
    27e4:	str	w2, [x1, #16]
    27e8:	b	528 <BZ2_decompress+0x528>
    27ec:	ldr	w2, [x1, #16]
    27f0:	add	w2, w2, #0x1
    27f4:	str	w2, [x1, #16]
    27f8:	b	594 <BZ2_decompress+0x594>
    27fc:	ldr	w2, [x1, #16]
    2800:	add	w2, w2, #0x1
    2804:	str	w2, [x1, #16]
    2808:	b	1cec <BZ2_decompress+0x1cec>
    280c:	ldr	w2, [x0, #16]
    2810:	add	w2, w2, #0x1
    2814:	str	w2, [x0, #16]
    2818:	b	2214 <BZ2_decompress+0x2214>
    281c:	ldr	w2, [x0, #16]
    2820:	add	w2, w2, #0x1
    2824:	str	w2, [x0, #16]
    2828:	b	2284 <BZ2_decompress+0x2284>
    282c:	ldr	w2, [x0, #16]
    2830:	add	w2, w2, #0x1
    2834:	str	w2, [x0, #16]
    2838:	b	22f8 <BZ2_decompress+0x22f8>
    283c:	ldr	w2, [x1, #16]
    2840:	add	w2, w2, #0x1
    2844:	str	w2, [x1, #16]
    2848:	b	24b8 <BZ2_decompress+0x24b8>
    284c:	ldr	w1, [x14, #16]
    2850:	add	w1, w1, #0x1
    2854:	str	w1, [x14, #16]
    2858:	b	2368 <BZ2_decompress+0x2368>
    285c:	ldr	w2, [x1, #16]
    2860:	add	w2, w2, #0x1
    2864:	str	w2, [x1, #16]
    2868:	b	4bc <BZ2_decompress+0x4bc>
    286c:	ldr	w2, [x1, #16]
    2870:	add	w2, w2, #0x1
    2874:	str	w2, [x1, #16]
    2878:	b	370 <BZ2_decompress+0x370>
    287c:	ldr	w2, [x0, #16]
    2880:	add	w2, w2, #0x1
    2884:	str	w2, [x0, #16]
    2888:	b	21a4 <BZ2_decompress+0x21a4>
    288c:	ldr	w2, [x1, #16]
    2890:	add	w2, w2, #0x1
    2894:	str	w2, [x1, #16]
    2898:	b	450 <BZ2_decompress+0x450>
    289c:	ldr	w1, [x14, #16]
    28a0:	add	w1, w1, #0x1
    28a4:	str	w1, [x14, #16]
    28a8:	b	259c <BZ2_decompress+0x259c>
    28ac:	ldr	w2, [x1, #16]
    28b0:	add	w2, w2, #0x1
    28b4:	str	w2, [x1, #16]
    28b8:	b	620 <BZ2_decompress+0x620>
    28bc:	ldr	w2, [x0, #16]
    28c0:	add	w2, w2, #0x1
    28c4:	str	w2, [x0, #16]
    28c8:	b	2134 <BZ2_decompress+0x2134>
    28cc:	ldr	w2, [x1, #16]
    28d0:	add	w2, w2, #0x1
    28d4:	str	w2, [x1, #16]
    28d8:	b	3e4 <BZ2_decompress+0x3e4>
    28dc:	ldr	w1, [x14, #16]
    28e0:	add	w1, w1, #0x1
    28e4:	str	w1, [x14, #16]
    28e8:	b	2528 <BZ2_decompress+0x2528>
    28ec:	ldr	w2, [x1, #16]
    28f0:	add	w2, w2, #0x1
    28f4:	str	w2, [x1, #16]
    28f8:	b	69c <BZ2_decompress+0x69c>
    28fc:	ldr	w2, [x1, #16]
    2900:	add	w2, w2, #0x1
    2904:	str	w2, [x1, #16]
    2908:	b	1338 <BZ2_decompress+0x1338>
    290c:	ldr	w2, [x1, #16]
    2910:	add	w2, w2, #0x1
    2914:	str	w2, [x1, #16]
    2918:	b	1710 <BZ2_decompress+0x1710>
    291c:	ldr	w2, [x1, #16]
    2920:	add	w2, w2, #0x1
    2924:	str	w2, [x1, #16]
    2928:	b	2644 <BZ2_decompress+0x2644>
    292c:	ldr	w2, [x1, #16]
    2930:	add	w2, w2, #0x1
    2934:	str	w2, [x1, #16]
    2938:	b	20c4 <BZ2_decompress+0x20c4>
    293c:	ldr	w1, [x0, #16]
    2940:	add	w1, w1, #0x1
    2944:	str	w1, [x0, #16]
    2948:	b	13a8 <BZ2_decompress+0x13a8>
    294c:	ldr	w2, [x1, #16]
    2950:	add	w2, w2, #0x1
    2954:	str	w2, [x1, #16]
    2958:	b	12ac <BZ2_decompress+0x12ac>
    295c:	mov	x8, #0x0                   	// #0
    2960:	mov	x9, #0x0                   	// #0
    2964:	mov	w24, #0x0                   	// #0
    2968:	mov	w23, #0x0                   	// #0
    296c:	mov	w22, #0x0                   	// #0
    2970:	mov	w7, #0x0                   	// #0
    2974:	mov	w10, #0x0                   	// #0
    2978:	mov	w4, #0x0                   	// #0
    297c:	mov	w12, #0x0                   	// #0
    2980:	mov	w11, #0x0                   	// #0
    2984:	mov	w5, #0x0                   	// #0
    2988:	mov	w6, #0x0                   	// #0
    298c:	mov	w18, #0x0                   	// #0
    2990:	mov	w28, #0x0                   	// #0
    2994:	mov	w26, #0x0                   	// #0
    2998:	mov	w27, #0x0                   	// #0
    299c:	mov	w13, #0x0                   	// #0
    29a0:	mov	w25, #0x0                   	// #0
    29a4:	mov	w3, #0x0                   	// #0
    29a8:	mov	w0, #0x0                   	// #0
    29ac:	str	xzr, [sp, #104]
    29b0:	stp	wzr, wzr, [sp, #112]
    29b4:	stp	wzr, wzr, [sp, #120]
    29b8:	b	120 <BZ2_decompress+0x120>
    29bc:	ldr	w2, [x1, #16]
    29c0:	add	w2, w2, #0x1
    29c4:	str	w2, [x1, #16]
    29c8:	b	1c7c <BZ2_decompress+0x1c7c>
    29cc:	ldr	w2, [x1, #16]
    29d0:	add	w2, w2, #0x1
    29d4:	str	w2, [x1, #16]
    29d8:	b	1e8c <BZ2_decompress+0x1e8c>
    29dc:	ldr	w2, [x1, #16]
    29e0:	add	w2, w2, #0x1
    29e4:	str	w2, [x1, #16]
    29e8:	b	1684 <BZ2_decompress+0x1684>
    29ec:	ldr	w0, [x14, #16]
    29f0:	add	w0, w0, #0x1
    29f4:	str	w0, [x14, #16]
    29f8:	b	240 <BZ2_decompress+0x240>
    29fc:	mov	x8, #0x0                   	// #0
    2a00:	mov	x9, #0x0                   	// #0
    2a04:	mov	w24, #0x0                   	// #0
    2a08:	mov	w23, #0x0                   	// #0
    2a0c:	mov	w22, #0x0                   	// #0
    2a10:	mov	w7, #0x0                   	// #0
    2a14:	mov	w10, #0x0                   	// #0
    2a18:	mov	w4, #0x0                   	// #0
    2a1c:	mov	w12, #0x0                   	// #0
    2a20:	mov	w11, #0x0                   	// #0
    2a24:	mov	w5, #0x0                   	// #0
    2a28:	mov	w6, #0x0                   	// #0
    2a2c:	mov	w18, #0x0                   	// #0
    2a30:	mov	w28, #0x0                   	// #0
    2a34:	mov	w26, #0x0                   	// #0
    2a38:	mov	w27, #0x0                   	// #0
    2a3c:	mov	w13, #0x0                   	// #0
    2a40:	mov	w25, #0x0                   	// #0
    2a44:	mov	w3, #0x0                   	// #0
    2a48:	mov	w0, #0xfffffffb            	// #-5
    2a4c:	str	xzr, [sp, #104]
    2a50:	stp	wzr, wzr, [sp, #112]
    2a54:	stp	wzr, wzr, [sp, #120]
    2a58:	b	120 <BZ2_decompress+0x120>
    2a5c:	mov	w28, #0x0                   	// #0
    2a60:	mov	w0, #0xfffffffc            	// #-4
    2a64:	b	120 <BZ2_decompress+0x120>
    2a68:	str	w0, [x19, #40]
    2a6c:	mov	w0, #0xfffffffb            	// #-5
    2a70:	b	120 <BZ2_decompress+0x120>
    2a74:	ldr	w0, [x8, x1, lsl #2]
    2a78:	sub	w0, w23, w0
    2a7c:	cmp	w0, #0x101
    2a80:	b.hi	1d98 <BZ2_decompress+0x1d98>  // b.pmore
    2a84:	ldr	x1, [sp, #104]
    2a88:	ldr	w11, [x1, w0, sxtw #2]
    2a8c:	cmp	w11, #0x1
    2a90:	b.ls	3288 <BZ2_decompress+0x3288>  // b.plast
    2a94:	ldrsw	x1, [x19, #7820]
    2a98:	add	w0, w10, #0x1
    2a9c:	cmp	w0, #0x0
    2aa0:	add	x1, x19, x1
    2aa4:	ldrb	w1, [x1, #3724]
    2aa8:	add	x1, x19, x1
    2aac:	ldrb	w14, [x1, #3468]
    2ab0:	add	x2, x19, w14, uxtb #2
    2ab4:	ldr	w1, [x2, #68]
    2ab8:	add	w1, w1, w0
    2abc:	str	w1, [x2, #68]
    2ac0:	ldrb	w1, [x19, #44]
    2ac4:	cbnz	w1, 2d00 <BZ2_decompress+0x2d00>
    2ac8:	b.le	3280 <BZ2_decompress+0x3280>
    2acc:	cmp	w12, w4
    2ad0:	b.le	32a0 <BZ2_decompress+0x32a0>
    2ad4:	ldr	x15, [x19, #3152]
    2ad8:	add	w1, w4, #0x1
    2adc:	mov	w2, #0x1                   	// #1
    2ae0:	add	w4, w10, w4
    2ae4:	sub	w2, w2, w12
    2ae8:	mov	w10, w0
    2aec:	sxtw	x1, w1
    2af0:	add	w2, w2, w4
    2af4:	sub	x0, x15, #0x4
    2af8:	str	w14, [x0, x1, lsl #2]
    2afc:	subs	w10, w10, #0x1
    2b00:	mov	w4, w1
    2b04:	b.eq	13e4 <BZ2_decompress+0x13e4>  // b.none
    2b08:	add	x1, x1, #0x1
    2b0c:	cmp	w10, w2
    2b10:	b.ne	2af8 <BZ2_decompress+0x2af8>  // b.any
    2b14:	mov	w0, #0xfffffffc            	// #-4
    2b18:	b	120 <BZ2_decompress+0x120>
    2b1c:	ldr	w1, [x8, x1, lsl #2]
    2b20:	mov	w0, #0xfffffffc            	// #-4
    2b24:	sub	w1, w23, w1
    2b28:	cmp	w1, #0x101
    2b2c:	b.hi	120 <BZ2_decompress+0x120>  // b.pmore
    2b30:	ldr	x0, [sp, #104]
    2b34:	ldr	w11, [x0, w1, sxtw #2]
    2b38:	b	13e4 <BZ2_decompress+0x13e4>
    2b3c:	mov	w7, #0x0                   	// #0
    2b40:	mov	w5, #0x0                   	// #0
    2b44:	mov	w20, #0x20                  	// #32
    2b48:	b	bdc <BZ2_decompress+0xbdc>
    2b4c:	ldr	w0, [x19, #56]
    2b50:	cmp	w0, #0x0
    2b54:	ccmp	w0, w4, #0x0, ge  // ge = tcont
    2b58:	b.ge	1d98 <BZ2_decompress+0x1d98>  // b.tcont
    2b5c:	add	x1, x19, #0x44
    2b60:	mov	x0, #0x0                   	// #0
    2b64:	b	2b74 <BZ2_decompress+0x2b74>
    2b68:	add	x0, x0, #0x1
    2b6c:	cmp	x0, #0x100
    2b70:	b.eq	32b8 <BZ2_decompress+0x32b8>  // b.none
    2b74:	ldr	w2, [x1, x0, lsl #2]
    2b78:	mov	w3, w0
    2b7c:	cmp	w2, #0x0
    2b80:	ccmp	w2, w4, #0x0, ge  // ge = tcont
    2b84:	b.le	2b68 <BZ2_decompress+0x2b68>
    2b88:	mov	w0, #0xfffffffc            	// #-4
    2b8c:	b	120 <BZ2_decompress+0x120>
    2b90:	mov	w1, #0x4651                	// #18001
    2b94:	cmp	w30, w1
    2b98:	b.gt	2ba4 <BZ2_decompress+0x2ba4>
    2b9c:	ldr	x1, [sp, #128]
    2ba0:	strb	w25, [x1, x30]
    2ba4:	add	x30, x30, #0x1
    2ba8:	cmp	w28, w30
    2bac:	b.gt	3364 <BZ2_decompress+0x3364>
    2bb0:	mov	w14, #0x4652                	// #18002
    2bb4:	cmp	w28, w14
    2bb8:	csel	w14, w28, w14, le
    2bbc:	add	x15, sp, #0xf8
    2bc0:	cmp	w26, #0x0
    2bc4:	mov	w0, #0x0                   	// #0
    2bc8:	mov	w1, #0x0                   	// #0
    2bcc:	b.le	2be8 <BZ2_decompress+0x2be8>
    2bd0:	strb	w0, [x15, w1, sxtw]
    2bd4:	add	w0, w0, #0x1
    2bd8:	and	w0, w0, #0xff
    2bdc:	cmp	w0, w26
    2be0:	mov	w1, w0
    2be4:	b.lt	2bd0 <BZ2_decompress+0x2bd0>  // b.tstop
    2be8:	cmp	w28, #0x0
    2bec:	mov	w3, #0x0                   	// #0
    2bf0:	b.le	2cdc <BZ2_decompress+0x2cdc>
    2bf4:	add	x15, sp, #0xf8
    2bf8:	mov	x17, #0x1ecc                	// #7884
    2bfc:	add	x3, x19, x17
    2c00:	str	w22, [sp, #184]
    2c04:	mov	x22, x3
    2c08:	str	w23, [sp, #192]
    2c0c:	mov	w23, w18
    2c10:	str	w24, [sp, #200]
    2c14:	mov	w24, w6
    2c18:	stp	x19, x20, [sp, #208]
    2c1c:	mov	x20, x15
    2c20:	str	x21, [sp, #224]
    2c24:	mov	w21, w14
    2c28:	mov	x16, #0x651e                	// #25886
    2c2c:	mov	x28, #0x0                   	// #0
    2c30:	add	x0, x19, x16
    2c34:	str	x0, [sp, #176]
    2c38:	ldr	x0, [sp, #176]
    2c3c:	ldrb	w0, [x0, x28]
    2c40:	ldrb	w19, [x20, w0, sxtw]
    2c44:	cbz	w0, 2ce8 <BZ2_decompress+0x2ce8>
    2c48:	and	x16, x0, #0xff
    2c4c:	sub	w0, w0, #0x1
    2c50:	sub	x1, x16, #0x1
    2c54:	and	x2, x0, #0xff
    2c58:	sub	x1, x1, w0, uxtb
    2c5c:	sub	x0, x16, w0, uxtb
    2c60:	add	x1, x20, x1
    2c64:	add	x0, x20, x0
    2c68:	add	x2, x2, #0x1
    2c6c:	str	w5, [sp, #128]
    2c70:	str	w11, [sp, #136]
    2c74:	str	w12, [sp, #144]
    2c78:	stp	w4, w10, [sp, #152]
    2c7c:	stp	x9, x8, [sp, #160]
    2c80:	str	w7, [sp, #232]
    2c84:	bl	0 <memmove>
    2c88:	strb	w19, [x22, x28]
    2c8c:	add	x28, x28, #0x1
    2c90:	strb	w19, [sp, #248]
    2c94:	cmp	w21, w28
    2c98:	ldr	w5, [sp, #128]
    2c9c:	ldr	w11, [sp, #136]
    2ca0:	ldr	w12, [sp, #144]
    2ca4:	ldp	w4, w10, [sp, #152]
    2ca8:	ldr	w7, [sp, #232]
    2cac:	ldp	x9, x8, [sp, #160]
    2cb0:	b.gt	2c38 <BZ2_decompress+0x2c38>
    2cb4:	ldp	x19, x20, [sp, #208]
    2cb8:	cmp	w21, #0x0
    2cbc:	mov	w18, w23
    2cc0:	mov	w6, w24
    2cc4:	mov	w14, w21
    2cc8:	csinc	w3, w21, wzr, gt
    2ccc:	ldr	w22, [sp, #184]
    2cd0:	ldr	w23, [sp, #192]
    2cd4:	ldr	w24, [sp, #200]
    2cd8:	ldr	x21, [sp, #224]
    2cdc:	mov	w28, w14
    2ce0:	mov	w13, #0x0                   	// #0
    2ce4:	b	6e0 <BZ2_decompress+0x6e0>
    2ce8:	strb	w19, [x22, x28]
    2cec:	add	x28, x28, #0x1
    2cf0:	strb	w19, [sp, #248]
    2cf4:	cmp	w21, w28
    2cf8:	b.gt	2c38 <BZ2_decompress+0x2c38>
    2cfc:	b	2cb4 <BZ2_decompress+0x2cb4>
    2d00:	b.le	3280 <BZ2_decompress+0x3280>
    2d04:	cmp	w12, w4
    2d08:	b.le	32a0 <BZ2_decompress+0x32a0>
    2d0c:	ldr	x15, [x19, #3160]
    2d10:	add	w1, w4, #0x1
    2d14:	mov	w2, #0x1                   	// #1
    2d18:	add	w4, w4, w10
    2d1c:	sub	w2, w2, w12
    2d20:	sxtw	x1, w1
    2d24:	and	w14, w14, #0xffff
    2d28:	mov	w10, w0
    2d2c:	add	w2, w2, w4
    2d30:	sub	x15, x15, #0x2
    2d34:	strh	w14, [x15, x1, lsl #1]
    2d38:	subs	w10, w10, #0x1
    2d3c:	mov	w4, w1
    2d40:	b.eq	13e4 <BZ2_decompress+0x13e4>  // b.none
    2d44:	add	x1, x1, #0x1
    2d48:	cmp	w2, w10
    2d4c:	b.ne	2d34 <BZ2_decompress+0x2d34>  // b.any
    2d50:	mov	w0, #0xfffffffc            	// #-4
    2d54:	b	120 <BZ2_decompress+0x120>
    2d58:	mov	w4, #0x0                   	// #0
    2d5c:	mov	w5, #0x0                   	// #0
    2d60:	mov	w6, #0x0                   	// #0
    2d64:	mov	w3, #0x100                 	// #256
    2d68:	mov	w0, #0xfffffffc            	// #-4
    2d6c:	b	120 <BZ2_decompress+0x120>
    2d70:	mov	w13, #0x0                   	// #0
    2d74:	b	ea8 <BZ2_decompress+0xea8>
    2d78:	ldr	x0, [x19, #3152]
    2d7c:	str	w2, [x0, w4, sxtw #2]
    2d80:	b	15b8 <BZ2_decompress+0x15b8>
    2d84:	lsr	w0, w14, #4
    2d88:	and	w2, w14, #0xf
    2d8c:	lsr	w14, w14, #4
    2d90:	add	x0, x19, x0, lsl #2
    2d94:	str	x0, [sp, #136]
    2d98:	ldr	w15, [x0, #7820]
    2d9c:	add	w0, w15, w2
    2da0:	cmp	w15, w0
    2da4:	add	x1, x19, w0, sxtw
    2da8:	sxtw	x0, w0
    2dac:	ldrb	w1, [x1, #3724]
    2db0:	str	w1, [sp, #128]
    2db4:	b.ge	2e34 <BZ2_decompress+0x2e34>  // b.tcont
    2db8:	sub	w2, w2, #0x1
    2dbc:	add	x1, x0, #0xe8b
    2dc0:	add	x0, x0, #0xe8c
    2dc4:	sub	x1, x1, x2
    2dc8:	sub	x0, x0, x2
    2dcc:	add	x1, x19, x1
    2dd0:	add	x0, x19, x0
    2dd4:	add	x2, x2, #0x1
    2dd8:	str	w15, [sp, #144]
    2ddc:	stp	w3, w13, [sp, #152]
    2de0:	str	w6, [sp, #160]
    2de4:	str	w5, [sp, #168]
    2de8:	str	w11, [sp, #176]
    2dec:	str	w12, [sp, #184]
    2df0:	str	w4, [sp, #192]
    2df4:	str	w10, [sp, #200]
    2df8:	str	w7, [sp, #208]
    2dfc:	stp	x9, x8, [sp, #216]
    2e00:	stp	w18, w14, [sp, #232]
    2e04:	bl	0 <memmove>
    2e08:	ldp	x9, x8, [sp, #216]
    2e0c:	ldr	w15, [sp, #144]
    2e10:	ldp	w3, w13, [sp, #152]
    2e14:	ldr	w6, [sp, #160]
    2e18:	ldr	w5, [sp, #168]
    2e1c:	ldr	w11, [sp, #176]
    2e20:	ldr	w12, [sp, #184]
    2e24:	ldr	w4, [sp, #192]
    2e28:	ldr	w10, [sp, #200]
    2e2c:	ldr	w7, [sp, #208]
    2e30:	ldp	w18, w14, [sp, #232]
    2e34:	subs	w2, w14, #0x1
    2e38:	ldr	x1, [sp, #136]
    2e3c:	ldr	w0, [x1, #7816]
    2e40:	str	w15, [x1, #7820]
    2e44:	add	x15, x19, w15, sxtw
    2e48:	add	w0, w0, #0xf
    2e4c:	add	x0, x19, w0, sxtw
    2e50:	ldrb	w0, [x0, #3724]
    2e54:	strb	w0, [x15, #3724]
    2e58:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2e5c:	add	x2, x19, w2, sxtw #2
    2e60:	subs	w15, w14, #0x2
    2e64:	ldr	w1, [x2, #7816]
    2e68:	ldr	w0, [x2, #7820]
    2e6c:	add	w1, w1, #0xf
    2e70:	sub	w0, w0, #0x1
    2e74:	str	w0, [x2, #7820]
    2e78:	add	x1, x19, w1, sxtw
    2e7c:	add	x0, x19, w0, sxtw
    2e80:	ldrb	w1, [x1, #3724]
    2e84:	strb	w1, [x0, #3724]
    2e88:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2e8c:	add	x15, x19, w15, sxtw #2
    2e90:	subs	w2, w14, #0x3
    2e94:	ldr	w1, [x15, #7816]
    2e98:	ldr	w0, [x15, #7820]
    2e9c:	add	w1, w1, #0xf
    2ea0:	sub	w0, w0, #0x1
    2ea4:	str	w0, [x15, #7820]
    2ea8:	add	x1, x19, w1, sxtw
    2eac:	add	x0, x19, w0, sxtw
    2eb0:	ldrb	w1, [x1, #3724]
    2eb4:	strb	w1, [x0, #3724]
    2eb8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2ebc:	add	x2, x19, w2, sxtw #2
    2ec0:	subs	w15, w14, #0x4
    2ec4:	ldr	w1, [x2, #7816]
    2ec8:	ldr	w0, [x2, #7820]
    2ecc:	add	w1, w1, #0xf
    2ed0:	sub	w0, w0, #0x1
    2ed4:	str	w0, [x2, #7820]
    2ed8:	add	x1, x19, w1, sxtw
    2edc:	add	x0, x19, w0, sxtw
    2ee0:	ldrb	w1, [x1, #3724]
    2ee4:	strb	w1, [x0, #3724]
    2ee8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2eec:	add	x15, x19, w15, sxtw #2
    2ef0:	subs	w2, w14, #0x5
    2ef4:	ldr	w1, [x15, #7816]
    2ef8:	ldr	w0, [x15, #7820]
    2efc:	add	w1, w1, #0xf
    2f00:	sub	w0, w0, #0x1
    2f04:	str	w0, [x15, #7820]
    2f08:	add	x1, x19, w1, sxtw
    2f0c:	add	x0, x19, w0, sxtw
    2f10:	ldrb	w1, [x1, #3724]
    2f14:	strb	w1, [x0, #3724]
    2f18:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2f1c:	add	x2, x19, w2, sxtw #2
    2f20:	subs	w15, w14, #0x6
    2f24:	ldr	w1, [x2, #7816]
    2f28:	ldr	w0, [x2, #7820]
    2f2c:	add	w1, w1, #0xf
    2f30:	sub	w0, w0, #0x1
    2f34:	str	w0, [x2, #7820]
    2f38:	add	x1, x19, w1, sxtw
    2f3c:	add	x0, x19, w0, sxtw
    2f40:	ldrb	w1, [x1, #3724]
    2f44:	strb	w1, [x0, #3724]
    2f48:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2f4c:	add	x15, x19, w15, sxtw #2
    2f50:	subs	w2, w14, #0x7
    2f54:	ldr	w1, [x15, #7816]
    2f58:	ldr	w0, [x15, #7820]
    2f5c:	add	w1, w1, #0xf
    2f60:	sub	w0, w0, #0x1
    2f64:	str	w0, [x15, #7820]
    2f68:	add	x1, x19, w1, sxtw
    2f6c:	add	x0, x19, w0, sxtw
    2f70:	ldrb	w1, [x1, #3724]
    2f74:	strb	w1, [x0, #3724]
    2f78:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2f7c:	add	x2, x19, w2, sxtw #2
    2f80:	subs	w15, w14, #0x8
    2f84:	ldr	w1, [x2, #7816]
    2f88:	ldr	w0, [x2, #7820]
    2f8c:	add	w1, w1, #0xf
    2f90:	sub	w0, w0, #0x1
    2f94:	str	w0, [x2, #7820]
    2f98:	add	x1, x19, w1, sxtw
    2f9c:	add	x0, x19, w0, sxtw
    2fa0:	ldrb	w1, [x1, #3724]
    2fa4:	strb	w1, [x0, #3724]
    2fa8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2fac:	add	x15, x19, w15, sxtw #2
    2fb0:	subs	w2, w14, #0x9
    2fb4:	ldr	w1, [x15, #7816]
    2fb8:	ldr	w0, [x15, #7820]
    2fbc:	add	w1, w1, #0xf
    2fc0:	sub	w0, w0, #0x1
    2fc4:	str	w0, [x15, #7820]
    2fc8:	add	x1, x19, w1, sxtw
    2fcc:	add	x0, x19, w0, sxtw
    2fd0:	ldrb	w1, [x1, #3724]
    2fd4:	strb	w1, [x0, #3724]
    2fd8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    2fdc:	add	x2, x19, w2, sxtw #2
    2fe0:	subs	w15, w14, #0xa
    2fe4:	ldr	w1, [x2, #7816]
    2fe8:	ldr	w0, [x2, #7820]
    2fec:	add	w1, w1, #0xf
    2ff0:	sub	w0, w0, #0x1
    2ff4:	str	w0, [x2, #7820]
    2ff8:	add	x1, x19, w1, sxtw
    2ffc:	add	x0, x19, w0, sxtw
    3000:	ldrb	w1, [x1, #3724]
    3004:	strb	w1, [x0, #3724]
    3008:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    300c:	add	x15, x19, w15, sxtw #2
    3010:	subs	w2, w14, #0xb
    3014:	ldr	w1, [x15, #7816]
    3018:	ldr	w0, [x15, #7820]
    301c:	add	w1, w1, #0xf
    3020:	sub	w0, w0, #0x1
    3024:	str	w0, [x15, #7820]
    3028:	add	x1, x19, w1, sxtw
    302c:	add	x0, x19, w0, sxtw
    3030:	ldrb	w1, [x1, #3724]
    3034:	strb	w1, [x0, #3724]
    3038:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    303c:	add	x2, x19, w2, sxtw #2
    3040:	subs	w15, w14, #0xc
    3044:	ldr	w1, [x2, #7816]
    3048:	ldr	w0, [x2, #7820]
    304c:	add	w1, w1, #0xf
    3050:	sub	w0, w0, #0x1
    3054:	str	w0, [x2, #7820]
    3058:	add	x1, x19, w1, sxtw
    305c:	add	x0, x19, w0, sxtw
    3060:	ldrb	w1, [x1, #3724]
    3064:	strb	w1, [x0, #3724]
    3068:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    306c:	add	x15, x19, w15, sxtw #2
    3070:	subs	w2, w14, #0xd
    3074:	ldr	w1, [x15, #7816]
    3078:	ldr	w0, [x15, #7820]
    307c:	add	w1, w1, #0xf
    3080:	sub	w0, w0, #0x1
    3084:	str	w0, [x15, #7820]
    3088:	add	x1, x19, w1, sxtw
    308c:	add	x0, x19, w0, sxtw
    3090:	ldrb	w1, [x1, #3724]
    3094:	strb	w1, [x0, #3724]
    3098:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    309c:	add	x2, x19, w2, sxtw #2
    30a0:	subs	w15, w14, #0xe
    30a4:	ldr	w1, [x2, #7816]
    30a8:	ldr	w0, [x2, #7820]
    30ac:	add	w1, w1, #0xf
    30b0:	sub	w0, w0, #0x1
    30b4:	str	w0, [x2, #7820]
    30b8:	add	x1, x19, w1, sxtw
    30bc:	add	x0, x19, w0, sxtw
    30c0:	ldrb	w1, [x1, #3724]
    30c4:	strb	w1, [x0, #3724]
    30c8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    30cc:	add	x15, x19, w15, sxtw #2
    30d0:	subs	w2, w14, #0xf
    30d4:	ldr	w1, [x15, #7816]
    30d8:	ldr	w0, [x15, #7820]
    30dc:	add	w1, w1, #0xf
    30e0:	sub	w0, w0, #0x1
    30e4:	str	w0, [x15, #7820]
    30e8:	add	x1, x19, w1, sxtw
    30ec:	add	x0, x19, w0, sxtw
    30f0:	ldrb	w1, [x1, #3724]
    30f4:	strb	w1, [x0, #3724]
    30f8:	b.eq	3124 <BZ2_decompress+0x3124>  // b.none
    30fc:	add	x2, x19, w2, sxtw #2
    3100:	ldr	w1, [x2, #7816]
    3104:	ldr	w0, [x2, #7820]
    3108:	add	w1, w1, #0xf
    310c:	sub	w0, w0, #0x1
    3110:	str	w0, [x2, #7820]
    3114:	add	x1, x19, w1, sxtw
    3118:	add	x0, x19, w0, sxtw
    311c:	ldrb	w1, [x1, #3724]
    3120:	strb	w1, [x0, #3724]
    3124:	ldr	w0, [x19, #7820]
    3128:	ldrb	w2, [sp, #128]
    312c:	sub	w0, w0, #0x1
    3130:	str	w0, [x19, #7820]
    3134:	add	x1, x19, w0, sxtw
    3138:	strb	w2, [x1, #3724]
    313c:	cbnz	w0, 1588 <BZ2_decompress+0x1588>
    3140:	mov	x17, #0x1e7c                	// #7804
    3144:	add	x0, x19, x17
    3148:	mov	x1, #0x1ec8                	// #7880
    314c:	mov	w30, #0xff0                 	// #4080
    3150:	sub	w30, w30, w0
    3154:	add	x17, x19, x1
    3158:	mov	x2, #0x1e88                	// #7816
    315c:	add	x1, x19, x2
    3160:	str	x1, [sp, #136]
    3164:	ldr	w1, [x17]
    3168:	add	w2, w30, w0
    316c:	sub	x0, x0, #0x10
    3170:	add	w16, w1, #0xf
    3174:	add	w15, w1, #0xe
    3178:	add	w14, w1, #0xd
    317c:	add	x16, x19, w16, sxtw
    3180:	add	x15, x19, w15, sxtw
    3184:	add	x14, x19, w14, sxtw
    3188:	ldrb	w16, [x16, #3724]
    318c:	strb	w16, [x0, #31]
    3190:	add	w16, w1, #0xc
    3194:	ldrb	w15, [x15, #3724]
    3198:	add	x16, x19, w16, sxtw
    319c:	strb	w15, [x0, #30]
    31a0:	add	w15, w1, #0xb
    31a4:	ldrb	w14, [x14, #3724]
    31a8:	add	x15, x19, w15, sxtw
    31ac:	strb	w14, [x0, #29]
    31b0:	add	w14, w1, #0xa
    31b4:	ldrb	w16, [x16, #3724]
    31b8:	add	x14, x19, w14, sxtw
    31bc:	strb	w16, [x0, #28]
    31c0:	add	w16, w1, #0x9
    31c4:	ldrb	w15, [x15, #3724]
    31c8:	add	x16, x19, w16, sxtw
    31cc:	strb	w15, [x0, #27]
    31d0:	add	w15, w1, #0x8
    31d4:	ldrb	w14, [x14, #3724]
    31d8:	add	x15, x19, w15, sxtw
    31dc:	strb	w14, [x0, #26]
    31e0:	add	w14, w1, #0x7
    31e4:	ldrb	w16, [x16, #3724]
    31e8:	add	x14, x19, w14, sxtw
    31ec:	strb	w16, [x0, #25]
    31f0:	add	w16, w1, #0x6
    31f4:	ldrb	w15, [x15, #3724]
    31f8:	add	x16, x19, w16, sxtw
    31fc:	strb	w15, [x0, #24]
    3200:	add	w15, w1, #0x5
    3204:	ldrb	w14, [x14, #3724]
    3208:	add	x15, x19, w15, sxtw
    320c:	strb	w14, [x0, #23]
    3210:	add	w14, w1, #0x4
    3214:	ldrb	w16, [x16, #3724]
    3218:	add	x14, x19, w14, sxtw
    321c:	strb	w16, [x0, #22]
    3220:	add	w16, w1, #0x3
    3224:	ldrb	w15, [x15, #3724]
    3228:	add	x16, x19, w16, sxtw
    322c:	strb	w15, [x0, #21]
    3230:	add	w15, w1, #0x2
    3234:	ldrb	w14, [x14, #3724]
    3238:	add	x15, x19, w15, sxtw
    323c:	strb	w14, [x0, #20]
    3240:	add	w14, w1, #0x1
    3244:	add	x1, x19, w1, sxtw
    3248:	ldrb	w16, [x16, #3724]
    324c:	add	x14, x19, w14, sxtw
    3250:	strb	w16, [x0, #19]
    3254:	ldrb	w15, [x15, #3724]
    3258:	strb	w15, [x0, #18]
    325c:	ldrb	w14, [x14, #3724]
    3260:	strb	w14, [x0, #17]
    3264:	ldrb	w1, [x1, #3724]
    3268:	strb	w1, [x0, #16]
    326c:	ldr	x1, [sp, #136]
    3270:	str	w2, [x17], #-4
    3274:	cmp	x1, x17
    3278:	b.ne	3164 <BZ2_decompress+0x3164>  // b.any
    327c:	b	1588 <BZ2_decompress+0x1588>
    3280:	mov	w10, w0
    3284:	b	13e4 <BZ2_decompress+0x13e4>
    3288:	ldr	w1, [sp, #116]
    328c:	mov	w0, #0x1fffff              	// #2097151
    3290:	cmp	w1, w0
    3294:	mov	w0, #0xfffffffc            	// #-4
    3298:	b.gt	120 <BZ2_decompress+0x120>
    329c:	b	1dac <BZ2_decompress+0x1dac>
    32a0:	mov	w10, w0
    32a4:	mov	w0, #0xfffffffc            	// #-4
    32a8:	b	120 <BZ2_decompress+0x120>
    32ac:	mov	w0, #0xfffffffc            	// #-4
    32b0:	str	w2, [sp, #116]
    32b4:	b	120 <BZ2_decompress+0x120>
    32b8:	str	wzr, [x19, #1096]
    32bc:	add	x0, x19, #0x44c
    32c0:	mov	x2, #0x400                 	// #1024
    32c4:	stp	x8, x9, [sp, #136]
    32c8:	stp	w7, w10, [sp, #152]
    32cc:	str	w12, [sp, #160]
    32d0:	str	w11, [sp, #168]
    32d4:	str	w5, [sp, #176]
    32d8:	str	w6, [sp, #184]
    32dc:	str	w18, [sp, #192]
    32e0:	str	w13, [sp, #200]
    32e4:	str	w4, [sp, #232]
    32e8:	bl	0 <memcpy>
    32ec:	ldp	x8, x9, [sp, #136]
    32f0:	add	x3, x19, #0x84c
    32f4:	ldr	w1, [x19, #1096]
    32f8:	ldp	w7, w10, [sp, #152]
    32fc:	str	x3, [sp, #128]
    3300:	ldr	w12, [sp, #160]
    3304:	ldr	w11, [sp, #168]
    3308:	ldr	w5, [sp, #176]
    330c:	ldr	w6, [sp, #184]
    3310:	ldr	w18, [sp, #192]
    3314:	ldr	w13, [sp, #200]
    3318:	ldr	w4, [sp, #232]
    331c:	ldr	w2, [x0]
    3320:	add	w1, w1, w2
    3324:	str	w1, [x0], #4
    3328:	cmp	x3, x0
    332c:	b.ne	331c <BZ2_decompress+0x331c>  // b.any
    3330:	add	x14, x19, #0x448
    3334:	mov	x0, #0x0                   	// #0
    3338:	b	3348 <BZ2_decompress+0x3348>
    333c:	add	x0, x0, #0x1
    3340:	cmp	x0, #0x101
    3344:	b.eq	336c <BZ2_decompress+0x336c>  // b.none
    3348:	ldr	w1, [x14, x0, lsl #2]
    334c:	mov	w3, w0
    3350:	cmp	w1, #0x0
    3354:	ccmp	w1, w4, #0x0, ge  // ge = tcont
    3358:	b.le	333c <BZ2_decompress+0x333c>
    335c:	mov	w0, #0xfffffffc            	// #-4
    3360:	b	120 <BZ2_decompress+0x120>
    3364:	mov	w25, #0x0                   	// #0
    3368:	b	1d24 <BZ2_decompress+0x1d24>
    336c:	mov	x15, x14
    3370:	mov	x0, x14
    3374:	mov	w3, #0x1                   	// #1
    3378:	b	338c <BZ2_decompress+0x338c>
    337c:	add	w3, w3, #0x1
    3380:	add	x0, x0, #0x4
    3384:	cmp	w3, #0x101
    3388:	b.eq	33a0 <BZ2_decompress+0x33a0>  // b.none
    338c:	ldp	w2, w1, [x0]
    3390:	cmp	w2, w1
    3394:	b.le	337c <BZ2_decompress+0x337c>
    3398:	mov	w0, #0xfffffffc            	// #-4
    339c:	b	120 <BZ2_decompress+0x120>
    33a0:	mov	w0, #0xffffffff            	// #-1
    33a4:	mov	w1, #0x2                   	// #2
    33a8:	str	w1, [x19, #8]
    33ac:	strb	wzr, [x19, #12]
    33b0:	str	wzr, [x19, #16]
    33b4:	str	w0, [x19, #3184]
    33b8:	ldr	w0, [x19, #52]
    33bc:	cmp	w0, #0x1
    33c0:	b.le	3430 <BZ2_decompress+0x3430>
    33c4:	adrp	x1, 0 <stderr>
    33c8:	adrp	x0, 0 <BZ2_decompress>
    33cc:	mov	x2, #0x6                   	// #6
    33d0:	add	x0, x0, #0x0
    33d4:	ldr	x3, [x1]
    33d8:	mov	x1, #0x1                   	// #1
    33dc:	str	w13, [sp, #136]
    33e0:	str	w18, [sp, #144]
    33e4:	stp	w6, w5, [sp, #152]
    33e8:	str	w12, [sp, #160]
    33ec:	str	w4, [sp, #168]
    33f0:	str	w10, [sp, #176]
    33f4:	str	w7, [sp, #184]
    33f8:	stp	x9, x8, [sp, #192]
    33fc:	stp	x15, x14, [sp, #208]
    3400:	str	w11, [sp, #232]
    3404:	bl	0 <fwrite>
    3408:	ldp	x9, x8, [sp, #192]
    340c:	ldp	x15, x14, [sp, #208]
    3410:	ldr	w13, [sp, #136]
    3414:	ldr	w18, [sp, #144]
    3418:	ldp	w6, w5, [sp, #152]
    341c:	ldr	w12, [sp, #160]
    3420:	ldr	w4, [sp, #168]
    3424:	ldr	w10, [sp, #176]
    3428:	ldr	w7, [sp, #184]
    342c:	ldr	w11, [sp, #232]
    3430:	ldrb	w0, [x19, #44]
    3434:	cbnz	w0, 34f8 <BZ2_decompress+0x34f8>
    3438:	ldr	x2, [x19, #3152]
    343c:	mov	x0, #0x0                   	// #0
    3440:	ldr	w1, [x2, x0, lsl #2]
    3444:	add	x1, x19, w1, uxtb #2
    3448:	ldrsw	x3, [x1, #1096]
    344c:	lsl	x3, x3, #2
    3450:	ldr	w14, [x2, x3]
    3454:	orr	w14, w14, w0, lsl #8
    3458:	str	w14, [x2, x3]
    345c:	add	x0, x0, #0x1
    3460:	ldr	w3, [x1, #1096]
    3464:	cmp	w4, w0
    3468:	add	w3, w3, #0x1
    346c:	str	w3, [x1, #1096]
    3470:	b.gt	3440 <BZ2_decompress+0x3440>
    3474:	ldrsw	x0, [x19, #56]
    3478:	mov	w16, #0x86a0                	// #34464
    347c:	ldr	w1, [x19, #40]
    3480:	movk	w16, #0x1, lsl #16
    3484:	ldrb	w15, [x19, #20]
    3488:	cmp	w4, #0x0
    348c:	mov	w14, #0x1                   	// #1
    3490:	csel	w3, w4, w14, gt
    3494:	ldr	w0, [x2, x0, lsl #2]
    3498:	str	wzr, [x19, #1092]
    349c:	mul	w1, w1, w16
    34a0:	lsr	w0, w0, #8
    34a4:	str	w0, [x19, #60]
    34a8:	cbz	w15, 3588 <BZ2_decompress+0x3588>
    34ac:	str	xzr, [x19, #24]
    34b0:	cmp	w0, w1
    34b4:	b.cs	3580 <BZ2_decompress+0x3580>  // b.hs, b.nlast
    34b8:	ubfiz	x0, x0, #2, #24
    34bc:	adrp	x1, 0 <BZ2_rNums>
    34c0:	ldr	w15, [x1]
    34c4:	ldr	w1, [x2, x0]
    34c8:	mov	w0, #0x0                   	// #0
    34cc:	sub	w2, w15, #0x1
    34d0:	stp	w2, w14, [x19, #24]
    34d4:	cmp	w2, w14
    34d8:	and	w2, w1, #0xff
    34dc:	lsr	w1, w1, #8
    34e0:	str	w1, [x19, #60]
    34e4:	cset	w1, eq  // eq = none
    34e8:	str	w14, [x19, #1092]
    34ec:	eor	w1, w2, w1
    34f0:	str	w1, [x19, #64]
    34f4:	b	120 <BZ2_decompress+0x120>
    34f8:	ldr	w0, [x15]
    34fc:	add	x15, x15, #0x4
    3500:	str	w0, [x15, #1024]
    3504:	ldr	x0, [sp, #128]
    3508:	cmp	x0, x15
    350c:	b.ne	34f8 <BZ2_decompress+0x34f8>  // b.any
    3510:	mov	x2, #0x0                   	// #0
    3514:	b	3540 <BZ2_decompress+0x3540>
    3518:	ldrb	w15, [x16, x0]
    351c:	and	w15, w15, #0xfffffff0
    3520:	orr	w1, w15, w1, asr #16
    3524:	strb	w1, [x16, x0]
    3528:	ldr	w0, [x3, #2124]
    352c:	add	x2, x2, #0x1
    3530:	cmp	w4, w2
    3534:	add	w0, w0, #0x1
    3538:	str	w0, [x3, #2124]
    353c:	b.le	35b0 <BZ2_decompress+0x35b0>
    3540:	ldr	x16, [x19, #3160]
    3544:	lsl	x15, x2, #1
    3548:	asr	w0, w2, #1
    354c:	ldrb	w3, [x16, x15]
    3550:	sxtw	x0, w0
    3554:	add	x3, x19, x3, lsl #2
    3558:	ldr	w1, [x3, #2124]
    355c:	strh	w1, [x16, x15]
    3560:	ldr	x16, [x19, #3168]
    3564:	tbz	w2, #0, 3518 <BZ2_decompress+0x3518>
    3568:	ldrb	w15, [x16, x0]
    356c:	asr	w1, w1, #16
    3570:	and	w15, w15, #0xf
    3574:	orr	w1, w15, w1, lsl #4
    3578:	strb	w1, [x16, x0]
    357c:	b	3528 <BZ2_decompress+0x3528>
    3580:	mov	w0, #0x1                   	// #1
    3584:	b	194 <BZ2_decompress+0x194>
    3588:	cmp	w0, w1
    358c:	b.cs	3580 <BZ2_decompress+0x3580>  // b.hs, b.nlast
    3590:	ubfiz	x1, x0, #2, #24
    3594:	mov	w0, #0x0                   	// #0
    3598:	ldr	w1, [x2, x1]
    359c:	str	w14, [x19, #1092]
    35a0:	and	w2, w1, #0xff
    35a4:	lsr	w1, w1, #8
    35a8:	stp	w1, w2, [x19, #60]
    35ac:	b	120 <BZ2_decompress+0x120>
    35b0:	ldr	w0, [x19, #56]
    35b4:	ldr	x15, [x19, #3168]
    35b8:	asr	w1, w0, #1
    35bc:	ubfiz	w2, w0, #2, #1
    35c0:	ldr	x30, [x19, #3160]
    35c4:	ldrb	w25, [x15, w1, sxtw]
    35c8:	ldrh	w1, [x30, w0, sxtw #1]
    35cc:	lsr	w25, w25, w2
    35d0:	ubfiz	w25, w25, #16, #4
    35d4:	orr	w25, w25, w1
    35d8:	b	3604 <BZ2_decompress+0x3604>
    35dc:	and	w2, w2, #0xfffffff0
    35e0:	orr	w0, w2, w0
    35e4:	and	w0, w0, #0xff
    35e8:	strb	w0, [x1]
    35ec:	mov	w0, w3
    35f0:	ldr	w1, [x19, #56]
    35f4:	cmp	w3, w1
    35f8:	b.eq	3650 <BZ2_decompress+0x3650>  // b.none
    35fc:	ldr	x30, [x19, #3160]
    3600:	ldr	x15, [x19, #3168]
    3604:	asr	w1, w25, #1
    3608:	sbfiz	x17, x25, #1, #32
    360c:	ldrh	w2, [x30, w25, sxtw #1]
    3610:	ubfiz	w16, w25, #2, #1
    3614:	mov	w3, w25
    3618:	ldrb	w25, [x15, w1, sxtw]
    361c:	strh	w0, [x30, x17]
    3620:	sxtw	x17, w1
    3624:	asr	w0, w0, #16
    3628:	add	x1, x15, w1, sxtw
    362c:	lsr	w25, w25, w16
    3630:	ubfiz	w25, w25, #16, #4
    3634:	orr	w25, w25, w2
    3638:	ldrb	w2, [x15, x17]
    363c:	tbz	w3, #0, 35dc <BZ2_decompress+0x35dc>
    3640:	and	w2, w2, #0xf
    3644:	orr	w0, w2, w0, lsl #4
    3648:	and	w0, w0, #0xff
    364c:	b	35e8 <BZ2_decompress+0x35e8>
    3650:	ldr	w0, [x19, #40]
    3654:	mov	w2, #0x86a0                	// #34464
    3658:	ldrb	w1, [x19, #20]
    365c:	movk	w2, #0x1, lsl #16
    3660:	str	w3, [x19, #60]
    3664:	str	wzr, [x19, #1092]
    3668:	mul	w0, w0, w2
    366c:	cbz	w1, 3764 <BZ2_decompress+0x3764>
    3670:	str	xzr, [x19, #24]
    3674:	cmp	w3, w0
    3678:	b.cs	3580 <BZ2_decompress+0x3580>  // b.hs, b.nlast
    367c:	mov	x1, x14
    3680:	mov	w0, w3
    3684:	str	w3, [sp, #128]
    3688:	str	w13, [sp, #136]
    368c:	str	w18, [sp, #144]
    3690:	stp	w6, w5, [sp, #152]
    3694:	str	w12, [sp, #160]
    3698:	str	w4, [sp, #168]
    369c:	str	w10, [sp, #176]
    36a0:	str	w7, [sp, #184]
    36a4:	stp	x9, x8, [sp, #192]
    36a8:	str	w11, [sp, #232]
    36ac:	bl	0 <BZ2_indexIntoF>
    36b0:	ldr	w14, [x19, #60]
    36b4:	mov	w2, w0
    36b8:	ldr	x15, [x19, #3160]
    36bc:	ldr	x16, [x19, #3168]
    36c0:	lsr	w1, w14, #1
    36c4:	ldrh	w15, [x15, w14, uxtw #1]
    36c8:	ubfiz	w0, w14, #2, #1
    36cc:	str	w2, [x19, #64]
    36d0:	ldr	w14, [x19, #1092]
    36d4:	ldrb	w1, [x16, x1]
    36d8:	add	w14, w14, #0x1
    36dc:	str	w14, [x19, #1092]
    36e0:	ldr	w3, [sp, #128]
    36e4:	lsr	w1, w1, w0
    36e8:	ldr	w0, [x19, #24]
    36ec:	ubfiz	w1, w1, #16, #4
    36f0:	ldr	w13, [sp, #136]
    36f4:	orr	w1, w1, w15
    36f8:	str	w1, [x19, #60]
    36fc:	ldr	w18, [sp, #144]
    3700:	ldp	w6, w5, [sp, #152]
    3704:	ldr	w12, [sp, #160]
    3708:	ldr	w4, [sp, #168]
    370c:	ldr	w10, [sp, #176]
    3710:	ldr	w7, [sp, #184]
    3714:	ldr	w11, [sp, #232]
    3718:	ldp	x9, x8, [sp, #192]
    371c:	cbnz	w0, 3744 <BZ2_decompress+0x3744>
    3720:	ldr	w1, [x19, #28]
    3724:	adrp	x0, 0 <BZ2_rNums>
    3728:	add	x0, x0, #0x0
    372c:	cmp	w1, #0x1ff
    3730:	add	w14, w1, #0x1
    3734:	ldr	w0, [x0, w1, sxtw #2]
    3738:	str	w0, [x19, #24]
    373c:	b.eq	37e8 <BZ2_decompress+0x37e8>  // b.none
    3740:	str	w14, [x19, #28]
    3744:	sub	w0, w0, #0x1
    3748:	str	w0, [x19, #24]
    374c:	cmp	w0, #0x1
    3750:	mov	w0, #0x0                   	// #0
    3754:	cset	w1, eq  // eq = none
    3758:	eor	w2, w1, w2
    375c:	str	w2, [x19, #64]
    3760:	b	120 <BZ2_decompress+0x120>
    3764:	cmp	w3, w0
    3768:	b.cs	3580 <BZ2_decompress+0x3580>  // b.hs, b.nlast
    376c:	mov	x1, x14
    3770:	mov	w0, w3
    3774:	str	w3, [sp, #128]
    3778:	str	w13, [sp, #136]
    377c:	str	w18, [sp, #144]
    3780:	stp	w6, w5, [sp, #152]
    3784:	str	w12, [sp, #160]
    3788:	str	w4, [sp, #168]
    378c:	str	w10, [sp, #176]
    3790:	str	w7, [sp, #184]
    3794:	stp	x9, x8, [sp, #192]
    3798:	str	w11, [sp, #232]
    379c:	bl	0 <BZ2_indexIntoF>
    37a0:	ldr	w2, [x19, #60]
    37a4:	mov	w1, w0
    37a8:	ldr	x14, [x19, #3160]
    37ac:	mov	w0, #0x0                   	// #0
    37b0:	ldr	x16, [x19, #3168]
    37b4:	ubfiz	w15, w2, #2, #1
    37b8:	ldrh	w14, [x14, w2, uxtw #1]
    37bc:	str	w1, [x19, #64]
    37c0:	lsr	w1, w2, #1
    37c4:	ldr	w2, [x19, #1092]
    37c8:	ldrb	w1, [x16, x1]
    37cc:	add	w2, w2, #0x1
    37d0:	str	w2, [x19, #1092]
    37d4:	lsr	w1, w1, w15
    37d8:	ubfiz	w1, w1, #16, #4
    37dc:	orr	w1, w1, w14
    37e0:	str	w1, [x19, #60]
    37e4:	b	f4 <BZ2_decompress+0xf4>
    37e8:	str	wzr, [x19, #28]
    37ec:	b	3744 <BZ2_decompress+0x3744>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add_pair_to_block>:
       0:	ldp	w7, w4, [x0, #92]
       4:	and	w8, w7, #0xff
       8:	cmp	w4, #0x0
       c:	b.le	148 <add_pair_to_block+0x148>
      10:	ldr	w3, [x0, #648]
      14:	adrp	x5, 0 <BZ2_crc32Table>
      18:	and	w6, w7, #0xff
      1c:	add	x5, x5, #0x0
      20:	mov	w2, #0x0                   	// #0
      24:	nop
      28:	eor	w1, w6, w3, lsr #24
      2c:	add	w2, w2, #0x1
      30:	cmp	w2, w4
      34:	ldr	w1, [x5, x1, lsl #2]
      38:	eor	w3, w1, w3, lsl #8
      3c:	b.ne	28 <add_pair_to_block+0x28>  // b.any
      40:	add	x7, x0, w7, uxtw
      44:	str	w3, [x0, #648]
      48:	mov	w1, #0x1                   	// #1
      4c:	cmp	w2, #0x2
      50:	strb	w1, [x7, #128]
      54:	ldr	x2, [x0, #64]
      58:	ldrsw	x1, [x0, #108]
      5c:	add	x3, x2, x1
      60:	b.eq	f0 <add_pair_to_block+0xf0>  // b.none
      64:	cmp	w4, #0x3
      68:	b.eq	12c <add_pair_to_block+0x12c>  // b.none
      6c:	cmp	w4, #0x1
      70:	b.eq	118 <add_pair_to_block+0x118>  // b.none
      74:	sub	w1, w4, #0x4
      78:	mov	w2, #0x1                   	// #1
      7c:	add	x1, x0, w1, sxtw
      80:	strb	w2, [x1, #128]
      84:	strb	w8, [x3]
      88:	ldr	w1, [x0, #108]
      8c:	ldr	x2, [x0, #64]
      90:	add	w1, w1, #0x1
      94:	str	w1, [x0, #108]
      98:	strb	w8, [x2, w1, sxtw]
      9c:	ldr	w1, [x0, #108]
      a0:	ldr	x2, [x0, #64]
      a4:	add	w1, w1, #0x1
      a8:	str	w1, [x0, #108]
      ac:	strb	w8, [x2, w1, sxtw]
      b0:	ldr	w1, [x0, #108]
      b4:	ldr	x2, [x0, #64]
      b8:	add	w1, w1, #0x1
      bc:	str	w1, [x0, #108]
      c0:	strb	w8, [x2, w1, sxtw]
      c4:	ldr	w1, [x0, #108]
      c8:	ldr	x3, [x0, #64]
      cc:	add	w1, w1, #0x1
      d0:	ldr	w2, [x0, #96]
      d4:	str	w1, [x0, #108]
      d8:	sub	w2, w2, #0x4
      dc:	strb	w2, [x3, w1, sxtw]
      e0:	ldr	w1, [x0, #108]
      e4:	add	w1, w1, #0x1
      e8:	str	w1, [x0, #108]
      ec:	ret
      f0:	strb	w8, [x2, x1]
      f4:	ldr	w1, [x0, #108]
      f8:	ldr	x2, [x0, #64]
      fc:	add	w1, w1, #0x1
     100:	str	w1, [x0, #108]
     104:	strb	w8, [x2, w1, sxtw]
     108:	ldr	w1, [x0, #108]
     10c:	add	w1, w1, #0x1
     110:	str	w1, [x0, #108]
     114:	ret
     118:	strb	w8, [x3]
     11c:	ldr	w1, [x0, #108]
     120:	add	w1, w1, #0x1
     124:	str	w1, [x0, #108]
     128:	ret
     12c:	strb	w8, [x3]
     130:	ldr	w1, [x0, #108]
     134:	ldr	x2, [x0, #64]
     138:	add	w1, w1, #0x1
     13c:	str	w1, [x0, #108]
     140:	strb	w8, [x2, w1, sxtw]
     144:	b	f4 <add_pair_to_block+0xf4>
     148:	add	x7, x0, w7, uxtw
     14c:	mov	w1, #0x1                   	// #1
     150:	strb	w1, [x7, #128]
     154:	ldr	x3, [x0, #64]
     158:	ldrsw	x1, [x0, #108]
     15c:	add	x3, x3, x1
     160:	b	64 <add_pair_to_block+0x64>
     164:	nop

0000000000000168 <default_bzfree>:
     168:	mov	x0, x1
     16c:	cbz	x1, 174 <default_bzfree+0xc>
     170:	b	0 <free>
     174:	ret

0000000000000178 <default_bzalloc>:
     178:	mul	w0, w1, w2
     17c:	sxtw	x0, w0
     180:	b	0 <malloc>
     184:	nop

0000000000000188 <handle_compress.isra.0>:
     188:	stp	x29, x30, [sp, #-64]!
     18c:	mov	x29, sp
     190:	stp	x19, x20, [sp, #16]
     194:	mov	x19, x0
     198:	mov	w20, #0x0                   	// #0
     19c:	stp	x21, x22, [sp, #32]
     1a0:	adrp	x21, 0 <BZ2_crc32Table>
     1a4:	add	x21, x21, #0x0
     1a8:	mov	w22, #0x0                   	// #0
     1ac:	stp	x23, x24, [sp, #48]
     1b0:	mov	w23, #0x1                   	// #1
     1b4:	ldr	w0, [x19, #12]
     1b8:	b	1c4 <handle_compress.isra.0+0x3c>
     1bc:	cmp	w0, #0x2
     1c0:	b.eq	4e8 <handle_compress.isra.0+0x360>  // b.none
     1c4:	cmp	w0, #0x1
     1c8:	b.ne	1bc <handle_compress.isra.0+0x34>  // b.any
     1cc:	ldr	x0, [x19]
     1d0:	mov	w5, #0x0                   	// #0
     1d4:	ldr	w1, [x19, #120]
     1d8:	ldr	w2, [x0, #32]
     1dc:	b	22c <handle_compress.isra.0+0xa4>
     1e0:	cmp	w1, w3
     1e4:	b.ge	460 <handle_compress.isra.0+0x2d8>  // b.tcont
     1e8:	ldr	x2, [x19, #80]
     1ec:	mov	w5, #0x1                   	// #1
     1f0:	ldr	x0, [x0, #24]
     1f4:	ldrb	w1, [x2, w1, sxtw]
     1f8:	strb	w1, [x0]
     1fc:	ldr	x0, [x19]
     200:	ldr	w1, [x19, #120]
     204:	ldp	w2, w3, [x0, #32]
     208:	add	w1, w1, w5
     20c:	ldr	x4, [x0, #24]
     210:	str	w1, [x19, #120]
     214:	sub	w2, w2, #0x1
     218:	add	w3, w3, w5
     21c:	add	x4, x4, #0x1
     220:	str	x4, [x0, #24]
     224:	stp	w2, w3, [x0, #32]
     228:	cbz	w3, 4d8 <handle_compress.isra.0+0x350>
     22c:	ldr	w3, [x19, #116]
     230:	cbnz	w2, 1e0 <handle_compress.isra.0+0x58>
     234:	orr	w20, w5, w20
     238:	cmp	w1, w3
     23c:	b.lt	3e0 <handle_compress.isra.0+0x258>  // b.tstop
     240:	ldr	w24, [x19, #8]
     244:	cmp	w24, #0x4
     248:	b.ne	470 <handle_compress.isra.0+0x2e8>  // b.any
     24c:	ldr	w0, [x19, #16]
     250:	cbnz	w0, 26c <handle_compress.isra.0+0xe4>
     254:	ldr	w0, [x19, #92]
     258:	cmp	w0, #0xff
     25c:	b.hi	3e0 <handle_compress.isra.0+0x258>  // b.pmore
     260:	ldr	w0, [x19, #96]
     264:	cmp	w0, #0x0
     268:	b.le	3e0 <handle_compress.isra.0+0x258>
     26c:	mov	w0, #0xffffffff            	// #-1
     270:	str	wzr, [x19, #108]
     274:	stur	xzr, [x19, #116]
     278:	mov	w1, #0x0                   	// #0
     27c:	str	w0, [x19, #648]
     280:	mov	x2, #0x100                 	// #256
     284:	add	x0, x19, #0x80
     288:	bl	0 <memset>
     28c:	ldr	w0, [x19, #660]
     290:	mov	w1, #0x2                   	// #2
     294:	ldr	w6, [x19, #112]
     298:	mov	w5, #0x0                   	// #0
     29c:	add	w0, w0, #0x1
     2a0:	str	w1, [x19, #12]
     2a4:	str	w0, [x19, #660]
     2a8:	cmp	w6, w5
     2ac:	b.le	3c0 <handle_compress.isra.0+0x238>
     2b0:	ldr	x0, [x19]
     2b4:	mov	w2, #0x0                   	// #0
     2b8:	ldr	w4, [x0, #8]
     2bc:	cbz	w4, 334 <handle_compress.isra.0+0x1ac>
     2c0:	ldr	w1, [x19, #16]
     2c4:	cbz	w1, 5fc <handle_compress.isra.0+0x474>
     2c8:	ldr	x2, [x0]
     2cc:	ldp	w3, w7, [x19, #92]
     2d0:	ldrb	w9, [x2]
     2d4:	cmp	w9, w3
     2d8:	b.eq	400 <handle_compress.isra.0+0x278>  // b.none
     2dc:	cmp	w7, #0x1
     2e0:	b.eq	414 <handle_compress.isra.0+0x28c>  // b.none
     2e4:	cmp	w3, #0xff
     2e8:	b.ls	37c <handle_compress.isra.0+0x1f4>  // b.plast
     2ec:	stp	w9, w23, [x19, #92]
     2f0:	ldr	w3, [x0, #12]
     2f4:	add	x2, x2, #0x1
     2f8:	sub	w4, w4, #0x1
     2fc:	str	x2, [x0]
     300:	add	w2, w3, #0x1
     304:	str	w4, [x0, #8]
     308:	str	w2, [x0, #12]
     30c:	cbnz	w2, 39c <handle_compress.isra.0+0x214>
     310:	ldr	w2, [x0, #16]
     314:	sub	w1, w1, #0x1
     318:	cmp	w5, w6
     31c:	add	w2, w2, #0x1
     320:	str	w2, [x0, #16]
     324:	str	w1, [x19, #16]
     328:	b.ge	3ac <handle_compress.isra.0+0x224>  // b.tcont
     32c:	mov	w2, #0x1                   	// #1
     330:	cbnz	w4, 2c0 <handle_compress.isra.0+0x138>
     334:	ldr	w0, [x19, #8]
     338:	orr	w22, w2, w22
     33c:	cmp	w0, #0x2
     340:	b.eq	3cc <handle_compress.isra.0+0x244>  // b.none
     344:	ldr	w0, [x19, #16]
     348:	cbnz	w0, 3c8 <handle_compress.isra.0+0x240>
     34c:	ldr	w0, [x19, #92]
     350:	cmp	w0, #0xff
     354:	b.ls	618 <handle_compress.isra.0+0x490>  // b.plast
     358:	ldr	w1, [x19, #8]
     35c:	mov	x0, #0x100                 	// #256
     360:	stur	x0, [x19, #92]
     364:	mov	x0, x19
     368:	cmp	w1, #0x4
     36c:	cset	w1, eq  // eq = none
     370:	bl	0 <BZ2_compressBlock>
     374:	str	w23, [x19, #12]
     378:	b	1cc <handle_compress.isra.0+0x44>
     37c:	mov	x0, x19
     380:	bl	0 <add_pair_to_block>
     384:	ldr	x0, [x19]
     388:	ldr	w1, [x19, #16]
     38c:	ldp	w5, w6, [x19, #108]
     390:	ldr	w4, [x0, #8]
     394:	ldr	x2, [x0]
     398:	b	2ec <handle_compress.isra.0+0x164>
     39c:	sub	w1, w1, #0x1
     3a0:	str	w1, [x19, #16]
     3a4:	cmp	w5, w6
     3a8:	b.lt	32c <handle_compress.isra.0+0x1a4>  // b.tstop
     3ac:	mov	w3, #0x1                   	// #1
     3b0:	ldr	w0, [x19, #8]
     3b4:	orr	w22, w3, w22
     3b8:	cmp	w0, #0x2
     3bc:	b.eq	5e8 <handle_compress.isra.0+0x460>  // b.none
     3c0:	ldr	w0, [x19, #16]
     3c4:	cbz	w0, 34c <handle_compress.isra.0+0x1c4>
     3c8:	ldr	w5, [x19, #108]
     3cc:	cmp	w5, w6
     3d0:	b.ge	5e8 <handle_compress.isra.0+0x460>  // b.tcont
     3d4:	ldr	x0, [x19]
     3d8:	ldr	w0, [x0, #8]
     3dc:	cbnz	w0, 1b4 <handle_compress.isra.0+0x2c>
     3e0:	orr	w20, w22, w20
     3e4:	cmp	w20, #0x0
     3e8:	cset	w0, ne  // ne = any
     3ec:	ldp	x19, x20, [sp, #16]
     3f0:	ldp	x21, x22, [sp, #32]
     3f4:	ldp	x23, x24, [sp, #48]
     3f8:	ldp	x29, x30, [sp], #64
     3fc:	ret
     400:	cmp	w7, #0xff
     404:	b.eq	37c <handle_compress.isra.0+0x1f4>  // b.none
     408:	add	w7, w7, #0x1
     40c:	str	w7, [x19, #96]
     410:	b	2f0 <handle_compress.isra.0+0x168>
     414:	ldr	w1, [x19, #648]
     418:	and	w0, w3, #0xff
     41c:	add	x2, x19, w3, uxtw
     420:	eor	w0, w0, w1, lsr #24
     424:	ldr	w0, [x21, x0, lsl #2]
     428:	eor	w1, w0, w1, lsl #8
     42c:	str	w1, [x19, #648]
     430:	strb	w7, [x2, #128]
     434:	ldr	x0, [x19, #64]
     438:	strb	w3, [x0, w5, sxtw]
     43c:	ldr	x0, [x19]
     440:	ldp	w5, w6, [x19, #108]
     444:	ldr	w4, [x0, #8]
     448:	add	w5, w5, #0x1
     44c:	ldr	w1, [x19, #16]
     450:	ldr	x2, [x0]
     454:	str	w9, [x19, #92]
     458:	str	w5, [x19, #108]
     45c:	b	2f0 <handle_compress.isra.0+0x168>
     460:	ldr	w24, [x19, #8]
     464:	orr	w20, w5, w20
     468:	cmp	w24, #0x4
     46c:	b.eq	24c <handle_compress.isra.0+0xc4>  // b.none
     470:	mov	w0, #0xffffffff            	// #-1
     474:	str	wzr, [x19, #108]
     478:	stur	xzr, [x19, #116]
     47c:	mov	w1, #0x0                   	// #0
     480:	str	w0, [x19, #648]
     484:	mov	x2, #0x100                 	// #256
     488:	add	x0, x19, #0x80
     48c:	bl	0 <memset>
     490:	ldr	w0, [x19, #660]
     494:	mov	w1, #0x2                   	// #2
     498:	str	w1, [x19, #12]
     49c:	cmp	w24, #0x3
     4a0:	add	w0, w0, #0x1
     4a4:	str	w0, [x19, #660]
     4a8:	b.ne	654 <handle_compress.isra.0+0x4cc>  // b.any
     4ac:	ldr	w0, [x19, #16]
     4b0:	cbnz	w0, 4cc <handle_compress.isra.0+0x344>
     4b4:	ldr	w0, [x19, #92]
     4b8:	cmp	w0, #0xff
     4bc:	b.hi	3e0 <handle_compress.isra.0+0x258>  // b.pmore
     4c0:	ldr	w0, [x19, #96]
     4c4:	cmp	w0, #0x0
     4c8:	b.le	3e0 <handle_compress.isra.0+0x258>
     4cc:	ldr	w6, [x19, #112]
     4d0:	mov	w5, #0x0                   	// #0
     4d4:	b	2a8 <handle_compress.isra.0+0x120>
     4d8:	ldr	w3, [x0, #40]
     4dc:	add	w3, w3, w5
     4e0:	str	w3, [x0, #40]
     4e4:	b	22c <handle_compress.isra.0+0xa4>
     4e8:	ldr	w24, [x19, #8]
     4ec:	ldr	w5, [x19, #108]
     4f0:	ldr	w6, [x19, #112]
     4f4:	cmp	w24, #0x2
     4f8:	b.ne	2a8 <handle_compress.isra.0+0x120>  // b.any
     4fc:	mov	w3, #0x0                   	// #0
     500:	cmp	w5, w6
     504:	b.ge	3b0 <handle_compress.isra.0+0x228>  // b.tcont
     508:	ldr	x0, [x19]
     50c:	ldr	w1, [x0, #8]
     510:	cbz	w1, 624 <handle_compress.isra.0+0x49c>
     514:	ldr	x2, [x0]
     518:	ldp	w3, w4, [x19, #92]
     51c:	ldrb	w9, [x2]
     520:	cmp	w9, w3
     524:	b.eq	58c <handle_compress.isra.0+0x404>  // b.none
     528:	cmp	w4, #0x1
     52c:	b.eq	5a0 <handle_compress.isra.0+0x418>  // b.none
     530:	cmp	w3, #0xff
     534:	b.ls	570 <handle_compress.isra.0+0x3e8>  // b.plast
     538:	stp	w9, w23, [x19, #92]
     53c:	ldr	w3, [x0, #12]
     540:	add	x2, x2, #0x1
     544:	sub	w1, w1, #0x1
     548:	str	x2, [x0]
     54c:	add	w2, w3, #0x1
     550:	str	w1, [x0, #8]
     554:	str	w2, [x0, #12]
     558:	mov	w3, #0x1                   	// #1
     55c:	cbnz	w2, 500 <handle_compress.isra.0+0x378>
     560:	ldr	w1, [x0, #16]
     564:	add	w1, w1, w3
     568:	str	w1, [x0, #16]
     56c:	b	500 <handle_compress.isra.0+0x378>
     570:	mov	x0, x19
     574:	bl	0 <add_pair_to_block>
     578:	ldr	x0, [x19]
     57c:	ldp	w5, w6, [x19, #108]
     580:	ldr	w1, [x0, #8]
     584:	ldr	x2, [x0]
     588:	b	538 <handle_compress.isra.0+0x3b0>
     58c:	cmp	w4, #0xff
     590:	b.eq	570 <handle_compress.isra.0+0x3e8>  // b.none
     594:	add	w4, w4, #0x1
     598:	str	w4, [x19, #96]
     59c:	b	53c <handle_compress.isra.0+0x3b4>
     5a0:	ldr	w1, [x19, #648]
     5a4:	and	w0, w3, #0xff
     5a8:	add	x2, x19, w3, uxtw
     5ac:	eor	w0, w0, w1, lsr #24
     5b0:	ldr	w0, [x21, x0, lsl #2]
     5b4:	eor	w1, w0, w1, lsl #8
     5b8:	str	w1, [x19, #648]
     5bc:	strb	w4, [x2, #128]
     5c0:	ldr	x0, [x19, #64]
     5c4:	strb	w3, [x0, w5, sxtw]
     5c8:	ldr	x0, [x19]
     5cc:	ldp	w5, w6, [x19, #108]
     5d0:	ldr	w1, [x0, #8]
     5d4:	add	w5, w5, #0x1
     5d8:	ldr	x2, [x0]
     5dc:	str	w9, [x19, #92]
     5e0:	str	w5, [x19, #108]
     5e4:	b	53c <handle_compress.isra.0+0x3b4>
     5e8:	mov	x0, x19
     5ec:	mov	w1, #0x0                   	// #0
     5f0:	bl	0 <BZ2_compressBlock>
     5f4:	str	w23, [x19, #12]
     5f8:	b	1cc <handle_compress.isra.0+0x44>
     5fc:	ldr	w0, [x19, #8]
     600:	orr	w22, w2, w22
     604:	cmp	w0, #0x2
     608:	b.eq	3cc <handle_compress.isra.0+0x244>  // b.none
     60c:	ldr	w0, [x19, #92]
     610:	cmp	w0, #0xff
     614:	b.hi	358 <handle_compress.isra.0+0x1d0>  // b.pmore
     618:	mov	x0, x19
     61c:	bl	0 <add_pair_to_block>
     620:	b	358 <handle_compress.isra.0+0x1d0>
     624:	ldr	w0, [x19, #8]
     628:	orr	w22, w3, w22
     62c:	cmp	w0, #0x2
     630:	b.ne	3c0 <handle_compress.isra.0+0x238>  // b.any
     634:	orr	w20, w22, w20
     638:	cmp	w20, #0x0
     63c:	cset	w0, ne  // ne = any
     640:	ldp	x19, x20, [sp, #16]
     644:	ldp	x21, x22, [sp, #32]
     648:	ldp	x23, x24, [sp, #48]
     64c:	ldp	x29, x30, [sp], #64
     650:	ret
     654:	mov	w5, #0x0                   	// #0
     658:	b	4f0 <handle_compress.isra.0+0x368>
     65c:	nop

0000000000000660 <BZ2_bz__AssertH__fail>:
     660:	stp	x29, x30, [sp, #-32]!
     664:	adrp	x3, 0 <add_pair_to_block>
     668:	adrp	x1, 0 <add_pair_to_block>
     66c:	mov	x29, sp
     670:	stp	x19, x20, [sp, #16]
     674:	adrp	x20, 0 <stderr>
     678:	mov	w19, w0
     67c:	ldr	x0, [x20]
     680:	mov	w2, w19
     684:	add	x3, x3, #0x0
     688:	add	x1, x1, #0x0
     68c:	bl	0 <fprintf>
     690:	cmp	w19, #0x3ef
     694:	b.eq	6a0 <BZ2_bz__AssertH__fail+0x40>  // b.none
     698:	mov	w0, #0x3                   	// #3
     69c:	bl	0 <exit>
     6a0:	ldr	x3, [x20]
     6a4:	adrp	x0, 0 <add_pair_to_block>
     6a8:	mov	x2, #0x420                 	// #1056
     6ac:	mov	x1, #0x1                   	// #1
     6b0:	add	x0, x0, #0x0
     6b4:	bl	0 <fwrite>
     6b8:	b	698 <BZ2_bz__AssertH__fail+0x38>
     6bc:	nop

00000000000006c0 <BZ2_bzCompressInit>:
     6c0:	stp	x29, x30, [sp, #-64]!
     6c4:	cmp	x0, #0x0
     6c8:	mov	x29, sp
     6cc:	stp	x21, x22, [sp, #32]
     6d0:	mov	x22, x0
     6d4:	sub	w0, w1, #0x1
     6d8:	ccmp	w0, #0x8, #0x2, ne  // ne = any
     6dc:	b.hi	858 <BZ2_bzCompressInit+0x198>  // b.pmore
     6e0:	stp	x23, x24, [sp, #48]
     6e4:	cmp	w3, #0xfa
     6e8:	b.hi	84c <BZ2_bzCompressInit+0x18c>  // b.pmore
     6ec:	ldr	x4, [x22, #56]
     6f0:	stp	x19, x20, [sp, #16]
     6f4:	cmp	w3, #0x0
     6f8:	mov	w0, #0x1e                  	// #30
     6fc:	mov	w24, w1
     700:	mov	w21, w2
     704:	csel	w23, w3, w0, ne  // ne = any
     708:	cbz	x4, 824 <BZ2_bzCompressInit+0x164>
     70c:	ldr	x0, [x22, #64]
     710:	cbz	x0, 83c <BZ2_bzCompressInit+0x17c>
     714:	ldr	x0, [x22, #72]
     718:	mov	w2, #0x1                   	// #1
     71c:	mov	w1, #0xd9d8                	// #55768
     720:	blr	x4
     724:	mov	x19, x0
     728:	cbz	x0, 8a4 <BZ2_bzCompressInit+0x1e4>
     72c:	mov	w20, #0x86a0                	// #34464
     730:	stp	xzr, xzr, [x0, #24]
     734:	movk	w20, #0x1, lsl #16
     738:	ldr	x4, [x22, #56]
     73c:	mul	w20, w24, w20
     740:	ldr	x0, [x22, #72]
     744:	str	x22, [x19]
     748:	str	xzr, [x19, #40]
     74c:	lsl	w1, w20, #2
     750:	mov	w2, #0x1                   	// #1
     754:	blr	x4
     758:	mov	x5, x0
     75c:	ldr	x4, [x22, #56]
     760:	add	w1, w20, #0x22
     764:	ldr	x0, [x22, #72]
     768:	str	x5, [x19, #24]
     76c:	lsl	w1, w1, #2
     770:	mov	w2, #0x1                   	// #1
     774:	blr	x4
     778:	ldr	x4, [x22, #56]
     77c:	str	x0, [x19, #32]
     780:	ldr	x0, [x22, #72]
     784:	mov	w1, #0x40004               	// #262148
     788:	mov	w2, #0x1                   	// #1
     78c:	blr	x4
     790:	str	x0, [x19, #40]
     794:	ldr	x1, [x19, #24]
     798:	cbz	x1, 868 <BZ2_bzCompressInit+0x1a8>
     79c:	ldr	x4, [x19, #32]
     7a0:	cmp	x4, #0x0
     7a4:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     7a8:	b.eq	860 <BZ2_bzCompressInit+0x1a0>  // b.none
     7ac:	sub	w20, w20, #0x13
     7b0:	mov	x2, #0x200000002           	// #8589934594
     7b4:	str	x2, [x19, #8]
     7b8:	mov	w5, #0xffffffff            	// #-1
     7bc:	stp	x1, x4, [x19, #56]
     7c0:	mov	x2, #0x100                 	// #256
     7c4:	add	x0, x19, #0x80
     7c8:	stp	x1, xzr, [x19, #72]
     7cc:	mov	w1, #0x0                   	// #0
     7d0:	str	w23, [x19, #88]
     7d4:	str	w20, [x19, #112]
     7d8:	str	wzr, [x19, #652]
     7dc:	str	w21, [x19, #656]
     7e0:	str	w24, [x19, #664]
     7e4:	stur	xzr, [x22, #12]
     7e8:	stur	xzr, [x22, #36]
     7ec:	str	x19, [x22, #48]
     7f0:	stur	x2, [x19, #92]
     7f4:	str	wzr, [x19, #108]
     7f8:	stur	xzr, [x19, #116]
     7fc:	str	w5, [x19, #648]
     800:	bl	0 <memset>
     804:	mov	w1, #0x1                   	// #1
     808:	mov	w0, #0x0                   	// #0
     80c:	ldp	x23, x24, [sp, #48]
     810:	str	w1, [x19, #660]
     814:	ldp	x19, x20, [sp, #16]
     818:	ldp	x21, x22, [sp, #32]
     81c:	ldp	x29, x30, [sp], #64
     820:	ret
     824:	adrp	x0, 0 <add_pair_to_block>
     828:	add	x0, x0, #0x0
     82c:	mov	x4, x0
     830:	str	x0, [x22, #56]
     834:	ldr	x0, [x22, #64]
     838:	cbnz	x0, 714 <BZ2_bzCompressInit+0x54>
     83c:	adrp	x0, 0 <add_pair_to_block>
     840:	add	x0, x0, #0x0
     844:	str	x0, [x22, #64]
     848:	b	714 <BZ2_bzCompressInit+0x54>
     84c:	mov	w0, #0xfffffffe            	// #-2
     850:	ldp	x23, x24, [sp, #48]
     854:	b	818 <BZ2_bzCompressInit+0x158>
     858:	mov	w0, #0xfffffffe            	// #-2
     85c:	b	818 <BZ2_bzCompressInit+0x158>
     860:	ldp	x2, x0, [x22, #64]
     864:	blr	x2
     868:	ldr	x1, [x19, #32]
     86c:	ldp	x2, x0, [x22, #64]
     870:	cbz	x1, 87c <BZ2_bzCompressInit+0x1bc>
     874:	blr	x2
     878:	ldp	x2, x0, [x22, #64]
     87c:	ldr	x1, [x19, #40]
     880:	cbz	x1, 88c <BZ2_bzCompressInit+0x1cc>
     884:	blr	x2
     888:	ldp	x2, x0, [x22, #64]
     88c:	mov	x1, x19
     890:	blr	x2
     894:	mov	w0, #0xfffffffd            	// #-3
     898:	ldp	x19, x20, [sp, #16]
     89c:	ldp	x23, x24, [sp, #48]
     8a0:	b	818 <BZ2_bzCompressInit+0x158>
     8a4:	mov	w0, #0xfffffffd            	// #-3
     8a8:	ldp	x19, x20, [sp, #16]
     8ac:	ldp	x23, x24, [sp, #48]
     8b0:	b	818 <BZ2_bzCompressInit+0x158>
     8b4:	nop

00000000000008b8 <BZ2_bzCompress>:
     8b8:	cbz	x0, aa4 <BZ2_bzCompress+0x1ec>
     8bc:	stp	x29, x30, [sp, #-32]!
     8c0:	mov	x29, sp
     8c4:	str	x19, [sp, #16]
     8c8:	ldr	x19, [x0, #48]
     8cc:	cbz	x19, a58 <BZ2_bzCompress+0x1a0>
     8d0:	ldr	x3, [x19]
     8d4:	cmp	x3, x0
     8d8:	b.ne	a58 <BZ2_bzCompress+0x1a0>  // b.any
     8dc:	ldr	w2, [x19, #8]
     8e0:	cmp	w1, #0x2
     8e4:	b.ne	a2c <BZ2_bzCompress+0x174>  // b.any
     8e8:	cmp	w2, #0x3
     8ec:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     8f0:	b.gt	9a8 <BZ2_bzCompress+0xf0>
     8f4:	cmp	w2, #0x1
     8f8:	mov	w0, #0xffffffff            	// #-1
     8fc:	b.eq	99c <BZ2_bzCompress+0xe4>  // b.none
     900:	cmp	w2, #0x2
     904:	b.ne	a1c <BZ2_bzCompress+0x164>  // b.any
     908:	ldr	w0, [x3, #8]
     90c:	mov	w1, #0x4                   	// #4
     910:	str	w1, [x19, #8]
     914:	str	w0, [x19, #16]
     918:	b	9b4 <BZ2_bzCompress+0xfc>
     91c:	cmp	w2, #0x3
     920:	b.eq	a9c <BZ2_bzCompress+0x1e4>  // b.none
     924:	b.gt	a14 <BZ2_bzCompress+0x15c>
     928:	cmp	w2, #0x1
     92c:	mov	w0, #0xffffffff            	// #-1
     930:	b.eq	99c <BZ2_bzCompress+0xe4>  // b.none
     934:	cmp	w2, #0x2
     938:	b.ne	a1c <BZ2_bzCompress+0x164>  // b.any
     93c:	ldr	w0, [x3, #8]
     940:	mov	w1, #0x3                   	// #3
     944:	str	w1, [x19, #8]
     948:	str	w0, [x19, #16]
     94c:	ldr	w1, [x19, #16]
     950:	cmp	w1, w0
     954:	b.ne	a60 <BZ2_bzCompress+0x1a8>  // b.any
     958:	mov	x0, x19
     95c:	bl	188 <handle_compress.isra.0>
     960:	ldr	w1, [x19, #16]
     964:	mov	w0, #0x2                   	// #2
     968:	cbnz	w1, 99c <BZ2_bzCompress+0xe4>
     96c:	ldr	w1, [x19, #92]
     970:	cmp	w1, #0xff
     974:	b.hi	984 <BZ2_bzCompress+0xcc>  // b.pmore
     978:	ldr	w1, [x19, #96]
     97c:	cmp	w1, #0x0
     980:	b.gt	99c <BZ2_bzCompress+0xe4>
     984:	ldp	w1, w2, [x19, #116]
     988:	mov	w0, #0x2                   	// #2
     98c:	cmp	w2, w1
     990:	b.lt	99c <BZ2_bzCompress+0xe4>  // b.tstop
     994:	str	w0, [x19, #8]
     998:	mov	w0, #0x1                   	// #1
     99c:	ldr	x19, [sp, #16]
     9a0:	ldp	x29, x30, [sp], #32
     9a4:	ret
     9a8:	cmp	w2, #0x4
     9ac:	b.ne	a1c <BZ2_bzCompress+0x164>  // b.any
     9b0:	ldr	w0, [x3, #8]
     9b4:	ldr	w1, [x19, #16]
     9b8:	cmp	w1, w0
     9bc:	b.ne	a60 <BZ2_bzCompress+0x1a8>  // b.any
     9c0:	mov	x0, x19
     9c4:	bl	188 <handle_compress.isra.0>
     9c8:	tst	w0, #0xff
     9cc:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     9d0:	ldr	w1, [x19, #16]
     9d4:	mov	w0, #0x3                   	// #3
     9d8:	cbnz	w1, 99c <BZ2_bzCompress+0xe4>
     9dc:	ldr	w1, [x19, #92]
     9e0:	cmp	w1, #0xff
     9e4:	b.hi	9f4 <BZ2_bzCompress+0x13c>  // b.pmore
     9e8:	ldr	w1, [x19, #96]
     9ec:	cmp	w1, #0x0
     9f0:	b.gt	99c <BZ2_bzCompress+0xe4>
     9f4:	ldp	w1, w2, [x19, #116]
     9f8:	mov	w0, #0x3                   	// #3
     9fc:	cmp	w2, w1
     a00:	b.lt	99c <BZ2_bzCompress+0xe4>  // b.tstop
     a04:	mov	w1, #0x1                   	// #1
     a08:	mov	w0, #0x4                   	// #4
     a0c:	str	w1, [x19, #8]
     a10:	b	99c <BZ2_bzCompress+0xe4>
     a14:	cmp	w2, #0x4
     a18:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     a1c:	mov	w0, #0x0                   	// #0
     a20:	ldr	x19, [sp, #16]
     a24:	ldp	x29, x30, [sp], #32
     a28:	ret
     a2c:	cmp	w1, #0x1
     a30:	b.eq	91c <BZ2_bzCompress+0x64>  // b.none
     a34:	cmp	w2, #0x3
     a38:	cbz	w1, a68 <BZ2_bzCompress+0x1b0>
     a3c:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     a40:	b.gt	a14 <BZ2_bzCompress+0x15c>
     a44:	cmp	w2, #0x1
     a48:	mov	w0, #0xffffffff            	// #-1
     a4c:	b.eq	99c <BZ2_bzCompress+0xe4>  // b.none
     a50:	cmp	w2, #0x2
     a54:	b.ne	a1c <BZ2_bzCompress+0x164>  // b.any
     a58:	mov	w0, #0xfffffffe            	// #-2
     a5c:	b	99c <BZ2_bzCompress+0xe4>
     a60:	mov	w0, #0xffffffff            	// #-1
     a64:	b	99c <BZ2_bzCompress+0xe4>
     a68:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     a6c:	b.gt	a14 <BZ2_bzCompress+0x15c>
     a70:	cmp	w2, #0x1
     a74:	b.eq	a60 <BZ2_bzCompress+0x1a8>  // b.none
     a78:	cmp	w2, #0x2
     a7c:	b.ne	a1c <BZ2_bzCompress+0x164>  // b.any
     a80:	mov	x0, x19
     a84:	bl	188 <handle_compress.isra.0>
     a88:	mov	w1, w0
     a8c:	mov	w0, #0x1                   	// #1
     a90:	tst	w1, #0xff
     a94:	b.ne	99c <BZ2_bzCompress+0xe4>  // b.any
     a98:	b	a58 <BZ2_bzCompress+0x1a0>
     a9c:	ldr	w0, [x3, #8]
     aa0:	b	94c <BZ2_bzCompress+0x94>
     aa4:	mov	w0, #0xfffffffe            	// #-2
     aa8:	ret
     aac:	nop

0000000000000ab0 <BZ2_bzCompressEnd>:
     ab0:	cbz	x0, b30 <BZ2_bzCompressEnd+0x80>
     ab4:	stp	x29, x30, [sp, #-32]!
     ab8:	mov	x29, sp
     abc:	stp	x19, x20, [sp, #16]
     ac0:	mov	x19, x0
     ac4:	ldr	x20, [x0, #48]
     ac8:	cbz	x20, b28 <BZ2_bzCompressEnd+0x78>
     acc:	ldr	x0, [x20]
     ad0:	cmp	x0, x19
     ad4:	b.ne	b28 <BZ2_bzCompressEnd+0x78>  // b.any
     ad8:	ldr	x1, [x20, #24]
     adc:	ldp	x2, x0, [x19, #64]
     ae0:	cbz	x1, aec <BZ2_bzCompressEnd+0x3c>
     ae4:	blr	x2
     ae8:	ldp	x2, x0, [x19, #64]
     aec:	ldr	x1, [x20, #32]
     af0:	cbz	x1, afc <BZ2_bzCompressEnd+0x4c>
     af4:	blr	x2
     af8:	ldp	x2, x0, [x19, #64]
     afc:	ldr	x1, [x20, #40]
     b00:	cbz	x1, b0c <BZ2_bzCompressEnd+0x5c>
     b04:	blr	x2
     b08:	ldp	x2, x0, [x19, #64]
     b0c:	ldr	x1, [x19, #48]
     b10:	blr	x2
     b14:	str	xzr, [x19, #48]
     b18:	mov	w0, #0x0                   	// #0
     b1c:	ldp	x19, x20, [sp, #16]
     b20:	ldp	x29, x30, [sp], #32
     b24:	ret
     b28:	mov	w0, #0xfffffffe            	// #-2
     b2c:	b	b1c <BZ2_bzCompressEnd+0x6c>
     b30:	mov	w0, #0xfffffffe            	// #-2
     b34:	ret

0000000000000b38 <BZ2_bzDecompressInit>:
     b38:	cbz	x0, c14 <BZ2_bzDecompressInit+0xdc>
     b3c:	stp	x29, x30, [sp, #-48]!
     b40:	cmp	w2, #0x1
     b44:	mov	x29, sp
     b48:	stp	x19, x20, [sp, #16]
     b4c:	mov	w20, w2
     b50:	b.hi	c00 <BZ2_bzDecompressInit+0xc8>  // b.pmore
     b54:	str	x21, [sp, #32]
     b58:	cmp	w1, #0x4
     b5c:	mov	w21, w1
     b60:	b.hi	c08 <BZ2_bzDecompressInit+0xd0>  // b.pmore
     b64:	ldr	x3, [x0, #56]
     b68:	mov	x19, x0
     b6c:	cbz	x3, bd8 <BZ2_bzDecompressInit+0xa0>
     b70:	ldr	x0, [x19, #64]
     b74:	cbz	x0, bf0 <BZ2_bzDecompressInit+0xb8>
     b78:	ldr	x0, [x19, #72]
     b7c:	mov	w2, #0x1                   	// #1
     b80:	mov	w1, #0xfa90                	// #64144
     b84:	blr	x3
     b88:	mov	x3, x0
     b8c:	cbz	x0, c1c <BZ2_bzDecompressInit+0xe4>
     b90:	str	x19, [x3]
     b94:	mov	w1, #0xa                   	// #10
     b98:	str	x3, [x19, #48]
     b9c:	mov	w0, #0x0                   	// #0
     ba0:	str	w1, [x3, #8]
     ba4:	add	x1, x3, #0xc50
     ba8:	str	xzr, [x3, #32]
     bac:	str	wzr, [x3, #3188]
     bb0:	stur	xzr, [x19, #12]
     bb4:	stur	xzr, [x19, #36]
     bb8:	strb	w20, [x3, #44]
     bbc:	stp	wzr, w21, [x3, #48]
     bc0:	stp	xzr, xzr, [x1]
     bc4:	ldr	x21, [sp, #32]
     bc8:	str	xzr, [x3, #3168]
     bcc:	ldp	x19, x20, [sp, #16]
     bd0:	ldp	x29, x30, [sp], #48
     bd4:	ret
     bd8:	adrp	x0, 0 <add_pair_to_block>
     bdc:	add	x0, x0, #0x0
     be0:	mov	x3, x0
     be4:	str	x0, [x19, #56]
     be8:	ldr	x0, [x19, #64]
     bec:	cbnz	x0, b78 <BZ2_bzDecompressInit+0x40>
     bf0:	adrp	x0, 0 <add_pair_to_block>
     bf4:	add	x0, x0, #0x0
     bf8:	str	x0, [x19, #64]
     bfc:	b	b78 <BZ2_bzDecompressInit+0x40>
     c00:	mov	w0, #0xfffffffe            	// #-2
     c04:	b	bcc <BZ2_bzDecompressInit+0x94>
     c08:	mov	w0, #0xfffffffe            	// #-2
     c0c:	ldr	x21, [sp, #32]
     c10:	b	bcc <BZ2_bzDecompressInit+0x94>
     c14:	mov	w0, #0xfffffffe            	// #-2
     c18:	ret
     c1c:	mov	w0, #0xfffffffd            	// #-3
     c20:	ldr	x21, [sp, #32]
     c24:	b	bcc <BZ2_bzDecompressInit+0x94>

0000000000000c28 <BZ2_indexIntoF>:
     c28:	mov	w7, w0
     c2c:	mov	w3, #0x100                 	// #256
     c30:	mov	w0, #0x0                   	// #0
     c34:	nop
     c38:	add	w2, w3, w0
     c3c:	asr	w2, w2, #1
     c40:	sub	w6, w2, w0
     c44:	sub	w5, w3, w2
     c48:	ldr	w4, [x1, w2, sxtw #2]
     c4c:	cmp	w7, w4
     c50:	b.ge	c7c <BZ2_indexIntoF+0x54>  // b.tcont
     c54:	cmp	w6, #0x1
     c58:	b.eq	c88 <BZ2_indexIntoF+0x60>  // b.none
     c5c:	mov	w3, w2
     c60:	add	w2, w3, w0
     c64:	asr	w2, w2, #1
     c68:	sub	w6, w2, w0
     c6c:	sub	w5, w3, w2
     c70:	ldr	w4, [x1, w2, sxtw #2]
     c74:	cmp	w7, w4
     c78:	b.lt	c54 <BZ2_indexIntoF+0x2c>  // b.tstop
     c7c:	mov	w0, w2
     c80:	cmp	w5, #0x1
     c84:	b.ne	c38 <BZ2_indexIntoF+0x10>  // b.any
     c88:	ret
     c8c:	nop

0000000000000c90 <BZ2_bzDecompress>:
     c90:	stp	x29, x30, [sp, #-64]!
     c94:	mov	x29, sp
     c98:	stp	x21, x22, [sp, #32]
     c9c:	cbz	x0, 1c74 <BZ2_bzDecompress+0xfe4>
     ca0:	stp	x19, x20, [sp, #16]
     ca4:	ldr	x19, [x0, #48]
     ca8:	cbz	x19, 1c48 <BZ2_bzDecompress+0xfb8>
     cac:	ldr	x1, [x19]
     cb0:	cmp	x1, x0
     cb4:	b.ne	1c48 <BZ2_bzDecompress+0xfb8>  // b.any
     cb8:	ldr	w1, [x19, #8]
     cbc:	cmp	w1, #0x1
     cc0:	b.eq	1c5c <BZ2_bzDecompress+0xfcc>  // b.none
     cc4:	mov	w21, #0x86a0                	// #34464
     cc8:	adrp	x20, 0 <BZ2_crc32Table>
     ccc:	movk	w21, #0x1, lsl #16
     cd0:	add	x20, x20, #0x0
     cd4:	b	ce0 <BZ2_bzDecompress+0x50>
     cd8:	cmp	w1, #0x9
     cdc:	b.gt	df4 <BZ2_bzDecompress+0x164>
     ce0:	cmp	w1, #0x2
     ce4:	b.ne	cd8 <BZ2_bzDecompress+0x48>  // b.any
     ce8:	ldrb	w2, [x19, #44]
     cec:	ldr	x0, [x19]
     cf0:	ldrb	w3, [x19, #20]
     cf4:	ldr	w11, [x0, #32]
     cf8:	cbz	w2, f04 <BZ2_bzDecompress+0x274>
     cfc:	cbnz	w3, 1474 <BZ2_bzDecompress+0x7e4>
     d00:	add	x5, x19, #0xc, lsl #12
     d04:	cbz	w11, d84 <BZ2_bzDecompress+0xf4>
     d08:	ldr	w2, [x19, #16]
     d0c:	add	x7, x19, #0x448
     d10:	mov	w8, #0x1                   	// #1
     d14:	mov	w9, #0x2                   	// #2
     d18:	mov	w10, #0x3                   	// #3
     d1c:	nop
     d20:	cbz	w2, e1c <BZ2_bzDecompress+0x18c>
     d24:	ldr	x0, [x0, #24]
     d28:	ldrb	w1, [x19, #12]
     d2c:	strb	w1, [x0]
     d30:	ldr	w4, [x19, #3184]
     d34:	ldr	x0, [x19]
     d38:	eor	w1, w1, w4, lsr #24
     d3c:	ldr	w2, [x19, #16]
     d40:	ldr	x6, [x0, #24]
     d44:	sub	w2, w2, #0x1
     d48:	ldr	w11, [x20, x1, lsl #2]
     d4c:	ldp	w1, w3, [x0, #32]
     d50:	str	w2, [x19, #16]
     d54:	eor	w4, w11, w4, lsl #8
     d58:	str	w4, [x19, #3184]
     d5c:	sub	w1, w1, #0x1
     d60:	add	w3, w3, #0x1
     d64:	add	x6, x6, #0x1
     d68:	str	x6, [x0, #24]
     d6c:	stp	w1, w3, [x0, #32]
     d70:	cbnz	w3, d80 <BZ2_bzDecompress+0xf0>
     d74:	ldr	w3, [x0, #40]
     d78:	add	w3, w3, #0x1
     d7c:	str	w3, [x0, #40]
     d80:	cbnz	w1, d20 <BZ2_bzDecompress+0x90>
     d84:	ldr	w13, [x19, #1092]
     d88:	ldr	w0, [x5, #14928]
     d8c:	add	w0, w0, #0x1
     d90:	cmp	w0, w13
     d94:	b.ne	11ac <BZ2_bzDecompress+0x51c>  // b.any
     d98:	ldr	w0, [x19, #16]
     d9c:	cbnz	w0, 11ac <BZ2_bzDecompress+0x51c>
     da0:	ldr	w3, [x19, #3184]
     da4:	ldr	w0, [x19, #52]
     da8:	mvn	w3, w3
     dac:	str	w3, [x19, #3184]
     db0:	cmp	w0, #0x2
     db4:	b.gt	12b4 <BZ2_bzDecompress+0x624>
     db8:	cmp	w0, #0x1
     dbc:	b.le	dd0 <BZ2_bzDecompress+0x140>
     dc0:	adrp	x1, 0 <stderr>
     dc4:	mov	w0, #0x5d                  	// #93
     dc8:	ldr	x1, [x1]
     dcc:	bl	0 <fputc>
     dd0:	ldr	w0, [x19, #3176]
     dd4:	ldr	w1, [x19, #3184]
     dd8:	cmp	w1, w0
     ddc:	b.ne	129c <BZ2_bzDecompress+0x60c>  // b.any
     de0:	ldr	w0, [x19, #3188]
     de4:	mov	w2, #0xe                   	// #14
     de8:	str	w2, [x19, #8]
     dec:	eor	w0, w1, w0, ror #31
     df0:	str	w0, [x19, #3188]
     df4:	mov	x0, x19
     df8:	bl	0 <BZ2_decompress>
     dfc:	mov	w22, w0
     e00:	cmp	w0, #0x4
     e04:	b.eq	1c1c <BZ2_bzDecompress+0xf8c>  // b.none
     e08:	ldr	w1, [x19, #8]
     e0c:	cmp	w1, #0x2
     e10:	b.eq	ce8 <BZ2_bzDecompress+0x58>  // b.none
     e14:	ldp	x19, x20, [sp, #16]
     e18:	b	12a4 <BZ2_bzDecompress+0x614>
     e1c:	ldr	w18, [x5, #14928]
     e20:	ldr	w14, [x19, #1092]
     e24:	add	w17, w18, #0x1
     e28:	cmp	w14, w17
     e2c:	b.eq	da0 <BZ2_bzDecompress+0x110>  // b.none
     e30:	b.gt	129c <BZ2_bzDecompress+0x60c>
     e34:	ldr	w15, [x19, #40]
     e38:	ldp	w6, w16, [x19, #60]
     e3c:	strb	w16, [x19, #12]
     e40:	str	w8, [x19, #16]
     e44:	mul	w15, w15, w21
     e48:	cmp	w6, w15
     e4c:	b.cs	129c <BZ2_bzDecompress+0x60c>  // b.hs, b.nlast
     e50:	mov	w3, #0x0                   	// #0
     e54:	mov	w4, #0x100                 	// #256
     e58:	add	w1, w4, w3
     e5c:	asr	w1, w1, #1
     e60:	sub	w12, w4, w1
     e64:	sub	w11, w1, w3
     e68:	ldr	w13, [x7, w1, sxtw #2]
     e6c:	cmp	w6, w13
     e70:	b.lt	e9c <BZ2_bzDecompress+0x20c>  // b.tstop
     e74:	cmp	w12, #0x1
     e78:	b.eq	eb0 <BZ2_bzDecompress+0x220>  // b.none
     e7c:	mov	w3, w1
     e80:	add	w1, w4, w3
     e84:	asr	w1, w1, #1
     e88:	sub	w12, w4, w1
     e8c:	sub	w11, w1, w3
     e90:	ldr	w13, [x7, w1, sxtw #2]
     e94:	cmp	w6, w13
     e98:	b.ge	e74 <BZ2_bzDecompress+0x1e4>  // b.tcont
     e9c:	cmp	w11, #0x1
     ea0:	b.eq	eac <BZ2_bzDecompress+0x21c>  // b.none
     ea4:	mov	w4, w1
     ea8:	b	e58 <BZ2_bzDecompress+0x1c8>
     eac:	mov	w1, w3
     eb0:	ldr	x12, [x19, #3168]
     eb4:	lsr	w3, w6, #1
     eb8:	ldr	x11, [x19, #3160]
     ebc:	ubfiz	w13, w6, #2, #1
     ec0:	ldrb	w3, [x12, w3, uxtw]
     ec4:	add	w4, w14, #0x1
     ec8:	cmp	w14, w18
     ecc:	ldrh	w6, [x11, w6, uxtw #1]
     ed0:	lsr	w3, w3, w13
     ed4:	str	w4, [x19, #1092]
     ed8:	ubfiz	w3, w3, #16, #4
     edc:	orr	w3, w3, w6
     ee0:	str	w3, [x19, #60]
     ee4:	b.eq	11d0 <BZ2_bzDecompress+0x540>  // b.none
     ee8:	cmp	w16, w1, uxtb
     eec:	and	w1, w1, #0xff
     ef0:	b.eq	11dc <BZ2_bzDecompress+0x54c>  // b.none
     ef4:	ldr	w2, [x0, #32]
     ef8:	str	w1, [x19, #64]
     efc:	cbnz	w2, d24 <BZ2_bzDecompress+0x94>
     f00:	b	d84 <BZ2_bzDecompress+0xf4>
     f04:	cbz	w3, 12d4 <BZ2_bzDecompress+0x644>
     f08:	cbz	w11, 1c40 <BZ2_bzDecompress+0xfb0>
     f0c:	ldr	w2, [x19, #16]
     f10:	adrp	x7, 0 <BZ2_rNums>
     f14:	add	x5, x19, #0xc, lsl #12
     f18:	add	x7, x7, #0x0
     f1c:	mov	w8, #0x1                   	// #1
     f20:	mov	w9, #0x2                   	// #2
     f24:	mov	w10, #0x3                   	// #3
     f28:	cbnz	w2, fc8 <BZ2_bzDecompress+0x338>
     f2c:	ldr	w6, [x5, #14928]
     f30:	ldr	w3, [x19, #1092]
     f34:	add	w15, w6, #0x1
     f38:	cmp	w3, w15
     f3c:	b.eq	da0 <BZ2_bzDecompress+0x110>  // b.none
     f40:	b.gt	129c <BZ2_bzDecompress+0x60c>
     f44:	ldr	w13, [x19, #40]
     f48:	ldp	w2, w12, [x19, #60]
     f4c:	strb	w12, [x19, #12]
     f50:	str	w8, [x19, #16]
     f54:	mul	w13, w13, w21
     f58:	cmp	w2, w13
     f5c:	b.cs	129c <BZ2_bzDecompress+0x60c>  // b.hs, b.nlast
     f60:	ldr	x14, [x19, #3152]
     f64:	ldr	w1, [x19, #24]
     f68:	ldr	w11, [x14, w2, uxtw #2]
     f6c:	lsr	w4, w11, #8
     f70:	str	w4, [x19, #60]
     f74:	cbnz	w1, f8c <BZ2_bzDecompress+0x2fc>
     f78:	ldr	w1, [x19, #28]
     f7c:	cmp	w1, #0x1ff
     f80:	csinc	w2, wzr, w1, eq  // eq = none
     f84:	ldr	w1, [x7, w1, sxtw #2]
     f88:	stp	w1, w2, [x19, #24]
     f8c:	sub	w1, w1, #0x1
     f90:	add	w16, w3, #0x1
     f94:	cmp	w1, #0x1
     f98:	str	w1, [x19, #24]
     f9c:	cset	w2, eq  // eq = none
     fa0:	str	w16, [x19, #1092]
     fa4:	eor	w2, w2, w11
     fa8:	cmp	w3, w6
     fac:	and	w2, w2, #0xff
     fb0:	b.eq	11c4 <BZ2_bzDecompress+0x534>  // b.none
     fb4:	cmp	w12, w2
     fb8:	b.eq	1030 <BZ2_bzDecompress+0x3a0>  // b.none
     fbc:	ldr	w1, [x0, #32]
     fc0:	str	w2, [x19, #64]
     fc4:	cbz	w1, d84 <BZ2_bzDecompress+0xf4>
     fc8:	ldr	x0, [x0, #24]
     fcc:	ldrb	w1, [x19, #12]
     fd0:	strb	w1, [x0]
     fd4:	ldr	w4, [x19, #3184]
     fd8:	ldrb	w1, [x19, #12]
     fdc:	ldr	x0, [x19]
     fe0:	eor	w1, w1, w4, lsr #24
     fe4:	ldr	w2, [x19, #16]
     fe8:	ldr	x6, [x0, #24]
     fec:	sub	w2, w2, #0x1
     ff0:	ldr	w11, [x20, x1, lsl #2]
     ff4:	ldp	w1, w3, [x0, #32]
     ff8:	str	w2, [x19, #16]
     ffc:	eor	w4, w11, w4, lsl #8
    1000:	str	w4, [x19, #3184]
    1004:	sub	w1, w1, #0x1
    1008:	add	w3, w3, #0x1
    100c:	add	x6, x6, #0x1
    1010:	str	x6, [x0, #24]
    1014:	stp	w1, w3, [x0, #32]
    1018:	cbnz	w3, 1028 <BZ2_bzDecompress+0x398>
    101c:	ldr	w3, [x0, #40]
    1020:	add	w3, w3, #0x1
    1024:	str	w3, [x0, #40]
    1028:	cbnz	w1, f28 <BZ2_bzDecompress+0x298>
    102c:	b	d84 <BZ2_bzDecompress+0xf4>
    1030:	str	w9, [x19, #16]
    1034:	cmp	w13, w4
    1038:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    103c:	ldr	w12, [x14, x4, lsl #2]
    1040:	lsr	w11, w12, #8
    1044:	str	w11, [x19, #60]
    1048:	cbnz	w1, 1060 <BZ2_bzDecompress+0x3d0>
    104c:	ldr	w1, [x19, #28]
    1050:	cmp	w1, #0x1ff
    1054:	csinc	w4, wzr, w1, eq  // eq = none
    1058:	ldr	w1, [x7, w1, sxtw #2]
    105c:	stp	w1, w4, [x19, #24]
    1060:	sub	w1, w1, #0x1
    1064:	add	w6, w3, #0x2
    1068:	cmp	w1, #0x1
    106c:	str	w1, [x19, #24]
    1070:	cset	w4, eq  // eq = none
    1074:	str	w6, [x19, #1092]
    1078:	eor	w4, w4, w12
    107c:	cmp	w15, w6
    1080:	and	w4, w4, #0xff
    1084:	b.eq	11c4 <BZ2_bzDecompress+0x534>  // b.none
    1088:	cmp	w2, w4
    108c:	b.ne	11a0 <BZ2_bzDecompress+0x510>  // b.any
    1090:	str	w10, [x19, #16]
    1094:	cmp	w13, w11
    1098:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    109c:	ldr	w12, [x14, x11, lsl #2]
    10a0:	lsr	w11, w12, #8
    10a4:	str	w11, [x19, #60]
    10a8:	cbnz	w1, 10c0 <BZ2_bzDecompress+0x430>
    10ac:	ldr	w1, [x19, #28]
    10b0:	cmp	w1, #0x1ff
    10b4:	csinc	w4, wzr, w1, eq  // eq = none
    10b8:	ldr	w1, [x7, w1, sxtw #2]
    10bc:	stp	w1, w4, [x19, #24]
    10c0:	sub	w1, w1, #0x1
    10c4:	add	w6, w3, #0x3
    10c8:	cmp	w1, #0x1
    10cc:	str	w1, [x19, #24]
    10d0:	cset	w4, eq  // eq = none
    10d4:	str	w6, [x19, #1092]
    10d8:	eor	w4, w4, w12
    10dc:	cmp	w15, w6
    10e0:	and	w4, w4, #0xff
    10e4:	b.eq	11c4 <BZ2_bzDecompress+0x534>  // b.none
    10e8:	cmp	w2, w4
    10ec:	b.ne	11a0 <BZ2_bzDecompress+0x510>  // b.any
    10f0:	cmp	w13, w11
    10f4:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    10f8:	ldr	w6, [x14, x11, lsl #2]
    10fc:	lsr	w4, w6, #8
    1100:	str	w4, [x19, #60]
    1104:	cbnz	w1, 111c <BZ2_bzDecompress+0x48c>
    1108:	ldr	w1, [x19, #28]
    110c:	cmp	w1, #0x1ff
    1110:	csinc	w2, wzr, w1, eq  // eq = none
    1114:	ldr	w1, [x7, w1, sxtw #2]
    1118:	stp	w1, w2, [x19, #24]
    111c:	sub	w1, w1, #0x1
    1120:	add	w11, w3, #0x4
    1124:	cmp	w1, #0x1
    1128:	str	w1, [x19, #24]
    112c:	cset	w2, eq  // eq = none
    1130:	str	w11, [x19, #1092]
    1134:	eor	w2, w2, w6
    1138:	cmp	w13, w4
    113c:	and	w2, w2, #0xff
    1140:	add	w2, w2, #0x4
    1144:	str	w2, [x19, #16]
    1148:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    114c:	ldr	w4, [x14, x4, lsl #2]
    1150:	and	w6, w4, #0xff
    1154:	lsr	w4, w4, #8
    1158:	stp	w4, w6, [x19, #60]
    115c:	cbnz	w1, 1174 <BZ2_bzDecompress+0x4e4>
    1160:	ldr	w1, [x19, #28]
    1164:	cmp	w1, #0x1ff
    1168:	csinc	w4, wzr, w1, eq  // eq = none
    116c:	ldr	w1, [x7, w1, sxtw #2]
    1170:	stp	w1, w4, [x19, #24]
    1174:	sub	w1, w1, #0x1
    1178:	str	w1, [x19, #24]
    117c:	cmp	w1, #0x1
    1180:	add	w3, w3, #0x5
    1184:	cset	w1, eq  // eq = none
    1188:	str	w3, [x19, #1092]
    118c:	eor	w1, w1, w6
    1190:	str	w1, [x19, #64]
    1194:	ldr	w1, [x0, #32]
    1198:	cbnz	w1, f28 <BZ2_bzDecompress+0x298>
    119c:	b	d84 <BZ2_bzDecompress+0xf4>
    11a0:	ldr	w1, [x0, #32]
    11a4:	str	w4, [x19, #64]
    11a8:	cbnz	w1, fc8 <BZ2_bzDecompress+0x338>
    11ac:	mov	w22, #0x0                   	// #0
    11b0:	mov	w0, w22
    11b4:	ldp	x19, x20, [sp, #16]
    11b8:	ldp	x21, x22, [sp, #32]
    11bc:	ldp	x29, x30, [sp], #64
    11c0:	ret
    11c4:	ldr	w1, [x0, #32]
    11c8:	cbnz	w1, fc8 <BZ2_bzDecompress+0x338>
    11cc:	b	d84 <BZ2_bzDecompress+0xf4>
    11d0:	ldr	w1, [x0, #32]
    11d4:	cbnz	w1, d24 <BZ2_bzDecompress+0x94>
    11d8:	b	d84 <BZ2_bzDecompress+0xf4>
    11dc:	str	w9, [x19, #16]
    11e0:	cmp	w15, w3
    11e4:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    11e8:	mov	w4, #0x0                   	// #0
    11ec:	mov	w6, #0x100                 	// #256
    11f0:	add	w1, w6, w4
    11f4:	asr	w1, w1, #1
    11f8:	sub	w22, w6, w1
    11fc:	sub	w18, w1, w4
    1200:	ldr	w13, [x7, w1, sxtw #2]
    1204:	cmp	w3, w13
    1208:	b.lt	1234 <BZ2_bzDecompress+0x5a4>  // b.tstop
    120c:	cmp	w22, #0x1
    1210:	b.eq	1248 <BZ2_bzDecompress+0x5b8>  // b.none
    1214:	mov	w4, w1
    1218:	add	w1, w6, w4
    121c:	asr	w1, w1, #1
    1220:	sub	w22, w6, w1
    1224:	sub	w18, w1, w4
    1228:	ldr	w13, [x7, w1, sxtw #2]
    122c:	cmp	w3, w13
    1230:	b.ge	120c <BZ2_bzDecompress+0x57c>  // b.tcont
    1234:	cmp	w18, #0x1
    1238:	b.eq	1244 <BZ2_bzDecompress+0x5b4>  // b.none
    123c:	mov	w6, w1
    1240:	b	11f0 <BZ2_bzDecompress+0x560>
    1244:	mov	w1, w4
    1248:	lsr	w4, w3, #1
    124c:	ubfiz	x13, x3, #1, #20
    1250:	ubfiz	w3, w3, #2, #1
    1254:	add	w6, w14, #0x2
    1258:	cmp	w17, w6
    125c:	ldrb	w4, [x12, w4, uxtw]
    1260:	ldrh	w13, [x11, x13]
    1264:	str	w6, [x19, #1092]
    1268:	lsr	w3, w4, w3
    126c:	ubfiz	w3, w3, #16, #4
    1270:	orr	w3, w3, w13
    1274:	str	w3, [x19, #60]
    1278:	b.eq	11d0 <BZ2_bzDecompress+0x540>  // b.none
    127c:	cmp	w16, w1, uxtb
    1280:	and	w1, w1, #0xff
    1284:	b.eq	1728 <BZ2_bzDecompress+0xa98>  // b.none
    1288:	ldr	w2, [x0, #32]
    128c:	str	w1, [x19, #64]
    1290:	cbnz	w2, d24 <BZ2_bzDecompress+0x94>
    1294:	b	11ac <BZ2_bzDecompress+0x51c>
    1298:	ldr	x23, [sp, #48]
    129c:	mov	w22, #0xfffffffc            	// #-4
    12a0:	ldp	x19, x20, [sp, #16]
    12a4:	mov	w0, w22
    12a8:	ldp	x21, x22, [sp, #32]
    12ac:	ldp	x29, x30, [sp], #64
    12b0:	ret
    12b4:	adrp	x0, 0 <stderr>
    12b8:	ldr	w2, [x19, #3176]
    12bc:	adrp	x1, 0 <add_pair_to_block>
    12c0:	add	x1, x1, #0x0
    12c4:	ldr	x0, [x0]
    12c8:	bl	0 <fprintf>
    12cc:	ldr	w0, [x19, #52]
    12d0:	b	db8 <BZ2_bzDecompress+0x128>
    12d4:	add	x5, x19, #0xc, lsl #12
    12d8:	ldr	w2, [x19, #40]
    12dc:	ldr	w12, [x19, #16]
    12e0:	mov	w6, w11
    12e4:	ldrb	w9, [x19, #12]
    12e8:	ldr	w17, [x5, #14928]
    12ec:	cmp	w12, #0x0
    12f0:	ldp	w8, w15, [x19, #60]
    12f4:	mul	w14, w2, w21
    12f8:	ldr	w13, [x19, #1092]
    12fc:	add	w18, w17, #0x1
    1300:	ldr	w7, [x19, #3184]
    1304:	ldr	x10, [x0, #24]
    1308:	ldr	x16, [x19, #3152]
    130c:	b.gt	13e0 <BZ2_bzDecompress+0x750>
    1310:	cmp	w18, w13
    1314:	b.lt	129c <BZ2_bzDecompress+0x60c>  // b.tstop
    1318:	b.eq	1c68 <BZ2_bzDecompress+0xfd8>  // b.none
    131c:	cmp	w14, w8
    1320:	and	w9, w15, #0xff
    1324:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    1328:	ldr	w2, [x16, w8, uxtw #2]
    132c:	and	w3, w2, #0xff
    1330:	cmp	w15, w2, uxtb
    1334:	lsr	w8, w2, #8
    1338:	b.ne	19d0 <BZ2_bzDecompress+0xd40>  // b.any
    133c:	cmp	w17, w13
    1340:	b.eq	19c8 <BZ2_bzDecompress+0xd38>  // b.none
    1344:	cmp	w14, w8
    1348:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    134c:	mov	w2, w8
    1350:	add	w4, w13, #0x2
    1354:	cmp	w18, w4
    1358:	ldr	w3, [x16, x2, lsl #2]
    135c:	lsr	w8, w3, #8
    1360:	b.eq	1918 <BZ2_bzDecompress+0xc88>  // b.none
    1364:	cmp	w15, w3, uxtb
    1368:	and	w3, w3, #0xff
    136c:	b.ne	1914 <BZ2_bzDecompress+0xc84>  // b.any
    1370:	cmp	w14, w8
    1374:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    1378:	mov	w2, w8
    137c:	add	w4, w13, #0x3
    1380:	cmp	w18, w4
    1384:	ldr	w0, [x16, x2, lsl #2]
    1388:	lsr	w8, w0, #8
    138c:	b.eq	19e8 <BZ2_bzDecompress+0xd58>  // b.none
    1390:	cmp	w15, w0, uxtb
    1394:	and	w15, w0, #0xff
    1398:	b.ne	19e8 <BZ2_bzDecompress+0xd58>  // b.any
    139c:	cmp	w14, w8
    13a0:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    13a4:	mov	w2, w8
    13a8:	ldr	w0, [x16, x2, lsl #2]
    13ac:	and	w12, w0, #0xff
    13b0:	cmp	w14, w0, lsr #8
    13b4:	add	w12, w12, #0x4
    13b8:	lsr	w0, w0, #8
    13bc:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    13c0:	ldr	w2, [x16, x0, lsl #2]
    13c4:	add	w4, w13, #0x5
    13c8:	mov	w13, w4
    13cc:	and	w15, w2, #0xff
    13d0:	lsr	w8, w2, #8
    13d4:	nop
    13d8:	cmp	w12, #0x0
    13dc:	b.le	1310 <BZ2_bzDecompress+0x680>
    13e0:	cbz	w6, 1c54 <BZ2_bzDecompress+0xfc4>
    13e4:	cmp	w12, #0x1
    13e8:	mov	w22, w9
    13ec:	b.eq	19a4 <BZ2_bzDecompress+0xd14>  // b.none
    13f0:	add	w3, w6, #0x1
    13f4:	mov	w0, w6
    13f8:	sub	w3, w3, w12
    13fc:	sub	w4, w12, w6
    1400:	b	1408 <BZ2_bzDecompress+0x778>
    1404:	b.eq	19a8 <BZ2_bzDecompress+0xd18>  // b.none
    1408:	eor	w1, w9, w7, lsr #24
    140c:	strb	w9, [x10], #1
    1410:	sub	w0, w0, #0x1
    1414:	add	w12, w4, w0
    1418:	cmp	w0, w3
    141c:	ldr	w2, [x20, x1, lsl #2]
    1420:	eor	w7, w2, w7, lsl #8
    1424:	cbnz	w0, 1404 <BZ2_bzDecompress+0x774>
    1428:	ldr	x3, [x19]
    142c:	ldr	w2, [x3, #36]
    1430:	add	w1, w2, w11
    1434:	sub	w1, w1, w0
    1438:	str	w1, [x3, #36]
    143c:	cmp	w2, w1
    1440:	b.ls	1450 <BZ2_bzDecompress+0x7c0>  // b.plast
    1444:	ldr	w1, [x3, #40]
    1448:	add	w1, w1, #0x1
    144c:	str	w1, [x3, #40]
    1450:	strb	w9, [x19, #12]
    1454:	str	w12, [x19, #16]
    1458:	stp	w8, w15, [x19, #60]
    145c:	str	w13, [x19, #1092]
    1460:	str	x16, [x19, #3152]
    1464:	str	w7, [x19, #3184]
    1468:	str	x10, [x3, #24]
    146c:	str	w0, [x3, #32]
    1470:	b	d88 <BZ2_bzDecompress+0xf8>
    1474:	cbz	w11, 1c40 <BZ2_bzDecompress+0xfb0>
    1478:	adrp	x12, 0 <BZ2_rNums>
    147c:	add	x5, x19, #0xc, lsl #12
    1480:	add	x12, x12, #0x0
    1484:	add	x10, x19, #0x448
    1488:	ldr	w9, [x19, #16]
    148c:	mov	w11, #0x1                   	// #1
    1490:	mov	w13, #0x2                   	// #2
    1494:	mov	w14, #0x3                   	// #3
    1498:	str	x23, [sp, #48]
    149c:	nop
    14a0:	cbz	w9, 1510 <BZ2_bzDecompress+0x880>
    14a4:	ldr	x0, [x0, #24]
    14a8:	ldrb	w1, [x19, #12]
    14ac:	strb	w1, [x0]
    14b0:	ldr	w3, [x19, #3184]
    14b4:	ldr	x0, [x19]
    14b8:	eor	w1, w1, w3, lsr #24
    14bc:	ldr	w9, [x19, #16]
    14c0:	ldr	x4, [x0, #24]
    14c4:	sub	w9, w9, #0x1
    14c8:	ldr	w6, [x20, x1, lsl #2]
    14cc:	ldp	w1, w2, [x0, #32]
    14d0:	str	w9, [x19, #16]
    14d4:	eor	w3, w6, w3, lsl #8
    14d8:	str	w3, [x19, #3184]
    14dc:	sub	w1, w1, #0x1
    14e0:	add	w2, w2, #0x1
    14e4:	add	x4, x4, #0x1
    14e8:	str	x4, [x0, #24]
    14ec:	stp	w1, w2, [x0, #32]
    14f0:	cbnz	w2, 1500 <BZ2_bzDecompress+0x870>
    14f4:	ldr	w2, [x0, #40]
    14f8:	add	w2, w2, #0x1
    14fc:	str	w2, [x0, #40]
    1500:	cbnz	w1, 14a0 <BZ2_bzDecompress+0x810>
    1504:	ldr	w13, [x19, #1092]
    1508:	ldr	x23, [sp, #48]
    150c:	b	d88 <BZ2_bzDecompress+0xf8>
    1510:	ldr	w18, [x5, #14928]
    1514:	ldr	w15, [x19, #1092]
    1518:	add	w17, w18, #0x1
    151c:	cmp	w15, w17
    1520:	b.eq	19c0 <BZ2_bzDecompress+0xd30>  // b.none
    1524:	b.gt	1298 <BZ2_bzDecompress+0x608>
    1528:	ldr	w16, [x19, #40]
    152c:	ldp	w3, w30, [x19, #60]
    1530:	strb	w30, [x19, #12]
    1534:	str	w11, [x19, #16]
    1538:	mul	w16, w16, w21
    153c:	cmp	w3, w16
    1540:	b.cs	1298 <BZ2_bzDecompress+0x608>  // b.hs, b.nlast
    1544:	mov	w1, #0x0                   	// #0
    1548:	mov	w2, #0x100                 	// #256
    154c:	nop
    1550:	add	w4, w2, w1
    1554:	asr	w4, w4, #1
    1558:	sub	w7, w2, w4
    155c:	sub	w6, w4, w1
    1560:	ldr	w8, [x10, w4, sxtw #2]
    1564:	cmp	w3, w8
    1568:	b.lt	1594 <BZ2_bzDecompress+0x904>  // b.tstop
    156c:	cmp	w7, #0x1
    1570:	b.eq	15a8 <BZ2_bzDecompress+0x918>  // b.none
    1574:	mov	w1, w4
    1578:	add	w4, w2, w1
    157c:	asr	w4, w4, #1
    1580:	sub	w7, w2, w4
    1584:	sub	w6, w4, w1
    1588:	ldr	w8, [x10, w4, sxtw #2]
    158c:	cmp	w3, w8
    1590:	b.ge	156c <BZ2_bzDecompress+0x8dc>  // b.tcont
    1594:	cmp	w6, #0x1
    1598:	b.eq	15a4 <BZ2_bzDecompress+0x914>  // b.none
    159c:	mov	w2, w4
    15a0:	b	1550 <BZ2_bzDecompress+0x8c0>
    15a4:	mov	w4, w1
    15a8:	ldr	x8, [x19, #3168]
    15ac:	lsr	w1, w3, #1
    15b0:	ldr	x7, [x19, #3160]
    15b4:	ubfiz	w6, w3, #2, #1
    15b8:	ldrb	w1, [x8, w1, uxtw]
    15bc:	ldr	w2, [x19, #24]
    15c0:	ldrh	w3, [x7, w3, uxtw #1]
    15c4:	lsr	w1, w1, w6
    15c8:	ubfiz	w1, w1, #16, #4
    15cc:	orr	w1, w1, w3
    15d0:	str	w1, [x19, #60]
    15d4:	cbnz	w2, 15ec <BZ2_bzDecompress+0x95c>
    15d8:	ldr	w2, [x19, #28]
    15dc:	cmp	w2, #0x1ff
    15e0:	csinc	w3, wzr, w2, eq  // eq = none
    15e4:	ldr	w2, [x12, w2, sxtw #2]
    15e8:	stp	w2, w3, [x19, #24]
    15ec:	sub	w22, w2, #0x1
    15f0:	add	w3, w15, #0x1
    15f4:	cmp	w22, #0x1
    15f8:	str	w22, [x19, #24]
    15fc:	cset	w2, eq  // eq = none
    1600:	str	w3, [x19, #1092]
    1604:	eor	w4, w2, w4
    1608:	cmp	w15, w18
    160c:	and	w4, w4, #0xff
    1610:	b.eq	162c <BZ2_bzDecompress+0x99c>  // b.none
    1614:	cmp	w30, w4
    1618:	b.eq	1638 <BZ2_bzDecompress+0x9a8>  // b.none
    161c:	ldr	w1, [x0, #32]
    1620:	str	w4, [x19, #64]
    1624:	cbnz	w1, 14a4 <BZ2_bzDecompress+0x814>
    1628:	b	1504 <BZ2_bzDecompress+0x874>
    162c:	ldr	w1, [x0, #32]
    1630:	cbnz	w1, 14a4 <BZ2_bzDecompress+0x814>
    1634:	b	1504 <BZ2_bzDecompress+0x874>
    1638:	str	w13, [x19, #16]
    163c:	cmp	w16, w1
    1640:	b.ls	1298 <BZ2_bzDecompress+0x608>  // b.plast
    1644:	mov	w2, #0x0                   	// #0
    1648:	mov	w3, #0x100                 	// #256
    164c:	nop
    1650:	add	w6, w3, w2
    1654:	asr	w6, w6, #1
    1658:	sub	w23, w3, w6
    165c:	sub	w30, w6, w2
    1660:	ldr	w18, [x10, w6, sxtw #2]
    1664:	cmp	w1, w18
    1668:	b.lt	1694 <BZ2_bzDecompress+0xa04>  // b.tstop
    166c:	cmp	w23, #0x1
    1670:	b.eq	16a8 <BZ2_bzDecompress+0xa18>  // b.none
    1674:	mov	w2, w6
    1678:	add	w6, w3, w2
    167c:	asr	w6, w6, #1
    1680:	sub	w23, w3, w6
    1684:	sub	w30, w6, w2
    1688:	ldr	w18, [x10, w6, sxtw #2]
    168c:	cmp	w1, w18
    1690:	b.ge	166c <BZ2_bzDecompress+0x9dc>  // b.tcont
    1694:	cmp	w30, #0x1
    1698:	b.eq	16a4 <BZ2_bzDecompress+0xa14>  // b.none
    169c:	mov	w3, w6
    16a0:	b	1650 <BZ2_bzDecompress+0x9c0>
    16a4:	mov	w6, w2
    16a8:	lsr	w2, w1, #1
    16ac:	ubfiz	x3, x1, #1, #20
    16b0:	ubfiz	w1, w1, #2, #1
    16b4:	ldrb	w2, [x8, w2, uxtw]
    16b8:	ldrh	w23, [x7, x3]
    16bc:	lsr	w1, w2, w1
    16c0:	ubfiz	w1, w1, #16, #4
    16c4:	orr	w23, w1, w23
    16c8:	str	w23, [x19, #60]
    16cc:	cbnz	w22, 16e4 <BZ2_bzDecompress+0xa54>
    16d0:	ldr	w1, [x19, #28]
    16d4:	cmp	w1, #0x1ff
    16d8:	csinc	w2, wzr, w1, eq  // eq = none
    16dc:	ldr	w22, [x12, w1, sxtw #2]
    16e0:	stp	w22, w2, [x19, #24]
    16e4:	sub	w2, w22, #0x1
    16e8:	add	w3, w15, #0x2
    16ec:	cmp	w2, #0x1
    16f0:	str	w2, [x19, #24]
    16f4:	cset	w1, eq  // eq = none
    16f8:	str	w3, [x19, #1092]
    16fc:	eor	w6, w1, w6
    1700:	cmp	w17, w3
    1704:	and	w6, w6, #0xff
    1708:	b.eq	162c <BZ2_bzDecompress+0x99c>  // b.none
    170c:	cmp	w4, w6
    1710:	b.eq	1794 <BZ2_bzDecompress+0xb04>  // b.none
    1714:	ldr	w1, [x0, #32]
    1718:	str	w6, [x19, #64]
    171c:	cbnz	w1, 14a4 <BZ2_bzDecompress+0x814>
    1720:	ldr	x23, [sp, #48]
    1724:	b	11ac <BZ2_bzDecompress+0x51c>
    1728:	str	w10, [x19, #16]
    172c:	cmp	w15, w3
    1730:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    1734:	mov	w4, #0x0                   	// #0
    1738:	mov	w6, #0x100                 	// #256
    173c:	nop
    1740:	add	w1, w6, w4
    1744:	asr	w1, w1, #1
    1748:	sub	w22, w6, w1
    174c:	sub	w18, w1, w4
    1750:	ldr	w13, [x7, w1, sxtw #2]
    1754:	cmp	w3, w13
    1758:	b.lt	1784 <BZ2_bzDecompress+0xaf4>  // b.tstop
    175c:	cmp	w22, #0x1
    1760:	b.eq	1870 <BZ2_bzDecompress+0xbe0>  // b.none
    1764:	mov	w4, w1
    1768:	add	w1, w6, w4
    176c:	asr	w1, w1, #1
    1770:	sub	w22, w6, w1
    1774:	sub	w18, w1, w4
    1778:	ldr	w13, [x7, w1, sxtw #2]
    177c:	cmp	w3, w13
    1780:	b.ge	175c <BZ2_bzDecompress+0xacc>  // b.tcont
    1784:	cmp	w18, #0x1
    1788:	b.eq	186c <BZ2_bzDecompress+0xbdc>  // b.none
    178c:	mov	w6, w1
    1790:	b	1740 <BZ2_bzDecompress+0xab0>
    1794:	str	w14, [x19, #16]
    1798:	cmp	w16, w23
    179c:	b.ls	1298 <BZ2_bzDecompress+0x608>  // b.plast
    17a0:	mov	w3, #0x0                   	// #0
    17a4:	mov	w6, #0x100                 	// #256
    17a8:	add	w18, w6, w3
    17ac:	asr	w18, w18, #1
    17b0:	sub	w30, w6, w18
    17b4:	sub	w22, w18, w3
    17b8:	ldr	w1, [x10, w18, sxtw #2]
    17bc:	cmp	w23, w1
    17c0:	b.lt	17ec <BZ2_bzDecompress+0xb5c>  // b.tstop
    17c4:	cmp	w30, #0x1
    17c8:	b.eq	1800 <BZ2_bzDecompress+0xb70>  // b.none
    17cc:	mov	w3, w18
    17d0:	add	w18, w6, w3
    17d4:	asr	w18, w18, #1
    17d8:	sub	w30, w6, w18
    17dc:	sub	w22, w18, w3
    17e0:	ldr	w1, [x10, w18, sxtw #2]
    17e4:	cmp	w23, w1
    17e8:	b.ge	17c4 <BZ2_bzDecompress+0xb34>  // b.tcont
    17ec:	cmp	w22, #0x1
    17f0:	b.eq	17fc <BZ2_bzDecompress+0xb6c>  // b.none
    17f4:	mov	w6, w18
    17f8:	b	17a8 <BZ2_bzDecompress+0xb18>
    17fc:	mov	w18, w3
    1800:	lsr	w3, w23, #1
    1804:	ubfiz	x6, x23, #1, #20
    1808:	ubfiz	w1, w23, #2, #1
    180c:	ldrb	w3, [x8, w3, uxtw]
    1810:	ldrh	w6, [x7, x6]
    1814:	lsr	w3, w3, w1
    1818:	ubfiz	w3, w3, #16, #4
    181c:	orr	w3, w3, w6
    1820:	str	w3, [x19, #60]
    1824:	cbz	w2, 1924 <BZ2_bzDecompress+0xc94>
    1828:	sub	w2, w2, #0x1
    182c:	add	w6, w15, #0x3
    1830:	cmp	w2, #0x1
    1834:	str	w2, [x19, #24]
    1838:	cset	w1, eq  // eq = none
    183c:	str	w6, [x19, #1092]
    1840:	eor	w1, w1, w18
    1844:	cmp	w17, w6
    1848:	and	w1, w1, #0xff
    184c:	b.eq	162c <BZ2_bzDecompress+0x99c>  // b.none
    1850:	cmp	w4, w1
    1854:	b.eq	193c <BZ2_bzDecompress+0xcac>  // b.none
    1858:	ldr	w2, [x0, #32]
    185c:	str	w1, [x19, #64]
    1860:	cbnz	w2, 14a4 <BZ2_bzDecompress+0x814>
    1864:	ldr	x23, [sp, #48]
    1868:	b	11ac <BZ2_bzDecompress+0x51c>
    186c:	mov	w1, w4
    1870:	lsr	w4, w3, #1
    1874:	ubfiz	x13, x3, #1, #20
    1878:	ubfiz	w3, w3, #2, #1
    187c:	add	w6, w14, #0x3
    1880:	cmp	w17, w6
    1884:	ldrb	w4, [x12, w4, uxtw]
    1888:	ldrh	w13, [x11, x13]
    188c:	str	w6, [x19, #1092]
    1890:	lsr	w3, w4, w3
    1894:	ubfiz	w3, w3, #16, #4
    1898:	orr	w3, w3, w13
    189c:	str	w3, [x19, #60]
    18a0:	b.eq	11d0 <BZ2_bzDecompress+0x540>  // b.none
    18a4:	cmp	w16, w1, uxtb
    18a8:	and	w1, w1, #0xff
    18ac:	b.ne	1288 <BZ2_bzDecompress+0x5f8>  // b.any
    18b0:	cmp	w15, w3
    18b4:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    18b8:	mov	w4, #0x0                   	// #0
    18bc:	mov	w6, #0x100                 	// #256
    18c0:	add	w1, w6, w4
    18c4:	asr	w1, w1, #1
    18c8:	sub	w17, w6, w1
    18cc:	sub	w16, w1, w4
    18d0:	ldr	w13, [x7, w1, sxtw #2]
    18d4:	cmp	w3, w13
    18d8:	b.lt	1904 <BZ2_bzDecompress+0xc74>  // b.tstop
    18dc:	cmp	w17, #0x1
    18e0:	b.eq	19f8 <BZ2_bzDecompress+0xd68>  // b.none
    18e4:	mov	w4, w1
    18e8:	add	w1, w6, w4
    18ec:	asr	w1, w1, #1
    18f0:	sub	w17, w6, w1
    18f4:	sub	w16, w1, w4
    18f8:	ldr	w13, [x7, w1, sxtw #2]
    18fc:	cmp	w3, w13
    1900:	b.ge	18dc <BZ2_bzDecompress+0xc4c>  // b.tcont
    1904:	cmp	w16, #0x1
    1908:	b.eq	19f4 <BZ2_bzDecompress+0xd64>  // b.none
    190c:	mov	w6, w1
    1910:	b	18c0 <BZ2_bzDecompress+0xc30>
    1914:	mov	w15, w3
    1918:	mov	w13, w4
    191c:	mov	w12, #0x2                   	// #2
    1920:	b	13d8 <BZ2_bzDecompress+0x748>
    1924:	ldr	w1, [x19, #28]
    1928:	cmp	w1, #0x1ff
    192c:	csinc	w6, wzr, w1, eq  // eq = none
    1930:	ldr	w2, [x12, w1, sxtw #2]
    1934:	stp	w2, w6, [x19, #24]
    1938:	b	1828 <BZ2_bzDecompress+0xb98>
    193c:	cmp	w16, w3
    1940:	b.ls	1298 <BZ2_bzDecompress+0x608>  // b.plast
    1944:	mov	w4, #0x0                   	// #0
    1948:	mov	w6, #0x100                 	// #256
    194c:	nop
    1950:	add	w1, w6, w4
    1954:	asr	w1, w1, #1
    1958:	sub	w22, w6, w1
    195c:	sub	w18, w1, w4
    1960:	ldr	w17, [x10, w1, sxtw #2]
    1964:	cmp	w3, w17
    1968:	b.lt	1994 <BZ2_bzDecompress+0xd04>  // b.tstop
    196c:	cmp	w22, #0x1
    1970:	b.eq	1a98 <BZ2_bzDecompress+0xe08>  // b.none
    1974:	mov	w4, w1
    1978:	add	w1, w6, w4
    197c:	asr	w1, w1, #1
    1980:	sub	w22, w6, w1
    1984:	sub	w18, w1, w4
    1988:	ldr	w17, [x10, w1, sxtw #2]
    198c:	cmp	w3, w17
    1990:	b.ge	196c <BZ2_bzDecompress+0xcdc>  // b.tcont
    1994:	cmp	w18, #0x1
    1998:	b.eq	1a94 <BZ2_bzDecompress+0xe04>  // b.none
    199c:	mov	w6, w1
    19a0:	b	1950 <BZ2_bzDecompress+0xcc0>
    19a4:	mov	w0, w6
    19a8:	eor	w22, w22, w7, lsr #24
    19ac:	strb	w9, [x10], #1
    19b0:	sub	w6, w0, #0x1
    19b4:	ldr	w0, [x20, x22, lsl #2]
    19b8:	eor	w7, w0, w7, lsl #8
    19bc:	b	1310 <BZ2_bzDecompress+0x680>
    19c0:	ldr	x23, [sp, #48]
    19c4:	b	da0 <BZ2_bzDecompress+0x110>
    19c8:	mov	w3, w15
    19cc:	nop
    19d0:	add	w13, w13, #0x1
    19d4:	cbnz	w6, 1c9c <BZ2_bzDecompress+0x100c>
    19d8:	mov	w15, w3
    19dc:	mov	w0, #0x0                   	// #0
    19e0:	mov	w12, #0x1                   	// #1
    19e4:	b	1428 <BZ2_bzDecompress+0x798>
    19e8:	mov	w13, w4
    19ec:	mov	w12, #0x3                   	// #3
    19f0:	b	13d8 <BZ2_bzDecompress+0x748>
    19f4:	mov	w1, w4
    19f8:	lsr	w6, w3, #1
    19fc:	ubfiz	x13, x3, #1, #20
    1a00:	ubfiz	w3, w3, #2, #1
    1a04:	and	w1, w1, #0xff
    1a08:	add	w1, w1, #0x4
    1a0c:	add	w4, w14, #0x4
    1a10:	ldrb	w6, [x12, w6, uxtw]
    1a14:	ldrh	w13, [x11, x13]
    1a18:	str	w1, [x19, #16]
    1a1c:	lsr	w3, w6, w3
    1a20:	str	w4, [x19, #1092]
    1a24:	ubfiz	w6, w3, #16, #4
    1a28:	orr	w6, w6, w13
    1a2c:	str	w6, [x19, #60]
    1a30:	cmp	w15, w6
    1a34:	b.ls	129c <BZ2_bzDecompress+0x60c>  // b.plast
    1a38:	mov	w4, #0x100                 	// #256
    1a3c:	nop
    1a40:	add	w3, w4, w2
    1a44:	asr	w3, w3, #1
    1a48:	sub	w16, w4, w3
    1a4c:	sub	w15, w3, w2
    1a50:	ldr	w13, [x7, w3, sxtw #2]
    1a54:	cmp	w6, w13
    1a58:	b.lt	1a84 <BZ2_bzDecompress+0xdf4>  // b.tstop
    1a5c:	cmp	w16, #0x1
    1a60:	b.eq	1bc4 <BZ2_bzDecompress+0xf34>  // b.none
    1a64:	mov	w2, w3
    1a68:	add	w3, w4, w2
    1a6c:	asr	w3, w3, #1
    1a70:	sub	w16, w4, w3
    1a74:	sub	w15, w3, w2
    1a78:	ldr	w13, [x7, w3, sxtw #2]
    1a7c:	cmp	w6, w13
    1a80:	b.ge	1a5c <BZ2_bzDecompress+0xdcc>  // b.tcont
    1a84:	cmp	w15, #0x1
    1a88:	b.eq	1bc0 <BZ2_bzDecompress+0xf30>  // b.none
    1a8c:	mov	w4, w3
    1a90:	b	1a40 <BZ2_bzDecompress+0xdb0>
    1a94:	mov	w1, w4
    1a98:	lsr	w4, w3, #1
    1a9c:	ubfiz	x6, x3, #1, #20
    1aa0:	ubfiz	w3, w3, #2, #1
    1aa4:	ldrb	w4, [x8, w4, uxtw]
    1aa8:	ldrh	w6, [x7, x6]
    1aac:	lsr	w3, w4, w3
    1ab0:	ubfiz	w4, w3, #16, #4
    1ab4:	orr	w4, w4, w6
    1ab8:	str	w4, [x19, #60]
    1abc:	cbz	w2, 1c04 <BZ2_bzDecompress+0xf74>
    1ac0:	sub	w2, w2, #0x1
    1ac4:	add	w6, w15, #0x4
    1ac8:	cmp	w2, #0x1
    1acc:	str	w2, [x19, #24]
    1ad0:	cset	w3, eq  // eq = none
    1ad4:	str	w6, [x19, #1092]
    1ad8:	eor	w1, w3, w1
    1adc:	cmp	w16, w4
    1ae0:	and	w1, w1, #0xff
    1ae4:	add	w18, w1, #0x4
    1ae8:	str	w18, [x19, #16]
    1aec:	b.ls	1298 <BZ2_bzDecompress+0x608>  // b.plast
    1af0:	mov	w1, #0x100                 	// #256
    1af4:	nop
    1af8:	add	w3, w1, w9
    1afc:	asr	w3, w3, #1
    1b00:	sub	w17, w1, w3
    1b04:	sub	w16, w3, w9
    1b08:	ldr	w6, [x10, w3, sxtw #2]
    1b0c:	cmp	w4, w6
    1b10:	b.lt	1b3c <BZ2_bzDecompress+0xeac>  // b.tstop
    1b14:	cmp	w17, #0x1
    1b18:	b.eq	1b50 <BZ2_bzDecompress+0xec0>  // b.none
    1b1c:	mov	w9, w3
    1b20:	add	w3, w1, w9
    1b24:	asr	w3, w3, #1
    1b28:	sub	w17, w1, w3
    1b2c:	sub	w16, w3, w9
    1b30:	ldr	w6, [x10, w3, sxtw #2]
    1b34:	cmp	w4, w6
    1b38:	b.ge	1b14 <BZ2_bzDecompress+0xe84>  // b.tcont
    1b3c:	cmp	w16, #0x1
    1b40:	b.eq	1b4c <BZ2_bzDecompress+0xebc>  // b.none
    1b44:	mov	w1, w3
    1b48:	b	1af8 <BZ2_bzDecompress+0xe68>
    1b4c:	mov	w3, w9
    1b50:	ubfiz	x6, x4, #1, #20
    1b54:	lsr	w1, w4, #1
    1b58:	ubfiz	w4, w4, #2, #1
    1b5c:	ldrh	w6, [x7, x6]
    1b60:	str	w3, [x19, #64]
    1b64:	ldrb	w1, [x8, w1, uxtw]
    1b68:	lsr	w1, w1, w4
    1b6c:	ubfiz	w1, w1, #16, #4
    1b70:	orr	w1, w1, w6
    1b74:	str	w1, [x19, #60]
    1b78:	cbnz	w2, 1b90 <BZ2_bzDecompress+0xf00>
    1b7c:	ldr	w1, [x19, #28]
    1b80:	cmp	w1, #0x1ff
    1b84:	csinc	w4, wzr, w1, eq  // eq = none
    1b88:	ldr	w2, [x12, w1, sxtw #2]
    1b8c:	stp	w2, w4, [x19, #24]
    1b90:	sub	w2, w2, #0x1
    1b94:	add	w1, w15, #0x5
    1b98:	cmp	w2, #0x1
    1b9c:	str	w1, [x19, #1092]
    1ba0:	ldr	w1, [x0, #32]
    1ba4:	cset	w4, eq  // eq = none
    1ba8:	eor	w3, w4, w3
    1bac:	str	w2, [x19, #24]
    1bb0:	str	w3, [x19, #64]
    1bb4:	mov	w9, w18
    1bb8:	cbnz	w1, 14a0 <BZ2_bzDecompress+0x810>
    1bbc:	b	1504 <BZ2_bzDecompress+0x874>
    1bc0:	mov	w3, w2
    1bc4:	ubfiz	x4, x6, #1, #20
    1bc8:	lsr	w13, w6, #1
    1bcc:	mov	w2, w1
    1bd0:	ldr	w1, [x0, #32]
    1bd4:	ubfiz	w6, w6, #2, #1
    1bd8:	add	w14, w14, #0x5
    1bdc:	ldrh	w4, [x11, x4]
    1be0:	str	w3, [x19, #64]
    1be4:	ldrb	w3, [x12, w13, uxtw]
    1be8:	str	w14, [x19, #1092]
    1bec:	lsr	w3, w3, w6
    1bf0:	ubfiz	w3, w3, #16, #4
    1bf4:	orr	w3, w3, w4
    1bf8:	str	w3, [x19, #60]
    1bfc:	cbnz	w1, d20 <BZ2_bzDecompress+0x90>
    1c00:	b	d84 <BZ2_bzDecompress+0xf4>
    1c04:	ldr	w2, [x19, #28]
    1c08:	cmp	w2, #0x1ff
    1c0c:	csinc	w3, wzr, w2, eq  // eq = none
    1c10:	ldr	w2, [x12, w2, sxtw #2]
    1c14:	stp	w2, w3, [x19, #24]
    1c18:	b	1ac0 <BZ2_bzDecompress+0xe30>
    1c1c:	ldr	w0, [x19, #52]
    1c20:	ldr	w2, [x19, #3180]
    1c24:	ldr	w3, [x19, #3188]
    1c28:	cmp	w0, #0x2
    1c2c:	b.gt	1c7c <BZ2_bzDecompress+0xfec>
    1c30:	cmp	w3, w2
    1c34:	b.ne	129c <BZ2_bzDecompress+0x60c>  // b.any
    1c38:	ldp	x19, x20, [sp, #16]
    1c3c:	b	12a4 <BZ2_bzDecompress+0x614>
    1c40:	add	x5, x19, #0xc, lsl #12
    1c44:	b	d84 <BZ2_bzDecompress+0xf4>
    1c48:	mov	w22, #0xfffffffe            	// #-2
    1c4c:	ldp	x19, x20, [sp, #16]
    1c50:	b	12a4 <BZ2_bzDecompress+0x614>
    1c54:	mov	w0, #0x0                   	// #0
    1c58:	b	1428 <BZ2_bzDecompress+0x798>
    1c5c:	mov	w22, #0xffffffff            	// #-1
    1c60:	ldp	x19, x20, [sp, #16]
    1c64:	b	12a4 <BZ2_bzDecompress+0x614>
    1c68:	mov	w0, w6
    1c6c:	mov	w12, #0x0                   	// #0
    1c70:	b	1428 <BZ2_bzDecompress+0x798>
    1c74:	mov	w22, #0xfffffffe            	// #-2
    1c78:	b	12a4 <BZ2_bzDecompress+0x614>
    1c7c:	adrp	x0, 0 <stderr>
    1c80:	adrp	x1, 0 <add_pair_to_block>
    1c84:	add	x1, x1, #0x0
    1c88:	ldr	x0, [x0]
    1c8c:	bl	0 <fprintf>
    1c90:	ldr	w2, [x19, #3180]
    1c94:	ldr	w3, [x19, #3188]
    1c98:	b	1c30 <BZ2_bzDecompress+0xfa0>
    1c9c:	and	w22, w15, #0xff
    1ca0:	mov	w0, w6
    1ca4:	mov	w15, w3
    1ca8:	b	19a8 <BZ2_bzDecompress+0xd18>
    1cac:	nop

0000000000001cb0 <BZ2_bzDecompressEnd>:
    1cb0:	cbz	x0, 1d30 <BZ2_bzDecompressEnd+0x80>
    1cb4:	stp	x29, x30, [sp, #-32]!
    1cb8:	mov	x29, sp
    1cbc:	stp	x19, x20, [sp, #16]
    1cc0:	mov	x19, x0
    1cc4:	ldr	x20, [x0, #48]
    1cc8:	cbz	x20, 1d28 <BZ2_bzDecompressEnd+0x78>
    1ccc:	ldr	x0, [x20]
    1cd0:	cmp	x0, x19
    1cd4:	b.ne	1d28 <BZ2_bzDecompressEnd+0x78>  // b.any
    1cd8:	ldr	x1, [x20, #3152]
    1cdc:	ldp	x2, x0, [x19, #64]
    1ce0:	cbz	x1, 1cec <BZ2_bzDecompressEnd+0x3c>
    1ce4:	blr	x2
    1ce8:	ldp	x2, x0, [x19, #64]
    1cec:	ldr	x1, [x20, #3160]
    1cf0:	cbz	x1, 1cfc <BZ2_bzDecompressEnd+0x4c>
    1cf4:	blr	x2
    1cf8:	ldp	x2, x0, [x19, #64]
    1cfc:	ldr	x1, [x20, #3168]
    1d00:	cbz	x1, 1d0c <BZ2_bzDecompressEnd+0x5c>
    1d04:	blr	x2
    1d08:	ldp	x2, x0, [x19, #64]
    1d0c:	ldr	x1, [x19, #48]
    1d10:	blr	x2
    1d14:	str	xzr, [x19, #48]
    1d18:	mov	w0, #0x0                   	// #0
    1d1c:	ldp	x19, x20, [sp, #16]
    1d20:	ldp	x29, x30, [sp], #32
    1d24:	ret
    1d28:	mov	w0, #0xfffffffe            	// #-2
    1d2c:	b	1d1c <BZ2_bzDecompressEnd+0x6c>
    1d30:	mov	w0, #0xfffffffe            	// #-2
    1d34:	ret

0000000000001d38 <BZ2_bzWriteOpen>:
    1d38:	stp	x29, x30, [sp, #-80]!
    1d3c:	mov	x29, sp
    1d40:	stp	x19, x20, [sp, #16]
    1d44:	mov	x20, x0
    1d48:	stp	x21, x22, [sp, #32]
    1d4c:	mov	x21, x1
    1d50:	mov	w22, w4
    1d54:	stp	x23, x24, [sp, #48]
    1d58:	mov	w23, w2
    1d5c:	mov	w24, w3
    1d60:	cbz	x0, 1e44 <BZ2_bzWriteOpen+0x10c>
    1d64:	str	wzr, [x0]
    1d68:	cbz	x1, 1e20 <BZ2_bzWriteOpen+0xe8>
    1d6c:	sub	w0, w2, #0x1
    1d70:	cmp	w0, #0x8
    1d74:	b.hi	1e20 <BZ2_bzWriteOpen+0xe8>  // b.pmore
    1d78:	cmp	w4, #0xfa
    1d7c:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    1d80:	b.hi	1e20 <BZ2_bzWriteOpen+0xe8>  // b.pmore
    1d84:	mov	x0, x1
    1d88:	bl	0 <ferror>
    1d8c:	cbnz	w0, 1e88 <BZ2_bzWriteOpen+0x150>
    1d90:	mov	x0, #0x13f0                	// #5104
    1d94:	bl	0 <malloc>
    1d98:	mov	x19, x0
    1d9c:	cbz	x0, 1ec8 <BZ2_bzWriteOpen+0x190>
    1da0:	stp	x25, x26, [sp, #64]
    1da4:	cbz	x20, 1dac <BZ2_bzWriteOpen+0x74>
    1da8:	str	wzr, [x20]
    1dac:	add	x25, x19, #0x1, lsl #12
    1db0:	str	wzr, [x19, #5096]
    1db4:	mov	x4, #0x13d0                	// #5072
    1db8:	add	x4, x19, x4
    1dbc:	mov	w26, #0x1                   	// #1
    1dc0:	cmp	w22, #0x0
    1dc4:	strb	wzr, [x25, #1004]
    1dc8:	mov	w3, #0x1e                  	// #30
    1dcc:	str	x21, [x19]
    1dd0:	mov	x0, #0x1398                	// #5016
    1dd4:	str	wzr, [x19, #5008]
    1dd8:	mov	w2, w24
    1ddc:	strb	w26, [x25, #916]
    1de0:	mov	w1, w23
    1de4:	stp	xzr, xzr, [x4]
    1de8:	csel	w3, w22, w3, ne  // ne = any
    1dec:	add	x0, x19, x0
    1df0:	str	xzr, [x19, #5088]
    1df4:	bl	6c0 <BZ2_bzCompressInit>
    1df8:	cbnz	w0, 1eac <BZ2_bzWriteOpen+0x174>
    1dfc:	str	wzr, [x19, #5024]
    1e00:	strb	w26, [x25, #1004]
    1e04:	ldp	x25, x26, [sp, #64]
    1e08:	mov	x0, x19
    1e0c:	ldp	x19, x20, [sp, #16]
    1e10:	ldp	x21, x22, [sp, #32]
    1e14:	ldp	x23, x24, [sp, #48]
    1e18:	ldp	x29, x30, [sp], #80
    1e1c:	ret
    1e20:	mov	w0, #0xfffffffe            	// #-2
    1e24:	str	w0, [x20]
    1e28:	mov	x19, #0x0                   	// #0
    1e2c:	mov	x0, x19
    1e30:	ldp	x19, x20, [sp, #16]
    1e34:	ldp	x21, x22, [sp, #32]
    1e38:	ldp	x23, x24, [sp, #48]
    1e3c:	ldp	x29, x30, [sp], #80
    1e40:	ret
    1e44:	cbz	x1, 1e6c <BZ2_bzWriteOpen+0x134>
    1e48:	sub	w0, w2, #0x1
    1e4c:	cmp	w0, #0x8
    1e50:	b.hi	1e6c <BZ2_bzWriteOpen+0x134>  // b.pmore
    1e54:	cmp	w4, #0xfa
    1e58:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    1e5c:	b.hi	1e6c <BZ2_bzWriteOpen+0x134>  // b.pmore
    1e60:	mov	x0, x1
    1e64:	bl	0 <ferror>
    1e68:	cbz	w0, 1d90 <BZ2_bzWriteOpen+0x58>
    1e6c:	mov	x19, #0x0                   	// #0
    1e70:	mov	x0, x19
    1e74:	ldp	x19, x20, [sp, #16]
    1e78:	ldp	x21, x22, [sp, #32]
    1e7c:	ldp	x23, x24, [sp, #48]
    1e80:	ldp	x29, x30, [sp], #80
    1e84:	ret
    1e88:	mov	w0, #0xfffffffa            	// #-6
    1e8c:	str	w0, [x20]
    1e90:	mov	x19, #0x0                   	// #0
    1e94:	mov	x0, x19
    1e98:	ldp	x19, x20, [sp, #16]
    1e9c:	ldp	x21, x22, [sp, #32]
    1ea0:	ldp	x23, x24, [sp, #48]
    1ea4:	ldp	x29, x30, [sp], #80
    1ea8:	ret
    1eac:	cbz	x20, 1eb4 <BZ2_bzWriteOpen+0x17c>
    1eb0:	str	w0, [x20]
    1eb4:	mov	x0, x19
    1eb8:	mov	x19, #0x0                   	// #0
    1ebc:	bl	0 <free>
    1ec0:	ldp	x25, x26, [sp, #64]
    1ec4:	b	1e08 <BZ2_bzWriteOpen+0xd0>
    1ec8:	cbz	x20, 1e6c <BZ2_bzWriteOpen+0x134>
    1ecc:	mov	w0, #0xfffffffd            	// #-3
    1ed0:	str	w0, [x20]
    1ed4:	b	1e08 <BZ2_bzWriteOpen+0xd0>

0000000000001ed8 <BZ2_bzWrite>:
    1ed8:	stp	x29, x30, [sp, #-80]!
    1edc:	mov	x29, sp
    1ee0:	stp	x19, x20, [sp, #16]
    1ee4:	mov	x20, x0
    1ee8:	mov	x19, x1
    1eec:	stp	x21, x22, [sp, #32]
    1ef0:	mov	x22, x2
    1ef4:	mov	w21, w3
    1ef8:	cbz	x0, 1f40 <BZ2_bzWrite+0x68>
    1efc:	str	wzr, [x0]
    1f00:	cbz	x1, 1fec <BZ2_bzWrite+0x114>
    1f04:	str	wzr, [x1, #5096]
    1f08:	cbz	x2, 2020 <BZ2_bzWrite+0x148>
    1f0c:	tbnz	w21, #31, 201c <BZ2_bzWrite+0x144>
    1f10:	add	x0, x19, #0x1, lsl #12
    1f14:	ldrb	w0, [x0, #916]
    1f18:	cbnz	w0, 1f68 <BZ2_bzWrite+0x90>
    1f1c:	cbz	x20, 1f28 <BZ2_bzWrite+0x50>
    1f20:	mov	w0, #0xffffffff            	// #-1
    1f24:	str	w0, [x20]
    1f28:	mov	w0, #0xffffffff            	// #-1
    1f2c:	str	w0, [x19, #5096]
    1f30:	ldp	x19, x20, [sp, #16]
    1f34:	ldp	x21, x22, [sp, #32]
    1f38:	ldp	x29, x30, [sp], #80
    1f3c:	ret
    1f40:	cbz	x1, 1f30 <BZ2_bzWrite+0x58>
    1f44:	str	wzr, [x1, #5096]
    1f48:	cbnz	x2, 1f0c <BZ2_bzWrite+0x34>
    1f4c:	nop
    1f50:	mov	w0, #0xfffffffe            	// #-2
    1f54:	str	w0, [x19, #5096]
    1f58:	ldp	x19, x20, [sp, #16]
    1f5c:	ldp	x21, x22, [sp, #32]
    1f60:	ldp	x29, x30, [sp], #80
    1f64:	ret
    1f68:	ldr	x0, [x19]
    1f6c:	bl	0 <ferror>
    1f70:	cbnz	w0, 1ff8 <BZ2_bzWrite+0x120>
    1f74:	cbz	w21, 20c0 <BZ2_bzWrite+0x1e8>
    1f78:	mov	x0, #0x1398                	// #5016
    1f7c:	stp	x23, x24, [sp, #48]
    1f80:	add	x24, x19, #0x8
    1f84:	add	x23, x19, x0
    1f88:	stp	x25, x26, [sp, #64]
    1f8c:	mov	w26, #0x1388                	// #5000
    1f90:	mov	w25, #0x1387                	// #4999
    1f94:	str	x22, [x19, #5016]
    1f98:	str	w21, [x19, #5024]
    1f9c:	nop
    1fa0:	ldr	x0, [x23, #48]
    1fa4:	str	x24, [x19, #5040]
    1fa8:	str	w26, [x19, #5048]
    1fac:	cbz	x0, 207c <BZ2_bzWrite+0x1a4>
    1fb0:	ldr	x1, [x0]
    1fb4:	cmp	x1, x23
    1fb8:	b.ne	207c <BZ2_bzWrite+0x1a4>  // b.any
    1fbc:	ldr	w1, [x0, #8]
    1fc0:	cmp	w1, #0x2
    1fc4:	b.eq	2044 <BZ2_bzWrite+0x16c>  // b.none
    1fc8:	b.gt	2034 <BZ2_bzWrite+0x15c>
    1fcc:	cmp	w1, #0x1
    1fd0:	csetm	w0, eq  // eq = none
    1fd4:	cbz	x20, 1fdc <BZ2_bzWrite+0x104>
    1fd8:	str	w0, [x20]
    1fdc:	ldp	x23, x24, [sp, #48]
    1fe0:	ldp	x25, x26, [sp, #64]
    1fe4:	str	w0, [x19, #5096]
    1fe8:	b	1f30 <BZ2_bzWrite+0x58>
    1fec:	mov	w0, #0xfffffffe            	// #-2
    1ff0:	str	w0, [x20]
    1ff4:	b	1f30 <BZ2_bzWrite+0x58>
    1ff8:	cbz	x20, 2004 <BZ2_bzWrite+0x12c>
    1ffc:	mov	w0, #0xfffffffa            	// #-6
    2000:	str	w0, [x20]
    2004:	mov	w0, #0xfffffffa            	// #-6
    2008:	str	w0, [x19, #5096]
    200c:	ldp	x19, x20, [sp, #16]
    2010:	ldp	x21, x22, [sp, #32]
    2014:	ldp	x29, x30, [sp], #80
    2018:	ret
    201c:	cbz	x20, 1f50 <BZ2_bzWrite+0x78>
    2020:	mov	w0, #0xfffffffe            	// #-2
    2024:	str	w0, [x20]
    2028:	mov	w0, #0xfffffffe            	// #-2
    202c:	str	w0, [x19, #5096]
    2030:	b	1f58 <BZ2_bzWrite+0x80>
    2034:	sub	w1, w1, #0x3
    2038:	cmp	w1, #0x1
    203c:	csetm	w0, ls  // ls = plast
    2040:	b	1fd4 <BZ2_bzWrite+0xfc>
    2044:	bl	188 <handle_compress.isra.0>
    2048:	tst	w0, #0xff
    204c:	b.eq	207c <BZ2_bzWrite+0x1a4>  // b.none
    2050:	ldr	w2, [x19, #5048]
    2054:	cmp	w2, w25
    2058:	b.ls	2084 <BZ2_bzWrite+0x1ac>  // b.plast
    205c:	ldr	w0, [x19, #5024]
    2060:	cbnz	w0, 1fa0 <BZ2_bzWrite+0xc8>
    2064:	ldp	x23, x24, [sp, #48]
    2068:	ldp	x25, x26, [sp, #64]
    206c:	cbz	x20, 2074 <BZ2_bzWrite+0x19c>
    2070:	str	wzr, [x20]
    2074:	str	wzr, [x19, #5096]
    2078:	b	1f30 <BZ2_bzWrite+0x58>
    207c:	mov	w0, #0xfffffffe            	// #-2
    2080:	b	1fd4 <BZ2_bzWrite+0xfc>
    2084:	ldr	x3, [x19]
    2088:	sub	w21, w26, w2
    208c:	mov	x0, x24
    2090:	sub	w2, w26, w2
    2094:	mov	x1, #0x1                   	// #1
    2098:	bl	0 <fwrite>
    209c:	cmp	w21, w0
    20a0:	b.ne	20b0 <BZ2_bzWrite+0x1d8>  // b.any
    20a4:	ldr	x0, [x19]
    20a8:	bl	0 <ferror>
    20ac:	cbz	w0, 205c <BZ2_bzWrite+0x184>
    20b0:	ldp	x23, x24, [sp, #48]
    20b4:	ldp	x25, x26, [sp, #64]
    20b8:	cbnz	x20, 1ffc <BZ2_bzWrite+0x124>
    20bc:	b	2004 <BZ2_bzWrite+0x12c>
    20c0:	cbz	x20, 2074 <BZ2_bzWrite+0x19c>
    20c4:	str	wzr, [x20]
    20c8:	b	2074 <BZ2_bzWrite+0x19c>
    20cc:	nop

00000000000020d0 <BZ2_bzWriteClose>:
    20d0:	stp	x29, x30, [sp, #-96]!
    20d4:	mov	x29, sp
    20d8:	stp	x21, x22, [sp, #32]
    20dc:	mov	x21, x0
    20e0:	cbz	x1, 22d4 <BZ2_bzWriteClose+0x204>
    20e4:	add	x0, x1, #0x1, lsl #12
    20e8:	stp	x19, x20, [sp, #16]
    20ec:	mov	x19, x1
    20f0:	ldrb	w0, [x0, #916]
    20f4:	cbnz	w0, 211c <BZ2_bzWriteClose+0x4c>
    20f8:	cbz	x21, 2104 <BZ2_bzWriteClose+0x34>
    20fc:	mov	w0, #0xffffffff            	// #-1
    2100:	str	w0, [x21]
    2104:	mov	w0, #0xffffffff            	// #-1
    2108:	str	w0, [x19, #5096]
    210c:	ldp	x19, x20, [sp, #16]
    2110:	ldp	x21, x22, [sp, #32]
    2114:	ldp	x29, x30, [sp], #96
    2118:	ret
    211c:	ldr	x0, [x1]
    2120:	mov	w20, w2
    2124:	mov	x22, x3
    2128:	stp	x23, x24, [sp, #48]
    212c:	mov	x23, x4
    2130:	bl	0 <ferror>
    2134:	cbnz	w0, 22e8 <BZ2_bzWriteClose+0x218>
    2138:	cbz	x22, 2140 <BZ2_bzWriteClose+0x70>
    213c:	str	wzr, [x22]
    2140:	cbz	x23, 2148 <BZ2_bzWriteClose+0x78>
    2144:	str	wzr, [x23]
    2148:	cbnz	w20, 225c <BZ2_bzWriteClose+0x18c>
    214c:	stp	x25, x26, [sp, #64]
    2150:	ldr	w26, [x19, #5096]
    2154:	cbnz	w26, 224c <BZ2_bzWriteClose+0x17c>
    2158:	mov	x1, #0x1398                	// #5016
    215c:	add	x25, x19, #0x8
    2160:	stp	x27, x28, [sp, #80]
    2164:	add	x28, x19, x1
    2168:	mov	w24, #0x1388                	// #5000
    216c:	nop
    2170:	ldr	x20, [x28, #48]
    2174:	str	x25, [x19, #5040]
    2178:	str	w24, [x19, #5048]
    217c:	cbz	x20, 2358 <BZ2_bzWriteClose+0x288>
    2180:	ldr	x1, [x20]
    2184:	cmp	x1, x28
    2188:	b.ne	2358 <BZ2_bzWriteClose+0x288>  // b.any
    218c:	ldr	w0, [x20, #8]
    2190:	cmp	w0, #0x3
    2194:	b.eq	22cc <BZ2_bzWriteClose+0x1fc>  // b.none
    2198:	b.gt	22a4 <BZ2_bzWriteClose+0x1d4>
    219c:	cmp	w0, #0x1
    21a0:	b.eq	22cc <BZ2_bzWriteClose+0x1fc>  // b.none
    21a4:	cmp	w0, #0x2
    21a8:	b.ne	22ac <BZ2_bzWriteClose+0x1dc>  // b.any
    21ac:	ldr	w0, [x28, #8]
    21b0:	mov	w2, #0x4                   	// #4
    21b4:	str	w2, [x20, #8]
    21b8:	str	w0, [x20, #16]
    21bc:	ldr	w0, [x1, #8]
    21c0:	ldr	w1, [x20, #16]
    21c4:	cmp	w1, w0
    21c8:	b.ne	22cc <BZ2_bzWriteClose+0x1fc>  // b.any
    21cc:	mov	x0, x20
    21d0:	bl	188 <handle_compress.isra.0>
    21d4:	tst	w0, #0xff
    21d8:	b.eq	22cc <BZ2_bzWriteClose+0x1fc>  // b.none
    21dc:	ldr	w0, [x20, #16]
    21e0:	ldr	w2, [x19, #5048]
    21e4:	cbnz	w0, 2200 <BZ2_bzWriteClose+0x130>
    21e8:	ldr	w0, [x20, #92]
    21ec:	cmp	w0, #0xff
    21f0:	b.hi	2310 <BZ2_bzWriteClose+0x240>  // b.pmore
    21f4:	ldr	w0, [x20, #96]
    21f8:	cmp	w0, #0x0
    21fc:	b.le	2310 <BZ2_bzWriteClose+0x240>
    2200:	mov	w0, #0x1387                	// #4999
    2204:	cmp	w2, w0
    2208:	b.hi	2170 <BZ2_bzWriteClose+0xa0>  // b.pmore
    220c:	mov	w20, #0x3                   	// #3
    2210:	ldr	x3, [x19]
    2214:	sub	w27, w24, w2
    2218:	mov	x0, x25
    221c:	sub	w2, w24, w2
    2220:	mov	x1, #0x1                   	// #1
    2224:	bl	0 <fwrite>
    2228:	cmp	w27, w0
    222c:	b.ne	2360 <BZ2_bzWriteClose+0x290>  // b.any
    2230:	ldr	x0, [x19]
    2234:	bl	0 <ferror>
    2238:	cbnz	w0, 2360 <BZ2_bzWriteClose+0x290>
    223c:	cmp	w20, #0x4
    2240:	b.ne	2170 <BZ2_bzWriteClose+0xa0>  // b.any
    2244:	nop
    2248:	ldp	x27, x28, [sp, #80]
    224c:	ldr	x0, [x19]
    2250:	bl	0 <ferror>
    2254:	cbz	w0, 2338 <BZ2_bzWriteClose+0x268>
    2258:	ldp	x25, x26, [sp, #64]
    225c:	cbz	x22, 2268 <BZ2_bzWriteClose+0x198>
    2260:	ldr	w0, [x19, #5028]
    2264:	str	w0, [x22]
    2268:	cbz	x23, 2274 <BZ2_bzWriteClose+0x1a4>
    226c:	ldr	w0, [x19, #5052]
    2270:	str	w0, [x23]
    2274:	cbz	x21, 227c <BZ2_bzWriteClose+0x1ac>
    2278:	str	wzr, [x21]
    227c:	str	wzr, [x19, #5096]
    2280:	mov	x0, #0x1398                	// #5016
    2284:	add	x0, x19, x0
    2288:	bl	ab0 <BZ2_bzCompressEnd>
    228c:	mov	x0, x19
    2290:	ldp	x19, x20, [sp, #16]
    2294:	ldp	x21, x22, [sp, #32]
    2298:	ldp	x23, x24, [sp, #48]
    229c:	ldp	x29, x30, [sp], #96
    22a0:	b	0 <free>
    22a4:	cmp	w0, #0x4
    22a8:	b.eq	21bc <BZ2_bzWriteClose+0xec>  // b.none
    22ac:	cbz	x21, 22b4 <BZ2_bzWriteClose+0x1e4>
    22b0:	str	w26, [x21]
    22b4:	ldp	x23, x24, [sp, #48]
    22b8:	ldp	x27, x28, [sp, #80]
    22bc:	str	w26, [x19, #5096]
    22c0:	ldp	x19, x20, [sp, #16]
    22c4:	ldp	x25, x26, [sp, #64]
    22c8:	b	2110 <BZ2_bzWriteClose+0x40>
    22cc:	mov	w26, #0xffffffff            	// #-1
    22d0:	b	22ac <BZ2_bzWriteClose+0x1dc>
    22d4:	cbz	x0, 2110 <BZ2_bzWriteClose+0x40>
    22d8:	str	wzr, [x0]
    22dc:	ldp	x21, x22, [sp, #32]
    22e0:	ldp	x29, x30, [sp], #96
    22e4:	ret
    22e8:	cbz	x21, 22f4 <BZ2_bzWriteClose+0x224>
    22ec:	mov	w0, #0xfffffffa            	// #-6
    22f0:	str	w0, [x21]
    22f4:	mov	w0, #0xfffffffa            	// #-6
    22f8:	ldp	x23, x24, [sp, #48]
    22fc:	str	w0, [x19, #5096]
    2300:	ldp	x19, x20, [sp, #16]
    2304:	ldp	x21, x22, [sp, #32]
    2308:	ldp	x29, x30, [sp], #96
    230c:	ret
    2310:	ldp	w0, w1, [x20, #116]
    2314:	cmp	w1, w0
    2318:	b.lt	2200 <BZ2_bzWriteClose+0x130>  // b.tstop
    231c:	mov	w0, #0x1                   	// #1
    2320:	str	w0, [x20, #8]
    2324:	mov	w0, #0x1387                	// #4999
    2328:	cmp	w2, w0
    232c:	b.hi	2248 <BZ2_bzWriteClose+0x178>  // b.pmore
    2330:	mov	w20, #0x4                   	// #4
    2334:	b	2210 <BZ2_bzWriteClose+0x140>
    2338:	ldr	x0, [x19]
    233c:	bl	0 <fflush>
    2340:	ldr	x0, [x19]
    2344:	bl	0 <ferror>
    2348:	cbz	w0, 2258 <BZ2_bzWriteClose+0x188>
    234c:	ldp	x25, x26, [sp, #64]
    2350:	cbnz	x21, 22ec <BZ2_bzWriteClose+0x21c>
    2354:	b	22f4 <BZ2_bzWriteClose+0x224>
    2358:	mov	w26, #0xfffffffe            	// #-2
    235c:	b	22ac <BZ2_bzWriteClose+0x1dc>
    2360:	ldp	x25, x26, [sp, #64]
    2364:	ldp	x27, x28, [sp, #80]
    2368:	cbnz	x21, 22ec <BZ2_bzWriteClose+0x21c>
    236c:	b	22f4 <BZ2_bzWriteClose+0x224>

0000000000002370 <BZ2_bzWriteClose64>:
    2370:	stp	x29, x30, [sp, #-112]!
    2374:	mov	x29, sp
    2378:	stp	x27, x28, [sp, #80]
    237c:	mov	x28, x0
    2380:	cbz	x1, 25b8 <BZ2_bzWriteClose64+0x248>
    2384:	add	x0, x1, #0x1, lsl #12
    2388:	mov	x27, x1
    238c:	ldrb	w0, [x0, #916]
    2390:	cbnz	w0, 23b4 <BZ2_bzWriteClose64+0x44>
    2394:	cbz	x28, 23a0 <BZ2_bzWriteClose64+0x30>
    2398:	mov	w0, #0xffffffff            	// #-1
    239c:	str	w0, [x28]
    23a0:	mov	w0, #0xffffffff            	// #-1
    23a4:	str	w0, [x27, #5096]
    23a8:	ldp	x27, x28, [sp, #80]
    23ac:	ldp	x29, x30, [sp], #112
    23b0:	ret
    23b4:	ldr	x0, [x1]
    23b8:	stp	x19, x20, [sp, #16]
    23bc:	mov	x19, x3
    23c0:	mov	x20, x4
    23c4:	stp	x21, x22, [sp, #32]
    23c8:	mov	x21, x5
    23cc:	mov	x22, x6
    23d0:	stp	x23, x24, [sp, #48]
    23d4:	mov	w23, w2
    23d8:	bl	0 <ferror>
    23dc:	cbnz	w0, 25e0 <BZ2_bzWriteClose64+0x270>
    23e0:	cbz	x19, 23e8 <BZ2_bzWriteClose64+0x78>
    23e4:	str	wzr, [x19]
    23e8:	cbz	x20, 23f0 <BZ2_bzWriteClose64+0x80>
    23ec:	str	wzr, [x20]
    23f0:	cbz	x21, 23f8 <BZ2_bzWriteClose64+0x88>
    23f4:	str	wzr, [x21]
    23f8:	cbz	x22, 2400 <BZ2_bzWriteClose64+0x90>
    23fc:	str	wzr, [x22]
    2400:	cbnz	w23, 2518 <BZ2_bzWriteClose64+0x1a8>
    2404:	ldr	w0, [x27, #5096]
    2408:	str	w0, [sp, #104]
    240c:	cbnz	w0, 250c <BZ2_bzWriteClose64+0x19c>
    2410:	mov	x1, #0x1398                	// #5016
    2414:	add	x24, x27, #0x8
    2418:	stp	x25, x26, [sp, #64]
    241c:	add	x25, x27, x1
    2420:	mov	w23, #0x1388                	// #5000
    2424:	nop
    2428:	ldr	x26, [x25, #48]
    242c:	str	x24, [x27, #5040]
    2430:	str	w23, [x27, #5048]
    2434:	cbz	x26, 2634 <BZ2_bzWriteClose64+0x2c4>
    2438:	ldr	x2, [x26]
    243c:	cmp	x2, x25
    2440:	b.ne	2634 <BZ2_bzWriteClose64+0x2c4>  // b.any
    2444:	ldr	w1, [x26, #8]
    2448:	cmp	w1, #0x3
    244c:	b.eq	25ac <BZ2_bzWriteClose64+0x23c>  // b.none
    2450:	b.gt	257c <BZ2_bzWriteClose64+0x20c>
    2454:	cmp	w1, #0x1
    2458:	b.eq	25ac <BZ2_bzWriteClose64+0x23c>  // b.none
    245c:	cmp	w1, #0x2
    2460:	b.ne	2584 <BZ2_bzWriteClose64+0x214>  // b.any
    2464:	ldr	w0, [x25, #8]
    2468:	mov	w1, #0x4                   	// #4
    246c:	str	w1, [x26, #8]
    2470:	str	w0, [x26, #16]
    2474:	ldr	w0, [x2, #8]
    2478:	ldr	w1, [x26, #16]
    247c:	cmp	w1, w0
    2480:	b.ne	25ac <BZ2_bzWriteClose64+0x23c>  // b.any
    2484:	mov	x0, x26
    2488:	bl	188 <handle_compress.isra.0>
    248c:	tst	w0, #0xff
    2490:	b.eq	25ac <BZ2_bzWriteClose64+0x23c>  // b.none
    2494:	ldr	w0, [x26, #16]
    2498:	ldr	w2, [x27, #5048]
    249c:	cbnz	w0, 24b8 <BZ2_bzWriteClose64+0x148>
    24a0:	ldr	w0, [x26, #92]
    24a4:	cmp	w0, #0xff
    24a8:	b.hi	260c <BZ2_bzWriteClose64+0x29c>  // b.pmore
    24ac:	ldr	w0, [x26, #96]
    24b0:	cmp	w0, #0x0
    24b4:	b.le	260c <BZ2_bzWriteClose64+0x29c>
    24b8:	mov	w0, #0x1387                	// #4999
    24bc:	cmp	w2, w0
    24c0:	b.hi	2428 <BZ2_bzWriteClose64+0xb8>  // b.pmore
    24c4:	mov	w26, #0x3                   	// #3
    24c8:	ldr	x3, [x27]
    24cc:	sub	w5, w23, w2
    24d0:	mov	x0, x24
    24d4:	sub	w2, w23, w2
    24d8:	mov	x1, #0x1                   	// #1
    24dc:	str	w5, [sp, #108]
    24e0:	bl	0 <fwrite>
    24e4:	ldr	w5, [sp, #108]
    24e8:	cmp	w5, w0
    24ec:	b.ne	2640 <BZ2_bzWriteClose64+0x2d0>  // b.any
    24f0:	ldr	x0, [x27]
    24f4:	bl	0 <ferror>
    24f8:	cbnz	w0, 2640 <BZ2_bzWriteClose64+0x2d0>
    24fc:	cmp	w26, #0x4
    2500:	b.ne	2428 <BZ2_bzWriteClose64+0xb8>  // b.any
    2504:	nop
    2508:	ldp	x25, x26, [sp, #64]
    250c:	ldr	x0, [x27]
    2510:	bl	0 <ferror>
    2514:	cbz	w0, 25cc <BZ2_bzWriteClose64+0x25c>
    2518:	cbz	x19, 2524 <BZ2_bzWriteClose64+0x1b4>
    251c:	ldr	w0, [x27, #5028]
    2520:	str	w0, [x19]
    2524:	cbz	x20, 2530 <BZ2_bzWriteClose64+0x1c0>
    2528:	ldr	w0, [x27, #5032]
    252c:	str	w0, [x20]
    2530:	cbz	x21, 253c <BZ2_bzWriteClose64+0x1cc>
    2534:	ldr	w0, [x27, #5052]
    2538:	str	w0, [x21]
    253c:	cbz	x22, 2548 <BZ2_bzWriteClose64+0x1d8>
    2540:	ldr	w0, [x27, #5056]
    2544:	str	w0, [x22]
    2548:	cbz	x28, 2550 <BZ2_bzWriteClose64+0x1e0>
    254c:	str	wzr, [x28]
    2550:	str	wzr, [x27, #5096]
    2554:	mov	x0, #0x1398                	// #5016
    2558:	add	x0, x27, x0
    255c:	bl	ab0 <BZ2_bzCompressEnd>
    2560:	mov	x0, x27
    2564:	ldp	x19, x20, [sp, #16]
    2568:	ldp	x21, x22, [sp, #32]
    256c:	ldp	x23, x24, [sp, #48]
    2570:	ldp	x27, x28, [sp, #80]
    2574:	ldp	x29, x30, [sp], #112
    2578:	b	0 <free>
    257c:	cmp	w1, #0x4
    2580:	b.eq	2474 <BZ2_bzWriteClose64+0x104>  // b.none
    2584:	cbz	x28, 2590 <BZ2_bzWriteClose64+0x220>
    2588:	ldr	w0, [sp, #104]
    258c:	str	w0, [x28]
    2590:	ldr	w0, [sp, #104]
    2594:	ldp	x19, x20, [sp, #16]
    2598:	ldp	x21, x22, [sp, #32]
    259c:	ldp	x23, x24, [sp, #48]
    25a0:	ldp	x25, x26, [sp, #64]
    25a4:	str	w0, [x27, #5096]
    25a8:	b	23a8 <BZ2_bzWriteClose64+0x38>
    25ac:	mov	w0, #0xffffffff            	// #-1
    25b0:	str	w0, [sp, #104]
    25b4:	b	2584 <BZ2_bzWriteClose64+0x214>
    25b8:	cbz	x0, 23a8 <BZ2_bzWriteClose64+0x38>
    25bc:	str	wzr, [x0]
    25c0:	ldp	x27, x28, [sp, #80]
    25c4:	ldp	x29, x30, [sp], #112
    25c8:	ret
    25cc:	ldr	x0, [x27]
    25d0:	bl	0 <fflush>
    25d4:	ldr	x0, [x27]
    25d8:	bl	0 <ferror>
    25dc:	cbz	w0, 2518 <BZ2_bzWriteClose64+0x1a8>
    25e0:	cbz	x28, 25ec <BZ2_bzWriteClose64+0x27c>
    25e4:	mov	w0, #0xfffffffa            	// #-6
    25e8:	str	w0, [x28]
    25ec:	mov	w0, #0xfffffffa            	// #-6
    25f0:	ldp	x19, x20, [sp, #16]
    25f4:	ldp	x21, x22, [sp, #32]
    25f8:	ldp	x23, x24, [sp, #48]
    25fc:	str	w0, [x27, #5096]
    2600:	ldp	x27, x28, [sp, #80]
    2604:	ldp	x29, x30, [sp], #112
    2608:	ret
    260c:	ldp	w0, w1, [x26, #116]
    2610:	cmp	w1, w0
    2614:	b.lt	24b8 <BZ2_bzWriteClose64+0x148>  // b.tstop
    2618:	mov	w0, #0x1                   	// #1
    261c:	str	w0, [x26, #8]
    2620:	mov	w0, #0x1387                	// #4999
    2624:	cmp	w2, w0
    2628:	b.hi	2508 <BZ2_bzWriteClose64+0x198>  // b.pmore
    262c:	mov	w26, #0x4                   	// #4
    2630:	b	24c8 <BZ2_bzWriteClose64+0x158>
    2634:	mov	w0, #0xfffffffe            	// #-2
    2638:	str	w0, [sp, #104]
    263c:	b	2584 <BZ2_bzWriteClose64+0x214>
    2640:	ldp	x25, x26, [sp, #64]
    2644:	cbnz	x28, 25e4 <BZ2_bzWriteClose64+0x274>
    2648:	b	25ec <BZ2_bzWriteClose64+0x27c>
    264c:	nop

0000000000002650 <BZ2_bzReadOpen>:
    2650:	stp	x29, x30, [sp, #-80]!
    2654:	cmp	w3, #0x1
    2658:	mov	x29, sp
    265c:	stp	x19, x20, [sp, #16]
    2660:	mov	x20, x0
    2664:	stp	x21, x22, [sp, #32]
    2668:	mov	x22, x1
    266c:	cset	w1, hi  // hi = pmore
    2670:	stp	x23, x24, [sp, #48]
    2674:	cmp	x22, #0x0
    2678:	mov	w24, w3
    267c:	stp	x25, x26, [sp, #64]
    2680:	mov	x23, x4
    2684:	mov	w25, w2
    2688:	mov	w21, w5
    268c:	csinc	w1, w1, wzr, ne  // ne = any
    2690:	cbz	x0, 27a4 <BZ2_bzReadOpen+0x154>
    2694:	str	wzr, [x0]
    2698:	cbnz	w1, 277c <BZ2_bzReadOpen+0x12c>
    269c:	cmp	w2, #0x4
    26a0:	b.hi	277c <BZ2_bzReadOpen+0x12c>  // b.pmore
    26a4:	cmp	w5, #0x0
    26a8:	ccmp	x4, #0x0, #0x0, ne  // ne = any
    26ac:	b.eq	277c <BZ2_bzReadOpen+0x12c>  // b.none
    26b0:	cmp	x4, #0x0
    26b4:	mov	w0, #0x1388                	// #5000
    26b8:	ccmp	w5, w0, #0x0, ne  // ne = any
    26bc:	b.hi	277c <BZ2_bzReadOpen+0x12c>  // b.pmore
    26c0:	mov	x0, x22
    26c4:	bl	0 <ferror>
    26c8:	cbnz	w0, 27ec <BZ2_bzReadOpen+0x19c>
    26cc:	mov	x0, #0x13f0                	// #5104
    26d0:	bl	0 <malloc>
    26d4:	mov	x19, x0
    26d8:	cbz	x0, 2818 <BZ2_bzReadOpen+0x1c8>
    26dc:	cbz	x20, 26e4 <BZ2_bzReadOpen+0x94>
    26e0:	str	wzr, [x20]
    26e4:	add	x26, x19, #0x1, lsl #12
    26e8:	str	wzr, [x19, #5096]
    26ec:	mov	x1, #0x13d0                	// #5072
    26f0:	add	x0, x19, x1
    26f4:	cmp	w21, #0x0
    26f8:	strb	wzr, [x26, #1004]
    26fc:	str	x22, [x19]
    2700:	str	wzr, [x19, #5008]
    2704:	strb	wzr, [x26, #916]
    2708:	stp	xzr, xzr, [x0]
    270c:	str	xzr, [x19, #5088]
    2710:	b.le	2730 <BZ2_bzReadOpen+0xe0>
    2714:	sub	w2, w21, #0x1
    2718:	mov	x1, x23
    271c:	add	x0, x19, #0x8
    2720:	sxtw	x2, w2
    2724:	add	x2, x2, #0x1
    2728:	bl	0 <memcpy>
    272c:	str	w21, [x19, #5008]
    2730:	mov	x0, #0x1398                	// #5016
    2734:	mov	w2, w24
    2738:	mov	w1, w25
    273c:	add	x0, x19, x0
    2740:	bl	b38 <BZ2_bzDecompressInit>
    2744:	cbnz	w0, 2800 <BZ2_bzReadOpen+0x1b0>
    2748:	ldr	w1, [x19, #5008]
    274c:	add	x0, x19, #0x8
    2750:	str	x0, [x19, #5016]
    2754:	mov	w0, #0x1                   	// #1
    2758:	str	w1, [x19, #5024]
    275c:	strb	w0, [x26, #1004]
    2760:	mov	x0, x19
    2764:	ldp	x19, x20, [sp, #16]
    2768:	ldp	x21, x22, [sp, #32]
    276c:	ldp	x23, x24, [sp, #48]
    2770:	ldp	x25, x26, [sp, #64]
    2774:	ldp	x29, x30, [sp], #80
    2778:	ret
    277c:	mov	w0, #0xfffffffe            	// #-2
    2780:	mov	x19, #0x0                   	// #0
    2784:	str	w0, [x20]
    2788:	mov	x0, x19
    278c:	ldp	x19, x20, [sp, #16]
    2790:	ldp	x21, x22, [sp, #32]
    2794:	ldp	x23, x24, [sp, #48]
    2798:	ldp	x25, x26, [sp, #64]
    279c:	ldp	x29, x30, [sp], #80
    27a0:	ret
    27a4:	cbnz	w1, 27cc <BZ2_bzReadOpen+0x17c>
    27a8:	cmp	w2, #0x4
    27ac:	b.hi	27cc <BZ2_bzReadOpen+0x17c>  // b.pmore
    27b0:	cmp	w5, #0x0
    27b4:	ccmp	x4, #0x0, #0x0, ne  // ne = any
    27b8:	b.eq	27cc <BZ2_bzReadOpen+0x17c>  // b.none
    27bc:	cmp	x4, #0x0
    27c0:	mov	w0, #0x1388                	// #5000
    27c4:	ccmp	w5, w0, #0x0, ne  // ne = any
    27c8:	b.ls	26c0 <BZ2_bzReadOpen+0x70>  // b.plast
    27cc:	mov	x19, #0x0                   	// #0
    27d0:	mov	x0, x19
    27d4:	ldp	x19, x20, [sp, #16]
    27d8:	ldp	x21, x22, [sp, #32]
    27dc:	ldp	x23, x24, [sp, #48]
    27e0:	ldp	x25, x26, [sp, #64]
    27e4:	ldp	x29, x30, [sp], #80
    27e8:	ret
    27ec:	cbz	x20, 27cc <BZ2_bzReadOpen+0x17c>
    27f0:	mov	w0, #0xfffffffa            	// #-6
    27f4:	mov	x19, #0x0                   	// #0
    27f8:	str	w0, [x20]
    27fc:	b	2788 <BZ2_bzReadOpen+0x138>
    2800:	cbz	x20, 2808 <BZ2_bzReadOpen+0x1b8>
    2804:	str	w0, [x20]
    2808:	mov	x0, x19
    280c:	mov	x19, #0x0                   	// #0
    2810:	bl	0 <free>
    2814:	b	2788 <BZ2_bzReadOpen+0x138>
    2818:	cbz	x20, 27cc <BZ2_bzReadOpen+0x17c>
    281c:	mov	w0, #0xfffffffd            	// #-3
    2820:	str	w0, [x20]
    2824:	b	2788 <BZ2_bzReadOpen+0x138>

0000000000002828 <bzopen_or_bzdopen>:
    2828:	mov	x12, #0x13f0                	// #5104
    282c:	sub	sp, sp, x12
    2830:	adrp	x4, 0 <add_pair_to_block>
    2834:	stp	x29, x30, [sp]
    2838:	mov	x29, sp
    283c:	ldrb	w4, [x4]
    2840:	stp	x19, x20, [sp, #16]
    2844:	strb	w4, [sp, #88]
    2848:	stur	xzr, [sp, #89]
    284c:	strb	wzr, [sp, #97]
    2850:	cbz	x2, 29f4 <bzopen_or_bzdopen+0x1cc>
    2854:	stp	x21, x22, [sp, #32]
    2858:	mov	x20, x2
    285c:	stp	x23, x24, [sp, #48]
    2860:	mov	x23, x0
    2864:	mov	w24, w3
    2868:	stp	x25, x26, [sp, #64]
    286c:	mov	w25, w1
    2870:	ldrb	w19, [x2]
    2874:	cbz	w19, 2974 <bzopen_or_bzdopen+0x14c>
    2878:	mov	w26, #0x0                   	// #0
    287c:	mov	w21, #0x0                   	// #0
    2880:	mov	w22, #0x9                   	// #9
    2884:	b	28b4 <bzopen_or_bzdopen+0x8c>
    2888:	cmp	w19, #0x72
    288c:	b.eq	2964 <bzopen_or_bzdopen+0x13c>  // b.none
    2890:	bl	0 <__ctype_b_loc>
    2894:	ldr	x0, [x0]
    2898:	ubfiz	x1, x19, #1, #8
    289c:	sub	w19, w19, #0x30
    28a0:	ldrh	w0, [x0, x1]
    28a4:	tst	x0, #0x800
    28a8:	csel	w22, w19, w22, ne  // ne = any
    28ac:	ldrb	w19, [x20, #1]!
    28b0:	cbz	w19, 28d0 <bzopen_or_bzdopen+0xa8>
    28b4:	cmp	w19, #0x73
    28b8:	b.eq	296c <bzopen_or_bzdopen+0x144>  // b.none
    28bc:	cmp	w19, #0x77
    28c0:	b.ne	2888 <bzopen_or_bzdopen+0x60>  // b.any
    28c4:	ldrb	w19, [x20, #1]!
    28c8:	mov	w21, #0x1                   	// #1
    28cc:	cbnz	w19, 28b4 <bzopen_or_bzdopen+0x8c>
    28d0:	mov	w0, #0x77                  	// #119
    28d4:	cbz	w21, 297c <bzopen_or_bzdopen+0x154>
    28d8:	add	x19, sp, #0x58
    28dc:	strh	w0, [sp, #88]
    28e0:	mov	x0, x19
    28e4:	bl	0 <strlen>
    28e8:	mov	w1, #0x62                  	// #98
    28ec:	strh	w1, [x19, x0]
    28f0:	cbnz	w24, 29a0 <bzopen_or_bzdopen+0x178>
    28f4:	cbz	x23, 2900 <bzopen_or_bzdopen+0xd8>
    28f8:	ldrb	w0, [x23]
    28fc:	cbnz	w0, 2a10 <bzopen_or_bzdopen+0x1e8>
    2900:	cbz	w21, 29dc <bzopen_or_bzdopen+0x1b4>
    2904:	adrp	x0, 0 <stdout>
    2908:	ldr	x20, [x0]
    290c:	cbz	x20, 29e8 <bzopen_or_bzdopen+0x1c0>
    2910:	cmp	w22, #0x9
    2914:	mov	w2, #0x9                   	// #9
    2918:	csel	w2, w22, w2, le
    291c:	mov	x1, x20
    2920:	cmp	w2, #0x0
    2924:	add	x0, sp, #0x54
    2928:	csinc	w2, w2, wzr, gt
    292c:	mov	w4, #0x1e                  	// #30
    2930:	mov	w3, #0x0                   	// #0
    2934:	bl	1d38 <BZ2_bzWriteOpen>
    2938:	mov	x19, x0
    293c:	cbz	x19, 2a24 <bzopen_or_bzdopen+0x1fc>
    2940:	ldp	x21, x22, [sp, #32]
    2944:	ldp	x23, x24, [sp, #48]
    2948:	ldp	x25, x26, [sp, #64]
    294c:	mov	x0, x19
    2950:	mov	x12, #0x13f0                	// #5104
    2954:	ldp	x29, x30, [sp]
    2958:	ldp	x19, x20, [sp, #16]
    295c:	add	sp, sp, x12
    2960:	ret
    2964:	mov	w21, #0x0                   	// #0
    2968:	b	28ac <bzopen_or_bzdopen+0x84>
    296c:	mov	w26, #0x1                   	// #1
    2970:	b	28ac <bzopen_or_bzdopen+0x84>
    2974:	mov	w22, #0x9                   	// #9
    2978:	mov	w26, #0x0                   	// #0
    297c:	add	x19, sp, #0x58
    2980:	mov	w0, #0x72                  	// #114
    2984:	strh	w0, [sp, #88]
    2988:	mov	x0, x19
    298c:	bl	0 <strlen>
    2990:	mov	w21, #0x0                   	// #0
    2994:	mov	w1, #0x62                  	// #98
    2998:	strh	w1, [x19, x0]
    299c:	cbz	w24, 28f4 <bzopen_or_bzdopen+0xcc>
    29a0:	mov	x1, x19
    29a4:	mov	w0, w25
    29a8:	bl	0 <fdopen>
    29ac:	mov	x20, x0
    29b0:	cbz	x20, 29e8 <bzopen_or_bzdopen+0x1c0>
    29b4:	cbnz	w21, 2910 <bzopen_or_bzdopen+0xe8>
    29b8:	mov	w3, w26
    29bc:	add	x4, sp, #0x68
    29c0:	mov	x1, x20
    29c4:	add	x0, sp, #0x54
    29c8:	mov	w5, #0x0                   	// #0
    29cc:	mov	w2, #0x0                   	// #0
    29d0:	bl	2650 <BZ2_bzReadOpen>
    29d4:	mov	x19, x0
    29d8:	b	293c <bzopen_or_bzdopen+0x114>
    29dc:	adrp	x0, 0 <stdin>
    29e0:	ldr	x20, [x0]
    29e4:	cbnz	x20, 29b8 <bzopen_or_bzdopen+0x190>
    29e8:	ldp	x21, x22, [sp, #32]
    29ec:	ldp	x23, x24, [sp, #48]
    29f0:	ldp	x25, x26, [sp, #64]
    29f4:	mov	x19, #0x0                   	// #0
    29f8:	mov	x12, #0x13f0                	// #5104
    29fc:	mov	x0, x19
    2a00:	ldp	x29, x30, [sp]
    2a04:	ldp	x19, x20, [sp, #16]
    2a08:	add	sp, sp, x12
    2a0c:	ret
    2a10:	mov	x1, x19
    2a14:	mov	x0, x23
    2a18:	bl	0 <fopen64>
    2a1c:	mov	x20, x0
    2a20:	b	29b0 <bzopen_or_bzdopen+0x188>
    2a24:	adrp	x0, 0 <stdin>
    2a28:	ldr	x0, [x0]
    2a2c:	cmp	x0, x20
    2a30:	b.eq	29e8 <bzopen_or_bzdopen+0x1c0>  // b.none
    2a34:	adrp	x0, 0 <stdout>
    2a38:	ldr	x0, [x0]
    2a3c:	cmp	x0, x20
    2a40:	b.eq	29e8 <bzopen_or_bzdopen+0x1c0>  // b.none
    2a44:	mov	x0, x20
    2a48:	bl	0 <fclose>
    2a4c:	ldp	x21, x22, [sp, #32]
    2a50:	ldp	x23, x24, [sp, #48]
    2a54:	ldp	x25, x26, [sp, #64]
    2a58:	b	294c <bzopen_or_bzdopen+0x124>
    2a5c:	nop

0000000000002a60 <BZ2_bzReadClose>:
    2a60:	stp	x29, x30, [sp, #-32]!
    2a64:	mov	x29, sp
    2a68:	str	x19, [sp, #16]
    2a6c:	mov	x19, x1
    2a70:	cbz	x0, 2ac0 <BZ2_bzReadClose+0x60>
    2a74:	str	wzr, [x0]
    2a78:	cbz	x1, 2ab4 <BZ2_bzReadClose+0x54>
    2a7c:	add	x1, x1, #0x1, lsl #12
    2a80:	str	wzr, [x19, #5096]
    2a84:	ldrb	w2, [x1, #916]
    2a88:	cbnz	w2, 2aa4 <BZ2_bzReadClose+0x44>
    2a8c:	ldrb	w0, [x1, #1004]
    2a90:	cbnz	w0, 2adc <BZ2_bzReadClose+0x7c>
    2a94:	mov	x0, x19
    2a98:	ldr	x19, [sp, #16]
    2a9c:	ldp	x29, x30, [sp], #32
    2aa0:	b	0 <free>
    2aa4:	mov	w1, #0xffffffff            	// #-1
    2aa8:	str	w1, [x0]
    2aac:	mov	w0, #0xffffffff            	// #-1
    2ab0:	str	w0, [x19, #5096]
    2ab4:	ldr	x19, [sp, #16]
    2ab8:	ldp	x29, x30, [sp], #32
    2abc:	ret
    2ac0:	cbz	x1, 2ab4 <BZ2_bzReadClose+0x54>
    2ac4:	add	x1, x1, #0x1, lsl #12
    2ac8:	str	wzr, [x19, #5096]
    2acc:	ldrb	w0, [x1, #916]
    2ad0:	cbnz	w0, 2aac <BZ2_bzReadClose+0x4c>
    2ad4:	ldrb	w0, [x1, #1004]
    2ad8:	cbz	w0, 2a94 <BZ2_bzReadClose+0x34>
    2adc:	mov	x0, #0x1398                	// #5016
    2ae0:	add	x0, x19, x0
    2ae4:	bl	1cb0 <BZ2_bzDecompressEnd>
    2ae8:	mov	x0, x19
    2aec:	ldr	x19, [sp, #16]
    2af0:	ldp	x29, x30, [sp], #32
    2af4:	b	0 <free>

0000000000002af8 <BZ2_bzRead>:
    2af8:	stp	x29, x30, [sp, #-80]!
    2afc:	mov	x29, sp
    2b00:	stp	x19, x20, [sp, #16]
    2b04:	mov	x19, x1
    2b08:	stp	x21, x22, [sp, #32]
    2b0c:	mov	x21, x0
    2b10:	mov	w22, w3
    2b14:	cbz	x0, 2c30 <BZ2_bzRead+0x138>
    2b18:	str	wzr, [x0]
    2b1c:	cbz	x1, 2c60 <BZ2_bzRead+0x168>
    2b20:	str	wzr, [x1, #5096]
    2b24:	cbz	x2, 2c84 <BZ2_bzRead+0x18c>
    2b28:	tbnz	w22, #31, 2c80 <BZ2_bzRead+0x188>
    2b2c:	add	x0, x19, #0x1, lsl #12
    2b30:	ldrb	w0, [x0, #916]
    2b34:	cbnz	w0, 2c90 <BZ2_bzRead+0x198>
    2b38:	cbz	w22, 2cbc <BZ2_bzRead+0x1c4>
    2b3c:	stp	x23, x24, [sp, #48]
    2b40:	mov	x0, #0x1398                	// #5016
    2b44:	add	x24, x19, #0x8
    2b48:	str	x25, [sp, #64]
    2b4c:	add	x23, x19, x0
    2b50:	str	x2, [x19, #5040]
    2b54:	str	w22, [x19, #5048]
    2b58:	b	2b6c <BZ2_bzRead+0x74>
    2b5c:	cmp	w0, #0x4
    2b60:	b.eq	2d34 <BZ2_bzRead+0x23c>  // b.none
    2b64:	ldr	w0, [x19, #5048]
    2b68:	cbz	w0, 2c14 <BZ2_bzRead+0x11c>
    2b6c:	ldr	x0, [x19]
    2b70:	bl	0 <ferror>
    2b74:	mov	w20, w0
    2b78:	cbnz	w0, 2ce0 <BZ2_bzRead+0x1e8>
    2b7c:	ldr	w0, [x19, #5024]
    2b80:	cbnz	w0, 2bd0 <BZ2_bzRead+0xd8>
    2b84:	ldr	x25, [x19]
    2b88:	mov	x0, x25
    2b8c:	bl	0 <fgetc>
    2b90:	cmn	w0, #0x1
    2b94:	b.eq	2bd0 <BZ2_bzRead+0xd8>  // b.none
    2b98:	mov	x1, x25
    2b9c:	bl	0 <ungetc>
    2ba0:	ldr	x3, [x19]
    2ba4:	mov	x0, x24
    2ba8:	mov	x2, #0x1388                	// #5000
    2bac:	mov	x1, #0x1                   	// #1
    2bb0:	bl	0 <fread>
    2bb4:	mov	x25, x0
    2bb8:	ldr	x0, [x19]
    2bbc:	bl	0 <ferror>
    2bc0:	cbnz	w0, 2ce0 <BZ2_bzRead+0x1e8>
    2bc4:	str	w25, [x19, #5008]
    2bc8:	str	x24, [x19, #5016]
    2bcc:	str	w25, [x19, #5024]
    2bd0:	mov	x0, x23
    2bd4:	bl	c90 <BZ2_bzDecompress>
    2bd8:	tst	w0, #0xfffffffb
    2bdc:	b.ne	2d04 <BZ2_bzRead+0x20c>  // b.any
    2be0:	cbnz	w0, 2b5c <BZ2_bzRead+0x64>
    2be4:	ldr	x20, [x19]
    2be8:	mov	x0, x20
    2bec:	bl	0 <fgetc>
    2bf0:	cmn	w0, #0x1
    2bf4:	b.eq	2c04 <BZ2_bzRead+0x10c>  // b.none
    2bf8:	mov	x1, x20
    2bfc:	bl	0 <ungetc>
    2c00:	b	2b64 <BZ2_bzRead+0x6c>
    2c04:	ldr	w0, [x19, #5024]
    2c08:	cbnz	w0, 2b64 <BZ2_bzRead+0x6c>
    2c0c:	ldr	w0, [x19, #5048]
    2c10:	cbnz	w0, 2d1c <BZ2_bzRead+0x224>
    2c14:	cbz	x21, 2c1c <BZ2_bzRead+0x124>
    2c18:	str	wzr, [x21]
    2c1c:	mov	w20, w22
    2c20:	ldp	x23, x24, [sp, #48]
    2c24:	ldr	x25, [sp, #64]
    2c28:	str	wzr, [x19, #5096]
    2c2c:	b	2c4c <BZ2_bzRead+0x154>
    2c30:	cbz	x1, 2c68 <BZ2_bzRead+0x170>
    2c34:	str	wzr, [x1, #5096]
    2c38:	cbnz	x2, 2b28 <BZ2_bzRead+0x30>
    2c3c:	nop
    2c40:	mov	w0, #0xfffffffe            	// #-2
    2c44:	mov	w20, #0x0                   	// #0
    2c48:	str	w0, [x19, #5096]
    2c4c:	mov	w0, w20
    2c50:	ldp	x19, x20, [sp, #16]
    2c54:	ldp	x21, x22, [sp, #32]
    2c58:	ldp	x29, x30, [sp], #80
    2c5c:	ret
    2c60:	mov	w0, #0xfffffffe            	// #-2
    2c64:	str	w0, [x21]
    2c68:	mov	w20, #0x0                   	// #0
    2c6c:	mov	w0, w20
    2c70:	ldp	x19, x20, [sp, #16]
    2c74:	ldp	x21, x22, [sp, #32]
    2c78:	ldp	x29, x30, [sp], #80
    2c7c:	ret
    2c80:	cbz	x21, 2c40 <BZ2_bzRead+0x148>
    2c84:	mov	w0, #0xfffffffe            	// #-2
    2c88:	str	w0, [x21]
    2c8c:	b	2c40 <BZ2_bzRead+0x148>
    2c90:	cbz	x21, 2c9c <BZ2_bzRead+0x1a4>
    2c94:	mov	w0, #0xffffffff            	// #-1
    2c98:	str	w0, [x21]
    2c9c:	mov	w0, #0xffffffff            	// #-1
    2ca0:	str	w0, [x19, #5096]
    2ca4:	mov	w20, #0x0                   	// #0
    2ca8:	mov	w0, w20
    2cac:	ldp	x19, x20, [sp, #16]
    2cb0:	ldp	x21, x22, [sp, #32]
    2cb4:	ldp	x29, x30, [sp], #80
    2cb8:	ret
    2cbc:	cbz	x21, 2cc4 <BZ2_bzRead+0x1cc>
    2cc0:	str	wzr, [x21]
    2cc4:	str	wzr, [x19, #5096]
    2cc8:	mov	w20, #0x0                   	// #0
    2ccc:	mov	w0, w20
    2cd0:	ldp	x19, x20, [sp, #16]
    2cd4:	ldp	x21, x22, [sp, #32]
    2cd8:	ldp	x29, x30, [sp], #80
    2cdc:	ret
    2ce0:	cbz	x21, 2cec <BZ2_bzRead+0x1f4>
    2ce4:	mov	w0, #0xfffffffa            	// #-6
    2ce8:	str	w0, [x21]
    2cec:	mov	w0, #0xfffffffa            	// #-6
    2cf0:	mov	w20, #0x0                   	// #0
    2cf4:	ldp	x23, x24, [sp, #48]
    2cf8:	ldr	x25, [sp, #64]
    2cfc:	str	w0, [x19, #5096]
    2d00:	b	2c4c <BZ2_bzRead+0x154>
    2d04:	cbz	x21, 2d0c <BZ2_bzRead+0x214>
    2d08:	str	w0, [x21]
    2d0c:	ldp	x23, x24, [sp, #48]
    2d10:	ldr	x25, [sp, #64]
    2d14:	str	w0, [x19, #5096]
    2d18:	b	2c4c <BZ2_bzRead+0x154>
    2d1c:	cbz	x21, 2d28 <BZ2_bzRead+0x230>
    2d20:	mov	w0, #0xfffffff9            	// #-7
    2d24:	str	w0, [x21]
    2d28:	mov	w0, #0xfffffff9            	// #-7
    2d2c:	mov	w20, #0x0                   	// #0
    2d30:	b	2d0c <BZ2_bzRead+0x214>
    2d34:	cbz	x21, 2d3c <BZ2_bzRead+0x244>
    2d38:	str	w0, [x21]
    2d3c:	ldr	w20, [x19, #5048]
    2d40:	mov	w0, #0x4                   	// #4
    2d44:	ldp	x23, x24, [sp, #48]
    2d48:	sub	w20, w22, w20
    2d4c:	ldr	x25, [sp, #64]
    2d50:	str	w0, [x19, #5096]
    2d54:	b	2c4c <BZ2_bzRead+0x154>

0000000000002d58 <BZ2_bzReadGetUnused>:
    2d58:	cbz	x1, 2dac <BZ2_bzReadGetUnused+0x54>
    2d5c:	ldr	w4, [x1, #5096]
    2d60:	cmp	w4, #0x4
    2d64:	b.eq	2d80 <BZ2_bzReadGetUnused+0x28>  // b.none
    2d68:	cbz	x0, 2d74 <BZ2_bzReadGetUnused+0x1c>
    2d6c:	mov	w2, #0xffffffff            	// #-1
    2d70:	str	w2, [x0]
    2d74:	mov	w0, #0xffffffff            	// #-1
    2d78:	str	w0, [x1, #5096]
    2d7c:	ret
    2d80:	cmp	x2, #0x0
    2d84:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    2d88:	b.eq	2dbc <BZ2_bzReadGetUnused+0x64>  // b.none
    2d8c:	cbz	x0, 2d94 <BZ2_bzReadGetUnused+0x3c>
    2d90:	str	wzr, [x0]
    2d94:	ldr	w0, [x1, #5024]
    2d98:	str	wzr, [x1, #5096]
    2d9c:	str	w0, [x3]
    2da0:	ldr	x0, [x1, #5016]
    2da4:	str	x0, [x2]
    2da8:	ret
    2dac:	cbz	x0, 2d7c <BZ2_bzReadGetUnused+0x24>
    2db0:	mov	w1, #0xfffffffe            	// #-2
    2db4:	str	w1, [x0]
    2db8:	ret
    2dbc:	cbz	x0, 2dc8 <BZ2_bzReadGetUnused+0x70>
    2dc0:	mov	w2, #0xfffffffe            	// #-2
    2dc4:	str	w2, [x0]
    2dc8:	mov	w0, #0xfffffffe            	// #-2
    2dcc:	str	w0, [x1, #5096]
    2dd0:	ret
    2dd4:	nop

0000000000002dd8 <BZ2_bzBuffToBuffCompress>:
    2dd8:	stp	x29, x30, [sp, #-144]!
    2ddc:	cmp	x0, #0x0
    2de0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2de4:	mov	x29, sp
    2de8:	stp	x19, x20, [sp, #16]
    2dec:	b.eq	2f00 <BZ2_bzBuffToBuffCompress+0x128>  // b.none
    2df0:	stp	x21, x22, [sp, #32]
    2df4:	cmp	x2, #0x0
    2df8:	mov	x22, x0
    2dfc:	str	x23, [sp, #48]
    2e00:	sub	w0, w4, #0x1
    2e04:	mov	x20, x1
    2e08:	mov	x23, x2
    2e0c:	mov	w1, w4
    2e10:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    2e14:	b.hi	2ef0 <BZ2_bzBuffToBuffCompress+0x118>  // b.pmore
    2e18:	cmp	w6, #0xfa
    2e1c:	mov	w2, w5
    2e20:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
    2e24:	b.hi	2ef0 <BZ2_bzBuffToBuffCompress+0x118>  // b.pmore
    2e28:	cmp	w6, #0x0
    2e2c:	mov	w21, w3
    2e30:	add	x0, sp, #0x40
    2e34:	mov	w3, #0x1e                  	// #30
    2e38:	csel	w3, w6, w3, ne  // ne = any
    2e3c:	stp	xzr, xzr, [sp, #120]
    2e40:	str	xzr, [sp, #136]
    2e44:	bl	6c0 <BZ2_bzCompressInit>
    2e48:	mov	w19, w0
    2e4c:	cbz	w0, 2e68 <BZ2_bzBuffToBuffCompress+0x90>
    2e50:	ldp	x21, x22, [sp, #32]
    2e54:	ldr	x23, [sp, #48]
    2e58:	mov	w0, w19
    2e5c:	ldp	x19, x20, [sp, #16]
    2e60:	ldp	x29, x30, [sp], #144
    2e64:	ret
    2e68:	ldr	w2, [x20]
    2e6c:	mov	w1, #0x2                   	// #2
    2e70:	add	x0, sp, #0x40
    2e74:	str	x23, [sp, #64]
    2e78:	str	w21, [sp, #72]
    2e7c:	str	x22, [sp, #88]
    2e80:	str	w2, [sp, #96]
    2e84:	bl	8b8 <BZ2_bzCompress>
    2e88:	mov	w1, w0
    2e8c:	cmp	w0, #0x3
    2e90:	b.eq	2f08 <BZ2_bzBuffToBuffCompress+0x130>  // b.none
    2e94:	cmp	w0, #0x4
    2e98:	b.eq	2ec0 <BZ2_bzBuffToBuffCompress+0xe8>  // b.none
    2e9c:	mov	w19, w1
    2ea0:	add	x0, sp, #0x40
    2ea4:	bl	ab0 <BZ2_bzCompressEnd>
    2ea8:	mov	w0, w19
    2eac:	ldp	x19, x20, [sp, #16]
    2eb0:	ldp	x21, x22, [sp, #32]
    2eb4:	ldr	x23, [sp, #48]
    2eb8:	ldp	x29, x30, [sp], #144
    2ebc:	ret
    2ec0:	ldr	w1, [x20]
    2ec4:	add	x0, sp, #0x40
    2ec8:	ldr	w2, [sp, #96]
    2ecc:	sub	w1, w1, w2
    2ed0:	str	w1, [x20]
    2ed4:	bl	ab0 <BZ2_bzCompressEnd>
    2ed8:	mov	w0, w19
    2edc:	ldp	x19, x20, [sp, #16]
    2ee0:	ldp	x21, x22, [sp, #32]
    2ee4:	ldr	x23, [sp, #48]
    2ee8:	ldp	x29, x30, [sp], #144
    2eec:	ret
    2ef0:	mov	w19, #0xfffffffe            	// #-2
    2ef4:	ldp	x21, x22, [sp, #32]
    2ef8:	ldr	x23, [sp, #48]
    2efc:	b	2e58 <BZ2_bzBuffToBuffCompress+0x80>
    2f00:	mov	w19, #0xfffffffe            	// #-2
    2f04:	b	2e58 <BZ2_bzBuffToBuffCompress+0x80>
    2f08:	add	x0, sp, #0x40
    2f0c:	mov	w19, #0xfffffff8            	// #-8
    2f10:	bl	ab0 <BZ2_bzCompressEnd>
    2f14:	ldp	x21, x22, [sp, #32]
    2f18:	ldr	x23, [sp, #48]
    2f1c:	b	2e58 <BZ2_bzBuffToBuffCompress+0x80>

0000000000002f20 <BZ2_bzBuffToBuffDecompress>:
    2f20:	stp	x29, x30, [sp, #-160]!
    2f24:	cmp	x0, #0x0
    2f28:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2f2c:	mov	x29, sp
    2f30:	stp	x19, x20, [sp, #16]
    2f34:	b.eq	30b0 <BZ2_bzBuffToBuffDecompress+0x190>  // b.none
    2f38:	stp	x21, x22, [sp, #32]
    2f3c:	cmp	x2, #0x0
    2f40:	mov	x22, x2
    2f44:	mov	w21, w4
    2f48:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    2f4c:	b.hi	30b8 <BZ2_bzBuffToBuffDecompress+0x198>  // b.pmore
    2f50:	stp	x23, x24, [sp, #48]
    2f54:	cmp	w5, #0x4
    2f58:	mov	w23, w5
    2f5c:	b.hi	30a0 <BZ2_bzBuffToBuffDecompress+0x180>  // b.pmore
    2f60:	mov	w24, w3
    2f64:	adrp	x4, 0 <add_pair_to_block>
    2f68:	adrp	x3, 0 <add_pair_to_block>
    2f6c:	add	x4, x4, #0x0
    2f70:	add	x3, x3, #0x0
    2f74:	mov	x19, x0
    2f78:	mov	x20, x1
    2f7c:	mov	w2, #0x1                   	// #1
    2f80:	mov	w1, #0xfa90                	// #64144
    2f84:	mov	x0, #0x0                   	// #0
    2f88:	stp	x4, x3, [sp, #136]
    2f8c:	str	xzr, [sp, #152]
    2f90:	bl	178 <default_bzalloc>
    2f94:	mov	x6, x0
    2f98:	cbz	x0, 30c4 <BZ2_bzBuffToBuffDecompress+0x1a4>
    2f9c:	ldr	w2, [x20]
    2fa0:	mov	w1, #0xa                   	// #10
    2fa4:	str	x25, [sp, #64]
    2fa8:	add	x25, sp, #0x50
    2fac:	str	w1, [x6, #8]
    2fb0:	add	x1, x6, #0xc50
    2fb4:	str	x25, [x6]
    2fb8:	str	xzr, [x6, #32]
    2fbc:	strb	w21, [x6, #44]
    2fc0:	stp	wzr, w23, [x6, #48]
    2fc4:	stp	xzr, xzr, [x1]
    2fc8:	str	xzr, [x6, #3168]
    2fcc:	str	wzr, [x6, #3188]
    2fd0:	str	x22, [sp, #80]
    2fd4:	str	w24, [sp, #88]
    2fd8:	stur	xzr, [sp, #92]
    2fdc:	str	x19, [sp, #104]
    2fe0:	str	w2, [sp, #112]
    2fe4:	stur	xzr, [sp, #116]
    2fe8:	str	x0, [sp, #128]
    2fec:	mov	x0, x25
    2ff0:	bl	c90 <BZ2_bzDecompress>
    2ff4:	mov	w19, w0
    2ff8:	cbz	w0, 3060 <BZ2_bzBuffToBuffDecompress+0x140>
    2ffc:	cmp	w0, #0x4
    3000:	b.ne	303c <BZ2_bzBuffToBuffDecompress+0x11c>  // b.any
    3004:	ldr	w1, [x20]
    3008:	mov	x0, x25
    300c:	ldr	w2, [sp, #112]
    3010:	mov	w19, #0x0                   	// #0
    3014:	sub	w1, w1, w2
    3018:	str	w1, [x20]
    301c:	bl	1cb0 <BZ2_bzDecompressEnd>
    3020:	ldp	x21, x22, [sp, #32]
    3024:	ldp	x23, x24, [sp, #48]
    3028:	ldr	x25, [sp, #64]
    302c:	mov	w0, w19
    3030:	ldp	x19, x20, [sp, #16]
    3034:	ldp	x29, x30, [sp], #160
    3038:	ret
    303c:	mov	x0, x25
    3040:	bl	1cb0 <BZ2_bzDecompressEnd>
    3044:	mov	w0, w19
    3048:	ldp	x19, x20, [sp, #16]
    304c:	ldp	x21, x22, [sp, #32]
    3050:	ldp	x23, x24, [sp, #48]
    3054:	ldr	x25, [sp, #64]
    3058:	ldp	x29, x30, [sp], #160
    305c:	ret
    3060:	ldr	w0, [sp, #112]
    3064:	cbz	w0, 3084 <BZ2_bzBuffToBuffDecompress+0x164>
    3068:	mov	x0, x25
    306c:	mov	w19, #0xfffffff9            	// #-7
    3070:	bl	1cb0 <BZ2_bzDecompressEnd>
    3074:	ldp	x21, x22, [sp, #32]
    3078:	ldp	x23, x24, [sp, #48]
    307c:	ldr	x25, [sp, #64]
    3080:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    3084:	mov	x0, x25
    3088:	mov	w19, #0xfffffff8            	// #-8
    308c:	bl	1cb0 <BZ2_bzDecompressEnd>
    3090:	ldp	x21, x22, [sp, #32]
    3094:	ldp	x23, x24, [sp, #48]
    3098:	ldr	x25, [sp, #64]
    309c:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    30a0:	mov	w19, #0xfffffffe            	// #-2
    30a4:	ldp	x21, x22, [sp, #32]
    30a8:	ldp	x23, x24, [sp, #48]
    30ac:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    30b0:	mov	w19, #0xfffffffe            	// #-2
    30b4:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    30b8:	mov	w19, #0xfffffffe            	// #-2
    30bc:	ldp	x21, x22, [sp, #32]
    30c0:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    30c4:	mov	w19, #0xfffffffd            	// #-3
    30c8:	ldp	x21, x22, [sp, #32]
    30cc:	ldp	x23, x24, [sp, #48]
    30d0:	b	302c <BZ2_bzBuffToBuffDecompress+0x10c>
    30d4:	nop

00000000000030d8 <BZ2_bzlibVersion>:
    30d8:	adrp	x0, 0 <add_pair_to_block>
    30dc:	add	x0, x0, #0x0
    30e0:	ret
    30e4:	nop

00000000000030e8 <BZ2_bzopen>:
    30e8:	mov	x2, x1
    30ec:	mov	w3, #0x0                   	// #0
    30f0:	mov	w1, #0xffffffff            	// #-1
    30f4:	b	2828 <bzopen_or_bzdopen>

00000000000030f8 <BZ2_bzdopen>:
    30f8:	mov	x2, x1
    30fc:	mov	w3, #0x1                   	// #1
    3100:	mov	w1, w0
    3104:	mov	x0, #0x0                   	// #0
    3108:	b	2828 <bzopen_or_bzdopen>
    310c:	nop

0000000000003110 <BZ2_bzread>:
    3110:	mov	w3, w2
    3114:	ldr	w2, [x0, #5096]
    3118:	cmp	w2, #0x4
    311c:	b.eq	314c <BZ2_bzread+0x3c>  // b.none
    3120:	stp	x29, x30, [sp, #-32]!
    3124:	mov	x2, x1
    3128:	mov	x1, x0
    312c:	mov	x29, sp
    3130:	add	x0, sp, #0x1c
    3134:	bl	2af8 <BZ2_bzRead>
    3138:	ldr	w1, [sp, #28]
    313c:	ldp	x29, x30, [sp], #32
    3140:	tst	w1, #0xfffffffb
    3144:	csinv	w0, w0, wzr, eq  // eq = none
    3148:	ret
    314c:	mov	w0, #0x0                   	// #0
    3150:	ret
    3154:	nop

0000000000003158 <BZ2_bzwrite>:
    3158:	cbz	x0, 31cc <BZ2_bzwrite+0x74>
    315c:	stp	x29, x30, [sp, #-80]!
    3160:	cmp	w2, #0x0
    3164:	ccmp	x1, #0x0, #0x4, ge  // ge = tcont
    3168:	mov	x29, sp
    316c:	stp	x19, x20, [sp, #16]
    3170:	mov	x19, x0
    3174:	mov	x20, x1
    3178:	stp	x21, x22, [sp, #32]
    317c:	mov	w21, w2
    3180:	str	wzr, [x0, #5096]
    3184:	b.eq	31b0 <BZ2_bzwrite+0x58>  // b.none
    3188:	add	x0, x0, #0x1, lsl #12
    318c:	ldrb	w0, [x0, #916]
    3190:	cbnz	w0, 31d4 <BZ2_bzwrite+0x7c>
    3194:	mov	w1, #0xffffffff            	// #-1
    3198:	mov	w0, w1
    319c:	str	w1, [x19, #5096]
    31a0:	ldp	x19, x20, [sp, #16]
    31a4:	ldp	x21, x22, [sp, #32]
    31a8:	ldp	x29, x30, [sp], #80
    31ac:	ret
    31b0:	mov	w1, #0xfffffffe            	// #-2
    31b4:	str	w1, [x19, #5096]
    31b8:	mov	w0, #0xffffffff            	// #-1
    31bc:	ldp	x19, x20, [sp, #16]
    31c0:	ldp	x21, x22, [sp, #32]
    31c4:	ldp	x29, x30, [sp], #80
    31c8:	ret
    31cc:	mov	w0, #0xffffffff            	// #-1
    31d0:	ret
    31d4:	ldr	x0, [x19]
    31d8:	bl	0 <ferror>
    31dc:	cbnz	w0, 3288 <BZ2_bzwrite+0x130>
    31e0:	cbz	w21, 3300 <BZ2_bzwrite+0x1a8>
    31e4:	mov	x0, #0x1398                	// #5016
    31e8:	add	x22, x19, x0
    31ec:	stp	x23, x24, [sp, #48]
    31f0:	add	x24, x19, #0x8
    31f4:	mov	w23, #0x1388                	// #5000
    31f8:	str	x25, [sp, #64]
    31fc:	mov	w25, #0x1387                	// #4999
    3200:	str	x20, [x19, #5016]
    3204:	str	w21, [x19, #5024]
    3208:	ldr	x0, [x22, #48]
    320c:	str	x24, [x19, #5040]
    3210:	str	w23, [x19, #5048]
    3214:	cbz	x0, 32f8 <BZ2_bzwrite+0x1a0>
    3218:	ldr	x1, [x0]
    321c:	cmp	x1, x22
    3220:	b.ne	32f8 <BZ2_bzwrite+0x1a0>  // b.any
    3224:	ldr	w1, [x0, #8]
    3228:	cmp	w1, #0x2
    322c:	b.eq	32b8 <BZ2_bzwrite+0x160>  // b.none
    3230:	b.gt	32a4 <BZ2_bzwrite+0x14c>
    3234:	cmp	w1, #0x1
    3238:	mov	w1, #0xffffffff            	// #-1
    323c:	b.ne	32d8 <BZ2_bzwrite+0x180>  // b.any
    3240:	mov	w0, #0xffffffff            	// #-1
    3244:	ldp	x23, x24, [sp, #48]
    3248:	ldr	x25, [sp, #64]
    324c:	str	w1, [x19, #5096]
    3250:	b	31a0 <BZ2_bzwrite+0x48>
    3254:	ldr	x3, [x19]
    3258:	sub	w20, w23, w2
    325c:	mov	x0, x24
    3260:	sub	w2, w23, w2
    3264:	mov	x1, #0x1                   	// #1
    3268:	bl	0 <fwrite>
    326c:	cmp	w20, w0
    3270:	b.ne	3280 <BZ2_bzwrite+0x128>  // b.any
    3274:	ldr	x0, [x19]
    3278:	bl	0 <ferror>
    327c:	cbz	w0, 32d0 <BZ2_bzwrite+0x178>
    3280:	ldp	x23, x24, [sp, #48]
    3284:	ldr	x25, [sp, #64]
    3288:	mov	w1, #0xfffffffa            	// #-6
    328c:	str	w1, [x19, #5096]
    3290:	mov	w0, #0xffffffff            	// #-1
    3294:	ldp	x19, x20, [sp, #16]
    3298:	ldp	x21, x22, [sp, #32]
    329c:	ldp	x29, x30, [sp], #80
    32a0:	ret
    32a4:	sub	w1, w1, #0x3
    32a8:	cmp	w1, #0x1
    32ac:	b.hi	32d8 <BZ2_bzwrite+0x180>  // b.pmore
    32b0:	mov	w1, #0xffffffff            	// #-1
    32b4:	b	3240 <BZ2_bzwrite+0xe8>
    32b8:	bl	188 <handle_compress.isra.0>
    32bc:	tst	w0, #0xff
    32c0:	b.eq	32f8 <BZ2_bzwrite+0x1a0>  // b.none
    32c4:	ldr	w2, [x19, #5048]
    32c8:	cmp	w2, w25
    32cc:	b.ls	3254 <BZ2_bzwrite+0xfc>  // b.plast
    32d0:	ldr	w0, [x19, #5024]
    32d4:	cbnz	w0, 3208 <BZ2_bzwrite+0xb0>
    32d8:	ldp	x23, x24, [sp, #48]
    32dc:	mov	w0, w21
    32e0:	ldr	x25, [sp, #64]
    32e4:	str	wzr, [x19, #5096]
    32e8:	ldp	x19, x20, [sp, #16]
    32ec:	ldp	x21, x22, [sp, #32]
    32f0:	ldp	x29, x30, [sp], #80
    32f4:	ret
    32f8:	mov	w1, #0xfffffffe            	// #-2
    32fc:	b	3240 <BZ2_bzwrite+0xe8>
    3300:	mov	w0, #0x0                   	// #0
    3304:	str	wzr, [x19, #5096]
    3308:	b	31a0 <BZ2_bzwrite+0x48>
    330c:	nop

0000000000003310 <BZ2_bzflush>:
    3310:	mov	w0, #0x0                   	// #0
    3314:	ret

0000000000003318 <BZ2_bzclose>:
    3318:	cbz	x0, 3474 <BZ2_bzclose+0x15c>
    331c:	stp	x29, x30, [sp, #-96]!
    3320:	mov	x29, sp
    3324:	stp	x21, x22, [sp, #32]
    3328:	add	x22, x0, #0x1, lsl #12
    332c:	stp	x19, x20, [sp, #16]
    3330:	mov	x19, x0
    3334:	ldrb	w0, [x22, #916]
    3338:	ldr	x21, [x19]
    333c:	cbz	w0, 33f4 <BZ2_bzclose+0xdc>
    3340:	mov	x0, x21
    3344:	bl	0 <ferror>
    3348:	cbnz	w0, 33e8 <BZ2_bzclose+0xd0>
    334c:	ldr	w0, [x19, #5096]
    3350:	cbnz	w0, 3484 <BZ2_bzclose+0x16c>
    3354:	mov	x2, #0x1398                	// #5016
    3358:	stp	x23, x24, [sp, #48]
    335c:	add	x24, x19, #0x8
    3360:	mov	w23, #0x1388                	// #5000
    3364:	stp	x25, x26, [sp, #64]
    3368:	add	x25, x19, x2
    336c:	mov	w26, #0x1387                	// #4999
    3370:	str	x27, [sp, #80]
    3374:	b	3380 <BZ2_bzclose+0x68>
    3378:	cmp	w20, #0x4
    337c:	b.eq	3478 <BZ2_bzclose+0x160>  // b.none
    3380:	str	x24, [x19, #5040]
    3384:	mov	x0, x25
    3388:	str	w23, [x19, #5048]
    338c:	mov	w1, #0x2                   	// #2
    3390:	bl	8b8 <BZ2_bzCompress>
    3394:	mov	w20, w0
    3398:	sub	w0, w0, #0x3
    339c:	cmp	w0, #0x1
    33a0:	b.hi	344c <BZ2_bzclose+0x134>  // b.pmore
    33a4:	ldr	w2, [x19, #5048]
    33a8:	cmp	w2, w26
    33ac:	b.hi	3378 <BZ2_bzclose+0x60>  // b.pmore
    33b0:	ldr	x3, [x19]
    33b4:	sub	w27, w23, w2
    33b8:	mov	x0, x24
    33bc:	sub	w2, w23, w2
    33c0:	mov	x1, #0x1                   	// #1
    33c4:	bl	0 <fwrite>
    33c8:	cmp	w27, w0
    33cc:	b.ne	33dc <BZ2_bzclose+0xc4>  // b.any
    33d0:	ldr	x0, [x19]
    33d4:	bl	0 <ferror>
    33d8:	cbz	w0, 3378 <BZ2_bzclose+0x60>
    33dc:	ldp	x23, x24, [sp, #48]
    33e0:	ldp	x25, x26, [sp, #64]
    33e4:	ldr	x27, [sp, #80]
    33e8:	mov	w0, #0xfffffffa            	// #-6
    33ec:	str	w0, [x19, #5096]
    33f0:	b	3460 <BZ2_bzclose+0x148>
    33f4:	str	wzr, [x19, #5096]
    33f8:	ldrb	w0, [x22, #1004]
    33fc:	cbnz	w0, 34ac <BZ2_bzclose+0x194>
    3400:	mov	x0, x19
    3404:	bl	0 <free>
    3408:	adrp	x0, 0 <stdin>
    340c:	ldr	x0, [x0]
    3410:	cmp	x0, x21
    3414:	b.eq	343c <BZ2_bzclose+0x124>  // b.none
    3418:	adrp	x0, 0 <stdout>
    341c:	ldr	x0, [x0]
    3420:	cmp	x0, x21
    3424:	b.eq	343c <BZ2_bzclose+0x124>  // b.none
    3428:	mov	x0, x21
    342c:	ldp	x19, x20, [sp, #16]
    3430:	ldp	x21, x22, [sp, #32]
    3434:	ldp	x29, x30, [sp], #96
    3438:	b	0 <fclose>
    343c:	ldp	x19, x20, [sp, #16]
    3440:	ldp	x21, x22, [sp, #32]
    3444:	ldp	x29, x30, [sp], #96
    3448:	ret
    344c:	ldp	x23, x24, [sp, #48]
    3450:	ldp	x25, x26, [sp, #64]
    3454:	ldr	x27, [sp, #80]
    3458:	str	w20, [x19, #5096]
    345c:	cbz	w20, 3408 <BZ2_bzclose+0xf0>
    3460:	ldrb	w0, [x22, #916]
    3464:	cbnz	w0, 34bc <BZ2_bzclose+0x1a4>
    3468:	mov	w0, #0xffffffff            	// #-1
    346c:	str	w0, [x19, #5096]
    3470:	b	3408 <BZ2_bzclose+0xf0>
    3474:	ret
    3478:	ldp	x23, x24, [sp, #48]
    347c:	ldp	x25, x26, [sp, #64]
    3480:	ldr	x27, [sp, #80]
    3484:	ldr	x0, [x19]
    3488:	bl	0 <ferror>
    348c:	cbz	w0, 34d4 <BZ2_bzclose+0x1bc>
    3490:	mov	x1, #0x1398                	// #5016
    3494:	str	wzr, [x19, #5096]
    3498:	add	x0, x19, x1
    349c:	bl	ab0 <BZ2_bzCompressEnd>
    34a0:	mov	x0, x19
    34a4:	bl	0 <free>
    34a8:	b	3408 <BZ2_bzclose+0xf0>
    34ac:	mov	x0, #0x1398                	// #5016
    34b0:	add	x0, x19, x0
    34b4:	bl	1cb0 <BZ2_bzDecompressEnd>
    34b8:	b	3400 <BZ2_bzclose+0xe8>
    34bc:	ldr	x0, [x19]
    34c0:	bl	0 <ferror>
    34c4:	cbz	w0, 3490 <BZ2_bzclose+0x178>
    34c8:	mov	w0, #0xfffffffa            	// #-6
    34cc:	str	w0, [x19, #5096]
    34d0:	b	3408 <BZ2_bzclose+0xf0>
    34d4:	ldr	x0, [x19]
    34d8:	bl	0 <fflush>
    34dc:	ldr	x0, [x19]
    34e0:	bl	0 <ferror>
    34e4:	cbz	w0, 3490 <BZ2_bzclose+0x178>
    34e8:	b	33e8 <BZ2_bzclose+0xd0>
    34ec:	nop

00000000000034f0 <BZ2_bzerror>:
    34f0:	ldr	w0, [x0, #5096]
    34f4:	adrp	x2, 0 <add_pair_to_block>
    34f8:	add	x2, x2, #0x0
    34fc:	cmp	w0, #0x0
    3500:	add	x2, x2, #0x10
    3504:	csel	w0, w0, wzr, le
    3508:	str	w0, [x1]
    350c:	neg	w0, w0
    3510:	ldr	x0, [x2, w0, sxtw #3]
    3514:	ret
