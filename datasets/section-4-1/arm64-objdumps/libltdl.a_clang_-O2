In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_clang_-O2:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <preopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <preopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 9c <preopen_LTX_get_vtable+0x9c>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 58 <preopen_LTX_get_vtable+0x58>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	9c <preopen_LTX_get_vtable+0x9c>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	b	9c <preopen_LTX_get_vtable+0x9c>
  58:	adrp	x9, 0 <preopen_LTX_get_vtable>
  5c:	adrp	x10, 0 <preopen_LTX_get_vtable>
  60:	adrp	x11, 0 <preopen_LTX_get_vtable>
  64:	adrp	x12, 0 <preopen_LTX_get_vtable>
  68:	adrp	x13, 0 <preopen_LTX_get_vtable>
  6c:	adrp	x14, 0 <preopen_LTX_get_vtable>
  70:	add	x9, x9, #0x0
  74:	add	x10, x10, #0x0
  78:	add	x11, x11, #0x0
  7c:	add	x12, x12, #0x0
  80:	add	x13, x13, #0x0
  84:	add	x14, x14, #0x0
  88:	stp	x9, xzr, [x8]
  8c:	stp	x10, x11, [x8, #16]
  90:	stp	x12, x13, [x8, #32]
  94:	stp	x14, x19, [x8, #48]
  98:	str	wzr, [x8, #64]
  9c:	ldp	x20, x19, [sp, #16]
  a0:	mov	x0, x8
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret

00000000000000ac <vm_open>:
  ac:	stp	x29, x30, [sp, #-48]!
  b0:	adrp	x8, 0 <preopen_LTX_get_vtable>
  b4:	stp	x22, x21, [sp, #16]
  b8:	ldr	x21, [x8]
  bc:	stp	x20, x19, [sp, #32]
  c0:	mov	x29, sp
  c4:	cbz	x21, 128 <vm_open+0x7c>
  c8:	adrp	x8, 0 <preopen_LTX_get_vtable>
  cc:	add	x8, x8, #0x0
  d0:	cmp	x1, #0x0
  d4:	csel	x19, x8, x1, eq  // eq = none
  d8:	b	e4 <vm_open+0x38>
  dc:	ldr	x21, [x21]
  e0:	cbz	x21, 130 <vm_open+0x84>
  e4:	ldr	x20, [x21, #8]
  e8:	ldr	x0, [x20]
  ec:	cbz	x0, dc <vm_open+0x30>
  f0:	add	x22, x20, #0x10
  f4:	b	100 <vm_open+0x54>
  f8:	ldr	x0, [x22], #16
  fc:	cbz	x0, dc <vm_open+0x30>
 100:	ldur	x8, [x22, #-8]
 104:	cbnz	x8, f8 <vm_open+0x4c>
 108:	mov	x1, x19
 10c:	bl	0 <strcmp>
 110:	cbnz	w0, f8 <vm_open+0x4c>
 114:	ldr	x8, [x22, #8]
 118:	cbz	x8, f8 <vm_open+0x4c>
 11c:	ldr	x8, [x22]
 120:	cbz	x8, f8 <vm_open+0x4c>
 124:	b	140 <vm_open+0x94>
 128:	mov	w0, #0x7                   	// #7
 12c:	b	134 <vm_open+0x88>
 130:	mov	w0, #0x5                   	// #5
 134:	bl	0 <lt__error_string>
 138:	bl	0 <lt__set_last_error>
 13c:	mov	x20, xzr
 140:	mov	x0, x20
 144:	ldp	x20, x19, [sp, #32]
 148:	ldp	x22, x21, [sp, #16]
 14c:	ldp	x29, x30, [sp], #48
 150:	ret

0000000000000154 <vm_close>:
 154:	mov	w0, wzr
 158:	ret

000000000000015c <vm_sym>:
 15c:	stp	x29, x30, [sp, #-48]!
 160:	str	x21, [sp, #16]
 164:	stp	x20, x19, [sp, #32]
 168:	mov	x21, x1
 16c:	ldr	x0, [x21, #16]!
 170:	mov	x20, x1
 174:	mov	x19, x2
 178:	mov	x29, sp
 17c:	cbz	x0, 194 <vm_sym+0x38>
 180:	adrp	x1, 0 <preopen_LTX_get_vtable>
 184:	add	x1, x1, #0x0
 188:	bl	0 <strcmp>
 18c:	cmp	w0, #0x0
 190:	csel	x20, x21, x20, eq  // eq = none
 194:	ldr	x0, [x20, #32]
 198:	cbz	x0, 1b4 <vm_sym+0x58>
 19c:	add	x20, x20, #0x30
 1a0:	mov	x1, x19
 1a4:	bl	0 <strcmp>
 1a8:	cbz	w0, 1c8 <vm_sym+0x6c>
 1ac:	ldr	x0, [x20], #16
 1b0:	cbnz	x0, 1a0 <vm_sym+0x44>
 1b4:	mov	w0, #0xa                   	// #10
 1b8:	bl	0 <lt__error_string>
 1bc:	bl	0 <lt__set_last_error>
 1c0:	mov	x0, xzr
 1c4:	b	1cc <vm_sym+0x70>
 1c8:	ldur	x0, [x20, #-8]
 1cc:	ldp	x20, x19, [sp, #32]
 1d0:	ldr	x21, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #48
 1d8:	ret

00000000000001dc <vl_init>:
 1dc:	stp	x29, x30, [sp, #-32]!
 1e0:	adrp	x8, 0 <preopen_LTX_get_vtable>
 1e4:	stp	x20, x19, [sp, #16]
 1e8:	ldr	x19, [x8]
 1ec:	adrp	x20, 0 <preopen_LTX_get_vtable>
 1f0:	mov	x29, sp
 1f4:	str	xzr, [x20]
 1f8:	cbz	x19, 234 <vl_init+0x58>
 1fc:	mov	w0, #0x10                  	// #16
 200:	bl	0 <lt__zalloc>
 204:	cbz	x0, 23c <vl_init+0x60>
 208:	ldr	x8, [x20]
 20c:	stp	x8, x19, [x0]
 210:	str	x0, [x20]
 214:	ldr	x0, [x19, #16]
 218:	cbz	x0, 240 <vl_init+0x64>
 21c:	adrp	x1, 0 <preopen_LTX_get_vtable>
 220:	add	x1, x1, #0x0
 224:	bl	0 <strcmp>
 228:	cbnz	w0, 234 <vl_init+0x58>
 22c:	ldr	x8, [x19, #24]
 230:	blr	x8
 234:	mov	w0, wzr
 238:	b	240 <vl_init+0x64>
 23c:	mov	w0, #0x1                   	// #1
 240:	ldp	x20, x19, [sp, #16]
 244:	ldp	x29, x30, [sp], #32
 248:	ret

000000000000024c <vl_exit>:
 24c:	stp	x29, x30, [sp, #-32]!
 250:	stp	x20, x19, [sp, #16]
 254:	adrp	x19, 0 <preopen_LTX_get_vtable>
 258:	ldr	x0, [x19]
 25c:	adrp	x8, 0 <preopen_LTX_get_vtable>
 260:	mov	x29, sp
 264:	str	xzr, [x8]
 268:	cbz	x0, 27c <vl_exit+0x30>
 26c:	ldr	x20, [x0]
 270:	bl	0 <free>
 274:	mov	x0, x20
 278:	cbnz	x20, 26c <vl_exit+0x20>
 27c:	str	xzr, [x19]
 280:	ldp	x20, x19, [sp, #16]
 284:	mov	w0, wzr
 288:	ldp	x29, x30, [sp], #32
 28c:	ret

0000000000000290 <lt_dlpreload_default>:
 290:	adrp	x8, 0 <preopen_LTX_get_vtable>
 294:	str	x0, [x8]
 298:	mov	w0, wzr
 29c:	ret

00000000000002a0 <lt_dlpreload>:
 2a0:	stp	x29, x30, [sp, #-32]!
 2a4:	stp	x20, x19, [sp, #16]
 2a8:	adrp	x20, 0 <preopen_LTX_get_vtable>
 2ac:	ldr	x8, [x20]
 2b0:	mov	x29, sp
 2b4:	cbz	x0, 2d8 <lt_dlpreload+0x38>
 2b8:	mov	x19, x0
 2bc:	cbz	x8, 300 <lt_dlpreload+0x60>
 2c0:	ldr	x9, [x8, #8]
 2c4:	cmp	x9, x19
 2c8:	b.eq	33c <lt_dlpreload+0x9c>  // b.none
 2cc:	ldr	x8, [x8]
 2d0:	cbnz	x8, 2c0 <lt_dlpreload+0x20>
 2d4:	b	300 <lt_dlpreload+0x60>
 2d8:	cbz	x8, 2f0 <lt_dlpreload+0x50>
 2dc:	ldr	x19, [x8]
 2e0:	mov	x0, x8
 2e4:	bl	0 <free>
 2e8:	mov	x8, x19
 2ec:	cbnz	x19, 2dc <lt_dlpreload+0x3c>
 2f0:	adrp	x8, 0 <preopen_LTX_get_vtable>
 2f4:	ldr	x19, [x8]
 2f8:	str	xzr, [x20]
 2fc:	cbz	x19, 33c <lt_dlpreload+0x9c>
 300:	mov	w0, #0x10                  	// #16
 304:	bl	0 <lt__zalloc>
 308:	cbz	x0, 344 <lt_dlpreload+0xa4>
 30c:	str	x19, [x0, #8]
 310:	ldr	x8, [x20]
 314:	str	x8, [x0]
 318:	str	x0, [x20]
 31c:	ldr	x0, [x19, #16]
 320:	cbz	x0, 348 <lt_dlpreload+0xa8>
 324:	adrp	x1, 0 <preopen_LTX_get_vtable>
 328:	add	x1, x1, #0x0
 32c:	bl	0 <strcmp>
 330:	cbnz	w0, 33c <lt_dlpreload+0x9c>
 334:	ldr	x8, [x19, #24]
 338:	blr	x8
 33c:	mov	w0, wzr
 340:	b	348 <lt_dlpreload+0xa8>
 344:	mov	w0, #0x1                   	// #1
 348:	ldp	x20, x19, [sp, #16]
 34c:	ldp	x29, x30, [sp], #32
 350:	ret

0000000000000354 <lt_dlpreload_open>:
 354:	stp	x29, x30, [sp, #-96]!
 358:	adrp	x8, 0 <preopen_LTX_get_vtable>
 35c:	stp	x26, x25, [sp, #32]
 360:	ldr	x25, [x8]
 364:	str	x27, [sp, #16]
 368:	stp	x24, x23, [sp, #48]
 36c:	stp	x22, x21, [sp, #64]
 370:	stp	x20, x19, [sp, #80]
 374:	mov	x29, sp
 378:	cbz	x25, 438 <lt_dlpreload_open+0xe4>
 37c:	adrp	x22, 0 <preopen_LTX_get_vtable>
 380:	mov	x20, x1
 384:	mov	x21, x0
 388:	mov	w19, wzr
 38c:	mov	w24, wzr
 390:	add	x22, x22, #0x0
 394:	b	3a0 <lt_dlpreload_open+0x4c>
 398:	ldr	x25, [x25]
 39c:	cbz	x25, 430 <lt_dlpreload_open+0xdc>
 3a0:	ldr	x27, [x25, #8]
 3a4:	ldr	x0, [x27]
 3a8:	cbz	x21, 3bc <lt_dlpreload_open+0x68>
 3ac:	mov	x1, x21
 3b0:	bl	0 <strcmp>
 3b4:	cbnz	w0, 398 <lt_dlpreload_open+0x44>
 3b8:	b	3c8 <lt_dlpreload_open+0x74>
 3bc:	mov	x1, x22
 3c0:	bl	0 <strcmp>
 3c4:	cbnz	w0, 398 <lt_dlpreload_open+0x44>
 3c8:	ldr	x23, [x27, #16]
 3cc:	add	w24, w24, #0x1
 3d0:	cbz	x23, 398 <lt_dlpreload_open+0x44>
 3d4:	mov	w26, #0x2                   	// #2
 3d8:	mov	w8, #0x1                   	// #1
 3dc:	b	400 <lt_dlpreload_open+0xac>
 3e0:	blr	x20
 3e4:	add	w19, w0, w19
 3e8:	ldr	x27, [x25, #8]
 3ec:	mov	w8, w26
 3f0:	lsl	x9, x8, #4
 3f4:	add	w26, w26, #0x1
 3f8:	ldr	x23, [x27, x9]
 3fc:	cbz	x23, 398 <lt_dlpreload_open+0x44>
 400:	add	x8, x27, x8, lsl #4
 404:	ldr	x8, [x8, #8]
 408:	cbnz	x8, 3e8 <lt_dlpreload_open+0x94>
 40c:	mov	x0, x23
 410:	mov	x1, x22
 414:	bl	0 <strcmp>
 418:	cbz	w0, 3e8 <lt_dlpreload_open+0x94>
 41c:	mov	x0, x23
 420:	bl	0 <lt_dlopen>
 424:	cbnz	x0, 3e0 <lt_dlpreload_open+0x8c>
 428:	add	w19, w19, #0x1
 42c:	b	3e8 <lt_dlpreload_open+0x94>
 430:	cbnz	w24, 44c <lt_dlpreload_open+0xf8>
 434:	b	43c <lt_dlpreload_open+0xe8>
 438:	mov	w19, wzr
 43c:	mov	w0, #0x8                   	// #8
 440:	bl	0 <lt__error_string>
 444:	bl	0 <lt__set_last_error>
 448:	add	w19, w19, #0x1
 44c:	mov	w0, w19
 450:	ldp	x20, x19, [sp, #80]
 454:	ldp	x22, x21, [sp, #64]
 458:	ldp	x24, x23, [sp, #48]
 45c:	ldp	x26, x25, [sp, #32]
 460:	ldr	x27, [sp, #16]
 464:	ldp	x29, x30, [sp], #96
 468:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <stderr>
   8:	ldr	x3, [x8]
   c:	adrp	x0, 0 <alloc_die_default>
  10:	add	x0, x0, #0x0
  14:	mov	w1, #0xf                   	// #15
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>

000000000000002c <lt__malloc>:
  2c:	stp	x29, x30, [sp, #-32]!
  30:	str	x19, [sp, #16]
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbnz	x0, 50 <lt__malloc+0x24>
  44:	adrp	x8, 0 <alloc_die_default>
  48:	ldr	x8, [x8]
  4c:	blr	x8
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <lt__zalloc>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	stp	x20, x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	x20, x0
  70:	bl	0 <malloc>
  74:	mov	x19, x0
  78:	cbz	x0, 90 <lt__zalloc+0x30>
  7c:	mov	x0, x19
  80:	mov	w1, wzr
  84:	mov	x2, x20
  88:	bl	0 <memset>
  8c:	b	9c <lt__zalloc+0x3c>
  90:	adrp	x8, 0 <alloc_die_default>
  94:	ldr	x8, [x8]
  98:	blr	x8
  9c:	mov	x0, x19
  a0:	ldp	x20, x19, [sp, #16]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret

00000000000000ac <lt__realloc>:
  ac:	stp	x29, x30, [sp, #-32]!
  b0:	str	x19, [sp, #16]
  b4:	mov	x29, sp
  b8:	bl	0 <realloc>
  bc:	mov	x19, x0
  c0:	cbnz	x0, d0 <lt__realloc+0x24>
  c4:	adrp	x8, 0 <alloc_die_default>
  c8:	ldr	x8, [x8]
  cc:	blr	x8
  d0:	mov	x0, x19
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

00000000000000e0 <lt__memdup>:
  e0:	stp	x29, x30, [sp, #-48]!
  e4:	str	x21, [sp, #16]
  e8:	mov	x21, x0
  ec:	mov	x0, x1
  f0:	stp	x20, x19, [sp, #32]
  f4:	mov	x29, sp
  f8:	mov	x20, x1
  fc:	bl	0 <malloc>
 100:	mov	x19, x0
 104:	cbz	x0, 11c <lt__memdup+0x3c>
 108:	mov	x0, x19
 10c:	mov	x1, x21
 110:	mov	x2, x20
 114:	bl	0 <memcpy>
 118:	b	128 <lt__memdup+0x48>
 11c:	adrp	x8, 0 <alloc_die_default>
 120:	ldr	x8, [x8]
 124:	blr	x8
 128:	mov	x0, x19
 12c:	ldp	x20, x19, [sp, #32]
 130:	ldr	x21, [sp, #16]
 134:	ldp	x29, x30, [sp], #48
 138:	ret

000000000000013c <lt__strdup>:
 13c:	stp	x29, x30, [sp, #-48]!
 140:	str	x21, [sp, #16]
 144:	stp	x20, x19, [sp, #32]
 148:	mov	x29, sp
 14c:	mov	x20, x0
 150:	bl	0 <strlen>
 154:	add	x21, x0, #0x1
 158:	mov	x0, x21
 15c:	bl	0 <malloc>
 160:	mov	x19, x0
 164:	cbz	x0, 17c <lt__strdup+0x40>
 168:	mov	x0, x19
 16c:	mov	x1, x20
 170:	mov	x2, x21
 174:	bl	0 <memcpy>
 178:	b	188 <lt__strdup+0x4c>
 17c:	adrp	x8, 0 <alloc_die_default>
 180:	ldr	x8, [x8]
 184:	blr	x8
 188:	mov	x0, x19
 18c:	ldp	x20, x19, [sp, #32]
 190:	ldr	x21, [sp, #16]
 194:	ldp	x29, x30, [sp], #48
 198:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dlloader_add>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 6c <lt_dlloader_add+0x6c>
  10:	ldr	x8, [x0, #16]
  14:	mov	x19, x0
  18:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  1c:	ldr	x8, [x19, #24]
  20:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  24:	ldr	x8, [x19, #32]
  28:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  2c:	ldr	w8, [x19, #64]
  30:	cmp	w8, #0x2
  34:	b.cs	6c <lt_dlloader_add+0x6c>  // b.hs, b.nlast
  38:	mov	x0, x19
  3c:	bl	0 <lt__slist_box>
  40:	cbz	x0, 88 <lt_dlloader_add+0x88>
  44:	ldr	w9, [x19, #64]
  48:	mov	x8, x0
  4c:	adrp	x19, 0 <lt_dlloader_add>
  50:	cmp	w9, #0x1
  54:	b.eq	98 <lt_dlloader_add+0x98>  // b.none
  58:	cbnz	w9, b4 <lt_dlloader_add+0xb4>
  5c:	ldr	x1, [x19]
  60:	mov	x0, x8
  64:	bl	0 <lt__slist_cons>
  68:	b	a4 <lt_dlloader_add+0xa4>
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <lt__error_string>
  74:	bl	0 <lt__set_last_error>
  78:	mov	w0, #0x1                   	// #1
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret
  88:	adrp	x8, 0 <lt__alloc_die>
  8c:	ldr	x8, [x8]
  90:	blr	x8
  94:	b	78 <lt_dlloader_add+0x78>
  98:	ldr	x0, [x19]
  9c:	mov	x1, x8
  a0:	bl	0 <lt__slist_concat>
  a4:	mov	x8, x0
  a8:	mov	w0, wzr
  ac:	str	x8, [x19]
  b0:	b	7c <lt_dlloader_add+0x7c>
  b4:	adrp	x0, 0 <lt_dlloader_add>
  b8:	adrp	x1, 0 <lt_dlloader_add>
  bc:	adrp	x3, 0 <lt_dlloader_add>
  c0:	add	x0, x0, #0x0
  c4:	add	x1, x1, #0x0
  c8:	add	x3, x3, #0x0
  cc:	mov	w2, #0x5e                  	// #94
  d0:	bl	0 <__assert_fail>

00000000000000d4 <lt_dlloader_next>:
  d4:	adrp	x8, 0 <lt_dlloader_add>
  d8:	add	x8, x8, #0x0
  dc:	cmp	x0, #0x0
  e0:	csel	x8, x8, x0, eq  // eq = none
  e4:	ldr	x0, [x8]
  e8:	ret

00000000000000ec <lt_dlloader_get>:
  ec:	cbz	x0, f4 <lt_dlloader_get+0x8>
  f0:	ldr	x0, [x0, #8]
  f4:	ret

00000000000000f8 <lt_dlloader_remove>:
  f8:	stp	x29, x30, [sp, #-64]!
  fc:	stp	x24, x23, [sp, #16]
 100:	stp	x22, x21, [sp, #32]
 104:	stp	x20, x19, [sp, #48]
 108:	adrp	x8, 0 <lt_dlloader_add>
 10c:	ldr	x8, [x8]
 110:	mov	x19, x0
 114:	adrp	x1, 0 <lt_dlloader_add>
 118:	add	x1, x1, #0x0
 11c:	mov	x0, x8
 120:	mov	x2, x19
 124:	mov	x29, sp
 128:	bl	0 <lt__slist_find>
 12c:	cbz	x0, 1a0 <lt_dlloader_remove+0xa8>
 130:	ldr	x22, [x0, #8]
 134:	cbz	x22, 1a0 <lt_dlloader_remove+0xa8>
 138:	adrp	x0, 0 <lt_dlloader_add>
 13c:	add	x0, x0, #0x0
 140:	mov	x1, xzr
 144:	bl	0 <lt_dlinterface_register>
 148:	mov	x1, xzr
 14c:	mov	x20, x0
 150:	bl	0 <lt_dlhandle_iterate>
 154:	cbz	x0, 1dc <lt_dlloader_remove+0xe4>
 158:	mov	x21, x0
 15c:	mov	w23, wzr
 160:	mov	w24, wzr
 164:	b	17c <lt_dlloader_remove+0x84>
 168:	mov	x0, x20
 16c:	mov	x1, x21
 170:	bl	0 <lt_dlhandle_iterate>
 174:	mov	x21, x0
 178:	cbz	x0, 1c4 <lt_dlloader_remove+0xcc>
 17c:	ldr	x8, [x21, #8]
 180:	cmp	x8, x22
 184:	b.ne	168 <lt_dlloader_remove+0x70>  // b.any
 188:	mov	x0, x21
 18c:	bl	0 <lt_dlisresident>
 190:	cmp	w0, #0x0
 194:	csinc	w23, w23, wzr, eq  // eq = none
 198:	mov	w24, #0x1                   	// #1
 19c:	b	168 <lt_dlloader_remove+0x70>
 1a0:	mov	w0, #0x2                   	// #2
 1a4:	bl	0 <lt__error_string>
 1a8:	bl	0 <lt__set_last_error>
 1ac:	ldp	x20, x19, [sp, #48]
 1b0:	ldp	x22, x21, [sp, #32]
 1b4:	ldp	x24, x23, [sp, #16]
 1b8:	mov	x0, xzr
 1bc:	ldp	x29, x30, [sp], #64
 1c0:	ret
 1c4:	mov	x0, x20
 1c8:	bl	0 <lt_dlinterface_free>
 1cc:	cbz	w24, 1e4 <lt_dlloader_remove+0xec>
 1d0:	cbnz	w23, 1ac <lt_dlloader_remove+0xb4>
 1d4:	mov	w0, #0x4                   	// #4
 1d8:	b	1a4 <lt_dlloader_remove+0xac>
 1dc:	mov	x0, x20
 1e0:	bl	0 <lt_dlinterface_free>
 1e4:	ldr	x8, [x22, #48]
 1e8:	cbz	x8, 1f8 <lt_dlloader_remove+0x100>
 1ec:	ldr	x0, [x22, #56]
 1f0:	blr	x8
 1f4:	cbnz	w0, 1ac <lt_dlloader_remove+0xb4>
 1f8:	adrp	x0, 0 <lt_dlloader_add>
 1fc:	adrp	x1, 0 <lt_dlloader_add>
 200:	add	x0, x0, #0x0
 204:	add	x1, x1, #0x0
 208:	mov	x2, x19
 20c:	bl	0 <lt__slist_remove>
 210:	ldp	x20, x19, [sp, #48]
 214:	ldp	x22, x21, [sp, #32]
 218:	ldp	x24, x23, [sp, #16]
 21c:	ldp	x29, x30, [sp], #64
 220:	b	0 <lt__slist_unbox>

0000000000000224 <lt_dlloader_find>:
 224:	stp	x29, x30, [sp, #-16]!
 228:	adrp	x8, 0 <lt_dlloader_add>
 22c:	ldr	x8, [x8]
 230:	adrp	x1, 0 <lt_dlloader_add>
 234:	mov	x2, x0
 238:	add	x1, x1, #0x0
 23c:	mov	x0, x8
 240:	mov	x29, sp
 244:	bl	0 <lt__slist_find>
 248:	cbz	x0, 250 <lt_dlloader_find+0x2c>
 24c:	ldr	x0, [x0, #8]
 250:	ldp	x29, x30, [sp], #16
 254:	ret

0000000000000258 <loader_callback>:
 258:	stp	x29, x30, [sp, #-32]!
 25c:	ldr	x8, [x0, #8]
 260:	str	x19, [sp, #16]
 264:	mov	x29, sp
 268:	cbz	x8, 28c <loader_callback+0x34>
 26c:	mov	x19, x0
 270:	ldr	x0, [x8]
 274:	bl	0 <strcmp>
 278:	cmp	w0, #0x0
 27c:	csel	x0, x19, xzr, eq  // eq = none
 280:	ldr	x19, [sp, #16]
 284:	ldp	x29, x30, [sp], #32
 288:	ret
 28c:	adrp	x0, 0 <lt_dlloader_add>
 290:	adrp	x1, 0 <lt_dlloader_add>
 294:	adrp	x3, 0 <lt_dlloader_add>
 298:	add	x0, x0, #0x0
 29c:	add	x1, x1, #0x0
 2a0:	add	x3, x3, #0x0
 2a4:	mov	w2, #0x36                  	// #54
 2a8:	bl	0 <__assert_fail>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 68 <lt_dladderror+0x68>
  14:	adrp	x20, 0 <lt_dladderror>
  18:	ldr	w21, [x20]
  1c:	adrp	x22, 0 <lt_dladderror>
  20:	mov	x19, x0
  24:	ldr	x0, [x22]
  28:	sub	w8, w21, #0x13
  2c:	sbfiz	x1, x8, #3, #32
  30:	bl	0 <lt__realloc>
  34:	cbz	x0, 54 <lt_dladderror+0x54>
  38:	sub	w8, w21, #0x14
  3c:	str	x0, [x22]
  40:	str	x19, [x0, w8, sxtw #3]
  44:	ldr	w0, [x20]
  48:	add	w8, w0, #0x1
  4c:	str	w8, [x20]
  50:	b	58 <lt_dladderror+0x58>
  54:	mov	w0, #0xffffffff            	// #-1
  58:	ldp	x20, x19, [sp, #32]
  5c:	ldp	x22, x21, [sp, #16]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	adrp	x0, 0 <lt_dladderror>
  6c:	adrp	x1, 0 <lt_dladderror>
  70:	adrp	x3, 0 <lt_dladderror>
  74:	add	x0, x0, #0x0
  78:	add	x1, x1, #0x0
  7c:	add	x3, x3, #0x0
  80:	mov	w2, #0x35                  	// #53
  84:	bl	0 <__assert_fail>

0000000000000088 <lt_dlseterror>:
  88:	tbnz	w0, #31, c0 <lt_dlseterror+0x38>
  8c:	adrp	x9, 0 <lt_dladderror>
  90:	ldr	w9, [x9]
  94:	mov	w8, w0
  98:	cmp	w9, w0
  9c:	b.le	c0 <lt_dlseterror+0x38>
  a0:	cmp	w8, #0x13
  a4:	b.gt	d8 <lt_dlseterror+0x50>
  a8:	adrp	x9, 0 <lt_dladderror>
  ac:	add	x9, x9, #0x0
  b0:	mov	w10, #0x2a                  	// #42
  b4:	mov	w0, wzr
  b8:	umaddl	x8, w8, w10, x9
  bc:	b	ec <lt_dlseterror+0x64>
  c0:	adrp	x9, 0 <lt_dladderror>
  c4:	adrp	x8, 0 <lt_dladderror>
  c8:	add	x9, x9, #0x0
  cc:	mov	w0, #0x1                   	// #1
  d0:	str	x9, [x8]
  d4:	ret
  d8:	adrp	x9, 0 <lt_dladderror>
  dc:	ldr	x9, [x9]
  e0:	sub	w8, w8, #0x14
  e4:	mov	w0, wzr
  e8:	ldr	x8, [x9, w8, sxtw #3]
  ec:	adrp	x9, 0 <lt_dladderror>
  f0:	str	x8, [x9]
  f4:	ret

00000000000000f8 <lt__set_last_error>:
  f8:	adrp	x8, 0 <lt_dladderror>
  fc:	str	x0, [x8]
 100:	ret

0000000000000104 <lt__error_string>:
 104:	stp	x29, x30, [sp, #-16]!
 108:	mov	x29, sp
 10c:	tbnz	w0, #31, 130 <lt__error_string+0x2c>
 110:	cmp	w0, #0x14
 114:	b.ge	150 <lt__error_string+0x4c>  // b.tcont
 118:	adrp	x8, 0 <lt_dladderror>
 11c:	add	x8, x8, #0x0
 120:	mov	w9, #0x2a                  	// #42
 124:	umaddl	x0, w0, w9, x8
 128:	ldp	x29, x30, [sp], #16
 12c:	ret
 130:	adrp	x0, 0 <lt_dladderror>
 134:	adrp	x1, 0 <lt_dladderror>
 138:	adrp	x3, 0 <lt_dladderror>
 13c:	add	x0, x0, #0x0
 140:	add	x1, x1, #0x0
 144:	add	x3, x3, #0x0
 148:	mov	w2, #0x5f                  	// #95
 14c:	bl	0 <__assert_fail>
 150:	adrp	x0, 0 <lt_dladderror>
 154:	adrp	x1, 0 <lt_dladderror>
 158:	adrp	x3, 0 <lt_dladderror>
 15c:	add	x0, x0, #0x0
 160:	add	x1, x1, #0x0
 164:	add	x3, x3, #0x0
 168:	mov	w2, #0x60                  	// #96
 16c:	bl	0 <__assert_fail>

0000000000000170 <lt__get_last_error>:
 170:	adrp	x8, 0 <lt_dladderror>
 174:	ldr	x0, [x8]
 178:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <lt_dlinit>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	adrp	x8, 0 <lt__alloc_die_callback>
      20:	ldr	w9, [x8]
      24:	str	x19, [sp, #16]
      28:	mov	x29, sp
      2c:	add	w10, w9, #0x1
      30:	str	w10, [x8]
      34:	cbz	w9, 40 <lt_dlinit+0x28>
      38:	mov	w0, wzr
      3c:	b	7c <lt_dlinit+0x64>
      40:	adrp	x9, 0 <lt__alloc_die_callback>
      44:	adrp	x8, 0 <lt__alloc_die>
      48:	add	x9, x9, #0x0
      4c:	adrp	x10, 0 <lt__alloc_die_callback>
      50:	adrp	x11, 0 <lt__alloc_die_callback>
      54:	mov	x0, xzr
      58:	str	x9, [x8]
      5c:	str	xzr, [x10]
      60:	str	xzr, [x11]
      64:	bl	0 <preopen_LTX_get_vtable>
      68:	mov	x19, x0
      6c:	bl	0 <lt_dlloader_add>
      70:	cbnz	x19, 78 <lt_dlinit+0x60>
      74:	cbz	w0, dc <lt_dlinit+0xc4>
      78:	cbz	w0, 88 <lt_dlinit+0x70>
      7c:	ldr	x19, [sp, #16]
      80:	ldp	x29, x30, [sp], #32
      84:	ret
      88:	ldr	x8, [x19, #40]
      8c:	cbz	x8, b0 <lt_dlinit+0x98>
      90:	ldr	x0, [x19, #56]
      94:	blr	x8
      98:	cbz	w0, b0 <lt_dlinit+0x98>
      9c:	mov	w0, #0x3                   	// #3
      a0:	bl	0 <lt__error_string>
      a4:	bl	0 <lt__set_last_error>
      a8:	mov	w0, #0x1                   	// #1
      ac:	b	7c <lt_dlinit+0x64>
      b0:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
      b4:	add	x0, x0, #0x0
      b8:	bl	0 <lt_dlpreload>
      bc:	cbnz	w0, 7c <lt_dlinit+0x64>
      c0:	ldr	x19, [sp, #16]
      c4:	adrp	x0, 0 <lt__alloc_die_callback>
      c8:	adrp	x1, 0 <lt__alloc_die_callback>
      cc:	add	x0, x0, #0x0
      d0:	add	x1, x1, #0x0
      d4:	ldp	x29, x30, [sp], #32
      d8:	b	0 <lt_dlpreload_open>
      dc:	adrp	x0, 0 <lt__alloc_die_callback>
      e0:	adrp	x1, 0 <lt__alloc_die_callback>
      e4:	adrp	x3, 0 <lt__alloc_die_callback>
      e8:	add	x0, x0, #0x0
      ec:	add	x1, x1, #0x0
      f0:	add	x3, x3, #0x0
      f4:	mov	w2, #0xc7                  	// #199
      f8:	bl	0 <__assert_fail>

00000000000000fc <loader_init_callback>:
      fc:	stp	x29, x30, [sp, #-32]!
     100:	adrp	x1, 0 <lt__alloc_die_callback>
     104:	add	x1, x1, #0x0
     108:	str	x19, [sp, #16]
     10c:	mov	x29, sp
     110:	bl	1c70 <lt_dlsym>
     114:	cbz	x0, 12c <loader_init_callback+0x30>
     118:	mov	x8, x0
     11c:	mov	x0, xzr
     120:	blr	x8
     124:	mov	x19, x0
     128:	b	130 <loader_init_callback+0x34>
     12c:	mov	x19, xzr
     130:	mov	x0, x19
     134:	bl	0 <lt_dlloader_add>
     138:	cbnz	x19, 140 <loader_init_callback+0x44>
     13c:	cbz	w0, 180 <loader_init_callback+0x84>
     140:	cbz	w0, 150 <loader_init_callback+0x54>
     144:	ldr	x19, [sp, #16]
     148:	ldp	x29, x30, [sp], #32
     14c:	ret
     150:	ldr	x8, [x19, #40]
     154:	cbz	x8, 178 <loader_init_callback+0x7c>
     158:	ldr	x0, [x19, #56]
     15c:	blr	x8
     160:	cbz	w0, 144 <loader_init_callback+0x48>
     164:	mov	w0, #0x3                   	// #3
     168:	bl	0 <lt__error_string>
     16c:	bl	0 <lt__set_last_error>
     170:	mov	w0, #0x1                   	// #1
     174:	b	144 <loader_init_callback+0x48>
     178:	mov	w0, wzr
     17c:	b	144 <loader_init_callback+0x48>
     180:	adrp	x0, 0 <lt__alloc_die_callback>
     184:	adrp	x1, 0 <lt__alloc_die_callback>
     188:	adrp	x3, 0 <lt__alloc_die_callback>
     18c:	add	x0, x0, #0x0
     190:	add	x1, x1, #0x0
     194:	add	x3, x3, #0x0
     198:	mov	w2, #0xc7                  	// #199
     19c:	bl	0 <__assert_fail>

00000000000001a0 <lt_dlexit>:
     1a0:	stp	x29, x30, [sp, #-64]!
     1a4:	adrp	x9, 0 <lt__alloc_die_callback>
     1a8:	ldr	w10, [x9]
     1ac:	str	x23, [sp, #16]
     1b0:	stp	x22, x21, [sp, #32]
     1b4:	stp	x20, x19, [sp, #48]
     1b8:	mov	x29, sp
     1bc:	cbz	w10, 1dc <lt_dlexit+0x3c>
     1c0:	adrp	x20, 0 <lt__alloc_die_callback>
     1c4:	ldr	x8, [x20]
     1c8:	subs	w10, w10, #0x1
     1cc:	str	w10, [x9]
     1d0:	b.eq	1f0 <lt_dlexit+0x50>  // b.none
     1d4:	mov	w19, wzr
     1d8:	b	308 <lt_dlexit+0x168>
     1dc:	mov	w0, #0xf                   	// #15
     1e0:	bl	0 <lt__error_string>
     1e4:	bl	0 <lt__set_last_error>
     1e8:	mov	w19, #0x1                   	// #1
     1ec:	b	308 <lt_dlexit+0x168>
     1f0:	cbz	x8, 29c <lt_dlexit+0xfc>
     1f4:	mov	x0, x8
     1f8:	ldrb	w9, [x0, #36]
     1fc:	tbz	w9, #0, 20c <lt_dlexit+0x6c>
     200:	ldr	x0, [x0]
     204:	str	x0, [x20]
     208:	cbnz	x0, 1f8 <lt_dlexit+0x58>
     20c:	cbz	x8, 29c <lt_dlexit+0xfc>
     210:	mov	w19, wzr
     214:	cbz	x0, 298 <lt_dlexit+0xf8>
     218:	adrp	x22, 0 <lt__alloc_die_callback>
     21c:	mov	w21, #0x1                   	// #1
     220:	add	x22, x22, #0x0
     224:	b	238 <lt_dlexit+0x98>
     228:	cbz	w8, 298 <lt_dlexit+0xf8>
     22c:	ldr	x0, [x20]
     230:	add	w21, w21, #0x1
     234:	cbz	x0, 298 <lt_dlexit+0xf8>
     238:	mov	w8, wzr
     23c:	b	258 <lt_dlexit+0xb8>
     240:	ldr	x9, [x20]
     244:	cmp	x8, #0x0
     248:	csel	x23, x23, x9, ne  // ne = any
     24c:	mov	w8, #0x1                   	// #1
     250:	mov	x0, x23
     254:	cbz	x23, 228 <lt_dlexit+0x88>
     258:	ldrb	w9, [x0, #36]
     25c:	ldr	x23, [x0]
     260:	tbnz	w9, #0, 250 <lt_dlexit+0xb0>
     264:	ldr	w8, [x0, #32]
     268:	cmp	w8, w21
     26c:	b.gt	24c <lt_dlexit+0xac>
     270:	bl	320 <lt_dlclose>
     274:	cmp	w0, #0x0
     278:	cinc	w19, w19, ne  // ne = any
     27c:	cbz	x23, 22c <lt_dlexit+0x8c>
     280:	mov	x8, x22
     284:	ldr	x8, [x8]
     288:	cmp	x8, x23
     28c:	b.eq	240 <lt_dlexit+0xa0>  // b.none
     290:	cbnz	x8, 284 <lt_dlexit+0xe4>
     294:	b	240 <lt_dlexit+0xa0>
     298:	cbnz	w19, 2a8 <lt_dlexit+0x108>
     29c:	mov	x0, xzr
     2a0:	bl	0 <lt__set_last_error>
     2a4:	mov	w19, wzr
     2a8:	mov	x0, xzr
     2ac:	bl	0 <lt_dlloader_next>
     2b0:	cbz	x0, 2f8 <lt_dlexit+0x158>
     2b4:	mov	x20, x0
     2b8:	b	2cc <lt_dlexit+0x12c>
     2bc:	bl	0 <lt__get_last_error>
     2c0:	cmp	x0, #0x0
     2c4:	cinc	w19, w19, ne  // ne = any
     2c8:	cbz	x20, 2f8 <lt_dlexit+0x158>
     2cc:	mov	x0, x20
     2d0:	mov	x21, x20
     2d4:	bl	0 <lt_dlloader_next>
     2d8:	mov	x20, x0
     2dc:	mov	x0, x21
     2e0:	bl	0 <lt_dlloader_get>
     2e4:	ldr	x0, [x0]
     2e8:	bl	0 <lt_dlloader_remove>
     2ec:	cbz	x0, 2bc <lt_dlexit+0x11c>
     2f0:	bl	0 <free>
     2f4:	cbnz	x20, 2cc <lt_dlexit+0x12c>
     2f8:	adrp	x20, 0 <lt__alloc_die_callback>
     2fc:	ldr	x0, [x20]
     300:	bl	0 <free>
     304:	str	xzr, [x20]
     308:	mov	w0, w19
     30c:	ldp	x20, x19, [sp, #48]
     310:	ldp	x22, x21, [sp, #32]
     314:	ldr	x23, [sp, #16]
     318:	ldp	x29, x30, [sp], #64
     31c:	ret

0000000000000320 <lt_dlclose>:
     320:	stp	x29, x30, [sp, #-48]!
     324:	adrp	x8, 0 <lt__alloc_die_callback>
     328:	ldr	x8, [x8]
     32c:	stp	x20, x19, [sp, #32]
     330:	mov	x19, x0
     334:	stp	x22, x21, [sp, #16]
     338:	cmp	x8, #0x0
     33c:	cset	w10, ne  // ne = any
     340:	mov	x29, sp
     344:	cbz	x8, 374 <lt_dlclose+0x54>
     348:	cmp	x8, x19
     34c:	b.eq	40c <lt_dlclose+0xec>  // b.none
     350:	mov	x11, x8
     354:	mov	x9, x11
     358:	ldr	x11, [x11]
     35c:	cmp	x11, #0x0
     360:	cset	w10, ne  // ne = any
     364:	cbz	x11, 378 <lt_dlclose+0x58>
     368:	cmp	x11, x19
     36c:	b.ne	354 <lt_dlclose+0x34>  // b.any
     370:	b	378 <lt_dlclose+0x58>
     374:	mov	x9, x8
     378:	tbz	w10, #0, 414 <lt_dlclose+0xf4>
     37c:	ldr	w11, [x19, #32]
     380:	ldrb	w10, [x19, #36]
     384:	subs	w11, w11, #0x1
     388:	str	w11, [x19, #32]
     38c:	b.gt	41c <lt_dlclose+0xfc>
     390:	tbnz	w10, #0, 428 <lt_dlclose+0x108>
     394:	ldp	x11, x10, [x19]
     398:	adrp	x12, 0 <lt__alloc_die_callback>
     39c:	add	x12, x12, #0x0
     3a0:	cmp	x8, x19
     3a4:	csel	x8, x12, x9, eq  // eq = none
     3a8:	ldr	x0, [x10, #56]
     3ac:	str	x11, [x8]
     3b0:	ldr	x8, [x10, #24]
     3b4:	ldr	x1, [x19, #56]
     3b8:	blr	x8
     3bc:	ldr	w9, [x19, #40]
     3c0:	mov	w20, w0
     3c4:	cbz	w9, 44c <lt_dlclose+0x12c>
     3c8:	ldr	x8, [x19, #48]
     3cc:	cmp	w9, #0x1
     3d0:	b.lt	454 <lt_dlclose+0x134>  // b.tstop
     3d4:	mov	x22, xzr
     3d8:	mov	w21, wzr
     3dc:	b	3ec <lt_dlclose+0xcc>
     3e0:	add	x22, x22, #0x1
     3e4:	cmp	x22, w9, sxtw
     3e8:	b.ge	458 <lt_dlclose+0x138>  // b.tcont
     3ec:	ldr	x0, [x8, x22, lsl #3]
     3f0:	ldrb	w10, [x0, #36]
     3f4:	tbnz	w10, #0, 3e0 <lt_dlclose+0xc0>
     3f8:	bl	320 <lt_dlclose>
     3fc:	ldr	w9, [x19, #40]
     400:	ldr	x8, [x19, #48]
     404:	add	w21, w0, w21
     408:	b	3e0 <lt_dlclose+0xc0>
     40c:	mov	x9, x8
     410:	tbnz	w10, #0, 37c <lt_dlclose+0x5c>
     414:	mov	w0, #0xc                   	// #12
     418:	b	42c <lt_dlclose+0x10c>
     41c:	tbnz	w10, #0, 428 <lt_dlclose+0x108>
     420:	mov	w20, wzr
     424:	b	438 <lt_dlclose+0x118>
     428:	mov	w0, #0x10                  	// #16
     42c:	bl	0 <lt__error_string>
     430:	bl	0 <lt__set_last_error>
     434:	mov	w20, #0x1                   	// #1
     438:	mov	w0, w20
     43c:	ldp	x20, x19, [sp, #32]
     440:	ldp	x22, x21, [sp, #16]
     444:	ldp	x29, x30, [sp], #48
     448:	ret
     44c:	mov	w21, wzr
     450:	b	464 <lt_dlclose+0x144>
     454:	mov	w21, wzr
     458:	mov	x0, x8
     45c:	bl	0 <free>
     460:	str	xzr, [x19, #48]
     464:	ldr	x0, [x19, #72]
     468:	add	w20, w21, w20
     46c:	bl	0 <free>
     470:	ldr	x0, [x19, #16]
     474:	str	xzr, [x19, #72]
     478:	bl	0 <free>
     47c:	ldr	x0, [x19, #24]
     480:	str	xzr, [x19, #16]
     484:	bl	0 <free>
     488:	mov	x0, x19
     48c:	bl	0 <free>
     490:	b	438 <lt_dlclose+0x118>

0000000000000494 <lt_dladvise_init>:
     494:	stp	x29, x30, [sp, #-32]!
     498:	str	x19, [sp, #16]
     49c:	mov	x19, x0
     4a0:	mov	w0, #0x4                   	// #4
     4a4:	mov	x29, sp
     4a8:	bl	0 <lt__zalloc>
     4ac:	str	x0, [x19]
     4b0:	ldr	x19, [sp, #16]
     4b4:	cmp	x0, #0x0
     4b8:	cset	w8, eq  // eq = none
     4bc:	mov	w0, w8
     4c0:	ldp	x29, x30, [sp], #32
     4c4:	ret

00000000000004c8 <lt_dladvise_destroy>:
     4c8:	cbz	x0, 4f0 <lt_dladvise_destroy+0x28>
     4cc:	stp	x29, x30, [sp, #-32]!
     4d0:	str	x19, [sp, #16]
     4d4:	mov	x19, x0
     4d8:	ldr	x0, [x0]
     4dc:	mov	x29, sp
     4e0:	bl	0 <free>
     4e4:	str	xzr, [x19]
     4e8:	ldr	x19, [sp, #16]
     4ec:	ldp	x29, x30, [sp], #32
     4f0:	mov	w0, wzr
     4f4:	ret

00000000000004f8 <lt_dladvise_ext>:
     4f8:	stp	x29, x30, [sp, #-16]!
     4fc:	mov	x29, sp
     500:	cbz	x0, 524 <lt_dladvise_ext+0x2c>
     504:	ldr	x8, [x0]
     508:	cbz	x8, 524 <lt_dladvise_ext+0x2c>
     50c:	ldrb	w9, [x8]
     510:	mov	w0, wzr
     514:	orr	w9, w9, #0x1
     518:	strb	w9, [x8]
     51c:	ldp	x29, x30, [sp], #16
     520:	ret
     524:	adrp	x0, 0 <lt__alloc_die_callback>
     528:	adrp	x1, 0 <lt__alloc_die_callback>
     52c:	adrp	x3, 0 <lt__alloc_die_callback>
     530:	add	x0, x0, #0x0
     534:	add	x1, x1, #0x0
     538:	add	x3, x3, #0x0
     53c:	mov	w2, #0x631                 	// #1585
     540:	bl	0 <__assert_fail>

0000000000000544 <lt_dladvise_resident>:
     544:	stp	x29, x30, [sp, #-16]!
     548:	mov	x29, sp
     54c:	cbz	x0, 570 <lt_dladvise_resident+0x2c>
     550:	ldr	x8, [x0]
     554:	cbz	x8, 570 <lt_dladvise_resident+0x2c>
     558:	ldrb	w9, [x8]
     55c:	mov	w0, wzr
     560:	orr	w9, w9, #0x2
     564:	strb	w9, [x8]
     568:	ldp	x29, x30, [sp], #16
     56c:	ret
     570:	adrp	x0, 0 <lt__alloc_die_callback>
     574:	adrp	x1, 0 <lt__alloc_die_callback>
     578:	adrp	x3, 0 <lt__alloc_die_callback>
     57c:	add	x0, x0, #0x0
     580:	add	x1, x1, #0x0
     584:	add	x3, x3, #0x0
     588:	mov	w2, #0x639                 	// #1593
     58c:	bl	0 <__assert_fail>

0000000000000590 <lt_dladvise_local>:
     590:	stp	x29, x30, [sp, #-16]!
     594:	mov	x29, sp
     598:	cbz	x0, 5bc <lt_dladvise_local+0x2c>
     59c:	ldr	x8, [x0]
     5a0:	cbz	x8, 5bc <lt_dladvise_local+0x2c>
     5a4:	ldrb	w9, [x8]
     5a8:	mov	w0, wzr
     5ac:	orr	w9, w9, #0x8
     5b0:	strb	w9, [x8]
     5b4:	ldp	x29, x30, [sp], #16
     5b8:	ret
     5bc:	adrp	x0, 0 <lt__alloc_die_callback>
     5c0:	adrp	x1, 0 <lt__alloc_die_callback>
     5c4:	adrp	x3, 0 <lt__alloc_die_callback>
     5c8:	add	x0, x0, #0x0
     5cc:	add	x1, x1, #0x0
     5d0:	add	x3, x3, #0x0
     5d4:	mov	w2, #0x641                 	// #1601
     5d8:	bl	0 <__assert_fail>

00000000000005dc <lt_dladvise_global>:
     5dc:	stp	x29, x30, [sp, #-16]!
     5e0:	mov	x29, sp
     5e4:	cbz	x0, 608 <lt_dladvise_global+0x2c>
     5e8:	ldr	x8, [x0]
     5ec:	cbz	x8, 608 <lt_dladvise_global+0x2c>
     5f0:	ldrb	w9, [x8]
     5f4:	mov	w0, wzr
     5f8:	orr	w9, w9, #0x4
     5fc:	strb	w9, [x8]
     600:	ldp	x29, x30, [sp], #16
     604:	ret
     608:	adrp	x0, 0 <lt__alloc_die_callback>
     60c:	adrp	x1, 0 <lt__alloc_die_callback>
     610:	adrp	x3, 0 <lt__alloc_die_callback>
     614:	add	x0, x0, #0x0
     618:	add	x1, x1, #0x0
     61c:	add	x3, x3, #0x0
     620:	mov	w2, #0x649                 	// #1609
     624:	bl	0 <__assert_fail>

0000000000000628 <lt_dladvise_preload>:
     628:	stp	x29, x30, [sp, #-16]!
     62c:	mov	x29, sp
     630:	cbz	x0, 654 <lt_dladvise_preload+0x2c>
     634:	ldr	x8, [x0]
     638:	cbz	x8, 654 <lt_dladvise_preload+0x2c>
     63c:	ldrb	w9, [x8]
     640:	mov	w0, wzr
     644:	orr	w9, w9, #0x10
     648:	strb	w9, [x8]
     64c:	ldp	x29, x30, [sp], #16
     650:	ret
     654:	adrp	x0, 0 <lt__alloc_die_callback>
     658:	adrp	x1, 0 <lt__alloc_die_callback>
     65c:	adrp	x3, 0 <lt__alloc_die_callback>
     660:	add	x0, x0, #0x0
     664:	add	x1, x1, #0x0
     668:	add	x3, x3, #0x0
     66c:	mov	w2, #0x651                 	// #1617
     670:	bl	0 <__assert_fail>

0000000000000674 <lt_dlopen>:
     674:	stp	x29, x30, [sp, #-32]!
     678:	mov	x29, sp
     67c:	str	x19, [sp, #16]
     680:	mov	x19, x0
     684:	str	xzr, [x29, #24]
     688:	bl	0 <lt__get_last_error>
     68c:	add	x0, x29, #0x18
     690:	mov	x1, x19
     694:	mov	x2, xzr
     698:	mov	x3, xzr
     69c:	bl	87c <try_dlopen>
     6a0:	ldr	x8, [x29, #24]
     6a4:	ldr	x19, [sp, #16]
     6a8:	cmp	w0, #0x0
     6ac:	csel	x0, x8, xzr, eq  // eq = none
     6b0:	ldp	x29, x30, [sp], #32
     6b4:	ret

00000000000006b8 <lt_dlopenadvise>:
     6b8:	sub	sp, sp, #0x40
     6bc:	stp	x29, x30, [sp, #16]
     6c0:	stp	x22, x21, [sp, #32]
     6c4:	stp	x20, x19, [sp, #48]
     6c8:	add	x29, sp, #0x10
     6cc:	mov	x19, x1
     6d0:	mov	x20, x0
     6d4:	str	xzr, [sp, #8]
     6d8:	bl	0 <lt__get_last_error>
     6dc:	cbz	x19, 798 <lt_dlopenadvise+0xe0>
     6e0:	ldrb	w8, [x19]
     6e4:	mvn	w9, w8
     6e8:	tst	w9, #0xc
     6ec:	b.ne	704 <lt_dlopenadvise+0x4c>  // b.any
     6f0:	mov	w0, #0x13                  	// #19
     6f4:	bl	0 <lt__error_string>
     6f8:	bl	0 <lt__set_last_error>
     6fc:	mov	x8, xzr
     700:	b	7b8 <lt_dlopenadvise+0x100>
     704:	cbz	x20, 798 <lt_dlopenadvise+0xe0>
     708:	tbz	w8, #0, 798 <lt_dlopenadvise+0xe0>
     70c:	mov	x21, x0
     710:	mov	w1, #0x2e                  	// #46
     714:	mov	x0, x20
     718:	bl	0 <strrchr>
     71c:	cbz	x0, 748 <lt_dlopenadvise+0x90>
     720:	adrp	x1, 0 <lt__alloc_die_callback>
     724:	add	x1, x1, #0x0
     728:	mov	x22, x0
     72c:	bl	0 <strcmp>
     730:	cbz	w0, 798 <lt_dlopenadvise+0xe0>
     734:	adrp	x1, 0 <lt__alloc_die_callback>
     738:	add	x1, x1, #0x0
     73c:	mov	x0, x22
     740:	bl	0 <strcmp>
     744:	cbz	w0, 798 <lt_dlopenadvise+0xe0>
     748:	ldrb	w8, [x20]
     74c:	cbz	w8, 818 <lt_dlopenadvise+0x160>
     750:	adrp	x2, 0 <lt__alloc_die_callback>
     754:	add	x2, x2, #0x0
     758:	add	x0, sp, #0x8
     75c:	mov	x1, x20
     760:	mov	x3, x19
     764:	bl	87c <try_dlopen>
     768:	ldr	x8, [sp, #8]
     76c:	cbnz	x8, 7b8 <lt_dlopenadvise+0x100>
     770:	cmp	w0, #0x1
     774:	b.lt	7d0 <lt_dlopenadvise+0x118>  // b.tstop
     778:	bl	0 <lt__get_last_error>
     77c:	mov	x22, x0
     780:	mov	w0, #0x5                   	// #5
     784:	bl	0 <lt__error_string>
     788:	cmp	x22, x0
     78c:	b.eq	7d0 <lt_dlopenadvise+0x118>  // b.none
     790:	ldr	x8, [sp, #8]
     794:	b	7b8 <lt_dlopenadvise+0x100>
     798:	add	x0, sp, #0x8
     79c:	mov	x1, x20
     7a0:	mov	x2, xzr
     7a4:	mov	x3, x19
     7a8:	bl	87c <try_dlopen>
     7ac:	ldr	x8, [sp, #8]
     7b0:	cmp	w0, #0x0
     7b4:	csel	x8, x8, xzr, eq  // eq = none
     7b8:	ldp	x20, x19, [sp, #48]
     7bc:	ldp	x22, x21, [sp, #32]
     7c0:	ldp	x29, x30, [sp, #16]
     7c4:	mov	x0, x8
     7c8:	add	sp, sp, #0x40
     7cc:	ret
     7d0:	mov	x0, x21
     7d4:	bl	0 <lt__set_last_error>
     7d8:	adrp	x2, 0 <lt__alloc_die_callback>
     7dc:	add	x2, x2, #0x0
     7e0:	add	x0, sp, #0x8
     7e4:	mov	x1, x20
     7e8:	mov	x3, x19
     7ec:	bl	87c <try_dlopen>
     7f0:	ldr	x8, [sp, #8]
     7f4:	cbnz	x8, 7b8 <lt_dlopenadvise+0x100>
     7f8:	cmp	w0, #0x1
     7fc:	b.lt	818 <lt_dlopenadvise+0x160>  // b.tstop
     800:	bl	0 <lt__get_last_error>
     804:	mov	x19, x0
     808:	mov	w0, #0x5                   	// #5
     80c:	bl	0 <lt__error_string>
     810:	cmp	x19, x0
     814:	b.ne	790 <lt_dlopenadvise+0xd8>  // b.any
     818:	mov	w0, #0x5                   	// #5
     81c:	b	6f4 <lt_dlopenadvise+0x3c>

0000000000000820 <lt_dlopenext>:
     820:	stp	x29, x30, [sp, #-32]!
     824:	stp	x20, x19, [sp, #16]
     828:	mov	x20, x0
     82c:	mov	w0, #0x4                   	// #4
     830:	mov	x29, sp
     834:	bl	0 <lt__zalloc>
     838:	mov	x19, x0
     83c:	cbz	x0, 860 <lt_dlopenext+0x40>
     840:	ldrb	w8, [x19]
     844:	mov	x0, x20
     848:	mov	x1, x19
     84c:	orr	w8, w8, #0x1
     850:	strb	w8, [x19]
     854:	bl	6b8 <lt_dlopenadvise>
     858:	mov	x20, x0
     85c:	b	864 <lt_dlopenext+0x44>
     860:	mov	x20, xzr
     864:	mov	x0, x19
     868:	bl	0 <free>
     86c:	mov	x0, x20
     870:	ldp	x20, x19, [sp, #16]
     874:	ldp	x29, x30, [sp], #32
     878:	ret

000000000000087c <try_dlopen>:
     87c:	sub	sp, sp, #0xd0
     880:	stp	x29, x30, [sp, #112]
     884:	add	x29, sp, #0x70
     888:	stp	x28, x27, [sp, #128]
     88c:	stp	x26, x25, [sp, #144]
     890:	stp	x24, x23, [sp, #160]
     894:	stp	x22, x21, [sp, #176]
     898:	stp	x20, x19, [sp, #192]
     89c:	stp	xzr, xzr, [x29, #-24]
     8a0:	cbz	x0, 15c4 <try_dlopen+0xd48>
     8a4:	ldr	x8, [x0]
     8a8:	mov	x20, x0
     8ac:	cbnz	x8, 15e4 <try_dlopen+0xd68>
     8b0:	mov	x25, x3
     8b4:	mov	x23, x2
     8b8:	mov	x21, x1
     8bc:	bl	0 <lt__get_last_error>
     8c0:	mov	x22, x0
     8c4:	cbz	x21, 8f4 <try_dlopen+0x78>
     8c8:	ldrb	w8, [x21]
     8cc:	cbz	w8, 1604 <try_dlopen+0xd88>
     8d0:	cbz	x23, 93c <try_dlopen+0xc0>
     8d4:	mov	x0, x21
     8d8:	bl	0 <strlen>
     8dc:	ldrb	w8, [x23]
     8e0:	mov	x19, x0
     8e4:	cbz	w8, 950 <try_dlopen+0xd4>
     8e8:	mov	x0, x23
     8ec:	bl	0 <strlen>
     8f0:	b	954 <try_dlopen+0xd8>
     8f4:	mov	w0, #0x58                  	// #88
     8f8:	bl	0 <lt__zalloc>
     8fc:	str	x0, [x20]
     900:	cbz	x0, 9a0 <try_dlopen+0x124>
     904:	stur	x0, [x29, #-32]
     908:	ldrb	w8, [x0, #36]
     90c:	mov	x1, xzr
     910:	mov	x2, x25
     914:	mov	x3, xzr
     918:	orr	w8, w8, #0x1
     91c:	strb	w8, [x0, #36]
     920:	sub	x0, x29, #0x20
     924:	bl	2700 <tryall_dlopen>
     928:	cbz	w0, 9f4 <try_dlopen+0x178>
     92c:	ldr	x0, [x20]
     930:	bl	0 <free>
     934:	str	xzr, [x20]
     938:	b	9a0 <try_dlopen+0x124>
     93c:	mov	x0, x21
     940:	bl	0 <lt__strdup>
     944:	mov	x19, x0
     948:	cbnz	x0, 97c <try_dlopen+0x100>
     94c:	b	9a0 <try_dlopen+0x124>
     950:	mov	x0, xzr
     954:	add	x8, x19, x0
     958:	add	x0, x8, #0x1
     95c:	bl	0 <lt__malloc>
     960:	cbz	x0, 9a0 <try_dlopen+0x124>
     964:	adrp	x1, 0 <lt__alloc_die_callback>
     968:	add	x1, x1, #0x0
     96c:	mov	x2, x21
     970:	mov	x3, x23
     974:	mov	x19, x0
     978:	bl	0 <sprintf>
     97c:	sub	x1, x29, #0x10
     980:	mov	x0, x19
     984:	bl	21d0 <canonicalize_path>
     988:	cbz	w0, 9a8 <try_dlopen+0x12c>
     98c:	mov	x23, xzr
     990:	mov	x21, xzr
     994:	mov	x24, xzr
     998:	mov	w27, #0x1                   	// #1
     99c:	b	b80 <try_dlopen+0x304>
     9a0:	mov	w27, #0x1                   	// #1
     9a4:	b	bc0 <try_dlopen+0x344>
     9a8:	ldur	x21, [x29, #-16]
     9ac:	mov	w1, #0x2f                  	// #47
     9b0:	mov	x0, x21
     9b4:	bl	0 <strrchr>
     9b8:	cbz	x0, a7c <try_dlopen+0x200>
     9bc:	add	x23, x0, #0x1
     9c0:	sub	x21, x23, x21
     9c4:	mov	x26, x0
     9c8:	add	x0, x21, #0x1
     9cc:	bl	0 <lt__malloc>
     9d0:	stur	x0, [x29, #-24]
     9d4:	cbz	x0, b70 <try_dlopen+0x2f4>
     9d8:	ldur	x1, [x29, #-16]
     9dc:	mov	x2, x21
     9e0:	bl	0 <lt_strlcpy>
     9e4:	ldur	x8, [x29, #-24]
     9e8:	strb	wzr, [x8, x21]
     9ec:	mov	x21, x23
     9f0:	b	a84 <try_dlopen+0x208>
     9f4:	mov	x19, xzr
     9f8:	mov	x23, xzr
     9fc:	mov	x21, xzr
     a00:	mov	x24, xzr
     a04:	ldr	x0, [x20]
     a08:	ldur	x8, [x29, #-32]
     a0c:	cmp	x0, x8
     a10:	b.eq	a24 <try_dlopen+0x1a8>  // b.none
     a14:	bl	0 <free>
     a18:	ldur	x0, [x29, #-32]
     a1c:	str	x0, [x20]
     a20:	stur	xzr, [x29, #-32]
     a24:	ldr	w8, [x0, #32]
     a28:	cbnz	w8, a6c <try_dlopen+0x1f0>
     a2c:	ldr	x8, [x0, #24]
     a30:	mov	w9, #0x1                   	// #1
     a34:	str	w9, [x0, #32]
     a38:	cmp	x8, x23
     a3c:	b.eq	a58 <try_dlopen+0x1dc>  // b.none
     a40:	mov	x0, x8
     a44:	bl	0 <free>
     a48:	ldr	x8, [x20]
     a4c:	str	x23, [x8, #24]
     a50:	ldr	x0, [x20]
     a54:	mov	x23, xzr
     a58:	adrp	x8, 0 <lt__alloc_die_callback>
     a5c:	ldr	x9, [x8]
     a60:	str	x9, [x0]
     a64:	ldr	x9, [x20]
     a68:	str	x9, [x8]
     a6c:	mov	x0, x22
     a70:	bl	0 <lt__set_last_error>
     a74:	mov	w27, wzr
     a78:	b	b80 <try_dlopen+0x304>
     a7c:	cbz	x21, 1624 <try_dlopen+0xda8>
     a80:	stur	xzr, [x29, #-16]
     a84:	ldrb	w8, [x21]
     a88:	cbz	w8, 1624 <try_dlopen+0xda8>
     a8c:	mov	w1, #0x2e                  	// #46
     a90:	mov	x0, x21
     a94:	bl	0 <strrchr>
     a98:	mov	x26, x0
     a9c:	cbnz	x0, aac <try_dlopen+0x230>
     aa0:	mov	x0, x21
     aa4:	bl	0 <strlen>
     aa8:	add	x26, x21, x0
     aac:	sub	x24, x26, x21
     ab0:	add	x0, x24, #0x1
     ab4:	bl	0 <lt__malloc>
     ab8:	mov	x23, x0
     abc:	cbz	x0, 994 <try_dlopen+0x118>
     ac0:	cmp	x24, #0x1
     ac4:	b.lt	afc <try_dlopen+0x280>  // b.tstop
     ac8:	bl	0 <__ctype_b_loc>
     acc:	mov	w8, #0x5f                  	// #95
     ad0:	mov	x9, x24
     ad4:	mov	x10, x21
     ad8:	mov	x11, x23
     adc:	ldr	x12, [x0]
     ae0:	ldrb	w13, [x10], #1
     ae4:	ldrh	w12, [x12, x13, lsl #1]
     ae8:	tst	w12, #0x8
     aec:	csel	w12, w8, w13, eq  // eq = none
     af0:	subs	x9, x9, #0x1
     af4:	strb	w12, [x11], #1
     af8:	b.ne	adc <try_dlopen+0x260>  // b.any
     afc:	strb	wzr, [x23, x24]
     b00:	ldur	x8, [x29, #-24]
     b04:	cbz	x8, be4 <try_dlopen+0x368>
     b08:	mov	x24, xzr
     b0c:	cbz	x25, b18 <try_dlopen+0x29c>
     b10:	ldrb	w8, [x25]
     b14:	tbnz	w8, #4, a74 <try_dlopen+0x1f8>
     b18:	cbz	x26, b30 <try_dlopen+0x2b4>
     b1c:	adrp	x1, 0 <lt__alloc_die_callback>
     b20:	add	x1, x1, #0x0
     b24:	mov	x0, x26
     b28:	bl	0 <strcmp>
     b2c:	cbz	w0, c0c <try_dlopen+0x390>
     b30:	mov	w0, #0x58                  	// #88
     b34:	bl	0 <lt__zalloc>
     b38:	str	x0, [x20]
     b3c:	cbz	x0, 998 <try_dlopen+0x11c>
     b40:	ldur	x8, [x29, #-24]
     b44:	stur	x0, [x29, #-32]
     b48:	cbz	x8, c3c <try_dlopen+0x3c0>
     b4c:	sub	x0, x29, #0x20
     b50:	mov	x1, x19
     b54:	mov	x2, x25
     b58:	mov	x3, xzr
     b5c:	bl	2700 <tryall_dlopen>
     b60:	cbz	w0, ce0 <try_dlopen+0x464>
     b64:	stur	xzr, [x29, #-32]
     b68:	ldr	x0, [x20]
     b6c:	b	15ac <try_dlopen+0xd30>
     b70:	mov	x23, xzr
     b74:	mov	x24, xzr
     b78:	mov	w27, #0x1                   	// #1
     b7c:	mov	x21, x26
     b80:	ldur	x0, [x29, #-24]
     b84:	bl	0 <free>
     b88:	mov	x0, x19
     b8c:	stur	xzr, [x29, #-24]
     b90:	bl	0 <free>
     b94:	mov	x0, x23
     b98:	bl	0 <free>
     b9c:	ldur	x0, [x29, #-16]
     ba0:	cbnz	x0, bb0 <try_dlopen+0x334>
     ba4:	mov	x0, x21
     ba8:	bl	0 <free>
     bac:	ldur	x0, [x29, #-16]
     bb0:	bl	0 <free>
     bb4:	mov	x0, x24
     bb8:	stur	xzr, [x29, #-16]
     bbc:	bl	0 <free>
     bc0:	mov	w0, w27
     bc4:	ldp	x20, x19, [sp, #192]
     bc8:	ldp	x22, x21, [sp, #176]
     bcc:	ldp	x24, x23, [sp, #160]
     bd0:	ldp	x26, x25, [sp, #144]
     bd4:	ldp	x28, x27, [sp, #128]
     bd8:	ldp	x29, x30, [sp, #112]
     bdc:	add	sp, sp, #0xd0
     be0:	ret
     be4:	adrp	x0, 0 <lt__alloc_die_callback>
     be8:	add	x0, x0, #0x0
     bec:	bl	0 <lt_dlloader_find>
     bf0:	cbz	x0, b08 <try_dlopen+0x28c>
     bf4:	ldrb	w8, [x23]
     bf8:	mov	x28, x0
     bfc:	cbz	w8, cf0 <try_dlopen+0x474>
     c00:	mov	x0, x23
     c04:	bl	0 <strlen>
     c08:	b	cf4 <try_dlopen+0x478>
     c0c:	ldur	x8, [x29, #-24]
     c10:	cbz	x8, d54 <try_dlopen+0x4d8>
     c14:	adrp	x1, 0 <lt__alloc_die_callback>
     c18:	add	x1, x1, #0x0
     c1c:	mov	x0, x19
     c20:	bl	0 <fopen>
     c24:	mov	x26, x0
     c28:	cbnz	x26, e18 <try_dlopen+0x59c>
     c2c:	mov	w0, #0x5                   	// #5
     c30:	bl	0 <lt__error_string>
     c34:	bl	0 <lt__set_last_error>
     c38:	b	998 <try_dlopen+0x11c>
     c3c:	adrp	x8, 0 <lt__alloc_die_callback>
     c40:	ldr	x0, [x8]
     c44:	cbz	x0, c64 <try_dlopen+0x3e8>
     c48:	adrp	x2, 0 <lt__alloc_die_callback>
     c4c:	add	x2, x2, #0x0
     c50:	sub	x3, x29, #0x20
     c54:	mov	x1, x21
     c58:	mov	x4, x25
     c5c:	bl	1724 <foreach_dirinpath>
     c60:	cbnz	w0, ce0 <try_dlopen+0x464>
     c64:	adrp	x0, 0 <lt__alloc_die_callback>
     c68:	add	x0, x0, #0x0
     c6c:	bl	0 <getenv>
     c70:	cbz	x0, c90 <try_dlopen+0x414>
     c74:	adrp	x2, 0 <lt__alloc_die_callback>
     c78:	add	x2, x2, #0x0
     c7c:	sub	x3, x29, #0x20
     c80:	mov	x1, x21
     c84:	mov	x4, x25
     c88:	bl	1724 <foreach_dirinpath>
     c8c:	cbnz	w0, ce0 <try_dlopen+0x464>
     c90:	adrp	x0, 0 <lt__alloc_die_callback>
     c94:	add	x0, x0, #0x0
     c98:	bl	0 <getenv>
     c9c:	cbz	x0, cbc <try_dlopen+0x440>
     ca0:	adrp	x2, 0 <lt__alloc_die_callback>
     ca4:	add	x2, x2, #0x0
     ca8:	sub	x3, x29, #0x20
     cac:	mov	x1, x21
     cb0:	mov	x4, x25
     cb4:	bl	1724 <foreach_dirinpath>
     cb8:	cbnz	w0, ce0 <try_dlopen+0x464>
     cbc:	adrp	x0, 0 <lt__alloc_die_callback>
     cc0:	adrp	x2, 0 <lt__alloc_die_callback>
     cc4:	add	x0, x0, #0x0
     cc8:	add	x2, x2, #0x0
     ccc:	sub	x3, x29, #0x20
     cd0:	mov	x1, x21
     cd4:	mov	x4, x25
     cd8:	bl	1724 <foreach_dirinpath>
     cdc:	cbz	w0, b4c <try_dlopen+0x2d0>
     ce0:	ldur	x8, [x29, #-32]
     ce4:	cbnz	x8, a04 <try_dlopen+0x188>
     ce8:	ldr	x0, [x20]
     cec:	b	15ac <try_dlopen+0xd30>
     cf0:	mov	x0, xzr
     cf4:	add	x0, x0, #0x6
     cf8:	bl	0 <lt__malloc>
     cfc:	mov	x24, x0
     d00:	mov	w0, #0x58                  	// #88
     d04:	bl	0 <lt__zalloc>
     d08:	mov	w27, #0x1                   	// #1
     d0c:	str	x0, [x20]
     d10:	cbz	x24, b80 <try_dlopen+0x304>
     d14:	cbz	x0, b80 <try_dlopen+0x304>
     d18:	adrp	x1, 0 <lt__alloc_die_callback>
     d1c:	stur	x0, [x29, #-32]
     d20:	add	x1, x1, #0x0
     d24:	mov	w2, #0x3                   	// #3
     d28:	mov	x0, x23
     d2c:	bl	0 <strncmp>
     d30:	cbz	w0, e64 <try_dlopen+0x5e8>
     d34:	adrp	x1, 0 <lt__alloc_die_callback>
     d38:	adrp	x3, 0 <lt__alloc_die_callback>
     d3c:	add	x1, x1, #0x0
     d40:	add	x3, x3, #0x0
     d44:	mov	x0, x24
     d48:	mov	x2, x23
     d4c:	bl	0 <sprintf>
     d50:	b	e88 <try_dlopen+0x60c>
     d54:	adrp	x8, 0 <lt__alloc_die_callback>
     d58:	ldr	x0, [x8]
     d5c:	cbz	x0, d84 <try_dlopen+0x508>
     d60:	adrp	x2, 0 <lt__alloc_die_callback>
     d64:	add	x2, x2, #0x0
     d68:	sub	x3, x29, #0x18
     d6c:	sub	x4, x29, #0x8
     d70:	mov	x1, x21
     d74:	stur	xzr, [x29, #-8]
     d78:	bl	1724 <foreach_dirinpath>
     d7c:	ldur	x26, [x29, #-8]
     d80:	cbnz	x26, e18 <try_dlopen+0x59c>
     d84:	adrp	x0, 0 <lt__alloc_die_callback>
     d88:	add	x0, x0, #0x0
     d8c:	bl	0 <getenv>
     d90:	cbz	x0, db8 <try_dlopen+0x53c>
     d94:	adrp	x2, 0 <lt__alloc_die_callback>
     d98:	add	x2, x2, #0x0
     d9c:	sub	x3, x29, #0x18
     da0:	sub	x4, x29, #0x8
     da4:	mov	x1, x21
     da8:	stur	xzr, [x29, #-8]
     dac:	bl	1724 <foreach_dirinpath>
     db0:	ldur	x26, [x29, #-8]
     db4:	cbnz	x26, e18 <try_dlopen+0x59c>
     db8:	adrp	x0, 0 <lt__alloc_die_callback>
     dbc:	add	x0, x0, #0x0
     dc0:	bl	0 <getenv>
     dc4:	cbz	x0, dec <try_dlopen+0x570>
     dc8:	adrp	x2, 0 <lt__alloc_die_callback>
     dcc:	add	x2, x2, #0x0
     dd0:	sub	x3, x29, #0x18
     dd4:	sub	x4, x29, #0x8
     dd8:	mov	x1, x21
     ddc:	stur	xzr, [x29, #-8]
     de0:	bl	1724 <foreach_dirinpath>
     de4:	ldur	x26, [x29, #-8]
     de8:	cbnz	x26, e18 <try_dlopen+0x59c>
     dec:	adrp	x0, 0 <lt__alloc_die_callback>
     df0:	adrp	x2, 0 <lt__alloc_die_callback>
     df4:	add	x0, x0, #0x0
     df8:	add	x2, x2, #0x0
     dfc:	sub	x3, x29, #0x18
     e00:	sub	x4, x29, #0x8
     e04:	mov	x1, x21
     e08:	stur	xzr, [x29, #-8]
     e0c:	bl	1724 <foreach_dirinpath>
     e10:	ldur	x26, [x29, #-8]
     e14:	cbz	x26, c2c <try_dlopen+0x3b0>
     e18:	mov	w0, #0x800                 	// #2048
     e1c:	bl	0 <lt__malloc>
     e20:	mov	x28, x0
     e24:	stur	x26, [x29, #-40]
     e28:	cbz	x0, eb8 <try_dlopen+0x63c>
     e2c:	mov	x0, x26
     e30:	bl	0 <feof>
     e34:	cbz	w0, ee0 <try_dlopen+0x664>
     e38:	mov	w8, #0x1                   	// #1
     e3c:	str	xzr, [sp, #48]
     e40:	stur	xzr, [x29, #-48]
     e44:	str	xzr, [sp, #56]
     e48:	str	xzr, [sp, #32]
     e4c:	str	w8, [sp, #44]
     e50:	mov	x0, x28
     e54:	bl	0 <free>
     e58:	ldr	x28, [sp, #32]
     e5c:	mov	w26, wzr
     e60:	b	13b8 <try_dlopen+0xb3c>
     e64:	adrp	x1, 0 <lt__alloc_die_callback>
     e68:	adrp	x2, 0 <lt__alloc_die_callback>
     e6c:	adrp	x4, 0 <lt__alloc_die_callback>
     e70:	add	x3, x23, #0x3
     e74:	add	x1, x1, #0x0
     e78:	add	x2, x2, #0x0
     e7c:	add	x4, x4, #0x0
     e80:	mov	x0, x24
     e84:	bl	0 <sprintf>
     e88:	sub	x0, x29, #0x20
     e8c:	mov	x1, x24
     e90:	mov	x2, x25
     e94:	mov	x3, x28
     e98:	bl	2700 <tryall_dlopen>
     e9c:	cbz	w0, a04 <try_dlopen+0x188>
     ea0:	ldr	x0, [x20]
     ea4:	bl	0 <free>
     ea8:	str	xzr, [x20]
     eac:	stur	xzr, [x29, #-32]
     eb0:	cbnz	x25, b10 <try_dlopen+0x294>
     eb4:	b	b18 <try_dlopen+0x29c>
     eb8:	mov	w0, #0x5                   	// #5
     ebc:	bl	0 <lt__error_string>
     ec0:	bl	0 <lt__set_last_error>
     ec4:	mov	w8, #0x1                   	// #1
     ec8:	mov	w26, #0x1                   	// #1
     ecc:	str	xzr, [sp, #56]
     ed0:	stur	xzr, [x29, #-48]
     ed4:	str	xzr, [sp, #48]
     ed8:	str	w8, [sp, #44]
     edc:	b	13b8 <try_dlopen+0xb3c>
     ee0:	mov	w8, #0x1                   	// #1
     ee4:	mov	w27, #0x800                 	// #2048
     ee8:	str	xzr, [sp, #48]
     eec:	stur	xzr, [x29, #-48]
     ef0:	str	xzr, [sp, #56]
     ef4:	str	xzr, [sp, #32]
     ef8:	str	w8, [sp, #44]
     efc:	b	f24 <try_dlopen+0x6a8>
     f00:	str	x2, [sp, #24]
     f04:	mov	x0, x26
     f08:	bl	0 <memcpy>
     f0c:	ldr	x8, [sp, #24]
     f10:	strb	wzr, [x26, x8]
     f14:	ldur	x26, [x29, #-40]
     f18:	mov	x0, x26
     f1c:	bl	0 <feof>
     f20:	cbnz	w0, e50 <try_dlopen+0x5d4>
     f24:	add	x8, x27, x28
     f28:	mov	x0, x28
     f2c:	mov	w1, w27
     f30:	mov	x2, x26
     f34:	sturb	wzr, [x8, #-2]
     f38:	bl	0 <fgets>
     f3c:	cbz	x0, e50 <try_dlopen+0x5d4>
     f40:	mov	x26, x27
     f44:	add	x8, x26, x28
     f48:	ldurb	w8, [x8, #-2]
     f4c:	mov	x27, x26
     f50:	cbz	w8, fa0 <try_dlopen+0x724>
     f54:	cmp	w8, #0xa
     f58:	b.eq	fa0 <try_dlopen+0x724>  // b.none
     f5c:	ldur	x0, [x29, #-40]
     f60:	bl	0 <feof>
     f64:	cbnz	w0, fa0 <try_dlopen+0x724>
     f68:	lsl	x26, x27, #1
     f6c:	mov	x0, x28
     f70:	mov	x1, x26
     f74:	bl	0 <lt__realloc>
     f78:	mov	x28, x0
     f7c:	cbz	x0, 13a8 <try_dlopen+0xb2c>
     f80:	ldur	x2, [x29, #-40]
     f84:	add	x9, x27, x28
     f88:	add	x8, x26, x28
     f8c:	sub	x0, x9, #0x1
     f90:	add	w1, w27, #0x1
     f94:	sturb	wzr, [x8, #-2]
     f98:	bl	0 <fgets>
     f9c:	cbnz	x0, f44 <try_dlopen+0x6c8>
     fa0:	ldrb	w8, [x28]
     fa4:	cmp	w8, #0x23
     fa8:	b.eq	f14 <try_dlopen+0x698>  // b.none
     fac:	ldur	x26, [x29, #-40]
     fb0:	cmp	w8, #0xa
     fb4:	b.eq	f18 <try_dlopen+0x69c>  // b.none
     fb8:	adrp	x1, 0 <lt__alloc_die_callback>
     fbc:	mov	w2, #0x7                   	// #7
     fc0:	mov	x0, x28
     fc4:	add	x1, x1, #0x0
     fc8:	bl	0 <strncmp>
     fcc:	cbz	w0, 108c <try_dlopen+0x810>
     fd0:	adrp	x1, 0 <lt__alloc_die_callback>
     fd4:	mov	w2, #0xc                   	// #12
     fd8:	mov	x0, x28
     fdc:	add	x1, x1, #0x0
     fe0:	bl	0 <strncmp>
     fe4:	cbz	w0, 10b8 <try_dlopen+0x83c>
     fe8:	adrp	x1, 0 <lt__alloc_die_callback>
     fec:	mov	w2, #0x7                   	// #7
     ff0:	mov	x0, x28
     ff4:	add	x1, x1, #0x0
     ff8:	bl	0 <strncmp>
     ffc:	cbz	w0, 10e4 <try_dlopen+0x868>
    1000:	adrp	x1, 0 <lt__alloc_die_callback>
    1004:	mov	w2, #0x10                  	// #16
    1008:	mov	x0, x28
    100c:	add	x1, x1, #0x0
    1010:	bl	0 <strncmp>
    1014:	cbz	w0, 117c <try_dlopen+0x900>
    1018:	adrp	x1, 0 <lt__alloc_die_callback>
    101c:	mov	x0, x28
    1020:	add	x1, x1, #0x0
    1024:	bl	0 <strcmp>
    1028:	cbz	w0, 1214 <try_dlopen+0x998>
    102c:	adrp	x1, 0 <lt__alloc_die_callback>
    1030:	mov	x0, x28
    1034:	add	x1, x1, #0x0
    1038:	bl	0 <strcmp>
    103c:	cbz	w0, 1284 <try_dlopen+0xa08>
    1040:	ldr	x8, [sp, #48]
    1044:	cbnz	x8, f18 <try_dlopen+0x69c>
    1048:	adrp	x1, 0 <lt__alloc_die_callback>
    104c:	mov	w2, #0xe                   	// #14
    1050:	mov	x0, x28
    1054:	add	x1, x1, #0x0
    1058:	bl	0 <strncmp>
    105c:	cbnz	w0, 1170 <try_dlopen+0x8f4>
    1060:	add	x26, x28, #0xe
    1064:	mov	w1, #0x27                  	// #39
    1068:	mov	x0, x26
    106c:	bl	0 <strrchr>
    1070:	ldrb	w8, [x28, #14]
    1074:	str	x0, [sp, #48]
    1078:	str	w8, [sp, #24]
    107c:	cbz	w8, 12f0 <try_dlopen+0xa74>
    1080:	mov	x0, x26
    1084:	bl	0 <strlen>
    1088:	b	12f4 <try_dlopen+0xa78>
    108c:	add	x26, x28, #0x7
    1090:	mov	w1, #0x27                  	// #39
    1094:	mov	x0, x26
    1098:	bl	0 <strrchr>
    109c:	ldrb	w8, [x28, #7]
    10a0:	stp	x26, x0, [sp, #16]
    10a4:	cbz	w8, 1110 <try_dlopen+0x894>
    10a8:	mov	x0, x26
    10ac:	bl	0 <strlen>
    10b0:	str	x0, [sp, #8]
    10b4:	b	1114 <try_dlopen+0x898>
    10b8:	add	x26, x28, #0xc
    10bc:	mov	w1, #0x27                  	// #39
    10c0:	mov	x0, x26
    10c4:	bl	0 <strrchr>
    10c8:	ldrb	w8, [x28, #12]
    10cc:	stp	x26, x0, [sp, #16]
    10d0:	cbz	w8, 11a8 <try_dlopen+0x92c>
    10d4:	mov	x0, x26
    10d8:	bl	0 <strlen>
    10dc:	str	x0, [sp, #8]
    10e0:	b	11ac <try_dlopen+0x930>
    10e4:	add	x26, x28, #0x7
    10e8:	mov	w1, #0x27                  	// #39
    10ec:	mov	x0, x26
    10f0:	bl	0 <strrchr>
    10f4:	ldrb	w8, [x28, #7]
    10f8:	stp	x26, x0, [sp, #16]
    10fc:	cbz	w8, 1220 <try_dlopen+0x9a4>
    1100:	mov	x0, x26
    1104:	bl	0 <strlen>
    1108:	str	x0, [sp, #8]
    110c:	b	1224 <try_dlopen+0x9a8>
    1110:	str	xzr, [sp, #8]
    1114:	ldr	x0, [sp, #48]
    1118:	bl	0 <free>
    111c:	ldr	x9, [sp, #24]
    1120:	cbz	x9, 138c <try_dlopen+0xb10>
    1124:	ldr	x8, [sp, #16]
    1128:	subs	x26, x9, x8
    112c:	b.eq	138c <try_dlopen+0xb10>  // b.none
    1130:	ldr	x9, [sp, #8]
    1134:	cmp	x9, #0x4
    1138:	b.cc	1170 <try_dlopen+0x8f4>  // b.lo, b.ul, b.last
    113c:	ldrb	w8, [x8]
    1140:	cmp	w8, #0x27
    1144:	b.ne	1170 <try_dlopen+0x8f4>  // b.any
    1148:	mov	x0, x26
    114c:	bl	0 <lt__malloc>
    1150:	cbz	x0, 138c <try_dlopen+0xb10>
    1154:	add	x1, x28, #0x8
    1158:	sub	x2, x26, #0x1
    115c:	str	x2, [sp, #24]
    1160:	mov	x26, x0
    1164:	bl	0 <memcpy>
    1168:	str	x26, [sp, #48]
    116c:	b	f0c <try_dlopen+0x690>
    1170:	ldur	x26, [x29, #-40]
    1174:	str	xzr, [sp, #48]
    1178:	b	f18 <try_dlopen+0x69c>
    117c:	add	x0, x28, #0x10
    1180:	mov	w1, #0x27                  	// #39
    1184:	str	x0, [sp, #24]
    1188:	bl	0 <strrchr>
    118c:	ldrb	w8, [x28, #16]
    1190:	mov	x26, x0
    1194:	cbz	w8, 128c <try_dlopen+0xa10>
    1198:	ldr	x0, [sp, #24]
    119c:	bl	0 <strlen>
    11a0:	str	x0, [sp, #16]
    11a4:	b	1290 <try_dlopen+0xa14>
    11a8:	str	xzr, [sp, #8]
    11ac:	ldur	x0, [x29, #-48]
    11b0:	bl	0 <free>
    11b4:	ldr	x9, [sp, #24]
    11b8:	cbz	x9, 1394 <try_dlopen+0xb18>
    11bc:	ldr	x8, [sp, #16]
    11c0:	subs	x26, x9, x8
    11c4:	b.eq	1394 <try_dlopen+0xb18>  // b.none
    11c8:	ldr	x9, [sp, #8]
    11cc:	cmp	x9, #0x4
    11d0:	b.cc	1208 <try_dlopen+0x98c>  // b.lo, b.ul, b.last
    11d4:	ldrb	w8, [x8]
    11d8:	cmp	w8, #0x27
    11dc:	b.ne	1208 <try_dlopen+0x98c>  // b.any
    11e0:	mov	x0, x26
    11e4:	bl	0 <lt__malloc>
    11e8:	cbz	x0, 1394 <try_dlopen+0xb18>
    11ec:	add	x1, x28, #0xd
    11f0:	sub	x2, x26, #0x1
    11f4:	str	x2, [sp, #24]
    11f8:	mov	x26, x0
    11fc:	bl	0 <memcpy>
    1200:	stur	x26, [x29, #-48]
    1204:	b	f0c <try_dlopen+0x690>
    1208:	ldur	x26, [x29, #-40]
    120c:	stur	xzr, [x29, #-48]
    1210:	b	f18 <try_dlopen+0x69c>
    1214:	mov	w8, #0x1                   	// #1
    1218:	str	w8, [sp, #44]
    121c:	b	f18 <try_dlopen+0x69c>
    1220:	str	xzr, [sp, #8]
    1224:	ldr	x0, [sp, #56]
    1228:	bl	0 <free>
    122c:	ldr	x9, [sp, #24]
    1230:	cbz	x9, 139c <try_dlopen+0xb20>
    1234:	ldr	x8, [sp, #16]
    1238:	subs	x26, x9, x8
    123c:	b.eq	139c <try_dlopen+0xb20>  // b.none
    1240:	ldr	x9, [sp, #8]
    1244:	cmp	x9, #0x4
    1248:	b.cc	1278 <try_dlopen+0x9fc>  // b.lo, b.ul, b.last
    124c:	ldrb	w8, [x8]
    1250:	cmp	w8, #0x27
    1254:	b.ne	1278 <try_dlopen+0x9fc>  // b.any
    1258:	mov	x0, x26
    125c:	bl	0 <lt__malloc>
    1260:	str	x0, [sp, #56]
    1264:	cbz	x0, 139c <try_dlopen+0xb20>
    1268:	sub	x2, x26, #0x1
    126c:	ldr	x26, [sp, #56]
    1270:	add	x1, x28, #0x8
    1274:	b	f00 <try_dlopen+0x684>
    1278:	ldur	x26, [x29, #-40]
    127c:	str	xzr, [sp, #56]
    1280:	b	f18 <try_dlopen+0x69c>
    1284:	str	wzr, [sp, #44]
    1288:	b	f18 <try_dlopen+0x69c>
    128c:	str	xzr, [sp, #16]
    1290:	ldr	x0, [sp, #32]
    1294:	bl	0 <free>
    1298:	cbz	x26, 13a4 <try_dlopen+0xb28>
    129c:	ldr	x8, [sp, #24]
    12a0:	subs	x26, x26, x8
    12a4:	b.eq	13a4 <try_dlopen+0xb28>  // b.none
    12a8:	ldr	x8, [sp, #16]
    12ac:	cmp	x8, #0x4
    12b0:	b.cc	12e4 <try_dlopen+0xa68>  // b.lo, b.ul, b.last
    12b4:	ldr	x8, [sp, #24]
    12b8:	ldrb	w8, [x8]
    12bc:	cmp	w8, #0x27
    12c0:	b.ne	12e4 <try_dlopen+0xa68>  // b.any
    12c4:	mov	x0, x26
    12c8:	bl	0 <lt__malloc>
    12cc:	str	x0, [sp, #32]
    12d0:	cbz	x0, 13a4 <try_dlopen+0xb28>
    12d4:	sub	x2, x26, #0x1
    12d8:	ldr	x26, [sp, #32]
    12dc:	add	x1, x28, #0x11
    12e0:	b	f00 <try_dlopen+0x684>
    12e4:	ldur	x26, [x29, #-40]
    12e8:	str	xzr, [sp, #32]
    12ec:	b	f18 <try_dlopen+0x69c>
    12f0:	mov	x0, xzr
    12f4:	ldr	x8, [sp, #48]
    12f8:	cbz	x8, 138c <try_dlopen+0xb10>
    12fc:	ldr	x8, [sp, #48]
    1300:	subs	x26, x8, x26
    1304:	b.eq	138c <try_dlopen+0xb10>  // b.none
    1308:	ldr	w8, [sp, #24]
    130c:	str	xzr, [sp, #48]
    1310:	cmp	w8, #0x27
    1314:	b.ne	f14 <try_dlopen+0x698>  // b.any
    1318:	cmp	x0, #0x4
    131c:	b.cc	f14 <try_dlopen+0x698>  // b.lo, b.ul, b.last
    1320:	mov	x0, x26
    1324:	bl	0 <lt__malloc>
    1328:	str	x0, [sp, #48]
    132c:	cbz	x0, 138c <try_dlopen+0xb10>
    1330:	sub	x2, x26, #0x1
    1334:	ldr	x26, [sp, #48]
    1338:	add	x1, x28, #0xf
    133c:	str	x2, [sp, #24]
    1340:	mov	x0, x26
    1344:	bl	0 <memcpy>
    1348:	ldr	x8, [sp, #24]
    134c:	mov	w1, #0x20                  	// #32
    1350:	mov	x0, x26
    1354:	strb	wzr, [x26, x8]
    1358:	bl	0 <strrchr>
    135c:	cbz	x0, f14 <try_dlopen+0x698>
    1360:	add	x0, x0, #0x1
    1364:	bl	0 <lt__strdup>
    1368:	cbz	x0, 13a8 <try_dlopen+0xb2c>
    136c:	ldr	x8, [sp, #48]
    1370:	mov	x26, x0
    1374:	cmp	x8, x0
    1378:	b.eq	f14 <try_dlopen+0x698>  // b.none
    137c:	ldr	x0, [sp, #48]
    1380:	bl	0 <free>
    1384:	str	x26, [sp, #48]
    1388:	b	f14 <try_dlopen+0x698>
    138c:	str	xzr, [sp, #48]
    1390:	b	13a8 <try_dlopen+0xb2c>
    1394:	stur	xzr, [x29, #-48]
    1398:	b	13a8 <try_dlopen+0xb2c>
    139c:	str	xzr, [sp, #56]
    13a0:	b	13a8 <try_dlopen+0xb2c>
    13a4:	str	xzr, [sp, #32]
    13a8:	mov	x0, x28
    13ac:	bl	0 <free>
    13b0:	ldr	x28, [sp, #32]
    13b4:	mov	w26, #0x1                   	// #1
    13b8:	ldur	x0, [x29, #-40]
    13bc:	bl	0 <fclose>
    13c0:	mov	w0, #0x58                  	// #88
    13c4:	bl	0 <lt__zalloc>
    13c8:	cmp	x0, #0x0
    13cc:	cinc	w27, w26, eq  // eq = none
    13d0:	str	x0, [x20]
    13d4:	cbz	w27, 1408 <try_dlopen+0xb8c>
    13d8:	ldr	x0, [sp, #48]
    13dc:	bl	0 <free>
    13e0:	ldur	x0, [x29, #-48]
    13e4:	bl	0 <free>
    13e8:	ldr	x0, [sp, #56]
    13ec:	bl	0 <free>
    13f0:	mov	x0, x28
    13f4:	bl	0 <free>
    13f8:	ldr	x0, [x20]
    13fc:	bl	0 <free>
    1400:	str	xzr, [x20]
    1404:	b	b80 <try_dlopen+0x304>
    1408:	cbz	x0, 1644 <try_dlopen+0xdc8>
    140c:	str	wzr, [x0, #40]
    1410:	ldur	x26, [x29, #-24]
    1414:	ldur	x27, [x29, #-48]
    1418:	stur	x0, [x29, #-32]
    141c:	cbz	x27, 1444 <try_dlopen+0xbc8>
    1420:	adrp	x0, 0 <lt__alloc_die_callback>
    1424:	add	x0, x0, #0x0
    1428:	bl	0 <lt_dlloader_find>
    142c:	mov	x3, x0
    1430:	sub	x0, x29, #0x20
    1434:	mov	x1, x27
    1438:	mov	x2, x25
    143c:	bl	2700 <tryall_dlopen>
    1440:	cbz	w0, 151c <try_dlopen+0xca0>
    1444:	ldr	x27, [sp, #48]
    1448:	cbz	x27, 14c0 <try_dlopen+0xc44>
    144c:	ldr	w8, [sp, #44]
    1450:	cbz	w8, 1478 <try_dlopen+0xbfc>
    1454:	ldr	x8, [sp, #56]
    1458:	cbz	x8, 1478 <try_dlopen+0xbfc>
    145c:	ldr	x2, [sp, #56]
    1460:	sub	x0, x29, #0x20
    1464:	mov	x1, xzr
    1468:	mov	x3, x27
    146c:	mov	x4, x25
    1470:	bl	296c <tryall_dlopen_module>
    1474:	cbz	w0, 1520 <try_dlopen+0xca4>
    1478:	ldr	w8, [sp, #44]
    147c:	cbnz	w8, 14a0 <try_dlopen+0xc24>
    1480:	adrp	x2, 0 <lt__alloc_die_callback>
    1484:	add	x2, x2, #0x0
    1488:	sub	x0, x29, #0x20
    148c:	mov	x1, x26
    1490:	mov	x3, x27
    1494:	mov	x4, x25
    1498:	bl	296c <tryall_dlopen_module>
    149c:	cbz	w0, 1520 <try_dlopen+0xca4>
    14a0:	cbz	x26, 14c0 <try_dlopen+0xc44>
    14a4:	sub	x0, x29, #0x20
    14a8:	mov	x1, xzr
    14ac:	mov	x2, x26
    14b0:	mov	x3, x27
    14b4:	mov	x4, x25
    14b8:	bl	296c <tryall_dlopen_module>
    14bc:	cbz	w0, 1520 <try_dlopen+0xca4>
    14c0:	ldr	x25, [x20]
    14c4:	ldr	w9, [x25, #40]
    14c8:	cbz	w9, 1528 <try_dlopen+0xcac>
    14cc:	ldr	x0, [x25, #48]
    14d0:	cmp	w9, #0x1
    14d4:	b.lt	150c <try_dlopen+0xc90>  // b.tstop
    14d8:	mov	x26, xzr
    14dc:	b	14ec <try_dlopen+0xc70>
    14e0:	add	x26, x26, #0x1
    14e4:	cmp	x26, w9, sxtw
    14e8:	b.ge	150c <try_dlopen+0xc90>  // b.tcont
    14ec:	ldr	x8, [x0, x26, lsl #3]
    14f0:	ldrb	w10, [x8, #36]
    14f4:	tbnz	w10, #0, 14e0 <try_dlopen+0xc64>
    14f8:	mov	x0, x8
    14fc:	bl	320 <lt_dlclose>
    1500:	ldr	w9, [x25, #40]
    1504:	ldr	x0, [x25, #48]
    1508:	b	14e0 <try_dlopen+0xc64>
    150c:	bl	0 <free>
    1510:	mov	w26, wzr
    1514:	str	xzr, [x25, #48]
    1518:	b	152c <try_dlopen+0xcb0>
    151c:	ldr	x27, [sp, #48]
    1520:	mov	w26, #0x1                   	// #1
    1524:	b	152c <try_dlopen+0xcb0>
    1528:	mov	w26, wzr
    152c:	mov	x0, x27
    1530:	bl	0 <free>
    1534:	ldur	x0, [x29, #-48]
    1538:	bl	0 <free>
    153c:	ldr	x0, [sp, #56]
    1540:	bl	0 <free>
    1544:	mov	x0, x28
    1548:	bl	0 <free>
    154c:	ldr	x25, [x20]
    1550:	tbz	w26, #0, 15a8 <try_dlopen+0xd2c>
    1554:	ldur	x8, [x29, #-32]
    1558:	cmp	x25, x8
    155c:	b.eq	a04 <try_dlopen+0x188>  // b.none
    1560:	ldr	w9, [x25, #40]
    1564:	cbz	w9, a04 <try_dlopen+0x188>
    1568:	ldr	x0, [x25, #48]
    156c:	cmp	w9, #0x1
    1570:	b.lt	15b8 <try_dlopen+0xd3c>  // b.tstop
    1574:	mov	x26, xzr
    1578:	b	1588 <try_dlopen+0xd0c>
    157c:	add	x26, x26, #0x1
    1580:	cmp	x26, w9, sxtw
    1584:	b.ge	15b8 <try_dlopen+0xd3c>  // b.tcont
    1588:	ldr	x8, [x0, x26, lsl #3]
    158c:	ldrb	w10, [x8, #36]
    1590:	tbnz	w10, #0, 157c <try_dlopen+0xd00>
    1594:	mov	x0, x8
    1598:	bl	320 <lt_dlclose>
    159c:	ldr	w9, [x25, #40]
    15a0:	ldr	x0, [x25, #48]
    15a4:	b	157c <try_dlopen+0xd00>
    15a8:	mov	x0, x25
    15ac:	bl	0 <free>
    15b0:	str	xzr, [x20]
    15b4:	b	998 <try_dlopen+0x11c>
    15b8:	bl	0 <free>
    15bc:	str	xzr, [x25, #48]
    15c0:	b	a04 <try_dlopen+0x188>
    15c4:	adrp	x0, 0 <lt__alloc_die_callback>
    15c8:	adrp	x1, 0 <lt__alloc_die_callback>
    15cc:	adrp	x3, 0 <lt__alloc_die_callback>
    15d0:	add	x0, x0, #0x0
    15d4:	add	x1, x1, #0x0
    15d8:	add	x3, x3, #0x0
    15dc:	mov	w2, #0x494                 	// #1172
    15e0:	bl	0 <__assert_fail>
    15e4:	adrp	x0, 0 <lt__alloc_die_callback>
    15e8:	adrp	x1, 0 <lt__alloc_die_callback>
    15ec:	adrp	x3, 0 <lt__alloc_die_callback>
    15f0:	add	x0, x0, #0x0
    15f4:	add	x1, x1, #0x0
    15f8:	add	x3, x3, #0x0
    15fc:	mov	w2, #0x495                 	// #1173
    1600:	bl	0 <__assert_fail>
    1604:	adrp	x0, 0 <lt__alloc_die_callback>
    1608:	adrp	x1, 0 <lt__alloc_die_callback>
    160c:	adrp	x3, 0 <lt__alloc_die_callback>
    1610:	add	x0, x0, #0x0
    1614:	add	x1, x1, #0x0
    1618:	add	x3, x3, #0x0
    161c:	mov	w2, #0x4b4                 	// #1204
    1620:	bl	0 <__assert_fail>
    1624:	adrp	x0, 0 <lt__alloc_die_callback>
    1628:	adrp	x1, 0 <lt__alloc_die_callback>
    162c:	adrp	x3, 0 <lt__alloc_die_callback>
    1630:	add	x0, x0, #0x0
    1634:	add	x1, x1, #0x0
    1638:	add	x3, x3, #0x0
    163c:	mov	w2, #0x4e3                 	// #1251
    1640:	bl	0 <__assert_fail>
    1644:	adrp	x0, 0 <lt__alloc_die_callback>
    1648:	adrp	x1, 0 <lt__alloc_die_callback>
    164c:	adrp	x3, 0 <lt__alloc_die_callback>
    1650:	add	x0, x0, #0x0
    1654:	add	x1, x1, #0x0
    1658:	add	x3, x3, #0x0
    165c:	mov	w2, #0x589                 	// #1417
    1660:	bl	0 <__assert_fail>

0000000000001664 <lt_dlforeachfile>:
    1664:	stp	x29, x30, [sp, #-32]!
    1668:	str	x19, [sp, #16]
    166c:	mov	x29, sp
    1670:	mov	x19, x2
    1674:	str	x1, [x29, #24]
    1678:	cbz	x0, 1698 <lt_dlforeachfile+0x34>
    167c:	adrp	x2, 0 <lt__alloc_die_callback>
    1680:	add	x2, x2, #0x0
    1684:	add	x3, x29, #0x18
    1688:	mov	x1, xzr
    168c:	mov	x4, x19
    1690:	bl	1724 <foreach_dirinpath>
    1694:	b	170c <lt_dlforeachfile+0xa8>
    1698:	adrp	x8, 0 <lt__alloc_die_callback>
    169c:	ldr	x0, [x8]
    16a0:	adrp	x2, 0 <lt__alloc_die_callback>
    16a4:	add	x2, x2, #0x0
    16a8:	add	x3, x29, #0x18
    16ac:	mov	x1, xzr
    16b0:	mov	x4, x19
    16b4:	bl	1724 <foreach_dirinpath>
    16b8:	cbnz	w0, 170c <lt_dlforeachfile+0xa8>
    16bc:	adrp	x0, 0 <lt__alloc_die_callback>
    16c0:	add	x0, x0, #0x0
    16c4:	bl	0 <getenv>
    16c8:	adrp	x2, 0 <lt__alloc_die_callback>
    16cc:	add	x2, x2, #0x0
    16d0:	add	x3, x29, #0x18
    16d4:	mov	x1, xzr
    16d8:	mov	x4, x19
    16dc:	bl	1724 <foreach_dirinpath>
    16e0:	cbnz	w0, 170c <lt_dlforeachfile+0xa8>
    16e4:	adrp	x0, 0 <lt__alloc_die_callback>
    16e8:	add	x0, x0, #0x0
    16ec:	bl	0 <getenv>
    16f0:	adrp	x2, 0 <lt__alloc_die_callback>
    16f4:	add	x2, x2, #0x0
    16f8:	add	x3, x29, #0x18
    16fc:	mov	x1, xzr
    1700:	mov	x4, x19
    1704:	bl	1724 <foreach_dirinpath>
    1708:	cbz	w0, 1718 <lt_dlforeachfile+0xb4>
    170c:	ldr	x19, [sp, #16]
    1710:	ldp	x29, x30, [sp], #32
    1714:	ret
    1718:	adrp	x0, 0 <lt__alloc_die_callback>
    171c:	add	x0, x0, #0x0
    1720:	b	167c <lt_dlforeachfile+0x18>

0000000000001724 <foreach_dirinpath>:
    1724:	sub	sp, sp, #0x80
    1728:	stp	x24, x23, [sp, #80]
    172c:	stp	x22, x21, [sp, #96]
    1730:	stp	x20, x19, [sp, #112]
    1734:	mov	x19, x4
    1738:	mov	x20, x3
    173c:	mov	x21, x2
    1740:	mov	x22, x1
    1744:	mov	x24, x0
    1748:	stp	x29, x30, [sp, #32]
    174c:	stp	x28, x27, [sp, #48]
    1750:	stp	x26, x25, [sp, #64]
    1754:	add	x29, sp, #0x20
    1758:	cbz	x1, 1774 <foreach_dirinpath+0x50>
    175c:	ldrb	w8, [x22]
    1760:	cbz	w8, 1774 <foreach_dirinpath+0x50>
    1764:	mov	x0, x22
    1768:	bl	0 <strlen>
    176c:	mov	x23, x0
    1770:	b	1778 <foreach_dirinpath+0x54>
    1774:	mov	x23, xzr
    1778:	stur	xzr, [x29, #-8]
    177c:	stp	xzr, xzr, [sp, #8]
    1780:	cbz	x24, 17c8 <foreach_dirinpath+0xa4>
    1784:	ldrb	w8, [x24]
    1788:	cbz	w8, 17c8 <foreach_dirinpath+0xa4>
    178c:	add	x1, sp, #0x8
    1790:	mov	x0, x24
    1794:	bl	21d0 <canonicalize_path>
    1798:	cbnz	w0, 17d4 <foreach_dirinpath+0xb0>
    179c:	ldr	x0, [sp, #8]
    17a0:	add	x1, sp, #0x10
    17a4:	sub	x2, x29, #0x8
    17a8:	bl	2b4c <argzize_path>
    17ac:	cbnz	w0, 17d4 <foreach_dirinpath+0xb0>
    17b0:	mov	x26, xzr
    17b4:	mov	x24, xzr
    17b8:	mov	x25, xzr
    17bc:	add	x8, x23, #0x2
    17c0:	str	x8, [sp]
    17c4:	b	1844 <foreach_dirinpath+0x120>
    17c8:	mov	w0, #0x5                   	// #5
    17cc:	bl	0 <lt__error_string>
    17d0:	bl	0 <lt__set_last_error>
    17d4:	mov	x24, xzr
    17d8:	mov	w27, wzr
    17dc:	ldr	x0, [sp, #16]
    17e0:	bl	0 <free>
    17e4:	ldr	x0, [sp, #8]
    17e8:	str	xzr, [sp, #16]
    17ec:	bl	0 <free>
    17f0:	mov	x0, x24
    17f4:	str	xzr, [sp, #8]
    17f8:	bl	0 <free>
    17fc:	mov	w0, w27
    1800:	ldp	x20, x19, [sp, #112]
    1804:	ldp	x22, x21, [sp, #96]
    1808:	ldp	x24, x23, [sp, #80]
    180c:	ldp	x26, x25, [sp, #64]
    1810:	ldp	x28, x27, [sp, #48]
    1814:	ldp	x29, x30, [sp, #32]
    1818:	add	sp, sp, #0x80
    181c:	ret
    1820:	add	x0, x24, x27
    1824:	mov	x1, x22
    1828:	bl	0 <strcpy>
    182c:	mov	x0, x24
    1830:	mov	x1, x20
    1834:	mov	x2, x19
    1838:	blr	x21
    183c:	mov	w27, w0
    1840:	cbnz	w0, 17dc <foreach_dirinpath+0xb8>
    1844:	ldr	x8, [sp, #16]
    1848:	ldur	x9, [x29, #-8]
    184c:	cbz	x26, 1878 <foreach_dirinpath+0x154>
    1850:	add	x27, x8, x9
    1854:	cmp	x27, x26
    1858:	b.ls	186c <foreach_dirinpath+0x148>  // b.plast
    185c:	mov	x0, x26
    1860:	bl	0 <strlen>
    1864:	add	x8, x26, x0
    1868:	add	x26, x8, #0x1
    186c:	cmp	x26, x27
    1870:	b.cc	1884 <foreach_dirinpath+0x160>  // b.lo, b.ul, b.last
    1874:	b	17d8 <foreach_dirinpath+0xb4>
    1878:	cbz	x8, 17d8 <foreach_dirinpath+0xb4>
    187c:	mov	x26, x8
    1880:	cbz	x9, 17d8 <foreach_dirinpath+0xb4>
    1884:	ldrb	w8, [x26]
    1888:	cbz	w8, 189c <foreach_dirinpath+0x178>
    188c:	mov	x0, x26
    1890:	bl	0 <strlen>
    1894:	mov	x27, x0
    1898:	b	18a0 <foreach_dirinpath+0x17c>
    189c:	mov	x27, xzr
    18a0:	add	x28, x27, #0x1
    18a4:	add	x8, x28, x23
    18a8:	cmp	x8, x25
    18ac:	b.cc	18d0 <foreach_dirinpath+0x1ac>  // b.lo, b.ul, b.last
    18b0:	mov	x0, x24
    18b4:	bl	0 <free>
    18b8:	ldr	x8, [sp]
    18bc:	add	x25, x8, x27
    18c0:	mov	x0, x25
    18c4:	bl	0 <lt__malloc>
    18c8:	mov	x24, x0
    18cc:	cbz	x0, 17d8 <foreach_dirinpath+0xb4>
    18d0:	cmp	x25, x27
    18d4:	b.ls	1910 <foreach_dirinpath+0x1ec>  // b.plast
    18d8:	mov	x0, x24
    18dc:	mov	x1, x26
    18e0:	bl	0 <strcpy>
    18e4:	cbz	x22, 182c <foreach_dirinpath+0x108>
    18e8:	ldrb	w8, [x22]
    18ec:	cbz	w8, 182c <foreach_dirinpath+0x108>
    18f0:	add	x8, x27, x24
    18f4:	ldurb	w8, [x8, #-1]
    18f8:	cmp	w8, #0x2f
    18fc:	b.eq	1820 <foreach_dirinpath+0xfc>  // b.none
    1900:	mov	w8, #0x2f                  	// #47
    1904:	strb	w8, [x24, x27]
    1908:	mov	x27, x28
    190c:	b	1820 <foreach_dirinpath+0xfc>
    1910:	adrp	x0, 0 <lt__alloc_die_callback>
    1914:	adrp	x1, 0 <lt__alloc_die_callback>
    1918:	adrp	x3, 0 <lt__alloc_die_callback>
    191c:	add	x0, x0, #0x0
    1920:	add	x1, x1, #0x0
    1924:	add	x3, x3, #0x0
    1928:	mov	w2, #0x2cd                 	// #717
    192c:	bl	0 <__assert_fail>

0000000000001930 <foreachfile_callback>:
    1930:	sub	sp, sp, #0x80
    1934:	stp	x29, x30, [sp, #32]
    1938:	stp	x28, x27, [sp, #48]
    193c:	stp	x26, x25, [sp, #64]
    1940:	stp	x24, x23, [sp, #80]
    1944:	stp	x22, x21, [sp, #96]
    1948:	stp	x20, x19, [sp, #112]
    194c:	ldr	x24, [x1]
    1950:	add	x29, sp, #0x20
    1954:	stur	xzr, [x29, #-8]
    1958:	str	xzr, [sp, #16]
    195c:	cbz	x0, 1c30 <foreachfile_callback+0x300>
    1960:	ldrb	w8, [x0]
    1964:	mov	x20, x0
    1968:	cbz	w8, 1c30 <foreachfile_callback+0x300>
    196c:	mov	x0, x20
    1970:	mov	x23, x2
    1974:	bl	0 <strlen>
    1978:	add	x8, x0, x20
    197c:	ldurb	w8, [x8, #-1]
    1980:	cmp	w8, #0x2f
    1984:	b.eq	1c50 <foreachfile_callback+0x320>  // b.none
    1988:	mov	x0, x20
    198c:	bl	0 <opendir>
    1990:	cbz	x0, 1b3c <foreachfile_callback+0x20c>
    1994:	mov	x21, x0
    1998:	bl	0 <readdir>
    199c:	cbz	x0, 1b48 <foreachfile_callback+0x218>
    19a0:	mov	x27, #0x1                   	// #1
    19a4:	movk	x27, #0x4000, lsl #32
    19a8:	mov	x22, x0
    19ac:	mov	w26, #0x1                   	// #1
    19b0:	movk	x27, #0x3ff, lsl #48
    19b4:	mov	w28, #0x3                   	// #3
    19b8:	stp	x24, x23, [sp]
    19bc:	b	19f4 <foreachfile_callback+0xc4>
    19c0:	mov	x23, xzr
    19c4:	sub	x0, x29, #0x8
    19c8:	add	x1, sp, #0x10
    19cc:	mov	x2, x23
    19d0:	mov	x3, x22
    19d4:	bl	2bfc <lt_argz_insert>
    19d8:	cbnz	w0, 1b58 <foreachfile_callback+0x228>
    19dc:	mov	x0, x22
    19e0:	bl	0 <free>
    19e4:	mov	x0, x21
    19e8:	bl	0 <readdir>
    19ec:	mov	x22, x0
    19f0:	cbz	x0, 1b50 <foreachfile_callback+0x220>
    19f4:	mov	x23, x22
    19f8:	ldrb	w8, [x23, #19]!
    19fc:	cmp	w8, #0x2e
    1a00:	b.eq	19e4 <foreachfile_callback+0xb4>  // b.none
    1a04:	ldrb	w8, [x20]
    1a08:	cbz	w8, 1a1c <foreachfile_callback+0xec>
    1a0c:	mov	x0, x20
    1a10:	bl	0 <strlen>
    1a14:	add	x25, x0, #0x1
    1a18:	b	1a20 <foreachfile_callback+0xf0>
    1a1c:	mov	w25, #0x1                   	// #1
    1a20:	mov	x0, x23
    1a24:	bl	0 <strlen>
    1a28:	add	x8, x22, x0
    1a2c:	add	x8, x8, #0x13
    1a30:	mov	x10, x8
    1a34:	mov	x9, x10
    1a38:	sub	x10, x10, #0x1
    1a3c:	cmp	x10, x23
    1a40:	b.ls	1a5c <foreachfile_callback+0x12c>  // b.plast
    1a44:	ldrb	w11, [x10]
    1a48:	cmp	x11, #0x3f
    1a4c:	b.hi	1a5c <foreachfile_callback+0x12c>  // b.pmore
    1a50:	lsl	x11, x26, x11
    1a54:	and	x11, x11, x27
    1a58:	cbnz	x11, 1a34 <foreachfile_callback+0x104>
    1a5c:	ldrb	w10, [x9]
    1a60:	cmp	w10, #0x2e
    1a64:	csel	x8, x9, x8, eq  // eq = none
    1a68:	sub	x9, x8, #0x1
    1a6c:	cmp	x9, x23
    1a70:	b.ls	1a84 <foreachfile_callback+0x154>  // b.plast
    1a74:	ldrb	w10, [x9], #-1
    1a78:	cmp	w10, #0x2e
    1a7c:	b.ne	1a6c <foreachfile_callback+0x13c>  // b.any
    1a80:	add	x8, x9, #0x1
    1a84:	sub	x24, x8, x23
    1a88:	add	x19, x24, x25
    1a8c:	add	x0, x19, #0x1
    1a90:	bl	0 <lt__malloc>
    1a94:	cbz	x0, 1b60 <foreachfile_callback+0x230>
    1a98:	mov	x1, x20
    1a9c:	mov	x22, x0
    1aa0:	bl	0 <strcpy>
    1aa4:	bl	0 <strlen>
    1aa8:	mov	w8, #0x2f                  	// #47
    1aac:	strh	w8, [x22, x0]
    1ab0:	mov	x0, x22
    1ab4:	mov	x1, x23
    1ab8:	mov	x2, x24
    1abc:	bl	0 <strncat>
    1ac0:	strb	wzr, [x22, x19]
    1ac4:	ldrb	w8, [x22]
    1ac8:	cbz	w8, 1c10 <foreachfile_callback+0x2e0>
    1acc:	ldur	x24, [x29, #-8]
    1ad0:	cbz	x24, 19c0 <foreachfile_callback+0x90>
    1ad4:	ldr	x25, [sp, #16]
    1ad8:	mov	x23, xzr
    1adc:	add	x19, x24, x25
    1ae0:	b	1b08 <foreachfile_callback+0x1d8>
    1ae4:	mov	x23, x24
    1ae8:	cbz	x25, 19c0 <foreachfile_callback+0x90>
    1aec:	mov	x0, x22
    1af0:	mov	x1, x23
    1af4:	bl	0 <strcmp>
    1af8:	cmp	w0, #0x0
    1afc:	cset	w8, eq  // eq = none
    1b00:	csel	w8, w28, w8, lt  // lt = tstop
    1b04:	cbnz	w8, 1b30 <foreachfile_callback+0x200>
    1b08:	cbz	x23, 1ae4 <foreachfile_callback+0x1b4>
    1b0c:	cmp	x19, x23
    1b10:	b.ls	1b24 <foreachfile_callback+0x1f4>  // b.plast
    1b14:	mov	x0, x23
    1b18:	bl	0 <strlen>
    1b1c:	add	x8, x23, x0
    1b20:	add	x23, x8, #0x1
    1b24:	cmp	x23, x19
    1b28:	b.cc	1aec <foreachfile_callback+0x1bc>  // b.lo, b.ul, b.last
    1b2c:	b	19c0 <foreachfile_callback+0x90>
    1b30:	cmp	w8, #0x3
    1b34:	b.eq	19c4 <foreachfile_callback+0x94>  // b.none
    1b38:	b	19dc <foreachfile_callback+0xac>
    1b3c:	mov	x20, xzr
    1b40:	mov	w22, wzr
    1b44:	b	1be4 <foreachfile_callback+0x2b4>
    1b48:	mov	w19, #0x1                   	// #1
    1b4c:	b	1b68 <foreachfile_callback+0x238>
    1b50:	mov	w19, #0x1                   	// #1
    1b54:	b	1b64 <foreachfile_callback+0x234>
    1b58:	mov	x0, x22
    1b5c:	bl	0 <free>
    1b60:	mov	w19, wzr
    1b64:	ldp	x24, x23, [sp]
    1b68:	mov	x0, x21
    1b6c:	bl	0 <closedir>
    1b70:	ldur	x20, [x29, #-8]
    1b74:	mov	w22, wzr
    1b78:	cbz	w19, 1be4 <foreachfile_callback+0x2b4>
    1b7c:	cbz	x20, 1be4 <foreachfile_callback+0x2b4>
    1b80:	mov	x21, xzr
    1b84:	b	1ba4 <foreachfile_callback+0x274>
    1b88:	cmp	x21, x19
    1b8c:	b.cs	1b40 <foreachfile_callback+0x210>  // b.hs, b.nlast
    1b90:	mov	x0, x21
    1b94:	mov	x1, x23
    1b98:	blr	x24
    1b9c:	ldur	x20, [x29, #-8]
    1ba0:	cbnz	w0, 1be0 <foreachfile_callback+0x2b0>
    1ba4:	ldr	x8, [sp, #16]
    1ba8:	cbz	x21, 1bcc <foreachfile_callback+0x29c>
    1bac:	add	x19, x20, x8
    1bb0:	cmp	x19, x21
    1bb4:	b.ls	1b88 <foreachfile_callback+0x258>  // b.plast
    1bb8:	mov	x0, x21
    1bbc:	bl	0 <strlen>
    1bc0:	add	x8, x21, x0
    1bc4:	add	x21, x8, #0x1
    1bc8:	b	1b88 <foreachfile_callback+0x258>
    1bcc:	mov	w22, wzr
    1bd0:	cbz	x20, 1be4 <foreachfile_callback+0x2b4>
    1bd4:	mov	x21, x20
    1bd8:	cbnz	x8, 1b90 <foreachfile_callback+0x260>
    1bdc:	b	1be4 <foreachfile_callback+0x2b4>
    1be0:	mov	w22, w0
    1be4:	mov	x0, x20
    1be8:	bl	0 <free>
    1bec:	mov	w0, w22
    1bf0:	ldp	x20, x19, [sp, #112]
    1bf4:	ldp	x22, x21, [sp, #96]
    1bf8:	ldp	x24, x23, [sp, #80]
    1bfc:	ldp	x26, x25, [sp, #64]
    1c00:	ldp	x28, x27, [sp, #48]
    1c04:	ldp	x29, x30, [sp, #32]
    1c08:	add	sp, sp, #0x80
    1c0c:	ret
    1c10:	adrp	x0, 0 <lt__alloc_die_callback>
    1c14:	adrp	x1, 0 <lt__alloc_die_callback>
    1c18:	adrp	x3, 0 <lt__alloc_die_callback>
    1c1c:	add	x0, x0, #0x0
    1c20:	add	x1, x1, #0x0
    1c24:	add	x3, x3, #0x0
    1c28:	mov	w2, #0x6dd                 	// #1757
    1c2c:	bl	0 <__assert_fail>
    1c30:	adrp	x0, 0 <lt__alloc_die_callback>
    1c34:	adrp	x1, 0 <lt__alloc_die_callback>
    1c38:	adrp	x3, 0 <lt__alloc_die_callback>
    1c3c:	add	x0, x0, #0x0
    1c40:	add	x1, x1, #0x0
    1c44:	add	x3, x3, #0x0
    1c48:	mov	w2, #0x730                 	// #1840
    1c4c:	bl	0 <__assert_fail>
    1c50:	adrp	x0, 0 <lt__alloc_die_callback>
    1c54:	adrp	x1, 0 <lt__alloc_die_callback>
    1c58:	adrp	x3, 0 <lt__alloc_die_callback>
    1c5c:	add	x0, x0, #0x0
    1c60:	add	x1, x1, #0x0
    1c64:	add	x3, x3, #0x0
    1c68:	mov	w2, #0x733                 	// #1843
    1c6c:	bl	0 <__assert_fail>

0000000000001c70 <lt_dlsym>:
    1c70:	sub	sp, sp, #0xc0
    1c74:	stp	x29, x30, [sp, #128]
    1c78:	stp	x24, x23, [sp, #144]
    1c7c:	stp	x22, x21, [sp, #160]
    1c80:	stp	x20, x19, [sp, #176]
    1c84:	add	x29, sp, #0x80
    1c88:	cbz	x0, 1cb0 <lt_dlsym+0x40>
    1c8c:	mov	x20, x1
    1c90:	cbz	x1, 1cb8 <lt_dlsym+0x48>
    1c94:	ldrb	w8, [x20]
    1c98:	mov	x19, x0
    1c9c:	cbz	w8, 1cc0 <lt_dlsym+0x50>
    1ca0:	mov	x0, x20
    1ca4:	bl	0 <strlen>
    1ca8:	mov	x21, x0
    1cac:	b	1cc4 <lt_dlsym+0x54>
    1cb0:	mov	w0, #0xc                   	// #12
    1cb4:	b	1df4 <lt_dlsym+0x184>
    1cb8:	mov	w0, #0xa                   	// #10
    1cbc:	b	1df4 <lt_dlsym+0x184>
    1cc0:	mov	x21, xzr
    1cc4:	ldr	x24, [x19, #8]
    1cc8:	ldr	x0, [x24, #8]
    1ccc:	cbz	x0, 1ce4 <lt_dlsym+0x74>
    1cd0:	ldrb	w8, [x0]
    1cd4:	cbz	w8, 1ce0 <lt_dlsym+0x70>
    1cd8:	bl	0 <strlen>
    1cdc:	b	1ce4 <lt_dlsym+0x74>
    1ce0:	mov	x0, xzr
    1ce4:	ldr	x23, [x19, #24]
    1ce8:	add	x21, x0, x21
    1cec:	cbz	x23, 1d04 <lt_dlsym+0x94>
    1cf0:	ldrb	w8, [x23]
    1cf4:	cbz	w8, 1d04 <lt_dlsym+0x94>
    1cf8:	mov	x0, x23
    1cfc:	bl	0 <strlen>
    1d00:	b	1d08 <lt_dlsym+0x98>
    1d04:	mov	x0, xzr
    1d08:	add	x8, x21, x0
    1d0c:	add	x9, x8, #0x5
    1d10:	cmp	x9, #0x80
    1d14:	b.cs	1d4c <lt_dlsym+0xdc>  // b.hs, b.nlast
    1d18:	mov	x21, sp
    1d1c:	ldr	x22, [x24, #56]
    1d20:	cbz	x23, 1d6c <lt_dlsym+0xfc>
    1d24:	bl	0 <lt__get_last_error>
    1d28:	ldr	x8, [x19, #8]
    1d2c:	mov	x23, x0
    1d30:	ldr	x1, [x8, #8]
    1d34:	cbz	x1, 1d88 <lt_dlsym+0x118>
    1d38:	mov	x0, x21
    1d3c:	bl	0 <strcpy>
    1d40:	ldr	x1, [x19, #24]
    1d44:	bl	0 <strcat>
    1d48:	b	1d94 <lt_dlsym+0x124>
    1d4c:	add	x0, x8, #0x6
    1d50:	bl	0 <lt__malloc>
    1d54:	cbz	x0, 1df0 <lt_dlsym+0x180>
    1d58:	ldr	x24, [x19, #8]
    1d5c:	ldr	x23, [x19, #24]
    1d60:	mov	x21, x0
    1d64:	ldr	x22, [x24, #56]
    1d68:	cbnz	x23, 1d24 <lt_dlsym+0xb4>
    1d6c:	ldr	x1, [x24, #8]
    1d70:	cbz	x1, 1e18 <lt_dlsym+0x1a8>
    1d74:	mov	x0, x21
    1d78:	bl	0 <strcpy>
    1d7c:	mov	x1, x20
    1d80:	bl	0 <strcat>
    1d84:	b	1e24 <lt_dlsym+0x1b4>
    1d88:	ldr	x1, [x19, #24]
    1d8c:	mov	x0, x21
    1d90:	bl	0 <strcpy>
    1d94:	mov	x0, x21
    1d98:	bl	0 <strlen>
    1d9c:	mov	w9, #0x4c5f                	// #19551
    1da0:	add	x8, x21, x0
    1da4:	movk	w9, #0x5854, lsl #16
    1da8:	mov	w10, #0x5f                  	// #95
    1dac:	mov	x0, x21
    1db0:	mov	x1, x20
    1db4:	str	w9, [x8]
    1db8:	strh	w10, [x8, #4]
    1dbc:	bl	0 <strcat>
    1dc0:	ldr	x8, [x19, #8]
    1dc4:	ldr	x1, [x19, #56]
    1dc8:	mov	x0, x22
    1dcc:	mov	x2, x21
    1dd0:	ldr	x8, [x8, #32]
    1dd4:	blr	x8
    1dd8:	cbz	x0, 1e04 <lt_dlsym+0x194>
    1ddc:	mov	x8, sp
    1de0:	mov	x24, x0
    1de4:	cmp	x21, x8
    1de8:	b.ne	1e4c <lt_dlsym+0x1dc>  // b.any
    1dec:	b	1e54 <lt_dlsym+0x1e4>
    1df0:	mov	w0, #0xd                   	// #13
    1df4:	bl	0 <lt__error_string>
    1df8:	bl	0 <lt__set_last_error>
    1dfc:	mov	x24, xzr
    1e00:	b	1e54 <lt_dlsym+0x1e4>
    1e04:	mov	x0, x23
    1e08:	bl	0 <lt__set_last_error>
    1e0c:	ldr	x24, [x19, #8]
    1e10:	ldr	x1, [x24, #8]
    1e14:	cbnz	x1, 1d74 <lt_dlsym+0x104>
    1e18:	mov	x0, x21
    1e1c:	mov	x1, x20
    1e20:	bl	0 <strcpy>
    1e24:	ldr	x8, [x19, #8]
    1e28:	ldr	x1, [x19, #56]
    1e2c:	mov	x0, x22
    1e30:	mov	x2, x21
    1e34:	ldr	x8, [x8, #32]
    1e38:	blr	x8
    1e3c:	mov	x8, sp
    1e40:	cmp	x21, x8
    1e44:	mov	x24, x0
    1e48:	b.eq	1e54 <lt_dlsym+0x1e4>  // b.none
    1e4c:	mov	x0, x21
    1e50:	bl	0 <free>
    1e54:	mov	x0, x24
    1e58:	ldp	x20, x19, [sp, #176]
    1e5c:	ldp	x22, x21, [sp, #160]
    1e60:	ldp	x24, x23, [sp, #144]
    1e64:	ldp	x29, x30, [sp, #128]
    1e68:	add	sp, sp, #0xc0
    1e6c:	ret

0000000000001e70 <lt_dlerror>:
    1e70:	stp	x29, x30, [sp, #-32]!
    1e74:	str	x19, [sp, #16]
    1e78:	mov	x29, sp
    1e7c:	bl	0 <lt__get_last_error>
    1e80:	mov	x19, x0
    1e84:	mov	x0, xzr
    1e88:	bl	0 <lt__set_last_error>
    1e8c:	mov	x0, x19
    1e90:	ldr	x19, [sp, #16]
    1e94:	ldp	x29, x30, [sp], #32
    1e98:	ret

0000000000001e9c <lt_dladdsearchdir>:
    1e9c:	stp	x29, x30, [sp, #-16]!
    1ea0:	mov	x29, sp
    1ea4:	cbz	x0, 1ecc <lt_dladdsearchdir+0x30>
    1ea8:	ldrb	w8, [x0]
    1eac:	mov	x1, x0
    1eb0:	cbz	w8, 1ecc <lt_dladdsearchdir+0x30>
    1eb4:	mov	x0, xzr
    1eb8:	bl	1ed8 <lt_dlpath_insertdir>
    1ebc:	cmp	w0, #0x0
    1ec0:	cset	w0, ne  // ne = any
    1ec4:	ldp	x29, x30, [sp], #16
    1ec8:	ret
    1ecc:	mov	w0, wzr
    1ed0:	ldp	x29, x30, [sp], #16
    1ed4:	ret

0000000000001ed8 <lt_dlpath_insertdir>:
    1ed8:	sub	sp, sp, #0x40
    1edc:	stp	x29, x30, [sp, #16]
    1ee0:	add	x29, sp, #0x10
    1ee4:	str	x21, [sp, #32]
    1ee8:	stp	x20, x19, [sp, #48]
    1eec:	str	xzr, [x29, #24]
    1ef0:	stp	xzr, xzr, [sp]
    1ef4:	cbz	x1, 2034 <lt_dlpath_insertdir+0x15c>
    1ef8:	ldrb	w8, [x1]
    1efc:	mov	x19, x1
    1f00:	cbz	w8, 2034 <lt_dlpath_insertdir+0x15c>
    1f04:	mov	x20, x0
    1f08:	add	x1, x29, #0x18
    1f0c:	mov	x0, x19
    1f10:	bl	21d0 <canonicalize_path>
    1f14:	cbz	w0, 1f48 <lt_dlpath_insertdir+0x70>
    1f18:	mov	w19, #0x1                   	// #1
    1f1c:	ldr	x0, [sp, #8]
    1f20:	bl	0 <free>
    1f24:	ldr	x0, [x29, #24]
    1f28:	str	xzr, [sp, #8]
    1f2c:	bl	0 <free>
    1f30:	mov	w0, w19
    1f34:	ldp	x20, x19, [sp, #48]
    1f38:	ldr	x21, [sp, #32]
    1f3c:	ldp	x29, x30, [sp, #16]
    1f40:	add	sp, sp, #0x40
    1f44:	ret
    1f48:	ldr	x8, [x29, #24]
    1f4c:	cbz	x8, 2054 <lt_dlpath_insertdir+0x17c>
    1f50:	ldrb	w8, [x8]
    1f54:	cbz	w8, 2054 <lt_dlpath_insertdir+0x17c>
    1f58:	adrp	x21, 0 <lt__alloc_die_callback>
    1f5c:	ldr	x0, [x21]
    1f60:	cbz	x0, 1f88 <lt_dlpath_insertdir+0xb0>
    1f64:	add	x2, sp, #0x8
    1f68:	mov	x3, sp
    1f6c:	mov	w1, #0x3a                  	// #58
    1f70:	bl	0 <argz_create_sep>
    1f74:	cbz	w0, 1fa4 <lt_dlpath_insertdir+0xcc>
    1f78:	cmp	w0, #0xc
    1f7c:	b.ne	1fd0 <lt_dlpath_insertdir+0xf8>  // b.any
    1f80:	mov	w0, #0xb                   	// #11
    1f84:	b	1fd4 <lt_dlpath_insertdir+0xfc>
    1f88:	cbnz	x20, 2074 <lt_dlpath_insertdir+0x19c>
    1f8c:	mov	x0, x19
    1f90:	bl	0 <lt__strdup>
    1f94:	cmp	x0, #0x0
    1f98:	str	x0, [x21]
    1f9c:	cset	w19, eq  // eq = none
    1fa0:	b	1f1c <lt_dlpath_insertdir+0x44>
    1fa4:	cbz	x20, 1fe0 <lt_dlpath_insertdir+0x108>
    1fa8:	ldr	x0, [x21]
    1fac:	cmp	x0, x20
    1fb0:	b.hi	2094 <lt_dlpath_insertdir+0x1bc>  // b.pmore
    1fb4:	sub	x20, x20, x0
    1fb8:	bl	0 <strlen>
    1fbc:	cmp	w20, w0
    1fc0:	b.gt	20b4 <lt_dlpath_insertdir+0x1dc>
    1fc4:	ldr	x8, [sp, #8]
    1fc8:	add	x2, x8, x20
    1fcc:	b	1fe4 <lt_dlpath_insertdir+0x10c>
    1fd0:	mov	w0, wzr
    1fd4:	bl	0 <lt__error_string>
    1fd8:	bl	0 <lt__set_last_error>
    1fdc:	b	1f18 <lt_dlpath_insertdir+0x40>
    1fe0:	mov	x2, xzr
    1fe4:	add	x0, sp, #0x8
    1fe8:	mov	x1, sp
    1fec:	mov	x3, x19
    1ff0:	bl	2bfc <lt_argz_insert>
    1ff4:	cbnz	w0, 1f18 <lt_dlpath_insertdir+0x40>
    1ff8:	ldp	x1, x0, [sp]
    1ffc:	mov	w2, #0x3a                  	// #58
    2000:	bl	0 <argz_stringify>
    2004:	ldr	x0, [x21]
    2008:	ldr	x8, [sp, #8]
    200c:	cmp	x0, x8
    2010:	b.eq	202c <lt_dlpath_insertdir+0x154>  // b.none
    2014:	bl	0 <free>
    2018:	ldr	x8, [sp, #8]
    201c:	mov	w19, wzr
    2020:	str	xzr, [sp, #8]
    2024:	str	x8, [x21]
    2028:	b	1f1c <lt_dlpath_insertdir+0x44>
    202c:	mov	w19, wzr
    2030:	b	1f1c <lt_dlpath_insertdir+0x44>
    2034:	adrp	x0, 0 <lt__alloc_die_callback>
    2038:	adrp	x1, 0 <lt__alloc_die_callback>
    203c:	adrp	x3, 0 <lt__alloc_die_callback>
    2040:	add	x0, x0, #0x0
    2044:	add	x1, x1, #0x0
    2048:	add	x3, x3, #0x0
    204c:	mov	w2, #0x84f                 	// #2127
    2050:	bl	0 <__assert_fail>
    2054:	adrp	x0, 0 <lt__alloc_die_callback>
    2058:	adrp	x1, 0 <lt__alloc_die_callback>
    205c:	adrp	x3, 0 <lt__alloc_die_callback>
    2060:	add	x0, x0, #0x0
    2064:	add	x1, x1, #0x0
    2068:	add	x3, x3, #0x0
    206c:	mov	w2, #0x857                 	// #2135
    2070:	bl	0 <__assert_fail>
    2074:	adrp	x0, 0 <lt__alloc_die_callback>
    2078:	adrp	x1, 0 <lt__alloc_die_callback>
    207c:	adrp	x3, 0 <lt__alloc_die_callback>
    2080:	add	x0, x0, #0x0
    2084:	add	x1, x1, #0x0
    2088:	add	x3, x3, #0x0
    208c:	mov	w2, #0x85c                 	// #2140
    2090:	bl	0 <__assert_fail>
    2094:	adrp	x0, 0 <lt__alloc_die_callback>
    2098:	adrp	x1, 0 <lt__alloc_die_callback>
    209c:	adrp	x3, 0 <lt__alloc_die_callback>
    20a0:	add	x0, x0, #0x0
    20a4:	add	x1, x1, #0x0
    20a8:	add	x3, x3, #0x0
    20ac:	mov	w2, #0x875                 	// #2165
    20b0:	bl	0 <__assert_fail>
    20b4:	adrp	x0, 0 <lt__alloc_die_callback>
    20b8:	adrp	x1, 0 <lt__alloc_die_callback>
    20bc:	adrp	x3, 0 <lt__alloc_die_callback>
    20c0:	add	x0, x0, #0x0
    20c4:	add	x1, x1, #0x0
    20c8:	add	x3, x3, #0x0
    20cc:	mov	w2, #0x876                 	// #2166
    20d0:	bl	0 <__assert_fail>

00000000000020d4 <lt_dlinsertsearchdir>:
    20d4:	stp	x29, x30, [sp, #-48]!
    20d8:	stp	x20, x19, [sp, #32]
    20dc:	mov	x19, x1
    20e0:	mov	x20, x0
    20e4:	str	x21, [sp, #16]
    20e8:	mov	x29, sp
    20ec:	cbz	x0, 2128 <lt_dlinsertsearchdir+0x54>
    20f0:	adrp	x8, 0 <lt__alloc_die_callback>
    20f4:	ldr	x21, [x8]
    20f8:	cmp	x21, x20
    20fc:	b.hi	214c <lt_dlinsertsearchdir+0x78>  // b.pmore
    2100:	cbz	x21, 2118 <lt_dlinsertsearchdir+0x44>
    2104:	ldrb	w8, [x21]
    2108:	cbz	w8, 2118 <lt_dlinsertsearchdir+0x44>
    210c:	mov	x0, x21
    2110:	bl	0 <strlen>
    2114:	b	211c <lt_dlinsertsearchdir+0x48>
    2118:	mov	x0, xzr
    211c:	add	x8, x21, x0
    2120:	cmp	x8, x20
    2124:	b.ls	214c <lt_dlinsertsearchdir+0x78>  // b.plast
    2128:	cbz	x19, 2160 <lt_dlinsertsearchdir+0x8c>
    212c:	ldrb	w8, [x19]
    2130:	cbz	w8, 2160 <lt_dlinsertsearchdir+0x8c>
    2134:	mov	x0, x20
    2138:	mov	x1, x19
    213c:	bl	1ed8 <lt_dlpath_insertdir>
    2140:	cmp	w0, #0x0
    2144:	cset	w0, ne  // ne = any
    2148:	b	2164 <lt_dlinsertsearchdir+0x90>
    214c:	mov	w0, #0x12                  	// #18
    2150:	bl	0 <lt__error_string>
    2154:	bl	0 <lt__set_last_error>
    2158:	mov	w0, #0x1                   	// #1
    215c:	b	2164 <lt_dlinsertsearchdir+0x90>
    2160:	mov	w0, wzr
    2164:	ldp	x20, x19, [sp, #32]
    2168:	ldr	x21, [sp, #16]
    216c:	ldp	x29, x30, [sp], #48
    2170:	ret

0000000000002174 <lt_dlsetsearchpath>:
    2174:	stp	x29, x30, [sp, #-32]!
    2178:	stp	x20, x19, [sp, #16]
    217c:	adrp	x20, 0 <lt__alloc_die_callback>
    2180:	ldr	x8, [x20]
    2184:	mov	x19, x0
    2188:	mov	x29, sp
    218c:	mov	x0, x8
    2190:	bl	0 <free>
    2194:	str	xzr, [x20]
    2198:	cbz	x19, 21c0 <lt_dlsetsearchpath+0x4c>
    219c:	ldrb	w8, [x19]
    21a0:	cbz	w8, 21c0 <lt_dlsetsearchpath+0x4c>
    21a4:	adrp	x1, 0 <lt__alloc_die_callback>
    21a8:	add	x1, x1, #0x0
    21ac:	mov	x0, x19
    21b0:	bl	21d0 <canonicalize_path>
    21b4:	cmp	w0, #0x0
    21b8:	cset	w0, ne  // ne = any
    21bc:	b	21c4 <lt_dlsetsearchpath+0x50>
    21c0:	mov	w0, wzr
    21c4:	ldp	x20, x19, [sp, #16]
    21c8:	ldp	x29, x30, [sp], #32
    21cc:	ret

00000000000021d0 <canonicalize_path>:
    21d0:	stp	x29, x30, [sp, #-32]!
    21d4:	stp	x20, x19, [sp, #16]
    21d8:	mov	x29, sp
    21dc:	cbz	x0, 22b8 <canonicalize_path+0xe8>
    21e0:	ldrb	w8, [x0]
    21e4:	mov	x20, x0
    21e8:	cbz	w8, 22b8 <canonicalize_path+0xe8>
    21ec:	mov	x19, x1
    21f0:	cbz	x1, 22d8 <canonicalize_path+0x108>
    21f4:	mov	x0, x20
    21f8:	bl	0 <strlen>
    21fc:	add	x0, x0, #0x1
    2200:	bl	0 <lt__malloc>
    2204:	cbz	x0, 22a4 <canonicalize_path+0xd4>
    2208:	mov	x12, #0xffff800000000001    	// #-140737488355327
    220c:	mov	x9, xzr
    2210:	add	x8, x20, #0x1
    2214:	mov	w10, #0x2f                  	// #47
    2218:	mov	w11, #0x1                   	// #1
    221c:	movk	x12, #0x400, lsl #48
    2220:	b	2234 <canonicalize_path+0x64>
    2224:	add	x13, x9, #0x1
    2228:	strb	w10, [x0, x9]
    222c:	mov	x9, x13
    2230:	add	x8, x8, #0x1
    2234:	ldurb	w13, [x8, #-1]
    2238:	cmp	w13, #0x2f
    223c:	b.eq	2278 <canonicalize_path+0xa8>  // b.none
    2240:	cmp	w13, #0x3a
    2244:	b.eq	2260 <canonicalize_path+0x90>  // b.none
    2248:	cbz	w13, 2294 <canonicalize_path+0xc4>
    224c:	add	x14, x9, #0x1
    2250:	strb	w13, [x0, x9]
    2254:	mov	x9, x14
    2258:	add	x8, x8, #0x1
    225c:	b	2234 <canonicalize_path+0x64>
    2260:	cbz	x9, 2230 <canonicalize_path+0x60>
    2264:	ldrb	w14, [x8]
    2268:	cbz	w14, 2230 <canonicalize_path+0x60>
    226c:	cmp	w14, #0x3a
    2270:	b.eq	2230 <canonicalize_path+0x60>  // b.none
    2274:	b	224c <canonicalize_path+0x7c>
    2278:	ldrb	w13, [x8]
    227c:	cmp	w13, #0x3a
    2280:	b.hi	2224 <canonicalize_path+0x54>  // b.pmore
    2284:	lsl	x13, x11, x13
    2288:	tst	x13, x12
    228c:	b.ne	2230 <canonicalize_path+0x60>  // b.any
    2290:	b	2224 <canonicalize_path+0x54>
    2294:	mov	w8, wzr
    2298:	strb	wzr, [x0, x9]
    229c:	str	x0, [x19]
    22a0:	b	22a8 <canonicalize_path+0xd8>
    22a4:	mov	w8, #0x1                   	// #1
    22a8:	ldp	x20, x19, [sp, #16]
    22ac:	mov	w0, w8
    22b0:	ldp	x29, x30, [sp], #32
    22b4:	ret
    22b8:	adrp	x0, 0 <lt__alloc_die_callback>
    22bc:	adrp	x1, 0 <lt__alloc_die_callback>
    22c0:	adrp	x3, 0 <lt__alloc_die_callback>
    22c4:	add	x0, x0, #0x0
    22c8:	add	x1, x1, #0x0
    22cc:	add	x3, x3, #0x0
    22d0:	mov	w2, #0x24f                 	// #591
    22d4:	bl	0 <__assert_fail>
    22d8:	adrp	x0, 0 <lt__alloc_die_callback>
    22dc:	adrp	x1, 0 <lt__alloc_die_callback>
    22e0:	adrp	x3, 0 <lt__alloc_die_callback>
    22e4:	add	x0, x0, #0x0
    22e8:	add	x1, x1, #0x0
    22ec:	add	x3, x3, #0x0
    22f0:	mov	w2, #0x250                 	// #592
    22f4:	bl	0 <__assert_fail>

00000000000022f8 <lt_dlgetsearchpath>:
    22f8:	adrp	x8, 0 <lt__alloc_die_callback>
    22fc:	ldr	x0, [x8]
    2300:	ret

0000000000002304 <lt_dlmakeresident>:
    2304:	stp	x29, x30, [sp, #-16]!
    2308:	mov	x29, sp
    230c:	cbz	x0, 232c <lt_dlmakeresident+0x28>
    2310:	mov	x8, x0
    2314:	ldrb	w9, [x8, #36]
    2318:	mov	w0, wzr
    231c:	orr	w9, w9, #0x1
    2320:	strb	w9, [x8, #36]
    2324:	ldp	x29, x30, [sp], #16
    2328:	ret
    232c:	mov	w0, #0xc                   	// #12
    2330:	bl	0 <lt__error_string>
    2334:	bl	0 <lt__set_last_error>
    2338:	mov	w0, #0x1                   	// #1
    233c:	ldp	x29, x30, [sp], #16
    2340:	ret

0000000000002344 <lt_dlisresident>:
    2344:	stp	x29, x30, [sp, #-16]!
    2348:	mov	x29, sp
    234c:	cbz	x0, 2360 <lt_dlisresident+0x1c>
    2350:	ldrb	w8, [x0, #36]
    2354:	and	w0, w8, #0x1
    2358:	ldp	x29, x30, [sp], #16
    235c:	ret
    2360:	mov	w0, #0xc                   	// #12
    2364:	bl	0 <lt__error_string>
    2368:	bl	0 <lt__set_last_error>
    236c:	mov	w0, #0xffffffff            	// #-1
    2370:	ldp	x29, x30, [sp], #16
    2374:	ret

0000000000002378 <lt_dlinterface_register>:
    2378:	stp	x29, x30, [sp, #-48]!
    237c:	str	x21, [sp, #16]
    2380:	mov	x21, x0
    2384:	mov	w0, #0x10                  	// #16
    2388:	stp	x20, x19, [sp, #32]
    238c:	mov	x29, sp
    2390:	mov	x20, x1
    2394:	bl	0 <lt__malloc>
    2398:	mov	x19, x0
    239c:	cbz	x0, 23c4 <lt_dlinterface_register+0x4c>
    23a0:	mov	x0, x21
    23a4:	bl	0 <lt__strdup>
    23a8:	str	x0, [x19]
    23ac:	cbz	x0, 23b8 <lt_dlinterface_register+0x40>
    23b0:	str	x20, [x19, #8]
    23b4:	b	23c4 <lt_dlinterface_register+0x4c>
    23b8:	mov	x0, x19
    23bc:	bl	0 <free>
    23c0:	mov	x19, xzr
    23c4:	mov	x0, x19
    23c8:	ldp	x20, x19, [sp, #32]
    23cc:	ldr	x21, [sp, #16]
    23d0:	ldp	x29, x30, [sp], #48
    23d4:	ret

00000000000023d8 <lt_dlinterface_free>:
    23d8:	stp	x29, x30, [sp, #-32]!
    23dc:	str	x19, [sp, #16]
    23e0:	mov	x19, x0
    23e4:	ldr	x0, [x0]
    23e8:	mov	x29, sp
    23ec:	bl	0 <free>
    23f0:	mov	x0, x19
    23f4:	ldr	x19, [sp, #16]
    23f8:	ldp	x29, x30, [sp], #32
    23fc:	b	0 <free>

0000000000002400 <lt_dlcaller_set_data>:
    2400:	stp	x29, x30, [sp, #-64]!
    2404:	stp	x24, x23, [sp, #16]
    2408:	stp	x22, x21, [sp, #32]
    240c:	stp	x20, x19, [sp, #48]
    2410:	ldr	x8, [x1, #72]
    2414:	mov	x19, x2
    2418:	mov	x21, x1
    241c:	mov	x20, x0
    2420:	mov	x29, sp
    2424:	cbz	x8, 2474 <lt_dlcaller_set_data+0x74>
    2428:	mov	w23, #0xffffffff            	// #-1
    242c:	mov	x9, x8
    2430:	ldr	x10, [x9], #16
    2434:	add	w23, w23, #0x1
    2438:	cbnz	x10, 2430 <lt_dlcaller_set_data+0x30>
    243c:	cbz	w23, 2484 <lt_dlcaller_set_data+0x84>
    2440:	mov	x24, xzr
    2444:	add	x9, x8, #0x8
    2448:	mov	w10, w23
    244c:	ldur	x11, [x9, #-8]
    2450:	cmp	x11, x20
    2454:	b.eq	2490 <lt_dlcaller_set_data+0x90>  // b.none
    2458:	add	x24, x24, #0x1
    245c:	cmp	x10, x24
    2460:	add	x9, x9, #0x10
    2464:	b.ne	244c <lt_dlcaller_set_data+0x4c>  // b.any
    2468:	mov	x22, xzr
    246c:	mov	w24, w23
    2470:	b	249c <lt_dlcaller_set_data+0x9c>
    2474:	mov	x22, xzr
    2478:	mov	w24, wzr
    247c:	mov	w23, wzr
    2480:	b	249c <lt_dlcaller_set_data+0x9c>
    2484:	mov	w24, wzr
    2488:	mov	x22, xzr
    248c:	b	2494 <lt_dlcaller_set_data+0x94>
    2490:	ldr	x22, [x9]
    2494:	cmp	w24, w23
    2498:	b.ne	24d0 <lt_dlcaller_set_data+0xd0>  // b.any
    249c:	add	w9, w23, #0x2
    24a0:	lsl	x1, x9, #4
    24a4:	mov	x0, x8
    24a8:	bl	0 <lt__realloc>
    24ac:	cbz	x0, 24dc <lt_dlcaller_set_data+0xdc>
    24b0:	mov	w9, w23
    24b4:	add	w10, w23, #0x1
    24b8:	mov	x8, x0
    24bc:	lsl	x9, x9, #4
    24c0:	lsl	x10, x10, #4
    24c4:	str	x0, [x21, #72]
    24c8:	str	x20, [x0, x9]
    24cc:	str	xzr, [x0, x10]
    24d0:	add	x8, x8, w24, uxtw #4
    24d4:	str	x19, [x8, #8]
    24d8:	b	24e0 <lt_dlcaller_set_data+0xe0>
    24dc:	mov	x22, xzr
    24e0:	mov	x0, x22
    24e4:	ldp	x20, x19, [sp, #48]
    24e8:	ldp	x22, x21, [sp, #32]
    24ec:	ldp	x24, x23, [sp, #16]
    24f0:	ldp	x29, x30, [sp], #64
    24f4:	ret

00000000000024f8 <lt_dlcaller_get_data>:
    24f8:	ldr	x8, [x1, #72]
    24fc:	cbz	x8, 251c <lt_dlcaller_get_data+0x24>
    2500:	ldr	x9, [x8]
    2504:	cbz	x9, 251c <lt_dlcaller_get_data+0x24>
    2508:	add	x8, x8, #0x10
    250c:	cmp	x9, x0
    2510:	b.eq	2524 <lt_dlcaller_get_data+0x2c>  // b.none
    2514:	ldr	x9, [x8], #16
    2518:	cbnz	x9, 250c <lt_dlcaller_get_data+0x14>
    251c:	mov	x0, xzr
    2520:	ret
    2524:	ldur	x0, [x8, #-8]
    2528:	ret

000000000000252c <lt_dlgetinfo>:
    252c:	cbz	x0, 2538 <lt_dlgetinfo+0xc>
    2530:	add	x0, x0, #0x10
    2534:	ret
    2538:	stp	x29, x30, [sp, #-16]!
    253c:	mov	w0, #0xc                   	// #12
    2540:	mov	x29, sp
    2544:	bl	0 <lt__error_string>
    2548:	bl	0 <lt__set_last_error>
    254c:	mov	x0, xzr
    2550:	ldp	x29, x30, [sp], #16
    2554:	ret

0000000000002558 <lt_dlhandle_iterate>:
    2558:	stp	x29, x30, [sp, #-32]!
    255c:	stp	x20, x19, [sp, #16]
    2560:	mov	x29, sp
    2564:	cbz	x0, 25b4 <lt_dlhandle_iterate+0x5c>
    2568:	adrp	x8, 0 <lt__alloc_die_callback>
    256c:	add	x8, x8, #0x0
    2570:	cmp	x1, #0x0
    2574:	csel	x8, x8, x1, eq  // eq = none
    2578:	ldr	x19, [x8]
    257c:	cbz	x19, 25a4 <lt_dlhandle_iterate+0x4c>
    2580:	mov	x20, x0
    2584:	ldr	x8, [x20, #8]
    2588:	cbz	x8, 25a4 <lt_dlhandle_iterate+0x4c>
    258c:	ldr	x1, [x20]
    2590:	mov	x0, x19
    2594:	blr	x8
    2598:	cbz	w0, 25a4 <lt_dlhandle_iterate+0x4c>
    259c:	ldr	x19, [x19]
    25a0:	cbnz	x19, 2584 <lt_dlhandle_iterate+0x2c>
    25a4:	mov	x0, x19
    25a8:	ldp	x20, x19, [sp, #16]
    25ac:	ldp	x29, x30, [sp], #32
    25b0:	ret
    25b4:	adrp	x0, 0 <lt__alloc_die_callback>
    25b8:	adrp	x1, 0 <lt__alloc_die_callback>
    25bc:	adrp	x3, 0 <lt__alloc_die_callback>
    25c0:	add	x0, x0, #0x0
    25c4:	add	x1, x1, #0x0
    25c8:	add	x3, x3, #0x0
    25cc:	mov	w2, #0x96a                 	// #2410
    25d0:	bl	0 <__assert_fail>

00000000000025d4 <lt_dlhandle_fetch>:
    25d4:	stp	x29, x30, [sp, #-48]!
    25d8:	str	x21, [sp, #16]
    25dc:	stp	x20, x19, [sp, #32]
    25e0:	mov	x29, sp
    25e4:	cbz	x0, 2648 <lt_dlhandle_fetch+0x74>
    25e8:	adrp	x8, 0 <lt__alloc_die_callback>
    25ec:	ldr	x19, [x8]
    25f0:	cbz	x19, 2634 <lt_dlhandle_fetch+0x60>
    25f4:	mov	x20, x1
    25f8:	mov	x21, x0
    25fc:	b	2608 <lt_dlhandle_fetch+0x34>
    2600:	ldr	x19, [x19]
    2604:	cbz	x19, 2634 <lt_dlhandle_fetch+0x60>
    2608:	ldr	x8, [x21, #8]
    260c:	cbz	x8, 2620 <lt_dlhandle_fetch+0x4c>
    2610:	ldr	x1, [x21]
    2614:	mov	x0, x19
    2618:	blr	x8
    261c:	cbnz	w0, 2600 <lt_dlhandle_fetch+0x2c>
    2620:	ldr	x0, [x19, #24]
    2624:	cbz	x0, 2600 <lt_dlhandle_fetch+0x2c>
    2628:	mov	x1, x20
    262c:	bl	0 <strcmp>
    2630:	cbnz	w0, 2600 <lt_dlhandle_fetch+0x2c>
    2634:	mov	x0, x19
    2638:	ldp	x20, x19, [sp, #32]
    263c:	ldr	x21, [sp, #16]
    2640:	ldp	x29, x30, [sp], #48
    2644:	ret
    2648:	adrp	x0, 0 <lt__alloc_die_callback>
    264c:	adrp	x1, 0 <lt__alloc_die_callback>
    2650:	adrp	x3, 0 <lt__alloc_die_callback>
    2654:	add	x0, x0, #0x0
    2658:	add	x1, x1, #0x0
    265c:	add	x3, x3, #0x0
    2660:	mov	w2, #0x981                 	// #2433
    2664:	bl	0 <__assert_fail>

0000000000002668 <lt_dlhandle_map>:
    2668:	stp	x29, x30, [sp, #-48]!
    266c:	stp	x22, x21, [sp, #16]
    2670:	stp	x20, x19, [sp, #32]
    2674:	mov	x29, sp
    2678:	cbz	x0, 26e0 <lt_dlhandle_map+0x78>
    267c:	adrp	x8, 0 <lt__alloc_die_callback>
    2680:	ldr	x22, [x8]
    2684:	mov	x19, x2
    2688:	mov	x20, x1
    268c:	mov	x21, x0
    2690:	b	26a4 <lt_dlhandle_map+0x3c>
    2694:	mov	x0, x22
    2698:	mov	x1, x19
    269c:	blr	x20
    26a0:	cbnz	w0, 26d0 <lt_dlhandle_map+0x68>
    26a4:	cbz	x22, 26cc <lt_dlhandle_map+0x64>
    26a8:	ldr	x8, [x21, #8]
    26ac:	cbz	x8, 2694 <lt_dlhandle_map+0x2c>
    26b0:	ldr	x1, [x21]
    26b4:	mov	x0, x22
    26b8:	blr	x8
    26bc:	cbz	w0, 2694 <lt_dlhandle_map+0x2c>
    26c0:	ldr	x22, [x22]
    26c4:	cbnz	x22, 26a8 <lt_dlhandle_map+0x40>
    26c8:	b	2694 <lt_dlhandle_map+0x2c>
    26cc:	mov	w0, wzr
    26d0:	ldp	x20, x19, [sp, #32]
    26d4:	ldp	x22, x21, [sp, #16]
    26d8:	ldp	x29, x30, [sp], #48
    26dc:	ret
    26e0:	adrp	x0, 0 <lt__alloc_die_callback>
    26e4:	adrp	x1, 0 <lt__alloc_die_callback>
    26e8:	adrp	x3, 0 <lt__alloc_die_callback>
    26ec:	add	x0, x0, #0x0
    26f0:	add	x1, x1, #0x0
    26f4:	add	x3, x3, #0x0
    26f8:	mov	w2, #0x995                 	// #2453
    26fc:	bl	0 <__assert_fail>

0000000000002700 <tryall_dlopen>:
    2700:	stp	x29, x30, [sp, #-80]!
    2704:	adrp	x8, 0 <lt__alloc_die_callback>
    2708:	stp	x24, x23, [sp, #32]
    270c:	ldr	x24, [x8]
    2710:	str	x25, [sp, #16]
    2714:	stp	x22, x21, [sp, #48]
    2718:	stp	x20, x19, [sp, #64]
    271c:	mov	x29, sp
    2720:	mov	x19, x3
    2724:	mov	x21, x2
    2728:	mov	x22, x1
    272c:	mov	x23, x0
    2730:	bl	0 <lt__get_last_error>
    2734:	mov	x20, x0
    2738:	cbnz	x24, 2760 <tryall_dlopen+0x60>
    273c:	ldr	x25, [x23]
    2740:	cbz	x22, 2798 <tryall_dlopen+0x98>
    2744:	mov	x0, x22
    2748:	bl	0 <lt__strdup>
    274c:	str	x0, [x25, #16]
    2750:	cbnz	x0, 279c <tryall_dlopen+0x9c>
    2754:	b	2848 <tryall_dlopen+0x148>
    2758:	ldr	x24, [x24]
    275c:	cbz	x24, 273c <tryall_dlopen+0x3c>
    2760:	ldr	x0, [x24, #16]
    2764:	cmp	x0, x22
    2768:	b.eq	2780 <tryall_dlopen+0x80>  // b.none
    276c:	cbz	x22, 2758 <tryall_dlopen+0x58>
    2770:	cbz	x0, 2758 <tryall_dlopen+0x58>
    2774:	mov	x1, x22
    2778:	bl	0 <strcmp>
    277c:	cbnz	w0, 2758 <tryall_dlopen+0x58>
    2780:	ldr	w8, [x24, #32]
    2784:	mov	w0, wzr
    2788:	add	w8, w8, #0x1
    278c:	str	w8, [x24, #32]
    2790:	str	x24, [x23]
    2794:	b	2860 <tryall_dlopen+0x160>
    2798:	str	xzr, [x25, #16]
    279c:	mov	x0, xzr
    27a0:	bl	0 <lt_dlloader_next>
    27a4:	mov	x23, x0
    27a8:	mov	x24, x19
    27ac:	cbnz	x19, 27bc <tryall_dlopen+0xbc>
    27b0:	mov	x0, x23
    27b4:	bl	0 <lt_dlloader_get>
    27b8:	mov	x24, x0
    27bc:	ldr	x8, [x24, #16]
    27c0:	ldr	x0, [x24, #56]
    27c4:	mov	x1, x22
    27c8:	mov	x2, x21
    27cc:	blr	x8
    27d0:	str	x0, [x25, #56]
    27d4:	cbnz	x0, 27f0 <tryall_dlopen+0xf0>
    27d8:	cbnz	x19, 283c <tryall_dlopen+0x13c>
    27dc:	mov	x0, x23
    27e0:	bl	0 <lt_dlloader_next>
    27e4:	mov	x23, x0
    27e8:	cbnz	x0, 27a8 <tryall_dlopen+0xa8>
    27ec:	b	2834 <tryall_dlopen+0x134>
    27f0:	cbz	x21, 2830 <tryall_dlopen+0x130>
    27f4:	ldrb	w8, [x21]
    27f8:	ldrb	w9, [x25, #36]
    27fc:	bfxil	w9, w8, #1, #1
    2800:	strb	w9, [x25, #36]
    2804:	ldrb	w8, [x21]
    2808:	lsr	w8, w8, #1
    280c:	lsr	w8, w8, #1
    2810:	bfi	w9, w8, #1, #1
    2814:	strb	w9, [x25, #36]
    2818:	ldrb	w8, [x21]
    281c:	and	w9, w9, #0xfffffffb
    2820:	lsr	w8, w8, #1
    2824:	and	w8, w8, #0x4
    2828:	orr	w8, w9, w8
    282c:	strb	w8, [x25, #36]
    2830:	cbnz	x19, 2850 <tryall_dlopen+0x150>
    2834:	cbnz	x19, 2850 <tryall_dlopen+0x150>
    2838:	cbnz	x23, 2850 <tryall_dlopen+0x150>
    283c:	ldr	x0, [x25, #16]
    2840:	bl	0 <free>
    2844:	str	xzr, [x25, #16]
    2848:	mov	w0, #0x1                   	// #1
    284c:	b	2860 <tryall_dlopen+0x160>
    2850:	mov	x0, x20
    2854:	str	x24, [x25, #8]
    2858:	bl	0 <lt__set_last_error>
    285c:	mov	w0, wzr
    2860:	ldp	x20, x19, [sp, #64]
    2864:	ldp	x22, x21, [sp, #48]
    2868:	ldp	x24, x23, [sp, #32]
    286c:	ldr	x25, [sp, #16]
    2870:	ldp	x29, x30, [sp], #80
    2874:	ret

0000000000002878 <find_file_callback>:
    2878:	stp	x29, x30, [sp, #-48]!
    287c:	str	x21, [sp, #16]
    2880:	stp	x20, x19, [sp, #32]
    2884:	mov	x29, sp
    2888:	cbz	x0, 290c <find_file_callback+0x94>
    288c:	ldrb	w8, [x0]
    2890:	mov	x20, x0
    2894:	cbz	w8, 290c <find_file_callback+0x94>
    2898:	mov	x19, x1
    289c:	cbz	x1, 292c <find_file_callback+0xb4>
    28a0:	mov	x21, x2
    28a4:	cbz	x2, 294c <find_file_callback+0xd4>
    28a8:	adrp	x1, 0 <lt__alloc_die_callback>
    28ac:	add	x1, x1, #0x0
    28b0:	mov	x0, x20
    28b4:	bl	0 <fopen>
    28b8:	str	x0, [x21]
    28bc:	cbz	x0, 28fc <find_file_callback+0x84>
    28c0:	mov	w1, #0x2f                  	// #47
    28c4:	mov	x0, x20
    28c8:	bl	0 <strrchr>
    28cc:	cmp	x0, x20
    28d0:	b.ls	28d8 <find_file_callback+0x60>  // b.plast
    28d4:	strb	wzr, [x0]
    28d8:	ldr	x0, [x19]
    28dc:	bl	0 <free>
    28e0:	mov	x0, x20
    28e4:	str	xzr, [x19]
    28e8:	bl	0 <lt__strdup>
    28ec:	cmp	x0, #0x0
    28f0:	mov	w8, #0xffffffff            	// #-1
    28f4:	str	x0, [x19]
    28f8:	cneg	w0, w8, ne  // ne = any
    28fc:	ldp	x20, x19, [sp, #32]
    2900:	ldr	x21, [sp, #16]
    2904:	ldp	x29, x30, [sp], #48
    2908:	ret
    290c:	adrp	x0, 0 <lt__alloc_die_callback>
    2910:	adrp	x1, 0 <lt__alloc_die_callback>
    2914:	adrp	x3, 0 <lt__alloc_die_callback>
    2918:	add	x0, x0, #0x0
    291c:	add	x1, x1, #0x0
    2920:	add	x3, x3, #0x0
    2924:	mov	w2, #0x2f0                 	// #752
    2928:	bl	0 <__assert_fail>
    292c:	adrp	x0, 0 <lt__alloc_die_callback>
    2930:	adrp	x1, 0 <lt__alloc_die_callback>
    2934:	adrp	x3, 0 <lt__alloc_die_callback>
    2938:	add	x0, x0, #0x0
    293c:	add	x1, x1, #0x0
    2940:	add	x3, x3, #0x0
    2944:	mov	w2, #0x2f1                 	// #753
    2948:	bl	0 <__assert_fail>
    294c:	adrp	x0, 0 <lt__alloc_die_callback>
    2950:	adrp	x1, 0 <lt__alloc_die_callback>
    2954:	adrp	x3, 0 <lt__alloc_die_callback>
    2958:	add	x0, x0, #0x0
    295c:	add	x1, x1, #0x0
    2960:	add	x3, x3, #0x0
    2964:	mov	w2, #0x2f2                 	// #754
    2968:	bl	0 <__assert_fail>

000000000000296c <tryall_dlopen_module>:
    296c:	stp	x29, x30, [sp, #-80]!
    2970:	stp	x24, x23, [sp, #32]
    2974:	stp	x22, x21, [sp, #48]
    2978:	stp	x20, x19, [sp, #64]
    297c:	mov	x19, x4
    2980:	mov	x22, x3
    2984:	mov	x23, x2
    2988:	mov	x21, x1
    298c:	mov	x20, x0
    2990:	str	x25, [sp, #16]
    2994:	mov	x29, sp
    2998:	cbz	x2, 29d0 <tryall_dlopen_module+0x64>
    299c:	ldrb	w8, [x23]
    29a0:	cbz	w8, 29d0 <tryall_dlopen_module+0x64>
    29a4:	mov	x0, x23
    29a8:	bl	0 <strlen>
    29ac:	cbnz	x20, 29d8 <tryall_dlopen_module+0x6c>
    29b0:	adrp	x0, 0 <lt__alloc_die_callback>
    29b4:	adrp	x1, 0 <lt__alloc_die_callback>
    29b8:	adrp	x3, 0 <lt__alloc_die_callback>
    29bc:	add	x0, x0, #0x0
    29c0:	add	x1, x1, #0x0
    29c4:	add	x3, x3, #0x0
    29c8:	mov	w2, #0x1f6                 	// #502
    29cc:	bl	0 <__assert_fail>
    29d0:	mov	x0, xzr
    29d4:	cbz	x20, 29b0 <tryall_dlopen_module+0x44>
    29d8:	cbz	x23, 2aac <tryall_dlopen_module+0x140>
    29dc:	cbz	x22, 2acc <tryall_dlopen_module+0x160>
    29e0:	cbz	x0, 2a08 <tryall_dlopen_module+0x9c>
    29e4:	sub	x8, x0, #0x1
    29e8:	ldrb	w9, [x23, x8]
    29ec:	cmp	w9, #0x2f
    29f0:	csel	x25, x8, x0, eq  // eq = none
    29f4:	ldrb	w8, [x22]
    29f8:	cbz	w8, 2a14 <tryall_dlopen_module+0xa8>
    29fc:	mov	x0, x22
    2a00:	bl	0 <strlen>
    2a04:	b	2a18 <tryall_dlopen_module+0xac>
    2a08:	mov	x25, xzr
    2a0c:	ldrb	w8, [x22]
    2a10:	cbnz	w8, 29fc <tryall_dlopen_module+0x90>
    2a14:	mov	x0, xzr
    2a18:	add	x8, x25, x0
    2a1c:	add	x0, x8, #0x2
    2a20:	bl	0 <lt__malloc>
    2a24:	cbz	x0, 2a68 <tryall_dlopen_module+0xfc>
    2a28:	adrp	x1, 0 <lt__alloc_die_callback>
    2a2c:	add	x1, x1, #0x0
    2a30:	mov	w2, w25
    2a34:	mov	x3, x23
    2a38:	mov	x4, x22
    2a3c:	mov	x24, x0
    2a40:	bl	0 <sprintf>
    2a44:	mov	x0, x20
    2a48:	cbz	x21, 2a70 <tryall_dlopen_module+0x104>
    2a4c:	mov	x1, xzr
    2a50:	mov	x2, x21
    2a54:	mov	x3, x24
    2a58:	mov	x4, x19
    2a5c:	bl	296c <tryall_dlopen_module>
    2a60:	mov	w19, w0
    2a64:	b	2a88 <tryall_dlopen_module+0x11c>
    2a68:	mov	w19, #0x1                   	// #1
    2a6c:	b	2a90 <tryall_dlopen_module+0x124>
    2a70:	mov	x1, x24
    2a74:	mov	x2, x19
    2a78:	mov	x3, xzr
    2a7c:	bl	2700 <tryall_dlopen>
    2a80:	cmp	w0, #0x0
    2a84:	cset	w19, ne  // ne = any
    2a88:	mov	x0, x24
    2a8c:	bl	0 <free>
    2a90:	mov	w0, w19
    2a94:	ldp	x20, x19, [sp, #64]
    2a98:	ldp	x22, x21, [sp, #48]
    2a9c:	ldp	x24, x23, [sp, #32]
    2aa0:	ldr	x25, [sp, #16]
    2aa4:	ldp	x29, x30, [sp], #80
    2aa8:	ret
    2aac:	adrp	x0, 0 <lt__alloc_die_callback>
    2ab0:	adrp	x1, 0 <lt__alloc_die_callback>
    2ab4:	adrp	x3, 0 <lt__alloc_die_callback>
    2ab8:	add	x0, x0, #0x0
    2abc:	add	x1, x1, #0x0
    2ac0:	add	x3, x3, #0x0
    2ac4:	mov	w2, #0x1f7                 	// #503
    2ac8:	bl	0 <__assert_fail>
    2acc:	adrp	x0, 0 <lt__alloc_die_callback>
    2ad0:	adrp	x1, 0 <lt__alloc_die_callback>
    2ad4:	adrp	x3, 0 <lt__alloc_die_callback>
    2ad8:	add	x0, x0, #0x0
    2adc:	add	x1, x1, #0x0
    2ae0:	add	x3, x3, #0x0
    2ae4:	mov	w2, #0x1f8                 	// #504
    2ae8:	bl	0 <__assert_fail>

0000000000002aec <find_handle_callback>:
    2aec:	stp	x29, x30, [sp, #-48]!
    2af0:	stp	x20, x19, [sp, #32]
    2af4:	mov	x19, x1
    2af8:	mov	w1, #0x4                   	// #4
    2afc:	str	x21, [sp, #16]
    2b00:	mov	x29, sp
    2b04:	mov	x20, x2
    2b08:	mov	x21, x0
    2b0c:	bl	0 <access>
    2b10:	cbz	w0, 2b1c <find_handle_callback+0x30>
    2b14:	mov	w0, wzr
    2b18:	b	2b3c <find_handle_callback+0x50>
    2b1c:	mov	x0, x19
    2b20:	mov	x1, x21
    2b24:	mov	x2, x20
    2b28:	mov	x3, xzr
    2b2c:	bl	2700 <tryall_dlopen>
    2b30:	cbz	w0, 2b38 <find_handle_callback+0x4c>
    2b34:	str	xzr, [x19]
    2b38:	mov	w0, #0x1                   	// #1
    2b3c:	ldp	x20, x19, [sp, #32]
    2b40:	ldr	x21, [sp, #16]
    2b44:	ldp	x29, x30, [sp], #48
    2b48:	ret

0000000000002b4c <argzize_path>:
    2b4c:	stp	x29, x30, [sp, #-16]!
    2b50:	mov	x29, sp
    2b54:	cbz	x0, 2b9c <argzize_path+0x50>
    2b58:	mov	x3, x2
    2b5c:	mov	x2, x1
    2b60:	cbz	x1, 2bbc <argzize_path+0x70>
    2b64:	cbz	x3, 2bdc <argzize_path+0x90>
    2b68:	mov	w1, #0x3a                  	// #58
    2b6c:	bl	0 <argz_create_sep>
    2b70:	cbz	w0, 2b94 <argzize_path+0x48>
    2b74:	cmp	w0, #0xc
    2b78:	b.ne	2b84 <argzize_path+0x38>  // b.any
    2b7c:	mov	w0, #0xb                   	// #11
    2b80:	b	2b88 <argzize_path+0x3c>
    2b84:	mov	w0, wzr
    2b88:	bl	0 <lt__error_string>
    2b8c:	bl	0 <lt__set_last_error>
    2b90:	mov	w0, #0x1                   	// #1
    2b94:	ldp	x29, x30, [sp], #16
    2b98:	ret
    2b9c:	adrp	x0, 0 <lt__alloc_die_callback>
    2ba0:	adrp	x1, 0 <lt__alloc_die_callback>
    2ba4:	adrp	x3, 0 <lt__alloc_die_callback>
    2ba8:	add	x0, x0, #0x0
    2bac:	add	x1, x1, #0x0
    2bb0:	add	x3, x3, #0x0
    2bb4:	mov	w2, #0x28c                 	// #652
    2bb8:	bl	0 <__assert_fail>
    2bbc:	adrp	x0, 0 <lt__alloc_die_callback>
    2bc0:	adrp	x1, 0 <lt__alloc_die_callback>
    2bc4:	adrp	x3, 0 <lt__alloc_die_callback>
    2bc8:	add	x0, x0, #0x0
    2bcc:	add	x1, x1, #0x0
    2bd0:	add	x3, x3, #0x0
    2bd4:	mov	w2, #0x28d                 	// #653
    2bd8:	bl	0 <__assert_fail>
    2bdc:	adrp	x0, 0 <lt__alloc_die_callback>
    2be0:	adrp	x1, 0 <lt__alloc_die_callback>
    2be4:	adrp	x3, 0 <lt__alloc_die_callback>
    2be8:	add	x0, x0, #0x0
    2bec:	add	x1, x1, #0x0
    2bf0:	add	x3, x3, #0x0
    2bf4:	mov	w2, #0x28e                 	// #654
    2bf8:	bl	0 <__assert_fail>

0000000000002bfc <lt_argz_insert>:
    2bfc:	stp	x29, x30, [sp, #-48]!
    2c00:	str	x21, [sp, #16]
    2c04:	stp	x20, x19, [sp, #32]
    2c08:	mov	x19, x3
    2c0c:	mov	x20, x1
    2c10:	mov	x21, x0
    2c14:	mov	x29, sp
    2c18:	cbz	x2, 2c34 <lt_argz_insert+0x38>
    2c1c:	mov	x0, x21
    2c20:	mov	x1, x20
    2c24:	mov	x3, x19
    2c28:	bl	0 <argz_insert>
    2c2c:	cbnz	w0, 2c54 <lt_argz_insert+0x58>
    2c30:	b	2c74 <lt_argz_insert+0x78>
    2c34:	mov	x0, x19
    2c38:	bl	0 <strlen>
    2c3c:	add	x3, x0, #0x1
    2c40:	mov	x0, x21
    2c44:	mov	x1, x20
    2c48:	mov	x2, x19
    2c4c:	bl	0 <argz_append>
    2c50:	cbz	w0, 2c74 <lt_argz_insert+0x78>
    2c54:	cmp	w0, #0xc
    2c58:	b.ne	2c64 <lt_argz_insert+0x68>  // b.any
    2c5c:	mov	w0, #0xb                   	// #11
    2c60:	b	2c68 <lt_argz_insert+0x6c>
    2c64:	mov	w0, wzr
    2c68:	bl	0 <lt__error_string>
    2c6c:	bl	0 <lt__set_last_error>
    2c70:	mov	w0, #0x1                   	// #1
    2c74:	ldp	x20, x19, [sp, #32]
    2c78:	ldr	x21, [sp, #16]
    2c7c:	ldp	x29, x30, [sp], #48
    2c80:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x1, 38 <lt__slist_delete+0x38>
  10:	cbz	x0, 28 <lt__slist_delete+0x28>
  14:	mov	x19, x1
  18:	ldr	x20, [x0]
  1c:	blr	x19
  20:	mov	x0, x20
  24:	cbnz	x20, 18 <lt__slist_delete+0x18>
  28:	ldp	x20, x19, [sp, #16]
  2c:	mov	x0, xzr
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	adrp	x0, 0 <lt__slist_delete>
  3c:	adrp	x1, 0 <lt__slist_delete>
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	add	x0, x0, #0x0
  48:	add	x1, x1, #0x0
  4c:	add	x3, x3, #0x0
  50:	mov	w2, #0x38                  	// #56
  54:	bl	0 <__assert_fail>

0000000000000058 <lt__slist_remove>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	str	x21, [sp, #16]
  60:	stp	x20, x19, [sp, #32]
  64:	mov	x29, sp
  68:	cbz	x1, d8 <lt__slist_remove+0x80>
  6c:	mov	x21, x0
  70:	cbz	x0, 98 <lt__slist_remove+0x40>
  74:	ldr	x0, [x21]
  78:	cbz	x0, c8 <lt__slist_remove+0x70>
  7c:	mov	x20, x1
  80:	mov	x1, x2
  84:	mov	x19, x2
  88:	blr	x20
  8c:	cbz	x0, a0 <lt__slist_remove+0x48>
  90:	ldr	x8, [x21]
  94:	b	c0 <lt__slist_remove+0x68>
  98:	mov	x0, xzr
  9c:	b	c8 <lt__slist_remove+0x70>
  a0:	ldr	x8, [x21]
  a4:	ldr	x0, [x8]
  a8:	cbz	x0, c8 <lt__slist_remove+0x70>
  ac:	mov	x1, x19
  b0:	mov	x21, x8
  b4:	blr	x20
  b8:	ldr	x8, [x21]
  bc:	cbz	x0, a4 <lt__slist_remove+0x4c>
  c0:	ldr	x8, [x8]
  c4:	str	x8, [x21]
  c8:	ldp	x20, x19, [sp, #32]
  cc:	ldr	x21, [sp, #16]
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret
  d8:	adrp	x0, 0 <lt__slist_delete>
  dc:	adrp	x1, 0 <lt__slist_delete>
  e0:	adrp	x3, 0 <lt__slist_delete>
  e4:	add	x0, x0, #0x0
  e8:	add	x1, x1, #0x0
  ec:	add	x3, x3, #0x0
  f0:	mov	w2, #0x53                  	// #83
  f4:	bl	0 <__assert_fail>

00000000000000f8 <lt__slist_find>:
  f8:	stp	x29, x30, [sp, #-48]!
  fc:	str	x21, [sp, #16]
 100:	stp	x20, x19, [sp, #32]
 104:	mov	x29, sp
 108:	cbz	x1, 148 <lt__slist_find+0x50>
 10c:	mov	x21, x0
 110:	cbz	x0, 134 <lt__slist_find+0x3c>
 114:	mov	x19, x2
 118:	mov	x20, x1
 11c:	mov	x0, x21
 120:	mov	x1, x19
 124:	blr	x20
 128:	cbnz	x0, 138 <lt__slist_find+0x40>
 12c:	ldr	x21, [x21]
 130:	cbnz	x21, 11c <lt__slist_find+0x24>
 134:	mov	x0, xzr
 138:	ldp	x20, x19, [sp, #32]
 13c:	ldr	x21, [sp, #16]
 140:	ldp	x29, x30, [sp], #48
 144:	ret
 148:	adrp	x0, 0 <lt__slist_delete>
 14c:	adrp	x1, 0 <lt__slist_delete>
 150:	adrp	x3, 0 <lt__slist_delete>
 154:	add	x0, x0, #0x0
 158:	add	x1, x1, #0x0
 15c:	add	x3, x3, #0x0
 160:	mov	w2, #0x7a                  	// #122
 164:	bl	0 <__assert_fail>

0000000000000168 <lt__slist_concat>:
 168:	cbz	x0, 184 <lt__slist_concat+0x1c>
 16c:	mov	x9, x0
 170:	mov	x8, x9
 174:	ldr	x9, [x9]
 178:	cbnz	x9, 170 <lt__slist_concat+0x8>
 17c:	str	x1, [x8]
 180:	ret
 184:	mov	x0, x1
 188:	ret

000000000000018c <lt__slist_cons>:
 18c:	stp	x29, x30, [sp, #-16]!
 190:	mov	x29, sp
 194:	cbz	x0, 1ac <lt__slist_cons+0x20>
 198:	ldr	x8, [x0]
 19c:	cbnz	x8, 1b8 <lt__slist_cons+0x2c>
 1a0:	str	x1, [x0]
 1a4:	ldp	x29, x30, [sp], #16
 1a8:	ret
 1ac:	mov	x0, x1
 1b0:	ldp	x29, x30, [sp], #16
 1b4:	ret
 1b8:	adrp	x0, 0 <lt__slist_delete>
 1bc:	adrp	x1, 0 <lt__slist_delete>
 1c0:	adrp	x3, 0 <lt__slist_delete>
 1c4:	add	x0, x0, #0x0
 1c8:	add	x1, x1, #0x0
 1cc:	add	x3, x3, #0x0
 1d0:	mov	w2, #0xaf                  	// #175
 1d4:	bl	0 <__assert_fail>

00000000000001d8 <lt__slist_tail>:
 1d8:	cbz	x0, 1e0 <lt__slist_tail+0x8>
 1dc:	ldr	x0, [x0]
 1e0:	ret

00000000000001e4 <lt__slist_nth>:
 1e4:	cbz	x0, 204 <lt__slist_nth+0x20>
 1e8:	cmp	x1, #0x2
 1ec:	b.cc	204 <lt__slist_nth+0x20>  // b.lo, b.ul, b.last
 1f0:	sub	x8, x1, #0x1
 1f4:	ldr	x0, [x0]
 1f8:	subs	x8, x8, #0x1
 1fc:	cbz	x0, 204 <lt__slist_nth+0x20>
 200:	b.hi	1f4 <lt__slist_nth+0x10>  // b.pmore
 204:	ret

0000000000000208 <lt__slist_length>:
 208:	mov	x8, xzr
 20c:	cbz	x0, 21c <lt__slist_length+0x14>
 210:	ldr	x0, [x0]
 214:	add	x8, x8, #0x1
 218:	cbnz	x0, 210 <lt__slist_length+0x8>
 21c:	mov	x0, x8
 220:	ret

0000000000000224 <lt__slist_reverse>:
 224:	cbz	x0, 248 <lt__slist_reverse+0x24>
 228:	mov	x9, xzr
 22c:	mov	x8, x0
 230:	ldr	x0, [x0]
 234:	str	x9, [x8]
 238:	mov	x9, x8
 23c:	cbnz	x0, 22c <lt__slist_reverse+0x8>
 240:	mov	x0, x8
 244:	ret
 248:	mov	x0, xzr
 24c:	ret

0000000000000250 <lt__slist_foreach>:
 250:	stp	x29, x30, [sp, #-48]!
 254:	str	x21, [sp, #16]
 258:	stp	x20, x19, [sp, #32]
 25c:	mov	x29, sp
 260:	cbz	x1, 2a4 <lt__slist_foreach+0x54>
 264:	mov	x19, x2
 268:	mov	x20, x1
 26c:	cbz	x0, 28c <lt__slist_foreach+0x3c>
 270:	ldr	x21, [x0]
 274:	mov	x1, x19
 278:	blr	x20
 27c:	mov	x8, x0
 280:	mov	x0, x21
 284:	cbz	x8, 26c <lt__slist_foreach+0x1c>
 288:	b	290 <lt__slist_foreach+0x40>
 28c:	mov	x8, xzr
 290:	ldp	x20, x19, [sp, #32]
 294:	ldr	x21, [sp, #16]
 298:	mov	x0, x8
 29c:	ldp	x29, x30, [sp], #48
 2a0:	ret
 2a4:	adrp	x0, 0 <lt__slist_delete>
 2a8:	adrp	x1, 0 <lt__slist_delete>
 2ac:	adrp	x3, 0 <lt__slist_delete>
 2b0:	add	x0, x0, #0x0
 2b4:	add	x1, x1, #0x0
 2b8:	add	x3, x3, #0x0
 2bc:	mov	w2, #0xf6                  	// #246
 2c0:	bl	0 <__assert_fail>

00000000000002c4 <lt__slist_sort>:
 2c4:	stp	x29, x30, [sp, #-64]!
 2c8:	str	x23, [sp, #16]
 2cc:	stp	x22, x21, [sp, #32]
 2d0:	stp	x20, x19, [sp, #48]
 2d4:	mov	x29, sp
 2d8:	cbz	x0, 3c4 <lt__slist_sort+0x100>
 2dc:	ldr	x22, [x0]
 2e0:	cbz	x22, 3c4 <lt__slist_sort+0x100>
 2e4:	ldr	x9, [x22]
 2e8:	mov	x19, x2
 2ec:	mov	x20, x1
 2f0:	mov	x8, x0
 2f4:	cbz	x9, 314 <lt__slist_sort+0x50>
 2f8:	mov	x8, x0
 2fc:	ldr	x9, [x9]
 300:	cbz	x9, 310 <lt__slist_sort+0x4c>
 304:	ldr	x9, [x9]
 308:	ldr	x8, [x8]
 30c:	cbnz	x9, 2fc <lt__slist_sort+0x38>
 310:	ldr	x22, [x8]
 314:	mov	x1, x20
 318:	mov	x2, x19
 31c:	str	xzr, [x8]
 320:	bl	2c4 <lt__slist_sort>
 324:	mov	x21, x0
 328:	mov	x0, x22
 32c:	mov	x1, x20
 330:	mov	x2, x19
 334:	bl	2c4 <lt__slist_sort>
 338:	cmp	x21, #0x0
 33c:	mov	x22, x0
 340:	add	x23, x29, #0x18
 344:	cset	w10, ne  // ne = any
 348:	cbz	x21, 3ac <lt__slist_sort+0xe8>
 34c:	cbz	x22, 3ac <lt__slist_sort+0xe8>
 350:	add	x23, x29, #0x18
 354:	mov	x0, x21
 358:	mov	x1, x22
 35c:	mov	x2, x19
 360:	blr	x20
 364:	cmp	w0, #0x0
 368:	b.le	380 <lt__slist_sort+0xbc>
 36c:	str	x22, [x23]
 370:	ldr	x8, [x22]
 374:	mov	x9, x21
 378:	mov	x23, x22
 37c:	b	390 <lt__slist_sort+0xcc>
 380:	str	x21, [x23]
 384:	ldr	x9, [x21]
 388:	mov	x8, x22
 38c:	mov	x23, x21
 390:	cmp	x9, #0x0
 394:	cset	w10, ne  // ne = any
 398:	cbz	x8, 3b4 <lt__slist_sort+0xf0>
 39c:	mov	x21, x9
 3a0:	mov	x22, x8
 3a4:	cbnz	x9, 354 <lt__slist_sort+0x90>
 3a8:	b	3b4 <lt__slist_sort+0xf0>
 3ac:	mov	x8, x22
 3b0:	mov	x9, x21
 3b4:	cmp	w10, #0x0
 3b8:	csel	x8, x9, x8, ne  // ne = any
 3bc:	str	x8, [x23]
 3c0:	ldr	x0, [x29, #24]
 3c4:	ldp	x20, x19, [sp, #48]
 3c8:	ldp	x22, x21, [sp, #32]
 3cc:	ldr	x23, [sp, #16]
 3d0:	ldp	x29, x30, [sp], #64
 3d4:	ret

00000000000003d8 <lt__slist_box>:
 3d8:	stp	x29, x30, [sp, #-32]!
 3dc:	str	x19, [sp, #16]
 3e0:	mov	x19, x0
 3e4:	mov	w0, #0x10                  	// #16
 3e8:	mov	x29, sp
 3ec:	bl	0 <malloc>
 3f0:	cbz	x0, 3f8 <lt__slist_box+0x20>
 3f4:	stp	xzr, x19, [x0]
 3f8:	ldr	x19, [sp, #16]
 3fc:	ldp	x29, x30, [sp], #32
 400:	ret

0000000000000404 <lt__slist_unbox>:
 404:	stp	x29, x30, [sp, #-32]!
 408:	str	x19, [sp, #16]
 40c:	mov	x29, sp
 410:	cbz	x0, 420 <lt__slist_unbox+0x1c>
 414:	ldr	x19, [x0, #8]
 418:	bl	0 <free>
 41c:	b	424 <lt__slist_unbox+0x20>
 420:	mov	x19, xzr
 424:	mov	x0, x19
 428:	ldr	x19, [sp, #16]
 42c:	ldp	x29, x30, [sp], #32
 430:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 84 <lt_strlcat+0x84>
  14:	mov	x19, x1
  18:	cbz	x1, a4 <lt_strlcat+0xa4>
  1c:	mov	x21, x2
  20:	cbz	x2, c4 <lt_strlcat+0xc4>
  24:	mov	x20, x0
  28:	bl	0 <strlen>
  2c:	sub	x8, x21, #0x1
  30:	cmp	x0, x8
  34:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  38:	ldrb	w9, [x19]
  3c:	cbz	w9, 58 <lt_strlcat+0x58>
  40:	strb	w9, [x20, x0]
  44:	ldrb	w9, [x19, #1]!
  48:	add	x0, x0, #0x1
  4c:	cmp	x0, x8
  50:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  54:	cbnz	w9, 40 <lt_strlcat+0x40>
  58:	strb	wzr, [x20, x0]
  5c:	ldrb	w8, [x19]
  60:	cbz	w8, 74 <lt_strlcat+0x74>
  64:	add	x8, x19, #0x1
  68:	ldrb	w9, [x8], #1
  6c:	add	x0, x0, #0x1
  70:	cbnz	w9, 68 <lt_strlcat+0x68>
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	adrp	x0, 0 <lt_strlcat>
  88:	adrp	x1, 0 <lt_strlcat>
  8c:	adrp	x3, 0 <lt_strlcat>
  90:	add	x0, x0, #0x0
  94:	add	x1, x1, #0x0
  98:	add	x3, x3, #0x0
  9c:	mov	w2, #0x39                  	// #57
  a0:	bl	0 <__assert_fail>
  a4:	adrp	x0, 0 <lt_strlcat>
  a8:	adrp	x1, 0 <lt_strlcat>
  ac:	adrp	x3, 0 <lt_strlcat>
  b0:	add	x0, x0, #0x0
  b4:	add	x1, x1, #0x0
  b8:	add	x3, x3, #0x0
  bc:	mov	w2, #0x3a                  	// #58
  c0:	bl	0 <__assert_fail>
  c4:	adrp	x0, 0 <lt_strlcat>
  c8:	adrp	x1, 0 <lt_strlcat>
  cc:	adrp	x3, 0 <lt_strlcat>
  d0:	add	x0, x0, #0x0
  d4:	add	x1, x1, #0x0
  d8:	add	x3, x3, #0x0
  dc:	mov	w2, #0x3b                  	// #59
  e0:	bl	0 <__assert_fail>

00000000000000e4 <lt_strlcpy>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	cbz	x0, 15c <lt_strlcpy+0x78>
  f0:	cbz	x1, 17c <lt_strlcpy+0x98>
  f4:	cbz	x2, 19c <lt_strlcpy+0xb8>
  f8:	mov	x8, x0
  fc:	subs	x9, x2, #0x1
 100:	mov	x0, xzr
 104:	b.eq	138 <lt_strlcpy+0x54>  // b.none
 108:	ldrb	w10, [x1]
 10c:	cbz	w10, 138 <lt_strlcpy+0x54>
 110:	mov	x11, xzr
 114:	add	x0, x11, #0x1
 118:	cmp	x0, x9
 11c:	strb	w10, [x8, x11]
 120:	b.cs	134 <lt_strlcpy+0x50>  // b.hs, b.nlast
 124:	add	x10, x1, x11
 128:	ldrb	w10, [x10, #1]
 12c:	mov	x11, x0
 130:	cbnz	w10, 114 <lt_strlcpy+0x30>
 134:	add	x1, x1, x0
 138:	strb	wzr, [x8, x0]
 13c:	ldrb	w8, [x1]
 140:	cbz	w8, 154 <lt_strlcpy+0x70>
 144:	add	x8, x1, #0x1
 148:	ldrb	w9, [x8], #1
 14c:	add	x0, x0, #0x1
 150:	cbnz	w9, 148 <lt_strlcpy+0x64>
 154:	ldp	x29, x30, [sp], #16
 158:	ret
 15c:	adrp	x0, 0 <lt_strlcat>
 160:	adrp	x1, 0 <lt_strlcat>
 164:	adrp	x3, 0 <lt_strlcat>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	add	x3, x3, #0x0
 174:	mov	w2, #0x69                  	// #105
 178:	bl	0 <__assert_fail>
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	adrp	x1, 0 <lt_strlcat>
 184:	adrp	x3, 0 <lt_strlcat>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	add	x3, x3, #0x0
 194:	mov	w2, #0x6a                  	// #106
 198:	bl	0 <__assert_fail>
 19c:	adrp	x0, 0 <lt_strlcat>
 1a0:	adrp	x1, 0 <lt_strlcat>
 1a4:	adrp	x3, 0 <lt_strlcat>
 1a8:	add	x0, x0, #0x0
 1ac:	add	x1, x1, #0x0
 1b0:	add	x3, x3, #0x0
 1b4:	mov	w2, #0x6b                  	// #107
 1b8:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <dlopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <dlopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 94 <dlopen_LTX_get_vtable+0x94>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 58 <dlopen_LTX_get_vtable+0x58>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	94 <dlopen_LTX_get_vtable+0x94>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	b	94 <dlopen_LTX_get_vtable+0x94>
  58:	adrp	x9, 0 <dlopen_LTX_get_vtable>
  5c:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  60:	adrp	x11, 0 <dlopen_LTX_get_vtable>
  64:	adrp	x12, 0 <dlopen_LTX_get_vtable>
  68:	adrp	x13, 0 <dlopen_LTX_get_vtable>
  6c:	add	x9, x9, #0x0
  70:	add	x10, x10, #0x0
  74:	add	x11, x11, #0x0
  78:	add	x12, x12, #0x0
  7c:	add	x13, x13, #0x0
  80:	str	x9, [x8]
  84:	stp	x10, x11, [x8, #16]
  88:	str	x12, [x8, #32]
  8c:	stp	x13, x19, [x8, #48]
  90:	str	wzr, [x8, #64]
  94:	ldp	x20, x19, [sp, #16]
  98:	mov	x0, x8
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret

00000000000000a4 <vm_open>:
  a4:	stp	x29, x30, [sp, #-32]!
  a8:	mov	x0, x1
  ac:	str	x19, [sp, #16]
  b0:	mov	x29, sp
  b4:	cbz	x2, cc <vm_open+0x28>
  b8:	ldrb	w8, [x2]
  bc:	tst	w8, #0x4
  c0:	mov	w8, #0x101                 	// #257
  c4:	csinc	w1, w8, wzr, ne  // ne = any
  c8:	b	d0 <vm_open+0x2c>
  cc:	mov	w1, #0x1                   	// #1
  d0:	bl	0 <dlopen>
  d4:	mov	x19, x0
  d8:	cbnz	x0, e4 <vm_open+0x40>
  dc:	bl	0 <dlerror>
  e0:	bl	0 <lt__set_last_error>
  e4:	mov	x0, x19
  e8:	ldr	x19, [sp, #16]
  ec:	ldp	x29, x30, [sp], #32
  f0:	ret

00000000000000f4 <vm_close>:
  f4:	stp	x29, x30, [sp, #-16]!
  f8:	mov	x0, x1
  fc:	mov	x29, sp
 100:	bl	0 <dlclose>
 104:	cbz	w0, 114 <vm_close+0x20>
 108:	bl	0 <dlerror>
 10c:	bl	0 <lt__set_last_error>
 110:	mov	w0, #0x1                   	// #1
 114:	ldp	x29, x30, [sp], #16
 118:	ret

000000000000011c <vm_sym>:
 11c:	stp	x29, x30, [sp, #-32]!
 120:	mov	x0, x1
 124:	mov	x1, x2
 128:	str	x19, [sp, #16]
 12c:	mov	x29, sp
 130:	bl	0 <dlsym>
 134:	mov	x19, x0
 138:	cbnz	x0, 144 <vm_sym+0x28>
 13c:	bl	0 <dlerror>
 140:	bl	0 <lt__set_last_error>
 144:	mov	x0, x19
 148:	ldr	x19, [sp, #16]
 14c:	ldp	x29, x30, [sp], #32
 150:	ret

0000000000000154 <vl_exit>:
 154:	adrp	x8, 0 <dlopen_LTX_get_vtable>
 158:	mov	w0, wzr
 15c:	str	xzr, [x8]
 160:	ret
