In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_clang_-Os:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	mov	w0, #0x10                  	// #16
  10:	mov	x29, sp
  14:	bl	0 <emalloc>
  18:	adrp	x8, 0 <suite_create>
  1c:	add	x8, x8, #0x0
  20:	cmp	x19, #0x0
  24:	csel	x8, x8, x19, eq  // eq = none
  28:	mov	x20, x0
  2c:	str	x8, [x0]
  30:	bl	0 <check_list_create>
  34:	str	x0, [x20, #8]
  38:	mov	x0, x20
  3c:	ldp	x20, x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <suite_tcase>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	stp	x20, x19, [sp, #16]
  50:	mov	x29, sp
  54:	cbz	x0, a4 <suite_tcase+0x5c>
  58:	ldr	x20, [x0, #8]
  5c:	mov	x19, x1
  60:	mov	x0, x20
  64:	bl	0 <check_list_front>
  68:	mov	x0, x20
  6c:	bl	0 <check_list_at_end>
  70:	cbnz	w0, 98 <suite_tcase+0x50>
  74:	mov	x0, x20
  78:	bl	0 <check_list_val>
  7c:	ldr	x1, [x0]
  80:	mov	x0, x19
  84:	bl	0 <strcmp>
  88:	cbz	w0, a0 <suite_tcase+0x58>
  8c:	mov	x0, x20
  90:	bl	0 <check_list_advance>
  94:	b	68 <suite_tcase+0x20>
  98:	mov	w0, wzr
  9c:	b	a4 <suite_tcase+0x5c>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x20, x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret

00000000000000b0 <tcase_create>:
  b0:	str	d8, [sp, #-48]!
  b4:	stp	x20, x19, [sp, #32]
  b8:	mov	x20, x0
  bc:	mov	w0, #0x48                  	// #72
  c0:	stp	x29, x30, [sp, #16]
  c4:	mov	x29, sp
  c8:	bl	0 <emalloc>
  cc:	adrp	x8, 0 <suite_create>
  d0:	add	x8, x8, #0x0
  d4:	cmp	x20, #0x0
  d8:	csel	x8, x8, x20, eq  // eq = none
  dc:	mov	x19, x0
  e0:	str	x8, [x0]
  e4:	adrp	x0, 0 <suite_create>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <getenv>
  f0:	cbz	x0, 130 <tcase_create+0x80>
  f4:	add	x1, x29, #0x8
  f8:	mov	x20, x0
  fc:	str	xzr, [x29, #8]
 100:	bl	0 <strtod>
 104:	fcmp	d0, #0.0
 108:	fmov	d8, #4.000000000000000000e+00
 10c:	b.lt	134 <tcase_create+0x84>  // b.tstop
 110:	ldr	x8, [x29, #8]
 114:	cmp	x8, x20
 118:	b.eq	134 <tcase_create+0x84>  // b.none
 11c:	ldrb	w8, [x8]
 120:	fmov	d1, #4.000000000000000000e+00
 124:	cmp	w8, #0x0
 128:	fcsel	d8, d0, d1, eq  // eq = none
 12c:	b	134 <tcase_create+0x84>
 130:	fmov	d8, #4.000000000000000000e+00
 134:	adrp	x0, 0 <suite_create>
 138:	add	x0, x0, #0x0
 13c:	bl	0 <getenv>
 140:	cbz	x0, 178 <tcase_create+0xc8>
 144:	add	x1, x29, #0x8
 148:	mov	x20, x0
 14c:	str	xzr, [x29, #8]
 150:	bl	0 <strtod>
 154:	fcmp	d0, #0.0
 158:	b.lt	178 <tcase_create+0xc8>  // b.tstop
 15c:	ldr	x8, [x29, #8]
 160:	cmp	x8, x20
 164:	b.eq	178 <tcase_create+0xc8>  // b.none
 168:	ldrb	w8, [x8]
 16c:	fmul	d0, d8, d0
 170:	cmp	w8, #0x0
 174:	fcsel	d8, d0, d8, eq  // eq = none
 178:	adrp	x8, 0 <suite_create>
 17c:	ldr	d0, [x8]
 180:	frintm	d1, d8
 184:	fsub	d1, d8, d1
 188:	fcvtms	x8, d8
 18c:	fmul	d0, d1, d0
 190:	fcvtzs	x9, d0
 194:	stp	x8, x9, [x19, #8]
 198:	bl	0 <check_list_create>
 19c:	str	x0, [x19, #24]
 1a0:	bl	0 <check_list_create>
 1a4:	str	x0, [x19, #32]
 1a8:	bl	0 <check_list_create>
 1ac:	str	x0, [x19, #48]
 1b0:	bl	0 <check_list_create>
 1b4:	str	x0, [x19, #40]
 1b8:	bl	0 <check_list_create>
 1bc:	str	x0, [x19, #56]
 1c0:	bl	0 <check_list_create>
 1c4:	str	x0, [x19, #64]
 1c8:	mov	x0, x19
 1cc:	ldp	x20, x19, [sp, #32]
 1d0:	ldp	x29, x30, [sp, #16]
 1d4:	ldr	d8, [sp], #48
 1d8:	ret

00000000000001dc <tag_string_to_list>:
 1dc:	stp	x29, x30, [sp, #-48]!
 1e0:	str	x21, [sp, #16]
 1e4:	stp	x20, x19, [sp, #32]
 1e8:	mov	x29, sp
 1ec:	mov	x20, x0
 1f0:	bl	0 <check_list_create>
 1f4:	mov	x19, x0
 1f8:	cbz	x20, 248 <tag_string_to_list+0x6c>
 1fc:	mov	x0, x20
 200:	bl	0 <strdup>
 204:	adrp	x1, 0 <suite_create>
 208:	add	x1, x1, #0x0
 20c:	mov	x20, x0
 210:	bl	0 <strtok>
 214:	cbz	x0, 240 <tag_string_to_list+0x64>
 218:	adrp	x21, 0 <suite_create>
 21c:	add	x21, x21, #0x0
 220:	bl	0 <strdup>
 224:	mov	x1, x0
 228:	mov	x0, x19
 22c:	bl	0 <check_list_add_end>
 230:	mov	x0, xzr
 234:	mov	x1, x21
 238:	bl	0 <strtok>
 23c:	cbnz	x0, 220 <tag_string_to_list+0x44>
 240:	mov	x0, x20
 244:	bl	0 <free>
 248:	mov	x0, x19
 24c:	ldp	x20, x19, [sp, #32]
 250:	ldr	x21, [sp, #16]
 254:	ldp	x29, x30, [sp], #48
 258:	ret

000000000000025c <tcase_set_tags>:
 25c:	stp	x29, x30, [sp, #-32]!
 260:	stp	x20, x19, [sp, #16]
 264:	mov	x19, x0
 268:	ldr	x0, [x0, #64]
 26c:	mov	x20, x1
 270:	mov	x29, sp
 274:	cbz	x0, 28c <tcase_set_tags+0x30>
 278:	adrp	x1, 0 <free>
 27c:	add	x1, x1, #0x0
 280:	bl	0 <check_list_apply>
 284:	ldr	x0, [x19, #64]
 288:	bl	0 <check_list_free>
 28c:	mov	x0, x20
 290:	bl	1dc <tag_string_to_list>
 294:	str	x0, [x19, #64]
 298:	ldp	x20, x19, [sp, #16]
 29c:	ldp	x29, x30, [sp], #32
 2a0:	ret

00000000000002a4 <tcase_matching_tag>:
 2a4:	stp	x29, x30, [sp, #-48]!
 2a8:	str	x21, [sp, #16]
 2ac:	stp	x20, x19, [sp, #32]
 2b0:	mov	x29, sp
 2b4:	cbz	x1, 324 <tcase_matching_tag+0x80>
 2b8:	mov	x20, x0
 2bc:	mov	x0, x1
 2c0:	mov	x19, x1
 2c4:	bl	0 <check_list_front>
 2c8:	mov	x0, x19
 2cc:	bl	0 <check_list_at_end>
 2d0:	cbnz	w0, 324 <tcase_matching_tag+0x80>
 2d4:	ldr	x0, [x20, #64]
 2d8:	bl	0 <check_list_front>
 2dc:	ldr	x0, [x20, #64]
 2e0:	bl	0 <check_list_at_end>
 2e4:	cbnz	w0, 318 <tcase_matching_tag+0x74>
 2e8:	ldr	x0, [x20, #64]
 2ec:	bl	0 <check_list_val>
 2f0:	mov	x21, x0
 2f4:	mov	x0, x19
 2f8:	bl	0 <check_list_val>
 2fc:	mov	x1, x0
 300:	mov	x0, x21
 304:	bl	0 <strcmp>
 308:	cbz	w0, 32c <tcase_matching_tag+0x88>
 30c:	ldr	x0, [x20, #64]
 310:	bl	0 <check_list_advance>
 314:	b	2dc <tcase_matching_tag+0x38>
 318:	mov	x0, x19
 31c:	bl	0 <check_list_advance>
 320:	b	2c8 <tcase_matching_tag+0x24>
 324:	mov	w0, wzr
 328:	b	330 <tcase_matching_tag+0x8c>
 32c:	mov	w0, #0x1                   	// #1
 330:	ldp	x20, x19, [sp, #32]
 334:	ldr	x21, [sp, #16]
 338:	ldp	x29, x30, [sp], #48
 33c:	ret

0000000000000340 <suite_add_tcase>:
 340:	stp	x29, x30, [sp, #-32]!
 344:	stp	x20, x19, [sp, #16]
 348:	mov	x29, sp
 34c:	cbz	x0, 36c <suite_add_tcase+0x2c>
 350:	mov	x19, x1
 354:	cbz	x1, 36c <suite_add_tcase+0x2c>
 358:	mov	x20, x0
 35c:	ldr	x0, [x0, #8]
 360:	mov	x1, x19
 364:	bl	0 <check_list_contains>
 368:	cbz	w0, 378 <suite_add_tcase+0x38>
 36c:	ldp	x20, x19, [sp, #16]
 370:	ldp	x29, x30, [sp], #32
 374:	ret
 378:	ldr	x0, [x20, #8]
 37c:	mov	x1, x19
 380:	ldp	x20, x19, [sp, #16]
 384:	ldp	x29, x30, [sp], #32
 388:	b	0 <check_list_add_end>

000000000000038c <_tcase_add_test>:
 38c:	stp	x29, x30, [sp, #-64]!
 390:	stp	x24, x23, [sp, #16]
 394:	stp	x22, x21, [sp, #32]
 398:	stp	x20, x19, [sp, #48]
 39c:	mov	x29, sp
 3a0:	cbz	x0, 3f4 <_tcase_add_test+0x68>
 3a4:	mov	x24, x1
 3a8:	cbz	x1, 3f4 <_tcase_add_test+0x68>
 3ac:	mov	x21, x0
 3b0:	mov	w0, #0x18                  	// #24
 3b4:	mov	w20, w5
 3b8:	mov	w23, w4
 3bc:	mov	w19, w3
 3c0:	mov	w22, w2
 3c4:	bl	0 <emalloc>
 3c8:	str	x24, [x0]
 3cc:	stp	w23, w20, [x0, #8]
 3d0:	str	w22, [x0, #16]
 3d4:	strb	w19, [x0, #20]
 3d8:	mov	x1, x0
 3dc:	ldr	x0, [x21, #24]
 3e0:	ldp	x20, x19, [sp, #48]
 3e4:	ldp	x22, x21, [sp, #32]
 3e8:	ldp	x24, x23, [sp, #16]
 3ec:	ldp	x29, x30, [sp], #64
 3f0:	b	0 <check_list_add_end>
 3f4:	ldp	x20, x19, [sp, #48]
 3f8:	ldp	x22, x21, [sp, #32]
 3fc:	ldp	x24, x23, [sp, #16]
 400:	ldp	x29, x30, [sp], #64
 404:	ret

0000000000000408 <tcase_add_unchecked_fixture>:
 408:	mov	w3, wzr
 40c:	b	410 <tcase_add_fixture>

0000000000000410 <tcase_add_fixture>:
 410:	stp	x29, x30, [sp, #-64]!
 414:	stp	x22, x21, [sp, #32]
 418:	stp	x20, x19, [sp, #48]
 41c:	mov	w20, w3
 420:	mov	x19, x2
 424:	mov	x21, x0
 428:	str	x23, [sp, #16]
 42c:	mov	x29, sp
 430:	cbz	x1, 478 <tcase_add_fixture+0x68>
 434:	mov	x22, x1
 438:	cbz	w20, 458 <tcase_add_fixture+0x48>
 43c:	ldr	x23, [x21, #48]
 440:	mov	w0, #0x10                  	// #16
 444:	bl	0 <emalloc>
 448:	mov	x1, x0
 44c:	str	x22, [x0, #8]
 450:	str	w20, [x0]
 454:	b	470 <tcase_add_fixture+0x60>
 458:	ldr	x23, [x21, #32]
 45c:	mov	w0, #0x10                  	// #16
 460:	bl	0 <emalloc>
 464:	mov	x1, x0
 468:	str	x22, [x0, #8]
 46c:	str	wzr, [x0]
 470:	mov	x0, x23
 474:	bl	0 <check_list_add_end>
 478:	cbz	x19, 4a0 <tcase_add_fixture+0x90>
 47c:	cbz	w20, 4b4 <tcase_add_fixture+0xa4>
 480:	ldr	x21, [x21, #56]
 484:	mov	w0, #0x10                  	// #16
 488:	bl	0 <emalloc>
 48c:	mov	x1, x0
 490:	str	x19, [x0, #8]
 494:	str	w20, [x0]
 498:	mov	x0, x21
 49c:	b	4d0 <tcase_add_fixture+0xc0>
 4a0:	ldp	x20, x19, [sp, #48]
 4a4:	ldp	x22, x21, [sp, #32]
 4a8:	ldr	x23, [sp, #16]
 4ac:	ldp	x29, x30, [sp], #64
 4b0:	ret
 4b4:	ldr	x20, [x21, #40]
 4b8:	mov	w0, #0x10                  	// #16
 4bc:	bl	0 <emalloc>
 4c0:	mov	x1, x0
 4c4:	str	x19, [x0, #8]
 4c8:	str	wzr, [x0]
 4cc:	mov	x0, x20
 4d0:	ldp	x20, x19, [sp, #48]
 4d4:	ldp	x22, x21, [sp, #32]
 4d8:	ldr	x23, [sp, #16]
 4dc:	ldp	x29, x30, [sp], #64
 4e0:	b	0 <check_list_add_front>

00000000000004e4 <tcase_add_checked_fixture>:
 4e4:	mov	w3, #0x1                   	// #1
 4e8:	b	410 <tcase_add_fixture>

00000000000004ec <tcase_set_timeout>:
 4ec:	fcmp	d0, #0.0
 4f0:	b.lt	57c <tcase_set_timeout+0x90>  // b.tstop
 4f4:	str	d8, [sp, #-48]!
 4f8:	stp	x20, x19, [sp, #32]
 4fc:	mov	x19, x0
 500:	adrp	x0, 0 <suite_create>
 504:	add	x0, x0, #0x0
 508:	stp	x29, x30, [sp, #16]
 50c:	mov	x29, sp
 510:	mov	v8.16b, v0.16b
 514:	bl	0 <getenv>
 518:	cbz	x0, 550 <tcase_set_timeout+0x64>
 51c:	add	x1, x29, #0x8
 520:	mov	x20, x0
 524:	str	xzr, [x29, #8]
 528:	bl	0 <strtod>
 52c:	fcmp	d0, #0.0
 530:	b.lt	550 <tcase_set_timeout+0x64>  // b.tstop
 534:	ldr	x8, [x29, #8]
 538:	cmp	x8, x20
 53c:	b.eq	550 <tcase_set_timeout+0x64>  // b.none
 540:	ldrb	w8, [x8]
 544:	fmul	d0, d0, d8
 548:	cmp	w8, #0x0
 54c:	fcsel	d8, d0, d8, eq  // eq = none
 550:	adrp	x8, 0 <suite_create>
 554:	ldr	d0, [x8]
 558:	frintm	d1, d8
 55c:	fsub	d1, d8, d1
 560:	fcvtms	x8, d8
 564:	fmul	d0, d1, d0
 568:	fcvtzs	x9, d0
 56c:	stp	x8, x9, [x19, #8]
 570:	ldp	x20, x19, [sp, #32]
 574:	ldp	x29, x30, [sp, #16]
 578:	ldr	d8, [sp], #48
 57c:	ret

0000000000000580 <tcase_fn_start>:
 580:	stp	x29, x30, [sp, #-48]!
 584:	str	x21, [sp, #16]
 588:	mov	x21, x0
 58c:	mov	w0, #0x2                   	// #2
 590:	stp	x20, x19, [sp, #32]
 594:	mov	x29, sp
 598:	mov	w19, w2
 59c:	mov	x20, x1
 5a0:	bl	0 <send_ctx_info>
 5a4:	mov	x0, x20
 5a8:	mov	w1, w19
 5ac:	bl	0 <send_loc_info>
 5b0:	adrp	x8, 8 <suite_create+0x8>
 5b4:	str	x21, [x8]
 5b8:	ldp	x20, x19, [sp, #32]
 5bc:	ldr	x21, [sp, #16]
 5c0:	ldp	x29, x30, [sp], #48
 5c4:	ret

00000000000005c8 <tcase_name>:
 5c8:	adrp	x8, 8 <suite_create+0x8>
 5cc:	ldr	x0, [x8]
 5d0:	ret

00000000000005d4 <_mark_point>:
 5d4:	b	0 <send_loc_info>

00000000000005d8 <_ck_assert_failed>:
 5d8:	stp	x29, x30, [sp, #-32]!
 5dc:	stp	x28, x19, [sp, #16]
 5e0:	mov	x29, sp
 5e4:	sub	sp, sp, #0x2, lsl #12
 5e8:	sub	sp, sp, #0xf0
 5ec:	mov	x19, x2
 5f0:	stp	x3, x4, [sp, #136]
 5f4:	stp	x5, x6, [sp, #152]
 5f8:	str	x7, [sp, #168]
 5fc:	stp	q1, q2, [sp, #16]
 600:	stp	q3, q4, [sp, #48]
 604:	str	q0, [sp]
 608:	stp	q5, q6, [sp, #80]
 60c:	str	q7, [sp, #112]
 610:	bl	0 <send_loc_info>
 614:	mov	x9, #0xffffffffffffffd8    	// #-40
 618:	mov	x10, sp
 61c:	add	x11, sp, #0x88
 620:	movk	x9, #0xff80, lsl #32
 624:	add	x12, x29, #0x20
 628:	mov	x8, #0xffffffffffffffd8    	// #-40
 62c:	add	x10, x10, #0x80
 630:	add	x11, x11, #0x28
 634:	stp	x10, x9, [x29, #-16]
 638:	stp	x12, x11, [x29, #-32]
 63c:	tbz	w8, #31, 65c <_ck_assert_failed+0x84>
 640:	add	w9, w8, #0x8
 644:	cmn	w8, #0x8
 648:	stur	w9, [x29, #-8]
 64c:	b.gt	65c <_ck_assert_failed+0x84>
 650:	ldur	x9, [x29, #-24]
 654:	add	x8, x9, x8
 658:	b	668 <_ck_assert_failed+0x90>
 65c:	ldur	x8, [x29, #-32]
 660:	add	x9, x8, #0x8
 664:	stur	x9, [x29, #-32]
 668:	ldr	x2, [x8]
 66c:	cbz	x2, 68c <_ck_assert_failed+0xb4>
 670:	ldp	q0, q1, [x29, #-32]
 674:	add	x0, sp, #0xd0
 678:	add	x3, sp, #0xb0
 67c:	mov	w1, #0x2000                	// #8192
 680:	add	x19, sp, #0xd0
 684:	stp	q0, q1, [sp, #176]
 688:	bl	0 <vsnprintf>
 68c:	mov	x0, x19
 690:	bl	0 <send_failure_info>
 694:	adrp	x8, 0 <suite_create>
 698:	ldr	w8, [x8]
 69c:	cmp	w8, #0x1
 6a0:	b.ne	6ac <_ck_assert_failed+0xd4>  // b.any
 6a4:	mov	w0, #0x1                   	// #1
 6a8:	bl	0 <_exit>
 6ac:	adrp	x0, 0 <error_jmp_buffer>
 6b0:	add	x0, x0, #0x0
 6b4:	mov	w1, #0x1                   	// #1
 6b8:	bl	0 <longjmp>

00000000000006bc <cur_fork_status>:
 6bc:	adrp	x8, 0 <suite_create>
 6c0:	ldr	w0, [x8]
 6c4:	ret

00000000000006c8 <srunner_create>:
 6c8:	stp	x29, x30, [sp, #-32]!
 6cc:	stp	x20, x19, [sp, #16]
 6d0:	mov	x20, x0
 6d4:	mov	w0, #0x40                  	// #64
 6d8:	mov	x29, sp
 6dc:	bl	0 <emalloc>
 6e0:	mov	x19, x0
 6e4:	bl	0 <check_list_create>
 6e8:	str	x0, [x19]
 6ec:	cbz	x20, 6f8 <srunner_create+0x30>
 6f0:	mov	x1, x20
 6f4:	bl	0 <check_list_add_end>
 6f8:	mov	w0, #0xc                   	// #12
 6fc:	bl	0 <emalloc>
 700:	str	x0, [x19, #8]
 704:	str	wzr, [x0, #8]
 708:	str	xzr, [x0]
 70c:	bl	0 <check_list_create>
 710:	movi	v0.2d, #0x0
 714:	str	x0, [x19, #16]
 718:	stur	q0, [x19, #24]
 71c:	stur	q0, [x19, #40]
 720:	str	wzr, [x19, #56]
 724:	mov	x0, x19
 728:	ldp	x20, x19, [sp, #16]
 72c:	ldp	x29, x30, [sp], #32
 730:	ret

0000000000000734 <srunner_add_suite>:
 734:	cbz	x1, 740 <srunner_add_suite+0xc>
 738:	ldr	x0, [x0]
 73c:	b	0 <check_list_add_end>
 740:	ret

0000000000000744 <srunner_free>:
 744:	cbz	x0, 8c4 <srunner_free+0x180>
 748:	stp	x29, x30, [sp, #-64]!
 74c:	stp	x24, x23, [sp, #16]
 750:	stp	x22, x21, [sp, #32]
 754:	stp	x20, x19, [sp, #48]
 758:	mov	x19, x0
 75c:	ldr	x0, [x0, #8]
 760:	mov	x29, sp
 764:	bl	0 <free>
 768:	ldr	x20, [x19]
 76c:	mov	x0, x20
 770:	bl	0 <check_list_front>
 774:	mov	x0, x20
 778:	bl	0 <check_list_at_end>
 77c:	cbnz	w0, 86c <srunner_free+0x128>
 780:	adrp	x21, 0 <free>
 784:	add	x21, x21, #0x0
 788:	mov	x0, x20
 78c:	bl	0 <check_list_val>
 790:	cbz	x0, 858 <srunner_free+0x114>
 794:	ldr	x23, [x0, #8]
 798:	mov	x22, x0
 79c:	mov	x0, x23
 7a0:	bl	0 <check_list_front>
 7a4:	mov	x0, x23
 7a8:	bl	0 <check_list_at_end>
 7ac:	cbnz	w0, 848 <srunner_free+0x104>
 7b0:	mov	x0, x23
 7b4:	bl	0 <check_list_val>
 7b8:	mov	x24, x0
 7bc:	ldr	x0, [x0, #24]
 7c0:	mov	x1, x21
 7c4:	bl	0 <check_list_apply>
 7c8:	ldr	x0, [x24, #32]
 7cc:	mov	x1, x21
 7d0:	bl	0 <check_list_apply>
 7d4:	ldr	x0, [x24, #48]
 7d8:	mov	x1, x21
 7dc:	bl	0 <check_list_apply>
 7e0:	ldr	x0, [x24, #40]
 7e4:	mov	x1, x21
 7e8:	bl	0 <check_list_apply>
 7ec:	ldr	x0, [x24, #56]
 7f0:	mov	x1, x21
 7f4:	bl	0 <check_list_apply>
 7f8:	ldr	x0, [x24, #64]
 7fc:	mov	x1, x21
 800:	bl	0 <check_list_apply>
 804:	ldr	x0, [x24, #24]
 808:	bl	0 <check_list_free>
 80c:	ldr	x0, [x24, #32]
 810:	bl	0 <check_list_free>
 814:	ldr	x0, [x24, #48]
 818:	bl	0 <check_list_free>
 81c:	ldr	x0, [x24, #40]
 820:	bl	0 <check_list_free>
 824:	ldr	x0, [x24, #56]
 828:	bl	0 <check_list_free>
 82c:	ldr	x0, [x24, #64]
 830:	bl	0 <check_list_free>
 834:	mov	x0, x24
 838:	bl	0 <free>
 83c:	mov	x0, x23
 840:	bl	0 <check_list_advance>
 844:	b	7a4 <srunner_free+0x60>
 848:	ldr	x0, [x22, #8]
 84c:	bl	0 <check_list_free>
 850:	mov	x0, x22
 854:	bl	0 <free>
 858:	mov	x0, x20
 85c:	bl	0 <check_list_advance>
 860:	mov	x0, x20
 864:	bl	0 <check_list_at_end>
 868:	cbz	w0, 788 <srunner_free+0x44>
 86c:	ldr	x0, [x19]
 870:	bl	0 <check_list_free>
 874:	ldr	x20, [x19, #16]
 878:	mov	x0, x20
 87c:	bl	0 <check_list_front>
 880:	mov	x0, x20
 884:	bl	0 <check_list_at_end>
 888:	cbnz	w0, 8a4 <srunner_free+0x160>
 88c:	mov	x0, x20
 890:	bl	0 <check_list_val>
 894:	bl	8c8 <tr_free>
 898:	mov	x0, x20
 89c:	bl	0 <check_list_advance>
 8a0:	b	880 <srunner_free+0x13c>
 8a4:	ldr	x0, [x19, #16]
 8a8:	bl	0 <check_list_free>
 8ac:	mov	x0, x19
 8b0:	ldp	x20, x19, [sp, #48]
 8b4:	ldp	x22, x21, [sp, #32]
 8b8:	ldp	x24, x23, [sp, #16]
 8bc:	ldp	x29, x30, [sp], #64
 8c0:	b	0 <free>
 8c4:	ret

00000000000008c8 <tr_free>:
 8c8:	stp	x29, x30, [sp, #-32]!
 8cc:	str	x19, [sp, #16]
 8d0:	mov	x19, x0
 8d4:	ldr	x0, [x0, #8]
 8d8:	mov	x29, sp
 8dc:	bl	0 <free>
 8e0:	ldr	x0, [x19, #48]
 8e4:	bl	0 <free>
 8e8:	mov	x0, x19
 8ec:	ldr	x19, [sp, #16]
 8f0:	ldp	x29, x30, [sp], #32
 8f4:	b	0 <free>

00000000000008f8 <srunner_ntests_failed>:
 8f8:	ldr	x8, [x0, #8]
 8fc:	ldp	w9, w8, [x8, #4]
 900:	add	w0, w8, w9
 904:	ret

0000000000000908 <srunner_ntests_run>:
 908:	ldr	x8, [x0, #8]
 90c:	ldr	w0, [x8]
 910:	ret

0000000000000914 <srunner_failures>:
 914:	stp	x29, x30, [sp, #-48]!
 918:	stp	x20, x19, [sp, #32]
 91c:	ldr	x8, [x0, #8]
 920:	str	x21, [sp, #16]
 924:	mov	x19, x0
 928:	mov	x29, sp
 92c:	ldp	w9, w8, [x8, #4]
 930:	add	w8, w8, w9
 934:	sbfiz	x0, x8, #3, #32
 938:	bl	0 <emalloc>
 93c:	ldr	x20, [x19, #16]
 940:	mov	x19, x0
 944:	mov	x0, x20
 948:	bl	0 <check_list_front>
 94c:	mov	x0, x20
 950:	bl	0 <check_list_at_end>
 954:	cbnz	w0, 990 <srunner_failures+0x7c>
 958:	mov	w21, wzr
 95c:	mov	x0, x20
 960:	bl	0 <check_list_val>
 964:	ldr	w8, [x0]
 968:	cmp	w8, #0x1
 96c:	b.eq	97c <srunner_failures+0x68>  // b.none
 970:	add	w8, w21, #0x1
 974:	str	x0, [x19, w21, sxtw #3]
 978:	mov	w21, w8
 97c:	mov	x0, x20
 980:	bl	0 <check_list_advance>
 984:	mov	x0, x20
 988:	bl	0 <check_list_at_end>
 98c:	cbz	w0, 95c <srunner_failures+0x48>
 990:	mov	x0, x19
 994:	ldp	x20, x19, [sp, #32]
 998:	ldr	x21, [sp, #16]
 99c:	ldp	x29, x30, [sp], #48
 9a0:	ret

00000000000009a4 <srunner_results>:
 9a4:	stp	x29, x30, [sp, #-48]!
 9a8:	stp	x20, x19, [sp, #32]
 9ac:	ldr	x8, [x0, #8]
 9b0:	mov	x19, x0
 9b4:	str	x21, [sp, #16]
 9b8:	mov	x29, sp
 9bc:	ldrsw	x8, [x8]
 9c0:	lsl	x0, x8, #3
 9c4:	bl	0 <emalloc>
 9c8:	ldr	x20, [x19, #16]
 9cc:	mov	x19, x0
 9d0:	mov	x0, x20
 9d4:	bl	0 <check_list_front>
 9d8:	mov	x0, x20
 9dc:	bl	0 <check_list_at_end>
 9e0:	cbnz	w0, a08 <srunner_results+0x64>
 9e4:	mov	x21, x19
 9e8:	mov	x0, x20
 9ec:	bl	0 <check_list_val>
 9f0:	str	x0, [x21], #8
 9f4:	mov	x0, x20
 9f8:	bl	0 <check_list_advance>
 9fc:	mov	x0, x20
 a00:	bl	0 <check_list_at_end>
 a04:	cbz	w0, 9e8 <srunner_results+0x44>
 a08:	mov	x0, x19
 a0c:	ldp	x20, x19, [sp, #32]
 a10:	ldr	x21, [sp, #16]
 a14:	ldp	x29, x30, [sp], #48
 a18:	ret

0000000000000a1c <tr_create>:
 a1c:	stp	x29, x30, [sp, #-16]!
 a20:	mov	w0, #0x38                  	// #56
 a24:	mov	x29, sp
 a28:	bl	0 <emalloc>
 a2c:	mov	w8, #0xffffffff            	// #-1
 a30:	stp	xzr, xzr, [x0]
 a34:	stp	xzr, xzr, [x0, #40]
 a38:	str	xzr, [x0, #32]
 a3c:	str	w8, [x0, #16]
 a40:	str	w8, [x0, #24]
 a44:	ldp	x29, x30, [sp], #16
 a48:	ret

0000000000000a4c <tr_msg>:
 a4c:	ldr	x0, [x0, #48]
 a50:	ret

0000000000000a54 <tr_lno>:
 a54:	ldr	w0, [x0, #16]
 a58:	ret

0000000000000a5c <tr_lfile>:
 a5c:	ldr	x0, [x0, #8]
 a60:	ret

0000000000000a64 <tr_rtype>:
 a64:	ldr	w0, [x0]
 a68:	ret

0000000000000a6c <tr_ctx>:
 a6c:	ldr	w0, [x0, #4]
 a70:	ret

0000000000000a74 <tr_tcname>:
 a74:	ldr	x0, [x0, #32]
 a78:	ret

0000000000000a7c <set_fork_status>:
 a7c:	stp	x29, x30, [sp, #-16]!
 a80:	cmp	w0, #0x2
 a84:	mov	x29, sp
 a88:	b.hi	a9c <set_fork_status+0x20>  // b.pmore
 a8c:	adrp	x8, 0 <suite_create>
 a90:	str	w0, [x8]
 a94:	ldp	x29, x30, [sp], #16
 a98:	ret
 a9c:	adrp	x0, 0 <suite_create>
 aa0:	adrp	x1, 0 <suite_create>
 aa4:	add	x0, x0, #0x0
 aa8:	add	x1, x1, #0x0
 aac:	mov	w2, #0x24a                 	// #586
 ab0:	bl	0 <eprintf>

0000000000000ab4 <check_get_clockid>:
 ab4:	sub	sp, sp, #0x20
 ab8:	add	x2, sp, #0x8
 abc:	mov	w0, #0x1                   	// #1
 ac0:	mov	x1, xzr
 ac4:	stp	x29, x30, [sp, #16]
 ac8:	add	x29, sp, #0x10
 acc:	bl	0 <timer_create>
 ad0:	cbz	w0, adc <check_get_clockid+0x28>
 ad4:	mov	w0, wzr
 ad8:	b	ae8 <check_get_clockid+0x34>
 adc:	ldr	x0, [sp, #8]
 ae0:	bl	0 <timer_delete>
 ae4:	mov	w0, #0x1                   	// #1
 ae8:	ldp	x29, x30, [sp, #16]
 aec:	add	sp, sp, #0x20
 af0:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	sub	sp, sp, #0x130
   4:	stp	x22, x21, [sp, #272]
   8:	adrp	x22, 0 <stderr>
   c:	stp	x20, x19, [sp, #288]
  10:	mov	x19, x0
  14:	ldr	x0, [x22]
  18:	stp	x29, x30, [sp, #240]
  1c:	add	x29, sp, #0xf0
  20:	str	x28, [sp, #256]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	stp	x3, x4, [x29, #-104]
  30:	stp	x5, x6, [x29, #-88]
  34:	stur	x7, [x29, #-72]
  38:	stp	q1, q2, [sp, #16]
  3c:	stp	q3, q4, [sp, #48]
  40:	str	q0, [sp]
  44:	stp	q5, q6, [sp, #80]
  48:	str	q7, [sp, #112]
  4c:	bl	0 <fflush>
  50:	ldr	x0, [x22]
  54:	adrp	x1, 0 <eprintf>
  58:	add	x1, x1, #0x0
  5c:	mov	x2, x21
  60:	mov	w3, w20
  64:	bl	0 <fprintf>
  68:	sub	x9, x29, #0x68
  6c:	mov	x10, sp
  70:	mov	x11, #0xffffffffffffffd8    	// #-40
  74:	add	x8, x29, #0x40
  78:	movk	x11, #0xff80, lsl #32
  7c:	add	x9, x9, #0x28
  80:	add	x10, x10, #0x80
  84:	stp	x8, x9, [x29, #-32]
  88:	stp	x10, x11, [x29, #-16]
  8c:	ldp	q0, q1, [x29, #-32]
  90:	ldr	x0, [x22]
  94:	sub	x2, x29, #0x40
  98:	mov	x1, x19
  9c:	stp	q0, q1, [x29, #-64]
  a0:	bl	0 <vfprintf>
  a4:	ldrb	w8, [x19]
  a8:	cbz	w8, e8 <eprintf+0xe8>
  ac:	mov	x0, x19
  b0:	bl	0 <strlen>
  b4:	add	x8, x0, x19
  b8:	ldurb	w8, [x8, #-1]
  bc:	cmp	w8, #0x3a
  c0:	b.ne	e8 <eprintf+0xe8>  // b.any
  c4:	ldr	x19, [x22]
  c8:	bl	0 <__errno_location>
  cc:	ldr	w0, [x0]
  d0:	bl	0 <strerror>
  d4:	adrp	x1, 0 <eprintf>
  d8:	mov	x2, x0
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x19
  e4:	bl	0 <fprintf>
  e8:	ldr	x1, [x22]
  ec:	mov	w0, #0xa                   	// #10
  f0:	bl	0 <fputc>
  f4:	mov	w0, #0x2                   	// #2
  f8:	bl	0 <exit>

00000000000000fc <emalloc>:
  fc:	stp	x29, x30, [sp, #-32]!
 100:	str	x19, [sp, #16]
 104:	mov	x29, sp
 108:	mov	x19, x0
 10c:	bl	0 <malloc>
 110:	cbz	x0, 120 <emalloc+0x24>
 114:	ldr	x19, [sp, #16]
 118:	ldp	x29, x30, [sp], #32
 11c:	ret
 120:	adrp	x0, 0 <eprintf>
 124:	adrp	x1, 0 <eprintf>
 128:	add	x0, x0, #0x0
 12c:	add	x1, x1, #0x0
 130:	mov	w2, #0x3e                  	// #62
 134:	mov	x3, x19
 138:	bl	0 <eprintf>

000000000000013c <erealloc>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	str	x19, [sp, #16]
 144:	mov	x29, sp
 148:	mov	x19, x1
 14c:	bl	0 <realloc>
 150:	cbz	x0, 160 <erealloc+0x24>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	adrp	x0, 0 <eprintf>
 164:	adrp	x1, 0 <eprintf>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	mov	w2, #0x48                  	// #72
 174:	mov	x3, x19
 178:	bl	0 <eprintf>

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_list_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x18                  	// #24
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	bl	0 <emalloc>
  14:	adrp	x8, 0 <check_list_create>
  18:	ldr	d0, [x8]
  1c:	mov	x19, x0
  20:	str	d0, [x0]
  24:	mov	w0, #0x8                   	// #8
  28:	bl	0 <emalloc>
  2c:	movi	v0.2d, #0xffffffffffffffff
  30:	str	x0, [x19, #16]
  34:	str	d0, [x19, #8]
  38:	mov	x0, x19
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <check_list_add_front>:
  48:	cbz	x0, a0 <check_list_add_front+0x58>
  4c:	stp	x29, x30, [sp, #-32]!
  50:	stp	x20, x19, [sp, #16]
  54:	mov	x29, sp
  58:	mov	x19, x1
  5c:	mov	x20, x0
  60:	bl	a4 <maybe_grow>
  64:	ldr	x1, [x20, #16]
  68:	ldr	w8, [x20]
  6c:	add	x0, x1, #0x8
  70:	lsl	x2, x8, #3
  74:	bl	0 <memmove>
  78:	ldr	w8, [x20, #12]
  7c:	ldr	w9, [x20]
  80:	ldr	x10, [x20, #16]
  84:	add	w8, w8, #0x1
  88:	add	w9, w9, #0x1
  8c:	stp	wzr, w8, [x20, #8]
  90:	str	w9, [x20]
  94:	str	x19, [x10]
  98:	ldp	x20, x19, [sp, #16]
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret

00000000000000a4 <maybe_grow>:
  a4:	stp	x29, x30, [sp, #-32]!
  a8:	str	x19, [sp, #16]
  ac:	ldp	w9, w8, [x0]
  b0:	mov	x29, sp
  b4:	cmp	w9, w8
  b8:	b.cc	d8 <maybe_grow+0x34>  // b.lo, b.ul, b.last
  bc:	mov	x19, x0
  c0:	ldr	x0, [x0, #16]
  c4:	lsl	w8, w8, #1
  c8:	lsl	x1, x8, #3
  cc:	str	w8, [x19, #4]
  d0:	bl	0 <erealloc>
  d4:	str	x0, [x19, #16]
  d8:	ldr	x19, [sp, #16]
  dc:	ldp	x29, x30, [sp], #32
  e0:	ret

00000000000000e4 <check_list_add_end>:
  e4:	cbz	x0, 128 <check_list_add_end+0x44>
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	stp	x20, x19, [sp, #16]
  f0:	mov	x29, sp
  f4:	mov	x19, x1
  f8:	mov	x20, x0
  fc:	bl	a4 <maybe_grow>
 100:	ldrsw	x8, [x20, #12]
 104:	ldr	w9, [x20]
 108:	ldr	x10, [x20, #16]
 10c:	add	x8, x8, #0x1
 110:	add	w9, w9, #0x1
 114:	stp	w8, w8, [x20, #8]
 118:	str	w9, [x20]
 11c:	str	x19, [x10, x8, lsl #3]
 120:	ldp	x20, x19, [sp, #16]
 124:	ldp	x29, x30, [sp], #32
 128:	ret

000000000000012c <check_list_at_end>:
 12c:	ldr	w8, [x0, #8]
 130:	cmn	w8, #0x1
 134:	b.eq	148 <check_list_at_end+0x1c>  // b.none
 138:	ldr	w9, [x0, #12]
 13c:	cmp	w8, w9
 140:	cset	w0, gt
 144:	ret
 148:	mov	w0, #0x1                   	// #1
 14c:	ret

0000000000000150 <check_list_front>:
 150:	ldr	w8, [x0, #8]
 154:	cmn	w8, #0x1
 158:	b.eq	160 <check_list_front+0x10>  // b.none
 15c:	str	wzr, [x0, #8]
 160:	ret

0000000000000164 <check_list_free>:
 164:	cbz	x0, 190 <check_list_free+0x2c>
 168:	stp	x29, x30, [sp, #-32]!
 16c:	str	x19, [sp, #16]
 170:	mov	x19, x0
 174:	ldr	x0, [x0, #16]
 178:	mov	x29, sp
 17c:	bl	0 <free>
 180:	mov	x0, x19
 184:	ldr	x19, [sp, #16]
 188:	ldp	x29, x30, [sp], #32
 18c:	b	0 <free>
 190:	ret

0000000000000194 <check_list_val>:
 194:	cbz	x0, 1c0 <check_list_val+0x2c>
 198:	ldrsw	x8, [x0, #8]
 19c:	cmn	w8, #0x1
 1a0:	b.eq	1b0 <check_list_val+0x1c>  // b.none
 1a4:	ldr	w9, [x0, #12]
 1a8:	cmp	w8, w9
 1ac:	b.le	1b8 <check_list_val+0x24>
 1b0:	mov	x0, xzr
 1b4:	ret
 1b8:	ldr	x9, [x0, #16]
 1bc:	ldr	x0, [x9, x8, lsl #3]
 1c0:	ret

00000000000001c4 <check_list_advance>:
 1c4:	cbz	x0, 1e8 <check_list_advance+0x24>
 1c8:	ldr	w8, [x0, #8]
 1cc:	cmn	w8, #0x1
 1d0:	b.eq	1e8 <check_list_advance+0x24>  // b.none
 1d4:	ldr	w9, [x0, #12]
 1d8:	cmp	w8, w9
 1dc:	b.gt	1e8 <check_list_advance+0x24>
 1e0:	add	w8, w8, #0x1
 1e4:	str	w8, [x0, #8]
 1e8:	ret

00000000000001ec <check_list_apply>:
 1ec:	stp	x29, x30, [sp, #-32]!
 1f0:	stp	x20, x19, [sp, #16]
 1f4:	mov	x29, sp
 1f8:	cbz	x0, 25c <check_list_apply+0x70>
 1fc:	mov	x19, x1
 200:	cbz	x1, 25c <check_list_apply+0x70>
 204:	ldr	w8, [x0, #8]
 208:	mov	x20, x0
 20c:	cmn	w8, #0x1
 210:	b.eq	25c <check_list_apply+0x70>  // b.none
 214:	mov	w8, wzr
 218:	str	wzr, [x20, #8]
 21c:	ldr	w9, [x20, #12]
 220:	cmp	w8, w9
 224:	b.gt	25c <check_list_apply+0x70>
 228:	ldr	x9, [x20, #16]
 22c:	ldr	x0, [x9, w8, sxtw #3]
 230:	blr	x19
 234:	ldr	w8, [x20, #8]
 238:	cmn	w8, #0x1
 23c:	b.eq	25c <check_list_apply+0x70>  // b.none
 240:	ldr	w9, [x20, #12]
 244:	cmp	w8, w9
 248:	b.gt	254 <check_list_apply+0x68>
 24c:	add	w8, w8, #0x1
 250:	str	w8, [x20, #8]
 254:	cmn	w8, #0x1
 258:	b.ne	21c <check_list_apply+0x30>  // b.any
 25c:	ldp	x20, x19, [sp, #16]
 260:	ldp	x29, x30, [sp], #32
 264:	ret

0000000000000268 <check_list_contains>:
 268:	ldr	w8, [x0, #8]
 26c:	cmn	w8, #0x1
 270:	b.eq	2ac <check_list_contains+0x44>  // b.none
 274:	ldr	w8, [x0, #12]
 278:	str	wzr, [x0, #8]
 27c:	tbnz	w8, #31, 2ac <check_list_contains+0x44>
 280:	ldr	x9, [x0, #16]
 284:	mov	w10, #0xffffffff            	// #-1
 288:	ldr	x11, [x9]
 28c:	cmp	x11, x1
 290:	b.eq	2b4 <check_list_contains+0x4c>  // b.none
 294:	add	w11, w10, #0x2
 298:	add	w10, w10, #0x1
 29c:	cmp	w10, w8
 2a0:	add	x9, x9, #0x8
 2a4:	str	w11, [x0, #8]
 2a8:	b.lt	288 <check_list_contains+0x20>  // b.tstop
 2ac:	mov	w0, wzr
 2b0:	ret
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	ldr	x8, [x0, #24]
   4:	cbz	x8, c <srunner_set_log+0xc>
   8:	ret
   c:	str	x1, [x0, #24]
  10:	ret

0000000000000014 <srunner_has_log>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	ldr	x0, [x0, #24]
  1c:	mov	x29, sp
  20:	cbnz	x0, 30 <srunner_has_log+0x1c>
  24:	adrp	x0, 0 <srunner_set_log>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <getenv>
  30:	cmp	x0, #0x0
  34:	cset	w0, ne  // ne = any
  38:	ldp	x29, x30, [sp], #16
  3c:	ret

0000000000000040 <srunner_log_fname>:
  40:	ldr	x0, [x0, #24]
  44:	cbz	x0, 4c <srunner_log_fname+0xc>
  48:	ret
  4c:	adrp	x0, 0 <srunner_set_log>
  50:	add	x0, x0, #0x0
  54:	b	0 <getenv>

0000000000000058 <srunner_set_xml>:
  58:	ldr	x8, [x0, #32]
  5c:	cbz	x8, 64 <srunner_set_xml+0xc>
  60:	ret
  64:	str	x1, [x0, #32]
  68:	ret

000000000000006c <srunner_has_xml>:
  6c:	stp	x29, x30, [sp, #-16]!
  70:	ldr	x0, [x0, #32]
  74:	mov	x29, sp
  78:	cbnz	x0, 88 <srunner_has_xml+0x1c>
  7c:	adrp	x0, 0 <srunner_set_log>
  80:	add	x0, x0, #0x0
  84:	bl	0 <getenv>
  88:	cmp	x0, #0x0
  8c:	cset	w0, ne  // ne = any
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <srunner_xml_fname>:
  98:	ldr	x0, [x0, #32]
  9c:	cbz	x0, a4 <srunner_xml_fname+0xc>
  a0:	ret
  a4:	adrp	x0, 0 <srunner_set_log>
  a8:	add	x0, x0, #0x0
  ac:	b	0 <getenv>

00000000000000b0 <srunner_set_tap>:
  b0:	ldr	x8, [x0, #40]
  b4:	cbz	x8, bc <srunner_set_tap+0xc>
  b8:	ret
  bc:	str	x1, [x0, #40]
  c0:	ret

00000000000000c4 <srunner_has_tap>:
  c4:	stp	x29, x30, [sp, #-16]!
  c8:	ldr	x0, [x0, #40]
  cc:	mov	x29, sp
  d0:	cbnz	x0, e0 <srunner_has_tap+0x1c>
  d4:	adrp	x0, 0 <srunner_set_log>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <getenv>
  e0:	cmp	x0, #0x0
  e4:	cset	w0, ne  // ne = any
  e8:	ldp	x29, x30, [sp], #16
  ec:	ret

00000000000000f0 <srunner_tap_fname>:
  f0:	ldr	x0, [x0, #40]
  f4:	cbz	x0, fc <srunner_tap_fname+0xc>
  f8:	ret
  fc:	adrp	x0, 0 <srunner_set_log>
 100:	add	x0, x0, #0x0
 104:	b	0 <getenv>

0000000000000108 <srunner_register_lfun>:
 108:	stp	x29, x30, [sp, #-64]!
 10c:	stp	x20, x19, [sp, #48]
 110:	mov	x19, x0
 114:	mov	w0, #0x18                  	// #24
 118:	stp	x24, x23, [sp, #16]
 11c:	stp	x22, x21, [sp, #32]
 120:	mov	x29, sp
 124:	mov	w22, w4
 128:	mov	x21, x3
 12c:	mov	w20, w2
 130:	mov	x23, x1
 134:	bl	0 <emalloc>
 138:	cmp	w22, #0x4
 13c:	mov	x24, x0
 140:	b.ne	14c <srunner_register_lfun+0x44>  // b.any
 144:	bl	0 <get_env_printmode>
 148:	mov	w22, w0
 14c:	stp	x23, x21, [x24]
 150:	stp	w20, w22, [x24, #16]
 154:	ldr	x0, [x19, #48]
 158:	mov	x1, x24
 15c:	ldp	x20, x19, [sp, #48]
 160:	ldp	x22, x21, [sp, #32]
 164:	ldp	x24, x23, [sp, #16]
 168:	ldp	x29, x30, [sp], #64
 16c:	b	0 <check_list_add_end>

0000000000000170 <log_srunner_start>:
 170:	mov	w2, #0x2                   	// #2
 174:	mov	x1, xzr
 178:	b	17c <srunner_send_evt>

000000000000017c <srunner_send_evt>:
 17c:	stp	x29, x30, [sp, #-64]!
 180:	stp	x22, x21, [sp, #32]
 184:	stp	x20, x19, [sp, #48]
 188:	ldr	x21, [x0, #48]
 18c:	mov	x20, x0
 190:	str	x23, [sp, #16]
 194:	mov	x29, sp
 198:	mov	x0, x21
 19c:	mov	w19, w2
 1a0:	mov	x22, x1
 1a4:	bl	0 <check_list_front>
 1a8:	mov	x0, x21
 1ac:	bl	0 <check_list_at_end>
 1b0:	cbnz	w0, 1f4 <srunner_send_evt+0x78>
 1b4:	mov	x0, x21
 1b8:	bl	0 <check_list_val>
 1bc:	mov	x23, x0
 1c0:	ldr	x0, [x0]
 1c4:	bl	0 <fflush>
 1c8:	ldp	x1, x8, [x23]
 1cc:	ldr	w2, [x23, #20]
 1d0:	mov	x0, x20
 1d4:	mov	x3, x22
 1d8:	mov	w4, w19
 1dc:	blr	x8
 1e0:	ldr	x0, [x23]
 1e4:	bl	0 <fflush>
 1e8:	mov	x0, x21
 1ec:	bl	0 <check_list_advance>
 1f0:	b	1a8 <srunner_send_evt+0x2c>
 1f4:	ldp	x20, x19, [sp, #48]
 1f8:	ldp	x22, x21, [sp, #32]
 1fc:	ldr	x23, [sp, #16]
 200:	ldp	x29, x30, [sp], #64
 204:	ret

0000000000000208 <log_srunner_end>:
 208:	mov	w2, #0x4                   	// #4
 20c:	mov	x1, xzr
 210:	b	17c <srunner_send_evt>

0000000000000214 <log_suite_start>:
 214:	mov	w2, #0x3                   	// #3
 218:	b	17c <srunner_send_evt>

000000000000021c <log_suite_end>:
 21c:	mov	w2, #0x5                   	// #5
 220:	b	17c <srunner_send_evt>

0000000000000224 <log_test_start>:
 224:	sub	sp, sp, #0x90
 228:	stp	x29, x30, [sp, #112]
 22c:	ldr	x8, [x2]
 230:	ldr	x3, [x1]
 234:	adrp	x2, 0 <srunner_set_log>
 238:	str	x19, [sp, #128]
 23c:	ldr	x4, [x8]
 240:	mov	x19, x0
 244:	add	x2, x2, #0x0
 248:	add	x0, sp, #0xc
 24c:	mov	w1, #0x63                  	// #99
 250:	add	x29, sp, #0x70
 254:	bl	0 <snprintf>
 258:	add	x1, sp, #0xc
 25c:	mov	w2, #0x6                   	// #6
 260:	mov	x0, x19
 264:	bl	17c <srunner_send_evt>
 268:	ldr	x19, [sp, #128]
 26c:	ldp	x29, x30, [sp, #112]
 270:	add	sp, sp, #0x90
 274:	ret

0000000000000278 <log_test_end>:
 278:	mov	w2, #0x7                   	// #7
 27c:	b	17c <srunner_send_evt>

0000000000000280 <stdout_lfun>:
 280:	stp	x29, x30, [sp, #-16]!
 284:	cmp	w4, #0x7
 288:	mov	x29, sp
 28c:	b.hi	308 <stdout_lfun+0x88>  // b.pmore
 290:	adrp	x10, 0 <srunner_set_log>
 294:	mov	w9, w4
 298:	add	x10, x10, #0x0
 29c:	adr	x11, 2b0 <stdout_lfun+0x30>
 2a0:	ldrb	w12, [x10, x9]
 2a4:	add	x11, x11, x12, lsl #2
 2a8:	mov	x8, x1
 2ac:	br	x11
 2b0:	ldp	x29, x30, [sp], #16
 2b4:	ret
 2b8:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2bc:	mov	x1, x0
 2c0:	mov	x0, x8
 2c4:	ldp	x29, x30, [sp], #16
 2c8:	b	0 <srunner_fprint>
 2cc:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2d0:	adrp	x0, 0 <srunner_set_log>
 2d4:	add	x0, x0, #0x0
 2d8:	mov	w1, #0x11                  	// #17
 2dc:	mov	w2, #0x1                   	// #1
 2e0:	mov	x3, x8
 2e4:	ldp	x29, x30, [sp], #16
 2e8:	b	0 <fwrite>
 2ec:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2f0:	ldr	x2, [x3]
 2f4:	adrp	x1, 0 <srunner_set_log>
 2f8:	add	x1, x1, #0x0
 2fc:	mov	x0, x8
 300:	ldp	x29, x30, [sp], #16
 304:	b	0 <fprintf>
 308:	adrp	x0, 0 <srunner_set_log>
 30c:	adrp	x1, 0 <srunner_set_log>
 310:	add	x0, x0, #0x0
 314:	add	x1, x1, #0x0
 318:	mov	w2, #0xdc                  	// #220
 31c:	bl	0 <eprintf>

0000000000000320 <lfile_lfun>:
 320:	stp	x29, x30, [sp, #-32]!
 324:	cmp	w4, #0x7
 328:	stp	x20, x19, [sp, #16]
 32c:	mov	x29, sp
 330:	b.hi	3c8 <lfile_lfun+0xa8>  // b.pmore
 334:	adrp	x9, 0 <srunner_set_log>
 338:	mov	w8, w4
 33c:	add	x9, x9, #0x0
 340:	adr	x10, 354 <lfile_lfun+0x34>
 344:	ldrb	w11, [x9, x8]
 348:	add	x10, x10, x11, lsl #2
 34c:	mov	x19, x1
 350:	br	x10
 354:	ldp	x20, x19, [sp, #16]
 358:	ldp	x29, x30, [sp], #32
 35c:	ret
 360:	mov	x0, x19
 364:	ldp	x20, x19, [sp, #16]
 368:	mov	w2, #0x3                   	// #3
 36c:	mov	x1, x3
 370:	ldp	x29, x30, [sp], #32
 374:	b	0 <tr_fprint>
 378:	ldr	x2, [x3]
 37c:	mov	x0, x19
 380:	ldp	x20, x19, [sp, #16]
 384:	adrp	x1, 0 <srunner_set_log>
 388:	add	x1, x1, #0x0
 38c:	ldp	x29, x30, [sp], #32
 390:	b	0 <fprintf>
 394:	mov	x20, x0
 398:	adrp	x0, 0 <srunner_set_log>
 39c:	add	x0, x0, #0x0
 3a0:	mov	w1, #0x1c                  	// #28
 3a4:	mov	w2, #0x1                   	// #1
 3a8:	mov	x3, x19
 3ac:	bl	0 <fwrite>
 3b0:	mov	x0, x19
 3b4:	mov	x1, x20
 3b8:	ldp	x20, x19, [sp, #16]
 3bc:	mov	w2, #0x1                   	// #1
 3c0:	ldp	x29, x30, [sp], #32
 3c4:	b	0 <srunner_fprint>
 3c8:	adrp	x0, 0 <srunner_set_log>
 3cc:	adrp	x1, 0 <srunner_set_log>
 3d0:	add	x0, x0, #0x0
 3d4:	add	x1, x1, #0x0
 3d8:	mov	w2, #0x103                 	// #259
 3dc:	bl	0 <eprintf>

00000000000003e0 <xml_lfun>:
 3e0:	sub	sp, sp, #0x80
 3e4:	adrp	x8, 0 <srunner_set_log>
 3e8:	ldrb	w8, [x8]
 3ec:	str	x21, [sp, #96]
 3f0:	stp	x20, x19, [sp, #112]
 3f4:	mov	w21, w4
 3f8:	mov	x20, x3
 3fc:	mov	x19, x1
 400:	stp	x29, x30, [sp, #80]
 404:	add	x29, sp, #0x50
 408:	cbnz	w8, 454 <xml_lfun+0x74>
 40c:	sub	x0, x29, #0x10
 410:	mov	x1, xzr
 414:	bl	0 <gettimeofday>
 418:	bl	0 <check_get_clockid>
 41c:	adrp	x1, 0 <srunner_set_log>
 420:	add	x1, x1, #0x0
 424:	bl	0 <clock_gettime>
 428:	sub	x0, x29, #0x10
 42c:	add	x1, sp, #0x8
 430:	bl	0 <localtime_r>
 434:	cbz	x0, 454 <xml_lfun+0x74>
 438:	adrp	x0, 0 <srunner_set_log>
 43c:	adrp	x2, 0 <srunner_set_log>
 440:	add	x0, x0, #0x0
 444:	add	x2, x2, #0x0
 448:	add	x3, sp, #0x8
 44c:	mov	w1, #0x14                  	// #20
 450:	bl	0 <strftime>
 454:	cmp	w21, #0x7
 458:	b.hi	5a4 <xml_lfun+0x1c4>  // b.pmore
 45c:	adrp	x9, 0 <srunner_set_log>
 460:	mov	w8, w21
 464:	add	x9, x9, #0x0
 468:	adr	x10, 478 <xml_lfun+0x98>
 46c:	ldrb	w11, [x9, x8]
 470:	add	x10, x10, x11, lsl #2
 474:	br	x10
 478:	adrp	x1, 0 <srunner_set_log>
 47c:	adrp	x2, 0 <srunner_set_log>
 480:	add	x1, x1, #0x0
 484:	add	x2, x2, #0x0
 488:	mov	x0, x19
 48c:	bl	0 <fprintf>
 490:	b	590 <xml_lfun+0x1b0>
 494:	stp	xzr, xzr, [sp, #8]
 498:	bl	0 <check_get_clockid>
 49c:	add	x1, sp, #0x8
 4a0:	bl	0 <clock_gettime>
 4a4:	adrp	x8, 0 <srunner_set_log>
 4a8:	add	x8, x8, #0x0
 4ac:	ldp	x9, x10, [sp, #8]
 4b0:	ldp	x12, x8, [x8]
 4b4:	mov	x11, #0xf7cf                	// #63439
 4b8:	movk	x11, #0xe353, lsl #16
 4bc:	movk	x11, #0x9ba5, lsl #32
 4c0:	sub	x9, x9, x12
 4c4:	mov	x12, #0x831                 	// #2097
 4c8:	movk	x12, #0x1cac, lsl #16
 4cc:	movk	x11, #0x20c4, lsl #48
 4d0:	movk	x12, #0x645a, lsl #32
 4d4:	smulh	x10, x10, x11
 4d8:	movk	x12, #0xdf3b, lsl #48
 4dc:	mov	w11, #0x4240                	// #16960
 4e0:	smulh	x8, x8, x12
 4e4:	asr	x12, x10, #7
 4e8:	movk	w11, #0xf, lsl #16
 4ec:	add	x10, x12, x10, lsr #63
 4f0:	asr	x12, x8, #7
 4f4:	madd	x9, x9, x11, x10
 4f8:	add	x8, x12, x8, lsr #63
 4fc:	add	x8, x9, x8
 500:	mov	x9, #0x34db                	// #13531
 504:	movk	x9, #0xd7b6, lsl #16
 508:	movk	x9, #0xde82, lsl #32
 50c:	movk	x9, #0x431b, lsl #48
 510:	umulh	x9, x8, x9
 514:	lsr	x2, x9, #18
 518:	adrp	x1, 0 <srunner_set_log>
 51c:	msub	x3, x2, x11, x8
 520:	add	x1, x1, #0x0
 524:	mov	x0, x19
 528:	bl	0 <fprintf>
 52c:	b	590 <xml_lfun+0x1b0>
 530:	mov	w2, #0x3                   	// #3
 534:	mov	x0, x19
 538:	mov	x1, x20
 53c:	bl	0 <tr_xmlprint>
 540:	b	590 <xml_lfun+0x1b0>
 544:	adrp	x0, 0 <srunner_set_log>
 548:	add	x0, x0, #0x0
 54c:	mov	w1, #0x15                  	// #21
 550:	mov	w2, #0x1                   	// #1
 554:	mov	x3, x19
 558:	bl	0 <fwrite>
 55c:	ldr	x1, [x20]
 560:	mov	x0, x19
 564:	bl	0 <fprint_xml_esc>
 568:	adrp	x0, 0 <srunner_set_log>
 56c:	add	x0, x0, #0x0
 570:	mov	w1, #0x9                   	// #9
 574:	b	584 <xml_lfun+0x1a4>
 578:	adrp	x0, 0 <srunner_set_log>
 57c:	add	x0, x0, #0x0
 580:	mov	w1, #0xb                   	// #11
 584:	mov	w2, #0x1                   	// #1
 588:	mov	x3, x19
 58c:	bl	0 <fwrite>
 590:	ldp	x20, x19, [sp, #112]
 594:	ldr	x21, [sp, #96]
 598:	ldp	x29, x30, [sp, #80]
 59c:	add	sp, sp, #0x80
 5a0:	ret
 5a4:	adrp	x0, 0 <srunner_set_log>
 5a8:	adrp	x1, 0 <srunner_set_log>
 5ac:	add	x0, x0, #0x0
 5b0:	add	x1, x1, #0x0
 5b4:	mov	w2, #0x14f                 	// #335
 5b8:	bl	0 <eprintf>

00000000000005bc <tap_lfun>:
 5bc:	stp	x29, x30, [sp, #-32]!
 5c0:	cmp	w4, #0x7
 5c4:	str	x19, [sp, #16]
 5c8:	mov	x29, sp
 5cc:	b.hi	680 <tap_lfun+0xc4>  // b.pmore
 5d0:	adrp	x9, 0 <srunner_set_log>
 5d4:	mov	w8, w4
 5d8:	add	x9, x9, #0x0
 5dc:	adr	x10, 5f0 <tap_lfun+0x34>
 5e0:	ldrb	w11, [x9, x8]
 5e4:	add	x10, x10, x11, lsl #2
 5e8:	mov	x19, x1
 5ec:	br	x10
 5f0:	ldr	x19, [sp, #16]
 5f4:	ldp	x29, x30, [sp], #32
 5f8:	ret
 5fc:	adrp	x9, 0 <srunner_set_log>
 600:	ldr	w8, [x9]
 604:	adrp	x10, 0 <srunner_set_log>
 608:	adrp	x11, 0 <srunner_set_log>
 60c:	add	x10, x10, #0x0
 610:	add	w8, w8, #0x1
 614:	str	w8, [x9]
 618:	ldr	w9, [x3]
 61c:	ldr	x4, [x3, #8]
 620:	ldp	x5, x6, [x3, #32]
 624:	ldr	x7, [x3, #48]
 628:	add	x11, x11, #0x0
 62c:	cmp	w9, #0x1
 630:	adrp	x1, 0 <srunner_set_log>
 634:	csel	x2, x11, x10, eq  // eq = none
 638:	add	x1, x1, #0x0
 63c:	mov	x0, x19
 640:	mov	w3, w8
 644:	bl	0 <fprintf>
 648:	b	670 <tap_lfun+0xb4>
 64c:	adrp	x8, 0 <srunner_set_log>
 650:	str	wzr, [x8]
 654:	b	5f0 <tap_lfun+0x34>
 658:	adrp	x8, 0 <srunner_set_log>
 65c:	ldr	w2, [x8]
 660:	adrp	x1, 0 <srunner_set_log>
 664:	add	x1, x1, #0x0
 668:	mov	x0, x19
 66c:	bl	0 <fprintf>
 670:	mov	x0, x19
 674:	ldr	x19, [sp, #16]
 678:	ldp	x29, x30, [sp], #32
 67c:	b	0 <fflush>
 680:	adrp	x0, 0 <srunner_set_log>
 684:	adrp	x1, 0 <srunner_set_log>
 688:	add	x0, x0, #0x0
 68c:	add	x1, x1, #0x0
 690:	mov	w2, #0x17c                 	// #380
 694:	bl	0 <eprintf>

0000000000000698 <srunner_open_lfile>:
 698:	stp	x29, x30, [sp, #-16]!
 69c:	ldr	x0, [x0, #24]
 6a0:	mov	x29, sp
 6a4:	cbnz	x0, 6b8 <srunner_open_lfile+0x20>
 6a8:	adrp	x0, 0 <srunner_set_log>
 6ac:	add	x0, x0, #0x0
 6b0:	bl	0 <getenv>
 6b4:	cbz	x0, 6c0 <srunner_open_lfile+0x28>
 6b8:	ldp	x29, x30, [sp], #16
 6bc:	b	6c8 <srunner_open_file>
 6c0:	ldp	x29, x30, [sp], #16
 6c4:	ret

00000000000006c8 <srunner_open_file>:
 6c8:	stp	x29, x30, [sp, #-32]!
 6cc:	adrp	x1, 0 <srunner_set_log>
 6d0:	add	x1, x1, #0x0
 6d4:	str	x19, [sp, #16]
 6d8:	mov	x29, sp
 6dc:	mov	x19, x0
 6e0:	bl	0 <strcmp>
 6e4:	cbz	w0, 718 <srunner_open_file+0x50>
 6e8:	adrp	x1, 0 <srunner_set_log>
 6ec:	add	x1, x1, #0x0
 6f0:	mov	x0, x19
 6f4:	bl	0 <fopen>
 6f8:	cbnz	x0, 720 <srunner_open_file+0x58>
 6fc:	adrp	x0, 0 <srunner_set_log>
 700:	adrp	x1, 0 <srunner_set_log>
 704:	add	x0, x0, #0x0
 708:	add	x1, x1, #0x0
 70c:	mov	w2, #0x1cd                 	// #461
 710:	mov	x3, x19
 714:	bl	0 <eprintf>
 718:	adrp	x8, 0 <stdout>
 71c:	ldr	x0, [x8]
 720:	ldr	x19, [sp, #16]
 724:	ldp	x29, x30, [sp], #32
 728:	ret

000000000000072c <srunner_open_xmlfile>:
 72c:	stp	x29, x30, [sp, #-16]!
 730:	ldr	x0, [x0, #32]
 734:	mov	x29, sp
 738:	cbnz	x0, 74c <srunner_open_xmlfile+0x20>
 73c:	adrp	x0, 0 <srunner_set_log>
 740:	add	x0, x0, #0x0
 744:	bl	0 <getenv>
 748:	cbz	x0, 754 <srunner_open_xmlfile+0x28>
 74c:	ldp	x29, x30, [sp], #16
 750:	b	6c8 <srunner_open_file>
 754:	ldp	x29, x30, [sp], #16
 758:	ret

000000000000075c <srunner_open_tapfile>:
 75c:	stp	x29, x30, [sp, #-16]!
 760:	ldr	x0, [x0, #40]
 764:	mov	x29, sp
 768:	cbnz	x0, 77c <srunner_open_tapfile+0x20>
 76c:	adrp	x0, 0 <srunner_set_log>
 770:	add	x0, x0, #0x0
 774:	bl	0 <getenv>
 778:	cbz	x0, 784 <srunner_open_tapfile+0x28>
 77c:	ldp	x29, x30, [sp], #16
 780:	b	6c8 <srunner_open_file>
 784:	ldp	x29, x30, [sp], #16
 788:	ret

000000000000078c <srunner_init_logging>:
 78c:	stp	x29, x30, [sp, #-48]!
 790:	str	x21, [sp, #16]
 794:	stp	x20, x19, [sp, #32]
 798:	mov	x29, sp
 79c:	mov	w20, w1
 7a0:	mov	x19, x0
 7a4:	bl	0 <check_list_create>
 7a8:	str	x0, [x19, #48]
 7ac:	adrp	x21, 0 <stdout>
 7b0:	ldr	x1, [x21]
 7b4:	adrp	x3, 280 <stdout_lfun>
 7b8:	add	x3, x3, #0x0
 7bc:	mov	x0, x19
 7c0:	mov	w2, wzr
 7c4:	mov	w4, w20
 7c8:	bl	108 <srunner_register_lfun>
 7cc:	mov	x0, x19
 7d0:	bl	698 <srunner_open_lfile>
 7d4:	cbz	x0, 7fc <srunner_init_logging+0x70>
 7d8:	ldr	x8, [x21]
 7dc:	adrp	x3, 320 <lfile_lfun>
 7e0:	mov	x1, x0
 7e4:	add	x3, x3, #0x0
 7e8:	cmp	x0, x8
 7ec:	cset	w2, ne  // ne = any
 7f0:	mov	x0, x19
 7f4:	mov	w4, w20
 7f8:	bl	108 <srunner_register_lfun>
 7fc:	mov	x0, x19
 800:	bl	72c <srunner_open_xmlfile>
 804:	cbz	x0, 82c <srunner_init_logging+0xa0>
 808:	ldr	x8, [x21]
 80c:	adrp	x3, 3e0 <xml_lfun>
 810:	mov	x1, x0
 814:	add	x3, x3, #0x0
 818:	cmp	x0, x8
 81c:	cset	w2, ne  // ne = any
 820:	mov	x0, x19
 824:	mov	w4, w20
 828:	bl	108 <srunner_register_lfun>
 82c:	mov	x0, x19
 830:	bl	75c <srunner_open_tapfile>
 834:	cbz	x0, 85c <srunner_init_logging+0xd0>
 838:	ldr	x8, [x21]
 83c:	adrp	x3, 5bc <tap_lfun>
 840:	mov	x1, x0
 844:	add	x3, x3, #0x0
 848:	cmp	x0, x8
 84c:	cset	w2, ne  // ne = any
 850:	mov	x0, x19
 854:	mov	w4, w20
 858:	bl	108 <srunner_register_lfun>
 85c:	mov	x0, x19
 860:	ldp	x20, x19, [sp, #32]
 864:	ldr	x21, [sp, #16]
 868:	mov	x1, xzr
 86c:	mov	w2, wzr
 870:	ldp	x29, x30, [sp], #48
 874:	b	17c <srunner_send_evt>

0000000000000878 <srunner_end_logging>:
 878:	stp	x29, x30, [sp, #-48]!
 87c:	mov	w2, #0x1                   	// #1
 880:	mov	x1, xzr
 884:	str	x21, [sp, #16]
 888:	stp	x20, x19, [sp, #32]
 88c:	mov	x29, sp
 890:	mov	x19, x0
 894:	bl	17c <srunner_send_evt>
 898:	ldr	x20, [x19, #48]
 89c:	mov	x0, x20
 8a0:	bl	0 <check_list_front>
 8a4:	mov	x0, x20
 8a8:	bl	0 <check_list_at_end>
 8ac:	cbnz	w0, 8e4 <srunner_end_logging+0x6c>
 8b0:	mov	x0, x20
 8b4:	bl	0 <check_list_val>
 8b8:	ldr	w8, [x0, #16]
 8bc:	mov	x21, x0
 8c0:	cbz	w8, 8d0 <srunner_end_logging+0x58>
 8c4:	ldr	x0, [x21]
 8c8:	bl	0 <fclose>
 8cc:	cbnz	w0, 900 <srunner_end_logging+0x88>
 8d0:	mov	x0, x21
 8d4:	bl	0 <free>
 8d8:	mov	x0, x20
 8dc:	bl	0 <check_list_advance>
 8e0:	b	8a4 <srunner_end_logging+0x2c>
 8e4:	mov	x0, x20
 8e8:	bl	0 <check_list_free>
 8ec:	str	xzr, [x19, #48]
 8f0:	ldp	x20, x19, [sp, #32]
 8f4:	ldr	x21, [sp, #16]
 8f8:	ldp	x29, x30, [sp], #48
 8fc:	ret
 900:	adrp	x0, 0 <srunner_set_log>
 904:	adrp	x1, 0 <srunner_set_log>
 908:	add	x0, x0, #0x0
 90c:	add	x1, x1, #0x0
 910:	mov	w2, #0x224                 	// #548
 914:	bl	0 <eprintf>

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <send_failure_info>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	bl	0 <strdup>
  10:	adrp	x8, 0 <send_failure_info>
  14:	ldr	x8, [x8]
  18:	str	x0, [sp, #8]
  1c:	cbnz	x8, 2c <send_failure_info+0x2c>
  20:	adrp	x8, 0 <send_failure_info>
  24:	ldr	x8, [x8]
  28:	cbz	x8, 50 <send_failure_info+0x50>
  2c:	add	x2, sp, #0x8
  30:	mov	w1, #0x1                   	// #1
  34:	mov	x0, x8
  38:	bl	0 <ppack>
  3c:	ldr	x0, [sp, #8]
  40:	bl	0 <free>
  44:	ldp	x29, x30, [sp, #16]
  48:	add	sp, sp, #0x20
  4c:	ret
  50:	adrp	x0, 0 <send_failure_info>
  54:	adrp	x1, 0 <send_failure_info>
  58:	add	x0, x0, #0x0
  5c:	add	x1, x1, #0x0
  60:	mov	w2, #0x50                  	// #80
  64:	bl	0 <eprintf>

0000000000000068 <send_duration_info>:
  68:	sub	sp, sp, #0x20
  6c:	adrp	x8, 0 <send_failure_info>
  70:	ldr	x8, [x8]
  74:	stp	x29, x30, [sp, #16]
  78:	add	x29, sp, #0x10
  7c:	str	w0, [sp, #8]
  80:	cbnz	x8, 90 <send_duration_info+0x28>
  84:	adrp	x8, 0 <send_failure_info>
  88:	ldr	x8, [x8]
  8c:	cbz	x8, ac <send_duration_info+0x44>
  90:	add	x2, sp, #0x8
  94:	mov	w1, #0x3                   	// #3
  98:	mov	x0, x8
  9c:	bl	0 <ppack>
  a0:	ldp	x29, x30, [sp, #16]
  a4:	add	sp, sp, #0x20
  a8:	ret
  ac:	adrp	x0, 0 <send_failure_info>
  b0:	adrp	x1, 0 <send_failure_info>
  b4:	add	x0, x0, #0x0
  b8:	add	x1, x1, #0x0
  bc:	mov	w2, #0x50                  	// #80
  c0:	bl	0 <eprintf>

00000000000000c4 <send_loc_info>:
  c4:	sub	sp, sp, #0x30
  c8:	stp	x29, x30, [sp, #16]
  cc:	str	x19, [sp, #32]
  d0:	add	x29, sp, #0x10
  d4:	mov	w19, w1
  d8:	bl	0 <strdup>
  dc:	adrp	x9, 0 <send_failure_info>
  e0:	mov	x8, x0
  e4:	ldr	x0, [x9]
  e8:	str	x8, [sp, #8]
  ec:	str	w19, [sp]
  f0:	cbnz	x0, 100 <send_loc_info+0x3c>
  f4:	adrp	x8, 0 <send_failure_info>
  f8:	ldr	x0, [x8]
  fc:	cbz	x0, 124 <send_loc_info+0x60>
 100:	mov	x2, sp
 104:	mov	w1, #0x2                   	// #2
 108:	bl	0 <ppack>
 10c:	ldr	x0, [sp, #8]
 110:	bl	0 <free>
 114:	ldr	x19, [sp, #32]
 118:	ldp	x29, x30, [sp, #16]
 11c:	add	sp, sp, #0x30
 120:	ret
 124:	adrp	x0, 0 <send_failure_info>
 128:	adrp	x1, 0 <send_failure_info>
 12c:	add	x0, x0, #0x0
 130:	add	x1, x1, #0x0
 134:	mov	w2, #0x50                  	// #80
 138:	bl	0 <eprintf>

000000000000013c <send_ctx_info>:
 13c:	sub	sp, sp, #0x20
 140:	adrp	x8, 0 <send_failure_info>
 144:	ldr	x8, [x8]
 148:	stp	x29, x30, [sp, #16]
 14c:	add	x29, sp, #0x10
 150:	str	w0, [sp, #8]
 154:	cbnz	x8, 164 <send_ctx_info+0x28>
 158:	adrp	x8, 0 <send_failure_info>
 15c:	ldr	x8, [x8]
 160:	cbz	x8, 180 <send_ctx_info+0x44>
 164:	add	x2, sp, #0x8
 168:	mov	x0, x8
 16c:	mov	w1, wzr
 170:	bl	0 <ppack>
 174:	ldp	x29, x30, [sp, #16]
 178:	add	sp, sp, #0x20
 17c:	ret
 180:	adrp	x0, 0 <send_failure_info>
 184:	adrp	x1, 0 <send_failure_info>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	mov	w2, #0x50                  	// #80
 194:	bl	0 <eprintf>

0000000000000198 <receive_test_result>:
 198:	stp	x29, x30, [sp, #-48]!
 19c:	adrp	x8, 0 <send_failure_info>
 1a0:	stp	x20, x19, [sp, #32]
 1a4:	ldr	x19, [x8]
 1a8:	str	x21, [sp, #16]
 1ac:	mov	w21, w0
 1b0:	mov	x29, sp
 1b4:	cbnz	x19, 1c4 <receive_test_result+0x2c>
 1b8:	adrp	x8, 0 <send_failure_info>
 1bc:	ldr	x19, [x8]
 1c0:	cbz	x19, 2b4 <receive_test_result+0x11c>
 1c4:	mov	x0, x19
 1c8:	bl	0 <rewind>
 1cc:	mov	x0, x19
 1d0:	bl	0 <punpack>
 1d4:	cbz	x0, 29c <receive_test_result+0x104>
 1d8:	mov	x19, x0
 1dc:	bl	2cc <teardown_pipe>
 1e0:	bl	360 <setup_pipe>
 1e4:	bl	0 <tr_create>
 1e8:	mov	x20, x0
 1ec:	cbnz	w21, 218 <receive_test_result+0x80>
 1f0:	ldr	x8, [x19, #40]
 1f4:	cbnz	x8, 218 <receive_test_result+0x80>
 1f8:	ldr	w8, [x19]
 1fc:	cmp	w8, #0x1
 200:	b.ne	248 <receive_test_result+0xb0>  // b.any
 204:	mov	w9, #0x1                   	// #1
 208:	str	xzr, [x20, #48]
 20c:	mov	x8, x19
 210:	str	w9, [x20, #4]
 214:	b	240 <receive_test_result+0xa8>
 218:	ldr	w8, [x19, #4]
 21c:	cbnz	w8, 224 <receive_test_result+0x8c>
 220:	ldr	w8, [x19]
 224:	str	w8, [x20, #4]
 228:	ldr	x9, [x19, #40]
 22c:	cmp	w8, #0x2
 230:	mov	x8, x19
 234:	str	x9, [x20, #48]
 238:	str	xzr, [x19, #40]
 23c:	b.eq	260 <receive_test_result+0xc8>  // b.none
 240:	ldr	x9, [x8, #8]!
 244:	b	264 <receive_test_result+0xcc>
 248:	mov	w8, #0x2                   	// #2
 24c:	str	xzr, [x20, #48]
 250:	str	w8, [x20, #4]
 254:	ldr	w9, [x19, #48]
 258:	mov	x8, x19
 25c:	str	w9, [x20, #24]
 260:	ldr	x9, [x8, #24]!
 264:	str	x9, [x20, #8]
 268:	add	x9, x8, #0x8
 26c:	ldr	w10, [x9]
 270:	str	xzr, [x8]
 274:	mov	w8, #0xffffffff            	// #-1
 278:	mov	x0, x19
 27c:	str	w8, [x9]
 280:	str	w10, [x20, #16]
 284:	bl	0 <rcvmsg_free>
 288:	mov	x0, x20
 28c:	ldp	x20, x19, [sp, #32]
 290:	ldr	x21, [sp, #16]
 294:	ldp	x29, x30, [sp], #48
 298:	ret
 29c:	adrp	x0, 0 <send_failure_info>
 2a0:	adrp	x1, 0 <send_failure_info>
 2a4:	add	x0, x0, #0x0
 2a8:	add	x1, x1, #0x0
 2ac:	mov	w2, #0x85                  	// #133
 2b0:	bl	0 <eprintf>
 2b4:	adrp	x0, 0 <send_failure_info>
 2b8:	adrp	x1, 0 <send_failure_info>
 2bc:	add	x0, x0, #0x0
 2c0:	add	x1, x1, #0x0
 2c4:	mov	w2, #0x50                  	// #80
 2c8:	bl	0 <eprintf>

00000000000002cc <teardown_pipe>:
 2cc:	stp	x29, x30, [sp, #-32]!
 2d0:	stp	x20, x19, [sp, #16]
 2d4:	adrp	x20, 0 <send_failure_info>
 2d8:	ldr	x0, [x20]
 2dc:	mov	x29, sp
 2e0:	cbz	x0, 30c <teardown_pipe+0x40>
 2e4:	bl	0 <fclose>
 2e8:	adrp	x19, 0 <send_failure_info>
 2ec:	ldr	x0, [x19]
 2f0:	str	xzr, [x20]
 2f4:	cbz	x0, 33c <teardown_pipe+0x70>
 2f8:	bl	0 <unlink>
 2fc:	ldr	x0, [x19]
 300:	bl	0 <free>
 304:	str	xzr, [x19]
 308:	b	33c <teardown_pipe+0x70>
 30c:	adrp	x20, 0 <send_failure_info>
 310:	ldr	x0, [x20]
 314:	cbz	x0, 348 <teardown_pipe+0x7c>
 318:	bl	0 <fclose>
 31c:	adrp	x19, 0 <send_failure_info>
 320:	ldr	x0, [x19]
 324:	str	xzr, [x20]
 328:	cbz	x0, 33c <teardown_pipe+0x70>
 32c:	bl	0 <unlink>
 330:	ldr	x0, [x19]
 334:	bl	0 <free>
 338:	str	xzr, [x19]
 33c:	ldp	x20, x19, [sp, #16]
 340:	ldp	x29, x30, [sp], #32
 344:	ret
 348:	adrp	x0, 0 <send_failure_info>
 34c:	adrp	x1, 0 <send_failure_info>
 350:	add	x0, x0, #0x0
 354:	add	x1, x1, #0x0
 358:	mov	w2, #0x16a                 	// #362
 35c:	bl	0 <eprintf>

0000000000000360 <setup_pipe>:
 360:	stp	x29, x30, [sp, #-32]!
 364:	str	x19, [sp, #16]
 368:	adrp	x19, 0 <send_failure_info>
 36c:	ldr	x8, [x19]
 370:	mov	x29, sp
 374:	cbz	x8, 3b0 <setup_pipe+0x50>
 378:	adrp	x19, 0 <send_failure_info>
 37c:	ldr	x8, [x19]
 380:	cbnz	x8, 3d0 <setup_pipe+0x70>
 384:	adrp	x0, 0 <send_failure_info>
 388:	add	x0, x0, #0x0
 38c:	bl	408 <open_tmp_file>
 390:	str	x0, [x19]
 394:	cbnz	x0, 3c4 <setup_pipe+0x64>
 398:	adrp	x0, 0 <send_failure_info>
 39c:	adrp	x1, 0 <send_failure_info>
 3a0:	add	x0, x0, #0x0
 3a4:	add	x1, x1, #0x0
 3a8:	mov	w2, #0x146                 	// #326
 3ac:	bl	0 <eprintf>
 3b0:	adrp	x0, 0 <send_failure_info>
 3b4:	add	x0, x0, #0x0
 3b8:	bl	408 <open_tmp_file>
 3bc:	str	x0, [x19]
 3c0:	cbz	x0, 3e8 <setup_pipe+0x88>
 3c4:	ldr	x19, [sp, #16]
 3c8:	ldp	x29, x30, [sp], #32
 3cc:	ret
 3d0:	adrp	x0, 0 <send_failure_info>
 3d4:	adrp	x1, 0 <send_failure_info>
 3d8:	add	x0, x0, #0x0
 3dc:	add	x1, x1, #0x0
 3e0:	mov	w2, #0x14d                 	// #333
 3e4:	bl	0 <eprintf>
 3e8:	adrp	x0, 0 <send_failure_info>
 3ec:	adrp	x1, 0 <send_failure_info>
 3f0:	add	x0, x0, #0x0
 3f4:	add	x1, x1, #0x0
 3f8:	mov	w2, #0x13d                 	// #317
 3fc:	bl	0 <eprintf>

0000000000000400 <setup_messaging>:
 400:	b	360 <setup_pipe>

0000000000000404 <teardown_messaging>:
 404:	b	2cc <teardown_pipe>

0000000000000408 <open_tmp_file>:
 408:	stp	x29, x30, [sp, #-32]!
 40c:	stp	x20, x19, [sp, #16]
 410:	mov	x19, x0
 414:	str	xzr, [x0]
 418:	adrp	x0, 0 <send_failure_info>
 41c:	add	x0, x0, #0x0
 420:	mov	x29, sp
 424:	bl	0 <getenv>
 428:	adrp	x8, 0 <send_failure_info>
 42c:	add	x8, x8, #0x0
 430:	cmp	x0, #0x0
 434:	csel	x1, x8, x0, eq  // eq = none
 438:	adrp	x0, 0 <send_failure_info>
 43c:	add	x0, x0, #0x0
 440:	bl	0 <ck_strdup_printf>
 444:	str	x0, [x19]
 448:	bl	0 <mkstemp>
 44c:	tbnz	w0, #31, 484 <open_tmp_file+0x7c>
 450:	adrp	x1, 0 <send_failure_info>
 454:	add	x1, x1, #0x0
 458:	bl	0 <fdopen>
 45c:	ldr	x8, [x19]
 460:	mov	x20, x0
 464:	mov	x0, x8
 468:	bl	0 <unlink>
 46c:	cbz	x20, 474 <open_tmp_file+0x6c>
 470:	cbnz	w0, 488 <open_tmp_file+0x80>
 474:	ldr	x0, [x19]
 478:	bl	0 <free>
 47c:	str	xzr, [x19]
 480:	b	488 <open_tmp_file+0x80>
 484:	mov	x20, xzr
 488:	mov	x0, x20
 48c:	ldp	x20, x19, [sp, #16]
 490:	ldp	x29, x30, [sp], #32
 494:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	adrp	x8, 0 <check_set_max_msg_size>
   4:	str	x0, [x8]
   8:	ret

000000000000000c <pack>:
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	cbz	x1, 44 <pack+0x38>
  18:	cbz	x2, 4c <pack+0x40>
  1c:	mov	w3, w0
  20:	cmp	w0, #0x4
  24:	b.cs	58 <pack+0x4c>  // b.hs, b.nlast
  28:	adrp	x8, 0 <check_set_max_msg_size>
  2c:	add	x8, x8, #0x0
  30:	ldr	x3, [x8, w3, uxtw #3]
  34:	mov	x0, x1
  38:	mov	x1, x2
  3c:	ldp	x29, x30, [sp], #16
  40:	br	x3
  44:	mov	w0, #0xffffffff            	// #-1
  48:	b	50 <pack+0x44>
  4c:	mov	w0, wzr
  50:	ldp	x29, x30, [sp], #16
  54:	ret
  58:	adrp	x0, 0 <check_set_max_msg_size>
  5c:	adrp	x1, 0 <check_set_max_msg_size>
  60:	add	x0, x0, #0x0
  64:	add	x1, x1, #0x0
  68:	mov	w2, #0x7e                  	// #126
  6c:	bl	0 <eprintf>

0000000000000070 <upack>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	mov	x29, sp
  78:	str	x19, [sp, #16]
  7c:	str	x0, [x29, #24]
  80:	cbz	x0, c8 <upack+0x58>
  84:	mov	x8, x0
  88:	ldr	w9, [x8], #4
  8c:	mov	x19, x0
  90:	lsl	x9, x9, #32
  94:	rev	x3, x9
  98:	cmp	w3, #0x4
  9c:	str	x8, [x29, #24]
  a0:	str	w3, [x2]
  a4:	b.cs	d8 <upack+0x68>  // b.hs, b.nlast
  a8:	adrp	x8, 0 <check_set_max_msg_size>
  ac:	add	x8, x8, #0x0
  b0:	ldr	x8, [x8, x3, lsl #3]
  b4:	add	x0, x29, #0x18
  b8:	blr	x8
  bc:	ldr	w8, [x29, #24]
  c0:	sub	w0, w8, w19
  c4:	b	cc <upack+0x5c>
  c8:	mov	w0, #0xffffffff            	// #-1
  cc:	ldr	x19, [sp, #16]
  d0:	ldp	x29, x30, [sp], #32
  d4:	ret
  d8:	adrp	x0, 0 <check_set_max_msg_size>
  dc:	adrp	x1, 0 <check_set_max_msg_size>
  e0:	add	x0, x0, #0x0
  e4:	add	x1, x1, #0x0
  e8:	mov	w2, #0x8e                  	// #142
  ec:	bl	0 <eprintf>

00000000000000f0 <ppack>:
  f0:	sub	sp, sp, #0x120
  f4:	stp	x29, x30, [sp, #224]
  f8:	add	x29, sp, #0xe0
  fc:	mov	w8, w1
 100:	stp	x20, x19, [sp, #272]
 104:	mov	x19, x0
 108:	add	x1, x29, #0x18
 10c:	mov	w0, w8
 110:	str	x28, [sp, #240]
 114:	stp	x22, x21, [sp, #256]
 118:	str	xzr, [x29, #24]
 11c:	bl	c <pack>
 120:	mov	w20, w0
 124:	bl	1f0 <get_max_msg_size>
 128:	cmp	x0, w20, sxtw
 12c:	b.cc	1b4 <ppack+0xc4>  // b.lo, b.ul, b.last
 130:	mov	x0, sp
 134:	mov	w1, wzr
 138:	bl	0 <__sigsetjmp>
 13c:	cbnz	w0, 1cc <ppack+0xdc>
 140:	mov	x0, sp
 144:	sxtw	x20, w20
 148:	bl	0 <__pthread_register_cancel>
 14c:	adrp	x21, 0 <check_set_max_msg_size>
 150:	add	x21, x21, #0x0
 154:	mov	x0, x21
 158:	bl	0 <pthread_mutex_lock>
 15c:	ldr	x0, [x29, #24]
 160:	mov	w1, #0x1                   	// #1
 164:	mov	x2, x20
 168:	mov	x3, x19
 16c:	bl	0 <fwrite>
 170:	mov	x22, x0
 174:	mov	x0, x19
 178:	bl	0 <fflush>
 17c:	mov	x0, x21
 180:	bl	0 <pthread_mutex_unlock>
 184:	mov	x0, sp
 188:	bl	0 <__pthread_unregister_cancel>
 18c:	cmp	x22, x20
 190:	b.ne	1d8 <ppack+0xe8>  // b.any
 194:	ldr	x0, [x29, #24]
 198:	bl	0 <free>
 19c:	ldp	x20, x19, [sp, #272]
 1a0:	ldp	x22, x21, [sp, #256]
 1a4:	ldr	x28, [sp, #240]
 1a8:	ldp	x29, x30, [sp, #224]
 1ac:	add	sp, sp, #0x120
 1b0:	ret
 1b4:	adrp	x0, 0 <check_set_max_msg_size>
 1b8:	adrp	x1, 0 <check_set_max_msg_size>
 1bc:	add	x0, x0, #0x0
 1c0:	add	x1, x1, #0x0
 1c4:	mov	w2, #0x146                 	// #326
 1c8:	bl	0 <eprintf>
 1cc:	bl	234 <ppack_cleanup>
 1d0:	mov	x0, sp
 1d4:	bl	0 <__pthread_unwind_next>
 1d8:	adrp	x0, 0 <check_set_max_msg_size>
 1dc:	adrp	x1, 0 <check_set_max_msg_size>
 1e0:	add	x0, x0, #0x0
 1e4:	add	x1, x1, #0x0
 1e8:	mov	w2, #0x14f                 	// #335
 1ec:	bl	0 <eprintf>

00000000000001f0 <get_max_msg_size>:
 1f0:	stp	x29, x30, [sp, #-16]!
 1f4:	adrp	x0, 0 <check_set_max_msg_size>
 1f8:	add	x0, x0, #0x0
 1fc:	mov	x29, sp
 200:	bl	0 <getenv>
 204:	cbz	x0, 218 <get_max_msg_size+0x28>
 208:	mov	w2, #0xa                   	// #10
 20c:	mov	x1, xzr
 210:	bl	0 <strtoul>
 214:	cbnz	x0, 220 <get_max_msg_size+0x30>
 218:	adrp	x8, 0 <check_set_max_msg_size>
 21c:	ldr	x0, [x8]
 220:	cmp	x0, #0x0
 224:	mov	w8, #0x1000                	// #4096
 228:	csel	x0, x8, x0, eq  // eq = none
 22c:	ldp	x29, x30, [sp], #16
 230:	ret

0000000000000234 <ppack_cleanup>:
 234:	adrp	x0, 0 <check_set_max_msg_size>
 238:	add	x0, x0, #0x0
 23c:	b	0 <pthread_mutex_unlock>

0000000000000240 <rcvmsg_free>:
 240:	stp	x29, x30, [sp, #-32]!
 244:	str	x19, [sp, #16]
 248:	mov	x19, x0
 24c:	ldr	x0, [x0, #8]
 250:	mov	x29, sp
 254:	bl	0 <free>
 258:	ldr	x0, [x19, #24]
 25c:	bl	0 <free>
 260:	ldr	x0, [x19, #40]
 264:	bl	0 <free>
 268:	mov	x0, x19
 26c:	ldr	x19, [sp, #16]
 270:	ldp	x29, x30, [sp], #32
 274:	b	0 <free>

0000000000000278 <punpack>:
 278:	sub	sp, sp, #0x80
 27c:	stp	x28, x27, [sp, #48]
 280:	mov	x28, x0
 284:	mov	w0, #0x38                  	// #56
 288:	stp	x29, x30, [sp, #32]
 28c:	stp	x26, x25, [sp, #64]
 290:	stp	x24, x23, [sp, #80]
 294:	stp	x22, x21, [sp, #96]
 298:	stp	x20, x19, [sp, #112]
 29c:	add	x29, sp, #0x20
 2a0:	bl	0 <emalloc>
 2a4:	mov	w25, #0xffffffff            	// #-1
 2a8:	mov	x19, x0
 2ac:	stp	xzr, xzr, [x0]
 2b0:	str	xzr, [x0, #40]
 2b4:	str	xzr, [x0, #24]
 2b8:	str	w25, [x0, #48]
 2bc:	str	w25, [x0, #32]
 2c0:	str	w25, [x0, #16]
 2c4:	bl	1f0 <get_max_msg_size>
 2c8:	lsl	x0, x0, #1
 2cc:	bl	0 <emalloc>
 2d0:	mov	x21, x0
 2d4:	bl	1f0 <get_max_msg_size>
 2d8:	lsl	w1, w0, #1
 2dc:	mov	x0, x28
 2e0:	mov	x2, x21
 2e4:	bl	4bc <read_buf>
 2e8:	cmp	w0, #0x1
 2ec:	b.lt	434 <punpack+0x1bc>  // b.tstop
 2f0:	adrp	x20, 0 <check_set_max_msg_size>
 2f4:	mov	w27, w0
 2f8:	add	x20, x20, #0x0
 2fc:	mov	w22, w0
 300:	add	x1, sp, #0x8
 304:	sub	x2, x29, #0x4
 308:	mov	x0, x21
 30c:	bl	70 <upack>
 310:	cmn	w0, #0x1
 314:	b.eq	474 <punpack+0x1fc>  // b.none
 318:	ldur	w3, [x29, #-4]
 31c:	mov	w23, w0
 320:	cmp	w3, #0x3
 324:	b.hi	3e8 <punpack+0x170>  // b.pmore
 328:	adr	x8, 338 <punpack+0xc0>
 32c:	ldrb	w9, [x20, x3]
 330:	add	x8, x8, x9, lsl #2
 334:	br	x8
 338:	ldr	w8, [x19]
 33c:	ldr	w24, [sp, #8]
 340:	cbz	w8, 354 <punpack+0xdc>
 344:	ldr	x0, [x19, #8]
 348:	bl	0 <free>
 34c:	str	w25, [x19, #16]
 350:	str	xzr, [x19, #8]
 354:	str	w24, [x19]
 358:	b	3f0 <punpack+0x178>
 35c:	ldr	w8, [x19, #4]
 360:	cbnz	w8, 3ac <punpack+0x134>
 364:	ldr	w8, [x19]
 368:	ldr	x9, [sp, #16]
 36c:	ldr	w24, [sp, #8]
 370:	cmp	w8, #0x2
 374:	str	x9, [sp]
 378:	mov	w8, #0x8                   	// #8
 37c:	mov	w9, #0x18                  	// #24
 380:	csel	x25, x9, x8, eq  // eq = none
 384:	ldr	x0, [x19, x25]
 388:	mov	w8, #0x10                  	// #16
 38c:	mov	w9, #0x20                  	// #32
 390:	csel	x26, x9, x8, eq  // eq = none
 394:	bl	0 <free>
 398:	ldr	x0, [sp]
 39c:	str	w24, [x19, x26]
 3a0:	bl	0 <strdup>
 3a4:	str	x0, [x19, x25]
 3a8:	mov	w25, #0xffffffff            	// #-1
 3ac:	ldr	x0, [sp, #16]
 3b0:	b	3e0 <punpack+0x168>
 3b4:	ldr	w8, [sp, #8]
 3b8:	str	w8, [x19, #48]
 3bc:	b	3f0 <punpack+0x178>
 3c0:	ldr	x8, [x19, #40]
 3c4:	cbnz	x8, 3dc <punpack+0x164>
 3c8:	ldr	x0, [sp, #8]
 3cc:	bl	0 <strdup>
 3d0:	ldr	w8, [x19]
 3d4:	str	x0, [x19, #40]
 3d8:	str	w8, [x19, #4]
 3dc:	ldr	x0, [sp, #8]
 3e0:	bl	0 <free>
 3e4:	b	3f0 <punpack+0x178>
 3e8:	cmp	w3, #0x4
 3ec:	b.cs	4a4 <punpack+0x22c>  // b.hs, b.nlast
 3f0:	subs	w22, w22, w23
 3f4:	b.mi	48c <punpack+0x214>  // b.first
 3f8:	mov	w24, w22
 3fc:	add	x1, x21, w23, sxtw
 400:	mov	x0, x21
 404:	mov	x2, x24
 408:	bl	0 <memmove>
 40c:	cmp	w27, #0x1
 410:	b.lt	42c <punpack+0x1b4>  // b.tstop
 414:	add	x2, x21, x24
 418:	mov	x0, x28
 41c:	mov	w1, w23
 420:	bl	4bc <read_buf>
 424:	mov	w27, w0
 428:	add	w22, w0, w22
 42c:	cmp	w22, #0x0
 430:	b.gt	300 <punpack+0x88>
 434:	mov	x0, x21
 438:	bl	0 <free>
 43c:	ldr	w8, [x19]
 440:	cbnz	w8, 450 <punpack+0x1d8>
 444:	mov	x0, x19
 448:	bl	0 <free>
 44c:	mov	x19, xzr
 450:	mov	x0, x19
 454:	ldp	x20, x19, [sp, #112]
 458:	ldp	x22, x21, [sp, #96]
 45c:	ldp	x24, x23, [sp, #80]
 460:	ldp	x26, x25, [sp, #64]
 464:	ldp	x28, x27, [sp, #48]
 468:	ldp	x29, x30, [sp, #32]
 46c:	add	sp, sp, #0x80
 470:	ret
 474:	adrp	x0, 0 <check_set_max_msg_size>
 478:	adrp	x1, 0 <check_set_max_msg_size>
 47c:	add	x0, x0, #0x0
 480:	add	x1, x1, #0x0
 484:	mov	w2, #0x16a                 	// #362
 488:	bl	0 <eprintf>
 48c:	adrp	x0, 0 <check_set_max_msg_size>
 490:	adrp	x1, 0 <check_set_max_msg_size>
 494:	add	x0, x0, #0x0
 498:	add	x1, x1, #0x0
 49c:	mov	w2, #0x1e6                 	// #486
 4a0:	bl	0 <eprintf>
 4a4:	adrp	x0, 0 <check_set_max_msg_size>
 4a8:	adrp	x1, 0 <check_set_max_msg_size>
 4ac:	add	x0, x0, #0x0
 4b0:	add	x1, x1, #0x0
 4b4:	mov	w2, #0x194                 	// #404
 4b8:	bl	0 <eprintf>

00000000000004bc <read_buf>:
 4bc:	stp	x29, x30, [sp, #-32]!
 4c0:	stp	x20, x19, [sp, #16]
 4c4:	mov	x8, x2
 4c8:	mov	x20, x0
 4cc:	sxtw	x2, w1
 4d0:	mov	w1, #0x1                   	// #1
 4d4:	mov	x0, x8
 4d8:	mov	x3, x20
 4dc:	mov	x29, sp
 4e0:	bl	0 <fread>
 4e4:	mov	x19, x0
 4e8:	mov	x0, x20
 4ec:	bl	0 <ferror>
 4f0:	cbnz	w0, 504 <read_buf+0x48>
 4f4:	mov	w0, w19
 4f8:	ldp	x20, x19, [sp, #16]
 4fc:	ldp	x29, x30, [sp], #32
 500:	ret
 504:	adrp	x0, 0 <check_set_max_msg_size>
 508:	adrp	x1, 0 <check_set_max_msg_size>
 50c:	add	x0, x0, #0x0
 510:	add	x1, x1, #0x0
 514:	mov	w2, #0x15a                 	// #346
 518:	bl	0 <eprintf>

000000000000051c <pack_ctx>:
 51c:	stp	x29, x30, [sp, #-32]!
 520:	stp	x20, x19, [sp, #16]
 524:	mov	x20, x0
 528:	mov	w0, #0x8                   	// #8
 52c:	mov	x29, sp
 530:	mov	x19, x1
 534:	bl	0 <emalloc>
 538:	str	x0, [x20]
 53c:	str	wzr, [x0]
 540:	ldr	w9, [x19]
 544:	mov	x8, x0
 548:	mov	w0, #0x8                   	// #8
 54c:	rev	w9, w9
 550:	str	w9, [x8, #4]
 554:	ldp	x20, x19, [sp, #16]
 558:	ldp	x29, x30, [sp], #32
 55c:	ret

0000000000000560 <pack_fail>:
 560:	stp	x29, x30, [sp, #-48]!
 564:	stp	x20, x19, [sp, #32]
 568:	ldr	x8, [x1]
 56c:	str	x21, [sp, #16]
 570:	mov	x19, x1
 574:	mov	x21, x0
 578:	mov	x29, sp
 57c:	cbz	x8, 590 <pack_fail+0x30>
 580:	mov	x0, x8
 584:	bl	0 <strlen>
 588:	add	w20, w0, #0x8
 58c:	b	594 <pack_fail+0x34>
 590:	mov	w20, #0x8                   	// #8
 594:	sxtw	x0, w20
 598:	bl	0 <emalloc>
 59c:	mov	w8, #0x1000000             	// #16777216
 5a0:	str	x0, [x21]
 5a4:	str	w8, [x0], #4
 5a8:	str	x0, [x29, #24]
 5ac:	ldr	x1, [x19]
 5b0:	add	x0, x29, #0x18
 5b4:	bl	690 <pack_str>
 5b8:	mov	w0, w20
 5bc:	ldp	x20, x19, [sp, #32]
 5c0:	ldr	x21, [sp, #16]
 5c4:	ldp	x29, x30, [sp], #48
 5c8:	ret

00000000000005cc <pack_loc>:
 5cc:	stp	x29, x30, [sp, #-48]!
 5d0:	stp	x20, x19, [sp, #32]
 5d4:	ldr	x8, [x1, #8]
 5d8:	str	x21, [sp, #16]
 5dc:	mov	x19, x1
 5e0:	mov	x21, x0
 5e4:	mov	x29, sp
 5e8:	cbz	x8, 5fc <pack_loc+0x30>
 5ec:	mov	x0, x8
 5f0:	bl	0 <strlen>
 5f4:	add	w20, w0, #0xc
 5f8:	b	600 <pack_loc+0x34>
 5fc:	mov	w20, #0xc                   	// #12
 600:	sxtw	x0, w20
 604:	bl	0 <emalloc>
 608:	mov	w8, #0x2000000             	// #33554432
 60c:	str	x0, [x21]
 610:	str	w8, [x0], #4
 614:	str	x0, [x29, #24]
 618:	ldr	x1, [x19, #8]
 61c:	add	x0, x29, #0x18
 620:	bl	690 <pack_str>
 624:	ldr	w8, [x19]
 628:	ldr	x9, [x29, #24]
 62c:	mov	w0, w20
 630:	ldr	x21, [sp, #16]
 634:	rev	w8, w8
 638:	str	w8, [x9]
 63c:	ldp	x20, x19, [sp, #32]
 640:	ldp	x29, x30, [sp], #48
 644:	ret

0000000000000648 <pack_duration>:
 648:	stp	x29, x30, [sp, #-32]!
 64c:	stp	x20, x19, [sp, #16]
 650:	mov	x20, x0
 654:	mov	w0, #0x8                   	// #8
 658:	mov	x29, sp
 65c:	mov	x19, x1
 660:	bl	0 <emalloc>
 664:	mov	w9, #0x3000000             	// #50331648
 668:	str	x0, [x20]
 66c:	str	w9, [x0]
 670:	ldr	w9, [x19]
 674:	mov	x8, x0
 678:	mov	w0, #0x8                   	// #8
 67c:	rev	w9, w9
 680:	str	w9, [x8, #4]
 684:	ldp	x20, x19, [sp, #16]
 688:	ldp	x29, x30, [sp], #32
 68c:	ret

0000000000000690 <pack_str>:
 690:	stp	x29, x30, [sp, #-48]!
 694:	stp	x20, x19, [sp, #32]
 698:	mov	x20, x1
 69c:	mov	x19, x0
 6a0:	str	x21, [sp, #16]
 6a4:	mov	x29, sp
 6a8:	cbz	x1, 6bc <pack_str+0x2c>
 6ac:	mov	x0, x20
 6b0:	bl	0 <strlen>
 6b4:	mov	x21, x0
 6b8:	b	6c0 <pack_str+0x30>
 6bc:	mov	w21, wzr
 6c0:	ldr	x8, [x19]
 6c4:	rev	w9, w21
 6c8:	cmp	w21, #0x1
 6cc:	str	w9, [x8]
 6d0:	ldr	x8, [x19]
 6d4:	add	x0, x8, #0x4
 6d8:	str	x0, [x19]
 6dc:	b.lt	6f8 <pack_str+0x68>  // b.tstop
 6e0:	mov	w2, w21
 6e4:	mov	x1, x20
 6e8:	bl	0 <memcpy>
 6ec:	ldr	x8, [x19]
 6f0:	add	x8, x8, w21, uxtw
 6f4:	str	x8, [x19]
 6f8:	ldp	x20, x19, [sp, #32]
 6fc:	ldr	x21, [sp, #16]
 700:	ldp	x29, x30, [sp], #48
 704:	ret

0000000000000708 <upack_ctx>:
 708:	ldr	x8, [x0]
 70c:	ldr	w9, [x8], #4
 710:	rev	w9, w9
 714:	str	x8, [x0]
 718:	str	w9, [x1]
 71c:	ret

0000000000000720 <upack_fail>:
 720:	stp	x29, x30, [sp, #-32]!
 724:	str	x19, [sp, #16]
 728:	mov	x29, sp
 72c:	mov	x19, x1
 730:	bl	798 <upack_str>
 734:	str	x0, [x19]
 738:	ldr	x19, [sp, #16]
 73c:	ldp	x29, x30, [sp], #32
 740:	ret

0000000000000744 <upack_loc>:
 744:	stp	x29, x30, [sp, #-32]!
 748:	stp	x20, x19, [sp, #16]
 74c:	mov	x29, sp
 750:	mov	x19, x1
 754:	mov	x20, x0
 758:	bl	798 <upack_str>
 75c:	str	x0, [x19, #8]
 760:	ldr	x8, [x20]
 764:	ldr	w9, [x8], #4
 768:	rev	w9, w9
 76c:	str	x8, [x20]
 770:	str	w9, [x19]
 774:	ldp	x20, x19, [sp, #16]
 778:	ldp	x29, x30, [sp], #32
 77c:	ret

0000000000000780 <upack_duration>:
 780:	ldr	x8, [x0]
 784:	ldr	w9, [x8], #4
 788:	rev	w9, w9
 78c:	str	x8, [x0]
 790:	str	w9, [x1]
 794:	ret

0000000000000798 <upack_str>:
 798:	stp	x29, x30, [sp, #-48]!
 79c:	stp	x20, x19, [sp, #32]
 7a0:	ldr	x8, [x0]
 7a4:	str	x21, [sp, #16]
 7a8:	mov	x29, sp
 7ac:	ldrb	w9, [x8]
 7b0:	ldrb	w10, [x8, #1]
 7b4:	ldrb	w11, [x8, #2]
 7b8:	ldrb	w12, [x8, #3]
 7bc:	lsl	w9, w9, #24
 7c0:	sxtw	x9, w9
 7c4:	bfi	x9, x10, #16, #8
 7c8:	bfi	x9, x11, #8, #8
 7cc:	orr	x21, x9, x12
 7d0:	add	x8, x8, #0x4
 7d4:	cmp	w21, #0x1
 7d8:	str	x8, [x0]
 7dc:	b.lt	810 <upack_str+0x78>  // b.tstop
 7e0:	mov	x19, x0
 7e4:	add	x0, x21, #0x1
 7e8:	bl	0 <emalloc>
 7ec:	ldr	x1, [x19]
 7f0:	mov	w2, w21
 7f4:	mov	x20, x0
 7f8:	bl	0 <memcpy>
 7fc:	strb	wzr, [x20, w21, uxtw]
 800:	ldr	x8, [x19]
 804:	add	x8, x8, w21, uxtw
 808:	str	x8, [x19]
 80c:	b	820 <upack_str+0x88>
 810:	mov	w0, #0x1                   	// #1
 814:	bl	0 <emalloc>
 818:	mov	x20, x0
 81c:	strb	wzr, [x0]
 820:	mov	x0, x20
 824:	ldp	x20, x19, [sp, #32]
 828:	ldr	x21, [sp, #16]
 82c:	ldp	x29, x30, [sp], #48
 830:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	adrp	x8, 0 <stdout>
   4:	ldr	x8, [x8]
   8:	mov	w2, w1
   c:	mov	x1, x0
  10:	mov	x0, x8
  14:	b	18 <srunner_fprint>

0000000000000018 <srunner_fprint>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	stp	x22, x21, [sp, #16]
  20:	stp	x20, x19, [sp, #32]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	cmp	w2, #0x4
  30:	mov	x19, x0
  34:	mov	x29, sp
  38:	b.ne	44 <srunner_fprint+0x2c>  // b.any
  3c:	bl	bc <get_env_printmode>
  40:	mov	w20, w0
  44:	cbz	w20, 70 <srunner_fprint+0x58>
  48:	mov	x0, x21
  4c:	bl	0 <sr_stat_str>
  50:	mov	x22, x0
  54:	adrp	x1, 0 <srunner_print>
  58:	add	x1, x1, #0x0
  5c:	mov	x0, x19
  60:	mov	x2, x22
  64:	bl	0 <fprintf>
  68:	mov	x0, x22
  6c:	bl	0 <free>
  70:	ldr	x21, [x21, #16]
  74:	mov	x0, x21
  78:	bl	0 <check_list_front>
  7c:	mov	x0, x21
  80:	bl	0 <check_list_at_end>
  84:	cbnz	w0, ac <srunner_fprint+0x94>
  88:	mov	x0, x21
  8c:	bl	0 <check_list_val>
  90:	mov	x1, x0
  94:	mov	x0, x19
  98:	mov	w2, w20
  9c:	bl	268 <tr_fprint>
  a0:	mov	x0, x21
  a4:	bl	0 <check_list_advance>
  a8:	b	7c <srunner_fprint+0x64>
  ac:	ldp	x20, x19, [sp, #32]
  b0:	ldp	x22, x21, [sp, #16]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

00000000000000bc <get_env_printmode>:
  bc:	stp	x29, x30, [sp, #-32]!
  c0:	adrp	x0, 0 <srunner_print>
  c4:	add	x0, x0, #0x0
  c8:	str	x19, [sp, #16]
  cc:	mov	x29, sp
  d0:	bl	0 <getenv>
  d4:	cbz	x0, 120 <get_env_printmode+0x64>
  d8:	adrp	x1, 0 <srunner_print>
  dc:	add	x1, x1, #0x0
  e0:	mov	x19, x0
  e4:	bl	0 <strcmp>
  e8:	cbz	w0, 12c <get_env_printmode+0x70>
  ec:	adrp	x1, 0 <srunner_print>
  f0:	add	x1, x1, #0x0
  f4:	mov	x0, x19
  f8:	bl	0 <strcmp>
  fc:	cbz	w0, 128 <get_env_printmode+0x6c>
 100:	adrp	x1, 0 <srunner_print>
 104:	add	x1, x1, #0x0
 108:	mov	x0, x19
 10c:	bl	0 <strcmp>
 110:	cmp	w0, #0x0
 114:	mov	w8, #0x2                   	// #2
 118:	cinc	w0, w8, eq  // eq = none
 11c:	b	12c <get_env_printmode+0x70>
 120:	mov	w0, #0x2                   	// #2
 124:	b	12c <get_env_printmode+0x70>
 128:	mov	w0, #0x1                   	// #1
 12c:	ldr	x19, [sp, #16]
 130:	ldp	x29, x30, [sp], #32
 134:	ret

0000000000000138 <fprint_xml_esc>:
 138:	stp	x29, x30, [sp, #-96]!
 13c:	stp	x26, x25, [sp, #32]
 140:	stp	x24, x23, [sp, #48]
 144:	stp	x22, x21, [sp, #64]
 148:	adrp	x21, 0 <srunner_print>
 14c:	adrp	x22, 0 <srunner_print>
 150:	adrp	x23, 0 <srunner_print>
 154:	adrp	x24, 0 <srunner_print>
 158:	adrp	x25, 0 <srunner_print>
 15c:	adrp	x26, 0 <srunner_print>
 160:	stp	x28, x27, [sp, #16]
 164:	stp	x20, x19, [sp, #80]
 168:	mov	x19, x1
 16c:	mov	x20, x0
 170:	add	x21, x21, #0x0
 174:	add	x22, x22, #0x0
 178:	add	x23, x23, #0x0
 17c:	mov	w27, #0x1                   	// #1
 180:	mov	w28, #0x2600                	// #9728
 184:	add	x24, x24, #0x0
 188:	add	x25, x25, #0x0
 18c:	add	x26, x26, #0x0
 190:	mov	x29, sp
 194:	ldrb	w2, [x19]
 198:	cmp	w2, #0x26
 19c:	b.le	1c0 <fprint_xml_esc+0x88>
 1a0:	cmp	w2, #0x27
 1a4:	b.eq	1d8 <fprint_xml_esc+0xa0>  // b.none
 1a8:	cmp	w2, #0x3c
 1ac:	b.eq	1e8 <fprint_xml_esc+0xb0>  // b.none
 1b0:	cmp	w2, #0x3e
 1b4:	b.ne	200 <fprint_xml_esc+0xc8>  // b.any
 1b8:	mov	x0, x26
 1bc:	b	1ec <fprint_xml_esc+0xb4>
 1c0:	cmp	w2, #0x22
 1c4:	b.eq	1e0 <fprint_xml_esc+0xa8>  // b.none
 1c8:	cmp	w2, #0x26
 1cc:	b.ne	1fc <fprint_xml_esc+0xc4>  // b.any
 1d0:	mov	x0, x22
 1d4:	b	1ec <fprint_xml_esc+0xb4>
 1d8:	mov	x0, x24
 1dc:	b	1ec <fprint_xml_esc+0xb4>
 1e0:	mov	x0, x21
 1e4:	b	1ec <fprint_xml_esc+0xb4>
 1e8:	mov	x0, x25
 1ec:	mov	x1, x20
 1f0:	bl	0 <fputs>
 1f4:	add	x19, x19, #0x1
 1f8:	b	194 <fprint_xml_esc+0x5c>
 1fc:	cbz	w2, 24c <fprint_xml_esc+0x114>
 200:	sub	w8, w2, #0x20
 204:	cmp	w8, #0x5e
 208:	b.hi	21c <fprint_xml_esc+0xe4>  // b.pmore
 20c:	mov	w0, w2
 210:	mov	x1, x20
 214:	bl	0 <fputc>
 218:	b	1f4 <fprint_xml_esc+0xbc>
 21c:	cmp	w2, #0xd
 220:	b.hi	240 <fprint_xml_esc+0x108>  // b.pmore
 224:	lsl	w8, w27, w2
 228:	tst	w8, w28
 22c:	b.eq	240 <fprint_xml_esc+0x108>  // b.none
 230:	mov	x0, x20
 234:	mov	x1, x23
 238:	bl	0 <fprintf>
 23c:	b	1f4 <fprint_xml_esc+0xbc>
 240:	cmp	w2, #0x20
 244:	b.cc	1f4 <fprint_xml_esc+0xbc>  // b.lo, b.ul, b.last
 248:	b	230 <fprint_xml_esc+0xf8>
 24c:	ldp	x20, x19, [sp, #80]
 250:	ldp	x22, x21, [sp, #64]
 254:	ldp	x24, x23, [sp, #48]
 258:	ldp	x26, x25, [sp, #32]
 25c:	ldp	x28, x27, [sp, #16]
 260:	ldp	x29, x30, [sp], #96
 264:	ret

0000000000000268 <tr_fprint>:
 268:	stp	x29, x30, [sp, #-32]!
 26c:	stp	x20, x19, [sp, #16]
 270:	mov	x20, x1
 274:	cmp	w2, #0x4
 278:	mov	x19, x0
 27c:	mov	x29, sp
 280:	b.ne	28c <tr_fprint+0x24>  // b.any
 284:	bl	bc <get_env_printmode>
 288:	mov	w2, w0
 28c:	ldr	w8, [x20]
 290:	cmp	w2, #0x3
 294:	b.cc	2a0 <tr_fprint+0x38>  // b.lo, b.ul, b.last
 298:	cmp	w8, #0x1
 29c:	b.eq	2b0 <tr_fprint+0x48>  // b.none
 2a0:	cmp	w2, #0x2
 2a4:	b.cc	2e0 <tr_fprint+0x78>  // b.lo, b.ul, b.last
 2a8:	cmp	w8, #0x1
 2ac:	b.eq	2e0 <tr_fprint+0x78>  // b.none
 2b0:	mov	x0, x20
 2b4:	bl	0 <tr_str>
 2b8:	mov	x20, x0
 2bc:	adrp	x1, 0 <srunner_print>
 2c0:	add	x1, x1, #0x0
 2c4:	mov	x0, x19
 2c8:	mov	x2, x20
 2cc:	bl	0 <fprintf>
 2d0:	mov	x0, x20
 2d4:	ldp	x20, x19, [sp, #16]
 2d8:	ldp	x29, x30, [sp], #32
 2dc:	b	0 <free>
 2e0:	ldp	x20, x19, [sp, #16]
 2e4:	ldp	x29, x30, [sp], #32
 2e8:	ret

00000000000002ec <tr_xmlprint>:
 2ec:	sub	sp, sp, #0x50
 2f0:	stp	x29, x30, [sp, #16]
 2f4:	stp	x22, x21, [sp, #48]
 2f8:	stp	x20, x19, [sp, #64]
 2fc:	ldr	w8, [x1]
 300:	mov	x20, x1
 304:	mov	x19, x0
 308:	str	x23, [sp, #32]
 30c:	cmp	w8, #0x3
 310:	add	x29, sp, #0x10
 314:	b.eq	354 <tr_xmlprint+0x68>  // b.none
 318:	cmp	w8, #0x2
 31c:	b.eq	33c <tr_xmlprint+0x50>  // b.none
 320:	cmp	w8, #0x1
 324:	b.ne	540 <tr_xmlprint+0x254>  // b.any
 328:	mov	x8, #0x7573                	// #30067
 32c:	movk	x8, #0x6363, lsl #16
 330:	movk	x8, #0x7365, lsl #32
 334:	movk	x8, #0x73, lsl #48
 338:	b	34c <tr_xmlprint+0x60>
 33c:	mov	x8, #0x6166                	// #24934
 340:	movk	x8, #0x6c69, lsl #16
 344:	movk	x8, #0x7275, lsl #32
 348:	movk	x8, #0x65, lsl #48
 34c:	str	x8, [sp]
 350:	b	368 <tr_xmlprint+0x7c>
 354:	mov	w9, #0x7265                	// #29285
 358:	mov	w8, #0x72                  	// #114
 35c:	movk	w9, #0x6f72, lsl #16
 360:	strh	w8, [sp, #4]
 364:	str	w9, [sp]
 368:	ldr	x21, [x20, #8]
 36c:	cbz	x21, 3b8 <tr_xmlprint+0xcc>
 370:	mov	w1, #0x2f                  	// #47
 374:	mov	x0, x21
 378:	bl	0 <strrchr>
 37c:	mov	x22, x0
 380:	cbnz	x0, 398 <tr_xmlprint+0xac>
 384:	mov	w1, #0x5c                  	// #92
 388:	mov	x0, x21
 38c:	bl	0 <strrchr>
 390:	mov	x22, x0
 394:	cbz	x0, 528 <tr_xmlprint+0x23c>
 398:	mov	x0, x21
 39c:	bl	0 <strdup>
 3a0:	ldr	x8, [x20, #8]
 3a4:	mov	x21, x0
 3a8:	sub	x8, x22, x8
 3ac:	add	x22, x22, #0x1
 3b0:	strb	wzr, [x0, x8]
 3b4:	b	3bc <tr_xmlprint+0xd0>
 3b8:	mov	x22, xzr
 3bc:	adrp	x1, 0 <srunner_print>
 3c0:	add	x1, x1, #0x0
 3c4:	mov	x2, sp
 3c8:	mov	x0, x19
 3cc:	bl	0 <fprintf>
 3d0:	adrp	x23, 0 <srunner_print>
 3d4:	add	x23, x23, #0x0
 3d8:	cmp	x21, #0x0
 3dc:	adrp	x1, 0 <srunner_print>
 3e0:	csel	x2, x23, x21, eq  // eq = none
 3e4:	add	x1, x1, #0x0
 3e8:	mov	x0, x19
 3ec:	bl	0 <fprintf>
 3f0:	ldr	w3, [x20, #16]
 3f4:	cmp	x22, #0x0
 3f8:	adrp	x1, 0 <srunner_print>
 3fc:	csel	x2, x23, x22, eq  // eq = none
 400:	add	x1, x1, #0x0
 404:	mov	x0, x19
 408:	bl	0 <fprintf>
 40c:	ldr	x2, [x20, #40]
 410:	adrp	x1, 0 <srunner_print>
 414:	add	x1, x1, #0x0
 418:	mov	x0, x19
 41c:	bl	0 <fprintf>
 420:	ldr	w2, [x20, #20]
 424:	adrp	x1, 0 <srunner_print>
 428:	add	x1, x1, #0x0
 42c:	mov	x0, x19
 430:	bl	0 <fprintf>
 434:	ldrsw	x8, [x20, #24]
 438:	mov	w9, #0xde83                	// #56963
 43c:	movk	w9, #0x431b, lsl #16
 440:	mov	w10, #0x4240                	// #16960
 444:	mul	x9, x8, x9
 448:	lsr	x11, x9, #32
 44c:	lsr	x9, x9, #63
 450:	movk	w10, #0xf, lsl #16
 454:	add	w9, w9, w11, asr #18
 458:	cmp	w8, #0x0
 45c:	msub	w8, w9, w10, w8
 460:	adrp	x1, 0 <srunner_print>
 464:	csinv	w2, w9, wzr, ge  // ge = tcont
 468:	csel	w3, wzr, w8, lt  // lt = tstop
 46c:	add	x1, x1, #0x0
 470:	mov	x0, x19
 474:	bl	0 <fprintf>
 478:	adrp	x0, 0 <srunner_print>
 47c:	add	x0, x0, #0x0
 480:	mov	w1, #0x13                  	// #19
 484:	mov	w2, #0x1                   	// #1
 488:	mov	x3, x19
 48c:	bl	0 <fwrite>
 490:	ldr	x1, [x20, #32]
 494:	mov	x0, x19
 498:	bl	138 <fprint_xml_esc>
 49c:	adrp	x0, 0 <srunner_print>
 4a0:	add	x0, x0, #0x0
 4a4:	mov	w1, #0xf                   	// #15
 4a8:	mov	w2, #0x1                   	// #1
 4ac:	mov	x3, x19
 4b0:	bl	0 <fwrite>
 4b4:	adrp	x0, 0 <srunner_print>
 4b8:	add	x0, x0, #0x0
 4bc:	mov	w1, #0xf                   	// #15
 4c0:	mov	w2, #0x1                   	// #1
 4c4:	mov	x3, x19
 4c8:	bl	0 <fwrite>
 4cc:	ldr	x1, [x20, #48]
 4d0:	mov	x0, x19
 4d4:	bl	138 <fprint_xml_esc>
 4d8:	adrp	x0, 0 <srunner_print>
 4dc:	add	x0, x0, #0x0
 4e0:	mov	w1, #0xb                   	// #11
 4e4:	mov	w2, #0x1                   	// #1
 4e8:	mov	x3, x19
 4ec:	bl	0 <fwrite>
 4f0:	adrp	x0, 0 <srunner_print>
 4f4:	add	x0, x0, #0x0
 4f8:	mov	w1, #0xc                   	// #12
 4fc:	mov	w2, #0x1                   	// #1
 500:	mov	x3, x19
 504:	bl	0 <fwrite>
 508:	mov	x0, x21
 50c:	bl	0 <free>
 510:	ldp	x20, x19, [sp, #64]
 514:	ldp	x22, x21, [sp, #48]
 518:	ldr	x23, [sp, #32]
 51c:	ldp	x29, x30, [sp, #16]
 520:	add	sp, sp, #0x50
 524:	ret
 528:	adrp	x0, 0 <srunner_print>
 52c:	add	x0, x0, #0x0
 530:	bl	0 <strdup>
 534:	ldr	x22, [x20, #8]
 538:	mov	x21, x0
 53c:	b	3bc <tr_xmlprint+0xd0>
 540:	bl	0 <abort>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_fork_status>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	ldr	w19, [x0, #56]
   c:	mov	x29, sp
  10:	cbnz	w19, 3c <srunner_fork_status+0x3c>
  14:	adrp	x0, 0 <srunner_fork_status>
  18:	add	x0, x0, #0x0
  1c:	bl	0 <getenv>
  20:	mov	w19, #0x1                   	// #1
  24:	cbz	x0, 3c <srunner_fork_status+0x3c>
  28:	adrp	x1, 0 <srunner_fork_status>
  2c:	add	x1, x1, #0x0
  30:	bl	0 <strcmp>
  34:	cmp	w0, #0x0
  38:	cinc	w19, w19, eq  // eq = none
  3c:	mov	w0, w19
  40:	ldr	x19, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret

000000000000004c <srunner_set_fork_status>:
  4c:	str	w1, [x0, #56]
  50:	ret

0000000000000054 <srunner_run_all>:
  54:	mov	w5, w1
  58:	mov	x1, xzr
  5c:	mov	x2, xzr
  60:	mov	x3, xzr
  64:	mov	x4, xzr
  68:	b	7c <srunner_run_tagged>

000000000000006c <srunner_run>:
  6c:	mov	w5, w3
  70:	mov	x3, xzr
  74:	mov	x4, xzr
  78:	b	7c <srunner_run_tagged>

000000000000007c <srunner_run_tagged>:
  7c:	sub	sp, sp, #0x130
  80:	stp	x26, x25, [sp, #240]
  84:	stp	x24, x23, [sp, #256]
  88:	stp	x22, x21, [sp, #272]
  8c:	stp	x20, x19, [sp, #288]
  90:	mov	w20, w5
  94:	mov	x22, x4
  98:	mov	x23, x3
  9c:	mov	x25, x2
  a0:	mov	x26, x1
  a4:	mov	x24, x0
  a8:	stp	x29, x30, [sp, #208]
  ac:	stp	x28, x27, [sp, #224]
  b0:	add	x29, sp, #0xd0
  b4:	cbz	x2, cc <srunner_run_tagged+0x50>
  b8:	cbz	x26, e0 <srunner_run_tagged+0x64>
  bc:	cbz	x23, f4 <srunner_run_tagged+0x78>
  c0:	cbz	x22, 108 <srunner_run_tagged+0x8c>
  c4:	cbnz	x24, 11c <srunner_run_tagged+0xa0>
  c8:	b	780 <srunner_run_tagged+0x704>
  cc:	adrp	x0, 0 <srunner_fork_status>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <getenv>
  d8:	mov	x25, x0
  dc:	cbnz	x26, bc <srunner_run_tagged+0x40>
  e0:	adrp	x0, 0 <srunner_fork_status>
  e4:	add	x0, x0, #0x0
  e8:	bl	0 <getenv>
  ec:	mov	x26, x0
  f0:	cbnz	x23, c0 <srunner_run_tagged+0x44>
  f4:	adrp	x0, 0 <srunner_fork_status>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <getenv>
 100:	mov	x23, x0
 104:	cbnz	x22, c4 <srunner_run_tagged+0x48>
 108:	adrp	x0, 0 <srunner_fork_status>
 10c:	add	x0, x0, #0x0
 110:	bl	0 <getenv>
 114:	mov	x22, x0
 118:	cbz	x24, 780 <srunner_run_tagged+0x704>
 11c:	cmp	w20, #0x5
 120:	b.cs	8f0 <srunner_run_tagged+0x874>  // b.hs, b.nlast
 124:	adrp	x21, 0 <srunner_fork_status>
 128:	add	x21, x21, #0x0
 12c:	add	x0, x21, #0x8
 130:	mov	w2, #0x90                  	// #144
 134:	mov	w1, wzr
 138:	bl	0 <memset>
 13c:	adrp	x19, 0 <srunner_fork_status>
 140:	adrp	x2, 0 <srunner_fork_status>
 144:	add	x19, x19, #0x0
 148:	add	x2, x2, #0x0
 14c:	mov	w0, #0xe                   	// #14
 150:	mov	x1, x21
 154:	str	x19, [x21]
 158:	bl	0 <sigaction>
 15c:	adrp	x21, 0 <srunner_fork_status>
 160:	add	x21, x21, #0x0
 164:	add	x0, x21, #0x8
 168:	mov	w2, #0x90                  	// #144
 16c:	mov	w1, wzr
 170:	bl	0 <memset>
 174:	adrp	x2, 0 <srunner_fork_status>
 178:	add	x2, x2, #0x0
 17c:	mov	w0, #0x2                   	// #2
 180:	mov	x1, x21
 184:	str	x19, [x21]
 188:	bl	0 <sigaction>
 18c:	adrp	x21, 0 <srunner_fork_status>
 190:	add	x21, x21, #0x0
 194:	add	x0, x21, #0x8
 198:	mov	w2, #0x90                  	// #144
 19c:	mov	w1, wzr
 1a0:	bl	0 <memset>
 1a4:	adrp	x2, 0 <srunner_fork_status>
 1a8:	add	x2, x2, #0x0
 1ac:	mov	w0, #0xf                   	// #15
 1b0:	mov	x1, x21
 1b4:	str	x19, [x21]
 1b8:	bl	0 <sigaction>
 1bc:	mov	x0, x24
 1c0:	bl	0 <srunner_fork_status>
 1c4:	bl	0 <set_fork_status>
 1c8:	bl	0 <setup_messaging>
 1cc:	mov	x0, x24
 1d0:	mov	w1, w20
 1d4:	bl	0 <srunner_init_logging>
 1d8:	mov	x0, x24
 1dc:	bl	0 <log_srunner_start>
 1e0:	ldr	x20, [x24]
 1e4:	mov	x0, x23
 1e8:	bl	0 <tag_string_to_list>
 1ec:	mov	x19, x0
 1f0:	mov	x0, x22
 1f4:	bl	0 <tag_string_to_list>
 1f8:	str	x0, [sp, #72]
 1fc:	mov	x0, x20
 200:	bl	0 <check_list_front>
 204:	mov	x0, x20
 208:	bl	0 <check_list_at_end>
 20c:	cbnz	w0, 6f4 <srunner_run_tagged+0x678>
 210:	sub	x8, x29, #0x58
 214:	add	x8, x8, #0x10
 218:	stp	x24, x8, [sp, #88]
 21c:	stp	x23, x22, [sp, #40]
 220:	stp	x26, x25, [sp, #24]
 224:	stp	x20, x19, [sp, #8]
 228:	mov	x0, x20
 22c:	bl	0 <check_list_val>
 230:	mov	x27, x0
 234:	cbz	x26, 248 <srunner_run_tagged+0x1cc>
 238:	ldr	x1, [x27]
 23c:	mov	x0, x26
 240:	bl	0 <strcmp>
 244:	cbnz	w0, 6e0 <srunner_run_tagged+0x664>
 248:	cbz	x25, 25c <srunner_run_tagged+0x1e0>
 24c:	mov	x0, x27
 250:	mov	x1, x25
 254:	bl	0 <suite_tcase>
 258:	cbz	w0, 6e0 <srunner_run_tagged+0x664>
 25c:	mov	x0, x24
 260:	mov	x1, x27
 264:	bl	0 <log_suite_start>
 268:	ldr	x21, [x27, #8]
 26c:	mov	x0, x21
 270:	bl	0 <check_list_front>
 274:	mov	x0, x21
 278:	bl	0 <check_list_at_end>
 27c:	cbnz	w0, 6d4 <srunner_run_tagged+0x658>
 280:	stp	x27, x21, [sp, #56]
 284:	mov	x0, x21
 288:	bl	0 <check_list_val>
 28c:	mov	x28, x0
 290:	cbz	x25, 2a4 <srunner_run_tagged+0x228>
 294:	ldr	x1, [x28]
 298:	mov	x0, x25
 29c:	bl	0 <strcmp>
 2a0:	cbnz	w0, 6c0 <srunner_run_tagged+0x644>
 2a4:	cbz	x23, 2b8 <srunner_run_tagged+0x23c>
 2a8:	mov	x0, x28
 2ac:	mov	x1, x19
 2b0:	bl	0 <tcase_matching_tag>
 2b4:	cbz	w0, 6c0 <srunner_run_tagged+0x644>
 2b8:	cbz	x22, 2cc <srunner_run_tagged+0x250>
 2bc:	ldr	x1, [sp, #72]
 2c0:	mov	x0, x28
 2c4:	bl	0 <tcase_matching_tag>
 2c8:	cbnz	w0, 6c0 <srunner_run_tagged+0x644>
 2cc:	mov	w0, #0x2                   	// #2
 2d0:	bl	0 <set_fork_status>
 2d4:	ldr	x0, [x28, #32]
 2d8:	ldr	x2, [x28]
 2dc:	adrp	x3, 0 <srunner_fork_status>
 2e0:	mov	w1, #0x2                   	// #2
 2e4:	add	x3, x3, #0x0
 2e8:	bl	a78 <srunner_run_setup>
 2ec:	mov	x21, x0
 2f0:	mov	x0, x24
 2f4:	bl	0 <srunner_fork_status>
 2f8:	bl	0 <set_fork_status>
 2fc:	cbz	x21, 30c <srunner_run_tagged+0x290>
 300:	ldr	w8, [x21]
 304:	cmp	w8, #0x1
 308:	b.ne	6b0 <srunner_run_tagged+0x634>  // b.any
 30c:	ldr	x19, [x28, #24]
 310:	mov	x0, x19
 314:	bl	0 <check_list_front>
 318:	mov	x0, x19
 31c:	bl	0 <check_list_at_end>
 320:	cbnz	w0, 684 <srunner_run_tagged+0x608>
 324:	add	x8, x28, #0x8
 328:	str	x8, [sp, #104]
 32c:	str	x19, [sp, #80]
 330:	mov	x0, x19
 334:	bl	0 <check_list_val>
 338:	ldp	w27, w8, [x0, #8]
 33c:	cmp	w27, w8
 340:	b.ge	66c <srunner_run_tagged+0x5f0>  // b.tcont
 344:	mov	x19, x0
 348:	stur	x0, [x29, #-96]
 34c:	mov	x0, x24
 350:	mov	x1, x28
 354:	mov	x2, x19
 358:	bl	0 <log_test_start>
 35c:	mov	x0, x24
 360:	bl	0 <srunner_fork_status>
 364:	cmp	w0, #0x2
 368:	b.eq	4c4 <srunner_run_tagged+0x448>  // b.none
 36c:	cmp	w0, #0x1
 370:	b.ne	7a0 <srunner_run_tagged+0x724>  // b.any
 374:	stur	wzr, [x29, #-12]
 378:	stp	xzr, xzr, [x29, #-32]
 37c:	stp	xzr, xzr, [x29, #-48]
 380:	bl	0 <fork>
 384:	cbz	w0, 7b8 <srunner_run_tagged+0x73c>
 388:	mov	w22, w0
 38c:	cmn	w0, #0x1
 390:	b.eq	890 <srunner_run_tagged+0x814>  // b.none
 394:	adrp	x8, 0 <srunner_fork_status>
 398:	str	w22, [x8]
 39c:	adrp	x8, 0 <srunner_fork_status>
 3a0:	strb	wzr, [x8]
 3a4:	bl	0 <check_get_clockid>
 3a8:	sub	x2, x29, #0x38
 3ac:	mov	x1, xzr
 3b0:	bl	0 <timer_create>
 3b4:	cbnz	w0, 8a8 <srunner_run_tagged+0x82c>
 3b8:	ldr	x8, [sp, #104]
 3bc:	ldur	x0, [x29, #-56]
 3c0:	sub	x2, x29, #0x58
 3c4:	mov	w1, wzr
 3c8:	ldr	q0, [x8]
 3cc:	ldr	x8, [sp, #96]
 3d0:	mov	x3, xzr
 3d4:	str	q0, [x8]
 3d8:	stp	xzr, xzr, [x29, #-88]
 3dc:	bl	0 <timer_settime>
 3e0:	cbnz	w0, 8c0 <srunner_run_tagged+0x844>
 3e4:	sub	x1, x29, #0xc
 3e8:	mov	w0, w22
 3ec:	mov	w2, wzr
 3f0:	bl	0 <waitpid>
 3f4:	cmn	w0, #0x1
 3f8:	b.eq	3e4 <srunner_run_tagged+0x368>  // b.none
 3fc:	ldur	x0, [x29, #-56]
 400:	bl	0 <timer_delete>
 404:	mov	w1, #0x9                   	// #9
 408:	mov	w0, w22
 40c:	bl	0 <killpg>
 410:	mov	x21, x28
 414:	ldr	x26, [x28]
 418:	ldr	x8, [x19]
 41c:	ldur	w28, [x29, #-12]
 420:	ldr	w22, [x19, #16]
 424:	ldrsb	w20, [x19, #20]
 428:	ldr	x19, [x8]
 42c:	and	w23, w28, #0x7f
 430:	mov	w8, #0x1000000             	// #16777216
 434:	add	w24, w8, w23, lsl #24
 438:	mov	w8, #0x1ffffff             	// #33554431
 43c:	cmp	w24, w8
 440:	cset	w8, gt
 444:	tst	w28, #0x7f
 448:	cset	w9, eq  // eq = none
 44c:	cmp	w23, w22
 450:	cset	w10, ne  // ne = any
 454:	tst	w28, #0xff00
 458:	cset	w11, ne  // ne = any
 45c:	and	w9, w9, w11
 460:	and	w8, w10, w8
 464:	orr	w0, w9, w8
 468:	bl	0 <receive_test_result>
 46c:	cbz	x0, 8d8 <srunner_run_tagged+0x85c>
 470:	mov	w8, #0x2000000             	// #33554432
 474:	mov	x25, x0
 478:	cmp	w24, w8
 47c:	stp	x26, x19, [x0, #32]
 480:	str	w27, [x0, #20]
 484:	b.lt	4e4 <srunner_run_tagged+0x468>  // b.tstop
 488:	ldr	x24, [sp, #88]
 48c:	cmp	w23, w22
 490:	b.ne	538 <srunner_run_tagged+0x4bc>  // b.any
 494:	adrp	x8, 0 <srunner_fork_status>
 498:	ldrb	w8, [x8]
 49c:	mov	x28, x21
 4a0:	cmp	w8, #0x1
 4a4:	b.ne	574 <srunner_run_tagged+0x4f8>  // b.any
 4a8:	ldr	x0, [x25, #48]
 4ac:	mov	w8, #0x3                   	// #3
 4b0:	str	w8, [x25]
 4b4:	cbz	x0, 4bc <srunner_run_tagged+0x440>
 4b8:	bl	0 <free>
 4bc:	mov	w0, w22
 4c0:	b	558 <srunner_run_tagged+0x4dc>
 4c4:	mov	x0, x24
 4c8:	mov	x1, x28
 4cc:	mov	x2, x19
 4d0:	mov	w3, w27
 4d4:	bl	c6c <tcase_run_tfun_nofork>
 4d8:	mov	x25, x0
 4dc:	cbnz	x0, 59c <srunner_run_tagged+0x520>
 4e0:	b	5b4 <srunner_run_tagged+0x538>
 4e4:	ldr	x24, [sp, #88]
 4e8:	lsr	w19, w28, #8
 4ec:	mov	x28, x21
 4f0:	cbz	w22, 564 <srunner_run_tagged+0x4e8>
 4f4:	cbnz	w23, 598 <srunner_run_tagged+0x51c>
 4f8:	ldr	x0, [x25, #48]
 4fc:	cbz	x0, 504 <srunner_run_tagged+0x488>
 500:	bl	0 <free>
 504:	mov	w0, #0x64                  	// #100
 508:	sxtb	w22, w19
 50c:	bl	0 <emalloc>
 510:	adrp	x2, 0 <srunner_fork_status>
 514:	mov	w1, #0x64                  	// #100
 518:	add	x2, x2, #0x0
 51c:	mov	w3, w22
 520:	mov	x23, x0
 524:	bl	0 <snprintf>
 528:	str	x23, [x25, #48]
 52c:	mov	w8, #0x2                   	// #2
 530:	str	w8, [x25]
 534:	b	598 <srunner_run_tagged+0x51c>
 538:	ldr	x0, [x25, #48]
 53c:	mov	w8, #0x3                   	// #3
 540:	mov	x28, x21
 544:	str	w8, [x25]
 548:	cbz	w22, 5c8 <srunner_run_tagged+0x54c>
 54c:	cbz	x0, 554 <srunner_run_tagged+0x4d8>
 550:	bl	0 <free>
 554:	mov	w0, w23
 558:	mov	w1, w22
 55c:	bl	e64 <signal_error_msg>
 560:	b	594 <srunner_run_tagged+0x518>
 564:	cbnz	w23, 598 <srunner_run_tagged+0x51c>
 568:	sxtb	w22, w19
 56c:	cmp	w22, w20
 570:	b.ne	634 <srunner_run_tagged+0x5b8>  // b.any
 574:	ldr	x0, [x25, #48]
 578:	mov	w8, #0x1                   	// #1
 57c:	str	w8, [x25]
 580:	cbz	x0, 588 <srunner_run_tagged+0x50c>
 584:	bl	0 <free>
 588:	adrp	x0, 0 <srunner_fork_status>
 58c:	add	x0, x0, #0x0
 590:	bl	0 <strdup>
 594:	str	x0, [x25, #48]
 598:	ldur	x19, [x29, #-96]
 59c:	mov	x0, x24
 5a0:	mov	x1, x25
 5a4:	bl	b70 <srunner_add_failure>
 5a8:	mov	x0, x24
 5ac:	mov	x1, x25
 5b0:	bl	0 <log_test_end>
 5b4:	ldr	w8, [x19, #12]
 5b8:	add	w27, w27, #0x1
 5bc:	cmp	w27, w8
 5c0:	b.lt	34c <srunner_run_tagged+0x2d0>  // b.tstop
 5c4:	b	66c <srunner_run_tagged+0x5f0>
 5c8:	cbz	x0, 5d0 <srunner_run_tagged+0x554>
 5cc:	bl	0 <free>
 5d0:	mov	w0, #0x64                  	// #100
 5d4:	bl	0 <emalloc>
 5d8:	adrp	x8, 0 <srunner_fork_status>
 5dc:	ldrb	w8, [x8]
 5e0:	mov	x22, x0
 5e4:	cmp	w8, #0x1
 5e8:	b.ne	608 <srunner_run_tagged+0x58c>  // b.any
 5ec:	adrp	x9, 0 <srunner_fork_status>
 5f0:	add	x9, x9, #0x0
 5f4:	ldur	x8, [x9, #13]
 5f8:	ldr	q0, [x9]
 5fc:	stur	x8, [x22, #13]
 600:	str	q0, [x22]
 604:	b	62c <srunner_run_tagged+0x5b0>
 608:	mov	w0, w23
 60c:	bl	0 <strsignal>
 610:	adrp	x2, 0 <srunner_fork_status>
 614:	mov	x4, x0
 618:	mov	w1, #0x64                  	// #100
 61c:	mov	x0, x22
 620:	add	x2, x2, #0x0
 624:	mov	w3, w23
 628:	bl	0 <snprintf>
 62c:	str	x22, [x25, #48]
 630:	b	598 <srunner_run_tagged+0x51c>
 634:	ldr	x8, [x25, #48]
 638:	cbnz	x8, 52c <srunner_run_tagged+0x4b0>
 63c:	mov	w8, #0x3                   	// #3
 640:	mov	w0, #0x64                  	// #100
 644:	str	w8, [x25]
 648:	bl	0 <emalloc>
 64c:	adrp	x2, 0 <srunner_fork_status>
 650:	mov	w1, #0x64                  	// #100
 654:	add	x2, x2, #0x0
 658:	mov	w3, w22
 65c:	mov	x23, x0
 660:	bl	0 <snprintf>
 664:	str	x23, [x25, #48]
 668:	b	598 <srunner_run_tagged+0x51c>
 66c:	ldr	x19, [sp, #80]
 670:	mov	x0, x19
 674:	bl	0 <check_list_advance>
 678:	mov	x0, x19
 67c:	bl	0 <check_list_at_end>
 680:	cbz	w0, 330 <srunner_run_tagged+0x2b4>
 684:	ldr	x21, [x28, #40]
 688:	mov	x0, x24
 68c:	bl	0 <srunner_fork_status>
 690:	mov	w1, w0
 694:	mov	x0, x21
 698:	bl	de0 <srunner_run_teardown>
 69c:	ldp	x23, x22, [sp, #40]
 6a0:	ldp	x26, x25, [sp, #24]
 6a4:	ldp	x20, x19, [sp, #8]
 6a8:	ldr	x27, [sp, #56]
 6ac:	b	6bc <srunner_run_tagged+0x640>
 6b0:	mov	x0, x24
 6b4:	mov	x1, x21
 6b8:	bl	b70 <srunner_add_failure>
 6bc:	ldr	x21, [sp, #64]
 6c0:	mov	x0, x21
 6c4:	bl	0 <check_list_advance>
 6c8:	mov	x0, x21
 6cc:	bl	0 <check_list_at_end>
 6d0:	cbz	w0, 284 <srunner_run_tagged+0x208>
 6d4:	mov	x0, x24
 6d8:	mov	x1, x27
 6dc:	bl	0 <log_suite_end>
 6e0:	mov	x0, x20
 6e4:	bl	0 <check_list_advance>
 6e8:	mov	x0, x20
 6ec:	bl	0 <check_list_at_end>
 6f0:	cbz	w0, 228 <srunner_run_tagged+0x1ac>
 6f4:	adrp	x20, 0 <free>
 6f8:	add	x20, x20, #0x0
 6fc:	mov	x0, x19
 700:	mov	x1, x20
 704:	bl	0 <check_list_apply>
 708:	ldr	x21, [sp, #72]
 70c:	mov	x1, x20
 710:	mov	x0, x21
 714:	bl	0 <check_list_apply>
 718:	mov	x0, x19
 71c:	bl	0 <check_list_free>
 720:	mov	x0, x21
 724:	bl	0 <check_list_free>
 728:	mov	x0, x24
 72c:	bl	0 <log_srunner_end>
 730:	mov	x0, x24
 734:	bl	0 <srunner_end_logging>
 738:	bl	0 <teardown_messaging>
 73c:	mov	w0, #0x1                   	// #1
 740:	bl	0 <set_fork_status>
 744:	adrp	x1, 0 <srunner_fork_status>
 748:	add	x1, x1, #0x0
 74c:	mov	w0, #0xe                   	// #14
 750:	mov	x2, xzr
 754:	bl	0 <sigaction>
 758:	adrp	x1, 0 <srunner_fork_status>
 75c:	add	x1, x1, #0x0
 760:	mov	w0, #0x2                   	// #2
 764:	mov	x2, xzr
 768:	bl	0 <sigaction>
 76c:	adrp	x1, 0 <srunner_fork_status>
 770:	add	x1, x1, #0x0
 774:	mov	w0, #0xf                   	// #15
 778:	mov	x2, xzr
 77c:	bl	0 <sigaction>
 780:	ldp	x20, x19, [sp, #288]
 784:	ldp	x22, x21, [sp, #272]
 788:	ldp	x24, x23, [sp, #256]
 78c:	ldp	x26, x25, [sp, #240]
 790:	ldp	x28, x27, [sp, #224]
 794:	ldp	x29, x30, [sp, #208]
 798:	add	sp, sp, #0x130
 79c:	ret
 7a0:	adrp	x0, 0 <srunner_fork_status>
 7a4:	adrp	x1, 0 <srunner_fork_status>
 7a8:	add	x0, x0, #0x0
 7ac:	add	x1, x1, #0x0
 7b0:	mov	w2, #0x10b                 	// #267
 7b4:	bl	0 <eprintf>
 7b8:	mov	w1, wzr
 7bc:	bl	0 <setpgid>
 7c0:	bl	0 <getpgrp>
 7c4:	adrp	x8, 0 <srunner_fork_status>
 7c8:	str	w0, [x8]
 7cc:	mov	x0, x24
 7d0:	mov	x1, x28
 7d4:	bl	d9c <tcase_run_checked_setup>
 7d8:	bl	0 <free>
 7dc:	bl	0 <check_get_clockid>
 7e0:	sub	x1, x29, #0x20
 7e4:	bl	0 <clock_gettime>
 7e8:	ldr	x8, [x19]
 7ec:	ldr	x0, [x8]
 7f0:	ldr	x1, [x8, #16]
 7f4:	ldr	w2, [x8, #24]
 7f8:	bl	0 <tcase_fn_start>
 7fc:	ldr	x8, [x19]
 800:	mov	w0, w27
 804:	ldr	x8, [x8, #8]
 808:	blr	x8
 80c:	bl	0 <check_get_clockid>
 810:	sub	x1, x29, #0x30
 814:	bl	0 <clock_gettime>
 818:	mov	x0, x28
 81c:	bl	dd4 <tcase_run_checked_teardown>
 820:	ldur	w8, [x29, #-48]
 824:	ldur	w9, [x29, #-32]
 828:	ldur	x10, [x29, #-40]
 82c:	ldur	x11, [x29, #-24]
 830:	sub	w8, w8, w9
 834:	mov	x9, #0xf7cf                	// #63439
 838:	movk	x9, #0xe353, lsl #16
 83c:	movk	x9, #0x9ba5, lsl #32
 840:	movk	x9, #0x20c4, lsl #48
 844:	smulh	x9, x10, x9
 848:	mov	x10, #0x831                 	// #2097
 84c:	movk	x10, #0x1cac, lsl #16
 850:	movk	x10, #0x645a, lsl #32
 854:	movk	x10, #0xdf3b, lsl #48
 858:	smulh	x10, x11, x10
 85c:	lsr	x11, x9, #63
 860:	lsr	x9, x9, #7
 864:	add	w9, w9, w11
 868:	mov	w11, #0x4240                	// #16960
 86c:	movk	w11, #0xf, lsl #16
 870:	madd	w8, w8, w11, w9
 874:	lsr	x9, x10, #63
 878:	lsr	x10, x10, #7
 87c:	add	w9, w10, w9
 880:	add	w0, w8, w9
 884:	bl	0 <send_duration_info>
 888:	mov	w0, wzr
 88c:	bl	0 <exit>
 890:	adrp	x0, 0 <srunner_fork_status>
 894:	adrp	x1, 0 <srunner_fork_status>
 898:	add	x0, x0, #0x0
 89c:	add	x1, x1, #0x0
 8a0:	mov	w2, #0x1e5                 	// #485
 8a4:	bl	0 <eprintf>
 8a8:	adrp	x0, 0 <srunner_fork_status>
 8ac:	adrp	x1, 0 <srunner_fork_status>
 8b0:	add	x0, x0, #0x0
 8b4:	add	x1, x1, #0x0
 8b8:	mov	w2, #0x218                 	// #536
 8bc:	bl	0 <eprintf>
 8c0:	adrp	x0, 0 <srunner_fork_status>
 8c4:	adrp	x1, 0 <srunner_fork_status>
 8c8:	add	x0, x0, #0x0
 8cc:	add	x1, x1, #0x0
 8d0:	mov	w2, #0x210                 	// #528
 8d4:	bl	0 <eprintf>
 8d8:	adrp	x0, 0 <srunner_fork_status>
 8dc:	adrp	x1, 0 <srunner_fork_status>
 8e0:	add	x0, x0, #0x0
 8e4:	add	x1, x1, #0x0
 8e8:	mov	w2, #0x22c                 	// #556
 8ec:	bl	0 <eprintf>
 8f0:	adrp	x0, 0 <srunner_fork_status>
 8f4:	adrp	x1, 0 <srunner_fork_status>
 8f8:	add	x0, x0, #0x0
 8fc:	add	x1, x1, #0x0
 900:	mov	w2, #0x31e                 	// #798
 904:	mov	w3, w20
 908:	bl	0 <eprintf>

000000000000090c <sig_handler>:
 90c:	stp	x29, x30, [sp, #-32]!
 910:	stp	x20, x19, [sp, #16]
 914:	mov	w19, w0
 918:	cmp	w0, #0x2
 91c:	mov	x29, sp
 920:	b.eq	96c <sig_handler+0x60>  // b.none
 924:	cmp	w19, #0xf
 928:	b.eq	950 <sig_handler+0x44>  // b.none
 92c:	cmp	w19, #0xe
 930:	b.ne	9a4 <sig_handler+0x98>  // b.any
 934:	adrp	x8, 0 <srunner_fork_status>
 938:	ldr	w0, [x8]
 93c:	adrp	x8, 0 <srunner_fork_status>
 940:	mov	w9, #0x1                   	// #1
 944:	mov	w1, #0x9                   	// #9
 948:	strb	w9, [x8]
 94c:	b	998 <sig_handler+0x8c>
 950:	adrp	x1, 0 <srunner_fork_status>
 954:	add	x1, x1, #0x0
 958:	mov	w0, #0xf                   	// #15
 95c:	mov	x2, xzr
 960:	mov	w20, #0xf                   	// #15
 964:	bl	0 <sigaction>
 968:	b	980 <sig_handler+0x74>
 96c:	adrp	x1, 0 <srunner_fork_status>
 970:	add	x1, x1, #0x0
 974:	mov	x2, xzr
 978:	bl	0 <sigaction>
 97c:	mov	w20, #0x9                   	// #9
 980:	adrp	x8, 0 <srunner_fork_status>
 984:	ldr	w0, [x8]
 988:	mov	w1, w20
 98c:	bl	0 <killpg>
 990:	bl	0 <getpgrp>
 994:	mov	w1, w19
 998:	ldp	x20, x19, [sp, #16]
 99c:	ldp	x29, x30, [sp], #32
 9a0:	b	0 <killpg>
 9a4:	adrp	x0, 0 <srunner_fork_status>
 9a8:	adrp	x1, 0 <srunner_fork_status>
 9ac:	add	x0, x0, #0x0
 9b0:	add	x1, x1, #0x0
 9b4:	mov	w2, #0x8e                  	// #142
 9b8:	mov	w3, w19
 9bc:	bl	0 <eprintf>

00000000000009c0 <check_fork>:
 9c0:	stp	x29, x30, [sp, #-32]!
 9c4:	str	x19, [sp, #16]
 9c8:	mov	x29, sp
 9cc:	bl	0 <fork>
 9d0:	mov	w19, w0
 9d4:	tbnz	w0, #31, 9e8 <check_fork+0x28>
 9d8:	adrp	x8, 0 <srunner_fork_status>
 9dc:	ldr	w1, [x8]
 9e0:	mov	w0, w19
 9e4:	bl	0 <setpgid>
 9e8:	mov	w0, w19
 9ec:	ldr	x19, [sp, #16]
 9f0:	ldp	x29, x30, [sp], #32
 9f4:	ret

00000000000009f8 <check_waitpid_and_exit>:
 9f8:	stp	x29, x30, [sp, #-32]!
 9fc:	cmp	w0, #0x1
 a00:	str	x19, [sp, #16]
 a04:	mov	x29, sp
 a08:	b.lt	a68 <check_waitpid_and_exit+0x70>  // b.tstop
 a0c:	mov	w19, w0
 a10:	add	x1, x29, #0x1c
 a14:	mov	w0, w19
 a18:	mov	w2, wzr
 a1c:	bl	0 <waitpid>
 a20:	cmn	w0, #0x1
 a24:	b.eq	a10 <check_waitpid_and_exit+0x18>  // b.none
 a28:	ldr	w10, [x29, #28]
 a2c:	mov	w8, #0x1000000             	// #16777216
 a30:	mov	w9, #0x1ffffff             	// #33554431
 a34:	and	w11, w10, #0x7f
 a38:	add	w8, w8, w11, lsl #24
 a3c:	cmp	w8, w9
 a40:	cset	w8, gt
 a44:	tst	w10, #0x7f
 a48:	cset	w11, eq  // eq = none
 a4c:	cset	w9, ne  // ne = any
 a50:	tst	w10, #0xff00
 a54:	cset	w10, ne  // ne = any
 a58:	and	w10, w11, w10
 a5c:	tbnz	w10, #0, a70 <check_waitpid_and_exit+0x78>
 a60:	and	w8, w9, w8
 a64:	cbnz	w8, a70 <check_waitpid_and_exit+0x78>
 a68:	mov	w0, wzr
 a6c:	bl	0 <exit>
 a70:	mov	w0, #0x1                   	// #1
 a74:	bl	0 <exit>

0000000000000a78 <srunner_run_setup>:
 a78:	stp	x29, x30, [sp, #-64]!
 a7c:	stp	x22, x21, [sp, #32]
 a80:	stp	x20, x19, [sp, #48]
 a84:	mov	x19, x3
 a88:	mov	x20, x2
 a8c:	mov	w21, w1
 a90:	cmp	w1, #0x1
 a94:	mov	x22, x0
 a98:	stp	x24, x23, [sp, #16]
 a9c:	mov	x29, sp
 aa0:	b.ne	aac <srunner_run_setup+0x34>  // b.any
 aa4:	mov	w0, #0x1                   	// #1
 aa8:	bl	0 <send_ctx_info>
 aac:	mov	x0, x22
 ab0:	bl	0 <check_list_front>
 ab4:	mov	x0, x22
 ab8:	bl	0 <check_list_at_end>
 abc:	cbnz	w0, b54 <srunner_run_setup+0xdc>
 ac0:	adrp	x23, 0 <error_jmp_buffer>
 ac4:	add	x23, x23, #0x0
 ac8:	mov	x0, x22
 acc:	bl	0 <check_list_val>
 ad0:	cmp	w21, #0x2
 ad4:	mov	x24, x0
 ad8:	b.ne	b38 <srunner_run_setup+0xc0>  // b.any
 adc:	mov	w0, #0x1                   	// #1
 ae0:	bl	0 <send_ctx_info>
 ae4:	mov	x0, x23
 ae8:	bl	0 <_setjmp>
 aec:	cbnz	w0, af8 <srunner_run_setup+0x80>
 af0:	ldr	x8, [x24, #8]
 af4:	blr	x8
 af8:	mov	w3, #0xffffffff            	// #-1
 afc:	mov	x0, x20
 b00:	mov	x1, x19
 b04:	mov	w2, wzr
 b08:	bl	bd4 <receive_result_info_nofork>
 b0c:	ldr	w8, [x0]
 b10:	mov	x24, x0
 b14:	cmp	w8, #0x1
 b18:	b.ne	b58 <srunner_run_setup+0xe0>  // b.any
 b1c:	ldr	x0, [x24, #8]
 b20:	bl	0 <free>
 b24:	ldr	x0, [x24, #48]
 b28:	bl	0 <free>
 b2c:	mov	x0, x24
 b30:	bl	0 <free>
 b34:	b	b40 <srunner_run_setup+0xc8>
 b38:	ldr	x8, [x24, #8]
 b3c:	blr	x8
 b40:	mov	x0, x22
 b44:	bl	0 <check_list_advance>
 b48:	mov	x0, x22
 b4c:	bl	0 <check_list_at_end>
 b50:	cbz	w0, ac8 <srunner_run_setup+0x50>
 b54:	mov	x24, xzr
 b58:	mov	x0, x24
 b5c:	ldp	x20, x19, [sp, #48]
 b60:	ldp	x22, x21, [sp, #32]
 b64:	ldp	x24, x23, [sp, #16]
 b68:	ldp	x29, x30, [sp], #64
 b6c:	ret

0000000000000b70 <srunner_add_failure>:
 b70:	stp	x29, x30, [sp, #-32]!
 b74:	stp	x20, x19, [sp, #16]
 b78:	mov	x19, x0
 b7c:	ldr	x0, [x0, #16]
 b80:	mov	x29, sp
 b84:	mov	x20, x1
 b88:	bl	0 <check_list_add_end>
 b8c:	ldr	x8, [x19, #8]
 b90:	ldr	w9, [x8]
 b94:	add	w9, w9, #0x1
 b98:	str	w9, [x8]
 b9c:	ldr	w9, [x20]
 ba0:	cmp	w9, #0x3
 ba4:	b.eq	bb8 <srunner_add_failure+0x48>  // b.none
 ba8:	cmp	w9, #0x2
 bac:	b.ne	bc8 <srunner_add_failure+0x58>  // b.any
 bb0:	add	x8, x8, #0x4
 bb4:	b	bbc <srunner_add_failure+0x4c>
 bb8:	add	x8, x8, #0x8
 bbc:	ldr	w9, [x8]
 bc0:	add	w9, w9, #0x1
 bc4:	str	w9, [x8]
 bc8:	ldp	x20, x19, [sp, #16]
 bcc:	ldp	x29, x30, [sp], #32
 bd0:	ret

0000000000000bd4 <receive_result_info_nofork>:
 bd4:	stp	x29, x30, [sp, #-64]!
 bd8:	str	x23, [sp, #16]
 bdc:	mov	x23, x0
 be0:	mov	w0, wzr
 be4:	stp	x22, x21, [sp, #32]
 be8:	stp	x20, x19, [sp, #48]
 bec:	mov	x29, sp
 bf0:	mov	w20, w3
 bf4:	mov	w21, w2
 bf8:	mov	x22, x1
 bfc:	bl	0 <receive_test_result>
 c00:	cbz	x0, c54 <receive_result_info_nofork+0x80>
 c04:	ldr	x8, [x0, #48]
 c08:	mov	x19, x0
 c0c:	stp	x23, x22, [x0, #32]
 c10:	stp	w21, w20, [x0, #20]
 c14:	cbz	x8, c24 <receive_result_info_nofork+0x50>
 c18:	mov	w8, #0x2                   	// #2
 c1c:	str	w8, [x19]
 c20:	b	c3c <receive_result_info_nofork+0x68>
 c24:	adrp	x0, 0 <srunner_fork_status>
 c28:	mov	w8, #0x1                   	// #1
 c2c:	add	x0, x0, #0x0
 c30:	str	w8, [x19]
 c34:	bl	0 <strdup>
 c38:	str	x0, [x19, #48]
 c3c:	mov	x0, x19
 c40:	ldp	x20, x19, [sp, #48]
 c44:	ldp	x22, x21, [sp, #32]
 c48:	ldr	x23, [sp, #16]
 c4c:	ldp	x29, x30, [sp], #64
 c50:	ret
 c54:	adrp	x0, 0 <srunner_fork_status>
 c58:	adrp	x1, 0 <srunner_fork_status>
 c5c:	add	x0, x0, #0x0
 c60:	add	x1, x1, #0x0
 c64:	mov	w2, #0x1b8                 	// #440
 c68:	bl	0 <eprintf>

0000000000000c6c <tcase_run_tfun_nofork>:
 c6c:	sub	sp, sp, #0x50
 c70:	stp	x29, x30, [sp, #32]
 c74:	stp	x22, x21, [sp, #48]
 c78:	stp	x20, x19, [sp, #64]
 c7c:	stp	xzr, xzr, [sp, #16]
 c80:	stp	xzr, xzr, [sp]
 c84:	ldr	x22, [x1, #48]
 c88:	add	x29, sp, #0x20
 c8c:	mov	w19, w3
 c90:	mov	x20, x2
 c94:	mov	x21, x1
 c98:	bl	0 <srunner_fork_status>
 c9c:	ldr	x2, [x21]
 ca0:	adrp	x3, 0 <srunner_fork_status>
 ca4:	mov	w1, w0
 ca8:	add	x3, x3, #0x0
 cac:	mov	x0, x22
 cb0:	bl	a78 <srunner_run_setup>
 cb4:	cbnz	x0, d88 <tcase_run_tfun_nofork+0x11c>
 cb8:	bl	0 <check_get_clockid>
 cbc:	add	x1, sp, #0x10
 cc0:	bl	0 <clock_gettime>
 cc4:	adrp	x0, 0 <error_jmp_buffer>
 cc8:	add	x0, x0, #0x0
 ccc:	bl	0 <_setjmp>
 cd0:	cbnz	w0, cf8 <tcase_run_tfun_nofork+0x8c>
 cd4:	ldr	x8, [x20]
 cd8:	ldr	x0, [x8]
 cdc:	ldr	x1, [x8, #16]
 ce0:	ldr	w2, [x8, #24]
 ce4:	bl	0 <tcase_fn_start>
 ce8:	ldr	x8, [x20]
 cec:	mov	w0, w19
 cf0:	ldr	x8, [x8, #8]
 cf4:	blr	x8
 cf8:	bl	0 <check_get_clockid>
 cfc:	mov	x1, sp
 d00:	bl	0 <clock_gettime>
 d04:	ldr	x0, [x21, #56]
 d08:	mov	w1, #0x2                   	// #2
 d0c:	bl	de0 <srunner_run_teardown>
 d10:	ldr	w8, [sp]
 d14:	ldr	w9, [sp, #16]
 d18:	ldr	x11, [sp, #8]
 d1c:	ldr	x12, [sp, #24]
 d20:	ldr	x10, [x20]
 d24:	sub	w8, w8, w9
 d28:	mov	x9, #0xf7cf                	// #63439
 d2c:	movk	x9, #0xe353, lsl #16
 d30:	movk	x9, #0x9ba5, lsl #32
 d34:	movk	x9, #0x20c4, lsl #48
 d38:	smulh	x9, x11, x9
 d3c:	mov	x11, #0x831                 	// #2097
 d40:	movk	x11, #0x1cac, lsl #16
 d44:	movk	x11, #0x645a, lsl #32
 d48:	movk	x11, #0xdf3b, lsl #48
 d4c:	smulh	x11, x12, x11
 d50:	lsr	x12, x9, #63
 d54:	lsr	x9, x9, #7
 d58:	add	w9, w9, w12
 d5c:	mov	w12, #0x4240                	// #16960
 d60:	ldr	x0, [x21]
 d64:	movk	w12, #0xf, lsl #16
 d68:	ldr	x1, [x10]
 d6c:	madd	w8, w8, w12, w9
 d70:	lsr	x9, x11, #63
 d74:	lsr	x10, x11, #7
 d78:	add	w9, w10, w9
 d7c:	add	w3, w8, w9
 d80:	mov	w2, w19
 d84:	bl	bd4 <receive_result_info_nofork>
 d88:	ldp	x20, x19, [sp, #64]
 d8c:	ldp	x22, x21, [sp, #48]
 d90:	ldp	x29, x30, [sp, #32]
 d94:	add	sp, sp, #0x50
 d98:	ret

0000000000000d9c <tcase_run_checked_setup>:
 d9c:	stp	x29, x30, [sp, #-32]!
 da0:	stp	x20, x19, [sp, #16]
 da4:	ldr	x20, [x1, #48]
 da8:	mov	x29, sp
 dac:	mov	x19, x1
 db0:	bl	0 <srunner_fork_status>
 db4:	ldr	x2, [x19]
 db8:	mov	w1, w0
 dbc:	mov	x0, x20
 dc0:	ldp	x20, x19, [sp, #16]
 dc4:	adrp	x3, 0 <srunner_fork_status>
 dc8:	add	x3, x3, #0x0
 dcc:	ldp	x29, x30, [sp], #32
 dd0:	b	a78 <srunner_run_setup>

0000000000000dd4 <tcase_run_checked_teardown>:
 dd4:	ldr	x0, [x0, #56]
 dd8:	mov	w1, #0x2                   	// #2
 ddc:	b	de0 <srunner_run_teardown>

0000000000000de0 <srunner_run_teardown>:
 de0:	stp	x29, x30, [sp, #-48]!
 de4:	stp	x22, x21, [sp, #16]
 de8:	stp	x20, x19, [sp, #32]
 dec:	mov	x29, sp
 df0:	mov	w19, w1
 df4:	mov	x20, x0
 df8:	bl	0 <check_list_front>
 dfc:	mov	x0, x20
 e00:	bl	0 <check_list_at_end>
 e04:	cbnz	w0, e54 <srunner_run_teardown+0x74>
 e08:	adrp	x21, 0 <error_jmp_buffer>
 e0c:	add	x21, x21, #0x0
 e10:	mov	x0, x20
 e14:	bl	0 <check_list_val>
 e18:	mov	x22, x0
 e1c:	mov	w0, #0x3                   	// #3
 e20:	bl	0 <send_ctx_info>
 e24:	cmp	w19, #0x2
 e28:	b.ne	e38 <srunner_run_teardown+0x58>  // b.any
 e2c:	mov	x0, x21
 e30:	bl	0 <_setjmp>
 e34:	cbnz	w0, e54 <srunner_run_teardown+0x74>
 e38:	ldr	x8, [x22, #8]
 e3c:	blr	x8
 e40:	mov	x0, x20
 e44:	bl	0 <check_list_advance>
 e48:	mov	x0, x20
 e4c:	bl	0 <check_list_at_end>
 e50:	cbz	w0, e10 <srunner_run_teardown+0x30>
 e54:	ldp	x20, x19, [sp, #32]
 e58:	ldp	x22, x21, [sp, #16]
 e5c:	ldp	x29, x30, [sp], #48
 e60:	ret

0000000000000e64 <signal_error_msg>:
 e64:	stp	x29, x30, [sp, #-64]!
 e68:	stp	x22, x21, [sp, #32]
 e6c:	mov	w22, w0
 e70:	mov	w0, #0x64                  	// #100
 e74:	str	x23, [sp, #16]
 e78:	stp	x20, x19, [sp, #48]
 e7c:	mov	x29, sp
 e80:	mov	w20, w1
 e84:	bl	0 <emalloc>
 e88:	mov	x19, x0
 e8c:	mov	w0, w22
 e90:	bl	0 <strsignal>
 e94:	bl	0 <strdup>
 e98:	mov	x21, x0
 e9c:	mov	w0, w20
 ea0:	bl	0 <strsignal>
 ea4:	bl	0 <strdup>
 ea8:	adrp	x8, 0 <srunner_fork_status>
 eac:	ldrb	w8, [x8]
 eb0:	mov	x23, x0
 eb4:	cmp	w8, #0x1
 eb8:	b.ne	edc <signal_error_msg+0x78>  // b.any
 ebc:	adrp	x2, 0 <srunner_fork_status>
 ec0:	add	x2, x2, #0x0
 ec4:	mov	w1, #0x64                  	// #100
 ec8:	mov	x0, x19
 ecc:	mov	w3, w20
 ed0:	mov	x4, x23
 ed4:	bl	0 <snprintf>
 ed8:	b	f00 <signal_error_msg+0x9c>
 edc:	adrp	x2, 0 <srunner_fork_status>
 ee0:	add	x2, x2, #0x0
 ee4:	mov	w1, #0x64                  	// #100
 ee8:	mov	x0, x19
 eec:	mov	w3, w22
 ef0:	mov	x4, x21
 ef4:	mov	w5, w20
 ef8:	mov	x6, x23
 efc:	bl	0 <snprintf>
 f00:	mov	x0, x21
 f04:	bl	0 <free>
 f08:	mov	x0, x23
 f0c:	bl	0 <free>
 f10:	mov	x0, x19
 f14:	ldp	x20, x19, [sp, #48]
 f18:	ldp	x22, x21, [sp, #32]
 f1c:	ldr	x23, [sp, #16]
 f20:	ldp	x29, x30, [sp], #64
 f24:	ret

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	ldp	w8, w11, [x0]
   c:	ldr	x1, [x0, #8]
  10:	ldr	w2, [x0, #16]
  14:	adrp	x9, 0 <tr_str>
  18:	adrp	x10, 0 <tr_str>
  1c:	add	x9, x9, #0x0
  20:	add	x10, x10, #0x0
  24:	cmp	w8, #0x3
  28:	csel	x7, x10, x9, eq  // eq = none
  2c:	cmp	w11, #0x2
  30:	add	x29, sp, #0x10
  34:	b.ne	54 <tr_str+0x54>  // b.any
  38:	sub	w8, w8, #0x1
  3c:	cmp	w8, #0x2
  40:	b.hi	60 <tr_str+0x60>  // b.pmore
  44:	adrp	x9, 0 <tr_str>
  48:	add	x9, x9, #0x0
  4c:	ldr	x3, [x9, w8, sxtw #3]
  50:	b	64 <tr_str+0x64>
  54:	adrp	x3, 0 <tr_str>
  58:	add	x3, x3, #0x0
  5c:	b	64 <tr_str+0x64>
  60:	mov	x3, xzr
  64:	ldp	x4, x5, [x0, #32]
  68:	ldr	w6, [x0, #20]
  6c:	ldr	x8, [x0, #48]
  70:	adrp	x0, 0 <tr_str>
  74:	add	x0, x0, #0x0
  78:	str	x8, [sp]
  7c:	bl	8c <ck_strdup_printf>
  80:	ldp	x29, x30, [sp, #16]
  84:	add	sp, sp, #0x20
  88:	ret

000000000000008c <ck_strdup_printf>:
  8c:	sub	sp, sp, #0x150
  90:	stp	x29, x30, [sp, #256]
  94:	stp	x20, x19, [sp, #320]
  98:	add	x29, sp, #0x100
  9c:	mov	x19, x0
  a0:	mov	w0, #0x64                  	// #100
  a4:	stp	x28, x25, [sp, #272]
  a8:	stp	x24, x23, [sp, #288]
  ac:	stp	x22, x21, [sp, #304]
  b0:	stp	x1, x2, [x29, #-120]
  b4:	stp	x3, x4, [x29, #-104]
  b8:	stp	x5, x6, [x29, #-88]
  bc:	stur	x7, [x29, #-72]
  c0:	stp	q0, q1, [sp]
  c4:	stp	q2, q3, [sp, #32]
  c8:	stp	q4, q5, [sp, #64]
  cc:	stp	q6, q7, [sp, #96]
  d0:	bl	0 <emalloc>
  d4:	sub	x8, x29, #0x78
  d8:	mov	x9, sp
  dc:	mov	x23, #0xffffffffffffffc8    	// #-56
  e0:	add	x22, x29, #0x50
  e4:	movk	x23, #0xff80, lsl #32
  e8:	add	x24, x8, #0x38
  ec:	add	x25, x9, #0x80
  f0:	stp	x22, x24, [x29, #-32]
  f4:	stp	x25, x23, [x29, #-16]
  f8:	ldp	q0, q1, [x29, #-32]
  fc:	sub	x3, x29, #0x40
 100:	mov	w1, #0x64                  	// #100
 104:	mov	x2, x19
 108:	mov	x20, x0
 10c:	stp	q0, q1, [x29, #-64]
 110:	bl	0 <vsnprintf>
 114:	cmp	w0, #0x64
 118:	b.cc	17c <ck_strdup_printf+0xf0>  // b.lo, b.ul, b.last
 11c:	mvn	w8, w0
 120:	lsr	w8, w8, #31
 124:	mov	w21, #0x64                  	// #100
 128:	sxtw	x9, w0
 12c:	lsl	x10, x21, #1
 130:	tst	w8, #0x1
 134:	csinc	x21, x10, x9, eq  // eq = none
 138:	mov	x0, x20
 13c:	mov	x1, x21
 140:	bl	0 <erealloc>
 144:	stp	x22, x24, [x29, #-32]
 148:	stp	x25, x23, [x29, #-16]
 14c:	ldp	q0, q1, [x29, #-32]
 150:	sub	x3, x29, #0x40
 154:	mov	x1, x21
 158:	mov	x2, x19
 15c:	mov	x20, x0
 160:	stp	q0, q1, [x29, #-64]
 164:	bl	0 <vsnprintf>
 168:	mvn	w8, w0
 16c:	lsr	w8, w8, #31
 170:	tbnz	w0, #31, 128 <ck_strdup_printf+0x9c>
 174:	cmp	w0, w21
 178:	b.ge	128 <ck_strdup_printf+0x9c>  // b.tcont
 17c:	mov	x0, x20
 180:	ldp	x20, x19, [sp, #320]
 184:	ldp	x22, x21, [sp, #304]
 188:	ldp	x24, x23, [sp, #288]
 18c:	ldp	x28, x25, [sp, #272]
 190:	ldp	x29, x30, [sp, #256]
 194:	add	sp, sp, #0x150
 198:	ret

000000000000019c <tr_short_str>:
 19c:	ldr	w8, [x0]
 1a0:	ldr	x1, [x0, #8]
 1a4:	ldr	w2, [x0, #16]
 1a8:	ldr	x4, [x0, #48]
 1ac:	adrp	x9, 0 <tr_str>
 1b0:	adrp	x10, 0 <tr_str>
 1b4:	add	x9, x9, #0x0
 1b8:	add	x10, x10, #0x0
 1bc:	cmp	w8, #0x3
 1c0:	adrp	x0, 0 <tr_str>
 1c4:	csel	x3, x10, x9, eq  // eq = none
 1c8:	add	x0, x0, #0x0
 1cc:	b	8c <ck_strdup_printf>

00000000000001d0 <sr_stat_str>:
 1d0:	ldr	x8, [x0, #8]
 1d4:	ldr	w3, [x8, #4]
 1d8:	cbnz	w3, 1e4 <sr_stat_str+0x14>
 1dc:	ldr	w9, [x8, #8]
 1e0:	cbz	w9, 220 <sr_stat_str+0x50>
 1e4:	ldr	w2, [x8]
 1e8:	ldr	w4, [x8, #8]
 1ec:	cbz	w2, 218 <sr_stat_str+0x48>
 1f0:	sub	w8, w2, w3
 1f4:	sub	w8, w8, w4
 1f8:	scvtf	s0, w2
 1fc:	scvtf	s1, w8
 200:	mov	w8, #0x42c80000            	// #1120403456
 204:	fdiv	s0, s1, s0
 208:	fmov	s1, w8
 20c:	fmul	s0, s0, s1
 210:	fcvtzs	w1, s0
 214:	b	22c <sr_stat_str+0x5c>
 218:	mov	w1, wzr
 21c:	b	22c <sr_stat_str+0x5c>
 220:	ldr	w2, [x8]
 224:	mov	w4, wzr
 228:	mov	w1, #0x64                  	// #100
 22c:	adrp	x0, 0 <tr_str>
 230:	add	x0, x0, #0x0
 234:	b	8c <ck_strdup_printf>

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	adrp	x3, 0 <ck_do_nothing>
  10:	add	x0, x0, #0x0
  14:	add	x1, x1, #0x0
  18:	add	x3, x3, #0x0
  1c:	mov	w2, #0x1a                  	// #26
  20:	mov	x29, sp
  24:	bl	0 <__assert_fail>
