
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//IBM1008_420.so_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000658 <.init>:
 658:	stp	x29, x30, [sp, #-16]!
 65c:	mov	x29, sp
 660:	bl	6f0 <__assert_fail@plt+0x10>
 664:	ldp	x29, x30, [sp], #16
 668:	ret

Disassembly of section .plt:

0000000000000670 <__cxa_finalize@plt-0x20>:
 670:	stp	x16, x30, [sp, #-16]!
 674:	adrp	x16, 11000 <gconv@@Base+0x107c0>
 678:	ldr	x17, [x16, #4088]
 67c:	add	x16, x16, #0xff8
 680:	br	x17
 684:	nop
 688:	nop
 68c:	nop

0000000000000690 <__cxa_finalize@plt>:
 690:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 694:	ldr	x17, [x16]
 698:	add	x16, x16, #0x0
 69c:	br	x17

00000000000006a0 <__stack_chk_fail@plt>:
 6a0:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 6a4:	ldr	x17, [x16, #8]
 6a8:	add	x16, x16, #0x8
 6ac:	br	x17

00000000000006b0 <__gmon_start__@plt>:
 6b0:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 6b4:	ldr	x17, [x16, #16]
 6b8:	add	x16, x16, #0x10
 6bc:	br	x17

00000000000006c0 <strcmp@plt>:
 6c0:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 6c4:	ldr	x17, [x16, #24]
 6c8:	add	x16, x16, #0x18
 6cc:	br	x17

00000000000006d0 <_dl_mcount_wrapper_check@plt>:
 6d0:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 6d4:	ldr	x17, [x16, #32]
 6d8:	add	x16, x16, #0x20
 6dc:	br	x17

00000000000006e0 <__assert_fail@plt>:
 6e0:	adrp	x16, 12000 <__cxa_finalize@GLIBC_2.17>
 6e4:	ldr	x17, [x16, #40]
 6e8:	add	x16, x16, #0x28
 6ec:	br	x17

Disassembly of section .text:

00000000000006f0 <gconv_init@@Base-0xd8>:
 6f0:	adrp	x0, 11000 <gconv@@Base+0x107c0>
 6f4:	ldr	x0, [x0, #4048]
 6f8:	cbz	x0, 700 <__assert_fail@plt+0x20>
 6fc:	b	6b0 <__gmon_start__@plt>
 700:	ret
 704:	nop
 708:	adrp	x0, 12000 <gconv@@Base+0x117c0>
 70c:	add	x0, x0, #0x38
 710:	adrp	x1, 12000 <gconv@@Base+0x117c0>
 714:	add	x1, x1, #0x38
 718:	cmp	x1, x0
 71c:	b.eq	734 <__assert_fail@plt+0x54>  // b.none
 720:	adrp	x1, 11000 <gconv@@Base+0x107c0>
 724:	ldr	x1, [x1, #4024]
 728:	cbz	x1, 734 <__assert_fail@plt+0x54>
 72c:	mov	x16, x1
 730:	br	x16
 734:	ret
 738:	adrp	x0, 12000 <gconv@@Base+0x117c0>
 73c:	add	x0, x0, #0x38
 740:	adrp	x1, 12000 <gconv@@Base+0x117c0>
 744:	add	x1, x1, #0x38
 748:	sub	x1, x1, x0
 74c:	lsr	x2, x1, #63
 750:	add	x1, x2, x1, asr #3
 754:	cmp	xzr, x1, asr #1
 758:	asr	x1, x1, #1
 75c:	b.eq	774 <__assert_fail@plt+0x94>  // b.none
 760:	adrp	x2, 11000 <gconv@@Base+0x107c0>
 764:	ldr	x2, [x2, #4064]
 768:	cbz	x2, 774 <__assert_fail@plt+0x94>
 76c:	mov	x16, x2
 770:	br	x16
 774:	ret
 778:	stp	x29, x30, [sp, #-32]!
 77c:	mov	x29, sp
 780:	str	x19, [sp, #16]
 784:	adrp	x19, 12000 <gconv@@Base+0x117c0>
 788:	ldrb	w0, [x19, #56]
 78c:	cbnz	w0, 7b4 <__assert_fail@plt+0xd4>
 790:	adrp	x0, 11000 <gconv@@Base+0x107c0>
 794:	ldr	x0, [x0, #4032]
 798:	cbz	x0, 7a8 <__assert_fail@plt+0xc8>
 79c:	adrp	x0, 12000 <gconv@@Base+0x117c0>
 7a0:	ldr	x0, [x0, #48]
 7a4:	bl	690 <__cxa_finalize@plt>
 7a8:	bl	708 <__assert_fail@plt+0x28>
 7ac:	mov	w0, #0x1                   	// #1
 7b0:	strb	w0, [x19, #56]
 7b4:	ldr	x19, [sp, #16]
 7b8:	ldp	x29, x30, [sp], #32
 7bc:	ret
 7c0:	b	738 <__assert_fail@plt+0x58>
 7c4:	nop

00000000000007c8 <gconv_init@@Base>:
 7c8:	stp	x29, x30, [sp, #-32]!
 7cc:	mov	x29, sp
 7d0:	stp	x19, x20, [sp, #16]
 7d4:	mov	x19, x0
 7d8:	adrp	x20, 0 <__cxa_finalize@plt-0x690>
 7dc:	ldr	x0, [x0, #24]
 7e0:	add	x20, x20, #0xc60
 7e4:	mov	x1, x20
 7e8:	bl	6c0 <strcmp@plt>
 7ec:	cbnz	w0, 810 <gconv_init@@Base+0x48>
 7f0:	mov	x0, #0x100000001           	// #4294967297
 7f4:	stp	x0, x0, [x19, #72]
 7f8:	str	xzr, [x19, #96]
 7fc:	mov	w0, #0x0                   	// #0
 800:	str	wzr, [x19, #88]
 804:	ldp	x19, x20, [sp, #16]
 808:	ldp	x29, x30, [sp], #32
 80c:	ret
 810:	ldr	x0, [x19, #32]
 814:	mov	x1, x20
 818:	bl	6c0 <strcmp@plt>
 81c:	cbnz	w0, 834 <gconv_init@@Base+0x6c>
 820:	mov	x1, #0xffffffffffffffff    	// #-1
 824:	mov	x0, #0x100000001           	// #4294967297
 828:	stp	x0, x0, [x19, #72]
 82c:	str	x1, [x19, #96]
 830:	b	7fc <gconv_init@@Base+0x34>
 834:	mov	w0, #0x1                   	// #1
 838:	b	804 <gconv_init@@Base+0x3c>
 83c:	nop

0000000000000840 <gconv@@Base>:
 840:	stp	x29, x30, [sp, #-192]!
 844:	mov	x14, x0
 848:	mov	x11, x2
 84c:	mov	x29, sp
 850:	stp	x21, x22, [sp, #32]
 854:	mov	x22, x1
 858:	adrp	x1, 11000 <gconv@@Base+0x107c0>
 85c:	stp	x25, x26, [sp, #64]
 860:	add	x26, x0, #0x68
 864:	ldr	w0, [x22, #16]
 868:	ldr	x1, [x1, #4056]
 86c:	stp	x19, x20, [sp, #16]
 870:	mov	x13, x4
 874:	ldr	x8, [x1]
 878:	str	x8, [sp, #184]
 87c:	mov	x8, #0x0                   	// #0
 880:	stp	x23, x24, [sp, #48]
 884:	mov	x20, x3
 888:	stp	x27, x28, [sp, #80]
 88c:	mov	w24, w7
 890:	mov	x28, x5
 894:	add	x27, x22, #0x30
 898:	mov	x23, #0x0                   	// #0
 89c:	tbnz	w0, #0, 8bc <gconv@@Base+0x7c>
 8a0:	ldr	x0, [x14, #104]
 8a4:	ldr	x23, [x26, #40]
 8a8:	cbz	x0, 8bc <gconv@@Base+0x7c>
 8ac:	adrp	x0, 11000 <gconv@@Base+0x107c0>
 8b0:	ldr	x0, [x0, #4040]
 8b4:	ldr	x0, [x0]
 8b8:	eor	x23, x23, x0
 8bc:	cbnz	w6, af0 <gconv@@Base+0x2b0>
 8c0:	cmp	x13, #0x0
 8c4:	adrp	x12, 0 <__cxa_finalize@plt-0x690>
 8c8:	csel	x0, x22, x13, eq  // eq = none
 8cc:	add	x12, x12, #0xce0
 8d0:	ldr	x21, [x22, #8]
 8d4:	add	x8, x12, #0x100
 8d8:	ldr	x9, [x0]
 8dc:	add	x0, sp, #0xb0
 8e0:	stp	x0, x26, [sp, #160]
 8e4:	mov	x26, x28
 8e8:	mov	x25, x9
 8ec:	mov	w28, w24
 8f0:	mov	x24, x14
 8f4:	str	x13, [sp, #136]
 8f8:	mov	x13, #0x0                   	// #0
 8fc:	ldr	x10, [x11]
 900:	cbz	x26, 908 <gconv@@Base+0xc8>
 904:	ldr	x13, [x26]
 908:	cmp	x10, x20
 90c:	ldr	x0, [x24, #96]
 910:	cbz	x0, 9fc <gconv@@Base+0x1bc>
 914:	mov	x0, x10
 918:	mov	x19, x25
 91c:	b.eq	9dc <gconv@@Base+0x19c>  // b.none
 920:	cmp	x21, x25
 924:	b.ls	948 <gconv@@Base+0x108>  // b.plast
 928:	ldrb	w1, [x0], #1
 92c:	cmp	x20, x0
 930:	ldrb	w1, [x8, w1, sxtw]
 934:	strb	w1, [x19], #1
 938:	b.eq	9dc <gconv@@Base+0x19c>  // b.none
 93c:	cmp	x21, x19
 940:	b.ne	928 <gconv@@Base+0xe8>  // b.any
 944:	mov	x19, x21
 948:	str	x0, [x11]
 94c:	mov	w1, #0x5                   	// #5
 950:	ldr	x0, [sp, #136]
 954:	str	w1, [sp, #132]
 958:	cbnz	x0, 9f0 <gconv@@Base+0x1b0>
 95c:	ldp	w1, w0, [x22, #16]
 960:	add	w0, w0, #0x1
 964:	str	w0, [x22, #20]
 968:	tbnz	w1, #0, adc <gconv@@Base+0x29c>
 96c:	stp	x11, x12, [sp, #104]
 970:	cmp	x25, x19
 974:	str	x8, [sp, #120]
 978:	stp	x10, x13, [sp, #144]
 97c:	b.cs	ae8 <gconv@@Base+0x2a8>  // b.hs, b.nlast
 980:	ldr	x1, [x22]
 984:	mov	x0, x23
 988:	str	x1, [sp, #176]
 98c:	bl	6d0 <_dl_mcount_wrapper_check@plt>
 990:	ldp	x2, x0, [sp, #160]
 994:	mov	w7, w28
 998:	mov	x5, x26
 99c:	mov	x3, x19
 9a0:	mov	x1, x27
 9a4:	mov	w6, #0x0                   	// #0
 9a8:	mov	x4, #0x0                   	// #0
 9ac:	blr	x23
 9b0:	cmp	w0, #0x4
 9b4:	ldp	x11, x12, [sp, #104]
 9b8:	ldr	x8, [sp, #120]
 9bc:	b.eq	a30 <gconv@@Base+0x1f0>  // b.none
 9c0:	ldr	x1, [sp, #176]
 9c4:	ldp	x10, x13, [sp, #144]
 9c8:	cmp	x1, x19
 9cc:	b.ne	a78 <gconv@@Base+0x238>  // b.any
 9d0:	cbnz	w0, a3c <gconv@@Base+0x1fc>
 9d4:	ldr	x25, [x22]
 9d8:	b	8f8 <gconv@@Base+0xb8>
 9dc:	str	x0, [x11]
 9e0:	mov	w1, #0x4                   	// #4
 9e4:	ldr	x0, [sp, #136]
 9e8:	str	w1, [sp, #132]
 9ec:	cbz	x0, 95c <gconv@@Base+0x11c>
 9f0:	ldr	w25, [sp, #132]
 9f4:	str	x19, [x0]
 9f8:	b	a40 <gconv@@Base+0x200>
 9fc:	mov	x0, x10
 a00:	mov	x19, x25
 a04:	b.eq	9dc <gconv@@Base+0x19c>  // b.none
 a08:	cmp	x21, x25
 a0c:	b.ls	948 <gconv@@Base+0x108>  // b.plast
 a10:	ldrb	w1, [x0], #1
 a14:	cmp	x20, x0
 a18:	ldrb	w1, [x12, w1, sxtw]
 a1c:	strb	w1, [x19], #1
 a20:	b.eq	9dc <gconv@@Base+0x19c>  // b.none
 a24:	cmp	x21, x19
 a28:	b.ne	a10 <gconv@@Base+0x1d0>  // b.any
 a2c:	b	944 <gconv@@Base+0x104>
 a30:	ldr	w1, [sp, #132]
 a34:	cmp	w1, #0x5
 a38:	b.eq	9d4 <gconv@@Base+0x194>  // b.none
 a3c:	mov	w25, w0
 a40:	adrp	x0, 11000 <gconv@@Base+0x107c0>
 a44:	ldr	x0, [x0, #4056]
 a48:	ldr	x1, [sp, #184]
 a4c:	ldr	x0, [x0]
 a50:	eor	x0, x1, x0
 a54:	cbnz	x0, c4c <gconv@@Base+0x40c>
 a58:	mov	w0, w25
 a5c:	ldp	x19, x20, [sp, #16]
 a60:	ldp	x21, x22, [sp, #32]
 a64:	ldp	x23, x24, [sp, #48]
 a68:	ldp	x25, x26, [sp, #64]
 a6c:	ldp	x27, x28, [sp, #80]
 a70:	ldp	x29, x30, [sp], #192
 a74:	ret
 a78:	mov	x2, #0x0                   	// #0
 a7c:	cbz	x26, a84 <gconv@@Base+0x244>
 a80:	ldr	x2, [x26]
 a84:	cmp	x13, x2
 a88:	b.eq	b40 <gconv@@Base+0x300>  // b.none
 a8c:	str	x10, [x11]
 a90:	cmp	x10, x20
 a94:	ldr	x2, [x24, #96]
 a98:	cbz	x2, b58 <gconv@@Base+0x318>
 a9c:	b.eq	c20 <gconv@@Base+0x3e0>  // b.none
 aa0:	cmp	x1, x25
 aa4:	b.ls	c18 <gconv@@Base+0x3d8>  // b.plast
 aa8:	ldrb	w2, [x10], #1
 aac:	cmp	x20, x10
 ab0:	ldrb	w2, [x8, w2, sxtw]
 ab4:	strb	w2, [x25], #1
 ab8:	b.eq	bb8 <gconv@@Base+0x378>  // b.none
 abc:	cmp	x1, x25
 ac0:	b.ne	aa8 <gconv@@Base+0x268>  // b.any
 ac4:	ldr	x2, [sp, #176]
 ac8:	str	x10, [x11]
 acc:	cmp	x1, x2
 ad0:	b.ne	bf8 <gconv@@Base+0x3b8>  // b.any
 ad4:	cbz	w0, 9d4 <gconv@@Base+0x194>
 ad8:	b	a3c <gconv@@Base+0x1fc>
 adc:	ldr	w25, [sp, #132]
 ae0:	str	x19, [x22]
 ae4:	b	a40 <gconv@@Base+0x200>
 ae8:	ldr	w25, [sp, #132]
 aec:	b	a40 <gconv@@Base+0x200>
 af0:	cbnz	x13, c2c <gconv@@Base+0x3ec>
 af4:	ldr	x0, [x22, #32]
 af8:	mov	w25, #0x0                   	// #0
 afc:	str	xzr, [x0]
 b00:	ldr	w0, [x22, #16]
 b04:	tbnz	w0, #0, a40 <gconv@@Base+0x200>
 b08:	mov	x0, x23
 b0c:	str	w6, [sp, #104]
 b10:	bl	6d0 <_dl_mcount_wrapper_check@plt>
 b14:	ldr	w6, [sp, #104]
 b18:	mov	w7, w24
 b1c:	mov	x5, x28
 b20:	mov	x1, x27
 b24:	mov	x0, x26
 b28:	mov	x4, #0x0                   	// #0
 b2c:	mov	x3, #0x0                   	// #0
 b30:	mov	x2, #0x0                   	// #0
 b34:	blr	x23
 b38:	mov	w25, w0
 b3c:	b	a40 <gconv@@Base+0x200>
 b40:	ldr	x2, [x11]
 b44:	sub	x1, x19, x1
 b48:	sub	x1, x2, x1
 b4c:	str	x1, [x11]
 b50:	cbz	w0, 9d4 <gconv@@Base+0x194>
 b54:	b	a3c <gconv@@Base+0x1fc>
 b58:	b.eq	c20 <gconv@@Base+0x3e0>  // b.none
 b5c:	subs	x3, x1, x25
 b60:	mov	x1, x25
 b64:	add	x3, x10, x3
 b68:	b.ls	c18 <gconv@@Base+0x3d8>  // b.plast
 b6c:	nop
 b70:	ldrb	w2, [x10], #1
 b74:	cmp	x20, x10
 b78:	ldrb	w2, [x12, w2, sxtw]
 b7c:	strb	w2, [x1], #1
 b80:	b.eq	be8 <gconv@@Base+0x3a8>  // b.none
 b84:	cmp	x3, x10
 b88:	b.ne	b70 <gconv@@Base+0x330>  // b.any
 b8c:	ldr	x2, [sp, #176]
 b90:	str	x3, [x11]
 b94:	cmp	x2, x1
 b98:	b.ne	bf8 <gconv@@Base+0x3b8>  // b.any
 b9c:	cmp	x1, x25
 ba0:	b.ne	9d0 <gconv@@Base+0x190>  // b.any
 ba4:	ldr	w1, [x22, #20]
 ba8:	sub	w1, w1, #0x1
 bac:	str	w1, [x22, #20]
 bb0:	cbz	w0, 9d4 <gconv@@Base+0x194>
 bb4:	b	a3c <gconv@@Base+0x1fc>
 bb8:	ldr	x0, [sp, #176]
 bbc:	str	x20, [x11]
 bc0:	cmp	x0, x25
 bc4:	b.ne	bf8 <gconv@@Base+0x3b8>  // b.any
 bc8:	adrp	x3, 0 <__cxa_finalize@plt-0x690>
 bcc:	adrp	x1, 0 <__cxa_finalize@plt-0x690>
 bd0:	adrp	x0, 0 <__cxa_finalize@plt-0x690>
 bd4:	add	x3, x3, #0xcd8
 bd8:	add	x1, x1, #0xc70
 bdc:	add	x0, x0, #0xcb8
 be0:	mov	w2, #0x2eb                 	// #747
 be4:	bl	6e0 <__assert_fail@plt>
 be8:	ldr	x0, [sp, #176]
 bec:	str	x20, [x11]
 bf0:	cmp	x1, x0
 bf4:	b.eq	bc8 <gconv@@Base+0x388>  // b.none
 bf8:	adrp	x3, 0 <__cxa_finalize@plt-0x690>
 bfc:	adrp	x1, 0 <__cxa_finalize@plt-0x690>
 c00:	adrp	x0, 0 <__cxa_finalize@plt-0x690>
 c04:	add	x3, x3, #0xcd8
 c08:	add	x1, x1, #0xc70
 c0c:	add	x0, x0, #0xca0
 c10:	mov	w2, #0x2ea                 	// #746
 c14:	bl	6e0 <__assert_fail@plt>
 c18:	b.eq	ba4 <gconv@@Base+0x364>  // b.none
 c1c:	b	bf8 <gconv@@Base+0x3b8>
 c20:	cmp	x1, x25
 c24:	b.eq	bc8 <gconv@@Base+0x388>  // b.none
 c28:	b	bf8 <gconv@@Base+0x3b8>
 c2c:	adrp	x3, 0 <__cxa_finalize@plt-0x690>
 c30:	adrp	x1, 0 <__cxa_finalize@plt-0x690>
 c34:	adrp	x0, 0 <__cxa_finalize@plt-0x690>
 c38:	add	x3, x3, #0xcd8
 c3c:	add	x1, x1, #0xc70
 c40:	add	x0, x0, #0xc88
 c44:	mov	w2, #0x1a4                 	// #420
 c48:	bl	6e0 <__assert_fail@plt>
 c4c:	bl	6a0 <__stack_chk_fail@plt>

Disassembly of section .fini:

0000000000000c50 <.fini>:
 c50:	stp	x29, x30, [sp, #-16]!
 c54:	mov	x29, sp
 c58:	ldp	x29, x30, [sp], #16
 c5c:	ret
