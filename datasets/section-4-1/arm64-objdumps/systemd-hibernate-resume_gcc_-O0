
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-hibernate-resume_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400980 <_init>:
  400980:	stp	x29, x30, [sp, #-16]!
  400984:	mov	x29, sp
  400988:	bl	400b20 <call_weak_fn>
  40098c:	ldp	x29, x30, [sp], #16
  400990:	ret

Disassembly of section .plt:

00000000004009a0 <.plt>:
  4009a0:	stp	x16, x30, [sp, #-16]!
  4009a4:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  4009a8:	ldr	x17, [x16, #3936]
  4009ac:	add	x16, x16, #0xf60
  4009b0:	br	x17
  4009b4:	nop
  4009b8:	nop
  4009bc:	nop

00000000004009c0 <__libc_start_main@plt>:
  4009c0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  4009c4:	ldr	x17, [x16, #3944]
  4009c8:	add	x16, x16, #0xf68
  4009cc:	br	x17

00000000004009d0 <__gmon_start__@plt>:
  4009d0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  4009d4:	ldr	x17, [x16, #3952]
  4009d8:	add	x16, x16, #0xf70
  4009dc:	br	x17

00000000004009e0 <write_string_file_ts@plt>:
  4009e0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  4009e4:	ldr	x17, [x16, #3960]
  4009e8:	add	x16, x16, #0xf78
  4009ec:	br	x17

00000000004009f0 <log_setup_service@plt>:
  4009f0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  4009f4:	ldr	x17, [x16, #3968]
  4009f8:	add	x16, x16, #0xf80
  4009fc:	br	x17

0000000000400a00 <umask@plt>:
  400a00:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a04:	ldr	x17, [x16, #3976]
  400a08:	add	x16, x16, #0xf88
  400a0c:	br	x17

0000000000400a10 <in_initrd@plt>:
  400a10:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a14:	ldr	x17, [x16, #3984]
  400a18:	add	x16, x16, #0xf90
  400a1c:	br	x17

0000000000400a20 <abort@plt>:
  400a20:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a24:	ldr	x17, [x16, #3992]
  400a28:	add	x16, x16, #0xf98
  400a2c:	br	x17

0000000000400a30 <__errno_location@plt>:
  400a30:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a34:	ldr	x17, [x16, #4000]
  400a38:	add	x16, x16, #0xfa0
  400a3c:	br	x17

0000000000400a40 <__stack_chk_fail@plt>:
  400a40:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a44:	ldr	x17, [x16, #4008]
  400a48:	add	x16, x16, #0xfa8
  400a4c:	br	x17

0000000000400a50 <__xstat64@plt>:
  400a50:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a54:	ldr	x17, [x16, #4016]
  400a58:	add	x16, x16, #0xfb0
  400a5c:	br	x17

0000000000400a60 <log_internal_realm@plt>:
  400a60:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a64:	ldr	x17, [x16, #4024]
  400a68:	add	x16, x16, #0xfb8
  400a6c:	br	x17

0000000000400a70 <gnu_dev_major@plt>:
  400a70:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a74:	ldr	x17, [x16, #4032]
  400a78:	add	x16, x16, #0xfc0
  400a7c:	br	x17

0000000000400a80 <asprintf@plt>:
  400a80:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a84:	ldr	x17, [x16, #4040]
  400a88:	add	x16, x16, #0xfc8
  400a8c:	br	x17

0000000000400a90 <free@plt>:
  400a90:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400a94:	ldr	x17, [x16, #4048]
  400a98:	add	x16, x16, #0xfd0
  400a9c:	br	x17

0000000000400aa0 <gnu_dev_minor@plt>:
  400aa0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400aa4:	ldr	x17, [x16, #4056]
  400aa8:	add	x16, x16, #0xfd8
  400aac:	br	x17

0000000000400ab0 <log_oom_internal@plt>:
  400ab0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400ab4:	ldr	x17, [x16, #4064]
  400ab8:	add	x16, x16, #0xfe0
  400abc:	br	x17

0000000000400ac0 <log_get_max_level_realm@plt>:
  400ac0:	adrp	x16, 411000 <__FRAME_END__+0xfb94>
  400ac4:	ldr	x17, [x16, #4072]
  400ac8:	add	x16, x16, #0xfe8
  400acc:	br	x17

Disassembly of section .text:

0000000000400ad0 <_start>:
  400ad0:	mov	x29, #0x0                   	// #0
  400ad4:	mov	x30, #0x0                   	// #0
  400ad8:	mov	x5, x0
  400adc:	ldr	x1, [sp]
  400ae0:	add	x2, sp, #0x8
  400ae4:	mov	x6, sp
  400ae8:	movz	x0, #0x0, lsl #48
  400aec:	movk	x0, #0x0, lsl #32
  400af0:	movk	x0, #0x40, lsl #16
  400af4:	movk	x0, #0xcec
  400af8:	movz	x3, #0x0, lsl #48
  400afc:	movk	x3, #0x0, lsl #32
  400b00:	movk	x3, #0x40, lsl #16
  400b04:	movk	x3, #0x10d8
  400b08:	movz	x4, #0x0, lsl #48
  400b0c:	movk	x4, #0x0, lsl #32
  400b10:	movk	x4, #0x40, lsl #16
  400b14:	movk	x4, #0x1158
  400b18:	bl	4009c0 <__libc_start_main@plt>
  400b1c:	bl	400a20 <abort@plt>

0000000000400b20 <call_weak_fn>:
  400b20:	adrp	x0, 411000 <__FRAME_END__+0xfb94>
  400b24:	ldr	x0, [x0, #4088]
  400b28:	cbz	x0, 400b30 <call_weak_fn+0x10>
  400b2c:	b	4009d0 <__gmon_start__@plt>
  400b30:	ret

0000000000400b34 <deregister_tm_clones>:
  400b34:	stp	x29, x30, [sp, #-32]!
  400b38:	mov	x29, sp
  400b3c:	adrp	x0, 412000 <__TMC_END__>
  400b40:	add	x0, x0, #0x0
  400b44:	str	x0, [sp, #24]
  400b48:	ldr	x0, [sp, #24]
  400b4c:	str	x0, [sp, #24]
  400b50:	ldr	x1, [sp, #24]
  400b54:	adrp	x0, 412000 <__TMC_END__>
  400b58:	add	x0, x0, #0x0
  400b5c:	cmp	x1, x0
  400b60:	b.eq	400b9c <deregister_tm_clones+0x68>  // b.none
  400b64:	adrp	x0, 401000 <main+0x314>
  400b68:	add	x0, x0, #0x180
  400b6c:	ldr	x0, [x0]
  400b70:	str	x0, [sp, #16]
  400b74:	ldr	x0, [sp, #16]
  400b78:	str	x0, [sp, #16]
  400b7c:	ldr	x0, [sp, #16]
  400b80:	cmp	x0, #0x0
  400b84:	b.eq	400ba0 <deregister_tm_clones+0x6c>  // b.none
  400b88:	ldr	x1, [sp, #16]
  400b8c:	adrp	x0, 412000 <__TMC_END__>
  400b90:	add	x0, x0, #0x0
  400b94:	blr	x1
  400b98:	b	400ba0 <deregister_tm_clones+0x6c>
  400b9c:	nop
  400ba0:	ldp	x29, x30, [sp], #32
  400ba4:	ret

0000000000400ba8 <register_tm_clones>:
  400ba8:	stp	x29, x30, [sp, #-48]!
  400bac:	mov	x29, sp
  400bb0:	adrp	x0, 412000 <__TMC_END__>
  400bb4:	add	x0, x0, #0x0
  400bb8:	str	x0, [sp, #40]
  400bbc:	ldr	x0, [sp, #40]
  400bc0:	str	x0, [sp, #40]
  400bc4:	ldr	x1, [sp, #40]
  400bc8:	adrp	x0, 412000 <__TMC_END__>
  400bcc:	add	x0, x0, #0x0
  400bd0:	sub	x0, x1, x0
  400bd4:	asr	x0, x0, #3
  400bd8:	lsr	x1, x0, #63
  400bdc:	add	x0, x1, x0
  400be0:	asr	x0, x0, #1
  400be4:	str	x0, [sp, #32]
  400be8:	ldr	x0, [sp, #32]
  400bec:	cmp	x0, #0x0
  400bf0:	b.eq	400c30 <register_tm_clones+0x88>  // b.none
  400bf4:	adrp	x0, 401000 <main+0x314>
  400bf8:	add	x0, x0, #0x188
  400bfc:	ldr	x0, [x0]
  400c00:	str	x0, [sp, #24]
  400c04:	ldr	x0, [sp, #24]
  400c08:	str	x0, [sp, #24]
  400c0c:	ldr	x0, [sp, #24]
  400c10:	cmp	x0, #0x0
  400c14:	b.eq	400c34 <register_tm_clones+0x8c>  // b.none
  400c18:	ldr	x2, [sp, #24]
  400c1c:	ldr	x1, [sp, #32]
  400c20:	adrp	x0, 412000 <__TMC_END__>
  400c24:	add	x0, x0, #0x0
  400c28:	blr	x2
  400c2c:	b	400c34 <register_tm_clones+0x8c>
  400c30:	nop
  400c34:	ldp	x29, x30, [sp], #48
  400c38:	ret

0000000000400c3c <__do_global_dtors_aux>:
  400c3c:	stp	x29, x30, [sp, #-16]!
  400c40:	mov	x29, sp
  400c44:	adrp	x0, 412000 <__TMC_END__>
  400c48:	add	x0, x0, #0x0
  400c4c:	ldrb	w0, [x0]
  400c50:	and	x0, x0, #0xff
  400c54:	cmp	x0, #0x0
  400c58:	b.ne	400c74 <__do_global_dtors_aux+0x38>  // b.any
  400c5c:	bl	400b34 <deregister_tm_clones>
  400c60:	adrp	x0, 412000 <__TMC_END__>
  400c64:	add	x0, x0, #0x0
  400c68:	mov	w1, #0x1                   	// #1
  400c6c:	strb	w1, [x0]
  400c70:	b	400c78 <__do_global_dtors_aux+0x3c>
  400c74:	nop
  400c78:	ldp	x29, x30, [sp], #16
  400c7c:	ret

0000000000400c80 <frame_dummy>:
  400c80:	stp	x29, x30, [sp, #-16]!
  400c84:	mov	x29, sp
  400c88:	bl	400ba8 <register_tm_clones>
  400c8c:	nop
  400c90:	ldp	x29, x30, [sp], #16
  400c94:	ret

0000000000400c98 <freep>:
  400c98:	stp	x29, x30, [sp, #-32]!
  400c9c:	mov	x29, sp
  400ca0:	str	x0, [sp, #24]
  400ca4:	ldr	x0, [sp, #24]
  400ca8:	ldr	x0, [x0]
  400cac:	bl	400a90 <free@plt>
  400cb0:	nop
  400cb4:	ldp	x29, x30, [sp], #32
  400cb8:	ret

0000000000400cbc <write_string_file>:
  400cbc:	stp	x29, x30, [sp, #-48]!
  400cc0:	mov	x29, sp
  400cc4:	str	x0, [sp, #40]
  400cc8:	str	x1, [sp, #32]
  400ccc:	str	w2, [sp, #28]
  400cd0:	mov	x3, #0x0                   	// #0
  400cd4:	ldr	w2, [sp, #28]
  400cd8:	ldr	x1, [sp, #32]
  400cdc:	ldr	x0, [sp, #40]
  400ce0:	bl	4009e0 <write_string_file_ts@plt>
  400ce4:	ldp	x29, x30, [sp], #48
  400ce8:	ret

0000000000400cec <main>:
  400cec:	stp	x29, x30, [sp, #-272]!
  400cf0:	mov	x29, sp
  400cf4:	str	x19, [sp, #16]
  400cf8:	str	w0, [sp, #44]
  400cfc:	str	x1, [sp, #32]
  400d00:	adrp	x0, 411000 <__FRAME_END__+0xfb94>
  400d04:	add	x0, x0, #0xd18
  400d08:	ldr	x1, [x0]
  400d0c:	str	x1, [sp, #264]
  400d10:	mov	x1, #0x0                   	// #0
  400d14:	str	xzr, [sp, #120]
  400d18:	ldr	w0, [sp, #44]
  400d1c:	cmp	w0, #0x2
  400d20:	b.eq	400da0 <main+0xb4>  // b.none
  400d24:	mov	w0, #0x3                   	// #3
  400d28:	str	w0, [sp, #108]
  400d2c:	str	wzr, [sp, #112]
  400d30:	str	wzr, [sp, #116]
  400d34:	ldr	w0, [sp, #116]
  400d38:	bl	400ac0 <log_get_max_level_realm@plt>
  400d3c:	mov	w1, w0
  400d40:	ldr	w0, [sp, #108]
  400d44:	and	w0, w0, #0x7
  400d48:	cmp	w1, w0
  400d4c:	b.lt	400d90 <main+0xa4>  // b.tstop
  400d50:	ldr	w0, [sp, #116]
  400d54:	lsl	w1, w0, #10
  400d58:	ldr	w0, [sp, #108]
  400d5c:	orr	w6, w1, w0
  400d60:	adrp	x0, 401000 <main+0x314>
  400d64:	add	x1, x0, #0x193
  400d68:	adrp	x0, 401000 <main+0x314>
  400d6c:	add	x5, x0, #0x1c0
  400d70:	adrp	x0, 401000 <main+0x314>
  400d74:	add	x4, x0, #0x2a8
  400d78:	mov	w3, #0x13                  	// #19
  400d7c:	mov	x2, x1
  400d80:	ldr	w1, [sp, #112]
  400d84:	mov	w0, w6
  400d88:	bl	400a60 <log_internal_realm@plt>
  400d8c:	b	400d98 <main+0xac>
  400d90:	ldr	w0, [sp, #112]
  400d94:	cmp	w0, #0x0
  400d98:	mov	w19, #0x1                   	// #1
  400d9c:	b	401098 <main+0x3ac>
  400da0:	bl	4009f0 <log_setup_service@plt>
  400da4:	mov	w0, #0x12                  	// #18
  400da8:	bl	400a00 <umask@plt>
  400dac:	bl	400a10 <in_initrd@plt>
  400db0:	and	w0, w0, #0xff
  400db4:	eor	w0, w0, #0x1
  400db8:	and	w0, w0, #0xff
  400dbc:	cmp	w0, #0x0
  400dc0:	b.eq	400dcc <main+0xe0>  // b.none
  400dc4:	mov	w19, #0x0                   	// #0
  400dc8:	b	401098 <main+0x3ac>
  400dcc:	ldr	x0, [sp, #32]
  400dd0:	ldr	x0, [x0, #8]
  400dd4:	str	x0, [sp, #128]
  400dd8:	add	x0, sp, #0x88
  400ddc:	mov	x1, x0
  400de0:	ldr	x0, [sp, #128]
  400de4:	bl	401160 <stat64>
  400de8:	cmp	w0, #0x0
  400dec:	b.ge	400e78 <main+0x18c>  // b.tcont
  400df0:	mov	w0, #0x3                   	// #3
  400df4:	str	w0, [sp, #96]
  400df8:	bl	400a30 <__errno_location@plt>
  400dfc:	ldr	w0, [x0]
  400e00:	str	w0, [sp, #100]
  400e04:	str	wzr, [sp, #104]
  400e08:	ldr	w0, [sp, #104]
  400e0c:	bl	400ac0 <log_get_max_level_realm@plt>
  400e10:	mov	w1, w0
  400e14:	ldr	w0, [sp, #96]
  400e18:	and	w0, w0, #0x7
  400e1c:	cmp	w1, w0
  400e20:	b.lt	400e68 <main+0x17c>  // b.tstop
  400e24:	ldr	w0, [sp, #104]
  400e28:	lsl	w1, w0, #10
  400e2c:	ldr	w0, [sp, #96]
  400e30:	orr	w7, w1, w0
  400e34:	adrp	x0, 401000 <main+0x314>
  400e38:	add	x1, x0, #0x193
  400e3c:	ldr	x6, [sp, #128]
  400e40:	adrp	x0, 401000 <main+0x314>
  400e44:	add	x5, x0, #0x1e8
  400e48:	adrp	x0, 401000 <main+0x314>
  400e4c:	add	x4, x0, #0x2a8
  400e50:	mov	w3, #0x22                  	// #34
  400e54:	mov	x2, x1
  400e58:	ldr	w1, [sp, #100]
  400e5c:	mov	w0, w7
  400e60:	bl	400a60 <log_internal_realm@plt>
  400e64:	b	400e70 <main+0x184>
  400e68:	ldr	w0, [sp, #100]
  400e6c:	cmp	w0, #0x0
  400e70:	mov	w19, #0x1                   	// #1
  400e74:	b	401098 <main+0x3ac>
  400e78:	ldr	w0, [sp, #152]
  400e7c:	and	w0, w0, #0xf000
  400e80:	cmp	w0, #0x6, lsl #12
  400e84:	b.eq	400f08 <main+0x21c>  // b.none
  400e88:	mov	w0, #0x3                   	// #3
  400e8c:	str	w0, [sp, #84]
  400e90:	str	wzr, [sp, #88]
  400e94:	str	wzr, [sp, #92]
  400e98:	ldr	w0, [sp, #92]
  400e9c:	bl	400ac0 <log_get_max_level_realm@plt>
  400ea0:	mov	w1, w0
  400ea4:	ldr	w0, [sp, #84]
  400ea8:	and	w0, w0, #0x7
  400eac:	cmp	w1, w0
  400eb0:	b.lt	400ef8 <main+0x20c>  // b.tstop
  400eb4:	ldr	w0, [sp, #92]
  400eb8:	lsl	w1, w0, #10
  400ebc:	ldr	w0, [sp, #84]
  400ec0:	orr	w7, w1, w0
  400ec4:	adrp	x0, 401000 <main+0x314>
  400ec8:	add	x1, x0, #0x193
  400ecc:	ldr	x6, [sp, #128]
  400ed0:	adrp	x0, 401000 <main+0x314>
  400ed4:	add	x5, x0, #0x200
  400ed8:	adrp	x0, 401000 <main+0x314>
  400edc:	add	x4, x0, #0x2a8
  400ee0:	mov	w3, #0x27                  	// #39
  400ee4:	mov	x2, x1
  400ee8:	ldr	w1, [sp, #88]
  400eec:	mov	w0, w7
  400ef0:	bl	400a60 <log_internal_realm@plt>
  400ef4:	b	400f00 <main+0x214>
  400ef8:	ldr	w0, [sp, #88]
  400efc:	cmp	w0, #0x0
  400f00:	mov	w19, #0x1                   	// #1
  400f04:	b	401098 <main+0x3ac>
  400f08:	ldr	x0, [sp, #168]
  400f0c:	bl	400a70 <gnu_dev_major@plt>
  400f10:	mov	w19, w0
  400f14:	ldr	x0, [sp, #168]
  400f18:	bl	400aa0 <gnu_dev_minor@plt>
  400f1c:	add	x4, sp, #0x78
  400f20:	mov	w3, w0
  400f24:	mov	w2, w19
  400f28:	adrp	x0, 401000 <main+0x314>
  400f2c:	add	x1, x0, #0x230
  400f30:	mov	x0, x4
  400f34:	bl	400a80 <asprintf@plt>
  400f38:	cmp	w0, #0x0
  400f3c:	b.ge	400f64 <main+0x278>  // b.tcont
  400f40:	adrp	x0, 401000 <main+0x314>
  400f44:	add	x1, x0, #0x193
  400f48:	adrp	x0, 401000 <main+0x314>
  400f4c:	add	x3, x0, #0x2a8
  400f50:	mov	w2, #0x2c                  	// #44
  400f54:	mov	w0, #0x0                   	// #0
  400f58:	bl	400ab0 <log_oom_internal@plt>
  400f5c:	mov	w19, #0x1                   	// #1
  400f60:	b	401098 <main+0x3ac>
  400f64:	ldr	x0, [sp, #120]
  400f68:	mov	w2, #0x20                  	// #32
  400f6c:	mov	x1, x0
  400f70:	adrp	x0, 401000 <main+0x314>
  400f74:	add	x0, x0, #0x238
  400f78:	bl	400cbc <write_string_file>
  400f7c:	str	w0, [sp, #56]
  400f80:	ldr	w0, [sp, #56]
  400f84:	cmp	w0, #0x0
  400f88:	b.ge	401014 <main+0x328>  // b.tcont
  400f8c:	mov	w0, #0x3                   	// #3
  400f90:	str	w0, [sp, #72]
  400f94:	ldr	w0, [sp, #56]
  400f98:	str	w0, [sp, #76]
  400f9c:	str	wzr, [sp, #80]
  400fa0:	ldr	w0, [sp, #80]
  400fa4:	bl	400ac0 <log_get_max_level_realm@plt>
  400fa8:	mov	w1, w0
  400fac:	ldr	w0, [sp, #72]
  400fb0:	and	w0, w0, #0x7
  400fb4:	cmp	w1, w0
  400fb8:	b.lt	401004 <main+0x318>  // b.tstop
  400fbc:	ldr	w0, [sp, #80]
  400fc0:	lsl	w1, w0, #10
  400fc4:	ldr	w0, [sp, #72]
  400fc8:	orr	w7, w1, w0
  400fcc:	adrp	x0, 401000 <main+0x314>
  400fd0:	add	x1, x0, #0x193
  400fd4:	ldr	x0, [sp, #120]
  400fd8:	mov	x6, x0
  400fdc:	adrp	x0, 401000 <main+0x314>
  400fe0:	add	x5, x0, #0x250
  400fe4:	adrp	x0, 401000 <main+0x314>
  400fe8:	add	x4, x0, #0x2a8
  400fec:	mov	w3, #0x32                  	// #50
  400ff0:	mov	x2, x1
  400ff4:	ldr	w1, [sp, #76]
  400ff8:	mov	w0, w7
  400ffc:	bl	400a60 <log_internal_realm@plt>
  401000:	b	40100c <main+0x320>
  401004:	ldr	w0, [sp, #76]
  401008:	cmp	w0, #0x0
  40100c:	mov	w19, #0x1                   	// #1
  401010:	b	401098 <main+0x3ac>
  401014:	mov	w0, #0x6                   	// #6
  401018:	str	w0, [sp, #60]
  40101c:	str	wzr, [sp, #64]
  401020:	str	wzr, [sp, #68]
  401024:	ldr	w0, [sp, #68]
  401028:	bl	400ac0 <log_get_max_level_realm@plt>
  40102c:	mov	w1, w0
  401030:	ldr	w0, [sp, #60]
  401034:	and	w0, w0, #0x7
  401038:	cmp	w1, w0
  40103c:	b.lt	40108c <main+0x3a0>  // b.tstop
  401040:	ldr	w0, [sp, #68]
  401044:	lsl	w1, w0, #10
  401048:	ldr	w0, [sp, #60]
  40104c:	orr	w8, w1, w0
  401050:	adrp	x0, 401000 <main+0x314>
  401054:	add	x1, x0, #0x193
  401058:	ldr	x0, [sp, #120]
  40105c:	mov	x7, x0
  401060:	ldr	x6, [sp, #128]
  401064:	adrp	x0, 401000 <main+0x314>
  401068:	add	x5, x0, #0x280
  40106c:	adrp	x0, 401000 <main+0x314>
  401070:	add	x4, x0, #0x2a8
  401074:	mov	w3, #0x3d                  	// #61
  401078:	mov	x2, x1
  40107c:	ldr	w1, [sp, #64]
  401080:	mov	w0, w8
  401084:	bl	400a60 <log_internal_realm@plt>
  401088:	b	401094 <main+0x3a8>
  40108c:	ldr	w0, [sp, #64]
  401090:	cmp	w0, #0x0
  401094:	mov	w19, #0x0                   	// #0
  401098:	add	x0, sp, #0x78
  40109c:	bl	400c98 <freep>
  4010a0:	mov	w1, w19
  4010a4:	adrp	x0, 411000 <__FRAME_END__+0xfb94>
  4010a8:	add	x0, x0, #0xd18
  4010ac:	ldr	x2, [sp, #264]
  4010b0:	ldr	x0, [x0]
  4010b4:	eor	x0, x2, x0
  4010b8:	cmp	x0, #0x0
  4010bc:	b.eq	4010c4 <main+0x3d8>  // b.none
  4010c0:	bl	400a40 <__stack_chk_fail@plt>
  4010c4:	mov	w0, w1
  4010c8:	ldr	x19, [sp, #16]
  4010cc:	ldp	x29, x30, [sp], #272
  4010d0:	ret
  4010d4:	nop

00000000004010d8 <__libc_csu_init>:
  4010d8:	stp	x29, x30, [sp, #-64]!
  4010dc:	mov	x29, sp
  4010e0:	stp	x19, x20, [sp, #16]
  4010e4:	adrp	x20, 411000 <__FRAME_END__+0xfb94>
  4010e8:	add	x20, x20, #0xd10
  4010ec:	stp	x21, x22, [sp, #32]
  4010f0:	adrp	x21, 411000 <__FRAME_END__+0xfb94>
  4010f4:	add	x21, x21, #0xd08
  4010f8:	sub	x20, x20, x21
  4010fc:	mov	w22, w0
  401100:	stp	x23, x24, [sp, #48]
  401104:	mov	x23, x1
  401108:	mov	x24, x2
  40110c:	bl	400980 <_init>
  401110:	cmp	xzr, x20, asr #3
  401114:	b.eq	401140 <__libc_csu_init+0x68>  // b.none
  401118:	asr	x20, x20, #3
  40111c:	mov	x19, #0x0                   	// #0
  401120:	ldr	x3, [x21, x19, lsl #3]
  401124:	mov	x2, x24
  401128:	add	x19, x19, #0x1
  40112c:	mov	x1, x23
  401130:	mov	w0, w22
  401134:	blr	x3
  401138:	cmp	x20, x19
  40113c:	b.ne	401120 <__libc_csu_init+0x48>  // b.any
  401140:	ldp	x19, x20, [sp, #16]
  401144:	ldp	x21, x22, [sp, #32]
  401148:	ldp	x23, x24, [sp, #48]
  40114c:	ldp	x29, x30, [sp], #64
  401150:	ret
  401154:	nop

0000000000401158 <__libc_csu_fini>:
  401158:	ret
  40115c:	nop

0000000000401160 <stat64>:
  401160:	mov	x2, x1
  401164:	mov	x1, x0
  401168:	mov	w0, #0x0                   	// #0
  40116c:	b	400a50 <__xstat64@plt>

Disassembly of section .fini:

0000000000401170 <_fini>:
  401170:	stp	x29, x30, [sp, #-16]!
  401174:	mov	x29, sp
  401178:	ldp	x29, x30, [sp], #16
  40117c:	ret
