
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_idea.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <cipher>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x2
  10:	mov	x19, x0
  14:	mov	x2, #0x8                   	// #8
  18:	add	x0, sp, #0x28
  1c:	bl	0 <grub_memmove>
  20:	ldrh	w8, [sp, #40]
  24:	add	x10, x20, #0x60
  28:	ldrh	w1, [sp, #42]
  2c:	mov	x0, x20
  30:	ldrh	w3, [sp, #44]
  34:	mov	w9, #0x1                   	// #1
  38:	ldrh	w2, [sp, #46]
  3c:	lsl	w4, w8, #8
  40:	lsl	w11, w1, #8
  44:	orr	w8, w4, w8, lsr #8
  48:	lsl	w7, w3, #8
  4c:	orr	w1, w11, w1, lsr #8
  50:	lsl	w4, w2, #8
  54:	orr	w7, w7, w3, lsr #8
  58:	orr	w2, w4, w2, lsr #8
  5c:	and	w8, w8, #0xffff
  60:	and	w11, w1, #0xffff
  64:	and	w7, w7, #0xffff
  68:	and	w2, w2, #0xffff
  6c:	b	158 <cipher+0x158>
  70:	cbz	w8, 2b0 <cipher+0x2b0>
  74:	mul	w4, w4, w8
  78:	and	w1, w4, #0xffff
  7c:	lsr	w3, w4, #16
  80:	sub	w1, w1, w3
  84:	cmp	w3, w4, uxth
  88:	cinc	w4, w1, hi  // hi = pmore
  8c:	and	w4, w4, #0xffff
  90:	ldrh	w6, [x0, #6]
  94:	ldrh	w1, [x0, #2]
  98:	ldrh	w5, [x0, #4]
  9c:	add	w1, w11, w1
  a0:	add	w5, w7, w5
  a4:	and	w7, w1, #0xffff
  a8:	and	w5, w5, #0xffff
  ac:	cbz	w6, 188 <cipher+0x188>
  b0:	cbz	w2, 2d4 <cipher+0x2d4>
  b4:	mul	w6, w6, w2
  b8:	and	w1, w6, #0xffff
  bc:	lsr	w2, w6, #16
  c0:	sub	w1, w1, w2
  c4:	cmp	w2, w6, uxth
  c8:	cinc	w6, w1, hi  // hi = pmore
  cc:	and	w6, w6, #0xffff
  d0:	ldrh	w1, [x0, #8]
  d4:	eor	w3, w5, w4
  d8:	cbz	w1, 19c <cipher+0x19c>
  dc:	cmp	w5, w4
  e0:	b.eq	2c8 <cipher+0x2c8>  // b.none
  e4:	mul	w1, w1, w3
  e8:	and	w3, w1, #0xffff
  ec:	lsr	w2, w1, #16
  f0:	sub	w3, w3, w2
  f4:	cmp	w2, w1, uxth
  f8:	cinc	w3, w3, hi  // hi = pmore
  fc:	and	w3, w3, #0xffff
 100:	ldrh	w2, [x0, #10]
 104:	eor	w1, w6, w7
 108:	add	w1, w3, w1
 10c:	add	x0, x0, #0xc
 110:	and	w1, w1, #0xffff
 114:	cbz	w2, 1bc <cipher+0x1bc>
 118:	cbz	w1, 2bc <cipher+0x2bc>
 11c:	mul	w2, w2, w1
 120:	and	w1, w2, #0xffff
 124:	lsr	w8, w2, #16
 128:	sub	w1, w1, w8
 12c:	cmp	w8, w2, uxth
 130:	cinc	w1, w1, hi  // hi = pmore
 134:	and	w1, w1, #0xffff
 138:	add	w3, w1, w3
 13c:	eor	w11, w1, w5
 140:	and	w3, w3, #0xffff
 144:	cmp	x0, x10
 148:	eor	w7, w3, w7
 14c:	eor	w2, w3, w6
 150:	eor	w8, w1, w4
 154:	b.eq	1e4 <cipher+0x1e4>  // b.none
 158:	ldrh	w4, [x0]
 15c:	cbnz	w4, 70 <cipher+0x70>
 160:	ldrh	w6, [x0, #6]
 164:	sub	w4, w9, w8
 168:	ldrh	w1, [x0, #2]
 16c:	and	w4, w4, #0xffff
 170:	ldrh	w5, [x0, #4]
 174:	add	w1, w11, w1
 178:	add	w5, w7, w5
 17c:	and	w7, w1, #0xffff
 180:	and	w5, w5, #0xffff
 184:	cbnz	w6, b0 <cipher+0xb0>
 188:	ldrh	w1, [x0, #8]
 18c:	sub	w6, w9, w2
 190:	and	w6, w6, #0xffff
 194:	eor	w3, w5, w4
 198:	cbnz	w1, dc <cipher+0xdc>
 19c:	ldrh	w2, [x0, #10]
 1a0:	sub	w3, w9, w3
 1a4:	and	w3, w3, #0xffff
 1a8:	eor	w1, w6, w7
 1ac:	add	w1, w3, w1
 1b0:	add	x0, x0, #0xc
 1b4:	and	w1, w1, #0xffff
 1b8:	cbnz	w2, 118 <cipher+0x118>
 1bc:	sub	w1, w9, w1
 1c0:	cmp	x0, x10
 1c4:	and	w1, w1, #0xffff
 1c8:	add	w3, w1, w3
 1cc:	eor	w11, w1, w5
 1d0:	and	w3, w3, #0xffff
 1d4:	eor	w8, w1, w4
 1d8:	eor	w7, w3, w7
 1dc:	eor	w2, w3, w6
 1e0:	b.ne	158 <cipher+0x158>  // b.any
 1e4:	ldrh	w0, [x20, #96]
 1e8:	cbz	w0, 2e0 <cipher+0x2e0>
 1ec:	cmp	w1, w4
 1f0:	b.eq	340 <cipher+0x340>  // b.none
 1f4:	mul	w0, w8, w0
 1f8:	ldrh	w4, [x20, #100]
 1fc:	and	w1, w0, #0xffff
 200:	add	w4, w11, w4
 204:	lsr	w0, w0, #16
 208:	and	w4, w4, #0xffff
 20c:	subs	w8, w1, w0
 210:	ldrh	w1, [x20, #102]
 214:	ldrh	w0, [x20, #98]
 218:	cinc	w8, w8, cc  // cc = lo, ul, last
 21c:	and	w8, w8, #0xffff
 220:	add	w0, w7, w0
 224:	and	w0, w0, #0xffff
 228:	cbnz	w1, 30c <cipher+0x30c>
 22c:	mov	w1, #0x1                   	// #1
 230:	sub	w2, w1, w2
 234:	and	w2, w2, #0xffff
 238:	lsl	w1, w8, #8
 23c:	lsl	w5, w2, #8
 240:	rev16	w3, w0
 244:	orr	w8, w1, w8, lsr #8
 248:	orr	w5, w5, w2, lsr #8
 24c:	rev16	w4, w4
 250:	add	x1, sp, #0x28
 254:	mov	x0, x19
 258:	mov	x2, #0x2                   	// #2
 25c:	strh	w8, [sp, #40]
 260:	strh	w4, [sp, #42]
 264:	strh	w3, [sp, #44]
 268:	strh	w5, [sp, #46]
 26c:	bl	0 <grub_memmove>
 270:	add	x1, sp, #0x2c
 274:	mov	x2, #0x2                   	// #2
 278:	add	x0, x19, x2
 27c:	bl	0 <grub_memmove>
 280:	add	x0, sp, #0x28
 284:	mov	x2, #0x2                   	// #2
 288:	add	x1, x0, x2
 28c:	add	x0, x19, #0x4
 290:	bl	0 <grub_memmove>
 294:	add	x1, sp, #0x2e
 298:	add	x0, x19, #0x6
 29c:	mov	x2, #0x2                   	// #2
 2a0:	bl	0 <grub_memmove>
 2a4:	ldp	x19, x20, [sp, #16]
 2a8:	ldp	x29, x30, [sp], #48
 2ac:	ret
 2b0:	sub	w4, w9, w4
 2b4:	and	w4, w4, #0xffff
 2b8:	b	90 <cipher+0x90>
 2bc:	sub	w1, w9, w2
 2c0:	and	w1, w1, #0xffff
 2c4:	b	138 <cipher+0x138>
 2c8:	sub	w3, w9, w1
 2cc:	and	w3, w3, #0xffff
 2d0:	b	100 <cipher+0x100>
 2d4:	sub	w6, w9, w6
 2d8:	and	w6, w6, #0xffff
 2dc:	b	d0 <cipher+0xd0>
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	sub	w8, w0, w8
 2e8:	and	w8, w8, #0xffff
 2ec:	ldrh	w1, [x20, #102]
 2f0:	ldrh	w0, [x20, #98]
 2f4:	ldrh	w4, [x20, #100]
 2f8:	add	w0, w7, w0
 2fc:	add	w4, w11, w4
 300:	and	w0, w0, #0xffff
 304:	and	w4, w4, #0xffff
 308:	cbz	w1, 22c <cipher+0x22c>
 30c:	cmp	w3, w6
 310:	b.eq	330 <cipher+0x330>  // b.none
 314:	mul	w2, w2, w1
 318:	and	w1, w2, #0xffff
 31c:	lsr	w2, w2, #16
 320:	subs	w2, w1, w2
 324:	cinc	w2, w2, cc  // cc = lo, ul, last
 328:	and	w2, w2, #0xffff
 32c:	b	238 <cipher+0x238>
 330:	mov	w2, #0x1                   	// #1
 334:	sub	w2, w2, w1
 338:	and	w2, w2, #0xffff
 33c:	b	238 <cipher+0x238>
 340:	mov	w8, #0x1                   	// #1
 344:	sub	w8, w8, w0
 348:	and	w8, w8, #0xffff
 34c:	b	2ec <cipher+0x2ec>

0000000000000350 <idea_encrypt>:
 350:	mov	x3, x0
 354:	stp	x29, x30, [sp, #-16]!
 358:	mov	x0, x1
 35c:	mov	x29, sp
 360:	mov	x1, x2
 364:	mov	x2, x3
 368:	bl	0 <cipher>
 36c:	ldp	x29, x30, [sp], #16
 370:	mov	w0, #0x30                  	// #48
 374:	b	0 <_gcry_burn_stack>

0000000000000378 <invert_key>:
 378:	mov	x9, x0
 37c:	stp	x29, x30, [sp, #-128]!
 380:	mov	x0, x1
 384:	mov	x29, sp
 388:	ldrh	w5, [x9]
 38c:	cmp	w5, #0x1
 390:	b.ls	3f8 <invert_key+0x80>  // b.plast
 394:	and	x4, x5, #0xffff
 398:	mov	w3, #0x10001               	// #65537
 39c:	mov	w2, w5
 3a0:	mov	w5, #0x1                   	// #1
 3a4:	udiv	x1, x3, x4
 3a8:	msub	x4, x1, x4, x3
 3ac:	and	w3, w1, #0xffff
 3b0:	cmp	x4, #0x1
 3b4:	and	w1, w4, #0xffff
 3b8:	b.ne	3dc <invert_key+0x64>  // b.any
 3bc:	b	7a8 <invert_key+0x430>
 3c0:	udiv	w4, w1, w2
 3c4:	msub	w1, w4, w2, w1
 3c8:	madd	w3, w5, w4, w3
 3cc:	and	w1, w1, #0xffff
 3d0:	cmp	w1, #0x1
 3d4:	and	w3, w3, #0xffff
 3d8:	b.eq	760 <invert_key+0x3e8>  // b.none
 3dc:	udiv	w4, w2, w1
 3e0:	msub	w2, w4, w1, w2
 3e4:	madd	w4, w4, w3, w5
 3e8:	and	w2, w2, #0xffff
 3ec:	cmp	w2, #0x1
 3f0:	and	w5, w4, #0xffff
 3f4:	b.ne	3c0 <invert_key+0x48>  // b.any
 3f8:	ldrh	w13, [x9, #2]
 3fc:	add	x6, x9, #0x8
 400:	ldrh	w10, [x9, #4]
 404:	ldrh	w3, [x9, #6]
 408:	neg	w13, w13
 40c:	neg	w10, w10
 410:	and	w13, w13, #0xffff
 414:	and	w10, w10, #0xffff
 418:	cmp	w3, #0x1
 41c:	mov	w2, w3
 420:	b.ls	484 <invert_key+0x10c>  // b.plast
 424:	and	x7, x3, #0xffff
 428:	mov	w4, #0x10001               	// #65537
 42c:	mov	w3, #0x1                   	// #1
 430:	udiv	x1, x4, x7
 434:	msub	x7, x1, x7, x4
 438:	and	w4, w1, #0xffff
 43c:	cmp	x7, #0x1
 440:	and	w1, w7, #0xffff
 444:	b.ne	468 <invert_key+0xf0>  // b.any
 448:	b	7b4 <invert_key+0x43c>
 44c:	udiv	w7, w1, w2
 450:	msub	w1, w7, w2, w1
 454:	madd	w4, w3, w7, w4
 458:	and	w1, w1, #0xffff
 45c:	cmp	w1, #0x1
 460:	and	w4, w4, #0xffff
 464:	b.eq	784 <invert_key+0x40c>  // b.none
 468:	udiv	w7, w2, w1
 46c:	msub	w2, w7, w1, w2
 470:	madd	w3, w7, w4, w3
 474:	and	w2, w2, #0xffff
 478:	cmp	w2, #0x1
 47c:	and	w3, w3, #0xffff
 480:	b.ne	44c <invert_key+0xd4>  // b.any
 484:	mov	x1, #0x0                   	// #0
 488:	add	x8, sp, #0x78
 48c:	bfxil	x1, x5, #0, #16
 490:	add	x12, x9, #0x5c
 494:	mov	w11, #0x10001               	// #65537
 498:	bfi	x1, x13, #16, #16
 49c:	bfi	x1, x10, #32, #16
 4a0:	bfi	x1, x3, #48, #16
 4a4:	str	x1, [sp, #120]
 4a8:	ldrh	w2, [x6]
 4ac:	ldrh	w1, [x6, #2]
 4b0:	ldrh	w5, [x6, #4]
 4b4:	sturh	w2, [x8, #-4]
 4b8:	sturh	w1, [x8, #-2]
 4bc:	cmp	w5, #0x1
 4c0:	mov	w3, w5
 4c4:	b.ls	524 <invert_key+0x1ac>  // b.plast
 4c8:	and	x1, x5, #0xffff
 4cc:	mov	w5, #0x1                   	// #1
 4d0:	udiv	x2, x11, x1
 4d4:	msub	x1, x2, x1, x11
 4d8:	and	w4, w2, #0xffff
 4dc:	cmp	x1, #0x1
 4e0:	and	w2, w1, #0xffff
 4e4:	b.ne	508 <invert_key+0x190>  // b.any
 4e8:	b	730 <invert_key+0x3b8>
 4ec:	udiv	w1, w2, w3
 4f0:	msub	w2, w1, w3, w2
 4f4:	madd	w4, w5, w1, w4
 4f8:	and	w2, w2, #0xffff
 4fc:	cmp	w2, #0x1
 500:	and	w4, w4, #0xffff
 504:	b.eq	700 <invert_key+0x388>  // b.none
 508:	udiv	w1, w3, w2
 50c:	msub	w3, w1, w2, w3
 510:	madd	w5, w1, w4, w5
 514:	and	w3, w3, #0xffff
 518:	cmp	w3, #0x1
 51c:	and	w5, w5, #0xffff
 520:	b.ne	4ec <invert_key+0x174>  // b.any
 524:	ldrh	w1, [x6, #6]
 528:	add	x6, x6, #0xc
 52c:	ldurh	w10, [x6, #-4]
 530:	neg	w1, w1
 534:	neg	w10, w10
 538:	and	w1, w1, #0xffff
 53c:	and	w10, w10, #0xffff
 540:	ldurh	w2, [x6, #-2]
 544:	cmp	w2, #0x1
 548:	mov	w4, w2
 54c:	b.ls	5ac <invert_key+0x234>  // b.plast
 550:	and	x13, x2, #0xffff
 554:	mov	w2, #0x1                   	// #1
 558:	udiv	x7, x11, x13
 55c:	msub	x13, x7, x13, x11
 560:	and	w7, w7, #0xffff
 564:	cmp	x13, #0x1
 568:	and	w3, w13, #0xffff
 56c:	b.ne	590 <invert_key+0x218>  // b.any
 570:	b	73c <invert_key+0x3c4>
 574:	udiv	w13, w3, w4
 578:	msub	w3, w13, w4, w3
 57c:	madd	w7, w2, w13, w7
 580:	and	w3, w3, #0xffff
 584:	cmp	w3, #0x1
 588:	and	w7, w7, #0xffff
 58c:	b.eq	70c <invert_key+0x394>  // b.none
 590:	udiv	w13, w4, w3
 594:	msub	w4, w13, w3, w4
 598:	madd	w2, w13, w7, w2
 59c:	and	w4, w4, #0xffff
 5a0:	cmp	w4, #0x1
 5a4:	and	w2, w2, #0xffff
 5a8:	b.ne	574 <invert_key+0x1fc>  // b.any
 5ac:	sturh	w10, [x8, #-10]
 5b0:	cmp	x12, x6
 5b4:	sturh	w1, [x8, #-8]
 5b8:	sturh	w2, [x8, #-6]
 5bc:	strh	w5, [x8, #-12]!
 5c0:	b.ne	4a8 <invert_key+0x130>  // b.any
 5c4:	ldr	w1, [x9, #92]
 5c8:	ldrh	w5, [x9, #96]
 5cc:	str	w1, [sp, #32]
 5d0:	cmp	w5, #0x1
 5d4:	mov	w2, w5
 5d8:	b.ls	63c <invert_key+0x2c4>  // b.plast
 5dc:	and	x4, x5, #0xffff
 5e0:	mov	w3, #0x10001               	// #65537
 5e4:	mov	w5, #0x1                   	// #1
 5e8:	udiv	x1, x3, x4
 5ec:	msub	x4, x1, x4, x3
 5f0:	and	w3, w1, #0xffff
 5f4:	cmp	x4, #0x1
 5f8:	and	w1, w4, #0xffff
 5fc:	b.ne	620 <invert_key+0x2a8>  // b.any
 600:	b	790 <invert_key+0x418>
 604:	udiv	w4, w1, w2
 608:	msub	w1, w4, w2, w1
 60c:	madd	w3, w5, w4, w3
 610:	and	w1, w1, #0xffff
 614:	cmp	w1, #0x1
 618:	and	w3, w3, #0xffff
 61c:	b.eq	778 <invert_key+0x400>  // b.none
 620:	udiv	w4, w2, w1
 624:	msub	w2, w4, w1, w2
 628:	madd	w4, w4, w3, w5
 62c:	and	w2, w2, #0xffff
 630:	cmp	w2, #0x1
 634:	and	w5, w4, #0xffff
 638:	b.ne	604 <invert_key+0x28c>  // b.any
 63c:	ldrh	w8, [x9, #98]
 640:	ldrh	w7, [x9, #100]
 644:	ldrh	w3, [x9, #102]
 648:	neg	w8, w8
 64c:	neg	w7, w7
 650:	and	w8, w8, #0xffff
 654:	and	w7, w7, #0xffff
 658:	cmp	w3, #0x1
 65c:	mov	w2, w3
 660:	b.ls	6c4 <invert_key+0x34c>  // b.plast
 664:	and	x6, x3, #0xffff
 668:	mov	w4, #0x10001               	// #65537
 66c:	mov	w3, #0x1                   	// #1
 670:	udiv	x1, x4, x6
 674:	msub	x6, x1, x6, x4
 678:	and	w4, w1, #0xffff
 67c:	cmp	x6, #0x1
 680:	and	w1, w6, #0xffff
 684:	b.ne	6a8 <invert_key+0x330>  // b.any
 688:	b	79c <invert_key+0x424>
 68c:	udiv	w6, w1, w2
 690:	msub	w1, w6, w2, w1
 694:	madd	w4, w3, w6, w4
 698:	and	w1, w1, #0xffff
 69c:	cmp	w1, #0x1
 6a0:	and	w4, w4, #0xffff
 6a4:	b.eq	76c <invert_key+0x3f4>  // b.none
 6a8:	udiv	w6, w2, w1
 6ac:	msub	w2, w6, w1, w2
 6b0:	madd	w3, w6, w4, w3
 6b4:	and	w2, w2, #0xffff
 6b8:	cmp	w2, #0x1
 6bc:	and	w3, w3, #0xffff
 6c0:	b.ne	68c <invert_key+0x314>  // b.any
 6c4:	mov	x4, #0x0                   	// #0
 6c8:	add	x1, sp, #0x18
 6cc:	bfxil	x4, x5, #0, #16
 6d0:	mov	x2, #0x68                  	// #104
 6d4:	bfi	x4, x8, #16, #16
 6d8:	bfi	x4, x7, #32, #16
 6dc:	bfi	x4, x3, #48, #16
 6e0:	str	x4, [sp, #24]
 6e4:	bl	0 <grub_memmove>
 6e8:	add	x0, sp, #0x18
 6ec:	mov	x2, #0x68                  	// #104
 6f0:	mov	w1, #0x0                   	// #0
 6f4:	bl	0 <grub_memset>
 6f8:	ldp	x29, x30, [sp], #128
 6fc:	ret
 700:	sub	w2, w2, w4
 704:	and	w5, w2, #0xffff
 708:	b	524 <invert_key+0x1ac>
 70c:	sub	w2, w3, w7
 710:	sturh	w10, [x8, #-10]
 714:	and	w2, w2, #0xffff
 718:	sturh	w1, [x8, #-8]
 71c:	sturh	w2, [x8, #-6]
 720:	cmp	x12, x6
 724:	strh	w5, [x8, #-12]!
 728:	b.ne	4a8 <invert_key+0x130>  // b.any
 72c:	b	5c4 <invert_key+0x24c>
 730:	sub	w2, w1, w4
 734:	and	w5, w2, #0xffff
 738:	b	524 <invert_key+0x1ac>
 73c:	sub	w2, w13, w7
 740:	sturh	w10, [x8, #-10]
 744:	and	w2, w2, #0xffff
 748:	sturh	w1, [x8, #-8]
 74c:	sturh	w2, [x8, #-6]
 750:	cmp	x12, x6
 754:	strh	w5, [x8, #-12]!
 758:	b.ne	4a8 <invert_key+0x130>  // b.any
 75c:	b	5c4 <invert_key+0x24c>
 760:	sub	w1, w1, w3
 764:	and	w5, w1, #0xffff
 768:	b	3f8 <invert_key+0x80>
 76c:	sub	w1, w1, w4
 770:	and	w3, w1, #0xffff
 774:	b	6c4 <invert_key+0x34c>
 778:	sub	w1, w1, w3
 77c:	and	w5, w1, #0xffff
 780:	b	63c <invert_key+0x2c4>
 784:	sub	w1, w1, w4
 788:	and	w3, w1, #0xffff
 78c:	b	484 <invert_key+0x10c>
 790:	sub	w1, w4, w3
 794:	and	w5, w1, #0xffff
 798:	b	63c <invert_key+0x2c4>
 79c:	sub	w1, w6, w4
 7a0:	and	w3, w1, #0xffff
 7a4:	b	6c4 <invert_key+0x34c>
 7a8:	sub	w1, w4, w3
 7ac:	and	w5, w1, #0xffff
 7b0:	b	3f8 <invert_key+0x80>
 7b4:	sub	w1, w7, w4
 7b8:	and	w3, w1, #0xffff
 7bc:	b	484 <invert_key+0x10c>

00000000000007c0 <idea_decrypt>:
 7c0:	stp	x29, x30, [sp, #-48]!
 7c4:	mov	x29, sp
 7c8:	stp	x19, x20, [sp, #16]
 7cc:	mov	x19, x1
 7d0:	ldr	w1, [x0, #208]
 7d4:	str	x21, [sp, #32]
 7d8:	mov	x20, x2
 7dc:	add	x21, x0, #0x68
 7e0:	cbz	w1, 808 <idea_decrypt+0x48>
 7e4:	mov	x2, x21
 7e8:	mov	x1, x20
 7ec:	mov	x0, x19
 7f0:	bl	0 <cipher>
 7f4:	ldp	x19, x20, [sp, #16]
 7f8:	mov	w0, #0x30                  	// #48
 7fc:	ldr	x21, [sp, #32]
 800:	ldp	x29, x30, [sp], #48
 804:	b	0 <_gcry_burn_stack>
 808:	mov	w1, #0x1                   	// #1
 80c:	str	w1, [x0, #208]
 810:	mov	x1, x21
 814:	bl	378 <invert_key>
 818:	b	7e4 <idea_decrypt+0x24>
 81c:	nop

0000000000000820 <idea_setkey>:
 820:	stp	x29, x30, [sp, #-32]!
 824:	adrp	x3, 0 <cipher>
 828:	mov	x29, sp
 82c:	ldr	x3, [x3]
 830:	ldr	w4, [x3]
 834:	str	x19, [sp, #16]
 838:	cbnz	w4, 95c <idea_setkey+0x13c>
 83c:	mov	w4, #0x1                   	// #1
 840:	str	w4, [x3]
 844:	str	xzr, [x3, #8]
 848:	cmp	w2, #0x10
 84c:	b.ne	980 <idea_setkey+0x160>  // b.any
 850:	str	wzr, [x0, #208]
 854:	mov	x2, x0
 858:	mov	w19, #0x2c                  	// #44
 85c:	mov	w6, #0x0                   	// #0
 860:	ldrb	w3, [x1]
 864:	ldrb	w4, [x1, #1]
 868:	ubfiz	w3, w3, #8, #8
 86c:	add	w3, w3, w4
 870:	strh	w3, [x0]
 874:	ldrb	w3, [x1, #2]
 878:	ldrb	w4, [x1, #3]
 87c:	ubfiz	w3, w3, #8, #8
 880:	add	w3, w3, w4
 884:	strh	w3, [x0, #2]
 888:	ldrb	w3, [x1, #4]
 88c:	ldrb	w4, [x1, #5]
 890:	ubfiz	w3, w3, #8, #8
 894:	add	w3, w3, w4
 898:	strh	w3, [x0, #4]
 89c:	ldrb	w3, [x1, #6]
 8a0:	ldrb	w4, [x1, #7]
 8a4:	ubfiz	w3, w3, #8, #8
 8a8:	add	w3, w3, w4
 8ac:	strh	w3, [x0, #6]
 8b0:	ldrb	w3, [x1, #8]
 8b4:	ldrb	w4, [x1, #9]
 8b8:	ubfiz	w3, w3, #8, #8
 8bc:	add	w3, w3, w4
 8c0:	strh	w3, [x0, #8]
 8c4:	ldrb	w3, [x1, #10]
 8c8:	ldrb	w4, [x1, #11]
 8cc:	ubfiz	w3, w3, #8, #8
 8d0:	add	w3, w3, w4
 8d4:	strh	w3, [x0, #10]
 8d8:	ldrb	w3, [x1, #12]
 8dc:	ldrb	w4, [x1, #13]
 8e0:	ubfiz	w3, w3, #8, #8
 8e4:	add	w3, w3, w4
 8e8:	strh	w3, [x0, #12]
 8ec:	ldrb	w3, [x1, #14]
 8f0:	ldrb	w4, [x1, #15]
 8f4:	ubfiz	w1, w3, #8, #8
 8f8:	add	w1, w1, w4
 8fc:	strh	w1, [x0, #14]
 900:	add	w1, w6, #0x1
 904:	add	w5, w6, #0x2
 908:	and	w4, w1, #0x8
 90c:	and	w6, w1, #0x7
 910:	ubfiz	x3, x1, #1, #3
 914:	ubfiz	x5, x5, #1, #3
 918:	add	x7, x2, w1, sxtw #1
 91c:	subs	w19, w19, #0x1
 920:	ldrh	w3, [x2, x3]
 924:	ldrh	w1, [x2, x5]
 928:	add	x2, x2, x4, lsl #1
 92c:	lsl	w3, w3, #9
 930:	orr	w1, w3, w1, lsr #7
 934:	strh	w1, [x7, #14]
 938:	b.ne	900 <idea_setkey+0xe0>  // b.any
 93c:	add	x1, x0, #0x68
 940:	bl	378 <invert_key>
 944:	mov	w0, #0x47                  	// #71
 948:	bl	0 <_gcry_burn_stack>
 94c:	mov	w0, w19
 950:	ldr	x19, [sp, #16]
 954:	ldp	x29, x30, [sp], #32
 958:	ret
 95c:	ldr	x3, [x3, #8]
 960:	mov	w19, #0x1c                  	// #28
 964:	cbz	x3, 848 <idea_setkey+0x28>
 968:	mov	w0, #0x47                  	// #71
 96c:	bl	0 <_gcry_burn_stack>
 970:	mov	w0, w19
 974:	ldr	x19, [sp, #16]
 978:	ldp	x29, x30, [sp], #32
 97c:	ret
 980:	adrp	x3, 0 <cipher>
 984:	adrp	x1, 0 <cipher>
 988:	adrp	x0, 0 <cipher>
 98c:	mov	w2, #0xfb                  	// #251
 990:	ldr	x3, [x3]
 994:	ldr	x1, [x1]
 998:	ldr	x0, [x0]
 99c:	bl	0 <_gcry_assert_failed>
	...

00000000000009c0 <grub_mod_init>:
 9c0:	adrp	x0, 0 <cipher>
 9c4:	ldr	x0, [x0]
 9c8:	b	0 <grub_cipher_register>
 9cc:	nop
	...

00000000000009d8 <grub_mod_fini>:
 9d8:	adrp	x0, 0 <cipher>
 9dc:	ldr	x0, [x0]
 9e0:	b	0 <grub_cipher_unregister>
 9e4:	nop
	...
