In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libsupc++.a_clang_-O2:

array_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__array_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__array_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

atexit_arm.o:     file format elf64-littleaarch64


atexit_thread.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_thread_atexit:

0000000000000000 <__cxa_thread_atexit>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_thread_atexit_impl>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

bad_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9bad_alloc4whatEv:

0000000000000000 <_ZNKSt9bad_alloc4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9bad_alloc4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9bad_allocD2Ev:

0000000000000000 <_ZNSt9bad_allocD1Ev>:
   0:	adrp	x1, 0 <_ZNSt9bad_allocD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt9bad_allocD0Ev:

0000000000000000 <_ZNSt9bad_allocD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9bad_allocD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_array_length.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt16bad_array_length4whatEv:

0000000000000000 <_ZNKSt16bad_array_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt16bad_array_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD2Ev:

0000000000000000 <_ZNSt16bad_array_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16bad_array_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt16bad_array_lengthD0Ev:

0000000000000000 <_ZNSt16bad_array_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16bad_array_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_length:

0000000000000000 <__cxa_throw_bad_array_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <__cxa_throw_bad_array_length>
  14:	adrp	x2, 0 <__cxa_throw_bad_array_length>
  18:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

bad_array_new.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt20bad_array_new_length4whatEv:

0000000000000000 <_ZNKSt20bad_array_new_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt20bad_array_new_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt20bad_array_new_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt20bad_array_new_lengthD0Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt20bad_array_new_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_cast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt8bad_cast4whatEv:

0000000000000000 <_ZNKSt8bad_cast4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt8bad_cast4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt8bad_castD2Ev:

0000000000000000 <_ZNSt8bad_castD1Ev>:
   0:	adrp	x1, 0 <_ZNSt8bad_castD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt8bad_castD0Ev:

0000000000000000 <_ZNSt8bad_castD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt8bad_castD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_typeid.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt10bad_typeid4whatEv:

0000000000000000 <_ZNKSt10bad_typeid4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt10bad_typeid4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt10bad_typeidD2Ev:

0000000000000000 <_ZNSt10bad_typeidD1Ev>:
   0:	adrp	x1, 0 <_ZNSt10bad_typeidD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt10bad_typeidD0Ev:

0000000000000000 <_ZNSt10bad_typeidD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt10bad_typeidD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	ldr	x4, [x0]
   c:	str	xzr, [sp, #40]
  10:	str	xzr, [sp, #56]
  14:	add	x3, sp, #0x28
  18:	ldr	x4, [x4, #48]
  1c:	str	x19, [sp, #16]
  20:	mov	x19, x2
  24:	mov	x2, #0x1000000000          	// #68719476736
  28:	str	x2, [sp, #48]
  2c:	ldr	x2, [x19]
  30:	blr	x4
  34:	ldr	w0, [sp, #48]
  38:	and	w0, w0, #0x6
  3c:	cmp	w0, #0x6
  40:	b.ne	5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>  // b.any
  44:	ldr	x1, [sp, #40]
  48:	str	x1, [x19]
  4c:	mov	w0, #0x1                   	// #1
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	mov	w0, #0x0                   	// #0
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #64
  68:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   0:	cmp	x4, x2
   4:	mov	w0, #0x6                   	// #6
   8:	csinc	w0, w0, wzr, eq  // eq = none
   c:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x6
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x4
  14:	mov	x19, x7
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	w21, w2
  20:	ldr	x22, [x0, #8]
  24:	str	x23, [sp, #48]
  28:	mov	x23, x3
  2c:	b.eq	7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>  // b.none
  30:	ldr	x1, [x3, #8]
  34:	cmp	x1, x22
  38:	b.eq	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>  // b.none
  3c:	ldrb	w0, [x22]
  40:	cmp	w0, #0x2a
  44:	b.eq	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.none
  48:	mov	x0, x22
  4c:	bl	0 <strcmp>
  50:	cbnz	w0, 64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>
  54:	mov	w0, #0x1                   	// #1
  58:	str	x20, [x19]
  5c:	str	w21, [x19, #8]
  60:	str	w0, [x19, #16]
  64:	mov	w0, #0x0                   	// #0
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldr	x23, [sp, #48]
  74:	ldp	x29, x30, [sp], #64
  78:	ret
  7c:	ldr	x1, [x5, #8]
  80:	cmp	x1, x22
  84:	b.eq	c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>  // b.none
  88:	ldrb	w0, [x22]
  8c:	cmp	w0, #0x2a
  90:	b.eq	b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>  // b.none
  94:	mov	x0, x22
  98:	bl	0 <strcmp>
  9c:	cbz	w0, c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>
  a0:	ldr	x1, [x23, #8]
  a4:	cmp	x22, x1
  a8:	b.ne	48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>  // b.any
  ac:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>
  b0:	ldr	x0, [x3, #8]
  b4:	cmp	x0, x22
  b8:	b.ne	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.any
  bc:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>
  c0:	str	w21, [x19, #12]
  c4:	mov	w0, #0x0                   	// #0
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldr	x23, [sp, #48]
  d4:	ldp	x29, x30, [sp], #64
  d8:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	ldr	x0, [x0, #8]
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	ldr	x1, [x1, #8]
  18:	str	x21, [sp, #32]
  1c:	mov	x19, x3
  20:	cmp	x0, x1
  24:	b.eq	40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x40>  // b.none
  28:	ldrb	w2, [x0]
  2c:	mov	w21, #0x0                   	// #0
  30:	cmp	w2, #0x2a
  34:	b.eq	58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x58>  // b.none
  38:	bl	0 <strcmp>
  3c:	cbnz	w0, 58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x58>
  40:	mov	x0, #0x10                  	// #16
  44:	mov	w1, #0x6                   	// #6
  48:	mov	w21, #0x1                   	// #1
  4c:	str	x20, [x19]
  50:	str	w1, [x19, #8]
  54:	str	x0, [x19, #16]
  58:	mov	w0, w21
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldr	x21, [sp, #32]
  64:	ldp	x29, x30, [sp], #48
  68:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #8]
  18:	ldr	x1, [x1, #8]
  1c:	cmp	x0, x1
  20:	b.eq	88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x88>  // b.none
  24:	stp	x21, x22, [sp, #32]
  28:	mov	x22, x2
  2c:	mov	w21, w3
  30:	ldrb	w2, [x0]
  34:	cmp	w2, #0x2a
  38:	b.eq	58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>  // b.none
  3c:	bl	0 <strcmp>
  40:	cbnz	w0, 58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
  44:	mov	w0, #0x1                   	// #1
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	cmp	w21, #0x3
  5c:	b.hi	98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x98>  // b.pmore
  60:	ldr	x3, [x19]
  64:	mov	x2, x22
  68:	mov	x1, x20
  6c:	mov	x0, x19
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	ldr	x3, [x3, #40]
  80:	mov	x16, x3
  84:	br	x16
  88:	mov	w0, #0x1                   	// #1
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x29, x30, [sp], #48
  94:	ret
  98:	mov	w0, #0x0                   	// #0
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

del_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPv:

0000000000000000 <_ZdlPv>:
   0:	b	0 <free>

del_ops.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvm:

0000000000000000 <_ZdlPvm>:
   0:	b	0 <_ZdlPv>

del_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvRKSt9nothrow_t:

0000000000000000 <_ZdlPvRKSt9nothrow_t>:
   0:	b	0 <_ZdlPv>

del_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPv:

0000000000000000 <_ZdaPv>:
   0:	b	0 <_ZdlPv>

del_opvs.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvm:

0000000000000000 <_ZdaPvm>:
   0:	b	0 <_ZdaPv>

del_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvRKSt9nothrow_t:

0000000000000000 <_ZdaPvRKSt9nothrow_t>:
   0:	b	0 <_ZdaPv>

dyncast.o:     file format elf64-littleaarch64


Disassembly of section .text.__dynamic_cast:

0000000000000000 <__dynamic_cast>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x7, #0x1000000000          	// #68719476736
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x3
  18:	ldr	x0, [x0]
  1c:	ldp	x4, x3, [x0, #-16]
  20:	str	x7, [sp, #72]
  24:	stp	xzr, xzr, [sp, #56]
  28:	ldr	x0, [x19, x4]
  2c:	add	x4, x19, x4
  30:	ldur	x0, [x0, #-8]
  34:	cmp	x0, x3
  38:	b.ne	c4 <__dynamic_cast+0xc4>  // b.any
  3c:	mov	x5, x1
  40:	stp	x21, x22, [sp, #32]
  44:	mov	x22, x1
  48:	ldr	x1, [x0]
  4c:	mov	x6, x19
  50:	mov	x3, x2
  54:	mov	x21, x2
  58:	add	x7, sp, #0x38
  5c:	mov	w2, #0x6                   	// #6
  60:	ldr	x8, [x1, #56]
  64:	mov	x1, x20
  68:	blr	x8
  6c:	ldr	x6, [sp, #56]
  70:	mov	x0, x6
  74:	cbz	x6, c0 <__dynamic_cast+0xc0>
  78:	ldr	w1, [sp, #72]
  7c:	and	w2, w1, #0x6
  80:	cmp	w2, #0x6
  84:	b.eq	d4 <__dynamic_cast+0xd4>  // b.none
  88:	ldp	w3, w4, [sp, #64]
  8c:	and	w3, w4, w3
  90:	and	w3, w3, #0x6
  94:	cmp	w3, #0x6
  98:	b.eq	d4 <__dynamic_cast+0xd4>  // b.none
  9c:	mov	w0, #0x5                   	// #5
  a0:	and	w4, w4, w0
  a4:	cmp	w4, #0x4
  a8:	b.eq	c0 <__dynamic_cast+0xc0>  // b.none
  ac:	cbnz	w1, c0 <__dynamic_cast+0xc0>
  b0:	tbnz	x20, #63, e4 <__dynamic_cast+0xe4>
  b4:	add	x20, x6, x20
  b8:	cmp	x19, x20
  bc:	b.eq	11c <__dynamic_cast+0x11c>  // b.none
  c0:	ldp	x21, x22, [sp, #32]
  c4:	mov	x0, #0x0                   	// #0
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x29, x30, [sp], #80
  d0:	ret
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x29, x30, [sp], #80
  e0:	ret
  e4:	cmn	x20, #0x2
  e8:	b.eq	c0 <__dynamic_cast+0xc0>  // b.none
  ec:	ldr	x5, [x21]
  f0:	mov	x4, x19
  f4:	mov	x3, x22
  f8:	mov	x2, x6
  fc:	mov	x1, x20
 100:	mov	x0, x21
 104:	ldr	x5, [x5, #64]
 108:	blr	x5
 10c:	and	w0, w0, #0x6
 110:	cmp	w0, #0x6
 114:	b.ne	c0 <__dynamic_cast+0xc0>  // b.any
 118:	ldr	x6, [sp, #56]
 11c:	mov	x0, x6
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x21, x22, [sp, #32]
 128:	ldp	x29, x30, [sp], #80
 12c:	ret

eh_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK9__gnu_cxx24__concurrence_lock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x0, x19
  28:	mov	x1, #0x8                   	// #8
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x0, x19
  28:	mov	x1, #0x8                   	// #8
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	b	0 <_ZdlPvm>

Disassembly of section .text.unlikely._ZN9__gnu_cxx30__throw_concurrence_lock_errorEv:

0000000000000000 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  10:	adrp	x3, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  14:	adrp	x2, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  18:	adrp	x1, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN12_GLOBAL__N_14pool4freeEPv.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <__pthread_key_create>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	str	x21, [sp, #32]
  1c:	adrp	x21, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  20:	cbz	x0, 30 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
  24:	add	x0, x21, #0x0
  28:	bl	0 <pthread_mutex_lock>
  2c:	cbnz	w0, 128 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x128>
  30:	add	x0, x21, #0x0
  34:	sub	x5, x19, #0x10
  38:	ldr	x1, [x0, #48]
  3c:	cbz	x1, b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb8>
  40:	ldur	x6, [x19, #-16]
  44:	add	x4, x5, x6
  48:	cmp	x1, x4
  4c:	b.hi	b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb8>  // b.pmore
  50:	ldr	x2, [x1, #8]
  54:	b.eq	10c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x10c>  // b.none
  58:	add	x0, x0, #0x30
  5c:	cbnz	x2, 78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x78>
  60:	b	94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
  64:	ldr	x3, [x2, #8]
  68:	add	x0, x1, #0x8
  6c:	cbz	x3, f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xf4>
  70:	mov	x1, x2
  74:	mov	x2, x3
  78:	cmp	x4, x2
  7c:	b.cc	64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>  // b.lo, b.ul, b.last
  80:	b.ne	120 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x120>  // b.any
  84:	ldp	x2, x3, [x4]
  88:	str	x3, [x1, #8]
  8c:	ldr	x1, [x0]
  90:	add	x6, x6, x2
  94:	ldr	x2, [x1]
  98:	add	x3, x1, x2
  9c:	cmp	x5, x3
  a0:	b.eq	e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xe8>  // b.none
  a4:	ldr	x1, [x1, #8]
  a8:	stp	x6, x1, [x19, #-16]
  ac:	ldr	x0, [x0]
  b0:	str	x5, [x0, #8]
  b4:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
  b8:	add	x0, x21, #0x0
  bc:	stur	x1, [x19, #-8]
  c0:	str	x5, [x0, #48]
  c4:	ldr	x20, [x20]
  c8:	cbz	x20, d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xd8>
  cc:	add	x0, x21, #0x0
  d0:	bl	0 <pthread_mutex_unlock>
  d4:	cbnz	w0, 12c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x12c>
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldr	x21, [sp, #32]
  e0:	ldp	x29, x30, [sp], #48
  e4:	ret
  e8:	add	x6, x2, x6
  ec:	str	x6, [x1]
  f0:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
  f4:	ldr	x1, [x1, #8]
  f8:	ldr	x2, [x1]
  fc:	add	x3, x1, x2
 100:	cmp	x5, x3
 104:	b.ne	a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa4>  // b.any
 108:	b	e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xe8>
 10c:	ldr	x1, [x1]
 110:	add	x6, x1, x6
 114:	stp	x6, x2, [x19, #-16]
 118:	str	x5, [x0, #48]
 11c:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
 120:	ldr	x1, [x0]
 124:	b	94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
 128:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 12c:	mov	x0, #0x8                   	// #8
 130:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 134:	adrp	x3, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 138:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 13c:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 140:	ldr	x3, [x3]
 144:	ldr	x2, [x2]
 148:	add	x3, x3, #0x10
 14c:	ldr	x1, [x1]
 150:	str	x3, [x0]
 154:	bl	0 <__cxa_throw>
 158:	cmn	x1, #0x1
 15c:	b.ne	164 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x164>  // b.any
 160:	bl	0 <__cxa_call_unexpected>
 164:	bl	0 <_Unwind_Resume>

Disassembly of section .text._ZN12_GLOBAL__N_14pool8allocateEm.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <__pthread_key_create>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	str	x21, [sp, #32]
  1c:	adrp	x21, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  20:	cbz	x0, 30 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x30>
  24:	add	x0, x21, #0x0
  28:	bl	0 <pthread_mutex_lock>
  2c:	cbnz	w0, cc <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xcc>
  30:	add	x3, x21, #0x0
  34:	adds	x0, x19, #0x10
  38:	mov	x19, #0x10                  	// #16
  3c:	csel	x0, x0, x19, cc  // cc = lo, ul, last
  40:	add	x0, x0, #0xf
  44:	ldr	x19, [x3, #48]
  48:	and	x0, x0, #0xfffffffffffffff0
  4c:	cbz	x19, 98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  50:	add	x3, x3, #0x30
  54:	b	60 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x60>
  58:	add	x3, x2, #0x8
  5c:	cbz	x19, 98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  60:	mov	x2, x19
  64:	ldp	x1, x19, [x19]
  68:	cmp	x0, x1
  6c:	b.hi	58 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x58>  // b.pmore
  70:	sub	x1, x1, x0
  74:	cmp	x1, #0xf
  78:	b.ls	c0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xc0>  // b.plast
  7c:	add	x4, x2, x0
  80:	str	x19, [x4, #8]
  84:	str	x1, [x2, x0]
  88:	ldr	x2, [x3]
  8c:	add	x19, x2, #0x10
  90:	str	x0, [x2]
  94:	str	x4, [x3]
  98:	ldr	x20, [x20]
  9c:	cbz	x20, ac <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xac>
  a0:	add	x0, x21, #0x0
  a4:	bl	0 <pthread_mutex_unlock>
  a8:	cbnz	w0, d0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xd0>
  ac:	mov	x0, x19
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldr	x21, [sp, #32]
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret
  c0:	str	x19, [x3]
  c4:	add	x19, x2, #0x10
  c8:	b	98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  cc:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  d0:	mov	x0, #0x8                   	// #8
  d4:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  d8:	adrp	x3, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  dc:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  e0:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  e4:	ldr	x3, [x3]
  e8:	ldr	x2, [x2]
  ec:	add	x3, x3, #0x10
  f0:	ldr	x1, [x1]
  f4:	str	x3, [x0]
  f8:	bl	0 <__cxa_throw>
  fc:	cmn	x1, #0x1
 100:	b.ne	108 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x108>  // b.any
 104:	bl	0 <__cxa_call_unexpected>
 108:	bl	0 <_Unwind_Resume>

Disassembly of section .text._ZN9__gnu_cxx9__freeresEv:

0000000000000000 <_ZN9__gnu_cxx9__freeresEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <_ZN9__gnu_cxx9__freeresEv>
  10:	add	x19, x19, #0x0
  14:	ldr	x0, [x19, #56]
  18:	cbz	x0, 24 <_ZN9__gnu_cxx9__freeresEv+0x24>
  1c:	bl	0 <free>
  20:	str	xzr, [x19, #56]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text.__cxa_allocate_exception:

0000000000000000 <__cxa_allocate_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	add	x19, x0, #0x80
  10:	mov	x0, x19
  14:	bl	0 <malloc>
  18:	mov	x1, x0
  1c:	cbz	x0, 50 <__cxa_allocate_exception+0x50>
  20:	stp	xzr, xzr, [x1]
  24:	add	x0, x1, #0x80
  28:	stp	xzr, xzr, [x1, #16]
  2c:	stp	xzr, xzr, [x1, #32]
  30:	stp	xzr, xzr, [x1, #48]
  34:	stp	xzr, xzr, [x1, #64]
  38:	stp	xzr, xzr, [x1, #80]
  3c:	stp	xzr, xzr, [x1, #96]
  40:	stp	xzr, xzr, [x1, #112]
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	mov	x0, x19
  54:	bl	0 <__cxa_allocate_exception>
  58:	mov	x1, x0
  5c:	cbnz	x0, 20 <__cxa_allocate_exception+0x20>
  60:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_exception:

0000000000000000 <__cxa_free_exception>:
   0:	adrp	x1, 0 <__cxa_free_exception>
   4:	add	x1, x1, #0x0
   8:	sub	x0, x0, #0x80
   c:	ldr	x2, [x1, #56]
  10:	cmp	x0, x2
  14:	b.ls	3c <__cxa_free_exception+0x3c>  // b.plast
  18:	ldr	x1, [x1, #64]
  1c:	add	x2, x2, x1
  20:	cmp	x0, x2
  24:	b.cs	3c <__cxa_free_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	b	0 <free>

Disassembly of section .text.__cxa_allocate_dependent_exception:

0000000000000000 <__cxa_allocate_dependent_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x70                  	// #112
   8:	mov	x29, sp
   c:	bl	0 <malloc>
  10:	cbz	x0, 38 <__cxa_allocate_dependent_exception+0x38>
  14:	stp	xzr, xzr, [x0]
  18:	stp	xzr, xzr, [x0, #16]
  1c:	stp	xzr, xzr, [x0, #32]
  20:	stp	xzr, xzr, [x0, #48]
  24:	stp	xzr, xzr, [x0, #64]
  28:	stp	xzr, xzr, [x0, #80]
  2c:	stp	xzr, xzr, [x0, #96]
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	x0, #0x70                  	// #112
  3c:	bl	0 <__cxa_allocate_dependent_exception>
  40:	cbnz	x0, 14 <__cxa_allocate_dependent_exception+0x14>
  44:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_dependent_exception:

0000000000000000 <__cxa_free_dependent_exception>:
   0:	adrp	x2, 0 <__cxa_free_dependent_exception>
   4:	add	x2, x2, #0x0
   8:	mov	x1, x0
   c:	ldr	x3, [x2, #56]
  10:	cmp	x0, x3
  14:	b.ls	3c <__cxa_free_dependent_exception+0x3c>  // b.plast
  18:	ldr	x2, [x2, #64]
  1c:	add	x3, x3, x2
  20:	cmp	x0, x3
  24:	b.cs	3c <__cxa_free_dependent_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_dependent_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	mov	x0, x1
  40:	b	0 <free>

Disassembly of section .text.startup._GLOBAL__sub_I_eh_alloc.cc:

0000000000000000 <_GLOBAL__sub_I_eh_alloc.cc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <_GLOBAL__sub_I_eh_alloc.cc>
  10:	add	x19, x19, #0x0
  14:	mov	x20, #0x1c00                	// #7168
  18:	movk	x20, #0x1, lsl #16
  1c:	mov	x0, x20
  20:	stp	xzr, xzr, [x19]
  24:	stp	xzr, xzr, [x19, #16]
  28:	stp	xzr, xzr, [x19, #32]
  2c:	str	x20, [x19, #64]
  30:	bl	0 <malloc>
  34:	str	x0, [x19, #56]
  38:	cbz	x0, 50 <_GLOBAL__sub_I_eh_alloc.cc+0x50>
  3c:	stp	x20, xzr, [x0]
  40:	str	x0, [x19, #48]
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	str	xzr, [x19, #48]
  54:	str	xzr, [x19, #64]
  58:	b	44 <_GLOBAL__sub_I_eh_alloc.cc+0x44>

eh_arm.o:     file format elf64-littleaarch64


eh_aux_runtime.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely.__cxa_bad_cast:

0000000000000000 <__cxa_bad_cast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt8bad_cast>
  14:	adrp	x2, 0 <_ZNSt8bad_castD1Ev>
  18:	adrp	x1, 0 <_ZTISt8bad_cast>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_bad_typeid:

0000000000000000 <__cxa_bad_typeid>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt10bad_typeid>
  14:	adrp	x2, 0 <_ZNSt10bad_typeidD1Ev>
  18:	adrp	x1, 0 <_ZTISt10bad_typeid>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_new_length:

0000000000000000 <__cxa_throw_bad_array_new_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt20bad_array_new_length>
  14:	adrp	x2, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  18:	adrp	x1, 0 <_ZTISt20bad_array_new_length>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

eh_call.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_call_terminate:

0000000000000000 <__cxa_call_terminate>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cbz	x0, 38 <__cxa_call_terminate+0x38>
  10:	mov	x19, x0
  14:	bl	0 <__cxa_begin_catch>
  18:	mov	x1, #0xd500                	// #54528
  1c:	movk	x1, #0xbcd4, lsl #16
  20:	ldr	x0, [x19]
  24:	movk	x1, #0xaabc, lsl #32
  28:	movk	x1, #0xb8b1, lsl #48
  2c:	add	x0, x0, x1
  30:	cmp	x0, #0x1
  34:	b.ls	3c <__cxa_call_terminate+0x3c>  // b.plast
  38:	bl	0 <_ZSt9terminatev>
  3c:	ldur	x0, [x19, #-56]
  40:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_catch.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_exception_ptr:

0000000000000000 <__cxa_get_exception_ptr>:
   0:	ldur	x0, [x0, #-8]
   4:	ret

Disassembly of section .text.__cxa_begin_catch:

0000000000000000 <__cxa_begin_catch>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals>
  14:	mov	x1, x0
  18:	mov	x2, x19
  1c:	mov	x4, #0xd500                	// #54528
  20:	movk	x4, #0xbcd4, lsl #16
  24:	movk	x4, #0xaabc, lsl #32
  28:	ldr	x3, [x2], #-80
  2c:	movk	x4, #0xb8b1, lsl #48
  30:	ldr	x0, [x0]
  34:	add	x3, x3, x4
  38:	cmp	x3, #0x1
  3c:	b.ls	54 <__cxa_begin_catch+0x54>  // b.plast
  40:	cbnz	x0, 98 <__cxa_begin_catch+0x98>
  44:	str	x2, [x1]
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	ldur	w3, [x19, #-40]
  58:	mov	w5, #0x1                   	// #1
  5c:	ldr	w4, [x1, #8]
  60:	cmp	w3, #0x0
  64:	sub	w5, w5, w3
  68:	csinc	w3, w5, w3, lt  // lt = tstop
  6c:	stur	w3, [x19, #-40]
  70:	sub	w3, w4, #0x1
  74:	str	w3, [x1, #8]
  78:	cmp	x0, x2
  7c:	b.eq	88 <__cxa_begin_catch+0x88>  // b.none
  80:	stur	x0, [x19, #-48]
  84:	str	x2, [x1]
  88:	ldur	x0, [x19, #-8]
  8c:	ldr	x19, [sp, #16]
  90:	ldp	x29, x30, [sp], #32
  94:	ret
  98:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_end_catch:

0000000000000000 <__cxa_end_catch>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	ldr	x1, [x0]
  10:	cbz	x1, 50 <__cxa_end_catch+0x50>
  14:	mov	x3, #0xd500                	// #54528
  18:	ldr	x2, [x1, #80]
  1c:	movk	x3, #0xbcd4, lsl #16
  20:	movk	x3, #0xaabc, lsl #32
  24:	movk	x3, #0xb8b1, lsl #48
  28:	add	x2, x2, x3
  2c:	cmp	x2, #0x1
  30:	b.hi	70 <__cxa_end_catch+0x70>  // b.pmore
  34:	ldr	w2, [x1, #40]
  38:	tbnz	w2, #31, 58 <__cxa_end_catch+0x58>
  3c:	subs	w2, w2, #0x1
  40:	b.eq	80 <__cxa_end_catch+0x80>  // b.none
  44:	cmn	w2, #0x1
  48:	b.eq	94 <__cxa_end_catch+0x94>  // b.none
  4c:	str	w2, [x1, #40]
  50:	ldp	x29, x30, [sp], #16
  54:	ret
  58:	adds	w2, w2, #0x1
  5c:	b.ne	4c <__cxa_end_catch+0x4c>  // b.any
  60:	ldr	x3, [x1, #32]
  64:	str	x3, [x0]
  68:	str	w2, [x1, #40]
  6c:	b	50 <__cxa_end_catch+0x50>
  70:	str	xzr, [x0]
  74:	add	x0, x1, #0x50
  78:	ldp	x29, x30, [sp], #16
  7c:	b	0 <_Unwind_DeleteException>
  80:	ldr	x2, [x1, #32]
  84:	str	x2, [x0]
  88:	add	x0, x1, #0x50
  8c:	ldp	x29, x30, [sp], #16
  90:	b	0 <_Unwind_DeleteException>
  94:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZSt18uncaught_exceptionv:

0000000000000000 <_ZSt18uncaught_exceptionv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	cmp	w0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	ret

Disassembly of section .text._ZSt19uncaught_exceptionsv:

0000000000000000 <_ZSt19uncaught_exceptionsv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	ret

eh_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionD2Ev:

0000000000000000 <_ZNSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZNSt13bad_exceptionD2Ev:

0000000000000000 <_ZNSt13bad_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt13bad_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt13bad_exceptionD1Ev>

Disassembly of section .text._ZNKSt9exception4whatEv:

0000000000000000 <_ZNKSt9exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNKSt13bad_exception4whatEv:

0000000000000000 <_ZNKSt13bad_exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt13bad_exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9exceptionD0Ev:

0000000000000000 <_ZNSt9exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNSt13bad_exceptionD0Ev:

0000000000000000 <_ZNSt13bad_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt13bad_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD2Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD0Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv115__forced_unwindD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD0Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZGTtNKSt9exceptionD1Ev:

0000000000000000 <_ZGTtNKSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt9exception4whatEv:

0000000000000000 <_ZGTtNKSt9exception4whatEv>:
   0:	b	0 <_ZGTtNKSt9exception4whatEv>

Disassembly of section .text._ZGTtNKSt13bad_exceptionD1Ev:

0000000000000000 <_ZGTtNKSt13bad_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt13bad_exception4whatEv:

0000000000000000 <_ZGTtNKSt13bad_exception4whatEv>:
   0:	b	0 <_ZGTtNKSt13bad_exception4whatEv>

eh_globals.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_globals_fast:

0000000000000000 <__cxa_get_globals_fast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mrs	x1, tpidr_el0
   8:	adrp	x0, 0 <__cxa_get_globals_fast>
   c:	ldr	x2, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x2
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text.__cxa_get_globals:

0000000000000000 <__cxa_get_globals>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mrs	x1, tpidr_el0
   8:	adrp	x0, 0 <__cxa_get_globals>
   c:	ldr	x2, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x2
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

eh_personality.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL16get_adjusted_ptrPKSt9type_infoS1_PPv:

0000000000000000 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x0
  14:	mov	x0, x1
  18:	ldr	x1, [x1]
  1c:	ldr	x1, [x1, #16]
  20:	str	x21, [sp, #32]
  24:	mov	x21, x2
  28:	ldr	x2, [x2]
  2c:	str	x2, [sp, #56]
  30:	blr	x1
  34:	tst	w0, #0xff
  38:	b.eq	48 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x48>  // b.none
  3c:	ldr	x0, [sp, #56]
  40:	ldr	x0, [x0]
  44:	str	x0, [sp, #56]
  48:	ldr	x4, [x20]
  4c:	mov	x1, x19
  50:	mov	x0, x20
  54:	add	x2, sp, #0x38
  58:	mov	w3, #0x1                   	// #1
  5c:	ldr	x4, [x4, #32]
  60:	blr	x4
  64:	tst	w0, #0xff
  68:	b.eq	74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>  // b.none
  6c:	ldr	x1, [sp, #56]
  70:	str	x1, [x21]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldr	x21, [sp, #32]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret

Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	and	w5, w0, #0xff
   4:	cmp	w5, #0x50
   8:	b.eq	120 <_ZL28read_encoded_value_with_basehmPKhPm+0x120>  // b.none
   c:	and	w4, w5, #0xf
  10:	cmp	w4, #0x4
  14:	b.eq	30 <_ZL28read_encoded_value_with_basehmPKhPm+0x30>  // b.none
  18:	b.ls	44 <_ZL28read_encoded_value_with_basehmPKhPm+0x44>  // b.plast
  1c:	cmp	w4, #0xb
  20:	b.eq	144 <_ZL28read_encoded_value_with_basehmPKhPm+0x144>  // b.none
  24:	b.ls	a0 <_ZL28read_encoded_value_with_basehmPKhPm+0xa0>  // b.plast
  28:	cmp	w4, #0xc
  2c:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  30:	mov	x0, x2
  34:	ldr	x4, [x0], #8
  38:	cbnz	x4, 100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  3c:	str	x4, [x3]
  40:	ret
  44:	cmp	w4, #0x2
  48:	b.eq	134 <_ZL28read_encoded_value_with_basehmPKhPm+0x134>  // b.none
  4c:	b.ls	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>  // b.plast
  50:	cmp	w4, #0x3
  54:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  58:	mov	x0, x2
  5c:	ldr	w4, [x0], #4
  60:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  64:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  68:	cbz	w4, 30 <_ZL28read_encoded_value_with_basehmPKhPm+0x30>
  6c:	cmp	w4, #0x1
  70:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  74:	mov	x0, x2
  78:	mov	x4, #0x0                   	// #0
  7c:	mov	w7, #0x0                   	// #0
  80:	ldrb	w8, [x0], #1
  84:	and	x6, x8, #0x7f
  88:	lsl	x6, x6, x7
  8c:	add	w7, w7, #0x7
  90:	orr	x4, x4, x6
  94:	tbnz	w8, #7, 80 <_ZL28read_encoded_value_with_basehmPKhPm+0x80>
  98:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  9c:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  a0:	cmp	w4, #0x9
  a4:	b.eq	c0 <_ZL28read_encoded_value_with_basehmPKhPm+0xc0>  // b.none
  a8:	cmp	w4, #0xa
  ac:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  b0:	mov	x0, x2
  b4:	ldrsh	x4, [x0], #2
  b8:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  bc:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  c0:	mov	x0, x2
  c4:	mov	x4, #0x0                   	// #0
  c8:	mov	w7, #0x0                   	// #0
  cc:	ldrb	w8, [x0], #1
  d0:	and	x6, x8, #0x7f
  d4:	lsl	x6, x6, x7
  d8:	add	w7, w7, #0x7
  dc:	orr	x4, x4, x6
  e0:	tbnz	w8, #7, cc <_ZL28read_encoded_value_with_basehmPKhPm+0xcc>
  e4:	cmp	w7, #0x3f
  e8:	b.hi	38 <_ZL28read_encoded_value_with_basehmPKhPm+0x38>  // b.pmore
  ec:	tbz	w8, #6, 38 <_ZL28read_encoded_value_with_basehmPKhPm+0x38>
  f0:	mov	x6, #0xffffffffffffffff    	// #-1
  f4:	lsl	x7, x6, x7
  f8:	orr	x4, x4, x7
  fc:	nop
 100:	and	w6, w5, #0x70
 104:	cmp	w6, #0x10
 108:	csel	x1, x2, x1, eq  // eq = none
 10c:	add	x4, x4, x1
 110:	tbz	w5, #7, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 114:	ldr	x4, [x4]
 118:	str	x4, [x3]
 11c:	ret
 120:	add	x0, x2, #0x7
 124:	and	x0, x0, #0xfffffffffffffff8
 128:	ldr	x4, [x0], #8
 12c:	str	x4, [x3]
 130:	ret
 134:	mov	x0, x2
 138:	ldrh	w4, [x0], #2
 13c:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 140:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
 144:	mov	x0, x2
 148:	ldrsw	x4, [x0], #4
 14c:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 150:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
 154:	stp	x29, x30, [sp, #-16]!
 158:	mov	x29, sp
 15c:	bl	0 <abort>

Disassembly of section .text._ZL15get_ttype_entryP16lsda_header_infom:

0000000000000000 <_ZL15get_ttype_entryP16lsda_header_infom>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x3, x0
   8:	mov	x29, sp
   c:	ldrb	w0, [x0, #40]
  10:	cmp	w0, #0xff
  14:	b.eq	a0 <_ZL15get_ttype_entryP16lsda_header_infom+0xa0>  // b.none
  18:	and	w4, w0, #0x7
  1c:	cmp	w4, #0x2
  20:	b.eq	80 <_ZL15get_ttype_entryP16lsda_header_infom+0x80>  // b.none
  24:	b.ls	50 <_ZL15get_ttype_entryP16lsda_header_infom+0x50>  // b.plast
  28:	cmp	w4, #0x3
  2c:	neg	x2, x1, lsl #2
  30:	b.ne	74 <_ZL15get_ttype_entryP16lsda_header_infom+0x74>  // b.any
  34:	ldp	x1, x4, [x3, #16]
  38:	add	x3, sp, #0x18
  3c:	add	x2, x4, x2
  40:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  44:	ldr	x0, [sp, #24]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	cbnz	w4, 7c <_ZL15get_ttype_entryP16lsda_header_infom+0x7c>
  54:	neg	x2, x1, lsl #3
  58:	ldp	x1, x4, [x3, #16]
  5c:	add	x3, sp, #0x18
  60:	add	x2, x4, x2
  64:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  68:	ldr	x0, [sp, #24]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret
  74:	cmp	w4, #0x4
  78:	b.eq	54 <_ZL15get_ttype_entryP16lsda_header_infom+0x54>  // b.none
  7c:	bl	0 <abort>
  80:	neg	x2, x1, lsl #1
  84:	ldp	x1, x4, [x3, #16]
  88:	add	x3, sp, #0x18
  8c:	add	x2, x4, x2
  90:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  94:	ldr	x0, [sp, #24]
  98:	ldp	x29, x30, [sp], #32
  9c:	ret
  a0:	ldp	x1, x4, [x3, #16]
  a4:	mov	x2, #0x0                   	// #0
  a8:	add	x3, sp, #0x18
  ac:	add	x2, x4, x2
  b0:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  b4:	ldr	x0, [sp, #24]
  b8:	ldp	x29, x30, [sp], #32
  bc:	ret

Disassembly of section .text._ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl:

0000000000000000 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x0
  10:	mvn	x0, x3
  14:	stp	x19, x20, [sp, #16]
  18:	add	x21, sp, #0x38
  1c:	mov	x20, x1
  20:	ldr	x19, [x22, #24]
  24:	str	x2, [sp, #56]
  28:	add	x19, x19, x0
  2c:	nop
  30:	mov	x1, #0x0                   	// #0
  34:	mov	w3, #0x0                   	// #0
  38:	ldrb	w4, [x19], #1
  3c:	and	x2, x4, #0x7f
  40:	lsl	x2, x2, x3
  44:	add	w3, w3, #0x7
  48:	orr	x1, x1, x2
  4c:	tbnz	w4, #7, 38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x38>
  50:	cbz	x1, 80 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x80>
  54:	mov	x0, x22
  58:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  5c:	mov	x2, x21
  60:	mov	x1, x20
  64:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  68:	ands	w0, w0, #0xff
  6c:	b.eq	30 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x30>  // b.none
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x29, x30, [sp], #64
  7c:	ret
  80:	mov	w0, #0x0                   	// #0
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x21, x22, [sp, #32]
  8c:	ldp	x29, x30, [sp], #64
  90:	ret

Disassembly of section .text._ZL21base_of_encoded_valuehP15_Unwind_Context:

0000000000000000 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   0:	and	w3, w0, #0xff
   4:	cmp	w3, #0xff
   8:	b.eq	58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>  // b.none
   c:	and	w2, w3, #0x70
  10:	mov	x0, x1
  14:	cmp	w2, #0x30
  18:	b.eq	60 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x60>  // b.none
  1c:	b.hi	2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>  // b.pmore
  20:	cmp	w2, #0x20
  24:	b.ne	38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>  // b.any
  28:	b	0 <_Unwind_GetTextRelBase>
  2c:	cmp	w2, #0x40
  30:	b.ne	50 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>  // b.any
  34:	b	0 <_Unwind_GetRegionStart>
  38:	b.hi	44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x44>  // b.pmore
  3c:	tst	w3, #0x60
  40:	b.eq	58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>  // b.none
  44:	stp	x29, x30, [sp, #-16]!
  48:	mov	x29, sp
  4c:	bl	0 <abort>
  50:	cmp	w2, #0x50
  54:	b.ne	44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x44>  // b.any
  58:	mov	x0, #0x0                   	// #0
  5c:	ret
  60:	b	0 <_Unwind_GetDataRelBase>

Disassembly of section .text._ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:

0000000000000000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x1, #0x0                   	// #0
  1c:	mov	x21, x0
  20:	cbz	x0, 2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
  24:	bl	0 <_Unwind_GetRegionStart>
  28:	mov	x1, x0
  2c:	str	x1, [x20]
  30:	ldrb	w22, [x19], #1
  34:	cmp	w22, #0xff
  38:	b.ne	c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xc0>  // b.any
  3c:	mov	x0, x19
  40:	str	x1, [x20, #8]
  44:	ldrb	w1, [x0], #1
  48:	strb	w1, [x20, #40]
  4c:	cmp	w1, #0xff
  50:	b.eq	f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>  // b.none
  54:	mov	x5, #0x0                   	// #0
  58:	mov	w3, #0x0                   	// #0
  5c:	nop
  60:	ldrb	w4, [x0], #1
  64:	and	x1, x4, #0x7f
  68:	lsl	x1, x1, x3
  6c:	add	w3, w3, #0x7
  70:	orr	x5, x5, x1
  74:	tbnz	w4, #7, 60 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x60>
  78:	add	x5, x0, x5
  7c:	str	x5, [x20, #24]
  80:	ldrb	w1, [x0], #1
  84:	mov	x5, #0x0                   	// #0
  88:	mov	w3, #0x0                   	// #0
  8c:	strb	w1, [x20, #41]
  90:	ldrb	w4, [x0], #1
  94:	and	x1, x4, #0x7f
  98:	lsl	x1, x1, x3
  9c:	add	w3, w3, #0x7
  a0:	orr	x5, x5, x1
  a4:	tbnz	w4, #7, 90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
  a8:	add	x5, x0, x5
  ac:	ldp	x21, x22, [sp, #32]
  b0:	str	x5, [x20, #32]
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret
  c0:	mov	x1, x21
  c4:	mov	w0, w22
  c8:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  cc:	mov	x1, x0
  d0:	mov	x2, x19
  d4:	mov	w0, w22
  d8:	add	x3, x20, #0x8
  dc:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  e0:	mov	x19, x0
  e4:	mov	x0, x19
  e8:	ldrb	w1, [x0], #1
  ec:	strb	w1, [x20, #40]
  f0:	cmp	w1, #0xff
  f4:	b.ne	54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>  // b.any
  f8:	str	xzr, [x20, #24]
  fc:	b	80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x80>

Disassembly of section .text.__gxx_personality_v0:

0000000000000000 <__gxx_personality_v0>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	wzr, [sp, #156]
  10:	str	xzr, [sp, #160]
  14:	b.ne	78 <__gxx_personality_v0+0x78>  // b.any
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x20, #0xd500                	// #54528
  20:	movk	x20, #0xbcd4, lsl #16
  24:	movk	x20, #0xaabc, lsl #32
  28:	stp	x21, x22, [sp, #32]
  2c:	movk	x20, #0xb8b1, lsl #48
  30:	add	x0, x2, x20
  34:	stp	x23, x24, [sp, #48]
  38:	cmp	x0, #0x1
  3c:	stp	x25, x26, [sp, #64]
  40:	mov	w22, w1
  44:	mov	x21, x3
  48:	stp	x27, x28, [sp, #80]
  4c:	mov	x19, x4
  50:	str	x0, [sp, #104]
  54:	cset	w0, ls  // ls = plast
  58:	str	w0, [sp, #128]
  5c:	cmp	w1, #0x6
  60:	csel	w27, w0, wzr, eq  // eq = none
  64:	cbz	w27, 84 <__gxx_personality_v0+0x84>
  68:	ldur	x26, [x3, #-16]
  6c:	cbnz	x26, 1f8 <__gxx_personality_v0+0x1f8>
  70:	mov	x0, x21
  74:	bl	0 <__cxa_call_terminate>
  78:	mov	w0, #0x3                   	// #3
  7c:	ldp	x29, x30, [sp], #240
  80:	ret
  84:	mov	x0, x4
  88:	bl	0 <_Unwind_GetLanguageSpecificData>
  8c:	str	x0, [sp, #112]
  90:	cbz	x0, 25c <__gxx_personality_v0+0x25c>
  94:	ldr	x1, [sp, #112]
  98:	add	x0, sp, #0xc0
  9c:	mov	x2, x0
  a0:	str	x0, [sp, #120]
  a4:	mov	x0, x19
  a8:	bl	0 <__gxx_personality_v0>
  ac:	mov	x20, x0
  b0:	ldrb	w0, [sp, #232]
  b4:	mov	x1, x19
  b8:	bl	0 <__gxx_personality_v0>
  bc:	mov	x3, x0
  c0:	add	x1, sp, #0x9c
  c4:	mov	x0, x19
  c8:	str	x3, [sp, #208]
  cc:	bl	0 <_Unwind_GetIPInfo>
  d0:	ldr	w3, [sp, #156]
  d4:	ldr	x1, [sp, #224]
  d8:	cmp	w3, #0x0
  dc:	cset	x3, eq  // eq = none
  e0:	sub	x23, x0, x3
  e4:	cmp	x20, x1
  e8:	b.cs	1c0 <__gxx_personality_v0+0x1c0>  // b.hs, b.nlast
  ec:	add	x26, sp, #0xa8
  f0:	add	x25, sp, #0xb0
  f4:	add	x24, sp, #0xb8
  f8:	ldrb	w28, [sp, #233]
  fc:	mov	x1, #0x0                   	// #0
 100:	mov	w0, w28
 104:	bl	0 <__gxx_personality_v0>
 108:	mov	x2, x20
 10c:	mov	x3, x26
 110:	mov	x1, x0
 114:	mov	w0, w28
 118:	bl	0 <__gxx_personality_v0>
 11c:	ldrb	w20, [sp, #233]
 120:	mov	x28, x0
 124:	mov	x1, #0x0                   	// #0
 128:	mov	w0, w20
 12c:	bl	0 <__gxx_personality_v0>
 130:	mov	x2, x28
 134:	mov	x3, x25
 138:	mov	x1, x0
 13c:	mov	w0, w20
 140:	bl	0 <__gxx_personality_v0>
 144:	ldrb	w20, [sp, #233]
 148:	mov	x28, x0
 14c:	mov	x1, #0x0                   	// #0
 150:	mov	w0, w20
 154:	bl	0 <__gxx_personality_v0>
 158:	mov	x3, x24
 15c:	mov	x1, x0
 160:	mov	x2, x28
 164:	mov	w0, w20
 168:	bl	0 <__gxx_personality_v0>
 16c:	mov	x20, x0
 170:	mov	w3, #0x0                   	// #0
 174:	mov	x0, #0x0                   	// #0
 178:	ldrb	w4, [x20], #1
 17c:	and	x1, x4, #0x7f
 180:	lsl	x1, x1, x3
 184:	add	w3, w3, #0x7
 188:	orr	x0, x0, x1
 18c:	tbnz	w4, #7, 178 <__gxx_personality_v0+0x178>
 190:	ldr	x3, [sp, #168]
 194:	ldr	x1, [sp, #192]
 198:	add	x1, x1, x3
 19c:	cmp	x1, x23
 1a0:	b.hi	1c0 <__gxx_personality_v0+0x1c0>  // b.pmore
 1a4:	ldr	x3, [sp, #176]
 1a8:	add	x1, x1, x3
 1ac:	cmp	x1, x23
 1b0:	b.hi	23c <__gxx_personality_v0+0x23c>  // b.pmore
 1b4:	ldr	x0, [sp, #224]
 1b8:	cmp	x0, x20
 1bc:	b.hi	f8 <__gxx_personality_v0+0xf8>  // b.pmore
 1c0:	tbz	w22, #0, 27c <__gxx_personality_v0+0x27c>
 1c4:	mov	w24, #0x0                   	// #0
 1c8:	mov	x26, #0x0                   	// #0
 1cc:	mov	x23, #0x0                   	// #0
 1d0:	ldr	x0, [sp, #104]
 1d4:	cmp	x0, #0x1
 1d8:	mov	w0, #0x6                   	// #6
 1dc:	b.hi	260 <__gxx_personality_v0+0x260>  // b.pmore
 1e0:	ldr	x2, [sp, #112]
 1e4:	stur	w24, [x21, #-36]
 1e8:	ldr	x1, [sp, #160]
 1ec:	stp	x23, x2, [x21, #-32]
 1f0:	stp	x26, x1, [x21, #-16]
 1f4:	b	260 <__gxx_personality_v0+0x260>
 1f8:	ldur	w24, [x3, #-36]
 1fc:	ldur	x0, [x3, #-24]
 200:	str	x0, [sp, #112]
 204:	tbnz	w24, #31, 290 <__gxx_personality_v0+0x290>
 208:	mov	x2, x21
 20c:	mov	x0, x19
 210:	mov	w1, #0x0                   	// #0
 214:	bl	0 <_Unwind_SetGR>
 218:	sxtw	x2, w24
 21c:	mov	x0, x19
 220:	mov	w1, #0x1                   	// #1
 224:	bl	0 <_Unwind_SetGR>
 228:	mov	x0, x19
 22c:	mov	x1, x26
 230:	bl	0 <_Unwind_SetIP>
 234:	mov	w0, #0x7                   	// #7
 238:	b	260 <__gxx_personality_v0+0x260>
 23c:	ldr	x26, [sp, #184]
 240:	cbz	x26, 25c <__gxx_personality_v0+0x25c>
 244:	ldr	x1, [sp, #200]
 248:	add	x26, x26, x1
 24c:	cbnz	x0, 2c8 <__gxx_personality_v0+0x2c8>
 250:	cbz	x26, 25c <__gxx_personality_v0+0x25c>
 254:	and	w24, w22, #0x1
 258:	tbz	w22, #0, 208 <__gxx_personality_v0+0x208>
 25c:	mov	w0, #0x8                   	// #8
 260:	ldp	x19, x20, [sp, #16]
 264:	ldp	x21, x22, [sp, #32]
 268:	ldp	x23, x24, [sp, #48]
 26c:	ldp	x25, x26, [sp, #64]
 270:	ldp	x27, x28, [sp, #80]
 274:	ldp	x29, x30, [sp], #240
 278:	ret
 27c:	tbnz	w22, #3, 28c <__gxx_personality_v0+0x28c>
 280:	ldr	x0, [sp, #104]
 284:	cmp	x0, #0x1
 288:	b.ls	70 <__gxx_personality_v0+0x70>  // b.plast
 28c:	bl	0 <_ZSt9terminatev>
 290:	ldr	x1, [sp, #112]
 294:	add	x2, sp, #0xc0
 298:	mov	x0, x19
 29c:	bl	0 <__gxx_personality_v0>
 2a0:	ldrb	w0, [sp, #232]
 2a4:	mov	x1, x19
 2a8:	bl	0 <__gxx_personality_v0>
 2ac:	mov	x2, x0
 2b0:	ldrb	w0, [sp, #232]
 2b4:	mov	x1, x19
 2b8:	str	x2, [sp, #208]
 2bc:	bl	0 <__gxx_personality_v0>
 2c0:	stur	x0, [x21, #-16]
 2c4:	b	208 <__gxx_personality_v0+0x208>
 2c8:	ldr	x4, [sp, #224]
 2cc:	sub	x0, x0, #0x1
 2d0:	add	x23, x4, x0
 2d4:	cbz	x26, 25c <__gxx_personality_v0+0x25c>
 2d8:	cbz	x23, 254 <__gxx_personality_v0+0x254>
 2dc:	and	w0, w22, #0x8
 2e0:	str	w0, [sp, #132]
 2e4:	tbnz	w22, #3, 494 <__gxx_personality_v0+0x494>
 2e8:	ldr	x0, [sp, #104]
 2ec:	adrp	x6, 0 <_ZTIN10__cxxabiv119__foreign_exceptionE>
 2f0:	cmp	x0, #0x1
 2f4:	ldr	x6, [x6]
 2f8:	b.ls	4a0 <__gxx_personality_v0+0x4a0>  // b.plast
 2fc:	add	x28, sp, #0xa0
 300:	mov	x5, #0x1                   	// #1
 304:	nop
 308:	mov	x25, x23
 30c:	mov	x24, #0x0                   	// #0
 310:	mov	w1, #0x0                   	// #0
 314:	nop
 318:	ldrb	w2, [x25], #1
 31c:	and	x0, x2, #0x7f
 320:	lsl	x0, x0, x1
 324:	add	w1, w1, #0x7
 328:	orr	x24, x24, x0
 32c:	tbnz	w2, #7, 318 <__gxx_personality_v0+0x318>
 330:	cmp	w1, #0x3f
 334:	b.hi	34c <__gxx_personality_v0+0x34c>  // b.pmore
 338:	lsl	x0, x5, x1
 33c:	neg	x0, x0
 340:	orr	x0, x24, x0
 344:	tst	x2, #0x40
 348:	csel	x24, x0, x24, ne  // ne = any
 34c:	mov	x8, x25
 350:	mov	x20, #0x0                   	// #0
 354:	mov	w1, #0x0                   	// #0
 358:	ldrb	w2, [x8], #1
 35c:	and	x0, x2, #0x7f
 360:	lsl	x0, x0, x1
 364:	add	w1, w1, #0x7
 368:	orr	x20, x20, x0
 36c:	tbnz	w2, #7, 358 <__gxx_personality_v0+0x358>
 370:	cmp	w1, #0x3f
 374:	b.hi	38c <__gxx_personality_v0+0x38c>  // b.pmore
 378:	lsl	x0, x5, x1
 37c:	neg	x0, x0
 380:	orr	x0, x20, x0
 384:	tst	x2, #0x40
 388:	csel	x20, x0, x20, ne  // ne = any
 38c:	cmp	x24, #0x0
 390:	cbz	x24, 454 <__gxx_personality_v0+0x454>
 394:	b.gt	3f8 <__gxx_personality_v0+0x3f8>
 398:	ldr	w0, [sp, #132]
 39c:	cmp	w0, #0x0
 3a0:	ldr	w0, [sp, #128]
 3a4:	ccmp	w0, #0x0, #0x4, eq  // eq = none
 3a8:	ccmp	x6, #0x0, #0x4, ne  // ne = any
 3ac:	b.ne	45c <__gxx_personality_v0+0x45c>  // b.any
 3b0:	ldr	x0, [sp, #216]
 3b4:	mvn	x8, x24
 3b8:	mov	x9, #0x0                   	// #0
 3bc:	mov	w1, #0x0                   	// #0
 3c0:	add	x8, x0, x8
 3c4:	nop
 3c8:	ldrb	w2, [x8], #1
 3cc:	and	x0, x2, #0x7f
 3d0:	lsl	x0, x0, x1
 3d4:	add	w1, w1, #0x7
 3d8:	orr	x9, x9, x0
 3dc:	tbnz	w2, #7, 3c8 <__gxx_personality_v0+0x3c8>
 3e0:	cmp	x9, #0x0
 3e4:	cset	w0, eq  // eq = none
 3e8:	cbnz	w0, 434 <__gxx_personality_v0+0x434>
 3ec:	cbz	x20, 48c <__gxx_personality_v0+0x48c>
 3f0:	add	x23, x25, x20
 3f4:	b	308 <__gxx_personality_v0+0x308>
 3f8:	ldr	x0, [sp, #120]
 3fc:	mov	x1, x24
 400:	str	x6, [sp, #136]
 404:	bl	0 <__gxx_personality_v0>
 408:	cbz	x0, 434 <__gxx_personality_v0+0x434>
 40c:	ldr	x6, [sp, #136]
 410:	mov	x5, #0x1                   	// #1
 414:	cbz	x6, 3ec <__gxx_personality_v0+0x3ec>
 418:	mov	x1, x6
 41c:	mov	x2, x28
 420:	bl	0 <__gxx_personality_v0>
 424:	tst	w0, #0xff
 428:	mov	x5, #0x1                   	// #1
 42c:	ldr	x6, [sp, #136]
 430:	b.eq	3ec <__gxx_personality_v0+0x3ec>  // b.none
 434:	tbnz	w22, #0, 1d0 <__gxx_personality_v0+0x1d0>
 438:	ldr	w0, [sp, #132]
 43c:	cbnz	w0, 44c <__gxx_personality_v0+0x44c>
 440:	ldr	x0, [sp, #104]
 444:	cmp	x0, #0x1
 448:	b.ls	204 <__gxx_personality_v0+0x204>  // b.plast
 44c:	tbz	w24, #31, 208 <__gxx_personality_v0+0x208>
 450:	bl	0 <_ZSt10unexpectedv>
 454:	mov	w27, #0x1                   	// #1
 458:	b	3ec <__gxx_personality_v0+0x3ec>
 45c:	ldr	x0, [sp, #120]
 460:	mov	x1, x6
 464:	ldr	x2, [sp, #160]
 468:	mov	x3, x24
 46c:	str	x6, [sp, #136]
 470:	bl	0 <__gxx_personality_v0>
 474:	and	w0, w0, #0xff
 478:	eor	w0, w0, #0x1
 47c:	mov	x5, #0x1                   	// #1
 480:	ldr	x6, [sp, #136]
 484:	cbz	w0, 3ec <__gxx_personality_v0+0x3ec>
 488:	b	434 <__gxx_personality_v0+0x434>
 48c:	cbnz	w27, 254 <__gxx_personality_v0+0x254>
 490:	b	25c <__gxx_personality_v0+0x25c>
 494:	adrp	x6, 0 <_ZTIN10__cxxabiv115__forced_unwindE>
 498:	ldr	x6, [x6]
 49c:	b	2fc <__gxx_personality_v0+0x2fc>
 4a0:	mov	x0, x21
 4a4:	ldr	x1, [x0], #32
 4a8:	tbz	w1, #0, 4b0 <__gxx_personality_v0+0x4b0>
 4ac:	ldur	x0, [x21, #-80]
 4b0:	ldur	x6, [x0, #-112]
 4b4:	str	x0, [sp, #160]
 4b8:	b	2fc <__gxx_personality_v0+0x2fc>
 4bc:	bl	0 <__cxa_begin_catch>
 4c0:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_call_unexpected:

0000000000000000 <__cxa_call_unexpected>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	str	x23, [sp, #48]
  18:	bl	0 <__cxa_begin_catch>
  1c:	ldp	x0, x21, [x19, #-64]
  20:	ldur	x1, [x19, #-16]
  24:	str	x1, [sp, #80]
  28:	ldur	w20, [x19, #-36]
  2c:	ldur	x19, [x19, #-24]
  30:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  34:	bl	0 <__cxa_begin_catch>
  38:	bl	0 <__cxa_get_globals_fast>
  3c:	ldr	x22, [x0]
  40:	ldr	x0, [x22, #80]
  44:	tbz	w0, #0, c8 <__cxa_call_unexpected+0xc8>
  48:	ldr	x22, [x22]
  4c:	add	x23, sp, #0x40
  50:	mov	x1, x19
  54:	mov	x2, x23
  58:	mov	x0, #0x0                   	// #0
  5c:	bl	0 <__cxa_call_unexpected>
  60:	ldur	x1, [x22, #-112]
  64:	sxtw	x20, w20
  68:	mov	x3, x20
  6c:	mov	x2, x22
  70:	mov	x0, x23
  74:	bl	0 <__cxa_call_unexpected>
  78:	tst	w0, #0xff
  7c:	b.ne	e4 <__cxa_call_unexpected+0xe4>  // b.any
  80:	adrp	x19, 0 <_ZTISt13bad_exception>
  84:	mov	x3, x20
  88:	mov	x0, x23
  8c:	mov	x2, #0x0                   	// #0
  90:	ldr	x1, [x19]
  94:	bl	0 <__cxa_call_unexpected>
  98:	tst	w0, #0xff
  9c:	b.eq	e8 <__cxa_call_unexpected+0xe8>  // b.none
  a0:	mov	x0, #0x8                   	// #8
  a4:	bl	0 <__cxa_allocate_exception>
  a8:	adrp	x3, 0 <_ZTVSt13bad_exception>
  ac:	adrp	x2, 0 <_ZNSt13bad_exceptionD1Ev>
  b0:	ldr	x1, [x19]
  b4:	ldr	x3, [x3]
  b8:	ldr	x2, [x2]
  bc:	add	x3, x3, #0x10
  c0:	str	x3, [x0]
  c4:	bl	0 <__cxa_throw>
  c8:	add	x22, x22, #0x70
  cc:	b	4c <__cxa_call_unexpected+0x4c>
  d0:	mov	x19, x0
  d4:	bl	0 <__cxa_end_catch>
  d8:	bl	0 <__cxa_end_catch>
  dc:	mov	x0, x19
  e0:	bl	0 <_Unwind_Resume>
  e4:	bl	0 <__cxa_rethrow>
  e8:	mov	x0, x21
  ec:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_ptr.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv>:
   0:	ret

Disassembly of section .text._ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	ldur	x19, [x1, #-80]
  14:	b.hi	64 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x64>  // b.pmore
  18:	sub	x0, x1, #0x50
  1c:	bl	0 <__cxa_free_dependent_exception>
  20:	sub	x0, x19, #0x80
  24:	ldaxr	w1, [x0]
  28:	sub	w1, w1, #0x1
  2c:	stlxr	w2, w1, [x0]
  30:	cbnz	w2, 24 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x24>
  34:	cbnz	w1, 58 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  38:	ldur	x1, [x19, #-104]
  3c:	cbz	x1, 48 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
  40:	mov	x0, x19
  44:	blr	x1
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	b	0 <__cxa_free_exception>
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	ldur	x0, [x19, #-88]
  68:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1Ev>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr9_M_addrefEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>:
   0:	ldr	x0, [x0]
   4:	cbz	x0, 1c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x1c>
   8:	sub	x0, x0, #0x80
   c:	ldaxr	w1, [x0]
  10:	add	w1, w1, #0x1
  14:	stlxr	w2, w1, [x0]
  18:	cbnz	w2, c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0xc>
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EPv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EPv>:
   0:	str	x1, [x0]
   4:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1EPv>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2ERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>:
   0:	ldr	x1, [x1]
   4:	str	x1, [x0]
   8:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr10_M_releaseEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0]
  14:	cbz	x0, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  18:	sub	x1, x0, #0x80
  1c:	ldaxr	w2, [x1]
  20:	sub	w2, w2, #0x1
  24:	stlxr	w3, w2, [x1]
  28:	cbnz	w3, 1c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x1c>
  2c:	cbnz	w2, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  30:	ldur	x1, [x0, #-104]
  34:	ldr	x0, [x19]
  38:	cbz	x1, 44 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x44>
  3c:	blr	x1
  40:	ldr	x0, [x19]
  44:	bl	0 <__cxa_free_exception>
  48:	str	xzr, [x19]
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrD2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrD1Ev>:
   0:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr6_M_getEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr6_M_getEv>:
   0:	ldr	x0, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr4swapERS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr4swapERS0_>:
   0:	ldr	x3, [x1]
   4:	ldr	x2, [x0]
   8:	str	x3, [x0]
   c:	str	x2, [x1]
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptraSERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x19, sp, #0x28
  10:	mov	x20, x0
  14:	mov	x0, x19
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  1c:	mov	x1, x20
  20:	mov	x0, x19
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  28:	mov	x0, x19
  2c:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  30:	mov	x0, x20
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrntEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrntEv>:
   0:	ldr	x0, [x0]
   4:	cmp	x0, #0x0
   8:	cset	w0, eq  // eq = none
   c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>:
   0:	adrp	x2, 0 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>
   4:	mov	x1, #0x0                   	// #0
   8:	ldr	x0, [x0]
   c:	ldr	x2, [x2]
  10:	cmp	x0, #0x0
  14:	csel	x0, x2, xzr, ne  // ne = any
  18:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>:
   0:	ldr	x0, [x0]
   4:	ldur	x0, [x0, #-112]
   8:	ret

Disassembly of section .text._ZNSt15__exception_ptreqERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_>:
   0:	ldr	x2, [x0]
   4:	ldr	x0, [x1]
   8:	cmp	x2, x0
   c:	cset	w0, eq  // eq = none
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptrneERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>
   c:	and	w0, w0, #0xff
  10:	eor	w0, w0, #0x1
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text._ZSt17current_exceptionv:

0000000000000000 <_ZSt17current_exceptionv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x8
  10:	bl	0 <__cxa_get_globals>
  14:	ldr	x0, [x0]
  18:	cbz	x0, 60 <_ZSt17current_exceptionv+0x60>
  1c:	mov	x1, #0xd500                	// #54528
  20:	ldr	x2, [x0, #80]
  24:	movk	x1, #0xbcd4, lsl #16
  28:	movk	x1, #0xaabc, lsl #32
  2c:	movk	x1, #0xb8b1, lsl #48
  30:	add	x1, x2, x1
  34:	cmp	x1, #0x1
  38:	b.hi	60 <_ZSt17current_exceptionv+0x60>  // b.pmore
  3c:	add	x1, x0, #0x70
  40:	tbz	w2, #0, 48 <_ZSt17current_exceptionv+0x48>
  44:	ldr	x1, [x0]
  48:	mov	x0, x19
  4c:	bl	0 <_ZSt17current_exceptionv>
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	mov	x0, x19
  64:	bl	0 <_ZSt17current_exceptionv>
  68:	mov	x0, x19
  6c:	ldr	x19, [sp, #16]
  70:	ldp	x29, x30, [sp], #32
  74:	ret

Disassembly of section .text._ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE:

0000000000000000 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  10:	mov	x20, x0
  14:	bl	0 <__cxa_allocate_dependent_exception>
  18:	mov	x19, x0
  1c:	sub	x1, x20, #0x80
  20:	str	x20, [x0]
  24:	ldaxr	w0, [x1]
  28:	add	w0, w0, #0x1
  2c:	stlxr	w2, w0, [x1]
  30:	cbnz	w2, 24 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE+0x24>
  34:	bl	0 <_ZSt14get_unexpectedv>
  38:	str	x0, [x19, #16]
  3c:	add	x20, x19, #0x50
  40:	bl	0 <_ZSt13get_terminatev>
  44:	str	x0, [x19, #24]
  48:	mov	x2, #0x2b01                	// #11009
  4c:	adrp	x1, 0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  50:	movk	x2, #0x432b, lsl #16
  54:	add	x1, x1, #0x0
  58:	movk	x2, #0x5543, lsl #32
  5c:	movk	x2, #0x474e, lsl #48
  60:	stp	x2, x1, [x19, #80]
  64:	bl	0 <__cxa_get_globals>
  68:	mov	x1, x0
  6c:	mov	x0, x20
  70:	ldr	w2, [x1, #8]
  74:	add	w2, w2, #0x1
  78:	str	w2, [x1, #8]
  7c:	bl	0 <_Unwind_RaiseException>
  80:	mov	x0, x20
  84:	bl	0 <__cxa_begin_catch>
  88:	bl	0 <_ZSt9terminatev>

eh_term_handler.o:     file format elf64-littleaarch64


eh_terminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

0000000000000000 <_ZN10__cxxabiv111__terminateEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <abort>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <abort>

Disassembly of section .text._ZSt13set_terminatePFvvE:

0000000000000000 <_ZSt13set_terminatePFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt13set_terminatePFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt13get_terminatev:

0000000000000000 <_ZSt13get_terminatev>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt9terminatev:

0000000000000000 <_ZSt9terminatev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt9terminatev>
   c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZN10__cxxabiv112__unexpectedEPFvvE:

0000000000000000 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

Disassembly of section .text._ZSt14set_unexpectedPFvvE:

0000000000000000 <_ZSt14set_unexpectedPFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt14set_unexpectedPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt14get_unexpectedv:

0000000000000000 <_ZSt14get_unexpectedv>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt10unexpectedv:

0000000000000000 <_ZSt10unexpectedv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt10unexpectedv>
   c:	bl	0 <_ZSt10unexpectedv>

eh_tm.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL22free_any_cxa_exceptionP17_Unwind_Exception:

0000000000000000 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	x1, [x0]
   c:	str	x19, [sp, #16]
  10:	tbnz	w1, #0, 38 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x38>
  14:	sub	x19, x0, #0x60
  18:	ldaxr	w0, [x19]
  1c:	sub	w0, w0, #0x1
  20:	stlxr	w1, w0, [x19]
  24:	cbnz	w1, 18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  28:	cbz	w0, 4c <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x4c>
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	ldur	x19, [x0, #-80]
  3c:	sub	x0, x0, #0x50
  40:	sub	x19, x19, #0x80
  44:	bl	0 <__cxa_free_dependent_exception>
  48:	b	18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  4c:	add	x0, x19, #0x80
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	b	0 <__cxa_free_exception>

Disassembly of section .text.__cxa_tm_cleanup:

0000000000000000 <__cxa_tm_cleanup>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	w19, w2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x0
  1c:	bl	0 <__cxa_get_globals_fast>
  20:	mov	x21, x0
  24:	cbz	x22, 3c <__cxa_tm_cleanup+0x3c>
  28:	ldr	w1, [x21, #8]
  2c:	mov	x0, x22
  30:	sub	w1, w1, #0x1
  34:	str	w1, [x21, #8]
  38:	bl	0 <__cxa_free_exception>
  3c:	cbz	x20, 68 <__cxa_tm_cleanup+0x68>
  40:	mov	x1, #0xd500                	// #54528
  44:	ldr	x0, [x20]
  48:	movk	x1, #0xbcd4, lsl #16
  4c:	movk	x1, #0xaabc, lsl #32
  50:	movk	x1, #0xb8b1, lsl #48
  54:	add	x0, x0, x1
  58:	cmp	x0, #0x1
  5c:	mov	x0, x20
  60:	b.ls	d0 <__cxa_tm_cleanup+0xd0>  // b.plast
  64:	bl	0 <_Unwind_DeleteException>
  68:	cbz	w19, c0 <__cxa_tm_cleanup+0xc0>
  6c:	ldr	x20, [x21]
  70:	cbz	x20, c0 <__cxa_tm_cleanup+0xc0>
  74:	mov	x22, #0xd500                	// #54528
  78:	movk	x22, #0xbcd4, lsl #16
  7c:	movk	x22, #0xaabc, lsl #32
  80:	movk	x22, #0xb8b1, lsl #48
  84:	b	98 <__cxa_tm_cleanup+0x98>
  88:	bl	0 <_Unwind_DeleteException>
  8c:	subs	w19, w19, #0x1
  90:	mov	x20, #0x0                   	// #0
  94:	b.eq	bc <__cxa_tm_cleanup+0xbc>  // b.none
  98:	ldr	x1, [x20, #80]
  9c:	add	x0, x20, #0x50
  a0:	add	x1, x1, x22
  a4:	cmp	x1, #0x1
  a8:	b.hi	88 <__cxa_tm_cleanup+0x88>  // b.pmore
  ac:	ldr	x20, [x20, #32]
  b0:	bl	0 <__cxa_tm_cleanup>
  b4:	subs	w19, w19, #0x1
  b8:	b.ne	98 <__cxa_tm_cleanup+0x98>  // b.any
  bc:	str	x20, [x21]
  c0:	ldp	x19, x20, [sp, #16]
  c4:	ldp	x21, x22, [sp, #32]
  c8:	ldp	x29, x30, [sp], #48
  cc:	ret
  d0:	bl	0 <__cxa_tm_cleanup>
  d4:	b	68 <__cxa_tm_cleanup+0x68>
  d8:	cmn	x1, #0x1
  dc:	b.ne	e4 <__cxa_tm_cleanup+0xe4>  // b.any
  e0:	bl	0 <__cxa_call_unexpected>
  e4:	bl	0 <_Unwind_Resume>

eh_throw.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	b.hi	58 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>  // b.pmore
  10:	sub	x0, x1, #0x60
  14:	ldaxr	w2, [x0]
  18:	sub	w2, w2, #0x1
  1c:	stlxr	w3, w2, [x0]
  20:	cbnz	w3, 14 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x14>
  24:	cbnz	w2, 50 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x50>
  28:	ldur	x2, [x1, #-72]
  2c:	str	x19, [sp, #16]
  30:	add	x19, x1, #0x20
  34:	cbz	x2, 40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  38:	mov	x0, x19
  3c:	blr	x2
  40:	mov	x0, x19
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	b	0 <__cxa_free_exception>
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	ldur	x0, [x1, #-56]
  5c:	str	x19, [sp, #16]
  60:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text.__cxa_init_primary_exception:

0000000000000000 <__cxa_init_primary_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	sub	x20, x0, #0x80
  14:	stur	wzr, [x0, #-128]
  18:	stp	x1, x2, [x0, #-112]
  1c:	bl	0 <_ZSt14get_unexpectedv>
  20:	stur	x0, [x19, #-96]
  24:	bl	0 <_ZSt13get_terminatev>
  28:	mov	x3, x0
  2c:	mov	x2, #0x2b00                	// #11008
  30:	adrp	x1, 0 <__cxa_init_primary_exception>
  34:	movk	x2, #0x432b, lsl #16
  38:	add	x1, x1, #0x0
  3c:	movk	x2, #0x5543, lsl #32
  40:	stur	x3, [x19, #-88]
  44:	movk	x2, #0x474e, lsl #48
  48:	stp	x2, x1, [x19, #-32]
  4c:	mov	x0, x20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret

Disassembly of section .text.__cxa_throw:

0000000000000000 <__cxa_throw>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <__cxa_get_globals>
  20:	mov	x3, x0
  24:	mov	x2, x21
  28:	mov	x1, x20
  2c:	mov	x0, x19
  30:	ldr	w4, [x3, #8]
  34:	add	w4, w4, #0x1
  38:	str	w4, [x3, #8]
  3c:	bl	0 <__cxa_throw>
  40:	mov	x19, x0
  44:	mov	w0, #0x1                   	// #1
  48:	str	w0, [x19], #96
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_RaiseException>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_rethrow:

0000000000000000 <__cxa_rethrow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	bl	0 <__cxa_get_globals>
  10:	ldr	w2, [x0, #8]
  14:	ldr	x1, [x0]
  18:	add	w2, w2, #0x1
  1c:	str	w2, [x0, #8]
  20:	cbz	x1, 5c <__cxa_rethrow+0x5c>
  24:	mov	x3, #0xd500                	// #54528
  28:	ldr	x2, [x1, #80]
  2c:	movk	x3, #0xbcd4, lsl #16
  30:	movk	x3, #0xaabc, lsl #32
  34:	movk	x3, #0xb8b1, lsl #48
  38:	add	x2, x2, x3
  3c:	cmp	x2, #0x1
  40:	b.ls	60 <__cxa_rethrow+0x60>  // b.plast
  44:	str	xzr, [x0]
  48:	add	x19, x1, #0x50
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_Resume_or_Rethrow>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>
  60:	ldr	w0, [x1, #40]
  64:	neg	w0, w0
  68:	str	w0, [x1, #40]
  6c:	b	48 <__cxa_rethrow+0x48>

eh_type.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_current_exception_type:

0000000000000000 <__cxa_current_exception_type>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	x0, [x0]
  10:	cbz	x0, 24 <__cxa_current_exception_type+0x24>
  14:	ldr	x1, [x0, #80]
  18:	ldr	x0, [x0]
  1c:	tbz	w1, #0, 24 <__cxa_current_exception_type+0x24>
  20:	ldur	x0, [x0, #-112]
  24:	ldp	x29, x30, [sp], #16
  28:	ret

eh_unex_handler.o:     file format elf64-littleaarch64


enum_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv116__enum_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv116__enum_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

function_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv120__function_type_info15__is_function_pEv:

0000000000000000 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__function_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

fundamental_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

guard.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_guard_acquire:

0000000000000000 <__cxa_guard_acquire>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x23, [sp, #48]
   c:	mov	x23, x0
  10:	ldarb	w0, [x0]
  14:	tst	w0, #0xff
  18:	b.ne	74 <__cxa_guard_acquire+0x74>  // b.any
  1c:	adrp	x0, 0 <__pthread_key_create>
  20:	ldr	x0, [x0]
  24:	cbz	x0, 84 <__cxa_guard_acquire+0x84>
  28:	stp	x19, x20, [sp, #16]
  2c:	mov	w19, #0x100                 	// #256
  30:	mov	w20, #0x1                   	// #1
  34:	stp	x21, x22, [sp, #32]
  38:	mov	w21, w19
  3c:	ldaxr	w0, [x23]
  40:	cbnz	w0, 4c <__cxa_guard_acquire+0x4c>
  44:	stlxr	w1, w19, [x23]
  48:	cbnz	w1, 3c <__cxa_guard_acquire+0x3c>
  4c:	cmp	w0, #0x0
  50:	b.ne	ac <__cxa_guard_acquire+0xac>  // b.any
  54:	mov	w0, #0x1                   	// #1
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldr	x23, [sp, #48]
  64:	ldp	x29, x30, [sp], #64
  68:	ret
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	mov	w0, #0x0                   	// #0
  78:	ldr	x23, [sp, #48]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret
  84:	ldrb	w0, [x23]
  88:	cbnz	w0, 74 <__cxa_guard_acquire+0x74>
  8c:	ldrb	w0, [x23, #1]
  90:	cbnz	w0, 124 <__cxa_guard_acquire+0x124>
  94:	mov	w2, #0x1                   	// #1
  98:	strb	w2, [x23, #1]
  9c:	mov	w0, #0x1                   	// #1
  a0:	ldr	x23, [sp, #48]
  a4:	ldp	x29, x30, [sp], #64
  a8:	ret
  ac:	orr	w22, w19, #0x10000
  b0:	mov	w3, w0
  b4:	cmp	w20, w3
  b8:	b.eq	6c <__cxa_guard_acquire+0x6c>  // b.none
  bc:	cmp	w19, w3
  c0:	b.ne	e0 <__cxa_guard_acquire+0xe0>  // b.any
  c4:	mov	w3, w22
  c8:	ldaxr	w2, [x23]
  cc:	cmp	w2, w0
  d0:	b.ne	dc <__cxa_guard_acquire+0xdc>  // b.any
  d4:	stlxr	w1, w22, [x23]
  d8:	cbnz	w1, c8 <__cxa_guard_acquire+0xc8>
  dc:	b.ne	114 <__cxa_guard_acquire+0x114>  // b.any
  e0:	mov	x1, x23
  e4:	mov	w4, #0x0                   	// #0
  e8:	mov	w2, #0x0                   	// #0
  ec:	mov	x0, #0x62                  	// #98
  f0:	bl	0 <syscall>
  f4:	ldaxr	w0, [x23]
  f8:	cbnz	w0, 104 <__cxa_guard_acquire+0x104>
  fc:	stlxr	w1, w21, [x23]
 100:	cbnz	w1, f4 <__cxa_guard_acquire+0xf4>
 104:	cmp	w0, #0x0
 108:	mov	w3, w0
 10c:	b.eq	54 <__cxa_guard_acquire+0x54>  // b.none
 110:	b	b4 <__cxa_guard_acquire+0xb4>
 114:	cmp	w20, w2
 118:	b.eq	6c <__cxa_guard_acquire+0x6c>  // b.none
 11c:	cbnz	w2, e0 <__cxa_guard_acquire+0xe0>
 120:	b	f4 <__cxa_guard_acquire+0xf4>
 124:	mov	x0, #0x8                   	// #8
 128:	stp	x19, x20, [sp, #16]
 12c:	stp	x21, x22, [sp, #32]
 130:	bl	0 <__cxa_allocate_exception>
 134:	mov	x19, x0
 138:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
 13c:	adrp	x2, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
 140:	adrp	x1, 0 <_ZTIN9__gnu_cxx20recursive_init_errorE>
 144:	mov	x0, x19
 148:	ldr	x2, [x2]
 14c:	ldr	x1, [x1]
 150:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_guard_abort:

0000000000000000 <__cxa_guard_abort>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbnz	x1, 14 <__cxa_guard_abort+0x14>
   c:	strb	wzr, [x0, #1]
  10:	ret
  14:	ldaxr	w1, [x0]
  18:	stlxr	w2, wzr, [x0]
  1c:	cbnz	w2, 14 <__cxa_guard_abort+0x14>
  20:	tbz	w1, #16, 10 <__cxa_guard_abort+0x10>
  24:	mov	x1, x0
  28:	mov	w3, #0x7fffffff            	// #2147483647
  2c:	mov	w2, #0x1                   	// #1
  30:	mov	x0, #0x62                  	// #98
  34:	b	0 <syscall>

Disassembly of section .text.__cxa_guard_release:

0000000000000000 <__cxa_guard_release>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbz	x1, 24 <__cxa_guard_release+0x24>
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	stlxr	w3, w2, [x0]
  18:	cbnz	w3, 10 <__cxa_guard_release+0x10>
  1c:	tbnz	w1, #16, 34 <__cxa_guard_release+0x34>
  20:	ret
  24:	strb	wzr, [x0, #1]
  28:	mov	w1, #0x1                   	// #1
  2c:	stlrb	w1, [x0]
  30:	ret
  34:	mov	x1, x0
  38:	mov	w3, #0x7fffffff            	// #2147483647
  3c:	mov	x0, #0x62                  	// #98
  40:	b	0 <syscall>

guard_error.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	ret

hash_bytes.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt11_Hash_bytesPKvmm:

0000000000000000 <_ZSt11_Hash_bytesPKvmm>:
   0:	mov	x4, #0xe995                	// #59797
   4:	and	x5, x1, #0xfffffffffffffff8
   8:	movk	x4, #0x5bd1, lsl #16
   c:	add	x5, x0, x5
  10:	movk	x4, #0xa793, lsl #32
  14:	cmp	x0, x5
  18:	movk	x4, #0xc6a4, lsl #48
  1c:	mul	x3, x1, x4
  20:	eor	x2, x3, x2
  24:	b.eq	48 <_ZSt11_Hash_bytesPKvmm+0x48>  // b.none
  28:	ldr	x3, [x0], #8
  2c:	cmp	x5, x0
  30:	mul	x3, x3, x4
  34:	eor	x3, x3, x3, lsr #47
  38:	mul	x3, x3, x4
  3c:	eor	x2, x3, x2
  40:	mul	x2, x2, x4
  44:	b.ne	28 <_ZSt11_Hash_bytesPKvmm+0x28>  // b.any
  48:	ands	x1, x1, #0x7
  4c:	b.eq	88 <_ZSt11_Hash_bytesPKvmm+0x88>  // b.none
  50:	sub	w1, w1, #0x1
  54:	mov	x3, #0x0                   	// #0
  58:	sxtw	x0, w1
  5c:	nop
  60:	ldrb	w1, [x5, x0]
  64:	sub	x0, x0, #0x1
  68:	add	x3, x1, x3, lsl #8
  6c:	tbz	w0, #31, 60 <_ZSt11_Hash_bytesPKvmm+0x60>
  70:	eor	x2, x3, x2
  74:	mov	x3, #0xe995                	// #59797
  78:	movk	x3, #0x5bd1, lsl #16
  7c:	movk	x3, #0xa793, lsl #32
  80:	movk	x3, #0xc6a4, lsl #48
  84:	mul	x2, x2, x3
  88:	mov	x0, #0xe995                	// #59797
  8c:	eor	x2, x2, x2, lsr #47
  90:	movk	x0, #0x5bd1, lsl #16
  94:	movk	x0, #0xa793, lsl #32
  98:	movk	x0, #0xc6a4, lsl #48
  9c:	mul	x0, x2, x0
  a0:	eor	x0, x0, x0, lsr #47
  a4:	ret

Disassembly of section .text._ZSt15_Fnv_hash_bytesPKvmm:

0000000000000000 <_ZSt15_Fnv_hash_bytesPKvmm>:
   0:	mov	x3, x0
   4:	cbz	x1, 30 <_ZSt15_Fnv_hash_bytesPKvmm+0x30>
   8:	add	x1, x0, x1
   c:	mov	x4, #0x1b3                 	// #435
  10:	mov	x0, x2
  14:	movk	x4, #0x100, lsl #32
  18:	ldrb	w2, [x3], #1
  1c:	eor	x0, x2, x0
  20:	cmp	x3, x1
  24:	mul	x0, x0, x4
  28:	b.ne	18 <_ZSt15_Fnv_hash_bytesPKvmm+0x18>  // b.any
  2c:	ret
  30:	mov	x0, x2
  34:	ret

nested_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt16nested_exceptionD2Ev:

0000000000000000 <_ZNSt16nested_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16nested_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0], #8
  10:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNSt16nested_exceptionD0Ev:

0000000000000000 <_ZNSt16nested_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16nested_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

new_handler.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt15set_new_handlerPFvvE:

0000000000000000 <_ZSt15set_new_handlerPFvvE>:
   0:	adrp	x1, 0 <_ZSt15set_new_handlerPFvvE>
   4:	mov	x2, x0
   8:	add	x1, x1, #0x0
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt15set_new_handlerPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt15get_new_handlerv:

0000000000000000 <_ZSt15get_new_handlerv>:
   0:	adrp	x0, 0 <_ZSt15get_new_handlerv>
   4:	add	x0, x0, #0x0
   8:	ldar	x0, [x0]
   c:	ret

new_op.o:     file format elf64-littleaarch64


Disassembly of section .text._Znwm:

0000000000000000 <_Znwm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	x0, #0x0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	csinc	x19, x0, xzr, ne  // ne = any
  14:	mov	x0, x19
  18:	bl	0 <malloc>
  1c:	cbz	x0, 2c <_Znwm+0x2c>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	bl	0 <_ZSt15get_new_handlerv>
  30:	cbz	x0, 3c <_Znwm+0x3c>
  34:	blr	x0
  38:	b	14 <_Znwm+0x14>
  3c:	mov	x0, #0x8                   	// #8
  40:	bl	0 <__cxa_allocate_exception>
  44:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  48:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  4c:	adrp	x1, 0 <_ZTISt9bad_alloc>
  50:	ldr	x3, [x3]
  54:	ldr	x2, [x2]
  58:	add	x3, x3, #0x10
  5c:	ldr	x1, [x1]
  60:	str	x3, [x0]
  64:	bl	0 <__cxa_throw>

new_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmRKSt9nothrow_t:

0000000000000000 <_ZnwmRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znwm>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnwmRKSt9nothrow_t+0xc>

new_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._Znam:

0000000000000000 <_Znam>:
   0:	b	0 <_Znwm>

new_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamRKSt9nothrow_t:

0000000000000000 <_ZnamRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znam>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnamRKSt9nothrow_t+0xc>

new_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_t:

0000000000000000 <_ZnwmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x1, 70 <_ZnwmSt11align_val_t+0x70>
  10:	fmov	d0, x1
  14:	mov	x19, x1
  18:	cnt	v0.8b, v0.8b
  1c:	addv	b0, v0.8b
  20:	umov	w1, v0.b[0]
  24:	cmp	w1, #0x1
  28:	b.ne	70 <_ZnwmSt11align_val_t+0x70>  // b.any
  2c:	cmp	x0, #0x0
  30:	neg	x20, x19
  34:	csinc	x0, x0, xzr, ne  // ne = any
  38:	sub	x0, x0, #0x1
  3c:	add	x0, x0, x19
  40:	and	x20, x20, x0
  44:	mov	x1, x20
  48:	mov	x0, x19
  4c:	bl	0 <aligned_alloc>
  50:	cbz	x0, 60 <_ZnwmSt11align_val_t+0x60>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	bl	0 <_ZSt15get_new_handlerv>
  64:	cbz	x0, 70 <_ZnwmSt11align_val_t+0x70>
  68:	blr	x0
  6c:	b	44 <_ZnwmSt11align_val_t+0x44>
  70:	mov	x0, #0x8                   	// #8
  74:	bl	0 <__cxa_allocate_exception>
  78:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  7c:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  80:	adrp	x1, 0 <_ZTISt9bad_alloc>
  84:	ldr	x3, [x3]
  88:	ldr	x2, [x2]
  8c:	add	x3, x3, #0x10
  90:	ldr	x1, [x1]
  94:	str	x3, [x0]
  98:	bl	0 <__cxa_throw>

new_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnwmSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnwmSt11align_val_tRKSt9nothrow_t+0xc>

new_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_t:

0000000000000000 <_ZnamSt11align_val_t>:
   0:	b	0 <_ZnwmSt11align_val_t>

new_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnamSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnamSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnamSt11align_val_tRKSt9nothrow_t+0xc>

del_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_t:

0000000000000000 <_ZdlPvSt11align_val_t>:
   0:	b	0 <free>

del_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvmSt11align_val_t:

0000000000000000 <_ZdlPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdlPvSt11align_val_t>

del_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_t:

0000000000000000 <_ZdaPvSt11align_val_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdaPvSt11align_val_t>

del_opvsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvmSt11align_val_t:

0000000000000000 <_ZdaPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdaPvSt11align_val_t>

pbase_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	ldr	x0, [x0, #24]
   4:	add	w3, w3, #0x2
   8:	ldr	x1, [x1, #24]
   c:	ldr	x4, [x0]
  10:	ldr	x4, [x4, #32]
  14:	mov	x16, x4
  18:	br	x16

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	ldr	x0, [x0, #8]
  18:	ldr	x21, [x1, #8]
  1c:	cmp	x0, x21
  20:	b.eq	1cc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1cc>  // b.none
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x20, x1
  2c:	mov	x23, x2
  30:	ldrb	w1, [x0]
  34:	mov	w22, w3
  38:	cmp	w1, #0x2a
  3c:	b.eq	64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x64>  // b.none
  40:	mov	x1, x21
  44:	bl	0 <strcmp>
  48:	cbnz	w0, 64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
  4c:	ldp	x23, x24, [sp, #48]
  50:	mov	w0, #0x1                   	// #1
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	adrp	x0, 0 <_ZTIDn>
  68:	ldr	x0, [x0]
  6c:	ldr	x1, [x0, #8]
  70:	cmp	x21, x1
  74:	b.eq	90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x90>  // b.none
  78:	ldrb	w0, [x21]
  7c:	cmp	w0, #0x2a
  80:	b.eq	114 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x114>  // b.none
  84:	mov	x0, x21
  88:	bl	0 <strcmp>
  8c:	cbnz	w0, 114 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x114>
  90:	ldr	x24, [x19]
  94:	adrp	x0, 0 <_ZTIN10__cxxabiv119__pointer_type_infoE>
  98:	ldr	x0, [x0]
  9c:	ldur	x2, [x24, #-8]
  a0:	ldr	x1, [x0, #8]
  a4:	ldr	x21, [x2, #8]
  a8:	cmp	x21, x1
  ac:	b.eq	1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>  // b.none
  b0:	ldrb	w0, [x21]
  b4:	cmp	w0, #0x2a
  b8:	b.eq	1fc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1fc>  // b.none
  bc:	mov	x0, x21
  c0:	bl	0 <strcmp>
  c4:	cbz	w0, 1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>
  c8:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
  cc:	ldr	x0, [x0]
  d0:	ldr	x1, [x0, #8]
  d4:	cmp	x21, x1
  d8:	b.eq	e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>  // b.none
  dc:	mov	x0, x21
  e0:	bl	0 <strcmp>
  e4:	cbnz	w0, 254 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x254>
  e8:	ldr	x0, [x19, #24]
  ec:	ldr	x1, [x0]
  f0:	ldr	x1, [x1, #24]
  f4:	blr	x1
  f8:	ands	w0, w0, #0xff
  fc:	b.eq	23c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x23c>  // b.none
 100:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 104:	add	x1, x1, #0x0
 108:	str	x1, [x23]
 10c:	ldp	x23, x24, [sp, #48]
 110:	b	54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
 114:	ldr	x24, [x19]
 118:	ldr	x0, [x20]
 11c:	ldur	x1, [x24, #-8]
 120:	ldur	x0, [x0, #-8]
 124:	ldr	x21, [x1, #8]
 128:	ldr	x1, [x0, #8]
 12c:	cmp	x21, x1
 130:	b.eq	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>  // b.none
 134:	ldrb	w0, [x21]
 138:	cmp	w0, #0x2a
 13c:	b.eq	224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>  // b.none
 140:	mov	x0, x21
 144:	bl	0 <strcmp>
 148:	cbnz	w0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 14c:	tbz	w22, #0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 150:	ldr	w0, [x20, #16]
 154:	ldr	w3, [x19, #16]
 158:	and	w1, w0, #0x60
 15c:	and	w2, w3, #0x60
 160:	bics	wzr, w1, w2
 164:	and	w4, w0, w2
 168:	csel	w0, w4, w0, ne  // ne = any
 16c:	bic	w1, w2, w1
 170:	bic	w0, w0, w3
 174:	orr	w0, w1, w0
 178:	cbnz	w0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 17c:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 180:	tst	x3, #0x1
 184:	ldr	x4, [x24, #48]
 188:	and	w1, w22, #0xfffffffe
 18c:	ldr	x0, [x0]
 190:	csel	w22, w1, w22, eq  // eq = none
 194:	cmp	x4, x0
 198:	b.ne	26c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x26c>  // b.any
 19c:	ldr	x0, [x19, #24]
 1a0:	add	w3, w22, #0x2
 1a4:	ldr	x1, [x20, #24]
 1a8:	mov	x2, x23
 1ac:	ldr	x4, [x0]
 1b0:	ldr	x4, [x4, #32]
 1b4:	mov	x16, x4
 1b8:	ldp	x19, x20, [sp, #16]
 1bc:	ldp	x21, x22, [sp, #32]
 1c0:	ldp	x23, x24, [sp, #48]
 1c4:	ldp	x29, x30, [sp], #64
 1c8:	br	x16
 1cc:	mov	w0, #0x1                   	// #1
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldp	x21, x22, [sp, #32]
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret
 1e0:	str	xzr, [x23]
 1e4:	mov	w0, #0x1                   	// #1
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	ldp	x21, x22, [sp, #32]
 1f0:	ldp	x23, x24, [sp, #48]
 1f4:	ldp	x29, x30, [sp], #64
 1f8:	ret
 1fc:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
 200:	ldr	x0, [x0]
 204:	ldr	x0, [x0, #8]
 208:	cmp	x21, x0
 20c:	b.eq	e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>  // b.none
 210:	ldr	x0, [x20]
 214:	ldur	x0, [x0, #-8]
 218:	ldr	x0, [x0, #8]
 21c:	cmp	x21, x0
 220:	b.eq	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>  // b.none
 224:	mov	w0, #0x0                   	// #0
 228:	ldp	x19, x20, [sp, #16]
 22c:	ldp	x21, x22, [sp, #32]
 230:	ldp	x23, x24, [sp, #48]
 234:	ldp	x29, x30, [sp], #64
 238:	ret
 23c:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 240:	mov	w0, #0x1                   	// #1
 244:	add	x1, x1, #0x0
 248:	str	x1, [x23]
 24c:	ldp	x23, x24, [sp, #48]
 250:	b	54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
 254:	ldr	x0, [x20]
 258:	ldur	x0, [x0, #-8]
 25c:	ldr	x1, [x0, #8]
 260:	cmp	x21, x1
 264:	b.ne	140 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x140>  // b.any
 268:	b	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>
 26c:	mov	w3, w22
 270:	mov	x2, x23
 274:	mov	x1, x20
 278:	mov	x0, x19
 27c:	b	1b4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>

pmem_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #32]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	ldr	x1, [x1, #32]
  24:	mov	w22, w3
  28:	ldr	x0, [x0, #8]
  2c:	ldr	x1, [x1, #8]
  30:	cmp	x0, x1
  34:	b.eq	60 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x60>  // b.none
  38:	ldrb	w2, [x0]
  3c:	cmp	w2, #0x2a
  40:	b.eq	4c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x4c>  // b.none
  44:	bl	0 <strcmp>
  48:	cbz	w0, 60 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x60>
  4c:	mov	w0, #0x0                   	// #0
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret
  60:	ldr	x0, [x20, #24]
  64:	add	w3, w22, #0x2
  68:	mov	x2, x21
  6c:	ldr	x1, [x19, #24]
  70:	ldr	x4, [x0]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #48
  80:	ldr	x4, [x4, #32]
  84:	mov	x16, x4
  88:	br	x16

pointer_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	w3, #0x1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w19, w3
  14:	mov	x20, x1
  18:	str	x21, [sp, #32]
  1c:	ldr	x21, [x0, #24]
  20:	b.ls	4c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x4c>  // b.plast
  24:	ldr	x0, [x21]
  28:	add	w3, w19, #0x2
  2c:	ldr	x1, [x20, #24]
  30:	ldp	x19, x20, [sp, #16]
  34:	ldr	x4, [x0, #32]
  38:	mov	x0, x21
  3c:	ldr	x21, [sp, #32]
  40:	mov	x16, x4
  44:	ldp	x29, x30, [sp], #64
  48:	br	x16
  4c:	adrp	x1, 0 <_ZTIv>
  50:	ldr	x0, [x21, #8]
  54:	ldr	x1, [x1]
  58:	ldr	x1, [x1, #8]
  5c:	cmp	x0, x1
  60:	b.eq	80 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x80>  // b.none
  64:	ldrb	w3, [x0]
  68:	cmp	w3, #0x2a
  6c:	b.eq	24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>  // b.none
  70:	str	x2, [sp, #56]
  74:	bl	0 <strcmp>
  78:	ldr	x2, [sp, #56]
  7c:	cbnz	w0, 24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>
  80:	ldr	x0, [x20, #24]
  84:	ldr	x1, [x0]
  88:	ldr	x1, [x1, #24]
  8c:	blr	x1
  90:	and	w0, w0, #0xff
  94:	eor	w0, w0, #0x1
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #64
  a4:	ret

pure.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_pure_virtual:

0000000000000000 <__cxa_pure_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_pure_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1b                  	// #27
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_deleted_virtual:

0000000000000000 <__cxa_deleted_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_deleted_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1e                  	// #30
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

si_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x18                  	// #24
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x2
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	b.eq	3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x3c>  // b.none
  1c:	ldr	x0, [x19, #16]
  20:	mov	x1, x20
  24:	ldp	x19, x20, [sp, #16]
  28:	ldr	x5, [x0]
  2c:	ldr	x5, [x5, #64]
  30:	ldp	x29, x30, [sp], #64
  34:	mov	x16, x5
  38:	br	x16
  3c:	ldr	x1, [x3, #8]
  40:	ldr	x0, [x0, #8]
  44:	cmp	x0, x1
  48:	b.eq	70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x70>  // b.none
  4c:	ldrb	w5, [x0]
  50:	cmp	w5, #0x2a
  54:	b.eq	1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c>  // b.none
  58:	stp	x2, x3, [sp, #40]
  5c:	str	x4, [sp, #56]
  60:	bl	0 <strcmp>
  64:	ldp	x2, x3, [sp, #40]
  68:	ldr	x4, [sp, #56]
  6c:	cbnz	w0, 1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c>
  70:	mov	w0, #0x6                   	// #6
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x29, x30, [sp], #64
  7c:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x3
  10:	mov	x21, x1
  14:	stp	x25, x26, [sp, #64]
  18:	mov	w26, w2
  1c:	ldr	x25, [x0, #8]
  20:	stp	x19, x20, [sp, #16]
  24:	mov	x19, x4
  28:	ldr	x3, [x3, #8]
  2c:	stp	x23, x24, [sp, #48]
  30:	mov	x20, x7
  34:	mov	x23, x6
  38:	cmp	x25, x3
  3c:	b.eq	6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>  // b.none
  40:	stp	x27, x28, [sp, #80]
  44:	mov	x24, x5
  48:	mov	x27, x0
  4c:	ldrb	w28, [x25]
  50:	cmp	w28, #0x2a
  54:	b.eq	a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>  // b.none
  58:	mov	x1, x3
  5c:	mov	x0, x25
  60:	bl	0 <strcmp>
  64:	cbnz	w0, a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
  68:	ldp	x27, x28, [sp, #80]
  6c:	str	x19, [x20]
  70:	str	w26, [x20, #8]
  74:	tbnz	x21, #63, f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
  78:	add	x1, x19, x21
  7c:	mov	w2, #0x6                   	// #6
  80:	cmp	x23, x1
  84:	mov	w0, #0x0                   	// #0
  88:	csinc	w2, w2, wzr, eq  // eq = none
  8c:	str	w2, [x20, #16]
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x21, x22, [sp, #32]
  98:	ldp	x23, x24, [sp, #48]
  9c:	ldp	x25, x26, [sp, #64]
  a0:	ldp	x29, x30, [sp], #96
  a4:	ret
  a8:	cmp	x19, x23
  ac:	b.eq	110 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>  // b.none
  b0:	ldr	x0, [x27, #16]
  b4:	mov	x7, x20
  b8:	mov	x6, x23
  bc:	mov	x5, x24
  c0:	mov	x4, x19
  c4:	mov	x3, x22
  c8:	ldr	x8, [x0]
  cc:	mov	w2, w26
  d0:	mov	x1, x21
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x23, x24, [sp, #48]
  e0:	ldp	x25, x26, [sp, #64]
  e4:	ldp	x27, x28, [sp, #80]
  e8:	ldp	x29, x30, [sp], #96
  ec:	ldr	x8, [x8, #56]
  f0:	mov	x16, x8
  f4:	br	x16
  f8:	cmn	x21, #0x2
  fc:	mov	w0, #0x0                   	// #0
 100:	b.ne	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>  // b.any
 104:	mov	w1, #0x1                   	// #1
 108:	str	w1, [x20, #16]
 10c:	b	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
 110:	ldr	x1, [x24, #8]
 114:	cmp	x25, x1
 118:	b.eq	130 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>  // b.none
 11c:	cmp	w28, #0x2a
 120:	b.eq	b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>  // b.none
 124:	mov	x0, x25
 128:	bl	0 <strcmp>
 12c:	cbnz	w0, b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 130:	mov	w0, #0x0                   	// #0
 134:	ldp	x27, x28, [sp, #80]
 138:	str	w26, [x20, #12]
 13c:	b	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x0
  1c:	mov	x21, x3
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  24:	tst	w0, #0xff
  28:	b.ne	58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>  // b.any
  2c:	ldr	x0, [x22, #16]
  30:	mov	x3, x21
  34:	mov	x2, x20
  38:	mov	x1, x19
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x4, [x0]
  44:	ldp	x21, x22, [sp, #32]
  48:	ldp	x29, x30, [sp], #48
  4c:	ldr	x4, [x4, #48]
  50:	mov	x16, x4
  54:	br	x16
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret

tinfo.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9type_infoD2Ev:

0000000000000000 <_ZNSt9type_infoD1Ev>:
   0:	ret

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

0000000000000000 <_ZNKSt9type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

0000000000000000 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNSt9type_infoD0Ev:

0000000000000000 <_ZNSt9type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

0000000000000000 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   0:	ldr	x2, [x0, #8]
   4:	ldr	x1, [x1, #8]
   8:	cmp	x2, x1
   c:	b.eq	44 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x44>  // b.none
  10:	ldrb	w3, [x2]
  14:	mov	w0, #0x0                   	// #0
  18:	cmp	w3, #0x2a
  1c:	b.eq	40 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x40>  // b.none
  20:	stp	x29, x30, [sp, #-16]!
  24:	mov	x0, x2
  28:	mov	x29, sp
  2c:	bl	0 <strcmp>
  30:	cmp	w0, #0x0
  34:	cset	w0, eq  // eq = none
  38:	ldp	x29, x30, [sp], #16
  3c:	ret
  40:	ret
  44:	mov	w0, #0x1                   	// #1
  48:	ret

tinfo2.o:     file format elf64-littleaarch64


vec.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals_fast>
  14:	ldr	w2, [x0, #8]
  18:	ldr	x1, [x0]
  1c:	add	w2, w2, #0x1
  20:	str	x1, [x19]
  24:	ldr	x19, [sp, #16]
  28:	ldr	w3, [x1, #40]
  2c:	ldr	x4, [x1, #32]
  30:	sub	w3, w3, #0x1
  34:	str	w3, [x1, #40]
  38:	str	x4, [x0]
  3c:	str	w2, [x0, #8]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>:
   0:	cbnz	x1, 10 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x10>
   4:	mov	x0, #0x0                   	// #0
   8:	add	x0, x0, x2
   c:	ret
  10:	umulh	x3, x0, x1
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	cbnz	x3, 38 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x38>
  20:	mul	x0, x1, x0
  24:	cmn	x0, x2
  28:	b.cs	64 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x64>  // b.hs, b.nlast
  2c:	add	x0, x0, x2
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	x0, #0x8                   	// #8
  3c:	bl	0 <__cxa_allocate_exception>
  40:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  44:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  48:	adrp	x1, 0 <_ZTISt9bad_alloc>
  4c:	ldr	x3, [x3]
  50:	ldr	x2, [x2]
  54:	add	x3, x3, #0x10
  58:	ldr	x1, [x1]
  5c:	str	x3, [x0]
  60:	bl	0 <__cxa_throw>
  64:	mov	x0, #0x8                   	// #8
  68:	bl	0 <__cxa_allocate_exception>
  6c:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  70:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  74:	adrp	x1, 0 <_ZTISt9bad_alloc>
  78:	ldr	x3, [x3]
  7c:	ldr	x2, [x2]
  80:	add	x3, x3, #0x10
  84:	ldr	x1, [x1]
  88:	str	x3, [x0]
  8c:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_vec_cleanup:

0000000000000000 <__cxa_vec_cleanup>:
   0:	cbz	x3, 4c <__cxa_vec_cleanup+0x4c>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	madd	x19, x1, x2, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x2
  20:	mov	x21, x3
  24:	cbz	x20, 3c <__cxa_vec_cleanup+0x3c>
  28:	sub	x19, x19, x22
  2c:	mov	x0, x19
  30:	blr	x21
  34:	sub	x20, x20, #0x1
  38:	cbnz	x20, 28 <__cxa_vec_cleanup+0x28>
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldp	x21, x22, [sp, #32]
  44:	ldp	x29, x30, [sp], #48
  48:	ret
  4c:	ret
  50:	bl	0 <__cxa_begin_catch>
  54:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_vec_ctor:

0000000000000000 <__cxa_vec_ctor>:
   0:	cbz	x3, 70 <__cxa_vec_ctor+0x70>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x1
  14:	cbz	x1, 64 <__cxa_vec_ctor+0x64>
  18:	mov	x21, x3
  1c:	stp	x19, x20, [sp, #16]
  20:	mov	x20, x0
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x24, x0
  2c:	mov	x23, x2
  30:	str	x25, [sp, #64]
  34:	mov	x25, x4
  38:	mov	x19, #0x0                   	// #0
  3c:	nop
  40:	mov	x0, x20
  44:	blr	x21
  48:	add	x19, x19, #0x1
  4c:	add	x20, x20, x23
  50:	cmp	x22, x19
  54:	b.ne	40 <__cxa_vec_ctor+0x40>  // b.any
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x23, x24, [sp, #48]
  60:	ldr	x25, [sp, #64]
  64:	ldp	x21, x22, [sp, #32]
  68:	ldp	x29, x30, [sp], #96
  6c:	ret
  70:	ret
  74:	bl	0 <__cxa_begin_catch>
  78:	add	x0, sp, #0x58
  7c:	bl	0 <__cxa_vec_ctor>
  80:	mov	x0, x24
  84:	mov	x3, x25
  88:	mov	x2, x23
  8c:	mov	x1, x19
  90:	bl	0 <__cxa_vec_ctor>
  94:	ldr	x0, [sp, #88]
  98:	add	x0, x0, #0x50
  9c:	bl	0 <__cxa_begin_catch>
  a0:	bl	0 <__cxa_rethrow>
  a4:	mov	x19, x0
  a8:	bl	0 <__cxa_end_catch>
  ac:	mov	x0, x19
  b0:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_new2:

0000000000000000 <__cxa_vec_new2>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x5
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x1
  1c:	mov	x21, x0
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x24, x3
  28:	mov	x23, x6
  2c:	str	x25, [sp, #64]
  30:	mov	x25, x4
  34:	bl	0 <__cxa_vec_new2>
  38:	blr	x19
  3c:	mov	x19, x0
  40:	cbz	x0, 60 <__cxa_vec_new2+0x60>
  44:	cbnz	x20, 7c <__cxa_vec_new2+0x7c>
  48:	mov	x4, x25
  4c:	mov	x3, x24
  50:	mov	x2, x22
  54:	mov	x1, x21
  58:	mov	x0, x19
  5c:	bl	0 <__cxa_vec_new2>
  60:	mov	x0, x19
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldp	x23, x24, [sp, #48]
  70:	ldr	x25, [sp, #64]
  74:	ldp	x29, x30, [sp], #96
  78:	ret
  7c:	add	x19, x0, x20
  80:	stur	x21, [x19, #-8]
  84:	b	48 <__cxa_vec_new2+0x48>
  88:	bl	0 <__cxa_begin_catch>
  8c:	add	x0, sp, #0x58
  90:	bl	0 <__cxa_vec_new2>
  94:	cbz	x23, a0 <__cxa_vec_new2+0xa0>
  98:	sub	x0, x19, x20
  9c:	blr	x23
  a0:	ldr	x0, [sp, #88]
  a4:	add	x0, x0, #0x50
  a8:	bl	0 <__cxa_begin_catch>
  ac:	bl	0 <__cxa_rethrow>
  b0:	ldr	x1, [sp, #88]
  b4:	mov	x19, x0
  b8:	add	x0, x1, #0x50
  bc:	bl	0 <__cxa_begin_catch>
  c0:	bl	0 <__cxa_end_catch>
  c4:	mov	x0, x19
  c8:	bl	0 <_Unwind_Resume>
  cc:	mov	x19, x0
  d0:	b	c0 <__cxa_vec_new2+0xc0>

Disassembly of section .text.__cxa_vec_new:

0000000000000000 <__cxa_vec_new>:
   0:	adrp	x6, 0 <_ZdaPv>
   4:	adrp	x5, 0 <_Znam>
   8:	ldr	x6, [x6]
   c:	ldr	x5, [x5]
  10:	b	0 <__cxa_vec_new>

Disassembly of section .text.__cxa_vec_new3:

0000000000000000 <__cxa_vec_new3>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x5
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x1
  1c:	mov	x21, x0
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x3
  28:	mov	x24, x6
  2c:	stp	x25, x26, [sp, #64]
  30:	mov	x25, x4
  34:	bl	0 <__cxa_vec_new3>
  38:	mov	x26, x0
  3c:	blr	x19
  40:	mov	x19, x0
  44:	cbz	x0, 64 <__cxa_vec_new3+0x64>
  48:	cbnz	x20, 80 <__cxa_vec_new3+0x80>
  4c:	mov	x4, x25
  50:	mov	x3, x23
  54:	mov	x2, x22
  58:	mov	x1, x21
  5c:	mov	x0, x19
  60:	bl	0 <__cxa_vec_new3>
  64:	mov	x0, x19
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldp	x23, x24, [sp, #48]
  74:	ldp	x25, x26, [sp, #64]
  78:	ldp	x29, x30, [sp], #96
  7c:	ret
  80:	add	x19, x0, x20
  84:	stur	x21, [x19, #-8]
  88:	b	4c <__cxa_vec_new3+0x4c>
  8c:	bl	0 <__cxa_begin_catch>
  90:	add	x0, sp, #0x58
  94:	bl	0 <__cxa_vec_new3>
  98:	cbz	x24, a8 <__cxa_vec_new3+0xa8>
  9c:	mov	x1, x26
  a0:	sub	x0, x19, x20
  a4:	blr	x24
  a8:	ldr	x0, [sp, #88]
  ac:	add	x0, x0, #0x50
  b0:	bl	0 <__cxa_begin_catch>
  b4:	bl	0 <__cxa_rethrow>
  b8:	ldr	x1, [sp, #88]
  bc:	mov	x19, x0
  c0:	add	x0, x1, #0x50
  c4:	bl	0 <__cxa_begin_catch>
  c8:	bl	0 <__cxa_end_catch>
  cc:	mov	x0, x19
  d0:	bl	0 <_Unwind_Resume>
  d4:	mov	x19, x0
  d8:	b	c8 <__cxa_vec_new3+0xc8>

Disassembly of section .text.__cxa_vec_cctor:

0000000000000000 <__cxa_vec_cctor>:
   0:	cbz	x4, 78 <__cxa_vec_cctor+0x78>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x23, x24, [sp, #48]
  10:	mov	x24, x2
  14:	cbz	x2, 6c <__cxa_vec_cctor+0x6c>
  18:	mov	x23, x4
  1c:	stp	x19, x20, [sp, #16]
  20:	mov	x19, x1
  24:	stp	x21, x22, [sp, #32]
  28:	mov	x22, x3
  2c:	mov	x21, x0
  30:	stp	x25, x26, [sp, #64]
  34:	mov	x25, x0
  38:	mov	x26, x5
  3c:	mov	x20, #0x0                   	// #0
  40:	mov	x1, x19
  44:	mov	x0, x21
  48:	blr	x23
  4c:	add	x20, x20, #0x1
  50:	add	x19, x19, x22
  54:	cmp	x24, x20
  58:	add	x21, x21, x22
  5c:	b.ne	40 <__cxa_vec_cctor+0x40>  // b.any
  60:	ldp	x19, x20, [sp, #16]
  64:	ldp	x21, x22, [sp, #32]
  68:	ldp	x25, x26, [sp, #64]
  6c:	ldp	x23, x24, [sp, #48]
  70:	ldp	x29, x30, [sp], #96
  74:	ret
  78:	ret
  7c:	bl	0 <__cxa_begin_catch>
  80:	add	x0, sp, #0x58
  84:	bl	0 <__cxa_vec_cctor>
  88:	mov	x0, x25
  8c:	mov	x3, x26
  90:	mov	x2, x22
  94:	mov	x1, x20
  98:	bl	0 <__cxa_vec_cctor>
  9c:	ldr	x0, [sp, #88]
  a0:	add	x0, x0, #0x50
  a4:	bl	0 <__cxa_begin_catch>
  a8:	bl	0 <__cxa_rethrow>
  ac:	mov	x19, x0
  b0:	bl	0 <__cxa_end_catch>
  b4:	mov	x0, x19
  b8:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_dtor:

0000000000000000 <__cxa_vec_dtor>:
   0:	cbz	x3, 5c <__cxa_vec_dtor+0x5c>
   4:	stp	x29, x30, [sp, #-80]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	madd	x20, x1, x2, x0
  14:	sub	x19, x1, #0x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x2
  20:	mov	x21, x3
  24:	str	x23, [sp, #48]
  28:	mov	x23, x0
  2c:	b	40 <__cxa_vec_dtor+0x40>
  30:	sub	x20, x20, x22
  34:	mov	x0, x20
  38:	blr	x21
  3c:	sub	x19, x19, #0x1
  40:	cmn	x19, #0x1
  44:	b.ne	30 <__cxa_vec_dtor+0x30>  // b.any
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldr	x23, [sp, #48]
  54:	ldp	x29, x30, [sp], #80
  58:	ret
  5c:	ret
  60:	bl	0 <__cxa_begin_catch>
  64:	add	x0, sp, #0x48
  68:	bl	0 <__cxa_vec_dtor>
  6c:	mov	x0, x23
  70:	mov	x3, x21
  74:	mov	x2, x22
  78:	mov	x1, x19
  7c:	bl	0 <__cxa_vec_dtor>
  80:	ldr	x0, [sp, #72]
  84:	add	x0, x0, #0x50
  88:	bl	0 <__cxa_begin_catch>
  8c:	bl	0 <__cxa_rethrow>
  90:	mov	x19, x0
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_delete2:

0000000000000000 <__cxa_vec_delete2>:
   0:	cbz	x0, 5c <__cxa_vec_delete2+0x5c>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x5, x0
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x2
  18:	mov	x20, x4
  1c:	cbnz	x2, 34 <__cxa_vec_delete2+0x34>
  20:	mov	x0, x5
  24:	blr	x20
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	mov	x2, x1
  38:	sub	x19, x0, x19
  3c:	ldur	x1, [x0, #-8]
  40:	bl	0 <__cxa_vec_delete2>
  44:	mov	x5, x19
  48:	mov	x0, x5
  4c:	blr	x20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #48
  58:	ret
  5c:	ret
  60:	bl	0 <__cxa_begin_catch>
  64:	add	x0, sp, #0x28
  68:	bl	0 <__cxa_vec_delete2>
  6c:	mov	x0, x19
  70:	blr	x20
  74:	ldr	x0, [sp, #40]
  78:	add	x0, x0, #0x50
  7c:	bl	0 <__cxa_begin_catch>
  80:	bl	0 <__cxa_rethrow>
  84:	ldr	x1, [sp, #40]
  88:	mov	x19, x0
  8c:	add	x0, x1, #0x50
  90:	bl	0 <__cxa_begin_catch>
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>
  a0:	mov	x19, x0
  a4:	b	94 <__cxa_vec_delete2+0x94>

Disassembly of section .text.__cxa_vec_delete:

0000000000000000 <__cxa_vec_delete>:
   0:	adrp	x4, 0 <_ZdaPv>
   4:	ldr	x4, [x4]
   8:	b	0 <__cxa_vec_delete>

Disassembly of section .text.__cxa_vec_delete3:

0000000000000000 <__cxa_vec_delete3>:
   0:	cbz	x0, 74 <__cxa_vec_delete3+0x74>
   4:	stp	x29, x30, [sp, #-64]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	mov	x19, x0
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x4
  20:	cbnz	x2, 40 <__cxa_vec_delete3+0x40>
  24:	mov	x1, x20
  28:	mov	x0, x19
  2c:	blr	x21
  30:	ldp	x19, x20, [sp, #16]
  34:	ldr	x21, [sp, #32]
  38:	ldp	x29, x30, [sp], #64
  3c:	ret
  40:	mov	x6, x1
  44:	mov	x2, x1
  48:	ldur	x1, [x0, #-8]
  4c:	sub	x19, x0, x20
  50:	madd	x20, x1, x6, x20
  54:	bl	0 <__cxa_vec_delete3>
  58:	mov	x1, x20
  5c:	mov	x0, x19
  60:	blr	x21
  64:	ldp	x19, x20, [sp, #16]
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x29, x30, [sp], #64
  70:	ret
  74:	ret
  78:	bl	0 <__cxa_begin_catch>
  7c:	add	x0, sp, #0x38
  80:	bl	0 <__cxa_vec_delete3>
  84:	mov	x1, x20
  88:	mov	x0, x19
  8c:	blr	x21
  90:	ldr	x0, [sp, #56]
  94:	add	x0, x0, #0x50
  98:	bl	0 <__cxa_begin_catch>
  9c:	bl	0 <__cxa_rethrow>
  a0:	ldr	x1, [sp, #56]
  a4:	mov	x19, x0
  a8:	add	x0, x1, #0x50
  ac:	bl	0 <__cxa_begin_catch>
  b0:	bl	0 <__cxa_end_catch>
  b4:	mov	x0, x19
  b8:	bl	0 <_Unwind_Resume>
  bc:	mov	x19, x0
  c0:	b	b0 <__cxa_vec_delete3+0xb0>

vmi_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	cmp	x2, x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x3
  24:	stp	x25, x26, [sp, #64]
  28:	mov	x26, x2
  2c:	mov	x25, x4
  30:	b.eq	e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xe8>  // b.none
  34:	ldr	w0, [x19, #20]
  38:	mov	w20, w0
  3c:	cbz	w0, a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
  40:	mov	x1, #0x8                   	// #8
  44:	add	x0, x1, w0, uxtw #4
  48:	add	x19, x19, x0
  4c:	nop
  50:	ldr	x0, [x19, #8]
  54:	mov	x4, x25
  58:	mov	x3, x23
  5c:	mov	x1, x22
  60:	and	w24, w0, #0x1
  64:	tbz	w0, #1, 9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x9c>
  68:	asr	x2, x0, #8
  6c:	tbz	w0, #0, 80 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x80>
  70:	cmn	x22, #0x3
  74:	b.eq	9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x9c>  // b.none
  78:	ldr	x0, [x26]
  7c:	ldr	x2, [x0, x2]
  80:	add	x2, x26, x2
  84:	ldr	x0, [x19]
  88:	ldr	x5, [x0]
  8c:	ldr	x5, [x5, #64]
  90:	blr	x5
  94:	cmp	w0, #0x3
  98:	b.gt	c8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc8>
  9c:	sub	x19, x19, #0x10
  a0:	subs	x20, x20, #0x1
  a4:	b.ne	50 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>  // b.any
  a8:	mov	w21, #0x1                   	// #1
  ac:	mov	w0, w21
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x23, x24, [sp, #48]
  bc:	ldp	x25, x26, [sp, #64]
  c0:	ldp	x29, x30, [sp], #80
  c4:	ret
  c8:	orr	w21, w0, w24
  cc:	mov	w0, w21
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x21, x22, [sp, #32]
  d8:	ldp	x23, x24, [sp, #48]
  dc:	ldp	x25, x26, [sp, #64]
  e0:	ldp	x29, x30, [sp], #80
  e4:	ret
  e8:	ldr	x0, [x0, #8]
  ec:	mov	w21, #0x6                   	// #6
  f0:	ldr	x1, [x3, #8]
  f4:	cmp	x0, x1
  f8:	b.eq	ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xac>  // b.none
  fc:	ldrb	w2, [x0]
 100:	cmp	w2, #0x2a
 104:	b.eq	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>  // b.none
 108:	bl	0 <strcmp>
 10c:	cbz	w0, ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xac>
 110:	b	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x7
  10:	ldr	w7, [x7, #20]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w20, w2
  1c:	mov	x22, x3
  20:	stp	x25, x26, [sp, #64]
  24:	mov	x26, x4
  28:	mov	x25, x6
  2c:	stp	x27, x28, [sp, #80]
  30:	mov	x27, x1
  34:	mov	x28, x5
  38:	str	x0, [sp, #120]
  3c:	tbz	w7, #4, 48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
  40:	ldr	w0, [x0, #16]
  44:	str	w0, [x19, #20]
  48:	ldr	x0, [sp, #120]
  4c:	cmp	x26, x25
  50:	ldr	x21, [x0, #8]
  54:	b.eq	214 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x214>  // b.none
  58:	ldr	x1, [x22, #8]
  5c:	cmp	x1, x21
  60:	b.eq	248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>  // b.none
  64:	ldrb	w0, [x21]
  68:	cmp	w0, #0x2a
  6c:	b.eq	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.none
  70:	mov	x0, x21
  74:	bl	0 <strcmp>
  78:	cbz	w0, 248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
  7c:	cmp	x27, #0x0
  80:	sub	x12, x25, x27
  84:	mov	w0, #0x1                   	// #1
  88:	stp	x23, x24, [sp, #48]
  8c:	csel	x24, x12, xzr, ge  // ge = tcont
  90:	str	wzr, [sp, #108]
  94:	stp	w0, wzr, [sp, #128]
  98:	add	x0, sp, #0x98
  9c:	str	x0, [sp, #112]
  a0:	ldr	x1, [sp, #120]
  a4:	ldr	w8, [x1, #20]
  a8:	mov	w23, w8
  ac:	cbz	w8, 29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>
  b0:	mov	x0, #0x8                   	// #8
  b4:	add	x8, x0, w8, uxtw #4
  b8:	add	x21, x1, x8
  bc:	nop
  c0:	ldr	x0, [x21, #8]
  c4:	stp	xzr, xzr, [sp, #152]
  c8:	ldr	w1, [x19, #20]
  cc:	stp	wzr, w1, [sp, #168]
  d0:	mov	w2, w20
  d4:	asr	x4, x0, #8
  d8:	tbz	w0, #0, e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe8>
  dc:	ldr	x3, [x26]
  e0:	orr	w2, w20, #0x1
  e4:	ldr	x4, [x3, x4]
  e8:	add	x4, x26, x4
  ec:	cbz	x24, 104 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x104>
  f0:	cmp	x24, x4
  f4:	ldr	w5, [sp, #128]
  f8:	cset	w3, cc  // cc = lo, ul, last
  fc:	cmp	w3, w5
 100:	b.eq	2b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2b4>  // b.none
 104:	tbnz	w0, #1, 114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x114>
 108:	cmn	x27, #0x2
 10c:	b.eq	288 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x288>  // b.none
 110:	and	w2, w2, #0xfffffffd
 114:	ldr	x0, [x21]
 118:	mov	x5, x28
 11c:	ldr	x7, [sp, #112]
 120:	mov	x3, x22
 124:	ldr	x13, [x0]
 128:	mov	x1, x27
 12c:	mov	x6, x25
 130:	ldr	x13, [x13, #56]
 134:	blr	x13
 138:	and	w0, w0, #0xff
 13c:	ldp	w1, w5, [sp, #164]
 140:	ldr	w3, [x19, #12]
 144:	orr	w3, w3, w1
 148:	str	w3, [x19, #12]
 14c:	and	w1, w5, #0xfffffffb
 150:	cmp	w1, #0x2
 154:	ldr	x1, [sp, #152]
 158:	b.eq	50c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x50c>  // b.none
 15c:	ldr	w4, [sp, #108]
 160:	ldr	x2, [x19]
 164:	cbnz	w4, 2c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 168:	cbz	x2, 3d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d4>
 16c:	cmp	x2, x1
 170:	b.eq	3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>  // b.none
 174:	cmp	x1, #0x0
 178:	ccmp	w0, #0x0, #0x0, eq  // eq = none
 17c:	b.eq	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>  // b.none
 180:	ldr	w7, [x19, #16]
 184:	cmp	w3, #0x3
 188:	b.le	2d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d4>
 18c:	tbz	w3, #0, 198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 190:	ldr	w0, [x19, #20]
 194:	tbnz	w0, #1, 2d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d4>
 198:	cmp	w7, #0x0
 19c:	csinc	w7, w7, wzr, ne  // ne = any
 1a0:	cmp	w5, #0x0
 1a4:	csinc	w5, w5, wzr, ne  // ne = any
 1a8:	mov	w13, w7
 1ac:	mov	w14, w5
 1b0:	eor	w0, w5, w13
 1b4:	cmp	w0, #0x3
 1b8:	b.le	398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x398>
 1bc:	cmp	w5, #0x3
 1c0:	b.le	460 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x460>
 1c4:	ldr	x1, [sp, #152]
 1c8:	and	w13, w5, #0x2
 1cc:	ldr	w0, [sp, #160]
 1d0:	str	x1, [x19]
 1d4:	str	w0, [x19, #8]
 1d8:	str	wzr, [sp, #108]
 1dc:	str	w5, [x19, #16]
 1e0:	cbnz	w13, 540 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x540>
 1e4:	tbz	w5, #0, 540 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x540>
 1e8:	ldr	w3, [x19, #12]
 1ec:	cmp	w3, #0x4
 1f0:	b.ne	290 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x290>  // b.any
 1f4:	ldp	x23, x24, [sp, #48]
 1f8:	ldrb	w0, [sp, #108]
 1fc:	ldp	x19, x20, [sp, #16]
 200:	ldp	x21, x22, [sp, #32]
 204:	ldp	x25, x26, [sp, #64]
 208:	ldp	x27, x28, [sp, #80]
 20c:	ldp	x29, x30, [sp], #176
 210:	ret
 214:	ldr	x1, [x28, #8]
 218:	cmp	x1, x21
 21c:	b.eq	4e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e8>  // b.none
 220:	ldrb	w0, [x21]
 224:	cmp	w0, #0x2a
 228:	b.eq	4c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c0>  // b.none
 22c:	mov	x0, x21
 230:	bl	0 <strcmp>
 234:	cbz	w0, 4e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e8>
 238:	ldr	x1, [x22, #8]
 23c:	cmp	x21, x1
 240:	b.ne	70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>  // b.any
 244:	nop
 248:	str	x26, [x19]
 24c:	str	w20, [x19, #8]
 250:	tbnz	x27, #63, 4d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4d0>
 254:	add	x10, x26, x27
 258:	mov	w0, #0x6                   	// #6
 25c:	cmp	x25, x10
 260:	str	wzr, [sp, #108]
 264:	csinc	w0, w0, wzr, eq  // eq = none
 268:	str	w0, [x19, #16]
 26c:	ldrb	w0, [sp, #108]
 270:	ldp	x19, x20, [sp, #16]
 274:	ldp	x21, x22, [sp, #32]
 278:	ldp	x25, x26, [sp, #64]
 27c:	ldp	x27, x28, [sp, #80]
 280:	ldp	x29, x30, [sp], #176
 284:	ret
 288:	tst	x1, #0x3
 28c:	b.ne	110 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>  // b.any
 290:	sub	x21, x21, #0x10
 294:	subs	x23, x23, #0x1
 298:	b.ne	c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc0>  // b.any
 29c:	ldp	w0, w1, [sp, #128]
 2a0:	and	w0, w0, w1
 2a4:	stp	wzr, w0, [sp, #128]
 2a8:	cbnz	w0, a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 2ac:	ldp	x23, x24, [sp, #48]
 2b0:	b	1f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	str	w0, [sp, #132]
 2bc:	b	290 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x290>
 2c0:	cbnz	x2, 16c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 2c4:	cbz	x1, 1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 2c8:	ldr	w7, [x19, #16]
 2cc:	cmp	w3, #0x3
 2d0:	b.gt	18c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 2d4:	cmp	w7, #0x0
 2d8:	mov	w13, w7
 2dc:	mov	w14, w5
 2e0:	b.le	404 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x404>
 2e4:	cmp	w5, #0x0
 2e8:	b.gt	1b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 2ec:	cmp	w7, #0x3
 2f0:	b.le	348 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 2f4:	tbz	w7, #0, 304 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x304>
 2f8:	ldr	x0, [sp, #120]
 2fc:	ldr	w0, [x0, #16]
 300:	tbnz	w0, #1, 348 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 304:	eor	w0, w7, #0x1
 308:	mov	w5, w7
 30c:	cmp	w0, #0x3
 310:	b.gt	340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x340>
 314:	ldr	w3, [x19, #12]
 318:	mov	w0, #0x1                   	// #1
 31c:	str	xzr, [x19]
 320:	str	w0, [x19, #16]
 324:	str	w0, [sp, #108]
 328:	b	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 32c:	mov	w13, #0x6                   	// #6
 330:	cmp	w5, #0x0
 334:	mov	w7, w13
 338:	b.gt	1b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 33c:	mov	w5, w13
 340:	and	w13, w13, #0x2
 344:	b	1dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 348:	ldr	x1, [sp, #152]
 34c:	tbz	x27, #63, 4a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a8>
 350:	cmn	x27, #0x2
 354:	b.eq	4b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>  // b.none
 358:	ldr	x5, [x22]
 35c:	stp	w7, w13, [sp, #136]
 360:	mov	x2, x1
 364:	mov	x4, x25
 368:	mov	x3, x28
 36c:	mov	x1, x27
 370:	ldr	x5, [x5, #64]
 374:	mov	x0, x22
 378:	blr	x5
 37c:	mov	w5, w0
 380:	ldp	w7, w13, [sp, #136]
 384:	mov	w14, w0
 388:	eor	w0, w5, w13
 38c:	cmp	w0, #0x3
 390:	b.gt	1bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 394:	nop
 398:	and	w13, w14, w13
 39c:	cmp	w13, #0x3
 3a0:	b.le	314 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 3a4:	mov	w0, #0x2                   	// #2
 3a8:	mov	w1, #0x1                   	// #1
 3ac:	str	w1, [sp, #108]
 3b0:	ldp	x23, x24, [sp, #48]
 3b4:	str	xzr, [x19]
 3b8:	str	w0, [x19, #16]
 3bc:	b	26c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x26c>
 3c0:	ldr	w0, [x19, #8]
 3c4:	ldr	w1, [sp, #160]
 3c8:	orr	w0, w0, w1
 3cc:	str	w0, [x19, #8]
 3d0:	b	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 3d4:	ldr	w2, [sp, #160]
 3d8:	cmp	x1, #0x0
 3dc:	str	x1, [x19]
 3e0:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 3e4:	str	w2, [x19, #8]
 3e8:	str	w0, [sp, #108]
 3ec:	b.eq	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>  // b.none
 3f0:	ldr	x0, [sp, #120]
 3f4:	ldr	w0, [x0, #16]
 3f8:	tbnz	w0, #0, 1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 3fc:	ldp	x23, x24, [sp, #48]
 400:	b	1f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 404:	cmp	w5, #0x3
 408:	b.le	41c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x41c>
 40c:	tbz	w5, #0, 450 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x450>
 410:	ldr	x0, [sp, #120]
 414:	ldr	w0, [x0, #16]
 418:	tbz	w0, #1, 450 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x450>
 41c:	tbnz	x27, #63, 46c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 420:	add	x2, x2, x27
 424:	cmp	x25, x2
 428:	b.eq	32c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32c>  // b.none
 42c:	cmp	w5, #0x0
 430:	b.gt	554 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x554>
 434:	add	x0, x1, x27
 438:	cmp	x25, x0
 43c:	b.eq	57c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x57c>  // b.none
 440:	mov	w5, #0x1                   	// #1
 444:	mov	w13, w5
 448:	eor	w0, w13, #0x1
 44c:	b	30c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30c>
 450:	eor	w0, w5, #0x1
 454:	cmp	w0, #0x3
 458:	b.le	318 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x318>
 45c:	b	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
 460:	and	w13, w7, #0x2
 464:	mov	w5, w7
 468:	b	1dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 46c:	str	w14, [sp, #136]
 470:	cmn	x27, #0x2
 474:	b.eq	54c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54c>  // b.none
 478:	ldr	x7, [x22]
 47c:	str	w5, [sp, #140]
 480:	mov	x4, x25
 484:	mov	x3, x28
 488:	mov	x1, x27
 48c:	mov	x0, x22
 490:	ldr	x7, [x7, #64]
 494:	blr	x7
 498:	mov	w7, w0
 49c:	ldp	w14, w5, [sp, #136]
 4a0:	mov	w13, w0
 4a4:	b	2e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e4>
 4a8:	add	x0, x1, x27
 4ac:	cmp	x25, x0
 4b0:	b.eq	568 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x568>  // b.none
 4b4:	mov	w5, w7
 4b8:	eor	w0, w13, #0x1
 4bc:	b	30c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30c>
 4c0:	ldr	x0, [x22, #8]
 4c4:	cmp	x21, x0
 4c8:	b.ne	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.any
 4cc:	b	248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 4d0:	str	wzr, [sp, #108]
 4d4:	cmn	x27, #0x2
 4d8:	b.ne	26c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x26c>  // b.any
 4dc:	mov	w0, #0x1                   	// #1
 4e0:	str	w0, [x19, #16]
 4e4:	b	26c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x26c>
 4e8:	str	w20, [x19, #12]
 4ec:	str	wzr, [sp, #108]
 4f0:	ldp	x19, x20, [sp, #16]
 4f4:	ldrb	w0, [sp, #108]
 4f8:	ldp	x21, x22, [sp, #32]
 4fc:	ldp	x25, x26, [sp, #64]
 500:	ldp	x27, x28, [sp, #80]
 504:	ldp	x29, x30, [sp], #176
 508:	ret
 50c:	str	w0, [sp, #108]
 510:	ldr	w0, [sp, #160]
 514:	ldp	x23, x24, [sp, #48]
 518:	str	x1, [x19]
 51c:	str	w0, [x19, #8]
 520:	str	w5, [x19, #16]
 524:	ldrb	w0, [sp, #108]
 528:	ldp	x19, x20, [sp, #16]
 52c:	ldp	x21, x22, [sp, #32]
 530:	ldp	x25, x26, [sp, #64]
 534:	ldp	x27, x28, [sp, #80]
 538:	ldp	x29, x30, [sp], #176
 53c:	ret
 540:	str	wzr, [sp, #108]
 544:	ldp	x23, x24, [sp, #48]
 548:	b	1f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 54c:	cmp	w5, #0x0
 550:	b.le	440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x440>
 554:	eor	w0, w5, #0x1
 558:	cmp	w0, #0x3
 55c:	b.le	318 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x318>
 560:	mov	w7, #0x1                   	// #1
 564:	b	1bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 568:	eor	w7, w7, #0x6
 56c:	cmp	w7, #0x3
 570:	b.gt	57c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x57c>
 574:	mov	w14, #0x6                   	// #6
 578:	b	398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x398>
 57c:	mov	w13, #0x2                   	// #2
 580:	mov	w5, #0x6                   	// #6
 584:	b	1cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1cc>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x1
  18:	stp	x25, x26, [sp, #64]
  1c:	stp	x27, x28, [sp, #80]
  20:	mov	x28, x2
  24:	mov	x27, x3
  28:	str	x0, [sp, #104]
  2c:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  30:	ands	w25, w0, #0xff
  34:	b.ne	138 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x138>  // b.any
  38:	ldr	w21, [x27, #12]
  3c:	tbnz	w21, #4, 214 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x214>
  40:	ldr	x1, [sp, #104]
  44:	ldr	w19, [x1, #20]
  48:	mov	w26, w19
  4c:	cbz	w19, 12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>
  50:	mov	x0, #0x8                   	// #8
  54:	stp	x23, x24, [sp, #48]
  58:	add	x19, x0, w19, uxtw #4
  5c:	add	x23, sp, #0x78
  60:	add	x19, x1, x19
  64:	and	w0, w21, #0x1
  68:	str	w0, [sp, #100]
  6c:	nop
  70:	ldr	x4, [x19, #8]
  74:	str	xzr, [sp, #120]
  78:	stp	wzr, w21, [sp, #128]
  7c:	str	xzr, [sp, #136]
  80:	and	w24, w4, #0x1
  84:	and	x20, x4, #0x2
  88:	tbnz	w4, #1, 94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x94>
  8c:	ldr	w0, [sp, #100]
  90:	cbz	w0, 11c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
  94:	mov	x2, #0x0                   	// #0
  98:	cbz	x28, b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb0>
  9c:	asr	x4, x4, #8
  a0:	cbz	w24, ac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
  a4:	ldr	x0, [x28]
  a8:	ldr	x4, [x0, x4]
  ac:	add	x2, x28, x4
  b0:	ldr	x0, [x19]
  b4:	mov	x3, x23
  b8:	mov	x1, x22
  bc:	ldr	x4, [x0]
  c0:	ldr	x4, [x4, #48]
  c4:	blr	x4
  c8:	ands	w25, w0, #0xff
  cc:	b.eq	11c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>  // b.none
  d0:	ldr	x0, [sp, #136]
  d4:	cmp	w24, #0x0
  d8:	ccmp	x0, #0x10, #0x0, ne  // ne = any
  dc:	b.eq	1f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f0>  // b.none
  e0:	ldr	w0, [sp, #128]
  e4:	cmp	x20, #0x0
  e8:	ccmp	w0, #0x3, #0x4, eq  // eq = none
  ec:	b.gt	188 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x188>
  f0:	ldr	x1, [x27, #16]
  f4:	cbz	x1, 154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
  f8:	ldr	x0, [x27]
  fc:	ldr	x2, [sp, #120]
 100:	cmp	x0, x2
 104:	b.ne	21c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x21c>  // b.any
 108:	cbz	x0, 194 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x194>
 10c:	ldr	w0, [x27, #8]
 110:	ldr	w1, [sp, #128]
 114:	orr	w0, w0, w1
 118:	str	w0, [x27, #8]
 11c:	sub	x19, x19, #0x10
 120:	subs	x26, x26, #0x1
 124:	b.ne	70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x70>  // b.any
 128:	ldp	x23, x24, [sp, #48]
 12c:	ldr	w0, [x27, #8]
 130:	cmp	w0, #0x0
 134:	cset	w25, ne  // ne = any
 138:	mov	w0, w25
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldp	x21, x22, [sp, #32]
 144:	ldp	x25, x26, [sp, #64]
 148:	ldp	x27, x28, [sp, #80]
 14c:	ldp	x29, x30, [sp], #144
 150:	ret
 154:	ldp	x0, x1, [x23]
 158:	stp	x0, x1, [x27]
 15c:	ldr	x0, [x23, #16]
 160:	str	x0, [x27, #16]
 164:	ldr	w0, [x27, #8]
 168:	cmp	w0, #0x3
 16c:	b.le	180 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x180>
 170:	tbz	w0, #1, 1fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1fc>
 174:	ldr	x0, [sp, #104]
 178:	ldr	w0, [x0, #16]
 17c:	tbnz	w0, #0, 11c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 180:	ldp	x23, x24, [sp, #48]
 184:	b	138 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x138>
 188:	and	w0, w0, #0xfffffffd
 18c:	str	w0, [sp, #128]
 190:	b	f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 194:	ldr	x0, [sp, #136]
 198:	cmp	x1, #0x10
 19c:	ccmp	x0, #0x10, #0x4, ne  // ne = any
 1a0:	b.eq	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>  // b.none
 1a4:	ldr	x0, [x0, #8]
 1a8:	ldr	x1, [x1, #8]
 1ac:	cmp	x0, x1
 1b0:	b.eq	10c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>  // b.none
 1b4:	ldrb	w2, [x0]
 1b8:	cmp	w2, #0x2a
 1bc:	b.eq	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>  // b.none
 1c0:	bl	0 <strcmp>
 1c4:	cbz	w0, 10c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 1c8:	mov	w0, #0x2                   	// #2
 1cc:	ldp	x23, x24, [sp, #48]
 1d0:	str	w0, [x27, #8]
 1d4:	mov	w0, w25
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	ldp	x21, x22, [sp, #32]
 1e0:	ldp	x25, x26, [sp, #64]
 1e4:	ldp	x27, x28, [sp, #80]
 1e8:	ldp	x29, x30, [sp], #144
 1ec:	ret
 1f0:	ldr	x0, [x19]
 1f4:	str	x0, [sp, #136]
 1f8:	b	e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 1fc:	tbz	w0, #0, 180 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x180>
 200:	ldr	x0, [sp, #104]
 204:	ldr	w0, [x0, #16]
 208:	tbnz	w0, #1, 11c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 20c:	ldp	x23, x24, [sp, #48]
 210:	b	138 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x138>
 214:	ldr	w21, [x19, #16]
 218:	b	40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40>
 21c:	mov	w0, #0x2                   	// #2
 220:	ldp	x23, x24, [sp, #48]
 224:	str	xzr, [x27]
 228:	str	w0, [x27, #8]
 22c:	b	138 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x138>

vterminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx27__verbose_terminate_handlerEv:

0000000000000000 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
   8:	mov	x29, sp
   c:	ldrb	w1, [x0]
  10:	cbnz	w1, f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>
  14:	mov	w1, #0x1                   	// #1
  18:	strb	w1, [x0]
  1c:	bl	0 <__cxa_current_exception_type>
  20:	cbz	x0, cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
  24:	stp	x19, x20, [sp, #16]
  28:	mov	w4, #0xffffffff            	// #-1
  2c:	add	x3, sp, #0x3c
  30:	ldr	x19, [x0, #8]
  34:	stp	x21, x22, [sp, #32]
  38:	adrp	x21, 0 <stderr>
  3c:	mov	x2, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	ldrb	w0, [x19]
  48:	str	w4, [sp, #60]
  4c:	cmp	w0, #0x2a
  50:	cinc	x19, x19, eq  // eq = none
  54:	mov	x0, x19
  58:	bl	0 <__cxa_demangle>
  5c:	mov	x20, x0
  60:	ldr	x22, [x21]
  64:	mov	x1, #0x1                   	// #1
  68:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  6c:	mov	x2, #0x30                  	// #48
  70:	add	x0, x0, #0x0
  74:	ldr	x3, [x22]
  78:	bl	0 <fwrite>
  7c:	ldr	w0, [sp, #60]
  80:	ldr	x1, [x22]
  84:	cbz	w0, c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc0>
  88:	mov	x0, x19
  8c:	bl	0 <fputs>
  90:	ldr	x3, [x21]
  94:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  98:	mov	x2, #0x2                   	// #2
  9c:	add	x0, x0, #0x0
  a0:	mov	x1, #0x1                   	// #1
  a4:	ldr	x3, [x3]
  a8:	bl	0 <fwrite>
  ac:	ldr	w0, [sp, #60]
  b0:	cbnz	w0, bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
  b4:	mov	x0, x20
  b8:	bl	0 <free>
  bc:	bl	0 <__cxa_rethrow>
  c0:	mov	x0, x20
  c4:	bl	0 <fputs>
  c8:	b	90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
  cc:	adrp	x3, 0 <stderr>
  d0:	mov	x2, #0x2d                  	// #45
  d4:	mov	x1, #0x1                   	// #1
  d8:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  dc:	ldr	x3, [x3]
  e0:	add	x0, x0, #0x0
  e4:	ldr	x3, [x3]
  e8:	bl	0 <fwrite>
  ec:	stp	x19, x20, [sp, #16]
  f0:	stp	x21, x22, [sp, #32]
  f4:	bl	0 <abort>
  f8:	adrp	x3, 0 <stderr>
  fc:	mov	x2, #0x1d                  	// #29
 100:	mov	x1, #0x1                   	// #1
 104:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 108:	ldr	x3, [x3]
 10c:	add	x0, x0, #0x0
 110:	stp	x19, x20, [sp, #16]
 114:	ldr	x3, [x3]
 118:	stp	x21, x22, [sp, #32]
 11c:	bl	0 <fwrite>
 120:	bl	0 <abort>
 124:	mov	x19, x1
 128:	cmp	x1, #0x1
 12c:	b.ne	188 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x188>  // b.any
 130:	bl	0 <__cxa_begin_catch>
 134:	ldr	x1, [x0]
 138:	ldr	x1, [x1, #16]
 13c:	blr	x1
 140:	mov	x20, x0
 144:	ldr	x3, [x21]
 148:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 14c:	mov	x1, x19
 150:	add	x0, x0, #0x0
 154:	mov	x2, #0xb                   	// #11
 158:	ldr	x3, [x3]
 15c:	bl	0 <fwrite>
 160:	ldr	x1, [x21]
 164:	mov	x0, x20
 168:	ldr	x1, [x1]
 16c:	bl	0 <fputs>
 170:	ldr	x21, [x21]
 174:	mov	w0, #0xa                   	// #10
 178:	ldr	x1, [x21]
 17c:	bl	0 <fputc>
 180:	bl	0 <__cxa_end_catch>
 184:	bl	0 <abort>
 188:	bl	0 <__cxa_begin_catch>
 18c:	bl	0 <__cxa_end_catch>
 190:	bl	0 <abort>
 194:	mov	x19, x0
 198:	bl	0 <__cxa_end_catch>
 19c:	mov	x0, x19
 1a0:	bl	0 <_Unwind_Resume>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <d_make_comp>:
       0:	sub	w5, w1, #0x1
       4:	mov	x4, x0
       8:	cmp	w5, #0x4f
       c:	b.ls	18 <d_make_comp+0x18>  // b.plast
      10:	mov	x0, #0x0                   	// #0
      14:	ret
      18:	adrp	x0, 0 <d_make_comp>
      1c:	add	x0, x0, #0x0
      20:	ldrb	w0, [x0, w5, uxtw]
      24:	adr	x5, 30 <d_make_comp+0x30>
      28:	add	x0, x5, w0, sxtb #2
      2c:	br	x0
      30:	cbz	x3, 10 <d_make_comp+0x10>
      34:	ldp	w0, w5, [x4, #40]
      38:	cmp	w0, w5
      3c:	b.ge	10 <d_make_comp+0x10>  // b.tcont
      40:	mov	w5, #0x18                  	// #24
      44:	add	w7, w0, #0x1
      48:	ldr	x6, [x4, #32]
      4c:	smull	x5, w0, w5
      50:	add	x0, x6, x5
      54:	str	wzr, [x0, #4]
      58:	str	w7, [x4, #40]
      5c:	str	w1, [x6, x5]
      60:	stp	x2, x3, [x0, #8]
      64:	ret
      68:	cbnz	x2, 34 <d_make_comp+0x34>
      6c:	mov	x0, #0x0                   	// #0
      70:	b	14 <d_make_comp+0x14>
      74:	cmp	x2, #0x0
      78:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      7c:	b.ne	34 <d_make_comp+0x34>  // b.any
      80:	mov	x0, #0x0                   	// #0
      84:	b	14 <d_make_comp+0x14>

0000000000000088 <d_ref_qualifier>:
      88:	ldr	x3, [x0, #24]
      8c:	mov	x2, x1
      90:	mov	w4, #0x4f                  	// #79
      94:	ldrb	w1, [x3]
      98:	cmp	w1, #0x52
      9c:	ccmp	w1, w4, #0x4, ne  // ne = any
      a0:	b.ne	cc <d_ref_qualifier+0x44>  // b.any
      a4:	ldr	w5, [x0, #72]
      a8:	cmp	w1, #0x52
      ac:	mov	w1, #0x20                  	// #32
      b0:	add	w4, w5, #0x3
      b4:	b.eq	d4 <d_ref_qualifier+0x4c>  // b.none
      b8:	add	x3, x3, #0x1
      bc:	str	x3, [x0, #24]
      c0:	str	w4, [x0, #72]
      c4:	mov	x3, #0x0                   	// #0
      c8:	b	0 <d_make_comp>
      cc:	mov	x0, x2
      d0:	ret
      d4:	add	w4, w5, #0x2
      d8:	add	x3, x3, #0x1
      dc:	str	x3, [x0, #24]
      e0:	mov	w1, #0x1f                  	// #31
      e4:	str	w4, [x0, #72]
      e8:	mov	x3, #0x0                   	// #0
      ec:	b	0 <d_make_comp>

00000000000000f0 <d_count_templates_scopes>:
      f0:	cbz	x1, 1d0 <d_count_templates_scopes+0xe0>
      f4:	stp	x29, x30, [sp, #-32]!
      f8:	mov	x29, sp
      fc:	stp	x19, x20, [sp, #16]
     100:	mov	x20, x0
     104:	mov	x19, x1
     108:	adrp	x0, 0 <d_make_comp>
     10c:	add	x0, x0, #0x0
     110:	ldr	w1, [x19]
     114:	sub	w1, w1, #0x1
     118:	cmp	w1, #0x4f
     11c:	b.ls	12c <d_count_templates_scopes+0x3c>  // b.plast
     120:	ldp	x19, x20, [sp, #16]
     124:	ldp	x29, x30, [sp], #32
     128:	ret
     12c:	ldrb	w1, [x0, w1, uxtw]
     130:	adr	x2, 13c <d_count_templates_scopes+0x4c>
     134:	add	x1, x2, w1, sxtb #2
     138:	br	x1
     13c:	ldr	x0, [x19, #8]
     140:	ldr	w0, [x0]
     144:	cmp	w0, #0x5
     148:	b.ne	158 <d_count_templates_scopes+0x68>  // b.any
     14c:	ldr	w0, [x20, #348]
     150:	add	w0, w0, #0x1
     154:	str	w0, [x20, #348]
     158:	ldr	w0, [x20, #308]
     15c:	cmp	w0, #0x800
     160:	b.gt	120 <d_count_templates_scopes+0x30>
     164:	ldr	x1, [x19, #8]
     168:	add	w0, w0, #0x1
     16c:	str	w0, [x20, #308]
     170:	mov	x0, x20
     174:	bl	f0 <d_count_templates_scopes>
     178:	ldr	x1, [x19, #16]
     17c:	mov	x0, x20
     180:	bl	f0 <d_count_templates_scopes>
     184:	ldr	w0, [x20, #308]
     188:	sub	w0, w0, #0x1
     18c:	str	w0, [x20, #308]
     190:	ldp	x19, x20, [sp, #16]
     194:	ldp	x29, x30, [sp], #32
     198:	ret
     19c:	ldr	x19, [x19, #8]
     1a0:	cbnz	x19, 110 <d_count_templates_scopes+0x20>
     1a4:	b	120 <d_count_templates_scopes+0x30>
     1a8:	ldr	x19, [x19, #16]
     1ac:	cbnz	x19, 110 <d_count_templates_scopes+0x20>
     1b0:	b	120 <d_count_templates_scopes+0x30>
     1b4:	ldr	w0, [x20, #364]
     1b8:	add	w0, w0, #0x1
     1bc:	str	w0, [x20, #364]
     1c0:	ldr	w0, [x20, #308]
     1c4:	cmp	w0, #0x800
     1c8:	b.gt	120 <d_count_templates_scopes+0x30>
     1cc:	b	164 <d_count_templates_scopes+0x74>
     1d0:	ret
     1d4:	nop

00000000000001d8 <d_append_buffer>:
     1d8:	cbz	x2, 278 <d_append_buffer+0xa0>
     1dc:	stp	x29, x30, [sp, #-48]!
     1e0:	mov	x29, sp
     1e4:	stp	x19, x20, [sp, #16]
     1e8:	mov	x20, x1
     1ec:	mov	x19, x0
     1f0:	stp	x21, x22, [sp, #32]
     1f4:	add	x22, x1, x2
     1f8:	ldr	x1, [x0, #256]
     1fc:	b	220 <d_append_buffer+0x48>
     200:	mov	x0, x1
     204:	add	x1, x1, #0x1
     208:	str	x1, [x19, #256]
     20c:	add	x20, x20, #0x1
     210:	cmp	x20, x22
     214:	strb	w21, [x19, x0]
     218:	strb	w21, [x19, #264]
     21c:	b.eq	268 <d_append_buffer+0x90>  // b.none
     220:	ldrb	w21, [x20]
     224:	cmp	x1, #0xff
     228:	b.ne	200 <d_append_buffer+0x28>  // b.any
     22c:	ldp	x3, x2, [x19, #272]
     230:	strb	wzr, [x19, #255]
     234:	mov	x0, x19
     238:	add	x20, x20, #0x1
     23c:	blr	x3
     240:	ldr	x2, [x19, #320]
     244:	mov	x0, #0x0                   	// #0
     248:	mov	x1, #0x1                   	// #1
     24c:	str	x1, [x19, #256]
     250:	add	x2, x2, x1
     254:	str	x2, [x19, #320]
     258:	strb	w21, [x19, x0]
     25c:	cmp	x20, x22
     260:	strb	w21, [x19, #264]
     264:	b.ne	220 <d_append_buffer+0x48>  // b.any
     268:	ldp	x19, x20, [sp, #16]
     26c:	ldp	x21, x22, [sp, #32]
     270:	ldp	x29, x30, [sp], #48
     274:	ret
     278:	ret
     27c:	nop

0000000000000280 <d_number.isra.0>:
     280:	ldr	x3, [x0]
     284:	mov	x6, x0
     288:	ldrb	w4, [x3]
     28c:	cmp	w4, #0x6e
     290:	b.eq	31c <d_number.isra.0+0x9c>  // b.none
     294:	sub	w0, w4, #0x30
     298:	and	w0, w0, #0xff
     29c:	cmp	w0, #0x9
     2a0:	b.hi	344 <d_number.isra.0+0xc4>  // b.pmore
     2a4:	mov	w9, #0x0                   	// #0
     2a8:	mov	w8, #0xcccd                	// #52429
     2ac:	add	x3, x3, #0x1
     2b0:	mov	w0, #0x0                   	// #0
     2b4:	mov	w7, #0x7fffffff            	// #2147483647
     2b8:	movk	w8, #0xcccc, lsl #16
     2bc:	b	2d0 <d_number.isra.0+0x50>
     2c0:	umull	x1, w1, w8
     2c4:	lsr	x1, x1, #35
     2c8:	cmp	w1, w0
     2cc:	b.lt	314 <d_number.isra.0+0x94>  // b.tstop
     2d0:	str	x3, [x6]
     2d4:	add	w0, w0, w0, lsl #2
     2d8:	add	x3, x3, #0x1
     2dc:	ldurb	w1, [x3, #-1]
     2e0:	add	w5, w4, w0, lsl #1
     2e4:	sub	w0, w5, #0x30
     2e8:	sub	w2, w1, #0x30
     2ec:	mov	w4, w1
     2f0:	sub	w1, w7, w2
     2f4:	and	w2, w2, #0xff
     2f8:	cmp	w2, #0x9
     2fc:	b.ls	2c0 <d_number.isra.0+0x40>  // b.plast
     300:	cmp	w9, #0x0
     304:	mov	w1, #0x30                  	// #48
     308:	sub	w5, w1, w5
     30c:	csel	w0, w5, w0, ne  // ne = any
     310:	ret
     314:	mov	w0, #0xffffffff            	// #-1
     318:	ret
     31c:	add	x1, x3, #0x1
     320:	str	x1, [x0]
     324:	ldrb	w4, [x3, #1]
     328:	sub	w0, w4, #0x30
     32c:	and	w0, w0, #0xff
     330:	cmp	w0, #0x9
     334:	b.hi	344 <d_number.isra.0+0xc4>  // b.pmore
     338:	mov	x3, x1
     33c:	mov	w9, #0x1                   	// #1
     340:	b	2a8 <d_number.isra.0+0x28>
     344:	mov	w0, #0x0                   	// #0
     348:	ret
     34c:	nop

0000000000000350 <d_number_component>:
     350:	mov	x1, x0
     354:	ldr	w0, [x0, #40]
     358:	ldr	w2, [x1, #44]
     35c:	cmp	w0, w2
     360:	b.ge	3ac <d_number_component+0x5c>  // b.tcont
     364:	stp	x29, x30, [sp, #-16]!
     368:	mov	w2, #0x18                  	// #24
     36c:	add	w5, w0, #0x1
     370:	mov	x29, sp
     374:	ldr	x3, [x1, #32]
     378:	smull	x2, w0, w2
     37c:	mov	w4, #0x42                  	// #66
     380:	add	x0, x1, #0x18
     384:	add	x10, x3, x2
     388:	str	wzr, [x10, #4]
     38c:	str	w5, [x1, #40]
     390:	str	w4, [x3, x2]
     394:	bl	280 <d_number.isra.0>
     398:	sxtw	x0, w0
     39c:	str	x0, [x10, #8]
     3a0:	mov	x0, x10
     3a4:	ldp	x29, x30, [sp], #16
     3a8:	ret
     3ac:	mov	x10, #0x0                   	// #0
     3b0:	mov	x0, x10
     3b4:	ret

00000000000003b8 <d_compact_number>:
     3b8:	ldr	x1, [x0, #24]
     3bc:	mov	x10, x0
     3c0:	ldrb	w0, [x1]
     3c4:	cmp	w0, #0x5f
     3c8:	b.eq	40c <d_compact_number+0x54>  // b.none
     3cc:	cmp	w0, #0x6e
     3d0:	b.eq	424 <d_compact_number+0x6c>  // b.none
     3d4:	stp	x29, x30, [sp, #-16]!
     3d8:	add	x0, x10, #0x18
     3dc:	mov	x29, sp
     3e0:	bl	280 <d_number.isra.0>
     3e4:	adds	w0, w0, #0x1
     3e8:	b.mi	41c <d_compact_number+0x64>  // b.first
     3ec:	ldr	x1, [x10, #24]
     3f0:	ldrb	w2, [x1]
     3f4:	cmp	w2, #0x5f
     3f8:	b.ne	41c <d_compact_number+0x64>  // b.any
     3fc:	add	x1, x1, #0x1
     400:	str	x1, [x10, #24]
     404:	ldp	x29, x30, [sp], #16
     408:	ret
     40c:	add	x1, x1, #0x1
     410:	mov	w0, #0x0                   	// #0
     414:	str	x1, [x10, #24]
     418:	ret
     41c:	mov	w0, #0xffffffff            	// #-1
     420:	b	404 <d_compact_number+0x4c>
     424:	mov	w0, #0xffffffff            	// #-1
     428:	ret
     42c:	nop

0000000000000430 <d_template_param>:
     430:	ldr	x1, [x0, #24]
     434:	ldrb	w2, [x1]
     438:	cmp	w2, #0x54
     43c:	b.ne	4a8 <d_template_param+0x78>  // b.any
     440:	stp	x29, x30, [sp, #-16]!
     444:	add	x1, x1, #0x1
     448:	mov	x11, x0
     44c:	mov	x29, sp
     450:	str	x1, [x0, #24]
     454:	bl	3b8 <d_compact_number>
     458:	tbnz	w0, #31, 49c <d_template_param+0x6c>
     45c:	ldp	w1, w2, [x11, #40]
     460:	cmp	w1, w2
     464:	b.ge	49c <d_template_param+0x6c>  // b.tcont
     468:	mov	w2, #0x18                  	// #24
     46c:	add	w5, w1, #0x1
     470:	ldr	x3, [x11, #32]
     474:	smull	x2, w1, w2
     478:	sxtw	x1, w0
     47c:	mov	w4, #0x5                   	// #5
     480:	add	x0, x3, x2
     484:	str	wzr, [x0, #4]
     488:	str	w5, [x11, #40]
     48c:	str	w4, [x3, x2]
     490:	str	x1, [x0, #8]
     494:	ldp	x29, x30, [sp], #16
     498:	ret
     49c:	mov	x0, #0x0                   	// #0
     4a0:	ldp	x29, x30, [sp], #16
     4a4:	ret
     4a8:	mov	x0, #0x0                   	// #0
     4ac:	ret

00000000000004b0 <d_source_name>:
     4b0:	mov	x10, x0
     4b4:	stp	x29, x30, [sp, #-16]!
     4b8:	add	x0, x0, #0x18
     4bc:	mov	x29, sp
     4c0:	bl	280 <d_number.isra.0>
     4c4:	cmp	w0, #0x0
     4c8:	b.le	5c0 <d_source_name+0x110>
     4cc:	mov	w1, w0
     4d0:	sxtw	x3, w0
     4d4:	ldr	x0, [x10, #8]
     4d8:	ldr	x2, [x10, #24]
     4dc:	sub	x0, x0, x2
     4e0:	cmp	x0, w1, sxtw
     4e4:	b.lt	5b8 <d_source_name+0x108>  // b.tstop
     4e8:	ldr	w0, [x10, #16]
     4ec:	add	x3, x2, x3
     4f0:	str	x3, [x10, #24]
     4f4:	tbz	w0, #2, 504 <d_source_name+0x54>
     4f8:	ldrb	w0, [x2, w1, sxtw]
     4fc:	cmp	w0, #0x24
     500:	b.eq	5cc <d_source_name+0x11c>  // b.none
     504:	ldp	w0, w3, [x10, #40]
     508:	cmp	w1, #0x9
     50c:	b.gt	548 <d_source_name+0x98>
     510:	cmp	w3, w0
     514:	b.le	5b8 <d_source_name+0x108>
     518:	ldr	x4, [x10, #32]
     51c:	mov	w5, #0x18                  	// #24
     520:	add	w3, w0, #0x1
     524:	smaddl	x0, w0, w5, x4
     528:	str	wzr, [x0, #4]
     52c:	str	w3, [x10, #40]
     530:	cbz	x2, 5b8 <d_source_name+0x108>
     534:	stp	xzr, x2, [x0]
     538:	str	w1, [x0, #16]
     53c:	str	x0, [x10, #64]
     540:	ldp	x29, x30, [sp], #16
     544:	ret
     548:	mov	x4, #0x475f                	// #18271
     54c:	ldr	x5, [x2]
     550:	movk	x4, #0x4f4c, lsl #16
     554:	movk	x4, #0x4142, lsl #32
     558:	movk	x4, #0x5f4c, lsl #48
     55c:	cmp	x5, x4
     560:	b.ne	58c <d_source_name+0xdc>  // b.any
     564:	ldrb	w4, [x2, #8]
     568:	mov	w6, #0x5f                  	// #95
     56c:	mov	w5, #0x24                  	// #36
     570:	cmp	w4, #0x2e
     574:	ccmp	w4, w6, #0x4, ne  // ne = any
     578:	ccmp	w4, w5, #0x4, ne  // ne = any
     57c:	b.ne	58c <d_source_name+0xdc>  // b.any
     580:	ldrb	w4, [x2, #9]
     584:	cmp	w4, #0x4e
     588:	b.eq	5e4 <d_source_name+0x134>  // b.none
     58c:	cmp	w3, w0
     590:	b.le	5b8 <d_source_name+0x108>
     594:	ldr	x4, [x10, #32]
     598:	mov	w5, #0x18                  	// #24
     59c:	add	w3, w0, #0x1
     5a0:	smaddl	x0, w0, w5, x4
     5a4:	str	wzr, [x0, #4]
     5a8:	str	w3, [x10, #40]
     5ac:	stp	xzr, x2, [x0]
     5b0:	str	w1, [x0, #16]
     5b4:	b	53c <d_source_name+0x8c>
     5b8:	mov	x0, #0x0                   	// #0
     5bc:	b	53c <d_source_name+0x8c>
     5c0:	mov	x0, #0x0                   	// #0
     5c4:	ldp	x29, x30, [sp], #16
     5c8:	ret
     5cc:	add	x3, x3, #0x1
     5d0:	str	x3, [x10, #24]
     5d4:	cmp	w1, #0x9
     5d8:	ldp	w0, w3, [x10, #40]
     5dc:	b.le	510 <d_source_name+0x60>
     5e0:	b	548 <d_source_name+0x98>
     5e4:	ldr	w2, [x10, #72]
     5e8:	cmp	w3, w0
     5ec:	add	w2, w2, #0x16
     5f0:	sub	w1, w2, w1
     5f4:	str	w1, [x10, #72]
     5f8:	b.le	5b8 <d_source_name+0x108>
     5fc:	mov	w1, #0x18                  	// #24
     600:	add	w2, w0, #0x1
     604:	ldr	x3, [x10, #32]
     608:	smull	x1, w0, w1
     60c:	str	w2, [x10, #40]
     610:	mov	w4, #0x15                  	// #21
     614:	add	x0, x3, x1
     618:	adrp	x2, 0 <d_make_comp>
     61c:	add	x2, x2, #0x0
     620:	str	xzr, [x3, x1]
     624:	str	x2, [x0, #8]
     628:	str	w4, [x0, #16]
     62c:	b	53c <d_source_name+0x8c>

0000000000000630 <d_abi_tags>:
     630:	ldr	x3, [x0, #24]
     634:	mov	x11, x0
     638:	ldr	x13, [x0, #64]
     63c:	mov	x12, x1
     640:	ldrb	w0, [x3]
     644:	cmp	w0, #0x42
     648:	b.ne	6a0 <d_abi_tags+0x70>  // b.any
     64c:	stp	x29, x30, [sp, #-16]!
     650:	mov	x29, sp
     654:	nop
     658:	add	x3, x3, #0x1
     65c:	str	x3, [x11, #24]
     660:	mov	x0, x11
     664:	bl	4b0 <d_source_name>
     668:	mov	x3, x0
     66c:	mov	x2, x12
     670:	mov	x0, x11
     674:	mov	w1, #0x4c                  	// #76
     678:	bl	0 <d_make_comp>
     67c:	ldr	x3, [x11, #24]
     680:	mov	x12, x0
     684:	ldrb	w0, [x3]
     688:	cmp	w0, #0x42
     68c:	b.eq	658 <d_abi_tags+0x28>  // b.none
     690:	str	x13, [x11, #64]
     694:	mov	x0, x12
     698:	ldp	x29, x30, [sp], #16
     69c:	ret
     6a0:	mov	x0, x1
     6a4:	str	x13, [x11, #64]
     6a8:	ret
     6ac:	nop

00000000000006b0 <d_substitution>:
     6b0:	mov	x14, x0
     6b4:	ldr	x0, [x0, #24]
     6b8:	ldrb	w2, [x0]
     6bc:	cmp	w2, #0x53
     6c0:	b.ne	730 <d_substitution+0x80>  // b.any
     6c4:	add	x2, x0, #0x1
     6c8:	str	x2, [x14, #24]
     6cc:	ldrb	w2, [x0, #1]
     6d0:	cbnz	w2, 738 <d_substitution+0x88>
     6d4:	ldr	w0, [x14, #16]
     6d8:	and	w1, w1, #0x1
     6dc:	ands	w3, w0, #0x8
     6e0:	ubfx	x4, x0, #3, #1
     6e4:	csel	w1, w1, wzr, eq  // eq = none
     6e8:	cbz	w1, 704 <d_substitution+0x54>
     6ec:	ldr	x0, [x14, #24]
     6f0:	ldrb	w0, [x0]
     6f4:	sub	w0, w0, #0x43
     6f8:	and	w0, w0, #0xff
     6fc:	cmp	w0, #0x1
     700:	csinc	w4, w4, wzr, hi  // hi = pmore
     704:	adrp	x0, 0 <d_make_comp>
     708:	add	x0, x0, #0x0
     70c:	add	x3, x0, #0x188
     710:	mov	w1, #0x74                  	// #116
     714:	b	71c <d_substitution+0x6c>
     718:	ldrb	w1, [x0]
     71c:	cmp	w1, w2
     720:	b.eq	80c <d_substitution+0x15c>  // b.none
     724:	add	x0, x0, #0x38
     728:	cmp	x0, x3
     72c:	b.ne	718 <d_substitution+0x68>  // b.any
     730:	mov	x0, #0x0                   	// #0
     734:	ret
     738:	add	x2, x0, #0x2
     73c:	str	x2, [x14, #24]
     740:	ldrb	w2, [x0, #1]
     744:	sub	w5, w2, #0x30
     748:	cmp	w2, #0x5f
     74c:	and	w0, w5, #0xff
     750:	ccmp	w0, #0x9, #0x0, ne  // ne = any
     754:	b.hi	77c <d_substitution+0xcc>  // b.pmore
     758:	cmp	w2, #0x5f
     75c:	mov	w1, #0x0                   	// #0
     760:	b.ne	790 <d_substitution+0xe0>  // b.any
     764:	ldr	w0, [x14, #56]
     768:	cmp	w0, w1
     76c:	b.ls	730 <d_substitution+0x80>  // b.plast
     770:	ldr	x0, [x14, #48]
     774:	ldr	x0, [x0, w1, uxtw #3]
     778:	ret
     77c:	sub	w0, w2, #0x41
     780:	and	w0, w0, #0xff
     784:	cmp	w0, #0x19
     788:	b.hi	6d4 <d_substitution+0x24>  // b.pmore
     78c:	nop
     790:	mov	w3, #0x0                   	// #0
     794:	nop
     798:	add	w1, w3, w3, lsl #3
     79c:	sub	w6, w2, #0x41
     7a0:	mov	w4, w1
     7a4:	and	w5, w5, #0xff
     7a8:	add	w1, w2, w1, lsl #2
     7ac:	and	w6, w6, #0xff
     7b0:	sub	w1, w1, #0x37
     7b4:	add	w2, w2, w4, lsl #2
     7b8:	cmp	w5, #0x9
     7bc:	b.hi	800 <d_substitution+0x150>  // b.pmore
     7c0:	sub	w1, w2, #0x30
     7c4:	cmp	w3, w1
     7c8:	b.hi	730 <d_substitution+0x80>  // b.pmore
     7cc:	ldr	x4, [x14, #24]
     7d0:	mov	w3, w1
     7d4:	add	x0, x4, #0x1
     7d8:	ldrb	w2, [x4]
     7dc:	cbz	w2, 7f0 <d_substitution+0x140>
     7e0:	str	x0, [x14, #24]
     7e4:	ldrb	w2, [x4]
     7e8:	cmp	w2, #0x5f
     7ec:	b.eq	7f8 <d_substitution+0x148>  // b.none
     7f0:	sub	w5, w2, #0x30
     7f4:	b	798 <d_substitution+0xe8>
     7f8:	add	w1, w1, #0x1
     7fc:	b	764 <d_substitution+0xb4>
     800:	cmp	w6, #0x19
     804:	b.ls	7c4 <d_substitution+0x114>  // b.plast
     808:	b	730 <d_substitution+0x80>
     80c:	ldr	x5, [x0, #40]
     810:	ldp	w1, w3, [x14, #40]
     814:	cbz	x5, 850 <d_substitution+0x1a0>
     818:	ldr	w9, [x0, #48]
     81c:	cmp	w3, w1
     820:	b.le	908 <d_substitution+0x258>
     824:	mov	w8, #0x18                  	// #24
     828:	ldr	x7, [x14, #32]
     82c:	smull	x6, w1, w8
     830:	add	w1, w1, #0x1
     834:	add	x2, x7, x6
     838:	str	wzr, [x2, #4]
     83c:	str	w1, [x14, #40]
     840:	str	w8, [x7, x6]
     844:	str	x5, [x2, #8]
     848:	str	w9, [x2, #16]
     84c:	str	x2, [x14, #64]
     850:	cbz	w4, 8ac <d_substitution+0x1fc>
     854:	ldr	w2, [x0, #32]
     858:	ldr	x5, [x0, #24]
     85c:	cmp	w1, w3
     860:	ldr	w0, [x14, #72]
     864:	add	w0, w0, w2
     868:	str	w0, [x14, #72]
     86c:	b.ge	900 <d_substitution+0x250>  // b.tcont
     870:	mov	w4, #0x18                  	// #24
     874:	add	w6, w1, #0x1
     878:	ldr	x3, [x14, #32]
     87c:	smull	x1, w1, w4
     880:	add	x0, x3, x1
     884:	str	wzr, [x0, #4]
     888:	str	w6, [x14, #40]
     88c:	str	w4, [x3, x1]
     890:	str	x5, [x0, #8]
     894:	str	w2, [x0, #16]
     898:	ldr	x1, [x14, #24]
     89c:	ldrb	w1, [x1]
     8a0:	cmp	w1, #0x42
     8a4:	b.eq	8b8 <d_substitution+0x208>  // b.none
     8a8:	ret
     8ac:	ldr	w2, [x0, #16]
     8b0:	ldr	x5, [x0, #8]
     8b4:	b	85c <d_substitution+0x1ac>
     8b8:	stp	x29, x30, [sp, #-16]!
     8bc:	mov	x1, x0
     8c0:	mov	x0, x14
     8c4:	mov	x29, sp
     8c8:	bl	630 <d_abi_tags>
     8cc:	cbz	x0, 8f4 <d_substitution+0x244>
     8d0:	ldp	w1, w2, [x14, #56]
     8d4:	cmp	w1, w2
     8d8:	b.ge	8f4 <d_substitution+0x244>  // b.tcont
     8dc:	ldr	x3, [x14, #48]
     8e0:	add	w2, w1, #0x1
     8e4:	str	x0, [x3, w1, sxtw #3]
     8e8:	str	w2, [x14, #56]
     8ec:	ldp	x29, x30, [sp], #16
     8f0:	ret
     8f4:	mov	x0, #0x0                   	// #0
     8f8:	ldp	x29, x30, [sp], #16
     8fc:	ret
     900:	mov	x0, #0x0                   	// #0
     904:	b	898 <d_substitution+0x1e8>
     908:	mov	x2, #0x0                   	// #0
     90c:	str	x2, [x14, #64]
     910:	b	850 <d_substitution+0x1a0>
     914:	nop

0000000000000918 <d_call_offset>:
     918:	mov	x10, x0
     91c:	cbnz	w1, 938 <d_call_offset+0x20>
     920:	ldr	x0, [x0, #24]
     924:	ldrb	w1, [x0]
     928:	cbz	w1, 978 <d_call_offset+0x60>
     92c:	add	x1, x0, #0x1
     930:	str	x1, [x10, #24]
     934:	ldrb	w1, [x0]
     938:	stp	x29, x30, [sp, #-16]!
     93c:	cmp	w1, #0x68
     940:	mov	x29, sp
     944:	b.eq	9b4 <d_call_offset+0x9c>  // b.none
     948:	cmp	w1, #0x76
     94c:	b.ne	96c <d_call_offset+0x54>  // b.any
     950:	add	x11, x10, #0x18
     954:	mov	x0, x11
     958:	bl	280 <d_number.isra.0>
     95c:	ldr	x0, [x10, #24]
     960:	ldrb	w1, [x0]
     964:	cmp	w1, #0x5f
     968:	b.eq	980 <d_call_offset+0x68>  // b.none
     96c:	mov	w0, #0x0                   	// #0
     970:	ldp	x29, x30, [sp], #16
     974:	ret
     978:	mov	w0, #0x0                   	// #0
     97c:	ret
     980:	add	x0, x0, #0x1
     984:	str	x0, [x10, #24]
     988:	mov	x0, x11
     98c:	bl	280 <d_number.isra.0>
     990:	ldr	x0, [x10, #24]
     994:	ldrb	w1, [x0]
     998:	cmp	w1, #0x5f
     99c:	b.ne	96c <d_call_offset+0x54>  // b.any
     9a0:	add	x1, x0, #0x1
     9a4:	str	x1, [x10, #24]
     9a8:	mov	w0, #0x1                   	// #1
     9ac:	ldp	x29, x30, [sp], #16
     9b0:	ret
     9b4:	add	x0, x10, #0x18
     9b8:	bl	280 <d_number.isra.0>
     9bc:	b	990 <d_call_offset+0x78>

00000000000009c0 <next_is_type_qual.isra.0>:
     9c0:	mov	x2, x0
     9c4:	mov	w3, #0x56                  	// #86
     9c8:	mov	w0, #0x4b                  	// #75
     9cc:	ldrb	w1, [x2]
     9d0:	cmp	w1, #0x72
     9d4:	ccmp	w1, w3, #0x4, ne  // ne = any
     9d8:	ccmp	w1, w0, #0x4, ne  // ne = any
     9dc:	mov	w0, #0x1                   	// #1
     9e0:	b.eq	9f0 <next_is_type_qual.isra.0+0x30>  // b.none
     9e4:	cmp	w1, #0x44
     9e8:	mov	w0, #0x0                   	// #0
     9ec:	b.eq	9f4 <next_is_type_qual.isra.0+0x34>  // b.none
     9f0:	ret
     9f4:	ldrb	w0, [x2, #1]
     9f8:	and	w1, w0, #0xffffffdf
     9fc:	sub	w0, w0, #0x77
     a00:	cmp	w1, #0x4f
     a04:	and	w0, w0, #0xff
     a08:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     a0c:	cset	w0, ls  // ls = plast
     a10:	ret
     a14:	nop

0000000000000a18 <d_discriminator>:
     a18:	ldr	x1, [x0, #24]
     a1c:	mov	x10, x0
     a20:	ldrb	w0, [x1]
     a24:	cmp	w0, #0x5f
     a28:	b.eq	a34 <d_discriminator+0x1c>  // b.none
     a2c:	mov	w0, #0x1                   	// #1
     a30:	ret
     a34:	stp	x29, x30, [sp, #-16]!
     a38:	add	x0, x1, #0x1
     a3c:	mov	x29, sp
     a40:	str	x0, [x10, #24]
     a44:	ldrb	w0, [x1, #1]
     a48:	cmp	w0, #0x5f
     a4c:	b.eq	a70 <d_discriminator+0x58>  // b.none
     a50:	add	x0, x10, #0x18
     a54:	bl	280 <d_number.isra.0>
     a58:	mov	w1, w0
     a5c:	mov	w0, #0x0                   	// #0
     a60:	tbnz	w1, #31, a68 <d_discriminator+0x50>
     a64:	mov	w0, #0x1                   	// #1
     a68:	ldp	x29, x30, [sp], #16
     a6c:	ret
     a70:	mov	x0, x10
     a74:	add	x1, x1, #0x2
     a78:	str	x1, [x0, #24]!
     a7c:	bl	280 <d_number.isra.0>
     a80:	tbnz	w0, #31, ab0 <d_discriminator+0x98>
     a84:	cmp	w0, #0x9
     a88:	b.le	a64 <d_discriminator+0x4c>
     a8c:	ldr	x1, [x10, #24]
     a90:	mov	w0, #0x0                   	// #0
     a94:	ldrb	w2, [x1]
     a98:	cmp	w2, #0x5f
     a9c:	b.ne	a68 <d_discriminator+0x50>  // b.any
     aa0:	add	x1, x1, #0x1
     aa4:	mov	w0, #0x1                   	// #1
     aa8:	str	x1, [x10, #24]
     aac:	b	a68 <d_discriminator+0x50>
     ab0:	mov	w0, #0x0                   	// #0
     ab4:	b	a68 <d_discriminator+0x50>

0000000000000ab8 <d_index_template_argument.part.0>:
     ab8:	cbnz	x0, ad4 <d_index_template_argument.part.0+0x1c>
     abc:	b	ae0 <d_index_template_argument.part.0+0x28>
     ac0:	cmp	w1, #0x0
     ac4:	b.le	ae8 <d_index_template_argument.part.0+0x30>
     ac8:	ldr	x0, [x0, #16]
     acc:	sub	w1, w1, #0x1
     ad0:	cbz	x0, ae4 <d_index_template_argument.part.0+0x2c>
     ad4:	ldr	w2, [x0]
     ad8:	cmp	w2, #0x2f
     adc:	b.eq	ac0 <d_index_template_argument.part.0+0x8>  // b.none
     ae0:	mov	x0, #0x0                   	// #0
     ae4:	ret
     ae8:	b.ne	ae0 <d_index_template_argument.part.0+0x28>  // b.any
     aec:	ldr	x0, [x0, #8]
     af0:	ret
     af4:	nop

0000000000000af8 <d_lookup_template_argument.isra.0>:
     af8:	mov	x2, x0
     afc:	ldr	x0, [x0, #288]
     b00:	cbz	x0, b18 <d_lookup_template_argument.isra.0+0x20>
     b04:	ldr	x1, [x1]
     b08:	ldr	x0, [x0, #8]
     b0c:	ldr	x0, [x0, #16]
     b10:	tbnz	w1, #31, b20 <d_lookup_template_argument.isra.0+0x28>
     b14:	b	ab8 <d_index_template_argument.part.0>
     b18:	mov	w1, #0x1                   	// #1
     b1c:	str	w1, [x2, #304]
     b20:	ret
     b24:	nop

0000000000000b28 <d_find_pack>:
     b28:	cbz	x1, bfc <d_find_pack+0xd4>
     b2c:	stp	x29, x30, [sp, #-48]!
     b30:	mov	x29, sp
     b34:	stp	x21, x22, [sp, #32]
     b38:	mov	x21, #0x8001                	// #32769
     b3c:	movk	x21, #0x410, lsl #16
     b40:	movk	x21, #0xc600, lsl #32
     b44:	stp	x19, x20, [sp, #16]
     b48:	mov	x20, x0
     b4c:	mov	x19, x1
     b50:	mov	x22, #0x1                   	// #1
     b54:	movk	x21, #0x19, lsl #48
     b58:	ldr	w2, [x19]
     b5c:	cmp	w2, #0x8
     b60:	b.eq	b78 <d_find_pack+0x50>  // b.none
     b64:	b.hi	bcc <d_find_pack+0xa4>  // b.pmore
     b68:	cmp	w2, #0x6
     b6c:	b.eq	b80 <d_find_pack+0x58>  // b.none
     b70:	cmp	w2, #0x7
     b74:	b.ne	b94 <d_find_pack+0x6c>  // b.any
     b78:	ldr	x19, [x19, #16]
     b7c:	cbnz	x19, b58 <d_find_pack+0x30>
     b80:	mov	x0, #0x0                   	// #0
     b84:	ldp	x19, x20, [sp, #16]
     b88:	ldp	x21, x22, [sp, #32]
     b8c:	ldp	x29, x30, [sp], #48
     b90:	ret
     b94:	cbz	w2, b80 <d_find_pack+0x58>
     b98:	cmp	w2, #0x5
     b9c:	b.ne	be8 <d_find_pack+0xc0>  // b.any
     ba0:	add	x1, x19, #0x8
     ba4:	mov	x0, x20
     ba8:	bl	af8 <d_lookup_template_argument.isra.0>
     bac:	cbz	x0, b80 <d_find_pack+0x58>
     bb0:	ldr	w1, [x0]
     bb4:	cmp	w1, #0x2f
     bb8:	b.ne	b80 <d_find_pack+0x58>  // b.any
     bbc:	ldp	x19, x20, [sp, #16]
     bc0:	ldp	x21, x22, [sp, #32]
     bc4:	ldp	x29, x30, [sp], #48
     bc8:	ret
     bcc:	sub	w2, w2, #0x18
     bd0:	cmp	w2, #0x34
     bd4:	b.hi	be8 <d_find_pack+0xc0>  // b.pmore
     bd8:	lsl	x2, x22, x2
     bdc:	tst	x2, x21
     be0:	b.ne	b80 <d_find_pack+0x58>  // b.any
     be4:	tbnz	w2, #27, b78 <d_find_pack+0x50>
     be8:	ldr	x1, [x19, #8]
     bec:	mov	x0, x20
     bf0:	bl	b28 <d_find_pack>
     bf4:	cbz	x0, b78 <d_find_pack+0x50>
     bf8:	b	b84 <d_find_pack+0x5c>
     bfc:	mov	x0, #0x0                   	// #0
     c00:	ret
     c04:	nop

0000000000000c08 <d_growable_string_callback_adapter>:
     c08:	stp	x29, x30, [sp, #-48]!
     c0c:	mov	x29, sp
     c10:	stp	x19, x20, [sp, #16]
     c14:	mov	x19, x2
     c18:	add	x2, x1, #0x1
     c1c:	stp	x21, x22, [sp, #32]
     c20:	mov	x21, x1
     c24:	mov	x22, x0
     c28:	ldp	x1, x20, [x19, #8]
     c2c:	add	x1, x2, x1
     c30:	ldr	w2, [x19, #24]
     c34:	cmp	x1, x20
     c38:	b.hi	c7c <d_growable_string_callback_adapter+0x74>  // b.pmore
     c3c:	cbnz	w2, c6c <d_growable_string_callback_adapter+0x64>
     c40:	ldp	x3, x0, [x19]
     c44:	mov	x1, x22
     c48:	mov	x2, x21
     c4c:	add	x0, x3, x0
     c50:	bl	0 <memcpy>
     c54:	ldp	x0, x1, [x19]
     c58:	add	x0, x0, x21
     c5c:	strb	wzr, [x0, x1]
     c60:	ldr	x1, [x19, #8]
     c64:	add	x1, x1, x21
     c68:	str	x1, [x19, #8]
     c6c:	ldp	x19, x20, [sp, #16]
     c70:	ldp	x21, x22, [sp, #32]
     c74:	ldp	x29, x30, [sp], #48
     c78:	ret
     c7c:	cbnz	w2, c6c <d_growable_string_callback_adapter+0x64>
     c80:	cbz	x20, cb8 <d_growable_string_callback_adapter+0xb0>
     c84:	nop
     c88:	lsl	x20, x20, #1
     c8c:	cmp	x1, x20
     c90:	b.hi	c88 <d_growable_string_callback_adapter+0x80>  // b.pmore
     c94:	ldr	x0, [x19]
     c98:	mov	x1, x20
     c9c:	bl	0 <realloc>
     ca0:	cbz	x0, cc8 <d_growable_string_callback_adapter+0xc0>
     ca4:	ldr	w2, [x19, #24]
     ca8:	str	x0, [x19]
     cac:	str	x20, [x19, #16]
     cb0:	cbz	w2, c40 <d_growable_string_callback_adapter+0x38>
     cb4:	b	c6c <d_growable_string_callback_adapter+0x64>
     cb8:	cmp	x1, #0x2
     cbc:	mov	x20, #0x2                   	// #2
     cc0:	b.hi	c88 <d_growable_string_callback_adapter+0x80>  // b.pmore
     cc4:	b	c94 <d_growable_string_callback_adapter+0x8c>
     cc8:	ldr	x0, [x19]
     ccc:	bl	0 <free>
     cd0:	stp	xzr, xzr, [x19]
     cd4:	mov	w0, #0x1                   	// #1
     cd8:	str	xzr, [x19, #16]
     cdc:	str	w0, [x19, #24]
     ce0:	b	c6c <d_growable_string_callback_adapter+0x64>
     ce4:	nop

0000000000000ce8 <d_exprlist>:
     ce8:	stp	x29, x30, [sp, #-112]!
     cec:	mov	x29, sp
     cf0:	ldr	x2, [x0, #24]
     cf4:	stp	x19, x20, [sp, #16]
     cf8:	mov	x19, x0
     cfc:	str	xzr, [sp, #104]
     d00:	ldrb	w3, [x2]
     d04:	cmp	w3, w1, uxtb
     d08:	b.eq	1408 <d_exprlist+0x720>  // b.none
     d0c:	stp	x21, x22, [sp, #32]
     d10:	add	x21, sp, #0x68
     d14:	mov	w22, #0x1                   	// #1
     d18:	stp	x23, x24, [sp, #48]
     d1c:	and	w23, w1, #0xff
     d20:	mov	w24, #0x6d                  	// #109
     d24:	stp	x25, x26, [sp, #64]
     d28:	ldr	w25, [x19, #76]
     d2c:	str	w22, [x19, #76]
     d30:	ldrb	w0, [x2]
     d34:	cmp	w0, #0x4c
     d38:	b.eq	f08 <d_exprlist+0x220>  // b.none
     d3c:	cmp	w0, #0x54
     d40:	b.eq	f98 <d_exprlist+0x2b0>  // b.none
     d44:	cmp	w0, #0x73
     d48:	b.eq	ec8 <d_exprlist+0x1e0>  // b.none
     d4c:	cmp	w0, #0x66
     d50:	b.ne	dec <d_exprlist+0x104>  // b.any
     d54:	ldrb	w0, [x2, #1]
     d58:	cmp	w0, #0x70
     d5c:	b.eq	fa8 <d_exprlist+0x2c0>  // b.none
     d60:	mov	x0, x19
     d64:	bl	3708 <d_operator_name>
     d68:	mov	x20, x0
     d6c:	cbz	x0, dcc <d_exprlist+0xe4>
     d70:	ldr	w0, [x0]
     d74:	cmp	w0, #0x32
     d78:	b.eq	1010 <d_exprlist+0x328>  // b.none
     d7c:	cmp	w0, #0x34
     d80:	b.eq	1428 <d_exprlist+0x740>  // b.none
     d84:	b.hi	dc8 <d_exprlist+0xe0>  // b.pmore
     d88:	cmp	w0, #0x33
     d8c:	b.ne	dc8 <d_exprlist+0xe0>  // b.any
     d90:	ldr	w0, [x20, #8]
     d94:	cmp	w0, #0x2
     d98:	b.eq	dc8 <d_exprlist+0xe0>  // b.none
     d9c:	b.gt	dc8 <d_exprlist+0xe0>
     da0:	cbnz	w0, 11d8 <d_exprlist+0x4f0>
     da4:	mov	x2, x20
     da8:	mov	x0, x19
     dac:	mov	x3, #0x0                   	// #0
     db0:	mov	w1, #0x36                  	// #54
     db4:	bl	0 <d_make_comp>
     db8:	mov	x20, x0
     dbc:	b	ea0 <d_exprlist+0x1b8>
     dc0:	ldr	x27, [sp, #80]
     dc4:	nop
     dc8:	mov	x20, #0x0                   	// #0
     dcc:	str	w25, [x19, #76]
     dd0:	mov	x0, x20
     dd4:	ldp	x19, x20, [sp, #16]
     dd8:	ldp	x21, x22, [sp, #32]
     ddc:	ldp	x23, x24, [sp, #48]
     de0:	ldp	x25, x26, [sp, #64]
     de4:	ldp	x29, x30, [sp], #112
     de8:	ret
     dec:	sub	w1, w0, #0x30
     df0:	and	w1, w1, #0xff
     df4:	cmp	w1, #0x9
     df8:	b.hi	f18 <d_exprlist+0x230>  // b.pmore
     dfc:	mov	x0, x19
     e00:	bl	3dd0 <d_unqualified_name>
     e04:	mov	x20, x0
     e08:	cbz	x0, dcc <d_exprlist+0xe4>
     e0c:	ldr	x0, [x19, #24]
     e10:	ldrb	w1, [x0]
     e14:	cmp	w1, #0x49
     e18:	b.eq	e78 <d_exprlist+0x190>  // b.none
     e1c:	str	w25, [x19, #76]
     e20:	mov	x2, x20
     e24:	mov	x0, x19
     e28:	mov	x3, #0x0                   	// #0
     e2c:	mov	w1, #0x2e                  	// #46
     e30:	bl	0 <d_make_comp>
     e34:	str	x0, [x21]
     e38:	cbz	x0, ea8 <d_exprlist+0x1c0>
     e3c:	ldr	x2, [x19, #24]
     e40:	add	x21, x0, #0x10
     e44:	ldrb	w0, [x2]
     e48:	cmp	w0, w23
     e4c:	b.ne	d28 <d_exprlist+0x40>  // b.any
     e50:	ldr	x20, [sp, #104]
     e54:	add	x2, x2, #0x1
     e58:	str	x2, [x19, #24]
     e5c:	mov	x0, x20
     e60:	ldp	x19, x20, [sp, #16]
     e64:	ldp	x21, x22, [sp, #32]
     e68:	ldp	x23, x24, [sp, #48]
     e6c:	ldp	x25, x26, [sp, #64]
     e70:	ldp	x29, x30, [sp], #112
     e74:	ret
     e78:	add	x0, x0, #0x1
     e7c:	str	x0, [x19, #24]
     e80:	mov	x0, x19
     e84:	bl	1ce0 <d_template_args_1>
     e88:	mov	x3, x0
     e8c:	mov	x2, x20
     e90:	mov	x0, x19
     e94:	mov	w1, #0x4                   	// #4
     e98:	bl	0 <d_make_comp>
     e9c:	mov	x20, x0
     ea0:	str	w25, [x19, #76]
     ea4:	cbnz	x20, e20 <d_exprlist+0x138>
     ea8:	mov	x20, #0x0                   	// #0
     eac:	mov	x0, x20
     eb0:	ldp	x19, x20, [sp, #16]
     eb4:	ldp	x21, x22, [sp, #32]
     eb8:	ldp	x23, x24, [sp, #48]
     ebc:	ldp	x25, x26, [sp, #64]
     ec0:	ldp	x29, x30, [sp], #112
     ec4:	ret
     ec8:	ldrb	w0, [x2, #1]
     ecc:	cmp	w0, #0x72
     ed0:	b.eq	1158 <d_exprlist+0x470>  // b.none
     ed4:	cmp	w0, #0x70
     ed8:	b.ne	d60 <d_exprlist+0x78>  // b.any
     edc:	add	x2, x2, #0x2
     ee0:	str	x2, [x19, #24]
     ee4:	mov	x0, x19
     ee8:	bl	1508 <d_expression_1>
     eec:	mov	x2, x0
     ef0:	mov	x3, #0x0                   	// #0
     ef4:	mov	x0, x19
     ef8:	mov	w1, #0x4b                  	// #75
     efc:	bl	0 <d_make_comp>
     f00:	mov	x20, x0
     f04:	b	ea0 <d_exprlist+0x1b8>
     f08:	mov	x0, x19
     f0c:	bl	42b0 <d_expr_primary>
     f10:	mov	x20, x0
     f14:	b	ea0 <d_exprlist+0x1b8>
     f18:	cmp	w0, #0x6f
     f1c:	b.ne	f38 <d_exprlist+0x250>  // b.any
     f20:	ldrb	w0, [x2, #1]
     f24:	cmp	w0, #0x6e
     f28:	b.ne	d60 <d_exprlist+0x78>  // b.any
     f2c:	add	x2, x2, #0x2
     f30:	str	x2, [x19, #24]
     f34:	b	dfc <d_exprlist+0x114>
     f38:	cmp	w0, #0x69
     f3c:	mov	w1, #0x74                  	// #116
     f40:	ccmp	w0, w1, #0x4, ne  // ne = any
     f44:	b.ne	d60 <d_exprlist+0x78>  // b.any
     f48:	ldrb	w1, [x2, #1]
     f4c:	cmp	w1, #0x6c
     f50:	b.ne	d60 <d_exprlist+0x78>  // b.any
     f54:	add	x1, x2, #0x2
     f58:	str	x1, [x19, #24]
     f5c:	cmp	w0, #0x74
     f60:	mov	x20, #0x0                   	// #0
     f64:	b.eq	12a8 <d_exprlist+0x5c0>  // b.none
     f68:	ldrb	w0, [x1, #1]
     f6c:	cbz	w0, dc8 <d_exprlist+0xe0>
     f70:	mov	w1, #0x45                  	// #69
     f74:	mov	x0, x19
     f78:	bl	ce8 <d_exprlist>
     f7c:	mov	x3, x0
     f80:	mov	x2, x20
     f84:	mov	x0, x19
     f88:	mov	w1, #0x31                  	// #49
     f8c:	bl	0 <d_make_comp>
     f90:	mov	x20, x0
     f94:	b	ea0 <d_exprlist+0x1b8>
     f98:	mov	x0, x19
     f9c:	bl	430 <d_template_param>
     fa0:	mov	x20, x0
     fa4:	b	ea0 <d_exprlist+0x1b8>
     fa8:	add	x0, x2, #0x2
     fac:	str	x0, [x19, #24]
     fb0:	ldrb	w0, [x2, #2]
     fb4:	cmp	w0, #0x54
     fb8:	b.eq	1148 <d_exprlist+0x460>  // b.none
     fbc:	mov	x0, x19
     fc0:	bl	3b8 <d_compact_number>
     fc4:	mvn	x1, x0
     fc8:	tst	x1, #0x7fffffff
     fcc:	b.eq	dc8 <d_exprlist+0xe0>  // b.none
     fd0:	add	w0, w0, #0x1
     fd4:	ldp	w1, w2, [x19, #40]
     fd8:	cmp	w1, w2
     fdc:	b.ge	dc8 <d_exprlist+0xe0>  // b.tcont
     fe0:	mov	w3, #0x18                  	// #24
     fe4:	add	w4, w1, #0x1
     fe8:	ldr	x2, [x19, #32]
     fec:	smull	x1, w1, w3
     ff0:	mov	w3, #0x6                   	// #6
     ff4:	sxtw	x0, w0
     ff8:	add	x20, x2, x1
     ffc:	str	wzr, [x20, #4]
    1000:	str	w4, [x19, #40]
    1004:	str	w3, [x2, x1]
    1008:	str	x0, [x20, #8]
    100c:	b	e1c <d_exprlist+0x134>
    1010:	ldr	x2, [x20, #8]
    1014:	ldr	w0, [x19, #72]
    1018:	ldr	w1, [x2, #16]
    101c:	ldr	x26, [x2]
    1020:	sub	w1, w1, #0x2
    1024:	add	w0, w0, w1
    1028:	str	w0, [x19, #72]
    102c:	ldrb	w1, [x26]
    1030:	cmp	w1, #0x73
    1034:	b.eq	1124 <d_exprlist+0x43c>  // b.none
    1038:	str	x27, [sp, #80]
    103c:	ldr	w27, [x2, #20]
    1040:	cmp	w27, #0x1
    1044:	b.eq	11f0 <d_exprlist+0x508>  // b.none
    1048:	b.le	11cc <d_exprlist+0x4e4>
    104c:	cmp	w27, #0x2
    1050:	b.eq	1310 <d_exprlist+0x628>  // b.none
    1054:	cmp	w27, #0x3
    1058:	b.ne	dc0 <d_exprlist+0xd8>  // b.any
    105c:	cmp	w1, #0x71
    1060:	b.eq	12c4 <d_exprlist+0x5dc>  // b.none
    1064:	ldrb	w0, [x26]
    1068:	cmp	w0, #0x66
    106c:	b.eq	1494 <d_exprlist+0x7ac>  // b.none
    1070:	cmp	w0, #0x6e
    1074:	b.ne	1300 <d_exprlist+0x618>  // b.any
    1078:	ldrb	w0, [x26, #1]
    107c:	mov	w1, #0x61                  	// #97
    1080:	cmp	w0, #0x77
    1084:	ccmp	w0, w1, #0x4, ne  // ne = any
    1088:	b.ne	1300 <d_exprlist+0x618>  // b.any
    108c:	mov	w1, #0x5f                  	// #95
    1090:	mov	x0, x19
    1094:	bl	ce8 <d_exprlist>
    1098:	mov	x26, x0
    109c:	mov	x0, x19
    10a0:	bl	2b20 <d_type>
    10a4:	ldr	x1, [x19, #24]
    10a8:	mov	x27, x0
    10ac:	ldrb	w0, [x1]
    10b0:	cmp	w0, #0x45
    10b4:	b.eq	14f4 <d_exprlist+0x80c>  // b.none
    10b8:	cmp	w0, #0x70
    10bc:	b.eq	14cc <d_exprlist+0x7e4>  // b.none
    10c0:	cmp	w0, #0x69
    10c4:	b.ne	1300 <d_exprlist+0x618>  // b.any
    10c8:	ldrb	w0, [x1, #1]
    10cc:	cmp	w0, #0x6c
    10d0:	b.ne	1300 <d_exprlist+0x618>  // b.any
    10d4:	mov	x0, x19
    10d8:	bl	1508 <d_expression_1>
    10dc:	mov	x3, x0
    10e0:	mov	x2, x27
    10e4:	mov	w1, #0x3c                  	// #60
    10e8:	mov	x0, x19
    10ec:	bl	0 <d_make_comp>
    10f0:	mov	x2, x26
    10f4:	mov	x3, x0
    10f8:	mov	w1, #0x3b                  	// #59
    10fc:	mov	x0, x19
    1100:	bl	0 <d_make_comp>
    1104:	mov	x3, x0
    1108:	mov	x2, x20
    110c:	mov	x0, x19
    1110:	mov	w1, #0x3a                  	// #58
    1114:	bl	0 <d_make_comp>
    1118:	mov	x20, x0
    111c:	ldr	x27, [sp, #80]
    1120:	b	ea0 <d_exprlist+0x1b8>
    1124:	ldrb	w0, [x26, #1]
    1128:	cmp	w0, #0x74
    112c:	b.ne	1038 <d_exprlist+0x350>  // b.any
    1130:	ldrb	w0, [x26, #2]
    1134:	cbnz	w0, 1038 <d_exprlist+0x350>
    1138:	mov	x0, x19
    113c:	bl	2b20 <d_type>
    1140:	mov	x3, x0
    1144:	b	1234 <d_exprlist+0x54c>
    1148:	add	x2, x2, #0x3
    114c:	mov	w0, #0x0                   	// #0
    1150:	str	x2, [x19, #24]
    1154:	b	fd4 <d_exprlist+0x2ec>
    1158:	add	x2, x2, #0x2
    115c:	str	x2, [x19, #24]
    1160:	mov	x0, x19
    1164:	bl	2b20 <d_type>
    1168:	mov	x20, x0
    116c:	mov	x0, x19
    1170:	bl	3dd0 <d_unqualified_name>
    1174:	ldr	x1, [x19, #24]
    1178:	mov	x26, x0
    117c:	mov	x3, x26
    1180:	ldrb	w0, [x1]
    1184:	cmp	w0, #0x49
    1188:	b.ne	11b4 <d_exprlist+0x4cc>  // b.any
    118c:	add	x1, x1, #0x1
    1190:	str	x1, [x19, #24]
    1194:	mov	x0, x19
    1198:	bl	1ce0 <d_template_args_1>
    119c:	mov	x3, x0
    11a0:	mov	x2, x26
    11a4:	mov	x0, x19
    11a8:	mov	w1, #0x4                   	// #4
    11ac:	bl	0 <d_make_comp>
    11b0:	mov	x3, x0
    11b4:	mov	x2, x20
    11b8:	mov	x0, x19
    11bc:	mov	w1, #0x1                   	// #1
    11c0:	bl	0 <d_make_comp>
    11c4:	mov	x20, x0
    11c8:	b	ea0 <d_exprlist+0x1b8>
    11cc:	cbnz	w27, dc0 <d_exprlist+0xd8>
    11d0:	ldr	x27, [sp, #80]
    11d4:	b	da4 <d_exprlist+0xbc>
    11d8:	cmp	w0, #0x1
    11dc:	b.ne	dc8 <d_exprlist+0xe0>  // b.any
    11e0:	mov	x0, x19
    11e4:	bl	1508 <d_expression_1>
    11e8:	mov	x3, x0
    11ec:	b	1234 <d_exprlist+0x54c>
    11f0:	ldrb	w0, [x26]
    11f4:	cmp	w0, #0x70
    11f8:	ccmp	w0, w24, #0x4, ne  // ne = any
    11fc:	b.eq	1278 <d_exprlist+0x590>  // b.none
    1200:	mov	w27, #0x0                   	// #0
    1204:	cmp	w1, #0x73
    1208:	b.ne	124c <d_exprlist+0x564>  // b.any
    120c:	ldrb	w0, [x26, #1]
    1210:	cmp	w0, #0x50
    1214:	b.ne	124c <d_exprlist+0x564>  // b.any
    1218:	ldrb	w0, [x26, #2]
    121c:	cbnz	w0, 124c <d_exprlist+0x564>
    1220:	mov	x0, x19
    1224:	bl	1ce0 <d_template_args_1>
    1228:	mov	x3, x0
    122c:	cbnz	w27, 125c <d_exprlist+0x574>
    1230:	ldr	x27, [sp, #80]
    1234:	mov	x2, x20
    1238:	mov	x0, x19
    123c:	mov	w1, #0x37                  	// #55
    1240:	bl	0 <d_make_comp>
    1244:	mov	x20, x0
    1248:	b	ea0 <d_exprlist+0x1b8>
    124c:	mov	x0, x19
    1250:	bl	1508 <d_expression_1>
    1254:	mov	x3, x0
    1258:	cbz	w27, 1230 <d_exprlist+0x548>
    125c:	mov	x2, x3
    1260:	mov	x0, x19
    1264:	mov	w1, #0x39                  	// #57
    1268:	bl	0 <d_make_comp>
    126c:	mov	x3, x0
    1270:	ldr	x27, [sp, #80]
    1274:	b	1234 <d_exprlist+0x54c>
    1278:	ldrb	w2, [x26, #1]
    127c:	cmp	w2, w0
    1280:	b.ne	1200 <d_exprlist+0x518>  // b.any
    1284:	ldr	x0, [x19, #24]
    1288:	ldrb	w2, [x0]
    128c:	cmp	w2, #0x5f
    1290:	b.ne	1204 <d_exprlist+0x51c>  // b.any
    1294:	add	x0, x0, #0x1
    1298:	str	x0, [x19, #24]
    129c:	mov	w27, #0x0                   	// #0
    12a0:	ldrb	w1, [x26]
    12a4:	b	1204 <d_exprlist+0x51c>
    12a8:	mov	x0, x19
    12ac:	bl	2b20 <d_type>
    12b0:	ldr	x1, [x19, #24]
    12b4:	mov	x20, x0
    12b8:	ldrb	w0, [x1, #1]
    12bc:	cbnz	w0, f70 <d_exprlist+0x288>
    12c0:	b	dc8 <d_exprlist+0xe0>
    12c4:	ldrb	w0, [x26, #1]
    12c8:	cmp	w0, #0x75
    12cc:	b.ne	1064 <d_exprlist+0x37c>  // b.any
    12d0:	ldrb	w0, [x26, #2]
    12d4:	cbnz	w0, 1064 <d_exprlist+0x37c>
    12d8:	mov	x0, x19
    12dc:	bl	1508 <d_expression_1>
    12e0:	mov	x26, x0
    12e4:	mov	x0, x19
    12e8:	bl	1508 <d_expression_1>
    12ec:	mov	x27, x0
    12f0:	mov	x0, x19
    12f4:	bl	1508 <d_expression_1>
    12f8:	mov	x3, x0
    12fc:	cbnz	x0, 10e0 <d_exprlist+0x3f8>
    1300:	mov	x20, #0x0                   	// #0
    1304:	ldr	x27, [sp, #80]
    1308:	str	w25, [x19, #76]
    130c:	b	dd0 <d_exprlist+0xe8>
    1310:	ldr	x0, [x20, #8]
    1314:	ldr	x0, [x0]
    1318:	ldrb	w1, [x0, #1]
    131c:	cmp	w1, #0x63
    1320:	b.eq	1454 <d_exprlist+0x76c>  // b.none
    1324:	ldrb	w0, [x26]
    1328:	cmp	w0, #0x66
    132c:	b.eq	1484 <d_exprlist+0x79c>  // b.none
    1330:	mov	x0, x19
    1334:	bl	1508 <d_expression_1>
    1338:	mov	x27, x0
    133c:	ldrb	w1, [x26]
    1340:	cmp	w1, #0x63
    1344:	b.ne	1370 <d_exprlist+0x688>  // b.any
    1348:	ldrb	w0, [x26, #1]
    134c:	cmp	w0, #0x6c
    1350:	b.ne	1370 <d_exprlist+0x688>  // b.any
    1354:	ldrb	w0, [x26, #2]
    1358:	cbnz	w0, 1370 <d_exprlist+0x688>
    135c:	mov	x0, x19
    1360:	mov	w1, #0x45                  	// #69
    1364:	bl	ce8 <d_exprlist>
    1368:	mov	x26, x0
    136c:	b	13a8 <d_exprlist+0x6c0>
    1370:	cmp	w1, #0x64
    1374:	b.ne	13dc <d_exprlist+0x6f4>  // b.any
    1378:	ldrb	w0, [x26, #1]
    137c:	cmp	w0, #0x74
    1380:	b.ne	13dc <d_exprlist+0x6f4>  // b.any
    1384:	ldrb	w0, [x26, #2]
    1388:	cbnz	w0, 13dc <d_exprlist+0x6f4>
    138c:	mov	x0, x19
    1390:	bl	3dd0 <d_unqualified_name>
    1394:	ldr	x1, [x19, #24]
    1398:	mov	x26, x0
    139c:	ldrb	w0, [x1]
    13a0:	cmp	w0, #0x49
    13a4:	b.eq	14a0 <d_exprlist+0x7b8>  // b.none
    13a8:	mov	x2, x27
    13ac:	mov	x3, x26
    13b0:	mov	w1, #0x39                  	// #57
    13b4:	mov	x0, x19
    13b8:	bl	0 <d_make_comp>
    13bc:	mov	x3, x0
    13c0:	mov	x2, x20
    13c4:	mov	x0, x19
    13c8:	mov	w1, #0x38                  	// #56
    13cc:	bl	0 <d_make_comp>
    13d0:	mov	x20, x0
    13d4:	ldr	x27, [sp, #80]
    13d8:	b	ea0 <d_exprlist+0x1b8>
    13dc:	cmp	w1, #0x70
    13e0:	b.ne	13f8 <d_exprlist+0x710>  // b.any
    13e4:	ldrb	w0, [x26, #1]
    13e8:	cmp	w0, #0x74
    13ec:	b.ne	13f8 <d_exprlist+0x710>  // b.any
    13f0:	ldrb	w0, [x26, #2]
    13f4:	cbz	w0, 138c <d_exprlist+0x6a4>
    13f8:	mov	x0, x19
    13fc:	bl	1508 <d_expression_1>
    1400:	mov	x26, x0
    1404:	b	13a8 <d_exprlist+0x6c0>
    1408:	add	x2, x2, #0x1
    140c:	str	x2, [x0, #24]
    1410:	ldp	x19, x20, [sp, #16]
    1414:	mov	x3, #0x0                   	// #0
    1418:	ldp	x29, x30, [sp], #112
    141c:	mov	w1, #0x2e                  	// #46
    1420:	mov	x2, #0x0                   	// #0
    1424:	b	0 <d_make_comp>
    1428:	ldr	x0, [x19, #24]
    142c:	ldrb	w1, [x0]
    1430:	cmp	w1, #0x5f
    1434:	b.ne	11e0 <d_exprlist+0x4f8>  // b.any
    1438:	add	x0, x0, #0x1
    143c:	str	x0, [x19, #24]
    1440:	mov	w1, #0x45                  	// #69
    1444:	mov	x0, x19
    1448:	bl	ce8 <d_exprlist>
    144c:	mov	x3, x0
    1450:	b	1234 <d_exprlist+0x54c>
    1454:	ldrb	w0, [x0]
    1458:	sub	w1, w0, #0x72
    145c:	sub	w0, w0, #0x63
    1460:	and	w1, w1, #0xff
    1464:	and	w0, w0, #0xff
    1468:	cmp	w1, #0x1
    146c:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    1470:	b.hi	1324 <d_exprlist+0x63c>  // b.pmore
    1474:	mov	x0, x19
    1478:	bl	2b20 <d_type>
    147c:	mov	x27, x0
    1480:	b	133c <d_exprlist+0x654>
    1484:	mov	x0, x19
    1488:	bl	3708 <d_operator_name>
    148c:	mov	x27, x0
    1490:	b	133c <d_exprlist+0x654>
    1494:	mov	x0, x19
    1498:	bl	3708 <d_operator_name>
    149c:	b	12e0 <d_exprlist+0x5f8>
    14a0:	add	x1, x1, #0x1
    14a4:	str	x1, [x19, #24]
    14a8:	mov	x0, x19
    14ac:	bl	1ce0 <d_template_args_1>
    14b0:	mov	x3, x0
    14b4:	mov	x2, x26
    14b8:	mov	x0, x19
    14bc:	mov	w1, #0x4                   	// #4
    14c0:	bl	0 <d_make_comp>
    14c4:	mov	x26, x0
    14c8:	b	13a8 <d_exprlist+0x6c0>
    14cc:	ldrb	w0, [x1, #1]
    14d0:	cmp	w0, #0x69
    14d4:	b.ne	1300 <d_exprlist+0x618>  // b.any
    14d8:	add	x1, x1, #0x2
    14dc:	str	x1, [x19, #24]
    14e0:	mov	x0, x19
    14e4:	mov	w1, #0x45                  	// #69
    14e8:	bl	ce8 <d_exprlist>
    14ec:	mov	x3, x0
    14f0:	b	10e0 <d_exprlist+0x3f8>
    14f4:	add	x1, x1, #0x1
    14f8:	mov	x3, #0x0                   	// #0
    14fc:	str	x1, [x19, #24]
    1500:	b	10e0 <d_exprlist+0x3f8>
    1504:	nop

0000000000001508 <d_expression_1>:
    1508:	ldr	x2, [x0, #24]
    150c:	ldrb	w1, [x2]
    1510:	cmp	w1, #0x4c
    1514:	b.eq	16a4 <d_expression_1+0x19c>  // b.none
    1518:	cmp	w1, #0x54
    151c:	b.eq	1728 <d_expression_1+0x220>  // b.none
    1520:	stp	x29, x30, [sp, #-48]!
    1524:	cmp	w1, #0x73
    1528:	mov	x29, sp
    152c:	stp	x19, x20, [sp, #16]
    1530:	mov	x19, x0
    1534:	b.eq	15ec <d_expression_1+0xe4>  // b.none
    1538:	cmp	w1, #0x66
    153c:	b.eq	1580 <d_expression_1+0x78>  // b.none
    1540:	sub	w3, w1, #0x30
    1544:	and	w3, w3, #0xff
    1548:	cmp	w3, #0x9
    154c:	b.hi	16a8 <d_expression_1+0x1a0>  // b.pmore
    1550:	mov	x0, x19
    1554:	bl	3dd0 <d_unqualified_name>
    1558:	mov	x20, x0
    155c:	cbz	x0, 1690 <d_expression_1+0x188>
    1560:	ldr	x0, [x19, #24]
    1564:	ldrb	w1, [x0]
    1568:	cmp	w1, #0x49
    156c:	b.eq	1800 <d_expression_1+0x2f8>  // b.none
    1570:	mov	x0, x20
    1574:	ldp	x19, x20, [sp, #16]
    1578:	ldp	x29, x30, [sp], #48
    157c:	ret
    1580:	ldrb	w1, [x2, #1]
    1584:	cmp	w1, #0x70
    1588:	b.eq	1628 <d_expression_1+0x120>  // b.none
    158c:	mov	x0, x19
    1590:	bl	3708 <d_operator_name>
    1594:	mov	x20, x0
    1598:	cbz	x0, 1690 <d_expression_1+0x188>
    159c:	ldr	w0, [x0]
    15a0:	cmp	w0, #0x32
    15a4:	b.eq	172c <d_expression_1+0x224>  // b.none
    15a8:	cmp	w0, #0x34
    15ac:	b.eq	1b58 <d_expression_1+0x650>  // b.none
    15b0:	b.hi	1690 <d_expression_1+0x188>  // b.pmore
    15b4:	cmp	w0, #0x33
    15b8:	b.ne	1690 <d_expression_1+0x188>  // b.any
    15bc:	ldr	w0, [x20, #8]
    15c0:	cmp	w0, #0x2
    15c4:	b.eq	1690 <d_expression_1+0x188>  // b.none
    15c8:	b.gt	1690 <d_expression_1+0x188>
    15cc:	cbnz	w0, 18f4 <d_expression_1+0x3ec>
    15d0:	mov	x2, x20
    15d4:	mov	x0, x19
    15d8:	ldp	x19, x20, [sp, #16]
    15dc:	mov	x3, #0x0                   	// #0
    15e0:	ldp	x29, x30, [sp], #48
    15e4:	mov	w1, #0x36                  	// #54
    15e8:	b	0 <d_make_comp>
    15ec:	ldrb	w1, [x2, #1]
    15f0:	cmp	w1, #0x72
    15f4:	b.eq	182c <d_expression_1+0x324>  // b.none
    15f8:	cmp	w1, #0x70
    15fc:	b.ne	158c <d_expression_1+0x84>  // b.any
    1600:	add	x2, x2, #0x2
    1604:	str	x2, [x0, #24]
    1608:	bl	1508 <d_expression_1>
    160c:	mov	x2, x0
    1610:	mov	x0, x19
    1614:	mov	x3, #0x0                   	// #0
    1618:	ldp	x19, x20, [sp, #16]
    161c:	mov	w1, #0x4b                  	// #75
    1620:	ldp	x29, x30, [sp], #48
    1624:	b	0 <d_make_comp>
    1628:	add	x1, x2, #0x2
    162c:	str	x1, [x0, #24]
    1630:	ldrb	w1, [x2, #2]
    1634:	cmp	w1, #0x54
    1638:	b.eq	19b8 <d_expression_1+0x4b0>  // b.none
    163c:	bl	3b8 <d_compact_number>
    1640:	mvn	x1, x0
    1644:	add	w0, w0, #0x1
    1648:	tst	x1, #0x7fffffff
    164c:	b.eq	1690 <d_expression_1+0x188>  // b.none
    1650:	ldp	w1, w2, [x19, #40]
    1654:	cmp	w1, w2
    1658:	b.ge	1690 <d_expression_1+0x188>  // b.tcont
    165c:	mov	w3, #0x18                  	// #24
    1660:	add	w4, w1, #0x1
    1664:	ldr	x2, [x19, #32]
    1668:	smull	x1, w1, w3
    166c:	mov	w3, #0x6                   	// #6
    1670:	sxtw	x0, w0
    1674:	add	x20, x2, x1
    1678:	str	wzr, [x20, #4]
    167c:	str	w4, [x19, #40]
    1680:	str	w3, [x2, x1]
    1684:	str	x0, [x20, #8]
    1688:	b	1570 <d_expression_1+0x68>
    168c:	ldp	x21, x22, [sp, #32]
    1690:	mov	x20, #0x0                   	// #0
    1694:	mov	x0, x20
    1698:	ldp	x19, x20, [sp, #16]
    169c:	ldp	x29, x30, [sp], #48
    16a0:	ret
    16a4:	b	42b0 <d_expr_primary>
    16a8:	cmp	w1, #0x6f
    16ac:	b.ne	16c8 <d_expression_1+0x1c0>  // b.any
    16b0:	ldrb	w0, [x2, #1]
    16b4:	cmp	w0, #0x6e
    16b8:	b.ne	158c <d_expression_1+0x84>  // b.any
    16bc:	add	x2, x2, #0x2
    16c0:	str	x2, [x19, #24]
    16c4:	b	1550 <d_expression_1+0x48>
    16c8:	cmp	w1, #0x69
    16cc:	mov	w3, #0x74                  	// #116
    16d0:	ccmp	w1, w3, #0x4, ne  // ne = any
    16d4:	b.ne	158c <d_expression_1+0x84>  // b.any
    16d8:	ldrb	w3, [x2, #1]
    16dc:	cmp	w3, #0x6c
    16e0:	b.ne	158c <d_expression_1+0x84>  // b.any
    16e4:	add	x3, x2, #0x2
    16e8:	str	x3, [x0, #24]
    16ec:	cmp	w1, #0x74
    16f0:	mov	x20, #0x0                   	// #0
    16f4:	b.eq	18e4 <d_expression_1+0x3dc>  // b.none
    16f8:	ldrb	w0, [x3, #1]
    16fc:	cbz	w0, 1690 <d_expression_1+0x188>
    1700:	mov	x0, x19
    1704:	mov	w1, #0x45                  	// #69
    1708:	bl	ce8 <d_exprlist>
    170c:	mov	x3, x0
    1710:	mov	x2, x20
    1714:	mov	x0, x19
    1718:	ldp	x19, x20, [sp, #16]
    171c:	mov	w1, #0x31                  	// #49
    1720:	ldp	x29, x30, [sp], #48
    1724:	b	0 <d_make_comp>
    1728:	b	430 <d_template_param>
    172c:	ldr	x2, [x20, #8]
    1730:	stp	x21, x22, [sp, #32]
    1734:	ldr	w0, [x19, #72]
    1738:	ldr	w1, [x2, #16]
    173c:	ldr	x21, [x2]
    1740:	sub	w1, w1, #0x2
    1744:	add	w0, w0, w1
    1748:	str	w0, [x19, #72]
    174c:	ldrb	w1, [x21]
    1750:	cmp	w1, #0x73
    1754:	b.eq	187c <d_expression_1+0x374>  // b.none
    1758:	ldr	w22, [x2, #20]
    175c:	cmp	w22, #0x1
    1760:	b.eq	192c <d_expression_1+0x424>  // b.none
    1764:	b.le	1920 <d_expression_1+0x418>
    1768:	cmp	w22, #0x2
    176c:	b.eq	19e4 <d_expression_1+0x4dc>  // b.none
    1770:	cmp	w22, #0x3
    1774:	b.ne	168c <d_expression_1+0x184>  // b.any
    1778:	cmp	w1, #0x71
    177c:	b.ne	1a74 <d_expression_1+0x56c>  // b.any
    1780:	ldrb	w0, [x21, #1]
    1784:	cmp	w0, #0x75
    1788:	b.ne	1a74 <d_expression_1+0x56c>  // b.any
    178c:	ldrb	w0, [x21, #2]
    1790:	cbnz	w0, 1a74 <d_expression_1+0x56c>
    1794:	mov	x0, x19
    1798:	bl	1508 <d_expression_1>
    179c:	mov	x21, x0
    17a0:	mov	x0, x19
    17a4:	bl	1508 <d_expression_1>
    17a8:	mov	x22, x0
    17ac:	mov	x0, x19
    17b0:	bl	1508 <d_expression_1>
    17b4:	mov	x3, x0
    17b8:	cbz	x0, 168c <d_expression_1+0x184>
    17bc:	mov	x2, x22
    17c0:	mov	x0, x19
    17c4:	mov	w1, #0x3c                  	// #60
    17c8:	bl	0 <d_make_comp>
    17cc:	mov	x2, x21
    17d0:	mov	x3, x0
    17d4:	mov	w1, #0x3b                  	// #59
    17d8:	mov	x0, x19
    17dc:	bl	0 <d_make_comp>
    17e0:	mov	x3, x0
    17e4:	mov	x2, x20
    17e8:	mov	x0, x19
    17ec:	ldp	x19, x20, [sp, #16]
    17f0:	mov	w1, #0x3a                  	// #58
    17f4:	ldp	x21, x22, [sp, #32]
    17f8:	ldp	x29, x30, [sp], #48
    17fc:	b	0 <d_make_comp>
    1800:	add	x0, x0, #0x1
    1804:	str	x0, [x19, #24]
    1808:	mov	x0, x19
    180c:	bl	1ce0 <d_template_args_1>
    1810:	mov	x3, x0
    1814:	mov	x2, x20
    1818:	mov	x0, x19
    181c:	ldp	x19, x20, [sp, #16]
    1820:	mov	w1, #0x4                   	// #4
    1824:	ldp	x29, x30, [sp], #48
    1828:	b	0 <d_make_comp>
    182c:	add	x2, x2, #0x2
    1830:	stp	x21, x22, [sp, #32]
    1834:	str	x2, [x0, #24]
    1838:	bl	2b20 <d_type>
    183c:	mov	x20, x0
    1840:	mov	x0, x19
    1844:	bl	3dd0 <d_unqualified_name>
    1848:	ldr	x1, [x19, #24]
    184c:	mov	x21, x0
    1850:	mov	x3, x21
    1854:	ldrb	w0, [x1]
    1858:	cmp	w0, #0x49
    185c:	b.eq	18b8 <d_expression_1+0x3b0>  // b.none
    1860:	mov	x2, x20
    1864:	mov	x0, x19
    1868:	ldp	x19, x20, [sp, #16]
    186c:	mov	w1, #0x1                   	// #1
    1870:	ldp	x21, x22, [sp, #32]
    1874:	ldp	x29, x30, [sp], #48
    1878:	b	0 <d_make_comp>
    187c:	ldrb	w0, [x21, #1]
    1880:	cmp	w0, #0x74
    1884:	b.ne	1758 <d_expression_1+0x250>  // b.any
    1888:	ldrb	w0, [x21, #2]
    188c:	cbnz	w0, 1758 <d_expression_1+0x250>
    1890:	mov	x0, x19
    1894:	bl	2b20 <d_type>
    1898:	mov	x2, x20
    189c:	mov	x3, x0
    18a0:	mov	x0, x19
    18a4:	mov	w1, #0x37                  	// #55
    18a8:	ldp	x19, x20, [sp, #16]
    18ac:	ldp	x21, x22, [sp, #32]
    18b0:	ldp	x29, x30, [sp], #48
    18b4:	b	0 <d_make_comp>
    18b8:	add	x1, x1, #0x1
    18bc:	str	x1, [x19, #24]
    18c0:	mov	x0, x19
    18c4:	bl	1ce0 <d_template_args_1>
    18c8:	mov	x3, x0
    18cc:	mov	x2, x21
    18d0:	mov	x0, x19
    18d4:	mov	w1, #0x4                   	// #4
    18d8:	bl	0 <d_make_comp>
    18dc:	mov	x3, x0
    18e0:	b	1860 <d_expression_1+0x358>
    18e4:	bl	2b20 <d_type>
    18e8:	mov	x20, x0
    18ec:	ldr	x3, [x19, #24]
    18f0:	b	16f8 <d_expression_1+0x1f0>
    18f4:	cmp	w0, #0x1
    18f8:	b.ne	1690 <d_expression_1+0x188>  // b.any
    18fc:	mov	x0, x19
    1900:	bl	1508 <d_expression_1>
    1904:	mov	x3, x0
    1908:	mov	x2, x20
    190c:	mov	x0, x19
    1910:	ldp	x19, x20, [sp, #16]
    1914:	mov	w1, #0x37                  	// #55
    1918:	ldp	x29, x30, [sp], #48
    191c:	b	0 <d_make_comp>
    1920:	cbnz	w22, 168c <d_expression_1+0x184>
    1924:	ldp	x21, x22, [sp, #32]
    1928:	b	15d0 <d_expression_1+0xc8>
    192c:	ldrb	w0, [x21]
    1930:	mov	w2, #0x6d                  	// #109
    1934:	cmp	w0, #0x70
    1938:	ccmp	w0, w2, #0x4, ne  // ne = any
    193c:	b.ne	194c <d_expression_1+0x444>  // b.any
    1940:	ldrb	w2, [x21, #1]
    1944:	cmp	w2, w0
    1948:	b.eq	1984 <d_expression_1+0x47c>  // b.none
    194c:	mov	w22, #0x0                   	// #0
    1950:	cmp	w1, #0x73
    1954:	b.ne	19a8 <d_expression_1+0x4a0>  // b.any
    1958:	ldrb	w0, [x21, #1]
    195c:	cmp	w0, #0x50
    1960:	b.ne	19a8 <d_expression_1+0x4a0>  // b.any
    1964:	ldrb	w0, [x21, #2]
    1968:	cbnz	w0, 19a8 <d_expression_1+0x4a0>
    196c:	mov	x0, x19
    1970:	bl	1ce0 <d_template_args_1>
    1974:	mov	x3, x0
    1978:	cbnz	w22, 19c8 <d_expression_1+0x4c0>
    197c:	ldp	x21, x22, [sp, #32]
    1980:	b	1908 <d_expression_1+0x400>
    1984:	ldr	x0, [x19, #24]
    1988:	ldrb	w2, [x0]
    198c:	cmp	w2, #0x5f
    1990:	b.ne	1950 <d_expression_1+0x448>  // b.any
    1994:	add	x0, x0, #0x1
    1998:	str	x0, [x19, #24]
    199c:	mov	w22, #0x0                   	// #0
    19a0:	ldrb	w1, [x21]
    19a4:	b	1950 <d_expression_1+0x448>
    19a8:	mov	x0, x19
    19ac:	bl	1508 <d_expression_1>
    19b0:	mov	x3, x0
    19b4:	b	1978 <d_expression_1+0x470>
    19b8:	add	x2, x2, #0x3
    19bc:	mov	w0, #0x0                   	// #0
    19c0:	str	x2, [x19, #24]
    19c4:	b	1650 <d_expression_1+0x148>
    19c8:	mov	x2, x3
    19cc:	mov	x0, x19
    19d0:	mov	w1, #0x39                  	// #57
    19d4:	bl	0 <d_make_comp>
    19d8:	mov	x3, x0
    19dc:	ldp	x21, x22, [sp, #32]
    19e0:	b	1908 <d_expression_1+0x400>
    19e4:	ldr	x0, [x20, #8]
    19e8:	ldr	x0, [x0]
    19ec:	ldrb	w1, [x0, #1]
    19f0:	cmp	w1, #0x63
    19f4:	b.eq	1b9c <d_expression_1+0x694>  // b.none
    19f8:	ldrb	w0, [x21]
    19fc:	cmp	w0, #0x66
    1a00:	b.eq	1bcc <d_expression_1+0x6c4>  // b.none
    1a04:	mov	x0, x19
    1a08:	bl	1508 <d_expression_1>
    1a0c:	mov	x22, x0
    1a10:	ldrb	w1, [x21]
    1a14:	cmp	w1, #0x63
    1a18:	b.ne	1af4 <d_expression_1+0x5ec>  // b.any
    1a1c:	ldrb	w0, [x21, #1]
    1a20:	cmp	w0, #0x6c
    1a24:	b.ne	1af4 <d_expression_1+0x5ec>  // b.any
    1a28:	ldrb	w0, [x21, #2]
    1a2c:	cbnz	w0, 1af4 <d_expression_1+0x5ec>
    1a30:	mov	x0, x19
    1a34:	mov	w1, #0x45                  	// #69
    1a38:	bl	ce8 <d_exprlist>
    1a3c:	mov	x21, x0
    1a40:	mov	x3, x21
    1a44:	mov	x2, x22
    1a48:	mov	x0, x19
    1a4c:	mov	w1, #0x39                  	// #57
    1a50:	bl	0 <d_make_comp>
    1a54:	mov	x3, x0
    1a58:	mov	x2, x20
    1a5c:	mov	x0, x19
    1a60:	ldp	x19, x20, [sp, #16]
    1a64:	mov	w1, #0x38                  	// #56
    1a68:	ldp	x21, x22, [sp, #32]
    1a6c:	ldp	x29, x30, [sp], #48
    1a70:	b	0 <d_make_comp>
    1a74:	ldrb	w0, [x21]
    1a78:	cmp	w0, #0x66
    1a7c:	b.eq	1bf4 <d_expression_1+0x6ec>  // b.none
    1a80:	cmp	w0, #0x6e
    1a84:	b.ne	168c <d_expression_1+0x184>  // b.any
    1a88:	ldrb	w0, [x21, #1]
    1a8c:	mov	w1, #0x61                  	// #97
    1a90:	cmp	w0, #0x77
    1a94:	ccmp	w0, w1, #0x4, ne  // ne = any
    1a98:	b.ne	168c <d_expression_1+0x184>  // b.any
    1a9c:	mov	w1, #0x5f                  	// #95
    1aa0:	mov	x0, x19
    1aa4:	bl	ce8 <d_exprlist>
    1aa8:	mov	x21, x0
    1aac:	mov	x0, x19
    1ab0:	bl	2b20 <d_type>
    1ab4:	ldr	x1, [x19, #24]
    1ab8:	mov	x22, x0
    1abc:	ldrb	w0, [x1]
    1ac0:	cmp	w0, #0x45
    1ac4:	b.eq	1c28 <d_expression_1+0x720>  // b.none
    1ac8:	cmp	w0, #0x70
    1acc:	b.eq	1c00 <d_expression_1+0x6f8>  // b.none
    1ad0:	cmp	w0, #0x69
    1ad4:	b.ne	168c <d_expression_1+0x184>  // b.any
    1ad8:	ldrb	w0, [x1, #1]
    1adc:	cmp	w0, #0x6c
    1ae0:	b.ne	168c <d_expression_1+0x184>  // b.any
    1ae4:	mov	x0, x19
    1ae8:	bl	1508 <d_expression_1>
    1aec:	mov	x3, x0
    1af0:	b	17bc <d_expression_1+0x2b4>
    1af4:	cmp	w1, #0x64
    1af8:	b.ne	1b84 <d_expression_1+0x67c>  // b.any
    1afc:	ldrb	w0, [x21, #1]
    1b00:	cmp	w0, #0x74
    1b04:	b.ne	1b84 <d_expression_1+0x67c>  // b.any
    1b08:	ldrb	w0, [x21, #2]
    1b0c:	cbnz	w0, 1b84 <d_expression_1+0x67c>
    1b10:	mov	x0, x19
    1b14:	bl	3dd0 <d_unqualified_name>
    1b18:	ldr	x1, [x19, #24]
    1b1c:	mov	x21, x0
    1b20:	ldrb	w0, [x1]
    1b24:	cmp	w0, #0x49
    1b28:	b.ne	1a40 <d_expression_1+0x538>  // b.any
    1b2c:	add	x1, x1, #0x1
    1b30:	str	x1, [x19, #24]
    1b34:	mov	x0, x19
    1b38:	bl	1ce0 <d_template_args_1>
    1b3c:	mov	x3, x0
    1b40:	mov	x2, x21
    1b44:	mov	x0, x19
    1b48:	mov	w1, #0x4                   	// #4
    1b4c:	bl	0 <d_make_comp>
    1b50:	mov	x21, x0
    1b54:	b	1a40 <d_expression_1+0x538>
    1b58:	ldr	x0, [x19, #24]
    1b5c:	ldrb	w1, [x0]
    1b60:	cmp	w1, #0x5f
    1b64:	b.ne	18fc <d_expression_1+0x3f4>  // b.any
    1b68:	add	x0, x0, #0x1
    1b6c:	str	x0, [x19, #24]
    1b70:	mov	w1, #0x45                  	// #69
    1b74:	mov	x0, x19
    1b78:	bl	ce8 <d_exprlist>
    1b7c:	mov	x3, x0
    1b80:	b	1908 <d_expression_1+0x400>
    1b84:	cmp	w1, #0x70
    1b88:	b.eq	1bdc <d_expression_1+0x6d4>  // b.none
    1b8c:	mov	x0, x19
    1b90:	bl	1508 <d_expression_1>
    1b94:	mov	x21, x0
    1b98:	b	1a40 <d_expression_1+0x538>
    1b9c:	ldrb	w0, [x0]
    1ba0:	sub	w1, w0, #0x63
    1ba4:	sub	w0, w0, #0x72
    1ba8:	and	w1, w1, #0xff
    1bac:	and	w0, w0, #0xff
    1bb0:	cmp	w1, #0x1
    1bb4:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    1bb8:	b.hi	19f8 <d_expression_1+0x4f0>  // b.pmore
    1bbc:	mov	x0, x19
    1bc0:	bl	2b20 <d_type>
    1bc4:	mov	x22, x0
    1bc8:	b	1a10 <d_expression_1+0x508>
    1bcc:	mov	x0, x19
    1bd0:	bl	3708 <d_operator_name>
    1bd4:	mov	x22, x0
    1bd8:	b	1a10 <d_expression_1+0x508>
    1bdc:	ldrb	w0, [x21, #1]
    1be0:	cmp	w0, #0x74
    1be4:	b.ne	1b8c <d_expression_1+0x684>  // b.any
    1be8:	ldrb	w0, [x21, #2]
    1bec:	cbz	w0, 1b10 <d_expression_1+0x608>
    1bf0:	b	1b8c <d_expression_1+0x684>
    1bf4:	mov	x0, x19
    1bf8:	bl	3708 <d_operator_name>
    1bfc:	b	179c <d_expression_1+0x294>
    1c00:	ldrb	w0, [x1, #1]
    1c04:	cmp	w0, #0x69
    1c08:	b.ne	168c <d_expression_1+0x184>  // b.any
    1c0c:	add	x1, x1, #0x2
    1c10:	str	x1, [x19, #24]
    1c14:	mov	x0, x19
    1c18:	mov	w1, #0x45                  	// #69
    1c1c:	bl	ce8 <d_exprlist>
    1c20:	mov	x3, x0
    1c24:	b	17bc <d_expression_1+0x2b4>
    1c28:	add	x1, x1, #0x1
    1c2c:	mov	x3, #0x0                   	// #0
    1c30:	str	x1, [x19, #24]
    1c34:	b	17bc <d_expression_1+0x2b4>

0000000000001c38 <d_template_arg>:
    1c38:	ldr	x2, [x0, #24]
    1c3c:	ldrb	w1, [x2]
    1c40:	cmp	w1, #0x4c
    1c44:	b.eq	1cd0 <d_template_arg+0x98>  // b.none
    1c48:	stp	x29, x30, [sp, #-32]!
    1c4c:	mov	x29, sp
    1c50:	stp	x19, x20, [sp, #16]
    1c54:	mov	x19, x0
    1c58:	b.hi	1c78 <d_template_arg+0x40>  // b.pmore
    1c5c:	sub	w1, w1, #0x49
    1c60:	and	w1, w1, #0xff
    1c64:	cmp	w1, #0x1
    1c68:	b.hi	1cc0 <d_template_arg+0x88>  // b.pmore
    1c6c:	ldp	x19, x20, [sp, #16]
    1c70:	ldp	x29, x30, [sp], #32
    1c74:	b	1da8 <d_template_args>
    1c78:	cmp	w1, #0x58
    1c7c:	b.ne	1cc0 <d_template_arg+0x88>  // b.any
    1c80:	add	x2, x2, #0x1
    1c84:	ldr	w20, [x0, #76]
    1c88:	mov	w1, #0x1                   	// #1
    1c8c:	str	x2, [x0, #24]
    1c90:	str	w1, [x0, #76]
    1c94:	bl	1508 <d_expression_1>
    1c98:	str	w20, [x19, #76]
    1c9c:	ldr	x1, [x19, #24]
    1ca0:	ldrb	w2, [x1]
    1ca4:	cmp	w2, #0x45
    1ca8:	b.ne	1cd4 <d_template_arg+0x9c>  // b.any
    1cac:	add	x1, x1, #0x1
    1cb0:	str	x1, [x19, #24]
    1cb4:	ldp	x19, x20, [sp, #16]
    1cb8:	ldp	x29, x30, [sp], #32
    1cbc:	ret
    1cc0:	mov	x0, x19
    1cc4:	ldp	x19, x20, [sp, #16]
    1cc8:	ldp	x29, x30, [sp], #32
    1ccc:	b	2b20 <d_type>
    1cd0:	b	42b0 <d_expr_primary>
    1cd4:	mov	x0, #0x0                   	// #0
    1cd8:	b	1cb4 <d_template_arg+0x7c>
    1cdc:	nop

0000000000001ce0 <d_template_args_1>:
    1ce0:	stp	x29, x30, [sp, #-64]!
    1ce4:	mov	x29, sp
    1ce8:	ldr	x1, [x0, #24]
    1cec:	stp	x19, x20, [sp, #16]
    1cf0:	mov	x19, x0
    1cf4:	str	x21, [sp, #32]
    1cf8:	ldr	x21, [x0, #64]
    1cfc:	ldrb	w2, [x1]
    1d00:	cmp	w2, #0x45
    1d04:	b.eq	1d84 <d_template_args_1+0xa4>  // b.none
    1d08:	add	x20, sp, #0x38
    1d0c:	str	xzr, [sp, #56]
    1d10:	b	1d34 <d_template_args_1+0x54>
    1d14:	bl	0 <d_make_comp>
    1d18:	str	x0, [x20]
    1d1c:	add	x20, x0, #0x10
    1d20:	cbz	x0, 1d50 <d_template_args_1+0x70>
    1d24:	ldr	x1, [x19, #24]
    1d28:	ldrb	w0, [x1]
    1d2c:	cmp	w0, #0x45
    1d30:	b.eq	1d64 <d_template_args_1+0x84>  // b.none
    1d34:	mov	x0, x19
    1d38:	bl	1c38 <d_template_arg>
    1d3c:	mov	x3, #0x0                   	// #0
    1d40:	mov	x2, x0
    1d44:	mov	w1, #0x2f                  	// #47
    1d48:	mov	x0, x19
    1d4c:	cbnz	x2, 1d14 <d_template_args_1+0x34>
    1d50:	mov	x0, #0x0                   	// #0
    1d54:	ldp	x19, x20, [sp, #16]
    1d58:	ldr	x21, [sp, #32]
    1d5c:	ldp	x29, x30, [sp], #64
    1d60:	ret
    1d64:	add	x1, x1, #0x1
    1d68:	str	x1, [x19, #24]
    1d6c:	str	x21, [x19, #64]
    1d70:	ldp	x19, x20, [sp, #16]
    1d74:	ldr	x21, [sp, #32]
    1d78:	ldr	x0, [sp, #56]
    1d7c:	ldp	x29, x30, [sp], #64
    1d80:	ret
    1d84:	add	x1, x1, #0x1
    1d88:	mov	x3, #0x0                   	// #0
    1d8c:	ldr	x21, [sp, #32]
    1d90:	str	x1, [x0, #24]
    1d94:	ldp	x19, x20, [sp, #16]
    1d98:	mov	x2, #0x0                   	// #0
    1d9c:	ldp	x29, x30, [sp], #64
    1da0:	mov	w1, #0x2f                  	// #47
    1da4:	b	0 <d_make_comp>

0000000000001da8 <d_template_args>:
    1da8:	ldr	x3, [x0, #24]
    1dac:	ldrb	w1, [x3]
    1db0:	sub	w1, w1, #0x49
    1db4:	and	w1, w1, #0xff
    1db8:	cmp	w1, #0x1
    1dbc:	b.hi	1dcc <d_template_args+0x24>  // b.pmore
    1dc0:	add	x3, x3, #0x1
    1dc4:	str	x3, [x0, #24]
    1dc8:	b	1ce0 <d_template_args_1>
    1dcc:	mov	x0, #0x0                   	// #0
    1dd0:	ret
    1dd4:	nop

0000000000001dd8 <d_encoding>:
    1dd8:	stp	x29, x30, [sp, #-48]!
    1ddc:	mov	w3, #0x54                  	// #84
    1de0:	mov	x29, sp
    1de4:	ldr	x2, [x0, #24]
    1de8:	stp	x19, x20, [sp, #16]
    1dec:	mov	x19, x0
    1df0:	str	x21, [sp, #32]
    1df4:	mov	w21, w1
    1df8:	ldrb	w1, [x2]
    1dfc:	cmp	w1, #0x47
    1e00:	ccmp	w1, w3, #0x4, ne  // ne = any
    1e04:	b.ne	1e90 <d_encoding+0xb8>  // b.any
    1e08:	ldr	w3, [x0, #72]
    1e0c:	add	w1, w3, #0x14
    1e10:	str	w1, [x0, #72]
    1e14:	ldrb	w1, [x2]
    1e18:	cmp	w1, #0x54
    1e1c:	b.eq	1fb4 <d_encoding+0x1dc>  // b.none
    1e20:	cmp	w1, #0x47
    1e24:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    1e28:	add	x1, x2, #0x1
    1e2c:	str	x1, [x0, #24]
    1e30:	ldrb	w1, [x2, #1]
    1e34:	cbz	w1, 1f9c <d_encoding+0x1c4>
    1e38:	add	x1, x2, #0x2
    1e3c:	str	x1, [x0, #24]
    1e40:	ldrb	w1, [x2, #1]
    1e44:	cmp	w1, #0x54
    1e48:	b.eq	2350 <d_encoding+0x578>  // b.none
    1e4c:	b.hi	201c <d_encoding+0x244>  // b.pmore
    1e50:	cmp	w1, #0x41
    1e54:	b.eq	2398 <d_encoding+0x5c0>  // b.none
    1e58:	cmp	w1, #0x52
    1e5c:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    1e60:	bl	2598 <d_name>
    1e64:	mov	x11, x0
    1e68:	mov	x0, x19
    1e6c:	bl	350 <d_number_component>
    1e70:	mov	x3, x0
    1e74:	mov	x0, x19
    1e78:	mov	x2, x11
    1e7c:	ldp	x19, x20, [sp, #16]
    1e80:	mov	w1, #0x16                  	// #22
    1e84:	ldr	x21, [sp, #32]
    1e88:	ldp	x29, x30, [sp], #48
    1e8c:	b	0 <d_make_comp>
    1e90:	bl	2598 <d_name>
    1e94:	mov	x20, x0
    1e98:	cbz	x0, 1f9c <d_encoding+0x1c4>
    1e9c:	cbz	w21, 1eec <d_encoding+0x114>
    1ea0:	ldr	w0, [x19, #16]
    1ea4:	tbnz	w0, #0, 1eec <d_encoding+0x114>
    1ea8:	mov	x1, #0x1f                  	// #31
    1eac:	mov	x2, #0x1                   	// #1
    1eb0:	movk	x1, #0x1a, lsl #48
    1eb4:	ldr	w3, [x20]
    1eb8:	sub	w0, w3, #0x1c
    1ebc:	cmp	w0, #0x34
    1ec0:	b.hi	1ed0 <d_encoding+0xf8>  // b.pmore
    1ec4:	lsl	x0, x2, x0
    1ec8:	tst	x0, x1
    1ecc:	b.ne	2204 <d_encoding+0x42c>  // b.any
    1ed0:	cmp	w3, #0x2
    1ed4:	b.eq	220c <d_encoding+0x434>  // b.none
    1ed8:	mov	x0, x20
    1edc:	ldp	x19, x20, [sp, #16]
    1ee0:	ldr	x21, [sp, #32]
    1ee4:	ldp	x29, x30, [sp], #48
    1ee8:	ret
    1eec:	ldr	x0, [x19, #24]
    1ef0:	ldrb	w0, [x0]
    1ef4:	cmp	w0, #0x45
    1ef8:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    1efc:	b.eq	1ed8 <d_encoding+0x100>  // b.none
    1f00:	mov	x1, #0x1f                  	// #31
    1f04:	mov	x4, x20
    1f08:	mov	x2, #0x1                   	// #1
    1f0c:	movk	x1, #0x1a, lsl #48
    1f10:	ldr	w3, [x4]
    1f14:	cmp	w3, #0x4
    1f18:	b.eq	2280 <d_encoding+0x4a8>  // b.none
    1f1c:	sub	w0, w3, #0x1c
    1f20:	b.hi	2110 <d_encoding+0x338>  // b.pmore
    1f24:	cmp	w3, #0x2
    1f28:	b.ne	1f34 <d_encoding+0x15c>  // b.any
    1f2c:	ldr	x4, [x4, #16]
    1f30:	cbnz	x4, 1f10 <d_encoding+0x138>
    1f34:	mov	w1, #0x0                   	// #0
    1f38:	mov	x0, x19
    1f3c:	bl	3c60 <d_bare_function_type>
    1f40:	mov	x3, x0
    1f44:	cbz	x0, 1f9c <d_encoding+0x1c4>
    1f48:	cbnz	w21, 1f68 <d_encoding+0x190>
    1f4c:	ldr	w0, [x20]
    1f50:	cmp	w0, #0x2
    1f54:	b.ne	1f68 <d_encoding+0x190>  // b.any
    1f58:	ldr	w0, [x3]
    1f5c:	cmp	w0, #0x29
    1f60:	b.ne	1f68 <d_encoding+0x190>  // b.any
    1f64:	str	xzr, [x3, #8]
    1f68:	mov	x2, x20
    1f6c:	mov	x0, x19
    1f70:	ldp	x19, x20, [sp, #16]
    1f74:	mov	w1, #0x3                   	// #3
    1f78:	ldr	x21, [sp, #32]
    1f7c:	ldp	x29, x30, [sp], #48
    1f80:	b	0 <d_make_comp>
    1f84:	cmp	w1, #0x68
    1f88:	b.eq	252c <d_encoding+0x754>  // b.none
    1f8c:	cmp	w1, #0x76
    1f90:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    1f94:	bl	918 <d_call_offset>
    1f98:	cbnz	w0, 2254 <d_encoding+0x47c>
    1f9c:	mov	x20, #0x0                   	// #0
    1fa0:	mov	x0, x20
    1fa4:	ldp	x19, x20, [sp, #16]
    1fa8:	ldr	x21, [sp, #32]
    1fac:	ldp	x29, x30, [sp], #48
    1fb0:	ret
    1fb4:	add	x1, x2, #0x1
    1fb8:	str	x1, [x0, #24]
    1fbc:	ldrb	w1, [x2, #1]
    1fc0:	cbz	w1, 1f9c <d_encoding+0x1c4>
    1fc4:	add	x1, x2, #0x2
    1fc8:	str	x1, [x0, #24]
    1fcc:	ldrb	w1, [x2, #1]
    1fd0:	cmp	w1, #0x53
    1fd4:	b.eq	249c <d_encoding+0x6c4>  // b.none
    1fd8:	b.hi	2190 <d_encoding+0x3b8>  // b.pmore
    1fdc:	cmp	w1, #0x48
    1fe0:	b.eq	2478 <d_encoding+0x6a0>  // b.none
    1fe4:	b.hi	215c <d_encoding+0x384>  // b.pmore
    1fe8:	cmp	w1, #0x43
    1fec:	b.eq	2418 <d_encoding+0x640>  // b.none
    1ff0:	cmp	w1, #0x46
    1ff4:	b.ne	2130 <d_encoding+0x358>  // b.any
    1ff8:	bl	2b20 <d_type>
    1ffc:	mov	x2, x0
    2000:	mov	x0, x19
    2004:	mov	x3, #0x0                   	// #0
    2008:	ldp	x19, x20, [sp, #16]
    200c:	mov	w1, #0xe                   	// #14
    2010:	ldr	x21, [sp, #32]
    2014:	ldp	x29, x30, [sp], #48
    2018:	b	0 <d_make_comp>
    201c:	cmp	w1, #0x56
    2020:	b.eq	232c <d_encoding+0x554>  // b.none
    2024:	cmp	w1, #0x72
    2028:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    202c:	add	x0, x0, #0x18
    2030:	bl	280 <d_number.isra.0>
    2034:	cmp	w0, #0x1
    2038:	b.le	1f9c <d_encoding+0x1c4>
    203c:	ldr	x1, [x19, #24]
    2040:	ldrb	w2, [x1]
    2044:	cbz	w2, 1f9c <d_encoding+0x1c4>
    2048:	add	x8, x1, #0x1
    204c:	str	x8, [x19, #24]
    2050:	ldrb	w1, [x1]
    2054:	cmp	w1, #0x5f
    2058:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    205c:	sub	w9, w0, #0x1
    2060:	mov	x2, #0x0                   	// #0
    2064:	mov	w11, #0x18                  	// #24
    2068:	mov	w10, #0x41                  	// #65
    206c:	ldrb	w0, [x8]
    2070:	cbz	w0, 1f9c <d_encoding+0x1c4>
    2074:	cmp	w0, #0x24
    2078:	b.ne	22c4 <d_encoding+0x4ec>  // b.any
    207c:	ldrb	w0, [x8, #1]
    2080:	cmp	w0, #0x53
    2084:	b.eq	23d0 <d_encoding+0x5f8>  // b.none
    2088:	cmp	w0, #0x5f
    208c:	b.eq	23c8 <d_encoding+0x5f0>  // b.none
    2090:	cmp	w0, #0x24
    2094:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    2098:	ldp	w1, w3, [x19, #40]
    209c:	ldr	x8, [x19, #24]
    20a0:	cmp	w1, w3
    20a4:	add	x8, x8, #0x2
    20a8:	b.ge	2560 <d_encoding+0x788>  // b.tcont
    20ac:	ldr	x5, [x19, #32]
    20b0:	smull	x4, w1, w11
    20b4:	add	w1, w1, #0x1
    20b8:	sub	w9, w9, #0x2
    20bc:	add	x3, x5, x4
    20c0:	str	wzr, [x3, #4]
    20c4:	str	w1, [x19, #40]
    20c8:	str	w10, [x5, x4]
    20cc:	str	w0, [x3, #8]
    20d0:	str	x8, [x19, #24]
    20d4:	cbz	x2, 23c0 <d_encoding+0x5e8>
    20d8:	mov	x0, x19
    20dc:	mov	w1, #0x40                  	// #64
    20e0:	bl	0 <d_make_comp>
    20e4:	mov	x2, x0
    20e8:	cbz	x0, 1f9c <d_encoding+0x1c4>
    20ec:	cmp	w9, #0x0
    20f0:	b.gt	206c <d_encoding+0x294>
    20f4:	mov	x0, x19
    20f8:	mov	x3, #0x0                   	// #0
    20fc:	ldp	x19, x20, [sp, #16]
    2100:	mov	w1, #0x3f                  	// #63
    2104:	ldr	x21, [sp, #32]
    2108:	ldp	x29, x30, [sp], #48
    210c:	b	0 <d_make_comp>
    2110:	cmp	w0, #0x34
    2114:	b.hi	1f34 <d_encoding+0x15c>  // b.pmore
    2118:	lsl	x0, x2, x0
    211c:	tst	x0, x1
    2120:	b.eq	1f34 <d_encoding+0x15c>  // b.none
    2124:	ldr	x4, [x4, #8]
    2128:	cbnz	x4, 1f10 <d_encoding+0x138>
    212c:	b	1f34 <d_encoding+0x15c>
    2130:	cmp	w1, #0x41
    2134:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    2138:	bl	1c38 <d_template_arg>
    213c:	mov	x2, x0
    2140:	mov	x0, x19
    2144:	mov	x3, #0x0                   	// #0
    2148:	ldp	x19, x20, [sp, #16]
    214c:	mov	w1, #0x30                  	// #48
    2150:	ldr	x21, [sp, #32]
    2154:	ldp	x29, x30, [sp], #48
    2158:	b	0 <d_make_comp>
    215c:	cmp	w1, #0x49
    2160:	b.eq	2508 <d_encoding+0x730>  // b.none
    2164:	cmp	w1, #0x4a
    2168:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    216c:	bl	2b20 <d_type>
    2170:	mov	x2, x0
    2174:	mov	x0, x19
    2178:	mov	x3, #0x0                   	// #0
    217c:	ldp	x19, x20, [sp, #16]
    2180:	mov	w1, #0x12                  	// #18
    2184:	ldr	x21, [sp, #32]
    2188:	ldp	x29, x30, [sp], #48
    218c:	b	0 <d_make_comp>
    2190:	cmp	w1, #0x63
    2194:	b.eq	24c0 <d_encoding+0x6e8>  // b.none
    2198:	b.hi	1f84 <d_encoding+0x1ac>  // b.pmore
    219c:	cmp	w1, #0x56
    21a0:	b.eq	23ec <d_encoding+0x614>  // b.none
    21a4:	cmp	w1, #0x57
    21a8:	b.ne	21d0 <d_encoding+0x3f8>  // b.any
    21ac:	bl	2598 <d_name>
    21b0:	mov	x2, x0
    21b4:	mov	x0, x19
    21b8:	mov	x3, #0x0                   	// #0
    21bc:	ldp	x19, x20, [sp, #16]
    21c0:	mov	w1, #0x15                  	// #21
    21c4:	ldr	x21, [sp, #32]
    21c8:	ldp	x29, x30, [sp], #48
    21cc:	b	0 <d_make_comp>
    21d0:	cmp	w1, #0x54
    21d4:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    21d8:	add	w3, w3, #0xa
    21dc:	str	w3, [x0, #72]
    21e0:	bl	2b20 <d_type>
    21e4:	mov	x2, x0
    21e8:	mov	x0, x19
    21ec:	mov	x3, #0x0                   	// #0
    21f0:	ldp	x19, x20, [sp, #16]
    21f4:	mov	w1, #0xa                   	// #10
    21f8:	ldr	x21, [sp, #32]
    21fc:	ldp	x29, x30, [sp], #48
    2200:	b	0 <d_make_comp>
    2204:	ldr	x20, [x20, #8]
    2208:	b	1eb4 <d_encoding+0xdc>
    220c:	ldr	x3, [x20, #16]
    2210:	mov	x1, #0x1f                  	// #31
    2214:	mov	x2, #0x1                   	// #1
    2218:	movk	x1, #0x1a, lsl #48
    221c:	ldr	w0, [x3]
    2220:	sub	w0, w0, #0x1c
    2224:	cmp	w0, #0x34
    2228:	b.hi	1ed8 <d_encoding+0x100>  // b.pmore
    222c:	lsl	x0, x2, x0
    2230:	tst	x0, x1
    2234:	b.eq	1ed8 <d_encoding+0x100>  // b.none
    2238:	ldr	x3, [x3, #8]
    223c:	str	x3, [x20, #16]
    2240:	ldr	w0, [x3]
    2244:	sub	w0, w0, #0x1c
    2248:	cmp	w0, #0x34
    224c:	b.ls	222c <d_encoding+0x454>  // b.plast
    2250:	b	1ed8 <d_encoding+0x100>
    2254:	mov	x0, x19
    2258:	mov	w1, #0x0                   	// #0
    225c:	bl	1dd8 <d_encoding>
    2260:	mov	x2, x0
    2264:	mov	x0, x19
    2268:	mov	x3, #0x0                   	// #0
    226c:	ldp	x19, x20, [sp, #16]
    2270:	mov	w1, #0x10                  	// #16
    2274:	ldr	x21, [sp, #32]
    2278:	ldp	x29, x30, [sp], #48
    227c:	b	0 <d_make_comp>
    2280:	ldr	x1, [x4, #8]
    2284:	cbz	x1, 22b0 <d_encoding+0x4d8>
    2288:	ldr	w0, [x1]
    228c:	sub	w2, w0, #0x1
    2290:	cmp	w0, #0x8
    2294:	b.hi	22b8 <d_encoding+0x4e0>  // b.pmore
    2298:	cmp	w0, #0x6
    229c:	b.hi	1f34 <d_encoding+0x15c>  // b.pmore
    22a0:	cmp	w2, #0x1
    22a4:	b.hi	22b0 <d_encoding+0x4d8>  // b.pmore
    22a8:	ldr	x1, [x1, #16]
    22ac:	cbnz	x1, 2288 <d_encoding+0x4b0>
    22b0:	mov	w1, #0x1                   	// #1
    22b4:	b	1f38 <d_encoding+0x160>
    22b8:	cmp	w0, #0x35
    22bc:	cset	w1, ne  // ne = any
    22c0:	b	1f38 <d_encoding+0x160>
    22c4:	mov	x1, #0x1                   	// #1
    22c8:	b	22d0 <d_encoding+0x4f8>
    22cc:	mov	x1, x4
    22d0:	cmp	w9, w1
    22d4:	mov	w5, w1
    22d8:	b.le	22f0 <d_encoding+0x518>
    22dc:	ldrb	w3, [x8, x1]
    22e0:	add	x4, x1, #0x1
    22e4:	cmp	w3, #0x24
    22e8:	ccmp	w3, #0x0, #0x4, ne  // ne = any
    22ec:	b.ne	22cc <d_encoding+0x4f4>  // b.any
    22f0:	ldp	w3, w0, [x19, #40]
    22f4:	cmp	w3, w0
    22f8:	b.ge	23d8 <d_encoding+0x600>  // b.tcont
    22fc:	ldr	x4, [x19, #32]
    2300:	add	w0, w3, #0x1
    2304:	sub	w9, w9, w5
    2308:	smaddl	x3, w3, w11, x4
    230c:	str	wzr, [x3, #4]
    2310:	str	w0, [x19, #40]
    2314:	stp	xzr, x8, [x3]
    2318:	ldr	x8, [x19, #24]
    231c:	str	w5, [x3, #16]
    2320:	add	x8, x8, x1
    2324:	str	x8, [x19, #24]
    2328:	b	20d4 <d_encoding+0x2fc>
    232c:	bl	2598 <d_name>
    2330:	mov	x2, x0
    2334:	mov	x0, x19
    2338:	mov	x3, #0x0                   	// #0
    233c:	ldp	x19, x20, [sp, #16]
    2340:	mov	w1, #0x13                  	// #19
    2344:	ldr	x21, [sp, #32]
    2348:	ldp	x29, x30, [sp], #48
    234c:	b	0 <d_make_comp>
    2350:	ldrb	w1, [x2, #2]
    2354:	cbz	w1, 236c <d_encoding+0x594>
    2358:	add	x1, x2, #0x3
    235c:	str	x1, [x0, #24]
    2360:	ldrb	w1, [x2, #2]
    2364:	cmp	w1, #0x6e
    2368:	b.eq	256c <d_encoding+0x794>  // b.none
    236c:	mov	x0, x19
    2370:	mov	w1, #0x0                   	// #0
    2374:	bl	1dd8 <d_encoding>
    2378:	mov	x2, x0
    237c:	mov	x0, x19
    2380:	mov	x3, #0x0                   	// #0
    2384:	ldp	x19, x20, [sp, #16]
    2388:	mov	w1, #0x49                  	// #73
    238c:	ldr	x21, [sp, #32]
    2390:	ldp	x29, x30, [sp], #48
    2394:	b	0 <d_make_comp>
    2398:	mov	w1, #0x0                   	// #0
    239c:	bl	1dd8 <d_encoding>
    23a0:	mov	x2, x0
    23a4:	mov	x0, x19
    23a8:	ldp	x19, x20, [sp, #16]
    23ac:	mov	x3, #0x0                   	// #0
    23b0:	ldr	x21, [sp, #32]
    23b4:	mov	w1, #0x17                  	// #23
    23b8:	ldp	x29, x30, [sp], #48
    23bc:	b	0 <d_make_comp>
    23c0:	mov	x2, x3
    23c4:	b	20ec <d_encoding+0x314>
    23c8:	mov	w0, #0x2e                  	// #46
    23cc:	b	2098 <d_encoding+0x2c0>
    23d0:	mov	w0, #0x2f                  	// #47
    23d4:	b	2098 <d_encoding+0x2c0>
    23d8:	ldr	x0, [x19, #24]
    23dc:	mov	x20, #0x0                   	// #0
    23e0:	add	x1, x0, x1
    23e4:	str	x1, [x19, #24]
    23e8:	b	1ed8 <d_encoding+0x100>
    23ec:	add	w3, w3, #0xf
    23f0:	str	w3, [x0, #72]
    23f4:	bl	2b20 <d_type>
    23f8:	mov	x2, x0
    23fc:	mov	x0, x19
    2400:	mov	x3, #0x0                   	// #0
    2404:	ldp	x19, x20, [sp, #16]
    2408:	mov	w1, #0x9                   	// #9
    240c:	ldr	x21, [sp, #32]
    2410:	ldp	x29, x30, [sp], #48
    2414:	b	0 <d_make_comp>
    2418:	bl	2b20 <d_type>
    241c:	mov	x20, x0
    2420:	add	x0, x19, #0x18
    2424:	bl	280 <d_number.isra.0>
    2428:	tbnz	w0, #31, 1f9c <d_encoding+0x1c4>
    242c:	ldr	x0, [x19, #24]
    2430:	ldrb	w1, [x0]
    2434:	cmp	w1, #0x5f
    2438:	b.ne	1f9c <d_encoding+0x1c4>  // b.any
    243c:	add	x0, x0, #0x1
    2440:	str	x0, [x19, #24]
    2444:	mov	x0, x19
    2448:	bl	2b20 <d_type>
    244c:	mov	x2, x0
    2450:	ldr	w1, [x19, #72]
    2454:	mov	x3, x20
    2458:	ldr	x21, [sp, #32]
    245c:	add	w1, w1, #0x5
    2460:	str	w1, [x19, #72]
    2464:	mov	x0, x19
    2468:	ldp	x19, x20, [sp, #16]
    246c:	mov	w1, #0xb                   	// #11
    2470:	ldp	x29, x30, [sp], #48
    2474:	b	0 <d_make_comp>
    2478:	bl	2598 <d_name>
    247c:	mov	x2, x0
    2480:	mov	x0, x19
    2484:	mov	x3, #0x0                   	// #0
    2488:	ldp	x19, x20, [sp, #16]
    248c:	mov	w1, #0x14                  	// #20
    2490:	ldr	x21, [sp, #32]
    2494:	ldp	x29, x30, [sp], #48
    2498:	b	0 <d_make_comp>
    249c:	bl	2b20 <d_type>
    24a0:	mov	x2, x0
    24a4:	mov	x0, x19
    24a8:	mov	x3, #0x0                   	// #0
    24ac:	ldp	x19, x20, [sp, #16]
    24b0:	mov	w1, #0xd                   	// #13
    24b4:	ldr	x21, [sp, #32]
    24b8:	ldp	x29, x30, [sp], #48
    24bc:	b	0 <d_make_comp>
    24c0:	mov	w1, #0x0                   	// #0
    24c4:	bl	918 <d_call_offset>
    24c8:	cbz	w0, 1f9c <d_encoding+0x1c4>
    24cc:	mov	x0, x19
    24d0:	mov	w1, #0x0                   	// #0
    24d4:	bl	918 <d_call_offset>
    24d8:	cbz	w0, 1f9c <d_encoding+0x1c4>
    24dc:	mov	x0, x19
    24e0:	mov	w1, #0x0                   	// #0
    24e4:	bl	1dd8 <d_encoding>
    24e8:	mov	x2, x0
    24ec:	mov	x0, x19
    24f0:	mov	x3, #0x0                   	// #0
    24f4:	ldp	x19, x20, [sp, #16]
    24f8:	mov	w1, #0x11                  	// #17
    24fc:	ldr	x21, [sp, #32]
    2500:	ldp	x29, x30, [sp], #48
    2504:	b	0 <d_make_comp>
    2508:	bl	2b20 <d_type>
    250c:	mov	x2, x0
    2510:	mov	x0, x19
    2514:	mov	x3, #0x0                   	// #0
    2518:	ldp	x19, x20, [sp, #16]
    251c:	mov	w1, #0xc                   	// #12
    2520:	ldr	x21, [sp, #32]
    2524:	ldp	x29, x30, [sp], #48
    2528:	b	0 <d_make_comp>
    252c:	bl	918 <d_call_offset>
    2530:	cbz	w0, 1f9c <d_encoding+0x1c4>
    2534:	mov	x0, x19
    2538:	mov	w1, #0x0                   	// #0
    253c:	bl	1dd8 <d_encoding>
    2540:	mov	x2, x0
    2544:	mov	x0, x19
    2548:	mov	x3, #0x0                   	// #0
    254c:	ldp	x19, x20, [sp, #16]
    2550:	mov	w1, #0xf                   	// #15
    2554:	ldr	x21, [sp, #32]
    2558:	ldp	x29, x30, [sp], #48
    255c:	b	0 <d_make_comp>
    2560:	mov	x20, #0x0                   	// #0
    2564:	str	x8, [x19, #24]
    2568:	b	1ed8 <d_encoding+0x100>
    256c:	mov	w1, #0x0                   	// #0
    2570:	bl	1dd8 <d_encoding>
    2574:	mov	x2, x0
    2578:	mov	x0, x19
    257c:	ldp	x19, x20, [sp, #16]
    2580:	mov	x3, #0x0                   	// #0
    2584:	ldr	x21, [sp, #32]
    2588:	mov	w1, #0x4a                  	// #74
    258c:	ldp	x29, x30, [sp], #48
    2590:	b	0 <d_make_comp>
    2594:	nop

0000000000002598 <d_name>:
    2598:	stp	x29, x30, [sp, #-112]!
    259c:	mov	x29, sp
    25a0:	ldr	x2, [x0, #24]
    25a4:	stp	x19, x20, [sp, #16]
    25a8:	ldrb	w1, [x2]
    25ac:	cmp	w1, #0x55
    25b0:	b.eq	2798 <d_name+0x200>  // b.none
    25b4:	mov	x19, x0
    25b8:	b.hi	2668 <d_name+0xd0>  // b.pmore
    25bc:	cmp	w1, #0x4e
    25c0:	b.eq	27b0 <d_name+0x218>  // b.none
    25c4:	cmp	w1, #0x53
    25c8:	b.ne	2738 <d_name+0x1a0>  // b.any
    25cc:	ldrb	w1, [x2, #1]
    25d0:	cmp	w1, #0x74
    25d4:	b.ne	26f8 <d_name+0x160>  // b.any
    25d8:	ldp	w0, w1, [x0, #40]
    25dc:	add	x2, x2, #0x2
    25e0:	str	x2, [x19, #24]
    25e4:	cmp	w0, w1
    25e8:	b.ge	2a6c <d_name+0x4d4>  // b.tcont
    25ec:	mov	w3, #0x18                  	// #24
    25f0:	add	w1, w0, #0x1
    25f4:	ldr	x2, [x19, #32]
    25f8:	smull	x0, w0, w3
    25fc:	str	w1, [x19, #40]
    2600:	mov	w3, #0x3                   	// #3
    2604:	add	x20, x2, x0
    2608:	adrp	x1, 0 <d_make_comp>
    260c:	add	x1, x1, #0x0
    2610:	str	xzr, [x2, x0]
    2614:	str	x1, [x20, #8]
    2618:	str	w3, [x20, #16]
    261c:	mov	x0, x19
    2620:	bl	3dd0 <d_unqualified_name>
    2624:	mov	x2, x20
    2628:	mov	x3, x0
    262c:	mov	w1, #0x1                   	// #1
    2630:	mov	x0, x19
    2634:	bl	0 <d_make_comp>
    2638:	mov	x20, x0
    263c:	ldr	w1, [x19, #72]
    2640:	ldr	x2, [x19, #24]
    2644:	add	w1, w1, #0x3
    2648:	str	w1, [x19, #72]
    264c:	ldrb	w0, [x2]
    2650:	cmp	w0, #0x49
    2654:	b.eq	2a18 <d_name+0x480>  // b.none
    2658:	mov	x0, x20
    265c:	ldp	x19, x20, [sp, #16]
    2660:	ldp	x29, x30, [sp], #112
    2664:	ret
    2668:	cmp	w1, #0x5a
    266c:	b.ne	2738 <d_name+0x1a0>  // b.any
    2670:	add	x2, x2, #0x1
    2674:	str	x2, [x0, #24]
    2678:	mov	w1, #0x0                   	// #0
    267c:	bl	1dd8 <d_encoding>
    2680:	mov	x20, x0
    2684:	cbz	x0, 2730 <d_name+0x198>
    2688:	ldr	x0, [x19, #24]
    268c:	ldrb	w1, [x0]
    2690:	cmp	w1, #0x45
    2694:	b.ne	2730 <d_name+0x198>  // b.any
    2698:	add	x1, x0, #0x1
    269c:	str	x1, [x19, #24]
    26a0:	ldrb	w1, [x0, #1]
    26a4:	cmp	w1, #0x73
    26a8:	b.eq	2a94 <d_name+0x4fc>  // b.none
    26ac:	cmp	w1, #0x64
    26b0:	b.eq	293c <d_name+0x3a4>  // b.none
    26b4:	mov	x0, x19
    26b8:	bl	2598 <d_name>
    26bc:	mov	x3, x0
    26c0:	cbz	x0, 26d4 <d_name+0x13c>
    26c4:	ldr	w0, [x0]
    26c8:	sub	w0, w0, #0x46
    26cc:	tst	w0, #0xfffffffd
    26d0:	b.ne	2ae8 <d_name+0x550>  // b.any
    26d4:	ldr	w0, [x20]
    26d8:	cmp	w0, #0x3
    26dc:	b.eq	2a54 <d_name+0x4bc>  // b.none
    26e0:	mov	x2, x20
    26e4:	mov	x0, x19
    26e8:	mov	w1, #0x2                   	// #2
    26ec:	bl	0 <d_make_comp>
    26f0:	mov	x20, x0
    26f4:	b	2658 <d_name+0xc0>
    26f8:	mov	w1, #0x0                   	// #0
    26fc:	bl	6b0 <d_substitution>
    2700:	ldr	x1, [x19, #24]
    2704:	mov	x20, x0
    2708:	ldrb	w0, [x1]
    270c:	cmp	w0, #0x49
    2710:	b.ne	2658 <d_name+0xc0>  // b.any
    2714:	mov	x0, x19
    2718:	b	2778 <d_name+0x1e0>
    271c:	mov	x0, x19
    2720:	bl	a18 <d_discriminator>
    2724:	cbnz	w0, 2978 <d_name+0x3e0>
    2728:	ldp	x21, x22, [sp, #32]
    272c:	nop
    2730:	mov	x20, #0x0                   	// #0
    2734:	b	2658 <d_name+0xc0>
    2738:	mov	x0, x19
    273c:	bl	3dd0 <d_unqualified_name>
    2740:	ldr	x1, [x19, #24]
    2744:	mov	x20, x0
    2748:	ldrb	w0, [x1]
    274c:	cmp	w0, #0x49
    2750:	b.ne	2658 <d_name+0xc0>  // b.any
    2754:	cbz	x20, 2730 <d_name+0x198>
    2758:	ldp	w1, w0, [x19, #56]
    275c:	cmp	w1, w0
    2760:	b.ge	2730 <d_name+0x198>  // b.tcont
    2764:	ldr	x3, [x19, #48]
    2768:	mov	x0, x19
    276c:	add	w2, w1, #0x1
    2770:	str	x20, [x3, w1, sxtw #3]
    2774:	str	w2, [x19, #56]
    2778:	bl	1da8 <d_template_args>
    277c:	mov	x3, x0
    2780:	mov	x2, x20
    2784:	mov	x0, x19
    2788:	mov	w1, #0x4                   	// #4
    278c:	bl	0 <d_make_comp>
    2790:	mov	x20, x0
    2794:	b	2658 <d_name+0xc0>
    2798:	bl	3dd0 <d_unqualified_name>
    279c:	mov	x20, x0
    27a0:	mov	x0, x20
    27a4:	ldp	x19, x20, [sp, #16]
    27a8:	ldp	x29, x30, [sp], #112
    27ac:	ret
    27b0:	stp	x21, x22, [sp, #32]
    27b4:	add	x2, x2, #0x1
    27b8:	add	x1, sp, #0x68
    27bc:	str	x2, [x0, #24]
    27c0:	mov	w2, #0x1                   	// #1
    27c4:	bl	39d0 <d_cv_qualifiers>
    27c8:	mov	x22, x0
    27cc:	cbz	x0, 2a48 <d_name+0x4b0>
    27d0:	mov	x1, #0x0                   	// #0
    27d4:	mov	x0, x19
    27d8:	stp	x23, x24, [sp, #48]
    27dc:	bl	88 <d_ref_qualifier>
    27e0:	mov	x23, x0
    27e4:	ldr	x1, [x19, #24]
    27e8:	ldrb	w20, [x1]
    27ec:	cbz	w20, 28a4 <d_name+0x30c>
    27f0:	mov	x21, #0x0                   	// #0
    27f4:	mov	w24, #0x4c                  	// #76
    27f8:	stp	x25, x26, [sp, #64]
    27fc:	mov	w25, #0x55                  	// #85
    2800:	cmp	w20, #0x44
    2804:	b.eq	28b8 <d_name+0x320>  // b.none
    2808:	sub	w2, w20, #0x30
    280c:	sub	w0, w20, #0x61
    2810:	and	w2, w2, #0xff
    2814:	and	w0, w0, #0xff
    2818:	cmp	w2, #0x9
    281c:	mov	x26, x21
    2820:	ccmp	w0, #0x19, #0x0, hi  // hi = pmore
    2824:	b.ls	2838 <d_name+0x2a0>  // b.plast
    2828:	cmp	w20, #0x43
    282c:	ccmp	w20, w25, #0x4, ne  // ne = any
    2830:	ccmp	w20, w24, #0x4, ne  // ne = any
    2834:	b.ne	2904 <d_name+0x36c>  // b.any
    2838:	mov	x0, x19
    283c:	bl	3dd0 <d_unqualified_name>
    2840:	mov	x21, x0
    2844:	cbz	x26, 2860 <d_name+0x2c8>
    2848:	mov	w1, #0x1                   	// #1
    284c:	mov	x3, x21
    2850:	mov	x2, x26
    2854:	mov	x0, x19
    2858:	bl	0 <d_make_comp>
    285c:	mov	x21, x0
    2860:	cmp	w20, #0x53
    2864:	ldr	x1, [x19, #24]
    2868:	b.eq	2898 <d_name+0x300>  // b.none
    286c:	ldrb	w20, [x1]
    2870:	cmp	w20, #0x45
    2874:	b.eq	28ec <d_name+0x354>  // b.none
    2878:	cbz	x21, 28a0 <d_name+0x308>
    287c:	ldp	w0, w2, [x19, #56]
    2880:	cmp	w0, w2
    2884:	b.ge	28a0 <d_name+0x308>  // b.tcont
    2888:	ldr	x3, [x19, #48]
    288c:	add	w2, w0, #0x1
    2890:	str	x21, [x3, w0, sxtw #3]
    2894:	str	w2, [x19, #56]
    2898:	ldrb	w20, [x1]
    289c:	cbnz	w20, 2800 <d_name+0x268>
    28a0:	ldp	x25, x26, [sp, #64]
    28a4:	mov	x20, #0x0                   	// #0
    28a8:	ldp	x23, x24, [sp, #48]
    28ac:	str	xzr, [x22]
    28b0:	ldp	x21, x22, [sp, #32]
    28b4:	b	2658 <d_name+0xc0>
    28b8:	ldrb	w0, [x1, #1]
    28bc:	and	w0, w0, #0xffffffdf
    28c0:	and	w0, w0, #0xff
    28c4:	cmp	w0, #0x54
    28c8:	mov	x0, x19
    28cc:	b.ne	28f4 <d_name+0x35c>  // b.any
    28d0:	mov	x26, x21
    28d4:	bl	2b20 <d_type>
    28d8:	mov	x21, x0
    28dc:	mov	w1, #0x1                   	// #1
    28e0:	cbnz	x26, 284c <d_name+0x2b4>
    28e4:	ldr	x1, [x19, #24]
    28e8:	b	286c <d_name+0x2d4>
    28ec:	mov	x26, x21
    28f0:	b	2828 <d_name+0x290>
    28f4:	mov	x26, x21
    28f8:	bl	3dd0 <d_unqualified_name>
    28fc:	mov	x21, x0
    2900:	b	28dc <d_name+0x344>
    2904:	cmp	w20, #0x53
    2908:	b.eq	29b8 <d_name+0x420>  // b.none
    290c:	cmp	w20, #0x49
    2910:	b.eq	2a74 <d_name+0x4dc>  // b.none
    2914:	cmp	w20, #0x54
    2918:	b.eq	2b10 <d_name+0x578>  // b.none
    291c:	cmp	w20, #0x45
    2920:	b.eq	29d4 <d_name+0x43c>  // b.none
    2924:	cmp	w20, #0x4d
    2928:	ccmp	x21, #0x0, #0x4, eq  // eq = none
    292c:	b.eq	28a0 <d_name+0x308>  // b.none
    2930:	add	x1, x1, #0x1
    2934:	str	x1, [x19, #24]
    2938:	b	2898 <d_name+0x300>
    293c:	stp	x21, x22, [sp, #32]
    2940:	add	x0, x0, #0x2
    2944:	str	x0, [x19, #24]
    2948:	mov	x0, x19
    294c:	bl	3b8 <d_compact_number>
    2950:	mov	w21, w0
    2954:	tbnz	w0, #31, 2728 <d_name+0x190>
    2958:	mov	x0, x19
    295c:	bl	2598 <d_name>
    2960:	mov	x11, x0
    2964:	cbz	x0, 2978 <d_name+0x3e0>
    2968:	ldr	w0, [x0]
    296c:	sub	w0, w0, #0x46
    2970:	tst	w0, #0xfffffffd
    2974:	b.ne	271c <d_name+0x184>  // b.any
    2978:	ldp	w1, w0, [x19, #40]
    297c:	cmp	w1, w0
    2980:	b.ge	2b04 <d_name+0x56c>  // b.tcont
    2984:	mov	w2, #0x18                  	// #24
    2988:	add	w4, w1, #0x1
    298c:	ldr	x0, [x19, #32]
    2990:	smull	x1, w1, w2
    2994:	mov	w2, #0x47                  	// #71
    2998:	add	x3, x0, x1
    299c:	str	wzr, [x3, #4]
    29a0:	str	w4, [x19, #40]
    29a4:	str	w2, [x0, x1]
    29a8:	str	x11, [x3, #8]
    29ac:	str	w21, [x3, #16]
    29b0:	ldp	x21, x22, [sp, #32]
    29b4:	b	26d4 <d_name+0x13c>
    29b8:	mov	x0, x19
    29bc:	mov	w1, #0x1                   	// #1
    29c0:	bl	6b0 <d_substitution>
    29c4:	mov	x21, x0
    29c8:	cbnz	x26, 2848 <d_name+0x2b0>
    29cc:	ldr	x1, [x19, #24]
    29d0:	b	2898 <d_name+0x300>
    29d4:	str	x21, [x22]
    29d8:	cbz	x21, 2a40 <d_name+0x4a8>
    29dc:	cbz	x23, 29ec <d_name+0x454>
    29e0:	ldr	x0, [sp, #104]
    29e4:	str	x0, [x23, #8]
    29e8:	str	x23, [sp, #104]
    29ec:	ldr	x0, [x19, #24]
    29f0:	ldrb	w1, [x0]
    29f4:	cmp	w1, #0x45
    29f8:	b.ne	2a40 <d_name+0x4a8>  // b.any
    29fc:	add	x0, x0, #0x1
    2a00:	ldp	x21, x22, [sp, #32]
    2a04:	ldp	x23, x24, [sp, #48]
    2a08:	ldp	x25, x26, [sp, #64]
    2a0c:	str	x0, [x19, #24]
    2a10:	ldr	x20, [sp, #104]
    2a14:	b	2658 <d_name+0xc0>
    2a18:	cbz	x20, 2730 <d_name+0x198>
    2a1c:	ldp	w0, w1, [x19, #56]
    2a20:	cmp	w0, w1
    2a24:	b.ge	2730 <d_name+0x198>  // b.tcont
    2a28:	ldr	x2, [x19, #48]
    2a2c:	add	w1, w0, #0x1
    2a30:	str	x20, [x2, w0, sxtw #3]
    2a34:	mov	x0, x19
    2a38:	str	w1, [x19, #56]
    2a3c:	b	2778 <d_name+0x1e0>
    2a40:	ldp	x23, x24, [sp, #48]
    2a44:	ldp	x25, x26, [sp, #64]
    2a48:	mov	x20, #0x0                   	// #0
    2a4c:	ldp	x21, x22, [sp, #32]
    2a50:	b	2658 <d_name+0xc0>
    2a54:	ldr	x0, [x20, #16]
    2a58:	ldr	w1, [x0]
    2a5c:	cmp	w1, #0x29
    2a60:	b.ne	26e0 <d_name+0x148>  // b.any
    2a64:	str	xzr, [x0, #8]
    2a68:	b	26e0 <d_name+0x148>
    2a6c:	mov	x20, #0x0                   	// #0
    2a70:	b	261c <d_name+0x84>
    2a74:	cbz	x21, 28a0 <d_name+0x308>
    2a78:	add	x1, x1, #0x1
    2a7c:	str	x1, [x19, #24]
    2a80:	mov	x0, x19
    2a84:	bl	1ce0 <d_template_args_1>
    2a88:	mov	x21, x0
    2a8c:	mov	w1, #0x4                   	// #4
    2a90:	b	284c <d_name+0x2b4>
    2a94:	add	x0, x0, #0x2
    2a98:	str	x0, [x19, #24]
    2a9c:	mov	x0, x19
    2aa0:	bl	a18 <d_discriminator>
    2aa4:	cbz	w0, 2730 <d_name+0x198>
    2aa8:	ldp	w0, w1, [x19, #40]
    2aac:	cmp	w0, w1
    2ab0:	b.ge	2b08 <d_name+0x570>  // b.tcont
    2ab4:	mov	w3, #0x18                  	// #24
    2ab8:	add	w1, w0, #0x1
    2abc:	ldr	x2, [x19, #32]
    2ac0:	smull	x0, w0, w3
    2ac4:	str	w1, [x19, #40]
    2ac8:	mov	w4, #0xe                   	// #14
    2acc:	add	x3, x2, x0
    2ad0:	adrp	x1, 0 <d_make_comp>
    2ad4:	add	x1, x1, #0x0
    2ad8:	str	xzr, [x2, x0]
    2adc:	str	x1, [x3, #8]
    2ae0:	str	w4, [x3, #16]
    2ae4:	b	26d4 <d_name+0x13c>
    2ae8:	mov	x0, x19
    2aec:	str	x3, [sp, #88]
    2af0:	bl	a18 <d_discriminator>
    2af4:	ldr	x3, [sp, #88]
    2af8:	cbnz	w0, 26d4 <d_name+0x13c>
    2afc:	mov	x20, #0x0                   	// #0
    2b00:	b	2658 <d_name+0xc0>
    2b04:	ldp	x21, x22, [sp, #32]
    2b08:	mov	x3, #0x0                   	// #0
    2b0c:	b	26d4 <d_name+0x13c>
    2b10:	mov	x0, x19
    2b14:	bl	430 <d_template_param>
    2b18:	mov	x21, x0
    2b1c:	b	28dc <d_name+0x344>

0000000000002b20 <d_type>:
    2b20:	stp	x29, x30, [sp, #-80]!
    2b24:	mov	x29, sp
    2b28:	ldr	x4, [x0, #24]
    2b2c:	stp	x19, x20, [sp, #16]
    2b30:	mov	x19, x0
    2b34:	mov	x0, x4
    2b38:	bl	9c0 <next_is_type_qual.isra.0>
    2b3c:	cbnz	w0, 2b7c <d_type+0x5c>
    2b40:	ldrb	w1, [x4]
    2b44:	sub	w0, w1, #0x30
    2b48:	cmp	w0, #0x4a
    2b4c:	b.ls	2b64 <d_type+0x44>  // b.plast
    2b50:	mov	x20, #0x0                   	// #0
    2b54:	mov	x0, x20
    2b58:	ldp	x19, x20, [sp, #16]
    2b5c:	ldp	x29, x30, [sp], #80
    2b60:	ret
    2b64:	adrp	x2, 0 <d_make_comp>
    2b68:	add	x2, x2, #0x0
    2b6c:	ldrh	w0, [x2, w0, uxtw #1]
    2b70:	adr	x2, 2b7c <d_type+0x5c>
    2b74:	add	x0, x2, w0, sxth #2
    2b78:	br	x0
    2b7c:	add	x1, sp, #0x48
    2b80:	mov	x0, x19
    2b84:	mov	w2, #0x0                   	// #0
    2b88:	stp	x21, x22, [sp, #32]
    2b8c:	bl	39d0 <d_cv_qualifiers>
    2b90:	mov	x21, x0
    2b94:	cbz	x0, 2c28 <d_type+0x108>
    2b98:	ldr	x0, [x19, #24]
    2b9c:	ldrb	w0, [x0]
    2ba0:	cmp	w0, #0x46
    2ba4:	mov	x0, x19
    2ba8:	b.eq	2c1c <d_type+0xfc>  // b.none
    2bac:	bl	2b20 <d_type>
    2bb0:	str	x0, [x21]
    2bb4:	cbz	x0, 2c28 <d_type+0x108>
    2bb8:	ldr	w1, [x0]
    2bbc:	ldr	x20, [sp, #72]
    2bc0:	sub	w1, w1, #0x1f
    2bc4:	cmp	w1, #0x1
    2bc8:	b.ls	2c00 <d_type+0xe0>  // b.plast
    2bcc:	cbz	x20, 2c28 <d_type+0x108>
    2bd0:	ldp	w0, w1, [x19, #56]
    2bd4:	cmp	w0, w1
    2bd8:	b.ge	2c28 <d_type+0x108>  // b.tcont
    2bdc:	ldr	x2, [x19, #48]
    2be0:	add	w1, w0, #0x1
    2be4:	ldp	x21, x22, [sp, #32]
    2be8:	str	x20, [x2, w0, sxtw #3]
    2bec:	mov	x0, x20
    2bf0:	str	w1, [x19, #56]
    2bf4:	ldp	x19, x20, [sp, #16]
    2bf8:	ldp	x29, x30, [sp], #80
    2bfc:	ret
    2c00:	ldr	x1, [x0, #8]
    2c04:	str	x20, [x0, #8]
    2c08:	ldr	x0, [x21]
    2c0c:	str	x0, [sp, #72]
    2c10:	str	x1, [x21]
    2c14:	ldr	x20, [sp, #72]
    2c18:	b	2bcc <d_type+0xac>
    2c1c:	bl	3cf0 <d_function_type>
    2c20:	str	x0, [x21]
    2c24:	b	2bb4 <d_type+0x94>
    2c28:	ldp	x21, x22, [sp, #32]
    2c2c:	b	2b50 <d_type+0x30>
    2c30:	ldp	w2, w3, [x19, #40]
    2c34:	sub	w1, w1, #0x61
    2c38:	adrp	x0, 0 <d_make_comp>
    2c3c:	add	x0, x0, #0x0
    2c40:	sbfiz	x1, x1, #5, #32
    2c44:	add	x0, x0, #0x188
    2c48:	add	x1, x0, x1
    2c4c:	cmp	w2, w3
    2c50:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    2c54:	mov	w0, #0x18                  	// #24
    2c58:	add	w6, w2, #0x1
    2c5c:	ldr	x3, [x19, #32]
    2c60:	smull	x2, w2, w0
    2c64:	ldr	w7, [x1, #8]
    2c68:	mov	w5, #0x27                  	// #39
    2c6c:	add	x20, x3, x2
    2c70:	ldr	w0, [x19, #72]
    2c74:	add	x4, x4, #0x1
    2c78:	add	w0, w0, w7
    2c7c:	str	wzr, [x20, #4]
    2c80:	str	w6, [x19, #40]
    2c84:	str	w5, [x3, x2]
    2c88:	str	x1, [x20, #8]
    2c8c:	str	x4, [x19, #24]
    2c90:	str	w0, [x19, #72]
    2c94:	b	2b54 <d_type+0x34>
    2c98:	mov	x0, x19
    2c9c:	bl	2598 <d_name>
    2ca0:	mov	x20, x0
    2ca4:	str	x0, [sp, #72]
    2ca8:	cbz	x20, 2b50 <d_type+0x30>
    2cac:	ldp	w0, w1, [x19, #56]
    2cb0:	cmp	w0, w1
    2cb4:	b.ge	2b50 <d_type+0x30>  // b.tcont
    2cb8:	ldr	x2, [x19, #48]
    2cbc:	add	w1, w0, #0x1
    2cc0:	str	x20, [x2, w0, sxtw #3]
    2cc4:	str	w1, [x19, #56]
    2cc8:	ldr	x20, [sp, #72]
    2ccc:	mov	x0, x20
    2cd0:	ldp	x19, x20, [sp, #16]
    2cd4:	ldp	x29, x30, [sp], #80
    2cd8:	ret
    2cdc:	mov	x0, x19
    2ce0:	bl	3cf0 <d_function_type>
    2ce4:	mov	x20, x0
    2ce8:	str	x0, [sp, #72]
    2cec:	b	2ca8 <d_type+0x188>
    2cf0:	add	x4, x4, #0x1
    2cf4:	str	x4, [x19, #24]
    2cf8:	mov	x0, x19
    2cfc:	bl	2b20 <d_type>
    2d00:	mov	x2, x0
    2d04:	mov	x3, #0x0                   	// #0
    2d08:	mov	x0, x19
    2d0c:	mov	w1, #0x26                  	// #38
    2d10:	bl	0 <d_make_comp>
    2d14:	mov	x20, x0
    2d18:	str	x0, [sp, #72]
    2d1c:	b	2ca8 <d_type+0x188>
    2d20:	add	x4, x4, #0x1
    2d24:	str	x4, [x19, #24]
    2d28:	mov	x0, x19
    2d2c:	bl	2b20 <d_type>
    2d30:	mov	x2, x0
    2d34:	mov	x3, #0x0                   	// #0
    2d38:	mov	x0, x19
    2d3c:	mov	w1, #0x24                  	// #36
    2d40:	bl	0 <d_make_comp>
    2d44:	mov	x20, x0
    2d48:	str	x0, [sp, #72]
    2d4c:	b	2ca8 <d_type+0x188>
    2d50:	add	x4, x4, #0x1
    2d54:	str	x4, [x19, #24]
    2d58:	mov	x0, x19
    2d5c:	bl	2b20 <d_type>
    2d60:	mov	x2, x0
    2d64:	mov	x3, #0x0                   	// #0
    2d68:	mov	x0, x19
    2d6c:	mov	w1, #0x25                  	// #37
    2d70:	bl	0 <d_make_comp>
    2d74:	mov	x20, x0
    2d78:	str	x0, [sp, #72]
    2d7c:	b	2ca8 <d_type+0x188>
    2d80:	add	x0, x4, #0x1
    2d84:	str	x0, [x19, #24]
    2d88:	ldrb	w0, [x4, #1]
    2d8c:	cbz	w0, 2b50 <d_type+0x30>
    2d90:	add	x0, x4, #0x2
    2d94:	str	x0, [x19, #24]
    2d98:	ldrb	w0, [x4, #1]
    2d9c:	cmp	w0, #0x68
    2da0:	b.eq	3518 <d_type+0x9f8>  // b.none
    2da4:	b.hi	30fc <d_type+0x5dc>  // b.pmore
    2da8:	cmp	w0, #0x63
    2dac:	b.eq	34d8 <d_type+0x9b8>  // b.none
    2db0:	b.ls	30ac <d_type+0x58c>  // b.plast
    2db4:	cmp	w0, #0x65
    2db8:	b.eq	35b8 <d_type+0xa98>  // b.none
    2dbc:	cmp	w0, #0x66
    2dc0:	b.ne	3318 <d_type+0x7f8>  // b.any
    2dc4:	ldp	w0, w1, [x19, #40]
    2dc8:	cmp	w0, w1
    2dcc:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    2dd0:	mov	w1, #0x18                  	// #24
    2dd4:	add	w5, w0, #0x1
    2dd8:	ldr	x3, [x19, #32]
    2ddc:	smull	x0, w0, w1
    2de0:	ldr	w2, [x19, #72]
    2de4:	adrp	x1, 0 <d_make_comp>
    2de8:	add	x1, x1, #0x0
    2dec:	add	x20, x3, x0
    2df0:	add	x1, x1, #0x4c8
    2df4:	mov	w4, #0x27                  	// #39
    2df8:	str	wzr, [x20, #4]
    2dfc:	add	w2, w2, #0x9
    2e00:	str	w5, [x19, #40]
    2e04:	str	w4, [x3, x0]
    2e08:	str	x1, [x20, #8]
    2e0c:	str	w2, [x19, #72]
    2e10:	b	2b54 <d_type+0x34>
    2e14:	add	x4, x4, #0x1
    2e18:	str	x4, [x19, #24]
    2e1c:	mov	x0, x19
    2e20:	bl	4b0 <d_source_name>
    2e24:	str	x0, [sp, #72]
    2e28:	ldr	x1, [x19, #24]
    2e2c:	mov	x20, x0
    2e30:	ldrb	w0, [x1]
    2e34:	cmp	w0, #0x49
    2e38:	b.eq	33f8 <d_type+0x8d8>  // b.none
    2e3c:	mov	x0, x19
    2e40:	bl	2b20 <d_type>
    2e44:	ldr	x3, [sp, #72]
    2e48:	mov	x2, x0
    2e4c:	mov	w1, #0x21                  	// #33
    2e50:	mov	x0, x19
    2e54:	bl	0 <d_make_comp>
    2e58:	mov	x20, x0
    2e5c:	str	x0, [sp, #72]
    2e60:	b	2ca8 <d_type+0x188>
    2e64:	add	x4, x4, #0x1
    2e68:	str	x4, [x19, #24]
    2e6c:	mov	x0, x19
    2e70:	bl	2b20 <d_type>
    2e74:	mov	x2, x0
    2e78:	mov	x3, #0x0                   	// #0
    2e7c:	mov	x0, x19
    2e80:	mov	w1, #0x22                  	// #34
    2e84:	bl	0 <d_make_comp>
    2e88:	mov	x20, x0
    2e8c:	str	x0, [sp, #72]
    2e90:	b	2ca8 <d_type+0x188>
    2e94:	ldrb	w0, [x4, #1]
    2e98:	sub	w1, w0, #0x30
    2e9c:	cmp	w0, #0x5f
    2ea0:	and	w1, w1, #0xff
    2ea4:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    2ea8:	b.ls	2ebc <d_type+0x39c>  // b.plast
    2eac:	sub	w0, w0, #0x41
    2eb0:	and	w0, w0, #0xff
    2eb4:	cmp	w0, #0x19
    2eb8:	b.hi	33d4 <d_type+0x8b4>  // b.pmore
    2ebc:	mov	w1, #0x0                   	// #0
    2ec0:	mov	x0, x19
    2ec4:	bl	6b0 <d_substitution>
    2ec8:	str	x0, [sp, #72]
    2ecc:	ldr	x1, [x19, #24]
    2ed0:	mov	x20, x0
    2ed4:	ldrb	w0, [x1]
    2ed8:	cmp	w0, #0x49
    2edc:	b.ne	2b54 <d_type+0x34>  // b.any
    2ee0:	add	x1, x1, #0x1
    2ee4:	str	x1, [x19, #24]
    2ee8:	mov	x0, x19
    2eec:	bl	1ce0 <d_template_args_1>
    2ef0:	mov	x3, x0
    2ef4:	mov	x2, x20
    2ef8:	mov	x0, x19
    2efc:	mov	w1, #0x4                   	// #4
    2f00:	bl	0 <d_make_comp>
    2f04:	mov	x20, x0
    2f08:	str	x0, [sp, #72]
    2f0c:	b	2ca8 <d_type+0x188>
    2f10:	mov	x0, x19
    2f14:	stp	x21, x22, [sp, #32]
    2f18:	bl	430 <d_template_param>
    2f1c:	ldr	x21, [x19, #24]
    2f20:	str	x0, [sp, #72]
    2f24:	mov	x20, x0
    2f28:	ldrb	w0, [x21]
    2f2c:	cmp	w0, #0x49
    2f30:	b.eq	3358 <d_type+0x838>  // b.none
    2f34:	ldp	x21, x22, [sp, #32]
    2f38:	b	2ca8 <d_type+0x188>
    2f3c:	add	x4, x4, #0x1
    2f40:	str	x4, [x19, #24]
    2f44:	mov	x0, x19
    2f48:	bl	4b0 <d_source_name>
    2f4c:	mov	x2, x0
    2f50:	mov	x3, #0x0                   	// #0
    2f54:	mov	x0, x19
    2f58:	mov	w1, #0x28                  	// #40
    2f5c:	bl	0 <d_make_comp>
    2f60:	mov	x20, x0
    2f64:	str	x0, [sp, #72]
    2f68:	b	2ca8 <d_type+0x188>
    2f6c:	add	x4, x4, #0x1
    2f70:	str	x4, [x19, #24]
    2f74:	mov	x0, x19
    2f78:	bl	2b20 <d_type>
    2f7c:	mov	x2, x0
    2f80:	mov	x3, #0x0                   	// #0
    2f84:	mov	x0, x19
    2f88:	mov	w1, #0x23                  	// #35
    2f8c:	bl	0 <d_make_comp>
    2f90:	mov	x20, x0
    2f94:	str	x0, [sp, #72]
    2f98:	b	2ca8 <d_type+0x188>
    2f9c:	add	x3, x4, #0x1
    2fa0:	str	x3, [x19, #24]
    2fa4:	ldrb	w0, [x4, #1]
    2fa8:	cmp	w0, #0x5f
    2fac:	b.eq	33cc <d_type+0x8ac>  // b.none
    2fb0:	sub	w0, w0, #0x30
    2fb4:	and	w0, w0, #0xff
    2fb8:	cmp	w0, #0x9
    2fbc:	b.hi	3424 <d_type+0x904>  // b.pmore
    2fc0:	mov	x1, x3
    2fc4:	nop
    2fc8:	mov	x4, x1
    2fcc:	add	x1, x1, #0x1
    2fd0:	str	x1, [x19, #24]
    2fd4:	ldrb	w0, [x1]
    2fd8:	sub	w0, w0, #0x30
    2fdc:	and	w0, w0, #0xff
    2fe0:	cmp	w0, #0x9
    2fe4:	b.ls	2fc8 <d_type+0x4a8>  // b.plast
    2fe8:	ldp	w0, w5, [x19, #40]
    2fec:	sub	x2, x1, x3
    2ff0:	cmp	w0, w5
    2ff4:	b.ge	2b50 <d_type+0x30>  // b.tcont
    2ff8:	mov	w7, #0x18                  	// #24
    2ffc:	add	w6, w0, #0x1
    3000:	ldr	x5, [x19, #32]
    3004:	smull	x0, w0, w7
    3008:	cmp	w2, #0x0
    300c:	add	x20, x5, x0
    3010:	str	wzr, [x20, #4]
    3014:	str	w6, [x19, #40]
    3018:	b.le	2b50 <d_type+0x30>
    301c:	str	xzr, [x5, x0]
    3020:	str	x3, [x20, #8]
    3024:	str	w2, [x20, #16]
    3028:	ldrb	w0, [x4, #1]
    302c:	mov	x3, x1
    3030:	cmp	w0, #0x5f
    3034:	b.ne	2b50 <d_type+0x30>  // b.any
    3038:	add	x3, x3, #0x1
    303c:	str	x3, [x19, #24]
    3040:	mov	x0, x19
    3044:	bl	2b20 <d_type>
    3048:	mov	x3, x0
    304c:	mov	x2, x20
    3050:	mov	x0, x19
    3054:	mov	w1, #0x2a                  	// #42
    3058:	bl	0 <d_make_comp>
    305c:	mov	x20, x0
    3060:	str	x0, [sp, #72]
    3064:	b	2ca8 <d_type+0x188>
    3068:	add	x4, x4, #0x1
    306c:	str	x4, [x19, #24]
    3070:	mov	x0, x19
    3074:	bl	2b20 <d_type>
    3078:	mov	x20, x0
    307c:	cbz	x0, 2b50 <d_type+0x30>
    3080:	mov	x0, x19
    3084:	bl	2b20 <d_type>
    3088:	mov	x3, x0
    308c:	cbz	x0, 2b50 <d_type+0x30>
    3090:	mov	x2, x20
    3094:	mov	x0, x19
    3098:	mov	w1, #0x2b                  	// #43
    309c:	bl	0 <d_make_comp>
    30a0:	mov	x20, x0
    30a4:	str	x0, [sp, #72]
    30a8:	b	2ca8 <d_type+0x188>
    30ac:	cmp	w0, #0x54
    30b0:	b.eq	317c <d_type+0x65c>  // b.none
    30b4:	cmp	w0, #0x61
    30b8:	b.ne	3210 <d_type+0x6f0>  // b.any
    30bc:	ldp	w0, w1, [x19, #40]
    30c0:	cmp	w0, w1
    30c4:	b.ge	2b50 <d_type+0x30>  // b.tcont
    30c8:	mov	w3, #0x18                  	// #24
    30cc:	add	w1, w0, #0x1
    30d0:	ldr	x2, [x19, #32]
    30d4:	smull	x0, w0, w3
    30d8:	str	w1, [x19, #40]
    30dc:	mov	w3, #0x4                   	// #4
    30e0:	add	x20, x2, x0
    30e4:	adrp	x1, 0 <d_make_comp>
    30e8:	add	x1, x1, #0x0
    30ec:	str	xzr, [x2, x0]
    30f0:	str	x1, [x20, #8]
    30f4:	str	w3, [x20, #16]
    30f8:	b	2b54 <d_type+0x34>
    30fc:	cmp	w0, #0x73
    3100:	b.eq	34a0 <d_type+0x980>  // b.none
    3104:	b.ls	31d8 <d_type+0x6b8>  // b.plast
    3108:	cmp	w0, #0x75
    310c:	b.eq	3608 <d_type+0xae8>  // b.none
    3110:	cmp	w0, #0x76
    3114:	b.ne	3174 <d_type+0x654>  // b.any
    3118:	ldrb	w0, [x4, #2]
    311c:	cmp	w0, #0x5f
    3120:	b.eq	36a0 <d_type+0xb80>  // b.none
    3124:	mov	x0, x19
    3128:	bl	350 <d_number_component>
    312c:	mov	x20, x0
    3130:	cbz	x20, 2b50 <d_type+0x30>
    3134:	ldr	x0, [x19, #24]
    3138:	ldrb	w1, [x0]
    313c:	cmp	w1, #0x5f
    3140:	b.ne	2b50 <d_type+0x30>  // b.any
    3144:	add	x0, x0, #0x1
    3148:	str	x0, [x19, #24]
    314c:	mov	x0, x19
    3150:	bl	2b20 <d_type>
    3154:	mov	x3, x0
    3158:	mov	x2, x20
    315c:	mov	x0, x19
    3160:	mov	w1, #0x2d                  	// #45
    3164:	bl	0 <d_make_comp>
    3168:	mov	x20, x0
    316c:	str	x0, [sp, #72]
    3170:	b	2ca8 <d_type+0x188>
    3174:	cmp	w0, #0x74
    3178:	b.ne	2b50 <d_type+0x30>  // b.any
    317c:	ldr	w20, [x19, #76]
    3180:	mov	w0, #0x1                   	// #1
    3184:	str	w0, [x19, #76]
    3188:	mov	x0, x19
    318c:	bl	1508 <d_expression_1>
    3190:	str	w20, [x19, #76]
    3194:	mov	x2, x0
    3198:	mov	x3, #0x0                   	// #0
    319c:	mov	x0, x19
    31a0:	mov	w1, #0x43                  	// #67
    31a4:	bl	0 <d_make_comp>
    31a8:	str	x0, [sp, #72]
    31ac:	mov	x20, x0
    31b0:	cbz	x0, 2b50 <d_type+0x30>
    31b4:	ldr	x0, [x19, #24]
    31b8:	ldrb	w1, [x0]
    31bc:	cbz	w1, 2b50 <d_type+0x30>
    31c0:	add	x1, x0, #0x1
    31c4:	str	x1, [x19, #24]
    31c8:	ldrb	w0, [x0]
    31cc:	cmp	w0, #0x45
    31d0:	b.ne	2b50 <d_type+0x30>  // b.any
    31d4:	b	2cac <d_type+0x18c>
    31d8:	cmp	w0, #0x6e
    31dc:	b.eq	3568 <d_type+0xa48>  // b.none
    31e0:	cmp	w0, #0x70
    31e4:	b.ne	32c0 <d_type+0x7a0>  // b.any
    31e8:	mov	x0, x19
    31ec:	bl	2b20 <d_type>
    31f0:	mov	x3, #0x0                   	// #0
    31f4:	mov	x2, x0
    31f8:	mov	w1, #0x4b                  	// #75
    31fc:	mov	x0, x19
    3200:	bl	0 <d_make_comp>
    3204:	mov	x20, x0
    3208:	str	x0, [sp, #72]
    320c:	b	2ca8 <d_type+0x188>
    3210:	cmp	w0, #0x46
    3214:	b.ne	2b50 <d_type+0x30>  // b.any
    3218:	ldp	w0, w1, [x19, #40]
    321c:	cmp	w0, w1
    3220:	b.ge	36dc <d_type+0xbbc>  // b.tcont
    3224:	mov	w2, #0x18                  	// #24
    3228:	add	w3, w0, #0x1
    322c:	ldr	x1, [x19, #32]
    3230:	smull	x0, w0, w2
    3234:	mov	w2, #0x2c                  	// #44
    3238:	add	x20, x1, x0
    323c:	str	wzr, [x20, #4]
    3240:	str	w3, [x19, #40]
    3244:	str	x20, [sp, #72]
    3248:	str	w2, [x1, x0]
    324c:	ldrb	w0, [x4, #2]
    3250:	sub	w0, w0, #0x30
    3254:	and	w0, w0, #0xff
    3258:	cmp	w0, #0x9
    325c:	cset	w1, ls  // ls = plast
    3260:	strh	w1, [x20, #16]
    3264:	b.hi	3274 <d_type+0x754>  // b.pmore
    3268:	add	x0, x19, #0x18
    326c:	bl	280 <d_number.isra.0>
    3270:	ldr	x20, [sp, #72]
    3274:	mov	x0, x19
    3278:	bl	2b20 <d_type>
    327c:	str	x0, [x20, #8]
    3280:	ldr	x1, [sp, #72]
    3284:	ldr	x0, [x1, #8]
    3288:	cbz	x0, 2b50 <d_type+0x30>
    328c:	add	x0, x19, #0x18
    3290:	bl	280 <d_number.isra.0>
    3294:	ldr	x1, [x19, #24]
    3298:	ldrb	w0, [x1]
    329c:	cbz	w0, 32ac <d_type+0x78c>
    32a0:	add	x0, x1, #0x1
    32a4:	str	x0, [x19, #24]
    32a8:	ldrb	w0, [x1]
    32ac:	ldr	x20, [sp, #72]
    32b0:	cmp	w0, #0x73
    32b4:	cset	w0, eq  // eq = none
    32b8:	strh	w0, [x20, #18]
    32bc:	b	2b54 <d_type+0x34>
    32c0:	cmp	w0, #0x69
    32c4:	b.ne	2b50 <d_type+0x30>  // b.any
    32c8:	ldp	w0, w1, [x19, #40]
    32cc:	cmp	w0, w1
    32d0:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    32d4:	mov	w1, #0x18                  	// #24
    32d8:	add	w5, w0, #0x1
    32dc:	ldr	x3, [x19, #32]
    32e0:	smull	x0, w0, w1
    32e4:	ldr	w2, [x19, #72]
    32e8:	adrp	x1, 0 <d_make_comp>
    32ec:	add	x1, x1, #0x0
    32f0:	add	x20, x3, x0
    32f4:	add	x1, x1, #0x588
    32f8:	mov	w4, #0x27                  	// #39
    32fc:	str	wzr, [x20, #4]
    3300:	add	w2, w2, #0x8
    3304:	str	w5, [x19, #40]
    3308:	str	w4, [x3, x0]
    330c:	str	x1, [x20, #8]
    3310:	str	w2, [x19, #72]
    3314:	b	2b54 <d_type+0x34>
    3318:	cmp	w0, #0x64
    331c:	b.ne	2b50 <d_type+0x30>  // b.any
    3320:	ldp	w0, w1, [x19, #40]
    3324:	cmp	w0, w1
    3328:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    332c:	mov	w1, #0x18                  	// #24
    3330:	add	w5, w0, #0x1
    3334:	ldr	x3, [x19, #32]
    3338:	smull	x0, w0, w1
    333c:	adrp	x1, 0 <d_make_comp>
    3340:	add	x1, x1, #0x0
    3344:	ldr	w2, [x19, #72]
    3348:	add	x1, x1, #0x4e8
    334c:	add	x20, x3, x0
    3350:	mov	w4, #0x27                  	// #39
    3354:	b	2df8 <d_type+0x2d8>
    3358:	ldr	w0, [x19, #80]
    335c:	cbnz	w0, 3450 <d_type+0x930>
    3360:	cbz	x20, 2c28 <d_type+0x108>
    3364:	ldp	w0, w1, [x19, #56]
    3368:	cmp	w0, w1
    336c:	b.ge	2c28 <d_type+0x108>  // b.tcont
    3370:	ldr	x2, [x19, #48]
    3374:	add	w1, w0, #0x1
    3378:	mov	x3, #0x0                   	// #0
    337c:	str	x20, [x2, w0, sxtw #3]
    3380:	str	w1, [x19, #56]
    3384:	ldrb	w0, [x21]
    3388:	sub	w0, w0, #0x49
    338c:	and	w0, w0, #0xff
    3390:	cmp	w0, #0x1
    3394:	b.hi	33ac <d_type+0x88c>  // b.pmore
    3398:	add	x21, x21, #0x1
    339c:	str	x21, [x19, #24]
    33a0:	mov	x0, x19
    33a4:	bl	1ce0 <d_template_args_1>
    33a8:	mov	x3, x0
    33ac:	mov	x2, x20
    33b0:	mov	x0, x19
    33b4:	mov	w1, #0x4                   	// #4
    33b8:	bl	0 <d_make_comp>
    33bc:	mov	x20, x0
    33c0:	str	x0, [sp, #72]
    33c4:	ldp	x21, x22, [sp, #32]
    33c8:	b	2ca8 <d_type+0x188>
    33cc:	mov	x20, #0x0                   	// #0
    33d0:	b	3038 <d_type+0x518>
    33d4:	mov	x0, x19
    33d8:	bl	2598 <d_name>
    33dc:	str	x0, [sp, #72]
    33e0:	mov	x20, x0
    33e4:	cbz	x0, 2b50 <d_type+0x30>
    33e8:	ldr	w0, [x0]
    33ec:	cmp	w0, #0x18
    33f0:	b.ne	2cac <d_type+0x18c>  // b.any
    33f4:	b	2b54 <d_type+0x34>
    33f8:	add	x1, x1, #0x1
    33fc:	str	x1, [x19, #24]
    3400:	mov	x0, x19
    3404:	bl	1ce0 <d_template_args_1>
    3408:	mov	x3, x0
    340c:	mov	x2, x20
    3410:	mov	x0, x19
    3414:	mov	w1, #0x4                   	// #4
    3418:	bl	0 <d_make_comp>
    341c:	str	x0, [sp, #72]
    3420:	b	2e3c <d_type+0x31c>
    3424:	ldr	w20, [x19, #76]
    3428:	mov	w0, #0x1                   	// #1
    342c:	str	w0, [x19, #76]
    3430:	mov	x0, x19
    3434:	bl	1508 <d_expression_1>
    3438:	str	w20, [x19, #76]
    343c:	mov	x20, x0
    3440:	cbz	x0, 2b50 <d_type+0x30>
    3444:	ldr	x1, [x19, #24]
    3448:	ldrb	w0, [x1]
    344c:	b	302c <d_type+0x50c>
    3450:	ldr	w22, [x19, #56]
    3454:	add	x0, x21, #0x1
    3458:	ldr	w20, [x19, #72]
    345c:	str	x23, [sp, #48]
    3460:	str	x0, [x19, #24]
    3464:	mov	x0, x19
    3468:	ldr	w23, [x19, #40]
    346c:	bl	1ce0 <d_template_args_1>
    3470:	ldr	x1, [x19, #24]
    3474:	ldrb	w1, [x1]
    3478:	cmp	w1, #0x49
    347c:	b.eq	3658 <d_type+0xb38>  // b.none
    3480:	str	x21, [x19, #24]
    3484:	str	w23, [x19, #40]
    3488:	str	w22, [x19, #56]
    348c:	str	w20, [x19, #72]
    3490:	ldp	x21, x22, [sp, #32]
    3494:	ldr	x23, [sp, #48]
    3498:	ldr	x20, [sp, #72]
    349c:	b	2ca8 <d_type+0x188>
    34a0:	ldp	w0, w1, [x19, #40]
    34a4:	cmp	w0, w1
    34a8:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    34ac:	mov	w1, #0x18                  	// #24
    34b0:	add	w5, w0, #0x1
    34b4:	ldr	x3, [x19, #32]
    34b8:	smull	x0, w0, w1
    34bc:	adrp	x1, 0 <d_make_comp>
    34c0:	add	x1, x1, #0x0
    34c4:	ldr	w2, [x19, #72]
    34c8:	add	x1, x1, #0x568
    34cc:	add	x20, x3, x0
    34d0:	mov	w4, #0x27                  	// #39
    34d4:	b	32fc <d_type+0x7dc>
    34d8:	ldp	w0, w1, [x19, #40]
    34dc:	cmp	w0, w1
    34e0:	b.ge	2b50 <d_type+0x30>  // b.tcont
    34e4:	mov	w3, #0x18                  	// #24
    34e8:	add	w1, w0, #0x1
    34ec:	ldr	x2, [x19, #32]
    34f0:	smull	x0, w0, w3
    34f4:	str	w1, [x19, #40]
    34f8:	mov	w3, #0xe                   	// #14
    34fc:	add	x20, x2, x0
    3500:	adrp	x1, 0 <d_make_comp>
    3504:	add	x1, x1, #0x0
    3508:	str	xzr, [x2, x0]
    350c:	str	x1, [x20, #8]
    3510:	str	w3, [x20, #16]
    3514:	b	2b54 <d_type+0x34>
    3518:	ldp	w0, w1, [x19, #40]
    351c:	cmp	w0, w1
    3520:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    3524:	mov	w1, #0x18                  	// #24
    3528:	add	w5, w0, #0x1
    352c:	ldr	x3, [x19, #32]
    3530:	smull	x0, w0, w1
    3534:	ldr	w2, [x19, #72]
    3538:	mov	w4, #0x27                  	// #39
    353c:	add	x20, x3, x0
    3540:	adrp	x1, 0 <d_make_comp>
    3544:	add	x1, x1, #0x0
    3548:	add	w2, w2, #0x4
    354c:	add	x1, x1, #0x528
    3550:	str	wzr, [x20, #4]
    3554:	str	w5, [x19, #40]
    3558:	str	w4, [x3, x0]
    355c:	str	x1, [x20, #8]
    3560:	str	w2, [x19, #72]
    3564:	b	2b54 <d_type+0x34>
    3568:	ldp	w0, w1, [x19, #40]
    356c:	cmp	w0, w1
    3570:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    3574:	mov	w1, #0x18                  	// #24
    3578:	add	w5, w0, #0x1
    357c:	ldr	x3, [x19, #32]
    3580:	smull	x0, w0, w1
    3584:	ldr	w2, [x19, #72]
    3588:	mov	w4, #0x27                  	// #39
    358c:	add	x20, x3, x0
    3590:	adrp	x1, 0 <d_make_comp>
    3594:	add	x1, x1, #0x0
    3598:	add	w2, w2, #0x11
    359c:	add	x1, x1, #0x5a8
    35a0:	str	wzr, [x20, #4]
    35a4:	str	w5, [x19, #40]
    35a8:	str	w4, [x3, x0]
    35ac:	str	x1, [x20, #8]
    35b0:	str	w2, [x19, #72]
    35b4:	b	2b54 <d_type+0x34>
    35b8:	ldp	w0, w1, [x19, #40]
    35bc:	cmp	w0, w1
    35c0:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    35c4:	mov	w1, #0x18                  	// #24
    35c8:	add	w5, w0, #0x1
    35cc:	ldr	x3, [x19, #32]
    35d0:	smull	x0, w0, w1
    35d4:	ldr	w2, [x19, #72]
    35d8:	mov	w4, #0x27                  	// #39
    35dc:	add	x20, x3, x0
    35e0:	adrp	x1, 0 <d_make_comp>
    35e4:	add	x1, x1, #0x0
    35e8:	add	w2, w2, #0xa
    35ec:	add	x1, x1, #0x508
    35f0:	str	wzr, [x20, #4]
    35f4:	str	w5, [x19, #40]
    35f8:	str	w4, [x3, x0]
    35fc:	str	x1, [x20, #8]
    3600:	str	w2, [x19, #72]
    3604:	b	2b54 <d_type+0x34>
    3608:	ldp	w0, w1, [x19, #40]
    360c:	cmp	w0, w1
    3610:	b.ge	36f0 <d_type+0xbd0>  // b.tcont
    3614:	mov	w1, #0x18                  	// #24
    3618:	add	w5, w0, #0x1
    361c:	ldr	x3, [x19, #32]
    3620:	smull	x0, w0, w1
    3624:	ldr	w2, [x19, #72]
    3628:	mov	w4, #0x27                  	// #39
    362c:	add	x20, x3, x0
    3630:	adrp	x1, 0 <d_make_comp>
    3634:	add	x1, x1, #0x0
    3638:	add	w2, w2, #0x7
    363c:	add	x1, x1, #0x548
    3640:	str	wzr, [x20, #4]
    3644:	str	w5, [x19, #40]
    3648:	str	w4, [x3, x0]
    364c:	str	x1, [x20, #8]
    3650:	str	w2, [x19, #72]
    3654:	b	2b54 <d_type+0x34>
    3658:	ldr	x2, [sp, #72]
    365c:	cbz	x2, 36d0 <d_type+0xbb0>
    3660:	ldp	w4, w1, [x19, #56]
    3664:	cmp	w4, w1
    3668:	b.ge	36d0 <d_type+0xbb0>  // b.tcont
    366c:	ldr	x6, [x19, #48]
    3670:	add	w5, w4, #0x1
    3674:	mov	x3, x0
    3678:	mov	w1, #0x4                   	// #4
    367c:	mov	x0, x19
    3680:	str	x2, [x6, w4, sxtw #3]
    3684:	str	w5, [x19, #56]
    3688:	bl	0 <d_make_comp>
    368c:	mov	x20, x0
    3690:	str	x0, [sp, #72]
    3694:	ldp	x21, x22, [sp, #32]
    3698:	ldr	x23, [sp, #48]
    369c:	b	2ca8 <d_type+0x188>
    36a0:	add	x4, x4, #0x3
    36a4:	stp	x21, x22, [sp, #32]
    36a8:	mov	w1, #0x1                   	// #1
    36ac:	ldr	w21, [x19, #76]
    36b0:	mov	x0, x19
    36b4:	str	x4, [x19, #24]
    36b8:	str	w1, [x19, #76]
    36bc:	bl	1508 <d_expression_1>
    36c0:	mov	x20, x0
    36c4:	str	w21, [x19, #76]
    36c8:	ldp	x21, x22, [sp, #32]
    36cc:	b	3130 <d_type+0x610>
    36d0:	ldp	x21, x22, [sp, #32]
    36d4:	ldr	x23, [sp, #48]
    36d8:	b	2b50 <d_type+0x30>
    36dc:	mov	x0, #0x0                   	// #0
    36e0:	stp	x21, x22, [sp, #32]
    36e4:	str	x23, [sp, #48]
    36e8:	str	wzr, [x0]
    36ec:	brk	#0x3e8
    36f0:	mov	x0, #0x0                   	// #0
    36f4:	str	xzr, [sp, #72]
    36f8:	stp	x21, x22, [sp, #32]
    36fc:	str	x23, [sp, #48]
    3700:	ldr	x0, [x0, #8]
    3704:	brk	#0x3e8

0000000000003708 <d_operator_name>:
    3708:	stp	x29, x30, [sp, #-32]!
    370c:	mov	x29, sp
    3710:	ldr	x1, [x0, #24]
    3714:	stp	x19, x20, [sp, #16]
    3718:	mov	x19, x0
    371c:	ldrb	w10, [x1]
    3720:	cbz	w10, 37e4 <d_operator_name+0xdc>
    3724:	add	x2, x1, #0x1
    3728:	str	x2, [x0, #24]
    372c:	ldrb	w10, [x1, #1]
    3730:	ldrb	w8, [x1]
    3734:	cbnz	w10, 37ec <d_operator_name+0xe4>
    3738:	adrp	x5, 0 <d_make_comp>
    373c:	add	x5, x5, #0x0
    3740:	add	x5, x5, #0x5c8
    3744:	mov	w4, #0x43                  	// #67
    3748:	mov	w2, #0x0                   	// #0
    374c:	mov	w7, #0x18                  	// #24
    3750:	sub	w1, w4, w2
    3754:	add	w1, w1, w1, lsr #31
    3758:	add	w1, w2, w1, asr #1
    375c:	smull	x3, w1, w7
    3760:	add	x9, x5, x3
    3764:	ldr	x3, [x5, x3]
    3768:	ldrb	w6, [x3]
    376c:	cmp	w6, w8
    3770:	b.eq	3794 <d_operator_name+0x8c>  // b.none
    3774:	b.ls	37dc <d_operator_name+0xd4>  // b.plast
    3778:	mov	w4, w1
    377c:	cmp	w2, w4
    3780:	b.ne	3750 <d_operator_name+0x48>  // b.any
    3784:	mov	x0, #0x0                   	// #0
    3788:	ldp	x19, x20, [sp, #16]
    378c:	ldp	x29, x30, [sp], #32
    3790:	ret
    3794:	ldrb	w3, [x3, #1]
    3798:	cmp	w3, w10
    379c:	b.ne	3774 <d_operator_name+0x6c>  // b.any
    37a0:	ldp	w0, w1, [x19, #40]
    37a4:	cmp	w0, w1
    37a8:	b.ge	3784 <d_operator_name+0x7c>  // b.tcont
    37ac:	ldr	x2, [x19, #32]
    37b0:	smull	x7, w0, w7
    37b4:	add	w1, w0, #0x1
    37b8:	mov	w3, #0x32                  	// #50
    37bc:	add	x0, x2, x7
    37c0:	str	wzr, [x0, #4]
    37c4:	str	w1, [x19, #40]
    37c8:	str	w3, [x2, x7]
    37cc:	str	x9, [x0, #8]
    37d0:	ldp	x19, x20, [sp, #16]
    37d4:	ldp	x29, x30, [sp], #32
    37d8:	ret
    37dc:	add	w2, w1, #0x1
    37e0:	b	377c <d_operator_name+0x74>
    37e4:	mov	w8, #0x0                   	// #0
    37e8:	b	3738 <d_operator_name+0x30>
    37ec:	add	x2, x1, #0x2
    37f0:	str	x2, [x0, #24]
    37f4:	cmp	w8, #0x76
    37f8:	ldrb	w10, [x1, #1]
    37fc:	b.ne	3858 <d_operator_name+0x150>  // b.any
    3800:	sub	w11, w10, #0x30
    3804:	and	w1, w11, #0xff
    3808:	cmp	w1, #0x9
    380c:	b.hi	3738 <d_operator_name+0x30>  // b.pmore
    3810:	bl	4b0 <d_source_name>
    3814:	mov	x2, x0
    3818:	ldp	w1, w0, [x19, #40]
    381c:	cmp	w1, w0
    3820:	b.ge	3784 <d_operator_name+0x7c>  // b.tcont
    3824:	mov	w0, #0x18                  	// #24
    3828:	add	w4, w1, #0x1
    382c:	ldr	x3, [x19, #32]
    3830:	smull	x1, w1, w0
    3834:	add	x0, x3, x1
    3838:	str	wzr, [x0, #4]
    383c:	str	w4, [x19, #40]
    3840:	cbz	x2, 3784 <d_operator_name+0x7c>
    3844:	mov	x4, #0x33                  	// #51
    3848:	str	x4, [x3, x1]
    384c:	str	w11, [x0, #8]
    3850:	str	x2, [x0, #16]
    3854:	b	3788 <d_operator_name+0x80>
    3858:	cmp	w10, #0x76
    385c:	mov	w1, #0x63                  	// #99
    3860:	ccmp	w8, w1, #0x0, eq  // eq = none
    3864:	b.ne	3738 <d_operator_name+0x30>  // b.any
    3868:	ldp	w1, w20, [x0, #76]
    386c:	cmp	w1, #0x0
    3870:	cset	w1, eq  // eq = none
    3874:	str	w1, [x0, #80]
    3878:	bl	2b20 <d_type>
    387c:	mov	x2, x0
    3880:	ldr	w1, [x19, #80]
    3884:	mov	x3, #0x0                   	// #0
    3888:	cbz	w1, 38a8 <d_operator_name+0x1a0>
    388c:	mov	x0, x19
    3890:	mov	w1, #0x35                  	// #53
    3894:	bl	0 <d_make_comp>
    3898:	str	w20, [x19, #80]
    389c:	ldp	x19, x20, [sp, #16]
    38a0:	ldp	x29, x30, [sp], #32
    38a4:	ret
    38a8:	mov	x0, x19
    38ac:	mov	w1, #0x34                  	// #52
    38b0:	bl	0 <d_make_comp>
    38b4:	str	w20, [x19, #80]
    38b8:	b	389c <d_operator_name+0x194>
    38bc:	nop

00000000000038c0 <d_parmlist>:
    38c0:	stp	x29, x30, [sp, #-64]!
    38c4:	mov	x29, sp
    38c8:	stp	x19, x20, [sp, #16]
    38cc:	mov	x19, x0
    38d0:	mov	w0, #0x2e                  	// #46
    38d4:	str	xzr, [sp, #56]
    38d8:	ldr	x2, [x19, #24]
    38dc:	ldrb	w1, [x2]
    38e0:	cmp	w1, #0x45
    38e4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    38e8:	ccmp	w1, w0, #0x4, ne  // ne = any
    38ec:	b.eq	3980 <d_parmlist+0xc0>  // b.none
    38f0:	add	x20, sp, #0x38
    38f4:	stp	x21, x22, [sp, #32]
    38f8:	mov	w22, w0
    38fc:	mov	w21, #0x4f                  	// #79
    3900:	cmp	w1, #0x52
    3904:	mov	x0, x19
    3908:	ccmp	w1, w21, #0x4, ne  // ne = any
    390c:	b.ne	391c <d_parmlist+0x5c>  // b.any
    3910:	ldrb	w1, [x2, #1]
    3914:	cmp	w1, #0x45
    3918:	b.eq	395c <d_parmlist+0x9c>  // b.none
    391c:	bl	2b20 <d_type>
    3920:	mov	x2, x0
    3924:	mov	x3, #0x0                   	// #0
    3928:	mov	x0, x19
    392c:	mov	w1, #0x2e                  	// #46
    3930:	cbz	x2, 397c <d_parmlist+0xbc>
    3934:	bl	0 <d_make_comp>
    3938:	str	x0, [x20]
    393c:	add	x20, x0, #0x10
    3940:	cbz	x0, 397c <d_parmlist+0xbc>
    3944:	ldr	x2, [x19, #24]
    3948:	ldrb	w1, [x2]
    394c:	cmp	w1, #0x45
    3950:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    3954:	ccmp	w1, w22, #0x4, ne  // ne = any
    3958:	b.ne	3900 <d_parmlist+0x40>  // b.any
    395c:	ldr	x0, [sp, #56]
    3960:	cbz	x0, 397c <d_parmlist+0xbc>
    3964:	ldr	x1, [x0, #16]
    3968:	cbz	x1, 3990 <d_parmlist+0xd0>
    396c:	ldp	x21, x22, [sp, #32]
    3970:	ldp	x19, x20, [sp, #16]
    3974:	ldp	x29, x30, [sp], #64
    3978:	ret
    397c:	ldp	x21, x22, [sp, #32]
    3980:	mov	x0, #0x0                   	// #0
    3984:	ldp	x19, x20, [sp, #16]
    3988:	ldp	x29, x30, [sp], #64
    398c:	ret
    3990:	ldr	x1, [x0, #8]
    3994:	ldr	w2, [x1]
    3998:	cmp	w2, #0x27
    399c:	b.ne	396c <d_parmlist+0xac>  // b.any
    39a0:	ldr	x1, [x1, #8]
    39a4:	ldr	w2, [x1, #28]
    39a8:	cmp	w2, #0x9
    39ac:	b.ne	396c <d_parmlist+0xac>  // b.any
    39b0:	ldr	w2, [x1, #8]
    39b4:	ldr	w1, [x19, #72]
    39b8:	ldp	x21, x22, [sp, #32]
    39bc:	sub	w1, w1, w2
    39c0:	str	w1, [x19, #72]
    39c4:	str	xzr, [x0, #8]
    39c8:	b	3970 <d_parmlist+0xb0>
    39cc:	nop

00000000000039d0 <d_cv_qualifiers>:
    39d0:	stp	x29, x30, [sp, #-96]!
    39d4:	cmp	w2, #0x0
    39d8:	mov	x29, sp
    39dc:	stp	x19, x20, [sp, #16]
    39e0:	mov	x19, x0
    39e4:	mov	w0, #0x1b                  	// #27
    39e8:	stp	x21, x22, [sp, #32]
    39ec:	mov	x20, x1
    39f0:	mov	w22, #0x1c                  	// #28
    39f4:	ldr	x4, [x19, #24]
    39f8:	stp	x23, x24, [sp, #48]
    39fc:	mov	w23, #0x1d                  	// #29
    3a00:	stp	x25, x26, [sp, #64]
    3a04:	mov	w25, #0x1e                  	// #30
    3a08:	csel	w25, w25, w0, ne  // ne = any
    3a0c:	ldrb	w5, [x4]
    3a10:	mov	w0, #0x1a                  	// #26
    3a14:	csel	w23, w23, w0, ne  // ne = any
    3a18:	mov	w0, #0x19                  	// #25
    3a1c:	mov	w24, w2
    3a20:	csel	w22, w22, w0, ne  // ne = any
    3a24:	mov	x21, x1
    3a28:	mov	x0, x4
    3a2c:	mov	w26, #0x1                   	// #1
    3a30:	bl	9c0 <next_is_type_qual.isra.0>
    3a34:	cbz	w0, 3b50 <d_cv_qualifiers+0x180>
    3a38:	add	x0, x4, #0x1
    3a3c:	str	x0, [x19, #24]
    3a40:	cmp	w5, #0x72
    3a44:	b.eq	3b10 <d_cv_qualifiers+0x140>  // b.none
    3a48:	cmp	w5, #0x56
    3a4c:	b.eq	3bb0 <d_cv_qualifiers+0x1e0>  // b.none
    3a50:	cmp	w5, #0x4b
    3a54:	b.eq	3bc8 <d_cv_qualifiers+0x1f8>  // b.none
    3a58:	ldrb	w0, [x4, #1]
    3a5c:	cbz	w0, 3af0 <d_cv_qualifiers+0x120>
    3a60:	add	x0, x4, #0x2
    3a64:	str	x0, [x19, #24]
    3a68:	ldrb	w0, [x4, #1]
    3a6c:	cmp	w0, #0x78
    3a70:	b.eq	3be0 <d_cv_qualifiers+0x210>  // b.none
    3a74:	and	w1, w0, #0xffffffdf
    3a78:	cmp	w1, #0x4f
    3a7c:	and	w1, w1, #0xff
    3a80:	b.ne	3bf8 <d_cv_qualifiers+0x228>  // b.any
    3a84:	ldr	w2, [x19, #72]
    3a88:	cmp	w0, #0x4f
    3a8c:	add	w0, w2, #0x9
    3a90:	str	w0, [x19, #72]
    3a94:	b.ne	3c3c <d_cv_qualifiers+0x26c>  // b.any
    3a98:	str	x27, [sp, #80]
    3a9c:	mov	x0, x19
    3aa0:	ldr	w27, [x19, #76]
    3aa4:	str	w26, [x19, #76]
    3aa8:	bl	1508 <d_expression_1>
    3aac:	str	w27, [x19, #76]
    3ab0:	mov	x3, x0
    3ab4:	cbz	x0, 3c54 <d_cv_qualifiers+0x284>
    3ab8:	ldr	x0, [x19, #24]
    3abc:	ldrb	w1, [x0]
    3ac0:	cmp	w1, #0x45
    3ac4:	b.ne	3c54 <d_cv_qualifiers+0x284>  // b.any
    3ac8:	add	x0, x0, #0x1
    3acc:	mov	w1, #0x4f                  	// #79
    3ad0:	ldr	x27, [sp, #80]
    3ad4:	str	x0, [x19, #24]
    3ad8:	mov	x2, #0x0                   	// #0
    3adc:	mov	x0, x19
    3ae0:	bl	0 <d_make_comp>
    3ae4:	str	x0, [x20]
    3ae8:	cbnz	x0, 3b38 <d_cv_qualifiers+0x168>
    3aec:	nop
    3af0:	mov	x20, #0x0                   	// #0
    3af4:	mov	x0, x20
    3af8:	ldp	x19, x20, [sp, #16]
    3afc:	ldp	x21, x22, [sp, #32]
    3b00:	ldp	x23, x24, [sp, #48]
    3b04:	ldp	x25, x26, [sp, #64]
    3b08:	ldp	x29, x30, [sp], #96
    3b0c:	ret
    3b10:	ldr	w0, [x19, #72]
    3b14:	mov	w1, w22
    3b18:	mov	x3, #0x0                   	// #0
    3b1c:	add	w0, w0, #0x9
    3b20:	str	w0, [x19, #72]
    3b24:	mov	x0, x19
    3b28:	mov	x2, #0x0                   	// #0
    3b2c:	bl	0 <d_make_comp>
    3b30:	str	x0, [x20]
    3b34:	cbz	x0, 3af0 <d_cv_qualifiers+0x120>
    3b38:	ldr	x4, [x19, #24]
    3b3c:	add	x20, x0, #0x8
    3b40:	mov	x0, x4
    3b44:	ldrb	w5, [x4]
    3b48:	bl	9c0 <next_is_type_qual.isra.0>
    3b4c:	cbnz	w0, 3a38 <d_cv_qualifiers+0x68>
    3b50:	cmp	w5, #0x46
    3b54:	eor	w24, w24, #0x1
    3b58:	cset	w0, eq  // eq = none
    3b5c:	tst	w24, w0
    3b60:	b.eq	3af4 <d_cv_qualifiers+0x124>  // b.none
    3b64:	cmp	x20, x21
    3b68:	b.eq	3af4 <d_cv_qualifiers+0x124>  // b.none
    3b6c:	mov	w3, #0x1d                  	// #29
    3b70:	mov	w2, #0x1e                  	// #30
    3b74:	mov	w1, #0x1c                  	// #28
    3b78:	b	3b90 <d_cv_qualifiers+0x1c0>
    3b7c:	cmp	w0, #0x19
    3b80:	b.eq	3c4c <d_cv_qualifiers+0x27c>  // b.none
    3b84:	add	x21, x21, #0x8
    3b88:	cmp	x20, x21
    3b8c:	b.eq	3af4 <d_cv_qualifiers+0x124>  // b.none
    3b90:	ldr	x21, [x21]
    3b94:	ldr	w0, [x21]
    3b98:	cmp	w0, #0x1a
    3b9c:	b.eq	3c44 <d_cv_qualifiers+0x274>  // b.none
    3ba0:	cmp	w0, #0x1b
    3ba4:	b.ne	3b7c <d_cv_qualifiers+0x1ac>  // b.any
    3ba8:	str	w2, [x21]
    3bac:	b	3b84 <d_cv_qualifiers+0x1b4>
    3bb0:	ldr	w0, [x19, #72]
    3bb4:	mov	w1, w23
    3bb8:	mov	x3, #0x0                   	// #0
    3bbc:	add	w0, w0, #0x9
    3bc0:	str	w0, [x19, #72]
    3bc4:	b	3b24 <d_cv_qualifiers+0x154>
    3bc8:	ldr	w0, [x19, #72]
    3bcc:	mov	w1, w25
    3bd0:	mov	x3, #0x0                   	// #0
    3bd4:	add	w0, w0, #0x6
    3bd8:	str	w0, [x19, #72]
    3bdc:	b	3b24 <d_cv_qualifiers+0x154>
    3be0:	ldr	w0, [x19, #72]
    3be4:	mov	x3, #0x0                   	// #0
    3be8:	mov	w1, #0x4d                  	// #77
    3bec:	add	w0, w0, #0x11
    3bf0:	str	w0, [x19, #72]
    3bf4:	b	3b24 <d_cv_qualifiers+0x154>
    3bf8:	cmp	w0, #0x77
    3bfc:	b.ne	3af0 <d_cv_qualifiers+0x120>  // b.any
    3c00:	ldr	w1, [x19, #72]
    3c04:	mov	x0, x19
    3c08:	add	w1, w1, #0x6
    3c0c:	str	w1, [x19, #72]
    3c10:	bl	38c0 <d_parmlist>
    3c14:	mov	x3, x0
    3c18:	cbz	x0, 3af0 <d_cv_qualifiers+0x120>
    3c1c:	ldr	x0, [x19, #24]
    3c20:	ldrb	w1, [x0]
    3c24:	cmp	w1, #0x45
    3c28:	b.ne	3af0 <d_cv_qualifiers+0x120>  // b.any
    3c2c:	add	x0, x0, #0x1
    3c30:	mov	w1, #0x50                  	// #80
    3c34:	str	x0, [x19, #24]
    3c38:	b	3b24 <d_cv_qualifiers+0x154>
    3c3c:	mov	x3, #0x0                   	// #0
    3c40:	b	3b24 <d_cv_qualifiers+0x154>
    3c44:	str	w3, [x21]
    3c48:	b	3b84 <d_cv_qualifiers+0x1b4>
    3c4c:	str	w1, [x21]
    3c50:	b	3b84 <d_cv_qualifiers+0x1b4>
    3c54:	ldr	x27, [sp, #80]
    3c58:	b	3af0 <d_cv_qualifiers+0x120>
    3c5c:	nop

0000000000003c60 <d_bare_function_type>:
    3c60:	stp	x29, x30, [sp, #-32]!
    3c64:	mov	x29, sp
    3c68:	stp	x19, x20, [sp, #16]
    3c6c:	mov	x19, x0
    3c70:	ldr	x0, [x0, #24]
    3c74:	ldrb	w2, [x0]
    3c78:	cmp	w2, #0x4a
    3c7c:	b.eq	3ce0 <d_bare_function_type+0x80>  // b.none
    3c80:	cbz	w1, 3cbc <d_bare_function_type+0x5c>
    3c84:	mov	x0, x19
    3c88:	bl	2b20 <d_type>
    3c8c:	mov	x20, x0
    3c90:	cbz	x0, 3cd0 <d_bare_function_type+0x70>
    3c94:	mov	x0, x19
    3c98:	bl	38c0 <d_parmlist>
    3c9c:	mov	x3, x0
    3ca0:	cbz	x0, 3cd0 <d_bare_function_type+0x70>
    3ca4:	mov	x2, x20
    3ca8:	mov	x0, x19
    3cac:	ldp	x19, x20, [sp, #16]
    3cb0:	mov	w1, #0x29                  	// #41
    3cb4:	ldp	x29, x30, [sp], #32
    3cb8:	b	0 <d_make_comp>
    3cbc:	mov	x0, x19
    3cc0:	mov	x20, #0x0                   	// #0
    3cc4:	bl	38c0 <d_parmlist>
    3cc8:	mov	x3, x0
    3ccc:	cbnz	x0, 3ca4 <d_bare_function_type+0x44>
    3cd0:	mov	x0, #0x0                   	// #0
    3cd4:	ldp	x19, x20, [sp, #16]
    3cd8:	ldp	x29, x30, [sp], #32
    3cdc:	ret
    3ce0:	add	x0, x0, #0x1
    3ce4:	str	x0, [x19, #24]
    3ce8:	b	3c84 <d_bare_function_type+0x24>
    3cec:	nop

0000000000003cf0 <d_function_type>:
    3cf0:	stp	x29, x30, [sp, #-32]!
    3cf4:	mov	x29, sp
    3cf8:	str	x19, [sp, #16]
    3cfc:	mov	x19, x0
    3d00:	ldr	w0, [x0, #16]
    3d04:	tbnz	w0, #18, 3d40 <d_function_type+0x50>
    3d08:	ldr	w1, [x19, #84]
    3d0c:	cmp	w1, #0x800
    3d10:	b.hi	3d50 <d_function_type+0x60>  // b.pmore
    3d14:	ldr	x2, [x19, #24]
    3d18:	add	w0, w1, #0x1
    3d1c:	str	w0, [x19, #84]
    3d20:	mov	x0, #0x0                   	// #0
    3d24:	ldrb	w3, [x2]
    3d28:	cmp	w3, #0x46
    3d2c:	b.eq	3d60 <d_function_type+0x70>  // b.none
    3d30:	str	w1, [x19, #84]
    3d34:	ldr	x19, [sp, #16]
    3d38:	ldp	x29, x30, [sp], #32
    3d3c:	ret
    3d40:	ldr	x2, [x19, #24]
    3d44:	ldrb	w0, [x2]
    3d48:	cmp	w0, #0x46
    3d4c:	b.eq	3d60 <d_function_type+0x70>  // b.none
    3d50:	mov	x0, #0x0                   	// #0
    3d54:	ldr	x19, [sp, #16]
    3d58:	ldp	x29, x30, [sp], #32
    3d5c:	ret
    3d60:	add	x4, x2, #0x1
    3d64:	str	x4, [x19, #24]
    3d68:	add	x3, x2, #0x2
    3d6c:	mov	w1, #0x1                   	// #1
    3d70:	ldrb	w2, [x2, #1]
    3d74:	mov	x0, x19
    3d78:	cmp	w2, #0x59
    3d7c:	csel	x2, x3, x4, eq  // eq = none
    3d80:	str	x2, [x19, #24]
    3d84:	bl	3c60 <d_bare_function_type>
    3d88:	mov	x1, x0
    3d8c:	mov	x0, x19
    3d90:	bl	88 <d_ref_qualifier>
    3d94:	ldr	x1, [x19, #24]
    3d98:	ldrb	w2, [x1]
    3d9c:	cmp	w2, #0x45
    3da0:	b.eq	3dc0 <d_function_type+0xd0>  // b.none
    3da4:	mov	x0, #0x0                   	// #0
    3da8:	ldr	w1, [x19, #16]
    3dac:	tbnz	w1, #18, 3d54 <d_function_type+0x64>
    3db0:	ldr	w1, [x19, #84]
    3db4:	sub	w1, w1, #0x1
    3db8:	str	w1, [x19, #84]
    3dbc:	b	3d34 <d_function_type+0x44>
    3dc0:	add	x1, x1, #0x1
    3dc4:	str	x1, [x19, #24]
    3dc8:	b	3da8 <d_function_type+0xb8>
    3dcc:	nop

0000000000003dd0 <d_unqualified_name>:
    3dd0:	stp	x29, x30, [sp, #-48]!
    3dd4:	mov	x29, sp
    3dd8:	ldr	x3, [x0, #24]
    3ddc:	stp	x19, x20, [sp, #16]
    3de0:	mov	x19, x0
    3de4:	ldrb	w2, [x3]
    3de8:	sub	w1, w2, #0x30
    3dec:	and	w1, w1, #0xff
    3df0:	cmp	w1, #0x9
    3df4:	b.ls	3f04 <d_unqualified_name+0x134>  // b.plast
    3df8:	sub	w1, w2, #0x61
    3dfc:	and	w1, w1, #0xff
    3e00:	cmp	w1, #0x19
    3e04:	b.hi	3e4c <d_unqualified_name+0x7c>  // b.pmore
    3e08:	cmp	w2, #0x6f
    3e0c:	b.eq	3fcc <d_unqualified_name+0x1fc>  // b.none
    3e10:	mov	x0, x19
    3e14:	bl	3708 <d_operator_name>
    3e18:	mov	x20, x0
    3e1c:	cbz	x0, 3e2c <d_unqualified_name+0x5c>
    3e20:	ldr	w0, [x0]
    3e24:	cmp	w0, #0x32
    3e28:	b.eq	3f30 <d_unqualified_name+0x160>  // b.none
    3e2c:	ldr	x0, [x19, #24]
    3e30:	ldrb	w1, [x0]
    3e34:	cmp	w1, #0x42
    3e38:	b.eq	3f1c <d_unqualified_name+0x14c>  // b.none
    3e3c:	mov	x0, x20
    3e40:	ldp	x19, x20, [sp, #16]
    3e44:	ldp	x29, x30, [sp], #48
    3e48:	ret
    3e4c:	sub	w1, w2, #0x43
    3e50:	and	w1, w1, #0xff
    3e54:	cmp	w1, #0x1
    3e58:	b.ls	3fe4 <d_unqualified_name+0x214>  // b.plast
    3e5c:	cmp	w2, #0x4c
    3e60:	b.eq	3f98 <d_unqualified_name+0x1c8>  // b.none
    3e64:	cmp	w2, #0x55
    3e68:	b.ne	3fb8 <d_unqualified_name+0x1e8>  // b.any
    3e6c:	ldrb	w1, [x3, #1]
    3e70:	cmp	w1, #0x6c
    3e74:	b.eq	40a8 <d_unqualified_name+0x2d8>  // b.none
    3e78:	cmp	w1, #0x74
    3e7c:	b.ne	3fb8 <d_unqualified_name+0x1e8>  // b.any
    3e80:	add	x1, x3, #0x1
    3e84:	str	x1, [x0, #24]
    3e88:	mov	x20, #0x0                   	// #0
    3e8c:	ldrb	w1, [x3, #1]
    3e90:	cmp	w1, #0x74
    3e94:	b.ne	3e34 <d_unqualified_name+0x64>  // b.any
    3e98:	add	x3, x3, #0x2
    3e9c:	str	x3, [x0, #24]
    3ea0:	bl	3b8 <d_compact_number>
    3ea4:	tbnz	w0, #31, 3e2c <d_unqualified_name+0x5c>
    3ea8:	ldp	w1, w2, [x19, #40]
    3eac:	cmp	w1, w2
    3eb0:	b.ge	4270 <d_unqualified_name+0x4a0>  // b.tcont
    3eb4:	ldp	x7, x3, [x19, #24]
    3eb8:	mov	w2, #0x18                  	// #24
    3ebc:	add	w6, w1, #0x1
    3ec0:	mov	w4, #0x48                  	// #72
    3ec4:	smull	x1, w1, w2
    3ec8:	sxtw	x0, w0
    3ecc:	ldp	w2, w5, [x19, #56]
    3ed0:	add	x20, x3, x1
    3ed4:	cmp	w2, w5
    3ed8:	str	wzr, [x20, #4]
    3edc:	str	w6, [x19, #40]
    3ee0:	str	w4, [x3, x1]
    3ee4:	str	x0, [x20, #8]
    3ee8:	b.ge	4264 <d_unqualified_name+0x494>  // b.tcont
    3eec:	ldr	x1, [x19, #48]
    3ef0:	add	w0, w2, #0x1
    3ef4:	str	x20, [x1, w2, sxtw #3]
    3ef8:	str	w0, [x19, #56]
    3efc:	ldrb	w1, [x7]
    3f00:	b	3e34 <d_unqualified_name+0x64>
    3f04:	bl	4b0 <d_source_name>
    3f08:	mov	x20, x0
    3f0c:	ldr	x3, [x19, #24]
    3f10:	ldrb	w1, [x3]
    3f14:	cmp	w1, #0x42
    3f18:	b.ne	3e3c <d_unqualified_name+0x6c>  // b.any
    3f1c:	mov	x1, x20
    3f20:	mov	x0, x19
    3f24:	ldp	x19, x20, [sp, #16]
    3f28:	ldp	x29, x30, [sp], #48
    3f2c:	b	630 <d_abi_tags>
    3f30:	ldr	x1, [x20, #8]
    3f34:	ldr	w0, [x19, #72]
    3f38:	ldr	x2, [x1]
    3f3c:	add	w0, w0, #0x7
    3f40:	ldr	w1, [x1, #16]
    3f44:	add	w0, w0, w1
    3f48:	str	w0, [x19, #72]
    3f4c:	ldrb	w0, [x2]
    3f50:	cmp	w0, #0x6c
    3f54:	b.ne	3e2c <d_unqualified_name+0x5c>  // b.any
    3f58:	ldrb	w0, [x2, #1]
    3f5c:	cmp	w0, #0x69
    3f60:	b.ne	3e2c <d_unqualified_name+0x5c>  // b.any
    3f64:	ldrb	w0, [x2, #2]
    3f68:	cbnz	w0, 3e2c <d_unqualified_name+0x5c>
    3f6c:	mov	x0, x19
    3f70:	bl	4b0 <d_source_name>
    3f74:	mov	x2, x20
    3f78:	mov	x3, x0
    3f7c:	mov	w1, #0x37                  	// #55
    3f80:	mov	x0, x19
    3f84:	bl	0 <d_make_comp>
    3f88:	mov	x20, x0
    3f8c:	ldr	x3, [x19, #24]
    3f90:	ldrb	w1, [x3]
    3f94:	b	3e34 <d_unqualified_name+0x64>
    3f98:	add	x3, x3, #0x1
    3f9c:	str	x3, [x0, #24]
    3fa0:	bl	4b0 <d_source_name>
    3fa4:	mov	x20, x0
    3fa8:	cbz	x0, 3fb8 <d_unqualified_name+0x1e8>
    3fac:	mov	x0, x19
    3fb0:	bl	a18 <d_discriminator>
    3fb4:	cbnz	w0, 3e2c <d_unqualified_name+0x5c>
    3fb8:	mov	x20, #0x0                   	// #0
    3fbc:	mov	x0, x20
    3fc0:	ldp	x19, x20, [sp, #16]
    3fc4:	ldp	x29, x30, [sp], #48
    3fc8:	ret
    3fcc:	ldrb	w0, [x3, #1]
    3fd0:	cmp	w0, #0x6e
    3fd4:	b.ne	3e10 <d_unqualified_name+0x40>  // b.any
    3fd8:	add	x3, x3, #0x2
    3fdc:	str	x3, [x19, #24]
    3fe0:	b	3e10 <d_unqualified_name+0x40>
    3fe4:	ldr	x0, [x0, #64]
    3fe8:	cbz	x0, 3ffc <d_unqualified_name+0x22c>
    3fec:	ldr	w1, [x0]
    3ff0:	cbz	w1, 4078 <d_unqualified_name+0x2a8>
    3ff4:	cmp	w1, #0x18
    3ff8:	b.eq	4078 <d_unqualified_name+0x2a8>  // b.none
    3ffc:	cmp	w2, #0x43
    4000:	b.eq	4158 <d_unqualified_name+0x388>  // b.none
    4004:	ldrb	w1, [x3, #1]
    4008:	cmp	w1, #0x32
    400c:	b.eq	425c <d_unqualified_name+0x48c>  // b.none
    4010:	b.hi	41cc <d_unqualified_name+0x3fc>  // b.pmore
    4014:	cmp	w1, #0x30
    4018:	b.eq	41f8 <d_unqualified_name+0x428>  // b.none
    401c:	cmp	w1, #0x31
    4020:	mov	w4, #0x2                   	// #2
    4024:	b.ne	41e0 <d_unqualified_name+0x410>  // b.any
    4028:	add	x1, x3, #0x2
    402c:	ldr	w2, [x19, #44]
    4030:	str	x1, [x19, #24]
    4034:	ldr	w1, [x19, #40]
    4038:	cmp	w1, w2
    403c:	b.ge	41ec <d_unqualified_name+0x41c>  // b.tcont
    4040:	mov	w6, #0x18                  	// #24
    4044:	add	w5, w1, #0x1
    4048:	ldr	x2, [x19, #32]
    404c:	smull	x1, w1, w6
    4050:	add	x20, x2, x1
    4054:	str	wzr, [x20, #4]
    4058:	str	w5, [x19, #40]
    405c:	cbz	x0, 41ec <d_unqualified_name+0x41c>
    4060:	mov	x5, #0x8                   	// #8
    4064:	str	x5, [x2, x1]
    4068:	str	w4, [x20, #8]
    406c:	str	x0, [x20, #16]
    4070:	ldrb	w1, [x3, #2]
    4074:	b	3e34 <d_unqualified_name+0x64>
    4078:	ldr	w2, [x0, #16]
    407c:	ldr	w1, [x19, #72]
    4080:	add	w1, w1, w2
    4084:	str	w1, [x19, #72]
    4088:	ldrb	w1, [x3]
    408c:	cmp	w1, #0x43
    4090:	mov	w2, w1
    4094:	b.eq	4158 <d_unqualified_name+0x388>  // b.none
    4098:	cmp	w1, #0x44
    409c:	b.eq	4004 <d_unqualified_name+0x234>  // b.none
    40a0:	mov	x20, #0x0                   	// #0
    40a4:	b	3e34 <d_unqualified_name+0x64>
    40a8:	add	x1, x3, #0x1
    40ac:	str	x1, [x0, #24]
    40b0:	mov	x20, #0x0                   	// #0
    40b4:	ldrb	w1, [x3, #1]
    40b8:	cmp	w1, #0x6c
    40bc:	b.ne	3e34 <d_unqualified_name+0x64>  // b.any
    40c0:	add	x3, x3, #0x2
    40c4:	str	x3, [x0, #24]
    40c8:	bl	38c0 <d_parmlist>
    40cc:	mov	x11, x0
    40d0:	ldr	x0, [x19, #24]
    40d4:	ldrb	w1, [x0]
    40d8:	cbz	x11, 3e34 <d_unqualified_name+0x64>
    40dc:	cmp	w1, #0x45
    40e0:	b.ne	3e34 <d_unqualified_name+0x64>  // b.any
    40e4:	add	x0, x0, #0x1
    40e8:	str	x0, [x19, #24]
    40ec:	mov	x0, x19
    40f0:	bl	3b8 <d_compact_number>
    40f4:	tbnz	w0, #31, 4270 <d_unqualified_name+0x4a0>
    40f8:	ldp	w1, w2, [x19, #40]
    40fc:	ldr	x4, [x19, #24]
    4100:	cmp	w1, w2
    4104:	b.ge	4280 <d_unqualified_name+0x4b0>  // b.tcont
    4108:	mov	w2, #0x18                  	// #24
    410c:	add	w6, w1, #0x1
    4110:	ldr	x3, [x19, #32]
    4114:	smull	x1, w1, w2
    4118:	ldp	w2, w7, [x19, #56]
    411c:	add	x20, x3, x1
    4120:	mov	w5, #0x46                  	// #70
    4124:	cmp	w2, w7
    4128:	str	wzr, [x20, #4]
    412c:	str	w6, [x19, #40]
    4130:	str	w5, [x3, x1]
    4134:	str	x11, [x20, #8]
    4138:	str	w0, [x20, #16]
    413c:	b.ge	4280 <d_unqualified_name+0x4b0>  // b.tcont
    4140:	ldr	x1, [x19, #48]
    4144:	add	w0, w2, #0x1
    4148:	str	x20, [x1, w2, sxtw #3]
    414c:	str	w0, [x19, #56]
    4150:	ldrb	w1, [x4]
    4154:	b	3e34 <d_unqualified_name+0x64>
    4158:	str	x21, [sp, #32]
    415c:	ldrb	w1, [x3, #1]
    4160:	cmp	w1, #0x49
    4164:	b.eq	4208 <d_unqualified_name+0x438>  // b.none
    4168:	sub	w2, w1, #0x31
    416c:	and	w2, w2, #0xff
    4170:	cmp	w2, #0x4
    4174:	b.hi	4250 <d_unqualified_name+0x480>  // b.pmore
    4178:	sub	w21, w1, #0x30
    417c:	add	x3, x3, #0x2
    4180:	str	x3, [x19, #24]
    4184:	ldp	w1, w2, [x19, #40]
    4188:	cmp	w1, w2
    418c:	b.ge	428c <d_unqualified_name+0x4bc>  // b.tcont
    4190:	mov	w4, #0x18                  	// #24
    4194:	add	w3, w1, #0x1
    4198:	smull	x1, w1, w4
    419c:	ldp	x4, x2, [x19, #24]
    41a0:	add	x20, x2, x1
    41a4:	str	wzr, [x20, #4]
    41a8:	str	w3, [x19, #40]
    41ac:	cbz	x0, 4240 <d_unqualified_name+0x470>
    41b0:	mov	x3, #0x7                   	// #7
    41b4:	str	x3, [x2, x1]
    41b8:	str	w21, [x20, #8]
    41bc:	str	x0, [x20, #16]
    41c0:	ldr	x21, [sp, #32]
    41c4:	ldrb	w1, [x4]
    41c8:	b	3e34 <d_unqualified_name+0x64>
    41cc:	cmp	w1, #0x34
    41d0:	b.eq	4200 <d_unqualified_name+0x430>  // b.none
    41d4:	cmp	w1, #0x35
    41d8:	mov	w4, #0x5                   	// #5
    41dc:	b.eq	4028 <d_unqualified_name+0x258>  // b.none
    41e0:	mov	w1, w2
    41e4:	mov	x20, #0x0                   	// #0
    41e8:	b	3e34 <d_unqualified_name+0x64>
    41ec:	ldrb	w1, [x3, #2]
    41f0:	mov	x20, #0x0                   	// #0
    41f4:	b	3e34 <d_unqualified_name+0x64>
    41f8:	mov	w4, #0x1                   	// #1
    41fc:	b	4028 <d_unqualified_name+0x258>
    4200:	mov	w4, #0x4                   	// #4
    4204:	b	4028 <d_unqualified_name+0x258>
    4208:	add	x0, x3, #0x1
    420c:	str	x0, [x19, #24]
    4210:	ldrb	w1, [x3, #2]
    4214:	sub	w0, w1, #0x31
    4218:	and	w0, w0, #0xff
    421c:	cmp	w0, #0x4
    4220:	b.hi	42a0 <d_unqualified_name+0x4d0>  // b.pmore
    4224:	add	x3, x3, #0x3
    4228:	str	x3, [x19, #24]
    422c:	sub	w21, w1, #0x30
    4230:	mov	x0, x19
    4234:	bl	2b20 <d_type>
    4238:	ldr	x0, [x19, #64]
    423c:	b	4184 <d_unqualified_name+0x3b4>
    4240:	ldrb	w1, [x4]
    4244:	mov	x20, #0x0                   	// #0
    4248:	ldr	x21, [sp, #32]
    424c:	b	3e34 <d_unqualified_name+0x64>
    4250:	mov	x20, #0x0                   	// #0
    4254:	ldr	x21, [sp, #32]
    4258:	b	3fbc <d_unqualified_name+0x1ec>
    425c:	mov	w4, #0x3                   	// #3
    4260:	b	4028 <d_unqualified_name+0x258>
    4264:	ldrb	w1, [x7]
    4268:	mov	x20, #0x0                   	// #0
    426c:	b	3e34 <d_unqualified_name+0x64>
    4270:	ldr	x0, [x19, #24]
    4274:	mov	x20, #0x0                   	// #0
    4278:	ldrb	w1, [x0]
    427c:	b	3e34 <d_unqualified_name+0x64>
    4280:	ldrb	w1, [x4]
    4284:	mov	x20, #0x0                   	// #0
    4288:	b	3e34 <d_unqualified_name+0x64>
    428c:	ldr	x0, [x19, #24]
    4290:	mov	x20, #0x0                   	// #0
    4294:	ldr	x21, [sp, #32]
    4298:	ldrb	w1, [x0]
    429c:	b	3e34 <d_unqualified_name+0x64>
    42a0:	ldrb	w1, [x3, #1]
    42a4:	mov	x20, #0x0                   	// #0
    42a8:	ldr	x21, [sp, #32]
    42ac:	b	3e34 <d_unqualified_name+0x64>

00000000000042b0 <d_expr_primary>:
    42b0:	ldr	x2, [x0, #24]
    42b4:	ldrb	w1, [x2]
    42b8:	cmp	w1, #0x4c
    42bc:	b.ne	43a4 <d_expr_primary+0xf4>  // b.any
    42c0:	stp	x29, x30, [sp, #-32]!
    42c4:	add	x1, x2, #0x1
    42c8:	mov	w4, #0x5a                  	// #90
    42cc:	mov	x29, sp
    42d0:	str	x19, [sp, #16]
    42d4:	mov	x19, x0
    42d8:	str	x1, [x0, #24]
    42dc:	ldrb	w3, [x2, #1]
    42e0:	cmp	w3, #0x5f
    42e4:	ccmp	w3, w4, #0x4, ne  // ne = any
    42e8:	b.eq	4364 <d_expr_primary+0xb4>  // b.none
    42ec:	bl	2b20 <d_type>
    42f0:	mov	x2, x0
    42f4:	cbz	x0, 4354 <d_expr_primary+0xa4>
    42f8:	ldr	w0, [x0]
    42fc:	cmp	w0, #0x27
    4300:	b.eq	441c <d_expr_primary+0x16c>  // b.none
    4304:	ldr	x0, [x19, #24]
    4308:	mov	w1, #0x3d                  	// #61
    430c:	ldrb	w4, [x0]
    4310:	cmp	w4, #0x6e
    4314:	b.ne	432c <d_expr_primary+0x7c>  // b.any
    4318:	add	x3, x0, #0x1
    431c:	str	x3, [x19, #24]
    4320:	mov	w1, #0x3e                  	// #62
    4324:	ldrb	w4, [x0, #1]
    4328:	mov	x0, x3
    432c:	cmp	w4, #0x45
    4330:	b.eq	4444 <d_expr_primary+0x194>  // b.none
    4334:	add	x3, x0, #0x1
    4338:	b	434c <d_expr_primary+0x9c>
    433c:	str	x3, [x19, #24]
    4340:	ldrb	w4, [x3], #1
    4344:	cmp	w4, #0x45
    4348:	b.eq	43c8 <d_expr_primary+0x118>  // b.none
    434c:	mov	x5, x3
    4350:	cbnz	w4, 433c <d_expr_primary+0x8c>
    4354:	mov	x0, #0x0                   	// #0
    4358:	ldr	x19, [sp, #16]
    435c:	ldp	x29, x30, [sp], #32
    4360:	ret
    4364:	cmp	w3, #0x5f
    4368:	b.eq	43ac <d_expr_primary+0xfc>  // b.none
    436c:	add	x1, x1, #0x1
    4370:	str	x1, [x19, #24]
    4374:	mov	x0, x19
    4378:	mov	w1, #0x0                   	// #0
    437c:	bl	1dd8 <d_encoding>
    4380:	ldr	x1, [x19, #24]
    4384:	ldrb	w2, [x1]
    4388:	cmp	w2, #0x45
    438c:	b.ne	4354 <d_expr_primary+0xa4>  // b.any
    4390:	add	x1, x1, #0x1
    4394:	str	x1, [x19, #24]
    4398:	ldr	x19, [sp, #16]
    439c:	ldp	x29, x30, [sp], #32
    43a0:	ret
    43a4:	mov	x0, #0x0                   	// #0
    43a8:	ret
    43ac:	add	x1, x2, #0x2
    43b0:	str	x1, [x19, #24]
    43b4:	mov	x0, #0x0                   	// #0
    43b8:	ldrb	w2, [x2, #2]
    43bc:	cmp	w2, w4
    43c0:	b.ne	4388 <d_expr_primary+0xd8>  // b.any
    43c4:	b	436c <d_expr_primary+0xbc>
    43c8:	sub	w5, w5, w0
    43cc:	ldp	w3, w4, [x19, #40]
    43d0:	cmp	w3, w4
    43d4:	b.ge	443c <d_expr_primary+0x18c>  // b.tcont
    43d8:	mov	w4, #0x18                  	// #24
    43dc:	add	w7, w3, #0x1
    43e0:	ldr	x6, [x19, #32]
    43e4:	smull	x4, w3, w4
    43e8:	cmp	w5, #0x0
    43ec:	add	x3, x6, x4
    43f0:	str	wzr, [x3, #4]
    43f4:	str	w7, [x19, #40]
    43f8:	b.le	443c <d_expr_primary+0x18c>
    43fc:	str	xzr, [x6, x4]
    4400:	str	x0, [x3, #8]
    4404:	str	w5, [x3, #16]
    4408:	mov	x0, x19
    440c:	bl	0 <d_make_comp>
    4410:	ldr	x1, [x19, #24]
    4414:	ldrb	w2, [x1]
    4418:	b	4388 <d_expr_primary+0xd8>
    441c:	ldr	x0, [x2, #8]
    4420:	ldr	w1, [x0, #28]
    4424:	cbz	w1, 4304 <d_expr_primary+0x54>
    4428:	ldr	w1, [x0, #8]
    442c:	ldr	w0, [x19, #72]
    4430:	sub	w0, w0, w1
    4434:	str	w0, [x19, #72]
    4438:	b	4304 <d_expr_primary+0x54>
    443c:	mov	x3, #0x0                   	// #0
    4440:	b	4408 <d_expr_primary+0x158>
    4444:	mov	w5, #0x0                   	// #0
    4448:	b	43cc <d_expr_primary+0x11c>
    444c:	nop

0000000000004450 <d_print_comp_inner>:
    4450:	stp	x29, x30, [sp, #-224]!
    4454:	mov	x29, sp
    4458:	stp	x19, x20, [sp, #16]
    445c:	mov	x19, x0
    4460:	cbz	x2, 44e8 <d_print_comp_inner+0x98>
    4464:	stp	x21, x22, [sp, #32]
    4468:	ldr	w22, [x0, #304]
    446c:	cbnz	w22, 44b0 <d_print_comp_inner+0x60>
    4470:	ldr	w0, [x2]
    4474:	mov	x20, x2
    4478:	cmp	w0, #0x50
    447c:	b.ls	4490 <d_print_comp_inner+0x40>  // b.plast
    4480:	mov	w0, #0x1                   	// #1
    4484:	ldp	x21, x22, [sp, #32]
    4488:	str	w0, [x19, #304]
    448c:	b	44b4 <d_print_comp_inner+0x64>
    4490:	mov	w21, w1
    4494:	adrp	x1, 0 <d_make_comp>
    4498:	add	x1, x1, #0x0
    449c:	stp	x23, x24, [sp, #48]
    44a0:	ldrh	w1, [x1, w0, uxtw #1]
    44a4:	adr	x2, 44b0 <d_print_comp_inner+0x60>
    44a8:	add	x1, x2, w1, sxth #2
    44ac:	br	x1
    44b0:	ldp	x21, x22, [sp, #32]
    44b4:	ldp	x19, x20, [sp, #16]
    44b8:	ldp	x29, x30, [sp], #224
    44bc:	ret
    44c0:	ldr	x0, [x20, #16]
    44c4:	ldr	w1, [x0]
    44c8:	cmp	w1, #0x3b
    44cc:	b.ne	44e0 <d_print_comp_inner+0x90>  // b.any
    44d0:	ldr	x0, [x0, #16]
    44d4:	ldr	w0, [x0]
    44d8:	cmp	w0, #0x3c
    44dc:	b.eq	79c8 <d_print_comp_inner+0x3578>  // b.none
    44e0:	ldp	x21, x22, [sp, #32]
    44e4:	ldp	x23, x24, [sp, #48]
    44e8:	mov	w0, #0x1                   	// #1
    44ec:	str	w0, [x19, #304]
    44f0:	ldp	x19, x20, [sp, #16]
    44f4:	ldp	x29, x30, [sp], #224
    44f8:	ret
    44fc:	ldp	x1, x2, [x19, #288]
    4500:	add	x0, sp, #0x60
    4504:	stp	x2, x20, [sp, #96]
    4508:	str	wzr, [sp, #112]
    450c:	str	x1, [sp, #120]
    4510:	str	x0, [x19, #296]
    4514:	ldr	x2, [x20, #8]
    4518:	mov	x0, x19
    451c:	mov	w1, w21
    4520:	bl	8260 <d_print_comp>
    4524:	ldr	w0, [sp, #112]
    4528:	cbz	w0, 68d4 <d_print_comp_inner+0x2484>
    452c:	ldr	x0, [sp, #96]
    4530:	str	x0, [x19, #296]
    4534:	cbz	w22, 6108 <d_print_comp_inner+0x1cb8>
    4538:	ldp	x21, x22, [sp, #32]
    453c:	str	x23, [x19, #288]
    4540:	ldp	x23, x24, [sp, #48]
    4544:	b	44b4 <d_print_comp_inner+0x64>
    4548:	ldr	x4, [x19, #296]
    454c:	cbz	x4, 4688 <d_print_comp_inner+0x238>
    4550:	mov	x1, x4
    4554:	nop
    4558:	ldr	w2, [x1, #16]
    455c:	cbnz	w2, 457c <d_print_comp_inner+0x12c>
    4560:	ldr	x2, [x1, #8]
    4564:	ldr	w2, [x2]
    4568:	sub	w3, w2, #0x19
    456c:	cmp	w3, #0x2
    4570:	b.hi	7528 <d_print_comp_inner+0x30d8>  // b.pmore
    4574:	cmp	w0, w2
    4578:	b.eq	7548 <d_print_comp_inner+0x30f8>  // b.none
    457c:	ldr	x1, [x1]
    4580:	cbnz	x1, 4558 <d_print_comp_inner+0x108>
    4584:	b	4688 <d_print_comp_inner+0x238>
    4588:	ldp	x23, x24, [sp, #48]
    458c:	b	4480 <d_print_comp_inner+0x30>
    4590:	ldr	x2, [x20, #8]
    4594:	mov	w22, #0x0                   	// #0
    4598:	ldr	w1, [x2]
    459c:	cmp	w1, #0x27
    45a0:	b.eq	6db0 <d_print_comp_inner+0x2960>  // b.none
    45a4:	ldr	x1, [x19, #256]
    45a8:	add	x0, x1, #0x1
    45ac:	cmp	x1, #0xff
    45b0:	b.ne	45dc <d_print_comp_inner+0x18c>  // b.any
    45b4:	ldp	x3, x2, [x19, #272]
    45b8:	strb	wzr, [x19, #255]
    45bc:	mov	x0, x19
    45c0:	blr	x3
    45c4:	ldr	x3, [x19, #320]
    45c8:	mov	x0, #0x1                   	// #1
    45cc:	mov	x1, #0x0                   	// #0
    45d0:	add	x3, x3, x0
    45d4:	ldr	x2, [x20, #8]
    45d8:	str	x3, [x19, #320]
    45dc:	str	x0, [x19, #256]
    45e0:	mov	w0, #0x28                  	// #40
    45e4:	strb	w0, [x19, x1]
    45e8:	mov	w1, w21
    45ec:	strb	w0, [x19, #264]
    45f0:	mov	x0, x19
    45f4:	bl	8260 <d_print_comp>
    45f8:	ldr	x1, [x19, #256]
    45fc:	cmp	x1, #0xff
    4600:	b.eq	74a0 <d_print_comp_inner+0x3050>  // b.none
    4604:	add	x3, x1, #0x1
    4608:	str	x3, [x19, #256]
    460c:	mov	w0, #0x29                  	// #41
    4610:	strb	w0, [x19, x1]
    4614:	strb	w0, [x19, #264]
    4618:	ldr	w0, [x20]
    461c:	cmp	w0, #0x3e
    4620:	b.eq	7564 <d_print_comp_inner+0x3114>  // b.none
    4624:	cmp	w22, #0x8
    4628:	b.eq	7344 <d_print_comp_inner+0x2ef4>  // b.none
    462c:	ldr	x2, [x20, #16]
    4630:	mov	w1, w21
    4634:	mov	x0, x19
    4638:	bl	8260 <d_print_comp>
    463c:	ldp	x21, x22, [sp, #32]
    4640:	ldp	x23, x24, [sp, #48]
    4644:	b	44b4 <d_print_comp_inner+0x64>
    4648:	ldr	w2, [x19, #312]
    464c:	ldr	x0, [x20, #8]
    4650:	ldr	w1, [x0]
    4654:	cbnz	w2, 4664 <d_print_comp_inner+0x214>
    4658:	cmp	w1, #0x5
    465c:	mov	w22, #0x0                   	// #0
    4660:	b.eq	7924 <d_print_comp_inner+0x34d4>  // b.none
    4664:	cmp	w1, #0x23
    4668:	ldr	x4, [x19, #296]
    466c:	b.eq	697c <d_print_comp_inner+0x252c>  // b.none
    4670:	ldr	w2, [x20]
    4674:	cmp	w2, w1
    4678:	b.eq	697c <d_print_comp_inner+0x252c>  // b.none
    467c:	cmp	w1, #0x24
    4680:	b.eq	60e4 <d_print_comp_inner+0x1c94>  // b.none
    4684:	nop
    4688:	ldr	x1, [x19, #288]
    468c:	add	x0, sp, #0x60
    4690:	stp	x4, x20, [sp, #96]
    4694:	str	wzr, [sp, #112]
    4698:	str	x1, [sp, #120]
    469c:	str	x0, [x19, #296]
    46a0:	b	4514 <d_print_comp_inner+0xc4>
    46a4:	ldr	x2, [x20, #8]
    46a8:	mov	w1, w21
    46ac:	mov	x0, x19
    46b0:	bl	8260 <d_print_comp>
    46b4:	tbz	w21, #2, 72e8 <d_print_comp_inner+0x2e98>
    46b8:	ldr	x1, [x19, #256]
    46bc:	add	x0, x1, #0x1
    46c0:	cmp	x1, #0xff
    46c4:	b.ne	46ec <d_print_comp_inner+0x29c>  // b.any
    46c8:	ldp	x3, x2, [x19, #272]
    46cc:	strb	wzr, [x19, #255]
    46d0:	mov	x0, x19
    46d4:	blr	x3
    46d8:	ldr	x2, [x19, #320]
    46dc:	mov	x0, #0x1                   	// #1
    46e0:	mov	x1, #0x0                   	// #0
    46e4:	add	x2, x2, x0
    46e8:	str	x2, [x19, #320]
    46ec:	str	x0, [x19, #256]
    46f0:	mov	w0, #0x2e                  	// #46
    46f4:	strb	w0, [x19, x1]
    46f8:	strb	w0, [x19, #264]
    46fc:	ldr	x23, [x20, #16]
    4700:	ldr	w0, [x23]
    4704:	cmp	w0, #0x47
    4708:	b.eq	75a0 <d_print_comp_inner+0x3150>  // b.none
    470c:	mov	x2, x23
    4710:	mov	w1, w21
    4714:	mov	x0, x19
    4718:	bl	8260 <d_print_comp>
    471c:	ldp	x21, x22, [sp, #32]
    4720:	ldp	x23, x24, [sp, #48]
    4724:	b	44b4 <d_print_comp_inner+0x64>
    4728:	ldp	x3, x4, [x19, #288]
    472c:	add	x0, sp, #0x60
    4730:	ldr	x2, [x20, #16]
    4734:	str	x0, [x19, #296]
    4738:	mov	w1, w21
    473c:	mov	x0, x19
    4740:	stp	x4, x20, [sp, #96]
    4744:	str	wzr, [sp, #112]
    4748:	str	x3, [sp, #120]
    474c:	bl	8260 <d_print_comp>
    4750:	ldr	w0, [sp, #112]
    4754:	cbz	w0, 7264 <d_print_comp_inner+0x2e14>
    4758:	ldr	x0, [sp, #96]
    475c:	ldp	x21, x22, [sp, #32]
    4760:	ldp	x23, x24, [sp, #48]
    4764:	str	x0, [x19, #296]
    4768:	b	44b4 <d_print_comp_inner+0x64>
    476c:	ldr	x2, [x20, #8]
    4770:	cbz	x2, 4780 <d_print_comp_inner+0x330>
    4774:	mov	w1, w21
    4778:	mov	x0, x19
    477c:	bl	8260 <d_print_comp>
    4780:	ldr	x0, [x20, #16]
    4784:	cbz	x0, 7510 <d_print_comp_inner+0x30c0>
    4788:	ldr	x22, [x19, #256]
    478c:	cmp	x22, #0xfd
    4790:	b.ls	47bc <d_print_comp_inner+0x36c>  // b.plast
    4794:	strb	wzr, [x19, x22]
    4798:	mov	x1, x22
    479c:	mov	x0, x19
    47a0:	mov	x22, #0x0                   	// #0
    47a4:	ldp	x3, x2, [x19, #272]
    47a8:	blr	x3
    47ac:	str	xzr, [x19, #256]
    47b0:	ldr	x0, [x19, #320]
    47b4:	add	x0, x0, #0x1
    47b8:	str	x0, [x19, #320]
    47bc:	mov	w23, #0x2c                  	// #44
    47c0:	mov	x24, #0x0                   	// #0
    47c4:	b	47e8 <d_print_comp_inner+0x398>
    47c8:	mov	x0, x22
    47cc:	add	x22, x22, #0x1
    47d0:	str	x22, [x19, #256]
    47d4:	strb	w23, [x19, x0]
    47d8:	strb	w23, [x19, #264]
    47dc:	mov	w23, #0x20                  	// #32
    47e0:	cbnz	x24, 691c <d_print_comp_inner+0x24cc>
    47e4:	mov	x24, #0x1                   	// #1
    47e8:	cmp	x22, #0xff
    47ec:	b.ne	47c8 <d_print_comp_inner+0x378>  // b.any
    47f0:	ldp	x3, x2, [x19, #272]
    47f4:	strb	wzr, [x19, #255]
    47f8:	mov	x1, x22
    47fc:	mov	x0, x19
    4800:	mov	x22, #0x1                   	// #1
    4804:	blr	x3
    4808:	ldr	x1, [x19, #320]
    480c:	mov	x0, #0x0                   	// #0
    4810:	add	x1, x1, x22
    4814:	str	x1, [x19, #320]
    4818:	b	47d0 <d_print_comp_inner+0x380>
    481c:	ldr	x2, [x20, #16]
    4820:	mov	w1, w21
    4824:	mov	x0, x19
    4828:	bl	8260 <d_print_comp>
    482c:	ldp	x21, x22, [sp, #32]
    4830:	ldp	x23, x24, [sp, #48]
    4834:	b	44b4 <d_print_comp_inner+0x64>
    4838:	adrp	x24, 0 <d_make_comp>
    483c:	add	x24, x24, #0x0
    4840:	adrp	x22, 320 <d_number.isra.0+0xa0>
    4844:	add	x24, x24, #0x1c
    4848:	add	x22, x22, #0x0
    484c:	mov	w23, #0x67                  	// #103
    4850:	ldr	x1, [x19, #256]
    4854:	b	4878 <d_print_comp_inner+0x428>
    4858:	mov	x0, x1
    485c:	add	x1, x1, #0x1
    4860:	str	x1, [x19, #256]
    4864:	cmp	x22, x24
    4868:	strb	w23, [x19, x0]
    486c:	strb	w23, [x19, #264]
    4870:	b.eq	651c <d_print_comp_inner+0x20cc>  // b.none
    4874:	ldrb	w23, [x22], #1
    4878:	cmp	x1, #0xff
    487c:	b.ne	4858 <d_print_comp_inner+0x408>  // b.any
    4880:	ldp	x3, x2, [x19, #272]
    4884:	strb	wzr, [x19, #255]
    4888:	mov	x0, x19
    488c:	blr	x3
    4890:	ldr	x2, [x19, #320]
    4894:	mov	x1, #0x1                   	// #1
    4898:	mov	x0, #0x0                   	// #0
    489c:	add	x2, x2, x1
    48a0:	str	x2, [x19, #320]
    48a4:	b	4860 <d_print_comp_inner+0x410>
    48a8:	adrp	x22, 0 <d_make_comp>
    48ac:	add	x22, x22, #0x0
    48b0:	add	x24, x22, #0x8
    48b4:	mov	w23, #0x7b                  	// #123
    48b8:	ldr	x1, [x19, #256]
    48bc:	b	48e4 <d_print_comp_inner+0x494>
    48c0:	mov	x0, x1
    48c4:	add	x1, x1, #0x1
    48c8:	str	x1, [x19, #256]
    48cc:	add	x22, x22, #0x1
    48d0:	strb	w23, [x19, x0]
    48d4:	cmp	x24, x22
    48d8:	strb	w23, [x19, #264]
    48dc:	b.eq	6538 <d_print_comp_inner+0x20e8>  // b.none
    48e0:	ldrb	w23, [x22]
    48e4:	cmp	x1, #0xff
    48e8:	b.ne	48c0 <d_print_comp_inner+0x470>  // b.any
    48ec:	ldp	x3, x2, [x19, #272]
    48f0:	strb	wzr, [x19, #255]
    48f4:	mov	x0, x19
    48f8:	blr	x3
    48fc:	ldr	x2, [x19, #320]
    4900:	mov	x1, #0x1                   	// #1
    4904:	mov	x0, #0x0                   	// #0
    4908:	add	x2, x2, x1
    490c:	str	x2, [x19, #320]
    4910:	b	48c8 <d_print_comp_inner+0x478>
    4914:	adrp	x23, 0 <d_make_comp>
    4918:	add	x23, x23, #0x0
    491c:	adrp	x21, 350 <d_number_component>
    4920:	add	x23, x23, #0xe
    4924:	add	x21, x21, #0x0
    4928:	mov	w22, #0x7b                  	// #123
    492c:	ldr	x1, [x19, #256]
    4930:	b	4954 <d_print_comp_inner+0x504>
    4934:	mov	x0, x1
    4938:	add	x1, x1, #0x1
    493c:	str	x1, [x19, #256]
    4940:	cmp	x23, x21
    4944:	strb	w22, [x19, x0]
    4948:	strb	w22, [x19, #264]
    494c:	b.eq	642c <d_print_comp_inner+0x1fdc>  // b.none
    4950:	ldrb	w22, [x21], #1
    4954:	cmp	x1, #0xff
    4958:	b.ne	4934 <d_print_comp_inner+0x4e4>  // b.any
    495c:	ldp	x3, x2, [x19, #272]
    4960:	strb	wzr, [x19, #255]
    4964:	mov	x0, x19
    4968:	blr	x3
    496c:	ldr	x2, [x19, #320]
    4970:	mov	x1, #0x1                   	// #1
    4974:	mov	x0, #0x0                   	// #0
    4978:	add	x2, x2, x1
    497c:	str	x2, [x19, #320]
    4980:	b	493c <d_print_comp_inner+0x4ec>
    4984:	adrp	x24, 0 <d_make_comp>
    4988:	add	x24, x24, #0x0
    498c:	adrp	x22, 218 <d_append_buffer+0x40>
    4990:	add	x24, x24, #0x16
    4994:	add	x22, x22, #0x0
    4998:	mov	w23, #0x74                  	// #116
    499c:	ldr	x1, [x19, #256]
    49a0:	b	49c4 <d_print_comp_inner+0x574>
    49a4:	mov	x0, x1
    49a8:	add	x1, x1, #0x1
    49ac:	str	x1, [x19, #256]
    49b0:	cmp	x24, x22
    49b4:	strb	w23, [x19, x0]
    49b8:	strb	w23, [x19, #264]
    49bc:	b.eq	6500 <d_print_comp_inner+0x20b0>  // b.none
    49c0:	ldrb	w23, [x22], #1
    49c4:	cmp	x1, #0xff
    49c8:	b.ne	49a4 <d_print_comp_inner+0x554>  // b.any
    49cc:	ldp	x3, x2, [x19, #272]
    49d0:	strb	wzr, [x19, #255]
    49d4:	mov	x0, x19
    49d8:	blr	x3
    49dc:	ldr	x2, [x19, #320]
    49e0:	mov	x1, #0x1                   	// #1
    49e4:	mov	x0, #0x0                   	// #0
    49e8:	add	x2, x2, x1
    49ec:	str	x2, [x19, #320]
    49f0:	b	49ac <d_print_comp_inner+0x55c>
    49f4:	adrp	x24, 0 <d_make_comp>
    49f8:	add	x24, x24, #0x0
    49fc:	adrp	x22, 88 <d_ref_qualifier>
    4a00:	add	x24, x24, #0x1e
    4a04:	add	x22, x22, #0x0
    4a08:	mov	w23, #0x74                  	// #116
    4a0c:	ldr	x1, [x19, #256]
    4a10:	b	4a34 <d_print_comp_inner+0x5e4>
    4a14:	mov	x0, x1
    4a18:	add	x1, x1, #0x1
    4a1c:	str	x1, [x19, #256]
    4a20:	cmp	x24, x22
    4a24:	strb	w23, [x19, x0]
    4a28:	strb	w23, [x19, #264]
    4a2c:	b.eq	6410 <d_print_comp_inner+0x1fc0>  // b.none
    4a30:	ldrb	w23, [x22], #1
    4a34:	cmp	x1, #0xff
    4a38:	b.ne	4a14 <d_print_comp_inner+0x5c4>  // b.any
    4a3c:	ldp	x3, x2, [x19, #272]
    4a40:	strb	wzr, [x19, #255]
    4a44:	mov	x0, x19
    4a48:	blr	x3
    4a4c:	ldr	x2, [x19, #320]
    4a50:	mov	x1, #0x1                   	// #1
    4a54:	mov	x0, #0x0                   	// #0
    4a58:	add	x2, x2, x1
    4a5c:	str	x2, [x19, #320]
    4a60:	b	4a1c <d_print_comp_inner+0x5cc>
    4a64:	ldp	x2, x20, [x20, #8]
    4a68:	cbz	x2, 4a78 <d_print_comp_inner+0x628>
    4a6c:	mov	w1, w21
    4a70:	mov	x0, x19
    4a74:	bl	8260 <d_print_comp>
    4a78:	ldr	x1, [x19, #256]
    4a7c:	add	x0, x1, #0x1
    4a80:	cmp	x1, #0xff
    4a84:	b.ne	4aac <d_print_comp_inner+0x65c>  // b.any
    4a88:	ldp	x3, x2, [x19, #272]
    4a8c:	strb	wzr, [x19, #255]
    4a90:	mov	x0, x19
    4a94:	blr	x3
    4a98:	ldr	x2, [x19, #320]
    4a9c:	mov	x0, #0x1                   	// #1
    4aa0:	mov	x1, #0x0                   	// #0
    4aa4:	add	x2, x2, x0
    4aa8:	str	x2, [x19, #320]
    4aac:	str	x0, [x19, #256]
    4ab0:	mov	w0, #0x7b                  	// #123
    4ab4:	strb	w0, [x19, x1]
    4ab8:	mov	x2, x20
    4abc:	strb	w0, [x19, #264]
    4ac0:	mov	w1, w21
    4ac4:	mov	x0, x19
    4ac8:	bl	8260 <d_print_comp>
    4acc:	ldr	x1, [x19, #256]
    4ad0:	add	x0, x1, #0x1
    4ad4:	cmp	x1, #0xff
    4ad8:	b.ne	4b00 <d_print_comp_inner+0x6b0>  // b.any
    4adc:	ldp	x3, x2, [x19, #272]
    4ae0:	strb	wzr, [x19, #255]
    4ae4:	mov	x0, x19
    4ae8:	blr	x3
    4aec:	ldr	x2, [x19, #320]
    4af0:	mov	x0, #0x1                   	// #1
    4af4:	mov	x1, #0x0                   	// #0
    4af8:	add	x2, x2, x0
    4afc:	str	x2, [x19, #320]
    4b00:	str	x0, [x19, #256]
    4b04:	mov	w0, #0x7d                  	// #125
    4b08:	strb	w0, [x19, x1]
    4b0c:	strb	w0, [x19, #264]
    4b10:	ldp	x21, x22, [sp, #32]
    4b14:	ldp	x23, x24, [sp, #48]
    4b18:	b	44b4 <d_print_comp_inner+0x64>
    4b1c:	ldr	x22, [x20, #8]
    4b20:	adrp	x20, 0 <d_make_comp>
    4b24:	add	x20, x20, #0x0
    4b28:	mov	w21, #0x6f                  	// #111
    4b2c:	add	x24, x20, #0x8
    4b30:	ldr	w23, [x22, #16]
    4b34:	ldr	x1, [x19, #256]
    4b38:	b	4b60 <d_print_comp_inner+0x710>
    4b3c:	mov	x0, x1
    4b40:	add	x1, x1, #0x1
    4b44:	str	x1, [x19, #256]
    4b48:	add	x20, x20, #0x1
    4b4c:	strb	w21, [x19, x0]
    4b50:	cmp	x24, x20
    4b54:	strb	w21, [x19, #264]
    4b58:	b.eq	6334 <d_print_comp_inner+0x1ee4>  // b.none
    4b5c:	ldrb	w21, [x20]
    4b60:	cmp	x1, #0xff
    4b64:	b.ne	4b3c <d_print_comp_inner+0x6ec>  // b.any
    4b68:	ldp	x3, x2, [x19, #272]
    4b6c:	strb	wzr, [x19, #255]
    4b70:	mov	x0, x19
    4b74:	blr	x3
    4b78:	ldr	x2, [x19, #320]
    4b7c:	mov	x1, #0x1                   	// #1
    4b80:	mov	x0, #0x0                   	// #0
    4b84:	add	x2, x2, x1
    4b88:	str	x2, [x19, #320]
    4b8c:	b	4b44 <d_print_comp_inner+0x6f4>
    4b90:	adrp	x22, 0 <d_make_comp>
    4b94:	add	x22, x22, #0x0
    4b98:	add	x24, x22, #0x9
    4b9c:	mov	w23, #0x6f                  	// #111
    4ba0:	ldr	x1, [x19, #256]
    4ba4:	b	4bcc <d_print_comp_inner+0x77c>
    4ba8:	mov	x0, x1
    4bac:	add	x1, x1, #0x1
    4bb0:	str	x1, [x19, #256]
    4bb4:	add	x22, x22, #0x1
    4bb8:	strb	w23, [x19, x0]
    4bbc:	cmp	x22, x24
    4bc0:	strb	w23, [x19, #264]
    4bc4:	b.eq	6174 <d_print_comp_inner+0x1d24>  // b.none
    4bc8:	ldrb	w23, [x22]
    4bcc:	cmp	x1, #0xff
    4bd0:	b.ne	4ba8 <d_print_comp_inner+0x758>  // b.any
    4bd4:	ldp	x3, x2, [x19, #272]
    4bd8:	strb	wzr, [x19, #255]
    4bdc:	mov	x0, x19
    4be0:	blr	x3
    4be4:	ldr	x2, [x19, #320]
    4be8:	mov	x1, #0x1                   	// #1
    4bec:	mov	x0, #0x0                   	// #0
    4bf0:	add	x2, x2, x1
    4bf4:	str	x2, [x19, #320]
    4bf8:	b	4bb0 <d_print_comp_inner+0x760>
    4bfc:	ldr	x2, [x20, #8]
    4c00:	mov	w1, w21
    4c04:	mov	x0, x19
    4c08:	adrp	x22, 0 <d_make_comp>
    4c0c:	add	x22, x22, #0x0
    4c10:	mov	w23, #0x20                  	// #32
    4c14:	bl	8260 <d_print_comp>
    4c18:	add	x24, x22, #0x8
    4c1c:	ldr	x1, [x19, #256]
    4c20:	b	4c48 <d_print_comp_inner+0x7f8>
    4c24:	mov	x0, x1
    4c28:	add	x1, x1, #0x1
    4c2c:	str	x1, [x19, #256]
    4c30:	add	x22, x22, #0x1
    4c34:	strb	w23, [x19, x0]
    4c38:	cmp	x24, x22
    4c3c:	strb	w23, [x19, #264]
    4c40:	b.eq	6114 <d_print_comp_inner+0x1cc4>  // b.none
    4c44:	ldrb	w23, [x22]
    4c48:	cmp	x1, #0xff
    4c4c:	b.ne	4c24 <d_print_comp_inner+0x7d4>  // b.any
    4c50:	ldp	x3, x2, [x19, #272]
    4c54:	strb	wzr, [x19, #255]
    4c58:	mov	x0, x19
    4c5c:	blr	x3
    4c60:	ldr	x2, [x19, #320]
    4c64:	mov	x1, #0x1                   	// #1
    4c68:	mov	x0, #0x0                   	// #0
    4c6c:	add	x2, x2, x1
    4c70:	str	x2, [x19, #320]
    4c74:	b	4c2c <d_print_comp_inner+0x7dc>
    4c78:	ldr	x2, [x20, #8]
    4c7c:	mov	w1, w21
    4c80:	mov	x0, x19
    4c84:	bl	8260 <d_print_comp>
    4c88:	ldp	x21, x22, [sp, #32]
    4c8c:	ldp	x23, x24, [sp, #48]
    4c90:	b	44b4 <d_print_comp_inner+0x64>
    4c94:	and	w22, w21, #0xffffff9f
    4c98:	ldr	x3, [x19, #296]
    4c9c:	tbnz	w21, #5, 7470 <d_print_comp_inner+0x3020>
    4ca0:	ldr	x2, [x20, #8]
    4ca4:	cbz	x2, 4cac <d_print_comp_inner+0x85c>
    4ca8:	tbz	w21, #6, 77a4 <d_print_comp_inner+0x3354>
    4cac:	mov	w1, w22
    4cb0:	add	x2, x20, #0x10
    4cb4:	mov	x0, x19
    4cb8:	bl	8af8 <d_print_function_type.isra.0>
    4cbc:	ldp	x21, x22, [sp, #32]
    4cc0:	ldp	x23, x24, [sp, #48]
    4cc4:	b	44b4 <d_print_comp_inner+0x64>
    4cc8:	ldr	x23, [x20, #8]
    4ccc:	ldr	x1, [x19, #256]
    4cd0:	cbz	x23, 6b3c <d_print_comp_inner+0x26ec>
    4cd4:	adrp	x20, 0 <d_make_comp>
    4cd8:	add	x20, x20, #0x0
    4cdc:	add	x22, x20, #0x6
    4ce0:	mov	w21, #0x7b                  	// #123
    4ce4:	b	4d0c <d_print_comp_inner+0x8bc>
    4ce8:	mov	x0, x1
    4cec:	add	x1, x1, #0x1
    4cf0:	str	x1, [x19, #256]
    4cf4:	add	x20, x20, #0x1
    4cf8:	strb	w21, [x19, x0]
    4cfc:	cmp	x22, x20
    4d00:	strb	w21, [x19, #264]
    4d04:	b.eq	6bb0 <d_print_comp_inner+0x2760>  // b.none
    4d08:	ldrb	w21, [x20]
    4d0c:	cmp	x1, #0xff
    4d10:	b.ne	4ce8 <d_print_comp_inner+0x898>  // b.any
    4d14:	ldp	x3, x2, [x19, #272]
    4d18:	strb	wzr, [x19, #255]
    4d1c:	mov	x0, x19
    4d20:	blr	x3
    4d24:	ldr	x2, [x19, #320]
    4d28:	mov	x1, #0x1                   	// #1
    4d2c:	mov	x0, #0x0                   	// #0
    4d30:	add	x2, x2, x1
    4d34:	str	x2, [x19, #320]
    4d38:	b	4cf0 <d_print_comp_inner+0x8a0>
    4d3c:	adrp	x24, 0 <d_make_comp>
    4d40:	add	x24, x24, #0x0
    4d44:	adrp	x22, 200 <d_append_buffer+0x28>
    4d48:	add	x24, x24, #0x11
    4d4c:	add	x22, x22, #0x0
    4d50:	mov	w23, #0x68                  	// #104
    4d54:	ldr	x1, [x19, #256]
    4d58:	b	4d7c <d_print_comp_inner+0x92c>
    4d5c:	mov	x0, x1
    4d60:	add	x1, x1, #0x1
    4d64:	str	x1, [x19, #256]
    4d68:	cmp	x22, x24
    4d6c:	strb	w23, [x19, x0]
    4d70:	strb	w23, [x19, #264]
    4d74:	b.eq	67dc <d_print_comp_inner+0x238c>  // b.none
    4d78:	ldrb	w23, [x22], #1
    4d7c:	cmp	x1, #0xff
    4d80:	b.ne	4d5c <d_print_comp_inner+0x90c>  // b.any
    4d84:	ldp	x3, x2, [x19, #272]
    4d88:	strb	wzr, [x19, #255]
    4d8c:	mov	x0, x19
    4d90:	blr	x3
    4d94:	ldr	x2, [x19, #320]
    4d98:	mov	x1, #0x1                   	// #1
    4d9c:	mov	x0, #0x0                   	// #0
    4da0:	add	x2, x2, x1
    4da4:	str	x2, [x19, #320]
    4da8:	b	4d64 <d_print_comp_inner+0x914>
    4dac:	ldrsw	x22, [x20, #16]
    4db0:	ldr	x20, [x20, #8]
    4db4:	cbz	x22, 7ca4 <d_print_comp_inner+0x3854>
    4db8:	add	x22, x20, x22
    4dbc:	ldr	x1, [x19, #256]
    4dc0:	b	4de4 <d_print_comp_inner+0x994>
    4dc4:	mov	x0, x1
    4dc8:	add	x1, x1, #0x1
    4dcc:	str	x1, [x19, #256]
    4dd0:	add	x20, x20, #0x1
    4dd4:	strb	w21, [x19, x0]
    4dd8:	cmp	x22, x20
    4ddc:	strb	w21, [x19, #264]
    4de0:	b.eq	68e8 <d_print_comp_inner+0x2498>  // b.none
    4de4:	ldrb	w21, [x20]
    4de8:	cmp	x1, #0xff
    4dec:	b.ne	4dc4 <d_print_comp_inner+0x974>  // b.any
    4df0:	ldp	x3, x2, [x19, #272]
    4df4:	strb	wzr, [x19, #255]
    4df8:	mov	x0, x19
    4dfc:	blr	x3
    4e00:	ldr	x2, [x19, #320]
    4e04:	mov	x1, #0x1                   	// #1
    4e08:	mov	x0, #0x0                   	// #0
    4e0c:	add	x2, x2, x1
    4e10:	str	x2, [x19, #320]
    4e14:	b	4dcc <d_print_comp_inner+0x97c>
    4e18:	ldp	x1, x5, [x19, #288]
    4e1c:	add	x23, sp, #0x60
    4e20:	stp	x5, x20, [sp, #96]
    4e24:	mov	w22, #0x1                   	// #1
    4e28:	mov	w6, w22
    4e2c:	str	wzr, [sp, #112]
    4e30:	str	x1, [sp, #120]
    4e34:	str	x23, [x19, #296]
    4e38:	mov	x24, x5
    4e3c:	mov	x0, x5
    4e40:	mov	x5, x23
    4e44:	cbnz	x24, 4e90 <d_print_comp_inner+0xa40>
    4e48:	b	7fd4 <d_print_comp_inner+0x3b84>
    4e4c:	ldr	w1, [x0, #16]
    4e50:	cbnz	w1, 4e88 <d_print_comp_inner+0xa38>
    4e54:	cmp	w22, #0x3
    4e58:	b.hi	7790 <d_print_comp_inner+0x3340>  // b.pmore
    4e5c:	ubfiz	x1, x22, #5, #32
    4e60:	add	w22, w22, #0x1
    4e64:	add	x4, x23, x1
    4e68:	ldp	x2, x3, [x0]
    4e6c:	stp	x2, x3, [x4]
    4e70:	ldp	x2, x3, [x0, #16]
    4e74:	stp	x2, x3, [x4, #16]
    4e78:	str	x5, [x23, x1]
    4e7c:	mov	x5, x4
    4e80:	str	x4, [x19, #296]
    4e84:	str	w6, [x0, #16]
    4e88:	ldr	x0, [x0]
    4e8c:	cbz	x0, 4ea4 <d_print_comp_inner+0xa54>
    4e90:	ldr	x1, [x0, #8]
    4e94:	ldr	w1, [x1]
    4e98:	sub	w1, w1, #0x19
    4e9c:	cmp	w1, #0x2
    4ea0:	b.ls	4e4c <d_print_comp_inner+0x9fc>  // b.plast
    4ea4:	ldr	x2, [x20, #16]
    4ea8:	mov	x0, x19
    4eac:	mov	w1, w21
    4eb0:	bl	8260 <d_print_comp>
    4eb4:	str	x24, [x19, #296]
    4eb8:	ldr	w0, [sp, #112]
    4ebc:	cbnz	w0, 751c <d_print_comp_inner+0x30cc>
    4ec0:	ubfiz	x0, x22, #5, #32
    4ec4:	cmp	w22, #0x1
    4ec8:	add	x23, x23, x0
    4ecc:	b.eq	4ef0 <d_print_comp_inner+0xaa0>  // b.none
    4ed0:	ldur	x2, [x23, #-24]
    4ed4:	sub	w22, w22, #0x1
    4ed8:	mov	w1, w21
    4edc:	mov	x0, x19
    4ee0:	sub	x23, x23, #0x20
    4ee4:	bl	82f8 <d_print_mod>
    4ee8:	cmp	w22, #0x1
    4eec:	b.ne	4ed0 <d_print_comp_inner+0xa80>  // b.any
    4ef0:	ldr	x3, [x19, #296]
    4ef4:	mov	w1, w21
    4ef8:	add	x2, x20, #0x8
    4efc:	mov	x0, x19
    4f00:	bl	9178 <d_print_array_type.isra.0>
    4f04:	ldp	x21, x22, [sp, #32]
    4f08:	ldp	x23, x24, [sp, #48]
    4f0c:	b	44b4 <d_print_comp_inner+0x64>
    4f10:	ldrsh	w0, [x20, #18]
    4f14:	cbnz	w0, 7278 <d_print_comp_inner+0x2e28>
    4f18:	ldr	x2, [x20, #8]
    4f1c:	adrp	x0, 0 <d_make_comp>
    4f20:	add	x0, x0, #0x0
    4f24:	add	x0, x0, #0x288
    4f28:	ldr	x1, [x2, #8]
    4f2c:	cmp	x1, x0
    4f30:	b.eq	6d6c <d_print_comp_inner+0x291c>  // b.none
    4f34:	mov	w1, w21
    4f38:	mov	x0, x19
    4f3c:	bl	8260 <d_print_comp>
    4f40:	ldr	x0, [x19, #256]
    4f44:	add	x1, x0, #0x1
    4f48:	cmp	x0, #0xff
    4f4c:	b.ne	4f78 <d_print_comp_inner+0xb28>  // b.any
    4f50:	ldp	x3, x2, [x19, #272]
    4f54:	strb	wzr, [x19, #255]
    4f58:	mov	x1, x0
    4f5c:	mov	x0, x19
    4f60:	blr	x3
    4f64:	ldr	x2, [x19, #320]
    4f68:	mov	x1, #0x1                   	// #1
    4f6c:	mov	x0, #0x0                   	// #0
    4f70:	add	x2, x2, x1
    4f74:	str	x2, [x19, #320]
    4f78:	str	x1, [x19, #256]
    4f7c:	mov	w2, #0x20                  	// #32
    4f80:	strb	w2, [x19, x0]
    4f84:	strb	w2, [x19, #264]
    4f88:	ldrsh	w0, [x20, #16]
    4f8c:	cbnz	w0, 6c80 <d_print_comp_inner+0x2830>
    4f90:	adrp	x20, 0 <d_make_comp>
    4f94:	add	x20, x20, #0x0
    4f98:	add	x22, x20, #0x6
    4f9c:	mov	w21, #0x5f                  	// #95
    4fa0:	b	4fc8 <d_print_comp_inner+0xb78>
    4fa4:	mov	x0, x1
    4fa8:	add	x1, x1, #0x1
    4fac:	str	x1, [x19, #256]
    4fb0:	add	x20, x20, #0x1
    4fb4:	strb	w21, [x19, x0]
    4fb8:	cmp	x20, x22
    4fbc:	strb	w21, [x19, #264]
    4fc0:	b.eq	6cf4 <d_print_comp_inner+0x28a4>  // b.none
    4fc4:	ldrb	w21, [x20]
    4fc8:	cmp	x1, #0xff
    4fcc:	b.ne	4fa4 <d_print_comp_inner+0xb54>  // b.any
    4fd0:	ldp	x3, x2, [x19, #272]
    4fd4:	strb	wzr, [x19, #255]
    4fd8:	mov	x0, x19
    4fdc:	blr	x3
    4fe0:	ldr	x2, [x19, #320]
    4fe4:	mov	x1, #0x1                   	// #1
    4fe8:	mov	x0, #0x0                   	// #0
    4fec:	add	x2, x2, x1
    4ff0:	str	x2, [x19, #320]
    4ff4:	b	4fac <d_print_comp_inner+0xb5c>
    4ff8:	adrp	x24, 0 <d_make_comp>
    4ffc:	add	x24, x24, #0x0
    5000:	adrp	x22, 130 <d_count_templates_scopes+0x40>
    5004:	add	x24, x24, #0x15
    5008:	add	x22, x22, #0x0
    500c:	mov	w23, #0x6e                  	// #110
    5010:	ldr	x1, [x19, #256]
    5014:	b	5038 <d_print_comp_inner+0xbe8>
    5018:	mov	x0, x1
    501c:	add	x1, x1, #0x1
    5020:	str	x1, [x19, #256]
    5024:	cmp	x24, x22
    5028:	strb	w23, [x19, x0]
    502c:	strb	w23, [x19, #264]
    5030:	b.eq	67f8 <d_print_comp_inner+0x23a8>  // b.none
    5034:	ldrb	w23, [x22], #1
    5038:	cmp	x1, #0xff
    503c:	b.ne	5018 <d_print_comp_inner+0xbc8>  // b.any
    5040:	ldp	x3, x2, [x19, #272]
    5044:	strb	wzr, [x19, #255]
    5048:	mov	x0, x19
    504c:	blr	x3
    5050:	ldr	x2, [x19, #320]
    5054:	mov	x1, #0x1                   	// #1
    5058:	mov	x0, #0x0                   	// #0
    505c:	add	x2, x2, x1
    5060:	str	x2, [x19, #320]
    5064:	b	5020 <d_print_comp_inner+0xbd0>
    5068:	adrp	x24, 0 <d_make_comp>
    506c:	add	x24, x24, #0x0
    5070:	adrp	x22, 148 <d_count_templates_scopes+0x58>
    5074:	add	x24, x24, #0x11
    5078:	add	x22, x22, #0x0
    507c:	mov	w23, #0x76                  	// #118
    5080:	ldr	x1, [x19, #256]
    5084:	b	50a8 <d_print_comp_inner+0xc58>
    5088:	mov	x0, x1
    508c:	add	x1, x1, #0x1
    5090:	str	x1, [x19, #256]
    5094:	cmp	x24, x22
    5098:	strb	w23, [x19, x0]
    509c:	strb	w23, [x19, #264]
    50a0:	b.eq	6814 <d_print_comp_inner+0x23c4>  // b.none
    50a4:	ldrb	w23, [x22], #1
    50a8:	cmp	x1, #0xff
    50ac:	b.ne	5088 <d_print_comp_inner+0xc38>  // b.any
    50b0:	ldp	x3, x2, [x19, #272]
    50b4:	strb	wzr, [x19, #255]
    50b8:	mov	x0, x19
    50bc:	blr	x3
    50c0:	ldr	x2, [x19, #320]
    50c4:	mov	x1, #0x1                   	// #1
    50c8:	mov	x0, #0x0                   	// #0
    50cc:	add	x2, x2, x1
    50d0:	str	x2, [x19, #320]
    50d4:	b	5090 <d_print_comp_inner+0xc40>
    50d8:	adrp	x24, 0 <d_make_comp>
    50dc:	add	x24, x24, #0x0
    50e0:	adrp	x22, 160 <d_count_templates_scopes+0x70>
    50e4:	add	x24, x24, #0x1a
    50e8:	add	x22, x22, #0x0
    50ec:	mov	w23, #0x63                  	// #99
    50f0:	ldr	x1, [x19, #256]
    50f4:	b	5118 <d_print_comp_inner+0xcc8>
    50f8:	mov	x0, x1
    50fc:	add	x1, x1, #0x1
    5100:	str	x1, [x19, #256]
    5104:	cmp	x24, x22
    5108:	strb	w23, [x19, x0]
    510c:	strb	w23, [x19, #264]
    5110:	b.eq	6830 <d_print_comp_inner+0x23e0>  // b.none
    5114:	ldrb	w23, [x22], #1
    5118:	cmp	x1, #0xff
    511c:	b.ne	50f8 <d_print_comp_inner+0xca8>  // b.any
    5120:	ldp	x3, x2, [x19, #272]
    5124:	strb	wzr, [x19, #255]
    5128:	mov	x0, x19
    512c:	blr	x3
    5130:	ldr	x2, [x19, #320]
    5134:	mov	x1, #0x1                   	// #1
    5138:	mov	x0, #0x0                   	// #0
    513c:	add	x2, x2, x1
    5140:	str	x2, [x19, #320]
    5144:	b	5100 <d_print_comp_inner+0xcb0>
    5148:	adrp	x24, 0 <d_make_comp>
    514c:	add	x24, x24, #0x0
    5150:	adrp	x22, 180 <d_count_templates_scopes+0x90>
    5154:	add	x24, x24, #0xf
    5158:	add	x22, x22, #0x0
    515c:	mov	w23, #0x6a                  	// #106
    5160:	ldr	x1, [x19, #256]
    5164:	b	5188 <d_print_comp_inner+0xd38>
    5168:	mov	x0, x1
    516c:	add	x1, x1, #0x1
    5170:	str	x1, [x19, #256]
    5174:	cmp	x22, x24
    5178:	strb	w23, [x19, x0]
    517c:	strb	w23, [x19, #264]
    5180:	b.eq	6190 <d_print_comp_inner+0x1d40>  // b.none
    5184:	ldrb	w23, [x22], #1
    5188:	cmp	x1, #0xff
    518c:	b.ne	5168 <d_print_comp_inner+0xd18>  // b.any
    5190:	ldp	x3, x2, [x19, #272]
    5194:	strb	wzr, [x19, #255]
    5198:	mov	x0, x19
    519c:	blr	x3
    51a0:	ldr	x2, [x19, #320]
    51a4:	mov	x1, #0x1                   	// #1
    51a8:	mov	x0, #0x0                   	// #0
    51ac:	add	x2, x2, x1
    51b0:	str	x2, [x19, #320]
    51b4:	b	5170 <d_print_comp_inner+0xd20>
    51b8:	adrp	x24, 0 <d_make_comp>
    51bc:	add	x24, x24, #0x0
    51c0:	adrp	x22, 1e0 <d_append_buffer+0x8>
    51c4:	add	x24, x24, #0x15
    51c8:	add	x22, x22, #0x0
    51cc:	mov	w23, #0x72                  	// #114
    51d0:	ldr	x1, [x19, #256]
    51d4:	b	51f8 <d_print_comp_inner+0xda8>
    51d8:	mov	x0, x1
    51dc:	add	x1, x1, #0x1
    51e0:	str	x1, [x19, #256]
    51e4:	cmp	x24, x22
    51e8:	strb	w23, [x19, x0]
    51ec:	strb	w23, [x19, #264]
    51f0:	b.eq	61c8 <d_print_comp_inner+0x1d78>  // b.none
    51f4:	ldrb	w23, [x22], #1
    51f8:	cmp	x1, #0xff
    51fc:	b.ne	51d8 <d_print_comp_inner+0xd88>  // b.any
    5200:	ldp	x3, x2, [x19, #272]
    5204:	strb	wzr, [x19, #255]
    5208:	mov	x0, x19
    520c:	blr	x3
    5210:	ldr	x2, [x19, #320]
    5214:	mov	x1, #0x1                   	// #1
    5218:	mov	x0, #0x0                   	// #0
    521c:	add	x2, x2, x1
    5220:	str	x2, [x19, #320]
    5224:	b	51e0 <d_print_comp_inner+0xd90>
    5228:	adrp	x24, 0 <d_make_comp>
    522c:	add	x24, x24, #0x0
    5230:	adrp	x22, 1a8 <d_count_templates_scopes+0xb8>
    5234:	add	x24, x24, #0x16
    5238:	add	x22, x22, #0x0
    523c:	mov	w23, #0x54                  	// #84
    5240:	ldr	x1, [x19, #256]
    5244:	b	5268 <d_print_comp_inner+0xe18>
    5248:	mov	x0, x1
    524c:	add	x1, x1, #0x1
    5250:	str	x1, [x19, #256]
    5254:	cmp	x22, x24
    5258:	strb	w23, [x19, x0]
    525c:	strb	w23, [x19, #264]
    5260:	b.eq	6788 <d_print_comp_inner+0x2338>  // b.none
    5264:	ldrb	w23, [x22], #1
    5268:	cmp	x1, #0xff
    526c:	b.ne	5248 <d_print_comp_inner+0xdf8>  // b.any
    5270:	ldp	x3, x2, [x19, #272]
    5274:	strb	wzr, [x19, #255]
    5278:	mov	x0, x19
    527c:	blr	x3
    5280:	ldr	x2, [x19, #320]
    5284:	mov	x1, #0x1                   	// #1
    5288:	mov	x0, #0x0                   	// #0
    528c:	add	x2, x2, x1
    5290:	str	x2, [x19, #320]
    5294:	b	5250 <d_print_comp_inner+0xe00>
    5298:	ldr	x1, [x20, #8]
    529c:	mov	x0, x19
    52a0:	mov	w24, #0x0                   	// #0
    52a4:	bl	b28 <d_find_pack>
    52a8:	cbz	x0, 7cbc <d_print_comp_inner+0x386c>
    52ac:	stp	x25, x26, [sp, #64]
    52b0:	ldr	w1, [x0]
    52b4:	cmp	w1, #0x2f
    52b8:	b.ne	6964 <d_print_comp_inner+0x2514>  // b.any
    52bc:	ldr	x1, [x0, #8]
    52c0:	cbz	x1, 6964 <d_print_comp_inner+0x2514>
    52c4:	ldr	x0, [x0, #16]
    52c8:	add	w24, w24, #0x1
    52cc:	cbnz	x0, 52b0 <d_print_comp_inner+0xe60>
    52d0:	ldr	x25, [x20, #8]
    52d4:	sub	w26, w24, #0x1
    52d8:	b	52e8 <d_print_comp_inner+0xe98>
    52dc:	add	w22, w22, #0x1
    52e0:	cmp	w22, w24
    52e4:	b.ge	690c <d_print_comp_inner+0x24bc>  // b.tcont
    52e8:	str	w22, [x19, #316]
    52ec:	mov	x2, x25
    52f0:	mov	w1, w21
    52f4:	mov	x0, x19
    52f8:	bl	8260 <d_print_comp>
    52fc:	cmp	w26, w22
    5300:	b.le	52dc <d_print_comp_inner+0xe8c>
    5304:	mov	w20, #0x2c                  	// #44
    5308:	mov	x23, #0x0                   	// #0
    530c:	ldr	x1, [x19, #256]
    5310:	b	5334 <d_print_comp_inner+0xee4>
    5314:	mov	x0, x1
    5318:	add	x1, x1, #0x1
    531c:	str	x1, [x19, #256]
    5320:	strb	w20, [x19, x0]
    5324:	strb	w20, [x19, #264]
    5328:	mov	w20, #0x20                  	// #32
    532c:	cbnz	x23, 52dc <d_print_comp_inner+0xe8c>
    5330:	mov	x23, #0x1                   	// #1
    5334:	cmp	x1, #0xff
    5338:	b.ne	5314 <d_print_comp_inner+0xec4>  // b.any
    533c:	ldp	x3, x2, [x19, #272]
    5340:	strb	wzr, [x19, #255]
    5344:	mov	x0, x19
    5348:	blr	x3
    534c:	ldr	x2, [x19, #320]
    5350:	mov	x1, #0x1                   	// #1
    5354:	mov	x0, #0x0                   	// #0
    5358:	add	x2, x2, x1
    535c:	str	x2, [x19, #320]
    5360:	b	531c <d_print_comp_inner+0xecc>
    5364:	ldr	x2, [x20, #8]
    5368:	mov	w1, w21
    536c:	mov	x0, x19
    5370:	adrp	x24, 0 <d_make_comp>
    5374:	add	x24, x24, #0x0
    5378:	adrp	x22, 48 <d_make_comp+0x48>
    537c:	bl	8260 <d_print_comp>
    5380:	add	x24, x24, #0x5
    5384:	add	x22, x22, #0x0
    5388:	mov	w23, #0x5b                  	// #91
    538c:	ldr	x1, [x19, #256]
    5390:	b	53b4 <d_print_comp_inner+0xf64>
    5394:	mov	x0, x1
    5398:	add	x1, x1, #0x1
    539c:	str	x1, [x19, #256]
    53a0:	cmp	x24, x22
    53a4:	strb	w23, [x19, x0]
    53a8:	strb	w23, [x19, #264]
    53ac:	b.eq	62d4 <d_print_comp_inner+0x1e84>  // b.none
    53b0:	ldrb	w23, [x22], #1
    53b4:	cmp	x1, #0xff
    53b8:	b.ne	5394 <d_print_comp_inner+0xf44>  // b.any
    53bc:	ldp	x3, x2, [x19, #272]
    53c0:	strb	wzr, [x19, #255]
    53c4:	mov	x0, x19
    53c8:	blr	x3
    53cc:	ldr	x2, [x19, #320]
    53d0:	mov	x1, #0x1                   	// #1
    53d4:	mov	x0, #0x0                   	// #0
    53d8:	add	x2, x2, x1
    53dc:	str	x2, [x19, #320]
    53e0:	b	539c <d_print_comp_inner+0xf4c>
    53e4:	adrp	x24, 0 <d_make_comp>
    53e8:	add	x24, x24, #0x0
    53ec:	adrp	x22, 230 <d_append_buffer+0x58>
    53f0:	add	x24, x24, #0x1a
    53f4:	add	x22, x22, #0x0
    53f8:	mov	w23, #0x6e                  	// #110
    53fc:	ldr	x1, [x19, #256]
    5400:	b	5424 <d_print_comp_inner+0xfd4>
    5404:	mov	x0, x1
    5408:	add	x1, x1, #0x1
    540c:	str	x1, [x19, #256]
    5410:	cmp	x24, x22
    5414:	strb	w23, [x19, x0]
    5418:	strb	w23, [x19, #264]
    541c:	b.eq	629c <d_print_comp_inner+0x1e4c>  // b.none
    5420:	ldrb	w23, [x22], #1
    5424:	cmp	x1, #0xff
    5428:	b.ne	5404 <d_print_comp_inner+0xfb4>  // b.any
    542c:	ldp	x3, x2, [x19, #272]
    5430:	strb	wzr, [x19, #255]
    5434:	mov	x0, x19
    5438:	blr	x3
    543c:	ldr	x2, [x19, #320]
    5440:	mov	x1, #0x1                   	// #1
    5444:	mov	x0, #0x0                   	// #0
    5448:	add	x2, x2, x1
    544c:	str	x2, [x19, #320]
    5450:	b	540c <d_print_comp_inner+0xfbc>
    5454:	adrp	x24, 0 <d_make_comp>
    5458:	add	x24, x24, #0x0
    545c:	adrp	x22, 190 <d_count_templates_scopes+0xa0>
    5460:	add	x24, x24, #0x13
    5464:	add	x22, x22, #0x0
    5468:	mov	w23, #0x67                  	// #103
    546c:	ldr	x1, [x19, #256]
    5470:	b	5494 <d_print_comp_inner+0x1044>
    5474:	mov	x0, x1
    5478:	add	x1, x1, #0x1
    547c:	str	x1, [x19, #256]
    5480:	cmp	x24, x22
    5484:	strb	w23, [x19, x0]
    5488:	strb	w23, [x19, #264]
    548c:	b.eq	61ac <d_print_comp_inner+0x1d5c>  // b.none
    5490:	ldrb	w23, [x22], #1
    5494:	cmp	x1, #0xff
    5498:	b.ne	5474 <d_print_comp_inner+0x1024>  // b.any
    549c:	ldp	x3, x2, [x19, #272]
    54a0:	strb	wzr, [x19, #255]
    54a4:	mov	x0, x19
    54a8:	blr	x3
    54ac:	ldr	x2, [x19, #320]
    54b0:	mov	x1, #0x1                   	// #1
    54b4:	mov	x0, #0x0                   	// #0
    54b8:	add	x2, x2, x1
    54bc:	str	x2, [x19, #320]
    54c0:	b	547c <d_print_comp_inner+0x102c>
    54c4:	adrp	x24, 0 <d_make_comp>
    54c8:	add	x24, x24, #0x0
    54cc:	adrp	x22, 1c0 <d_count_templates_scopes+0xd0>
    54d0:	add	x24, x24, #0x19
    54d4:	add	x22, x22, #0x0
    54d8:	mov	w23, #0x54                  	// #84
    54dc:	ldr	x1, [x19, #256]
    54e0:	b	5504 <d_print_comp_inner+0x10b4>
    54e4:	mov	x0, x1
    54e8:	add	x1, x1, #0x1
    54ec:	str	x1, [x19, #256]
    54f0:	cmp	x24, x22
    54f4:	strb	w23, [x19, x0]
    54f8:	strb	w23, [x19, #264]
    54fc:	b.eq	67a4 <d_print_comp_inner+0x2354>  // b.none
    5500:	ldrb	w23, [x22], #1
    5504:	cmp	x1, #0xff
    5508:	b.ne	54e4 <d_print_comp_inner+0x1094>  // b.any
    550c:	ldp	x3, x2, [x19, #272]
    5510:	strb	wzr, [x19, #255]
    5514:	mov	x0, x19
    5518:	blr	x3
    551c:	ldr	x2, [x19, #320]
    5520:	mov	x1, #0x1                   	// #1
    5524:	mov	x0, #0x0                   	// #0
    5528:	add	x2, x2, x1
    552c:	str	x2, [x19, #320]
    5530:	b	54ec <d_print_comp_inner+0x109c>
    5534:	adrp	x22, 0 <d_make_comp>
    5538:	add	x22, x22, #0x0
    553c:	add	x24, x22, #0x8
    5540:	mov	w23, #0x56                  	// #86
    5544:	ldr	x1, [x19, #256]
    5548:	b	5570 <d_print_comp_inner+0x1120>
    554c:	mov	x0, x1
    5550:	add	x1, x1, #0x1
    5554:	str	x1, [x19, #256]
    5558:	add	x22, x22, #0x1
    555c:	strb	w23, [x19, x0]
    5560:	cmp	x24, x22
    5564:	strb	w23, [x19, #264]
    5568:	b.eq	66f0 <d_print_comp_inner+0x22a0>  // b.none
    556c:	ldrb	w23, [x22]
    5570:	cmp	x1, #0xff
    5574:	b.ne	554c <d_print_comp_inner+0x10fc>  // b.any
    5578:	ldp	x3, x2, [x19, #272]
    557c:	strb	wzr, [x19, #255]
    5580:	mov	x0, x19
    5584:	blr	x3
    5588:	ldr	x2, [x19, #320]
    558c:	mov	x1, #0x1                   	// #1
    5590:	mov	x0, #0x0                   	// #0
    5594:	add	x2, x2, x1
    5598:	str	x2, [x19, #320]
    559c:	b	5554 <d_print_comp_inner+0x1104>
    55a0:	adrp	x24, 0 <d_make_comp>
    55a4:	add	x24, x24, #0x0
    55a8:	adrp	x22, c8 <d_ref_qualifier+0x40>
    55ac:	add	x24, x24, #0x18
    55b0:	add	x22, x22, #0x0
    55b4:	mov	w23, #0x63                  	// #99
    55b8:	ldr	x1, [x19, #256]
    55bc:	b	55e0 <d_print_comp_inner+0x1190>
    55c0:	mov	x0, x1
    55c4:	add	x1, x1, #0x1
    55c8:	str	x1, [x19, #256]
    55cc:	cmp	x24, x22
    55d0:	strb	w23, [x19, x0]
    55d4:	strb	w23, [x19, #264]
    55d8:	b.eq	670c <d_print_comp_inner+0x22bc>  // b.none
    55dc:	ldrb	w23, [x22], #1
    55e0:	cmp	x1, #0xff
    55e4:	b.ne	55c0 <d_print_comp_inner+0x1170>  // b.any
    55e8:	ldp	x3, x2, [x19, #272]
    55ec:	strb	wzr, [x19, #255]
    55f0:	mov	x0, x19
    55f4:	blr	x3
    55f8:	ldr	x2, [x19, #320]
    55fc:	mov	x1, #0x1                   	// #1
    5600:	mov	x0, #0x0                   	// #0
    5604:	add	x2, x2, x1
    5608:	str	x2, [x19, #320]
    560c:	b	55c8 <d_print_comp_inner+0x1178>
    5610:	adrp	x24, 0 <d_make_comp>
    5614:	add	x24, x24, #0x0
    5618:	adrp	x22, f0 <d_count_templates_scopes>
    561c:	add	x24, x24, #0xd
    5620:	add	x22, x22, #0x0
    5624:	mov	w23, #0x74                  	// #116
    5628:	ldr	x1, [x19, #256]
    562c:	b	5650 <d_print_comp_inner+0x1200>
    5630:	mov	x0, x1
    5634:	add	x1, x1, #0x1
    5638:	str	x1, [x19, #256]
    563c:	cmp	x24, x22
    5640:	strb	w23, [x19, x0]
    5644:	strb	w23, [x19, #264]
    5648:	b.eq	6264 <d_print_comp_inner+0x1e14>  // b.none
    564c:	ldrb	w23, [x22], #1
    5650:	cmp	x1, #0xff
    5654:	b.ne	5630 <d_print_comp_inner+0x11e0>  // b.any
    5658:	ldp	x3, x2, [x19, #272]
    565c:	strb	wzr, [x19, #255]
    5660:	mov	x0, x19
    5664:	blr	x3
    5668:	ldr	x2, [x19, #320]
    566c:	mov	x1, #0x1                   	// #1
    5670:	mov	x0, #0x0                   	// #0
    5674:	add	x2, x2, x1
    5678:	str	x2, [x19, #320]
    567c:	b	5638 <d_print_comp_inner+0x11e8>
    5680:	adrp	x24, 0 <d_make_comp>
    5684:	add	x24, x24, #0x0
    5688:	adrp	x22, 100 <d_count_templates_scopes+0x10>
    568c:	add	x24, x24, #0x12
    5690:	add	x22, x22, #0x0
    5694:	mov	w23, #0x74                  	// #116
    5698:	ldr	x1, [x19, #256]
    569c:	b	56c0 <d_print_comp_inner+0x1270>
    56a0:	mov	x0, x1
    56a4:	add	x1, x1, #0x1
    56a8:	str	x1, [x19, #256]
    56ac:	cmp	x24, x22
    56b0:	strb	w23, [x19, x0]
    56b4:	strb	w23, [x19, #264]
    56b8:	b.eq	6280 <d_print_comp_inner+0x1e30>  // b.none
    56bc:	ldrb	w23, [x22], #1
    56c0:	cmp	x1, #0xff
    56c4:	b.ne	56a0 <d_print_comp_inner+0x1250>  // b.any
    56c8:	ldp	x3, x2, [x19, #272]
    56cc:	strb	wzr, [x19, #255]
    56d0:	mov	x0, x19
    56d4:	blr	x3
    56d8:	ldr	x2, [x19, #320]
    56dc:	mov	x1, #0x1                   	// #1
    56e0:	mov	x0, #0x0                   	// #0
    56e4:	add	x2, x2, x1
    56e8:	str	x2, [x19, #320]
    56ec:	b	56a8 <d_print_comp_inner+0x1258>
    56f0:	adrp	x24, 0 <d_make_comp>
    56f4:	add	x24, x24, #0x0
    56f8:	adrp	x22, 118 <d_count_templates_scopes+0x28>
    56fc:	add	x24, x24, #0x10
    5700:	add	x22, x22, #0x0
    5704:	mov	w23, #0x74                  	// #116
    5708:	ldr	x1, [x19, #256]
    570c:	b	5730 <d_print_comp_inner+0x12e0>
    5710:	mov	x0, x1
    5714:	add	x1, x1, #0x1
    5718:	str	x1, [x19, #256]
    571c:	cmp	x24, x22
    5720:	strb	w23, [x19, x0]
    5724:	strb	w23, [x19, #264]
    5728:	b.eq	66d4 <d_print_comp_inner+0x2284>  // b.none
    572c:	ldrb	w23, [x22], #1
    5730:	cmp	x1, #0xff
    5734:	b.ne	5710 <d_print_comp_inner+0x12c0>  // b.any
    5738:	ldp	x3, x2, [x19, #272]
    573c:	strb	wzr, [x19, #255]
    5740:	mov	x0, x19
    5744:	blr	x3
    5748:	ldr	x2, [x19, #320]
    574c:	mov	x1, #0x1                   	// #1
    5750:	mov	x0, #0x0                   	// #0
    5754:	add	x2, x2, x1
    5758:	str	x2, [x19, #320]
    575c:	b	5718 <d_print_comp_inner+0x12c8>
    5760:	stp	x25, x26, [sp, #64]
    5764:	ldr	x25, [x20, #8]
    5768:	ldr	x22, [x19, #296]
    576c:	str	xzr, [x19, #296]
    5770:	cbz	x25, 7828 <d_print_comp_inner+0x33d8>
    5774:	add	x23, sp, #0x60
    5778:	mov	x2, #0x1f                  	// #31
    577c:	ldr	x6, [x19, #288]
    5780:	mov	x3, x23
    5784:	mov	x0, #0x0                   	// #0
    5788:	mov	w24, #0x0                   	// #0
    578c:	mov	x1, #0x1                   	// #1
    5790:	movk	x2, #0x1a, lsl #48
    5794:	str	wzr, [x3, #16]
    5798:	add	w24, w24, #0x1
    579c:	str	x0, [x3]
    57a0:	mov	x4, x3
    57a4:	ldr	w5, [x25]
    57a8:	str	x25, [x3, #8]
    57ac:	str	x6, [x3, #24]
    57b0:	sub	w0, w5, #0x1c
    57b4:	cmp	w0, #0x34
    57b8:	b.hi	57c8 <d_print_comp_inner+0x1378>  // b.pmore
    57bc:	lsl	x0, x1, x0
    57c0:	tst	x0, x2
    57c4:	b.ne	6948 <d_print_comp_inner+0x24f8>  // b.any
    57c8:	str	x3, [x19, #296]
    57cc:	cmp	w5, #0x2
    57d0:	b.eq	7708 <d_print_comp_inner+0x32b8>  // b.none
    57d4:	cmp	w5, #0x4
    57d8:	b.ne	57e8 <d_print_comp_inner+0x1398>  // b.any
    57dc:	add	x0, sp, #0x50
    57e0:	stp	x6, x25, [sp, #80]
    57e4:	str	x0, [x19, #288]
    57e8:	ldr	x2, [x20, #16]
    57ec:	mov	x0, x19
    57f0:	mov	w1, w21
    57f4:	bl	8260 <d_print_comp>
    57f8:	ldr	w0, [x25]
    57fc:	cmp	w0, #0x4
    5800:	b.ne	580c <d_print_comp_inner+0x13bc>  // b.any
    5804:	ldr	x0, [sp, #80]
    5808:	str	x0, [x19, #288]
    580c:	sub	w20, w24, #0x1
    5810:	mov	w24, #0x20                  	// #32
    5814:	ubfiz	x0, x20, #5, #32
    5818:	add	x23, x23, x0
    581c:	b	5824 <d_print_comp_inner+0x13d4>
    5820:	sub	w20, w20, #0x1
    5824:	ldr	w0, [x23, #16]
    5828:	cbnz	w0, 5880 <d_print_comp_inner+0x1430>
    582c:	ldr	x0, [x19, #256]
    5830:	add	x1, x0, #0x1
    5834:	cmp	x0, #0xff
    5838:	b.ne	5864 <d_print_comp_inner+0x1414>  // b.any
    583c:	ldp	x3, x2, [x19, #272]
    5840:	strb	wzr, [x19, #255]
    5844:	mov	x1, x0
    5848:	mov	x0, x19
    584c:	blr	x3
    5850:	ldr	x2, [x19, #320]
    5854:	mov	x1, #0x1                   	// #1
    5858:	mov	x0, #0x0                   	// #0
    585c:	add	x2, x2, x1
    5860:	str	x2, [x19, #320]
    5864:	str	x1, [x19, #256]
    5868:	mov	w1, w21
    586c:	ldr	x2, [x23, #8]
    5870:	strb	w24, [x19, x0]
    5874:	strb	w24, [x19, #264]
    5878:	mov	x0, x19
    587c:	bl	82f8 <d_print_mod>
    5880:	sub	x23, x23, #0x20
    5884:	cbnz	w20, 5820 <d_print_comp_inner+0x13d0>
    5888:	ldp	x23, x24, [sp, #48]
    588c:	ldp	x25, x26, [sp, #64]
    5890:	str	x22, [x19, #296]
    5894:	ldp	x21, x22, [sp, #32]
    5898:	b	44b4 <d_print_comp_inner+0x64>
    589c:	ldr	x22, [x20, #8]
    58a0:	ldr	x24, [x19, #296]
    58a4:	str	xzr, [x19, #296]
    58a8:	ldr	x23, [x19, #368]
    58ac:	str	x20, [x19, #368]
    58b0:	tbz	w21, #2, 58c8 <d_print_comp_inner+0x1478>
    58b4:	ldr	w0, [x22]
    58b8:	cbnz	w0, 58c8 <d_print_comp_inner+0x1478>
    58bc:	ldr	w0, [x22, #16]
    58c0:	cmp	w0, #0x6
    58c4:	b.eq	7bc0 <d_print_comp_inner+0x3770>  // b.none
    58c8:	mov	x0, x19
    58cc:	mov	x2, x22
    58d0:	mov	w1, w21
    58d4:	bl	8260 <d_print_comp>
    58d8:	ldrb	w0, [x19, #264]
    58dc:	cmp	w0, #0x3c
    58e0:	b.eq	7428 <d_print_comp_inner+0x2fd8>  // b.none
    58e4:	ldr	x1, [x19, #256]
    58e8:	add	x0, x1, #0x1
    58ec:	cmp	x1, #0xff
    58f0:	b.ne	5918 <d_print_comp_inner+0x14c8>  // b.any
    58f4:	ldp	x3, x2, [x19, #272]
    58f8:	strb	wzr, [x19, #255]
    58fc:	mov	x0, x19
    5900:	blr	x3
    5904:	ldr	x2, [x19, #320]
    5908:	mov	x0, #0x1                   	// #1
    590c:	mov	x1, #0x0                   	// #0
    5910:	add	x2, x2, x0
    5914:	str	x2, [x19, #320]
    5918:	str	x0, [x19, #256]
    591c:	mov	w0, #0x3c                  	// #60
    5920:	strb	w0, [x19, x1]
    5924:	mov	w1, w21
    5928:	strb	w0, [x19, #264]
    592c:	mov	x0, x19
    5930:	ldr	x2, [x20, #16]
    5934:	bl	8260 <d_print_comp>
    5938:	ldrb	w0, [x19, #264]
    593c:	cmp	w0, #0x3e
    5940:	b.eq	73e0 <d_print_comp_inner+0x2f90>  // b.none
    5944:	ldr	x1, [x19, #256]
    5948:	add	x0, x1, #0x1
    594c:	cmp	x1, #0xff
    5950:	b.ne	5978 <d_print_comp_inner+0x1528>  // b.any
    5954:	ldp	x3, x2, [x19, #272]
    5958:	strb	wzr, [x19, #255]
    595c:	mov	x0, x19
    5960:	blr	x3
    5964:	ldr	x2, [x19, #320]
    5968:	mov	x0, #0x1                   	// #1
    596c:	mov	x1, #0x0                   	// #0
    5970:	add	x2, x2, x0
    5974:	str	x2, [x19, #320]
    5978:	str	x0, [x19, #256]
    597c:	mov	w0, #0x3e                  	// #62
    5980:	strb	w0, [x19, x1]
    5984:	strb	w0, [x19, #264]
    5988:	ldp	x21, x22, [sp, #32]
    598c:	str	x24, [x19, #296]
    5990:	str	x23, [x19, #368]
    5994:	ldp	x23, x24, [sp, #48]
    5998:	b	44b4 <d_print_comp_inner+0x64>
    599c:	ldr	w0, [x19, #312]
    59a0:	cbz	w0, 6a6c <d_print_comp_inner+0x261c>
    59a4:	adrp	x23, 0 <d_make_comp>
    59a8:	add	x23, x23, #0x0
    59ac:	adrp	x21, 80 <d_make_comp+0x80>
    59b0:	add	x23, x23, #0x5
    59b4:	add	x21, x21, #0x0
    59b8:	mov	w22, #0x61                  	// #97
    59bc:	ldr	x1, [x19, #256]
    59c0:	b	59e4 <d_print_comp_inner+0x1594>
    59c4:	mov	x0, x1
    59c8:	add	x1, x1, #0x1
    59cc:	str	x1, [x19, #256]
    59d0:	cmp	x23, x21
    59d4:	strb	w22, [x19, x0]
    59d8:	strb	w22, [x19, #264]
    59dc:	b.eq	6ab4 <d_print_comp_inner+0x2664>  // b.none
    59e0:	ldrb	w22, [x21], #1
    59e4:	cmp	x1, #0xff
    59e8:	b.ne	59c4 <d_print_comp_inner+0x1574>  // b.any
    59ec:	ldp	x3, x2, [x19, #272]
    59f0:	strb	wzr, [x19, #255]
    59f4:	mov	x0, x19
    59f8:	blr	x3
    59fc:	ldr	x2, [x19, #320]
    5a00:	mov	x1, #0x1                   	// #1
    5a04:	mov	x0, #0x0                   	// #0
    5a08:	add	x2, x2, x1
    5a0c:	str	x2, [x19, #320]
    5a10:	b	59cc <d_print_comp_inner+0x157c>
    5a14:	ldr	x1, [x19, #256]
    5a18:	add	x0, x1, #0x1
    5a1c:	cmp	x1, #0xff
    5a20:	b.ne	5a48 <d_print_comp_inner+0x15f8>  // b.any
    5a24:	ldp	x3, x2, [x19, #272]
    5a28:	strb	wzr, [x19, #255]
    5a2c:	mov	x0, x19
    5a30:	blr	x3
    5a34:	ldr	x2, [x19, #320]
    5a38:	mov	x0, #0x1                   	// #1
    5a3c:	mov	x1, #0x0                   	// #0
    5a40:	add	x2, x2, x0
    5a44:	str	x2, [x19, #320]
    5a48:	str	x0, [x19, #256]
    5a4c:	mov	w0, #0x7e                  	// #126
    5a50:	strb	w0, [x19, x1]
    5a54:	mov	w1, w21
    5a58:	strb	w0, [x19, #264]
    5a5c:	mov	x0, x19
    5a60:	ldr	x2, [x20, #16]
    5a64:	bl	8260 <d_print_comp>
    5a68:	ldp	x21, x22, [sp, #32]
    5a6c:	ldp	x23, x24, [sp, #48]
    5a70:	b	44b4 <d_print_comp_inner+0x64>
    5a74:	adrp	x24, 0 <d_make_comp>
    5a78:	add	x24, x24, #0x0
    5a7c:	adrp	x22, a8 <d_ref_qualifier+0x20>
    5a80:	add	x24, x24, #0xb
    5a84:	add	x22, x22, #0x0
    5a88:	mov	w23, #0x76                  	// #118
    5a8c:	ldr	x1, [x19, #256]
    5a90:	b	5ab4 <d_print_comp_inner+0x1664>
    5a94:	mov	x0, x1
    5a98:	add	x1, x1, #0x1
    5a9c:	str	x1, [x19, #256]
    5aa0:	cmp	x24, x22
    5aa4:	strb	w23, [x19, x0]
    5aa8:	strb	w23, [x19, #264]
    5aac:	b.eq	6248 <d_print_comp_inner+0x1df8>  // b.none
    5ab0:	ldrb	w23, [x22], #1
    5ab4:	cmp	x1, #0xff
    5ab8:	b.ne	5a94 <d_print_comp_inner+0x1644>  // b.any
    5abc:	ldp	x3, x2, [x19, #272]
    5ac0:	strb	wzr, [x19, #255]
    5ac4:	mov	x0, x19
    5ac8:	blr	x3
    5acc:	ldr	x2, [x19, #320]
    5ad0:	mov	x1, #0x1                   	// #1
    5ad4:	mov	x0, #0x0                   	// #0
    5ad8:	add	x2, x2, x1
    5adc:	str	x2, [x19, #320]
    5ae0:	b	5a9c <d_print_comp_inner+0x164c>
    5ae4:	ldr	x0, [x20, #16]
    5ae8:	ldr	w0, [x0]
    5aec:	cmp	w0, #0x39
    5af0:	b.ne	44e0 <d_print_comp_inner+0x90>  // b.any
    5af4:	ldr	x2, [x20, #8]
    5af8:	ldr	x0, [x2, #8]
    5afc:	ldr	x0, [x0]
    5b00:	ldrb	w1, [x0, #1]
    5b04:	cmp	w1, #0x63
    5b08:	b.eq	7840 <d_print_comp_inner+0x33f0>  // b.none
    5b0c:	add	x3, x20, #0x10
    5b10:	mov	w1, w21
    5b14:	mov	x0, x19
    5b18:	bl	95b0 <d_maybe_print_fold_expression.isra.0>
    5b1c:	cbnz	w0, 7ba8 <d_print_comp_inner+0x3758>
    5b20:	ldr	x0, [x20, #8]
    5b24:	ldr	w1, [x0]
    5b28:	cmp	w1, #0x32
    5b2c:	b.eq	7d1c <d_print_comp_inner+0x38cc>  // b.none
    5b30:	ldr	x0, [x0, #8]
    5b34:	ldr	x1, [x0]
    5b38:	ldrb	w0, [x1]
    5b3c:	subs	w0, w0, #0x63
    5b40:	b.ne	5b54 <d_print_comp_inner+0x1704>  // b.any
    5b44:	ldrb	w0, [x1, #1]
    5b48:	subs	w0, w0, #0x6c
    5b4c:	b.ne	5b54 <d_print_comp_inner+0x1704>  // b.any
    5b50:	ldrb	w0, [x1, #2]
    5b54:	ldr	x1, [x20, #16]
    5b58:	ldr	x2, [x1, #8]
    5b5c:	cbnz	w0, 5b6c <d_print_comp_inner+0x171c>
    5b60:	ldr	w0, [x2]
    5b64:	cmp	w0, #0x3
    5b68:	b.eq	7de0 <d_print_comp_inner+0x3990>  // b.none
    5b6c:	mov	w1, w21
    5b70:	mov	x0, x19
    5b74:	bl	94b8 <d_print_subexpr>
    5b78:	ldr	x2, [x20, #8]
    5b7c:	ldr	x0, [x2, #8]
    5b80:	ldr	x0, [x0]
    5b84:	ldrb	w1, [x0]
    5b88:	cmp	w1, #0x69
    5b8c:	b.ne	7af8 <d_print_comp_inner+0x36a8>  // b.any
    5b90:	ldrb	w3, [x0, #1]
    5b94:	cmp	w3, #0x78
    5b98:	b.ne	7af8 <d_print_comp_inner+0x36a8>  // b.any
    5b9c:	ldrb	w3, [x0, #2]
    5ba0:	cbnz	w3, 7af8 <d_print_comp_inner+0x36a8>
    5ba4:	ldr	x1, [x19, #256]
    5ba8:	cmp	x1, #0xff
    5bac:	b.ne	5bd4 <d_print_comp_inner+0x1784>  // b.any
    5bb0:	ldp	x3, x2, [x19, #272]
    5bb4:	strb	wzr, [x19, #255]
    5bb8:	mov	x0, x19
    5bbc:	blr	x3
    5bc0:	str	xzr, [x19, #256]
    5bc4:	ldr	x0, [x19, #320]
    5bc8:	mov	x1, #0x0                   	// #0
    5bcc:	add	x0, x0, #0x1
    5bd0:	str	x0, [x19, #320]
    5bd4:	add	x0, x1, #0x1
    5bd8:	str	x0, [x19, #256]
    5bdc:	mov	w0, #0x5b                  	// #91
    5be0:	strb	w0, [x19, x1]
    5be4:	strb	w0, [x19, #264]
    5be8:	mov	w1, w21
    5bec:	mov	x0, x19
    5bf0:	ldr	x2, [x20, #16]
    5bf4:	ldr	x2, [x2, #16]
    5bf8:	bl	8260 <d_print_comp>
    5bfc:	ldr	x1, [x19, #256]
    5c00:	cmp	x1, #0xff
    5c04:	b.ne	5c2c <d_print_comp_inner+0x17dc>  // b.any
    5c08:	ldp	x3, x2, [x19, #272]
    5c0c:	strb	wzr, [x19, #255]
    5c10:	mov	x0, x19
    5c14:	blr	x3
    5c18:	str	xzr, [x19, #256]
    5c1c:	ldr	x0, [x19, #320]
    5c20:	mov	x1, #0x0                   	// #0
    5c24:	add	x0, x0, #0x1
    5c28:	str	x0, [x19, #320]
    5c2c:	add	x0, x1, #0x1
    5c30:	str	x0, [x19, #256]
    5c34:	mov	w0, #0x5d                  	// #93
    5c38:	strb	w0, [x19, x1]
    5c3c:	strb	w0, [x19, #264]
    5c40:	ldr	x0, [x20, #8]
    5c44:	ldr	w1, [x0]
    5c48:	cmp	w1, #0x32
    5c4c:	b.eq	7d00 <d_print_comp_inner+0x38b0>  // b.none
    5c50:	ldp	x21, x22, [sp, #32]
    5c54:	ldp	x23, x24, [sp, #48]
    5c58:	b	44b4 <d_print_comp_inner+0x64>
    5c5c:	adrp	x24, 0 <d_make_comp>
    5c60:	add	x24, x24, #0x0
    5c64:	adrp	x22, 2c8 <d_number.isra.0+0x48>
    5c68:	add	x24, x24, #0xe
    5c6c:	add	x22, x22, #0x0
    5c70:	mov	w23, #0x6a                  	// #106
    5c74:	ldr	x1, [x19, #256]
    5c78:	b	5c9c <d_print_comp_inner+0x184c>
    5c7c:	mov	x0, x1
    5c80:	add	x1, x1, #0x1
    5c84:	str	x1, [x19, #256]
    5c88:	cmp	x24, x22
    5c8c:	strb	w23, [x19, x0]
    5c90:	strb	w23, [x19, #264]
    5c94:	b.eq	684c <d_print_comp_inner+0x23fc>  // b.none
    5c98:	ldrb	w23, [x22], #1
    5c9c:	cmp	x1, #0xff
    5ca0:	b.ne	5c7c <d_print_comp_inner+0x182c>  // b.any
    5ca4:	ldp	x3, x2, [x19, #272]
    5ca8:	strb	wzr, [x19, #255]
    5cac:	mov	x0, x19
    5cb0:	blr	x3
    5cb4:	ldr	x2, [x19, #320]
    5cb8:	mov	x1, #0x1                   	// #1
    5cbc:	mov	x0, #0x0                   	// #0
    5cc0:	add	x2, x2, x1
    5cc4:	str	x2, [x19, #320]
    5cc8:	b	5c84 <d_print_comp_inner+0x1834>
    5ccc:	ldr	x2, [x20, #8]
    5cd0:	mov	w1, w21
    5cd4:	mov	x0, x19
    5cd8:	bl	8260 <d_print_comp>
    5cdc:	ldr	x2, [x20, #16]
    5ce0:	mov	w1, w21
    5ce4:	mov	x0, x19
    5ce8:	bl	8260 <d_print_comp>
    5cec:	ldp	x21, x22, [sp, #32]
    5cf0:	ldp	x23, x24, [sp, #48]
    5cf4:	b	44b4 <d_print_comp_inner+0x64>
    5cf8:	ldr	x1, [x19, #256]
    5cfc:	ldrb	w20, [x20, #8]
    5d00:	add	x0, x1, #0x1
    5d04:	cmp	x1, #0xff
    5d08:	b.ne	5d30 <d_print_comp_inner+0x18e0>  // b.any
    5d0c:	ldp	x3, x2, [x19, #272]
    5d10:	strb	wzr, [x19, #255]
    5d14:	mov	x0, x19
    5d18:	blr	x3
    5d1c:	ldr	x2, [x19, #320]
    5d20:	mov	x0, #0x1                   	// #1
    5d24:	mov	x1, #0x0                   	// #0
    5d28:	add	x2, x2, x0
    5d2c:	str	x2, [x19, #320]
    5d30:	str	x0, [x19, #256]
    5d34:	strb	w20, [x19, x1]
    5d38:	strb	w20, [x19, #264]
    5d3c:	ldp	x21, x22, [sp, #32]
    5d40:	ldp	x23, x24, [sp, #48]
    5d44:	b	44b4 <d_print_comp_inner+0x64>
    5d48:	ldr	w2, [x20, #8]
    5d4c:	adrp	x1, 0 <d_make_comp>
    5d50:	add	x1, x1, #0x0
    5d54:	add	x20, sp, #0x60
    5d58:	mov	x0, x20
    5d5c:	bl	0 <sprintf>
    5d60:	mov	x0, x20
    5d64:	bl	0 <strlen>
    5d68:	cbz	x0, 7c98 <d_print_comp_inner+0x3848>
    5d6c:	add	x22, x20, x0
    5d70:	ldr	x1, [x19, #256]
    5d74:	b	5d98 <d_print_comp_inner+0x1948>
    5d78:	mov	x0, x1
    5d7c:	add	x1, x1, #0x1
    5d80:	str	x1, [x19, #256]
    5d84:	add	x20, x20, #0x1
    5d88:	strb	w21, [x19, x0]
    5d8c:	cmp	x20, x22
    5d90:	strb	w21, [x19, #264]
    5d94:	b.eq	6900 <d_print_comp_inner+0x24b0>  // b.none
    5d98:	ldrb	w21, [x20]
    5d9c:	cmp	x1, #0xff
    5da0:	b.ne	5d78 <d_print_comp_inner+0x1928>  // b.any
    5da4:	ldp	x3, x2, [x19, #272]
    5da8:	strb	wzr, [x19, #255]
    5dac:	mov	x0, x19
    5db0:	blr	x3
    5db4:	ldr	x2, [x19, #320]
    5db8:	mov	x1, #0x1                   	// #1
    5dbc:	mov	x0, #0x0                   	// #0
    5dc0:	add	x2, x2, x1
    5dc4:	str	x2, [x19, #320]
    5dc8:	b	5d80 <d_print_comp_inner+0x1930>
    5dcc:	adrp	x24, 0 <d_make_comp>
    5dd0:	add	x24, x24, #0x0
    5dd4:	adrp	x22, 2d8 <d_number.isra.0+0x58>
    5dd8:	add	x24, x24, #0xa
    5ddc:	add	x22, x22, #0x0
    5de0:	mov	w23, #0x64                  	// #100
    5de4:	ldr	x1, [x19, #256]
    5de8:	b	5e0c <d_print_comp_inner+0x19bc>
    5dec:	mov	x0, x1
    5df0:	add	x1, x1, #0x1
    5df4:	str	x1, [x19, #256]
    5df8:	cmp	x22, x24
    5dfc:	strb	w23, [x19, x0]
    5e00:	strb	w23, [x19, #264]
    5e04:	b.eq	6674 <d_print_comp_inner+0x2224>  // b.none
    5e08:	ldrb	w23, [x22], #1
    5e0c:	cmp	x1, #0xff
    5e10:	b.ne	5dec <d_print_comp_inner+0x199c>  // b.any
    5e14:	ldp	x3, x2, [x19, #272]
    5e18:	strb	wzr, [x19, #255]
    5e1c:	mov	x0, x19
    5e20:	blr	x3
    5e24:	ldr	x2, [x19, #320]
    5e28:	mov	x1, #0x1                   	// #1
    5e2c:	mov	x0, #0x0                   	// #0
    5e30:	add	x2, x2, x1
    5e34:	str	x2, [x19, #320]
    5e38:	b	5df4 <d_print_comp_inner+0x19a4>
    5e3c:	adrp	x24, 0 <d_make_comp>
    5e40:	add	x24, x24, #0x0
    5e44:	adrp	x22, 300 <d_number.isra.0+0x80>
    5e48:	add	x24, x24, #0x1d
    5e4c:	add	x22, x22, #0x0
    5e50:	mov	w23, #0x67                  	// #103
    5e54:	ldr	x1, [x19, #256]
    5e58:	b	5e7c <d_print_comp_inner+0x1a2c>
    5e5c:	mov	x0, x1
    5e60:	add	x1, x1, #0x1
    5e64:	str	x1, [x19, #256]
    5e68:	cmp	x22, x24
    5e6c:	strb	w23, [x19, x0]
    5e70:	strb	w23, [x19, #264]
    5e74:	b.eq	68b8 <d_print_comp_inner+0x2468>  // b.none
    5e78:	ldrb	w23, [x22], #1
    5e7c:	cmp	x1, #0xff
    5e80:	b.ne	5e5c <d_print_comp_inner+0x1a0c>  // b.any
    5e84:	ldp	x3, x2, [x19, #272]
    5e88:	strb	wzr, [x19, #255]
    5e8c:	mov	x0, x19
    5e90:	blr	x3
    5e94:	ldr	x2, [x19, #320]
    5e98:	mov	x1, #0x1                   	// #1
    5e9c:	mov	x0, #0x0                   	// #0
    5ea0:	add	x2, x2, x1
    5ea4:	str	x2, [x19, #320]
    5ea8:	b	5e64 <d_print_comp_inner+0x1a14>
    5eac:	ldrsw	x22, [x20, #16]
    5eb0:	ldr	x20, [x20, #8]
    5eb4:	tbnz	w21, #2, 6984 <d_print_comp_inner+0x2534>
    5eb8:	cbz	x22, 7dc8 <d_print_comp_inner+0x3978>
    5ebc:	add	x22, x20, x22
    5ec0:	ldr	x1, [x19, #256]
    5ec4:	b	5ee8 <d_print_comp_inner+0x1a98>
    5ec8:	mov	x0, x1
    5ecc:	add	x1, x1, #0x1
    5ed0:	str	x1, [x19, #256]
    5ed4:	add	x20, x20, #0x1
    5ed8:	strb	w21, [x19, x0]
    5edc:	cmp	x22, x20
    5ee0:	strb	w21, [x19, #264]
    5ee4:	b.eq	6d8c <d_print_comp_inner+0x293c>  // b.none
    5ee8:	ldrb	w21, [x20]
    5eec:	cmp	x1, #0xff
    5ef0:	b.ne	5ec8 <d_print_comp_inner+0x1a78>  // b.any
    5ef4:	ldp	x3, x2, [x19, #272]
    5ef8:	strb	wzr, [x19, #255]
    5efc:	mov	x0, x19
    5f00:	blr	x3
    5f04:	ldr	x2, [x19, #320]
    5f08:	mov	x1, #0x1                   	// #1
    5f0c:	mov	x0, #0x0                   	// #0
    5f10:	add	x2, x2, x1
    5f14:	str	x2, [x19, #320]
    5f18:	b	5ed0 <d_print_comp_inner+0x1a80>
    5f1c:	adrp	x22, 0 <d_make_comp>
    5f20:	add	x22, x22, #0x0
    5f24:	add	x24, x22, #0x9
    5f28:	mov	w23, #0x6f                  	// #111
    5f2c:	ldr	x1, [x19, #256]
    5f30:	b	5f58 <d_print_comp_inner+0x1b08>
    5f34:	mov	x0, x1
    5f38:	add	x1, x1, #0x1
    5f3c:	str	x1, [x19, #256]
    5f40:	add	x22, x22, #0x1
    5f44:	strb	w23, [x19, x0]
    5f48:	cmp	x22, x24
    5f4c:	strb	w23, [x19, #264]
    5f50:	b.eq	6868 <d_print_comp_inner+0x2418>  // b.none
    5f54:	ldrb	w23, [x22]
    5f58:	cmp	x1, #0xff
    5f5c:	b.ne	5f34 <d_print_comp_inner+0x1ae4>  // b.any
    5f60:	ldp	x3, x2, [x19, #272]
    5f64:	strb	wzr, [x19, #255]
    5f68:	mov	x0, x19
    5f6c:	blr	x3
    5f70:	ldr	x2, [x19, #320]
    5f74:	mov	x1, #0x1                   	// #1
    5f78:	mov	x0, #0x0                   	// #0
    5f7c:	add	x2, x2, x1
    5f80:	str	x2, [x19, #320]
    5f84:	b	5f3c <d_print_comp_inner+0x1aec>
    5f88:	ldr	x2, [x20, #8]
    5f8c:	mov	w1, w21
    5f90:	mov	x0, x19
    5f94:	bl	9400 <d_print_expr_op>
    5f98:	ldp	x21, x22, [sp, #32]
    5f9c:	ldp	x23, x24, [sp, #48]
    5fa0:	b	44b4 <d_print_comp_inner+0x64>
    5fa4:	ldp	x22, x20, [x20, #8]
    5fa8:	ldr	w0, [x22]
    5fac:	cmp	w0, #0x32
    5fb0:	b.eq	6ed4 <d_print_comp_inner+0x2a84>  // b.none
    5fb4:	cmp	w0, #0x34
    5fb8:	b.ne	821c <d_print_comp_inner+0x3dcc>  // b.any
    5fbc:	ldr	x1, [x19, #256]
    5fc0:	add	x0, x1, #0x1
    5fc4:	cmp	x1, #0xff
    5fc8:	b.ne	5ff0 <d_print_comp_inner+0x1ba0>  // b.any
    5fcc:	ldp	x3, x2, [x19, #272]
    5fd0:	strb	wzr, [x19, #255]
    5fd4:	mov	x0, x19
    5fd8:	blr	x3
    5fdc:	ldr	x2, [x19, #320]
    5fe0:	mov	x0, #0x1                   	// #1
    5fe4:	mov	x1, #0x0                   	// #0
    5fe8:	add	x2, x2, x0
    5fec:	str	x2, [x19, #320]
    5ff0:	str	x0, [x19, #256]
    5ff4:	mov	w0, #0x28                  	// #40
    5ff8:	strb	w0, [x19, x1]
    5ffc:	mov	w1, w21
    6000:	strb	w0, [x19, #264]
    6004:	mov	x0, x19
    6008:	ldr	x2, [x22, #8]
    600c:	bl	8260 <d_print_comp>
    6010:	ldr	x1, [x19, #256]
    6014:	add	x0, x1, #0x1
    6018:	cmp	x1, #0xff
    601c:	b.ne	6044 <d_print_comp_inner+0x1bf4>  // b.any
    6020:	ldp	x3, x2, [x19, #272]
    6024:	strb	wzr, [x19, #255]
    6028:	mov	x0, x19
    602c:	blr	x3
    6030:	ldr	x2, [x19, #320]
    6034:	mov	x0, #0x1                   	// #1
    6038:	mov	x1, #0x0                   	// #0
    603c:	add	x2, x2, x0
    6040:	str	x2, [x19, #320]
    6044:	str	x0, [x19, #256]
    6048:	mov	w0, #0x29                  	// #41
    604c:	strb	w0, [x19, x1]
    6050:	strb	w0, [x19, #264]
    6054:	mov	w1, w21
    6058:	mov	x2, x20
    605c:	mov	x0, x19
    6060:	bl	94b8 <d_print_subexpr>
    6064:	ldp	x21, x22, [sp, #32]
    6068:	ldp	x23, x24, [sp, #48]
    606c:	b	44b4 <d_print_comp_inner+0x64>
    6070:	ldr	x0, [x20, #8]
    6074:	tbnz	w21, #2, 6d00 <d_print_comp_inner+0x28b0>
    6078:	ldrsw	x22, [x0, #8]
    607c:	ldr	x20, [x0]
    6080:	cbz	x22, 7ee8 <d_print_comp_inner+0x3a98>
    6084:	add	x22, x20, x22
    6088:	ldr	x1, [x19, #256]
    608c:	b	60b0 <d_print_comp_inner+0x1c60>
    6090:	mov	x0, x1
    6094:	add	x1, x1, #0x1
    6098:	str	x1, [x19, #256]
    609c:	add	x20, x20, #0x1
    60a0:	strb	w21, [x19, x0]
    60a4:	cmp	x22, x20
    60a8:	strb	w21, [x19, #264]
    60ac:	b.eq	6d74 <d_print_comp_inner+0x2924>  // b.none
    60b0:	ldrb	w21, [x20]
    60b4:	cmp	x1, #0xff
    60b8:	b.ne	6090 <d_print_comp_inner+0x1c40>  // b.any
    60bc:	ldp	x3, x2, [x19, #272]
    60c0:	strb	wzr, [x19, #255]
    60c4:	mov	x0, x19
    60c8:	blr	x3
    60cc:	ldr	x2, [x19, #320]
    60d0:	mov	x1, #0x1                   	// #1
    60d4:	mov	x0, #0x0                   	// #0
    60d8:	add	x2, x2, x1
    60dc:	str	x2, [x19, #320]
    60e0:	b	6098 <d_print_comp_inner+0x1c48>
    60e4:	ldr	x2, [x0, #8]
    60e8:	add	x0, sp, #0x60
    60ec:	ldr	x1, [x19, #288]
    60f0:	stp	x4, x20, [sp, #96]
    60f4:	str	wzr, [sp, #112]
    60f8:	str	x1, [sp, #120]
    60fc:	str	x0, [x19, #296]
    6100:	cbnz	x2, 4518 <d_print_comp_inner+0xc8>
    6104:	b	4514 <d_print_comp_inner+0xc4>
    6108:	ldp	x21, x22, [sp, #32]
    610c:	ldp	x23, x24, [sp, #48]
    6110:	b	44b4 <d_print_comp_inner+0x64>
    6114:	ldr	x2, [x20, #16]
    6118:	mov	w1, w21
    611c:	mov	x0, x19
    6120:	bl	8260 <d_print_comp>
    6124:	ldr	x1, [x19, #256]
    6128:	add	x0, x1, #0x1
    612c:	cmp	x1, #0xff
    6130:	b.ne	6158 <d_print_comp_inner+0x1d08>  // b.any
    6134:	ldp	x3, x2, [x19, #272]
    6138:	strb	wzr, [x19, #255]
    613c:	mov	x0, x19
    6140:	blr	x3
    6144:	ldr	x2, [x19, #320]
    6148:	mov	x0, #0x1                   	// #1
    614c:	mov	x1, #0x0                   	// #0
    6150:	add	x2, x2, x0
    6154:	str	x2, [x19, #320]
    6158:	str	x0, [x19, #256]
    615c:	mov	w0, #0x5d                  	// #93
    6160:	strb	w0, [x19, x1]
    6164:	strb	w0, [x19, #264]
    6168:	ldp	x21, x22, [sp, #32]
    616c:	ldp	x23, x24, [sp, #48]
    6170:	b	44b4 <d_print_comp_inner+0x64>
    6174:	ldr	x2, [x20, #16]
    6178:	mov	w1, w21
    617c:	mov	x0, x19
    6180:	bl	8260 <d_print_comp>
    6184:	ldp	x21, x22, [sp, #32]
    6188:	ldp	x23, x24, [sp, #48]
    618c:	b	44b4 <d_print_comp_inner+0x64>
    6190:	ldr	x2, [x20, #8]
    6194:	mov	w1, w21
    6198:	mov	x0, x19
    619c:	bl	8260 <d_print_comp>
    61a0:	ldp	x21, x22, [sp, #32]
    61a4:	ldp	x23, x24, [sp, #48]
    61a8:	b	44b4 <d_print_comp_inner+0x64>
    61ac:	ldr	x2, [x20, #8]
    61b0:	mov	w1, w21
    61b4:	mov	x0, x19
    61b8:	bl	8260 <d_print_comp>
    61bc:	ldp	x21, x22, [sp, #32]
    61c0:	ldp	x23, x24, [sp, #48]
    61c4:	b	44b4 <d_print_comp_inner+0x64>
    61c8:	ldr	x2, [x20, #16]
    61cc:	mov	w1, w21
    61d0:	mov	x0, x19
    61d4:	adrp	x24, 0 <d_make_comp>
    61d8:	add	x24, x24, #0x0
    61dc:	adrp	x22, 1f8 <d_append_buffer+0x20>
    61e0:	bl	8260 <d_print_comp>
    61e4:	add	x24, x24, #0x5
    61e8:	add	x22, x22, #0x0
    61ec:	mov	w23, #0x20                  	// #32
    61f0:	ldr	x1, [x19, #256]
    61f4:	b	6218 <d_print_comp_inner+0x1dc8>
    61f8:	mov	x0, x1
    61fc:	add	x1, x1, #0x1
    6200:	str	x1, [x19, #256]
    6204:	cmp	x22, x24
    6208:	strb	w23, [x19, x0]
    620c:	strb	w23, [x19, #264]
    6210:	b.eq	62b8 <d_print_comp_inner+0x1e68>  // b.none
    6214:	ldrb	w23, [x22], #1
    6218:	cmp	x1, #0xff
    621c:	b.ne	61f8 <d_print_comp_inner+0x1da8>  // b.any
    6220:	ldp	x3, x2, [x19, #272]
    6224:	strb	wzr, [x19, #255]
    6228:	mov	x0, x19
    622c:	blr	x3
    6230:	ldr	x2, [x19, #320]
    6234:	mov	x1, #0x1                   	// #1
    6238:	mov	x0, #0x0                   	// #0
    623c:	add	x2, x2, x1
    6240:	str	x2, [x19, #320]
    6244:	b	6200 <d_print_comp_inner+0x1db0>
    6248:	ldr	x2, [x20, #8]
    624c:	mov	w1, w21
    6250:	mov	x0, x19
    6254:	bl	8260 <d_print_comp>
    6258:	ldp	x21, x22, [sp, #32]
    625c:	ldp	x23, x24, [sp, #48]
    6260:	b	44b4 <d_print_comp_inner+0x64>
    6264:	ldr	x2, [x20, #8]
    6268:	mov	w1, w21
    626c:	mov	x0, x19
    6270:	bl	8260 <d_print_comp>
    6274:	ldp	x21, x22, [sp, #32]
    6278:	ldp	x23, x24, [sp, #48]
    627c:	b	44b4 <d_print_comp_inner+0x64>
    6280:	ldr	x2, [x20, #8]
    6284:	mov	w1, w21
    6288:	mov	x0, x19
    628c:	bl	8260 <d_print_comp>
    6290:	ldp	x21, x22, [sp, #32]
    6294:	ldp	x23, x24, [sp, #48]
    6298:	b	44b4 <d_print_comp_inner+0x64>
    629c:	ldr	x2, [x20, #8]
    62a0:	mov	w1, w21
    62a4:	mov	x0, x19
    62a8:	bl	8260 <d_print_comp>
    62ac:	ldp	x21, x22, [sp, #32]
    62b0:	ldp	x23, x24, [sp, #48]
    62b4:	b	44b4 <d_print_comp_inner+0x64>
    62b8:	ldr	x2, [x20, #8]
    62bc:	mov	w1, w21
    62c0:	mov	x0, x19
    62c4:	bl	8260 <d_print_comp>
    62c8:	ldp	x21, x22, [sp, #32]
    62cc:	ldp	x23, x24, [sp, #48]
    62d0:	b	44b4 <d_print_comp_inner+0x64>
    62d4:	ldr	x2, [x20, #16]
    62d8:	mov	w1, w21
    62dc:	mov	x0, x19
    62e0:	bl	8260 <d_print_comp>
    62e4:	ldr	x1, [x19, #256]
    62e8:	add	x0, x1, #0x1
    62ec:	cmp	x1, #0xff
    62f0:	b.ne	6318 <d_print_comp_inner+0x1ec8>  // b.any
    62f4:	ldp	x3, x2, [x19, #272]
    62f8:	strb	wzr, [x19, #255]
    62fc:	mov	x0, x19
    6300:	blr	x3
    6304:	ldr	x2, [x19, #320]
    6308:	mov	x0, #0x1                   	// #1
    630c:	mov	x1, #0x0                   	// #0
    6310:	add	x2, x2, x0
    6314:	str	x2, [x19, #320]
    6318:	str	x0, [x19, #256]
    631c:	mov	w0, #0x5d                  	// #93
    6320:	strb	w0, [x19, x1]
    6324:	strb	w0, [x19, #264]
    6328:	ldp	x21, x22, [sp, #32]
    632c:	ldp	x23, x24, [sp, #48]
    6330:	b	44b4 <d_print_comp_inner+0x64>
    6334:	ldr	x20, [x22, #8]
    6338:	ldrb	w0, [x20]
    633c:	sub	w0, w0, #0x61
    6340:	and	w0, w0, #0xff
    6344:	cmp	w0, #0x19
    6348:	b.hi	6390 <d_print_comp_inner+0x1f40>  // b.pmore
    634c:	add	x0, x1, #0x1
    6350:	cmp	x1, #0xff
    6354:	b.ne	6380 <d_print_comp_inner+0x1f30>  // b.any
    6358:	ldp	x3, x2, [x19, #272]
    635c:	strb	wzr, [x19, #255]
    6360:	mov	x0, x19
    6364:	blr	x3
    6368:	ldr	x2, [x19, #320]
    636c:	mov	x0, #0x1                   	// #1
    6370:	mov	x1, #0x0                   	// #0
    6374:	add	x2, x2, x0
    6378:	ldr	x20, [x22, #8]
    637c:	str	x2, [x19, #320]
    6380:	str	x0, [x19, #256]
    6384:	mov	w0, #0x20                  	// #32
    6388:	strb	w0, [x19, x1]
    638c:	strb	w0, [x19, #264]
    6390:	sxtw	x22, w23
    6394:	sub	w0, w23, #0x1
    6398:	add	x1, x20, x22
    639c:	sxtw	x0, w0
    63a0:	ldurb	w1, [x1, #-1]
    63a4:	cmp	w1, #0x20
    63a8:	csel	x22, x22, x0, ne  // ne = any
    63ac:	cbz	x22, 7c8c <d_print_comp_inner+0x383c>
    63b0:	add	x22, x20, x22
    63b4:	ldr	x1, [x19, #256]
    63b8:	b	63dc <d_print_comp_inner+0x1f8c>
    63bc:	mov	x0, x1
    63c0:	add	x1, x1, #0x1
    63c4:	str	x1, [x19, #256]
    63c8:	add	x20, x20, #0x1
    63cc:	strb	w21, [x19, x0]
    63d0:	cmp	x22, x20
    63d4:	strb	w21, [x19, #264]
    63d8:	b.eq	68f4 <d_print_comp_inner+0x24a4>  // b.none
    63dc:	ldrb	w21, [x20]
    63e0:	cmp	x1, #0xff
    63e4:	b.ne	63bc <d_print_comp_inner+0x1f6c>  // b.any
    63e8:	ldp	x3, x2, [x19, #272]
    63ec:	strb	wzr, [x19, #255]
    63f0:	mov	x0, x19
    63f4:	blr	x3
    63f8:	ldr	x2, [x19, #320]
    63fc:	mov	x1, #0x1                   	// #1
    6400:	mov	x0, #0x0                   	// #0
    6404:	add	x2, x2, x1
    6408:	str	x2, [x19, #320]
    640c:	b	63c4 <d_print_comp_inner+0x1f74>
    6410:	ldr	x2, [x20, #8]
    6414:	mov	w1, w21
    6418:	mov	x0, x19
    641c:	bl	8260 <d_print_comp>
    6420:	ldp	x21, x22, [sp, #32]
    6424:	ldp	x23, x24, [sp, #48]
    6428:	b	44b4 <d_print_comp_inner+0x64>
    642c:	ldr	x2, [x20, #8]
    6430:	adrp	x1, 0 <d_make_comp>
    6434:	add	x1, x1, #0x0
    6438:	add	x20, sp, #0x60
    643c:	add	w2, w2, #0x1
    6440:	mov	x0, x20
    6444:	bl	0 <sprintf>
    6448:	mov	x0, x20
    644c:	bl	0 <strlen>
    6450:	ldr	x1, [x19, #256]
    6454:	cbz	x0, 64b4 <d_print_comp_inner+0x2064>
    6458:	add	x22, x20, x0
    645c:	b	6480 <d_print_comp_inner+0x2030>
    6460:	mov	x0, x1
    6464:	add	x1, x1, #0x1
    6468:	str	x1, [x19, #256]
    646c:	add	x20, x20, #0x1
    6470:	strb	w21, [x19, x0]
    6474:	cmp	x22, x20
    6478:	strb	w21, [x19, #264]
    647c:	b.eq	64b4 <d_print_comp_inner+0x2064>  // b.none
    6480:	ldrb	w21, [x20]
    6484:	cmp	x1, #0xff
    6488:	b.ne	6460 <d_print_comp_inner+0x2010>  // b.any
    648c:	ldp	x3, x2, [x19, #272]
    6490:	strb	wzr, [x19, #255]
    6494:	mov	x0, x19
    6498:	blr	x3
    649c:	ldr	x2, [x19, #320]
    64a0:	mov	x1, #0x1                   	// #1
    64a4:	mov	x0, #0x0                   	// #0
    64a8:	add	x2, x2, x1
    64ac:	str	x2, [x19, #320]
    64b0:	b	6468 <d_print_comp_inner+0x2018>
    64b4:	add	x0, x1, #0x1
    64b8:	cmp	x1, #0xff
    64bc:	b.ne	64e4 <d_print_comp_inner+0x2094>  // b.any
    64c0:	ldp	x3, x2, [x19, #272]
    64c4:	strb	wzr, [x19, #255]
    64c8:	mov	x0, x19
    64cc:	blr	x3
    64d0:	ldr	x2, [x19, #320]
    64d4:	mov	x0, #0x1                   	// #1
    64d8:	mov	x1, #0x0                   	// #0
    64dc:	add	x2, x2, x0
    64e0:	str	x2, [x19, #320]
    64e4:	str	x0, [x19, #256]
    64e8:	mov	w0, #0x7d                  	// #125
    64ec:	strb	w0, [x19, x1]
    64f0:	strb	w0, [x19, #264]
    64f4:	ldp	x21, x22, [sp, #32]
    64f8:	ldp	x23, x24, [sp, #48]
    64fc:	b	44b4 <d_print_comp_inner+0x64>
    6500:	ldr	x2, [x20, #8]
    6504:	mov	w1, w21
    6508:	mov	x0, x19
    650c:	bl	8260 <d_print_comp>
    6510:	ldp	x21, x22, [sp, #32]
    6514:	ldp	x23, x24, [sp, #48]
    6518:	b	44b4 <d_print_comp_inner+0x64>
    651c:	ldr	x2, [x20, #8]
    6520:	mov	w1, w21
    6524:	mov	x0, x19
    6528:	bl	8260 <d_print_comp>
    652c:	ldp	x21, x22, [sp, #32]
    6530:	ldp	x23, x24, [sp, #48]
    6534:	b	44b4 <d_print_comp_inner+0x64>
    6538:	ldr	w3, [x19, #312]
    653c:	mov	w1, w21
    6540:	ldr	x2, [x20, #8]
    6544:	add	w3, w3, #0x1
    6548:	str	w3, [x19, #312]
    654c:	mov	x0, x19
    6550:	mov	w21, #0x29                  	// #41
    6554:	mov	x22, #0x0                   	// #0
    6558:	bl	8260 <d_print_comp>
    655c:	ldr	w0, [x19, #312]
    6560:	ldr	x1, [x19, #256]
    6564:	sub	w0, w0, #0x1
    6568:	str	w0, [x19, #312]
    656c:	b	6594 <d_print_comp_inner+0x2144>
    6570:	mov	x0, x1
    6574:	add	x1, x1, #0x1
    6578:	str	x1, [x19, #256]
    657c:	cmp	x22, #0x1
    6580:	strb	w21, [x19, x0]
    6584:	strb	w21, [x19, #264]
    6588:	mov	w21, #0x23                  	// #35
    658c:	b.eq	65c4 <d_print_comp_inner+0x2174>  // b.none
    6590:	mov	x22, #0x1                   	// #1
    6594:	cmp	x1, #0xff
    6598:	b.ne	6570 <d_print_comp_inner+0x2120>  // b.any
    659c:	ldp	x3, x2, [x19, #272]
    65a0:	strb	wzr, [x19, #255]
    65a4:	mov	x0, x19
    65a8:	blr	x3
    65ac:	ldr	x2, [x19, #320]
    65b0:	mov	x1, #0x1                   	// #1
    65b4:	mov	x0, #0x0                   	// #0
    65b8:	add	x2, x2, x1
    65bc:	str	x2, [x19, #320]
    65c0:	b	6578 <d_print_comp_inner+0x2128>
    65c4:	ldr	w2, [x20, #16]
    65c8:	adrp	x1, 0 <d_make_comp>
    65cc:	add	x1, x1, #0x0
    65d0:	add	x20, sp, #0x60
    65d4:	add	w2, w2, #0x1
    65d8:	mov	x0, x20
    65dc:	bl	0 <sprintf>
    65e0:	mov	x0, x20
    65e4:	bl	0 <strlen>
    65e8:	ldr	x1, [x19, #256]
    65ec:	cbz	x0, 664c <d_print_comp_inner+0x21fc>
    65f0:	add	x23, x20, x0
    65f4:	b	6618 <d_print_comp_inner+0x21c8>
    65f8:	mov	x0, x1
    65fc:	add	x1, x1, #0x1
    6600:	str	x1, [x19, #256]
    6604:	add	x20, x20, #0x1
    6608:	strb	w21, [x19, x0]
    660c:	cmp	x23, x20
    6610:	strb	w21, [x19, #264]
    6614:	b.eq	664c <d_print_comp_inner+0x21fc>  // b.none
    6618:	ldrb	w21, [x20]
    661c:	cmp	x1, #0xff
    6620:	b.ne	65f8 <d_print_comp_inner+0x21a8>  // b.any
    6624:	ldp	x3, x2, [x19, #272]
    6628:	strb	wzr, [x19, #255]
    662c:	mov	x0, x19
    6630:	blr	x3
    6634:	ldr	x2, [x19, #320]
    6638:	mov	x1, #0x1                   	// #1
    663c:	mov	x0, #0x0                   	// #0
    6640:	add	x2, x2, x1
    6644:	str	x2, [x19, #320]
    6648:	b	6600 <d_print_comp_inner+0x21b0>
    664c:	cmp	x1, #0xff
    6650:	b.eq	6eb0 <d_print_comp_inner+0x2a60>  // b.none
    6654:	add	x22, x1, #0x1
    6658:	str	x22, [x19, #256]
    665c:	mov	w0, #0x7d                  	// #125
    6660:	strb	w0, [x19, x1]
    6664:	strb	w0, [x19, #264]
    6668:	ldp	x21, x22, [sp, #32]
    666c:	ldp	x23, x24, [sp, #48]
    6670:	b	44b4 <d_print_comp_inner+0x64>
    6674:	ldr	x2, [x20, #8]
    6678:	mov	w1, w21
    667c:	mov	x0, x19
    6680:	bl	8260 <d_print_comp>
    6684:	ldr	x1, [x19, #256]
    6688:	add	x0, x1, #0x1
    668c:	cmp	x1, #0xff
    6690:	b.ne	66b8 <d_print_comp_inner+0x2268>  // b.any
    6694:	ldp	x3, x2, [x19, #272]
    6698:	strb	wzr, [x19, #255]
    669c:	mov	x0, x19
    66a0:	blr	x3
    66a4:	ldr	x2, [x19, #320]
    66a8:	mov	x0, #0x1                   	// #1
    66ac:	mov	x1, #0x0                   	// #0
    66b0:	add	x2, x2, x0
    66b4:	str	x2, [x19, #320]
    66b8:	str	x0, [x19, #256]
    66bc:	mov	w0, #0x29                  	// #41
    66c0:	strb	w0, [x19, x1]
    66c4:	strb	w0, [x19, #264]
    66c8:	ldp	x21, x22, [sp, #32]
    66cc:	ldp	x23, x24, [sp, #48]
    66d0:	b	44b4 <d_print_comp_inner+0x64>
    66d4:	ldr	x2, [x20, #8]
    66d8:	mov	w1, w21
    66dc:	mov	x0, x19
    66e0:	bl	8260 <d_print_comp>
    66e4:	ldp	x21, x22, [sp, #32]
    66e8:	ldp	x23, x24, [sp, #48]
    66ec:	b	44b4 <d_print_comp_inner+0x64>
    66f0:	ldr	x2, [x20, #8]
    66f4:	mov	w1, w21
    66f8:	mov	x0, x19
    66fc:	bl	8260 <d_print_comp>
    6700:	ldp	x21, x22, [sp, #32]
    6704:	ldp	x23, x24, [sp, #48]
    6708:	b	44b4 <d_print_comp_inner+0x64>
    670c:	ldr	x2, [x20, #8]
    6710:	mov	w1, w21
    6714:	mov	x0, x19
    6718:	adrp	x22, 0 <d_make_comp>
    671c:	add	x22, x22, #0x0
    6720:	mov	w23, #0x2d                  	// #45
    6724:	bl	8260 <d_print_comp>
    6728:	add	x24, x22, #0x4
    672c:	ldr	x1, [x19, #256]
    6730:	b	6758 <d_print_comp_inner+0x2308>
    6734:	mov	x0, x1
    6738:	add	x1, x1, #0x1
    673c:	str	x1, [x19, #256]
    6740:	add	x22, x22, #0x1
    6744:	strb	w23, [x19, x0]
    6748:	cmp	x24, x22
    674c:	strb	w23, [x19, #264]
    6750:	b.eq	67c0 <d_print_comp_inner+0x2370>  // b.none
    6754:	ldrb	w23, [x22]
    6758:	cmp	x1, #0xff
    675c:	b.ne	6734 <d_print_comp_inner+0x22e4>  // b.any
    6760:	ldp	x3, x2, [x19, #272]
    6764:	strb	wzr, [x19, #255]
    6768:	mov	x0, x19
    676c:	blr	x3
    6770:	ldr	x2, [x19, #320]
    6774:	mov	x1, #0x1                   	// #1
    6778:	mov	x0, #0x0                   	// #0
    677c:	add	x2, x2, x1
    6780:	str	x2, [x19, #320]
    6784:	b	673c <d_print_comp_inner+0x22ec>
    6788:	ldr	x2, [x20, #8]
    678c:	mov	w1, w21
    6790:	mov	x0, x19
    6794:	bl	8260 <d_print_comp>
    6798:	ldp	x21, x22, [sp, #32]
    679c:	ldp	x23, x24, [sp, #48]
    67a0:	b	44b4 <d_print_comp_inner+0x64>
    67a4:	ldr	x2, [x20, #8]
    67a8:	mov	w1, w21
    67ac:	mov	x0, x19
    67b0:	bl	8260 <d_print_comp>
    67b4:	ldp	x21, x22, [sp, #32]
    67b8:	ldp	x23, x24, [sp, #48]
    67bc:	b	44b4 <d_print_comp_inner+0x64>
    67c0:	ldr	x2, [x20, #16]
    67c4:	mov	w1, w21
    67c8:	mov	x0, x19
    67cc:	bl	8260 <d_print_comp>
    67d0:	ldp	x21, x22, [sp, #32]
    67d4:	ldp	x23, x24, [sp, #48]
    67d8:	b	44b4 <d_print_comp_inner+0x64>
    67dc:	ldr	x2, [x20, #8]
    67e0:	mov	w1, w21
    67e4:	mov	x0, x19
    67e8:	bl	8260 <d_print_comp>
    67ec:	ldp	x21, x22, [sp, #32]
    67f0:	ldp	x23, x24, [sp, #48]
    67f4:	b	44b4 <d_print_comp_inner+0x64>
    67f8:	ldr	x2, [x20, #8]
    67fc:	mov	w1, w21
    6800:	mov	x0, x19
    6804:	bl	8260 <d_print_comp>
    6808:	ldp	x21, x22, [sp, #32]
    680c:	ldp	x23, x24, [sp, #48]
    6810:	b	44b4 <d_print_comp_inner+0x64>
    6814:	ldr	x2, [x20, #8]
    6818:	mov	w1, w21
    681c:	mov	x0, x19
    6820:	bl	8260 <d_print_comp>
    6824:	ldp	x21, x22, [sp, #32]
    6828:	ldp	x23, x24, [sp, #48]
    682c:	b	44b4 <d_print_comp_inner+0x64>
    6830:	ldr	x2, [x20, #8]
    6834:	mov	w1, w21
    6838:	mov	x0, x19
    683c:	bl	8260 <d_print_comp>
    6840:	ldp	x21, x22, [sp, #32]
    6844:	ldp	x23, x24, [sp, #48]
    6848:	b	44b4 <d_print_comp_inner+0x64>
    684c:	ldr	x2, [x20, #8]
    6850:	mov	w1, w21
    6854:	mov	x0, x19
    6858:	bl	8260 <d_print_comp>
    685c:	ldp	x21, x22, [sp, #32]
    6860:	ldp	x23, x24, [sp, #48]
    6864:	b	44b4 <d_print_comp_inner+0x64>
    6868:	ldr	x1, [x19, #368]
    686c:	cbz	x1, 6880 <d_print_comp_inner+0x2430>
    6870:	ldr	x2, [x19, #288]
    6874:	add	x0, sp, #0x60
    6878:	stp	x2, x1, [sp, #96]
    687c:	str	x0, [x19, #288]
    6880:	ldr	x2, [x20, #8]
    6884:	ldr	w0, [x2]
    6888:	cmp	w0, #0x4
    688c:	b.eq	7178 <d_print_comp_inner+0x2d28>  // b.none
    6890:	mov	x0, x19
    6894:	mov	w1, w21
    6898:	bl	8260 <d_print_comp>
    689c:	ldr	x0, [x19, #368]
    68a0:	cbz	x0, 7594 <d_print_comp_inner+0x3144>
    68a4:	ldr	x0, [sp, #96]
    68a8:	ldp	x21, x22, [sp, #32]
    68ac:	ldp	x23, x24, [sp, #48]
    68b0:	str	x0, [x19, #288]
    68b4:	b	44b4 <d_print_comp_inner+0x64>
    68b8:	ldr	x2, [x20, #8]
    68bc:	mov	w1, w21
    68c0:	mov	x0, x19
    68c4:	bl	8260 <d_print_comp>
    68c8:	ldp	x21, x22, [sp, #32]
    68cc:	ldp	x23, x24, [sp, #48]
    68d0:	b	44b4 <d_print_comp_inner+0x64>
    68d4:	mov	x2, x20
    68d8:	mov	w1, w21
    68dc:	mov	x0, x19
    68e0:	bl	82f8 <d_print_mod>
    68e4:	b	452c <d_print_comp_inner+0xdc>
    68e8:	ldp	x21, x22, [sp, #32]
    68ec:	ldp	x23, x24, [sp, #48]
    68f0:	b	44b4 <d_print_comp_inner+0x64>
    68f4:	ldp	x21, x22, [sp, #32]
    68f8:	ldp	x23, x24, [sp, #48]
    68fc:	b	44b4 <d_print_comp_inner+0x64>
    6900:	ldp	x21, x22, [sp, #32]
    6904:	ldp	x23, x24, [sp, #48]
    6908:	b	44b4 <d_print_comp_inner+0x64>
    690c:	ldp	x21, x22, [sp, #32]
    6910:	ldp	x23, x24, [sp, #48]
    6914:	ldp	x25, x26, [sp, #64]
    6918:	b	44b4 <d_print_comp_inner+0x64>
    691c:	ldr	x2, [x20, #16]
    6920:	mov	x0, x19
    6924:	mov	w1, w21
    6928:	ldr	x20, [x19, #320]
    692c:	bl	8260 <d_print_comp>
    6930:	ldr	x0, [x19, #320]
    6934:	cmp	x0, x20
    6938:	b.eq	7530 <d_print_comp_inner+0x30e0>  // b.none
    693c:	ldp	x21, x22, [sp, #32]
    6940:	ldp	x23, x24, [sp, #48]
    6944:	b	44b4 <d_print_comp_inner+0x64>
    6948:	ldr	x25, [x25, #8]
    694c:	cbz	x25, 7824 <d_print_comp_inner+0x33d4>
    6950:	add	x3, x3, #0x20
    6954:	cmp	w24, #0x4
    6958:	b.eq	74f8 <d_print_comp_inner+0x30a8>  // b.none
    695c:	mov	x0, x4
    6960:	b	5794 <d_print_comp_inner+0x1344>
    6964:	ldr	x25, [x20, #8]
    6968:	cbnz	w24, 52d4 <d_print_comp_inner+0xe84>
    696c:	ldp	x21, x22, [sp, #32]
    6970:	ldp	x23, x24, [sp, #48]
    6974:	ldp	x25, x26, [sp, #64]
    6978:	b	44b4 <d_print_comp_inner+0x64>
    697c:	mov	x20, x0
    6980:	b	4688 <d_print_comp_inner+0x238>
    6984:	add	x21, x20, x22
    6988:	cmp	x21, x20
    698c:	b.ls	7dd4 <d_print_comp_inner+0x3984>  // b.plast
    6990:	mov	w23, #0x5f                  	// #95
    6994:	b	69e4 <d_print_comp_inner+0x2594>
    6998:	ldr	x1, [x19, #256]
    699c:	add	x0, x1, #0x1
    69a0:	cmp	x1, #0xff
    69a4:	b.ne	69cc <d_print_comp_inner+0x257c>  // b.any
    69a8:	ldp	x3, x2, [x19, #272]
    69ac:	strb	wzr, [x19, #255]
    69b0:	mov	x0, x19
    69b4:	blr	x3
    69b8:	ldr	x2, [x19, #320]
    69bc:	mov	x0, #0x1                   	// #1
    69c0:	mov	x1, #0x0                   	// #0
    69c4:	add	x2, x2, x0
    69c8:	str	x2, [x19, #320]
    69cc:	str	x0, [x19, #256]
    69d0:	strb	w22, [x19, x1]
    69d4:	strb	w22, [x19, #264]
    69d8:	add	x20, x20, #0x1
    69dc:	cmp	x21, x20
    69e0:	b.ls	6d98 <d_print_comp_inner+0x2948>  // b.plast
    69e4:	sub	x0, x21, x20
    69e8:	ldrb	w22, [x20]
    69ec:	cmp	x0, #0x3
    69f0:	b.le	6998 <d_print_comp_inner+0x2548>
    69f4:	cmp	w22, #0x5f
    69f8:	b.ne	6998 <d_print_comp_inner+0x2548>  // b.any
    69fc:	ldrb	w0, [x20, #1]
    6a00:	cmp	w0, #0x5f
    6a04:	b.ne	6998 <d_print_comp_inner+0x2548>  // b.any
    6a08:	ldrb	w0, [x20, #2]
    6a0c:	cmp	w0, #0x55
    6a10:	b.ne	6998 <d_print_comp_inner+0x2548>  // b.any
    6a14:	add	x24, x20, #0x3
    6a18:	cmp	x21, x24
    6a1c:	b.ls	6998 <d_print_comp_inner+0x2548>  // b.plast
    6a20:	mov	x2, #0x0                   	// #0
    6a24:	b	6a40 <d_print_comp_inner+0x25f0>
    6a28:	mov	w0, w1
    6a2c:	sxtw	x0, w0
    6a30:	add	x24, x24, #0x1
    6a34:	add	x2, x0, x2, lsl #4
    6a38:	cmp	x21, x24
    6a3c:	b.eq	6998 <d_print_comp_inner+0x2548>  // b.none
    6a40:	ldrb	w0, [x24]
    6a44:	sub	w1, w0, #0x30
    6a48:	and	w3, w1, #0xff
    6a4c:	cmp	w3, #0x9
    6a50:	b.ls	6a28 <d_print_comp_inner+0x25d8>  // b.plast
    6a54:	sub	w1, w0, #0x41
    6a58:	and	w1, w1, #0xff
    6a5c:	cmp	w1, #0x5
    6a60:	b.hi	7a64 <d_print_comp_inner+0x3614>  // b.pmore
    6a64:	sub	w0, w0, #0x37
    6a68:	b	6a2c <d_print_comp_inner+0x25dc>
    6a6c:	add	x1, x20, #0x8
    6a70:	mov	x0, x19
    6a74:	bl	af8 <d_lookup_template_argument.isra.0>
    6a78:	mov	x2, x0
    6a7c:	cbz	x0, 44e0 <d_print_comp_inner+0x90>
    6a80:	ldr	w1, [x0]
    6a84:	cmp	w1, #0x2f
    6a88:	b.eq	7ae0 <d_print_comp_inner+0x3690>  // b.none
    6a8c:	ldr	x20, [x19, #288]
    6a90:	mov	w1, w21
    6a94:	mov	x0, x19
    6a98:	ldr	x3, [x20]
    6a9c:	str	x3, [x19, #288]
    6aa0:	bl	8260 <d_print_comp>
    6aa4:	ldp	x21, x22, [sp, #32]
    6aa8:	ldp	x23, x24, [sp, #48]
    6aac:	str	x20, [x19, #288]
    6ab0:	b	44b4 <d_print_comp_inner+0x64>
    6ab4:	ldr	x2, [x20, #8]
    6ab8:	adrp	x1, 0 <d_make_comp>
    6abc:	add	x1, x1, #0x0
    6ac0:	add	x20, sp, #0x60
    6ac4:	add	w2, w2, #0x1
    6ac8:	mov	x0, x20
    6acc:	bl	0 <sprintf>
    6ad0:	mov	x0, x20
    6ad4:	bl	0 <strlen>
    6ad8:	cbz	x0, 7edc <d_print_comp_inner+0x3a8c>
    6adc:	add	x22, x20, x0
    6ae0:	ldr	x1, [x19, #256]
    6ae4:	b	6b08 <d_print_comp_inner+0x26b8>
    6ae8:	mov	x0, x1
    6aec:	add	x1, x1, #0x1
    6af0:	str	x1, [x19, #256]
    6af4:	add	x20, x20, #0x1
    6af8:	strb	w21, [x19, x0]
    6afc:	cmp	x22, x20
    6b00:	strb	w21, [x19, #264]
    6b04:	b.eq	6da4 <d_print_comp_inner+0x2954>  // b.none
    6b08:	ldrb	w21, [x20]
    6b0c:	cmp	x1, #0xff
    6b10:	b.ne	6ae8 <d_print_comp_inner+0x2698>  // b.any
    6b14:	ldp	x3, x2, [x19, #272]
    6b18:	strb	wzr, [x19, #255]
    6b1c:	mov	x0, x19
    6b20:	blr	x3
    6b24:	ldr	x2, [x19, #320]
    6b28:	mov	x1, #0x1                   	// #1
    6b2c:	mov	x0, #0x0                   	// #0
    6b30:	add	x2, x2, x1
    6b34:	str	x2, [x19, #320]
    6b38:	b	6af0 <d_print_comp_inner+0x26a0>
    6b3c:	adrp	x20, 0 <d_make_comp>
    6b40:	add	x20, x20, #0x0
    6b44:	add	x22, x20, #0x4
    6b48:	mov	w21, #0x74                  	// #116
    6b4c:	b	6b74 <d_print_comp_inner+0x2724>
    6b50:	mov	x0, x1
    6b54:	add	x1, x1, #0x1
    6b58:	str	x1, [x19, #256]
    6b5c:	add	x20, x20, #0x1
    6b60:	strb	w21, [x19, x0]
    6b64:	cmp	x20, x22
    6b68:	strb	w21, [x19, #264]
    6b6c:	b.eq	6ba4 <d_print_comp_inner+0x2754>  // b.none
    6b70:	ldrb	w21, [x20]
    6b74:	cmp	x1, #0xff
    6b78:	b.ne	6b50 <d_print_comp_inner+0x2700>  // b.any
    6b7c:	ldp	x3, x2, [x19, #272]
    6b80:	strb	wzr, [x19, #255]
    6b84:	mov	x0, x19
    6b88:	blr	x3
    6b8c:	ldr	x2, [x19, #320]
    6b90:	mov	x1, #0x1                   	// #1
    6b94:	mov	x0, #0x0                   	// #0
    6b98:	add	x2, x2, x1
    6b9c:	str	x2, [x19, #320]
    6ba0:	b	6b58 <d_print_comp_inner+0x2708>
    6ba4:	ldp	x21, x22, [sp, #32]
    6ba8:	ldp	x23, x24, [sp, #48]
    6bac:	b	44b4 <d_print_comp_inner+0x64>
    6bb0:	mov	w2, w23
    6bb4:	adrp	x1, 0 <d_make_comp>
    6bb8:	add	x1, x1, #0x0
    6bbc:	add	x20, sp, #0x60
    6bc0:	mov	x0, x20
    6bc4:	bl	0 <sprintf>
    6bc8:	mov	x0, x20
    6bcc:	bl	0 <strlen>
    6bd0:	ldr	x1, [x19, #256]
    6bd4:	cbz	x0, 6c34 <d_print_comp_inner+0x27e4>
    6bd8:	add	x22, x20, x0
    6bdc:	b	6c00 <d_print_comp_inner+0x27b0>
    6be0:	mov	x0, x1
    6be4:	add	x1, x1, #0x1
    6be8:	str	x1, [x19, #256]
    6bec:	add	x20, x20, #0x1
    6bf0:	strb	w21, [x19, x0]
    6bf4:	cmp	x20, x22
    6bf8:	strb	w21, [x19, #264]
    6bfc:	b.eq	6c34 <d_print_comp_inner+0x27e4>  // b.none
    6c00:	ldrb	w21, [x20]
    6c04:	cmp	x1, #0xff
    6c08:	b.ne	6be0 <d_print_comp_inner+0x2790>  // b.any
    6c0c:	ldp	x3, x2, [x19, #272]
    6c10:	strb	wzr, [x19, #255]
    6c14:	mov	x0, x19
    6c18:	blr	x3
    6c1c:	ldr	x2, [x19, #320]
    6c20:	mov	x1, #0x1                   	// #1
    6c24:	mov	x0, #0x0                   	// #0
    6c28:	add	x2, x2, x1
    6c2c:	str	x2, [x19, #320]
    6c30:	b	6be8 <d_print_comp_inner+0x2798>
    6c34:	add	x0, x1, #0x1
    6c38:	cmp	x1, #0xff
    6c3c:	b.ne	6c64 <d_print_comp_inner+0x2814>  // b.any
    6c40:	ldp	x3, x2, [x19, #272]
    6c44:	strb	wzr, [x19, #255]
    6c48:	mov	x0, x19
    6c4c:	blr	x3
    6c50:	ldr	x2, [x19, #320]
    6c54:	mov	x0, #0x1                   	// #1
    6c58:	mov	x1, #0x0                   	// #0
    6c5c:	add	x2, x2, x0
    6c60:	str	x2, [x19, #320]
    6c64:	str	x0, [x19, #256]
    6c68:	mov	w0, #0x7d                  	// #125
    6c6c:	strb	w0, [x19, x1]
    6c70:	strb	w0, [x19, #264]
    6c74:	ldp	x21, x22, [sp, #32]
    6c78:	ldp	x23, x24, [sp, #48]
    6c7c:	b	44b4 <d_print_comp_inner+0x64>
    6c80:	adrp	x20, 0 <d_make_comp>
    6c84:	add	x20, x20, #0x0
    6c88:	add	x22, x20, #0x6
    6c8c:	mov	w21, #0x5f                  	// #95
    6c90:	b	6cb8 <d_print_comp_inner+0x2868>
    6c94:	mov	x0, x1
    6c98:	add	x1, x1, #0x1
    6c9c:	str	x1, [x19, #256]
    6ca0:	add	x20, x20, #0x1
    6ca4:	strb	w21, [x19, x0]
    6ca8:	cmp	x20, x22
    6cac:	strb	w21, [x19, #264]
    6cb0:	b.eq	6ce8 <d_print_comp_inner+0x2898>  // b.none
    6cb4:	ldrb	w21, [x20]
    6cb8:	cmp	x1, #0xff
    6cbc:	b.ne	6c94 <d_print_comp_inner+0x2844>  // b.any
    6cc0:	ldp	x3, x2, [x19, #272]
    6cc4:	strb	wzr, [x19, #255]
    6cc8:	mov	x0, x19
    6ccc:	blr	x3
    6cd0:	ldr	x2, [x19, #320]
    6cd4:	mov	x1, #0x1                   	// #1
    6cd8:	mov	x0, #0x0                   	// #0
    6cdc:	add	x2, x2, x1
    6ce0:	str	x2, [x19, #320]
    6ce4:	b	6c9c <d_print_comp_inner+0x284c>
    6ce8:	ldp	x21, x22, [sp, #32]
    6cec:	ldp	x23, x24, [sp, #48]
    6cf0:	b	44b4 <d_print_comp_inner+0x64>
    6cf4:	ldp	x21, x22, [sp, #32]
    6cf8:	ldp	x23, x24, [sp, #48]
    6cfc:	b	44b4 <d_print_comp_inner+0x64>
    6d00:	ldrsw	x22, [x0, #24]
    6d04:	ldr	x20, [x0, #16]
    6d08:	cbz	x22, 7dbc <d_print_comp_inner+0x396c>
    6d0c:	add	x22, x20, x22
    6d10:	ldr	x1, [x19, #256]
    6d14:	b	6d38 <d_print_comp_inner+0x28e8>
    6d18:	mov	x0, x1
    6d1c:	add	x1, x1, #0x1
    6d20:	str	x1, [x19, #256]
    6d24:	add	x20, x20, #0x1
    6d28:	strb	w21, [x19, x0]
    6d2c:	cmp	x20, x22
    6d30:	strb	w21, [x19, #264]
    6d34:	b.eq	6d80 <d_print_comp_inner+0x2930>  // b.none
    6d38:	ldrb	w21, [x20]
    6d3c:	cmp	x1, #0xff
    6d40:	b.ne	6d18 <d_print_comp_inner+0x28c8>  // b.any
    6d44:	ldp	x3, x2, [x19, #272]
    6d48:	strb	wzr, [x19, #255]
    6d4c:	mov	x0, x19
    6d50:	blr	x3
    6d54:	ldr	x2, [x19, #320]
    6d58:	mov	x1, #0x1                   	// #1
    6d5c:	mov	x0, #0x0                   	// #0
    6d60:	add	x2, x2, x1
    6d64:	str	x2, [x19, #320]
    6d68:	b	6d20 <d_print_comp_inner+0x28d0>
    6d6c:	ldr	x1, [x19, #256]
    6d70:	b	4f88 <d_print_comp_inner+0xb38>
    6d74:	ldp	x21, x22, [sp, #32]
    6d78:	ldp	x23, x24, [sp, #48]
    6d7c:	b	44b4 <d_print_comp_inner+0x64>
    6d80:	ldp	x21, x22, [sp, #32]
    6d84:	ldp	x23, x24, [sp, #48]
    6d88:	b	44b4 <d_print_comp_inner+0x64>
    6d8c:	ldp	x21, x22, [sp, #32]
    6d90:	ldp	x23, x24, [sp, #48]
    6d94:	b	44b4 <d_print_comp_inner+0x64>
    6d98:	ldp	x21, x22, [sp, #32]
    6d9c:	ldp	x23, x24, [sp, #48]
    6da0:	b	44b4 <d_print_comp_inner+0x64>
    6da4:	ldp	x21, x22, [sp, #32]
    6da8:	ldp	x23, x24, [sp, #48]
    6dac:	b	44b4 <d_print_comp_inner+0x64>
    6db0:	ldr	x1, [x2, #8]
    6db4:	ldr	w22, [x1, #28]
    6db8:	cmp	w22, #0x6
    6dbc:	b.hi	6e54 <d_print_comp_inner+0x2a04>  // b.pmore
    6dc0:	cbz	w22, 45a4 <d_print_comp_inner+0x154>
    6dc4:	ldr	x1, [x20, #16]
    6dc8:	ldr	w1, [x1]
    6dcc:	cbnz	w1, 45a4 <d_print_comp_inner+0x154>
    6dd0:	cmp	w0, #0x3e
    6dd4:	b.eq	8158 <d_print_comp_inner+0x3d08>  // b.none
    6dd8:	ldr	x2, [x20, #16]
    6ddc:	mov	w1, w21
    6de0:	mov	x0, x19
    6de4:	bl	8260 <d_print_comp>
    6de8:	cmp	w22, #0x4
    6dec:	b.eq	8138 <d_print_comp_inner+0x3ce8>  // b.none
    6df0:	b.hi	7ffc <d_print_comp_inner+0x3bac>  // b.pmore
    6df4:	cmp	w22, #0x2
    6df8:	b.eq	80e8 <d_print_comp_inner+0x3c98>  // b.none
    6dfc:	cmp	w22, #0x3
    6e00:	b.ne	8230 <d_print_comp_inner+0x3de0>  // b.any
    6e04:	ldr	x1, [x19, #256]
    6e08:	cmp	x1, #0xff
    6e0c:	b.ne	6e34 <d_print_comp_inner+0x29e4>  // b.any
    6e10:	ldp	x3, x2, [x19, #272]
    6e14:	strb	wzr, [x19, #255]
    6e18:	mov	x0, x19
    6e1c:	blr	x3
    6e20:	str	xzr, [x19, #256]
    6e24:	ldr	x0, [x19, #320]
    6e28:	mov	x1, #0x0                   	// #0
    6e2c:	add	x0, x0, #0x1
    6e30:	str	x0, [x19, #320]
    6e34:	add	x0, x1, #0x1
    6e38:	str	x0, [x19, #256]
    6e3c:	mov	w0, #0x6c                  	// #108
    6e40:	strb	w0, [x19, x1]
    6e44:	strb	w0, [x19, #264]
    6e48:	ldp	x21, x22, [sp, #32]
    6e4c:	ldp	x23, x24, [sp, #48]
    6e50:	b	44b4 <d_print_comp_inner+0x64>
    6e54:	cmp	w22, #0x7
    6e58:	b.ne	45a4 <d_print_comp_inner+0x154>  // b.any
    6e5c:	ldr	x1, [x20, #16]
    6e60:	ldr	w3, [x1]
    6e64:	cbnz	w3, 45a4 <d_print_comp_inner+0x154>
    6e68:	ldr	w3, [x1, #16]
    6e6c:	cmp	w0, #0x3d
    6e70:	ccmp	w3, #0x1, #0x0, eq  // eq = none
    6e74:	b.ne	45a4 <d_print_comp_inner+0x154>  // b.any
    6e78:	ldr	x0, [x1, #8]
    6e7c:	ldrb	w0, [x0]
    6e80:	cmp	w0, #0x30
    6e84:	b.eq	823c <d_print_comp_inner+0x3dec>  // b.none
    6e88:	cmp	w0, #0x31
    6e8c:	b.ne	45a4 <d_print_comp_inner+0x154>  // b.any
    6e90:	mov	x0, x19
    6e94:	adrp	x1, 0 <d_make_comp>
    6e98:	mov	x2, #0x4                   	// #4
    6e9c:	add	x1, x1, #0x0
    6ea0:	bl	1d8 <d_append_buffer>
    6ea4:	ldp	x21, x22, [sp, #32]
    6ea8:	ldp	x23, x24, [sp, #48]
    6eac:	b	44b4 <d_print_comp_inner+0x64>
    6eb0:	ldp	x3, x2, [x19, #272]
    6eb4:	strb	wzr, [x19, #255]
    6eb8:	mov	x0, x19
    6ebc:	blr	x3
    6ec0:	ldr	x0, [x19, #320]
    6ec4:	mov	x1, #0x0                   	// #0
    6ec8:	add	x0, x0, #0x1
    6ecc:	str	x0, [x19, #320]
    6ed0:	b	6658 <d_print_comp_inner+0x2208>
    6ed4:	ldr	x0, [x22, #8]
    6ed8:	ldr	x23, [x0]
    6edc:	ldrb	w0, [x23]
    6ee0:	subs	w1, w0, #0x61
    6ee4:	b.ne	6ef8 <d_print_comp_inner+0x2aa8>  // b.any
    6ee8:	ldrb	w1, [x23, #1]
    6eec:	subs	w1, w1, #0x64
    6ef0:	b.ne	6ef8 <d_print_comp_inner+0x2aa8>  // b.any
    6ef4:	ldrb	w1, [x23, #2]
    6ef8:	ldr	w2, [x20]
    6efc:	cbnz	w1, 6f08 <d_print_comp_inner+0x2ab8>
    6f00:	cmp	w2, #0x3
    6f04:	b.eq	7f00 <d_print_comp_inner+0x3ab0>  // b.none
    6f08:	cmp	w2, #0x39
    6f0c:	b.eq	7fa8 <d_print_comp_inner+0x3b58>  // b.none
    6f10:	cmp	w0, #0x73
    6f14:	b.ne	6fe4 <d_print_comp_inner+0x2b94>  // b.any
    6f18:	ldrb	w1, [x23, #1]
    6f1c:	cmp	w1, #0x5a
    6f20:	b.ne	7030 <d_print_comp_inner+0x2be0>  // b.any
    6f24:	ldrb	w3, [x23, #2]
    6f28:	cbnz	w3, 7030 <d_print_comp_inner+0x2be0>
    6f2c:	mov	x1, x20
    6f30:	mov	x0, x19
    6f34:	bl	b28 <d_find_pack>
    6f38:	cbnz	x0, 6f54 <d_print_comp_inner+0x2b04>
    6f3c:	b	6f60 <d_print_comp_inner+0x2b10>
    6f40:	ldr	x1, [x0, #8]
    6f44:	cbz	x1, 6f60 <d_print_comp_inner+0x2b10>
    6f48:	ldr	x0, [x0, #16]
    6f4c:	add	w3, w3, #0x1
    6f50:	cbz	x0, 6f60 <d_print_comp_inner+0x2b10>
    6f54:	ldr	w1, [x0]
    6f58:	cmp	w1, #0x2f
    6f5c:	b.eq	6f40 <d_print_comp_inner+0x2af0>  // b.none
    6f60:	mov	w2, w3
    6f64:	adrp	x1, 0 <d_make_comp>
    6f68:	add	x1, x1, #0x0
    6f6c:	add	x20, sp, #0x60
    6f70:	mov	x0, x20
    6f74:	bl	0 <sprintf>
    6f78:	mov	x0, x20
    6f7c:	bl	0 <strlen>
    6f80:	cbz	x0, 80b4 <d_print_comp_inner+0x3c64>
    6f84:	add	x22, x20, x0
    6f88:	ldr	x1, [x19, #256]
    6f8c:	b	6fb0 <d_print_comp_inner+0x2b60>
    6f90:	mov	x0, x1
    6f94:	add	x1, x1, #0x1
    6f98:	str	x1, [x19, #256]
    6f9c:	add	x20, x20, #0x1
    6fa0:	strb	w21, [x19, x0]
    6fa4:	cmp	x20, x22
    6fa8:	strb	w21, [x19, #264]
    6fac:	b.eq	7eb8 <d_print_comp_inner+0x3a68>  // b.none
    6fb0:	ldrb	w21, [x20]
    6fb4:	cmp	x1, #0xff
    6fb8:	b.ne	6f90 <d_print_comp_inner+0x2b40>  // b.any
    6fbc:	ldp	x3, x2, [x19, #272]
    6fc0:	strb	wzr, [x19, #255]
    6fc4:	mov	x0, x19
    6fc8:	blr	x3
    6fcc:	ldr	x2, [x19, #320]
    6fd0:	mov	x1, #0x1                   	// #1
    6fd4:	mov	x0, #0x0                   	// #0
    6fd8:	add	x2, x2, x1
    6fdc:	str	x2, [x19, #320]
    6fe0:	b	6f98 <d_print_comp_inner+0x2b48>
    6fe4:	mov	x0, x19
    6fe8:	mov	x2, x22
    6fec:	mov	w1, w21
    6ff0:	bl	9400 <d_print_expr_op>
    6ff4:	ldrb	w0, [x23]
    6ff8:	cmp	w0, #0x67
    6ffc:	b.ne	70c0 <d_print_comp_inner+0x2c70>  // b.any
    7000:	ldrb	w1, [x23, #1]
    7004:	cmp	w1, #0x73
    7008:	b.ne	70c0 <d_print_comp_inner+0x2c70>  // b.any
    700c:	ldrb	w1, [x23, #2]
    7010:	cbnz	w1, 70c0 <d_print_comp_inner+0x2c70>
    7014:	mov	w1, w21
    7018:	mov	x2, x20
    701c:	mov	x0, x19
    7020:	bl	8260 <d_print_comp>
    7024:	ldp	x21, x22, [sp, #32]
    7028:	ldp	x23, x24, [sp, #48]
    702c:	b	44b4 <d_print_comp_inner+0x64>
    7030:	cmp	w0, #0x73
    7034:	b.ne	6fe4 <d_print_comp_inner+0x2b94>  // b.any
    7038:	ldrb	w0, [x23, #1]
    703c:	cmp	w0, #0x50
    7040:	b.ne	6fe4 <d_print_comp_inner+0x2b94>  // b.any
    7044:	ldrb	w0, [x23, #2]
    7048:	mov	w3, #0x0                   	// #0
    704c:	cbz	w0, 7060 <d_print_comp_inner+0x2c10>
    7050:	b	6fe4 <d_print_comp_inner+0x2b94>
    7054:	add	w3, w3, #0x1
    7058:	ldr	x20, [x20, #16]
    705c:	cbz	x20, 7b24 <d_print_comp_inner+0x36d4>
    7060:	ldr	w0, [x20]
    7064:	cmp	w0, #0x2f
    7068:	b.ne	7b24 <d_print_comp_inner+0x36d4>  // b.any
    706c:	ldr	x0, [x20, #8]
    7070:	cbz	x0, 7b24 <d_print_comp_inner+0x36d4>
    7074:	ldr	w1, [x0]
    7078:	cmp	w1, #0x4b
    707c:	b.ne	7054 <d_print_comp_inner+0x2c04>  // b.any
    7080:	ldr	x1, [x0, #8]
    7084:	mov	x0, x19
    7088:	bl	b28 <d_find_pack>
    708c:	mov	w1, #0x0                   	// #0
    7090:	cbnz	x0, 70ac <d_print_comp_inner+0x2c5c>
    7094:	b	70b8 <d_print_comp_inner+0x2c68>
    7098:	ldr	x2, [x0, #8]
    709c:	cbz	x2, 70b8 <d_print_comp_inner+0x2c68>
    70a0:	ldr	x0, [x0, #16]
    70a4:	add	w1, w1, #0x1
    70a8:	cbz	x0, 70b8 <d_print_comp_inner+0x2c68>
    70ac:	ldr	w2, [x0]
    70b0:	cmp	w2, #0x2f
    70b4:	b.eq	7098 <d_print_comp_inner+0x2c48>  // b.none
    70b8:	add	w3, w3, w1
    70bc:	b	7058 <d_print_comp_inner+0x2c08>
    70c0:	cmp	w0, #0x73
    70c4:	b.ne	6054 <d_print_comp_inner+0x1c04>  // b.any
    70c8:	ldrb	w0, [x23, #1]
    70cc:	cmp	w0, #0x74
    70d0:	b.ne	6054 <d_print_comp_inner+0x1c04>  // b.any
    70d4:	ldrb	w0, [x23, #2]
    70d8:	cbnz	w0, 6054 <d_print_comp_inner+0x1c04>
    70dc:	ldr	x1, [x19, #256]
    70e0:	cmp	x1, #0xff
    70e4:	b.ne	7108 <d_print_comp_inner+0x2cb8>  // b.any
    70e8:	ldp	x3, x2, [x19, #272]
    70ec:	strb	wzr, [x19, #255]
    70f0:	mov	x0, x19
    70f4:	blr	x3
    70f8:	ldr	x0, [x19, #320]
    70fc:	mov	x1, #0x0                   	// #0
    7100:	add	x0, x0, #0x1
    7104:	str	x0, [x19, #320]
    7108:	add	x0, x1, #0x1
    710c:	str	x0, [x19, #256]
    7110:	mov	w0, #0x28                  	// #40
    7114:	strb	w0, [x19, x1]
    7118:	strb	w0, [x19, #264]
    711c:	mov	w1, w21
    7120:	mov	x2, x20
    7124:	mov	x0, x19
    7128:	bl	8260 <d_print_comp>
    712c:	ldr	x1, [x19, #256]
    7130:	cmp	x1, #0xff
    7134:	b.ne	7158 <d_print_comp_inner+0x2d08>  // b.any
    7138:	ldp	x3, x2, [x19, #272]
    713c:	strb	wzr, [x19, #255]
    7140:	mov	x0, x19
    7144:	blr	x3
    7148:	ldr	x0, [x19, #320]
    714c:	mov	x1, #0x0                   	// #0
    7150:	add	x0, x0, #0x1
    7154:	str	x0, [x19, #320]
    7158:	add	x0, x1, #0x1
    715c:	str	x0, [x19, #256]
    7160:	mov	w0, #0x29                  	// #41
    7164:	strb	w0, [x19, x1]
    7168:	strb	w0, [x19, #264]
    716c:	ldp	x21, x22, [sp, #32]
    7170:	ldp	x23, x24, [sp, #48]
    7174:	b	44b4 <d_print_comp_inner+0x64>
    7178:	ldr	x2, [x2, #8]
    717c:	mov	x0, x19
    7180:	mov	w1, w21
    7184:	bl	8260 <d_print_comp>
    7188:	ldr	x0, [x19, #368]
    718c:	cbz	x0, 7198 <d_print_comp_inner+0x2d48>
    7190:	ldr	x0, [sp, #96]
    7194:	str	x0, [x19, #288]
    7198:	ldr	x1, [x19, #256]
    719c:	ldrb	w2, [x19, #264]
    71a0:	mov	x0, x1
    71a4:	cmp	w2, #0x3c
    71a8:	b.eq	7c00 <d_print_comp_inner+0x37b0>  // b.none
    71ac:	add	x1, x0, #0x1
    71b0:	cmp	x0, #0xff
    71b4:	b.ne	71e0 <d_print_comp_inner+0x2d90>  // b.any
    71b8:	ldp	x3, x2, [x19, #272]
    71bc:	strb	wzr, [x19, #255]
    71c0:	mov	x1, x0
    71c4:	mov	x0, x19
    71c8:	blr	x3
    71cc:	ldr	x2, [x19, #320]
    71d0:	mov	x1, #0x1                   	// #1
    71d4:	mov	x0, #0x0                   	// #0
    71d8:	add	x2, x2, x1
    71dc:	str	x2, [x19, #320]
    71e0:	str	x1, [x19, #256]
    71e4:	mov	w2, #0x3c                  	// #60
    71e8:	strb	w2, [x19, x0]
    71ec:	mov	w1, w21
    71f0:	strb	w2, [x19, #264]
    71f4:	mov	x0, x19
    71f8:	ldr	x2, [x20, #8]
    71fc:	ldr	x2, [x2, #16]
    7200:	bl	8260 <d_print_comp>
    7204:	ldrb	w0, [x19, #264]
    7208:	cmp	w0, #0x3e
    720c:	b.eq	7c44 <d_print_comp_inner+0x37f4>  // b.none
    7210:	ldr	x0, [x19, #256]
    7214:	add	x1, x0, #0x1
    7218:	cmp	x0, #0xff
    721c:	b.ne	7248 <d_print_comp_inner+0x2df8>  // b.any
    7220:	ldp	x3, x2, [x19, #272]
    7224:	strb	wzr, [x19, #255]
    7228:	mov	x1, x0
    722c:	mov	x0, x19
    7230:	blr	x3
    7234:	ldr	x2, [x19, #320]
    7238:	mov	x1, #0x1                   	// #1
    723c:	mov	x0, #0x0                   	// #0
    7240:	add	x2, x2, x1
    7244:	str	x2, [x19, #320]
    7248:	str	x1, [x19, #256]
    724c:	mov	w1, #0x3e                  	// #62
    7250:	strb	w1, [x19, x0]
    7254:	strb	w1, [x19, #264]
    7258:	ldp	x21, x22, [sp, #32]
    725c:	ldp	x23, x24, [sp, #48]
    7260:	b	44b4 <d_print_comp_inner+0x64>
    7264:	mov	x2, x20
    7268:	mov	w1, w21
    726c:	mov	x0, x19
    7270:	bl	82f8 <d_print_mod>
    7274:	b	4758 <d_print_comp_inner+0x308>
    7278:	adrp	x24, 0 <d_make_comp>
    727c:	add	x24, x24, #0x0
    7280:	adrp	x22, 250 <d_append_buffer+0x78>
    7284:	add	x24, x24, #0x5
    7288:	add	x22, x22, #0x0
    728c:	mov	w23, #0x5f                  	// #95
    7290:	ldr	x1, [x19, #256]
    7294:	b	72b8 <d_print_comp_inner+0x2e68>
    7298:	mov	x0, x1
    729c:	add	x1, x1, #0x1
    72a0:	str	x1, [x19, #256]
    72a4:	cmp	x24, x22
    72a8:	strb	w23, [x19, x0]
    72ac:	strb	w23, [x19, #264]
    72b0:	b.eq	4f18 <d_print_comp_inner+0xac8>  // b.none
    72b4:	ldrb	w23, [x22], #1
    72b8:	cmp	x1, #0xff
    72bc:	b.ne	7298 <d_print_comp_inner+0x2e48>  // b.any
    72c0:	ldp	x3, x2, [x19, #272]
    72c4:	strb	wzr, [x19, #255]
    72c8:	mov	x0, x19
    72cc:	blr	x3
    72d0:	ldr	x2, [x19, #320]
    72d4:	mov	x1, #0x1                   	// #1
    72d8:	mov	x0, #0x0                   	// #0
    72dc:	add	x2, x2, x1
    72e0:	str	x2, [x19, #320]
    72e4:	b	72a0 <d_print_comp_inner+0x2e50>
    72e8:	mov	x23, #0x0                   	// #0
    72ec:	mov	w22, #0x3a                  	// #58
    72f0:	ldr	x1, [x19, #256]
    72f4:	b	7314 <d_print_comp_inner+0x2ec4>
    72f8:	mov	x0, x1
    72fc:	add	x1, x1, #0x1
    7300:	str	x1, [x19, #256]
    7304:	strb	w22, [x19, x0]
    7308:	strb	w22, [x19, #264]
    730c:	cbnz	x23, 46fc <d_print_comp_inner+0x2ac>
    7310:	mov	x23, #0x1                   	// #1
    7314:	cmp	x1, #0xff
    7318:	b.ne	72f8 <d_print_comp_inner+0x2ea8>  // b.any
    731c:	ldp	x3, x2, [x19, #272]
    7320:	strb	wzr, [x19, #255]
    7324:	mov	x0, x19
    7328:	blr	x3
    732c:	ldr	x2, [x19, #320]
    7330:	mov	x1, #0x1                   	// #1
    7334:	mov	x0, #0x0                   	// #0
    7338:	add	x2, x2, x1
    733c:	str	x2, [x19, #320]
    7340:	b	7300 <d_print_comp_inner+0x2eb0>
    7344:	ldr	x1, [x19, #256]
    7348:	cmp	x1, #0xff
    734c:	b.ne	7370 <d_print_comp_inner+0x2f20>  // b.any
    7350:	ldp	x3, x2, [x19, #272]
    7354:	strb	wzr, [x19, #255]
    7358:	mov	x0, x19
    735c:	blr	x3
    7360:	ldr	x0, [x19, #320]
    7364:	mov	x1, #0x0                   	// #0
    7368:	add	x0, x0, #0x1
    736c:	str	x0, [x19, #320]
    7370:	add	x0, x1, #0x1
    7374:	str	x0, [x19, #256]
    7378:	mov	w0, #0x5b                  	// #91
    737c:	strb	w0, [x19, x1]
    7380:	strb	w0, [x19, #264]
    7384:	mov	w1, w21
    7388:	mov	x0, x19
    738c:	ldr	x2, [x20, #16]
    7390:	bl	8260 <d_print_comp>
    7394:	ldr	x1, [x19, #256]
    7398:	cmp	x1, #0xff
    739c:	b.ne	73c0 <d_print_comp_inner+0x2f70>  // b.any
    73a0:	ldp	x3, x2, [x19, #272]
    73a4:	strb	wzr, [x19, #255]
    73a8:	mov	x0, x19
    73ac:	blr	x3
    73b0:	ldr	x0, [x19, #320]
    73b4:	mov	x1, #0x0                   	// #0
    73b8:	add	x0, x0, #0x1
    73bc:	str	x0, [x19, #320]
    73c0:	add	x0, x1, #0x1
    73c4:	str	x0, [x19, #256]
    73c8:	mov	w0, #0x5d                  	// #93
    73cc:	strb	w0, [x19, x1]
    73d0:	strb	w0, [x19, #264]
    73d4:	ldp	x21, x22, [sp, #32]
    73d8:	ldp	x23, x24, [sp, #48]
    73dc:	b	44b4 <d_print_comp_inner+0x64>
    73e0:	ldr	x0, [x19, #256]
    73e4:	cmp	x0, #0xff
    73e8:	b.ne	7410 <d_print_comp_inner+0x2fc0>  // b.any
    73ec:	ldp	x3, x2, [x19, #272]
    73f0:	strb	wzr, [x19, #255]
    73f4:	mov	x1, x0
    73f8:	mov	x0, x19
    73fc:	blr	x3
    7400:	ldr	x1, [x19, #320]
    7404:	mov	x0, #0x0                   	// #0
    7408:	add	x1, x1, #0x1
    740c:	str	x1, [x19, #320]
    7410:	add	x1, x0, #0x1
    7414:	str	x1, [x19, #256]
    7418:	mov	w2, #0x20                  	// #32
    741c:	strb	w2, [x19, x0]
    7420:	strb	w2, [x19, #264]
    7424:	b	5948 <d_print_comp_inner+0x14f8>
    7428:	ldr	x0, [x19, #256]
    742c:	cmp	x0, #0xff
    7430:	b.ne	7458 <d_print_comp_inner+0x3008>  // b.any
    7434:	ldp	x3, x2, [x19, #272]
    7438:	strb	wzr, [x19, #255]
    743c:	mov	x1, x0
    7440:	mov	x0, x19
    7444:	blr	x3
    7448:	ldr	x1, [x19, #320]
    744c:	mov	x0, #0x0                   	// #0
    7450:	add	x1, x1, #0x1
    7454:	str	x1, [x19, #320]
    7458:	add	x1, x0, #0x1
    745c:	str	x1, [x19, #256]
    7460:	mov	w2, #0x20                  	// #32
    7464:	strb	w2, [x19, x0]
    7468:	strb	w2, [x19, #264]
    746c:	b	58e8 <d_print_comp_inner+0x1498>
    7470:	add	x2, x20, #0x10
    7474:	mov	w1, w22
    7478:	mov	x0, x19
    747c:	bl	8af8 <d_print_function_type.isra.0>
    7480:	ldr	x2, [x20, #8]
    7484:	cbz	x2, 7cb0 <d_print_comp_inner+0x3860>
    7488:	mov	w1, w22
    748c:	mov	x0, x19
    7490:	bl	8260 <d_print_comp>
    7494:	ldp	x21, x22, [sp, #32]
    7498:	ldp	x23, x24, [sp, #48]
    749c:	b	44b4 <d_print_comp_inner+0x64>
    74a0:	ldp	x3, x2, [x19, #272]
    74a4:	strb	wzr, [x19, #255]
    74a8:	mov	x0, x19
    74ac:	blr	x3
    74b0:	ldr	x0, [x19, #320]
    74b4:	mov	w1, #0x29                  	// #41
    74b8:	strb	w1, [x19]
    74bc:	strb	w1, [x19, #264]
    74c0:	mov	x1, #0x1                   	// #1
    74c4:	add	x0, x0, x1
    74c8:	str	x1, [x19, #256]
    74cc:	str	x0, [x19, #320]
    74d0:	ldr	w0, [x20]
    74d4:	cmp	w0, #0x3e
    74d8:	b.ne	4624 <d_print_comp_inner+0x1d4>  // b.any
    74dc:	ldr	x1, [x19, #256]
    74e0:	mov	w0, #0x2d                  	// #45
    74e4:	add	x2, x1, #0x1
    74e8:	str	x2, [x19, #256]
    74ec:	strb	w0, [x19, x1]
    74f0:	strb	w0, [x19, #264]
    74f4:	b	4624 <d_print_comp_inner+0x1d4>
    74f8:	ldp	x21, x22, [sp, #32]
    74fc:	ldp	x23, x24, [sp, #48]
    7500:	ldp	x25, x26, [sp, #64]
    7504:	str	x4, [x19, #296]
    7508:	str	w1, [x19, #304]
    750c:	b	44b4 <d_print_comp_inner+0x64>
    7510:	ldp	x21, x22, [sp, #32]
    7514:	ldp	x23, x24, [sp, #48]
    7518:	b	44b4 <d_print_comp_inner+0x64>
    751c:	ldp	x21, x22, [sp, #32]
    7520:	ldp	x23, x24, [sp, #48]
    7524:	b	44b4 <d_print_comp_inner+0x64>
    7528:	mov	w22, #0x0                   	// #0
    752c:	b	4688 <d_print_comp_inner+0x238>
    7530:	ldr	x0, [x19, #256]
    7534:	cmp	x0, x22
    7538:	b.eq	7cec <d_print_comp_inner+0x389c>  // b.none
    753c:	ldp	x21, x22, [sp, #32]
    7540:	ldp	x23, x24, [sp, #48]
    7544:	b	44b4 <d_print_comp_inner+0x64>
    7548:	ldr	x2, [x20, #8]
    754c:	mov	w1, w21
    7550:	mov	x0, x19
    7554:	bl	8260 <d_print_comp>
    7558:	ldp	x21, x22, [sp, #32]
    755c:	ldp	x23, x24, [sp, #48]
    7560:	b	44b4 <d_print_comp_inner+0x64>
    7564:	cmp	x3, #0xff
    7568:	b.ne	74dc <d_print_comp_inner+0x308c>  // b.any
    756c:	ldp	x4, x2, [x19, #272]
    7570:	strb	wzr, [x19, #255]
    7574:	mov	x0, x19
    7578:	mov	x1, x3
    757c:	blr	x4
    7580:	str	xzr, [x19, #256]
    7584:	ldr	x0, [x19, #320]
    7588:	add	x0, x0, #0x1
    758c:	str	x0, [x19, #320]
    7590:	b	74dc <d_print_comp_inner+0x308c>
    7594:	ldp	x21, x22, [sp, #32]
    7598:	ldp	x23, x24, [sp, #48]
    759c:	b	44b4 <d_print_comp_inner+0x64>
    75a0:	adrp	x24, 0 <d_make_comp>
    75a4:	add	x24, x24, #0x0
    75a8:	adrp	x22, 50 <d_make_comp+0x50>
    75ac:	add	x24, x24, #0xd
    75b0:	add	x22, x22, #0x0
    75b4:	mov	w20, #0x7b                  	// #123
    75b8:	ldr	x1, [x19, #256]
    75bc:	b	75e0 <d_print_comp_inner+0x3190>
    75c0:	mov	x0, x1
    75c4:	add	x1, x1, #0x1
    75c8:	str	x1, [x19, #256]
    75cc:	cmp	x24, x22
    75d0:	strb	w20, [x19, x0]
    75d4:	strb	w20, [x19, #264]
    75d8:	b.eq	7610 <d_print_comp_inner+0x31c0>  // b.none
    75dc:	ldrb	w20, [x22], #1
    75e0:	cmp	x1, #0xff
    75e4:	b.ne	75c0 <d_print_comp_inner+0x3170>  // b.any
    75e8:	ldp	x3, x2, [x19, #272]
    75ec:	strb	wzr, [x19, #255]
    75f0:	mov	x0, x19
    75f4:	blr	x3
    75f8:	ldr	x2, [x19, #320]
    75fc:	mov	x1, #0x1                   	// #1
    7600:	mov	x0, #0x0                   	// #0
    7604:	add	x2, x2, x1
    7608:	str	x2, [x19, #320]
    760c:	b	75c8 <d_print_comp_inner+0x3178>
    7610:	ldr	w2, [x23, #16]
    7614:	adrp	x1, 0 <d_make_comp>
    7618:	add	x1, x1, #0x0
    761c:	add	x20, sp, #0x60
    7620:	add	w2, w2, #0x1
    7624:	mov	x0, x20
    7628:	bl	0 <sprintf>
    762c:	mov	x0, x20
    7630:	bl	0 <strlen>
    7634:	ldr	x1, [x19, #256]
    7638:	cbz	x0, 7698 <d_print_comp_inner+0x3248>
    763c:	add	x24, x20, x0
    7640:	b	7664 <d_print_comp_inner+0x3214>
    7644:	mov	x0, x1
    7648:	add	x1, x1, #0x1
    764c:	str	x1, [x19, #256]
    7650:	add	x20, x20, #0x1
    7654:	strb	w22, [x19, x0]
    7658:	cmp	x24, x20
    765c:	strb	w22, [x19, #264]
    7660:	b.eq	7698 <d_print_comp_inner+0x3248>  // b.none
    7664:	ldrb	w22, [x20]
    7668:	cmp	x1, #0xff
    766c:	b.ne	7644 <d_print_comp_inner+0x31f4>  // b.any
    7670:	ldp	x3, x2, [x19, #272]
    7674:	strb	wzr, [x19, #255]
    7678:	mov	x0, x19
    767c:	blr	x3
    7680:	ldr	x2, [x19, #320]
    7684:	mov	x1, #0x1                   	// #1
    7688:	mov	x0, #0x0                   	// #0
    768c:	add	x2, x2, x1
    7690:	str	x2, [x19, #320]
    7694:	b	764c <d_print_comp_inner+0x31fc>
    7698:	adrp	x20, 0 <d_make_comp>
    769c:	add	x20, x20, #0x0
    76a0:	add	x24, x20, #0x3
    76a4:	mov	w22, #0x7d                  	// #125
    76a8:	b	76d0 <d_print_comp_inner+0x3280>
    76ac:	mov	x0, x1
    76b0:	add	x1, x1, #0x1
    76b4:	str	x1, [x19, #256]
    76b8:	add	x20, x20, #0x1
    76bc:	strb	w22, [x19, x0]
    76c0:	cmp	x24, x20
    76c4:	strb	w22, [x19, #264]
    76c8:	b.eq	7700 <d_print_comp_inner+0x32b0>  // b.none
    76cc:	ldrb	w22, [x20]
    76d0:	cmp	x1, #0xff
    76d4:	b.ne	76ac <d_print_comp_inner+0x325c>  // b.any
    76d8:	ldp	x3, x2, [x19, #272]
    76dc:	strb	wzr, [x19, #255]
    76e0:	mov	x0, x19
    76e4:	blr	x3
    76e8:	ldr	x2, [x19, #320]
    76ec:	mov	x1, #0x1                   	// #1
    76f0:	mov	x0, #0x0                   	// #0
    76f4:	add	x2, x2, x1
    76f8:	str	x2, [x19, #320]
    76fc:	b	76b4 <d_print_comp_inner+0x3264>
    7700:	ldr	x23, [x23, #8]
    7704:	b	470c <d_print_comp_inner+0x2bc>
    7708:	ldr	x25, [x25, #16]
    770c:	ldr	w5, [x25]
    7710:	cmp	w5, #0x47
    7714:	b.eq	7dac <d_print_comp_inner+0x395c>  // b.none
    7718:	ubfiz	x3, x24, #5, #32
    771c:	sub	w0, w5, #0x1c
    7720:	mov	x1, #0x1f                  	// #31
    7724:	add	x3, x23, x3
    7728:	cmp	w0, #0x34
    772c:	mov	x2, #0x1                   	// #1
    7730:	movk	x1, #0x1a, lsl #48
    7734:	b.hi	57d4 <d_print_comp_inner+0x1384>  // b.pmore
    7738:	lsl	x0, x2, x0
    773c:	tst	x0, x1
    7740:	b.eq	57d4 <d_print_comp_inner+0x1384>  // b.none
    7744:	cmp	w24, #0x4
    7748:	b.eq	7828 <d_print_comp_inner+0x33d8>  // b.none
    774c:	ldp	x8, x9, [x3, #-32]
    7750:	stur	x25, [x3, #-24]
    7754:	ldp	x4, x5, [x3, #-16]
    7758:	stur	wzr, [x3, #-16]
    775c:	stp	x8, x9, [x3]
    7760:	sub	x0, x3, #0x20
    7764:	add	w24, w24, #0x1
    7768:	ldr	x25, [x25, #8]
    776c:	stp	x4, x5, [x3, #16]
    7770:	ldr	w5, [x25]
    7774:	stp	x6, x0, [x3, #-8]
    7778:	sub	w0, w5, #0x1c
    777c:	str	x3, [x19, #296]
    7780:	cmp	w0, #0x34
    7784:	add	x3, x3, #0x20
    7788:	b.ls	7738 <d_print_comp_inner+0x32e8>  // b.plast
    778c:	b	57d4 <d_print_comp_inner+0x1384>
    7790:	mov	w0, #0x1                   	// #1
    7794:	ldp	x21, x22, [sp, #32]
    7798:	ldp	x23, x24, [sp, #48]
    779c:	str	w0, [x19, #304]
    77a0:	b	44b4 <d_print_comp_inner+0x64>
    77a4:	ldr	x4, [x19, #288]
    77a8:	add	x0, sp, #0x60
    77ac:	str	x0, [x19, #296]
    77b0:	mov	w1, w22
    77b4:	mov	x0, x19
    77b8:	stp	x3, x20, [sp, #96]
    77bc:	str	wzr, [sp, #112]
    77c0:	str	x4, [sp, #120]
    77c4:	bl	8260 <d_print_comp>
    77c8:	ldr	w0, [sp, #112]
    77cc:	ldr	x1, [sp, #96]
    77d0:	str	x1, [x19, #296]
    77d4:	cbnz	w0, 7ef4 <d_print_comp_inner+0x3aa4>
    77d8:	ldr	x1, [x19, #256]
    77dc:	cmp	x1, #0xff
    77e0:	b.ne	7808 <d_print_comp_inner+0x33b8>  // b.any
    77e4:	ldp	x3, x2, [x19, #272]
    77e8:	strb	wzr, [x19, #255]
    77ec:	mov	x0, x19
    77f0:	blr	x3
    77f4:	str	xzr, [x19, #256]
    77f8:	ldr	x0, [x19, #320]
    77fc:	mov	x1, #0x0                   	// #0
    7800:	add	x0, x0, #0x1
    7804:	str	x0, [x19, #320]
    7808:	add	x0, x1, #0x1
    780c:	str	x0, [x19, #256]
    7810:	mov	w0, #0x20                  	// #32
    7814:	strb	w0, [x19, x1]
    7818:	strb	w0, [x19, #264]
    781c:	ldr	x3, [x19, #296]
    7820:	b	4cac <d_print_comp_inner+0x85c>
    7824:	str	x3, [x19, #296]
    7828:	mov	w0, #0x1                   	// #1
    782c:	ldp	x21, x22, [sp, #32]
    7830:	ldp	x23, x24, [sp, #48]
    7834:	ldp	x25, x26, [sp, #64]
    7838:	str	w0, [x19, #304]
    783c:	b	44b4 <d_print_comp_inner+0x64>
    7840:	ldrb	w0, [x0]
    7844:	sub	w1, w0, #0x63
    7848:	sub	w0, w0, #0x72
    784c:	and	w1, w1, #0xff
    7850:	and	w0, w0, #0xff
    7854:	cmp	w1, #0x1
    7858:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    785c:	b.hi	5b0c <d_print_comp_inner+0x16bc>  // b.pmore
    7860:	mov	w1, w21
    7864:	mov	x0, x19
    7868:	bl	9400 <d_print_expr_op>
    786c:	ldr	x1, [x19, #256]
    7870:	cmp	x1, #0xff
    7874:	b.ne	789c <d_print_comp_inner+0x344c>  // b.any
    7878:	ldp	x3, x2, [x19, #272]
    787c:	strb	wzr, [x19, #255]
    7880:	mov	x0, x19
    7884:	blr	x3
    7888:	str	xzr, [x19, #256]
    788c:	ldr	x0, [x19, #320]
    7890:	mov	x1, #0x0                   	// #0
    7894:	add	x0, x0, #0x1
    7898:	str	x0, [x19, #320]
    789c:	add	x0, x1, #0x1
    78a0:	str	x0, [x19, #256]
    78a4:	mov	w0, #0x3c                  	// #60
    78a8:	strb	w0, [x19, x1]
    78ac:	strb	w0, [x19, #264]
    78b0:	mov	w1, w21
    78b4:	mov	x0, x19
    78b8:	mov	w22, #0x3e                  	// #62
    78bc:	ldr	x2, [x20, #16]
    78c0:	mov	x23, #0x0                   	// #0
    78c4:	ldr	x2, [x2, #8]
    78c8:	bl	8260 <d_print_comp>
    78cc:	ldr	x1, [x19, #256]
    78d0:	b	78f4 <d_print_comp_inner+0x34a4>
    78d4:	mov	x0, x1
    78d8:	add	x1, x1, #0x1
    78dc:	str	x1, [x19, #256]
    78e0:	strb	w22, [x19, x0]
    78e4:	strb	w22, [x19, #264]
    78e8:	mov	w22, #0x28                  	// #40
    78ec:	cbnz	x23, 7a7c <d_print_comp_inner+0x362c>
    78f0:	mov	x23, #0x1                   	// #1
    78f4:	cmp	x1, #0xff
    78f8:	b.ne	78d4 <d_print_comp_inner+0x3484>  // b.any
    78fc:	ldp	x3, x2, [x19, #272]
    7900:	strb	wzr, [x19, #255]
    7904:	mov	x0, x19
    7908:	blr	x3
    790c:	ldr	x2, [x19, #320]
    7910:	mov	x1, #0x1                   	// #1
    7914:	mov	x0, #0x0                   	// #0
    7918:	add	x2, x2, x1
    791c:	str	x2, [x19, #320]
    7920:	b	78dc <d_print_comp_inner+0x348c>
    7924:	ldr	w4, [x19, #344]
    7928:	ldr	x5, [x19, #336]
    792c:	cmp	w4, #0x0
    7930:	b.le	7f24 <d_print_comp_inner+0x3ad4>
    7934:	sub	w3, w4, #0x1
    7938:	add	x1, x5, #0x10
    793c:	mov	x2, x5
    7940:	add	x3, x1, w3, uxtw #4
    7944:	b	7954 <d_print_comp_inner+0x3504>
    7948:	add	x2, x2, #0x10
    794c:	cmp	x3, x2
    7950:	b.eq	7f24 <d_print_comp_inner+0x3ad4>  // b.none
    7954:	ldr	x1, [x2]
    7958:	cmp	x0, x1
    795c:	b.ne	7948 <d_print_comp_inner+0x34f8>  // b.any
    7960:	ldr	x4, [x19, #328]
    7964:	mov	x1, x4
    7968:	cbnz	x4, 7984 <d_print_comp_inner+0x3534>
    796c:	b	7d88 <d_print_comp_inner+0x3938>
    7970:	cmp	x3, x20
    7974:	ccmp	x4, x1, #0x4, eq  // eq = none
    7978:	b.ne	7990 <d_print_comp_inner+0x3540>  // b.any
    797c:	ldr	x1, [x1, #8]
    7980:	cbz	x1, 7d88 <d_print_comp_inner+0x3938>
    7984:	ldr	x3, [x1]
    7988:	cmp	x3, x0
    798c:	b.ne	7970 <d_print_comp_inner+0x3520>  // b.any
    7990:	add	x1, x0, #0x8
    7994:	mov	x0, x19
    7998:	bl	af8 <d_lookup_template_argument.isra.0>
    799c:	cbz	x0, 44e0 <d_print_comp_inner+0x90>
    79a0:	mov	w22, #0x0                   	// #0
    79a4:	ldr	w1, [x0]
    79a8:	cmp	w1, #0x2f
    79ac:	b.ne	4664 <d_print_comp_inner+0x214>  // b.any
    79b0:	ldr	w1, [x19, #316]
    79b4:	tbnz	w1, #31, 80c0 <d_print_comp_inner+0x3c70>
    79b8:	bl	ab8 <d_index_template_argument.part.0>
    79bc:	cbz	x0, 80d4 <d_print_comp_inner+0x3c84>
    79c0:	ldr	w1, [x0]
    79c4:	b	4664 <d_print_comp_inner+0x214>
    79c8:	ldr	x2, [x20, #8]
    79cc:	add	x3, x20, #0x10
    79d0:	mov	w1, w21
    79d4:	mov	x0, x19
    79d8:	bl	95b0 <d_maybe_print_fold_expression.isra.0>
    79dc:	cbnz	w0, 7eac <d_print_comp_inner+0x3a5c>
    79e0:	ldp	x24, x3, [x20, #8]
    79e4:	adrp	x1, 0 <d_make_comp>
    79e8:	add	x1, x1, #0x0
    79ec:	ldr	x0, [x24, #8]
    79f0:	ldp	x22, x2, [x3, #8]
    79f4:	ldr	x0, [x0]
    79f8:	ldp	x23, x20, [x2, #8]
    79fc:	bl	0 <strcmp>
    7a00:	cbnz	w0, 7e0c <d_print_comp_inner+0x39bc>
    7a04:	mov	x2, x22
    7a08:	mov	w1, w21
    7a0c:	mov	x0, x19
    7a10:	bl	94b8 <d_print_subexpr>
    7a14:	mov	x2, x24
    7a18:	mov	w1, w21
    7a1c:	mov	x0, x19
    7a20:	bl	9400 <d_print_expr_op>
    7a24:	mov	x2, x23
    7a28:	mov	w1, w21
    7a2c:	mov	x0, x19
    7a30:	bl	94b8 <d_print_subexpr>
    7a34:	mov	x0, x19
    7a38:	mov	x2, #0x3                   	// #3
    7a3c:	adrp	x1, 0 <d_make_comp>
    7a40:	add	x1, x1, #0x0
    7a44:	bl	1d8 <d_append_buffer>
    7a48:	mov	w1, w21
    7a4c:	mov	x2, x20
    7a50:	mov	x0, x19
    7a54:	bl	94b8 <d_print_subexpr>
    7a58:	ldp	x21, x22, [sp, #32]
    7a5c:	ldp	x23, x24, [sp, #48]
    7a60:	b	44b4 <d_print_comp_inner+0x64>
    7a64:	sub	w1, w0, #0x61
    7a68:	and	w1, w1, #0xff
    7a6c:	cmp	w1, #0x5
    7a70:	b.hi	8030 <d_print_comp_inner+0x3be0>  // b.pmore
    7a74:	sub	w0, w0, #0x57
    7a78:	b	6a2c <d_print_comp_inner+0x25dc>
    7a7c:	ldr	x2, [x20, #16]
    7a80:	mov	w1, w21
    7a84:	mov	x0, x19
    7a88:	ldr	x2, [x2, #16]
    7a8c:	bl	8260 <d_print_comp>
    7a90:	ldr	x1, [x19, #256]
    7a94:	cmp	x1, #0xff
    7a98:	b.ne	7ac0 <d_print_comp_inner+0x3670>  // b.any
    7a9c:	ldp	x3, x2, [x19, #272]
    7aa0:	strb	wzr, [x19, #255]
    7aa4:	mov	x0, x19
    7aa8:	blr	x3
    7aac:	str	xzr, [x19, #256]
    7ab0:	ldr	x0, [x19, #320]
    7ab4:	mov	x1, #0x0                   	// #0
    7ab8:	add	x0, x0, #0x1
    7abc:	str	x0, [x19, #320]
    7ac0:	add	x0, x1, #0x1
    7ac4:	str	x0, [x19, #256]
    7ac8:	mov	w0, #0x29                  	// #41
    7acc:	strb	w0, [x19, x1]
    7ad0:	strb	w0, [x19, #264]
    7ad4:	ldp	x21, x22, [sp, #32]
    7ad8:	ldp	x23, x24, [sp, #48]
    7adc:	b	44b4 <d_print_comp_inner+0x64>
    7ae0:	ldr	w1, [x19, #316]
    7ae4:	tbnz	w1, #31, 6a8c <d_print_comp_inner+0x263c>
    7ae8:	bl	ab8 <d_index_template_argument.part.0>
    7aec:	mov	x2, x0
    7af0:	cbnz	x0, 6a8c <d_print_comp_inner+0x263c>
    7af4:	b	44e0 <d_print_comp_inner+0x90>
    7af8:	cmp	w1, #0x63
    7afc:	b.eq	7ec4 <d_print_comp_inner+0x3a74>  // b.none
    7b00:	mov	w1, w21
    7b04:	mov	x0, x19
    7b08:	bl	9400 <d_print_expr_op>
    7b0c:	ldr	x2, [x20, #16]
    7b10:	mov	w1, w21
    7b14:	mov	x0, x19
    7b18:	ldr	x2, [x2, #16]
    7b1c:	bl	94b8 <d_print_subexpr>
    7b20:	b	5c40 <d_print_comp_inner+0x17f0>
    7b24:	mov	w2, w3
    7b28:	adrp	x1, 0 <d_make_comp>
    7b2c:	add	x1, x1, #0x0
    7b30:	add	x20, sp, #0x60
    7b34:	mov	x0, x20
    7b38:	bl	0 <sprintf>
    7b3c:	mov	x0, x20
    7b40:	bl	0 <strlen>
    7b44:	cbz	x0, 81a0 <d_print_comp_inner+0x3d50>
    7b48:	add	x22, x20, x0
    7b4c:	ldr	x1, [x19, #256]
    7b50:	b	7b74 <d_print_comp_inner+0x3724>
    7b54:	mov	x0, x1
    7b58:	add	x1, x1, #0x1
    7b5c:	str	x1, [x19, #256]
    7b60:	add	x20, x20, #0x1
    7b64:	strb	w21, [x19, x0]
    7b68:	cmp	x22, x20
    7b6c:	strb	w21, [x19, #264]
    7b70:	b.eq	7bb4 <d_print_comp_inner+0x3764>  // b.none
    7b74:	ldrb	w21, [x20]
    7b78:	cmp	x1, #0xff
    7b7c:	b.ne	7b54 <d_print_comp_inner+0x3704>  // b.any
    7b80:	ldp	x3, x2, [x19, #272]
    7b84:	strb	wzr, [x19, #255]
    7b88:	mov	x0, x19
    7b8c:	blr	x3
    7b90:	ldr	x2, [x19, #320]
    7b94:	mov	x1, #0x1                   	// #1
    7b98:	mov	x0, #0x0                   	// #0
    7b9c:	add	x2, x2, x1
    7ba0:	str	x2, [x19, #320]
    7ba4:	b	7b5c <d_print_comp_inner+0x370c>
    7ba8:	ldp	x21, x22, [sp, #32]
    7bac:	ldp	x23, x24, [sp, #48]
    7bb0:	b	44b4 <d_print_comp_inner+0x64>
    7bb4:	ldp	x21, x22, [sp, #32]
    7bb8:	ldp	x23, x24, [sp, #48]
    7bbc:	b	44b4 <d_print_comp_inner+0x64>
    7bc0:	ldr	x0, [x22, #8]
    7bc4:	adrp	x1, 0 <d_make_comp>
    7bc8:	mov	x2, #0x6                   	// #6
    7bcc:	add	x1, x1, #0x0
    7bd0:	bl	0 <strncmp>
    7bd4:	cbnz	w0, 58c8 <d_print_comp_inner+0x1478>
    7bd8:	ldr	x2, [x20, #16]
    7bdc:	mov	w1, w21
    7be0:	mov	x0, x19
    7be4:	bl	8260 <d_print_comp>
    7be8:	mov	x0, x19
    7bec:	adrp	x1, 0 <d_make_comp>
    7bf0:	mov	x2, #0x2                   	// #2
    7bf4:	add	x1, x1, #0x0
    7bf8:	bl	1d8 <d_append_buffer>
    7bfc:	b	5988 <d_print_comp_inner+0x1538>
    7c00:	cmp	x1, #0xff
    7c04:	b.ne	7c2c <d_print_comp_inner+0x37dc>  // b.any
    7c08:	ldp	x3, x2, [x19, #272]
    7c0c:	strb	wzr, [x19, #255]
    7c10:	mov	x0, x19
    7c14:	blr	x3
    7c18:	str	xzr, [x19, #256]
    7c1c:	ldr	x0, [x19, #320]
    7c20:	mov	x1, #0x0                   	// #0
    7c24:	add	x0, x0, #0x1
    7c28:	str	x0, [x19, #320]
    7c2c:	add	x0, x1, #0x1
    7c30:	str	x0, [x19, #256]
    7c34:	mov	w2, #0x20                  	// #32
    7c38:	strb	w2, [x19, x1]
    7c3c:	strb	w2, [x19, #264]
    7c40:	b	71ac <d_print_comp_inner+0x2d5c>
    7c44:	ldr	x1, [x19, #256]
    7c48:	cmp	x1, #0xff
    7c4c:	b.ne	7c74 <d_print_comp_inner+0x3824>  // b.any
    7c50:	ldp	x3, x2, [x19, #272]
    7c54:	strb	wzr, [x19, #255]
    7c58:	mov	x0, x19
    7c5c:	blr	x3
    7c60:	str	xzr, [x19, #256]
    7c64:	ldr	x0, [x19, #320]
    7c68:	mov	x1, #0x0                   	// #0
    7c6c:	add	x0, x0, #0x1
    7c70:	str	x0, [x19, #320]
    7c74:	add	x0, x1, #0x1
    7c78:	str	x0, [x19, #256]
    7c7c:	mov	w2, #0x20                  	// #32
    7c80:	strb	w2, [x19, x1]
    7c84:	strb	w2, [x19, #264]
    7c88:	b	7214 <d_print_comp_inner+0x2dc4>
    7c8c:	ldp	x21, x22, [sp, #32]
    7c90:	ldp	x23, x24, [sp, #48]
    7c94:	b	44b4 <d_print_comp_inner+0x64>
    7c98:	ldp	x21, x22, [sp, #32]
    7c9c:	ldp	x23, x24, [sp, #48]
    7ca0:	b	44b4 <d_print_comp_inner+0x64>
    7ca4:	ldp	x21, x22, [sp, #32]
    7ca8:	ldp	x23, x24, [sp, #48]
    7cac:	b	44b4 <d_print_comp_inner+0x64>
    7cb0:	ldp	x21, x22, [sp, #32]
    7cb4:	ldp	x23, x24, [sp, #48]
    7cb8:	b	44b4 <d_print_comp_inner+0x64>
    7cbc:	ldr	x2, [x20, #8]
    7cc0:	mov	w1, w21
    7cc4:	mov	x0, x19
    7cc8:	bl	94b8 <d_print_subexpr>
    7ccc:	mov	x0, x19
    7cd0:	adrp	x1, 0 <d_make_comp>
    7cd4:	mov	x2, #0x3                   	// #3
    7cd8:	add	x1, x1, #0x0
    7cdc:	bl	1d8 <d_append_buffer>
    7ce0:	ldp	x21, x22, [sp, #32]
    7ce4:	ldp	x23, x24, [sp, #48]
    7ce8:	b	44b4 <d_print_comp_inner+0x64>
    7cec:	sub	x22, x22, #0x2
    7cf0:	ldp	x23, x24, [sp, #48]
    7cf4:	str	x22, [x19, #256]
    7cf8:	ldp	x21, x22, [sp, #32]
    7cfc:	b	44b4 <d_print_comp_inner+0x64>
    7d00:	ldr	x0, [x0, #8]
    7d04:	ldr	w1, [x0, #16]
    7d08:	cmp	w1, #0x1
    7d0c:	b.eq	8090 <d_print_comp_inner+0x3c40>  // b.none
    7d10:	ldp	x21, x22, [sp, #32]
    7d14:	ldp	x23, x24, [sp, #48]
    7d18:	b	44b4 <d_print_comp_inner+0x64>
    7d1c:	ldr	x1, [x0, #8]
    7d20:	ldr	w2, [x1, #16]
    7d24:	cmp	w2, #0x1
    7d28:	b.ne	5b30 <d_print_comp_inner+0x16e0>  // b.any
    7d2c:	ldr	x1, [x1, #8]
    7d30:	ldrb	w1, [x1]
    7d34:	cmp	w1, #0x3e
    7d38:	b.ne	5b30 <d_print_comp_inner+0x16e0>  // b.any
    7d3c:	ldr	x1, [x19, #256]
    7d40:	cmp	x1, #0xff
    7d44:	b.ne	7d6c <d_print_comp_inner+0x391c>  // b.any
    7d48:	ldp	x3, x2, [x19, #272]
    7d4c:	strb	wzr, [x19, #255]
    7d50:	mov	x0, x19
    7d54:	blr	x3
    7d58:	str	xzr, [x19, #256]
    7d5c:	ldr	x0, [x19, #320]
    7d60:	mov	x1, #0x0                   	// #0
    7d64:	add	x0, x0, #0x1
    7d68:	str	x0, [x19, #320]
    7d6c:	add	x0, x1, #0x1
    7d70:	str	x0, [x19, #256]
    7d74:	mov	w0, #0x28                  	// #40
    7d78:	strb	w0, [x19, x1]
    7d7c:	strb	w0, [x19, #264]
    7d80:	ldr	x0, [x20, #8]
    7d84:	b	5b30 <d_print_comp_inner+0x16e0>
    7d88:	ldr	x2, [x2, #8]
    7d8c:	add	x1, x0, #0x8
    7d90:	ldr	x23, [x19, #288]
    7d94:	str	x2, [x19, #288]
    7d98:	mov	x0, x19
    7d9c:	bl	af8 <d_lookup_template_argument.isra.0>
    7da0:	cbz	x0, 80d8 <d_print_comp_inner+0x3c88>
    7da4:	mov	w22, #0x1                   	// #1
    7da8:	b	79a4 <d_print_comp_inner+0x3554>
    7dac:	ldr	x25, [x25, #8]
    7db0:	cbz	x25, 7828 <d_print_comp_inner+0x33d8>
    7db4:	ldr	w5, [x25]
    7db8:	b	7718 <d_print_comp_inner+0x32c8>
    7dbc:	ldp	x21, x22, [sp, #32]
    7dc0:	ldp	x23, x24, [sp, #48]
    7dc4:	b	44b4 <d_print_comp_inner+0x64>
    7dc8:	ldp	x21, x22, [sp, #32]
    7dcc:	ldp	x23, x24, [sp, #48]
    7dd0:	b	44b4 <d_print_comp_inner+0x64>
    7dd4:	ldp	x21, x22, [sp, #32]
    7dd8:	ldp	x23, x24, [sp, #48]
    7ddc:	b	44b4 <d_print_comp_inner+0x64>
    7de0:	ldr	x0, [x2, #16]
    7de4:	ldr	w0, [x0]
    7de8:	cmp	w0, #0x29
    7dec:	b.eq	7df8 <d_print_comp_inner+0x39a8>  // b.none
    7df0:	mov	w0, #0x1                   	// #1
    7df4:	str	w0, [x19, #304]
    7df8:	ldr	x2, [x2, #8]
    7dfc:	mov	w1, w21
    7e00:	mov	x0, x19
    7e04:	bl	94b8 <d_print_subexpr>
    7e08:	b	5b78 <d_print_comp_inner+0x1728>
    7e0c:	mov	x0, x19
    7e10:	adrp	x1, 0 <d_make_comp>
    7e14:	mov	x2, #0x4                   	// #4
    7e18:	add	x1, x1, #0x0
    7e1c:	bl	1d8 <d_append_buffer>
    7e20:	ldr	x0, [x22, #8]
    7e24:	cbz	x0, 7e7c <d_print_comp_inner+0x3a2c>
    7e28:	mov	w1, w21
    7e2c:	mov	x2, x22
    7e30:	mov	x0, x19
    7e34:	bl	94b8 <d_print_subexpr>
    7e38:	ldr	x1, [x19, #256]
    7e3c:	cmp	x1, #0xff
    7e40:	b.ne	7e68 <d_print_comp_inner+0x3a18>  // b.any
    7e44:	ldp	x3, x2, [x19, #272]
    7e48:	strb	wzr, [x19, #255]
    7e4c:	mov	x0, x19
    7e50:	blr	x3
    7e54:	str	xzr, [x19, #256]
    7e58:	ldr	x0, [x19, #320]
    7e5c:	mov	x1, #0x0                   	// #0
    7e60:	add	x0, x0, #0x1
    7e64:	str	x0, [x19, #320]
    7e68:	add	x0, x1, #0x1
    7e6c:	str	x0, [x19, #256]
    7e70:	mov	w0, #0x20                  	// #32
    7e74:	strb	w0, [x19, x1]
    7e78:	strb	w0, [x19, #264]
    7e7c:	mov	x2, x23
    7e80:	mov	w1, w21
    7e84:	mov	x0, x19
    7e88:	bl	8260 <d_print_comp>
    7e8c:	cbz	x20, 8024 <d_print_comp_inner+0x3bd4>
    7e90:	mov	w1, w21
    7e94:	mov	x2, x20
    7e98:	mov	x0, x19
    7e9c:	bl	94b8 <d_print_subexpr>
    7ea0:	ldp	x21, x22, [sp, #32]
    7ea4:	ldp	x23, x24, [sp, #48]
    7ea8:	b	44b4 <d_print_comp_inner+0x64>
    7eac:	ldp	x21, x22, [sp, #32]
    7eb0:	ldp	x23, x24, [sp, #48]
    7eb4:	b	44b4 <d_print_comp_inner+0x64>
    7eb8:	ldp	x21, x22, [sp, #32]
    7ebc:	ldp	x23, x24, [sp, #48]
    7ec0:	b	44b4 <d_print_comp_inner+0x64>
    7ec4:	ldrb	w1, [x0, #1]
    7ec8:	cmp	w1, #0x6c
    7ecc:	b.ne	7b00 <d_print_comp_inner+0x36b0>  // b.any
    7ed0:	ldrb	w0, [x0, #2]
    7ed4:	cbz	w0, 7b0c <d_print_comp_inner+0x36bc>
    7ed8:	b	7b00 <d_print_comp_inner+0x36b0>
    7edc:	ldp	x21, x22, [sp, #32]
    7ee0:	ldp	x23, x24, [sp, #48]
    7ee4:	b	44b4 <d_print_comp_inner+0x64>
    7ee8:	ldp	x21, x22, [sp, #32]
    7eec:	ldp	x23, x24, [sp, #48]
    7ef0:	b	44b4 <d_print_comp_inner+0x64>
    7ef4:	ldp	x21, x22, [sp, #32]
    7ef8:	ldp	x23, x24, [sp, #48]
    7efc:	b	44b4 <d_print_comp_inner+0x64>
    7f00:	ldr	x1, [x20, #8]
    7f04:	ldr	w2, [x1]
    7f08:	cmp	w2, #0x1
    7f0c:	b.ne	6f10 <d_print_comp_inner+0x2ac0>  // b.any
    7f10:	ldr	x2, [x20, #16]
    7f14:	ldr	w2, [x2]
    7f18:	cmp	w2, #0x29
    7f1c:	csel	x20, x20, x1, ne  // ne = any
    7f20:	b	6f10 <d_print_comp_inner+0x2ac0>
    7f24:	ldr	w1, [x19, #348]
    7f28:	cmp	w4, w1
    7f2c:	b.ge	7f94 <d_print_comp_inner+0x3b44>  // b.tcont
    7f30:	sbfiz	x1, x4, #4, #32
    7f34:	add	w2, w4, #0x1
    7f38:	ldr	x3, [x19, #288]
    7f3c:	str	w2, [x19, #344]
    7f40:	str	x0, [x5, x1]
    7f44:	add	x1, x5, w4, sxtw #4
    7f48:	add	x1, x1, #0x8
    7f4c:	cbz	x3, 80ac <d_print_comp_inner+0x3c5c>
    7f50:	ldr	w2, [x19, #360]
    7f54:	ldr	w6, [x19, #364]
    7f58:	sbfiz	x5, x2, #4, #32
    7f5c:	b	7f8c <d_print_comp_inner+0x3b3c>
    7f60:	ldr	x4, [x19, #352]
    7f64:	add	w2, w2, #0x1
    7f68:	ldr	x7, [x3, #8]
    7f6c:	add	x4, x4, x5
    7f70:	str	w2, [x19, #360]
    7f74:	add	x5, x5, #0x10
    7f78:	str	x7, [x4, #8]
    7f7c:	str	x4, [x1]
    7f80:	mov	x1, x4
    7f84:	ldr	x3, [x3]
    7f88:	cbz	x3, 80ac <d_print_comp_inner+0x3c5c>
    7f8c:	cmp	w6, w2
    7f90:	b.gt	7f60 <d_print_comp_inner+0x3b10>
    7f94:	mov	w0, #0x1                   	// #1
    7f98:	ldp	x21, x22, [sp, #32]
    7f9c:	ldp	x23, x24, [sp, #48]
    7fa0:	str	w0, [x19, #304]
    7fa4:	b	44b4 <d_print_comp_inner+0x64>
    7fa8:	ldr	x2, [x20, #8]
    7fac:	mov	w1, w21
    7fb0:	mov	x0, x19
    7fb4:	bl	94b8 <d_print_subexpr>
    7fb8:	mov	x2, x22
    7fbc:	mov	w1, w21
    7fc0:	mov	x0, x19
    7fc4:	bl	9400 <d_print_expr_op>
    7fc8:	ldp	x21, x22, [sp, #32]
    7fcc:	ldp	x23, x24, [sp, #48]
    7fd0:	b	44b4 <d_print_comp_inner+0x64>
    7fd4:	ldr	x2, [x20, #16]
    7fd8:	mov	x0, x19
    7fdc:	mov	w1, w21
    7fe0:	bl	8260 <d_print_comp>
    7fe4:	str	xzr, [x19, #296]
    7fe8:	ldr	w0, [sp, #112]
    7fec:	cbz	w0, 4ef0 <d_print_comp_inner+0xaa0>
    7ff0:	ldp	x21, x22, [sp, #32]
    7ff4:	ldp	x23, x24, [sp, #48]
    7ff8:	b	44b4 <d_print_comp_inner+0x64>
    7ffc:	cmp	w22, #0x5
    8000:	b.eq	81ac <d_print_comp_inner+0x3d5c>  // b.none
    8004:	mov	x0, x19
    8008:	adrp	x1, 0 <d_make_comp>
    800c:	mov	x2, #0x3                   	// #3
    8010:	add	x1, x1, #0x0
    8014:	bl	1d8 <d_append_buffer>
    8018:	ldp	x21, x22, [sp, #32]
    801c:	ldp	x23, x24, [sp, #48]
    8020:	b	44b4 <d_print_comp_inner+0x64>
    8024:	ldp	x21, x22, [sp, #32]
    8028:	ldp	x23, x24, [sp, #48]
    802c:	b	44b4 <d_print_comp_inner+0x64>
    8030:	cmp	x21, x24
    8034:	b.ls	6998 <d_print_comp_inner+0x2548>  // b.plast
    8038:	cmp	x2, #0xff
    803c:	ccmp	w0, w23, #0x0, ls  // ls = plast
    8040:	b.ne	6998 <d_print_comp_inner+0x2548>  // b.any
    8044:	ldr	x1, [x19, #256]
    8048:	and	w22, w2, #0xff
    804c:	cmp	x1, #0xff
    8050:	b.ne	8078 <d_print_comp_inner+0x3c28>  // b.any
    8054:	ldp	x3, x2, [x19, #272]
    8058:	strb	wzr, [x19, #255]
    805c:	mov	x0, x19
    8060:	blr	x3
    8064:	str	xzr, [x19, #256]
    8068:	ldr	x0, [x19, #320]
    806c:	mov	x1, #0x0                   	// #0
    8070:	add	x0, x0, #0x1
    8074:	str	x0, [x19, #320]
    8078:	add	x0, x1, #0x1
    807c:	str	x0, [x19, #256]
    8080:	strb	w22, [x19, x1]
    8084:	mov	x20, x24
    8088:	strb	w22, [x19, #264]
    808c:	b	69d8 <d_print_comp_inner+0x2588>
    8090:	ldr	x0, [x0, #8]
    8094:	ldrb	w0, [x0]
    8098:	cmp	w0, #0x3e
    809c:	b.eq	81cc <d_print_comp_inner+0x3d7c>  // b.none
    80a0:	ldp	x21, x22, [sp, #32]
    80a4:	ldp	x23, x24, [sp, #48]
    80a8:	b	44b4 <d_print_comp_inner+0x64>
    80ac:	str	xzr, [x1]
    80b0:	b	7990 <d_print_comp_inner+0x3540>
    80b4:	ldp	x21, x22, [sp, #32]
    80b8:	ldp	x23, x24, [sp, #48]
    80bc:	b	44b4 <d_print_comp_inner+0x64>
    80c0:	ldr	w1, [x20]
    80c4:	ldr	x4, [x19, #296]
    80c8:	cmp	w1, #0x2f
    80cc:	csel	x20, x20, x0, ne  // ne = any
    80d0:	b	4688 <d_print_comp_inner+0x238>
    80d4:	cbz	w22, 44e0 <d_print_comp_inner+0x90>
    80d8:	ldp	x21, x22, [sp, #32]
    80dc:	str	x23, [x19, #288]
    80e0:	ldp	x23, x24, [sp, #48]
    80e4:	b	44e8 <d_print_comp_inner+0x98>
    80e8:	ldr	x1, [x19, #256]
    80ec:	cmp	x1, #0xff
    80f0:	b.ne	8118 <d_print_comp_inner+0x3cc8>  // b.any
    80f4:	ldp	x3, x2, [x19, #272]
    80f8:	strb	wzr, [x19, #255]
    80fc:	mov	x0, x19
    8100:	blr	x3
    8104:	str	xzr, [x19, #256]
    8108:	ldr	x0, [x19, #320]
    810c:	mov	x1, #0x0                   	// #0
    8110:	add	x0, x0, #0x1
    8114:	str	x0, [x19, #320]
    8118:	add	x0, x1, #0x1
    811c:	str	x0, [x19, #256]
    8120:	mov	w0, #0x75                  	// #117
    8124:	strb	w0, [x19, x1]
    8128:	strb	w0, [x19, #264]
    812c:	ldp	x21, x22, [sp, #32]
    8130:	ldp	x23, x24, [sp, #48]
    8134:	b	44b4 <d_print_comp_inner+0x64>
    8138:	mov	x0, x19
    813c:	adrp	x1, 0 <d_make_comp>
    8140:	mov	x2, #0x2                   	// #2
    8144:	add	x1, x1, #0x0
    8148:	bl	1d8 <d_append_buffer>
    814c:	ldp	x21, x22, [sp, #32]
    8150:	ldp	x23, x24, [sp, #48]
    8154:	b	44b4 <d_print_comp_inner+0x64>
    8158:	ldr	x1, [x19, #256]
    815c:	cmp	x1, #0xff
    8160:	b.ne	8188 <d_print_comp_inner+0x3d38>  // b.any
    8164:	ldp	x3, x2, [x19, #272]
    8168:	strb	wzr, [x19, #255]
    816c:	mov	x0, x19
    8170:	blr	x3
    8174:	str	xzr, [x19, #256]
    8178:	ldr	x0, [x19, #320]
    817c:	mov	x1, #0x0                   	// #0
    8180:	add	x0, x0, #0x1
    8184:	str	x0, [x19, #320]
    8188:	add	x0, x1, #0x1
    818c:	str	x0, [x19, #256]
    8190:	mov	w0, #0x2d                  	// #45
    8194:	strb	w0, [x19, x1]
    8198:	strb	w0, [x19, #264]
    819c:	b	6dd8 <d_print_comp_inner+0x2988>
    81a0:	ldp	x21, x22, [sp, #32]
    81a4:	ldp	x23, x24, [sp, #48]
    81a8:	b	44b4 <d_print_comp_inner+0x64>
    81ac:	mov	x0, x19
    81b0:	adrp	x1, 0 <d_make_comp>
    81b4:	mov	x2, #0x2                   	// #2
    81b8:	add	x1, x1, #0x0
    81bc:	bl	1d8 <d_append_buffer>
    81c0:	ldp	x21, x22, [sp, #32]
    81c4:	ldp	x23, x24, [sp, #48]
    81c8:	b	44b4 <d_print_comp_inner+0x64>
    81cc:	ldr	x1, [x19, #256]
    81d0:	cmp	x1, #0xff
    81d4:	b.ne	81fc <d_print_comp_inner+0x3dac>  // b.any
    81d8:	ldp	x3, x2, [x19, #272]
    81dc:	strb	wzr, [x19, #255]
    81e0:	mov	x0, x19
    81e4:	blr	x3
    81e8:	str	xzr, [x19, #256]
    81ec:	ldr	x0, [x19, #320]
    81f0:	mov	x1, #0x0                   	// #0
    81f4:	add	x0, x0, #0x1
    81f8:	str	x0, [x19, #320]
    81fc:	add	x0, x1, #0x1
    8200:	str	x0, [x19, #256]
    8204:	mov	w0, #0x29                  	// #41
    8208:	strb	w0, [x19, x1]
    820c:	strb	w0, [x19, #264]
    8210:	ldp	x21, x22, [sp, #32]
    8214:	ldp	x23, x24, [sp, #48]
    8218:	b	44b4 <d_print_comp_inner+0x64>
    821c:	mov	x2, x22
    8220:	mov	w1, w21
    8224:	mov	x0, x19
    8228:	bl	9400 <d_print_expr_op>
    822c:	b	6054 <d_print_comp_inner+0x1c04>
    8230:	ldp	x21, x22, [sp, #32]
    8234:	ldp	x23, x24, [sp, #48]
    8238:	b	44b4 <d_print_comp_inner+0x64>
    823c:	mov	x0, x19
    8240:	adrp	x1, 0 <d_make_comp>
    8244:	mov	x2, #0x5                   	// #5
    8248:	add	x1, x1, #0x0
    824c:	bl	1d8 <d_append_buffer>
    8250:	ldp	x21, x22, [sp, #32]
    8254:	ldp	x23, x24, [sp, #48]
    8258:	b	44b4 <d_print_comp_inner+0x64>
    825c:	nop

0000000000008260 <d_print_comp>:
    8260:	stp	x29, x30, [sp, #-48]!
    8264:	mov	x29, sp
    8268:	stp	x19, x20, [sp, #16]
    826c:	mov	x20, x0
    8270:	cbz	x2, 82e0 <d_print_comp+0x80>
    8274:	ldr	w3, [x2, #4]
    8278:	mov	x19, x2
    827c:	cmp	w3, #0x1
    8280:	b.gt	82e0 <d_print_comp+0x80>
    8284:	ldr	w4, [x0, #308]
    8288:	cmp	w4, #0x400
    828c:	b.gt	82e0 <d_print_comp+0x80>
    8290:	add	w3, w3, #0x1
    8294:	add	w4, w4, #0x1
    8298:	str	w3, [x2, #4]
    829c:	add	x3, sp, #0x20
    82a0:	str	w4, [x0, #308]
    82a4:	ldr	x4, [x0, #328]
    82a8:	str	x3, [x0, #328]
    82ac:	stp	x2, x4, [sp, #32]
    82b0:	bl	4450 <d_print_comp_inner>
    82b4:	ldr	w1, [x19, #4]
    82b8:	ldr	x0, [sp, #40]
    82bc:	str	x0, [x20, #328]
    82c0:	ldr	w0, [x20, #308]
    82c4:	sub	w1, w1, #0x1
    82c8:	str	w1, [x19, #4]
    82cc:	sub	w0, w0, #0x1
    82d0:	str	w0, [x20, #308]
    82d4:	ldp	x19, x20, [sp, #16]
    82d8:	ldp	x29, x30, [sp], #48
    82dc:	ret
    82e0:	mov	w0, #0x1                   	// #1
    82e4:	str	w0, [x20, #304]
    82e8:	ldp	x19, x20, [sp, #16]
    82ec:	ldp	x29, x30, [sp], #48
    82f0:	ret
    82f4:	nop

00000000000082f8 <d_print_mod>:
    82f8:	stp	x29, x30, [sp, #-64]!
    82fc:	mov	x29, sp
    8300:	stp	x19, x20, [sp, #16]
    8304:	mov	x19, x0
    8308:	ldr	w0, [x2]
    830c:	stp	x21, x22, [sp, #32]
    8310:	mov	x20, x2
    8314:	sub	w0, w0, #0x3
    8318:	mov	w21, w1
    831c:	cmp	w0, #0x4d
    8320:	b.ls	8340 <d_print_mod+0x48>  // b.plast
    8324:	mov	x2, x20
    8328:	mov	w1, w21
    832c:	mov	x0, x19
    8330:	ldp	x19, x20, [sp, #16]
    8334:	ldp	x21, x22, [sp, #32]
    8338:	ldp	x29, x30, [sp], #64
    833c:	b	8260 <d_print_comp>
    8340:	adrp	x1, 0 <d_make_comp>
    8344:	add	x1, x1, #0x0
    8348:	ldrh	w0, [x1, w0, uxtw #1]
    834c:	adr	x1, 8358 <d_print_mod+0x60>
    8350:	add	x0, x1, w0, sxth #2
    8354:	br	x0
    8358:	adrp	x20, 0 <d_make_comp>
    835c:	add	x20, x20, #0x0
    8360:	add	x22, x20, #0x9
    8364:	mov	w21, #0x20                  	// #32
    8368:	ldr	x1, [x19, #256]
    836c:	b	8394 <d_print_mod+0x9c>
    8370:	mov	x0, x1
    8374:	add	x1, x1, #0x1
    8378:	str	x1, [x19, #256]
    837c:	add	x20, x20, #0x1
    8380:	strb	w21, [x19, x0]
    8384:	cmp	x22, x20
    8388:	strb	w21, [x19, #264]
    838c:	b.eq	854c <d_print_mod+0x254>  // b.none
    8390:	ldrb	w21, [x20]
    8394:	cmp	x1, #0xff
    8398:	b.ne	8370 <d_print_mod+0x78>  // b.any
    839c:	ldp	x3, x2, [x19, #272]
    83a0:	strb	wzr, [x19, #255]
    83a4:	mov	x0, x19
    83a8:	blr	x3
    83ac:	ldr	x2, [x19, #320]
    83b0:	mov	x1, #0x1                   	// #1
    83b4:	mov	x0, #0x0                   	// #0
    83b8:	add	x2, x2, x1
    83bc:	str	x2, [x19, #320]
    83c0:	b	8378 <d_print_mod+0x80>
    83c4:	adrp	x20, 0 <d_make_comp>
    83c8:	add	x20, x20, #0x0
    83cc:	add	x22, x20, #0x9
    83d0:	mov	w21, #0x20                  	// #32
    83d4:	ldr	x1, [x19, #256]
    83d8:	b	8400 <d_print_mod+0x108>
    83dc:	mov	x0, x1
    83e0:	add	x1, x1, #0x1
    83e4:	str	x1, [x19, #256]
    83e8:	add	x20, x20, #0x1
    83ec:	strb	w21, [x19, x0]
    83f0:	cmp	x20, x22
    83f4:	strb	w21, [x19, #264]
    83f8:	b.eq	854c <d_print_mod+0x254>  // b.none
    83fc:	ldrb	w21, [x20]
    8400:	cmp	x1, #0xff
    8404:	b.ne	83dc <d_print_mod+0xe4>  // b.any
    8408:	ldp	x3, x2, [x19, #272]
    840c:	strb	wzr, [x19, #255]
    8410:	mov	x0, x19
    8414:	blr	x3
    8418:	ldr	x2, [x19, #320]
    841c:	mov	x1, #0x1                   	// #1
    8420:	mov	x0, #0x0                   	// #0
    8424:	add	x2, x2, x1
    8428:	str	x2, [x19, #320]
    842c:	b	83e4 <d_print_mod+0xec>
    8430:	adrp	x20, 0 <d_make_comp>
    8434:	add	x20, x20, #0x0
    8438:	add	x22, x20, #0x6
    843c:	mov	w21, #0x20                  	// #32
    8440:	ldr	x1, [x19, #256]
    8444:	b	846c <d_print_mod+0x174>
    8448:	mov	x0, x1
    844c:	add	x1, x1, #0x1
    8450:	str	x1, [x19, #256]
    8454:	add	x20, x20, #0x1
    8458:	strb	w21, [x19, x0]
    845c:	cmp	x22, x20
    8460:	strb	w21, [x19, #264]
    8464:	b.eq	854c <d_print_mod+0x254>  // b.none
    8468:	ldrb	w21, [x20]
    846c:	cmp	x1, #0xff
    8470:	b.ne	8448 <d_print_mod+0x150>  // b.any
    8474:	ldp	x3, x2, [x19, #272]
    8478:	strb	wzr, [x19, #255]
    847c:	mov	x0, x19
    8480:	blr	x3
    8484:	ldr	x2, [x19, #320]
    8488:	mov	x1, #0x1                   	// #1
    848c:	mov	x0, #0x0                   	// #0
    8490:	add	x2, x2, x1
    8494:	str	x2, [x19, #320]
    8498:	b	8450 <d_print_mod+0x158>
    849c:	ldr	x2, [x2, #8]
    84a0:	b	8328 <d_print_mod+0x30>
    84a4:	ldr	x0, [x19, #256]
    84a8:	cmp	x0, #0xff
    84ac:	b.eq	8a68 <d_print_mod+0x770>  // b.none
    84b0:	add	x1, x0, #0x1
    84b4:	str	x1, [x19, #256]
    84b8:	mov	w2, #0x20                  	// #32
    84bc:	strb	w2, [x19, x0]
    84c0:	strb	w2, [x19, #264]
    84c4:	b	86b4 <d_print_mod+0x3bc>
    84c8:	ldr	x0, [x19, #256]
    84cc:	add	x1, x0, #0x1
    84d0:	cmp	x0, #0xff
    84d4:	b.eq	8ac0 <d_print_mod+0x7c8>  // b.none
    84d8:	str	x1, [x19, #256]
    84dc:	mov	w2, #0x20                  	// #32
    84e0:	strb	w2, [x19, x0]
    84e4:	strb	w2, [x19, #264]
    84e8:	mov	x21, #0x0                   	// #0
    84ec:	mov	w20, #0x26                  	// #38
    84f0:	b	8510 <d_print_mod+0x218>
    84f4:	mov	x0, x1
    84f8:	add	x1, x1, #0x1
    84fc:	str	x1, [x19, #256]
    8500:	strb	w20, [x19, x0]
    8504:	strb	w20, [x19, #264]
    8508:	cbnz	x21, 854c <d_print_mod+0x254>
    850c:	mov	x21, #0x1                   	// #1
    8510:	cmp	x1, #0xff
    8514:	b.ne	84f4 <d_print_mod+0x1fc>  // b.any
    8518:	ldp	x3, x2, [x19, #272]
    851c:	strb	wzr, [x19, #255]
    8520:	mov	x0, x19
    8524:	blr	x3
    8528:	ldr	x2, [x19, #320]
    852c:	mov	x0, #0x0                   	// #0
    8530:	mov	x1, #0x1                   	// #1
    8534:	str	x1, [x19, #256]
    8538:	add	x2, x2, x1
    853c:	str	x2, [x19, #320]
    8540:	strb	w20, [x19, x0]
    8544:	strb	w20, [x19, #264]
    8548:	cbz	x21, 850c <d_print_mod+0x214>
    854c:	ldp	x19, x20, [sp, #16]
    8550:	ldp	x21, x22, [sp, #32]
    8554:	ldp	x29, x30, [sp], #64
    8558:	ret
    855c:	ldr	x1, [x19, #256]
    8560:	add	x0, x1, #0x1
    8564:	cmp	x1, #0xff
    8568:	b.eq	8a98 <d_print_mod+0x7a0>  // b.none
    856c:	str	x0, [x19, #256]
    8570:	mov	w0, #0x20                  	// #32
    8574:	strb	w0, [x19, x1]
    8578:	mov	w1, w21
    857c:	strb	w0, [x19, #264]
    8580:	mov	x0, x19
    8584:	ldr	x2, [x20, #16]
    8588:	ldp	x19, x20, [sp, #16]
    858c:	ldp	x21, x22, [sp, #32]
    8590:	ldp	x29, x30, [sp], #64
    8594:	b	8260 <d_print_comp>
    8598:	tbnz	w21, #2, 854c <d_print_mod+0x254>
    859c:	ldr	x1, [x19, #256]
    85a0:	add	x0, x1, #0x1
    85a4:	cmp	x1, #0xff
    85a8:	b.ne	85d0 <d_print_mod+0x2d8>  // b.any
    85ac:	ldp	x3, x2, [x19, #272]
    85b0:	strb	wzr, [x19, #255]
    85b4:	mov	x0, x19
    85b8:	blr	x3
    85bc:	ldr	x2, [x19, #320]
    85c0:	mov	x0, #0x1                   	// #1
    85c4:	mov	x1, #0x0                   	// #0
    85c8:	add	x2, x2, x0
    85cc:	str	x2, [x19, #320]
    85d0:	str	x0, [x19, #256]
    85d4:	mov	w0, #0x2a                  	// #42
    85d8:	strb	w0, [x19, x1]
    85dc:	strb	w0, [x19, #264]
    85e0:	b	854c <d_print_mod+0x254>
    85e4:	ldrb	w0, [x19, #264]
    85e8:	cmp	w0, #0x28
    85ec:	b.eq	8634 <d_print_mod+0x33c>  // b.none
    85f0:	ldr	x1, [x19, #256]
    85f4:	add	x0, x1, #0x1
    85f8:	cmp	x1, #0xff
    85fc:	b.ne	8624 <d_print_mod+0x32c>  // b.any
    8600:	ldp	x3, x2, [x19, #272]
    8604:	strb	wzr, [x19, #255]
    8608:	mov	x0, x19
    860c:	blr	x3
    8610:	ldr	x2, [x19, #320]
    8614:	mov	x0, #0x1                   	// #1
    8618:	mov	x1, #0x0                   	// #0
    861c:	add	x2, x2, x0
    8620:	str	x2, [x19, #320]
    8624:	str	x0, [x19, #256]
    8628:	mov	w0, #0x20                  	// #32
    862c:	strb	w0, [x19, x1]
    8630:	strb	w0, [x19, #264]
    8634:	ldr	x2, [x20, #8]
    8638:	mov	w1, w21
    863c:	mov	x0, x19
    8640:	adrp	x20, 0 <d_make_comp>
    8644:	add	x20, x20, #0x0
    8648:	mov	w21, #0x3a                  	// #58
    864c:	bl	8260 <d_print_comp>
    8650:	add	x22, x20, #0x3
    8654:	ldr	x1, [x19, #256]
    8658:	b	8680 <d_print_mod+0x388>
    865c:	mov	x0, x1
    8660:	add	x1, x1, #0x1
    8664:	str	x1, [x19, #256]
    8668:	add	x20, x20, #0x1
    866c:	strb	w21, [x19, x0]
    8670:	cmp	x22, x20
    8674:	strb	w21, [x19, #264]
    8678:	b.eq	854c <d_print_mod+0x254>  // b.none
    867c:	ldrb	w21, [x20]
    8680:	cmp	x1, #0xff
    8684:	b.ne	865c <d_print_mod+0x364>  // b.any
    8688:	ldp	x3, x2, [x19, #272]
    868c:	strb	wzr, [x19, #255]
    8690:	mov	x0, x19
    8694:	blr	x3
    8698:	ldr	x2, [x19, #320]
    869c:	mov	x1, #0x1                   	// #1
    86a0:	mov	x0, #0x0                   	// #0
    86a4:	add	x2, x2, x1
    86a8:	str	x2, [x19, #320]
    86ac:	b	8664 <d_print_mod+0x36c>
    86b0:	ldr	x1, [x19, #256]
    86b4:	cmp	x1, #0xff
    86b8:	b.eq	8a40 <d_print_mod+0x748>  // b.none
    86bc:	add	x0, x1, #0x1
    86c0:	str	x0, [x19, #256]
    86c4:	mov	w0, #0x26                  	// #38
    86c8:	strb	w0, [x19, x1]
    86cc:	strb	w0, [x19, #264]
    86d0:	ldp	x19, x20, [sp, #16]
    86d4:	ldp	x21, x22, [sp, #32]
    86d8:	ldp	x29, x30, [sp], #64
    86dc:	ret
    86e0:	adrp	x22, 0 <d_make_comp>
    86e4:	add	x22, x22, #0x0
    86e8:	stp	x23, x24, [sp, #48]
    86ec:	add	x24, x22, #0x6
    86f0:	mov	w23, #0x20                  	// #32
    86f4:	ldr	x1, [x19, #256]
    86f8:	b	8720 <d_print_mod+0x428>
    86fc:	mov	x0, x1
    8700:	add	x1, x1, #0x1
    8704:	str	x1, [x19, #256]
    8708:	add	x22, x22, #0x1
    870c:	strb	w23, [x19, x0]
    8710:	cmp	x24, x22
    8714:	strb	w23, [x19, #264]
    8718:	b.eq	8988 <d_print_mod+0x690>  // b.none
    871c:	ldrb	w23, [x22]
    8720:	cmp	x1, #0xff
    8724:	b.ne	86fc <d_print_mod+0x404>  // b.any
    8728:	ldp	x3, x2, [x19, #272]
    872c:	strb	wzr, [x19, #255]
    8730:	mov	x0, x19
    8734:	blr	x3
    8738:	ldr	x2, [x19, #320]
    873c:	mov	x1, #0x1                   	// #1
    8740:	mov	x0, #0x0                   	// #0
    8744:	add	x2, x2, x1
    8748:	str	x2, [x19, #320]
    874c:	b	8704 <d_print_mod+0x40c>
    8750:	adrp	x22, 0 <d_make_comp>
    8754:	add	x22, x22, #0x0
    8758:	stp	x23, x24, [sp, #48]
    875c:	add	x24, x22, #0x9
    8760:	mov	w23, #0x20                  	// #32
    8764:	ldr	x1, [x19, #256]
    8768:	b	8790 <d_print_mod+0x498>
    876c:	mov	x0, x1
    8770:	add	x1, x1, #0x1
    8774:	str	x1, [x19, #256]
    8778:	add	x22, x22, #0x1
    877c:	strb	w23, [x19, x0]
    8780:	cmp	x22, x24
    8784:	strb	w23, [x19, #264]
    8788:	b.eq	8988 <d_print_mod+0x690>  // b.none
    878c:	ldrb	w23, [x22]
    8790:	cmp	x1, #0xff
    8794:	b.ne	876c <d_print_mod+0x474>  // b.any
    8798:	ldp	x3, x2, [x19, #272]
    879c:	strb	wzr, [x19, #255]
    87a0:	mov	x0, x19
    87a4:	blr	x3
    87a8:	ldr	x2, [x19, #320]
    87ac:	mov	x1, #0x1                   	// #1
    87b0:	mov	x0, #0x0                   	// #0
    87b4:	add	x2, x2, x1
    87b8:	str	x2, [x19, #320]
    87bc:	b	8774 <d_print_mod+0x47c>
    87c0:	stp	x23, x24, [sp, #48]
    87c4:	adrp	x24, 0 <d_make_comp>
    87c8:	add	x24, x24, #0x0
    87cc:	adrp	x22, 3f0 <d_compact_number+0x38>
    87d0:	add	x24, x24, #0xa
    87d4:	add	x22, x22, #0x0
    87d8:	mov	w23, #0x20                  	// #32
    87dc:	ldr	x1, [x19, #256]
    87e0:	b	8804 <d_print_mod+0x50c>
    87e4:	mov	x0, x1
    87e8:	add	x1, x1, #0x1
    87ec:	str	x1, [x19, #256]
    87f0:	cmp	x22, x24
    87f4:	strb	w23, [x19, x0]
    87f8:	strb	w23, [x19, #264]
    87fc:	b.eq	8a38 <d_print_mod+0x740>  // b.none
    8800:	ldrb	w23, [x22], #1
    8804:	cmp	x1, #0xff
    8808:	b.ne	87e4 <d_print_mod+0x4ec>  // b.any
    880c:	ldp	x3, x2, [x19, #272]
    8810:	strb	wzr, [x19, #255]
    8814:	mov	x0, x19
    8818:	blr	x3
    881c:	ldr	x2, [x19, #320]
    8820:	mov	x1, #0x1                   	// #1
    8824:	mov	x0, #0x0                   	// #0
    8828:	add	x2, x2, x1
    882c:	str	x2, [x19, #320]
    8830:	b	87ec <d_print_mod+0x4f4>
    8834:	ldr	x1, [x19, #256]
    8838:	b	84e8 <d_print_mod+0x1f0>
    883c:	adrp	x20, 0 <d_make_comp>
    8840:	add	x20, x20, #0x0
    8844:	add	x22, x20, #0x8
    8848:	mov	w21, #0x63                  	// #99
    884c:	ldr	x1, [x19, #256]
    8850:	b	8878 <d_print_mod+0x580>
    8854:	mov	x0, x1
    8858:	add	x1, x1, #0x1
    885c:	str	x1, [x19, #256]
    8860:	add	x20, x20, #0x1
    8864:	strb	w21, [x19, x0]
    8868:	cmp	x22, x20
    886c:	strb	w21, [x19, #264]
    8870:	b.eq	854c <d_print_mod+0x254>  // b.none
    8874:	ldrb	w21, [x20]
    8878:	cmp	x1, #0xff
    887c:	b.ne	8854 <d_print_mod+0x55c>  // b.any
    8880:	ldp	x3, x2, [x19, #272]
    8884:	strb	wzr, [x19, #255]
    8888:	mov	x0, x19
    888c:	blr	x3
    8890:	ldr	x2, [x19, #320]
    8894:	mov	x1, #0x1                   	// #1
    8898:	mov	x0, #0x0                   	// #0
    889c:	add	x2, x2, x1
    88a0:	str	x2, [x19, #320]
    88a4:	b	885c <d_print_mod+0x564>
    88a8:	adrp	x22, 0 <d_make_comp>
    88ac:	add	x22, x22, #0x0
    88b0:	adrp	x20, 3d8 <d_compact_number+0x20>
    88b4:	add	x22, x22, #0xa
    88b8:	add	x20, x20, #0x0
    88bc:	mov	w21, #0x69                  	// #105
    88c0:	ldr	x1, [x19, #256]
    88c4:	b	88e8 <d_print_mod+0x5f0>
    88c8:	mov	x0, x1
    88cc:	add	x1, x1, #0x1
    88d0:	str	x1, [x19, #256]
    88d4:	cmp	x20, x22
    88d8:	strb	w21, [x19, x0]
    88dc:	strb	w21, [x19, #264]
    88e0:	b.eq	854c <d_print_mod+0x254>  // b.none
    88e4:	ldrb	w21, [x20], #1
    88e8:	cmp	x1, #0xff
    88ec:	b.ne	88c8 <d_print_mod+0x5d0>  // b.any
    88f0:	ldp	x3, x2, [x19, #272]
    88f4:	strb	wzr, [x19, #255]
    88f8:	mov	x0, x19
    88fc:	blr	x3
    8900:	ldr	x2, [x19, #320]
    8904:	mov	x1, #0x1                   	// #1
    8908:	mov	x0, #0x0                   	// #0
    890c:	add	x2, x2, x1
    8910:	str	x2, [x19, #320]
    8914:	b	88d0 <d_print_mod+0x5d8>
    8918:	adrp	x22, 0 <d_make_comp>
    891c:	add	x22, x22, #0x0
    8920:	adrp	x20, 398 <d_number_component+0x48>
    8924:	add	x22, x22, #0x11
    8928:	add	x20, x20, #0x0
    892c:	mov	w21, #0x20                  	// #32
    8930:	ldr	x1, [x19, #256]
    8934:	b	8958 <d_print_mod+0x660>
    8938:	mov	x0, x1
    893c:	add	x1, x1, #0x1
    8940:	str	x1, [x19, #256]
    8944:	cmp	x22, x20
    8948:	strb	w21, [x19, x0]
    894c:	strb	w21, [x19, #264]
    8950:	b.eq	854c <d_print_mod+0x254>  // b.none
    8954:	ldrb	w21, [x20], #1
    8958:	cmp	x1, #0xff
    895c:	b.ne	8938 <d_print_mod+0x640>  // b.any
    8960:	ldp	x3, x2, [x19, #272]
    8964:	strb	wzr, [x19, #255]
    8968:	mov	x0, x19
    896c:	blr	x3
    8970:	ldr	x2, [x19, #320]
    8974:	mov	x1, #0x1                   	// #1
    8978:	mov	x0, #0x0                   	// #0
    897c:	add	x2, x2, x1
    8980:	str	x2, [x19, #320]
    8984:	b	8940 <d_print_mod+0x648>
    8988:	ldr	x2, [x20, #16]
    898c:	cbz	x2, 8aec <d_print_mod+0x7f4>
    8990:	add	x0, x1, #0x1
    8994:	cmp	x1, #0xff
    8998:	b.ne	89c4 <d_print_mod+0x6cc>  // b.any
    899c:	ldp	x3, x2, [x19, #272]
    89a0:	strb	wzr, [x19, #255]
    89a4:	mov	x0, x19
    89a8:	blr	x3
    89ac:	ldr	x3, [x19, #320]
    89b0:	mov	x0, #0x1                   	// #1
    89b4:	mov	x1, #0x0                   	// #0
    89b8:	add	x3, x3, x0
    89bc:	ldr	x2, [x20, #16]
    89c0:	str	x3, [x19, #320]
    89c4:	str	x0, [x19, #256]
    89c8:	mov	w0, #0x28                  	// #40
    89cc:	strb	w0, [x19, x1]
    89d0:	strb	w0, [x19, #264]
    89d4:	mov	w1, w21
    89d8:	mov	x0, x19
    89dc:	bl	8260 <d_print_comp>
    89e0:	ldr	x1, [x19, #256]
    89e4:	add	x0, x1, #0x1
    89e8:	cmp	x1, #0xff
    89ec:	b.ne	8a14 <d_print_mod+0x71c>  // b.any
    89f0:	ldp	x3, x2, [x19, #272]
    89f4:	strb	wzr, [x19, #255]
    89f8:	mov	x0, x19
    89fc:	blr	x3
    8a00:	ldr	x2, [x19, #320]
    8a04:	mov	x0, #0x1                   	// #1
    8a08:	mov	x1, #0x0                   	// #0
    8a0c:	add	x2, x2, x0
    8a10:	str	x2, [x19, #320]
    8a14:	str	x0, [x19, #256]
    8a18:	mov	w0, #0x29                  	// #41
    8a1c:	strb	w0, [x19, x1]
    8a20:	strb	w0, [x19, #264]
    8a24:	ldp	x19, x20, [sp, #16]
    8a28:	ldp	x21, x22, [sp, #32]
    8a2c:	ldp	x23, x24, [sp, #48]
    8a30:	ldp	x29, x30, [sp], #64
    8a34:	ret
    8a38:	ldr	x2, [x20, #8]
    8a3c:	b	89d4 <d_print_mod+0x6dc>
    8a40:	ldp	x3, x2, [x19, #272]
    8a44:	strb	wzr, [x19, #255]
    8a48:	mov	x0, x19
    8a4c:	blr	x3
    8a50:	ldr	x2, [x19, #320]
    8a54:	mov	x0, #0x1                   	// #1
    8a58:	mov	x1, #0x0                   	// #0
    8a5c:	add	x2, x2, x0
    8a60:	str	x2, [x19, #320]
    8a64:	b	86c0 <d_print_mod+0x3c8>
    8a68:	ldp	x3, x2, [x19, #272]
    8a6c:	strb	wzr, [x19, #255]
    8a70:	mov	x1, x0
    8a74:	mov	x0, x19
    8a78:	blr	x3
    8a7c:	ldr	x0, [x19, #320]
    8a80:	mov	w2, #0x20                  	// #32
    8a84:	mov	x1, #0x1                   	// #1
    8a88:	strb	w2, [x19]
    8a8c:	add	x0, x0, x1
    8a90:	str	x0, [x19, #320]
    8a94:	b	86bc <d_print_mod+0x3c4>
    8a98:	ldp	x3, x2, [x19, #272]
    8a9c:	strb	wzr, [x19, #255]
    8aa0:	mov	x0, x19
    8aa4:	blr	x3
    8aa8:	ldr	x2, [x19, #320]
    8aac:	mov	x0, #0x1                   	// #1
    8ab0:	mov	x1, #0x0                   	// #0
    8ab4:	add	x2, x2, x0
    8ab8:	str	x2, [x19, #320]
    8abc:	b	856c <d_print_mod+0x274>
    8ac0:	ldp	x3, x2, [x19, #272]
    8ac4:	strb	wzr, [x19, #255]
    8ac8:	mov	x1, x0
    8acc:	mov	x0, x19
    8ad0:	blr	x3
    8ad4:	ldr	x2, [x19, #320]
    8ad8:	mov	x1, #0x1                   	// #1
    8adc:	mov	x0, #0x0                   	// #0
    8ae0:	add	x2, x2, x1
    8ae4:	str	x2, [x19, #320]
    8ae8:	b	84d8 <d_print_mod+0x1e0>
    8aec:	ldp	x23, x24, [sp, #48]
    8af0:	b	854c <d_print_mod+0x254>
    8af4:	nop

0000000000008af8 <d_print_function_type.isra.0>:
    8af8:	stp	x29, x30, [sp, #-64]!
    8afc:	mov	x29, sp
    8b00:	stp	x19, x20, [sp, #16]
    8b04:	mov	x19, x0
    8b08:	mov	x20, x3
    8b0c:	stp	x21, x22, [sp, #32]
    8b10:	mov	x21, x2
    8b14:	stp	x23, x24, [sp, #48]
    8b18:	mov	w23, w1
    8b1c:	cbz	x3, 8b60 <d_print_function_type.isra.0+0x68>
    8b20:	mov	x2, #0xe000000             	// #234881024
    8b24:	mov	x4, #0x1                   	// #1
    8b28:	movk	x2, #0x862, lsl #32
    8b2c:	ldr	w0, [x3, #16]
    8b30:	cbnz	w0, 8b60 <d_print_function_type.isra.0+0x68>
    8b34:	ldr	x0, [x3, #8]
    8b38:	ldr	w0, [x0]
    8b3c:	cmp	w0, #0x2b
    8b40:	b.hi	8b58 <d_print_function_type.isra.0+0x60>  // b.pmore
    8b44:	lsl	x0, x4, x0
    8b48:	tst	x0, x2
    8b4c:	b.ne	8c28 <d_print_function_type.isra.0+0x130>  // b.any
    8b50:	tst	x0, #0x1c00000000
    8b54:	b.ne	8cf4 <d_print_function_type.isra.0+0x1fc>  // b.any
    8b58:	ldr	x3, [x3]
    8b5c:	cbnz	x3, 8b2c <d_print_function_type.isra.0+0x34>
    8b60:	ldr	x22, [x19, #296]
    8b64:	str	xzr, [x19, #296]
    8b68:	mov	w1, w23
    8b6c:	mov	x2, x20
    8b70:	mov	x0, x19
    8b74:	mov	w3, #0x0                   	// #0
    8b78:	bl	8da8 <d_print_mod_list>
    8b7c:	ldr	x1, [x19, #256]
    8b80:	cmp	x1, #0xff
    8b84:	b.eq	8cb8 <d_print_function_type.isra.0+0x1c0>  // b.none
    8b88:	add	x0, x1, #0x1
    8b8c:	str	x0, [x19, #256]
    8b90:	mov	w2, #0x28                  	// #40
    8b94:	strb	w2, [x19, x1]
    8b98:	strb	w2, [x19, #264]
    8b9c:	ldr	x2, [x21]
    8ba0:	cbz	x2, 8bb4 <d_print_function_type.isra.0+0xbc>
    8ba4:	mov	x0, x19
    8ba8:	mov	w1, w23
    8bac:	bl	8260 <d_print_comp>
    8bb0:	ldr	x0, [x19, #256]
    8bb4:	cmp	x0, #0xff
    8bb8:	b.eq	8bfc <d_print_function_type.isra.0+0x104>  // b.none
    8bbc:	add	x1, x0, #0x1
    8bc0:	str	x1, [x19, #256]
    8bc4:	mov	w3, #0x29                  	// #41
    8bc8:	strb	w3, [x19, x0]
    8bcc:	mov	x2, x20
    8bd0:	strb	w3, [x19, #264]
    8bd4:	mov	w1, w23
    8bd8:	mov	x0, x19
    8bdc:	mov	w3, #0x1                   	// #1
    8be0:	bl	8da8 <d_print_mod_list>
    8be4:	ldp	x23, x24, [sp, #48]
    8be8:	str	x22, [x19, #296]
    8bec:	ldp	x19, x20, [sp, #16]
    8bf0:	ldp	x21, x22, [sp, #32]
    8bf4:	ldp	x29, x30, [sp], #64
    8bf8:	ret
    8bfc:	ldp	x3, x2, [x19, #272]
    8c00:	strb	wzr, [x19, #255]
    8c04:	mov	x1, x0
    8c08:	mov	x0, x19
    8c0c:	blr	x3
    8c10:	ldr	x2, [x19, #320]
    8c14:	mov	x1, #0x1                   	// #1
    8c18:	mov	x0, #0x0                   	// #0
    8c1c:	add	x2, x2, x1
    8c20:	str	x2, [x19, #320]
    8c24:	b	8bc0 <d_print_function_type.isra.0+0xc8>
    8c28:	ldrb	w0, [x19, #264]
    8c2c:	ldr	x1, [x19, #256]
    8c30:	cmp	w0, #0x20
    8c34:	b.eq	8c58 <d_print_function_type.isra.0+0x160>  // b.none
    8c38:	cmp	x1, #0xff
    8c3c:	b.eq	8d38 <d_print_function_type.isra.0+0x240>  // b.none
    8c40:	add	x2, x1, #0x1
    8c44:	str	x2, [x19, #256]
    8c48:	mov	w0, #0x20                  	// #32
    8c4c:	strb	w0, [x19, x1]
    8c50:	mov	x1, x2
    8c54:	strb	w0, [x19, #264]
    8c58:	cmp	x1, #0xff
    8c5c:	b.eq	8d10 <d_print_function_type.isra.0+0x218>  // b.none
    8c60:	add	x0, x1, #0x1
    8c64:	str	x0, [x19, #256]
    8c68:	mov	w24, #0x28                  	// #40
    8c6c:	strb	w24, [x19, x1]
    8c70:	mov	x0, x19
    8c74:	strb	w24, [x19, #264]
    8c78:	mov	x2, x20
    8c7c:	ldr	x22, [x19, #296]
    8c80:	str	xzr, [x19, #296]
    8c84:	mov	w1, w23
    8c88:	mov	w3, #0x0                   	// #0
    8c8c:	bl	8da8 <d_print_mod_list>
    8c90:	ldr	x0, [x19, #256]
    8c94:	cmp	x0, #0xff
    8c98:	b.eq	8d64 <d_print_function_type.isra.0+0x26c>  // b.none
    8c9c:	add	x1, x0, #0x1
    8ca0:	str	x1, [x19, #256]
    8ca4:	mov	w2, #0x29                  	// #41
    8ca8:	strb	w2, [x19, x0]
    8cac:	strb	w2, [x19, #264]
    8cb0:	cmp	x1, #0xff
    8cb4:	b.ne	8b88 <d_print_function_type.isra.0+0x90>  // b.any
    8cb8:	ldp	x3, x2, [x19, #272]
    8cbc:	strb	wzr, [x19, #255]
    8cc0:	mov	x0, x19
    8cc4:	blr	x3
    8cc8:	mov	w1, #0x28                  	// #40
    8ccc:	strb	w1, [x19]
    8cd0:	strb	w1, [x19, #264]
    8cd4:	mov	x0, #0x1                   	// #1
    8cd8:	ldr	x1, [x19, #320]
    8cdc:	ldr	x2, [x21]
    8ce0:	add	x1, x1, x0
    8ce4:	str	x0, [x19, #256]
    8ce8:	str	x1, [x19, #320]
    8cec:	cbnz	x2, 8ba4 <d_print_function_type.isra.0+0xac>
    8cf0:	b	8bbc <d_print_function_type.isra.0+0xc4>
    8cf4:	ldrb	w0, [x19, #264]
    8cf8:	ldr	x1, [x19, #256]
    8cfc:	and	w2, w0, #0xfffffffd
    8d00:	cmp	w2, #0x28
    8d04:	b.ne	8c30 <d_print_function_type.isra.0+0x138>  // b.any
    8d08:	cmp	x1, #0xff
    8d0c:	b.ne	8c60 <d_print_function_type.isra.0+0x168>  // b.any
    8d10:	ldp	x3, x2, [x19, #272]
    8d14:	strb	wzr, [x19, #255]
    8d18:	mov	x0, x19
    8d1c:	blr	x3
    8d20:	ldr	x2, [x19, #320]
    8d24:	mov	x0, #0x1                   	// #1
    8d28:	mov	x1, #0x0                   	// #0
    8d2c:	add	x2, x2, x0
    8d30:	str	x2, [x19, #320]
    8d34:	b	8c64 <d_print_function_type.isra.0+0x16c>
    8d38:	ldp	x3, x2, [x19, #272]
    8d3c:	strb	wzr, [x19, #255]
    8d40:	mov	x0, x19
    8d44:	blr	x3
    8d48:	ldr	x0, [x19, #320]
    8d4c:	mov	w2, #0x20                  	// #32
    8d50:	mov	x1, #0x1                   	// #1
    8d54:	strb	w2, [x19]
    8d58:	add	x0, x0, x1
    8d5c:	str	x0, [x19, #320]
    8d60:	b	8c60 <d_print_function_type.isra.0+0x168>
    8d64:	ldp	x3, x2, [x19, #272]
    8d68:	strb	wzr, [x19, #255]
    8d6c:	mov	x1, x0
    8d70:	mov	x0, x19
    8d74:	blr	x3
    8d78:	strb	w24, [x19, #264]
    8d7c:	mov	w0, #0x2829                	// #10281
    8d80:	strh	w0, [x19]
    8d84:	ldr	x1, [x19, #320]
    8d88:	mov	x0, #0x2                   	// #2
    8d8c:	ldr	x2, [x21]
    8d90:	add	x1, x1, #0x1
    8d94:	str	x0, [x19, #256]
    8d98:	str	x1, [x19, #320]
    8d9c:	cbnz	x2, 8ba4 <d_print_function_type.isra.0+0xac>
    8da0:	b	8bbc <d_print_function_type.isra.0+0xc4>
    8da4:	nop

0000000000008da8 <d_print_mod_list>:
    8da8:	cbz	x2, 9004 <d_print_mod_list+0x25c>
    8dac:	stp	x29, x30, [sp, #-112]!
    8db0:	mov	x29, sp
    8db4:	stp	x23, x24, [sp, #48]
    8db8:	mov	x24, #0x1f                  	// #31
    8dbc:	movk	x24, #0x1a, lsl #48
    8dc0:	stp	x19, x20, [sp, #16]
    8dc4:	mov	w20, w1
    8dc8:	mov	x19, x2
    8dcc:	stp	x21, x22, [sp, #32]
    8dd0:	mov	w21, w3
    8dd4:	mov	w22, #0x1                   	// #1
    8dd8:	stp	x25, x26, [sp, #64]
    8ddc:	mov	x26, x0
    8de0:	mov	x25, #0x1                   	// #1
    8de4:	b	8e28 <d_print_mod_list+0x80>
    8de8:	ldr	x1, [x19, #24]
    8dec:	cmp	w5, #0x29
    8df0:	ldr	x23, [x26, #288]
    8df4:	str	w22, [x19, #16]
    8df8:	str	x1, [x26, #288]
    8dfc:	b.eq	8e74 <d_print_mod_list+0xcc>  // b.none
    8e00:	cmp	w5, #0x2a
    8e04:	b.eq	8ea4 <d_print_mod_list+0xfc>  // b.none
    8e08:	cmp	w5, #0x2
    8e0c:	b.eq	8ed4 <d_print_mod_list+0x12c>  // b.none
    8e10:	mov	w1, w20
    8e14:	mov	x0, x26
    8e18:	bl	82f8 <d_print_mod>
    8e1c:	str	x23, [x26, #288]
    8e20:	ldr	x19, [x19]
    8e24:	cbz	x19, 8e8c <d_print_mod_list+0xe4>
    8e28:	ldr	w2, [x26, #304]
    8e2c:	cbnz	w2, 8e8c <d_print_mod_list+0xe4>
    8e30:	ldr	w2, [x19, #16]
    8e34:	cbnz	w2, 8e20 <d_print_mod_list+0x78>
    8e38:	ldr	x2, [x19, #8]
    8e3c:	ldr	w5, [x2]
    8e40:	cbnz	w21, 8de8 <d_print_mod_list+0x40>
    8e44:	sub	w4, w5, #0x1c
    8e48:	cmp	w4, #0x34
    8e4c:	b.hi	8de8 <d_print_mod_list+0x40>  // b.pmore
    8e50:	lsl	x4, x25, x4
    8e54:	tst	x4, x24
    8e58:	b.ne	8e20 <d_print_mod_list+0x78>  // b.any
    8e5c:	ldr	x1, [x19, #24]
    8e60:	cmp	w5, #0x29
    8e64:	ldr	x23, [x26, #288]
    8e68:	str	w22, [x19, #16]
    8e6c:	str	x1, [x26, #288]
    8e70:	b.ne	8e00 <d_print_mod_list+0x58>  // b.any
    8e74:	ldr	x3, [x19]
    8e78:	add	x2, x2, #0x10
    8e7c:	mov	w1, w20
    8e80:	mov	x0, x26
    8e84:	bl	8af8 <d_print_function_type.isra.0>
    8e88:	str	x23, [x26, #288]
    8e8c:	ldp	x19, x20, [sp, #16]
    8e90:	ldp	x21, x22, [sp, #32]
    8e94:	ldp	x23, x24, [sp, #48]
    8e98:	ldp	x25, x26, [sp, #64]
    8e9c:	ldp	x29, x30, [sp], #112
    8ea0:	ret
    8ea4:	ldr	x3, [x19]
    8ea8:	mov	w1, w20
    8eac:	mov	x0, x26
    8eb0:	add	x2, x2, #0x8
    8eb4:	bl	9178 <d_print_array_type.isra.0>
    8eb8:	str	x23, [x26, #288]
    8ebc:	ldp	x19, x20, [sp, #16]
    8ec0:	ldp	x21, x22, [sp, #32]
    8ec4:	ldp	x23, x24, [sp, #48]
    8ec8:	ldp	x25, x26, [sp, #64]
    8ecc:	ldp	x29, x30, [sp], #112
    8ed0:	ret
    8ed4:	ldr	x2, [x2, #8]
    8ed8:	mov	w1, w20
    8edc:	ldr	x21, [x26, #296]
    8ee0:	str	xzr, [x26, #296]
    8ee4:	mov	x0, x26
    8ee8:	bl	8260 <d_print_comp>
    8eec:	str	x21, [x26, #296]
    8ef0:	tbz	w20, #2, 8fa8 <d_print_mod_list+0x200>
    8ef4:	ldr	x1, [x26, #256]
    8ef8:	add	x0, x1, #0x1
    8efc:	cmp	x1, #0xff
    8f00:	b.ne	8f28 <d_print_mod_list+0x180>  // b.any
    8f04:	ldp	x3, x2, [x26, #272]
    8f08:	strb	wzr, [x26, #255]
    8f0c:	mov	x0, x26
    8f10:	blr	x3
    8f14:	ldr	x2, [x26, #320]
    8f18:	mov	x0, #0x1                   	// #1
    8f1c:	mov	x1, #0x0                   	// #0
    8f20:	add	x2, x2, x0
    8f24:	str	x2, [x26, #320]
    8f28:	str	x0, [x26, #256]
    8f2c:	mov	w0, #0x2e                  	// #46
    8f30:	strb	w0, [x26, x1]
    8f34:	strb	w0, [x26, #264]
    8f38:	ldr	x0, [x19, #8]
    8f3c:	ldr	x21, [x0, #16]
    8f40:	ldr	w2, [x21]
    8f44:	cmp	w2, #0x47
    8f48:	b.eq	9008 <d_print_mod_list+0x260>  // b.none
    8f4c:	mov	x1, #0x1f                  	// #31
    8f50:	mov	x3, #0x1                   	// #1
    8f54:	movk	x1, #0x1a, lsl #48
    8f58:	sub	w2, w2, #0x1c
    8f5c:	cmp	w2, #0x34
    8f60:	b.hi	8f70 <d_print_mod_list+0x1c8>  // b.pmore
    8f64:	lsl	x2, x3, x2
    8f68:	tst	x2, x1
    8f6c:	b.ne	8f9c <d_print_mod_list+0x1f4>  // b.any
    8f70:	mov	x2, x21
    8f74:	mov	w1, w20
    8f78:	mov	x0, x26
    8f7c:	bl	8260 <d_print_comp>
    8f80:	str	x23, [x26, #288]
    8f84:	ldp	x19, x20, [sp, #16]
    8f88:	ldp	x21, x22, [sp, #32]
    8f8c:	ldp	x23, x24, [sp, #48]
    8f90:	ldp	x25, x26, [sp, #64]
    8f94:	ldp	x29, x30, [sp], #112
    8f98:	ret
    8f9c:	ldr	x21, [x21, #8]
    8fa0:	ldr	w2, [x21]
    8fa4:	b	8f58 <d_print_mod_list+0x1b0>
    8fa8:	mov	x22, #0x0                   	// #0
    8fac:	mov	w21, #0x3a                  	// #58
    8fb0:	ldr	x1, [x26, #256]
    8fb4:	b	8fd4 <d_print_mod_list+0x22c>
    8fb8:	mov	x0, x1
    8fbc:	add	x1, x1, #0x1
    8fc0:	str	x1, [x26, #256]
    8fc4:	strb	w21, [x26, x0]
    8fc8:	strb	w21, [x26, #264]
    8fcc:	cbnz	x22, 8f38 <d_print_mod_list+0x190>
    8fd0:	mov	x22, #0x1                   	// #1
    8fd4:	cmp	x1, #0xff
    8fd8:	b.ne	8fb8 <d_print_mod_list+0x210>  // b.any
    8fdc:	ldp	x3, x2, [x26, #272]
    8fe0:	strb	wzr, [x26, #255]
    8fe4:	mov	x0, x26
    8fe8:	blr	x3
    8fec:	ldr	x2, [x26, #320]
    8ff0:	mov	x1, #0x1                   	// #1
    8ff4:	mov	x0, #0x0                   	// #0
    8ff8:	add	x2, x2, x1
    8ffc:	str	x2, [x26, #320]
    9000:	b	8fc0 <d_print_mod_list+0x218>
    9004:	ret
    9008:	adrp	x24, 0 <d_make_comp>
    900c:	add	x24, x24, #0x0
    9010:	adrp	x22, 50 <d_make_comp+0x50>
    9014:	add	x24, x24, #0xd
    9018:	add	x22, x22, #0x0
    901c:	mov	w19, #0x7b                  	// #123
    9020:	ldr	x1, [x26, #256]
    9024:	b	9048 <d_print_mod_list+0x2a0>
    9028:	mov	x0, x1
    902c:	add	x1, x1, #0x1
    9030:	str	x1, [x26, #256]
    9034:	cmp	x22, x24
    9038:	strb	w19, [x26, x0]
    903c:	strb	w19, [x26, #264]
    9040:	b.eq	9078 <d_print_mod_list+0x2d0>  // b.none
    9044:	ldrb	w19, [x22], #1
    9048:	cmp	x1, #0xff
    904c:	b.ne	9028 <d_print_mod_list+0x280>  // b.any
    9050:	ldp	x3, x2, [x26, #272]
    9054:	strb	wzr, [x26, #255]
    9058:	mov	x0, x26
    905c:	blr	x3
    9060:	ldr	x2, [x26, #320]
    9064:	mov	x1, #0x1                   	// #1
    9068:	mov	x0, #0x0                   	// #0
    906c:	add	x2, x2, x1
    9070:	str	x2, [x26, #320]
    9074:	b	9030 <d_print_mod_list+0x288>
    9078:	ldr	w2, [x21, #16]
    907c:	adrp	x1, 0 <d_make_comp>
    9080:	add	x1, x1, #0x0
    9084:	add	x19, sp, #0x50
    9088:	add	w2, w2, #0x1
    908c:	mov	x0, x19
    9090:	bl	0 <sprintf>
    9094:	mov	x0, x19
    9098:	bl	0 <strlen>
    909c:	ldr	x1, [x26, #256]
    90a0:	cbz	x0, 9100 <d_print_mod_list+0x358>
    90a4:	add	x24, x19, x0
    90a8:	b	90cc <d_print_mod_list+0x324>
    90ac:	mov	x0, x1
    90b0:	add	x1, x1, #0x1
    90b4:	str	x1, [x26, #256]
    90b8:	add	x19, x19, #0x1
    90bc:	strb	w22, [x26, x0]
    90c0:	cmp	x24, x19
    90c4:	strb	w22, [x26, #264]
    90c8:	b.eq	9100 <d_print_mod_list+0x358>  // b.none
    90cc:	ldrb	w22, [x19]
    90d0:	cmp	x1, #0xff
    90d4:	b.ne	90ac <d_print_mod_list+0x304>  // b.any
    90d8:	ldp	x3, x2, [x26, #272]
    90dc:	strb	wzr, [x26, #255]
    90e0:	mov	x0, x26
    90e4:	blr	x3
    90e8:	ldr	x2, [x26, #320]
    90ec:	mov	x1, #0x1                   	// #1
    90f0:	mov	x0, #0x0                   	// #0
    90f4:	add	x2, x2, x1
    90f8:	str	x2, [x26, #320]
    90fc:	b	90b4 <d_print_mod_list+0x30c>
    9100:	adrp	x19, 0 <d_make_comp>
    9104:	add	x19, x19, #0x0
    9108:	add	x24, x19, #0x3
    910c:	mov	w22, #0x7d                  	// #125
    9110:	b	9138 <d_print_mod_list+0x390>
    9114:	mov	x0, x1
    9118:	add	x1, x1, #0x1
    911c:	str	x1, [x26, #256]
    9120:	add	x19, x19, #0x1
    9124:	strb	w22, [x26, x0]
    9128:	cmp	x24, x19
    912c:	strb	w22, [x26, #264]
    9130:	b.eq	9168 <d_print_mod_list+0x3c0>  // b.none
    9134:	ldrb	w22, [x19]
    9138:	cmp	x1, #0xff
    913c:	b.ne	9114 <d_print_mod_list+0x36c>  // b.any
    9140:	ldp	x3, x2, [x26, #272]
    9144:	strb	wzr, [x26, #255]
    9148:	mov	x0, x26
    914c:	blr	x3
    9150:	ldr	x2, [x26, #320]
    9154:	mov	x1, #0x1                   	// #1
    9158:	mov	x0, #0x0                   	// #0
    915c:	add	x2, x2, x1
    9160:	str	x2, [x26, #320]
    9164:	b	911c <d_print_mod_list+0x374>
    9168:	ldr	x21, [x21, #8]
    916c:	ldr	w2, [x21]
    9170:	b	8f4c <d_print_mod_list+0x1a4>
    9174:	nop

0000000000009178 <d_print_array_type.isra.0>:
    9178:	stp	x29, x30, [sp, #-64]!
    917c:	mov	x29, sp
    9180:	stp	x19, x20, [sp, #16]
    9184:	mov	x19, x0
    9188:	mov	x20, x3
    918c:	stp	x21, x22, [sp, #32]
    9190:	mov	x0, x3
    9194:	mov	w21, w1
    9198:	stp	x23, x24, [sp, #48]
    919c:	mov	x22, x2
    91a0:	cbz	x3, 91cc <d_print_array_type.isra.0+0x54>
    91a4:	nop
    91a8:	ldr	w4, [x0, #16]
    91ac:	cbz	w4, 92b8 <d_print_array_type.isra.0+0x140>
    91b0:	ldr	x0, [x0]
    91b4:	cbnz	x0, 91a8 <d_print_array_type.isra.0+0x30>
    91b8:	mov	x2, x20
    91bc:	mov	w1, w21
    91c0:	mov	x0, x19
    91c4:	mov	w3, #0x0                   	// #0
    91c8:	bl	8da8 <d_print_mod_list>
    91cc:	ldr	x23, [x19, #256]
    91d0:	cmp	x23, #0xff
    91d4:	b.eq	92e4 <d_print_array_type.isra.0+0x16c>  // b.none
    91d8:	add	x1, x23, #0x1
    91dc:	str	x1, [x19, #256]
    91e0:	mov	w0, #0x20                  	// #32
    91e4:	strb	w0, [x19, x23]
    91e8:	strb	w0, [x19, #264]
    91ec:	cmp	x1, #0xff
    91f0:	b.eq	927c <d_print_array_type.isra.0+0x104>  // b.none
    91f4:	add	x0, x1, #0x1
    91f8:	str	x0, [x19, #256]
    91fc:	mov	w2, #0x5b                  	// #91
    9200:	strb	w2, [x19, x1]
    9204:	strb	w2, [x19, #264]
    9208:	ldr	x2, [x22]
    920c:	cbz	x2, 9220 <d_print_array_type.isra.0+0xa8>
    9210:	mov	x0, x19
    9214:	mov	w1, w21
    9218:	bl	8260 <d_print_comp>
    921c:	ldr	x0, [x19, #256]
    9220:	cmp	x0, #0xff
    9224:	b.eq	9250 <d_print_array_type.isra.0+0xd8>  // b.none
    9228:	add	x1, x0, #0x1
    922c:	str	x1, [x19, #256]
    9230:	mov	w1, #0x5d                  	// #93
    9234:	strb	w1, [x19, x0]
    9238:	strb	w1, [x19, #264]
    923c:	ldp	x19, x20, [sp, #16]
    9240:	ldp	x21, x22, [sp, #32]
    9244:	ldp	x23, x24, [sp, #48]
    9248:	ldp	x29, x30, [sp], #64
    924c:	ret
    9250:	ldp	x3, x2, [x19, #272]
    9254:	strb	wzr, [x19, #255]
    9258:	mov	x1, x0
    925c:	mov	x0, x19
    9260:	blr	x3
    9264:	ldr	x2, [x19, #320]
    9268:	mov	x1, #0x1                   	// #1
    926c:	mov	x0, #0x0                   	// #0
    9270:	add	x2, x2, x1
    9274:	str	x2, [x19, #320]
    9278:	b	922c <d_print_array_type.isra.0+0xb4>
    927c:	ldp	x3, x2, [x19, #272]
    9280:	strb	wzr, [x19, #255]
    9284:	mov	x0, x19
    9288:	blr	x3
    928c:	mov	w1, #0x5b                  	// #91
    9290:	strb	w1, [x19]
    9294:	strb	w1, [x19, #264]
    9298:	mov	x0, #0x1                   	// #1
    929c:	ldr	x1, [x19, #320]
    92a0:	ldr	x2, [x22]
    92a4:	add	x1, x1, x0
    92a8:	str	x0, [x19, #256]
    92ac:	str	x1, [x19, #320]
    92b0:	cbnz	x2, 9210 <d_print_array_type.isra.0+0x98>
    92b4:	b	9228 <d_print_array_type.isra.0+0xb0>
    92b8:	ldr	x0, [x0, #8]
    92bc:	ldr	w0, [x0]
    92c0:	cmp	w0, #0x2a
    92c4:	b.ne	9328 <d_print_array_type.isra.0+0x1b0>  // b.any
    92c8:	mov	w1, w21
    92cc:	mov	x2, x20
    92d0:	mov	x0, x19
    92d4:	mov	w3, #0x0                   	// #0
    92d8:	bl	8da8 <d_print_mod_list>
    92dc:	ldr	x1, [x19, #256]
    92e0:	b	91ec <d_print_array_type.isra.0+0x74>
    92e4:	ldp	x3, x2, [x19, #272]
    92e8:	strb	wzr, [x19, #255]
    92ec:	mov	x1, x23
    92f0:	mov	x0, x19
    92f4:	blr	x3
    92f8:	mov	w1, #0x5b20                	// #23328
    92fc:	mov	w0, #0x5b                  	// #91
    9300:	strh	w1, [x19]
    9304:	strb	w0, [x19, #264]
    9308:	mov	x0, #0x2                   	// #2
    930c:	ldr	x1, [x19, #320]
    9310:	ldr	x2, [x22]
    9314:	add	x1, x1, #0x1
    9318:	str	x0, [x19, #256]
    931c:	str	x1, [x19, #320]
    9320:	cbnz	x2, 9210 <d_print_array_type.isra.0+0x98>
    9324:	b	9228 <d_print_array_type.isra.0+0xb0>
    9328:	mov	w24, #0x20                  	// #32
    932c:	mov	x23, #0x0                   	// #0
    9330:	ldr	x1, [x19, #256]
    9334:	b	935c <d_print_array_type.isra.0+0x1e4>
    9338:	mov	x0, x1
    933c:	add	x1, x1, #0x1
    9340:	str	x1, [x19, #256]
    9344:	cmp	x23, #0x1
    9348:	strb	w24, [x19, x0]
    934c:	strb	w24, [x19, #264]
    9350:	mov	w24, #0x28                  	// #40
    9354:	b.eq	93a0 <d_print_array_type.isra.0+0x228>  // b.none
    9358:	mov	x23, #0x1                   	// #1
    935c:	cmp	x1, #0xff
    9360:	b.ne	9338 <d_print_array_type.isra.0+0x1c0>  // b.any
    9364:	ldp	x3, x2, [x19, #272]
    9368:	strb	wzr, [x19, #255]
    936c:	mov	x0, x19
    9370:	blr	x3
    9374:	ldr	x2, [x19, #320]
    9378:	mov	x0, #0x0                   	// #0
    937c:	mov	x1, #0x1                   	// #1
    9380:	str	x1, [x19, #256]
    9384:	add	x2, x2, x1
    9388:	str	x2, [x19, #320]
    938c:	strb	w24, [x19, x0]
    9390:	cmp	x23, #0x1
    9394:	strb	w24, [x19, #264]
    9398:	mov	w24, #0x28                  	// #40
    939c:	b.ne	9358 <d_print_array_type.isra.0+0x1e0>  // b.any
    93a0:	mov	w1, w21
    93a4:	mov	x2, x20
    93a8:	mov	x0, x19
    93ac:	mov	w3, #0x0                   	// #0
    93b0:	bl	8da8 <d_print_mod_list>
    93b4:	ldr	x1, [x19, #256]
    93b8:	cmp	x1, #0xff
    93bc:	b.eq	93d8 <d_print_array_type.isra.0+0x260>  // b.none
    93c0:	add	x23, x1, #0x1
    93c4:	str	x23, [x19, #256]
    93c8:	mov	w0, #0x29                  	// #41
    93cc:	strb	w0, [x19, x1]
    93d0:	strb	w0, [x19, #264]
    93d4:	b	91d0 <d_print_array_type.isra.0+0x58>
    93d8:	ldp	x3, x2, [x19, #272]
    93dc:	strb	wzr, [x19, #255]
    93e0:	mov	x0, x19
    93e4:	blr	x3
    93e8:	ldr	x0, [x19, #320]
    93ec:	mov	w1, #0x29                  	// #41
    93f0:	strb	w1, [x19]
    93f4:	add	x0, x0, #0x1
    93f8:	str	x0, [x19, #320]
    93fc:	b	91d8 <d_print_array_type.isra.0+0x60>

0000000000009400 <d_print_expr_op>:
    9400:	ldr	w4, [x2]
    9404:	cmp	w4, #0x32
    9408:	b.eq	9410 <d_print_expr_op+0x10>  // b.none
    940c:	b	8260 <d_print_comp>
    9410:	stp	x29, x30, [sp, #-48]!
    9414:	mov	x29, sp
    9418:	stp	x19, x20, [sp, #16]
    941c:	mov	x19, x0
    9420:	ldr	x0, [x2, #8]
    9424:	stp	x21, x22, [sp, #32]
    9428:	ldrsw	x22, [x0, #16]
    942c:	ldr	x20, [x0, #8]
    9430:	cbz	x22, 94a8 <d_print_expr_op+0xa8>
    9434:	add	x22, x20, x22
    9438:	ldr	x1, [x19, #256]
    943c:	b	9460 <d_print_expr_op+0x60>
    9440:	mov	x2, x1
    9444:	add	x1, x1, #0x1
    9448:	str	x1, [x19, #256]
    944c:	add	x20, x20, #0x1
    9450:	cmp	x20, x22
    9454:	strb	w21, [x19, x2]
    9458:	strb	w21, [x19, #264]
    945c:	b.eq	94a8 <d_print_expr_op+0xa8>  // b.none
    9460:	ldrb	w21, [x20]
    9464:	cmp	x1, #0xff
    9468:	b.ne	9440 <d_print_expr_op+0x40>  // b.any
    946c:	ldp	x3, x2, [x19, #272]
    9470:	strb	wzr, [x19, #255]
    9474:	mov	x0, x19
    9478:	add	x20, x20, #0x1
    947c:	blr	x3
    9480:	ldr	x0, [x19, #320]
    9484:	mov	x2, #0x0                   	// #0
    9488:	mov	x1, #0x1                   	// #1
    948c:	str	x1, [x19, #256]
    9490:	add	x0, x0, x1
    9494:	str	x0, [x19, #320]
    9498:	strb	w21, [x19, x2]
    949c:	cmp	x20, x22
    94a0:	strb	w21, [x19, #264]
    94a4:	b.ne	9460 <d_print_expr_op+0x60>  // b.any
    94a8:	ldp	x19, x20, [sp, #16]
    94ac:	ldp	x21, x22, [sp, #32]
    94b0:	ldp	x29, x30, [sp], #48
    94b4:	ret

00000000000094b8 <d_print_subexpr>:
    94b8:	stp	x29, x30, [sp, #-48]!
    94bc:	mov	x29, sp
    94c0:	str	x21, [sp, #32]
    94c4:	mov	w21, w1
    94c8:	ldr	w1, [x2]
    94cc:	stp	x19, x20, [sp, #16]
    94d0:	mov	x20, x2
    94d4:	cmp	w1, #0x31
    94d8:	mov	x19, x0
    94dc:	ccmp	w1, #0x1, #0x0, ne  // ne = any
    94e0:	b.ls	9570 <d_print_subexpr+0xb8>  // b.plast
    94e4:	cmp	w1, #0x6
    94e8:	b.eq	9570 <d_print_subexpr+0xb8>  // b.none
    94ec:	ldr	x1, [x0, #256]
    94f0:	cmp	x1, #0xff
    94f4:	b.eq	958c <d_print_subexpr+0xd4>  // b.none
    94f8:	add	x0, x1, #0x1
    94fc:	str	x0, [x19, #256]
    9500:	mov	w0, #0x28                  	// #40
    9504:	strb	w0, [x19, x1]
    9508:	mov	x2, x20
    950c:	strb	w0, [x19, #264]
    9510:	mov	w1, w21
    9514:	mov	x0, x19
    9518:	bl	8260 <d_print_comp>
    951c:	ldr	x1, [x19, #256]
    9520:	add	x0, x1, #0x1
    9524:	cmp	x1, #0xff
    9528:	b.ne	9550 <d_print_subexpr+0x98>  // b.any
    952c:	ldp	x3, x2, [x19, #272]
    9530:	strb	wzr, [x19, #255]
    9534:	mov	x0, x19
    9538:	blr	x3
    953c:	ldr	x2, [x19, #320]
    9540:	mov	x0, #0x1                   	// #1
    9544:	mov	x1, #0x0                   	// #0
    9548:	add	x2, x2, x0
    954c:	str	x2, [x19, #320]
    9550:	str	x0, [x19, #256]
    9554:	mov	w0, #0x29                  	// #41
    9558:	strb	w0, [x19, x1]
    955c:	strb	w0, [x19, #264]
    9560:	ldp	x19, x20, [sp, #16]
    9564:	ldr	x21, [sp, #32]
    9568:	ldp	x29, x30, [sp], #48
    956c:	ret
    9570:	mov	x2, x20
    9574:	mov	w1, w21
    9578:	mov	x0, x19
    957c:	ldp	x19, x20, [sp, #16]
    9580:	ldr	x21, [sp, #32]
    9584:	ldp	x29, x30, [sp], #48
    9588:	b	8260 <d_print_comp>
    958c:	ldp	x3, x2, [x0, #272]
    9590:	strb	wzr, [x0, #255]
    9594:	blr	x3
    9598:	ldr	x2, [x19, #320]
    959c:	mov	x0, #0x1                   	// #1
    95a0:	mov	x1, #0x0                   	// #0
    95a4:	add	x2, x2, x0
    95a8:	str	x2, [x19, #320]
    95ac:	b	94fc <d_print_subexpr+0x44>

00000000000095b0 <d_maybe_print_fold_expression.isra.0>:
    95b0:	stp	x29, x30, [sp, #-80]!
    95b4:	mov	x29, sp
    95b8:	stp	x19, x20, [sp, #16]
    95bc:	mov	x19, x0
    95c0:	ldr	x0, [x2, #8]
    95c4:	stp	x21, x22, [sp, #32]
    95c8:	mov	w22, w1
    95cc:	ldr	x0, [x0]
    95d0:	ldrb	w1, [x0]
    95d4:	cmp	w1, #0x66
    95d8:	b.ne	976c <d_maybe_print_fold_expression.isra.0+0x1bc>  // b.any
    95dc:	ldr	x1, [x3]
    95e0:	stp	x23, x24, [sp, #48]
    95e4:	stp	x25, x26, [sp, #64]
    95e8:	mov	x25, #0x0                   	// #0
    95ec:	ldp	x23, x26, [x1, #8]
    95f0:	ldr	w1, [x26]
    95f4:	cmp	w1, #0x3c
    95f8:	b.eq	9834 <d_maybe_print_fold_expression.isra.0+0x284>  // b.none
    95fc:	ldr	w21, [x19, #316]
    9600:	mov	w1, #0xffffffff            	// #-1
    9604:	str	w1, [x19, #316]
    9608:	ldrb	w0, [x0, #1]
    960c:	cmp	w0, #0x6c
    9610:	b.eq	9854 <d_maybe_print_fold_expression.isra.0+0x2a4>  // b.none
    9614:	b.hi	9780 <d_maybe_print_fold_expression.isra.0+0x1d0>  // b.pmore
    9618:	cmp	w0, #0x4c
    961c:	b.eq	9628 <d_maybe_print_fold_expression.isra.0+0x78>  // b.none
    9620:	cmp	w0, #0x52
    9624:	b.ne	974c <d_maybe_print_fold_expression.isra.0+0x19c>  // b.any
    9628:	ldr	x1, [x19, #256]
    962c:	add	x0, x1, #0x1
    9630:	cmp	x1, #0xff
    9634:	b.eq	9914 <d_maybe_print_fold_expression.isra.0+0x364>  // b.none
    9638:	str	x0, [x19, #256]
    963c:	mov	w0, #0x28                  	// #40
    9640:	strb	w0, [x19, x1]
    9644:	mov	x2, x26
    9648:	strb	w0, [x19, #264]
    964c:	mov	w1, w22
    9650:	mov	x0, x19
    9654:	adrp	x20, 0 <d_make_comp>
    9658:	bl	94b8 <d_print_subexpr>
    965c:	add	x20, x20, #0x0
    9660:	mov	w1, w22
    9664:	mov	x2, x23
    9668:	mov	x0, x19
    966c:	bl	9400 <d_print_expr_op>
    9670:	add	x26, x20, #0x3
    9674:	mov	w24, #0x2e                  	// #46
    9678:	ldr	x1, [x19, #256]
    967c:	b	96a4 <d_maybe_print_fold_expression.isra.0+0xf4>
    9680:	mov	x0, x1
    9684:	add	x1, x1, #0x1
    9688:	str	x1, [x19, #256]
    968c:	add	x20, x20, #0x1
    9690:	cmp	x26, x20
    9694:	strb	w24, [x19, x0]
    9698:	strb	w24, [x19, #264]
    969c:	b.eq	96e8 <d_maybe_print_fold_expression.isra.0+0x138>  // b.none
    96a0:	ldrb	w24, [x20]
    96a4:	cmp	x1, #0xff
    96a8:	b.ne	9680 <d_maybe_print_fold_expression.isra.0+0xd0>  // b.any
    96ac:	ldp	x3, x2, [x19, #272]
    96b0:	strb	wzr, [x19, #255]
    96b4:	mov	x0, x19
    96b8:	add	x20, x20, #0x1
    96bc:	blr	x3
    96c0:	ldr	x2, [x19, #320]
    96c4:	mov	x0, #0x0                   	// #0
    96c8:	mov	x1, #0x1                   	// #1
    96cc:	str	x1, [x19, #256]
    96d0:	add	x2, x2, x1
    96d4:	str	x2, [x19, #320]
    96d8:	strb	w24, [x19, x0]
    96dc:	cmp	x26, x20
    96e0:	strb	w24, [x19, #264]
    96e4:	b.ne	96a0 <d_maybe_print_fold_expression.isra.0+0xf0>  // b.any
    96e8:	mov	x2, x23
    96ec:	mov	w1, w22
    96f0:	mov	x0, x19
    96f4:	bl	9400 <d_print_expr_op>
    96f8:	mov	x2, x25
    96fc:	mov	w1, w22
    9700:	mov	x0, x19
    9704:	bl	94b8 <d_print_subexpr>
    9708:	ldr	x1, [x19, #256]
    970c:	add	x0, x1, #0x1
    9710:	cmp	x1, #0xff
    9714:	b.ne	973c <d_maybe_print_fold_expression.isra.0+0x18c>  // b.any
    9718:	ldp	x3, x2, [x19, #272]
    971c:	strb	wzr, [x19, #255]
    9720:	mov	x0, x19
    9724:	blr	x3
    9728:	ldr	x2, [x19, #320]
    972c:	mov	x0, #0x1                   	// #1
    9730:	mov	x1, #0x0                   	// #0
    9734:	add	x2, x2, x0
    9738:	str	x2, [x19, #320]
    973c:	str	x0, [x19, #256]
    9740:	mov	w0, #0x29                  	// #41
    9744:	strb	w0, [x19, x1]
    9748:	strb	w0, [x19, #264]
    974c:	ldp	x23, x24, [sp, #48]
    9750:	mov	w0, #0x1                   	// #1
    9754:	ldp	x25, x26, [sp, #64]
    9758:	str	w21, [x19, #316]
    975c:	ldp	x19, x20, [sp, #16]
    9760:	ldp	x21, x22, [sp, #32]
    9764:	ldp	x29, x30, [sp], #80
    9768:	ret
    976c:	mov	w0, #0x0                   	// #0
    9770:	ldp	x19, x20, [sp, #16]
    9774:	ldp	x21, x22, [sp, #32]
    9778:	ldp	x29, x30, [sp], #80
    977c:	ret
    9780:	cmp	w0, #0x72
    9784:	b.ne	974c <d_maybe_print_fold_expression.isra.0+0x19c>  // b.any
    9788:	ldr	x1, [x19, #256]
    978c:	add	x0, x1, #0x1
    9790:	cmp	x1, #0xff
    9794:	b.eq	98ec <d_maybe_print_fold_expression.isra.0+0x33c>  // b.none
    9798:	str	x0, [x19, #256]
    979c:	mov	w0, #0x28                  	// #40
    97a0:	strb	w0, [x19, x1]
    97a4:	mov	x2, x26
    97a8:	strb	w0, [x19, #264]
    97ac:	mov	w1, w22
    97b0:	mov	x0, x19
    97b4:	adrp	x20, 0 <d_make_comp>
    97b8:	bl	94b8 <d_print_subexpr>
    97bc:	add	x20, x20, #0x0
    97c0:	mov	w1, w22
    97c4:	mov	x2, x23
    97c8:	mov	x0, x19
    97cc:	bl	9400 <d_print_expr_op>
    97d0:	add	x22, x20, #0x4
    97d4:	mov	w24, #0x2e                  	// #46
    97d8:	ldr	x1, [x19, #256]
    97dc:	b	9804 <d_maybe_print_fold_expression.isra.0+0x254>
    97e0:	mov	x0, x1
    97e4:	add	x1, x1, #0x1
    97e8:	str	x1, [x19, #256]
    97ec:	add	x20, x20, #0x1
    97f0:	strb	w24, [x19, x0]
    97f4:	cmp	x20, x22
    97f8:	strb	w24, [x19, #264]
    97fc:	b.eq	974c <d_maybe_print_fold_expression.isra.0+0x19c>  // b.none
    9800:	ldrb	w24, [x20]
    9804:	cmp	x1, #0xff
    9808:	b.ne	97e0 <d_maybe_print_fold_expression.isra.0+0x230>  // b.any
    980c:	ldp	x3, x2, [x19, #272]
    9810:	strb	wzr, [x19, #255]
    9814:	mov	x0, x19
    9818:	blr	x3
    981c:	ldr	x2, [x19, #320]
    9820:	mov	x1, #0x1                   	// #1
    9824:	mov	x0, #0x0                   	// #0
    9828:	add	x2, x2, x1
    982c:	str	x2, [x19, #320]
    9830:	b	97e8 <d_maybe_print_fold_expression.isra.0+0x238>
    9834:	ldr	w21, [x19, #316]
    9838:	mov	w1, #0xffffffff            	// #-1
    983c:	ldr	x25, [x26, #16]
    9840:	ldr	x26, [x26, #8]
    9844:	str	w1, [x19, #316]
    9848:	ldrb	w0, [x0, #1]
    984c:	cmp	w0, #0x6c
    9850:	b.ne	9614 <d_maybe_print_fold_expression.isra.0+0x64>  // b.any
    9854:	adrp	x20, 0 <d_make_comp>
    9858:	add	x20, x20, #0x0
    985c:	add	x25, x20, #0x4
    9860:	mov	w24, #0x28                  	// #40
    9864:	ldr	x1, [x19, #256]
    9868:	b	9890 <d_maybe_print_fold_expression.isra.0+0x2e0>
    986c:	mov	x0, x1
    9870:	add	x1, x1, #0x1
    9874:	str	x1, [x19, #256]
    9878:	add	x20, x20, #0x1
    987c:	cmp	x25, x20
    9880:	strb	w24, [x19, x0]
    9884:	strb	w24, [x19, #264]
    9888:	b.eq	98d4 <d_maybe_print_fold_expression.isra.0+0x324>  // b.none
    988c:	ldrb	w24, [x20]
    9890:	cmp	x1, #0xff
    9894:	b.ne	986c <d_maybe_print_fold_expression.isra.0+0x2bc>  // b.any
    9898:	ldp	x3, x2, [x19, #272]
    989c:	strb	wzr, [x19, #255]
    98a0:	mov	x0, x19
    98a4:	add	x20, x20, #0x1
    98a8:	blr	x3
    98ac:	ldr	x2, [x19, #320]
    98b0:	mov	x0, #0x0                   	// #0
    98b4:	mov	x1, #0x1                   	// #1
    98b8:	str	x1, [x19, #256]
    98bc:	add	x2, x2, x1
    98c0:	str	x2, [x19, #320]
    98c4:	strb	w24, [x19, x0]
    98c8:	cmp	x25, x20
    98cc:	strb	w24, [x19, #264]
    98d0:	b.ne	988c <d_maybe_print_fold_expression.isra.0+0x2dc>  // b.any
    98d4:	mov	x2, x23
    98d8:	mov	w1, w22
    98dc:	mov	x0, x19
    98e0:	bl	9400 <d_print_expr_op>
    98e4:	mov	x2, x26
    98e8:	b	96fc <d_maybe_print_fold_expression.isra.0+0x14c>
    98ec:	ldp	x3, x2, [x19, #272]
    98f0:	strb	wzr, [x19, #255]
    98f4:	mov	x0, x19
    98f8:	blr	x3
    98fc:	ldr	x2, [x19, #320]
    9900:	mov	x0, #0x1                   	// #1
    9904:	mov	x1, #0x0                   	// #0
    9908:	add	x2, x2, x0
    990c:	str	x2, [x19, #320]
    9910:	b	9798 <d_maybe_print_fold_expression.isra.0+0x1e8>
    9914:	ldp	x3, x2, [x19, #272]
    9918:	strb	wzr, [x19, #255]
    991c:	mov	x0, x19
    9920:	blr	x3
    9924:	ldr	x2, [x19, #320]
    9928:	mov	x0, #0x1                   	// #1
    992c:	mov	x1, #0x0                   	// #0
    9930:	add	x2, x2, x0
    9934:	str	x2, [x19, #320]
    9938:	b	9638 <d_maybe_print_fold_expression.isra.0+0x88>
    993c:	nop

0000000000009940 <d_demangle_callback.constprop.0>:
    9940:	sub	sp, sp, #0x230
    9944:	stp	x29, x30, [sp]
    9948:	mov	x29, sp
    994c:	stp	x19, x20, [sp, #16]
    9950:	mov	x19, x0
    9954:	mov	x20, x1
    9958:	stp	x21, x22, [sp, #32]
    995c:	mov	x21, x2
    9960:	stp	x23, x24, [sp, #48]
    9964:	stp	x25, x26, [sp, #64]
    9968:	str	x27, [sp, #80]
    996c:	ldrb	w24, [x0]
    9970:	cmp	w24, #0x5f
    9974:	b.eq	9b20 <d_demangle_callback.constprop.0+0x1e0>  // b.none
    9978:	adrp	x1, 0 <d_make_comp>
    997c:	mov	x0, x19
    9980:	add	x1, x1, #0x0
    9984:	mov	x2, #0x8                   	// #8
    9988:	mov	w23, #0x0                   	// #0
    998c:	bl	0 <strncmp>
    9990:	cbnz	w0, 99e0 <d_demangle_callback.constprop.0+0xa0>
    9994:	ldrb	w0, [x19, #8]
    9998:	mov	w2, #0x5f                  	// #95
    999c:	mov	w1, #0x24                  	// #36
    99a0:	cmp	w0, #0x2e
    99a4:	ccmp	w0, w2, #0x4, ne  // ne = any
    99a8:	ccmp	w0, w1, #0x4, ne  // ne = any
    99ac:	b.ne	99e0 <d_demangle_callback.constprop.0+0xa0>  // b.any
    99b0:	ldrb	w0, [x19, #9]
    99b4:	mov	w1, #0x49                  	// #73
    99b8:	cmp	w0, #0x44
    99bc:	ccmp	w0, w1, #0x4, ne  // ne = any
    99c0:	b.ne	99e0 <d_demangle_callback.constprop.0+0xa0>  // b.any
    99c4:	ldrb	w1, [x19, #10]
    99c8:	cmp	w1, w2
    99cc:	b.ne	99e0 <d_demangle_callback.constprop.0+0xa0>  // b.any
    99d0:	cmp	w0, #0x49
    99d4:	cset	w23, ne  // ne = any
    99d8:	add	w23, w23, #0x2
    99dc:	nop
    99e0:	mov	x0, x19
    99e4:	bl	0 <strlen>
    99e8:	mov	x3, x0
    99ec:	mov	w1, #0x11                  	// #17
    99f0:	add	x0, x19, x0
    99f4:	stp	x19, x0, [x29, #96]
    99f8:	lsl	w4, w3, #1
    99fc:	str	w1, [x29, #112]
    9a00:	cmp	w4, #0x800
    9a04:	str	x19, [x29, #120]
    9a08:	mov	w0, #0x0                   	// #0
    9a0c:	stp	wzr, w4, [x29, #136]
    9a10:	stp	wzr, w3, [x29, #152]
    9a14:	stp	xzr, xzr, [x29, #160]
    9a18:	str	xzr, [x29, #176]
    9a1c:	b.hi	9afc <d_demangle_callback.constprop.0+0x1bc>  // b.pmore
    9a20:	mov	x22, sp
    9a24:	mov	w27, #0x18                  	// #24
    9a28:	sbfiz	x3, x3, #3, #32
    9a2c:	cmp	w23, #0x1
    9a30:	add	x3, x3, #0xf
    9a34:	smsubl	x0, w4, w27, x22
    9a38:	and	x3, x3, #0xfffffffffffffff0
    9a3c:	mov	sp, x0
    9a40:	mov	x25, sp
    9a44:	sub	sp, sp, x3
    9a48:	mov	x0, sp
    9a4c:	str	x25, [x29, #128]
    9a50:	str	x0, [x29, #144]
    9a54:	b.eq	9b60 <d_demangle_callback.constprop.0+0x220>  // b.none
    9a58:	sub	w0, w23, #0x2
    9a5c:	cmp	w0, #0x1
    9a60:	b.hi	9ba4 <d_demangle_callback.constprop.0+0x264>  // b.pmore
    9a64:	cmp	w23, #0x2
    9a68:	ldrb	w0, [x19, #11]
    9a6c:	add	x24, x19, #0xb
    9a70:	str	x24, [x29, #120]
    9a74:	cset	w1, ne  // ne = any
    9a78:	cmp	w0, #0x5f
    9a7c:	add	w23, w1, #0x44
    9a80:	b.eq	9b34 <d_demangle_callback.constprop.0+0x1f4>  // b.none
    9a84:	cmp	w4, #0x0
    9a88:	b.le	9c88 <d_demangle_callback.constprop.0+0x348>
    9a8c:	mov	x0, x24
    9a90:	bl	0 <strlen>
    9a94:	mov	w1, #0x1                   	// #1
    9a98:	str	wzr, [x25, #4]
    9a9c:	str	w1, [x29, #136]
    9aa0:	cmp	w0, #0x0
    9aa4:	b.le	9c88 <d_demangle_callback.constprop.0+0x348>
    9aa8:	add	x26, x29, #0x60
    9aac:	str	wzr, [x25]
    9ab0:	str	x24, [x25, #8]
    9ab4:	str	w0, [x25, #16]
    9ab8:	mov	w1, w23
    9abc:	mov	x2, x25
    9ac0:	mov	x3, #0x0                   	// #0
    9ac4:	mov	x0, x26
    9ac8:	bl	0 <d_make_comp>
    9acc:	mov	x19, x0
    9ad0:	ldr	x23, [x29, #120]
    9ad4:	mov	x0, x23
    9ad8:	bl	0 <strlen>
    9adc:	add	x1, x23, x0
    9ae0:	str	x1, [x29, #120]
    9ae4:	ldrb	w0, [x23, x0]
    9ae8:	cmp	w0, #0x0
    9aec:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    9af0:	b.ne	9bc4 <d_demangle_callback.constprop.0+0x284>  // b.any
    9af4:	mov	sp, x22
    9af8:	mov	w0, #0x0                   	// #0
    9afc:	mov	sp, x29
    9b00:	ldp	x29, x30, [sp]
    9b04:	ldp	x19, x20, [sp, #16]
    9b08:	ldp	x21, x22, [sp, #32]
    9b0c:	ldp	x23, x24, [sp, #48]
    9b10:	ldp	x25, x26, [sp, #64]
    9b14:	ldr	x27, [sp, #80]
    9b18:	add	sp, sp, #0x230
    9b1c:	ret
    9b20:	ldrb	w0, [x0, #1]
    9b24:	mov	w23, #0x1                   	// #1
    9b28:	cmp	w0, #0x5a
    9b2c:	b.ne	9978 <d_demangle_callback.constprop.0+0x38>  // b.any
    9b30:	b	99e0 <d_demangle_callback.constprop.0+0xa0>
    9b34:	ldrb	w0, [x19, #12]
    9b38:	cmp	w0, #0x5a
    9b3c:	b.ne	9a84 <d_demangle_callback.constprop.0+0x144>  // b.any
    9b40:	add	x26, x29, #0x60
    9b44:	add	x19, x19, #0xd
    9b48:	mov	x0, x26
    9b4c:	mov	w1, #0x0                   	// #0
    9b50:	str	x19, [x29, #120]
    9b54:	bl	1dd8 <d_encoding>
    9b58:	mov	x25, x0
    9b5c:	b	9ab8 <d_demangle_callback.constprop.0+0x178>
    9b60:	cmp	w24, #0x5f
    9b64:	b.ne	9af4 <d_demangle_callback.constprop.0+0x1b4>  // b.any
    9b68:	ldrb	w0, [x19, #1]
    9b6c:	cmp	w0, #0x5a
    9b70:	b.ne	9af4 <d_demangle_callback.constprop.0+0x1b4>  // b.any
    9b74:	add	x26, x29, #0x60
    9b78:	add	x19, x19, #0x2
    9b7c:	mov	w1, w23
    9b80:	mov	x0, x26
    9b84:	str	x19, [x29, #120]
    9b88:	bl	1dd8 <d_encoding>
    9b8c:	ldr	w3, [x29, #112]
    9b90:	mov	x19, x0
    9b94:	tbnz	w3, #0, 9c94 <d_demangle_callback.constprop.0+0x354>
    9b98:	ldr	x0, [x29, #120]
    9b9c:	ldrb	w0, [x0]
    9ba0:	b	9ae8 <d_demangle_callback.constprop.0+0x1a8>
    9ba4:	add	x0, x29, #0x60
    9ba8:	bl	2b20 <d_type>
    9bac:	ldr	x3, [x29, #120]
    9bb0:	mov	x19, x0
    9bb4:	ldrb	w0, [x3]
    9bb8:	cmp	w0, #0x0
    9bbc:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    9bc0:	b.eq	9af4 <d_demangle_callback.constprop.0+0x1b4>  // b.none
    9bc4:	add	x2, x29, #0x208
    9bc8:	add	x23, x29, #0xb8
    9bcc:	mov	x0, x23
    9bd0:	mov	x1, x19
    9bd4:	str	xzr, [x29, #440]
    9bd8:	stp	xzr, xzr, [x2]
    9bdc:	stp	xzr, xzr, [x2, #16]
    9be0:	strb	wzr, [x29, #448]
    9be4:	stp	x20, x21, [x29, #456]
    9be8:	stp	xzr, xzr, [x29, #472]
    9bec:	stp	xzr, xzr, [x29, #488]
    9bf0:	stp	xzr, xzr, [x29, #504]
    9bf4:	bl	f0 <d_count_templates_scopes>
    9bf8:	ldr	w0, [x29, #492]
    9bfc:	cmp	w0, #0x7ff
    9c00:	b.gt	9c08 <d_demangle_callback.constprop.0+0x2c8>
    9c04:	str	wzr, [x29, #492]
    9c08:	ldr	w3, [x29, #532]
    9c0c:	mov	w4, #0x1                   	// #1
    9c10:	ldr	w6, [x29, #548]
    9c14:	mov	x20, sp
    9c18:	cmp	w3, #0x0
    9c1c:	mov	x2, x19
    9c20:	csel	w5, w3, w4, gt
    9c24:	mov	x0, x23
    9c28:	mov	w1, #0x11                  	// #17
    9c2c:	str	xzr, [x29, #552]
    9c30:	mul	w3, w3, w6
    9c34:	sub	sp, sp, w5, sxtw #4
    9c38:	str	w3, [x29, #548]
    9c3c:	mov	x5, sp
    9c40:	cmp	w3, #0x0
    9c44:	str	x5, [x29, #520]
    9c48:	csel	w3, w3, w4, gt
    9c4c:	sub	sp, sp, w3, sxtw #4
    9c50:	mov	x3, sp
    9c54:	str	x3, [x29, #536]
    9c58:	bl	8260 <d_print_comp>
    9c5c:	mov	sp, x20
    9c60:	ldr	x1, [x29, #440]
    9c64:	mov	x0, x23
    9c68:	ldp	x3, x2, [x29, #456]
    9c6c:	strb	wzr, [x23, x1]
    9c70:	blr	x3
    9c74:	ldr	w0, [x29, #488]
    9c78:	mov	sp, x22
    9c7c:	cmp	w0, #0x0
    9c80:	cset	w0, eq  // eq = none
    9c84:	b	9afc <d_demangle_callback.constprop.0+0x1bc>
    9c88:	add	x26, x29, #0x60
    9c8c:	mov	x25, #0x0                   	// #0
    9c90:	b	9ab8 <d_demangle_callback.constprop.0+0x178>
    9c94:	ldr	x6, [x29, #120]
    9c98:	ldrb	w0, [x6]
    9c9c:	cmp	w0, #0x2e
    9ca0:	b.ne	9ae8 <d_demangle_callback.constprop.0+0x1a8>  // b.any
    9ca4:	nop
    9ca8:	ldrb	w0, [x6, #1]
    9cac:	sub	w1, w0, #0x61
    9cb0:	cmp	w0, #0x5f
    9cb4:	and	w1, w1, #0xff
    9cb8:	ccmp	w1, #0x19, #0x0, ne  // ne = any
    9cbc:	b.ls	9d9c <d_demangle_callback.constprop.0+0x45c>  // b.plast
    9cc0:	sub	w0, w0, #0x30
    9cc4:	and	w0, w0, #0xff
    9cc8:	cmp	w0, #0x9
    9ccc:	ldrb	w0, [x6]
    9cd0:	b.hi	9ae8 <d_demangle_callback.constprop.0+0x1a8>  // b.pmore
    9cd4:	mov	x3, x6
    9cd8:	cmp	w0, #0x2e
    9cdc:	b.ne	9d2c <d_demangle_callback.constprop.0+0x3ec>  // b.any
    9ce0:	ldrb	w4, [x3, #1]
    9ce4:	sub	w4, w4, #0x30
    9ce8:	and	w4, w4, #0xff
    9cec:	cmp	w4, #0x9
    9cf0:	b.hi	9d2c <d_demangle_callback.constprop.0+0x3ec>  // b.pmore
    9cf4:	ldrb	w4, [x3, #2]
    9cf8:	add	x3, x3, #0x2
    9cfc:	sub	w5, w4, #0x30
    9d00:	and	w5, w5, #0xff
    9d04:	cmp	w5, #0x9
    9d08:	b.hi	9d24 <d_demangle_callback.constprop.0+0x3e4>  // b.pmore
    9d0c:	nop
    9d10:	ldrb	w4, [x3, #1]!
    9d14:	sub	w5, w4, #0x30
    9d18:	and	w5, w5, #0xff
    9d1c:	cmp	w5, #0x9
    9d20:	b.ls	9d10 <d_demangle_callback.constprop.0+0x3d0>  // b.plast
    9d24:	cmp	w4, #0x2e
    9d28:	b.eq	9ce0 <d_demangle_callback.constprop.0+0x3a0>  // b.none
    9d2c:	ldp	w0, w1, [x29, #136]
    9d30:	str	x3, [x29, #120]
    9d34:	sub	x4, x3, x6
    9d38:	cmp	w0, w1
    9d3c:	b.ge	9d94 <d_demangle_callback.constprop.0+0x454>  // b.tcont
    9d40:	ldr	x2, [x29, #128]
    9d44:	smull	x1, w0, w27
    9d48:	add	w0, w0, #0x1
    9d4c:	cmp	w4, #0x0
    9d50:	add	x3, x2, x1
    9d54:	str	wzr, [x3, #4]
    9d58:	str	w0, [x29, #136]
    9d5c:	b.le	9d94 <d_demangle_callback.constprop.0+0x454>
    9d60:	str	xzr, [x2, x1]
    9d64:	str	x6, [x3, #8]
    9d68:	str	w4, [x3, #16]
    9d6c:	mov	x2, x19
    9d70:	mov	x0, x26
    9d74:	mov	w1, #0x4e                  	// #78
    9d78:	bl	0 <d_make_comp>
    9d7c:	ldr	x6, [x29, #120]
    9d80:	mov	x19, x0
    9d84:	ldrb	w0, [x6]
    9d88:	cmp	w0, #0x2e
    9d8c:	b.eq	9ca8 <d_demangle_callback.constprop.0+0x368>  // b.none
    9d90:	b	9ae8 <d_demangle_callback.constprop.0+0x1a8>
    9d94:	mov	x3, #0x0                   	// #0
    9d98:	b	9d6c <d_demangle_callback.constprop.0+0x42c>
    9d9c:	ldrb	w0, [x6, #2]
    9da0:	add	x3, x6, #0x2
    9da4:	b	9dac <d_demangle_callback.constprop.0+0x46c>
    9da8:	ldrb	w0, [x3, #1]!
    9dac:	sub	w1, w0, #0x61
    9db0:	cmp	w0, #0x5f
    9db4:	and	w1, w1, #0xff
    9db8:	ccmp	w1, #0x19, #0x0, ne  // ne = any
    9dbc:	b.ls	9da8 <d_demangle_callback.constprop.0+0x468>  // b.plast
    9dc0:	b	9cd8 <d_demangle_callback.constprop.0+0x398>
    9dc4:	nop

0000000000009dc8 <__cxa_demangle>:
    9dc8:	stp	x29, x30, [sp, #-96]!
    9dcc:	mov	x29, sp
    9dd0:	stp	x21, x22, [sp, #32]
    9dd4:	mov	x21, x3
    9dd8:	cbz	x0, 9ea8 <__cxa_demangle+0xe0>
    9ddc:	stp	x19, x20, [sp, #16]
    9de0:	cmp	x1, #0x0
    9de4:	mov	x19, x1
    9de8:	mov	x20, x2
    9dec:	ccmp	x2, #0x0, #0x0, ne  // ne = any
    9df0:	b.eq	9ea4 <__cxa_demangle+0xdc>  // b.none
    9df4:	adrp	x1, 0 <d_make_comp>
    9df8:	add	x2, sp, #0x40
    9dfc:	add	x1, x1, #0x0
    9e00:	stp	xzr, xzr, [sp, #64]
    9e04:	str	xzr, [sp, #80]
    9e08:	str	wzr, [sp, #88]
    9e0c:	bl	9940 <d_demangle_callback.constprop.0>
    9e10:	cbz	w0, 9efc <__cxa_demangle+0x134>
    9e14:	ldr	w0, [sp, #88]
    9e18:	str	x23, [sp, #48]
    9e1c:	ldr	x22, [sp, #64]
    9e20:	cbnz	w0, 9e80 <__cxa_demangle+0xb8>
    9e24:	ldr	x23, [sp, #80]
    9e28:	cbz	x22, 9f20 <__cxa_demangle+0x158>
    9e2c:	cbz	x19, 9ef0 <__cxa_demangle+0x128>
    9e30:	mov	x0, x22
    9e34:	bl	0 <strlen>
    9e38:	ldr	x1, [x20]
    9e3c:	cmp	x0, x1
    9e40:	b.cs	9ec8 <__cxa_demangle+0x100>  // b.hs, b.nlast
    9e44:	add	x2, x0, #0x1
    9e48:	mov	x1, x22
    9e4c:	mov	x0, x19
    9e50:	bl	0 <memcpy>
    9e54:	mov	x0, x22
    9e58:	mov	x22, x19
    9e5c:	bl	0 <free>
    9e60:	cbz	x21, 9ed8 <__cxa_demangle+0x110>
    9e64:	ldp	x19, x20, [sp, #16]
    9e68:	ldr	x23, [sp, #48]
    9e6c:	str	wzr, [x21]
    9e70:	mov	x0, x22
    9e74:	ldp	x21, x22, [sp, #32]
    9e78:	ldp	x29, x30, [sp], #96
    9e7c:	ret
    9e80:	mov	x23, #0x1                   	// #1
    9e84:	cbnz	x22, 9e2c <__cxa_demangle+0x64>
    9e88:	cbz	x21, 9f44 <__cxa_demangle+0x17c>
    9e8c:	mov	w0, #0xffffffff            	// #-1
    9e90:	mov	x22, #0x0                   	// #0
    9e94:	ldp	x19, x20, [sp, #16]
    9e98:	ldr	x23, [sp, #48]
    9e9c:	str	w0, [x21]
    9ea0:	b	9e70 <__cxa_demangle+0xa8>
    9ea4:	ldp	x19, x20, [sp, #16]
    9ea8:	cbz	x21, 9f0c <__cxa_demangle+0x144>
    9eac:	mov	w0, #0xfffffffd            	// #-3
    9eb0:	str	w0, [x21]
    9eb4:	mov	x22, #0x0                   	// #0
    9eb8:	mov	x0, x22
    9ebc:	ldp	x21, x22, [sp, #32]
    9ec0:	ldp	x29, x30, [sp], #96
    9ec4:	ret
    9ec8:	mov	x0, x19
    9ecc:	bl	0 <free>
    9ed0:	str	x23, [x20]
    9ed4:	cbnz	x21, 9e64 <__cxa_demangle+0x9c>
    9ed8:	mov	x0, x22
    9edc:	ldp	x19, x20, [sp, #16]
    9ee0:	ldp	x21, x22, [sp, #32]
    9ee4:	ldr	x23, [sp, #48]
    9ee8:	ldp	x29, x30, [sp], #96
    9eec:	ret
    9ef0:	cbz	x20, 9e60 <__cxa_demangle+0x98>
    9ef4:	str	x23, [x20]
    9ef8:	b	9ed4 <__cxa_demangle+0x10c>
    9efc:	ldr	x0, [sp, #64]
    9f00:	bl	0 <free>
    9f04:	cbnz	x21, 9f30 <__cxa_demangle+0x168>
    9f08:	ldp	x19, x20, [sp, #16]
    9f0c:	mov	x22, #0x0                   	// #0
    9f10:	mov	x0, x22
    9f14:	ldp	x21, x22, [sp, #32]
    9f18:	ldp	x29, x30, [sp], #96
    9f1c:	ret
    9f20:	cbz	x21, 9f44 <__cxa_demangle+0x17c>
    9f24:	cmp	x23, #0x1
    9f28:	b.eq	9e8c <__cxa_demangle+0xc4>  // b.none
    9f2c:	ldr	x23, [sp, #48]
    9f30:	mov	w0, #0xfffffffe            	// #-2
    9f34:	mov	x22, #0x0                   	// #0
    9f38:	ldp	x19, x20, [sp, #16]
    9f3c:	str	w0, [x21]
    9f40:	b	9e70 <__cxa_demangle+0xa8>
    9f44:	mov	x22, #0x0                   	// #0
    9f48:	ldp	x19, x20, [sp, #16]
    9f4c:	ldr	x23, [sp, #48]
    9f50:	b	9f10 <__cxa_demangle+0x148>
    9f54:	nop

0000000000009f58 <__gcclibcxx_demangle_callback>:
    9f58:	cmp	x0, #0x0
    9f5c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    9f60:	b.eq	9f84 <__gcclibcxx_demangle_callback+0x2c>  // b.none
    9f64:	stp	x29, x30, [sp, #-16]!
    9f68:	mov	x29, sp
    9f6c:	bl	9940 <d_demangle_callback.constprop.0>
    9f70:	cmp	w0, #0x0
    9f74:	ldp	x29, x30, [sp], #16
    9f78:	mov	w0, #0xfffffffe            	// #-2
    9f7c:	csel	w0, wzr, w0, ne  // ne = any
    9f80:	ret
    9f84:	mov	w0, #0xfffffffd            	// #-3
    9f88:	ret
