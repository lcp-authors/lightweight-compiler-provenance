
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//pbkdf2.mod_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_crypto_pbkdf2-0x2c>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x2, [sp, #24]
  18:	ldr	x1, [sp, #32]
  1c:	ldr	x0, [sp, #40]
  20:	bl	0 <grub_memmove>
  24:	ldp	x29, x30, [sp], #48
  28:	ret

000000000000002c <grub_crypto_pbkdf2>:
  2c:	stp	x29, x30, [sp, #-256]!
  30:	mov	x29, sp
  34:	str	x0, [sp, #72]
  38:	str	x1, [sp, #64]
  3c:	str	x2, [sp, #56]
  40:	str	x3, [sp, #48]
  44:	str	x4, [sp, #40]
  48:	str	w5, [sp, #36]
  4c:	str	x6, [sp, #24]
  50:	str	x7, [sp, #16]
  54:	ldr	x0, [sp, #72]
  58:	ldr	x0, [x0, #32]
  5c:	str	w0, [sp, #236]
  60:	ldr	x0, [sp, #40]
  64:	add	x0, x0, #0x4
  68:	str	x0, [sp, #224]
  6c:	ldr	x0, [sp, #72]
  70:	ldr	x0, [x0, #32]
  74:	cmp	x0, #0x40
  78:	b.hi	8c <grub_crypto_pbkdf2+0x60>  // b.pmore
  7c:	ldr	x0, [sp, #72]
  80:	ldr	x0, [x0, #32]
  84:	cmp	x0, #0x0
  88:	b.ne	94 <grub_crypto_pbkdf2+0x68>  // b.any
  8c:	mov	w0, #0xa                   	// #10
  90:	b	338 <grub_crypto_pbkdf2+0x30c>
  94:	ldr	w0, [sp, #36]
  98:	cmp	w0, #0x0
  9c:	b.ne	a8 <grub_crypto_pbkdf2+0x7c>  // b.any
  a0:	mov	w0, #0xa                   	// #10
  a4:	b	338 <grub_crypto_pbkdf2+0x30c>
  a8:	ldr	x0, [sp, #16]
  ac:	cmp	x0, #0x0
  b0:	b.ne	bc <grub_crypto_pbkdf2+0x90>  // b.any
  b4:	mov	w0, #0xa                   	// #10
  b8:	b	338 <grub_crypto_pbkdf2+0x30c>
  bc:	ldr	x1, [sp, #16]
  c0:	mov	x0, #0xffffffff            	// #4294967295
  c4:	cmp	x1, x0
  c8:	b.ls	d4 <grub_crypto_pbkdf2+0xa8>  // b.plast
  cc:	mov	w0, #0xa                   	// #10
  d0:	b	338 <grub_crypto_pbkdf2+0x30c>
  d4:	ldr	x0, [sp, #16]
  d8:	sub	x1, x0, #0x1
  dc:	ldr	w0, [sp, #236]
  e0:	udiv	x0, x1, x0
  e4:	add	w0, w0, #0x1
  e8:	str	w0, [sp, #220]
  ec:	ldr	x0, [sp, #16]
  f0:	mov	w2, w0
  f4:	ldr	w0, [sp, #220]
  f8:	sub	w1, w0, #0x1
  fc:	ldr	w0, [sp, #236]
 100:	mul	w0, w1, w0
 104:	sub	w0, w2, w0
 108:	str	w0, [sp, #216]
 10c:	ldr	x0, [sp, #224]
 110:	bl	0 <grub_malloc>
 114:	str	x0, [sp, #208]
 118:	ldr	x0, [sp, #208]
 11c:	cmp	x0, #0x0
 120:	b.ne	12c <grub_crypto_pbkdf2+0x100>  // b.any
 124:	mov	w0, #0x22                  	// #34
 128:	b	338 <grub_crypto_pbkdf2+0x30c>
 12c:	ldr	x2, [sp, #40]
 130:	ldr	x1, [sp, #48]
 134:	ldr	x0, [sp, #208]
 138:	bl	0 <grub_crypto_pbkdf2-0x2c>
 13c:	mov	w0, #0x1                   	// #1
 140:	str	w0, [sp, #248]
 144:	b	318 <grub_crypto_pbkdf2+0x2ec>
 148:	ldr	w1, [sp, #236]
 14c:	add	x0, sp, #0x50
 150:	mov	x2, x1
 154:	mov	w1, #0x0                   	// #0
 158:	bl	0 <grub_memset>
 15c:	str	wzr, [sp, #252]
 160:	b	2b4 <grub_crypto_pbkdf2+0x288>
 164:	ldr	w0, [sp, #252]
 168:	cmp	w0, #0x0
 16c:	b.ne	210 <grub_crypto_pbkdf2+0x1e4>  // b.any
 170:	ldr	w0, [sp, #248]
 174:	lsr	w2, w0, #24
 178:	ldr	x1, [sp, #208]
 17c:	ldr	x0, [sp, #40]
 180:	add	x0, x1, x0
 184:	and	w1, w2, #0xff
 188:	strb	w1, [x0]
 18c:	ldr	w0, [sp, #248]
 190:	lsr	w2, w0, #16
 194:	ldr	x0, [sp, #40]
 198:	add	x0, x0, #0x1
 19c:	ldr	x1, [sp, #208]
 1a0:	add	x0, x1, x0
 1a4:	and	w1, w2, #0xff
 1a8:	strb	w1, [x0]
 1ac:	ldr	w0, [sp, #248]
 1b0:	lsr	w2, w0, #8
 1b4:	ldr	x0, [sp, #40]
 1b8:	add	x0, x0, #0x2
 1bc:	ldr	x1, [sp, #208]
 1c0:	add	x0, x1, x0
 1c4:	and	w1, w2, #0xff
 1c8:	strb	w1, [x0]
 1cc:	ldr	x0, [sp, #40]
 1d0:	add	x0, x0, #0x3
 1d4:	ldr	x1, [sp, #208]
 1d8:	add	x0, x1, x0
 1dc:	ldr	w1, [sp, #248]
 1e0:	and	w1, w1, #0xff
 1e4:	strb	w1, [x0]
 1e8:	add	x0, sp, #0x90
 1ec:	mov	x5, x0
 1f0:	ldr	x4, [sp, #224]
 1f4:	ldr	x3, [sp, #208]
 1f8:	ldr	x2, [sp, #56]
 1fc:	ldr	x1, [sp, #64]
 200:	ldr	x0, [sp, #72]
 204:	bl	0 <grub_crypto_hmac_buffer>
 208:	str	w0, [sp, #240]
 20c:	b	23c <grub_crypto_pbkdf2+0x210>
 210:	ldr	w1, [sp, #236]
 214:	add	x2, sp, #0x90
 218:	add	x0, sp, #0x90
 21c:	mov	x5, x2
 220:	mov	x4, x1
 224:	mov	x3, x0
 228:	ldr	x2, [sp, #56]
 22c:	ldr	x1, [sp, #64]
 230:	ldr	x0, [sp, #72]
 234:	bl	0 <grub_crypto_hmac_buffer>
 238:	str	w0, [sp, #240]
 23c:	ldr	w0, [sp, #240]
 240:	cmp	w0, #0x0
 244:	b.eq	258 <grub_crypto_pbkdf2+0x22c>  // b.none
 248:	ldr	x0, [sp, #208]
 24c:	bl	0 <grub_free>
 250:	ldr	w0, [sp, #240]
 254:	b	338 <grub_crypto_pbkdf2+0x30c>
 258:	str	wzr, [sp, #244]
 25c:	b	298 <grub_crypto_pbkdf2+0x26c>
 260:	ldr	w0, [sp, #244]
 264:	add	x1, sp, #0x50
 268:	ldrb	w1, [x1, x0]
 26c:	ldr	w0, [sp, #244]
 270:	add	x2, sp, #0x90
 274:	ldrb	w0, [x2, x0]
 278:	eor	w0, w1, w0
 27c:	and	w2, w0, #0xff
 280:	ldr	w0, [sp, #244]
 284:	add	x1, sp, #0x50
 288:	strb	w2, [x1, x0]
 28c:	ldr	w0, [sp, #244]
 290:	add	w0, w0, #0x1
 294:	str	w0, [sp, #244]
 298:	ldr	w1, [sp, #244]
 29c:	ldr	w0, [sp, #236]
 2a0:	cmp	w1, w0
 2a4:	b.cc	260 <grub_crypto_pbkdf2+0x234>  // b.lo, b.ul, b.last
 2a8:	ldr	w0, [sp, #252]
 2ac:	add	w0, w0, #0x1
 2b0:	str	w0, [sp, #252]
 2b4:	ldr	w1, [sp, #252]
 2b8:	ldr	w0, [sp, #36]
 2bc:	cmp	w1, w0
 2c0:	b.cc	164 <grub_crypto_pbkdf2+0x138>  // b.lo, b.ul, b.last
 2c4:	ldr	w0, [sp, #248]
 2c8:	sub	w1, w0, #0x1
 2cc:	ldr	w0, [sp, #236]
 2d0:	mul	w0, w1, w0
 2d4:	mov	w0, w0
 2d8:	ldr	x1, [sp, #24]
 2dc:	add	x3, x1, x0
 2e0:	ldr	w1, [sp, #248]
 2e4:	ldr	w0, [sp, #220]
 2e8:	cmp	w1, w0
 2ec:	b.ne	2f8 <grub_crypto_pbkdf2+0x2cc>  // b.any
 2f0:	ldr	w0, [sp, #216]
 2f4:	b	2fc <grub_crypto_pbkdf2+0x2d0>
 2f8:	ldr	w0, [sp, #236]
 2fc:	add	x1, sp, #0x50
 300:	mov	x2, x0
 304:	mov	x0, x3
 308:	bl	0 <grub_crypto_pbkdf2-0x2c>
 30c:	ldr	w0, [sp, #248]
 310:	add	w0, w0, #0x1
 314:	str	w0, [sp, #248]
 318:	ldr	w0, [sp, #248]
 31c:	sub	w0, w0, #0x1
 320:	ldr	w1, [sp, #220]
 324:	cmp	w1, w0
 328:	b.hi	148 <grub_crypto_pbkdf2+0x11c>  // b.pmore
 32c:	ldr	x0, [sp, #208]
 330:	bl	0 <grub_free>
 334:	mov	w0, #0x0                   	// #0
 338:	ldp	x29, x30, [sp], #256
 33c:	ret
