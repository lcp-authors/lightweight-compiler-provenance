In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_gcc_-O0:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	mov	x0, #0x10                  	// #16
      10:	bl	0 <emalloc>
      14:	str	x0, [sp, #40]
      18:	ldr	x0, [sp, #24]
      1c:	cmp	x0, #0x0
      20:	b.ne	38 <suite_create+0x38>  // b.any
      24:	ldr	x0, [sp, #40]
      28:	adrp	x1, 0 <suite_create>
      2c:	add	x1, x1, #0x0
      30:	str	x1, [x0]
      34:	b	44 <suite_create+0x44>
      38:	ldr	x0, [sp, #40]
      3c:	ldr	x1, [sp, #24]
      40:	str	x1, [x0]
      44:	bl	0 <check_list_create>
      48:	mov	x1, x0
      4c:	ldr	x0, [sp, #40]
      50:	str	x1, [x0, #8]
      54:	ldr	x0, [sp, #40]
      58:	ldp	x29, x30, [sp], #48
      5c:	ret

0000000000000060 <suite_tcase>:
      60:	stp	x29, x30, [sp, #-48]!
      64:	mov	x29, sp
      68:	str	x0, [sp, #24]
      6c:	str	x1, [sp, #16]
      70:	ldr	x0, [sp, #24]
      74:	cmp	x0, #0x0
      78:	b.ne	84 <suite_tcase+0x24>  // b.any
      7c:	mov	w0, #0x0                   	// #0
      80:	b	e8 <suite_tcase+0x88>
      84:	ldr	x0, [sp, #24]
      88:	ldr	x0, [x0, #8]
      8c:	str	x0, [sp, #40]
      90:	ldr	x0, [sp, #40]
      94:	bl	0 <check_list_front>
      98:	b	d4 <suite_tcase+0x74>
      9c:	ldr	x0, [sp, #40]
      a0:	bl	0 <check_list_val>
      a4:	str	x0, [sp, #32]
      a8:	ldr	x0, [sp, #32]
      ac:	ldr	x0, [x0]
      b0:	mov	x1, x0
      b4:	ldr	x0, [sp, #16]
      b8:	bl	0 <strcmp>
      bc:	cmp	w0, #0x0
      c0:	b.ne	cc <suite_tcase+0x6c>  // b.any
      c4:	mov	w0, #0x1                   	// #1
      c8:	b	e8 <suite_tcase+0x88>
      cc:	ldr	x0, [sp, #40]
      d0:	bl	0 <check_list_advance>
      d4:	ldr	x0, [sp, #40]
      d8:	bl	0 <check_list_at_end>
      dc:	cmp	w0, #0x0
      e0:	b.eq	9c <suite_tcase+0x3c>  // b.none
      e4:	mov	w0, #0x0                   	// #0
      e8:	ldp	x29, x30, [sp], #48
      ec:	ret

00000000000000f0 <suite_free>:
      f0:	stp	x29, x30, [sp, #-48]!
      f4:	mov	x29, sp
      f8:	str	x0, [sp, #24]
      fc:	ldr	x0, [sp, #24]
     100:	cmp	x0, #0x0
     104:	b.eq	15c <suite_free+0x6c>  // b.none
     108:	ldr	x0, [sp, #24]
     10c:	ldr	x0, [x0, #8]
     110:	str	x0, [sp, #40]
     114:	ldr	x0, [sp, #40]
     118:	bl	0 <check_list_front>
     11c:	b	134 <suite_free+0x44>
     120:	ldr	x0, [sp, #40]
     124:	bl	0 <check_list_val>
     128:	bl	434 <tcase_free>
     12c:	ldr	x0, [sp, #40]
     130:	bl	0 <check_list_advance>
     134:	ldr	x0, [sp, #40]
     138:	bl	0 <check_list_at_end>
     13c:	cmp	w0, #0x0
     140:	b.eq	120 <suite_free+0x30>  // b.none
     144:	ldr	x0, [sp, #24]
     148:	ldr	x0, [x0, #8]
     14c:	bl	0 <check_list_free>
     150:	ldr	x0, [sp, #24]
     154:	bl	0 <free>
     158:	b	160 <suite_free+0x70>
     15c:	nop
     160:	ldp	x29, x30, [sp], #48
     164:	ret

0000000000000168 <tcase_create>:
     168:	stp	x29, x30, [sp, #-96]!
     16c:	mov	x29, sp
     170:	str	x0, [sp, #24]
     174:	fmov	d0, #4.000000000000000000e+00
     178:	str	d0, [sp, #88]
     17c:	mov	x0, #0x48                  	// #72
     180:	bl	0 <emalloc>
     184:	str	x0, [sp, #80]
     188:	ldr	x0, [sp, #24]
     18c:	cmp	x0, #0x0
     190:	b.ne	1a8 <tcase_create+0x40>  // b.any
     194:	ldr	x0, [sp, #80]
     198:	adrp	x1, 0 <suite_create>
     19c:	add	x1, x1, #0x0
     1a0:	str	x1, [x0]
     1a4:	b	1b4 <tcase_create+0x4c>
     1a8:	ldr	x0, [sp, #80]
     1ac:	ldr	x1, [sp, #24]
     1b0:	str	x1, [x0]
     1b4:	adrp	x0, 0 <suite_create>
     1b8:	add	x0, x0, #0x0
     1bc:	bl	0 <getenv>
     1c0:	str	x0, [sp, #72]
     1c4:	ldr	x0, [sp, #72]
     1c8:	cmp	x0, #0x0
     1cc:	b.eq	21c <tcase_create+0xb4>  // b.none
     1d0:	str	xzr, [sp, #48]
     1d4:	add	x0, sp, #0x30
     1d8:	mov	x1, x0
     1dc:	ldr	x0, [sp, #72]
     1e0:	bl	0 <strtod>
     1e4:	str	d0, [sp, #64]
     1e8:	ldr	d0, [sp, #64]
     1ec:	fcmpe	d0, #0.0
     1f0:	b.lt	21c <tcase_create+0xb4>  // b.tstop
     1f4:	ldr	x0, [sp, #48]
     1f8:	ldr	x1, [sp, #72]
     1fc:	cmp	x1, x0
     200:	b.eq	21c <tcase_create+0xb4>  // b.none
     204:	ldr	x0, [sp, #48]
     208:	ldrb	w0, [x0]
     20c:	cmp	w0, #0x0
     210:	b.ne	21c <tcase_create+0xb4>  // b.any
     214:	ldr	d0, [sp, #64]
     218:	str	d0, [sp, #88]
     21c:	adrp	x0, 0 <suite_create>
     220:	add	x0, x0, #0x0
     224:	bl	0 <getenv>
     228:	str	x0, [sp, #72]
     22c:	ldr	x0, [sp, #72]
     230:	cmp	x0, #0x0
     234:	b.eq	28c <tcase_create+0x124>  // b.none
     238:	str	xzr, [sp, #40]
     23c:	add	x0, sp, #0x28
     240:	mov	x1, x0
     244:	ldr	x0, [sp, #72]
     248:	bl	0 <strtod>
     24c:	str	d0, [sp, #56]
     250:	ldr	d0, [sp, #56]
     254:	fcmpe	d0, #0.0
     258:	b.lt	28c <tcase_create+0x124>  // b.tstop
     25c:	ldr	x0, [sp, #40]
     260:	ldr	x1, [sp, #72]
     264:	cmp	x1, x0
     268:	b.eq	28c <tcase_create+0x124>  // b.none
     26c:	ldr	x0, [sp, #40]
     270:	ldrb	w0, [x0]
     274:	cmp	w0, #0x0
     278:	b.ne	28c <tcase_create+0x124>  // b.any
     27c:	ldr	d1, [sp, #88]
     280:	ldr	d0, [sp, #56]
     284:	fmul	d0, d1, d0
     288:	str	d0, [sp, #88]
     28c:	ldr	d0, [sp, #88]
     290:	bl	0 <floor>
     294:	fcvtzs	d0, d0
     298:	ldr	x0, [sp, #80]
     29c:	str	d0, [x0, #8]
     2a0:	ldr	d0, [sp, #88]
     2a4:	bl	0 <floor>
     2a8:	fmov	d1, d0
     2ac:	ldr	d0, [sp, #88]
     2b0:	fsub	d0, d0, d1
     2b4:	mov	x0, #0xcd6500000000        	// #225833675390976
     2b8:	movk	x0, #0x41cd, lsl #48
     2bc:	fmov	d1, x0
     2c0:	fmul	d0, d0, d1
     2c4:	fcvtzs	d0, d0
     2c8:	ldr	x0, [sp, #80]
     2cc:	str	d0, [x0, #16]
     2d0:	bl	0 <check_list_create>
     2d4:	mov	x1, x0
     2d8:	ldr	x0, [sp, #80]
     2dc:	str	x1, [x0, #24]
     2e0:	bl	0 <check_list_create>
     2e4:	mov	x1, x0
     2e8:	ldr	x0, [sp, #80]
     2ec:	str	x1, [x0, #32]
     2f0:	bl	0 <check_list_create>
     2f4:	mov	x1, x0
     2f8:	ldr	x0, [sp, #80]
     2fc:	str	x1, [x0, #48]
     300:	bl	0 <check_list_create>
     304:	mov	x1, x0
     308:	ldr	x0, [sp, #80]
     30c:	str	x1, [x0, #40]
     310:	bl	0 <check_list_create>
     314:	mov	x1, x0
     318:	ldr	x0, [sp, #80]
     31c:	str	x1, [x0, #56]
     320:	bl	0 <check_list_create>
     324:	mov	x1, x0
     328:	ldr	x0, [sp, #80]
     32c:	str	x1, [x0, #64]
     330:	ldr	x0, [sp, #80]
     334:	ldp	x29, x30, [sp], #96
     338:	ret

000000000000033c <tag_string_to_list>:
     33c:	stp	x29, x30, [sp, #-64]!
     340:	mov	x29, sp
     344:	str	x0, [sp, #24]
     348:	bl	0 <check_list_create>
     34c:	str	x0, [sp, #48]
     350:	ldr	x0, [sp, #24]
     354:	cmp	x0, #0x0
     358:	b.ne	364 <tag_string_to_list+0x28>  // b.any
     35c:	ldr	x0, [sp, #48]
     360:	b	3c8 <tag_string_to_list+0x8c>
     364:	ldr	x0, [sp, #24]
     368:	bl	0 <strdup>
     36c:	str	x0, [sp, #40]
     370:	adrp	x0, 0 <suite_create>
     374:	add	x1, x0, #0x0
     378:	ldr	x0, [sp, #40]
     37c:	bl	0 <strtok>
     380:	str	x0, [sp, #56]
     384:	b	3b0 <tag_string_to_list+0x74>
     388:	ldr	x0, [sp, #56]
     38c:	bl	0 <strdup>
     390:	mov	x1, x0
     394:	ldr	x0, [sp, #48]
     398:	bl	0 <check_list_add_end>
     39c:	adrp	x0, 0 <suite_create>
     3a0:	add	x1, x0, #0x0
     3a4:	mov	x0, #0x0                   	// #0
     3a8:	bl	0 <strtok>
     3ac:	str	x0, [sp, #56]
     3b0:	ldr	x0, [sp, #56]
     3b4:	cmp	x0, #0x0
     3b8:	b.ne	388 <tag_string_to_list+0x4c>  // b.any
     3bc:	ldr	x0, [sp, #40]
     3c0:	bl	0 <free>
     3c4:	ldr	x0, [sp, #48]
     3c8:	ldp	x29, x30, [sp], #64
     3cc:	ret

00000000000003d0 <tcase_set_tags>:
     3d0:	stp	x29, x30, [sp, #-32]!
     3d4:	mov	x29, sp
     3d8:	str	x0, [sp, #24]
     3dc:	str	x1, [sp, #16]
     3e0:	ldr	x0, [sp, #24]
     3e4:	ldr	x0, [x0, #64]
     3e8:	cmp	x0, #0x0
     3ec:	b.eq	414 <tcase_set_tags+0x44>  // b.none
     3f0:	ldr	x0, [sp, #24]
     3f4:	ldr	x2, [x0, #64]
     3f8:	adrp	x0, 0 <free>
     3fc:	add	x1, x0, #0x0
     400:	mov	x0, x2
     404:	bl	0 <check_list_apply>
     408:	ldr	x0, [sp, #24]
     40c:	ldr	x0, [x0, #64]
     410:	bl	0 <check_list_free>
     414:	ldr	x0, [sp, #16]
     418:	bl	33c <tag_string_to_list>
     41c:	mov	x1, x0
     420:	ldr	x0, [sp, #24]
     424:	str	x1, [x0, #64]
     428:	nop
     42c:	ldp	x29, x30, [sp], #32
     430:	ret

0000000000000434 <tcase_free>:
     434:	stp	x29, x30, [sp, #-32]!
     438:	mov	x29, sp
     43c:	str	x0, [sp, #24]
     440:	ldr	x0, [sp, #24]
     444:	ldr	x2, [x0, #24]
     448:	adrp	x0, 0 <free>
     44c:	add	x1, x0, #0x0
     450:	mov	x0, x2
     454:	bl	0 <check_list_apply>
     458:	ldr	x0, [sp, #24]
     45c:	ldr	x2, [x0, #32]
     460:	adrp	x0, 0 <free>
     464:	add	x1, x0, #0x0
     468:	mov	x0, x2
     46c:	bl	0 <check_list_apply>
     470:	ldr	x0, [sp, #24]
     474:	ldr	x2, [x0, #48]
     478:	adrp	x0, 0 <free>
     47c:	add	x1, x0, #0x0
     480:	mov	x0, x2
     484:	bl	0 <check_list_apply>
     488:	ldr	x0, [sp, #24]
     48c:	ldr	x2, [x0, #40]
     490:	adrp	x0, 0 <free>
     494:	add	x1, x0, #0x0
     498:	mov	x0, x2
     49c:	bl	0 <check_list_apply>
     4a0:	ldr	x0, [sp, #24]
     4a4:	ldr	x2, [x0, #56]
     4a8:	adrp	x0, 0 <free>
     4ac:	add	x1, x0, #0x0
     4b0:	mov	x0, x2
     4b4:	bl	0 <check_list_apply>
     4b8:	ldr	x0, [sp, #24]
     4bc:	ldr	x2, [x0, #64]
     4c0:	adrp	x0, 0 <free>
     4c4:	add	x1, x0, #0x0
     4c8:	mov	x0, x2
     4cc:	bl	0 <check_list_apply>
     4d0:	ldr	x0, [sp, #24]
     4d4:	ldr	x0, [x0, #24]
     4d8:	bl	0 <check_list_free>
     4dc:	ldr	x0, [sp, #24]
     4e0:	ldr	x0, [x0, #32]
     4e4:	bl	0 <check_list_free>
     4e8:	ldr	x0, [sp, #24]
     4ec:	ldr	x0, [x0, #48]
     4f0:	bl	0 <check_list_free>
     4f4:	ldr	x0, [sp, #24]
     4f8:	ldr	x0, [x0, #40]
     4fc:	bl	0 <check_list_free>
     500:	ldr	x0, [sp, #24]
     504:	ldr	x0, [x0, #56]
     508:	bl	0 <check_list_free>
     50c:	ldr	x0, [sp, #24]
     510:	ldr	x0, [x0, #64]
     514:	bl	0 <check_list_free>
     518:	ldr	x0, [sp, #24]
     51c:	bl	0 <free>
     520:	nop
     524:	ldp	x29, x30, [sp], #32
     528:	ret

000000000000052c <tcase_matching_tag>:
     52c:	stp	x29, x30, [sp, #-48]!
     530:	mov	x29, sp
     534:	str	x19, [sp, #16]
     538:	str	x0, [sp, #40]
     53c:	str	x1, [sp, #32]
     540:	ldr	x0, [sp, #32]
     544:	cmp	x0, #0x0
     548:	b.ne	554 <tcase_matching_tag+0x28>  // b.any
     54c:	mov	w0, #0x0                   	// #0
     550:	b	5e0 <tcase_matching_tag+0xb4>
     554:	ldr	x0, [sp, #32]
     558:	bl	0 <check_list_front>
     55c:	b	5cc <tcase_matching_tag+0xa0>
     560:	ldr	x0, [sp, #40]
     564:	ldr	x0, [x0, #64]
     568:	bl	0 <check_list_front>
     56c:	b	5b0 <tcase_matching_tag+0x84>
     570:	ldr	x0, [sp, #40]
     574:	ldr	x0, [x0, #64]
     578:	bl	0 <check_list_val>
     57c:	mov	x19, x0
     580:	ldr	x0, [sp, #32]
     584:	bl	0 <check_list_val>
     588:	mov	x1, x0
     58c:	mov	x0, x19
     590:	bl	0 <strcmp>
     594:	cmp	w0, #0x0
     598:	b.ne	5a4 <tcase_matching_tag+0x78>  // b.any
     59c:	mov	w0, #0x1                   	// #1
     5a0:	b	5e0 <tcase_matching_tag+0xb4>
     5a4:	ldr	x0, [sp, #40]
     5a8:	ldr	x0, [x0, #64]
     5ac:	bl	0 <check_list_advance>
     5b0:	ldr	x0, [sp, #40]
     5b4:	ldr	x0, [x0, #64]
     5b8:	bl	0 <check_list_at_end>
     5bc:	cmp	w0, #0x0
     5c0:	b.eq	570 <tcase_matching_tag+0x44>  // b.none
     5c4:	ldr	x0, [sp, #32]
     5c8:	bl	0 <check_list_advance>
     5cc:	ldr	x0, [sp, #32]
     5d0:	bl	0 <check_list_at_end>
     5d4:	cmp	w0, #0x0
     5d8:	b.eq	560 <tcase_matching_tag+0x34>  // b.none
     5dc:	mov	w0, #0x0                   	// #0
     5e0:	ldr	x19, [sp, #16]
     5e4:	ldp	x29, x30, [sp], #48
     5e8:	ret

00000000000005ec <suite_add_tcase>:
     5ec:	stp	x29, x30, [sp, #-32]!
     5f0:	mov	x29, sp
     5f4:	str	x0, [sp, #24]
     5f8:	str	x1, [sp, #16]
     5fc:	ldr	x0, [sp, #24]
     600:	cmp	x0, #0x0
     604:	b.eq	640 <suite_add_tcase+0x54>  // b.none
     608:	ldr	x0, [sp, #16]
     60c:	cmp	x0, #0x0
     610:	b.eq	640 <suite_add_tcase+0x54>  // b.none
     614:	ldr	x0, [sp, #24]
     618:	ldr	x0, [x0, #8]
     61c:	ldr	x1, [sp, #16]
     620:	bl	0 <check_list_contains>
     624:	cmp	w0, #0x0
     628:	b.ne	640 <suite_add_tcase+0x54>  // b.any
     62c:	ldr	x0, [sp, #24]
     630:	ldr	x0, [x0, #8]
     634:	ldr	x1, [sp, #16]
     638:	bl	0 <check_list_add_end>
     63c:	b	644 <suite_add_tcase+0x58>
     640:	nop
     644:	ldp	x29, x30, [sp], #32
     648:	ret

000000000000064c <_tcase_add_test>:
     64c:	stp	x29, x30, [sp, #-64]!
     650:	mov	x29, sp
     654:	str	x0, [sp, #40]
     658:	str	x1, [sp, #32]
     65c:	str	w2, [sp, #28]
     660:	str	w3, [sp, #24]
     664:	str	w4, [sp, #20]
     668:	str	w5, [sp, #16]
     66c:	ldr	x0, [sp, #40]
     670:	cmp	x0, #0x0
     674:	b.eq	6e4 <_tcase_add_test+0x98>  // b.none
     678:	ldr	x0, [sp, #32]
     67c:	cmp	x0, #0x0
     680:	b.eq	6e4 <_tcase_add_test+0x98>  // b.none
     684:	mov	x0, #0x18                  	// #24
     688:	bl	0 <emalloc>
     68c:	str	x0, [sp, #56]
     690:	ldr	x0, [sp, #56]
     694:	ldr	x1, [sp, #32]
     698:	str	x1, [x0]
     69c:	ldr	x0, [sp, #56]
     6a0:	ldr	w1, [sp, #20]
     6a4:	str	w1, [x0, #8]
     6a8:	ldr	x0, [sp, #56]
     6ac:	ldr	w1, [sp, #16]
     6b0:	str	w1, [x0, #12]
     6b4:	ldr	x0, [sp, #56]
     6b8:	ldr	w1, [sp, #28]
     6bc:	str	w1, [x0, #16]
     6c0:	ldr	w0, [sp, #24]
     6c4:	sxtb	w1, w0
     6c8:	ldr	x0, [sp, #56]
     6cc:	strb	w1, [x0, #20]
     6d0:	ldr	x0, [sp, #40]
     6d4:	ldr	x0, [x0, #24]
     6d8:	ldr	x1, [sp, #56]
     6dc:	bl	0 <check_list_add_end>
     6e0:	b	6e8 <_tcase_add_test+0x9c>
     6e4:	nop
     6e8:	ldp	x29, x30, [sp], #64
     6ec:	ret

00000000000006f0 <fixture_create>:
     6f0:	stp	x29, x30, [sp, #-48]!
     6f4:	mov	x29, sp
     6f8:	str	x0, [sp, #24]
     6fc:	str	w1, [sp, #20]
     700:	mov	x0, #0x10                  	// #16
     704:	bl	0 <emalloc>
     708:	str	x0, [sp, #40]
     70c:	ldr	x0, [sp, #40]
     710:	ldr	x1, [sp, #24]
     714:	str	x1, [x0, #8]
     718:	ldr	x0, [sp, #40]
     71c:	ldr	w1, [sp, #20]
     720:	str	w1, [x0]
     724:	ldr	x0, [sp, #40]
     728:	ldp	x29, x30, [sp], #48
     72c:	ret

0000000000000730 <tcase_add_unchecked_fixture>:
     730:	stp	x29, x30, [sp, #-48]!
     734:	mov	x29, sp
     738:	str	x0, [sp, #40]
     73c:	str	x1, [sp, #32]
     740:	str	x2, [sp, #24]
     744:	mov	w3, #0x0                   	// #0
     748:	ldr	x2, [sp, #24]
     74c:	ldr	x1, [sp, #32]
     750:	ldr	x0, [sp, #40]
     754:	bl	798 <tcase_add_fixture>
     758:	nop
     75c:	ldp	x29, x30, [sp], #48
     760:	ret

0000000000000764 <tcase_add_checked_fixture>:
     764:	stp	x29, x30, [sp, #-48]!
     768:	mov	x29, sp
     76c:	str	x0, [sp, #40]
     770:	str	x1, [sp, #32]
     774:	str	x2, [sp, #24]
     778:	mov	w3, #0x1                   	// #1
     77c:	ldr	x2, [sp, #24]
     780:	ldr	x1, [sp, #32]
     784:	ldr	x0, [sp, #40]
     788:	bl	798 <tcase_add_fixture>
     78c:	nop
     790:	ldp	x29, x30, [sp], #48
     794:	ret

0000000000000798 <tcase_add_fixture>:
     798:	stp	x29, x30, [sp, #-64]!
     79c:	mov	x29, sp
     7a0:	str	x19, [sp, #16]
     7a4:	str	x0, [sp, #56]
     7a8:	str	x1, [sp, #48]
     7ac:	str	x2, [sp, #40]
     7b0:	str	w3, [sp, #36]
     7b4:	ldr	x0, [sp, #48]
     7b8:	cmp	x0, #0x0
     7bc:	b.eq	810 <tcase_add_fixture+0x78>  // b.none
     7c0:	ldr	w0, [sp, #36]
     7c4:	cmp	w0, #0x0
     7c8:	b.eq	7f0 <tcase_add_fixture+0x58>  // b.none
     7cc:	ldr	x0, [sp, #56]
     7d0:	ldr	x19, [x0, #48]
     7d4:	ldr	w1, [sp, #36]
     7d8:	ldr	x0, [sp, #48]
     7dc:	bl	6f0 <fixture_create>
     7e0:	mov	x1, x0
     7e4:	mov	x0, x19
     7e8:	bl	0 <check_list_add_end>
     7ec:	b	810 <tcase_add_fixture+0x78>
     7f0:	ldr	x0, [sp, #56]
     7f4:	ldr	x19, [x0, #32]
     7f8:	ldr	w1, [sp, #36]
     7fc:	ldr	x0, [sp, #48]
     800:	bl	6f0 <fixture_create>
     804:	mov	x1, x0
     808:	mov	x0, x19
     80c:	bl	0 <check_list_add_end>
     810:	ldr	x0, [sp, #40]
     814:	cmp	x0, #0x0
     818:	b.eq	86c <tcase_add_fixture+0xd4>  // b.none
     81c:	ldr	w0, [sp, #36]
     820:	cmp	w0, #0x0
     824:	b.eq	84c <tcase_add_fixture+0xb4>  // b.none
     828:	ldr	x0, [sp, #56]
     82c:	ldr	x19, [x0, #56]
     830:	ldr	w1, [sp, #36]
     834:	ldr	x0, [sp, #40]
     838:	bl	6f0 <fixture_create>
     83c:	mov	x1, x0
     840:	mov	x0, x19
     844:	bl	0 <check_list_add_front>
     848:	b	86c <tcase_add_fixture+0xd4>
     84c:	ldr	x0, [sp, #56]
     850:	ldr	x19, [x0, #40]
     854:	ldr	w1, [sp, #36]
     858:	ldr	x0, [sp, #40]
     85c:	bl	6f0 <fixture_create>
     860:	mov	x1, x0
     864:	mov	x0, x19
     868:	bl	0 <check_list_add_front>
     86c:	nop
     870:	ldr	x19, [sp, #16]
     874:	ldp	x29, x30, [sp], #64
     878:	ret

000000000000087c <tcase_set_timeout>:
     87c:	stp	x29, x30, [sp, #-64]!
     880:	mov	x29, sp
     884:	str	x0, [sp, #24]
     888:	str	d0, [sp, #16]
     88c:	ldr	d0, [sp, #16]
     890:	fcmpe	d0, #0.0
     894:	b.ge	89c <tcase_set_timeout+0x20>  // b.tcont
     898:	b	950 <tcase_set_timeout+0xd4>
     89c:	adrp	x0, 0 <suite_create>
     8a0:	add	x0, x0, #0x0
     8a4:	bl	0 <getenv>
     8a8:	str	x0, [sp, #56]
     8ac:	ldr	x0, [sp, #56]
     8b0:	cmp	x0, #0x0
     8b4:	b.eq	90c <tcase_set_timeout+0x90>  // b.none
     8b8:	str	xzr, [sp, #40]
     8bc:	add	x0, sp, #0x28
     8c0:	mov	x1, x0
     8c4:	ldr	x0, [sp, #56]
     8c8:	bl	0 <strtod>
     8cc:	str	d0, [sp, #48]
     8d0:	ldr	d0, [sp, #48]
     8d4:	fcmpe	d0, #0.0
     8d8:	b.lt	90c <tcase_set_timeout+0x90>  // b.tstop
     8dc:	ldr	x0, [sp, #40]
     8e0:	ldr	x1, [sp, #56]
     8e4:	cmp	x1, x0
     8e8:	b.eq	90c <tcase_set_timeout+0x90>  // b.none
     8ec:	ldr	x0, [sp, #40]
     8f0:	ldrb	w0, [x0]
     8f4:	cmp	w0, #0x0
     8f8:	b.ne	90c <tcase_set_timeout+0x90>  // b.any
     8fc:	ldr	d1, [sp, #16]
     900:	ldr	d0, [sp, #48]
     904:	fmul	d0, d1, d0
     908:	str	d0, [sp, #16]
     90c:	ldr	d0, [sp, #16]
     910:	bl	0 <floor>
     914:	fcvtzs	d0, d0
     918:	ldr	x0, [sp, #24]
     91c:	str	d0, [x0, #8]
     920:	ldr	d0, [sp, #16]
     924:	bl	0 <floor>
     928:	fmov	d1, d0
     92c:	ldr	d0, [sp, #16]
     930:	fsub	d0, d0, d1
     934:	mov	x0, #0xcd6500000000        	// #225833675390976
     938:	movk	x0, #0x41cd, lsl #48
     93c:	fmov	d1, x0
     940:	fmul	d0, d0, d1
     944:	fcvtzs	d0, d0
     948:	ldr	x0, [sp, #24]
     94c:	str	d0, [x0, #16]
     950:	nop
     954:	ldp	x29, x30, [sp], #64
     958:	ret

000000000000095c <tcase_fn_start>:
     95c:	stp	x29, x30, [sp, #-48]!
     960:	mov	x29, sp
     964:	str	x0, [sp, #40]
     968:	str	x1, [sp, #32]
     96c:	str	w2, [sp, #28]
     970:	mov	w0, #0x2                   	// #2
     974:	bl	0 <send_ctx_info>
     978:	ldr	w1, [sp, #28]
     97c:	ldr	x0, [sp, #32]
     980:	bl	0 <send_loc_info>
     984:	adrp	x0, 8 <suite_create+0x8>
     988:	add	x0, x0, #0x0
     98c:	ldr	x1, [sp, #40]
     990:	str	x1, [x0]
     994:	nop
     998:	ldp	x29, x30, [sp], #48
     99c:	ret

00000000000009a0 <tcase_name>:
     9a0:	adrp	x0, 8 <suite_create+0x8>
     9a4:	add	x0, x0, #0x0
     9a8:	ldr	x0, [x0]
     9ac:	ret

00000000000009b0 <_mark_point>:
     9b0:	stp	x29, x30, [sp, #-32]!
     9b4:	mov	x29, sp
     9b8:	str	x0, [sp, #24]
     9bc:	str	w1, [sp, #20]
     9c0:	ldr	w1, [sp, #20]
     9c4:	ldr	x0, [sp, #24]
     9c8:	bl	0 <send_loc_info>
     9cc:	nop
     9d0:	ldp	x29, x30, [sp], #32
     9d4:	ret

00000000000009d8 <_ck_assert_failed>:
     9d8:	mov	x12, #0x2130                	// #8496
     9dc:	sub	sp, sp, x12
     9e0:	stp	x29, x30, [sp]
     9e4:	mov	x29, sp
     9e8:	str	x0, [sp, #72]
     9ec:	str	w1, [sp, #68]
     9f0:	str	x2, [sp, #56]
     9f4:	str	x3, [sp, #8456]
     9f8:	str	x4, [sp, #8464]
     9fc:	str	x5, [sp, #8472]
     a00:	str	x6, [sp, #8480]
     a04:	str	x7, [sp, #8488]
     a08:	add	x0, sp, #0x2, lsl #12
     a0c:	str	q0, [x0, #128]
     a10:	add	x0, sp, #0x2, lsl #12
     a14:	str	q1, [x0, #144]
     a18:	add	x0, sp, #0x2, lsl #12
     a1c:	str	q2, [x0, #160]
     a20:	add	x0, sp, #0x2, lsl #12
     a24:	str	q3, [x0, #176]
     a28:	add	x0, sp, #0x2, lsl #12
     a2c:	str	q4, [x0, #192]
     a30:	add	x0, sp, #0x2, lsl #12
     a34:	str	q5, [x0, #208]
     a38:	add	x0, sp, #0x2, lsl #12
     a3c:	str	q6, [x0, #224]
     a40:	add	x0, sp, #0x2, lsl #12
     a44:	str	q7, [x0, #240]
     a48:	ldr	w1, [sp, #68]
     a4c:	ldr	x0, [sp, #72]
     a50:	bl	0 <send_loc_info>
     a54:	add	x0, sp, #0x2, lsl #12
     a58:	add	x0, x0, #0x130
     a5c:	str	x0, [sp, #8272]
     a60:	add	x0, sp, #0x2, lsl #12
     a64:	add	x0, x0, #0x130
     a68:	str	x0, [sp, #8280]
     a6c:	add	x0, sp, #0x2, lsl #12
     a70:	add	x0, x0, #0x100
     a74:	str	x0, [sp, #8288]
     a78:	mov	w0, #0xffffffd8            	// #-40
     a7c:	str	w0, [sp, #8296]
     a80:	mov	w0, #0xffffff80            	// #-128
     a84:	str	w0, [sp, #8300]
     a88:	ldr	w1, [sp, #8296]
     a8c:	ldr	x0, [sp, #8272]
     a90:	cmp	w1, #0x0
     a94:	b.lt	aa8 <_ck_assert_failed+0xd0>  // b.tstop
     a98:	add	x1, x0, #0xf
     a9c:	and	x1, x1, #0xfffffffffffffff8
     aa0:	str	x1, [sp, #8272]
     aa4:	b	ad8 <_ck_assert_failed+0x100>
     aa8:	add	w2, w1, #0x8
     aac:	str	w2, [sp, #8296]
     ab0:	ldr	w2, [sp, #8296]
     ab4:	cmp	w2, #0x0
     ab8:	b.le	acc <_ck_assert_failed+0xf4>
     abc:	add	x1, x0, #0xf
     ac0:	and	x1, x1, #0xfffffffffffffff8
     ac4:	str	x1, [sp, #8272]
     ac8:	b	ad8 <_ck_assert_failed+0x100>
     acc:	ldr	x2, [sp, #8280]
     ad0:	sxtw	x0, w1
     ad4:	add	x0, x2, x0
     ad8:	ldr	x0, [x0]
     adc:	str	x0, [sp, #8304]
     ae0:	ldr	x0, [sp, #8304]
     ae4:	cmp	x0, #0x0
     ae8:	b.eq	b2c <_ck_assert_failed+0x154>  // b.none
     aec:	add	x2, sp, #0x10
     af0:	add	x3, sp, #0x2, lsl #12
     af4:	add	x3, x3, #0x50
     af8:	ldp	x0, x1, [x3]
     afc:	stp	x0, x1, [x2]
     b00:	ldp	x0, x1, [x3, #16]
     b04:	stp	x0, x1, [x2, #16]
     b08:	add	x1, sp, #0x10
     b0c:	add	x0, sp, #0x50
     b10:	mov	x3, x1
     b14:	ldr	x2, [sp, #8304]
     b18:	mov	x1, #0x2000                	// #8192
     b1c:	bl	0 <vsnprintf>
     b20:	add	x0, sp, #0x50
     b24:	str	x0, [sp, #8312]
     b28:	b	b34 <_ck_assert_failed+0x15c>
     b2c:	ldr	x0, [sp, #56]
     b30:	str	x0, [sp, #8312]
     b34:	ldr	x0, [sp, #8312]
     b38:	bl	0 <send_failure_info>
     b3c:	bl	108c <cur_fork_status>
     b40:	cmp	w0, #0x1
     b44:	b.ne	b50 <_ck_assert_failed+0x178>  // b.any
     b48:	mov	w0, #0x1                   	// #1
     b4c:	bl	0 <_exit>
     b50:	mov	w1, #0x1                   	// #1
     b54:	adrp	x0, 0 <error_jmp_buffer>
     b58:	add	x0, x0, #0x0
     b5c:	bl	0 <longjmp>

0000000000000b60 <srunner_create>:
     b60:	stp	x29, x30, [sp, #-48]!
     b64:	mov	x29, sp
     b68:	str	x0, [sp, #24]
     b6c:	mov	x0, #0x40                  	// #64
     b70:	bl	0 <emalloc>
     b74:	str	x0, [sp, #40]
     b78:	bl	0 <check_list_create>
     b7c:	mov	x1, x0
     b80:	ldr	x0, [sp, #40]
     b84:	str	x1, [x0]
     b88:	ldr	x0, [sp, #24]
     b8c:	cmp	x0, #0x0
     b90:	b.eq	ba4 <srunner_create+0x44>  // b.none
     b94:	ldr	x0, [sp, #40]
     b98:	ldr	x0, [x0]
     b9c:	ldr	x1, [sp, #24]
     ba0:	bl	0 <check_list_add_end>
     ba4:	mov	x0, #0xc                   	// #12
     ba8:	bl	0 <emalloc>
     bac:	mov	x1, x0
     bb0:	ldr	x0, [sp, #40]
     bb4:	str	x1, [x0, #8]
     bb8:	ldr	x0, [sp, #40]
     bbc:	ldr	x1, [x0, #8]
     bc0:	str	wzr, [x1, #8]
     bc4:	ldr	x0, [sp, #40]
     bc8:	ldr	x0, [x0, #8]
     bcc:	ldr	w1, [x1, #8]
     bd0:	str	w1, [x0, #4]
     bd4:	ldr	x1, [sp, #40]
     bd8:	ldr	x1, [x1, #8]
     bdc:	ldr	w0, [x0, #4]
     be0:	str	w0, [x1]
     be4:	bl	0 <check_list_create>
     be8:	mov	x1, x0
     bec:	ldr	x0, [sp, #40]
     bf0:	str	x1, [x0, #16]
     bf4:	ldr	x0, [sp, #40]
     bf8:	str	xzr, [x0, #24]
     bfc:	ldr	x0, [sp, #40]
     c00:	str	xzr, [x0, #32]
     c04:	ldr	x0, [sp, #40]
     c08:	str	xzr, [x0, #40]
     c0c:	ldr	x0, [sp, #40]
     c10:	str	xzr, [x0, #48]
     c14:	ldr	x0, [sp, #40]
     c18:	str	wzr, [x0, #56]
     c1c:	ldr	x0, [sp, #40]
     c20:	ldp	x29, x30, [sp], #48
     c24:	ret

0000000000000c28 <srunner_add_suite>:
     c28:	stp	x29, x30, [sp, #-32]!
     c2c:	mov	x29, sp
     c30:	str	x0, [sp, #24]
     c34:	str	x1, [sp, #16]
     c38:	ldr	x0, [sp, #16]
     c3c:	cmp	x0, #0x0
     c40:	b.eq	c58 <srunner_add_suite+0x30>  // b.none
     c44:	ldr	x0, [sp, #24]
     c48:	ldr	x0, [x0]
     c4c:	ldr	x1, [sp, #16]
     c50:	bl	0 <check_list_add_end>
     c54:	b	c5c <srunner_add_suite+0x34>
     c58:	nop
     c5c:	ldp	x29, x30, [sp], #32
     c60:	ret

0000000000000c64 <srunner_free>:
     c64:	stp	x29, x30, [sp, #-48]!
     c68:	mov	x29, sp
     c6c:	str	x0, [sp, #24]
     c70:	ldr	x0, [sp, #24]
     c74:	cmp	x0, #0x0
     c78:	b.eq	d2c <srunner_free+0xc8>  // b.none
     c7c:	ldr	x0, [sp, #24]
     c80:	ldr	x0, [x0, #8]
     c84:	bl	0 <free>
     c88:	ldr	x0, [sp, #24]
     c8c:	ldr	x0, [x0]
     c90:	str	x0, [sp, #40]
     c94:	ldr	x0, [sp, #40]
     c98:	bl	0 <check_list_front>
     c9c:	b	cb4 <srunner_free+0x50>
     ca0:	ldr	x0, [sp, #40]
     ca4:	bl	0 <check_list_val>
     ca8:	bl	f0 <suite_free>
     cac:	ldr	x0, [sp, #40]
     cb0:	bl	0 <check_list_advance>
     cb4:	ldr	x0, [sp, #40]
     cb8:	bl	0 <check_list_at_end>
     cbc:	cmp	w0, #0x0
     cc0:	b.eq	ca0 <srunner_free+0x3c>  // b.none
     cc4:	ldr	x0, [sp, #24]
     cc8:	ldr	x0, [x0]
     ccc:	bl	0 <check_list_free>
     cd0:	ldr	x0, [sp, #24]
     cd4:	ldr	x0, [x0, #16]
     cd8:	str	x0, [sp, #40]
     cdc:	ldr	x0, [sp, #40]
     ce0:	bl	0 <check_list_front>
     ce4:	b	d04 <srunner_free+0xa0>
     ce8:	ldr	x0, [sp, #40]
     cec:	bl	0 <check_list_val>
     cf0:	str	x0, [sp, #32]
     cf4:	ldr	x0, [sp, #32]
     cf8:	bl	f60 <tr_free>
     cfc:	ldr	x0, [sp, #40]
     d00:	bl	0 <check_list_advance>
     d04:	ldr	x0, [sp, #40]
     d08:	bl	0 <check_list_at_end>
     d0c:	cmp	w0, #0x0
     d10:	b.eq	ce8 <srunner_free+0x84>  // b.none
     d14:	ldr	x0, [sp, #24]
     d18:	ldr	x0, [x0, #16]
     d1c:	bl	0 <check_list_free>
     d20:	ldr	x0, [sp, #24]
     d24:	bl	0 <free>
     d28:	b	d30 <srunner_free+0xcc>
     d2c:	nop
     d30:	ldp	x29, x30, [sp], #48
     d34:	ret

0000000000000d38 <srunner_ntests_failed>:
     d38:	sub	sp, sp, #0x10
     d3c:	str	x0, [sp, #8]
     d40:	ldr	x0, [sp, #8]
     d44:	ldr	x0, [x0, #8]
     d48:	ldr	w1, [x0, #4]
     d4c:	ldr	x0, [sp, #8]
     d50:	ldr	x0, [x0, #8]
     d54:	ldr	w0, [x0, #8]
     d58:	add	w0, w1, w0
     d5c:	add	sp, sp, #0x10
     d60:	ret

0000000000000d64 <srunner_ntests_run>:
     d64:	sub	sp, sp, #0x10
     d68:	str	x0, [sp, #8]
     d6c:	ldr	x0, [sp, #8]
     d70:	ldr	x0, [x0, #8]
     d74:	ldr	w0, [x0]
     d78:	add	sp, sp, #0x10
     d7c:	ret

0000000000000d80 <srunner_failures>:
     d80:	stp	x29, x30, [sp, #-64]!
     d84:	mov	x29, sp
     d88:	str	x0, [sp, #24]
     d8c:	str	wzr, [sp, #60]
     d90:	ldr	x0, [sp, #24]
     d94:	bl	d38 <srunner_ntests_failed>
     d98:	sxtw	x0, w0
     d9c:	lsl	x0, x0, #3
     da0:	bl	0 <emalloc>
     da4:	str	x0, [sp, #48]
     da8:	ldr	x0, [sp, #24]
     dac:	ldr	x0, [x0, #16]
     db0:	str	x0, [sp, #40]
     db4:	ldr	x0, [sp, #40]
     db8:	bl	0 <check_list_front>
     dbc:	b	e0c <srunner_failures+0x8c>
     dc0:	ldr	x0, [sp, #40]
     dc4:	bl	0 <check_list_val>
     dc8:	str	x0, [sp, #32]
     dcc:	ldr	x0, [sp, #32]
     dd0:	ldr	w0, [x0]
     dd4:	bl	ebc <non_pass>
     dd8:	cmp	w0, #0x0
     ddc:	b.eq	e04 <srunner_failures+0x84>  // b.none
     de0:	ldr	w0, [sp, #60]
     de4:	add	w1, w0, #0x1
     de8:	str	w1, [sp, #60]
     dec:	sxtw	x0, w0
     df0:	lsl	x0, x0, #3
     df4:	ldr	x1, [sp, #48]
     df8:	add	x0, x1, x0
     dfc:	ldr	x1, [sp, #32]
     e00:	str	x1, [x0]
     e04:	ldr	x0, [sp, #40]
     e08:	bl	0 <check_list_advance>
     e0c:	ldr	x0, [sp, #40]
     e10:	bl	0 <check_list_at_end>
     e14:	cmp	w0, #0x0
     e18:	b.eq	dc0 <srunner_failures+0x40>  // b.none
     e1c:	ldr	x0, [sp, #48]
     e20:	ldp	x29, x30, [sp], #64
     e24:	ret

0000000000000e28 <srunner_results>:
     e28:	stp	x29, x30, [sp, #-80]!
     e2c:	mov	x29, sp
     e30:	str	x19, [sp, #16]
     e34:	str	x0, [sp, #40]
     e38:	str	wzr, [sp, #76]
     e3c:	ldr	x0, [sp, #40]
     e40:	bl	d64 <srunner_ntests_run>
     e44:	sxtw	x0, w0
     e48:	lsl	x0, x0, #3
     e4c:	bl	0 <emalloc>
     e50:	str	x0, [sp, #64]
     e54:	ldr	x0, [sp, #40]
     e58:	ldr	x0, [x0, #16]
     e5c:	str	x0, [sp, #56]
     e60:	ldr	x0, [sp, #56]
     e64:	bl	0 <check_list_front>
     e68:	b	e9c <srunner_results+0x74>
     e6c:	ldr	w0, [sp, #76]
     e70:	add	w1, w0, #0x1
     e74:	str	w1, [sp, #76]
     e78:	sxtw	x0, w0
     e7c:	lsl	x0, x0, #3
     e80:	ldr	x1, [sp, #64]
     e84:	add	x19, x1, x0
     e88:	ldr	x0, [sp, #56]
     e8c:	bl	0 <check_list_val>
     e90:	str	x0, [x19]
     e94:	ldr	x0, [sp, #56]
     e98:	bl	0 <check_list_advance>
     e9c:	ldr	x0, [sp, #56]
     ea0:	bl	0 <check_list_at_end>
     ea4:	cmp	w0, #0x0
     ea8:	b.eq	e6c <srunner_results+0x44>  // b.none
     eac:	ldr	x0, [sp, #64]
     eb0:	ldr	x19, [sp, #16]
     eb4:	ldp	x29, x30, [sp], #80
     eb8:	ret

0000000000000ebc <non_pass>:
     ebc:	sub	sp, sp, #0x10
     ec0:	str	w0, [sp, #12]
     ec4:	ldr	w0, [sp, #12]
     ec8:	cmp	w0, #0x1
     ecc:	cset	w0, ne  // ne = any
     ed0:	and	w0, w0, #0xff
     ed4:	add	sp, sp, #0x10
     ed8:	ret

0000000000000edc <tr_create>:
     edc:	stp	x29, x30, [sp, #-32]!
     ee0:	mov	x29, sp
     ee4:	mov	x0, #0x38                  	// #56
     ee8:	bl	0 <emalloc>
     eec:	str	x0, [sp, #24]
     ef0:	ldr	x0, [sp, #24]
     ef4:	bl	f04 <tr_init>
     ef8:	ldr	x0, [sp, #24]
     efc:	ldp	x29, x30, [sp], #32
     f00:	ret

0000000000000f04 <tr_init>:
     f04:	sub	sp, sp, #0x10
     f08:	str	x0, [sp, #8]
     f0c:	ldr	x0, [sp, #8]
     f10:	str	wzr, [x0, #4]
     f14:	ldr	x0, [sp, #8]
     f18:	mov	w1, #0xffffffff            	// #-1
     f1c:	str	w1, [x0, #16]
     f20:	ldr	x0, [sp, #8]
     f24:	str	wzr, [x0]
     f28:	ldr	x0, [sp, #8]
     f2c:	str	xzr, [x0, #48]
     f30:	ldr	x0, [sp, #8]
     f34:	str	xzr, [x0, #8]
     f38:	ldr	x0, [sp, #8]
     f3c:	str	xzr, [x0, #32]
     f40:	ldr	x0, [sp, #8]
     f44:	str	xzr, [x0, #40]
     f48:	ldr	x0, [sp, #8]
     f4c:	mov	w1, #0xffffffff            	// #-1
     f50:	str	w1, [x0, #24]
     f54:	nop
     f58:	add	sp, sp, #0x10
     f5c:	ret

0000000000000f60 <tr_free>:
     f60:	stp	x29, x30, [sp, #-32]!
     f64:	mov	x29, sp
     f68:	str	x0, [sp, #24]
     f6c:	ldr	x0, [sp, #24]
     f70:	ldr	x0, [x0, #8]
     f74:	bl	0 <free>
     f78:	ldr	x0, [sp, #24]
     f7c:	ldr	x0, [x0, #48]
     f80:	bl	0 <free>
     f84:	ldr	x0, [sp, #24]
     f88:	bl	0 <free>
     f8c:	nop
     f90:	ldp	x29, x30, [sp], #32
     f94:	ret

0000000000000f98 <tr_msg>:
     f98:	sub	sp, sp, #0x10
     f9c:	str	x0, [sp, #8]
     fa0:	ldr	x0, [sp, #8]
     fa4:	ldr	x0, [x0, #48]
     fa8:	add	sp, sp, #0x10
     fac:	ret

0000000000000fb0 <tr_lno>:
     fb0:	sub	sp, sp, #0x10
     fb4:	str	x0, [sp, #8]
     fb8:	ldr	x0, [sp, #8]
     fbc:	ldr	w0, [x0, #16]
     fc0:	add	sp, sp, #0x10
     fc4:	ret

0000000000000fc8 <tr_lfile>:
     fc8:	sub	sp, sp, #0x10
     fcc:	str	x0, [sp, #8]
     fd0:	ldr	x0, [sp, #8]
     fd4:	ldr	x0, [x0, #8]
     fd8:	add	sp, sp, #0x10
     fdc:	ret

0000000000000fe0 <tr_rtype>:
     fe0:	sub	sp, sp, #0x10
     fe4:	str	x0, [sp, #8]
     fe8:	ldr	x0, [sp, #8]
     fec:	ldr	w0, [x0]
     ff0:	add	sp, sp, #0x10
     ff4:	ret

0000000000000ff8 <tr_ctx>:
     ff8:	sub	sp, sp, #0x10
     ffc:	str	x0, [sp, #8]
    1000:	ldr	x0, [sp, #8]
    1004:	ldr	w0, [x0, #4]
    1008:	add	sp, sp, #0x10
    100c:	ret

0000000000001010 <tr_tcname>:
    1010:	sub	sp, sp, #0x10
    1014:	str	x0, [sp, #8]
    1018:	ldr	x0, [sp, #8]
    101c:	ldr	x0, [x0, #32]
    1020:	add	sp, sp, #0x10
    1024:	ret

0000000000001028 <set_fork_status>:
    1028:	stp	x29, x30, [sp, #-32]!
    102c:	mov	x29, sp
    1030:	str	w0, [sp, #28]
    1034:	ldr	w0, [sp, #28]
    1038:	cmp	w0, #0x1
    103c:	b.eq	1058 <set_fork_status+0x30>  // b.none
    1040:	ldr	w0, [sp, #28]
    1044:	cmp	w0, #0x2
    1048:	b.eq	1058 <set_fork_status+0x30>  // b.none
    104c:	ldr	w0, [sp, #28]
    1050:	cmp	w0, #0x0
    1054:	b.ne	106c <set_fork_status+0x44>  // b.any
    1058:	adrp	x0, 0 <suite_create>
    105c:	add	x0, x0, #0x0
    1060:	ldr	w1, [sp, #28]
    1064:	str	w1, [x0]
    1068:	b	1084 <set_fork_status+0x5c>
    106c:	mov	w2, #0x24a                 	// #586
    1070:	adrp	x0, 0 <suite_create>
    1074:	add	x1, x0, #0x0
    1078:	adrp	x0, 0 <suite_create>
    107c:	add	x0, x0, #0x0
    1080:	bl	0 <eprintf>
    1084:	ldp	x29, x30, [sp], #32
    1088:	ret

000000000000108c <cur_fork_status>:
    108c:	adrp	x0, 0 <suite_create>
    1090:	add	x0, x0, #0x0
    1094:	ldr	w0, [x0]
    1098:	ret

000000000000109c <check_get_clockid>:
    109c:	stp	x29, x30, [sp, #-32]!
    10a0:	mov	x29, sp
    10a4:	add	x0, sp, #0x18
    10a8:	mov	x2, x0
    10ac:	mov	x1, #0x0                   	// #0
    10b0:	mov	w0, #0x1                   	// #1
    10b4:	bl	0 <timer_create>
    10b8:	cmp	w0, #0x0
    10bc:	b.ne	10dc <check_get_clockid+0x40>  // b.any
    10c0:	ldr	x0, [sp, #24]
    10c4:	bl	0 <timer_delete>
    10c8:	adrp	x0, 0 <suite_create>
    10cc:	add	x0, x0, #0x0
    10d0:	mov	w1, #0x1                   	// #1
    10d4:	str	w1, [x0]
    10d8:	b	10e8 <check_get_clockid+0x4c>
    10dc:	adrp	x0, 0 <suite_create>
    10e0:	add	x0, x0, #0x0
    10e4:	str	wzr, [x0]
    10e8:	adrp	x0, 0 <suite_create>
    10ec:	add	x0, x0, #0x0
    10f0:	ldr	w0, [x0]
    10f4:	ldp	x29, x30, [sp], #32
    10f8:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	stp	x29, x30, [sp, #-304]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #88]
  10:	str	x1, [sp, #80]
  14:	str	w2, [sp, #76]
  18:	str	x3, [sp, #264]
  1c:	str	x4, [sp, #272]
  20:	str	x5, [sp, #280]
  24:	str	x6, [sp, #288]
  28:	str	x7, [sp, #296]
  2c:	str	q0, [sp, #128]
  30:	str	q1, [sp, #144]
  34:	str	q2, [sp, #160]
  38:	str	q3, [sp, #176]
  3c:	str	q4, [sp, #192]
  40:	str	q5, [sp, #208]
  44:	str	q6, [sp, #224]
  48:	str	q7, [sp, #240]
  4c:	adrp	x0, 0 <stderr>
  50:	add	x0, x0, #0x0
  54:	ldr	x0, [x0]
  58:	bl	0 <fflush>
  5c:	adrp	x0, 0 <stderr>
  60:	add	x0, x0, #0x0
  64:	ldr	x4, [x0]
  68:	ldr	w3, [sp, #76]
  6c:	ldr	x2, [sp, #80]
  70:	adrp	x0, 0 <eprintf>
  74:	add	x1, x0, #0x0
  78:	mov	x0, x4
  7c:	bl	0 <fprintf>
  80:	add	x0, sp, #0x130
  84:	str	x0, [sp, #96]
  88:	add	x0, sp, #0x130
  8c:	str	x0, [sp, #104]
  90:	add	x0, sp, #0x100
  94:	str	x0, [sp, #112]
  98:	mov	w0, #0xffffffd8            	// #-40
  9c:	str	w0, [sp, #120]
  a0:	mov	w0, #0xffffff80            	// #-128
  a4:	str	w0, [sp, #124]
  a8:	adrp	x0, 0 <stderr>
  ac:	add	x0, x0, #0x0
  b0:	ldr	x4, [x0]
  b4:	add	x2, sp, #0x20
  b8:	add	x3, sp, #0x60
  bc:	ldp	x0, x1, [x3]
  c0:	stp	x0, x1, [x2]
  c4:	ldp	x0, x1, [x3, #16]
  c8:	stp	x0, x1, [x2, #16]
  cc:	add	x0, sp, #0x20
  d0:	mov	x2, x0
  d4:	ldr	x1, [sp, #88]
  d8:	mov	x0, x4
  dc:	bl	0 <vfprintf>
  e0:	ldr	x0, [sp, #88]
  e4:	ldrb	w0, [x0]
  e8:	cmp	w0, #0x0
  ec:	b.eq	13c <eprintf+0x13c>  // b.none
  f0:	ldr	x0, [sp, #88]
  f4:	bl	0 <strlen>
  f8:	sub	x0, x0, #0x1
  fc:	ldr	x1, [sp, #88]
 100:	add	x0, x1, x0
 104:	ldrb	w0, [x0]
 108:	cmp	w0, #0x3a
 10c:	b.ne	13c <eprintf+0x13c>  // b.any
 110:	adrp	x0, 0 <stderr>
 114:	add	x0, x0, #0x0
 118:	ldr	x19, [x0]
 11c:	bl	0 <__errno_location>
 120:	ldr	w0, [x0]
 124:	bl	0 <strerror>
 128:	mov	x2, x0
 12c:	adrp	x0, 0 <eprintf>
 130:	add	x1, x0, #0x0
 134:	mov	x0, x19
 138:	bl	0 <fprintf>
 13c:	adrp	x0, 0 <stderr>
 140:	add	x0, x0, #0x0
 144:	ldr	x0, [x0]
 148:	mov	x1, x0
 14c:	mov	w0, #0xa                   	// #10
 150:	bl	0 <fputc>
 154:	mov	w0, #0x2                   	// #2
 158:	bl	0 <exit>

000000000000015c <emalloc>:
 15c:	stp	x29, x30, [sp, #-48]!
 160:	mov	x29, sp
 164:	str	x0, [sp, #24]
 168:	ldr	x0, [sp, #24]
 16c:	bl	0 <malloc>
 170:	str	x0, [sp, #40]
 174:	ldr	x0, [sp, #40]
 178:	cmp	x0, #0x0
 17c:	b.ne	19c <emalloc+0x40>  // b.any
 180:	ldr	x3, [sp, #24]
 184:	mov	w2, #0x3e                  	// #62
 188:	adrp	x0, 0 <eprintf>
 18c:	add	x1, x0, #0x0
 190:	adrp	x0, 0 <eprintf>
 194:	add	x0, x0, #0x0
 198:	bl	0 <eprintf>
 19c:	ldr	x0, [sp, #40]
 1a0:	ldp	x29, x30, [sp], #48
 1a4:	ret

00000000000001a8 <erealloc>:
 1a8:	stp	x29, x30, [sp, #-48]!
 1ac:	mov	x29, sp
 1b0:	str	x0, [sp, #24]
 1b4:	str	x1, [sp, #16]
 1b8:	ldr	x1, [sp, #16]
 1bc:	ldr	x0, [sp, #24]
 1c0:	bl	0 <realloc>
 1c4:	str	x0, [sp, #40]
 1c8:	ldr	x0, [sp, #40]
 1cc:	cmp	x0, #0x0
 1d0:	b.ne	1f0 <erealloc+0x48>  // b.any
 1d4:	ldr	x3, [sp, #16]
 1d8:	mov	w2, #0x48                  	// #72
 1dc:	adrp	x0, 0 <eprintf>
 1e0:	add	x1, x0, #0x0
 1e4:	adrp	x0, 0 <eprintf>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <eprintf>
 1f0:	ldr	x0, [sp, #40]
 1f4:	ldp	x29, x30, [sp], #48
 1f8:	ret

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <maybe_grow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	w1, [x0]
  14:	ldr	x0, [sp, #24]
  18:	ldr	w0, [x0, #4]
  1c:	cmp	w1, w0
  20:	b.cc	68 <maybe_grow+0x68>  // b.lo, b.ul, b.last
  24:	ldr	x0, [sp, #24]
  28:	ldr	w0, [x0, #4]
  2c:	lsl	w1, w0, #1
  30:	ldr	x0, [sp, #24]
  34:	str	w1, [x0, #4]
  38:	ldr	x0, [sp, #24]
  3c:	ldr	x2, [x0, #16]
  40:	ldr	x0, [sp, #24]
  44:	ldr	w0, [x0, #4]
  48:	mov	w0, w0
  4c:	lsl	x0, x0, #3
  50:	mov	x1, x0
  54:	mov	x0, x2
  58:	bl	0 <erealloc>
  5c:	mov	x1, x0
  60:	ldr	x0, [sp, #24]
  64:	str	x1, [x0, #16]
  68:	nop
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

0000000000000074 <check_list_create>:
  74:	stp	x29, x30, [sp, #-32]!
  78:	mov	x29, sp
  7c:	mov	x0, #0x18                  	// #24
  80:	bl	0 <emalloc>
  84:	str	x0, [sp, #24]
  88:	ldr	x0, [sp, #24]
  8c:	str	wzr, [x0]
  90:	ldr	x0, [sp, #24]
  94:	mov	w1, #0x1                   	// #1
  98:	str	w1, [x0, #4]
  9c:	mov	x0, #0x8                   	// #8
  a0:	bl	0 <emalloc>
  a4:	mov	x1, x0
  a8:	ldr	x0, [sp, #24]
  ac:	str	x1, [x0, #16]
  b0:	ldr	x0, [sp, #24]
  b4:	mov	w1, #0xffffffff            	// #-1
  b8:	str	w1, [x0, #12]
  bc:	ldr	x0, [sp, #24]
  c0:	ldr	w1, [x0, #12]
  c4:	ldr	x0, [sp, #24]
  c8:	str	w1, [x0, #8]
  cc:	ldr	x0, [sp, #24]
  d0:	ldp	x29, x30, [sp], #32
  d4:	ret

00000000000000d8 <check_list_add_front>:
  d8:	stp	x29, x30, [sp, #-32]!
  dc:	mov	x29, sp
  e0:	str	x0, [sp, #24]
  e4:	str	x1, [sp, #16]
  e8:	ldr	x0, [sp, #24]
  ec:	cmp	x0, #0x0
  f0:	b.eq	184 <check_list_add_front+0xac>  // b.none
  f4:	ldr	x0, [sp, #24]
  f8:	bl	0 <maybe_grow>
  fc:	ldr	x0, [sp, #24]
 100:	ldr	x0, [x0, #16]
 104:	add	x3, x0, #0x8
 108:	ldr	x0, [sp, #24]
 10c:	ldr	x1, [x0, #16]
 110:	ldr	x0, [sp, #24]
 114:	ldr	w0, [x0]
 118:	mov	w0, w0
 11c:	lsl	x0, x0, #3
 120:	mov	x2, x0
 124:	mov	x0, x3
 128:	bl	0 <memmove>
 12c:	ldr	x0, [sp, #24]
 130:	ldr	w0, [x0, #12]
 134:	add	w1, w0, #0x1
 138:	ldr	x0, [sp, #24]
 13c:	str	w1, [x0, #12]
 140:	ldr	x0, [sp, #24]
 144:	ldr	w0, [x0]
 148:	add	w1, w0, #0x1
 14c:	ldr	x0, [sp, #24]
 150:	str	w1, [x0]
 154:	ldr	x0, [sp, #24]
 158:	str	wzr, [x0, #8]
 15c:	ldr	x0, [sp, #24]
 160:	ldr	x1, [x0, #16]
 164:	ldr	x0, [sp, #24]
 168:	ldr	w0, [x0, #8]
 16c:	sxtw	x0, w0
 170:	lsl	x0, x0, #3
 174:	add	x0, x1, x0
 178:	ldr	x1, [sp, #16]
 17c:	str	x1, [x0]
 180:	b	188 <check_list_add_front+0xb0>
 184:	nop
 188:	ldp	x29, x30, [sp], #32
 18c:	ret

0000000000000190 <check_list_add_end>:
 190:	stp	x29, x30, [sp, #-32]!
 194:	mov	x29, sp
 198:	str	x0, [sp, #24]
 19c:	str	x1, [sp, #16]
 1a0:	ldr	x0, [sp, #24]
 1a4:	cmp	x0, #0x0
 1a8:	b.eq	214 <check_list_add_end+0x84>  // b.none
 1ac:	ldr	x0, [sp, #24]
 1b0:	bl	0 <maybe_grow>
 1b4:	ldr	x0, [sp, #24]
 1b8:	ldr	w0, [x0, #12]
 1bc:	add	w1, w0, #0x1
 1c0:	ldr	x0, [sp, #24]
 1c4:	str	w1, [x0, #12]
 1c8:	ldr	x0, [sp, #24]
 1cc:	ldr	w0, [x0]
 1d0:	add	w1, w0, #0x1
 1d4:	ldr	x0, [sp, #24]
 1d8:	str	w1, [x0]
 1dc:	ldr	x0, [sp, #24]
 1e0:	ldr	w1, [x0, #12]
 1e4:	ldr	x0, [sp, #24]
 1e8:	str	w1, [x0, #8]
 1ec:	ldr	x0, [sp, #24]
 1f0:	ldr	x1, [x0, #16]
 1f4:	ldr	x0, [sp, #24]
 1f8:	ldr	w0, [x0, #8]
 1fc:	sxtw	x0, w0
 200:	lsl	x0, x0, #3
 204:	add	x0, x1, x0
 208:	ldr	x1, [sp, #16]
 20c:	str	x1, [x0]
 210:	b	218 <check_list_add_end+0x88>
 214:	nop
 218:	ldp	x29, x30, [sp], #32
 21c:	ret

0000000000000220 <check_list_at_end>:
 220:	sub	sp, sp, #0x10
 224:	str	x0, [sp, #8]
 228:	ldr	x0, [sp, #8]
 22c:	ldr	w0, [x0, #8]
 230:	cmn	w0, #0x1
 234:	b.ne	240 <check_list_at_end+0x20>  // b.any
 238:	mov	w0, #0x1                   	// #1
 23c:	b	25c <check_list_at_end+0x3c>
 240:	ldr	x0, [sp, #8]
 244:	ldr	w1, [x0, #8]
 248:	ldr	x0, [sp, #8]
 24c:	ldr	w0, [x0, #12]
 250:	cmp	w1, w0
 254:	cset	w0, gt
 258:	and	w0, w0, #0xff
 25c:	add	sp, sp, #0x10
 260:	ret

0000000000000264 <check_list_front>:
 264:	sub	sp, sp, #0x10
 268:	str	x0, [sp, #8]
 26c:	ldr	x0, [sp, #8]
 270:	ldr	w0, [x0, #8]
 274:	cmn	w0, #0x1
 278:	b.eq	288 <check_list_front+0x24>  // b.none
 27c:	ldr	x0, [sp, #8]
 280:	str	wzr, [x0, #8]
 284:	b	28c <check_list_front+0x28>
 288:	nop
 28c:	add	sp, sp, #0x10
 290:	ret

0000000000000294 <check_list_free>:
 294:	stp	x29, x30, [sp, #-32]!
 298:	mov	x29, sp
 29c:	str	x0, [sp, #24]
 2a0:	ldr	x0, [sp, #24]
 2a4:	cmp	x0, #0x0
 2a8:	b.eq	2c4 <check_list_free+0x30>  // b.none
 2ac:	ldr	x0, [sp, #24]
 2b0:	ldr	x0, [x0, #16]
 2b4:	bl	0 <free>
 2b8:	ldr	x0, [sp, #24]
 2bc:	bl	0 <free>
 2c0:	b	2c8 <check_list_free+0x34>
 2c4:	nop
 2c8:	ldp	x29, x30, [sp], #32
 2cc:	ret

00000000000002d0 <check_list_val>:
 2d0:	sub	sp, sp, #0x10
 2d4:	str	x0, [sp, #8]
 2d8:	ldr	x0, [sp, #8]
 2dc:	cmp	x0, #0x0
 2e0:	b.ne	2ec <check_list_val+0x1c>  // b.any
 2e4:	mov	x0, #0x0                   	// #0
 2e8:	b	33c <check_list_val+0x6c>
 2ec:	ldr	x0, [sp, #8]
 2f0:	ldr	w0, [x0, #8]
 2f4:	cmn	w0, #0x1
 2f8:	b.eq	314 <check_list_val+0x44>  // b.none
 2fc:	ldr	x0, [sp, #8]
 300:	ldr	w1, [x0, #8]
 304:	ldr	x0, [sp, #8]
 308:	ldr	w0, [x0, #12]
 30c:	cmp	w1, w0
 310:	b.le	31c <check_list_val+0x4c>
 314:	mov	x0, #0x0                   	// #0
 318:	b	33c <check_list_val+0x6c>
 31c:	ldr	x0, [sp, #8]
 320:	ldr	x1, [x0, #16]
 324:	ldr	x0, [sp, #8]
 328:	ldr	w0, [x0, #8]
 32c:	sxtw	x0, w0
 330:	lsl	x0, x0, #3
 334:	add	x0, x1, x0
 338:	ldr	x0, [x0]
 33c:	add	sp, sp, #0x10
 340:	ret

0000000000000344 <check_list_advance>:
 344:	stp	x29, x30, [sp, #-32]!
 348:	mov	x29, sp
 34c:	str	x0, [sp, #24]
 350:	ldr	x0, [sp, #24]
 354:	cmp	x0, #0x0
 358:	b.eq	384 <check_list_advance+0x40>  // b.none
 35c:	ldr	x0, [sp, #24]
 360:	bl	220 <check_list_at_end>
 364:	cmp	w0, #0x0
 368:	b.ne	38c <check_list_advance+0x48>  // b.any
 36c:	ldr	x0, [sp, #24]
 370:	ldr	w0, [x0, #8]
 374:	add	w1, w0, #0x1
 378:	ldr	x0, [sp, #24]
 37c:	str	w1, [x0, #8]
 380:	b	390 <check_list_advance+0x4c>
 384:	nop
 388:	b	390 <check_list_advance+0x4c>
 38c:	nop
 390:	ldp	x29, x30, [sp], #32
 394:	ret

0000000000000398 <check_list_apply>:
 398:	stp	x29, x30, [sp, #-32]!
 39c:	mov	x29, sp
 3a0:	str	x0, [sp, #24]
 3a4:	str	x1, [sp, #16]
 3a8:	ldr	x0, [sp, #24]
 3ac:	cmp	x0, #0x0
 3b0:	b.eq	3f8 <check_list_apply+0x60>  // b.none
 3b4:	ldr	x0, [sp, #16]
 3b8:	cmp	x0, #0x0
 3bc:	b.eq	3f8 <check_list_apply+0x60>  // b.none
 3c0:	ldr	x0, [sp, #24]
 3c4:	bl	264 <check_list_front>
 3c8:	b	3e4 <check_list_apply+0x4c>
 3cc:	ldr	x0, [sp, #24]
 3d0:	bl	2d0 <check_list_val>
 3d4:	ldr	x1, [sp, #16]
 3d8:	blr	x1
 3dc:	ldr	x0, [sp, #24]
 3e0:	bl	344 <check_list_advance>
 3e4:	ldr	x0, [sp, #24]
 3e8:	bl	220 <check_list_at_end>
 3ec:	cmp	w0, #0x0
 3f0:	b.eq	3cc <check_list_apply+0x34>  // b.none
 3f4:	b	3fc <check_list_apply+0x64>
 3f8:	nop
 3fc:	ldp	x29, x30, [sp], #32
 400:	ret

0000000000000404 <check_list_contains>:
 404:	stp	x29, x30, [sp, #-32]!
 408:	mov	x29, sp
 40c:	str	x0, [sp, #24]
 410:	str	x1, [sp, #16]
 414:	ldr	x0, [sp, #24]
 418:	bl	264 <check_list_front>
 41c:	b	448 <check_list_contains+0x44>
 420:	ldr	x0, [sp, #24]
 424:	bl	2d0 <check_list_val>
 428:	mov	x1, x0
 42c:	ldr	x0, [sp, #16]
 430:	cmp	x0, x1
 434:	b.ne	440 <check_list_contains+0x3c>  // b.any
 438:	mov	w0, #0x1                   	// #1
 43c:	b	45c <check_list_contains+0x58>
 440:	ldr	x0, [sp, #24]
 444:	bl	344 <check_list_advance>
 448:	ldr	x0, [sp, #24]
 44c:	bl	220 <check_list_at_end>
 450:	cmp	w0, #0x0
 454:	b.eq	420 <check_list_contains+0x1c>  // b.none
 458:	mov	w0, #0x0                   	// #0
 45c:	ldp	x29, x30, [sp], #32
 460:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	ldr	x0, [x0, #24]
  14:	cmp	x0, #0x0
  18:	b.ne	2c <srunner_set_log+0x2c>  // b.any
  1c:	ldr	x0, [sp, #8]
  20:	ldr	x1, [sp]
  24:	str	x1, [x0, #24]
  28:	b	30 <srunner_set_log+0x30>
  2c:	nop
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <srunner_has_log>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x0, [sp, #24]
  44:	ldr	x0, [sp, #24]
  48:	bl	60 <srunner_log_fname>
  4c:	cmp	x0, #0x0
  50:	cset	w0, ne  // ne = any
  54:	and	w0, w0, #0xff
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <srunner_log_fname>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	mov	x29, sp
  68:	str	x0, [sp, #24]
  6c:	ldr	x0, [sp, #24]
  70:	ldr	x0, [x0, #24]
  74:	cmp	x0, #0x0
  78:	b.eq	88 <srunner_log_fname+0x28>  // b.none
  7c:	ldr	x0, [sp, #24]
  80:	ldr	x0, [x0, #24]
  84:	b	94 <srunner_log_fname+0x34>
  88:	adrp	x0, 0 <srunner_set_log>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <getenv>
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <srunner_set_xml>:
  9c:	sub	sp, sp, #0x10
  a0:	str	x0, [sp, #8]
  a4:	str	x1, [sp]
  a8:	ldr	x0, [sp, #8]
  ac:	ldr	x0, [x0, #32]
  b0:	cmp	x0, #0x0
  b4:	b.ne	c8 <srunner_set_xml+0x2c>  // b.any
  b8:	ldr	x0, [sp, #8]
  bc:	ldr	x1, [sp]
  c0:	str	x1, [x0, #32]
  c4:	b	cc <srunner_set_xml+0x30>
  c8:	nop
  cc:	add	sp, sp, #0x10
  d0:	ret

00000000000000d4 <srunner_has_xml>:
  d4:	stp	x29, x30, [sp, #-32]!
  d8:	mov	x29, sp
  dc:	str	x0, [sp, #24]
  e0:	ldr	x0, [sp, #24]
  e4:	bl	fc <srunner_xml_fname>
  e8:	cmp	x0, #0x0
  ec:	cset	w0, ne  // ne = any
  f0:	and	w0, w0, #0xff
  f4:	ldp	x29, x30, [sp], #32
  f8:	ret

00000000000000fc <srunner_xml_fname>:
  fc:	stp	x29, x30, [sp, #-32]!
 100:	mov	x29, sp
 104:	str	x0, [sp, #24]
 108:	ldr	x0, [sp, #24]
 10c:	ldr	x0, [x0, #32]
 110:	cmp	x0, #0x0
 114:	b.eq	124 <srunner_xml_fname+0x28>  // b.none
 118:	ldr	x0, [sp, #24]
 11c:	ldr	x0, [x0, #32]
 120:	b	130 <srunner_xml_fname+0x34>
 124:	adrp	x0, 0 <srunner_set_log>
 128:	add	x0, x0, #0x0
 12c:	bl	0 <getenv>
 130:	ldp	x29, x30, [sp], #32
 134:	ret

0000000000000138 <srunner_set_tap>:
 138:	sub	sp, sp, #0x10
 13c:	str	x0, [sp, #8]
 140:	str	x1, [sp]
 144:	ldr	x0, [sp, #8]
 148:	ldr	x0, [x0, #40]
 14c:	cmp	x0, #0x0
 150:	b.ne	164 <srunner_set_tap+0x2c>  // b.any
 154:	ldr	x0, [sp, #8]
 158:	ldr	x1, [sp]
 15c:	str	x1, [x0, #40]
 160:	b	168 <srunner_set_tap+0x30>
 164:	nop
 168:	add	sp, sp, #0x10
 16c:	ret

0000000000000170 <srunner_has_tap>:
 170:	stp	x29, x30, [sp, #-32]!
 174:	mov	x29, sp
 178:	str	x0, [sp, #24]
 17c:	ldr	x0, [sp, #24]
 180:	bl	198 <srunner_tap_fname>
 184:	cmp	x0, #0x0
 188:	cset	w0, ne  // ne = any
 18c:	and	w0, w0, #0xff
 190:	ldp	x29, x30, [sp], #32
 194:	ret

0000000000000198 <srunner_tap_fname>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	mov	x29, sp
 1a0:	str	x0, [sp, #24]
 1a4:	ldr	x0, [sp, #24]
 1a8:	ldr	x0, [x0, #40]
 1ac:	cmp	x0, #0x0
 1b0:	b.eq	1c0 <srunner_tap_fname+0x28>  // b.none
 1b4:	ldr	x0, [sp, #24]
 1b8:	ldr	x0, [x0, #40]
 1bc:	b	1cc <srunner_tap_fname+0x34>
 1c0:	adrp	x0, 0 <srunner_set_log>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <getenv>
 1cc:	ldp	x29, x30, [sp], #32
 1d0:	ret

00000000000001d4 <srunner_register_lfun>:
 1d4:	stp	x29, x30, [sp, #-64]!
 1d8:	mov	x29, sp
 1dc:	str	x0, [sp, #40]
 1e0:	str	x1, [sp, #32]
 1e4:	str	w2, [sp, #28]
 1e8:	str	x3, [sp, #16]
 1ec:	str	w4, [sp, #24]
 1f0:	mov	x0, #0x18                  	// #24
 1f4:	bl	0 <emalloc>
 1f8:	str	x0, [sp, #56]
 1fc:	ldr	w0, [sp, #24]
 200:	cmp	w0, #0x4
 204:	b.ne	210 <srunner_register_lfun+0x3c>  // b.any
 208:	bl	0 <get_env_printmode>
 20c:	str	w0, [sp, #24]
 210:	ldr	x0, [sp, #56]
 214:	ldr	x1, [sp, #32]
 218:	str	x1, [x0]
 21c:	ldr	x0, [sp, #56]
 220:	ldr	x1, [sp, #16]
 224:	str	x1, [x0, #8]
 228:	ldr	x0, [sp, #56]
 22c:	ldr	w1, [sp, #28]
 230:	str	w1, [x0, #16]
 234:	ldr	x0, [sp, #56]
 238:	ldr	w1, [sp, #24]
 23c:	str	w1, [x0, #20]
 240:	ldr	x0, [sp, #40]
 244:	ldr	x0, [x0, #48]
 248:	ldr	x1, [sp, #56]
 24c:	bl	0 <check_list_add_end>
 250:	nop
 254:	ldp	x29, x30, [sp], #64
 258:	ret

000000000000025c <log_srunner_start>:
 25c:	stp	x29, x30, [sp, #-32]!
 260:	mov	x29, sp
 264:	str	x0, [sp, #24]
 268:	mov	w2, #0x2                   	// #2
 26c:	mov	x1, #0x0                   	// #0
 270:	ldr	x0, [sp, #24]
 274:	bl	398 <srunner_send_evt>
 278:	nop
 27c:	ldp	x29, x30, [sp], #32
 280:	ret

0000000000000284 <log_srunner_end>:
 284:	stp	x29, x30, [sp, #-32]!
 288:	mov	x29, sp
 28c:	str	x0, [sp, #24]
 290:	mov	w2, #0x4                   	// #4
 294:	mov	x1, #0x0                   	// #0
 298:	ldr	x0, [sp, #24]
 29c:	bl	398 <srunner_send_evt>
 2a0:	nop
 2a4:	ldp	x29, x30, [sp], #32
 2a8:	ret

00000000000002ac <log_suite_start>:
 2ac:	stp	x29, x30, [sp, #-32]!
 2b0:	mov	x29, sp
 2b4:	str	x0, [sp, #24]
 2b8:	str	x1, [sp, #16]
 2bc:	mov	w2, #0x3                   	// #3
 2c0:	ldr	x1, [sp, #16]
 2c4:	ldr	x0, [sp, #24]
 2c8:	bl	398 <srunner_send_evt>
 2cc:	nop
 2d0:	ldp	x29, x30, [sp], #32
 2d4:	ret

00000000000002d8 <log_suite_end>:
 2d8:	stp	x29, x30, [sp, #-32]!
 2dc:	mov	x29, sp
 2e0:	str	x0, [sp, #24]
 2e4:	str	x1, [sp, #16]
 2e8:	mov	w2, #0x5                   	// #5
 2ec:	ldr	x1, [sp, #16]
 2f0:	ldr	x0, [sp, #24]
 2f4:	bl	398 <srunner_send_evt>
 2f8:	nop
 2fc:	ldp	x29, x30, [sp], #32
 300:	ret

0000000000000304 <log_test_start>:
 304:	stp	x29, x30, [sp, #-160]!
 308:	mov	x29, sp
 30c:	str	x0, [sp, #40]
 310:	str	x1, [sp, #32]
 314:	str	x2, [sp, #24]
 318:	ldr	x0, [sp, #32]
 31c:	ldr	x1, [x0]
 320:	ldr	x0, [sp, #24]
 324:	ldr	x0, [x0]
 328:	ldr	x0, [x0]
 32c:	add	x5, sp, #0x38
 330:	mov	x4, x0
 334:	mov	x3, x1
 338:	adrp	x0, 0 <srunner_set_log>
 33c:	add	x2, x0, #0x0
 340:	mov	x1, #0x63                  	// #99
 344:	mov	x0, x5
 348:	bl	0 <snprintf>
 34c:	add	x0, sp, #0x38
 350:	mov	w2, #0x6                   	// #6
 354:	mov	x1, x0
 358:	ldr	x0, [sp, #40]
 35c:	bl	398 <srunner_send_evt>
 360:	nop
 364:	ldp	x29, x30, [sp], #160
 368:	ret

000000000000036c <log_test_end>:
 36c:	stp	x29, x30, [sp, #-32]!
 370:	mov	x29, sp
 374:	str	x0, [sp, #24]
 378:	str	x1, [sp, #16]
 37c:	mov	w2, #0x7                   	// #7
 380:	ldr	x1, [sp, #16]
 384:	ldr	x0, [sp, #24]
 388:	bl	398 <srunner_send_evt>
 38c:	nop
 390:	ldp	x29, x30, [sp], #32
 394:	ret

0000000000000398 <srunner_send_evt>:
 398:	stp	x29, x30, [sp, #-64]!
 39c:	mov	x29, sp
 3a0:	str	x0, [sp, #40]
 3a4:	str	x1, [sp, #32]
 3a8:	str	w2, [sp, #28]
 3ac:	ldr	x0, [sp, #40]
 3b0:	ldr	x0, [x0, #48]
 3b4:	str	x0, [sp, #56]
 3b8:	ldr	x0, [sp, #56]
 3bc:	bl	0 <check_list_front>
 3c0:	b	41c <srunner_send_evt+0x84>
 3c4:	ldr	x0, [sp, #56]
 3c8:	bl	0 <check_list_val>
 3cc:	str	x0, [sp, #48]
 3d0:	ldr	x0, [sp, #48]
 3d4:	ldr	x0, [x0]
 3d8:	bl	0 <fflush>
 3dc:	ldr	x0, [sp, #48]
 3e0:	ldr	x5, [x0, #8]
 3e4:	ldr	x0, [sp, #48]
 3e8:	ldr	x1, [x0]
 3ec:	ldr	x0, [sp, #48]
 3f0:	ldr	w0, [x0, #20]
 3f4:	ldr	w4, [sp, #28]
 3f8:	ldr	x3, [sp, #32]
 3fc:	mov	w2, w0
 400:	ldr	x0, [sp, #40]
 404:	blr	x5
 408:	ldr	x0, [sp, #48]
 40c:	ldr	x0, [x0]
 410:	bl	0 <fflush>
 414:	ldr	x0, [sp, #56]
 418:	bl	0 <check_list_advance>
 41c:	ldr	x0, [sp, #56]
 420:	bl	0 <check_list_at_end>
 424:	cmp	w0, #0x0
 428:	b.eq	3c4 <srunner_send_evt+0x2c>  // b.none
 42c:	nop
 430:	nop
 434:	ldp	x29, x30, [sp], #64
 438:	ret

000000000000043c <stdout_lfun>:
 43c:	stp	x29, x30, [sp, #-64]!
 440:	mov	x29, sp
 444:	str	x0, [sp, #40]
 448:	str	x1, [sp, #32]
 44c:	str	w2, [sp, #28]
 450:	str	x3, [sp, #16]
 454:	str	w4, [sp, #24]
 458:	ldr	w0, [sp, #24]
 45c:	cmp	w0, #0x7
 460:	b.eq	598 <stdout_lfun+0x15c>  // b.none
 464:	ldr	w0, [sp, #24]
 468:	cmp	w0, #0x7
 46c:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 470:	ldr	w0, [sp, #24]
 474:	cmp	w0, #0x6
 478:	b.eq	5a0 <stdout_lfun+0x164>  // b.none
 47c:	ldr	w0, [sp, #24]
 480:	cmp	w0, #0x6
 484:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 488:	ldr	w0, [sp, #24]
 48c:	cmp	w0, #0x5
 490:	b.eq	5a8 <stdout_lfun+0x16c>  // b.none
 494:	ldr	w0, [sp, #24]
 498:	cmp	w0, #0x5
 49c:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 4a0:	ldr	w0, [sp, #24]
 4a4:	cmp	w0, #0x4
 4a8:	b.eq	560 <stdout_lfun+0x124>  // b.none
 4ac:	ldr	w0, [sp, #24]
 4b0:	cmp	w0, #0x4
 4b4:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 4b8:	ldr	w0, [sp, #24]
 4bc:	cmp	w0, #0x3
 4c0:	b.eq	52c <stdout_lfun+0xf0>  // b.none
 4c4:	ldr	w0, [sp, #24]
 4c8:	cmp	w0, #0x3
 4cc:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 4d0:	ldr	w0, [sp, #24]
 4d4:	cmp	w0, #0x2
 4d8:	b.eq	504 <stdout_lfun+0xc8>  // b.none
 4dc:	ldr	w0, [sp, #24]
 4e0:	cmp	w0, #0x2
 4e4:	b.hi	580 <stdout_lfun+0x144>  // b.pmore
 4e8:	ldr	w0, [sp, #24]
 4ec:	cmp	w0, #0x0
 4f0:	b.eq	5b0 <stdout_lfun+0x174>  // b.none
 4f4:	ldr	w0, [sp, #24]
 4f8:	cmp	w0, #0x1
 4fc:	b.eq	5b8 <stdout_lfun+0x17c>  // b.none
 500:	b	580 <stdout_lfun+0x144>
 504:	ldr	w0, [sp, #28]
 508:	cmp	w0, #0x0
 50c:	b.eq	5c0 <stdout_lfun+0x184>  // b.none
 510:	ldr	x3, [sp, #32]
 514:	mov	x2, #0x11                  	// #17
 518:	mov	x1, #0x1                   	// #1
 51c:	adrp	x0, 0 <srunner_set_log>
 520:	add	x0, x0, #0x0
 524:	bl	0 <fwrite>
 528:	b	5c0 <stdout_lfun+0x184>
 52c:	ldr	x0, [sp, #16]
 530:	str	x0, [sp, #56]
 534:	ldr	w0, [sp, #28]
 538:	cmp	w0, #0x0
 53c:	b.eq	5c8 <stdout_lfun+0x18c>  // b.none
 540:	ldr	x0, [sp, #56]
 544:	ldr	x0, [x0]
 548:	mov	x2, x0
 54c:	adrp	x0, 0 <srunner_set_log>
 550:	add	x1, x0, #0x0
 554:	ldr	x0, [sp, #32]
 558:	bl	0 <fprintf>
 55c:	b	5c8 <stdout_lfun+0x18c>
 560:	ldr	w0, [sp, #28]
 564:	cmp	w0, #0x0
 568:	b.eq	5d0 <stdout_lfun+0x194>  // b.none
 56c:	ldr	w2, [sp, #28]
 570:	ldr	x1, [sp, #40]
 574:	ldr	x0, [sp, #32]
 578:	bl	0 <srunner_fprint>
 57c:	b	5d0 <stdout_lfun+0x194>
 580:	mov	w2, #0xdc                  	// #220
 584:	adrp	x0, 0 <srunner_set_log>
 588:	add	x1, x0, #0x0
 58c:	adrp	x0, 0 <srunner_set_log>
 590:	add	x0, x0, #0x0
 594:	bl	0 <eprintf>
 598:	nop
 59c:	b	5d4 <stdout_lfun+0x198>
 5a0:	nop
 5a4:	b	5d4 <stdout_lfun+0x198>
 5a8:	nop
 5ac:	b	5d4 <stdout_lfun+0x198>
 5b0:	nop
 5b4:	b	5d4 <stdout_lfun+0x198>
 5b8:	nop
 5bc:	b	5d4 <stdout_lfun+0x198>
 5c0:	nop
 5c4:	b	5d4 <stdout_lfun+0x198>
 5c8:	nop
 5cc:	b	5d4 <stdout_lfun+0x198>
 5d0:	nop
 5d4:	nop
 5d8:	ldp	x29, x30, [sp], #64
 5dc:	ret

00000000000005e0 <lfile_lfun>:
 5e0:	stp	x29, x30, [sp, #-64]!
 5e4:	mov	x29, sp
 5e8:	str	x0, [sp, #40]
 5ec:	str	x1, [sp, #32]
 5f0:	str	w2, [sp, #28]
 5f4:	str	x3, [sp, #16]
 5f8:	str	w4, [sp, #24]
 5fc:	ldr	w0, [sp, #24]
 600:	cmp	w0, #0x7
 604:	b.eq	6fc <lfile_lfun+0x11c>  // b.none
 608:	ldr	w0, [sp, #24]
 60c:	cmp	w0, #0x7
 610:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 614:	ldr	w0, [sp, #24]
 618:	cmp	w0, #0x6
 61c:	b.eq	730 <lfile_lfun+0x150>  // b.none
 620:	ldr	w0, [sp, #24]
 624:	cmp	w0, #0x6
 628:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 62c:	ldr	w0, [sp, #24]
 630:	cmp	w0, #0x5
 634:	b.eq	738 <lfile_lfun+0x158>  // b.none
 638:	ldr	w0, [sp, #24]
 63c:	cmp	w0, #0x5
 640:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 644:	ldr	w0, [sp, #24]
 648:	cmp	w0, #0x4
 64c:	b.eq	6d0 <lfile_lfun+0xf0>  // b.none
 650:	ldr	w0, [sp, #24]
 654:	cmp	w0, #0x4
 658:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 65c:	ldr	w0, [sp, #24]
 660:	cmp	w0, #0x3
 664:	b.eq	6a8 <lfile_lfun+0xc8>  // b.none
 668:	ldr	w0, [sp, #24]
 66c:	cmp	w0, #0x3
 670:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 674:	ldr	w0, [sp, #24]
 678:	cmp	w0, #0x2
 67c:	b.eq	740 <lfile_lfun+0x160>  // b.none
 680:	ldr	w0, [sp, #24]
 684:	cmp	w0, #0x2
 688:	b.hi	718 <lfile_lfun+0x138>  // b.pmore
 68c:	ldr	w0, [sp, #24]
 690:	cmp	w0, #0x0
 694:	b.eq	748 <lfile_lfun+0x168>  // b.none
 698:	ldr	w0, [sp, #24]
 69c:	cmp	w0, #0x1
 6a0:	b.eq	750 <lfile_lfun+0x170>  // b.none
 6a4:	b	718 <lfile_lfun+0x138>
 6a8:	ldr	x0, [sp, #16]
 6ac:	str	x0, [sp, #48]
 6b0:	ldr	x0, [sp, #48]
 6b4:	ldr	x0, [x0]
 6b8:	mov	x2, x0
 6bc:	adrp	x0, 0 <srunner_set_log>
 6c0:	add	x1, x0, #0x0
 6c4:	ldr	x0, [sp, #32]
 6c8:	bl	0 <fprintf>
 6cc:	b	754 <lfile_lfun+0x174>
 6d0:	ldr	x3, [sp, #32]
 6d4:	mov	x2, #0x1c                  	// #28
 6d8:	mov	x1, #0x1                   	// #1
 6dc:	adrp	x0, 0 <srunner_set_log>
 6e0:	add	x0, x0, #0x0
 6e4:	bl	0 <fwrite>
 6e8:	mov	w2, #0x1                   	// #1
 6ec:	ldr	x1, [sp, #40]
 6f0:	ldr	x0, [sp, #32]
 6f4:	bl	0 <srunner_fprint>
 6f8:	b	754 <lfile_lfun+0x174>
 6fc:	ldr	x0, [sp, #16]
 700:	str	x0, [sp, #56]
 704:	mov	w2, #0x3                   	// #3
 708:	ldr	x1, [sp, #56]
 70c:	ldr	x0, [sp, #32]
 710:	bl	0 <tr_fprint>
 714:	b	754 <lfile_lfun+0x174>
 718:	mov	w2, #0x103                 	// #259
 71c:	adrp	x0, 0 <srunner_set_log>
 720:	add	x1, x0, #0x0
 724:	adrp	x0, 0 <srunner_set_log>
 728:	add	x0, x0, #0x0
 72c:	bl	0 <eprintf>
 730:	nop
 734:	b	754 <lfile_lfun+0x174>
 738:	nop
 73c:	b	754 <lfile_lfun+0x174>
 740:	nop
 744:	b	754 <lfile_lfun+0x174>
 748:	nop
 74c:	b	754 <lfile_lfun+0x174>
 750:	nop
 754:	nop
 758:	ldp	x29, x30, [sp], #64
 75c:	ret

0000000000000760 <xml_lfun>:
 760:	stp	x29, x30, [sp, #-160]!
 764:	mov	x29, sp
 768:	str	x0, [sp, #40]
 76c:	str	x1, [sp, #32]
 770:	str	w2, [sp, #28]
 774:	str	x3, [sp, #16]
 778:	str	w4, [sp, #24]
 77c:	adrp	x0, 0 <srunner_set_log>
 780:	add	x0, x0, #0x0
 784:	ldrb	w0, [x0]
 788:	cmp	w0, #0x0
 78c:	b.ne	7e8 <xml_lfun+0x88>  // b.any
 790:	add	x0, sp, #0x78
 794:	mov	x1, #0x0                   	// #0
 798:	bl	0 <gettimeofday>
 79c:	bl	0 <check_get_clockid>
 7a0:	mov	w2, w0
 7a4:	adrp	x0, 0 <srunner_set_log>
 7a8:	add	x1, x0, #0x0
 7ac:	mov	w0, w2
 7b0:	bl	0 <clock_gettime>
 7b4:	add	x1, sp, #0x30
 7b8:	add	x0, sp, #0x78
 7bc:	bl	0 <localtime_r>
 7c0:	cmp	x0, #0x0
 7c4:	b.eq	7e8 <xml_lfun+0x88>  // b.none
 7c8:	add	x0, sp, #0x30
 7cc:	mov	x3, x0
 7d0:	adrp	x0, 0 <srunner_set_log>
 7d4:	add	x2, x0, #0x0
 7d8:	mov	x1, #0x14                  	// #20
 7dc:	adrp	x0, 0 <srunner_set_log>
 7e0:	add	x0, x0, #0x0
 7e4:	bl	0 <strftime>
 7e8:	ldr	w0, [sp, #24]
 7ec:	cmp	w0, #0x7
 7f0:	b.eq	a1c <xml_lfun+0x2bc>  // b.none
 7f4:	ldr	w0, [sp, #24]
 7f8:	cmp	w0, #0x7
 7fc:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 800:	ldr	w0, [sp, #24]
 804:	cmp	w0, #0x6
 808:	b.eq	a50 <xml_lfun+0x2f0>  // b.none
 80c:	ldr	w0, [sp, #24]
 810:	cmp	w0, #0x6
 814:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 818:	ldr	w0, [sp, #24]
 81c:	cmp	w0, #0x5
 820:	b.eq	a00 <xml_lfun+0x2a0>  // b.none
 824:	ldr	w0, [sp, #24]
 828:	cmp	w0, #0x5
 82c:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 830:	ldr	w0, [sp, #24]
 834:	cmp	w0, #0x4
 838:	b.eq	a58 <xml_lfun+0x2f8>  // b.none
 83c:	ldr	w0, [sp, #24]
 840:	cmp	w0, #0x4
 844:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 848:	ldr	w0, [sp, #24]
 84c:	cmp	w0, #0x3
 850:	b.eq	9b0 <xml_lfun+0x250>  // b.none
 854:	ldr	w0, [sp, #24]
 858:	cmp	w0, #0x3
 85c:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 860:	ldr	w0, [sp, #24]
 864:	cmp	w0, #0x2
 868:	b.eq	a60 <xml_lfun+0x300>  // b.none
 86c:	ldr	w0, [sp, #24]
 870:	cmp	w0, #0x2
 874:	b.hi	a38 <xml_lfun+0x2d8>  // b.pmore
 878:	ldr	w0, [sp, #24]
 87c:	cmp	w0, #0x0
 880:	b.eq	894 <xml_lfun+0x134>  // b.none
 884:	ldr	w0, [sp, #24]
 888:	cmp	w0, #0x1
 88c:	b.eq	8b0 <xml_lfun+0x150>  // b.none
 890:	b	a38 <xml_lfun+0x2d8>
 894:	adrp	x0, 0 <srunner_set_log>
 898:	add	x2, x0, #0x0
 89c:	adrp	x0, 0 <srunner_set_log>
 8a0:	add	x1, x0, #0x0
 8a4:	ldr	x0, [sp, #32]
 8a8:	bl	0 <fprintf>
 8ac:	b	a64 <xml_lfun+0x304>
 8b0:	str	xzr, [sp, #104]
 8b4:	str	xzr, [sp, #112]
 8b8:	bl	0 <check_get_clockid>
 8bc:	mov	w2, w0
 8c0:	add	x0, sp, #0x68
 8c4:	mov	x1, x0
 8c8:	mov	w0, w2
 8cc:	bl	0 <clock_gettime>
 8d0:	ldr	x1, [sp, #104]
 8d4:	adrp	x0, 0 <srunner_set_log>
 8d8:	add	x0, x0, #0x0
 8dc:	ldr	x0, [x0]
 8e0:	sub	x1, x1, x0
 8e4:	mov	x0, #0x4240                	// #16960
 8e8:	movk	x0, #0xf, lsl #16
 8ec:	mul	x1, x1, x0
 8f0:	ldr	x0, [sp, #112]
 8f4:	mov	x2, #0xf7cf                	// #63439
 8f8:	movk	x2, #0xe353, lsl #16
 8fc:	movk	x2, #0x9ba5, lsl #32
 900:	movk	x2, #0x20c4, lsl #48
 904:	smulh	x2, x0, x2
 908:	asr	x2, x2, #7
 90c:	asr	x0, x0, #63
 910:	sub	x0, x2, x0
 914:	add	x1, x1, x0
 918:	adrp	x0, 0 <srunner_set_log>
 91c:	add	x0, x0, #0x0
 920:	ldr	x0, [x0, #8]
 924:	mov	x2, #0xf7cf                	// #63439
 928:	movk	x2, #0xe353, lsl #16
 92c:	movk	x2, #0x9ba5, lsl #32
 930:	movk	x2, #0x20c4, lsl #48
 934:	smulh	x2, x0, x2
 938:	asr	x2, x2, #7
 93c:	asr	x0, x0, #63
 940:	sub	x0, x0, x2
 944:	add	x0, x1, x0
 948:	str	x0, [sp, #136]
 94c:	ldr	x1, [sp, #136]
 950:	mov	x0, #0x34db                	// #13531
 954:	movk	x0, #0xd7b6, lsl #16
 958:	movk	x0, #0xde82, lsl #32
 95c:	movk	x0, #0x431b, lsl #48
 960:	umulh	x0, x1, x0
 964:	lsr	x4, x0, #18
 968:	ldr	x1, [sp, #136]
 96c:	mov	x0, #0x34db                	// #13531
 970:	movk	x0, #0xd7b6, lsl #16
 974:	movk	x0, #0xde82, lsl #32
 978:	movk	x0, #0x431b, lsl #48
 97c:	umulh	x0, x1, x0
 980:	lsr	x0, x0, #18
 984:	mov	x2, #0x4240                	// #16960
 988:	movk	x2, #0xf, lsl #16
 98c:	mul	x0, x0, x2
 990:	sub	x0, x1, x0
 994:	mov	x3, x0
 998:	mov	x2, x4
 99c:	adrp	x0, 0 <srunner_set_log>
 9a0:	add	x1, x0, #0x0
 9a4:	ldr	x0, [sp, #32]
 9a8:	bl	0 <fprintf>
 9ac:	b	a64 <xml_lfun+0x304>
 9b0:	ldr	x0, [sp, #16]
 9b4:	str	x0, [sp, #144]
 9b8:	ldr	x3, [sp, #32]
 9bc:	mov	x2, #0x15                  	// #21
 9c0:	mov	x1, #0x1                   	// #1
 9c4:	adrp	x0, 0 <srunner_set_log>
 9c8:	add	x0, x0, #0x0
 9cc:	bl	0 <fwrite>
 9d0:	ldr	x0, [sp, #144]
 9d4:	ldr	x0, [x0]
 9d8:	mov	x1, x0
 9dc:	ldr	x0, [sp, #32]
 9e0:	bl	0 <fprint_xml_esc>
 9e4:	ldr	x3, [sp, #32]
 9e8:	mov	x2, #0x9                   	// #9
 9ec:	mov	x1, #0x1                   	// #1
 9f0:	adrp	x0, 0 <srunner_set_log>
 9f4:	add	x0, x0, #0x0
 9f8:	bl	0 <fwrite>
 9fc:	b	a64 <xml_lfun+0x304>
 a00:	ldr	x3, [sp, #32]
 a04:	mov	x2, #0xb                   	// #11
 a08:	mov	x1, #0x1                   	// #1
 a0c:	adrp	x0, 0 <srunner_set_log>
 a10:	add	x0, x0, #0x0
 a14:	bl	0 <fwrite>
 a18:	b	a64 <xml_lfun+0x304>
 a1c:	ldr	x0, [sp, #16]
 a20:	str	x0, [sp, #152]
 a24:	mov	w2, #0x3                   	// #3
 a28:	ldr	x1, [sp, #152]
 a2c:	ldr	x0, [sp, #32]
 a30:	bl	0 <tr_xmlprint>
 a34:	b	a64 <xml_lfun+0x304>
 a38:	mov	w2, #0x14f                 	// #335
 a3c:	adrp	x0, 0 <srunner_set_log>
 a40:	add	x1, x0, #0x0
 a44:	adrp	x0, 0 <srunner_set_log>
 a48:	add	x0, x0, #0x0
 a4c:	bl	0 <eprintf>
 a50:	nop
 a54:	b	a64 <xml_lfun+0x304>
 a58:	nop
 a5c:	b	a64 <xml_lfun+0x304>
 a60:	nop
 a64:	nop
 a68:	ldp	x29, x30, [sp], #160
 a6c:	ret

0000000000000a70 <tap_lfun>:
 a70:	stp	x29, x30, [sp, #-64]!
 a74:	mov	x29, sp
 a78:	str	x0, [sp, #40]
 a7c:	str	x1, [sp, #32]
 a80:	str	w2, [sp, #28]
 a84:	str	x3, [sp, #16]
 a88:	str	w4, [sp, #24]
 a8c:	ldr	w0, [sp, #24]
 a90:	cmp	w0, #0x7
 a94:	b.eq	b74 <tap_lfun+0x104>  // b.none
 a98:	ldr	w0, [sp, #24]
 a9c:	cmp	w0, #0x7
 aa0:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 aa4:	ldr	w0, [sp, #24]
 aa8:	cmp	w0, #0x6
 aac:	b.eq	c34 <tap_lfun+0x1c4>  // b.none
 ab0:	ldr	w0, [sp, #24]
 ab4:	cmp	w0, #0x6
 ab8:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 abc:	ldr	w0, [sp, #24]
 ac0:	cmp	w0, #0x5
 ac4:	b.eq	c3c <tap_lfun+0x1cc>  // b.none
 ac8:	ldr	w0, [sp, #24]
 acc:	cmp	w0, #0x5
 ad0:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 ad4:	ldr	w0, [sp, #24]
 ad8:	cmp	w0, #0x4
 adc:	b.eq	c44 <tap_lfun+0x1d4>  // b.none
 ae0:	ldr	w0, [sp, #24]
 ae4:	cmp	w0, #0x4
 ae8:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 aec:	ldr	w0, [sp, #24]
 af0:	cmp	w0, #0x3
 af4:	b.eq	c4c <tap_lfun+0x1dc>  // b.none
 af8:	ldr	w0, [sp, #24]
 afc:	cmp	w0, #0x3
 b00:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 b04:	ldr	w0, [sp, #24]
 b08:	cmp	w0, #0x2
 b0c:	b.eq	c54 <tap_lfun+0x1e4>  // b.none
 b10:	ldr	w0, [sp, #24]
 b14:	cmp	w0, #0x2
 b18:	b.hi	c1c <tap_lfun+0x1ac>  // b.pmore
 b1c:	ldr	w0, [sp, #24]
 b20:	cmp	w0, #0x0
 b24:	b.eq	b38 <tap_lfun+0xc8>  // b.none
 b28:	ldr	w0, [sp, #24]
 b2c:	cmp	w0, #0x1
 b30:	b.eq	b48 <tap_lfun+0xd8>  // b.none
 b34:	b	c1c <tap_lfun+0x1ac>
 b38:	adrp	x0, 0 <srunner_set_log>
 b3c:	add	x0, x0, #0x0
 b40:	str	wzr, [x0]
 b44:	b	c58 <tap_lfun+0x1e8>
 b48:	adrp	x0, 0 <srunner_set_log>
 b4c:	add	x0, x0, #0x0
 b50:	ldr	w0, [x0]
 b54:	mov	w2, w0
 b58:	adrp	x0, 0 <srunner_set_log>
 b5c:	add	x1, x0, #0x0
 b60:	ldr	x0, [sp, #32]
 b64:	bl	0 <fprintf>
 b68:	ldr	x0, [sp, #32]
 b6c:	bl	0 <fflush>
 b70:	b	c58 <tap_lfun+0x1e8>
 b74:	adrp	x0, 0 <srunner_set_log>
 b78:	add	x0, x0, #0x0
 b7c:	ldr	w0, [x0]
 b80:	add	w1, w0, #0x1
 b84:	adrp	x0, 0 <srunner_set_log>
 b88:	add	x0, x0, #0x0
 b8c:	str	w1, [x0]
 b90:	ldr	x0, [sp, #16]
 b94:	str	x0, [sp, #56]
 b98:	ldr	x0, [sp, #56]
 b9c:	ldr	w0, [x0]
 ba0:	cmp	w0, #0x1
 ba4:	b.ne	bb4 <tap_lfun+0x144>  // b.any
 ba8:	adrp	x0, 0 <srunner_set_log>
 bac:	add	x0, x0, #0x0
 bb0:	b	bbc <tap_lfun+0x14c>
 bb4:	adrp	x0, 0 <srunner_set_log>
 bb8:	add	x0, x0, #0x0
 bbc:	adrp	x1, 0 <srunner_set_log>
 bc0:	add	x1, x1, #0x0
 bc4:	ldr	w2, [x1]
 bc8:	ldr	x1, [sp, #56]
 bcc:	ldr	x3, [x1, #8]
 bd0:	ldr	x1, [sp, #56]
 bd4:	ldr	x4, [x1, #32]
 bd8:	ldr	x1, [sp, #56]
 bdc:	ldr	x5, [x1, #40]
 be0:	ldr	x1, [sp, #56]
 be4:	ldr	x1, [x1, #48]
 be8:	mov	x7, x1
 bec:	mov	x6, x5
 bf0:	mov	x5, x4
 bf4:	mov	x4, x3
 bf8:	mov	w3, w2
 bfc:	mov	x2, x0
 c00:	adrp	x0, 0 <srunner_set_log>
 c04:	add	x1, x0, #0x0
 c08:	ldr	x0, [sp, #32]
 c0c:	bl	0 <fprintf>
 c10:	ldr	x0, [sp, #32]
 c14:	bl	0 <fflush>
 c18:	b	c58 <tap_lfun+0x1e8>
 c1c:	mov	w2, #0x17c                 	// #380
 c20:	adrp	x0, 0 <srunner_set_log>
 c24:	add	x1, x0, #0x0
 c28:	adrp	x0, 0 <srunner_set_log>
 c2c:	add	x0, x0, #0x0
 c30:	bl	0 <eprintf>
 c34:	nop
 c38:	b	c58 <tap_lfun+0x1e8>
 c3c:	nop
 c40:	b	c58 <tap_lfun+0x1e8>
 c44:	nop
 c48:	b	c58 <tap_lfun+0x1e8>
 c4c:	nop
 c50:	b	c58 <tap_lfun+0x1e8>
 c54:	nop
 c58:	nop
 c5c:	ldp	x29, x30, [sp], #64
 c60:	ret

0000000000000c64 <srunner_open_file>:
 c64:	stp	x29, x30, [sp, #-48]!
 c68:	mov	x29, sp
 c6c:	str	x0, [sp, #24]
 c70:	str	xzr, [sp, #40]
 c74:	adrp	x0, 0 <srunner_set_log>
 c78:	add	x1, x0, #0x0
 c7c:	ldr	x0, [sp, #24]
 c80:	bl	0 <strcmp>
 c84:	cmp	w0, #0x0
 c88:	b.ne	ca0 <srunner_open_file+0x3c>  // b.any
 c8c:	adrp	x0, 0 <stdout>
 c90:	add	x0, x0, #0x0
 c94:	ldr	x0, [x0]
 c98:	str	x0, [sp, #40]
 c9c:	b	cdc <srunner_open_file+0x78>
 ca0:	adrp	x0, 0 <srunner_set_log>
 ca4:	add	x1, x0, #0x0
 ca8:	ldr	x0, [sp, #24]
 cac:	bl	0 <fopen>
 cb0:	str	x0, [sp, #40]
 cb4:	ldr	x0, [sp, #40]
 cb8:	cmp	x0, #0x0
 cbc:	b.ne	cdc <srunner_open_file+0x78>  // b.any
 cc0:	ldr	x3, [sp, #24]
 cc4:	mov	w2, #0x1cd                 	// #461
 cc8:	adrp	x0, 0 <srunner_set_log>
 ccc:	add	x1, x0, #0x0
 cd0:	adrp	x0, 0 <srunner_set_log>
 cd4:	add	x0, x0, #0x0
 cd8:	bl	0 <eprintf>
 cdc:	ldr	x0, [sp, #40]
 ce0:	ldp	x29, x30, [sp], #48
 ce4:	ret

0000000000000ce8 <srunner_open_lfile>:
 ce8:	stp	x29, x30, [sp, #-48]!
 cec:	mov	x29, sp
 cf0:	str	x0, [sp, #24]
 cf4:	str	xzr, [sp, #40]
 cf8:	ldr	x0, [sp, #24]
 cfc:	bl	38 <srunner_has_log>
 d00:	cmp	w0, #0x0
 d04:	b.eq	d18 <srunner_open_lfile+0x30>  // b.none
 d08:	ldr	x0, [sp, #24]
 d0c:	bl	60 <srunner_log_fname>
 d10:	bl	c64 <srunner_open_file>
 d14:	str	x0, [sp, #40]
 d18:	ldr	x0, [sp, #40]
 d1c:	ldp	x29, x30, [sp], #48
 d20:	ret

0000000000000d24 <srunner_open_xmlfile>:
 d24:	stp	x29, x30, [sp, #-48]!
 d28:	mov	x29, sp
 d2c:	str	x0, [sp, #24]
 d30:	str	xzr, [sp, #40]
 d34:	ldr	x0, [sp, #24]
 d38:	bl	d4 <srunner_has_xml>
 d3c:	cmp	w0, #0x0
 d40:	b.eq	d54 <srunner_open_xmlfile+0x30>  // b.none
 d44:	ldr	x0, [sp, #24]
 d48:	bl	fc <srunner_xml_fname>
 d4c:	bl	c64 <srunner_open_file>
 d50:	str	x0, [sp, #40]
 d54:	ldr	x0, [sp, #40]
 d58:	ldp	x29, x30, [sp], #48
 d5c:	ret

0000000000000d60 <srunner_open_tapfile>:
 d60:	stp	x29, x30, [sp, #-48]!
 d64:	mov	x29, sp
 d68:	str	x0, [sp, #24]
 d6c:	str	xzr, [sp, #40]
 d70:	ldr	x0, [sp, #24]
 d74:	bl	170 <srunner_has_tap>
 d78:	cmp	w0, #0x0
 d7c:	b.eq	d90 <srunner_open_tapfile+0x30>  // b.none
 d80:	ldr	x0, [sp, #24]
 d84:	bl	198 <srunner_tap_fname>
 d88:	bl	c64 <srunner_open_file>
 d8c:	str	x0, [sp, #40]
 d90:	ldr	x0, [sp, #40]
 d94:	ldp	x29, x30, [sp], #48
 d98:	ret

0000000000000d9c <srunner_init_logging>:
 d9c:	stp	x29, x30, [sp, #-48]!
 da0:	mov	x29, sp
 da4:	str	x0, [sp, #24]
 da8:	str	w1, [sp, #20]
 dac:	bl	0 <check_list_create>
 db0:	mov	x1, x0
 db4:	ldr	x0, [sp, #24]
 db8:	str	x1, [x0, #48]
 dbc:	adrp	x0, 0 <stdout>
 dc0:	add	x0, x0, #0x0
 dc4:	ldr	x1, [x0]
 dc8:	ldr	w4, [sp, #20]
 dcc:	adrp	x0, 43c <stdout_lfun>
 dd0:	add	x3, x0, #0x0
 dd4:	mov	w2, #0x0                   	// #0
 dd8:	ldr	x0, [sp, #24]
 ddc:	bl	1d4 <srunner_register_lfun>
 de0:	ldr	x0, [sp, #24]
 de4:	bl	ce8 <srunner_open_lfile>
 de8:	str	x0, [sp, #40]
 dec:	ldr	x0, [sp, #40]
 df0:	cmp	x0, #0x0
 df4:	b.eq	e34 <srunner_init_logging+0x98>  // b.none
 df8:	adrp	x0, 0 <stdout>
 dfc:	add	x0, x0, #0x0
 e00:	ldr	x0, [x0]
 e04:	ldr	x1, [sp, #40]
 e08:	cmp	x1, x0
 e0c:	cset	w0, ne  // ne = any
 e10:	and	w0, w0, #0xff
 e14:	mov	w1, w0
 e18:	ldr	w4, [sp, #20]
 e1c:	adrp	x0, 5e0 <lfile_lfun>
 e20:	add	x3, x0, #0x0
 e24:	mov	w2, w1
 e28:	ldr	x1, [sp, #40]
 e2c:	ldr	x0, [sp, #24]
 e30:	bl	1d4 <srunner_register_lfun>
 e34:	ldr	x0, [sp, #24]
 e38:	bl	d24 <srunner_open_xmlfile>
 e3c:	str	x0, [sp, #40]
 e40:	ldr	x0, [sp, #40]
 e44:	cmp	x0, #0x0
 e48:	b.eq	e88 <srunner_init_logging+0xec>  // b.none
 e4c:	adrp	x0, 0 <stdout>
 e50:	add	x0, x0, #0x0
 e54:	ldr	x0, [x0]
 e58:	ldr	x1, [sp, #40]
 e5c:	cmp	x1, x0
 e60:	cset	w0, ne  // ne = any
 e64:	and	w0, w0, #0xff
 e68:	mov	w1, w0
 e6c:	ldr	w4, [sp, #20]
 e70:	adrp	x0, 760 <xml_lfun>
 e74:	add	x3, x0, #0x0
 e78:	mov	w2, w1
 e7c:	ldr	x1, [sp, #40]
 e80:	ldr	x0, [sp, #24]
 e84:	bl	1d4 <srunner_register_lfun>
 e88:	ldr	x0, [sp, #24]
 e8c:	bl	d60 <srunner_open_tapfile>
 e90:	str	x0, [sp, #40]
 e94:	ldr	x0, [sp, #40]
 e98:	cmp	x0, #0x0
 e9c:	b.eq	edc <srunner_init_logging+0x140>  // b.none
 ea0:	adrp	x0, 0 <stdout>
 ea4:	add	x0, x0, #0x0
 ea8:	ldr	x0, [x0]
 eac:	ldr	x1, [sp, #40]
 eb0:	cmp	x1, x0
 eb4:	cset	w0, ne  // ne = any
 eb8:	and	w0, w0, #0xff
 ebc:	mov	w1, w0
 ec0:	ldr	w4, [sp, #20]
 ec4:	adrp	x0, a70 <tap_lfun>
 ec8:	add	x3, x0, #0x0
 ecc:	mov	w2, w1
 ed0:	ldr	x1, [sp, #40]
 ed4:	ldr	x0, [sp, #24]
 ed8:	bl	1d4 <srunner_register_lfun>
 edc:	mov	w2, #0x0                   	// #0
 ee0:	mov	x1, #0x0                   	// #0
 ee4:	ldr	x0, [sp, #24]
 ee8:	bl	398 <srunner_send_evt>
 eec:	nop
 ef0:	ldp	x29, x30, [sp], #48
 ef4:	ret

0000000000000ef8 <srunner_end_logging>:
 ef8:	stp	x29, x30, [sp, #-64]!
 efc:	mov	x29, sp
 f00:	str	x0, [sp, #24]
 f04:	mov	w2, #0x1                   	// #1
 f08:	mov	x1, #0x0                   	// #0
 f0c:	ldr	x0, [sp, #24]
 f10:	bl	398 <srunner_send_evt>
 f14:	ldr	x0, [sp, #24]
 f18:	ldr	x0, [x0, #48]
 f1c:	str	x0, [sp, #56]
 f20:	ldr	x0, [sp, #56]
 f24:	bl	0 <check_list_front>
 f28:	b	f8c <srunner_end_logging+0x94>
 f2c:	ldr	x0, [sp, #56]
 f30:	bl	0 <check_list_val>
 f34:	str	x0, [sp, #48]
 f38:	ldr	x0, [sp, #48]
 f3c:	ldr	w0, [x0, #16]
 f40:	cmp	w0, #0x0
 f44:	b.eq	f7c <srunner_end_logging+0x84>  // b.none
 f48:	ldr	x0, [sp, #48]
 f4c:	ldr	x0, [x0]
 f50:	bl	0 <fclose>
 f54:	str	w0, [sp, #44]
 f58:	ldr	w0, [sp, #44]
 f5c:	cmp	w0, #0x0
 f60:	b.eq	f7c <srunner_end_logging+0x84>  // b.none
 f64:	mov	w2, #0x224                 	// #548
 f68:	adrp	x0, 0 <srunner_set_log>
 f6c:	add	x1, x0, #0x0
 f70:	adrp	x0, 0 <srunner_set_log>
 f74:	add	x0, x0, #0x0
 f78:	bl	0 <eprintf>
 f7c:	ldr	x0, [sp, #48]
 f80:	bl	0 <free>
 f84:	ldr	x0, [sp, #56]
 f88:	bl	0 <check_list_advance>
 f8c:	ldr	x0, [sp, #56]
 f90:	bl	0 <check_list_at_end>
 f94:	cmp	w0, #0x0
 f98:	b.eq	f2c <srunner_end_logging+0x34>  // b.none
 f9c:	ldr	x0, [sp, #56]
 fa0:	bl	0 <check_list_free>
 fa4:	ldr	x0, [sp, #24]
 fa8:	str	xzr, [x0, #48]
 fac:	nop
 fb0:	ldp	x29, x30, [sp], #64
 fb4:	ret

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_pipe>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <get_pipe>
   c:	add	x0, x0, #0x0
  10:	ldr	x0, [x0]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <get_pipe+0x2c>  // b.none
  1c:	adrp	x0, 0 <get_pipe>
  20:	add	x0, x0, #0x0
  24:	ldr	x0, [x0]
  28:	b	68 <get_pipe+0x68>
  2c:	adrp	x0, 0 <get_pipe>
  30:	add	x0, x0, #0x0
  34:	ldr	x0, [x0]
  38:	cmp	x0, #0x0
  3c:	b.eq	50 <get_pipe+0x50>  // b.none
  40:	adrp	x0, 0 <get_pipe>
  44:	add	x0, x0, #0x0
  48:	ldr	x0, [x0]
  4c:	b	68 <get_pipe+0x68>
  50:	mov	w2, #0x50                  	// #80
  54:	adrp	x0, 0 <get_pipe>
  58:	add	x1, x0, #0x0
  5c:	adrp	x0, 0 <get_pipe>
  60:	add	x0, x0, #0x0
  64:	bl	0 <eprintf>
  68:	ldp	x29, x30, [sp], #16
  6c:	ret

0000000000000070 <send_failure_info>:
  70:	stp	x29, x30, [sp, #-48]!
  74:	mov	x29, sp
  78:	str	x0, [sp, #24]
  7c:	ldr	x0, [sp, #24]
  80:	bl	0 <strdup>
  84:	str	x0, [sp, #40]
  88:	bl	0 <get_pipe>
  8c:	mov	x3, x0
  90:	add	x0, sp, #0x28
  94:	mov	x2, x0
  98:	mov	w1, #0x1                   	// #1
  9c:	mov	x0, x3
  a0:	bl	0 <ppack>
  a4:	ldr	x0, [sp, #40]
  a8:	bl	0 <free>
  ac:	nop
  b0:	ldp	x29, x30, [sp], #48
  b4:	ret

00000000000000b8 <send_duration_info>:
  b8:	stp	x29, x30, [sp, #-48]!
  bc:	mov	x29, sp
  c0:	str	w0, [sp, #28]
  c4:	ldr	w0, [sp, #28]
  c8:	str	w0, [sp, #40]
  cc:	bl	0 <get_pipe>
  d0:	mov	x3, x0
  d4:	add	x0, sp, #0x28
  d8:	mov	x2, x0
  dc:	mov	w1, #0x3                   	// #3
  e0:	mov	x0, x3
  e4:	bl	0 <ppack>
  e8:	nop
  ec:	ldp	x29, x30, [sp], #48
  f0:	ret

00000000000000f4 <send_loc_info>:
  f4:	stp	x29, x30, [sp, #-48]!
  f8:	mov	x29, sp
  fc:	str	x0, [sp, #24]
 100:	str	w1, [sp, #20]
 104:	ldr	x0, [sp, #24]
 108:	bl	0 <strdup>
 10c:	str	x0, [sp, #40]
 110:	ldr	w0, [sp, #20]
 114:	str	w0, [sp, #32]
 118:	bl	0 <get_pipe>
 11c:	mov	x3, x0
 120:	add	x0, sp, #0x20
 124:	mov	x2, x0
 128:	mov	w1, #0x2                   	// #2
 12c:	mov	x0, x3
 130:	bl	0 <ppack>
 134:	ldr	x0, [sp, #40]
 138:	bl	0 <free>
 13c:	nop
 140:	ldp	x29, x30, [sp], #48
 144:	ret

0000000000000148 <send_ctx_info>:
 148:	stp	x29, x30, [sp, #-48]!
 14c:	mov	x29, sp
 150:	str	w0, [sp, #28]
 154:	ldr	w0, [sp, #28]
 158:	str	w0, [sp, #40]
 15c:	bl	0 <get_pipe>
 160:	mov	x3, x0
 164:	add	x0, sp, #0x28
 168:	mov	x2, x0
 16c:	mov	w1, #0x0                   	// #0
 170:	mov	x0, x3
 174:	bl	0 <ppack>
 178:	nop
 17c:	ldp	x29, x30, [sp], #48
 180:	ret

0000000000000184 <receive_test_result>:
 184:	stp	x29, x30, [sp, #-64]!
 188:	mov	x29, sp
 18c:	str	w0, [sp, #28]
 190:	bl	0 <get_pipe>
 194:	str	x0, [sp, #56]
 198:	ldr	x0, [sp, #56]
 19c:	cmp	x0, #0x0
 1a0:	b.ne	1bc <receive_test_result+0x38>  // b.any
 1a4:	mov	w2, #0x7f                  	// #127
 1a8:	adrp	x0, 0 <get_pipe>
 1ac:	add	x1, x0, #0x0
 1b0:	adrp	x0, 0 <get_pipe>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <eprintf>
 1bc:	ldr	x0, [sp, #56]
 1c0:	bl	0 <rewind>
 1c4:	ldr	x0, [sp, #56]
 1c8:	bl	0 <punpack>
 1cc:	str	x0, [sp, #48]
 1d0:	ldr	x0, [sp, #48]
 1d4:	cmp	x0, #0x0
 1d8:	b.ne	1f4 <receive_test_result+0x70>  // b.any
 1dc:	mov	w2, #0x85                  	// #133
 1e0:	adrp	x0, 0 <get_pipe>
 1e4:	add	x1, x0, #0x0
 1e8:	adrp	x0, 0 <get_pipe>
 1ec:	add	x0, x0, #0x0
 1f0:	bl	0 <eprintf>
 1f4:	bl	600 <teardown_pipe>
 1f8:	bl	514 <setup_pipe>
 1fc:	ldr	w1, [sp, #28]
 200:	ldr	x0, [sp, #48]
 204:	bl	2b4 <construct_test_result>
 208:	str	x0, [sp, #40]
 20c:	ldr	x0, [sp, #48]
 210:	bl	0 <rcvmsg_free>
 214:	ldr	x0, [sp, #40]
 218:	ldp	x29, x30, [sp], #64
 21c:	ret

0000000000000220 <tr_set_loc_by_ctx>:
 220:	sub	sp, sp, #0x20
 224:	str	x0, [sp, #24]
 228:	str	w1, [sp, #20]
 22c:	str	x2, [sp, #8]
 230:	ldr	w0, [sp, #20]
 234:	cmp	w0, #0x2
 238:	b.ne	274 <tr_set_loc_by_ctx+0x54>  // b.any
 23c:	ldr	x0, [sp, #8]
 240:	ldr	x1, [x0, #24]
 244:	ldr	x0, [sp, #24]
 248:	str	x1, [x0, #8]
 24c:	ldr	x0, [sp, #8]
 250:	ldr	w1, [x0, #32]
 254:	ldr	x0, [sp, #24]
 258:	str	w1, [x0, #16]
 25c:	ldr	x0, [sp, #8]
 260:	str	xzr, [x0, #24]
 264:	ldr	x0, [sp, #8]
 268:	mov	w1, #0xffffffff            	// #-1
 26c:	str	w1, [x0, #32]
 270:	b	2a8 <tr_set_loc_by_ctx+0x88>
 274:	ldr	x0, [sp, #8]
 278:	ldr	x1, [x0, #8]
 27c:	ldr	x0, [sp, #24]
 280:	str	x1, [x0, #8]
 284:	ldr	x0, [sp, #8]
 288:	ldr	w1, [x0, #16]
 28c:	ldr	x0, [sp, #24]
 290:	str	w1, [x0, #16]
 294:	ldr	x0, [sp, #8]
 298:	str	xzr, [x0, #8]
 29c:	ldr	x0, [sp, #8]
 2a0:	mov	w1, #0xffffffff            	// #-1
 2a4:	str	w1, [x0, #16]
 2a8:	nop
 2ac:	add	sp, sp, #0x20
 2b0:	ret

00000000000002b4 <construct_test_result>:
 2b4:	stp	x29, x30, [sp, #-48]!
 2b8:	mov	x29, sp
 2bc:	str	x0, [sp, #24]
 2c0:	str	w1, [sp, #20]
 2c4:	ldr	x0, [sp, #24]
 2c8:	cmp	x0, #0x0
 2cc:	b.ne	2d8 <construct_test_result+0x24>  // b.any
 2d0:	mov	x0, #0x0                   	// #0
 2d4:	b	3d4 <construct_test_result+0x120>
 2d8:	bl	0 <tr_create>
 2dc:	str	x0, [sp, #40]
 2e0:	ldr	x0, [sp, #24]
 2e4:	ldr	x0, [x0, #40]
 2e8:	cmp	x0, #0x0
 2ec:	b.ne	2fc <construct_test_result+0x48>  // b.any
 2f0:	ldr	w0, [sp, #20]
 2f4:	cmp	w0, #0x0
 2f8:	b.eq	364 <construct_test_result+0xb0>  // b.none
 2fc:	ldr	x0, [sp, #24]
 300:	ldr	w0, [x0, #4]
 304:	cmp	w0, #0x0
 308:	b.eq	320 <construct_test_result+0x6c>  // b.none
 30c:	ldr	x0, [sp, #24]
 310:	ldr	w1, [x0, #4]
 314:	ldr	x0, [sp, #40]
 318:	str	w1, [x0, #4]
 31c:	b	330 <construct_test_result+0x7c>
 320:	ldr	x0, [sp, #24]
 324:	ldr	w1, [x0]
 328:	ldr	x0, [sp, #40]
 32c:	str	w1, [x0, #4]
 330:	ldr	x0, [sp, #24]
 334:	ldr	x1, [x0, #40]
 338:	ldr	x0, [sp, #40]
 33c:	str	x1, [x0, #48]
 340:	ldr	x0, [sp, #24]
 344:	str	xzr, [x0, #40]
 348:	ldr	x0, [sp, #40]
 34c:	ldr	w0, [x0, #4]
 350:	ldr	x2, [sp, #24]
 354:	mov	w1, w0
 358:	ldr	x0, [sp, #40]
 35c:	bl	220 <tr_set_loc_by_ctx>
 360:	b	3d0 <construct_test_result+0x11c>
 364:	ldr	x0, [sp, #24]
 368:	ldr	w0, [x0]
 36c:	cmp	w0, #0x1
 370:	b.ne	39c <construct_test_result+0xe8>  // b.any
 374:	ldr	x0, [sp, #40]
 378:	mov	w1, #0x1                   	// #1
 37c:	str	w1, [x0, #4]
 380:	ldr	x0, [sp, #40]
 384:	str	xzr, [x0, #48]
 388:	ldr	x2, [sp, #24]
 38c:	mov	w1, #0x1                   	// #1
 390:	ldr	x0, [sp, #40]
 394:	bl	220 <tr_set_loc_by_ctx>
 398:	b	3d0 <construct_test_result+0x11c>
 39c:	ldr	x0, [sp, #40]
 3a0:	mov	w1, #0x2                   	// #2
 3a4:	str	w1, [x0, #4]
 3a8:	ldr	x0, [sp, #40]
 3ac:	str	xzr, [x0, #48]
 3b0:	ldr	x0, [sp, #24]
 3b4:	ldr	w1, [x0, #48]
 3b8:	ldr	x0, [sp, #40]
 3bc:	str	w1, [x0, #24]
 3c0:	ldr	x2, [sp, #24]
 3c4:	mov	w1, #0x2                   	// #2
 3c8:	ldr	x0, [sp, #40]
 3cc:	bl	220 <tr_set_loc_by_ctx>
 3d0:	ldr	x0, [sp, #40]
 3d4:	ldp	x29, x30, [sp], #48
 3d8:	ret

00000000000003dc <setup_messaging>:
 3dc:	stp	x29, x30, [sp, #-16]!
 3e0:	mov	x29, sp
 3e4:	bl	514 <setup_pipe>
 3e8:	nop
 3ec:	ldp	x29, x30, [sp], #16
 3f0:	ret

00000000000003f4 <teardown_messaging>:
 3f4:	stp	x29, x30, [sp, #-16]!
 3f8:	mov	x29, sp
 3fc:	bl	600 <teardown_pipe>
 400:	nop
 404:	ldp	x29, x30, [sp], #16
 408:	ret

000000000000040c <open_tmp_file>:
 40c:	stp	x29, x30, [sp, #-64]!
 410:	mov	x29, sp
 414:	str	x0, [sp, #24]
 418:	str	xzr, [sp, #56]
 41c:	ldr	x0, [sp, #24]
 420:	str	xzr, [x0]
 424:	mov	w0, #0xffffffff            	// #-1
 428:	str	w0, [sp, #44]
 42c:	adrp	x0, 0 <get_pipe>
 430:	add	x0, x0, #0x0
 434:	bl	0 <getenv>
 438:	str	x0, [sp, #48]
 43c:	ldr	x0, [sp, #48]
 440:	cmp	x0, #0x0
 444:	b.ne	454 <open_tmp_file+0x48>  // b.any
 448:	adrp	x0, 0 <get_pipe>
 44c:	add	x0, x0, #0x0
 450:	str	x0, [sp, #48]
 454:	ldr	x0, [sp, #48]
 458:	cmp	x0, #0x0
 45c:	b.ne	470 <open_tmp_file+0x64>  // b.any
 460:	adrp	x0, 0 <get_pipe>
 464:	add	x0, x0, #0x0
 468:	bl	0 <getenv>
 46c:	str	x0, [sp, #48]
 470:	ldr	x0, [sp, #48]
 474:	cmp	x0, #0x0
 478:	b.ne	488 <open_tmp_file+0x7c>  // b.any
 47c:	adrp	x0, 0 <get_pipe>
 480:	add	x0, x0, #0x0
 484:	str	x0, [sp, #48]
 488:	ldr	x1, [sp, #48]
 48c:	adrp	x0, 0 <get_pipe>
 490:	add	x0, x0, #0x0
 494:	bl	0 <ck_strdup_printf>
 498:	mov	x1, x0
 49c:	ldr	x0, [sp, #24]
 4a0:	str	x1, [x0]
 4a4:	ldr	x0, [sp, #24]
 4a8:	ldr	x0, [x0]
 4ac:	bl	0 <mkstemp>
 4b0:	str	w0, [sp, #44]
 4b4:	ldr	w0, [sp, #44]
 4b8:	cmp	w0, #0x0
 4bc:	b.lt	508 <open_tmp_file+0xfc>  // b.tstop
 4c0:	adrp	x0, 0 <get_pipe>
 4c4:	add	x1, x0, #0x0
 4c8:	ldr	w0, [sp, #44]
 4cc:	bl	0 <fdopen>
 4d0:	str	x0, [sp, #56]
 4d4:	ldr	x0, [sp, #24]
 4d8:	ldr	x0, [x0]
 4dc:	bl	0 <unlink>
 4e0:	cmp	w0, #0x0
 4e4:	b.eq	4f4 <open_tmp_file+0xe8>  // b.none
 4e8:	ldr	x0, [sp, #56]
 4ec:	cmp	x0, #0x0
 4f0:	b.ne	508 <open_tmp_file+0xfc>  // b.any
 4f4:	ldr	x0, [sp, #24]
 4f8:	ldr	x0, [x0]
 4fc:	bl	0 <free>
 500:	ldr	x0, [sp, #24]
 504:	str	xzr, [x0]
 508:	ldr	x0, [sp, #56]
 50c:	ldp	x29, x30, [sp], #64
 510:	ret

0000000000000514 <setup_pipe>:
 514:	stp	x29, x30, [sp, #-16]!
 518:	mov	x29, sp
 51c:	adrp	x0, 0 <get_pipe>
 520:	add	x0, x0, #0x0
 524:	ldr	x0, [x0]
 528:	cmp	x0, #0x0
 52c:	b.ne	578 <setup_pipe+0x64>  // b.any
 530:	adrp	x0, 0 <get_pipe>
 534:	add	x0, x0, #0x0
 538:	bl	40c <open_tmp_file>
 53c:	mov	x1, x0
 540:	adrp	x0, 0 <get_pipe>
 544:	add	x0, x0, #0x0
 548:	str	x1, [x0]
 54c:	adrp	x0, 0 <get_pipe>
 550:	add	x0, x0, #0x0
 554:	ldr	x0, [x0]
 558:	cmp	x0, #0x0
 55c:	b.ne	5ec <setup_pipe+0xd8>  // b.any
 560:	mov	w2, #0x13d                 	// #317
 564:	adrp	x0, 0 <get_pipe>
 568:	add	x1, x0, #0x0
 56c:	adrp	x0, 0 <get_pipe>
 570:	add	x0, x0, #0x0
 574:	bl	0 <eprintf>
 578:	adrp	x0, 0 <get_pipe>
 57c:	add	x0, x0, #0x0
 580:	ldr	x0, [x0]
 584:	cmp	x0, #0x0
 588:	b.ne	5d4 <setup_pipe+0xc0>  // b.any
 58c:	adrp	x0, 0 <get_pipe>
 590:	add	x0, x0, #0x0
 594:	bl	40c <open_tmp_file>
 598:	mov	x1, x0
 59c:	adrp	x0, 0 <get_pipe>
 5a0:	add	x0, x0, #0x0
 5a4:	str	x1, [x0]
 5a8:	adrp	x0, 0 <get_pipe>
 5ac:	add	x0, x0, #0x0
 5b0:	ldr	x0, [x0]
 5b4:	cmp	x0, #0x0
 5b8:	b.ne	5f4 <setup_pipe+0xe0>  // b.any
 5bc:	mov	w2, #0x146                 	// #326
 5c0:	adrp	x0, 0 <get_pipe>
 5c4:	add	x1, x0, #0x0
 5c8:	adrp	x0, 0 <get_pipe>
 5cc:	add	x0, x0, #0x0
 5d0:	bl	0 <eprintf>
 5d4:	mov	w2, #0x14d                 	// #333
 5d8:	adrp	x0, 0 <get_pipe>
 5dc:	add	x1, x0, #0x0
 5e0:	adrp	x0, 0 <get_pipe>
 5e4:	add	x0, x0, #0x0
 5e8:	bl	0 <eprintf>
 5ec:	nop
 5f0:	b	5f8 <setup_pipe+0xe4>
 5f4:	nop
 5f8:	ldp	x29, x30, [sp], #16
 5fc:	ret

0000000000000600 <teardown_pipe>:
 600:	stp	x29, x30, [sp, #-16]!
 604:	mov	x29, sp
 608:	adrp	x0, 0 <get_pipe>
 60c:	add	x0, x0, #0x0
 610:	ldr	x0, [x0]
 614:	cmp	x0, #0x0
 618:	b.eq	67c <teardown_pipe+0x7c>  // b.none
 61c:	adrp	x0, 0 <get_pipe>
 620:	add	x0, x0, #0x0
 624:	ldr	x0, [x0]
 628:	bl	0 <fclose>
 62c:	adrp	x0, 0 <get_pipe>
 630:	add	x0, x0, #0x0
 634:	str	xzr, [x0]
 638:	adrp	x0, 0 <get_pipe>
 63c:	add	x0, x0, #0x0
 640:	ldr	x0, [x0]
 644:	cmp	x0, #0x0
 648:	b.eq	708 <teardown_pipe+0x108>  // b.none
 64c:	adrp	x0, 0 <get_pipe>
 650:	add	x0, x0, #0x0
 654:	ldr	x0, [x0]
 658:	bl	0 <unlink>
 65c:	adrp	x0, 0 <get_pipe>
 660:	add	x0, x0, #0x0
 664:	ldr	x0, [x0]
 668:	bl	0 <free>
 66c:	adrp	x0, 0 <get_pipe>
 670:	add	x0, x0, #0x0
 674:	str	xzr, [x0]
 678:	b	708 <teardown_pipe+0x108>
 67c:	adrp	x0, 0 <get_pipe>
 680:	add	x0, x0, #0x0
 684:	ldr	x0, [x0]
 688:	cmp	x0, #0x0
 68c:	b.eq	6f0 <teardown_pipe+0xf0>  // b.none
 690:	adrp	x0, 0 <get_pipe>
 694:	add	x0, x0, #0x0
 698:	ldr	x0, [x0]
 69c:	bl	0 <fclose>
 6a0:	adrp	x0, 0 <get_pipe>
 6a4:	add	x0, x0, #0x0
 6a8:	str	xzr, [x0]
 6ac:	adrp	x0, 0 <get_pipe>
 6b0:	add	x0, x0, #0x0
 6b4:	ldr	x0, [x0]
 6b8:	cmp	x0, #0x0
 6bc:	b.eq	708 <teardown_pipe+0x108>  // b.none
 6c0:	adrp	x0, 0 <get_pipe>
 6c4:	add	x0, x0, #0x0
 6c8:	ldr	x0, [x0]
 6cc:	bl	0 <unlink>
 6d0:	adrp	x0, 0 <get_pipe>
 6d4:	add	x0, x0, #0x0
 6d8:	ldr	x0, [x0]
 6dc:	bl	0 <free>
 6e0:	adrp	x0, 0 <get_pipe>
 6e4:	add	x0, x0, #0x0
 6e8:	str	xzr, [x0]
 6ec:	b	708 <teardown_pipe+0x108>
 6f0:	mov	w2, #0x16a                 	// #362
 6f4:	adrp	x0, 0 <get_pipe>
 6f8:	add	x1, x0, #0x0
 6fc:	adrp	x0, 0 <get_pipe>
 700:	add	x0, x0, #0x0
 704:	bl	0 <eprintf>
 708:	nop
 70c:	ldp	x29, x30, [sp], #16
 710:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <check_set_max_msg_size>
   c:	add	x0, x0, #0x0
  10:	ldr	x1, [sp, #8]
  14:	str	x1, [x0]
  18:	nop
  1c:	add	sp, sp, #0x10
  20:	ret

0000000000000024 <get_max_msg_size>:
  24:	stp	x29, x30, [sp, #-32]!
  28:	mov	x29, sp
  2c:	str	xzr, [sp, #24]
  30:	adrp	x0, 0 <check_set_max_msg_size>
  34:	add	x0, x0, #0x0
  38:	bl	0 <getenv>
  3c:	str	x0, [sp, #16]
  40:	ldr	x0, [sp, #16]
  44:	cmp	x0, #0x0
  48:	b.eq	60 <get_max_msg_size+0x3c>  // b.none
  4c:	mov	w2, #0xa                   	// #10
  50:	mov	x1, #0x0                   	// #0
  54:	ldr	x0, [sp, #16]
  58:	bl	0 <strtoul>
  5c:	str	x0, [sp, #24]
  60:	ldr	x0, [sp, #24]
  64:	cmp	x0, #0x0
  68:	b.ne	7c <get_max_msg_size+0x58>  // b.any
  6c:	adrp	x0, 0 <check_set_max_msg_size>
  70:	add	x0, x0, #0x0
  74:	ldr	x0, [x0]
  78:	str	x0, [sp, #24]
  7c:	ldr	x0, [sp, #24]
  80:	cmp	x0, #0x0
  84:	b.ne	90 <get_max_msg_size+0x6c>  // b.any
  88:	mov	x0, #0x1000                	// #4096
  8c:	str	x0, [sp, #24]
  90:	ldr	x0, [sp, #24]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <pack>:
  9c:	stp	x29, x30, [sp, #-48]!
  a0:	mov	x29, sp
  a4:	str	w0, [sp, #44]
  a8:	str	x1, [sp, #32]
  ac:	str	x2, [sp, #24]
  b0:	ldr	x0, [sp, #32]
  b4:	cmp	x0, #0x0
  b8:	b.ne	c4 <pack+0x28>  // b.any
  bc:	mov	w0, #0xffffffff            	// #-1
  c0:	b	10c <pack+0x70>
  c4:	ldr	x0, [sp, #24]
  c8:	cmp	x0, #0x0
  cc:	b.ne	d8 <pack+0x3c>  // b.any
  d0:	mov	w0, #0x0                   	// #0
  d4:	b	10c <pack+0x70>
  d8:	ldr	w3, [sp, #44]
  dc:	mov	w2, #0x7e                  	// #126
  e0:	adrp	x0, 0 <check_set_max_msg_size>
  e4:	add	x1, x0, #0x0
  e8:	mov	w0, w3
  ec:	bl	6c0 <check_type>
  f0:	adrp	x0, 0 <check_set_max_msg_size>
  f4:	add	x0, x0, #0x0
  f8:	ldr	w1, [sp, #44]
  fc:	ldr	x2, [x0, x1, lsl #3]
 100:	ldr	x1, [sp, #24]
 104:	ldr	x0, [sp, #32]
 108:	blr	x2
 10c:	ldp	x29, x30, [sp], #48
 110:	ret

0000000000000114 <upack>:
 114:	stp	x29, x30, [sp, #-64]!
 118:	mov	x29, sp
 11c:	str	x0, [sp, #40]
 120:	str	x1, [sp, #32]
 124:	str	x2, [sp, #24]
 128:	ldr	x0, [sp, #40]
 12c:	cmp	x0, #0x0
 130:	b.ne	13c <upack+0x28>  // b.any
 134:	mov	w0, #0xffffffff            	// #-1
 138:	b	1a8 <upack+0x94>
 13c:	ldr	x0, [sp, #40]
 140:	str	x0, [sp, #56]
 144:	add	x0, sp, #0x28
 148:	bl	414 <upack_type>
 14c:	mov	w1, w0
 150:	ldr	x0, [sp, #24]
 154:	str	w1, [x0]
 158:	ldr	x0, [sp, #24]
 15c:	ldr	w0, [x0]
 160:	mov	w3, w0
 164:	mov	w2, #0x8e                  	// #142
 168:	adrp	x0, 0 <check_set_max_msg_size>
 16c:	add	x1, x0, #0x0
 170:	mov	w0, w3
 174:	bl	6c0 <check_type>
 178:	ldr	x0, [sp, #24]
 17c:	ldr	w1, [x0]
 180:	adrp	x0, 0 <check_set_max_msg_size>
 184:	add	x0, x0, #0x0
 188:	mov	w1, w1
 18c:	ldr	x2, [x0, x1, lsl #3]
 190:	add	x0, sp, #0x28
 194:	ldr	x1, [sp, #32]
 198:	blr	x2
 19c:	ldr	x1, [sp, #40]
 1a0:	ldr	x0, [sp, #56]
 1a4:	sub	x0, x1, x0
 1a8:	ldp	x29, x30, [sp], #64
 1ac:	ret

00000000000001b0 <pack_int>:
 1b0:	sub	sp, sp, #0x20
 1b4:	str	x0, [sp, #8]
 1b8:	str	w1, [sp, #4]
 1bc:	ldr	x0, [sp, #8]
 1c0:	ldr	x0, [x0]
 1c4:	str	x0, [sp, #24]
 1c8:	ldr	w0, [sp, #4]
 1cc:	str	w0, [sp, #20]
 1d0:	ldr	w0, [sp, #20]
 1d4:	lsr	w0, w0, #24
 1d8:	and	w1, w0, #0xff
 1dc:	ldr	x0, [sp, #24]
 1e0:	strb	w1, [x0]
 1e4:	ldr	w0, [sp, #20]
 1e8:	lsr	w1, w0, #16
 1ec:	ldr	x0, [sp, #24]
 1f0:	add	x0, x0, #0x1
 1f4:	and	w1, w1, #0xff
 1f8:	strb	w1, [x0]
 1fc:	ldr	w0, [sp, #20]
 200:	lsr	w1, w0, #8
 204:	ldr	x0, [sp, #24]
 208:	add	x0, x0, #0x2
 20c:	and	w1, w1, #0xff
 210:	strb	w1, [x0]
 214:	ldr	x0, [sp, #24]
 218:	add	x0, x0, #0x3
 21c:	ldr	w1, [sp, #20]
 220:	and	w1, w1, #0xff
 224:	strb	w1, [x0]
 228:	ldr	x0, [sp, #8]
 22c:	ldr	x0, [x0]
 230:	add	x1, x0, #0x4
 234:	ldr	x0, [sp, #8]
 238:	str	x1, [x0]
 23c:	nop
 240:	add	sp, sp, #0x20
 244:	ret

0000000000000248 <upack_int>:
 248:	sub	sp, sp, #0x20
 24c:	str	x0, [sp, #8]
 250:	ldr	x0, [sp, #8]
 254:	ldr	x0, [x0]
 258:	str	x0, [sp, #24]
 25c:	ldr	x0, [sp, #24]
 260:	ldrb	w0, [x0]
 264:	lsl	w1, w0, #24
 268:	ldr	x0, [sp, #24]
 26c:	add	x0, x0, #0x1
 270:	ldrb	w0, [x0]
 274:	lsl	w0, w0, #16
 278:	orr	w1, w1, w0
 27c:	ldr	x0, [sp, #24]
 280:	add	x0, x0, #0x2
 284:	ldrb	w0, [x0]
 288:	lsl	w0, w0, #8
 28c:	orr	w0, w1, w0
 290:	ldr	x1, [sp, #24]
 294:	add	x1, x1, #0x3
 298:	ldrb	w1, [x1]
 29c:	orr	w0, w0, w1
 2a0:	str	w0, [sp, #20]
 2a4:	ldr	x0, [sp, #8]
 2a8:	ldr	x0, [x0]
 2ac:	add	x1, x0, #0x4
 2b0:	ldr	x0, [sp, #8]
 2b4:	str	x1, [x0]
 2b8:	ldr	w0, [sp, #20]
 2bc:	add	sp, sp, #0x20
 2c0:	ret

00000000000002c4 <pack_str>:
 2c4:	stp	x29, x30, [sp, #-48]!
 2c8:	mov	x29, sp
 2cc:	str	x0, [sp, #24]
 2d0:	str	x1, [sp, #16]
 2d4:	ldr	x0, [sp, #16]
 2d8:	cmp	x0, #0x0
 2dc:	b.ne	2e8 <pack_str+0x24>  // b.any
 2e0:	str	wzr, [sp, #44]
 2e4:	b	2f4 <pack_str+0x30>
 2e8:	ldr	x0, [sp, #16]
 2ec:	bl	0 <strlen>
 2f0:	str	w0, [sp, #44]
 2f4:	ldr	w1, [sp, #44]
 2f8:	ldr	x0, [sp, #24]
 2fc:	bl	1b0 <pack_int>
 300:	ldr	w0, [sp, #44]
 304:	cmp	w0, #0x0
 308:	b.le	33c <pack_str+0x78>
 30c:	ldr	x0, [sp, #24]
 310:	ldr	x0, [x0]
 314:	ldrsw	x1, [sp, #44]
 318:	mov	x2, x1
 31c:	ldr	x1, [sp, #16]
 320:	bl	0 <memcpy>
 324:	ldr	x0, [sp, #24]
 328:	ldr	x1, [x0]
 32c:	ldrsw	x0, [sp, #44]
 330:	add	x1, x1, x0
 334:	ldr	x0, [sp, #24]
 338:	str	x1, [x0]
 33c:	nop
 340:	ldp	x29, x30, [sp], #48
 344:	ret

0000000000000348 <upack_str>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	mov	x29, sp
 350:	str	x0, [sp, #24]
 354:	ldr	x0, [sp, #24]
 358:	bl	248 <upack_int>
 35c:	str	w0, [sp, #36]
 360:	ldr	w0, [sp, #36]
 364:	cmp	w0, #0x0
 368:	b.le	3c8 <upack_str+0x80>
 36c:	ldr	w0, [sp, #36]
 370:	add	w0, w0, #0x1
 374:	sxtw	x0, w0
 378:	bl	0 <emalloc>
 37c:	str	x0, [sp, #40]
 380:	ldr	x0, [sp, #24]
 384:	ldr	x0, [x0]
 388:	ldrsw	x1, [sp, #36]
 38c:	mov	x2, x1
 390:	mov	x1, x0
 394:	ldr	x0, [sp, #40]
 398:	bl	0 <memcpy>
 39c:	ldrsw	x0, [sp, #36]
 3a0:	ldr	x1, [sp, #40]
 3a4:	add	x0, x1, x0
 3a8:	strb	wzr, [x0]
 3ac:	ldr	x0, [sp, #24]
 3b0:	ldr	x1, [x0]
 3b4:	ldrsw	x0, [sp, #36]
 3b8:	add	x1, x1, x0
 3bc:	ldr	x0, [sp, #24]
 3c0:	str	x1, [x0]
 3c4:	b	3dc <upack_str+0x94>
 3c8:	mov	x0, #0x1                   	// #1
 3cc:	bl	0 <emalloc>
 3d0:	str	x0, [sp, #40]
 3d4:	ldr	x0, [sp, #40]
 3d8:	strb	wzr, [x0]
 3dc:	ldr	x0, [sp, #40]
 3e0:	ldp	x29, x30, [sp], #48
 3e4:	ret

00000000000003e8 <pack_type>:
 3e8:	stp	x29, x30, [sp, #-32]!
 3ec:	mov	x29, sp
 3f0:	str	x0, [sp, #24]
 3f4:	str	w1, [sp, #20]
 3f8:	ldr	w0, [sp, #20]
 3fc:	mov	w1, w0
 400:	ldr	x0, [sp, #24]
 404:	bl	1b0 <pack_int>
 408:	nop
 40c:	ldp	x29, x30, [sp], #32
 410:	ret

0000000000000414 <upack_type>:
 414:	stp	x29, x30, [sp, #-32]!
 418:	mov	x29, sp
 41c:	str	x0, [sp, #24]
 420:	ldr	x0, [sp, #24]
 424:	bl	248 <upack_int>
 428:	ldp	x29, x30, [sp], #32
 42c:	ret

0000000000000430 <pack_ctx>:
 430:	stp	x29, x30, [sp, #-48]!
 434:	mov	x29, sp
 438:	str	x0, [sp, #24]
 43c:	str	x1, [sp, #16]
 440:	mov	w0, #0x8                   	// #8
 444:	str	w0, [sp, #44]
 448:	ldrsw	x0, [sp, #44]
 44c:	bl	0 <emalloc>
 450:	str	x0, [sp, #32]
 454:	ldr	x1, [sp, #32]
 458:	ldr	x0, [sp, #24]
 45c:	str	x1, [x0]
 460:	add	x0, sp, #0x20
 464:	mov	w1, #0x0                   	// #0
 468:	bl	3e8 <pack_type>
 46c:	ldr	x0, [sp, #16]
 470:	ldr	w0, [x0]
 474:	mov	w1, w0
 478:	add	x0, sp, #0x20
 47c:	bl	1b0 <pack_int>
 480:	ldr	w0, [sp, #44]
 484:	ldp	x29, x30, [sp], #48
 488:	ret

000000000000048c <upack_ctx>:
 48c:	stp	x29, x30, [sp, #-32]!
 490:	mov	x29, sp
 494:	str	x0, [sp, #24]
 498:	str	x1, [sp, #16]
 49c:	ldr	x0, [sp, #24]
 4a0:	bl	248 <upack_int>
 4a4:	mov	w1, w0
 4a8:	ldr	x0, [sp, #16]
 4ac:	str	w1, [x0]
 4b0:	nop
 4b4:	ldp	x29, x30, [sp], #32
 4b8:	ret

00000000000004bc <pack_duration>:
 4bc:	stp	x29, x30, [sp, #-48]!
 4c0:	mov	x29, sp
 4c4:	str	x0, [sp, #24]
 4c8:	str	x1, [sp, #16]
 4cc:	mov	w0, #0x8                   	// #8
 4d0:	str	w0, [sp, #44]
 4d4:	ldrsw	x0, [sp, #44]
 4d8:	bl	0 <emalloc>
 4dc:	str	x0, [sp, #32]
 4e0:	ldr	x1, [sp, #32]
 4e4:	ldr	x0, [sp, #24]
 4e8:	str	x1, [x0]
 4ec:	add	x0, sp, #0x20
 4f0:	mov	w1, #0x3                   	// #3
 4f4:	bl	3e8 <pack_type>
 4f8:	ldr	x0, [sp, #16]
 4fc:	ldr	w1, [x0]
 500:	add	x0, sp, #0x20
 504:	bl	1b0 <pack_int>
 508:	ldr	w0, [sp, #44]
 50c:	ldp	x29, x30, [sp], #48
 510:	ret

0000000000000514 <upack_duration>:
 514:	stp	x29, x30, [sp, #-32]!
 518:	mov	x29, sp
 51c:	str	x0, [sp, #24]
 520:	str	x1, [sp, #16]
 524:	ldr	x0, [sp, #24]
 528:	bl	248 <upack_int>
 52c:	mov	w1, w0
 530:	ldr	x0, [sp, #16]
 534:	str	w1, [x0]
 538:	nop
 53c:	ldp	x29, x30, [sp], #32
 540:	ret

0000000000000544 <pack_loc>:
 544:	stp	x29, x30, [sp, #-48]!
 548:	mov	x29, sp
 54c:	str	x0, [sp, #24]
 550:	str	x1, [sp, #16]
 554:	ldr	x0, [sp, #16]
 558:	ldr	x0, [x0, #8]
 55c:	cmp	x0, #0x0
 560:	b.eq	578 <pack_loc+0x34>  // b.none
 564:	ldr	x0, [sp, #16]
 568:	ldr	x0, [x0, #8]
 56c:	bl	0 <strlen>
 570:	add	w0, w0, #0xc
 574:	b	57c <pack_loc+0x38>
 578:	mov	w0, #0xc                   	// #12
 57c:	str	w0, [sp, #44]
 580:	ldrsw	x0, [sp, #44]
 584:	bl	0 <emalloc>
 588:	str	x0, [sp, #32]
 58c:	ldr	x1, [sp, #32]
 590:	ldr	x0, [sp, #24]
 594:	str	x1, [x0]
 598:	add	x0, sp, #0x20
 59c:	mov	w1, #0x2                   	// #2
 5a0:	bl	3e8 <pack_type>
 5a4:	ldr	x0, [sp, #16]
 5a8:	ldr	x1, [x0, #8]
 5ac:	add	x0, sp, #0x20
 5b0:	bl	2c4 <pack_str>
 5b4:	ldr	x0, [sp, #16]
 5b8:	ldr	w1, [x0]
 5bc:	add	x0, sp, #0x20
 5c0:	bl	1b0 <pack_int>
 5c4:	ldr	w0, [sp, #44]
 5c8:	ldp	x29, x30, [sp], #48
 5cc:	ret

00000000000005d0 <upack_loc>:
 5d0:	stp	x29, x30, [sp, #-32]!
 5d4:	mov	x29, sp
 5d8:	str	x0, [sp, #24]
 5dc:	str	x1, [sp, #16]
 5e0:	ldr	x0, [sp, #24]
 5e4:	bl	348 <upack_str>
 5e8:	mov	x1, x0
 5ec:	ldr	x0, [sp, #16]
 5f0:	str	x1, [x0, #8]
 5f4:	ldr	x0, [sp, #24]
 5f8:	bl	248 <upack_int>
 5fc:	mov	w1, w0
 600:	ldr	x0, [sp, #16]
 604:	str	w1, [x0]
 608:	nop
 60c:	ldp	x29, x30, [sp], #32
 610:	ret

0000000000000614 <pack_fail>:
 614:	stp	x29, x30, [sp, #-48]!
 618:	mov	x29, sp
 61c:	str	x0, [sp, #24]
 620:	str	x1, [sp, #16]
 624:	ldr	x0, [sp, #16]
 628:	ldr	x0, [x0]
 62c:	cmp	x0, #0x0
 630:	b.eq	648 <pack_fail+0x34>  // b.none
 634:	ldr	x0, [sp, #16]
 638:	ldr	x0, [x0]
 63c:	bl	0 <strlen>
 640:	add	w0, w0, #0x8
 644:	b	64c <pack_fail+0x38>
 648:	mov	w0, #0x8                   	// #8
 64c:	str	w0, [sp, #44]
 650:	ldrsw	x0, [sp, #44]
 654:	bl	0 <emalloc>
 658:	str	x0, [sp, #32]
 65c:	ldr	x1, [sp, #32]
 660:	ldr	x0, [sp, #24]
 664:	str	x1, [x0]
 668:	add	x0, sp, #0x20
 66c:	mov	w1, #0x1                   	// #1
 670:	bl	3e8 <pack_type>
 674:	ldr	x0, [sp, #16]
 678:	ldr	x1, [x0]
 67c:	add	x0, sp, #0x20
 680:	bl	2c4 <pack_str>
 684:	ldr	w0, [sp, #44]
 688:	ldp	x29, x30, [sp], #48
 68c:	ret

0000000000000690 <upack_fail>:
 690:	stp	x29, x30, [sp, #-32]!
 694:	mov	x29, sp
 698:	str	x0, [sp, #24]
 69c:	str	x1, [sp, #16]
 6a0:	ldr	x0, [sp, #24]
 6a4:	bl	348 <upack_str>
 6a8:	mov	x1, x0
 6ac:	ldr	x0, [sp, #16]
 6b0:	str	x1, [x0]
 6b4:	nop
 6b8:	ldp	x29, x30, [sp], #32
 6bc:	ret

00000000000006c0 <check_type>:
 6c0:	stp	x29, x30, [sp, #-32]!
 6c4:	mov	x29, sp
 6c8:	str	w0, [sp, #28]
 6cc:	str	x1, [sp, #16]
 6d0:	str	w2, [sp, #24]
 6d4:	ldr	w0, [sp, #28]
 6d8:	cmp	w0, #0x0
 6dc:	b.lt	6ec <check_type+0x2c>  // b.tstop
 6e0:	ldr	w0, [sp, #28]
 6e4:	cmp	w0, #0x3
 6e8:	b.le	704 <check_type+0x44>
 6ec:	ldr	w3, [sp, #28]
 6f0:	ldr	w2, [sp, #24]
 6f4:	ldr	x1, [sp, #16]
 6f8:	adrp	x0, 0 <check_set_max_msg_size>
 6fc:	add	x0, x0, #0x0
 700:	bl	0 <eprintf>
 704:	nop
 708:	ldp	x29, x30, [sp], #32
 70c:	ret

0000000000000710 <ppack_cleanup>:
 710:	stp	x29, x30, [sp, #-32]!
 714:	mov	x29, sp
 718:	str	x0, [sp, #24]
 71c:	ldr	x0, [sp, #24]
 720:	bl	0 <pthread_mutex_unlock>
 724:	nop
 728:	ldp	x29, x30, [sp], #32
 72c:	ret

0000000000000730 <ppack>:
 730:	stp	x29, x30, [sp, #-320]!
 734:	mov	x29, sp
 738:	str	x0, [sp, #40]
 73c:	str	w1, [sp, #36]
 740:	str	x2, [sp, #24]
 744:	str	xzr, [sp, #272]
 748:	add	x0, sp, #0x110
 74c:	ldr	x2, [sp, #24]
 750:	mov	x1, x0
 754:	ldr	w0, [sp, #36]
 758:	bl	9c <pack>
 75c:	sxtw	x0, w0
 760:	str	x0, [sp, #312]
 764:	bl	24 <get_max_msg_size>
 768:	mov	x1, x0
 76c:	ldr	x0, [sp, #312]
 770:	cmp	x0, x1
 774:	b.ls	790 <ppack+0x60>  // b.plast
 778:	mov	w2, #0x146                 	// #326
 77c:	adrp	x0, 0 <check_set_max_msg_size>
 780:	add	x1, x0, #0x0
 784:	adrp	x0, 0 <check_set_max_msg_size>
 788:	add	x0, x0, #0x0
 78c:	bl	0 <eprintf>
 790:	adrp	x0, 0 <check_set_max_msg_size>
 794:	add	x0, x0, #0x0
 798:	str	x0, [sp, #304]
 79c:	adrp	x0, 0 <check_set_max_msg_size>
 7a0:	add	x0, x0, #0x0
 7a4:	str	x0, [sp, #296]
 7a8:	add	x0, sp, #0x30
 7ac:	mov	w1, #0x0                   	// #0
 7b0:	bl	0 <__sigsetjmp>
 7b4:	str	w0, [sp, #292]
 7b8:	ldrsw	x0, [sp, #292]
 7bc:	cmp	x0, #0x0
 7c0:	b.eq	7d8 <ppack+0xa8>  // b.none
 7c4:	ldr	x1, [sp, #304]
 7c8:	ldr	x0, [sp, #296]
 7cc:	blr	x1
 7d0:	add	x0, sp, #0x30
 7d4:	bl	0 <__pthread_unwind_next>
 7d8:	add	x0, sp, #0x30
 7dc:	bl	0 <__pthread_register_cancel>
 7e0:	adrp	x0, 0 <check_set_max_msg_size>
 7e4:	add	x0, x0, #0x0
 7e8:	bl	0 <pthread_mutex_lock>
 7ec:	ldr	x0, [sp, #272]
 7f0:	ldr	x3, [sp, #40]
 7f4:	ldr	x2, [sp, #312]
 7f8:	mov	x1, #0x1                   	// #1
 7fc:	bl	0 <fwrite>
 800:	str	x0, [sp, #280]
 804:	ldr	x0, [sp, #40]
 808:	bl	0 <fflush>
 80c:	adrp	x0, 0 <check_set_max_msg_size>
 810:	add	x0, x0, #0x0
 814:	bl	0 <pthread_mutex_unlock>
 818:	add	x0, sp, #0x30
 81c:	bl	0 <__pthread_unregister_cancel>
 820:	ldr	x1, [sp, #280]
 824:	ldr	x0, [sp, #312]
 828:	cmp	x1, x0
 82c:	b.eq	848 <ppack+0x118>  // b.none
 830:	mov	w2, #0x14f                 	// #335
 834:	adrp	x0, 0 <check_set_max_msg_size>
 838:	add	x1, x0, #0x0
 83c:	adrp	x0, 0 <check_set_max_msg_size>
 840:	add	x0, x0, #0x0
 844:	bl	0 <eprintf>
 848:	ldr	x0, [sp, #272]
 84c:	bl	0 <free>
 850:	nop
 854:	ldp	x29, x30, [sp], #320
 858:	ret

000000000000085c <read_buf>:
 85c:	stp	x29, x30, [sp, #-64]!
 860:	mov	x29, sp
 864:	str	x0, [sp, #40]
 868:	str	w1, [sp, #36]
 86c:	str	x2, [sp, #24]
 870:	ldrsw	x0, [sp, #36]
 874:	ldr	x3, [sp, #40]
 878:	mov	x2, x0
 87c:	mov	x1, #0x1                   	// #1
 880:	ldr	x0, [sp, #24]
 884:	bl	0 <fread>
 888:	str	w0, [sp, #60]
 88c:	ldr	x0, [sp, #40]
 890:	bl	0 <ferror>
 894:	cmp	w0, #0x0
 898:	b.eq	8b4 <read_buf+0x58>  // b.none
 89c:	mov	w2, #0x15a                 	// #346
 8a0:	adrp	x0, 0 <check_set_max_msg_size>
 8a4:	add	x1, x0, #0x0
 8a8:	adrp	x0, 0 <check_set_max_msg_size>
 8ac:	add	x0, x0, #0x0
 8b0:	bl	0 <eprintf>
 8b4:	ldr	w0, [sp, #60]
 8b8:	ldp	x29, x30, [sp], #64
 8bc:	ret

00000000000008c0 <get_result>:
 8c0:	stp	x29, x30, [sp, #-96]!
 8c4:	mov	x29, sp
 8c8:	str	x0, [sp, #24]
 8cc:	str	x1, [sp, #16]
 8d0:	add	x1, sp, #0x34
 8d4:	add	x0, sp, #0x20
 8d8:	mov	x2, x1
 8dc:	mov	x1, x0
 8e0:	ldr	x0, [sp, #24]
 8e4:	bl	114 <upack>
 8e8:	str	w0, [sp, #92]
 8ec:	ldr	w0, [sp, #92]
 8f0:	cmn	w0, #0x1
 8f4:	b.ne	910 <get_result+0x50>  // b.any
 8f8:	mov	w2, #0x16a                 	// #362
 8fc:	adrp	x0, 0 <check_set_max_msg_size>
 900:	add	x1, x0, #0x0
 904:	adrp	x0, 0 <check_set_max_msg_size>
 908:	add	x0, x0, #0x0
 90c:	bl	0 <eprintf>
 910:	ldr	w0, [sp, #52]
 914:	cmp	w0, #0x0
 918:	b.ne	93c <get_result+0x7c>  // b.any
 91c:	add	x0, sp, #0x20
 920:	str	x0, [sp, #56]
 924:	ldr	x0, [sp, #56]
 928:	ldr	w0, [x0]
 92c:	mov	w1, w0
 930:	ldr	x0, [sp, #16]
 934:	bl	b20 <rcvmsg_update_ctx>
 938:	b	a2c <get_result+0x16c>
 93c:	ldr	w0, [sp, #52]
 940:	cmp	w0, #0x2
 944:	b.ne	98c <get_result+0xcc>  // b.any
 948:	add	x0, sp, #0x20
 94c:	str	x0, [sp, #64]
 950:	ldr	x0, [sp, #16]
 954:	ldr	w0, [x0, #4]
 958:	cmp	w0, #0x0
 95c:	b.ne	97c <get_result+0xbc>  // b.any
 960:	ldr	x0, [sp, #64]
 964:	ldr	x1, [x0, #8]
 968:	ldr	x0, [sp, #64]
 96c:	ldr	w0, [x0]
 970:	mov	w2, w0
 974:	ldr	x0, [sp, #16]
 978:	bl	b6c <rcvmsg_update_loc>
 97c:	ldr	x0, [sp, #64]
 980:	ldr	x0, [x0, #8]
 984:	bl	0 <free>
 988:	b	a2c <get_result+0x16c>
 98c:	ldr	w0, [sp, #52]
 990:	cmp	w0, #0x1
 994:	b.ne	9e8 <get_result+0x128>  // b.any
 998:	add	x0, sp, #0x20
 99c:	str	x0, [sp, #72]
 9a0:	ldr	x0, [sp, #16]
 9a4:	ldr	x0, [x0, #40]
 9a8:	cmp	x0, #0x0
 9ac:	b.ne	9d8 <get_result+0x118>  // b.any
 9b0:	ldr	x0, [sp, #72]
 9b4:	ldr	x0, [x0]
 9b8:	bl	0 <strdup>
 9bc:	mov	x1, x0
 9c0:	ldr	x0, [sp, #16]
 9c4:	str	x1, [x0, #40]
 9c8:	ldr	x0, [sp, #16]
 9cc:	ldr	w1, [x0]
 9d0:	ldr	x0, [sp, #16]
 9d4:	str	w1, [x0, #4]
 9d8:	ldr	x0, [sp, #72]
 9dc:	ldr	x0, [x0]
 9e0:	bl	0 <free>
 9e4:	b	a2c <get_result+0x16c>
 9e8:	ldr	w0, [sp, #52]
 9ec:	cmp	w0, #0x3
 9f0:	b.ne	a10 <get_result+0x150>  // b.any
 9f4:	add	x0, sp, #0x20
 9f8:	str	x0, [sp, #80]
 9fc:	ldr	x0, [sp, #80]
 a00:	ldr	w1, [x0]
 a04:	ldr	x0, [sp, #16]
 a08:	str	w1, [x0, #48]
 a0c:	b	a2c <get_result+0x16c>
 a10:	ldr	w0, [sp, #52]
 a14:	mov	w3, w0
 a18:	mov	w2, #0x194                 	// #404
 a1c:	adrp	x0, 0 <check_set_max_msg_size>
 a20:	add	x1, x0, #0x0
 a24:	mov	w0, w3
 a28:	bl	6c0 <check_type>
 a2c:	ldr	w0, [sp, #92]
 a30:	ldp	x29, x30, [sp], #96
 a34:	ret

0000000000000a38 <reset_rcv_test>:
 a38:	sub	sp, sp, #0x10
 a3c:	str	x0, [sp, #8]
 a40:	ldr	x0, [sp, #8]
 a44:	mov	w1, #0xffffffff            	// #-1
 a48:	str	w1, [x0, #32]
 a4c:	ldr	x0, [sp, #8]
 a50:	str	xzr, [x0, #24]
 a54:	nop
 a58:	add	sp, sp, #0x10
 a5c:	ret

0000000000000a60 <reset_rcv_fixture>:
 a60:	sub	sp, sp, #0x10
 a64:	str	x0, [sp, #8]
 a68:	ldr	x0, [sp, #8]
 a6c:	mov	w1, #0xffffffff            	// #-1
 a70:	str	w1, [x0, #16]
 a74:	ldr	x0, [sp, #8]
 a78:	str	xzr, [x0, #8]
 a7c:	nop
 a80:	add	sp, sp, #0x10
 a84:	ret

0000000000000a88 <rcvmsg_create>:
 a88:	stp	x29, x30, [sp, #-32]!
 a8c:	mov	x29, sp
 a90:	mov	x0, #0x38                  	// #56
 a94:	bl	0 <emalloc>
 a98:	str	x0, [sp, #24]
 a9c:	ldr	x0, [sp, #24]
 aa0:	str	wzr, [x0]
 aa4:	ldr	x0, [sp, #24]
 aa8:	str	wzr, [x0, #4]
 aac:	ldr	x0, [sp, #24]
 ab0:	str	xzr, [x0, #40]
 ab4:	ldr	x0, [sp, #24]
 ab8:	mov	w1, #0xffffffff            	// #-1
 abc:	str	w1, [x0, #48]
 ac0:	ldr	x0, [sp, #24]
 ac4:	bl	a38 <reset_rcv_test>
 ac8:	ldr	x0, [sp, #24]
 acc:	bl	a60 <reset_rcv_fixture>
 ad0:	ldr	x0, [sp, #24]
 ad4:	ldp	x29, x30, [sp], #32
 ad8:	ret

0000000000000adc <rcvmsg_free>:
 adc:	stp	x29, x30, [sp, #-32]!
 ae0:	mov	x29, sp
 ae4:	str	x0, [sp, #24]
 ae8:	ldr	x0, [sp, #24]
 aec:	ldr	x0, [x0, #8]
 af0:	bl	0 <free>
 af4:	ldr	x0, [sp, #24]
 af8:	ldr	x0, [x0, #24]
 afc:	bl	0 <free>
 b00:	ldr	x0, [sp, #24]
 b04:	ldr	x0, [x0, #40]
 b08:	bl	0 <free>
 b0c:	ldr	x0, [sp, #24]
 b10:	bl	0 <free>
 b14:	nop
 b18:	ldp	x29, x30, [sp], #32
 b1c:	ret

0000000000000b20 <rcvmsg_update_ctx>:
 b20:	stp	x29, x30, [sp, #-32]!
 b24:	mov	x29, sp
 b28:	str	x0, [sp, #24]
 b2c:	str	w1, [sp, #20]
 b30:	ldr	x0, [sp, #24]
 b34:	ldr	w0, [x0]
 b38:	cmp	w0, #0x0
 b3c:	b.eq	b54 <rcvmsg_update_ctx+0x34>  // b.none
 b40:	ldr	x0, [sp, #24]
 b44:	ldr	x0, [x0, #8]
 b48:	bl	0 <free>
 b4c:	ldr	x0, [sp, #24]
 b50:	bl	a60 <reset_rcv_fixture>
 b54:	ldr	x0, [sp, #24]
 b58:	ldr	w1, [sp, #20]
 b5c:	str	w1, [x0]
 b60:	nop
 b64:	ldp	x29, x30, [sp], #32
 b68:	ret

0000000000000b6c <rcvmsg_update_loc>:
 b6c:	stp	x29, x30, [sp, #-48]!
 b70:	mov	x29, sp
 b74:	str	x0, [sp, #40]
 b78:	str	x1, [sp, #32]
 b7c:	str	w2, [sp, #28]
 b80:	ldr	x0, [sp, #40]
 b84:	ldr	w0, [x0]
 b88:	cmp	w0, #0x2
 b8c:	b.ne	bc0 <rcvmsg_update_loc+0x54>  // b.any
 b90:	ldr	x0, [sp, #40]
 b94:	ldr	x0, [x0, #24]
 b98:	bl	0 <free>
 b9c:	ldr	x0, [sp, #40]
 ba0:	ldr	w1, [sp, #28]
 ba4:	str	w1, [x0, #32]
 ba8:	ldr	x0, [sp, #32]
 bac:	bl	0 <strdup>
 bb0:	mov	x1, x0
 bb4:	ldr	x0, [sp, #40]
 bb8:	str	x1, [x0, #24]
 bbc:	b	bec <rcvmsg_update_loc+0x80>
 bc0:	ldr	x0, [sp, #40]
 bc4:	ldr	x0, [x0, #8]
 bc8:	bl	0 <free>
 bcc:	ldr	x0, [sp, #40]
 bd0:	ldr	w1, [sp, #28]
 bd4:	str	w1, [x0, #16]
 bd8:	ldr	x0, [sp, #32]
 bdc:	bl	0 <strdup>
 be0:	mov	x1, x0
 be4:	ldr	x0, [sp, #40]
 be8:	str	x1, [x0, #8]
 bec:	nop
 bf0:	ldp	x29, x30, [sp], #48
 bf4:	ret

0000000000000bf8 <punpack>:
 bf8:	stp	x29, x30, [sp, #-64]!
 bfc:	mov	x29, sp
 c00:	str	x0, [sp, #24]
 c04:	bl	a88 <rcvmsg_create>
 c08:	str	x0, [sp, #48]
 c0c:	bl	24 <get_max_msg_size>
 c10:	lsl	x0, x0, #1
 c14:	bl	0 <emalloc>
 c18:	str	x0, [sp, #40]
 c1c:	bl	24 <get_max_msg_size>
 c20:	lsl	w0, w0, #1
 c24:	ldr	x2, [sp, #40]
 c28:	mov	w1, w0
 c2c:	ldr	x0, [sp, #24]
 c30:	bl	85c <read_buf>
 c34:	str	w0, [sp, #60]
 c38:	ldr	w0, [sp, #60]
 c3c:	str	w0, [sp, #56]
 c40:	b	ce4 <punpack+0xec>
 c44:	ldr	x1, [sp, #48]
 c48:	ldr	x0, [sp, #40]
 c4c:	bl	8c0 <get_result>
 c50:	str	w0, [sp, #36]
 c54:	ldr	w1, [sp, #56]
 c58:	ldr	w0, [sp, #36]
 c5c:	sub	w0, w1, w0
 c60:	str	w0, [sp, #56]
 c64:	ldr	w0, [sp, #56]
 c68:	cmp	w0, #0x0
 c6c:	b.ge	c88 <punpack+0x90>  // b.tcont
 c70:	mov	w2, #0x1e6                 	// #486
 c74:	adrp	x0, 0 <check_set_max_msg_size>
 c78:	add	x1, x0, #0x0
 c7c:	adrp	x0, 0 <check_set_max_msg_size>
 c80:	add	x0, x0, #0x0
 c84:	bl	0 <eprintf>
 c88:	ldrsw	x0, [sp, #36]
 c8c:	ldr	x1, [sp, #40]
 c90:	add	x0, x1, x0
 c94:	ldrsw	x1, [sp, #56]
 c98:	mov	x2, x1
 c9c:	mov	x1, x0
 ca0:	ldr	x0, [sp, #40]
 ca4:	bl	0 <memmove>
 ca8:	ldr	w0, [sp, #60]
 cac:	cmp	w0, #0x0
 cb0:	b.le	ce4 <punpack+0xec>
 cb4:	ldrsw	x0, [sp, #56]
 cb8:	ldr	x1, [sp, #40]
 cbc:	add	x0, x1, x0
 cc0:	mov	x2, x0
 cc4:	ldr	w1, [sp, #36]
 cc8:	ldr	x0, [sp, #24]
 ccc:	bl	85c <read_buf>
 cd0:	str	w0, [sp, #60]
 cd4:	ldr	w1, [sp, #56]
 cd8:	ldr	w0, [sp, #60]
 cdc:	add	w0, w1, w0
 ce0:	str	w0, [sp, #56]
 ce4:	ldr	w0, [sp, #56]
 ce8:	cmp	w0, #0x0
 cec:	b.gt	c44 <punpack+0x4c>
 cf0:	ldr	x0, [sp, #40]
 cf4:	bl	0 <free>
 cf8:	ldr	x0, [sp, #48]
 cfc:	ldr	w0, [x0]
 d00:	cmp	w0, #0x0
 d04:	b.ne	d14 <punpack+0x11c>  // b.any
 d08:	ldr	x0, [sp, #48]
 d0c:	bl	0 <free>
 d10:	str	xzr, [sp, #48]
 d14:	ldr	x0, [sp, #48]
 d18:	ldp	x29, x30, [sp], #64
 d1c:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	w1, [sp, #20]
  10:	adrp	x0, 0 <stdout>
  14:	add	x0, x0, #0x0
  18:	ldr	x0, [x0]
  1c:	ldr	w2, [sp, #20]
  20:	ldr	x1, [sp, #24]
  24:	bl	34 <srunner_fprint>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

0000000000000034 <srunner_fprint>:
  34:	stp	x29, x30, [sp, #-48]!
  38:	mov	x29, sp
  3c:	str	x0, [sp, #40]
  40:	str	x1, [sp, #32]
  44:	str	w2, [sp, #28]
  48:	ldr	w0, [sp, #28]
  4c:	cmp	w0, #0x4
  50:	b.ne	5c <srunner_fprint+0x28>  // b.any
  54:	bl	728 <get_env_printmode>
  58:	str	w0, [sp, #28]
  5c:	ldr	w2, [sp, #28]
  60:	ldr	x1, [sp, #32]
  64:	ldr	x0, [sp, #40]
  68:	bl	88 <srunner_fprint_summary>
  6c:	ldr	w2, [sp, #28]
  70:	ldr	x1, [sp, #32]
  74:	ldr	x0, [sp, #40]
  78:	bl	e0 <srunner_fprint_results>
  7c:	nop
  80:	ldp	x29, x30, [sp], #48
  84:	ret

0000000000000088 <srunner_fprint_summary>:
  88:	stp	x29, x30, [sp, #-64]!
  8c:	mov	x29, sp
  90:	str	x0, [sp, #40]
  94:	str	x1, [sp, #32]
  98:	str	w2, [sp, #28]
  9c:	ldr	w0, [sp, #28]
  a0:	cmp	w0, #0x0
  a4:	b.eq	d4 <srunner_fprint_summary+0x4c>  // b.none
  a8:	ldr	x0, [sp, #32]
  ac:	bl	0 <sr_stat_str>
  b0:	str	x0, [sp, #56]
  b4:	ldr	x2, [sp, #56]
  b8:	adrp	x0, 0 <srunner_print>
  bc:	add	x1, x0, #0x0
  c0:	ldr	x0, [sp, #40]
  c4:	bl	0 <fprintf>
  c8:	ldr	x0, [sp, #56]
  cc:	bl	0 <free>
  d0:	nop
  d4:	nop
  d8:	ldp	x29, x30, [sp], #64
  dc:	ret

00000000000000e0 <srunner_fprint_results>:
  e0:	stp	x29, x30, [sp, #-64]!
  e4:	mov	x29, sp
  e8:	str	x0, [sp, #40]
  ec:	str	x1, [sp, #32]
  f0:	str	w2, [sp, #28]
  f4:	ldr	x0, [sp, #32]
  f8:	ldr	x0, [x0, #16]
  fc:	str	x0, [sp, #56]
 100:	ldr	x0, [sp, #56]
 104:	bl	0 <check_list_front>
 108:	b	130 <srunner_fprint_results+0x50>
 10c:	ldr	x0, [sp, #56]
 110:	bl	0 <check_list_val>
 114:	str	x0, [sp, #48]
 118:	ldr	w2, [sp, #28]
 11c:	ldr	x1, [sp, #48]
 120:	ldr	x0, [sp, #40]
 124:	bl	320 <tr_fprint>
 128:	ldr	x0, [sp, #56]
 12c:	bl	0 <check_list_advance>
 130:	ldr	x0, [sp, #56]
 134:	bl	0 <check_list_at_end>
 138:	cmp	w0, #0x0
 13c:	b.eq	10c <srunner_fprint_results+0x2c>  // b.none
 140:	nop
 144:	ldp	x29, x30, [sp], #64
 148:	ret

000000000000014c <fprint_xml_esc>:
 14c:	stp	x29, x30, [sp, #-48]!
 150:	mov	x29, sp
 154:	str	x0, [sp, #24]
 158:	str	x1, [sp, #16]
 15c:	b	300 <fprint_xml_esc+0x1b4>
 160:	ldr	x0, [sp, #16]
 164:	ldrb	w0, [x0]
 168:	strb	w0, [sp, #47]
 16c:	ldrb	w0, [sp, #47]
 170:	cmp	w0, #0x22
 174:	b.eq	1a8 <fprint_xml_esc+0x5c>  // b.none
 178:	ldrb	w0, [sp, #47]
 17c:	cmp	w0, #0x27
 180:	b.eq	1a8 <fprint_xml_esc+0x5c>  // b.none
 184:	ldrb	w0, [sp, #47]
 188:	cmp	w0, #0x3c
 18c:	b.eq	1a8 <fprint_xml_esc+0x5c>  // b.none
 190:	ldrb	w0, [sp, #47]
 194:	cmp	w0, #0x3e
 198:	b.eq	1a8 <fprint_xml_esc+0x5c>  // b.none
 19c:	ldrb	w0, [sp, #47]
 1a0:	cmp	w0, #0x26
 1a4:	b.ne	284 <fprint_xml_esc+0x138>  // b.any
 1a8:	ldrb	w0, [sp, #47]
 1ac:	cmp	w0, #0x3e
 1b0:	b.eq	244 <fprint_xml_esc+0xf8>  // b.none
 1b4:	cmp	w0, #0x3e
 1b8:	b.gt	27c <fprint_xml_esc+0x130>
 1bc:	cmp	w0, #0x3c
 1c0:	b.eq	228 <fprint_xml_esc+0xdc>  // b.none
 1c4:	cmp	w0, #0x3c
 1c8:	b.gt	27c <fprint_xml_esc+0x130>
 1cc:	cmp	w0, #0x27
 1d0:	b.eq	20c <fprint_xml_esc+0xc0>  // b.none
 1d4:	cmp	w0, #0x27
 1d8:	b.gt	27c <fprint_xml_esc+0x130>
 1dc:	cmp	w0, #0x22
 1e0:	b.eq	1f0 <fprint_xml_esc+0xa4>  // b.none
 1e4:	cmp	w0, #0x26
 1e8:	b.eq	260 <fprint_xml_esc+0x114>  // b.none
 1ec:	b	27c <fprint_xml_esc+0x130>
 1f0:	ldr	x3, [sp, #24]
 1f4:	mov	x2, #0x6                   	// #6
 1f8:	mov	x1, #0x1                   	// #1
 1fc:	adrp	x0, 0 <srunner_print>
 200:	add	x0, x0, #0x0
 204:	bl	0 <fwrite>
 208:	b	280 <fprint_xml_esc+0x134>
 20c:	ldr	x3, [sp, #24]
 210:	mov	x2, #0x6                   	// #6
 214:	mov	x1, #0x1                   	// #1
 218:	adrp	x0, 0 <srunner_print>
 21c:	add	x0, x0, #0x0
 220:	bl	0 <fwrite>
 224:	b	280 <fprint_xml_esc+0x134>
 228:	ldr	x3, [sp, #24]
 22c:	mov	x2, #0x4                   	// #4
 230:	mov	x1, #0x1                   	// #1
 234:	adrp	x0, 0 <srunner_print>
 238:	add	x0, x0, #0x0
 23c:	bl	0 <fwrite>
 240:	b	280 <fprint_xml_esc+0x134>
 244:	ldr	x3, [sp, #24]
 248:	mov	x2, #0x4                   	// #4
 24c:	mov	x1, #0x1                   	// #1
 250:	adrp	x0, 0 <srunner_print>
 254:	add	x0, x0, #0x0
 258:	bl	0 <fwrite>
 25c:	b	280 <fprint_xml_esc+0x134>
 260:	ldr	x3, [sp, #24]
 264:	mov	x2, #0x5                   	// #5
 268:	mov	x1, #0x1                   	// #1
 26c:	adrp	x0, 0 <srunner_print>
 270:	add	x0, x0, #0x0
 274:	bl	0 <fwrite>
 278:	b	280 <fprint_xml_esc+0x134>
 27c:	nop
 280:	b	2f4 <fprint_xml_esc+0x1a8>
 284:	ldrb	w0, [sp, #47]
 288:	cmp	w0, #0x1f
 28c:	b.ls	2ac <fprint_xml_esc+0x160>  // b.plast
 290:	ldrb	w0, [sp, #47]
 294:	cmp	w0, #0x7e
 298:	b.hi	2ac <fprint_xml_esc+0x160>  // b.pmore
 29c:	ldrb	w0, [sp, #47]
 2a0:	ldr	x1, [sp, #24]
 2a4:	bl	0 <fputc>
 2a8:	b	2f4 <fprint_xml_esc+0x1a8>
 2ac:	ldrb	w0, [sp, #47]
 2b0:	cmp	w0, #0x9
 2b4:	b.eq	2dc <fprint_xml_esc+0x190>  // b.none
 2b8:	ldrb	w0, [sp, #47]
 2bc:	cmp	w0, #0xa
 2c0:	b.eq	2dc <fprint_xml_esc+0x190>  // b.none
 2c4:	ldrb	w0, [sp, #47]
 2c8:	cmp	w0, #0xd
 2cc:	b.eq	2dc <fprint_xml_esc+0x190>  // b.none
 2d0:	ldrb	w0, [sp, #47]
 2d4:	cmp	w0, #0x1f
 2d8:	b.ls	2f4 <fprint_xml_esc+0x1a8>  // b.plast
 2dc:	ldrb	w0, [sp, #47]
 2e0:	mov	w2, w0
 2e4:	adrp	x0, 0 <srunner_print>
 2e8:	add	x1, x0, #0x0
 2ec:	ldr	x0, [sp, #24]
 2f0:	bl	0 <fprintf>
 2f4:	ldr	x0, [sp, #16]
 2f8:	add	x0, x0, #0x1
 2fc:	str	x0, [sp, #16]
 300:	ldr	x0, [sp, #16]
 304:	ldrb	w0, [x0]
 308:	cmp	w0, #0x0
 30c:	b.ne	160 <fprint_xml_esc+0x14>  // b.any
 310:	nop
 314:	nop
 318:	ldp	x29, x30, [sp], #48
 31c:	ret

0000000000000320 <tr_fprint>:
 320:	stp	x29, x30, [sp, #-64]!
 324:	mov	x29, sp
 328:	str	x0, [sp, #40]
 32c:	str	x1, [sp, #32]
 330:	str	w2, [sp, #28]
 334:	ldr	w0, [sp, #28]
 338:	cmp	w0, #0x4
 33c:	b.ne	348 <tr_fprint+0x28>  // b.any
 340:	bl	728 <get_env_printmode>
 344:	str	w0, [sp, #28]
 348:	ldr	w0, [sp, #28]
 34c:	cmp	w0, #0x2
 350:	b.ls	364 <tr_fprint+0x44>  // b.plast
 354:	ldr	x0, [sp, #32]
 358:	ldr	w0, [x0]
 35c:	cmp	w0, #0x1
 360:	b.eq	380 <tr_fprint+0x60>  // b.none
 364:	ldr	x0, [sp, #32]
 368:	ldr	w0, [x0]
 36c:	cmp	w0, #0x1
 370:	b.eq	3a8 <tr_fprint+0x88>  // b.none
 374:	ldr	w0, [sp, #28]
 378:	cmp	w0, #0x1
 37c:	b.ls	3a8 <tr_fprint+0x88>  // b.plast
 380:	ldr	x0, [sp, #32]
 384:	bl	0 <tr_str>
 388:	str	x0, [sp, #56]
 38c:	ldr	x2, [sp, #56]
 390:	adrp	x0, 0 <srunner_print>
 394:	add	x1, x0, #0x0
 398:	ldr	x0, [sp, #40]
 39c:	bl	0 <fprintf>
 3a0:	ldr	x0, [sp, #56]
 3a4:	bl	0 <free>
 3a8:	nop
 3ac:	ldp	x29, x30, [sp], #64
 3b0:	ret

00000000000003b4 <tr_xmlprint>:
 3b4:	stp	x29, x30, [sp, #-96]!
 3b8:	mov	x29, sp
 3bc:	str	x0, [sp, #40]
 3c0:	str	x1, [sp, #32]
 3c4:	str	w2, [sp, #28]
 3c8:	str	xzr, [sp, #88]
 3cc:	str	xzr, [sp, #80]
 3d0:	str	xzr, [sp, #72]
 3d4:	ldr	x0, [sp, #32]
 3d8:	ldr	w0, [x0]
 3dc:	cmp	w0, #0x3
 3e0:	b.eq	448 <tr_xmlprint+0x94>  // b.none
 3e4:	cmp	w0, #0x3
 3e8:	b.hi	46c <tr_xmlprint+0xb8>  // b.pmore
 3ec:	cmp	w0, #0x1
 3f0:	b.eq	400 <tr_xmlprint+0x4c>  // b.none
 3f4:	cmp	w0, #0x2
 3f8:	b.eq	424 <tr_xmlprint+0x70>  // b.none
 3fc:	b	46c <tr_xmlprint+0xb8>
 400:	add	x4, sp, #0x38
 404:	adrp	x0, 0 <srunner_print>
 408:	add	x3, x0, #0x0
 40c:	adrp	x0, 0 <srunner_print>
 410:	add	x2, x0, #0x0
 414:	mov	x1, #0xa                   	// #10
 418:	mov	x0, x4
 41c:	bl	0 <snprintf>
 420:	b	470 <tr_xmlprint+0xbc>
 424:	add	x4, sp, #0x38
 428:	adrp	x0, 0 <srunner_print>
 42c:	add	x3, x0, #0x0
 430:	adrp	x0, 0 <srunner_print>
 434:	add	x2, x0, #0x0
 438:	mov	x1, #0xa                   	// #10
 43c:	mov	x0, x4
 440:	bl	0 <snprintf>
 444:	b	470 <tr_xmlprint+0xbc>
 448:	add	x4, sp, #0x38
 44c:	adrp	x0, 0 <srunner_print>
 450:	add	x3, x0, #0x0
 454:	adrp	x0, 0 <srunner_print>
 458:	add	x2, x0, #0x0
 45c:	mov	x1, #0xa                   	// #10
 460:	mov	x0, x4
 464:	bl	0 <snprintf>
 468:	b	470 <tr_xmlprint+0xbc>
 46c:	bl	0 <abort>
 470:	ldr	x0, [sp, #32]
 474:	ldr	x0, [x0, #8]
 478:	cmp	x0, #0x0
 47c:	b.eq	51c <tr_xmlprint+0x168>  // b.none
 480:	ldr	x0, [sp, #32]
 484:	ldr	x0, [x0, #8]
 488:	mov	w1, #0x2f                  	// #47
 48c:	bl	0 <strrchr>
 490:	str	x0, [sp, #72]
 494:	ldr	x0, [sp, #72]
 498:	cmp	x0, #0x0
 49c:	b.ne	4b4 <tr_xmlprint+0x100>  // b.any
 4a0:	ldr	x0, [sp, #32]
 4a4:	ldr	x0, [x0, #8]
 4a8:	mov	w1, #0x5c                  	// #92
 4ac:	bl	0 <strrchr>
 4b0:	str	x0, [sp, #72]
 4b4:	ldr	x0, [sp, #72]
 4b8:	cmp	x0, #0x0
 4bc:	b.ne	4e0 <tr_xmlprint+0x12c>  // b.any
 4c0:	adrp	x0, 0 <srunner_print>
 4c4:	add	x0, x0, #0x0
 4c8:	bl	0 <strdup>
 4cc:	str	x0, [sp, #88]
 4d0:	ldr	x0, [sp, #32]
 4d4:	ldr	x0, [x0, #8]
 4d8:	str	x0, [sp, #80]
 4dc:	b	51c <tr_xmlprint+0x168>
 4e0:	ldr	x0, [sp, #32]
 4e4:	ldr	x0, [x0, #8]
 4e8:	bl	0 <strdup>
 4ec:	str	x0, [sp, #88]
 4f0:	ldr	x0, [sp, #32]
 4f4:	ldr	x0, [x0, #8]
 4f8:	ldr	x1, [sp, #72]
 4fc:	sub	x0, x1, x0
 500:	mov	x1, x0
 504:	ldr	x0, [sp, #88]
 508:	add	x0, x0, x1
 50c:	strb	wzr, [x0]
 510:	ldr	x0, [sp, #72]
 514:	add	x0, x0, #0x1
 518:	str	x0, [sp, #80]
 51c:	add	x0, sp, #0x38
 520:	mov	x2, x0
 524:	adrp	x0, 0 <srunner_print>
 528:	add	x1, x0, #0x0
 52c:	ldr	x0, [sp, #40]
 530:	bl	0 <fprintf>
 534:	ldr	x0, [sp, #88]
 538:	cmp	x0, #0x0
 53c:	b.eq	548 <tr_xmlprint+0x194>  // b.none
 540:	ldr	x0, [sp, #88]
 544:	b	550 <tr_xmlprint+0x19c>
 548:	adrp	x0, 0 <srunner_print>
 54c:	add	x0, x0, #0x0
 550:	mov	x2, x0
 554:	adrp	x0, 0 <srunner_print>
 558:	add	x1, x0, #0x0
 55c:	ldr	x0, [sp, #40]
 560:	bl	0 <fprintf>
 564:	ldr	x0, [sp, #80]
 568:	cmp	x0, #0x0
 56c:	b.eq	578 <tr_xmlprint+0x1c4>  // b.none
 570:	ldr	x0, [sp, #80]
 574:	b	580 <tr_xmlprint+0x1cc>
 578:	adrp	x0, 0 <srunner_print>
 57c:	add	x0, x0, #0x0
 580:	ldr	x1, [sp, #32]
 584:	ldr	w1, [x1, #16]
 588:	mov	w3, w1
 58c:	mov	x2, x0
 590:	adrp	x0, 0 <srunner_print>
 594:	add	x1, x0, #0x0
 598:	ldr	x0, [sp, #40]
 59c:	bl	0 <fprintf>
 5a0:	ldr	x0, [sp, #32]
 5a4:	ldr	x0, [x0, #40]
 5a8:	mov	x2, x0
 5ac:	adrp	x0, 0 <srunner_print>
 5b0:	add	x1, x0, #0x0
 5b4:	ldr	x0, [sp, #40]
 5b8:	bl	0 <fprintf>
 5bc:	ldr	x0, [sp, #32]
 5c0:	ldr	w0, [x0, #20]
 5c4:	mov	w2, w0
 5c8:	adrp	x0, 0 <srunner_print>
 5cc:	add	x1, x0, #0x0
 5d0:	ldr	x0, [sp, #40]
 5d4:	bl	0 <fprintf>
 5d8:	ldr	x0, [sp, #32]
 5dc:	ldr	w0, [x0, #24]
 5e0:	cmp	w0, #0x0
 5e4:	b.lt	610 <tr_xmlprint+0x25c>  // b.tstop
 5e8:	ldr	x0, [sp, #32]
 5ec:	ldr	w0, [x0, #24]
 5f0:	mov	w1, #0xde83                	// #56963
 5f4:	movk	w1, #0x431b, lsl #16
 5f8:	smull	x1, w0, w1
 5fc:	lsr	x1, x1, #32
 600:	asr	w1, w1, #18
 604:	asr	w0, w0, #31
 608:	sub	w2, w1, w0
 60c:	b	614 <tr_xmlprint+0x260>
 610:	mov	w2, #0xffffffff            	// #-1
 614:	ldr	x0, [sp, #32]
 618:	ldr	w0, [x0, #24]
 61c:	cmp	w0, #0x0
 620:	b.lt	65c <tr_xmlprint+0x2a8>  // b.tstop
 624:	ldr	x0, [sp, #32]
 628:	ldr	w1, [x0, #24]
 62c:	mov	w0, #0xde83                	// #56963
 630:	movk	w0, #0x431b, lsl #16
 634:	smull	x0, w1, w0
 638:	lsr	x0, x0, #32
 63c:	asr	w3, w0, #18
 640:	asr	w0, w1, #31
 644:	sub	w0, w3, w0
 648:	mov	w3, #0x4240                	// #16960
 64c:	movk	w3, #0xf, lsl #16
 650:	mul	w0, w0, w3
 654:	sub	w0, w1, w0
 658:	b	660 <tr_xmlprint+0x2ac>
 65c:	mov	w0, #0x0                   	// #0
 660:	mov	w3, w0
 664:	adrp	x0, 0 <srunner_print>
 668:	add	x1, x0, #0x0
 66c:	ldr	x0, [sp, #40]
 670:	bl	0 <fprintf>
 674:	ldr	x3, [sp, #40]
 678:	mov	x2, #0x13                  	// #19
 67c:	mov	x1, #0x1                   	// #1
 680:	adrp	x0, 0 <srunner_print>
 684:	add	x0, x0, #0x0
 688:	bl	0 <fwrite>
 68c:	ldr	x0, [sp, #32]
 690:	ldr	x0, [x0, #32]
 694:	mov	x1, x0
 698:	ldr	x0, [sp, #40]
 69c:	bl	14c <fprint_xml_esc>
 6a0:	ldr	x3, [sp, #40]
 6a4:	mov	x2, #0xf                   	// #15
 6a8:	mov	x1, #0x1                   	// #1
 6ac:	adrp	x0, 0 <srunner_print>
 6b0:	add	x0, x0, #0x0
 6b4:	bl	0 <fwrite>
 6b8:	ldr	x3, [sp, #40]
 6bc:	mov	x2, #0xf                   	// #15
 6c0:	mov	x1, #0x1                   	// #1
 6c4:	adrp	x0, 0 <srunner_print>
 6c8:	add	x0, x0, #0x0
 6cc:	bl	0 <fwrite>
 6d0:	ldr	x0, [sp, #32]
 6d4:	ldr	x0, [x0, #48]
 6d8:	mov	x1, x0
 6dc:	ldr	x0, [sp, #40]
 6e0:	bl	14c <fprint_xml_esc>
 6e4:	ldr	x3, [sp, #40]
 6e8:	mov	x2, #0xb                   	// #11
 6ec:	mov	x1, #0x1                   	// #1
 6f0:	adrp	x0, 0 <srunner_print>
 6f4:	add	x0, x0, #0x0
 6f8:	bl	0 <fwrite>
 6fc:	ldr	x3, [sp, #40]
 700:	mov	x2, #0xc                   	// #12
 704:	mov	x1, #0x1                   	// #1
 708:	adrp	x0, 0 <srunner_print>
 70c:	add	x0, x0, #0x0
 710:	bl	0 <fwrite>
 714:	ldr	x0, [sp, #88]
 718:	bl	0 <free>
 71c:	nop
 720:	ldp	x29, x30, [sp], #96
 724:	ret

0000000000000728 <get_env_printmode>:
 728:	stp	x29, x30, [sp, #-32]!
 72c:	mov	x29, sp
 730:	adrp	x0, 0 <srunner_print>
 734:	add	x0, x0, #0x0
 738:	bl	0 <getenv>
 73c:	str	x0, [sp, #24]
 740:	ldr	x0, [sp, #24]
 744:	cmp	x0, #0x0
 748:	b.ne	754 <get_env_printmode+0x2c>  // b.any
 74c:	mov	w0, #0x2                   	// #2
 750:	b	7b8 <get_env_printmode+0x90>
 754:	adrp	x0, 0 <srunner_print>
 758:	add	x1, x0, #0x0
 75c:	ldr	x0, [sp, #24]
 760:	bl	0 <strcmp>
 764:	cmp	w0, #0x0
 768:	b.ne	774 <get_env_printmode+0x4c>  // b.any
 76c:	mov	w0, #0x0                   	// #0
 770:	b	7b8 <get_env_printmode+0x90>
 774:	adrp	x0, 0 <srunner_print>
 778:	add	x1, x0, #0x0
 77c:	ldr	x0, [sp, #24]
 780:	bl	0 <strcmp>
 784:	cmp	w0, #0x0
 788:	b.ne	794 <get_env_printmode+0x6c>  // b.any
 78c:	mov	w0, #0x1                   	// #1
 790:	b	7b8 <get_env_printmode+0x90>
 794:	adrp	x0, 0 <srunner_print>
 798:	add	x1, x0, #0x0
 79c:	ldr	x0, [sp, #24]
 7a0:	bl	0 <strcmp>
 7a4:	cmp	w0, #0x0
 7a8:	b.ne	7b4 <get_env_printmode+0x8c>  // b.any
 7ac:	mov	w0, #0x3                   	// #3
 7b0:	b	7b8 <get_env_printmode+0x90>
 7b4:	mov	w0, #0x2                   	// #2
 7b8:	ldp	x29, x30, [sp], #32
 7bc:	ret

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sig_handler>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	w0, [sp, #28]
       c:	ldr	w0, [sp, #28]
      10:	cmp	w0, #0xf
      14:	b.eq	64 <sig_handler+0x64>  // b.none
      18:	ldr	w0, [sp, #28]
      1c:	cmp	w0, #0xf
      20:	b.gt	d8 <sig_handler+0xd8>
      24:	ldr	w0, [sp, #28]
      28:	cmp	w0, #0x2
      2c:	b.eq	64 <sig_handler+0x64>  // b.none
      30:	ldr	w0, [sp, #28]
      34:	cmp	w0, #0xe
      38:	b.ne	d8 <sig_handler+0xd8>  // b.any
      3c:	adrp	x0, 0 <sig_handler>
      40:	add	x0, x0, #0x0
      44:	mov	w1, #0x1                   	// #1
      48:	str	w1, [x0]
      4c:	adrp	x0, 0 <sig_handler>
      50:	add	x0, x0, #0x0
      54:	ldr	w0, [x0]
      58:	mov	w1, #0x9                   	// #9
      5c:	bl	0 <killpg>
      60:	b	f4 <sig_handler+0xf4>
      64:	mov	w0, #0xf                   	// #15
      68:	str	w0, [sp, #44]
      6c:	ldr	w0, [sp, #28]
      70:	cmp	w0, #0x2
      74:	b.ne	98 <sig_handler+0x98>  // b.any
      78:	mov	w0, #0x9                   	// #9
      7c:	str	w0, [sp, #44]
      80:	mov	x2, #0x0                   	// #0
      84:	adrp	x0, 0 <sig_handler>
      88:	add	x1, x0, #0x0
      8c:	mov	w0, #0x2                   	// #2
      90:	bl	0 <sigaction>
      94:	b	ac <sig_handler+0xac>
      98:	mov	x2, #0x0                   	// #0
      9c:	adrp	x0, 0 <sig_handler>
      a0:	add	x1, x0, #0x0
      a4:	mov	w0, #0xf                   	// #15
      a8:	bl	0 <sigaction>
      ac:	adrp	x0, 0 <sig_handler>
      b0:	add	x0, x0, #0x0
      b4:	ldr	w0, [x0]
      b8:	ldr	w1, [sp, #44]
      bc:	bl	0 <killpg>
      c0:	bl	0 <getpgrp>
      c4:	str	w0, [sp, #40]
      c8:	ldr	w1, [sp, #28]
      cc:	ldr	w0, [sp, #40]
      d0:	bl	0 <killpg>
      d4:	b	f4 <sig_handler+0xf4>
      d8:	ldr	w3, [sp, #28]
      dc:	mov	w2, #0x8e                  	// #142
      e0:	adrp	x0, 0 <sig_handler>
      e4:	add	x1, x0, #0x0
      e8:	adrp	x0, 0 <sig_handler>
      ec:	add	x0, x0, #0x0
      f0:	bl	0 <eprintf>
      f4:	nop
      f8:	ldp	x29, x30, [sp], #48
      fc:	ret

0000000000000100 <srunner_run_init>:
     100:	stp	x29, x30, [sp, #-32]!
     104:	mov	x29, sp
     108:	str	x0, [sp, #24]
     10c:	str	w1, [sp, #20]
     110:	ldr	x0, [sp, #24]
     114:	bl	132c <srunner_fork_status>
     118:	bl	0 <set_fork_status>
     11c:	bl	0 <setup_messaging>
     120:	ldr	w1, [sp, #20]
     124:	ldr	x0, [sp, #24]
     128:	bl	0 <srunner_init_logging>
     12c:	ldr	x0, [sp, #24]
     130:	bl	0 <log_srunner_start>
     134:	nop
     138:	ldp	x29, x30, [sp], #32
     13c:	ret

0000000000000140 <srunner_run_end>:
     140:	stp	x29, x30, [sp, #-32]!
     144:	mov	x29, sp
     148:	str	x0, [sp, #24]
     14c:	str	w1, [sp, #20]
     150:	ldr	x0, [sp, #24]
     154:	bl	0 <log_srunner_end>
     158:	ldr	x0, [sp, #24]
     15c:	bl	0 <srunner_end_logging>
     160:	bl	0 <teardown_messaging>
     164:	mov	w0, #0x1                   	// #1
     168:	bl	0 <set_fork_status>
     16c:	nop
     170:	ldp	x29, x30, [sp], #32
     174:	ret

0000000000000178 <srunner_iterate_suites>:
     178:	stp	x29, x30, [sp, #-112]!
     17c:	mov	x29, sp
     180:	str	x0, [sp, #56]
     184:	str	x1, [sp, #48]
     188:	str	x2, [sp, #40]
     18c:	str	x3, [sp, #32]
     190:	str	x4, [sp, #24]
     194:	str	w5, [sp, #20]
     198:	ldr	x0, [sp, #56]
     19c:	ldr	x0, [x0]
     1a0:	str	x0, [sp, #104]
     1a4:	ldr	x0, [sp, #32]
     1a8:	bl	0 <tag_string_to_list>
     1ac:	str	x0, [sp, #96]
     1b0:	ldr	x0, [sp, #24]
     1b4:	bl	0 <tag_string_to_list>
     1b8:	str	x0, [sp, #88]
     1bc:	ldr	x0, [sp, #104]
     1c0:	bl	0 <check_list_front>
     1c4:	b	30c <srunner_iterate_suites+0x194>
     1c8:	ldr	x0, [sp, #104]
     1cc:	bl	0 <check_list_val>
     1d0:	str	x0, [sp, #80]
     1d4:	ldr	x0, [sp, #48]
     1d8:	cmp	x0, #0x0
     1dc:	b.eq	1fc <srunner_iterate_suites+0x84>  // b.none
     1e0:	ldr	x0, [sp, #80]
     1e4:	ldr	x0, [x0]
     1e8:	mov	x1, x0
     1ec:	ldr	x0, [sp, #48]
     1f0:	bl	0 <strcmp>
     1f4:	cmp	w0, #0x0
     1f8:	b.ne	300 <srunner_iterate_suites+0x188>  // b.any
     1fc:	ldr	x0, [sp, #40]
     200:	cmp	x0, #0x0
     204:	b.eq	21c <srunner_iterate_suites+0xa4>  // b.none
     208:	ldr	x1, [sp, #40]
     20c:	ldr	x0, [sp, #80]
     210:	bl	0 <suite_tcase>
     214:	cmp	w0, #0x0
     218:	b.eq	300 <srunner_iterate_suites+0x188>  // b.none
     21c:	ldr	x1, [sp, #80]
     220:	ldr	x0, [sp, #56]
     224:	bl	0 <log_suite_start>
     228:	ldr	x0, [sp, #80]
     22c:	ldr	x0, [x0, #8]
     230:	str	x0, [sp, #72]
     234:	ldr	x0, [sp, #72]
     238:	bl	0 <check_list_front>
     23c:	b	2e0 <srunner_iterate_suites+0x168>
     240:	ldr	x0, [sp, #72]
     244:	bl	0 <check_list_val>
     248:	str	x0, [sp, #64]
     24c:	ldr	x0, [sp, #40]
     250:	cmp	x0, #0x0
     254:	b.eq	274 <srunner_iterate_suites+0xfc>  // b.none
     258:	ldr	x0, [sp, #64]
     25c:	ldr	x0, [x0]
     260:	mov	x1, x0
     264:	ldr	x0, [sp, #40]
     268:	bl	0 <strcmp>
     26c:	cmp	w0, #0x0
     270:	b.ne	2c4 <srunner_iterate_suites+0x14c>  // b.any
     274:	ldr	x0, [sp, #32]
     278:	cmp	x0, #0x0
     27c:	b.eq	294 <srunner_iterate_suites+0x11c>  // b.none
     280:	ldr	x1, [sp, #96]
     284:	ldr	x0, [sp, #64]
     288:	bl	0 <tcase_matching_tag>
     28c:	cmp	w0, #0x0
     290:	b.eq	2cc <srunner_iterate_suites+0x154>  // b.none
     294:	ldr	x0, [sp, #24]
     298:	cmp	x0, #0x0
     29c:	b.eq	2b4 <srunner_iterate_suites+0x13c>  // b.none
     2a0:	ldr	x1, [sp, #88]
     2a4:	ldr	x0, [sp, #64]
     2a8:	bl	0 <tcase_matching_tag>
     2ac:	cmp	w0, #0x0
     2b0:	b.ne	2d4 <srunner_iterate_suites+0x15c>  // b.any
     2b4:	ldr	x1, [sp, #64]
     2b8:	ldr	x0, [sp, #56]
     2bc:	bl	808 <srunner_run_tcase>
     2c0:	b	2d8 <srunner_iterate_suites+0x160>
     2c4:	nop
     2c8:	b	2d8 <srunner_iterate_suites+0x160>
     2cc:	nop
     2d0:	b	2d8 <srunner_iterate_suites+0x160>
     2d4:	nop
     2d8:	ldr	x0, [sp, #72]
     2dc:	bl	0 <check_list_advance>
     2e0:	ldr	x0, [sp, #72]
     2e4:	bl	0 <check_list_at_end>
     2e8:	cmp	w0, #0x0
     2ec:	b.eq	240 <srunner_iterate_suites+0xc8>  // b.none
     2f0:	ldr	x1, [sp, #80]
     2f4:	ldr	x0, [sp, #56]
     2f8:	bl	0 <log_suite_end>
     2fc:	b	304 <srunner_iterate_suites+0x18c>
     300:	nop
     304:	ldr	x0, [sp, #104]
     308:	bl	0 <check_list_advance>
     30c:	ldr	x0, [sp, #104]
     310:	bl	0 <check_list_at_end>
     314:	cmp	w0, #0x0
     318:	b.eq	1c8 <srunner_iterate_suites+0x50>  // b.none
     31c:	adrp	x0, 0 <free>
     320:	add	x1, x0, #0x0
     324:	ldr	x0, [sp, #96]
     328:	bl	0 <check_list_apply>
     32c:	adrp	x0, 0 <free>
     330:	add	x1, x0, #0x0
     334:	ldr	x0, [sp, #88]
     338:	bl	0 <check_list_apply>
     33c:	ldr	x0, [sp, #96]
     340:	bl	0 <check_list_free>
     344:	ldr	x0, [sp, #88]
     348:	bl	0 <check_list_free>
     34c:	nop
     350:	ldp	x29, x30, [sp], #112
     354:	ret

0000000000000358 <srunner_iterate_tcase_tfuns>:
     358:	stp	x29, x30, [sp, #-64]!
     35c:	mov	x29, sp
     360:	str	x0, [sp, #24]
     364:	str	x1, [sp, #16]
     368:	str	xzr, [sp, #56]
     36c:	ldr	x0, [sp, #16]
     370:	ldr	x0, [x0, #24]
     374:	str	x0, [sp, #40]
     378:	ldr	x0, [sp, #40]
     37c:	bl	0 <check_list_front>
     380:	b	468 <srunner_iterate_tcase_tfuns+0x110>
     384:	ldr	x0, [sp, #40]
     388:	bl	0 <check_list_val>
     38c:	str	x0, [sp, #32]
     390:	ldr	x0, [sp, #32]
     394:	ldr	w0, [x0, #8]
     398:	str	w0, [sp, #52]
     39c:	b	44c <srunner_iterate_tcase_tfuns+0xf4>
     3a0:	ldr	x2, [sp, #32]
     3a4:	ldr	x1, [sp, #16]
     3a8:	ldr	x0, [sp, #24]
     3ac:	bl	0 <log_test_start>
     3b0:	ldr	x0, [sp, #24]
     3b4:	bl	132c <srunner_fork_status>
     3b8:	cmp	w0, #0x1
     3bc:	b.eq	3cc <srunner_iterate_tcase_tfuns+0x74>  // b.none
     3c0:	cmp	w0, #0x2
     3c4:	b.eq	3e8 <srunner_iterate_tcase_tfuns+0x90>  // b.none
     3c8:	b	404 <srunner_iterate_tcase_tfuns+0xac>
     3cc:	ldr	w3, [sp, #52]
     3d0:	ldr	x2, [sp, #32]
     3d4:	ldr	x1, [sp, #16]
     3d8:	ldr	x0, [sp, #24]
     3dc:	bl	ac4 <tcase_run_tfun_fork>
     3e0:	str	x0, [sp, #56]
     3e4:	b	41c <srunner_iterate_tcase_tfuns+0xc4>
     3e8:	ldr	w3, [sp, #52]
     3ec:	ldr	x2, [sp, #32]
     3f0:	ldr	x1, [sp, #16]
     3f4:	ldr	x0, [sp, #24]
     3f8:	bl	850 <tcase_run_tfun_nofork>
     3fc:	str	x0, [sp, #56]
     400:	b	41c <srunner_iterate_tcase_tfuns+0xc4>
     404:	mov	w2, #0x10b                 	// #267
     408:	adrp	x0, 0 <sig_handler>
     40c:	add	x1, x0, #0x0
     410:	adrp	x0, 0 <sig_handler>
     414:	add	x0, x0, #0x0
     418:	bl	0 <eprintf>
     41c:	ldr	x0, [sp, #56]
     420:	cmp	x0, #0x0
     424:	b.eq	440 <srunner_iterate_tcase_tfuns+0xe8>  // b.none
     428:	ldr	x1, [sp, #56]
     42c:	ldr	x0, [sp, #24]
     430:	bl	488 <srunner_add_failure>
     434:	ldr	x1, [sp, #56]
     438:	ldr	x0, [sp, #24]
     43c:	bl	0 <log_test_end>
     440:	ldr	w0, [sp, #52]
     444:	add	w0, w0, #0x1
     448:	str	w0, [sp, #52]
     44c:	ldr	x0, [sp, #32]
     450:	ldr	w0, [x0, #12]
     454:	ldr	w1, [sp, #52]
     458:	cmp	w1, w0
     45c:	b.lt	3a0 <srunner_iterate_tcase_tfuns+0x48>  // b.tstop
     460:	ldr	x0, [sp, #40]
     464:	bl	0 <check_list_advance>
     468:	ldr	x0, [sp, #40]
     46c:	bl	0 <check_list_at_end>
     470:	cmp	w0, #0x0
     474:	b.eq	384 <srunner_iterate_tcase_tfuns+0x2c>  // b.none
     478:	nop
     47c:	nop
     480:	ldp	x29, x30, [sp], #64
     484:	ret

0000000000000488 <srunner_add_failure>:
     488:	stp	x29, x30, [sp, #-32]!
     48c:	mov	x29, sp
     490:	str	x0, [sp, #24]
     494:	str	x1, [sp, #16]
     498:	ldr	x0, [sp, #24]
     49c:	ldr	x0, [x0, #16]
     4a0:	ldr	x1, [sp, #16]
     4a4:	bl	0 <check_list_add_end>
     4a8:	ldr	x0, [sp, #24]
     4ac:	ldr	x0, [x0, #8]
     4b0:	ldr	w1, [x0]
     4b4:	add	w1, w1, #0x1
     4b8:	str	w1, [x0]
     4bc:	ldr	x0, [sp, #16]
     4c0:	ldr	w0, [x0]
     4c4:	cmp	w0, #0x2
     4c8:	b.ne	4e4 <srunner_add_failure+0x5c>  // b.any
     4cc:	ldr	x0, [sp, #24]
     4d0:	ldr	x0, [x0, #8]
     4d4:	ldr	w1, [x0, #4]
     4d8:	add	w1, w1, #0x1
     4dc:	str	w1, [x0, #4]
     4e0:	b	508 <srunner_add_failure+0x80>
     4e4:	ldr	x0, [sp, #16]
     4e8:	ldr	w0, [x0]
     4ec:	cmp	w0, #0x3
     4f0:	b.ne	508 <srunner_add_failure+0x80>  // b.any
     4f4:	ldr	x0, [sp, #24]
     4f8:	ldr	x0, [x0, #8]
     4fc:	ldr	w1, [x0, #8]
     500:	add	w1, w1, #0x1
     504:	str	w1, [x0, #8]
     508:	nop
     50c:	ldp	x29, x30, [sp], #32
     510:	ret

0000000000000514 <srunner_run_setup>:
     514:	stp	x29, x30, [sp, #-64]!
     518:	mov	x29, sp
     51c:	str	x0, [sp, #40]
     520:	str	w1, [sp, #36]
     524:	str	x2, [sp, #24]
     528:	str	x3, [sp, #16]
     52c:	str	xzr, [sp, #56]
     530:	ldr	w0, [sp, #36]
     534:	cmp	w0, #0x1
     538:	b.ne	544 <srunner_run_setup+0x30>  // b.any
     53c:	mov	w0, #0x1                   	// #1
     540:	bl	0 <send_ctx_info>
     544:	ldr	x0, [sp, #40]
     548:	bl	0 <check_list_front>
     54c:	b	5f4 <srunner_run_setup+0xe0>
     550:	ldr	x0, [sp, #40]
     554:	bl	0 <check_list_val>
     558:	str	x0, [sp, #48]
     55c:	ldr	w0, [sp, #36]
     560:	cmp	w0, #0x2
     564:	b.ne	5e0 <srunner_run_setup+0xcc>  // b.any
     568:	mov	w0, #0x1                   	// #1
     56c:	bl	0 <send_ctx_info>
     570:	adrp	x0, 0 <error_jmp_buffer>
     574:	add	x0, x0, #0x0
     578:	bl	0 <_setjmp>
     57c:	cmp	w0, #0x0
     580:	b.ne	590 <srunner_run_setup+0x7c>  // b.any
     584:	ldr	x0, [sp, #48]
     588:	ldr	x0, [x0, #8]
     58c:	blr	x0
     590:	mov	w3, #0xffffffff            	// #-1
     594:	mov	w2, #0x0                   	// #0
     598:	ldr	x1, [sp, #16]
     59c:	ldr	x0, [sp, #24]
     5a0:	bl	9c8 <receive_result_info_nofork>
     5a4:	str	x0, [sp, #56]
     5a8:	ldr	x0, [sp, #56]
     5ac:	ldr	w0, [x0]
     5b0:	cmp	w0, #0x1
     5b4:	b.ne	608 <srunner_run_setup+0xf4>  // b.any
     5b8:	ldr	x0, [sp, #56]
     5bc:	ldr	x0, [x0, #8]
     5c0:	bl	0 <free>
     5c4:	ldr	x0, [sp, #56]
     5c8:	ldr	x0, [x0, #48]
     5cc:	bl	0 <free>
     5d0:	ldr	x0, [sp, #56]
     5d4:	bl	0 <free>
     5d8:	str	xzr, [sp, #56]
     5dc:	b	5ec <srunner_run_setup+0xd8>
     5e0:	ldr	x0, [sp, #48]
     5e4:	ldr	x0, [x0, #8]
     5e8:	blr	x0
     5ec:	ldr	x0, [sp, #40]
     5f0:	bl	0 <check_list_advance>
     5f4:	ldr	x0, [sp, #40]
     5f8:	bl	0 <check_list_at_end>
     5fc:	cmp	w0, #0x0
     600:	b.eq	550 <srunner_run_setup+0x3c>  // b.none
     604:	b	60c <srunner_run_setup+0xf8>
     608:	nop
     60c:	ldr	x0, [sp, #56]
     610:	ldp	x29, x30, [sp], #64
     614:	ret

0000000000000618 <srunner_run_unchecked_setup>:
     618:	stp	x29, x30, [sp, #-48]!
     61c:	mov	x29, sp
     620:	str	x0, [sp, #24]
     624:	str	x1, [sp, #16]
     628:	str	xzr, [sp, #32]
     62c:	mov	w0, #0x1                   	// #1
     630:	str	w0, [sp, #44]
     634:	mov	w0, #0x2                   	// #2
     638:	bl	0 <set_fork_status>
     63c:	ldr	x0, [sp, #16]
     640:	ldr	x4, [x0, #32]
     644:	ldr	x0, [sp, #16]
     648:	ldr	x1, [x0]
     64c:	adrp	x0, 0 <sig_handler>
     650:	add	x3, x0, #0x0
     654:	mov	x2, x1
     658:	mov	w1, #0x2                   	// #2
     65c:	mov	x0, x4
     660:	bl	514 <srunner_run_setup>
     664:	str	x0, [sp, #32]
     668:	ldr	x0, [sp, #24]
     66c:	bl	132c <srunner_fork_status>
     670:	bl	0 <set_fork_status>
     674:	ldr	x0, [sp, #32]
     678:	cmp	x0, #0x0
     67c:	b.eq	6a0 <srunner_run_unchecked_setup+0x88>  // b.none
     680:	ldr	x0, [sp, #32]
     684:	ldr	w0, [x0]
     688:	cmp	w0, #0x1
     68c:	b.eq	6a0 <srunner_run_unchecked_setup+0x88>  // b.none
     690:	ldr	x1, [sp, #32]
     694:	ldr	x0, [sp, #24]
     698:	bl	488 <srunner_add_failure>
     69c:	str	wzr, [sp, #44]
     6a0:	ldr	w0, [sp, #44]
     6a4:	ldp	x29, x30, [sp], #48
     6a8:	ret

00000000000006ac <tcase_run_checked_setup>:
     6ac:	stp	x29, x30, [sp, #-64]!
     6b0:	mov	x29, sp
     6b4:	str	x19, [sp, #16]
     6b8:	str	x0, [sp, #40]
     6bc:	str	x1, [sp, #32]
     6c0:	ldr	x0, [sp, #32]
     6c4:	ldr	x19, [x0, #48]
     6c8:	ldr	x0, [sp, #40]
     6cc:	bl	132c <srunner_fork_status>
     6d0:	mov	w4, w0
     6d4:	ldr	x0, [sp, #32]
     6d8:	ldr	x1, [x0]
     6dc:	adrp	x0, 0 <sig_handler>
     6e0:	add	x3, x0, #0x0
     6e4:	mov	x2, x1
     6e8:	mov	w1, w4
     6ec:	mov	x0, x19
     6f0:	bl	514 <srunner_run_setup>
     6f4:	str	x0, [sp, #56]
     6f8:	ldr	x0, [sp, #56]
     6fc:	ldr	x19, [sp, #16]
     700:	ldp	x29, x30, [sp], #64
     704:	ret

0000000000000708 <srunner_run_teardown>:
     708:	stp	x29, x30, [sp, #-48]!
     70c:	mov	x29, sp
     710:	str	x0, [sp, #24]
     714:	str	w1, [sp, #20]
     718:	ldr	x0, [sp, #24]
     71c:	bl	0 <check_list_front>
     720:	b	77c <srunner_run_teardown+0x74>
     724:	ldr	x0, [sp, #24]
     728:	bl	0 <check_list_val>
     72c:	str	x0, [sp, #40]
     730:	mov	w0, #0x3                   	// #3
     734:	bl	0 <send_ctx_info>
     738:	ldr	w0, [sp, #20]
     73c:	cmp	w0, #0x2
     740:	b.ne	768 <srunner_run_teardown+0x60>  // b.any
     744:	adrp	x0, 0 <error_jmp_buffer>
     748:	add	x0, x0, #0x0
     74c:	bl	0 <_setjmp>
     750:	cmp	w0, #0x0
     754:	b.ne	790 <srunner_run_teardown+0x88>  // b.any
     758:	ldr	x0, [sp, #40]
     75c:	ldr	x0, [x0, #8]
     760:	blr	x0
     764:	b	774 <srunner_run_teardown+0x6c>
     768:	ldr	x0, [sp, #40]
     76c:	ldr	x0, [x0, #8]
     770:	blr	x0
     774:	ldr	x0, [sp, #24]
     778:	bl	0 <check_list_advance>
     77c:	ldr	x0, [sp, #24]
     780:	bl	0 <check_list_at_end>
     784:	cmp	w0, #0x0
     788:	b.eq	724 <srunner_run_teardown+0x1c>  // b.none
     78c:	b	794 <srunner_run_teardown+0x8c>
     790:	nop
     794:	nop
     798:	ldp	x29, x30, [sp], #48
     79c:	ret

00000000000007a0 <srunner_run_unchecked_teardown>:
     7a0:	stp	x29, x30, [sp, #-48]!
     7a4:	mov	x29, sp
     7a8:	str	x19, [sp, #16]
     7ac:	str	x0, [sp, #40]
     7b0:	str	x1, [sp, #32]
     7b4:	ldr	x0, [sp, #32]
     7b8:	ldr	x19, [x0, #40]
     7bc:	ldr	x0, [sp, #40]
     7c0:	bl	132c <srunner_fork_status>
     7c4:	mov	w1, w0
     7c8:	mov	x0, x19
     7cc:	bl	708 <srunner_run_teardown>
     7d0:	nop
     7d4:	ldr	x19, [sp, #16]
     7d8:	ldp	x29, x30, [sp], #48
     7dc:	ret

00000000000007e0 <tcase_run_checked_teardown>:
     7e0:	stp	x29, x30, [sp, #-32]!
     7e4:	mov	x29, sp
     7e8:	str	x0, [sp, #24]
     7ec:	ldr	x0, [sp, #24]
     7f0:	ldr	x0, [x0, #56]
     7f4:	mov	w1, #0x2                   	// #2
     7f8:	bl	708 <srunner_run_teardown>
     7fc:	nop
     800:	ldp	x29, x30, [sp], #32
     804:	ret

0000000000000808 <srunner_run_tcase>:
     808:	stp	x29, x30, [sp, #-32]!
     80c:	mov	x29, sp
     810:	str	x0, [sp, #24]
     814:	str	x1, [sp, #16]
     818:	ldr	x1, [sp, #16]
     81c:	ldr	x0, [sp, #24]
     820:	bl	618 <srunner_run_unchecked_setup>
     824:	cmp	w0, #0x0
     828:	b.eq	844 <srunner_run_tcase+0x3c>  // b.none
     82c:	ldr	x1, [sp, #16]
     830:	ldr	x0, [sp, #24]
     834:	bl	358 <srunner_iterate_tcase_tfuns>
     838:	ldr	x1, [sp, #16]
     83c:	ldr	x0, [sp, #24]
     840:	bl	7a0 <srunner_run_unchecked_teardown>
     844:	nop
     848:	ldp	x29, x30, [sp], #32
     84c:	ret

0000000000000850 <tcase_run_tfun_nofork>:
     850:	stp	x29, x30, [sp, #-96]!
     854:	mov	x29, sp
     858:	str	x0, [sp, #40]
     85c:	str	x1, [sp, #32]
     860:	str	x2, [sp, #24]
     864:	str	w3, [sp, #20]
     868:	str	xzr, [sp, #72]
     86c:	str	xzr, [sp, #80]
     870:	str	xzr, [sp, #56]
     874:	str	xzr, [sp, #64]
     878:	ldr	x1, [sp, #32]
     87c:	ldr	x0, [sp, #40]
     880:	bl	6ac <tcase_run_checked_setup>
     884:	str	x0, [sp, #88]
     888:	ldr	x0, [sp, #88]
     88c:	cmp	x0, #0x0
     890:	b.ne	9bc <tcase_run_tfun_nofork+0x16c>  // b.any
     894:	bl	0 <check_get_clockid>
     898:	mov	w2, w0
     89c:	add	x0, sp, #0x48
     8a0:	mov	x1, x0
     8a4:	mov	w0, w2
     8a8:	bl	0 <clock_gettime>
     8ac:	adrp	x0, 0 <error_jmp_buffer>
     8b0:	add	x0, x0, #0x0
     8b4:	bl	0 <_setjmp>
     8b8:	cmp	w0, #0x0
     8bc:	b.ne	904 <tcase_run_tfun_nofork+0xb4>  // b.any
     8c0:	ldr	x0, [sp, #24]
     8c4:	ldr	x0, [x0]
     8c8:	ldr	x3, [x0]
     8cc:	ldr	x0, [sp, #24]
     8d0:	ldr	x0, [x0]
     8d4:	ldr	x1, [x0, #16]
     8d8:	ldr	x0, [sp, #24]
     8dc:	ldr	x0, [x0]
     8e0:	ldr	w0, [x0, #24]
     8e4:	mov	w2, w0
     8e8:	mov	x0, x3
     8ec:	bl	0 <tcase_fn_start>
     8f0:	ldr	x0, [sp, #24]
     8f4:	ldr	x0, [x0]
     8f8:	ldr	x1, [x0, #8]
     8fc:	ldr	w0, [sp, #20]
     900:	blr	x1
     904:	bl	0 <check_get_clockid>
     908:	mov	w2, w0
     90c:	add	x0, sp, #0x38
     910:	mov	x1, x0
     914:	mov	w0, w2
     918:	bl	0 <clock_gettime>
     91c:	ldr	x0, [sp, #32]
     920:	bl	7e0 <tcase_run_checked_teardown>
     924:	ldr	x0, [sp, #32]
     928:	ldr	x4, [x0]
     92c:	ldr	x0, [sp, #24]
     930:	ldr	x0, [x0]
     934:	ldr	x5, [x0]
     938:	ldr	x1, [sp, #56]
     93c:	ldr	x0, [sp, #72]
     940:	sub	x0, x1, x0
     944:	mov	w1, w0
     948:	mov	w0, #0x4240                	// #16960
     94c:	movk	w0, #0xf, lsl #16
     950:	mul	w1, w1, w0
     954:	ldr	x0, [sp, #64]
     958:	mov	x2, #0xf7cf                	// #63439
     95c:	movk	x2, #0xe353, lsl #16
     960:	movk	x2, #0x9ba5, lsl #32
     964:	movk	x2, #0x20c4, lsl #48
     968:	smulh	x2, x0, x2
     96c:	asr	x2, x2, #7
     970:	asr	x0, x0, #63
     974:	sub	x0, x2, x0
     978:	add	w1, w1, w0
     97c:	ldr	x0, [sp, #80]
     980:	mov	x2, #0xf7cf                	// #63439
     984:	movk	x2, #0xe353, lsl #16
     988:	movk	x2, #0x9ba5, lsl #32
     98c:	movk	x2, #0x20c4, lsl #48
     990:	smulh	x2, x0, x2
     994:	asr	x2, x2, #7
     998:	asr	x0, x0, #63
     99c:	sub	x0, x0, x2
     9a0:	add	w0, w1, w0
     9a4:	mov	w3, w0
     9a8:	ldr	w2, [sp, #20]
     9ac:	mov	x1, x5
     9b0:	mov	x0, x4
     9b4:	bl	9c8 <receive_result_info_nofork>
     9b8:	b	9c0 <tcase_run_tfun_nofork+0x170>
     9bc:	ldr	x0, [sp, #88]
     9c0:	ldp	x29, x30, [sp], #96
     9c4:	ret

00000000000009c8 <receive_result_info_nofork>:
     9c8:	stp	x29, x30, [sp, #-64]!
     9cc:	mov	x29, sp
     9d0:	str	x0, [sp, #40]
     9d4:	str	x1, [sp, #32]
     9d8:	str	w2, [sp, #28]
     9dc:	str	w3, [sp, #24]
     9e0:	mov	w0, #0x0                   	// #0
     9e4:	bl	0 <receive_test_result>
     9e8:	str	x0, [sp, #56]
     9ec:	ldr	x0, [sp, #56]
     9f0:	cmp	x0, #0x0
     9f4:	b.ne	a10 <receive_result_info_nofork+0x48>  // b.any
     9f8:	mov	w2, #0x1b8                 	// #440
     9fc:	adrp	x0, 0 <sig_handler>
     a00:	add	x1, x0, #0x0
     a04:	adrp	x0, 0 <sig_handler>
     a08:	add	x0, x0, #0x0
     a0c:	bl	0 <eprintf>
     a10:	ldr	x0, [sp, #56]
     a14:	ldr	x1, [sp, #40]
     a18:	str	x1, [x0, #32]
     a1c:	ldr	x0, [sp, #56]
     a20:	ldr	x1, [sp, #32]
     a24:	str	x1, [x0, #40]
     a28:	ldr	x0, [sp, #56]
     a2c:	ldr	w1, [sp, #28]
     a30:	str	w1, [x0, #20]
     a34:	ldr	x0, [sp, #56]
     a38:	ldr	w1, [sp, #24]
     a3c:	str	w1, [x0, #24]
     a40:	ldr	x0, [sp, #56]
     a44:	bl	a54 <set_nofork_info>
     a48:	ldr	x0, [sp, #56]
     a4c:	ldp	x29, x30, [sp], #64
     a50:	ret

0000000000000a54 <set_nofork_info>:
     a54:	stp	x29, x30, [sp, #-32]!
     a58:	mov	x29, sp
     a5c:	str	x0, [sp, #24]
     a60:	ldr	x0, [sp, #24]
     a64:	ldr	x0, [x0, #48]
     a68:	cmp	x0, #0x0
     a6c:	b.ne	a90 <set_nofork_info+0x3c>  // b.any
     a70:	ldr	x0, [sp, #24]
     a74:	mov	w1, #0x1                   	// #1
     a78:	str	w1, [x0]
     a7c:	bl	aa8 <pass_msg>
     a80:	mov	x1, x0
     a84:	ldr	x0, [sp, #24]
     a88:	str	x1, [x0, #48]
     a8c:	b	a9c <set_nofork_info+0x48>
     a90:	ldr	x0, [sp, #24]
     a94:	mov	w1, #0x2                   	// #2
     a98:	str	w1, [x0]
     a9c:	nop
     aa0:	ldp	x29, x30, [sp], #32
     aa4:	ret

0000000000000aa8 <pass_msg>:
     aa8:	stp	x29, x30, [sp, #-16]!
     aac:	mov	x29, sp
     ab0:	adrp	x0, 0 <sig_handler>
     ab4:	add	x0, x0, #0x0
     ab8:	bl	0 <strdup>
     abc:	ldp	x29, x30, [sp], #16
     ac0:	ret

0000000000000ac4 <tcase_run_tfun_fork>:
     ac4:	stp	x29, x30, [sp, #-144]!
     ac8:	mov	x29, sp
     acc:	str	x0, [sp, #40]
     ad0:	str	x1, [sp, #32]
     ad4:	str	x2, [sp, #24]
     ad8:	str	w3, [sp, #20]
     adc:	str	wzr, [sp, #124]
     ae0:	str	xzr, [sp, #104]
     ae4:	str	xzr, [sp, #112]
     ae8:	str	xzr, [sp, #88]
     aec:	str	xzr, [sp, #96]
     af0:	bl	0 <fork>
     af4:	str	w0, [sp, #140]
     af8:	ldr	w0, [sp, #140]
     afc:	cmn	w0, #0x1
     b00:	b.ne	b1c <tcase_run_tfun_fork+0x58>  // b.any
     b04:	mov	w2, #0x1e5                 	// #485
     b08:	adrp	x0, 0 <sig_handler>
     b0c:	add	x1, x0, #0x0
     b10:	adrp	x0, 0 <sig_handler>
     b14:	add	x0, x0, #0x0
     b18:	bl	0 <eprintf>
     b1c:	ldr	w0, [sp, #140]
     b20:	cmp	w0, #0x0
     b24:	b.ne	c54 <tcase_run_tfun_fork+0x190>  // b.any
     b28:	mov	w1, #0x0                   	// #0
     b2c:	mov	w0, #0x0                   	// #0
     b30:	bl	0 <setpgid>
     b34:	bl	0 <getpgrp>
     b38:	mov	w1, w0
     b3c:	adrp	x0, 0 <sig_handler>
     b40:	add	x0, x0, #0x0
     b44:	str	w1, [x0]
     b48:	ldr	x1, [sp, #32]
     b4c:	ldr	x0, [sp, #40]
     b50:	bl	6ac <tcase_run_checked_setup>
     b54:	str	x0, [sp, #128]
     b58:	ldr	x0, [sp, #128]
     b5c:	bl	0 <free>
     b60:	bl	0 <check_get_clockid>
     b64:	mov	w2, w0
     b68:	add	x0, sp, #0x68
     b6c:	mov	x1, x0
     b70:	mov	w0, w2
     b74:	bl	0 <clock_gettime>
     b78:	ldr	x0, [sp, #24]
     b7c:	ldr	x0, [x0]
     b80:	ldr	x3, [x0]
     b84:	ldr	x0, [sp, #24]
     b88:	ldr	x0, [x0]
     b8c:	ldr	x1, [x0, #16]
     b90:	ldr	x0, [sp, #24]
     b94:	ldr	x0, [x0]
     b98:	ldr	w0, [x0, #24]
     b9c:	mov	w2, w0
     ba0:	mov	x0, x3
     ba4:	bl	0 <tcase_fn_start>
     ba8:	ldr	x0, [sp, #24]
     bac:	ldr	x0, [x0]
     bb0:	ldr	x1, [x0, #8]
     bb4:	ldr	w0, [sp, #20]
     bb8:	blr	x1
     bbc:	bl	0 <check_get_clockid>
     bc0:	mov	w2, w0
     bc4:	add	x0, sp, #0x58
     bc8:	mov	x1, x0
     bcc:	mov	w0, w2
     bd0:	bl	0 <clock_gettime>
     bd4:	ldr	x0, [sp, #32]
     bd8:	bl	7e0 <tcase_run_checked_teardown>
     bdc:	ldr	x1, [sp, #88]
     be0:	ldr	x0, [sp, #104]
     be4:	sub	x0, x1, x0
     be8:	mov	w1, w0
     bec:	mov	w0, #0x4240                	// #16960
     bf0:	movk	w0, #0xf, lsl #16
     bf4:	mul	w1, w1, w0
     bf8:	ldr	x0, [sp, #96]
     bfc:	mov	x2, #0xf7cf                	// #63439
     c00:	movk	x2, #0xe353, lsl #16
     c04:	movk	x2, #0x9ba5, lsl #32
     c08:	movk	x2, #0x20c4, lsl #48
     c0c:	smulh	x2, x0, x2
     c10:	asr	x2, x2, #7
     c14:	asr	x0, x0, #63
     c18:	sub	x0, x2, x0
     c1c:	add	w1, w1, w0
     c20:	ldr	x0, [sp, #112]
     c24:	mov	x2, #0xf7cf                	// #63439
     c28:	movk	x2, #0xe353, lsl #16
     c2c:	movk	x2, #0x9ba5, lsl #32
     c30:	movk	x2, #0x20c4, lsl #48
     c34:	smulh	x2, x0, x2
     c38:	asr	x2, x2, #7
     c3c:	asr	x0, x0, #63
     c40:	sub	x0, x0, x2
     c44:	add	w0, w1, w0
     c48:	bl	0 <send_duration_info>
     c4c:	mov	w0, #0x0                   	// #0
     c50:	bl	0 <exit>
     c54:	adrp	x0, 0 <sig_handler>
     c58:	add	x0, x0, #0x0
     c5c:	ldr	w1, [sp, #140]
     c60:	str	w1, [x0]
     c64:	adrp	x0, 0 <sig_handler>
     c68:	add	x0, x0, #0x0
     c6c:	str	wzr, [x0]
     c70:	bl	0 <check_get_clockid>
     c74:	mov	w3, w0
     c78:	add	x0, sp, #0x50
     c7c:	mov	x2, x0
     c80:	mov	x1, #0x0                   	// #0
     c84:	mov	w0, w3
     c88:	bl	0 <timer_create>
     c8c:	cmp	w0, #0x0
     c90:	b.ne	d14 <tcase_run_tfun_fork+0x250>  // b.any
     c94:	ldr	x0, [sp, #32]
     c98:	ldp	x0, x1, [x0, #8]
     c9c:	stp	x0, x1, [sp, #64]
     ca0:	str	xzr, [sp, #48]
     ca4:	str	xzr, [sp, #56]
     ca8:	ldr	x0, [sp, #80]
     cac:	add	x1, sp, #0x30
     cb0:	mov	x3, #0x0                   	// #0
     cb4:	mov	x2, x1
     cb8:	mov	w1, #0x0                   	// #0
     cbc:	bl	0 <timer_settime>
     cc0:	cmp	w0, #0x0
     cc4:	b.ne	cf0 <tcase_run_tfun_fork+0x22c>  // b.any
     cc8:	add	x0, sp, #0x7c
     ccc:	mov	w2, #0x0                   	// #0
     cd0:	mov	x1, x0
     cd4:	ldr	w0, [sp, #140]
     cd8:	bl	0 <waitpid>
     cdc:	str	w0, [sp, #136]
     ce0:	ldr	w0, [sp, #136]
     ce4:	cmn	w0, #0x1
     ce8:	b.eq	cc8 <tcase_run_tfun_fork+0x204>  // b.none
     cec:	b	d08 <tcase_run_tfun_fork+0x244>
     cf0:	mov	w2, #0x210                 	// #528
     cf4:	adrp	x0, 0 <sig_handler>
     cf8:	add	x1, x0, #0x0
     cfc:	adrp	x0, 0 <sig_handler>
     d00:	add	x0, x0, #0x0
     d04:	bl	0 <eprintf>
     d08:	ldr	x0, [sp, #80]
     d0c:	bl	0 <timer_delete>
     d10:	b	d2c <tcase_run_tfun_fork+0x268>
     d14:	mov	w2, #0x218                 	// #536
     d18:	adrp	x0, 0 <sig_handler>
     d1c:	add	x1, x0, #0x0
     d20:	adrp	x0, 0 <sig_handler>
     d24:	add	x0, x0, #0x0
     d28:	bl	0 <eprintf>
     d2c:	mov	w1, #0x9                   	// #9
     d30:	ldr	w0, [sp, #140]
     d34:	bl	0 <killpg>
     d38:	ldr	x0, [sp, #32]
     d3c:	ldr	x6, [x0]
     d40:	ldr	x0, [sp, #24]
     d44:	ldr	x0, [x0]
     d48:	ldr	x1, [x0]
     d4c:	ldr	w2, [sp, #124]
     d50:	ldr	x0, [sp, #24]
     d54:	ldr	w3, [x0, #16]
     d58:	ldr	x0, [sp, #24]
     d5c:	ldrsb	w0, [x0, #20]
     d60:	mov	w5, w0
     d64:	mov	w4, w3
     d68:	mov	w3, w2
     d6c:	ldr	w2, [sp, #20]
     d70:	mov	x0, x6
     d74:	bl	d80 <receive_result_info_fork>
     d78:	ldp	x29, x30, [sp], #144
     d7c:	ret

0000000000000d80 <receive_result_info_fork>:
     d80:	stp	x29, x30, [sp, #-64]!
     d84:	mov	x29, sp
     d88:	str	x0, [sp, #40]
     d8c:	str	x1, [sp, #32]
     d90:	str	w2, [sp, #28]
     d94:	str	w3, [sp, #24]
     d98:	str	w4, [sp, #20]
     d9c:	strb	w5, [sp, #19]
     da0:	ldr	w1, [sp, #20]
     da4:	ldr	w0, [sp, #24]
     da8:	bl	1270 <waserror>
     dac:	bl	0 <receive_test_result>
     db0:	str	x0, [sp, #56]
     db4:	ldr	x0, [sp, #56]
     db8:	cmp	x0, #0x0
     dbc:	b.ne	dd8 <receive_result_info_fork+0x58>  // b.any
     dc0:	mov	w2, #0x22c                 	// #556
     dc4:	adrp	x0, 0 <sig_handler>
     dc8:	add	x1, x0, #0x0
     dcc:	adrp	x0, 0 <sig_handler>
     dd0:	add	x0, x0, #0x0
     dd4:	bl	0 <eprintf>
     dd8:	ldr	x0, [sp, #56]
     ddc:	ldr	x1, [sp, #40]
     de0:	str	x1, [x0, #32]
     de4:	ldr	x0, [sp, #56]
     de8:	ldr	x1, [sp, #32]
     dec:	str	x1, [x0, #40]
     df0:	ldr	x0, [sp, #56]
     df4:	ldr	w1, [sp, #28]
     df8:	str	w1, [x0, #20]
     dfc:	ldrb	w3, [sp, #19]
     e00:	ldr	w2, [sp, #20]
     e04:	ldr	w1, [sp, #24]
     e08:	ldr	x0, [sp, #56]
     e0c:	bl	e1c <set_fork_info>
     e10:	ldr	x0, [sp, #56]
     e14:	ldp	x29, x30, [sp], #64
     e18:	ret

0000000000000e1c <set_fork_info>:
     e1c:	stp	x29, x30, [sp, #-64]!
     e20:	mov	x29, sp
     e24:	str	x0, [sp, #40]
     e28:	str	w1, [sp, #36]
     e2c:	str	w2, [sp, #32]
     e30:	strb	w3, [sp, #31]
     e34:	ldr	w0, [sp, #36]
     e38:	and	w0, w0, #0xff
     e3c:	and	w0, w0, #0x7f
     e40:	and	w0, w0, #0xff
     e44:	add	w0, w0, #0x1
     e48:	and	w0, w0, #0xff
     e4c:	sxtb	w0, w0
     e50:	asr	w0, w0, #1
     e54:	sxtb	w0, w0
     e58:	cmp	w0, #0x0
     e5c:	cset	w0, gt
     e60:	and	w0, w0, #0xff
     e64:	str	w0, [sp, #60]
     e68:	ldr	w0, [sp, #36]
     e6c:	and	w0, w0, #0x7f
     e70:	cmp	w0, #0x0
     e74:	cset	w0, eq  // eq = none
     e78:	and	w0, w0, #0xff
     e7c:	str	w0, [sp, #56]
     e80:	ldr	w0, [sp, #36]
     e84:	asr	w0, w0, #8
     e88:	strb	w0, [sp, #55]
     e8c:	ldr	w0, [sp, #36]
     e90:	and	w0, w0, #0x7f
     e94:	str	w0, [sp, #48]
     e98:	ldr	w0, [sp, #60]
     e9c:	cmp	w0, #0x0
     ea0:	b.eq	fd8 <set_fork_info+0x1bc>  // b.none
     ea4:	ldr	w1, [sp, #32]
     ea8:	ldr	w0, [sp, #48]
     eac:	cmp	w1, w0
     eb0:	b.ne	f48 <set_fork_info+0x12c>  // b.any
     eb4:	adrp	x0, 0 <sig_handler>
     eb8:	add	x0, x0, #0x0
     ebc:	ldr	w0, [x0]
     ec0:	cmp	w0, #0x0
     ec4:	b.eq	f0c <set_fork_info+0xf0>  // b.none
     ec8:	ldr	x0, [sp, #40]
     ecc:	mov	w1, #0x3                   	// #3
     ed0:	str	w1, [x0]
     ed4:	ldr	x0, [sp, #40]
     ed8:	ldr	x0, [x0, #48]
     edc:	cmp	x0, #0x0
     ee0:	b.eq	ef0 <set_fork_info+0xd4>  // b.none
     ee4:	ldr	x0, [sp, #40]
     ee8:	ldr	x0, [x0, #48]
     eec:	bl	0 <free>
     ef0:	ldr	w1, [sp, #32]
     ef4:	ldr	w0, [sp, #48]
     ef8:	bl	1184 <signal_error_msg>
     efc:	mov	x1, x0
     f00:	ldr	x0, [sp, #40]
     f04:	str	x1, [x0, #48]
     f08:	b	1104 <set_fork_info+0x2e8>
     f0c:	ldr	x0, [sp, #40]
     f10:	mov	w1, #0x1                   	// #1
     f14:	str	w1, [x0]
     f18:	ldr	x0, [sp, #40]
     f1c:	ldr	x0, [x0, #48]
     f20:	cmp	x0, #0x0
     f24:	b.eq	f34 <set_fork_info+0x118>  // b.none
     f28:	ldr	x0, [sp, #40]
     f2c:	ldr	x0, [x0, #48]
     f30:	bl	0 <free>
     f34:	bl	aa8 <pass_msg>
     f38:	mov	x1, x0
     f3c:	ldr	x0, [sp, #40]
     f40:	str	x1, [x0, #48]
     f44:	b	1104 <set_fork_info+0x2e8>
     f48:	ldr	w0, [sp, #32]
     f4c:	cmp	w0, #0x0
     f50:	b.eq	f98 <set_fork_info+0x17c>  // b.none
     f54:	ldr	x0, [sp, #40]
     f58:	mov	w1, #0x3                   	// #3
     f5c:	str	w1, [x0]
     f60:	ldr	x0, [sp, #40]
     f64:	ldr	x0, [x0, #48]
     f68:	cmp	x0, #0x0
     f6c:	b.eq	f7c <set_fork_info+0x160>  // b.none
     f70:	ldr	x0, [sp, #40]
     f74:	ldr	x0, [x0, #48]
     f78:	bl	0 <free>
     f7c:	ldr	w1, [sp, #32]
     f80:	ldr	w0, [sp, #48]
     f84:	bl	1184 <signal_error_msg>
     f88:	mov	x1, x0
     f8c:	ldr	x0, [sp, #40]
     f90:	str	x1, [x0, #48]
     f94:	b	1104 <set_fork_info+0x2e8>
     f98:	ldr	x0, [sp, #40]
     f9c:	mov	w1, #0x3                   	// #3
     fa0:	str	w1, [x0]
     fa4:	ldr	x0, [sp, #40]
     fa8:	ldr	x0, [x0, #48]
     fac:	cmp	x0, #0x0
     fb0:	b.eq	fc0 <set_fork_info+0x1a4>  // b.none
     fb4:	ldr	x0, [sp, #40]
     fb8:	ldr	x0, [x0, #48]
     fbc:	bl	0 <free>
     fc0:	ldr	w0, [sp, #48]
     fc4:	bl	1110 <signal_msg>
     fc8:	mov	x1, x0
     fcc:	ldr	x0, [sp, #40]
     fd0:	str	x1, [x0, #48]
     fd4:	b	1104 <set_fork_info+0x2e8>
     fd8:	ldr	w0, [sp, #32]
     fdc:	cmp	w0, #0x0
     fe0:	b.ne	109c <set_fork_info+0x280>  // b.any
     fe4:	ldr	w0, [sp, #56]
     fe8:	cmp	w0, #0x0
     fec:	b.eq	103c <set_fork_info+0x220>  // b.none
     ff0:	ldrsb	w1, [sp, #55]
     ff4:	ldrsb	w0, [sp, #31]
     ff8:	cmp	w1, w0
     ffc:	b.ne	103c <set_fork_info+0x220>  // b.any
    1000:	ldr	x0, [sp, #40]
    1004:	mov	w1, #0x1                   	// #1
    1008:	str	w1, [x0]
    100c:	ldr	x0, [sp, #40]
    1010:	ldr	x0, [x0, #48]
    1014:	cmp	x0, #0x0
    1018:	b.eq	1028 <set_fork_info+0x20c>  // b.none
    101c:	ldr	x0, [sp, #40]
    1020:	ldr	x0, [x0, #48]
    1024:	bl	0 <free>
    1028:	bl	aa8 <pass_msg>
    102c:	mov	x1, x0
    1030:	ldr	x0, [sp, #40]
    1034:	str	x1, [x0, #48]
    1038:	b	1104 <set_fork_info+0x2e8>
    103c:	ldr	w0, [sp, #56]
    1040:	cmp	w0, #0x0
    1044:	b.eq	1104 <set_fork_info+0x2e8>  // b.none
    1048:	ldrsb	w1, [sp, #55]
    104c:	ldrsb	w0, [sp, #31]
    1050:	cmp	w1, w0
    1054:	b.eq	1104 <set_fork_info+0x2e8>  // b.none
    1058:	ldr	x0, [sp, #40]
    105c:	ldr	x0, [x0, #48]
    1060:	cmp	x0, #0x0
    1064:	b.ne	108c <set_fork_info+0x270>  // b.any
    1068:	ldr	x0, [sp, #40]
    106c:	mov	w1, #0x3                   	// #3
    1070:	str	w1, [x0]
    1074:	ldrsb	w0, [sp, #55]
    1078:	bl	1234 <exit_msg>
    107c:	mov	x1, x0
    1080:	ldr	x0, [sp, #40]
    1084:	str	x1, [x0, #48]
    1088:	b	1104 <set_fork_info+0x2e8>
    108c:	ldr	x0, [sp, #40]
    1090:	mov	w1, #0x2                   	// #2
    1094:	str	w1, [x0]
    1098:	b	1104 <set_fork_info+0x2e8>
    109c:	ldr	w0, [sp, #56]
    10a0:	cmp	w0, #0x0
    10a4:	b.eq	1104 <set_fork_info+0x2e8>  // b.none
    10a8:	ldr	x0, [sp, #40]
    10ac:	ldr	x0, [x0, #48]
    10b0:	cmp	x0, #0x0
    10b4:	b.eq	10c4 <set_fork_info+0x2a8>  // b.none
    10b8:	ldr	x0, [sp, #40]
    10bc:	ldr	x0, [x0, #48]
    10c0:	bl	0 <free>
    10c4:	ldrsb	w0, [sp, #55]
    10c8:	bl	1234 <exit_msg>
    10cc:	mov	x1, x0
    10d0:	ldr	x0, [sp, #40]
    10d4:	str	x1, [x0, #48]
    10d8:	ldrsb	w1, [sp, #55]
    10dc:	ldrsb	w0, [sp, #31]
    10e0:	cmp	w1, w0
    10e4:	b.ne	10f8 <set_fork_info+0x2dc>  // b.any
    10e8:	ldr	x0, [sp, #40]
    10ec:	mov	w1, #0x2                   	// #2
    10f0:	str	w1, [x0]
    10f4:	b	1104 <set_fork_info+0x2e8>
    10f8:	ldr	x0, [sp, #40]
    10fc:	mov	w1, #0x2                   	// #2
    1100:	str	w1, [x0]
    1104:	nop
    1108:	ldp	x29, x30, [sp], #64
    110c:	ret

0000000000001110 <signal_msg>:
    1110:	stp	x29, x30, [sp, #-48]!
    1114:	mov	x29, sp
    1118:	str	w0, [sp, #28]
    111c:	mov	x0, #0x64                  	// #100
    1120:	bl	0 <emalloc>
    1124:	str	x0, [sp, #40]
    1128:	adrp	x0, 0 <sig_handler>
    112c:	add	x0, x0, #0x0
    1130:	ldr	w0, [x0]
    1134:	cmp	w0, #0x0
    1138:	b.eq	1154 <signal_msg+0x44>  // b.none
    113c:	adrp	x0, 0 <sig_handler>
    1140:	add	x2, x0, #0x0
    1144:	mov	x1, #0x64                  	// #100
    1148:	ldr	x0, [sp, #40]
    114c:	bl	0 <snprintf>
    1150:	b	1178 <signal_msg+0x68>
    1154:	ldr	w0, [sp, #28]
    1158:	bl	0 <strsignal>
    115c:	mov	x4, x0
    1160:	ldr	w3, [sp, #28]
    1164:	adrp	x0, 0 <sig_handler>
    1168:	add	x2, x0, #0x0
    116c:	mov	x1, #0x64                  	// #100
    1170:	ldr	x0, [sp, #40]
    1174:	bl	0 <snprintf>
    1178:	ldr	x0, [sp, #40]
    117c:	ldp	x29, x30, [sp], #48
    1180:	ret

0000000000001184 <signal_error_msg>:
    1184:	stp	x29, x30, [sp, #-64]!
    1188:	mov	x29, sp
    118c:	str	w0, [sp, #28]
    1190:	str	w1, [sp, #24]
    1194:	mov	x0, #0x64                  	// #100
    1198:	bl	0 <emalloc>
    119c:	str	x0, [sp, #56]
    11a0:	ldr	w0, [sp, #28]
    11a4:	bl	0 <strsignal>
    11a8:	bl	0 <strdup>
    11ac:	str	x0, [sp, #48]
    11b0:	ldr	w0, [sp, #24]
    11b4:	bl	0 <strsignal>
    11b8:	bl	0 <strdup>
    11bc:	str	x0, [sp, #40]
    11c0:	adrp	x0, 0 <sig_handler>
    11c4:	add	x0, x0, #0x0
    11c8:	ldr	w0, [x0]
    11cc:	cmp	w0, #0x0
    11d0:	b.eq	11f4 <signal_error_msg+0x70>  // b.none
    11d4:	ldr	x4, [sp, #40]
    11d8:	ldr	w3, [sp, #24]
    11dc:	adrp	x0, 0 <sig_handler>
    11e0:	add	x2, x0, #0x0
    11e4:	mov	x1, #0x64                  	// #100
    11e8:	ldr	x0, [sp, #56]
    11ec:	bl	0 <snprintf>
    11f0:	b	1218 <signal_error_msg+0x94>
    11f4:	ldr	x6, [sp, #40]
    11f8:	ldr	w5, [sp, #24]
    11fc:	ldr	x4, [sp, #48]
    1200:	ldr	w3, [sp, #28]
    1204:	adrp	x0, 0 <sig_handler>
    1208:	add	x2, x0, #0x0
    120c:	mov	x1, #0x64                  	// #100
    1210:	ldr	x0, [sp, #56]
    1214:	bl	0 <snprintf>
    1218:	ldr	x0, [sp, #48]
    121c:	bl	0 <free>
    1220:	ldr	x0, [sp, #40]
    1224:	bl	0 <free>
    1228:	ldr	x0, [sp, #56]
    122c:	ldp	x29, x30, [sp], #64
    1230:	ret

0000000000001234 <exit_msg>:
    1234:	stp	x29, x30, [sp, #-48]!
    1238:	mov	x29, sp
    123c:	str	w0, [sp, #28]
    1240:	mov	x0, #0x64                  	// #100
    1244:	bl	0 <emalloc>
    1248:	str	x0, [sp, #40]
    124c:	ldr	w3, [sp, #28]
    1250:	adrp	x0, 0 <sig_handler>
    1254:	add	x2, x0, #0x0
    1258:	mov	x1, #0x64                  	// #100
    125c:	ldr	x0, [sp, #40]
    1260:	bl	0 <snprintf>
    1264:	ldr	x0, [sp, #40]
    1268:	ldp	x29, x30, [sp], #48
    126c:	ret

0000000000001270 <waserror>:
    1270:	sub	sp, sp, #0x20
    1274:	str	w0, [sp, #12]
    1278:	str	w1, [sp, #8]
    127c:	ldr	w0, [sp, #12]
    1280:	and	w0, w0, #0xff
    1284:	and	w0, w0, #0x7f
    1288:	and	w0, w0, #0xff
    128c:	add	w0, w0, #0x1
    1290:	and	w0, w0, #0xff
    1294:	sxtb	w0, w0
    1298:	asr	w0, w0, #1
    129c:	sxtb	w0, w0
    12a0:	cmp	w0, #0x0
    12a4:	cset	w0, gt
    12a8:	and	w0, w0, #0xff
    12ac:	str	w0, [sp, #28]
    12b0:	ldr	w0, [sp, #12]
    12b4:	and	w0, w0, #0x7f
    12b8:	cmp	w0, #0x0
    12bc:	cset	w0, eq  // eq = none
    12c0:	and	w0, w0, #0xff
    12c4:	str	w0, [sp, #24]
    12c8:	ldr	w0, [sp, #12]
    12cc:	asr	w0, w0, #8
    12d0:	and	w0, w0, #0xff
    12d4:	str	w0, [sp, #20]
    12d8:	ldr	w0, [sp, #12]
    12dc:	and	w0, w0, #0x7f
    12e0:	str	w0, [sp, #16]
    12e4:	ldr	w0, [sp, #28]
    12e8:	cmp	w0, #0x0
    12ec:	b.eq	1300 <waserror+0x90>  // b.none
    12f0:	ldr	w1, [sp, #16]
    12f4:	ldr	w0, [sp, #8]
    12f8:	cmp	w1, w0
    12fc:	b.ne	1318 <waserror+0xa8>  // b.any
    1300:	ldr	w0, [sp, #24]
    1304:	cmp	w0, #0x0
    1308:	b.eq	1320 <waserror+0xb0>  // b.none
    130c:	ldr	w0, [sp, #20]
    1310:	cmp	w0, #0x0
    1314:	b.eq	1320 <waserror+0xb0>  // b.none
    1318:	mov	w0, #0x1                   	// #1
    131c:	b	1324 <waserror+0xb4>
    1320:	mov	w0, #0x0                   	// #0
    1324:	add	sp, sp, #0x20
    1328:	ret

000000000000132c <srunner_fork_status>:
    132c:	stp	x29, x30, [sp, #-48]!
    1330:	mov	x29, sp
    1334:	str	x0, [sp, #24]
    1338:	ldr	x0, [sp, #24]
    133c:	ldr	w0, [x0, #56]
    1340:	cmp	w0, #0x0
    1344:	b.ne	1394 <srunner_fork_status+0x68>  // b.any
    1348:	adrp	x0, 0 <sig_handler>
    134c:	add	x0, x0, #0x0
    1350:	bl	0 <getenv>
    1354:	str	x0, [sp, #40]
    1358:	ldr	x0, [sp, #40]
    135c:	cmp	x0, #0x0
    1360:	b.ne	136c <srunner_fork_status+0x40>  // b.any
    1364:	mov	w0, #0x1                   	// #1
    1368:	b	139c <srunner_fork_status+0x70>
    136c:	adrp	x0, 0 <sig_handler>
    1370:	add	x1, x0, #0x0
    1374:	ldr	x0, [sp, #40]
    1378:	bl	0 <strcmp>
    137c:	cmp	w0, #0x0
    1380:	b.ne	138c <srunner_fork_status+0x60>  // b.any
    1384:	mov	w0, #0x2                   	// #2
    1388:	b	139c <srunner_fork_status+0x70>
    138c:	mov	w0, #0x1                   	// #1
    1390:	b	139c <srunner_fork_status+0x70>
    1394:	ldr	x0, [sp, #24]
    1398:	ldr	w0, [x0, #56]
    139c:	ldp	x29, x30, [sp], #48
    13a0:	ret

00000000000013a4 <srunner_set_fork_status>:
    13a4:	sub	sp, sp, #0x10
    13a8:	str	x0, [sp, #8]
    13ac:	str	w1, [sp, #4]
    13b0:	ldr	x0, [sp, #8]
    13b4:	ldr	w1, [sp, #4]
    13b8:	str	w1, [x0, #56]
    13bc:	nop
    13c0:	add	sp, sp, #0x10
    13c4:	ret

00000000000013c8 <srunner_run_all>:
    13c8:	stp	x29, x30, [sp, #-32]!
    13cc:	mov	x29, sp
    13d0:	str	x0, [sp, #24]
    13d4:	str	w1, [sp, #20]
    13d8:	ldr	w3, [sp, #20]
    13dc:	mov	x2, #0x0                   	// #0
    13e0:	mov	x1, #0x0                   	// #0
    13e4:	ldr	x0, [sp, #24]
    13e8:	bl	15fc <srunner_run>
    13ec:	nop
    13f0:	ldp	x29, x30, [sp], #32
    13f4:	ret

00000000000013f8 <srunner_run_tagged>:
    13f8:	stp	x29, x30, [sp, #-64]!
    13fc:	mov	x29, sp
    1400:	str	x0, [sp, #56]
    1404:	str	x1, [sp, #48]
    1408:	str	x2, [sp, #40]
    140c:	str	x3, [sp, #32]
    1410:	str	x4, [sp, #24]
    1414:	str	w5, [sp, #20]
    1418:	ldr	x0, [sp, #40]
    141c:	cmp	x0, #0x0
    1420:	b.ne	1434 <srunner_run_tagged+0x3c>  // b.any
    1424:	adrp	x0, 0 <sig_handler>
    1428:	add	x0, x0, #0x0
    142c:	bl	0 <getenv>
    1430:	str	x0, [sp, #40]
    1434:	ldr	x0, [sp, #48]
    1438:	cmp	x0, #0x0
    143c:	b.ne	1450 <srunner_run_tagged+0x58>  // b.any
    1440:	adrp	x0, 0 <sig_handler>
    1444:	add	x0, x0, #0x0
    1448:	bl	0 <getenv>
    144c:	str	x0, [sp, #48]
    1450:	ldr	x0, [sp, #32]
    1454:	cmp	x0, #0x0
    1458:	b.ne	146c <srunner_run_tagged+0x74>  // b.any
    145c:	adrp	x0, 0 <sig_handler>
    1460:	add	x0, x0, #0x0
    1464:	bl	0 <getenv>
    1468:	str	x0, [sp, #32]
    146c:	ldr	x0, [sp, #24]
    1470:	cmp	x0, #0x0
    1474:	b.ne	1488 <srunner_run_tagged+0x90>  // b.any
    1478:	adrp	x0, 0 <sig_handler>
    147c:	add	x0, x0, #0x0
    1480:	bl	0 <getenv>
    1484:	str	x0, [sp, #24]
    1488:	ldr	x0, [sp, #56]
    148c:	cmp	x0, #0x0
    1490:	b.eq	15f0 <srunner_run_tagged+0x1f8>  // b.none
    1494:	ldr	w0, [sp, #20]
    1498:	cmp	w0, #0x4
    149c:	b.ls	14bc <srunner_run_tagged+0xc4>  // b.plast
    14a0:	ldr	w3, [sp, #20]
    14a4:	mov	w2, #0x31e                 	// #798
    14a8:	adrp	x0, 0 <sig_handler>
    14ac:	add	x1, x0, #0x0
    14b0:	adrp	x0, 0 <sig_handler>
    14b4:	add	x0, x0, #0x0
    14b8:	bl	0 <eprintf>
    14bc:	mov	x2, #0x98                  	// #152
    14c0:	mov	w1, #0x0                   	// #0
    14c4:	adrp	x0, 0 <sig_handler>
    14c8:	add	x0, x0, #0x0
    14cc:	bl	0 <memset>
    14d0:	adrp	x0, 0 <sig_handler>
    14d4:	add	x0, x0, #0x0
    14d8:	adrp	x1, 0 <sig_handler>
    14dc:	add	x1, x1, #0x0
    14e0:	str	x1, [x0]
    14e4:	adrp	x0, 0 <sig_handler>
    14e8:	add	x2, x0, #0x0
    14ec:	adrp	x0, 0 <sig_handler>
    14f0:	add	x1, x0, #0x0
    14f4:	mov	w0, #0xe                   	// #14
    14f8:	bl	0 <sigaction>
    14fc:	mov	x2, #0x98                  	// #152
    1500:	mov	w1, #0x0                   	// #0
    1504:	adrp	x0, 0 <sig_handler>
    1508:	add	x0, x0, #0x0
    150c:	bl	0 <memset>
    1510:	adrp	x0, 0 <sig_handler>
    1514:	add	x0, x0, #0x0
    1518:	adrp	x1, 0 <sig_handler>
    151c:	add	x1, x1, #0x0
    1520:	str	x1, [x0]
    1524:	adrp	x0, 0 <sig_handler>
    1528:	add	x2, x0, #0x0
    152c:	adrp	x0, 0 <sig_handler>
    1530:	add	x1, x0, #0x0
    1534:	mov	w0, #0x2                   	// #2
    1538:	bl	0 <sigaction>
    153c:	mov	x2, #0x98                  	// #152
    1540:	mov	w1, #0x0                   	// #0
    1544:	adrp	x0, 0 <sig_handler>
    1548:	add	x0, x0, #0x0
    154c:	bl	0 <memset>
    1550:	adrp	x0, 0 <sig_handler>
    1554:	add	x0, x0, #0x0
    1558:	adrp	x1, 0 <sig_handler>
    155c:	add	x1, x1, #0x0
    1560:	str	x1, [x0]
    1564:	adrp	x0, 0 <sig_handler>
    1568:	add	x2, x0, #0x0
    156c:	adrp	x0, 0 <sig_handler>
    1570:	add	x1, x0, #0x0
    1574:	mov	w0, #0xf                   	// #15
    1578:	bl	0 <sigaction>
    157c:	ldr	w1, [sp, #20]
    1580:	ldr	x0, [sp, #56]
    1584:	bl	100 <srunner_run_init>
    1588:	ldr	w5, [sp, #20]
    158c:	ldr	x4, [sp, #24]
    1590:	ldr	x3, [sp, #32]
    1594:	ldr	x2, [sp, #40]
    1598:	ldr	x1, [sp, #48]
    159c:	ldr	x0, [sp, #56]
    15a0:	bl	178 <srunner_iterate_suites>
    15a4:	ldr	w1, [sp, #20]
    15a8:	ldr	x0, [sp, #56]
    15ac:	bl	140 <srunner_run_end>
    15b0:	mov	x2, #0x0                   	// #0
    15b4:	adrp	x0, 0 <sig_handler>
    15b8:	add	x1, x0, #0x0
    15bc:	mov	w0, #0xe                   	// #14
    15c0:	bl	0 <sigaction>
    15c4:	mov	x2, #0x0                   	// #0
    15c8:	adrp	x0, 0 <sig_handler>
    15cc:	add	x1, x0, #0x0
    15d0:	mov	w0, #0x2                   	// #2
    15d4:	bl	0 <sigaction>
    15d8:	mov	x2, #0x0                   	// #0
    15dc:	adrp	x0, 0 <sig_handler>
    15e0:	add	x1, x0, #0x0
    15e4:	mov	w0, #0xf                   	// #15
    15e8:	bl	0 <sigaction>
    15ec:	b	15f4 <srunner_run_tagged+0x1fc>
    15f0:	nop
    15f4:	ldp	x29, x30, [sp], #64
    15f8:	ret

00000000000015fc <srunner_run>:
    15fc:	stp	x29, x30, [sp, #-48]!
    1600:	mov	x29, sp
    1604:	str	x0, [sp, #40]
    1608:	str	x1, [sp, #32]
    160c:	str	x2, [sp, #24]
    1610:	str	w3, [sp, #20]
    1614:	ldr	w5, [sp, #20]
    1618:	mov	x4, #0x0                   	// #0
    161c:	mov	x3, #0x0                   	// #0
    1620:	ldr	x2, [sp, #24]
    1624:	ldr	x1, [sp, #32]
    1628:	ldr	x0, [sp, #40]
    162c:	bl	13f8 <srunner_run_tagged>
    1630:	nop
    1634:	ldp	x29, x30, [sp], #48
    1638:	ret

000000000000163c <check_fork>:
    163c:	stp	x29, x30, [sp, #-32]!
    1640:	mov	x29, sp
    1644:	bl	0 <fork>
    1648:	str	w0, [sp, #28]
    164c:	ldr	w0, [sp, #28]
    1650:	cmp	w0, #0x0
    1654:	b.lt	1670 <check_fork+0x34>  // b.tstop
    1658:	adrp	x0, 0 <sig_handler>
    165c:	add	x0, x0, #0x0
    1660:	ldr	w0, [x0]
    1664:	mov	w1, w0
    1668:	ldr	w0, [sp, #28]
    166c:	bl	0 <setpgid>
    1670:	ldr	w0, [sp, #28]
    1674:	ldp	x29, x30, [sp], #32
    1678:	ret

000000000000167c <check_waitpid_and_exit>:
    167c:	stp	x29, x30, [sp, #-48]!
    1680:	mov	x29, sp
    1684:	str	w0, [sp, #28]
    1688:	ldr	w0, [sp, #28]
    168c:	cmp	w0, #0x0
    1690:	b.le	16d4 <check_waitpid_and_exit+0x58>
    1694:	add	x0, sp, #0x28
    1698:	mov	w2, #0x0                   	// #0
    169c:	mov	x1, x0
    16a0:	ldr	w0, [sp, #28]
    16a4:	bl	0 <waitpid>
    16a8:	str	w0, [sp, #44]
    16ac:	ldr	w0, [sp, #44]
    16b0:	cmn	w0, #0x1
    16b4:	b.eq	1694 <check_waitpid_and_exit+0x18>  // b.none
    16b8:	ldr	w0, [sp, #40]
    16bc:	mov	w1, #0x0                   	// #0
    16c0:	bl	1270 <waserror>
    16c4:	cmp	w0, #0x0
    16c8:	b.eq	16d4 <check_waitpid_and_exit+0x58>  // b.none
    16cc:	mov	w0, #0x1                   	// #1
    16d0:	bl	0 <exit>
    16d4:	mov	w0, #0x0                   	// #0
    16d8:	bl	0 <exit>

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x50
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	stp	x19, x20, [sp, #32]
  10:	str	x0, [sp, #56]
  14:	ldr	x0, [sp, #56]
  18:	ldr	w0, [x0]
  1c:	cmp	w0, #0x3
  20:	b.ne	30 <tr_str+0x30>  // b.any
  24:	adrp	x0, 0 <tr_str>
  28:	add	x0, x0, #0x0
  2c:	b	38 <tr_str+0x38>
  30:	adrp	x0, 0 <tr_str>
  34:	add	x0, x0, #0x0
  38:	str	x0, [sp, #72]
  3c:	ldr	x0, [sp, #56]
  40:	ldr	x19, [x0, #8]
  44:	ldr	x0, [sp, #56]
  48:	ldr	w20, [x0, #16]
  4c:	ldr	x0, [sp, #56]
  50:	bl	2b8 <tr_type_str>
  54:	mov	x8, x0
  58:	ldr	x0, [sp, #56]
  5c:	ldr	x1, [x0, #32]
  60:	ldr	x0, [sp, #56]
  64:	ldr	x2, [x0, #40]
  68:	ldr	x0, [sp, #56]
  6c:	ldr	w3, [x0, #20]
  70:	ldr	x0, [sp, #56]
  74:	ldr	x0, [x0, #48]
  78:	str	x0, [sp]
  7c:	ldr	x7, [sp, #72]
  80:	mov	w6, w3
  84:	mov	x5, x2
  88:	mov	x4, x1
  8c:	mov	x3, x8
  90:	mov	w2, w20
  94:	mov	x1, x19
  98:	adrp	x0, 0 <tr_str>
  9c:	add	x0, x0, #0x0
  a0:	bl	194 <ck_strdup_printf>
  a4:	str	x0, [sp, #64]
  a8:	ldr	x0, [sp, #64]
  ac:	ldp	x19, x20, [sp, #32]
  b0:	ldp	x29, x30, [sp, #16]
  b4:	add	sp, sp, #0x50
  b8:	ret

00000000000000bc <tr_short_str>:
  bc:	stp	x29, x30, [sp, #-48]!
  c0:	mov	x29, sp
  c4:	str	x0, [sp, #24]
  c8:	ldr	x0, [sp, #24]
  cc:	ldr	w0, [x0]
  d0:	cmp	w0, #0x3
  d4:	b.ne	e4 <tr_short_str+0x28>  // b.any
  d8:	adrp	x0, 0 <tr_str>
  dc:	add	x0, x0, #0x0
  e0:	b	ec <tr_short_str+0x30>
  e4:	adrp	x0, 0 <tr_str>
  e8:	add	x0, x0, #0x0
  ec:	str	x0, [sp, #40]
  f0:	ldr	x0, [sp, #24]
  f4:	ldr	x1, [x0, #8]
  f8:	ldr	x0, [sp, #24]
  fc:	ldr	w2, [x0, #16]
 100:	ldr	x0, [sp, #24]
 104:	ldr	x0, [x0, #48]
 108:	mov	x4, x0
 10c:	ldr	x3, [sp, #40]
 110:	adrp	x0, 0 <tr_str>
 114:	add	x0, x0, #0x0
 118:	bl	194 <ck_strdup_printf>
 11c:	str	x0, [sp, #32]
 120:	ldr	x0, [sp, #32]
 124:	ldp	x29, x30, [sp], #48
 128:	ret

000000000000012c <sr_stat_str>:
 12c:	stp	x29, x30, [sp, #-48]!
 130:	mov	x29, sp
 134:	str	x0, [sp, #24]
 138:	ldr	x0, [sp, #24]
 13c:	ldr	x0, [x0, #8]
 140:	str	x0, [sp, #40]
 144:	ldr	x0, [sp, #40]
 148:	bl	33c <percent_passed>
 14c:	mov	w5, w0
 150:	ldr	x0, [sp, #40]
 154:	ldr	w1, [x0]
 158:	ldr	x0, [sp, #40]
 15c:	ldr	w2, [x0, #4]
 160:	ldr	x0, [sp, #40]
 164:	ldr	w0, [x0, #8]
 168:	mov	w4, w0
 16c:	mov	w3, w2
 170:	mov	w2, w1
 174:	mov	w1, w5
 178:	adrp	x0, 0 <tr_str>
 17c:	add	x0, x0, #0x0
 180:	bl	194 <ck_strdup_printf>
 184:	str	x0, [sp, #32]
 188:	ldr	x0, [sp, #32]
 18c:	ldp	x29, x30, [sp], #48
 190:	ret

0000000000000194 <ck_strdup_printf>:
 194:	stp	x29, x30, [sp, #-320]!
 198:	mov	x29, sp
 19c:	str	x0, [sp, #56]
 1a0:	str	x1, [sp, #264]
 1a4:	str	x2, [sp, #272]
 1a8:	str	x3, [sp, #280]
 1ac:	str	x4, [sp, #288]
 1b0:	str	x5, [sp, #296]
 1b4:	str	x6, [sp, #304]
 1b8:	str	x7, [sp, #312]
 1bc:	str	q0, [sp, #128]
 1c0:	str	q1, [sp, #144]
 1c4:	str	q2, [sp, #160]
 1c8:	str	q3, [sp, #176]
 1cc:	str	q4, [sp, #192]
 1d0:	str	q5, [sp, #208]
 1d4:	str	q6, [sp, #224]
 1d8:	str	q7, [sp, #240]
 1dc:	mov	x0, #0x64                  	// #100
 1e0:	str	x0, [sp, #120]
 1e4:	ldr	x0, [sp, #120]
 1e8:	bl	0 <emalloc>
 1ec:	str	x0, [sp, #112]
 1f0:	add	x0, sp, #0x140
 1f4:	str	x0, [sp, #72]
 1f8:	add	x0, sp, #0x140
 1fc:	str	x0, [sp, #80]
 200:	add	x0, sp, #0x100
 204:	str	x0, [sp, #88]
 208:	mov	w0, #0xffffffc8            	// #-56
 20c:	str	w0, [sp, #96]
 210:	mov	w0, #0xffffff80            	// #-128
 214:	str	w0, [sp, #100]
 218:	add	x2, sp, #0x10
 21c:	add	x3, sp, #0x48
 220:	ldp	x0, x1, [x3]
 224:	stp	x0, x1, [x2]
 228:	ldp	x0, x1, [x3, #16]
 22c:	stp	x0, x1, [x2, #16]
 230:	add	x0, sp, #0x10
 234:	mov	x3, x0
 238:	ldr	x2, [sp, #56]
 23c:	ldr	x1, [sp, #120]
 240:	ldr	x0, [sp, #112]
 244:	bl	0 <vsnprintf>
 248:	str	w0, [sp, #108]
 24c:	ldr	w0, [sp, #108]
 250:	cmp	w0, #0x0
 254:	b.lt	274 <ck_strdup_printf+0xe0>  // b.tstop
 258:	ldr	x0, [sp, #120]
 25c:	mov	w1, w0
 260:	ldr	w0, [sp, #108]
 264:	cmp	w0, w1
 268:	b.ge	274 <ck_strdup_printf+0xe0>  // b.tcont
 26c:	ldr	x0, [sp, #112]
 270:	b	2b0 <ck_strdup_printf+0x11c>
 274:	ldr	w0, [sp, #108]
 278:	cmp	w0, #0x0
 27c:	b.lt	290 <ck_strdup_printf+0xfc>  // b.tstop
 280:	ldrsw	x0, [sp, #108]
 284:	add	x0, x0, #0x1
 288:	str	x0, [sp, #120]
 28c:	b	29c <ck_strdup_printf+0x108>
 290:	ldr	x0, [sp, #120]
 294:	lsl	x0, x0, #1
 298:	str	x0, [sp, #120]
 29c:	ldr	x1, [sp, #120]
 2a0:	ldr	x0, [sp, #112]
 2a4:	bl	0 <erealloc>
 2a8:	str	x0, [sp, #112]
 2ac:	b	1f0 <ck_strdup_printf+0x5c>
 2b0:	ldp	x29, x30, [sp], #320
 2b4:	ret

00000000000002b8 <tr_type_str>:
 2b8:	sub	sp, sp, #0x10
 2bc:	str	x0, [sp, #8]
 2c0:	ldr	x0, [sp, #8]
 2c4:	ldr	w0, [x0, #4]
 2c8:	cmp	w0, #0x2
 2cc:	b.ne	32c <tr_type_str+0x74>  // b.any
 2d0:	ldr	x0, [sp, #8]
 2d4:	ldr	w0, [x0]
 2d8:	cmp	w0, #0x1
 2dc:	b.ne	2ec <tr_type_str+0x34>  // b.any
 2e0:	adrp	x0, 0 <tr_str>
 2e4:	add	x0, x0, #0x0
 2e8:	b	334 <tr_type_str+0x7c>
 2ec:	ldr	x0, [sp, #8]
 2f0:	ldr	w0, [x0]
 2f4:	cmp	w0, #0x2
 2f8:	b.ne	308 <tr_type_str+0x50>  // b.any
 2fc:	adrp	x0, 0 <tr_str>
 300:	add	x0, x0, #0x0
 304:	b	334 <tr_type_str+0x7c>
 308:	ldr	x0, [sp, #8]
 30c:	ldr	w0, [x0]
 310:	cmp	w0, #0x3
 314:	b.ne	324 <tr_type_str+0x6c>  // b.any
 318:	adrp	x0, 0 <tr_str>
 31c:	add	x0, x0, #0x0
 320:	b	334 <tr_type_str+0x7c>
 324:	mov	x0, #0x0                   	// #0
 328:	b	334 <tr_type_str+0x7c>
 32c:	adrp	x0, 0 <tr_str>
 330:	add	x0, x0, #0x0
 334:	add	sp, sp, #0x10
 338:	ret

000000000000033c <percent_passed>:
 33c:	sub	sp, sp, #0x10
 340:	str	x0, [sp, #8]
 344:	ldr	x0, [sp, #8]
 348:	ldr	w0, [x0, #4]
 34c:	cmp	w0, #0x0
 350:	b.ne	36c <percent_passed+0x30>  // b.any
 354:	ldr	x0, [sp, #8]
 358:	ldr	w0, [x0, #8]
 35c:	cmp	w0, #0x0
 360:	b.ne	36c <percent_passed+0x30>  // b.any
 364:	movi	v0.2s, #0x64
 368:	b	3c8 <percent_passed+0x8c>
 36c:	ldr	x0, [sp, #8]
 370:	ldr	w0, [x0]
 374:	cmp	w0, #0x0
 378:	b.ne	384 <percent_passed+0x48>  // b.any
 37c:	fmov	s0, wzr
 380:	b	3c8 <percent_passed+0x8c>
 384:	ldr	x0, [sp, #8]
 388:	ldr	w1, [x0]
 38c:	ldr	x0, [sp, #8]
 390:	ldr	w2, [x0, #4]
 394:	ldr	x0, [sp, #8]
 398:	ldr	w0, [x0, #8]
 39c:	add	w0, w2, w0
 3a0:	sub	w0, w1, w0
 3a4:	scvtf	s1, w0
 3a8:	ldr	x0, [sp, #8]
 3ac:	ldr	s0, [x0]
 3b0:	scvtf	s0, s0
 3b4:	fdiv	s0, s1, s0
 3b8:	mov	w0, #0x42c80000            	// #1120403456
 3bc:	fmov	s1, w0
 3c0:	fmul	s0, s0, s1
 3c4:	fcvtzs	s0, s0
 3c8:	fmov	w0, s0
 3cc:	add	sp, sp, #0x10
 3d0:	ret

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <ck_do_nothing>
   c:	add	x3, x0, #0x0
  10:	mov	w2, #0x1a                  	// #26
  14:	adrp	x0, 0 <ck_do_nothing>
  18:	add	x1, x0, #0x0
  1c:	adrp	x0, 0 <ck_do_nothing>
  20:	add	x0, x0, #0x0
  24:	bl	0 <__assert_fail>
