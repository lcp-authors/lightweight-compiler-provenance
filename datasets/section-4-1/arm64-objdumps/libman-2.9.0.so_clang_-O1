
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libman-2.9.0.so_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

000000000000a7a0 <.init>:
    a7a0:	stp	x29, x30, [sp, #-16]!
    a7a4:	mov	x29, sp
    a7a8:	bl	b880 <xgetcwd@plt+0x10>
    a7ac:	ldp	x29, x30, [sp], #16
    a7b0:	ret

Disassembly of section .plt:

000000000000a7c0 <base_len@plt-0x20>:
    a7c0:	stp	x16, x30, [sp, #-16]!
    a7c4:	adrp	x16, 3f000 <vasnprintf@@Base+0x14ec4>
    a7c8:	ldr	x17, [x16, #4088]
    a7cc:	add	x16, x16, #0xff8
    a7d0:	br	x17
    a7d4:	nop
    a7d8:	nop
    a7dc:	nop

000000000000a7e0 <base_len@plt>:
    a7e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a7e4:	ldr	x17, [x16]
    a7e8:	add	x16, x16, #0x0
    a7ec:	br	x17

000000000000a7f0 <mbrtowc@plt>:
    a7f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a7f4:	ldr	x17, [x16, #8]
    a7f8:	add	x16, x16, #0x8
    a7fc:	br	x17

000000000000a800 <memcpy@plt>:
    a800:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a804:	ldr	x17, [x16, #16]
    a808:	add	x16, x16, #0x10
    a80c:	br	x17

000000000000a810 <memmove@plt>:
    a810:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a814:	ldr	x17, [x16, #24]
    a818:	add	x16, x16, #0x18
    a81c:	br	x17

000000000000a820 <pthread_rwlockattr_init@plt>:
    a820:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a824:	ldr	x17, [x16, #32]
    a828:	add	x16, x16, #0x20
    a82c:	br	x17

000000000000a830 <gl_list_nx_create_empty@plt>:
    a830:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a834:	ldr	x17, [x16, #40]
    a838:	add	x16, x16, #0x28
    a83c:	br	x17

000000000000a840 <_exit@plt>:
    a840:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a844:	ldr	x17, [x16, #48]
    a848:	add	x16, x16, #0x30
    a84c:	br	x17

000000000000a850 <getcwd@plt>:
    a850:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a854:	ldr	x17, [x16, #56]
    a858:	add	x16, x16, #0x38
    a85c:	br	x17

000000000000a860 <same_nameat@plt>:
    a860:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a864:	ldr	x17, [x16, #64]
    a868:	add	x16, x16, #0x40
    a86c:	br	x17

000000000000a870 <fwrite_unlocked@plt>:
    a870:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a874:	ldr	x17, [x16, #72]
    a878:	add	x16, x16, #0x48
    a87c:	br	x17

000000000000a880 <get_canonical_charset_name@plt>:
    a880:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a884:	ldr	x17, [x16, #80]
    a888:	add	x16, x16, #0x50
    a88c:	br	x17

000000000000a890 <strlen@plt>:
    a890:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a894:	ldr	x17, [x16, #88]
    a898:	add	x16, x16, #0x58
    a89c:	br	x17

000000000000a8a0 <gl_list_nx_add_last@plt>:
    a8a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8a4:	ldr	x17, [x16, #96]
    a8a8:	add	x16, x16, #0x60
    a8ac:	br	x17

000000000000a8b0 <exit@plt>:
    a8b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8b4:	ldr	x17, [x16, #104]
    a8b8:	add	x16, x16, #0x68
    a8bc:	br	x17

000000000000a8c0 <error@plt>:
    a8c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8c4:	ldr	x17, [x16, #112]
    a8c8:	add	x16, x16, #0x70
    a8cc:	br	x17

000000000000a8d0 <pthread_mutexattr_settype@plt>:
    a8d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8d4:	ldr	x17, [x16, #120]
    a8d8:	add	x16, x16, #0x78
    a8dc:	br	x17

000000000000a8e0 <fchdir@plt>:
    a8e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8e4:	ldr	x17, [x16, #128]
    a8e8:	add	x16, x16, #0x80
    a8ec:	br	x17

000000000000a8f0 <perror@plt>:
    a8f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a8f4:	ldr	x17, [x16, #136]
    a8f8:	add	x16, x16, #0x88
    a8fc:	br	x17

000000000000a900 <flockfile@plt>:
    a900:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a904:	ldr	x17, [x16, #144]
    a908:	add	x16, x16, #0x90
    a90c:	br	x17

000000000000a910 <getegid@plt>:
    a910:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a914:	ldr	x17, [x16, #152]
    a918:	add	x16, x16, #0x98
    a91c:	br	x17

000000000000a920 <wctype@plt>:
    a920:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a924:	ldr	x17, [x16, #160]
    a928:	add	x16, x16, #0xa0
    a92c:	br	x17

000000000000a930 <remove_directory@plt>:
    a930:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a934:	ldr	x17, [x16, #168]
    a938:	add	x16, x16, #0xa8
    a93c:	br	x17

000000000000a940 <sigprocmask@plt>:
    a940:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a944:	ldr	x17, [x16, #176]
    a948:	add	x16, x16, #0xb0
    a94c:	br	x17

000000000000a950 <rpl_mbrtowc@plt>:
    a950:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a954:	ldr	x17, [x16, #184]
    a958:	add	x16, x16, #0xb8
    a95c:	br	x17

000000000000a960 <geteuid@plt>:
    a960:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a964:	ldr	x17, [x16, #192]
    a968:	add	x16, x16, #0xc0
    a96c:	br	x17

000000000000a970 <get_roff_encoding@plt>:
    a970:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a974:	ldr	x17, [x16, #200]
    a978:	add	x16, x16, #0xc8
    a97c:	br	x17

000000000000a980 <pthread_rwlock_init@plt>:
    a980:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a984:	ldr	x17, [x16, #208]
    a988:	add	x16, x16, #0xd0
    a98c:	br	x17

000000000000a990 <getresuid@plt>:
    a990:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a994:	ldr	x17, [x16, #216]
    a998:	add	x16, x16, #0xd8
    a99c:	br	x17

000000000000a9a0 <pthread_rwlockattr_setkind_np@plt>:
    a9a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9a4:	ldr	x17, [x16, #224]
    a9a8:	add	x16, x16, #0xe0
    a9ac:	br	x17

000000000000a9b0 <chdir_long@plt>:
    a9b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9b4:	ldr	x17, [x16, #232]
    a9b8:	add	x16, x16, #0xe8
    a9bc:	br	x17

000000000000a9c0 <hash_insert@plt>:
    a9c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9c4:	ldr	x17, [x16, #240]
    a9c8:	add	x16, x16, #0xf0
    a9cc:	br	x17

000000000000a9d0 <setenv@plt>:
    a9d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9d4:	ldr	x17, [x16, #248]
    a9d8:	add	x16, x16, #0xf8
    a9dc:	br	x17

000000000000a9e0 <readlink@plt>:
    a9e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9e4:	ldr	x17, [x16, #256]
    a9e8:	add	x16, x16, #0x100
    a9ec:	br	x17

000000000000a9f0 <gl_sortedlist_add@plt>:
    a9f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    a9f4:	ldr	x17, [x16, #264]
    a9f8:	add	x16, x16, #0x108
    a9fc:	br	x17

000000000000aa00 <__cxa_finalize@plt>:
    aa00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa04:	ldr	x17, [x16, #272]
    aa08:	add	x16, x16, #0x110
    aa0c:	br	x17

000000000000aa10 <sprintf@plt>:
    aa10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa14:	ldr	x17, [x16, #280]
    aa18:	add	x16, x16, #0x118
    aa1c:	br	x17

000000000000aa20 <getuid@plt>:
    aa20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa24:	ldr	x17, [x16, #288]
    aa28:	add	x16, x16, #0x120
    aa2c:	br	x17

000000000000aa30 <pipe@plt>:
    aa30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa34:	ldr	x17, [x16, #296]
    aa38:	add	x16, x16, #0x128
    aa3c:	br	x17

000000000000aa40 <opendir@plt>:
    aa40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa44:	ldr	x17, [x16, #304]
    aa48:	add	x16, x16, #0x130
    aa4c:	br	x17

000000000000aa50 <__cxa_atexit@plt>:
    aa50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa54:	ldr	x17, [x16, #312]
    aa58:	add	x16, x16, #0x138
    aa5c:	br	x17

000000000000aa60 <timespec_cmp@plt>:
    aa60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa64:	ldr	x17, [x16, #320]
    aa68:	add	x16, x16, #0x140
    aa6c:	br	x17

000000000000aa70 <fputc@plt>:
    aa70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa74:	ldr	x17, [x16, #328]
    aa78:	add	x16, x16, #0x148
    aa7c:	br	x17

000000000000aa80 <clock_gettime@plt>:
    aa80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa84:	ldr	x17, [x16, #336]
    aa88:	add	x16, x16, #0x150
    aa8c:	br	x17

000000000000aa90 <qsort@plt>:
    aa90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aa94:	ldr	x17, [x16, #344]
    aa98:	add	x16, x16, #0x158
    aa9c:	br	x17

000000000000aaa0 <kill@plt>:
    aaa0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aaa4:	ldr	x17, [x16, #352]
    aaa8:	add	x16, x16, #0x160
    aaac:	br	x17

000000000000aab0 <argp_fmtstream_set_lmargin@plt>:
    aab0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aab4:	ldr	x17, [x16, #360]
    aab8:	add	x16, x16, #0x168
    aabc:	br	x17

000000000000aac0 <_argp_fmtstream_update@plt>:
    aac0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aac4:	ldr	x17, [x16, #368]
    aac8:	add	x16, x16, #0x170
    aacc:	br	x17

000000000000aad0 <argp_fmtstream_putc@plt>:
    aad0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aad4:	ldr	x17, [x16, #376]
    aad8:	add	x16, x16, #0x178
    aadc:	br	x17

000000000000aae0 <__ctype_tolower_loc@plt>:
    aae0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aae4:	ldr	x17, [x16, #384]
    aae8:	add	x16, x16, #0x180
    aaec:	br	x17

000000000000aaf0 <snprintf@plt>:
    aaf0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aaf4:	ldr	x17, [x16, #392]
    aaf8:	add	x16, x16, #0x188
    aafc:	br	x17

000000000000ab00 <mdir_name@plt>:
    ab00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab04:	ldr	x17, [x16, #400]
    ab08:	add	x16, x16, #0x190
    ab0c:	br	x17

000000000000ab10 <triple_free@plt>:
    ab10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab14:	ldr	x17, [x16, #408]
    ab18:	add	x16, x16, #0x198
    ab1c:	br	x17

000000000000ab20 <putc_unlocked@plt>:
    ab20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab24:	ldr	x17, [x16, #416]
    ab28:	add	x16, x16, #0x1a0
    ab2c:	br	x17

000000000000ab30 <debug@plt>:
    ab30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab34:	ldr	x17, [x16, #424]
    ab38:	add	x16, x16, #0x1a8
    ab3c:	br	x17

000000000000ab40 <hash_free@plt>:
    ab40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab44:	ldr	x17, [x16, #432]
    ab48:	add	x16, x16, #0x1b0
    ab4c:	br	x17

000000000000ab50 <fclose@plt>:
    ab50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab54:	ldr	x17, [x16, #440]
    ab58:	add	x16, x16, #0x1b8
    ab5c:	br	x17

000000000000ab60 <atoi@plt>:
    ab60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab64:	ldr	x17, [x16, #448]
    ab68:	add	x16, x16, #0x1c0
    ab6c:	br	x17

000000000000ab70 <rpl_regcomp@plt>:
    ab70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab74:	ldr	x17, [x16, #456]
    ab78:	add	x16, x16, #0x1c8
    ab7c:	br	x17

000000000000ab80 <getpid@plt>:
    ab80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab84:	ldr	x17, [x16, #464]
    ab88:	add	x16, x16, #0x1d0
    ab8c:	br	x17

000000000000ab90 <nl_langinfo@plt>:
    ab90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ab94:	ldr	x17, [x16, #472]
    ab98:	add	x16, x16, #0x1d8
    ab9c:	br	x17

000000000000aba0 <fopen@plt>:
    aba0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aba4:	ldr	x17, [x16, #480]
    aba8:	add	x16, x16, #0x1e0
    abac:	br	x17

000000000000abb0 <iswctype@plt>:
    abb0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    abb4:	ldr	x17, [x16, #488]
    abb8:	add	x16, x16, #0x1e8
    abbc:	br	x17

000000000000abc0 <malloc@plt>:
    abc0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    abc4:	ldr	x17, [x16, #496]
    abc8:	add	x16, x16, #0x1f0
    abcc:	br	x17

000000000000abd0 <gl_list_node_nx_set_value@plt>:
    abd0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    abd4:	ldr	x17, [x16, #504]
    abd8:	add	x16, x16, #0x1f8
    abdc:	br	x17

000000000000abe0 <record_file@plt>:
    abe0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    abe4:	ldr	x17, [x16, #512]
    abe8:	add	x16, x16, #0x200
    abec:	br	x17

000000000000abf0 <toupper@plt>:
    abf0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    abf4:	ldr	x17, [x16, #520]
    abf8:	add	x16, x16, #0x208
    abfc:	br	x17

000000000000ac00 <gl_list_iterator@plt>:
    ac00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac04:	ldr	x17, [x16, #528]
    ac08:	add	x16, x16, #0x210
    ac0c:	br	x17

000000000000ac10 <futimesat@plt>:
    ac10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac14:	ldr	x17, [x16, #536]
    ac18:	add	x16, x16, #0x218
    ac1c:	br	x17

000000000000ac20 <gl_list_nx_add_after@plt>:
    ac20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac24:	ldr	x17, [x16, #544]
    ac28:	add	x16, x16, #0x220
    ac2c:	br	x17

000000000000ac30 <funlockfile@plt>:
    ac30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac34:	ldr	x17, [x16, #552]
    ac38:	add	x16, x16, #0x228
    ac3c:	br	x17

000000000000ac40 <stdopen@plt>:
    ac40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac44:	ldr	x17, [x16, #560]
    ac48:	add	x16, x16, #0x230
    ac4c:	br	x17

000000000000ac50 <open@plt>:
    ac50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac54:	ldr	x17, [x16, #568]
    ac58:	add	x16, x16, #0x238
    ac5c:	br	x17

000000000000ac60 <argp_failure@plt>:
    ac60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac64:	ldr	x17, [x16, #576]
    ac68:	add	x16, x16, #0x240
    ac6c:	br	x17

000000000000ac70 <xrealloc@plt>:
    ac70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac74:	ldr	x17, [x16, #584]
    ac78:	add	x16, x16, #0x248
    ac7c:	br	x17

000000000000ac80 <gl_map_getremove@plt>:
    ac80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac84:	ldr	x17, [x16, #592]
    ac88:	add	x16, x16, #0x250
    ac8c:	br	x17

000000000000ac90 <dir_name@plt>:
    ac90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ac94:	ldr	x17, [x16, #600]
    ac98:	add	x16, x16, #0x258
    ac9c:	br	x17

000000000000aca0 <argp_fmtstream_puts@plt>:
    aca0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aca4:	ldr	x17, [x16, #608]
    aca8:	add	x16, x16, #0x260
    acac:	br	x17

000000000000acb0 <idpriv_temp_drop@plt>:
    acb0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    acb4:	ldr	x17, [x16, #616]
    acb8:	add	x16, x16, #0x268
    acbc:	br	x17

000000000000acc0 <sigemptyset@plt>:
    acc0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    acc4:	ldr	x17, [x16, #624]
    acc8:	add	x16, x16, #0x270
    accc:	br	x17

000000000000acd0 <get_groff_preconv@plt>:
    acd0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    acd4:	ldr	x17, [x16, #632]
    acd8:	add	x16, x16, #0x278
    acdc:	br	x17

000000000000ace0 <futimens@plt>:
    ace0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ace4:	ldr	x17, [x16, #640]
    ace8:	add	x16, x16, #0x280
    acec:	br	x17

000000000000acf0 <strncmp@plt>:
    acf0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    acf4:	ldr	x17, [x16, #648]
    acf8:	add	x16, x16, #0x288
    acfc:	br	x17

000000000000ad00 <bindtextdomain@plt>:
    ad00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad04:	ldr	x17, [x16, #656]
    ad08:	add	x16, x16, #0x290
    ad0c:	br	x17

000000000000ad10 <xsum@plt>:
    ad10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad14:	ldr	x17, [x16, #664]
    ad18:	add	x16, x16, #0x298
    ad1c:	br	x17

000000000000ad20 <gl_list_nx_set_at@plt>:
    ad20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad24:	ldr	x17, [x16, #672]
    ad28:	add	x16, x16, #0x2a0
    ad2c:	br	x17

000000000000ad30 <fstatfs@plt>:
    ad30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad34:	ldr	x17, [x16, #680]
    ad38:	add	x16, x16, #0x2a8
    ad3c:	br	x17

000000000000ad40 <memset@plt>:
    ad40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad44:	ldr	x17, [x16, #688]
    ad48:	add	x16, x16, #0x2b0
    ad4c:	br	x17

000000000000ad50 <gettimeofday@plt>:
    ad50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad54:	ldr	x17, [x16, #696]
    ad58:	add	x16, x16, #0x2b8
    ad5c:	br	x17

000000000000ad60 <gl_map_nx_put@plt>:
    ad60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad64:	ldr	x17, [x16, #704]
    ad68:	add	x16, x16, #0x2c0
    ad6c:	br	x17

000000000000ad70 <xmalloc@plt>:
    ad70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad74:	ldr	x17, [x16, #712]
    ad78:	add	x16, x16, #0x2c8
    ad7c:	br	x17

000000000000ad80 <getpwnam@plt>:
    ad80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad84:	ldr	x17, [x16, #720]
    ad88:	add	x16, x16, #0x2d0
    ad8c:	br	x17

000000000000ad90 <lstatat@plt>:
    ad90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ad94:	ldr	x17, [x16, #728]
    ad98:	add	x16, x16, #0x2d8
    ad9c:	br	x17

000000000000ada0 <xstrdup@plt>:
    ada0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ada4:	ldr	x17, [x16, #736]
    ada8:	add	x16, x16, #0x2e0
    adac:	br	x17

000000000000adb0 <sleep@plt>:
    adb0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    adb4:	ldr	x17, [x16, #744]
    adb8:	add	x16, x16, #0x2e8
    adbc:	br	x17

000000000000adc0 <same_name@plt>:
    adc0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    adc4:	ldr	x17, [x16, #752]
    adc8:	add	x16, x16, #0x2f0
    adcc:	br	x17

000000000000add0 <strerror_r@plt>:
    add0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    add4:	ldr	x17, [x16, #760]
    add8:	add	x16, x16, #0x2f8
    addc:	br	x17

000000000000ade0 <gl_set_create_empty@plt>:
    ade0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ade4:	ldr	x17, [x16, #768]
    ade8:	add	x16, x16, #0x300
    adec:	br	x17

000000000000adf0 <gl_list_iterator_next@plt>:
    adf0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    adf4:	ldr	x17, [x16, #776]
    adf8:	add	x16, x16, #0x308
    adfc:	br	x17

000000000000ae00 <gl_list_nx_add_first@plt>:
    ae00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae04:	ldr	x17, [x16, #784]
    ae08:	add	x16, x16, #0x310
    ae0c:	br	x17

000000000000ae10 <calloc@plt>:
    ae10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae14:	ldr	x17, [x16, #792]
    ae18:	add	x16, x16, #0x318
    ae1c:	br	x17

000000000000ae20 <last_component@plt>:
    ae20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae24:	ldr	x17, [x16, #800]
    ae28:	add	x16, x16, #0x320
    ae2c:	br	x17

000000000000ae30 <xnrealloc@plt>:
    ae30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae34:	ldr	x17, [x16, #808]
    ae38:	add	x16, x16, #0x328
    ae3c:	br	x17

000000000000ae40 <hard_locale@plt>:
    ae40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae44:	ldr	x17, [x16, #816]
    ae48:	add	x16, x16, #0x330
    ae4c:	br	x17

000000000000ae50 <bcmp@plt>:
    ae50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae54:	ldr	x17, [x16, #824]
    ae58:	add	x16, x16, #0x338
    ae5c:	br	x17

000000000000ae60 <hash_insert_if_absent@plt>:
    ae60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae64:	ldr	x17, [x16, #832]
    ae68:	add	x16, x16, #0x340
    ae6c:	br	x17

000000000000ae70 <hash_get_n_buckets_used@plt>:
    ae70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae74:	ldr	x17, [x16, #840]
    ae78:	add	x16, x16, #0x348
    ae7c:	br	x17

000000000000ae80 <strcasecmp@plt>:
    ae80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae84:	ldr	x17, [x16, #848]
    ae88:	add	x16, x16, #0x350
    ae8c:	br	x17

000000000000ae90 <readdir@plt>:
    ae90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    ae94:	ldr	x17, [x16, #856]
    ae98:	add	x16, x16, #0x358
    ae9c:	br	x17

000000000000aea0 <realloc@plt>:
    aea0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aea4:	ldr	x17, [x16, #864]
    aea8:	add	x16, x16, #0x360
    aeac:	br	x17

000000000000aeb0 <__ctype_toupper_loc@plt>:
    aeb0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aeb4:	ldr	x17, [x16, #872]
    aeb8:	add	x16, x16, #0x368
    aebc:	br	x17

000000000000aec0 <hash_initialize@plt>:
    aec0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aec4:	ldr	x17, [x16, #880]
    aec8:	add	x16, x16, #0x370
    aecc:	br	x17

000000000000aed0 <try_tempname@plt>:
    aed0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aed4:	ldr	x17, [x16, #888]
    aed8:	add	x16, x16, #0x378
    aedc:	br	x17

000000000000aee0 <get_stat_atime_ns@plt>:
    aee0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aee4:	ldr	x17, [x16, #896]
    aee8:	add	x16, x16, #0x380
    aeec:	br	x17

000000000000aef0 <closedir@plt>:
    aef0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aef4:	ldr	x17, [x16, #904]
    aef8:	add	x16, x16, #0x388
    aefc:	br	x17

000000000000af00 <strerror@plt>:
    af00:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af04:	ldr	x17, [x16, #912]
    af08:	add	x16, x16, #0x390
    af0c:	br	x17

000000000000af10 <get_stat_mtime@plt>:
    af10:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af14:	ldr	x17, [x16, #920]
    af18:	add	x16, x16, #0x398
    af1c:	br	x17

000000000000af20 <pthread_mutex_init@plt>:
    af20:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af24:	ldr	x17, [x16, #928]
    af28:	add	x16, x16, #0x3a0
    af2c:	br	x17

000000000000af30 <close@plt>:
    af30:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af34:	ldr	x17, [x16, #936]
    af38:	add	x16, x16, #0x3a8
    af3c:	br	x17

000000000000af40 <gl_list_nx_create@plt>:
    af40:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af44:	ldr	x17, [x16, #944]
    af48:	add	x16, x16, #0x3b0
    af4c:	br	x17

000000000000af50 <sigaction@plt>:
    af50:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af54:	ldr	x17, [x16, #952]
    af58:	add	x16, x16, #0x3b8
    af5c:	br	x17

000000000000af60 <hash_lookup@plt>:
    af60:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af64:	ldr	x17, [x16, #960]
    af68:	add	x16, x16, #0x3c0
    af6c:	br	x17

000000000000af70 <strrchr@plt>:
    af70:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af74:	ldr	x17, [x16, #968]
    af78:	add	x16, x16, #0x3c8
    af7c:	br	x17

000000000000af80 <gl_map_get@plt>:
    af80:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af84:	ldr	x17, [x16, #976]
    af88:	add	x16, x16, #0x3d0
    af8c:	br	x17

000000000000af90 <xalloc_die@plt>:
    af90:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    af94:	ldr	x17, [x16, #984]
    af98:	add	x16, x16, #0x3d8
    af9c:	br	x17

000000000000afa0 <memmem@plt>:
    afa0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    afa4:	ldr	x17, [x16, #992]
    afa8:	add	x16, x16, #0x3e0
    afac:	br	x17

000000000000afb0 <__gmon_start__@plt>:
    afb0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    afb4:	ldr	x17, [x16, #1000]
    afb8:	add	x16, x16, #0x3e8
    afbc:	br	x17

000000000000afc0 <get_stat_atime@plt>:
    afc0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    afc4:	ldr	x17, [x16, #1008]
    afc8:	add	x16, x16, #0x3f0
    afcc:	br	x17

000000000000afd0 <drop_effective_privs@plt>:
    afd0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    afd4:	ldr	x17, [x16, #1016]
    afd8:	add	x16, x16, #0x3f8
    afdc:	br	x17

000000000000afe0 <argp_fmtstream_point@plt>:
    afe0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    afe4:	ldr	x17, [x16, #1024]
    afe8:	add	x16, x16, #0x400
    afec:	br	x17

000000000000aff0 <btowc@plt>:
    aff0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    aff4:	ldr	x17, [x16, #1032]
    aff8:	add	x16, x16, #0x408
    affc:	br	x17

000000000000b000 <mkdtemp@plt>:
    b000:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b004:	ldr	x17, [x16, #1040]
    b008:	add	x16, x16, #0x410
    b00c:	br	x17

000000000000b010 <argp_fmtstream_printf@plt>:
    b010:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b014:	ldr	x17, [x16, #1048]
    b018:	add	x16, x16, #0x418
    b01c:	br	x17

000000000000b020 <abort@plt>:
    b020:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b024:	ldr	x17, [x16, #1056]
    b028:	add	x16, x16, #0x420
    b02c:	br	x17

000000000000b030 <x2nrealloc@plt>:
    b030:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b034:	ldr	x17, [x16, #1064]
    b038:	add	x16, x16, #0x428
    b03c:	br	x17

000000000000b040 <_option_is_end@plt>:
    b040:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b044:	ldr	x17, [x16, #1072]
    b048:	add	x16, x16, #0x430
    b04c:	br	x17

000000000000b050 <_getopt_long_only_r@plt>:
    b050:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b054:	ldr	x17, [x16, #1080]
    b058:	add	x16, x16, #0x438
    b05c:	br	x17

000000000000b060 <hash_rehash@plt>:
    b060:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b064:	ldr	x17, [x16, #1088]
    b068:	add	x16, x16, #0x440
    b06c:	br	x17

000000000000b070 <mbsinit@plt>:
    b070:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b074:	ldr	x17, [x16, #1096]
    b078:	add	x16, x16, #0x448
    b07c:	br	x17

000000000000b080 <access@plt>:
    b080:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b084:	ldr	x17, [x16, #1104]
    b088:	add	x16, x16, #0x450
    b08c:	br	x17

000000000000b090 <fdutimens@plt>:
    b090:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b094:	ldr	x17, [x16, #1112]
    b098:	add	x16, x16, #0x458
    b09c:	br	x17

000000000000b0a0 <gl_map_nx_getput@plt>:
    b0a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0a4:	ldr	x17, [x16, #1120]
    b0a8:	add	x16, x16, #0x460
    b0ac:	br	x17

000000000000b0b0 <gl_map_free@plt>:
    b0b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0b4:	ldr	x17, [x16, #1128]
    b0b8:	add	x16, x16, #0x468
    b0bc:	br	x17

000000000000b0c0 <hash_pjw_bare@plt>:
    b0c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0c4:	ldr	x17, [x16, #1136]
    b0c8:	add	x16, x16, #0x470
    b0cc:	br	x17

000000000000b0d0 <textdomain@plt>:
    b0d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0d4:	ldr	x17, [x16, #1144]
    b0d8:	add	x16, x16, #0x478
    b0dc:	br	x17

000000000000b0e0 <gl_map_nx_create_empty@plt>:
    b0e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0e4:	ldr	x17, [x16, #1152]
    b0e8:	add	x16, x16, #0x480
    b0ec:	br	x17

000000000000b0f0 <strsep@plt>:
    b0f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b0f4:	ldr	x17, [x16, #1160]
    b0f8:	add	x16, x16, #0x488
    b0fc:	br	x17

000000000000b100 <gl_list_iterator_free@plt>:
    b100:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b104:	ldr	x17, [x16, #1168]
    b108:	add	x16, x16, #0x490
    b10c:	br	x17

000000000000b110 <xmax@plt>:
    b110:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b114:	ldr	x17, [x16, #1176]
    b118:	add	x16, x16, #0x498
    b11c:	br	x17

000000000000b120 <strcmp@plt>:
    b120:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b124:	ldr	x17, [x16, #1184]
    b128:	add	x16, x16, #0x4a0
    b12c:	br	x17

000000000000b130 <_getopt_long_r@plt>:
    b130:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b134:	ldr	x17, [x16, #1192]
    b138:	add	x16, x16, #0x4a8
    b13c:	br	x17

000000000000b140 <__ctype_b_loc@plt>:
    b140:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b144:	ldr	x17, [x16, #1200]
    b148:	add	x16, x16, #0x4b0
    b14c:	br	x17

000000000000b150 <rmdir@plt>:
    b150:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b154:	ldr	x17, [x16, #1208]
    b158:	add	x16, x16, #0x4b8
    b15c:	br	x17

000000000000b160 <seen_file@plt>:
    b160:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b164:	ldr	x17, [x16, #1216]
    b168:	add	x16, x16, #0x4c0
    b16c:	br	x17

000000000000b170 <hash_get_max_bucket_length@plt>:
    b170:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b174:	ldr	x17, [x16, #1224]
    b178:	add	x16, x16, #0x4c8
    b17c:	br	x17

000000000000b180 <gl_map_put@plt>:
    b180:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b184:	ldr	x17, [x16, #1232]
    b188:	add	x16, x16, #0x4d0
    b18c:	br	x17

000000000000b190 <getline@plt>:
    b190:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b194:	ldr	x17, [x16, #1240]
    b198:	add	x16, x16, #0x4d8
    b19c:	br	x17

000000000000b1a0 <dir_len@plt>:
    b1a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1a4:	ldr	x17, [x16, #1248]
    b1a8:	add	x16, x16, #0x4e0
    b1ac:	br	x17

000000000000b1b0 <chdir@plt>:
    b1b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1b4:	ldr	x17, [x16, #1256]
    b1b8:	add	x16, x16, #0x4e8
    b1bc:	br	x17

000000000000b1c0 <dup_safer@plt>:
    b1c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1c4:	ldr	x17, [x16, #1264]
    b1c8:	add	x16, x16, #0x4f0
    b1cc:	br	x17

000000000000b1d0 <free@plt>:
    b1d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1d4:	ldr	x17, [x16, #1272]
    b1d8:	add	x16, x16, #0x4f8
    b1dc:	br	x17

000000000000b1e0 <renameat2@plt>:
    b1e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1e4:	ldr	x17, [x16, #1280]
    b1e8:	add	x16, x16, #0x500
    b1ec:	br	x17

000000000000b1f0 <argp_make_fmtstream@plt>:
    b1f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b1f4:	ldr	x17, [x16, #1288]
    b1f8:	add	x16, x16, #0x508
    b1fc:	br	x17

000000000000b200 <__ctype_get_mb_cur_max@plt>:
    b200:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b204:	ldr	x17, [x16, #1296]
    b208:	add	x16, x16, #0x510
    b20c:	br	x17

000000000000b210 <getgid@plt>:
    b210:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b214:	ldr	x17, [x16, #1304]
    b218:	add	x16, x16, #0x518
    b21c:	br	x17

000000000000b220 <renameat@plt>:
    b220:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b224:	ldr	x17, [x16, #1312]
    b228:	add	x16, x16, #0x520
    b22c:	br	x17

000000000000b230 <xasprintf@plt>:
    b230:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b234:	ldr	x17, [x16, #1320]
    b238:	add	x16, x16, #0x528
    b23c:	br	x17

000000000000b240 <vasnprintf@plt>:
    b240:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b244:	ldr	x17, [x16, #1328]
    b248:	add	x16, x16, #0x530
    b24c:	br	x17

000000000000b250 <gl_sortedlist_nx_add@plt>:
    b250:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b254:	ldr	x17, [x16, #1336]
    b258:	add	x16, x16, #0x538
    b25c:	br	x17

000000000000b260 <printf_fetchargs@plt>:
    b260:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b264:	ldr	x17, [x16, #1344]
    b268:	add	x16, x16, #0x540
    b26c:	br	x17

000000000000b270 <hash_get_n_buckets@plt>:
    b270:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b274:	ldr	x17, [x16, #1352]
    b278:	add	x16, x16, #0x548
    b27c:	br	x17

000000000000b280 <nanosleep@plt>:
    b280:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b284:	ldr	x17, [x16, #1360]
    b288:	add	x16, x16, #0x550
    b28c:	br	x17

000000000000b290 <vasprintf@plt>:
    b290:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b294:	ldr	x17, [x16, #1368]
    b298:	add	x16, x16, #0x558
    b29c:	br	x17

000000000000b2a0 <rpl_getopt_internal@plt>:
    b2a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2a4:	ldr	x17, [x16, #1376]
    b2a8:	add	x16, x16, #0x560
    b2ac:	br	x17

000000000000b2b0 <gl_list_nx_add_at@plt>:
    b2b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2b4:	ldr	x17, [x16, #1384]
    b2b8:	add	x16, x16, #0x568
    b2bc:	br	x17

000000000000b2c0 <strndup@plt>:
    b2c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2c4:	ldr	x17, [x16, #1392]
    b2c8:	add	x16, x16, #0x570
    b2cc:	br	x17

000000000000b2d0 <strspn@plt>:
    b2d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2d4:	ldr	x17, [x16, #1400]
    b2d8:	add	x16, x16, #0x578
    b2dc:	br	x17

000000000000b2e0 <gl_list_nx_add_before@plt>:
    b2e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2e4:	ldr	x17, [x16, #1408]
    b2e8:	add	x16, x16, #0x580
    b2ec:	br	x17

000000000000b2f0 <rpl_ioctl@plt>:
    b2f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b2f4:	ldr	x17, [x16, #1416]
    b2f8:	add	x16, x16, #0x588
    b2fc:	br	x17

000000000000b300 <strchr@plt>:
    b300:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b304:	ldr	x17, [x16, #1424]
    b308:	add	x16, x16, #0x590
    b30c:	br	x17

000000000000b310 <areadlink_with_size@plt>:
    b310:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b314:	ldr	x17, [x16, #1432]
    b318:	add	x16, x16, #0x598
    b31c:	br	x17

000000000000b320 <argp_error@plt>:
    b320:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b324:	ldr	x17, [x16, #1440]
    b328:	add	x16, x16, #0x5a0
    b32c:	br	x17

000000000000b330 <memrchr@plt>:
    b330:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b334:	ldr	x17, [x16, #1448]
    b338:	add	x16, x16, #0x5a8
    b33c:	br	x17

000000000000b340 <utimensat@plt>:
    b340:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b344:	ldr	x17, [x16, #1456]
    b348:	add	x16, x16, #0x5b0
    b34c:	br	x17

000000000000b350 <pipeline_peekline@plt>:
    b350:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b354:	ldr	x17, [x16, #1464]
    b358:	add	x16, x16, #0x5b8
    b35c:	br	x17

000000000000b360 <do_cleanups_sigsafe@plt>:
    b360:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b364:	ldr	x17, [x16, #1472]
    b368:	add	x16, x16, #0x5c0
    b36c:	br	x17

000000000000b370 <fwrite@plt>:
    b370:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b374:	ldr	x17, [x16, #1480]
    b378:	add	x16, x16, #0x5c8
    b37c:	br	x17

000000000000b380 <rotr_sz@plt>:
    b380:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b384:	ldr	x17, [x16, #1488]
    b388:	add	x16, x16, #0x5d0
    b38c:	br	x17

000000000000b390 <rpl_fcntl@plt>:
    b390:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b394:	ldr	x17, [x16, #1496]
    b398:	add	x16, x16, #0x5d8
    b39c:	br	x17

000000000000b3a0 <fnmatch@plt>:
    b3a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3a4:	ldr	x17, [x16, #1504]
    b3a8:	add	x16, x16, #0x5e0
    b3ac:	br	x17

000000000000b3b0 <fcntl@plt>:
    b3b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3b4:	ldr	x17, [x16, #1512]
    b3b8:	add	x16, x16, #0x5e8
    b3bc:	br	x17

000000000000b3c0 <idpriv_drop@plt>:
    b3c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3c4:	ldr	x17, [x16, #1520]
    b3c8:	add	x16, x16, #0x5f0
    b3cc:	br	x17

000000000000b3d0 <rpl_regerror@plt>:
    b3d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3d4:	ldr	x17, [x16, #1528]
    b3d8:	add	x16, x16, #0x5f8
    b3dc:	br	x17

000000000000b3e0 <pthread_mutex_destroy@plt>:
    b3e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3e4:	ldr	x17, [x16, #1536]
    b3e8:	add	x16, x16, #0x600
    b3ec:	br	x17

000000000000b3f0 <strcpy@plt>:
    b3f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b3f4:	ldr	x17, [x16, #1544]
    b3f8:	add	x16, x16, #0x608
    b3fc:	br	x17

000000000000b400 <hash_pjw@plt>:
    b400:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b404:	ldr	x17, [x16, #1552]
    b408:	add	x16, x16, #0x610
    b40c:	br	x17

000000000000b410 <_argp_input@plt>:
    b410:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b414:	ldr	x17, [x16, #1560]
    b418:	add	x16, x16, #0x618
    b41c:	br	x17

000000000000b420 <__lxstat@plt>:
    b420:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b424:	ldr	x17, [x16, #1568]
    b428:	add	x16, x16, #0x620
    b42c:	br	x17

000000000000b430 <dup_safer_flag@plt>:
    b430:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b434:	ldr	x17, [x16, #1576]
    b438:	add	x16, x16, #0x628
    b43c:	br	x17

000000000000b440 <memchr@plt>:
    b440:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b444:	ldr	x17, [x16, #1584]
    b448:	add	x16, x16, #0x630
    b44c:	br	x17

000000000000b450 <idpriv_temp_restore@plt>:
    b450:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b454:	ldr	x17, [x16, #1592]
    b458:	add	x16, x16, #0x638
    b45c:	br	x17

000000000000b460 <new_string_list@plt>:
    b460:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b464:	ldr	x17, [x16, #1600]
    b468:	add	x16, x16, #0x640
    b46c:	br	x17

000000000000b470 <getresgid@plt>:
    b470:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b474:	ldr	x17, [x16, #1608]
    b478:	add	x16, x16, #0x648
    b47c:	br	x17

000000000000b480 <isatty@plt>:
    b480:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b484:	ldr	x17, [x16, #1616]
    b488:	add	x16, x16, #0x650
    b48c:	br	x17

000000000000b490 <xzalloc@plt>:
    b490:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b494:	ldr	x17, [x16, #1624]
    b498:	add	x16, x16, #0x658
    b49c:	br	x17

000000000000b4a0 <xstrndup@plt>:
    b4a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4a4:	ldr	x17, [x16, #1632]
    b4a8:	add	x16, x16, #0x660
    b4ac:	br	x17

000000000000b4b0 <pthread_mutexattr_init@plt>:
    b4b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4b4:	ldr	x17, [x16, #1640]
    b4b8:	add	x16, x16, #0x668
    b4bc:	br	x17

000000000000b4c0 <gl_list_free@plt>:
    b4c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4c4:	ldr	x17, [x16, #1648]
    b4c8:	add	x16, x16, #0x670
    b4cc:	br	x17

000000000000b4d0 <gl_set_nx_create_empty@plt>:
    b4d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4d4:	ldr	x17, [x16, #1656]
    b4d8:	add	x16, x16, #0x678
    b4dc:	br	x17

000000000000b4e0 <setresuid@plt>:
    b4e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4e4:	ldr	x17, [x16, #1664]
    b4e8:	add	x16, x16, #0x680
    b4ec:	br	x17

000000000000b4f0 <utimes@plt>:
    b4f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b4f4:	ldr	x17, [x16, #1672]
    b4f8:	add	x16, x16, #0x688
    b4fc:	br	x17

000000000000b500 <iswalnum@plt>:
    b500:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b504:	ldr	x17, [x16, #1680]
    b508:	add	x16, x16, #0x690
    b50c:	br	x17

000000000000b510 <__fxstat@plt>:
    b510:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b514:	ldr	x17, [x16, #1688]
    b518:	add	x16, x16, #0x698
    b51c:	br	x17

000000000000b520 <pthread_mutexattr_destroy@plt>:
    b520:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b524:	ldr	x17, [x16, #1696]
    b528:	add	x16, x16, #0x6a0
    b52c:	br	x17

000000000000b530 <strchrnul@plt>:
    b530:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b534:	ldr	x17, [x16, #1704]
    b538:	add	x16, x16, #0x6a8
    b53c:	br	x17

000000000000b540 <strstr@plt>:
    b540:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b544:	ldr	x17, [x16, #1712]
    b548:	add	x16, x16, #0x6b0
    b54c:	br	x17

000000000000b550 <_argp_fmtstream_ensure@plt>:
    b550:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b554:	ldr	x17, [x16, #1720]
    b558:	add	x16, x16, #0x6b8
    b55c:	br	x17

000000000000b560 <argp_state_help@plt>:
    b560:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b564:	ldr	x17, [x16, #1728]
    b568:	add	x16, x16, #0x6c0
    b56c:	br	x17

000000000000b570 <_option_is_short@plt>:
    b570:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b574:	ldr	x17, [x16, #1736]
    b578:	add	x16, x16, #0x6c8
    b57c:	br	x17

000000000000b580 <dcgettext@plt>:
    b580:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b584:	ldr	x17, [x16, #1744]
    b588:	add	x16, x16, #0x6d0
    b58c:	br	x17

000000000000b590 <gl_map_create_empty@plt>:
    b590:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b594:	ldr	x17, [x16, #1752]
    b598:	add	x16, x16, #0x6d8
    b59c:	br	x17

000000000000b5a0 <pthread_rwlockattr_destroy@plt>:
    b5a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5a4:	ldr	x17, [x16, #1760]
    b5a8:	add	x16, x16, #0x6e0
    b5ac:	br	x17

000000000000b5b0 <vsnprintf@plt>:
    b5b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5b4:	ldr	x17, [x16, #1768]
    b5b8:	add	x16, x16, #0x6e8
    b5bc:	br	x17

000000000000b5c0 <argp_fmtstream_free@plt>:
    b5c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5c4:	ldr	x17, [x16, #1776]
    b5c8:	add	x16, x16, #0x6f0
    b5cc:	br	x17

000000000000b5d0 <get_locale_charset@plt>:
    b5d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5d4:	ldr	x17, [x16, #1784]
    b5d8:	add	x16, x16, #0x6f8
    b5dc:	br	x17

000000000000b5e0 <xvasprintf@plt>:
    b5e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5e4:	ldr	x17, [x16, #1792]
    b5e8:	add	x16, x16, #0x700
    b5ec:	br	x17

000000000000b5f0 <fputs_unlocked@plt>:
    b5f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b5f4:	ldr	x17, [x16, #1800]
    b5f8:	add	x16, x16, #0x708
    b5fc:	br	x17

000000000000b600 <gl_map_search@plt>:
    b600:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b604:	ldr	x17, [x16, #1808]
    b608:	add	x16, x16, #0x710
    b60c:	br	x17

000000000000b610 <gl_list_create_empty@plt>:
    b610:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b614:	ldr	x17, [x16, #1816]
    b618:	add	x16, x16, #0x718
    b61c:	br	x17

000000000000b620 <sigaddset@plt>:
    b620:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b624:	ldr	x17, [x16, #1824]
    b628:	add	x16, x16, #0x720
    b62c:	br	x17

000000000000b630 <pathsearch_executable@plt>:
    b630:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b634:	ldr	x17, [x16, #1832]
    b638:	add	x16, x16, #0x728
    b63c:	br	x17

000000000000b640 <towupper@plt>:
    b640:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b644:	ldr	x17, [x16, #1840]
    b648:	add	x16, x16, #0x730
    b64c:	br	x17

000000000000b650 <gl_set_nx_add@plt>:
    b650:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b654:	ldr	x17, [x16, #1848]
    b658:	add	x16, x16, #0x738
    b65c:	br	x17

000000000000b660 <argp_fmtstream_write@plt>:
    b660:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b664:	ldr	x17, [x16, #1856]
    b668:	add	x16, x16, #0x740
    b66c:	br	x17

000000000000b670 <fd_safer_flag@plt>:
    b670:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b674:	ldr	x17, [x16, #1864]
    b678:	add	x16, x16, #0x748
    b67c:	br	x17

000000000000b680 <get_stat_mtime_ns@plt>:
    b680:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b684:	ldr	x17, [x16, #1872]
    b688:	add	x16, x16, #0x750
    b68c:	br	x17

000000000000b690 <xmemdup@plt>:
    b690:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b694:	ldr	x17, [x16, #1880]
    b698:	add	x16, x16, #0x758
    b69c:	br	x17

000000000000b6a0 <strcspn@plt>:
    b6a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6a4:	ldr	x17, [x16, #1888]
    b6a8:	add	x16, x16, #0x760
    b6ac:	br	x17

000000000000b6b0 <_getopt_internal_r@plt>:
    b6b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6b4:	ldr	x17, [x16, #1896]
    b6b8:	add	x16, x16, #0x768
    b6bc:	br	x17

000000000000b6c0 <vfprintf@plt>:
    b6c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6c4:	ldr	x17, [x16, #1904]
    b6c8:	add	x16, x16, #0x770
    b6cc:	br	x17

000000000000b6d0 <openat@plt>:
    b6d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6d4:	ldr	x17, [x16, #1912]
    b6d8:	add	x16, x16, #0x778
    b6dc:	br	x17

000000000000b6e0 <__assert_fail@plt>:
    b6e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6e4:	ldr	x17, [x16, #1920]
    b6e8:	add	x16, x16, #0x780
    b6ec:	br	x17

000000000000b6f0 <__errno_location@plt>:
    b6f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b6f4:	ldr	x17, [x16, #1928]
    b6f8:	add	x16, x16, #0x788
    b6fc:	br	x17

000000000000b700 <tolower@plt>:
    b700:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b704:	ldr	x17, [x16, #1936]
    b708:	add	x16, x16, #0x790
    b70c:	br	x17

000000000000b710 <setresgid@plt>:
    b710:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b714:	ldr	x17, [x16, #1944]
    b718:	add	x16, x16, #0x798
    b71c:	br	x17

000000000000b720 <getenv@plt>:
    b720:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b724:	ldr	x17, [x16, #1952]
    b728:	add	x16, x16, #0x7a0
    b72c:	br	x17

000000000000b730 <locale_charset@plt>:
    b730:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b734:	ldr	x17, [x16, #1960]
    b738:	add	x16, x16, #0x7a8
    b73c:	br	x17

000000000000b740 <__xstat@plt>:
    b740:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b744:	ldr	x17, [x16, #1968]
    b748:	add	x16, x16, #0x7b0
    b74c:	br	x17

000000000000b750 <pthread_mutex_lock@plt>:
    b750:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b754:	ldr	x17, [x16, #1976]
    b758:	add	x16, x16, #0x7b8
    b75c:	br	x17

000000000000b760 <printf_parse@plt>:
    b760:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b764:	ldr	x17, [x16, #1984]
    b768:	add	x16, x16, #0x7c0
    b76c:	br	x17

000000000000b770 <fd_safer@plt>:
    b770:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b774:	ldr	x17, [x16, #1992]
    b778:	add	x16, x16, #0x7c8
    b77c:	br	x17

000000000000b780 <pthread_mutex_unlock@plt>:
    b780:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b784:	ldr	x17, [x16, #2000]
    b788:	add	x16, x16, #0x7d0
    b78c:	br	x17

000000000000b790 <argp_fmtstream_set_wmargin@plt>:
    b790:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b794:	ldr	x17, [x16, #2008]
    b798:	add	x16, x16, #0x7d8
    b79c:	br	x17

000000000000b7a0 <unlink@plt>:
    b7a0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7a4:	ldr	x17, [x16, #2016]
    b7a8:	add	x16, x16, #0x7e0
    b7ac:	br	x17

000000000000b7b0 <mkdir@plt>:
    b7b0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7b4:	ldr	x17, [x16, #2024]
    b7b8:	add	x16, x16, #0x7e8
    b7bc:	br	x17

000000000000b7c0 <towlower@plt>:
    b7c0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7c4:	ldr	x17, [x16, #2032]
    b7c8:	add	x16, x16, #0x7f0
    b7cc:	br	x17

000000000000b7d0 <gettime@plt>:
    b7d0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7d4:	ldr	x17, [x16, #2040]
    b7d8:	add	x16, x16, #0x7f8
    b7dc:	br	x17

000000000000b7e0 <rpl_re_compile_fastmap@plt>:
    b7e0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7e4:	ldr	x17, [x16, #2048]
    b7e8:	add	x16, x16, #0x800
    b7ec:	br	x17

000000000000b7f0 <fprintf@plt>:
    b7f0:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b7f4:	ldr	x17, [x16, #2056]
    b7f8:	add	x16, x16, #0x808
    b7fc:	br	x17

000000000000b800 <hash_get_n_entries@plt>:
    b800:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b804:	ldr	x17, [x16, #2064]
    b808:	add	x16, x16, #0x810
    b80c:	br	x17

000000000000b810 <xnmalloc@plt>:
    b810:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b814:	ldr	x17, [x16, #2072]
    b818:	add	x16, x16, #0x818
    b81c:	br	x17

000000000000b820 <ioctl@plt>:
    b820:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b824:	ldr	x17, [x16, #2080]
    b828:	add	x16, x16, #0x820
    b82c:	br	x17

000000000000b830 <setlocale@plt>:
    b830:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b834:	ldr	x17, [x16, #2088]
    b838:	add	x16, x16, #0x828
    b83c:	br	x17

000000000000b840 <__fxstatat@plt>:
    b840:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b844:	ldr	x17, [x16, #2096]
    b848:	add	x16, x16, #0x830
    b84c:	br	x17

000000000000b850 <wcrtomb@plt>:
    b850:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b854:	ldr	x17, [x16, #2104]
    b858:	add	x16, x16, #0x838
    b85c:	br	x17

000000000000b860 <xsum4@plt>:
    b860:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b864:	ldr	x17, [x16, #2112]
    b868:	add	x16, x16, #0x840
    b86c:	br	x17

000000000000b870 <xgetcwd@plt>:
    b870:	adrp	x16, 40000 <base_len@@Base+0x2c984>
    b874:	ldr	x17, [x16, #2120]
    b878:	add	x16, x16, #0x848
    b87c:	br	x17

Disassembly of section .text:

000000000000b880 <appendstr@@Base-0x108>:
    b880:	adrp	x0, 3f000 <vasnprintf@@Base+0x14ec4>
    b884:	ldr	x0, [x0, #3904]
    b888:	cbz	x0, b890 <xgetcwd@plt+0x20>
    b88c:	b	afb0 <__gmon_start__@plt>
    b890:	ret
    b894:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b898:	add	x0, x0, #0x8a0
    b89c:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    b8a0:	add	x1, x1, #0x8a0
    b8a4:	cmp	x0, x1
    b8a8:	b.eq	b8d4 <xgetcwd@plt+0x64>  // b.none
    b8ac:	adrp	x1, 3f000 <vasnprintf@@Base+0x14ec4>
    b8b0:	ldr	x1, [x1, #3776]
    b8b4:	cbz	x1, b8d4 <xgetcwd@plt+0x64>
    b8b8:	stp	x29, x30, [sp, #-16]!
    b8bc:	mov	x29, sp
    b8c0:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b8c4:	add	x0, x0, #0x8a0
    b8c8:	blr	x1
    b8cc:	ldp	x29, x30, [sp], #16
    b8d0:	ret
    b8d4:	ret
    b8d8:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b8dc:	add	x0, x0, #0x8a0
    b8e0:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    b8e4:	add	x1, x1, #0x8a0
    b8e8:	sub	x0, x0, x1
    b8ec:	lsr	x1, x0, #63
    b8f0:	add	x0, x1, x0, asr #3
    b8f4:	cmp	xzr, x0, asr #1
    b8f8:	b.eq	b928 <xgetcwd@plt+0xb8>  // b.none
    b8fc:	asr	x1, x0, #1
    b900:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
    b904:	ldr	x2, [x2, #4024]
    b908:	cbz	x2, b928 <xgetcwd@plt+0xb8>
    b90c:	stp	x29, x30, [sp, #-16]!
    b910:	mov	x29, sp
    b914:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b918:	add	x0, x0, #0x8a0
    b91c:	blr	x2
    b920:	ldp	x29, x30, [sp], #16
    b924:	ret
    b928:	ret
    b92c:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b930:	ldrb	w0, [x0, #2208]
    b934:	cbnz	w0, b970 <xgetcwd@plt+0x100>
    b938:	stp	x29, x30, [sp, #-16]!
    b93c:	mov	x29, sp
    b940:	adrp	x0, 3f000 <vasnprintf@@Base+0x14ec4>
    b944:	ldr	x0, [x0, #3800]
    b948:	cbz	x0, b958 <xgetcwd@plt+0xe8>
    b94c:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b950:	ldr	x0, [x0, #2128]
    b954:	bl	aa00 <__cxa_finalize@plt>
    b958:	bl	b894 <xgetcwd@plt+0x24>
    b95c:	adrp	x0, 40000 <base_len@@Base+0x2c984>
    b960:	mov	w1, #0x1                   	// #1
    b964:	strb	w1, [x0, #2208]
    b968:	ldp	x29, x30, [sp], #16
    b96c:	ret
    b970:	ret
    b974:	stp	x29, x30, [sp, #-16]!
    b978:	mov	x29, sp
    b97c:	bl	b8d8 <xgetcwd@plt+0x68>
    b980:	ldp	x29, x30, [sp], #16
    b984:	ret

000000000000b988 <appendstr@@Base>:
    b988:	sub	sp, sp, #0x120
    b98c:	stp	x29, x30, [sp, #224]
    b990:	stp	x20, x19, [sp, #272]
    b994:	add	x29, sp, #0xe0
    b998:	mov	x19, x0
    b99c:	str	x28, [sp, #240]
    b9a0:	stp	x22, x21, [sp, #256]
    b9a4:	stp	x1, x2, [x29, #-88]
    b9a8:	stp	x3, x4, [x29, #-72]
    b9ac:	stp	x5, x6, [x29, #-56]
    b9b0:	stur	x7, [x29, #-40]
    b9b4:	stp	q0, q1, [sp]
    b9b8:	stp	q2, q3, [sp, #32]
    b9bc:	stp	q4, q5, [sp, #64]
    b9c0:	stp	q6, q7, [sp, #96]
    b9c4:	cbz	x0, b9d8 <appendstr@@Base+0x50>
    b9c8:	mov	x0, x19
    b9cc:	bl	a890 <strlen@plt>
    b9d0:	mov	x20, x0
    b9d4:	b	b9dc <appendstr@@Base+0x54>
    b9d8:	mov	x20, xzr
    b9dc:	mov	x8, #0xffffffffffffffc8    	// #-56
    b9e0:	mov	x10, sp
    b9e4:	sub	x11, x29, #0x58
    b9e8:	movk	x8, #0xff80, lsl #32
    b9ec:	add	x9, x29, #0x40
    b9f0:	add	x10, x10, #0x80
    b9f4:	add	x22, x11, #0x38
    b9f8:	add	x21, x20, #0x1
    b9fc:	stp	x10, x8, [x29, #-16]
    ba00:	stp	x9, x22, [x29, #-32]
    ba04:	ldursw	x8, [x29, #-8]
    ba08:	tbz	w8, #31, ba1c <appendstr@@Base+0x94>
    ba0c:	add	w9, w8, #0x8
    ba10:	cmp	w9, #0x0
    ba14:	stur	w9, [x29, #-8]
    ba18:	b.le	ba44 <appendstr@@Base+0xbc>
    ba1c:	ldur	x8, [x29, #-32]
    ba20:	add	x9, x8, #0x8
    ba24:	stur	x9, [x29, #-32]
    ba28:	ldr	x0, [x8]
    ba2c:	cbz	x0, ba50 <appendstr@@Base+0xc8>
    ba30:	bl	a890 <strlen@plt>
    ba34:	add	x21, x0, x21
    ba38:	ldursw	x8, [x29, #-8]
    ba3c:	tbz	w8, #31, ba1c <appendstr@@Base+0x94>
    ba40:	b	ba0c <appendstr@@Base+0x84>
    ba44:	add	x8, x22, x8
    ba48:	ldr	x0, [x8]
    ba4c:	cbnz	x0, ba30 <appendstr@@Base+0xa8>
    ba50:	mov	x0, x19
    ba54:	mov	x1, x21
    ba58:	bl	ac70 <xrealloc@plt>
    ba5c:	sub	x9, x29, #0x58
    ba60:	mov	x10, sp
    ba64:	mov	x11, #0xffffffffffffffc8    	// #-56
    ba68:	mov	x19, x0
    ba6c:	add	x20, x0, x20
    ba70:	add	x8, x29, #0x40
    ba74:	movk	x11, #0xff80, lsl #32
    ba78:	add	x9, x9, #0x38
    ba7c:	add	x10, x10, #0x80
    ba80:	stp	x8, x9, [x29, #-32]
    ba84:	stp	x10, x11, [x29, #-16]
    ba88:	ldursw	x8, [x29, #-8]
    ba8c:	tbz	w8, #31, baa0 <appendstr@@Base+0x118>
    ba90:	add	w9, w8, #0x8
    ba94:	cmp	w9, #0x0
    ba98:	stur	w9, [x29, #-8]
    ba9c:	b.le	bad8 <appendstr@@Base+0x150>
    baa0:	ldur	x8, [x29, #-32]
    baa4:	add	x9, x8, #0x8
    baa8:	stur	x9, [x29, #-32]
    baac:	ldr	x21, [x8]
    bab0:	cbz	x21, bae8 <appendstr@@Base+0x160>
    bab4:	mov	x0, x20
    bab8:	mov	x1, x21
    babc:	bl	b3f0 <strcpy@plt>
    bac0:	mov	x0, x21
    bac4:	bl	a890 <strlen@plt>
    bac8:	add	x20, x20, x0
    bacc:	ldursw	x8, [x29, #-8]
    bad0:	tbz	w8, #31, baa0 <appendstr@@Base+0x118>
    bad4:	b	ba90 <appendstr@@Base+0x108>
    bad8:	ldur	x9, [x29, #-24]
    badc:	add	x8, x9, x8
    bae0:	ldr	x21, [x8]
    bae4:	cbnz	x21, bab4 <appendstr@@Base+0x12c>
    bae8:	mov	x0, x19
    baec:	ldp	x20, x19, [sp, #272]
    baf0:	ldp	x22, x21, [sp, #256]
    baf4:	ldr	x28, [sp, #240]
    baf8:	ldp	x29, x30, [sp, #224]
    bafc:	add	sp, sp, #0x120
    bb00:	ret

000000000000bb04 <do_cleanups_sigsafe@@Base>:
    bb04:	stp	x29, x30, [sp, #-48]!
    bb08:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    bb0c:	adrp	x9, 40000 <base_len@@Base+0x2c984>
    bb10:	stp	x20, x19, [sp, #32]
    bb14:	ldr	w20, [x8, #2216]
    bb18:	ldr	w8, [x9, #2220]
    bb1c:	stp	x22, x21, [sp, #16]
    bb20:	mov	x29, sp
    bb24:	cmp	w20, w8
    bb28:	b.hi	bb8c <do_cleanups_sigsafe@@Base+0x88>  // b.pmore
    bb2c:	cbz	w20, bb7c <do_cleanups_sigsafe@@Base+0x78>
    bb30:	sub	w8, w20, #0x1
    bb34:	mov	w9, #0x18                  	// #24
    bb38:	mov	w19, w0
    bb3c:	umull	x21, w8, w9
    bb40:	adrp	x22, 40000 <base_len@@Base+0x2c984>
    bb44:	b	bb64 <do_cleanups_sigsafe@@Base+0x60>
    bb48:	ldr	x8, [x22, #2224]
    bb4c:	add	x8, x8, x21
    bb50:	ldp	x9, x0, [x8]
    bb54:	blr	x9
    bb58:	subs	w20, w20, #0x1
    bb5c:	sub	x21, x21, #0x18
    bb60:	b.eq	bb7c <do_cleanups_sigsafe@@Base+0x78>  // b.none
    bb64:	cbz	w19, bb48 <do_cleanups_sigsafe@@Base+0x44>
    bb68:	ldr	x8, [x22, #2224]
    bb6c:	add	x8, x8, x21
    bb70:	ldr	w8, [x8, #16]
    bb74:	cbnz	w8, bb48 <do_cleanups_sigsafe@@Base+0x44>
    bb78:	b	bb58 <do_cleanups_sigsafe@@Base+0x54>
    bb7c:	ldp	x20, x19, [sp, #32]
    bb80:	ldp	x22, x21, [sp, #16]
    bb84:	ldp	x29, x30, [sp], #48
    bb88:	ret
    bb8c:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bb90:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bb94:	adrp	x3, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bb98:	add	x0, x0, #0xe70
    bb9c:	add	x1, x1, #0xe7e
    bba0:	add	x3, x3, #0xe88
    bba4:	mov	w2, #0xa9                  	// #169
    bba8:	bl	b6e0 <__assert_fail@plt>

000000000000bbac <do_cleanups@@Base>:
    bbac:	stp	x29, x30, [sp, #-32]!
    bbb0:	mov	w0, wzr
    bbb4:	str	x19, [sp, #16]
    bbb8:	mov	x29, sp
    bbbc:	bl	b360 <do_cleanups_sigsafe@plt>
    bbc0:	adrp	x19, 40000 <base_len@@Base+0x2c984>
    bbc4:	ldr	x0, [x19, #2224]
    bbc8:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    bbcc:	str	wzr, [x8, #2216]
    bbd0:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    bbd4:	str	wzr, [x8, #2220]
    bbd8:	bl	b1d0 <free@plt>
    bbdc:	str	xzr, [x19, #2224]
    bbe0:	ldr	x19, [sp, #16]
    bbe4:	ldp	x29, x30, [sp], #32
    bbe8:	ret

000000000000bbec <push_cleanup@@Base>:
    bbec:	stp	x29, x30, [sp, #-64]!
    bbf0:	stp	x24, x23, [sp, #16]
    bbf4:	stp	x22, x21, [sp, #32]
    bbf8:	adrp	x22, 40000 <base_len@@Base+0x2c984>
    bbfc:	adrp	x23, 40000 <base_len@@Base+0x2c984>
    bc00:	ldr	w8, [x22, #2216]
    bc04:	ldr	w9, [x23, #2220]
    bc08:	stp	x20, x19, [sp, #48]
    bc0c:	mov	x29, sp
    bc10:	cmp	w8, w9
    bc14:	b.hi	bce4 <push_cleanup@@Base+0xf8>  // b.pmore
    bc18:	adrp	x24, 40000 <base_len@@Base+0x2c984>
    bc1c:	ldrb	w8, [x24, #2232]
    bc20:	mov	w19, w2
    bc24:	mov	x20, x1
    bc28:	mov	x21, x0
    bc2c:	tbnz	w8, #0, bc48 <push_cleanup@@Base+0x5c>
    bc30:	adrp	x0, 3f000 <vasnprintf@@Base+0x14ec4>
    bc34:	ldr	x0, [x0, #3840]
    bc38:	bl	2ae00 <vasnprintf@@Base+0xcc4>
    bc3c:	cbnz	w0, bccc <push_cleanup@@Base+0xe0>
    bc40:	mov	w8, #0x1                   	// #1
    bc44:	strb	w8, [x24, #2232]
    bc48:	ldr	w9, [x22, #2216]
    bc4c:	ldr	w8, [x23, #2220]
    bc50:	adrp	x24, 40000 <base_len@@Base+0x2c984>
    bc54:	cmp	w9, w8
    bc58:	b.ne	bc84 <push_cleanup@@Base+0x98>  // b.any
    bc5c:	ldr	x0, [x24, #2224]
    bc60:	cbz	x0, bcbc <push_cleanup@@Base+0xd0>
    bc64:	add	w1, w8, #0x1
    bc68:	mov	w2, #0x18                  	// #24
    bc6c:	bl	ae30 <xnrealloc@plt>
    bc70:	cbz	x0, bccc <push_cleanup@@Base+0xe0>
    bc74:	ldr	w8, [x23, #2220]
    bc78:	str	x0, [x24, #2224]
    bc7c:	add	w8, w8, #0x1
    bc80:	str	w8, [x23, #2220]
    bc84:	ldr	w8, [x22, #2216]
    bc88:	ldr	w9, [x23, #2220]
    bc8c:	cmp	w8, w9
    bc90:	b.cs	bd04 <push_cleanup@@Base+0x118>  // b.hs, b.nlast
    bc94:	ldr	x9, [x24, #2224]
    bc98:	mov	w10, #0x18                  	// #24
    bc9c:	add	w11, w8, #0x1
    bca0:	madd	x8, x8, x10, x9
    bca4:	stp	x21, x20, [x8]
    bca8:	str	w19, [x8, #16]
    bcac:	str	w11, [x22, #2216]
    bcb0:	bl	bd24 <push_cleanup@@Base+0x138>
    bcb4:	mov	w0, wzr
    bcb8:	b	bcd0 <push_cleanup@@Base+0xe4>
    bcbc:	add	w0, w8, #0x1
    bcc0:	mov	w1, #0x18                  	// #24
    bcc4:	bl	b810 <xnmalloc@plt>
    bcc8:	cbnz	x0, bc74 <push_cleanup@@Base+0x88>
    bccc:	mov	w0, #0xffffffff            	// #-1
    bcd0:	ldp	x20, x19, [sp, #48]
    bcd4:	ldp	x22, x21, [sp, #32]
    bcd8:	ldp	x24, x23, [sp, #16]
    bcdc:	ldp	x29, x30, [sp], #64
    bce0:	ret
    bce4:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bce8:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bcec:	adrp	x3, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bcf0:	add	x0, x0, #0xe70
    bcf4:	add	x1, x1, #0xe7e
    bcf8:	add	x3, x3, #0xea6
    bcfc:	mov	w2, #0xc8                  	// #200
    bd00:	bl	b6e0 <__assert_fail@plt>
    bd04:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bd08:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bd0c:	adrp	x3, 2a000 <rpl_re_set_registers@@Base+0xb458>
    bd10:	add	x0, x0, #0xed1
    bd14:	add	x1, x1, #0xe7e
    bd18:	add	x3, x3, #0xea6
    bd1c:	mov	w2, #0xe0                  	// #224
    bd20:	bl	b6e0 <__assert_fail@plt>
    bd24:	stp	x29, x30, [sp, #-16]!
    bd28:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    bd2c:	add	x1, x1, #0x8c0
    bd30:	mov	w0, #0x1                   	// #1
    bd34:	mov	x29, sp
    bd38:	bl	beb0 <pop_all_cleanups@@Base+0x1c>
    bd3c:	cbz	w0, bd48 <push_cleanup@@Base+0x15c>
    bd40:	ldp	x29, x30, [sp], #16
    bd44:	ret
    bd48:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    bd4c:	add	x1, x1, #0x958
    bd50:	mov	w0, #0x2                   	// #2
    bd54:	bl	beb0 <pop_all_cleanups@@Base+0x1c>
    bd58:	cbnz	w0, bd40 <push_cleanup@@Base+0x154>
    bd5c:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    bd60:	add	x1, x1, #0x9f0
    bd64:	mov	w0, #0xf                   	// #15
    bd68:	bl	beb0 <pop_all_cleanups@@Base+0x1c>
    bd6c:	ldp	x29, x30, [sp], #16
    bd70:	ret

000000000000bd74 <pop_cleanup@@Base>:
    bd74:	stp	x29, x30, [sp, #-16]!
    bd78:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    bd7c:	ldr	w9, [x8, #2216]
    bd80:	mov	x29, sp
    bd84:	cbz	w9, be34 <pop_cleanup@@Base+0xc0>
    bd88:	adrp	x11, 40000 <base_len@@Base+0x2c984>
    bd8c:	ldr	x11, [x11, #2224]
    bd90:	mov	w13, #0x18                  	// #24
    bd94:	mov	x10, xzr
    bd98:	sub	x14, x9, #0x1
    bd9c:	madd	x12, x9, x13, x11
    bda0:	b	bdb4 <pop_cleanup@@Base+0x40>
    bda4:	sub	x10, x10, #0x1
    bda8:	cmn	w9, w10
    bdac:	sub	x12, x12, #0x18
    bdb0:	b.eq	be18 <pop_cleanup@@Base+0xa4>  // b.none
    bdb4:	add	w15, w14, w10
    bdb8:	umull	x16, w15, w13
    bdbc:	ldr	x16, [x11, x16]
    bdc0:	cmp	x16, x0
    bdc4:	b.ne	bda4 <pop_cleanup@@Base+0x30>  // b.any
    bdc8:	madd	x15, x15, x13, x11
    bdcc:	ldr	x15, [x15, #8]
    bdd0:	cmp	x15, x1
    bdd4:	b.ne	bda4 <pop_cleanup@@Base+0x30>  // b.any
    bdd8:	add	w13, w9, w10
    bddc:	cmp	w9, w13
    bde0:	b.ls	be10 <pop_cleanup@@Base+0x9c>  // b.plast
    bde4:	mov	w13, #0xffffffff            	// #-1
    bde8:	add	x13, x9, x13
    bdec:	mov	w14, #0x18                  	// #24
    bdf0:	ldr	x16, [x12, #16]
    bdf4:	ldr	q0, [x12], #24
    bdf8:	add	w15, w13, w10
    bdfc:	adds	x10, x10, #0x1
    be00:	umaddl	x15, w15, w14, x11
    be04:	str	x16, [x15, #16]
    be08:	str	q0, [x15]
    be0c:	b.cc	bdf0 <pop_cleanup@@Base+0x7c>  // b.lo, b.ul, b.last
    be10:	sub	w9, w9, #0x1
    be14:	str	w9, [x8, #2216]
    be18:	ldr	w8, [x8, #2216]
    be1c:	cbz	w8, be28 <pop_cleanup@@Base+0xb4>
    be20:	ldp	x29, x30, [sp], #16
    be24:	ret
    be28:	bl	be54 <pop_cleanup@@Base+0xe0>
    be2c:	ldp	x29, x30, [sp], #16
    be30:	ret
    be34:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    be38:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    be3c:	adrp	x3, 2a000 <rpl_re_set_registers@@Base+0xb458>
    be40:	add	x0, x0, #0xede
    be44:	add	x1, x1, #0xe7e
    be48:	add	x3, x3, #0xee6
    be4c:	mov	w2, #0xf5                  	// #245
    be50:	bl	b6e0 <__assert_fail@plt>
    be54:	stp	x29, x30, [sp, #-16]!
    be58:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    be5c:	add	x1, x1, #0x8c0
    be60:	mov	w0, #0x1                   	// #1
    be64:	mov	x29, sp
    be68:	bl	bfec <pop_all_cleanups@@Base+0x158>
    be6c:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    be70:	add	x1, x1, #0x958
    be74:	mov	w0, #0x2                   	// #2
    be78:	bl	bfec <pop_all_cleanups@@Base+0x158>
    be7c:	adrp	x1, 40000 <base_len@@Base+0x2c984>
    be80:	add	x1, x1, #0x9f0
    be84:	mov	w0, #0xf                   	// #15
    be88:	bl	bfec <pop_all_cleanups@@Base+0x158>
    be8c:	ldp	x29, x30, [sp], #16
    be90:	ret

000000000000be94 <pop_all_cleanups@@Base>:
    be94:	stp	x29, x30, [sp, #-16]!
    be98:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    be9c:	mov	x29, sp
    bea0:	str	wzr, [x8, #2216]
    bea4:	bl	be54 <pop_cleanup@@Base+0xe0>
    bea8:	ldp	x29, x30, [sp], #16
    beac:	ret
    beb0:	sub	sp, sp, #0xc0
    beb4:	stp	x20, x19, [sp, #176]
    beb8:	mov	x19, x1
    bebc:	mov	x1, xzr
    bec0:	mov	x2, x19
    bec4:	stp	x29, x30, [sp, #160]
    bec8:	add	x29, sp, #0xa0
    becc:	mov	w20, w0
    bed0:	bl	af50 <sigaction@plt>
    bed4:	cbz	w0, bee0 <pop_all_cleanups@@Base+0x4c>
    bed8:	mov	w0, #0xffffffff            	// #-1
    bedc:	b	bf38 <pop_all_cleanups@@Base+0xa4>
    bee0:	ldr	x8, [x19]
    bee4:	cbz	x8, bef0 <pop_all_cleanups@@Base+0x5c>
    bee8:	mov	w0, wzr
    beec:	b	bf38 <pop_all_cleanups@@Base+0xa4>
    bef0:	adrp	x8, b000 <mkdtemp@plt>
    bef4:	mov	x9, sp
    bef8:	movi	v0.2d, #0x0
    befc:	add	x8, x8, #0xf48
    bf00:	orr	x0, x9, #0x8
    bf04:	str	xzr, [sp, #144]
    bf08:	stp	q0, q0, [sp, #112]
    bf0c:	stp	q0, q0, [sp, #80]
    bf10:	stp	q0, q0, [sp, #48]
    bf14:	stp	q0, q0, [sp, #16]
    bf18:	str	q0, [sp]
    bf1c:	str	x8, [sp]
    bf20:	bl	acc0 <sigemptyset@plt>
    bf24:	mov	x1, sp
    bf28:	mov	w0, w20
    bf2c:	mov	x2, x19
    bf30:	str	wzr, [sp, #136]
    bf34:	bl	af50 <sigaction@plt>
    bf38:	ldp	x20, x19, [sp, #176]
    bf3c:	ldp	x29, x30, [sp, #160]
    bf40:	add	sp, sp, #0xc0
    bf44:	ret
    bf48:	sub	sp, sp, #0x140
    bf4c:	stp	x28, x19, [sp, #304]
    bf50:	mov	w19, w0
    bf54:	mov	w0, #0x1                   	// #1
    bf58:	stp	x29, x30, [sp, #288]
    bf5c:	add	x29, sp, #0x120
    bf60:	bl	b360 <do_cleanups_sigsafe@plt>
    bf64:	add	x8, sp, #0x80
    bf68:	movi	v0.2d, #0x0
    bf6c:	orr	x0, x8, #0x8
    bf70:	str	xzr, [sp, #272]
    bf74:	stp	q0, q0, [sp, #240]
    bf78:	stp	q0, q0, [sp, #208]
    bf7c:	stp	q0, q0, [sp, #176]
    bf80:	stp	q0, q0, [sp, #144]
    bf84:	str	q0, [sp, #128]
    bf88:	bl	acc0 <sigemptyset@plt>
    bf8c:	add	x1, sp, #0x80
    bf90:	mov	w0, w19
    bf94:	mov	x2, xzr
    bf98:	str	wzr, [sp, #264]
    bf9c:	bl	af50 <sigaction@plt>
    bfa0:	cbnz	w0, bfe4 <pop_all_cleanups@@Base+0x150>
    bfa4:	mov	x0, sp
    bfa8:	bl	acc0 <sigemptyset@plt>
    bfac:	cbnz	w0, bfe4 <pop_all_cleanups@@Base+0x150>
    bfb0:	mov	x0, sp
    bfb4:	mov	w1, w19
    bfb8:	bl	b620 <sigaddset@plt>
    bfbc:	cbnz	w0, bfe4 <pop_all_cleanups@@Base+0x150>
    bfc0:	mov	x1, sp
    bfc4:	mov	w0, #0x1                   	// #1
    bfc8:	mov	x2, xzr
    bfcc:	bl	a940 <sigprocmask@plt>
    bfd0:	cbnz	w0, bfe4 <pop_all_cleanups@@Base+0x150>
    bfd4:	bl	ab80 <getpid@plt>
    bfd8:	mov	w1, w19
    bfdc:	bl	aaa0 <kill@plt>
    bfe0:	bl	b020 <abort@plt>
    bfe4:	mov	w0, #0x2                   	// #2
    bfe8:	bl	a840 <_exit@plt>
    bfec:	sub	sp, sp, #0xc0
    bff0:	stp	x20, x19, [sp, #176]
    bff4:	mov	x19, x1
    bff8:	add	x2, sp, #0x8
    bffc:	mov	x1, xzr
    c000:	stp	x29, x30, [sp, #160]
    c004:	add	x29, sp, #0xa0
    c008:	mov	w20, w0
    c00c:	bl	af50 <sigaction@plt>
    c010:	cbz	w0, c01c <pop_all_cleanups@@Base+0x188>
    c014:	mov	w0, #0xffffffff            	// #-1
    c018:	b	c048 <pop_all_cleanups@@Base+0x1b4>
    c01c:	ldr	x8, [sp, #8]
    c020:	adrp	x9, b000 <mkdtemp@plt>
    c024:	add	x9, x9, #0xf48
    c028:	cmp	x8, x9
    c02c:	b.eq	c038 <pop_all_cleanups@@Base+0x1a4>  // b.none
    c030:	mov	w0, wzr
    c034:	b	c048 <pop_all_cleanups@@Base+0x1b4>
    c038:	mov	w0, w20
    c03c:	mov	x1, x19
    c040:	mov	x2, xzr
    c044:	bl	af50 <sigaction@plt>
    c048:	ldp	x20, x19, [sp, #176]
    c04c:	ldp	x29, x30, [sp, #160]
    c050:	add	sp, sp, #0xc0
    c054:	ret

000000000000c058 <init_debug@@Base>:
    c058:	stp	x29, x30, [sp, #-16]!
    c05c:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c060:	add	x0, x0, #0xf0c
    c064:	mov	x29, sp
    c068:	bl	b720 <getenv@plt>
    c06c:	cbz	x0, c080 <init_debug@@Base+0x28>
    c070:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
    c074:	add	x1, x1, #0xb93
    c078:	bl	b120 <strcmp@plt>
    c07c:	cbz	w0, c088 <init_debug@@Base+0x30>
    c080:	ldp	x29, x30, [sp], #16
    c084:	ret
    c088:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    c08c:	ldr	x8, [x8, #3808]
    c090:	mov	w9, #0x1                   	// #1
    c094:	strb	w9, [x8]
    c098:	ldp	x29, x30, [sp], #16
    c09c:	ret

000000000000c0a0 <debug@@Base>:
    c0a0:	sub	sp, sp, #0x120
    c0a4:	stp	x29, x30, [sp, #256]
    c0a8:	add	x29, sp, #0x100
    c0ac:	str	x28, [sp, #272]
    c0b0:	stp	x1, x2, [x29, #-120]
    c0b4:	stp	x3, x4, [x29, #-104]
    c0b8:	stp	x5, x6, [x29, #-88]
    c0bc:	stur	x7, [x29, #-72]
    c0c0:	stp	q0, q1, [sp]
    c0c4:	stp	q2, q3, [sp, #32]
    c0c8:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    c0cc:	ldr	x8, [x8, #3808]
    c0d0:	stp	q4, q5, [sp, #64]
    c0d4:	stp	q6, q7, [sp, #96]
    c0d8:	ldrb	w8, [x8]
    c0dc:	cbz	w8, c114 <debug@@Base+0x74>
    c0e0:	mov	x8, #0xffffffffffffffc8    	// #-56
    c0e4:	mov	x10, sp
    c0e8:	sub	x11, x29, #0x78
    c0ec:	movk	x8, #0xff80, lsl #32
    c0f0:	add	x9, x29, #0x20
    c0f4:	add	x10, x10, #0x80
    c0f8:	add	x11, x11, #0x38
    c0fc:	stp	x10, x8, [x29, #-16]
    c100:	stp	x9, x11, [x29, #-32]
    c104:	ldp	q0, q1, [x29, #-32]
    c108:	sub	x1, x29, #0x40
    c10c:	stp	q0, q1, [x29, #-64]
    c110:	bl	c124 <debug@@Base+0x84>
    c114:	ldr	x28, [sp, #272]
    c118:	ldp	x29, x30, [sp, #256]
    c11c:	add	sp, sp, #0x120
    c120:	ret
    c124:	sub	sp, sp, #0x30
    c128:	stp	x29, x30, [sp, #32]
    c12c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    c130:	ldr	x8, [x8, #3808]
    c134:	add	x29, sp, #0x20
    c138:	ldrb	w9, [x8]
    c13c:	cbnz	w9, c14c <debug@@Base+0xac>
    c140:	ldp	x29, x30, [sp, #32]
    c144:	add	sp, sp, #0x30
    c148:	ret
    c14c:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
    c150:	ldp	q0, q1, [x1]
    c154:	ldr	x9, [x9, #3816]
    c158:	mov	x8, x0
    c15c:	mov	x2, sp
    c160:	mov	x1, x8
    c164:	ldr	x0, [x9]
    c168:	stp	q0, q1, [sp]
    c16c:	bl	b6c0 <vfprintf@plt>
    c170:	b	c140 <debug@@Base+0xa0>

000000000000c174 <debug_error@@Base>:
    c174:	sub	sp, sp, #0x120
    c178:	stp	x29, x30, [sp, #256]
    c17c:	add	x29, sp, #0x100
    c180:	str	x28, [sp, #272]
    c184:	stp	x1, x2, [x29, #-120]
    c188:	stp	x3, x4, [x29, #-104]
    c18c:	stp	x5, x6, [x29, #-88]
    c190:	stur	x7, [x29, #-72]
    c194:	stp	q0, q1, [sp]
    c198:	stp	q2, q3, [sp, #32]
    c19c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    c1a0:	ldr	x8, [x8, #3808]
    c1a4:	stp	q4, q5, [sp, #64]
    c1a8:	stp	q6, q7, [sp, #96]
    c1ac:	ldrb	w8, [x8]
    c1b0:	cbz	w8, c204 <debug_error@@Base+0x90>
    c1b4:	mov	x8, #0xffffffffffffffc8    	// #-56
    c1b8:	mov	x10, sp
    c1bc:	sub	x11, x29, #0x78
    c1c0:	movk	x8, #0xff80, lsl #32
    c1c4:	add	x9, x29, #0x20
    c1c8:	add	x10, x10, #0x80
    c1cc:	add	x11, x11, #0x38
    c1d0:	stp	x10, x8, [x29, #-16]
    c1d4:	stp	x9, x11, [x29, #-32]
    c1d8:	ldp	q0, q1, [x29, #-32]
    c1dc:	sub	x1, x29, #0x40
    c1e0:	stp	q0, q1, [x29, #-64]
    c1e4:	bl	c124 <debug@@Base+0x84>
    c1e8:	bl	b6f0 <__errno_location@plt>
    c1ec:	ldr	w0, [x0]
    c1f0:	bl	af00 <strerror@plt>
    c1f4:	mov	x1, x0
    c1f8:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c1fc:	add	x0, x0, #0xfff
    c200:	bl	ab30 <debug@plt>
    c204:	ldr	x28, [sp, #272]
    c208:	ldp	x29, x30, [sp, #256]
    c20c:	add	sp, sp, #0x120
    c210:	ret

000000000000c214 <get_groff_preconv@@Base>:
    c214:	stp	x29, x30, [sp, #-32]!
    c218:	stp	x20, x19, [sp, #16]
    c21c:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    c220:	ldr	x20, [x20, #3832]
    c224:	mov	x29, sp
    c228:	ldr	x19, [x20]
    c22c:	cbnz	x19, c268 <get_groff_preconv@@Base+0x54>
    c230:	adrp	x19, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c234:	add	x19, x19, #0xf16
    c238:	mov	x0, x19
    c23c:	bl	b630 <pathsearch_executable@plt>
    c240:	tbnz	w0, #0, c264 <get_groff_preconv@@Base+0x50>
    c244:	adrp	x19, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c248:	add	x19, x19, #0xf17
    c24c:	mov	x0, x19
    c250:	bl	b630 <pathsearch_executable@plt>
    c254:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
    c258:	add	x8, x8, #0x4fc
    c25c:	tst	w0, #0x1
    c260:	csel	x19, x19, x8, ne  // ne = any
    c264:	str	x19, [x20]
    c268:	ldrb	w8, [x19]
    c26c:	cmp	w8, #0x0
    c270:	csel	x0, xzr, x19, eq  // eq = none
    c274:	ldp	x20, x19, [sp, #16]
    c278:	ldp	x29, x30, [sp], #32
    c27c:	ret

000000000000c280 <get_page_encoding@@Base>:
    c280:	stp	x29, x30, [sp, #-48]!
    c284:	str	x21, [sp, #16]
    c288:	stp	x20, x19, [sp, #32]
    c28c:	mov	x29, sp
    c290:	cbz	x0, c2a0 <get_page_encoding@@Base+0x20>
    c294:	ldrb	w8, [x0]
    c298:	mov	x19, x0
    c29c:	cbnz	w8, c2b4 <get_page_encoding@@Base+0x34>
    c2a0:	mov	w0, #0x5                   	// #5
    c2a4:	mov	x1, xzr
    c2a8:	bl	b830 <setlocale@plt>
    c2ac:	mov	x19, x0
    c2b0:	cbz	x0, c334 <get_page_encoding@@Base+0xb4>
    c2b4:	mov	w1, #0x2e                  	// #46
    c2b8:	mov	x0, x19
    c2bc:	bl	b300 <strchr@plt>
    c2c0:	cbz	x0, c300 <get_page_encoding@@Base+0x80>
    c2c4:	add	x19, x0, #0x1
    c2c8:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c2cc:	add	x1, x1, #0xf1f
    c2d0:	mov	x0, x19
    c2d4:	bl	b6a0 <strcspn@plt>
    c2d8:	mov	x1, x0
    c2dc:	mov	x0, x19
    c2e0:	bl	b4a0 <xstrndup@plt>
    c2e4:	mov	x20, x0
    c2e8:	bl	a880 <get_canonical_charset_name@plt>
    c2ec:	bl	ada0 <xstrdup@plt>
    c2f0:	mov	x19, x0
    c2f4:	mov	x0, x20
    c2f8:	bl	b1d0 <free@plt>
    c2fc:	b	c34c <get_page_encoding@@Base+0xcc>
    c300:	adrp	x20, 2b000 <vasnprintf@@Base+0xec4>
    c304:	adrp	x21, 3e000 <vasnprintf@@Base+0x13ec4>
    c308:	add	x20, x20, #0x7a
    c30c:	add	x21, x21, #0xc88
    c310:	mov	x0, x20
    c314:	bl	a890 <strlen@plt>
    c318:	mov	x2, x0
    c31c:	mov	x0, x20
    c320:	mov	x1, x19
    c324:	bl	acf0 <strncmp@plt>
    c328:	cbz	w0, c340 <get_page_encoding@@Base+0xc0>
    c32c:	ldr	x20, [x21], #16
    c330:	cbnz	x20, c310 <get_page_encoding@@Base+0x90>
    c334:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    c338:	add	x0, x0, #0x595
    c33c:	b	c344 <get_page_encoding@@Base+0xc4>
    c340:	ldur	x0, [x21, #-8]
    c344:	bl	ada0 <xstrdup@plt>
    c348:	mov	x19, x0
    c34c:	mov	x0, x19
    c350:	ldp	x20, x19, [sp, #32]
    c354:	ldr	x21, [sp, #16]
    c358:	ldp	x29, x30, [sp], #48
    c35c:	ret

000000000000c360 <get_canonical_charset_name@@Base>:
    c360:	stp	x29, x30, [sp, #-48]!
    c364:	str	x21, [sp, #16]
    c368:	stp	x20, x19, [sp, #32]
    c36c:	mov	x29, sp
    c370:	mov	x19, x0
    c374:	bl	ada0 <xstrdup@plt>
    c378:	ldrb	w21, [x0]
    c37c:	mov	x20, x0
    c380:	cbz	w21, c3a8 <get_canonical_charset_name@@Base+0x48>
    c384:	bl	aeb0 <__ctype_toupper_loc@plt>
    c388:	add	x8, x20, #0x1
    c38c:	ldr	x9, [x0]
    c390:	and	x10, x21, #0xff
    c394:	ldrb	w21, [x8]
    c398:	ldr	w9, [x9, x10, lsl #2]
    c39c:	sturb	w9, [x8, #-1]
    c3a0:	add	x8, x8, #0x1
    c3a4:	cbnz	w21, c38c <get_canonical_charset_name@@Base+0x2c>
    c3a8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    c3ac:	adrp	x21, 3e000 <vasnprintf@@Base+0x13ec4>
    c3b0:	add	x0, x0, #0x16c
    c3b4:	add	x21, x21, #0xf68
    c3b8:	mov	x1, x20
    c3bc:	bl	b120 <strcmp@plt>
    c3c0:	cbz	w0, c3d8 <get_canonical_charset_name@@Base+0x78>
    c3c4:	ldr	x0, [x21], #16
    c3c8:	cbnz	x0, c3b8 <get_canonical_charset_name@@Base+0x58>
    c3cc:	mov	x0, x20
    c3d0:	bl	b1d0 <free@plt>
    c3d4:	b	c3e4 <get_canonical_charset_name@@Base+0x84>
    c3d8:	mov	x0, x20
    c3dc:	bl	b1d0 <free@plt>
    c3e0:	ldur	x19, [x21, #-8]
    c3e4:	mov	x0, x19
    c3e8:	ldp	x20, x19, [sp, #32]
    c3ec:	ldr	x21, [sp, #16]
    c3f0:	ldp	x29, x30, [sp], #48
    c3f4:	ret

000000000000c3f8 <get_source_encoding@@Base>:
    c3f8:	stp	x29, x30, [sp, #-48]!
    c3fc:	stp	x22, x21, [sp, #16]
    c400:	stp	x20, x19, [sp, #32]
    c404:	mov	x29, sp
    c408:	cbz	x0, c418 <get_source_encoding@@Base+0x20>
    c40c:	ldrb	w8, [x0]
    c410:	mov	x19, x0
    c414:	cbnz	w8, c42c <get_source_encoding@@Base+0x34>
    c418:	mov	w0, #0x5                   	// #5
    c41c:	mov	x1, xzr
    c420:	bl	b830 <setlocale@plt>
    c424:	mov	x19, x0
    c428:	cbz	x0, c474 <get_source_encoding@@Base+0x7c>
    c42c:	adrp	x21, 2b000 <vasnprintf@@Base+0xec4>
    c430:	adrp	x22, 3e000 <vasnprintf@@Base+0x13ec4>
    c434:	adrp	x20, 2b000 <vasnprintf@@Base+0xec4>
    c438:	add	x21, x21, #0x7a
    c43c:	add	x22, x22, #0xc88
    c440:	add	x20, x20, #0x595
    c444:	mov	x0, x21
    c448:	bl	a890 <strlen@plt>
    c44c:	mov	x2, x0
    c450:	mov	x0, x21
    c454:	mov	x1, x19
    c458:	bl	acf0 <strncmp@plt>
    c45c:	cbz	w0, c46c <get_source_encoding@@Base+0x74>
    c460:	ldr	x21, [x22], #16
    c464:	cbnz	x21, c444 <get_source_encoding@@Base+0x4c>
    c468:	b	c47c <get_source_encoding@@Base+0x84>
    c46c:	ldur	x20, [x22, #-8]
    c470:	b	c47c <get_source_encoding@@Base+0x84>
    c474:	adrp	x20, 2b000 <vasnprintf@@Base+0xec4>
    c478:	add	x20, x20, #0x595
    c47c:	mov	x0, x20
    c480:	ldp	x20, x19, [sp, #32]
    c484:	ldp	x22, x21, [sp, #16]
    c488:	ldp	x29, x30, [sp], #48
    c48c:	ret

000000000000c490 <get_locale_charset@@Base>:
    c490:	stp	x29, x30, [sp, #-32]!
    c494:	mov	w0, wzr
    c498:	mov	x1, xzr
    c49c:	stp	x20, x19, [sp, #16]
    c4a0:	mov	x29, sp
    c4a4:	bl	b830 <setlocale@plt>
    c4a8:	cbz	x0, c4b8 <get_locale_charset@@Base+0x28>
    c4ac:	bl	ada0 <xstrdup@plt>
    c4b0:	mov	x19, x0
    c4b4:	b	c4bc <get_locale_charset@@Base+0x2c>
    c4b8:	mov	x19, xzr
    c4bc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
    c4c0:	add	x1, x1, #0x4fc
    c4c4:	mov	w0, wzr
    c4c8:	bl	b830 <setlocale@plt>
    c4cc:	bl	b730 <locale_charset@plt>
    c4d0:	mov	x20, x0
    c4d4:	mov	w0, wzr
    c4d8:	mov	x1, x19
    c4dc:	bl	b830 <setlocale@plt>
    c4e0:	mov	x0, x19
    c4e4:	bl	b1d0 <free@plt>
    c4e8:	cbz	x20, c500 <get_locale_charset@@Base+0x70>
    c4ec:	ldrb	w8, [x20]
    c4f0:	cbz	w8, c500 <get_locale_charset@@Base+0x70>
    c4f4:	mov	x0, x20
    c4f8:	bl	a880 <get_canonical_charset_name@plt>
    c4fc:	b	c504 <get_locale_charset@@Base+0x74>
    c500:	mov	x0, xzr
    c504:	ldp	x20, x19, [sp, #16]
    c508:	ldp	x29, x30, [sp], #32
    c50c:	ret

000000000000c510 <find_charset_locale@@Base>:
    c510:	sub	sp, sp, #0x70
    c514:	stp	x29, x30, [sp, #48]
    c518:	stp	x24, x23, [sp, #64]
    c51c:	stp	x22, x21, [sp, #80]
    c520:	stp	x20, x19, [sp, #96]
    c524:	add	x29, sp, #0x30
    c528:	mov	x19, x0
    c52c:	bl	a880 <get_canonical_charset_name@plt>
    c530:	adrp	x8, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c534:	add	x8, x8, #0xf22
    c538:	ldr	q0, [x8]
    c53c:	ldur	q1, [x8, #10]
    c540:	mov	x22, x0
    c544:	stp	xzr, xzr, [sp]
    c548:	str	q0, [sp, #16]
    c54c:	stur	q1, [sp, #26]
    c550:	bl	b5d0 <get_locale_charset@plt>
    c554:	mov	x1, x0
    c558:	mov	x0, x19
    c55c:	bl	b120 <strcmp@plt>
    c560:	cbz	w0, c580 <find_charset_locale@@Base+0x70>
    c564:	mov	w0, wzr
    c568:	mov	x1, xzr
    c56c:	bl	b830 <setlocale@plt>
    c570:	cbz	x0, c588 <find_charset_locale@@Base+0x78>
    c574:	bl	ada0 <xstrdup@plt>
    c578:	mov	x19, x0
    c57c:	b	c58c <find_charset_locale@@Base+0x7c>
    c580:	mov	x21, xzr
    c584:	b	c720 <find_charset_locale@@Base+0x210>
    c588:	mov	x19, xzr
    c58c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    c590:	add	x1, x1, #0x391
    c594:	add	x0, sp, #0x10
    c598:	bl	aba0 <fopen@plt>
    c59c:	mov	x20, x0
    c5a0:	mov	x21, xzr
    c5a4:	b	c5bc <find_charset_locale@@Base+0xac>
    c5a8:	ldr	x0, [sp, #8]
    c5ac:	bl	b1d0 <free@plt>
    c5b0:	mov	w24, wzr
    c5b4:	str	xzr, [sp, #8]
    c5b8:	cbnz	w24, c6ec <find_charset_locale@@Base+0x1dc>
    c5bc:	cbz	x20, c668 <find_charset_locale@@Base+0x158>
    c5c0:	add	x0, sp, #0x8
    c5c4:	mov	x1, sp
    c5c8:	mov	x2, x20
    c5cc:	bl	b190 <getline@plt>
    c5d0:	tbnz	x0, #63, c66c <find_charset_locale@@Base+0x15c>
    c5d4:	ldr	x0, [sp, #8]
    c5d8:	mov	w1, #0x20                  	// #32
    c5dc:	bl	b300 <strchr@plt>
    c5e0:	cbz	x0, c5a8 <find_charset_locale@@Base+0x98>
    c5e4:	mov	x24, x0
    c5e8:	add	x0, x0, #0x1
    c5ec:	bl	ada0 <xstrdup@plt>
    c5f0:	mov	w1, #0xa                   	// #10
    c5f4:	mov	x23, x0
    c5f8:	bl	b300 <strchr@plt>
    c5fc:	cbz	x0, c604 <find_charset_locale@@Base+0xf4>
    c600:	strb	wzr, [x0]
    c604:	mov	x0, x23
    c608:	bl	a880 <get_canonical_charset_name@plt>
    c60c:	mov	x1, x0
    c610:	mov	x0, x22
    c614:	bl	b120 <strcmp@plt>
    c618:	cbz	w0, c624 <find_charset_locale@@Base+0x114>
    c61c:	mov	w24, wzr
    c620:	b	c648 <find_charset_locale@@Base+0x138>
    c624:	ldr	x0, [sp, #8]
    c628:	sub	x1, x24, x0
    c62c:	bl	b4a0 <xstrndup@plt>
    c630:	mov	x21, x0
    c634:	mov	w0, wzr
    c638:	mov	x1, x21
    c63c:	bl	b830 <setlocale@plt>
    c640:	cbz	x0, c658 <find_charset_locale@@Base+0x148>
    c644:	mov	w24, #0x4                   	// #4
    c648:	mov	x0, x23
    c64c:	bl	b1d0 <free@plt>
    c650:	cbnz	w24, c5b8 <find_charset_locale@@Base+0xa8>
    c654:	b	c5a8 <find_charset_locale@@Base+0x98>
    c658:	mov	x0, x21
    c65c:	bl	b1d0 <free@plt>
    c660:	mov	x21, xzr
    c664:	b	c61c <find_charset_locale@@Base+0x10c>
    c668:	mov	x21, xzr
    c66c:	mov	x0, x22
    c670:	bl	a890 <strlen@plt>
    c674:	cmp	x0, #0x5
    c678:	b.cc	c6f4 <find_charset_locale@@Base+0x1e4>  // b.lo, b.ul, b.last
    c67c:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c680:	add	x1, x1, #0xf3e
    c684:	mov	w2, #0x5                   	// #5
    c688:	mov	x0, x22
    c68c:	bl	acf0 <strncmp@plt>
    c690:	cbnz	w0, c6f4 <find_charset_locale@@Base+0x1e4>
    c694:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c698:	add	x0, x0, #0xf3c
    c69c:	bl	ada0 <xstrdup@plt>
    c6a0:	mov	x21, x0
    c6a4:	mov	w0, wzr
    c6a8:	mov	x1, x21
    c6ac:	bl	b830 <setlocale@plt>
    c6b0:	cbnz	x0, c6f4 <find_charset_locale@@Base+0x1e4>
    c6b4:	mov	x0, x21
    c6b8:	bl	b1d0 <free@plt>
    c6bc:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c6c0:	add	x0, x0, #0xf44
    c6c4:	bl	ada0 <xstrdup@plt>
    c6c8:	mov	x21, x0
    c6cc:	mov	w0, wzr
    c6d0:	mov	x1, x21
    c6d4:	bl	b830 <setlocale@plt>
    c6d8:	cbnz	x0, c6f4 <find_charset_locale@@Base+0x1e4>
    c6dc:	mov	x0, x21
    c6e0:	bl	b1d0 <free@plt>
    c6e4:	mov	x21, xzr
    c6e8:	b	c6f4 <find_charset_locale@@Base+0x1e4>
    c6ec:	cmp	w24, #0x4
    c6f0:	b.ne	c720 <find_charset_locale@@Base+0x210>  // b.any
    c6f4:	ldr	x0, [sp, #8]
    c6f8:	bl	b1d0 <free@plt>
    c6fc:	mov	w0, wzr
    c700:	mov	x1, x19
    c704:	bl	b830 <setlocale@plt>
    c708:	mov	x0, x19
    c70c:	bl	b1d0 <free@plt>
    c710:	cbz	x20, c720 <find_charset_locale@@Base+0x210>
    c714:	mov	x0, x20
    c718:	bl	ab50 <fclose@plt>
    c71c:	b	c720 <find_charset_locale@@Base+0x210>
    c720:	mov	x0, x21
    c724:	ldp	x20, x19, [sp, #96]
    c728:	ldp	x22, x21, [sp, #80]
    c72c:	ldp	x24, x23, [sp, #64]
    c730:	ldp	x29, x30, [sp, #48]
    c734:	add	sp, sp, #0x70
    c738:	ret

000000000000c73c <get_default_device@@Base>:
    c73c:	stp	x29, x30, [sp, #-64]!
    c740:	str	x23, [sp, #16]
    c744:	stp	x22, x21, [sp, #32]
    c748:	stp	x20, x19, [sp, #48]
    c74c:	mov	x29, sp
    c750:	mov	x20, x1
    c754:	mov	x19, x0
    c758:	bl	acd0 <get_groff_preconv@plt>
    c75c:	cbz	x0, c784 <get_default_device@@Base+0x48>
    c760:	cbz	x19, c778 <get_default_device@@Base+0x3c>
    c764:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c768:	add	x1, x1, #0xf50
    c76c:	mov	x0, x19
    c770:	bl	b120 <strcmp@plt>
    c774:	cbz	w0, c7f8 <get_default_device@@Base+0xbc>
    c778:	adrp	x21, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c77c:	add	x21, x21, #0xf65
    c780:	b	c80c <get_default_device@@Base+0xd0>
    c784:	cbz	x19, c804 <get_default_device@@Base+0xc8>
    c788:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c78c:	adrp	x23, 3f000 <vasnprintf@@Base+0x14ec4>
    c790:	adrp	x22, 2b000 <vasnprintf@@Base+0xec4>
    c794:	add	x0, x0, #0xf50
    c798:	add	x23, x23, #0x220
    c79c:	add	x22, x22, #0x32d
    c7a0:	b	c7b4 <get_default_device@@Base+0x78>
    c7a4:	ldr	x21, [x23]
    c7a8:	mov	w8, wzr
    c7ac:	cbnz	w8, c7e4 <get_default_device@@Base+0xa8>
    c7b0:	b	c80c <get_default_device@@Base+0xd0>
    c7b4:	mov	x1, x19
    c7b8:	bl	b120 <strcmp@plt>
    c7bc:	cbnz	w0, c7e4 <get_default_device@@Base+0xa8>
    c7c0:	ldr	x0, [x23]
    c7c4:	mov	x1, x20
    c7c8:	bl	a970 <get_roff_encoding@plt>
    c7cc:	mov	x1, x0
    c7d0:	mov	x0, x20
    c7d4:	bl	c970 <get_roff_encoding@@Base+0x14c>
    c7d8:	tbnz	w0, #0, c7a4 <get_default_device@@Base+0x68>
    c7dc:	mov	w8, #0x1                   	// #1
    c7e0:	cbz	w8, c80c <get_default_device@@Base+0xd0>
    c7e4:	ldr	x0, [x23, #8]
    c7e8:	add	x23, x23, #0x10
    c7ec:	cbnz	x0, c7b4 <get_default_device@@Base+0x78>
    c7f0:	mov	x21, x22
    c7f4:	b	c80c <get_default_device@@Base+0xd0>
    c7f8:	adrp	x21, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c7fc:	add	x21, x21, #0xf5f
    c800:	b	c80c <get_default_device@@Base+0xd0>
    c804:	adrp	x21, 2b000 <vasnprintf@@Base+0xec4>
    c808:	add	x21, x21, #0x32d
    c80c:	mov	x0, x21
    c810:	ldp	x20, x19, [sp, #48]
    c814:	ldp	x22, x21, [sp, #32]
    c818:	ldr	x23, [sp, #16]
    c81c:	ldp	x29, x30, [sp], #64
    c820:	ret

000000000000c824 <get_roff_encoding@@Base>:
    c824:	stp	x29, x30, [sp, #-48]!
    c828:	stp	x20, x19, [sp, #32]
    c82c:	mov	x19, x1
    c830:	mov	x20, x0
    c834:	stp	x22, x21, [sp, #16]
    c838:	mov	x29, sp
    c83c:	cbz	x0, c870 <get_roff_encoding@@Base+0x4c>
    c840:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c844:	adrp	x22, 3f000 <vasnprintf@@Base+0x14ec4>
    c848:	adrp	x21, 2b000 <vasnprintf@@Base+0xec4>
    c84c:	add	x0, x0, #0xf5f
    c850:	add	x22, x22, #0x2d0
    c854:	add	x21, x21, #0x5a0
    c858:	mov	x1, x20
    c85c:	bl	b120 <strcmp@plt>
    c860:	cbz	w0, c880 <get_roff_encoding@@Base+0x5c>
    c864:	ldr	x0, [x22], #24
    c868:	cbnz	x0, c858 <get_roff_encoding@@Base+0x34>
    c86c:	b	c878 <get_roff_encoding@@Base+0x54>
    c870:	adrp	x21, 2b000 <vasnprintf@@Base+0xec4>
    c874:	add	x21, x21, #0x5a0
    c878:	cbnz	x20, c888 <get_roff_encoding@@Base+0x64>
    c87c:	b	c958 <get_roff_encoding@@Base+0x134>
    c880:	ldur	x21, [x22, #-16]
    c884:	cbz	x20, c958 <get_roff_encoding@@Base+0x134>
    c888:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c88c:	add	x1, x1, #0xf65
    c890:	mov	x0, x20
    c894:	bl	b120 <strcmp@plt>
    c898:	cbnz	w0, c958 <get_roff_encoding@@Base+0x134>
    c89c:	bl	acd0 <get_groff_preconv@plt>
    c8a0:	cbnz	x0, c958 <get_roff_encoding@@Base+0x134>
    c8a4:	bl	b5d0 <get_locale_charset@plt>
    c8a8:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c8ac:	add	x1, x1, #0xf3e
    c8b0:	bl	b120 <strcmp@plt>
    c8b4:	cbnz	w0, c958 <get_roff_encoding@@Base+0x134>
    c8b8:	mov	x1, xzr
    c8bc:	bl	b830 <setlocale@plt>
    c8c0:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c8c4:	add	x1, x1, #0xf6a
    c8c8:	mov	w2, #0x5                   	// #5
    c8cc:	mov	x20, x0
    c8d0:	bl	acf0 <strncmp@plt>
    c8d4:	cbz	w0, c950 <get_roff_encoding@@Base+0x12c>
    c8d8:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c8dc:	add	x1, x1, #0xf70
    c8e0:	mov	w2, #0x5                   	// #5
    c8e4:	mov	x0, x20
    c8e8:	bl	acf0 <strncmp@plt>
    c8ec:	cbz	w0, c950 <get_roff_encoding@@Base+0x12c>
    c8f0:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c8f4:	add	x1, x1, #0xf76
    c8f8:	mov	w2, #0x5                   	// #5
    c8fc:	mov	x0, x20
    c900:	bl	acf0 <strncmp@plt>
    c904:	cbz	w0, c950 <get_roff_encoding@@Base+0x12c>
    c908:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c90c:	add	x1, x1, #0xf7c
    c910:	mov	w2, #0x5                   	// #5
    c914:	mov	x0, x20
    c918:	bl	acf0 <strncmp@plt>
    c91c:	cbz	w0, c950 <get_roff_encoding@@Base+0x12c>
    c920:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c924:	add	x1, x1, #0xf82
    c928:	mov	w2, #0x5                   	// #5
    c92c:	mov	x0, x20
    c930:	bl	acf0 <strncmp@plt>
    c934:	cbz	w0, c950 <get_roff_encoding@@Base+0x12c>
    c938:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c93c:	add	x1, x1, #0xf88
    c940:	mov	w2, #0x5                   	// #5
    c944:	mov	x0, x20
    c948:	bl	acf0 <strncmp@plt>
    c94c:	cbnz	w0, c958 <get_roff_encoding@@Base+0x134>
    c950:	adrp	x21, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c954:	add	x21, x21, #0xf3e
    c958:	cmp	x21, #0x0
    c95c:	csel	x0, x19, x21, eq  // eq = none
    c960:	ldp	x20, x19, [sp, #32]
    c964:	ldp	x22, x21, [sp, #16]
    c968:	ldp	x29, x30, [sp], #48
    c96c:	ret
    c970:	stp	x29, x30, [sp, #-32]!
    c974:	stp	x20, x19, [sp, #16]
    c978:	mov	x29, sp
    c97c:	mov	x19, x1
    c980:	mov	x20, x0
    c984:	bl	b120 <strcmp@plt>
    c988:	cbz	w0, ca70 <get_roff_encoding@@Base+0x24c>
    c98c:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c990:	add	x1, x1, #0xf50
    c994:	mov	x0, x20
    c998:	bl	b120 <strcmp@plt>
    c99c:	cbz	w0, ca70 <get_roff_encoding@@Base+0x24c>
    c9a0:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c9a4:	add	x1, x1, #0xf3e
    c9a8:	mov	x0, x20
    c9ac:	bl	b120 <strcmp@plt>
    c9b0:	cbz	w0, ca70 <get_roff_encoding@@Base+0x24c>
    c9b4:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    c9b8:	add	x1, x1, #0xf50
    c9bc:	mov	x0, x19
    c9c0:	bl	b120 <strcmp@plt>
    c9c4:	cbz	w0, ca70 <get_roff_encoding@@Base+0x24c>
    c9c8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    c9cc:	add	x1, x1, #0x167
    c9d0:	mov	x0, x20
    c9d4:	bl	b120 <strcmp@plt>
    c9d8:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    c9dc:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    c9e0:	add	x1, x1, #0x15d
    c9e4:	mov	x0, x20
    c9e8:	bl	b120 <strcmp@plt>
    c9ec:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    c9f0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    c9f4:	add	x1, x1, #0xe3
    c9f8:	mov	x0, x20
    c9fc:	bl	b120 <strcmp@plt>
    ca00:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    ca04:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ca08:	add	x1, x1, #0x24b
    ca0c:	mov	x0, x20
    ca10:	bl	b120 <strcmp@plt>
    ca14:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    ca18:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ca1c:	add	x1, x1, #0x159
    ca20:	mov	x0, x20
    ca24:	bl	b120 <strcmp@plt>
    ca28:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    ca2c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ca30:	add	x1, x1, #0xed
    ca34:	mov	x0, x20
    ca38:	bl	b120 <strcmp@plt>
    ca3c:	cbz	w0, ca54 <get_roff_encoding@@Base+0x230>
    ca40:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ca44:	add	x1, x1, #0x264
    ca48:	mov	x0, x20
    ca4c:	bl	b120 <strcmp@plt>
    ca50:	cbnz	w0, ca68 <get_roff_encoding@@Base+0x244>
    ca54:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    ca58:	add	x1, x1, #0xf3e
    ca5c:	mov	x0, x19
    ca60:	bl	b120 <strcmp@plt>
    ca64:	cbz	w0, ca70 <get_roff_encoding@@Base+0x24c>
    ca68:	mov	w0, wzr
    ca6c:	b	ca74 <get_roff_encoding@@Base+0x250>
    ca70:	mov	w0, #0x1                   	// #1
    ca74:	ldp	x20, x19, [sp, #16]
    ca78:	ldp	x29, x30, [sp], #32
    ca7c:	ret

000000000000ca80 <is_roff_device@@Base>:
    ca80:	stp	x29, x30, [sp, #-32]!
    ca84:	stp	x20, x19, [sp, #16]
    ca88:	mov	x19, x0
    ca8c:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    ca90:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    ca94:	mov	x29, sp
    ca98:	add	x0, x0, #0xf5f
    ca9c:	add	x20, x20, #0x2d0
    caa0:	mov	x1, x19
    caa4:	bl	b120 <strcmp@plt>
    caa8:	cbz	w0, cab8 <is_roff_device@@Base+0x38>
    caac:	ldr	x0, [x20], #24
    cab0:	cbnz	x0, caa0 <is_roff_device@@Base+0x20>
    cab4:	b	cabc <is_roff_device@@Base+0x3c>
    cab8:	mov	w0, #0x1                   	// #1
    cabc:	ldp	x20, x19, [sp, #16]
    cac0:	ldp	x29, x30, [sp], #32
    cac4:	ret

000000000000cac8 <get_output_encoding@@Base>:
    cac8:	stp	x29, x30, [sp, #-32]!
    cacc:	stp	x20, x19, [sp, #16]
    cad0:	mov	x19, x0
    cad4:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cad8:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    cadc:	add	x0, x0, #0xf5f
    cae0:	add	x20, x20, #0x2d0
    cae4:	mov	x29, sp
    cae8:	mov	x1, x19
    caec:	bl	b120 <strcmp@plt>
    caf0:	cbz	w0, cb00 <get_output_encoding@@Base+0x38>
    caf4:	ldr	x0, [x20], #24
    caf8:	cbnz	x0, cae8 <get_output_encoding@@Base+0x20>
    cafc:	b	cb04 <get_output_encoding@@Base+0x3c>
    cb00:	ldur	x0, [x20, #-8]
    cb04:	ldp	x20, x19, [sp, #16]
    cb08:	ldp	x29, x30, [sp], #32
    cb0c:	ret

000000000000cb10 <get_less_charset@@Base>:
    cb10:	stp	x29, x30, [sp, #-48]!
    cb14:	str	x21, [sp, #16]
    cb18:	stp	x20, x19, [sp, #32]
    cb1c:	mov	x29, sp
    cb20:	cbz	x0, cb58 <get_less_charset@@Base+0x48>
    cb24:	mov	x20, x0
    cb28:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cb2c:	adrp	x21, 3f000 <vasnprintf@@Base+0x14ec4>
    cb30:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    cb34:	add	x0, x0, #0xf50
    cb38:	add	x21, x21, #0x438
    cb3c:	add	x19, x19, #0x5ab
    cb40:	mov	x1, x20
    cb44:	bl	b120 <strcmp@plt>
    cb48:	cbz	w0, cb64 <get_less_charset@@Base+0x54>
    cb4c:	ldr	x0, [x21], #24
    cb50:	cbnz	x0, cb40 <get_less_charset@@Base+0x30>
    cb54:	b	cb68 <get_less_charset@@Base+0x58>
    cb58:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    cb5c:	add	x19, x19, #0x5ab
    cb60:	b	cb68 <get_less_charset@@Base+0x58>
    cb64:	ldur	x19, [x21, #-16]
    cb68:	mov	x0, x19
    cb6c:	ldp	x20, x19, [sp, #32]
    cb70:	ldr	x21, [sp, #16]
    cb74:	ldp	x29, x30, [sp], #48
    cb78:	ret

000000000000cb7c <get_jless_charset@@Base>:
    cb7c:	stp	x29, x30, [sp, #-32]!
    cb80:	stp	x20, x19, [sp, #16]
    cb84:	mov	x29, sp
    cb88:	cbz	x0, cbbc <get_jless_charset@@Base+0x40>
    cb8c:	mov	x19, x0
    cb90:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cb94:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    cb98:	add	x0, x0, #0xf50
    cb9c:	add	x20, x20, #0x438
    cba0:	mov	x1, x19
    cba4:	bl	b120 <strcmp@plt>
    cba8:	cbz	w0, cbb8 <get_jless_charset@@Base+0x3c>
    cbac:	ldr	x0, [x20], #24
    cbb0:	cbnz	x0, cba0 <get_jless_charset@@Base+0x24>
    cbb4:	b	cbbc <get_jless_charset@@Base+0x40>
    cbb8:	ldur	x0, [x20, #-8]
    cbbc:	ldp	x20, x19, [sp, #16]
    cbc0:	ldp	x29, x30, [sp], #32
    cbc4:	ret

000000000000cbc8 <check_preprocessor_encoding@@Base>:
    cbc8:	stp	x29, x30, [sp, #-80]!
    cbcc:	str	x25, [sp, #16]
    cbd0:	stp	x24, x23, [sp, #32]
    cbd4:	stp	x22, x21, [sp, #48]
    cbd8:	stp	x20, x19, [sp, #64]
    cbdc:	mov	x29, sp
    cbe0:	mov	x19, x2
    cbe4:	mov	x20, x1
    cbe8:	bl	b350 <pipeline_peekline@plt>
    cbec:	mov	x21, x0
    cbf0:	cbz	x0, cc24 <check_preprocessor_encoding@@Base+0x5c>
    cbf4:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cbf8:	add	x1, x1, #0xf8e
    cbfc:	mov	w2, #0x4                   	// #4
    cc00:	mov	x0, x21
    cc04:	bl	acf0 <strncmp@plt>
    cc08:	cbz	w0, cc34 <check_preprocessor_encoding@@Base+0x6c>
    cc0c:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cc10:	add	x1, x1, #0xf93
    cc14:	mov	w2, #0x4                   	// #4
    cc18:	mov	x0, x21
    cc1c:	bl	acf0 <strncmp@plt>
    cc20:	cbz	w0, cc34 <check_preprocessor_encoding@@Base+0x6c>
    cc24:	mov	w8, wzr
    cc28:	mov	x24, xzr
    cc2c:	cbnz	w8, cc80 <check_preprocessor_encoding@@Base+0xb8>
    cc30:	b	ccf4 <check_preprocessor_encoding@@Base+0x12c>
    cc34:	mov	w1, #0xa                   	// #10
    cc38:	mov	x0, x21
    cc3c:	bl	b300 <strchr@plt>
    cc40:	mov	x22, x0
    cc44:	add	x23, x21, #0x4
    cc48:	cbnz	x0, cc58 <check_preprocessor_encoding@@Base+0x90>
    cc4c:	mov	x0, x23
    cc50:	bl	a890 <strlen@plt>
    cc54:	add	x22, x23, x0
    cc58:	adrp	x2, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cc5c:	sub	x1, x22, x23
    cc60:	add	x2, x2, #0xf98
    cc64:	mov	w3, #0x3                   	// #3
    cc68:	mov	x0, x23
    cc6c:	bl	afa0 <memmem@plt>
    cc70:	mov	x23, x0
    cc74:	mov	w8, #0x1                   	// #1
    cc78:	mov	x24, xzr
    cc7c:	cbz	w8, ccf4 <check_preprocessor_encoding@@Base+0x12c>
    cc80:	cbz	x23, ccf4 <check_preprocessor_encoding@@Base+0x12c>
    cc84:	adrp	x24, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cc88:	add	x23, x23, #0x3
    cc8c:	add	x24, x24, #0xf9c
    cc90:	cmp	x23, x22
    cc94:	b.cs	cce4 <check_preprocessor_encoding@@Base+0x11c>  // b.hs, b.nlast
    cc98:	ldrb	w8, [x23]
    cc9c:	cbz	w8, cce4 <check_preprocessor_encoding@@Base+0x11c>
    cca0:	sub	x23, x23, #0x1
    cca4:	ldrb	w8, [x23, #1]!
    cca8:	cmp	w8, #0x20
    ccac:	b.eq	cca4 <check_preprocessor_encoding@@Base+0xdc>  // b.none
    ccb0:	mov	w2, #0x7                   	// #7
    ccb4:	mov	x0, x23
    ccb8:	mov	x1, x24
    ccbc:	bl	acf0 <strncmp@plt>
    ccc0:	cbz	w0, cd5c <check_preprocessor_encoding@@Base+0x194>
    ccc4:	sub	x2, x22, x23
    ccc8:	mov	w1, #0x3b                  	// #59
    cccc:	mov	x0, x23
    ccd0:	bl	b440 <memchr@plt>
    ccd4:	cmp	x0, #0x0
    ccd8:	csinc	x23, xzr, x0, eq  // eq = none
    ccdc:	cbnz	x0, cc90 <check_preprocessor_encoding@@Base+0xc8>
    cce0:	mov	x23, xzr
    cce4:	mov	x24, xzr
    cce8:	mov	x25, xzr
    ccec:	cbnz	x20, ccfc <check_preprocessor_encoding@@Base+0x134>
    ccf0:	b	cd40 <check_preprocessor_encoding@@Base+0x178>
    ccf4:	mov	x25, x24
    ccf8:	cbz	x20, cd40 <check_preprocessor_encoding@@Base+0x178>
    ccfc:	cbz	x19, cd40 <check_preprocessor_encoding@@Base+0x178>
    cd00:	cbz	x25, cd40 <check_preprocessor_encoding@@Base+0x178>
    cd04:	mov	x0, x25
    cd08:	mov	x1, x20
    cd0c:	bl	ae80 <strcasecmp@plt>
    cd10:	cbz	w0, cd40 <check_preprocessor_encoding@@Base+0x178>
    cd14:	cbz	x22, cdac <check_preprocessor_encoding@@Base+0x1e4>
    cd18:	cbz	x23, cdcc <check_preprocessor_encoding@@Base+0x204>
    cd1c:	add	x5, x23, x24
    cd20:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    cd24:	sub	w1, w23, w21
    cd28:	sub	w4, w22, w5
    cd2c:	add	x0, x0, #0x6e
    cd30:	mov	x2, x21
    cd34:	mov	x3, x20
    cd38:	bl	b230 <xasprintf@plt>
    cd3c:	str	x0, [x19]
    cd40:	mov	x0, x25
    cd44:	ldp	x20, x19, [sp, #64]
    cd48:	ldp	x22, x21, [sp, #48]
    cd4c:	ldp	x24, x23, [sp, #32]
    cd50:	ldr	x25, [sp, #16]
    cd54:	ldp	x29, x30, [sp], #80
    cd58:	ret
    cd5c:	add	x23, x23, #0x6
    cd60:	ldrb	w8, [x23, #1]!
    cd64:	cmp	w8, #0x20
    cd68:	b.eq	cd60 <check_preprocessor_encoding@@Base+0x198>  // b.none
    cd6c:	adrp	x1, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cd70:	add	x1, x1, #0xfa4
    cd74:	mov	x0, x23
    cd78:	bl	b2d0 <strspn@plt>
    cd7c:	mov	x24, x0
    cd80:	mov	x0, x23
    cd84:	mov	x1, x24
    cd88:	bl	b4a0 <xstrndup@plt>
    cd8c:	bl	cdec <check_preprocessor_encoding@@Base+0x224>
    cd90:	mov	x25, x0
    cd94:	adrp	x0, 2a000 <rpl_re_set_registers@@Base+0xb458>
    cd98:	add	x0, x0, #0xfea
    cd9c:	mov	x1, x25
    cda0:	bl	ab30 <debug@plt>
    cda4:	cbnz	x20, ccfc <check_preprocessor_encoding@@Base+0x134>
    cda8:	b	cd40 <check_preprocessor_encoding@@Base+0x178>
    cdac:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    cdb0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    cdb4:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
    cdb8:	add	x0, x0, #0x5
    cdbc:	add	x1, x1, #0x13
    cdc0:	add	x3, x3, #0x1f
    cdc4:	mov	w2, #0x39a                 	// #922
    cdc8:	bl	b6e0 <__assert_fail@plt>
    cdcc:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    cdd0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    cdd4:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
    cdd8:	add	x0, x0, #0x64
    cddc:	add	x1, x1, #0x13
    cde0:	add	x3, x3, #0x1f
    cde4:	mov	w2, #0x39b                 	// #923
    cde8:	bl	b6e0 <__assert_fail@plt>
    cdec:	stp	x29, x30, [sp, #-48]!
    cdf0:	str	x21, [sp, #16]
    cdf4:	stp	x20, x19, [sp, #32]
    cdf8:	mov	x29, sp
    cdfc:	mov	x19, x0
    ce00:	bl	a890 <strlen@plt>
    ce04:	mov	x20, x0
    ce08:	cmp	x0, #0x5
    ce0c:	b.cc	ce48 <check_preprocessor_encoding@@Base+0x280>  // b.lo, b.ul, b.last
    ce10:	add	x8, x19, x20
    ce14:	sub	x21, x8, #0x4
    ce18:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ce1c:	add	x1, x1, #0x393
    ce20:	mov	x0, x21
    ce24:	bl	ae80 <strcasecmp@plt>
    ce28:	cbnz	w0, ce34 <check_preprocessor_encoding@@Base+0x26c>
    ce2c:	add	x8, x20, x19
    ce30:	sturb	wzr, [x8, #-4]
    ce34:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ce38:	add	x1, x1, #0x398
    ce3c:	mov	x0, x21
    ce40:	bl	ae80 <strcasecmp@plt>
    ce44:	cbz	w0, ce74 <check_preprocessor_encoding@@Base+0x2ac>
    ce48:	cmp	x20, #0x6
    ce4c:	b.cc	ce84 <check_preprocessor_encoding@@Base+0x2bc>  // b.lo, b.ul, b.last
    ce50:	add	x8, x19, x20
    ce54:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ce58:	sub	x0, x8, #0x5
    ce5c:	add	x1, x1, #0x39d
    ce60:	bl	ae80 <strcasecmp@plt>
    ce64:	cbnz	w0, ce84 <check_preprocessor_encoding@@Base+0x2bc>
    ce68:	add	x8, x20, x19
    ce6c:	sturb	wzr, [x8, #-5]
    ce70:	b	ce84 <check_preprocessor_encoding@@Base+0x2bc>
    ce74:	add	x8, x20, x19
    ce78:	sturb	wzr, [x8, #-4]
    ce7c:	cmp	x20, #0x6
    ce80:	b.cs	ce50 <check_preprocessor_encoding@@Base+0x288>  // b.hs, b.nlast
    ce84:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    ce88:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    ce8c:	add	x0, x0, #0x3a3
    ce90:	add	x20, x20, #0x4f0
    ce94:	mov	x1, x19
    ce98:	bl	ae80 <strcasecmp@plt>
    ce9c:	cbz	w0, ceac <check_preprocessor_encoding@@Base+0x2e4>
    cea0:	ldr	x0, [x20], #16
    cea4:	cbnz	x0, ce94 <check_preprocessor_encoding@@Base+0x2cc>
    cea8:	b	cec0 <check_preprocessor_encoding@@Base+0x2f8>
    ceac:	mov	x0, x19
    ceb0:	bl	b1d0 <free@plt>
    ceb4:	ldur	x0, [x20, #-8]
    ceb8:	bl	ada0 <xstrdup@plt>
    cebc:	mov	x19, x0
    cec0:	mov	x0, x19
    cec4:	ldp	x20, x19, [sp, #32]
    cec8:	ldr	x21, [sp, #16]
    cecc:	ldp	x29, x30, [sp], #48
    ced0:	ret

000000000000ced4 <string_equals@@Base>:
    ced4:	stp	x29, x30, [sp, #-16]!
    ced8:	mov	x29, sp
    cedc:	bl	b120 <strcmp@plt>
    cee0:	cmp	w0, #0x0
    cee4:	cset	w0, eq  // eq = none
    cee8:	ldp	x29, x30, [sp], #16
    ceec:	ret

000000000000cef0 <string_hash@@Base>:
    cef0:	stp	x29, x30, [sp, #-32]!
    cef4:	str	x19, [sp, #16]
    cef8:	mov	x29, sp
    cefc:	mov	x19, x0
    cf00:	bl	a890 <strlen@plt>
    cf04:	mov	x1, x0
    cf08:	mov	x0, x19
    cf0c:	bl	b0c0 <hash_pjw_bare@plt>
    cf10:	ldr	x19, [sp, #16]
    cf14:	ldp	x29, x30, [sp], #32
    cf18:	ret

000000000000cf1c <plain_free@@Base>:
    cf1c:	stp	x29, x30, [sp, #-16]!
    cf20:	mov	x29, sp
    cf24:	bl	b1d0 <free@plt>
    cf28:	ldp	x29, x30, [sp], #16
    cf2c:	ret

000000000000cf30 <new_string_list@@Base>:
    cf30:	stp	x29, x30, [sp, #-16]!
    cf34:	and	w4, w1, #0x1
    cf38:	adrp	x1, 3f000 <vasnprintf@@Base+0x14ec4>
    cf3c:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
    cf40:	adrp	x3, 3f000 <vasnprintf@@Base+0x14ec4>
    cf44:	ldr	x1, [x1, #3824]
    cf48:	ldr	x2, [x2, #3864]
    cf4c:	ldr	x3, [x3, #4000]
    cf50:	mov	x29, sp
    cf54:	bl	b610 <gl_list_create_empty@plt>
    cf58:	ldp	x29, x30, [sp], #16
    cf5c:	ret

000000000000cf60 <new_string_map@@Base>:
    cf60:	stp	x29, x30, [sp, #-16]!
    cf64:	mov	x4, x1
    cf68:	adrp	x1, 3f000 <vasnprintf@@Base+0x14ec4>
    cf6c:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
    cf70:	adrp	x3, 3f000 <vasnprintf@@Base+0x14ec4>
    cf74:	ldr	x1, [x1, #3824]
    cf78:	ldr	x2, [x2, #3864]
    cf7c:	ldr	x3, [x3, #4000]
    cf80:	mov	x29, sp
    cf84:	bl	b590 <gl_map_create_empty@plt>
    cf88:	ldp	x29, x30, [sp], #16
    cf8c:	ret

000000000000cf90 <new_string_set@@Base>:
    cf90:	stp	x29, x30, [sp, #-16]!
    cf94:	adrp	x1, 3f000 <vasnprintf@@Base+0x14ec4>
    cf98:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
    cf9c:	adrp	x3, 3f000 <vasnprintf@@Base+0x14ec4>
    cfa0:	ldr	x1, [x1, #3824]
    cfa4:	ldr	x2, [x2, #3864]
    cfa8:	ldr	x3, [x3, #4000]
    cfac:	mov	x29, sp
    cfb0:	bl	ade0 <gl_set_create_empty@plt>
    cfb4:	ldp	x29, x30, [sp], #16
    cfb8:	ret

000000000000cfbc <get_line_length@@Base>:
    cfbc:	stp	x29, x30, [sp, #-48]!
    cfc0:	str	x21, [sp, #16]
    cfc4:	adrp	x21, 40000 <base_len@@Base+0x2c984>
    cfc8:	ldr	w0, [x21, #2136]
    cfcc:	stp	x20, x19, [sp, #32]
    cfd0:	mov	x29, sp
    cfd4:	cmn	w0, #0x1
    cfd8:	b.ne	d0b0 <get_line_length@@Base+0xf4>  // b.any
    cfdc:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    cfe0:	mov	w8, #0x50                  	// #80
    cfe4:	add	x0, x0, #0x5b3
    cfe8:	str	w8, [x21, #2136]
    cfec:	bl	b720 <getenv@plt>
    cff0:	cbz	x0, d000 <get_line_length@@Base+0x44>
    cff4:	bl	ab60 <atoi@plt>
    cff8:	cmp	w0, #0x1
    cffc:	b.ge	d0ac <get_line_length@@Base+0xf0>  // b.tcont
    d000:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d004:	add	x0, x0, #0x5bc
    d008:	bl	b720 <getenv@plt>
    d00c:	cbz	x0, d01c <get_line_length@@Base+0x60>
    d010:	bl	ab60 <atoi@plt>
    d014:	cmp	w0, #0x1
    d018:	b.ge	d0ac <get_line_length@@Base+0xf0>  // b.tcont
    d01c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d020:	add	x0, x0, #0x5c4
    d024:	mov	w1, wzr
    d028:	bl	ac50 <open@plt>
    d02c:	mov	w19, w0
    d030:	mov	w20, w0
    d034:	tbz	w0, #31, d054 <get_line_length@@Base+0x98>
    d038:	mov	w0, #0x1                   	// #1
    d03c:	mov	w20, #0x1                   	// #1
    d040:	bl	b480 <isatty@plt>
    d044:	cbnz	w0, d054 <get_line_length@@Base+0x98>
    d048:	bl	b480 <isatty@plt>
    d04c:	cmp	w0, #0x0
    d050:	csetm	w20, eq  // eq = none
    d054:	tbnz	w20, #31, d0a8 <get_line_length@@Base+0xec>
    d058:	add	x2, x29, #0x18
    d05c:	mov	w1, #0x5413                	// #21523
    d060:	mov	w0, w20
    d064:	bl	b2f0 <rpl_ioctl@plt>
    d068:	mov	w20, w0
    d06c:	tbnz	w19, #31, d078 <get_line_length@@Base+0xbc>
    d070:	mov	w0, w19
    d074:	bl	af30 <close@plt>
    d078:	cbnz	w20, d094 <get_line_length@@Base+0xd8>
    d07c:	ldrh	w0, [x29, #26]
    d080:	cbz	w0, d0a0 <get_line_length@@Base+0xe4>
    d084:	mov	w8, wzr
    d088:	str	w0, [x21, #2136]
    d08c:	cbnz	w8, d0a8 <get_line_length@@Base+0xec>
    d090:	b	d0b0 <get_line_length@@Base+0xf4>
    d094:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d098:	add	x0, x0, #0x5cd
    d09c:	bl	a8f0 <perror@plt>
    d0a0:	mov	w8, #0x1                   	// #1
    d0a4:	cbz	w8, d0b0 <get_line_length@@Base+0xf4>
    d0a8:	mov	w0, #0x50                  	// #80
    d0ac:	str	w0, [x21, #2136]
    d0b0:	ldp	x20, x19, [sp, #32]
    d0b4:	ldr	x21, [sp, #16]
    d0b8:	ldp	x29, x30, [sp], #48
    d0bc:	ret

000000000000d0c0 <order_files@@Base>:
    d0c0:	sub	sp, sp, #0x170
    d0c4:	stp	x29, x30, [sp, #272]
    d0c8:	stp	x26, x25, [sp, #304]
    d0cc:	stp	x24, x23, [sp, #320]
    d0d0:	stp	x22, x21, [sp, #336]
    d0d4:	stp	x20, x19, [sp, #352]
    d0d8:	ldr	x20, [x1]
    d0dc:	mov	x19, x1
    d0e0:	mov	w1, #0x4000                	// #16384
    d0e4:	movk	w1, #0x20, lsl #16
    d0e8:	str	x28, [sp, #288]
    d0ec:	add	x29, sp, #0x110
    d0f0:	bl	ac50 <open@plt>
    d0f4:	tbnz	w0, #31, d260 <order_files@@Base+0x1a0>
    d0f8:	sub	x1, x29, #0x78
    d0fc:	mov	w21, w0
    d100:	bl	ad30 <fstatfs@plt>
    d104:	tbnz	w0, #31, d258 <order_files@@Base+0x198>
    d108:	adrp	x0, 3f000 <vasnprintf@@Base+0x14ec4>
    d10c:	adrp	x1, 3f000 <vasnprintf@@Base+0x14ec4>
    d110:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
    d114:	adrp	x4, 3f000 <vasnprintf@@Base+0x14ec4>
    d118:	ldr	x0, [x0, #3912]
    d11c:	ldr	x1, [x1, #3824]
    d120:	ldr	x2, [x2, #3864]
    d124:	ldr	x4, [x4, #4000]
    d128:	mov	x3, xzr
    d12c:	bl	b590 <gl_map_create_empty@plt>
    d130:	adrp	x25, 3f000 <vasnprintf@@Base+0x14ec4>
    d134:	ldr	x25, [x25, #3984]
    d138:	mov	w1, wzr
    d13c:	str	x0, [x25]
    d140:	adrp	x0, 3f000 <vasnprintf@@Base+0x14ec4>
    d144:	ldr	x0, [x0, #3896]
    d148:	bl	b460 <new_string_list@plt>
    d14c:	mov	x22, x0
    d150:	add	x8, sp, #0x60
    d154:	mov	x0, x20
    d158:	bl	ac00 <gl_list_iterator@plt>
    d15c:	add	x0, sp, #0x60
    d160:	add	x1, x29, #0x18
    d164:	add	x2, sp, #0x58
    d168:	bl	adf0 <gl_list_iterator_next@plt>
    d16c:	tbz	w0, #0, d22c <order_files@@Base+0x16c>
    d170:	adrp	x23, d000 <get_line_length@@Base+0x44>
    d174:	mov	w26, #0x1                   	// #1
    d178:	add	x23, x23, #0x280
    d17c:	b	d1b4 <order_files@@Base+0xf4>
    d180:	mov	w0, w24
    d184:	bl	af30 <close@plt>
    d188:	ldr	x0, [x29, #24]
    d18c:	bl	ada0 <xstrdup@plt>
    d190:	mov	x2, x0
    d194:	mov	x0, x22
    d198:	mov	x1, x23
    d19c:	bl	a9f0 <gl_sortedlist_add@plt>
    d1a0:	add	x0, sp, #0x60
    d1a4:	add	x1, x29, #0x18
    d1a8:	add	x2, sp, #0x58
    d1ac:	bl	adf0 <gl_list_iterator_next@plt>
    d1b0:	tbz	w0, #0, d22c <order_files@@Base+0x16c>
    d1b4:	ldr	x1, [x29, #24]
    d1b8:	mov	w0, w21
    d1bc:	mov	w2, wzr
    d1c0:	bl	b6d0 <openat@plt>
    d1c4:	tbnz	w0, #31, d1a0 <order_files@@Base+0xe0>
    d1c8:	ldur	x8, [x29, #-112]
    d1cc:	mov	w1, #0x660b                	// #26123
    d1d0:	movi	v0.2d, #0x0
    d1d4:	mov	x2, sp
    d1d8:	movk	w1, #0xc020, lsl #16
    d1dc:	mov	w24, w0
    d1e0:	stp	q0, q0, [sp]
    d1e4:	str	xzr, [sp, #80]
    d1e8:	stp	q0, q0, [sp, #48]
    d1ec:	str	q0, [sp, #32]
    d1f0:	str	x8, [sp, #8]
    d1f4:	str	wzr, [sp, #16]
    d1f8:	str	w26, [sp, #24]
    d1fc:	bl	b2f0 <rpl_ioctl@plt>
    d200:	cbnz	w0, d180 <order_files@@Base+0xc0>
    d204:	mov	w0, #0x8                   	// #8
    d208:	bl	ad70 <xmalloc@plt>
    d20c:	ldr	x9, [sp, #40]
    d210:	ldr	x8, [x25]
    d214:	ldr	x1, [x29, #24]
    d218:	mov	x2, x0
    d21c:	str	x9, [x0]
    d220:	mov	x0, x8
    d224:	bl	b180 <gl_map_put@plt>
    d228:	b	d180 <order_files@@Base+0xc0>
    d22c:	add	x0, sp, #0x60
    d230:	bl	b100 <gl_list_iterator_free@plt>
    d234:	ldr	x0, [x25]
    d238:	bl	b0b0 <gl_map_free@plt>
    d23c:	mov	w0, w21
    d240:	str	xzr, [x25]
    d244:	bl	af30 <close@plt>
    d248:	mov	x0, x20
    d24c:	bl	b4c0 <gl_list_free@plt>
    d250:	str	x22, [x19]
    d254:	b	d260 <order_files@@Base+0x1a0>
    d258:	mov	w0, w21
    d25c:	bl	af30 <close@plt>
    d260:	ldp	x20, x19, [sp, #352]
    d264:	ldp	x22, x21, [sp, #336]
    d268:	ldp	x24, x23, [sp, #320]
    d26c:	ldp	x26, x25, [sp, #304]
    d270:	ldr	x28, [sp, #288]
    d274:	ldp	x29, x30, [sp, #272]
    d278:	add	sp, sp, #0x170
    d27c:	ret
    d280:	stp	x29, x30, [sp, #-32]!
    d284:	stp	x20, x19, [sp, #16]
    d288:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    d28c:	ldr	x19, [x19, #3984]
    d290:	mov	x20, x1
    d294:	mov	x1, x0
    d298:	mov	x29, sp
    d29c:	ldr	x8, [x19]
    d2a0:	mov	x0, x8
    d2a4:	bl	af80 <gl_map_get@plt>
    d2a8:	ldr	x8, [x19]
    d2ac:	mov	x19, x0
    d2b0:	mov	x1, x20
    d2b4:	mov	x0, x8
    d2b8:	bl	af80 <gl_map_get@plt>
    d2bc:	cbz	x19, d2d0 <order_files@@Base+0x210>
    d2c0:	ldr	x8, [x19]
    d2c4:	cbz	x0, d2d8 <order_files@@Base+0x218>
    d2c8:	ldr	x9, [x0]
    d2cc:	b	d2dc <order_files@@Base+0x21c>
    d2d0:	mov	x8, #0xffffffffffffffff    	// #-1
    d2d4:	cbnz	x0, d2c8 <order_files@@Base+0x208>
    d2d8:	mov	x9, #0xffffffffffffffff    	// #-1
    d2dc:	ldp	x20, x19, [sp, #16]
    d2e0:	cmp	x8, x9
    d2e4:	cset	w8, hi  // hi = pmore
    d2e8:	csinv	w0, w8, wzr, cs  // cs = hs, nlast
    d2ec:	ldp	x29, x30, [sp], #32
    d2f0:	ret

000000000000d2f4 <pathsearch_executable@@Base>:
    d2f4:	stp	x29, x30, [sp, #-16]!
    d2f8:	mov	x29, sp
    d2fc:	bl	d30c <pathsearch_executable@@Base+0x18>
    d300:	and	w0, w0, #0x1
    d304:	ldp	x29, x30, [sp], #16
    d308:	ret
    d30c:	sub	sp, sp, #0xe0
    d310:	stp	x20, x19, [sp, #208]
    d314:	mov	x19, x0
    d318:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d31c:	add	x0, x0, #0x5df
    d320:	stp	x29, x30, [sp, #128]
    d324:	str	x27, [sp, #144]
    d328:	stp	x26, x25, [sp, #160]
    d32c:	stp	x24, x23, [sp, #176]
    d330:	stp	x22, x21, [sp, #192]
    d334:	add	x29, sp, #0x80
    d338:	bl	b720 <getenv@plt>
    d33c:	cbz	x0, d38c <pathsearch_executable@@Base+0x98>
    d340:	mov	x20, x0
    d344:	mov	w1, #0x2f                  	// #47
    d348:	mov	x0, x19
    d34c:	bl	b300 <strchr@plt>
    d350:	cbz	x0, d394 <pathsearch_executable@@Base+0xa0>
    d354:	mov	x1, sp
    d358:	mov	x0, x19
    d35c:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    d360:	cmn	w0, #0x1
    d364:	b.eq	d38c <pathsearch_executable@@Base+0x98>  // b.none
    d368:	ldr	w8, [sp, #16]
    d36c:	mov	w9, #0x49                  	// #73
    d370:	and	w10, w8, #0xf000
    d374:	cmp	w10, #0x8, lsl #12
    d378:	cset	w10, eq  // eq = none
    d37c:	tst	w8, w9
    d380:	cset	w8, ne  // ne = any
    d384:	and	w26, w8, w10
    d388:	b	d480 <pathsearch_executable@@Base+0x18c>
    d38c:	mov	w26, wzr
    d390:	b	d480 <pathsearch_executable@@Base+0x18c>
    d394:	mov	x0, x20
    d398:	bl	ada0 <xstrdup@plt>
    d39c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    d3a0:	mov	x20, x0
    d3a4:	str	x0, [x29, #24]
    d3a8:	add	x1, x1, #0x82d
    d3ac:	add	x0, x29, #0x18
    d3b0:	bl	b0f0 <strsep@plt>
    d3b4:	cbz	x0, d468 <pathsearch_executable@@Base+0x174>
    d3b8:	adrp	x22, 2b000 <vasnprintf@@Base+0xec4>
    d3bc:	adrp	x23, 2b000 <vasnprintf@@Base+0xec4>
    d3c0:	mov	x1, x0
    d3c4:	mov	w26, wzr
    d3c8:	mov	x21, xzr
    d3cc:	add	x22, x22, #0x5e4
    d3d0:	add	x23, x23, #0x82d
    d3d4:	mov	w27, #0x49                  	// #73
    d3d8:	b	d3f8 <pathsearch_executable@@Base+0x104>
    d3dc:	mov	w8, wzr
    d3e0:	tbnz	w8, #0, d470 <pathsearch_executable@@Base+0x17c>
    d3e4:	add	x0, x29, #0x18
    d3e8:	mov	x1, x23
    d3ec:	bl	b0f0 <strsep@plt>
    d3f0:	mov	x1, x0
    d3f4:	cbz	x0, d470 <pathsearch_executable@@Base+0x17c>
    d3f8:	ldrb	w8, [x1]
    d3fc:	cbnz	w8, d414 <pathsearch_executable@@Base+0x120>
    d400:	mov	x1, x21
    d404:	cbnz	x21, d414 <pathsearch_executable@@Base+0x120>
    d408:	bl	b870 <xgetcwd@plt>
    d40c:	mov	x21, x0
    d410:	mov	x1, x0
    d414:	mov	x0, x22
    d418:	mov	x2, x19
    d41c:	bl	b230 <xasprintf@plt>
    d420:	mov	x1, sp
    d424:	mov	x24, x0
    d428:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    d42c:	mov	w25, w0
    d430:	mov	x0, x24
    d434:	bl	b1d0 <free@plt>
    d438:	cmn	w25, #0x1
    d43c:	b.eq	d3dc <pathsearch_executable@@Base+0xe8>  // b.none
    d440:	ldr	w8, [sp, #16]
    d444:	and	w9, w8, #0xf000
    d448:	cmp	w9, #0x8, lsl #12
    d44c:	cset	w9, eq  // eq = none
    d450:	tst	w8, w27
    d454:	cset	w8, ne  // ne = any
    d458:	and	w8, w9, w8
    d45c:	orr	w26, w26, w8
    d460:	tbz	w8, #0, d3e4 <pathsearch_executable@@Base+0xf0>
    d464:	b	d470 <pathsearch_executable@@Base+0x17c>
    d468:	mov	x21, xzr
    d46c:	mov	w26, wzr
    d470:	mov	x0, x20
    d474:	bl	b1d0 <free@plt>
    d478:	mov	x0, x21
    d47c:	bl	b1d0 <free@plt>
    d480:	and	w0, w26, #0x1
    d484:	ldp	x20, x19, [sp, #208]
    d488:	ldp	x22, x21, [sp, #192]
    d48c:	ldp	x24, x23, [sp, #176]
    d490:	ldp	x26, x25, [sp, #160]
    d494:	ldr	x27, [sp, #144]
    d498:	ldp	x29, x30, [sp, #128]
    d49c:	add	sp, sp, #0xe0
    d4a0:	ret

000000000000d4a4 <directory_on_path@@Base>:
    d4a4:	sub	sp, sp, #0x40
    d4a8:	stp	x20, x19, [sp, #48]
    d4ac:	mov	x20, x0
    d4b0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d4b4:	add	x0, x0, #0x5df
    d4b8:	stp	x29, x30, [sp, #16]
    d4bc:	stp	x22, x21, [sp, #32]
    d4c0:	add	x29, sp, #0x10
    d4c4:	bl	b720 <getenv@plt>
    d4c8:	cbz	x0, d534 <directory_on_path@@Base+0x90>
    d4cc:	bl	ada0 <xstrdup@plt>
    d4d0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    d4d4:	mov	x19, x0
    d4d8:	str	x0, [sp, #8]
    d4dc:	add	x1, x1, #0x82d
    d4e0:	add	x0, sp, #0x8
    d4e4:	bl	b0f0 <strsep@plt>
    d4e8:	mov	x21, xzr
    d4ec:	cbz	x0, d52c <directory_on_path@@Base+0x88>
    d4f0:	adrp	x22, 2b000 <vasnprintf@@Base+0xec4>
    d4f4:	add	x22, x22, #0x82d
    d4f8:	ldrb	w8, [x0]
    d4fc:	cbnz	w8, d510 <directory_on_path@@Base+0x6c>
    d500:	mov	x0, x21
    d504:	cbnz	x21, d510 <directory_on_path@@Base+0x6c>
    d508:	bl	b870 <xgetcwd@plt>
    d50c:	mov	x21, x0
    d510:	mov	x1, x20
    d514:	bl	b120 <strcmp@plt>
    d518:	cbz	w0, d53c <directory_on_path@@Base+0x98>
    d51c:	add	x0, sp, #0x8
    d520:	mov	x1, x22
    d524:	bl	b0f0 <strsep@plt>
    d528:	cbnz	x0, d4f8 <directory_on_path@@Base+0x54>
    d52c:	mov	w20, wzr
    d530:	b	d540 <directory_on_path@@Base+0x9c>
    d534:	mov	w20, wzr
    d538:	b	d550 <directory_on_path@@Base+0xac>
    d53c:	mov	w20, #0x1                   	// #1
    d540:	mov	x0, x19
    d544:	bl	b1d0 <free@plt>
    d548:	mov	x0, x21
    d54c:	bl	b1d0 <free@plt>
    d550:	mov	w0, w20
    d554:	ldp	x20, x19, [sp, #48]
    d558:	ldp	x22, x21, [sp, #32]
    d55c:	ldp	x29, x30, [sp, #16]
    d560:	add	sp, sp, #0x40
    d564:	ret

000000000000d568 <sandbox_init@@Base>:
    d568:	stp	x29, x30, [sp, #-16]!
    d56c:	mov	w0, #0x1                   	// #1
    d570:	mov	x29, sp
    d574:	bl	b490 <xzalloc@plt>
    d578:	strb	wzr, [x0]
    d57c:	ldp	x29, x30, [sp], #16
    d580:	ret

000000000000d584 <sandbox_load@@Base>:
    d584:	ret

000000000000d588 <sandbox_load_permissive@@Base>:
    d588:	ret

000000000000d58c <sandbox_free@@Base>:
    d58c:	stp	x29, x30, [sp, #-16]!
    d590:	mov	x29, sp
    d594:	bl	b1d0 <free@plt>
    d598:	ldp	x29, x30, [sp], #16
    d59c:	ret

000000000000d5a0 <init_security@@Base>:
    d5a0:	stp	x29, x30, [sp, #-32]!
    d5a4:	str	x19, [sp, #16]
    d5a8:	mov	x29, sp
    d5ac:	bl	aa20 <getuid@plt>
    d5b0:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    d5b4:	ldr	x19, [x19, #4064]
    d5b8:	str	w0, [x19]
    d5bc:	bl	a960 <geteuid@plt>
    d5c0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d5c4:	ldr	x8, [x8, #3784]
    d5c8:	ldr	w1, [x19]
    d5cc:	mov	w2, w0
    d5d0:	str	w0, [x8]
    d5d4:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d5d8:	ldr	x8, [x8, #3952]
    d5dc:	str	w0, [x8]
    d5e0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d5e4:	add	x0, x0, #0x5ea
    d5e8:	bl	ab30 <debug@plt>
    d5ec:	bl	b210 <getgid@plt>
    d5f0:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    d5f4:	ldr	x19, [x19, #3960]
    d5f8:	str	w0, [x19]
    d5fc:	bl	a910 <getegid@plt>
    d600:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d604:	ldr	x8, [x8, #3760]
    d608:	ldr	w1, [x19]
    d60c:	mov	w2, w0
    d610:	str	w0, [x8]
    d614:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d618:	ldr	x8, [x8, #3792]
    d61c:	str	w0, [x8]
    d620:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d624:	add	x0, x0, #0x5fc
    d628:	bl	ab30 <debug@plt>
    d62c:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    d630:	str	wzr, [x8, #2744]
    d634:	bl	afd0 <drop_effective_privs@plt>
    d638:	ldr	x19, [sp, #16]
    d63c:	ldp	x29, x30, [sp], #32
    d640:	ret

000000000000d644 <drop_effective_privs@@Base>:
    d644:	stp	x29, x30, [sp, #-32]!
    d648:	stp	x20, x19, [sp, #16]
    d64c:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    d650:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    d654:	ldr	x19, [x19, #3952]
    d658:	ldr	x20, [x20, #4064]
    d65c:	mov	x29, sp
    d660:	ldr	w8, [x19]
    d664:	ldr	w9, [x20]
    d668:	cmp	w8, w9
    d66c:	b.eq	d6a8 <drop_effective_privs@@Base+0x64>  // b.none
    d670:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d674:	add	x0, x0, #0x672
    d678:	bl	ab30 <debug@plt>
    d67c:	bl	acb0 <idpriv_temp_drop@plt>
    d680:	cbz	w0, d688 <drop_effective_privs@@Base+0x44>
    d684:	bl	d77c <get_man_owner@@Base+0x88>
    d688:	ldr	w8, [x20]
    d68c:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
    d690:	ldr	x9, [x9, #3960]
    d694:	str	w8, [x19]
    d698:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d69c:	ldr	w9, [x9]
    d6a0:	ldr	x8, [x8, #3792]
    d6a4:	str	w9, [x8]
    d6a8:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    d6ac:	ldr	w9, [x8, #2744]
    d6b0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d6b4:	add	x0, x0, #0x68a
    d6b8:	add	w1, w9, #0x1
    d6bc:	str	w1, [x8, #2744]
    d6c0:	bl	ab30 <debug@plt>
    d6c4:	ldp	x20, x19, [sp, #16]
    d6c8:	ldp	x29, x30, [sp], #32
    d6cc:	ret

000000000000d6d0 <running_setuid@@Base>:
    d6d0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d6d4:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
    d6d8:	ldr	x8, [x8, #4064]
    d6dc:	ldr	x9, [x9, #3784]
    d6e0:	ldr	w8, [x8]
    d6e4:	ldr	w9, [x9]
    d6e8:	cmp	w8, w9
    d6ec:	cset	w0, ne  // ne = any
    d6f0:	ret

000000000000d6f4 <get_man_owner@@Base>:
    d6f4:	stp	x29, x30, [sp, #-32]!
    d6f8:	str	x19, [sp, #16]
    d6fc:	adrp	x19, 40000 <base_len@@Base+0x2c984>
    d700:	ldr	x0, [x19, #2752]
    d704:	mov	x29, sp
    d708:	cbnz	x0, d750 <get_man_owner@@Base+0x5c>
    d70c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d710:	add	x0, x0, #0x60e
    d714:	bl	ad80 <getpwnam@plt>
    d718:	str	x0, [x19, #2752]
    d71c:	cbnz	x0, d748 <get_man_owner@@Base+0x54>
    d720:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    d724:	add	x1, x1, #0x612
    d728:	mov	w2, #0x5                   	// #5
    d72c:	bl	b580 <dcgettext@plt>
    d730:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
    d734:	mov	x2, x0
    d738:	add	x3, x3, #0x60e
    d73c:	mov	w0, #0x1                   	// #1
    d740:	mov	w1, wzr
    d744:	bl	a8c0 <error@plt>
    d748:	ldr	x0, [x19, #2752]
    d74c:	cbz	x0, d75c <get_man_owner@@Base+0x68>
    d750:	ldr	x19, [sp, #16]
    d754:	ldp	x29, x30, [sp], #32
    d758:	ret
    d75c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d760:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    d764:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
    d768:	add	x0, x0, #0x63a
    d76c:	add	x1, x1, #0x644
    d770:	add	x3, x3, #0x64f
    d774:	mov	w2, #0x78                  	// #120
    d778:	bl	b6e0 <__assert_fail@plt>
    d77c:	stp	x29, x30, [sp, #-32]!
    d780:	str	x19, [sp, #16]
    d784:	mov	x29, sp
    d788:	bl	b6f0 <__errno_location@plt>
    d78c:	ldr	w19, [x0]
    d790:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    d794:	add	x1, x1, #0x6d4
    d798:	mov	w2, #0x5                   	// #5
    d79c:	mov	x0, xzr
    d7a0:	bl	b580 <dcgettext@plt>
    d7a4:	mov	x2, x0
    d7a8:	mov	w0, #0x2                   	// #2
    d7ac:	mov	w1, w19
    d7b0:	bl	a8c0 <error@plt>
    d7b4:	ldr	x19, [sp, #16]
    d7b8:	ldp	x29, x30, [sp], #32
    d7bc:	ret

000000000000d7c0 <regain_effective_privs@@Base>:
    d7c0:	stp	x29, x30, [sp, #-32]!
    d7c4:	stp	x20, x19, [sp, #16]
    d7c8:	adrp	x19, 40000 <base_len@@Base+0x2c984>
    d7cc:	ldr	w8, [x19, #2744]
    d7d0:	mov	x29, sp
    d7d4:	cbz	w8, d7f4 <regain_effective_privs@@Base+0x34>
    d7d8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d7dc:	sub	w1, w8, #0x1
    d7e0:	add	x0, x0, #0x6a2
    d7e4:	str	w1, [x19, #2744]
    d7e8:	bl	ab30 <debug@plt>
    d7ec:	ldr	w8, [x19, #2744]
    d7f0:	cbnz	w8, d84c <regain_effective_privs@@Base+0x8c>
    d7f4:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    d7f8:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
    d7fc:	ldr	x19, [x19, #3952]
    d800:	ldr	x20, [x20, #3784]
    d804:	ldr	w8, [x19]
    d808:	ldr	w9, [x20]
    d80c:	cmp	w8, w9
    d810:	b.eq	d84c <regain_effective_privs@@Base+0x8c>  // b.none
    d814:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d818:	add	x0, x0, #0x6ba
    d81c:	bl	ab30 <debug@plt>
    d820:	bl	b450 <idpriv_temp_restore@plt>
    d824:	cbz	w0, d82c <regain_effective_privs@@Base+0x6c>
    d828:	bl	d77c <get_man_owner@@Base+0x88>
    d82c:	ldr	w8, [x20]
    d830:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
    d834:	ldr	x9, [x9, #3760]
    d838:	str	w8, [x19]
    d83c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    d840:	ldr	w9, [x9]
    d844:	ldr	x8, [x8, #3792]
    d848:	str	w9, [x8]
    d84c:	ldp	x20, x19, [sp, #16]
    d850:	ldp	x29, x30, [sp], #32
    d854:	ret

000000000000d858 <drop_privs@@Base>:
    d858:	stp	x29, x30, [sp, #-16]!
    d85c:	mov	x29, sp
    d860:	bl	b3c0 <idpriv_drop@plt>
    d864:	cbz	w0, d86c <drop_privs@@Base+0x14>
    d868:	bl	d77c <get_man_owner@@Base+0x88>
    d86c:	ldp	x29, x30, [sp], #16
    d870:	ret

000000000000d874 <create_tempdir@@Base>:
    d874:	stp	x29, x30, [sp, #-32]!
    d878:	str	x19, [sp, #16]
    d87c:	mov	x29, sp
    d880:	mov	x19, x0
    d884:	bl	d8bc <create_tempdir@@Base+0x48>
    d888:	cbz	x0, d8b0 <create_tempdir@@Base+0x3c>
    d88c:	mov	x1, x0
    d890:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d894:	add	x0, x0, #0x6ec
    d898:	mov	x2, x19
    d89c:	bl	b230 <xasprintf@plt>
    d8a0:	mov	x19, x0
    d8a4:	bl	b000 <mkdtemp@plt>
    d8a8:	cmp	x0, #0x0
    d8ac:	csel	x0, xzr, x19, eq  // eq = none
    d8b0:	ldr	x19, [sp, #16]
    d8b4:	ldp	x29, x30, [sp], #32
    d8b8:	ret
    d8bc:	stp	x29, x30, [sp, #-32]!
    d8c0:	str	x19, [sp, #16]
    d8c4:	mov	x29, sp
    d8c8:	bl	aa20 <getuid@plt>
    d8cc:	mov	w19, w0
    d8d0:	bl	a960 <geteuid@plt>
    d8d4:	cmp	w19, w0
    d8d8:	b.ne	d938 <create_tempdir@@Base+0xc4>  // b.any
    d8dc:	bl	b210 <getgid@plt>
    d8e0:	mov	w19, w0
    d8e4:	bl	a910 <getegid@plt>
    d8e8:	cmp	w19, w0
    d8ec:	b.ne	d938 <create_tempdir@@Base+0xc4>  // b.any
    d8f0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d8f4:	add	x0, x0, #0x6f8
    d8f8:	bl	b720 <getenv@plt>
    d8fc:	cbz	x0, d910 <create_tempdir@@Base+0x9c>
    d900:	mov	w1, #0x2                   	// #2
    d904:	mov	x19, x0
    d908:	bl	b080 <access@plt>
    d90c:	cbz	w0, d914 <create_tempdir@@Base+0xa0>
    d910:	mov	x19, xzr
    d914:	cbnz	x19, d93c <create_tempdir@@Base+0xc8>
    d918:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d91c:	add	x0, x0, #0x6ff
    d920:	bl	b720 <getenv@plt>
    d924:	cbz	x0, d938 <create_tempdir@@Base+0xc4>
    d928:	mov	w1, #0x2                   	// #2
    d92c:	mov	x19, x0
    d930:	bl	b080 <access@plt>
    d934:	cbz	w0, d93c <create_tempdir@@Base+0xc8>
    d938:	mov	x19, xzr
    d93c:	cbz	x19, d94c <create_tempdir@@Base+0xd8>
    d940:	cbz	x19, d96c <create_tempdir@@Base+0xf8>
    d944:	mov	x0, x19
    d948:	b	d988 <create_tempdir@@Base+0x114>
    d94c:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    d950:	add	x19, x19, #0x703
    d954:	mov	w1, #0x2                   	// #2
    d958:	mov	x0, x19
    d95c:	bl	b080 <access@plt>
    d960:	cmp	w0, #0x0
    d964:	csel	x19, x19, xzr, eq  // eq = none
    d968:	cbnz	x19, d944 <create_tempdir@@Base+0xd0>
    d96c:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    d970:	add	x19, x19, #0x703
    d974:	mov	w1, #0x2                   	// #2
    d978:	mov	x0, x19
    d97c:	bl	b080 <access@plt>
    d980:	cmp	w0, #0x0
    d984:	csel	x0, x19, xzr, eq  // eq = none
    d988:	ldr	x19, [sp, #16]
    d98c:	ldp	x29, x30, [sp], #32
    d990:	ret

000000000000d994 <is_changed@@Base>:
    d994:	sub	sp, sp, #0x130
    d998:	stp	x20, x19, [sp, #288]
    d99c:	mov	x19, x1
    d9a0:	mov	x20, x0
    d9a4:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    d9a8:	add	x0, x0, #0x708
    d9ac:	mov	x1, x20
    d9b0:	mov	x2, x19
    d9b4:	stp	x29, x30, [sp, #256]
    d9b8:	stp	x28, x21, [sp, #272]
    d9bc:	add	x29, sp, #0x100
    d9c0:	bl	ab30 <debug@plt>
    d9c4:	add	x1, sp, #0x80
    d9c8:	mov	x0, x20
    d9cc:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    d9d0:	cmp	w0, #0x0
    d9d4:	mov	x1, sp
    d9d8:	mov	x0, x19
    d9dc:	cset	w20, ne  // ne = any
    d9e0:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    d9e4:	orr	w8, w20, #0x2
    d9e8:	cmp	w0, #0x0
    d9ec:	csel	w8, w20, w8, eq  // eq = none
    d9f0:	cbz	w8, d9fc <is_changed@@Base+0x68>
    d9f4:	neg	w19, w8
    d9f8:	b	da58 <is_changed@@Base+0xc4>
    d9fc:	ldr	x8, [sp, #176]
    da00:	ldr	x9, [sp, #48]
    da04:	mov	w10, #0x4                   	// #4
    da08:	add	x0, sp, #0x80
    da0c:	cmp	x8, #0x0
    da10:	cset	w8, eq  // eq = none
    da14:	lsl	w11, w8, #1
    da18:	bfi	w10, w8, #1, #1
    da1c:	cmp	x9, #0x0
    da20:	csel	w21, w10, w11, eq  // eq = none
    da24:	bl	af10 <get_stat_mtime@plt>
    da28:	mov	x19, x0
    da2c:	mov	x0, sp
    da30:	mov	x20, x1
    da34:	bl	af10 <get_stat_mtime@plt>
    da38:	mov	x2, x0
    da3c:	mov	x3, x1
    da40:	mov	x0, x19
    da44:	mov	x1, x20
    da48:	bl	aa60 <timespec_cmp@plt>
    da4c:	cmp	w0, #0x0
    da50:	cset	w8, ne  // ne = any
    da54:	orr	w19, w21, w8
    da58:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    da5c:	add	x0, x0, #0x71f
    da60:	mov	w1, w19
    da64:	bl	ab30 <debug@plt>
    da68:	mov	w0, w19
    da6c:	ldp	x20, x19, [sp, #288]
    da70:	ldp	x28, x21, [sp, #272]
    da74:	ldp	x29, x30, [sp, #256]
    da78:	add	sp, sp, #0x130
    da7c:	ret

000000000000da80 <is_directory@@Base>:
    da80:	sub	sp, sp, #0x90
    da84:	mov	x1, sp
    da88:	stp	x29, x30, [sp, #128]
    da8c:	add	x29, sp, #0x80
    da90:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    da94:	ldr	w8, [sp, #16]
    da98:	ldp	x29, x30, [sp, #128]
    da9c:	cmp	w0, #0x0
    daa0:	ubfx	w8, w8, #14, #1
    daa4:	csel	w0, w8, w0, eq  // eq = none
    daa8:	add	sp, sp, #0x90
    daac:	ret

000000000000dab0 <escape_shell@@Base>:
    dab0:	stp	x29, x30, [sp, #-64]!
    dab4:	stp	x24, x23, [sp, #16]
    dab8:	stp	x22, x21, [sp, #32]
    dabc:	stp	x20, x19, [sp, #48]
    dac0:	mov	x29, sp
    dac4:	cbz	x0, db78 <escape_shell@@Base+0xc8>
    dac8:	mov	x20, x0
    dacc:	bl	a890 <strlen@plt>
    dad0:	mov	w8, #0x1                   	// #1
    dad4:	bfi	x8, x0, #1, #63
    dad8:	mov	x0, x8
    dadc:	bl	ad70 <xmalloc@plt>
    dae0:	ldrb	w21, [x20]
    dae4:	mov	x19, x0
    dae8:	mov	x23, x0
    daec:	cbz	w21, db70 <escape_shell@@Base+0xc0>
    daf0:	add	x22, x20, #0x1
    daf4:	adrp	x20, 2b000 <vasnprintf@@Base+0xec4>
    daf8:	add	x20, x20, #0x726
    dafc:	mov	w24, #0x5c                  	// #92
    db00:	mov	x23, x19
    db04:	b	db20 <escape_shell@@Base+0x70>
    db08:	mov	w8, #0x1                   	// #1
    db0c:	mov	x9, x23
    db10:	strb	w21, [x9]
    db14:	ldrb	w21, [x22], #1
    db18:	add	x23, x23, x8
    db1c:	cbz	w21, db70 <escape_shell@@Base+0xc0>
    db20:	and	w8, w21, #0xffffffdf
    db24:	sub	w8, w8, #0x41
    db28:	and	w8, w8, #0xff
    db2c:	cmp	w8, #0x1a
    db30:	b.cc	db08 <escape_shell@@Base+0x58>  // b.lo, b.ul, b.last
    db34:	sub	w8, w21, #0x30
    db38:	and	w8, w8, #0xff
    db3c:	cmp	w8, #0xa
    db40:	mov	w8, #0x1                   	// #1
    db44:	mov	x9, x23
    db48:	b.cc	db10 <escape_shell@@Base+0x60>  // b.lo, b.ul, b.last
    db4c:	and	w1, w21, #0xff
    db50:	mov	w2, #0x8                   	// #8
    db54:	mov	x0, x20
    db58:	bl	b440 <memchr@plt>
    db5c:	cbnz	x0, db08 <escape_shell@@Base+0x58>
    db60:	mov	x9, x23
    db64:	strb	w24, [x9], #1
    db68:	mov	w8, #0x2                   	// #2
    db6c:	b	db10 <escape_shell@@Base+0x60>
    db70:	strb	wzr, [x23]
    db74:	b	db7c <escape_shell@@Base+0xcc>
    db78:	mov	x19, xzr
    db7c:	mov	x0, x19
    db80:	ldp	x20, x19, [sp, #48]
    db84:	ldp	x22, x21, [sp, #32]
    db88:	ldp	x24, x23, [sp, #16]
    db8c:	ldp	x29, x30, [sp], #64
    db90:	ret

000000000000db94 <remove_directory@@Base>:
    db94:	sub	sp, sp, #0xd0
    db98:	stp	x29, x30, [sp, #128]
    db9c:	str	x25, [sp, #144]
    dba0:	stp	x24, x23, [sp, #160]
    dba4:	stp	x22, x21, [sp, #176]
    dba8:	stp	x20, x19, [sp, #192]
    dbac:	add	x29, sp, #0x80
    dbb0:	mov	w20, w1
    dbb4:	mov	x19, x0
    dbb8:	bl	aa40 <opendir@plt>
    dbbc:	cbz	x0, dcd8 <remove_directory@@Base+0x144>
    dbc0:	mov	x21, x0
    dbc4:	bl	ae90 <readdir@plt>
    dbc8:	cbz	x0, dcbc <remove_directory@@Base+0x128>
    dbcc:	adrp	x22, 2b000 <vasnprintf@@Base+0xec4>
    dbd0:	adrp	x23, 2b000 <vasnprintf@@Base+0xec4>
    dbd4:	adrp	x24, 2b000 <vasnprintf@@Base+0xec4>
    dbd8:	add	x22, x22, #0x72f
    dbdc:	add	x23, x23, #0x72e
    dbe0:	add	x24, x24, #0x5e4
    dbe4:	add	x25, x0, #0x13
    dbe8:	mov	x0, x25
    dbec:	mov	x1, x22
    dbf0:	bl	b120 <strcmp@plt>
    dbf4:	cbz	w0, dc58 <remove_directory@@Base+0xc4>
    dbf8:	mov	x0, x25
    dbfc:	mov	x1, x23
    dc00:	bl	b120 <strcmp@plt>
    dc04:	cbz	w0, dc58 <remove_directory@@Base+0xc4>
    dc08:	mov	x0, x24
    dc0c:	mov	x1, x19
    dc10:	mov	x2, x25
    dc14:	bl	b230 <xasprintf@plt>
    dc18:	mov	x1, sp
    dc1c:	mov	x25, x0
    dc20:	bl	2ae10 <vasnprintf@@Base+0xcd4>
    dc24:	cmn	w0, #0x1
    dc28:	b.eq	dc90 <remove_directory@@Base+0xfc>  // b.none
    dc2c:	cbz	w20, dc60 <remove_directory@@Base+0xcc>
    dc30:	ldr	w8, [sp, #16]
    dc34:	and	w8, w8, #0xf000
    dc38:	cmp	w8, #0x4, lsl #12
    dc3c:	b.ne	dc60 <remove_directory@@Base+0xcc>  // b.any
    dc40:	mov	x0, x25
    dc44:	mov	w1, w20
    dc48:	bl	a930 <remove_directory@plt>
    dc4c:	cmn	w0, #0x1
    dc50:	b.ne	dc80 <remove_directory@@Base+0xec>  // b.any
    dc54:	b	dc90 <remove_directory@@Base+0xfc>
    dc58:	mov	w8, #0x2                   	// #2
    dc5c:	b	dca4 <remove_directory@@Base+0x110>
    dc60:	ldr	w8, [sp, #16]
    dc64:	and	w8, w8, #0xf000
    dc68:	cmp	w8, #0x8, lsl #12
    dc6c:	b.ne	dc80 <remove_directory@@Base+0xec>  // b.any
    dc70:	mov	x0, x25
    dc74:	bl	b7a0 <unlink@plt>
    dc78:	cmn	w0, #0x1
    dc7c:	b.eq	dc90 <remove_directory@@Base+0xfc>  // b.none
    dc80:	mov	x0, x25
    dc84:	bl	b1d0 <free@plt>
    dc88:	mov	w8, wzr
    dc8c:	b	dca4 <remove_directory@@Base+0x110>
    dc90:	mov	x0, x25
    dc94:	bl	b1d0 <free@plt>
    dc98:	mov	x0, x21
    dc9c:	bl	aef0 <closedir@plt>
    dca0:	mov	w8, #0x1                   	// #1
    dca4:	orr	w8, w8, #0x2
    dca8:	cmp	w8, #0x2
    dcac:	b.ne	dcd8 <remove_directory@@Base+0x144>  // b.any
    dcb0:	mov	x0, x21
    dcb4:	bl	ae90 <readdir@plt>
    dcb8:	cbnz	x0, dbe4 <remove_directory@@Base+0x50>
    dcbc:	mov	x0, x21
    dcc0:	bl	aef0 <closedir@plt>
    dcc4:	mov	x0, x19
    dcc8:	bl	b150 <rmdir@plt>
    dccc:	cmn	w0, #0x1
    dcd0:	csetm	w0, eq  // eq = none
    dcd4:	b	dcdc <remove_directory@@Base+0x148>
    dcd8:	mov	w0, #0xffffffff            	// #-1
    dcdc:	ldp	x20, x19, [sp, #192]
    dce0:	ldp	x22, x21, [sp, #176]
    dce4:	ldp	x24, x23, [sp, #160]
    dce8:	ldr	x25, [sp, #144]
    dcec:	ldp	x29, x30, [sp, #128]
    dcf0:	add	sp, sp, #0xd0
    dcf4:	ret

000000000000dcf8 <trim_spaces@@Base>:
    dcf8:	stp	x29, x30, [sp, #-32]!
    dcfc:	stp	x20, x19, [sp, #16]
    dd00:	mov	x20, x0
    dd04:	mov	x29, sp
    dd08:	mov	x19, x20
    dd0c:	ldrb	w8, [x20], #1
    dd10:	cmp	w8, #0x20
    dd14:	b.eq	dd08 <trim_spaces@@Base+0x10>  // b.none
    dd18:	mov	x0, x19
    dd1c:	bl	a890 <strlen@plt>
    dd20:	sxtw	x8, w0
    dd24:	sub	x8, x8, #0x2
    dd28:	cmn	x8, #0x2
    dd2c:	b.eq	dd48 <trim_spaces@@Base+0x50>  // b.none
    dd30:	ldrb	w9, [x20, x8]
    dd34:	sub	x8, x8, #0x1
    dd38:	cmp	w9, #0x20
    dd3c:	b.eq	dd28 <trim_spaces@@Base+0x30>  // b.none
    dd40:	add	x8, x8, #0x3
    dd44:	b	dd4c <trim_spaces@@Base+0x54>
    dd48:	mov	x8, xzr
    dd4c:	sxtw	x1, w8
    dd50:	mov	x0, x19
    dd54:	bl	b4a0 <xstrndup@plt>
    dd58:	ldp	x20, x19, [sp, #16]
    dd5c:	ldp	x29, x30, [sp], #32
    dd60:	ret

000000000000dd64 <lang_dir@@Base>:
    dd64:	stp	x29, x30, [sp, #-48]!
    dd68:	stp	x20, x19, [sp, #32]
    dd6c:	mov	x20, x0
    dd70:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
    dd74:	add	x0, x0, #0x4fc
    dd78:	str	x21, [sp, #16]
    dd7c:	mov	x29, sp
    dd80:	bl	ada0 <xstrdup@plt>
    dd84:	mov	x19, x0
    dd88:	cbz	x20, de64 <lang_dir@@Base+0x100>
    dd8c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    dd90:	add	x1, x1, #0x732
    dd94:	mov	w2, #0x4                   	// #4
    dd98:	mov	x0, x20
    dd9c:	bl	acf0 <strncmp@plt>
    dda0:	cbz	w0, ddbc <lang_dir@@Base+0x58>
    dda4:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    dda8:	add	x1, x1, #0x731
    ddac:	mov	x0, x20
    ddb0:	bl	b540 <strstr@plt>
    ddb4:	cmp	x0, #0x0
    ddb8:	csinc	x20, xzr, x0, eq  // eq = none
    ddbc:	cbz	x20, de64 <lang_dir@@Base+0x100>
    ddc0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ddc4:	add	x0, x20, #0x2
    ddc8:	add	x1, x1, #0x737
    ddcc:	bl	b540 <strstr@plt>
    ddd0:	cbz	x0, de64 <lang_dir@@Base+0x100>
    ddd4:	ldrb	w8, [x0, #5]
    ddd8:	mov	x21, x0
    dddc:	cmp	w8, #0x2f
    dde0:	b.ne	de64 <lang_dir@@Base+0x100>  // b.any
    dde4:	ldrb	w1, [x21, #4]
    dde8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    ddec:	add	x0, x0, #0x73c
    ddf0:	mov	w2, #0xd                   	// #13
    ddf4:	bl	b440 <memchr@plt>
    ddf8:	cbz	x0, de64 <lang_dir@@Base+0x100>
    ddfc:	add	x8, x20, #0x3
    de00:	cmp	x21, x8
    de04:	b.eq	de4c <lang_dir@@Base+0xe8>  // b.none
    de08:	add	x20, x20, #0x4
    de0c:	mov	w1, #0x2f                  	// #47
    de10:	mov	x0, x20
    de14:	bl	b300 <strchr@plt>
    de18:	cbz	x0, de64 <lang_dir@@Base+0x100>
    de1c:	mov	x21, x0
    de20:	mov	x0, x19
    de24:	bl	b1d0 <free@plt>
    de28:	sub	x1, x21, x20
    de2c:	mov	x0, x20
    de30:	bl	b4a0 <xstrndup@plt>
    de34:	mov	x19, x0
    de38:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    de3c:	add	x0, x0, #0x749
    de40:	mov	x1, x19
    de44:	bl	ab30 <debug@plt>
    de48:	b	de64 <lang_dir@@Base+0x100>
    de4c:	mov	x0, x19
    de50:	bl	b1d0 <free@plt>
    de54:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    de58:	add	x0, x0, #0x7a
    de5c:	bl	ada0 <xstrdup@plt>
    de60:	mov	x19, x0
    de64:	mov	x0, x19
    de68:	ldp	x20, x19, [sp, #32]
    de6c:	ldr	x21, [sp, #16]
    de70:	ldp	x29, x30, [sp], #48
    de74:	ret

000000000000de78 <init_locale@@Base>:
    de78:	stp	x29, x30, [sp, #-32]!
    de7c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
    de80:	add	x1, x1, #0x4fc
    de84:	mov	w0, #0x6                   	// #6
    de88:	stp	x20, x19, [sp, #16]
    de8c:	mov	x29, sp
    de90:	bl	b830 <setlocale@plt>
    de94:	cbnz	x0, dec8 <init_locale@@Base+0x50>
    de98:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    de9c:	add	x0, x0, #0x764
    dea0:	bl	b720 <getenv@plt>
    dea4:	cbnz	x0, dec8 <init_locale@@Base+0x50>
    dea8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    deac:	add	x0, x0, #0x77a
    deb0:	bl	b720 <getenv@plt>
    deb4:	cbnz	x0, dec8 <init_locale@@Base+0x50>
    deb8:	adrp	x2, 2b000 <vasnprintf@@Base+0xec4>
    debc:	add	x2, x2, #0x78f
    dec0:	mov	w1, wzr
    dec4:	bl	a8c0 <error@plt>
    dec8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    decc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
    ded0:	add	x0, x0, #0x764
    ded4:	add	x1, x1, #0xb93
    ded8:	mov	w2, #0x1                   	// #1
    dedc:	bl	a9d0 <setenv@plt>
    dee0:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    dee4:	adrp	x20, 2b000 <vasnprintf@@Base+0xec4>
    dee8:	add	x19, x19, #0x7cb
    deec:	add	x20, x20, #0x7d2
    def0:	mov	x0, x19
    def4:	mov	x1, x20
    def8:	bl	ad00 <bindtextdomain@plt>
    defc:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    df00:	add	x0, x0, #0x7e4
    df04:	mov	x1, x20
    df08:	bl	ad00 <bindtextdomain@plt>
    df0c:	mov	x0, x19
    df10:	bl	b0d0 <textdomain@plt>
    df14:	ldp	x20, x19, [sp, #16]
    df18:	ldp	x29, x30, [sp], #32
    df1c:	ret

000000000000df20 <word_fnmatch@@Base>:
    df20:	stp	x29, x30, [sp, #-64]!
    df24:	stp	x20, x19, [sp, #48]
    df28:	mov	x20, x0
    df2c:	mov	x0, x1
    df30:	str	x23, [sp, #16]
    df34:	stp	x22, x21, [sp, #32]
    df38:	mov	x29, sp
    df3c:	bl	ada0 <xstrdup@plt>
    df40:	ldrb	w23, [x0]
    df44:	mov	x19, x0
    df48:	cbz	w23, dfbc <word_fnmatch@@Base+0x9c>
    df4c:	bl	b140 <__ctype_b_loc@plt>
    df50:	mov	x21, x0
    df54:	add	x22, x19, #0x1
    df58:	mov	x1, x19
    df5c:	b	df70 <word_fnmatch@@Base+0x50>
    df60:	mov	x8, x1
    df64:	ldrb	w23, [x22], #1
    df68:	mov	x1, x8
    df6c:	cbz	w23, dfbc <word_fnmatch@@Base+0x9c>
    df70:	and	w8, w23, #0xff
    df74:	cmp	w8, #0x5f
    df78:	b.eq	df60 <word_fnmatch@@Base+0x40>  // b.none
    df7c:	ldr	x8, [x21]
    df80:	and	x9, x23, #0xff
    df84:	ldrh	w8, [x8, x9, lsl #1]
    df88:	tbnz	w8, #10, df60 <word_fnmatch@@Base+0x40>
    df8c:	sub	x9, x22, #0x1
    df90:	add	x8, x1, #0x1
    df94:	cmp	x9, x8
    df98:	b.ls	df64 <word_fnmatch@@Base+0x44>  // b.plast
    df9c:	mov	w2, #0x10                  	// #16
    dfa0:	mov	x0, x20
    dfa4:	strb	wzr, [x9]
    dfa8:	bl	b3a0 <fnmatch@plt>
    dfac:	mov	x8, x22
    dfb0:	cbnz	w0, df64 <word_fnmatch@@Base+0x44>
    dfb4:	mov	w20, #0x1                   	// #1
    dfb8:	b	dfc0 <word_fnmatch@@Base+0xa0>
    dfbc:	mov	w20, wzr
    dfc0:	mov	x0, x19
    dfc4:	bl	b1d0 <free@plt>
    dfc8:	mov	w0, w20
    dfcc:	ldp	x20, x19, [sp, #48]
    dfd0:	ldp	x22, x21, [sp, #32]
    dfd4:	ldr	x23, [sp, #16]
    dfd8:	ldp	x29, x30, [sp], #64
    dfdc:	ret

000000000000dfe0 <xregcomp@@Base>:
    dfe0:	stp	x29, x30, [sp, #-64]!
    dfe4:	str	x23, [sp, #16]
    dfe8:	stp	x22, x21, [sp, #32]
    dfec:	stp	x20, x19, [sp, #48]
    dff0:	mov	x29, sp
    dff4:	mov	x19, x1
    dff8:	mov	x20, x0
    dffc:	bl	ab70 <rpl_regcomp@plt>
    e000:	cbz	w0, e064 <xregcomp@@Base+0x84>
    e004:	mov	x1, x20
    e008:	mov	x2, xzr
    e00c:	mov	x3, xzr
    e010:	mov	w21, w0
    e014:	bl	b3d0 <rpl_regerror@plt>
    e018:	mov	x22, x0
    e01c:	bl	ad70 <xmalloc@plt>
    e020:	mov	x23, x0
    e024:	mov	w0, w21
    e028:	mov	x1, x20
    e02c:	mov	x2, x23
    e030:	mov	x3, x22
    e034:	bl	b3d0 <rpl_regerror@plt>
    e038:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    e03c:	add	x1, x1, #0x7f2
    e040:	mov	w2, #0x5                   	// #5
    e044:	mov	x0, xzr
    e048:	bl	b580 <dcgettext@plt>
    e04c:	mov	x2, x0
    e050:	mov	w0, #0x2                   	// #2
    e054:	mov	w1, wzr
    e058:	mov	x3, x19
    e05c:	mov	x4, x23
    e060:	bl	a8c0 <error@plt>
    e064:	ldp	x20, x19, [sp, #48]
    e068:	ldp	x22, x21, [sp, #32]
    e06c:	ldr	x23, [sp, #16]
    e070:	ldp	x29, x30, [sp], #64
    e074:	ret

000000000000e078 <areadlink_with_size@@Base>:
    e078:	sub	sp, sp, #0xe0
    e07c:	cmp	x1, #0x401
    e080:	mov	w8, #0x401                 	// #1025
    e084:	mov	w9, #0x80                  	// #128
    e088:	csinc	x8, x8, x1, cs  // cs = hs, nlast
    e08c:	cmp	x1, #0x0
    e090:	stp	x28, x27, [sp, #144]
    e094:	stp	x22, x21, [sp, #192]
    e098:	stp	x20, x19, [sp, #208]
    e09c:	mov	x19, x1
    e0a0:	mov	x20, x0
    e0a4:	csel	x21, x9, x8, eq  // eq = none
    e0a8:	mov	w27, #0xc                   	// #12
    e0ac:	stp	x29, x30, [sp, #128]
    e0b0:	stp	x26, x25, [sp, #160]
    e0b4:	stp	x24, x23, [sp, #176]
    e0b8:	add	x29, sp, #0x80
    e0bc:	b	e0cc <areadlink_with_size@@Base+0x54>
    e0c0:	mov	w8, wzr
    e0c4:	mov	x22, xzr
    e0c8:	tbz	w8, #0, e1f8 <areadlink_with_size@@Base+0x180>
    e0cc:	cbnz	x19, e0e4 <areadlink_with_size@@Base+0x6c>
    e0d0:	cmp	x21, #0x80
    e0d4:	b.ne	e0e4 <areadlink_with_size@@Base+0x6c>  // b.any
    e0d8:	mov	x23, xzr
    e0dc:	mov	x24, sp
    e0e0:	b	e0f8 <areadlink_with_size@@Base+0x80>
    e0e4:	mov	x0, x21
    e0e8:	bl	abc0 <malloc@plt>
    e0ec:	mov	x24, x0
    e0f0:	mov	x23, x0
    e0f4:	cbz	x0, e0c0 <areadlink_with_size@@Base+0x48>
    e0f8:	mov	x0, x20
    e0fc:	mov	x1, x24
    e100:	mov	x2, x21
    e104:	bl	a9e0 <readlink@plt>
    e108:	mov	x25, x0
    e10c:	tbz	x0, #63, e120 <areadlink_with_size@@Base+0xa8>
    e110:	bl	b6f0 <__errno_location@plt>
    e114:	ldr	w28, [x0]
    e118:	cmp	w28, #0x22
    e11c:	b.ne	e18c <areadlink_with_size@@Base+0x114>  // b.any
    e120:	cmp	x25, x21
    e124:	b.cs	e158 <areadlink_with_size@@Base+0xe0>  // b.hs, b.nlast
    e128:	strb	wzr, [x24, x25]
    e12c:	add	x25, x25, #0x1
    e130:	cbz	x23, e1a8 <areadlink_with_size@@Base+0x130>
    e134:	cmp	x25, x21
    e138:	b.cs	e1d0 <areadlink_with_size@@Base+0x158>  // b.hs, b.nlast
    e13c:	mov	x0, x23
    e140:	mov	x1, x25
    e144:	bl	aea0 <realloc@plt>
    e148:	cmp	x0, #0x0
    e14c:	mov	w8, wzr
    e150:	csel	x22, x23, x0, eq  // eq = none
    e154:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e158:	mov	x0, x23
    e15c:	bl	b1d0 <free@plt>
    e160:	lsr	x8, x21, #62
    e164:	cbnz	x8, e174 <areadlink_with_size@@Base+0xfc>
    e168:	lsl	x21, x21, #1
    e16c:	mov	w8, #0x1                   	// #1
    e170:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e174:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    e178:	cmp	x21, x8
    e17c:	b.cs	e1dc <areadlink_with_size@@Base+0x164>  // b.hs, b.nlast
    e180:	mov	w8, #0x1                   	// #1
    e184:	mov	x21, #0x7fffffffffffffff    	// #9223372036854775807
    e188:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e18c:	mov	x26, x0
    e190:	mov	x0, x23
    e194:	bl	b1d0 <free@plt>
    e198:	mov	w8, wzr
    e19c:	mov	x22, xzr
    e1a0:	str	w28, [x26]
    e1a4:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e1a8:	mov	x0, x25
    e1ac:	bl	abc0 <malloc@plt>
    e1b0:	mov	x22, x0
    e1b4:	cbz	x0, e1f0 <areadlink_with_size@@Base+0x178>
    e1b8:	mov	x0, x22
    e1bc:	mov	x1, x24
    e1c0:	mov	x2, x25
    e1c4:	bl	a800 <memcpy@plt>
    e1c8:	mov	w8, wzr
    e1cc:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e1d0:	mov	w8, wzr
    e1d4:	mov	x22, x23
    e1d8:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e1dc:	bl	b6f0 <__errno_location@plt>
    e1e0:	mov	w8, wzr
    e1e4:	mov	x22, xzr
    e1e8:	str	w27, [x0]
    e1ec:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e1f0:	mov	w8, wzr
    e1f4:	b	e0c8 <areadlink_with_size@@Base+0x50>
    e1f8:	mov	x0, x22
    e1fc:	ldp	x20, x19, [sp, #208]
    e200:	ldp	x22, x21, [sp, #192]
    e204:	ldp	x24, x23, [sp, #176]
    e208:	ldp	x26, x25, [sp, #160]
    e20c:	ldp	x28, x27, [sp, #144]
    e210:	ldp	x29, x30, [sp, #128]
    e214:	add	sp, sp, #0xe0
    e218:	ret

000000000000e21c <argp_make_fmtstream@@Base>:
    e21c:	stp	x29, x30, [sp, #-64]!
    e220:	str	x23, [sp, #16]
    e224:	mov	x23, x0
    e228:	mov	w0, #0x48                  	// #72
    e22c:	stp	x22, x21, [sp, #32]
    e230:	stp	x20, x19, [sp, #48]
    e234:	mov	x29, sp
    e238:	mov	x20, x3
    e23c:	mov	x21, x2
    e240:	mov	x22, x1
    e244:	bl	abc0 <malloc@plt>
    e248:	mov	x19, x0
    e24c:	cbz	x0, e284 <argp_make_fmtstream@@Base+0x68>
    e250:	mov	w0, #0xc8                  	// #200
    e254:	stp	x23, x22, [x19]
    e258:	stp	x21, x20, [x19, #16]
    e25c:	stp	xzr, xzr, [x19, #32]
    e260:	bl	abc0 <malloc@plt>
    e264:	str	x0, [x19, #48]
    e268:	cbz	x0, e278 <argp_make_fmtstream@@Base+0x5c>
    e26c:	add	x8, x0, #0xc8
    e270:	stp	x0, x8, [x19, #56]
    e274:	b	e284 <argp_make_fmtstream@@Base+0x68>
    e278:	mov	x0, x19
    e27c:	bl	b1d0 <free@plt>
    e280:	mov	x19, xzr
    e284:	mov	x0, x19
    e288:	ldp	x20, x19, [sp, #48]
    e28c:	ldp	x22, x21, [sp, #32]
    e290:	ldr	x23, [sp, #16]
    e294:	ldp	x29, x30, [sp], #64
    e298:	ret

000000000000e29c <argp_fmtstream_free@@Base>:
    e29c:	stp	x29, x30, [sp, #-32]!
    e2a0:	str	x19, [sp, #16]
    e2a4:	mov	x29, sp
    e2a8:	mov	x19, x0
    e2ac:	bl	aac0 <_argp_fmtstream_update@plt>
    e2b0:	ldp	x0, x8, [x19, #48]
    e2b4:	cmp	x8, x0
    e2b8:	b.ls	e2d0 <argp_fmtstream_free@@Base+0x34>  // b.plast
    e2bc:	ldr	x8, [x19, #56]
    e2c0:	ldr	x3, [x19]
    e2c4:	mov	w1, #0x1                   	// #1
    e2c8:	sub	x2, x8, x0
    e2cc:	bl	a870 <fwrite_unlocked@plt>
    e2d0:	ldr	x0, [x19, #48]
    e2d4:	bl	b1d0 <free@plt>
    e2d8:	mov	x0, x19
    e2dc:	bl	b1d0 <free@plt>
    e2e0:	ldr	x19, [sp, #16]
    e2e4:	ldp	x29, x30, [sp], #32
    e2e8:	ret

000000000000e2ec <_argp_fmtstream_update@@Base>:
    e2ec:	sub	sp, sp, #0x70
    e2f0:	stp	x29, x30, [sp, #16]
    e2f4:	stp	x28, x27, [sp, #32]
    e2f8:	stp	x26, x25, [sp, #48]
    e2fc:	stp	x24, x23, [sp, #64]
    e300:	stp	x22, x21, [sp, #80]
    e304:	stp	x20, x19, [sp, #96]
    e308:	ldr	x8, [x0, #48]
    e30c:	ldr	x9, [x0, #32]
    e310:	mov	x19, x0
    e314:	add	x29, sp, #0x10
    e318:	add	x25, x8, x9
    e31c:	b	e334 <_argp_fmtstream_update@@Base+0x48>
    e320:	str	xzr, [x19, #40]
    e324:	add	x25, x24, #0x1
    e328:	mov	w8, #0x2                   	// #2
    e32c:	cmp	w8, #0x3
    e330:	b.eq	e75c <_argp_fmtstream_update@@Base+0x470>  // b.none
    e334:	ldr	x8, [x19, #56]
    e338:	cmp	x25, x8
    e33c:	b.cs	e75c <_argp_fmtstream_update@@Base+0x470>  // b.hs, b.nlast
    e340:	ldr	x9, [x19, #40]
    e344:	cbnz	x9, e3b4 <_argp_fmtstream_update@@Base+0xc8>
    e348:	ldr	x21, [x19, #8]
    e34c:	cbz	x21, e3b4 <_argp_fmtstream_update@@Base+0xc8>
    e350:	ldr	x9, [x19, #64]
    e354:	add	x10, x8, x21
    e358:	mov	x20, x21
    e35c:	cmp	x10, x9
    e360:	b.cs	e39c <_argp_fmtstream_update@@Base+0xb0>  // b.hs, b.nlast
    e364:	add	x22, x25, x21
    e368:	sub	x2, x8, x25
    e36c:	mov	x0, x22
    e370:	mov	x1, x25
    e374:	bl	a810 <memmove@plt>
    e378:	ldr	x8, [x19, #56]
    e37c:	mov	w1, #0x20                  	// #32
    e380:	mov	x0, x25
    e384:	mov	x2, x21
    e388:	add	x8, x8, x21
    e38c:	str	x8, [x19, #56]
    e390:	bl	ad40 <memset@plt>
    e394:	mov	x25, x22
    e398:	b	e3b0 <_argp_fmtstream_update@@Base+0xc4>
    e39c:	ldr	x1, [x19]
    e3a0:	mov	w0, #0x20                  	// #32
    e3a4:	bl	ab20 <putc_unlocked@plt>
    e3a8:	subs	x20, x20, #0x1
    e3ac:	b.ne	e39c <_argp_fmtstream_update@@Base+0xb0>  // b.any
    e3b0:	str	x21, [x19, #40]
    e3b4:	ldr	x27, [x19, #56]
    e3b8:	mov	w1, #0xa                   	// #10
    e3bc:	mov	x0, x25
    e3c0:	sub	x21, x27, x25
    e3c4:	mov	x2, x21
    e3c8:	bl	b440 <memchr@plt>
    e3cc:	ldr	x8, [x19, #40]
    e3d0:	mov	x24, x0
    e3d4:	tbnz	x8, #63, e3f8 <_argp_fmtstream_update@@Base+0x10c>
    e3d8:	ldr	x8, [x19, #40]
    e3dc:	cbz	x24, e404 <_argp_fmtstream_update@@Base+0x118>
    e3e0:	ldr	x9, [x19, #16]
    e3e4:	sub	x10, x24, x25
    e3e8:	add	x10, x10, x8
    e3ec:	cmp	x10, x9
    e3f0:	b.lt	e320 <_argp_fmtstream_update@@Base+0x34>  // b.tstop
    e3f4:	b	e424 <_argp_fmtstream_update@@Base+0x138>
    e3f8:	str	xzr, [x19, #40]
    e3fc:	ldr	x8, [x19, #40]
    e400:	cbnz	x24, e3e0 <_argp_fmtstream_update@@Base+0xf4>
    e404:	ldr	x10, [x19, #16]
    e408:	add	x9, x8, x21
    e40c:	mov	x24, x27
    e410:	cmp	x9, x10
    e414:	b.cs	e424 <_argp_fmtstream_update@@Base+0x138>  // b.hs, b.nlast
    e418:	str	x9, [x19, #40]
    e41c:	mov	w8, #0x3                   	// #3
    e420:	b	e32c <_argp_fmtstream_update@@Base+0x40>
    e424:	ldp	x20, x9, [x19, #16]
    e428:	tbnz	x9, #63, e488 <_argp_fmtstream_update@@Base+0x19c>
    e42c:	subs	x26, x20, x8
    e430:	lsr	x8, x26, #63
    e434:	add	x20, x25, x26
    e438:	eor	w28, w8, #0x1
    e43c:	str	x9, [sp, #8]
    e440:	b.mi	e4d0 <_argp_fmtstream_update@@Base+0x1e4>  // b.first
    e444:	bl	b140 <__ctype_b_loc@plt>
    e448:	ldr	x8, [x0]
    e44c:	ldrb	w9, [x20]
    e450:	mov	x22, x20
    e454:	ldrh	w9, [x8, x9, lsl #1]
    e458:	tbnz	w9, #0, e4d4 <_argp_fmtstream_update@@Base+0x1e8>
    e45c:	add	x9, x25, x26
    e460:	sub	x9, x9, #0x1
    e464:	cmp	x9, x25
    e468:	mov	x22, x9
    e46c:	cset	w28, cs  // cs = hs, nlast
    e470:	b.cc	e4d4 <_argp_fmtstream_update@@Base+0x1e8>  // b.lo, b.ul, b.last
    e474:	mov	x9, x22
    e478:	ldrb	w10, [x9], #-1
    e47c:	ldrh	w10, [x8, x10, lsl #1]
    e480:	tbz	w10, #0, e464 <_argp_fmtstream_update@@Base+0x178>
    e484:	b	e4d4 <_argp_fmtstream_update@@Base+0x1e8>
    e488:	cmp	x24, x27
    e48c:	sub	x22, x20, #0x1
    e490:	b.cs	e578 <_argp_fmtstream_update@@Base+0x28c>  // b.hs, b.nlast
    e494:	sub	x8, x22, x8
    e498:	add	x0, x25, x8
    e49c:	sub	x2, x27, x24
    e4a0:	mov	x1, x24
    e4a4:	bl	a810 <memmove@plt>
    e4a8:	ldr	x8, [x19, #40]
    e4ac:	ldr	x9, [x19, #56]
    e4b0:	str	xzr, [x19, #40]
    e4b4:	add	x20, x25, x20
    e4b8:	sub	x8, x22, x8
    e4bc:	add	x8, x25, x8
    e4c0:	sub	x8, x24, x8
    e4c4:	add	x8, x9, x8
    e4c8:	str	x8, [x19, #56]
    e4cc:	b	e738 <_argp_fmtstream_update@@Base+0x44c>
    e4d0:	mov	x22, x20
    e4d4:	add	x23, x22, #0x1
    e4d8:	cmp	x23, x25
    e4dc:	b.ls	e518 <_argp_fmtstream_update@@Base+0x22c>  // b.plast
    e4e0:	cbz	w28, e594 <_argp_fmtstream_update@@Base+0x2a8>
    e4e4:	ldr	x26, [sp, #8]
    e4e8:	sub	x8, x22, #0x1
    e4ec:	mov	w24, #0x20                  	// #32
    e4f0:	mov	x22, x8
    e4f4:	cmp	x8, x25
    e4f8:	b.cc	e59c <_argp_fmtstream_update@@Base+0x2b0>  // b.lo, b.ul, b.last
    e4fc:	bl	b140 <__ctype_b_loc@plt>
    e500:	mov	x8, x22
    e504:	ldr	x9, [x0]
    e508:	ldrb	w10, [x8], #-1
    e50c:	ldrh	w9, [x9, x10, lsl #1]
    e510:	tbnz	w9, #0, e4f0 <_argp_fmtstream_update@@Base+0x204>
    e514:	b	e59c <_argp_fmtstream_update@@Base+0x2b0>
    e518:	cmp	x20, x24
    e51c:	b.cs	e54c <_argp_fmtstream_update@@Base+0x260>  // b.hs, b.nlast
    e520:	add	x8, x25, x26
    e524:	add	x8, x8, #0x1
    e528:	mov	x20, x8
    e52c:	cmp	x8, x24
    e530:	b.cs	e54c <_argp_fmtstream_update@@Base+0x260>  // b.hs, b.nlast
    e534:	bl	b140 <__ctype_b_loc@plt>
    e538:	mov	x8, x20
    e53c:	ldr	x9, [x0]
    e540:	ldrb	w10, [x8], #1
    e544:	ldrh	w9, [x9, x10, lsl #1]
    e548:	tbz	w9, #0, e528 <_argp_fmtstream_update@@Base+0x23c>
    e54c:	cmp	x20, x24
    e550:	b.eq	e744 <_argp_fmtstream_update@@Base+0x458>  // b.none
    e554:	bl	b140 <__ctype_b_loc@plt>
    e558:	ldr	x8, [x0]
    e55c:	mov	x23, x20
    e560:	ldrb	w9, [x23, #1]!
    e564:	ldrh	w9, [x8, x9, lsl #1]
    e568:	tbnz	w9, #0, e560 <_argp_fmtstream_update@@Base+0x274>
    e56c:	ldr	x26, [sp, #8]
    e570:	mov	w24, #0x20                  	// #32
    e574:	b	e5a0 <_argp_fmtstream_update@@Base+0x2b4>
    e578:	add	x8, x8, x21
    e57c:	str	x8, [x19, #40]
    e580:	sub	x8, x22, x8
    e584:	add	x8, x27, x8
    e588:	str	x8, [x19, #56]
    e58c:	mov	w8, #0x3                   	// #3
    e590:	b	e32c <_argp_fmtstream_update@@Base+0x40>
    e594:	ldr	x26, [sp, #8]
    e598:	mov	w24, #0x20                  	// #32
    e59c:	add	x20, x22, #0x1
    e5a0:	add	x8, x27, #0x1
    e5a4:	cmp	x23, x8
    e5a8:	b.eq	e5c8 <_argp_fmtstream_update@@Base+0x2dc>  // b.none
    e5ac:	cmp	x27, x23
    e5b0:	b.ls	e62c <_argp_fmtstream_update@@Base+0x340>  // b.plast
    e5b4:	mvn	x8, x20
    e5b8:	add	x8, x8, x23
    e5bc:	cmp	x8, x26
    e5c0:	b.lt	e5e0 <_argp_fmtstream_update@@Base+0x2f4>  // b.tstop
    e5c4:	b	e62c <_argp_fmtstream_update@@Base+0x340>
    e5c8:	cmp	x27, x23
    e5cc:	b.ls	e62c <_argp_fmtstream_update@@Base+0x340>  // b.plast
    e5d0:	ldr	x8, [x19, #64]
    e5d4:	sub	x8, x8, x20
    e5d8:	cmp	x8, x26
    e5dc:	b.gt	e62c <_argp_fmtstream_update@@Base+0x340>
    e5e0:	ldr	x8, [x19, #64]
    e5e4:	add	x9, x26, #0x1
    e5e8:	sub	x8, x8, x27
    e5ec:	cmp	x8, x9
    e5f0:	b.le	e638 <_argp_fmtstream_update@@Base+0x34c>
    e5f4:	sub	x21, x27, x23
    e5f8:	add	x22, x20, #0x1
    e5fc:	add	x0, x22, x26
    e600:	mov	x1, x23
    e604:	mov	x2, x21
    e608:	bl	a810 <memmove@plt>
    e60c:	ldr	x8, [x19, #24]
    e610:	mov	w9, #0xa                   	// #10
    e614:	strb	w9, [x20]
    e618:	mov	x20, x22
    e61c:	add	x23, x22, x8
    e620:	add	x8, x23, x21
    e624:	sub	x21, x8, x25
    e628:	b	e668 <_argp_fmtstream_update@@Base+0x37c>
    e62c:	mov	w8, #0xa                   	// #10
    e630:	strb	w8, [x20], #1
    e634:	b	e668 <_argp_fmtstream_update@@Base+0x37c>
    e638:	ldr	x0, [x19, #48]
    e63c:	subs	x2, x20, x0
    e640:	b.ls	e650 <_argp_fmtstream_update@@Base+0x364>  // b.plast
    e644:	ldr	x3, [x19]
    e648:	mov	w1, #0x1                   	// #1
    e64c:	bl	a870 <fwrite_unlocked@plt>
    e650:	ldr	x1, [x19]
    e654:	mov	w0, #0xa                   	// #10
    e658:	bl	ab20 <putc_unlocked@plt>
    e65c:	ldr	x20, [x19, #48]
    e660:	sub	x21, x27, x20
    e664:	mov	x25, x20
    e668:	ldr	x8, [x19, #24]
    e66c:	sub	x9, x23, x20
    e670:	cmp	x9, x8
    e674:	b.ge	e6c8 <_argp_fmtstream_update@@Base+0x3dc>  // b.tcont
    e678:	add	x9, x25, x21
    e67c:	add	x9, x9, #0x1
    e680:	cmp	x23, x9
    e684:	b.ne	e698 <_argp_fmtstream_update@@Base+0x3ac>  // b.any
    e688:	ldr	x9, [x19, #64]
    e68c:	sub	x9, x9, x23
    e690:	cmp	x9, x8
    e694:	b.ge	e6c8 <_argp_fmtstream_update@@Base+0x3dc>  // b.tcont
    e698:	ldr	x8, [x19, #24]
    e69c:	cmp	x8, #0x1
    e6a0:	b.lt	e6f0 <_argp_fmtstream_update@@Base+0x404>  // b.tstop
    e6a4:	mov	x22, xzr
    e6a8:	ldr	x1, [x19]
    e6ac:	mov	w0, #0x20                  	// #32
    e6b0:	bl	ab20 <putc_unlocked@plt>
    e6b4:	ldr	x8, [x19, #24]
    e6b8:	add	x22, x22, #0x1
    e6bc:	cmp	x8, x22
    e6c0:	b.gt	e6a8 <_argp_fmtstream_update@@Base+0x3bc>
    e6c4:	b	e6f0 <_argp_fmtstream_update@@Base+0x404>
    e6c8:	ldr	x8, [x19, #24]
    e6cc:	cmp	x8, #0x1
    e6d0:	b.lt	e6f0 <_argp_fmtstream_update@@Base+0x404>  // b.tstop
    e6d4:	mov	x8, xzr
    e6d8:	strb	w24, [x20, x8]
    e6dc:	ldr	x9, [x19, #24]
    e6e0:	add	x8, x8, #0x1
    e6e4:	cmp	x9, x8
    e6e8:	b.gt	e6d8 <_argp_fmtstream_update@@Base+0x3ec>
    e6ec:	add	x20, x20, x8
    e6f0:	cmp	x20, x23
    e6f4:	b.cs	e70c <_argp_fmtstream_update@@Base+0x420>  // b.hs, b.nlast
    e6f8:	add	x8, x25, x21
    e6fc:	sub	x2, x8, x23
    e700:	mov	x0, x20
    e704:	mov	x1, x23
    e708:	bl	a810 <memmove@plt>
    e70c:	ldr	x10, [x19, #24]
    e710:	sub	x9, x21, x23
    e714:	add	x9, x9, x25
    e718:	add	x9, x20, x9
    e71c:	cmp	x10, #0x0
    e720:	mov	w8, wzr
    e724:	str	x9, [x19, #56]
    e728:	csinv	x9, x10, xzr, ne  // ne = any
    e72c:	str	x9, [x19, #40]
    e730:	mov	x25, x20
    e734:	cbnz	w8, e32c <_argp_fmtstream_update@@Base+0x40>
    e738:	mov	w8, wzr
    e73c:	mov	x25, x20
    e740:	b	e32c <_argp_fmtstream_update@@Base+0x40>
    e744:	str	xzr, [x19, #40]
    e748:	add	x20, x24, #0x1
    e74c:	mov	w8, #0x2                   	// #2
    e750:	mov	x25, x20
    e754:	cbnz	w8, e32c <_argp_fmtstream_update@@Base+0x40>
    e758:	b	e738 <_argp_fmtstream_update@@Base+0x44c>
    e75c:	ldp	x9, x8, [x19, #48]
    e760:	sub	x8, x8, x9
    e764:	str	x8, [x19, #32]
    e768:	ldp	x20, x19, [sp, #96]
    e76c:	ldp	x22, x21, [sp, #80]
    e770:	ldp	x24, x23, [sp, #64]
    e774:	ldp	x26, x25, [sp, #48]
    e778:	ldp	x28, x27, [sp, #32]
    e77c:	ldp	x29, x30, [sp, #16]
    e780:	add	sp, sp, #0x70
    e784:	ret

000000000000e788 <_argp_fmtstream_ensure@@Base>:
    e788:	stp	x29, x30, [sp, #-32]!
    e78c:	stp	x20, x19, [sp, #16]
    e790:	ldp	x9, x8, [x0, #56]
    e794:	mov	x29, sp
    e798:	sub	x8, x8, x9
    e79c:	cmp	x8, x1
    e7a0:	b.cs	e868 <_argp_fmtstream_ensure@@Base+0xe0>  // b.hs, b.nlast
    e7a4:	mov	x20, x1
    e7a8:	mov	x19, x0
    e7ac:	bl	aac0 <_argp_fmtstream_update@plt>
    e7b0:	ldp	x0, x8, [x19, #48]
    e7b4:	ldr	x3, [x19]
    e7b8:	mov	w1, #0x1                   	// #1
    e7bc:	sub	x2, x8, x0
    e7c0:	bl	a870 <fwrite_unlocked@plt>
    e7c4:	mov	x8, x0
    e7c8:	ldp	x0, x9, [x19, #48]
    e7cc:	sub	x10, x9, x0
    e7d0:	cmp	x8, x10
    e7d4:	b.ne	e81c <_argp_fmtstream_ensure@@Base+0x94>  // b.any
    e7d8:	ldr	x8, [x19, #64]
    e7dc:	str	x0, [x19, #56]
    e7e0:	str	xzr, [x19, #32]
    e7e4:	sub	x8, x8, x0
    e7e8:	cmp	x8, x20
    e7ec:	b.cs	e858 <_argp_fmtstream_ensure@@Base+0xd0>  // b.hs, b.nlast
    e7f0:	adds	x20, x8, x20
    e7f4:	b.cs	e844 <_argp_fmtstream_ensure@@Base+0xbc>  // b.hs, b.nlast
    e7f8:	mov	x1, x20
    e7fc:	bl	aea0 <realloc@plt>
    e800:	cbz	x0, e844 <_argp_fmtstream_ensure@@Base+0xbc>
    e804:	mov	w8, wzr
    e808:	add	x9, x0, x20
    e80c:	stp	x0, x9, [x19, #56]
    e810:	str	x0, [x19, #48]
    e814:	cbnz	w8, e85c <_argp_fmtstream_ensure@@Base+0xd4>
    e818:	b	e858 <_argp_fmtstream_ensure@@Base+0xd0>
    e81c:	ldr	x10, [x19, #32]
    e820:	sub	x9, x9, x8
    e824:	add	x1, x0, x8
    e828:	sub	x2, x9, x0
    e82c:	sub	x8, x10, x8
    e830:	str	x9, [x19, #56]
    e834:	str	x8, [x19, #32]
    e838:	bl	a810 <memmove@plt>
    e83c:	mov	w8, #0x1                   	// #1
    e840:	b	e85c <_argp_fmtstream_ensure@@Base+0xd4>
    e844:	bl	b6f0 <__errno_location@plt>
    e848:	mov	w8, #0xc                   	// #12
    e84c:	str	w8, [x0]
    e850:	mov	w8, #0x1                   	// #1
    e854:	cbnz	w8, e85c <_argp_fmtstream_ensure@@Base+0xd4>
    e858:	mov	w8, wzr
    e85c:	cbz	w8, e868 <_argp_fmtstream_ensure@@Base+0xe0>
    e860:	mov	w0, wzr
    e864:	b	e86c <_argp_fmtstream_ensure@@Base+0xe4>
    e868:	mov	w0, #0x1                   	// #1
    e86c:	ldp	x20, x19, [sp, #16]
    e870:	ldp	x29, x30, [sp], #32
    e874:	ret

000000000000e878 <argp_fmtstream_printf@@Base>:
    e878:	sub	sp, sp, #0x150
    e87c:	stp	x29, x30, [sp, #240]
    e880:	add	x29, sp, #0xf0
    e884:	stp	x24, x23, [sp, #288]
    e888:	mov	x24, #0xffffffffffffffd0    	// #-48
    e88c:	mov	x8, sp
    e890:	sub	x9, x29, #0x70
    e894:	stp	x28, x27, [sp, #256]
    e898:	stp	x26, x25, [sp, #272]
    e89c:	stp	x22, x21, [sp, #304]
    e8a0:	stp	x20, x19, [sp, #320]
    e8a4:	mov	x20, x1
    e8a8:	mov	x19, x0
    e8ac:	mov	w21, #0x96                  	// #150
    e8b0:	movk	x24, #0xff80, lsl #32
    e8b4:	add	x25, x29, #0x60
    e8b8:	add	x26, x8, #0x80
    e8bc:	add	x27, x9, #0x30
    e8c0:	stp	x2, x3, [x29, #-112]
    e8c4:	stp	x4, x5, [x29, #-96]
    e8c8:	stp	x6, x7, [x29, #-80]
    e8cc:	stp	q1, q2, [sp, #16]
    e8d0:	stp	q3, q4, [sp, #48]
    e8d4:	str	q0, [sp]
    e8d8:	stp	q5, q6, [sp, #80]
    e8dc:	str	q7, [sp, #112]
    e8e0:	mov	x0, x19
    e8e4:	mov	x1, x21
    e8e8:	bl	b550 <_argp_fmtstream_ensure@plt>
    e8ec:	cbz	w0, e938 <argp_fmtstream_printf@@Base+0xc0>
    e8f0:	stp	x26, x24, [x29, #-16]
    e8f4:	stp	x25, x27, [x29, #-32]
    e8f8:	ldp	x0, x8, [x19, #56]
    e8fc:	ldp	q0, q1, [x29, #-32]
    e900:	sub	x3, x29, #0x40
    e904:	mov	x2, x20
    e908:	sub	x22, x8, x0
    e90c:	mov	x1, x22
    e910:	stp	q0, q1, [x29, #-64]
    e914:	bl	b5b0 <vsnprintf@plt>
    e918:	add	w8, w0, #0x1
    e91c:	cmp	x22, w0, sxtw
    e920:	sxtw	x8, w8
    e924:	mov	w23, w0
    e928:	csel	x21, x21, x8, hi  // hi = pmore
    e92c:	mov	w8, #0x1                   	// #1
    e930:	cbnz	w8, e940 <argp_fmtstream_printf@@Base+0xc8>
    e934:	b	e95c <argp_fmtstream_printf@@Base+0xe4>
    e938:	mov	w8, wzr
    e93c:	cbz	w8, e95c <argp_fmtstream_printf@@Base+0xe4>
    e940:	sxtw	x0, w23
    e944:	cmp	x22, x0
    e948:	b.ls	e8e0 <argp_fmtstream_printf@@Base+0x68>  // b.plast
    e94c:	ldr	x8, [x19, #56]
    e950:	add	x8, x8, x0
    e954:	str	x8, [x19, #56]
    e958:	b	e960 <argp_fmtstream_printf@@Base+0xe8>
    e95c:	mov	x0, #0xffffffffffffffff    	// #-1
    e960:	ldp	x20, x19, [sp, #320]
    e964:	ldp	x22, x21, [sp, #304]
    e968:	ldp	x24, x23, [sp, #288]
    e96c:	ldp	x26, x25, [sp, #272]
    e970:	ldp	x28, x27, [sp, #256]
    e974:	ldp	x29, x30, [sp, #240]
    e978:	add	sp, sp, #0x150
    e97c:	ret

000000000000e980 <argp_fmtstream_write@@Base>:
    e980:	stp	x29, x30, [sp, #-48]!
    e984:	str	x21, [sp, #16]
    e988:	stp	x20, x19, [sp, #32]
    e98c:	ldp	x8, x9, [x0, #56]
    e990:	mov	x20, x0
    e994:	mov	x19, x2
    e998:	mov	x21, x1
    e99c:	add	x8, x8, x2
    e9a0:	cmp	x8, x9
    e9a4:	mov	x29, sp
    e9a8:	b.ls	e9bc <argp_fmtstream_write@@Base+0x3c>  // b.plast
    e9ac:	mov	x0, x20
    e9b0:	mov	x1, x19
    e9b4:	bl	b550 <_argp_fmtstream_ensure@plt>
    e9b8:	cbz	w0, e9dc <argp_fmtstream_write@@Base+0x5c>
    e9bc:	ldr	x0, [x20, #56]
    e9c0:	mov	x1, x21
    e9c4:	mov	x2, x19
    e9c8:	bl	a800 <memcpy@plt>
    e9cc:	ldr	x8, [x20, #56]
    e9d0:	add	x8, x8, x19
    e9d4:	str	x8, [x20, #56]
    e9d8:	b	e9e0 <argp_fmtstream_write@@Base+0x60>
    e9dc:	mov	x19, xzr
    e9e0:	mov	x0, x19
    e9e4:	ldp	x20, x19, [sp, #32]
    e9e8:	ldr	x21, [sp, #16]
    e9ec:	ldp	x29, x30, [sp], #48
    e9f0:	ret

000000000000e9f4 <argp_fmtstream_puts@@Base>:
    e9f4:	stp	x29, x30, [sp, #-48]!
    e9f8:	str	x21, [sp, #16]
    e9fc:	mov	x21, x0
    ea00:	mov	x0, x1
    ea04:	stp	x20, x19, [sp, #32]
    ea08:	mov	x29, sp
    ea0c:	mov	x19, x1
    ea10:	bl	a890 <strlen@plt>
    ea14:	cbz	x0, ea34 <argp_fmtstream_puts@@Base+0x40>
    ea18:	mov	x20, x0
    ea1c:	mov	x0, x21
    ea20:	mov	x1, x19
    ea24:	mov	x2, x20
    ea28:	bl	b660 <argp_fmtstream_write@plt>
    ea2c:	cmp	x0, x20
    ea30:	csetm	w0, ne  // ne = any
    ea34:	ldp	x20, x19, [sp, #32]
    ea38:	ldr	x21, [sp, #16]
    ea3c:	ldp	x29, x30, [sp], #48
    ea40:	ret

000000000000ea44 <argp_fmtstream_putc@@Base>:
    ea44:	stp	x29, x30, [sp, #-32]!
    ea48:	stp	x20, x19, [sp, #16]
    ea4c:	ldp	x8, x9, [x0, #56]
    ea50:	mov	x19, x0
    ea54:	mov	w20, w1
    ea58:	mov	x29, sp
    ea5c:	cmp	x8, x9
    ea60:	b.cc	ea74 <argp_fmtstream_putc@@Base+0x30>  // b.lo, b.ul, b.last
    ea64:	mov	w1, #0x1                   	// #1
    ea68:	mov	x0, x19
    ea6c:	bl	b550 <_argp_fmtstream_ensure@plt>
    ea70:	cbz	w0, ea8c <argp_fmtstream_putc@@Base+0x48>
    ea74:	ldr	x8, [x19, #56]
    ea78:	and	w0, w20, #0xff
    ea7c:	add	x9, x8, #0x1
    ea80:	str	x9, [x19, #56]
    ea84:	strb	w20, [x8]
    ea88:	b	ea90 <argp_fmtstream_putc@@Base+0x4c>
    ea8c:	mov	w0, #0xffffffff            	// #-1
    ea90:	ldp	x20, x19, [sp, #16]
    ea94:	ldp	x29, x30, [sp], #32
    ea98:	ret

000000000000ea9c <argp_fmtstream_set_lmargin@@Base>:
    ea9c:	stp	x29, x30, [sp, #-32]!
    eaa0:	stp	x20, x19, [sp, #16]
    eaa4:	ldp	x9, x8, [x0, #48]
    eaa8:	ldr	x10, [x0, #32]
    eaac:	mov	x19, x0
    eab0:	mov	x20, x1
    eab4:	sub	x8, x8, x9
    eab8:	cmp	x8, x10
    eabc:	mov	x29, sp
    eac0:	b.ls	eacc <argp_fmtstream_set_lmargin@@Base+0x30>  // b.plast
    eac4:	mov	x0, x19
    eac8:	bl	aac0 <_argp_fmtstream_update@plt>
    eacc:	ldr	x0, [x19, #8]
    ead0:	str	x20, [x19, #8]
    ead4:	ldp	x20, x19, [sp, #16]
    ead8:	ldp	x29, x30, [sp], #32
    eadc:	ret

000000000000eae0 <argp_fmtstream_set_rmargin@@Base>:
    eae0:	stp	x29, x30, [sp, #-32]!
    eae4:	stp	x20, x19, [sp, #16]
    eae8:	ldp	x9, x8, [x0, #48]
    eaec:	ldr	x10, [x0, #32]
    eaf0:	mov	x19, x0
    eaf4:	mov	x20, x1
    eaf8:	sub	x8, x8, x9
    eafc:	cmp	x8, x10
    eb00:	mov	x29, sp
    eb04:	b.ls	eb10 <argp_fmtstream_set_rmargin@@Base+0x30>  // b.plast
    eb08:	mov	x0, x19
    eb0c:	bl	aac0 <_argp_fmtstream_update@plt>
    eb10:	ldr	x0, [x19, #16]
    eb14:	str	x20, [x19, #16]
    eb18:	ldp	x20, x19, [sp, #16]
    eb1c:	ldp	x29, x30, [sp], #32
    eb20:	ret

000000000000eb24 <argp_fmtstream_set_wmargin@@Base>:
    eb24:	stp	x29, x30, [sp, #-32]!
    eb28:	stp	x20, x19, [sp, #16]
    eb2c:	ldp	x9, x8, [x0, #48]
    eb30:	ldr	x10, [x0, #32]
    eb34:	mov	x19, x0
    eb38:	mov	x20, x1
    eb3c:	sub	x8, x8, x9
    eb40:	cmp	x8, x10
    eb44:	mov	x29, sp
    eb48:	b.ls	eb54 <argp_fmtstream_set_wmargin@@Base+0x30>  // b.plast
    eb4c:	mov	x0, x19
    eb50:	bl	aac0 <_argp_fmtstream_update@plt>
    eb54:	ldr	x0, [x19, #24]
    eb58:	str	x20, [x19, #24]
    eb5c:	ldp	x20, x19, [sp, #16]
    eb60:	ldp	x29, x30, [sp], #32
    eb64:	ret

000000000000eb68 <argp_fmtstream_point@@Base>:
    eb68:	stp	x29, x30, [sp, #-32]!
    eb6c:	str	x19, [sp, #16]
    eb70:	ldp	x9, x8, [x0, #48]
    eb74:	ldr	x10, [x0, #32]
    eb78:	mov	x19, x0
    eb7c:	mov	x29, sp
    eb80:	sub	x8, x8, x9
    eb84:	cmp	x8, x10
    eb88:	b.ls	eb94 <argp_fmtstream_point@@Base+0x2c>  // b.plast
    eb8c:	mov	x0, x19
    eb90:	bl	aac0 <_argp_fmtstream_update@plt>
    eb94:	ldr	x8, [x19, #40]
    eb98:	ldr	x19, [sp, #16]
    eb9c:	bic	x0, x8, x8, asr #63
    eba0:	ldp	x29, x30, [sp], #32
    eba4:	ret

000000000000eba8 <argp_help@@Base>:
    eba8:	stp	x29, x30, [sp, #-16]!
    ebac:	mov	x4, x3
    ebb0:	mov	w3, w2
    ebb4:	mov	x2, x1
    ebb8:	mov	x1, xzr
    ebbc:	mov	x29, sp
    ebc0:	bl	ebcc <argp_help@@Base+0x24>
    ebc4:	ldp	x29, x30, [sp], #16
    ebc8:	ret
    ebcc:	stp	x29, x30, [sp, #-96]!
    ebd0:	stp	x28, x27, [sp, #16]
    ebd4:	stp	x26, x25, [sp, #32]
    ebd8:	stp	x24, x23, [sp, #48]
    ebdc:	stp	x22, x21, [sp, #64]
    ebe0:	stp	x20, x19, [sp, #80]
    ebe4:	mov	x29, sp
    ebe8:	sub	sp, sp, #0x30
    ebec:	stp	x4, x1, [x29, #-32]
    ebf0:	stur	x0, [x29, #-16]
    ebf4:	cbz	x2, eecc <argp_help@@Base+0x324>
    ebf8:	mov	x0, x2
    ebfc:	mov	w21, w3
    ec00:	mov	x22, x2
    ec04:	bl	a900 <flockfile@plt>
    ec08:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    ec0c:	ldr	w8, [x8, #2180]
    ec10:	cbnz	w8, ec1c <argp_help@@Base+0x74>
    ec14:	ldur	x0, [x29, #-24]
    ec18:	bl	f268 <argp_failure@@Base+0x198>
    ec1c:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    ec20:	ldrsw	x2, [x8, #2176]
    ec24:	mov	x0, x22
    ec28:	mov	x1, xzr
    ec2c:	mov	x3, xzr
    ec30:	bl	b1f0 <argp_make_fmtstream@plt>
    ec34:	cbz	x0, edd8 <argp_help@@Base+0x230>
    ec38:	mov	w8, #0xb                   	// #11
    ec3c:	mov	x20, x0
    ec40:	tst	w21, w8
    ec44:	b.eq	eeec <argp_help@@Base+0x344>  // b.none
    ec48:	ldur	x0, [x29, #-16]
    ec4c:	mov	x1, xzr
    ec50:	bl	f560 <argp_failure@@Base+0x490>
    ec54:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ec58:	add	x1, x1, #0x81d
    ec5c:	mov	x25, x0
    ec60:	bl	f600 <argp_failure@@Base+0x530>
    ec64:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ec68:	add	x1, x1, #0xc06
    ec6c:	mov	x0, x25
    ec70:	bl	f600 <argp_failure@@Base+0x530>
    ec74:	mov	x0, x25
    ec78:	bl	f620 <argp_failure@@Base+0x550>
    ec7c:	tst	w21, #0x3
    ec80:	b.eq	eef8 <argp_help@@Base+0x350>  // b.none
    ec84:	ldur	x0, [x29, #-16]
    ec88:	stur	x22, [x29, #-40]
    ec8c:	bl	f668 <argp_failure@@Base+0x598>
    ec90:	add	x9, x0, #0xf
    ec94:	mov	x8, sp
    ec98:	and	x9, x9, #0xfffffffffffffff0
    ec9c:	sub	x26, x8, x9
    eca0:	mov	x2, x0
    eca4:	mov	sp, x26
    eca8:	mov	x0, x26
    ecac:	mov	w1, wzr
    ecb0:	bl	ad40 <memset@plt>
    ecb4:	adrp	x23, 2b000 <vasnprintf@@Base+0xec4>
    ecb8:	adrp	x28, 2b000 <vasnprintf@@Base+0xec4>
    ecbc:	add	x23, x23, #0x828
    ecc0:	adrp	x19, 40000 <base_len@@Base+0x2c984>
    ecc4:	add	x28, x28, #0x7e4
    ecc8:	mov	w27, #0x1                   	// #1
    eccc:	b	ed28 <argp_help@@Base+0x180>
    ecd0:	mov	x0, x25
    ecd4:	mov	x1, x20
    ecd8:	bl	f6d4 <argp_failure@@Base+0x604>
    ecdc:	orr	w21, w21, #0x2
    ece0:	ldp	x1, x0, [x29, #-24]
    ece4:	sub	x2, x29, #0x8
    ece8:	mov	w3, #0x1                   	// #1
    ecec:	mov	x4, x20
    ecf0:	bl	f848 <argp_failure@@Base+0x778>
    ecf4:	mov	w24, w0
    ecf8:	sxtw	x1, w22
    ecfc:	mov	x0, x20
    ed00:	bl	b790 <argp_fmtstream_set_wmargin@plt>
    ed04:	sxtw	x1, w23
    ed08:	mov	x0, x20
    ed0c:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
    ed10:	mov	w1, #0xa                   	// #10
    ed14:	mov	x0, x20
    ed18:	bl	aad0 <argp_fmtstream_putc@plt>
    ed1c:	adrp	x23, 2b000 <vasnprintf@@Base+0xec4>
    ed20:	add	x23, x23, #0x82f
    ed24:	cbz	w24, eda8 <argp_help@@Base+0x200>
    ed28:	ldrsw	x1, [x19, #2172]
    ed2c:	mov	x0, x20
    ed30:	bl	b790 <argp_fmtstream_set_wmargin@plt>
    ed34:	mov	x22, x0
    ed38:	mov	w2, #0x5                   	// #5
    ed3c:	mov	x0, x28
    ed40:	mov	x1, x23
    ed44:	stur	x26, [x29, #-8]
    ed48:	bl	b580 <dcgettext@plt>
    ed4c:	ldur	x3, [x29, #-32]
    ed50:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ed54:	mov	x2, x0
    ed58:	mov	x0, x20
    ed5c:	add	x1, x1, #0x822
    ed60:	bl	b010 <argp_fmtstream_printf@plt>
    ed64:	ldrsw	x1, [x19, #2172]
    ed68:	mov	x0, x20
    ed6c:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
    ed70:	mov	x23, x0
    ed74:	tbz	w21, #1, ecd0 <argp_help@@Base+0x128>
    ed78:	mov	x8, x25
    ed7c:	ldr	w8, [x25, #8]
    ed80:	cbz	w8, ece0 <argp_help@@Base+0x138>
    ed84:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ed88:	mov	w2, #0x5                   	// #5
    ed8c:	mov	x0, x28
    ed90:	add	x1, x1, #0x836
    ed94:	bl	b580 <dcgettext@plt>
    ed98:	mov	x1, x0
    ed9c:	mov	x0, x20
    eda0:	bl	aca0 <argp_fmtstream_puts@plt>
    eda4:	b	ece0 <argp_help@@Base+0x138>
    eda8:	ldur	x22, [x29, #-40]
    edac:	tbz	w21, #4, edcc <argp_help@@Base+0x224>
    edb0:	ldp	x1, x0, [x29, #-24]
    edb4:	mov	w4, #0x1                   	// #1
    edb8:	mov	w2, wzr
    edbc:	mov	w3, wzr
    edc0:	mov	x5, x20
    edc4:	bl	fa18 <argp_failure@@Base+0x948>
    edc8:	orr	w27, w0, w27
    edcc:	tbnz	w21, #2, ede4 <argp_help@@Base+0x23c>
    edd0:	tbnz	w21, #3, ee18 <argp_help@@Base+0x270>
    edd4:	b	ee44 <argp_help@@Base+0x29c>
    edd8:	mov	x0, x22
    eddc:	bl	ac30 <funlockfile@plt>
    ede0:	b	eecc <argp_help@@Base+0x324>
    ede4:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    ede8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    edec:	add	x0, x0, #0x7e4
    edf0:	add	x1, x1, #0x843
    edf4:	mov	w2, #0x5                   	// #5
    edf8:	bl	b580 <dcgettext@plt>
    edfc:	ldur	x2, [x29, #-32]
    ee00:	mov	x1, x0
    ee04:	mov	x0, x20
    ee08:	mov	x3, x2
    ee0c:	bl	b010 <argp_fmtstream_printf@plt>
    ee10:	mov	w27, #0x1                   	// #1
    ee14:	tbz	w21, #3, ee44 <argp_help@@Base+0x29c>
    ee18:	ldr	w8, [x25, #8]
    ee1c:	cbz	w8, ee44 <argp_help@@Base+0x29c>
    ee20:	cbz	w27, ee30 <argp_help@@Base+0x288>
    ee24:	mov	w1, #0xa                   	// #10
    ee28:	mov	x0, x20
    ee2c:	bl	aad0 <argp_fmtstream_putc@plt>
    ee30:	ldur	x1, [x29, #-24]
    ee34:	mov	x0, x25
    ee38:	mov	x2, x20
    ee3c:	bl	fca0 <argp_failure@@Base+0xbd0>
    ee40:	mov	w27, #0x1                   	// #1
    ee44:	tbz	w21, #5, ee64 <argp_help@@Base+0x2bc>
    ee48:	ldp	x1, x0, [x29, #-24]
    ee4c:	mov	w2, #0x1                   	// #1
    ee50:	mov	w3, w27
    ee54:	mov	w4, wzr
    ee58:	mov	x5, x20
    ee5c:	bl	fa18 <argp_failure@@Base+0x948>
    ee60:	orr	w27, w0, w27
    ee64:	tbz	w21, #6, eeb0 <argp_help@@Base+0x308>
    ee68:	adrp	x19, 3f000 <vasnprintf@@Base+0x14ec4>
    ee6c:	ldr	x19, [x19, #3968]
    ee70:	ldr	x8, [x19]
    ee74:	cbz	x8, eeb0 <argp_help@@Base+0x308>
    ee78:	cbz	w27, ee88 <argp_help@@Base+0x2e0>
    ee7c:	mov	w1, #0xa                   	// #10
    ee80:	mov	x0, x20
    ee84:	bl	aad0 <argp_fmtstream_putc@plt>
    ee88:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    ee8c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    ee90:	add	x0, x0, #0x7e4
    ee94:	add	x1, x1, #0x87a
    ee98:	mov	w2, #0x5                   	// #5
    ee9c:	bl	b580 <dcgettext@plt>
    eea0:	ldr	x2, [x19]
    eea4:	mov	x1, x0
    eea8:	mov	x0, x20
    eeac:	bl	b010 <argp_fmtstream_printf@plt>
    eeb0:	mov	x0, x22
    eeb4:	bl	ac30 <funlockfile@plt>
    eeb8:	cbz	x25, eec4 <argp_help@@Base+0x31c>
    eebc:	mov	x0, x25
    eec0:	bl	fda0 <argp_failure@@Base+0xcd0>
    eec4:	mov	x0, x20
    eec8:	bl	b5c0 <argp_fmtstream_free@plt>
    eecc:	mov	sp, x29
    eed0:	ldp	x20, x19, [sp, #80]
    eed4:	ldp	x22, x21, [sp, #64]
    eed8:	ldp	x24, x23, [sp, #48]
    eedc:	ldp	x26, x25, [sp, #32]
    eee0:	ldp	x28, x27, [sp, #16]
    eee4:	ldp	x29, x30, [sp], #96
    eee8:	ret
    eeec:	mov	x25, xzr
    eef0:	tst	w21, #0x3
    eef4:	b.ne	ec84 <argp_help@@Base+0xdc>  // b.any
    eef8:	mov	w27, wzr
    eefc:	tbnz	w21, #4, edb0 <argp_help@@Base+0x208>
    ef00:	b	edcc <argp_help@@Base+0x224>

000000000000ef04 <argp_state_help@@Base>:
    ef04:	stp	x29, x30, [sp, #-32]!
    ef08:	stp	x20, x19, [sp, #16]
    ef0c:	mov	w19, w2
    ef10:	mov	x2, x1
    ef14:	mov	x20, x0
    ef18:	mov	x29, sp
    ef1c:	cbz	x0, ef30 <argp_state_help@@Base+0x2c>
    ef20:	cbz	x2, ef90 <argp_state_help@@Base+0x8c>
    ef24:	ldr	w8, [x20, #28]
    ef28:	tbz	w8, #1, ef34 <argp_state_help@@Base+0x30>
    ef2c:	b	ef90 <argp_state_help@@Base+0x8c>
    ef30:	cbz	x2, ef90 <argp_state_help@@Base+0x8c>
    ef34:	cbz	x20, ef48 <argp_state_help@@Base+0x44>
    ef38:	ldr	w8, [x20, #28]
    ef3c:	lsl	w8, w8, #1
    ef40:	and	w8, w8, #0x80
    ef44:	orr	w19, w8, w19
    ef48:	cbz	x20, ef6c <argp_state_help@@Base+0x68>
    ef4c:	ldr	x0, [x20]
    ef50:	ldr	x4, [x20, #64]
    ef54:	mov	x1, x20
    ef58:	mov	w3, w19
    ef5c:	bl	ebcc <argp_help@@Base+0x24>
    ef60:	ldrb	w8, [x20, #28]
    ef64:	tbz	w8, #5, ef88 <argp_state_help@@Base+0x84>
    ef68:	b	ef90 <argp_state_help@@Base+0x8c>
    ef6c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    ef70:	ldr	x8, [x8, #4008]
    ef74:	mov	x0, xzr
    ef78:	mov	x1, x20
    ef7c:	mov	w3, w19
    ef80:	ldr	x4, [x8]
    ef84:	bl	ebcc <argp_help@@Base+0x24>
    ef88:	tbnz	w19, #8, ef9c <argp_state_help@@Base+0x98>
    ef8c:	tbnz	w19, #9, efac <argp_state_help@@Base+0xa8>
    ef90:	ldp	x20, x19, [sp, #16]
    ef94:	ldp	x29, x30, [sp], #32
    ef98:	ret
    ef9c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    efa0:	ldr	x8, [x8, #4048]
    efa4:	ldr	w0, [x8]
    efa8:	bl	a8b0 <exit@plt>
    efac:	mov	w0, wzr
    efb0:	bl	a8b0 <exit@plt>

000000000000efb4 <argp_error@@Base>:
    efb4:	sub	sp, sp, #0x120
    efb8:	stp	x29, x30, [sp, #240]
    efbc:	stp	x20, x19, [sp, #272]
    efc0:	add	x29, sp, #0xf0
    efc4:	mov	x20, x1
    efc8:	mov	x19, x0
    efcc:	stp	x28, x21, [sp, #256]
    efd0:	stp	x2, x3, [x29, #-112]
    efd4:	stp	x4, x5, [x29, #-96]
    efd8:	stp	x6, x7, [x29, #-80]
    efdc:	stp	q1, q2, [sp, #16]
    efe0:	stp	q3, q4, [sp, #48]
    efe4:	str	q0, [sp]
    efe8:	stp	q5, q6, [sp, #80]
    efec:	str	q7, [sp, #112]
    eff0:	cbz	x0, f00c <argp_error@@Base+0x58>
    eff4:	ldrb	w8, [x19, #28]
    eff8:	tbnz	w8, #1, f0bc <argp_error@@Base+0x108>
    effc:	add	x8, x19, #0x48
    f000:	ldr	x21, [x8]
    f004:	cbnz	x21, f01c <argp_error@@Base+0x68>
    f008:	b	f0bc <argp_error@@Base+0x108>
    f00c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    f010:	ldr	x8, [x8, #3816]
    f014:	ldr	x21, [x8]
    f018:	cbz	x21, f0bc <argp_error@@Base+0x108>
    f01c:	mov	x0, x21
    f020:	bl	a900 <flockfile@plt>
    f024:	adrp	x13, 3f000 <vasnprintf@@Base+0x14ec4>
    f028:	ldr	x13, [x13, #4008]
    f02c:	mov	x8, #0xffffffffffffffd0    	// #-48
    f030:	mov	x9, sp
    f034:	sub	x10, x29, #0x70
    f038:	movk	x8, #0xff80, lsl #32
    f03c:	add	x11, x29, #0x30
    f040:	add	x12, x19, #0x40
    f044:	cmp	x19, #0x0
    f048:	add	x9, x9, #0x80
    f04c:	add	x10, x10, #0x30
    f050:	stp	x9, x8, [x29, #-16]
    f054:	stp	x11, x10, [x29, #-32]
    f058:	csel	x8, x12, x13, ne  // ne = any
    f05c:	ldr	x0, [x8]
    f060:	mov	x1, x21
    f064:	bl	b5f0 <fputs_unlocked@plt>
    f068:	mov	w0, #0x3a                  	// #58
    f06c:	mov	x1, x21
    f070:	bl	ab20 <putc_unlocked@plt>
    f074:	mov	w0, #0x20                  	// #32
    f078:	mov	x1, x21
    f07c:	bl	ab20 <putc_unlocked@plt>
    f080:	ldp	q0, q1, [x29, #-32]
    f084:	sub	x2, x29, #0x40
    f088:	mov	x0, x21
    f08c:	mov	x1, x20
    f090:	stp	q0, q1, [x29, #-64]
    f094:	bl	b6c0 <vfprintf@plt>
    f098:	mov	w0, #0xa                   	// #10
    f09c:	mov	x1, x21
    f0a0:	bl	ab20 <putc_unlocked@plt>
    f0a4:	mov	w2, #0x104                 	// #260
    f0a8:	mov	x0, x19
    f0ac:	mov	x1, x21
    f0b0:	bl	b560 <argp_state_help@plt>
    f0b4:	mov	x0, x21
    f0b8:	bl	ac30 <funlockfile@plt>
    f0bc:	ldp	x20, x19, [sp, #272]
    f0c0:	ldp	x28, x21, [sp, #256]
    f0c4:	ldp	x29, x30, [sp, #240]
    f0c8:	add	sp, sp, #0x120
    f0cc:	ret

000000000000f0d0 <argp_failure@@Base>:
    f0d0:	sub	sp, sp, #0x1e0
    f0d4:	stp	x24, x23, [sp, #432]
    f0d8:	stp	x22, x21, [sp, #448]
    f0dc:	stp	x20, x19, [sp, #464]
    f0e0:	mov	x23, x3
    f0e4:	mov	w22, w2
    f0e8:	mov	w19, w1
    f0ec:	mov	x20, x0
    f0f0:	stp	x29, x30, [sp, #400]
    f0f4:	str	x28, [sp, #416]
    f0f8:	add	x29, sp, #0x190
    f0fc:	stp	x4, x5, [sp, #136]
    f100:	stp	x6, x7, [sp, #152]
    f104:	stp	q0, q1, [sp]
    f108:	stp	q2, q3, [sp, #32]
    f10c:	stp	q4, q5, [sp, #64]
    f110:	stp	q6, q7, [sp, #96]
    f114:	cbz	x0, f130 <argp_failure@@Base+0x60>
    f118:	ldrb	w8, [x20, #28]
    f11c:	tbnz	w8, #1, f244 <argp_failure@@Base+0x174>
    f120:	add	x8, x20, #0x48
    f124:	ldr	x21, [x8]
    f128:	cbnz	x21, f140 <argp_failure@@Base+0x70>
    f12c:	b	f244 <argp_failure@@Base+0x174>
    f130:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
    f134:	ldr	x8, [x8, #3816]
    f138:	ldr	x21, [x8]
    f13c:	cbz	x21, f244 <argp_failure@@Base+0x174>
    f140:	mov	x0, x21
    f144:	bl	a900 <flockfile@plt>
    f148:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
    f14c:	ldr	x9, [x9, #4008]
    f150:	add	x8, x20, #0x40
    f154:	cmp	x20, #0x0
    f158:	mov	x1, x21
    f15c:	csel	x8, x8, x9, ne  // ne = any
    f160:	ldr	x0, [x8]
    f164:	bl	b5f0 <fputs_unlocked@plt>
    f168:	cbz	x23, f1c4 <argp_failure@@Base+0xf4>
    f16c:	mov	x8, #0xffffffffffffffe0    	// #-32
    f170:	mov	x10, sp
    f174:	add	x11, sp, #0x88
    f178:	movk	x8, #0xff80, lsl #32
    f17c:	add	x9, x29, #0x50
    f180:	add	x10, x10, #0x80
    f184:	add	x11, x11, #0x20
    f188:	mov	w0, #0x3a                  	// #58
    f18c:	mov	x1, x21
    f190:	add	x24, sp, #0xa8
    f194:	stp	x10, x8, [sp, #184]
    f198:	stp	x9, x11, [sp, #168]
    f19c:	bl	ab20 <putc_unlocked@plt>
    f1a0:	mov	w0, #0x20                  	// #32
    f1a4:	mov	x1, x21
    f1a8:	bl	ab20 <putc_unlocked@plt>
    f1ac:	ldp	q0, q1, [x24]
    f1b0:	sub	x2, x29, #0x20
    f1b4:	mov	x0, x21
    f1b8:	mov	x1, x23
    f1bc:	stp	q0, q1, [x29, #-32]
    f1c0:	bl	b6c0 <vfprintf@plt>
    f1c4:	cbz	w22, f220 <argp_failure@@Base+0x150>
    f1c8:	mov	w0, #0x3a                  	// #58
    f1cc:	mov	x1, x21
    f1d0:	bl	ab20 <putc_unlocked@plt>
    f1d4:	mov	w0, #0x20                  	// #32
    f1d8:	mov	x1, x21
    f1dc:	bl	ab20 <putc_unlocked@plt>
    f1e0:	add	x1, sp, #0xa8
    f1e4:	mov	w2, #0xc8                  	// #200
    f1e8:	mov	w0, w22
    f1ec:	bl	add0 <strerror_r@plt>
    f1f0:	cbnz	x0, f218 <argp_failure@@Base+0x148>
    f1f4:	mov	w0, w22
    f1f8:	bl	af00 <strerror@plt>
    f1fc:	cbnz	x0, f218 <argp_failure@@Base+0x148>
    f200:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    f204:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    f208:	add	x0, x0, #0x7e4
    f20c:	add	x1, x1, #0x808
    f210:	mov	w2, #0x5                   	// #5
    f214:	bl	b580 <dcgettext@plt>
    f218:	mov	x1, x21
    f21c:	bl	b5f0 <fputs_unlocked@plt>
    f220:	mov	w0, #0xa                   	// #10
    f224:	mov	x1, x21
    f228:	bl	ab20 <putc_unlocked@plt>
    f22c:	mov	x0, x21
    f230:	bl	ac30 <funlockfile@plt>
    f234:	cbz	w19, f244 <argp_failure@@Base+0x174>
    f238:	cbz	x20, f260 <argp_failure@@Base+0x190>
    f23c:	ldrb	w8, [x20, #28]
    f240:	tbz	w8, #5, f260 <argp_failure@@Base+0x190>
    f244:	ldp	x20, x19, [sp, #464]
    f248:	ldp	x22, x21, [sp, #448]
    f24c:	ldp	x24, x23, [sp, #432]
    f250:	ldr	x28, [sp, #416]
    f254:	ldp	x29, x30, [sp, #400]
    f258:	add	sp, sp, #0x1e0
    f25c:	ret
    f260:	mov	w0, w19
    f264:	bl	a8b0 <exit@plt>
    f268:	sub	sp, sp, #0xa0
    f26c:	stp	x20, x19, [sp, #144]
    f270:	mov	x19, x0
    f274:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    f278:	add	x0, x0, #0x88e
    f27c:	stp	x29, x30, [sp, #64]
    f280:	stp	x28, x27, [sp, #80]
    f284:	stp	x26, x25, [sp, #96]
    f288:	stp	x24, x23, [sp, #112]
    f28c:	stp	x22, x21, [sp, #128]
    f290:	add	x29, sp, #0x40
    f294:	bl	b720 <getenv@plt>
    f298:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    f29c:	add	x8, x8, #0x860
    f2a0:	ldp	q0, q1, [x8]
    f2a4:	ldr	x8, [x8, #32]
    f2a8:	stp	q0, q1, [sp, #16]
    f2ac:	str	x8, [sp, #48]
    f2b0:	cbz	x0, f540 <argp_failure@@Base+0x470>
    f2b4:	ldrb	w8, [x0]
    f2b8:	mov	x20, x0
    f2bc:	cbz	w8, f534 <argp_failure@@Base+0x464>
    f2c0:	bl	b140 <__ctype_b_loc@plt>
    f2c4:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
    f2c8:	add	x8, x8, #0x7e4
    f2cc:	cmp	x19, #0x0
    f2d0:	adrp	x22, 2b000 <vasnprintf@@Base+0xec4>
    f2d4:	adrp	x24, 2b000 <vasnprintf@@Base+0xec4>
    f2d8:	mov	x21, x0
    f2dc:	add	x22, x22, #0xad8
    f2e0:	add	x24, x24, #0xb68
    f2e4:	csel	x8, xzr, x8, eq  // eq = none
    f2e8:	str	x8, [sp, #8]
    f2ec:	b	f2fc <argp_failure@@Base+0x22c>
    f2f0:	cbnz	w9, f4fc <argp_failure@@Base+0x42c>
    f2f4:	ldrb	w8, [x20]
    f2f8:	cbz	w8, f534 <argp_failure@@Base+0x464>
    f2fc:	ldr	x28, [x21]
    f300:	add	x8, x20, #0x2
    f304:	sub	x10, x20, #0x1
    f308:	ldurb	w9, [x8, #-2]
    f30c:	mov	x25, x10
    f310:	add	x8, x8, #0x1
    f314:	add	x10, x10, #0x1
    f318:	ldrh	w11, [x28, x9, lsl #1]
    f31c:	tbnz	w11, #13, f308 <argp_failure@@Base+0x238>
    f320:	sub	x20, x8, #0x3
    f324:	tbz	w11, #10, f2f0 <argp_failure@@Base+0x220>
    f328:	mov	x10, x20
    f32c:	b	f338 <argp_failure@@Base+0x268>
    f330:	add	x10, x10, #0x1
    f334:	add	x25, x25, #0x1
    f338:	ldrb	w11, [x10]
    f33c:	ldrh	w12, [x28, x11, lsl #1]
    f340:	tbnz	w12, #3, f330 <argp_failure@@Base+0x260>
    f344:	cmp	w11, #0x5f
    f348:	b.eq	f330 <argp_failure@@Base+0x260>  // b.none
    f34c:	cmp	w11, #0x2d
    f350:	b.eq	f330 <argp_failure@@Base+0x260>  // b.none
    f354:	ldrb	w11, [x25, #1]!
    f358:	ldrh	w12, [x28, x11, lsl #1]
    f35c:	tbnz	w12, #13, f354 <argp_failure@@Base+0x284>
    f360:	sub	x26, x10, x20
    f364:	cbz	w11, f378 <argp_failure@@Base+0x2a8>
    f368:	cmp	w11, #0x3d
    f36c:	b.eq	f394 <argp_failure@@Base+0x2c4>  // b.none
    f370:	cmp	w11, #0x2c
    f374:	b.ne	f3a0 <argp_failure@@Base+0x2d0>  // b.any
    f378:	mov	w23, #0x1                   	// #1
    f37c:	cbnz	w23, f3a8 <argp_failure@@Base+0x2d8>
    f380:	ldrb	w8, [x25]
    f384:	ldrh	w8, [x28, x8, lsl #1]
    f388:	tbnz	w8, #11, f3e0 <argp_failure@@Base+0x310>
    f38c:	mov	w27, wzr
    f390:	b	f40c <argp_failure@@Base+0x33c>
    f394:	ldrb	w10, [x25, #1]!
    f398:	ldrh	w10, [x28, x10, lsl #1]
    f39c:	tbnz	w10, #13, f394 <argp_failure@@Base+0x2c4>
    f3a0:	mov	w23, wzr
    f3a4:	cbz	w23, f380 <argp_failure@@Base+0x2b0>
    f3a8:	cmp	w9, #0x6e
    f3ac:	b.ne	f3d8 <argp_failure@@Base+0x308>  // b.any
    f3b0:	ldurb	w9, [x8, #-2]
    f3b4:	cmp	w9, #0x6f
    f3b8:	b.ne	f3d8 <argp_failure@@Base+0x308>  // b.any
    f3bc:	ldurb	w9, [x8, #-1]
    f3c0:	cmp	w9, #0x2d
    f3c4:	b.ne	f3d8 <argp_failure@@Base+0x308>  // b.any
    f3c8:	mov	w27, wzr
    f3cc:	sub	x26, x26, #0x3
    f3d0:	mov	x20, x8
    f3d4:	b	f40c <argp_failure@@Base+0x33c>
    f3d8:	mov	w27, #0x1                   	// #1
    f3dc:	b	f40c <argp_failure@@Base+0x33c>
    f3e0:	mov	x0, x25
    f3e4:	bl	ab60 <atoi@plt>
    f3e8:	mov	w27, w0
    f3ec:	sub	x8, x25, #0x1
    f3f0:	mov	x25, x8
    f3f4:	ldrb	w9, [x8, #1]!
    f3f8:	ldrh	w9, [x28, x9, lsl #1]
    f3fc:	tbnz	w9, #11, f3f0 <argp_failure@@Base+0x320>
    f400:	ldrb	w8, [x25, #1]!
    f404:	ldrh	w8, [x28, x8, lsl #1]
    f408:	tbnz	w8, #13, f400 <argp_failure@@Base+0x330>
    f40c:	mov	x28, x22
    f410:	b	f420 <argp_failure@@Base+0x350>
    f414:	add	x28, x28, #0x10
    f418:	cmp	x28, x24
    f41c:	b.cs	f468 <argp_failure@@Base+0x398>  // b.hs, b.nlast
    f420:	mov	x0, x28
    f424:	bl	a890 <strlen@plt>
    f428:	cmp	x0, x26
    f42c:	b.ne	f414 <argp_failure@@Base+0x344>  // b.any
    f430:	mov	x0, x20
    f434:	mov	x1, x28
    f438:	mov	x2, x26
    f43c:	bl	acf0 <strncmp@plt>
    f440:	cbnz	w0, f414 <argp_failure@@Base+0x344>
    f444:	cbz	w23, f450 <argp_failure@@Base+0x380>
    f448:	ldrb	w8, [x28, #14]
    f44c:	cbz	w8, f4c0 <argp_failure@@Base+0x3f0>
    f450:	ldrb	w8, [x28, #15]
    f454:	add	x9, sp, #0x10
    f458:	str	w27, [x9, x8]
    f45c:	cmp	x28, x24
    f460:	b.ne	f4a4 <argp_failure@@Base+0x3d4>  // b.any
    f464:	b	f474 <argp_failure@@Base+0x3a4>
    f468:	mov	x28, x24
    f46c:	cmp	x28, x24
    f470:	b.ne	f4a4 <argp_failure@@Base+0x3d4>  // b.any
    f474:	ldr	x0, [sp, #8]
    f478:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    f47c:	mov	w2, #0x5                   	// #5
    f480:	add	x1, x1, #0x8cb
    f484:	bl	b580 <dcgettext@plt>
    f488:	mov	x3, x0
    f48c:	mov	x0, x19
    f490:	mov	w1, wzr
    f494:	mov	w2, wzr
    f498:	mov	w4, w26
    f49c:	mov	x5, x20
    f4a0:	bl	ac60 <argp_failure@plt>
    f4a4:	mov	x8, x25
    f4a8:	ldrb	w9, [x8], #1
    f4ac:	cmp	w9, #0x2c
    f4b0:	csel	x20, x8, x25, eq  // eq = none
    f4b4:	ldrb	w8, [x20]
    f4b8:	cbnz	w8, f2fc <argp_failure@@Base+0x22c>
    f4bc:	b	f534 <argp_failure@@Base+0x464>
    f4c0:	ldr	x0, [sp, #8]
    f4c4:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    f4c8:	mov	w2, #0x5                   	// #5
    f4cc:	add	x1, x1, #0x89c
    f4d0:	bl	b580 <dcgettext@plt>
    f4d4:	mov	x3, x0
    f4d8:	mov	x0, x19
    f4dc:	mov	w1, wzr
    f4e0:	mov	w2, wzr
    f4e4:	mov	w4, w26
    f4e8:	mov	x5, x20
    f4ec:	bl	ac60 <argp_failure@plt>
    f4f0:	cmp	x28, x24
    f4f4:	b.ne	f4a4 <argp_failure@@Base+0x3d4>  // b.any
    f4f8:	b	f474 <argp_failure@@Base+0x3a4>
    f4fc:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
    f500:	cmp	x19, #0x0
    f504:	add	x8, x8, #0x7e4
    f508:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    f50c:	csel	x0, xzr, x8, eq  // eq = none
    f510:	add	x1, x1, #0x8f1
    f514:	mov	w2, #0x5                   	// #5
    f518:	bl	b580 <dcgettext@plt>
    f51c:	mov	x3, x0
    f520:	mov	x0, x19
    f524:	mov	w1, wzr
    f528:	mov	w2, wzr
    f52c:	mov	x4, x20
    f530:	bl	ac60 <argp_failure@plt>
    f534:	add	x1, sp, #0x10
    f538:	mov	x0, x19
    f53c:	bl	fdf4 <argp_failure@@Base+0xd24>
    f540:	ldp	x20, x19, [sp, #144]
    f544:	ldp	x22, x21, [sp, #128]
    f548:	ldp	x24, x23, [sp, #112]
    f54c:	ldp	x26, x25, [sp, #96]
    f550:	ldp	x28, x27, [sp, #80]
    f554:	ldp	x29, x30, [sp, #64]
    f558:	add	sp, sp, #0xa0
    f55c:	ret
    f560:	stp	x29, x30, [sp, #-48]!
    f564:	stp	x22, x21, [sp, #16]
    f568:	stp	x20, x19, [sp, #32]
    f56c:	ldr	x22, [x0, #32]
    f570:	mov	x29, sp
    f574:	mov	x19, x0
    f578:	mov	x20, x1
    f57c:	bl	feb0 <argp_failure@@Base+0xde0>
    f580:	mov	x21, x0
    f584:	cbz	x22, f590 <argp_failure@@Base+0x4c0>
    f588:	ldr	x8, [x22]
    f58c:	cbnz	x8, f5e8 <argp_failure@@Base+0x518>
    f590:	mov	x0, x21
    f594:	ldp	x20, x19, [sp, #32]
    f598:	ldp	x22, x21, [sp, #16]
    f59c:	ldp	x29, x30, [sp], #48
    f5a0:	ret
    f5a4:	ldr	x8, [x19, #32]
    f5a8:	ldr	x2, [x22, #16]
    f5ac:	mov	x0, x21
    f5b0:	mov	x4, x20
    f5b4:	sub	x8, x22, x8
    f5b8:	lsr	x3, x8, #5
    f5bc:	mov	x5, x19
    f5c0:	bl	100bc <argp_failure@@Base+0xfec>
    f5c4:	mov	x2, x0
    f5c8:	ldr	x0, [x22]
    f5cc:	mov	x1, x2
    f5d0:	bl	f560 <argp_failure@@Base+0x490>
    f5d4:	mov	x1, x0
    f5d8:	mov	x0, x21
    f5dc:	bl	10138 <argp_failure@@Base+0x1068>
    f5e0:	ldr	x8, [x22, #32]!
    f5e4:	cbz	x8, f590 <argp_failure@@Base+0x4c0>
    f5e8:	ldr	w1, [x22, #24]
    f5ec:	cbnz	w1, f5a4 <argp_failure@@Base+0x4d4>
    f5f0:	ldr	x8, [x22, #16]
    f5f4:	mov	x2, x20
    f5f8:	cbnz	x8, f5a4 <argp_failure@@Base+0x4d4>
    f5fc:	b	f5c8 <argp_failure@@Base+0x4f8>
    f600:	stp	x29, x30, [sp, #-16]!
    f604:	mov	x29, sp
    f608:	bl	10378 <argp_failure@@Base+0x12a8>
    f60c:	cbz	x0, f618 <argp_failure@@Base+0x548>
    f610:	mov	w8, #0xffffffff            	// #-1
    f614:	str	w8, [x0, #24]
    f618:	ldp	x29, x30, [sp], #16
    f61c:	ret
    f620:	stp	x29, x30, [sp, #-16]!
    f624:	ldr	w1, [x0, #8]
    f628:	mov	x29, sp
    f62c:	cbz	w1, f660 <argp_failure@@Base+0x590>
    f630:	ldr	x9, [x0]
    f634:	mov	w8, wzr
    f638:	add	x9, x9, #0x30
    f63c:	str	w8, [x9], #56
    f640:	add	w8, w8, #0x1
    f644:	cmp	w1, w8
    f648:	b.ne	f63c <argp_failure@@Base+0x56c>  // b.any
    f64c:	ldr	x0, [x0]
    f650:	adrp	x3, 10000 <argp_failure@@Base+0xf30>
    f654:	add	x3, x3, #0x414
    f658:	mov	w2, #0x38                  	// #56
    f65c:	bl	aa90 <qsort@plt>
    f660:	ldp	x29, x30, [sp], #16
    f664:	ret
    f668:	stp	x29, x30, [sp, #-32]!
    f66c:	stp	x20, x19, [sp, #16]
    f670:	mov	x8, x0
    f674:	ldr	x0, [x0, #16]
    f678:	ldr	x20, [x8, #32]
    f67c:	mov	x29, sp
    f680:	cbz	x0, f69c <argp_failure@@Base+0x5cc>
    f684:	mov	w1, #0xa                   	// #10
    f688:	bl	b300 <strchr@plt>
    f68c:	cmp	x0, #0x0
    f690:	cset	w19, ne  // ne = any
    f694:	cbnz	x20, f6a4 <argp_failure@@Base+0x5d4>
    f698:	b	f6c4 <argp_failure@@Base+0x5f4>
    f69c:	mov	x19, xzr
    f6a0:	cbz	x20, f6c4 <argp_failure@@Base+0x5f4>
    f6a4:	ldr	x8, [x20]
    f6a8:	cbz	x8, f6c4 <argp_failure@@Base+0x5f4>
    f6ac:	add	x20, x20, #0x20
    f6b0:	mov	x0, x8
    f6b4:	bl	f668 <argp_failure@@Base+0x598>
    f6b8:	ldr	x8, [x20], #32
    f6bc:	add	x19, x0, x19
    f6c0:	cbnz	x8, f6b0 <argp_failure@@Base+0x5e0>
    f6c4:	mov	x0, x19
    f6c8:	ldp	x20, x19, [sp, #16]
    f6cc:	ldp	x29, x30, [sp], #32
    f6d0:	ret
    f6d4:	stp	x29, x30, [sp, #-80]!
    f6d8:	stp	x24, x23, [sp, #32]
    f6dc:	stp	x22, x21, [sp, #48]
    f6e0:	stp	x20, x19, [sp, #64]
    f6e4:	ldr	w24, [x0, #8]
    f6e8:	str	x25, [sp, #16]
    f6ec:	mov	x29, sp
    f6f0:	cbz	w24, f82c <argp_failure@@Base+0x75c>
    f6f4:	mov	x20, x0
    f6f8:	ldr	x0, [x0, #16]
    f6fc:	mov	x19, x1
    f700:	bl	a890 <strlen@plt>
    f704:	add	x9, x0, #0x10
    f708:	mov	x8, sp
    f70c:	and	x9, x9, #0xfffffffffffffff0
    f710:	sub	x21, x8, x9
    f714:	mov	sp, x21
    f718:	str	x21, [x29, #24]
    f71c:	ldr	x22, [x20]
    f720:	adrp	x23, 10000 <argp_failure@@Base+0xf30>
    f724:	add	x23, x23, #0x84c
    f728:	ldr	x8, [x22, #40]
    f72c:	add	x3, x29, #0x18
    f730:	mov	x0, x22
    f734:	mov	x1, x23
    f738:	ldr	x2, [x8, #48]
    f73c:	bl	10768 <argp_failure@@Base+0x1698>
    f740:	subs	w24, w24, #0x1
    f744:	add	x22, x22, #0x38
    f748:	b.ne	f728 <argp_failure@@Base+0x658>  // b.any
    f74c:	ldr	x8, [x29, #24]
    f750:	cmp	x8, x21
    f754:	b.ls	f778 <argp_failure@@Base+0x6a8>  // b.plast
    f758:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    f75c:	add	x9, x8, #0x1
    f760:	add	x1, x1, #0xa12
    f764:	mov	x0, x19
    f768:	mov	x2, x21
    f76c:	str	x9, [x29, #24]
    f770:	strb	wzr, [x8]
    f774:	bl	b010 <argp_fmtstream_printf@plt>
    f778:	ldr	w23, [x20, #8]
    f77c:	cbz	w23, f7b0 <argp_failure@@Base+0x6e0>
    f780:	ldr	x21, [x20]
    f784:	adrp	x22, 10000 <argp_failure@@Base+0xf30>
    f788:	add	x22, x22, #0x890
    f78c:	ldr	x8, [x21, #40]
    f790:	mov	x0, x21
    f794:	mov	x1, x22
    f798:	mov	x3, x19
    f79c:	ldr	x2, [x8, #48]
    f7a0:	bl	10768 <argp_failure@@Base+0x1698>
    f7a4:	subs	w23, w23, #0x1
    f7a8:	add	x21, x21, #0x38
    f7ac:	b.ne	f78c <argp_failure@@Base+0x6bc>  // b.any
    f7b0:	ldr	w23, [x20, #8]
    f7b4:	cbz	w23, f82c <argp_failure@@Base+0x75c>
    f7b8:	ldr	x24, [x20]
    f7bc:	b	f7cc <argp_failure@@Base+0x6fc>
    f7c0:	subs	w23, w23, #0x1
    f7c4:	add	x24, x24, #0x38
    f7c8:	b.eq	f82c <argp_failure@@Base+0x75c>  // b.none
    f7cc:	ldr	w8, [x24, #8]
    f7d0:	cbz	w8, f7c0 <argp_failure@@Base+0x6f0>
    f7d4:	ldr	x9, [x24, #40]
    f7d8:	ldr	x20, [x24]
    f7dc:	mov	w0, wzr
    f7e0:	sub	w25, w8, #0x1
    f7e4:	ldr	x21, [x9, #48]
    f7e8:	mov	x22, x20
    f7ec:	ldr	x8, [x22]
    f7f0:	cbz	x8, f818 <argp_failure@@Base+0x748>
    f7f4:	ldr	w8, [x22, #24]
    f7f8:	tst	w8, #0x4
    f7fc:	csel	x20, x22, x20, eq  // eq = none
    f800:	tbnz	w8, #1, f818 <argp_failure@@Base+0x748>
    f804:	mov	x0, x22
    f808:	mov	x1, x20
    f80c:	mov	x2, x21
    f810:	mov	x3, x19
    f814:	bl	10930 <argp_failure@@Base+0x1860>
    f818:	subs	w25, w25, #0x1
    f81c:	b.cc	f7c0 <argp_failure@@Base+0x6f0>  // b.lo, b.ul, b.last
    f820:	add	x22, x22, #0x30
    f824:	cbz	w0, f7ec <argp_failure@@Base+0x71c>
    f828:	b	f7c0 <argp_failure@@Base+0x6f0>
    f82c:	mov	sp, x29
    f830:	ldp	x20, x19, [sp, #64]
    f834:	ldp	x22, x21, [sp, #48]
    f838:	ldp	x24, x23, [sp, #32]
    f83c:	ldr	x25, [sp, #16]
    f840:	ldp	x29, x30, [sp], #80
    f844:	ret
    f848:	sub	sp, sp, #0x70
    f84c:	stp	x29, x30, [sp, #16]
    f850:	stp	x28, x27, [sp, #32]
    f854:	stp	x26, x25, [sp, #48]
    f858:	stp	x24, x23, [sp, #64]
    f85c:	stp	x22, x21, [sp, #80]
    f860:	stp	x20, x19, [sp, #96]
    f864:	ldr	x28, [x2]
    f868:	ldr	x8, [x0, #16]
    f86c:	ldr	x26, [x0, #32]
    f870:	mov	x20, x4
    f874:	mov	w19, w3
    f878:	mov	x21, x2
    f87c:	mov	x23, x0
    f880:	mov	x22, x1
    f884:	add	x29, sp, #0x10
    f888:	cbz	x8, f8a4 <argp_failure@@Base+0x7d4>
    f88c:	ldr	x0, [x23, #48]
    f890:	mov	w2, #0x5                   	// #5
    f894:	mov	x1, x8
    f898:	bl	b580 <dcgettext@plt>
    f89c:	mov	x24, x0
    f8a0:	b	f8a8 <argp_failure@@Base+0x7d8>
    f8a4:	mov	x24, xzr
    f8a8:	mov	w1, #0x6                   	// #6
    f8ac:	movk	w1, #0x200, lsl #16
    f8b0:	mov	x0, x24
    f8b4:	mov	x2, x23
    f8b8:	mov	x3, x22
    f8bc:	bl	10a1c <argp_failure@@Base+0x194c>
    f8c0:	mov	x25, x0
    f8c4:	cbz	x0, f918 <argp_failure@@Base+0x848>
    f8c8:	mov	w1, #0xa                   	// #10
    f8cc:	mov	x0, x25
    f8d0:	bl	b530 <strchrnul@plt>
    f8d4:	ldrb	w8, [x0]
    f8d8:	mov	x23, x0
    f8dc:	stp	x26, x28, [sp]
    f8e0:	cbz	w8, f92c <argp_failure@@Base+0x85c>
    f8e4:	ldrb	w8, [x28]
    f8e8:	cbz	w8, f938 <argp_failure@@Base+0x868>
    f8ec:	ldrb	w27, [x28]
    f8f0:	mov	w28, wzr
    f8f4:	add	x26, x23, #0x1
    f8f8:	mov	w1, #0xa                   	// #10
    f8fc:	mov	x0, x26
    f900:	bl	b530 <strchrnul@plt>
    f904:	add	w28, w28, #0x1
    f908:	cmp	w28, w27
    f90c:	mov	x23, x0
    f910:	b.cc	f8f4 <argp_failure@@Base+0x824>  // b.lo, b.ul, b.last
    f914:	b	f93c <argp_failure@@Base+0x86c>
    f918:	mov	w27, wzr
    f91c:	mov	x23, xzr
    f920:	cmp	x25, x24
    f924:	b.ne	f97c <argp_failure@@Base+0x8ac>  // b.any
    f928:	b	f988 <argp_failure@@Base+0x8b8>
    f92c:	mov	w28, wzr
    f930:	mov	x26, x25
    f934:	b	f94c <argp_failure@@Base+0x87c>
    f938:	mov	x26, x25
    f93c:	ldr	x8, [x21]
    f940:	mov	w28, #0x1                   	// #1
    f944:	add	x8, x8, #0x1
    f948:	str	x8, [x21]
    f94c:	sub	x27, x23, x26
    f950:	add	x1, x27, #0x1
    f954:	mov	x0, x20
    f958:	bl	109d8 <argp_failure@@Base+0x1908>
    f95c:	mov	x0, x20
    f960:	mov	x1, x26
    f964:	mov	x2, x27
    f968:	bl	b660 <argp_fmtstream_write@plt>
    f96c:	mov	w27, w28
    f970:	ldp	x26, x28, [sp]
    f974:	cmp	x25, x24
    f978:	b.eq	f988 <argp_failure@@Base+0x8b8>  // b.none
    f97c:	cbz	x25, f988 <argp_failure@@Base+0x8b8>
    f980:	mov	x0, x25
    f984:	bl	b1d0 <free@plt>
    f988:	cbz	x26, f9c0 <argp_failure@@Base+0x8f0>
    f98c:	ldr	x8, [x26]
    f990:	cbz	x8, f9c0 <argp_failure@@Base+0x8f0>
    f994:	add	x24, x26, #0x20
    f998:	mov	x0, x8
    f99c:	mov	x1, x22
    f9a0:	mov	x2, x21
    f9a4:	mov	w3, w19
    f9a8:	mov	x4, x20
    f9ac:	bl	f848 <argp_failure@@Base+0x778>
    f9b0:	ldr	x8, [x24], #32
    f9b4:	cmp	w0, #0x0
    f9b8:	cset	w19, eq  // eq = none
    f9bc:	cbnz	x8, f998 <argp_failure@@Base+0x8c8>
    f9c0:	cbz	w27, f9f0 <argp_failure@@Base+0x920>
    f9c4:	cbz	w19, f9f0 <argp_failure@@Base+0x920>
    f9c8:	ldrb	w9, [x23]
    f9cc:	ldrb	w8, [x28]
    f9d0:	cbz	w9, f9e4 <argp_failure@@Base+0x914>
    f9d4:	add	w8, w8, #0x1
    f9d8:	mov	w19, wzr
    f9dc:	strb	w8, [x28]
    f9e0:	b	f9f0 <argp_failure@@Base+0x920>
    f9e4:	cbz	w8, f9ec <argp_failure@@Base+0x91c>
    f9e8:	strb	wzr, [x28]
    f9ec:	mov	w19, #0x1                   	// #1
    f9f0:	cmp	w19, #0x0
    f9f4:	ldp	x20, x19, [sp, #96]
    f9f8:	ldp	x22, x21, [sp, #80]
    f9fc:	ldp	x24, x23, [sp, #64]
    fa00:	ldp	x26, x25, [sp, #48]
    fa04:	ldp	x28, x27, [sp, #32]
    fa08:	ldp	x29, x30, [sp, #16]
    fa0c:	cset	w0, eq  // eq = none
    fa10:	add	sp, sp, #0x70
    fa14:	ret
    fa18:	sub	sp, sp, #0x70
    fa1c:	stp	x29, x30, [sp, #16]
    fa20:	stp	x28, x27, [sp, #32]
    fa24:	stp	x26, x25, [sp, #48]
    fa28:	stp	x24, x23, [sp, #64]
    fa2c:	stp	x22, x21, [sp, #80]
    fa30:	stp	x20, x19, [sp, #96]
    fa34:	ldr	x8, [x0, #24]
    fa38:	mov	x19, x5
    fa3c:	mov	w20, w4
    fa40:	mov	w21, w3
    fa44:	mov	w22, w2
    fa48:	mov	x24, x0
    fa4c:	mov	x23, x1
    fa50:	add	x29, sp, #0x10
    fa54:	cbz	x8, fa70 <argp_failure@@Base+0x9a0>
    fa58:	ldr	x0, [x24, #48]
    fa5c:	mov	w2, #0x5                   	// #5
    fa60:	mov	x1, x8
    fa64:	bl	b580 <dcgettext@plt>
    fa68:	mov	x25, x0
    fa6c:	b	fa74 <argp_failure@@Base+0x9a4>
    fa70:	mov	x25, xzr
    fa74:	ldr	x8, [x24, #32]
    fa78:	str	x8, [sp, #8]
    fa7c:	cbz	x25, fab0 <argp_failure@@Base+0x9e0>
    fa80:	mov	w1, #0xb                   	// #11
    fa84:	mov	x0, x25
    fa88:	bl	b300 <strchr@plt>
    fa8c:	cmp	x0, #0x0
    fa90:	csinc	x9, xzr, x0, eq  // eq = none
    fa94:	cmp	x0, #0x0
    fa98:	sub	x8, x0, x25
    fa9c:	ccmp	w22, #0x0, #0x0, ne  // ne = any
    faa0:	csel	x26, x8, xzr, eq  // eq = none
    faa4:	cmp	w22, #0x0
    faa8:	csel	x28, x25, x9, eq  // eq = none
    faac:	b	fab8 <argp_failure@@Base+0x9e8>
    fab0:	mov	x26, xzr
    fab4:	mov	x28, xzr
    fab8:	ldr	x8, [x24, #40]
    fabc:	mov	w25, #0x1                   	// #1
    fac0:	movk	w25, #0x200, lsl #16
    fac4:	cbz	x8, fb3c <argp_failure@@Base+0xa6c>
    fac8:	cbz	x26, fadc <argp_failure@@Base+0xa0c>
    facc:	mov	x0, x28
    fad0:	mov	x1, x26
    fad4:	bl	b2c0 <strndup@plt>
    fad8:	mov	x28, x0
    fadc:	mov	x0, x24
    fae0:	mov	x1, x23
    fae4:	bl	b410 <_argp_input@plt>
    fae8:	ldr	x8, [x24, #40]
    faec:	cmp	w22, #0x0
    faf0:	mov	x2, x0
    faf4:	cinc	w0, w25, ne  // ne = any
    faf8:	mov	x1, x28
    fafc:	str	x2, [sp]
    fb00:	blr	x8
    fb04:	mov	x25, x0
    fb08:	cbz	x25, fb48 <argp_failure@@Base+0xa78>
    fb0c:	cbz	w21, fb1c <argp_failure@@Base+0xa4c>
    fb10:	mov	w1, #0xa                   	// #10
    fb14:	mov	x0, x19
    fb18:	bl	aad0 <argp_fmtstream_putc@plt>
    fb1c:	cbz	x26, fb58 <argp_failure@@Base+0xa88>
    fb20:	cmp	x25, x28
    fb24:	b.ne	fb58 <argp_failure@@Base+0xa88>  // b.any
    fb28:	mov	x0, x19
    fb2c:	mov	x1, x28
    fb30:	mov	x2, x26
    fb34:	bl	b660 <argp_fmtstream_write@plt>
    fb38:	b	fb64 <argp_failure@@Base+0xa94>
    fb3c:	str	xzr, [sp]
    fb40:	mov	x25, x28
    fb44:	cbnz	x25, fb0c <argp_failure@@Base+0xa3c>
    fb48:	mov	w27, wzr
    fb4c:	cmp	x25, x28
    fb50:	b.ne	fb90 <argp_failure@@Base+0xac0>  // b.any
    fb54:	b	fb9c <argp_failure@@Base+0xacc>
    fb58:	mov	x0, x19
    fb5c:	mov	x1, x25
    fb60:	bl	aca0 <argp_fmtstream_puts@plt>
    fb64:	mov	x0, x19
    fb68:	bl	afe0 <argp_fmtstream_point@plt>
    fb6c:	ldr	x8, [x19, #8]
    fb70:	cmp	x0, x8
    fb74:	b.ls	fb84 <argp_failure@@Base+0xab4>  // b.plast
    fb78:	mov	w1, #0xa                   	// #10
    fb7c:	mov	x0, x19
    fb80:	bl	aad0 <argp_fmtstream_putc@plt>
    fb84:	mov	w27, #0x1                   	// #1
    fb88:	cmp	x25, x28
    fb8c:	b.eq	fb9c <argp_failure@@Base+0xacc>  // b.none
    fb90:	cbz	x25, fb9c <argp_failure@@Base+0xacc>
    fb94:	mov	x0, x25
    fb98:	bl	b1d0 <free@plt>
    fb9c:	cbz	x26, fbb4 <argp_failure@@Base+0xae4>
    fba0:	cbz	x28, fbb4 <argp_failure@@Base+0xae4>
    fba4:	ldr	x8, [x24, #40]
    fba8:	cbz	x8, fbb4 <argp_failure@@Base+0xae4>
    fbac:	mov	x0, x28
    fbb0:	bl	b1d0 <free@plt>
    fbb4:	cbz	w22, fc2c <argp_failure@@Base+0xb5c>
    fbb8:	ldr	x8, [x24, #40]
    fbbc:	cbz	x8, fc2c <argp_failure@@Base+0xb5c>
    fbc0:	ldr	x2, [sp]
    fbc4:	mov	w9, #0x1                   	// #1
    fbc8:	movk	w9, #0x200, lsl #16
    fbcc:	add	w0, w9, #0x3
    fbd0:	mov	x1, xzr
    fbd4:	blr	x8
    fbd8:	cbz	x0, fc2c <argp_failure@@Base+0xb5c>
    fbdc:	mov	x24, x0
    fbe0:	orr	w8, w27, w21
    fbe4:	cbz	w8, fbf4 <argp_failure@@Base+0xb24>
    fbe8:	mov	w1, #0xa                   	// #10
    fbec:	mov	x0, x19
    fbf0:	bl	aad0 <argp_fmtstream_putc@plt>
    fbf4:	mov	x0, x19
    fbf8:	mov	x1, x24
    fbfc:	bl	aca0 <argp_fmtstream_puts@plt>
    fc00:	mov	x0, x24
    fc04:	bl	b1d0 <free@plt>
    fc08:	mov	x0, x19
    fc0c:	bl	afe0 <argp_fmtstream_point@plt>
    fc10:	ldr	x8, [x19, #8]
    fc14:	cmp	x0, x8
    fc18:	b.ls	fc28 <argp_failure@@Base+0xb58>  // b.plast
    fc1c:	mov	w1, #0xa                   	// #10
    fc20:	mov	x0, x19
    fc24:	bl	aad0 <argp_fmtstream_putc@plt>
    fc28:	mov	w27, #0x1                   	// #1
    fc2c:	ldr	x9, [sp, #8]
    fc30:	cbz	x9, fc7c <argp_failure@@Base+0xbac>
    fc34:	ldr	x8, [x9]
    fc38:	cbz	x8, fc7c <argp_failure@@Base+0xbac>
    fc3c:	add	x24, x9, #0x20
    fc40:	b	fc74 <argp_failure@@Base+0xba4>
    fc44:	orr	w9, w27, w21
    fc48:	cmp	w9, #0x0
    fc4c:	cset	w3, ne  // ne = any
    fc50:	mov	x0, x8
    fc54:	mov	x1, x23
    fc58:	mov	w2, w22
    fc5c:	mov	w4, w20
    fc60:	mov	x5, x19
    fc64:	bl	fa18 <argp_failure@@Base+0x948>
    fc68:	ldr	x8, [x24], #32
    fc6c:	orr	w27, w0, w27
    fc70:	cbz	x8, fc7c <argp_failure@@Base+0xbac>
    fc74:	cbz	w20, fc44 <argp_failure@@Base+0xb74>
    fc78:	cbz	w27, fc44 <argp_failure@@Base+0xb74>
    fc7c:	mov	w0, w27
    fc80:	ldp	x20, x19, [sp, #96]
    fc84:	ldp	x22, x21, [sp, #80]
    fc88:	ldp	x24, x23, [sp, #64]
    fc8c:	ldp	x26, x25, [sp, #48]
    fc90:	ldp	x28, x27, [sp, #32]
    fc94:	ldp	x29, x30, [sp, #16]
    fc98:	add	sp, sp, #0x70
    fc9c:	ret
    fca0:	sub	sp, sp, #0x40
    fca4:	stp	x29, x30, [sp, #16]
    fca8:	stp	x22, x21, [sp, #32]
    fcac:	stp	x20, x19, [sp, #48]
    fcb0:	stp	xzr, xzr, [sp]
    fcb4:	ldr	w22, [x0, #8]
    fcb8:	mov	x19, x2
    fcbc:	mov	x20, x1
    fcc0:	add	x29, sp, #0x10
    fcc4:	cbz	w22, fcec <argp_failure@@Base+0xc1c>
    fcc8:	ldr	x21, [x0]
    fccc:	mov	x3, sp
    fcd0:	mov	x0, x21
    fcd4:	mov	x1, x20
    fcd8:	mov	x2, x19
    fcdc:	bl	10a7c <argp_failure@@Base+0x19ac>
    fce0:	subs	w22, w22, #0x1
    fce4:	add	x21, x21, #0x38
    fce8:	b.ne	fccc <argp_failure@@Base+0xbfc>  // b.any
    fcec:	ldr	w8, [sp, #12]
    fcf0:	cbz	w8, fd8c <argp_failure@@Base+0xcbc>
    fcf4:	adrp	x8, 40000 <base_len@@Base+0x2c984>
    fcf8:	ldr	w8, [x8, #2148]
    fcfc:	cbz	w8, fd8c <argp_failure@@Base+0xcbc>
    fd00:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
    fd04:	add	x8, x8, #0x7e4
    fd08:	cmp	x20, #0x0
    fd0c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    fd10:	csel	x0, xzr, x8, eq  // eq = none
    fd14:	add	x1, x1, #0xa4d
    fd18:	mov	w2, #0x5                   	// #5
    fd1c:	bl	b580 <dcgettext@plt>
    fd20:	mov	x21, x0
    fd24:	cbz	x20, fd30 <argp_failure@@Base+0xc60>
    fd28:	ldr	x2, [x20]
    fd2c:	b	fd34 <argp_failure@@Base+0xc64>
    fd30:	mov	x2, xzr
    fd34:	mov	w1, #0x5                   	// #5
    fd38:	movk	w1, #0x200, lsl #16
    fd3c:	mov	x0, x21
    fd40:	mov	x3, x20
    fd44:	bl	10a1c <argp_failure@@Base+0x194c>
    fd48:	cbz	x0, fd8c <argp_failure@@Base+0xcbc>
    fd4c:	ldrb	w8, [x0]
    fd50:	mov	x20, x0
    fd54:	cbz	w8, fd7c <argp_failure@@Base+0xcac>
    fd58:	mov	w1, #0xa                   	// #10
    fd5c:	mov	x0, x19
    fd60:	bl	aad0 <argp_fmtstream_putc@plt>
    fd64:	mov	x0, x19
    fd68:	mov	x1, x20
    fd6c:	bl	aca0 <argp_fmtstream_puts@plt>
    fd70:	mov	w1, #0xa                   	// #10
    fd74:	mov	x0, x19
    fd78:	bl	aad0 <argp_fmtstream_putc@plt>
    fd7c:	cmp	x20, x21
    fd80:	b.eq	fd8c <argp_failure@@Base+0xcbc>  // b.none
    fd84:	mov	x0, x20
    fd88:	bl	b1d0 <free@plt>
    fd8c:	ldp	x20, x19, [sp, #48]
    fd90:	ldp	x22, x21, [sp, #32]
    fd94:	ldp	x29, x30, [sp, #16]
    fd98:	add	sp, sp, #0x40
    fd9c:	ret
    fda0:	stp	x29, x30, [sp, #-32]!
    fda4:	stp	x20, x19, [sp, #16]
    fda8:	mov	x19, x0
    fdac:	ldr	x0, [x0, #24]
    fdb0:	mov	x29, sp
    fdb4:	cbz	x0, fdc8 <argp_failure@@Base+0xcf8>
    fdb8:	ldr	x20, [x0, #40]
    fdbc:	bl	b1d0 <free@plt>
    fdc0:	mov	x0, x20
    fdc4:	cbnz	x20, fdb8 <argp_failure@@Base+0xce8>
    fdc8:	ldr	w8, [x19, #8]
    fdcc:	cbz	w8, fde0 <argp_failure@@Base+0xd10>
    fdd0:	ldr	x0, [x19]
    fdd4:	bl	b1d0 <free@plt>
    fdd8:	ldr	x0, [x19, #16]
    fddc:	bl	b1d0 <free@plt>
    fde0:	mov	x0, x19
    fde4:	bl	b1d0 <free@plt>
    fde8:	ldp	x20, x19, [sp, #16]
    fdec:	ldp	x29, x30, [sp], #32
    fdf0:	ret
    fdf4:	stp	x29, x30, [sp, #-32]!
    fdf8:	stp	x20, x19, [sp, #16]
    fdfc:	adrp	x19, 2b000 <vasnprintf@@Base+0xec4>
    fe00:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
    fe04:	mov	x20, x0
    fe08:	add	x19, x19, #0xad8
    fe0c:	add	x8, x8, #0xb68
    fe10:	mov	x29, sp
    fe14:	b	fe24 <argp_failure@@Base+0xd54>
    fe18:	add	x19, x19, #0x10
    fe1c:	cmp	x19, x8
    fe20:	b.cs	fe84 <argp_failure@@Base+0xdb4>  // b.hs, b.nlast
    fe24:	ldrb	w9, [x19, #14]
    fe28:	cbnz	w9, fe18 <argp_failure@@Base+0xd48>
    fe2c:	ldrb	w9, [x19, #15]
    fe30:	cmp	x9, #0x20
    fe34:	b.eq	fe18 <argp_failure@@Base+0xd48>  // b.none
    fe38:	ldr	w9, [x1, x9]
    fe3c:	ldr	w10, [x1, #32]
    fe40:	cmp	w9, w10
    fe44:	b.lt	fe18 <argp_failure@@Base+0xd48>  // b.tstop
    fe48:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
    fe4c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
    fe50:	add	x0, x0, #0x7e4
    fe54:	add	x1, x1, #0x90e
    fe58:	mov	w2, #0x5                   	// #5
    fe5c:	bl	b580 <dcgettext@plt>
    fe60:	adrp	x4, 2b000 <vasnprintf@@Base+0xec4>
    fe64:	mov	x3, x0
    fe68:	add	x4, x4, #0x942
    fe6c:	mov	x0, x20
    fe70:	mov	w1, wzr
    fe74:	mov	w2, wzr
    fe78:	mov	x5, x19
    fe7c:	bl	ac60 <argp_failure@plt>
    fe80:	b	fea4 <argp_failure@@Base+0xdd4>
    fe84:	ldr	x8, [x1, #32]
    fe88:	ldp	q0, q1, [x1]
    fe8c:	adrp	x9, 40000 <base_len@@Base+0x2c984>
    fe90:	add	x9, x9, #0x860
    fe94:	mov	w10, #0x1                   	// #1
    fe98:	str	x8, [x9, #32]
    fe9c:	stp	q0, q1, [x9]
    fea0:	str	w10, [x9, #36]
    fea4:	ldp	x20, x19, [sp, #16]
    fea8:	ldp	x29, x30, [sp], #32
    feac:	ret
    feb0:	stp	x29, x30, [sp, #-80]!
    feb4:	stp	x26, x25, [sp, #16]
    feb8:	stp	x24, x23, [sp, #32]
    febc:	stp	x22, x21, [sp, #48]
    fec0:	stp	x20, x19, [sp, #64]
    fec4:	ldr	x22, [x0]
    fec8:	mov	x20, x0
    fecc:	mov	w0, #0x20                  	// #32
    fed0:	mov	x29, sp
    fed4:	mov	x21, x1
    fed8:	bl	abc0 <malloc@plt>
    fedc:	cbz	x0, 1007c <argp_failure@@Base+0xfac>
    fee0:	mov	x19, x0
    fee4:	str	wzr, [x0, #8]
    fee8:	str	xzr, [x0, #24]
    feec:	cbz	x22, ff94 <argp_failure@@Base+0xec4>
    fef0:	ldrb	w8, [x22, #24]
    fef4:	tbnz	w8, #2, 1009c <argp_failure@@Base+0xfcc>
    fef8:	mov	x0, x22
    fefc:	bl	b040 <_option_is_end@plt>
    ff00:	cbz	w0, ff0c <argp_failure@@Base+0xe3c>
    ff04:	mov	w23, #0x1                   	// #1
    ff08:	b	ff54 <argp_failure@@Base+0xe84>
    ff0c:	mov	w24, wzr
    ff10:	mov	x23, x22
    ff14:	b	ff38 <argp_failure@@Base+0xe68>
    ff18:	mov	x0, x23
    ff1c:	bl	b570 <_option_is_short@plt>
    ff20:	add	x23, x23, #0x30
    ff24:	cmp	w0, #0x0
    ff28:	mov	x0, x23
    ff2c:	cinc	w24, w24, ne  // ne = any
    ff30:	bl	b040 <_option_is_end@plt>
    ff34:	cbnz	w0, ff50 <argp_failure@@Base+0xe80>
    ff38:	ldrb	w8, [x23, #24]
    ff3c:	tbnz	w8, #2, ff18 <argp_failure@@Base+0xe48>
    ff40:	ldr	w8, [x19, #8]
    ff44:	add	w8, w8, #0x1
    ff48:	str	w8, [x19, #8]
    ff4c:	b	ff18 <argp_failure@@Base+0xe48>
    ff50:	add	w23, w24, #0x1
    ff54:	ldr	w8, [x19, #8]
    ff58:	mov	w9, #0x38                  	// #56
    ff5c:	mul	x0, x8, x9
    ff60:	bl	abc0 <malloc@plt>
    ff64:	mov	x24, x0
    ff68:	str	x0, [x19]
    ff6c:	mov	x0, x23
    ff70:	bl	abc0 <malloc@plt>
    ff74:	str	x0, [x19, #16]
    ff78:	cbz	x0, 1005c <argp_failure@@Base+0xf8c>
    ff7c:	cbz	x24, 1005c <argp_failure@@Base+0xf8c>
    ff80:	mov	x23, x0
    ff84:	mov	x0, x22
    ff88:	bl	b040 <_option_is_end@plt>
    ff8c:	cbz	w0, ffb0 <argp_failure@@Base+0xee0>
    ff90:	strb	wzr, [x23]
    ff94:	mov	x0, x19
    ff98:	ldp	x20, x19, [sp, #64]
    ff9c:	ldp	x22, x21, [sp, #48]
    ffa0:	ldp	x24, x23, [sp, #32]
    ffa4:	ldp	x26, x25, [sp, #16]
    ffa8:	ldp	x29, x30, [sp], #80
    ffac:	ret
    ffb0:	mov	w8, wzr
    ffb4:	b	ffd0 <argp_failure@@Base+0xf00>
    ffb8:	mov	x0, x25
    ffbc:	add	x24, x24, #0x38
    ffc0:	bl	b040 <_option_is_end@plt>
    ffc4:	mov	w8, w26
    ffc8:	mov	x22, x25
    ffcc:	cbnz	w0, ff90 <argp_failure@@Base+0xec0>
    ffd0:	str	x22, [x24]
    ffd4:	str	wzr, [x24, #8]
    ffd8:	str	x23, [x24, #16]
    ffdc:	ldr	w26, [x22, #40]
    ffe0:	cbnz	w26, 10000 <argp_failure@@Base+0xf30>
    ffe4:	ldr	x9, [x22]
    ffe8:	cbz	x9, fff4 <argp_failure@@Base+0xf24>
    ffec:	mov	w26, w8
    fff0:	b	10000 <argp_failure@@Base+0xf30>
    fff4:	ldr	w9, [x22, #8]
    fff8:	cmp	w9, #0x0
    fffc:	cinc	w26, w8, eq  // eq = none
   10000:	str	w26, [x24, #24]
   10004:	stp	x21, x20, [x24, #32]
   10008:	ldr	w8, [x24, #8]
   1000c:	mov	x0, x22
   10010:	add	w8, w8, #0x1
   10014:	str	w8, [x24, #8]
   10018:	bl	b570 <_option_is_short@plt>
   1001c:	cbz	w0, 1003c <argp_failure@@Base+0xf6c>
   10020:	ldr	w25, [x22, #8]
   10024:	ldr	x1, [x19, #16]
   10028:	mov	x2, x23
   1002c:	mov	w0, w25
   10030:	bl	1034c <argp_failure@@Base+0x127c>
   10034:	cbnz	w0, 1003c <argp_failure@@Base+0xf6c>
   10038:	strb	w25, [x23], #1
   1003c:	add	x25, x22, #0x30
   10040:	mov	x0, x25
   10044:	bl	b040 <_option_is_end@plt>
   10048:	cbnz	w0, ffb8 <argp_failure@@Base+0xee8>
   1004c:	ldrb	w8, [x22, #72]
   10050:	mov	x22, x25
   10054:	tbnz	w8, #2, 10008 <argp_failure@@Base+0xf38>
   10058:	b	ffb8 <argp_failure@@Base+0xee8>
   1005c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   10060:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10064:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
   10068:	add	x0, x0, #0x9aa
   1006c:	add	x1, x1, #0x94e
   10070:	add	x3, x3, #0x95a
   10074:	mov	w2, #0x1db                 	// #475
   10078:	bl	b6e0 <__assert_fail@plt>
   1007c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   10080:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10084:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
   10088:	add	x0, x0, #0x94a
   1008c:	add	x1, x1, #0x94e
   10090:	add	x3, x3, #0x95a
   10094:	mov	w2, #0x1c3                 	// #451
   10098:	bl	b6e0 <__assert_fail@plt>
   1009c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   100a0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   100a4:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
   100a8:	add	x0, x0, #0x99a
   100ac:	add	x1, x1, #0x94e
   100b0:	add	x3, x3, #0x95a
   100b4:	mov	w2, #0x1cd                 	// #461
   100b8:	bl	b6e0 <__assert_fail@plt>
   100bc:	stp	x29, x30, [sp, #-64]!
   100c0:	stp	x20, x19, [sp, #48]
   100c4:	mov	x19, x0
   100c8:	mov	w0, #0x30                  	// #48
   100cc:	stp	x24, x23, [sp, #16]
   100d0:	stp	x22, x21, [sp, #32]
   100d4:	mov	x29, sp
   100d8:	mov	x21, x5
   100dc:	mov	x20, x4
   100e0:	mov	w22, w3
   100e4:	mov	x23, x2
   100e8:	mov	w24, w1
   100ec:	bl	abc0 <malloc@plt>
   100f0:	cbz	x0, 10124 <argp_failure@@Base+0x1054>
   100f4:	str	x23, [x0]
   100f8:	stp	w22, w24, [x0, #8]
   100fc:	stp	x20, x21, [x0, #16]
   10100:	cbz	x20, 10110 <argp_failure@@Base+0x1040>
   10104:	ldr	w8, [x20, #32]
   10108:	add	w8, w8, #0x1
   1010c:	b	10114 <argp_failure@@Base+0x1044>
   10110:	mov	w8, wzr
   10114:	str	w8, [x0, #32]
   10118:	ldr	x8, [x19, #24]
   1011c:	str	x8, [x0, #40]
   10120:	str	x0, [x19, #24]
   10124:	ldp	x20, x19, [sp, #48]
   10128:	ldp	x22, x21, [sp, #32]
   1012c:	ldp	x24, x23, [sp, #16]
   10130:	ldp	x29, x30, [sp], #64
   10134:	ret
   10138:	sub	sp, sp, #0x80
   1013c:	stp	x22, x21, [sp, #96]
   10140:	stp	x20, x19, [sp, #112]
   10144:	mov	x21, x1
   10148:	mov	x20, x0
   1014c:	add	x9, x0, #0x18
   10150:	stp	x29, x30, [sp, #32]
   10154:	stp	x28, x27, [sp, #48]
   10158:	stp	x26, x25, [sp, #64]
   1015c:	stp	x24, x23, [sp, #80]
   10160:	add	x29, sp, #0x20
   10164:	ldr	x10, [x9]
   10168:	mov	x8, x9
   1016c:	add	x9, x10, #0x28
   10170:	cbnz	x10, 10164 <argp_failure@@Base+0x1094>
   10174:	ldr	x9, [x21, #24]
   10178:	str	x9, [x8]
   1017c:	ldr	w28, [x21, #8]
   10180:	str	xzr, [x21, #24]
   10184:	cbz	w28, 10304 <argp_failure@@Base+0x1234>
   10188:	ldr	w27, [x20, #8]
   1018c:	cbz	w27, 102ec <argp_failure@@Base+0x121c>
   10190:	add	w9, w27, w28
   10194:	mov	w8, #0x38                  	// #56
   10198:	umull	x0, w9, w8
   1019c:	str	w9, [sp, #12]
   101a0:	bl	abc0 <malloc@plt>
   101a4:	ldr	x8, [x20, #16]
   101a8:	mov	x19, x0
   101ac:	mov	x0, x8
   101b0:	str	x8, [sp]
   101b4:	bl	a890 <strlen@plt>
   101b8:	ldr	x23, [x21, #16]
   101bc:	and	x24, x0, #0xffffffff
   101c0:	mov	x0, x23
   101c4:	bl	a890 <strlen@plt>
   101c8:	add	x8, x24, x0
   101cc:	add	x0, x8, #0x1
   101d0:	bl	abc0 <malloc@plt>
   101d4:	stur	x19, [x29, #-8]
   101d8:	cbz	x19, 1032c <argp_failure@@Base+0x125c>
   101dc:	mov	x22, x0
   101e0:	cbz	x0, 1032c <argp_failure@@Base+0x125c>
   101e4:	ldur	x25, [x29, #-8]
   101e8:	ldr	x1, [x20]
   101ec:	mov	w19, #0x38                  	// #56
   101f0:	mul	x26, x27, x19
   101f4:	mov	x0, x25
   101f8:	mov	x2, x26
   101fc:	bl	a800 <memcpy@plt>
   10200:	ldr	x1, [x21]
   10204:	add	x0, x25, x26
   10208:	mul	x2, x28, x19
   1020c:	str	x21, [sp, #16]
   10210:	bl	a800 <memcpy@plt>
   10214:	ldr	x1, [sp]
   10218:	mov	x0, x22
   1021c:	mov	x2, x24
   10220:	bl	a800 <memcpy@plt>
   10224:	ldr	x8, [x20, #16]
   10228:	mov	x21, x25
   1022c:	ldr	x9, [x21, #16]
   10230:	subs	w27, w27, #0x1
   10234:	sub	x9, x9, x8
   10238:	add	x9, x22, x9
   1023c:	str	x9, [x21, #16]
   10240:	add	x21, x21, #0x38
   10244:	b.ne	1022c <argp_failure@@Base+0x115c>  // b.any
   10248:	add	x24, x22, x24
   1024c:	mov	x27, x24
   10250:	b	10260 <argp_failure@@Base+0x1190>
   10254:	subs	w28, w28, #0x1
   10258:	add	x21, x21, #0x38
   1025c:	b.eq	102bc <argp_failure@@Base+0x11ec>  // b.none
   10260:	ldr	w19, [x21, #8]
   10264:	str	x27, [x21, #16]
   10268:	cbz	w19, 10254 <argp_failure@@Base+0x1184>
   1026c:	ldr	x25, [x21]
   10270:	b	10284 <argp_failure@@Base+0x11b4>
   10274:	add	x23, x23, #0x1
   10278:	subs	w19, w19, #0x1
   1027c:	add	x25, x25, #0x30
   10280:	b.eq	10254 <argp_failure@@Base+0x1184>  // b.none
   10284:	ldrb	w26, [x23]
   10288:	mov	x0, x25
   1028c:	bl	b570 <_option_is_short@plt>
   10290:	cbz	w0, 10278 <argp_failure@@Base+0x11a8>
   10294:	ldr	w8, [x25, #8]
   10298:	cmp	w8, w26
   1029c:	b.ne	10278 <argp_failure@@Base+0x11a8>  // b.any
   102a0:	mov	w0, w26
   102a4:	mov	x1, x22
   102a8:	mov	x2, x24
   102ac:	bl	1034c <argp_failure@@Base+0x127c>
   102b0:	cbnz	w0, 10274 <argp_failure@@Base+0x11a4>
   102b4:	strb	w26, [x27], #1
   102b8:	b	10274 <argp_failure@@Base+0x11a4>
   102bc:	strb	wzr, [x27]
   102c0:	ldr	x0, [x20]
   102c4:	bl	b1d0 <free@plt>
   102c8:	ldr	x0, [x20, #16]
   102cc:	bl	b1d0 <free@plt>
   102d0:	ldur	x8, [x29, #-8]
   102d4:	ldr	x21, [sp, #16]
   102d8:	str	x22, [x20, #16]
   102dc:	str	x8, [x20]
   102e0:	ldr	w8, [sp, #12]
   102e4:	str	w8, [x20, #8]
   102e8:	b	10304 <argp_failure@@Base+0x1234>
   102ec:	str	w28, [x20, #8]
   102f0:	ldr	x8, [x21]
   102f4:	str	x8, [x20]
   102f8:	ldr	x8, [x21, #16]
   102fc:	str	x8, [x20, #16]
   10300:	str	wzr, [x21, #8]
   10304:	mov	x0, x21
   10308:	bl	fda0 <argp_failure@@Base+0xcd0>
   1030c:	ldp	x20, x19, [sp, #112]
   10310:	ldp	x22, x21, [sp, #96]
   10314:	ldp	x24, x23, [sp, #80]
   10318:	ldp	x26, x25, [sp, #64]
   1031c:	ldp	x28, x27, [sp, #48]
   10320:	ldp	x29, x30, [sp, #32]
   10324:	add	sp, sp, #0x80
   10328:	ret
   1032c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   10330:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10334:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
   10338:	add	x0, x0, #0x9cd
   1033c:	add	x1, x1, #0x94e
   10340:	add	x3, x3, #0x9e6
   10344:	mov	w2, #0x370                 	// #880
   10348:	bl	b6e0 <__assert_fail@plt>
   1034c:	cmp	x1, x2
   10350:	b.cs	10368 <argp_failure@@Base+0x1298>  // b.hs, b.nlast
   10354:	ldrb	w8, [x1], #1
   10358:	cmp	w8, w0, uxtb
   1035c:	b.eq	10370 <argp_failure@@Base+0x12a0>  // b.none
   10360:	cmp	x2, x1
   10364:	b.ne	10354 <argp_failure@@Base+0x1284>  // b.any
   10368:	mov	w0, wzr
   1036c:	ret
   10370:	mov	w0, #0x1                   	// #1
   10374:	ret
   10378:	stp	x29, x30, [sp, #-64]!
   1037c:	stp	x24, x23, [sp, #16]
   10380:	stp	x22, x21, [sp, #32]
   10384:	stp	x20, x19, [sp, #48]
   10388:	ldr	x21, [x0]
   1038c:	ldr	w22, [x0, #8]
   10390:	mov	x19, x1
   10394:	mov	x29, sp
   10398:	b	103a8 <argp_failure@@Base+0x12d8>
   1039c:	add	x21, x21, #0x38
   103a0:	mov	w8, #0x1                   	// #1
   103a4:	tbz	w8, #0, 103fc <argp_failure@@Base+0x132c>
   103a8:	cbz	w22, 103f8 <argp_failure@@Base+0x1328>
   103ac:	ldr	w23, [x21, #8]
   103b0:	sub	w22, w22, #0x1
   103b4:	cbz	w23, 1039c <argp_failure@@Base+0x12cc>
   103b8:	ldr	x24, [x21]
   103bc:	b	103cc <argp_failure@@Base+0x12fc>
   103c0:	sub	w23, w23, #0x1
   103c4:	add	x24, x24, #0x30
   103c8:	cbz	w23, 1039c <argp_failure@@Base+0x12cc>
   103cc:	ldr	x0, [x24]
   103d0:	cbz	x0, 103c0 <argp_failure@@Base+0x12f0>
   103d4:	ldrb	w8, [x24, #24]
   103d8:	tbnz	w8, #1, 103c0 <argp_failure@@Base+0x12f0>
   103dc:	mov	x1, x19
   103e0:	bl	b120 <strcmp@plt>
   103e4:	cbnz	w0, 103c0 <argp_failure@@Base+0x12f0>
   103e8:	mov	w8, wzr
   103ec:	mov	x20, x21
   103f0:	tbnz	w8, #0, 103a8 <argp_failure@@Base+0x12d8>
   103f4:	b	103fc <argp_failure@@Base+0x132c>
   103f8:	mov	x20, xzr
   103fc:	mov	x0, x20
   10400:	ldp	x20, x19, [sp, #48]
   10404:	ldp	x22, x21, [sp, #32]
   10408:	ldp	x24, x23, [sp, #16]
   1040c:	ldp	x29, x30, [sp], #64
   10410:	ret
   10414:	stp	x29, x30, [sp, #-16]!
   10418:	mov	x29, sp
   1041c:	bl	10428 <argp_failure@@Base+0x1358>
   10420:	ldp	x29, x30, [sp], #16
   10424:	ret
   10428:	sub	sp, sp, #0x60
   1042c:	stp	x29, x30, [sp, #16]
   10430:	stp	x24, x23, [sp, #48]
   10434:	stp	x22, x21, [sp, #64]
   10438:	stp	x20, x19, [sp, #80]
   1043c:	mov	x21, x1
   10440:	mov	x22, x0
   10444:	ldr	x0, [x0, #32]
   10448:	ldr	x1, [x1, #32]
   1044c:	ldr	w20, [x22, #24]
   10450:	ldr	w19, [x21, #24]
   10454:	str	x25, [sp, #32]
   10458:	cmp	x0, x1
   1045c:	add	x29, sp, #0x10
   10460:	b.eq	10474 <argp_failure@@Base+0x13a4>  // b.none
   10464:	cbz	x0, 10528 <argp_failure@@Base+0x1458>
   10468:	cbz	x1, 10550 <argp_failure@@Base+0x1480>
   1046c:	bl	10614 <argp_failure@@Base+0x1544>
   10470:	b	10564 <argp_failure@@Base+0x1494>
   10474:	cmp	w20, w19
   10478:	b.ne	10540 <argp_failure@@Base+0x1470>  // b.any
   1047c:	mov	x0, x22
   10480:	bl	10684 <argp_failure@@Base+0x15b4>
   10484:	mov	w19, w0
   10488:	mov	x0, x21
   1048c:	bl	10684 <argp_failure@@Base+0x15b4>
   10490:	ldr	x8, [x22]
   10494:	ldr	x9, [x21]
   10498:	mov	w20, w0
   1049c:	mov	x0, x22
   104a0:	ldr	w25, [x8, #24]
   104a4:	ldr	w24, [x9, #24]
   104a8:	bl	106ac <argp_failure@@Base+0x15dc>
   104ac:	mov	x22, x0
   104b0:	str	x0, [x29, #24]
   104b4:	mov	x0, x21
   104b8:	bl	106ac <argp_failure@@Base+0x15dc>
   104bc:	mov	x21, x0
   104c0:	mov	w23, wzr
   104c4:	str	x0, [sp, #8]
   104c8:	tbz	w25, #3, 104e0 <argp_failure@@Base+0x1410>
   104cc:	cbz	x22, 104e0 <argp_failure@@Base+0x1410>
   104d0:	add	x0, x29, #0x18
   104d4:	bl	106e4 <argp_failure@@Base+0x1614>
   104d8:	cmp	w0, #0x0
   104dc:	cset	w23, ne  // ne = any
   104e0:	mov	w8, wzr
   104e4:	tbz	w24, #3, 104fc <argp_failure@@Base+0x142c>
   104e8:	cbz	x21, 104fc <argp_failure@@Base+0x142c>
   104ec:	add	x0, sp, #0x8
   104f0:	bl	106e4 <argp_failure@@Base+0x1614>
   104f4:	cmp	w0, #0x0
   104f8:	cset	w8, ne  // ne = any
   104fc:	subs	w0, w23, w8
   10500:	b.ne	10564 <argp_failure@@Base+0x1494>  // b.any
   10504:	ldr	x0, [x29, #24]
   10508:	ldr	x1, [sp, #8]
   1050c:	orr	w8, w20, w19
   10510:	tst	w8, #0xff
   10514:	b.ne	10580 <argp_failure@@Base+0x14b0>  // b.any
   10518:	cbz	x0, 10580 <argp_failure@@Base+0x14b0>
   1051c:	cbz	x1, 10580 <argp_failure@@Base+0x14b0>
   10520:	bl	ae80 <strcasecmp@plt>
   10524:	b	10564 <argp_failure@@Base+0x1494>
   10528:	mov	x0, x1
   1052c:	bl	10600 <argp_failure@@Base+0x1530>
   10530:	ldr	w1, [x0, #12]
   10534:	mov	w2, #0xffffffff            	// #-1
   10538:	mov	w0, w20
   1053c:	b	10560 <argp_failure@@Base+0x1490>
   10540:	mov	w0, w20
   10544:	mov	w1, w19
   10548:	mov	w2, wzr
   1054c:	b	10560 <argp_failure@@Base+0x1490>
   10550:	bl	10600 <argp_failure@@Base+0x1530>
   10554:	ldr	w0, [x0, #12]
   10558:	mov	w2, #0x1                   	// #1
   1055c:	mov	w1, w19
   10560:	bl	105d4 <argp_failure@@Base+0x1504>
   10564:	ldp	x20, x19, [sp, #80]
   10568:	ldp	x22, x21, [sp, #64]
   1056c:	ldp	x24, x23, [sp, #48]
   10570:	ldr	x25, [sp, #32]
   10574:	ldp	x29, x30, [sp, #16]
   10578:	add	sp, sp, #0x60
   1057c:	ret
   10580:	tst	w19, #0xff
   10584:	b.ne	10590 <argp_failure@@Base+0x14c0>  // b.any
   10588:	cbz	x0, 10590 <argp_failure@@Base+0x14c0>
   1058c:	ldrb	w19, [x0]
   10590:	tst	w20, #0xff
   10594:	b.ne	105a8 <argp_failure@@Base+0x14d8>  // b.any
   10598:	cbz	x1, 105a4 <argp_failure@@Base+0x14d4>
   1059c:	ldrb	w20, [x1]
   105a0:	b	105a8 <argp_failure@@Base+0x14d8>
   105a4:	mov	w20, wzr
   105a8:	bl	aae0 <__ctype_tolower_loc@plt>
   105ac:	ldr	x8, [x0]
   105b0:	and	x9, x19, #0xff
   105b4:	and	x10, x20, #0xff
   105b8:	ldr	w9, [x8, x9, lsl #2]
   105bc:	ldr	w8, [x8, x10, lsl #2]
   105c0:	and	w10, w20, #0xff
   105c4:	subs	w8, w9, w8
   105c8:	sub	w9, w10, w19, uxtb
   105cc:	csel	w0, w9, w8, eq  // eq = none
   105d0:	b	10564 <argp_failure@@Base+0x1494>
   105d4:	subs	w8, w0, w1
   105d8:	b.eq	105f0 <argp_failure@@Base+0x1520>  // b.none
   105dc:	tst	w1, w0
   105e0:	b.lt	105f8 <argp_failure@@Base+0x1528>  // b.tstop
   105e4:	orr	w9, w1, w0
   105e8:	tbz	w9, #31, 105f8 <argp_failure@@Base+0x1528>
   105ec:	sub	w2, w1, w0
   105f0:	mov	w0, w2
   105f4:	ret
   105f8:	mov	w0, w8
   105fc:	ret
   10600:	mov	x8, x0
   10604:	ldr	x0, [x0, #16]
   10608:	cbnz	x0, 10600 <argp_failure@@Base+0x1530>
   1060c:	mov	x0, x8
   10610:	ret
   10614:	stp	x29, x30, [sp, #-16]!
   10618:	ldr	w8, [x0, #32]
   1061c:	ldr	w9, [x1, #32]
   10620:	mov	x29, sp
   10624:	cmp	w8, w9
   10628:	b.le	10648 <argp_failure@@Base+0x1578>
   1062c:	ldr	w9, [x1, #32]
   10630:	ldr	x0, [x0, #16]
   10634:	ldr	w8, [x0, #32]
   10638:	cmp	w8, w9
   1063c:	b.gt	10630 <argp_failure@@Base+0x1560>
   10640:	b	10648 <argp_failure@@Base+0x1578>
   10644:	ldr	x1, [x1, #16]
   10648:	ldr	w9, [x1, #32]
   1064c:	cmp	w9, w8
   10650:	b.gt	10644 <argp_failure@@Base+0x1574>
   10654:	mov	x8, x1
   10658:	mov	x9, x0
   1065c:	ldr	x0, [x0, #16]
   10660:	ldr	x1, [x1, #16]
   10664:	cmp	x0, x1
   10668:	b.ne	10654 <argp_failure@@Base+0x1584>  // b.any
   1066c:	ldp	w10, w1, [x8, #8]
   10670:	ldp	w9, w0, [x9, #8]
   10674:	sub	w2, w10, w9
   10678:	bl	105d4 <argp_failure@@Base+0x1504>
   1067c:	ldp	x29, x30, [sp], #16
   10680:	ret
   10684:	stp	x29, x30, [sp, #-16]!
   10688:	ldr	x8, [x0, #40]
   1068c:	adrp	x1, 10000 <argp_failure@@Base+0xf30>
   10690:	add	x1, x1, #0x824
   10694:	mov	x3, xzr
   10698:	ldr	x2, [x8, #48]
   1069c:	mov	x29, sp
   106a0:	bl	10768 <argp_failure@@Base+0x1698>
   106a4:	ldp	x29, x30, [sp], #16
   106a8:	ret
   106ac:	ldr	w8, [x0, #8]
   106b0:	cbz	w8, 106dc <argp_failure@@Base+0x160c>
   106b4:	ldr	x9, [x0]
   106b8:	b	106c8 <argp_failure@@Base+0x15f8>
   106bc:	subs	w8, w8, #0x1
   106c0:	add	x9, x9, #0x30
   106c4:	b.eq	106dc <argp_failure@@Base+0x160c>  // b.none
   106c8:	ldr	x0, [x9]
   106cc:	cbz	x0, 106bc <argp_failure@@Base+0x15ec>
   106d0:	ldrb	w10, [x9, #24]
   106d4:	tbnz	w10, #1, 106bc <argp_failure@@Base+0x15ec>
   106d8:	ret
   106dc:	mov	x0, xzr
   106e0:	ret
   106e4:	stp	x29, x30, [sp, #-32]!
   106e8:	str	x19, [sp, #16]
   106ec:	mov	x29, sp
   106f0:	mov	x19, x0
   106f4:	bl	b140 <__ctype_b_loc@plt>
   106f8:	ldr	x9, [x19]
   106fc:	ldr	x10, [x0]
   10700:	ldrb	w8, [x9]
   10704:	ldrh	w10, [x10, x8, lsl #1]
   10708:	tbz	w10, #13, 10724 <argp_failure@@Base+0x1654>
   1070c:	add	x9, x9, #0x1
   10710:	str	x9, [x19]
   10714:	ldr	x10, [x0]
   10718:	ldrb	w8, [x9], #1
   1071c:	ldrh	w10, [x10, x8, lsl #1]
   10720:	tbnz	w10, #13, 10710 <argp_failure@@Base+0x1640>
   10724:	ldr	x9, [x19]
   10728:	cmp	w8, #0x2d
   1072c:	cset	w8, ne  // ne = any
   10730:	ldrb	w10, [x9]
   10734:	cbz	w10, 10758 <argp_failure@@Base+0x1688>
   10738:	add	x9, x9, #0x1
   1073c:	ldr	x11, [x0]
   10740:	and	x10, x10, #0xff
   10744:	ldrh	w10, [x11, x10, lsl #1]
   10748:	tbnz	w10, #3, 10758 <argp_failure@@Base+0x1688>
   1074c:	str	x9, [x19]
   10750:	ldrb	w10, [x9], #1
   10754:	cbnz	w10, 1073c <argp_failure@@Base+0x166c>
   10758:	ldr	x19, [sp, #16]
   1075c:	mov	w0, w8
   10760:	ldp	x29, x30, [sp], #32
   10764:	ret
   10768:	stp	x29, x30, [sp, #-80]!
   1076c:	stp	x26, x25, [sp, #16]
   10770:	stp	x24, x23, [sp, #32]
   10774:	stp	x22, x21, [sp, #48]
   10778:	stp	x20, x19, [sp, #64]
   1077c:	ldr	w8, [x0, #8]
   10780:	mov	x29, sp
   10784:	cbz	w8, 10804 <argp_failure@@Base+0x1734>
   10788:	ldr	x22, [x0]
   1078c:	ldr	x25, [x0, #16]
   10790:	mov	x19, x3
   10794:	mov	x20, x2
   10798:	mov	x21, x1
   1079c:	mov	w23, wzr
   107a0:	sub	w26, w8, #0x1
   107a4:	mov	x24, x22
   107a8:	mov	x0, x24
   107ac:	bl	b570 <_option_is_short@plt>
   107b0:	cbz	w0, 107f0 <argp_failure@@Base+0x1720>
   107b4:	ldrb	w8, [x25]
   107b8:	ldr	w9, [x24, #8]
   107bc:	cmp	w9, w8
   107c0:	b.ne	107f0 <argp_failure@@Base+0x1720>  // b.any
   107c4:	ldr	w8, [x24, #24]
   107c8:	tst	w8, #0x4
   107cc:	csel	x22, x24, x22, eq  // eq = none
   107d0:	tbnz	w8, #1, 107ec <argp_failure@@Base+0x171c>
   107d4:	mov	x0, x24
   107d8:	mov	x1, x22
   107dc:	mov	x2, x20
   107e0:	mov	x3, x19
   107e4:	blr	x21
   107e8:	mov	w23, w0
   107ec:	add	x25, x25, #0x1
   107f0:	subs	w26, w26, #0x1
   107f4:	b.cc	10808 <argp_failure@@Base+0x1738>  // b.lo, b.ul, b.last
   107f8:	add	x24, x24, #0x30
   107fc:	cbz	w23, 107a8 <argp_failure@@Base+0x16d8>
   10800:	b	10808 <argp_failure@@Base+0x1738>
   10804:	mov	w23, wzr
   10808:	mov	w0, w23
   1080c:	ldp	x20, x19, [sp, #64]
   10810:	ldp	x22, x21, [sp, #48]
   10814:	ldp	x24, x23, [sp, #32]
   10818:	ldp	x26, x25, [sp, #16]
   1081c:	ldp	x29, x30, [sp], #80
   10820:	ret
   10824:	stp	x29, x30, [sp, #-32]!
   10828:	str	x19, [sp, #16]
   1082c:	mov	x29, sp
   10830:	mov	x19, x0
   10834:	bl	b570 <_option_is_short@plt>
   10838:	cbz	w0, 10840 <argp_failure@@Base+0x1770>
   1083c:	ldr	w0, [x19, #8]
   10840:	ldr	x19, [sp, #16]
   10844:	ldp	x29, x30, [sp], #32
   10848:	ret
   1084c:	ldr	x8, [x0, #16]
   10850:	cbz	x8, 1085c <argp_failure@@Base+0x178c>
   10854:	mov	w0, wzr
   10858:	ret
   1085c:	ldr	x8, [x1, #16]
   10860:	cbnz	x8, 10854 <argp_failure@@Base+0x1784>
   10864:	ldr	w8, [x0, #24]
   10868:	ldr	w9, [x1, #24]
   1086c:	orr	w8, w9, w8
   10870:	tbnz	w8, #4, 10854 <argp_failure@@Base+0x1784>
   10874:	ldr	x8, [x3]
   10878:	ldr	w9, [x0, #8]
   1087c:	add	x10, x8, #0x1
   10880:	str	x10, [x3]
   10884:	strb	w9, [x8]
   10888:	mov	w0, wzr
   1088c:	ret
   10890:	stp	x29, x30, [sp, #-48]!
   10894:	stp	x22, x21, [sp, #16]
   10898:	stp	x20, x19, [sp, #32]
   1089c:	mov	x9, x1
   108a0:	ldr	w10, [x0, #24]
   108a4:	ldr	w11, [x9, #24]
   108a8:	ldr	x1, [x0, #16]
   108ac:	mov	x19, x3
   108b0:	mov	x8, x2
   108b4:	mov	x20, x0
   108b8:	orr	w22, w11, w10
   108bc:	mov	x29, sp
   108c0:	cbnz	x1, 108c8 <argp_failure@@Base+0x17f8>
   108c4:	ldr	x1, [x9, #16]
   108c8:	tbnz	w22, #4, 1091c <argp_failure@@Base+0x184c>
   108cc:	cbz	x1, 1091c <argp_failure@@Base+0x184c>
   108d0:	mov	w2, #0x5                   	// #5
   108d4:	mov	x0, x8
   108d8:	bl	b580 <dcgettext@plt>
   108dc:	mov	x21, x0
   108e0:	tbnz	w22, #0, 10904 <argp_failure@@Base+0x1834>
   108e4:	mov	x0, x21
   108e8:	bl	a890 <strlen@plt>
   108ec:	add	x1, x0, #0x6
   108f0:	mov	x0, x19
   108f4:	bl	109d8 <argp_failure@@Base+0x1908>
   108f8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   108fc:	add	x1, x1, #0xa24
   10900:	b	1090c <argp_failure@@Base+0x183c>
   10904:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10908:	add	x1, x1, #0xa19
   1090c:	ldr	w2, [x20, #8]
   10910:	mov	x0, x19
   10914:	mov	x3, x21
   10918:	bl	b010 <argp_fmtstream_printf@plt>
   1091c:	ldp	x20, x19, [sp, #32]
   10920:	ldp	x22, x21, [sp, #16]
   10924:	mov	w0, wzr
   10928:	ldp	x29, x30, [sp], #48
   1092c:	ret
   10930:	stp	x29, x30, [sp, #-48]!
   10934:	stp	x20, x19, [sp, #32]
   10938:	mov	x9, x1
   1093c:	ldr	w10, [x0, #24]
   10940:	ldr	w11, [x9, #24]
   10944:	ldr	x1, [x0, #16]
   10948:	str	x21, [sp, #16]
   1094c:	mov	x19, x3
   10950:	mov	x8, x2
   10954:	mov	x20, x0
   10958:	orr	w21, w11, w10
   1095c:	mov	x29, sp
   10960:	cbz	x1, 1096c <argp_failure@@Base+0x189c>
   10964:	tbz	w21, #4, 10974 <argp_failure@@Base+0x18a4>
   10968:	b	109c4 <argp_failure@@Base+0x18f4>
   1096c:	ldr	x1, [x9, #16]
   10970:	tbnz	w21, #4, 109c4 <argp_failure@@Base+0x18f4>
   10974:	cbz	x1, 1099c <argp_failure@@Base+0x18cc>
   10978:	mov	w2, #0x5                   	// #5
   1097c:	mov	x0, x8
   10980:	bl	b580 <dcgettext@plt>
   10984:	ldr	x2, [x20]
   10988:	mov	x3, x0
   1098c:	tbnz	w21, #0, 109b4 <argp_failure@@Base+0x18e4>
   10990:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10994:	add	x1, x1, #0xa3a
   10998:	b	109bc <argp_failure@@Base+0x18ec>
   1099c:	ldr	x2, [x20]
   109a0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   109a4:	add	x1, x1, #0xa45
   109a8:	mov	x0, x19
   109ac:	bl	b010 <argp_fmtstream_printf@plt>
   109b0:	b	109c4 <argp_failure@@Base+0x18f4>
   109b4:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   109b8:	add	x1, x1, #0xa2d
   109bc:	mov	x0, x19
   109c0:	bl	b010 <argp_fmtstream_printf@plt>
   109c4:	ldp	x20, x19, [sp, #32]
   109c8:	ldr	x21, [sp, #16]
   109cc:	mov	w0, wzr
   109d0:	ldp	x29, x30, [sp], #48
   109d4:	ret
   109d8:	stp	x29, x30, [sp, #-32]!
   109dc:	stp	x20, x19, [sp, #16]
   109e0:	mov	x29, sp
   109e4:	mov	x19, x1
   109e8:	mov	x20, x0
   109ec:	bl	afe0 <argp_fmtstream_point@plt>
   109f0:	ldr	x8, [x20, #16]
   109f4:	add	x9, x0, x19
   109f8:	mov	w10, #0xa                   	// #10
   109fc:	mov	x0, x20
   10a00:	cmp	x9, x8
   10a04:	mov	w8, #0x20                  	// #32
   10a08:	csel	w1, w8, w10, cc  // cc = lo, ul, last
   10a0c:	bl	aad0 <argp_fmtstream_putc@plt>
   10a10:	ldp	x20, x19, [sp, #16]
   10a14:	ldp	x29, x30, [sp], #32
   10a18:	ret
   10a1c:	stp	x29, x30, [sp, #-48]!
   10a20:	stp	x20, x19, [sp, #32]
   10a24:	mov	x19, x0
   10a28:	str	x21, [sp, #16]
   10a2c:	mov	x29, sp
   10a30:	cbz	x2, 10a68 <argp_failure@@Base+0x1998>
   10a34:	ldr	x8, [x2, #40]
   10a38:	mov	x21, x2
   10a3c:	cbz	x8, 10a68 <argp_failure@@Base+0x1998>
   10a40:	mov	w20, w1
   10a44:	mov	x0, x21
   10a48:	mov	x1, x3
   10a4c:	bl	b410 <_argp_input@plt>
   10a50:	ldr	x8, [x21, #40]
   10a54:	mov	x2, x0
   10a58:	mov	w0, w20
   10a5c:	mov	x1, x19
   10a60:	blr	x8
   10a64:	mov	x19, x0
   10a68:	mov	x0, x19
   10a6c:	ldp	x20, x19, [sp, #32]
   10a70:	ldr	x21, [sp, #16]
   10a74:	ldp	x29, x30, [sp], #48
   10a78:	ret
   10a7c:	sub	sp, sp, #0xa0
   10a80:	stp	x29, x30, [sp, #64]
   10a84:	stp	x28, x27, [sp, #80]
   10a88:	stp	x26, x25, [sp, #96]
   10a8c:	stp	x24, x23, [sp, #112]
   10a90:	stp	x22, x21, [sp, #128]
   10a94:	stp	x20, x19, [sp, #144]
   10a98:	ldr	x23, [x0]
   10a9c:	ldr	x28, [x0, #16]
   10aa0:	mov	x21, x0
   10aa4:	mov	x24, x1
   10aa8:	mov	x0, x2
   10aac:	mov	x1, xzr
   10ab0:	add	x29, sp, #0x40
   10ab4:	mov	x20, x3
   10ab8:	mov	x19, x2
   10abc:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   10ac0:	ldr	x11, [x19, #24]
   10ac4:	mov	w8, #0x1                   	// #1
   10ac8:	stp	x21, x19, [sp, #24]
   10acc:	str	x20, [sp, #40]
   10ad0:	stp	x11, x20, [sp, #8]
   10ad4:	str	w8, [sp, #48]
   10ad8:	str	x24, [sp, #56]
   10adc:	ldrb	w8, [x23, #24]
   10ae0:	str	x0, [sp]
   10ae4:	tbnz	w8, #3, 10b1c <argp_failure@@Base+0x1a4c>
   10ae8:	ldr	w8, [x21, #8]
   10aec:	cbz	w8, 10b1c <argp_failure@@Base+0x1a4c>
   10af0:	mov	x9, x23
   10af4:	b	10b04 <argp_failure@@Base+0x1a34>
   10af8:	subs	w8, w8, #0x1
   10afc:	add	x9, x9, #0x30
   10b00:	b.eq	10b1c <argp_failure@@Base+0x1a4c>  // b.none
   10b04:	ldr	x10, [x9]
   10b08:	cbz	x10, 10af8 <argp_failure@@Base+0x1a28>
   10b0c:	ldrb	w10, [x9, #24]
   10b10:	tbnz	w10, #1, 10af8 <argp_failure@@Base+0x1a28>
   10b14:	mov	w22, #0x1                   	// #1
   10b18:	b	10b20 <argp_failure@@Base+0x1a50>
   10b1c:	mov	w22, wzr
   10b20:	adrp	x8, 40000 <base_len@@Base+0x2c984>
   10b24:	ldrsw	x1, [x8, #2152]
   10b28:	mov	x0, x19
   10b2c:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10b30:	ldr	w20, [x21, #8]
   10b34:	cbz	w20, 10bf8 <argp_failure@@Base+0x1b28>
   10b38:	adrp	x25, 40000 <base_len@@Base+0x2c984>
   10b3c:	adrp	x26, 2b000 <vasnprintf@@Base+0xec4>
   10b40:	add	x25, x25, #0x860
   10b44:	add	x26, x26, #0xac1
   10b48:	mov	x27, x23
   10b4c:	b	10b7c <argp_failure@@Base+0x1aac>
   10b50:	mov	x3, xzr
   10b54:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10b58:	mov	x0, x23
   10b5c:	add	x1, x1, #0x804
   10b60:	mov	x2, x26
   10b64:	mov	x4, x19
   10b68:	bl	10f74 <argp_failure@@Base+0x1ea4>
   10b6c:	add	x28, x28, #0x1
   10b70:	subs	w20, w20, #0x1
   10b74:	add	x27, x27, #0x30
   10b78:	b.eq	10bf8 <argp_failure@@Base+0x1b28>  // b.none
   10b7c:	mov	x0, x27
   10b80:	bl	b570 <_option_is_short@plt>
   10b84:	cbz	w0, 10b70 <argp_failure@@Base+0x1aa0>
   10b88:	ldr	w8, [x27, #8]
   10b8c:	ldrb	w9, [x28]
   10b90:	cmp	w8, w9
   10b94:	b.ne	10b70 <argp_failure@@Base+0x1aa0>  // b.any
   10b98:	ldrb	w8, [x27, #24]
   10b9c:	tbnz	w8, #1, 10b6c <argp_failure@@Base+0x1a9c>
   10ba0:	ldr	w0, [x25, #8]
   10ba4:	add	x1, sp, #0x18
   10ba8:	bl	10e8c <argp_failure@@Base+0x1dbc>
   10bac:	mov	w1, #0x2d                  	// #45
   10bb0:	mov	x0, x19
   10bb4:	bl	aad0 <argp_fmtstream_putc@plt>
   10bb8:	ldrb	w1, [x28]
   10bbc:	mov	x0, x19
   10bc0:	bl	aad0 <argp_fmtstream_putc@plt>
   10bc4:	cbz	w22, 10be8 <argp_failure@@Base+0x1b18>
   10bc8:	ldr	w8, [x25]
   10bcc:	cbnz	w8, 10be8 <argp_failure@@Base+0x1b18>
   10bd0:	ldr	x8, [x23, #16]
   10bd4:	cbz	x8, 10b6c <argp_failure@@Base+0x1a9c>
   10bd8:	ldr	x8, [sp, #16]
   10bdc:	mov	w9, #0x1                   	// #1
   10be0:	str	w9, [x8, #12]
   10be4:	b	10b6c <argp_failure@@Base+0x1a9c>
   10be8:	cbz	x24, 10b50 <argp_failure@@Base+0x1a80>
   10bec:	ldr	x8, [x21, #40]
   10bf0:	ldr	x3, [x8, #48]
   10bf4:	b	10b54 <argp_failure@@Base+0x1a84>
   10bf8:	ldrb	w8, [x23, #24]
   10bfc:	tbnz	w8, #3, 10c98 <argp_failure@@Base+0x1bc8>
   10c00:	adrp	x20, 40000 <base_len@@Base+0x2c984>
   10c04:	ldrsw	x1, [x20, #2156]
   10c08:	mov	x0, x19
   10c0c:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10c10:	ldr	w22, [x21, #8]
   10c14:	cbz	w22, 10d0c <argp_failure@@Base+0x1c3c>
   10c18:	adrp	x25, 2b000 <vasnprintf@@Base+0xec4>
   10c1c:	adrp	x26, 2b000 <vasnprintf@@Base+0xec4>
   10c20:	adrp	x27, 2b000 <vasnprintf@@Base+0xec4>
   10c24:	add	x25, x25, #0xac6
   10c28:	add	x26, x26, #0x71b
   10c2c:	add	x27, x27, #0xacb
   10c30:	mov	x28, x23
   10c34:	b	10c60 <argp_failure@@Base+0x1b90>
   10c38:	ldr	x8, [x21, #40]
   10c3c:	ldr	x3, [x8, #48]
   10c40:	mov	x0, x23
   10c44:	mov	x1, x26
   10c48:	mov	x2, x27
   10c4c:	mov	x4, x19
   10c50:	bl	10f74 <argp_failure@@Base+0x1ea4>
   10c54:	subs	w22, w22, #0x1
   10c58:	add	x28, x28, #0x30
   10c5c:	b.eq	10d0c <argp_failure@@Base+0x1c3c>  // b.none
   10c60:	ldr	x8, [x28]
   10c64:	cbz	x8, 10c54 <argp_failure@@Base+0x1b84>
   10c68:	ldrb	w8, [x28, #24]
   10c6c:	tbnz	w8, #1, 10c54 <argp_failure@@Base+0x1b84>
   10c70:	ldr	w0, [x20, #2156]
   10c74:	add	x1, sp, #0x18
   10c78:	bl	10e8c <argp_failure@@Base+0x1dbc>
   10c7c:	ldr	x2, [x28]
   10c80:	mov	x0, x19
   10c84:	mov	x1, x25
   10c88:	bl	b010 <argp_fmtstream_printf@plt>
   10c8c:	cbnz	x24, 10c38 <argp_failure@@Base+0x1b68>
   10c90:	mov	x3, xzr
   10c94:	b	10c40 <argp_failure@@Base+0x1b70>
   10c98:	adrp	x20, 40000 <base_len@@Base+0x2c984>
   10c9c:	ldrsw	x1, [x20, #2160]
   10ca0:	mov	x0, x19
   10ca4:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10ca8:	ldr	w22, [x21, #8]
   10cac:	cbz	w22, 10d0c <argp_failure@@Base+0x1c3c>
   10cb0:	mov	x25, x23
   10cb4:	b	10ce4 <argp_failure@@Base+0x1c14>
   10cb8:	ldr	x8, [x21, #40]
   10cbc:	ldr	x0, [x8, #48]
   10cc0:	ldr	x1, [x25]
   10cc4:	mov	w2, #0x5                   	// #5
   10cc8:	bl	b580 <dcgettext@plt>
   10ccc:	mov	x1, x0
   10cd0:	mov	x0, x19
   10cd4:	bl	aca0 <argp_fmtstream_puts@plt>
   10cd8:	subs	w22, w22, #0x1
   10cdc:	add	x25, x25, #0x30
   10ce0:	b.eq	10d0c <argp_failure@@Base+0x1c3c>  // b.none
   10ce4:	ldr	x8, [x25]
   10ce8:	cbz	x8, 10cd8 <argp_failure@@Base+0x1c08>
   10cec:	ldrb	w8, [x25, #24]
   10cf0:	tbnz	w8, #1, 10cd8 <argp_failure@@Base+0x1c08>
   10cf4:	ldr	w0, [x20, #2160]
   10cf8:	add	x1, sp, #0x18
   10cfc:	bl	10e8c <argp_failure@@Base+0x1dbc>
   10d00:	cbnz	x24, 10cb8 <argp_failure@@Base+0x1be8>
   10d04:	mov	x0, xzr
   10d08:	b	10cc0 <argp_failure@@Base+0x1bf0>
   10d0c:	mov	x0, x19
   10d10:	mov	x1, xzr
   10d14:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   10d18:	ldr	w8, [sp, #48]
   10d1c:	cbz	w8, 10d4c <argp_failure@@Base+0x1c7c>
   10d20:	mov	x0, x23
   10d24:	bl	b570 <_option_is_short@plt>
   10d28:	ldp	x20, x22, [sp]
   10d2c:	cbnz	w0, 10e54 <argp_failure@@Base+0x1d84>
   10d30:	ldr	x8, [x23]
   10d34:	cbnz	x8, 10e54 <argp_failure@@Base+0x1d84>
   10d38:	ldr	x0, [x23, #32]
   10d3c:	ldr	x1, [x21, #40]
   10d40:	add	x2, sp, #0x18
   10d44:	bl	10fd0 <argp_failure@@Base+0x1f00>
   10d48:	b	10e4c <argp_failure@@Base+0x1d7c>
   10d4c:	ldr	x1, [x23, #32]
   10d50:	cbz	x1, 10d68 <argp_failure@@Base+0x1c98>
   10d54:	ldr	x22, [sp, #8]
   10d58:	cbz	x24, 10d74 <argp_failure@@Base+0x1ca4>
   10d5c:	ldr	x8, [x21, #40]
   10d60:	ldr	x0, [x8, #48]
   10d64:	b	10d78 <argp_failure@@Base+0x1ca8>
   10d68:	ldr	x22, [sp, #8]
   10d6c:	mov	x25, xzr
   10d70:	b	10d84 <argp_failure@@Base+0x1cb4>
   10d74:	mov	x0, xzr
   10d78:	mov	w2, #0x5                   	// #5
   10d7c:	bl	b580 <dcgettext@plt>
   10d80:	mov	x25, x0
   10d84:	ldr	w1, [x23, #8]
   10d88:	ldr	x2, [x21, #40]
   10d8c:	mov	x0, x25
   10d90:	mov	x3, x24
   10d94:	bl	10a1c <argp_failure@@Base+0x194c>
   10d98:	cbz	x0, 10e30 <argp_failure@@Base+0x1d60>
   10d9c:	ldrb	w8, [x0]
   10da0:	mov	x23, x0
   10da4:	cbz	w8, 10e20 <argp_failure@@Base+0x1d50>
   10da8:	mov	x0, x19
   10dac:	bl	afe0 <argp_fmtstream_point@plt>
   10db0:	adrp	x20, 40000 <base_len@@Base+0x2c984>
   10db4:	ldrsw	x1, [x20, #2164]
   10db8:	mov	x24, x0
   10dbc:	mov	x0, x19
   10dc0:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   10dc4:	ldrsw	x1, [x20, #2164]
   10dc8:	mov	x0, x19
   10dcc:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10dd0:	ldr	w1, [x20, #2164]
   10dd4:	add	w8, w1, #0x3
   10dd8:	cmp	w8, w24
   10ddc:	b.cs	10df0 <argp_failure@@Base+0x1d20>  // b.hs, b.nlast
   10de0:	mov	w1, #0xa                   	// #10
   10de4:	mov	x0, x19
   10de8:	bl	aad0 <argp_fmtstream_putc@plt>
   10dec:	b	10e14 <argp_failure@@Base+0x1d44>
   10df0:	cmp	w1, w24
   10df4:	b.ls	10e04 <argp_failure@@Base+0x1d34>  // b.plast
   10df8:	mov	x0, x19
   10dfc:	bl	110c0 <argp_failure@@Base+0x1ff0>
   10e00:	b	10e14 <argp_failure@@Base+0x1d44>
   10e04:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10e08:	add	x1, x1, #0xad1
   10e0c:	mov	x0, x19
   10e10:	bl	aca0 <argp_fmtstream_puts@plt>
   10e14:	mov	x0, x19
   10e18:	mov	x1, x23
   10e1c:	bl	aca0 <argp_fmtstream_puts@plt>
   10e20:	cmp	x23, x25
   10e24:	b.eq	10e30 <argp_failure@@Base+0x1d60>  // b.none
   10e28:	mov	x0, x23
   10e2c:	bl	b1d0 <free@plt>
   10e30:	mov	x0, x19
   10e34:	mov	x1, xzr
   10e38:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   10e3c:	mov	w1, #0xa                   	// #10
   10e40:	mov	x0, x19
   10e44:	bl	aad0 <argp_fmtstream_putc@plt>
   10e48:	ldr	x20, [sp]
   10e4c:	ldr	x8, [sp, #16]
   10e50:	str	x21, [x8]
   10e54:	sxtw	x1, w20
   10e58:	mov	x0, x19
   10e5c:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   10e60:	sxtw	x1, w22
   10e64:	mov	x0, x19
   10e68:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10e6c:	ldp	x20, x19, [sp, #144]
   10e70:	ldp	x22, x21, [sp, #128]
   10e74:	ldp	x24, x23, [sp, #112]
   10e78:	ldp	x26, x25, [sp, #96]
   10e7c:	ldp	x28, x27, [sp, #80]
   10e80:	ldp	x29, x30, [sp, #64]
   10e84:	add	sp, sp, #0xa0
   10e88:	ret
   10e8c:	stp	x29, x30, [sp, #-64]!
   10e90:	stp	x22, x21, [sp, #32]
   10e94:	stp	x20, x19, [sp, #48]
   10e98:	ldr	w8, [x1, #24]
   10e9c:	mov	x20, x1
   10ea0:	mov	w19, w0
   10ea4:	str	x23, [sp, #16]
   10ea8:	mov	x29, sp
   10eac:	cbz	w8, 10f44 <argp_failure@@Base+0x1e74>
   10eb0:	ldr	x9, [x20, #16]
   10eb4:	ldr	x8, [x20]
   10eb8:	ldr	x23, [x9]
   10ebc:	ldr	x21, [x8, #32]
   10ec0:	cbz	x23, 10ee8 <argp_failure@@Base+0x1e18>
   10ec4:	ldr	w9, [x9, #8]
   10ec8:	cbz	w9, 10ee8 <argp_failure@@Base+0x1e18>
   10ecc:	ldr	w8, [x8, #24]
   10ed0:	ldr	w9, [x23, #24]
   10ed4:	cmp	w8, w9
   10ed8:	b.eq	10ee8 <argp_failure@@Base+0x1e18>  // b.none
   10edc:	ldr	x0, [x20, #8]
   10ee0:	mov	w1, #0xa                   	// #10
   10ee4:	bl	aad0 <argp_fmtstream_putc@plt>
   10ee8:	cbz	x21, 10f3c <argp_failure@@Base+0x1e6c>
   10eec:	ldr	x22, [x21]
   10ef0:	cbz	x22, 10f3c <argp_failure@@Base+0x1e6c>
   10ef4:	ldrb	w8, [x22]
   10ef8:	cbz	w8, 10f3c <argp_failure@@Base+0x1e6c>
   10efc:	cbz	x23, 10f18 <argp_failure@@Base+0x1e48>
   10f00:	ldr	x0, [x23, #32]
   10f04:	cmp	x0, x21
   10f08:	b.eq	10f3c <argp_failure@@Base+0x1e6c>  // b.none
   10f0c:	mov	x1, x21
   10f10:	bl	1110c <argp_failure@@Base+0x203c>
   10f14:	cbnz	w0, 10f3c <argp_failure@@Base+0x1e6c>
   10f18:	ldr	x8, [x20, #8]
   10f1c:	ldr	x1, [x21, #24]
   10f20:	mov	x0, x22
   10f24:	mov	x2, x20
   10f28:	ldrsw	x23, [x8, #24]
   10f2c:	bl	10fd0 <argp_failure@@Base+0x1f00>
   10f30:	ldr	x0, [x20, #8]
   10f34:	mov	x1, x23
   10f38:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   10f3c:	str	wzr, [x20, #24]
   10f40:	b	10f54 <argp_failure@@Base+0x1e84>
   10f44:	ldr	x0, [x20, #8]
   10f48:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   10f4c:	add	x1, x1, #0xad5
   10f50:	bl	aca0 <argp_fmtstream_puts@plt>
   10f54:	ldr	x0, [x20, #8]
   10f58:	mov	w1, w19
   10f5c:	bl	110c0 <argp_failure@@Base+0x1ff0>
   10f60:	ldp	x20, x19, [sp, #48]
   10f64:	ldp	x22, x21, [sp, #32]
   10f68:	ldr	x23, [sp, #16]
   10f6c:	ldp	x29, x30, [sp], #64
   10f70:	ret
   10f74:	stp	x29, x30, [sp, #-48]!
   10f78:	stp	x22, x21, [sp, #16]
   10f7c:	stp	x20, x19, [sp, #32]
   10f80:	ldr	x8, [x0, #16]
   10f84:	mov	x29, sp
   10f88:	cbz	x8, 10fc0 <argp_failure@@Base+0x1ef0>
   10f8c:	ldr	w22, [x0, #24]
   10f90:	mov	x20, x2
   10f94:	mov	x21, x1
   10f98:	mov	w2, #0x5                   	// #5
   10f9c:	mov	x0, x3
   10fa0:	mov	x1, x8
   10fa4:	mov	x19, x4
   10fa8:	bl	b580 <dcgettext@plt>
   10fac:	tst	w22, #0x1
   10fb0:	mov	x2, x0
   10fb4:	csel	x1, x21, x20, eq  // eq = none
   10fb8:	mov	x0, x19
   10fbc:	bl	b010 <argp_fmtstream_printf@plt>
   10fc0:	ldp	x20, x19, [sp, #32]
   10fc4:	ldp	x22, x21, [sp, #16]
   10fc8:	ldp	x29, x30, [sp], #48
   10fcc:	ret
   10fd0:	stp	x29, x30, [sp, #-48]!
   10fd4:	stp	x22, x21, [sp, #16]
   10fd8:	stp	x20, x19, [sp, #32]
   10fdc:	mov	x19, x2
   10fe0:	mov	x21, x1
   10fe4:	mov	x29, sp
   10fe8:	cbz	x0, 11004 <argp_failure@@Base+0x1f34>
   10fec:	mov	x1, x0
   10ff0:	ldr	x0, [x21, #48]
   10ff4:	mov	w2, #0x5                   	// #5
   10ff8:	bl	b580 <dcgettext@plt>
   10ffc:	mov	x20, x0
   11000:	b	11008 <argp_failure@@Base+0x1f38>
   11004:	mov	x20, xzr
   11008:	ldr	x3, [x19, #32]
   1100c:	mov	w1, #0x3                   	// #3
   11010:	movk	w1, #0x200, lsl #16
   11014:	mov	x0, x20
   11018:	mov	x2, x21
   1101c:	bl	10a1c <argp_failure@@Base+0x194c>
   11020:	mov	x21, x0
   11024:	cbz	x0, 110a0 <argp_failure@@Base+0x1fd0>
   11028:	ldrb	w8, [x21]
   1102c:	cbz	w8, 11094 <argp_failure@@Base+0x1fc4>
   11030:	ldr	x8, [x19, #16]
   11034:	ldr	x8, [x8]
   11038:	cbz	x8, 11048 <argp_failure@@Base+0x1f78>
   1103c:	ldr	x0, [x19, #8]
   11040:	mov	w1, #0xa                   	// #10
   11044:	bl	aad0 <argp_fmtstream_putc@plt>
   11048:	adrp	x22, 40000 <base_len@@Base+0x2c984>
   1104c:	ldr	x0, [x19, #8]
   11050:	ldr	w1, [x22, #2168]
   11054:	bl	110c0 <argp_failure@@Base+0x1ff0>
   11058:	ldr	x0, [x19, #8]
   1105c:	ldrsw	x1, [x22, #2168]
   11060:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   11064:	ldr	x0, [x19, #8]
   11068:	ldrsw	x1, [x22, #2168]
   1106c:	bl	b790 <argp_fmtstream_set_wmargin@plt>
   11070:	ldr	x0, [x19, #8]
   11074:	mov	x1, x21
   11078:	bl	aca0 <argp_fmtstream_puts@plt>
   1107c:	ldr	x0, [x19, #8]
   11080:	mov	x1, xzr
   11084:	bl	aab0 <argp_fmtstream_set_lmargin@plt>
   11088:	ldr	x0, [x19, #8]
   1108c:	mov	w1, #0xa                   	// #10
   11090:	bl	aad0 <argp_fmtstream_putc@plt>
   11094:	ldr	x8, [x19, #16]
   11098:	mov	w9, #0x1                   	// #1
   1109c:	str	w9, [x8, #8]
   110a0:	cmp	x21, x20
   110a4:	b.eq	110b0 <argp_failure@@Base+0x1fe0>  // b.none
   110a8:	mov	x0, x21
   110ac:	bl	b1d0 <free@plt>
   110b0:	ldp	x20, x19, [sp, #32]
   110b4:	ldp	x22, x21, [sp, #16]
   110b8:	ldp	x29, x30, [sp], #48
   110bc:	ret
   110c0:	stp	x29, x30, [sp, #-32]!
   110c4:	stp	x20, x19, [sp, #16]
   110c8:	mov	x29, sp
   110cc:	mov	w20, w1
   110d0:	mov	x19, x0
   110d4:	bl	afe0 <argp_fmtstream_point@plt>
   110d8:	sub	w8, w20, w0
   110dc:	cmp	w8, #0x1
   110e0:	b.lt	11100 <argp_failure@@Base+0x2030>  // b.tstop
   110e4:	add	w20, w8, #0x1
   110e8:	mov	w1, #0x20                  	// #32
   110ec:	mov	x0, x19
   110f0:	bl	aad0 <argp_fmtstream_putc@plt>
   110f4:	sub	w20, w20, #0x1
   110f8:	cmp	w20, #0x1
   110fc:	b.gt	110e8 <argp_failure@@Base+0x2018>
   11100:	ldp	x20, x19, [sp, #16]
   11104:	ldp	x29, x30, [sp], #32
   11108:	ret
   1110c:	cmp	x0, x1
   11110:	b.eq	11128 <argp_failure@@Base+0x2058>  // b.none
   11114:	cbz	x0, 11128 <argp_failure@@Base+0x2058>
   11118:	ldr	x0, [x0, #16]
   1111c:	cmp	x0, x1
   11120:	b.eq	11128 <argp_failure@@Base+0x2058>  // b.none
   11124:	cbnz	x0, 11118 <argp_failure@@Base+0x2048>
   11128:	cmp	x0, x1
   1112c:	cset	w0, eq  // eq = none
   11130:	ret

0000000000011134 <argp_parse@@Base>:
   11134:	stp	x29, x30, [sp, #-80]!
   11138:	stp	x28, x25, [sp, #16]
   1113c:	stp	x24, x23, [sp, #32]
   11140:	stp	x22, x21, [sp, #48]
   11144:	stp	x20, x19, [sp, #64]
   11148:	mov	x29, sp
   1114c:	sub	sp, sp, #0xe0
   11150:	mov	x20, x5
   11154:	mov	x19, x4
   11158:	mov	w21, w3
   1115c:	mov	x22, x2
   11160:	mov	w23, w1
   11164:	mov	x24, x0
   11168:	stur	wzr, [x29, #-220]
   1116c:	tbnz	w3, #0, 11198 <argp_parse@@Base+0x64>
   11170:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   11174:	ldr	x8, [x8, #3768]
   11178:	ldr	x9, [x8]
   1117c:	cbnz	x9, 11188 <argp_parse@@Base+0x54>
   11180:	ldr	x9, [x22]
   11184:	str	x9, [x8]
   11188:	adrp	x25, 3f000 <vasnprintf@@Base+0x14ec4>
   1118c:	ldr	x25, [x25, #4008]
   11190:	ldr	x8, [x25]
   11194:	cbz	x8, 11290 <argp_parse@@Base+0x15c>
   11198:	tbnz	w21, #4, 11230 <argp_parse@@Base+0xfc>
   1119c:	mov	x10, sp
   111a0:	sub	x8, x10, #0x80
   111a4:	mov	sp, x8
   111a8:	mov	x11, sp
   111ac:	sub	x9, x11, #0x40
   111b0:	mov	sp, x9
   111b4:	movi	v0.2d, #0x0
   111b8:	stur	xzr, [x11, #-16]
   111bc:	stp	q0, q0, [x11, #-48]
   111c0:	stur	q0, [x11, #-64]
   111c4:	stur	x8, [x11, #-32]
   111c8:	stp	q0, q0, [x10, #-32]
   111cc:	stp	q0, q0, [x10, #-64]
   111d0:	stp	q0, q0, [x10, #-96]
   111d4:	stp	q0, q0, [x10, #-128]
   111d8:	cbz	x24, 111e0 <argp_parse@@Base+0xac>
   111dc:	str	x24, [x8], #32
   111e0:	adrp	x10, 3f000 <vasnprintf@@Base+0x14ec4>
   111e4:	ldr	x10, [x10, #3936]
   111e8:	adrp	x11, 3f000 <vasnprintf@@Base+0x14ec4>
   111ec:	add	x11, x11, #0x780
   111f0:	str	x11, [x8]
   111f4:	ldr	x10, [x10]
   111f8:	cbnz	x10, 11214 <argp_parse@@Base+0xe0>
   111fc:	adrp	x10, 3f000 <vasnprintf@@Base+0x14ec4>
   11200:	ldr	x10, [x10, #4056]
   11204:	ldr	x10, [x10]
   11208:	cbnz	x10, 11214 <argp_parse@@Base+0xe0>
   1120c:	mov	w10, #0x1                   	// #1
   11210:	b	11224 <argp_parse@@Base+0xf0>
   11214:	adrp	x10, 3f000 <vasnprintf@@Base+0x14ec4>
   11218:	add	x10, x10, #0x7b8
   1121c:	str	x10, [x8, #32]
   11220:	mov	w10, #0x2                   	// #2
   11224:	lsl	x10, x10, #5
   11228:	mov	x24, x9
   1122c:	str	xzr, [x8, x10]
   11230:	sub	x0, x29, #0xd8
   11234:	mov	x1, x24
   11238:	mov	w2, w23
   1123c:	mov	x3, x22
   11240:	mov	w4, w21
   11244:	mov	x5, x20
   11248:	bl	112a4 <argp_parse@@Base+0x170>
   1124c:	cbnz	w0, 11274 <argp_parse@@Base+0x140>
   11250:	sub	x0, x29, #0xd8
   11254:	sub	x1, x29, #0xdc
   11258:	bl	11524 <argp_parse@@Base+0x3f0>
   1125c:	cbz	w0, 11250 <argp_parse@@Base+0x11c>
   11260:	ldur	w2, [x29, #-220]
   11264:	mov	w1, w0
   11268:	sub	x0, x29, #0xd8
   1126c:	mov	x3, x19
   11270:	bl	116b4 <argp_parse@@Base+0x580>
   11274:	mov	sp, x29
   11278:	ldp	x20, x19, [sp, #64]
   1127c:	ldp	x22, x21, [sp, #48]
   11280:	ldp	x24, x23, [sp, #32]
   11284:	ldp	x28, x25, [sp, #16]
   11288:	ldp	x29, x30, [sp], #80
   1128c:	ret
   11290:	ldr	x0, [x22]
   11294:	bl	ae20 <last_component@plt>
   11298:	str	x0, [x25]
   1129c:	tbz	w21, #4, 1119c <argp_parse@@Base+0x68>
   112a0:	b	11230 <argp_parse@@Base+0xfc>
   112a4:	sub	sp, sp, #0xb0
   112a8:	mov	w8, #0x1                   	// #1
   112ac:	stp	x29, x30, [sp, #80]
   112b0:	stp	x24, x23, [sp, #128]
   112b4:	stp	x22, x21, [sp, #144]
   112b8:	stp	x20, x19, [sp, #160]
   112bc:	add	x29, sp, #0x50
   112c0:	mov	x21, x5
   112c4:	mov	w23, w4
   112c8:	mov	x20, x3
   112cc:	mov	w24, w2
   112d0:	mov	x22, x1
   112d4:	mov	x19, x0
   112d8:	movi	v0.2d, #0x0
   112dc:	bic	w8, w8, w4, lsr #2
   112e0:	stp	x28, x27, [sp, #96]
   112e4:	stp	x26, x25, [sp, #112]
   112e8:	stp	q0, q0, [sp, #16]
   112ec:	str	q0, [sp]
   112f0:	stp	x8, xzr, [x29, #-32]
   112f4:	stp	xzr, xzr, [x29, #-16]
   112f8:	cbz	x1, 11308 <argp_parse@@Base+0x1d4>
   112fc:	sub	x1, x29, #0x20
   11300:	mov	x0, x22
   11304:	bl	11b2c <_argp_input@@Base+0x210>
   11308:	ldp	x8, x9, [x29, #-16]
   1130c:	mov	w10, #0x48                  	// #72
   11310:	mul	x8, x8, x10
   11314:	lsl	x25, x9, #3
   11318:	add	x27, x8, #0x48
   1131c:	ldp	x8, x9, [x29, #-32]
   11320:	add	x28, x27, x25
   11324:	add	x9, x28, x9, lsl #5
   11328:	add	x26, x9, #0x20
   1132c:	add	x8, x8, x26
   11330:	add	x0, x8, #0x1
   11334:	bl	abc0 <malloc@plt>
   11338:	str	x0, [x19, #208]
   1133c:	cbz	x0, 11480 <argp_parse@@Base+0x34c>
   11340:	add	x8, x0, x27
   11344:	add	x9, x0, x28
   11348:	add	x10, x0, x26
   1134c:	mov	x11, #0x100000001           	// #4294967297
   11350:	str	x0, [x19, #80]
   11354:	str	x8, [x19, #96]
   11358:	stp	x10, x9, [x19, #8]
   1135c:	str	x11, [x19, #24]
   11360:	ldp	q1, q0, [sp, #16]
   11364:	ldr	q2, [sp]
   11368:	mov	x0, x8
   1136c:	mov	w1, wzr
   11370:	mov	x2, x25
   11374:	stp	q1, q0, [x19, #48]
   11378:	str	q2, [x19, #32]
   1137c:	bl	ad40 <memset@plt>
   11380:	mov	x0, x19
   11384:	mov	x1, x22
   11388:	mov	w2, w23
   1138c:	bl	11bf4 <_argp_input@@Base+0x2d8>
   11390:	movi	v0.2d, #0x0
   11394:	mov	x22, x19
   11398:	str	q0, [x22, #112]!
   1139c:	ldr	x8, [x19]
   113a0:	stp	q0, q0, [x19, #176]
   113a4:	stp	q0, q0, [x19, #144]
   113a8:	str	q0, [x19, #128]
   113ac:	str	x8, [x22]
   113b0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   113b4:	ldr	x8, [x8, #3816]
   113b8:	str	w24, [x19, #120]
   113bc:	str	x20, [x19, #128]
   113c0:	str	w23, [x19, #140]
   113c4:	ldr	x8, [x8]
   113c8:	ldp	x23, x9, [x19, #80]
   113cc:	str	x8, [x19, #184]
   113d0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   113d4:	ldr	x8, [x8, #3872]
   113d8:	cmp	x23, x9
   113dc:	mov	w9, #0x1                   	// #1
   113e0:	ldr	x8, [x8]
   113e4:	str	wzr, [x19, #136]
   113e8:	str	w9, [x19, #104]
   113ec:	stp	x8, x19, [x19, #192]
   113f0:	b.cs	113f8 <argp_parse@@Base+0x2c4>  // b.hs, b.nlast
   113f4:	str	x21, [x23, #48]
   113f8:	ldr	x8, [x19, #88]
   113fc:	cmp	x23, x8
   11400:	b.cs	11488 <argp_parse@@Base+0x354>  // b.hs, b.nlast
   11404:	mov	w0, wzr
   11408:	b	11434 <argp_parse@@Base+0x300>
   1140c:	mov	w2, #0x3                   	// #3
   11410:	movk	w2, #0x100, lsl #16
   11414:	mov	x0, x23
   11418:	mov	x1, x22
   1141c:	mov	x3, xzr
   11420:	bl	11c98 <_argp_input@@Base+0x37c>
   11424:	ldr	x8, [x19, #88]
   11428:	add	x23, x23, #0x48
   1142c:	cmp	x23, x8
   11430:	b.cs	1148c <argp_parse@@Base+0x358>  // b.hs, b.nlast
   11434:	cmp	w0, #0x7
   11438:	b.eq	11440 <argp_parse@@Base+0x30c>  // b.none
   1143c:	cbnz	w0, 11494 <argp_parse@@Base+0x360>
   11440:	ldr	x8, [x23, #32]
   11444:	cbz	x8, 11458 <argp_parse@@Base+0x324>
   11448:	ldr	x8, [x8, #56]
   1144c:	ldr	w9, [x23, #40]
   11450:	ldr	x8, [x8, x9, lsl #3]
   11454:	str	x8, [x23, #48]
   11458:	ldr	x8, [x23]
   1145c:	cbnz	x8, 1140c <argp_parse@@Base+0x2d8>
   11460:	ldr	x8, [x23, #8]
   11464:	ldr	x8, [x8, #32]
   11468:	cbz	x8, 1140c <argp_parse@@Base+0x2d8>
   1146c:	ldr	x8, [x8]
   11470:	cbz	x8, 1140c <argp_parse@@Base+0x2d8>
   11474:	ldp	x8, x9, [x23, #48]
   11478:	str	x8, [x9]
   1147c:	b	1140c <argp_parse@@Base+0x2d8>
   11480:	mov	w0, #0xc                   	// #12
   11484:	b	11504 <argp_parse@@Base+0x3d0>
   11488:	mov	w0, wzr
   1148c:	cmp	w0, #0x7
   11490:	csel	w0, wzr, w0, eq  // eq = none
   11494:	cbnz	w0, 11504 <argp_parse@@Base+0x3d0>
   11498:	ldr	w8, [x19, #140]
   1149c:	tbnz	w8, #1, 114ac <argp_parse@@Base+0x378>
   114a0:	mov	w8, #0x1                   	// #1
   114a4:	str	w8, [x19, #28]
   114a8:	b	114cc <argp_parse@@Base+0x398>
   114ac:	str	wzr, [x19, #28]
   114b0:	tbz	w8, #0, 114cc <argp_parse@@Base+0x398>
   114b4:	ldr	x8, [x19, #128]
   114b8:	ldr	w9, [x19, #120]
   114bc:	sub	x8, x8, #0x8
   114c0:	add	w9, w9, #0x1
   114c4:	str	x8, [x19, #128]
   114c8:	str	w9, [x19, #120]
   114cc:	ldr	x8, [x19, #128]
   114d0:	cmp	x8, x20
   114d4:	b.eq	114ec <argp_parse@@Base+0x3b8>  // b.none
   114d8:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   114dc:	ldr	x8, [x8, #4008]
   114e0:	mov	w0, wzr
   114e4:	ldr	x8, [x8]
   114e8:	b	11500 <argp_parse@@Base+0x3cc>
   114ec:	ldr	x0, [x20]
   114f0:	cbz	x0, 114d8 <argp_parse@@Base+0x3a4>
   114f4:	bl	ae20 <last_component@plt>
   114f8:	mov	x8, x0
   114fc:	mov	w0, wzr
   11500:	str	x8, [x19, #176]
   11504:	ldp	x20, x19, [sp, #160]
   11508:	ldp	x22, x21, [sp, #144]
   1150c:	ldp	x24, x23, [sp, #128]
   11510:	ldp	x26, x25, [sp, #112]
   11514:	ldp	x28, x27, [sp, #96]
   11518:	ldp	x29, x30, [sp, #80]
   1151c:	add	sp, sp, #0xb0
   11520:	ret
   11524:	stp	x29, x30, [sp, #-48]!
   11528:	stp	x22, x21, [sp, #16]
   1152c:	stp	x20, x19, [sp, #32]
   11530:	ldr	w8, [x0, #148]
   11534:	mov	x20, x0
   11538:	mov	x19, x1
   1153c:	mov	x29, sp
   11540:	cbz	w8, 11554 <argp_parse@@Base+0x420>
   11544:	ldr	w9, [x20, #136]
   11548:	cmp	w9, w8
   1154c:	b.ge	11554 <argp_parse@@Base+0x420>  // b.tcont
   11550:	str	wzr, [x20, #148]
   11554:	ldr	w8, [x20, #104]
   11558:	cbz	w8, 115e4 <argp_parse@@Base+0x4b0>
   1155c:	ldr	w8, [x20, #148]
   11560:	mov	w21, #0xffffffff            	// #-1
   11564:	cbnz	w8, 115e8 <argp_parse@@Base+0x4b4>
   11568:	ldr	w8, [x20, #136]
   1156c:	mov	x5, x20
   11570:	mov	x4, xzr
   11574:	str	w8, [x5, #24]!
   11578:	ldr	w0, [x5, #96]
   1157c:	ldr	x1, [x5, #104]
   11580:	ldrb	w8, [x5, #116]
   11584:	ldp	x2, x3, [x5, #-16]
   11588:	str	w21, [x5, #8]
   1158c:	tbnz	w8, #6, 11598 <argp_parse@@Base+0x464>
   11590:	bl	b130 <_getopt_long_r@plt>
   11594:	b	1159c <argp_parse@@Base+0x468>
   11598:	bl	b050 <_getopt_long_only_r@plt>
   1159c:	ldr	w22, [x20, #24]
   115a0:	mov	w21, w0
   115a4:	cmp	w0, #0x3f
   115a8:	str	w22, [x20, #136]
   115ac:	b.eq	11610 <argp_parse@@Base+0x4dc>  // b.none
   115b0:	cmn	w21, #0x1
   115b4:	b.ne	115e8 <argp_parse@@Base+0x4b4>  // b.any
   115b8:	cmp	w22, #0x2
   115bc:	str	wzr, [x20, #104]
   115c0:	b.lt	115e4 <argp_parse@@Base+0x4b0>  // b.tstop
   115c4:	ldr	x8, [x20, #128]
   115c8:	sub	w9, w22, #0x1
   115cc:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   115d0:	add	x1, x1, #0xc31
   115d4:	ldr	x0, [x8, w9, sxtw #3]
   115d8:	bl	b120 <strcmp@plt>
   115dc:	cbnz	w0, 115e4 <argp_parse@@Base+0x4b0>
   115e0:	str	w22, [x20, #148]
   115e4:	mov	w21, #0xffffffff            	// #-1
   115e8:	cmn	w21, #0x1
   115ec:	b.eq	11634 <argp_parse@@Base+0x500>  // b.none
   115f0:	cmp	w21, #0x1
   115f4:	b.ne	1166c <argp_parse@@Base+0x538>  // b.any
   115f8:	ldr	x1, [x20, #40]
   115fc:	mov	x0, x20
   11600:	bl	11f8c <_argp_input@@Base+0x670>
   11604:	cmp	w0, #0x7
   11608:	b.eq	11680 <argp_parse@@Base+0x54c>  // b.none
   1160c:	b	116a4 <argp_parse@@Base+0x570>
   11610:	ldr	w8, [x20, #32]
   11614:	cmn	w8, #0x1
   11618:	b.eq	11628 <argp_parse@@Base+0x4f4>  // b.none
   1161c:	mov	w8, wzr
   11620:	mov	w0, #0x7                   	// #7
   11624:	b	116a0 <argp_parse@@Base+0x56c>
   11628:	mov	w21, #0x3f                  	// #63
   1162c:	cmn	w21, #0x1
   11630:	b.ne	115f0 <argp_parse@@Base+0x4bc>  // b.any
   11634:	ldrsw	x8, [x20, #136]
   11638:	ldr	w9, [x20, #120]
   1163c:	cmp	w8, w9
   11640:	b.ge	11698 <argp_parse@@Base+0x564>  // b.tcont
   11644:	ldrb	w9, [x20, #140]
   11648:	tbnz	w9, #2, 11698 <argp_parse@@Base+0x564>
   1164c:	ldr	x9, [x20, #128]
   11650:	add	w10, w8, #0x1
   11654:	str	w10, [x20, #136]
   11658:	mov	w21, #0x1                   	// #1
   1165c:	ldr	x8, [x9, x8, lsl #3]
   11660:	str	x8, [x20, #40]
   11664:	cmp	w21, #0x1
   11668:	b.eq	115f8 <argp_parse@@Base+0x4c4>  // b.none
   1166c:	mov	x0, x20
   11670:	mov	w1, w21
   11674:	bl	120a0 <_argp_input@@Base+0x784>
   11678:	cmp	w0, #0x7
   1167c:	b.ne	116a4 <argp_parse@@Base+0x570>  // b.any
   11680:	cmp	w21, #0x1
   11684:	cset	w8, eq  // eq = none
   11688:	cmn	w21, #0x1
   1168c:	cset	w9, eq  // eq = none
   11690:	orr	w8, w9, w8
   11694:	b	116a0 <argp_parse@@Base+0x56c>
   11698:	mov	w0, #0x7                   	// #7
   1169c:	mov	w8, #0x1                   	// #1
   116a0:	str	w8, [x19]
   116a4:	ldp	x20, x19, [sp, #32]
   116a8:	ldp	x22, x21, [sp, #16]
   116ac:	ldp	x29, x30, [sp], #48
   116b0:	ret
   116b4:	stp	x29, x30, [sp, #-64]!
   116b8:	cmp	w2, #0x0
   116bc:	stp	x24, x23, [sp, #16]
   116c0:	ccmp	w1, #0x7, #0x0, ne  // ne = any
   116c4:	mov	w24, #0x1                   	// #1
   116c8:	stp	x20, x19, [sp, #48]
   116cc:	mov	x19, x0
   116d0:	csel	w20, wzr, w1, eq  // eq = none
   116d4:	movk	w24, #0x100, lsl #16
   116d8:	stp	x22, x21, [sp, #32]
   116dc:	mov	x29, sp
   116e0:	cbz	w20, 11738 <argp_parse@@Base+0x604>
   116e4:	cbz	w20, 11808 <argp_parse@@Base+0x6d4>
   116e8:	cmp	w20, #0x7
   116ec:	b.ne	11700 <argp_parse@@Base+0x5cc>  // b.any
   116f0:	ldr	x1, [x19, #184]
   116f4:	add	x0, x19, #0x70
   116f8:	mov	w2, #0x104                 	// #260
   116fc:	bl	b560 <argp_state_help@plt>
   11700:	ldp	x21, x8, [x19, #80]
   11704:	cmp	x21, x8
   11708:	b.cs	11878 <argp_parse@@Base+0x744>  // b.hs, b.nlast
   1170c:	add	x22, x19, #0x70
   11710:	add	w2, w24, #0x4
   11714:	mov	x0, x21
   11718:	mov	x1, x22
   1171c:	mov	x3, xzr
   11720:	bl	11c98 <_argp_input@@Base+0x37c>
   11724:	ldr	x8, [x19, #88]
   11728:	add	x21, x21, #0x48
   1172c:	cmp	x21, x8
   11730:	b.cc	11710 <argp_parse@@Base+0x5dc>  // b.lo, b.ul, b.last
   11734:	b	11878 <argp_parse@@Base+0x744>
   11738:	ldr	w8, [x19, #136]
   1173c:	ldr	w9, [x19, #120]
   11740:	mov	x21, x3
   11744:	cmp	w8, w9
   11748:	b.ne	11828 <argp_parse@@Base+0x6f4>  // b.any
   1174c:	ldp	x23, x8, [x19, #80]
   11750:	add	x22, x19, #0x70
   11754:	mov	w20, wzr
   11758:	cmp	x23, x8
   1175c:	b.cc	11794 <argp_parse@@Base+0x660>  // b.lo, b.ul, b.last
   11760:	ldr	x9, [x19, #80]
   11764:	sub	x23, x8, #0x48
   11768:	cmp	x23, x9
   1176c:	b.cs	117ec <argp_parse@@Base+0x6b8>  // b.hs, b.nlast
   11770:	cmp	w20, #0x7
   11774:	csel	w20, wzr, w20, eq  // eq = none
   11778:	b	117f8 <argp_parse@@Base+0x6c4>
   1177c:	ldr	w8, [x23, #24]
   11780:	cbz	w8, 117a4 <argp_parse@@Base+0x670>
   11784:	ldr	x8, [x19, #88]
   11788:	add	x23, x23, #0x48
   1178c:	cmp	x23, x8
   11790:	b.cs	11760 <argp_parse@@Base+0x62c>  // b.hs, b.nlast
   11794:	cmp	w20, #0x7
   11798:	b.eq	1177c <argp_parse@@Base+0x648>  // b.none
   1179c:	cbz	w20, 1177c <argp_parse@@Base+0x648>
   117a0:	b	11760 <argp_parse@@Base+0x62c>
   117a4:	add	w2, w24, #0x1
   117a8:	mov	x0, x23
   117ac:	mov	x1, x22
   117b0:	mov	x3, xzr
   117b4:	bl	11c98 <_argp_input@@Base+0x37c>
   117b8:	mov	w20, w0
   117bc:	b	11784 <argp_parse@@Base+0x650>
   117c0:	mov	w2, #0x1                   	// #1
   117c4:	movk	w2, #0x100, lsl #16
   117c8:	mov	x0, x23
   117cc:	mov	x1, x22
   117d0:	mov	x3, xzr
   117d4:	bl	11c98 <_argp_input@@Base+0x37c>
   117d8:	ldr	x8, [x19, #80]
   117dc:	sub	x23, x23, #0x48
   117e0:	mov	w20, w0
   117e4:	cmp	x23, x8
   117e8:	b.cc	11770 <argp_parse@@Base+0x63c>  // b.lo, b.ul, b.last
   117ec:	cmp	w20, #0x7
   117f0:	b.eq	117c0 <argp_parse@@Base+0x68c>  // b.none
   117f4:	cbz	w20, 117c0 <argp_parse@@Base+0x68c>
   117f8:	cbz	x21, 116e4 <argp_parse@@Base+0x5b0>
   117fc:	ldr	w8, [x19, #136]
   11800:	str	w8, [x21]
   11804:	b	116e4 <argp_parse@@Base+0x5b0>
   11808:	ldp	x9, x8, [x19, #80]
   1180c:	sub	x21, x8, #0x48
   11810:	cmp	x21, x9
   11814:	b.cs	11838 <argp_parse@@Base+0x704>  // b.hs, b.nlast
   11818:	mov	w20, wzr
   1181c:	cmp	w20, #0x7
   11820:	csel	w20, wzr, w20, eq  // eq = none
   11824:	b	11878 <argp_parse@@Base+0x744>
   11828:	cbz	x21, 118dc <argp_parse@@Base+0x7a8>
   1182c:	mov	w20, wzr
   11830:	str	w8, [x21]
   11834:	b	116e4 <argp_parse@@Base+0x5b0>
   11838:	mov	w20, wzr
   1183c:	add	x22, x19, #0x70
   11840:	b	1186c <argp_parse@@Base+0x738>
   11844:	add	w2, w24, #0x3
   11848:	mov	x0, x21
   1184c:	mov	x1, x22
   11850:	mov	x3, xzr
   11854:	bl	11c98 <_argp_input@@Base+0x37c>
   11858:	ldr	x8, [x19, #80]
   1185c:	sub	x21, x21, #0x48
   11860:	mov	w20, w0
   11864:	cmp	x21, x8
   11868:	b.cc	1181c <argp_parse@@Base+0x6e8>  // b.lo, b.ul, b.last
   1186c:	cmp	w20, #0x7
   11870:	b.eq	11844 <argp_parse@@Base+0x710>  // b.none
   11874:	cbz	w20, 11844 <argp_parse@@Base+0x710>
   11878:	ldp	x9, x8, [x19, #80]
   1187c:	sub	x21, x8, #0x48
   11880:	cmp	x21, x9
   11884:	b.cc	118b0 <argp_parse@@Base+0x77c>  // b.lo, b.ul, b.last
   11888:	add	x22, x19, #0x70
   1188c:	add	w2, w24, #0x6
   11890:	mov	x0, x21
   11894:	mov	x1, x22
   11898:	mov	x3, xzr
   1189c:	bl	11c98 <_argp_input@@Base+0x37c>
   118a0:	ldr	x8, [x19, #80]
   118a4:	sub	x21, x21, #0x48
   118a8:	cmp	x21, x8
   118ac:	b.cs	1188c <argp_parse@@Base+0x758>  // b.hs, b.nlast
   118b0:	ldr	x0, [x19, #208]
   118b4:	cmp	w20, #0x7
   118b8:	mov	w8, #0x16                  	// #22
   118bc:	csel	w19, w8, w20, eq  // eq = none
   118c0:	bl	b1d0 <free@plt>
   118c4:	mov	w0, w19
   118c8:	ldp	x20, x19, [sp, #48]
   118cc:	ldp	x22, x21, [sp, #32]
   118d0:	ldp	x24, x23, [sp, #16]
   118d4:	ldp	x29, x30, [sp], #64
   118d8:	ret
   118dc:	ldrb	w8, [x19, #140]
   118e0:	tbnz	w8, #1, 11914 <argp_parse@@Base+0x7e0>
   118e4:	ldr	x20, [x19, #184]
   118e8:	cbz	x20, 11914 <argp_parse@@Base+0x7e0>
   118ec:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   118f0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   118f4:	add	x0, x0, #0x7e4
   118f8:	add	x1, x1, #0xc49
   118fc:	mov	w2, #0x5                   	// #5
   11900:	bl	b580 <dcgettext@plt>
   11904:	ldr	x2, [x19, #176]
   11908:	mov	x1, x0
   1190c:	mov	x0, x20
   11910:	bl	b7f0 <fprintf@plt>
   11914:	mov	w20, #0x7                   	// #7
   11918:	b	116e4 <argp_parse@@Base+0x5b0>

000000000001191c <_argp_input@@Base>:
   1191c:	cbz	x1, 11954 <_argp_input@@Base+0x38>
   11920:	ldr	x9, [x1, #88]
   11924:	ldp	x8, x10, [x9, #80]
   11928:	cmp	x8, x10
   1192c:	b.cs	1194c <_argp_input@@Base+0x30>  // b.hs, b.nlast
   11930:	ldr	x10, [x8, #8]
   11934:	cmp	x10, x0
   11938:	b.eq	1195c <_argp_input@@Base+0x40>  // b.none
   1193c:	ldr	x10, [x9, #88]
   11940:	add	x8, x8, #0x48
   11944:	cmp	x8, x10
   11948:	b.cc	11930 <_argp_input@@Base+0x14>  // b.lo, b.ul, b.last
   1194c:	mov	w8, #0x1                   	// #1
   11950:	cbz	w8, 11958 <_argp_input@@Base+0x3c>
   11954:	mov	x0, xzr
   11958:	ret
   1195c:	ldr	x0, [x8, #48]
   11960:	mov	w8, wzr
   11964:	cbnz	w8, 11954 <_argp_input@@Base+0x38>
   11968:	b	11958 <_argp_input@@Base+0x3c>
   1196c:	stp	x29, x30, [sp, #-32]!
   11970:	stp	x20, x19, [sp, #16]
   11974:	mov	x19, x2
   11978:	mov	x20, x1
   1197c:	mov	w8, w0
   11980:	cmn	w0, #0x3
   11984:	mov	w0, #0x7                   	// #7
   11988:	mov	x29, sp
   1198c:	b.gt	119ac <_argp_input@@Base+0x90>
   11990:	cmn	w8, #0x4
   11994:	b.eq	119d0 <_argp_input@@Base+0xb4>  // b.none
   11998:	cmn	w8, #0x3
   1199c:	b.ne	11a64 <_argp_input@@Base+0x148>  // b.any
   119a0:	ldr	x1, [x19, #80]
   119a4:	mov	w2, #0x201                 	// #513
   119a8:	b	119c4 <_argp_input@@Base+0xa8>
   119ac:	cmn	w8, #0x2
   119b0:	b.eq	11a1c <_argp_input@@Base+0x100>  // b.none
   119b4:	cmp	w8, #0x3f
   119b8:	b.ne	11a64 <_argp_input@@Base+0x148>  // b.any
   119bc:	ldr	x1, [x19, #80]
   119c0:	mov	w2, #0x27a                 	// #634
   119c4:	mov	x0, x19
   119c8:	bl	b560 <argp_state_help@plt>
   119cc:	b	11a60 <_argp_input@@Base+0x144>
   119d0:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
   119d4:	add	x8, x8, #0xbf3
   119d8:	cmp	x20, #0x0
   119dc:	csel	x0, x8, x20, eq  // eq = none
   119e0:	bl	ab60 <atoi@plt>
   119e4:	adrp	x19, 40000 <base_len@@Base+0x2c984>
   119e8:	str	w0, [x19, #2760]
   119ec:	ldr	w8, [x19, #2760]
   119f0:	subs	w8, w8, #0x1
   119f4:	str	w8, [x19, #2760]
   119f8:	b.lt	11a60 <_argp_input@@Base+0x144>  // b.tstop
   119fc:	mov	w0, #0x1                   	// #1
   11a00:	bl	adb0 <sleep@plt>
   11a04:	ldr	w8, [x19, #2760]
   11a08:	sub	w9, w8, #0x1
   11a0c:	cmp	w8, #0x0
   11a10:	str	w9, [x19, #2760]
   11a14:	b.gt	119fc <_argp_input@@Base+0xe0>
   11a18:	b	11a60 <_argp_input@@Base+0x144>
   11a1c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   11a20:	ldr	x8, [x8, #3768]
   11a24:	mov	x0, x20
   11a28:	str	x20, [x8]
   11a2c:	bl	ae20 <last_component@plt>
   11a30:	str	x0, [x19, #64]
   11a34:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   11a38:	ldr	x8, [x8, #4008]
   11a3c:	str	x0, [x8]
   11a40:	ldr	w8, [x19, #28]
   11a44:	and	w8, w8, #0x3
   11a48:	cmp	w8, #0x1
   11a4c:	b.ne	11a60 <_argp_input@@Base+0x144>  // b.any
   11a50:	ldr	x8, [x19, #16]
   11a54:	mov	w0, wzr
   11a58:	str	x20, [x8]
   11a5c:	b	11a64 <_argp_input@@Base+0x148>
   11a60:	mov	w0, wzr
   11a64:	ldp	x20, x19, [sp, #16]
   11a68:	ldp	x29, x30, [sp], #32
   11a6c:	ret
   11a70:	stp	x29, x30, [sp, #-32]!
   11a74:	cmp	w0, #0x56
   11a78:	str	x19, [sp, #16]
   11a7c:	mov	x29, sp
   11a80:	b.ne	11ab0 <_argp_input@@Base+0x194>  // b.any
   11a84:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   11a88:	ldr	x8, [x8, #4056]
   11a8c:	mov	x19, x2
   11a90:	ldr	x8, [x8]
   11a94:	cbz	x8, 11ab8 <_argp_input@@Base+0x19c>
   11a98:	ldr	x0, [x19, #80]
   11a9c:	mov	x1, x19
   11aa0:	blr	x8
   11aa4:	ldrb	w8, [x19, #28]
   11aa8:	tbnz	w8, #5, 11ae0 <_argp_input@@Base+0x1c4>
   11aac:	b	11b24 <_argp_input@@Base+0x208>
   11ab0:	mov	w0, #0x7                   	// #7
   11ab4:	b	11ae4 <_argp_input@@Base+0x1c8>
   11ab8:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   11abc:	ldr	x8, [x8, #3936]
   11ac0:	ldr	x2, [x8]
   11ac4:	cbz	x2, 11af0 <_argp_input@@Base+0x1d4>
   11ac8:	ldr	x0, [x19, #80]
   11acc:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   11ad0:	add	x1, x1, #0x1
   11ad4:	bl	b7f0 <fprintf@plt>
   11ad8:	ldrb	w8, [x19, #28]
   11adc:	tbz	w8, #5, 11b24 <_argp_input@@Base+0x208>
   11ae0:	mov	w0, wzr
   11ae4:	ldr	x19, [sp, #16]
   11ae8:	ldp	x29, x30, [sp], #32
   11aec:	ret
   11af0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   11af4:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   11af8:	add	x0, x0, #0x7e4
   11afc:	add	x1, x1, #0xc0e
   11b00:	mov	w2, #0x5                   	// #5
   11b04:	bl	b580 <dcgettext@plt>
   11b08:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   11b0c:	mov	x2, x0
   11b10:	add	x1, x1, #0x805
   11b14:	mov	x0, x19
   11b18:	bl	b320 <argp_error@plt>
   11b1c:	ldrb	w8, [x19, #28]
   11b20:	tbnz	w8, #5, 11ae0 <_argp_input@@Base+0x1c4>
   11b24:	mov	w0, wzr
   11b28:	bl	a8b0 <exit@plt>
   11b2c:	stp	x29, x30, [sp, #-48]!
   11b30:	stp	x22, x21, [sp, #16]
   11b34:	stp	x20, x19, [sp, #32]
   11b38:	ldr	x20, [x0]
   11b3c:	ldr	x21, [x0, #32]
   11b40:	mov	x19, x1
   11b44:	mov	x29, sp
   11b48:	cbz	x20, 11b9c <_argp_input@@Base+0x280>
   11b4c:	ldr	x8, [x19, #16]
   11b50:	mov	x0, x20
   11b54:	add	x8, x8, #0x1
   11b58:	str	x8, [x19, #16]
   11b5c:	bl	b040 <_option_is_end@plt>
   11b60:	mov	w22, wzr
   11b64:	cbnz	w0, 11b80 <_argp_input@@Base+0x264>
   11b68:	add	x20, x20, #0x30
   11b6c:	mov	x0, x20
   11b70:	add	w22, w22, #0x1
   11b74:	bl	b040 <_option_is_end@plt>
   11b78:	add	x20, x20, #0x30
   11b7c:	cbz	w0, 11b6c <_argp_input@@Base+0x250>
   11b80:	ldr	x9, [x19]
   11b84:	add	w10, w22, w22, lsl #1
   11b88:	mov	x8, x19
   11b8c:	add	x9, x9, x10
   11b90:	str	x9, [x8], #8
   11b94:	mov	w9, w22
   11b98:	b	11bac <_argp_input@@Base+0x290>
   11b9c:	ldr	x8, [x0, #8]
   11ba0:	cbz	x8, 11bb8 <_argp_input@@Base+0x29c>
   11ba4:	add	x8, x19, #0x10
   11ba8:	mov	w9, #0x1                   	// #1
   11bac:	ldr	x10, [x8]
   11bb0:	add	x9, x10, x9
   11bb4:	str	x9, [x8]
   11bb8:	cbz	x21, 11be4 <_argp_input@@Base+0x2c8>
   11bbc:	ldr	x0, [x21]
   11bc0:	cbz	x0, 11be4 <_argp_input@@Base+0x2c8>
   11bc4:	add	x20, x21, #0x20
   11bc8:	mov	x1, x19
   11bcc:	bl	11b2c <_argp_input@@Base+0x210>
   11bd0:	ldr	x8, [x19, #24]
   11bd4:	add	x8, x8, #0x1
   11bd8:	str	x8, [x19, #24]
   11bdc:	ldr	x0, [x20], #32
   11be0:	cbnz	x0, 11bc8 <_argp_input@@Base+0x2ac>
   11be4:	ldp	x20, x19, [sp, #32]
   11be8:	ldp	x22, x21, [sp, #16]
   11bec:	ldp	x29, x30, [sp], #48
   11bf0:	ret
   11bf4:	sub	sp, sp, #0x40
   11bf8:	stp	x29, x30, [sp, #32]
   11bfc:	ldr	x8, [x0, #8]
   11c00:	str	x19, [sp, #48]
   11c04:	mov	x19, x0
   11c08:	add	x29, sp, #0x20
   11c0c:	stp	x0, x8, [sp]
   11c10:	ldr	x8, [x0, #16]
   11c14:	str	x8, [sp, #16]
   11c18:	ldr	x8, [x0, #96]
   11c1c:	str	x8, [sp, #24]
   11c20:	tbnz	w2, #3, 11c34 <_argp_input@@Base+0x318>
   11c24:	tbz	w2, #2, 11c48 <_argp_input@@Base+0x32c>
   11c28:	ldr	x8, [sp, #8]
   11c2c:	mov	w9, #0x2b                  	// #43
   11c30:	b	11c3c <_argp_input@@Base+0x320>
   11c34:	ldr	x8, [sp, #8]
   11c38:	mov	w9, #0x2d                  	// #45
   11c3c:	add	x10, x8, #0x1
   11c40:	str	x10, [sp, #8]
   11c44:	strb	w9, [x8]
   11c48:	ldr	x8, [sp, #8]
   11c4c:	strb	wzr, [x8]
   11c50:	ldr	x8, [sp, #16]
   11c54:	str	xzr, [x8]
   11c58:	str	x1, [x19]
   11c5c:	cbz	x1, 11c80 <_argp_input@@Base+0x364>
   11c60:	ldr	x3, [x19, #80]
   11c64:	mov	x4, sp
   11c68:	mov	x0, x1
   11c6c:	mov	x1, xzr
   11c70:	mov	w2, wzr
   11c74:	bl	11d00 <_argp_input@@Base+0x3e4>
   11c78:	str	x0, [x19, #88]
   11c7c:	b	11c88 <_argp_input@@Base+0x36c>
   11c80:	ldr	x8, [x19, #80]
   11c84:	str	x8, [x19, #88]
   11c88:	ldr	x19, [sp, #48]
   11c8c:	ldp	x29, x30, [sp, #32]
   11c90:	add	sp, sp, #0x40
   11c94:	ret
   11c98:	stp	x29, x30, [sp, #-32]!
   11c9c:	stp	x20, x19, [sp, #16]
   11ca0:	ldr	x8, [x0]
   11ca4:	mov	x29, sp
   11ca8:	cbz	x8, 11cf0 <_argp_input@@Base+0x3d4>
   11cac:	ldr	x9, [x0, #64]
   11cb0:	mov	x20, x1
   11cb4:	mov	x19, x0
   11cb8:	str	x9, [x1, #56]
   11cbc:	ldr	x9, [x0, #48]
   11cc0:	str	x9, [x1, #40]
   11cc4:	ldr	x9, [x0, #56]
   11cc8:	str	x9, [x1, #48]
   11ccc:	ldr	w9, [x0, #24]
   11cd0:	mov	w0, w2
   11cd4:	mov	x2, x20
   11cd8:	str	w9, [x1, #32]
   11cdc:	mov	x1, x3
   11ce0:	blr	x8
   11ce4:	ldr	x8, [x20, #56]
   11ce8:	str	x8, [x19, #64]
   11cec:	b	11cf4 <_argp_input@@Base+0x3d8>
   11cf0:	mov	w0, #0x7                   	// #7
   11cf4:	ldp	x20, x19, [sp, #16]
   11cf8:	ldp	x29, x30, [sp], #32
   11cfc:	ret
   11d00:	stp	x29, x30, [sp, #-96]!
   11d04:	stp	x28, x27, [sp, #16]
   11d08:	stp	x26, x25, [sp, #32]
   11d0c:	stp	x24, x23, [sp, #48]
   11d10:	stp	x22, x21, [sp, #64]
   11d14:	stp	x20, x19, [sp, #80]
   11d18:	ldr	x24, [x0]
   11d1c:	ldr	x25, [x0, #32]
   11d20:	mov	x19, x4
   11d24:	mov	x20, x3
   11d28:	mov	w21, w2
   11d2c:	mov	x23, x0
   11d30:	mov	x22, x1
   11d34:	mov	x29, sp
   11d38:	cbz	x24, 11e60 <_argp_input@@Base+0x544>
   11d3c:	mov	x0, x24
   11d40:	bl	b040 <_option_is_end@plt>
   11d44:	cbnz	w0, 11e68 <_argp_input@@Base+0x54c>
   11d48:	mov	w28, #0x3a                  	// #58
   11d4c:	mov	x26, x24
   11d50:	b	11d94 <_argp_input@@Base+0x478>
   11d54:	ldr	w10, [x27, #80]
   11d58:	mov	w12, #0x39000000            	// #956301312
   11d5c:	add	x11, x8, #0x20
   11d60:	sub	w10, w20, w10
   11d64:	lsr	w10, w10, #3
   11d68:	mul	w10, w10, w12
   11d6c:	bfxil	w10, w9, #0, #24
   11d70:	mov	w9, #0x1000000             	// #16777216
   11d74:	add	w9, w10, w9
   11d78:	str	w9, [x8, #24]
   11d7c:	str	x11, [x19, #16]
   11d80:	str	xzr, [x8, #32]
   11d84:	add	x24, x24, #0x30
   11d88:	mov	x0, x24
   11d8c:	bl	b040 <_option_is_end@plt>
   11d90:	cbnz	w0, 11e68 <_argp_input@@Base+0x54c>
   11d94:	ldrb	w8, [x24, #24]
   11d98:	tst	w8, #0x4
   11d9c:	csel	x26, x24, x26, eq  // eq = none
   11da0:	ldrb	w8, [x26, #24]
   11da4:	tbnz	w8, #3, 11d84 <_argp_input@@Base+0x468>
   11da8:	mov	x0, x24
   11dac:	bl	b570 <_option_is_short@plt>
   11db0:	cbz	w0, 11e00 <_argp_input@@Base+0x4e4>
   11db4:	ldr	x8, [x19, #8]
   11db8:	ldr	w9, [x24, #8]
   11dbc:	add	x10, x8, #0x1
   11dc0:	str	x10, [x19, #8]
   11dc4:	strb	w9, [x8]
   11dc8:	ldr	x8, [x26, #16]
   11dcc:	cbz	x8, 11df8 <_argp_input@@Base+0x4dc>
   11dd0:	ldr	x8, [x19, #8]
   11dd4:	add	x9, x8, #0x1
   11dd8:	str	x9, [x19, #8]
   11ddc:	strb	w28, [x8]
   11de0:	ldrb	w8, [x26, #24]
   11de4:	tbz	w8, #0, 11df8 <_argp_input@@Base+0x4dc>
   11de8:	ldr	x8, [x19, #8]
   11dec:	add	x9, x8, #0x1
   11df0:	str	x9, [x19, #8]
   11df4:	strb	w28, [x8]
   11df8:	ldr	x8, [x19, #8]
   11dfc:	strb	wzr, [x8]
   11e00:	ldr	x1, [x24]
   11e04:	cbz	x1, 11d84 <_argp_input@@Base+0x468>
   11e08:	ldr	x27, [x19]
   11e0c:	ldr	x0, [x27, #16]
   11e10:	bl	11f20 <_argp_input@@Base+0x604>
   11e14:	tbz	w0, #31, 11d84 <_argp_input@@Base+0x468>
   11e18:	ldr	x8, [x24]
   11e1c:	ldr	x9, [x19, #16]
   11e20:	str	x8, [x9]
   11e24:	ldr	x8, [x26, #16]
   11e28:	cbz	x8, 11e40 <_argp_input@@Base+0x524>
   11e2c:	ldrb	w8, [x26, #24]
   11e30:	tst	w8, #0x1
   11e34:	mov	w8, #0x1                   	// #1
   11e38:	cinc	w9, w8, ne  // ne = any
   11e3c:	b	11e44 <_argp_input@@Base+0x528>
   11e40:	mov	w9, wzr
   11e44:	ldr	x8, [x19, #16]
   11e48:	str	w9, [x8, #8]
   11e4c:	str	xzr, [x8, #16]
   11e50:	ldr	w9, [x24, #8]
   11e54:	cbnz	w9, 11d54 <_argp_input@@Base+0x438>
   11e58:	ldr	w9, [x26, #8]
   11e5c:	b	11d54 <_argp_input@@Base+0x438>
   11e60:	ldr	x8, [x23, #8]
   11e64:	cbz	x8, 11f10 <_argp_input@@Base+0x5f4>
   11e68:	ldr	x8, [x23, #8]
   11e6c:	stp	x8, x23, [x20]
   11e70:	ldr	x8, [x19, #8]
   11e74:	str	wzr, [x20, #24]
   11e78:	str	x22, [x20, #32]
   11e7c:	str	w21, [x20, #40]
   11e80:	stp	xzr, xzr, [x20, #56]
   11e84:	str	x8, [x20, #16]
   11e88:	str	xzr, [x20, #48]
   11e8c:	cbz	x25, 11eb8 <_argp_input@@Base+0x59c>
   11e90:	mov	w8, #0xffffffff            	// #-1
   11e94:	add	w8, w8, #0x1
   11e98:	lsl	x9, x8, #5
   11e9c:	ldr	x9, [x25, x9]
   11ea0:	cbnz	x9, 11e94 <_argp_input@@Base+0x578>
   11ea4:	ldr	x9, [x19, #24]
   11ea8:	str	x9, [x20, #56]
   11eac:	ldr	x9, [x19, #24]
   11eb0:	add	x8, x9, w8, uxtw #3
   11eb4:	str	x8, [x19, #24]
   11eb8:	add	x3, x20, #0x48
   11ebc:	cbz	x25, 11ef0 <_argp_input@@Base+0x5d4>
   11ec0:	ldr	x0, [x25]
   11ec4:	cbz	x0, 11ef0 <_argp_input@@Base+0x5d4>
   11ec8:	mov	w2, wzr
   11ecc:	add	x21, x25, #0x20
   11ed0:	mov	x1, x20
   11ed4:	mov	x4, x19
   11ed8:	add	w22, w2, #0x1
   11edc:	bl	11d00 <_argp_input@@Base+0x3e4>
   11ee0:	mov	x3, x0
   11ee4:	ldr	x0, [x21], #32
   11ee8:	mov	w2, w22
   11eec:	cbnz	x0, 11ed0 <_argp_input@@Base+0x5b4>
   11ef0:	ldp	x20, x19, [sp, #80]
   11ef4:	ldp	x22, x21, [sp, #64]
   11ef8:	ldp	x24, x23, [sp, #48]
   11efc:	ldp	x26, x25, [sp, #32]
   11f00:	ldp	x28, x27, [sp, #16]
   11f04:	mov	x0, x3
   11f08:	ldp	x29, x30, [sp], #96
   11f0c:	ret
   11f10:	mov	x3, x20
   11f14:	mov	x20, xzr
   11f18:	cbnz	x25, 11ec0 <_argp_input@@Base+0x5a4>
   11f1c:	b	11ef0 <_argp_input@@Base+0x5d4>
   11f20:	stp	x29, x30, [sp, #-48]!
   11f24:	stp	x20, x19, [sp, #32]
   11f28:	mov	x19, x0
   11f2c:	ldr	x0, [x0]
   11f30:	str	x21, [sp, #16]
   11f34:	mov	x20, x1
   11f38:	mov	x21, x19
   11f3c:	mov	x29, sp
   11f40:	cbz	x0, 11f68 <_argp_input@@Base+0x64c>
   11f44:	mov	x21, x19
   11f48:	b	11f54 <_argp_input@@Base+0x638>
   11f4c:	ldr	x0, [x21, #32]!
   11f50:	cbz	x0, 11f68 <_argp_input@@Base+0x64c>
   11f54:	cbz	x20, 11f4c <_argp_input@@Base+0x630>
   11f58:	mov	x1, x20
   11f5c:	bl	b120 <strcmp@plt>
   11f60:	cbnz	w0, 11f4c <_argp_input@@Base+0x630>
   11f64:	b	11f74 <_argp_input@@Base+0x658>
   11f68:	cbz	x20, 11f74 <_argp_input@@Base+0x658>
   11f6c:	mov	w0, #0xffffffff            	// #-1
   11f70:	b	11f7c <_argp_input@@Base+0x660>
   11f74:	sub	x8, x21, x19
   11f78:	lsr	x0, x8, #5
   11f7c:	ldp	x20, x19, [sp, #32]
   11f80:	ldr	x21, [sp, #16]
   11f84:	ldp	x29, x30, [sp], #48
   11f88:	ret
   11f8c:	stp	x29, x30, [sp, #-64]!
   11f90:	str	x23, [sp, #16]
   11f94:	stp	x22, x21, [sp, #32]
   11f98:	stp	x20, x19, [sp, #48]
   11f9c:	ldr	w23, [x0, #136]
   11fa0:	ldp	x20, x8, [x0, #80]
   11fa4:	mov	x19, x0
   11fa8:	mov	x29, sp
   11fac:	sub	w9, w23, #0x1
   11fb0:	cmp	x20, x8
   11fb4:	str	w9, [x0, #136]
   11fb8:	b.cs	12040 <_argp_input@@Base+0x724>  // b.hs, b.nlast
   11fbc:	mov	x21, x1
   11fc0:	add	x22, x19, #0x70
   11fc4:	ldr	w8, [x19, #136]
   11fc8:	mov	x0, x20
   11fcc:	mov	x1, x22
   11fd0:	mov	w2, wzr
   11fd4:	add	w8, w8, #0x1
   11fd8:	mov	x3, x21
   11fdc:	str	w8, [x19, #136]
   11fe0:	bl	11c98 <_argp_input@@Base+0x37c>
   11fe4:	cmp	w0, #0x7
   11fe8:	b.ne	1201c <_argp_input@@Base+0x700>  // b.any
   11fec:	ldr	w8, [x19, #136]
   11ff0:	mov	w2, #0x6                   	// #6
   11ff4:	movk	w2, #0x100, lsl #16
   11ff8:	mov	x0, x20
   11ffc:	sub	w8, w8, #0x1
   12000:	mov	x1, x22
   12004:	mov	x3, xzr
   12008:	str	w8, [x19, #136]
   1200c:	bl	11c98 <_argp_input@@Base+0x37c>
   12010:	mov	w8, #0x6                   	// #6
   12014:	movk	w8, #0x100, lsl #16
   12018:	b	12020 <_argp_input@@Base+0x704>
   1201c:	mov	w8, wzr
   12020:	cmp	w0, #0x7
   12024:	add	x20, x20, #0x48
   12028:	b.ne	12038 <_argp_input@@Base+0x71c>  // b.any
   1202c:	ldr	x9, [x19, #88]
   12030:	cmp	x20, x9
   12034:	b.cc	11fc4 <_argp_input@@Base+0x6a8>  // b.lo, b.ul, b.last
   12038:	cbnz	w0, 1208c <_argp_input@@Base+0x770>
   1203c:	b	1204c <_argp_input@@Base+0x730>
   12040:	mov	w8, wzr
   12044:	mov	w0, #0x7                   	// #7
   12048:	cbnz	w0, 1208c <_argp_input@@Base+0x770>
   1204c:	mov	w9, #0x6                   	// #6
   12050:	movk	w9, #0x100, lsl #16
   12054:	cmp	w8, w9
   12058:	b.ne	12064 <_argp_input@@Base+0x748>  // b.any
   1205c:	ldr	w8, [x19, #120]
   12060:	str	w8, [x19, #136]
   12064:	ldr	w8, [x19, #136]
   12068:	subs	w8, w8, w23
   1206c:	b.ge	1207c <_argp_input@@Base+0x760>  // b.tcont
   12070:	mov	w8, #0x1                   	// #1
   12074:	str	w8, [x19, #104]
   12078:	b	1208c <_argp_input@@Base+0x770>
   1207c:	ldur	w9, [x20, #-48]
   12080:	add	w8, w8, w9
   12084:	add	w8, w8, #0x1
   12088:	stur	w8, [x20, #-48]
   1208c:	ldp	x20, x19, [sp, #48]
   12090:	ldp	x22, x21, [sp, #32]
   12094:	ldr	x23, [sp, #16]
   12098:	ldp	x29, x30, [sp], #64
   1209c:	ret
   120a0:	stp	x29, x30, [sp, #-48]!
   120a4:	stp	x22, x21, [sp, #16]
   120a8:	stp	x20, x19, [sp, #32]
   120ac:	mov	w19, w1
   120b0:	asr	w22, w1, #24
   120b4:	mov	x20, x0
   120b8:	mov	x29, sp
   120bc:	cbz	w22, 120f4 <_argp_input@@Base+0x7d8>
   120c0:	ldr	x8, [x20, #80]
   120c4:	ldr	x3, [x20, #40]
   120c8:	sbfx	w2, w19, #23, #1
   120cc:	sub	w9, w22, #0x1
   120d0:	mov	w10, #0x48                  	// #72
   120d4:	bfxil	w2, w19, #0, #24
   120d8:	smaddl	x0, w9, w10, x8
   120dc:	add	x1, x20, #0x70
   120e0:	bl	11c98 <_argp_input@@Base+0x37c>
   120e4:	mov	w21, w0
   120e8:	cmp	w21, #0x7
   120ec:	b.ne	121f0 <_argp_input@@Base+0x8d4>  // b.any
   120f0:	b	1213c <_argp_input@@Base+0x820>
   120f4:	ldr	x0, [x20, #8]
   120f8:	mov	w1, w19
   120fc:	bl	b300 <strchr@plt>
   12100:	cbz	x0, 12130 <_argp_input@@Base+0x814>
   12104:	mov	x8, x0
   12108:	ldp	x0, x9, [x20, #80]
   1210c:	cmp	x0, x9
   12110:	b.cs	12130 <_argp_input@@Base+0x814>  // b.hs, b.nlast
   12114:	ldr	x9, [x0, #16]
   12118:	cmp	x9, x8
   1211c:	b.hi	12204 <_argp_input@@Base+0x8e8>  // b.pmore
   12120:	ldr	x9, [x20, #88]
   12124:	add	x0, x0, #0x48
   12128:	cmp	x0, x9
   1212c:	b.cc	12114 <_argp_input@@Base+0x7f8>  // b.lo, b.ul, b.last
   12130:	mov	w21, #0x7                   	// #7
   12134:	cmp	w21, #0x7
   12138:	b.ne	121f0 <_argp_input@@Base+0x8d4>  // b.any
   1213c:	cbz	w22, 121bc <_argp_input@@Base+0x8a0>
   12140:	ldr	x8, [x20, #16]
   12144:	ldr	w9, [x8, #24]
   12148:	cmp	w9, w19
   1214c:	b.eq	12170 <_argp_input@@Base+0x854>  // b.none
   12150:	ldr	x9, [x8]
   12154:	cbz	x9, 12170 <_argp_input@@Base+0x854>
   12158:	ldr	w10, [x8, #56]
   1215c:	add	x9, x8, #0x20
   12160:	mov	x8, x9
   12164:	cmp	w10, w19
   12168:	b.ne	12150 <_argp_input@@Base+0x834>  // b.any
   1216c:	mov	x8, x9
   12170:	ldr	x8, [x8]
   12174:	adrp	x9, 2b000 <vasnprintf@@Base+0xec4>
   12178:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1217c:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   12180:	add	x9, x9, #0xc45
   12184:	cmp	x8, #0x0
   12188:	add	x0, x0, #0x7e4
   1218c:	add	x1, x1, #0xc61
   12190:	mov	w2, #0x5                   	// #5
   12194:	add	x19, x20, #0x70
   12198:	csel	x20, x9, x8, eq  // eq = none
   1219c:	bl	b580 <dcgettext@plt>
   121a0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   121a4:	mov	x3, x0
   121a8:	add	x1, x1, #0xc3c
   121ac:	mov	x0, x19
   121b0:	mov	x2, x20
   121b4:	bl	b320 <argp_error@plt>
   121b8:	b	121f0 <_argp_input@@Base+0x8d4>
   121bc:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   121c0:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   121c4:	add	x0, x0, #0x7e4
   121c8:	add	x1, x1, #0xc61
   121cc:	mov	w2, #0x5                   	// #5
   121d0:	add	x20, x20, #0x70
   121d4:	bl	b580 <dcgettext@plt>
   121d8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   121dc:	mov	x3, x0
   121e0:	add	x1, x1, #0xc34
   121e4:	mov	x0, x20
   121e8:	mov	w2, w19
   121ec:	bl	b320 <argp_error@plt>
   121f0:	mov	w0, w21
   121f4:	ldp	x20, x19, [sp, #32]
   121f8:	ldp	x22, x21, [sp, #16]
   121fc:	ldp	x29, x30, [sp], #48
   12200:	ret
   12204:	ldr	x3, [x20, #40]
   12208:	add	x1, x20, #0x70
   1220c:	mov	w2, w19
   12210:	b	120e0 <_argp_input@@Base+0x7c4>

0000000000012214 <argp_usage@@Base>:
   12214:	stp	x29, x30, [sp, #-16]!
   12218:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1221c:	ldr	x8, [x8, #3816]
   12220:	mov	w2, #0x106                 	// #262
   12224:	mov	x29, sp
   12228:	ldr	x1, [x8]
   1222c:	bl	b560 <argp_state_help@plt>
   12230:	ldp	x29, x30, [sp], #16
   12234:	ret

0000000000012238 <_option_is_short@@Base>:
   12238:	stp	x29, x30, [sp, #-32]!
   1223c:	ldrb	w8, [x0, #24]
   12240:	str	x19, [sp, #16]
   12244:	mov	x29, sp
   12248:	tbnz	w8, #3, 12270 <_option_is_short@@Base+0x38>
   1224c:	ldrsw	x19, [x0, #8]
   12250:	sub	w8, w19, #0x1
   12254:	cmp	w8, #0xfe
   12258:	b.hi	12270 <_option_is_short@@Base+0x38>  // b.pmore
   1225c:	bl	b140 <__ctype_b_loc@plt>
   12260:	ldr	x8, [x0]
   12264:	ldrh	w8, [x8, x19, lsl #1]
   12268:	ubfx	w0, w8, #14, #1
   1226c:	b	12274 <_option_is_short@@Base+0x3c>
   12270:	mov	w0, wzr
   12274:	ldr	x19, [sp, #16]
   12278:	ldp	x29, x30, [sp], #32
   1227c:	ret

0000000000012280 <_option_is_end@@Base>:
   12280:	ldr	w8, [x0, #8]
   12284:	cbz	w8, 12290 <_option_is_end@@Base+0x10>
   12288:	mov	w0, wzr
   1228c:	ret
   12290:	ldr	x8, [x0]
   12294:	cbz	x8, 122a0 <_option_is_end@@Base+0x20>
   12298:	mov	w0, wzr
   1229c:	ret
   122a0:	ldr	x8, [x0, #32]
   122a4:	cbz	x8, 122b0 <_option_is_end@@Base+0x30>
   122a8:	mov	w0, wzr
   122ac:	ret
   122b0:	ldr	w8, [x0, #40]
   122b4:	cmp	w8, #0x0
   122b8:	cset	w0, eq  // eq = none
   122bc:	ret
   122c0:	stp	x29, x30, [sp, #-64]!
   122c4:	str	x23, [sp, #16]
   122c8:	mov	x23, x0
   122cc:	mov	w0, #0x40                  	// #64
   122d0:	stp	x22, x21, [sp, #32]
   122d4:	stp	x20, x19, [sp, #48]
   122d8:	mov	x29, sp
   122dc:	mov	w21, w4
   122e0:	mov	x19, x3
   122e4:	mov	x20, x2
   122e8:	mov	x22, x1
   122ec:	bl	abc0 <malloc@plt>
   122f0:	cbz	x0, 1230c <_option_is_end@@Base+0x8c>
   122f4:	and	w8, w21, #0x1
   122f8:	stp	x23, x22, [x0]
   122fc:	stp	x20, x19, [x0, #16]
   12300:	stp	xzr, xzr, [x0, #48]
   12304:	strb	w8, [x0, #32]
   12308:	str	xzr, [x0, #40]
   1230c:	ldp	x20, x19, [sp, #48]
   12310:	ldp	x22, x21, [sp, #32]
   12314:	ldr	x23, [sp, #16]
   12318:	ldp	x29, x30, [sp], #64
   1231c:	ret
   12320:	stp	x29, x30, [sp, #-80]!
   12324:	stp	x26, x25, [sp, #16]
   12328:	mov	x26, x0
   1232c:	mov	w0, #0x40                  	// #64
   12330:	stp	x24, x23, [sp, #32]
   12334:	stp	x22, x21, [sp, #48]
   12338:	stp	x20, x19, [sp, #64]
   1233c:	mov	x29, sp
   12340:	mov	x21, x6
   12344:	mov	x19, x5
   12348:	mov	w24, w4
   1234c:	mov	x22, x3
   12350:	mov	x23, x2
   12354:	mov	x25, x1
   12358:	bl	abc0 <malloc@plt>
   1235c:	mov	x20, x0
   12360:	cbz	x0, 123bc <_option_is_end@@Base+0x13c>
   12364:	and	w8, w24, #0x1
   12368:	stp	x26, x25, [x20]
   1236c:	stp	x23, x22, [x20, #16]
   12370:	strb	w8, [x20, #32]
   12374:	cbz	x19, 123b4 <_option_is_end@@Base+0x134>
   12378:	lsr	x8, x19, #61
   1237c:	cbnz	x8, 123a4 <_option_is_end@@Base+0x124>
   12380:	lsl	x22, x19, #3
   12384:	mov	x0, x22
   12388:	bl	abc0 <malloc@plt>
   1238c:	str	x0, [x20, #40]
   12390:	cbz	x0, 123a4 <_option_is_end@@Base+0x124>
   12394:	mov	x1, x21
   12398:	mov	x2, x22
   1239c:	bl	a800 <memcpy@plt>
   123a0:	b	123b8 <_option_is_end@@Base+0x138>
   123a4:	mov	x0, x20
   123a8:	bl	b1d0 <free@plt>
   123ac:	mov	x20, xzr
   123b0:	b	123bc <_option_is_end@@Base+0x13c>
   123b4:	str	xzr, [x20, #40]
   123b8:	stp	x19, x19, [x20, #48]
   123bc:	mov	x0, x20
   123c0:	ldp	x20, x19, [sp, #64]
   123c4:	ldp	x22, x21, [sp, #48]
   123c8:	ldp	x24, x23, [sp, #32]
   123cc:	ldp	x26, x25, [sp, #16]
   123d0:	ldp	x29, x30, [sp], #80
   123d4:	ret
   123d8:	ldr	x0, [x0, #48]
   123dc:	ret
   123e0:	stp	x29, x30, [sp, #-16]!
   123e4:	ldr	x9, [x0, #48]
   123e8:	sub	x8, x1, #0x1
   123ec:	mov	x29, sp
   123f0:	cmp	x8, x9
   123f4:	b.cs	12408 <_option_is_end@@Base+0x188>  // b.hs, b.nlast
   123f8:	ldr	x9, [x0, #40]
   123fc:	ldr	x0, [x9, x8, lsl #3]
   12400:	ldp	x29, x30, [sp], #16
   12404:	ret
   12408:	bl	b020 <abort@plt>
   1240c:	stp	x29, x30, [sp, #-16]!
   12410:	ldr	x9, [x0, #48]
   12414:	sub	x8, x1, #0x1
   12418:	mov	x29, sp
   1241c:	cmp	x8, x9
   12420:	b.cs	12438 <_option_is_end@@Base+0x1b8>  // b.hs, b.nlast
   12424:	ldr	x9, [x0, #40]
   12428:	mov	w0, wzr
   1242c:	str	x2, [x9, x8, lsl #3]
   12430:	ldp	x29, x30, [sp], #16
   12434:	ret
   12438:	bl	b020 <abort@plt>
   1243c:	stp	x29, x30, [sp, #-16]!
   12440:	ldr	x8, [x0, #48]
   12444:	sub	x9, x1, #0x1
   12448:	mov	x29, sp
   1244c:	cmp	x9, x8
   12450:	b.cs	12464 <_option_is_end@@Base+0x1e4>  // b.hs, b.nlast
   12454:	cmp	x8, x1
   12458:	csinc	x0, xzr, x1, ls  // ls = plast
   1245c:	ldp	x29, x30, [sp], #16
   12460:	ret
   12464:	bl	b020 <abort@plt>
   12468:	stp	x29, x30, [sp, #-16]!
   1246c:	ldr	x8, [x0, #48]
   12470:	sub	x0, x1, #0x1
   12474:	mov	x29, sp
   12478:	cmp	x0, x8
   1247c:	b.cs	12488 <_option_is_end@@Base+0x208>  // b.hs, b.nlast
   12480:	ldp	x29, x30, [sp], #16
   12484:	ret
   12488:	bl	b020 <abort@plt>
   1248c:	stp	x29, x30, [sp, #-16]!
   12490:	ldr	x8, [x0, #48]
   12494:	mov	x29, sp
   12498:	cmp	x8, x1
   1249c:	b.ls	124b0 <_option_is_end@@Base+0x230>  // b.plast
   124a0:	ldr	x8, [x0, #40]
   124a4:	ldr	x0, [x8, x1, lsl #3]
   124a8:	ldp	x29, x30, [sp], #16
   124ac:	ret
   124b0:	bl	b020 <abort@plt>
   124b4:	stp	x29, x30, [sp, #-16]!
   124b8:	ldr	x8, [x0, #48]
   124bc:	mov	x29, sp
   124c0:	cmp	x8, x1
   124c4:	b.ls	124dc <_option_is_end@@Base+0x25c>  // b.plast
   124c8:	ldr	x8, [x0, #40]
   124cc:	add	x0, x1, #0x1
   124d0:	str	x2, [x8, x1, lsl #3]
   124d4:	ldp	x29, x30, [sp], #16
   124d8:	ret
   124dc:	bl	b020 <abort@plt>
   124e0:	stp	x29, x30, [sp, #-16]!
   124e4:	mov	x29, sp
   124e8:	bl	124f8 <_option_is_end@@Base+0x278>
   124ec:	add	x0, x0, #0x1
   124f0:	ldp	x29, x30, [sp], #16
   124f4:	ret
   124f8:	stp	x29, x30, [sp, #-64]!
   124fc:	cmp	x1, x2
   12500:	str	x23, [sp, #16]
   12504:	stp	x22, x21, [sp, #32]
   12508:	stp	x20, x19, [sp, #48]
   1250c:	mov	x29, sp
   12510:	b.hi	125dc <_option_is_end@@Base+0x35c>  // b.pmore
   12514:	ldr	x8, [x0, #48]
   12518:	mov	x20, x2
   1251c:	mov	x22, x0
   12520:	cmp	x8, x2
   12524:	b.cc	125dc <_option_is_end@@Base+0x35c>  // b.lo, b.ul, b.last
   12528:	cmp	x1, x20
   1252c:	b.cs	125b0 <_option_is_end@@Base+0x330>  // b.hs, b.nlast
   12530:	ldr	x23, [x22, #8]
   12534:	mov	x19, x3
   12538:	cbz	x23, 1256c <_option_is_end@@Base+0x2ec>
   1253c:	ldr	x8, [x22, #40]
   12540:	mov	x21, x1
   12544:	mov	x0, x19
   12548:	ldr	x1, [x8, x1, lsl #3]
   1254c:	blr	x23
   12550:	tbnz	w0, #0, 125a0 <_option_is_end@@Base+0x320>
   12554:	add	x1, x21, #0x1
   12558:	cmp	x20, x1
   1255c:	b.ne	1253c <_option_is_end@@Base+0x2bc>  // b.any
   12560:	mov	w8, wzr
   12564:	cbnz	wzr, 125ac <_option_is_end@@Base+0x32c>
   12568:	b	125a8 <_option_is_end@@Base+0x328>
   1256c:	ldr	x8, [x22, #40]
   12570:	sub	x9, x20, #0x1
   12574:	ldr	x10, [x8, x1, lsl #3]
   12578:	cmp	x10, x19
   1257c:	b.eq	125cc <_option_is_end@@Base+0x34c>  // b.none
   12580:	add	x1, x1, #0x1
   12584:	cmp	x20, x1
   12588:	b.ne	12574 <_option_is_end@@Base+0x2f4>  // b.any
   1258c:	mov	w8, wzr
   12590:	mov	x1, x9
   12594:	mov	x21, x1
   12598:	cbnz	w8, 125ac <_option_is_end@@Base+0x32c>
   1259c:	b	125a8 <_option_is_end@@Base+0x328>
   125a0:	mov	w8, #0x1                   	// #1
   125a4:	cbnz	w8, 125ac <_option_is_end@@Base+0x32c>
   125a8:	mov	w8, wzr
   125ac:	cbnz	w8, 125b4 <_option_is_end@@Base+0x334>
   125b0:	mov	x21, #0xffffffffffffffff    	// #-1
   125b4:	mov	x0, x21
   125b8:	ldp	x20, x19, [sp, #48]
   125bc:	ldp	x22, x21, [sp, #32]
   125c0:	ldr	x23, [sp, #16]
   125c4:	ldp	x29, x30, [sp], #64
   125c8:	ret
   125cc:	mov	w8, #0x1                   	// #1
   125d0:	mov	x21, x1
   125d4:	cbnz	w8, 125ac <_option_is_end@@Base+0x32c>
   125d8:	b	125a8 <_option_is_end@@Base+0x328>
   125dc:	bl	b020 <abort@plt>
   125e0:	stp	x29, x30, [sp, #-48]!
   125e4:	str	x21, [sp, #16]
   125e8:	stp	x20, x19, [sp, #32]
   125ec:	ldp	x21, x8, [x0, #48]
   125f0:	mov	x19, x0
   125f4:	mov	x20, x1
   125f8:	mov	x29, sp
   125fc:	cmp	x21, x8
   12600:	b.ne	12610 <_option_is_end@@Base+0x390>  // b.any
   12604:	mov	x0, x19
   12608:	bl	12d54 <_option_is_end@@Base+0xad4>
   1260c:	tbnz	w0, #31, 12644 <_option_is_end@@Base+0x3c4>
   12610:	ldr	x8, [x19, #40]
   12614:	cbz	x21, 12630 <_option_is_end@@Base+0x3b0>
   12618:	mov	x9, x21
   1261c:	add	x10, x8, x9, lsl #3
   12620:	ldur	x11, [x10, #-8]
   12624:	subs	x9, x9, #0x1
   12628:	str	x11, [x10]
   1262c:	b.ne	1261c <_option_is_end@@Base+0x39c>  // b.any
   12630:	str	x20, [x8]
   12634:	add	x8, x21, #0x1
   12638:	mov	w0, #0x1                   	// #1
   1263c:	str	x8, [x19, #48]
   12640:	b	12648 <_option_is_end@@Base+0x3c8>
   12644:	mov	x0, xzr
   12648:	ldp	x20, x19, [sp, #32]
   1264c:	ldr	x21, [sp, #16]
   12650:	ldp	x29, x30, [sp], #48
   12654:	ret
   12658:	stp	x29, x30, [sp, #-48]!
   1265c:	str	x21, [sp, #16]
   12660:	stp	x20, x19, [sp, #32]
   12664:	ldp	x21, x8, [x0, #48]
   12668:	mov	x19, x0
   1266c:	mov	x20, x1
   12670:	mov	x29, sp
   12674:	cmp	x21, x8
   12678:	b.ne	12688 <_option_is_end@@Base+0x408>  // b.any
   1267c:	mov	x0, x19
   12680:	bl	12d54 <_option_is_end@@Base+0xad4>
   12684:	tbnz	w0, #31, 1269c <_option_is_end@@Base+0x41c>
   12688:	ldr	x8, [x19, #40]
   1268c:	add	x0, x21, #0x1
   12690:	str	x20, [x8, x21, lsl #3]
   12694:	str	x0, [x19, #48]
   12698:	b	126a0 <_option_is_end@@Base+0x420>
   1269c:	mov	x0, xzr
   126a0:	ldp	x20, x19, [sp, #32]
   126a4:	ldr	x21, [sp, #16]
   126a8:	ldp	x29, x30, [sp], #48
   126ac:	ret
   126b0:	stp	x29, x30, [sp, #-64]!
   126b4:	stp	x22, x21, [sp, #32]
   126b8:	stp	x20, x19, [sp, #48]
   126bc:	ldr	x22, [x0, #48]
   126c0:	str	x23, [sp, #16]
   126c4:	sub	x23, x1, #0x1
   126c8:	mov	x29, sp
   126cc:	cmp	x23, x22
   126d0:	b.cs	1274c <_option_is_end@@Base+0x4cc>  // b.hs, b.nlast
   126d4:	ldr	x8, [x0, #56]
   126d8:	mov	x20, x0
   126dc:	mov	x19, x1
   126e0:	mov	x21, x2
   126e4:	cmp	x22, x8
   126e8:	b.ne	126f8 <_option_is_end@@Base+0x478>  // b.any
   126ec:	mov	x0, x20
   126f0:	bl	12d54 <_option_is_end@@Base+0xad4>
   126f4:	tbnz	w0, #31, 12744 <_option_is_end@@Base+0x4c4>
   126f8:	ldr	x8, [x20, #40]
   126fc:	cmp	x22, x23
   12700:	b.ls	12720 <_option_is_end@@Base+0x4a0>  // b.plast
   12704:	mov	x9, x22
   12708:	add	x10, x8, x9, lsl #3
   1270c:	ldur	x11, [x10, #-8]
   12710:	sub	x9, x9, #0x1
   12714:	cmp	x9, x23
   12718:	str	x11, [x10]
   1271c:	b.hi	12708 <_option_is_end@@Base+0x488>  // b.pmore
   12720:	str	x21, [x8, x23, lsl #3]
   12724:	add	x8, x22, #0x1
   12728:	str	x8, [x20, #48]
   1272c:	mov	x0, x19
   12730:	ldp	x20, x19, [sp, #48]
   12734:	ldp	x22, x21, [sp, #32]
   12738:	ldr	x23, [sp, #16]
   1273c:	ldp	x29, x30, [sp], #64
   12740:	ret
   12744:	mov	x19, xzr
   12748:	b	1272c <_option_is_end@@Base+0x4ac>
   1274c:	bl	b020 <abort@plt>
   12750:	stp	x29, x30, [sp, #-48]!
   12754:	stp	x22, x21, [sp, #16]
   12758:	stp	x20, x19, [sp, #32]
   1275c:	ldr	x22, [x0, #48]
   12760:	sub	x8, x1, #0x1
   12764:	mov	x29, sp
   12768:	cmp	x8, x22
   1276c:	b.cs	127e4 <_option_is_end@@Base+0x564>  // b.hs, b.nlast
   12770:	ldr	x8, [x0, #56]
   12774:	mov	x19, x0
   12778:	mov	x20, x1
   1277c:	mov	x21, x2
   12780:	cmp	x22, x8
   12784:	b.ne	12794 <_option_is_end@@Base+0x514>  // b.any
   12788:	mov	x0, x19
   1278c:	bl	12d54 <_option_is_end@@Base+0xad4>
   12790:	tbnz	w0, #31, 127dc <_option_is_end@@Base+0x55c>
   12794:	ldr	x8, [x19, #40]
   12798:	cmp	x22, x20
   1279c:	b.ls	127bc <_option_is_end@@Base+0x53c>  // b.plast
   127a0:	mov	x9, x22
   127a4:	add	x10, x8, x9, lsl #3
   127a8:	ldur	x11, [x10, #-8]
   127ac:	sub	x9, x9, #0x1
   127b0:	cmp	x9, x20
   127b4:	str	x11, [x10]
   127b8:	b.hi	127a4 <_option_is_end@@Base+0x524>  // b.pmore
   127bc:	str	x21, [x8, x20, lsl #3]
   127c0:	add	x8, x22, #0x1
   127c4:	add	x0, x20, #0x1
   127c8:	str	x8, [x19, #48]
   127cc:	ldp	x20, x19, [sp, #32]
   127d0:	ldp	x22, x21, [sp, #16]
   127d4:	ldp	x29, x30, [sp], #48
   127d8:	ret
   127dc:	mov	x0, xzr
   127e0:	b	127cc <_option_is_end@@Base+0x54c>
   127e4:	bl	b020 <abort@plt>
   127e8:	stp	x29, x30, [sp, #-48]!
   127ec:	stp	x22, x21, [sp, #16]
   127f0:	stp	x20, x19, [sp, #32]
   127f4:	ldr	x22, [x0, #48]
   127f8:	mov	x29, sp
   127fc:	cmp	x22, x1
   12800:	b.cc	12878 <_option_is_end@@Base+0x5f8>  // b.lo, b.ul, b.last
   12804:	ldr	x8, [x0, #56]
   12808:	mov	x19, x0
   1280c:	mov	x20, x1
   12810:	mov	x21, x2
   12814:	cmp	x22, x8
   12818:	b.ne	12828 <_option_is_end@@Base+0x5a8>  // b.any
   1281c:	mov	x0, x19
   12820:	bl	12d54 <_option_is_end@@Base+0xad4>
   12824:	tbnz	w0, #31, 12870 <_option_is_end@@Base+0x5f0>
   12828:	ldr	x8, [x19, #40]
   1282c:	cmp	x22, x20
   12830:	b.ls	12850 <_option_is_end@@Base+0x5d0>  // b.plast
   12834:	mov	x9, x22
   12838:	add	x10, x8, x9, lsl #3
   1283c:	ldur	x11, [x10, #-8]
   12840:	sub	x9, x9, #0x1
   12844:	cmp	x9, x20
   12848:	str	x11, [x10]
   1284c:	b.hi	12838 <_option_is_end@@Base+0x5b8>  // b.pmore
   12850:	str	x21, [x8, x20, lsl #3]
   12854:	add	x8, x22, #0x1
   12858:	add	x0, x20, #0x1
   1285c:	str	x8, [x19, #48]
   12860:	ldp	x20, x19, [sp, #32]
   12864:	ldp	x22, x21, [sp, #16]
   12868:	ldp	x29, x30, [sp], #48
   1286c:	ret
   12870:	mov	x0, xzr
   12874:	b	12860 <_option_is_end@@Base+0x5e0>
   12878:	bl	b020 <abort@plt>
   1287c:	stp	x29, x30, [sp, #-48]!
   12880:	stp	x22, x21, [sp, #16]
   12884:	stp	x20, x19, [sp, #32]
   12888:	ldr	x21, [x0, #48]
   1288c:	sub	x8, x1, #0x1
   12890:	mov	x29, sp
   12894:	cmp	x8, x21
   12898:	b.cs	128f4 <_option_is_end@@Base+0x674>  // b.hs, b.nlast
   1289c:	ldr	x9, [x0, #24]
   128a0:	ldr	x22, [x0, #40]
   128a4:	mov	x19, x0
   128a8:	mov	x20, x1
   128ac:	cbz	x9, 128b8 <_option_is_end@@Base+0x638>
   128b0:	ldr	x0, [x22, x8, lsl #3]
   128b4:	blr	x9
   128b8:	subs	x8, x21, x20
   128bc:	b.ls	128d8 <_option_is_end@@Base+0x658>  // b.plast
   128c0:	add	x9, x22, x20, lsl #3
   128c4:	ldr	x10, [x9]
   128c8:	subs	x8, x8, #0x1
   128cc:	stur	x10, [x9, #-8]
   128d0:	add	x9, x9, #0x8
   128d4:	b.ne	128c4 <_option_is_end@@Base+0x644>  // b.any
   128d8:	sub	x8, x21, #0x1
   128dc:	str	x8, [x19, #48]
   128e0:	ldp	x20, x19, [sp, #32]
   128e4:	ldp	x22, x21, [sp, #16]
   128e8:	mov	w0, #0x1                   	// #1
   128ec:	ldp	x29, x30, [sp], #48
   128f0:	ret
   128f4:	bl	b020 <abort@plt>
   128f8:	stp	x29, x30, [sp, #-48]!
   128fc:	stp	x22, x21, [sp, #16]
   12900:	stp	x20, x19, [sp, #32]
   12904:	ldr	x21, [x0, #48]
   12908:	mov	x29, sp
   1290c:	cmp	x21, x1
   12910:	b.ls	12978 <_option_is_end@@Base+0x6f8>  // b.plast
   12914:	ldr	x8, [x0, #24]
   12918:	ldr	x22, [x0, #40]
   1291c:	mov	x19, x0
   12920:	mov	x20, x1
   12924:	cbz	x8, 12930 <_option_is_end@@Base+0x6b0>
   12928:	ldr	x0, [x22, x20, lsl #3]
   1292c:	blr	x8
   12930:	add	x8, x20, #0x1
   12934:	cmp	x8, x21
   12938:	b.cs	1295c <_option_is_end@@Base+0x6dc>  // b.hs, b.nlast
   1293c:	mvn	x9, x20
   12940:	add	x8, x22, x8, lsl #3
   12944:	add	x9, x9, x21
   12948:	ldr	x10, [x8]
   1294c:	subs	x9, x9, #0x1
   12950:	stur	x10, [x8, #-8]
   12954:	add	x8, x8, #0x8
   12958:	b.ne	12948 <_option_is_end@@Base+0x6c8>  // b.any
   1295c:	sub	x8, x21, #0x1
   12960:	str	x8, [x19, #48]
   12964:	ldp	x20, x19, [sp, #32]
   12968:	ldp	x22, x21, [sp, #16]
   1296c:	mov	w0, #0x1                   	// #1
   12970:	ldp	x29, x30, [sp], #48
   12974:	ret
   12978:	bl	b020 <abort@plt>
   1297c:	stp	x29, x30, [sp, #-32]!
   12980:	ldr	x2, [x0, #48]
   12984:	mov	x3, x1
   12988:	mov	x1, xzr
   1298c:	str	x19, [sp, #16]
   12990:	mov	x29, sp
   12994:	mov	x19, x0
   12998:	bl	124f8 <_option_is_end@@Base+0x278>
   1299c:	cmn	x0, #0x1
   129a0:	b.eq	129b8 <_option_is_end@@Base+0x738>  // b.none
   129a4:	mov	x1, x0
   129a8:	mov	x0, x19
   129ac:	bl	128f8 <_option_is_end@@Base+0x678>
   129b0:	mov	w0, #0x1                   	// #1
   129b4:	b	129bc <_option_is_end@@Base+0x73c>
   129b8:	mov	w0, wzr
   129bc:	ldr	x19, [sp, #16]
   129c0:	ldp	x29, x30, [sp], #32
   129c4:	ret
   129c8:	stp	x29, x30, [sp, #-48]!
   129cc:	stp	x22, x21, [sp, #16]
   129d0:	stp	x20, x19, [sp, #32]
   129d4:	ldr	x20, [x0, #40]
   129d8:	mov	x19, x0
   129dc:	mov	x29, sp
   129e0:	cbz	x20, 12a0c <_option_is_end@@Base+0x78c>
   129e4:	ldr	x21, [x19, #24]
   129e8:	cbz	x21, 12a04 <_option_is_end@@Base+0x784>
   129ec:	ldr	x22, [x19, #48]
   129f0:	cbz	x22, 12a04 <_option_is_end@@Base+0x784>
   129f4:	ldr	x0, [x20], #8
   129f8:	blr	x21
   129fc:	subs	x22, x22, #0x1
   12a00:	b.ne	129f4 <_option_is_end@@Base+0x774>  // b.any
   12a04:	ldr	x0, [x19, #40]
   12a08:	bl	b1d0 <free@plt>
   12a0c:	mov	x0, x19
   12a10:	bl	b1d0 <free@plt>
   12a14:	ldp	x20, x19, [sp, #32]
   12a18:	ldp	x22, x21, [sp, #16]
   12a1c:	ldp	x29, x30, [sp], #48
   12a20:	ret
   12a24:	ldr	x9, [x0]
   12a28:	stp	x9, x0, [x8]
   12a2c:	ldp	x10, x9, [x0, #40]
   12a30:	stp	x9, x10, [x8, #16]
   12a34:	add	x9, x10, x9, lsl #3
   12a38:	str	x9, [x8, #32]
   12a3c:	ret
   12a40:	stp	x29, x30, [sp, #-16]!
   12a44:	cmp	x1, x2
   12a48:	mov	x29, sp
   12a4c:	b.hi	12a80 <_option_is_end@@Base+0x800>  // b.pmore
   12a50:	ldr	x9, [x0, #48]
   12a54:	cmp	x9, x2
   12a58:	b.cc	12a80 <_option_is_end@@Base+0x800>  // b.lo, b.ul, b.last
   12a5c:	ldr	x10, [x0]
   12a60:	stp	x0, x9, [x8, #8]
   12a64:	str	x10, [x8]
   12a68:	ldr	x9, [x0, #40]
   12a6c:	add	x10, x9, x1, lsl #3
   12a70:	add	x9, x9, x2, lsl #3
   12a74:	stp	x10, x9, [x8, #24]
   12a78:	ldp	x29, x30, [sp], #16
   12a7c:	ret
   12a80:	bl	b020 <abort@plt>
   12a84:	stp	x29, x30, [sp, #-16]!
   12a88:	ldp	x8, x9, [x0, #8]
   12a8c:	mov	x29, sp
   12a90:	ldr	x10, [x8, #48]
   12a94:	cmp	x9, x10
   12a98:	b.eq	12ac0 <_option_is_end@@Base+0x840>  // b.none
   12a9c:	add	x10, x10, #0x1
   12aa0:	cmp	x9, x10
   12aa4:	b.ne	12b0c <_option_is_end@@Base+0x88c>  // b.any
   12aa8:	ldp	x10, x11, [x0, #24]
   12aac:	sub	x9, x9, #0x1
   12ab0:	str	x9, [x0, #16]
   12ab4:	sub	x9, x10, #0x8
   12ab8:	sub	x10, x11, #0x8
   12abc:	stp	x9, x10, [x0, #24]
   12ac0:	ldp	x9, x10, [x0, #24]
   12ac4:	cmp	x9, x10
   12ac8:	b.cs	12b00 <_option_is_end@@Base+0x880>  // b.hs, b.nlast
   12acc:	ldr	x10, [x9]
   12ad0:	str	x10, [x1]
   12ad4:	cbz	x2, 12aec <_option_is_end@@Base+0x86c>
   12ad8:	ldr	x8, [x8, #40]
   12adc:	sub	x8, x9, x8
   12ae0:	asr	x8, x8, #3
   12ae4:	add	x8, x8, #0x1
   12ae8:	str	x8, [x2]
   12aec:	add	x8, x9, #0x8
   12af0:	str	x8, [x0, #24]
   12af4:	mov	w0, #0x1                   	// #1
   12af8:	ldp	x29, x30, [sp], #16
   12afc:	ret
   12b00:	mov	w0, wzr
   12b04:	ldp	x29, x30, [sp], #16
   12b08:	ret
   12b0c:	bl	b020 <abort@plt>
   12b10:	ret
   12b14:	stp	x29, x30, [sp, #-16]!
   12b18:	ldr	x3, [x0, #48]
   12b1c:	mov	x4, x2
   12b20:	mov	x2, xzr
   12b24:	mov	x29, sp
   12b28:	bl	12b70 <_option_is_end@@Base+0x8f0>
   12b2c:	add	x0, x0, #0x1
   12b30:	ldp	x29, x30, [sp], #16
   12b34:	ret
   12b38:	stp	x29, x30, [sp, #-16]!
   12b3c:	mov	x29, sp
   12b40:	bl	12b70 <_option_is_end@@Base+0x8f0>
   12b44:	add	x0, x0, #0x1
   12b48:	ldp	x29, x30, [sp], #16
   12b4c:	ret
   12b50:	stp	x29, x30, [sp, #-16]!
   12b54:	ldr	x3, [x0, #48]
   12b58:	mov	x4, x2
   12b5c:	mov	x2, xzr
   12b60:	mov	x29, sp
   12b64:	bl	12b70 <_option_is_end@@Base+0x8f0>
   12b68:	ldp	x29, x30, [sp], #16
   12b6c:	ret
   12b70:	stp	x29, x30, [sp, #-80]!
   12b74:	cmp	x2, x3
   12b78:	str	x25, [sp, #16]
   12b7c:	stp	x24, x23, [sp, #32]
   12b80:	stp	x22, x21, [sp, #48]
   12b84:	stp	x20, x19, [sp, #64]
   12b88:	mov	x29, sp
   12b8c:	b.hi	12c70 <_option_is_end@@Base+0x9f0>  // b.pmore
   12b90:	ldr	x8, [x0, #48]
   12b94:	mov	x23, x3
   12b98:	mov	x22, x0
   12b9c:	cmp	x8, x3
   12ba0:	b.cc	12c70 <_option_is_end@@Base+0x9f0>  // b.lo, b.ul, b.last
   12ba4:	mov	x21, x2
   12ba8:	cmp	x2, x23
   12bac:	b.cs	12c50 <_option_is_end@@Base+0x9d0>  // b.hs, b.nlast
   12bb0:	mov	x19, x4
   12bb4:	mov	x20, x1
   12bb8:	ldr	x8, [x22, #40]
   12bbc:	sub	x9, x23, x21
   12bc0:	add	x25, x21, x9, lsr #1
   12bc4:	mov	x1, x19
   12bc8:	ldr	x0, [x8, x25, lsl #3]
   12bcc:	blr	x20
   12bd0:	tbnz	w0, #31, 12c3c <_option_is_end@@Base+0x9bc>
   12bd4:	cbz	w0, 12bf0 <_option_is_end@@Base+0x970>
   12bd8:	mov	w8, #0x1                   	// #1
   12bdc:	mov	x23, x25
   12be0:	b	12c44 <_option_is_end@@Base+0x9c4>
   12be4:	add	x21, x24, #0x1
   12be8:	mov	w8, #0x1                   	// #1
   12bec:	tbz	w8, #0, 12c2c <_option_is_end@@Base+0x9ac>
   12bf0:	subs	x8, x25, x21
   12bf4:	b.ls	12c2c <_option_is_end@@Base+0x9ac>  // b.plast
   12bf8:	ldr	x9, [x22, #40]
   12bfc:	lsr	x23, x8, #1
   12c00:	add	x24, x23, x21
   12c04:	mov	x1, x19
   12c08:	ldr	x0, [x9, x24, lsl #3]
   12c0c:	blr	x20
   12c10:	tbnz	w0, #31, 12be4 <_option_is_end@@Base+0x964>
   12c14:	cbnz	w0, 12c70 <_option_is_end@@Base+0x9f0>
   12c18:	sub	x9, x24, #0x1
   12c1c:	cmp	x23, #0x0
   12c20:	cset	w8, ne  // ne = any
   12c24:	csel	x25, x25, x9, eq  // eq = none
   12c28:	tbnz	w8, #0, 12bf0 <_option_is_end@@Base+0x970>
   12c2c:	mov	w8, wzr
   12c30:	mov	x23, x25
   12c34:	mov	x24, x21
   12c38:	b	12c44 <_option_is_end@@Base+0x9c4>
   12c3c:	add	x21, x25, #0x1
   12c40:	mov	w8, #0x1                   	// #1
   12c44:	cbz	w8, 12c54 <_option_is_end@@Base+0x9d4>
   12c48:	cmp	x21, x23
   12c4c:	b.cc	12bb8 <_option_is_end@@Base+0x938>  // b.lo, b.ul, b.last
   12c50:	mov	x24, #0xffffffffffffffff    	// #-1
   12c54:	mov	x0, x24
   12c58:	ldp	x20, x19, [sp, #64]
   12c5c:	ldp	x22, x21, [sp, #48]
   12c60:	ldp	x24, x23, [sp, #32]
   12c64:	ldr	x25, [sp, #16]
   12c68:	ldp	x29, x30, [sp], #80
   12c6c:	ret
   12c70:	bl	b020 <abort@plt>
   12c74:	stp	x29, x30, [sp, #-64]!
   12c78:	stp	x24, x23, [sp, #16]
   12c7c:	stp	x22, x21, [sp, #32]
   12c80:	stp	x20, x19, [sp, #48]
   12c84:	ldr	x23, [x0, #48]
   12c88:	mov	x19, x2
   12c8c:	mov	x21, x1
   12c90:	mov	x20, x0
   12c94:	mov	x24, xzr
   12c98:	mov	x29, sp
   12c9c:	b	12cb0 <_option_is_end@@Base+0xa30>
   12ca0:	add	x24, x22, #0x1
   12ca4:	mov	w8, #0x1                   	// #1
   12ca8:	mov	x22, x24
   12cac:	tbz	w8, #0, 12cf0 <_option_is_end@@Base+0xa70>
   12cb0:	subs	x8, x23, x24
   12cb4:	b.ls	12cec <_option_is_end@@Base+0xa6c>  // b.plast
   12cb8:	ldr	x9, [x20, #40]
   12cbc:	add	x22, x24, x8, lsr #1
   12cc0:	mov	x1, x19
   12cc4:	ldr	x0, [x9, x22, lsl #3]
   12cc8:	blr	x21
   12ccc:	tbnz	w0, #31, 12ca0 <_option_is_end@@Base+0xa20>
   12cd0:	cbz	w0, 12cdc <_option_is_end@@Base+0xa5c>
   12cd4:	mov	x23, x22
   12cd8:	b	12ca4 <_option_is_end@@Base+0xa24>
   12cdc:	mov	w8, wzr
   12ce0:	mov	x24, x22
   12ce4:	tbnz	w8, #0, 12cb0 <_option_is_end@@Base+0xa30>
   12ce8:	b	12cf0 <_option_is_end@@Base+0xa70>
   12cec:	mov	x22, x24
   12cf0:	mov	x0, x20
   12cf4:	mov	x1, x22
   12cf8:	mov	x2, x19
   12cfc:	bl	127e8 <_option_is_end@@Base+0x568>
   12d00:	ldp	x20, x19, [sp, #48]
   12d04:	ldp	x22, x21, [sp, #32]
   12d08:	ldp	x24, x23, [sp, #16]
   12d0c:	ldp	x29, x30, [sp], #64
   12d10:	ret
   12d14:	stp	x29, x30, [sp, #-32]!
   12d18:	str	x19, [sp, #16]
   12d1c:	mov	x29, sp
   12d20:	mov	x19, x0
   12d24:	bl	12b50 <_option_is_end@@Base+0x8d0>
   12d28:	cmn	x0, #0x1
   12d2c:	b.eq	12d44 <_option_is_end@@Base+0xac4>  // b.none
   12d30:	mov	x1, x0
   12d34:	mov	x0, x19
   12d38:	bl	128f8 <_option_is_end@@Base+0x678>
   12d3c:	mov	w0, #0x1                   	// #1
   12d40:	b	12d48 <_option_is_end@@Base+0xac8>
   12d44:	mov	w0, wzr
   12d48:	ldr	x19, [sp, #16]
   12d4c:	ldp	x29, x30, [sp], #32
   12d50:	ret
   12d54:	stp	x29, x30, [sp, #-32]!
   12d58:	stp	x20, x19, [sp, #16]
   12d5c:	ldr	x8, [x0, #56]
   12d60:	mov	x19, x0
   12d64:	mov	w1, #0x1                   	// #1
   12d68:	mov	x29, sp
   12d6c:	lsl	x9, x8, #1
   12d70:	cmp	x8, #0x0
   12d74:	csinv	x0, x9, xzr, ge  // ge = tcont
   12d78:	bl	ad10 <xsum@plt>
   12d7c:	lsr	x8, x0, #61
   12d80:	cbnz	x8, 12dac <_option_is_end@@Base+0xb2c>
   12d84:	mov	x20, x0
   12d88:	ldr	x0, [x19, #40]
   12d8c:	lsl	x1, x20, #3
   12d90:	bl	aea0 <realloc@plt>
   12d94:	cbz	x0, 12dac <_option_is_end@@Base+0xb2c>
   12d98:	mov	x8, x0
   12d9c:	mov	w0, wzr
   12da0:	str	x8, [x19, #40]
   12da4:	str	x20, [x19, #56]
   12da8:	b	12db0 <_option_is_end@@Base+0xb30>
   12dac:	mov	w0, #0xffffffff            	// #-1
   12db0:	ldp	x20, x19, [sp, #16]
   12db4:	ldp	x29, x30, [sp], #32
   12db8:	ret

0000000000012dbc <rotl64@@Base>:
   12dbc:	neg	w8, w1
   12dc0:	ror	x0, x0, x8
   12dc4:	ret

0000000000012dc8 <rotr64@@Base>:
   12dc8:	ror	x0, x0, x1
   12dcc:	ret

0000000000012dd0 <rotl32@@Base>:
   12dd0:	neg	w8, w1
   12dd4:	ror	w0, w0, w8
   12dd8:	ret

0000000000012ddc <rotr32@@Base>:
   12ddc:	ror	w0, w0, w1
   12de0:	ret

0000000000012de4 <rotl_sz@@Base>:
   12de4:	sxtw	x9, w1
   12de8:	neg	x9, x9
   12dec:	lsl	x8, x0, x1
   12df0:	lsr	x9, x0, x9
   12df4:	orr	x0, x9, x8
   12df8:	ret

0000000000012dfc <rotr_sz@@Base>:
   12dfc:	sxtw	x9, w1
   12e00:	neg	x9, x9
   12e04:	lsr	x8, x0, x1
   12e08:	lsl	x9, x0, x9
   12e0c:	orr	x0, x9, x8
   12e10:	ret

0000000000012e14 <rotl16@@Base>:
   12e14:	neg	w10, w1
   12e18:	and	w8, w0, #0xffff
   12e1c:	and	w9, w1, #0xf
   12e20:	and	w10, w10, #0xf
   12e24:	lsl	w9, w0, w9
   12e28:	lsr	w8, w8, w10
   12e2c:	orr	w0, w9, w8
   12e30:	ret

0000000000012e34 <rotr16@@Base>:
   12e34:	and	w8, w0, #0xffff
   12e38:	and	w9, w1, #0xf
   12e3c:	neg	w10, w1
   12e40:	lsr	w8, w8, w9
   12e44:	and	w9, w10, #0xf
   12e48:	lsl	w9, w0, w9
   12e4c:	orr	w0, w9, w8
   12e50:	ret

0000000000012e54 <rotl8@@Base>:
   12e54:	neg	w10, w1
   12e58:	and	w8, w0, #0xff
   12e5c:	and	w9, w1, #0x7
   12e60:	and	w10, w10, #0x7
   12e64:	lsl	w9, w0, w9
   12e68:	lsr	w8, w8, w10
   12e6c:	orr	w0, w9, w8
   12e70:	ret

0000000000012e74 <rotr8@@Base>:
   12e74:	and	w8, w0, #0xff
   12e78:	and	w9, w1, #0x7
   12e7c:	neg	w10, w1
   12e80:	lsr	w8, w8, w9
   12e84:	and	w9, w10, #0x7
   12e88:	lsl	w9, w0, w9
   12e8c:	orr	w0, w9, w8
   12e90:	ret

0000000000012e94 <canonicalize_filename_mode@@Base>:
   12e94:	sub	sp, sp, #0x120
   12e98:	stp	x20, x19, [sp, #272]
   12e9c:	and	w20, w1, #0x3
   12ea0:	sub	w8, w20, #0x1
   12ea4:	stp	x29, x30, [sp, #192]
   12ea8:	add	x29, sp, #0xc0
   12eac:	tst	w20, w8
   12eb0:	stp	x28, x27, [sp, #208]
   12eb4:	stp	x26, x25, [sp, #224]
   12eb8:	stp	x24, x23, [sp, #240]
   12ebc:	stp	x22, x21, [sp, #256]
   12ec0:	stur	xzr, [x29, #-16]
   12ec4:	b.ne	12ef0 <canonicalize_filename_mode@@Base+0x5c>  // b.any
   12ec8:	mov	x25, x0
   12ecc:	cbz	x0, 12ef0 <canonicalize_filename_mode@@Base+0x5c>
   12ed0:	ldrb	w8, [x25]
   12ed4:	mov	w28, w1
   12ed8:	cmp	w8, #0x2f
   12edc:	b.eq	12f24 <canonicalize_filename_mode@@Base+0x90>  // b.none
   12ee0:	cbnz	w8, 132f8 <canonicalize_filename_mode@@Base+0x464>
   12ee4:	bl	b6f0 <__errno_location@plt>
   12ee8:	mov	w8, #0x2                   	// #2
   12eec:	b	12ef8 <canonicalize_filename_mode@@Base+0x64>
   12ef0:	bl	b6f0 <__errno_location@plt>
   12ef4:	mov	w8, #0x16                  	// #22
   12ef8:	mov	x19, xzr
   12efc:	str	w8, [x0]
   12f00:	mov	x0, x19
   12f04:	ldp	x20, x19, [sp, #272]
   12f08:	ldp	x22, x21, [sp, #256]
   12f0c:	ldp	x24, x23, [sp, #240]
   12f10:	ldp	x26, x25, [sp, #224]
   12f14:	ldp	x28, x27, [sp, #208]
   12f18:	ldp	x29, x30, [sp, #192]
   12f1c:	add	sp, sp, #0x120
   12f20:	ret
   12f24:	mov	w0, #0x1000                	// #4096
   12f28:	bl	ad70 <xmalloc@plt>
   12f2c:	mov	w8, #0x2f                  	// #47
   12f30:	mov	x26, x0
   12f34:	mov	x19, x0
   12f38:	add	x24, x0, #0x1, lsl #12
   12f3c:	strb	w8, [x26], #1
   12f40:	ldrb	w8, [x25]
   12f44:	cbz	w8, 1334c <canonicalize_filename_mode@@Base+0x4b8>
   12f48:	and	w8, w28, #0x7
   12f4c:	str	w8, [sp, #44]
   12f50:	cmp	w20, #0x2
   12f54:	mov	w8, #0xd                   	// #13
   12f58:	mov	w9, #0x4                   	// #4
   12f5c:	csel	w8, w9, w8, eq  // eq = none
   12f60:	stp	x25, xzr, [sp, #24]
   12f64:	str	xzr, [sp, #16]
   12f68:	stp	w28, w8, [sp, #8]
   12f6c:	b	12f7c <canonicalize_filename_mode@@Base+0xe8>
   12f70:	mov	x26, x21
   12f74:	ldrb	w8, [x25]
   12f78:	cbz	w8, 13350 <canonicalize_filename_mode@@Base+0x4bc>
   12f7c:	sub	x23, x25, #0x1
   12f80:	ldrb	w8, [x23, #1]!
   12f84:	cmp	w8, #0x2f
   12f88:	b.eq	12f80 <canonicalize_filename_mode@@Base+0xec>  // b.none
   12f8c:	mov	x25, x23
   12f90:	ldrb	w9, [x25]
   12f94:	cbz	w9, 12fac <canonicalize_filename_mode@@Base+0x118>
   12f98:	cmp	w9, #0x2f
   12f9c:	b.eq	12fac <canonicalize_filename_mode@@Base+0x118>  // b.none
   12fa0:	add	x25, x25, #0x1
   12fa4:	ldrb	w9, [x25]
   12fa8:	cbnz	w9, 12f98 <canonicalize_filename_mode@@Base+0x104>
   12fac:	sub	x27, x25, x23
   12fb0:	cmp	x27, #0x1
   12fb4:	b.eq	12fc8 <canonicalize_filename_mode@@Base+0x134>  // b.none
   12fb8:	cmp	x27, #0x2
   12fbc:	b.eq	12fd4 <canonicalize_filename_mode@@Base+0x140>  // b.none
   12fc0:	cbnz	x27, 13018 <canonicalize_filename_mode@@Base+0x184>
   12fc4:	b	13350 <canonicalize_filename_mode@@Base+0x4bc>
   12fc8:	cmp	w8, #0x2e
   12fcc:	b.eq	12f74 <canonicalize_filename_mode@@Base+0xe0>  // b.none
   12fd0:	b	13018 <canonicalize_filename_mode@@Base+0x184>
   12fd4:	cmp	w8, #0x2e
   12fd8:	b.ne	13018 <canonicalize_filename_mode@@Base+0x184>  // b.any
   12fdc:	ldrb	w8, [x23, #1]
   12fe0:	cmp	w8, #0x2e
   12fe4:	b.ne	13018 <canonicalize_filename_mode@@Base+0x184>  // b.any
   12fe8:	add	x8, x19, #0x1
   12fec:	cmp	x26, x8
   12ff0:	b.ls	12f74 <canonicalize_filename_mode@@Base+0xe0>  // b.plast
   12ff4:	sub	x8, x26, #0x1
   12ff8:	mov	x26, x8
   12ffc:	cmp	x8, x19
   13000:	b.ls	12f74 <canonicalize_filename_mode@@Base+0xe0>  // b.plast
   13004:	mov	x8, x26
   13008:	ldrb	w9, [x8, #-1]!
   1300c:	cmp	w9, #0x2f
   13010:	b.ne	12ff8 <canonicalize_filename_mode@@Base+0x164>  // b.any
   13014:	b	12f74 <canonicalize_filename_mode@@Base+0xe0>
   13018:	ldurb	w8, [x26, #-1]
   1301c:	cmp	w8, #0x2f
   13020:	b.eq	1302c <canonicalize_filename_mode@@Base+0x198>  // b.none
   13024:	mov	w8, #0x2f                  	// #47
   13028:	strb	w8, [x26], #1
   1302c:	add	x8, x26, x27
   13030:	cmp	x8, x24
   13034:	b.cc	13068 <canonicalize_filename_mode@@Base+0x1d4>  // b.lo, b.ul, b.last
   13038:	cmp	x27, #0x1, lsl #12
   1303c:	mov	w9, #0x1000                	// #4096
   13040:	sub	x8, x24, x19
   13044:	csinc	x9, x9, x27, lt  // lt = tstop
   13048:	add	x21, x9, x8
   1304c:	mov	x0, x19
   13050:	mov	x1, x21
   13054:	sub	x22, x26, x19
   13058:	bl	ac70 <xrealloc@plt>
   1305c:	mov	x19, x0
   13060:	add	x24, x0, x21
   13064:	add	x26, x0, x22
   13068:	mov	x0, x26
   1306c:	mov	x1, x23
   13070:	mov	x2, x27
   13074:	bl	a800 <memcpy@plt>
   13078:	ldr	w8, [sp, #44]
   1307c:	add	x21, x26, x27
   13080:	strb	wzr, [x21]
   13084:	cmp	w8, #0x6
   13088:	b.ne	130c8 <canonicalize_filename_mode@@Base+0x234>  // b.any
   1308c:	str	wzr, [sp, #64]
   13090:	ldr	w8, [sp, #64]
   13094:	and	w8, w8, #0xf000
   13098:	cmp	w8, #0xa, lsl #12
   1309c:	b.eq	130e0 <canonicalize_filename_mode@@Base+0x24c>  // b.none
   130a0:	cmp	w8, #0x4, lsl #12
   130a4:	b.eq	132d8 <canonicalize_filename_mode@@Base+0x444>  // b.none
   130a8:	cmp	w20, #0x2
   130ac:	b.eq	132d8 <canonicalize_filename_mode@@Base+0x444>  // b.none
   130b0:	ldrb	w8, [x25]
   130b4:	cbz	w8, 132d8 <canonicalize_filename_mode@@Base+0x444>
   130b8:	mov	w9, #0x14                  	// #20
   130bc:	mov	w8, #0xd                   	// #13
   130c0:	str	w9, [sp, #40]
   130c4:	b	132dc <canonicalize_filename_mode@@Base+0x448>
   130c8:	add	x1, sp, #0x30
   130cc:	mov	x0, x19
   130d0:	tbnz	w28, #2, 1311c <canonicalize_filename_mode@@Base+0x288>
   130d4:	bl	2ae30 <vasnprintf@@Base+0xcf4>
   130d8:	cbnz	w0, 13124 <canonicalize_filename_mode@@Base+0x290>
   130dc:	b	13090 <canonicalize_filename_mode@@Base+0x1fc>
   130e0:	ldr	x1, [sp, #24]
   130e4:	sub	x0, x29, #0x10
   130e8:	add	x2, sp, #0x30
   130ec:	bl	133dc <canonicalize_filename_mode@@Base+0x548>
   130f0:	tbz	w0, #0, 13144 <canonicalize_filename_mode@@Base+0x2b0>
   130f4:	ldr	w8, [sp, #40]
   130f8:	cmp	w20, #0x2
   130fc:	mov	w9, #0x28                  	// #40
   13100:	mov	x23, x25
   13104:	csel	w8, w8, w9, eq  // eq = none
   13108:	str	w8, [sp, #40]
   1310c:	ldr	w8, [sp, #12]
   13110:	mov	x25, x23
   13114:	cbnz	w8, 132dc <canonicalize_filename_mode@@Base+0x448>
   13118:	b	132d8 <canonicalize_filename_mode@@Base+0x444>
   1311c:	bl	2ae10 <vasnprintf@@Base+0xcd4>
   13120:	cbz	w0, 13090 <canonicalize_filename_mode@@Base+0x1fc>
   13124:	bl	b6f0 <__errno_location@plt>
   13128:	ldr	w8, [x0]
   1312c:	cmp	w20, #0x1
   13130:	str	w8, [sp, #40]
   13134:	b.eq	131a8 <canonicalize_filename_mode@@Base+0x314>  // b.none
   13138:	cbnz	w20, 1308c <canonicalize_filename_mode@@Base+0x1f8>
   1313c:	mov	w8, #0xd                   	// #13
   13140:	b	132dc <canonicalize_filename_mode@@Base+0x448>
   13144:	ldr	x1, [sp, #96]
   13148:	mov	x0, x19
   1314c:	bl	b310 <areadlink_with_size@plt>
   13150:	cbz	x0, 131f4 <canonicalize_filename_mode@@Base+0x360>
   13154:	mov	x28, x0
   13158:	bl	a890 <strlen@plt>
   1315c:	mov	x22, x0
   13160:	mov	x0, x25
   13164:	bl	a890 <strlen@plt>
   13168:	add	x8, x0, x22
   1316c:	str	x22, [sp, #24]
   13170:	add	x22, x8, #0x1
   13174:	ldr	x8, [sp, #16]
   13178:	mov	x9, x0
   1317c:	cbz	x8, 13224 <canonicalize_filename_mode@@Base+0x390>
   13180:	cmp	x22, x8
   13184:	b.ls	13248 <canonicalize_filename_mode@@Base+0x3b4>  // b.plast
   13188:	ldr	x0, [sp, #32]
   1318c:	mov	x1, x22
   13190:	mov	x23, x9
   13194:	bl	ac70 <xrealloc@plt>
   13198:	mov	x9, x23
   1319c:	mov	x23, x0
   131a0:	str	x22, [sp, #16]
   131a4:	b	1324c <canonicalize_filename_mode@@Base+0x3b8>
   131a8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   131ac:	mov	x0, x25
   131b0:	add	x1, x1, #0x63b
   131b4:	bl	b2d0 <strspn@plt>
   131b8:	ldrb	w8, [x25, x0]
   131bc:	ldr	w10, [sp, #40]
   131c0:	cmp	w8, #0x0
   131c4:	cset	w8, ne  // ne = any
   131c8:	cmp	w10, #0x2
   131cc:	cset	w9, ne  // ne = any
   131d0:	orr	w8, w9, w8
   131d4:	cmp	w8, #0x0
   131d8:	mov	w8, #0x2                   	// #2
   131dc:	csel	w10, w10, w8, ne  // ne = any
   131e0:	mov	w8, #0xd                   	// #13
   131e4:	mov	w9, #0x4                   	// #4
   131e8:	str	w10, [sp, #40]
   131ec:	csel	w8, w8, w9, ne  // ne = any
   131f0:	b	132dc <canonicalize_filename_mode@@Base+0x448>
   131f4:	cmp	w20, #0x2
   131f8:	b.ne	1320c <canonicalize_filename_mode@@Base+0x378>  // b.any
   131fc:	bl	b6f0 <__errno_location@plt>
   13200:	ldr	w8, [x0]
   13204:	cmp	w8, #0xc
   13208:	b.ne	132ec <canonicalize_filename_mode@@Base+0x458>  // b.any
   1320c:	bl	b6f0 <__errno_location@plt>
   13210:	ldr	w8, [x0]
   13214:	mov	x23, x25
   13218:	str	w8, [sp, #40]
   1321c:	mov	w8, #0xd                   	// #13
   13220:	b	132cc <canonicalize_filename_mode@@Base+0x438>
   13224:	cmp	x22, #0x1, lsl #12
   13228:	mov	w8, #0x1000                	// #4096
   1322c:	csel	x0, x22, x8, hi  // hi = pmore
   13230:	str	x0, [sp, #16]
   13234:	mov	x22, x9
   13238:	bl	ad70 <xmalloc@plt>
   1323c:	mov	x9, x22
   13240:	mov	x23, x0
   13244:	b	1324c <canonicalize_filename_mode@@Base+0x3b8>
   13248:	ldr	x23, [sp, #32]
   1324c:	ldr	x22, [sp, #24]
   13250:	add	x2, x9, #0x1
   13254:	mov	x1, x25
   13258:	add	x0, x23, x22
   1325c:	bl	a810 <memmove@plt>
   13260:	mov	x0, x23
   13264:	mov	x1, x28
   13268:	mov	x2, x22
   1326c:	bl	a800 <memcpy@plt>
   13270:	ldrb	w8, [x28]
   13274:	cmp	w8, #0x2f
   13278:	add	x8, x19, #0x1
   1327c:	b.ne	13290 <canonicalize_filename_mode@@Base+0x3fc>  // b.any
   13280:	mov	w9, #0x2f                  	// #47
   13284:	strb	w9, [x19]
   13288:	mov	x21, x8
   1328c:	b	132bc <canonicalize_filename_mode@@Base+0x428>
   13290:	cmp	x21, x8
   13294:	b.ls	132bc <canonicalize_filename_mode@@Base+0x428>  // b.plast
   13298:	add	x8, x26, x27
   1329c:	sub	x8, x8, #0x1
   132a0:	mov	x21, x8
   132a4:	cmp	x8, x19
   132a8:	b.ls	132bc <canonicalize_filename_mode@@Base+0x428>  // b.plast
   132ac:	mov	x8, x21
   132b0:	ldrb	w9, [x8, #-1]!
   132b4:	cmp	w9, #0x2f
   132b8:	b.ne	132a0 <canonicalize_filename_mode@@Base+0x40c>  // b.any
   132bc:	mov	x0, x28
   132c0:	bl	b1d0 <free@plt>
   132c4:	mov	w8, wzr
   132c8:	stp	x23, x23, [sp, #24]
   132cc:	ldr	w28, [sp, #8]
   132d0:	mov	x25, x23
   132d4:	cbnz	w8, 132dc <canonicalize_filename_mode@@Base+0x448>
   132d8:	mov	w8, wzr
   132dc:	cbz	w8, 12f70 <canonicalize_filename_mode@@Base+0xdc>
   132e0:	cmp	w8, #0x4
   132e4:	b.eq	12f70 <canonicalize_filename_mode@@Base+0xdc>  // b.none
   132e8:	b	133a8 <canonicalize_filename_mode@@Base+0x514>
   132ec:	mov	w8, #0x4                   	// #4
   132f0:	mov	x23, x25
   132f4:	b	132cc <canonicalize_filename_mode@@Base+0x438>
   132f8:	bl	b870 <xgetcwd@plt>
   132fc:	mov	x19, x0
   13300:	cbz	x0, 12f00 <canonicalize_filename_mode@@Base+0x6c>
   13304:	mov	x0, x19
   13308:	bl	a890 <strlen@plt>
   1330c:	mov	x21, x0
   13310:	cmp	x0, #0xfff
   13314:	b.gt	1333c <canonicalize_filename_mode@@Base+0x4a8>
   13318:	mov	w1, #0x1000                	// #4096
   1331c:	mov	x0, x19
   13320:	bl	ac70 <xrealloc@plt>
   13324:	mov	x19, x0
   13328:	add	x26, x0, x21
   1332c:	add	x24, x0, #0x1, lsl #12
   13330:	ldrb	w8, [x25]
   13334:	cbnz	w8, 12f48 <canonicalize_filename_mode@@Base+0xb4>
   13338:	b	1334c <canonicalize_filename_mode@@Base+0x4b8>
   1333c:	add	x24, x19, x21
   13340:	mov	x26, x24
   13344:	ldrb	w8, [x25]
   13348:	cbnz	w8, 12f48 <canonicalize_filename_mode@@Base+0xb4>
   1334c:	str	xzr, [sp, #32]
   13350:	add	x8, x19, #0x1
   13354:	cmp	x26, x8
   13358:	b.ls	1336c <canonicalize_filename_mode@@Base+0x4d8>  // b.plast
   1335c:	mov	x8, x26
   13360:	ldrb	w9, [x8, #-1]!
   13364:	cmp	w9, #0x2f
   13368:	csel	x26, x8, x26, eq  // eq = none
   1336c:	mov	x8, x26
   13370:	strb	wzr, [x8], #1
   13374:	cmp	x24, x8
   13378:	b.eq	13390 <canonicalize_filename_mode@@Base+0x4fc>  // b.none
   1337c:	sub	x8, x26, x19
   13380:	add	x1, x8, #0x1
   13384:	mov	x0, x19
   13388:	bl	ac70 <xrealloc@plt>
   1338c:	mov	x19, x0
   13390:	ldr	x0, [sp, #32]
   13394:	bl	b1d0 <free@plt>
   13398:	ldur	x0, [x29, #-16]
   1339c:	cbz	x0, 12f00 <canonicalize_filename_mode@@Base+0x6c>
   133a0:	bl	ab40 <hash_free@plt>
   133a4:	b	12f00 <canonicalize_filename_mode@@Base+0x6c>
   133a8:	cmp	w8, #0xd
   133ac:	b.ne	133d8 <canonicalize_filename_mode@@Base+0x544>  // b.any
   133b0:	ldr	x0, [sp, #32]
   133b4:	bl	b1d0 <free@plt>
   133b8:	mov	x0, x19
   133bc:	bl	b1d0 <free@plt>
   133c0:	ldur	x0, [x29, #-16]
   133c4:	cbz	x0, 133cc <canonicalize_filename_mode@@Base+0x538>
   133c8:	bl	ab40 <hash_free@plt>
   133cc:	bl	b6f0 <__errno_location@plt>
   133d0:	ldr	w8, [sp, #40]
   133d4:	b	12ef8 <canonicalize_filename_mode@@Base+0x64>
   133d8:	b	12f00 <canonicalize_filename_mode@@Base+0x6c>
   133dc:	stp	x29, x30, [sp, #-48]!
   133e0:	stp	x20, x19, [sp, #32]
   133e4:	ldr	x8, [x0]
   133e8:	str	x21, [sp, #16]
   133ec:	mov	x19, x2
   133f0:	mov	x21, x0
   133f4:	mov	x20, x1
   133f8:	mov	x29, sp
   133fc:	cbnz	x8, 1342c <canonicalize_filename_mode@@Base+0x598>
   13400:	adrp	x2, 3f000 <vasnprintf@@Base+0x14ec4>
   13404:	adrp	x3, 3f000 <vasnprintf@@Base+0x14ec4>
   13408:	adrp	x4, 3f000 <vasnprintf@@Base+0x14ec4>
   1340c:	ldr	x2, [x2, #3888]
   13410:	ldr	x3, [x3, #3928]
   13414:	ldr	x4, [x4, #3848]
   13418:	mov	w0, #0x7                   	// #7
   1341c:	mov	x1, xzr
   13420:	bl	aec0 <hash_initialize@plt>
   13424:	str	x0, [x21]
   13428:	cbz	x0, 1346c <canonicalize_filename_mode@@Base+0x5d8>
   1342c:	ldr	x0, [x21]
   13430:	mov	x1, x20
   13434:	mov	x2, x19
   13438:	bl	b160 <seen_file@plt>
   1343c:	tbz	w0, #0, 13448 <canonicalize_filename_mode@@Base+0x5b4>
   13440:	mov	w0, #0x1                   	// #1
   13444:	b	1345c <canonicalize_filename_mode@@Base+0x5c8>
   13448:	ldr	x0, [x21]
   1344c:	mov	x1, x20
   13450:	mov	x2, x19
   13454:	bl	abe0 <record_file@plt>
   13458:	mov	w0, wzr
   1345c:	ldp	x20, x19, [sp, #32]
   13460:	ldr	x21, [sp, #16]
   13464:	ldp	x29, x30, [sp], #48
   13468:	ret
   1346c:	bl	af90 <xalloc_die@plt>

0000000000013470 <set_cloexec_flag@@Base>:
   13470:	stp	x29, x30, [sp, #-32]!
   13474:	stp	x20, x19, [sp, #16]
   13478:	mov	w20, w1
   1347c:	mov	w1, #0x1                   	// #1
   13480:	mov	w2, wzr
   13484:	mov	x29, sp
   13488:	mov	w19, w0
   1348c:	bl	b390 <rpl_fcntl@plt>
   13490:	tbnz	w0, #31, 134b4 <set_cloexec_flag@@Base+0x44>
   13494:	orr	w8, w0, #0x1
   13498:	and	w9, w0, #0xfffffffe
   1349c:	tst	w20, #0x1
   134a0:	csel	w2, w8, w9, ne  // ne = any
   134a4:	cmp	w0, w2
   134a8:	b.ne	134bc <set_cloexec_flag@@Base+0x4c>  // b.any
   134ac:	mov	w0, wzr
   134b0:	b	134d0 <set_cloexec_flag@@Base+0x60>
   134b4:	mov	w0, #0xffffffff            	// #-1
   134b8:	b	134d0 <set_cloexec_flag@@Base+0x60>
   134bc:	mov	w1, #0x2                   	// #2
   134c0:	mov	w0, w19
   134c4:	bl	b390 <rpl_fcntl@plt>
   134c8:	cmn	w0, #0x1
   134cc:	csetm	w0, eq  // eq = none
   134d0:	ldp	x20, x19, [sp, #16]
   134d4:	ldp	x29, x30, [sp], #32
   134d8:	ret

00000000000134dc <dup_cloexec@@Base>:
   134dc:	stp	x29, x30, [sp, #-16]!
   134e0:	mov	w1, #0x406                 	// #1030
   134e4:	mov	w2, wzr
   134e8:	mov	x29, sp
   134ec:	bl	b390 <rpl_fcntl@plt>
   134f0:	ldp	x29, x30, [sp], #16
   134f4:	ret

00000000000134f8 <dir_name@@Base>:
   134f8:	stp	x29, x30, [sp, #-16]!
   134fc:	mov	x29, sp
   13500:	bl	ab00 <mdir_name@plt>
   13504:	cbz	x0, 13510 <dir_name@@Base+0x18>
   13508:	ldp	x29, x30, [sp], #16
   1350c:	ret
   13510:	bl	af90 <xalloc_die@plt>

0000000000013514 <base_name@@Base>:
   13514:	stp	x29, x30, [sp, #-32]!
   13518:	stp	x20, x19, [sp, #16]
   1351c:	mov	x29, sp
   13520:	mov	x19, x0
   13524:	bl	ae20 <last_component@plt>
   13528:	ldrb	w8, [x0]
   1352c:	cbz	w8, 1354c <base_name@@Base+0x38>
   13530:	mov	x20, x0
   13534:	bl	a7e0 <base_len@plt>
   13538:	ldrb	w8, [x20, x0]
   1353c:	cmp	w8, #0x2f
   13540:	cinc	x1, x0, eq  // eq = none
   13544:	mov	x0, x20
   13548:	b	1355c <base_name@@Base+0x48>
   1354c:	mov	x0, x19
   13550:	bl	a7e0 <base_len@plt>
   13554:	mov	x1, x0
   13558:	mov	x0, x19
   1355c:	bl	b4a0 <xstrndup@plt>
   13560:	ldp	x20, x19, [sp, #16]
   13564:	ldp	x29, x30, [sp], #32
   13568:	ret

000000000001356c <dir_len@@Base>:
   1356c:	stp	x29, x30, [sp, #-48]!
   13570:	str	x21, [sp, #16]
   13574:	stp	x20, x19, [sp, #32]
   13578:	mov	x20, x0
   1357c:	ldrb	w8, [x20], #-1
   13580:	mov	x29, sp
   13584:	mov	x19, x0
   13588:	cmp	w8, #0x2f
   1358c:	cset	w21, eq  // eq = none
   13590:	bl	ae20 <last_component@plt>
   13594:	sub	x8, x0, x19
   13598:	mov	x0, x8
   1359c:	cmp	x8, x21
   135a0:	b.ls	135b4 <dir_len@@Base+0x48>  // b.plast
   135a4:	ldrb	w8, [x20, x0]
   135a8:	cmp	w8, #0x2f
   135ac:	sub	x8, x0, #0x1
   135b0:	b.eq	13598 <dir_len@@Base+0x2c>  // b.none
   135b4:	ldp	x20, x19, [sp, #32]
   135b8:	ldr	x21, [sp, #16]
   135bc:	ldp	x29, x30, [sp], #48
   135c0:	ret

00000000000135c4 <mdir_name@@Base>:
   135c4:	stp	x29, x30, [sp, #-48]!
   135c8:	str	x21, [sp, #16]
   135cc:	stp	x20, x19, [sp, #32]
   135d0:	mov	x29, sp
   135d4:	mov	x21, x0
   135d8:	bl	b1a0 <dir_len@plt>
   135dc:	cmp	x0, #0x0
   135e0:	cinc	x8, x0, eq  // eq = none
   135e4:	mov	x20, x0
   135e8:	add	x0, x8, #0x1
   135ec:	bl	abc0 <malloc@plt>
   135f0:	mov	x19, x0
   135f4:	cbz	x0, 1361c <mdir_name@@Base+0x58>
   135f8:	mov	x0, x19
   135fc:	mov	x1, x21
   13600:	mov	x2, x20
   13604:	bl	a800 <memcpy@plt>
   13608:	cbnz	x20, 13618 <mdir_name@@Base+0x54>
   1360c:	mov	w8, #0x2e                  	// #46
   13610:	mov	w20, #0x1                   	// #1
   13614:	strb	w8, [x19]
   13618:	strb	wzr, [x19, x20]
   1361c:	mov	x0, x19
   13620:	ldp	x20, x19, [sp, #32]
   13624:	ldr	x21, [sp, #16]
   13628:	ldp	x29, x30, [sp], #48
   1362c:	ret

0000000000013630 <last_component@@Base>:
   13630:	sub	x0, x0, #0x1
   13634:	ldrb	w8, [x0, #1]!
   13638:	cmp	w8, #0x2f
   1363c:	b.eq	13634 <last_component@@Base+0x4>  // b.none
   13640:	mov	w8, wzr
   13644:	mov	x9, x0
   13648:	b	13654 <last_component@@Base+0x24>
   1364c:	mov	w8, #0x1                   	// #1
   13650:	add	x9, x9, #0x1
   13654:	ldrb	w10, [x9]
   13658:	cmp	w10, #0x2f
   1365c:	b.eq	1364c <last_component@@Base+0x1c>  // b.none
   13660:	cbz	w10, 13678 <last_component@@Base+0x48>
   13664:	tst	w8, #0x1
   13668:	mov	w8, wzr
   1366c:	csel	x0, x9, x0, ne  // ne = any
   13670:	add	x9, x9, #0x1
   13674:	b	13654 <last_component@@Base+0x24>
   13678:	ret

000000000001367c <base_len@@Base>:
   1367c:	stp	x29, x30, [sp, #-32]!
   13680:	str	x19, [sp, #16]
   13684:	mov	x29, sp
   13688:	mov	x19, x0
   1368c:	bl	a890 <strlen@plt>
   13690:	mov	x8, x0
   13694:	sub	x9, x19, #0x1
   13698:	mov	x0, x8
   1369c:	cmp	x8, #0x2
   136a0:	b.cc	136b4 <base_len@@Base+0x38>  // b.lo, b.ul, b.last
   136a4:	ldrb	w8, [x9, x0]
   136a8:	cmp	w8, #0x2f
   136ac:	sub	x8, x0, #0x1
   136b0:	b.eq	13698 <base_len@@Base+0x1c>  // b.none
   136b4:	ldr	x19, [sp, #16]
   136b8:	ldp	x29, x30, [sp], #32
   136bc:	ret

00000000000136c0 <strip_trailing_slashes@@Base>:
   136c0:	stp	x29, x30, [sp, #-32]!
   136c4:	str	x19, [sp, #16]
   136c8:	mov	x29, sp
   136cc:	mov	x19, x0
   136d0:	bl	ae20 <last_component@plt>
   136d4:	ldrb	w8, [x0]
   136d8:	cmp	w8, #0x0
   136dc:	csel	x19, x19, x0, eq  // eq = none
   136e0:	mov	x0, x19
   136e4:	bl	a7e0 <base_len@plt>
   136e8:	ldrb	w8, [x19, x0]
   136ec:	strb	wzr, [x19, x0]
   136f0:	ldr	x19, [sp, #16]
   136f4:	cmp	w8, #0x0
   136f8:	cset	w0, ne  // ne = any
   136fc:	ldp	x29, x30, [sp], #32
   13700:	ret

0000000000013704 <fd_safer_flag@@Base>:
   13704:	stp	x29, x30, [sp, #-48]!
   13708:	stp	x20, x19, [sp, #32]
   1370c:	mov	w19, w0
   13710:	cmp	w0, #0x2
   13714:	stp	x22, x21, [sp, #16]
   13718:	mov	x29, sp
   1371c:	b.hi	13748 <fd_safer_flag@@Base+0x44>  // b.pmore
   13720:	mov	w0, w19
   13724:	bl	b430 <dup_safer_flag@plt>
   13728:	mov	w20, w0
   1372c:	bl	b6f0 <__errno_location@plt>
   13730:	ldr	w22, [x0]
   13734:	mov	x21, x0
   13738:	mov	w0, w19
   1373c:	bl	af30 <close@plt>
   13740:	mov	w19, w20
   13744:	str	w22, [x21]
   13748:	mov	w0, w19
   1374c:	ldp	x20, x19, [sp, #32]
   13750:	ldp	x22, x21, [sp, #16]
   13754:	ldp	x29, x30, [sp], #48
   13758:	ret

000000000001375c <dup_safer_flag@@Base>:
   1375c:	stp	x29, x30, [sp, #-16]!
   13760:	lsl	w8, w1, #12
   13764:	mov	w9, #0x406                 	// #1030
   13768:	and	w1, w9, w8, asr #31
   1376c:	mov	w2, #0x3                   	// #3
   13770:	mov	x29, sp
   13774:	bl	b390 <rpl_fcntl@plt>
   13778:	ldp	x29, x30, [sp], #16
   1377c:	ret

0000000000013780 <record_file@@Base>:
   13780:	stp	x29, x30, [sp, #-48]!
   13784:	stp	x22, x21, [sp, #16]
   13788:	stp	x20, x19, [sp, #32]
   1378c:	mov	x29, sp
   13790:	cbz	x0, 137e4 <record_file@@Base+0x64>
   13794:	mov	x20, x0
   13798:	mov	w0, #0x18                  	// #24
   1379c:	mov	x21, x2
   137a0:	mov	x22, x1
   137a4:	bl	ad70 <xmalloc@plt>
   137a8:	mov	x19, x0
   137ac:	mov	x0, x22
   137b0:	bl	ada0 <xstrdup@plt>
   137b4:	ldr	x8, [x21, #8]
   137b8:	mov	x1, x19
   137bc:	stp	x0, x8, [x19]
   137c0:	ldr	x8, [x21]
   137c4:	mov	x0, x20
   137c8:	str	x8, [x19, #16]
   137cc:	bl	a9c0 <hash_insert@plt>
   137d0:	cbz	x0, 137f4 <record_file@@Base+0x74>
   137d4:	cmp	x0, x19
   137d8:	b.eq	137e4 <record_file@@Base+0x64>  // b.none
   137dc:	mov	x0, x19
   137e0:	bl	ab10 <triple_free@plt>
   137e4:	ldp	x20, x19, [sp, #32]
   137e8:	ldp	x22, x21, [sp, #16]
   137ec:	ldp	x29, x30, [sp], #48
   137f0:	ret
   137f4:	bl	af90 <xalloc_die@plt>

00000000000137f8 <seen_file@@Base>:
   137f8:	cbz	x0, 13830 <seen_file@@Base+0x38>
   137fc:	sub	sp, sp, #0x30
   13800:	stp	x29, x30, [sp, #32]
   13804:	ldr	x8, [x2, #8]
   13808:	add	x29, sp, #0x20
   1380c:	stp	x1, x8, [sp, #8]
   13810:	ldr	x8, [x2]
   13814:	add	x1, sp, #0x8
   13818:	str	x8, [sp, #24]
   1381c:	bl	af60 <hash_lookup@plt>
   13820:	ldp	x29, x30, [sp, #32]
   13824:	cmp	x0, #0x0
   13828:	cset	w0, ne  // ne = any
   1382c:	add	sp, sp, #0x30
   13830:	ret

0000000000013834 <mfile_name_concat@@Base>:
   13834:	stp	x29, x30, [sp, #-80]!
   13838:	stp	x26, x25, [sp, #16]
   1383c:	stp	x24, x23, [sp, #32]
   13840:	stp	x22, x21, [sp, #48]
   13844:	stp	x20, x19, [sp, #64]
   13848:	mov	x29, sp
   1384c:	mov	x20, x2
   13850:	mov	x19, x1
   13854:	mov	x22, x0
   13858:	bl	ae20 <last_component@plt>
   1385c:	mov	x21, x0
   13860:	bl	a7e0 <base_len@plt>
   13864:	sub	x8, x21, x22
   13868:	mov	x24, x0
   1386c:	add	x23, x8, x0
   13870:	mov	x0, x19
   13874:	bl	a890 <strlen@plt>
   13878:	mov	x21, x0
   1387c:	cbz	x24, 13898 <mfile_name_concat@@Base+0x64>
   13880:	add	x8, x23, x22
   13884:	ldurb	w8, [x8, #-1]
   13888:	cmp	w8, #0x2f
   1388c:	b.ne	138ac <mfile_name_concat@@Base+0x78>  // b.any
   13890:	mov	w25, wzr
   13894:	b	138bc <mfile_name_concat@@Base+0x88>
   13898:	ldrb	w8, [x19]
   1389c:	cmp	w8, #0x2f
   138a0:	mov	w8, #0x2e                  	// #46
   138a4:	csel	w25, w8, wzr, eq  // eq = none
   138a8:	b	138bc <mfile_name_concat@@Base+0x88>
   138ac:	ldrb	w8, [x19]
   138b0:	cmp	w8, #0x2f
   138b4:	mov	w8, #0x2f                  	// #47
   138b8:	csel	w25, wzr, w8, eq  // eq = none
   138bc:	cmp	w25, #0x0
   138c0:	add	x8, x21, x23
   138c4:	cinc	x8, x8, ne  // ne = any
   138c8:	add	x0, x8, #0x1
   138cc:	cset	w26, ne  // ne = any
   138d0:	bl	abc0 <malloc@plt>
   138d4:	mov	x24, x0
   138d8:	cbz	x0, 13914 <mfile_name_concat@@Base+0xe0>
   138dc:	mov	x0, x24
   138e0:	mov	x1, x22
   138e4:	mov	x2, x23
   138e8:	bl	a800 <memcpy@plt>
   138ec:	add	x8, x24, x23
   138f0:	add	x22, x8, x26
   138f4:	strb	w25, [x8]
   138f8:	cbz	x20, 13900 <mfile_name_concat@@Base+0xcc>
   138fc:	str	x22, [x20]
   13900:	mov	x0, x22
   13904:	mov	x1, x19
   13908:	mov	x2, x21
   1390c:	bl	a800 <memcpy@plt>
   13910:	strb	wzr, [x22, x21]
   13914:	mov	x0, x24
   13918:	ldp	x20, x19, [sp, #64]
   1391c:	ldp	x22, x21, [sp, #48]
   13920:	ldp	x24, x23, [sp, #32]
   13924:	ldp	x26, x25, [sp, #16]
   13928:	ldp	x29, x30, [sp], #80
   1392c:	ret

0000000000013930 <getprogname@@Base>:
   13930:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   13934:	ldr	x8, [x8, #4008]
   13938:	ldr	x0, [x8]
   1393c:	ret

0000000000013940 <gettime@@Base>:
   13940:	stp	x29, x30, [sp, #-16]!
   13944:	mov	x1, x0
   13948:	mov	w0, wzr
   1394c:	mov	x29, sp
   13950:	bl	aa80 <clock_gettime@plt>
   13954:	ldp	x29, x30, [sp], #16
   13958:	ret

000000000001395c <current_timespec@@Base>:
   1395c:	sub	sp, sp, #0x20
   13960:	mov	x0, sp
   13964:	stp	x29, x30, [sp, #16]
   13968:	add	x29, sp, #0x10
   1396c:	bl	b7d0 <gettime@plt>
   13970:	ldp	x0, x1, [sp]
   13974:	ldp	x29, x30, [sp, #16]
   13978:	add	sp, sp, #0x20
   1397c:	ret

0000000000013980 <hard_locale@@Base>:
   13980:	stp	x29, x30, [sp, #-32]!
   13984:	mov	x1, xzr
   13988:	str	x19, [sp, #16]
   1398c:	mov	x29, sp
   13990:	bl	b830 <setlocale@plt>
   13994:	cbz	x0, 139c0 <hard_locale@@Base+0x40>
   13998:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   1399c:	add	x1, x1, #0x7a
   139a0:	mov	x19, x0
   139a4:	bl	b120 <strcmp@plt>
   139a8:	cbz	w0, 139c8 <hard_locale@@Base+0x48>
   139ac:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   139b0:	add	x1, x1, #0x87
   139b4:	mov	x0, x19
   139b8:	bl	b120 <strcmp@plt>
   139bc:	cbz	w0, 139c8 <hard_locale@@Base+0x48>
   139c0:	mov	w0, #0x1                   	// #1
   139c4:	b	139cc <hard_locale@@Base+0x4c>
   139c8:	mov	w0, wzr
   139cc:	ldr	x19, [sp, #16]
   139d0:	ldp	x29, x30, [sp], #32
   139d4:	ret

00000000000139d8 <hash_get_n_buckets@@Base>:
   139d8:	ldr	x0, [x0, #16]
   139dc:	ret

00000000000139e0 <hash_get_n_buckets_used@@Base>:
   139e0:	ldr	x0, [x0, #24]
   139e4:	ret

00000000000139e8 <hash_get_n_entries@@Base>:
   139e8:	ldr	x0, [x0, #32]
   139ec:	ret

00000000000139f0 <hash_get_max_bucket_length@@Base>:
   139f0:	ldp	x8, x9, [x0]
   139f4:	cmp	x8, x9
   139f8:	b.cs	13a3c <hash_get_max_bucket_length@@Base+0x4c>  // b.hs, b.nlast
   139fc:	ldr	x9, [x0, #8]
   13a00:	mov	x0, xzr
   13a04:	b	13a14 <hash_get_max_bucket_length@@Base+0x24>
   13a08:	add	x8, x8, #0x10
   13a0c:	cmp	x8, x9
   13a10:	b.cs	13a40 <hash_get_max_bucket_length@@Base+0x50>  // b.hs, b.nlast
   13a14:	ldr	x10, [x8]
   13a18:	cbz	x10, 13a08 <hash_get_max_bucket_length@@Base+0x18>
   13a1c:	mov	x10, xzr
   13a20:	mov	x11, x8
   13a24:	ldr	x11, [x11, #8]
   13a28:	add	x10, x10, #0x1
   13a2c:	cbnz	x11, 13a24 <hash_get_max_bucket_length@@Base+0x34>
   13a30:	cmp	x10, x0
   13a34:	csel	x0, x10, x0, hi  // hi = pmore
   13a38:	b	13a08 <hash_get_max_bucket_length@@Base+0x18>
   13a3c:	mov	x0, xzr
   13a40:	ret

0000000000013a44 <hash_table_ok@@Base>:
   13a44:	ldp	x9, x8, [x0]
   13a48:	cmp	x9, x8
   13a4c:	b.cs	13a8c <hash_table_ok@@Base+0x48>  // b.hs, b.nlast
   13a50:	ldr	x11, [x0, #8]
   13a54:	mov	x8, xzr
   13a58:	mov	x10, xzr
   13a5c:	b	13a6c <hash_table_ok@@Base+0x28>
   13a60:	add	x9, x9, #0x10
   13a64:	cmp	x9, x11
   13a68:	b.cs	13a94 <hash_table_ok@@Base+0x50>  // b.hs, b.nlast
   13a6c:	ldr	x12, [x9]
   13a70:	cbz	x12, 13a60 <hash_table_ok@@Base+0x1c>
   13a74:	mov	x12, x9
   13a78:	ldr	x12, [x12, #8]
   13a7c:	add	x8, x8, #0x1
   13a80:	cbnz	x12, 13a78 <hash_table_ok@@Base+0x34>
   13a84:	add	x10, x10, #0x1
   13a88:	b	13a60 <hash_table_ok@@Base+0x1c>
   13a8c:	mov	x10, xzr
   13a90:	mov	x8, xzr
   13a94:	ldr	x9, [x0, #24]
   13a98:	cmp	x10, x9
   13a9c:	b.ne	13ab4 <hash_table_ok@@Base+0x70>  // b.any
   13aa0:	ldr	x9, [x0, #32]
   13aa4:	cmp	x8, x9
   13aa8:	b.ne	13ab4 <hash_table_ok@@Base+0x70>  // b.any
   13aac:	mov	w0, #0x1                   	// #1
   13ab0:	ret
   13ab4:	mov	w0, wzr
   13ab8:	ret

0000000000013abc <hash_print_statistics@@Base>:
   13abc:	stp	x29, x30, [sp, #-64]!
   13ac0:	str	x23, [sp, #16]
   13ac4:	stp	x22, x21, [sp, #32]
   13ac8:	stp	x20, x19, [sp, #48]
   13acc:	mov	x29, sp
   13ad0:	mov	x19, x1
   13ad4:	mov	x20, x0
   13ad8:	bl	b800 <hash_get_n_entries@plt>
   13adc:	mov	x21, x0
   13ae0:	mov	x0, x20
   13ae4:	bl	b270 <hash_get_n_buckets@plt>
   13ae8:	mov	x22, x0
   13aec:	mov	x0, x20
   13af0:	bl	ae70 <hash_get_n_buckets_used@plt>
   13af4:	mov	x23, x0
   13af8:	mov	x0, x20
   13afc:	bl	b170 <hash_get_max_bucket_length@plt>
   13b00:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   13b04:	mov	x20, x0
   13b08:	add	x1, x1, #0xc96
   13b0c:	mov	x0, x19
   13b10:	mov	x2, x21
   13b14:	bl	b7f0 <fprintf@plt>
   13b18:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   13b1c:	add	x1, x1, #0xcae
   13b20:	mov	x0, x19
   13b24:	mov	x2, x22
   13b28:	bl	b7f0 <fprintf@plt>
   13b2c:	mov	x8, #0x4059000000000000    	// #4636737291354636288
   13b30:	ucvtf	d0, x23
   13b34:	fmov	d1, x8
   13b38:	fmul	d0, d0, d1
   13b3c:	ucvtf	d1, x22
   13b40:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   13b44:	fdiv	d0, d0, d1
   13b48:	add	x1, x1, #0xcc6
   13b4c:	mov	x0, x19
   13b50:	mov	x2, x23
   13b54:	bl	b7f0 <fprintf@plt>
   13b58:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   13b5c:	add	x1, x1, #0xce7
   13b60:	mov	x0, x19
   13b64:	mov	x2, x20
   13b68:	bl	b7f0 <fprintf@plt>
   13b6c:	ldp	x20, x19, [sp, #48]
   13b70:	ldp	x22, x21, [sp, #32]
   13b74:	ldr	x23, [sp, #16]
   13b78:	ldp	x29, x30, [sp], #64
   13b7c:	ret

0000000000013b80 <hash_lookup@@Base>:
   13b80:	stp	x29, x30, [sp, #-48]!
   13b84:	str	x21, [sp, #16]
   13b88:	stp	x20, x19, [sp, #32]
   13b8c:	mov	x29, sp
   13b90:	mov	x19, x1
   13b94:	mov	x20, x0
   13b98:	bl	13bf0 <hash_lookup@@Base+0x70>
   13b9c:	ldr	x8, [x0]
   13ba0:	mov	x21, x0
   13ba4:	mov	x0, xzr
   13ba8:	cbz	x8, 13be0 <hash_lookup@@Base+0x60>
   13bac:	cbz	x21, 13be0 <hash_lookup@@Base+0x60>
   13bb0:	ldr	x1, [x21]
   13bb4:	cmp	x1, x19
   13bb8:	b.eq	13bdc <hash_lookup@@Base+0x5c>  // b.none
   13bbc:	ldr	x8, [x20, #56]
   13bc0:	mov	x0, x19
   13bc4:	blr	x8
   13bc8:	tbnz	w0, #0, 13bdc <hash_lookup@@Base+0x5c>
   13bcc:	ldr	x21, [x21, #8]
   13bd0:	cbnz	x21, 13bb0 <hash_lookup@@Base+0x30>
   13bd4:	mov	x0, xzr
   13bd8:	b	13be0 <hash_lookup@@Base+0x60>
   13bdc:	ldr	x0, [x21]
   13be0:	ldp	x20, x19, [sp, #32]
   13be4:	ldr	x21, [sp, #16]
   13be8:	ldp	x29, x30, [sp], #48
   13bec:	ret
   13bf0:	stp	x29, x30, [sp, #-32]!
   13bf4:	ldr	x8, [x0, #16]
   13bf8:	ldr	x9, [x0, #48]
   13bfc:	str	x19, [sp, #16]
   13c00:	mov	x19, x0
   13c04:	mov	x0, x1
   13c08:	mov	x1, x8
   13c0c:	mov	x29, sp
   13c10:	blr	x9
   13c14:	ldr	x8, [x19, #16]
   13c18:	cmp	x0, x8
   13c1c:	b.cs	13c34 <hash_lookup@@Base+0xb4>  // b.hs, b.nlast
   13c20:	ldr	x8, [x19]
   13c24:	ldr	x19, [sp, #16]
   13c28:	add	x0, x8, x0, lsl #4
   13c2c:	ldp	x29, x30, [sp], #32
   13c30:	ret
   13c34:	bl	b020 <abort@plt>

0000000000013c38 <hash_get_first@@Base>:
   13c38:	stp	x29, x30, [sp, #-16]!
   13c3c:	ldr	x8, [x0, #32]
   13c40:	mov	x29, sp
   13c44:	cbz	x8, 13c60 <hash_get_first@@Base+0x28>
   13c48:	ldr	x9, [x0]
   13c4c:	ldr	x8, [x0, #8]
   13c50:	cmp	x9, x8
   13c54:	b.cs	13c6c <hash_get_first@@Base+0x34>  // b.hs, b.nlast
   13c58:	ldr	x8, [x9], #16
   13c5c:	cbz	x8, 13c4c <hash_get_first@@Base+0x14>
   13c60:	mov	x0, x8
   13c64:	ldp	x29, x30, [sp], #16
   13c68:	ret
   13c6c:	bl	b020 <abort@plt>

0000000000013c70 <hash_get_next@@Base>:
   13c70:	stp	x29, x30, [sp, #-32]!
   13c74:	stp	x20, x19, [sp, #16]
   13c78:	mov	x29, sp
   13c7c:	mov	x20, x1
   13c80:	mov	x19, x0
   13c84:	bl	13bf0 <hash_lookup@@Base+0x70>
   13c88:	mov	x8, x0
   13c8c:	b	13c98 <hash_get_next@@Base+0x28>
   13c90:	ldr	x8, [x8, #8]
   13c94:	cbz	x8, 13cb4 <hash_get_next@@Base+0x44>
   13c98:	ldr	x9, [x8]
   13c9c:	cmp	x9, x20
   13ca0:	b.ne	13c90 <hash_get_next@@Base+0x20>  // b.any
   13ca4:	ldr	x9, [x8, #8]
   13ca8:	cbz	x9, 13c90 <hash_get_next@@Base+0x20>
   13cac:	ldr	x0, [x9]
   13cb0:	b	13cd4 <hash_get_next@@Base+0x64>
   13cb4:	ldr	x8, [x19, #8]
   13cb8:	add	x9, x0, #0x10
   13cbc:	cmp	x9, x8
   13cc0:	b.cs	13cd0 <hash_get_next@@Base+0x60>  // b.hs, b.nlast
   13cc4:	ldr	x0, [x9], #16
   13cc8:	cbz	x0, 13cbc <hash_get_next@@Base+0x4c>
   13ccc:	b	13cd4 <hash_get_next@@Base+0x64>
   13cd0:	mov	x0, xzr
   13cd4:	ldp	x20, x19, [sp, #16]
   13cd8:	ldp	x29, x30, [sp], #32
   13cdc:	ret

0000000000013ce0 <hash_get_entries@@Base>:
   13ce0:	ldp	x9, x8, [x0]
   13ce4:	cmp	x9, x8
   13ce8:	b.cs	13d44 <hash_get_entries@@Base+0x64>  // b.hs, b.nlast
   13cec:	mov	x10, xzr
   13cf0:	ldr	x8, [x9]
   13cf4:	cbz	x8, 13d24 <hash_get_entries@@Base+0x44>
   13cf8:	cbz	x9, 13d24 <hash_get_entries@@Base+0x44>
   13cfc:	mov	x11, x9
   13d00:	cmp	x10, x2
   13d04:	b.cs	13d4c <hash_get_entries@@Base+0x6c>  // b.hs, b.nlast
   13d08:	ldr	x8, [x11]
   13d0c:	str	x8, [x1, x10, lsl #3]
   13d10:	ldr	x11, [x11, #8]
   13d14:	add	x8, x10, #0x1
   13d18:	mov	x10, x8
   13d1c:	cbnz	x11, 13d00 <hash_get_entries@@Base+0x20>
   13d20:	b	13d28 <hash_get_entries@@Base+0x48>
   13d24:	mov	x8, x10
   13d28:	ldr	x10, [x0, #8]
   13d2c:	add	x9, x9, #0x10
   13d30:	cmp	x9, x10
   13d34:	mov	x10, x8
   13d38:	b.cc	13cf0 <hash_get_entries@@Base+0x10>  // b.lo, b.ul, b.last
   13d3c:	mov	x0, x8
   13d40:	ret
   13d44:	mov	x0, xzr
   13d48:	ret
   13d4c:	mov	x0, x10
   13d50:	ret

0000000000013d54 <hash_do_for_each@@Base>:
   13d54:	stp	x29, x30, [sp, #-64]!
   13d58:	stp	x24, x23, [sp, #16]
   13d5c:	stp	x22, x21, [sp, #32]
   13d60:	stp	x20, x19, [sp, #48]
   13d64:	ldp	x23, x8, [x0]
   13d68:	mov	x29, sp
   13d6c:	cmp	x23, x8
   13d70:	b.cs	13dc8 <hash_do_for_each@@Base+0x74>  // b.hs, b.nlast
   13d74:	mov	x19, x2
   13d78:	mov	x20, x0
   13d7c:	mov	x22, x1
   13d80:	mov	x21, xzr
   13d84:	b	13d98 <hash_do_for_each@@Base+0x44>
   13d88:	ldr	x8, [x20, #8]
   13d8c:	add	x23, x23, #0x10
   13d90:	cmp	x23, x8
   13d94:	b.cs	13dcc <hash_do_for_each@@Base+0x78>  // b.hs, b.nlast
   13d98:	ldr	x8, [x23]
   13d9c:	cbz	x8, 13d88 <hash_do_for_each@@Base+0x34>
   13da0:	cbz	x23, 13d88 <hash_do_for_each@@Base+0x34>
   13da4:	mov	x24, x23
   13da8:	ldr	x0, [x24]
   13dac:	mov	x1, x19
   13db0:	blr	x22
   13db4:	tbz	w0, #0, 13dcc <hash_do_for_each@@Base+0x78>
   13db8:	ldr	x24, [x24, #8]
   13dbc:	add	x21, x21, #0x1
   13dc0:	cbnz	x24, 13da8 <hash_do_for_each@@Base+0x54>
   13dc4:	b	13d88 <hash_do_for_each@@Base+0x34>
   13dc8:	mov	x21, xzr
   13dcc:	mov	x0, x21
   13dd0:	ldp	x20, x19, [sp, #48]
   13dd4:	ldp	x22, x21, [sp, #32]
   13dd8:	ldp	x24, x23, [sp, #16]
   13ddc:	ldp	x29, x30, [sp], #64
   13de0:	ret

0000000000013de4 <hash_string@@Base>:
   13de4:	ldrb	w9, [x0]
   13de8:	cbz	w9, 13e18 <hash_string@@Base+0x34>
   13dec:	mov	x8, x0
   13df0:	mov	x0, xzr
   13df4:	add	x8, x8, #0x1
   13df8:	lsl	x10, x0, #5
   13dfc:	sub	x10, x10, x0
   13e00:	add	x10, x10, w9, uxtb
   13e04:	ldrb	w9, [x8], #1
   13e08:	udiv	x11, x10, x1
   13e0c:	msub	x0, x11, x1, x10
   13e10:	cbnz	w9, 13df8 <hash_string@@Base+0x14>
   13e14:	ret
   13e18:	mov	x0, xzr
   13e1c:	ret

0000000000013e20 <hash_reset_tuning@@Base>:
   13e20:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
   13e24:	add	x8, x8, #0xd00
   13e28:	ldr	w9, [x8, #16]
   13e2c:	ldr	q0, [x8]
   13e30:	str	w9, [x0, #16]
   13e34:	str	q0, [x0]
   13e38:	ret

0000000000013e3c <hash_initialize@@Base>:
   13e3c:	stp	x29, x30, [sp, #-64]!
   13e40:	adrp	x8, 13000 <canonicalize_filename_mode@@Base+0x16c>
   13e44:	add	x8, x8, #0xf10
   13e48:	cmp	x2, #0x0
   13e4c:	adrp	x9, 13000 <canonicalize_filename_mode@@Base+0x16c>
   13e50:	stp	x24, x23, [sp, #16]
   13e54:	stp	x22, x21, [sp, #32]
   13e58:	mov	x21, x0
   13e5c:	add	x9, x9, #0xf3c
   13e60:	csel	x23, x8, x2, eq  // eq = none
   13e64:	cmp	x3, #0x0
   13e68:	mov	w0, #0x50                  	// #80
   13e6c:	stp	x20, x19, [sp, #48]
   13e70:	mov	x29, sp
   13e74:	mov	x19, x4
   13e78:	mov	x22, x1
   13e7c:	csel	x24, x9, x3, eq  // eq = none
   13e80:	bl	abc0 <malloc@plt>
   13e84:	mov	x20, x0
   13e88:	cbz	x0, 13ef8 <hash_initialize@@Base+0xbc>
   13e8c:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
   13e90:	add	x8, x8, #0xd00
   13e94:	cmp	x22, #0x0
   13e98:	csel	x22, x8, x22, eq  // eq = none
   13e9c:	mov	x0, x20
   13ea0:	str	x22, [x20, #40]
   13ea4:	bl	13f48 <hash_initialize@@Base+0x10c>
   13ea8:	tbz	w0, #0, 13eec <hash_initialize@@Base+0xb0>
   13eac:	mov	x0, x21
   13eb0:	mov	x1, x22
   13eb4:	bl	13ff0 <hash_initialize@@Base+0x1b4>
   13eb8:	str	x0, [x20, #16]
   13ebc:	cbz	x0, 13eec <hash_initialize@@Base+0xb0>
   13ec0:	mov	w1, #0x10                  	// #16
   13ec4:	mov	x21, x0
   13ec8:	bl	ae10 <calloc@plt>
   13ecc:	str	x0, [x20]
   13ed0:	cbz	x0, 13eec <hash_initialize@@Base+0xb0>
   13ed4:	add	x8, x0, x21, lsl #4
   13ed8:	stp	xzr, xzr, [x20, #24]
   13edc:	stp	x23, x24, [x20, #48]
   13ee0:	str	x8, [x20, #8]
   13ee4:	stp	x19, xzr, [x20, #64]
   13ee8:	b	13ef8 <hash_initialize@@Base+0xbc>
   13eec:	mov	x0, x20
   13ef0:	bl	b1d0 <free@plt>
   13ef4:	mov	x20, xzr
   13ef8:	mov	x0, x20
   13efc:	ldp	x20, x19, [sp, #48]
   13f00:	ldp	x22, x21, [sp, #32]
   13f04:	ldp	x24, x23, [sp, #16]
   13f08:	ldp	x29, x30, [sp], #64
   13f0c:	ret
   13f10:	stp	x29, x30, [sp, #-32]!
   13f14:	str	x19, [sp, #16]
   13f18:	mov	x19, x1
   13f1c:	mov	w1, #0x3                   	// #3
   13f20:	mov	x29, sp
   13f24:	bl	b380 <rotr_sz@plt>
   13f28:	udiv	x8, x0, x19
   13f2c:	msub	x0, x8, x19, x0
   13f30:	ldr	x19, [sp, #16]
   13f34:	ldp	x29, x30, [sp], #32
   13f38:	ret
   13f3c:	cmp	x0, x1
   13f40:	cset	w0, eq  // eq = none
   13f44:	ret
   13f48:	ldr	x8, [x0, #40]
   13f4c:	adrp	x9, 2b000 <vasnprintf@@Base+0xec4>
   13f50:	add	x9, x9, #0xd00
   13f54:	cmp	x8, x9
   13f58:	b.eq	13fe8 <hash_initialize@@Base+0x1ac>  // b.none
   13f5c:	ldr	s0, [x8, #8]
   13f60:	mov	w10, #0xcccd                	// #52429
   13f64:	movk	w10, #0x3dcc, lsl #16
   13f68:	fmov	s1, w10
   13f6c:	fcmp	s0, s1
   13f70:	b.le	13fac <hash_initialize@@Base+0x170>
   13f74:	mov	w10, #0x6666                	// #26214
   13f78:	movk	w10, #0x3f66, lsl #16
   13f7c:	fmov	s1, w10
   13f80:	fcmp	s0, s1
   13f84:	b.pl	13fac <hash_initialize@@Base+0x170>  // b.nfrst
   13f88:	ldr	s1, [x8, #12]
   13f8c:	mov	w10, #0xcccd                	// #52429
   13f90:	movk	w10, #0x3f8c, lsl #16
   13f94:	fmov	s2, w10
   13f98:	fcmp	s1, s2
   13f9c:	b.le	13fac <hash_initialize@@Base+0x170>
   13fa0:	ldr	s1, [x8]
   13fa4:	fcmp	s1, #0.0
   13fa8:	b.ge	13fb8 <hash_initialize@@Base+0x17c>  // b.tcont
   13fac:	str	x9, [x0, #40]
   13fb0:	mov	w0, wzr
   13fb4:	ret
   13fb8:	mov	w10, #0xcccd                	// #52429
   13fbc:	movk	w10, #0x3dcc, lsl #16
   13fc0:	fmov	s2, w10
   13fc4:	fadd	s1, s1, s2
   13fc8:	fcmp	s1, s0
   13fcc:	b.pl	13fac <hash_initialize@@Base+0x170>  // b.nfrst
   13fd0:	ldr	s0, [x8, #4]
   13fd4:	fmov	s2, #1.000000000000000000e+00
   13fd8:	fcmp	s0, s2
   13fdc:	b.hi	13fac <hash_initialize@@Base+0x170>  // b.pmore
   13fe0:	fcmp	s1, s0
   13fe4:	b.pl	13fac <hash_initialize@@Base+0x170>  // b.nfrst
   13fe8:	mov	w0, #0x1                   	// #1
   13fec:	ret
   13ff0:	stp	x29, x30, [sp, #-16]!
   13ff4:	ldrb	w8, [x1, #16]
   13ff8:	mov	x29, sp
   13ffc:	cbnz	w8, 14024 <hash_initialize@@Base+0x1e8>
   14000:	ldr	s0, [x1, #8]
   14004:	mov	w8, #0x5f800000            	// #1602224128
   14008:	ucvtf	s1, x0
   1400c:	fmov	s2, w8
   14010:	fdiv	s0, s1, s0
   14014:	fcvtzu	x8, s0
   14018:	fcmp	s0, s2
   1401c:	csel	x0, x8, x0, lt  // lt = tstop
   14020:	b.ge	1403c <hash_initialize@@Base+0x200>  // b.tcont
   14024:	bl	147c8 <hash_delete@@Base+0xe8>
   14028:	lsr	x8, x0, #60
   1402c:	cmp	x8, #0x0
   14030:	csel	x0, xzr, x0, ne  // ne = any
   14034:	ldp	x29, x30, [sp], #16
   14038:	ret
   1403c:	mov	x0, xzr
   14040:	ldp	x29, x30, [sp], #16
   14044:	ret

0000000000014048 <hash_clear@@Base>:
   14048:	stp	x29, x30, [sp, #-48]!
   1404c:	str	x21, [sp, #16]
   14050:	stp	x20, x19, [sp, #32]
   14054:	ldp	x20, x8, [x0]
   14058:	mov	x19, x0
   1405c:	mov	x29, sp
   14060:	b	14070 <hash_clear@@Base+0x28>
   14064:	stp	xzr, xzr, [x20]
   14068:	ldr	x8, [x19, #8]
   1406c:	add	x20, x20, #0x10
   14070:	cmp	x20, x8
   14074:	b.cs	140dc <hash_clear@@Base+0x94>  // b.hs, b.nlast
   14078:	ldr	x8, [x20]
   1407c:	cbz	x8, 14068 <hash_clear@@Base+0x20>
   14080:	ldr	x8, [x19, #64]
   14084:	ldr	x21, [x20, #8]
   14088:	cmp	x8, #0x0
   1408c:	cset	w9, ne  // ne = any
   14090:	cbnz	x21, 140cc <hash_clear@@Base+0x84>
   14094:	cbz	w9, 14064 <hash_clear@@Base+0x1c>
   14098:	ldr	x0, [x20]
   1409c:	blr	x8
   140a0:	b	14064 <hash_clear@@Base+0x1c>
   140a4:	str	xzr, [x21]
   140a8:	ldr	x8, [x19, #72]
   140ac:	ldr	x10, [x21, #8]
   140b0:	str	x8, [x21, #8]
   140b4:	ldr	x8, [x19, #64]
   140b8:	str	x21, [x19, #72]
   140bc:	mov	x21, x10
   140c0:	cmp	x8, #0x0
   140c4:	cset	w9, ne  // ne = any
   140c8:	cbz	x10, 14094 <hash_clear@@Base+0x4c>
   140cc:	tbz	w9, #0, 140a4 <hash_clear@@Base+0x5c>
   140d0:	ldr	x0, [x21]
   140d4:	blr	x8
   140d8:	b	140a4 <hash_clear@@Base+0x5c>
   140dc:	stp	xzr, xzr, [x19, #24]
   140e0:	ldp	x20, x19, [sp, #32]
   140e4:	ldr	x21, [sp, #16]
   140e8:	ldp	x29, x30, [sp], #48
   140ec:	ret

00000000000140f0 <hash_free@@Base>:
   140f0:	stp	x29, x30, [sp, #-48]!
   140f4:	stp	x20, x19, [sp, #32]
   140f8:	ldr	x8, [x0, #64]
   140fc:	mov	x19, x0
   14100:	str	x21, [sp, #16]
   14104:	mov	x29, sp
   14108:	cbz	x8, 14154 <hash_free@@Base+0x64>
   1410c:	ldr	x8, [x19, #32]
   14110:	cbz	x8, 14154 <hash_free@@Base+0x64>
   14114:	ldp	x20, x8, [x19]
   14118:	b	14124 <hash_free@@Base+0x34>
   1411c:	ldr	x8, [x19, #8]
   14120:	add	x20, x20, #0x10
   14124:	cmp	x20, x8
   14128:	b.cs	14154 <hash_free@@Base+0x64>  // b.hs, b.nlast
   1412c:	ldr	x8, [x20]
   14130:	cbz	x8, 1411c <hash_free@@Base+0x2c>
   14134:	cbz	x20, 1411c <hash_free@@Base+0x2c>
   14138:	mov	x21, x20
   1413c:	ldr	x8, [x19, #64]
   14140:	ldr	x0, [x21]
   14144:	blr	x8
   14148:	ldr	x21, [x21, #8]
   1414c:	cbnz	x21, 1413c <hash_free@@Base+0x4c>
   14150:	b	1411c <hash_free@@Base+0x2c>
   14154:	ldp	x20, x8, [x19]
   14158:	b	14164 <hash_free@@Base+0x74>
   1415c:	ldr	x8, [x19, #8]
   14160:	add	x20, x20, #0x10
   14164:	cmp	x20, x8
   14168:	b.cs	14188 <hash_free@@Base+0x98>  // b.hs, b.nlast
   1416c:	ldr	x0, [x20, #8]
   14170:	cbz	x0, 1415c <hash_free@@Base+0x6c>
   14174:	ldr	x21, [x0, #8]
   14178:	bl	b1d0 <free@plt>
   1417c:	mov	x0, x21
   14180:	cbnz	x21, 14174 <hash_free@@Base+0x84>
   14184:	b	1415c <hash_free@@Base+0x6c>
   14188:	ldr	x0, [x19, #72]
   1418c:	cbz	x0, 141a0 <hash_free@@Base+0xb0>
   14190:	ldr	x20, [x0, #8]
   14194:	bl	b1d0 <free@plt>
   14198:	mov	x0, x20
   1419c:	cbnz	x20, 14190 <hash_free@@Base+0xa0>
   141a0:	ldr	x0, [x19]
   141a4:	bl	b1d0 <free@plt>
   141a8:	mov	x0, x19
   141ac:	bl	b1d0 <free@plt>
   141b0:	ldp	x20, x19, [sp, #32]
   141b4:	ldr	x21, [sp, #16]
   141b8:	ldp	x29, x30, [sp], #48
   141bc:	ret

00000000000141c0 <hash_rehash@@Base>:
   141c0:	sub	sp, sp, #0x70
   141c4:	stp	x29, x30, [sp, #80]
   141c8:	stp	x20, x19, [sp, #96]
   141cc:	ldr	x8, [x0, #40]
   141d0:	mov	x19, x0
   141d4:	mov	x0, x1
   141d8:	add	x29, sp, #0x50
   141dc:	mov	x1, x8
   141e0:	bl	13ff0 <hash_initialize@@Base+0x1b4>
   141e4:	cbz	x0, 142d4 <hash_rehash@@Base+0x114>
   141e8:	ldr	x8, [x19, #16]
   141ec:	mov	x20, x0
   141f0:	cmp	x0, x8
   141f4:	b.ne	14200 <hash_rehash@@Base+0x40>  // b.any
   141f8:	mov	w0, #0x1                   	// #1
   141fc:	b	142d4 <hash_rehash@@Base+0x114>
   14200:	mov	w1, #0x10                  	// #16
   14204:	mov	x0, x20
   14208:	bl	ae10 <calloc@plt>
   1420c:	str	x0, [sp]
   14210:	cbz	x0, 142d4 <hash_rehash@@Base+0x114>
   14214:	ldr	x8, [sp]
   14218:	stp	xzr, xzr, [sp, #24]
   1421c:	mov	x0, sp
   14220:	mov	x1, x19
   14224:	add	x8, x8, x20, lsl #4
   14228:	stp	x8, x20, [sp, #8]
   1422c:	ldr	x8, [x19, #40]
   14230:	mov	w2, wzr
   14234:	str	x8, [sp, #40]
   14238:	ldr	x8, [x19, #48]
   1423c:	str	x8, [sp, #48]
   14240:	ldr	x8, [x19, #56]
   14244:	str	x8, [sp, #56]
   14248:	ldr	x8, [x19, #64]
   1424c:	str	x8, [sp, #64]
   14250:	ldr	x8, [x19, #72]
   14254:	str	x8, [sp, #72]
   14258:	bl	142e8 <hash_rehash@@Base+0x128>
   1425c:	tbz	w0, #0, 14298 <hash_rehash@@Base+0xd8>
   14260:	ldr	x0, [x19]
   14264:	bl	b1d0 <free@plt>
   14268:	ldr	x8, [sp]
   1426c:	mov	w0, #0x1                   	// #1
   14270:	str	x8, [x19]
   14274:	ldr	x8, [sp, #8]
   14278:	str	x8, [x19, #8]
   1427c:	ldr	x8, [sp, #16]
   14280:	str	x8, [x19, #16]
   14284:	ldr	x8, [sp, #24]
   14288:	str	x8, [x19, #24]
   1428c:	ldr	x8, [sp, #72]
   14290:	str	x8, [x19, #72]
   14294:	b	142d4 <hash_rehash@@Base+0x114>
   14298:	ldr	x8, [sp, #72]
   1429c:	mov	x1, sp
   142a0:	mov	w2, #0x1                   	// #1
   142a4:	mov	x0, x19
   142a8:	str	x8, [x19, #72]
   142ac:	bl	142e8 <hash_rehash@@Base+0x128>
   142b0:	tbz	w0, #0, 142e4 <hash_rehash@@Base+0x124>
   142b4:	mov	x1, sp
   142b8:	mov	x0, x19
   142bc:	mov	w2, wzr
   142c0:	bl	142e8 <hash_rehash@@Base+0x128>
   142c4:	tbz	w0, #0, 142e4 <hash_rehash@@Base+0x124>
   142c8:	ldr	x0, [sp]
   142cc:	bl	b1d0 <free@plt>
   142d0:	mov	w0, wzr
   142d4:	ldp	x20, x19, [sp, #96]
   142d8:	ldp	x29, x30, [sp, #80]
   142dc:	add	sp, sp, #0x70
   142e0:	ret
   142e4:	bl	b020 <abort@plt>
   142e8:	stp	x29, x30, [sp, #-80]!
   142ec:	str	x25, [sp, #16]
   142f0:	stp	x24, x23, [sp, #32]
   142f4:	stp	x22, x21, [sp, #48]
   142f8:	stp	x20, x19, [sp, #64]
   142fc:	ldp	x24, x8, [x1]
   14300:	mov	x29, sp
   14304:	cmp	x24, x8
   14308:	b.cs	14424 <hash_rehash@@Base+0x264>  // b.hs, b.nlast
   1430c:	mov	w19, w2
   14310:	mov	x20, x1
   14314:	mov	x21, x0
   14318:	b	1433c <hash_rehash@@Base+0x17c>
   1431c:	mov	w8, #0x4                   	// #4
   14320:	orr	w8, w8, #0x4
   14324:	cmp	w8, #0x4
   14328:	b.ne	1442c <hash_rehash@@Base+0x26c>  // b.any
   1432c:	ldr	x8, [x20, #8]
   14330:	add	x24, x24, #0x10
   14334:	cmp	x24, x8
   14338:	b.cs	14424 <hash_rehash@@Base+0x264>  // b.hs, b.nlast
   1433c:	ldr	x8, [x24]
   14340:	cbz	x8, 1432c <hash_rehash@@Base+0x16c>
   14344:	ldr	x22, [x24, #8]
   14348:	cbnz	x22, 14374 <hash_rehash@@Base+0x1b4>
   1434c:	b	143a4 <hash_rehash@@Base+0x1e4>
   14350:	str	x23, [x0]
   14354:	ldr	x8, [x21, #24]
   14358:	mov	x0, x21
   1435c:	mov	x1, x22
   14360:	add	x8, x8, #0x1
   14364:	str	x8, [x21, #24]
   14368:	bl	1485c <hash_delete@@Base+0x17c>
   1436c:	mov	x22, x25
   14370:	cbz	x25, 143a4 <hash_rehash@@Base+0x1e4>
   14374:	ldr	x23, [x22]
   14378:	mov	x0, x21
   1437c:	mov	x1, x23
   14380:	bl	13bf0 <hash_lookup@@Base+0x70>
   14384:	ldr	x8, [x0]
   14388:	ldr	x25, [x22, #8]
   1438c:	cbz	x8, 14350 <hash_rehash@@Base+0x190>
   14390:	ldr	x8, [x0, #8]
   14394:	str	x8, [x22, #8]
   14398:	str	x22, [x0, #8]
   1439c:	mov	x22, x25
   143a0:	cbnz	x25, 14374 <hash_rehash@@Base+0x1b4>
   143a4:	ldr	x22, [x24]
   143a8:	str	xzr, [x24, #8]
   143ac:	tbnz	w19, #0, 1431c <hash_rehash@@Base+0x15c>
   143b0:	mov	x0, x21
   143b4:	mov	x1, x22
   143b8:	bl	13bf0 <hash_lookup@@Base+0x70>
   143bc:	ldr	x8, [x0]
   143c0:	mov	x23, x0
   143c4:	cbz	x8, 143f0 <hash_rehash@@Base+0x230>
   143c8:	mov	x0, x21
   143cc:	bl	14674 <hash_insert_if_absent@@Base+0x22c>
   143d0:	cbz	x0, 14418 <hash_rehash@@Base+0x258>
   143d4:	str	x22, [x0]
   143d8:	ldr	x9, [x23, #8]
   143dc:	mov	w8, wzr
   143e0:	str	x9, [x0, #8]
   143e4:	str	x0, [x23, #8]
   143e8:	cbnz	wzr, 14320 <hash_rehash@@Base+0x160>
   143ec:	b	14400 <hash_rehash@@Base+0x240>
   143f0:	str	x22, [x23]
   143f4:	ldr	x8, [x21, #24]
   143f8:	add	x8, x8, #0x1
   143fc:	str	x8, [x21, #24]
   14400:	str	xzr, [x24]
   14404:	ldr	x9, [x20, #24]
   14408:	mov	w8, wzr
   1440c:	sub	x9, x9, #0x1
   14410:	str	x9, [x20, #24]
   14414:	b	14320 <hash_rehash@@Base+0x160>
   14418:	mov	w8, #0x1                   	// #1
   1441c:	cbnz	w8, 14320 <hash_rehash@@Base+0x160>
   14420:	b	14400 <hash_rehash@@Base+0x240>
   14424:	mov	w0, #0x1                   	// #1
   14428:	b	14430 <hash_rehash@@Base+0x270>
   1442c:	mov	w0, wzr
   14430:	ldp	x20, x19, [sp, #64]
   14434:	ldp	x22, x21, [sp, #48]
   14438:	ldp	x24, x23, [sp, #32]
   1443c:	ldr	x25, [sp, #16]
   14440:	ldp	x29, x30, [sp], #80
   14444:	ret

0000000000014448 <hash_insert_if_absent@@Base>:
   14448:	stp	x29, x30, [sp, #-48]!
   1444c:	str	x21, [sp, #16]
   14450:	stp	x20, x19, [sp, #32]
   14454:	mov	x29, sp
   14458:	cbz	x1, 14594 <hash_insert_if_absent@@Base+0x14c>
   1445c:	mov	x21, x2
   14460:	add	x2, x29, #0x18
   14464:	mov	w3, wzr
   14468:	mov	x20, x1
   1446c:	mov	x19, x0
   14470:	bl	14598 <hash_insert_if_absent@@Base+0x150>
   14474:	cbz	x0, 1448c <hash_insert_if_absent@@Base+0x44>
   14478:	cbz	x21, 1455c <hash_insert_if_absent@@Base+0x114>
   1447c:	mov	x8, x0
   14480:	mov	w0, wzr
   14484:	str	x8, [x21]
   14488:	b	14584 <hash_insert_if_absent@@Base+0x13c>
   1448c:	ldr	x8, [x19, #40]
   14490:	ldp	x10, x9, [x19, #16]
   14494:	ldr	s0, [x8, #8]
   14498:	ucvtf	s2, x10
   1449c:	ucvtf	s1, x9
   144a0:	fmul	s0, s0, s2
   144a4:	fcmp	s0, s1
   144a8:	b.pl	14524 <hash_insert_if_absent@@Base+0xdc>  // b.nfrst
   144ac:	mov	x0, x19
   144b0:	bl	13f48 <hash_initialize@@Base+0x10c>
   144b4:	ldr	x8, [x19, #40]
   144b8:	ldp	x10, x9, [x19, #16]
   144bc:	ldr	s0, [x8, #8]
   144c0:	ucvtf	s1, x10
   144c4:	ucvtf	s2, x9
   144c8:	fmul	s3, s0, s1
   144cc:	fcmp	s3, s2
   144d0:	b.pl	14524 <hash_insert_if_absent@@Base+0xdc>  // b.nfrst
   144d4:	ldr	s2, [x8, #12]
   144d8:	ldrb	w8, [x8, #16]
   144dc:	fmul	s1, s2, s1
   144e0:	cmp	w8, #0x0
   144e4:	fmul	s0, s0, s1
   144e8:	mov	w8, #0x5f800000            	// #1602224128
   144ec:	fcsel	s0, s0, s1, eq  // eq = none
   144f0:	fmov	s1, w8
   144f4:	fcmp	s0, s1
   144f8:	b.ge	14564 <hash_insert_if_absent@@Base+0x11c>  // b.tcont
   144fc:	fcvtzu	x1, s0
   14500:	mov	x0, x19
   14504:	bl	b060 <hash_rehash@plt>
   14508:	tbz	w0, #0, 14564 <hash_insert_if_absent@@Base+0x11c>
   1450c:	add	x2, x29, #0x18
   14510:	mov	x0, x19
   14514:	mov	x1, x20
   14518:	mov	w3, wzr
   1451c:	bl	14598 <hash_insert_if_absent@@Base+0x150>
   14520:	cbnz	x0, 14594 <hash_insert_if_absent@@Base+0x14c>
   14524:	ldr	x21, [x29, #24]
   14528:	ldr	x8, [x21]
   1452c:	cbz	x8, 1456c <hash_insert_if_absent@@Base+0x124>
   14530:	mov	x0, x19
   14534:	bl	14674 <hash_insert_if_absent@@Base+0x22c>
   14538:	cbz	x0, 14564 <hash_insert_if_absent@@Base+0x11c>
   1453c:	str	x20, [x0]
   14540:	ldr	x8, [x21, #8]
   14544:	str	x8, [x0, #8]
   14548:	str	x0, [x21, #8]
   1454c:	ldr	x8, [x19, #32]
   14550:	add	x8, x8, #0x1
   14554:	str	x8, [x19, #32]
   14558:	b	14580 <hash_insert_if_absent@@Base+0x138>
   1455c:	mov	w0, wzr
   14560:	b	14584 <hash_insert_if_absent@@Base+0x13c>
   14564:	mov	w0, #0xffffffff            	// #-1
   14568:	b	14584 <hash_insert_if_absent@@Base+0x13c>
   1456c:	str	x20, [x21]
   14570:	ldp	x9, x8, [x19, #24]
   14574:	add	x8, x8, #0x1
   14578:	add	x9, x9, #0x1
   1457c:	stp	x9, x8, [x19, #24]
   14580:	mov	w0, #0x1                   	// #1
   14584:	ldp	x20, x19, [sp, #32]
   14588:	ldr	x21, [sp, #16]
   1458c:	ldp	x29, x30, [sp], #48
   14590:	ret
   14594:	bl	b020 <abort@plt>
   14598:	stp	x29, x30, [sp, #-64]!
   1459c:	str	x23, [sp, #16]
   145a0:	stp	x22, x21, [sp, #32]
   145a4:	stp	x20, x19, [sp, #48]
   145a8:	mov	x29, sp
   145ac:	mov	w21, w3
   145b0:	mov	x23, x2
   145b4:	mov	x22, x1
   145b8:	mov	x19, x0
   145bc:	bl	13bf0 <hash_lookup@@Base+0x70>
   145c0:	str	x0, [x23]
   145c4:	ldr	x1, [x0]
   145c8:	cbz	x1, 14630 <hash_insert_if_absent@@Base+0x1e8>
   145cc:	mov	x20, x0
   145d0:	cmp	x1, x22
   145d4:	b.eq	145e8 <hash_insert_if_absent@@Base+0x1a0>  // b.none
   145d8:	ldr	x8, [x19, #56]
   145dc:	mov	x0, x22
   145e0:	blr	x8
   145e4:	tbz	w0, #0, 14604 <hash_insert_if_absent@@Base+0x1bc>
   145e8:	ldr	x22, [x20]
   145ec:	tbz	w21, #0, 1465c <hash_insert_if_absent@@Base+0x214>
   145f0:	ldr	x1, [x20, #8]
   145f4:	cbz	x1, 14658 <hash_insert_if_absent@@Base+0x210>
   145f8:	ldr	q0, [x1]
   145fc:	str	q0, [x20]
   14600:	b	1464c <hash_insert_if_absent@@Base+0x204>
   14604:	ldr	x8, [x20, #8]!
   14608:	cbz	x8, 14630 <hash_insert_if_absent@@Base+0x1e8>
   1460c:	ldr	x1, [x8]
   14610:	cmp	x1, x22
   14614:	b.eq	14638 <hash_insert_if_absent@@Base+0x1f0>  // b.none
   14618:	ldr	x8, [x19, #56]
   1461c:	mov	x0, x22
   14620:	blr	x8
   14624:	tbnz	w0, #0, 14638 <hash_insert_if_absent@@Base+0x1f0>
   14628:	ldr	x20, [x20]
   1462c:	b	14604 <hash_insert_if_absent@@Base+0x1bc>
   14630:	mov	x22, xzr
   14634:	b	1465c <hash_insert_if_absent@@Base+0x214>
   14638:	ldr	x1, [x20]
   1463c:	ldr	x22, [x1]
   14640:	tbz	w21, #0, 1465c <hash_insert_if_absent@@Base+0x214>
   14644:	ldr	x8, [x1, #8]
   14648:	str	x8, [x20]
   1464c:	mov	x0, x19
   14650:	bl	1485c <hash_delete@@Base+0x17c>
   14654:	b	1465c <hash_insert_if_absent@@Base+0x214>
   14658:	str	xzr, [x20]
   1465c:	mov	x0, x22
   14660:	ldp	x20, x19, [sp, #48]
   14664:	ldp	x22, x21, [sp, #32]
   14668:	ldr	x23, [sp, #16]
   1466c:	ldp	x29, x30, [sp], #64
   14670:	ret
   14674:	stp	x29, x30, [sp, #-16]!
   14678:	mov	x8, x0
   1467c:	ldr	x0, [x0, #72]
   14680:	mov	x29, sp
   14684:	cbz	x0, 14698 <hash_insert_if_absent@@Base+0x250>
   14688:	ldr	x9, [x0, #8]
   1468c:	str	x9, [x8, #72]
   14690:	ldp	x29, x30, [sp], #16
   14694:	ret
   14698:	mov	w0, #0x10                  	// #16
   1469c:	bl	abc0 <malloc@plt>
   146a0:	ldp	x29, x30, [sp], #16
   146a4:	ret

00000000000146a8 <hash_insert@@Base>:
   146a8:	stp	x29, x30, [sp, #-32]!
   146ac:	mov	x29, sp
   146b0:	add	x2, x29, #0x18
   146b4:	str	x19, [sp, #16]
   146b8:	mov	x19, x1
   146bc:	bl	ae60 <hash_insert_if_absent@plt>
   146c0:	ldr	x8, [x29, #24]
   146c4:	cmp	w0, #0x0
   146c8:	csel	x8, x8, x19, eq  // eq = none
   146cc:	ldr	x19, [sp, #16]
   146d0:	cmn	w0, #0x1
   146d4:	csel	x0, xzr, x8, eq  // eq = none
   146d8:	ldp	x29, x30, [sp], #32
   146dc:	ret

00000000000146e0 <hash_delete@@Base>:
   146e0:	stp	x29, x30, [sp, #-48]!
   146e4:	mov	x29, sp
   146e8:	add	x2, x29, #0x18
   146ec:	mov	w3, #0x1                   	// #1
   146f0:	str	x21, [sp, #16]
   146f4:	stp	x20, x19, [sp, #32]
   146f8:	mov	x20, x0
   146fc:	bl	14598 <hash_insert_if_absent@@Base+0x150>
   14700:	mov	x19, x0
   14704:	cbz	x0, 147b4 <hash_delete@@Base+0xd4>
   14708:	ldr	x8, [x20, #32]
   1470c:	sub	x8, x8, #0x1
   14710:	str	x8, [x20, #32]
   14714:	ldr	x8, [x29, #24]
   14718:	ldr	x8, [x8]
   1471c:	cbnz	x8, 147b4 <hash_delete@@Base+0xd4>
   14720:	ldp	x10, x8, [x20, #16]
   14724:	ldr	x9, [x20, #40]
   14728:	sub	x8, x8, #0x1
   1472c:	str	x8, [x20, #24]
   14730:	ldr	s0, [x9]
   14734:	ucvtf	s2, x10
   14738:	ucvtf	s1, x8
   1473c:	fmul	s0, s0, s2
   14740:	fcmp	s0, s1
   14744:	b.le	147b4 <hash_delete@@Base+0xd4>
   14748:	mov	x0, x20
   1474c:	bl	13f48 <hash_initialize@@Base+0x10c>
   14750:	ldr	x8, [x20, #40]
   14754:	ldp	x10, x9, [x20, #16]
   14758:	ldr	s1, [x8]
   1475c:	ucvtf	s0, x10
   14760:	ucvtf	s2, x9
   14764:	fmul	s1, s1, s0
   14768:	fcmp	s1, s2
   1476c:	b.le	147b4 <hash_delete@@Base+0xd4>
   14770:	ldr	s1, [x8, #4]
   14774:	ldrb	w9, [x8, #16]
   14778:	fmul	s0, s1, s0
   1477c:	cbnz	w9, 14788 <hash_delete@@Base+0xa8>
   14780:	ldr	s1, [x8, #8]
   14784:	fmul	s0, s0, s1
   14788:	fcvtzu	x1, s0
   1478c:	mov	x0, x20
   14790:	bl	b060 <hash_rehash@plt>
   14794:	tbnz	w0, #0, 147b4 <hash_delete@@Base+0xd4>
   14798:	ldr	x0, [x20, #72]
   1479c:	cbz	x0, 147b0 <hash_delete@@Base+0xd0>
   147a0:	ldr	x21, [x0, #8]
   147a4:	bl	b1d0 <free@plt>
   147a8:	mov	x0, x21
   147ac:	cbnz	x21, 147a0 <hash_delete@@Base+0xc0>
   147b0:	str	xzr, [x20, #72]
   147b4:	mov	x0, x19
   147b8:	ldp	x20, x19, [sp, #32]
   147bc:	ldr	x21, [sp, #16]
   147c0:	ldp	x29, x30, [sp], #48
   147c4:	ret
   147c8:	stp	x29, x30, [sp, #-32]!
   147cc:	cmp	x0, #0xa
   147d0:	mov	w8, #0xa                   	// #10
   147d4:	csel	x8, x0, x8, hi  // hi = pmore
   147d8:	str	x19, [sp, #16]
   147dc:	orr	x19, x8, #0x1
   147e0:	mov	x29, sp
   147e4:	cmn	x19, #0x1
   147e8:	b.eq	14804 <hash_delete@@Base+0x124>  // b.none
   147ec:	mov	x0, x19
   147f0:	bl	14814 <hash_delete@@Base+0x134>
   147f4:	tbnz	w0, #0, 14804 <hash_delete@@Base+0x124>
   147f8:	add	x19, x19, #0x2
   147fc:	cmn	x19, #0x1
   14800:	b.ne	147ec <hash_delete@@Base+0x10c>  // b.any
   14804:	mov	x0, x19
   14808:	ldr	x19, [sp, #16]
   1480c:	ldp	x29, x30, [sp], #32
   14810:	ret
   14814:	mov	w8, #0x3                   	// #3
   14818:	cmp	x0, #0xa
   1481c:	b.cc	14848 <hash_delete@@Base+0x168>  // b.lo, b.ul, b.last
   14820:	mov	w9, #0x9                   	// #9
   14824:	mov	w10, #0x10                  	// #16
   14828:	udiv	x11, x0, x8
   1482c:	msub	x11, x11, x8, x0
   14830:	cbz	x11, 14848 <hash_delete@@Base+0x168>
   14834:	add	x9, x10, x9
   14838:	add	x8, x8, #0x2
   1483c:	cmp	x9, x0
   14840:	add	x10, x10, #0x8
   14844:	b.cc	14828 <hash_delete@@Base+0x148>  // b.lo, b.ul, b.last
   14848:	udiv	x9, x0, x8
   1484c:	msub	x8, x9, x8, x0
   14850:	cmp	x8, #0x0
   14854:	cset	w0, ne  // ne = any
   14858:	ret
   1485c:	str	xzr, [x1]
   14860:	ldr	x8, [x0, #72]
   14864:	str	x8, [x1, #8]
   14868:	str	x1, [x0, #72]
   1486c:	ret
   14870:	stp	x29, x30, [sp, #-64]!
   14874:	stp	x24, x23, [sp, #16]
   14878:	mov	x24, x0
   1487c:	mov	w0, #0x40                  	// #64
   14880:	stp	x22, x21, [sp, #32]
   14884:	stp	x20, x19, [sp, #48]
   14888:	mov	x29, sp
   1488c:	mov	x20, x4
   14890:	mov	x22, x3
   14894:	mov	x21, x2
   14898:	mov	x23, x1
   1489c:	bl	abc0 <malloc@plt>
   148a0:	mov	x19, x0
   148a4:	cbz	x0, 148e4 <hash_delete@@Base+0x204>
   148a8:	mov	w8, #0xb                   	// #11
   148ac:	mov	w0, #0xb                   	// #11
   148b0:	mov	w1, #0x8                   	// #8
   148b4:	stp	x24, x23, [x19]
   148b8:	stp	x22, x20, [x19, #16]
   148bc:	str	x21, [x19, #32]
   148c0:	str	x8, [x19, #48]
   148c4:	bl	ae10 <calloc@plt>
   148c8:	str	x0, [x19, #40]
   148cc:	cbz	x0, 148d8 <hash_delete@@Base+0x1f8>
   148d0:	str	xzr, [x19, #56]
   148d4:	b	148e4 <hash_delete@@Base+0x204>
   148d8:	mov	x0, x19
   148dc:	bl	b1d0 <free@plt>
   148e0:	mov	x19, xzr
   148e4:	mov	x0, x19
   148e8:	ldp	x20, x19, [sp, #48]
   148ec:	ldp	x22, x21, [sp, #32]
   148f0:	ldp	x24, x23, [sp, #16]
   148f4:	ldp	x29, x30, [sp], #64
   148f8:	ret
   148fc:	ldr	x0, [x0, #56]
   14900:	ret
   14904:	stp	x29, x30, [sp, #-64]!
   14908:	stp	x22, x21, [sp, #32]
   1490c:	stp	x20, x19, [sp, #48]
   14910:	ldr	x8, [x0, #32]
   14914:	mov	x19, x2
   14918:	mov	x22, x0
   1491c:	mov	x20, x1
   14920:	str	x23, [sp, #16]
   14924:	mov	x29, sp
   14928:	cbz	x8, 1493c <hash_delete@@Base+0x25c>
   1492c:	mov	x0, x20
   14930:	blr	x8
   14934:	mov	x21, x0
   14938:	b	14940 <hash_delete@@Base+0x260>
   1493c:	mov	x21, x20
   14940:	ldp	x9, x8, [x22, #40]
   14944:	udiv	x10, x21, x8
   14948:	msub	x8, x10, x8, x21
   1494c:	ldr	x23, [x9, x8, lsl #3]
   14950:	cbz	x23, 1499c <hash_delete@@Base+0x2bc>
   14954:	ldr	x22, [x22, #8]
   14958:	b	1496c <hash_delete@@Base+0x28c>
   1495c:	cmp	x1, x20
   14960:	b.eq	1498c <hash_delete@@Base+0x2ac>  // b.none
   14964:	ldr	x23, [x23]
   14968:	cbz	x23, 1499c <hash_delete@@Base+0x2bc>
   1496c:	ldr	x8, [x23, #8]
   14970:	cmp	x8, x21
   14974:	b.ne	14964 <hash_delete@@Base+0x284>  // b.any
   14978:	ldr	x1, [x23, #16]
   1497c:	cbz	x22, 1495c <hash_delete@@Base+0x27c>
   14980:	mov	x0, x20
   14984:	blr	x22
   14988:	tbz	w0, #0, 14964 <hash_delete@@Base+0x284>
   1498c:	ldr	x8, [x23, #24]
   14990:	mov	w0, #0x1                   	// #1
   14994:	str	x8, [x19]
   14998:	b	149a0 <hash_delete@@Base+0x2c0>
   1499c:	mov	w0, wzr
   149a0:	ldp	x20, x19, [sp, #48]
   149a4:	ldp	x22, x21, [sp, #32]
   149a8:	ldr	x23, [sp, #16]
   149ac:	ldp	x29, x30, [sp], #64
   149b0:	ret
   149b4:	stp	x29, x30, [sp, #-80]!
   149b8:	stp	x26, x25, [sp, #16]
   149bc:	stp	x24, x23, [sp, #32]
   149c0:	stp	x22, x21, [sp, #48]
   149c4:	stp	x20, x19, [sp, #64]
   149c8:	ldr	x8, [x0, #32]
   149cc:	mov	x22, x3
   149d0:	mov	x20, x2
   149d4:	mov	x19, x0
   149d8:	mov	x21, x1
   149dc:	mov	x29, sp
   149e0:	cbz	x8, 149f4 <hash_delete@@Base+0x314>
   149e4:	mov	x0, x21
   149e8:	blr	x8
   149ec:	mov	x23, x0
   149f0:	b	149f8 <hash_delete@@Base+0x318>
   149f4:	mov	x23, x21
   149f8:	ldp	x9, x8, [x19, #40]
   149fc:	udiv	x10, x23, x8
   14a00:	msub	x24, x10, x8, x23
   14a04:	ldr	x25, [x9, x24, lsl #3]
   14a08:	cbz	x25, 14a58 <hash_delete@@Base+0x378>
   14a0c:	ldr	x26, [x19, #8]
   14a10:	b	14a24 <hash_delete@@Base+0x344>
   14a14:	cmp	x1, x21
   14a18:	b.eq	14a44 <hash_delete@@Base+0x364>  // b.none
   14a1c:	ldr	x25, [x25]
   14a20:	cbz	x25, 14a58 <hash_delete@@Base+0x378>
   14a24:	ldr	x8, [x25, #8]
   14a28:	cmp	x8, x23
   14a2c:	b.ne	14a1c <hash_delete@@Base+0x33c>  // b.any
   14a30:	ldr	x1, [x25, #16]
   14a34:	cbz	x26, 14a14 <hash_delete@@Base+0x334>
   14a38:	mov	x0, x21
   14a3c:	blr	x26
   14a40:	tbz	w0, #0, 14a1c <hash_delete@@Base+0x33c>
   14a44:	ldr	x8, [x25, #24]
   14a48:	mov	w0, wzr
   14a4c:	str	x8, [x22]
   14a50:	str	x20, [x25, #24]
   14a54:	b	14aa0 <hash_delete@@Base+0x3c0>
   14a58:	mov	w0, #0x20                  	// #32
   14a5c:	bl	abc0 <malloc@plt>
   14a60:	cbz	x0, 14a9c <hash_delete@@Base+0x3bc>
   14a64:	stp	x21, x20, [x0, #16]
   14a68:	str	x23, [x0, #8]
   14a6c:	ldr	x8, [x19, #40]
   14a70:	lsl	x9, x24, #3
   14a74:	ldr	x10, [x8, x9]
   14a78:	str	x10, [x0]
   14a7c:	str	x0, [x8, x9]
   14a80:	ldr	x8, [x19, #56]
   14a84:	mov	x0, x19
   14a88:	add	x8, x8, #0x1
   14a8c:	str	x8, [x19, #56]
   14a90:	bl	14cf4 <hash_delete@@Base+0x614>
   14a94:	mov	w0, #0x1                   	// #1
   14a98:	b	14aa0 <hash_delete@@Base+0x3c0>
   14a9c:	mov	w0, #0xffffffff            	// #-1
   14aa0:	ldp	x20, x19, [sp, #64]
   14aa4:	ldp	x22, x21, [sp, #48]
   14aa8:	ldp	x24, x23, [sp, #32]
   14aac:	ldp	x26, x25, [sp, #16]
   14ab0:	ldp	x29, x30, [sp], #80
   14ab4:	ret
   14ab8:	stp	x29, x30, [sp, #-80]!
   14abc:	stp	x24, x23, [sp, #32]
   14ac0:	stp	x22, x21, [sp, #48]
   14ac4:	stp	x20, x19, [sp, #64]
   14ac8:	ldr	x8, [x0, #32]
   14acc:	mov	x20, x2
   14ad0:	mov	x19, x0
   14ad4:	mov	x21, x1
   14ad8:	str	x25, [sp, #16]
   14adc:	mov	x29, sp
   14ae0:	cbz	x8, 14af4 <hash_delete@@Base+0x414>
   14ae4:	mov	x0, x21
   14ae8:	blr	x8
   14aec:	mov	x23, x0
   14af0:	b	14af8 <hash_delete@@Base+0x418>
   14af4:	mov	x23, x21
   14af8:	ldp	x9, x8, [x19, #40]
   14afc:	udiv	x10, x23, x8
   14b00:	msub	x8, x10, x8, x23
   14b04:	add	x24, x9, x8, lsl #3
   14b08:	ldr	x22, [x24]
   14b0c:	cbz	x22, 14b88 <hash_delete@@Base+0x4a8>
   14b10:	ldr	x25, [x19, #8]
   14b14:	b	14b2c <hash_delete@@Base+0x44c>
   14b18:	cmp	x1, x21
   14b1c:	b.eq	14b4c <hash_delete@@Base+0x46c>  // b.none
   14b20:	ldr	x24, [x24]
   14b24:	ldr	x22, [x24]
   14b28:	cbz	x22, 14b88 <hash_delete@@Base+0x4a8>
   14b2c:	ldr	x8, [x22, #8]
   14b30:	cmp	x8, x23
   14b34:	b.ne	14b20 <hash_delete@@Base+0x440>  // b.any
   14b38:	ldr	x1, [x22, #16]
   14b3c:	cbz	x25, 14b18 <hash_delete@@Base+0x438>
   14b40:	mov	x0, x21
   14b44:	blr	x25
   14b48:	tbz	w0, #0, 14b20 <hash_delete@@Base+0x440>
   14b4c:	ldr	x8, [x22, #24]
   14b50:	str	x8, [x20]
   14b54:	ldr	x8, [x22]
   14b58:	str	x8, [x24]
   14b5c:	ldr	x9, [x19, #56]
   14b60:	ldr	x8, [x19, #16]
   14b64:	sub	x9, x9, #0x1
   14b68:	str	x9, [x19, #56]
   14b6c:	cbz	x8, 14b78 <hash_delete@@Base+0x498>
   14b70:	ldr	x0, [x22, #16]
   14b74:	blr	x8
   14b78:	mov	x0, x22
   14b7c:	bl	b1d0 <free@plt>
   14b80:	mov	w0, #0x1                   	// #1
   14b84:	b	14b8c <hash_delete@@Base+0x4ac>
   14b88:	mov	w0, wzr
   14b8c:	ldp	x20, x19, [sp, #64]
   14b90:	ldp	x22, x21, [sp, #48]
   14b94:	ldp	x24, x23, [sp, #32]
   14b98:	ldr	x25, [sp, #16]
   14b9c:	ldp	x29, x30, [sp], #80
   14ba0:	ret
   14ba4:	stp	x29, x30, [sp, #-80]!
   14ba8:	stp	x24, x23, [sp, #32]
   14bac:	stp	x22, x21, [sp, #48]
   14bb0:	stp	x20, x19, [sp, #64]
   14bb4:	ldr	x8, [x0, #56]
   14bb8:	mov	x19, x0
   14bbc:	str	x25, [sp, #16]
   14bc0:	mov	x29, sp
   14bc4:	cbz	x8, 14c20 <hash_delete@@Base+0x540>
   14bc8:	ldr	x21, [x19, #48]
   14bcc:	cbz	x21, 14c20 <hash_delete@@Base+0x540>
   14bd0:	ldp	x22, x23, [x19, #16]
   14bd4:	ldr	x24, [x19, #40]
   14bd8:	b	14be0 <hash_delete@@Base+0x500>
   14bdc:	cbz	x21, 14c20 <hash_delete@@Base+0x540>
   14be0:	sub	x21, x21, #0x1
   14be4:	ldr	x20, [x24, x21, lsl #3]
   14be8:	cbnz	x20, 14c00 <hash_delete@@Base+0x520>
   14bec:	b	14bdc <hash_delete@@Base+0x4fc>
   14bf0:	mov	x0, x20
   14bf4:	bl	b1d0 <free@plt>
   14bf8:	mov	x20, x25
   14bfc:	cbz	x25, 14bdc <hash_delete@@Base+0x4fc>
   14c00:	ldr	x25, [x20]
   14c04:	cbz	x23, 14c10 <hash_delete@@Base+0x530>
   14c08:	ldr	x0, [x20, #24]
   14c0c:	blr	x23
   14c10:	cbz	x22, 14bf0 <hash_delete@@Base+0x510>
   14c14:	ldr	x0, [x20, #16]
   14c18:	blr	x22
   14c1c:	b	14bf0 <hash_delete@@Base+0x510>
   14c20:	ldr	x0, [x19, #40]
   14c24:	bl	b1d0 <free@plt>
   14c28:	mov	x0, x19
   14c2c:	bl	b1d0 <free@plt>
   14c30:	ldp	x20, x19, [sp, #64]
   14c34:	ldp	x22, x21, [sp, #48]
   14c38:	ldp	x24, x23, [sp, #32]
   14c3c:	ldr	x25, [sp, #16]
   14c40:	ldp	x29, x30, [sp], #80
   14c44:	ret
   14c48:	ldr	x9, [x0]
   14c4c:	str	xzr, [x8, #24]
   14c50:	stp	x9, x0, [x8]
   14c54:	ldr	x9, [x0, #48]
   14c58:	stp	xzr, x9, [x8, #40]
   14c5c:	ret
   14c60:	ldr	x8, [x0, #24]
   14c64:	cbz	x8, 14c88 <hash_delete@@Base+0x5a8>
   14c68:	ldr	x9, [x8, #16]
   14c6c:	str	x9, [x1]
   14c70:	ldr	x9, [x8, #24]
   14c74:	str	x9, [x2]
   14c78:	ldr	x8, [x8]
   14c7c:	str	x8, [x0, #24]
   14c80:	mov	w0, #0x1                   	// #1
   14c84:	ret
   14c88:	ldp	x10, x9, [x0, #40]
   14c8c:	cmp	x10, x9
   14c90:	b.cs	14ce4 <hash_delete@@Base+0x604>  // b.hs, b.nlast
   14c94:	ldr	x8, [x0, #8]
   14c98:	ldr	x8, [x8, #40]
   14c9c:	ldr	x11, [x8, x10, lsl #3]
   14ca0:	add	x10, x10, #0x1
   14ca4:	cbz	x11, 14cc8 <hash_delete@@Base+0x5e8>
   14ca8:	ldr	x12, [x11, #16]
   14cac:	str	x12, [x1]
   14cb0:	ldr	x12, [x11, #24]
   14cb4:	str	x12, [x2]
   14cb8:	ldr	x11, [x11]
   14cbc:	str	x10, [x0, #40]
   14cc0:	str	x11, [x0, #24]
   14cc4:	mov	w11, #0x1                   	// #1
   14cc8:	cbnz	w11, 14cd8 <hash_delete@@Base+0x5f8>
   14ccc:	cmp	x9, x10
   14cd0:	b.ne	14c9c <hash_delete@@Base+0x5bc>  // b.any
   14cd4:	mov	w11, wzr
   14cd8:	cbz	w11, 14ce4 <hash_delete@@Base+0x604>
   14cdc:	mov	w0, #0x1                   	// #1
   14ce0:	ret
   14ce4:	str	x9, [x0, #40]
   14ce8:	mov	w0, wzr
   14cec:	ret
   14cf0:	ret
   14cf4:	stp	x29, x30, [sp, #-32]!
   14cf8:	str	x19, [sp, #16]
   14cfc:	mov	x19, x0
   14d00:	ldr	x0, [x0, #56]
   14d04:	mov	x29, sp
   14d08:	lsr	x1, x0, #1
   14d0c:	bl	ad10 <xsum@plt>
   14d10:	ldr	x8, [x19, #48]
   14d14:	cmp	x0, x8
   14d18:	b.ls	14d28 <hash_delete@@Base+0x648>  // b.plast
   14d1c:	mov	x1, x0
   14d20:	mov	x0, x19
   14d24:	bl	14d34 <hash_delete@@Base+0x654>
   14d28:	ldr	x19, [sp, #16]
   14d2c:	ldp	x29, x30, [sp], #32
   14d30:	ret
   14d34:	stp	x29, x30, [sp, #-48]!
   14d38:	stp	x20, x19, [sp, #32]
   14d3c:	mov	x19, x0
   14d40:	mov	x0, x1
   14d44:	stp	x22, x21, [sp, #16]
   14d48:	mov	x29, sp
   14d4c:	bl	14dd4 <hash_delete@@Base+0x6f4>
   14d50:	ldr	x22, [x19, #48]
   14d54:	cmp	x0, x22
   14d58:	b.ls	14d8c <hash_delete@@Base+0x6ac>  // b.plast
   14d5c:	mov	x20, x0
   14d60:	lsr	x8, x0, #61
   14d64:	cbnz	x8, 14d8c <hash_delete@@Base+0x6ac>
   14d68:	ldr	x21, [x19, #40]
   14d6c:	mov	w1, #0x8                   	// #8
   14d70:	mov	x0, x20
   14d74:	bl	ae10 <calloc@plt>
   14d78:	cbz	x0, 14d8c <hash_delete@@Base+0x6ac>
   14d7c:	cbnz	x22, 14da0 <hash_delete@@Base+0x6c0>
   14d80:	stp	x0, x20, [x19, #40]
   14d84:	mov	x0, x21
   14d88:	bl	b1d0 <free@plt>
   14d8c:	ldp	x20, x19, [sp, #32]
   14d90:	ldp	x22, x21, [sp, #16]
   14d94:	ldp	x29, x30, [sp], #48
   14d98:	ret
   14d9c:	cbz	x22, 14d80 <hash_delete@@Base+0x6a0>
   14da0:	sub	x22, x22, #0x1
   14da4:	ldr	x8, [x21, x22, lsl #3]
   14da8:	cbz	x8, 14d9c <hash_delete@@Base+0x6bc>
   14dac:	ldp	x11, x9, [x8]
   14db0:	udiv	x10, x9, x20
   14db4:	msub	x9, x10, x20, x9
   14db8:	lsl	x9, x9, #3
   14dbc:	ldr	x10, [x0, x9]
   14dc0:	str	x10, [x8]
   14dc4:	str	x8, [x0, x9]
   14dc8:	mov	x8, x11
   14dcc:	cbnz	x11, 14dac <hash_delete@@Base+0x6cc>
   14dd0:	b	14d9c <hash_delete@@Base+0x6bc>
   14dd4:	adrp	x10, 2b000 <vasnprintf@@Base+0xec4>
   14dd8:	mov	x9, xzr
   14ddc:	add	x10, x10, #0xd18
   14de0:	ldr	x8, [x10, x9]
   14de4:	cmp	x8, x0
   14de8:	b.cs	14dfc <hash_delete@@Base+0x71c>  // b.hs, b.nlast
   14dec:	add	x9, x9, #0x8
   14df0:	cmp	x9, #0x740
   14df4:	b.ne	14de0 <hash_delete@@Base+0x700>  // b.any
   14df8:	mov	x8, #0xffffffffffffffff    	// #-1
   14dfc:	mov	x0, x8
   14e00:	ret

0000000000014e04 <hash_pjw@@Base>:
   14e04:	ldrb	w9, [x0]
   14e08:	cbz	w9, 14e28 <hash_pjw@@Base+0x24>
   14e0c:	mov	x8, xzr
   14e10:	add	x10, x0, #0x1
   14e14:	ror	x8, x8, #55
   14e18:	add	x8, x8, w9, uxtb
   14e1c:	ldrb	w9, [x10], #1
   14e20:	cbnz	w9, 14e14 <hash_pjw@@Base+0x10>
   14e24:	b	14e2c <hash_pjw@@Base+0x28>
   14e28:	mov	x8, xzr
   14e2c:	udiv	x9, x8, x1
   14e30:	msub	x0, x9, x1, x8
   14e34:	ret

0000000000014e38 <hash_pjw_bare@@Base>:
   14e38:	cbz	x1, 14e6c <hash_pjw_bare@@Base+0x34>
   14e3c:	mov	x10, xzr
   14e40:	mov	x8, xzr
   14e44:	mov	w9, #0x1                   	// #1
   14e48:	ldrb	w11, [x0, x10]
   14e4c:	ror	x8, x8, #55
   14e50:	mov	w10, w9
   14e54:	cmp	x10, x1
   14e58:	add	x8, x8, x11
   14e5c:	add	w9, w9, #0x1
   14e60:	b.cc	14e48 <hash_pjw_bare@@Base+0x10>  // b.lo, b.ul, b.last
   14e64:	mov	x0, x8
   14e68:	ret
   14e6c:	mov	x0, xzr
   14e70:	ret
   14e74:	stp	x29, x30, [sp, #-64]!
   14e78:	str	x23, [sp, #16]
   14e7c:	mov	x23, x0
   14e80:	mov	w0, #0x38                  	// #56
   14e84:	stp	x22, x21, [sp, #32]
   14e88:	stp	x20, x19, [sp, #48]
   14e8c:	mov	x29, sp
   14e90:	mov	x21, x3
   14e94:	mov	x20, x2
   14e98:	mov	x22, x1
   14e9c:	bl	abc0 <malloc@plt>
   14ea0:	mov	x19, x0
   14ea4:	cbz	x0, 14ee0 <hash_pjw_bare@@Base+0xa8>
   14ea8:	mov	w8, #0xb                   	// #11
   14eac:	mov	w0, #0xb                   	// #11
   14eb0:	mov	w1, #0x8                   	// #8
   14eb4:	stp	x23, x22, [x19]
   14eb8:	stp	x21, x20, [x19, #16]
   14ebc:	str	x8, [x19, #40]
   14ec0:	bl	ae10 <calloc@plt>
   14ec4:	str	x0, [x19, #32]
   14ec8:	cbz	x0, 14ed4 <hash_pjw_bare@@Base+0x9c>
   14ecc:	str	xzr, [x19, #48]
   14ed0:	b	14ee0 <hash_pjw_bare@@Base+0xa8>
   14ed4:	mov	x0, x19
   14ed8:	bl	b1d0 <free@plt>
   14edc:	mov	x19, xzr
   14ee0:	mov	x0, x19
   14ee4:	ldp	x20, x19, [sp, #48]
   14ee8:	ldp	x22, x21, [sp, #32]
   14eec:	ldr	x23, [sp, #16]
   14ef0:	ldp	x29, x30, [sp], #64
   14ef4:	ret
   14ef8:	ldr	x0, [x0, #48]
   14efc:	ret
   14f00:	stp	x29, x30, [sp, #-48]!
   14f04:	stp	x22, x21, [sp, #16]
   14f08:	stp	x20, x19, [sp, #32]
   14f0c:	ldr	x8, [x0, #24]
   14f10:	mov	x21, x0
   14f14:	mov	x19, x1
   14f18:	mov	x29, sp
   14f1c:	cbz	x8, 14f30 <hash_pjw_bare@@Base+0xf8>
   14f20:	mov	x0, x19
   14f24:	blr	x8
   14f28:	mov	x20, x0
   14f2c:	b	14f34 <hash_pjw_bare@@Base+0xfc>
   14f30:	mov	x20, x19
   14f34:	ldp	x9, x8, [x21, #32]
   14f38:	udiv	x10, x20, x8
   14f3c:	msub	x8, x10, x8, x20
   14f40:	ldr	x22, [x9, x8, lsl #3]
   14f44:	cbz	x22, 14f88 <hash_pjw_bare@@Base+0x150>
   14f48:	ldr	x21, [x21, #8]
   14f4c:	b	14f60 <hash_pjw_bare@@Base+0x128>
   14f50:	cmp	x1, x19
   14f54:	b.eq	14f80 <hash_pjw_bare@@Base+0x148>  // b.none
   14f58:	ldr	x22, [x22]
   14f5c:	cbz	x22, 14f88 <hash_pjw_bare@@Base+0x150>
   14f60:	ldr	x8, [x22, #8]
   14f64:	cmp	x8, x20
   14f68:	b.ne	14f58 <hash_pjw_bare@@Base+0x120>  // b.any
   14f6c:	ldr	x1, [x22, #16]
   14f70:	cbz	x21, 14f50 <hash_pjw_bare@@Base+0x118>
   14f74:	mov	x0, x19
   14f78:	blr	x21
   14f7c:	tbz	w0, #0, 14f58 <hash_pjw_bare@@Base+0x120>
   14f80:	mov	w0, #0x1                   	// #1
   14f84:	b	14f8c <hash_pjw_bare@@Base+0x154>
   14f88:	mov	w0, wzr
   14f8c:	ldp	x20, x19, [sp, #32]
   14f90:	ldp	x22, x21, [sp, #16]
   14f94:	ldp	x29, x30, [sp], #48
   14f98:	ret
   14f9c:	stp	x29, x30, [sp, #-64]!
   14fa0:	stp	x24, x23, [sp, #16]
   14fa4:	stp	x22, x21, [sp, #32]
   14fa8:	stp	x20, x19, [sp, #48]
   14fac:	ldr	x8, [x0, #24]
   14fb0:	mov	x19, x0
   14fb4:	mov	x20, x1
   14fb8:	mov	x29, sp
   14fbc:	cbz	x8, 14fd0 <hash_pjw_bare@@Base+0x198>
   14fc0:	mov	x0, x20
   14fc4:	blr	x8
   14fc8:	mov	x21, x0
   14fcc:	b	14fd4 <hash_pjw_bare@@Base+0x19c>
   14fd0:	mov	x21, x20
   14fd4:	ldp	x9, x8, [x19, #32]
   14fd8:	udiv	x10, x21, x8
   14fdc:	msub	x22, x10, x8, x21
   14fe0:	ldr	x23, [x9, x22, lsl #3]
   14fe4:	cbz	x23, 15028 <hash_pjw_bare@@Base+0x1f0>
   14fe8:	ldr	x24, [x19, #8]
   14fec:	b	15000 <hash_pjw_bare@@Base+0x1c8>
   14ff0:	cmp	x1, x20
   14ff4:	b.eq	15020 <hash_pjw_bare@@Base+0x1e8>  // b.none
   14ff8:	ldr	x23, [x23]
   14ffc:	cbz	x23, 15028 <hash_pjw_bare@@Base+0x1f0>
   15000:	ldr	x8, [x23, #8]
   15004:	cmp	x8, x21
   15008:	b.ne	14ff8 <hash_pjw_bare@@Base+0x1c0>  // b.any
   1500c:	ldr	x1, [x23, #16]
   15010:	cbz	x24, 14ff0 <hash_pjw_bare@@Base+0x1b8>
   15014:	mov	x0, x20
   15018:	blr	x24
   1501c:	tbz	w0, #0, 14ff8 <hash_pjw_bare@@Base+0x1c0>
   15020:	mov	w0, wzr
   15024:	b	1506c <hash_pjw_bare@@Base+0x234>
   15028:	mov	w0, #0x18                  	// #24
   1502c:	bl	abc0 <malloc@plt>
   15030:	cbz	x0, 15068 <hash_pjw_bare@@Base+0x230>
   15034:	stp	x21, x20, [x0, #8]
   15038:	ldr	x8, [x19, #32]
   1503c:	lsl	x9, x22, #3
   15040:	ldr	x10, [x8, x9]
   15044:	str	x10, [x0]
   15048:	str	x0, [x8, x9]
   1504c:	ldr	x8, [x19, #48]
   15050:	mov	x0, x19
   15054:	add	x8, x8, #0x1
   15058:	str	x8, [x19, #48]
   1505c:	bl	15284 <hash_pjw_bare@@Base+0x44c>
   15060:	mov	w0, #0x1                   	// #1
   15064:	b	1506c <hash_pjw_bare@@Base+0x234>
   15068:	mov	w0, #0xffffffff            	// #-1
   1506c:	ldp	x20, x19, [sp, #48]
   15070:	ldp	x22, x21, [sp, #32]
   15074:	ldp	x24, x23, [sp, #16]
   15078:	ldp	x29, x30, [sp], #64
   1507c:	ret
   15080:	stp	x29, x30, [sp, #-64]!
   15084:	stp	x24, x23, [sp, #16]
   15088:	stp	x22, x21, [sp, #32]
   1508c:	stp	x20, x19, [sp, #48]
   15090:	ldr	x8, [x0, #24]
   15094:	mov	x19, x0
   15098:	mov	x20, x1
   1509c:	mov	x29, sp
   150a0:	cbz	x8, 150b4 <hash_pjw_bare@@Base+0x27c>
   150a4:	mov	x0, x20
   150a8:	blr	x8
   150ac:	mov	x22, x0
   150b0:	b	150b8 <hash_pjw_bare@@Base+0x280>
   150b4:	mov	x22, x20
   150b8:	ldp	x9, x8, [x19, #32]
   150bc:	udiv	x10, x22, x8
   150c0:	msub	x8, x10, x8, x22
   150c4:	add	x23, x9, x8, lsl #3
   150c8:	ldr	x21, [x23]
   150cc:	cbz	x21, 15140 <hash_pjw_bare@@Base+0x308>
   150d0:	ldr	x24, [x19, #8]
   150d4:	b	150ec <hash_pjw_bare@@Base+0x2b4>
   150d8:	cmp	x1, x20
   150dc:	b.eq	1510c <hash_pjw_bare@@Base+0x2d4>  // b.none
   150e0:	ldr	x23, [x23]
   150e4:	ldr	x21, [x23]
   150e8:	cbz	x21, 15140 <hash_pjw_bare@@Base+0x308>
   150ec:	ldr	x8, [x21, #8]
   150f0:	cmp	x8, x22
   150f4:	b.ne	150e0 <hash_pjw_bare@@Base+0x2a8>  // b.any
   150f8:	ldr	x1, [x21, #16]
   150fc:	cbz	x24, 150d8 <hash_pjw_bare@@Base+0x2a0>
   15100:	mov	x0, x20
   15104:	blr	x24
   15108:	tbz	w0, #0, 150e0 <hash_pjw_bare@@Base+0x2a8>
   1510c:	ldr	x8, [x21]
   15110:	str	x8, [x23]
   15114:	ldr	x9, [x19, #48]
   15118:	ldr	x8, [x19, #16]
   1511c:	sub	x9, x9, #0x1
   15120:	str	x9, [x19, #48]
   15124:	cbz	x8, 15130 <hash_pjw_bare@@Base+0x2f8>
   15128:	ldr	x0, [x21, #16]
   1512c:	blr	x8
   15130:	mov	x0, x21
   15134:	bl	b1d0 <free@plt>
   15138:	mov	w0, #0x1                   	// #1
   1513c:	b	15144 <hash_pjw_bare@@Base+0x30c>
   15140:	mov	w0, wzr
   15144:	ldp	x20, x19, [sp, #48]
   15148:	ldp	x22, x21, [sp, #32]
   1514c:	ldp	x24, x23, [sp, #16]
   15150:	ldp	x29, x30, [sp], #64
   15154:	ret
   15158:	stp	x29, x30, [sp, #-64]!
   1515c:	stp	x24, x23, [sp, #16]
   15160:	stp	x22, x21, [sp, #32]
   15164:	stp	x20, x19, [sp, #48]
   15168:	ldr	x8, [x0, #48]
   1516c:	mov	x19, x0
   15170:	mov	x29, sp
   15174:	cbz	x8, 151c4 <hash_pjw_bare@@Base+0x38c>
   15178:	ldr	x21, [x19, #40]
   1517c:	cbz	x21, 151c4 <hash_pjw_bare@@Base+0x38c>
   15180:	ldr	x22, [x19, #16]
   15184:	ldr	x23, [x19, #32]
   15188:	b	15190 <hash_pjw_bare@@Base+0x358>
   1518c:	cbz	x21, 151c4 <hash_pjw_bare@@Base+0x38c>
   15190:	sub	x21, x21, #0x1
   15194:	ldr	x20, [x23, x21, lsl #3]
   15198:	cbnz	x20, 151b0 <hash_pjw_bare@@Base+0x378>
   1519c:	b	1518c <hash_pjw_bare@@Base+0x354>
   151a0:	mov	x0, x20
   151a4:	bl	b1d0 <free@plt>
   151a8:	mov	x20, x24
   151ac:	cbz	x24, 1518c <hash_pjw_bare@@Base+0x354>
   151b0:	ldr	x24, [x20]
   151b4:	cbz	x22, 151a0 <hash_pjw_bare@@Base+0x368>
   151b8:	ldr	x0, [x20, #16]
   151bc:	blr	x22
   151c0:	b	151a0 <hash_pjw_bare@@Base+0x368>
   151c4:	ldr	x0, [x19, #32]
   151c8:	bl	b1d0 <free@plt>
   151cc:	mov	x0, x19
   151d0:	bl	b1d0 <free@plt>
   151d4:	ldp	x20, x19, [sp, #48]
   151d8:	ldp	x22, x21, [sp, #32]
   151dc:	ldp	x24, x23, [sp, #16]
   151e0:	ldp	x29, x30, [sp], #64
   151e4:	ret
   151e8:	ldr	x9, [x0]
   151ec:	str	xzr, [x8, #24]
   151f0:	stp	x9, x0, [x8]
   151f4:	ldr	x9, [x0, #40]
   151f8:	stp	xzr, x9, [x8, #40]
   151fc:	ret
   15200:	ldr	x8, [x0, #24]
   15204:	cbz	x8, 15220 <hash_pjw_bare@@Base+0x3e8>
   15208:	ldr	x9, [x8, #16]
   1520c:	str	x9, [x1]
   15210:	ldr	x8, [x8]
   15214:	str	x8, [x0, #24]
   15218:	mov	w0, #0x1                   	// #1
   1521c:	ret
   15220:	ldp	x10, x9, [x0, #40]
   15224:	cmp	x10, x9
   15228:	b.cs	15274 <hash_pjw_bare@@Base+0x43c>  // b.hs, b.nlast
   1522c:	ldr	x8, [x0, #8]
   15230:	ldr	x8, [x8, #32]
   15234:	ldr	x11, [x8, x10, lsl #3]
   15238:	add	x10, x10, #0x1
   1523c:	cbz	x11, 15258 <hash_pjw_bare@@Base+0x420>
   15240:	ldr	x12, [x11, #16]
   15244:	str	x12, [x1]
   15248:	ldr	x11, [x11]
   1524c:	str	x10, [x0, #40]
   15250:	str	x11, [x0, #24]
   15254:	mov	w11, #0x1                   	// #1
   15258:	cbnz	w11, 15268 <hash_pjw_bare@@Base+0x430>
   1525c:	cmp	x9, x10
   15260:	b.ne	15234 <hash_pjw_bare@@Base+0x3fc>  // b.any
   15264:	mov	w11, wzr
   15268:	cbz	w11, 15274 <hash_pjw_bare@@Base+0x43c>
   1526c:	mov	w0, #0x1                   	// #1
   15270:	ret
   15274:	str	x9, [x0, #40]
   15278:	mov	w0, wzr
   1527c:	ret
   15280:	ret
   15284:	stp	x29, x30, [sp, #-32]!
   15288:	str	x19, [sp, #16]
   1528c:	mov	x19, x0
   15290:	ldr	x0, [x0, #48]
   15294:	mov	x29, sp
   15298:	lsr	x1, x0, #1
   1529c:	bl	ad10 <xsum@plt>
   152a0:	ldr	x8, [x19, #40]
   152a4:	cmp	x0, x8
   152a8:	b.ls	152b8 <hash_pjw_bare@@Base+0x480>  // b.plast
   152ac:	mov	x1, x0
   152b0:	mov	x0, x19
   152b4:	bl	152c4 <hash_pjw_bare@@Base+0x48c>
   152b8:	ldr	x19, [sp, #16]
   152bc:	ldp	x29, x30, [sp], #32
   152c0:	ret
   152c4:	stp	x29, x30, [sp, #-48]!
   152c8:	stp	x20, x19, [sp, #32]
   152cc:	mov	x19, x0
   152d0:	mov	x0, x1
   152d4:	stp	x22, x21, [sp, #16]
   152d8:	mov	x29, sp
   152dc:	bl	15364 <hash_pjw_bare@@Base+0x52c>
   152e0:	ldr	x22, [x19, #40]
   152e4:	cmp	x0, x22
   152e8:	b.ls	1531c <hash_pjw_bare@@Base+0x4e4>  // b.plast
   152ec:	mov	x20, x0
   152f0:	lsr	x8, x0, #61
   152f4:	cbnz	x8, 1531c <hash_pjw_bare@@Base+0x4e4>
   152f8:	ldr	x21, [x19, #32]
   152fc:	mov	w1, #0x8                   	// #8
   15300:	mov	x0, x20
   15304:	bl	ae10 <calloc@plt>
   15308:	cbz	x0, 1531c <hash_pjw_bare@@Base+0x4e4>
   1530c:	cbnz	x22, 15330 <hash_pjw_bare@@Base+0x4f8>
   15310:	stp	x0, x20, [x19, #32]
   15314:	mov	x0, x21
   15318:	bl	b1d0 <free@plt>
   1531c:	ldp	x20, x19, [sp, #32]
   15320:	ldp	x22, x21, [sp, #16]
   15324:	ldp	x29, x30, [sp], #48
   15328:	ret
   1532c:	cbz	x22, 15310 <hash_pjw_bare@@Base+0x4d8>
   15330:	sub	x22, x22, #0x1
   15334:	ldr	x8, [x21, x22, lsl #3]
   15338:	cbz	x8, 1532c <hash_pjw_bare@@Base+0x4f4>
   1533c:	ldp	x11, x9, [x8]
   15340:	udiv	x10, x9, x20
   15344:	msub	x9, x10, x20, x9
   15348:	lsl	x9, x9, #3
   1534c:	ldr	x10, [x0, x9]
   15350:	str	x10, [x8]
   15354:	str	x8, [x0, x9]
   15358:	mov	x8, x11
   1535c:	cbnz	x11, 1533c <hash_pjw_bare@@Base+0x504>
   15360:	b	1532c <hash_pjw_bare@@Base+0x4f4>
   15364:	adrp	x10, 2c000 <vasnprintf@@Base+0x1ec4>
   15368:	mov	x9, xzr
   1536c:	add	x10, x10, #0x458
   15370:	ldr	x8, [x10, x9]
   15374:	cmp	x8, x0
   15378:	b.cs	1538c <hash_pjw_bare@@Base+0x554>  // b.hs, b.nlast
   1537c:	add	x9, x9, #0x8
   15380:	cmp	x9, #0x740
   15384:	b.ne	15370 <hash_pjw_bare@@Base+0x538>  // b.any
   15388:	mov	x8, #0xffffffffffffffff    	// #-1
   1538c:	mov	x0, x8
   15390:	ret

0000000000015394 <triple_hash@@Base>:
   15394:	stp	x29, x30, [sp, #-32]!
   15398:	stp	x20, x19, [sp, #16]
   1539c:	mov	x19, x0
   153a0:	ldr	x0, [x0]
   153a4:	mov	x29, sp
   153a8:	mov	x20, x1
   153ac:	bl	b400 <hash_pjw@plt>
   153b0:	ldr	x8, [x19, #8]
   153b4:	eor	x8, x8, x0
   153b8:	udiv	x9, x8, x20
   153bc:	msub	x0, x9, x20, x8
   153c0:	ldp	x20, x19, [sp, #16]
   153c4:	ldp	x29, x30, [sp], #32
   153c8:	ret

00000000000153cc <triple_hash_no_name@@Base>:
   153cc:	ldr	x8, [x0, #8]
   153d0:	udiv	x9, x8, x1
   153d4:	msub	x0, x9, x1, x8
   153d8:	ret

00000000000153dc <triple_compare@@Base>:
   153dc:	stp	x29, x30, [sp, #-16]!
   153e0:	ldr	x8, [x0, #8]
   153e4:	ldr	x9, [x1, #8]
   153e8:	mov	x29, sp
   153ec:	cmp	x8, x9
   153f0:	b.ne	15414 <triple_compare@@Base+0x38>  // b.any
   153f4:	ldr	x8, [x0, #16]
   153f8:	ldr	x9, [x1, #16]
   153fc:	cmp	x8, x9
   15400:	b.ne	15414 <triple_compare@@Base+0x38>  // b.any
   15404:	ldr	x0, [x0]
   15408:	ldr	x1, [x1]
   1540c:	bl	adc0 <same_name@plt>
   15410:	b	15418 <triple_compare@@Base+0x3c>
   15414:	mov	w0, wzr
   15418:	and	w0, w0, #0x1
   1541c:	ldp	x29, x30, [sp], #16
   15420:	ret

0000000000015424 <triple_compare_ino_str@@Base>:
   15424:	stp	x29, x30, [sp, #-16]!
   15428:	ldr	x8, [x0, #8]
   1542c:	ldr	x9, [x1, #8]
   15430:	mov	x29, sp
   15434:	cmp	x8, x9
   15438:	b.ne	15468 <triple_compare_ino_str@@Base+0x44>  // b.any
   1543c:	ldr	x8, [x0, #16]
   15440:	ldr	x9, [x1, #16]
   15444:	cmp	x8, x9
   15448:	b.ne	15468 <triple_compare_ino_str@@Base+0x44>  // b.any
   1544c:	ldr	x0, [x0]
   15450:	ldr	x1, [x1]
   15454:	bl	b120 <strcmp@plt>
   15458:	cmp	w0, #0x0
   1545c:	cset	w0, eq  // eq = none
   15460:	ldp	x29, x30, [sp], #16
   15464:	ret
   15468:	mov	w0, wzr
   1546c:	ldp	x29, x30, [sp], #16
   15470:	ret

0000000000015474 <triple_free@@Base>:
   15474:	stp	x29, x30, [sp, #-32]!
   15478:	str	x19, [sp, #16]
   1547c:	mov	x19, x0
   15480:	ldr	x0, [x0]
   15484:	mov	x29, sp
   15488:	bl	b1d0 <free@plt>
   1548c:	mov	x0, x19
   15490:	bl	b1d0 <free@plt>
   15494:	ldr	x19, [sp, #16]
   15498:	ldp	x29, x30, [sp], #32
   1549c:	ret

00000000000154a0 <idpriv_drop@@Base>:
   154a0:	sub	sp, sp, #0x30
   154a4:	stp	x29, x30, [sp, #16]
   154a8:	stp	x20, x19, [sp, #32]
   154ac:	add	x29, sp, #0x10
   154b0:	bl	aa20 <getuid@plt>
   154b4:	mov	w20, w0
   154b8:	bl	b210 <getgid@plt>
   154bc:	mov	w1, w0
   154c0:	mov	w2, w0
   154c4:	mov	w19, w0
   154c8:	bl	b710 <setresgid@plt>
   154cc:	tbnz	w0, #31, 1555c <idpriv_drop@@Base+0xbc>
   154d0:	mov	w0, w20
   154d4:	mov	w1, w20
   154d8:	mov	w2, w20
   154dc:	bl	b4e0 <setresuid@plt>
   154e0:	tbnz	w0, #31, 1555c <idpriv_drop@@Base+0xbc>
   154e4:	sub	x0, x29, #0x4
   154e8:	add	x1, sp, #0x8
   154ec:	add	x2, sp, #0x4
   154f0:	bl	a990 <getresuid@plt>
   154f4:	tbnz	w0, #31, 15570 <idpriv_drop@@Base+0xd0>
   154f8:	ldur	w8, [x29, #-4]
   154fc:	cmp	w8, w20
   15500:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   15504:	ldr	w8, [sp, #8]
   15508:	cmp	w8, w20
   1550c:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   15510:	ldr	w8, [sp, #4]
   15514:	cmp	w8, w20
   15518:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   1551c:	sub	x0, x29, #0x4
   15520:	add	x1, sp, #0x8
   15524:	add	x2, sp, #0x4
   15528:	bl	b470 <getresgid@plt>
   1552c:	tbnz	w0, #31, 15570 <idpriv_drop@@Base+0xd0>
   15530:	ldur	w8, [x29, #-4]
   15534:	cmp	w8, w19
   15538:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   1553c:	ldr	w8, [sp, #8]
   15540:	cmp	w8, w19
   15544:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   15548:	ldr	w8, [sp, #4]
   1554c:	cmp	w8, w19
   15550:	b.ne	15570 <idpriv_drop@@Base+0xd0>  // b.any
   15554:	mov	w0, wzr
   15558:	b	15560 <idpriv_drop@@Base+0xc0>
   1555c:	mov	w0, #0xffffffff            	// #-1
   15560:	ldp	x20, x19, [sp, #32]
   15564:	ldp	x29, x30, [sp, #16]
   15568:	add	sp, sp, #0x30
   1556c:	ret
   15570:	bl	b020 <abort@plt>

0000000000015574 <idpriv_temp_drop@@Base>:
   15574:	sub	sp, sp, #0x50
   15578:	stp	x29, x30, [sp, #16]
   1557c:	str	x23, [sp, #32]
   15580:	stp	x22, x21, [sp, #48]
   15584:	stp	x20, x19, [sp, #64]
   15588:	add	x29, sp, #0x10
   1558c:	bl	aa20 <getuid@plt>
   15590:	mov	w20, w0
   15594:	bl	b210 <getgid@plt>
   15598:	adrp	x23, 40000 <base_len@@Base+0x2c984>
   1559c:	ldr	w8, [x23, #2188]
   155a0:	mov	w19, w0
   155a4:	cmn	w8, #0x1
   155a8:	b.ne	155b4 <idpriv_temp_drop@@Base+0x40>  // b.any
   155ac:	bl	a960 <geteuid@plt>
   155b0:	str	w0, [x23, #2188]
   155b4:	adrp	x22, 40000 <base_len@@Base+0x2c984>
   155b8:	ldr	w8, [x22, #2192]
   155bc:	cmn	w8, #0x1
   155c0:	b.ne	155cc <idpriv_temp_drop@@Base+0x58>  // b.any
   155c4:	bl	a910 <getegid@plt>
   155c8:	str	w0, [x22, #2192]
   155cc:	ldr	w2, [x22, #2192]
   155d0:	mov	w0, #0xffffffff            	// #-1
   155d4:	mov	w1, w19
   155d8:	mov	w21, #0xffffffff            	// #-1
   155dc:	bl	b710 <setresgid@plt>
   155e0:	tbnz	w0, #31, 15678 <idpriv_temp_drop@@Base+0x104>
   155e4:	ldr	w2, [x23, #2188]
   155e8:	mov	w0, #0xffffffff            	// #-1
   155ec:	mov	w1, w20
   155f0:	mov	w21, #0xffffffff            	// #-1
   155f4:	bl	b4e0 <setresuid@plt>
   155f8:	tbnz	w0, #31, 15678 <idpriv_temp_drop@@Base+0x104>
   155fc:	add	x0, x29, #0x1c
   15600:	add	x1, x29, #0x18
   15604:	sub	x2, x29, #0x4
   15608:	bl	a990 <getresuid@plt>
   1560c:	tbnz	w0, #31, 15694 <idpriv_temp_drop@@Base+0x120>
   15610:	ldr	w8, [x29, #28]
   15614:	cmp	w8, w20
   15618:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   1561c:	ldr	w8, [x29, #24]
   15620:	cmp	w8, w20
   15624:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   15628:	ldur	w8, [x29, #-4]
   1562c:	ldr	w9, [x23, #2188]
   15630:	cmp	w8, w9
   15634:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   15638:	add	x0, x29, #0x1c
   1563c:	add	x1, x29, #0x18
   15640:	sub	x2, x29, #0x4
   15644:	bl	b470 <getresgid@plt>
   15648:	tbnz	w0, #31, 15694 <idpriv_temp_drop@@Base+0x120>
   1564c:	ldr	w8, [x29, #28]
   15650:	cmp	w8, w19
   15654:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   15658:	ldr	w8, [x29, #24]
   1565c:	cmp	w8, w19
   15660:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   15664:	ldur	w8, [x29, #-4]
   15668:	ldr	w9, [x22, #2192]
   1566c:	cmp	w8, w9
   15670:	b.ne	15694 <idpriv_temp_drop@@Base+0x120>  // b.any
   15674:	mov	w21, wzr
   15678:	mov	w0, w21
   1567c:	ldp	x20, x19, [sp, #64]
   15680:	ldp	x22, x21, [sp, #48]
   15684:	ldr	x23, [sp, #32]
   15688:	ldp	x29, x30, [sp, #16]
   1568c:	add	sp, sp, #0x50
   15690:	ret
   15694:	bl	b020 <abort@plt>

0000000000015698 <idpriv_temp_restore@@Base>:
   15698:	sub	sp, sp, #0x50
   1569c:	stp	x29, x30, [sp, #16]
   156a0:	str	x23, [sp, #32]
   156a4:	stp	x22, x21, [sp, #48]
   156a8:	stp	x20, x19, [sp, #64]
   156ac:	add	x29, sp, #0x10
   156b0:	bl	aa20 <getuid@plt>
   156b4:	mov	w20, w0
   156b8:	bl	b210 <getgid@plt>
   156bc:	adrp	x23, 40000 <base_len@@Base+0x2c984>
   156c0:	ldr	w1, [x23, #2188]
   156c4:	cmn	w1, #0x1
   156c8:	b.eq	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.none
   156cc:	adrp	x22, 40000 <base_len@@Base+0x2c984>
   156d0:	ldr	w8, [x22, #2192]
   156d4:	cmn	w8, #0x1
   156d8:	b.eq	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.none
   156dc:	mov	w19, w0
   156e0:	mov	w0, #0xffffffff            	// #-1
   156e4:	mov	w2, #0xffffffff            	// #-1
   156e8:	mov	w21, #0xffffffff            	// #-1
   156ec:	bl	b4e0 <setresuid@plt>
   156f0:	tbnz	w0, #31, 15788 <idpriv_temp_restore@@Base+0xf0>
   156f4:	ldr	w1, [x22, #2192]
   156f8:	mov	w0, #0xffffffff            	// #-1
   156fc:	mov	w2, #0xffffffff            	// #-1
   15700:	mov	w21, #0xffffffff            	// #-1
   15704:	bl	b710 <setresgid@plt>
   15708:	tbnz	w0, #31, 15788 <idpriv_temp_restore@@Base+0xf0>
   1570c:	add	x0, x29, #0x1c
   15710:	add	x1, x29, #0x18
   15714:	sub	x2, x29, #0x4
   15718:	bl	a990 <getresuid@plt>
   1571c:	tbnz	w0, #31, 157a4 <idpriv_temp_restore@@Base+0x10c>
   15720:	ldr	w8, [x29, #28]
   15724:	cmp	w8, w20
   15728:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   1572c:	ldr	w9, [x29, #24]
   15730:	ldr	w8, [x23, #2188]
   15734:	cmp	w9, w8
   15738:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   1573c:	ldur	w9, [x29, #-4]
   15740:	cmp	w9, w8
   15744:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   15748:	add	x0, x29, #0x1c
   1574c:	add	x1, x29, #0x18
   15750:	sub	x2, x29, #0x4
   15754:	bl	b470 <getresgid@plt>
   15758:	tbnz	w0, #31, 157a4 <idpriv_temp_restore@@Base+0x10c>
   1575c:	ldr	w8, [x29, #28]
   15760:	cmp	w8, w19
   15764:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   15768:	ldr	w9, [x29, #24]
   1576c:	ldr	w8, [x22, #2192]
   15770:	cmp	w9, w8
   15774:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   15778:	ldur	w9, [x29, #-4]
   1577c:	cmp	w9, w8
   15780:	b.ne	157a4 <idpriv_temp_restore@@Base+0x10c>  // b.any
   15784:	mov	w21, wzr
   15788:	mov	w0, w21
   1578c:	ldp	x20, x19, [sp, #64]
   15790:	ldp	x22, x21, [sp, #48]
   15794:	ldr	x23, [sp, #32]
   15798:	ldp	x29, x30, [sp, #16]
   1579c:	add	sp, sp, #0x50
   157a0:	ret
   157a4:	bl	b020 <abort@plt>
   157a8:	stp	x29, x30, [sp, #-64]!
   157ac:	stp	x24, x23, [sp, #16]
   157b0:	mov	x24, x0
   157b4:	mov	w0, #0x68                  	// #104
   157b8:	stp	x22, x21, [sp, #32]
   157bc:	stp	x20, x19, [sp, #48]
   157c0:	mov	x29, sp
   157c4:	mov	w22, w4
   157c8:	mov	x20, x3
   157cc:	mov	x21, x2
   157d0:	mov	x23, x1
   157d4:	bl	abc0 <malloc@plt>
   157d8:	mov	x19, x0
   157dc:	cbz	x0, 15828 <idpriv_temp_restore@@Base+0x190>
   157e0:	and	w8, w22, #0x1
   157e4:	mov	w9, #0xb                   	// #11
   157e8:	mov	w0, #0xb                   	// #11
   157ec:	mov	w1, #0x8                   	// #8
   157f0:	stp	x24, x23, [x19]
   157f4:	stp	x21, x20, [x19, #16]
   157f8:	strb	w8, [x19, #32]
   157fc:	str	x9, [x19, #48]
   15800:	bl	ae10 <calloc@plt>
   15804:	str	x0, [x19, #40]
   15808:	cbz	x0, 1581c <idpriv_temp_restore@@Base+0x184>
   1580c:	add	x8, x19, #0x38
   15810:	stp	x8, x8, [x19, #72]
   15814:	str	xzr, [x19, #96]
   15818:	b	15828 <idpriv_temp_restore@@Base+0x190>
   1581c:	mov	x0, x19
   15820:	bl	b1d0 <free@plt>
   15824:	mov	x19, xzr
   15828:	mov	x0, x19
   1582c:	ldp	x20, x19, [sp, #48]
   15830:	ldp	x22, x21, [sp, #32]
   15834:	ldp	x24, x23, [sp, #16]
   15838:	ldp	x29, x30, [sp], #64
   1583c:	ret
   15840:	stp	x29, x30, [sp, #-80]!
   15844:	stp	x26, x25, [sp, #16]
   15848:	mov	x26, x0
   1584c:	mov	w0, #0x68                  	// #104
   15850:	stp	x24, x23, [sp, #32]
   15854:	stp	x22, x21, [sp, #48]
   15858:	stp	x20, x19, [sp, #64]
   1585c:	mov	x29, sp
   15860:	mov	x20, x6
   15864:	mov	x21, x5
   15868:	mov	w24, w4
   1586c:	mov	x22, x3
   15870:	mov	x23, x2
   15874:	mov	x25, x1
   15878:	bl	abc0 <malloc@plt>
   1587c:	mov	x19, x0
   15880:	cbz	x0, 15984 <idpriv_temp_restore@@Base+0x2ec>
   15884:	and	w8, w24, #0x1
   15888:	lsr	x1, x21, #1
   1588c:	mov	x0, x21
   15890:	stp	x26, x25, [x19]
   15894:	stp	x23, x22, [x19, #16]
   15898:	strb	w8, [x19, #32]
   1589c:	bl	ad10 <xsum@plt>
   158a0:	cmp	x0, #0xa
   158a4:	mov	w8, #0xa                   	// #10
   158a8:	csel	x0, x0, x8, hi  // hi = pmore
   158ac:	bl	16a68 <idpriv_temp_restore@@Base+0x13d0>
   158b0:	lsr	x8, x0, #61
   158b4:	str	x0, [x19, #48]
   158b8:	cbnz	x8, 15978 <idpriv_temp_restore@@Base+0x2e0>
   158bc:	mov	w1, #0x8                   	// #8
   158c0:	bl	ae10 <calloc@plt>
   158c4:	str	x0, [x19, #40]
   158c8:	cbz	x0, 15978 <idpriv_temp_restore@@Base+0x2e0>
   158cc:	add	x24, x19, #0x38
   158d0:	mov	x22, x24
   158d4:	str	x21, [x19, #96]
   158d8:	cbz	x21, 1593c <idpriv_temp_restore@@Base+0x2a4>
   158dc:	mov	w0, #0x28                  	// #40
   158e0:	bl	abc0 <malloc@plt>
   158e4:	cbz	x0, 15928 <idpriv_temp_restore@@Base+0x290>
   158e8:	mov	x23, x0
   158ec:	ldr	x0, [x20]
   158f0:	ldr	x8, [x19, #16]
   158f4:	str	x0, [x23, #32]
   158f8:	cbz	x8, 15900 <idpriv_temp_restore@@Base+0x268>
   158fc:	blr	x8
   15900:	str	x0, [x23, #8]
   15904:	mov	x0, x19
   15908:	mov	x1, x23
   1590c:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   15910:	mov	w8, wzr
   15914:	str	x22, [x23, #24]
   15918:	str	x23, [x22, #16]
   1591c:	mov	x22, x23
   15920:	cbz	w8, 15930 <idpriv_temp_restore@@Base+0x298>
   15924:	b	15948 <idpriv_temp_restore@@Base+0x2b0>
   15928:	mov	w8, #0x6                   	// #6
   1592c:	cbnz	w8, 15948 <idpriv_temp_restore@@Base+0x2b0>
   15930:	subs	x21, x21, #0x1
   15934:	add	x20, x20, #0x8
   15938:	b.ne	158dc <idpriv_temp_restore@@Base+0x244>  // b.any
   1593c:	str	x24, [x22, #16]
   15940:	str	x22, [x19, #80]
   15944:	b	15984 <idpriv_temp_restore@@Base+0x2ec>
   15948:	cmp	w8, #0x6
   1594c:	b.ne	159a0 <idpriv_temp_restore@@Base+0x308>  // b.any
   15950:	cmp	x22, x24
   15954:	b.eq	15970 <idpriv_temp_restore@@Base+0x2d8>  // b.none
   15958:	ldr	x20, [x22, #24]
   1595c:	mov	x0, x22
   15960:	bl	b1d0 <free@plt>
   15964:	cmp	x20, x24
   15968:	mov	x22, x20
   1596c:	b.ne	15958 <idpriv_temp_restore@@Base+0x2c0>  // b.any
   15970:	ldr	x0, [x19, #40]
   15974:	bl	b1d0 <free@plt>
   15978:	mov	x0, x19
   1597c:	bl	b1d0 <free@plt>
   15980:	mov	x19, xzr
   15984:	mov	x0, x19
   15988:	ldp	x20, x19, [sp, #64]
   1598c:	ldp	x22, x21, [sp, #48]
   15990:	ldp	x24, x23, [sp, #32]
   15994:	ldp	x26, x25, [sp, #16]
   15998:	ldp	x29, x30, [sp], #80
   1599c:	ret
   159a0:	b	15984 <idpriv_temp_restore@@Base+0x2ec>
   159a4:	ldr	x0, [x0, #96]
   159a8:	ret
   159ac:	ldr	x0, [x1, #32]
   159b0:	ret
   159b4:	stp	x29, x30, [sp, #-48]!
   159b8:	stp	x22, x21, [sp, #16]
   159bc:	stp	x20, x19, [sp, #32]
   159c0:	ldr	x8, [x1, #32]
   159c4:	mov	x29, sp
   159c8:	cmp	x8, x2
   159cc:	b.eq	15a2c <idpriv_temp_restore@@Base+0x394>  // b.none
   159d0:	ldr	x8, [x0, #16]
   159d4:	mov	x19, x1
   159d8:	mov	x21, x2
   159dc:	mov	x20, x0
   159e0:	cbz	x8, 159f4 <idpriv_temp_restore@@Base+0x35c>
   159e4:	mov	x0, x21
   159e8:	blr	x8
   159ec:	mov	x22, x0
   159f0:	b	159f8 <idpriv_temp_restore@@Base+0x360>
   159f4:	mov	x22, x21
   159f8:	ldr	x8, [x19, #8]
   159fc:	cmp	x22, x8
   15a00:	b.ne	15a0c <idpriv_temp_restore@@Base+0x374>  // b.any
   15a04:	str	x21, [x19, #32]
   15a08:	b	15a2c <idpriv_temp_restore@@Base+0x394>
   15a0c:	mov	x0, x20
   15a10:	mov	x1, x19
   15a14:	bl	16abc <idpriv_temp_restore@@Base+0x1424>
   15a18:	mov	x0, x20
   15a1c:	mov	x1, x19
   15a20:	str	x21, [x19, #32]
   15a24:	str	x22, [x19, #8]
   15a28:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   15a2c:	ldp	x20, x19, [sp, #32]
   15a30:	ldp	x22, x21, [sp, #16]
   15a34:	mov	w0, wzr
   15a38:	ldp	x29, x30, [sp], #48
   15a3c:	ret
   15a40:	ldr	x8, [x1, #16]
   15a44:	add	x9, x0, #0x38
   15a48:	cmp	x8, x9
   15a4c:	csel	x0, xzr, x8, eq  // eq = none
   15a50:	ret
   15a54:	ldr	x8, [x1, #24]
   15a58:	add	x9, x0, #0x38
   15a5c:	cmp	x8, x9
   15a60:	csel	x0, xzr, x8, eq  // eq = none
   15a64:	ret
   15a68:	stp	x29, x30, [sp, #-16]!
   15a6c:	ldr	x9, [x0, #96]
   15a70:	mov	x29, sp
   15a74:	cmp	x9, x1
   15a78:	b.ls	15acc <idpriv_temp_restore@@Base+0x434>  // b.plast
   15a7c:	sub	x10, x9, #0x1
   15a80:	cmp	x1, x10, lsr #1
   15a84:	b.ls	15aac <idpriv_temp_restore@@Base+0x414>  // b.plast
   15a88:	ldr	x8, [x0, #80]
   15a8c:	cmp	x10, x1
   15a90:	b.eq	15ac0 <idpriv_temp_restore@@Base+0x428>  // b.none
   15a94:	sub	x9, x1, x9
   15a98:	add	x9, x9, #0x1
   15a9c:	ldr	x8, [x8, #24]
   15aa0:	adds	x9, x9, #0x1
   15aa4:	b.cc	15a9c <idpriv_temp_restore@@Base+0x404>  // b.lo, b.ul, b.last
   15aa8:	b	15ac0 <idpriv_temp_restore@@Base+0x428>
   15aac:	ldr	x8, [x0, #72]
   15ab0:	cbz	x1, 15ac0 <idpriv_temp_restore@@Base+0x428>
   15ab4:	ldr	x8, [x8, #16]
   15ab8:	subs	x1, x1, #0x1
   15abc:	b.ne	15ab4 <idpriv_temp_restore@@Base+0x41c>  // b.any
   15ac0:	ldr	x0, [x8, #32]
   15ac4:	ldp	x29, x30, [sp], #16
   15ac8:	ret
   15acc:	bl	b020 <abort@plt>
   15ad0:	stp	x29, x30, [sp, #-48]!
   15ad4:	stp	x22, x21, [sp, #16]
   15ad8:	stp	x20, x19, [sp, #32]
   15adc:	ldr	x8, [x0, #96]
   15ae0:	mov	x29, sp
   15ae4:	cmp	x8, x1
   15ae8:	b.ls	15ba8 <idpriv_temp_restore@@Base+0x510>  // b.plast
   15aec:	sub	x9, x8, #0x1
   15af0:	mov	x19, x0
   15af4:	mov	x20, x2
   15af8:	cmp	x1, x9, lsr #1
   15afc:	b.ls	15b24 <idpriv_temp_restore@@Base+0x48c>  // b.plast
   15b00:	ldr	x21, [x19, #80]
   15b04:	cmp	x9, x1
   15b08:	b.eq	15b38 <idpriv_temp_restore@@Base+0x4a0>  // b.none
   15b0c:	sub	x8, x1, x8
   15b10:	add	x8, x8, #0x1
   15b14:	ldr	x21, [x21, #24]
   15b18:	adds	x8, x8, #0x1
   15b1c:	b.cc	15b14 <idpriv_temp_restore@@Base+0x47c>  // b.lo, b.ul, b.last
   15b20:	b	15b38 <idpriv_temp_restore@@Base+0x4a0>
   15b24:	ldr	x21, [x19, #72]
   15b28:	cbz	x1, 15b38 <idpriv_temp_restore@@Base+0x4a0>
   15b2c:	ldr	x21, [x21, #16]
   15b30:	subs	x1, x1, #0x1
   15b34:	b.ne	15b2c <idpriv_temp_restore@@Base+0x494>  // b.any
   15b38:	ldr	x8, [x21, #32]
   15b3c:	cmp	x8, x20
   15b40:	b.eq	15b94 <idpriv_temp_restore@@Base+0x4fc>  // b.none
   15b44:	ldr	x8, [x19, #16]
   15b48:	cbz	x8, 15b5c <idpriv_temp_restore@@Base+0x4c4>
   15b4c:	mov	x0, x20
   15b50:	blr	x8
   15b54:	mov	x22, x0
   15b58:	b	15b60 <idpriv_temp_restore@@Base+0x4c8>
   15b5c:	mov	x22, x20
   15b60:	ldr	x8, [x21, #8]
   15b64:	cmp	x22, x8
   15b68:	b.ne	15b74 <idpriv_temp_restore@@Base+0x4dc>  // b.any
   15b6c:	str	x20, [x21, #32]
   15b70:	b	15b94 <idpriv_temp_restore@@Base+0x4fc>
   15b74:	mov	x0, x19
   15b78:	mov	x1, x21
   15b7c:	bl	16abc <idpriv_temp_restore@@Base+0x1424>
   15b80:	mov	x0, x19
   15b84:	mov	x1, x21
   15b88:	str	x20, [x21, #32]
   15b8c:	str	x22, [x21, #8]
   15b90:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   15b94:	mov	x0, x21
   15b98:	ldp	x20, x19, [sp, #32]
   15b9c:	ldp	x22, x21, [sp, #16]
   15ba0:	ldp	x29, x30, [sp], #48
   15ba4:	ret
   15ba8:	bl	b020 <abort@plt>
   15bac:	stp	x29, x30, [sp, #-96]!
   15bb0:	str	x27, [sp, #16]
   15bb4:	subs	x27, x2, x1
   15bb8:	stp	x26, x25, [sp, #32]
   15bbc:	stp	x24, x23, [sp, #48]
   15bc0:	stp	x22, x21, [sp, #64]
   15bc4:	stp	x20, x19, [sp, #80]
   15bc8:	mov	x29, sp
   15bcc:	b.cc	15df0 <idpriv_temp_restore@@Base+0x758>  // b.lo, b.ul, b.last
   15bd0:	ldr	x26, [x0, #96]
   15bd4:	mov	x19, x2
   15bd8:	mov	x21, x0
   15bdc:	cmp	x26, x2
   15be0:	b.cc	15df0 <idpriv_temp_restore@@Base+0x758>  // b.lo, b.ul, b.last
   15be4:	ldr	x8, [x21, #16]
   15be8:	mov	x22, x3
   15bec:	mov	x20, x1
   15bf0:	cbz	x8, 15c04 <idpriv_temp_restore@@Base+0x56c>
   15bf4:	mov	x0, x22
   15bf8:	blr	x8
   15bfc:	mov	x23, x0
   15c00:	b	15c08 <idpriv_temp_restore@@Base+0x570>
   15c04:	mov	x23, x22
   15c08:	ldp	x9, x8, [x21, #40]
   15c0c:	ldr	x24, [x21, #8]
   15c10:	udiv	x10, x23, x8
   15c14:	msub	x8, x10, x8, x23
   15c18:	ldrb	w10, [x21, #32]
   15c1c:	ldr	x25, [x9, x8, lsl #3]
   15c20:	cbz	w10, 15c94 <idpriv_temp_restore@@Base+0x5fc>
   15c24:	cbz	x25, 15cf4 <idpriv_temp_restore@@Base+0x65c>
   15c28:	mov	x26, xzr
   15c2c:	b	15c48 <idpriv_temp_restore@@Base+0x5b0>
   15c30:	cmp	x1, x22
   15c34:	b.eq	15c68 <idpriv_temp_restore@@Base+0x5d0>  // b.none
   15c38:	mov	x0, x26
   15c3c:	ldr	x25, [x25]
   15c40:	mov	x26, x0
   15c44:	cbz	x25, 15cf8 <idpriv_temp_restore@@Base+0x660>
   15c48:	ldr	x8, [x25, #8]
   15c4c:	cmp	x8, x23
   15c50:	b.ne	15c38 <idpriv_temp_restore@@Base+0x5a0>  // b.any
   15c54:	ldr	x1, [x25, #32]
   15c58:	cbz	x24, 15c30 <idpriv_temp_restore@@Base+0x598>
   15c5c:	mov	x0, x22
   15c60:	blr	x24
   15c64:	tbz	w0, #0, 15c38 <idpriv_temp_restore@@Base+0x5a0>
   15c68:	mov	x0, x25
   15c6c:	cbz	x26, 15c3c <idpriv_temp_restore@@Base+0x5a4>
   15c70:	ldr	x21, [x21, #72]
   15c74:	cbz	x20, 15c88 <idpriv_temp_restore@@Base+0x5f0>
   15c78:	mov	x8, x20
   15c7c:	ldr	x21, [x21, #16]
   15c80:	subs	x8, x8, #0x1
   15c84:	b.ne	15c7c <idpriv_temp_restore@@Base+0x5e4>  // b.any
   15c88:	cbz	x27, 15d88 <idpriv_temp_restore@@Base+0x6f0>
   15c8c:	sub	x19, x20, x19
   15c90:	b	15da8 <idpriv_temp_restore@@Base+0x710>
   15c94:	cbnz	x25, 15cac <idpriv_temp_restore@@Base+0x614>
   15c98:	b	15ccc <idpriv_temp_restore@@Base+0x634>
   15c9c:	cmp	x1, x22
   15ca0:	b.eq	15ccc <idpriv_temp_restore@@Base+0x634>  // b.none
   15ca4:	ldr	x25, [x25]
   15ca8:	cbz	x25, 15ccc <idpriv_temp_restore@@Base+0x634>
   15cac:	ldr	x8, [x25, #8]
   15cb0:	cmp	x8, x23
   15cb4:	b.ne	15ca4 <idpriv_temp_restore@@Base+0x60c>  // b.any
   15cb8:	ldr	x1, [x25, #32]
   15cbc:	cbz	x24, 15c9c <idpriv_temp_restore@@Base+0x604>
   15cc0:	mov	x0, x22
   15cc4:	blr	x24
   15cc8:	tbz	w0, #0, 15ca4 <idpriv_temp_restore@@Base+0x60c>
   15ccc:	cbz	x20, 15d5c <idpriv_temp_restore@@Base+0x6c4>
   15cd0:	ldr	x8, [x21, #72]
   15cd4:	cmp	x8, x25
   15cd8:	b.eq	15d88 <idpriv_temp_restore@@Base+0x6f0>  // b.none
   15cdc:	subs	x20, x20, #0x1
   15ce0:	b.eq	15d5c <idpriv_temp_restore@@Base+0x6c4>  // b.none
   15ce4:	ldr	x8, [x8, #16]
   15ce8:	cmp	x8, x25
   15cec:	b.ne	15cdc <idpriv_temp_restore@@Base+0x644>  // b.any
   15cf0:	b	15d88 <idpriv_temp_restore@@Base+0x6f0>
   15cf4:	mov	x0, xzr
   15cf8:	cbz	x20, 15d28 <idpriv_temp_restore@@Base+0x690>
   15cfc:	ldr	x8, [x21, #72]
   15d00:	add	x9, x21, #0x38
   15d04:	cmp	x8, x9
   15d08:	b.eq	15d28 <idpriv_temp_restore@@Base+0x690>  // b.none
   15d0c:	cmp	x8, x0
   15d10:	b.eq	15d88 <idpriv_temp_restore@@Base+0x6f0>  // b.none
   15d14:	subs	x20, x20, #0x1
   15d18:	b.eq	15d28 <idpriv_temp_restore@@Base+0x690>  // b.none
   15d1c:	ldr	x8, [x8, #16]
   15d20:	cmp	x8, x9
   15d24:	b.ne	15d0c <idpriv_temp_restore@@Base+0x674>  // b.any
   15d28:	ldr	x9, [x21, #96]
   15d2c:	cmp	x9, x19
   15d30:	b.ls	15dd4 <idpriv_temp_restore@@Base+0x73c>  // b.plast
   15d34:	ldr	x8, [x21, #80]
   15d38:	cmp	x8, x0
   15d3c:	b.eq	15d88 <idpriv_temp_restore@@Base+0x6f0>  // b.none
   15d40:	sub	x9, x19, x9
   15d44:	adds	x9, x9, #0x1
   15d48:	b.cs	15dd4 <idpriv_temp_restore@@Base+0x73c>  // b.hs, b.nlast
   15d4c:	ldr	x8, [x8, #24]
   15d50:	cmp	x8, x0
   15d54:	b.ne	15d44 <idpriv_temp_restore@@Base+0x6ac>  // b.any
   15d58:	b	15d88 <idpriv_temp_restore@@Base+0x6f0>
   15d5c:	cmp	x26, x19
   15d60:	b.ls	15dd0 <idpriv_temp_restore@@Base+0x738>  // b.plast
   15d64:	ldr	x8, [x21, #80]
   15d68:	cmp	x8, x25
   15d6c:	b.eq	15d88 <idpriv_temp_restore@@Base+0x6f0>  // b.none
   15d70:	sub	x9, x19, x26
   15d74:	adds	x9, x9, #0x1
   15d78:	b.cs	15dd0 <idpriv_temp_restore@@Base+0x738>  // b.hs, b.nlast
   15d7c:	ldr	x8, [x8, #24]
   15d80:	cmp	x8, x25
   15d84:	b.ne	15d74 <idpriv_temp_restore@@Base+0x6dc>  // b.any
   15d88:	mov	x0, xzr
   15d8c:	b	15dd4 <idpriv_temp_restore@@Base+0x73c>
   15d90:	cmp	x1, x22
   15d94:	b.eq	15dc8 <idpriv_temp_restore@@Base+0x730>  // b.none
   15d98:	ldr	x21, [x21, #16]
   15d9c:	adds	x19, x19, #0x1
   15da0:	mov	x0, xzr
   15da4:	b.cs	15dd4 <idpriv_temp_restore@@Base+0x73c>  // b.hs, b.nlast
   15da8:	ldr	x8, [x21, #8]
   15dac:	cmp	x8, x23
   15db0:	b.ne	15d98 <idpriv_temp_restore@@Base+0x700>  // b.any
   15db4:	ldr	x1, [x21, #32]
   15db8:	cbz	x24, 15d90 <idpriv_temp_restore@@Base+0x6f8>
   15dbc:	mov	x0, x22
   15dc0:	blr	x24
   15dc4:	tbz	w0, #0, 15d98 <idpriv_temp_restore@@Base+0x700>
   15dc8:	mov	x0, x21
   15dcc:	b	15dd4 <idpriv_temp_restore@@Base+0x73c>
   15dd0:	mov	x0, x25
   15dd4:	ldp	x20, x19, [sp, #80]
   15dd8:	ldp	x22, x21, [sp, #64]
   15ddc:	ldp	x24, x23, [sp, #48]
   15de0:	ldp	x26, x25, [sp, #32]
   15de4:	ldr	x27, [sp, #16]
   15de8:	ldp	x29, x30, [sp], #96
   15dec:	ret
   15df0:	bl	b020 <abort@plt>
   15df4:	stp	x29, x30, [sp, #-96]!
   15df8:	cmp	x1, x2
   15dfc:	str	x27, [sp, #16]
   15e00:	stp	x26, x25, [sp, #32]
   15e04:	stp	x24, x23, [sp, #48]
   15e08:	stp	x22, x21, [sp, #64]
   15e0c:	stp	x20, x19, [sp, #80]
   15e10:	mov	x29, sp
   15e14:	b.hi	15fe0 <idpriv_temp_restore@@Base+0x948>  // b.pmore
   15e18:	ldr	x8, [x0, #96]
   15e1c:	mov	x19, x2
   15e20:	mov	x20, x0
   15e24:	cmp	x8, x2
   15e28:	b.cc	15fe0 <idpriv_temp_restore@@Base+0x948>  // b.lo, b.ul, b.last
   15e2c:	ldr	x8, [x20, #16]
   15e30:	mov	x22, x3
   15e34:	mov	x21, x1
   15e38:	cbz	x8, 15e4c <idpriv_temp_restore@@Base+0x7b4>
   15e3c:	mov	x0, x22
   15e40:	blr	x8
   15e44:	mov	x23, x0
   15e48:	b	15e50 <idpriv_temp_restore@@Base+0x7b8>
   15e4c:	mov	x23, x22
   15e50:	ldp	x9, x8, [x20, #40]
   15e54:	ldr	x25, [x20, #8]
   15e58:	udiv	x10, x23, x8
   15e5c:	msub	x8, x10, x8, x23
   15e60:	ldrb	w10, [x20, #32]
   15e64:	ldr	x27, [x9, x8, lsl #3]
   15e68:	cbz	w10, 15eec <idpriv_temp_restore@@Base+0x854>
   15e6c:	mov	x26, xzr
   15e70:	cbnz	x27, 15e98 <idpriv_temp_restore@@Base+0x800>
   15e74:	mov	w8, #0x1                   	// #1
   15e78:	mov	x27, x26
   15e7c:	cbnz	w8, 15f90 <idpriv_temp_restore@@Base+0x8f8>
   15e80:	b	15fc0 <idpriv_temp_restore@@Base+0x928>
   15e84:	cmp	x1, x22
   15e88:	b.eq	15ebc <idpriv_temp_restore@@Base+0x824>  // b.none
   15e8c:	mov	x26, x24
   15e90:	ldr	x27, [x27]
   15e94:	cbz	x27, 15e74 <idpriv_temp_restore@@Base+0x7dc>
   15e98:	ldr	x8, [x27, #8]
   15e9c:	mov	x24, x26
   15ea0:	cmp	x8, x23
   15ea4:	b.ne	15e8c <idpriv_temp_restore@@Base+0x7f4>  // b.any
   15ea8:	ldr	x1, [x27, #32]
   15eac:	cbz	x25, 15e84 <idpriv_temp_restore@@Base+0x7ec>
   15eb0:	mov	x0, x22
   15eb4:	blr	x25
   15eb8:	tbz	w0, #0, 15e8c <idpriv_temp_restore@@Base+0x7f4>
   15ebc:	mov	x26, x27
   15ec0:	cbz	x24, 15e90 <idpriv_temp_restore@@Base+0x7f8>
   15ec4:	ldr	x26, [x20, #72]
   15ec8:	cbz	x21, 15f28 <idpriv_temp_restore@@Base+0x890>
   15ecc:	mov	x8, x21
   15ed0:	ldr	x26, [x26, #16]
   15ed4:	subs	x8, x8, #0x1
   15ed8:	b.ne	15ed0 <idpriv_temp_restore@@Base+0x838>  // b.any
   15edc:	mov	x27, xzr
   15ee0:	cmp	x21, x19
   15ee4:	b.cc	15f34 <idpriv_temp_restore@@Base+0x89c>  // b.lo, b.ul, b.last
   15ee8:	b	15f7c <idpriv_temp_restore@@Base+0x8e4>
   15eec:	cbnz	x27, 15f04 <idpriv_temp_restore@@Base+0x86c>
   15ef0:	b	15f90 <idpriv_temp_restore@@Base+0x8f8>
   15ef4:	cmp	x1, x22
   15ef8:	b.eq	15f90 <idpriv_temp_restore@@Base+0x8f8>  // b.none
   15efc:	ldr	x27, [x27]
   15f00:	cbz	x27, 15f90 <idpriv_temp_restore@@Base+0x8f8>
   15f04:	ldr	x8, [x27, #8]
   15f08:	cmp	x8, x23
   15f0c:	b.ne	15efc <idpriv_temp_restore@@Base+0x864>  // b.any
   15f10:	ldr	x1, [x27, #32]
   15f14:	cbz	x25, 15ef4 <idpriv_temp_restore@@Base+0x85c>
   15f18:	mov	x0, x22
   15f1c:	blr	x25
   15f20:	tbz	w0, #0, 15efc <idpriv_temp_restore@@Base+0x864>
   15f24:	b	15f90 <idpriv_temp_restore@@Base+0x8f8>
   15f28:	mov	x27, x21
   15f2c:	cmp	x21, x19
   15f30:	b.cs	15f7c <idpriv_temp_restore@@Base+0x8e4>  // b.hs, b.nlast
   15f34:	mov	x24, x21
   15f38:	b	15f54 <idpriv_temp_restore@@Base+0x8bc>
   15f3c:	cmp	x1, x22
   15f40:	b.eq	15f74 <idpriv_temp_restore@@Base+0x8dc>  // b.none
   15f44:	ldr	x26, [x26, #16]
   15f48:	add	x24, x24, #0x1
   15f4c:	cmp	x19, x24
   15f50:	b.eq	15f7c <idpriv_temp_restore@@Base+0x8e4>  // b.none
   15f54:	ldr	x8, [x26, #8]
   15f58:	cmp	x8, x23
   15f5c:	b.ne	15f44 <idpriv_temp_restore@@Base+0x8ac>  // b.any
   15f60:	ldr	x1, [x26, #32]
   15f64:	cbz	x25, 15f3c <idpriv_temp_restore@@Base+0x8a4>
   15f68:	mov	x0, x22
   15f6c:	blr	x25
   15f70:	tbz	w0, #0, 15f44 <idpriv_temp_restore@@Base+0x8ac>
   15f74:	mov	w8, wzr
   15f78:	b	15f84 <idpriv_temp_restore@@Base+0x8ec>
   15f7c:	mov	w8, wzr
   15f80:	mov	x24, #0xffffffffffffffff    	// #-1
   15f84:	mov	x21, x27
   15f88:	mov	x27, x26
   15f8c:	cbz	w8, 15fc0 <idpriv_temp_restore@@Base+0x928>
   15f90:	cbz	x27, 15fbc <idpriv_temp_restore@@Base+0x924>
   15f94:	add	x9, x20, #0x38
   15f98:	mov	x8, #0xffffffffffffffff    	// #-1
   15f9c:	ldr	x27, [x27, #24]
   15fa0:	add	x8, x8, #0x1
   15fa4:	cmp	x27, x9
   15fa8:	b.ne	15f9c <idpriv_temp_restore@@Base+0x904>  // b.any
   15fac:	cmp	x8, x19
   15fb0:	ccmp	x8, x21, #0x0, cc  // cc = lo, ul, last
   15fb4:	csinv	x24, x8, xzr, cs  // cs = hs, nlast
   15fb8:	b	15fc0 <idpriv_temp_restore@@Base+0x928>
   15fbc:	mov	x24, #0xffffffffffffffff    	// #-1
   15fc0:	mov	x0, x24
   15fc4:	ldp	x20, x19, [sp, #80]
   15fc8:	ldp	x22, x21, [sp, #64]
   15fcc:	ldp	x24, x23, [sp, #48]
   15fd0:	ldp	x26, x25, [sp, #32]
   15fd4:	ldr	x27, [sp, #16]
   15fd8:	ldp	x29, x30, [sp], #96
   15fdc:	ret
   15fe0:	bl	b020 <abort@plt>
   15fe4:	stp	x29, x30, [sp, #-48]!
   15fe8:	stp	x20, x19, [sp, #32]
   15fec:	mov	x20, x0
   15ff0:	mov	w0, #0x28                  	// #40
   15ff4:	str	x21, [sp, #16]
   15ff8:	mov	x29, sp
   15ffc:	mov	x21, x1
   16000:	bl	abc0 <malloc@plt>
   16004:	mov	x19, x0
   16008:	cbz	x0, 16060 <idpriv_temp_restore@@Base+0x9c8>
   1600c:	str	x21, [x19, #32]
   16010:	ldr	x8, [x20, #16]
   16014:	cbz	x8, 16024 <idpriv_temp_restore@@Base+0x98c>
   16018:	mov	x0, x21
   1601c:	blr	x8
   16020:	mov	x21, x0
   16024:	mov	x0, x20
   16028:	mov	x1, x19
   1602c:	str	x21, [x19, #8]
   16030:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   16034:	add	x8, x20, #0x38
   16038:	str	x8, [x19, #24]
   1603c:	ldr	x8, [x20, #72]
   16040:	mov	x0, x20
   16044:	str	x8, [x19, #16]
   16048:	str	x19, [x8, #24]
   1604c:	ldr	x8, [x20, #96]
   16050:	str	x19, [x20, #72]
   16054:	add	x8, x8, #0x1
   16058:	str	x8, [x20, #96]
   1605c:	bl	16b04 <idpriv_temp_restore@@Base+0x146c>
   16060:	mov	x0, x19
   16064:	ldp	x20, x19, [sp, #32]
   16068:	ldr	x21, [sp, #16]
   1606c:	ldp	x29, x30, [sp], #48
   16070:	ret
   16074:	stp	x29, x30, [sp, #-48]!
   16078:	stp	x20, x19, [sp, #32]
   1607c:	mov	x20, x0
   16080:	mov	w0, #0x28                  	// #40
   16084:	str	x21, [sp, #16]
   16088:	mov	x29, sp
   1608c:	mov	x21, x1
   16090:	bl	abc0 <malloc@plt>
   16094:	mov	x19, x0
   16098:	cbz	x0, 160f0 <idpriv_temp_restore@@Base+0xa58>
   1609c:	str	x21, [x19, #32]
   160a0:	ldr	x8, [x20, #16]
   160a4:	cbz	x8, 160b4 <idpriv_temp_restore@@Base+0xa1c>
   160a8:	mov	x0, x21
   160ac:	blr	x8
   160b0:	mov	x21, x0
   160b4:	mov	x0, x20
   160b8:	mov	x1, x19
   160bc:	str	x21, [x19, #8]
   160c0:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   160c4:	add	x8, x20, #0x38
   160c8:	str	x8, [x19, #16]
   160cc:	ldr	x8, [x20, #80]
   160d0:	mov	x0, x20
   160d4:	str	x8, [x19, #24]
   160d8:	str	x19, [x8, #16]
   160dc:	ldr	x8, [x20, #96]
   160e0:	str	x19, [x20, #80]
   160e4:	add	x8, x8, #0x1
   160e8:	str	x8, [x20, #96]
   160ec:	bl	16b04 <idpriv_temp_restore@@Base+0x146c>
   160f0:	mov	x0, x19
   160f4:	ldp	x20, x19, [sp, #32]
   160f8:	ldr	x21, [sp, #16]
   160fc:	ldp	x29, x30, [sp], #48
   16100:	ret
   16104:	stp	x29, x30, [sp, #-48]!
   16108:	stp	x20, x19, [sp, #32]
   1610c:	mov	x20, x0
   16110:	mov	w0, #0x28                  	// #40
   16114:	stp	x22, x21, [sp, #16]
   16118:	mov	x29, sp
   1611c:	mov	x22, x2
   16120:	mov	x21, x1
   16124:	bl	abc0 <malloc@plt>
   16128:	mov	x19, x0
   1612c:	cbz	x0, 1617c <idpriv_temp_restore@@Base+0xae4>
   16130:	str	x22, [x19, #32]
   16134:	ldr	x8, [x20, #16]
   16138:	cbz	x8, 16148 <idpriv_temp_restore@@Base+0xab0>
   1613c:	mov	x0, x22
   16140:	blr	x8
   16144:	mov	x22, x0
   16148:	mov	x0, x20
   1614c:	mov	x1, x19
   16150:	str	x22, [x19, #8]
   16154:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   16158:	ldr	x8, [x21, #24]
   1615c:	mov	x0, x20
   16160:	stp	x21, x8, [x19, #16]
   16164:	str	x19, [x8, #16]
   16168:	str	x19, [x21, #24]
   1616c:	ldr	x8, [x20, #96]
   16170:	add	x8, x8, #0x1
   16174:	str	x8, [x20, #96]
   16178:	bl	16b04 <idpriv_temp_restore@@Base+0x146c>
   1617c:	mov	x0, x19
   16180:	ldp	x20, x19, [sp, #32]
   16184:	ldp	x22, x21, [sp, #16]
   16188:	ldp	x29, x30, [sp], #48
   1618c:	ret
   16190:	stp	x29, x30, [sp, #-48]!
   16194:	stp	x20, x19, [sp, #32]
   16198:	mov	x20, x0
   1619c:	mov	w0, #0x28                  	// #40
   161a0:	stp	x22, x21, [sp, #16]
   161a4:	mov	x29, sp
   161a8:	mov	x22, x2
   161ac:	mov	x21, x1
   161b0:	bl	abc0 <malloc@plt>
   161b4:	mov	x19, x0
   161b8:	cbz	x0, 16208 <idpriv_temp_restore@@Base+0xb70>
   161bc:	str	x22, [x19, #32]
   161c0:	ldr	x8, [x20, #16]
   161c4:	cbz	x8, 161d4 <idpriv_temp_restore@@Base+0xb3c>
   161c8:	mov	x0, x22
   161cc:	blr	x8
   161d0:	mov	x22, x0
   161d4:	mov	x0, x20
   161d8:	mov	x1, x19
   161dc:	str	x22, [x19, #8]
   161e0:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   161e4:	ldr	x8, [x21, #16]
   161e8:	mov	x0, x20
   161ec:	stp	x8, x21, [x19, #16]
   161f0:	str	x19, [x8, #24]
   161f4:	str	x19, [x21, #16]
   161f8:	ldr	x8, [x20, #96]
   161fc:	add	x8, x8, #0x1
   16200:	str	x8, [x20, #96]
   16204:	bl	16b04 <idpriv_temp_restore@@Base+0x146c>
   16208:	mov	x0, x19
   1620c:	ldp	x20, x19, [sp, #32]
   16210:	ldp	x22, x21, [sp, #16]
   16214:	ldp	x29, x30, [sp], #48
   16218:	ret
   1621c:	stp	x29, x30, [sp, #-64]!
   16220:	stp	x22, x21, [sp, #32]
   16224:	stp	x20, x19, [sp, #48]
   16228:	str	x23, [sp, #16]
   1622c:	ldr	x23, [x0, #96]
   16230:	mov	x29, sp
   16234:	cmp	x23, x1
   16238:	b.cc	16310 <idpriv_temp_restore@@Base+0xc78>  // b.lo, b.ul, b.last
   1623c:	mov	x19, x0
   16240:	mov	w0, #0x28                  	// #40
   16244:	mov	x21, x1
   16248:	mov	x22, x2
   1624c:	bl	abc0 <malloc@plt>
   16250:	mov	x20, x0
   16254:	cbz	x0, 162f8 <idpriv_temp_restore@@Base+0xc60>
   16258:	str	x22, [x20, #32]
   1625c:	ldr	x8, [x19, #16]
   16260:	cbz	x8, 16270 <idpriv_temp_restore@@Base+0xbd8>
   16264:	mov	x0, x22
   16268:	blr	x8
   1626c:	mov	x22, x0
   16270:	mov	x0, x19
   16274:	mov	x1, x20
   16278:	str	x22, [x20, #8]
   1627c:	bl	16a98 <idpriv_temp_restore@@Base+0x1400>
   16280:	cmp	x21, x23, lsr #1
   16284:	b.ls	162b8 <idpriv_temp_restore@@Base+0xc20>  // b.plast
   16288:	cmp	x23, x21
   1628c:	add	x8, x19, #0x38
   16290:	b.eq	162a4 <idpriv_temp_restore@@Base+0xc0c>  // b.none
   16294:	sub	x9, x21, x23
   16298:	ldr	x8, [x8, #24]
   1629c:	adds	x9, x9, #0x1
   162a0:	b.cc	16298 <idpriv_temp_restore@@Base+0xc00>  // b.lo, b.ul, b.last
   162a4:	str	x8, [x20, #16]
   162a8:	ldr	x9, [x8, #24]!
   162ac:	str	x9, [x20, #24]
   162b0:	add	x9, x9, #0x10
   162b4:	b	162dc <idpriv_temp_restore@@Base+0xc44>
   162b8:	add	x8, x19, #0x38
   162bc:	cbz	x21, 162cc <idpriv_temp_restore@@Base+0xc34>
   162c0:	ldr	x8, [x8, #16]
   162c4:	subs	x21, x21, #0x1
   162c8:	b.ne	162c0 <idpriv_temp_restore@@Base+0xc28>  // b.any
   162cc:	str	x8, [x20, #24]
   162d0:	ldr	x9, [x8, #16]!
   162d4:	str	x9, [x20, #16]
   162d8:	add	x9, x9, #0x18
   162dc:	str	x20, [x9]
   162e0:	str	x20, [x8]
   162e4:	ldr	x8, [x19, #96]
   162e8:	mov	x0, x19
   162ec:	add	x8, x8, #0x1
   162f0:	str	x8, [x19, #96]
   162f4:	bl	16b04 <idpriv_temp_restore@@Base+0x146c>
   162f8:	mov	x0, x20
   162fc:	ldp	x20, x19, [sp, #48]
   16300:	ldp	x22, x21, [sp, #32]
   16304:	ldr	x23, [sp, #16]
   16308:	ldp	x29, x30, [sp], #64
   1630c:	ret
   16310:	bl	b020 <abort@plt>
   16314:	stp	x29, x30, [sp, #-32]!
   16318:	stp	x20, x19, [sp, #16]
   1631c:	mov	x29, sp
   16320:	mov	x19, x1
   16324:	mov	x20, x0
   16328:	bl	16abc <idpriv_temp_restore@@Base+0x1424>
   1632c:	ldp	x9, x8, [x19, #16]
   16330:	str	x9, [x8, #16]
   16334:	str	x8, [x9, #24]
   16338:	ldr	x9, [x20, #96]
   1633c:	ldr	x8, [x20, #24]
   16340:	sub	x9, x9, #0x1
   16344:	str	x9, [x20, #96]
   16348:	cbz	x8, 16354 <idpriv_temp_restore@@Base+0xcbc>
   1634c:	ldr	x0, [x19, #32]
   16350:	blr	x8
   16354:	mov	x0, x19
   16358:	bl	b1d0 <free@plt>
   1635c:	ldp	x20, x19, [sp, #16]
   16360:	mov	w0, #0x1                   	// #1
   16364:	ldp	x29, x30, [sp], #32
   16368:	ret
   1636c:	stp	x29, x30, [sp, #-32]!
   16370:	stp	x20, x19, [sp, #16]
   16374:	ldr	x8, [x0, #96]
   16378:	mov	x29, sp
   1637c:	cmp	x8, x1
   16380:	b.ls	1641c <idpriv_temp_restore@@Base+0xd84>  // b.plast
   16384:	sub	x9, x8, #0x1
   16388:	mov	x19, x0
   1638c:	add	x20, x0, #0x38
   16390:	cmp	x1, x9, lsr #1
   16394:	b.ls	163bc <idpriv_temp_restore@@Base+0xd24>  // b.plast
   16398:	sub	x8, x1, x8
   1639c:	mov	x9, x20
   163a0:	ldr	x20, [x20, #24]
   163a4:	adds	x8, x8, #0x1
   163a8:	b.cc	1639c <idpriv_temp_restore@@Base+0xd04>  // b.lo, b.ul, b.last
   163ac:	ldr	x8, [x20, #24]
   163b0:	str	x8, [x9, #24]
   163b4:	str	x9, [x8, #16]
   163b8:	b	163dc <idpriv_temp_restore@@Base+0xd44>
   163bc:	add	x8, x1, #0x1
   163c0:	mov	x9, x20
   163c4:	ldr	x20, [x20, #16]
   163c8:	subs	x8, x8, #0x1
   163cc:	b.ne	163c0 <idpriv_temp_restore@@Base+0xd28>  // b.any
   163d0:	ldr	x8, [x20, #16]
   163d4:	str	x8, [x9, #16]
   163d8:	str	x9, [x8, #24]
   163dc:	mov	x0, x19
   163e0:	mov	x1, x20
   163e4:	bl	16abc <idpriv_temp_restore@@Base+0x1424>
   163e8:	ldr	x9, [x19, #96]
   163ec:	ldr	x8, [x19, #24]
   163f0:	sub	x9, x9, #0x1
   163f4:	str	x9, [x19, #96]
   163f8:	cbz	x8, 16404 <idpriv_temp_restore@@Base+0xd6c>
   163fc:	ldr	x0, [x20, #32]
   16400:	blr	x8
   16404:	mov	x0, x20
   16408:	bl	b1d0 <free@plt>
   1640c:	ldp	x20, x19, [sp, #16]
   16410:	mov	w0, #0x1                   	// #1
   16414:	ldp	x29, x30, [sp], #32
   16418:	ret
   1641c:	bl	b020 <abort@plt>
   16420:	stp	x29, x30, [sp, #-32]!
   16424:	ldr	x2, [x0, #96]
   16428:	mov	x3, x1
   1642c:	mov	x1, xzr
   16430:	str	x19, [sp, #16]
   16434:	mov	x29, sp
   16438:	mov	x19, x0
   1643c:	bl	15bac <idpriv_temp_restore@@Base+0x514>
   16440:	cbz	x0, 16454 <idpriv_temp_restore@@Base+0xdbc>
   16444:	mov	x1, x0
   16448:	mov	x0, x19
   1644c:	bl	16314 <idpriv_temp_restore@@Base+0xc7c>
   16450:	mov	w0, #0x1                   	// #1
   16454:	ldr	x19, [sp, #16]
   16458:	ldp	x29, x30, [sp], #32
   1645c:	ret
   16460:	stp	x29, x30, [sp, #-64]!
   16464:	stp	x22, x21, [sp, #32]
   16468:	stp	x20, x19, [sp, #48]
   1646c:	ldr	x20, [x0, #72]
   16470:	add	x21, x0, #0x38
   16474:	mov	x19, x0
   16478:	str	x23, [sp, #16]
   1647c:	cmp	x20, x21
   16480:	mov	x29, sp
   16484:	b.eq	164b8 <idpriv_temp_restore@@Base+0xe20>  // b.none
   16488:	ldr	x22, [x19, #24]
   1648c:	b	164a4 <idpriv_temp_restore@@Base+0xe0c>
   16490:	mov	x0, x20
   16494:	bl	b1d0 <free@plt>
   16498:	cmp	x23, x21
   1649c:	mov	x20, x23
   164a0:	b.eq	164b8 <idpriv_temp_restore@@Base+0xe20>  // b.none
   164a4:	ldr	x23, [x20, #16]
   164a8:	cbz	x22, 16490 <idpriv_temp_restore@@Base+0xdf8>
   164ac:	ldr	x0, [x20, #32]
   164b0:	blr	x22
   164b4:	b	16490 <idpriv_temp_restore@@Base+0xdf8>
   164b8:	ldr	x0, [x19, #40]
   164bc:	bl	b1d0 <free@plt>
   164c0:	mov	x0, x19
   164c4:	bl	b1d0 <free@plt>
   164c8:	ldp	x20, x19, [sp, #48]
   164cc:	ldp	x22, x21, [sp, #32]
   164d0:	ldr	x23, [sp, #16]
   164d4:	ldp	x29, x30, [sp], #64
   164d8:	ret
   164dc:	ldr	x9, [x0]
   164e0:	add	x10, x0, #0x38
   164e4:	stp	x9, x0, [x8]
   164e8:	ldr	x9, [x0, #72]
   164ec:	stp	x9, x10, [x8, #24]
   164f0:	ret
   164f4:	stp	x29, x30, [sp, #-16]!
   164f8:	subs	x10, x2, x1
   164fc:	mov	x29, sp
   16500:	b.cc	165dc <idpriv_temp_restore@@Base+0xf44>  // b.lo, b.ul, b.last
   16504:	ldr	x11, [x0, #96]
   16508:	subs	x12, x11, x2
   1650c:	b.cc	165dc <idpriv_temp_restore@@Base+0xf44>  // b.lo, b.ul, b.last
   16510:	ldr	x9, [x0]
   16514:	cmp	x10, x1
   16518:	stp	x9, x0, [x8]
   1651c:	b.cs	16560 <idpriv_temp_restore@@Base+0xec8>  // b.hs, b.nlast
   16520:	cmp	x12, x1
   16524:	b.cs	16560 <idpriv_temp_restore@@Base+0xec8>  // b.hs, b.nlast
   16528:	add	x9, x0, #0x38
   1652c:	cbz	x12, 16540 <idpriv_temp_restore@@Base+0xea8>
   16530:	sub	x11, x2, x11
   16534:	ldr	x9, [x9, #24]
   16538:	adds	x11, x11, #0x1
   1653c:	b.cc	16534 <idpriv_temp_restore@@Base+0xe9c>  // b.lo, b.ul, b.last
   16540:	str	x9, [x8, #32]
   16544:	cbz	x10, 16558 <idpriv_temp_restore@@Base+0xec0>
   16548:	sub	x10, x1, x2
   1654c:	ldr	x9, [x9, #24]
   16550:	adds	x10, x10, #0x1
   16554:	b.cc	1654c <idpriv_temp_restore@@Base+0xeb4>  // b.lo, b.ul, b.last
   16558:	add	x8, x8, #0x18
   1655c:	b	165d0 <idpriv_temp_restore@@Base+0xf38>
   16560:	cmp	x10, x12
   16564:	b.ls	1659c <idpriv_temp_restore@@Base+0xf04>  // b.plast
   16568:	ldr	x10, [x0, #72]
   1656c:	add	x9, x0, #0x38
   16570:	cbz	x1, 16580 <idpriv_temp_restore@@Base+0xee8>
   16574:	ldr	x10, [x10, #16]
   16578:	subs	x1, x1, #0x1
   1657c:	b.ne	16574 <idpriv_temp_restore@@Base+0xedc>  // b.any
   16580:	str	x10, [x8, #24]
   16584:	cbz	x12, 165cc <idpriv_temp_restore@@Base+0xf34>
   16588:	sub	x10, x2, x11
   1658c:	ldr	x9, [x9, #24]
   16590:	adds	x10, x10, #0x1
   16594:	b.cc	1658c <idpriv_temp_restore@@Base+0xef4>  // b.lo, b.ul, b.last
   16598:	b	165cc <idpriv_temp_restore@@Base+0xf34>
   1659c:	ldr	x9, [x0, #72]
   165a0:	cbz	x1, 165b4 <idpriv_temp_restore@@Base+0xf1c>
   165a4:	mov	x11, x1
   165a8:	ldr	x9, [x9, #16]
   165ac:	subs	x11, x11, #0x1
   165b0:	b.ne	165a8 <idpriv_temp_restore@@Base+0xf10>  // b.any
   165b4:	str	x9, [x8, #24]
   165b8:	cbz	x10, 165cc <idpriv_temp_restore@@Base+0xf34>
   165bc:	sub	x10, x1, x2
   165c0:	ldr	x9, [x9, #16]
   165c4:	adds	x10, x10, #0x1
   165c8:	b.cc	165c0 <idpriv_temp_restore@@Base+0xf28>  // b.lo, b.ul, b.last
   165cc:	add	x8, x8, #0x20
   165d0:	str	x9, [x8]
   165d4:	ldp	x29, x30, [sp], #16
   165d8:	ret
   165dc:	bl	b020 <abort@plt>
   165e0:	ldp	x8, x9, [x0, #24]
   165e4:	cmp	x8, x9
   165e8:	b.eq	1660c <idpriv_temp_restore@@Base+0xf74>  // b.none
   165ec:	ldr	x9, [x8, #32]
   165f0:	str	x9, [x1]
   165f4:	cbz	x2, 165fc <idpriv_temp_restore@@Base+0xf64>
   165f8:	str	x8, [x2]
   165fc:	ldr	x8, [x8, #16]
   16600:	str	x8, [x0, #24]
   16604:	mov	w0, #0x1                   	// #1
   16608:	ret
   1660c:	mov	w0, wzr
   16610:	ret
   16614:	ret
   16618:	stp	x29, x30, [sp, #-64]!
   1661c:	stp	x24, x23, [sp, #16]
   16620:	stp	x22, x21, [sp, #32]
   16624:	stp	x20, x19, [sp, #48]
   16628:	ldr	x22, [x0, #72]
   1662c:	add	x23, x0, #0x38
   16630:	mov	x29, sp
   16634:	cmp	x22, x23
   16638:	b.eq	16684 <idpriv_temp_restore@@Base+0xfec>  // b.none
   1663c:	mov	x20, x2
   16640:	mov	x21, x1
   16644:	mov	w24, #0x2                   	// #2
   16648:	ldr	x0, [x22, #32]
   1664c:	mov	x1, x20
   16650:	blr	x21
   16654:	cmp	w0, #0x0
   16658:	cset	w8, eq  // eq = none
   1665c:	csel	x9, x22, x19, eq  // eq = none
   16660:	csel	w8, w24, w8, gt
   16664:	csel	x19, x19, x9, gt
   16668:	cbnz	w8, 1667c <idpriv_temp_restore@@Base+0xfe4>
   1666c:	ldr	x22, [x22, #16]
   16670:	cmp	x22, x23
   16674:	b.ne	16648 <idpriv_temp_restore@@Base+0xfb0>  // b.any
   16678:	b	16684 <idpriv_temp_restore@@Base+0xfec>
   1667c:	cmp	w8, #0x2
   16680:	b.ne	16688 <idpriv_temp_restore@@Base+0xff0>  // b.any
   16684:	mov	x19, xzr
   16688:	mov	x0, x19
   1668c:	ldp	x20, x19, [sp, #48]
   16690:	ldp	x22, x21, [sp, #32]
   16694:	ldp	x24, x23, [sp, #16]
   16698:	ldp	x29, x30, [sp], #64
   1669c:	ret
   166a0:	stp	x29, x30, [sp, #-64]!
   166a4:	cmp	x3, x2
   166a8:	str	x23, [sp, #16]
   166ac:	stp	x22, x21, [sp, #32]
   166b0:	stp	x20, x19, [sp, #48]
   166b4:	mov	x29, sp
   166b8:	b.cc	1679c <idpriv_temp_restore@@Base+0x1104>  // b.lo, b.ul, b.last
   166bc:	ldr	x8, [x0, #96]
   166c0:	cmp	x8, x3
   166c4:	b.cc	1679c <idpriv_temp_restore@@Base+0x1104>  // b.lo, b.ul, b.last
   166c8:	cmp	x3, x2
   166cc:	b.eq	16780 <idpriv_temp_restore@@Base+0x10e8>  // b.none
   166d0:	sub	x9, x8, #0x1
   166d4:	mov	x19, x4
   166d8:	mov	x20, x1
   166dc:	cmp	x2, x9, lsr #1
   166e0:	b.ls	16708 <idpriv_temp_restore@@Base+0x1070>  // b.plast
   166e4:	ldr	x22, [x0, #80]
   166e8:	cmp	x9, x2
   166ec:	b.eq	16720 <idpriv_temp_restore@@Base+0x1088>  // b.none
   166f0:	sub	x8, x2, x8
   166f4:	add	x8, x8, #0x1
   166f8:	ldr	x22, [x22, #24]
   166fc:	adds	x8, x8, #0x1
   16700:	b.cc	166f8 <idpriv_temp_restore@@Base+0x1060>  // b.lo, b.ul, b.last
   16704:	b	16720 <idpriv_temp_restore@@Base+0x1088>
   16708:	ldr	x22, [x0, #72]
   1670c:	cbz	x2, 16720 <idpriv_temp_restore@@Base+0x1088>
   16710:	mov	x8, x2
   16714:	ldr	x22, [x22, #16]
   16718:	subs	x8, x8, #0x1
   1671c:	b.ne	16714 <idpriv_temp_restore@@Base+0x107c>  // b.any
   16720:	sub	x23, x2, x3
   16724:	ldr	x0, [x22, #32]
   16728:	mov	x1, x19
   1672c:	blr	x20
   16730:	cmp	w0, #0x0
   16734:	b.le	16744 <idpriv_temp_restore@@Base+0x10ac>
   16738:	mov	w8, #0x8                   	// #8
   1673c:	cbz	w8, 16764 <idpriv_temp_restore@@Base+0x10cc>
   16740:	b	16770 <idpriv_temp_restore@@Base+0x10d8>
   16744:	cbz	w0, 16758 <idpriv_temp_restore@@Base+0x10c0>
   16748:	ldr	x22, [x22, #16]
   1674c:	mov	w8, wzr
   16750:	cbz	w8, 16764 <idpriv_temp_restore@@Base+0x10cc>
   16754:	b	16770 <idpriv_temp_restore@@Base+0x10d8>
   16758:	mov	w8, #0x1                   	// #1
   1675c:	mov	x21, x22
   16760:	cbnz	w8, 16770 <idpriv_temp_restore@@Base+0x10d8>
   16764:	adds	x23, x23, #0x1
   16768:	b.cc	16724 <idpriv_temp_restore@@Base+0x108c>  // b.lo, b.ul, b.last
   1676c:	b	16778 <idpriv_temp_restore@@Base+0x10e0>
   16770:	cmp	w8, #0x8
   16774:	b.ne	1677c <idpriv_temp_restore@@Base+0x10e4>  // b.any
   16778:	mov	w8, wzr
   1677c:	cbnz	w8, 16784 <idpriv_temp_restore@@Base+0x10ec>
   16780:	mov	x21, xzr
   16784:	mov	x0, x21
   16788:	ldp	x20, x19, [sp, #48]
   1678c:	ldp	x22, x21, [sp, #32]
   16790:	ldr	x23, [sp, #16]
   16794:	ldp	x29, x30, [sp], #64
   16798:	ret
   1679c:	bl	b020 <abort@plt>
   167a0:	stp	x29, x30, [sp, #-80]!
   167a4:	stp	x24, x23, [sp, #32]
   167a8:	stp	x22, x21, [sp, #48]
   167ac:	stp	x20, x19, [sp, #64]
   167b0:	ldr	x22, [x0, #72]
   167b4:	add	x23, x0, #0x38
   167b8:	str	x25, [sp, #16]
   167bc:	mov	x29, sp
   167c0:	cmp	x22, x23
   167c4:	b.eq	16818 <idpriv_temp_restore@@Base+0x1180>  // b.none
   167c8:	mov	x20, x2
   167cc:	mov	x21, x1
   167d0:	mov	x24, xzr
   167d4:	mov	w25, #0x2                   	// #2
   167d8:	ldr	x0, [x22, #32]
   167dc:	mov	x1, x20
   167e0:	blr	x21
   167e4:	cmp	w0, #0x0
   167e8:	cset	w8, eq  // eq = none
   167ec:	csel	x9, x24, x19, eq  // eq = none
   167f0:	csel	w8, w25, w8, gt
   167f4:	csel	x19, x19, x9, gt
   167f8:	cbnz	w8, 16810 <idpriv_temp_restore@@Base+0x1178>
   167fc:	ldr	x22, [x22, #16]
   16800:	add	x24, x24, #0x1
   16804:	cmp	x22, x23
   16808:	b.ne	167d8 <idpriv_temp_restore@@Base+0x1140>  // b.any
   1680c:	b	16818 <idpriv_temp_restore@@Base+0x1180>
   16810:	cmp	w8, #0x2
   16814:	b.ne	1681c <idpriv_temp_restore@@Base+0x1184>  // b.any
   16818:	mov	x19, #0xffffffffffffffff    	// #-1
   1681c:	mov	x0, x19
   16820:	ldp	x20, x19, [sp, #64]
   16824:	ldp	x22, x21, [sp, #48]
   16828:	ldp	x24, x23, [sp, #32]
   1682c:	ldr	x25, [sp, #16]
   16830:	ldp	x29, x30, [sp], #80
   16834:	ret
   16838:	stp	x29, x30, [sp, #-64]!
   1683c:	cmp	x3, x2
   16840:	stp	x24, x23, [sp, #16]
   16844:	stp	x22, x21, [sp, #32]
   16848:	stp	x20, x19, [sp, #48]
   1684c:	mov	x29, sp
   16850:	b.cc	1693c <idpriv_temp_restore@@Base+0x12a4>  // b.lo, b.ul, b.last
   16854:	ldr	x8, [x0, #96]
   16858:	cmp	x8, x3
   1685c:	b.cc	1693c <idpriv_temp_restore@@Base+0x12a4>  // b.lo, b.ul, b.last
   16860:	mov	x20, x2
   16864:	cmp	x3, x2
   16868:	b.eq	16920 <idpriv_temp_restore@@Base+0x1288>  // b.none
   1686c:	sub	x9, x8, #0x1
   16870:	mov	x19, x4
   16874:	mov	x21, x1
   16878:	cmp	x20, x9, lsr #1
   1687c:	b.ls	168a4 <idpriv_temp_restore@@Base+0x120c>  // b.plast
   16880:	ldr	x23, [x0, #80]
   16884:	cmp	x9, x20
   16888:	b.eq	168bc <idpriv_temp_restore@@Base+0x1224>  // b.none
   1688c:	sub	x8, x20, x8
   16890:	add	x8, x8, #0x1
   16894:	ldr	x23, [x23, #24]
   16898:	adds	x8, x8, #0x1
   1689c:	b.cc	16894 <idpriv_temp_restore@@Base+0x11fc>  // b.lo, b.ul, b.last
   168a0:	b	168bc <idpriv_temp_restore@@Base+0x1224>
   168a4:	ldr	x23, [x0, #72]
   168a8:	cbz	x20, 168bc <idpriv_temp_restore@@Base+0x1224>
   168ac:	mov	x8, x20
   168b0:	ldr	x23, [x23, #16]
   168b4:	subs	x8, x8, #0x1
   168b8:	b.ne	168b0 <idpriv_temp_restore@@Base+0x1218>  // b.any
   168bc:	sub	x24, x20, x3
   168c0:	ldr	x0, [x23, #32]
   168c4:	mov	x1, x19
   168c8:	blr	x21
   168cc:	cmp	w0, #0x0
   168d0:	b.le	168e0 <idpriv_temp_restore@@Base+0x1248>
   168d4:	mov	w8, #0x8                   	// #8
   168d8:	cbz	w8, 16904 <idpriv_temp_restore@@Base+0x126c>
   168dc:	b	16910 <idpriv_temp_restore@@Base+0x1278>
   168e0:	cbz	w0, 168f8 <idpriv_temp_restore@@Base+0x1260>
   168e4:	ldr	x23, [x23, #16]
   168e8:	mov	w8, wzr
   168ec:	add	x20, x20, #0x1
   168f0:	cbz	w8, 16904 <idpriv_temp_restore@@Base+0x126c>
   168f4:	b	16910 <idpriv_temp_restore@@Base+0x1278>
   168f8:	mov	w8, #0x1                   	// #1
   168fc:	mov	x22, x20
   16900:	cbnz	w8, 16910 <idpriv_temp_restore@@Base+0x1278>
   16904:	adds	x24, x24, #0x1
   16908:	b.cc	168c0 <idpriv_temp_restore@@Base+0x1228>  // b.lo, b.ul, b.last
   1690c:	b	16918 <idpriv_temp_restore@@Base+0x1280>
   16910:	cmp	w8, #0x8
   16914:	b.ne	1691c <idpriv_temp_restore@@Base+0x1284>  // b.any
   16918:	mov	w8, wzr
   1691c:	cbnz	w8, 16924 <idpriv_temp_restore@@Base+0x128c>
   16920:	mov	x22, #0xffffffffffffffff    	// #-1
   16924:	mov	x0, x22
   16928:	ldp	x20, x19, [sp, #48]
   1692c:	ldp	x22, x21, [sp, #32]
   16930:	ldp	x24, x23, [sp, #16]
   16934:	ldp	x29, x30, [sp], #64
   16938:	ret
   1693c:	bl	b020 <abort@plt>
   16940:	stp	x29, x30, [sp, #-64]!
   16944:	stp	x22, x21, [sp, #32]
   16948:	stp	x20, x19, [sp, #48]
   1694c:	ldr	x21, [x0, #72]
   16950:	str	x23, [sp, #16]
   16954:	add	x23, x0, #0x38
   16958:	mov	x19, x2
   1695c:	mov	x20, x0
   16960:	cmp	x21, x23
   16964:	mov	x29, sp
   16968:	b.eq	1698c <idpriv_temp_restore@@Base+0x12f4>  // b.none
   1696c:	mov	x22, x1
   16970:	ldr	x0, [x21, #32]
   16974:	mov	x1, x19
   16978:	blr	x22
   1697c:	tbz	w0, #31, 1699c <idpriv_temp_restore@@Base+0x1304>
   16980:	ldr	x21, [x21, #16]
   16984:	cmp	x21, x23
   16988:	b.ne	16970 <idpriv_temp_restore@@Base+0x12d8>  // b.any
   1698c:	mov	x0, x20
   16990:	mov	x1, x19
   16994:	bl	16074 <idpriv_temp_restore@@Base+0x9dc>
   16998:	b	169ac <idpriv_temp_restore@@Base+0x1314>
   1699c:	mov	x0, x20
   169a0:	mov	x1, x21
   169a4:	mov	x2, x19
   169a8:	bl	16104 <idpriv_temp_restore@@Base+0xa6c>
   169ac:	ldp	x20, x19, [sp, #48]
   169b0:	ldp	x22, x21, [sp, #32]
   169b4:	ldr	x23, [sp, #16]
   169b8:	ldp	x29, x30, [sp], #64
   169bc:	ret
   169c0:	stp	x29, x30, [sp, #-64]!
   169c4:	stp	x22, x21, [sp, #32]
   169c8:	stp	x20, x19, [sp, #48]
   169cc:	ldr	x21, [x0, #72]
   169d0:	str	x23, [sp, #16]
   169d4:	add	x23, x0, #0x38
   169d8:	mov	x29, sp
   169dc:	cmp	x21, x23
   169e0:	b.eq	16a48 <idpriv_temp_restore@@Base+0x13b0>  // b.none
   169e4:	mov	x19, x2
   169e8:	mov	x20, x0
   169ec:	mov	x22, x1
   169f0:	b	16a08 <idpriv_temp_restore@@Base+0x1370>
   169f4:	mov	w8, #0x2                   	// #2
   169f8:	cbnz	w8, 16a40 <idpriv_temp_restore@@Base+0x13a8>
   169fc:	ldr	x21, [x21, #16]
   16a00:	cmp	x21, x23
   16a04:	b.eq	16a48 <idpriv_temp_restore@@Base+0x13b0>  // b.none
   16a08:	ldr	x0, [x21, #32]
   16a0c:	mov	x1, x19
   16a10:	blr	x22
   16a14:	cmp	w0, #0x0
   16a18:	b.gt	169f4 <idpriv_temp_restore@@Base+0x135c>
   16a1c:	cbz	w0, 16a2c <idpriv_temp_restore@@Base+0x1394>
   16a20:	mov	w8, wzr
   16a24:	cbz	w8, 169fc <idpriv_temp_restore@@Base+0x1364>
   16a28:	b	16a40 <idpriv_temp_restore@@Base+0x13a8>
   16a2c:	mov	x0, x20
   16a30:	mov	x1, x21
   16a34:	bl	16314 <idpriv_temp_restore@@Base+0xc7c>
   16a38:	mov	w8, #0x1                   	// #1
   16a3c:	cbz	w8, 169fc <idpriv_temp_restore@@Base+0x1364>
   16a40:	cmp	w8, #0x2
   16a44:	b.ne	16a60 <idpriv_temp_restore@@Base+0x13c8>  // b.any
   16a48:	mov	w0, wzr
   16a4c:	ldp	x20, x19, [sp, #48]
   16a50:	ldp	x22, x21, [sp, #32]
   16a54:	ldr	x23, [sp, #16]
   16a58:	ldp	x29, x30, [sp], #64
   16a5c:	ret
   16a60:	mov	w0, #0x1                   	// #1
   16a64:	b	16a4c <idpriv_temp_restore@@Base+0x13b4>
   16a68:	adrp	x10, 2c000 <vasnprintf@@Base+0x1ec4>
   16a6c:	mov	x9, xzr
   16a70:	add	x10, x10, #0xb98
   16a74:	ldr	x8, [x10, x9]
   16a78:	cmp	x8, x0
   16a7c:	b.cs	16a90 <idpriv_temp_restore@@Base+0x13f8>  // b.hs, b.nlast
   16a80:	add	x9, x9, #0x8
   16a84:	cmp	x9, #0x740
   16a88:	b.ne	16a74 <idpriv_temp_restore@@Base+0x13dc>  // b.any
   16a8c:	mov	x8, #0xffffffffffffffff    	// #-1
   16a90:	mov	x0, x8
   16a94:	ret
   16a98:	ldr	x8, [x1, #8]
   16a9c:	ldp	x10, x9, [x0, #40]
   16aa0:	udiv	x11, x8, x9
   16aa4:	msub	x8, x11, x9, x8
   16aa8:	lsl	x8, x8, #3
   16aac:	ldr	x9, [x10, x8]
   16ab0:	str	x9, [x1]
   16ab4:	str	x1, [x10, x8]
   16ab8:	ret
   16abc:	stp	x29, x30, [sp, #-16]!
   16ac0:	ldr	x8, [x1, #8]
   16ac4:	ldp	x10, x9, [x0, #40]
   16ac8:	mov	x29, sp
   16acc:	udiv	x11, x8, x9
   16ad0:	msub	x8, x11, x9, x8
   16ad4:	add	x8, x10, x8, lsl #3
   16ad8:	ldr	x9, [x8]
   16adc:	cmp	x9, x1
   16ae0:	b.eq	16af0 <idpriv_temp_restore@@Base+0x1458>  // b.none
   16ae4:	cbz	x9, 16b00 <idpriv_temp_restore@@Base+0x1468>
   16ae8:	mov	x8, x9
   16aec:	b	16ad8 <idpriv_temp_restore@@Base+0x1440>
   16af0:	ldr	x9, [x1]
   16af4:	str	x9, [x8]
   16af8:	ldp	x29, x30, [sp], #16
   16afc:	ret
   16b00:	bl	b020 <abort@plt>
   16b04:	stp	x29, x30, [sp, #-32]!
   16b08:	str	x19, [sp, #16]
   16b0c:	mov	x19, x0
   16b10:	ldr	x0, [x0, #96]
   16b14:	mov	x29, sp
   16b18:	lsr	x1, x0, #1
   16b1c:	bl	ad10 <xsum@plt>
   16b20:	ldr	x8, [x19, #48]
   16b24:	cmp	x0, x8
   16b28:	b.ls	16b38 <idpriv_temp_restore@@Base+0x14a0>  // b.plast
   16b2c:	mov	x1, x0
   16b30:	mov	x0, x19
   16b34:	bl	16b44 <idpriv_temp_restore@@Base+0x14ac>
   16b38:	ldr	x19, [sp, #16]
   16b3c:	ldp	x29, x30, [sp], #32
   16b40:	ret
   16b44:	stp	x29, x30, [sp, #-48]!
   16b48:	stp	x20, x19, [sp, #32]
   16b4c:	mov	x19, x0
   16b50:	mov	x0, x1
   16b54:	stp	x22, x21, [sp, #16]
   16b58:	mov	x29, sp
   16b5c:	bl	16a68 <idpriv_temp_restore@@Base+0x13d0>
   16b60:	ldr	x22, [x19, #48]
   16b64:	cmp	x0, x22
   16b68:	b.ls	16b9c <idpriv_temp_restore@@Base+0x1504>  // b.plast
   16b6c:	mov	x20, x0
   16b70:	lsr	x8, x0, #61
   16b74:	cbnz	x8, 16b9c <idpriv_temp_restore@@Base+0x1504>
   16b78:	ldr	x21, [x19, #40]
   16b7c:	mov	w1, #0x8                   	// #8
   16b80:	mov	x0, x20
   16b84:	bl	ae10 <calloc@plt>
   16b88:	cbz	x0, 16b9c <idpriv_temp_restore@@Base+0x1504>
   16b8c:	cbnz	x22, 16bb0 <idpriv_temp_restore@@Base+0x1518>
   16b90:	stp	x0, x20, [x19, #40]
   16b94:	mov	x0, x21
   16b98:	bl	b1d0 <free@plt>
   16b9c:	ldp	x20, x19, [sp, #32]
   16ba0:	ldp	x22, x21, [sp, #16]
   16ba4:	ldp	x29, x30, [sp], #48
   16ba8:	ret
   16bac:	cbz	x22, 16b90 <idpriv_temp_restore@@Base+0x14f8>
   16bb0:	sub	x22, x22, #0x1
   16bb4:	ldr	x8, [x21, x22, lsl #3]
   16bb8:	cbz	x8, 16bac <idpriv_temp_restore@@Base+0x1514>
   16bbc:	ldp	x11, x9, [x8]
   16bc0:	udiv	x10, x9, x20
   16bc4:	msub	x9, x10, x20, x9
   16bc8:	lsl	x9, x9, #3
   16bcc:	ldr	x10, [x0, x9]
   16bd0:	str	x10, [x8]
   16bd4:	str	x8, [x0, x9]
   16bd8:	mov	x8, x11
   16bdc:	cbnz	x11, 16bbc <idpriv_temp_restore@@Base+0x1524>
   16be0:	b	16bac <idpriv_temp_restore@@Base+0x1514>

0000000000016be4 <gl_list_nx_create_empty@@Base>:
   16be4:	stp	x29, x30, [sp, #-16]!
   16be8:	ldr	x8, [x0]
   16bec:	and	w4, w4, #0x1
   16bf0:	mov	x29, sp
   16bf4:	blr	x8
   16bf8:	ldp	x29, x30, [sp], #16
   16bfc:	ret

0000000000016c00 <gl_list_nx_create@@Base>:
   16c00:	stp	x29, x30, [sp, #-16]!
   16c04:	ldr	x8, [x0, #8]
   16c08:	and	w4, w4, #0x1
   16c0c:	mov	x29, sp
   16c10:	blr	x8
   16c14:	ldp	x29, x30, [sp], #16
   16c18:	ret

0000000000016c1c <gl_list_size@@Base>:
   16c1c:	stp	x29, x30, [sp, #-16]!
   16c20:	ldr	x8, [x0]
   16c24:	mov	x29, sp
   16c28:	ldr	x8, [x8, #16]
   16c2c:	blr	x8
   16c30:	ldp	x29, x30, [sp], #16
   16c34:	ret

0000000000016c38 <gl_list_node_value@@Base>:
   16c38:	stp	x29, x30, [sp, #-16]!
   16c3c:	ldr	x8, [x0]
   16c40:	mov	x29, sp
   16c44:	ldr	x8, [x8, #24]
   16c48:	blr	x8
   16c4c:	ldp	x29, x30, [sp], #16
   16c50:	ret

0000000000016c54 <gl_list_node_nx_set_value@@Base>:
   16c54:	stp	x29, x30, [sp, #-16]!
   16c58:	ldr	x8, [x0]
   16c5c:	mov	x29, sp
   16c60:	ldr	x8, [x8, #32]
   16c64:	blr	x8
   16c68:	ldp	x29, x30, [sp], #16
   16c6c:	ret

0000000000016c70 <gl_list_next_node@@Base>:
   16c70:	stp	x29, x30, [sp, #-16]!
   16c74:	ldr	x8, [x0]
   16c78:	mov	x29, sp
   16c7c:	ldr	x8, [x8, #40]
   16c80:	blr	x8
   16c84:	ldp	x29, x30, [sp], #16
   16c88:	ret

0000000000016c8c <gl_list_previous_node@@Base>:
   16c8c:	stp	x29, x30, [sp, #-16]!
   16c90:	ldr	x8, [x0]
   16c94:	mov	x29, sp
   16c98:	ldr	x8, [x8, #48]
   16c9c:	blr	x8
   16ca0:	ldp	x29, x30, [sp], #16
   16ca4:	ret

0000000000016ca8 <gl_list_get_at@@Base>:
   16ca8:	stp	x29, x30, [sp, #-16]!
   16cac:	ldr	x8, [x0]
   16cb0:	mov	x29, sp
   16cb4:	ldr	x8, [x8, #56]
   16cb8:	blr	x8
   16cbc:	ldp	x29, x30, [sp], #16
   16cc0:	ret

0000000000016cc4 <gl_list_nx_set_at@@Base>:
   16cc4:	stp	x29, x30, [sp, #-16]!
   16cc8:	ldr	x8, [x0]
   16ccc:	mov	x29, sp
   16cd0:	ldr	x8, [x8, #64]
   16cd4:	blr	x8
   16cd8:	ldp	x29, x30, [sp], #16
   16cdc:	ret

0000000000016ce0 <gl_list_search@@Base>:
   16ce0:	stp	x29, x30, [sp, #-32]!
   16ce4:	stp	x20, x19, [sp, #16]
   16ce8:	ldr	x8, [x0]
   16cec:	mov	x29, sp
   16cf0:	mov	x19, x0
   16cf4:	mov	x20, x1
   16cf8:	ldr	x8, [x8, #16]
   16cfc:	blr	x8
   16d00:	ldr	x8, [x19]
   16d04:	mov	x2, x0
   16d08:	mov	x0, x19
   16d0c:	mov	x1, xzr
   16d10:	ldr	x8, [x8, #72]
   16d14:	mov	x3, x20
   16d18:	blr	x8
   16d1c:	ldp	x20, x19, [sp, #16]
   16d20:	ldp	x29, x30, [sp], #32
   16d24:	ret

0000000000016d28 <gl_list_search_from@@Base>:
   16d28:	stp	x29, x30, [sp, #-48]!
   16d2c:	stp	x20, x19, [sp, #32]
   16d30:	ldr	x8, [x0]
   16d34:	str	x21, [sp, #16]
   16d38:	mov	x29, sp
   16d3c:	mov	x19, x2
   16d40:	ldr	x8, [x8, #16]
   16d44:	mov	x20, x0
   16d48:	mov	x21, x1
   16d4c:	blr	x8
   16d50:	ldr	x8, [x20]
   16d54:	mov	x2, x0
   16d58:	mov	x0, x20
   16d5c:	mov	x1, x21
   16d60:	ldr	x8, [x8, #72]
   16d64:	mov	x3, x19
   16d68:	blr	x8
   16d6c:	ldp	x20, x19, [sp, #32]
   16d70:	ldr	x21, [sp, #16]
   16d74:	ldp	x29, x30, [sp], #48
   16d78:	ret

0000000000016d7c <gl_list_search_from_to@@Base>:
   16d7c:	stp	x29, x30, [sp, #-16]!
   16d80:	ldr	x8, [x0]
   16d84:	mov	x29, sp
   16d88:	ldr	x8, [x8, #72]
   16d8c:	blr	x8
   16d90:	ldp	x29, x30, [sp], #16
   16d94:	ret

0000000000016d98 <gl_list_indexof@@Base>:
   16d98:	stp	x29, x30, [sp, #-32]!
   16d9c:	stp	x20, x19, [sp, #16]
   16da0:	ldr	x8, [x0]
   16da4:	mov	x29, sp
   16da8:	mov	x19, x0
   16dac:	mov	x20, x1
   16db0:	ldr	x8, [x8, #16]
   16db4:	blr	x8
   16db8:	ldr	x8, [x19]
   16dbc:	mov	x2, x0
   16dc0:	mov	x0, x19
   16dc4:	mov	x1, xzr
   16dc8:	ldr	x8, [x8, #80]
   16dcc:	mov	x3, x20
   16dd0:	blr	x8
   16dd4:	ldp	x20, x19, [sp, #16]
   16dd8:	ldp	x29, x30, [sp], #32
   16ddc:	ret

0000000000016de0 <gl_list_indexof_from@@Base>:
   16de0:	stp	x29, x30, [sp, #-48]!
   16de4:	stp	x20, x19, [sp, #32]
   16de8:	ldr	x8, [x0]
   16dec:	str	x21, [sp, #16]
   16df0:	mov	x29, sp
   16df4:	mov	x19, x2
   16df8:	ldr	x8, [x8, #16]
   16dfc:	mov	x20, x0
   16e00:	mov	x21, x1
   16e04:	blr	x8
   16e08:	ldr	x8, [x20]
   16e0c:	mov	x2, x0
   16e10:	mov	x0, x20
   16e14:	mov	x1, x21
   16e18:	ldr	x8, [x8, #80]
   16e1c:	mov	x3, x19
   16e20:	blr	x8
   16e24:	ldp	x20, x19, [sp, #32]
   16e28:	ldr	x21, [sp, #16]
   16e2c:	ldp	x29, x30, [sp], #48
   16e30:	ret

0000000000016e34 <gl_list_indexof_from_to@@Base>:
   16e34:	stp	x29, x30, [sp, #-16]!
   16e38:	ldr	x8, [x0]
   16e3c:	mov	x29, sp
   16e40:	ldr	x8, [x8, #80]
   16e44:	blr	x8
   16e48:	ldp	x29, x30, [sp], #16
   16e4c:	ret

0000000000016e50 <gl_list_nx_add_first@@Base>:
   16e50:	stp	x29, x30, [sp, #-16]!
   16e54:	ldr	x8, [x0]
   16e58:	mov	x29, sp
   16e5c:	ldr	x8, [x8, #88]
   16e60:	blr	x8
   16e64:	ldp	x29, x30, [sp], #16
   16e68:	ret

0000000000016e6c <gl_list_nx_add_last@@Base>:
   16e6c:	stp	x29, x30, [sp, #-16]!
   16e70:	ldr	x8, [x0]
   16e74:	mov	x29, sp
   16e78:	ldr	x8, [x8, #96]
   16e7c:	blr	x8
   16e80:	ldp	x29, x30, [sp], #16
   16e84:	ret

0000000000016e88 <gl_list_nx_add_before@@Base>:
   16e88:	stp	x29, x30, [sp, #-16]!
   16e8c:	ldr	x8, [x0]
   16e90:	mov	x29, sp
   16e94:	ldr	x8, [x8, #104]
   16e98:	blr	x8
   16e9c:	ldp	x29, x30, [sp], #16
   16ea0:	ret

0000000000016ea4 <gl_list_nx_add_after@@Base>:
   16ea4:	stp	x29, x30, [sp, #-16]!
   16ea8:	ldr	x8, [x0]
   16eac:	mov	x29, sp
   16eb0:	ldr	x8, [x8, #112]
   16eb4:	blr	x8
   16eb8:	ldp	x29, x30, [sp], #16
   16ebc:	ret

0000000000016ec0 <gl_list_nx_add_at@@Base>:
   16ec0:	stp	x29, x30, [sp, #-16]!
   16ec4:	ldr	x8, [x0]
   16ec8:	mov	x29, sp
   16ecc:	ldr	x8, [x8, #120]
   16ed0:	blr	x8
   16ed4:	ldp	x29, x30, [sp], #16
   16ed8:	ret

0000000000016edc <gl_list_remove_node@@Base>:
   16edc:	stp	x29, x30, [sp, #-16]!
   16ee0:	ldr	x8, [x0]
   16ee4:	mov	x29, sp
   16ee8:	ldr	x8, [x8, #128]
   16eec:	blr	x8
   16ef0:	and	w0, w0, #0x1
   16ef4:	ldp	x29, x30, [sp], #16
   16ef8:	ret

0000000000016efc <gl_list_remove_at@@Base>:
   16efc:	stp	x29, x30, [sp, #-16]!
   16f00:	ldr	x8, [x0]
   16f04:	mov	x29, sp
   16f08:	ldr	x8, [x8, #136]
   16f0c:	blr	x8
   16f10:	and	w0, w0, #0x1
   16f14:	ldp	x29, x30, [sp], #16
   16f18:	ret

0000000000016f1c <gl_list_remove@@Base>:
   16f1c:	stp	x29, x30, [sp, #-16]!
   16f20:	ldr	x8, [x0]
   16f24:	mov	x29, sp
   16f28:	ldr	x8, [x8, #144]
   16f2c:	blr	x8
   16f30:	and	w0, w0, #0x1
   16f34:	ldp	x29, x30, [sp], #16
   16f38:	ret

0000000000016f3c <gl_list_free@@Base>:
   16f3c:	stp	x29, x30, [sp, #-16]!
   16f40:	ldr	x8, [x0]
   16f44:	mov	x29, sp
   16f48:	ldr	x8, [x8, #152]
   16f4c:	blr	x8
   16f50:	ldp	x29, x30, [sp], #16
   16f54:	ret

0000000000016f58 <gl_list_iterator@@Base>:
   16f58:	stp	x29, x30, [sp, #-16]!
   16f5c:	ldr	x9, [x0]
   16f60:	mov	x29, sp
   16f64:	ldr	x9, [x9, #160]
   16f68:	blr	x9
   16f6c:	ldp	x29, x30, [sp], #16
   16f70:	ret

0000000000016f74 <gl_list_iterator_from_to@@Base>:
   16f74:	stp	x29, x30, [sp, #-16]!
   16f78:	ldr	x9, [x0]
   16f7c:	mov	x29, sp
   16f80:	ldr	x9, [x9, #168]
   16f84:	blr	x9
   16f88:	ldp	x29, x30, [sp], #16
   16f8c:	ret

0000000000016f90 <gl_list_iterator_next@@Base>:
   16f90:	stp	x29, x30, [sp, #-16]!
   16f94:	ldr	x8, [x0]
   16f98:	mov	x29, sp
   16f9c:	ldr	x8, [x8, #176]
   16fa0:	blr	x8
   16fa4:	and	w0, w0, #0x1
   16fa8:	ldp	x29, x30, [sp], #16
   16fac:	ret

0000000000016fb0 <gl_list_iterator_free@@Base>:
   16fb0:	stp	x29, x30, [sp, #-16]!
   16fb4:	ldr	x8, [x0]
   16fb8:	mov	x29, sp
   16fbc:	ldr	x8, [x8, #184]
   16fc0:	blr	x8
   16fc4:	ldp	x29, x30, [sp], #16
   16fc8:	ret

0000000000016fcc <gl_sortedlist_search@@Base>:
   16fcc:	stp	x29, x30, [sp, #-16]!
   16fd0:	ldr	x8, [x0]
   16fd4:	mov	x29, sp
   16fd8:	ldr	x8, [x8, #192]
   16fdc:	blr	x8
   16fe0:	ldp	x29, x30, [sp], #16
   16fe4:	ret

0000000000016fe8 <gl_sortedlist_search_from_to@@Base>:
   16fe8:	stp	x29, x30, [sp, #-16]!
   16fec:	ldr	x8, [x0]
   16ff0:	mov	x29, sp
   16ff4:	ldr	x8, [x8, #200]
   16ff8:	blr	x8
   16ffc:	ldp	x29, x30, [sp], #16
   17000:	ret

0000000000017004 <gl_sortedlist_indexof@@Base>:
   17004:	stp	x29, x30, [sp, #-16]!
   17008:	ldr	x8, [x0]
   1700c:	mov	x29, sp
   17010:	ldr	x8, [x8, #208]
   17014:	blr	x8
   17018:	ldp	x29, x30, [sp], #16
   1701c:	ret

0000000000017020 <gl_sortedlist_indexof_from_to@@Base>:
   17020:	stp	x29, x30, [sp, #-16]!
   17024:	ldr	x8, [x0]
   17028:	mov	x29, sp
   1702c:	ldr	x8, [x8, #216]
   17030:	blr	x8
   17034:	ldp	x29, x30, [sp], #16
   17038:	ret

000000000001703c <gl_sortedlist_nx_add@@Base>:
   1703c:	stp	x29, x30, [sp, #-16]!
   17040:	ldr	x8, [x0]
   17044:	mov	x29, sp
   17048:	ldr	x8, [x8, #224]
   1704c:	blr	x8
   17050:	ldp	x29, x30, [sp], #16
   17054:	ret

0000000000017058 <gl_sortedlist_remove@@Base>:
   17058:	stp	x29, x30, [sp, #-16]!
   1705c:	ldr	x8, [x0]
   17060:	mov	x29, sp
   17064:	ldr	x8, [x8, #232]
   17068:	blr	x8
   1706c:	and	w0, w0, #0x1
   17070:	ldp	x29, x30, [sp], #16
   17074:	ret

0000000000017078 <locale_charset@@Base>:
   17078:	stp	x29, x30, [sp, #-16]!
   1707c:	mov	w0, #0xe                   	// #14
   17080:	mov	x29, sp
   17084:	bl	ab90 <nl_langinfo@plt>
   17088:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1708c:	add	x8, x8, #0x4fc
   17090:	cmp	x0, #0x0
   17094:	csel	x8, x8, x0, eq  // eq = none
   17098:	ldrb	w9, [x8]
   1709c:	adrp	x10, 2b000 <vasnprintf@@Base+0xec4>
   170a0:	add	x10, x10, #0x322
   170a4:	cmp	w9, #0x0
   170a8:	csel	x0, x10, x8, eq  // eq = none
   170ac:	ldp	x29, x30, [sp], #16
   170b0:	ret

00000000000170b4 <glthread_rwlock_init_for_glibc@@Base>:
   170b4:	sub	sp, sp, #0x30
   170b8:	stp	x20, x19, [sp, #32]
   170bc:	mov	x19, x0
   170c0:	add	x0, sp, #0x8
   170c4:	stp	x29, x30, [sp, #16]
   170c8:	add	x29, sp, #0x10
   170cc:	bl	a820 <pthread_rwlockattr_init@plt>
   170d0:	mov	w20, w0
   170d4:	cbnz	w0, 17104 <glthread_rwlock_init_for_glibc@@Base+0x50>
   170d8:	add	x0, sp, #0x8
   170dc:	mov	w1, #0x2                   	// #2
   170e0:	bl	a9a0 <pthread_rwlockattr_setkind_np@plt>
   170e4:	mov	w20, w0
   170e8:	cbnz	w0, 170fc <glthread_rwlock_init_for_glibc@@Base+0x48>
   170ec:	add	x1, sp, #0x8
   170f0:	mov	x0, x19
   170f4:	bl	a980 <pthread_rwlock_init@plt>
   170f8:	mov	w20, w0
   170fc:	add	x0, sp, #0x8
   17100:	bl	b5a0 <pthread_rwlockattr_destroy@plt>
   17104:	mov	w0, w20
   17108:	ldp	x20, x19, [sp, #32]
   1710c:	ldp	x29, x30, [sp, #16]
   17110:	add	sp, sp, #0x30
   17114:	ret

0000000000017118 <glthread_recursive_lock_init_multithreaded@@Base>:
   17118:	sub	sp, sp, #0x30
   1711c:	stp	x20, x19, [sp, #32]
   17120:	mov	x19, x0
   17124:	add	x0, sp, #0x8
   17128:	stp	x29, x30, [sp, #16]
   1712c:	add	x29, sp, #0x10
   17130:	bl	b4b0 <pthread_mutexattr_init@plt>
   17134:	mov	w20, w0
   17138:	cbnz	w0, 1717c <glthread_recursive_lock_init_multithreaded@@Base+0x64>
   1713c:	add	x0, sp, #0x8
   17140:	mov	w1, #0x1                   	// #1
   17144:	bl	a8d0 <pthread_mutexattr_settype@plt>
   17148:	cbz	w0, 1715c <glthread_recursive_lock_init_multithreaded@@Base+0x44>
   1714c:	mov	w20, w0
   17150:	add	x0, sp, #0x8
   17154:	bl	b520 <pthread_mutexattr_destroy@plt>
   17158:	b	1717c <glthread_recursive_lock_init_multithreaded@@Base+0x64>
   1715c:	add	x1, sp, #0x8
   17160:	mov	x0, x19
   17164:	bl	af20 <pthread_mutex_init@plt>
   17168:	mov	w19, w0
   1716c:	add	x0, sp, #0x8
   17170:	bl	b520 <pthread_mutexattr_destroy@plt>
   17174:	cmp	w19, #0x0
   17178:	csel	w20, w0, w19, eq  // eq = none
   1717c:	mov	w0, w20
   17180:	ldp	x20, x19, [sp, #32]
   17184:	ldp	x29, x30, [sp, #16]
   17188:	add	sp, sp, #0x30
   1718c:	ret

0000000000017190 <glthread_once_singlethreaded@@Base>:
   17190:	ldrb	w8, [x0]
   17194:	cbz	w8, 171a0 <glthread_once_singlethreaded@@Base+0x10>
   17198:	mov	w0, wzr
   1719c:	ret
   171a0:	mov	w8, #0xff                  	// #255
   171a4:	strb	w8, [x0]
   171a8:	mov	w0, #0x1                   	// #1
   171ac:	ret

00000000000171b0 <mmalloca@@Base>:
   171b0:	cmn	x0, #0x21
   171b4:	b.hi	171f0 <mmalloca@@Base+0x40>  // b.pmore
   171b8:	stp	x29, x30, [sp, #-16]!
   171bc:	add	x0, x0, #0x20
   171c0:	mov	x29, sp
   171c4:	bl	abc0 <malloc@plt>
   171c8:	cbz	x0, 171f8 <mmalloca@@Base+0x48>
   171cc:	add	x10, x0, #0x10
   171d0:	and	x10, x10, #0xffffffffffffffe0
   171d4:	mov	x8, x0
   171d8:	orr	x0, x10, #0x10
   171dc:	mov	w9, wzr
   171e0:	sub	w8, w0, w8
   171e4:	sturb	w8, [x0, #-1]
   171e8:	ldp	x29, x30, [sp], #16
   171ec:	cbz	w9, 171f4 <mmalloca@@Base+0x44>
   171f0:	mov	x0, xzr
   171f4:	ret
   171f8:	mov	w9, #0x1                   	// #1
   171fc:	ldp	x29, x30, [sp], #16
   17200:	cbnz	w9, 171f0 <mmalloca@@Base+0x40>
   17204:	b	171f4 <mmalloca@@Base+0x44>

0000000000017208 <freea@@Base>:
   17208:	stp	x29, x30, [sp, #-16]!
   1720c:	tst	x0, #0xf
   17210:	mov	x29, sp
   17214:	b.ne	17230 <freea@@Base+0x28>  // b.any
   17218:	tbz	w0, #4, 17228 <freea@@Base+0x20>
   1721c:	ldurb	w8, [x0, #-1]
   17220:	sub	x0, x0, x8
   17224:	bl	b1d0 <free@plt>
   17228:	ldp	x29, x30, [sp], #16
   1722c:	ret
   17230:	bl	b020 <abort@plt>

0000000000017234 <gl_map_nx_create_empty@@Base>:
   17234:	stp	x29, x30, [sp, #-16]!
   17238:	ldr	x8, [x0]
   1723c:	mov	x29, sp
   17240:	blr	x8
   17244:	ldp	x29, x30, [sp], #16
   17248:	ret

000000000001724c <gl_map_size@@Base>:
   1724c:	stp	x29, x30, [sp, #-16]!
   17250:	ldr	x8, [x0]
   17254:	mov	x29, sp
   17258:	ldr	x8, [x8, #8]
   1725c:	blr	x8
   17260:	ldp	x29, x30, [sp], #16
   17264:	ret

0000000000017268 <gl_map_search@@Base>:
   17268:	stp	x29, x30, [sp, #-16]!
   1726c:	ldr	x8, [x0]
   17270:	mov	x29, sp
   17274:	ldr	x8, [x8, #16]
   17278:	blr	x8
   1727c:	and	w0, w0, #0x1
   17280:	ldp	x29, x30, [sp], #16
   17284:	ret

0000000000017288 <gl_map_nx_getput@@Base>:
   17288:	stp	x29, x30, [sp, #-16]!
   1728c:	ldr	x8, [x0]
   17290:	mov	x29, sp
   17294:	ldr	x8, [x8, #24]
   17298:	blr	x8
   1729c:	ldp	x29, x30, [sp], #16
   172a0:	ret

00000000000172a4 <gl_map_getremove@@Base>:
   172a4:	stp	x29, x30, [sp, #-16]!
   172a8:	ldr	x8, [x0]
   172ac:	mov	x29, sp
   172b0:	ldr	x8, [x8, #32]
   172b4:	blr	x8
   172b8:	and	w0, w0, #0x1
   172bc:	ldp	x29, x30, [sp], #16
   172c0:	ret

00000000000172c4 <gl_map_free@@Base>:
   172c4:	stp	x29, x30, [sp, #-16]!
   172c8:	ldr	x8, [x0]
   172cc:	mov	x29, sp
   172d0:	ldr	x8, [x8, #40]
   172d4:	blr	x8
   172d8:	ldp	x29, x30, [sp], #16
   172dc:	ret

00000000000172e0 <gl_map_iterator@@Base>:
   172e0:	stp	x29, x30, [sp, #-16]!
   172e4:	ldr	x9, [x0]
   172e8:	mov	x29, sp
   172ec:	ldr	x9, [x9, #48]
   172f0:	blr	x9
   172f4:	ldp	x29, x30, [sp], #16
   172f8:	ret

00000000000172fc <gl_map_iterator_next@@Base>:
   172fc:	stp	x29, x30, [sp, #-16]!
   17300:	ldr	x8, [x0]
   17304:	mov	x29, sp
   17308:	ldr	x8, [x8, #56]
   1730c:	blr	x8
   17310:	and	w0, w0, #0x1
   17314:	ldp	x29, x30, [sp], #16
   17318:	ret

000000000001731c <gl_map_iterator_free@@Base>:
   1731c:	stp	x29, x30, [sp, #-16]!
   17320:	ldr	x8, [x0]
   17324:	mov	x29, sp
   17328:	ldr	x8, [x8, #64]
   1732c:	blr	x8
   17330:	ldp	x29, x30, [sp], #16
   17334:	ret

0000000000017338 <gl_map_get@@Base>:
   17338:	sub	sp, sp, #0x20
   1733c:	add	x2, sp, #0x8
   17340:	stp	x29, x30, [sp, #16]
   17344:	add	x29, sp, #0x10
   17348:	str	xzr, [sp, #8]
   1734c:	bl	b600 <gl_map_search@plt>
   17350:	ldr	x0, [sp, #8]
   17354:	ldp	x29, x30, [sp, #16]
   17358:	add	sp, sp, #0x20
   1735c:	ret

0000000000017360 <gl_map_nx_put@@Base>:
   17360:	sub	sp, sp, #0x30
   17364:	add	x3, sp, #0x8
   17368:	stp	x29, x30, [sp, #16]
   1736c:	stp	x20, x19, [sp, #32]
   17370:	add	x29, sp, #0x10
   17374:	mov	x20, x0
   17378:	bl	b0a0 <gl_map_nx_getput@plt>
   1737c:	mov	w19, w0
   17380:	cbnz	w0, 17394 <gl_map_nx_put@@Base+0x34>
   17384:	ldr	x8, [x20, #24]
   17388:	cbz	x8, 17394 <gl_map_nx_put@@Base+0x34>
   1738c:	ldr	x0, [sp, #8]
   17390:	blr	x8
   17394:	mov	w0, w19
   17398:	ldp	x20, x19, [sp, #32]
   1739c:	ldp	x29, x30, [sp, #16]
   173a0:	add	sp, sp, #0x30
   173a4:	ret

00000000000173a8 <gl_map_remove@@Base>:
   173a8:	sub	sp, sp, #0x30
   173ac:	add	x2, sp, #0x8
   173b0:	stp	x29, x30, [sp, #16]
   173b4:	stp	x20, x19, [sp, #32]
   173b8:	add	x29, sp, #0x10
   173bc:	mov	x20, x0
   173c0:	bl	ac80 <gl_map_getremove@plt>
   173c4:	mov	w19, w0
   173c8:	tbz	w0, #0, 173dc <gl_map_remove@@Base+0x34>
   173cc:	ldr	x8, [x20, #24]
   173d0:	cbz	x8, 173dc <gl_map_remove@@Base+0x34>
   173d4:	ldr	x0, [sp, #8]
   173d8:	blr	x8
   173dc:	and	w0, w19, #0x1
   173e0:	ldp	x20, x19, [sp, #32]
   173e4:	ldp	x29, x30, [sp, #16]
   173e8:	add	sp, sp, #0x30
   173ec:	ret

00000000000173f0 <get_nonblocking_flag@@Base>:
   173f0:	stp	x29, x30, [sp, #-16]!
   173f4:	mov	w1, #0x3                   	// #3
   173f8:	mov	w2, wzr
   173fc:	mov	x29, sp
   17400:	bl	b3b0 <fcntl@plt>
   17404:	ubfx	w8, w0, #11, #1
   17408:	cmp	w0, #0x0
   1740c:	csinv	w0, w8, wzr, ge  // ge = tcont
   17410:	ldp	x29, x30, [sp], #16
   17414:	ret

0000000000017418 <set_nonblocking_flag@@Base>:
   17418:	stp	x29, x30, [sp, #-32]!
   1741c:	stp	x20, x19, [sp, #16]
   17420:	mov	w20, w1
   17424:	mov	w1, #0x3                   	// #3
   17428:	mov	w2, wzr
   1742c:	mov	x29, sp
   17430:	mov	w19, w0
   17434:	bl	b3b0 <fcntl@plt>
   17438:	tbnz	w0, #31, 17464 <set_nonblocking_flag@@Base+0x4c>
   1743c:	eor	w8, w20, w0, lsr #11
   17440:	tbz	w8, #0, 1746c <set_nonblocking_flag@@Base+0x54>
   17444:	orr	w8, w0, #0x800
   17448:	and	w9, w0, #0xfffff7ff
   1744c:	tst	w20, #0x1
   17450:	csel	w2, w8, w9, ne  // ne = any
   17454:	mov	w1, #0x4                   	// #4
   17458:	mov	w0, w19
   1745c:	bl	b3b0 <fcntl@plt>
   17460:	b	17470 <set_nonblocking_flag@@Base+0x58>
   17464:	mov	w0, #0xffffffff            	// #-1
   17468:	b	17470 <set_nonblocking_flag@@Base+0x58>
   1746c:	mov	w0, wzr
   17470:	ldp	x20, x19, [sp, #16]
   17474:	ldp	x29, x30, [sp], #32
   17478:	ret

000000000001747c <openat_save_fail@@Base>:
   1747c:	stp	x29, x30, [sp, #-32]!
   17480:	stp	x20, x19, [sp, #16]
   17484:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   17488:	ldr	x8, [x8, #3976]
   1748c:	mov	w20, w0
   17490:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   17494:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   17498:	ldr	w19, [x8]
   1749c:	add	x0, x0, #0x7e4
   174a0:	add	x1, x1, #0x2d8
   174a4:	mov	w2, #0x5                   	// #5
   174a8:	mov	x29, sp
   174ac:	bl	b580 <dcgettext@plt>
   174b0:	mov	x2, x0
   174b4:	mov	w0, w19
   174b8:	mov	w1, w20
   174bc:	bl	a8c0 <error@plt>
   174c0:	bl	b020 <abort@plt>

00000000000174c4 <openat_restore_fail@@Base>:
   174c4:	stp	x29, x30, [sp, #-32]!
   174c8:	stp	x20, x19, [sp, #16]
   174cc:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   174d0:	ldr	x8, [x8, #3976]
   174d4:	mov	w20, w0
   174d8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   174dc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   174e0:	ldr	w19, [x8]
   174e4:	add	x0, x0, #0x7e4
   174e8:	add	x1, x1, #0x303
   174ec:	mov	w2, #0x5                   	// #5
   174f0:	mov	x29, sp
   174f4:	bl	b580 <dcgettext@plt>
   174f8:	mov	x2, x0
   174fc:	mov	w0, w19
   17500:	mov	w1, w20
   17504:	bl	a8c0 <error@plt>
   17508:	bl	b020 <abort@plt>

000000000001750c <set_program_name@@Base>:
   1750c:	stp	x29, x30, [sp, #-32]!
   17510:	stp	x20, x19, [sp, #16]
   17514:	mov	x29, sp
   17518:	cbz	x0, 175a4 <set_program_name@@Base+0x98>
   1751c:	mov	w1, #0x2f                  	// #47
   17520:	mov	x19, x0
   17524:	bl	af70 <strrchr@plt>
   17528:	cmp	x0, #0x0
   1752c:	csinc	x20, x19, x0, eq  // eq = none
   17530:	sub	x8, x20, x19
   17534:	cmp	x8, #0x7
   17538:	b.lt	17580 <set_program_name@@Base+0x74>  // b.tstop
   1753c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   17540:	sub	x0, x20, #0x7
   17544:	add	x1, x1, #0x369
   17548:	mov	w2, #0x7                   	// #7
   1754c:	bl	acf0 <strncmp@plt>
   17550:	cbnz	w0, 17580 <set_program_name@@Base+0x74>
   17554:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   17558:	add	x1, x1, #0x371
   1755c:	mov	w2, #0x3                   	// #3
   17560:	mov	x0, x20
   17564:	bl	acf0 <strncmp@plt>
   17568:	mov	x19, x20
   1756c:	cbnz	w0, 17580 <set_program_name@@Base+0x74>
   17570:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   17574:	ldr	x8, [x8, #4008]
   17578:	add	x19, x20, #0x3
   1757c:	str	x19, [x8]
   17580:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   17584:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   17588:	ldr	x8, [x8, #3992]
   1758c:	ldr	x9, [x9, #3768]
   17590:	str	x19, [x8]
   17594:	str	x19, [x9]
   17598:	ldp	x20, x19, [sp, #16]
   1759c:	ldp	x29, x30, [sp], #32
   175a0:	ret
   175a4:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   175a8:	ldr	x8, [x8, #3816]
   175ac:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   175b0:	add	x0, x0, #0x331
   175b4:	mov	w1, #0x37                  	// #55
   175b8:	ldr	x3, [x8]
   175bc:	mov	w2, #0x1                   	// #1
   175c0:	bl	b370 <fwrite@plt>
   175c4:	bl	b020 <abort@plt>

00000000000175c8 <gl_rbtree_list_check_invariants@@Base>:
   175c8:	stp	x29, x30, [sp, #-16]!
   175cc:	ldr	x0, [x0, #40]
   175d0:	mov	x29, sp
   175d4:	cbz	x0, 175e0 <gl_rbtree_list_check_invariants@@Base+0x18>
   175d8:	mov	x1, xzr
   175dc:	bl	175e8 <gl_rbtree_list_check_invariants@@Base+0x20>
   175e0:	ldp	x29, x30, [sp], #16
   175e4:	ret
   175e8:	stp	x29, x30, [sp, #-48]!
   175ec:	stp	x20, x19, [sp, #32]
   175f0:	str	x21, [sp, #16]
   175f4:	mov	x21, x0
   175f8:	ldr	x0, [x0]
   175fc:	mov	x20, x1
   17600:	mov	x29, sp
   17604:	cbz	x0, 17690 <gl_rbtree_list_check_invariants@@Base+0xc8>
   17608:	mov	x1, x21
   1760c:	bl	175e8 <gl_rbtree_list_check_invariants@@Base+0x20>
   17610:	mov	w19, w0
   17614:	ldr	x0, [x21, #8]
   17618:	cbz	x0, 17624 <gl_rbtree_list_check_invariants@@Base+0x5c>
   1761c:	mov	x1, x21
   17620:	bl	175e8 <gl_rbtree_list_check_invariants@@Base+0x20>
   17624:	ldr	x8, [x21, #16]
   17628:	cmp	x8, x20
   1762c:	b.ne	176b0 <gl_rbtree_list_check_invariants@@Base+0xe8>  // b.any
   17630:	ldr	x9, [x21]
   17634:	ldr	x8, [x21, #32]
   17638:	cbz	x9, 176a0 <gl_rbtree_list_check_invariants@@Base+0xd8>
   1763c:	ldr	x9, [x9, #32]
   17640:	add	x9, x9, #0x1
   17644:	ldr	x10, [x21, #8]
   17648:	cbz	x10, 17650 <gl_rbtree_list_check_invariants@@Base+0x88>
   1764c:	ldr	x10, [x10, #32]
   17650:	add	x9, x10, x9
   17654:	cmp	x8, x9
   17658:	b.ne	176b0 <gl_rbtree_list_check_invariants@@Base+0xe8>  // b.any
   1765c:	ldr	w8, [x21, #24]
   17660:	cmp	w8, #0x2
   17664:	b.cs	176b0 <gl_rbtree_list_check_invariants@@Base+0xe8>  // b.hs, b.nlast
   17668:	cbnz	x20, 17670 <gl_rbtree_list_check_invariants@@Base+0xa8>
   1766c:	cbnz	w8, 176b0 <gl_rbtree_list_check_invariants@@Base+0xe8>
   17670:	cmp	w19, w0
   17674:	b.ne	176b0 <gl_rbtree_list_check_invariants@@Base+0xe8>  // b.any
   17678:	cmp	w8, #0x0
   1767c:	cinc	w0, w19, eq  // eq = none
   17680:	ldp	x20, x19, [sp, #32]
   17684:	ldr	x21, [sp, #16]
   17688:	ldp	x29, x30, [sp], #48
   1768c:	ret
   17690:	mov	w19, wzr
   17694:	ldr	x0, [x21, #8]
   17698:	cbnz	x0, 1761c <gl_rbtree_list_check_invariants@@Base+0x54>
   1769c:	b	17624 <gl_rbtree_list_check_invariants@@Base+0x5c>
   176a0:	mov	w9, #0x1                   	// #1
   176a4:	ldr	x10, [x21, #8]
   176a8:	cbnz	x10, 1764c <gl_rbtree_list_check_invariants@@Base+0x84>
   176ac:	b	17650 <gl_rbtree_list_check_invariants@@Base+0x88>
   176b0:	bl	b020 <abort@plt>
   176b4:	stp	x29, x30, [sp, #-64]!
   176b8:	str	x23, [sp, #16]
   176bc:	mov	x23, x0
   176c0:	mov	w0, #0x30                  	// #48
   176c4:	stp	x22, x21, [sp, #32]
   176c8:	stp	x20, x19, [sp, #48]
   176cc:	mov	x29, sp
   176d0:	mov	w21, w4
   176d4:	mov	x19, x3
   176d8:	mov	x20, x2
   176dc:	mov	x22, x1
   176e0:	bl	abc0 <malloc@plt>
   176e4:	cbz	x0, 176fc <gl_rbtree_list_check_invariants@@Base+0x134>
   176e8:	and	w8, w21, #0x1
   176ec:	stp	x23, x22, [x0]
   176f0:	stp	x20, x19, [x0, #16]
   176f4:	strb	w8, [x0, #32]
   176f8:	str	xzr, [x0, #40]
   176fc:	ldp	x20, x19, [sp, #48]
   17700:	ldp	x22, x21, [sp, #32]
   17704:	ldr	x23, [sp, #16]
   17708:	ldp	x29, x30, [sp], #64
   1770c:	ret
   17710:	stp	x29, x30, [sp, #-80]!
   17714:	stp	x26, x25, [sp, #16]
   17718:	mov	x26, x0
   1771c:	mov	w0, #0x30                  	// #48
   17720:	stp	x24, x23, [sp, #32]
   17724:	stp	x22, x21, [sp, #48]
   17728:	stp	x20, x19, [sp, #64]
   1772c:	mov	x29, sp
   17730:	mov	x20, x6
   17734:	mov	x21, x5
   17738:	mov	w24, w4
   1773c:	mov	x22, x3
   17740:	mov	x23, x2
   17744:	mov	x25, x1
   17748:	bl	abc0 <malloc@plt>
   1774c:	mov	x19, x0
   17750:	cbz	x0, 177c0 <gl_rbtree_list_check_invariants@@Base+0x1f8>
   17754:	and	w8, w24, #0x1
   17758:	stp	x26, x25, [x19]
   1775c:	stp	x23, x22, [x19, #16]
   17760:	strb	w8, [x19, #32]
   17764:	cbz	x21, 1778c <gl_rbtree_list_check_invariants@@Base+0x1c4>
   17768:	add	x8, x21, #0x1
   1776c:	cmp	x8, #0x2
   17770:	b.cc	17794 <gl_rbtree_list_check_invariants@@Base+0x1cc>  // b.lo, b.ul, b.last
   17774:	mov	w0, wzr
   17778:	cmp	x8, #0x3
   1777c:	lsr	x8, x8, #1
   17780:	add	w0, w0, #0x1
   17784:	b.hi	17778 <gl_rbtree_list_check_invariants@@Base+0x1b0>  // b.pmore
   17788:	b	17798 <gl_rbtree_list_check_invariants@@Base+0x1d0>
   1778c:	str	xzr, [x19, #40]
   17790:	b	177c0 <gl_rbtree_list_check_invariants@@Base+0x1f8>
   17794:	mov	w0, wzr
   17798:	mov	x1, x21
   1779c:	mov	x2, x20
   177a0:	bl	188a8 <gl_rbtree_list_check_invariants@@Base+0x12e0>
   177a4:	str	x0, [x19, #40]
   177a8:	cbz	x0, 177b4 <gl_rbtree_list_check_invariants@@Base+0x1ec>
   177ac:	str	xzr, [x0, #16]
   177b0:	b	177c0 <gl_rbtree_list_check_invariants@@Base+0x1f8>
   177b4:	mov	x0, x19
   177b8:	bl	b1d0 <free@plt>
   177bc:	mov	x19, xzr
   177c0:	mov	x0, x19
   177c4:	ldp	x20, x19, [sp, #64]
   177c8:	ldp	x22, x21, [sp, #48]
   177cc:	ldp	x24, x23, [sp, #32]
   177d0:	ldp	x26, x25, [sp, #16]
   177d4:	ldp	x29, x30, [sp], #80
   177d8:	ret
   177dc:	ldr	x8, [x0, #40]
   177e0:	cbz	x8, 177ec <gl_rbtree_list_check_invariants@@Base+0x224>
   177e4:	ldr	x0, [x8, #32]
   177e8:	ret
   177ec:	mov	x0, xzr
   177f0:	ret
   177f4:	ldr	x0, [x1, #40]
   177f8:	ret
   177fc:	mov	w0, wzr
   17800:	str	x2, [x1, #40]
   17804:	ret
   17808:	ldr	x8, [x1, #8]
   1780c:	cbz	x8, 17820 <gl_rbtree_list_check_invariants@@Base+0x258>
   17810:	mov	x0, x8
   17814:	ldr	x8, [x8]
   17818:	cbnz	x8, 17810 <gl_rbtree_list_check_invariants@@Base+0x248>
   1781c:	b	17838 <gl_rbtree_list_check_invariants@@Base+0x270>
   17820:	ldr	x0, [x1, #16]
   17824:	cbz	x0, 17838 <gl_rbtree_list_check_invariants@@Base+0x270>
   17828:	ldr	x8, [x0, #8]
   1782c:	cmp	x8, x1
   17830:	mov	x1, x0
   17834:	b.eq	17820 <gl_rbtree_list_check_invariants@@Base+0x258>  // b.none
   17838:	ret
   1783c:	ldr	x8, [x1]
   17840:	cbz	x8, 17854 <gl_rbtree_list_check_invariants@@Base+0x28c>
   17844:	mov	x0, x8
   17848:	ldr	x8, [x8, #8]
   1784c:	cbnz	x8, 17844 <gl_rbtree_list_check_invariants@@Base+0x27c>
   17850:	b	1786c <gl_rbtree_list_check_invariants@@Base+0x2a4>
   17854:	ldr	x0, [x1, #16]
   17858:	cbz	x0, 1786c <gl_rbtree_list_check_invariants@@Base+0x2a4>
   1785c:	ldr	x8, [x0]
   17860:	cmp	x8, x1
   17864:	mov	x1, x0
   17868:	b.eq	17854 <gl_rbtree_list_check_invariants@@Base+0x28c>  // b.none
   1786c:	ret
   17870:	stp	x29, x30, [sp, #-16]!
   17874:	ldr	x0, [x0, #40]
   17878:	mov	x29, sp
   1787c:	cbz	x0, 1789c <gl_rbtree_list_check_invariants@@Base+0x2d4>
   17880:	ldr	x8, [x0, #32]
   17884:	cmp	x8, x1
   17888:	b.ls	1789c <gl_rbtree_list_check_invariants@@Base+0x2d4>  // b.plast
   1788c:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   17890:	ldr	x0, [x0, #40]
   17894:	ldp	x29, x30, [sp], #16
   17898:	ret
   1789c:	bl	b020 <abort@plt>
   178a0:	stp	x29, x30, [sp, #-32]!
   178a4:	ldr	x0, [x0, #40]
   178a8:	str	x19, [sp, #16]
   178ac:	mov	x29, sp
   178b0:	cbz	x0, 178d8 <gl_rbtree_list_check_invariants@@Base+0x310>
   178b4:	ldr	x8, [x0, #32]
   178b8:	cmp	x8, x1
   178bc:	b.ls	178d8 <gl_rbtree_list_check_invariants@@Base+0x310>  // b.plast
   178c0:	mov	x19, x2
   178c4:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   178c8:	str	x19, [x0, #40]
   178cc:	ldr	x19, [sp, #16]
   178d0:	ldp	x29, x30, [sp], #32
   178d4:	ret
   178d8:	bl	b020 <abort@plt>
   178dc:	stp	x29, x30, [sp, #-96]!
   178e0:	stp	x28, x27, [sp, #16]
   178e4:	stp	x26, x25, [sp, #32]
   178e8:	stp	x24, x23, [sp, #48]
   178ec:	stp	x22, x21, [sp, #64]
   178f0:	stp	x20, x19, [sp, #80]
   178f4:	mov	x29, sp
   178f8:	sub	sp, sp, #0x760
   178fc:	cmp	x1, x2
   17900:	b.hi	17a48 <gl_rbtree_list_check_invariants@@Base+0x480>  // b.pmore
   17904:	ldr	x8, [x0, #40]
   17908:	mov	x20, x2
   1790c:	mov	x22, x1
   17910:	cbz	x8, 17a3c <gl_rbtree_list_check_invariants@@Base+0x474>
   17914:	ldr	x9, [x8, #32]
   17918:	cmp	x9, x20
   1791c:	b.cc	17a48 <gl_rbtree_list_check_invariants@@Base+0x480>  // b.lo, b.ul, b.last
   17920:	ldr	x11, [x0, #8]
   17924:	cbz	x22, 17a4c <gl_rbtree_list_check_invariants@@Base+0x484>
   17928:	add	x9, sp, #0x18
   1792c:	mov	x24, xzr
   17930:	mov	x13, xzr
   17934:	add	x12, x9, #0x8
   17938:	sub	x25, x9, #0x8
   1793c:	cbz	x8, 17964 <gl_rbtree_list_check_invariants@@Base+0x39c>
   17940:	add	x9, x12, x24, lsl #4
   17944:	ldr	x10, [x8, #32]
   17948:	cmp	x10, x22
   1794c:	b.ls	17964 <gl_rbtree_list_check_invariants@@Base+0x39c>  // b.plast
   17950:	stp	x8, xzr, [x9, #-8]
   17954:	ldr	x8, [x8]
   17958:	add	x24, x24, #0x1
   1795c:	add	x9, x9, #0x10
   17960:	cbnz	x8, 17944 <gl_rbtree_list_check_invariants@@Base+0x37c>
   17964:	cbz	x24, 17af4 <gl_rbtree_list_check_invariants@@Base+0x52c>
   17968:	add	x19, x25, x24, lsl #4
   1796c:	ldr	x8, [x19]
   17970:	cbz	x8, 17988 <gl_rbtree_list_check_invariants@@Base+0x3c0>
   17974:	sub	x24, x24, #0x1
   17978:	add	x22, x8, x22
   1797c:	sub	x19, x19, #0x10
   17980:	cbnz	x24, 1796c <gl_rbtree_list_check_invariants@@Base+0x3a4>
   17984:	b	17af4 <gl_rbtree_list_check_invariants@@Base+0x52c>
   17988:	ldur	x28, [x19, #-8]
   1798c:	ldr	x8, [x28]
   17990:	cbz	x8, 17998 <gl_rbtree_list_check_invariants@@Base+0x3d0>
   17994:	ldr	x8, [x8, #32]
   17998:	add	x23, x8, #0x1
   1799c:	cmp	x22, x23
   179a0:	b.cs	179e0 <gl_rbtree_list_check_invariants@@Base+0x418>  // b.hs, b.nlast
   179a4:	ldr	x1, [x28, #40]
   179a8:	cbz	x11, 17a18 <gl_rbtree_list_check_invariants@@Base+0x450>
   179ac:	mov	x0, x3
   179b0:	mov	x26, x3
   179b4:	mov	x27, x11
   179b8:	stp	x12, x20, [sp, #8]
   179bc:	mov	x20, x13
   179c0:	blr	x11
   179c4:	mov	x13, x20
   179c8:	ldp	x12, x20, [sp, #8]
   179cc:	mov	x11, x27
   179d0:	mov	x3, x26
   179d4:	mov	x9, x23
   179d8:	tbz	w0, #0, 179e4 <gl_rbtree_list_check_invariants@@Base+0x41c>
   179dc:	b	17a24 <gl_rbtree_list_check_invariants@@Base+0x45c>
   179e0:	mov	x9, x22
   179e4:	add	x13, x13, #0x1
   179e8:	cmp	x13, x20
   179ec:	b.cs	17a04 <gl_rbtree_list_check_invariants@@Base+0x43c>  // b.hs, b.nlast
   179f0:	sub	x22, x9, x23
   179f4:	mov	w8, #0x1                   	// #1
   179f8:	str	x23, [x19]
   179fc:	cbnz	w8, 17a30 <gl_rbtree_list_check_invariants@@Base+0x468>
   17a00:	b	17af8 <gl_rbtree_list_check_invariants@@Base+0x530>
   17a04:	mov	w8, wzr
   17a08:	mov	x21, xzr
   17a0c:	mov	x22, x9
   17a10:	cbnz	w8, 17a30 <gl_rbtree_list_check_invariants@@Base+0x468>
   17a14:	b	17af8 <gl_rbtree_list_check_invariants@@Base+0x530>
   17a18:	cmp	x1, x3
   17a1c:	mov	x9, x23
   17a20:	b.ne	179e4 <gl_rbtree_list_check_invariants@@Base+0x41c>  // b.any
   17a24:	mov	w8, wzr
   17a28:	mov	x21, x28
   17a2c:	cbz	w8, 17af8 <gl_rbtree_list_check_invariants@@Base+0x530>
   17a30:	ldr	x8, [x28, #8]
   17a34:	cbnz	x8, 17940 <gl_rbtree_list_check_invariants@@Base+0x378>
   17a38:	b	17964 <gl_rbtree_list_check_invariants@@Base+0x39c>
   17a3c:	mov	x9, xzr
   17a40:	cmp	x9, x20
   17a44:	b.cs	17920 <gl_rbtree_list_check_invariants@@Base+0x358>  // b.hs, b.nlast
   17a48:	bl	b020 <abort@plt>
   17a4c:	add	x24, sp, #0x18
   17a50:	mov	x26, xzr
   17a54:	add	x25, x24, #0x8
   17a58:	mov	w27, #0x1                   	// #1
   17a5c:	cbz	x8, 17a78 <gl_rbtree_list_check_invariants@@Base+0x4b0>
   17a60:	add	x9, x25, x26, lsl #4
   17a64:	stp	x8, xzr, [x9, #-8]
   17a68:	ldr	x8, [x8]
   17a6c:	add	x26, x26, #0x1
   17a70:	add	x9, x9, #0x10
   17a74:	cbnz	x8, 17a64 <gl_rbtree_list_check_invariants@@Base+0x49c>
   17a78:	add	x9, x26, #0x1
   17a7c:	add	x8, x24, x26, lsl #4
   17a80:	mov	x26, x9
   17a84:	sub	x26, x26, #0x1
   17a88:	cbz	x26, 17af4 <gl_rbtree_list_check_invariants@@Base+0x52c>
   17a8c:	ldur	x9, [x8, #-8]
   17a90:	sub	x19, x8, #0x10
   17a94:	mov	x8, x19
   17a98:	cbnz	x9, 17a84 <gl_rbtree_list_check_invariants@@Base+0x4bc>
   17a9c:	ldr	x21, [x19]
   17aa0:	ldr	x1, [x21, #40]
   17aa4:	cbz	x11, 17ac0 <gl_rbtree_list_check_invariants@@Base+0x4f8>
   17aa8:	mov	x0, x3
   17aac:	mov	x23, x3
   17ab0:	mov	x28, x11
   17ab4:	blr	x11
   17ab8:	tbz	w0, #0, 17ad0 <gl_rbtree_list_check_invariants@@Base+0x508>
   17abc:	b	17af8 <gl_rbtree_list_check_invariants@@Base+0x530>
   17ac0:	mov	x28, x11
   17ac4:	mov	x23, x3
   17ac8:	cmp	x1, x3
   17acc:	b.eq	17af8 <gl_rbtree_list_check_invariants@@Base+0x530>  // b.none
   17ad0:	add	x22, x22, #0x1
   17ad4:	cmp	x22, x20
   17ad8:	b.cs	17af4 <gl_rbtree_list_check_invariants@@Base+0x52c>  // b.hs, b.nlast
   17adc:	str	x27, [x19, #8]
   17ae0:	ldr	x8, [x21, #8]
   17ae4:	mov	x3, x23
   17ae8:	mov	x11, x28
   17aec:	cbnz	x8, 17a60 <gl_rbtree_list_check_invariants@@Base+0x498>
   17af0:	b	17a78 <gl_rbtree_list_check_invariants@@Base+0x4b0>
   17af4:	mov	x21, xzr
   17af8:	mov	x0, x21
   17afc:	add	sp, sp, #0x760
   17b00:	ldp	x20, x19, [sp, #80]
   17b04:	ldp	x22, x21, [sp, #64]
   17b08:	ldp	x24, x23, [sp, #48]
   17b0c:	ldp	x26, x25, [sp, #32]
   17b10:	ldp	x28, x27, [sp, #16]
   17b14:	ldp	x29, x30, [sp], #96
   17b18:	ret
   17b1c:	stp	x29, x30, [sp, #-96]!
   17b20:	stp	x28, x27, [sp, #16]
   17b24:	stp	x26, x25, [sp, #32]
   17b28:	stp	x24, x23, [sp, #48]
   17b2c:	stp	x22, x21, [sp, #64]
   17b30:	stp	x20, x19, [sp, #80]
   17b34:	mov	x29, sp
   17b38:	sub	sp, sp, #0x760
   17b3c:	cmp	x1, x2
   17b40:	b.hi	17c88 <gl_rbtree_list_check_invariants@@Base+0x6c0>  // b.pmore
   17b44:	ldr	x8, [x0, #40]
   17b48:	mov	x20, x2
   17b4c:	mov	x22, x1
   17b50:	cbz	x8, 17c7c <gl_rbtree_list_check_invariants@@Base+0x6b4>
   17b54:	ldr	x9, [x8, #32]
   17b58:	cmp	x9, x20
   17b5c:	b.cc	17c88 <gl_rbtree_list_check_invariants@@Base+0x6c0>  // b.lo, b.ul, b.last
   17b60:	ldr	x11, [x0, #8]
   17b64:	cbz	x22, 17c8c <gl_rbtree_list_check_invariants@@Base+0x6c4>
   17b68:	add	x9, sp, #0x18
   17b6c:	mov	x24, xzr
   17b70:	mov	x13, xzr
   17b74:	add	x12, x9, #0x8
   17b78:	sub	x25, x9, #0x8
   17b7c:	cbz	x8, 17ba4 <gl_rbtree_list_check_invariants@@Base+0x5dc>
   17b80:	add	x9, x12, x24, lsl #4
   17b84:	ldr	x10, [x8, #32]
   17b88:	cmp	x10, x22
   17b8c:	b.ls	17ba4 <gl_rbtree_list_check_invariants@@Base+0x5dc>  // b.plast
   17b90:	stp	x8, xzr, [x9, #-8]
   17b94:	ldr	x8, [x8]
   17b98:	add	x24, x24, #0x1
   17b9c:	add	x9, x9, #0x10
   17ba0:	cbnz	x8, 17b84 <gl_rbtree_list_check_invariants@@Base+0x5bc>
   17ba4:	cbz	x24, 17d38 <gl_rbtree_list_check_invariants@@Base+0x770>
   17ba8:	add	x19, x25, x24, lsl #4
   17bac:	ldr	x8, [x19]
   17bb0:	cbz	x8, 17bc8 <gl_rbtree_list_check_invariants@@Base+0x600>
   17bb4:	sub	x24, x24, #0x1
   17bb8:	add	x22, x8, x22
   17bbc:	sub	x19, x19, #0x10
   17bc0:	cbnz	x24, 17bac <gl_rbtree_list_check_invariants@@Base+0x5e4>
   17bc4:	b	17d38 <gl_rbtree_list_check_invariants@@Base+0x770>
   17bc8:	ldur	x28, [x19, #-8]
   17bcc:	ldr	x8, [x28]
   17bd0:	cbz	x8, 17bd8 <gl_rbtree_list_check_invariants@@Base+0x610>
   17bd4:	ldr	x8, [x8, #32]
   17bd8:	add	x23, x8, #0x1
   17bdc:	cmp	x22, x23
   17be0:	b.cs	17c20 <gl_rbtree_list_check_invariants@@Base+0x658>  // b.hs, b.nlast
   17be4:	ldr	x1, [x28, #40]
   17be8:	cbz	x11, 17c58 <gl_rbtree_list_check_invariants@@Base+0x690>
   17bec:	mov	x0, x3
   17bf0:	mov	x26, x3
   17bf4:	mov	x27, x11
   17bf8:	stp	x12, x20, [sp, #8]
   17bfc:	mov	x20, x13
   17c00:	blr	x11
   17c04:	mov	x13, x20
   17c08:	ldp	x12, x20, [sp, #8]
   17c0c:	mov	x11, x27
   17c10:	mov	x3, x26
   17c14:	mov	x9, x23
   17c18:	tbz	w0, #0, 17c24 <gl_rbtree_list_check_invariants@@Base+0x65c>
   17c1c:	b	17c64 <gl_rbtree_list_check_invariants@@Base+0x69c>
   17c20:	mov	x9, x22
   17c24:	add	x13, x13, #0x1
   17c28:	cmp	x13, x20
   17c2c:	b.cs	17c44 <gl_rbtree_list_check_invariants@@Base+0x67c>  // b.hs, b.nlast
   17c30:	sub	x22, x9, x23
   17c34:	mov	w8, #0x1                   	// #1
   17c38:	str	x23, [x19]
   17c3c:	cbnz	w8, 17c70 <gl_rbtree_list_check_invariants@@Base+0x6a8>
   17c40:	b	17d3c <gl_rbtree_list_check_invariants@@Base+0x774>
   17c44:	mov	w8, wzr
   17c48:	mov	x21, #0xffffffffffffffff    	// #-1
   17c4c:	mov	x22, x9
   17c50:	cbnz	w8, 17c70 <gl_rbtree_list_check_invariants@@Base+0x6a8>
   17c54:	b	17d3c <gl_rbtree_list_check_invariants@@Base+0x774>
   17c58:	cmp	x1, x3
   17c5c:	mov	x9, x23
   17c60:	b.ne	17c24 <gl_rbtree_list_check_invariants@@Base+0x65c>  // b.any
   17c64:	mov	w8, wzr
   17c68:	mov	x21, x13
   17c6c:	cbz	w8, 17d3c <gl_rbtree_list_check_invariants@@Base+0x774>
   17c70:	ldr	x8, [x28, #8]
   17c74:	cbnz	x8, 17b80 <gl_rbtree_list_check_invariants@@Base+0x5b8>
   17c78:	b	17ba4 <gl_rbtree_list_check_invariants@@Base+0x5dc>
   17c7c:	mov	x9, xzr
   17c80:	cmp	x9, x20
   17c84:	b.cs	17b60 <gl_rbtree_list_check_invariants@@Base+0x598>  // b.hs, b.nlast
   17c88:	bl	b020 <abort@plt>
   17c8c:	add	x22, sp, #0x18
   17c90:	mov	x25, xzr
   17c94:	mov	x21, xzr
   17c98:	add	x24, x22, #0x8
   17c9c:	mov	w26, #0x1                   	// #1
   17ca0:	cbz	x8, 17cbc <gl_rbtree_list_check_invariants@@Base+0x6f4>
   17ca4:	add	x9, x24, x25, lsl #4
   17ca8:	stp	x8, xzr, [x9, #-8]
   17cac:	ldr	x8, [x8]
   17cb0:	add	x25, x25, #0x1
   17cb4:	add	x9, x9, #0x10
   17cb8:	cbnz	x8, 17ca8 <gl_rbtree_list_check_invariants@@Base+0x6e0>
   17cbc:	add	x9, x25, #0x1
   17cc0:	add	x8, x22, x25, lsl #4
   17cc4:	mov	x25, x9
   17cc8:	sub	x25, x25, #0x1
   17ccc:	cbz	x25, 17d38 <gl_rbtree_list_check_invariants@@Base+0x770>
   17cd0:	ldur	x9, [x8, #-8]
   17cd4:	sub	x19, x8, #0x10
   17cd8:	mov	x8, x19
   17cdc:	cbnz	x9, 17cc8 <gl_rbtree_list_check_invariants@@Base+0x700>
   17ce0:	ldr	x23, [x19]
   17ce4:	ldr	x1, [x23, #40]
   17ce8:	cbz	x11, 17d04 <gl_rbtree_list_check_invariants@@Base+0x73c>
   17cec:	mov	x0, x3
   17cf0:	mov	x27, x3
   17cf4:	mov	x28, x11
   17cf8:	blr	x11
   17cfc:	tbz	w0, #0, 17d14 <gl_rbtree_list_check_invariants@@Base+0x74c>
   17d00:	b	17d3c <gl_rbtree_list_check_invariants@@Base+0x774>
   17d04:	mov	x28, x11
   17d08:	mov	x27, x3
   17d0c:	cmp	x1, x3
   17d10:	b.eq	17d3c <gl_rbtree_list_check_invariants@@Base+0x774>  // b.none
   17d14:	add	x21, x21, #0x1
   17d18:	cmp	x21, x20
   17d1c:	b.cs	17d38 <gl_rbtree_list_check_invariants@@Base+0x770>  // b.hs, b.nlast
   17d20:	str	x26, [x19, #8]
   17d24:	ldr	x8, [x23, #8]
   17d28:	mov	x3, x27
   17d2c:	mov	x11, x28
   17d30:	cbnz	x8, 17ca4 <gl_rbtree_list_check_invariants@@Base+0x6dc>
   17d34:	b	17cbc <gl_rbtree_list_check_invariants@@Base+0x6f4>
   17d38:	mov	x21, #0xffffffffffffffff    	// #-1
   17d3c:	mov	x0, x21
   17d40:	add	sp, sp, #0x760
   17d44:	ldp	x20, x19, [sp, #80]
   17d48:	ldp	x22, x21, [sp, #64]
   17d4c:	ldp	x24, x23, [sp, #48]
   17d50:	ldp	x26, x25, [sp, #32]
   17d54:	ldp	x28, x27, [sp, #16]
   17d58:	ldp	x29, x30, [sp], #96
   17d5c:	ret
   17d60:	stp	x29, x30, [sp, #-48]!
   17d64:	stp	x20, x19, [sp, #32]
   17d68:	mov	x20, x0
   17d6c:	mov	w0, #0x30                  	// #48
   17d70:	str	x21, [sp, #16]
   17d74:	mov	x29, sp
   17d78:	mov	x21, x1
   17d7c:	bl	abc0 <malloc@plt>
   17d80:	mov	x19, x0
   17d84:	cbz	x0, 17de8 <gl_rbtree_list_check_invariants@@Base+0x820>
   17d88:	mov	w8, #0x1                   	// #1
   17d8c:	stp	xzr, xzr, [x19]
   17d90:	stp	x8, x21, [x19, #32]
   17d94:	ldr	x8, [x20, #40]
   17d98:	cbz	x8, 17ddc <gl_rbtree_list_check_invariants@@Base+0x814>
   17d9c:	mov	x2, x8
   17da0:	ldr	x8, [x8]
   17da4:	cbnz	x8, 17d9c <gl_rbtree_list_check_invariants@@Base+0x7d4>
   17da8:	str	x19, [x2]
   17dac:	str	x2, [x19, #16]
   17db0:	cbz	x2, 17dcc <gl_rbtree_list_check_invariants@@Base+0x804>
   17db4:	mov	x8, x2
   17db8:	ldr	x9, [x8, #32]
   17dbc:	add	x9, x9, #0x1
   17dc0:	str	x9, [x8, #32]
   17dc4:	ldr	x8, [x8, #16]
   17dc8:	cbnz	x8, 17db8 <gl_rbtree_list_check_invariants@@Base+0x7f0>
   17dcc:	mov	x0, x20
   17dd0:	mov	x1, x19
   17dd4:	bl	189f0 <gl_rbtree_list_check_invariants@@Base+0x1428>
   17dd8:	b	17de8 <gl_rbtree_list_check_invariants@@Base+0x820>
   17ddc:	str	wzr, [x19, #24]
   17de0:	str	x19, [x20, #40]
   17de4:	str	xzr, [x19, #16]
   17de8:	mov	x0, x19
   17dec:	ldp	x20, x19, [sp, #32]
   17df0:	ldr	x21, [sp, #16]
   17df4:	ldp	x29, x30, [sp], #48
   17df8:	ret
   17dfc:	stp	x29, x30, [sp, #-48]!
   17e00:	stp	x20, x19, [sp, #32]
   17e04:	mov	x20, x0
   17e08:	mov	w0, #0x30                  	// #48
   17e0c:	str	x21, [sp, #16]
   17e10:	mov	x29, sp
   17e14:	mov	x21, x1
   17e18:	bl	abc0 <malloc@plt>
   17e1c:	mov	x19, x0
   17e20:	cbz	x0, 17e84 <gl_rbtree_list_check_invariants@@Base+0x8bc>
   17e24:	mov	w8, #0x1                   	// #1
   17e28:	stp	xzr, xzr, [x19]
   17e2c:	stp	x8, x21, [x19, #32]
   17e30:	ldr	x8, [x20, #40]
   17e34:	cbz	x8, 17e78 <gl_rbtree_list_check_invariants@@Base+0x8b0>
   17e38:	mov	x2, x8
   17e3c:	ldr	x8, [x8, #8]
   17e40:	cbnz	x8, 17e38 <gl_rbtree_list_check_invariants@@Base+0x870>
   17e44:	str	x19, [x2, #8]
   17e48:	str	x2, [x19, #16]
   17e4c:	cbz	x2, 17e68 <gl_rbtree_list_check_invariants@@Base+0x8a0>
   17e50:	mov	x8, x2
   17e54:	ldr	x9, [x8, #32]
   17e58:	add	x9, x9, #0x1
   17e5c:	str	x9, [x8, #32]
   17e60:	ldr	x8, [x8, #16]
   17e64:	cbnz	x8, 17e54 <gl_rbtree_list_check_invariants@@Base+0x88c>
   17e68:	mov	x0, x20
   17e6c:	mov	x1, x19
   17e70:	bl	189f0 <gl_rbtree_list_check_invariants@@Base+0x1428>
   17e74:	b	17e84 <gl_rbtree_list_check_invariants@@Base+0x8bc>
   17e78:	str	wzr, [x19, #24]
   17e7c:	str	x19, [x20, #40]
   17e80:	str	xzr, [x19, #16]
   17e84:	mov	x0, x19
   17e88:	ldp	x20, x19, [sp, #32]
   17e8c:	ldr	x21, [sp, #16]
   17e90:	ldp	x29, x30, [sp], #48
   17e94:	ret
   17e98:	stp	x29, x30, [sp, #-48]!
   17e9c:	stp	x20, x19, [sp, #32]
   17ea0:	mov	x20, x0
   17ea4:	mov	w0, #0x30                  	// #48
   17ea8:	stp	x22, x21, [sp, #16]
   17eac:	mov	x29, sp
   17eb0:	mov	x22, x2
   17eb4:	mov	x21, x1
   17eb8:	bl	abc0 <malloc@plt>
   17ebc:	mov	x19, x0
   17ec0:	cbz	x0, 17f24 <gl_rbtree_list_check_invariants@@Base+0x95c>
   17ec4:	mov	w8, #0x1                   	// #1
   17ec8:	stp	xzr, xzr, [x19]
   17ecc:	stp	x8, x22, [x19, #32]
   17ed0:	ldr	x8, [x21]
   17ed4:	cbz	x8, 17eec <gl_rbtree_list_check_invariants@@Base+0x924>
   17ed8:	mov	x21, x8
   17edc:	ldr	x8, [x8, #8]
   17ee0:	cbnz	x8, 17ed8 <gl_rbtree_list_check_invariants@@Base+0x910>
   17ee4:	add	x8, x21, #0x8
   17ee8:	b	17ef0 <gl_rbtree_list_check_invariants@@Base+0x928>
   17eec:	mov	x8, x21
   17ef0:	str	x19, [x8]
   17ef4:	str	x21, [x19, #16]
   17ef8:	cbz	x21, 17f14 <gl_rbtree_list_check_invariants@@Base+0x94c>
   17efc:	mov	x8, x21
   17f00:	ldr	x9, [x8, #32]
   17f04:	add	x9, x9, #0x1
   17f08:	str	x9, [x8, #32]
   17f0c:	ldr	x8, [x8, #16]
   17f10:	cbnz	x8, 17f00 <gl_rbtree_list_check_invariants@@Base+0x938>
   17f14:	mov	x0, x20
   17f18:	mov	x1, x19
   17f1c:	mov	x2, x21
   17f20:	bl	189f0 <gl_rbtree_list_check_invariants@@Base+0x1428>
   17f24:	mov	x0, x19
   17f28:	ldp	x20, x19, [sp, #32]
   17f2c:	ldp	x22, x21, [sp, #16]
   17f30:	ldp	x29, x30, [sp], #48
   17f34:	ret
   17f38:	stp	x29, x30, [sp, #-48]!
   17f3c:	stp	x20, x19, [sp, #32]
   17f40:	mov	x20, x0
   17f44:	mov	w0, #0x30                  	// #48
   17f48:	stp	x22, x21, [sp, #16]
   17f4c:	mov	x29, sp
   17f50:	mov	x22, x2
   17f54:	mov	x21, x1
   17f58:	bl	abc0 <malloc@plt>
   17f5c:	mov	x19, x0
   17f60:	cbz	x0, 17fc0 <gl_rbtree_list_check_invariants@@Base+0x9f8>
   17f64:	mov	w8, #0x1                   	// #1
   17f68:	stp	xzr, xzr, [x19]
   17f6c:	stp	x8, x22, [x19, #32]
   17f70:	mov	x8, x21
   17f74:	ldr	x9, [x8, #8]!
   17f78:	cbz	x9, 17f8c <gl_rbtree_list_check_invariants@@Base+0x9c4>
   17f7c:	mov	x21, x9
   17f80:	ldr	x9, [x9]
   17f84:	cbnz	x9, 17f7c <gl_rbtree_list_check_invariants@@Base+0x9b4>
   17f88:	mov	x8, x21
   17f8c:	str	x19, [x8]
   17f90:	str	x21, [x19, #16]
   17f94:	cbz	x21, 17fb0 <gl_rbtree_list_check_invariants@@Base+0x9e8>
   17f98:	mov	x8, x21
   17f9c:	ldr	x9, [x8, #32]
   17fa0:	add	x9, x9, #0x1
   17fa4:	str	x9, [x8, #32]
   17fa8:	ldr	x8, [x8, #16]
   17fac:	cbnz	x8, 17f9c <gl_rbtree_list_check_invariants@@Base+0x9d4>
   17fb0:	mov	x0, x20
   17fb4:	mov	x1, x19
   17fb8:	mov	x2, x21
   17fbc:	bl	189f0 <gl_rbtree_list_check_invariants@@Base+0x1428>
   17fc0:	mov	x0, x19
   17fc4:	ldp	x20, x19, [sp, #32]
   17fc8:	ldp	x22, x21, [sp, #16]
   17fcc:	ldp	x29, x30, [sp], #48
   17fd0:	ret
   17fd4:	stp	x29, x30, [sp, #-32]!
   17fd8:	stp	x20, x19, [sp, #16]
   17fdc:	mov	x20, x0
   17fe0:	ldr	x0, [x0, #40]
   17fe4:	mov	x19, x2
   17fe8:	mov	x29, sp
   17fec:	cbz	x0, 18030 <gl_rbtree_list_check_invariants@@Base+0xa68>
   17ff0:	ldr	x8, [x0, #32]
   17ff4:	cmp	x8, x1
   17ff8:	b.cc	1803c <gl_rbtree_list_check_invariants@@Base+0xa74>  // b.lo, b.ul, b.last
   17ffc:	b.ne	18010 <gl_rbtree_list_check_invariants@@Base+0xa48>  // b.any
   18000:	mov	x0, x20
   18004:	mov	x1, x19
   18008:	bl	17dfc <gl_rbtree_list_check_invariants@@Base+0x834>
   1800c:	b	18024 <gl_rbtree_list_check_invariants@@Base+0xa5c>
   18010:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   18014:	mov	x1, x0
   18018:	mov	x0, x20
   1801c:	mov	x2, x19
   18020:	bl	17e98 <gl_rbtree_list_check_invariants@@Base+0x8d0>
   18024:	ldp	x20, x19, [sp, #16]
   18028:	ldp	x29, x30, [sp], #32
   1802c:	ret
   18030:	mov	x8, xzr
   18034:	cmp	x8, x1
   18038:	b.cs	17ffc <gl_rbtree_list_check_invariants@@Base+0xa34>  // b.hs, b.nlast
   1803c:	bl	b020 <abort@plt>
   18040:	stp	x29, x30, [sp, #-32]!
   18044:	stp	x20, x19, [sp, #16]
   18048:	mov	x29, sp
   1804c:	mov	x19, x1
   18050:	mov	x20, x0
   18054:	bl	18c28 <gl_rbtree_list_check_invariants@@Base+0x1660>
   18058:	ldr	x8, [x20, #24]
   1805c:	cbz	x8, 18068 <gl_rbtree_list_check_invariants@@Base+0xaa0>
   18060:	ldr	x0, [x19, #40]
   18064:	blr	x8
   18068:	mov	x0, x19
   1806c:	bl	b1d0 <free@plt>
   18070:	ldp	x20, x19, [sp, #16]
   18074:	mov	w0, #0x1                   	// #1
   18078:	ldp	x29, x30, [sp], #32
   1807c:	ret
   18080:	stp	x29, x30, [sp, #-32]!
   18084:	str	x19, [sp, #16]
   18088:	mov	x19, x0
   1808c:	ldr	x0, [x0, #40]
   18090:	mov	x29, sp
   18094:	cbz	x0, 180c4 <gl_rbtree_list_check_invariants@@Base+0xafc>
   18098:	ldr	x8, [x0, #32]
   1809c:	cmp	x8, x1
   180a0:	b.ls	180c4 <gl_rbtree_list_check_invariants@@Base+0xafc>  // b.plast
   180a4:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   180a8:	mov	x1, x0
   180ac:	mov	x0, x19
   180b0:	bl	18040 <gl_rbtree_list_check_invariants@@Base+0xa78>
   180b4:	ldr	x19, [sp, #16]
   180b8:	mov	w0, #0x1                   	// #1
   180bc:	ldp	x29, x30, [sp], #32
   180c0:	ret
   180c4:	bl	b020 <abort@plt>
   180c8:	stp	x29, x30, [sp, #-32]!
   180cc:	ldr	x8, [x0, #40]
   180d0:	str	x19, [sp, #16]
   180d4:	mov	x29, sp
   180d8:	cbz	x8, 18108 <gl_rbtree_list_check_invariants@@Base+0xb40>
   180dc:	ldr	x2, [x8, #32]
   180e0:	mov	x3, x1
   180e4:	mov	x1, xzr
   180e8:	mov	x19, x0
   180ec:	bl	178dc <gl_rbtree_list_check_invariants@@Base+0x314>
   180f0:	cbz	x0, 1810c <gl_rbtree_list_check_invariants@@Base+0xb44>
   180f4:	mov	x1, x0
   180f8:	mov	x0, x19
   180fc:	bl	18040 <gl_rbtree_list_check_invariants@@Base+0xa78>
   18100:	mov	w0, #0x1                   	// #1
   18104:	b	1810c <gl_rbtree_list_check_invariants@@Base+0xb44>
   18108:	mov	w0, wzr
   1810c:	ldr	x19, [sp, #16]
   18110:	ldp	x29, x30, [sp], #32
   18114:	ret
   18118:	stp	x29, x30, [sp, #-80]!
   1811c:	stp	x28, x25, [sp, #16]
   18120:	stp	x24, x23, [sp, #32]
   18124:	stp	x22, x21, [sp, #48]
   18128:	stp	x20, x19, [sp, #64]
   1812c:	mov	x29, sp
   18130:	sub	sp, sp, #0x740
   18134:	ldr	x8, [x0, #40]
   18138:	mov	x9, sp
   1813c:	mov	x19, x0
   18140:	mov	x21, xzr
   18144:	add	x22, x9, #0x8
   18148:	sub	x23, x9, #0x8
   1814c:	mov	w24, #0x1                   	// #1
   18150:	cbz	x8, 1816c <gl_rbtree_list_check_invariants@@Base+0xba4>
   18154:	add	x9, x22, x21, lsl #4
   18158:	stp	x8, xzr, [x9, #-8]
   1815c:	ldr	x8, [x8]
   18160:	add	x21, x21, #0x1
   18164:	add	x9, x9, #0x10
   18168:	cbnz	x8, 18158 <gl_rbtree_list_check_invariants@@Base+0xb90>
   1816c:	cbz	x21, 181b8 <gl_rbtree_list_check_invariants@@Base+0xbf0>
   18170:	add	x25, x23, x21, lsl #4
   18174:	b	18188 <gl_rbtree_list_check_invariants@@Base+0xbc0>
   18178:	mov	x0, x20
   1817c:	bl	b1d0 <free@plt>
   18180:	sub	x25, x25, #0x10
   18184:	cbz	x21, 181b8 <gl_rbtree_list_check_invariants@@Base+0xbf0>
   18188:	ldp	x20, x8, [x25, #-8]
   1818c:	cbz	x8, 181a8 <gl_rbtree_list_check_invariants@@Base+0xbe0>
   18190:	ldr	x8, [x19, #24]
   18194:	sub	x21, x21, #0x1
   18198:	cbz	x8, 18178 <gl_rbtree_list_check_invariants@@Base+0xbb0>
   1819c:	ldr	x0, [x20, #40]
   181a0:	blr	x8
   181a4:	b	18178 <gl_rbtree_list_check_invariants@@Base+0xbb0>
   181a8:	str	x24, [x25]
   181ac:	ldr	x8, [x20, #8]
   181b0:	cbnz	x8, 18154 <gl_rbtree_list_check_invariants@@Base+0xb8c>
   181b4:	b	1816c <gl_rbtree_list_check_invariants@@Base+0xba4>
   181b8:	mov	x0, x19
   181bc:	bl	b1d0 <free@plt>
   181c0:	add	sp, sp, #0x740
   181c4:	ldp	x20, x19, [sp, #64]
   181c8:	ldp	x22, x21, [sp, #48]
   181cc:	ldp	x24, x23, [sp, #32]
   181d0:	ldp	x28, x25, [sp, #16]
   181d4:	ldp	x29, x30, [sp], #80
   181d8:	ret
   181dc:	ldr	x9, [x0]
   181e0:	stp	x9, x0, [x8]
   181e4:	ldr	x9, [x0, #40]
   181e8:	cbz	x9, 18200 <gl_rbtree_list_check_invariants@@Base+0xc38>
   181ec:	mov	x10, x9
   181f0:	ldr	x9, [x9]
   181f4:	cbnz	x9, 181ec <gl_rbtree_list_check_invariants@@Base+0xc24>
   181f8:	stp	x10, xzr, [x8, #24]
   181fc:	ret
   18200:	mov	x10, xzr
   18204:	stp	x10, xzr, [x8, #24]
   18208:	ret
   1820c:	stp	x29, x30, [sp, #-48]!
   18210:	stp	x22, x21, [sp, #16]
   18214:	stp	x20, x19, [sp, #32]
   18218:	ldr	x21, [x0, #40]
   1821c:	mov	x20, x2
   18220:	mov	x19, x8
   18224:	mov	x29, sp
   18228:	cbz	x21, 1823c <gl_rbtree_list_check_invariants@@Base+0xc74>
   1822c:	ldr	x22, [x21, #32]
   18230:	cmp	x1, x20
   18234:	b.ls	18248 <gl_rbtree_list_check_invariants@@Base+0xc80>  // b.plast
   18238:	b	182a4 <gl_rbtree_list_check_invariants@@Base+0xcdc>
   1823c:	mov	x22, xzr
   18240:	cmp	x1, x20
   18244:	b.hi	182a4 <gl_rbtree_list_check_invariants@@Base+0xcdc>  // b.pmore
   18248:	cmp	x22, x20
   1824c:	b.cc	182a4 <gl_rbtree_list_check_invariants@@Base+0xcdc>  // b.lo, b.ul, b.last
   18250:	ldr	x8, [x0]
   18254:	cmp	x22, x1
   18258:	stp	x8, x0, [x19]
   1825c:	b.ls	1826c <gl_rbtree_list_check_invariants@@Base+0xca4>  // b.plast
   18260:	mov	x0, x21
   18264:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   18268:	b	18270 <gl_rbtree_list_check_invariants@@Base+0xca8>
   1826c:	mov	x0, xzr
   18270:	cmp	x22, x20
   18274:	str	x0, [x19, #24]
   18278:	b.ls	1828c <gl_rbtree_list_check_invariants@@Base+0xcc4>  // b.plast
   1827c:	mov	x0, x21
   18280:	mov	x1, x20
   18284:	bl	189bc <gl_rbtree_list_check_invariants@@Base+0x13f4>
   18288:	b	18290 <gl_rbtree_list_check_invariants@@Base+0xcc8>
   1828c:	mov	x0, xzr
   18290:	str	x0, [x19, #32]
   18294:	ldp	x20, x19, [sp, #32]
   18298:	ldp	x22, x21, [sp, #16]
   1829c:	ldp	x29, x30, [sp], #48
   182a0:	ret
   182a4:	bl	b020 <abort@plt>
   182a8:	ldp	x8, x9, [x0, #24]
   182ac:	cmp	x8, x9
   182b0:	b.eq	18300 <gl_rbtree_list_check_invariants@@Base+0xd38>  // b.none
   182b4:	ldr	x9, [x8, #40]
   182b8:	str	x9, [x1]
   182bc:	cbz	x2, 182c4 <gl_rbtree_list_check_invariants@@Base+0xcfc>
   182c0:	str	x8, [x2]
   182c4:	ldr	x10, [x8, #8]
   182c8:	cbz	x10, 182dc <gl_rbtree_list_check_invariants@@Base+0xd14>
   182cc:	mov	x9, x10
   182d0:	ldr	x10, [x10]
   182d4:	cbnz	x10, 182cc <gl_rbtree_list_check_invariants@@Base+0xd04>
   182d8:	b	182f4 <gl_rbtree_list_check_invariants@@Base+0xd2c>
   182dc:	ldr	x9, [x8, #16]
   182e0:	cbz	x9, 182f4 <gl_rbtree_list_check_invariants@@Base+0xd2c>
   182e4:	ldr	x10, [x9, #8]
   182e8:	cmp	x10, x8
   182ec:	mov	x8, x9
   182f0:	b.eq	182dc <gl_rbtree_list_check_invariants@@Base+0xd14>  // b.none
   182f4:	str	x9, [x0, #24]
   182f8:	mov	w0, #0x1                   	// #1
   182fc:	ret
   18300:	mov	w0, wzr
   18304:	ret
   18308:	ret
   1830c:	stp	x29, x30, [sp, #-48]!
   18310:	stp	x22, x21, [sp, #16]
   18314:	stp	x20, x19, [sp, #32]
   18318:	ldr	x22, [x0, #40]
   1831c:	mov	x19, x2
   18320:	mov	x20, x1
   18324:	mov	x29, sp
   18328:	b	18340 <gl_rbtree_list_check_invariants@@Base+0xd78>
   1832c:	add	x22, x22, #0x8
   18330:	ldr	x9, [x22]
   18334:	mov	w8, #0x1                   	// #1
   18338:	mov	x22, x9
   1833c:	tbz	w8, #0, 183a4 <gl_rbtree_list_check_invariants@@Base+0xddc>
   18340:	cbz	x22, 183a0 <gl_rbtree_list_check_invariants@@Base+0xdd8>
   18344:	ldr	x0, [x22, #40]
   18348:	mov	x1, x19
   1834c:	blr	x20
   18350:	tbnz	w0, #31, 1832c <gl_rbtree_list_check_invariants@@Base+0xd64>
   18354:	cbnz	w0, 18330 <gl_rbtree_list_check_invariants@@Base+0xd68>
   18358:	ldr	x21, [x22]
   1835c:	cbnz	x21, 18384 <gl_rbtree_list_check_invariants@@Base+0xdbc>
   18360:	mov	x9, xzr
   18364:	mov	w8, wzr
   18368:	mov	x21, x22
   1836c:	mov	x22, x9
   18370:	tbnz	w8, #0, 18340 <gl_rbtree_list_check_invariants@@Base+0xd78>
   18374:	b	183a4 <gl_rbtree_list_check_invariants@@Base+0xddc>
   18378:	add	x21, x21, #0x8
   1837c:	ldr	x21, [x21]
   18380:	cbz	x21, 18360 <gl_rbtree_list_check_invariants@@Base+0xd98>
   18384:	ldr	x0, [x21, #40]
   18388:	mov	x1, x19
   1838c:	blr	x20
   18390:	tbnz	w0, #31, 18378 <gl_rbtree_list_check_invariants@@Base+0xdb0>
   18394:	cbnz	w0, 183b8 <gl_rbtree_list_check_invariants@@Base+0xdf0>
   18398:	mov	x22, x21
   1839c:	b	1837c <gl_rbtree_list_check_invariants@@Base+0xdb4>
   183a0:	mov	x21, xzr
   183a4:	mov	x0, x21
   183a8:	ldp	x20, x19, [sp, #32]
   183ac:	ldp	x22, x21, [sp, #16]
   183b0:	ldp	x29, x30, [sp], #48
   183b4:	ret
   183b8:	bl	b020 <abort@plt>
   183bc:	stp	x29, x30, [sp, #-80]!
   183c0:	cmp	x2, x3
   183c4:	str	x25, [sp, #16]
   183c8:	stp	x24, x23, [sp, #32]
   183cc:	stp	x22, x21, [sp, #48]
   183d0:	stp	x20, x19, [sp, #64]
   183d4:	mov	x29, sp
   183d8:	b.hi	1851c <gl_rbtree_list_check_invariants@@Base+0xf54>  // b.pmore
   183dc:	ldr	x24, [x0, #40]
   183e0:	mov	x19, x4
   183e4:	mov	x20, x3
   183e8:	mov	x22, x2
   183ec:	mov	x21, x1
   183f0:	cbz	x24, 18404 <gl_rbtree_list_check_invariants@@Base+0xe3c>
   183f4:	ldr	x8, [x24, #32]
   183f8:	cmp	x8, x20
   183fc:	b.cs	18410 <gl_rbtree_list_check_invariants@@Base+0xe48>  // b.hs, b.nlast
   18400:	b	1851c <gl_rbtree_list_check_invariants@@Base+0xf54>
   18404:	mov	x8, xzr
   18408:	cmp	x8, x20
   1840c:	b.cc	1851c <gl_rbtree_list_check_invariants@@Base+0xf54>  // b.lo, b.ul, b.last
   18410:	b	18430 <gl_rbtree_list_check_invariants@@Base+0xe68>
   18414:	ldr	x8, [x24, #8]
   18418:	add	x9, x25, #0x1
   1841c:	sub	x22, x22, x9
   18420:	sub	x20, x20, x9
   18424:	mov	w9, wzr
   18428:	mov	x24, x8
   1842c:	cbnz	w9, 18500 <gl_rbtree_list_check_invariants@@Base+0xf38>
   18430:	cbz	x24, 184fc <gl_rbtree_list_check_invariants@@Base+0xf34>
   18434:	ldr	x8, [x24]
   18438:	cbz	x8, 1844c <gl_rbtree_list_check_invariants@@Base+0xe84>
   1843c:	ldr	x25, [x8, #32]
   18440:	cmp	x22, x25
   18444:	b.hi	18414 <gl_rbtree_list_check_invariants@@Base+0xe4c>  // b.pmore
   18448:	b	18458 <gl_rbtree_list_check_invariants@@Base+0xe90>
   1844c:	mov	x25, xzr
   18450:	cmp	x22, x25
   18454:	b.hi	18414 <gl_rbtree_list_check_invariants@@Base+0xe4c>  // b.pmore
   18458:	cmp	x20, x25
   1845c:	b.ls	18424 <gl_rbtree_list_check_invariants@@Base+0xe5c>  // b.plast
   18460:	ldr	x0, [x24, #40]
   18464:	mov	x1, x19
   18468:	blr	x21
   1846c:	tbnz	w0, #31, 184dc <gl_rbtree_list_check_invariants@@Base+0xf14>
   18470:	cbnz	w0, 184ec <gl_rbtree_list_check_invariants@@Base+0xf24>
   18474:	ldr	x23, [x24]
   18478:	cbnz	x23, 184a4 <gl_rbtree_list_check_invariants@@Base+0xedc>
   1847c:	mov	x8, xzr
   18480:	mov	w9, #0x1                   	// #1
   18484:	mov	x23, x24
   18488:	cbnz	w9, 18428 <gl_rbtree_list_check_invariants@@Base+0xe60>
   1848c:	b	18424 <gl_rbtree_list_check_invariants@@Base+0xe5c>
   18490:	mvn	x8, x8
   18494:	add	x22, x22, x8
   18498:	add	x23, x23, #0x8
   1849c:	ldr	x23, [x23]
   184a0:	cbz	x23, 1847c <gl_rbtree_list_check_invariants@@Base+0xeb4>
   184a4:	ldr	x8, [x23]
   184a8:	cbz	x8, 184b0 <gl_rbtree_list_check_invariants@@Base+0xee8>
   184ac:	ldr	x8, [x8, #32]
   184b0:	cmp	x22, x8
   184b4:	b.hi	18490 <gl_rbtree_list_check_invariants@@Base+0xec8>  // b.pmore
   184b8:	ldr	x0, [x23, #40]
   184bc:	mov	x1, x19
   184c0:	blr	x21
   184c4:	tbnz	w0, #31, 184d4 <gl_rbtree_list_check_invariants@@Base+0xf0c>
   184c8:	mov	x24, x23
   184cc:	cbz	w0, 1849c <gl_rbtree_list_check_invariants@@Base+0xed4>
   184d0:	b	1851c <gl_rbtree_list_check_invariants@@Base+0xf54>
   184d4:	mov	x22, xzr
   184d8:	b	18498 <gl_rbtree_list_check_invariants@@Base+0xed0>
   184dc:	mvn	x8, x25
   184e0:	mov	x22, xzr
   184e4:	add	x20, x20, x8
   184e8:	add	x24, x24, #0x8
   184ec:	ldr	x8, [x24]
   184f0:	mov	w9, wzr
   184f4:	cbnz	w9, 18428 <gl_rbtree_list_check_invariants@@Base+0xe60>
   184f8:	b	18424 <gl_rbtree_list_check_invariants@@Base+0xe5c>
   184fc:	mov	x23, xzr
   18500:	mov	x0, x23
   18504:	ldp	x20, x19, [sp, #64]
   18508:	ldp	x22, x21, [sp, #48]
   1850c:	ldp	x24, x23, [sp, #32]
   18510:	ldr	x25, [sp, #16]
   18514:	ldp	x29, x30, [sp], #80
   18518:	ret
   1851c:	bl	b020 <abort@plt>
   18520:	stp	x29, x30, [sp, #-64]!
   18524:	stp	x22, x21, [sp, #32]
   18528:	stp	x20, x19, [sp, #48]
   1852c:	str	x23, [sp, #16]
   18530:	ldr	x23, [x0, #40]
   18534:	mov	x19, x2
   18538:	mov	x20, x1
   1853c:	mov	x22, xzr
   18540:	mov	x29, sp
   18544:	b	1855c <gl_rbtree_list_check_invariants@@Base+0xf94>
   18548:	add	x22, x22, #0x1
   1854c:	add	x23, x23, #0x8
   18550:	ldr	x23, [x23]
   18554:	mov	w8, #0x1                   	// #1
   18558:	tbz	w8, #0, 18604 <gl_rbtree_list_check_invariants@@Base+0x103c>
   1855c:	cbz	x23, 18600 <gl_rbtree_list_check_invariants@@Base+0x1038>
   18560:	ldr	x0, [x23, #40]
   18564:	mov	x1, x19
   18568:	blr	x20
   1856c:	tbnz	w0, #31, 185ec <gl_rbtree_list_check_invariants@@Base+0x1024>
   18570:	cbnz	w0, 18550 <gl_rbtree_list_check_invariants@@Base+0xf88>
   18574:	ldr	x8, [x23]
   18578:	cbz	x8, 18580 <gl_rbtree_list_check_invariants@@Base+0xfb8>
   1857c:	ldr	x8, [x8, #32]
   18580:	ldr	x23, [x23]
   18584:	add	x21, x8, x22
   18588:	cbnz	x23, 1859c <gl_rbtree_list_check_invariants@@Base+0xfd4>
   1858c:	b	185e0 <gl_rbtree_list_check_invariants@@Base+0x1018>
   18590:	add	x21, x8, x22
   18594:	ldr	x23, [x23]
   18598:	cbz	x23, 185e0 <gl_rbtree_list_check_invariants@@Base+0x1018>
   1859c:	ldr	x0, [x23, #40]
   185a0:	mov	x1, x19
   185a4:	blr	x20
   185a8:	tbnz	w0, #31, 185c0 <gl_rbtree_list_check_invariants@@Base+0xff8>
   185ac:	cbnz	w0, 1861c <gl_rbtree_list_check_invariants@@Base+0x1054>
   185b0:	ldr	x8, [x23]
   185b4:	cbz	x8, 18590 <gl_rbtree_list_check_invariants@@Base+0xfc8>
   185b8:	ldr	x8, [x8, #32]
   185bc:	b	18590 <gl_rbtree_list_check_invariants@@Base+0xfc8>
   185c0:	ldr	x8, [x23]
   185c4:	cbz	x8, 185d0 <gl_rbtree_list_check_invariants@@Base+0x1008>
   185c8:	ldr	x8, [x8, #32]
   185cc:	add	x22, x8, x22
   185d0:	add	x22, x22, #0x1
   185d4:	add	x23, x23, #0x8
   185d8:	ldr	x23, [x23]
   185dc:	cbnz	x23, 1859c <gl_rbtree_list_check_invariants@@Base+0xfd4>
   185e0:	mov	w8, wzr
   185e4:	tbnz	w8, #0, 1855c <gl_rbtree_list_check_invariants@@Base+0xf94>
   185e8:	b	18604 <gl_rbtree_list_check_invariants@@Base+0x103c>
   185ec:	ldr	x8, [x23]
   185f0:	cbz	x8, 18548 <gl_rbtree_list_check_invariants@@Base+0xf80>
   185f4:	ldr	x8, [x8, #32]
   185f8:	add	x22, x8, x22
   185fc:	b	18548 <gl_rbtree_list_check_invariants@@Base+0xf80>
   18600:	mov	x21, #0xffffffffffffffff    	// #-1
   18604:	mov	x0, x21
   18608:	ldp	x20, x19, [sp, #48]
   1860c:	ldp	x22, x21, [sp, #32]
   18610:	ldr	x23, [sp, #16]
   18614:	ldp	x29, x30, [sp], #64
   18618:	ret
   1861c:	bl	b020 <abort@plt>
   18620:	stp	x29, x30, [sp, #-80]!
   18624:	cmp	x2, x3
   18628:	stp	x26, x25, [sp, #16]
   1862c:	stp	x24, x23, [sp, #32]
   18630:	stp	x22, x21, [sp, #48]
   18634:	stp	x20, x19, [sp, #64]
   18638:	mov	x29, sp
   1863c:	b.hi	187b4 <gl_rbtree_list_check_invariants@@Base+0x11ec>  // b.pmore
   18640:	ldr	x25, [x0, #40]
   18644:	mov	x19, x4
   18648:	mov	x20, x3
   1864c:	mov	x21, x2
   18650:	mov	x22, x1
   18654:	cbz	x25, 18668 <gl_rbtree_list_check_invariants@@Base+0x10a0>
   18658:	ldr	x8, [x25, #32]
   1865c:	cmp	x8, x20
   18660:	b.cs	18674 <gl_rbtree_list_check_invariants@@Base+0x10ac>  // b.hs, b.nlast
   18664:	b	187b4 <gl_rbtree_list_check_invariants@@Base+0x11ec>
   18668:	mov	x8, xzr
   1866c:	cmp	x8, x20
   18670:	b.cc	187b4 <gl_rbtree_list_check_invariants@@Base+0x11ec>  // b.lo, b.ul, b.last
   18674:	mov	x24, xzr
   18678:	b	1869c <gl_rbtree_list_check_invariants@@Base+0x10d4>
   1867c:	ldr	x8, [x25, #8]
   18680:	add	x9, x26, #0x1
   18684:	sub	x21, x21, x9
   18688:	sub	x20, x20, x9
   1868c:	add	x24, x9, x24
   18690:	mov	w9, wzr
   18694:	mov	x25, x8
   18698:	cbnz	w9, 18798 <gl_rbtree_list_check_invariants@@Base+0x11d0>
   1869c:	cbz	x25, 18794 <gl_rbtree_list_check_invariants@@Base+0x11cc>
   186a0:	ldr	x8, [x25]
   186a4:	cbz	x8, 186b8 <gl_rbtree_list_check_invariants@@Base+0x10f0>
   186a8:	ldr	x26, [x8, #32]
   186ac:	cmp	x21, x26
   186b0:	b.hi	1867c <gl_rbtree_list_check_invariants@@Base+0x10b4>  // b.pmore
   186b4:	b	186c4 <gl_rbtree_list_check_invariants@@Base+0x10fc>
   186b8:	mov	x26, xzr
   186bc:	cmp	x21, x26
   186c0:	b.hi	1867c <gl_rbtree_list_check_invariants@@Base+0x10b4>  // b.pmore
   186c4:	cmp	x20, x26
   186c8:	b.ls	18690 <gl_rbtree_list_check_invariants@@Base+0x10c8>  // b.plast
   186cc:	ldr	x0, [x25, #40]
   186d0:	mov	x1, x19
   186d4:	blr	x22
   186d8:	tbnz	w0, #31, 18770 <gl_rbtree_list_check_invariants@@Base+0x11a8>
   186dc:	cbnz	w0, 18784 <gl_rbtree_list_check_invariants@@Base+0x11bc>
   186e0:	ldr	x8, [x25]
   186e4:	cbz	x8, 186ec <gl_rbtree_list_check_invariants@@Base+0x1124>
   186e8:	ldr	x8, [x8, #32]
   186ec:	ldr	x25, [x25]
   186f0:	add	x23, x8, x24
   186f4:	cbnz	x25, 1871c <gl_rbtree_list_check_invariants@@Base+0x1154>
   186f8:	mov	x8, xzr
   186fc:	mov	w9, #0x1                   	// #1
   18700:	cbnz	w9, 18694 <gl_rbtree_list_check_invariants@@Base+0x10cc>
   18704:	b	18690 <gl_rbtree_list_check_invariants@@Base+0x10c8>
   18708:	mvn	x8, x26
   1870c:	add	x21, x21, x8
   18710:	add	x25, x25, #0x8
   18714:	ldr	x25, [x25]
   18718:	cbz	x25, 186f8 <gl_rbtree_list_check_invariants@@Base+0x1130>
   1871c:	ldr	x8, [x25]
   18720:	cbz	x8, 18734 <gl_rbtree_list_check_invariants@@Base+0x116c>
   18724:	ldr	x26, [x8, #32]
   18728:	cmp	x21, x26
   1872c:	b.hi	18708 <gl_rbtree_list_check_invariants@@Base+0x1140>  // b.pmore
   18730:	b	18740 <gl_rbtree_list_check_invariants@@Base+0x1178>
   18734:	mov	x26, xzr
   18738:	cmp	x21, x26
   1873c:	b.hi	18708 <gl_rbtree_list_check_invariants@@Base+0x1140>  // b.pmore
   18740:	ldr	x0, [x25, #40]
   18744:	mov	x1, x19
   18748:	blr	x22
   1874c:	tbnz	w0, #31, 18764 <gl_rbtree_list_check_invariants@@Base+0x119c>
   18750:	cbnz	w0, 187b4 <gl_rbtree_list_check_invariants@@Base+0x11ec>
   18754:	add	x23, x26, x24
   18758:	ldr	x25, [x25]
   1875c:	cbnz	x25, 1871c <gl_rbtree_list_check_invariants@@Base+0x1154>
   18760:	b	186f8 <gl_rbtree_list_check_invariants@@Base+0x1130>
   18764:	add	x8, x26, x24
   18768:	add	x24, x8, #0x1
   1876c:	b	18710 <gl_rbtree_list_check_invariants@@Base+0x1148>
   18770:	add	x8, x26, #0x1
   18774:	mov	x21, xzr
   18778:	sub	x20, x20, x8
   1877c:	add	x24, x8, x24
   18780:	add	x25, x25, #0x8
   18784:	ldr	x8, [x25]
   18788:	mov	w9, wzr
   1878c:	cbnz	w9, 18694 <gl_rbtree_list_check_invariants@@Base+0x10cc>
   18790:	b	18690 <gl_rbtree_list_check_invariants@@Base+0x10c8>
   18794:	mov	x23, #0xffffffffffffffff    	// #-1
   18798:	mov	x0, x23
   1879c:	ldp	x20, x19, [sp, #64]
   187a0:	ldp	x22, x21, [sp, #48]
   187a4:	ldp	x24, x23, [sp, #32]
   187a8:	ldp	x26, x25, [sp, #16]
   187ac:	ldp	x29, x30, [sp], #80
   187b0:	ret
   187b4:	bl	b020 <abort@plt>
   187b8:	stp	x29, x30, [sp, #-64]!
   187bc:	stp	x22, x21, [sp, #32]
   187c0:	stp	x20, x19, [sp, #48]
   187c4:	ldr	x22, [x0, #40]
   187c8:	mov	x19, x2
   187cc:	mov	x20, x0
   187d0:	str	x23, [sp, #16]
   187d4:	mov	x29, sp
   187d8:	cbz	x22, 1884c <gl_rbtree_list_check_invariants@@Base+0x1284>
   187dc:	mov	x21, x1
   187e0:	b	18810 <gl_rbtree_list_check_invariants@@Base+0x1248>
   187e4:	ldr	x9, [x22, #8]
   187e8:	cbz	x9, 187fc <gl_rbtree_list_check_invariants@@Base+0x1234>
   187ec:	mov	w8, #0x1                   	// #1
   187f0:	mov	x22, x9
   187f4:	tbnz	w8, #0, 18810 <gl_rbtree_list_check_invariants@@Base+0x1248>
   187f8:	b	1885c <gl_rbtree_list_check_invariants@@Base+0x1294>
   187fc:	mov	x0, x20
   18800:	mov	x1, x22
   18804:	mov	x2, x19
   18808:	bl	17f38 <gl_rbtree_list_check_invariants@@Base+0x970>
   1880c:	b	1883c <gl_rbtree_list_check_invariants@@Base+0x1274>
   18810:	ldr	x0, [x22, #40]
   18814:	mov	x1, x19
   18818:	blr	x21
   1881c:	tbnz	w0, #31, 187e4 <gl_rbtree_list_check_invariants@@Base+0x121c>
   18820:	cbz	w0, 1882c <gl_rbtree_list_check_invariants@@Base+0x1264>
   18824:	ldr	x9, [x22]
   18828:	cbnz	x9, 187ec <gl_rbtree_list_check_invariants@@Base+0x1224>
   1882c:	mov	x0, x20
   18830:	mov	x1, x22
   18834:	mov	x2, x19
   18838:	bl	17e98 <gl_rbtree_list_check_invariants@@Base+0x8d0>
   1883c:	mov	x23, x0
   18840:	mov	w8, wzr
   18844:	tbnz	w8, #0, 18810 <gl_rbtree_list_check_invariants@@Base+0x1248>
   18848:	b	1885c <gl_rbtree_list_check_invariants@@Base+0x1294>
   1884c:	mov	x0, x20
   18850:	mov	x1, x19
   18854:	bl	17d60 <gl_rbtree_list_check_invariants@@Base+0x798>
   18858:	mov	x23, x0
   1885c:	mov	x0, x23
   18860:	ldp	x20, x19, [sp, #48]
   18864:	ldp	x22, x21, [sp, #32]
   18868:	ldr	x23, [sp, #16]
   1886c:	ldp	x29, x30, [sp], #64
   18870:	ret
   18874:	stp	x29, x30, [sp, #-32]!
   18878:	str	x19, [sp, #16]
   1887c:	mov	x29, sp
   18880:	mov	x19, x0
   18884:	bl	1830c <gl_rbtree_list_check_invariants@@Base+0xd44>
   18888:	cbz	x0, 1889c <gl_rbtree_list_check_invariants@@Base+0x12d4>
   1888c:	mov	x1, x0
   18890:	mov	x0, x19
   18894:	bl	18040 <gl_rbtree_list_check_invariants@@Base+0xa78>
   18898:	mov	w0, #0x1                   	// #1
   1889c:	ldr	x19, [sp, #16]
   188a0:	ldp	x29, x30, [sp], #32
   188a4:	ret
   188a8:	stp	x29, x30, [sp, #-64]!
   188ac:	stp	x22, x21, [sp, #32]
   188b0:	mov	w21, w0
   188b4:	mov	w0, #0x30                  	// #48
   188b8:	str	x23, [sp, #16]
   188bc:	stp	x20, x19, [sp, #48]
   188c0:	mov	x29, sp
   188c4:	mov	x22, x2
   188c8:	mov	x20, x1
   188cc:	bl	abc0 <malloc@plt>
   188d0:	mov	x19, x0
   188d4:	cbz	x0, 18968 <gl_rbtree_list_check_invariants@@Base+0x13a0>
   188d8:	sub	x8, x20, #0x1
   188dc:	lsr	x23, x8, #1
   188e0:	cbz	x23, 18904 <gl_rbtree_list_check_invariants@@Base+0x133c>
   188e4:	sub	w0, w21, #0x1
   188e8:	mov	x1, x23
   188ec:	mov	x2, x22
   188f0:	bl	188a8 <gl_rbtree_list_check_invariants@@Base+0x12e0>
   188f4:	str	x0, [x19]
   188f8:	cbz	x0, 1895c <gl_rbtree_list_check_invariants@@Base+0x1394>
   188fc:	str	x19, [x0, #16]
   18900:	b	18908 <gl_rbtree_list_check_invariants@@Base+0x1340>
   18904:	str	xzr, [x19]
   18908:	add	x8, x22, x23, lsl #3
   1890c:	ldr	x9, [x8]
   18910:	lsr	x1, x20, #1
   18914:	str	x9, [x19, #40]
   18918:	cbz	x1, 18938 <gl_rbtree_list_check_invariants@@Base+0x1370>
   1891c:	sub	w0, w21, #0x1
   18920:	add	x2, x8, #0x8
   18924:	bl	188a8 <gl_rbtree_list_check_invariants@@Base+0x12e0>
   18928:	str	x0, [x19, #8]
   1892c:	cbz	x0, 18950 <gl_rbtree_list_check_invariants@@Base+0x1388>
   18930:	str	x19, [x0, #16]
   18934:	b	1893c <gl_rbtree_list_check_invariants@@Base+0x1374>
   18938:	str	xzr, [x19, #8]
   1893c:	cmp	w21, #0x0
   18940:	cset	w8, eq  // eq = none
   18944:	str	w8, [x19, #24]
   18948:	str	x20, [x19, #32]
   1894c:	b	18968 <gl_rbtree_list_check_invariants@@Base+0x13a0>
   18950:	ldr	x0, [x19]
   18954:	cbz	x0, 1895c <gl_rbtree_list_check_invariants@@Base+0x1394>
   18958:	bl	18980 <gl_rbtree_list_check_invariants@@Base+0x13b8>
   1895c:	mov	x0, x19
   18960:	bl	b1d0 <free@plt>
   18964:	mov	x19, xzr
   18968:	mov	x0, x19
   1896c:	ldp	x20, x19, [sp, #48]
   18970:	ldp	x22, x21, [sp, #32]
   18974:	ldr	x23, [sp, #16]
   18978:	ldp	x29, x30, [sp], #64
   1897c:	ret
   18980:	stp	x29, x30, [sp, #-32]!
   18984:	str	x19, [sp, #16]
   18988:	mov	x19, x0
   1898c:	ldr	x0, [x0]
   18990:	mov	x29, sp
   18994:	cbz	x0, 1899c <gl_rbtree_list_check_invariants@@Base+0x13d4>
   18998:	bl	18980 <gl_rbtree_list_check_invariants@@Base+0x13b8>
   1899c:	ldr	x0, [x19, #8]
   189a0:	cbz	x0, 189a8 <gl_rbtree_list_check_invariants@@Base+0x13e0>
   189a4:	bl	18980 <gl_rbtree_list_check_invariants@@Base+0x13b8>
   189a8:	mov	x0, x19
   189ac:	bl	b1d0 <free@plt>
   189b0:	ldr	x19, [sp, #16]
   189b4:	ldp	x29, x30, [sp], #32
   189b8:	ret
   189bc:	mov	x8, x0
   189c0:	mov	x0, x8
   189c4:	ldr	x8, [x8]
   189c8:	cbz	x8, 189dc <gl_rbtree_list_check_invariants@@Base+0x1414>
   189cc:	ldr	x9, [x8, #32]
   189d0:	subs	x9, x1, x9
   189d4:	b.cc	189c0 <gl_rbtree_list_check_invariants@@Base+0x13f8>  // b.lo, b.ul, b.last
   189d8:	mov	x1, x9
   189dc:	cbz	x1, 189ec <gl_rbtree_list_check_invariants@@Base+0x1424>
   189e0:	ldr	x8, [x0, #8]
   189e4:	sub	x1, x1, #0x1
   189e8:	b	189c0 <gl_rbtree_list_check_invariants@@Base+0x13f8>
   189ec:	ret
   189f0:	stp	x29, x30, [sp, #-64]!
   189f4:	stp	x24, x23, [sp, #16]
   189f8:	stp	x20, x19, [sp, #48]
   189fc:	mov	x19, x2
   18a00:	mov	x20, x1
   18a04:	add	x23, x0, #0x28
   18a08:	stp	x22, x21, [sp, #32]
   18a0c:	mov	x29, sp
   18a10:	b	18a24 <gl_rbtree_list_check_invariants@@Base+0x145c>
   18a14:	mov	w8, #0x1                   	// #1
   18a18:	mov	w9, wzr
   18a1c:	str	w8, [x20, #24]
   18a20:	tbz	w9, #0, 18b40 <gl_rbtree_list_check_invariants@@Base+0x1578>
   18a24:	ldr	w8, [x19, #24]
   18a28:	cbz	w8, 18a14 <gl_rbtree_list_check_invariants@@Base+0x144c>
   18a2c:	ldr	x21, [x19, #16]
   18a30:	ldp	x8, x10, [x21]
   18a34:	cmp	x8, x19
   18a38:	b.eq	18a48 <gl_rbtree_list_check_invariants@@Base+0x1480>  // b.none
   18a3c:	cmp	x10, x19
   18a40:	mov	x10, x8
   18a44:	b.ne	18b54 <gl_rbtree_list_check_invariants@@Base+0x158c>  // b.any
   18a48:	cbz	x10, 18a78 <gl_rbtree_list_check_invariants@@Base+0x14b0>
   18a4c:	ldr	w9, [x10, #24]
   18a50:	cmp	w9, #0x1
   18a54:	b.ne	18a78 <gl_rbtree_list_check_invariants@@Base+0x14b0>  // b.any
   18a58:	str	w9, [x20, #24]
   18a5c:	str	wzr, [x10, #24]
   18a60:	str	wzr, [x19, #24]
   18a64:	ldr	x19, [x21, #16]
   18a68:	cbz	x19, 18b34 <gl_rbtree_list_check_invariants@@Base+0x156c>
   18a6c:	mov	x20, x21
   18a70:	tbnz	w9, #0, 18a24 <gl_rbtree_list_check_invariants@@Base+0x145c>
   18a74:	b	18b40 <gl_rbtree_list_check_invariants@@Base+0x1578>
   18a78:	ldr	x9, [x21, #16]
   18a7c:	mov	x24, x23
   18a80:	cbz	x9, 18aa0 <gl_rbtree_list_check_invariants@@Base+0x14d8>
   18a84:	ldr	x10, [x9]
   18a88:	cmp	x10, x21
   18a8c:	b.eq	18a9c <gl_rbtree_list_check_invariants@@Base+0x14d4>  // b.none
   18a90:	ldr	x10, [x9, #8]!
   18a94:	cmp	x10, x21
   18a98:	b.ne	18b54 <gl_rbtree_list_check_invariants@@Base+0x158c>  // b.any
   18a9c:	mov	x24, x9
   18aa0:	cmp	x8, x19
   18aa4:	b.eq	18abc <gl_rbtree_list_check_invariants@@Base+0x14f4>  // b.none
   18aa8:	ldr	x8, [x19]
   18aac:	cmp	x8, x20
   18ab0:	b.eq	18af8 <gl_rbtree_list_check_invariants@@Base+0x1530>  // b.none
   18ab4:	mov	x22, x19
   18ab8:	b	18b14 <gl_rbtree_list_check_invariants@@Base+0x154c>
   18abc:	ldr	x8, [x19, #8]
   18ac0:	mov	x0, x19
   18ac4:	cmp	x8, x20
   18ac8:	b.ne	18ae4 <gl_rbtree_list_check_invariants@@Base+0x151c>  // b.any
   18acc:	mov	x1, x20
   18ad0:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18ad4:	mov	x0, x20
   18ad8:	str	x20, [x21]
   18adc:	mov	x20, x19
   18ae0:	mov	x19, x0
   18ae4:	mov	x1, x21
   18ae8:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18aec:	str	x0, [x24]
   18af0:	str	wzr, [x0, #24]
   18af4:	b	18b28 <gl_rbtree_list_check_invariants@@Base+0x1560>
   18af8:	mov	x0, x20
   18afc:	mov	x1, x19
   18b00:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18b04:	mov	x22, x20
   18b08:	str	x20, [x21, #8]
   18b0c:	mov	x20, x19
   18b10:	mov	x19, x22
   18b14:	mov	x0, x21
   18b18:	mov	x1, x22
   18b1c:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18b20:	str	x0, [x24]
   18b24:	str	wzr, [x22, #24]
   18b28:	mov	w8, #0x1                   	// #1
   18b2c:	str	w8, [x21, #24]
   18b30:	b	18a18 <gl_rbtree_list_check_invariants@@Base+0x1450>
   18b34:	mov	w8, wzr
   18b38:	mov	x20, x21
   18b3c:	b	18a18 <gl_rbtree_list_check_invariants@@Base+0x1450>
   18b40:	ldp	x20, x19, [sp, #48]
   18b44:	ldp	x22, x21, [sp, #32]
   18b48:	ldp	x24, x23, [sp, #16]
   18b4c:	ldp	x29, x30, [sp], #64
   18b50:	ret
   18b54:	bl	b020 <abort@plt>
   18b58:	ldp	x9, x8, [x1]
   18b5c:	ldr	x10, [x0]
   18b60:	str	x9, [x0, #8]
   18b64:	str	x0, [x1]
   18b68:	ldr	x11, [x0, #16]
   18b6c:	str	x11, [x1, #16]
   18b70:	str	x1, [x0, #16]
   18b74:	cbz	x9, 18b7c <gl_rbtree_list_check_invariants@@Base+0x15b4>
   18b78:	str	x0, [x9, #16]
   18b7c:	cbz	x10, 18bb4 <gl_rbtree_list_check_invariants@@Base+0x15ec>
   18b80:	ldr	x10, [x10, #32]
   18b84:	add	x10, x10, #0x1
   18b88:	cbz	x9, 18b90 <gl_rbtree_list_check_invariants@@Base+0x15c8>
   18b8c:	ldr	x9, [x9, #32]
   18b90:	add	x9, x9, x10
   18b94:	str	x9, [x0, #32]
   18b98:	add	x9, x9, #0x1
   18b9c:	cbz	x8, 18ba4 <gl_rbtree_list_check_invariants@@Base+0x15dc>
   18ba0:	ldr	x8, [x8, #32]
   18ba4:	add	x8, x9, x8
   18ba8:	mov	x0, x1
   18bac:	str	x8, [x1, #32]
   18bb0:	ret
   18bb4:	mov	w10, #0x1                   	// #1
   18bb8:	cbnz	x9, 18b8c <gl_rbtree_list_check_invariants@@Base+0x15c4>
   18bbc:	b	18b90 <gl_rbtree_list_check_invariants@@Base+0x15c8>
   18bc0:	ldp	x8, x10, [x0]
   18bc4:	ldr	x9, [x1, #8]
   18bc8:	str	x10, [x1]
   18bcc:	str	x1, [x0, #8]
   18bd0:	ldr	x11, [x1, #16]
   18bd4:	str	x11, [x0, #16]
   18bd8:	str	x0, [x1, #16]
   18bdc:	cbz	x10, 18c0c <gl_rbtree_list_check_invariants@@Base+0x1644>
   18be0:	ldr	x11, [x10, #32]
   18be4:	str	x1, [x10, #16]
   18be8:	add	x10, x11, #0x1
   18bec:	cbz	x9, 18bf4 <gl_rbtree_list_check_invariants@@Base+0x162c>
   18bf0:	ldr	x9, [x9, #32]
   18bf4:	add	x9, x9, x10
   18bf8:	str	x9, [x1, #32]
   18bfc:	cbz	x8, 18c18 <gl_rbtree_list_check_invariants@@Base+0x1650>
   18c00:	ldr	x8, [x8, #32]
   18c04:	add	x8, x8, #0x1
   18c08:	b	18c1c <gl_rbtree_list_check_invariants@@Base+0x1654>
   18c0c:	mov	w10, #0x1                   	// #1
   18c10:	cbnz	x9, 18bf0 <gl_rbtree_list_check_invariants@@Base+0x1628>
   18c14:	b	18bf4 <gl_rbtree_list_check_invariants@@Base+0x162c>
   18c18:	mov	w8, #0x1                   	// #1
   18c1c:	add	x8, x8, x9
   18c20:	str	x8, [x0, #32]
   18c24:	ret
   18c28:	stp	x29, x30, [sp, #-16]!
   18c2c:	ldp	x8, x2, [x1, #8]
   18c30:	ldr	x11, [x1]
   18c34:	mov	x29, sp
   18c38:	cbz	x11, 18ce0 <gl_rbtree_list_check_invariants@@Base+0x1718>
   18c3c:	cbz	x8, 18d2c <gl_rbtree_list_check_invariants@@Base+0x1764>
   18c40:	mov	x8, x11
   18c44:	mov	x9, x8
   18c48:	ldr	x8, [x8, #8]
   18c4c:	cbnz	x8, 18c44 <gl_rbtree_list_check_invariants@@Base+0x167c>
   18c50:	ldr	x10, [x9, #16]
   18c54:	ldr	x8, [x9]
   18c58:	ldr	w12, [x9, #24]
   18c5c:	cmp	x10, x1
   18c60:	b.eq	18c70 <gl_rbtree_list_check_invariants@@Base+0x16a8>  // b.none
   18c64:	cbz	x8, 18c6c <gl_rbtree_list_check_invariants@@Base+0x16a4>
   18c68:	str	x10, [x8, #16]
   18c6c:	str	x8, [x10, #8]
   18c70:	cbz	x10, 18c8c <gl_rbtree_list_check_invariants@@Base+0x16c4>
   18c74:	mov	x13, x10
   18c78:	ldr	x14, [x13, #32]
   18c7c:	sub	x14, x14, #0x1
   18c80:	str	x14, [x13, #32]
   18c84:	ldr	x13, [x13, #16]
   18c88:	cbnz	x13, 18c78 <gl_rbtree_list_check_invariants@@Base+0x16b0>
   18c8c:	cmp	x10, x1
   18c90:	b.eq	18c9c <gl_rbtree_list_check_invariants@@Base+0x16d4>  // b.none
   18c94:	str	x11, [x9]
   18c98:	str	x9, [x11, #16]
   18c9c:	ldr	x11, [x1, #8]
   18ca0:	str	x11, [x9, #8]
   18ca4:	str	x9, [x11, #16]
   18ca8:	ldr	w11, [x1, #24]
   18cac:	str	w11, [x9, #24]
   18cb0:	ldr	x11, [x1, #32]
   18cb4:	str	x2, [x9, #16]
   18cb8:	str	x11, [x9, #32]
   18cbc:	cbz	x2, 18d60 <gl_rbtree_list_check_invariants@@Base+0x1798>
   18cc0:	mov	x11, x2
   18cc4:	ldr	x13, [x11], #8
   18cc8:	cmp	x13, x1
   18ccc:	csel	x11, x2, x11, eq  // eq = none
   18cd0:	str	x9, [x11]
   18cd4:	cbz	w12, 18d6c <gl_rbtree_list_check_invariants@@Base+0x17a4>
   18cd8:	ldp	x29, x30, [sp], #16
   18cdc:	ret
   18ce0:	cbz	x8, 18cec <gl_rbtree_list_check_invariants@@Base+0x1724>
   18ce4:	str	x2, [x8, #16]
   18ce8:	str	wzr, [x8, #24]
   18cec:	cbz	x2, 18d88 <gl_rbtree_list_check_invariants@@Base+0x17c0>
   18cf0:	ldr	x9, [x2]
   18cf4:	cmp	x9, x1
   18cf8:	cset	w9, ne  // ne = any
   18cfc:	str	x8, [x2, w9, uxtw #3]
   18d00:	mov	x9, x2
   18d04:	ldr	x10, [x9, #32]
   18d08:	sub	x10, x10, #0x1
   18d0c:	str	x10, [x9, #32]
   18d10:	ldr	x9, [x9, #16]
   18d14:	cbnz	x9, 18d04 <gl_rbtree_list_check_invariants@@Base+0x173c>
   18d18:	cbnz	x8, 18cd8 <gl_rbtree_list_check_invariants@@Base+0x1710>
   18d1c:	ldr	w8, [x1, #24]
   18d20:	cbnz	w8, 18cd8 <gl_rbtree_list_check_invariants@@Base+0x1710>
   18d24:	mov	x1, xzr
   18d28:	b	18da0 <gl_rbtree_list_check_invariants@@Base+0x17d8>
   18d2c:	str	x2, [x11, #16]
   18d30:	str	wzr, [x11, #24]
   18d34:	cbz	x2, 18dac <gl_rbtree_list_check_invariants@@Base+0x17e4>
   18d38:	ldr	x8, [x2]
   18d3c:	cmp	x8, x1
   18d40:	cset	w8, ne  // ne = any
   18d44:	str	x11, [x2, w8, uxtw #3]
   18d48:	ldr	x8, [x2, #32]
   18d4c:	sub	x8, x8, #0x1
   18d50:	str	x8, [x2, #32]
   18d54:	ldr	x2, [x2, #16]
   18d58:	cbnz	x2, 18d48 <gl_rbtree_list_check_invariants@@Base+0x1780>
   18d5c:	b	18cd8 <gl_rbtree_list_check_invariants@@Base+0x1710>
   18d60:	add	x11, x0, #0x28
   18d64:	str	x9, [x11]
   18d68:	cbnz	w12, 18cd8 <gl_rbtree_list_check_invariants@@Base+0x1710>
   18d6c:	cbz	x8, 18d94 <gl_rbtree_list_check_invariants@@Base+0x17cc>
   18d70:	ldr	w11, [x8, #24]
   18d74:	cmp	w11, #0x1
   18d78:	b.ne	18d94 <gl_rbtree_list_check_invariants@@Base+0x17cc>  // b.any
   18d7c:	str	wzr, [x8, #24]
   18d80:	ldp	x29, x30, [sp], #16
   18d84:	ret
   18d88:	str	x8, [x0, #40]
   18d8c:	ldp	x29, x30, [sp], #16
   18d90:	ret
   18d94:	cmp	x10, x1
   18d98:	csel	x2, x10, x9, ne  // ne = any
   18d9c:	mov	x1, x8
   18da0:	bl	18db8 <gl_rbtree_list_check_invariants@@Base+0x17f0>
   18da4:	ldp	x29, x30, [sp], #16
   18da8:	ret
   18dac:	str	x11, [x0, #40]
   18db0:	ldp	x29, x30, [sp], #16
   18db4:	ret
   18db8:	stp	x29, x30, [sp, #-80]!
   18dbc:	stp	x24, x23, [sp, #32]
   18dc0:	stp	x20, x19, [sp, #64]
   18dc4:	mov	x19, x2
   18dc8:	mov	x20, x1
   18dcc:	add	x23, x0, #0x28
   18dd0:	mov	w24, #0x1                   	// #1
   18dd4:	stp	x26, x25, [sp, #16]
   18dd8:	stp	x22, x21, [sp, #48]
   18ddc:	mov	x29, sp
   18de0:	b	18df4 <gl_rbtree_list_check_invariants@@Base+0x182c>
   18de4:	ldr	x19, [x20, #16]
   18de8:	cmp	x19, #0x0
   18dec:	cset	w26, eq  // eq = none
   18df0:	cbnz	w26, 1901c <gl_rbtree_list_check_invariants@@Base+0x1a54>
   18df4:	ldr	x8, [x19, #16]
   18df8:	mov	x25, x23
   18dfc:	cbz	x8, 18e1c <gl_rbtree_list_check_invariants@@Base+0x1854>
   18e00:	ldr	x9, [x8]
   18e04:	cmp	x9, x19
   18e08:	b.eq	18e18 <gl_rbtree_list_check_invariants@@Base+0x1850>  // b.none
   18e0c:	ldr	x9, [x8, #8]!
   18e10:	cmp	x9, x19
   18e14:	b.ne	19034 <gl_rbtree_list_check_invariants@@Base+0x1a6c>  // b.any
   18e18:	mov	x25, x8
   18e1c:	ldp	x21, x22, [x19]
   18e20:	cmp	x21, x20
   18e24:	b.eq	18ef0 <gl_rbtree_list_check_invariants@@Base+0x1928>  // b.none
   18e28:	cmp	x22, x20
   18e2c:	b.ne	19034 <gl_rbtree_list_check_invariants@@Base+0x1a6c>  // b.any
   18e30:	ldr	w8, [x21, #24]
   18e34:	cmp	w8, #0x1
   18e38:	b.ne	18e5c <gl_rbtree_list_check_invariants@@Base+0x1894>  // b.any
   18e3c:	mov	x0, x21
   18e40:	mov	x1, x19
   18e44:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18e48:	str	x21, [x25]
   18e4c:	str	w24, [x19, #24]
   18e50:	str	wzr, [x21, #24]
   18e54:	add	x25, x21, #0x8
   18e58:	ldr	x21, [x19]
   18e5c:	ldr	x8, [x21]
   18e60:	cbz	x8, 18e98 <gl_rbtree_list_check_invariants@@Base+0x18d0>
   18e64:	ldr	w8, [x8, #24]
   18e68:	cmp	w8, #0x1
   18e6c:	b.ne	18e98 <gl_rbtree_list_check_invariants@@Base+0x18d0>  // b.any
   18e70:	mov	x0, x21
   18e74:	mov	x1, x19
   18e78:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18e7c:	str	x21, [x25]
   18e80:	ldr	w9, [x19, #24]
   18e84:	mov	w8, wzr
   18e88:	str	w9, [x21, #24]
   18e8c:	str	wzr, [x19, #24]
   18e90:	ldr	x21, [x21]
   18e94:	b	18f6c <gl_rbtree_list_check_invariants@@Base+0x19a4>
   18e98:	ldr	x1, [x21, #8]
   18e9c:	cbz	x1, 18f5c <gl_rbtree_list_check_invariants@@Base+0x1994>
   18ea0:	ldr	w8, [x1, #24]
   18ea4:	cmp	w8, #0x1
   18ea8:	b.ne	18f5c <gl_rbtree_list_check_invariants@@Base+0x1994>  // b.any
   18eac:	mov	x0, x21
   18eb0:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18eb4:	mov	w26, #0x1                   	// #1
   18eb8:	mov	x1, x19
   18ebc:	str	x0, [x19]
   18ec0:	str	w26, [x21, #24]
   18ec4:	str	wzr, [x0, #24]
   18ec8:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18ecc:	str	x0, [x25]
   18ed0:	ldr	w8, [x19, #24]
   18ed4:	str	w8, [x0, #24]
   18ed8:	str	wzr, [x19, #24]
   18edc:	ldr	x21, [x0]
   18ee0:	mov	w8, wzr
   18ee4:	str	w8, [x21, #24]
   18ee8:	cbnz	w26, 18df0 <gl_rbtree_list_check_invariants@@Base+0x1828>
   18eec:	b	18de4 <gl_rbtree_list_check_invariants@@Base+0x181c>
   18ef0:	ldr	w8, [x22, #24]
   18ef4:	cmp	w8, #0x1
   18ef8:	b.ne	18f20 <gl_rbtree_list_check_invariants@@Base+0x1958>  // b.any
   18efc:	mov	x0, x19
   18f00:	mov	x1, x22
   18f04:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18f08:	str	x0, [x25]
   18f0c:	str	w24, [x19, #24]
   18f10:	str	wzr, [x22, #24]
   18f14:	ldr	x8, [x19, #8]
   18f18:	mov	x25, x22
   18f1c:	mov	x22, x8
   18f20:	ldr	x8, [x22, #8]
   18f24:	cbz	x8, 18f7c <gl_rbtree_list_check_invariants@@Base+0x19b4>
   18f28:	ldr	w8, [x8, #24]
   18f2c:	cmp	w8, #0x1
   18f30:	b.ne	18f7c <gl_rbtree_list_check_invariants@@Base+0x19b4>  // b.any
   18f34:	mov	x0, x19
   18f38:	mov	x1, x22
   18f3c:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18f40:	str	x0, [x25]
   18f44:	ldr	w9, [x19, #24]
   18f48:	mov	w8, wzr
   18f4c:	str	w9, [x22, #24]
   18f50:	str	wzr, [x19, #24]
   18f54:	ldr	x22, [x22, #8]
   18f58:	b	18fe4 <gl_rbtree_list_check_invariants@@Base+0x1a1c>
   18f5c:	ldr	w8, [x19, #24]
   18f60:	cbz	w8, 18fec <gl_rbtree_list_check_invariants@@Base+0x1a24>
   18f64:	mov	w8, #0x1                   	// #1
   18f68:	str	wzr, [x19, #24]
   18f6c:	mov	w26, #0x1                   	// #1
   18f70:	str	w8, [x21, #24]
   18f74:	cbnz	w26, 18df0 <gl_rbtree_list_check_invariants@@Base+0x1828>
   18f78:	b	18de4 <gl_rbtree_list_check_invariants@@Base+0x181c>
   18f7c:	ldr	x21, [x22]
   18f80:	cbz	x21, 18fd4 <gl_rbtree_list_check_invariants@@Base+0x1a0c>
   18f84:	ldr	w8, [x21, #24]
   18f88:	cmp	w8, #0x1
   18f8c:	b.ne	18fd4 <gl_rbtree_list_check_invariants@@Base+0x1a0c>  // b.any
   18f90:	mov	x0, x21
   18f94:	mov	x1, x22
   18f98:	bl	18bc0 <gl_rbtree_list_check_invariants@@Base+0x15f8>
   18f9c:	mov	w26, #0x1                   	// #1
   18fa0:	mov	x0, x19
   18fa4:	mov	x1, x21
   18fa8:	str	x21, [x19, #8]
   18fac:	str	w26, [x22, #24]
   18fb0:	str	wzr, [x21, #24]
   18fb4:	bl	18b58 <gl_rbtree_list_check_invariants@@Base+0x1590>
   18fb8:	str	x0, [x25]
   18fbc:	ldr	w8, [x19, #24]
   18fc0:	str	w8, [x21, #24]
   18fc4:	str	wzr, [x19, #24]
   18fc8:	ldr	x22, [x21, #8]
   18fcc:	mov	w8, wzr
   18fd0:	b	19010 <gl_rbtree_list_check_invariants@@Base+0x1a48>
   18fd4:	ldr	w8, [x19, #24]
   18fd8:	cbz	w8, 19004 <gl_rbtree_list_check_invariants@@Base+0x1a3c>
   18fdc:	mov	w8, #0x1                   	// #1
   18fe0:	str	wzr, [x19, #24]
   18fe4:	mov	w26, #0x1                   	// #1
   18fe8:	b	19010 <gl_rbtree_list_check_invariants@@Base+0x1a48>
   18fec:	mov	w26, wzr
   18ff0:	mov	w8, #0x1                   	// #1
   18ff4:	mov	x20, x19
   18ff8:	str	w8, [x21, #24]
   18ffc:	cbnz	w26, 18df0 <gl_rbtree_list_check_invariants@@Base+0x1828>
   19000:	b	18de4 <gl_rbtree_list_check_invariants@@Base+0x181c>
   19004:	mov	w26, wzr
   19008:	mov	w8, #0x1                   	// #1
   1900c:	mov	x20, x19
   19010:	str	w8, [x22, #24]
   19014:	cbnz	w26, 18df0 <gl_rbtree_list_check_invariants@@Base+0x1828>
   19018:	b	18de4 <gl_rbtree_list_check_invariants@@Base+0x181c>
   1901c:	ldp	x20, x19, [sp, #64]
   19020:	ldp	x22, x21, [sp, #48]
   19024:	ldp	x24, x23, [sp, #32]
   19028:	ldp	x26, x25, [sp, #16]
   1902c:	ldp	x29, x30, [sp], #80
   19030:	ret
   19034:	bl	b020 <abort@plt>

0000000000019038 <renameatu@@Base>:
   19038:	sub	sp, sp, #0x150
   1903c:	stp	x29, x30, [sp, #256]
   19040:	stp	x28, x25, [sp, #272]
   19044:	stp	x24, x23, [sp, #288]
   19048:	stp	x22, x21, [sp, #304]
   1904c:	stp	x20, x19, [sp, #320]
   19050:	add	x29, sp, #0x100
   19054:	mov	w25, w4
   19058:	mov	x19, x3
   1905c:	mov	w20, w2
   19060:	mov	x21, x1
   19064:	mov	w22, w0
   19068:	bl	b1e0 <renameat2@plt>
   1906c:	mov	w24, w0
   19070:	bl	b6f0 <__errno_location@plt>
   19074:	tbz	w24, #31, 191c0 <renameatu@@Base+0x188>
   19078:	ldr	w8, [x0]
   1907c:	mov	x23, x0
   19080:	cmp	w8, #0x16
   19084:	b.eq	19098 <renameatu@@Base+0x60>  // b.none
   19088:	cmp	w8, #0x5f
   1908c:	b.eq	19098 <renameatu@@Base+0x60>  // b.none
   19090:	cmp	w8, #0x26
   19094:	b.ne	191c0 <renameatu@@Base+0x188>  // b.any
   19098:	cbz	w25, 190e8 <renameatu@@Base+0xb0>
   1909c:	cmp	w25, #0x1
   190a0:	b.ne	190d4 <renameatu@@Base+0x9c>  // b.any
   190a4:	mov	x2, sp
   190a8:	mov	w0, w20
   190ac:	mov	x1, x19
   190b0:	bl	ad90 <lstatat@plt>
   190b4:	cbz	w0, 190cc <renameatu@@Base+0x94>
   190b8:	ldr	w8, [x23]
   190bc:	cmp	w8, #0x2
   190c0:	b.eq	190e4 <renameatu@@Base+0xac>  // b.none
   190c4:	cmp	w8, #0x4b
   190c8:	b.ne	190dc <renameatu@@Base+0xa4>  // b.any
   190cc:	mov	w0, #0x11                  	// #17
   190d0:	b	190d8 <renameatu@@Base+0xa0>
   190d4:	mov	w0, #0x5f                  	// #95
   190d8:	bl	191f0 <renameatu@@Base+0x1b8>
   190dc:	mov	w24, #0xffffffff            	// #-1
   190e0:	b	191c0 <renameatu@@Base+0x188>
   190e4:	mov	w25, #0x1                   	// #1
   190e8:	mov	x0, x21
   190ec:	bl	a890 <strlen@plt>
   190f0:	mov	x24, x0
   190f4:	mov	x0, x19
   190f8:	bl	a890 <strlen@plt>
   190fc:	cbz	x24, 191a8 <renameatu@@Base+0x170>
   19100:	cbz	x0, 191a8 <renameatu@@Base+0x170>
   19104:	add	x8, x24, x21
   19108:	ldurb	w8, [x8, #-1]
   1910c:	cmp	w8, #0x2f
   19110:	b.eq	19124 <renameatu@@Base+0xec>  // b.none
   19114:	add	x8, x0, x19
   19118:	ldurb	w8, [x8, #-1]
   1911c:	cmp	w8, #0x2f
   19120:	b.ne	191a8 <renameatu@@Base+0x170>  // b.any
   19124:	add	x2, sp, #0x80
   19128:	mov	w0, w22
   1912c:	mov	x1, x21
   19130:	bl	ad90 <lstatat@plt>
   19134:	cbnz	w0, 190dc <renameatu@@Base+0xa4>
   19138:	cbz	w25, 19154 <renameatu@@Base+0x11c>
   1913c:	ldr	w8, [sp, #144]
   19140:	and	w8, w8, #0xf000
   19144:	cmp	w8, #0x4, lsl #12
   19148:	b.eq	191a8 <renameatu@@Base+0x170>  // b.none
   1914c:	mov	w0, #0x2                   	// #2
   19150:	b	190d8 <renameatu@@Base+0xa0>
   19154:	mov	x2, sp
   19158:	mov	w0, w20
   1915c:	mov	x1, x19
   19160:	bl	ad90 <lstatat@plt>
   19164:	cbz	w0, 19188 <renameatu@@Base+0x150>
   19168:	ldr	w8, [x23]
   1916c:	cmp	w8, #0x2
   19170:	b.ne	190dc <renameatu@@Base+0xa4>  // b.any
   19174:	ldr	w8, [sp, #144]
   19178:	and	w8, w8, #0xf000
   1917c:	cmp	w8, #0x4, lsl #12
   19180:	b.ne	190dc <renameatu@@Base+0xa4>  // b.any
   19184:	b	191a8 <renameatu@@Base+0x170>
   19188:	ldr	w8, [sp, #16]
   1918c:	and	w8, w8, #0xf000
   19190:	cmp	w8, #0x4, lsl #12
   19194:	b.ne	191e0 <renameatu@@Base+0x1a8>  // b.any
   19198:	ldr	w8, [sp, #144]
   1919c:	and	w8, w8, #0xf000
   191a0:	cmp	w8, #0x4, lsl #12
   191a4:	b.ne	191e8 <renameatu@@Base+0x1b0>  // b.any
   191a8:	mov	w0, w22
   191ac:	mov	x1, x21
   191b0:	mov	w2, w20
   191b4:	mov	x3, x19
   191b8:	bl	b220 <renameat@plt>
   191bc:	mov	w24, w0
   191c0:	mov	w0, w24
   191c4:	ldp	x20, x19, [sp, #320]
   191c8:	ldp	x22, x21, [sp, #304]
   191cc:	ldp	x24, x23, [sp, #288]
   191d0:	ldp	x28, x25, [sp, #272]
   191d4:	ldp	x29, x30, [sp, #256]
   191d8:	add	sp, sp, #0x150
   191dc:	ret
   191e0:	mov	w0, #0x14                  	// #20
   191e4:	b	190d8 <renameatu@@Base+0xa0>
   191e8:	mov	w0, #0x15                  	// #21
   191ec:	b	190d8 <renameatu@@Base+0xa0>
   191f0:	stp	x29, x30, [sp, #-32]!
   191f4:	str	x19, [sp, #16]
   191f8:	mov	x29, sp
   191fc:	mov	w19, w0
   19200:	bl	b6f0 <__errno_location@plt>
   19204:	str	w19, [x0]
   19208:	ldr	x19, [sp, #16]
   1920c:	ldp	x29, x30, [sp], #32
   19210:	ret

0000000000019214 <same_name@@Base>:
   19214:	stp	x29, x30, [sp, #-16]!
   19218:	mov	x3, x1
   1921c:	mov	x1, x0
   19220:	mov	w0, #0xffffff9c            	// #-100
   19224:	mov	w2, #0xffffff9c            	// #-100
   19228:	mov	x29, sp
   1922c:	bl	a860 <same_nameat@plt>
   19230:	and	w0, w0, #0x1
   19234:	ldp	x29, x30, [sp], #16
   19238:	ret

000000000001923c <same_nameat@@Base>:
   1923c:	sub	sp, sp, #0x150
   19240:	stp	x22, x21, [sp, #304]
   19244:	mov	w21, w0
   19248:	mov	x0, x1
   1924c:	stp	x29, x30, [sp, #256]
   19250:	stp	x28, x25, [sp, #272]
   19254:	stp	x24, x23, [sp, #288]
   19258:	stp	x20, x19, [sp, #320]
   1925c:	add	x29, sp, #0x100
   19260:	mov	x20, x3
   19264:	mov	w19, w2
   19268:	mov	x22, x1
   1926c:	bl	ae20 <last_component@plt>
   19270:	mov	x23, x0
   19274:	mov	x0, x20
   19278:	bl	ae20 <last_component@plt>
   1927c:	mov	x24, x0
   19280:	mov	x0, x23
   19284:	bl	a7e0 <base_len@plt>
   19288:	mov	x25, x0
   1928c:	mov	x0, x24
   19290:	bl	a7e0 <base_len@plt>
   19294:	cmp	x25, x0
   19298:	b.ne	192b0 <same_nameat@@Base+0x74>  // b.any
   1929c:	mov	x2, x0
   192a0:	mov	x0, x23
   192a4:	mov	x1, x24
   192a8:	bl	ae50 <bcmp@plt>
   192ac:	cbz	w0, 192d4 <same_nameat@@Base+0x98>
   192b0:	mov	w19, wzr
   192b4:	mov	w0, w19
   192b8:	ldp	x20, x19, [sp, #320]
   192bc:	ldp	x22, x21, [sp, #304]
   192c0:	ldp	x24, x23, [sp, #288]
   192c4:	ldp	x28, x25, [sp, #272]
   192c8:	ldp	x29, x30, [sp, #256]
   192cc:	add	sp, sp, #0x150
   192d0:	ret
   192d4:	mov	x0, x22
   192d8:	bl	ac90 <dir_name@plt>
   192dc:	mov	x22, x0
   192e0:	add	x2, sp, #0x80
   192e4:	mov	w3, #0x100                 	// #256
   192e8:	mov	w0, w21
   192ec:	mov	x1, x22
   192f0:	bl	2ae40 <vasnprintf@@Base+0xd04>
   192f4:	cbz	w0, 19314 <same_nameat@@Base+0xd8>
   192f8:	bl	b6f0 <__errno_location@plt>
   192fc:	ldr	w1, [x0]
   19300:	adrp	x2, 2b000 <vasnprintf@@Base+0xec4>
   19304:	add	x2, x2, #0x805
   19308:	mov	w0, #0x1                   	// #1
   1930c:	mov	x3, x22
   19310:	bl	a8c0 <error@plt>
   19314:	mov	x0, x22
   19318:	bl	b1d0 <free@plt>
   1931c:	mov	x0, x20
   19320:	bl	ac90 <dir_name@plt>
   19324:	mov	x20, x0
   19328:	mov	x2, sp
   1932c:	mov	w3, #0x100                 	// #256
   19330:	mov	w0, w19
   19334:	mov	x1, x20
   19338:	bl	2ae40 <vasnprintf@@Base+0xd04>
   1933c:	cbz	w0, 1935c <same_nameat@@Base+0x120>
   19340:	bl	b6f0 <__errno_location@plt>
   19344:	ldr	w1, [x0]
   19348:	adrp	x2, 2b000 <vasnprintf@@Base+0xec4>
   1934c:	add	x2, x2, #0x805
   19350:	mov	w0, #0x1                   	// #1
   19354:	mov	x3, x20
   19358:	bl	a8c0 <error@plt>
   1935c:	ldp	x11, x8, [sp]
   19360:	ldp	x10, x9, [sp, #128]
   19364:	mov	x0, x20
   19368:	cmp	x9, x8
   1936c:	cset	w8, eq  // eq = none
   19370:	cmp	x10, x11
   19374:	cset	w9, eq  // eq = none
   19378:	and	w19, w8, w9
   1937c:	bl	b1d0 <free@plt>
   19380:	b	192b4 <same_nameat@@Base+0x78>

0000000000019384 <save_cwd@@Base>:
   19384:	stp	x29, x30, [sp, #-32]!
   19388:	str	x19, [sp, #16]
   1938c:	mov	x19, x0
   19390:	str	xzr, [x0, #8]
   19394:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   19398:	add	x0, x0, #0x72f
   1939c:	mov	w1, #0x80000               	// #524288
   193a0:	mov	x29, sp
   193a4:	bl	ac50 <open@plt>
   193a8:	mov	w1, #0x80000               	// #524288
   193ac:	str	w0, [x19]
   193b0:	bl	b670 <fd_safer_flag@plt>
   193b4:	str	w0, [x19]
   193b8:	tbnz	w0, #31, 193c4 <save_cwd@@Base+0x40>
   193bc:	mov	w0, wzr
   193c0:	b	193dc <save_cwd@@Base+0x58>
   193c4:	mov	x0, xzr
   193c8:	mov	x1, xzr
   193cc:	bl	a850 <getcwd@plt>
   193d0:	cmp	x0, #0x0
   193d4:	str	x0, [x19, #8]
   193d8:	csetm	w0, eq  // eq = none
   193dc:	ldr	x19, [sp, #16]
   193e0:	ldp	x29, x30, [sp], #32
   193e4:	ret

00000000000193e8 <restore_cwd@@Base>:
   193e8:	stp	x29, x30, [sp, #-16]!
   193ec:	mov	x8, x0
   193f0:	ldr	w0, [x0]
   193f4:	mov	x29, sp
   193f8:	tbnz	w0, #31, 19408 <restore_cwd@@Base+0x20>
   193fc:	bl	a8e0 <fchdir@plt>
   19400:	ldp	x29, x30, [sp], #16
   19404:	ret
   19408:	ldr	x0, [x8, #8]
   1940c:	bl	a9b0 <chdir_long@plt>
   19410:	ldp	x29, x30, [sp], #16
   19414:	ret

0000000000019418 <free_cwd@@Base>:
   19418:	stp	x29, x30, [sp, #-32]!
   1941c:	str	x19, [sp, #16]
   19420:	mov	x19, x0
   19424:	ldr	w0, [x0]
   19428:	mov	x29, sp
   1942c:	tbnz	w0, #31, 19434 <free_cwd@@Base+0x1c>
   19430:	bl	af30 <close@plt>
   19434:	ldr	x0, [x19, #8]
   19438:	bl	b1d0 <free@plt>
   1943c:	ldr	x19, [sp, #16]
   19440:	ldp	x29, x30, [sp], #32
   19444:	ret

0000000000019448 <gl_scratch_buffer_grow@@Base>:
   19448:	stp	x29, x30, [sp, #-32]!
   1944c:	stp	x20, x19, [sp, #16]
   19450:	ldr	x8, [x0, #8]
   19454:	mov	x29, sp
   19458:	mov	x19, x0
   1945c:	lsl	x20, x8, #1
   19460:	bl	194b8 <gl_scratch_buffer_grow@@Base+0x70>
   19464:	ldr	x8, [x19, #8]
   19468:	cmp	x20, x8
   1946c:	b.cc	19490 <gl_scratch_buffer_grow@@Base+0x48>  // b.lo, b.ul, b.last
   19470:	mov	x0, x20
   19474:	bl	abc0 <malloc@plt>
   19478:	cbz	x0, 194a8 <gl_scratch_buffer_grow@@Base+0x60>
   1947c:	stp	x0, x20, [x19]
   19480:	mov	w0, #0x1                   	// #1
   19484:	ldp	x20, x19, [sp, #16]
   19488:	ldp	x29, x30, [sp], #32
   1948c:	ret
   19490:	bl	b6f0 <__errno_location@plt>
   19494:	mov	x8, x0
   19498:	mov	x0, xzr
   1949c:	mov	w9, #0xc                   	// #12
   194a0:	str	w9, [x8]
   194a4:	cbnz	x0, 1947c <gl_scratch_buffer_grow@@Base+0x34>
   194a8:	mov	x0, x19
   194ac:	bl	194dc <gl_scratch_buffer_grow@@Base+0x94>
   194b0:	mov	w0, wzr
   194b4:	b	19484 <gl_scratch_buffer_grow@@Base+0x3c>
   194b8:	stp	x29, x30, [sp, #-16]!
   194bc:	mov	x8, x0
   194c0:	ldr	x0, [x8], #16
   194c4:	mov	x29, sp
   194c8:	cmp	x0, x8
   194cc:	b.eq	194d4 <gl_scratch_buffer_grow@@Base+0x8c>  // b.none
   194d0:	bl	b1d0 <free@plt>
   194d4:	ldp	x29, x30, [sp], #16
   194d8:	ret
   194dc:	add	x8, x0, #0x10
   194e0:	mov	w9, #0x400                 	// #1024
   194e4:	stp	x8, x9, [x0]
   194e8:	ret

00000000000194ec <gl_scratch_buffer_grow_preserve@@Base>:
   194ec:	stp	x29, x30, [sp, #-64]!
   194f0:	stp	x22, x21, [sp, #32]
   194f4:	stp	x20, x19, [sp, #48]
   194f8:	mov	x19, x0
   194fc:	ldr	x0, [x0]
   19500:	ldr	x22, [x19, #8]
   19504:	str	x23, [sp, #16]
   19508:	add	x23, x19, #0x10
   1950c:	cmp	x0, x23
   19510:	lsl	x20, x22, #1
   19514:	mov	x29, sp
   19518:	b.eq	1954c <gl_scratch_buffer_grow_preserve@@Base+0x60>  // b.none
   1951c:	cmp	x20, x22
   19520:	b.cc	19584 <gl_scratch_buffer_grow_preserve@@Base+0x98>  // b.lo, b.ul, b.last
   19524:	mov	x1, x20
   19528:	bl	aea0 <realloc@plt>
   1952c:	mov	x21, x0
   19530:	cbnz	x21, 19568 <gl_scratch_buffer_grow_preserve@@Base+0x7c>
   19534:	ldr	x0, [x19]
   19538:	bl	b1d0 <free@plt>
   1953c:	mov	x0, x19
   19540:	bl	1959c <gl_scratch_buffer_grow_preserve@@Base+0xb0>
   19544:	mov	w0, wzr
   19548:	b	19570 <gl_scratch_buffer_grow_preserve@@Base+0x84>
   1954c:	mov	x0, x20
   19550:	bl	abc0 <malloc@plt>
   19554:	cbz	x0, 19570 <gl_scratch_buffer_grow_preserve@@Base+0x84>
   19558:	mov	x1, x23
   1955c:	mov	x2, x22
   19560:	mov	x21, x0
   19564:	bl	a800 <memcpy@plt>
   19568:	stp	x21, x20, [x19]
   1956c:	mov	w0, #0x1                   	// #1
   19570:	ldp	x20, x19, [sp, #48]
   19574:	ldp	x22, x21, [sp, #32]
   19578:	ldr	x23, [sp, #16]
   1957c:	ldp	x29, x30, [sp], #64
   19580:	ret
   19584:	bl	b6f0 <__errno_location@plt>
   19588:	mov	x21, xzr
   1958c:	mov	w8, #0xc                   	// #12
   19590:	str	w8, [x0]
   19594:	cbnz	x21, 19568 <gl_scratch_buffer_grow_preserve@@Base+0x7c>
   19598:	b	19534 <gl_scratch_buffer_grow_preserve@@Base+0x48>
   1959c:	add	x8, x0, #0x10
   195a0:	mov	w9, #0x400                 	// #1024
   195a4:	stp	x8, x9, [x0]
   195a8:	ret

00000000000195ac <gl_scratch_buffer_set_array_size@@Base>:
   195ac:	stp	x29, x30, [sp, #-32]!
   195b0:	umulh	x8, x1, x2
   195b4:	cmp	xzr, x8
   195b8:	stp	x20, x19, [sp, #16]
   195bc:	mov	x19, x0
   195c0:	cset	w8, ne  // ne = any
   195c4:	mov	x29, sp
   195c8:	cbz	x1, 19604 <gl_scratch_buffer_set_array_size@@Base+0x58>
   195cc:	orr	x9, x2, x1
   195d0:	lsr	x9, x9, #32
   195d4:	cbz	x9, 19604 <gl_scratch_buffer_set_array_size@@Base+0x58>
   195d8:	cbz	w8, 19604 <gl_scratch_buffer_set_array_size@@Base+0x58>
   195dc:	mov	x0, x19
   195e0:	bl	1964c <gl_scratch_buffer_set_array_size@@Base+0xa0>
   195e4:	mov	x0, x19
   195e8:	bl	19670 <gl_scratch_buffer_set_array_size@@Base+0xc4>
   195ec:	bl	b6f0 <__errno_location@plt>
   195f0:	mov	x8, x0
   195f4:	mov	w9, #0xc                   	// #12
   195f8:	mov	w0, wzr
   195fc:	str	w9, [x8]
   19600:	b	19630 <gl_scratch_buffer_set_array_size@@Base+0x84>
   19604:	ldr	x8, [x19, #8]
   19608:	mul	x20, x1, x2
   1960c:	cmp	x20, x8
   19610:	b.ls	1962c <gl_scratch_buffer_set_array_size@@Base+0x80>  // b.plast
   19614:	mov	x0, x19
   19618:	bl	1964c <gl_scratch_buffer_set_array_size@@Base+0xa0>
   1961c:	mov	x0, x20
   19620:	bl	abc0 <malloc@plt>
   19624:	cbz	x0, 1963c <gl_scratch_buffer_set_array_size@@Base+0x90>
   19628:	stp	x0, x20, [x19]
   1962c:	mov	w0, #0x1                   	// #1
   19630:	ldp	x20, x19, [sp, #16]
   19634:	ldp	x29, x30, [sp], #32
   19638:	ret
   1963c:	mov	x0, x19
   19640:	bl	19670 <gl_scratch_buffer_set_array_size@@Base+0xc4>
   19644:	mov	w0, wzr
   19648:	b	19630 <gl_scratch_buffer_set_array_size@@Base+0x84>
   1964c:	stp	x29, x30, [sp, #-16]!
   19650:	mov	x8, x0
   19654:	ldr	x0, [x8], #16
   19658:	mov	x29, sp
   1965c:	cmp	x0, x8
   19660:	b.eq	19668 <gl_scratch_buffer_set_array_size@@Base+0xbc>  // b.none
   19664:	bl	b1d0 <free@plt>
   19668:	ldp	x29, x30, [sp], #16
   1966c:	ret
   19670:	add	x8, x0, #0x10
   19674:	mov	w9, #0x400                 	// #1024
   19678:	stp	x8, x9, [x0]
   1967c:	ret

0000000000019680 <gl_set_nx_create_empty@@Base>:
   19680:	stp	x29, x30, [sp, #-16]!
   19684:	ldr	x8, [x0]
   19688:	mov	x29, sp
   1968c:	blr	x8
   19690:	ldp	x29, x30, [sp], #16
   19694:	ret

0000000000019698 <gl_set_size@@Base>:
   19698:	stp	x29, x30, [sp, #-16]!
   1969c:	ldr	x8, [x0]
   196a0:	mov	x29, sp
   196a4:	ldr	x8, [x8, #8]
   196a8:	blr	x8
   196ac:	ldp	x29, x30, [sp], #16
   196b0:	ret

00000000000196b4 <gl_set_search@@Base>:
   196b4:	stp	x29, x30, [sp, #-16]!
   196b8:	ldr	x8, [x0]
   196bc:	mov	x29, sp
   196c0:	ldr	x8, [x8, #16]
   196c4:	blr	x8
   196c8:	and	w0, w0, #0x1
   196cc:	ldp	x29, x30, [sp], #16
   196d0:	ret

00000000000196d4 <gl_set_nx_add@@Base>:
   196d4:	stp	x29, x30, [sp, #-16]!
   196d8:	ldr	x8, [x0]
   196dc:	mov	x29, sp
   196e0:	ldr	x8, [x8, #24]
   196e4:	blr	x8
   196e8:	ldp	x29, x30, [sp], #16
   196ec:	ret

00000000000196f0 <gl_set_remove@@Base>:
   196f0:	stp	x29, x30, [sp, #-16]!
   196f4:	ldr	x8, [x0]
   196f8:	mov	x29, sp
   196fc:	ldr	x8, [x8, #32]
   19700:	blr	x8
   19704:	and	w0, w0, #0x1
   19708:	ldp	x29, x30, [sp], #16
   1970c:	ret

0000000000019710 <gl_set_free@@Base>:
   19710:	stp	x29, x30, [sp, #-16]!
   19714:	ldr	x8, [x0]
   19718:	mov	x29, sp
   1971c:	ldr	x8, [x8, #40]
   19720:	blr	x8
   19724:	ldp	x29, x30, [sp], #16
   19728:	ret

000000000001972c <gl_set_iterator@@Base>:
   1972c:	stp	x29, x30, [sp, #-16]!
   19730:	ldr	x9, [x0]
   19734:	mov	x29, sp
   19738:	ldr	x9, [x9, #48]
   1973c:	blr	x9
   19740:	ldp	x29, x30, [sp], #16
   19744:	ret

0000000000019748 <gl_set_iterator_next@@Base>:
   19748:	stp	x29, x30, [sp, #-16]!
   1974c:	ldr	x8, [x0]
   19750:	mov	x29, sp
   19754:	ldr	x8, [x8, #56]
   19758:	blr	x8
   1975c:	and	w0, w0, #0x1
   19760:	ldp	x29, x30, [sp], #16
   19764:	ret

0000000000019768 <gl_set_iterator_free@@Base>:
   19768:	stp	x29, x30, [sp, #-16]!
   1976c:	ldr	x8, [x0]
   19770:	mov	x29, sp
   19774:	ldr	x8, [x8, #64]
   19778:	blr	x8
   1977c:	ldp	x29, x30, [sp], #16
   19780:	ret

0000000000019784 <get_handler@@Base>:
   19784:	ldr	x0, [x0]
   19788:	ret

000000000001978c <gl_sockets_startup@@Base>:
   1978c:	mov	w0, wzr
   19790:	ret

0000000000019794 <gl_sockets_cleanup@@Base>:
   19794:	mov	w0, wzr
   19798:	ret

000000000001979c <get_stat_atime_ns@@Base>:
   1979c:	ldr	x0, [x0, #80]
   197a0:	ret

00000000000197a4 <get_stat_ctime_ns@@Base>:
   197a4:	ldr	x0, [x0, #112]
   197a8:	ret

00000000000197ac <get_stat_mtime_ns@@Base>:
   197ac:	ldr	x0, [x0, #96]
   197b0:	ret

00000000000197b4 <get_stat_birthtime_ns@@Base>:
   197b4:	mov	x0, xzr
   197b8:	ret

00000000000197bc <get_stat_atime@@Base>:
   197bc:	ldp	x8, x1, [x0, #72]
   197c0:	mov	x0, x8
   197c4:	ret

00000000000197c8 <get_stat_ctime@@Base>:
   197c8:	ldp	x8, x1, [x0, #104]
   197cc:	mov	x0, x8
   197d0:	ret

00000000000197d4 <get_stat_mtime@@Base>:
   197d4:	ldp	x8, x1, [x0, #88]
   197d8:	mov	x0, x8
   197dc:	ret

00000000000197e0 <get_stat_birthtime@@Base>:
   197e0:	mov	x0, #0xffffffffffffffff    	// #-1
   197e4:	mov	x1, #0xffffffffffffffff    	// #-1
   197e8:	ret

00000000000197ec <stat_time_normalize@@Base>:
   197ec:	ret

00000000000197f0 <statat@@Base>:
   197f0:	stp	x29, x30, [sp, #-16]!
   197f4:	mov	w3, wzr
   197f8:	mov	x29, sp
   197fc:	bl	2ae40 <vasnprintf@@Base+0xd04>
   19800:	ldp	x29, x30, [sp], #16
   19804:	ret

0000000000019808 <lstatat@@Base>:
   19808:	stp	x29, x30, [sp, #-16]!
   1980c:	mov	w3, #0x100                 	// #256
   19810:	mov	x29, sp
   19814:	bl	2ae40 <vasnprintf@@Base+0xd04>
   19818:	ldp	x29, x30, [sp], #16
   1981c:	ret

0000000000019820 <stdopen@@Base>:
   19820:	stp	x29, x30, [sp, #-64]!
   19824:	stp	x22, x21, [sp, #32]
   19828:	stp	x20, x19, [sp, #48]
   1982c:	adrp	x20, 2d000 <vasnprintf@@Base+0x2ec4>
   19830:	adrp	x21, 2d000 <vasnprintf@@Base+0x2ec4>
   19834:	mov	w19, wzr
   19838:	add	x20, x20, #0x375
   1983c:	add	x21, x21, #0x37f
   19840:	str	x23, [sp, #16]
   19844:	mov	x29, sp
   19848:	b	19860 <stdopen@@Base+0x40>
   1984c:	bl	b6f0 <__errno_location@plt>
   19850:	ldr	w22, [x0]
   19854:	mov	w8, wzr
   19858:	cbnz	w8, 19870 <stdopen@@Base+0x50>
   1985c:	b	198e4 <stdopen@@Base+0xc4>
   19860:	mov	w1, #0x1                   	// #1
   19864:	mov	w0, w19
   19868:	bl	b390 <rpl_fcntl@plt>
   1986c:	tbnz	w0, #31, 19880 <stdopen@@Base+0x60>
   19870:	add	w19, w19, #0x1
   19874:	cmp	w19, #0x3
   19878:	b.ne	19860 <stdopen@@Base+0x40>  // b.any
   1987c:	b	198e0 <stdopen@@Base+0xc0>
   19880:	cmp	w19, #0x0
   19884:	cset	w23, eq  // eq = none
   19888:	cbz	w19, 198c0 <stdopen@@Base+0xa0>
   1988c:	mov	w0, #0xffffffff            	// #-1
   19890:	tbz	w0, #31, 198a0 <stdopen@@Base+0x80>
   19894:	mov	x0, x21
   19898:	mov	w1, w23
   1989c:	bl	ac50 <open@plt>
   198a0:	tbnz	w0, #31, 1984c <stdopen@@Base+0x2c>
   198a4:	cmp	w0, #0x3
   198a8:	b.lt	198d4 <stdopen@@Base+0xb4>  // b.tstop
   198ac:	bl	af30 <close@plt>
   198b0:	mov	w22, wzr
   198b4:	mov	w8, wzr
   198b8:	cbnz	w8, 19870 <stdopen@@Base+0x50>
   198bc:	b	198e4 <stdopen@@Base+0xc4>
   198c0:	mov	x0, x20
   198c4:	mov	w1, w23
   198c8:	bl	ac50 <open@plt>
   198cc:	tbz	w0, #31, 198a0 <stdopen@@Base+0x80>
   198d0:	b	19894 <stdopen@@Base+0x74>
   198d4:	mov	w8, #0x1                   	// #1
   198d8:	cbnz	w8, 19870 <stdopen@@Base+0x50>
   198dc:	b	198e4 <stdopen@@Base+0xc4>
   198e0:	mov	w22, wzr
   198e4:	mov	w0, w22
   198e8:	ldp	x20, x19, [sp, #48]
   198ec:	ldp	x22, x21, [sp, #32]
   198f0:	ldr	x23, [sp, #16]
   198f4:	ldp	x29, x30, [sp], #64
   198f8:	ret

00000000000198fc <strnlen1@@Base>:
   198fc:	stp	x29, x30, [sp, #-32]!
   19900:	stp	x20, x19, [sp, #16]
   19904:	mov	x19, x1
   19908:	mov	w1, wzr
   1990c:	mov	x2, x19
   19910:	mov	x29, sp
   19914:	mov	x20, x0
   19918:	bl	b440 <memchr@plt>
   1991c:	sub	x8, x0, x20
   19920:	cmp	x0, #0x0
   19924:	csinc	x0, x19, x8, eq  // eq = none
   19928:	ldp	x20, x19, [sp, #16]
   1992c:	ldp	x29, x30, [sp], #32
   19930:	ret

0000000000019934 <try_tempname@@Base>:
   19934:	sub	sp, sp, #0x80
   19938:	stp	x29, x30, [sp, #32]
   1993c:	stp	x28, x27, [sp, #48]
   19940:	stp	x26, x25, [sp, #64]
   19944:	stp	x24, x23, [sp, #80]
   19948:	stp	x22, x21, [sp, #96]
   1994c:	stp	x20, x19, [sp, #112]
   19950:	add	x29, sp, #0x20
   19954:	str	x3, [sp, #8]
   19958:	mov	x21, x2
   1995c:	mov	w23, w1
   19960:	mov	x22, x0
   19964:	bl	b6f0 <__errno_location@plt>
   19968:	ldr	w8, [x0]
   1996c:	mov	x19, x0
   19970:	mov	x0, x22
   19974:	str	w8, [sp, #4]
   19978:	bl	a890 <strlen@plt>
   1997c:	add	w8, w23, #0x6
   19980:	cmp	w8, w0
   19984:	b.gt	199b8 <try_tempname@@Base+0x84>
   19988:	sub	w8, w0, w23
   1998c:	sub	w8, w8, #0x6
   19990:	add	x25, x22, w8, sxtw
   19994:	ldr	w8, [x25]
   19998:	ldrh	w9, [x25, #4]
   1999c:	mov	w10, #0x5858                	// #22616
   199a0:	movk	w10, #0x5858, lsl #16
   199a4:	mov	w11, #0x5858                	// #22616
   199a8:	eor	w8, w8, w10
   199ac:	eor	w9, w9, w11
   199b0:	orr	w8, w8, w9
   199b4:	cbz	w8, 199e8 <try_tempname@@Base+0xb4>
   199b8:	mov	w8, #0x16                  	// #22
   199bc:	mov	w23, #0xffffffff            	// #-1
   199c0:	str	w8, [x19]
   199c4:	mov	w0, w23
   199c8:	ldp	x20, x19, [sp, #112]
   199cc:	ldp	x22, x21, [sp, #96]
   199d0:	ldp	x24, x23, [sp, #80]
   199d4:	ldp	x26, x25, [sp, #64]
   199d8:	ldp	x28, x27, [sp, #48]
   199dc:	ldp	x29, x30, [sp, #32]
   199e0:	add	sp, sp, #0x80
   199e4:	ret
   199e8:	add	x0, sp, #0x10
   199ec:	mov	x1, xzr
   199f0:	bl	ad50 <gettimeofday@plt>
   199f4:	ldp	x9, x8, [sp, #16]
   199f8:	eor	x23, x9, x8, lsl #16
   199fc:	bl	ab80 <getpid@plt>
   19a00:	adrp	x26, 40000 <base_len@@Base+0x2c984>
   19a04:	ldr	x9, [x26, #2784]
   19a08:	mov	x28, #0x2109                	// #8457
   19a0c:	sxtw	x8, w0
   19a10:	movk	x28, #0x1084, lsl #16
   19a14:	mov	w27, #0xa2f8                	// #41720
   19a18:	movk	x28, #0x842, lsl #32
   19a1c:	adrp	x20, 2d000 <vasnprintf@@Base+0x2ec4>
   19a20:	eor	x8, x23, x8
   19a24:	movk	w27, #0x3, lsl #16
   19a28:	movk	x28, #0x8421, lsl #48
   19a2c:	mov	w24, #0x3e                  	// #62
   19a30:	add	x20, x20, #0x389
   19a34:	add	x8, x8, x9
   19a38:	str	x8, [x26, #2784]
   19a3c:	b	19a6c <try_tempname@@Base+0x138>
   19a40:	ldr	w8, [x19]
   19a44:	cmp	w8, #0x11
   19a48:	cset	w8, eq  // eq = none
   19a4c:	csinv	w23, w23, wzr, eq  // eq = none
   19a50:	cbz	w8, 199c4 <try_tempname@@Base+0x90>
   19a54:	ldr	x8, [x26, #2784]
   19a58:	mov	w9, #0x1e61                	// #7777
   19a5c:	subs	w27, w27, #0x1
   19a60:	add	x8, x8, x9
   19a64:	str	x8, [x26, #2784]
   19a68:	b.eq	19b90 <try_tempname@@Base+0x25c>  // b.none
   19a6c:	ldr	x8, [x26, #2784]
   19a70:	mov	x10, #0x5b1b                	// #23323
   19a74:	movk	x10, #0xa12a, lsl #16
   19a78:	movk	x10, #0xa63, lsl #32
   19a7c:	movk	x10, #0x2219, lsl #48
   19a80:	mov	x12, #0x9d65                	// #40293
   19a84:	umulh	x10, x8, x10
   19a88:	movk	x12, #0xeb0a, lsl #16
   19a8c:	movk	x12, #0x9357, lsl #32
   19a90:	lsr	x14, x10, #9
   19a94:	lsr	x10, x10, #10
   19a98:	movk	x12, #0x48aa, lsl #48
   19a9c:	mov	x13, #0xac13                	// #44051
   19aa0:	umulh	x10, x10, x28
   19aa4:	umulh	x12, x8, x12
   19aa8:	movk	x13, #0x68cb, lsl #16
   19aac:	lsr	x10, x10, #4
   19ab0:	movk	x13, #0x544e, lsl #32
   19ab4:	msub	x10, x10, x24, x14
   19ab8:	lsr	x14, x12, #22
   19abc:	lsr	x12, x12, #23
   19ac0:	movk	x13, #0x2581, lsl #48
   19ac4:	umulh	x12, x12, x28
   19ac8:	umulh	x13, x8, x13
   19acc:	lsr	x12, x12, #4
   19ad0:	msub	x12, x12, x24, x14
   19ad4:	lsr	x14, x13, #27
   19ad8:	lsr	x13, x13, #28
   19adc:	lsr	x9, x8, #1
   19ae0:	umulh	x13, x13, x28
   19ae4:	umulh	x9, x9, x28
   19ae8:	lsr	x13, x13, #4
   19aec:	msub	x13, x13, x24, x14
   19af0:	lsr	x14, x9, #4
   19af4:	lsr	x11, x8, #3
   19af8:	mov	x15, #0x243d                	// #9277
   19afc:	msub	x8, x14, x24, x8
   19b00:	movk	x15, #0x95d9, lsl #16
   19b04:	ldrb	w8, [x20, x8]
   19b08:	movk	x15, #0x9f5e, lsl #32
   19b0c:	lsr	x9, x9, #5
   19b10:	movk	x15, #0x2332, lsl #48
   19b14:	umulh	x9, x9, x28
   19b18:	umulh	x11, x11, x15
   19b1c:	lsr	x9, x9, #4
   19b20:	msub	x9, x9, x24, x14
   19b24:	lsr	x14, x11, #12
   19b28:	lsr	x11, x11, #13
   19b2c:	ldrb	w10, [x20, x10]
   19b30:	strb	w8, [x25]
   19b34:	ldrb	w8, [x20, x12]
   19b38:	umulh	x11, x11, x28
   19b3c:	lsr	x11, x11, #4
   19b40:	msub	x11, x11, x24, x14
   19b44:	strb	w10, [x25, #2]
   19b48:	ldrb	w9, [x20, x9]
   19b4c:	ldrb	w10, [x20, x11]
   19b50:	ldrb	w11, [x20, x13]
   19b54:	strb	w8, [x25, #4]
   19b58:	ldr	x8, [sp, #8]
   19b5c:	mov	x0, x22
   19b60:	mov	x1, x21
   19b64:	strb	w9, [x25, #1]
   19b68:	strb	w10, [x25, #3]
   19b6c:	strb	w11, [x25, #5]
   19b70:	blr	x8
   19b74:	tbnz	w0, #31, 19a40 <try_tempname@@Base+0x10c>
   19b78:	ldr	w9, [sp, #4]
   19b7c:	mov	w8, wzr
   19b80:	mov	w23, w0
   19b84:	str	w9, [x19]
   19b88:	cbnz	w8, 19a54 <try_tempname@@Base+0x120>
   19b8c:	b	199c4 <try_tempname@@Base+0x90>
   19b90:	mov	w8, #0x11                  	// #17
   19b94:	b	199bc <try_tempname@@Base+0x88>

0000000000019b98 <gen_tempname@@Base>:
   19b98:	sub	sp, sp, #0x20
   19b9c:	stp	x29, x30, [sp, #16]
   19ba0:	add	x29, sp, #0x10
   19ba4:	cmp	w3, #0x3
   19ba8:	stur	w2, [x29, #-4]
   19bac:	b.cs	19bd0 <gen_tempname@@Base+0x38>  // b.hs, b.nlast
   19bb0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   19bb4:	add	x8, x8, #0xca0
   19bb8:	ldr	x3, [x8, w3, sxtw #3]
   19bbc:	sub	x2, x29, #0x4
   19bc0:	bl	aed0 <try_tempname@plt>
   19bc4:	ldp	x29, x30, [sp, #16]
   19bc8:	add	sp, sp, #0x20
   19bcc:	ret
   19bd0:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   19bd4:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   19bd8:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   19bdc:	add	x0, x0, #0x3c8
   19be0:	add	x1, x1, #0x3eb
   19be4:	add	x3, x3, #0x3f6
   19be8:	mov	w2, #0x13f                 	// #319
   19bec:	bl	b6e0 <__assert_fail@plt>
   19bf0:	stp	x29, x30, [sp, #-16]!
   19bf4:	ldr	w8, [x1]
   19bf8:	mov	w9, #0xc2                  	// #194
   19bfc:	mov	w2, #0x180                 	// #384
   19c00:	mov	x29, sp
   19c04:	and	w8, w8, #0xfffffffc
   19c08:	orr	w1, w8, w9
   19c0c:	bl	ac50 <open@plt>
   19c10:	ldp	x29, x30, [sp], #16
   19c14:	ret
   19c18:	stp	x29, x30, [sp, #-16]!
   19c1c:	mov	w1, #0x1c0                 	// #448
   19c20:	mov	x29, sp
   19c24:	bl	b7b0 <mkdir@plt>
   19c28:	ldp	x29, x30, [sp], #16
   19c2c:	ret
   19c30:	sub	sp, sp, #0x90
   19c34:	mov	x1, sp
   19c38:	stp	x29, x30, [sp, #128]
   19c3c:	add	x29, sp, #0x80
   19c40:	bl	2ae30 <vasnprintf@@Base+0xcf4>
   19c44:	cbz	w0, 19c58 <gen_tempname@@Base+0xc0>
   19c48:	bl	b6f0 <__errno_location@plt>
   19c4c:	ldr	w8, [x0]
   19c50:	cmp	w8, #0x4b
   19c54:	b.ne	19c64 <gen_tempname@@Base+0xcc>  // b.any
   19c58:	bl	b6f0 <__errno_location@plt>
   19c5c:	mov	w8, #0x11                  	// #17
   19c60:	str	w8, [x0]
   19c64:	bl	b6f0 <__errno_location@plt>
   19c68:	ldr	w8, [x0]
   19c6c:	ldp	x29, x30, [sp, #128]
   19c70:	cmp	w8, #0x2
   19c74:	csetm	w0, ne  // ne = any
   19c78:	add	sp, sp, #0x90
   19c7c:	ret

0000000000019c80 <make_timespec@@Base>:
   19c80:	ret

0000000000019c84 <timespec_cmp@@Base>:
   19c84:	cmp	x0, x2
   19c88:	b.ge	19c94 <timespec_cmp@@Base+0x10>  // b.tcont
   19c8c:	mov	w0, #0xffffffff            	// #-1
   19c90:	ret
   19c94:	b.le	19ca0 <timespec_cmp@@Base+0x1c>
   19c98:	mov	w0, #0x1                   	// #1
   19c9c:	ret
   19ca0:	sub	w0, w1, w3
   19ca4:	ret

0000000000019ca8 <timespec_sign@@Base>:
   19ca8:	orr	x8, x1, x0
   19cac:	cmp	x8, #0x0
   19cb0:	cset	w8, ne  // ne = any
   19cb4:	cmp	x0, #0x0
   19cb8:	csinv	w0, w8, wzr, ge  // ge = tcont
   19cbc:	ret

0000000000019cc0 <timespectod@@Base>:
   19cc0:	mov	x8, #0xcd6500000000        	// #225833675390976
   19cc4:	movk	x8, #0x41cd, lsl #48
   19cc8:	scvtf	d1, x1
   19ccc:	fmov	d2, x8
   19cd0:	scvtf	d0, x0
   19cd4:	fdiv	d1, d1, d2
   19cd8:	fadd	d0, d1, d0
   19cdc:	ret

0000000000019ce0 <dup_safer@@Base>:
   19ce0:	stp	x29, x30, [sp, #-16]!
   19ce4:	mov	w2, #0x3                   	// #3
   19ce8:	mov	w1, wzr
   19cec:	mov	x29, sp
   19cf0:	bl	b390 <rpl_fcntl@plt>
   19cf4:	ldp	x29, x30, [sp], #16
   19cf8:	ret

0000000000019cfc <fd_safer@@Base>:
   19cfc:	stp	x29, x30, [sp, #-48]!
   19d00:	stp	x20, x19, [sp, #32]
   19d04:	mov	w19, w0
   19d08:	cmp	w0, #0x2
   19d0c:	stp	x22, x21, [sp, #16]
   19d10:	mov	x29, sp
   19d14:	b.hi	19d40 <fd_safer@@Base+0x44>  // b.pmore
   19d18:	mov	w0, w19
   19d1c:	bl	b1c0 <dup_safer@plt>
   19d20:	mov	w20, w0
   19d24:	bl	b6f0 <__errno_location@plt>
   19d28:	ldr	w22, [x0]
   19d2c:	mov	x21, x0
   19d30:	mov	w0, w19
   19d34:	bl	af30 <close@plt>
   19d38:	mov	w19, w20
   19d3c:	str	w22, [x21]
   19d40:	mov	w0, w19
   19d44:	ldp	x20, x19, [sp, #32]
   19d48:	ldp	x22, x21, [sp, #16]
   19d4c:	ldp	x29, x30, [sp], #48
   19d50:	ret

0000000000019d54 <pipe_safer@@Base>:
   19d54:	stp	x29, x30, [sp, #-48]!
   19d58:	stp	x22, x21, [sp, #16]
   19d5c:	stp	x20, x19, [sp, #32]
   19d60:	mov	x29, sp
   19d64:	mov	x19, x0
   19d68:	bl	aa30 <pipe@plt>
   19d6c:	cbnz	w0, 19dbc <pipe_safer@@Base+0x68>
   19d70:	mov	x21, #0x100000000           	// #4294967296
   19d74:	mov	x20, #0xffffffff00000000    	// #-4294967296
   19d78:	mov	x22, x19
   19d7c:	ldr	w0, [x22]
   19d80:	bl	b770 <fd_safer@plt>
   19d84:	str	w0, [x22]
   19d88:	tbnz	w0, #31, 19da0 <pipe_safer@@Base+0x4c>
   19d8c:	adds	x21, x21, x20
   19d90:	add	x22, x22, #0x4
   19d94:	b.eq	19d7c <pipe_safer@@Base+0x28>  // b.none
   19d98:	mov	w0, wzr
   19d9c:	b	19dc0 <pipe_safer@@Base+0x6c>
   19da0:	bl	b6f0 <__errno_location@plt>
   19da4:	asr	x8, x21, #30
   19da8:	mov	x20, x0
   19dac:	ldr	w22, [x0]
   19db0:	ldr	w0, [x19, x8]
   19db4:	bl	af30 <close@plt>
   19db8:	str	w22, [x20]
   19dbc:	mov	w0, #0xffffffff            	// #-1
   19dc0:	ldp	x20, x19, [sp, #32]
   19dc4:	ldp	x22, x21, [sp, #16]
   19dc8:	ldp	x29, x30, [sp], #48
   19dcc:	ret

0000000000019dd0 <fdutimens@@Base>:
   19dd0:	sub	sp, sp, #0x140
   19dd4:	stp	x29, x30, [sp, #240]
   19dd8:	add	x29, sp, #0xf0
   19ddc:	cmp	x2, #0x0
   19de0:	sub	x8, x29, #0x20
   19de4:	stp	x24, x23, [sp, #272]
   19de8:	stp	x22, x21, [sp, #288]
   19dec:	stp	x20, x19, [sp, #304]
   19df0:	mov	x21, x2
   19df4:	mov	x20, x1
   19df8:	mov	w19, w0
   19dfc:	csel	x23, xzr, x8, eq  // eq = none
   19e00:	stp	x28, x25, [sp, #256]
   19e04:	stur	x23, [x29, #-40]
   19e08:	cbz	x2, 19e30 <fdutimens@@Base+0x60>
   19e0c:	ldr	q0, [x21]
   19e10:	mov	x0, x23
   19e14:	stur	q0, [x29, #-32]
   19e18:	ldr	q0, [x21, #16]
   19e1c:	stur	q0, [x29, #-16]
   19e20:	bl	1a164 <fdutimens@@Base+0x394>
   19e24:	mov	w22, w0
   19e28:	tbz	w22, #31, 19e38 <fdutimens@@Base+0x68>
   19e2c:	b	1a0f4 <fdutimens@@Base+0x324>
   19e30:	mov	w22, wzr
   19e34:	tbnz	w22, #31, 1a0f4 <fdutimens@@Base+0x324>
   19e38:	tbz	w19, #31, 19e54 <fdutimens@@Base+0x84>
   19e3c:	cbnz	x20, 19e54 <fdutimens@@Base+0x84>
   19e40:	bl	b6f0 <__errno_location@plt>
   19e44:	mov	w8, #0x9                   	// #9
   19e48:	str	w8, [x0]
   19e4c:	mov	w24, #0xffffffff            	// #-1
   19e50:	b	1a0f8 <fdutimens@@Base+0x328>
   19e54:	adrp	x25, 40000 <base_len@@Base+0x2c984>
   19e58:	ldr	w8, [x25, #2792]
   19e5c:	tbnz	w8, #31, 19f80 <fdutimens@@Base+0x1b0>
   19e60:	cmp	w22, #0x2
   19e64:	b.ne	19ee8 <fdutimens@@Base+0x118>  // b.any
   19e68:	add	x1, sp, #0x48
   19e6c:	tbnz	w19, #31, 19e88 <fdutimens@@Base+0xb8>
   19e70:	mov	w0, w19
   19e74:	bl	2ae20 <vasnprintf@@Base+0xce4>
   19e78:	cbz	w0, 19e94 <fdutimens@@Base+0xc4>
   19e7c:	mov	w8, wzr
   19e80:	mov	w24, #0xffffffff            	// #-1
   19e84:	b	19f7c <fdutimens@@Base+0x1ac>
   19e88:	mov	x0, x20
   19e8c:	bl	2ae10 <vasnprintf@@Base+0xcd4>
   19e90:	cbnz	w0, 19e7c <fdutimens@@Base+0xac>
   19e94:	mov	x24, x23
   19e98:	ldr	x8, [x24, #8]!
   19e9c:	mov	w9, #0x3ffffffe            	// #1073741822
   19ea0:	cmp	x8, x9
   19ea4:	b.ne	19eb8 <fdutimens@@Base+0xe8>  // b.any
   19ea8:	add	x0, sp, #0x48
   19eac:	bl	afc0 <get_stat_atime@plt>
   19eb0:	mov	x8, xzr
   19eb4:	b	19ed8 <fdutimens@@Base+0x108>
   19eb8:	mov	x24, x23
   19ebc:	ldr	x8, [x24, #24]!
   19ec0:	mov	w9, #0x3ffffffe            	// #1073741822
   19ec4:	cmp	x8, x9
   19ec8:	b.ne	19ee4 <fdutimens@@Base+0x114>  // b.any
   19ecc:	add	x0, sp, #0x48
   19ed0:	bl	af10 <get_stat_mtime@plt>
   19ed4:	mov	w8, #0x1                   	// #1
   19ed8:	lsl	x8, x8, #4
   19edc:	str	x0, [x23, x8]
   19ee0:	str	x1, [x24]
   19ee4:	add	w22, w22, #0x1
   19ee8:	tbnz	w19, #31, 19f30 <fdutimens@@Base+0x160>
   19eec:	tbnz	w19, #31, 19f28 <fdutimens@@Base+0x158>
   19ef0:	mov	w0, w19
   19ef4:	mov	x1, x23
   19ef8:	bl	ace0 <futimens@plt>
   19efc:	mov	w24, w0
   19f00:	cmp	w0, #0x1
   19f04:	b.lt	19f14 <fdutimens@@Base+0x144>  // b.tstop
   19f08:	bl	b6f0 <__errno_location@plt>
   19f0c:	mov	w8, #0x26                  	// #38
   19f10:	str	w8, [x0]
   19f14:	cbz	w24, 19f70 <fdutimens@@Base+0x1a0>
   19f18:	bl	b6f0 <__errno_location@plt>
   19f1c:	ldr	w8, [x0]
   19f20:	cmp	w8, #0x26
   19f24:	b.ne	19f70 <fdutimens@@Base+0x1a0>  // b.any
   19f28:	mov	w8, #0x1                   	// #1
   19f2c:	b	19f7c <fdutimens@@Base+0x1ac>
   19f30:	mov	w0, #0xffffff9c            	// #-100
   19f34:	mov	x1, x20
   19f38:	mov	x2, x23
   19f3c:	mov	w3, wzr
   19f40:	bl	b340 <utimensat@plt>
   19f44:	mov	w24, w0
   19f48:	cmp	w0, #0x1
   19f4c:	b.lt	19f5c <fdutimens@@Base+0x18c>  // b.tstop
   19f50:	bl	b6f0 <__errno_location@plt>
   19f54:	mov	w8, #0x26                  	// #38
   19f58:	str	w8, [x0]
   19f5c:	cbz	w24, 19f70 <fdutimens@@Base+0x1a0>
   19f60:	bl	b6f0 <__errno_location@plt>
   19f64:	ldr	w8, [x0]
   19f68:	cmp	w8, #0x26
   19f6c:	b.eq	19eec <fdutimens@@Base+0x11c>  // b.none
   19f70:	mov	w8, wzr
   19f74:	mov	w9, #0x1                   	// #1
   19f78:	str	w9, [x25, #2792]
   19f7c:	cbz	w8, 1a0f8 <fdutimens@@Base+0x328>
   19f80:	mov	w8, #0xffffffff            	// #-1
   19f84:	adrp	x9, 40000 <base_len@@Base+0x2c984>
   19f88:	str	w8, [x25, #2792]
   19f8c:	str	w8, [x9, #2796]
   19f90:	cbz	w22, 19fb0 <fdutimens@@Base+0x1e0>
   19f94:	cmp	w22, #0x3
   19f98:	b.ne	1a02c <fdutimens@@Base+0x25c>  // b.any
   19f9c:	cbz	x21, 19fb0 <fdutimens@@Base+0x1e0>
   19fa0:	add	x0, sp, #0x48
   19fa4:	sub	x1, x29, #0x28
   19fa8:	bl	1a220 <fdutimens@@Base+0x450>
   19fac:	tbnz	w0, #0, 1a15c <fdutimens@@Base+0x38c>
   19fb0:	ldur	x8, [x29, #-40]
   19fb4:	cbz	x8, 1a044 <fdutimens@@Base+0x274>
   19fb8:	ldr	x9, [x8]
   19fbc:	mov	x10, #0xf7cf                	// #63439
   19fc0:	movk	x10, #0xe353, lsl #16
   19fc4:	movk	x10, #0x9ba5, lsl #32
   19fc8:	str	x9, [sp, #40]
   19fcc:	ldr	x9, [x8, #8]
   19fd0:	movk	x10, #0x20c4, lsl #48
   19fd4:	add	x21, sp, #0x28
   19fd8:	smulh	x9, x9, x10
   19fdc:	asr	x11, x9, #7
   19fe0:	add	x9, x11, x9, lsr #63
   19fe4:	str	x9, [sp, #48]
   19fe8:	ldp	x9, x8, [x8, #16]
   19fec:	smulh	x8, x8, x10
   19ff0:	str	x9, [sp, #56]
   19ff4:	asr	x9, x8, #7
   19ff8:	add	x8, x9, x8, lsr #63
   19ffc:	str	x8, [sp, #64]
   1a000:	tbnz	w19, #31, 1a04c <fdutimens@@Base+0x27c>
   1a004:	mov	w0, w19
   1a008:	mov	x1, xzr
   1a00c:	mov	x2, x21
   1a010:	bl	ac10 <futimesat@plt>
   1a014:	cbz	w0, 1a064 <fdutimens@@Base+0x294>
   1a018:	cbz	x20, 1a0f4 <fdutimens@@Base+0x324>
   1a01c:	mov	x0, x20
   1a020:	mov	x1, x21
   1a024:	bl	b4f0 <utimes@plt>
   1a028:	b	1a05c <fdutimens@@Base+0x28c>
   1a02c:	add	x1, sp, #0x48
   1a030:	tbnz	w19, #31, 1a0e8 <fdutimens@@Base+0x318>
   1a034:	mov	w0, w19
   1a038:	bl	2ae20 <vasnprintf@@Base+0xce4>
   1a03c:	cbnz	w0, 1a0f4 <fdutimens@@Base+0x324>
   1a040:	b	19f9c <fdutimens@@Base+0x1cc>
   1a044:	mov	x21, xzr
   1a048:	tbz	w19, #31, 1a004 <fdutimens@@Base+0x234>
   1a04c:	mov	w0, #0xffffff9c            	// #-100
   1a050:	mov	x1, x20
   1a054:	mov	x2, x21
   1a058:	bl	ac10 <futimesat@plt>
   1a05c:	mov	w24, w0
   1a060:	b	1a0f8 <fdutimens@@Base+0x328>
   1a064:	cbz	x21, 1a15c <fdutimens@@Base+0x38c>
   1a068:	ldr	x25, [x21, #8]
   1a06c:	ldr	x22, [x21, #24]
   1a070:	mov	w23, #0xa11f                	// #41247
   1a074:	movk	w23, #0x7, lsl #16
   1a078:	cmp	x25, x23
   1a07c:	b.gt	1a088 <fdutimens@@Base+0x2b8>
   1a080:	cmp	x22, x23
   1a084:	b.le	1a15c <fdutimens@@Base+0x38c>
   1a088:	add	x1, sp, #0x48
   1a08c:	mov	w0, w19
   1a090:	bl	2ae20 <vasnprintf@@Base+0xce4>
   1a094:	cbnz	w0, 1a15c <fdutimens@@Base+0x38c>
   1a098:	ldr	q0, [x21]
   1a09c:	add	x9, x21, #0x10
   1a0a0:	ldr	x8, [x21]
   1a0a4:	ldr	x21, [x21, #16]
   1a0a8:	str	q0, [sp]
   1a0ac:	ldr	q0, [x9]
   1a0b0:	ldr	x9, [sp, #144]
   1a0b4:	ldr	x24, [sp, #160]
   1a0b8:	mov	x20, xzr
   1a0bc:	cmp	x25, x23
   1a0c0:	str	q0, [sp, #16]
   1a0c4:	b.le	1a120 <fdutimens@@Base+0x350>
   1a0c8:	sub	x8, x9, x8
   1a0cc:	cmp	x8, #0x1
   1a0d0:	b.ne	1a120 <fdutimens@@Base+0x350>  // b.any
   1a0d4:	add	x0, sp, #0x48
   1a0d8:	bl	aee0 <get_stat_atime_ns@plt>
   1a0dc:	cbz	x0, 1a118 <fdutimens@@Base+0x348>
   1a0e0:	mov	x20, xzr
   1a0e4:	b	1a120 <fdutimens@@Base+0x350>
   1a0e8:	mov	x0, x20
   1a0ec:	bl	2ae10 <vasnprintf@@Base+0xcd4>
   1a0f0:	cbz	w0, 19f9c <fdutimens@@Base+0x1cc>
   1a0f4:	mov	w24, #0xffffffff            	// #-1
   1a0f8:	mov	w0, w24
   1a0fc:	ldp	x20, x19, [sp, #304]
   1a100:	ldp	x22, x21, [sp, #288]
   1a104:	ldp	x24, x23, [sp, #272]
   1a108:	ldp	x28, x25, [sp, #256]
   1a10c:	ldp	x29, x30, [sp, #240]
   1a110:	add	sp, sp, #0x140
   1a114:	ret
   1a118:	mov	x20, sp
   1a11c:	str	xzr, [sp, #8]
   1a120:	cmp	x22, x23
   1a124:	b.le	1a148 <fdutimens@@Base+0x378>
   1a128:	sub	x8, x24, x21
   1a12c:	cmp	x8, #0x1
   1a130:	b.ne	1a148 <fdutimens@@Base+0x378>  // b.any
   1a134:	add	x0, sp, #0x48
   1a138:	bl	b680 <get_stat_mtime_ns@plt>
   1a13c:	cbnz	x0, 1a148 <fdutimens@@Base+0x378>
   1a140:	mov	x20, sp
   1a144:	str	xzr, [sp, #24]
   1a148:	cbz	x20, 1a15c <fdutimens@@Base+0x38c>
   1a14c:	mov	w0, w19
   1a150:	mov	x1, xzr
   1a154:	mov	x2, x20
   1a158:	bl	ac10 <futimesat@plt>
   1a15c:	mov	w24, wzr
   1a160:	b	1a0f8 <fdutimens@@Base+0x328>
   1a164:	stp	x29, x30, [sp, #-16]!
   1a168:	ldr	x10, [x0, #8]
   1a16c:	mov	w9, #0xca00                	// #51712
   1a170:	movk	w9, #0x3b9a, lsl #16
   1a174:	mov	x29, sp
   1a178:	cmp	x10, x9
   1a17c:	and	x11, x10, #0xfffffffffffffffe
   1a180:	b.cc	1a190 <fdutimens@@Base+0x3c0>  // b.lo, b.ul, b.last
   1a184:	mov	w8, #0x3ffffffe            	// #1073741822
   1a188:	cmp	x11, x8
   1a18c:	b.ne	1a1ac <fdutimens@@Base+0x3dc>  // b.any
   1a190:	ldr	x8, [x0, #24]
   1a194:	cmp	x8, x9
   1a198:	and	x9, x8, #0xfffffffffffffffe
   1a19c:	b.cc	1a1c4 <fdutimens@@Base+0x3f4>  // b.lo, b.ul, b.last
   1a1a0:	mov	w12, #0x3ffffffe            	// #1073741822
   1a1a4:	cmp	x9, x12
   1a1a8:	b.eq	1a1c4 <fdutimens@@Base+0x3f4>  // b.none
   1a1ac:	bl	b6f0 <__errno_location@plt>
   1a1b0:	mov	w8, #0x16                  	// #22
   1a1b4:	str	w8, [x0]
   1a1b8:	mov	w0, #0xffffffff            	// #-1
   1a1bc:	ldp	x29, x30, [sp], #16
   1a1c0:	ret
   1a1c4:	mov	w12, #0x3ffffffe            	// #1073741822
   1a1c8:	cmp	x11, x12
   1a1cc:	b.ne	1a1e8 <fdutimens@@Base+0x418>  // b.any
   1a1d0:	mov	w11, #0x3ffffffe            	// #1073741822
   1a1d4:	cmp	x10, x11
   1a1d8:	cset	w10, eq  // eq = none
   1a1dc:	mov	w11, #0x1                   	// #1
   1a1e0:	str	xzr, [x0]
   1a1e4:	b	1a1f0 <fdutimens@@Base+0x420>
   1a1e8:	mov	w11, wzr
   1a1ec:	mov	w10, wzr
   1a1f0:	mov	w12, #0x3ffffffe            	// #1073741822
   1a1f4:	cmp	x9, x12
   1a1f8:	b.ne	1a210 <fdutimens@@Base+0x440>  // b.any
   1a1fc:	mov	w9, #0x3ffffffe            	// #1073741822
   1a200:	cmp	x8, x9
   1a204:	cinc	w10, w10, eq  // eq = none
   1a208:	mov	w11, #0x1                   	// #1
   1a20c:	str	xzr, [x0, #16]
   1a210:	cmp	w10, #0x1
   1a214:	cinc	w0, w11, eq  // eq = none
   1a218:	ldp	x29, x30, [sp], #16
   1a21c:	ret
   1a220:	stp	x29, x30, [sp, #-32]!
   1a224:	stp	x20, x19, [sp, #16]
   1a228:	ldr	x19, [x1]
   1a22c:	mov	w9, #0x3fffffff            	// #1073741823
   1a230:	mov	x20, x0
   1a234:	mov	x29, sp
   1a238:	ldr	x8, [x19, #8]
   1a23c:	cmp	x8, x9
   1a240:	b.eq	1a280 <fdutimens@@Base+0x4b0>  // b.none
   1a244:	mov	w9, #0x3ffffffe            	// #1073741822
   1a248:	cmp	x8, x9
   1a24c:	b.ne	1a2cc <fdutimens@@Base+0x4fc>  // b.any
   1a250:	ldr	x9, [x19, #24]
   1a254:	mov	w10, #0x3ffffffe            	// #1073741822
   1a258:	cmp	x9, x10
   1a25c:	b.ne	1a268 <fdutimens@@Base+0x498>  // b.any
   1a260:	mov	w0, #0x1                   	// #1
   1a264:	b	1a30c <fdutimens@@Base+0x53c>
   1a268:	mov	w9, #0x3ffffffe            	// #1073741822
   1a26c:	cmp	x8, x9
   1a270:	b.eq	1a2b4 <fdutimens@@Base+0x4e4>  // b.none
   1a274:	mov	w9, #0x3fffffff            	// #1073741823
   1a278:	cmp	x8, x9
   1a27c:	b.ne	1a2cc <fdutimens@@Base+0x4fc>  // b.any
   1a280:	ldr	x9, [x19, #24]
   1a284:	mov	w10, #0x3fffffff            	// #1073741823
   1a288:	cmp	x9, x10
   1a28c:	b.ne	1a29c <fdutimens@@Base+0x4cc>  // b.any
   1a290:	mov	w0, wzr
   1a294:	str	xzr, [x1]
   1a298:	b	1a30c <fdutimens@@Base+0x53c>
   1a29c:	mov	w9, #0x3fffffff            	// #1073741823
   1a2a0:	cmp	x8, x9
   1a2a4:	b.eq	1a2c4 <fdutimens@@Base+0x4f4>  // b.none
   1a2a8:	mov	w9, #0x3ffffffe            	// #1073741822
   1a2ac:	cmp	x8, x9
   1a2b0:	b.ne	1a2cc <fdutimens@@Base+0x4fc>  // b.any
   1a2b4:	mov	x0, x20
   1a2b8:	bl	afc0 <get_stat_atime@plt>
   1a2bc:	stp	x0, x1, [x19]
   1a2c0:	b	1a2cc <fdutimens@@Base+0x4fc>
   1a2c4:	mov	x0, x19
   1a2c8:	bl	b7d0 <gettime@plt>
   1a2cc:	ldr	x8, [x19, #24]
   1a2d0:	mov	w9, #0x3fffffff            	// #1073741823
   1a2d4:	cmp	x8, x9
   1a2d8:	b.eq	1a300 <fdutimens@@Base+0x530>  // b.none
   1a2dc:	mov	w9, #0x3ffffffe            	// #1073741822
   1a2e0:	cmp	x8, x9
   1a2e4:	b.ne	1a308 <fdutimens@@Base+0x538>  // b.any
   1a2e8:	mov	x0, x20
   1a2ec:	bl	af10 <get_stat_mtime@plt>
   1a2f0:	mov	x8, x0
   1a2f4:	mov	w0, wzr
   1a2f8:	stp	x8, x1, [x19, #16]
   1a2fc:	b	1a30c <fdutimens@@Base+0x53c>
   1a300:	add	x0, x19, #0x10
   1a304:	bl	b7d0 <gettime@plt>
   1a308:	mov	w0, wzr
   1a30c:	ldp	x20, x19, [sp, #16]
   1a310:	ldp	x29, x30, [sp], #32
   1a314:	ret

000000000001a318 <utimens@@Base>:
   1a318:	stp	x29, x30, [sp, #-16]!
   1a31c:	mov	x2, x1
   1a320:	mov	x1, x0
   1a324:	mov	w0, #0xffffffff            	// #-1
   1a328:	mov	x29, sp
   1a32c:	bl	b090 <fdutimens@plt>
   1a330:	ldp	x29, x30, [sp], #16
   1a334:	ret

000000000001a338 <lutimens@@Base>:
   1a338:	sub	sp, sp, #0xf0
   1a33c:	stp	x29, x30, [sp, #176]
   1a340:	add	x29, sp, #0xb0
   1a344:	sub	x8, x29, #0x20
   1a348:	cmp	x1, #0x0
   1a34c:	stp	x22, x21, [sp, #208]
   1a350:	stp	x20, x19, [sp, #224]
   1a354:	mov	x20, x1
   1a358:	mov	x19, x0
   1a35c:	csel	x22, xzr, x8, eq  // eq = none
   1a360:	stp	x24, x23, [sp, #192]
   1a364:	stur	x22, [x29, #-40]
   1a368:	cbz	x1, 1a390 <lutimens@@Base+0x58>
   1a36c:	ldr	q0, [x20]
   1a370:	mov	x0, x22
   1a374:	str	q0, [x8]
   1a378:	ldr	q0, [x20, #16]
   1a37c:	str	q0, [x8, #16]
   1a380:	bl	1a164 <fdutimens@@Base+0x394>
   1a384:	mov	w21, w0
   1a388:	tbz	w21, #31, 1a398 <lutimens@@Base+0x60>
   1a38c:	b	1a4e8 <lutimens@@Base+0x1b0>
   1a390:	mov	w21, wzr
   1a394:	tbnz	w21, #31, 1a4e8 <lutimens@@Base+0x1b0>
   1a398:	adrp	x23, 40000 <base_len@@Base+0x2c984>
   1a39c:	ldr	w8, [x23, #2796]
   1a3a0:	tbnz	w8, #31, 1a47c <lutimens@@Base+0x144>
   1a3a4:	cmp	w21, #0x2
   1a3a8:	b.ne	1a41c <lutimens@@Base+0xe4>  // b.any
   1a3ac:	add	x1, sp, #0x8
   1a3b0:	mov	x0, x19
   1a3b4:	bl	2ae30 <vasnprintf@@Base+0xcf4>
   1a3b8:	cbz	w0, 1a3c8 <lutimens@@Base+0x90>
   1a3bc:	mov	w8, wzr
   1a3c0:	mov	w22, #0xffffffff            	// #-1
   1a3c4:	b	1a478 <lutimens@@Base+0x140>
   1a3c8:	mov	x24, x22
   1a3cc:	ldr	x8, [x24, #8]!
   1a3d0:	mov	w9, #0x3ffffffe            	// #1073741822
   1a3d4:	cmp	x8, x9
   1a3d8:	b.ne	1a3ec <lutimens@@Base+0xb4>  // b.any
   1a3dc:	add	x0, sp, #0x8
   1a3e0:	bl	afc0 <get_stat_atime@plt>
   1a3e4:	mov	x8, xzr
   1a3e8:	b	1a40c <lutimens@@Base+0xd4>
   1a3ec:	mov	x24, x22
   1a3f0:	ldr	x8, [x24, #24]!
   1a3f4:	mov	w9, #0x3ffffffe            	// #1073741822
   1a3f8:	cmp	x8, x9
   1a3fc:	b.ne	1a418 <lutimens@@Base+0xe0>  // b.any
   1a400:	add	x0, sp, #0x8
   1a404:	bl	af10 <get_stat_mtime@plt>
   1a408:	mov	w8, #0x1                   	// #1
   1a40c:	lsl	x8, x8, #4
   1a410:	str	x0, [x22, x8]
   1a414:	str	x1, [x24]
   1a418:	add	w21, w21, #0x1
   1a41c:	mov	w0, #0xffffff9c            	// #-100
   1a420:	mov	w3, #0x100                 	// #256
   1a424:	mov	x1, x19
   1a428:	mov	x2, x22
   1a42c:	bl	b340 <utimensat@plt>
   1a430:	mov	w22, w0
   1a434:	cmp	w0, #0x1
   1a438:	b.lt	1a448 <lutimens@@Base+0x110>  // b.tstop
   1a43c:	bl	b6f0 <__errno_location@plt>
   1a440:	mov	w8, #0x26                  	// #38
   1a444:	str	w8, [x0]
   1a448:	cbz	w22, 1a464 <lutimens@@Base+0x12c>
   1a44c:	bl	b6f0 <__errno_location@plt>
   1a450:	ldr	w8, [x0]
   1a454:	cmp	w8, #0x26
   1a458:	b.ne	1a464 <lutimens@@Base+0x12c>  // b.any
   1a45c:	mov	w8, #0x1                   	// #1
   1a460:	b	1a478 <lutimens@@Base+0x140>
   1a464:	mov	w8, wzr
   1a468:	adrp	x9, 40000 <base_len@@Base+0x2c984>
   1a46c:	mov	w10, #0x1                   	// #1
   1a470:	str	w10, [x9, #2792]
   1a474:	str	w10, [x23, #2796]
   1a478:	cbz	w8, 1a4ec <lutimens@@Base+0x1b4>
   1a47c:	mov	w8, #0xffffffff            	// #-1
   1a480:	str	w8, [x23, #2796]
   1a484:	cbz	w21, 1a4bc <lutimens@@Base+0x184>
   1a488:	cmp	w21, #0x3
   1a48c:	b.eq	1a4a0 <lutimens@@Base+0x168>  // b.none
   1a490:	add	x1, sp, #0x8
   1a494:	mov	x0, x19
   1a498:	bl	2ae30 <vasnprintf@@Base+0xcf4>
   1a49c:	cbnz	w0, 1a4e8 <lutimens@@Base+0x1b0>
   1a4a0:	cbz	x20, 1a4cc <lutimens@@Base+0x194>
   1a4a4:	add	x0, sp, #0x8
   1a4a8:	sub	x1, x29, #0x28
   1a4ac:	bl	1a220 <fdutimens@@Base+0x450>
   1a4b0:	tbz	w0, #0, 1a4cc <lutimens@@Base+0x194>
   1a4b4:	mov	w22, wzr
   1a4b8:	b	1a4ec <lutimens@@Base+0x1b4>
   1a4bc:	add	x1, sp, #0x8
   1a4c0:	mov	x0, x19
   1a4c4:	bl	2ae30 <vasnprintf@@Base+0xcf4>
   1a4c8:	cbnz	w0, 1a4e8 <lutimens@@Base+0x1b0>
   1a4cc:	ldr	w8, [sp, #24]
   1a4d0:	and	w8, w8, #0xf000
   1a4d4:	cmp	w8, #0xa, lsl #12
   1a4d8:	b.ne	1a508 <lutimens@@Base+0x1d0>  // b.any
   1a4dc:	bl	b6f0 <__errno_location@plt>
   1a4e0:	mov	w8, #0x26                  	// #38
   1a4e4:	str	w8, [x0]
   1a4e8:	mov	w22, #0xffffffff            	// #-1
   1a4ec:	mov	w0, w22
   1a4f0:	ldp	x20, x19, [sp, #224]
   1a4f4:	ldp	x22, x21, [sp, #208]
   1a4f8:	ldp	x24, x23, [sp, #192]
   1a4fc:	ldp	x29, x30, [sp, #176]
   1a500:	add	sp, sp, #0xf0
   1a504:	ret
   1a508:	ldur	x2, [x29, #-40]
   1a50c:	mov	w0, #0xffffffff            	// #-1
   1a510:	mov	x1, x19
   1a514:	bl	b090 <fdutimens@plt>
   1a518:	mov	w22, w0
   1a51c:	b	1a4ec <lutimens@@Base+0x1b4>

000000000001a520 <xnmalloc@@Base>:
   1a520:	stp	x29, x30, [sp, #-16]!
   1a524:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
   1a528:	udiv	x8, x8, x1
   1a52c:	cmp	x8, x0
   1a530:	mov	x29, sp
   1a534:	b.cc	1a548 <xnmalloc@@Base+0x28>  // b.lo, b.ul, b.last
   1a538:	mul	x0, x1, x0
   1a53c:	bl	ad70 <xmalloc@plt>
   1a540:	ldp	x29, x30, [sp], #16
   1a544:	ret
   1a548:	bl	af90 <xalloc_die@plt>

000000000001a54c <xmalloc@@Base>:
   1a54c:	stp	x29, x30, [sp, #-32]!
   1a550:	str	x19, [sp, #16]
   1a554:	mov	x29, sp
   1a558:	mov	x19, x0
   1a55c:	bl	abc0 <malloc@plt>
   1a560:	cbz	x19, 1a568 <xmalloc@@Base+0x1c>
   1a564:	cbz	x0, 1a574 <xmalloc@@Base+0x28>
   1a568:	ldr	x19, [sp, #16]
   1a56c:	ldp	x29, x30, [sp], #32
   1a570:	ret
   1a574:	bl	af90 <xalloc_die@plt>

000000000001a578 <xnrealloc@@Base>:
   1a578:	stp	x29, x30, [sp, #-16]!
   1a57c:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
   1a580:	udiv	x8, x8, x2
   1a584:	cmp	x8, x1
   1a588:	mov	x29, sp
   1a58c:	b.cc	1a5a0 <xnrealloc@@Base+0x28>  // b.lo, b.ul, b.last
   1a590:	mul	x1, x2, x1
   1a594:	bl	ac70 <xrealloc@plt>
   1a598:	ldp	x29, x30, [sp], #16
   1a59c:	ret
   1a5a0:	bl	af90 <xalloc_die@plt>

000000000001a5a4 <xrealloc@@Base>:
   1a5a4:	stp	x29, x30, [sp, #-32]!
   1a5a8:	str	x19, [sp, #16]
   1a5ac:	mov	x19, x1
   1a5b0:	mov	x29, sp
   1a5b4:	cbz	x0, 1a5c8 <xrealloc@@Base+0x24>
   1a5b8:	cbnz	x19, 1a5c8 <xrealloc@@Base+0x24>
   1a5bc:	bl	b1d0 <free@plt>
   1a5c0:	mov	x0, xzr
   1a5c4:	b	1a5d8 <xrealloc@@Base+0x34>
   1a5c8:	mov	x1, x19
   1a5cc:	bl	aea0 <realloc@plt>
   1a5d0:	cbz	x19, 1a5d8 <xrealloc@@Base+0x34>
   1a5d4:	cbz	x0, 1a5e4 <xrealloc@@Base+0x40>
   1a5d8:	ldr	x19, [sp, #16]
   1a5dc:	ldp	x29, x30, [sp], #32
   1a5e0:	ret
   1a5e4:	bl	af90 <xalloc_die@plt>

000000000001a5e8 <x2nrealloc@@Base>:
   1a5e8:	stp	x29, x30, [sp, #-16]!
   1a5ec:	ldr	x8, [x1]
   1a5f0:	mov	x29, sp
   1a5f4:	cbz	x0, 1a618 <x2nrealloc@@Base+0x30>
   1a5f8:	mov	x9, #0x5555555555555555    	// #6148914691236517205
   1a5fc:	movk	x9, #0x5554
   1a600:	udiv	x9, x9, x2
   1a604:	cmp	x9, x8
   1a608:	b.ls	1a650 <x2nrealloc@@Base+0x68>  // b.plast
   1a60c:	add	x8, x8, x8, lsr #1
   1a610:	add	x8, x8, #0x1
   1a614:	b	1a63c <x2nrealloc@@Base+0x54>
   1a618:	cbnz	x8, 1a62c <x2nrealloc@@Base+0x44>
   1a61c:	mov	w8, #0x80                  	// #128
   1a620:	udiv	x8, x8, x2
   1a624:	cmp	x2, #0x80
   1a628:	cinc	x8, x8, hi  // hi = pmore
   1a62c:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
   1a630:	udiv	x9, x9, x2
   1a634:	cmp	x9, x8
   1a638:	b.cc	1a650 <x2nrealloc@@Base+0x68>  // b.lo, b.ul, b.last
   1a63c:	str	x8, [x1]
   1a640:	mul	x1, x8, x2
   1a644:	bl	ac70 <xrealloc@plt>
   1a648:	ldp	x29, x30, [sp], #16
   1a64c:	ret
   1a650:	bl	af90 <xalloc_die@plt>

000000000001a654 <xcharalloc@@Base>:
   1a654:	stp	x29, x30, [sp, #-16]!
   1a658:	mov	x29, sp
   1a65c:	bl	ad70 <xmalloc@plt>
   1a660:	ldp	x29, x30, [sp], #16
   1a664:	ret

000000000001a668 <x2realloc@@Base>:
   1a668:	stp	x29, x30, [sp, #-16]!
   1a66c:	mov	w2, #0x1                   	// #1
   1a670:	mov	x29, sp
   1a674:	bl	b030 <x2nrealloc@plt>
   1a678:	ldp	x29, x30, [sp], #16
   1a67c:	ret

000000000001a680 <xzalloc@@Base>:
   1a680:	stp	x29, x30, [sp, #-32]!
   1a684:	stp	x20, x19, [sp, #16]
   1a688:	mov	x29, sp
   1a68c:	mov	x19, x0
   1a690:	bl	ad70 <xmalloc@plt>
   1a694:	mov	w1, wzr
   1a698:	mov	x2, x19
   1a69c:	mov	x20, x0
   1a6a0:	bl	ad40 <memset@plt>
   1a6a4:	mov	x0, x20
   1a6a8:	ldp	x20, x19, [sp, #16]
   1a6ac:	ldp	x29, x30, [sp], #32
   1a6b0:	ret

000000000001a6b4 <xcalloc@@Base>:
   1a6b4:	stp	x29, x30, [sp, #-16]!
   1a6b8:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
   1a6bc:	udiv	x8, x8, x1
   1a6c0:	cmp	x8, x0
   1a6c4:	mov	x29, sp
   1a6c8:	b.cc	1a6dc <xcalloc@@Base+0x28>  // b.lo, b.ul, b.last
   1a6cc:	bl	ae10 <calloc@plt>
   1a6d0:	cbz	x0, 1a6dc <xcalloc@@Base+0x28>
   1a6d4:	ldp	x29, x30, [sp], #16
   1a6d8:	ret
   1a6dc:	bl	af90 <xalloc_die@plt>

000000000001a6e0 <xmemdup@@Base>:
   1a6e0:	stp	x29, x30, [sp, #-48]!
   1a6e4:	stp	x20, x19, [sp, #32]
   1a6e8:	mov	x20, x0
   1a6ec:	mov	x0, x1
   1a6f0:	str	x21, [sp, #16]
   1a6f4:	mov	x29, sp
   1a6f8:	mov	x19, x1
   1a6fc:	bl	ad70 <xmalloc@plt>
   1a700:	mov	x1, x20
   1a704:	mov	x2, x19
   1a708:	mov	x21, x0
   1a70c:	bl	a800 <memcpy@plt>
   1a710:	mov	x0, x21
   1a714:	ldp	x20, x19, [sp, #32]
   1a718:	ldr	x21, [sp, #16]
   1a71c:	ldp	x29, x30, [sp], #48
   1a720:	ret

000000000001a724 <xstrdup@@Base>:
   1a724:	stp	x29, x30, [sp, #-32]!
   1a728:	str	x19, [sp, #16]
   1a72c:	mov	x29, sp
   1a730:	mov	x19, x0
   1a734:	bl	a890 <strlen@plt>
   1a738:	add	x1, x0, #0x1
   1a73c:	mov	x0, x19
   1a740:	bl	b690 <xmemdup@plt>
   1a744:	ldr	x19, [sp, #16]
   1a748:	ldp	x29, x30, [sp], #32
   1a74c:	ret

000000000001a750 <xalloc_die@@Base>:
   1a750:	stp	x29, x30, [sp, #-32]!
   1a754:	str	x19, [sp, #16]
   1a758:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1a75c:	ldr	x8, [x8, #3976]
   1a760:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1a764:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1a768:	add	x0, x0, #0x7e4
   1a76c:	ldr	w19, [x8]
   1a770:	add	x1, x1, #0x41e
   1a774:	mov	w2, #0x5                   	// #5
   1a778:	mov	x29, sp
   1a77c:	bl	b580 <dcgettext@plt>
   1a780:	adrp	x2, 2b000 <vasnprintf@@Base+0xec4>
   1a784:	mov	x3, x0
   1a788:	add	x2, x2, #0x805
   1a78c:	mov	w0, w19
   1a790:	mov	w1, wzr
   1a794:	bl	a8c0 <error@plt>
   1a798:	bl	b020 <abort@plt>

000000000001a79c <xgetcwd@@Base>:
   1a79c:	stp	x29, x30, [sp, #-32]!
   1a7a0:	mov	x0, xzr
   1a7a4:	mov	x1, xzr
   1a7a8:	str	x19, [sp, #16]
   1a7ac:	mov	x29, sp
   1a7b0:	bl	a850 <getcwd@plt>
   1a7b4:	mov	x19, x0
   1a7b8:	cbnz	x0, 1a7cc <xgetcwd@@Base+0x30>
   1a7bc:	bl	b6f0 <__errno_location@plt>
   1a7c0:	ldr	w8, [x0]
   1a7c4:	cmp	w8, #0xc
   1a7c8:	b.eq	1a7dc <xgetcwd@@Base+0x40>  // b.none
   1a7cc:	mov	x0, x19
   1a7d0:	ldr	x19, [sp, #16]
   1a7d4:	ldp	x29, x30, [sp], #32
   1a7d8:	ret
   1a7dc:	bl	af90 <xalloc_die@plt>

000000000001a7e0 <gl_list_create_empty@@Base>:
   1a7e0:	stp	x29, x30, [sp, #-16]!
   1a7e4:	and	w4, w4, #0x1
   1a7e8:	mov	x29, sp
   1a7ec:	bl	a830 <gl_list_nx_create_empty@plt>
   1a7f0:	cbz	x0, 1a7fc <gl_list_create_empty@@Base+0x1c>
   1a7f4:	ldp	x29, x30, [sp], #16
   1a7f8:	ret
   1a7fc:	bl	af90 <xalloc_die@plt>

000000000001a800 <gl_list_create@@Base>:
   1a800:	stp	x29, x30, [sp, #-16]!
   1a804:	and	w4, w4, #0x1
   1a808:	mov	x29, sp
   1a80c:	bl	af40 <gl_list_nx_create@plt>
   1a810:	cbz	x0, 1a81c <gl_list_create@@Base+0x1c>
   1a814:	ldp	x29, x30, [sp], #16
   1a818:	ret
   1a81c:	bl	af90 <xalloc_die@plt>

000000000001a820 <gl_list_node_set_value@@Base>:
   1a820:	stp	x29, x30, [sp, #-16]!
   1a824:	mov	x29, sp
   1a828:	bl	abd0 <gl_list_node_nx_set_value@plt>
   1a82c:	tbnz	w0, #31, 1a838 <gl_list_node_set_value@@Base+0x18>
   1a830:	ldp	x29, x30, [sp], #16
   1a834:	ret
   1a838:	bl	af90 <xalloc_die@plt>

000000000001a83c <gl_list_set_at@@Base>:
   1a83c:	stp	x29, x30, [sp, #-16]!
   1a840:	mov	x29, sp
   1a844:	bl	ad20 <gl_list_nx_set_at@plt>
   1a848:	cbz	x0, 1a854 <gl_list_set_at@@Base+0x18>
   1a84c:	ldp	x29, x30, [sp], #16
   1a850:	ret
   1a854:	bl	af90 <xalloc_die@plt>

000000000001a858 <gl_list_add_first@@Base>:
   1a858:	stp	x29, x30, [sp, #-16]!
   1a85c:	mov	x29, sp
   1a860:	bl	ae00 <gl_list_nx_add_first@plt>
   1a864:	cbz	x0, 1a870 <gl_list_add_first@@Base+0x18>
   1a868:	ldp	x29, x30, [sp], #16
   1a86c:	ret
   1a870:	bl	af90 <xalloc_die@plt>

000000000001a874 <gl_list_add_last@@Base>:
   1a874:	stp	x29, x30, [sp, #-16]!
   1a878:	mov	x29, sp
   1a87c:	bl	a8a0 <gl_list_nx_add_last@plt>
   1a880:	cbz	x0, 1a88c <gl_list_add_last@@Base+0x18>
   1a884:	ldp	x29, x30, [sp], #16
   1a888:	ret
   1a88c:	bl	af90 <xalloc_die@plt>

000000000001a890 <gl_list_add_before@@Base>:
   1a890:	stp	x29, x30, [sp, #-16]!
   1a894:	mov	x29, sp
   1a898:	bl	b2e0 <gl_list_nx_add_before@plt>
   1a89c:	cbz	x0, 1a8a8 <gl_list_add_before@@Base+0x18>
   1a8a0:	ldp	x29, x30, [sp], #16
   1a8a4:	ret
   1a8a8:	bl	af90 <xalloc_die@plt>

000000000001a8ac <gl_list_add_after@@Base>:
   1a8ac:	stp	x29, x30, [sp, #-16]!
   1a8b0:	mov	x29, sp
   1a8b4:	bl	ac20 <gl_list_nx_add_after@plt>
   1a8b8:	cbz	x0, 1a8c4 <gl_list_add_after@@Base+0x18>
   1a8bc:	ldp	x29, x30, [sp], #16
   1a8c0:	ret
   1a8c4:	bl	af90 <xalloc_die@plt>

000000000001a8c8 <gl_list_add_at@@Base>:
   1a8c8:	stp	x29, x30, [sp, #-16]!
   1a8cc:	mov	x29, sp
   1a8d0:	bl	b2b0 <gl_list_nx_add_at@plt>
   1a8d4:	cbz	x0, 1a8e0 <gl_list_add_at@@Base+0x18>
   1a8d8:	ldp	x29, x30, [sp], #16
   1a8dc:	ret
   1a8e0:	bl	af90 <xalloc_die@plt>

000000000001a8e4 <gl_sortedlist_add@@Base>:
   1a8e4:	stp	x29, x30, [sp, #-16]!
   1a8e8:	mov	x29, sp
   1a8ec:	bl	b250 <gl_sortedlist_nx_add@plt>
   1a8f0:	cbz	x0, 1a8fc <gl_sortedlist_add@@Base+0x18>
   1a8f4:	ldp	x29, x30, [sp], #16
   1a8f8:	ret
   1a8fc:	bl	af90 <xalloc_die@plt>

000000000001a900 <gl_map_create_empty@@Base>:
   1a900:	stp	x29, x30, [sp, #-16]!
   1a904:	mov	x29, sp
   1a908:	bl	b0e0 <gl_map_nx_create_empty@plt>
   1a90c:	cbz	x0, 1a918 <gl_map_create_empty@@Base+0x18>
   1a910:	ldp	x29, x30, [sp], #16
   1a914:	ret
   1a918:	bl	af90 <xalloc_die@plt>

000000000001a91c <gl_map_put@@Base>:
   1a91c:	stp	x29, x30, [sp, #-16]!
   1a920:	mov	x29, sp
   1a924:	bl	ad60 <gl_map_nx_put@plt>
   1a928:	tbnz	w0, #31, 1a93c <gl_map_put@@Base+0x20>
   1a92c:	cmp	w0, #0x0
   1a930:	cset	w0, ne  // ne = any
   1a934:	ldp	x29, x30, [sp], #16
   1a938:	ret
   1a93c:	bl	af90 <xalloc_die@plt>

000000000001a940 <gl_map_getput@@Base>:
   1a940:	stp	x29, x30, [sp, #-16]!
   1a944:	mov	x29, sp
   1a948:	bl	b0a0 <gl_map_nx_getput@plt>
   1a94c:	tbnz	w0, #31, 1a960 <gl_map_getput@@Base+0x20>
   1a950:	cmp	w0, #0x0
   1a954:	cset	w0, ne  // ne = any
   1a958:	ldp	x29, x30, [sp], #16
   1a95c:	ret
   1a960:	bl	af90 <xalloc_die@plt>

000000000001a964 <gl_set_create_empty@@Base>:
   1a964:	stp	x29, x30, [sp, #-16]!
   1a968:	mov	x29, sp
   1a96c:	bl	b4d0 <gl_set_nx_create_empty@plt>
   1a970:	cbz	x0, 1a97c <gl_set_create_empty@@Base+0x18>
   1a974:	ldp	x29, x30, [sp], #16
   1a978:	ret
   1a97c:	bl	af90 <xalloc_die@plt>

000000000001a980 <gl_set_add@@Base>:
   1a980:	stp	x29, x30, [sp, #-16]!
   1a984:	mov	x29, sp
   1a988:	bl	b650 <gl_set_nx_add@plt>
   1a98c:	tbnz	w0, #31, 1a9a0 <gl_set_add@@Base+0x20>
   1a990:	cmp	w0, #0x0
   1a994:	cset	w0, ne  // ne = any
   1a998:	ldp	x29, x30, [sp], #16
   1a99c:	ret
   1a9a0:	bl	af90 <xalloc_die@plt>

000000000001a9a4 <xsum@@Base>:
   1a9a4:	adds	x8, x0, x1
   1a9a8:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
   1a9ac:	ret

000000000001a9b0 <xsum3@@Base>:
   1a9b0:	stp	x29, x30, [sp, #-32]!
   1a9b4:	str	x19, [sp, #16]
   1a9b8:	mov	x29, sp
   1a9bc:	mov	x19, x2
   1a9c0:	bl	ad10 <xsum@plt>
   1a9c4:	mov	x1, x19
   1a9c8:	bl	ad10 <xsum@plt>
   1a9cc:	ldr	x19, [sp, #16]
   1a9d0:	ldp	x29, x30, [sp], #32
   1a9d4:	ret

000000000001a9d8 <xsum4@@Base>:
   1a9d8:	stp	x29, x30, [sp, #-32]!
   1a9dc:	stp	x20, x19, [sp, #16]
   1a9e0:	mov	x29, sp
   1a9e4:	mov	x19, x3
   1a9e8:	mov	x20, x2
   1a9ec:	bl	ad10 <xsum@plt>
   1a9f0:	mov	x1, x20
   1a9f4:	bl	ad10 <xsum@plt>
   1a9f8:	mov	x1, x19
   1a9fc:	bl	ad10 <xsum@plt>
   1aa00:	ldp	x20, x19, [sp, #16]
   1aa04:	ldp	x29, x30, [sp], #32
   1aa08:	ret

000000000001aa0c <xmax@@Base>:
   1aa0c:	cmp	x0, x1
   1aa10:	csel	x0, x1, x0, cc  // cc = lo, ul, last
   1aa14:	ret

000000000001aa18 <xstdopen@@Base>:
   1aa18:	stp	x29, x30, [sp, #-32]!
   1aa1c:	stp	x20, x19, [sp, #16]
   1aa20:	mov	x29, sp
   1aa24:	bl	ac40 <stdopen@plt>
   1aa28:	cbz	w0, 1aa64 <xstdopen@@Base+0x4c>
   1aa2c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1aa30:	ldr	x8, [x8, #3976]
   1aa34:	mov	w19, w0
   1aa38:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1aa3c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1aa40:	ldr	w20, [x8]
   1aa44:	add	x0, x0, #0x7e4
   1aa48:	add	x1, x1, #0x42f
   1aa4c:	mov	w2, #0x5                   	// #5
   1aa50:	bl	b580 <dcgettext@plt>
   1aa54:	mov	x2, x0
   1aa58:	mov	w0, w20
   1aa5c:	mov	w1, w19
   1aa60:	bl	a8c0 <error@plt>
   1aa64:	ldp	x20, x19, [sp, #16]
   1aa68:	ldp	x29, x30, [sp], #32
   1aa6c:	ret

000000000001aa70 <xstrndup@@Base>:
   1aa70:	stp	x29, x30, [sp, #-16]!
   1aa74:	mov	x29, sp
   1aa78:	bl	b2c0 <strndup@plt>
   1aa7c:	cbz	x0, 1aa88 <xstrndup@@Base+0x18>
   1aa80:	ldp	x29, x30, [sp], #16
   1aa84:	ret
   1aa88:	bl	af90 <xalloc_die@plt>

000000000001aa8c <xvasprintf@@Base>:
   1aa8c:	sub	sp, sp, #0x50
   1aa90:	stp	x20, x19, [sp, #64]
   1aa94:	mov	x19, x0
   1aa98:	mov	x20, x1
   1aa9c:	mov	x0, xzr
   1aaa0:	mov	x8, x19
   1aaa4:	stp	x29, x30, [sp, #48]
   1aaa8:	add	x29, sp, #0x30
   1aaac:	ldrb	w9, [x8]
   1aab0:	cmp	w9, #0x25
   1aab4:	b.ne	1aad0 <xvasprintf@@Base+0x44>  // b.any
   1aab8:	ldrb	w9, [x8, #1]
   1aabc:	cmp	w9, #0x73
   1aac0:	b.ne	1aaf0 <xvasprintf@@Base+0x64>  // b.any
   1aac4:	add	x0, x0, #0x1
   1aac8:	add	x8, x8, #0x2
   1aacc:	b	1aaac <xvasprintf@@Base+0x20>
   1aad0:	cbnz	w9, 1aaf0 <xvasprintf@@Base+0x64>
   1aad4:	ldp	q1, q0, [x20]
   1aad8:	mov	x1, sp
   1aadc:	stp	q1, q0, [sp]
   1aae0:	bl	1ab44 <xvasprintf@@Base+0xb8>
   1aae4:	mov	w8, wzr
   1aae8:	cbnz	w8, 1aaf8 <xvasprintf@@Base+0x6c>
   1aaec:	b	1ab30 <xvasprintf@@Base+0xa4>
   1aaf0:	mov	w8, #0x1                   	// #1
   1aaf4:	cbz	w8, 1ab30 <xvasprintf@@Base+0xa4>
   1aaf8:	ldp	q1, q0, [x20]
   1aafc:	sub	x0, x29, #0x8
   1ab00:	mov	x2, sp
   1ab04:	mov	x1, x19
   1ab08:	stp	q1, q0, [sp]
   1ab0c:	bl	b290 <vasprintf@plt>
   1ab10:	tbnz	w0, #31, 1ab1c <xvasprintf@@Base+0x90>
   1ab14:	ldur	x0, [x29, #-8]
   1ab18:	b	1ab30 <xvasprintf@@Base+0xa4>
   1ab1c:	bl	b6f0 <__errno_location@plt>
   1ab20:	ldr	w8, [x0]
   1ab24:	cmp	w8, #0xc
   1ab28:	b.eq	1ab40 <xvasprintf@@Base+0xb4>  // b.none
   1ab2c:	mov	x0, xzr
   1ab30:	ldp	x20, x19, [sp, #64]
   1ab34:	ldp	x29, x30, [sp, #48]
   1ab38:	add	sp, sp, #0x50
   1ab3c:	ret
   1ab40:	bl	af90 <xalloc_die@plt>
   1ab44:	sub	sp, sp, #0x60
   1ab48:	stp	x29, x30, [sp, #32]
   1ab4c:	stp	x24, x23, [sp, #48]
   1ab50:	stp	x22, x21, [sp, #64]
   1ab54:	stp	x20, x19, [sp, #80]
   1ab58:	ldp	q1, q0, [x1]
   1ab5c:	mov	x19, x1
   1ab60:	mov	x20, x0
   1ab64:	mov	x21, xzr
   1ab68:	add	x29, sp, #0x20
   1ab6c:	stp	q1, q0, [sp]
   1ab70:	cbz	x0, 1abcc <xvasprintf@@Base+0x140>
   1ab74:	ldr	x22, [sp, #8]
   1ab78:	mov	x23, x20
   1ab7c:	b	1abac <xvasprintf@@Base+0x120>
   1ab80:	ldr	x8, [sp]
   1ab84:	add	x9, x8, #0x8
   1ab88:	str	x9, [sp]
   1ab8c:	ldr	x0, [x8]
   1ab90:	bl	a890 <strlen@plt>
   1ab94:	mov	x1, x0
   1ab98:	mov	x0, x21
   1ab9c:	bl	ad10 <xsum@plt>
   1aba0:	subs	x23, x23, #0x1
   1aba4:	mov	x21, x0
   1aba8:	b.eq	1abcc <xvasprintf@@Base+0x140>  // b.none
   1abac:	ldrsw	x8, [sp, #24]
   1abb0:	tbz	w8, #31, 1ab80 <xvasprintf@@Base+0xf4>
   1abb4:	add	w9, w8, #0x8
   1abb8:	cmp	w9, #0x0
   1abbc:	str	w9, [sp, #24]
   1abc0:	b.gt	1ab80 <xvasprintf@@Base+0xf4>
   1abc4:	add	x8, x22, x8
   1abc8:	b	1ab8c <xvasprintf@@Base+0x100>
   1abcc:	lsr	x8, x21, #31
   1abd0:	cbz	x8, 1abe8 <xvasprintf@@Base+0x15c>
   1abd4:	bl	b6f0 <__errno_location@plt>
   1abd8:	mov	w8, #0x4b                  	// #75
   1abdc:	mov	x21, xzr
   1abe0:	str	w8, [x0]
   1abe4:	b	1ac64 <xvasprintf@@Base+0x1d8>
   1abe8:	add	x0, x21, #0x1
   1abec:	bl	ad70 <xmalloc@plt>
   1abf0:	mov	x21, x0
   1abf4:	mov	x22, x0
   1abf8:	cbz	x20, 1ac60 <xvasprintf@@Base+0x1d4>
   1abfc:	mov	x22, x21
   1ac00:	b	1ac3c <xvasprintf@@Base+0x1b0>
   1ac04:	ldr	x8, [x19]
   1ac08:	add	x9, x8, #0x8
   1ac0c:	str	x9, [x19]
   1ac10:	ldr	x23, [x8]
   1ac14:	mov	x0, x23
   1ac18:	bl	a890 <strlen@plt>
   1ac1c:	mov	x24, x0
   1ac20:	mov	x0, x22
   1ac24:	mov	x1, x23
   1ac28:	mov	x2, x24
   1ac2c:	bl	a800 <memcpy@plt>
   1ac30:	subs	x20, x20, #0x1
   1ac34:	add	x22, x22, x24
   1ac38:	b.eq	1ac60 <xvasprintf@@Base+0x1d4>  // b.none
   1ac3c:	ldrsw	x8, [x19, #24]
   1ac40:	tbz	w8, #31, 1ac04 <xvasprintf@@Base+0x178>
   1ac44:	add	w9, w8, #0x8
   1ac48:	cmp	w9, #0x0
   1ac4c:	str	w9, [x19, #24]
   1ac50:	b.gt	1ac04 <xvasprintf@@Base+0x178>
   1ac54:	ldr	x9, [x19, #8]
   1ac58:	add	x8, x9, x8
   1ac5c:	b	1ac10 <xvasprintf@@Base+0x184>
   1ac60:	strb	wzr, [x22]
   1ac64:	mov	x0, x21
   1ac68:	ldp	x20, x19, [sp, #80]
   1ac6c:	ldp	x22, x21, [sp, #64]
   1ac70:	ldp	x24, x23, [sp, #48]
   1ac74:	ldp	x29, x30, [sp, #32]
   1ac78:	add	sp, sp, #0x60
   1ac7c:	ret

000000000001ac80 <xasprintf@@Base>:
   1ac80:	sub	sp, sp, #0x120
   1ac84:	stp	x29, x30, [sp, #256]
   1ac88:	add	x29, sp, #0x100
   1ac8c:	mov	x8, #0xffffffffffffffc8    	// #-56
   1ac90:	mov	x9, sp
   1ac94:	sub	x10, x29, #0x78
   1ac98:	movk	x8, #0xff80, lsl #32
   1ac9c:	add	x11, x29, #0x20
   1aca0:	add	x9, x9, #0x80
   1aca4:	add	x10, x10, #0x38
   1aca8:	stp	x9, x8, [x29, #-16]
   1acac:	stp	x11, x10, [x29, #-32]
   1acb0:	stp	x1, x2, [x29, #-120]
   1acb4:	stp	x3, x4, [x29, #-104]
   1acb8:	stp	x5, x6, [x29, #-88]
   1acbc:	stur	x7, [x29, #-72]
   1acc0:	stp	q0, q1, [sp]
   1acc4:	ldp	q0, q1, [x29, #-32]
   1acc8:	sub	x1, x29, #0x40
   1accc:	str	x28, [sp, #272]
   1acd0:	stp	q2, q3, [sp, #32]
   1acd4:	stp	q4, q5, [sp, #64]
   1acd8:	stp	q6, q7, [sp, #96]
   1acdc:	stp	q0, q1, [x29, #-64]
   1ace0:	bl	b5e0 <xvasprintf@plt>
   1ace4:	ldr	x28, [sp, #272]
   1ace8:	ldp	x29, x30, [sp, #256]
   1acec:	add	sp, sp, #0x120
   1acf0:	ret

000000000001acf4 <asnprintf@@Base>:
   1acf4:	sub	sp, sp, #0x100
   1acf8:	stp	x29, x30, [sp, #240]
   1acfc:	add	x29, sp, #0xf0
   1ad00:	mov	x8, #0xffffffffffffffd8    	// #-40
   1ad04:	mov	x9, sp
   1ad08:	sub	x10, x29, #0x68
   1ad0c:	movk	x8, #0xff80, lsl #32
   1ad10:	add	x11, x29, #0x10
   1ad14:	add	x9, x9, #0x80
   1ad18:	add	x10, x10, #0x28
   1ad1c:	stp	x9, x8, [x29, #-16]
   1ad20:	stp	x11, x10, [x29, #-32]
   1ad24:	stp	x3, x4, [x29, #-104]
   1ad28:	stp	x5, x6, [x29, #-88]
   1ad2c:	stur	x7, [x29, #-72]
   1ad30:	stp	q1, q2, [sp, #16]
   1ad34:	str	q0, [sp]
   1ad38:	ldp	q0, q1, [x29, #-32]
   1ad3c:	sub	x3, x29, #0x40
   1ad40:	stp	q3, q4, [sp, #48]
   1ad44:	stp	q5, q6, [sp, #80]
   1ad48:	str	q7, [sp, #112]
   1ad4c:	stp	q0, q1, [x29, #-64]
   1ad50:	bl	b240 <vasnprintf@plt>
   1ad54:	ldp	x29, x30, [sp, #240]
   1ad58:	add	sp, sp, #0x100
   1ad5c:	ret

000000000001ad60 <chdir_long@@Base>:
   1ad60:	sub	sp, sp, #0x50
   1ad64:	stp	x29, x30, [sp, #16]
   1ad68:	stp	x24, x23, [sp, #32]
   1ad6c:	stp	x22, x21, [sp, #48]
   1ad70:	stp	x20, x19, [sp, #64]
   1ad74:	add	x29, sp, #0x10
   1ad78:	mov	x20, x0
   1ad7c:	bl	b1b0 <chdir@plt>
   1ad80:	mov	w21, w0
   1ad84:	cbz	w0, 1af48 <chdir_long@@Base+0x1e8>
   1ad88:	bl	b6f0 <__errno_location@plt>
   1ad8c:	ldr	w8, [x0]
   1ad90:	cmp	w8, #0x24
   1ad94:	b.ne	1af48 <chdir_long@@Base+0x1e8>  // b.any
   1ad98:	mov	x19, x0
   1ad9c:	mov	x0, x20
   1ada0:	bl	a890 <strlen@plt>
   1ada4:	mov	x21, x0
   1ada8:	add	x0, sp, #0x8
   1adac:	bl	1b014 <chdir_long@@Base+0x2b4>
   1adb0:	cbz	x21, 1af94 <chdir_long@@Base+0x234>
   1adb4:	cmp	x21, #0xfff
   1adb8:	b.ls	1afb4 <chdir_long@@Base+0x254>  // b.plast
   1adbc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1adc0:	add	x1, x1, #0x63b
   1adc4:	mov	x0, x20
   1adc8:	bl	b2d0 <strspn@plt>
   1adcc:	mov	x22, x20
   1add0:	cbz	x0, 1ae6c <chdir_long@@Base+0x10c>
   1add4:	mov	x23, x0
   1add8:	cmp	x0, #0x2
   1addc:	b.ne	1ae24 <chdir_long@@Base+0xc4>  // b.any
   1ade0:	add	x0, x20, #0x3
   1ade4:	sub	x2, x21, #0x3
   1ade8:	mov	w1, #0x2f                  	// #47
   1adec:	mov	w23, #0x2f                  	// #47
   1adf0:	bl	b440 <memchr@plt>
   1adf4:	cbz	x0, 1ae40 <chdir_long@@Base+0xe0>
   1adf8:	mov	x22, x0
   1adfc:	strb	wzr, [x0]
   1ae00:	add	x0, sp, #0x8
   1ae04:	mov	x1, x20
   1ae08:	bl	1b020 <chdir_long@@Base+0x2c0>
   1ae0c:	strb	w23, [x22]
   1ae10:	cbz	w0, 1ae58 <chdir_long@@Base+0xf8>
   1ae14:	mov	w8, #0x2                   	// #2
   1ae18:	mov	x22, x20
   1ae1c:	cbnz	w8, 1af04 <chdir_long@@Base+0x1a4>
   1ae20:	b	1ae6c <chdir_long@@Base+0x10c>
   1ae24:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1ae28:	add	x1, x1, #0x63b
   1ae2c:	add	x0, sp, #0x8
   1ae30:	bl	1b020 <chdir_long@@Base+0x2c0>
   1ae34:	cbnz	w0, 1af34 <chdir_long@@Base+0x1d4>
   1ae38:	add	x22, x20, x23
   1ae3c:	b	1ae6c <chdir_long@@Base+0x10c>
   1ae40:	mov	w8, #0x24                  	// #36
   1ae44:	str	w8, [x19]
   1ae48:	mov	w8, #0x1                   	// #1
   1ae4c:	mov	x22, x20
   1ae50:	cbnz	w8, 1af04 <chdir_long@@Base+0x1a4>
   1ae54:	b	1ae6c <chdir_long@@Base+0x10c>
   1ae58:	add	x0, x22, #0x1
   1ae5c:	bl	1b068 <chdir_long@@Base+0x308>
   1ae60:	mov	x22, x0
   1ae64:	mov	w8, wzr
   1ae68:	cbnz	w8, 1af04 <chdir_long@@Base+0x1a4>
   1ae6c:	ldrb	w8, [x22]
   1ae70:	cmp	w8, #0x2f
   1ae74:	b.eq	1afd4 <chdir_long@@Base+0x274>  // b.none
   1ae78:	add	x21, x20, x21
   1ae7c:	cmp	x22, x21
   1ae80:	b.hi	1aff4 <chdir_long@@Base+0x294>  // b.pmore
   1ae84:	mov	w23, #0x2f                  	// #47
   1ae88:	mov	w24, #0x24                  	// #36
   1ae8c:	b	1ae9c <chdir_long@@Base+0x13c>
   1ae90:	mov	w8, #0x1                   	// #1
   1ae94:	str	w24, [x19]
   1ae98:	cbnz	w8, 1af04 <chdir_long@@Base+0x1a4>
   1ae9c:	sub	x8, x21, x22
   1aea0:	cmp	x8, #0x1, lsl #12
   1aea4:	b.lt	1af10 <chdir_long@@Base+0x1b0>  // b.tstop
   1aea8:	mov	w1, #0x2f                  	// #47
   1aeac:	mov	w2, #0x1000                	// #4096
   1aeb0:	mov	x0, x22
   1aeb4:	bl	b330 <memrchr@plt>
   1aeb8:	cbz	x0, 1ae90 <chdir_long@@Base+0x130>
   1aebc:	sub	x8, x0, x22
   1aec0:	mov	x20, x0
   1aec4:	cmp	x8, #0x1, lsl #12
   1aec8:	strb	wzr, [x0]
   1aecc:	b.ge	1af74 <chdir_long@@Base+0x214>  // b.tcont
   1aed0:	add	x0, sp, #0x8
   1aed4:	mov	x1, x22
   1aed8:	bl	1b020 <chdir_long@@Base+0x2c0>
   1aedc:	strb	w23, [x20]
   1aee0:	cbz	w0, 1aef0 <chdir_long@@Base+0x190>
   1aee4:	mov	w8, #0x2                   	// #2
   1aee8:	cbz	w8, 1ae9c <chdir_long@@Base+0x13c>
   1aeec:	b	1af04 <chdir_long@@Base+0x1a4>
   1aef0:	add	x0, x20, #0x1
   1aef4:	bl	1b068 <chdir_long@@Base+0x308>
   1aef8:	mov	x22, x0
   1aefc:	mov	w8, wzr
   1af00:	cbz	wzr, 1ae9c <chdir_long@@Base+0x13c>
   1af04:	cmp	w8, #0x2
   1af08:	b.eq	1af34 <chdir_long@@Base+0x1d4>  // b.none
   1af0c:	b	1af44 <chdir_long@@Base+0x1e4>
   1af10:	cmp	x22, x21
   1af14:	b.cs	1af28 <chdir_long@@Base+0x1c8>  // b.hs, b.nlast
   1af18:	add	x0, sp, #0x8
   1af1c:	mov	x1, x22
   1af20:	bl	1b020 <chdir_long@@Base+0x2c0>
   1af24:	cbnz	w0, 1af34 <chdir_long@@Base+0x1d4>
   1af28:	add	x0, sp, #0x8
   1af2c:	bl	1b094 <chdir_long@@Base+0x334>
   1af30:	cbz	w0, 1af64 <chdir_long@@Base+0x204>
   1af34:	ldr	w20, [x19]
   1af38:	add	x0, sp, #0x8
   1af3c:	bl	1b0ac <chdir_long@@Base+0x34c>
   1af40:	str	w20, [x19]
   1af44:	mov	w21, #0xffffffff            	// #-1
   1af48:	mov	w0, w21
   1af4c:	ldp	x20, x19, [sp, #64]
   1af50:	ldp	x22, x21, [sp, #48]
   1af54:	ldp	x24, x23, [sp, #32]
   1af58:	ldp	x29, x30, [sp, #16]
   1af5c:	add	sp, sp, #0x50
   1af60:	ret
   1af64:	add	x0, sp, #0x8
   1af68:	bl	1b0ac <chdir_long@@Base+0x34c>
   1af6c:	mov	w21, wzr
   1af70:	b	1af48 <chdir_long@@Base+0x1e8>
   1af74:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1af78:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1af7c:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1af80:	add	x0, x0, #0x49c
   1af84:	add	x1, x1, #0x451
   1af88:	add	x3, x3, #0x45e
   1af8c:	mov	w2, #0xb3                  	// #179
   1af90:	bl	b6e0 <__assert_fail@plt>
   1af94:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1af98:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1af9c:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1afa0:	add	x0, x0, #0x449
   1afa4:	add	x1, x1, #0x451
   1afa8:	add	x3, x3, #0x45e
   1afac:	mov	w2, #0x7e                  	// #126
   1afb0:	bl	b6e0 <__assert_fail@plt>
   1afb4:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1afb8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1afbc:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1afc0:	add	x0, x0, #0x475
   1afc4:	add	x1, x1, #0x451
   1afc8:	add	x3, x3, #0x45e
   1afcc:	mov	w2, #0x7f                  	// #127
   1afd0:	bl	b6e0 <__assert_fail@plt>
   1afd4:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1afd8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1afdc:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1afe0:	add	x0, x0, #0x481
   1afe4:	add	x1, x1, #0x451
   1afe8:	add	x3, x3, #0x45e
   1afec:	mov	w2, #0xa2                  	// #162
   1aff0:	bl	b6e0 <__assert_fail@plt>
   1aff4:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1aff8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1affc:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1b000:	add	x0, x0, #0x48d
   1b004:	add	x1, x1, #0x451
   1b008:	add	x3, x3, #0x45e
   1b00c:	mov	w2, #0xa3                  	// #163
   1b010:	bl	b6e0 <__assert_fail@plt>
   1b014:	mov	w8, #0xffffff9c            	// #-100
   1b018:	str	w8, [x0]
   1b01c:	ret
   1b020:	stp	x29, x30, [sp, #-32]!
   1b024:	stp	x20, x19, [sp, #16]
   1b028:	mov	x19, x0
   1b02c:	ldr	w0, [x0]
   1b030:	mov	w2, #0x4900                	// #18688
   1b034:	mov	x29, sp
   1b038:	bl	b6d0 <openat@plt>
   1b03c:	tbnz	w0, #31, 1b058 <chdir_long@@Base+0x2f8>
   1b040:	mov	w20, w0
   1b044:	mov	x0, x19
   1b048:	bl	1b0ac <chdir_long@@Base+0x34c>
   1b04c:	mov	w0, wzr
   1b050:	str	w20, [x19]
   1b054:	b	1b05c <chdir_long@@Base+0x2fc>
   1b058:	mov	w0, #0xffffffff            	// #-1
   1b05c:	ldp	x20, x19, [sp, #16]
   1b060:	ldp	x29, x30, [sp], #32
   1b064:	ret
   1b068:	stp	x29, x30, [sp, #-32]!
   1b06c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1b070:	add	x1, x1, #0x63b
   1b074:	str	x19, [sp, #16]
   1b078:	mov	x29, sp
   1b07c:	mov	x19, x0
   1b080:	bl	b2d0 <strspn@plt>
   1b084:	add	x0, x19, x0
   1b088:	ldr	x19, [sp, #16]
   1b08c:	ldp	x29, x30, [sp], #32
   1b090:	ret
   1b094:	stp	x29, x30, [sp, #-16]!
   1b098:	ldr	w0, [x0]
   1b09c:	mov	x29, sp
   1b0a0:	bl	a8e0 <fchdir@plt>
   1b0a4:	ldp	x29, x30, [sp], #16
   1b0a8:	ret
   1b0ac:	stp	x29, x30, [sp, #-16]!
   1b0b0:	ldr	w0, [x0]
   1b0b4:	mov	x29, sp
   1b0b8:	tbnz	w0, #31, 1b0c4 <chdir_long@@Base+0x364>
   1b0bc:	bl	af30 <close@plt>
   1b0c0:	cbnz	w0, 1b0cc <chdir_long@@Base+0x36c>
   1b0c4:	ldp	x29, x30, [sp], #16
   1b0c8:	ret
   1b0cc:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1b0d0:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1b0d4:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1b0d8:	add	x0, x0, #0x4af
   1b0dc:	add	x1, x1, #0x451
   1b0e0:	add	x3, x3, #0x4bc
   1b0e4:	mov	w2, #0x40                  	// #64
   1b0e8:	bl	b6e0 <__assert_fail@plt>

000000000001b0ec <rpl_fcntl@@Base>:
   1b0ec:	sub	sp, sp, #0xe0
   1b0f0:	stp	x29, x30, [sp, #208]
   1b0f4:	add	x29, sp, #0xd0
   1b0f8:	mov	x8, #0xffffffffffffffd0    	// #-48
   1b0fc:	mov	x9, sp
   1b100:	sub	x10, x29, #0x50
   1b104:	movk	x8, #0xff80, lsl #32
   1b108:	add	x11, x29, #0x10
   1b10c:	cmp	w1, #0xb
   1b110:	add	x9, x9, #0x80
   1b114:	add	x10, x10, #0x30
   1b118:	stp	x2, x3, [x29, #-80]
   1b11c:	stp	x4, x5, [x29, #-64]
   1b120:	stp	x6, x7, [x29, #-48]
   1b124:	stp	q1, q2, [sp, #16]
   1b128:	stp	q3, q4, [sp, #48]
   1b12c:	str	q0, [sp]
   1b130:	stp	q5, q6, [sp, #80]
   1b134:	str	q7, [sp, #112]
   1b138:	stp	x9, x8, [x29, #-16]
   1b13c:	stp	x11, x10, [x29, #-32]
   1b140:	b.hi	1b198 <rpl_fcntl@@Base+0xac>  // b.pmore
   1b144:	mov	w8, #0x1                   	// #1
   1b148:	lsl	w8, w8, w1
   1b14c:	mov	w9, #0x514                 	// #1300
   1b150:	tst	w8, w9
   1b154:	b.ne	1b1cc <rpl_fcntl@@Base+0xe0>  // b.any
   1b158:	mov	w9, #0xa0a                 	// #2570
   1b15c:	tst	w8, w9
   1b160:	b.ne	1b1c4 <rpl_fcntl@@Base+0xd8>  // b.any
   1b164:	cbnz	w1, 1b198 <rpl_fcntl@@Base+0xac>
   1b168:	ldursw	x8, [x29, #-8]
   1b16c:	tbz	w8, #31, 1b180 <rpl_fcntl@@Base+0x94>
   1b170:	add	w9, w8, #0x8
   1b174:	cmp	w9, #0x0
   1b178:	stur	w9, [x29, #-8]
   1b17c:	b.le	1b290 <rpl_fcntl@@Base+0x1a4>
   1b180:	ldur	x8, [x29, #-32]
   1b184:	add	x9, x8, #0x8
   1b188:	stur	x9, [x29, #-32]
   1b18c:	ldr	w1, [x8]
   1b190:	bl	1b29c <rpl_fcntl@@Base+0x1b0>
   1b194:	b	1b1f8 <rpl_fcntl@@Base+0x10c>
   1b198:	sub	w8, w1, #0x400
   1b19c:	cmp	w8, #0xa
   1b1a0:	b.hi	1b248 <rpl_fcntl@@Base+0x15c>  // b.pmore
   1b1a4:	mov	w9, #0x1                   	// #1
   1b1a8:	lsl	w9, w9, w8
   1b1ac:	mov	w10, #0x285                 	// #645
   1b1b0:	tst	w9, w10
   1b1b4:	b.ne	1b1cc <rpl_fcntl@@Base+0xe0>  // b.any
   1b1b8:	mov	w10, #0x502                 	// #1282
   1b1bc:	tst	w9, w10
   1b1c0:	b.eq	1b204 <rpl_fcntl@@Base+0x118>  // b.none
   1b1c4:	bl	b3b0 <fcntl@plt>
   1b1c8:	b	1b1f8 <rpl_fcntl@@Base+0x10c>
   1b1cc:	ldursw	x8, [x29, #-8]
   1b1d0:	tbz	w8, #31, 1b1e4 <rpl_fcntl@@Base+0xf8>
   1b1d4:	add	w9, w8, #0x8
   1b1d8:	cmp	w9, #0x0
   1b1dc:	stur	w9, [x29, #-8]
   1b1e0:	b.le	1b23c <rpl_fcntl@@Base+0x150>
   1b1e4:	ldur	x8, [x29, #-32]
   1b1e8:	add	x9, x8, #0x8
   1b1ec:	stur	x9, [x29, #-32]
   1b1f0:	ldr	w2, [x8]
   1b1f4:	bl	b3b0 <fcntl@plt>
   1b1f8:	ldp	x29, x30, [sp, #208]
   1b1fc:	add	sp, sp, #0xe0
   1b200:	ret
   1b204:	cmp	w8, #0x6
   1b208:	b.ne	1b248 <rpl_fcntl@@Base+0x15c>  // b.any
   1b20c:	ldursw	x8, [x29, #-8]
   1b210:	tbz	w8, #31, 1b224 <rpl_fcntl@@Base+0x138>
   1b214:	add	w9, w8, #0x8
   1b218:	cmp	w9, #0x0
   1b21c:	stur	w9, [x29, #-8]
   1b220:	b.le	1b278 <rpl_fcntl@@Base+0x18c>
   1b224:	ldur	x8, [x29, #-32]
   1b228:	add	x9, x8, #0x8
   1b22c:	stur	x9, [x29, #-32]
   1b230:	ldr	w1, [x8]
   1b234:	bl	1b2b8 <rpl_fcntl@@Base+0x1cc>
   1b238:	b	1b1f8 <rpl_fcntl@@Base+0x10c>
   1b23c:	ldur	x9, [x29, #-24]
   1b240:	add	x8, x9, x8
   1b244:	b	1b1f0 <rpl_fcntl@@Base+0x104>
   1b248:	ldursw	x8, [x29, #-8]
   1b24c:	tbz	w8, #31, 1b260 <rpl_fcntl@@Base+0x174>
   1b250:	add	w9, w8, #0x8
   1b254:	cmp	w9, #0x0
   1b258:	stur	w9, [x29, #-8]
   1b25c:	b.le	1b284 <rpl_fcntl@@Base+0x198>
   1b260:	ldur	x8, [x29, #-32]
   1b264:	add	x9, x8, #0x8
   1b268:	stur	x9, [x29, #-32]
   1b26c:	ldr	x2, [x8]
   1b270:	bl	b3b0 <fcntl@plt>
   1b274:	b	1b1f8 <rpl_fcntl@@Base+0x10c>
   1b278:	ldur	x9, [x29, #-24]
   1b27c:	add	x8, x9, x8
   1b280:	b	1b230 <rpl_fcntl@@Base+0x144>
   1b284:	ldur	x9, [x29, #-24]
   1b288:	add	x8, x9, x8
   1b28c:	b	1b26c <rpl_fcntl@@Base+0x180>
   1b290:	ldur	x9, [x29, #-24]
   1b294:	add	x8, x9, x8
   1b298:	b	1b18c <rpl_fcntl@@Base+0xa0>
   1b29c:	stp	x29, x30, [sp, #-16]!
   1b2a0:	mov	w2, w1
   1b2a4:	mov	w1, wzr
   1b2a8:	mov	x29, sp
   1b2ac:	bl	b3b0 <fcntl@plt>
   1b2b0:	ldp	x29, x30, [sp], #16
   1b2b4:	ret
   1b2b8:	stp	x29, x30, [sp, #-48]!
   1b2bc:	stp	x22, x21, [sp, #16]
   1b2c0:	adrp	x22, 40000 <base_len@@Base+0x2c984>
   1b2c4:	ldr	w8, [x22, #2800]
   1b2c8:	stp	x20, x19, [sp, #32]
   1b2cc:	mov	w20, w1
   1b2d0:	mov	w21, w0
   1b2d4:	mov	x29, sp
   1b2d8:	tbnz	w8, #31, 1b338 <rpl_fcntl@@Base+0x24c>
   1b2dc:	mov	w1, #0x406                 	// #1030
   1b2e0:	mov	w0, w21
   1b2e4:	mov	w2, w20
   1b2e8:	bl	b3b0 <fcntl@plt>
   1b2ec:	mov	w19, w0
   1b2f0:	tbz	w0, #31, 1b328 <rpl_fcntl@@Base+0x23c>
   1b2f4:	bl	b6f0 <__errno_location@plt>
   1b2f8:	ldr	w8, [x0]
   1b2fc:	cmp	w8, #0x16
   1b300:	b.ne	1b328 <rpl_fcntl@@Base+0x23c>  // b.any
   1b304:	mov	w0, w21
   1b308:	mov	w1, w20
   1b30c:	bl	1b29c <rpl_fcntl@@Base+0x1b0>
   1b310:	mov	w19, w0
   1b314:	tbnz	w0, #31, 1b330 <rpl_fcntl@@Base+0x244>
   1b318:	mov	w8, #0xffffffff            	// #-1
   1b31c:	str	w8, [x22, #2800]
   1b320:	tbz	w19, #31, 1b34c <rpl_fcntl@@Base+0x260>
   1b324:	b	1b39c <rpl_fcntl@@Base+0x2b0>
   1b328:	mov	w8, #0x1                   	// #1
   1b32c:	str	w8, [x22, #2800]
   1b330:	tbz	w19, #31, 1b34c <rpl_fcntl@@Base+0x260>
   1b334:	b	1b39c <rpl_fcntl@@Base+0x2b0>
   1b338:	mov	w0, w21
   1b33c:	mov	w1, w20
   1b340:	bl	1b29c <rpl_fcntl@@Base+0x1b0>
   1b344:	mov	w19, w0
   1b348:	tbnz	w19, #31, 1b39c <rpl_fcntl@@Base+0x2b0>
   1b34c:	ldr	w8, [x22, #2800]
   1b350:	cmn	w8, #0x1
   1b354:	b.ne	1b39c <rpl_fcntl@@Base+0x2b0>  // b.any
   1b358:	mov	w1, #0x1                   	// #1
   1b35c:	mov	w0, w19
   1b360:	bl	b3b0 <fcntl@plt>
   1b364:	tbnz	w0, #31, 1b380 <rpl_fcntl@@Base+0x294>
   1b368:	orr	w2, w0, #0x1
   1b36c:	mov	w1, #0x2                   	// #2
   1b370:	mov	w0, w19
   1b374:	bl	b3b0 <fcntl@plt>
   1b378:	cmn	w0, #0x1
   1b37c:	b.ne	1b39c <rpl_fcntl@@Base+0x2b0>  // b.any
   1b380:	bl	b6f0 <__errno_location@plt>
   1b384:	ldr	w21, [x0]
   1b388:	mov	x20, x0
   1b38c:	mov	w0, w19
   1b390:	bl	af30 <close@plt>
   1b394:	mov	w19, #0xffffffff            	// #-1
   1b398:	str	w21, [x20]
   1b39c:	mov	w0, w19
   1b3a0:	ldp	x20, x19, [sp, #32]
   1b3a4:	ldp	x22, x21, [sp, #16]
   1b3a8:	ldp	x29, x30, [sp], #48
   1b3ac:	ret

000000000001b3b0 <_getopt_internal_r@@Base>:
   1b3b0:	sub	sp, sp, #0x70
   1b3b4:	cmp	w0, #0x1
   1b3b8:	stp	x29, x30, [sp, #16]
   1b3bc:	stp	x28, x27, [sp, #32]
   1b3c0:	stp	x26, x25, [sp, #48]
   1b3c4:	stp	x24, x23, [sp, #64]
   1b3c8:	stp	x22, x21, [sp, #80]
   1b3cc:	stp	x20, x19, [sp, #96]
   1b3d0:	add	x29, sp, #0x10
   1b3d4:	b.lt	1b6a0 <_getopt_internal_r@@Base+0x2f0>  // b.tstop
   1b3d8:	ldp	w8, w25, [x6]
   1b3dc:	mov	x19, x6
   1b3e0:	mov	w26, w5
   1b3e4:	mov	x23, x4
   1b3e8:	mov	x24, x3
   1b3ec:	mov	x21, x2
   1b3f0:	mov	w22, w0
   1b3f4:	mov	x20, x1
   1b3f8:	str	xzr, [x6, #16]
   1b3fc:	cbz	w8, 1b424 <_getopt_internal_r@@Base+0x74>
   1b400:	ldr	w8, [x19, #24]
   1b404:	cbz	w8, 1b424 <_getopt_internal_r@@Base+0x74>
   1b408:	ldrb	w8, [x21]
   1b40c:	cmp	w8, #0x2d
   1b410:	b.eq	1b41c <_getopt_internal_r@@Base+0x6c>  // b.none
   1b414:	cmp	w8, #0x2b
   1b418:	b.ne	1b438 <_getopt_internal_r@@Base+0x88>  // b.any
   1b41c:	add	x21, x21, #0x1
   1b420:	b	1b438 <_getopt_internal_r@@Base+0x88>
   1b424:	mov	x0, x21
   1b428:	mov	x1, x19
   1b42c:	mov	w2, w7
   1b430:	bl	1b8b8 <_getopt_internal_r@@Base+0x508>
   1b434:	mov	x21, x0
   1b438:	ldrb	w9, [x21]
   1b43c:	ldr	x8, [x19, #32]
   1b440:	cmp	w9, #0x3a
   1b444:	csel	w25, wzr, w25, eq  // eq = none
   1b448:	cbz	x8, 1b4c0 <_getopt_internal_r@@Base+0x110>
   1b44c:	ldrb	w8, [x8]
   1b450:	cbz	w8, 1b4c0 <_getopt_internal_r@@Base+0x110>
   1b454:	ldr	x28, [x19, #32]
   1b458:	mov	x0, x21
   1b45c:	add	x27, x28, #0x1
   1b460:	str	x27, [x19, #32]
   1b464:	ldrb	w26, [x28]
   1b468:	mov	w1, w26
   1b46c:	bl	b300 <strchr@plt>
   1b470:	ldrb	w8, [x28, #1]
   1b474:	cbnz	w8, 1b484 <_getopt_internal_r@@Base+0xd4>
   1b478:	ldr	w8, [x19]
   1b47c:	add	w8, w8, #0x1
   1b480:	str	w8, [x19]
   1b484:	orr	w8, w26, #0x1
   1b488:	cmp	w8, #0x3b
   1b48c:	b.eq	1b514 <_getopt_internal_r@@Base+0x164>  // b.none
   1b490:	cbz	x0, 1b514 <_getopt_internal_r@@Base+0x164>
   1b494:	ldrb	w8, [x0]
   1b498:	cmp	w8, #0x57
   1b49c:	b.ne	1b524 <_getopt_internal_r@@Base+0x174>  // b.any
   1b4a0:	cbz	x24, 1b524 <_getopt_internal_r@@Base+0x174>
   1b4a4:	ldrb	w8, [x0, #1]
   1b4a8:	cmp	w8, #0x3b
   1b4ac:	b.ne	1b524 <_getopt_internal_r@@Base+0x174>  // b.any
   1b4b0:	ldrb	w8, [x27]
   1b4b4:	cbz	w8, 1b734 <_getopt_internal_r@@Base+0x384>
   1b4b8:	str	x27, [x19, #16]
   1b4bc:	b	1b7c8 <_getopt_internal_r@@Base+0x418>
   1b4c0:	ldr	w9, [x19, #48]
   1b4c4:	ldr	w8, [x19]
   1b4c8:	cmp	w9, w8
   1b4cc:	b.le	1b4d4 <_getopt_internal_r@@Base+0x124>
   1b4d0:	str	w8, [x19, #48]
   1b4d4:	ldr	w9, [x19, #44]
   1b4d8:	cmp	w9, w8
   1b4dc:	b.le	1b4e4 <_getopt_internal_r@@Base+0x134>
   1b4e0:	str	w8, [x19, #44]
   1b4e4:	ldr	w9, [x19, #40]
   1b4e8:	cmp	w9, #0x1
   1b4ec:	b.ne	1b5a8 <_getopt_internal_r@@Base+0x1f8>  // b.any
   1b4f0:	ldp	w10, w9, [x19, #44]
   1b4f4:	cmp	w10, w9
   1b4f8:	b.eq	1b54c <_getopt_internal_r@@Base+0x19c>  // b.none
   1b4fc:	cmp	w9, w8
   1b500:	b.eq	1b54c <_getopt_internal_r@@Base+0x19c>  // b.none
   1b504:	mov	x0, x20
   1b508:	mov	x1, x19
   1b50c:	bl	1b954 <_getopt_internal_r@@Base+0x5a4>
   1b510:	b	1b558 <_getopt_internal_r@@Base+0x1a8>
   1b514:	cbnz	w25, 1b784 <_getopt_internal_r@@Base+0x3d4>
   1b518:	str	w26, [x19, #8]
   1b51c:	mov	w26, #0x3f                  	// #63
   1b520:	b	1b6a4 <_getopt_internal_r@@Base+0x2f4>
   1b524:	ldrb	w8, [x0, #1]
   1b528:	cmp	w8, #0x3a
   1b52c:	b.ne	1b6a4 <_getopt_internal_r@@Base+0x2f4>  // b.any
   1b530:	ldrb	w9, [x0, #2]
   1b534:	ldrb	w8, [x27]
   1b538:	cmp	w9, #0x3a
   1b53c:	b.ne	1b6c8 <_getopt_internal_r@@Base+0x318>  // b.any
   1b540:	cbnz	w8, 1b6cc <_getopt_internal_r@@Base+0x31c>
   1b544:	str	xzr, [x19, #16]
   1b548:	b	1b6dc <_getopt_internal_r@@Base+0x32c>
   1b54c:	cmp	w9, w8
   1b550:	b.eq	1b558 <_getopt_internal_r@@Base+0x1a8>  // b.none
   1b554:	str	w8, [x19, #44]
   1b558:	ldr	w8, [x19]
   1b55c:	cmp	w8, w22
   1b560:	b.ge	1b5a4 <_getopt_internal_r@@Base+0x1f4>  // b.tcont
   1b564:	sxtw	x9, w8
   1b568:	add	x9, x20, x9, lsl #3
   1b56c:	b	1b584 <_getopt_internal_r@@Base+0x1d4>
   1b570:	add	w8, w8, #0x1
   1b574:	cmp	w22, w8
   1b578:	add	x9, x9, #0x8
   1b57c:	str	w8, [x19]
   1b580:	b.eq	1b5a0 <_getopt_internal_r@@Base+0x1f0>  // b.none
   1b584:	ldr	x10, [x9]
   1b588:	ldrb	w11, [x10]
   1b58c:	cmp	w11, #0x2d
   1b590:	b.ne	1b570 <_getopt_internal_r@@Base+0x1c0>  // b.any
   1b594:	ldrb	w10, [x10, #1]
   1b598:	cbz	w10, 1b570 <_getopt_internal_r@@Base+0x1c0>
   1b59c:	b	1b5a4 <_getopt_internal_r@@Base+0x1f4>
   1b5a0:	mov	w8, w22
   1b5a4:	str	w8, [x19, #48]
   1b5a8:	ldrsw	x27, [x19]
   1b5ac:	cmp	w27, w22
   1b5b0:	b.eq	1b608 <_getopt_internal_r@@Base+0x258>  // b.none
   1b5b4:	ldr	x0, [x20, x27, lsl #3]
   1b5b8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   1b5bc:	add	x1, x1, #0xc31
   1b5c0:	bl	b120 <strcmp@plt>
   1b5c4:	cbnz	w0, 1b608 <_getopt_internal_r@@Base+0x258>
   1b5c8:	ldp	w9, w10, [x19, #44]
   1b5cc:	add	w8, w27, #0x1
   1b5d0:	str	w8, [x19]
   1b5d4:	cmp	w9, w10
   1b5d8:	b.eq	1b5f4 <_getopt_internal_r@@Base+0x244>  // b.none
   1b5dc:	cmp	w10, w8
   1b5e0:	b.eq	1b5f4 <_getopt_internal_r@@Base+0x244>  // b.none
   1b5e4:	mov	x0, x20
   1b5e8:	mov	x1, x19
   1b5ec:	bl	1b954 <_getopt_internal_r@@Base+0x5a4>
   1b5f0:	b	1b600 <_getopt_internal_r@@Base+0x250>
   1b5f4:	cmp	w9, w10
   1b5f8:	b.ne	1b600 <_getopt_internal_r@@Base+0x250>  // b.any
   1b5fc:	str	w8, [x19, #44]
   1b600:	str	w22, [x19, #48]
   1b604:	str	w22, [x19]
   1b608:	ldrsw	x8, [x19]
   1b60c:	cmp	w8, w22
   1b610:	b.ne	1b628 <_getopt_internal_r@@Base+0x278>  // b.any
   1b614:	ldp	w8, w9, [x19, #44]
   1b618:	cmp	w8, w9
   1b61c:	b.eq	1b6a0 <_getopt_internal_r@@Base+0x2f0>  // b.none
   1b620:	str	w8, [x19]
   1b624:	b	1b6a0 <_getopt_internal_r@@Base+0x2f0>
   1b628:	ldr	x9, [x20, x8, lsl #3]
   1b62c:	ldrb	w10, [x9]
   1b630:	cmp	w10, #0x2d
   1b634:	b.ne	1b680 <_getopt_internal_r@@Base+0x2d0>  // b.any
   1b638:	mov	x27, x9
   1b63c:	ldrb	w1, [x27, #1]!
   1b640:	cbz	w1, 1b680 <_getopt_internal_r@@Base+0x2d0>
   1b644:	cbz	x24, 1b82c <_getopt_internal_r@@Base+0x47c>
   1b648:	cmp	w1, #0x2d
   1b64c:	b.ne	1b6e4 <_getopt_internal_r@@Base+0x334>  // b.any
   1b650:	add	x8, x9, #0x2
   1b654:	str	x8, [x19, #32]
   1b658:	adrp	x8, 2b000 <vasnprintf@@Base+0xec4>
   1b65c:	add	x8, x8, #0xc31
   1b660:	mov	w0, w22
   1b664:	mov	x1, x20
   1b668:	mov	x2, x21
   1b66c:	mov	x3, x24
   1b670:	mov	x4, x23
   1b674:	mov	w5, w26
   1b678:	str	x8, [sp]
   1b67c:	b	1b7f8 <_getopt_internal_r@@Base+0x448>
   1b680:	ldr	w9, [x19, #40]
   1b684:	cbz	w9, 1b6a0 <_getopt_internal_r@@Base+0x2f0>
   1b688:	add	w9, w8, #0x1
   1b68c:	str	w9, [x19]
   1b690:	ldr	x8, [x20, x8, lsl #3]
   1b694:	mov	w26, #0x1                   	// #1
   1b698:	str	x8, [x19, #16]
   1b69c:	b	1b6a4 <_getopt_internal_r@@Base+0x2f4>
   1b6a0:	mov	w26, #0xffffffff            	// #-1
   1b6a4:	mov	w0, w26
   1b6a8:	ldp	x20, x19, [sp, #96]
   1b6ac:	ldp	x22, x21, [sp, #80]
   1b6b0:	ldp	x24, x23, [sp, #64]
   1b6b4:	ldp	x26, x25, [sp, #48]
   1b6b8:	ldp	x28, x27, [sp, #32]
   1b6bc:	ldp	x29, x30, [sp, #16]
   1b6c0:	add	sp, sp, #0x70
   1b6c4:	ret
   1b6c8:	cbz	w8, 1b75c <_getopt_internal_r@@Base+0x3ac>
   1b6cc:	ldr	w8, [x19]
   1b6d0:	str	x27, [x19, #16]
   1b6d4:	add	w8, w8, #0x1
   1b6d8:	str	w8, [x19]
   1b6dc:	str	xzr, [x19, #32]
   1b6e0:	b	1b6a4 <_getopt_internal_r@@Base+0x2f4>
   1b6e4:	cbz	w26, 1b82c <_getopt_internal_r@@Base+0x47c>
   1b6e8:	ldrb	w8, [x9, #2]
   1b6ec:	cbz	w8, 1b820 <_getopt_internal_r@@Base+0x470>
   1b6f0:	adrp	x8, 2a000 <rpl_re_set_registers@@Base+0xb458>
   1b6f4:	add	x8, x8, #0xf9a
   1b6f8:	mov	w0, w22
   1b6fc:	mov	x1, x20
   1b700:	mov	x2, x21
   1b704:	mov	x3, x24
   1b708:	mov	x4, x23
   1b70c:	mov	w5, w26
   1b710:	mov	x6, x19
   1b714:	mov	w7, w25
   1b718:	str	x27, [x19, #32]
   1b71c:	str	x8, [sp]
   1b720:	bl	1ba1c <_getopt_internal_r@@Base+0x66c>
   1b724:	mov	w26, w0
   1b728:	cmn	w0, #0x1
   1b72c:	b.ne	1b6a4 <_getopt_internal_r@@Base+0x2f4>  // b.any
   1b730:	b	1b82c <_getopt_internal_r@@Base+0x47c>
   1b734:	ldrsw	x8, [x19]
   1b738:	cmp	w8, w22
   1b73c:	b.ne	1b7c0 <_getopt_internal_r@@Base+0x410>  // b.any
   1b740:	cbnz	w25, 1b840 <_getopt_internal_r@@Base+0x490>
   1b744:	str	w26, [x19, #8]
   1b748:	ldrb	w8, [x21]
   1b74c:	mov	w9, #0x3f                  	// #63
   1b750:	cmp	w8, #0x3a
   1b754:	csel	w26, w8, w9, eq  // eq = none
   1b758:	b	1b6a4 <_getopt_internal_r@@Base+0x2f4>
   1b75c:	ldrsw	x8, [x19]
   1b760:	cmp	w8, w22
   1b764:	b.ne	1b80c <_getopt_internal_r@@Base+0x45c>  // b.any
   1b768:	cbnz	w25, 1b87c <_getopt_internal_r@@Base+0x4cc>
   1b76c:	str	w26, [x19, #8]
   1b770:	ldrb	w8, [x21]
   1b774:	mov	w9, #0x3f                  	// #63
   1b778:	cmp	w8, #0x3a
   1b77c:	csel	w26, w8, w9, eq  // eq = none
   1b780:	b	1b6dc <_getopt_internal_r@@Base+0x32c>
   1b784:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1b788:	ldr	x8, [x8, #3816]
   1b78c:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1b790:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1b794:	add	x0, x0, #0x7e4
   1b798:	ldr	x21, [x8]
   1b79c:	add	x1, x1, #0x4e1
   1b7a0:	mov	w2, #0x5                   	// #5
   1b7a4:	bl	b580 <dcgettext@plt>
   1b7a8:	ldr	x2, [x20]
   1b7ac:	mov	x1, x0
   1b7b0:	mov	x0, x21
   1b7b4:	mov	w3, w26
   1b7b8:	bl	b7f0 <fprintf@plt>
   1b7bc:	b	1b518 <_getopt_internal_r@@Base+0x168>
   1b7c0:	ldr	x8, [x20, x8, lsl #3]
   1b7c4:	str	x8, [x19, #16]
   1b7c8:	ldr	x8, [x19, #16]
   1b7cc:	str	xzr, [x19, #16]
   1b7d0:	mov	w0, w22
   1b7d4:	mov	x1, x20
   1b7d8:	str	x8, [x19, #32]
   1b7dc:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1b7e0:	add	x8, x8, #0x526
   1b7e4:	str	x8, [sp]
   1b7e8:	mov	x2, x21
   1b7ec:	mov	x3, x24
   1b7f0:	mov	x4, x23
   1b7f4:	mov	w5, wzr
   1b7f8:	mov	x6, x19
   1b7fc:	mov	w7, w25
   1b800:	bl	1ba1c <_getopt_internal_r@@Base+0x66c>
   1b804:	mov	w26, w0
   1b808:	b	1b6a4 <_getopt_internal_r@@Base+0x2f4>
   1b80c:	add	w9, w8, #0x1
   1b810:	str	w9, [x19]
   1b814:	ldr	x8, [x20, x8, lsl #3]
   1b818:	str	x8, [x19, #16]
   1b81c:	b	1b6dc <_getopt_internal_r@@Base+0x32c>
   1b820:	mov	x0, x21
   1b824:	bl	b300 <strchr@plt>
   1b828:	cbz	x0, 1b6f0 <_getopt_internal_r@@Base+0x340>
   1b82c:	ldrsw	x8, [x19]
   1b830:	ldr	x8, [x20, x8, lsl #3]
   1b834:	add	x8, x8, #0x1
   1b838:	str	x8, [x19, #32]
   1b83c:	b	1b454 <_getopt_internal_r@@Base+0xa4>
   1b840:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1b844:	ldr	x8, [x8, #3816]
   1b848:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1b84c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1b850:	add	x0, x0, #0x7e4
   1b854:	ldr	x22, [x8]
   1b858:	add	x1, x1, #0x4fd
   1b85c:	mov	w2, #0x5                   	// #5
   1b860:	bl	b580 <dcgettext@plt>
   1b864:	ldr	x2, [x20]
   1b868:	mov	x1, x0
   1b86c:	mov	x0, x22
   1b870:	mov	w3, w26
   1b874:	bl	b7f0 <fprintf@plt>
   1b878:	b	1b744 <_getopt_internal_r@@Base+0x394>
   1b87c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1b880:	ldr	x8, [x8, #3816]
   1b884:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1b888:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1b88c:	add	x0, x0, #0x7e4
   1b890:	ldr	x22, [x8]
   1b894:	add	x1, x1, #0x4fd
   1b898:	mov	w2, #0x5                   	// #5
   1b89c:	bl	b580 <dcgettext@plt>
   1b8a0:	ldr	x2, [x20]
   1b8a4:	mov	x1, x0
   1b8a8:	mov	x0, x22
   1b8ac:	mov	w3, w26
   1b8b0:	bl	b7f0 <fprintf@plt>
   1b8b4:	b	1b76c <_getopt_internal_r@@Base+0x3bc>
   1b8b8:	stp	x29, x30, [sp, #-32]!
   1b8bc:	stp	x20, x19, [sp, #16]
   1b8c0:	ldr	w8, [x1]
   1b8c4:	mov	x19, x1
   1b8c8:	mov	x20, x0
   1b8cc:	mov	x29, sp
   1b8d0:	cbnz	w8, 1b8dc <_getopt_internal_r@@Base+0x52c>
   1b8d4:	mov	w8, #0x1                   	// #1
   1b8d8:	str	w8, [x19]
   1b8dc:	ldr	w8, [x19]
   1b8e0:	str	xzr, [x19, #32]
   1b8e4:	stp	w8, w8, [x19, #44]
   1b8e8:	ldrb	w8, [x20]
   1b8ec:	cmp	w8, #0x2b
   1b8f0:	b.eq	1b90c <_getopt_internal_r@@Base+0x55c>  // b.none
   1b8f4:	cmp	w8, #0x2d
   1b8f8:	b.ne	1b918 <_getopt_internal_r@@Base+0x568>  // b.any
   1b8fc:	mov	w8, #0x2                   	// #2
   1b900:	str	w8, [x19, #40]
   1b904:	add	x20, x20, #0x1
   1b908:	b	1b930 <_getopt_internal_r@@Base+0x580>
   1b90c:	str	wzr, [x19, #40]
   1b910:	add	x20, x20, #0x1
   1b914:	b	1b930 <_getopt_internal_r@@Base+0x580>
   1b918:	cbnz	w2, 1b92c <_getopt_internal_r@@Base+0x57c>
   1b91c:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1b920:	add	x0, x0, #0x52a
   1b924:	bl	b720 <getenv@plt>
   1b928:	cbz	x0, 1b948 <_getopt_internal_r@@Base+0x598>
   1b92c:	str	wzr, [x19, #40]
   1b930:	mov	w8, #0x1                   	// #1
   1b934:	str	w8, [x19, #24]
   1b938:	mov	x0, x20
   1b93c:	ldp	x20, x19, [sp, #16]
   1b940:	ldp	x29, x30, [sp], #32
   1b944:	ret
   1b948:	mov	w8, #0x1                   	// #1
   1b94c:	str	w8, [x19, #40]
   1b950:	b	1b930 <_getopt_internal_r@@Base+0x580>
   1b954:	ldp	w9, w11, [x1, #44]
   1b958:	ldr	w8, [x1]
   1b95c:	sxtw	x10, w11
   1b960:	cmp	w8, w11
   1b964:	b.le	1ba0c <_getopt_internal_r@@Base+0x65c>
   1b968:	cmp	w9, w11
   1b96c:	b.ge	1ba0c <_getopt_internal_r@@Base+0x65c>  // b.tcont
   1b970:	add	x11, x0, x10, lsl #3
   1b974:	mov	w12, w9
   1b978:	mov	w13, w8
   1b97c:	sub	w15, w13, w10
   1b980:	sub	w14, w10, w12
   1b984:	cmp	w15, w14
   1b988:	b.le	1b9cc <_getopt_internal_r@@Base+0x61c>
   1b98c:	cmp	w14, #0x1
   1b990:	b.lt	1b9bc <_getopt_internal_r@@Base+0x60c>  // b.tstop
   1b994:	sub	w16, w13, w14
   1b998:	sub	w15, w10, w12
   1b99c:	add	x16, x0, w16, sxtw #3
   1b9a0:	add	x17, x0, w12, sxtw #3
   1b9a4:	ldr	x18, [x16]
   1b9a8:	ldr	x2, [x17]
   1b9ac:	subs	x15, x15, #0x1
   1b9b0:	str	x18, [x17], #8
   1b9b4:	str	x2, [x16], #8
   1b9b8:	b.ne	1b9a4 <_getopt_internal_r@@Base+0x5f4>  // b.any
   1b9bc:	sub	w13, w13, w14
   1b9c0:	cmp	w13, w10
   1b9c4:	b.gt	1ba04 <_getopt_internal_r@@Base+0x654>
   1b9c8:	b	1ba0c <_getopt_internal_r@@Base+0x65c>
   1b9cc:	cmp	w15, #0x1
   1b9d0:	b.lt	1b9f8 <_getopt_internal_r@@Base+0x648>  // b.tstop
   1b9d4:	sub	w14, w13, w10
   1b9d8:	add	x16, x0, w12, sxtw #3
   1b9dc:	mov	x17, x11
   1b9e0:	ldr	x18, [x17]
   1b9e4:	ldr	x2, [x16]
   1b9e8:	subs	x14, x14, #0x1
   1b9ec:	str	x18, [x16], #8
   1b9f0:	str	x2, [x17], #8
   1b9f4:	b.ne	1b9e0 <_getopt_internal_r@@Base+0x630>  // b.any
   1b9f8:	add	w12, w12, w15
   1b9fc:	cmp	w13, w10
   1ba00:	b.le	1ba0c <_getopt_internal_r@@Base+0x65c>
   1ba04:	cmp	w10, w12
   1ba08:	b.gt	1b97c <_getopt_internal_r@@Base+0x5cc>
   1ba0c:	sub	w9, w9, w10
   1ba10:	add	w9, w9, w8
   1ba14:	stp	w9, w8, [x1, #44]
   1ba18:	ret
   1ba1c:	sub	sp, sp, #0xb0
   1ba20:	stp	x29, x30, [sp, #80]
   1ba24:	add	x29, sp, #0x50
   1ba28:	stp	x28, x27, [sp, #96]
   1ba2c:	stp	x26, x25, [sp, #112]
   1ba30:	stp	x24, x23, [sp, #128]
   1ba34:	stp	x22, x21, [sp, #144]
   1ba38:	stp	x20, x19, [sp, #160]
   1ba3c:	stp	w7, w5, [x29, #-8]
   1ba40:	ldr	x22, [x6, #32]
   1ba44:	ldr	x27, [x29, #96]
   1ba48:	mov	x19, x6
   1ba4c:	mov	x23, x3
   1ba50:	mov	x26, x1
   1ba54:	mov	x21, x22
   1ba58:	stur	x4, [x29, #-24]
   1ba5c:	ldrb	w8, [x21]
   1ba60:	cbz	w8, 1ba78 <_getopt_internal_r@@Base+0x6c8>
   1ba64:	cmp	w8, #0x3d
   1ba68:	b.eq	1ba78 <_getopt_internal_r@@Base+0x6c8>  // b.none
   1ba6c:	add	x21, x21, #0x1
   1ba70:	ldrb	w8, [x21]
   1ba74:	cbnz	w8, 1ba64 <_getopt_internal_r@@Base+0x6b4>
   1ba78:	ldr	x8, [x19, #32]
   1ba7c:	ldr	x28, [x23]
   1ba80:	mov	w24, wzr
   1ba84:	stur	x2, [x29, #-32]
   1ba88:	sub	x20, x21, x8
   1ba8c:	stur	w0, [x29, #-36]
   1ba90:	cbz	x28, 1bad4 <_getopt_internal_r@@Base+0x724>
   1ba94:	mov	x25, x23
   1ba98:	b	1baa8 <_getopt_internal_r@@Base+0x6f8>
   1ba9c:	ldr	x28, [x25, #32]!
   1baa0:	add	w24, w24, #0x1
   1baa4:	cbz	x28, 1bad4 <_getopt_internal_r@@Base+0x724>
   1baa8:	mov	x0, x28
   1baac:	mov	x1, x22
   1bab0:	mov	x2, x20
   1bab4:	bl	acf0 <strncmp@plt>
   1bab8:	cbnz	w0, 1ba9c <_getopt_internal_r@@Base+0x6ec>
   1babc:	mov	x0, x28
   1bac0:	bl	a890 <strlen@plt>
   1bac4:	cmp	x20, x0
   1bac8:	b.ne	1ba9c <_getopt_internal_r@@Base+0x6ec>  // b.any
   1bacc:	cbnz	x25, 1bc98 <_getopt_internal_r@@Base+0x8e8>
   1bad0:	b	1badc <_getopt_internal_r@@Base+0x72c>
   1bad4:	mov	x25, xzr
   1bad8:	cbnz	x25, 1bc98 <_getopt_internal_r@@Base+0x8e8>
   1badc:	ldr	x0, [x23]
   1bae0:	str	x26, [sp, #32]
   1bae4:	cbz	x0, 1bc14 <_getopt_internal_r@@Base+0x864>
   1bae8:	mov	w8, w24
   1baec:	mov	x22, xzr
   1baf0:	mov	w26, wzr
   1baf4:	mov	x28, xzr
   1baf8:	mov	x25, xzr
   1bafc:	stp	x8, x27, [sp, #16]
   1bb00:	mov	w8, #0xffffffff            	// #-1
   1bb04:	mov	x27, x23
   1bb08:	str	wzr, [sp, #40]
   1bb0c:	stur	x8, [x29, #-16]
   1bb10:	str	x23, [sp, #8]
   1bb14:	b	1bb30 <_getopt_internal_r@@Base+0x780>
   1bb18:	mov	w8, w22
   1bb1c:	mov	x25, x27
   1bb20:	stur	x8, [x29, #-16]
   1bb24:	ldr	x0, [x27, #32]!
   1bb28:	add	x22, x22, #0x1
   1bb2c:	cbz	x0, 1bc04 <_getopt_internal_r@@Base+0x854>
   1bb30:	ldr	x1, [x19, #32]
   1bb34:	mov	x2, x20
   1bb38:	bl	acf0 <strncmp@plt>
   1bb3c:	cbnz	w0, 1bb24 <_getopt_internal_r@@Base+0x774>
   1bb40:	cbz	x25, 1bb18 <_getopt_internal_r@@Base+0x768>
   1bb44:	ldur	w8, [x29, #-4]
   1bb48:	cbnz	w8, 1bb6c <_getopt_internal_r@@Base+0x7bc>
   1bb4c:	ldr	w8, [x25, #8]
   1bb50:	ldr	w9, [x27, #8]
   1bb54:	cmp	w8, w9
   1bb58:	b.ne	1bb6c <_getopt_internal_r@@Base+0x7bc>  // b.any
   1bb5c:	ldr	x8, [x25, #16]
   1bb60:	ldr	x9, [x27, #16]
   1bb64:	cmp	x8, x9
   1bb68:	b.eq	1bbec <_getopt_internal_r@@Base+0x83c>  // b.none
   1bb6c:	cbnz	w26, 1bb24 <_getopt_internal_r@@Base+0x774>
   1bb70:	ldur	w8, [x29, #-8]
   1bb74:	cbz	w8, 1bbcc <_getopt_internal_r@@Base+0x81c>
   1bb78:	cbnz	x28, 1bbd8 <_getopt_internal_r@@Base+0x828>
   1bb7c:	ldr	x23, [sp, #16]
   1bb80:	mov	x0, x23
   1bb84:	bl	abc0 <malloc@plt>
   1bb88:	ldr	w8, [sp, #40]
   1bb8c:	cmp	x0, #0x0
   1bb90:	mov	x28, x0
   1bb94:	cset	w26, eq  // eq = none
   1bb98:	csinc	w8, w8, wzr, eq  // eq = none
   1bb9c:	str	w8, [sp, #40]
   1bba0:	cbz	x0, 1bbc0 <_getopt_internal_r@@Base+0x810>
   1bba4:	mov	x0, x28
   1bba8:	mov	w1, wzr
   1bbac:	mov	x2, x23
   1bbb0:	bl	ad40 <memset@plt>
   1bbb4:	ldur	x8, [x29, #-16]
   1bbb8:	mov	w9, #0x1                   	// #1
   1bbbc:	strb	w9, [x28, w8, sxtw]
   1bbc0:	ldr	x23, [sp, #8]
   1bbc4:	cbnz	x28, 1bbe0 <_getopt_internal_r@@Base+0x830>
   1bbc8:	b	1bb24 <_getopt_internal_r@@Base+0x774>
   1bbcc:	mov	w26, #0x1                   	// #1
   1bbd0:	cbnz	x28, 1bbe0 <_getopt_internal_r@@Base+0x830>
   1bbd4:	b	1bb24 <_getopt_internal_r@@Base+0x774>
   1bbd8:	mov	w26, wzr
   1bbdc:	cbz	x28, 1bb24 <_getopt_internal_r@@Base+0x774>
   1bbe0:	mov	w8, #0x1                   	// #1
   1bbe4:	strb	w8, [x28, x22]
   1bbe8:	b	1bb24 <_getopt_internal_r@@Base+0x774>
   1bbec:	cbnz	w26, 1bb24 <_getopt_internal_r@@Base+0x774>
   1bbf0:	ldr	w8, [x25, #24]
   1bbf4:	ldr	w9, [x27, #24]
   1bbf8:	cmp	w8, w9
   1bbfc:	b.ne	1bb70 <_getopt_internal_r@@Base+0x7c0>  // b.any
   1bc00:	b	1bb24 <_getopt_internal_r@@Base+0x774>
   1bc04:	ldr	x27, [sp, #24]
   1bc08:	ldr	w9, [sp, #40]
   1bc0c:	cbz	x28, 1bc34 <_getopt_internal_r@@Base+0x884>
   1bc10:	b	1bc50 <_getopt_internal_r@@Base+0x8a0>
   1bc14:	mov	w8, #0xffffffff            	// #-1
   1bc18:	mov	x25, xzr
   1bc1c:	mov	w22, wzr
   1bc20:	mov	x28, xzr
   1bc24:	mov	w9, wzr
   1bc28:	mov	w26, wzr
   1bc2c:	stur	x8, [x29, #-16]
   1bc30:	cbnz	x28, 1bc50 <_getopt_internal_r@@Base+0x8a0>
   1bc34:	cbnz	w26, 1bc50 <_getopt_internal_r@@Base+0x8a0>
   1bc38:	ldr	x26, [sp, #32]
   1bc3c:	ldur	x24, [x29, #-16]
   1bc40:	mov	w8, #0x1                   	// #1
   1bc44:	cbnz	w8, 1bc98 <_getopt_internal_r@@Base+0x8e8>
   1bc48:	mov	w0, #0x3f                  	// #63
   1bc4c:	b	1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bc50:	ldur	w8, [x29, #-8]
   1bc54:	cbnz	w8, 1be08 <_getopt_internal_r@@Base+0xa58>
   1bc58:	ldr	x26, [sp, #32]
   1bc5c:	mov	w24, w22
   1bc60:	cbz	w9, 1bc6c <_getopt_internal_r@@Base+0x8bc>
   1bc64:	mov	x0, x28
   1bc68:	bl	b1d0 <free@plt>
   1bc6c:	ldr	x20, [x19, #32]
   1bc70:	mov	x0, x20
   1bc74:	bl	a890 <strlen@plt>
   1bc78:	ldr	w9, [x19]
   1bc7c:	mov	w8, wzr
   1bc80:	add	x10, x20, x0
   1bc84:	str	x10, [x19, #32]
   1bc88:	add	w9, w9, #0x1
   1bc8c:	str	w9, [x19]
   1bc90:	str	wzr, [x19, #8]
   1bc94:	cbz	w8, 1bc48 <_getopt_internal_r@@Base+0x898>
   1bc98:	cbz	x25, 1bcc8 <_getopt_internal_r@@Base+0x918>
   1bc9c:	ldr	w9, [x19]
   1bca0:	str	xzr, [x19, #32]
   1bca4:	add	w8, w9, #0x1
   1bca8:	str	w8, [x19]
   1bcac:	ldrb	w11, [x21]
   1bcb0:	ldr	w10, [x25, #8]
   1bcb4:	cbz	w11, 1bd24 <_getopt_internal_r@@Base+0x974>
   1bcb8:	cbz	w10, 1bd6c <_getopt_internal_r@@Base+0x9bc>
   1bcbc:	add	x8, x21, #0x1
   1bcc0:	str	x8, [x19, #16]
   1bcc4:	b	1bd48 <_getopt_internal_r@@Base+0x998>
   1bcc8:	ldur	w8, [x29, #-4]
   1bccc:	cbz	w8, 1bd00 <_getopt_internal_r@@Base+0x950>
   1bcd0:	ldrsw	x8, [x19]
   1bcd4:	ldr	x8, [x26, x8, lsl #3]
   1bcd8:	ldrb	w8, [x8, #1]
   1bcdc:	cmp	w8, #0x2d
   1bce0:	b.eq	1bd00 <_getopt_internal_r@@Base+0x950>  // b.none
   1bce4:	ldr	x8, [x19, #32]
   1bce8:	ldur	x0, [x29, #-32]
   1bcec:	ldrb	w1, [x8]
   1bcf0:	bl	b300 <strchr@plt>
   1bcf4:	cbz	x0, 1bd00 <_getopt_internal_r@@Base+0x950>
   1bcf8:	mov	w0, #0xffffffff            	// #-1
   1bcfc:	b	1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bd00:	ldur	w8, [x29, #-8]
   1bd04:	cbnz	w8, 1bdc8 <_getopt_internal_r@@Base+0xa18>
   1bd08:	ldr	w8, [x19]
   1bd0c:	str	xzr, [x19, #32]
   1bd10:	str	wzr, [x19, #8]
   1bd14:	mov	w0, #0x3f                  	// #63
   1bd18:	add	w8, w8, #0x1
   1bd1c:	str	w8, [x19]
   1bd20:	b	1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bd24:	cmp	w10, #0x1
   1bd28:	b.ne	1bd48 <_getopt_internal_r@@Base+0x998>  // b.any
   1bd2c:	ldur	w10, [x29, #-36]
   1bd30:	cmp	w8, w10
   1bd34:	b.ge	1bd84 <_getopt_internal_r@@Base+0x9d4>  // b.tcont
   1bd38:	add	w9, w9, #0x2
   1bd3c:	str	w9, [x19]
   1bd40:	ldr	x8, [x26, w8, sxtw #3]
   1bd44:	b	1bcc0 <_getopt_internal_r@@Base+0x910>
   1bd48:	ldur	x8, [x29, #-24]
   1bd4c:	cbz	x8, 1bd54 <_getopt_internal_r@@Base+0x9a4>
   1bd50:	str	w24, [x8]
   1bd54:	ldr	x8, [x25, #16]
   1bd58:	ldr	w0, [x25, #24]
   1bd5c:	cbz	x8, 1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bd60:	str	w0, [x8]
   1bd64:	mov	w0, wzr
   1bd68:	b	1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bd6c:	ldur	w8, [x29, #-8]
   1bd70:	cbnz	w8, 1be5c <_getopt_internal_r@@Base+0xaac>
   1bd74:	ldr	w8, [x25, #24]
   1bd78:	mov	w0, #0x3f                  	// #63
   1bd7c:	str	w8, [x19, #8]
   1bd80:	b	1bda8 <_getopt_internal_r@@Base+0x9f8>
   1bd84:	ldur	w8, [x29, #-8]
   1bd88:	cbnz	w8, 1bf48 <_getopt_internal_r@@Base+0xb98>
   1bd8c:	ldr	w8, [x25, #24]
   1bd90:	mov	w9, #0x3f                  	// #63
   1bd94:	str	w8, [x19, #8]
   1bd98:	ldur	x8, [x29, #-32]
   1bd9c:	ldrb	w8, [x8]
   1bda0:	cmp	w8, #0x3a
   1bda4:	csel	w0, w8, w9, eq  // eq = none
   1bda8:	ldp	x20, x19, [sp, #160]
   1bdac:	ldp	x22, x21, [sp, #144]
   1bdb0:	ldp	x24, x23, [sp, #128]
   1bdb4:	ldp	x26, x25, [sp, #112]
   1bdb8:	ldp	x28, x27, [sp, #96]
   1bdbc:	ldp	x29, x30, [sp, #80]
   1bdc0:	add	sp, sp, #0xb0
   1bdc4:	ret
   1bdc8:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1bdcc:	ldr	x8, [x8, #3816]
   1bdd0:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1bdd4:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1bdd8:	add	x0, x0, #0x7e4
   1bddc:	ldr	x20, [x8]
   1bde0:	add	x1, x1, #0x591
   1bde4:	mov	w2, #0x5                   	// #5
   1bde8:	bl	b580 <dcgettext@plt>
   1bdec:	ldr	x2, [x26]
   1bdf0:	ldr	x4, [x19, #32]
   1bdf4:	mov	x1, x0
   1bdf8:	mov	x0, x20
   1bdfc:	mov	x3, x27
   1be00:	bl	b7f0 <fprintf@plt>
   1be04:	b	1bd08 <_getopt_internal_r@@Base+0x958>
   1be08:	str	w9, [sp, #40]
   1be0c:	str	x27, [sp, #24]
   1be10:	adrp	x27, 3f000 <vasnprintf@@Base+0x14ec4>
   1be14:	ldr	x27, [x27, #3816]
   1be18:	ldr	x20, [x27]
   1be1c:	cbz	w26, 1be9c <_getopt_internal_r@@Base+0xaec>
   1be20:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1be24:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1be28:	add	x0, x0, #0x7e4
   1be2c:	add	x1, x1, #0x53a
   1be30:	mov	w2, #0x5                   	// #5
   1be34:	bl	b580 <dcgettext@plt>
   1be38:	ldp	x27, x26, [sp, #24]
   1be3c:	ldr	x4, [x19, #32]
   1be40:	mov	x1, x0
   1be44:	mov	x0, x20
   1be48:	ldr	x2, [x26]
   1be4c:	mov	x3, x27
   1be50:	bl	b7f0 <fprintf@plt>
   1be54:	mov	w24, w22
   1be58:	b	1bf3c <_getopt_internal_r@@Base+0xb8c>
   1be5c:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1be60:	ldr	x8, [x8, #3816]
   1be64:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1be68:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1be6c:	add	x0, x0, #0x7e4
   1be70:	ldr	x20, [x8]
   1be74:	add	x1, x1, #0x5b1
   1be78:	mov	w2, #0x5                   	// #5
   1be7c:	bl	b580 <dcgettext@plt>
   1be80:	ldr	x2, [x26]
   1be84:	ldr	x4, [x25]
   1be88:	mov	x1, x0
   1be8c:	mov	x0, x20
   1be90:	mov	x3, x27
   1be94:	bl	b7f0 <fprintf@plt>
   1be98:	b	1bd74 <_getopt_internal_r@@Base+0x9c4>
   1be9c:	mov	x0, x20
   1bea0:	bl	a900 <flockfile@plt>
   1bea4:	ldr	x20, [x27]
   1bea8:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1beac:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1beb0:	add	x0, x0, #0x7e4
   1beb4:	add	x1, x1, #0x55a
   1beb8:	mov	w2, #0x5                   	// #5
   1bebc:	bl	b580 <dcgettext@plt>
   1bec0:	ldp	x3, x26, [sp, #24]
   1bec4:	ldr	x4, [x19, #32]
   1bec8:	mov	x1, x0
   1becc:	mov	x0, x20
   1bed0:	ldr	x2, [x26]
   1bed4:	bl	b7f0 <fprintf@plt>
   1bed8:	cbz	w24, 1bf24 <_getopt_internal_r@@Base+0xb74>
   1bedc:	mov	x20, x27
   1bee0:	adrp	x27, 2d000 <vasnprintf@@Base+0x2ec4>
   1bee4:	mov	w22, w24
   1bee8:	mov	x24, xzr
   1beec:	add	x27, x27, #0x589
   1bef0:	mov	x8, xzr
   1bef4:	ldrb	w8, [x28, x24]
   1bef8:	cbz	w8, 1bf10 <_getopt_internal_r@@Base+0xb60>
   1befc:	ldr	x0, [x20]
   1bf00:	ldr	x3, [x23]
   1bf04:	ldr	x2, [sp, #24]
   1bf08:	mov	x1, x27
   1bf0c:	bl	b7f0 <fprintf@plt>
   1bf10:	add	x24, x24, #0x1
   1bf14:	cmp	x22, x24
   1bf18:	add	x23, x23, #0x20
   1bf1c:	b.ne	1bef4 <_getopt_internal_r@@Base+0xb44>  // b.any
   1bf20:	mov	x27, x20
   1bf24:	ldr	x1, [x27]
   1bf28:	mov	w0, #0xa                   	// #10
   1bf2c:	bl	aa70 <fputc@plt>
   1bf30:	ldr	x0, [x27]
   1bf34:	bl	ac30 <funlockfile@plt>
   1bf38:	ldr	x27, [sp, #24]
   1bf3c:	ldr	w9, [sp, #40]
   1bf40:	cbnz	w9, 1bc64 <_getopt_internal_r@@Base+0x8b4>
   1bf44:	b	1bc6c <_getopt_internal_r@@Base+0x8bc>
   1bf48:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1bf4c:	ldr	x8, [x8, #3816]
   1bf50:	adrp	x0, 2b000 <vasnprintf@@Base+0xec4>
   1bf54:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1bf58:	add	x0, x0, #0x7e4
   1bf5c:	ldr	x20, [x8]
   1bf60:	add	x1, x1, #0x5de
   1bf64:	mov	w2, #0x5                   	// #5
   1bf68:	bl	b580 <dcgettext@plt>
   1bf6c:	ldr	x2, [x26]
   1bf70:	ldr	x4, [x25]
   1bf74:	mov	x1, x0
   1bf78:	mov	x0, x20
   1bf7c:	mov	x3, x27
   1bf80:	bl	b7f0 <fprintf@plt>
   1bf84:	b	1bd8c <_getopt_internal_r@@Base+0x9dc>

000000000001bf88 <rpl_getopt_internal@@Base>:
   1bf88:	stp	x29, x30, [sp, #-32]!
   1bf8c:	stp	x20, x19, [sp, #16]
   1bf90:	adrp	x20, 3f000 <vasnprintf@@Base+0x14ec4>
   1bf94:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1bf98:	ldr	x20, [x20, #4032]
   1bf9c:	ldr	x8, [x8, #3856]
   1bfa0:	adrp	x19, 40000 <base_len@@Base+0x2c984>
   1bfa4:	add	x19, x19, #0xaf8
   1bfa8:	ldr	w9, [x20]
   1bfac:	ldr	w8, [x8]
   1bfb0:	mov	w7, w6
   1bfb4:	mov	x6, x19
   1bfb8:	mov	x29, sp
   1bfbc:	stp	w9, w8, [x19]
   1bfc0:	bl	b6b0 <_getopt_internal_r@plt>
   1bfc4:	ldr	w8, [x19]
   1bfc8:	adrp	x10, 3f000 <vasnprintf@@Base+0x14ec4>
   1bfcc:	adrp	x12, 3f000 <vasnprintf@@Base+0x14ec4>
   1bfd0:	ldr	x9, [x19, #16]
   1bfd4:	ldr	x10, [x10, #4016]
   1bfd8:	ldr	w11, [x19, #8]
   1bfdc:	ldr	x12, [x12, #3880]
   1bfe0:	str	w8, [x20]
   1bfe4:	ldp	x20, x19, [sp, #16]
   1bfe8:	str	x9, [x10]
   1bfec:	str	w11, [x12]
   1bff0:	ldp	x29, x30, [sp], #32
   1bff4:	ret

000000000001bff8 <rpl_getopt@@Base>:
   1bff8:	stp	x29, x30, [sp, #-16]!
   1bffc:	mov	w6, #0x1                   	// #1
   1c000:	mov	x3, xzr
   1c004:	mov	x4, xzr
   1c008:	mov	w5, wzr
   1c00c:	mov	x29, sp
   1c010:	bl	b2a0 <rpl_getopt_internal@plt>
   1c014:	ldp	x29, x30, [sp], #16
   1c018:	ret

000000000001c01c <rpl_getopt_long@@Base>:
   1c01c:	stp	x29, x30, [sp, #-16]!
   1c020:	mov	w5, wzr
   1c024:	mov	w6, wzr
   1c028:	mov	x29, sp
   1c02c:	bl	b2a0 <rpl_getopt_internal@plt>
   1c030:	ldp	x29, x30, [sp], #16
   1c034:	ret

000000000001c038 <_getopt_long_r@@Base>:
   1c038:	stp	x29, x30, [sp, #-16]!
   1c03c:	mov	x6, x5
   1c040:	mov	w5, wzr
   1c044:	mov	w7, wzr
   1c048:	mov	x29, sp
   1c04c:	bl	b6b0 <_getopt_internal_r@plt>
   1c050:	ldp	x29, x30, [sp], #16
   1c054:	ret

000000000001c058 <rpl_getopt_long_only@@Base>:
   1c058:	stp	x29, x30, [sp, #-16]!
   1c05c:	mov	w5, #0x1                   	// #1
   1c060:	mov	w6, wzr
   1c064:	mov	x29, sp
   1c068:	bl	b2a0 <rpl_getopt_internal@plt>
   1c06c:	ldp	x29, x30, [sp], #16
   1c070:	ret

000000000001c074 <_getopt_long_only_r@@Base>:
   1c074:	stp	x29, x30, [sp, #-16]!
   1c078:	mov	x6, x5
   1c07c:	mov	w5, #0x1                   	// #1
   1c080:	mov	w7, wzr
   1c084:	mov	x29, sp
   1c088:	bl	b6b0 <_getopt_internal_r@plt>
   1c08c:	ldp	x29, x30, [sp], #16
   1c090:	ret

000000000001c094 <rpl_ioctl@@Base>:
   1c094:	sub	sp, sp, #0xe0
   1c098:	stp	x29, x30, [sp, #208]
   1c09c:	add	x29, sp, #0xd0
   1c0a0:	mov	x9, #0xffffffffffffffd0    	// #-48
   1c0a4:	mov	x10, sp
   1c0a8:	sub	x11, x29, #0x50
   1c0ac:	movk	x9, #0xff80, lsl #32
   1c0b0:	add	x12, x29, #0x10
   1c0b4:	mov	x8, #0xffffffffffffffd0    	// #-48
   1c0b8:	add	x10, x10, #0x80
   1c0bc:	add	x11, x11, #0x30
   1c0c0:	stp	x2, x3, [x29, #-80]
   1c0c4:	stp	x4, x5, [x29, #-64]
   1c0c8:	stp	x6, x7, [x29, #-48]
   1c0cc:	stp	q1, q2, [sp, #16]
   1c0d0:	stp	q3, q4, [sp, #48]
   1c0d4:	str	q0, [sp]
   1c0d8:	stp	q5, q6, [sp, #80]
   1c0dc:	str	q7, [sp, #112]
   1c0e0:	stp	x10, x9, [x29, #-16]
   1c0e4:	stp	x12, x11, [x29, #-32]
   1c0e8:	tbz	w8, #31, 1c0fc <rpl_ioctl@@Base+0x68>
   1c0ec:	add	w9, w8, #0x8
   1c0f0:	cmp	w9, #0x0
   1c0f4:	stur	w9, [x29, #-8]
   1c0f8:	b.le	1c120 <rpl_ioctl@@Base+0x8c>
   1c0fc:	ldur	x8, [x29, #-32]
   1c100:	add	x9, x8, #0x8
   1c104:	stur	x9, [x29, #-32]
   1c108:	ldr	x2, [x8]
   1c10c:	mov	w1, w1
   1c110:	bl	b820 <ioctl@plt>
   1c114:	ldp	x29, x30, [sp, #208]
   1c118:	add	sp, sp, #0xe0
   1c11c:	ret
   1c120:	ldur	x9, [x29, #-24]
   1c124:	add	x8, x9, x8
   1c128:	b	1c108 <rpl_ioctl@@Base+0x74>

000000000001c12c <rpl_mbrtowc@@Base>:
   1c12c:	sub	sp, sp, #0x40
   1c130:	stp	x29, x30, [sp, #16]
   1c134:	add	x29, sp, #0x10
   1c138:	cmp	x0, #0x0
   1c13c:	sub	x8, x29, #0x4
   1c140:	stp	x20, x19, [sp, #48]
   1c144:	csel	x20, x8, x0, eq  // eq = none
   1c148:	mov	x0, x20
   1c14c:	stp	x22, x21, [sp, #32]
   1c150:	mov	x22, x2
   1c154:	mov	x19, x1
   1c158:	bl	a7f0 <mbrtowc@plt>
   1c15c:	mov	x21, x0
   1c160:	cbz	x22, 1c184 <rpl_mbrtowc@@Base+0x58>
   1c164:	cmn	x21, #0x2
   1c168:	b.cc	1c184 <rpl_mbrtowc@@Base+0x58>  // b.lo, b.ul, b.last
   1c16c:	mov	w0, wzr
   1c170:	bl	ae40 <hard_locale@plt>
   1c174:	tbnz	w0, #0, 1c184 <rpl_mbrtowc@@Base+0x58>
   1c178:	ldrb	w8, [x19]
   1c17c:	mov	w21, #0x1                   	// #1
   1c180:	str	w8, [x20]
   1c184:	mov	x0, x21
   1c188:	ldp	x20, x19, [sp, #48]
   1c18c:	ldp	x22, x21, [sp, #32]
   1c190:	ldp	x29, x30, [sp, #16]
   1c194:	add	sp, sp, #0x40
   1c198:	ret

000000000001c19c <rpl_nanosleep@@Base>:
   1c19c:	sub	sp, sp, #0x50
   1c1a0:	stp	x29, x30, [sp, #16]
   1c1a4:	stp	x22, x21, [sp, #48]
   1c1a8:	stp	x20, x19, [sp, #64]
   1c1ac:	ldr	x8, [x0, #8]
   1c1b0:	mov	w9, #0xca00                	// #51712
   1c1b4:	movk	w9, #0x3b9a, lsl #16
   1c1b8:	str	x23, [sp, #32]
   1c1bc:	cmp	x8, x9
   1c1c0:	add	x29, sp, #0x10
   1c1c4:	b.cc	1c1dc <rpl_nanosleep@@Base+0x40>  // b.lo, b.ul, b.last
   1c1c8:	bl	b6f0 <__errno_location@plt>
   1c1cc:	mov	w8, #0x16                  	// #22
   1c1d0:	str	w8, [x0]
   1c1d4:	mov	w0, #0xffffffff            	// #-1
   1c1d8:	b	1c260 <rpl_nanosleep@@Base+0xc4>
   1c1dc:	ldr	x22, [x0]
   1c1e0:	mov	x20, #0xffffffffffff5c00    	// #-41984
   1c1e4:	mov	w21, #0xa400                	// #41984
   1c1e8:	mov	x19, x1
   1c1ec:	movk	x20, #0xffe0, lsl #16
   1c1f0:	movk	w21, #0x1f, lsl #16
   1c1f4:	str	x8, [sp, #8]
   1c1f8:	b	1c214 <rpl_nanosleep@@Base+0x78>
   1c1fc:	mov	w9, #0x1                   	// #1
   1c200:	mov	w0, w23
   1c204:	str	xzr, [sp, #8]
   1c208:	mov	x22, x8
   1c20c:	mov	w23, w0
   1c210:	tbz	w9, #0, 1c260 <rpl_nanosleep@@Base+0xc4>
   1c214:	cmp	x22, x21
   1c218:	b.le	1c250 <rpl_nanosleep@@Base+0xb4>
   1c21c:	mov	x0, sp
   1c220:	mov	x1, x19
   1c224:	str	x21, [sp]
   1c228:	bl	b280 <nanosleep@plt>
   1c22c:	add	x8, x22, x20
   1c230:	cbz	w0, 1c1fc <rpl_nanosleep@@Base+0x60>
   1c234:	mov	w9, wzr
   1c238:	cbz	x19, 1c208 <rpl_nanosleep@@Base+0x6c>
   1c23c:	ldr	x10, [x19]
   1c240:	add	x11, x22, x20
   1c244:	add	x10, x11, x10
   1c248:	str	x10, [x19]
   1c24c:	b	1c208 <rpl_nanosleep@@Base+0x6c>
   1c250:	mov	x0, sp
   1c254:	mov	x1, x19
   1c258:	str	x22, [sp]
   1c25c:	bl	b280 <nanosleep@plt>
   1c260:	ldp	x20, x19, [sp, #64]
   1c264:	ldp	x22, x21, [sp, #48]
   1c268:	ldr	x23, [sp, #32]
   1c26c:	ldp	x29, x30, [sp, #16]
   1c270:	add	sp, sp, #0x50
   1c274:	ret

000000000001c278 <openat_proc_name@@Base>:
   1c278:	sub	sp, sp, #0x60
   1c27c:	stp	x29, x30, [sp, #32]
   1c280:	stp	x22, x21, [sp, #64]
   1c284:	stp	x20, x19, [sp, #80]
   1c288:	ldrb	w8, [x2]
   1c28c:	mov	x20, x0
   1c290:	str	x23, [sp, #48]
   1c294:	add	x29, sp, #0x20
   1c298:	cbz	w8, 1c2fc <openat_proc_name@@Base+0x84>
   1c29c:	adrp	x23, 40000 <base_len@@Base+0x2c984>
   1c2a0:	ldr	w8, [x23, #2864]
   1c2a4:	mov	x19, x2
   1c2a8:	mov	w21, w1
   1c2ac:	cbz	w8, 1c304 <openat_proc_name@@Base+0x8c>
   1c2b0:	ldr	w8, [x23, #2864]
   1c2b4:	tbnz	w8, #31, 1c390 <openat_proc_name@@Base+0x118>
   1c2b8:	mov	x0, x19
   1c2bc:	bl	a890 <strlen@plt>
   1c2c0:	add	x0, x0, #0x1b
   1c2c4:	cmp	x0, #0xfc1
   1c2c8:	b.cc	1c2d8 <openat_proc_name@@Base+0x60>  // b.lo, b.ul, b.last
   1c2cc:	bl	abc0 <malloc@plt>
   1c2d0:	mov	x20, x0
   1c2d4:	cbz	x0, 1c374 <openat_proc_name@@Base+0xfc>
   1c2d8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1c2dc:	add	x1, x1, #0x62b
   1c2e0:	mov	x0, x20
   1c2e4:	mov	w2, w21
   1c2e8:	bl	aa10 <sprintf@plt>
   1c2ec:	sxtw	x8, w0
   1c2f0:	mov	w9, #0x1                   	// #1
   1c2f4:	cbz	w9, 1c390 <openat_proc_name@@Base+0x118>
   1c2f8:	b	1c380 <openat_proc_name@@Base+0x108>
   1c2fc:	strb	wzr, [x20]
   1c300:	b	1c394 <openat_proc_name@@Base+0x11c>
   1c304:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1c308:	add	x0, x0, #0x606
   1c30c:	mov	w1, #0x4900                	// #18688
   1c310:	bl	ac50 <open@plt>
   1c314:	tbnz	w0, #31, 1c360 <openat_proc_name@@Base+0xe8>
   1c318:	mov	w22, w0
   1c31c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1c320:	add	x1, x1, #0x614
   1c324:	mov	x0, sp
   1c328:	mov	w2, w22
   1c32c:	bl	aa10 <sprintf@plt>
   1c330:	mov	x0, sp
   1c334:	mov	w1, wzr
   1c338:	bl	b080 <access@plt>
   1c33c:	cmp	w0, #0x0
   1c340:	mov	w8, #0x1                   	// #1
   1c344:	cneg	w8, w8, ne  // ne = any
   1c348:	mov	w0, w22
   1c34c:	str	w8, [x23, #2864]
   1c350:	bl	af30 <close@plt>
   1c354:	ldr	w8, [x23, #2864]
   1c358:	tbz	w8, #31, 1c2b8 <openat_proc_name@@Base+0x40>
   1c35c:	b	1c390 <openat_proc_name@@Base+0x118>
   1c360:	mov	w8, #0xffffffff            	// #-1
   1c364:	str	w8, [x23, #2864]
   1c368:	ldr	w8, [x23, #2864]
   1c36c:	tbz	w8, #31, 1c2b8 <openat_proc_name@@Base+0x40>
   1c370:	b	1c390 <openat_proc_name@@Base+0x118>
   1c374:	mov	x8, xzr
   1c378:	mov	w9, wzr
   1c37c:	cbz	w9, 1c390 <openat_proc_name@@Base+0x118>
   1c380:	add	x0, x20, x8
   1c384:	mov	x1, x19
   1c388:	bl	b3f0 <strcpy@plt>
   1c38c:	b	1c394 <openat_proc_name@@Base+0x11c>
   1c390:	mov	x20, xzr
   1c394:	mov	x0, x20
   1c398:	ldp	x20, x19, [sp, #80]
   1c39c:	ldp	x22, x21, [sp, #64]
   1c3a0:	ldr	x23, [sp, #48]
   1c3a4:	ldp	x29, x30, [sp, #32]
   1c3a8:	add	sp, sp, #0x60
   1c3ac:	ret

000000000001c3b0 <printf_fetchargs@@Base>:
   1c3b0:	ldr	x8, [x1]
   1c3b4:	cbz	x8, 1c5e8 <printf_fetchargs@@Base+0x238>
   1c3b8:	ldr	x11, [x1, #8]
   1c3bc:	adrp	x9, 2d000 <vasnprintf@@Base+0x2ec4>
   1c3c0:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   1c3c4:	adrp	x12, 2d000 <vasnprintf@@Base+0x2ec4>
   1c3c8:	mov	x8, xzr
   1c3cc:	add	x9, x9, #0x640
   1c3d0:	add	x10, x10, #0x674
   1c3d4:	add	x11, x11, #0x10
   1c3d8:	add	x12, x12, #0x658
   1c3dc:	b	1c410 <printf_fetchargs@@Base+0x60>
   1c3e0:	ldrsw	x13, [x0, #28]
   1c3e4:	tbnz	w13, #31, 1c590 <printf_fetchargs@@Base+0x1e0>
   1c3e8:	ldr	x13, [x0]
   1c3ec:	add	x14, x13, #0x8
   1c3f0:	str	x14, [x0]
   1c3f4:	ldr	x13, [x13]
   1c3f8:	str	x13, [x11]
   1c3fc:	ldr	x13, [x1]
   1c400:	add	x8, x8, #0x1
   1c404:	add	x11, x11, #0x20
   1c408:	cmp	x8, x13
   1c40c:	b.cs	1c5e8 <printf_fetchargs@@Base+0x238>  // b.hs, b.nlast
   1c410:	ldur	w13, [x11, #-16]
   1c414:	sub	w13, w13, #0x1
   1c418:	cmp	w13, #0x15
   1c41c:	b.hi	1c5f0 <printf_fetchargs@@Base+0x240>  // b.pmore
   1c420:	adr	x14, 1c3e0 <printf_fetchargs@@Base+0x30>
   1c424:	ldrb	w15, [x9, x13]
   1c428:	add	x14, x14, x15, lsl #2
   1c42c:	br	x14
   1c430:	ldrsw	x13, [x0, #24]
   1c434:	tbz	w13, #31, 1c3e8 <printf_fetchargs@@Base+0x38>
   1c438:	add	w14, w13, #0x8
   1c43c:	cmp	w14, #0x0
   1c440:	str	w14, [x0, #24]
   1c444:	b.gt	1c3e8 <printf_fetchargs@@Base+0x38>
   1c448:	ldr	x14, [x0, #8]
   1c44c:	add	x13, x14, x13
   1c450:	b	1c3f4 <printf_fetchargs@@Base+0x44>
   1c454:	ldrsw	x13, [x0, #24]
   1c458:	tbz	w13, #31, 1c46c <printf_fetchargs@@Base+0xbc>
   1c45c:	add	w14, w13, #0x8
   1c460:	cmp	w14, #0x0
   1c464:	str	w14, [x0, #24]
   1c468:	b.le	1c584 <printf_fetchargs@@Base+0x1d4>
   1c46c:	ldr	x13, [x0]
   1c470:	add	x14, x13, #0x8
   1c474:	str	x14, [x0]
   1c478:	ldr	w13, [x13]
   1c47c:	str	w13, [x11]
   1c480:	b	1c3fc <printf_fetchargs@@Base+0x4c>
   1c484:	ldrsw	x13, [x0, #24]
   1c488:	tbz	w13, #31, 1c49c <printf_fetchargs@@Base+0xec>
   1c48c:	add	w14, w13, #0x8
   1c490:	cmp	w14, #0x0
   1c494:	str	w14, [x0, #24]
   1c498:	b.le	1c5ac <printf_fetchargs@@Base+0x1fc>
   1c49c:	ldr	x13, [x0]
   1c4a0:	add	x14, x13, #0x8
   1c4a4:	str	x14, [x0]
   1c4a8:	ldr	w13, [x13]
   1c4ac:	strb	w13, [x11]
   1c4b0:	b	1c3fc <printf_fetchargs@@Base+0x4c>
   1c4b4:	ldrsw	x13, [x0, #24]
   1c4b8:	tbz	w13, #31, 1c4cc <printf_fetchargs@@Base+0x11c>
   1c4bc:	add	w14, w13, #0x8
   1c4c0:	cmp	w14, #0x0
   1c4c4:	str	w14, [x0, #24]
   1c4c8:	b.le	1c5b8 <printf_fetchargs@@Base+0x208>
   1c4cc:	ldr	x13, [x0]
   1c4d0:	add	x14, x13, #0x8
   1c4d4:	str	x14, [x0]
   1c4d8:	ldr	w13, [x13]
   1c4dc:	strh	w13, [x11]
   1c4e0:	b	1c3fc <printf_fetchargs@@Base+0x4c>
   1c4e4:	ldrsw	x13, [x0, #28]
   1c4e8:	tbz	w13, #31, 1c4fc <printf_fetchargs@@Base+0x14c>
   1c4ec:	add	w14, w13, #0x10
   1c4f0:	cmp	w14, #0x0
   1c4f4:	str	w14, [x0, #28]
   1c4f8:	b.le	1c5c4 <printf_fetchargs@@Base+0x214>
   1c4fc:	ldr	x13, [x0]
   1c500:	add	x13, x13, #0xf
   1c504:	and	x13, x13, #0xfffffffffffffff0
   1c508:	add	x14, x13, #0x10
   1c50c:	str	x14, [x0]
   1c510:	ldr	q0, [x13]
   1c514:	str	q0, [x11]
   1c518:	b	1c3fc <printf_fetchargs@@Base+0x4c>
   1c51c:	ldrsw	x13, [x0, #24]
   1c520:	tbz	w13, #31, 1c534 <printf_fetchargs@@Base+0x184>
   1c524:	add	w14, w13, #0x8
   1c528:	cmp	w14, #0x0
   1c52c:	str	w14, [x0, #24]
   1c530:	b.le	1c5d0 <printf_fetchargs@@Base+0x220>
   1c534:	ldr	x13, [x0]
   1c538:	add	x14, x13, #0x8
   1c53c:	str	x14, [x0]
   1c540:	ldr	x13, [x13]
   1c544:	cmp	x13, #0x0
   1c548:	csel	x13, x10, x13, eq  // eq = none
   1c54c:	b	1c3f8 <printf_fetchargs@@Base+0x48>
   1c550:	ldrsw	x13, [x0, #24]
   1c554:	tbz	w13, #31, 1c568 <printf_fetchargs@@Base+0x1b8>
   1c558:	add	w14, w13, #0x8
   1c55c:	cmp	w14, #0x0
   1c560:	str	w14, [x0, #24]
   1c564:	b.le	1c5dc <printf_fetchargs@@Base+0x22c>
   1c568:	ldr	x13, [x0]
   1c56c:	add	x14, x13, #0x8
   1c570:	str	x14, [x0]
   1c574:	ldr	x13, [x13]
   1c578:	cmp	x13, #0x0
   1c57c:	csel	x13, x12, x13, eq  // eq = none
   1c580:	b	1c3f8 <printf_fetchargs@@Base+0x48>
   1c584:	ldr	x14, [x0, #8]
   1c588:	add	x13, x14, x13
   1c58c:	b	1c478 <printf_fetchargs@@Base+0xc8>
   1c590:	add	w14, w13, #0x10
   1c594:	cmp	w14, #0x0
   1c598:	str	w14, [x0, #28]
   1c59c:	b.gt	1c3e8 <printf_fetchargs@@Base+0x38>
   1c5a0:	ldr	x14, [x0, #16]
   1c5a4:	add	x13, x14, x13
   1c5a8:	b	1c3f4 <printf_fetchargs@@Base+0x44>
   1c5ac:	ldr	x14, [x0, #8]
   1c5b0:	add	x13, x14, x13
   1c5b4:	b	1c4a8 <printf_fetchargs@@Base+0xf8>
   1c5b8:	ldr	x14, [x0, #8]
   1c5bc:	add	x13, x14, x13
   1c5c0:	b	1c4d8 <printf_fetchargs@@Base+0x128>
   1c5c4:	ldr	x14, [x0, #16]
   1c5c8:	add	x13, x14, x13
   1c5cc:	b	1c510 <printf_fetchargs@@Base+0x160>
   1c5d0:	ldr	x14, [x0, #8]
   1c5d4:	add	x13, x14, x13
   1c5d8:	b	1c540 <printf_fetchargs@@Base+0x190>
   1c5dc:	ldr	x14, [x0, #8]
   1c5e0:	add	x13, x14, x13
   1c5e4:	b	1c574 <printf_fetchargs@@Base+0x1c4>
   1c5e8:	mov	w0, wzr
   1c5ec:	ret
   1c5f0:	mov	w0, #0xffffffff            	// #-1
   1c5f4:	ret

000000000001c5f8 <printf_parse@@Base>:
   1c5f8:	sub	sp, sp, #0xe0
   1c5fc:	stp	x29, x30, [sp, #128]
   1c600:	stp	x28, x27, [sp, #144]
   1c604:	add	x29, sp, #0x80
   1c608:	mov	x14, x1
   1c60c:	add	x8, x1, #0x20
   1c610:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1c614:	adrp	x27, 2d000 <vasnprintf@@Base+0x2ec4>
   1c618:	stp	x26, x25, [sp, #160]
   1c61c:	stp	x24, x23, [sp, #176]
   1c620:	stp	x22, x21, [sp, #192]
   1c624:	stp	x20, x19, [sp, #208]
   1c628:	mov	x22, x0
   1c62c:	stur	xzr, [x29, #-56]
   1c630:	mov	x15, xzr
   1c634:	mov	x24, xzr
   1c638:	add	x9, x2, #0x10
   1c63c:	mov	w3, #0x7                   	// #7
   1c640:	mov	w16, #0x58                  	// #88
   1c644:	mov	w17, #0x1                   	// #1
   1c648:	add	x1, x1, #0x6a5
   1c64c:	add	x27, x27, #0x67b
   1c650:	stp	xzr, x8, [x14]
   1c654:	str	x8, [sp, #8]
   1c658:	mov	w8, #0x7                   	// #7
   1c65c:	stp	xzr, x9, [x2]
   1c660:	stp	x9, x8, [sp, #24]
   1c664:	stp	x2, x14, [x29, #-48]
   1c668:	b	1c680 <printf_parse@@Base+0x88>
   1c66c:	mov	x26, x24
   1c670:	mov	w8, wzr
   1c674:	mov	x24, x26
   1c678:	mov	x22, x25
   1c67c:	cbnz	w8, 1d45c <printf_parse@@Base+0xe64>
   1c680:	ldrb	w8, [x22]
   1c684:	cbz	w8, 1d43c <printf_parse@@Base+0xe44>
   1c688:	cmp	w8, #0x25
   1c68c:	add	x25, x22, #0x1
   1c690:	b.ne	1c66c <printf_parse@@Base+0x74>  // b.any
   1c694:	ldp	x4, x5, [x14]
   1c698:	mov	x6, #0xffffffffffffffff    	// #-1
   1c69c:	mul	x8, x4, x16
   1c6a0:	add	x21, x5, x8
   1c6a4:	mov	x28, x21
   1c6a8:	mov	x26, x21
   1c6ac:	mov	x23, x21
   1c6b0:	mov	x20, x21
   1c6b4:	mov	x7, x21
   1c6b8:	mov	x18, x21
   1c6bc:	mov	x13, x21
   1c6c0:	str	x22, [x5, x8]
   1c6c4:	str	wzr, [x28, #16]!
   1c6c8:	str	xzr, [x26, #24]!
   1c6cc:	str	xzr, [x23, #32]!
   1c6d0:	str	x6, [x20, #40]!
   1c6d4:	str	xzr, [x7, #48]!
   1c6d8:	str	xzr, [x18, #56]!
   1c6dc:	str	x6, [x13, #64]!
   1c6e0:	str	x6, [x21, #80]!
   1c6e4:	ldrb	w8, [x22, #1]
   1c6e8:	sub	w8, w8, #0x30
   1c6ec:	cmp	w8, #0x9
   1c6f0:	b.hi	1c7d8 <printf_parse@@Base+0x1e0>  // b.pmore
   1c6f4:	mov	w8, #0x1                   	// #1
   1c6f8:	ldrb	w9, [x22, x8]
   1c6fc:	add	x8, x8, #0x1
   1c700:	sub	w10, w9, #0x30
   1c704:	cmp	w10, #0xa
   1c708:	b.cc	1c6f8 <printf_parse@@Base+0x100>  // b.lo, b.ul, b.last
   1c70c:	cmp	w9, #0x24
   1c710:	b.ne	1c78c <printf_parse@@Base+0x194>  // b.any
   1c714:	ldrb	w8, [x25]
   1c718:	mov	x0, xzr
   1c71c:	stp	x15, x4, [sp, #48]
   1c720:	str	x3, [sp, #64]
   1c724:	sub	w9, w8, #0x30
   1c728:	cmp	w9, #0x9
   1c72c:	stp	x7, x5, [x29, #-16]
   1c730:	stp	x18, x13, [x29, #-32]
   1c734:	b.hi	1c774 <printf_parse@@Base+0x17c>  // b.pmore
   1c738:	mov	x19, #0x9999999999999999    	// #-7378697629483820647
   1c73c:	movk	x19, #0x999a
   1c740:	movk	x19, #0x1999, lsl #48
   1c744:	add	x9, x0, x0, lsl #2
   1c748:	cmp	x0, x19
   1c74c:	and	x8, x8, #0xff
   1c750:	lsl	x9, x9, #1
   1c754:	csinv	x0, x9, xzr, cc  // cc = lo, ul, last
   1c758:	sub	x1, x8, #0x30
   1c75c:	bl	ad10 <xsum@plt>
   1c760:	ldrb	w8, [x22, #2]
   1c764:	add	x22, x22, #0x1
   1c768:	sub	w9, w8, #0x30
   1c76c:	cmp	w9, #0xa
   1c770:	b.cc	1c744 <printf_parse@@Base+0x14c>  // b.lo, b.ul, b.last
   1c774:	add	x8, x0, #0x1
   1c778:	cmp	x8, #0x2
   1c77c:	b.cs	1c794 <printf_parse@@Base+0x19c>  // b.hs, b.nlast
   1c780:	mov	x6, #0xffffffffffffffff    	// #-1
   1c784:	mov	w8, #0xa                   	// #10
   1c788:	b	1c7a0 <printf_parse@@Base+0x1a8>
   1c78c:	mov	x6, #0xffffffffffffffff    	// #-1
   1c790:	b	1c7d0 <printf_parse@@Base+0x1d8>
   1c794:	mov	w8, wzr
   1c798:	sub	x6, x0, #0x1
   1c79c:	add	x25, x22, #0x2
   1c7a0:	ldp	x2, x14, [x29, #-48]
   1c7a4:	ldp	x15, x4, [sp, #48]
   1c7a8:	ldr	x3, [sp, #64]
   1c7ac:	ldp	x7, x5, [x29, #-16]
   1c7b0:	ldp	x18, x13, [x29, #-32]
   1c7b4:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1c7b8:	mov	w16, #0x58                  	// #88
   1c7bc:	mov	w17, #0x1                   	// #1
   1c7c0:	add	x1, x1, #0x6a5
   1c7c4:	cbz	w8, 1c7d0 <printf_parse@@Base+0x1d8>
   1c7c8:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1c7cc:	b	1c7d8 <printf_parse@@Base+0x1e0>
   1c7d0:	mov	w8, wzr
   1c7d4:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1c7d8:	mov	x8, x25
   1c7dc:	add	x22, x25, #0x1
   1c7e0:	sub	x25, x25, #0x1
   1c7e4:	b	1c804 <printf_parse@@Base+0x20c>
   1c7e8:	mov	w9, #0x40                  	// #64
   1c7ec:	ldr	w10, [x28]
   1c7f0:	add	x22, x22, #0x1
   1c7f4:	add	x8, x8, #0x1
   1c7f8:	add	x25, x25, #0x1
   1c7fc:	orr	w9, w10, w9
   1c800:	str	w9, [x28]
   1c804:	ldurb	w10, [x22, #-1]
   1c808:	sub	w9, w10, #0x20
   1c80c:	cmp	w9, #0x29
   1c810:	b.hi	1c850 <printf_parse@@Base+0x258>  // b.pmore
   1c814:	adr	x11, 1c7e8 <printf_parse@@Base+0x1f0>
   1c818:	ldrb	w12, [x27, x9]
   1c81c:	add	x11, x11, x12, lsl #2
   1c820:	mov	w9, #0x1                   	// #1
   1c824:	br	x11
   1c828:	mov	w9, #0x8                   	// #8
   1c82c:	b	1c7ec <printf_parse@@Base+0x1f4>
   1c830:	mov	w9, #0x10                  	// #16
   1c834:	b	1c7ec <printf_parse@@Base+0x1f4>
   1c838:	mov	w9, #0x4                   	// #4
   1c83c:	b	1c7ec <printf_parse@@Base+0x1f4>
   1c840:	mov	w9, #0x2                   	// #2
   1c844:	b	1c7ec <printf_parse@@Base+0x1f4>
   1c848:	mov	w9, #0x20                  	// #32
   1c84c:	b	1c7ec <printf_parse@@Base+0x1f4>
   1c850:	sub	w8, w10, #0x30
   1c854:	cmp	w8, #0x9
   1c858:	sub	x8, x22, #0x1
   1c85c:	b.hi	1c950 <printf_parse@@Base+0x358>  // b.pmore
   1c860:	mov	x28, #0x9999999999999999    	// #-7378697629483820647
   1c864:	movk	x28, #0x999a
   1c868:	movk	x28, #0x1999, lsl #48
   1c86c:	str	x8, [x26]
   1c870:	ldrb	w8, [x25, #1]!
   1c874:	sub	w8, w8, #0x30
   1c878:	cmp	w8, #0xa
   1c87c:	b.cc	1c870 <printf_parse@@Base+0x278>  // b.lo, b.ul, b.last
   1c880:	str	x25, [x23]
   1c884:	ldr	x8, [x26]
   1c888:	sub	x8, x25, x8
   1c88c:	cmp	x15, x8
   1c890:	csel	x15, x8, x15, cc  // cc = lo, ul, last
   1c894:	b	1cb44 <printf_parse@@Base+0x54c>
   1c898:	sub	x25, x22, #0x1
   1c89c:	str	x25, [x26]
   1c8a0:	str	x22, [x23]
   1c8a4:	ldrb	w9, [x22]
   1c8a8:	cmp	x15, #0x0
   1c8ac:	csinc	x15, x15, xzr, ne  // ne = any
   1c8b0:	sub	w9, w9, #0x30
   1c8b4:	cmp	w9, #0x9
   1c8b8:	b.hi	1c964 <printf_parse@@Base+0x36c>  // b.pmore
   1c8bc:	mov	x28, #0x9999999999999999    	// #-7378697629483820647
   1c8c0:	movk	x28, #0x999a
   1c8c4:	mov	x9, xzr
   1c8c8:	movk	x28, #0x1999, lsl #48
   1c8cc:	ldrb	w10, [x22, x9]
   1c8d0:	add	x9, x9, #0x1
   1c8d4:	sub	w11, w10, #0x30
   1c8d8:	cmp	w11, #0xa
   1c8dc:	b.cc	1c8cc <printf_parse@@Base+0x2d4>  // b.lo, b.ul, b.last
   1c8e0:	cmp	w10, #0x24
   1c8e4:	b.ne	1c9dc <printf_parse@@Base+0x3e4>  // b.any
   1c8e8:	stp	x13, x7, [x29, #-24]
   1c8ec:	ldrb	w9, [x22]
   1c8f0:	mov	x26, x4
   1c8f4:	mov	x19, x3
   1c8f8:	mov	x23, x15
   1c8fc:	sub	w10, w9, #0x30
   1c900:	cmp	w10, #0x9
   1c904:	stur	x18, [x29, #-32]
   1c908:	str	x6, [sp, #16]
   1c90c:	stur	x5, [x29, #-8]
   1c910:	b.hi	1c978 <printf_parse@@Base+0x380>  // b.pmore
   1c914:	mov	x0, xzr
   1c918:	mov	x25, x8
   1c91c:	add	x8, x0, x0, lsl #2
   1c920:	cmp	x0, x28
   1c924:	and	x9, x9, #0xff
   1c928:	lsl	x8, x8, #1
   1c92c:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
   1c930:	sub	x1, x9, #0x30
   1c934:	bl	ad10 <xsum@plt>
   1c938:	ldrb	w9, [x25, #2]
   1c93c:	add	x25, x25, #0x1
   1c940:	sub	w8, w9, #0x30
   1c944:	cmp	w8, #0xa
   1c948:	b.cc	1c91c <printf_parse@@Base+0x324>  // b.lo, b.ul, b.last
   1c94c:	b	1c97c <printf_parse@@Base+0x384>
   1c950:	mov	x28, #0x9999999999999999    	// #-7378697629483820647
   1c954:	movk	x28, #0x999a
   1c958:	mov	x25, x8
   1c95c:	movk	x28, #0x1999, lsl #48
   1c960:	b	1cb44 <printf_parse@@Base+0x54c>
   1c964:	mov	x28, #0x9999999999999999    	// #-7378697629483820647
   1c968:	movk	x28, #0x999a
   1c96c:	mov	x25, x22
   1c970:	movk	x28, #0x1999, lsl #48
   1c974:	b	1c9e8 <printf_parse@@Base+0x3f0>
   1c978:	mov	x0, xzr
   1c97c:	add	x8, x0, #0x1
   1c980:	cmp	x8, #0x2
   1c984:	b.cs	1c990 <printf_parse@@Base+0x398>  // b.hs, b.nlast
   1c988:	mov	w8, #0xa                   	// #10
   1c98c:	b	1c9a0 <printf_parse@@Base+0x3a8>
   1c990:	mov	w8, wzr
   1c994:	sub	x9, x0, #0x1
   1c998:	add	x22, x25, #0x2
   1c99c:	str	x9, [x20]
   1c9a0:	ldp	x2, x14, [x29, #-48]
   1c9a4:	ldp	x7, x5, [x29, #-16]
   1c9a8:	ldr	x6, [sp, #16]
   1c9ac:	ldp	x18, x13, [x29, #-32]
   1c9b0:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1c9b4:	mov	x15, x23
   1c9b8:	mov	w16, #0x58                  	// #88
   1c9bc:	mov	w17, #0x1                   	// #1
   1c9c0:	add	x1, x1, #0x6a5
   1c9c4:	mov	x3, x19
   1c9c8:	mov	x4, x26
   1c9cc:	mov	x25, x22
   1c9d0:	cbz	w8, 1c9dc <printf_parse@@Base+0x3e4>
   1c9d4:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1c9d8:	b	1c9e8 <printf_parse@@Base+0x3f0>
   1c9dc:	mov	w8, wzr
   1c9e0:	mov	x25, x22
   1c9e4:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1c9e8:	ldr	x8, [x20]
   1c9ec:	cmn	x8, #0x1
   1c9f0:	b.ne	1ca04 <printf_parse@@Base+0x40c>  // b.any
   1c9f4:	adds	x26, x24, #0x1
   1c9f8:	str	x24, [x20]
   1c9fc:	b.cs	1cd84 <printf_parse@@Base+0x78c>  // b.hs, b.nlast
   1ca00:	mov	x24, x26
   1ca04:	ldr	x22, [x20]
   1ca08:	cmp	x22, x3
   1ca0c:	b.cs	1ca24 <printf_parse@@Base+0x42c>  // b.hs, b.nlast
   1ca10:	ldp	x8, x10, [x2]
   1ca14:	cmp	x8, x22
   1ca18:	b.ls	1caa4 <printf_parse@@Base+0x4ac>  // b.plast
   1ca1c:	mov	x9, x10
   1ca20:	b	1cac8 <printf_parse@@Base+0x4d0>
   1ca24:	lsl	x8, x3, #1
   1ca28:	cmp	x3, #0x0
   1ca2c:	csinv	x3, x8, xzr, ge  // ge = tcont
   1ca30:	cmp	x3, x22
   1ca34:	stp	x13, x7, [x29, #-24]
   1ca38:	b.hi	1ca8c <printf_parse@@Base+0x494>  // b.pmore
   1ca3c:	mov	w1, #0x1                   	// #1
   1ca40:	mov	x0, x22
   1ca44:	mov	x20, x15
   1ca48:	mov	x19, x4
   1ca4c:	stur	x5, [x29, #-8]
   1ca50:	mov	x26, x6
   1ca54:	mov	x23, x18
   1ca58:	bl	ad10 <xsum@plt>
   1ca5c:	ldp	x13, x7, [x29, #-24]
   1ca60:	ldur	x5, [x29, #-8]
   1ca64:	ldp	x2, x14, [x29, #-48]
   1ca68:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1ca6c:	mov	x18, x23
   1ca70:	mov	x6, x26
   1ca74:	mov	x4, x19
   1ca78:	add	x1, x1, #0x6a5
   1ca7c:	mov	w17, #0x1                   	// #1
   1ca80:	mov	w16, #0x58                  	// #88
   1ca84:	mov	x15, x20
   1ca88:	mov	x3, x0
   1ca8c:	lsr	x8, x3, #59
   1ca90:	cbz	x8, 1caf0 <printf_parse@@Base+0x4f8>
   1ca94:	mov	w8, #0x13                  	// #19
   1ca98:	cbz	w8, 1ca10 <printf_parse@@Base+0x418>
   1ca9c:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1caa0:	b	1cb44 <printf_parse@@Base+0x54c>
   1caa4:	ldr	x9, [x2, #8]
   1caa8:	lsl	x11, x8, #5
   1caac:	add	x8, x8, #0x1
   1cab0:	str	wzr, [x10, x11]
   1cab4:	cmp	x8, x22
   1cab8:	add	x11, x11, #0x20
   1cabc:	mov	x10, x9
   1cac0:	b.ls	1caac <printf_parse@@Base+0x4b4>  // b.plast
   1cac4:	str	x8, [x2]
   1cac8:	add	x8, x9, x22, lsl #5
   1cacc:	ldr	w9, [x8]
   1cad0:	cmp	w9, #0x5
   1cad4:	b.eq	1cae4 <printf_parse@@Base+0x4ec>  // b.none
   1cad8:	cbnz	w9, 1cb3c <printf_parse@@Base+0x544>
   1cadc:	mov	w9, #0x5                   	// #5
   1cae0:	str	w9, [x8]
   1cae4:	mov	w8, wzr
   1cae8:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1caec:	b	1cb44 <printf_parse@@Base+0x54c>
   1caf0:	ldr	x0, [x2, #8]
   1caf4:	ldr	x8, [sp, #24]
   1caf8:	lsl	x1, x3, #5
   1cafc:	cmp	x0, x8
   1cb00:	b.eq	1ce60 <printf_parse@@Base+0x868>  // b.none
   1cb04:	mov	x20, x15
   1cb08:	str	x3, [sp, #64]
   1cb0c:	mov	x23, x4
   1cb10:	stur	x5, [x29, #-8]
   1cb14:	mov	x19, x6
   1cb18:	mov	x26, x18
   1cb1c:	bl	aea0 <realloc@plt>
   1cb20:	ldp	x13, x7, [x29, #-24]
   1cb24:	ldur	x5, [x29, #-8]
   1cb28:	ldr	x3, [sp, #64]
   1cb2c:	mov	x18, x26
   1cb30:	mov	x6, x19
   1cb34:	mov	x4, x23
   1cb38:	b	1cea0 <printf_parse@@Base+0x8a8>
   1cb3c:	mov	w8, #0xa                   	// #10
   1cb40:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1cb44:	ldrb	w8, [x25]
   1cb48:	cmp	w8, #0x2e
   1cb4c:	b.ne	1cc84 <printf_parse@@Base+0x68c>  // b.any
   1cb50:	ldrb	w8, [x25, #1]
   1cb54:	str	x25, [x7]
   1cb58:	cmp	w8, #0x2a
   1cb5c:	b.ne	1cc58 <printf_parse@@Base+0x660>  // b.any
   1cb60:	add	x19, x25, #0x2
   1cb64:	str	x19, [x18]
   1cb68:	ldrb	w8, [x25, #2]
   1cb6c:	ldur	x9, [x29, #-56]
   1cb70:	mov	w10, #0x2                   	// #2
   1cb74:	sub	w8, w8, #0x30
   1cb78:	cmp	x9, #0x2
   1cb7c:	csel	x9, x9, x10, hi  // hi = pmore
   1cb80:	cmp	w8, #0x9
   1cb84:	stur	x9, [x29, #-56]
   1cb88:	b.hi	1cd68 <printf_parse@@Base+0x770>  // b.pmore
   1cb8c:	mov	x8, x19
   1cb90:	ldrb	w9, [x8], #1
   1cb94:	sub	w10, w9, #0x30
   1cb98:	cmp	w10, #0xa
   1cb9c:	b.cc	1cb90 <printf_parse@@Base+0x598>  // b.lo, b.ul, b.last
   1cba0:	cmp	w9, #0x24
   1cba4:	b.ne	1cc48 <printf_parse@@Base+0x650>  // b.any
   1cba8:	ldrb	w8, [x19]
   1cbac:	mov	x26, x13
   1cbb0:	mov	x25, x4
   1cbb4:	mov	x23, x3
   1cbb8:	sub	w9, w8, #0x30
   1cbbc:	cmp	w9, #0x9
   1cbc0:	mov	x22, x15
   1cbc4:	mov	x0, xzr
   1cbc8:	mov	x20, x19
   1cbcc:	stur	x5, [x29, #-8]
   1cbd0:	str	x6, [sp, #16]
   1cbd4:	b.hi	1cc04 <printf_parse@@Base+0x60c>  // b.pmore
   1cbd8:	add	x9, x0, x0, lsl #2
   1cbdc:	cmp	x0, x28
   1cbe0:	and	x8, x8, #0xff
   1cbe4:	lsl	x9, x9, #1
   1cbe8:	csinv	x0, x9, xzr, cc  // cc = lo, ul, last
   1cbec:	sub	x1, x8, #0x30
   1cbf0:	bl	ad10 <xsum@plt>
   1cbf4:	ldrb	w8, [x20, #1]!
   1cbf8:	sub	w9, w8, #0x30
   1cbfc:	cmp	w9, #0xa
   1cc00:	b.cc	1cbd8 <printf_parse@@Base+0x5e0>  // b.lo, b.ul, b.last
   1cc04:	add	x8, x0, #0x1
   1cc08:	cmp	x8, #0x2
   1cc0c:	b.cs	1d0bc <printf_parse@@Base+0xac4>  // b.hs, b.nlast
   1cc10:	ldp	x2, x14, [x29, #-48]
   1cc14:	ldur	x5, [x29, #-8]
   1cc18:	ldr	x6, [sp, #16]
   1cc1c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1cc20:	mov	w8, #0xa                   	// #10
   1cc24:	mov	x15, x22
   1cc28:	mov	w16, #0x58                  	// #88
   1cc2c:	mov	w17, #0x1                   	// #1
   1cc30:	add	x1, x1, #0x6a5
   1cc34:	mov	x3, x23
   1cc38:	mov	x4, x25
   1cc3c:	mov	x13, x26
   1cc40:	mov	x25, x19
   1cc44:	cbnz	w8, 1cc50 <printf_parse@@Base+0x658>
   1cc48:	mov	w8, wzr
   1cc4c:	mov	x25, x19
   1cc50:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1cc54:	b	1cd6c <printf_parse@@Base+0x774>
   1cc58:	ldrb	w8, [x25, #1]!
   1cc5c:	sub	w8, w8, #0x30
   1cc60:	cmp	w8, #0xa
   1cc64:	b.cc	1cc58 <printf_parse@@Base+0x660>  // b.lo, b.ul, b.last
   1cc68:	str	x25, [x18]
   1cc6c:	ldr	x8, [x7]
   1cc70:	ldur	x9, [x29, #-56]
   1cc74:	sub	x8, x25, x8
   1cc78:	cmp	x9, x8
   1cc7c:	csel	x9, x8, x9, cc  // cc = lo, ul, last
   1cc80:	stur	x9, [x29, #-56]
   1cc84:	mov	w10, wzr
   1cc88:	b	1cc90 <printf_parse@@Base+0x698>
   1cc8c:	add	w10, w10, #0x8
   1cc90:	add	x25, x25, #0x1
   1cc94:	ldurb	w19, [x25, #-1]
   1cc98:	sub	w8, w19, #0x4c
   1cc9c:	cmp	w8, #0x2e
   1cca0:	b.hi	1cccc <printf_parse@@Base+0x6d4>  // b.pmore
   1cca4:	adr	x9, 1cc8c <printf_parse@@Base+0x694>
   1cca8:	ldrb	w11, [x1, x8]
   1ccac:	add	x9, x9, x11, lsl #2
   1ccb0:	br	x9
   1ccb4:	orr	w10, w10, #0x4
   1ccb8:	b	1cc90 <printf_parse@@Base+0x698>
   1ccbc:	and	w8, w10, #0x1
   1ccc0:	lsl	w8, w17, w8
   1ccc4:	orr	w10, w8, w10
   1ccc8:	b	1cc90 <printf_parse@@Base+0x698>
   1cccc:	sub	w11, w19, #0x25
   1ccd0:	cmp	w11, #0x53
   1ccd4:	mov	w8, #0xa                   	// #10
   1ccd8:	b.hi	1cd1c <printf_parse@@Base+0x724>  // b.pmore
   1ccdc:	adrp	x18, 2d000 <vasnprintf@@Base+0x2ec4>
   1cce0:	add	x18, x18, #0x6d4
   1cce4:	adr	x12, 1ccfc <printf_parse@@Base+0x704>
   1cce8:	ldrb	w13, [x18, x11]
   1ccec:	add	x12, x12, x13, lsl #2
   1ccf0:	mov	w9, #0xe                   	// #14
   1ccf4:	mov	w11, #0x63                  	// #99
   1ccf8:	br	x12
   1ccfc:	tst	w10, #0x4
   1cd00:	ccmp	w10, #0x10, #0x0, eq  // eq = none
   1cd04:	mov	w8, #0xb                   	// #11
   1cd08:	cinc	w9, w8, ge  // ge = tcont
   1cd0c:	mov	w11, w19
   1cd10:	mov	w8, wzr
   1cd14:	mov	w19, w11
   1cd18:	str	w9, [sp, #44]
   1cd1c:	cbz	w8, 1cd2c <printf_parse@@Base+0x734>
   1cd20:	mov	x26, x24
   1cd24:	cbnz	w8, 1d350 <printf_parse@@Base+0xd58>
   1cd28:	b	1d230 <printf_parse@@Base+0xc38>
   1cd2c:	ldr	w8, [sp, #44]
   1cd30:	cbz	w8, 1cd90 <printf_parse@@Base+0x798>
   1cd34:	cmn	x6, #0x1
   1cd38:	str	x6, [x21]
   1cd3c:	b.eq	1cdb8 <printf_parse@@Base+0x7c0>  // b.none
   1cd40:	mov	x26, x24
   1cd44:	b	1cdd0 <printf_parse@@Base+0x7d8>
   1cd48:	cmp	w10, #0xf
   1cd4c:	mov	w9, #0xa                   	// #10
   1cd50:	b.gt	1cd0c <printf_parse@@Base+0x714>
   1cd54:	tbnz	w10, #2, 1cd0c <printf_parse@@Base+0x714>
   1cd58:	cmp	w10, #0x7
   1cd5c:	b.le	1cf90 <printf_parse@@Base+0x998>
   1cd60:	mov	w9, #0x8                   	// #8
   1cd64:	b	1cd0c <printf_parse@@Base+0x714>
   1cd68:	mov	x25, x19
   1cd6c:	ldr	x8, [x13]
   1cd70:	cmn	x8, #0x1
   1cd74:	b.ne	1cfac <printf_parse@@Base+0x9b4>  // b.any
   1cd78:	adds	x26, x24, #0x1
   1cd7c:	str	x24, [x13]
   1cd80:	b.cc	1cfa8 <printf_parse@@Base+0x9b0>  // b.lo, b.ul, b.last
   1cd84:	mov	w8, #0xa                   	// #10
   1cd88:	cbnz	w8, 1c674 <printf_parse@@Base+0x7c>
   1cd8c:	b	1c670 <printf_parse@@Base+0x78>
   1cd90:	mov	x26, x24
   1cd94:	b	1d2b8 <printf_parse@@Base+0xcc0>
   1cd98:	cmp	w10, #0xf
   1cd9c:	mov	w9, #0x9                   	// #9
   1cda0:	b.gt	1cd0c <printf_parse@@Base+0x714>
   1cda4:	tbnz	w10, #2, 1cd0c <printf_parse@@Base+0x714>
   1cda8:	cmp	w10, #0x7
   1cdac:	b.le	1d104 <printf_parse@@Base+0xb0c>
   1cdb0:	mov	w9, #0x7                   	// #7
   1cdb4:	b	1cd0c <printf_parse@@Base+0x714>
   1cdb8:	adds	x26, x24, #0x1
   1cdbc:	str	x24, [x21]
   1cdc0:	b.cc	1cdd0 <printf_parse@@Base+0x7d8>  // b.lo, b.ul, b.last
   1cdc4:	mov	w8, #0xa                   	// #10
   1cdc8:	cbnz	w8, 1d350 <printf_parse@@Base+0xd58>
   1cdcc:	b	1d230 <printf_parse@@Base+0xc38>
   1cdd0:	ldr	x22, [x21]
   1cdd4:	cmp	x22, x3
   1cdd8:	b.cc	1d1d4 <printf_parse@@Base+0xbdc>  // b.lo, b.ul, b.last
   1cddc:	lsl	x8, x3, #1
   1cde0:	cmp	x3, #0x0
   1cde4:	csinv	x3, x8, xzr, ge  // ge = tcont
   1cde8:	cmp	x3, x22
   1cdec:	b.hi	1ce2c <printf_parse@@Base+0x834>  // b.pmore
   1cdf0:	mov	w1, #0x1                   	// #1
   1cdf4:	mov	x0, x22
   1cdf8:	mov	x20, x15
   1cdfc:	mov	x21, x4
   1ce00:	mov	x23, x5
   1ce04:	bl	ad10 <xsum@plt>
   1ce08:	ldp	x2, x14, [x29, #-48]
   1ce0c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1ce10:	mov	x5, x23
   1ce14:	mov	x4, x21
   1ce18:	add	x1, x1, #0x6a5
   1ce1c:	mov	w17, #0x1                   	// #1
   1ce20:	mov	w16, #0x58                  	// #88
   1ce24:	mov	x15, x20
   1ce28:	mov	x3, x0
   1ce2c:	lsr	x8, x3, #59
   1ce30:	cbnz	x8, 1d1cc <printf_parse@@Base+0xbd4>
   1ce34:	ldr	x0, [x2, #8]
   1ce38:	ldr	x8, [sp, #24]
   1ce3c:	lsl	x1, x3, #5
   1ce40:	cmp	x0, x8
   1ce44:	b.eq	1d124 <printf_parse@@Base+0xb2c>  // b.none
   1ce48:	mov	x20, x15
   1ce4c:	mov	x21, x3
   1ce50:	mov	x23, x4
   1ce54:	mov	x24, x5
   1ce58:	bl	aea0 <realloc@plt>
   1ce5c:	b	1d13c <printf_parse@@Base+0xb44>
   1ce60:	mov	x0, x1
   1ce64:	mov	x20, x15
   1ce68:	mov	x19, x3
   1ce6c:	str	x4, [sp, #56]
   1ce70:	mov	x26, x5
   1ce74:	str	x6, [sp, #16]
   1ce78:	mov	x23, x13
   1ce7c:	stur	x18, [x29, #-32]
   1ce80:	bl	abc0 <malloc@plt>
   1ce84:	ldur	x7, [x29, #-16]
   1ce88:	ldur	x18, [x29, #-32]
   1ce8c:	ldr	x6, [sp, #16]
   1ce90:	ldr	x4, [sp, #56]
   1ce94:	mov	x13, x23
   1ce98:	mov	x5, x26
   1ce9c:	mov	x3, x19
   1cea0:	ldp	x2, x14, [x29, #-48]
   1cea4:	mov	w16, #0x58                  	// #88
   1cea8:	mov	x15, x20
   1ceac:	cbz	x0, 1cf1c <printf_parse@@Base+0x924>
   1ceb0:	ldr	x1, [x2, #8]
   1ceb4:	ldr	x8, [sp, #24]
   1ceb8:	cmp	x1, x8
   1cebc:	b.ne	1cf10 <printf_parse@@Base+0x918>  // b.any
   1cec0:	ldr	x8, [x2]
   1cec4:	mov	x20, x15
   1cec8:	str	x0, [sp, #64]
   1cecc:	mov	x19, x3
   1ced0:	lsl	x2, x8, #5
   1ced4:	mov	x23, x4
   1ced8:	mov	x26, x5
   1cedc:	str	x6, [sp, #16]
   1cee0:	stur	x18, [x29, #-32]
   1cee4:	bl	a800 <memcpy@plt>
   1cee8:	ldp	x13, x7, [x29, #-24]
   1ceec:	ldp	x14, x18, [x29, #-40]
   1cef0:	ldr	x6, [sp, #16]
   1cef4:	ldr	x0, [sp, #64]
   1cef8:	ldur	x2, [x29, #-48]
   1cefc:	mov	x5, x26
   1cf00:	mov	x4, x23
   1cf04:	mov	x3, x19
   1cf08:	mov	w16, #0x58                  	// #88
   1cf0c:	mov	x15, x20
   1cf10:	mov	w8, wzr
   1cf14:	str	x0, [x2, #8]
   1cf18:	b	1cf20 <printf_parse@@Base+0x928>
   1cf1c:	mov	w8, #0x13                  	// #19
   1cf20:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1cf24:	mov	w17, #0x1                   	// #1
   1cf28:	add	x1, x1, #0x6a5
   1cf2c:	cbnz	w8, 1ca9c <printf_parse@@Base+0x4a4>
   1cf30:	b	1ca10 <printf_parse@@Base+0x418>
   1cf34:	mov	w9, wzr
   1cf38:	b	1cd0c <printf_parse@@Base+0x714>
   1cf3c:	mov	w9, #0x10                  	// #16
   1cf40:	mov	w11, #0x73                  	// #115
   1cf44:	b	1cd10 <printf_parse@@Base+0x718>
   1cf48:	cmp	w10, #0x7
   1cf4c:	mov	w8, #0xd                   	// #13
   1cf50:	cinc	w9, w8, gt
   1cf54:	b	1cd0c <printf_parse@@Base+0x714>
   1cf58:	cmp	w10, #0xf
   1cf5c:	mov	w9, #0x16                  	// #22
   1cf60:	b.gt	1cd0c <printf_parse@@Base+0x714>
   1cf64:	tbnz	w10, #2, 1cd0c <printf_parse@@Base+0x714>
   1cf68:	cmp	w10, #0x7
   1cf6c:	b.le	1d418 <printf_parse@@Base+0xe20>
   1cf70:	mov	w9, #0x15                  	// #21
   1cf74:	b	1cd0c <printf_parse@@Base+0x714>
   1cf78:	mov	w9, #0x11                  	// #17
   1cf7c:	b	1cd0c <printf_parse@@Base+0x714>
   1cf80:	cmp	w10, #0x7
   1cf84:	mov	w8, #0xf                   	// #15
   1cf88:	cinc	w9, w8, gt
   1cf8c:	b	1cd0c <printf_parse@@Base+0x714>
   1cf90:	tbnz	w10, #1, 1d11c <printf_parse@@Base+0xb24>
   1cf94:	tst	w10, #0x1
   1cf98:	mov	w8, #0x4                   	// #4
   1cf9c:	mov	w9, #0x6                   	// #6
   1cfa0:	csel	w9, w9, w8, eq  // eq = none
   1cfa4:	b	1cd0c <printf_parse@@Base+0x714>
   1cfa8:	mov	x24, x26
   1cfac:	ldr	x22, [x13]
   1cfb0:	cmp	x22, x3
   1cfb4:	b.cs	1cfcc <printf_parse@@Base+0x9d4>  // b.hs, b.nlast
   1cfb8:	ldp	x8, x10, [x2]
   1cfbc:	cmp	x8, x22
   1cfc0:	b.ls	1d038 <printf_parse@@Base+0xa40>  // b.plast
   1cfc4:	mov	x9, x10
   1cfc8:	b	1d05c <printf_parse@@Base+0xa64>
   1cfcc:	lsl	x8, x3, #1
   1cfd0:	cmp	x3, #0x0
   1cfd4:	csinv	x3, x8, xzr, ge  // ge = tcont
   1cfd8:	cmp	x3, x22
   1cfdc:	b.hi	1d024 <printf_parse@@Base+0xa2c>  // b.pmore
   1cfe0:	mov	w1, #0x1                   	// #1
   1cfe4:	mov	x0, x22
   1cfe8:	mov	x19, x15
   1cfec:	mov	x20, x4
   1cff0:	mov	x23, x5
   1cff4:	mov	x26, x6
   1cff8:	bl	ad10 <xsum@plt>
   1cffc:	ldp	x2, x14, [x29, #-48]
   1d000:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d004:	mov	x6, x26
   1d008:	mov	x5, x23
   1d00c:	mov	x4, x20
   1d010:	add	x1, x1, #0x6a5
   1d014:	mov	w17, #0x1                   	// #1
   1d018:	mov	w16, #0x58                  	// #88
   1d01c:	mov	x15, x19
   1d020:	mov	x3, x0
   1d024:	lsr	x8, x3, #59
   1d028:	cbz	x8, 1d080 <printf_parse@@Base+0xa88>
   1d02c:	mov	w8, #0x13                  	// #19
   1d030:	cbnz	w8, 1d408 <printf_parse@@Base+0xe10>
   1d034:	b	1cfb8 <printf_parse@@Base+0x9c0>
   1d038:	ldr	x9, [x2, #8]
   1d03c:	lsl	x11, x8, #5
   1d040:	add	x8, x8, #0x1
   1d044:	str	wzr, [x10, x11]
   1d048:	cmp	x8, x22
   1d04c:	add	x11, x11, #0x20
   1d050:	mov	x10, x9
   1d054:	b.ls	1d040 <printf_parse@@Base+0xa48>  // b.plast
   1d058:	str	x8, [x2]
   1d05c:	add	x8, x9, x22, lsl #5
   1d060:	ldr	w9, [x8]
   1d064:	cmp	w9, #0x5
   1d068:	b.eq	1d078 <printf_parse@@Base+0xa80>  // b.none
   1d06c:	cbnz	w9, 1d0b0 <printf_parse@@Base+0xab8>
   1d070:	mov	w9, #0x5                   	// #5
   1d074:	str	w9, [x8]
   1d078:	mov	w8, wzr
   1d07c:	b	1d408 <printf_parse@@Base+0xe10>
   1d080:	ldr	x0, [x2, #8]
   1d084:	ldr	x8, [sp, #24]
   1d088:	lsl	x1, x3, #5
   1d08c:	cmp	x0, x8
   1d090:	b.eq	1d358 <printf_parse@@Base+0xd60>  // b.none
   1d094:	mov	x19, x15
   1d098:	mov	x20, x3
   1d09c:	mov	x23, x4
   1d0a0:	mov	x26, x5
   1d0a4:	mov	x28, x6
   1d0a8:	bl	aea0 <realloc@plt>
   1d0ac:	b	1d374 <printf_parse@@Base+0xd7c>
   1d0b0:	mov	w8, #0xa                   	// #10
   1d0b4:	cbnz	w8, 1d40c <printf_parse@@Base+0xe14>
   1d0b8:	b	1cc84 <printf_parse@@Base+0x68c>
   1d0bc:	sub	x9, x0, #0x1
   1d0c0:	str	x9, [x26]
   1d0c4:	ldp	x2, x14, [x29, #-48]
   1d0c8:	ldur	x5, [x29, #-8]
   1d0cc:	ldr	x6, [sp, #16]
   1d0d0:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d0d4:	mov	w8, wzr
   1d0d8:	mov	x13, x26
   1d0dc:	add	x19, x20, #0x1
   1d0e0:	mov	x15, x22
   1d0e4:	mov	w16, #0x58                  	// #88
   1d0e8:	mov	w17, #0x1                   	// #1
   1d0ec:	add	x1, x1, #0x6a5
   1d0f0:	mov	x3, x23
   1d0f4:	mov	x4, x25
   1d0f8:	mov	x25, x19
   1d0fc:	cbnz	w8, 1cc50 <printf_parse@@Base+0x658>
   1d100:	b	1cc48 <printf_parse@@Base+0x650>
   1d104:	tbnz	w10, #1, 1d42c <printf_parse@@Base+0xe34>
   1d108:	tst	w10, #0x1
   1d10c:	mov	w8, #0x5                   	// #5
   1d110:	mov	w9, #0x3                   	// #3
   1d114:	csel	w9, w8, w9, eq  // eq = none
   1d118:	b	1cd0c <printf_parse@@Base+0x714>
   1d11c:	mov	w9, #0x2                   	// #2
   1d120:	b	1cd0c <printf_parse@@Base+0x714>
   1d124:	mov	x0, x1
   1d128:	mov	x20, x15
   1d12c:	mov	x21, x3
   1d130:	mov	x23, x4
   1d134:	mov	x24, x5
   1d138:	bl	abc0 <malloc@plt>
   1d13c:	ldp	x2, x14, [x29, #-48]
   1d140:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d144:	mov	x5, x24
   1d148:	mov	x4, x23
   1d14c:	mov	x3, x21
   1d150:	mov	w16, #0x58                  	// #88
   1d154:	mov	x15, x20
   1d158:	mov	x23, x0
   1d15c:	mov	w17, #0x1                   	// #1
   1d160:	add	x1, x1, #0x6a5
   1d164:	cbz	x0, 1d1cc <printf_parse@@Base+0xbd4>
   1d168:	ldr	x1, [x2, #8]
   1d16c:	ldr	x8, [sp, #24]
   1d170:	cmp	x1, x8
   1d174:	b.ne	1d1b0 <printf_parse@@Base+0xbb8>  // b.any
   1d178:	ldr	x8, [x2]
   1d17c:	mov	x0, x23
   1d180:	mov	x20, x15
   1d184:	mov	x21, x3
   1d188:	lsl	x2, x8, #5
   1d18c:	mov	x24, x4
   1d190:	mov	x28, x5
   1d194:	bl	a800 <memcpy@plt>
   1d198:	ldp	x2, x14, [x29, #-48]
   1d19c:	mov	x5, x28
   1d1a0:	mov	x4, x24
   1d1a4:	mov	x3, x21
   1d1a8:	mov	w16, #0x58                  	// #88
   1d1ac:	mov	x15, x20
   1d1b0:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d1b4:	mov	w8, wzr
   1d1b8:	mov	w17, #0x1                   	// #1
   1d1bc:	add	x1, x1, #0x6a5
   1d1c0:	str	x23, [x2, #8]
   1d1c4:	cbnz	w8, 1d228 <printf_parse@@Base+0xc30>
   1d1c8:	b	1d1d4 <printf_parse@@Base+0xbdc>
   1d1cc:	mov	w8, #0x13                  	// #19
   1d1d0:	cbnz	w8, 1d228 <printf_parse@@Base+0xc30>
   1d1d4:	ldp	x8, x10, [x2]
   1d1d8:	cmp	x8, x22
   1d1dc:	b.ls	1d1e8 <printf_parse@@Base+0xbf0>  // b.plast
   1d1e0:	mov	x9, x10
   1d1e4:	b	1d20c <printf_parse@@Base+0xc14>
   1d1e8:	ldr	x9, [x2, #8]
   1d1ec:	lsl	x11, x8, #5
   1d1f0:	add	x8, x8, #0x1
   1d1f4:	str	wzr, [x10, x11]
   1d1f8:	cmp	x8, x22
   1d1fc:	add	x11, x11, #0x20
   1d200:	mov	x10, x9
   1d204:	b.ls	1d1f0 <printf_parse@@Base+0xbf8>  // b.plast
   1d208:	str	x8, [x2]
   1d20c:	add	x8, x9, x22, lsl #5
   1d210:	ldr	w9, [x8]
   1d214:	cbz	w9, 1d2a8 <printf_parse@@Base+0xcb0>
   1d218:	ldr	w8, [sp, #44]
   1d21c:	cmp	w9, w8
   1d220:	b.eq	1d2b0 <printf_parse@@Base+0xcb8>  // b.none
   1d224:	mov	w8, #0xa                   	// #10
   1d228:	cbz	w8, 1d2b8 <printf_parse@@Base+0xcc0>
   1d22c:	cbnz	w8, 1d350 <printf_parse@@Base+0xd58>
   1d230:	ldr	x8, [x14]
   1d234:	ldr	x9, [sp, #32]
   1d238:	add	x8, x8, #0x1
   1d23c:	cmp	x8, x9
   1d240:	str	x8, [x14]
   1d244:	b.cs	1d250 <printf_parse@@Base+0xc58>  // b.hs, b.nlast
   1d248:	mov	w8, wzr
   1d24c:	b	1d350 <printf_parse@@Base+0xd58>
   1d250:	lsl	x8, x9, #1
   1d254:	cmp	x9, #0x0
   1d258:	csinv	x9, x8, xzr, ge  // ge = tcont
   1d25c:	mov	x8, #0xe8ba                	// #59578
   1d260:	movk	x8, #0x8ba2, lsl #16
   1d264:	movk	x8, #0xba2e, lsl #32
   1d268:	movk	x8, #0x2e8, lsl #48
   1d26c:	cmp	x9, x8
   1d270:	str	x9, [sp, #32]
   1d274:	b.ls	1d284 <printf_parse@@Base+0xc8c>  // b.plast
   1d278:	mov	w8, #0x13                  	// #19
   1d27c:	cbnz	w8, 1d350 <printf_parse@@Base+0xd58>
   1d280:	b	1d248 <printf_parse@@Base+0xc50>
   1d284:	ldr	x0, [x14, #8]
   1d288:	ldr	x8, [sp, #8]
   1d28c:	mul	x1, x9, x16
   1d290:	cmp	x0, x8
   1d294:	b.eq	1d2d0 <printf_parse@@Base+0xcd8>  // b.none
   1d298:	mov	x19, x15
   1d29c:	mov	x20, x3
   1d2a0:	bl	aea0 <realloc@plt>
   1d2a4:	b	1d2e0 <printf_parse@@Base+0xce8>
   1d2a8:	ldr	w9, [sp, #44]
   1d2ac:	str	w9, [x8]
   1d2b0:	mov	w8, wzr
   1d2b4:	cbnz	w8, 1d22c <printf_parse@@Base+0xc34>
   1d2b8:	mov	w8, wzr
   1d2bc:	madd	x9, x4, x16, x5
   1d2c0:	strb	w19, [x9, #72]
   1d2c4:	str	x25, [x9, #8]
   1d2c8:	cbnz	w8, 1d350 <printf_parse@@Base+0xd58>
   1d2cc:	b	1d230 <printf_parse@@Base+0xc38>
   1d2d0:	mov	x0, x1
   1d2d4:	mov	x19, x15
   1d2d8:	mov	x20, x3
   1d2dc:	bl	abc0 <malloc@plt>
   1d2e0:	ldp	x2, x14, [x29, #-48]
   1d2e4:	mov	x3, x20
   1d2e8:	mov	w16, #0x58                  	// #88
   1d2ec:	mov	x15, x19
   1d2f0:	mov	x22, x0
   1d2f4:	cbz	x0, 1d33c <printf_parse@@Base+0xd44>
   1d2f8:	ldr	x1, [x14, #8]
   1d2fc:	ldr	x8, [sp, #8]
   1d300:	cmp	x1, x8
   1d304:	b.ne	1d330 <printf_parse@@Base+0xd38>  // b.any
   1d308:	ldr	x8, [x14]
   1d30c:	mov	x0, x22
   1d310:	mov	x19, x15
   1d314:	mov	x20, x3
   1d318:	mul	x2, x8, x16
   1d31c:	bl	a800 <memcpy@plt>
   1d320:	ldp	x2, x14, [x29, #-48]
   1d324:	mov	x3, x20
   1d328:	mov	w16, #0x58                  	// #88
   1d32c:	mov	x15, x19
   1d330:	mov	w8, wzr
   1d334:	str	x22, [x14, #8]
   1d338:	b	1d340 <printf_parse@@Base+0xd48>
   1d33c:	mov	w8, #0x13                  	// #19
   1d340:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d344:	mov	w17, #0x1                   	// #1
   1d348:	add	x1, x1, #0x6a5
   1d34c:	cbz	w8, 1d248 <printf_parse@@Base+0xc50>
   1d350:	cbnz	w8, 1c674 <printf_parse@@Base+0x7c>
   1d354:	b	1c670 <printf_parse@@Base+0x78>
   1d358:	mov	x0, x1
   1d35c:	mov	x19, x15
   1d360:	mov	x20, x3
   1d364:	mov	x23, x4
   1d368:	mov	x26, x5
   1d36c:	mov	x28, x6
   1d370:	bl	abc0 <malloc@plt>
   1d374:	ldp	x2, x14, [x29, #-48]
   1d378:	mov	x6, x28
   1d37c:	mov	x5, x26
   1d380:	mov	x4, x23
   1d384:	mov	x3, x20
   1d388:	mov	w16, #0x58                  	// #88
   1d38c:	mov	x15, x19
   1d390:	mov	x19, x0
   1d394:	cbz	x0, 1d3f4 <printf_parse@@Base+0xdfc>
   1d398:	ldr	x1, [x2, #8]
   1d39c:	ldr	x8, [sp, #24]
   1d3a0:	cmp	x1, x8
   1d3a4:	b.ne	1d3e8 <printf_parse@@Base+0xdf0>  // b.any
   1d3a8:	ldr	x8, [x2]
   1d3ac:	mov	x0, x19
   1d3b0:	mov	x20, x15
   1d3b4:	mov	x23, x3
   1d3b8:	lsl	x2, x8, #5
   1d3bc:	mov	x26, x4
   1d3c0:	mov	x28, x5
   1d3c4:	str	x6, [sp, #16]
   1d3c8:	bl	a800 <memcpy@plt>
   1d3cc:	ldr	x6, [sp, #16]
   1d3d0:	ldp	x2, x14, [x29, #-48]
   1d3d4:	mov	x5, x28
   1d3d8:	mov	x4, x26
   1d3dc:	mov	x3, x23
   1d3e0:	mov	w16, #0x58                  	// #88
   1d3e4:	mov	x15, x20
   1d3e8:	mov	w8, wzr
   1d3ec:	str	x19, [x2, #8]
   1d3f0:	b	1d3f8 <printf_parse@@Base+0xe00>
   1d3f4:	mov	w8, #0x13                  	// #19
   1d3f8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1d3fc:	mov	w17, #0x1                   	// #1
   1d400:	add	x1, x1, #0x6a5
   1d404:	cbz	w8, 1cfb8 <printf_parse@@Base+0x9c0>
   1d408:	cbz	w8, 1cc84 <printf_parse@@Base+0x68c>
   1d40c:	mov	x26, x24
   1d410:	cbnz	w8, 1c674 <printf_parse@@Base+0x7c>
   1d414:	b	1c670 <printf_parse@@Base+0x78>
   1d418:	tbnz	w10, #1, 1d434 <printf_parse@@Base+0xe3c>
   1d41c:	tst	w10, #0x1
   1d420:	mov	w8, #0x13                  	// #19
   1d424:	cinc	w9, w8, eq  // eq = none
   1d428:	b	1cd0c <printf_parse@@Base+0x714>
   1d42c:	mov	w9, #0x1                   	// #1
   1d430:	b	1cd0c <printf_parse@@Base+0x714>
   1d434:	mov	w9, #0x12                  	// #18
   1d438:	b	1cd0c <printf_parse@@Base+0x714>
   1d43c:	ldp	x8, x9, [x14]
   1d440:	mov	w10, #0x58                  	// #88
   1d444:	mov	w0, wzr
   1d448:	mul	x8, x8, x10
   1d44c:	str	x22, [x9, x8]
   1d450:	ldur	x8, [x29, #-56]
   1d454:	stp	x15, x8, [x14, #16]
   1d458:	b	1d4e4 <printf_parse@@Base+0xeec>
   1d45c:	cmp	w8, #0xa
   1d460:	b.eq	1d4a4 <printf_parse@@Base+0xeac>  // b.none
   1d464:	cmp	w8, #0x13
   1d468:	b.ne	1d4e4 <printf_parse@@Base+0xeec>  // b.any
   1d46c:	ldr	x0, [x2, #8]
   1d470:	ldr	x8, [sp, #24]
   1d474:	cmp	x0, x8
   1d478:	b.eq	1d484 <printf_parse@@Base+0xe8c>  // b.none
   1d47c:	bl	b1d0 <free@plt>
   1d480:	ldur	x14, [x29, #-40]
   1d484:	ldr	x0, [x14, #8]
   1d488:	ldr	x8, [sp, #8]
   1d48c:	cmp	x0, x8
   1d490:	b.eq	1d498 <printf_parse@@Base+0xea0>  // b.none
   1d494:	bl	b1d0 <free@plt>
   1d498:	bl	b6f0 <__errno_location@plt>
   1d49c:	mov	w8, #0xc                   	// #12
   1d4a0:	b	1d4d8 <printf_parse@@Base+0xee0>
   1d4a4:	ldr	x0, [x2, #8]
   1d4a8:	ldr	x8, [sp, #24]
   1d4ac:	cmp	x0, x8
   1d4b0:	b.eq	1d4bc <printf_parse@@Base+0xec4>  // b.none
   1d4b4:	bl	b1d0 <free@plt>
   1d4b8:	ldur	x14, [x29, #-40]
   1d4bc:	ldr	x0, [x14, #8]
   1d4c0:	ldr	x8, [sp, #8]
   1d4c4:	cmp	x0, x8
   1d4c8:	b.eq	1d4d0 <printf_parse@@Base+0xed8>  // b.none
   1d4cc:	bl	b1d0 <free@plt>
   1d4d0:	bl	b6f0 <__errno_location@plt>
   1d4d4:	mov	w8, #0x16                  	// #22
   1d4d8:	str	w8, [x0]
   1d4dc:	mov	w0, #0xffffffff            	// #-1
   1d4e0:	b	1d4e4 <printf_parse@@Base+0xeec>
   1d4e4:	ldp	x20, x19, [sp, #208]
   1d4e8:	ldp	x22, x21, [sp, #192]
   1d4ec:	ldp	x24, x23, [sp, #176]
   1d4f0:	ldp	x26, x25, [sp, #160]
   1d4f4:	ldp	x28, x27, [sp, #144]
   1d4f8:	ldp	x29, x30, [sp, #128]
   1d4fc:	add	sp, sp, #0xe0
   1d500:	ret

000000000001d504 <rpl_re_compile_pattern@@Base>:
   1d504:	stp	x29, x30, [sp, #-16]!
   1d508:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1d50c:	ldr	x9, [x9, #3920]
   1d510:	mov	x8, x1
   1d514:	mov	x1, x0
   1d518:	mov	x0, x2
   1d51c:	ldr	x3, [x9]
   1d520:	ldrb	w9, [x2, #56]
   1d524:	mov	x29, sp
   1d528:	ubfx	x10, x3, #21, #11
   1d52c:	and	w10, w10, #0x10
   1d530:	and	w9, w9, #0xffffffef
   1d534:	orr	w9, w9, w10
   1d538:	orr	w9, w9, #0x80
   1d53c:	strb	w9, [x2, #56]
   1d540:	mov	x2, x8
   1d544:	bl	1d584 <rpl_re_compile_pattern@@Base+0x80>
   1d548:	cbz	w0, 1d578 <rpl_re_compile_pattern@@Base+0x74>
   1d54c:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1d550:	add	x8, x8, #0x9d0
   1d554:	ldr	x8, [x8, w0, sxtw #3]
   1d558:	adrp	x9, 2d000 <vasnprintf@@Base+0x2ec4>
   1d55c:	add	x9, x9, #0x851
   1d560:	mov	w2, #0x5                   	// #5
   1d564:	add	x1, x9, x8
   1d568:	mov	x0, xzr
   1d56c:	bl	b580 <dcgettext@plt>
   1d570:	ldp	x29, x30, [sp], #16
   1d574:	ret
   1d578:	mov	x0, xzr
   1d57c:	ldp	x29, x30, [sp], #16
   1d580:	ret
   1d584:	sub	sp, sp, #0xe0
   1d588:	stp	x29, x30, [sp, #160]
   1d58c:	add	x29, sp, #0xa0
   1d590:	str	x23, [sp, #176]
   1d594:	stp	x22, x21, [sp, #192]
   1d598:	stp	x20, x19, [sp, #208]
   1d59c:	str	wzr, [x29, #28]
   1d5a0:	ldrb	w8, [x0, #56]
   1d5a4:	ldp	x20, x9, [x0]
   1d5a8:	mov	w10, #0x90                  	// #144
   1d5ac:	mov	x21, x3
   1d5b0:	mov	x22, x2
   1d5b4:	mov	x23, x1
   1d5b8:	mov	x19, x0
   1d5bc:	and	w8, w8, w10
   1d5c0:	cmp	x9, #0x117
   1d5c4:	stp	xzr, x3, [x0, #16]
   1d5c8:	str	xzr, [x0, #48]
   1d5cc:	strb	w8, [x0, #56]
   1d5d0:	b.ls	1d710 <rpl_re_compile_pattern@@Base+0x20c>  // b.plast
   1d5d4:	mov	w8, #0x118                 	// #280
   1d5d8:	mov	x0, x20
   1d5dc:	mov	x1, x22
   1d5e0:	str	x8, [x19, #16]
   1d5e4:	bl	1ecd0 <rpl_re_set_registers@@Base+0x128>
   1d5e8:	str	w0, [x29, #28]
   1d5ec:	cbnz	w0, 1d618 <rpl_re_compile_pattern@@Base+0x114>
   1d5f0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1d5f4:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1d5f8:	ldr	x8, [x8, #3944]
   1d5fc:	ldr	x9, [x9, #4040]
   1d600:	orr	x8, x9, x8
   1d604:	cbz	x8, 1d618 <rpl_re_compile_pattern@@Base+0x114>
   1d608:	add	x0, x20, #0xe8
   1d60c:	mov	x1, xzr
   1d610:	bl	af20 <pthread_mutex_init@plt>
   1d614:	cbnz	w0, 1d730 <rpl_re_compile_pattern@@Base+0x22c>
   1d618:	ldr	w8, [x29, #28]
   1d61c:	cbnz	w8, 1d700 <rpl_re_compile_pattern@@Base+0x1fc>
   1d620:	ldr	x3, [x19, #40]
   1d624:	ubfx	x4, x21, #22, #1
   1d628:	add	x0, sp, #0x8
   1d62c:	mov	x1, x23
   1d630:	mov	x2, x22
   1d634:	mov	x5, x20
   1d638:	bl	1eed0 <rpl_re_set_registers@@Base+0x328>
   1d63c:	str	w0, [x29, #28]
   1d640:	cbnz	w0, 1d6d0 <rpl_re_compile_pattern@@Base+0x1cc>
   1d644:	add	x0, sp, #0x8
   1d648:	add	x3, x29, #0x1c
   1d64c:	mov	x1, x19
   1d650:	mov	x2, x21
   1d654:	str	xzr, [x19, #48]
   1d658:	bl	1f088 <rpl_re_set_registers@@Base+0x4e0>
   1d65c:	str	x0, [x20, #104]
   1d660:	cbz	x0, 1d6d0 <rpl_re_compile_pattern@@Base+0x1cc>
   1d664:	mov	x0, x19
   1d668:	bl	1f15c <rpl_re_set_registers@@Base+0x5b4>
   1d66c:	str	w0, [x29, #28]
   1d670:	cbnz	w0, 1d6d0 <rpl_re_compile_pattern@@Base+0x1cc>
   1d674:	tbnz	w21, #22, 1d690 <rpl_re_compile_pattern@@Base+0x18c>
   1d678:	ldrb	w8, [x20, #176]
   1d67c:	tbz	w8, #2, 1d690 <rpl_re_compile_pattern@@Base+0x18c>
   1d680:	ldr	x8, [x19, #40]
   1d684:	cbnz	x8, 1d690 <rpl_re_compile_pattern@@Base+0x18c>
   1d688:	mov	x0, x20
   1d68c:	bl	1f338 <rpl_re_set_registers@@Base+0x790>
   1d690:	mov	x0, x20
   1d694:	bl	1f4c0 <rpl_re_set_registers@@Base+0x918>
   1d698:	str	w0, [x29, #28]
   1d69c:	mov	x0, x19
   1d6a0:	bl	1f000 <rpl_re_set_registers@@Base+0x458>
   1d6a4:	add	x0, sp, #0x8
   1d6a8:	bl	1f04c <rpl_re_set_registers@@Base+0x4a4>
   1d6ac:	ldr	w8, [x29, #28]
   1d6b0:	cbnz	w8, 1d6e0 <rpl_re_compile_pattern@@Base+0x1dc>
   1d6b4:	ldr	w0, [x29, #28]
   1d6b8:	ldp	x20, x19, [sp, #208]
   1d6bc:	ldp	x22, x21, [sp, #192]
   1d6c0:	ldr	x23, [sp, #176]
   1d6c4:	ldp	x29, x30, [sp, #160]
   1d6c8:	add	sp, sp, #0xe0
   1d6cc:	ret
   1d6d0:	mov	x0, x19
   1d6d4:	bl	1f000 <rpl_re_set_registers@@Base+0x458>
   1d6d8:	add	x0, sp, #0x8
   1d6dc:	bl	1f04c <rpl_re_set_registers@@Base+0x4a4>
   1d6e0:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1d6e4:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1d6e8:	ldr	x8, [x8, #3944]
   1d6ec:	ldr	x9, [x9, #4040]
   1d6f0:	orr	x8, x9, x8
   1d6f4:	cbz	x8, 1d700 <rpl_re_compile_pattern@@Base+0x1fc>
   1d6f8:	add	x0, x20, #0xe8
   1d6fc:	bl	b3e0 <pthread_mutex_destroy@plt>
   1d700:	mov	x0, x20
   1d704:	bl	1dd94 <rpl_regfree@@Base+0x68>
   1d708:	stp	xzr, xzr, [x19]
   1d70c:	b	1d6b4 <rpl_re_compile_pattern@@Base+0x1b0>
   1d710:	mov	w1, #0x118                 	// #280
   1d714:	mov	x0, x20
   1d718:	bl	aea0 <realloc@plt>
   1d71c:	cbz	x0, 1d744 <rpl_re_compile_pattern@@Base+0x240>
   1d720:	mov	x20, x0
   1d724:	mov	w8, #0x118                 	// #280
   1d728:	stp	x0, x8, [x19]
   1d72c:	b	1d5d4 <rpl_re_compile_pattern@@Base+0xd0>
   1d730:	mov	w8, #0xc                   	// #12
   1d734:	str	w8, [x29, #28]
   1d738:	ldr	w8, [x29, #28]
   1d73c:	cbz	w8, 1d620 <rpl_re_compile_pattern@@Base+0x11c>
   1d740:	b	1d700 <rpl_re_compile_pattern@@Base+0x1fc>
   1d744:	mov	w0, #0xc                   	// #12
   1d748:	b	1d6b8 <rpl_re_compile_pattern@@Base+0x1b4>

000000000001d74c <rpl_re_set_syntax@@Base>:
   1d74c:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1d750:	ldr	x9, [x9, #3920]
   1d754:	ldr	x8, [x9]
   1d758:	str	x0, [x9]
   1d75c:	mov	x0, x8
   1d760:	ret

000000000001d764 <rpl_re_compile_fastmap@@Base>:
   1d764:	stp	x29, x30, [sp, #-48]!
   1d768:	stp	x20, x19, [sp, #32]
   1d76c:	ldr	x20, [x0, #32]
   1d770:	str	x21, [sp, #16]
   1d774:	ldr	x21, [x0]
   1d778:	movi	v0.2d, #0x0
   1d77c:	stp	q0, q0, [x20, #224]
   1d780:	stp	q0, q0, [x20, #192]
   1d784:	stp	q0, q0, [x20, #160]
   1d788:	stp	q0, q0, [x20, #128]
   1d78c:	stp	q0, q0, [x20, #96]
   1d790:	stp	q0, q0, [x20, #64]
   1d794:	stp	q0, q0, [x20, #32]
   1d798:	stp	q0, q0, [x20]
   1d79c:	ldr	x1, [x21, #72]
   1d7a0:	mov	x2, x20
   1d7a4:	mov	x29, sp
   1d7a8:	mov	x19, x0
   1d7ac:	bl	1d820 <rpl_re_compile_fastmap@@Base+0xbc>
   1d7b0:	ldp	x8, x1, [x21, #72]
   1d7b4:	cmp	x8, x1
   1d7b8:	b.eq	1d7c8 <rpl_re_compile_fastmap@@Base+0x64>  // b.none
   1d7bc:	mov	x0, x19
   1d7c0:	mov	x2, x20
   1d7c4:	bl	1d820 <rpl_re_compile_fastmap@@Base+0xbc>
   1d7c8:	ldr	x8, [x21, #72]
   1d7cc:	ldr	x1, [x21, #88]
   1d7d0:	cmp	x8, x1
   1d7d4:	b.eq	1d7e4 <rpl_re_compile_fastmap@@Base+0x80>  // b.none
   1d7d8:	mov	x0, x19
   1d7dc:	mov	x2, x20
   1d7e0:	bl	1d820 <rpl_re_compile_fastmap@@Base+0xbc>
   1d7e4:	ldr	x8, [x21, #72]
   1d7e8:	ldr	x1, [x21, #96]
   1d7ec:	cmp	x8, x1
   1d7f0:	b.eq	1d800 <rpl_re_compile_fastmap@@Base+0x9c>  // b.none
   1d7f4:	mov	x0, x19
   1d7f8:	mov	x2, x20
   1d7fc:	bl	1d820 <rpl_re_compile_fastmap@@Base+0xbc>
   1d800:	ldrb	w8, [x19, #56]
   1d804:	ldr	x21, [sp, #16]
   1d808:	mov	w0, wzr
   1d80c:	orr	w8, w8, #0x8
   1d810:	strb	w8, [x19, #56]
   1d814:	ldp	x20, x19, [sp, #32]
   1d818:	ldp	x29, x30, [sp], #48
   1d81c:	ret
   1d820:	sub	sp, sp, #0x1a0
   1d824:	stp	x29, x30, [sp, #320]
   1d828:	stp	x28, x27, [sp, #336]
   1d82c:	stp	x26, x25, [sp, #352]
   1d830:	stp	x24, x23, [sp, #368]
   1d834:	stp	x22, x21, [sp, #384]
   1d838:	stp	x20, x19, [sp, #400]
   1d83c:	ldr	x23, [x0]
   1d840:	mov	x20, x2
   1d844:	add	x29, sp, #0x140
   1d848:	str	x0, [sp, #32]
   1d84c:	ldr	w8, [x23, #180]
   1d850:	cmp	w8, #0x1
   1d854:	b.ne	1d864 <rpl_re_compile_fastmap@@Base+0x100>  // b.any
   1d858:	ldrb	w8, [x0, #26]
   1d85c:	ubfx	w24, w8, #6, #1
   1d860:	b	1d868 <rpl_re_compile_fastmap@@Base+0x104>
   1d864:	mov	w24, wzr
   1d868:	ldr	x8, [x1, #16]
   1d86c:	cmp	x8, #0x1
   1d870:	b.lt	1db7c <rpl_re_compile_fastmap@@Base+0x418>  // b.tstop
   1d874:	add	x8, sp, #0x28
   1d878:	mov	x10, xzr
   1d87c:	mov	w27, #0x1                   	// #1
   1d880:	orr	x8, x8, #0x1
   1d884:	stp	x8, x1, [sp, #8]
   1d888:	b	1d8a0 <rpl_re_compile_fastmap@@Base+0x13c>
   1d88c:	ldp	x1, x10, [sp, #16]
   1d890:	ldr	x8, [x1, #16]
   1d894:	add	x10, x10, #0x1
   1d898:	cmp	x10, x8
   1d89c:	b.ge	1db7c <rpl_re_compile_fastmap@@Base+0x418>  // b.tcont
   1d8a0:	ldr	x8, [x1, #24]
   1d8a4:	str	x10, [sp, #24]
   1d8a8:	ldr	x21, [x8, x10, lsl #3]
   1d8ac:	ldr	x8, [x23]
   1d8b0:	lsl	x22, x21, #4
   1d8b4:	add	x9, x8, x21, lsl #4
   1d8b8:	ldrb	w8, [x9, #8]
   1d8bc:	cmp	w8, #0x1
   1d8c0:	b.eq	1d934 <rpl_re_compile_fastmap@@Base+0x1d0>  // b.none
   1d8c4:	cmp	w8, #0x6
   1d8c8:	b.eq	1da18 <rpl_re_compile_fastmap@@Base+0x2b4>  // b.none
   1d8cc:	cmp	w8, #0x3
   1d8d0:	b.ne	1da84 <rpl_re_compile_fastmap@@Base+0x320>  // b.any
   1d8d4:	mov	x26, xzr
   1d8d8:	mov	x28, xzr
   1d8dc:	b	1d8f0 <rpl_re_compile_fastmap@@Base+0x18c>
   1d8e0:	add	x26, x26, #0x1
   1d8e4:	cmp	x26, #0x4
   1d8e8:	add	x28, x21, w28, sxtw
   1d8ec:	b.eq	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.none
   1d8f0:	ldr	x8, [x23]
   1d8f4:	mov	x21, xzr
   1d8f8:	add	x25, x20, w28, sxtw
   1d8fc:	ldr	x8, [x8, x22]
   1d900:	ldr	x19, [x8, x26, lsl #3]
   1d904:	b	1d914 <rpl_re_compile_fastmap@@Base+0x1b0>
   1d908:	add	x21, x21, #0x1
   1d90c:	cmp	x21, #0x40
   1d910:	b.eq	1d8e0 <rpl_re_compile_fastmap@@Base+0x17c>  // b.none
   1d914:	lsr	x8, x19, x21
   1d918:	tbz	w8, #0, 1d908 <rpl_re_compile_fastmap@@Base+0x1a4>
   1d91c:	strb	w27, [x25, x21]
   1d920:	cbz	w24, 1d908 <rpl_re_compile_fastmap@@Base+0x1a4>
   1d924:	add	w0, w28, w21
   1d928:	bl	b700 <tolower@plt>
   1d92c:	strb	w27, [x20, w0, sxtw]
   1d930:	b	1d908 <rpl_re_compile_fastmap@@Base+0x1a4>
   1d934:	ldrb	w0, [x9]
   1d938:	strb	w27, [x20, x0]
   1d93c:	cbz	w24, 1d948 <rpl_re_compile_fastmap@@Base+0x1e4>
   1d940:	bl	b700 <tolower@plt>
   1d944:	strb	w27, [x20, w0, sxtw]
   1d948:	ldr	x8, [sp, #32]
   1d94c:	ldrb	w8, [x8, #26]
   1d950:	tbz	w8, #6, 1d88c <rpl_re_compile_fastmap@@Base+0x128>
   1d954:	ldr	w8, [x23, #180]
   1d958:	cmp	w8, #0x2
   1d95c:	b.lt	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.tstop
   1d960:	ldr	x8, [x23]
   1d964:	add	x9, x21, #0x1
   1d968:	mov	w13, #0x1                   	// #1
   1d96c:	movk	w13, #0x20, lsl #16
   1d970:	ldrb	w8, [x8, x22]
   1d974:	strb	w8, [sp, #40]
   1d978:	ldr	x8, [x23, #16]
   1d97c:	cmp	x9, x8
   1d980:	ldr	x8, [sp, #8]
   1d984:	b.cs	1d9c4 <rpl_re_compile_fastmap@@Base+0x260>  // b.hs, b.nlast
   1d988:	ldr	x8, [sp, #8]
   1d98c:	ldr	x10, [x23]
   1d990:	add	w12, w13, #0xfe
   1d994:	add	x10, x10, x22
   1d998:	ldr	w11, [x10, #24]
   1d99c:	and	w11, w11, w12
   1d9a0:	cmp	w11, w13
   1d9a4:	b.ne	1d9c4 <rpl_re_compile_fastmap@@Base+0x260>  // b.any
   1d9a8:	ldrb	w10, [x10, #16]
   1d9ac:	add	x9, x9, #0x1
   1d9b0:	add	x22, x22, #0x10
   1d9b4:	strb	w10, [x8], #1
   1d9b8:	ldr	x10, [x23, #16]
   1d9bc:	cmp	x9, x10
   1d9c0:	b.cc	1d98c <rpl_re_compile_fastmap@@Base+0x228>  // b.lo, b.ul, b.last
   1d9c4:	add	x9, sp, #0x28
   1d9c8:	sub	x22, x8, x9
   1d9cc:	sub	x0, x29, #0xc
   1d9d0:	add	x1, sp, #0x28
   1d9d4:	sub	x3, x29, #0x18
   1d9d8:	mov	x2, x22
   1d9dc:	stur	xzr, [x29, #-24]
   1d9e0:	bl	a950 <rpl_mbrtowc@plt>
   1d9e4:	cmp	x0, x22
   1d9e8:	b.ne	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.any
   1d9ec:	ldur	w0, [x29, #-12]
   1d9f0:	bl	b7c0 <towlower@plt>
   1d9f4:	mov	w1, w0
   1d9f8:	add	x0, sp, #0x28
   1d9fc:	sub	x2, x29, #0x18
   1da00:	bl	b850 <wcrtomb@plt>
   1da04:	cmn	x0, #0x1
   1da08:	b.eq	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.none
   1da0c:	ldrb	w8, [sp, #40]
   1da10:	strb	w27, [x20, x8]
   1da14:	b	1d88c <rpl_re_compile_fastmap@@Base+0x128>
   1da18:	ldr	w8, [x23, #180]
   1da1c:	ldr	x22, [x9]
   1da20:	cmp	w8, #0x2
   1da24:	b.lt	1daa0 <rpl_re_compile_fastmap@@Base+0x33c>  // b.tstop
   1da28:	ldr	x8, [x22, #72]
   1da2c:	cbnz	x8, 1da40 <rpl_re_compile_fastmap@@Base+0x2dc>
   1da30:	ldrb	w8, [x22, #32]
   1da34:	tbnz	w8, #0, 1da40 <rpl_re_compile_fastmap@@Base+0x2dc>
   1da38:	ldr	x8, [x22, #64]
   1da3c:	cbz	x8, 1daa0 <rpl_re_compile_fastmap@@Base+0x33c>
   1da40:	sturb	wzr, [x29, #-24]
   1da44:	b	1da58 <rpl_re_compile_fastmap@@Base+0x2f4>
   1da48:	ldurb	w8, [x29, #-24]
   1da4c:	add	w8, w8, #0x1
   1da50:	sturb	w8, [x29, #-24]
   1da54:	tbnz	w8, #8, 1d88c <rpl_re_compile_fastmap@@Base+0x128>
   1da58:	sub	x1, x29, #0x18
   1da5c:	add	x3, sp, #0x28
   1da60:	mov	w2, #0x1                   	// #1
   1da64:	mov	x0, xzr
   1da68:	str	xzr, [sp, #40]
   1da6c:	bl	a950 <rpl_mbrtowc@plt>
   1da70:	cmn	x0, #0x2
   1da74:	b.ne	1da48 <rpl_re_compile_fastmap@@Base+0x2e4>  // b.any
   1da78:	ldurb	w8, [x29, #-24]
   1da7c:	strb	w27, [x20, x8]
   1da80:	b	1da48 <rpl_re_compile_fastmap@@Base+0x2e4>
   1da84:	cmp	w8, #0x7
   1da88:	b.hi	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.pmore
   1da8c:	lsl	w9, w27, w8
   1da90:	mov	w10, #0xa4                  	// #164
   1da94:	tst	w9, w10
   1da98:	b.eq	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.none
   1da9c:	b	1db40 <rpl_re_compile_fastmap@@Base+0x3dc>
   1daa0:	ldr	x8, [x22, #40]
   1daa4:	cmp	x8, #0x1
   1daa8:	b.lt	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.tstop
   1daac:	mov	x26, xzr
   1dab0:	b	1dac4 <rpl_re_compile_fastmap@@Base+0x360>
   1dab4:	ldr	x8, [x22, #40]
   1dab8:	add	x26, x26, #0x1
   1dabc:	cmp	x26, x8
   1dac0:	b.ge	1d88c <rpl_re_compile_fastmap@@Base+0x128>  // b.tcont
   1dac4:	stur	xzr, [x29, #-24]
   1dac8:	ldr	x8, [x22]
   1dacc:	add	x0, sp, #0x28
   1dad0:	sub	x2, x29, #0x18
   1dad4:	ldr	w1, [x8, x26, lsl #2]
   1dad8:	bl	b850 <wcrtomb@plt>
   1dadc:	cmn	x0, #0x1
   1dae0:	b.eq	1daf8 <rpl_re_compile_fastmap@@Base+0x394>  // b.none
   1dae4:	ldrb	w0, [sp, #40]
   1dae8:	strb	w27, [x20, x0]
   1daec:	cbz	w24, 1daf8 <rpl_re_compile_fastmap@@Base+0x394>
   1daf0:	bl	b700 <tolower@plt>
   1daf4:	strb	w27, [x20, w0, sxtw]
   1daf8:	ldr	x8, [sp, #32]
   1dafc:	ldrb	w8, [x8, #26]
   1db00:	tbz	w8, #6, 1dab4 <rpl_re_compile_fastmap@@Base+0x350>
   1db04:	ldr	w8, [x23, #180]
   1db08:	cmp	w8, #0x2
   1db0c:	b.lt	1dab4 <rpl_re_compile_fastmap@@Base+0x350>  // b.tstop
   1db10:	ldr	x8, [x22]
   1db14:	ldr	w0, [x8, x26, lsl #2]
   1db18:	bl	b7c0 <towlower@plt>
   1db1c:	mov	w1, w0
   1db20:	add	x0, sp, #0x28
   1db24:	sub	x2, x29, #0x18
   1db28:	bl	b850 <wcrtomb@plt>
   1db2c:	cmn	x0, #0x1
   1db30:	b.eq	1dab4 <rpl_re_compile_fastmap@@Base+0x350>  // b.none
   1db34:	ldrb	w8, [sp, #40]
   1db38:	strb	w27, [x20, x8]
   1db3c:	b	1dab4 <rpl_re_compile_fastmap@@Base+0x350>
   1db40:	movi	v0.16b, #0x1
   1db44:	cmp	w8, #0x2
   1db48:	stp	q0, q0, [x20, #224]
   1db4c:	stp	q0, q0, [x20, #192]
   1db50:	stp	q0, q0, [x20, #160]
   1db54:	stp	q0, q0, [x20, #128]
   1db58:	stp	q0, q0, [x20, #96]
   1db5c:	stp	q0, q0, [x20, #64]
   1db60:	stp	q0, q0, [x20, #32]
   1db64:	stp	q0, q0, [x20]
   1db68:	b.ne	1db7c <rpl_re_compile_fastmap@@Base+0x418>  // b.any
   1db6c:	ldr	x9, [sp, #32]
   1db70:	ldrb	w8, [x9, #56]
   1db74:	orr	w8, w8, #0x1
   1db78:	strb	w8, [x9, #56]
   1db7c:	ldp	x20, x19, [sp, #400]
   1db80:	ldp	x22, x21, [sp, #384]
   1db84:	ldp	x24, x23, [sp, #368]
   1db88:	ldp	x26, x25, [sp, #352]
   1db8c:	ldp	x28, x27, [sp, #336]
   1db90:	ldp	x29, x30, [sp, #320]
   1db94:	add	sp, sp, #0x1a0
   1db98:	ret

000000000001db9c <rpl_regcomp@@Base>:
   1db9c:	stp	x29, x30, [sp, #-48]!
   1dba0:	stp	x20, x19, [sp, #32]
   1dba4:	mov	x19, x0
   1dba8:	stp	xzr, xzr, [x0]
   1dbac:	str	xzr, [x0, #16]
   1dbb0:	mov	w0, #0x100                 	// #256
   1dbb4:	stp	x22, x21, [sp, #16]
   1dbb8:	mov	x29, sp
   1dbbc:	mov	w21, w2
   1dbc0:	mov	x20, x1
   1dbc4:	bl	abc0 <malloc@plt>
   1dbc8:	str	x0, [x19, #32]
   1dbcc:	cbz	x0, 1dc84 <rpl_regcomp@@Base+0xe8>
   1dbd0:	mov	w8, #0xb2fc                	// #45820
   1dbd4:	mov	w9, #0x2c6                 	// #710
   1dbd8:	tst	w21, #0x1
   1dbdc:	movk	w8, #0x3, lsl #16
   1dbe0:	movk	w9, #0x101, lsl #16
   1dbe4:	lsl	w10, w21, #21
   1dbe8:	csel	x8, x9, x8, eq  // eq = none
   1dbec:	and	w9, w10, #0x400000
   1dbf0:	orr	x22, x8, x9
   1dbf4:	tbnz	w21, #2, 1dc04 <rpl_regcomp@@Base+0x68>
   1dbf8:	ldrb	w8, [x19, #56]
   1dbfc:	and	w8, w8, #0x7f
   1dc00:	b	1dc1c <rpl_regcomp@@Base+0x80>
   1dc04:	ldrb	w8, [x19, #56]
   1dc08:	mov	w9, #0xb2be                	// #45758
   1dc0c:	movk	w9, #0x143, lsl #16
   1dc10:	and	x9, x22, x9
   1dc14:	orr	x22, x9, #0x100
   1dc18:	orr	w8, w8, #0x80
   1dc1c:	strb	w8, [x19, #56]
   1dc20:	and	w8, w8, #0xff
   1dc24:	lsl	w9, w21, #1
   1dc28:	and	w9, w9, #0x10
   1dc2c:	and	w8, w8, #0xffffffef
   1dc30:	orr	w8, w8, w9
   1dc34:	mov	x0, x20
   1dc38:	strb	w8, [x19, #56]
   1dc3c:	str	xzr, [x19, #40]
   1dc40:	bl	a890 <strlen@plt>
   1dc44:	mov	x2, x0
   1dc48:	mov	x0, x19
   1dc4c:	mov	x1, x20
   1dc50:	mov	x3, x22
   1dc54:	bl	1d584 <rpl_re_compile_pattern@@Base+0x80>
   1dc58:	cmp	w0, #0x10
   1dc5c:	mov	w8, #0x8                   	// #8
   1dc60:	csel	w20, w8, w0, eq  // eq = none
   1dc64:	cbnz	w20, 1dc8c <rpl_regcomp@@Base+0xf0>
   1dc68:	mov	x0, x19
   1dc6c:	bl	b7e0 <rpl_re_compile_fastmap@plt>
   1dc70:	mov	w0, w20
   1dc74:	ldp	x20, x19, [sp, #32]
   1dc78:	ldp	x22, x21, [sp, #16]
   1dc7c:	ldp	x29, x30, [sp], #48
   1dc80:	ret
   1dc84:	mov	w20, #0xc                   	// #12
   1dc88:	b	1dc70 <rpl_regcomp@@Base+0xd4>
   1dc8c:	ldr	x0, [x19, #32]
   1dc90:	bl	b1d0 <free@plt>
   1dc94:	str	xzr, [x19, #32]
   1dc98:	b	1dc70 <rpl_regcomp@@Base+0xd4>

000000000001dc9c <rpl_regerror@@Base>:
   1dc9c:	stp	x29, x30, [sp, #-48]!
   1dca0:	cmp	w0, #0x11
   1dca4:	stp	x22, x21, [sp, #16]
   1dca8:	stp	x20, x19, [sp, #32]
   1dcac:	mov	x29, sp
   1dcb0:	b.cs	1dd28 <rpl_regerror@@Base+0x8c>  // b.hs, b.nlast
   1dcb4:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1dcb8:	add	x8, x8, #0x9d0
   1dcbc:	ldr	x8, [x8, w0, sxtw #3]
   1dcc0:	adrp	x9, 2d000 <vasnprintf@@Base+0x2ec4>
   1dcc4:	add	x9, x9, #0x851
   1dcc8:	mov	x19, x2
   1dccc:	add	x1, x9, x8
   1dcd0:	mov	w2, #0x5                   	// #5
   1dcd4:	mov	x0, xzr
   1dcd8:	mov	x20, x3
   1dcdc:	bl	b580 <dcgettext@plt>
   1dce0:	mov	x21, x0
   1dce4:	bl	a890 <strlen@plt>
   1dce8:	add	x22, x0, #0x1
   1dcec:	cbz	x20, 1dd08 <rpl_regerror@@Base+0x6c>
   1dcf0:	cmp	x22, x20
   1dcf4:	mov	x2, x22
   1dcf8:	b.hi	1dd1c <rpl_regerror@@Base+0x80>  // b.pmore
   1dcfc:	mov	x0, x19
   1dd00:	mov	x1, x21
   1dd04:	bl	a800 <memcpy@plt>
   1dd08:	mov	x0, x22
   1dd0c:	ldp	x20, x19, [sp, #32]
   1dd10:	ldp	x22, x21, [sp, #16]
   1dd14:	ldp	x29, x30, [sp], #48
   1dd18:	ret
   1dd1c:	sub	x2, x20, #0x1
   1dd20:	strb	wzr, [x19, x2]
   1dd24:	b	1dcfc <rpl_regerror@@Base+0x60>
   1dd28:	bl	b020 <abort@plt>

000000000001dd2c <rpl_regfree@@Base>:
   1dd2c:	stp	x29, x30, [sp, #-32]!
   1dd30:	stp	x20, x19, [sp, #16]
   1dd34:	ldr	x20, [x0]
   1dd38:	mov	x19, x0
   1dd3c:	mov	x29, sp
   1dd40:	cbz	x20, 1dd6c <rpl_regfree@@Base+0x40>
   1dd44:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1dd48:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1dd4c:	ldr	x8, [x8, #3944]
   1dd50:	ldr	x9, [x9, #4040]
   1dd54:	orr	x8, x9, x8
   1dd58:	cbz	x8, 1dd64 <rpl_regfree@@Base+0x38>
   1dd5c:	add	x0, x20, #0xe8
   1dd60:	bl	b3e0 <pthread_mutex_destroy@plt>
   1dd64:	mov	x0, x20
   1dd68:	bl	1dd94 <rpl_regfree@@Base+0x68>
   1dd6c:	ldr	x0, [x19, #32]
   1dd70:	stp	xzr, xzr, [x19]
   1dd74:	bl	b1d0 <free@plt>
   1dd78:	ldr	x0, [x19, #40]
   1dd7c:	str	xzr, [x19, #32]
   1dd80:	bl	b1d0 <free@plt>
   1dd84:	str	xzr, [x19, #40]
   1dd88:	ldp	x20, x19, [sp, #16]
   1dd8c:	ldp	x29, x30, [sp], #32
   1dd90:	ret
   1dd94:	stp	x29, x30, [sp, #-64]!
   1dd98:	stp	x24, x23, [sp, #16]
   1dd9c:	stp	x22, x21, [sp, #32]
   1dda0:	stp	x20, x19, [sp, #48]
   1dda4:	ldr	x8, [x0]
   1dda8:	mov	x19, x0
   1ddac:	mov	x29, sp
   1ddb0:	cbz	x8, 1dde4 <rpl_regfree@@Base+0xb8>
   1ddb4:	ldr	x8, [x19, #16]
   1ddb8:	cbz	x8, 1dde4 <rpl_regfree@@Base+0xb8>
   1ddbc:	mov	x20, xzr
   1ddc0:	mov	x21, xzr
   1ddc4:	ldr	x8, [x19]
   1ddc8:	add	x0, x8, x20
   1ddcc:	bl	1ebd8 <rpl_re_set_registers@@Base+0x30>
   1ddd0:	ldr	x8, [x19, #16]
   1ddd4:	add	x21, x21, #0x1
   1ddd8:	add	x20, x20, #0x10
   1dddc:	cmp	x21, x8
   1dde0:	b.cc	1ddc4 <rpl_regfree@@Base+0x98>  // b.lo, b.ul, b.last
   1dde4:	ldr	x0, [x19, #24]
   1dde8:	bl	b1d0 <free@plt>
   1ddec:	ldr	x8, [x19, #16]
   1ddf0:	cbz	x8, 1de48 <rpl_regfree@@Base+0x11c>
   1ddf4:	mov	x20, xzr
   1ddf8:	mov	w21, #0x10                  	// #16
   1ddfc:	b	1de14 <rpl_regfree@@Base+0xe8>
   1de00:	ldr	x8, [x19, #16]
   1de04:	add	x20, x20, #0x1
   1de08:	add	x21, x21, #0x18
   1de0c:	cmp	x20, x8
   1de10:	b.cs	1de48 <rpl_regfree@@Base+0x11c>  // b.hs, b.nlast
   1de14:	ldr	x8, [x19, #48]
   1de18:	cbz	x8, 1de24 <rpl_regfree@@Base+0xf8>
   1de1c:	ldr	x0, [x8, x21]
   1de20:	bl	b1d0 <free@plt>
   1de24:	ldr	x8, [x19, #56]
   1de28:	cbz	x8, 1de34 <rpl_regfree@@Base+0x108>
   1de2c:	ldr	x0, [x8, x21]
   1de30:	bl	b1d0 <free@plt>
   1de34:	ldr	x8, [x19, #40]
   1de38:	cbz	x8, 1de00 <rpl_regfree@@Base+0xd4>
   1de3c:	ldr	x0, [x8, x21]
   1de40:	bl	b1d0 <free@plt>
   1de44:	b	1de00 <rpl_regfree@@Base+0xd4>
   1de48:	ldr	x0, [x19, #40]
   1de4c:	bl	b1d0 <free@plt>
   1de50:	ldr	x0, [x19, #48]
   1de54:	bl	b1d0 <free@plt>
   1de58:	ldr	x0, [x19, #56]
   1de5c:	bl	b1d0 <free@plt>
   1de60:	ldr	x0, [x19]
   1de64:	bl	b1d0 <free@plt>
   1de68:	ldr	x8, [x19, #64]
   1de6c:	cbz	x8, 1ded0 <rpl_regfree@@Base+0x1a4>
   1de70:	mov	x20, xzr
   1de74:	mov	w21, #0x18                  	// #24
   1de78:	b	1de94 <rpl_regfree@@Base+0x168>
   1de7c:	ldr	x0, [x22]
   1de80:	bl	b1d0 <free@plt>
   1de84:	ldr	x8, [x19, #136]
   1de88:	cmp	x20, x8
   1de8c:	add	x20, x20, #0x1
   1de90:	b.cs	1ded0 <rpl_regfree@@Base+0x1a4>  // b.hs, b.nlast
   1de94:	ldr	x8, [x19, #64]
   1de98:	madd	x23, x20, x21, x8
   1de9c:	mov	x22, x23
   1dea0:	ldr	x8, [x22], #16
   1dea4:	cmp	x8, #0x1
   1dea8:	b.lt	1de7c <rpl_regfree@@Base+0x150>  // b.tstop
   1deac:	mov	x24, xzr
   1deb0:	ldr	x8, [x22]
   1deb4:	ldr	x0, [x8, x24, lsl #3]
   1deb8:	bl	1ec20 <rpl_re_set_registers@@Base+0x78>
   1debc:	ldr	x8, [x23]
   1dec0:	add	x24, x24, #0x1
   1dec4:	cmp	x24, x8
   1dec8:	b.lt	1deb0 <rpl_regfree@@Base+0x184>  // b.tstop
   1decc:	b	1de7c <rpl_regfree@@Base+0x150>
   1ded0:	ldr	x0, [x19, #64]
   1ded4:	bl	b1d0 <free@plt>
   1ded8:	ldr	x0, [x19, #120]
   1dedc:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1dee0:	add	x8, x8, #0xa58
   1dee4:	cmp	x0, x8
   1dee8:	b.eq	1def0 <rpl_regfree@@Base+0x1c4>  // b.none
   1deec:	bl	b1d0 <free@plt>
   1def0:	ldr	x0, [x19, #224]
   1def4:	bl	b1d0 <free@plt>
   1def8:	mov	x0, x19
   1defc:	bl	b1d0 <free@plt>
   1df00:	ldp	x20, x19, [sp, #48]
   1df04:	ldp	x22, x21, [sp, #32]
   1df08:	ldp	x24, x23, [sp, #16]
   1df0c:	ldp	x29, x30, [sp], #64
   1df10:	ret

000000000001df14 <rpl_regexec@@Base>:
   1df14:	cmp	w4, #0x7
   1df18:	b.ls	1df24 <rpl_regexec@@Base+0x10>  // b.plast
   1df1c:	mov	w0, #0x2                   	// #2
   1df20:	ret
   1df24:	sub	sp, sp, #0x70
   1df28:	stp	x26, x25, [sp, #48]
   1df2c:	ldr	x26, [x0]
   1df30:	stp	x24, x23, [sp, #64]
   1df34:	stp	x22, x21, [sp, #80]
   1df38:	stp	x20, x19, [sp, #96]
   1df3c:	mov	w22, w4
   1df40:	mov	x19, x3
   1df44:	mov	x21, x2
   1df48:	mov	x20, x1
   1df4c:	mov	x23, x0
   1df50:	stp	x29, x30, [sp, #16]
   1df54:	stp	x28, x27, [sp, #32]
   1df58:	add	x29, sp, #0x10
   1df5c:	tbnz	w4, #2, 1df74 <rpl_regexec@@Base+0x60>
   1df60:	mov	x0, x20
   1df64:	bl	a890 <strlen@plt>
   1df68:	mov	x24, x0
   1df6c:	mov	x25, xzr
   1df70:	b	1df78 <rpl_regexec@@Base+0x64>
   1df74:	ldp	x25, x24, [x19]
   1df78:	adrp	x27, 3f000 <vasnprintf@@Base+0x14ec4>
   1df7c:	adrp	x28, 3f000 <vasnprintf@@Base+0x14ec4>
   1df80:	ldr	x27, [x27, #3944]
   1df84:	ldr	x28, [x28, #4040]
   1df88:	orr	x8, x28, x27
   1df8c:	cbz	x8, 1df98 <rpl_regexec@@Base+0x84>
   1df90:	add	x0, x26, #0xe8
   1df94:	bl	b750 <pthread_mutex_lock@plt>
   1df98:	ldrb	w8, [x23, #56]
   1df9c:	tbnz	w8, #4, 1dfc8 <rpl_regexec@@Base+0xb4>
   1dfa0:	mov	x0, x23
   1dfa4:	mov	x1, x20
   1dfa8:	mov	x2, x24
   1dfac:	mov	x3, x25
   1dfb0:	mov	x4, x24
   1dfb4:	mov	x5, x24
   1dfb8:	mov	x6, x21
   1dfbc:	mov	x7, x19
   1dfc0:	str	w22, [sp]
   1dfc4:	b	1dfec <rpl_regexec@@Base+0xd8>
   1dfc8:	str	w22, [sp]
   1dfcc:	mov	x0, x23
   1dfd0:	mov	x1, x20
   1dfd4:	mov	x2, x24
   1dfd8:	mov	x3, x25
   1dfdc:	mov	x4, x24
   1dfe0:	mov	x5, x24
   1dfe4:	mov	x6, xzr
   1dfe8:	mov	x7, xzr
   1dfec:	bl	1e02c <rpl_regexec@@Base+0x118>
   1dff0:	mov	w19, w0
   1dff4:	orr	x8, x28, x27
   1dff8:	cbz	x8, 1e004 <rpl_regexec@@Base+0xf0>
   1dffc:	add	x0, x26, #0xe8
   1e000:	bl	b780 <pthread_mutex_unlock@plt>
   1e004:	cmp	w19, #0x0
   1e008:	ldp	x20, x19, [sp, #96]
   1e00c:	ldp	x22, x21, [sp, #80]
   1e010:	ldp	x24, x23, [sp, #64]
   1e014:	ldp	x26, x25, [sp, #48]
   1e018:	ldp	x28, x27, [sp, #32]
   1e01c:	ldp	x29, x30, [sp, #16]
   1e020:	cset	w0, ne  // ne = any
   1e024:	add	sp, sp, #0x70
   1e028:	ret
   1e02c:	sub	sp, sp, #0x1d0
   1e030:	stp	x29, x30, [sp, #368]
   1e034:	stp	x28, x27, [sp, #384]
   1e038:	stp	x26, x25, [sp, #400]
   1e03c:	stp	x24, x23, [sp, #416]
   1e040:	stp	x22, x21, [sp, #432]
   1e044:	stp	x20, x19, [sp, #448]
   1e048:	ldr	x27, [x0]
   1e04c:	movi	v0.2d, #0x0
   1e050:	stp	q0, q0, [sp, #320]
   1e054:	stp	q0, q0, [sp, #288]
   1e058:	stp	q0, q0, [sp, #256]
   1e05c:	stp	q0, q0, [sp, #224]
   1e060:	stp	q0, q0, [sp, #192]
   1e064:	stp	q0, q0, [sp, #160]
   1e068:	stp	q0, q0, [sp, #128]
   1e06c:	stp	q0, q0, [sp, #96]
   1e070:	str	x27, [sp, #248]
   1e074:	ldr	x8, [x0, #32]
   1e078:	mov	x28, x5
   1e07c:	mov	x22, x3
   1e080:	mov	x24, x2
   1e084:	mov	x23, x0
   1e088:	mov	x25, x1
   1e08c:	add	x29, sp, #0x170
   1e090:	cbz	x8, 1e0b0 <rpl_regexec@@Base+0x19c>
   1e094:	ldrb	w9, [x23, #56]
   1e098:	mov	w10, #0x9                   	// #9
   1e09c:	and	w9, w9, w10
   1e0a0:	cmp	w9, #0x8
   1e0a4:	ccmp	x22, x4, #0x4, eq  // eq = none
   1e0a8:	csel	x21, x8, xzr, ne  // ne = any
   1e0ac:	b	1e0b4 <rpl_regexec@@Base+0x1a0>
   1e0b0:	mov	x21, xzr
   1e0b4:	ldr	x8, [x23, #48]
   1e0b8:	ldr	x9, [x23, #16]
   1e0bc:	mvn	x10, x8
   1e0c0:	add	x10, x10, x6
   1e0c4:	cmp	x8, x6
   1e0c8:	csel	x12, x10, xzr, cc  // cc = lo, ul, last
   1e0cc:	cbz	x9, 1e60c <rpl_regexec@@Base+0x6f8>
   1e0d0:	ldr	x10, [x27, #72]
   1e0d4:	cbz	x10, 1e60c <rpl_regexec@@Base+0x6f8>
   1e0d8:	ldr	x9, [x27, #80]
   1e0dc:	cbz	x9, 1e60c <rpl_regexec@@Base+0x6f8>
   1e0e0:	ldr	x8, [x27, #88]
   1e0e4:	cbz	x8, 1e60c <rpl_regexec@@Base+0x6f8>
   1e0e8:	ldr	x11, [x27, #96]
   1e0ec:	cbz	x11, 1e60c <rpl_regexec@@Base+0x6f8>
   1e0f0:	ldr	x10, [x10, #16]
   1e0f4:	ldr	x26, [x23, #40]
   1e0f8:	cbnz	x10, 1e104 <rpl_regexec@@Base+0x1f0>
   1e0fc:	ldr	x9, [x9, #16]
   1e100:	cbz	x9, 1e5ec <rpl_regexec@@Base+0x6d8>
   1e104:	mov	x20, x4
   1e108:	sub	x8, x6, x12
   1e10c:	mov	x19, x7
   1e110:	str	x12, [sp, #40]
   1e114:	str	x8, [sp, #80]
   1e118:	str	x6, [sp, #16]
   1e11c:	cbz	x8, 1e128 <rpl_regexec@@Base+0x214>
   1e120:	mov	w8, #0x1                   	// #1
   1e124:	b	1e134 <rpl_regexec@@Base+0x220>
   1e128:	ldr	x8, [x27, #152]
   1e12c:	cmp	x8, #0x0
   1e130:	cset	w8, ne  // ne = any
   1e134:	str	w8, [sp, #60]
   1e138:	ldr	x8, [x27, #16]
   1e13c:	ldr	x9, [x23, #24]
   1e140:	add	x0, sp, #0x60
   1e144:	mov	x1, x25
   1e148:	add	x3, x8, #0x1
   1e14c:	ubfx	x5, x9, #22, #1
   1e150:	mov	x2, x24
   1e154:	mov	x4, x26
   1e158:	mov	x6, x27
   1e15c:	bl	24718 <rpl_re_set_registers@@Base+0x5b70>
   1e160:	mov	x9, x27
   1e164:	str	x27, [sp, #88]
   1e168:	cbnz	w0, 1e758 <rpl_regexec@@Base+0x844>
   1e16c:	stp	x28, x28, [sp, #192]
   1e170:	ldrb	w8, [x23, #56]
   1e174:	str	x23, [sp, #72]
   1e178:	ldr	w23, [x29, #96]
   1e17c:	add	x0, sp, #0x60
   1e180:	lsr	w8, w8, #7
   1e184:	strb	w8, [sp, #237]
   1e188:	ldr	x8, [x9, #152]
   1e18c:	mov	w1, w23
   1e190:	lsl	x2, x8, #1
   1e194:	bl	247d4 <rpl_re_set_registers@@Base+0x5c2c>
   1e198:	cbnz	w0, 1e758 <rpl_regexec@@Base+0x844>
   1e19c:	ldp	x8, x27, [sp, #80]
   1e1a0:	cmp	x8, #0x1
   1e1a4:	b.hi	1e1b8 <rpl_regexec@@Base+0x2a4>  // b.pmore
   1e1a8:	ldrb	w8, [x27, #176]
   1e1ac:	tbnz	w8, #1, 1e1b8 <rpl_regexec@@Base+0x2a4>
   1e1b0:	str	xzr, [sp, #280]
   1e1b4:	b	1e1dc <rpl_regexec@@Base+0x2c8>
   1e1b8:	ldr	x8, [sp, #160]
   1e1bc:	mov	x9, #0x1ffffffffffffffe    	// #2305843009213693950
   1e1c0:	cmp	x8, x9
   1e1c4:	b.hi	1e760 <rpl_regexec@@Base+0x84c>  // b.pmore
   1e1c8:	lsl	x8, x8, #3
   1e1cc:	add	x0, x8, #0x8
   1e1d0:	bl	abc0 <malloc@plt>
   1e1d4:	str	x0, [sp, #280]
   1e1d8:	cbz	x0, 1e760 <rpl_regexec@@Base+0x84c>
   1e1dc:	tst	w23, #0x1
   1e1e0:	mov	w8, #0x4                   	// #4
   1e1e4:	mov	w9, #0x6                   	// #6
   1e1e8:	csel	w8, w9, w8, eq  // eq = none
   1e1ec:	stur	x22, [x29, #-16]
   1e1f0:	str	w8, [sp, #208]
   1e1f4:	ldr	w10, [x27, #180]
   1e1f8:	cmp	x20, x22
   1e1fc:	mov	w8, #0xffffffff            	// #-1
   1e200:	str	w23, [sp, #68]
   1e204:	cneg	w8, w8, ge  // ge = tcont
   1e208:	csel	x28, x20, x22, lt  // lt = tstop
   1e20c:	csel	x23, x22, x20, lt  // lt = tstop
   1e210:	str	x19, [sp, #48]
   1e214:	str	w10, [sp, #64]
   1e218:	cbz	x21, 1e230 <rpl_regexec@@Base+0x31c>
   1e21c:	ldr	x9, [sp, #72]
   1e220:	cmp	w10, #0x1
   1e224:	b.ne	1e238 <rpl_regexec@@Base+0x324>  // b.any
   1e228:	mov	w9, #0x4                   	// #4
   1e22c:	b	1e250 <rpl_regexec@@Base+0x33c>
   1e230:	mov	w9, #0x8                   	// #8
   1e234:	b	1e268 <rpl_regexec@@Base+0x354>
   1e238:	ldr	x9, [x9, #24]
   1e23c:	and	x9, x9, #0x400000
   1e240:	orr	x9, x26, x9
   1e244:	cmp	x9, #0x0
   1e248:	cset	w9, eq  // eq = none
   1e24c:	lsl	w9, w9, #2
   1e250:	cmp	x20, x22
   1e254:	cset	w10, ge  // ge = tcont
   1e258:	cmp	x26, #0x0
   1e25c:	cset	w11, ne  // ne = any
   1e260:	bfi	w11, w10, #1, #1
   1e264:	orr	w9, w11, w9
   1e268:	ldur	x10, [x29, #-16]
   1e26c:	mov	w27, #0x1                   	// #1
   1e270:	cmp	x10, x28
   1e274:	b.lt	1e764 <rpl_regexec@@Base+0x850>  // b.tstop
   1e278:	cmp	x23, x10
   1e27c:	b.lt	1e764 <rpl_regexec@@Base+0x850>  // b.tstop
   1e280:	sxtw	x10, w8
   1e284:	add	x8, sp, #0x60
   1e288:	cmp	x20, x22
   1e28c:	mov	x22, x10
   1e290:	sub	x10, x29, #0x10
   1e294:	add	x8, x8, #0xc0
   1e298:	sub	w20, w9, #0x4
   1e29c:	str	x8, [sp, #32]
   1e2a0:	csel	x8, xzr, x10, lt  // lt = tstop
   1e2a4:	str	x8, [sp, #24]
   1e2a8:	cmp	w20, #0x4
   1e2ac:	b.hi	1e318 <rpl_regexec@@Base+0x404>  // b.pmore
   1e2b0:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   1e2b4:	add	x10, x10, #0x728
   1e2b8:	adr	x8, 1e2c8 <rpl_regexec@@Base+0x3b4>
   1e2bc:	ldrb	w9, [x10, x20]
   1e2c0:	add	x8, x8, x9, lsl #2
   1e2c4:	br	x8
   1e2c8:	ldur	x8, [x29, #-16]
   1e2cc:	cmp	x8, x28
   1e2d0:	cset	w9, lt  // lt = tstop
   1e2d4:	b.lt	1e580 <rpl_regexec@@Base+0x66c>  // b.tstop
   1e2d8:	cmp	x8, x24
   1e2dc:	b.ge	1e2ec <rpl_regexec@@Base+0x3d8>  // b.tcont
   1e2e0:	ldrb	w10, [x25, x8]
   1e2e4:	cbnz	x26, 1e2f4 <rpl_regexec@@Base+0x3e0>
   1e2e8:	b	1e2f8 <rpl_regexec@@Base+0x3e4>
   1e2ec:	mov	w10, wzr
   1e2f0:	cbz	x26, 1e2f8 <rpl_regexec@@Base+0x3e4>
   1e2f4:	ldrb	w10, [x26, w10, uxtw]
   1e2f8:	ldrb	w10, [x21, w10, uxtw]
   1e2fc:	cbnz	w10, 1e454 <rpl_regexec@@Base+0x540>
   1e300:	cmp	x8, x28
   1e304:	sub	x8, x8, #0x1
   1e308:	cset	w9, le
   1e30c:	stur	x8, [x29, #-16]
   1e310:	b.gt	1e2d8 <rpl_regexec@@Base+0x3c4>
   1e314:	b	1e580 <rpl_regexec@@Base+0x66c>
   1e318:	mov	w27, #0x1                   	// #1
   1e31c:	mov	w11, #0x2                   	// #2
   1e320:	b	1e338 <rpl_regexec@@Base+0x424>
   1e324:	mov	x9, xzr
   1e328:	ldrb	w9, [x21, x9]
   1e32c:	cbz	w9, 1e36c <rpl_regexec@@Base+0x458>
   1e330:	mov	w8, #0xe                   	// #14
   1e334:	cbnz	w8, 1e440 <rpl_regexec@@Base+0x52c>
   1e338:	ldur	x1, [x29, #-16]
   1e33c:	ldr	x8, [sp, #136]
   1e340:	ldr	x10, [sp, #152]
   1e344:	sub	x9, x1, x8
   1e348:	cmp	x9, x10
   1e34c:	b.cs	1e398 <rpl_regexec@@Base+0x484>  // b.hs, b.nlast
   1e350:	ldur	x8, [x29, #-16]
   1e354:	cmp	x8, x24
   1e358:	b.ge	1e324 <rpl_regexec@@Base+0x410>  // b.tcont
   1e35c:	ldr	x10, [sp, #104]
   1e360:	ldrb	w9, [x10, x9]
   1e364:	ldrb	w9, [x21, x9]
   1e368:	cbnz	w9, 1e330 <rpl_regexec@@Base+0x41c>
   1e36c:	add	x8, x8, x22
   1e370:	cmp	x8, x28
   1e374:	cset	w9, lt  // lt = tstop
   1e378:	cmp	x8, x23
   1e37c:	stur	x8, [x29, #-16]
   1e380:	cset	w8, gt
   1e384:	orr	w8, w9, w8
   1e388:	cmp	w8, #0x0
   1e38c:	csinc	w27, w27, wzr, eq  // eq = none
   1e390:	csel	w8, w11, wzr, ne  // ne = any
   1e394:	b	1e334 <rpl_regexec@@Base+0x420>
   1e398:	ldr	w2, [sp, #68]
   1e39c:	add	x0, sp, #0x60
   1e3a0:	bl	2486c <rpl_re_set_registers@@Base+0x5cc4>
   1e3a4:	mov	w27, w0
   1e3a8:	cbnz	w0, 1e3c0 <rpl_regexec@@Base+0x4ac>
   1e3ac:	ldur	x8, [x29, #-16]
   1e3b0:	ldr	x9, [sp, #136]
   1e3b4:	mov	w11, #0x2                   	// #2
   1e3b8:	sub	x9, x8, x9
   1e3bc:	b	1e350 <rpl_regexec@@Base+0x43c>
   1e3c0:	mov	w8, #0x2                   	// #2
   1e3c4:	mov	w11, #0x2                   	// #2
   1e3c8:	b	1e334 <rpl_regexec@@Base+0x420>
   1e3cc:	ldur	x8, [x29, #-16]
   1e3d0:	cmp	x8, x23
   1e3d4:	b.ge	1e424 <rpl_regexec@@Base+0x510>  // b.tcont
   1e3d8:	ldrb	w9, [x25, x8]
   1e3dc:	ldrb	w9, [x21, x9]
   1e3e0:	cbnz	w9, 1e424 <rpl_regexec@@Base+0x510>
   1e3e4:	add	x8, x8, #0x1
   1e3e8:	cmp	x8, x23
   1e3ec:	stur	x8, [x29, #-16]
   1e3f0:	b.lt	1e3d8 <rpl_regexec@@Base+0x4c4>  // b.tstop
   1e3f4:	b	1e424 <rpl_regexec@@Base+0x510>
   1e3f8:	ldur	x8, [x29, #-16]
   1e3fc:	cmp	x8, x23
   1e400:	b.ge	1e424 <rpl_regexec@@Base+0x510>  // b.tcont
   1e404:	ldrb	w9, [x25, x8]
   1e408:	ldrb	w9, [x26, x9]
   1e40c:	ldrb	w9, [x21, x9]
   1e410:	cbnz	w9, 1e424 <rpl_regexec@@Base+0x510>
   1e414:	add	x8, x8, #0x1
   1e418:	cmp	x8, x23
   1e41c:	stur	x8, [x29, #-16]
   1e420:	b.lt	1e404 <rpl_regexec@@Base+0x4f0>  // b.tstop
   1e424:	ldur	x8, [x29, #-16]
   1e428:	cmp	x8, x23
   1e42c:	b.ne	1e458 <rpl_regexec@@Base+0x544>  // b.any
   1e430:	cmp	x8, x24
   1e434:	b.ge	1e56c <rpl_regexec@@Base+0x658>  // b.tcont
   1e438:	ldrb	w8, [x25, x8]
   1e43c:	b	1e570 <rpl_regexec@@Base+0x65c>
   1e440:	cmp	w8, #0x2
   1e444:	b.eq	1e764 <rpl_regexec@@Base+0x850>  // b.none
   1e448:	cmp	w8, #0xe
   1e44c:	b.eq	1e458 <rpl_regexec@@Base+0x544>  // b.none
   1e450:	b	1e614 <rpl_regexec@@Base+0x700>
   1e454:	tbnz	w9, #0, 1e580 <rpl_regexec@@Base+0x66c>
   1e458:	ldur	x1, [x29, #-16]
   1e45c:	ldr	w2, [sp, #68]
   1e460:	add	x0, sp, #0x60
   1e464:	bl	2486c <rpl_re_set_registers@@Base+0x5cc4>
   1e468:	mov	w27, w0
   1e46c:	cbnz	w0, 1e764 <rpl_regexec@@Base+0x850>
   1e470:	ldr	w8, [sp, #64]
   1e474:	cmp	w8, #0x1
   1e478:	b.eq	1e494 <rpl_regexec@@Base+0x580>  // b.none
   1e47c:	ldr	x8, [sp, #144]
   1e480:	cbz	x8, 1e494 <rpl_regexec@@Base+0x580>
   1e484:	ldr	x8, [sp, #112]
   1e488:	ldr	w8, [x8]
   1e48c:	cmn	w8, #0x1
   1e490:	b.eq	1e548 <rpl_regexec@@Base+0x634>  // b.none
   1e494:	ldp	x2, x8, [sp, #24]
   1e498:	ldr	w1, [sp, #60]
   1e49c:	add	x0, sp, #0x60
   1e4a0:	str	wzr, [sp, #320]
   1e4a4:	stp	xzr, xzr, [x8]
   1e4a8:	bl	24e38 <rpl_re_set_registers@@Base+0x6290>
   1e4ac:	cmn	x0, #0x1
   1e4b0:	b.eq	1e540 <rpl_regexec@@Base+0x62c>  // b.none
   1e4b4:	mov	x2, x0
   1e4b8:	cmn	x0, #0x2
   1e4bc:	b.eq	1e760 <rpl_regexec@@Base+0x84c>  // b.none
   1e4c0:	ldp	x8, x9, [sp, #72]
   1e4c4:	str	x2, [sp, #264]
   1e4c8:	str	x22, [sp, #8]
   1e4cc:	ldrb	w8, [x8, #56]
   1e4d0:	cmp	x9, #0x1
   1e4d4:	cset	w9, hi  // hi = pmore
   1e4d8:	tst	w8, #0x10
   1e4dc:	cset	w8, eq  // eq = none
   1e4e0:	and	w22, w9, w8
   1e4e4:	tbnz	w22, #0, 1e4f4 <rpl_regexec@@Base+0x5e0>
   1e4e8:	ldr	x8, [sp, #88]
   1e4ec:	ldr	x8, [x8, #152]
   1e4f0:	cbz	x8, 1e508 <rpl_regexec@@Base+0x5f4>
   1e4f4:	ldr	x8, [sp, #280]
   1e4f8:	add	x0, sp, #0x60
   1e4fc:	ldr	x1, [x8, x2, lsl #3]
   1e500:	bl	2518c <rpl_re_set_registers@@Base+0x65e4>
   1e504:	str	x0, [sp, #272]
   1e508:	cbz	w22, 1e518 <rpl_regexec@@Base+0x604>
   1e50c:	ldr	x8, [sp, #88]
   1e510:	ldrb	w8, [x8, #176]
   1e514:	tbnz	w8, #0, 1e524 <rpl_regexec@@Base+0x610>
   1e518:	ldr	x8, [sp, #88]
   1e51c:	ldr	x8, [x8, #152]
   1e520:	cbz	x8, 1e588 <rpl_regexec@@Base+0x674>
   1e524:	add	x0, sp, #0x60
   1e528:	bl	25218 <rpl_re_set_registers@@Base+0x6670>
   1e52c:	mov	w27, w0
   1e530:	cbz	w0, 1e588 <rpl_regexec@@Base+0x674>
   1e534:	ldr	x22, [sp, #8]
   1e538:	cmp	w27, #0x1
   1e53c:	b.ne	1e764 <rpl_regexec@@Base+0x850>  // b.any
   1e540:	add	x0, sp, #0x60
   1e544:	bl	25400 <rpl_re_set_registers@@Base+0x6858>
   1e548:	ldur	x8, [x29, #-16]
   1e54c:	mov	w27, #0x1                   	// #1
   1e550:	add	x8, x8, x22
   1e554:	cmp	x8, x28
   1e558:	stur	x8, [x29, #-16]
   1e55c:	b.lt	1e764 <rpl_regexec@@Base+0x850>  // b.tstop
   1e560:	cmp	x23, x8
   1e564:	b.ge	1e2a8 <rpl_regexec@@Base+0x394>  // b.tcont
   1e568:	b	1e764 <rpl_regexec@@Base+0x850>
   1e56c:	mov	w8, wzr
   1e570:	cbz	x26, 1e578 <rpl_regexec@@Base+0x664>
   1e574:	ldrb	w8, [x26, w8, uxtw]
   1e578:	ldrb	w8, [x21, w8, uxtw]
   1e57c:	cbnz	w8, 1e458 <rpl_regexec@@Base+0x544>
   1e580:	mov	w27, #0x1                   	// #1
   1e584:	b	1e764 <rpl_regexec@@Base+0x850>
   1e588:	ldr	x21, [sp, #80]
   1e58c:	cbz	x21, 1e764 <rpl_regexec@@Base+0x850>
   1e590:	ldr	x20, [sp, #48]
   1e594:	cmp	x21, #0x1
   1e598:	b.eq	1e5bc <rpl_regexec@@Base+0x6a8>  // b.none
   1e59c:	ldr	x8, [sp, #40]
   1e5a0:	ldr	x9, [sp, #16]
   1e5a4:	add	x0, x20, #0x10
   1e5a8:	mov	w1, #0xff                  	// #255
   1e5ac:	mvn	x8, x8
   1e5b0:	add	x8, x8, x9
   1e5b4:	lsl	x2, x8, #4
   1e5b8:	bl	ad40 <memset@plt>
   1e5bc:	ldr	x8, [sp, #264]
   1e5c0:	cmp	x21, #0x2
   1e5c4:	stp	xzr, x8, [x20]
   1e5c8:	ldr	x8, [sp, #72]
   1e5cc:	b.cc	1e644 <rpl_regexec@@Base+0x730>  // b.lo, b.ul, b.last
   1e5d0:	ldrb	w8, [x8, #56]
   1e5d4:	tbnz	w8, #4, 1e644 <rpl_regexec@@Base+0x730>
   1e5d8:	ldr	x9, [sp, #88]
   1e5dc:	ldrb	w8, [x9, #176]
   1e5e0:	tbnz	w8, #0, 1e620 <rpl_regexec@@Base+0x70c>
   1e5e4:	mov	w4, wzr
   1e5e8:	b	1e62c <rpl_regexec@@Base+0x718>
   1e5ec:	ldr	x8, [x8, #16]
   1e5f0:	cbz	x8, 1e5fc <rpl_regexec@@Base+0x6e8>
   1e5f4:	ldrsb	w8, [x23, #56]
   1e5f8:	tbnz	w8, #31, 1e104 <rpl_regexec@@Base+0x1f0>
   1e5fc:	mov	x20, xzr
   1e600:	cbz	x22, 1e618 <rpl_regexec@@Base+0x704>
   1e604:	mov	x22, x20
   1e608:	cbz	x4, 1e108 <rpl_regexec@@Base+0x1f4>
   1e60c:	mov	w27, #0x1                   	// #1
   1e610:	b	1e788 <rpl_regexec@@Base+0x874>
   1e614:	b	1e788 <rpl_regexec@@Base+0x874>
   1e618:	mov	x22, x20
   1e61c:	b	1e108 <rpl_regexec@@Base+0x1f4>
   1e620:	ldr	x8, [x9, #152]
   1e624:	cmp	x8, #0x0
   1e628:	cset	w4, gt
   1e62c:	ldr	x3, [sp, #48]
   1e630:	ldp	x0, x2, [sp, #72]
   1e634:	add	x1, sp, #0x60
   1e638:	bl	254c4 <rpl_re_set_registers@@Base+0x691c>
   1e63c:	mov	w27, w0
   1e640:	cbnz	w0, 1e764 <rpl_regexec@@Base+0x850>
   1e644:	ldr	x20, [sp, #48]
   1e648:	ldrb	w9, [sp, #236]
   1e64c:	ldr	x10, [sp, #144]
   1e650:	ldr	x11, [sp, #120]
   1e654:	ldur	x12, [x29, #-16]
   1e658:	ldr	x21, [sp, #80]
   1e65c:	add	x13, sp, #0x60
   1e660:	mov	x8, xzr
   1e664:	add	x13, x13, #0x38
   1e668:	add	x14, x20, #0x8
   1e66c:	b	1e690 <rpl_regexec@@Base+0x77c>
   1e670:	ldp	x15, x16, [x14, #-8]
   1e674:	add	x15, x15, x12
   1e678:	add	x16, x16, x12
   1e67c:	stp	x15, x16, [x14, #-8]
   1e680:	add	x8, x8, #0x1
   1e684:	cmp	x8, x21
   1e688:	add	x14, x14, #0x10
   1e68c:	b.cs	1e6d0 <rpl_regexec@@Base+0x7bc>  // b.hs, b.nlast
   1e690:	ldur	x15, [x14, #-8]
   1e694:	cmn	x15, #0x1
   1e698:	b.eq	1e680 <rpl_regexec@@Base+0x76c>  // b.none
   1e69c:	cbz	w9, 1e670 <rpl_regexec@@Base+0x75c>
   1e6a0:	add	x16, x11, x15, lsl #3
   1e6a4:	cmp	x15, x10
   1e6a8:	ldr	x15, [x14]
   1e6ac:	csel	x16, x13, x16, eq  // eq = none
   1e6b0:	ldr	x16, [x16]
   1e6b4:	add	x17, x11, x15, lsl #3
   1e6b8:	cmp	x15, x10
   1e6bc:	stur	x16, [x14, #-8]
   1e6c0:	csel	x15, x13, x17, eq  // eq = none
   1e6c4:	ldr	x15, [x15]
   1e6c8:	str	x15, [x14]
   1e6cc:	b	1e670 <rpl_regexec@@Base+0x75c>
   1e6d0:	ldr	x10, [sp, #40]
   1e6d4:	cmp	x10, #0x1
   1e6d8:	b.lt	1e6f0 <rpl_regexec@@Base+0x7dc>  // b.tstop
   1e6dc:	add	x0, x20, x21, lsl #4
   1e6e0:	lsl	x2, x10, #4
   1e6e4:	mov	w1, #0xff                  	// #255
   1e6e8:	bl	ad40 <memset@plt>
   1e6ec:	ldr	x10, [sp, #40]
   1e6f0:	ldr	x8, [sp, #88]
   1e6f4:	ldr	x8, [x8, #224]
   1e6f8:	cbz	x8, 1e764 <rpl_regexec@@Base+0x850>
   1e6fc:	cmp	x21, #0x2
   1e700:	b.cc	1e764 <rpl_regexec@@Base+0x850>  // b.lo, b.ul, b.last
   1e704:	ldr	x11, [sp, #16]
   1e708:	mvn	x10, x10
   1e70c:	mov	x9, xzr
   1e710:	add	x10, x10, x11
   1e714:	add	x11, x20, #0x18
   1e718:	b	1e72c <rpl_regexec@@Base+0x818>
   1e71c:	add	x9, x9, #0x1
   1e720:	cmp	x10, x9
   1e724:	add	x11, x11, #0x10
   1e728:	b.eq	1e764 <rpl_regexec@@Base+0x850>  // b.none
   1e72c:	ldr	x12, [x8, x9, lsl #3]
   1e730:	cmp	x9, x12
   1e734:	b.eq	1e71c <rpl_regexec@@Base+0x808>  // b.none
   1e738:	add	x12, x20, x12, lsl #4
   1e73c:	ldr	x12, [x12, #16]
   1e740:	stur	x12, [x11, #-8]
   1e744:	ldr	x12, [x8, x9, lsl #3]
   1e748:	add	x12, x20, x12, lsl #4
   1e74c:	ldr	x12, [x12, #24]
   1e750:	str	x12, [x11]
   1e754:	b	1e71c <rpl_regexec@@Base+0x808>
   1e758:	mov	w27, w0
   1e75c:	b	1e764 <rpl_regexec@@Base+0x850>
   1e760:	mov	w27, #0xc                   	// #12
   1e764:	ldr	x0, [sp, #280]
   1e768:	bl	b1d0 <free@plt>
   1e76c:	ldr	x8, [sp, #88]
   1e770:	ldr	x8, [x8, #152]
   1e774:	cbz	x8, 1e780 <rpl_regexec@@Base+0x86c>
   1e778:	add	x0, sp, #0x60
   1e77c:	bl	25774 <rpl_re_set_registers@@Base+0x6bcc>
   1e780:	add	x0, sp, #0x60
   1e784:	bl	1f04c <rpl_re_set_registers@@Base+0x4a4>
   1e788:	mov	w0, w27
   1e78c:	ldp	x20, x19, [sp, #448]
   1e790:	ldp	x22, x21, [sp, #432]
   1e794:	ldp	x24, x23, [sp, #416]
   1e798:	ldp	x26, x25, [sp, #400]
   1e79c:	ldp	x28, x27, [sp, #384]
   1e7a0:	ldp	x29, x30, [sp, #368]
   1e7a4:	add	sp, sp, #0x1d0
   1e7a8:	ret

000000000001e7ac <rpl_re_match@@Base>:
   1e7ac:	stp	x29, x30, [sp, #-16]!
   1e7b0:	mov	x6, x4
   1e7b4:	mov	w7, #0x1                   	// #1
   1e7b8:	mov	x4, xzr
   1e7bc:	mov	x5, x2
   1e7c0:	mov	x29, sp
   1e7c4:	bl	1e7d0 <rpl_re_match@@Base+0x24>
   1e7c8:	ldp	x29, x30, [sp], #16
   1e7cc:	ret
   1e7d0:	sub	sp, sp, #0x80
   1e7d4:	cmp	x3, x2
   1e7d8:	cset	w8, gt
   1e7dc:	orr	x8, x8, x3, lsr #63
   1e7e0:	stp	x29, x30, [sp, #32]
   1e7e4:	stp	x28, x27, [sp, #48]
   1e7e8:	stp	x26, x25, [sp, #64]
   1e7ec:	stp	x24, x23, [sp, #80]
   1e7f0:	stp	x22, x21, [sp, #96]
   1e7f4:	stp	x20, x19, [sp, #112]
   1e7f8:	add	x29, sp, #0x20
   1e7fc:	cbnz	x8, 1e9c8 <rpl_re_match@@Base+0x21c>
   1e800:	ldr	x8, [x0]
   1e804:	stur	w7, [x29, #-12]
   1e808:	adrp	x10, 3f000 <vasnprintf@@Base+0x14ec4>
   1e80c:	mov	x26, x6
   1e810:	stur	x8, [x29, #-8]
   1e814:	add	x8, x4, x3
   1e818:	bic	x9, x8, x8, asr #63
   1e81c:	cmp	x8, x2
   1e820:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1e824:	ldr	x10, [x10, #3944]
   1e828:	ldr	x8, [x8, #4040]
   1e82c:	mov	x22, x5
   1e830:	mov	x19, x3
   1e834:	mov	x23, x2
   1e838:	mov	x24, x1
   1e83c:	mov	x21, x0
   1e840:	orr	x8, x8, x10
   1e844:	csel	x25, x2, x9, gt
   1e848:	cbz	x8, 1e858 <rpl_re_match@@Base+0xac>
   1e84c:	ldur	x8, [x29, #-8]
   1e850:	add	x0, x8, #0xe8
   1e854:	bl	b750 <pthread_mutex_lock@plt>
   1e858:	ldrb	w20, [x21, #56]
   1e85c:	cmp	x25, x19
   1e860:	b.le	1e878 <rpl_re_match@@Base+0xcc>
   1e864:	tbnz	w20, #3, 1e878 <rpl_re_match@@Base+0xcc>
   1e868:	ldr	x8, [x21, #32]
   1e86c:	cbz	x8, 1e878 <rpl_re_match@@Base+0xcc>
   1e870:	mov	x0, x21
   1e874:	bl	b7e0 <rpl_re_compile_fastmap@plt>
   1e878:	ldrb	w8, [x21, #56]
   1e87c:	tst	w8, #0x10
   1e880:	csel	x27, x26, xzr, eq  // eq = none
   1e884:	cbz	x27, 1e8b0 <rpl_re_match@@Base+0x104>
   1e888:	and	w8, w8, #0x6
   1e88c:	cmp	w8, #0x4
   1e890:	b.ne	1e8a4 <rpl_re_match@@Base+0xf8>  // b.any
   1e894:	ldr	x8, [x27]
   1e898:	ldr	x9, [x21, #48]
   1e89c:	cmp	x8, x9
   1e8a0:	b.ls	1e9d8 <rpl_re_match@@Base+0x22c>  // b.plast
   1e8a4:	ldr	x8, [x21, #48]
   1e8a8:	add	x28, x8, #0x1
   1e8ac:	b	1e8b4 <rpl_re_match@@Base+0x108>
   1e8b0:	mov	w28, #0x1                   	// #1
   1e8b4:	lsl	x0, x28, #4
   1e8b8:	bl	abc0 <malloc@plt>
   1e8bc:	cbz	x0, 1e9d0 <rpl_re_match@@Base+0x224>
   1e8c0:	mov	x26, x0
   1e8c4:	ubfx	w8, w20, #5, #2
   1e8c8:	mov	x0, x21
   1e8cc:	mov	x1, x24
   1e8d0:	mov	x2, x23
   1e8d4:	mov	x3, x19
   1e8d8:	mov	x4, x25
   1e8dc:	mov	x5, x22
   1e8e0:	mov	x6, x28
   1e8e4:	mov	x7, x26
   1e8e8:	str	w8, [sp]
   1e8ec:	bl	1e02c <rpl_regexec@@Base+0x118>
   1e8f0:	cbz	w0, 1e90c <rpl_re_match@@Base+0x160>
   1e8f4:	cmp	w0, #0x1
   1e8f8:	mov	x8, #0xfffffffffffffffe    	// #-2
   1e8fc:	cinc	x21, x8, eq  // eq = none
   1e900:	ldur	w8, [x29, #-12]
   1e904:	cbz	x21, 1e960 <rpl_re_match@@Base+0x1b4>
   1e908:	b	1e978 <rpl_re_match@@Base+0x1cc>
   1e90c:	cbz	x27, 1e954 <rpl_re_match@@Base+0x1a8>
   1e910:	ldrb	w8, [x21, #56]
   1e914:	mov	x0, x27
   1e918:	mov	x1, x26
   1e91c:	mov	x2, x28
   1e920:	ubfx	w3, w8, #1, #2
   1e924:	bl	24590 <rpl_re_set_registers@@Base+0x59e8>
   1e928:	ldrb	w8, [x21, #56]
   1e92c:	ubfiz	w9, w0, #1, #2
   1e930:	tst	w0, #0x3
   1e934:	mov	x10, #0xfffffffffffffffe    	// #-2
   1e938:	and	w8, w8, #0xfffffff9
   1e93c:	orr	w8, w9, w8
   1e940:	strb	w8, [x21, #56]
   1e944:	csel	x21, x10, xzr, eq  // eq = none
   1e948:	ldur	w8, [x29, #-12]
   1e94c:	cbz	x21, 1e960 <rpl_re_match@@Base+0x1b4>
   1e950:	b	1e978 <rpl_re_match@@Base+0x1cc>
   1e954:	mov	x21, xzr
   1e958:	ldur	w8, [x29, #-12]
   1e95c:	cbnz	x21, 1e978 <rpl_re_match@@Base+0x1cc>
   1e960:	ldr	x21, [x26]
   1e964:	tbz	w8, #0, 1e978 <rpl_re_match@@Base+0x1cc>
   1e968:	cmp	x21, x19
   1e96c:	b.ne	1e9e8 <rpl_re_match@@Base+0x23c>  // b.any
   1e970:	ldr	x8, [x26, #8]
   1e974:	sub	x21, x8, x19
   1e978:	mov	x0, x26
   1e97c:	bl	b1d0 <free@plt>
   1e980:	adrp	x8, 3f000 <vasnprintf@@Base+0x14ec4>
   1e984:	adrp	x9, 3f000 <vasnprintf@@Base+0x14ec4>
   1e988:	ldr	x8, [x8, #3944]
   1e98c:	ldr	x9, [x9, #4040]
   1e990:	orr	x8, x9, x8
   1e994:	cbz	x8, 1e9a4 <rpl_re_match@@Base+0x1f8>
   1e998:	ldur	x8, [x29, #-8]
   1e99c:	add	x0, x8, #0xe8
   1e9a0:	bl	b780 <pthread_mutex_unlock@plt>
   1e9a4:	mov	x0, x21
   1e9a8:	ldp	x20, x19, [sp, #112]
   1e9ac:	ldp	x22, x21, [sp, #96]
   1e9b0:	ldp	x24, x23, [sp, #80]
   1e9b4:	ldp	x26, x25, [sp, #64]
   1e9b8:	ldp	x28, x27, [sp, #48]
   1e9bc:	ldp	x29, x30, [sp, #32]
   1e9c0:	add	sp, sp, #0x80
   1e9c4:	ret
   1e9c8:	mov	x21, #0xffffffffffffffff    	// #-1
   1e9cc:	b	1e9a4 <rpl_re_match@@Base+0x1f8>
   1e9d0:	mov	x21, #0xfffffffffffffffe    	// #-2
   1e9d4:	b	1e980 <rpl_re_match@@Base+0x1d4>
   1e9d8:	cmp	x8, #0x1
   1e9dc:	csel	x27, xzr, x27, lt  // lt = tstop
   1e9e0:	csinc	x28, x8, xzr, ge  // ge = tcont
   1e9e4:	b	1e8b4 <rpl_re_match@@Base+0x108>
   1e9e8:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   1e9ec:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   1e9f0:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   1e9f4:	add	x0, x0, #0xbc4
   1e9f8:	add	x1, x1, #0xbdd
   1e9fc:	add	x3, x3, #0xbe9
   1ea00:	mov	w2, #0x1be                 	// #446
   1ea04:	bl	b6e0 <__assert_fail@plt>

000000000001ea08 <rpl_re_search@@Base>:
   1ea08:	stp	x29, x30, [sp, #-16]!
   1ea0c:	mov	x6, x5
   1ea10:	mov	x5, x2
   1ea14:	mov	w7, wzr
   1ea18:	mov	x29, sp
   1ea1c:	bl	1e7d0 <rpl_re_match@@Base+0x24>
   1ea20:	ldp	x29, x30, [sp], #16
   1ea24:	ret

000000000001ea28 <rpl_re_match_2@@Base>:
   1ea28:	sub	sp, sp, #0x20
   1ea2c:	mov	x8, x6
   1ea30:	mov	w9, #0x1                   	// #1
   1ea34:	str	x7, [sp]
   1ea38:	mov	x6, xzr
   1ea3c:	mov	x7, x8
   1ea40:	stp	x29, x30, [sp, #16]
   1ea44:	add	x29, sp, #0x10
   1ea48:	strb	w9, [sp, #8]
   1ea4c:	bl	1ea5c <rpl_re_match_2@@Base+0x34>
   1ea50:	ldp	x29, x30, [sp, #16]
   1ea54:	add	sp, sp, #0x20
   1ea58:	ret
   1ea5c:	sub	sp, sp, #0x70
   1ea60:	stp	x29, x30, [sp, #16]
   1ea64:	add	x29, sp, #0x10
   1ea68:	stp	x22, x21, [sp, #80]
   1ea6c:	ldr	x22, [x29, #96]
   1ea70:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
   1ea74:	sub	x9, x9, x4
   1ea78:	orr	x8, x4, x2
   1ea7c:	cmp	x9, x2
   1ea80:	orr	x8, x8, x22
   1ea84:	cset	w9, lt  // lt = tstop
   1ea88:	orr	x8, x9, x8, lsr #63
   1ea8c:	stp	x28, x27, [sp, #32]
   1ea90:	stp	x26, x25, [sp, #48]
   1ea94:	stp	x24, x23, [sp, #64]
   1ea98:	stp	x20, x19, [sp, #96]
   1ea9c:	cbnz	x8, 1eb78 <rpl_re_match_2@@Base+0x150>
   1eaa0:	mov	x10, x7
   1eaa4:	mov	x20, x6
   1eaa8:	mov	x21, x5
   1eaac:	mov	x28, x4
   1eab0:	mov	x19, x2
   1eab4:	mov	x24, x1
   1eab8:	mov	x23, x0
   1eabc:	cmp	x4, #0x1
   1eac0:	add	x25, x4, x2
   1eac4:	b.lt	1eb10 <rpl_re_match_2@@Base+0xe8>  // b.tstop
   1eac8:	mov	x27, x3
   1eacc:	cmp	x19, #0x1
   1ead0:	b.lt	1eb18 <rpl_re_match_2@@Base+0xf0>  // b.tstop
   1ead4:	mov	x0, x25
   1ead8:	str	x10, [sp, #8]
   1eadc:	bl	abc0 <malloc@plt>
   1eae0:	cbz	x0, 1eb78 <rpl_re_match_2@@Base+0x150>
   1eae4:	mov	x1, x24
   1eae8:	mov	x2, x19
   1eaec:	mov	x26, x0
   1eaf0:	bl	a800 <memcpy@plt>
   1eaf4:	add	x0, x26, x19
   1eaf8:	mov	x1, x27
   1eafc:	mov	x2, x28
   1eb00:	bl	a800 <memcpy@plt>
   1eb04:	ldr	x10, [sp, #8]
   1eb08:	mov	x24, x26
   1eb0c:	b	1eb20 <rpl_re_match_2@@Base+0xf8>
   1eb10:	mov	x26, xzr
   1eb14:	b	1eb20 <rpl_re_match_2@@Base+0xf8>
   1eb18:	mov	x26, xzr
   1eb1c:	mov	x24, x27
   1eb20:	ldrb	w8, [x29, #104]
   1eb24:	mov	x0, x23
   1eb28:	mov	x1, x24
   1eb2c:	mov	x2, x25
   1eb30:	and	w7, w8, #0x1
   1eb34:	mov	x3, x21
   1eb38:	mov	x4, x20
   1eb3c:	mov	x5, x22
   1eb40:	mov	x6, x10
   1eb44:	bl	1e7d0 <rpl_re_match@@Base+0x24>
   1eb48:	mov	x19, x0
   1eb4c:	mov	x0, x26
   1eb50:	bl	b1d0 <free@plt>
   1eb54:	mov	x0, x19
   1eb58:	ldp	x20, x19, [sp, #96]
   1eb5c:	ldp	x22, x21, [sp, #80]
   1eb60:	ldp	x24, x23, [sp, #64]
   1eb64:	ldp	x26, x25, [sp, #48]
   1eb68:	ldp	x28, x27, [sp, #32]
   1eb6c:	ldp	x29, x30, [sp, #16]
   1eb70:	add	sp, sp, #0x70
   1eb74:	ret
   1eb78:	mov	x19, #0xfffffffffffffffe    	// #-2
   1eb7c:	b	1eb54 <rpl_re_match_2@@Base+0x12c>

000000000001eb80 <rpl_re_search_2@@Base>:
   1eb80:	sub	sp, sp, #0x20
   1eb84:	stp	x29, x30, [sp, #16]
   1eb88:	add	x29, sp, #0x10
   1eb8c:	ldr	x8, [x29, #16]
   1eb90:	strb	wzr, [sp, #8]
   1eb94:	str	x8, [sp]
   1eb98:	bl	1ea5c <rpl_re_match_2@@Base+0x34>
   1eb9c:	ldp	x29, x30, [sp, #16]
   1eba0:	add	sp, sp, #0x20
   1eba4:	ret

000000000001eba8 <rpl_re_set_registers@@Base>:
   1eba8:	ldrb	w8, [x0, #56]
   1ebac:	and	w8, w8, #0xfffffff9
   1ebb0:	cbz	x2, 1ebc8 <rpl_re_set_registers@@Base+0x20>
   1ebb4:	orr	w8, w8, #0x2
   1ebb8:	strb	w8, [x0, #56]
   1ebbc:	stp	x2, x3, [x1]
   1ebc0:	str	x4, [x1, #16]
   1ebc4:	ret
   1ebc8:	strb	w8, [x0, #56]
   1ebcc:	stp	xzr, xzr, [x1]
   1ebd0:	str	xzr, [x1, #16]
   1ebd4:	ret
   1ebd8:	stp	x29, x30, [sp, #-16]!
   1ebdc:	ldr	w8, [x0, #8]
   1ebe0:	mov	w9, #0xff                  	// #255
   1ebe4:	movk	w9, #0x4, lsl #16
   1ebe8:	mov	x29, sp
   1ebec:	and	w8, w8, w9
   1ebf0:	cmp	w8, #0x6
   1ebf4:	b.ne	1ec08 <rpl_re_set_registers@@Base+0x60>  // b.any
   1ebf8:	ldr	x0, [x0]
   1ebfc:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   1ec00:	ldp	x29, x30, [sp], #16
   1ec04:	ret
   1ec08:	cmp	w8, #0x3
   1ec0c:	b.ne	1ec18 <rpl_re_set_registers@@Base+0x70>  // b.any
   1ec10:	ldr	x0, [x0]
   1ec14:	bl	b1d0 <free@plt>
   1ec18:	ldp	x29, x30, [sp], #16
   1ec1c:	ret
   1ec20:	stp	x29, x30, [sp, #-32]!
   1ec24:	str	x19, [sp, #16]
   1ec28:	mov	x19, x0
   1ec2c:	ldr	x0, [x0, #48]
   1ec30:	mov	x29, sp
   1ec34:	bl	b1d0 <free@plt>
   1ec38:	ldr	x0, [x19, #72]
   1ec3c:	bl	b1d0 <free@plt>
   1ec40:	ldr	x8, [x19, #80]
   1ec44:	add	x9, x19, #0x8
   1ec48:	cmp	x8, x9
   1ec4c:	b.eq	1ec60 <rpl_re_set_registers@@Base+0xb8>  // b.none
   1ec50:	ldr	x0, [x8, #16]
   1ec54:	bl	b1d0 <free@plt>
   1ec58:	ldr	x0, [x19, #80]
   1ec5c:	bl	b1d0 <free@plt>
   1ec60:	ldr	x0, [x19, #24]
   1ec64:	bl	b1d0 <free@plt>
   1ec68:	ldr	x0, [x19, #96]
   1ec6c:	bl	b1d0 <free@plt>
   1ec70:	ldr	x0, [x19, #88]
   1ec74:	bl	b1d0 <free@plt>
   1ec78:	mov	x0, x19
   1ec7c:	bl	b1d0 <free@plt>
   1ec80:	ldr	x19, [sp, #16]
   1ec84:	ldp	x29, x30, [sp], #32
   1ec88:	ret
   1ec8c:	stp	x29, x30, [sp, #-32]!
   1ec90:	str	x19, [sp, #16]
   1ec94:	mov	x19, x0
   1ec98:	ldr	x0, [x0]
   1ec9c:	mov	x29, sp
   1eca0:	bl	b1d0 <free@plt>
   1eca4:	ldr	x0, [x19, #8]
   1eca8:	bl	b1d0 <free@plt>
   1ecac:	ldr	x0, [x19, #16]
   1ecb0:	bl	b1d0 <free@plt>
   1ecb4:	ldr	x0, [x19, #24]
   1ecb8:	bl	b1d0 <free@plt>
   1ecbc:	mov	x0, x19
   1ecc0:	bl	b1d0 <free@plt>
   1ecc4:	ldr	x19, [sp, #16]
   1ecc8:	ldp	x29, x30, [sp], #32
   1eccc:	ret
   1ecd0:	stp	x29, x30, [sp, #-64]!
   1ecd4:	mov	x8, #0x5555555555555555    	// #6148914691236517205
   1ecd8:	movk	x8, #0x5554
   1ecdc:	movk	x8, #0x555, lsl #48
   1ece0:	movi	v0.2d, #0x0
   1ece4:	cmp	x1, x8
   1ece8:	mov	w8, #0xf                   	// #15
   1ecec:	stp	x24, x23, [sp, #16]
   1ecf0:	stp	x22, x21, [sp, #32]
   1ecf4:	stp	x20, x19, [sp, #48]
   1ecf8:	mov	x29, sp
   1ecfc:	str	xzr, [x0, #272]
   1ed00:	stp	q0, q0, [x0, #240]
   1ed04:	stp	q0, q0, [x0, #208]
   1ed08:	stp	q0, q0, [x0, #176]
   1ed0c:	stp	q0, q0, [x0, #144]
   1ed10:	stp	q0, q0, [x0, #112]
   1ed14:	stp	q0, q0, [x0, #80]
   1ed18:	stp	q0, q0, [x0, #48]
   1ed1c:	stp	q0, q0, [x0, #16]
   1ed20:	str	q0, [x0]
   1ed24:	str	w8, [x0, #128]
   1ed28:	b.hi	1eec8 <rpl_re_set_registers@@Base+0x320>  // b.pmore
   1ed2c:	add	x8, x1, #0x1
   1ed30:	mov	x19, x0
   1ed34:	str	x8, [x0, #8]
   1ed38:	lsl	x0, x8, #4
   1ed3c:	mov	x20, x1
   1ed40:	bl	abc0 <malloc@plt>
   1ed44:	mov	w8, #0x1                   	// #1
   1ed48:	str	x0, [x19]
   1ed4c:	mov	x21, x8
   1ed50:	cmp	x8, x20
   1ed54:	lsl	x8, x8, #1
   1ed58:	b.ls	1ed4c <rpl_re_set_registers@@Base+0x1a4>  // b.plast
   1ed5c:	mov	w0, #0x18                  	// #24
   1ed60:	mov	x1, x21
   1ed64:	bl	ae10 <calloc@plt>
   1ed68:	sub	x8, x21, #0x1
   1ed6c:	str	x0, [x19, #64]
   1ed70:	str	x8, [x19, #136]
   1ed74:	bl	b200 <__ctype_get_mb_cur_max@plt>
   1ed78:	str	w0, [x19, #180]
   1ed7c:	mov	w0, #0xe                   	// #14
   1ed80:	bl	ab90 <nl_langinfo@plt>
   1ed84:	ldrb	w8, [x0]
   1ed88:	orr	w8, w8, #0x20
   1ed8c:	cmp	w8, #0x75
   1ed90:	b.ne	1eddc <rpl_re_set_registers@@Base+0x234>  // b.any
   1ed94:	ldrb	w8, [x0, #1]
   1ed98:	orr	w8, w8, #0x20
   1ed9c:	cmp	w8, #0x74
   1eda0:	b.ne	1eddc <rpl_re_set_registers@@Base+0x234>  // b.any
   1eda4:	ldrb	w8, [x0, #2]
   1eda8:	orr	w8, w8, #0x20
   1edac:	cmp	w8, #0x66
   1edb0:	b.ne	1eddc <rpl_re_set_registers@@Base+0x234>  // b.any
   1edb4:	ldrb	w8, [x0, #3]!
   1edb8:	adrp	x1, 2b000 <vasnprintf@@Base+0xec4>
   1edbc:	add	x1, x1, #0x1c6
   1edc0:	cmp	w8, #0x2d
   1edc4:	cinc	x0, x0, eq  // eq = none
   1edc8:	bl	b120 <strcmp@plt>
   1edcc:	cbnz	w0, 1eddc <rpl_re_set_registers@@Base+0x234>
   1edd0:	ldrb	w8, [x19, #176]
   1edd4:	orr	w8, w8, #0x4
   1edd8:	strb	w8, [x19, #176]
   1eddc:	ldrb	w8, [x19, #176]
   1ede0:	ldr	w9, [x19, #180]
   1ede4:	and	w10, w8, #0xfffffff7
   1ede8:	cmp	w9, #0x2
   1edec:	strb	w10, [x19, #176]
   1edf0:	b.lt	1ee9c <rpl_re_set_registers@@Base+0x2f4>  // b.tstop
   1edf4:	tbnz	w8, #2, 1ee90 <rpl_re_set_registers@@Base+0x2e8>
   1edf8:	mov	w0, #0x20                  	// #32
   1edfc:	mov	w1, #0x1                   	// #1
   1ee00:	bl	ae10 <calloc@plt>
   1ee04:	str	x0, [x19, #120]
   1ee08:	cbz	x0, 1eec8 <rpl_re_set_registers@@Base+0x320>
   1ee0c:	mov	x21, xzr
   1ee10:	mov	w8, wzr
   1ee14:	mov	w22, #0x1                   	// #1
   1ee18:	b	1ee2c <rpl_re_set_registers@@Base+0x284>
   1ee1c:	add	x21, x21, #0x1
   1ee20:	cmp	x21, #0x4
   1ee24:	add	w8, w24, w23
   1ee28:	b.eq	1ee9c <rpl_re_set_registers@@Base+0x2f4>  // b.none
   1ee2c:	mov	x23, xzr
   1ee30:	mov	w24, w8
   1ee34:	b	1ee44 <rpl_re_set_registers@@Base+0x29c>
   1ee38:	add	x23, x23, #0x1
   1ee3c:	cmp	x23, #0x40
   1ee40:	b.eq	1ee1c <rpl_re_set_registers@@Base+0x274>  // b.none
   1ee44:	add	x20, x24, x23
   1ee48:	mov	w0, w20
   1ee4c:	bl	aff0 <btowc@plt>
   1ee50:	cmn	w0, #0x1
   1ee54:	b.eq	1ee70 <rpl_re_set_registers@@Base+0x2c8>  // b.none
   1ee58:	ldr	x8, [x19, #120]
   1ee5c:	lsl	x9, x21, #3
   1ee60:	lsl	x11, x22, x23
   1ee64:	ldr	x10, [x8, x9]
   1ee68:	orr	x10, x10, x11
   1ee6c:	str	x10, [x8, x9]
   1ee70:	cmp	w20, #0x7f
   1ee74:	b.hi	1ee38 <rpl_re_set_registers@@Base+0x290>  // b.pmore
   1ee78:	cmp	w20, w0
   1ee7c:	b.eq	1ee38 <rpl_re_set_registers@@Base+0x290>  // b.none
   1ee80:	ldrb	w8, [x19, #176]
   1ee84:	orr	w8, w8, #0x8
   1ee88:	strb	w8, [x19, #176]
   1ee8c:	b	1ee38 <rpl_re_set_registers@@Base+0x290>
   1ee90:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   1ee94:	add	x8, x8, #0xa58
   1ee98:	str	x8, [x19, #120]
   1ee9c:	ldr	x8, [x19]
   1eea0:	mov	w0, #0xc                   	// #12
   1eea4:	cbz	x8, 1eeb4 <rpl_re_set_registers@@Base+0x30c>
   1eea8:	ldr	x8, [x19, #64]
   1eeac:	cmp	x8, #0x0
   1eeb0:	csel	w0, w0, wzr, eq  // eq = none
   1eeb4:	ldp	x20, x19, [sp, #48]
   1eeb8:	ldp	x22, x21, [sp, #32]
   1eebc:	ldp	x24, x23, [sp, #16]
   1eec0:	ldp	x29, x30, [sp], #64
   1eec4:	ret
   1eec8:	mov	w0, #0xc                   	// #12
   1eecc:	b	1eeb4 <rpl_re_set_registers@@Base+0x30c>
   1eed0:	stp	x29, x30, [sp, #-64]!
   1eed4:	stp	x20, x19, [sp, #48]
   1eed8:	mov	x19, x0
   1eedc:	movi	v0.2d, #0x0
   1eee0:	stp	x24, x23, [sp, #16]
   1eee4:	stp	x22, x21, [sp, #32]
   1eee8:	mov	w23, w4
   1eeec:	mov	x21, x2
   1eef0:	mov	x24, x1
   1eef4:	str	xzr, [x0, #144]
   1eef8:	stp	q0, q0, [x0, #112]
   1eefc:	stp	q0, q0, [x0, #80]
   1ef00:	stp	q0, q0, [x0, #48]
   1ef04:	stp	q0, q0, [x0, #16]
   1ef08:	str	q0, [x0]
   1ef0c:	and	w4, w4, #0x1
   1ef10:	mov	x0, x1
   1ef14:	mov	x1, x2
   1ef18:	mov	x2, x19
   1ef1c:	mov	x29, sp
   1ef20:	mov	x20, x5
   1ef24:	mov	x22, x3
   1ef28:	bl	1f6e4 <rpl_re_set_registers@@Base+0xb3c>
   1ef2c:	cmp	x21, #0x1
   1ef30:	b.lt	1ef44 <rpl_re_set_registers@@Base+0x39c>  // b.tstop
   1ef34:	add	x1, x21, #0x1
   1ef38:	mov	x0, x19
   1ef3c:	bl	1f734 <rpl_re_set_registers@@Base+0xb8c>
   1ef40:	cbnz	w0, 1efec <rpl_re_set_registers@@Base+0x444>
   1ef44:	ldrb	w8, [x19, #139]
   1ef48:	cbz	w8, 1ef50 <rpl_re_set_registers@@Base+0x3a8>
   1ef4c:	ldr	x24, [x19, #8]
   1ef50:	str	x24, [x19, #8]
   1ef54:	ldr	w8, [x20, #180]
   1ef58:	cmp	w8, #0x2
   1ef5c:	tbz	w23, #0, 1efa8 <rpl_re_set_registers@@Base+0x400>
   1ef60:	b.lt	1efbc <rpl_re_set_registers@@Base+0x414>  // b.tstop
   1ef64:	mov	x0, x19
   1ef68:	bl	1f7e8 <rpl_re_set_registers@@Base+0xc40>
   1ef6c:	cbnz	w0, 1efec <rpl_re_set_registers@@Base+0x444>
   1ef70:	ldr	x8, [x19, #56]
   1ef74:	cmp	x8, x21
   1ef78:	b.ge	1efd8 <rpl_re_set_registers@@Base+0x430>  // b.tcont
   1ef7c:	ldr	x9, [x19, #48]
   1ef80:	ldrsw	x10, [x20, #180]
   1ef84:	ldr	x8, [x19, #64]
   1ef88:	add	x9, x9, x10
   1ef8c:	cmp	x8, x9
   1ef90:	b.gt	1efd8 <rpl_re_set_registers@@Base+0x430>
   1ef94:	lsl	x1, x8, #1
   1ef98:	mov	x0, x19
   1ef9c:	bl	1f734 <rpl_re_set_registers@@Base+0xb8c>
   1efa0:	cbz	w0, 1ef64 <rpl_re_set_registers@@Base+0x3bc>
   1efa4:	b	1efec <rpl_re_set_registers@@Base+0x444>
   1efa8:	b.lt	1efcc <rpl_re_set_registers@@Base+0x424>  // b.tstop
   1efac:	mov	x0, x19
   1efb0:	bl	1fe60 <rpl_re_set_registers@@Base+0x12b8>
   1efb4:	mov	w0, wzr
   1efb8:	b	1efec <rpl_re_set_registers@@Base+0x444>
   1efbc:	mov	x0, x19
   1efc0:	bl	1fde0 <rpl_re_set_registers@@Base+0x1238>
   1efc4:	mov	w0, wzr
   1efc8:	b	1efec <rpl_re_set_registers@@Base+0x444>
   1efcc:	cbz	x22, 1efe0 <rpl_re_set_registers@@Base+0x438>
   1efd0:	mov	x0, x19
   1efd4:	bl	20004 <rpl_re_set_registers@@Base+0x145c>
   1efd8:	mov	w0, wzr
   1efdc:	b	1efec <rpl_re_set_registers@@Base+0x444>
   1efe0:	ldr	x8, [x19, #64]
   1efe4:	mov	w0, wzr
   1efe8:	stp	x8, x8, [x19, #48]
   1efec:	ldp	x20, x19, [sp, #48]
   1eff0:	ldp	x22, x21, [sp, #32]
   1eff4:	ldp	x24, x23, [sp, #16]
   1eff8:	ldp	x29, x30, [sp], #64
   1effc:	ret
   1f000:	stp	x29, x30, [sp, #-32]!
   1f004:	stp	x20, x19, [sp, #16]
   1f008:	ldr	x19, [x0]
   1f00c:	mov	x29, sp
   1f010:	ldr	x0, [x19, #112]
   1f014:	cbz	x0, 1f028 <rpl_re_set_registers@@Base+0x480>
   1f018:	ldr	x20, [x0]
   1f01c:	bl	b1d0 <free@plt>
   1f020:	mov	x0, x20
   1f024:	cbnz	x20, 1f018 <rpl_re_set_registers@@Base+0x470>
   1f028:	ldr	x0, [x19, #32]
   1f02c:	mov	w8, #0xf                   	// #15
   1f030:	str	w8, [x19, #128]
   1f034:	stp	xzr, xzr, [x19, #104]
   1f038:	bl	b1d0 <free@plt>
   1f03c:	str	xzr, [x19, #32]
   1f040:	ldp	x20, x19, [sp, #16]
   1f044:	ldp	x29, x30, [sp], #32
   1f048:	ret
   1f04c:	stp	x29, x30, [sp, #-32]!
   1f050:	str	x19, [sp, #16]
   1f054:	mov	x19, x0
   1f058:	ldr	x0, [x0, #16]
   1f05c:	mov	x29, sp
   1f060:	bl	b1d0 <free@plt>
   1f064:	ldr	x0, [x19, #24]
   1f068:	bl	b1d0 <free@plt>
   1f06c:	ldrb	w8, [x19, #139]
   1f070:	cbz	w8, 1f07c <rpl_re_set_registers@@Base+0x4d4>
   1f074:	ldr	x0, [x19, #8]
   1f078:	bl	b1d0 <free@plt>
   1f07c:	ldr	x19, [sp, #16]
   1f080:	ldp	x29, x30, [sp], #32
   1f084:	ret
   1f088:	sub	sp, sp, #0x50
   1f08c:	stp	x29, x30, [sp, #16]
   1f090:	stp	x22, x21, [sp, #48]
   1f094:	stp	x20, x19, [sp, #64]
   1f098:	ldr	x20, [x1]
   1f09c:	str	x23, [sp, #32]
   1f0a0:	mov	x23, x0
   1f0a4:	mov	x21, x2
   1f0a8:	mov	x22, x1
   1f0ac:	str	x2, [x20, #216]
   1f0b0:	orr	x2, x2, #0x800000
   1f0b4:	mov	x0, sp
   1f0b8:	mov	x1, x23
   1f0bc:	add	x29, sp, #0x10
   1f0c0:	mov	x19, x3
   1f0c4:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   1f0c8:	mov	x2, sp
   1f0cc:	mov	x0, x23
   1f0d0:	mov	x1, x22
   1f0d4:	mov	x3, x21
   1f0d8:	mov	x4, xzr
   1f0dc:	mov	x5, x19
   1f0e0:	bl	2007c <rpl_re_set_registers@@Base+0x14d4>
   1f0e4:	mov	x21, x0
   1f0e8:	cbnz	x0, 1f0f4 <rpl_re_set_registers@@Base+0x54c>
   1f0ec:	ldr	w8, [x19]
   1f0f0:	cbnz	w8, 1f144 <rpl_re_set_registers@@Base+0x59c>
   1f0f4:	mov	w3, #0x2                   	// #2
   1f0f8:	mov	x0, x20
   1f0fc:	mov	x1, xzr
   1f100:	mov	x2, xzr
   1f104:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   1f108:	mov	x22, x0
   1f10c:	cbz	x21, 1f124 <rpl_re_set_registers@@Base+0x57c>
   1f110:	mov	w3, #0x10                  	// #16
   1f114:	mov	x0, x20
   1f118:	mov	x1, x21
   1f11c:	mov	x2, x22
   1f120:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   1f124:	cbz	x22, 1f14c <rpl_re_set_registers@@Base+0x5a4>
   1f128:	cbz	x0, 1f14c <rpl_re_set_registers@@Base+0x5a4>
   1f12c:	ldp	x20, x19, [sp, #64]
   1f130:	ldp	x22, x21, [sp, #48]
   1f134:	ldr	x23, [sp, #32]
   1f138:	ldp	x29, x30, [sp, #16]
   1f13c:	add	sp, sp, #0x50
   1f140:	ret
   1f144:	mov	x0, xzr
   1f148:	b	1f12c <rpl_re_set_registers@@Base+0x584>
   1f14c:	mov	x0, xzr
   1f150:	mov	w8, #0xc                   	// #12
   1f154:	str	w8, [x19]
   1f158:	b	1f12c <rpl_re_set_registers@@Base+0x584>
   1f15c:	stp	x29, x30, [sp, #-32]!
   1f160:	stp	x20, x19, [sp, #16]
   1f164:	ldr	x19, [x0]
   1f168:	mov	x20, x0
   1f16c:	mov	x29, sp
   1f170:	ldr	x8, [x19, #8]
   1f174:	lsl	x0, x8, #3
   1f178:	bl	abc0 <malloc@plt>
   1f17c:	ldr	x8, [x19, #8]
   1f180:	str	x0, [x19, #24]
   1f184:	lsl	x0, x8, #3
   1f188:	bl	abc0 <malloc@plt>
   1f18c:	ldr	x8, [x19, #8]
   1f190:	str	x0, [x19, #32]
   1f194:	add	x8, x8, x8, lsl #1
   1f198:	lsl	x0, x8, #3
   1f19c:	bl	abc0 <malloc@plt>
   1f1a0:	ldr	x8, [x19, #8]
   1f1a4:	str	x0, [x19, #40]
   1f1a8:	add	x8, x8, x8, lsl #1
   1f1ac:	lsl	x0, x8, #3
   1f1b0:	bl	abc0 <malloc@plt>
   1f1b4:	ldr	x9, [x19, #24]
   1f1b8:	str	x0, [x19, #48]
   1f1bc:	cbz	x9, 1f330 <rpl_re_set_registers@@Base+0x788>
   1f1c0:	ldr	x9, [x19, #32]
   1f1c4:	cbz	x9, 1f330 <rpl_re_set_registers@@Base+0x788>
   1f1c8:	mov	x8, x0
   1f1cc:	mov	w0, #0xc                   	// #12
   1f1d0:	cbz	x8, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f1d4:	ldr	x8, [x19, #40]
   1f1d8:	cbz	x8, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f1dc:	ldr	x8, [x20, #48]
   1f1e0:	lsl	x0, x8, #3
   1f1e4:	bl	abc0 <malloc@plt>
   1f1e8:	str	x0, [x19, #224]
   1f1ec:	cbz	x0, 1f254 <rpl_re_set_registers@@Base+0x6ac>
   1f1f0:	ldr	x8, [x20, #48]
   1f1f4:	cbz	x8, 1f214 <rpl_re_set_registers@@Base+0x66c>
   1f1f8:	ldr	x8, [x19, #224]
   1f1fc:	mov	x9, xzr
   1f200:	str	x9, [x8, x9, lsl #3]
   1f204:	ldr	x10, [x20, #48]
   1f208:	add	x9, x9, #0x1
   1f20c:	cmp	x9, x10
   1f210:	b.cc	1f200 <rpl_re_set_registers@@Base+0x658>  // b.lo, b.ul, b.last
   1f214:	ldr	x0, [x19, #104]
   1f218:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   1f21c:	add	x1, x1, #0xda0
   1f220:	mov	x2, x19
   1f224:	bl	22cec <rpl_re_set_registers@@Base+0x4144>
   1f228:	ldr	x8, [x20, #48]
   1f22c:	cbz	x8, 1f23c <rpl_re_set_registers@@Base+0x694>
   1f230:	ldr	x10, [x19, #224]
   1f234:	ldr	x9, [x10]
   1f238:	cbz	x9, 1f308 <rpl_re_set_registers@@Base+0x760>
   1f23c:	mov	x9, xzr
   1f240:	cmp	x9, x8
   1f244:	b.ne	1f254 <rpl_re_set_registers@@Base+0x6ac>  // b.any
   1f248:	ldr	x0, [x19, #224]
   1f24c:	bl	b1d0 <free@plt>
   1f250:	str	xzr, [x19, #224]
   1f254:	ldr	x0, [x19, #104]
   1f258:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   1f25c:	add	x1, x1, #0xe48
   1f260:	mov	x2, x20
   1f264:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   1f268:	cbnz	w0, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f26c:	ldr	x0, [x19, #104]
   1f270:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   1f274:	add	x1, x1, #0xed0
   1f278:	mov	x2, x19
   1f27c:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   1f280:	cbnz	w0, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f284:	ldr	x0, [x19, #104]
   1f288:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   1f28c:	add	x1, x1, #0xf6c
   1f290:	mov	x2, x19
   1f294:	bl	22cec <rpl_re_set_registers@@Base+0x4144>
   1f298:	ldr	x0, [x19, #104]
   1f29c:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   1f2a0:	add	x1, x1, #0xfc8
   1f2a4:	mov	x2, x19
   1f2a8:	bl	22cec <rpl_re_set_registers@@Base+0x4144>
   1f2ac:	cbnz	w0, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f2b0:	mov	x0, x19
   1f2b4:	bl	23164 <rpl_re_set_registers@@Base+0x45bc>
   1f2b8:	cbnz	w0, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f2bc:	ldrb	w8, [x20, #56]
   1f2c0:	tbnz	w8, #4, 1f2d4 <rpl_re_set_registers@@Base+0x72c>
   1f2c4:	ldr	x8, [x20, #48]
   1f2c8:	cbz	x8, 1f2d4 <rpl_re_set_registers@@Base+0x72c>
   1f2cc:	ldrb	w8, [x19, #176]
   1f2d0:	tbnz	w8, #0, 1f2dc <rpl_re_set_registers@@Base+0x734>
   1f2d4:	ldr	x8, [x19, #152]
   1f2d8:	cbz	x8, 1f2fc <rpl_re_set_registers@@Base+0x754>
   1f2dc:	ldr	x8, [x19, #16]
   1f2e0:	add	x8, x8, x8, lsl #1
   1f2e4:	lsl	x0, x8, #3
   1f2e8:	bl	abc0 <malloc@plt>
   1f2ec:	str	x0, [x19, #56]
   1f2f0:	cbz	x0, 1f330 <rpl_re_set_registers@@Base+0x788>
   1f2f4:	mov	x0, x19
   1f2f8:	bl	23278 <rpl_re_set_registers@@Base+0x46d0>
   1f2fc:	ldp	x20, x19, [sp, #16]
   1f300:	ldp	x29, x30, [sp], #32
   1f304:	ret
   1f308:	mov	w11, #0x1                   	// #1
   1f30c:	ldr	x8, [x20, #48]
   1f310:	mov	x9, x11
   1f314:	cmp	x11, x8
   1f318:	b.cs	1f240 <rpl_re_set_registers@@Base+0x698>  // b.hs, b.nlast
   1f31c:	ldr	x11, [x10, x9, lsl #3]
   1f320:	cmp	x9, x11
   1f324:	add	x11, x9, #0x1
   1f328:	b.eq	1f30c <rpl_re_set_registers@@Base+0x764>  // b.none
   1f32c:	b	1f240 <rpl_re_set_registers@@Base+0x698>
   1f330:	mov	w0, #0xc                   	// #12
   1f334:	b	1f2fc <rpl_re_set_registers@@Base+0x754>
   1f338:	stp	x29, x30, [sp, #-16]!
   1f33c:	ldr	x8, [x0, #16]
   1f340:	mov	x29, sp
   1f344:	cbz	x8, 1f36c <rpl_re_set_registers@@Base+0x7c4>
   1f348:	ldr	x11, [x0]
   1f34c:	adrp	x12, 2d000 <vasnprintf@@Base+0x2ec4>
   1f350:	mov	w8, wzr
   1f354:	mov	w9, wzr
   1f358:	mov	x10, xzr
   1f35c:	add	x12, x12, #0x72d
   1f360:	mov	w13, #0x1                   	// #1
   1f364:	mov	w14, #0x8b                  	// #139
   1f368:	b	1f444 <rpl_re_set_registers@@Base+0x89c>
   1f36c:	mov	w9, wzr
   1f370:	tbnz	w9, #0, 1f378 <rpl_re_set_registers@@Base+0x7d0>
   1f374:	tbz	w8, #0, 1f3e8 <rpl_re_set_registers@@Base+0x840>
   1f378:	ldr	x9, [x0, #16]
   1f37c:	cbz	x9, 1f3e8 <rpl_re_set_registers@@Base+0x840>
   1f380:	mov	x9, xzr
   1f384:	mov	x10, xzr
   1f388:	b	1f3ac <rpl_re_set_registers@@Base+0x804>
   1f38c:	and	w12, w12, #0xffffff00
   1f390:	orr	w12, w12, #0x7
   1f394:	str	w12, [x11, #8]
   1f398:	ldr	x11, [x0, #16]
   1f39c:	add	x10, x10, #0x1
   1f3a0:	add	x9, x9, #0x10
   1f3a4:	cmp	x10, x11
   1f3a8:	b.cs	1f3e8 <rpl_re_set_registers@@Base+0x840>  // b.hs, b.nlast
   1f3ac:	ldr	x13, [x0]
   1f3b0:	add	x11, x13, x9
   1f3b4:	ldr	w12, [x11, #8]
   1f3b8:	and	w14, w12, #0xff
   1f3bc:	cmp	w14, #0x5
   1f3c0:	b.eq	1f38c <rpl_re_set_registers@@Base+0x7e4>  // b.none
   1f3c4:	cmp	w14, #0x1
   1f3c8:	b.ne	1f398 <rpl_re_set_registers@@Base+0x7f0>  // b.any
   1f3cc:	ldrsb	w13, [x13, x9]
   1f3d0:	tbnz	w13, #31, 1f3e0 <rpl_re_set_registers@@Base+0x838>
   1f3d4:	cmp	w14, #0x5
   1f3d8:	b.eq	1f38c <rpl_re_set_registers@@Base+0x7e4>  // b.none
   1f3dc:	b	1f398 <rpl_re_set_registers@@Base+0x7f0>
   1f3e0:	and	w12, w12, #0xffdfffff
   1f3e4:	b	1f394 <rpl_re_set_registers@@Base+0x7ec>
   1f3e8:	ldr	x10, [x0, #152]
   1f3ec:	mov	w9, #0x1                   	// #1
   1f3f0:	ldrb	w11, [x0, #176]
   1f3f4:	str	w9, [x0, #180]
   1f3f8:	cmp	x10, #0x0
   1f3fc:	cset	w9, gt
   1f400:	orr	w8, w8, w9
   1f404:	mov	w12, #0x2                   	// #2
   1f408:	tst	w8, #0x1
   1f40c:	csel	w8, w12, wzr, ne  // ne = any
   1f410:	and	w9, w11, #0xfffffff9
   1f414:	orr	w8, w8, w9
   1f418:	strb	w8, [x0, #176]
   1f41c:	ldp	x29, x30, [sp], #16
   1f420:	ret
   1f424:	ldrsb	w15, [x15]
   1f428:	cmp	w15, #0x0
   1f42c:	cset	w15, lt  // lt = tstop
   1f430:	orr	w9, w9, w15
   1f434:	ldr	x15, [x0, #16]
   1f438:	add	x10, x10, #0x1
   1f43c:	cmp	x10, x15
   1f440:	b.cs	1f370 <rpl_re_set_registers@@Base+0x7c8>  // b.hs, b.nlast
   1f444:	add	x15, x11, x10, lsl #4
   1f448:	ldrb	w16, [x15, #8]
   1f44c:	sub	w16, w16, #0x1
   1f450:	cmp	w16, #0xb
   1f454:	b.hi	1f4bc <rpl_re_set_registers@@Base+0x914>  // b.pmore
   1f458:	adr	x17, 1f41c <rpl_re_set_registers@@Base+0x874>
   1f45c:	ldrb	w18, [x12, x16]
   1f460:	add	x17, x17, x18, lsl #2
   1f464:	br	x17
   1f468:	lsl	x16, x10, #4
   1f46c:	ldr	x16, [x11, x16]
   1f470:	mov	x15, xzr
   1f474:	add	x16, x16, #0x10
   1f478:	ldr	x17, [x16, x15]
   1f47c:	cbnz	x17, 1f41c <rpl_re_set_registers@@Base+0x874>
   1f480:	add	x15, x15, #0x8
   1f484:	cmp	x15, #0x10
   1f488:	b.ne	1f478 <rpl_re_set_registers@@Base+0x8d0>  // b.any
   1f48c:	b	1f434 <rpl_re_set_registers@@Base+0x88c>
   1f490:	ldr	w15, [x15]
   1f494:	sub	w15, w15, #0x10
   1f498:	ror	w15, w15, #4
   1f49c:	cmp	w15, #0x7
   1f4a0:	b.hi	1f41c <rpl_re_set_registers@@Base+0x874>  // b.pmore
   1f4a4:	lsl	w15, w13, w15
   1f4a8:	tst	w15, w14
   1f4ac:	b.ne	1f434 <rpl_re_set_registers@@Base+0x88c>  // b.any
   1f4b0:	b	1f41c <rpl_re_set_registers@@Base+0x874>
   1f4b4:	mov	w8, #0x1                   	// #1
   1f4b8:	b	1f434 <rpl_re_set_registers@@Base+0x88c>
   1f4bc:	bl	b020 <abort@plt>
   1f4c0:	sub	sp, sp, #0x60
   1f4c4:	stp	x29, x30, [sp, #32]
   1f4c8:	stp	x22, x21, [sp, #64]
   1f4cc:	stp	x20, x19, [sp, #80]
   1f4d0:	ldr	x8, [x0, #104]
   1f4d4:	ldr	x9, [x0, #48]
   1f4d8:	mov	w10, #0x18                  	// #24
   1f4dc:	mov	x19, x0
   1f4e0:	ldr	x8, [x8, #24]
   1f4e4:	str	x23, [sp, #48]
   1f4e8:	add	x29, sp, #0x20
   1f4ec:	ldr	x8, [x8, #56]
   1f4f0:	str	x8, [x0, #144]
   1f4f4:	madd	x1, x8, x10, x9
   1f4f8:	add	x0, sp, #0x8
   1f4fc:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   1f500:	str	w0, [x29, #28]
   1f504:	cbnz	w0, 1f6dc <rpl_re_set_registers@@Base+0xb34>
   1f508:	ldr	x8, [x19, #152]
   1f50c:	cmp	x8, #0x1
   1f510:	b.lt	1f620 <rpl_re_set_registers@@Base+0xa78>  // b.tstop
   1f514:	ldr	x8, [sp, #16]
   1f518:	cmp	x8, #0x1
   1f51c:	b.lt	1f620 <rpl_re_set_registers@@Base+0xa78>  // b.tstop
   1f520:	mov	x22, xzr
   1f524:	mov	w23, #0x18                  	// #24
   1f528:	ldr	x10, [sp, #24]
   1f52c:	ldr	x11, [x19]
   1f530:	ldr	x9, [x10, x22, lsl #3]
   1f534:	add	x12, x11, x9, lsl #4
   1f538:	ldrb	w12, [x12, #8]
   1f53c:	cmp	w12, #0x4
   1f540:	b.ne	1f594 <rpl_re_set_registers@@Base+0x9ec>  // b.any
   1f544:	cmp	x8, #0x1
   1f548:	b.lt	1f5d0 <rpl_re_set_registers@@Base+0xa28>  // b.tstop
   1f54c:	mov	x12, xzr
   1f550:	add	x13, x11, x9, lsl #4
   1f554:	b	1f564 <rpl_re_set_registers@@Base+0x9bc>
   1f558:	add	x12, x12, #0x1
   1f55c:	cmp	x8, x12
   1f560:	b.eq	1f59c <rpl_re_set_registers@@Base+0x9f4>  // b.none
   1f564:	ldr	x14, [x10, x12, lsl #3]
   1f568:	add	x15, x11, x14, lsl #4
   1f56c:	ldrb	w15, [x15, #8]
   1f570:	cmp	w15, #0x9
   1f574:	b.ne	1f558 <rpl_re_set_registers@@Base+0x9b0>  // b.any
   1f578:	lsl	x14, x14, #4
   1f57c:	ldr	x14, [x11, x14]
   1f580:	ldr	x15, [x13]
   1f584:	cmp	x14, x15
   1f588:	b.ne	1f558 <rpl_re_set_registers@@Base+0x9b0>  // b.any
   1f58c:	cmp	x12, x8
   1f590:	b.ne	1f5a8 <rpl_re_set_registers@@Base+0xa00>  // b.any
   1f594:	mov	w8, #0x4                   	// #4
   1f598:	b	1f604 <rpl_re_set_registers@@Base+0xa5c>
   1f59c:	mov	x12, x8
   1f5a0:	cmp	x12, x8
   1f5a4:	b.eq	1f594 <rpl_re_set_registers@@Base+0x9ec>  // b.none
   1f5a8:	ldr	x8, [x19, #40]
   1f5ac:	add	x0, sp, #0x8
   1f5b0:	madd	x8, x9, x23, x8
   1f5b4:	ldr	x8, [x8, #16]
   1f5b8:	ldr	x21, [x8]
   1f5bc:	mov	x1, x21
   1f5c0:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   1f5c4:	cbz	x0, 1f5e0 <rpl_re_set_registers@@Base+0xa38>
   1f5c8:	mov	w8, wzr
   1f5cc:	b	1f604 <rpl_re_set_registers@@Base+0xa5c>
   1f5d0:	mov	x12, xzr
   1f5d4:	cmp	x12, x8
   1f5d8:	b.eq	1f594 <rpl_re_set_registers@@Base+0x9ec>  // b.none
   1f5dc:	b	1f5a8 <rpl_re_set_registers@@Base+0xa00>
   1f5e0:	ldr	x8, [x19, #48]
   1f5e4:	add	x0, sp, #0x8
   1f5e8:	madd	x1, x21, x23, x8
   1f5ec:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   1f5f0:	cmp	w0, #0x0
   1f5f4:	cset	w8, ne  // ne = any
   1f5f8:	csel	x22, xzr, x22, eq  // eq = none
   1f5fc:	csel	w20, w20, w0, eq  // eq = none
   1f600:	cbz	w0, 1f5c8 <rpl_re_set_registers@@Base+0xa20>
   1f604:	orr	w8, w8, #0x4
   1f608:	cmp	w8, #0x4
   1f60c:	b.ne	1f6b8 <rpl_re_set_registers@@Base+0xb10>  // b.any
   1f610:	ldr	x8, [sp, #16]
   1f614:	add	x22, x22, #0x1
   1f618:	cmp	x22, x8
   1f61c:	b.lt	1f528 <rpl_re_set_registers@@Base+0x980>  // b.tstop
   1f620:	add	x0, x29, #0x1c
   1f624:	add	x2, sp, #0x8
   1f628:	mov	x1, x19
   1f62c:	mov	w3, wzr
   1f630:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   1f634:	str	x0, [x19, #72]
   1f638:	cbz	x0, 1f6d4 <rpl_re_set_registers@@Base+0xb2c>
   1f63c:	ldrsb	w8, [x0, #104]
   1f640:	tbnz	w8, #31, 1f650 <rpl_re_set_registers@@Base+0xaa8>
   1f644:	stp	x0, x0, [x19, #88]
   1f648:	str	x0, [x19, #80]
   1f64c:	b	1f6ac <rpl_re_set_registers@@Base+0xb04>
   1f650:	add	x0, x29, #0x1c
   1f654:	add	x2, sp, #0x8
   1f658:	mov	w3, #0x1                   	// #1
   1f65c:	mov	x1, x19
   1f660:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   1f664:	str	x0, [x19, #80]
   1f668:	add	x0, x29, #0x1c
   1f66c:	add	x2, sp, #0x8
   1f670:	mov	w3, #0x2                   	// #2
   1f674:	mov	x1, x19
   1f678:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   1f67c:	str	x0, [x19, #88]
   1f680:	add	x0, x29, #0x1c
   1f684:	add	x2, sp, #0x8
   1f688:	mov	w3, #0x6                   	// #6
   1f68c:	mov	x1, x19
   1f690:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   1f694:	ldr	x8, [x19, #80]
   1f698:	str	x0, [x19, #96]
   1f69c:	cbz	x8, 1f6d4 <rpl_re_set_registers@@Base+0xb2c>
   1f6a0:	cbz	x0, 1f6d4 <rpl_re_set_registers@@Base+0xb2c>
   1f6a4:	ldr	x8, [x19, #88]
   1f6a8:	cbz	x8, 1f6d4 <rpl_re_set_registers@@Base+0xb2c>
   1f6ac:	ldr	x0, [sp, #24]
   1f6b0:	bl	b1d0 <free@plt>
   1f6b4:	mov	w20, wzr
   1f6b8:	mov	w0, w20
   1f6bc:	ldp	x20, x19, [sp, #80]
   1f6c0:	ldp	x22, x21, [sp, #64]
   1f6c4:	ldr	x23, [sp, #48]
   1f6c8:	ldp	x29, x30, [sp, #32]
   1f6cc:	add	sp, sp, #0x60
   1f6d0:	ret
   1f6d4:	ldr	w20, [x29, #28]
   1f6d8:	b	1f6b8 <rpl_re_set_registers@@Base+0xb10>
   1f6dc:	mov	w20, w0
   1f6e0:	b	1f6b8 <rpl_re_set_registers@@Base+0xb10>
   1f6e4:	and	w8, w4, #0x1
   1f6e8:	cmp	x3, #0x0
   1f6ec:	strb	w8, [x2, #136]
   1f6f0:	cset	w8, ne  // ne = any
   1f6f4:	orr	w8, w8, w4
   1f6f8:	and	w8, w8, #0x1
   1f6fc:	str	x0, [x2]
   1f700:	stp	x1, x1, [x2, #80]
   1f704:	str	x3, [x2, #120]
   1f708:	strb	w8, [x2, #139]
   1f70c:	ldr	w8, [x5, #180]
   1f710:	str	w8, [x2, #144]
   1f714:	ldrb	w8, [x5, #176]
   1f718:	ubfx	w8, w8, #2, #1
   1f71c:	strb	w8, [x2, #137]
   1f720:	ldrb	w8, [x5, #176]
   1f724:	stp	x1, x1, [x2, #96]
   1f728:	ubfx	w8, w8, #3, #1
   1f72c:	strb	w8, [x2, #138]
   1f730:	ret
   1f734:	stp	x29, x30, [sp, #-32]!
   1f738:	stp	x20, x19, [sp, #16]
   1f73c:	ldr	w8, [x0, #144]
   1f740:	mov	x19, x0
   1f744:	mov	x20, x1
   1f748:	mov	x29, sp
   1f74c:	cmp	w8, #0x2
   1f750:	b.lt	1f7a4 <rpl_re_set_registers@@Base+0xbfc>  // b.tstop
   1f754:	lsr	x8, x20, #61
   1f758:	cbnz	x8, 1f7d4 <rpl_re_set_registers@@Base+0xc2c>
   1f75c:	ldr	x0, [x19, #16]
   1f760:	lsl	x1, x20, #2
   1f764:	bl	aea0 <realloc@plt>
   1f768:	cbz	x0, 1f7d4 <rpl_re_set_registers@@Base+0xc2c>
   1f76c:	mov	x8, x0
   1f770:	ldr	x0, [x19, #24]
   1f774:	str	x8, [x19, #16]
   1f778:	cbz	x0, 1f794 <rpl_re_set_registers@@Base+0xbec>
   1f77c:	lsl	x1, x20, #3
   1f780:	bl	aea0 <realloc@plt>
   1f784:	cbz	x0, 1f7dc <rpl_re_set_registers@@Base+0xc34>
   1f788:	mov	w8, wzr
   1f78c:	str	x0, [x19, #24]
   1f790:	cbnz	w8, 1f798 <rpl_re_set_registers@@Base+0xbf0>
   1f794:	mov	w8, wzr
   1f798:	cbz	w8, 1f7a4 <rpl_re_set_registers@@Base+0xbfc>
   1f79c:	mov	w0, #0xc                   	// #12
   1f7a0:	b	1f7c8 <rpl_re_set_registers@@Base+0xc20>
   1f7a4:	ldrb	w8, [x19, #139]
   1f7a8:	cbz	w8, 1f7c0 <rpl_re_set_registers@@Base+0xc18>
   1f7ac:	ldr	x0, [x19, #8]
   1f7b0:	mov	x1, x20
   1f7b4:	bl	aea0 <realloc@plt>
   1f7b8:	cbz	x0, 1f79c <rpl_re_set_registers@@Base+0xbf4>
   1f7bc:	str	x0, [x19, #8]
   1f7c0:	mov	w0, wzr
   1f7c4:	str	x20, [x19, #64]
   1f7c8:	ldp	x20, x19, [sp, #16]
   1f7cc:	ldp	x29, x30, [sp], #32
   1f7d0:	ret
   1f7d4:	mov	w8, #0x1                   	// #1
   1f7d8:	b	1f798 <rpl_re_set_registers@@Base+0xbf0>
   1f7dc:	mov	w8, #0x1                   	// #1
   1f7e0:	cbnz	w8, 1f798 <rpl_re_set_registers@@Base+0xbf0>
   1f7e4:	b	1f794 <rpl_re_set_registers@@Base+0xbec>
   1f7e8:	sub	sp, sp, #0xb0
   1f7ec:	stp	x29, x30, [sp, #80]
   1f7f0:	stp	x28, x27, [sp, #96]
   1f7f4:	stp	x26, x25, [sp, #112]
   1f7f8:	stp	x24, x23, [sp, #128]
   1f7fc:	stp	x22, x21, [sp, #144]
   1f800:	stp	x20, x19, [sp, #160]
   1f804:	ldr	x8, [x0, #64]
   1f808:	ldr	x9, [x0, #88]
   1f80c:	ldrb	w10, [x0, #138]
   1f810:	ldr	x27, [x0, #48]
   1f814:	mov	x19, x0
   1f818:	cmp	x8, x9
   1f81c:	csel	x26, x9, x8, gt
   1f820:	add	x29, sp, #0x50
   1f824:	cbnz	w10, 1f838 <rpl_re_set_registers@@Base+0xc90>
   1f828:	ldr	x8, [x19, #120]
   1f82c:	cbnz	x8, 1f838 <rpl_re_set_registers@@Base+0xc90>
   1f830:	ldrb	w8, [x19, #140]
   1f834:	cbz	w8, 1f840 <rpl_re_set_registers@@Base+0xc98>
   1f838:	ldr	x25, [x19, #56]
   1f83c:	b	1fa4c <rpl_re_set_registers@@Base+0xea4>
   1f840:	cmp	x26, x27
   1f844:	b.le	1fa3c <rpl_re_set_registers@@Base+0xe94>
   1f848:	adrp	x23, 2d000 <vasnprintf@@Base+0x2ec4>
   1f84c:	add	x20, x19, #0x20
   1f850:	add	x23, x23, #0x739
   1f854:	mov	x28, x26
   1f858:	ldr	x21, [x19, #40]
   1f85c:	ldr	x22, [x19]
   1f860:	add	x8, x21, x27
   1f864:	ldrsb	w24, [x22, x8]
   1f868:	tbnz	w24, #31, 1f8a8 <rpl_re_set_registers@@Base+0xd00>
   1f86c:	mov	x0, x20
   1f870:	bl	b070 <mbsinit@plt>
   1f874:	cbz	w0, 1f8a8 <rpl_re_set_registers@@Base+0xd00>
   1f878:	and	x21, x24, #0xff
   1f87c:	bl	aeb0 <__ctype_toupper_loc@plt>
   1f880:	ldr	x8, [x0]
   1f884:	ldr	x9, [x19, #8]
   1f888:	ldr	w8, [x8, x21, lsl #2]
   1f88c:	strb	w8, [x9, x27]
   1f890:	ldp	x8, x9, [x19, #8]
   1f894:	ldrb	w8, [x8, x27]
   1f898:	str	w8, [x9, x27, lsl #2]
   1f89c:	add	x27, x27, #0x1
   1f8a0:	mov	w8, #0x2                   	// #2
   1f8a4:	b	1fa18 <rpl_re_set_registers@@Base+0xe70>
   1f8a8:	ldr	x8, [x20]
   1f8ac:	add	x9, x22, x21
   1f8b0:	sub	x2, x26, x27
   1f8b4:	add	x1, x9, x27
   1f8b8:	add	x0, sp, #0x4
   1f8bc:	mov	x3, x20
   1f8c0:	stur	x8, [x29, #-8]
   1f8c4:	bl	a950 <rpl_mbrtowc@plt>
   1f8c8:	sub	x24, x0, #0x1
   1f8cc:	mov	x21, x0
   1f8d0:	cmn	x24, #0x4
   1f8d4:	b.hi	1f954 <rpl_re_set_registers@@Base+0xdac>  // b.pmore
   1f8d8:	ldr	w0, [sp, #4]
   1f8dc:	bl	b640 <towupper@plt>
   1f8e0:	ldr	w8, [sp, #4]
   1f8e4:	mov	w22, w0
   1f8e8:	cmp	w0, w8
   1f8ec:	b.ne	1f910 <rpl_re_set_registers@@Base+0xd68>  // b.any
   1f8f0:	ldp	x9, x8, [x19]
   1f8f4:	ldr	x10, [x19, #40]
   1f8f8:	mov	x2, x21
   1f8fc:	add	x0, x8, x27
   1f900:	add	x8, x9, x10
   1f904:	add	x1, x8, x27
   1f908:	bl	a800 <memcpy@plt>
   1f90c:	b	1f9c8 <rpl_re_set_registers@@Base+0xe20>
   1f910:	add	x0, sp, #0x8
   1f914:	sub	x2, x29, #0x8
   1f918:	mov	w1, w22
   1f91c:	bl	b850 <wcrtomb@plt>
   1f920:	cmp	x21, x0
   1f924:	b.ne	1f9bc <rpl_re_set_registers@@Base+0xe14>  // b.any
   1f928:	ldr	x8, [x19, #8]
   1f92c:	add	x1, sp, #0x8
   1f930:	mov	x2, x21
   1f934:	add	x0, x8, x27
   1f938:	bl	a800 <memcpy@plt>
   1f93c:	mov	w8, wzr
   1f940:	cbz	w8, 1f9c8 <rpl_re_set_registers@@Base+0xe20>
   1f944:	mov	x26, x27
   1f948:	mov	x27, x26
   1f94c:	cbnz	w8, 1fa18 <rpl_re_set_registers@@Base+0xe70>
   1f950:	b	1fa10 <rpl_re_set_registers@@Base+0xe68>
   1f954:	add	x8, x21, #0x1
   1f958:	cmp	x8, #0x2
   1f95c:	b.cs	1f994 <rpl_re_set_registers@@Base+0xdec>  // b.hs, b.nlast
   1f960:	ldr	x8, [x19, #40]
   1f964:	ldp	x9, x10, [x19]
   1f968:	add	x26, x27, #0x1
   1f96c:	cmn	x21, #0x1
   1f970:	add	x8, x8, x27
   1f974:	ldrb	w8, [x9, x8]
   1f978:	strb	w8, [x10, x27]
   1f97c:	ldr	x9, [x19, #16]
   1f980:	str	w8, [x9, x27, lsl #2]
   1f984:	b.ne	1fa10 <rpl_re_set_registers@@Base+0xe68>  // b.any
   1f988:	ldur	x8, [x29, #-8]
   1f98c:	str	x8, [x20]
   1f990:	b	1fa10 <rpl_re_set_registers@@Base+0xe68>
   1f994:	cmn	x21, #0x2
   1f998:	b.ne	1f9ac <rpl_re_set_registers@@Base+0xe04>  // b.any
   1f99c:	ldr	x8, [x19, #64]
   1f9a0:	ldr	x9, [x19, #88]
   1f9a4:	cmp	x8, x9
   1f9a8:	b.ge	1f960 <rpl_re_set_registers@@Base+0xdb8>  // b.tcont
   1f9ac:	ldur	x8, [x29, #-8]
   1f9b0:	str	x8, [x20]
   1f9b4:	mov	w8, #0x3                   	// #3
   1f9b8:	b	1fa18 <rpl_re_set_registers@@Base+0xe70>
   1f9bc:	mov	w8, #0x4                   	// #4
   1f9c0:	mov	x25, x27
   1f9c4:	cbnz	w8, 1f944 <rpl_re_set_registers@@Base+0xd9c>
   1f9c8:	ldr	x8, [x19, #16]
   1f9cc:	add	x9, x21, x27
   1f9d0:	add	x26, x27, #0x1
   1f9d4:	cmp	x26, x9
   1f9d8:	str	w22, [x8, x27, lsl #2]
   1f9dc:	b.ge	1fa04 <rpl_re_set_registers@@Base+0xe5c>  // b.tcont
   1f9e0:	add	x8, x8, x27, lsl #2
   1f9e4:	lsl	x9, x21, #2
   1f9e8:	add	x0, x8, #0x4
   1f9ec:	sub	x2, x9, #0x4
   1f9f0:	mov	w1, #0xff                  	// #255
   1f9f4:	bl	ad40 <memset@plt>
   1f9f8:	subs	x24, x24, #0x1
   1f9fc:	add	x26, x26, #0x1
   1fa00:	b.ne	1f9f8 <rpl_re_set_registers@@Base+0xe50>  // b.any
   1fa04:	mov	w8, wzr
   1fa08:	mov	x27, x26
   1fa0c:	cbnz	w8, 1fa18 <rpl_re_set_registers@@Base+0xe70>
   1fa10:	mov	w8, wzr
   1fa14:	mov	x27, x26
   1fa18:	cmp	w8, #0x4
   1fa1c:	b.hi	1fa48 <rpl_re_set_registers@@Base+0xea0>  // b.pmore
   1fa20:	adr	x9, 1fa34 <rpl_re_set_registers@@Base+0xe8c>
   1fa24:	ldrb	w10, [x23, x8]
   1fa28:	add	x9, x9, x10, lsl #2
   1fa2c:	mov	x26, x28
   1fa30:	br	x9
   1fa34:	cmp	x26, x27
   1fa38:	b.gt	1f858 <rpl_re_set_registers@@Base+0xcb0>
   1fa3c:	mov	w0, wzr
   1fa40:	stp	x27, x27, [x19, #48]
   1fa44:	b	1fb78 <rpl_re_set_registers@@Base+0xfd0>
   1fa48:	b	1fb78 <rpl_re_set_registers@@Base+0xfd0>
   1fa4c:	cmp	x27, x26
   1fa50:	b.ge	1fb68 <rpl_re_set_registers@@Base+0xfc0>  // b.tcont
   1fa54:	mov	x22, x19
   1fa58:	ldr	x8, [x22, #32]!
   1fa5c:	sub	x2, x26, x27
   1fa60:	stur	x8, [x29, #-8]
   1fa64:	ldr	x8, [x22, #88]
   1fa68:	cbnz	x8, 1fb98 <rpl_re_set_registers@@Base+0xff0>
   1fa6c:	ldr	x8, [x19]
   1fa70:	ldr	x9, [x19, #40]
   1fa74:	add	x8, x8, x9
   1fa78:	add	x24, x8, x25
   1fa7c:	mov	x0, sp
   1fa80:	mov	x1, x24
   1fa84:	mov	x3, x22
   1fa88:	bl	a950 <rpl_mbrtowc@plt>
   1fa8c:	sub	x28, x0, #0x1
   1fa90:	mov	x20, x0
   1fa94:	cmn	x28, #0x4
   1fa98:	b.hi	1fbf0 <rpl_re_set_registers@@Base+0x1048>  // b.pmore
   1fa9c:	ldr	w0, [sp]
   1faa0:	bl	b640 <towupper@plt>
   1faa4:	ldr	w8, [sp]
   1faa8:	mov	w21, w0
   1faac:	cmp	w0, w8
   1fab0:	b.ne	1facc <rpl_re_set_registers@@Base+0xf24>  // b.any
   1fab4:	ldr	x8, [x19, #8]
   1fab8:	mov	x1, x24
   1fabc:	mov	x2, x20
   1fac0:	add	x0, x8, x27
   1fac4:	bl	a800 <memcpy@plt>
   1fac8:	b	1fb00 <rpl_re_set_registers@@Base+0xf58>
   1facc:	add	x0, sp, #0x8
   1fad0:	sub	x2, x29, #0x8
   1fad4:	mov	w1, w21
   1fad8:	bl	b850 <wcrtomb@plt>
   1fadc:	subs	x9, x0, x20
   1fae0:	b.ne	1fc5c <rpl_re_set_registers@@Base+0x10b4>  // b.any
   1fae4:	ldr	x8, [x19, #8]
   1fae8:	add	x1, sp, #0x8
   1faec:	add	x0, x8, x27
   1faf0:	mov	x2, x20
   1faf4:	bl	a800 <memcpy@plt>
   1faf8:	mov	w8, wzr
   1fafc:	cbnz	wzr, 1fb54 <rpl_re_set_registers@@Base+0xfac>
   1fb00:	ldrb	w8, [x19, #140]
   1fb04:	cbz	w8, 1fb0c <rpl_re_set_registers@@Base+0xf64>
   1fb08:	cbnz	x20, 1fc8c <rpl_re_set_registers@@Base+0x10e4>
   1fb0c:	ldr	x8, [x19, #16]
   1fb10:	add	x9, x27, x20
   1fb14:	add	x22, x27, #0x1
   1fb18:	add	x25, x25, x20
   1fb1c:	cmp	x22, x9
   1fb20:	str	w21, [x8, x27, lsl #2]
   1fb24:	b.ge	1fb4c <rpl_re_set_registers@@Base+0xfa4>  // b.tcont
   1fb28:	add	x8, x8, x27, lsl #2
   1fb2c:	lsl	x9, x20, #2
   1fb30:	add	x0, x8, #0x4
   1fb34:	sub	x2, x9, #0x4
   1fb38:	mov	w1, #0xff                  	// #255
   1fb3c:	bl	ad40 <memset@plt>
   1fb40:	subs	x28, x28, #0x1
   1fb44:	add	x22, x22, #0x1
   1fb48:	b.ne	1fb40 <rpl_re_set_registers@@Base+0xf98>  // b.any
   1fb4c:	mov	w8, wzr
   1fb50:	mov	x27, x22
   1fb54:	cbz	w8, 1fa4c <rpl_re_set_registers@@Base+0xea4>
   1fb58:	cmp	w8, #0x8
   1fb5c:	b.eq	1fa4c <rpl_re_set_registers@@Base+0xea4>  // b.none
   1fb60:	cmp	w8, #0x7
   1fb64:	b.ne	1fb74 <rpl_re_set_registers@@Base+0xfcc>  // b.any
   1fb68:	mov	w0, wzr
   1fb6c:	stp	x27, x25, [x19, #48]
   1fb70:	b	1fb78 <rpl_re_set_registers@@Base+0xfd0>
   1fb74:	mov	w0, #0xc                   	// #12
   1fb78:	ldp	x20, x19, [sp, #160]
   1fb7c:	ldp	x22, x21, [sp, #144]
   1fb80:	ldp	x24, x23, [sp, #128]
   1fb84:	ldp	x26, x25, [sp, #112]
   1fb88:	ldp	x28, x27, [sp, #96]
   1fb8c:	ldp	x29, x30, [sp, #80]
   1fb90:	add	sp, sp, #0xb0
   1fb94:	ret
   1fb98:	ldr	w9, [x19, #144]
   1fb9c:	add	x24, sp, #0x8
   1fba0:	cmp	w9, #0x1
   1fba4:	b.lt	1fa7c <rpl_re_set_registers@@Base+0xed4>  // b.tstop
   1fba8:	cmp	x2, #0x1
   1fbac:	b.lt	1fa7c <rpl_re_set_registers@@Base+0xed4>  // b.tstop
   1fbb0:	ldr	x11, [x19, #40]
   1fbb4:	ldr	x12, [x19]
   1fbb8:	ldrsw	x10, [x19, #144]
   1fbbc:	mov	x9, xzr
   1fbc0:	add	x11, x25, x11
   1fbc4:	add	x11, x12, x11
   1fbc8:	ldrb	w12, [x11, x9]
   1fbcc:	add	x24, sp, #0x8
   1fbd0:	ldrb	w12, [x8, x12]
   1fbd4:	strb	w12, [x24, x9]
   1fbd8:	add	x9, x9, #0x1
   1fbdc:	cmp	x9, x10
   1fbe0:	b.ge	1fa7c <rpl_re_set_registers@@Base+0xed4>  // b.tcont
   1fbe4:	cmp	x2, x9
   1fbe8:	b.gt	1fbc8 <rpl_re_set_registers@@Base+0x1020>
   1fbec:	b	1fa7c <rpl_re_set_registers@@Base+0xed4>
   1fbf0:	add	x8, x20, #0x1
   1fbf4:	cmp	x8, #0x2
   1fbf8:	b.cc	1fc14 <rpl_re_set_registers@@Base+0x106c>  // b.lo, b.ul, b.last
   1fbfc:	cmn	x20, #0x2
   1fc00:	b.ne	1fda4 <rpl_re_set_registers@@Base+0x11fc>  // b.any
   1fc04:	ldr	x8, [x19, #64]
   1fc08:	ldr	x9, [x19, #88]
   1fc0c:	cmp	x8, x9
   1fc10:	b.lt	1fda4 <rpl_re_set_registers@@Base+0x11fc>  // b.tstop
   1fc14:	ldr	x8, [x19, #40]
   1fc18:	ldr	x10, [x19]
   1fc1c:	ldr	x9, [x19, #120]
   1fc20:	add	x8, x8, x25
   1fc24:	ldrb	w8, [x10, x8]
   1fc28:	cbnz	x9, 1fdbc <rpl_re_set_registers@@Base+0x1214>
   1fc2c:	ldr	x9, [x19, #8]
   1fc30:	strb	w8, [x9, x27]
   1fc34:	ldrb	w9, [x19, #140]
   1fc38:	cbnz	w9, 1fdc4 <rpl_re_set_registers@@Base+0x121c>
   1fc3c:	ldr	x10, [x19, #16]
   1fc40:	add	x25, x25, #0x1
   1fc44:	add	x9, x27, #0x1
   1fc48:	cmn	x20, #0x1
   1fc4c:	str	w8, [x10, x27, lsl #2]
   1fc50:	b.eq	1fdd0 <rpl_re_set_registers@@Base+0x1228>  // b.none
   1fc54:	mov	x27, x9
   1fc58:	b	1fa4c <rpl_re_set_registers@@Base+0xea4>
   1fc5c:	mov	x23, x0
   1fc60:	cmn	x0, #0x1
   1fc64:	b.eq	1fcb0 <rpl_re_set_registers@@Base+0x1108>  // b.none
   1fc68:	ldr	x8, [x19, #64]
   1fc6c:	add	x24, x23, x27
   1fc70:	cmp	x24, x8
   1fc74:	b.ls	1fcbc <rpl_re_set_registers@@Base+0x1114>  // b.plast
   1fc78:	ldur	x8, [x29, #-8]
   1fc7c:	str	x8, [x22]
   1fc80:	mov	w8, #0x7                   	// #7
   1fc84:	cbnz	w8, 1fb54 <rpl_re_set_registers@@Base+0xfac>
   1fc88:	b	1fb00 <rpl_re_set_registers@@Base+0xf58>
   1fc8c:	ldr	x8, [x19, #24]
   1fc90:	mov	x9, x25
   1fc94:	mov	x10, x20
   1fc98:	add	x8, x8, x27, lsl #3
   1fc9c:	str	x9, [x8], #8
   1fca0:	subs	x10, x10, #0x1
   1fca4:	add	x9, x9, #0x1
   1fca8:	b.ne	1fc9c <rpl_re_set_registers@@Base+0x10f4>  // b.any
   1fcac:	b	1fb0c <rpl_re_set_registers@@Base+0xf64>
   1fcb0:	ldr	x8, [x19, #8]
   1fcb4:	mov	x1, x24
   1fcb8:	b	1faec <rpl_re_set_registers@@Base+0xf44>
   1fcbc:	mov	x22, x9
   1fcc0:	ldr	x9, [x19, #24]
   1fcc4:	cbnz	x9, 1fcd8 <rpl_re_set_registers@@Base+0x1130>
   1fcc8:	lsl	x0, x8, #3
   1fccc:	bl	abc0 <malloc@plt>
   1fcd0:	str	x0, [x19, #24]
   1fcd4:	cbz	x0, 1fdb0 <rpl_re_set_registers@@Base+0x1208>
   1fcd8:	ldrb	w8, [x19, #140]
   1fcdc:	cbnz	w8, 1fd04 <rpl_re_set_registers@@Base+0x115c>
   1fce0:	cbz	x27, 1fcfc <rpl_re_set_registers@@Base+0x1154>
   1fce4:	ldr	x8, [x19, #24]
   1fce8:	mov	x9, xzr
   1fcec:	str	x9, [x8, x9, lsl #3]
   1fcf0:	add	x9, x9, #0x1
   1fcf4:	cmp	x27, x9
   1fcf8:	b.ne	1fcec <rpl_re_set_registers@@Base+0x1144>  // b.any
   1fcfc:	mov	w8, #0x1                   	// #1
   1fd00:	strb	w8, [x19, #140]
   1fd04:	ldr	x8, [x19, #8]
   1fd08:	add	x1, sp, #0x8
   1fd0c:	mov	x2, x23
   1fd10:	add	x0, x8, x27
   1fd14:	bl	a800 <memcpy@plt>
   1fd18:	ldr	x8, [x19, #16]
   1fd1c:	cmp	x23, #0x2
   1fd20:	mov	x13, x25
   1fd24:	str	w21, [x8, x27, lsl #2]
   1fd28:	ldr	x9, [x19, #24]
   1fd2c:	str	x25, [x9, x27, lsl #3]
   1fd30:	b.cc	1fd64 <rpl_re_set_registers@@Base+0x11bc>  // b.lo, b.ul, b.last
   1fd34:	add	x8, x8, x27, lsl #2
   1fd38:	add	x9, x9, x27, lsl #3
   1fd3c:	mov	w10, #0x1                   	// #1
   1fd40:	mov	w11, #0xffffffff            	// #-1
   1fd44:	cmp	x10, x20
   1fd48:	csel	x12, x10, x28, cc  // cc = lo, ul, last
   1fd4c:	add	x12, x12, x13
   1fd50:	str	x12, [x9, x10, lsl #3]
   1fd54:	str	w11, [x8, x10, lsl #2]
   1fd58:	add	x10, x10, #0x1
   1fd5c:	cmp	x23, x10
   1fd60:	b.ne	1fd44 <rpl_re_set_registers@@Base+0x119c>  // b.any
   1fd64:	ldp	x8, x9, [x19, #88]
   1fd68:	add	x8, x8, x22
   1fd6c:	cmp	x9, x13
   1fd70:	str	x8, [x19, #88]
   1fd74:	b.le	1fd84 <rpl_re_set_registers@@Base+0x11dc>
   1fd78:	ldr	x9, [x19, #104]
   1fd7c:	add	x9, x9, x22
   1fd80:	str	x9, [x19, #104]
   1fd84:	ldr	x9, [x19, #64]
   1fd88:	add	x25, x20, x25
   1fd8c:	mov	x27, x24
   1fd90:	cmp	x9, x8
   1fd94:	csel	x26, x8, x9, gt
   1fd98:	mov	w8, #0x8                   	// #8
   1fd9c:	cbnz	w8, 1fb54 <rpl_re_set_registers@@Base+0xfac>
   1fda0:	b	1fb00 <rpl_re_set_registers@@Base+0xf58>
   1fda4:	ldur	x8, [x29, #-8]
   1fda8:	str	x8, [x22]
   1fdac:	b	1fb68 <rpl_re_set_registers@@Base+0xfc0>
   1fdb0:	mov	w8, #0x1                   	// #1
   1fdb4:	cbnz	w8, 1fb54 <rpl_re_set_registers@@Base+0xfac>
   1fdb8:	b	1fb00 <rpl_re_set_registers@@Base+0xf58>
   1fdbc:	ldrb	w8, [x9, x8]
   1fdc0:	b	1fc2c <rpl_re_set_registers@@Base+0x1084>
   1fdc4:	ldr	x9, [x19, #24]
   1fdc8:	str	x25, [x9, x27, lsl #3]
   1fdcc:	b	1fc3c <rpl_re_set_registers@@Base+0x1094>
   1fdd0:	ldur	x8, [x29, #-8]
   1fdd4:	mov	x27, x9
   1fdd8:	str	x8, [x22]
   1fddc:	b	1fa4c <rpl_re_set_registers@@Base+0xea4>
   1fde0:	stp	x29, x30, [sp, #-48]!
   1fde4:	stp	x20, x19, [sp, #32]
   1fde8:	ldr	x8, [x0, #64]
   1fdec:	ldr	x9, [x0, #88]
   1fdf0:	ldr	x20, [x0, #48]
   1fdf4:	str	x21, [sp, #16]
   1fdf8:	mov	x19, x0
   1fdfc:	cmp	x8, x9
   1fe00:	csel	x21, x9, x8, gt
   1fe04:	mov	x29, sp
   1fe08:	cmp	x20, x21
   1fe0c:	b.ge	1fe4c <rpl_re_set_registers@@Base+0x12a4>  // b.tcont
   1fe10:	ldr	x8, [x19]
   1fe14:	ldr	x9, [x19, #40]
   1fe18:	add	x9, x8, x9
   1fe1c:	ldr	x8, [x19, #120]
   1fe20:	ldrb	w0, [x9, x20]
   1fe24:	cbnz	x8, 1fe44 <rpl_re_set_registers@@Base+0x129c>
   1fe28:	bl	abf0 <toupper@plt>
   1fe2c:	ldr	x8, [x19, #8]
   1fe30:	strb	w0, [x8, x20]
   1fe34:	add	x20, x20, #0x1
   1fe38:	cmp	x20, x21
   1fe3c:	b.lt	1fe10 <rpl_re_set_registers@@Base+0x1268>  // b.tstop
   1fe40:	b	1fe4c <rpl_re_set_registers@@Base+0x12a4>
   1fe44:	ldrb	w0, [x8, x0]
   1fe48:	b	1fe28 <rpl_re_set_registers@@Base+0x1280>
   1fe4c:	stp	x20, x20, [x19, #48]
   1fe50:	ldp	x20, x19, [sp, #32]
   1fe54:	ldr	x21, [sp, #16]
   1fe58:	ldp	x29, x30, [sp], #48
   1fe5c:	ret
   1fe60:	sub	sp, sp, #0x90
   1fe64:	stp	x29, x30, [sp, #80]
   1fe68:	stp	x24, x23, [sp, #96]
   1fe6c:	stp	x22, x21, [sp, #112]
   1fe70:	stp	x20, x19, [sp, #128]
   1fe74:	ldr	x8, [x0, #64]
   1fe78:	ldr	x9, [x0, #88]
   1fe7c:	ldr	x23, [x0, #48]
   1fe80:	mov	x19, x0
   1fe84:	add	x20, x0, #0x20
   1fe88:	cmp	x8, x9
   1fe8c:	csel	x22, x9, x8, gt
   1fe90:	add	x29, sp, #0x50
   1fe94:	b	1fea4 <rpl_re_set_registers@@Base+0x12fc>
   1fe98:	mov	w8, #0x1                   	// #1
   1fe9c:	mov	x23, x24
   1fea0:	tbz	w8, #0, 1ffe8 <rpl_re_set_registers@@Base+0x1440>
   1fea4:	subs	x2, x22, x23
   1fea8:	b.le	1ffe8 <rpl_re_set_registers@@Base+0x1440>
   1feac:	ldr	x8, [x19, #120]
   1feb0:	ldr	x24, [x19, #32]
   1feb4:	cbnz	x8, 1ff78 <rpl_re_set_registers@@Base+0x13d0>
   1feb8:	ldr	x8, [x19]
   1febc:	ldr	x9, [x19, #40]
   1fec0:	add	x8, x8, x9
   1fec4:	add	x1, x8, x23
   1fec8:	add	x0, sp, #0xc
   1fecc:	mov	x3, x20
   1fed0:	bl	a950 <rpl_mbrtowc@plt>
   1fed4:	add	x8, x0, #0x1
   1fed8:	cmp	x8, #0x2
   1fedc:	b.cc	1ff0c <rpl_re_set_registers@@Base+0x1364>  // b.lo, b.ul, b.last
   1fee0:	mov	x21, x0
   1fee4:	cmn	x0, #0x2
   1fee8:	b.ne	1ff30 <rpl_re_set_registers@@Base+0x1388>  // b.any
   1feec:	ldr	x8, [x19, #64]
   1fef0:	ldr	x9, [x19, #88]
   1fef4:	cmp	x8, x9
   1fef8:	b.ge	1ff0c <rpl_re_set_registers@@Base+0x1364>  // b.tcont
   1fefc:	mov	w8, wzr
   1ff00:	str	x24, [x20]
   1ff04:	tbnz	w8, #0, 1fea4 <rpl_re_set_registers@@Base+0x12fc>
   1ff08:	b	1ffe8 <rpl_re_set_registers@@Base+0x1440>
   1ff0c:	ldr	x8, [x19, #40]
   1ff10:	ldr	x9, [x19]
   1ff14:	add	x8, x8, x23
   1ff18:	ldrb	w8, [x9, x8]
   1ff1c:	str	w8, [sp, #12]
   1ff20:	ldr	x9, [x19, #120]
   1ff24:	cbnz	x9, 1ffdc <rpl_re_set_registers@@Base+0x1434>
   1ff28:	mov	w21, #0x1                   	// #1
   1ff2c:	str	x24, [x20]
   1ff30:	ldr	w9, [sp, #12]
   1ff34:	ldr	x8, [x19, #16]
   1ff38:	add	x10, x21, x23
   1ff3c:	add	x24, x23, #0x1
   1ff40:	cmp	x24, x10
   1ff44:	str	w9, [x8, x23, lsl #2]
   1ff48:	b.ge	1fe98 <rpl_re_set_registers@@Base+0x12f0>  // b.tcont
   1ff4c:	add	x8, x8, x23, lsl #2
   1ff50:	lsl	x9, x21, #2
   1ff54:	add	x0, x8, #0x4
   1ff58:	sub	x2, x9, #0x4
   1ff5c:	mov	w1, #0xff                  	// #255
   1ff60:	bl	ad40 <memset@plt>
   1ff64:	sub	x8, x21, #0x1
   1ff68:	subs	x8, x8, #0x1
   1ff6c:	add	x24, x24, #0x1
   1ff70:	b.ne	1ff68 <rpl_re_set_registers@@Base+0x13c0>  // b.any
   1ff74:	b	1fe98 <rpl_re_set_registers@@Base+0x12f0>
   1ff78:	ldr	w8, [x19, #144]
   1ff7c:	add	x1, sp, #0x10
   1ff80:	cmp	w8, #0x1
   1ff84:	b.lt	1fec8 <rpl_re_set_registers@@Base+0x1320>  // b.tstop
   1ff88:	cmp	x2, #0x1
   1ff8c:	b.lt	1fec8 <rpl_re_set_registers@@Base+0x1320>  // b.tstop
   1ff90:	mov	x8, xzr
   1ff94:	ldr	x9, [x19, #40]
   1ff98:	ldp	x10, x12, [x19]
   1ff9c:	ldr	x11, [x19, #120]
   1ffa0:	add	x1, sp, #0x10
   1ffa4:	add	x9, x10, x9
   1ffa8:	add	x9, x9, x23
   1ffac:	ldrb	w9, [x9, x8]
   1ffb0:	add	x10, x12, x23
   1ffb4:	ldrb	w9, [x11, x9]
   1ffb8:	strb	w9, [x10, x8]
   1ffbc:	strb	w9, [x1, x8]
   1ffc0:	ldr	w9, [x19, #144]
   1ffc4:	add	x8, x8, #0x1
   1ffc8:	cmp	w9, w8
   1ffcc:	b.le	1fec8 <rpl_re_set_registers@@Base+0x1320>
   1ffd0:	cmp	x2, x8
   1ffd4:	b.gt	1ff94 <rpl_re_set_registers@@Base+0x13ec>
   1ffd8:	b	1fec8 <rpl_re_set_registers@@Base+0x1320>
   1ffdc:	ldrb	w8, [x9, x8]
   1ffe0:	str	w8, [sp, #12]
   1ffe4:	b	1ff28 <rpl_re_set_registers@@Base+0x1380>
   1ffe8:	stp	x23, x23, [x19, #48]
   1ffec:	ldp	x20, x19, [sp, #128]
   1fff0:	ldp	x22, x21, [sp, #112]
   1fff4:	ldp	x24, x23, [sp, #96]
   1fff8:	ldp	x29, x30, [sp, #80]
   1fffc:	add	sp, sp, #0x90
   20000:	ret
   20004:	ldr	x9, [x0, #64]
   20008:	ldr	x10, [x0, #88]
   2000c:	ldr	x8, [x0, #48]
   20010:	cmp	x9, x10
   20014:	csel	x9, x10, x9, gt
   20018:	cmp	x8, x9
   2001c:	b.ge	20048 <rpl_re_set_registers@@Base+0x14a0>  // b.tcont
   20020:	ldr	x10, [x0, #40]
   20024:	ldp	x11, x13, [x0]
   20028:	ldr	x12, [x0, #120]
   2002c:	add	x10, x11, x10
   20030:	ldrb	w10, [x10, x8]
   20034:	ldrb	w10, [x12, x10]
   20038:	strb	w10, [x13, x8]
   2003c:	add	x8, x8, #0x1
   20040:	cmp	x8, x9
   20044:	b.lt	20020 <rpl_re_set_registers@@Base+0x1478>  // b.tstop
   20048:	stp	x8, x8, [x0, #48]
   2004c:	ret
   20050:	stp	x29, x30, [sp, #-32]!
   20054:	str	x19, [sp, #16]
   20058:	mov	x29, sp
   2005c:	mov	x19, x1
   20060:	bl	201e8 <rpl_re_set_registers@@Base+0x1640>
   20064:	ldr	x8, [x19, #72]
   20068:	add	x8, x8, w0, sxtw
   2006c:	str	x8, [x19, #72]
   20070:	ldr	x19, [sp, #16]
   20074:	ldp	x29, x30, [sp], #32
   20078:	ret
   2007c:	sub	sp, sp, #0x70
   20080:	stp	x29, x30, [sp, #16]
   20084:	stp	x28, x27, [sp, #32]
   20088:	stp	x26, x25, [sp, #48]
   2008c:	stp	x24, x23, [sp, #64]
   20090:	stp	x22, x21, [sp, #80]
   20094:	stp	x20, x19, [sp, #96]
   20098:	ldr	x25, [x1]
   2009c:	add	x29, sp, #0x10
   200a0:	mov	x20, x5
   200a4:	mov	x21, x4
   200a8:	ldr	x8, [x25, #168]
   200ac:	mov	x22, x3
   200b0:	mov	x23, x2
   200b4:	mov	x24, x1
   200b8:	str	x8, [sp, #8]
   200bc:	mov	x26, x0
   200c0:	bl	207e4 <rpl_re_set_registers@@Base+0x1c3c>
   200c4:	mov	x19, x0
   200c8:	cbnz	x0, 200d4 <rpl_re_set_registers@@Base+0x152c>
   200cc:	ldr	w8, [x20]
   200d0:	cbnz	w8, 201bc <rpl_re_set_registers@@Base+0x1614>
   200d4:	orr	x27, x22, #0x800000
   200d8:	b	200f8 <rpl_re_set_registers@@Base+0x1550>
   200dc:	mov	x2, xzr
   200e0:	mov	w3, #0xa                   	// #10
   200e4:	mov	x0, x25
   200e8:	mov	x1, x19
   200ec:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   200f0:	mov	x19, x0
   200f4:	cbz	x0, 20178 <rpl_re_set_registers@@Base+0x15d0>
   200f8:	ldrb	w8, [x23, #8]
   200fc:	cmp	w8, #0xa
   20100:	b.ne	20180 <rpl_re_set_registers@@Base+0x15d8>  // b.any
   20104:	mov	x0, x23
   20108:	mov	x1, x26
   2010c:	mov	x2, x27
   20110:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20114:	ldrb	w8, [x23, #8]
   20118:	orr	w9, w8, #0x8
   2011c:	cmp	w9, #0xa
   20120:	b.eq	200dc <rpl_re_set_registers@@Base+0x1534>  // b.none
   20124:	cbz	x21, 20130 <rpl_re_set_registers@@Base+0x1588>
   20128:	cmp	w8, #0x9
   2012c:	b.eq	200dc <rpl_re_set_registers@@Base+0x1534>  // b.none
   20130:	ldr	x8, [sp, #8]
   20134:	ldr	x28, [x25, #168]
   20138:	mov	x0, x26
   2013c:	mov	x1, x24
   20140:	mov	x2, x23
   20144:	mov	x3, x22
   20148:	mov	x4, x21
   2014c:	mov	x5, x20
   20150:	str	x8, [x25, #168]
   20154:	bl	207e4 <rpl_re_set_registers@@Base+0x1c3c>
   20158:	mov	x2, x0
   2015c:	cbnz	x0, 20168 <rpl_re_set_registers@@Base+0x15c0>
   20160:	ldr	w8, [x20]
   20164:	cbnz	w8, 201a4 <rpl_re_set_registers@@Base+0x15fc>
   20168:	ldr	x8, [x25, #168]
   2016c:	orr	x8, x8, x28
   20170:	str	x8, [x25, #168]
   20174:	b	200e0 <rpl_re_set_registers@@Base+0x1538>
   20178:	mov	w8, #0xc                   	// #12
   2017c:	str	w8, [x20]
   20180:	mov	x0, x19
   20184:	ldp	x20, x19, [sp, #96]
   20188:	ldp	x22, x21, [sp, #80]
   2018c:	ldp	x24, x23, [sp, #64]
   20190:	ldp	x26, x25, [sp, #48]
   20194:	ldp	x28, x27, [sp, #32]
   20198:	ldp	x29, x30, [sp, #16]
   2019c:	add	sp, sp, #0x70
   201a0:	ret
   201a4:	cbz	x19, 20180 <rpl_re_set_registers@@Base+0x15d8>
   201a8:	adrp	x1, 20000 <rpl_re_set_registers@@Base+0x1458>
   201ac:	add	x1, x1, #0x9d0
   201b0:	mov	x0, x19
   201b4:	mov	x2, xzr
   201b8:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   201bc:	mov	x19, xzr
   201c0:	b	20180 <rpl_re_set_registers@@Base+0x15d8>
   201c4:	sub	sp, sp, #0x20
   201c8:	strb	w3, [sp, #8]
   201cc:	mov	x3, sp
   201d0:	stp	x29, x30, [sp, #16]
   201d4:	add	x29, sp, #0x10
   201d8:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   201dc:	ldp	x29, x30, [sp, #16]
   201e0:	add	sp, sp, #0x20
   201e4:	ret
   201e8:	sub	sp, sp, #0x60
   201ec:	stp	x29, x30, [sp, #16]
   201f0:	stp	x26, x25, [sp, #32]
   201f4:	stp	x24, x23, [sp, #48]
   201f8:	stp	x22, x21, [sp, #64]
   201fc:	stp	x20, x19, [sp, #80]
   20200:	ldr	x9, [x1, #104]
   20204:	ldr	x8, [x1, #72]
   20208:	mov	x19, x0
   2020c:	add	x29, sp, #0x10
   20210:	cmp	x9, x8
   20214:	b.le	202f0 <rpl_re_set_registers@@Base+0x1748>
   20218:	ldr	x9, [x1, #8]
   2021c:	mov	x23, x19
   20220:	mov	w26, #0xff00                	// #65280
   20224:	mov	x20, x2
   20228:	ldrb	w24, [x9, x8]
   2022c:	mov	x21, x1
   20230:	movk	w26, #0xff9f, lsl #16
   20234:	strb	w24, [x23], #8
   20238:	ldr	w25, [x23]
   2023c:	and	w8, w25, #0xff9fffff
   20240:	str	w8, [x23]
   20244:	ldr	w8, [x1, #144]
   20248:	cmp	w8, #0x2
   2024c:	b.lt	20270 <rpl_re_set_registers@@Base+0x16c8>  // b.tstop
   20250:	ldr	x8, [x21, #72]
   20254:	ldr	x9, [x21, #48]
   20258:	cmp	x8, x9
   2025c:	b.eq	20270 <rpl_re_set_registers@@Base+0x16c8>  // b.none
   20260:	ldr	x9, [x21, #16]
   20264:	ldr	w8, [x9, x8, lsl #2]
   20268:	cmn	w8, #0x1
   2026c:	b.eq	20438 <rpl_re_set_registers@@Base+0x1890>  // b.none
   20270:	cmp	w24, #0x5c
   20274:	b.ne	20300 <rpl_re_set_registers@@Base+0x1758>  // b.any
   20278:	ldr	x8, [x21, #72]
   2027c:	ldr	x9, [x21, #88]
   20280:	add	x8, x8, #0x1
   20284:	cmp	x8, x9
   20288:	b.ge	20350 <rpl_re_set_registers@@Base+0x17a8>  // b.tcont
   2028c:	mov	x0, x21
   20290:	bl	2070c <rpl_re_set_registers@@Base+0x1b64>
   20294:	and	w8, w25, w26
   20298:	orr	w24, w8, #0x1
   2029c:	strb	w0, [x19]
   202a0:	str	w24, [x19, #8]
   202a4:	ldr	w8, [x21, #144]
   202a8:	mov	w22, w0
   202ac:	cmp	w8, #0x2
   202b0:	b.lt	203bc <rpl_re_set_registers@@Base+0x1814>  // b.tstop
   202b4:	ldr	x8, [x21, #72]
   202b8:	mov	x0, x21
   202bc:	add	x1, x8, #0x1
   202c0:	bl	207c0 <rpl_re_set_registers@@Base+0x1c18>
   202c4:	mov	w21, w0
   202c8:	bl	b500 <iswalnum@plt>
   202cc:	ldr	w9, [x23]
   202d0:	cmp	w0, #0x0
   202d4:	mov	w8, #0x5f                  	// #95
   202d8:	ccmp	w21, w8, #0x4, eq  // eq = none
   202dc:	mov	w8, #0x400000              	// #4194304
   202e0:	csel	w8, w8, wzr, eq  // eq = none
   202e4:	and	w9, w9, #0xffbfffff
   202e8:	orr	w8, w8, w9
   202ec:	b	203e4 <rpl_re_set_registers@@Base+0x183c>
   202f0:	mov	w8, #0x2                   	// #2
   202f4:	mov	w0, wzr
   202f8:	strb	w8, [x19, #8]
   202fc:	b	20564 <rpl_re_set_registers@@Base+0x19bc>
   20300:	and	w8, w25, w26
   20304:	orr	w22, w8, #0x1
   20308:	str	w22, [x23]
   2030c:	ldr	w8, [x21, #144]
   20310:	cmp	w8, #0x2
   20314:	b.lt	2035c <rpl_re_set_registers@@Base+0x17b4>  // b.tstop
   20318:	ldr	x1, [x21, #72]
   2031c:	mov	x0, x21
   20320:	bl	207c0 <rpl_re_set_registers@@Base+0x1c18>
   20324:	mov	w22, w0
   20328:	bl	b500 <iswalnum@plt>
   2032c:	ldr	w9, [x23]
   20330:	cmp	w0, #0x0
   20334:	mov	w8, #0x5f                  	// #95
   20338:	ccmp	w22, w8, #0x4, eq  // eq = none
   2033c:	mov	w8, #0x400000              	// #4194304
   20340:	csel	w8, w8, wzr, eq  // eq = none
   20344:	and	w9, w9, #0xffbfffff
   20348:	orr	w8, w8, w9
   2034c:	b	20388 <rpl_re_set_registers@@Base+0x17e0>
   20350:	and	w8, w25, w26
   20354:	mov	w9, #0x24                  	// #36
   20358:	b	20444 <rpl_re_set_registers@@Base+0x189c>
   2035c:	bl	b140 <__ctype_b_loc@plt>
   20360:	ldr	x8, [x0]
   20364:	cmp	w24, #0x5f
   20368:	cset	w9, eq  // eq = none
   2036c:	ldrh	w8, [x8, x24, lsl #1]
   20370:	and	w8, w8, #0x8
   20374:	orr	w8, w9, w8, lsr #3
   20378:	cmp	w8, #0x0
   2037c:	mov	w8, #0x400000              	// #4194304
   20380:	csel	w8, w8, wzr, ne  // ne = any
   20384:	orr	w8, w8, w22
   20388:	sub	w9, w24, #0xa
   2038c:	cmp	w9, #0x73
   20390:	mov	w0, #0x1                   	// #1
   20394:	str	w8, [x23]
   20398:	b.hi	20564 <rpl_re_set_registers@@Base+0x19bc>  // b.pmore
   2039c:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   203a0:	add	x10, x10, #0x73e
   203a4:	adr	x11, 203b4 <rpl_re_set_registers@@Base+0x180c>
   203a8:	ldrb	w12, [x10, x9]
   203ac:	add	x11, x11, x12, lsl #2
   203b0:	br	x11
   203b4:	tbnz	w20, #11, 20554 <rpl_re_set_registers@@Base+0x19ac>
   203b8:	b	20560 <rpl_re_set_registers@@Base+0x19b8>
   203bc:	bl	b140 <__ctype_b_loc@plt>
   203c0:	ldr	x8, [x0]
   203c4:	and	x9, x22, #0xff
   203c8:	ldrh	w8, [x8, x9, lsl #1]
   203cc:	and	w9, w22, #0xff
   203d0:	cmp	w9, #0x5f
   203d4:	cset	w9, eq  // eq = none
   203d8:	ubfx	w8, w8, #3, #1
   203dc:	orr	w8, w8, w9
   203e0:	orr	w8, w24, w8, lsl #22
   203e4:	and	w9, w22, #0xff
   203e8:	sub	w9, w9, #0x27
   203ec:	cmp	w9, #0x56
   203f0:	mov	w0, #0x2                   	// #2
   203f4:	str	w8, [x23]
   203f8:	b.hi	20564 <rpl_re_set_registers@@Base+0x19bc>  // b.pmore
   203fc:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   20400:	add	x10, x10, #0x7b2
   20404:	adr	x11, 20414 <rpl_re_set_registers@@Base+0x186c>
   20408:	ldrb	w12, [x10, x9]
   2040c:	add	x11, x11, x12, lsl #2
   20410:	br	x11
   20414:	tbnz	w20, #14, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20418:	and	x9, x22, #0xff
   2041c:	and	w8, w8, #0xffffff00
   20420:	orr	w8, w8, #0x4
   20424:	sub	x9, x9, #0x31
   20428:	str	w8, [x19, #8]
   2042c:	str	x9, [x19]
   20430:	mov	w0, #0x2                   	// #2
   20434:	b	20564 <rpl_re_set_registers@@Base+0x19bc>
   20438:	mov	w9, #0x1                   	// #1
   2043c:	and	w8, w25, w26
   20440:	movk	w9, #0x20, lsl #16
   20444:	orr	w8, w8, w9
   20448:	b	2055c <rpl_re_set_registers@@Base+0x19b4>
   2044c:	tbnz	w20, #3, 20494 <rpl_re_set_registers@@Base+0x18ec>
   20450:	ldr	x8, [x21, #72]
   20454:	ldr	x9, [x21, #88]
   20458:	add	x8, x8, #0x1
   2045c:	cmp	x8, x9
   20460:	b.eq	20494 <rpl_re_set_registers@@Base+0x18ec>  // b.none
   20464:	mov	x0, sp
   20468:	mov	x1, x21
   2046c:	mov	x2, x20
   20470:	str	x8, [x21, #72]
   20474:	bl	201e8 <rpl_re_set_registers@@Base+0x1640>
   20478:	ldr	x8, [x21, #72]
   2047c:	sub	x8, x8, #0x1
   20480:	str	x8, [x21, #72]
   20484:	ldrb	w8, [sp, #8]
   20488:	sub	w8, w8, #0x9
   2048c:	cmp	w8, #0x1
   20490:	b.hi	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.pmore
   20494:	mov	w8, #0xc                   	// #12
   20498:	mov	w9, #0x20                  	// #32
   2049c:	strb	w8, [x19, #8]
   204a0:	str	w9, [x19]
   204a4:	b	20560 <rpl_re_set_registers@@Base+0x19b8>
   204a8:	tbz	w20, #13, 20560 <rpl_re_set_registers@@Base+0x19b8>
   204ac:	and	w8, w8, #0xffffff00
   204b0:	orr	w8, w8, #0x8
   204b4:	b	2055c <rpl_re_set_registers@@Base+0x19b4>
   204b8:	tbz	w20, #13, 20560 <rpl_re_set_registers@@Base+0x19b8>
   204bc:	mov	w9, #0x9                   	// #9
   204c0:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   204c4:	mov	w9, #0xb                   	// #11
   204c8:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   204cc:	mov	w9, #0x402                 	// #1026
   204d0:	tst	x20, x9
   204d4:	b.ne	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.any
   204d8:	mov	w9, #0x12                  	// #18
   204dc:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   204e0:	mov	w9, #0x5                   	// #5
   204e4:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   204e8:	mov	w9, #0x402                 	// #1026
   204ec:	tst	x20, x9
   204f0:	b.ne	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.any
   204f4:	mov	w9, #0x13                  	// #19
   204f8:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   204fc:	mov	w9, #0x14                  	// #20
   20500:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   20504:	mov	w9, #0x8                   	// #8
   20508:	movk	w9, #0x80, lsl #16
   2050c:	tst	x20, x9
   20510:	b.eq	2059c <rpl_re_set_registers@@Base+0x19f4>  // b.none
   20514:	and	w8, w8, #0xffffff00
   20518:	mov	w9, #0x10                  	// #16
   2051c:	orr	w8, w8, #0xc
   20520:	str	w9, [x19]
   20524:	str	w8, [x19, #8]
   20528:	b	20560 <rpl_re_set_registers@@Base+0x19b8>
   2052c:	mvn	w9, w20
   20530:	mov	w10, #0x1200                	// #4608
   20534:	tst	x9, x10
   20538:	b.ne	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.any
   2053c:	mov	w9, #0x17                  	// #23
   20540:	b	20558 <rpl_re_set_registers@@Base+0x19b0>
   20544:	mov	w9, #0x8400                	// #33792
   20548:	and	x9, x20, x9
   2054c:	cmp	x9, #0x8, lsl #12
   20550:	b.ne	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.any
   20554:	mov	w9, #0xa                   	// #10
   20558:	bfxil	w8, w9, #0, #8
   2055c:	str	w8, [x23]
   20560:	mov	w0, #0x1                   	// #1
   20564:	ldp	x20, x19, [sp, #80]
   20568:	ldp	x22, x21, [sp, #64]
   2056c:	ldp	x24, x23, [sp, #48]
   20570:	ldp	x26, x25, [sp, #32]
   20574:	ldp	x29, x30, [sp, #16]
   20578:	add	sp, sp, #0x60
   2057c:	ret
   20580:	mvn	w9, w20
   20584:	mov	w10, #0x1200                	// #4608
   20588:	tst	x9, x10
   2058c:	b.ne	20560 <rpl_re_set_registers@@Base+0x19b8>  // b.any
   20590:	and	w8, w8, #0xffffff00
   20594:	orr	w8, w8, #0x18
   20598:	b	2055c <rpl_re_set_registers@@Base+0x19b4>
   2059c:	ldr	x9, [x21, #72]
   205a0:	cbz	x9, 20514 <rpl_re_set_registers@@Base+0x196c>
   205a4:	tbz	w20, #11, 20560 <rpl_re_set_registers@@Base+0x19b8>
   205a8:	ldr	x10, [x21, #8]
   205ac:	add	x9, x9, x10
   205b0:	ldurb	w9, [x9, #-1]
   205b4:	cmp	w9, #0xa
   205b8:	b.eq	20514 <rpl_re_set_registers@@Base+0x196c>  // b.none
   205bc:	b	20560 <rpl_re_set_registers@@Base+0x19b8>
   205c0:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   205c4:	and	w8, w8, #0xffffff00
   205c8:	mov	w9, #0x80                  	// #128
   205cc:	b	20680 <rpl_re_set_registers@@Base+0x1ad8>
   205d0:	tbnz	w20, #13, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   205d4:	and	w8, w8, #0xffffff00
   205d8:	orr	w8, w8, #0x8
   205dc:	b	206dc <rpl_re_set_registers@@Base+0x1b34>
   205e0:	tbnz	w20, #13, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   205e4:	mov	w9, #0x9                   	// #9
   205e8:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   205ec:	mov	w9, #0x402                 	// #1026
   205f0:	and	x9, x20, x9
   205f4:	cmp	x9, #0x2
   205f8:	b.ne	20704 <rpl_re_set_registers@@Base+0x1b5c>  // b.any
   205fc:	mov	w9, #0x12                  	// #18
   20600:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   20604:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20608:	and	w8, w8, #0xffffff00
   2060c:	mov	w9, #0x6                   	// #6
   20610:	b	20680 <rpl_re_set_registers@@Base+0x1ad8>
   20614:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20618:	and	w8, w8, #0xffffff00
   2061c:	mov	w9, #0x9                   	// #9
   20620:	b	20680 <rpl_re_set_registers@@Base+0x1ad8>
   20624:	mov	w9, #0x402                 	// #1026
   20628:	and	x9, x20, x9
   2062c:	cmp	x9, #0x2
   20630:	b.ne	20704 <rpl_re_set_registers@@Base+0x1b5c>  // b.any
   20634:	mov	w9, #0x13                  	// #19
   20638:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   2063c:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20640:	and	w8, w8, #0xffffff00
   20644:	mov	w9, #0x200                 	// #512
   20648:	b	20680 <rpl_re_set_registers@@Base+0x1ad8>
   2064c:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20650:	mov	w9, #0x23                  	// #35
   20654:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   20658:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   2065c:	mov	w9, #0x21                  	// #33
   20660:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   20664:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20668:	and	w8, w8, #0xffffff00
   2066c:	mov	w9, #0x40                  	// #64
   20670:	b	20680 <rpl_re_set_registers@@Base+0x1ad8>
   20674:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20678:	and	w8, w8, #0xffffff00
   2067c:	mov	w9, #0x100                 	// #256
   20680:	orr	w8, w8, #0xc
   20684:	str	w9, [x19]
   20688:	str	w8, [x19, #8]
   2068c:	mov	w0, #0x2                   	// #2
   20690:	b	20564 <rpl_re_set_registers@@Base+0x19bc>
   20694:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   20698:	mov	w9, #0x22                  	// #34
   2069c:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   206a0:	tbnz	w20, #19, 20704 <rpl_re_set_registers@@Base+0x1b5c>
   206a4:	and	w8, w8, #0xffffff00
   206a8:	orr	w8, w8, #0x20
   206ac:	b	206dc <rpl_re_set_registers@@Base+0x1b34>
   206b0:	mov	w9, #0x1200                	// #4608
   206b4:	and	x9, x20, x9
   206b8:	cmp	x9, #0x200
   206bc:	b.ne	20704 <rpl_re_set_registers@@Base+0x1b5c>  // b.any
   206c0:	mov	w9, #0x17                  	// #23
   206c4:	b	206d8 <rpl_re_set_registers@@Base+0x1b30>
   206c8:	mov	w9, #0x8400                	// #33792
   206cc:	tst	x20, x9
   206d0:	b.ne	20704 <rpl_re_set_registers@@Base+0x1b5c>  // b.any
   206d4:	mov	w9, #0xa                   	// #10
   206d8:	bfxil	w8, w9, #0, #8
   206dc:	str	w8, [x23]
   206e0:	mov	w0, #0x2                   	// #2
   206e4:	b	20564 <rpl_re_set_registers@@Base+0x19bc>
   206e8:	mov	w9, #0x1200                	// #4608
   206ec:	and	x9, x20, x9
   206f0:	cmp	x9, #0x200
   206f4:	b.ne	20704 <rpl_re_set_registers@@Base+0x1b5c>  // b.any
   206f8:	and	w8, w8, #0xffffff00
   206fc:	orr	w8, w8, #0x18
   20700:	b	206dc <rpl_re_set_registers@@Base+0x1b34>
   20704:	mov	w0, #0x2                   	// #2
   20708:	b	20564 <rpl_re_set_registers@@Base+0x19bc>
   2070c:	ldrb	w8, [x0, #139]
   20710:	cbnz	w8, 20730 <rpl_re_set_registers@@Base+0x1b88>
   20714:	ldr	x8, [x0, #8]
   20718:	ldr	x9, [x0, #72]
   2071c:	add	x8, x9, x8
   20720:	add	x8, x8, #0x1
   20724:	ldrb	w8, [x8]
   20728:	mov	w0, w8
   2072c:	ret
   20730:	ldr	w8, [x0, #144]
   20734:	cmp	w8, #0x2
   20738:	b.lt	20770 <rpl_re_set_registers@@Base+0x1bc8>  // b.tstop
   2073c:	ldr	x10, [x0, #72]
   20740:	ldr	x9, [x0, #16]
   20744:	add	x8, x10, #0x1
   20748:	ldr	w11, [x9, x8, lsl #2]
   2074c:	cmn	w11, #0x1
   20750:	b.eq	207b4 <rpl_re_set_registers@@Base+0x1c0c>  // b.none
   20754:	ldr	x11, [x0, #48]
   20758:	add	x10, x10, #0x2
   2075c:	cmp	x11, x10
   20760:	b.eq	20770 <rpl_re_set_registers@@Base+0x1bc8>  // b.none
   20764:	ldr	w9, [x9, x10, lsl #2]
   20768:	cmn	w9, #0x1
   2076c:	b.eq	207b4 <rpl_re_set_registers@@Base+0x1c0c>  // b.none
   20770:	ldr	x8, [x0, #72]
   20774:	ldrb	w10, [x0, #140]
   20778:	add	x9, x8, #0x1
   2077c:	cbz	w10, 2078c <rpl_re_set_registers@@Base+0x1be4>
   20780:	ldr	x8, [x0, #24]
   20784:	ldr	x8, [x8, x9, lsl #3]
   20788:	b	20790 <rpl_re_set_registers@@Base+0x1be8>
   2078c:	mov	x8, x9
   20790:	ldr	x11, [x0, #40]
   20794:	ldr	x12, [x0]
   20798:	add	x8, x11, x8
   2079c:	ldrsb	w8, [x12, x8]
   207a0:	cbz	w10, 20728 <rpl_re_set_registers@@Base+0x1b80>
   207a4:	tbz	w8, #31, 20728 <rpl_re_set_registers@@Base+0x1b80>
   207a8:	ldr	x8, [x0, #8]
   207ac:	add	x8, x8, x9
   207b0:	b	20724 <rpl_re_set_registers@@Base+0x1b7c>
   207b4:	ldr	x9, [x0, #8]
   207b8:	add	x8, x9, x8
   207bc:	b	20724 <rpl_re_set_registers@@Base+0x1b7c>
   207c0:	ldr	w8, [x0, #144]
   207c4:	cmp	w8, #0x1
   207c8:	b.ne	207d8 <rpl_re_set_registers@@Base+0x1c30>  // b.any
   207cc:	ldr	x8, [x0, #8]
   207d0:	ldrb	w0, [x8, x1]
   207d4:	ret
   207d8:	ldr	x8, [x0, #16]
   207dc:	ldr	w0, [x8, x1, lsl #2]
   207e0:	ret
   207e4:	stp	x29, x30, [sp, #-96]!
   207e8:	stp	x28, x27, [sp, #16]
   207ec:	stp	x26, x25, [sp, #32]
   207f0:	stp	x24, x23, [sp, #48]
   207f4:	stp	x22, x21, [sp, #64]
   207f8:	stp	x20, x19, [sp, #80]
   207fc:	ldr	x25, [x1]
   20800:	mov	x29, sp
   20804:	mov	x20, x5
   20808:	mov	x21, x4
   2080c:	mov	x22, x3
   20810:	mov	x23, x2
   20814:	mov	x24, x1
   20818:	mov	x26, x0
   2081c:	bl	209ec <rpl_re_set_registers@@Base+0x1e44>
   20820:	mov	x19, x0
   20824:	cbnz	x0, 20830 <rpl_re_set_registers@@Base+0x1c88>
   20828:	ldr	w8, [x20]
   2082c:	cbnz	w8, 208ec <rpl_re_set_registers@@Base+0x1d44>
   20830:	adrp	x27, 20000 <rpl_re_set_registers@@Base+0x1458>
   20834:	add	x27, x27, #0x9d0
   20838:	b	20844 <rpl_re_set_registers@@Base+0x1c9c>
   2083c:	cmp	x19, #0x0
   20840:	csel	x19, x28, x19, eq  // eq = none
   20844:	ldrb	w8, [x23, #8]
   20848:	orr	w9, w8, #0x8
   2084c:	cmp	w9, #0xa
   20850:	b.eq	208f0 <rpl_re_set_registers@@Base+0x1d48>  // b.none
   20854:	cbz	x21, 20860 <rpl_re_set_registers@@Base+0x1cb8>
   20858:	cmp	w8, #0x9
   2085c:	b.eq	208f0 <rpl_re_set_registers@@Base+0x1d48>  // b.none
   20860:	mov	x0, x26
   20864:	mov	x1, x24
   20868:	mov	x2, x23
   2086c:	mov	x3, x22
   20870:	mov	x4, x21
   20874:	mov	x5, x20
   20878:	bl	209ec <rpl_re_set_registers@@Base+0x1e44>
   2087c:	mov	x28, x0
   20880:	cbnz	x0, 2088c <rpl_re_set_registers@@Base+0x1ce4>
   20884:	ldr	w8, [x20]
   20888:	cbnz	w8, 20910 <rpl_re_set_registers@@Base+0x1d68>
   2088c:	cbz	x19, 2083c <rpl_re_set_registers@@Base+0x1c94>
   20890:	cbz	x28, 2083c <rpl_re_set_registers@@Base+0x1c94>
   20894:	mov	w3, #0x10                  	// #16
   20898:	mov	x0, x25
   2089c:	mov	x1, x19
   208a0:	mov	x2, x28
   208a4:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   208a8:	cbz	x0, 208bc <rpl_re_set_registers@@Base+0x1d14>
   208ac:	mov	w8, #0x1                   	// #1
   208b0:	mov	x19, x0
   208b4:	tbnz	w8, #0, 20844 <rpl_re_set_registers@@Base+0x1c9c>
   208b8:	b	208ec <rpl_re_set_registers@@Base+0x1d44>
   208bc:	mov	x0, x28
   208c0:	mov	x1, x27
   208c4:	mov	x2, xzr
   208c8:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   208cc:	mov	x0, x19
   208d0:	mov	x1, x27
   208d4:	mov	x2, xzr
   208d8:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   208dc:	mov	w8, wzr
   208e0:	mov	w9, #0xc                   	// #12
   208e4:	str	w9, [x20]
   208e8:	tbnz	w8, #0, 20844 <rpl_re_set_registers@@Base+0x1c9c>
   208ec:	mov	x19, xzr
   208f0:	mov	x0, x19
   208f4:	ldp	x20, x19, [sp, #80]
   208f8:	ldp	x22, x21, [sp, #64]
   208fc:	ldp	x24, x23, [sp, #48]
   20900:	ldp	x26, x25, [sp, #32]
   20904:	ldp	x28, x27, [sp, #16]
   20908:	ldp	x29, x30, [sp], #96
   2090c:	ret
   20910:	cbz	x19, 208f0 <rpl_re_set_registers@@Base+0x1d48>
   20914:	adrp	x1, 20000 <rpl_re_set_registers@@Base+0x1458>
   20918:	add	x1, x1, #0x9d0
   2091c:	mov	x0, x19
   20920:	mov	x2, xzr
   20924:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   20928:	b	208ec <rpl_re_set_registers@@Base+0x1d44>
   2092c:	stp	x29, x30, [sp, #-64]!
   20930:	stp	x20, x19, [sp, #48]
   20934:	mov	x19, x2
   20938:	mov	x20, x1
   2093c:	str	x23, [sp, #16]
   20940:	stp	x22, x21, [sp, #32]
   20944:	mov	x29, sp
   20948:	mov	x22, x0
   2094c:	ldr	x0, [x0, #8]
   20950:	cbnz	x0, 20948 <rpl_re_set_registers@@Base+0x1da0>
   20954:	ldr	x8, [x22, #16]
   20958:	cbz	x8, 20978 <rpl_re_set_registers@@Base+0x1dd0>
   2095c:	cbnz	x0, 20948 <rpl_re_set_registers@@Base+0x1da0>
   20960:	ldr	x0, [x22, #16]
   20964:	b	20948 <rpl_re_set_registers@@Base+0x1da0>
   20968:	mov	w8, wzr
   2096c:	mov	w21, w0
   20970:	cbnz	w8, 209a4 <rpl_re_set_registers@@Base+0x1dfc>
   20974:	b	209b8 <rpl_re_set_registers@@Base+0x1e10>
   20978:	mov	x0, x19
   2097c:	mov	x1, x22
   20980:	blr	x20
   20984:	cbnz	w0, 20968 <rpl_re_set_registers@@Base+0x1dc0>
   20988:	ldr	x9, [x22]
   2098c:	cmp	x9, #0x0
   20990:	cset	w8, ne  // ne = any
   20994:	csel	x23, x23, x22, eq  // eq = none
   20998:	csel	x22, x22, x9, eq  // eq = none
   2099c:	csel	w21, wzr, w21, eq  // eq = none
   209a0:	cbz	w8, 209b8 <rpl_re_set_registers@@Base+0x1e10>
   209a4:	ldr	x0, [x22, #16]
   209a8:	cmp	x0, x23
   209ac:	b.eq	20978 <rpl_re_set_registers@@Base+0x1dd0>  // b.none
   209b0:	cbz	x0, 20978 <rpl_re_set_registers@@Base+0x1dd0>
   209b4:	b	20948 <rpl_re_set_registers@@Base+0x1da0>
   209b8:	mov	w0, w21
   209bc:	ldp	x20, x19, [sp, #48]
   209c0:	ldp	x22, x21, [sp, #32]
   209c4:	ldr	x23, [sp, #16]
   209c8:	ldp	x29, x30, [sp], #64
   209cc:	ret
   209d0:	stp	x29, x30, [sp, #-16]!
   209d4:	add	x0, x1, #0x28
   209d8:	mov	x29, sp
   209dc:	bl	1ebd8 <rpl_re_set_registers@@Base+0x30>
   209e0:	mov	w0, wzr
   209e4:	ldp	x29, x30, [sp], #16
   209e8:	ret
   209ec:	stp	x29, x30, [sp, #-96]!
   209f0:	stp	x28, x27, [sp, #16]
   209f4:	stp	x26, x25, [sp, #32]
   209f8:	stp	x24, x23, [sp, #48]
   209fc:	stp	x22, x21, [sp, #64]
   20a00:	stp	x20, x19, [sp, #80]
   20a04:	ldr	w8, [x2, #8]
   20a08:	mov	x24, xzr
   20a0c:	mov	x29, sp
   20a10:	and	w9, w8, #0xff
   20a14:	sub	w9, w9, #0x1
   20a18:	cmp	w9, #0x23
   20a1c:	b.hi	20dc4 <rpl_re_set_registers@@Base+0x221c>  // b.pmore
   20a20:	ldr	x23, [x1]
   20a24:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   20a28:	add	x10, x10, #0x809
   20a2c:	adr	x11, 20a54 <rpl_re_set_registers@@Base+0x1eac>
   20a30:	ldrb	w12, [x10, x9]
   20a34:	add	x11, x11, x12, lsl #2
   20a38:	mov	x19, x5
   20a3c:	mov	x25, x4
   20a40:	mov	x20, x3
   20a44:	mov	x21, x2
   20a48:	mov	x26, x1
   20a4c:	mov	x22, x0
   20a50:	br	x11
   20a54:	tbnz	w20, #5, 20db0 <rpl_re_set_registers@@Base+0x2208>
   20a58:	tbnz	w20, #4, 20de4 <rpl_re_set_registers@@Base+0x223c>
   20a5c:	tbnz	w20, #17, 20ad0 <rpl_re_set_registers@@Base+0x1f28>
   20a60:	and	w9, w8, #0xff
   20a64:	cmp	w9, #0x9
   20a68:	b.ne	20ad0 <rpl_re_set_registers@@Base+0x1f28>  // b.any
   20a6c:	mov	w8, #0x10                  	// #16
   20a70:	b	20dbc <rpl_re_set_registers@@Base+0x2214>
   20a74:	ldr	x1, [x22, #120]
   20a78:	and	w8, w8, #0xff
   20a7c:	cmp	w8, #0x21
   20a80:	adrp	x2, 2d000 <vasnprintf@@Base+0x2ec4>
   20a84:	adrp	x3, 2b000 <vasnprintf@@Base+0xec4>
   20a88:	cset	w4, eq  // eq = none
   20a8c:	add	x2, x2, #0xa90
   20a90:	add	x3, x3, #0x72c
   20a94:	b	20ab8 <rpl_re_set_registers@@Base+0x1f10>
   20a98:	ldr	x1, [x22, #120]
   20a9c:	and	w8, w8, #0xff
   20aa0:	cmp	w8, #0x23
   20aa4:	adrp	x2, 2d000 <vasnprintf@@Base+0x2ec4>
   20aa8:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   20aac:	cset	w4, eq  // eq = none
   20ab0:	add	x2, x2, #0xa96
   20ab4:	add	x3, x3, #0x4fc
   20ab8:	mov	x0, x23
   20abc:	mov	x5, x19
   20ac0:	bl	21708 <rpl_re_set_registers@@Base+0x2b60>
   20ac4:	mov	x24, x0
   20ac8:	cbz	x0, 20cc8 <rpl_re_set_registers@@Base+0x2120>
   20acc:	b	20cd0 <rpl_re_set_registers@@Base+0x2128>
   20ad0:	and	w8, w8, #0xffffff00
   20ad4:	orr	w8, w8, #0x1
   20ad8:	mov	x0, x23
   20adc:	mov	x1, xzr
   20ae0:	mov	x2, xzr
   20ae4:	mov	x3, x21
   20ae8:	str	w8, [x21, #8]
   20aec:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20af0:	mov	x24, x0
   20af4:	cbnz	x0, 20cd0 <rpl_re_set_registers@@Base+0x2128>
   20af8:	b	20b9c <rpl_re_set_registers@@Base+0x1ff4>
   20afc:	mov	x0, x23
   20b00:	mov	x1, xzr
   20b04:	mov	x2, xzr
   20b08:	mov	x3, x21
   20b0c:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20b10:	mov	x24, x0
   20b14:	cbz	x0, 20b9c <rpl_re_set_registers@@Base+0x1ff4>
   20b18:	ldr	w8, [x23, #180]
   20b1c:	cmp	w8, #0x2
   20b20:	b.lt	20cd0 <rpl_re_set_registers@@Base+0x2128>  // b.tstop
   20b24:	ldr	x9, [x22, #104]
   20b28:	ldr	x8, [x22, #72]
   20b2c:	cmp	x9, x8
   20b30:	b.le	20cd0 <rpl_re_set_registers@@Base+0x2128>
   20b34:	ldr	x9, [x22, #48]
   20b38:	cmp	x8, x9
   20b3c:	b.eq	20cd0 <rpl_re_set_registers@@Base+0x2128>  // b.none
   20b40:	ldr	x9, [x22, #16]
   20b44:	ldr	w8, [x9, x8, lsl #2]
   20b48:	cmn	w8, #0x1
   20b4c:	b.ne	20cd0 <rpl_re_set_registers@@Base+0x2128>  // b.any
   20b50:	mov	x0, x21
   20b54:	mov	x1, x22
   20b58:	mov	x2, x20
   20b5c:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20b60:	mov	x0, x23
   20b64:	mov	x1, xzr
   20b68:	mov	x2, xzr
   20b6c:	mov	x3, x21
   20b70:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20b74:	mov	x25, x0
   20b78:	mov	w3, #0x10                  	// #16
   20b7c:	mov	x0, x23
   20b80:	mov	x1, x24
   20b84:	mov	x2, x25
   20b88:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   20b8c:	cbz	x25, 20b98 <rpl_re_set_registers@@Base+0x1ff0>
   20b90:	mov	x24, x0
   20b94:	cbnz	x0, 20b24 <rpl_re_set_registers@@Base+0x1f7c>
   20b98:	mov	x24, xzr
   20b9c:	mov	w8, #0xc                   	// #12
   20ba0:	str	w8, [x19]
   20ba4:	b	20dc4 <rpl_re_set_registers@@Base+0x221c>
   20ba8:	ldr	w8, [x21]
   20bac:	ldr	x9, [x23, #168]
   20bb0:	mov	w10, #0x1                   	// #1
   20bb4:	lsl	w8, w10, w8
   20bb8:	sxtw	x8, w8
   20bbc:	tst	x9, x8
   20bc0:	b.eq	20eb0 <rpl_re_set_registers@@Base+0x2308>  // b.none
   20bc4:	ldr	x9, [x23, #160]
   20bc8:	mov	x0, x23
   20bcc:	mov	x1, xzr
   20bd0:	mov	x2, xzr
   20bd4:	orr	x8, x9, x8
   20bd8:	mov	x3, x21
   20bdc:	str	x8, [x23, #160]
   20be0:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20be4:	mov	x24, x0
   20be8:	cbz	x0, 20b9c <rpl_re_set_registers@@Base+0x1ff4>
   20bec:	ldr	x8, [x23, #152]
   20bf0:	ldrb	w9, [x23, #176]
   20bf4:	add	x8, x8, #0x1
   20bf8:	orr	w9, w9, #0x2
   20bfc:	str	x8, [x23, #152]
   20c00:	strb	w9, [x23, #176]
   20c04:	b	20cd0 <rpl_re_set_registers@@Base+0x2128>
   20c08:	mov	x0, x23
   20c0c:	mov	x1, xzr
   20c10:	mov	x2, xzr
   20c14:	mov	x3, x21
   20c18:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20c1c:	mov	x24, x0
   20c20:	cbz	x0, 20b9c <rpl_re_set_registers@@Base+0x1ff4>
   20c24:	ldr	w8, [x23, #180]
   20c28:	cmp	w8, #0x2
   20c2c:	b.lt	20cd0 <rpl_re_set_registers@@Base+0x2128>  // b.tstop
   20c30:	ldrb	w8, [x23, #176]
   20c34:	orr	w8, w8, #0x2
   20c38:	strb	w8, [x23, #176]
   20c3c:	b	20cd0 <rpl_re_set_registers@@Base+0x2128>
   20c40:	add	x4, x25, #0x1
   20c44:	mov	x0, x22
   20c48:	mov	x1, x26
   20c4c:	mov	x2, x21
   20c50:	mov	x3, x20
   20c54:	mov	x5, x19
   20c58:	bl	20f60 <rpl_re_set_registers@@Base+0x23b8>
   20c5c:	mov	x24, x0
   20c60:	cbz	x0, 20cc8 <rpl_re_set_registers@@Base+0x2120>
   20c64:	b	20cd0 <rpl_re_set_registers@@Base+0x2128>
   20c68:	ldrh	w8, [x21]
   20c6c:	mov	w9, #0x30f                 	// #783
   20c70:	tst	w8, w9
   20c74:	b.eq	20c88 <rpl_re_set_registers@@Base+0x20e0>  // b.none
   20c78:	ldrb	w8, [x23, #176]
   20c7c:	tbnz	w8, #4, 20c88 <rpl_re_set_registers@@Base+0x20e0>
   20c80:	mov	x0, x23
   20c84:	bl	2163c <rpl_re_set_registers@@Base+0x2a94>
   20c88:	ldr	w8, [x21]
   20c8c:	cmp	w8, #0x100
   20c90:	b.eq	20e18 <rpl_re_set_registers@@Base+0x2270>  // b.none
   20c94:	cmp	w8, #0x200
   20c98:	b.ne	20e80 <rpl_re_set_registers@@Base+0x22d8>  // b.any
   20c9c:	mov	w24, #0xa                   	// #10
   20ca0:	mov	w8, #0x5                   	// #5
   20ca4:	b	20e20 <rpl_re_set_registers@@Base+0x2278>
   20ca8:	mov	x0, x22
   20cac:	mov	x1, x23
   20cb0:	mov	x2, x21
   20cb4:	mov	x3, x20
   20cb8:	mov	x4, x19
   20cbc:	bl	21098 <rpl_re_set_registers@@Base+0x24f0>
   20cc0:	mov	x24, x0
   20cc4:	cbnz	x0, 20cd0 <rpl_re_set_registers@@Base+0x2128>
   20cc8:	ldr	w8, [x19]
   20ccc:	cbnz	w8, 20da4 <rpl_re_set_registers@@Base+0x21fc>
   20cd0:	mov	x0, x21
   20cd4:	mov	x1, x22
   20cd8:	mov	x2, x20
   20cdc:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20ce0:	mov	w28, #0x800                 	// #2048
   20ce4:	mov	w27, #0x1                   	// #1
   20ce8:	movk	w28, #0x8c, lsl #16
   20cec:	mov	w25, #0xd                   	// #13
   20cf0:	b	20d00 <rpl_re_set_registers@@Base+0x2158>
   20cf4:	mov	w8, #0x1                   	// #1
   20cf8:	mov	x24, x26
   20cfc:	tbz	w8, #0, 20da4 <rpl_re_set_registers@@Base+0x21fc>
   20d00:	ldrb	w8, [x21, #8]
   20d04:	cmp	w8, #0x17
   20d08:	b.hi	20dc4 <rpl_re_set_registers@@Base+0x221c>  // b.pmore
   20d0c:	lsl	w8, w27, w8
   20d10:	tst	w8, w28
   20d14:	b.eq	20dc4 <rpl_re_set_registers@@Base+0x221c>  // b.none
   20d18:	mov	x0, x24
   20d1c:	mov	x1, x22
   20d20:	mov	x2, x23
   20d24:	mov	x3, x21
   20d28:	mov	x4, x20
   20d2c:	mov	x5, x19
   20d30:	bl	218e4 <rpl_re_set_registers@@Base+0x2d3c>
   20d34:	mov	x26, x0
   20d38:	cbnz	x0, 20d44 <rpl_re_set_registers@@Base+0x219c>
   20d3c:	ldr	w8, [x19]
   20d40:	cbnz	w8, 20d80 <rpl_re_set_registers@@Base+0x21d8>
   20d44:	tbz	w20, #24, 20cf4 <rpl_re_set_registers@@Base+0x214c>
   20d48:	ldrb	w8, [x21, #8]
   20d4c:	cmp	w8, #0x17
   20d50:	b.eq	20d5c <rpl_re_set_registers@@Base+0x21b4>  // b.none
   20d54:	cmp	w8, #0xb
   20d58:	b.ne	20cf4 <rpl_re_set_registers@@Base+0x214c>  // b.any
   20d5c:	cbz	x26, 20d74 <rpl_re_set_registers@@Base+0x21cc>
   20d60:	adrp	x1, 20000 <rpl_re_set_registers@@Base+0x1458>
   20d64:	mov	x0, x26
   20d68:	add	x1, x1, #0x9d0
   20d6c:	mov	x2, xzr
   20d70:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   20d74:	mov	w8, wzr
   20d78:	str	w25, [x19]
   20d7c:	b	20cf8 <rpl_re_set_registers@@Base+0x2150>
   20d80:	cbz	x24, 20d98 <rpl_re_set_registers@@Base+0x21f0>
   20d84:	adrp	x1, 20000 <rpl_re_set_registers@@Base+0x1458>
   20d88:	mov	x0, x24
   20d8c:	add	x1, x1, #0x9d0
   20d90:	mov	x2, xzr
   20d94:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   20d98:	mov	w8, wzr
   20d9c:	mov	x26, x24
   20da0:	b	20cf8 <rpl_re_set_registers@@Base+0x2150>
   20da4:	mov	x24, xzr
   20da8:	b	20dc4 <rpl_re_set_registers@@Base+0x221c>
   20dac:	tbz	w20, #24, 20a54 <rpl_re_set_registers@@Base+0x1eac>
   20db0:	mov	w8, #0xd                   	// #13
   20db4:	b	20dbc <rpl_re_set_registers@@Base+0x2214>
   20db8:	mov	w8, #0x5                   	// #5
   20dbc:	mov	x24, xzr
   20dc0:	str	w8, [x19]
   20dc4:	mov	x0, x24
   20dc8:	ldp	x20, x19, [sp, #80]
   20dcc:	ldp	x22, x21, [sp, #64]
   20dd0:	ldp	x24, x23, [sp, #48]
   20dd4:	ldp	x26, x25, [sp, #32]
   20dd8:	ldp	x28, x27, [sp, #16]
   20ddc:	ldp	x29, x30, [sp], #96
   20de0:	ret
   20de4:	mov	x0, x21
   20de8:	mov	x1, x22
   20dec:	mov	x2, x20
   20df0:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20df4:	mov	x0, x22
   20df8:	mov	x1, x26
   20dfc:	mov	x2, x21
   20e00:	mov	x3, x20
   20e04:	mov	x4, x25
   20e08:	mov	x5, x19
   20e0c:	bl	209ec <rpl_re_set_registers@@Base+0x1e44>
   20e10:	mov	x24, x0
   20e14:	b	20dc4 <rpl_re_set_registers@@Base+0x221c>
   20e18:	mov	w24, #0x9                   	// #9
   20e1c:	mov	w8, #0x6                   	// #6
   20e20:	mov	x0, x23
   20e24:	mov	x1, xzr
   20e28:	mov	x2, xzr
   20e2c:	mov	x3, x21
   20e30:	str	w8, [x21]
   20e34:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20e38:	mov	x26, x0
   20e3c:	mov	x0, x23
   20e40:	mov	x1, xzr
   20e44:	mov	x2, xzr
   20e48:	mov	x3, x21
   20e4c:	str	w24, [x21]
   20e50:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20e54:	mov	x25, x0
   20e58:	mov	w3, #0xa                   	// #10
   20e5c:	mov	x0, x23
   20e60:	mov	x1, x26
   20e64:	mov	x2, x25
   20e68:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   20e6c:	cbz	x26, 20b98 <rpl_re_set_registers@@Base+0x1ff0>
   20e70:	cbz	x25, 20b98 <rpl_re_set_registers@@Base+0x1ff0>
   20e74:	mov	x24, x0
   20e78:	cbnz	x0, 20e9c <rpl_re_set_registers@@Base+0x22f4>
   20e7c:	b	20b98 <rpl_re_set_registers@@Base+0x1ff0>
   20e80:	mov	x0, x23
   20e84:	mov	x1, xzr
   20e88:	mov	x2, xzr
   20e8c:	mov	x3, x21
   20e90:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   20e94:	mov	x24, x0
   20e98:	cbz	x0, 20b9c <rpl_re_set_registers@@Base+0x1ff4>
   20e9c:	mov	x0, x21
   20ea0:	mov	x1, x22
   20ea4:	mov	x2, x20
   20ea8:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20eac:	b	20dc4 <rpl_re_set_registers@@Base+0x221c>
   20eb0:	mov	w8, #0x6                   	// #6
   20eb4:	b	20dbc <rpl_re_set_registers@@Base+0x2214>
   20eb8:	stp	x29, x30, [sp, #-48]!
   20ebc:	stp	x22, x21, [sp, #16]
   20ec0:	stp	x20, x19, [sp, #32]
   20ec4:	ldr	w8, [x0, #128]
   20ec8:	mov	x21, x3
   20ecc:	mov	x19, x2
   20ed0:	mov	x22, x0
   20ed4:	cmp	w8, #0xf
   20ed8:	mov	x20, x1
   20edc:	mov	x29, sp
   20ee0:	b.eq	20f40 <rpl_re_set_registers@@Base+0x2398>  // b.none
   20ee4:	ldrsw	x8, [x22, #128]
   20ee8:	ldr	x9, [x22, #112]
   20eec:	add	w10, w8, #0x1
   20ef0:	add	x0, x9, x8, lsl #6
   20ef4:	str	w10, [x22, #128]
   20ef8:	str	xzr, [x0, #8]!
   20efc:	stp	x20, x19, [x0, #8]
   20f00:	ldr	q0, [x21]
   20f04:	mov	x9, #0xffffffffffffffff    	// #-1
   20f08:	stp	xzr, xzr, [x0, #24]
   20f0c:	str	x9, [x0, #56]
   20f10:	stur	q0, [x0, #40]
   20f14:	ldr	w8, [x0, #48]
   20f18:	and	w8, w8, #0xfff3ffff
   20f1c:	str	w8, [x0, #48]
   20f20:	cbz	x20, 20f28 <rpl_re_set_registers@@Base+0x2380>
   20f24:	str	x0, [x20]
   20f28:	cbz	x19, 20f30 <rpl_re_set_registers@@Base+0x2388>
   20f2c:	str	x0, [x19]
   20f30:	ldp	x20, x19, [sp, #32]
   20f34:	ldp	x22, x21, [sp, #16]
   20f38:	ldp	x29, x30, [sp], #48
   20f3c:	ret
   20f40:	mov	w0, #0x3c8                 	// #968
   20f44:	bl	abc0 <malloc@plt>
   20f48:	cbz	x0, 20f30 <rpl_re_set_registers@@Base+0x2388>
   20f4c:	ldr	x8, [x22, #112]
   20f50:	str	x8, [x0]
   20f54:	str	x0, [x22, #112]
   20f58:	str	wzr, [x22, #128]
   20f5c:	b	20ee4 <rpl_re_set_registers@@Base+0x233c>
   20f60:	stp	x29, x30, [sp, #-80]!
   20f64:	stp	x26, x25, [sp, #16]
   20f68:	stp	x24, x23, [sp, #32]
   20f6c:	stp	x22, x21, [sp, #48]
   20f70:	stp	x20, x19, [sp, #64]
   20f74:	ldr	x26, [x1, #48]
   20f78:	ldr	x20, [x1]
   20f7c:	mov	x21, x2
   20f80:	mov	x25, x0
   20f84:	add	x8, x26, #0x1
   20f88:	mov	x24, x1
   20f8c:	str	x8, [x1, #48]
   20f90:	orr	x2, x3, #0x800000
   20f94:	mov	x0, x21
   20f98:	mov	x1, x25
   20f9c:	mov	x29, sp
   20fa0:	mov	x19, x5
   20fa4:	mov	x22, x4
   20fa8:	mov	x23, x3
   20fac:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   20fb0:	ldrb	w8, [x21, #8]
   20fb4:	cmp	w8, #0x9
   20fb8:	b.ne	20fc4 <rpl_re_set_registers@@Base+0x241c>  // b.any
   20fbc:	mov	x1, xzr
   20fc0:	b	21000 <rpl_re_set_registers@@Base+0x2458>
   20fc4:	mov	x0, x25
   20fc8:	mov	x1, x24
   20fcc:	mov	x2, x21
   20fd0:	mov	x3, x23
   20fd4:	mov	x4, x22
   20fd8:	mov	x5, x19
   20fdc:	bl	2007c <rpl_re_set_registers@@Base+0x14d4>
   20fe0:	ldr	w8, [x19]
   20fe4:	mov	x1, x0
   20fe8:	cbnz	w8, 20ff8 <rpl_re_set_registers@@Base+0x2450>
   20fec:	ldrb	w8, [x21, #8]
   20ff0:	cmp	w8, #0x9
   20ff4:	b.ne	2105c <rpl_re_set_registers@@Base+0x24b4>  // b.any
   20ff8:	ldr	w8, [x19]
   20ffc:	cbnz	w8, 21090 <rpl_re_set_registers@@Base+0x24e8>
   21000:	cmp	x26, #0x8
   21004:	b.hi	21020 <rpl_re_set_registers@@Base+0x2478>  // b.pmore
   21008:	ldr	x8, [x20, #168]
   2100c:	mov	w9, #0x1                   	// #1
   21010:	lsl	w9, w9, w26
   21014:	sxtw	x9, w9
   21018:	orr	x8, x8, x9
   2101c:	str	x8, [x20, #168]
   21020:	mov	w3, #0x11                  	// #17
   21024:	mov	x0, x20
   21028:	mov	x2, xzr
   2102c:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21030:	cbz	x0, 21050 <rpl_re_set_registers@@Base+0x24a8>
   21034:	str	x26, [x0, #40]
   21038:	ldp	x20, x19, [sp, #64]
   2103c:	ldp	x22, x21, [sp, #48]
   21040:	ldp	x24, x23, [sp, #32]
   21044:	ldp	x26, x25, [sp, #16]
   21048:	ldp	x29, x30, [sp], #80
   2104c:	ret
   21050:	mov	w8, #0xc                   	// #12
   21054:	str	w8, [x19]
   21058:	b	21038 <rpl_re_set_registers@@Base+0x2490>
   2105c:	cbz	x1, 21080 <rpl_re_set_registers@@Base+0x24d8>
   21060:	adrp	x8, 20000 <rpl_re_set_registers@@Base+0x1458>
   21064:	add	x8, x8, #0x9d0
   21068:	mov	x0, x1
   2106c:	mov	x21, x1
   21070:	mov	x1, x8
   21074:	mov	x2, xzr
   21078:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   2107c:	mov	x1, x21
   21080:	mov	w8, #0x8                   	// #8
   21084:	str	w8, [x19]
   21088:	ldr	w8, [x19]
   2108c:	cbz	w8, 21000 <rpl_re_set_registers@@Base+0x2458>
   21090:	mov	x0, xzr
   21094:	b	21038 <rpl_re_set_registers@@Base+0x2490>
   21098:	sub	sp, sp, #0x100
   2109c:	stp	x29, x30, [sp, #160]
   210a0:	stp	x24, x23, [sp, #208]
   210a4:	stp	x20, x19, [sp, #240]
   210a8:	add	x29, sp, #0xa0
   210ac:	mov	x19, x1
   210b0:	mov	x23, x0
   210b4:	mov	w0, #0x20                  	// #32
   210b8:	mov	w1, #0x1                   	// #1
   210bc:	stp	x28, x27, [sp, #176]
   210c0:	stp	x26, x25, [sp, #192]
   210c4:	stp	x22, x21, [sp, #224]
   210c8:	str	x4, [sp, #24]
   210cc:	mov	x24, x3
   210d0:	mov	x25, x2
   210d4:	stp	xzr, xzr, [x29, #-16]
   210d8:	bl	ae10 <calloc@plt>
   210dc:	mov	x20, x0
   210e0:	mov	w0, #0x50                  	// #80
   210e4:	mov	w1, #0x1                   	// #1
   210e8:	bl	ae10 <calloc@plt>
   210ec:	mov	x21, x0
   210f0:	cbz	x20, 215e0 <rpl_re_set_registers@@Base+0x2a38>
   210f4:	cbz	x21, 215e0 <rpl_re_set_registers@@Base+0x2a38>
   210f8:	mov	x0, x25
   210fc:	mov	x1, x23
   21100:	mov	x2, x24
   21104:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   21108:	ldrb	w8, [x25, #8]
   2110c:	mov	w26, w0
   21110:	cmp	w8, #0x19
   21114:	b.eq	21128 <rpl_re_set_registers@@Base+0x2580>  // b.none
   21118:	cmp	w8, #0x2
   2111c:	b.eq	21550 <rpl_re_set_registers@@Base+0x29a8>  // b.none
   21120:	str	wzr, [sp, #12]
   21124:	b	21178 <rpl_re_set_registers@@Base+0x25d0>
   21128:	ldrb	w8, [x21, #32]
   2112c:	orr	w8, w8, #0x1
   21130:	strb	w8, [x21, #32]
   21134:	tbz	w24, #8, 21144 <rpl_re_set_registers@@Base+0x259c>
   21138:	mov	w1, #0xa                   	// #10
   2113c:	mov	x0, x20
   21140:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   21144:	ldr	x8, [x23, #72]
   21148:	mov	x0, x25
   2114c:	mov	x1, x23
   21150:	mov	x2, x24
   21154:	add	x8, x8, w26, sxtw
   21158:	str	x8, [x23, #72]
   2115c:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   21160:	ldrb	w8, [x25, #8]
   21164:	cmp	w8, #0x2
   21168:	b.eq	21550 <rpl_re_set_registers@@Base+0x29a8>  // b.none
   2116c:	mov	w26, w0
   21170:	mov	w8, #0x1                   	// #1
   21174:	str	w8, [sp, #12]
   21178:	ldr	w8, [x25, #8]
   2117c:	and	w9, w8, #0xff
   21180:	cmp	w9, #0x15
   21184:	b.ne	21194 <rpl_re_set_registers@@Base+0x25ec>  // b.any
   21188:	and	w8, w8, #0xffffff00
   2118c:	orr	w8, w8, #0x1
   21190:	str	w8, [x25, #8]
   21194:	add	x28, sp, #0x50
   21198:	mov	w27, #0x3                   	// #3
   2119c:	mov	w22, #0x1                   	// #1
   211a0:	str	xzr, [sp, #16]
   211a4:	b	211b4 <rpl_re_set_registers@@Base+0x260c>
   211a8:	mov	w22, wzr
   211ac:	mov	w8, #0x4                   	// #4
   211b0:	cbnz	w8, 21430 <rpl_re_set_registers@@Base+0x2888>
   211b4:	and	w5, w22, #0x1
   211b8:	sub	x0, x29, #0x20
   211bc:	mov	x1, x23
   211c0:	mov	x2, x25
   211c4:	mov	w3, w26
   211c8:	mov	x4, x24
   211cc:	stur	x28, [x29, #-24]
   211d0:	stur	w27, [x29, #-32]
   211d4:	bl	21d90 <rpl_re_set_registers@@Base+0x31e8>
   211d8:	cbnz	w0, 213e4 <rpl_re_set_registers@@Base+0x283c>
   211dc:	mov	x0, x25
   211e0:	mov	x1, x23
   211e4:	mov	x2, x24
   211e8:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   211ec:	ldur	w22, [x29, #-32]
   211f0:	mov	w26, w0
   211f4:	mov	w3, wzr
   211f8:	cmp	w22, #0x2
   211fc:	b.eq	2122c <rpl_re_set_registers@@Base+0x2684>  // b.none
   21200:	cmp	w22, #0x4
   21204:	mov	w8, w3
   21208:	b.eq	21230 <rpl_re_set_registers@@Base+0x2688>  // b.none
   2120c:	ldrb	w8, [x25, #8]
   21210:	cmp	w8, #0x16
   21214:	b.eq	212f4 <rpl_re_set_registers@@Base+0x274c>  // b.none
   21218:	cmp	w8, #0x2
   2121c:	b.eq	213bc <rpl_re_set_registers@@Base+0x2814>  // b.none
   21220:	mov	w3, wzr
   21224:	mov	w8, wzr
   21228:	b	21230 <rpl_re_set_registers@@Base+0x2688>
   2122c:	mov	w8, w3
   21230:	cbz	w8, 212c0 <rpl_re_set_registers@@Base+0x2718>
   21234:	add	x8, sp, #0x30
   21238:	sub	x0, x29, #0x30
   2123c:	add	x2, sp, #0x20
   21240:	mov	w5, #0x1                   	// #1
   21244:	mov	x1, x23
   21248:	mov	x4, x24
   2124c:	stur	x8, [x29, #-40]
   21250:	stur	w27, [x29, #-48]
   21254:	bl	21d90 <rpl_re_set_registers@@Base+0x31e8>
   21258:	cbnz	w0, 213e0 <rpl_re_set_registers@@Base+0x2838>
   2125c:	mov	x0, x25
   21260:	mov	x1, x23
   21264:	mov	x2, x24
   21268:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   2126c:	ldr	w8, [x19, #180]
   21270:	mov	w26, w0
   21274:	sub	x3, x29, #0x8
   21278:	sub	x4, x29, #0x20
   2127c:	cmp	w8, #0x1
   21280:	csel	x2, x21, xzr, gt
   21284:	sub	x5, x29, #0x30
   21288:	mov	x0, x24
   2128c:	mov	x1, x20
   21290:	bl	21ea8 <rpl_re_set_registers@@Base+0x3300>
   21294:	ldr	x8, [sp, #24]
   21298:	str	w0, [x8]
   2129c:	cbnz	w0, 213d4 <rpl_re_set_registers@@Base+0x282c>
   212a0:	ldrb	w8, [x25, #8]
   212a4:	cmp	w8, #0x15
   212a8:	b.eq	211a8 <rpl_re_set_registers@@Base+0x2600>  // b.none
   212ac:	cmp	w8, #0x2
   212b0:	b.eq	213bc <rpl_re_set_registers@@Base+0x2814>  // b.none
   212b4:	mov	w22, wzr
   212b8:	mov	w8, wzr
   212bc:	b	211b0 <rpl_re_set_registers@@Base+0x2608>
   212c0:	cmp	w22, #0x4
   212c4:	b.hi	2161c <rpl_re_set_registers@@Base+0x2a74>  // b.pmore
   212c8:	adrp	x11, 2d000 <vasnprintf@@Base+0x2ec4>
   212cc:	mov	w8, w22
   212d0:	add	x11, x11, #0x82d
   212d4:	adr	x9, 212e4 <rpl_re_set_registers@@Base+0x273c>
   212d8:	ldrb	w10, [x11, x8]
   212dc:	add	x9, x9, x10, lsl #2
   212e0:	br	x9
   212e4:	ldurb	w1, [x29, #-24]
   212e8:	mov	x0, x20
   212ec:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   212f0:	b	212a0 <rpl_re_set_registers@@Base+0x26f8>
   212f4:	ldr	x8, [x23, #72]
   212f8:	add	x0, sp, #0x20
   212fc:	mov	x1, x23
   21300:	mov	x2, x24
   21304:	add	x8, x8, w26, sxtw
   21308:	str	x8, [x23, #72]
   2130c:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   21310:	ldrb	w8, [sp, #40]
   21314:	mov	w3, w0
   21318:	cmp	w8, #0x15
   2131c:	b.eq	2139c <rpl_re_set_registers@@Base+0x27f4>  // b.none
   21320:	cmp	w8, #0x2
   21324:	b.eq	213bc <rpl_re_set_registers@@Base+0x2814>  // b.none
   21328:	mov	w8, #0x1                   	// #1
   2132c:	b	21230 <rpl_re_set_registers@@Base+0x2688>
   21330:	ldr	x0, [x23, #120]
   21334:	ldur	x4, [x29, #-24]
   21338:	sub	x3, x29, #0x10
   2133c:	mov	x1, x20
   21340:	mov	x2, x21
   21344:	mov	x5, x24
   21348:	bl	221ac <rpl_re_set_registers@@Base+0x3604>
   2134c:	b	21294 <rpl_re_set_registers@@Base+0x26ec>
   21350:	ldur	x1, [x29, #-24]
   21354:	mov	x0, x20
   21358:	bl	2211c <rpl_re_set_registers@@Base+0x3574>
   2135c:	b	21294 <rpl_re_set_registers@@Base+0x26ec>
   21360:	ldur	x1, [x29, #-24]
   21364:	mov	x0, x20
   21368:	bl	22164 <rpl_re_set_registers@@Base+0x35bc>
   2136c:	b	21294 <rpl_re_set_registers@@Base+0x26ec>
   21370:	ldr	x8, [x21, #40]
   21374:	ldr	x9, [sp, #16]
   21378:	cmp	x9, x8
   2137c:	b.eq	213f4 <rpl_re_set_registers@@Base+0x284c>  // b.none
   21380:	ldr	x8, [x21, #40]
   21384:	ldur	w9, [x29, #-24]
   21388:	ldr	x10, [x21]
   2138c:	add	x11, x8, #0x1
   21390:	str	x11, [x21, #40]
   21394:	str	w9, [x10, x8, lsl #2]
   21398:	b	212a0 <rpl_re_set_registers@@Base+0x26f8>
   2139c:	ldr	x9, [x23, #72]
   213a0:	neg	w10, w26
   213a4:	mov	w8, wzr
   213a8:	add	x9, x9, w10, sxtw
   213ac:	str	x9, [x23, #72]
   213b0:	mov	w9, #0x1                   	// #1
   213b4:	strb	w9, [x25, #8]
   213b8:	b	21230 <rpl_re_set_registers@@Base+0x2688>
   213bc:	ldr	x8, [sp, #24]
   213c0:	mov	w9, #0x7                   	// #7
   213c4:	mov	w22, wzr
   213c8:	str	w9, [x8]
   213cc:	mov	w8, #0x2                   	// #2
   213d0:	b	211b0 <rpl_re_set_registers@@Base+0x2608>
   213d4:	mov	w22, wzr
   213d8:	mov	w8, #0x2                   	// #2
   213dc:	b	211b0 <rpl_re_set_registers@@Base+0x2608>
   213e0:	mov	w22, wzr
   213e4:	ldr	x8, [sp, #24]
   213e8:	str	w0, [x8]
   213ec:	mov	w8, #0x2                   	// #2
   213f0:	b	211b0 <rpl_re_set_registers@@Base+0x2608>
   213f4:	ldr	x0, [x21]
   213f8:	mov	w9, #0x1                   	// #1
   213fc:	bfi	x9, x8, #1, #63
   21400:	lsl	x1, x9, #2
   21404:	str	x9, [sp, #16]
   21408:	bl	aea0 <realloc@plt>
   2140c:	cbz	x0, 21424 <rpl_re_set_registers@@Base+0x287c>
   21410:	mov	w8, wzr
   21414:	str	x0, [x21]
   21418:	cbz	w8, 21380 <rpl_re_set_registers@@Base+0x27d8>
   2141c:	mov	w22, wzr
   21420:	b	211b0 <rpl_re_set_registers@@Base+0x2608>
   21424:	mov	w8, #0x6                   	// #6
   21428:	cbnz	w8, 2141c <rpl_re_set_registers@@Base+0x2874>
   2142c:	b	21380 <rpl_re_set_registers@@Base+0x27d8>
   21430:	cmp	w8, #0x2
   21434:	b.eq	21558 <rpl_re_set_registers@@Base+0x29b0>  // b.none
   21438:	cmp	w8, #0x6
   2143c:	b.eq	2154c <rpl_re_set_registers@@Base+0x29a4>  // b.none
   21440:	cmp	w8, #0x4
   21444:	b.ne	21500 <rpl_re_set_registers@@Base+0x2958>  // b.any
   21448:	ldr	x8, [x23, #72]
   2144c:	add	x8, x8, w26, sxtw
   21450:	str	x8, [x23, #72]
   21454:	ldr	w8, [sp, #12]
   21458:	cbz	w8, 21464 <rpl_re_set_registers@@Base+0x28bc>
   2145c:	mov	x0, x20
   21460:	bl	22868 <rpl_re_set_registers@@Base+0x3cc0>
   21464:	ldr	w8, [x19, #180]
   21468:	cmp	w8, #0x2
   2146c:	b.lt	2147c <rpl_re_set_registers@@Base+0x28d4>  // b.tstop
   21470:	ldr	x1, [x19, #120]
   21474:	mov	x0, x20
   21478:	bl	22888 <rpl_re_set_registers@@Base+0x3ce0>
   2147c:	ldr	x8, [x21, #40]
   21480:	cbnz	x8, 2149c <rpl_re_set_registers@@Base+0x28f4>
   21484:	ldr	x8, [x21, #48]
   21488:	cbnz	x8, 2149c <rpl_re_set_registers@@Base+0x28f4>
   2148c:	ldr	x8, [x21, #56]
   21490:	cbnz	x8, 2149c <rpl_re_set_registers@@Base+0x28f4>
   21494:	ldr	x8, [x21, #64]
   21498:	cbz	x8, 21590 <rpl_re_set_registers@@Base+0x29e8>
   2149c:	ldrb	w8, [x19, #176]
   214a0:	add	x3, sp, #0x50
   214a4:	mov	x0, x19
   214a8:	mov	x1, xzr
   214ac:	orr	w8, w8, #0x2
   214b0:	strb	w8, [x19, #176]
   214b4:	ldr	w22, [sp, #88]
   214b8:	mov	w8, #0x6                   	// #6
   214bc:	mov	x2, xzr
   214c0:	strb	w8, [sp, #88]
   214c4:	str	x21, [sp, #80]
   214c8:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   214cc:	cbz	x0, 21610 <rpl_re_set_registers@@Base+0x2a68>
   214d0:	mov	x23, x0
   214d4:	mov	x9, xzr
   214d8:	and	w8, w22, #0xffffff00
   214dc:	ldr	x10, [x20, x9]
   214e0:	cbnz	x10, 21504 <rpl_re_set_registers@@Base+0x295c>
   214e4:	add	x9, x9, #0x8
   214e8:	cmp	x9, #0x20
   214ec:	b.ne	214dc <rpl_re_set_registers@@Base+0x2934>  // b.any
   214f0:	mov	x0, x20
   214f4:	bl	b1d0 <free@plt>
   214f8:	mov	x1, x23
   214fc:	b	21544 <rpl_re_set_registers@@Base+0x299c>
   21500:	b	2156c <rpl_re_set_registers@@Base+0x29c4>
   21504:	orr	w8, w8, #0x3
   21508:	add	x3, sp, #0x50
   2150c:	mov	x0, x19
   21510:	mov	x1, xzr
   21514:	mov	x2, xzr
   21518:	str	w8, [sp, #88]
   2151c:	str	x20, [sp, #80]
   21520:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   21524:	mov	x1, x0
   21528:	cbz	x0, 21604 <rpl_re_set_registers@@Base+0x2a5c>
   2152c:	mov	w3, #0xa                   	// #10
   21530:	mov	x0, x19
   21534:	mov	x2, x23
   21538:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   2153c:	mov	x1, x0
   21540:	cbz	x0, 21604 <rpl_re_set_registers@@Base+0x2a5c>
   21544:	mov	w8, wzr
   21548:	tbz	wzr, #0, 2156c <rpl_re_set_registers@@Base+0x29c4>
   2154c:	mov	w8, #0xc                   	// #12
   21550:	ldr	x9, [sp, #24]
   21554:	str	w8, [x9]
   21558:	mov	x0, x20
   2155c:	bl	b1d0 <free@plt>
   21560:	mov	x0, x21
   21564:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   21568:	mov	x1, xzr
   2156c:	ldp	x20, x19, [sp, #240]
   21570:	ldp	x22, x21, [sp, #224]
   21574:	ldp	x24, x23, [sp, #208]
   21578:	ldp	x26, x25, [sp, #192]
   2157c:	ldp	x28, x27, [sp, #176]
   21580:	ldp	x29, x30, [sp, #160]
   21584:	mov	x0, x1
   21588:	add	sp, sp, #0x100
   2158c:	ret
   21590:	ldr	w8, [x19, #180]
   21594:	cmp	w8, #0x2
   21598:	b.lt	215ac <rpl_re_set_registers@@Base+0x2a04>  // b.tstop
   2159c:	ldr	x8, [x21, #72]
   215a0:	cbnz	x8, 2149c <rpl_re_set_registers@@Base+0x28f4>
   215a4:	ldrb	w8, [x21, #32]
   215a8:	tbnz	w8, #0, 2149c <rpl_re_set_registers@@Base+0x28f4>
   215ac:	mov	x0, x21
   215b0:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   215b4:	mov	w8, #0x3                   	// #3
   215b8:	add	x3, sp, #0x50
   215bc:	mov	x0, x19
   215c0:	mov	x1, xzr
   215c4:	mov	x2, xzr
   215c8:	strb	w8, [sp, #88]
   215cc:	str	x20, [sp, #80]
   215d0:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   215d4:	mov	x1, x0
   215d8:	cbnz	x0, 2156c <rpl_re_set_registers@@Base+0x29c4>
   215dc:	b	2154c <rpl_re_set_registers@@Base+0x29a4>
   215e0:	mov	x0, x20
   215e4:	bl	b1d0 <free@plt>
   215e8:	mov	x0, x21
   215ec:	bl	b1d0 <free@plt>
   215f0:	ldr	x9, [sp, #24]
   215f4:	mov	w8, #0xc                   	// #12
   215f8:	mov	x1, xzr
   215fc:	str	w8, [x9]
   21600:	b	2156c <rpl_re_set_registers@@Base+0x29c4>
   21604:	mov	w8, #0x1                   	// #1
   21608:	tbnz	w8, #0, 2154c <rpl_re_set_registers@@Base+0x29a4>
   2160c:	b	2156c <rpl_re_set_registers@@Base+0x29c4>
   21610:	mov	w8, #0x1                   	// #1
   21614:	tbnz	w8, #0, 2154c <rpl_re_set_registers@@Base+0x29a4>
   21618:	b	2156c <rpl_re_set_registers@@Base+0x29c4>
   2161c:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   21620:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   21624:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   21628:	add	x0, x0, #0xd30
   2162c:	add	x1, x1, #0xa9c
   21630:	add	x3, x3, #0xaa8
   21634:	mov	w2, #0xced                 	// #3309
   21638:	bl	b6e0 <__assert_fail@plt>
   2163c:	stp	x29, x30, [sp, #-48]!
   21640:	stp	x20, x19, [sp, #32]
   21644:	ldrb	w8, [x0, #176]
   21648:	mov	x19, x0
   2164c:	str	x21, [sp, #16]
   21650:	mov	x29, sp
   21654:	orr	w9, w8, #0x10
   21658:	strb	w9, [x0, #176]
   2165c:	tbnz	w8, #3, 21688 <rpl_re_set_registers@@Base+0x2ae0>
   21660:	mov	x10, #0x7fffffe07fffffe     	// #576460743847706622
   21664:	mov	x9, #0x3ff000000000000     	// #287948901175001088
   21668:	movk	x10, #0x87ff, lsl #16
   2166c:	stp	x9, x10, [x19, #184]
   21670:	tbz	w8, #2, 21694 <rpl_re_set_registers@@Base+0x2aec>
   21674:	stp	xzr, xzr, [x19, #200]
   21678:	ldp	x20, x19, [sp, #32]
   2167c:	ldr	x21, [sp, #16]
   21680:	ldp	x29, x30, [sp], #48
   21684:	ret
   21688:	mov	x21, xzr
   2168c:	mov	x20, xzr
   21690:	b	2169c <rpl_re_set_registers@@Base+0x2af4>
   21694:	mov	w20, #0x2                   	// #2
   21698:	mov	w21, #0x80                  	// #128
   2169c:	bl	b140 <__ctype_b_loc@plt>
   216a0:	ldr	x8, [x0]
   216a4:	mov	w9, #0x1                   	// #1
   216a8:	add	x8, x8, x21, lsl #1
   216ac:	b	216c4 <rpl_re_set_registers@@Base+0x2b1c>
   216b0:	add	x20, x20, #0x1
   216b4:	add	x21, x21, #0x40
   216b8:	cmp	x20, #0x4
   216bc:	add	x8, x8, #0x80
   216c0:	b.eq	21678 <rpl_re_set_registers@@Base+0x2ad0>  // b.none
   216c4:	add	x11, x19, x20, lsl #3
   216c8:	mov	x10, xzr
   216cc:	add	x11, x11, #0xb8
   216d0:	b	216f0 <rpl_re_set_registers@@Base+0x2b48>
   216d4:	ldr	x12, [x11]
   216d8:	lsl	x13, x9, x10
   216dc:	orr	x12, x12, x13
   216e0:	str	x12, [x11]
   216e4:	add	x10, x10, #0x1
   216e8:	cmp	x10, #0x40
   216ec:	b.eq	216b0 <rpl_re_set_registers@@Base+0x2b08>  // b.none
   216f0:	add	x12, x21, x10
   216f4:	cmp	x12, #0x5f
   216f8:	b.eq	216d4 <rpl_re_set_registers@@Base+0x2b2c>  // b.none
   216fc:	ldrh	w12, [x8, x10, lsl #1]
   21700:	tbz	w12, #3, 216e4 <rpl_re_set_registers@@Base+0x2b3c>
   21704:	b	216d4 <rpl_re_set_registers@@Base+0x2b2c>
   21708:	sub	sp, sp, #0x70
   2170c:	stp	x29, x30, [sp, #32]
   21710:	stp	x26, x25, [sp, #48]
   21714:	stp	x22, x21, [sp, #80]
   21718:	add	x29, sp, #0x20
   2171c:	mov	x26, x1
   21720:	mov	x22, x0
   21724:	mov	w0, #0x20                  	// #32
   21728:	mov	w1, #0x1                   	// #1
   2172c:	stp	x24, x23, [sp, #64]
   21730:	stp	x20, x19, [sp, #96]
   21734:	mov	x19, x5
   21738:	mov	w23, w4
   2173c:	mov	x24, x3
   21740:	mov	x25, x2
   21744:	stur	xzr, [x29, #-8]
   21748:	bl	ae10 <calloc@plt>
   2174c:	cbz	x0, 21874 <rpl_re_set_registers@@Base+0x2ccc>
   21750:	mov	x20, x0
   21754:	mov	w0, #0x50                  	// #80
   21758:	mov	w1, #0x1                   	// #1
   2175c:	bl	ae10 <calloc@plt>
   21760:	cbz	x0, 218ac <rpl_re_set_registers@@Base+0x2d04>
   21764:	ldrb	w8, [x0, #32]
   21768:	mov	x21, x0
   2176c:	sub	x3, x29, #0x8
   21770:	mov	x1, x20
   21774:	bfxil	w8, w23, #0, #1
   21778:	strb	w8, [x0, #32]
   2177c:	mov	x0, x26
   21780:	mov	x2, x21
   21784:	mov	x4, x25
   21788:	mov	x5, xzr
   2178c:	bl	221ac <rpl_re_set_registers@@Base+0x3604>
   21790:	cbnz	w0, 218b8 <rpl_re_set_registers@@Base+0x2d10>
   21794:	ldrb	w8, [x24]
   21798:	cbz	w8, 217b4 <rpl_re_set_registers@@Base+0x2c0c>
   2179c:	add	x24, x24, #0x1
   217a0:	and	x1, x8, #0xff
   217a4:	mov	x0, x20
   217a8:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   217ac:	ldrb	w8, [x24], #1
   217b0:	cbnz	w8, 217a0 <rpl_re_set_registers@@Base+0x2bf8>
   217b4:	tbz	w23, #0, 217c0 <rpl_re_set_registers@@Base+0x2c18>
   217b8:	mov	x0, x20
   217bc:	bl	22868 <rpl_re_set_registers@@Base+0x3cc0>
   217c0:	ldr	w8, [x22, #180]
   217c4:	cmp	w8, #0x2
   217c8:	b.lt	217d8 <rpl_re_set_registers@@Base+0x2c30>  // b.tstop
   217cc:	ldr	x1, [x22, #120]
   217d0:	mov	x0, x20
   217d4:	bl	22888 <rpl_re_set_registers@@Base+0x3ce0>
   217d8:	ldr	w24, [sp, #16]
   217dc:	mov	w8, #0x3                   	// #3
   217e0:	add	x3, sp, #0x8
   217e4:	mov	x0, x22
   217e8:	mov	x1, xzr
   217ec:	mov	x2, xzr
   217f0:	strb	w8, [sp, #16]
   217f4:	str	x20, [sp, #8]
   217f8:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   217fc:	cbz	x0, 21864 <rpl_re_set_registers@@Base+0x2cbc>
   21800:	ldr	w8, [x22, #180]
   21804:	mov	x23, x0
   21808:	cmp	w8, #0x2
   2180c:	b.lt	21884 <rpl_re_set_registers@@Base+0x2cdc>  // b.tstop
   21810:	and	w8, w24, #0xffffff00
   21814:	orr	w8, w8, #0x6
   21818:	str	w8, [sp, #16]
   2181c:	str	x21, [sp, #8]
   21820:	ldrb	w8, [x22, #176]
   21824:	add	x3, sp, #0x8
   21828:	mov	x0, x22
   2182c:	mov	x1, xzr
   21830:	orr	w8, w8, #0x2
   21834:	mov	x2, xzr
   21838:	strb	w8, [x22, #176]
   2183c:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   21840:	cbz	x0, 218d8 <rpl_re_set_registers@@Base+0x2d30>
   21844:	mov	x2, x0
   21848:	mov	w3, #0xa                   	// #10
   2184c:	mov	x0, x22
   21850:	mov	x1, x23
   21854:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21858:	mov	x23, x0
   2185c:	mov	w8, wzr
   21860:	tbz	w8, #0, 2188c <rpl_re_set_registers@@Base+0x2ce4>
   21864:	mov	x0, x20
   21868:	bl	b1d0 <free@plt>
   2186c:	mov	x0, x21
   21870:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   21874:	mov	x23, xzr
   21878:	mov	w8, #0xc                   	// #12
   2187c:	str	w8, [x19]
   21880:	b	2188c <rpl_re_set_registers@@Base+0x2ce4>
   21884:	mov	x0, x21
   21888:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   2188c:	mov	x0, x23
   21890:	ldp	x20, x19, [sp, #96]
   21894:	ldp	x22, x21, [sp, #80]
   21898:	ldp	x24, x23, [sp, #64]
   2189c:	ldp	x26, x25, [sp, #48]
   218a0:	ldp	x29, x30, [sp, #32]
   218a4:	add	sp, sp, #0x70
   218a8:	ret
   218ac:	mov	x0, x20
   218b0:	bl	b1d0 <free@plt>
   218b4:	b	21874 <rpl_re_set_registers@@Base+0x2ccc>
   218b8:	mov	w25, w0
   218bc:	mov	x0, x20
   218c0:	bl	b1d0 <free@plt>
   218c4:	mov	x0, x21
   218c8:	bl	1ec8c <rpl_re_set_registers@@Base+0xe4>
   218cc:	mov	x23, xzr
   218d0:	str	w25, [x19]
   218d4:	b	2188c <rpl_re_set_registers@@Base+0x2ce4>
   218d8:	mov	w8, #0x1                   	// #1
   218dc:	tbnz	w8, #0, 21864 <rpl_re_set_registers@@Base+0x2cbc>
   218e0:	b	2188c <rpl_re_set_registers@@Base+0x2ce4>
   218e4:	sub	sp, sp, #0x70
   218e8:	stp	x29, x30, [sp, #16]
   218ec:	stp	x26, x25, [sp, #48]
   218f0:	stp	x24, x23, [sp, #64]
   218f4:	stp	x22, x21, [sp, #80]
   218f8:	stp	x20, x19, [sp, #96]
   218fc:	ldr	q0, [x3]
   21900:	str	x27, [sp, #32]
   21904:	ldr	x27, [x1, #72]
   21908:	mov	x20, x5
   2190c:	str	q0, [sp]
   21910:	ldrb	w8, [x3, #8]
   21914:	mov	x25, x4
   21918:	mov	x24, x3
   2191c:	mov	x21, x2
   21920:	mov	x26, x1
   21924:	cmp	w8, #0x17
   21928:	mov	x19, x0
   2192c:	add	x29, sp, #0x10
   21930:	b.ne	21994 <rpl_re_set_registers@@Base+0x2dec>  // b.any
   21934:	mov	x0, x26
   21938:	mov	x1, x24
   2193c:	mov	x2, x25
   21940:	bl	22b04 <rpl_re_set_registers@@Base+0x3f5c>
   21944:	mov	x23, x0
   21948:	cmn	x0, #0x1
   2194c:	b.eq	219ac <rpl_re_set_registers@@Base+0x2e04>  // b.none
   21950:	cmn	x23, #0x2
   21954:	b.eq	219d0 <rpl_re_set_registers@@Base+0x2e28>  // b.none
   21958:	ldrb	w8, [x24, #8]
   2195c:	mov	x22, x23
   21960:	cmp	w8, #0x18
   21964:	b.eq	219dc <rpl_re_set_registers@@Base+0x2e34>  // b.none
   21968:	cmp	w8, #0x1
   2196c:	b.ne	219d8 <rpl_re_set_registers@@Base+0x2e30>  // b.any
   21970:	ldrb	w8, [x24]
   21974:	cmp	w8, #0x2c
   21978:	b.ne	219d8 <rpl_re_set_registers@@Base+0x2e30>  // b.any
   2197c:	mov	x0, x26
   21980:	mov	x1, x24
   21984:	mov	x2, x25
   21988:	bl	22b04 <rpl_re_set_registers@@Base+0x3f5c>
   2198c:	mov	x22, x0
   21990:	b	219dc <rpl_re_set_registers@@Base+0x2e34>
   21994:	cmp	w8, #0x12
   21998:	cset	w23, eq  // eq = none
   2199c:	cmp	w8, #0x13
   219a0:	mov	w8, #0x1                   	// #1
   219a4:	cneg	x22, x8, ne  // ne = any
   219a8:	b	21a18 <rpl_re_set_registers@@Base+0x2e70>
   219ac:	ldrb	w8, [x24, #8]
   219b0:	cmp	w8, #0x1
   219b4:	b.ne	21b10 <rpl_re_set_registers@@Base+0x2f68>  // b.any
   219b8:	ldrb	w8, [x24]
   219bc:	cmp	w8, #0x2c
   219c0:	b.ne	21b10 <rpl_re_set_registers@@Base+0x2f68>  // b.any
   219c4:	mov	x23, xzr
   219c8:	cmn	x23, #0x2
   219cc:	b.ne	21958 <rpl_re_set_registers@@Base+0x2db0>  // b.any
   219d0:	mov	x22, xzr
   219d4:	b	219dc <rpl_re_set_registers@@Base+0x2e34>
   219d8:	mov	x22, #0xfffffffffffffffe    	// #-2
   219dc:	cmn	x23, #0x2
   219e0:	b.eq	21bc8 <rpl_re_set_registers@@Base+0x3020>  // b.none
   219e4:	cmn	x22, #0x2
   219e8:	b.eq	21bc8 <rpl_re_set_registers@@Base+0x3020>  // b.none
   219ec:	cmn	x22, #0x1
   219f0:	b.eq	219fc <rpl_re_set_registers@@Base+0x2e54>  // b.none
   219f4:	cmp	x23, x22
   219f8:	b.gt	21b10 <rpl_re_set_registers@@Base+0x2f68>
   219fc:	ldrb	w8, [x24, #8]
   21a00:	cmp	w8, #0x18
   21a04:	b.ne	21b10 <rpl_re_set_registers@@Base+0x2f68>  // b.any
   21a08:	cmn	x22, #0x1
   21a0c:	csel	x8, x23, x22, eq  // eq = none
   21a10:	cmp	x8, #0x8, lsl #12
   21a14:	b.ge	21be4 <rpl_re_set_registers@@Base+0x303c>  // b.tcont
   21a18:	mov	x0, x24
   21a1c:	mov	x1, x26
   21a20:	mov	x2, x25
   21a24:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   21a28:	cbz	x19, 21b1c <rpl_re_set_registers@@Base+0x2f74>
   21a2c:	orr	x8, x22, x23
   21a30:	cbz	x8, 21b40 <rpl_re_set_registers@@Base+0x2f98>
   21a34:	subs	x25, x23, #0x1
   21a38:	b.ge	21b5c <rpl_re_set_registers@@Base+0x2fb4>  // b.tcont
   21a3c:	mov	x24, xzr
   21a40:	ldrb	w8, [x19, #48]
   21a44:	cmp	w8, #0x11
   21a48:	b.ne	21a60 <rpl_re_set_registers@@Base+0x2eb8>  // b.any
   21a4c:	ldr	x2, [x19, #40]
   21a50:	adrp	x1, 22000 <rpl_re_set_registers@@Base+0x3458>
   21a54:	add	x1, x1, #0xcc0
   21a58:	mov	x0, x19
   21a5c:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   21a60:	cmn	x22, #0x1
   21a64:	mov	w8, #0xa                   	// #10
   21a68:	cinc	w3, w8, eq  // eq = none
   21a6c:	mov	x0, x21
   21a70:	mov	x1, x19
   21a74:	mov	x2, xzr
   21a78:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21a7c:	cbz	x0, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21a80:	add	x8, x23, #0x2
   21a84:	mov	x25, x0
   21a88:	cmp	x8, x22
   21a8c:	b.gt	21ae8 <rpl_re_set_registers@@Base+0x2f40>
   21a90:	add	x23, x23, #0x1
   21a94:	mov	x0, x19
   21a98:	mov	x1, x21
   21a9c:	bl	22bd8 <rpl_re_set_registers@@Base+0x4030>
   21aa0:	mov	x19, x0
   21aa4:	mov	w3, #0x10                  	// #16
   21aa8:	mov	x0, x21
   21aac:	mov	x1, x25
   21ab0:	mov	x2, x19
   21ab4:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21ab8:	cbz	x19, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21abc:	mov	x1, x0
   21ac0:	cbz	x0, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21ac4:	mov	w3, #0xa                   	// #10
   21ac8:	mov	x0, x21
   21acc:	mov	x2, xzr
   21ad0:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21ad4:	cbz	x0, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21ad8:	add	x23, x23, #0x1
   21adc:	mov	x25, x0
   21ae0:	cmp	x23, x22
   21ae4:	b.lt	21a94 <rpl_re_set_registers@@Base+0x2eec>  // b.tstop
   21ae8:	cbz	x24, 21b08 <rpl_re_set_registers@@Base+0x2f60>
   21aec:	mov	w3, #0x10                  	// #16
   21af0:	mov	x0, x21
   21af4:	mov	x1, x24
   21af8:	mov	x2, x25
   21afc:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21b00:	mov	x19, x0
   21b04:	b	21b1c <rpl_re_set_registers@@Base+0x2f74>
   21b08:	mov	x19, x25
   21b0c:	b	21b1c <rpl_re_set_registers@@Base+0x2f74>
   21b10:	mov	w8, #0xa                   	// #10
   21b14:	mov	x19, xzr
   21b18:	str	w8, [x20]
   21b1c:	mov	x0, x19
   21b20:	ldp	x20, x19, [sp, #96]
   21b24:	ldp	x22, x21, [sp, #80]
   21b28:	ldp	x24, x23, [sp, #64]
   21b2c:	ldp	x26, x25, [sp, #48]
   21b30:	ldr	x27, [sp, #32]
   21b34:	ldp	x29, x30, [sp, #16]
   21b38:	add	sp, sp, #0x70
   21b3c:	ret
   21b40:	adrp	x1, 20000 <rpl_re_set_registers@@Base+0x1458>
   21b44:	add	x1, x1, #0x9d0
   21b48:	mov	x0, x19
   21b4c:	mov	x2, xzr
   21b50:	bl	2092c <rpl_re_set_registers@@Base+0x1d84>
   21b54:	mov	x19, xzr
   21b58:	b	21b1c <rpl_re_set_registers@@Base+0x2f74>
   21b5c:	mov	x24, x19
   21b60:	b.eq	21b9c <rpl_re_set_registers@@Base+0x2ff4>  // b.none
   21b64:	mov	x0, x19
   21b68:	mov	x1, x21
   21b6c:	bl	22bd8 <rpl_re_set_registers@@Base+0x4030>
   21b70:	mov	x19, x0
   21b74:	mov	w3, #0x10                  	// #16
   21b78:	mov	x0, x21
   21b7c:	mov	x1, x24
   21b80:	mov	x2, x19
   21b84:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   21b88:	cbz	x19, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21b8c:	mov	x24, x0
   21b90:	cbz	x0, 21bc0 <rpl_re_set_registers@@Base+0x3018>
   21b94:	subs	x25, x25, #0x1
   21b98:	b.ne	21b64 <rpl_re_set_registers@@Base+0x2fbc>  // b.any
   21b9c:	cmp	x23, x22
   21ba0:	b.ne	21bac <rpl_re_set_registers@@Base+0x3004>  // b.any
   21ba4:	mov	x19, x24
   21ba8:	b	21b1c <rpl_re_set_registers@@Base+0x2f74>
   21bac:	mov	x0, x19
   21bb0:	mov	x1, x21
   21bb4:	bl	22bd8 <rpl_re_set_registers@@Base+0x4030>
   21bb8:	mov	x19, x0
   21bbc:	cbnz	x0, 21a40 <rpl_re_set_registers@@Base+0x2e98>
   21bc0:	mov	w8, #0xc                   	// #12
   21bc4:	b	21b14 <rpl_re_set_registers@@Base+0x2f6c>
   21bc8:	tbz	w25, #21, 21bec <rpl_re_set_registers@@Base+0x3044>
   21bcc:	str	x27, [x26, #72]
   21bd0:	ldr	q0, [sp]
   21bd4:	mov	w8, #0x1                   	// #1
   21bd8:	str	q0, [x24]
   21bdc:	strb	w8, [x24, #8]
   21be0:	b	21b1c <rpl_re_set_registers@@Base+0x2f74>
   21be4:	mov	w8, #0xf                   	// #15
   21be8:	b	21b14 <rpl_re_set_registers@@Base+0x2f6c>
   21bec:	ldrb	w8, [x24, #8]
   21bf0:	mov	x19, xzr
   21bf4:	cmp	w8, #0x2
   21bf8:	mov	w8, #0x9                   	// #9
   21bfc:	cinc	w8, w8, ne  // ne = any
   21c00:	b	21b18 <rpl_re_set_registers@@Base+0x2f70>
   21c04:	ldr	x9, [x1, #104]
   21c08:	ldr	x8, [x1, #72]
   21c0c:	cmp	x9, x8
   21c10:	b.le	21c84 <rpl_re_set_registers@@Base+0x30dc>
   21c14:	ldr	x9, [x1, #8]
   21c18:	ldrb	w9, [x9, x8]
   21c1c:	strb	w9, [x0]
   21c20:	ldr	w8, [x1, #144]
   21c24:	cmp	w8, #0x2
   21c28:	b.lt	21c4c <rpl_re_set_registers@@Base+0x30a4>  // b.tstop
   21c2c:	ldr	x8, [x1, #72]
   21c30:	ldr	x10, [x1, #48]
   21c34:	cmp	x8, x10
   21c38:	b.eq	21c4c <rpl_re_set_registers@@Base+0x30a4>  // b.none
   21c3c:	ldr	x10, [x1, #16]
   21c40:	ldr	w8, [x10, x8, lsl #2]
   21c44:	cmn	w8, #0x1
   21c48:	b.eq	21ce4 <rpl_re_set_registers@@Base+0x313c>  // b.none
   21c4c:	tbz	w2, #0, 21c94 <rpl_re_set_registers@@Base+0x30ec>
   21c50:	cmp	w9, #0x5c
   21c54:	b.ne	21c94 <rpl_re_set_registers@@Base+0x30ec>  // b.any
   21c58:	ldr	x8, [x1, #72]
   21c5c:	ldr	x10, [x1, #88]
   21c60:	add	x8, x8, #0x1
   21c64:	cmp	x8, x10
   21c68:	b.ge	21c94 <rpl_re_set_registers@@Base+0x30ec>  // b.tcont
   21c6c:	ldr	x9, [x1, #8]
   21c70:	str	x8, [x1, #72]
   21c74:	ldrb	w9, [x9, x8]
   21c78:	mov	w8, #0x1                   	// #1
   21c7c:	strb	w9, [x0]
   21c80:	b	21ce8 <rpl_re_set_registers@@Base+0x3140>
   21c84:	mov	w9, #0x2                   	// #2
   21c88:	strb	w9, [x0, #8]
   21c8c:	mov	w0, wzr
   21c90:	ret
   21c94:	cmp	w9, #0x5c
   21c98:	b.gt	21ccc <rpl_re_set_registers@@Base+0x3124>
   21c9c:	cmp	w9, #0x2d
   21ca0:	b.eq	21cf4 <rpl_re_set_registers@@Base+0x314c>  // b.none
   21ca4:	cmp	w9, #0x5b
   21ca8:	b.ne	21ce4 <rpl_re_set_registers@@Base+0x313c>  // b.any
   21cac:	ldr	x8, [x1, #72]
   21cb0:	ldr	x10, [x1, #88]
   21cb4:	add	x8, x8, #0x1
   21cb8:	cmp	x8, x10
   21cbc:	b.ge	21d0c <rpl_re_set_registers@@Base+0x3164>  // b.tcont
   21cc0:	ldr	x10, [x1, #8]
   21cc4:	ldrb	w8, [x10, x8]
   21cc8:	b	21d10 <rpl_re_set_registers@@Base+0x3168>
   21ccc:	cmp	w9, #0x5d
   21cd0:	b.eq	21cfc <rpl_re_set_registers@@Base+0x3154>  // b.none
   21cd4:	cmp	w9, #0x5e
   21cd8:	b.ne	21ce4 <rpl_re_set_registers@@Base+0x313c>  // b.any
   21cdc:	mov	w8, #0x19                  	// #25
   21ce0:	b	21d00 <rpl_re_set_registers@@Base+0x3158>
   21ce4:	mov	w8, #0x1                   	// #1
   21ce8:	strb	w8, [x0, #8]
   21cec:	mov	w0, w8
   21cf0:	ret
   21cf4:	mov	w8, #0x16                  	// #22
   21cf8:	b	21d00 <rpl_re_set_registers@@Base+0x3158>
   21cfc:	mov	w8, #0x15                  	// #21
   21d00:	strb	w8, [x0, #8]
   21d04:	mov	w0, #0x1                   	// #1
   21d08:	ret
   21d0c:	mov	w8, wzr
   21d10:	cmp	w8, #0x3d
   21d14:	strb	w8, [x0]
   21d18:	b.eq	21d4c <rpl_re_set_registers@@Base+0x31a4>  // b.none
   21d1c:	cmp	w8, #0x3a
   21d20:	b.eq	21d34 <rpl_re_set_registers@@Base+0x318c>  // b.none
   21d24:	cmp	w8, #0x2e
   21d28:	b.ne	21d38 <rpl_re_set_registers@@Base+0x3190>  // b.any
   21d2c:	mov	w8, #0x1a                  	// #26
   21d30:	b	21d58 <rpl_re_set_registers@@Base+0x31b0>
   21d34:	tbnz	w2, #2, 21d54 <rpl_re_set_registers@@Base+0x31ac>
   21d38:	mov	w8, #0x1                   	// #1
   21d3c:	strb	w8, [x0, #8]
   21d40:	strb	w9, [x0]
   21d44:	mov	w0, w8
   21d48:	ret
   21d4c:	mov	w8, #0x1c                  	// #28
   21d50:	b	21d58 <rpl_re_set_registers@@Base+0x31b0>
   21d54:	mov	w8, #0x1e                  	// #30
   21d58:	strb	w8, [x0, #8]
   21d5c:	mov	w0, #0x2                   	// #2
   21d60:	ret
   21d64:	add	x8, x1, #0x3f
   21d68:	cmp	x1, #0x0
   21d6c:	csel	x8, x8, x1, lt  // lt = tstop
   21d70:	asr	x8, x8, #6
   21d74:	lsl	x8, x8, #3
   21d78:	ldr	x9, [x0, x8]
   21d7c:	mov	w10, #0x1                   	// #1
   21d80:	lsl	x10, x10, x1
   21d84:	orr	x9, x9, x10
   21d88:	str	x9, [x0, x8]
   21d8c:	ret
   21d90:	sub	sp, sp, #0x60
   21d94:	stp	x29, x30, [sp, #16]
   21d98:	stp	x26, x25, [sp, #32]
   21d9c:	stp	x24, x23, [sp, #48]
   21da0:	stp	x22, x21, [sp, #64]
   21da4:	stp	x20, x19, [sp, #80]
   21da8:	ldr	x24, [x1, #72]
   21dac:	mov	x20, x1
   21db0:	mov	x19, x0
   21db4:	mov	x0, x1
   21db8:	mov	x1, x24
   21dbc:	add	x29, sp, #0x10
   21dc0:	mov	w23, w5
   21dc4:	mov	x22, x4
   21dc8:	mov	w26, w3
   21dcc:	mov	x21, x2
   21dd0:	bl	228ac <rpl_re_set_registers@@Base+0x3d04>
   21dd4:	cmp	w0, #0x2
   21dd8:	b.lt	21e10 <rpl_re_set_registers@@Base+0x3268>  // b.tstop
   21ddc:	mov	w25, w0
   21de0:	mov	w8, #0x1                   	// #1
   21de4:	mov	x0, x20
   21de8:	mov	x1, x24
   21dec:	str	w8, [x19]
   21df0:	bl	207c0 <rpl_re_set_registers@@Base+0x1c18>
   21df4:	mov	w8, w0
   21df8:	str	w8, [x19, #8]
   21dfc:	ldr	x8, [x20, #72]
   21e00:	mov	w0, wzr
   21e04:	add	x8, x8, w25, sxtw
   21e08:	str	x8, [x20, #72]
   21e0c:	b	21e84 <rpl_re_set_registers@@Base+0x32dc>
   21e10:	add	x8, x24, w26, sxtw
   21e14:	str	x8, [x20, #72]
   21e18:	ldrb	w8, [x21, #8]
   21e1c:	sub	w8, w8, #0x16
   21e20:	cmp	w8, #0x8
   21e24:	b.hi	21e74 <rpl_re_set_registers@@Base+0x32cc>  // b.pmore
   21e28:	adrp	x9, 2d000 <vasnprintf@@Base+0x2ec4>
   21e2c:	add	x9, x9, #0x832
   21e30:	adr	x10, 21e40 <rpl_re_set_registers@@Base+0x3298>
   21e34:	ldrb	w11, [x9, x8]
   21e38:	add	x10, x10, x11, lsl #2
   21e3c:	br	x10
   21e40:	mov	x0, x19
   21e44:	mov	x1, x20
   21e48:	mov	x2, x21
   21e4c:	bl	22904 <rpl_re_set_registers@@Base+0x3d5c>
   21e50:	b	21e84 <rpl_re_set_registers@@Base+0x32dc>
   21e54:	tbnz	w23, #0, 21e74 <rpl_re_set_registers@@Base+0x32cc>
   21e58:	mov	x0, sp
   21e5c:	mov	x1, x20
   21e60:	mov	x2, x22
   21e64:	bl	21c04 <rpl_re_set_registers@@Base+0x305c>
   21e68:	ldrb	w8, [sp, #8]
   21e6c:	cmp	w8, #0x15
   21e70:	b.ne	21ea0 <rpl_re_set_registers@@Base+0x32f8>  // b.any
   21e74:	str	wzr, [x19]
   21e78:	ldrb	w8, [x21]
   21e7c:	mov	w0, wzr
   21e80:	strb	w8, [x19, #8]
   21e84:	ldp	x20, x19, [sp, #80]
   21e88:	ldp	x22, x21, [sp, #64]
   21e8c:	ldp	x24, x23, [sp, #48]
   21e90:	ldp	x26, x25, [sp, #32]
   21e94:	ldp	x29, x30, [sp, #16]
   21e98:	add	sp, sp, #0x60
   21e9c:	ret
   21ea0:	mov	w0, #0xb                   	// #11
   21ea4:	b	21e84 <rpl_re_set_registers@@Base+0x32dc>
   21ea8:	stp	x29, x30, [sp, #-80]!
   21eac:	stp	x26, x25, [sp, #16]
   21eb0:	stp	x24, x23, [sp, #32]
   21eb4:	stp	x22, x21, [sp, #48]
   21eb8:	stp	x20, x19, [sp, #64]
   21ebc:	ldr	w26, [x4]
   21ec0:	mov	x22, x0
   21ec4:	mov	w0, #0xb                   	// #11
   21ec8:	mov	x29, sp
   21ecc:	cmp	w26, #0x2
   21ed0:	b.eq	22088 <rpl_re_set_registers@@Base+0x34e0>  // b.none
   21ed4:	cmp	w26, #0x4
   21ed8:	b.eq	22088 <rpl_re_set_registers@@Base+0x34e0>  // b.none
   21edc:	ldr	w25, [x5]
   21ee0:	mov	x23, x5
   21ee4:	mov	w0, #0xb                   	// #11
   21ee8:	cmp	w25, #0x2
   21eec:	b.eq	22088 <rpl_re_set_registers@@Base+0x34e0>  // b.none
   21ef0:	cmp	w25, #0x4
   21ef4:	b.eq	22088 <rpl_re_set_registers@@Base+0x34e0>  // b.none
   21ef8:	mov	x24, x4
   21efc:	mov	x21, x3
   21f00:	mov	x20, x2
   21f04:	mov	x19, x1
   21f08:	cmp	w26, #0x3
   21f0c:	b.ne	21f20 <rpl_re_set_registers@@Base+0x3378>  // b.any
   21f10:	ldr	x0, [x24, #8]
   21f14:	bl	a890 <strlen@plt>
   21f18:	cmp	x0, #0x1
   21f1c:	b.hi	220a0 <rpl_re_set_registers@@Base+0x34f8>  // b.pmore
   21f20:	cmp	w25, #0x3
   21f24:	b.ne	21f38 <rpl_re_set_registers@@Base+0x3390>  // b.any
   21f28:	ldr	x0, [x23, #8]
   21f2c:	bl	a890 <strlen@plt>
   21f30:	cmp	x0, #0x1
   21f34:	b.hi	220a0 <rpl_re_set_registers@@Base+0x34f8>  // b.pmore
   21f38:	cmp	w26, #0x3
   21f3c:	b.eq	21f64 <rpl_re_set_registers@@Base+0x33bc>  // b.none
   21f40:	cbnz	w26, 21f78 <rpl_re_set_registers@@Base+0x33d0>
   21f44:	ldrb	w0, [x24, #8]
   21f48:	cmp	w25, #0x3
   21f4c:	b.ne	21f84 <rpl_re_set_registers@@Base+0x33dc>  // b.any
   21f50:	ldr	x8, [x23, #8]
   21f54:	ldrb	w25, [x8]
   21f58:	cmp	w26, #0x3
   21f5c:	b.ne	21fa4 <rpl_re_set_registers@@Base+0x33fc>  // b.any
   21f60:	b	21fa8 <rpl_re_set_registers@@Base+0x3400>
   21f64:	ldr	x8, [x24, #8]
   21f68:	ldrb	w0, [x8]
   21f6c:	cmp	w25, #0x3
   21f70:	b.ne	21f84 <rpl_re_set_registers@@Base+0x33dc>  // b.any
   21f74:	b	21f50 <rpl_re_set_registers@@Base+0x33a8>
   21f78:	mov	w0, wzr
   21f7c:	cmp	w25, #0x3
   21f80:	b.eq	21f50 <rpl_re_set_registers@@Base+0x33a8>  // b.none
   21f84:	cbnz	w25, 21f98 <rpl_re_set_registers@@Base+0x33f0>
   21f88:	ldrb	w25, [x23, #8]
   21f8c:	cmp	w26, #0x3
   21f90:	b.ne	21fa4 <rpl_re_set_registers@@Base+0x33fc>  // b.any
   21f94:	b	21fa8 <rpl_re_set_registers@@Base+0x3400>
   21f98:	mov	w25, wzr
   21f9c:	cmp	w26, #0x3
   21fa0:	b.eq	21fa8 <rpl_re_set_registers@@Base+0x3400>  // b.none
   21fa4:	cbnz	w26, 21fb8 <rpl_re_set_registers@@Base+0x3410>
   21fa8:	mov	x1, x20
   21fac:	bl	22ae8 <rpl_re_set_registers@@Base+0x3f40>
   21fb0:	mov	w24, w0
   21fb4:	b	21fbc <rpl_re_set_registers@@Base+0x3414>
   21fb8:	ldr	w24, [x24, #8]
   21fbc:	ldr	w8, [x23]
   21fc0:	cmp	w8, #0x3
   21fc4:	b.eq	21fcc <rpl_re_set_registers@@Base+0x3424>  // b.none
   21fc8:	cbnz	w8, 21fe0 <rpl_re_set_registers@@Base+0x3438>
   21fcc:	mov	w0, w25
   21fd0:	mov	x1, x20
   21fd4:	bl	22ae8 <rpl_re_set_registers@@Base+0x3f40>
   21fd8:	mov	w23, w0
   21fdc:	b	21fe4 <rpl_re_set_registers@@Base+0x343c>
   21fe0:	ldr	w23, [x23, #8]
   21fe4:	mov	w9, #0x3                   	// #3
   21fe8:	cmn	w24, #0x1
   21fec:	mov	w8, #0x1                   	// #1
   21ff0:	b.eq	22080 <rpl_re_set_registers@@Base+0x34d8>  // b.none
   21ff4:	cmn	w23, #0x1
   21ff8:	b.eq	22080 <rpl_re_set_registers@@Base+0x34d8>  // b.none
   21ffc:	tbz	w22, #16, 22008 <rpl_re_set_registers@@Base+0x3460>
   22000:	cmp	w24, w23
   22004:	b.hi	220a8 <rpl_re_set_registers@@Base+0x3500>  // b.pmore
   22008:	cbz	x20, 2203c <rpl_re_set_registers@@Base+0x3494>
   2200c:	ldr	x9, [x21]
   22010:	ldr	x8, [x20, #64]
   22014:	cmp	x9, x8
   22018:	b.eq	220b4 <rpl_re_set_registers@@Base+0x350c>  // b.none
   2201c:	ldr	x8, [x20, #64]
   22020:	ldr	x9, [x20, #8]
   22024:	lsl	x10, x8, #2
   22028:	str	w24, [x9, x10]
   2202c:	ldr	x9, [x20, #16]
   22030:	add	x8, x8, #0x1
   22034:	str	x8, [x20, #64]
   22038:	str	w23, [x9, x10]
   2203c:	mov	x20, xzr
   22040:	mov	w21, w23
   22044:	mov	w22, w24
   22048:	b	22058 <rpl_re_set_registers@@Base+0x34b0>
   2204c:	add	x20, x20, #0x1
   22050:	cmp	x20, #0x100
   22054:	b.eq	22078 <rpl_re_set_registers@@Base+0x34d0>  // b.none
   22058:	cmp	x20, x22
   2205c:	b.cc	2204c <rpl_re_set_registers@@Base+0x34a4>  // b.lo, b.ul, b.last
   22060:	cmp	x20, x21
   22064:	b.hi	2204c <rpl_re_set_registers@@Base+0x34a4>  // b.pmore
   22068:	mov	x0, x19
   2206c:	mov	x1, x20
   22070:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22074:	b	2204c <rpl_re_set_registers@@Base+0x34a4>
   22078:	mov	w8, wzr
   2207c:	mov	w9, #0xc                   	// #12
   22080:	cmp	w8, #0x0
   22084:	csel	w0, wzr, w9, eq  // eq = none
   22088:	ldp	x20, x19, [sp, #64]
   2208c:	ldp	x22, x21, [sp, #48]
   22090:	ldp	x24, x23, [sp, #32]
   22094:	ldp	x26, x25, [sp, #16]
   22098:	ldp	x29, x30, [sp], #80
   2209c:	ret
   220a0:	mov	w0, #0x3                   	// #3
   220a4:	b	22088 <rpl_re_set_registers@@Base+0x34e0>
   220a8:	mov	w9, #0xb                   	// #11
   220ac:	mov	w8, #0x1                   	// #1
   220b0:	b	22080 <rpl_re_set_registers@@Base+0x34d8>
   220b4:	ldr	x0, [x20, #8]
   220b8:	mov	w26, #0x1                   	// #1
   220bc:	bfi	x26, x8, #1, #63
   220c0:	lsl	x25, x26, #2
   220c4:	mov	x1, x25
   220c8:	bl	aea0 <realloc@plt>
   220cc:	ldr	x8, [x20, #16]
   220d0:	mov	x22, x0
   220d4:	mov	x1, x25
   220d8:	mov	x0, x8
   220dc:	bl	aea0 <realloc@plt>
   220e0:	mov	x25, x0
   220e4:	cbz	x22, 22100 <rpl_re_set_registers@@Base+0x3558>
   220e8:	cbz	x25, 22100 <rpl_re_set_registers@@Base+0x3558>
   220ec:	mov	w8, wzr
   220f0:	stp	x22, x25, [x20, #8]
   220f4:	str	x26, [x21]
   220f8:	cbnz	w8, 2207c <rpl_re_set_registers@@Base+0x34d4>
   220fc:	b	2201c <rpl_re_set_registers@@Base+0x3474>
   22100:	mov	x0, x22
   22104:	bl	b1d0 <free@plt>
   22108:	mov	x0, x25
   2210c:	bl	b1d0 <free@plt>
   22110:	mov	w8, #0x1                   	// #1
   22114:	cbnz	w8, 2207c <rpl_re_set_registers@@Base+0x34d4>
   22118:	b	2201c <rpl_re_set_registers@@Base+0x3474>
   2211c:	stp	x29, x30, [sp, #-32]!
   22120:	stp	x20, x19, [sp, #16]
   22124:	mov	x19, x0
   22128:	mov	x0, x1
   2212c:	mov	x29, sp
   22130:	mov	x20, x1
   22134:	bl	a890 <strlen@plt>
   22138:	cmp	x0, #0x1
   2213c:	b.ne	2215c <rpl_re_set_registers@@Base+0x35b4>  // b.any
   22140:	ldrb	w1, [x20]
   22144:	mov	x0, x19
   22148:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   2214c:	mov	w0, wzr
   22150:	ldp	x20, x19, [sp, #16]
   22154:	ldp	x29, x30, [sp], #32
   22158:	ret
   2215c:	mov	w0, #0x3                   	// #3
   22160:	b	22150 <rpl_re_set_registers@@Base+0x35a8>
   22164:	stp	x29, x30, [sp, #-32]!
   22168:	stp	x20, x19, [sp, #16]
   2216c:	mov	x19, x0
   22170:	mov	x0, x1
   22174:	mov	x29, sp
   22178:	mov	x20, x1
   2217c:	bl	a890 <strlen@plt>
   22180:	cmp	x0, #0x1
   22184:	b.ne	221a4 <rpl_re_set_registers@@Base+0x35fc>  // b.any
   22188:	ldrb	w1, [x20]
   2218c:	mov	x0, x19
   22190:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22194:	mov	w0, wzr
   22198:	ldp	x20, x19, [sp, #16]
   2219c:	ldp	x29, x30, [sp], #32
   221a0:	ret
   221a4:	mov	w0, #0x3                   	// #3
   221a8:	b	22198 <rpl_re_set_registers@@Base+0x35f0>
   221ac:	stp	x29, x30, [sp, #-64]!
   221b0:	stp	x24, x23, [sp, #16]
   221b4:	stp	x22, x21, [sp, #32]
   221b8:	stp	x20, x19, [sp, #48]
   221bc:	mov	x21, x4
   221c0:	mov	x23, x3
   221c4:	mov	x22, x2
   221c8:	mov	x19, x1
   221cc:	mov	x20, x0
   221d0:	mov	x29, sp
   221d4:	tbz	w5, #22, 22208 <rpl_re_set_registers@@Base+0x3660>
   221d8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   221dc:	add	x1, x1, #0xb0e
   221e0:	mov	x0, x21
   221e4:	bl	b120 <strcmp@plt>
   221e8:	cbz	w0, 22200 <rpl_re_set_registers@@Base+0x3658>
   221ec:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   221f0:	add	x1, x1, #0xb14
   221f4:	mov	x0, x21
   221f8:	bl	b120 <strcmp@plt>
   221fc:	cbnz	w0, 22208 <rpl_re_set_registers@@Base+0x3660>
   22200:	adrp	x21, 2d000 <vasnprintf@@Base+0x2ec4>
   22204:	add	x21, x21, #0xb1a
   22208:	ldr	x9, [x23]
   2220c:	ldr	x8, [x22, #72]
   22210:	cmp	x9, x8
   22214:	b.eq	22734 <rpl_re_set_registers@@Base+0x3b8c>  // b.none
   22218:	mov	x0, x21
   2221c:	bl	a920 <wctype@plt>
   22220:	ldr	x8, [x22, #72]
   22224:	ldr	x9, [x22, #24]
   22228:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2222c:	add	x1, x1, #0xa90
   22230:	add	x10, x8, #0x1
   22234:	str	x10, [x22, #72]
   22238:	str	x0, [x9, x8, lsl #3]
   2223c:	mov	x0, x21
   22240:	bl	b120 <strcmp@plt>
   22244:	cbz	w0, 2232c <rpl_re_set_registers@@Base+0x3784>
   22248:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2224c:	add	x1, x1, #0xb20
   22250:	mov	x0, x21
   22254:	bl	b120 <strcmp@plt>
   22258:	cbz	w0, 22368 <rpl_re_set_registers@@Base+0x37c0>
   2225c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   22260:	add	x1, x1, #0xb14
   22264:	mov	x0, x21
   22268:	bl	b120 <strcmp@plt>
   2226c:	cbz	w0, 223a4 <rpl_re_set_registers@@Base+0x37fc>
   22270:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   22274:	add	x1, x1, #0xa96
   22278:	mov	x0, x21
   2227c:	bl	b120 <strcmp@plt>
   22280:	cbz	w0, 223e0 <rpl_re_set_registers@@Base+0x3838>
   22284:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   22288:	add	x1, x1, #0xb1a
   2228c:	mov	x0, x21
   22290:	bl	b120 <strcmp@plt>
   22294:	cbz	w0, 2241c <rpl_re_set_registers@@Base+0x3874>
   22298:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2229c:	add	x1, x1, #0xb3f
   222a0:	mov	x0, x21
   222a4:	bl	b120 <strcmp@plt>
   222a8:	cbz	w0, 22458 <rpl_re_set_registers@@Base+0x38b0>
   222ac:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   222b0:	add	x1, x1, #0xb26
   222b4:	mov	x0, x21
   222b8:	bl	b120 <strcmp@plt>
   222bc:	cbz	w0, 224ac <rpl_re_set_registers@@Base+0x3904>
   222c0:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   222c4:	add	x1, x1, #0xb0e
   222c8:	mov	x0, x21
   222cc:	bl	b120 <strcmp@plt>
   222d0:	cbz	w0, 224ec <rpl_re_set_registers@@Base+0x3944>
   222d4:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   222d8:	add	x1, x1, #0xb2c
   222dc:	mov	x0, x21
   222e0:	bl	b120 <strcmp@plt>
   222e4:	cbz	w0, 2252c <rpl_re_set_registers@@Base+0x3984>
   222e8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   222ec:	add	x1, x1, #0xb32
   222f0:	mov	x0, x21
   222f4:	bl	b120 <strcmp@plt>
   222f8:	cbz	w0, 22598 <rpl_re_set_registers@@Base+0x39f0>
   222fc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   22300:	add	x1, x1, #0xb38
   22304:	mov	x0, x21
   22308:	bl	b120 <strcmp@plt>
   2230c:	cbz	w0, 22604 <rpl_re_set_registers@@Base+0x3a5c>
   22310:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   22314:	add	x1, x1, #0xb3e
   22318:	mov	x0, x21
   2231c:	bl	b120 <strcmp@plt>
   22320:	cbz	w0, 22670 <rpl_re_set_registers@@Base+0x3ac8>
   22324:	mov	w0, #0x4                   	// #4
   22328:	b	22498 <rpl_re_set_registers@@Base+0x38f0>
   2232c:	bl	b140 <__ctype_b_loc@plt>
   22330:	mov	x21, x0
   22334:	cbz	x20, 2234c <rpl_re_set_registers@@Base+0x37a4>
   22338:	mov	x22, xzr
   2233c:	b	2257c <rpl_re_set_registers@@Base+0x39d4>
   22340:	add	x20, x20, #0x1
   22344:	cmp	x20, #0x100
   22348:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   2234c:	ldr	x8, [x21]
   22350:	ldrh	w8, [x8, x20, lsl #1]
   22354:	tbz	w8, #3, 22340 <rpl_re_set_registers@@Base+0x3798>
   22358:	mov	x0, x19
   2235c:	mov	x1, x20
   22360:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22364:	b	22340 <rpl_re_set_registers@@Base+0x3798>
   22368:	bl	b140 <__ctype_b_loc@plt>
   2236c:	mov	x21, x0
   22370:	cbz	x20, 22388 <rpl_re_set_registers@@Base+0x37e0>
   22374:	mov	x22, xzr
   22378:	b	225e8 <rpl_re_set_registers@@Base+0x3a40>
   2237c:	add	x20, x20, #0x1
   22380:	cmp	x20, #0x100
   22384:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   22388:	ldr	x8, [x21]
   2238c:	ldrh	w8, [x8, x20, lsl #1]
   22390:	tbz	w8, #1, 2237c <rpl_re_set_registers@@Base+0x37d4>
   22394:	mov	x0, x19
   22398:	mov	x1, x20
   2239c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   223a0:	b	2237c <rpl_re_set_registers@@Base+0x37d4>
   223a4:	bl	b140 <__ctype_b_loc@plt>
   223a8:	mov	x21, x0
   223ac:	cbz	x20, 223c4 <rpl_re_set_registers@@Base+0x381c>
   223b0:	mov	x22, xzr
   223b4:	b	22654 <rpl_re_set_registers@@Base+0x3aac>
   223b8:	add	x20, x20, #0x1
   223bc:	cmp	x20, #0x100
   223c0:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   223c4:	ldr	x8, [x21]
   223c8:	ldrh	w8, [x8, x20, lsl #1]
   223cc:	tbz	w8, #9, 223b8 <rpl_re_set_registers@@Base+0x3810>
   223d0:	mov	x0, x19
   223d4:	mov	x1, x20
   223d8:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   223dc:	b	223b8 <rpl_re_set_registers@@Base+0x3810>
   223e0:	bl	b140 <__ctype_b_loc@plt>
   223e4:	mov	x21, x0
   223e8:	cbz	x20, 22400 <rpl_re_set_registers@@Base+0x3858>
   223ec:	mov	x22, xzr
   223f0:	b	226c0 <rpl_re_set_registers@@Base+0x3b18>
   223f4:	add	x20, x20, #0x1
   223f8:	cmp	x20, #0x100
   223fc:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   22400:	ldr	x8, [x21]
   22404:	ldrh	w8, [x8, x20, lsl #1]
   22408:	tbz	w8, #13, 223f4 <rpl_re_set_registers@@Base+0x384c>
   2240c:	mov	x0, x19
   22410:	mov	x1, x20
   22414:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22418:	b	223f4 <rpl_re_set_registers@@Base+0x384c>
   2241c:	bl	b140 <__ctype_b_loc@plt>
   22420:	mov	x21, x0
   22424:	cbz	x20, 2243c <rpl_re_set_registers@@Base+0x3894>
   22428:	mov	x22, xzr
   2242c:	b	226ec <rpl_re_set_registers@@Base+0x3b44>
   22430:	add	x20, x20, #0x1
   22434:	cmp	x20, #0x100
   22438:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   2243c:	ldr	x8, [x21]
   22440:	ldrh	w8, [x8, x20, lsl #1]
   22444:	tbz	w8, #10, 22430 <rpl_re_set_registers@@Base+0x3888>
   22448:	mov	x0, x19
   2244c:	mov	x1, x20
   22450:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22454:	b	22430 <rpl_re_set_registers@@Base+0x3888>
   22458:	bl	b140 <__ctype_b_loc@plt>
   2245c:	mov	x21, x0
   22460:	cbz	x20, 22478 <rpl_re_set_registers@@Base+0x38d0>
   22464:	mov	x22, xzr
   22468:	b	22718 <rpl_re_set_registers@@Base+0x3b70>
   2246c:	add	x20, x20, #0x1
   22470:	cmp	x20, #0x100
   22474:	b.eq	22494 <rpl_re_set_registers@@Base+0x38ec>  // b.none
   22478:	ldr	x8, [x21]
   2247c:	ldrh	w8, [x8, x20, lsl #1]
   22480:	tbz	w8, #11, 2246c <rpl_re_set_registers@@Base+0x38c4>
   22484:	mov	x0, x19
   22488:	mov	x1, x20
   2248c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22490:	b	2246c <rpl_re_set_registers@@Base+0x38c4>
   22494:	mov	w0, wzr
   22498:	ldp	x20, x19, [sp, #48]
   2249c:	ldp	x22, x21, [sp, #32]
   224a0:	ldp	x24, x23, [sp, #16]
   224a4:	ldp	x29, x30, [sp], #64
   224a8:	ret
   224ac:	bl	b140 <__ctype_b_loc@plt>
   224b0:	mov	x21, x0
   224b4:	cbz	x20, 224d0 <rpl_re_set_registers@@Base+0x3928>
   224b8:	mov	x22, xzr
   224bc:	b	22768 <rpl_re_set_registers@@Base+0x3bc0>
   224c0:	add	x20, x20, #0x1
   224c4:	cmp	x20, #0x100
   224c8:	mov	w0, wzr
   224cc:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   224d0:	ldr	x8, [x21]
   224d4:	ldrh	w8, [x8, x20, lsl #1]
   224d8:	tbz	w8, #14, 224c0 <rpl_re_set_registers@@Base+0x3918>
   224dc:	mov	x0, x19
   224e0:	mov	x1, x20
   224e4:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   224e8:	b	224c0 <rpl_re_set_registers@@Base+0x3918>
   224ec:	bl	b140 <__ctype_b_loc@plt>
   224f0:	mov	x21, x0
   224f4:	cbz	x20, 22510 <rpl_re_set_registers@@Base+0x3968>
   224f8:	mov	x22, xzr
   224fc:	b	22794 <rpl_re_set_registers@@Base+0x3bec>
   22500:	add	x20, x20, #0x1
   22504:	cmp	x20, #0x100
   22508:	mov	w0, wzr
   2250c:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22510:	ldr	x8, [x21]
   22514:	ldrh	w8, [x8, x20, lsl #1]
   22518:	tbz	w8, #8, 22500 <rpl_re_set_registers@@Base+0x3958>
   2251c:	mov	x0, x19
   22520:	mov	x1, x20
   22524:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22528:	b	22500 <rpl_re_set_registers@@Base+0x3958>
   2252c:	bl	b140 <__ctype_b_loc@plt>
   22530:	mov	x21, x0
   22534:	cbz	x20, 22550 <rpl_re_set_registers@@Base+0x39a8>
   22538:	mov	x22, xzr
   2253c:	b	227c0 <rpl_re_set_registers@@Base+0x3c18>
   22540:	add	x20, x20, #0x1
   22544:	cmp	x20, #0x100
   22548:	mov	w0, wzr
   2254c:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22550:	ldr	x8, [x21]
   22554:	ldrh	w8, [x8, x20, lsl #1]
   22558:	tbz	w8, #0, 22540 <rpl_re_set_registers@@Base+0x3998>
   2255c:	mov	x0, x19
   22560:	mov	x1, x20
   22564:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22568:	b	22540 <rpl_re_set_registers@@Base+0x3998>
   2256c:	add	x22, x22, #0x1
   22570:	cmp	x22, #0x100
   22574:	mov	w0, wzr
   22578:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   2257c:	ldr	x8, [x21]
   22580:	ldrh	w8, [x8, x22, lsl #1]
   22584:	tbz	w8, #3, 2256c <rpl_re_set_registers@@Base+0x39c4>
   22588:	ldrb	w1, [x20, x22]
   2258c:	mov	x0, x19
   22590:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22594:	b	2256c <rpl_re_set_registers@@Base+0x39c4>
   22598:	bl	b140 <__ctype_b_loc@plt>
   2259c:	mov	x21, x0
   225a0:	cbz	x20, 225bc <rpl_re_set_registers@@Base+0x3a14>
   225a4:	mov	x22, xzr
   225a8:	b	227ec <rpl_re_set_registers@@Base+0x3c44>
   225ac:	add	x20, x20, #0x1
   225b0:	cmp	x20, #0x100
   225b4:	mov	w0, wzr
   225b8:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   225bc:	ldr	x8, [x21]
   225c0:	ldrsh	w8, [x8, x20, lsl #1]
   225c4:	tbz	w8, #31, 225ac <rpl_re_set_registers@@Base+0x3a04>
   225c8:	mov	x0, x19
   225cc:	mov	x1, x20
   225d0:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   225d4:	b	225ac <rpl_re_set_registers@@Base+0x3a04>
   225d8:	add	x22, x22, #0x1
   225dc:	cmp	x22, #0x100
   225e0:	mov	w0, wzr
   225e4:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   225e8:	ldr	x8, [x21]
   225ec:	ldrh	w8, [x8, x22, lsl #1]
   225f0:	tbz	w8, #1, 225d8 <rpl_re_set_registers@@Base+0x3a30>
   225f4:	ldrb	w1, [x20, x22]
   225f8:	mov	x0, x19
   225fc:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22600:	b	225d8 <rpl_re_set_registers@@Base+0x3a30>
   22604:	bl	b140 <__ctype_b_loc@plt>
   22608:	mov	x21, x0
   2260c:	cbz	x20, 22628 <rpl_re_set_registers@@Base+0x3a80>
   22610:	mov	x22, xzr
   22614:	b	22818 <rpl_re_set_registers@@Base+0x3c70>
   22618:	add	x20, x20, #0x1
   2261c:	cmp	x20, #0x100
   22620:	mov	w0, wzr
   22624:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22628:	ldr	x8, [x21]
   2262c:	ldrh	w8, [x8, x20, lsl #1]
   22630:	tbz	w8, #2, 22618 <rpl_re_set_registers@@Base+0x3a70>
   22634:	mov	x0, x19
   22638:	mov	x1, x20
   2263c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22640:	b	22618 <rpl_re_set_registers@@Base+0x3a70>
   22644:	add	x22, x22, #0x1
   22648:	cmp	x22, #0x100
   2264c:	mov	w0, wzr
   22650:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22654:	ldr	x8, [x21]
   22658:	ldrh	w8, [x8, x22, lsl #1]
   2265c:	tbz	w8, #9, 22644 <rpl_re_set_registers@@Base+0x3a9c>
   22660:	ldrb	w1, [x20, x22]
   22664:	mov	x0, x19
   22668:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   2266c:	b	22644 <rpl_re_set_registers@@Base+0x3a9c>
   22670:	bl	b140 <__ctype_b_loc@plt>
   22674:	mov	x21, x0
   22678:	cbz	x20, 22694 <rpl_re_set_registers@@Base+0x3aec>
   2267c:	mov	x22, xzr
   22680:	b	22844 <rpl_re_set_registers@@Base+0x3c9c>
   22684:	add	x20, x20, #0x1
   22688:	cmp	x20, #0x100
   2268c:	mov	w0, wzr
   22690:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22694:	ldr	x8, [x21]
   22698:	ldrh	w8, [x8, x20, lsl #1]
   2269c:	tbz	w8, #12, 22684 <rpl_re_set_registers@@Base+0x3adc>
   226a0:	mov	x0, x19
   226a4:	mov	x1, x20
   226a8:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   226ac:	b	22684 <rpl_re_set_registers@@Base+0x3adc>
   226b0:	add	x22, x22, #0x1
   226b4:	cmp	x22, #0x100
   226b8:	mov	w0, wzr
   226bc:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   226c0:	ldr	x8, [x21]
   226c4:	ldrh	w8, [x8, x22, lsl #1]
   226c8:	tbz	w8, #13, 226b0 <rpl_re_set_registers@@Base+0x3b08>
   226cc:	ldrb	w1, [x20, x22]
   226d0:	mov	x0, x19
   226d4:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   226d8:	b	226b0 <rpl_re_set_registers@@Base+0x3b08>
   226dc:	add	x22, x22, #0x1
   226e0:	cmp	x22, #0x100
   226e4:	mov	w0, wzr
   226e8:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   226ec:	ldr	x8, [x21]
   226f0:	ldrh	w8, [x8, x22, lsl #1]
   226f4:	tbz	w8, #10, 226dc <rpl_re_set_registers@@Base+0x3b34>
   226f8:	ldrb	w1, [x20, x22]
   226fc:	mov	x0, x19
   22700:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22704:	b	226dc <rpl_re_set_registers@@Base+0x3b34>
   22708:	add	x22, x22, #0x1
   2270c:	cmp	x22, #0x100
   22710:	mov	w0, wzr
   22714:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22718:	ldr	x8, [x21]
   2271c:	ldrh	w8, [x8, x22, lsl #1]
   22720:	tbz	w8, #11, 22708 <rpl_re_set_registers@@Base+0x3b60>
   22724:	ldrb	w1, [x20, x22]
   22728:	mov	x0, x19
   2272c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22730:	b	22708 <rpl_re_set_registers@@Base+0x3b60>
   22734:	ldr	x0, [x22, #24]
   22738:	mov	w24, #0x1                   	// #1
   2273c:	bfi	x24, x8, #1, #63
   22740:	lsl	x1, x24, #3
   22744:	bl	aea0 <realloc@plt>
   22748:	cbz	x0, 22860 <rpl_re_set_registers@@Base+0x3cb8>
   2274c:	str	x0, [x22, #24]
   22750:	str	x24, [x23]
   22754:	b	22218 <rpl_re_set_registers@@Base+0x3670>
   22758:	add	x22, x22, #0x1
   2275c:	cmp	x22, #0x100
   22760:	mov	w0, wzr
   22764:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22768:	ldr	x8, [x21]
   2276c:	ldrh	w8, [x8, x22, lsl #1]
   22770:	tbz	w8, #14, 22758 <rpl_re_set_registers@@Base+0x3bb0>
   22774:	ldrb	w1, [x20, x22]
   22778:	mov	x0, x19
   2277c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22780:	b	22758 <rpl_re_set_registers@@Base+0x3bb0>
   22784:	add	x22, x22, #0x1
   22788:	cmp	x22, #0x100
   2278c:	mov	w0, wzr
   22790:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22794:	ldr	x8, [x21]
   22798:	ldrh	w8, [x8, x22, lsl #1]
   2279c:	tbz	w8, #8, 22784 <rpl_re_set_registers@@Base+0x3bdc>
   227a0:	ldrb	w1, [x20, x22]
   227a4:	mov	x0, x19
   227a8:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   227ac:	b	22784 <rpl_re_set_registers@@Base+0x3bdc>
   227b0:	add	x22, x22, #0x1
   227b4:	cmp	x22, #0x100
   227b8:	mov	w0, wzr
   227bc:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   227c0:	ldr	x8, [x21]
   227c4:	ldrh	w8, [x8, x22, lsl #1]
   227c8:	tbz	w8, #0, 227b0 <rpl_re_set_registers@@Base+0x3c08>
   227cc:	ldrb	w1, [x20, x22]
   227d0:	mov	x0, x19
   227d4:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   227d8:	b	227b0 <rpl_re_set_registers@@Base+0x3c08>
   227dc:	add	x22, x22, #0x1
   227e0:	cmp	x22, #0x100
   227e4:	mov	w0, wzr
   227e8:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   227ec:	ldr	x8, [x21]
   227f0:	ldrsh	w8, [x8, x22, lsl #1]
   227f4:	tbz	w8, #31, 227dc <rpl_re_set_registers@@Base+0x3c34>
   227f8:	ldrb	w1, [x20, x22]
   227fc:	mov	x0, x19
   22800:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22804:	b	227dc <rpl_re_set_registers@@Base+0x3c34>
   22808:	add	x22, x22, #0x1
   2280c:	cmp	x22, #0x100
   22810:	mov	w0, wzr
   22814:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22818:	ldr	x8, [x21]
   2281c:	ldrh	w8, [x8, x22, lsl #1]
   22820:	tbz	w8, #2, 22808 <rpl_re_set_registers@@Base+0x3c60>
   22824:	ldrb	w1, [x20, x22]
   22828:	mov	x0, x19
   2282c:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   22830:	b	22808 <rpl_re_set_registers@@Base+0x3c60>
   22834:	add	x22, x22, #0x1
   22838:	cmp	x22, #0x100
   2283c:	mov	w0, wzr
   22840:	b.eq	22498 <rpl_re_set_registers@@Base+0x38f0>  // b.none
   22844:	ldr	x8, [x21]
   22848:	ldrh	w8, [x8, x22, lsl #1]
   2284c:	tbz	w8, #12, 22834 <rpl_re_set_registers@@Base+0x3c8c>
   22850:	ldrb	w1, [x20, x22]
   22854:	mov	x0, x19
   22858:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   2285c:	b	22834 <rpl_re_set_registers@@Base+0x3c8c>
   22860:	mov	w0, #0xc                   	// #12
   22864:	b	22498 <rpl_re_set_registers@@Base+0x38f0>
   22868:	mov	x8, xzr
   2286c:	ldr	x9, [x0, x8]
   22870:	mvn	x9, x9
   22874:	str	x9, [x0, x8]
   22878:	add	x8, x8, #0x8
   2287c:	cmp	x8, #0x20
   22880:	b.ne	2286c <rpl_re_set_registers@@Base+0x3cc4>  // b.any
   22884:	ret
   22888:	mov	x8, xzr
   2288c:	ldr	x9, [x1, x8]
   22890:	ldr	x10, [x0, x8]
   22894:	and	x9, x10, x9
   22898:	str	x9, [x0, x8]
   2289c:	add	x8, x8, #0x8
   228a0:	cmp	x8, #0x20
   228a4:	b.ne	2288c <rpl_re_set_registers@@Base+0x3ce4>  // b.any
   228a8:	ret
   228ac:	ldr	w9, [x0, #144]
   228b0:	cmp	w9, #0x1
   228b4:	b.eq	228fc <rpl_re_set_registers@@Base+0x3d54>  // b.none
   228b8:	ldr	x9, [x0, #48]
   228bc:	add	x10, x1, #0x1
   228c0:	mov	x8, x0
   228c4:	cmp	x10, x9
   228c8:	b.ge	228fc <rpl_re_set_registers@@Base+0x3d54>  // b.tcont
   228cc:	ldr	x9, [x8, #16]
   228d0:	mov	w0, #0x1                   	// #1
   228d4:	add	x9, x9, x1, lsl #2
   228d8:	ldr	w10, [x9, x0, lsl #2]
   228dc:	cmn	w10, #0x1
   228e0:	b.ne	228f8 <rpl_re_set_registers@@Base+0x3d50>  // b.any
   228e4:	ldr	x10, [x8, #48]
   228e8:	add	x0, x0, #0x1
   228ec:	add	x11, x1, x0
   228f0:	cmp	x11, x10
   228f4:	b.lt	228d8 <rpl_re_set_registers@@Base+0x3d30>  // b.tstop
   228f8:	ret
   228fc:	mov	w0, #0x1                   	// #1
   22900:	ret
   22904:	stp	x29, x30, [sp, #-64]!
   22908:	stp	x22, x21, [sp, #32]
   2290c:	stp	x20, x19, [sp, #48]
   22910:	ldr	x8, [x1, #104]
   22914:	ldr	x9, [x1, #72]
   22918:	str	x23, [sp, #16]
   2291c:	mov	x29, sp
   22920:	cmp	x8, x9
   22924:	b.le	229e4 <rpl_re_set_registers@@Base+0x3e3c>
   22928:	ldrb	w23, [x2]
   2292c:	mov	x20, x2
   22930:	mov	x21, x1
   22934:	mov	x19, x0
   22938:	mov	x22, xzr
   2293c:	b	22954 <rpl_re_set_registers@@Base+0x3dac>
   22940:	ldr	x8, [x19, #8]
   22944:	strb	w0, [x8, x22]
   22948:	add	x22, x22, #0x1
   2294c:	cmp	x22, #0x20
   22950:	b.eq	229e4 <rpl_re_set_registers@@Base+0x3e3c>  // b.none
   22954:	ldrb	w8, [x20, #8]
   22958:	cmp	w8, #0x1e
   2295c:	b.ne	2296c <rpl_re_set_registers@@Base+0x3dc4>  // b.any
   22960:	mov	x0, x21
   22964:	bl	22a18 <rpl_re_set_registers@@Base+0x3e70>
   22968:	b	22980 <rpl_re_set_registers@@Base+0x3dd8>
   2296c:	ldr	x8, [x21, #72]
   22970:	ldr	x9, [x21, #8]
   22974:	add	x10, x8, #0x1
   22978:	str	x10, [x21, #72]
   2297c:	ldrb	w0, [x9, x8]
   22980:	ldr	x9, [x21, #104]
   22984:	ldr	x8, [x21, #72]
   22988:	cmp	x9, x8
   2298c:	b.le	229e4 <rpl_re_set_registers@@Base+0x3e3c>
   22990:	cmp	w23, w0, uxtb
   22994:	b.ne	22940 <rpl_re_set_registers@@Base+0x3d98>  // b.any
   22998:	ldr	x9, [x21, #8]
   2299c:	ldrb	w9, [x9, x8]
   229a0:	cmp	w9, #0x5d
   229a4:	b.ne	22940 <rpl_re_set_registers@@Base+0x3d98>  // b.any
   229a8:	add	x8, x8, #0x1
   229ac:	str	x8, [x21, #72]
   229b0:	ldr	x8, [x19, #8]
   229b4:	strb	wzr, [x8, x22]
   229b8:	ldrb	w8, [x20, #8]
   229bc:	cmp	w8, #0x1e
   229c0:	b.eq	229fc <rpl_re_set_registers@@Base+0x3e54>  // b.none
   229c4:	cmp	w8, #0x1c
   229c8:	b.eq	22a08 <rpl_re_set_registers@@Base+0x3e60>  // b.none
   229cc:	cmp	w8, #0x1a
   229d0:	mov	w0, wzr
   229d4:	b.ne	229e8 <rpl_re_set_registers@@Base+0x3e40>  // b.any
   229d8:	mov	w0, wzr
   229dc:	mov	w8, #0x3                   	// #3
   229e0:	b	22a10 <rpl_re_set_registers@@Base+0x3e68>
   229e4:	mov	w0, #0x7                   	// #7
   229e8:	ldp	x20, x19, [sp, #48]
   229ec:	ldp	x22, x21, [sp, #32]
   229f0:	ldr	x23, [sp, #16]
   229f4:	ldp	x29, x30, [sp], #64
   229f8:	ret
   229fc:	mov	w0, wzr
   22a00:	mov	w8, #0x4                   	// #4
   22a04:	b	22a10 <rpl_re_set_registers@@Base+0x3e68>
   22a08:	mov	w0, wzr
   22a0c:	mov	w8, #0x2                   	// #2
   22a10:	str	w8, [x19]
   22a14:	b	229e8 <rpl_re_set_registers@@Base+0x3e40>
   22a18:	stp	x29, x30, [sp, #-48]!
   22a1c:	stp	x20, x19, [sp, #32]
   22a20:	ldrb	w8, [x0, #139]
   22a24:	str	x21, [sp, #16]
   22a28:	mov	x29, sp
   22a2c:	cbnz	w8, 22a58 <rpl_re_set_registers@@Base+0x3eb0>
   22a30:	ldr	x8, [x0, #72]
   22a34:	ldr	x9, [x0, #8]
   22a38:	add	x10, x8, #0x1
   22a3c:	str	x10, [x0, #72]
   22a40:	ldrb	w19, [x9, x8]
   22a44:	mov	w0, w19
   22a48:	ldp	x20, x19, [sp, #32]
   22a4c:	ldr	x21, [sp, #16]
   22a50:	ldp	x29, x30, [sp], #48
   22a54:	ret
   22a58:	ldrb	w8, [x0, #140]
   22a5c:	cbz	w8, 22ab4 <rpl_re_set_registers@@Base+0x3f0c>
   22a60:	ldr	x21, [x0, #72]
   22a64:	ldr	x8, [x0, #48]
   22a68:	cmp	x21, x8
   22a6c:	b.eq	22a80 <rpl_re_set_registers@@Base+0x3ed8>  // b.none
   22a70:	ldr	x8, [x0, #16]
   22a74:	ldr	w8, [x8, x21, lsl #2]
   22a78:	cmn	w8, #0x1
   22a7c:	b.eq	22ad4 <rpl_re_set_registers@@Base+0x3f2c>  // b.none
   22a80:	ldr	x8, [x0, #24]
   22a84:	ldr	x9, [x0, #40]
   22a88:	ldr	x10, [x0]
   22a8c:	ldr	x8, [x8, x21, lsl #3]
   22a90:	add	x8, x9, x8
   22a94:	ldrsb	w19, [x10, x8]
   22a98:	tbnz	w19, #31, 22ad4 <rpl_re_set_registers@@Base+0x3f2c>
   22a9c:	mov	x1, x21
   22aa0:	mov	x20, x0
   22aa4:	bl	228ac <rpl_re_set_registers@@Base+0x3d04>
   22aa8:	add	x8, x21, w0, sxtw
   22aac:	str	x8, [x20, #72]
   22ab0:	b	22a44 <rpl_re_set_registers@@Base+0x3e9c>
   22ab4:	ldr	x8, [x0, #72]
   22ab8:	ldr	x9, [x0, #40]
   22abc:	ldr	x10, [x0]
   22ac0:	add	x11, x8, #0x1
   22ac4:	str	x11, [x0, #72]
   22ac8:	add	x8, x8, x9
   22acc:	ldrb	w19, [x10, x8]
   22ad0:	b	22a44 <rpl_re_set_registers@@Base+0x3e9c>
   22ad4:	ldr	x8, [x0, #8]
   22ad8:	add	x9, x21, #0x1
   22adc:	str	x9, [x0, #72]
   22ae0:	ldrb	w19, [x8, x21]
   22ae4:	b	22a44 <rpl_re_set_registers@@Base+0x3e9c>
   22ae8:	and	w0, w0, #0xff
   22aec:	cbz	x1, 22b00 <rpl_re_set_registers@@Base+0x3f58>
   22af0:	stp	x29, x30, [sp, #-16]!
   22af4:	mov	x29, sp
   22af8:	bl	aff0 <btowc@plt>
   22afc:	ldp	x29, x30, [sp], #16
   22b00:	ret
   22b04:	stp	x29, x30, [sp, #-80]!
   22b08:	str	x25, [sp, #16]
   22b0c:	stp	x24, x23, [sp, #32]
   22b10:	stp	x22, x21, [sp, #48]
   22b14:	stp	x20, x19, [sp, #64]
   22b18:	mov	x19, x2
   22b1c:	mov	x20, x1
   22b20:	mov	x21, x0
   22b24:	mov	x9, #0xffffffffffffffff    	// #-1
   22b28:	mov	w23, #0xa                   	// #10
   22b2c:	mov	w24, #0x8030                	// #32816
   22b30:	mov	w25, #0x8000                	// #32768
   22b34:	mov	x29, sp
   22b38:	mov	x0, x20
   22b3c:	mov	x1, x21
   22b40:	mov	x2, x19
   22b44:	mov	x22, x9
   22b48:	bl	20050 <rpl_re_set_registers@@Base+0x14a8>
   22b4c:	ldrb	w10, [x20, #8]
   22b50:	cmp	w10, #0x18
   22b54:	b.eq	22bbc <rpl_re_set_registers@@Base+0x4014>  // b.none
   22b58:	cmp	w10, #0x2
   22b5c:	b.eq	22bb8 <rpl_re_set_registers@@Base+0x4010>  // b.none
   22b60:	ldrb	w8, [x20]
   22b64:	cmp	w8, #0x2c
   22b68:	b.eq	22bbc <rpl_re_set_registers@@Base+0x4014>  // b.none
   22b6c:	cmp	w8, #0x30
   22b70:	mov	x9, #0xfffffffffffffffe    	// #-2
   22b74:	b.cc	22b38 <rpl_re_set_registers@@Base+0x3f90>  // b.lo, b.ul, b.last
   22b78:	cmp	w10, #0x1
   22b7c:	b.ne	22b38 <rpl_re_set_registers@@Base+0x3f90>  // b.any
   22b80:	cmn	x22, #0x2
   22b84:	mov	x9, #0xfffffffffffffffe    	// #-2
   22b88:	b.eq	22b38 <rpl_re_set_registers@@Base+0x3f90>  // b.none
   22b8c:	cmp	w8, #0x39
   22b90:	b.hi	22b38 <rpl_re_set_registers@@Base+0x3f90>  // b.pmore
   22b94:	cmn	x22, #0x1
   22b98:	b.eq	22bb0 <rpl_re_set_registers@@Base+0x4008>  // b.none
   22b9c:	madd	x8, x22, x23, x8
   22ba0:	sub	x9, x8, #0x30
   22ba4:	cmp	x8, x24
   22ba8:	csel	x9, x25, x9, gt
   22bac:	b	22b38 <rpl_re_set_registers@@Base+0x3f90>
   22bb0:	sub	x9, x8, #0x30
   22bb4:	b	22b38 <rpl_re_set_registers@@Base+0x3f90>
   22bb8:	mov	x22, #0xfffffffffffffffe    	// #-2
   22bbc:	mov	x0, x22
   22bc0:	ldp	x20, x19, [sp, #64]
   22bc4:	ldp	x22, x21, [sp, #48]
   22bc8:	ldp	x24, x23, [sp, #32]
   22bcc:	ldr	x25, [sp, #16]
   22bd0:	ldp	x29, x30, [sp], #80
   22bd4:	ret
   22bd8:	stp	x29, x30, [sp, #-64]!
   22bdc:	str	x23, [sp, #16]
   22be0:	stp	x22, x21, [sp, #32]
   22be4:	stp	x20, x19, [sp, #48]
   22be8:	mov	x3, x0
   22bec:	ldr	x22, [x3], #40
   22bf0:	mov	x20, x0
   22bf4:	mov	x19, x1
   22bf8:	mov	x0, x1
   22bfc:	mov	x1, xzr
   22c00:	mov	x2, xzr
   22c04:	mov	x29, sp
   22c08:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   22c0c:	str	x0, [x29, #24]
   22c10:	cbz	x0, 22ca4 <rpl_re_set_registers@@Base+0x40fc>
   22c14:	add	x23, x29, #0x18
   22c18:	b	22c2c <rpl_re_set_registers@@Base+0x4084>
   22c1c:	ldr	x21, [x29, #24]
   22c20:	mov	w8, wzr
   22c24:	cbnz	w8, 22c88 <rpl_re_set_registers@@Base+0x40e0>
   22c28:	b	22ca8 <rpl_re_set_registers@@Base+0x4100>
   22c2c:	str	x22, [x0]
   22c30:	ldr	x8, [x23]
   22c34:	ldr	w9, [x8, #48]
   22c38:	orr	w9, w9, #0x40000
   22c3c:	str	w9, [x8, #48]
   22c40:	ldr	x8, [x20, #8]
   22c44:	ldr	x22, [x23]
   22c48:	cbz	x8, 22c64 <rpl_re_set_registers@@Base+0x40bc>
   22c4c:	add	x23, x22, #0x8
   22c50:	mov	x20, x8
   22c54:	b	22c88 <rpl_re_set_registers@@Base+0x40e0>
   22c58:	ldr	x20, [x8]
   22c5c:	ldr	x22, [x22]
   22c60:	cbz	x20, 22c1c <rpl_re_set_registers@@Base+0x4074>
   22c64:	mov	x9, x8
   22c68:	mov	x8, x20
   22c6c:	ldr	x20, [x20, #16]
   22c70:	cmp	x20, x9
   22c74:	b.eq	22c58 <rpl_re_set_registers@@Base+0x40b0>  // b.none
   22c78:	cbz	x20, 22c58 <rpl_re_set_registers@@Base+0x40b0>
   22c7c:	add	x23, x22, #0x10
   22c80:	mov	w8, #0x1                   	// #1
   22c84:	cbz	w8, 22ca8 <rpl_re_set_registers@@Base+0x4100>
   22c88:	add	x3, x20, #0x28
   22c8c:	mov	x0, x19
   22c90:	mov	x1, xzr
   22c94:	mov	x2, xzr
   22c98:	bl	20eb8 <rpl_re_set_registers@@Base+0x2310>
   22c9c:	str	x0, [x23]
   22ca0:	cbnz	x0, 22c2c <rpl_re_set_registers@@Base+0x4084>
   22ca4:	mov	x21, xzr
   22ca8:	mov	x0, x21
   22cac:	ldp	x20, x19, [sp, #48]
   22cb0:	ldp	x22, x21, [sp, #32]
   22cb4:	ldr	x23, [sp, #16]
   22cb8:	ldp	x29, x30, [sp], #64
   22cbc:	ret
   22cc0:	ldr	w8, [x1, #48]
   22cc4:	and	w9, w8, #0xff
   22cc8:	cmp	w9, #0x11
   22ccc:	b.ne	22ce4 <rpl_re_set_registers@@Base+0x413c>  // b.any
   22cd0:	ldr	x9, [x1, #40]
   22cd4:	cmp	x9, x0
   22cd8:	b.ne	22ce4 <rpl_re_set_registers@@Base+0x413c>  // b.any
   22cdc:	orr	w8, w8, #0x80000
   22ce0:	str	w8, [x1, #48]
   22ce4:	mov	w0, wzr
   22ce8:	ret
   22cec:	stp	x29, x30, [sp, #-48]!
   22cf0:	stp	x22, x21, [sp, #16]
   22cf4:	stp	x20, x19, [sp, #32]
   22cf8:	mov	x19, x2
   22cfc:	mov	x20, x1
   22d00:	mov	x22, x0
   22d04:	mov	x29, sp
   22d08:	b	22d18 <rpl_re_set_registers@@Base+0x4170>
   22d0c:	mov	w9, wzr
   22d10:	mov	x22, x8
   22d14:	cbnz	w9, 22d8c <rpl_re_set_registers@@Base+0x41e4>
   22d18:	mov	x0, x19
   22d1c:	mov	x1, x22
   22d20:	blr	x20
   22d24:	cbnz	w0, 22d80 <rpl_re_set_registers@@Base+0x41d8>
   22d28:	ldr	x8, [x22, #8]
   22d2c:	cbnz	x8, 22d0c <rpl_re_set_registers@@Base+0x4164>
   22d30:	mov	x9, xzr
   22d34:	b	22d40 <rpl_re_set_registers@@Base+0x4198>
   22d38:	ldr	x22, [x9]
   22d3c:	cbz	x22, 22d68 <rpl_re_set_registers@@Base+0x41c0>
   22d40:	ldr	x8, [x22, #16]
   22d44:	mov	x10, x9
   22d48:	mov	x9, x22
   22d4c:	cmp	x8, x10
   22d50:	b.eq	22d38 <rpl_re_set_registers@@Base+0x4190>  // b.none
   22d54:	cbz	x8, 22d38 <rpl_re_set_registers@@Base+0x4190>
   22d58:	mov	w9, wzr
   22d5c:	mov	x22, x8
   22d60:	cbnz	w9, 22d14 <rpl_re_set_registers@@Base+0x416c>
   22d64:	b	22d0c <rpl_re_set_registers@@Base+0x4164>
   22d68:	mov	x8, xzr
   22d6c:	mov	w21, wzr
   22d70:	mov	w9, #0x1                   	// #1
   22d74:	mov	x22, x8
   22d78:	cbnz	w9, 22d14 <rpl_re_set_registers@@Base+0x416c>
   22d7c:	b	22d0c <rpl_re_set_registers@@Base+0x4164>
   22d80:	mov	w9, #0x1                   	// #1
   22d84:	mov	w21, w0
   22d88:	b	22d14 <rpl_re_set_registers@@Base+0x416c>
   22d8c:	mov	w0, w21
   22d90:	ldp	x20, x19, [sp, #32]
   22d94:	ldp	x22, x21, [sp, #16]
   22d98:	ldp	x29, x30, [sp], #48
   22d9c:	ret
   22da0:	ldrb	w8, [x1, #48]
   22da4:	cmp	w8, #0x11
   22da8:	b.eq	22dec <rpl_re_set_registers@@Base+0x4244>  // b.none
   22dac:	cmp	w8, #0x4
   22db0:	b.ne	22e40 <rpl_re_set_registers@@Base+0x4298>  // b.any
   22db4:	ldr	x9, [x0, #224]
   22db8:	cbz	x9, 22de4 <rpl_re_set_registers@@Base+0x423c>
   22dbc:	ldr	x8, [x1, #40]
   22dc0:	mov	w10, #0x1                   	// #1
   22dc4:	sbfiz	x8, x8, #3, #32
   22dc8:	ldr	x8, [x9, x8]
   22dcc:	str	x8, [x1, #40]
   22dd0:	ldr	x9, [x0, #160]
   22dd4:	lsl	w8, w10, w8
   22dd8:	sxtw	x8, w8
   22ddc:	orr	x8, x9, x8
   22de0:	b	22e3c <rpl_re_set_registers@@Base+0x4294>
   22de4:	cmp	w8, #0x11
   22de8:	b.ne	22e40 <rpl_re_set_registers@@Base+0x4298>  // b.any
   22dec:	ldr	x8, [x1, #8]
   22df0:	cbz	x8, 22e40 <rpl_re_set_registers@@Base+0x4298>
   22df4:	ldrb	w9, [x8, #48]
   22df8:	cmp	w9, #0x11
   22dfc:	b.ne	22e40 <rpl_re_set_registers@@Base+0x4298>  // b.any
   22e00:	ldr	x9, [x8, #8]
   22e04:	ldr	x8, [x8, #40]
   22e08:	str	x9, [x1, #8]
   22e0c:	cbz	x9, 22e14 <rpl_re_set_registers@@Base+0x426c>
   22e10:	str	x1, [x9]
   22e14:	ldr	x9, [x0, #224]
   22e18:	ldr	x10, [x1, #40]
   22e1c:	cmp	x8, #0x3f
   22e20:	ldr	x10, [x9, x10, lsl #3]
   22e24:	str	x10, [x9, x8, lsl #3]
   22e28:	b.gt	22e40 <rpl_re_set_registers@@Base+0x4298>
   22e2c:	ldr	x9, [x0, #160]
   22e30:	mov	w10, #0x1                   	// #1
   22e34:	lsl	x8, x10, x8
   22e38:	bic	x8, x9, x8
   22e3c:	str	x8, [x0, #160]
   22e40:	mov	w0, wzr
   22e44:	ret
   22e48:	sub	sp, sp, #0x30
   22e4c:	stp	x29, x30, [sp, #16]
   22e50:	add	x29, sp, #0x10
   22e54:	stp	x20, x19, [sp, #32]
   22e58:	stur	wzr, [x29, #-4]
   22e5c:	ldr	x2, [x1, #8]
   22e60:	mov	x19, x1
   22e64:	mov	x20, x0
   22e68:	cbz	x2, 22e90 <rpl_re_set_registers@@Base+0x42e8>
   22e6c:	ldrb	w8, [x2, #48]
   22e70:	cmp	w8, #0x11
   22e74:	b.ne	22e90 <rpl_re_set_registers@@Base+0x42e8>  // b.any
   22e78:	sub	x0, x29, #0x4
   22e7c:	mov	x1, x20
   22e80:	bl	23358 <rpl_re_set_registers@@Base+0x47b0>
   22e84:	str	x0, [x19, #8]
   22e88:	cbz	x0, 22e90 <rpl_re_set_registers@@Base+0x42e8>
   22e8c:	str	x19, [x0]
   22e90:	ldr	x2, [x19, #16]
   22e94:	cbz	x2, 22ebc <rpl_re_set_registers@@Base+0x4314>
   22e98:	ldrb	w8, [x2, #48]
   22e9c:	cmp	w8, #0x11
   22ea0:	b.ne	22ebc <rpl_re_set_registers@@Base+0x4314>  // b.any
   22ea4:	sub	x0, x29, #0x4
   22ea8:	mov	x1, x20
   22eac:	bl	23358 <rpl_re_set_registers@@Base+0x47b0>
   22eb0:	str	x0, [x19, #16]
   22eb4:	cbz	x0, 22ebc <rpl_re_set_registers@@Base+0x4314>
   22eb8:	str	x19, [x0]
   22ebc:	ldur	w0, [x29, #-4]
   22ec0:	ldp	x20, x19, [sp, #32]
   22ec4:	ldp	x29, x30, [sp, #16]
   22ec8:	add	sp, sp, #0x30
   22ecc:	ret
   22ed0:	stp	x29, x30, [sp, #-32]!
   22ed4:	stp	x20, x19, [sp, #16]
   22ed8:	ldrb	w8, [x1, #48]
   22edc:	mov	x19, x1
   22ee0:	mov	x29, sp
   22ee4:	cmp	w8, #0x10
   22ee8:	b.ne	22f08 <rpl_re_set_registers@@Base+0x4360>  // b.any
   22eec:	ldr	x8, [x19, #8]
   22ef0:	mov	w0, wzr
   22ef4:	ldr	x9, [x8, #24]
   22ef8:	str	x9, [x19, #24]
   22efc:	ldr	x8, [x8, #56]
   22f00:	str	x8, [x19, #56]
   22f04:	b	22f58 <rpl_re_set_registers@@Base+0x43b0>
   22f08:	ldp	x1, x2, [x19, #40]
   22f0c:	mov	x20, x0
   22f10:	str	x19, [x19, #24]
   22f14:	bl	2347c <rpl_re_set_registers@@Base+0x48d4>
   22f18:	cmn	x0, #0x1
   22f1c:	str	x0, [x19, #56]
   22f20:	b.eq	22f64 <rpl_re_set_registers@@Base+0x43bc>  // b.none
   22f24:	ldrb	w9, [x19, #48]
   22f28:	cmp	w9, #0xc
   22f2c:	b.ne	22f54 <rpl_re_set_registers@@Base+0x43ac>  // b.any
   22f30:	ldr	x9, [x20]
   22f34:	mov	x8, x0
   22f38:	ldr	w10, [x19, #40]
   22f3c:	mov	w0, wzr
   22f40:	add	x8, x9, x8, lsl #4
   22f44:	ldr	w9, [x8, #8]
   22f48:	bfi	w9, w10, #8, #10
   22f4c:	str	w9, [x8, #8]
   22f50:	b	22f58 <rpl_re_set_registers@@Base+0x43b0>
   22f54:	mov	w0, wzr
   22f58:	ldp	x20, x19, [sp, #16]
   22f5c:	ldp	x29, x30, [sp], #32
   22f60:	ret
   22f64:	mov	w0, #0xc                   	// #12
   22f68:	b	22f58 <rpl_re_set_registers@@Base+0x43b0>
   22f6c:	ldrb	w8, [x1, #48]
   22f70:	cmp	w8, #0x10
   22f74:	b.eq	22f90 <rpl_re_set_registers@@Base+0x43e8>  // b.none
   22f78:	cmp	w8, #0xb
   22f7c:	b.ne	22fa0 <rpl_re_set_registers@@Base+0x43f8>  // b.any
   22f80:	ldr	x8, [x1, #8]
   22f84:	mov	w0, wzr
   22f88:	str	x1, [x8, #32]
   22f8c:	ret
   22f90:	ldp	x9, x8, [x1, #8]
   22f94:	ldr	x10, [x8, #24]
   22f98:	str	x10, [x9, #32]
   22f9c:	b	22fb8 <rpl_re_set_registers@@Base+0x4410>
   22fa0:	ldr	x8, [x1, #8]
   22fa4:	cbz	x8, 22fb0 <rpl_re_set_registers@@Base+0x4408>
   22fa8:	ldr	x9, [x1, #32]
   22fac:	str	x9, [x8, #32]
   22fb0:	ldr	x8, [x1, #16]
   22fb4:	cbz	x8, 22fc0 <rpl_re_set_registers@@Base+0x4418>
   22fb8:	ldr	x9, [x1, #32]
   22fbc:	str	x9, [x8, #32]
   22fc0:	mov	w0, wzr
   22fc4:	ret
   22fc8:	stp	x29, x30, [sp, #-16]!
   22fcc:	ldr	w8, [x1, #48]
   22fd0:	ldr	x9, [x1, #56]
   22fd4:	mov	x29, sp
   22fd8:	and	w10, w8, #0xff
   22fdc:	sub	w10, w10, #0x2
   22fe0:	cmp	w10, #0xe
   22fe4:	b.hi	230c0 <rpl_re_set_registers@@Base+0x4518>  // b.pmore
   22fe8:	adrp	x11, 2d000 <vasnprintf@@Base+0x2ec4>
   22fec:	add	x11, x11, #0x83b
   22ff0:	adr	x12, 23004 <rpl_re_set_registers@@Base+0x445c>
   22ff4:	ldrb	w13, [x11, x10]
   22ff8:	add	x12, x12, x13, lsl #2
   22ffc:	mov	w2, wzr
   23000:	br	x12
   23004:	ldr	x8, [x1, #32]
   23008:	ldr	x10, [x0, #40]
   2300c:	ldr	x1, [x8, #56]
   23010:	mov	w8, #0x18                  	// #24
   23014:	madd	x0, x9, x8, x10
   23018:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   2301c:	mov	w2, w0
   23020:	b	230d8 <rpl_re_set_registers@@Base+0x4530>
   23024:	ldrb	w8, [x0, #176]
   23028:	add	x10, x1, #0x20
   2302c:	orr	w8, w8, #0x1
   23030:	strb	w8, [x0, #176]
   23034:	ldp	x8, x11, [x1, #8]
   23038:	add	x12, x8, #0x18
   2303c:	cmp	x8, #0x0
   23040:	csel	x8, x10, x12, eq  // eq = none
   23044:	ldr	x8, [x8]
   23048:	cmp	x11, #0x0
   2304c:	ldr	x1, [x8, #56]
   23050:	add	x8, x11, #0x18
   23054:	csel	x8, x10, x8, eq  // eq = none
   23058:	tbnz	x1, #63, 230e4 <rpl_re_set_registers@@Base+0x453c>
   2305c:	ldr	x8, [x8]
   23060:	ldr	x2, [x8, #56]
   23064:	tbnz	x2, #63, 23104 <rpl_re_set_registers@@Base+0x455c>
   23068:	ldr	x8, [x0, #40]
   2306c:	mov	w10, #0x18                  	// #24
   23070:	madd	x0, x9, x10, x8
   23074:	bl	23648 <rpl_re_set_registers@@Base+0x4aa0>
   23078:	mov	w2, w0
   2307c:	b	230d8 <rpl_re_set_registers@@Base+0x4530>
   23080:	ldr	x8, [x1, #32]
   23084:	ldr	x10, [x0, #24]
   23088:	ldr	x8, [x8, #56]
   2308c:	str	x8, [x10, x9, lsl #3]
   23090:	ldrb	w10, [x1, #48]
   23094:	cmp	w10, #0x4
   23098:	b.ne	230b8 <rpl_re_set_registers@@Base+0x4510>  // b.any
   2309c:	ldr	x10, [x0, #40]
   230a0:	mov	w11, #0x18                  	// #24
   230a4:	mov	x1, x8
   230a8:	madd	x0, x9, x11, x10
   230ac:	b	23018 <rpl_re_set_registers@@Base+0x4470>
   230b0:	ldr	x8, [x1, #32]
   230b4:	cbnz	x8, 23124 <rpl_re_set_registers@@Base+0x457c>
   230b8:	mov	w2, wzr
   230bc:	b	230d8 <rpl_re_set_registers@@Base+0x4530>
   230c0:	tbnz	w8, #3, 23144 <rpl_re_set_registers@@Base+0x459c>
   230c4:	ldr	x8, [x1, #32]
   230c8:	ldr	x10, [x0, #24]
   230cc:	mov	w2, wzr
   230d0:	ldr	x8, [x8, #56]
   230d4:	str	x8, [x10, x9, lsl #3]
   230d8:	mov	w0, w2
   230dc:	ldp	x29, x30, [sp], #16
   230e0:	ret
   230e4:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   230e8:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   230ec:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   230f0:	add	x0, x0, #0xb8b
   230f4:	add	x1, x1, #0xa9c
   230f8:	add	x3, x3, #0xb58
   230fc:	mov	w2, #0x5af                 	// #1455
   23100:	bl	b6e0 <__assert_fail@plt>
   23104:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   23108:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2310c:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   23110:	add	x0, x0, #0xb95
   23114:	add	x1, x1, #0xa9c
   23118:	add	x3, x3, #0xb58
   2311c:	mov	w2, #0x5b0                 	// #1456
   23120:	bl	b6e0 <__assert_fail@plt>
   23124:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   23128:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2312c:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   23130:	add	x0, x0, #0xb45
   23134:	add	x1, x1, #0xa9c
   23138:	add	x3, x3, #0xb58
   2313c:	mov	w2, #0x59f                 	// #1439
   23140:	bl	b6e0 <__assert_fail@plt>
   23144:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   23148:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   2314c:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   23150:	add	x0, x0, #0xba0
   23154:	add	x1, x1, #0xa9c
   23158:	add	x3, x3, #0xb58
   2315c:	mov	w2, #0x5c2                 	// #1474
   23160:	bl	b6e0 <__assert_fail@plt>
   23164:	sub	sp, sp, #0x60
   23168:	stp	x24, x23, [sp, #48]
   2316c:	stp	x22, x21, [sp, #64]
   23170:	stp	x20, x19, [sp, #80]
   23174:	mov	x19, x0
   23178:	mov	x8, xzr
   2317c:	mov	w23, wzr
   23180:	mov	w22, #0x18                  	// #24
   23184:	stp	x29, x30, [sp, #32]
   23188:	add	x29, sp, #0x20
   2318c:	b	23194 <rpl_re_set_registers@@Base+0x45ec>
   23190:	add	x8, x8, #0x1
   23194:	ldr	x10, [x19, #16]
   23198:	cmp	x8, x10
   2319c:	cset	w9, ne  // ne = any
   231a0:	csel	x21, x8, xzr, ne  // ne = any
   231a4:	tbnz	w23, #0, 231bc <rpl_re_set_registers@@Base+0x4614>
   231a8:	cmp	x8, x10
   231ac:	b.ne	231bc <rpl_re_set_registers@@Base+0x4614>  // b.any
   231b0:	mov	w24, #0x2                   	// #2
   231b4:	cbnz	w24, 23234 <rpl_re_set_registers@@Base+0x468c>
   231b8:	b	23190 <rpl_re_set_registers@@Base+0x45e8>
   231bc:	ldr	x8, [x19, #48]
   231c0:	and	w23, w23, w9
   231c4:	madd	x8, x21, x22, x8
   231c8:	ldr	x8, [x8, #8]
   231cc:	cbz	x8, 231e0 <rpl_re_set_registers@@Base+0x4638>
   231d0:	mov	w24, #0x4                   	// #4
   231d4:	mov	x8, x21
   231d8:	cbnz	w24, 23234 <rpl_re_set_registers@@Base+0x468c>
   231dc:	b	23190 <rpl_re_set_registers@@Base+0x45e8>
   231e0:	add	x0, sp, #0x8
   231e4:	mov	w3, #0x1                   	// #1
   231e8:	mov	x1, x19
   231ec:	mov	x2, x21
   231f0:	mov	w24, #0x1                   	// #1
   231f4:	bl	23728 <rpl_re_set_registers@@Base+0x4b80>
   231f8:	cbnz	w0, 23240 <rpl_re_set_registers@@Base+0x4698>
   231fc:	ldr	x8, [x19, #48]
   23200:	madd	x8, x21, x22, x8
   23204:	ldr	x8, [x8, #8]
   23208:	cbz	x8, 2321c <rpl_re_set_registers@@Base+0x4674>
   2320c:	mov	w24, wzr
   23210:	mov	x8, x21
   23214:	cbnz	w24, 23234 <rpl_re_set_registers@@Base+0x468c>
   23218:	b	23190 <rpl_re_set_registers@@Base+0x45e8>
   2321c:	ldr	x0, [sp, #24]
   23220:	bl	b1d0 <free@plt>
   23224:	mov	w24, wzr
   23228:	mov	w23, #0x1                   	// #1
   2322c:	mov	x8, x21
   23230:	cbz	w24, 23190 <rpl_re_set_registers@@Base+0x45e8>
   23234:	cmp	w24, #0x4
   23238:	b.eq	23190 <rpl_re_set_registers@@Base+0x45e8>  // b.none
   2323c:	b	23250 <rpl_re_set_registers@@Base+0x46a8>
   23240:	mov	x8, x21
   23244:	mov	w20, w0
   23248:	cbnz	w24, 23234 <rpl_re_set_registers@@Base+0x468c>
   2324c:	b	23190 <rpl_re_set_registers@@Base+0x45e8>
   23250:	cmp	w24, #0x2
   23254:	b.ne	2325c <rpl_re_set_registers@@Base+0x46b4>  // b.any
   23258:	mov	w20, wzr
   2325c:	mov	w0, w20
   23260:	ldp	x20, x19, [sp, #80]
   23264:	ldp	x22, x21, [sp, #64]
   23268:	ldp	x24, x23, [sp, #48]
   2326c:	ldp	x29, x30, [sp, #32]
   23270:	add	sp, sp, #0x60
   23274:	ret
   23278:	stp	x29, x30, [sp, #-64]!
   2327c:	stp	x22, x21, [sp, #32]
   23280:	stp	x20, x19, [sp, #48]
   23284:	ldr	x8, [x0, #16]
   23288:	mov	x19, x0
   2328c:	str	x23, [sp, #16]
   23290:	mov	x29, sp
   23294:	cbz	x8, 232c4 <rpl_re_set_registers@@Base+0x471c>
   23298:	mov	x8, xzr
   2329c:	mov	x9, xzr
   232a0:	ldr	x10, [x19, #56]
   232a4:	add	x9, x9, #0x1
   232a8:	add	x10, x10, x8
   232ac:	stp	xzr, xzr, [x10]
   232b0:	str	xzr, [x10, #16]
   232b4:	ldr	x10, [x19, #16]
   232b8:	add	x8, x8, #0x18
   232bc:	cmp	x9, x10
   232c0:	b.cc	232a0 <rpl_re_set_registers@@Base+0x46f8>  // b.lo, b.ul, b.last
   232c4:	ldr	x8, [x19, #16]
   232c8:	cbz	x8, 23338 <rpl_re_set_registers@@Base+0x4790>
   232cc:	mov	x20, xzr
   232d0:	mov	w21, #0x18                  	// #24
   232d4:	b	232e8 <rpl_re_set_registers@@Base+0x4740>
   232d8:	ldr	x8, [x19, #16]
   232dc:	add	x20, x20, #0x1
   232e0:	cmp	x20, x8
   232e4:	b.cs	23338 <rpl_re_set_registers@@Base+0x4790>  // b.hs, b.nlast
   232e8:	ldr	x8, [x19, #48]
   232ec:	madd	x8, x20, x21, x8
   232f0:	ldr	x9, [x8, #8]
   232f4:	cmp	x9, #0x1
   232f8:	b.lt	232d8 <rpl_re_set_registers@@Base+0x4730>  // b.tstop
   232fc:	ldr	x22, [x8, #16]
   23300:	mov	x23, xzr
   23304:	ldr	x8, [x19, #56]
   23308:	ldr	x9, [x22, x23, lsl #3]
   2330c:	mov	x1, x20
   23310:	madd	x0, x9, x21, x8
   23314:	bl	23f78 <rpl_re_set_registers@@Base+0x53d0>
   23318:	tbz	w0, #0, 23350 <rpl_re_set_registers@@Base+0x47a8>
   2331c:	ldr	x8, [x19, #48]
   23320:	add	x23, x23, #0x1
   23324:	madd	x8, x20, x21, x8
   23328:	ldr	x8, [x8, #8]
   2332c:	cmp	x23, x8
   23330:	b.lt	23304 <rpl_re_set_registers@@Base+0x475c>  // b.tstop
   23334:	b	232d8 <rpl_re_set_registers@@Base+0x4730>
   23338:	mov	w0, wzr
   2333c:	ldp	x20, x19, [sp, #48]
   23340:	ldp	x22, x21, [sp, #32]
   23344:	ldr	x23, [sp, #16]
   23348:	ldp	x29, x30, [sp], #64
   2334c:	ret
   23350:	mov	w0, #0xc                   	// #12
   23354:	b	2333c <rpl_re_set_registers@@Base+0x4794>
   23358:	stp	x29, x30, [sp, #-80]!
   2335c:	stp	x24, x23, [sp, #32]
   23360:	stp	x22, x21, [sp, #48]
   23364:	stp	x20, x19, [sp, #64]
   23368:	ldr	x19, [x2, #8]
   2336c:	ldr	x23, [x1]
   23370:	mov	x20, x2
   23374:	mov	x21, x0
   23378:	str	x25, [sp, #16]
   2337c:	mov	x29, sp
   23380:	cbz	x19, 233a4 <rpl_re_set_registers@@Base+0x47fc>
   23384:	ldrb	w8, [x1, #56]
   23388:	tbz	w8, #4, 233a4 <rpl_re_set_registers@@Base+0x47fc>
   2338c:	ldr	x8, [x20, #40]
   23390:	cmp	x8, #0x3f
   23394:	b.gt	23450 <rpl_re_set_registers@@Base+0x48a8>
   23398:	ldr	x9, [x23, #160]
   2339c:	lsr	x8, x9, x8
   233a0:	tbz	w8, #0, 23450 <rpl_re_set_registers@@Base+0x48a8>
   233a4:	mov	w3, #0x8                   	// #8
   233a8:	mov	x0, x23
   233ac:	mov	x1, xzr
   233b0:	mov	x2, xzr
   233b4:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   233b8:	mov	x22, x0
   233bc:	mov	w3, #0x9                   	// #9
   233c0:	mov	x0, x23
   233c4:	mov	x1, xzr
   233c8:	mov	x2, xzr
   233cc:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   233d0:	mov	x24, x0
   233d4:	mov	x25, x0
   233d8:	cbz	x19, 233f4 <rpl_re_set_registers@@Base+0x484c>
   233dc:	mov	w3, #0x10                  	// #16
   233e0:	mov	x0, x23
   233e4:	mov	x1, x19
   233e8:	mov	x2, x24
   233ec:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   233f0:	mov	x25, x0
   233f4:	mov	w3, #0x10                  	// #16
   233f8:	mov	x0, x23
   233fc:	mov	x1, x22
   23400:	mov	x2, x25
   23404:	bl	201c4 <rpl_re_set_registers@@Base+0x161c>
   23408:	cbz	x24, 2346c <rpl_re_set_registers@@Base+0x48c4>
   2340c:	cbz	x22, 2346c <rpl_re_set_registers@@Base+0x48c4>
   23410:	cbz	x25, 2346c <rpl_re_set_registers@@Base+0x48c4>
   23414:	mov	x19, x0
   23418:	cbz	x0, 2346c <rpl_re_set_registers@@Base+0x48c4>
   2341c:	ldr	x8, [x20, #40]
   23420:	str	x8, [x24, #40]
   23424:	str	x8, [x22, #40]
   23428:	ldr	w8, [x20, #48]
   2342c:	ldr	w9, [x24, #48]
   23430:	and	w8, w8, #0x80000
   23434:	and	w9, w9, #0xfff7ffff
   23438:	orr	w9, w9, w8
   2343c:	str	w9, [x24, #48]
   23440:	ldr	w9, [x22, #48]
   23444:	and	w9, w9, #0xfff7ffff
   23448:	orr	w8, w9, w8
   2344c:	str	w8, [x22, #48]
   23450:	mov	x0, x19
   23454:	ldp	x20, x19, [sp, #64]
   23458:	ldp	x22, x21, [sp, #48]
   2345c:	ldp	x24, x23, [sp, #32]
   23460:	ldr	x25, [sp, #16]
   23464:	ldp	x29, x30, [sp], #80
   23468:	ret
   2346c:	mov	w8, #0xc                   	// #12
   23470:	mov	x19, xzr
   23474:	str	w8, [x21]
   23478:	b	23450 <rpl_re_set_registers@@Base+0x48a8>
   2347c:	stp	x29, x30, [sp, #-80]!
   23480:	stp	x26, x25, [sp, #16]
   23484:	stp	x24, x23, [sp, #32]
   23488:	stp	x22, x21, [sp, #48]
   2348c:	stp	x20, x19, [sp, #64]
   23490:	ldp	x24, x8, [x0, #8]
   23494:	mov	x20, x2
   23498:	mov	x19, x0
   2349c:	mov	x21, x1
   234a0:	cmp	x8, x24
   234a4:	mov	x29, sp
   234a8:	b.cs	23578 <rpl_re_set_registers@@Base+0x49d0>  // b.hs, b.nlast
   234ac:	ldr	x8, [x19]
   234b0:	ldr	x9, [x19, #16]
   234b4:	add	x8, x8, x9, lsl #4
   234b8:	stp	x21, x20, [x8]
   234bc:	ldr	x8, [x19]
   234c0:	ldr	x9, [x19, #16]
   234c4:	add	x9, x8, x9, lsl #4
   234c8:	ldr	w10, [x9, #8]
   234cc:	and	w8, w20, #0xff
   234d0:	cmp	w8, #0x5
   234d4:	and	w10, w10, #0xfffc00ff
   234d8:	str	w10, [x9, #8]
   234dc:	b.ne	234f4 <rpl_re_set_registers@@Base+0x494c>  // b.any
   234e0:	ldr	w9, [x19, #180]
   234e4:	cmp	w9, #0x1
   234e8:	b.le	234f4 <rpl_re_set_registers@@Base+0x494c>
   234ec:	mov	w8, #0x100000              	// #1048576
   234f0:	b	23500 <rpl_re_set_registers@@Base+0x4958>
   234f4:	cmp	w8, #0x6
   234f8:	cset	w8, eq  // eq = none
   234fc:	lsl	w8, w8, #20
   23500:	ldr	x9, [x19]
   23504:	ldr	x10, [x19, #16]
   23508:	add	x9, x9, x10, lsl #4
   2350c:	ldr	w10, [x9, #8]
   23510:	and	w10, w10, #0xffefffff
   23514:	orr	w8, w10, w8
   23518:	str	w8, [x9, #8]
   2351c:	ldp	x9, x8, [x19, #16]
   23520:	mov	x10, #0xffffffffffffffff    	// #-1
   23524:	str	x10, [x8, x9, lsl #3]
   23528:	ldr	x8, [x19, #40]
   2352c:	ldr	x9, [x19, #16]
   23530:	mov	w10, #0x18                  	// #24
   23534:	madd	x8, x9, x10, x8
   23538:	stp	xzr, xzr, [x8]
   2353c:	str	xzr, [x8, #16]
   23540:	ldr	x8, [x19, #48]
   23544:	ldr	x9, [x19, #16]
   23548:	madd	x8, x9, x10, x8
   2354c:	stp	xzr, xzr, [x8]
   23550:	str	xzr, [x8, #16]
   23554:	ldr	x0, [x19, #16]
   23558:	add	x8, x0, #0x1
   2355c:	str	x8, [x19, #16]
   23560:	ldp	x20, x19, [sp, #64]
   23564:	ldp	x22, x21, [sp, #48]
   23568:	ldp	x24, x23, [sp, #32]
   2356c:	ldp	x26, x25, [sp, #16]
   23570:	ldp	x29, x30, [sp], #80
   23574:	ret
   23578:	mov	x8, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   2357c:	lsl	x26, x24, #1
   23580:	movk	x8, #0xaaa, lsl #48
   23584:	cmp	x26, x8
   23588:	b.hi	23614 <rpl_re_set_registers@@Base+0x4a6c>  // b.pmore
   2358c:	ldr	x0, [x19]
   23590:	lsl	x1, x24, #5
   23594:	bl	aea0 <realloc@plt>
   23598:	cbz	x0, 23614 <rpl_re_set_registers@@Base+0x4a6c>
   2359c:	ldr	x8, [x19, #24]
   235a0:	lsl	x23, x24, #4
   235a4:	str	x0, [x19]
   235a8:	mov	x1, x23
   235ac:	mov	x0, x8
   235b0:	bl	aea0 <realloc@plt>
   235b4:	ldr	x8, [x19, #32]
   235b8:	mov	x22, x0
   235bc:	mov	x1, x23
   235c0:	mov	x0, x8
   235c4:	bl	aea0 <realloc@plt>
   235c8:	mov	x23, x0
   235cc:	ldr	x0, [x19, #40]
   235d0:	add	x8, x24, x24, lsl #1
   235d4:	lsl	x25, x8, #4
   235d8:	mov	x1, x25
   235dc:	bl	aea0 <realloc@plt>
   235e0:	ldr	x8, [x19, #48]
   235e4:	mov	x24, x0
   235e8:	mov	x1, x25
   235ec:	mov	x0, x8
   235f0:	bl	aea0 <realloc@plt>
   235f4:	cbz	x22, 2361c <rpl_re_set_registers@@Base+0x4a74>
   235f8:	cbz	x23, 2361c <rpl_re_set_registers@@Base+0x4a74>
   235fc:	cbz	x24, 2361c <rpl_re_set_registers@@Base+0x4a74>
   23600:	cbz	x0, 2361c <rpl_re_set_registers@@Base+0x4a74>
   23604:	stp	x22, x23, [x19, #24]
   23608:	stp	x24, x0, [x19, #40]
   2360c:	str	x26, [x19, #8]
   23610:	b	234ac <rpl_re_set_registers@@Base+0x4904>
   23614:	mov	x0, #0xffffffffffffffff    	// #-1
   23618:	b	23560 <rpl_re_set_registers@@Base+0x49b8>
   2361c:	mov	x19, x0
   23620:	mov	x0, x22
   23624:	bl	b1d0 <free@plt>
   23628:	mov	x0, x23
   2362c:	bl	b1d0 <free@plt>
   23630:	mov	x0, x24
   23634:	bl	b1d0 <free@plt>
   23638:	mov	x0, x19
   2363c:	bl	b1d0 <free@plt>
   23640:	mov	x0, #0xffffffffffffffff    	// #-1
   23644:	b	23560 <rpl_re_set_registers@@Base+0x49b8>
   23648:	stp	x29, x30, [sp, #-48]!
   2364c:	mov	w8, #0x2                   	// #2
   23650:	str	x21, [sp, #16]
   23654:	stp	x20, x19, [sp, #32]
   23658:	mov	x21, x0
   2365c:	str	x8, [x0]
   23660:	mov	w0, #0x10                  	// #16
   23664:	mov	x29, sp
   23668:	mov	x20, x2
   2366c:	mov	x19, x1
   23670:	bl	abc0 <malloc@plt>
   23674:	str	x0, [x21, #16]
   23678:	cbz	x0, 236d0 <rpl_re_set_registers@@Base+0x4b28>
   2367c:	cmp	x19, x20
   23680:	b.ne	2369c <rpl_re_set_registers@@Base+0x4af4>  // b.any
   23684:	ldr	x8, [x21, #16]
   23688:	mov	w9, #0x1                   	// #1
   2368c:	mov	w0, wzr
   23690:	str	x9, [x21, #8]
   23694:	str	x19, [x8]
   23698:	b	236c0 <rpl_re_set_registers@@Base+0x4b18>
   2369c:	ldr	x8, [x21, #16]
   236a0:	mov	w9, #0x2                   	// #2
   236a4:	cmp	x19, x20
   236a8:	mov	w0, wzr
   236ac:	str	x9, [x21, #8]
   236b0:	b.ge	236bc <rpl_re_set_registers@@Base+0x4b14>  // b.tcont
   236b4:	stp	x19, x20, [x8]
   236b8:	b	236c0 <rpl_re_set_registers@@Base+0x4b18>
   236bc:	stp	x20, x19, [x8]
   236c0:	ldp	x20, x19, [sp, #32]
   236c4:	ldr	x21, [sp, #16]
   236c8:	ldp	x29, x30, [sp], #48
   236cc:	ret
   236d0:	mov	w0, #0xc                   	// #12
   236d4:	b	236c0 <rpl_re_set_registers@@Base+0x4b18>
   236d8:	stp	x29, x30, [sp, #-32]!
   236dc:	mov	w8, #0x1                   	// #1
   236e0:	stp	x20, x19, [sp, #16]
   236e4:	mov	x19, x0
   236e8:	stp	x8, x8, [x0]
   236ec:	mov	w0, #0x8                   	// #8
   236f0:	mov	x29, sp
   236f4:	mov	x20, x1
   236f8:	bl	abc0 <malloc@plt>
   236fc:	str	x0, [x19, #16]
   23700:	cbz	x0, 2371c <rpl_re_set_registers@@Base+0x4b74>
   23704:	mov	x8, x0
   23708:	mov	w0, wzr
   2370c:	str	x20, [x8]
   23710:	ldp	x20, x19, [sp, #16]
   23714:	ldp	x29, x30, [sp], #32
   23718:	ret
   2371c:	stp	xzr, xzr, [x19]
   23720:	mov	w0, #0xc                   	// #12
   23724:	b	23710 <rpl_re_set_registers@@Base+0x4b68>
   23728:	sub	sp, sp, #0x90
   2372c:	stp	x29, x30, [sp, #48]
   23730:	stp	x26, x25, [sp, #80]
   23734:	stp	x24, x23, [sp, #96]
   23738:	stp	x22, x21, [sp, #112]
   2373c:	stp	x20, x19, [sp, #128]
   23740:	ldr	x8, [x1, #40]
   23744:	mov	w9, #0x18                  	// #24
   23748:	mov	x22, x1
   2374c:	mov	x19, x0
   23750:	madd	x8, x2, x9, x8
   23754:	ldr	x8, [x8, #8]
   23758:	add	x0, sp, #0x18
   2375c:	str	x27, [sp, #64]
   23760:	add	x29, sp, #0x30
   23764:	add	x1, x8, #0x1
   23768:	mov	w21, w3
   2376c:	mov	x20, x2
   23770:	bl	23980 <rpl_re_set_registers@@Base+0x4dd8>
   23774:	cbnz	w0, 23970 <rpl_re_set_registers@@Base+0x4dc8>
   23778:	ldr	x8, [x22, #48]
   2377c:	mov	w9, #0x18                  	// #24
   23780:	madd	x8, x20, x9, x8
   23784:	mov	x9, #0xffffffffffffffff    	// #-1
   23788:	str	x9, [x8, #8]
   2378c:	ldr	x8, [x22]
   23790:	add	x9, x8, x20, lsl #4
   23794:	ldr	w9, [x9, #8]
   23798:	ubfx	w4, w9, #8, #10
   2379c:	cbz	w4, 237e8 <rpl_re_set_registers@@Base+0x4c40>
   237a0:	ldr	x9, [x22, #40]
   237a4:	mov	w10, #0x18                  	// #24
   237a8:	madd	x10, x20, x10, x9
   237ac:	ldr	x10, [x10, #8]
   237b0:	cbz	x10, 237e8 <rpl_re_set_registers@@Base+0x4c40>
   237b4:	mov	w10, #0x18                  	// #24
   237b8:	madd	x9, x20, x10, x9
   237bc:	ldr	x9, [x9, #16]
   237c0:	ldr	x9, [x9]
   237c4:	add	x8, x8, x9, lsl #4
   237c8:	ldrb	w8, [x8, #10]
   237cc:	tbnz	w8, #2, 237e8 <rpl_re_set_registers@@Base+0x4c40>
   237d0:	mov	x0, x22
   237d4:	mov	x1, x20
   237d8:	mov	x2, x20
   237dc:	mov	x3, x20
   237e0:	bl	239bc <rpl_re_set_registers@@Base+0x4e14>
   237e4:	cbnz	w0, 23970 <rpl_re_set_registers@@Base+0x4dc8>
   237e8:	ldr	x8, [x22]
   237ec:	add	x8, x8, x20, lsl #4
   237f0:	ldrb	w8, [x8, #8]
   237f4:	tbz	w8, #3, 238e4 <rpl_re_set_registers@@Base+0x4d3c>
   237f8:	ldr	x8, [x22, #40]
   237fc:	mov	w9, #0x18                  	// #24
   23800:	madd	x9, x20, x9, x8
   23804:	ldr	x9, [x9, #8]
   23808:	cmp	x9, #0x1
   2380c:	b.lt	238e4 <rpl_re_set_registers@@Base+0x4d3c>  // b.tstop
   23810:	mov	w27, wzr
   23814:	mov	x25, xzr
   23818:	mov	w26, #0x18                  	// #24
   2381c:	madd	x8, x20, x26, x8
   23820:	ldr	x8, [x8, #16]
   23824:	ldr	x24, [x8, x25, lsl #3]
   23828:	ldr	x8, [x22, #48]
   2382c:	madd	x9, x24, x26, x8
   23830:	ldr	x9, [x9, #8]
   23834:	cmn	x9, #0x1
   23838:	b.eq	2385c <rpl_re_set_registers@@Base+0x4cb4>  // b.none
   2383c:	cbnz	x9, 23864 <rpl_re_set_registers@@Base+0x4cbc>
   23840:	mov	x0, sp
   23844:	mov	x1, x22
   23848:	mov	x2, x24
   2384c:	mov	w3, wzr
   23850:	bl	23728 <rpl_re_set_registers@@Base+0x4b80>
   23854:	cbz	w0, 23878 <rpl_re_set_registers@@Base+0x4cd0>
   23858:	b	238d8 <rpl_re_set_registers@@Base+0x4d30>
   2385c:	mov	w8, #0x4                   	// #4
   23860:	b	238ac <rpl_re_set_registers@@Base+0x4d04>
   23864:	madd	x8, x24, x26, x8
   23868:	ldr	x9, [x8, #16]
   2386c:	ldr	q0, [x8]
   23870:	str	x9, [sp, #16]
   23874:	str	q0, [sp]
   23878:	add	x0, sp, #0x18
   2387c:	mov	x1, sp
   23880:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   23884:	cbnz	w0, 238d8 <rpl_re_set_registers@@Base+0x4d30>
   23888:	ldr	x8, [x22, #48]
   2388c:	madd	x8, x24, x26, x8
   23890:	ldr	x8, [x8, #8]
   23894:	cbz	x8, 238a0 <rpl_re_set_registers@@Base+0x4cf8>
   23898:	mov	w8, wzr
   2389c:	b	238b0 <rpl_re_set_registers@@Base+0x4d08>
   238a0:	ldr	x0, [sp, #16]
   238a4:	bl	b1d0 <free@plt>
   238a8:	mov	w8, wzr
   238ac:	mov	w27, #0x1                   	// #1
   238b0:	orr	w8, w8, #0x4
   238b4:	cmp	w8, #0x4
   238b8:	b.ne	23940 <rpl_re_set_registers@@Base+0x4d98>  // b.any
   238bc:	ldr	x8, [x22, #40]
   238c0:	add	x25, x25, #0x1
   238c4:	madd	x9, x20, x26, x8
   238c8:	ldr	x9, [x9, #8]
   238cc:	cmp	x25, x9
   238d0:	b.lt	2381c <rpl_re_set_registers@@Base+0x4c74>  // b.tstop
   238d4:	b	23964 <rpl_re_set_registers@@Base+0x4dbc>
   238d8:	mov	w8, #0x1                   	// #1
   238dc:	mov	w23, w0
   238e0:	b	238b0 <rpl_re_set_registers@@Base+0x4d08>
   238e4:	mov	w23, #0x1                   	// #1
   238e8:	add	x0, sp, #0x18
   238ec:	mov	x1, x20
   238f0:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   238f4:	tbz	w0, #0, 23978 <rpl_re_set_registers@@Base+0x4dd0>
   238f8:	ldr	x8, [x22, #48]
   238fc:	orr	w9, w23, w21
   23900:	tbz	w9, #0, 23920 <rpl_re_set_registers@@Base+0x4d78>
   23904:	ldr	x9, [sp, #40]
   23908:	ldur	q0, [sp, #24]
   2390c:	mov	w10, #0x18                  	// #24
   23910:	madd	x8, x20, x10, x8
   23914:	str	x9, [x8, #16]
   23918:	str	q0, [x8]
   2391c:	b	2392c <rpl_re_set_registers@@Base+0x4d84>
   23920:	mov	w9, #0x18                  	// #24
   23924:	madd	x8, x20, x9, x8
   23928:	str	xzr, [x8, #8]
   2392c:	ldr	x8, [sp, #40]
   23930:	ldur	q0, [sp, #24]
   23934:	mov	w23, wzr
   23938:	str	x8, [x19, #16]
   2393c:	str	q0, [x19]
   23940:	mov	w0, w23
   23944:	ldp	x20, x19, [sp, #128]
   23948:	ldp	x22, x21, [sp, #112]
   2394c:	ldp	x24, x23, [sp, #96]
   23950:	ldp	x26, x25, [sp, #80]
   23954:	ldr	x27, [sp, #64]
   23958:	ldp	x29, x30, [sp, #48]
   2395c:	add	sp, sp, #0x90
   23960:	ret
   23964:	tst	w27, #0x1
   23968:	cset	w23, eq  // eq = none
   2396c:	b	238e8 <rpl_re_set_registers@@Base+0x4d40>
   23970:	mov	w23, w0
   23974:	b	23940 <rpl_re_set_registers@@Base+0x4d98>
   23978:	mov	w23, #0xc                   	// #12
   2397c:	b	23940 <rpl_re_set_registers@@Base+0x4d98>
   23980:	stp	x29, x30, [sp, #-32]!
   23984:	str	x19, [sp, #16]
   23988:	mov	x19, x0
   2398c:	stp	x1, xzr, [x0]
   23990:	lsl	x0, x1, #3
   23994:	mov	x29, sp
   23998:	bl	abc0 <malloc@plt>
   2399c:	str	x0, [x19, #16]
   239a0:	ldr	x19, [sp, #16]
   239a4:	cmp	x0, #0x0
   239a8:	mov	w8, #0xc                   	// #12
   239ac:	csel	w8, w8, wzr, eq  // eq = none
   239b0:	mov	w0, w8
   239b4:	ldp	x29, x30, [sp], #32
   239b8:	ret
   239bc:	stp	x29, x30, [sp, #-96]!
   239c0:	stp	x28, x27, [sp, #16]
   239c4:	stp	x24, x23, [sp, #48]
   239c8:	stp	x22, x21, [sp, #64]
   239cc:	stp	x20, x19, [sp, #80]
   239d0:	mov	w19, w4
   239d4:	mov	x20, x3
   239d8:	mov	x24, x2
   239dc:	mov	x23, x1
   239e0:	mov	x21, x0
   239e4:	mov	w27, #0x18                  	// #24
   239e8:	mov	w28, #0xc                   	// #12
   239ec:	stp	x26, x25, [sp, #32]
   239f0:	mov	x29, sp
   239f4:	b	23a0c <rpl_re_set_registers@@Base+0x4e64>
   239f8:	ldr	x8, [x21, #24]
   239fc:	ldr	x9, [x8, x23, lsl #3]
   23a00:	str	x9, [x8, x24, lsl #3]
   23a04:	mov	w8, #0x2                   	// #2
   23a08:	cbnz	w8, 23bbc <rpl_re_set_registers@@Base+0x5014>
   23a0c:	ldr	x8, [x21]
   23a10:	add	x8, x8, x23, lsl #4
   23a14:	ldrb	w9, [x8, #8]!
   23a18:	cmp	w9, #0x4
   23a1c:	b.ne	23a60 <rpl_re_set_registers@@Base+0x4eb8>  // b.any
   23a20:	ldr	x8, [x21, #24]
   23a24:	ldr	x9, [x21, #40]
   23a28:	mov	x0, x21
   23a2c:	mov	w2, w19
   23a30:	ldr	x25, [x8, x23, lsl #3]
   23a34:	madd	x8, x24, x27, x9
   23a38:	str	xzr, [x8, #8]
   23a3c:	mov	x1, x25
   23a40:	bl	23e64 <rpl_re_set_registers@@Base+0x52bc>
   23a44:	cmn	x0, #0x1
   23a48:	b.eq	23ba0 <rpl_re_set_registers@@Base+0x4ff8>  // b.none
   23a4c:	ldr	x8, [x21, #24]
   23a50:	mov	x26, x0
   23a54:	ldr	x9, [x8, x23, lsl #3]
   23a58:	str	x9, [x8, x24, lsl #3]
   23a5c:	b	23b20 <rpl_re_set_registers@@Base+0x4f78>
   23a60:	ldr	x26, [x21, #40]
   23a64:	madd	x9, x23, x27, x26
   23a68:	ldr	x9, [x9, #8]
   23a6c:	cbz	x9, 239f8 <rpl_re_set_registers@@Base+0x4e50>
   23a70:	madd	x10, x23, x27, x26
   23a74:	ldr	x10, [x10, #16]
   23a78:	cmp	x9, #0x1
   23a7c:	ldr	x25, [x10]
   23a80:	madd	x10, x24, x27, x26
   23a84:	str	xzr, [x10, #8]
   23a88:	b.ne	23abc <rpl_re_set_registers@@Base+0x4f14>  // b.any
   23a8c:	cmp	x23, x20
   23a90:	b.ne	23af8 <rpl_re_set_registers@@Base+0x4f50>  // b.any
   23a94:	cmp	x24, x23
   23a98:	b.eq	23af8 <rpl_re_set_registers@@Base+0x4f50>  // b.none
   23a9c:	madd	x0, x24, x27, x26
   23aa0:	mov	x1, x25
   23aa4:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   23aa8:	tst	w0, #0x1
   23aac:	mov	w8, #0x1                   	// #1
   23ab0:	cinc	w8, w8, ne  // ne = any
   23ab4:	csel	w22, w22, w28, ne  // ne = any
   23ab8:	b	23a08 <rpl_re_set_registers@@Base+0x4e60>
   23abc:	mov	x0, x21
   23ac0:	mov	x1, x25
   23ac4:	mov	w2, w19
   23ac8:	bl	23f00 <rpl_re_set_registers@@Base+0x5358>
   23acc:	cmn	x0, #0x1
   23ad0:	b.eq	23b44 <rpl_re_set_registers@@Base+0x4f9c>  // b.none
   23ad4:	mov	x1, x0
   23ad8:	madd	x0, x24, x27, x26
   23adc:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   23ae0:	tbz	w0, #0, 23ba0 <rpl_re_set_registers@@Base+0x4ff8>
   23ae4:	ldr	x8, [x21, #40]
   23ae8:	madd	x8, x23, x27, x8
   23aec:	ldr	x8, [x8, #16]
   23af0:	ldr	x25, [x8, #8]
   23af4:	b	23b04 <rpl_re_set_registers@@Base+0x4f5c>
   23af8:	ldr	w8, [x8]
   23afc:	ubfx	w8, w8, #8, #10
   23b00:	orr	w19, w8, w19
   23b04:	mov	x0, x21
   23b08:	mov	x1, x25
   23b0c:	mov	w2, w19
   23b10:	bl	23e64 <rpl_re_set_registers@@Base+0x52bc>
   23b14:	cmn	x0, #0x1
   23b18:	b.eq	23ba0 <rpl_re_set_registers@@Base+0x4ff8>  // b.none
   23b1c:	mov	x26, x0
   23b20:	ldr	x8, [x21, #40]
   23b24:	mov	x1, x26
   23b28:	madd	x0, x24, x27, x8
   23b2c:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   23b30:	tbz	w0, #0, 23ba0 <rpl_re_set_registers@@Base+0x4ff8>
   23b34:	mov	w8, wzr
   23b38:	mov	x23, x25
   23b3c:	mov	x24, x26
   23b40:	b	23a08 <rpl_re_set_registers@@Base+0x4e60>
   23b44:	mov	x0, x21
   23b48:	mov	x1, x25
   23b4c:	mov	w2, w19
   23b50:	bl	23e64 <rpl_re_set_registers@@Base+0x52bc>
   23b54:	cmn	x0, #0x1
   23b58:	b.eq	23bac <rpl_re_set_registers@@Base+0x5004>  // b.none
   23b5c:	ldr	x8, [x21, #40]
   23b60:	mov	x26, x0
   23b64:	mov	x1, x26
   23b68:	madd	x0, x24, x27, x8
   23b6c:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   23b70:	tbz	w0, #0, 23bac <rpl_re_set_registers@@Base+0x5004>
   23b74:	mov	x0, x21
   23b78:	mov	x1, x25
   23b7c:	mov	x2, x26
   23b80:	mov	x3, x20
   23b84:	mov	w4, w19
   23b88:	bl	239bc <rpl_re_set_registers@@Base+0x4e14>
   23b8c:	cmp	w0, #0x0
   23b90:	cset	w8, ne  // ne = any
   23b94:	csel	w22, w22, w0, eq  // eq = none
   23b98:	cbnz	w8, 23a08 <rpl_re_set_registers@@Base+0x4e60>
   23b9c:	b	23ae4 <rpl_re_set_registers@@Base+0x4f3c>
   23ba0:	mov	w22, #0xc                   	// #12
   23ba4:	mov	w8, #0x1                   	// #1
   23ba8:	b	23a08 <rpl_re_set_registers@@Base+0x4e60>
   23bac:	mov	w22, #0xc                   	// #12
   23bb0:	mov	w8, #0x1                   	// #1
   23bb4:	cbnz	w8, 23a08 <rpl_re_set_registers@@Base+0x4e60>
   23bb8:	b	23ae4 <rpl_re_set_registers@@Base+0x4f3c>
   23bbc:	cmp	w8, #0x2
   23bc0:	b.ne	23bc8 <rpl_re_set_registers@@Base+0x5020>  // b.any
   23bc4:	mov	w22, wzr
   23bc8:	mov	w0, w22
   23bcc:	ldp	x20, x19, [sp, #80]
   23bd0:	ldp	x22, x21, [sp, #64]
   23bd4:	ldp	x24, x23, [sp, #48]
   23bd8:	ldp	x26, x25, [sp, #32]
   23bdc:	ldp	x28, x27, [sp, #16]
   23be0:	ldp	x29, x30, [sp], #96
   23be4:	ret
   23be8:	stp	x29, x30, [sp, #-48]!
   23bec:	str	x21, [sp, #16]
   23bf0:	stp	x20, x19, [sp, #32]
   23bf4:	mov	x29, sp
   23bf8:	cbz	x1, 23ce0 <rpl_re_set_registers@@Base+0x5138>
   23bfc:	ldr	x8, [x1, #8]
   23c00:	mov	x20, x1
   23c04:	cbz	x8, 23ce0 <rpl_re_set_registers@@Base+0x5138>
   23c08:	ldp	x9, x10, [x0]
   23c0c:	mov	x19, x0
   23c10:	add	x10, x10, x8, lsl #1
   23c14:	cmp	x9, x10
   23c18:	b.ge	23c3c <rpl_re_set_registers@@Base+0x5094>  // b.tcont
   23c1c:	ldr	x0, [x19, #16]
   23c20:	add	x21, x9, x8
   23c24:	lsl	x1, x21, #4
   23c28:	bl	aea0 <realloc@plt>
   23c2c:	cbz	x0, 23d70 <rpl_re_set_registers@@Base+0x51c8>
   23c30:	lsl	x8, x21, #1
   23c34:	str	x0, [x19, #16]
   23c38:	str	x8, [x19]
   23c3c:	ldr	x11, [x19, #8]
   23c40:	ldr	x10, [x20, #8]
   23c44:	cbz	x11, 23d5c <rpl_re_set_registers@@Base+0x51b4>
   23c48:	sub	x8, x10, #0x1
   23c4c:	sub	x9, x11, #0x1
   23c50:	orr	x12, x8, x9
   23c54:	add	x21, x11, x10, lsl #1
   23c58:	tbnz	x12, #63, 23ca4 <rpl_re_set_registers@@Base+0x50fc>
   23c5c:	ldr	x10, [x19, #16]
   23c60:	ldr	x11, [x20, #16]
   23c64:	b	23c7c <rpl_re_set_registers@@Base+0x50d4>
   23c68:	sub	x8, x8, #0x1
   23c6c:	sub	x21, x21, #0x1
   23c70:	str	x12, [x10, x21, lsl #3]
   23c74:	orr	x12, x8, x9
   23c78:	tbnz	x12, #63, 23ca4 <rpl_re_set_registers@@Base+0x50fc>
   23c7c:	ldr	x13, [x10, x9, lsl #3]
   23c80:	ldr	x12, [x11, x8, lsl #3]
   23c84:	cmp	x13, x12
   23c88:	b.ne	23c94 <rpl_re_set_registers@@Base+0x50ec>  // b.any
   23c8c:	sub	x8, x8, #0x1
   23c90:	b	23c98 <rpl_re_set_registers@@Base+0x50f0>
   23c94:	b.lt	23c68 <rpl_re_set_registers@@Base+0x50c0>  // b.tstop
   23c98:	sub	x9, x9, #0x1
   23c9c:	orr	x12, x8, x9
   23ca0:	tbz	x12, #63, 23c7c <rpl_re_set_registers@@Base+0x50d4>
   23ca4:	tbnz	x8, #63, 23cc4 <rpl_re_set_registers@@Base+0x511c>
   23ca8:	ldr	x9, [x19, #16]
   23cac:	ldr	x1, [x20, #16]
   23cb0:	add	x8, x8, #0x1
   23cb4:	sub	x21, x21, x8
   23cb8:	add	x0, x9, x21, lsl #3
   23cbc:	lsl	x2, x8, #3
   23cc0:	bl	a800 <memcpy@plt>
   23cc4:	ldr	x9, [x19, #8]
   23cc8:	ldr	x8, [x20, #8]
   23ccc:	add	x8, x9, x8, lsl #1
   23cd0:	sub	x8, x8, #0x1
   23cd4:	sub	x10, x8, x21
   23cd8:	adds	x11, x10, #0x1
   23cdc:	b.cc	23cf4 <rpl_re_set_registers@@Base+0x514c>  // b.lo, b.ul, b.last
   23ce0:	mov	w0, wzr
   23ce4:	ldp	x20, x19, [sp, #32]
   23ce8:	ldr	x21, [sp, #16]
   23cec:	ldp	x29, x30, [sp], #48
   23cf0:	ret
   23cf4:	ldr	x0, [x19, #16]
   23cf8:	sub	x10, x9, #0x1
   23cfc:	add	x9, x11, x9
   23d00:	str	x9, [x19, #8]
   23d04:	add	x9, x0, x10, lsl #3
   23d08:	lsl	x2, x11, #3
   23d0c:	neg	x11, x11
   23d10:	ldr	x12, [x0, x8, lsl #3]
   23d14:	ldr	x13, [x0, x10, lsl #3]
   23d18:	cmp	x12, x13
   23d1c:	b.le	23d38 <rpl_re_set_registers@@Base+0x5190>
   23d20:	sub	x8, x8, #0x1
   23d24:	str	x12, [x9, x2]
   23d28:	adds	x11, x11, #0x1
   23d2c:	sub	x2, x2, #0x8
   23d30:	b.cc	23d10 <rpl_re_set_registers@@Base+0x5168>  // b.lo, b.ul, b.last
   23d34:	b	23ce0 <rpl_re_set_registers@@Base+0x5138>
   23d38:	str	x13, [x9, x2]
   23d3c:	cmp	x10, #0x0
   23d40:	sub	x10, x10, #0x1
   23d44:	neg	x11, x11
   23d48:	sub	x9, x9, #0x8
   23d4c:	b.gt	23d08 <rpl_re_set_registers@@Base+0x5160>
   23d50:	add	x1, x0, x21, lsl #3
   23d54:	bl	a800 <memcpy@plt>
   23d58:	b	23ce0 <rpl_re_set_registers@@Base+0x5138>
   23d5c:	str	x10, [x19, #8]
   23d60:	ldp	x8, x1, [x20, #8]
   23d64:	ldr	x0, [x19, #16]
   23d68:	lsl	x2, x8, #3
   23d6c:	b	23d54 <rpl_re_set_registers@@Base+0x51ac>
   23d70:	mov	w0, #0xc                   	// #12
   23d74:	b	23ce4 <rpl_re_set_registers@@Base+0x513c>
   23d78:	stp	x29, x30, [sp, #-32]!
   23d7c:	stp	x20, x19, [sp, #16]
   23d80:	ldr	x8, [x0]
   23d84:	mov	x19, x0
   23d88:	mov	x20, x1
   23d8c:	mov	x29, sp
   23d90:	cbz	x8, 23db8 <rpl_re_set_registers@@Base+0x5210>
   23d94:	ldr	x9, [x19, #8]
   23d98:	cbnz	x9, 23dd8 <rpl_re_set_registers@@Base+0x5230>
   23d9c:	ldr	x8, [x19, #16]
   23da0:	str	x20, [x8]
   23da4:	ldr	x8, [x19, #8]
   23da8:	mov	w0, #0x1                   	// #1
   23dac:	add	x8, x8, #0x1
   23db0:	str	x8, [x19, #8]
   23db4:	b	23dcc <rpl_re_set_registers@@Base+0x5224>
   23db8:	mov	x0, x19
   23dbc:	mov	x1, x20
   23dc0:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   23dc4:	cmp	w0, #0x0
   23dc8:	cset	w0, eq  // eq = none
   23dcc:	ldp	x20, x19, [sp, #16]
   23dd0:	ldp	x29, x30, [sp], #32
   23dd4:	ret
   23dd8:	cmp	x8, x9
   23ddc:	b.ne	23dfc <rpl_re_set_registers@@Base+0x5254>  // b.any
   23de0:	ldr	x0, [x19, #16]
   23de4:	lsl	x9, x8, #1
   23de8:	lsl	x1, x8, #4
   23dec:	str	x9, [x19]
   23df0:	bl	aea0 <realloc@plt>
   23df4:	cbz	x0, 23dcc <rpl_re_set_registers@@Base+0x5224>
   23df8:	str	x0, [x19, #16]
   23dfc:	ldp	x9, x8, [x19, #8]
   23e00:	ldr	x10, [x8]
   23e04:	cmp	x10, x20
   23e08:	b.le	23e34 <rpl_re_set_registers@@Base+0x528c>
   23e0c:	cmp	x9, #0x1
   23e10:	b.lt	23e5c <rpl_re_set_registers@@Base+0x52b4>  // b.tstop
   23e14:	mov	x10, x9
   23e18:	add	x11, x8, x10, lsl #3
   23e1c:	ldur	x12, [x11, #-8]
   23e20:	subs	x9, x10, #0x1
   23e24:	mov	x10, x9
   23e28:	str	x12, [x11]
   23e2c:	b.gt	23e18 <rpl_re_set_registers@@Base+0x5270>
   23e30:	b	23e5c <rpl_re_set_registers@@Base+0x52b4>
   23e34:	add	x10, x8, x9, lsl #3
   23e38:	ldur	x10, [x10, #-8]
   23e3c:	cmp	x10, x20
   23e40:	b.le	23e5c <rpl_re_set_registers@@Base+0x52b4>
   23e44:	add	x11, x8, x9, lsl #3
   23e48:	str	x10, [x11]
   23e4c:	ldur	x10, [x11, #-16]
   23e50:	sub	x9, x9, #0x1
   23e54:	cmp	x10, x20
   23e58:	b.gt	23e44 <rpl_re_set_registers@@Base+0x529c>
   23e5c:	str	x20, [x8, x9, lsl #3]
   23e60:	b	23da4 <rpl_re_set_registers@@Base+0x51fc>
   23e64:	stp	x29, x30, [sp, #-48]!
   23e68:	stp	x20, x19, [sp, #32]
   23e6c:	ldr	x8, [x0]
   23e70:	str	x21, [sp, #16]
   23e74:	mov	x19, x1
   23e78:	mov	w21, w2
   23e7c:	add	x8, x8, x1, lsl #4
   23e80:	ldp	x1, x8, [x8]
   23e84:	mov	x29, sp
   23e88:	mov	x20, x0
   23e8c:	mov	x2, x8
   23e90:	bl	2347c <rpl_re_set_registers@@Base+0x48d4>
   23e94:	cmn	x0, #0x1
   23e98:	b.eq	23ef0 <rpl_re_set_registers@@Base+0x5348>  // b.none
   23e9c:	ldr	x8, [x20]
   23ea0:	lsl	x9, x0, #4
   23ea4:	add	x8, x8, x9
   23ea8:	ldr	w10, [x8, #8]
   23eac:	bfi	w10, w21, #8, #10
   23eb0:	str	w10, [x8, #8]
   23eb4:	ldr	x8, [x20]
   23eb8:	add	x10, x8, x19, lsl #4
   23ebc:	ldr	w10, [x10, #8]
   23ec0:	add	x8, x8, x9
   23ec4:	ldr	w11, [x8, #8]
   23ec8:	and	w10, w10, #0x3ff00
   23ecc:	orr	w10, w10, w11
   23ed0:	str	w10, [x8, #8]
   23ed4:	ldr	x8, [x20]
   23ed8:	add	x8, x8, x9
   23edc:	ldr	w9, [x8, #8]
   23ee0:	orr	w9, w9, #0x40000
   23ee4:	str	w9, [x8, #8]
   23ee8:	ldr	x8, [x20, #32]
   23eec:	str	x19, [x8, x0, lsl #3]
   23ef0:	ldp	x20, x19, [sp, #32]
   23ef4:	ldr	x21, [sp, #16]
   23ef8:	ldp	x29, x30, [sp], #48
   23efc:	ret
   23f00:	ldr	x11, [x0, #16]
   23f04:	mov	x8, #0xffffffffffffffff    	// #-1
   23f08:	sub	x9, x11, #0x1
   23f0c:	cmp	x9, #0x1
   23f10:	b.lt	23f68 <rpl_re_set_registers@@Base+0x53c0>  // b.tstop
   23f14:	ldr	x10, [x0]
   23f18:	add	x10, x10, x9, lsl #4
   23f1c:	ldr	w12, [x10, #8]
   23f20:	tbz	w12, #18, 23f68 <rpl_re_set_registers@@Base+0x53c0>
   23f24:	ldr	x10, [x0, #32]
   23f28:	lsl	x8, x11, #4
   23f2c:	sub	x11, x8, #0x18
   23f30:	ldr	x8, [x10, x9, lsl #3]
   23f34:	cmp	x8, x1
   23f38:	b.ne	23f48 <rpl_re_set_registers@@Base+0x53a0>  // b.any
   23f3c:	ubfx	w8, w12, #8, #10
   23f40:	cmp	w8, w2
   23f44:	b.eq	23f70 <rpl_re_set_registers@@Base+0x53c8>  // b.none
   23f48:	sub	x9, x9, #0x1
   23f4c:	cmp	x9, #0x1
   23f50:	mov	x8, #0xffffffffffffffff    	// #-1
   23f54:	b.lt	23f68 <rpl_re_set_registers@@Base+0x53c0>  // b.tstop
   23f58:	ldr	x12, [x0]
   23f5c:	ldr	w12, [x12, x11]
   23f60:	sub	x11, x11, #0x10
   23f64:	tbnz	w12, #18, 23f30 <rpl_re_set_registers@@Base+0x5388>
   23f68:	mov	x0, x8
   23f6c:	ret
   23f70:	mov	x0, x9
   23f74:	ret
   23f78:	stp	x29, x30, [sp, #-32]!
   23f7c:	stp	x20, x19, [sp, #16]
   23f80:	ldp	x8, x9, [x0]
   23f84:	mov	x19, x0
   23f88:	mov	x20, x1
   23f8c:	mov	x29, sp
   23f90:	cmp	x8, x9
   23f94:	b.ne	23fb8 <rpl_re_set_registers@@Base+0x5410>  // b.any
   23f98:	ldr	x0, [x19, #16]
   23f9c:	lsl	x8, x8, #1
   23fa0:	add	x8, x8, #0x2
   23fa4:	lsl	x1, x8, #3
   23fa8:	str	x8, [x19]
   23fac:	bl	aea0 <realloc@plt>
   23fb0:	cbz	x0, 23fcc <rpl_re_set_registers@@Base+0x5424>
   23fb4:	str	x0, [x19, #16]
   23fb8:	ldp	x8, x9, [x19, #8]
   23fbc:	mov	w0, #0x1                   	// #1
   23fc0:	add	x10, x8, #0x1
   23fc4:	str	x10, [x19, #8]
   23fc8:	str	x20, [x9, x8, lsl #3]
   23fcc:	ldp	x20, x19, [sp, #16]
   23fd0:	ldp	x29, x30, [sp], #32
   23fd4:	ret
   23fd8:	stp	x29, x30, [sp, #-48]!
   23fdc:	stp	x20, x19, [sp, #32]
   23fe0:	ldr	x8, [x1, #8]
   23fe4:	str	x21, [sp, #16]
   23fe8:	mov	x19, x0
   23fec:	mov	x29, sp
   23ff0:	str	x8, [x0, #8]
   23ff4:	ldr	x21, [x1, #8]
   23ff8:	cmp	x21, #0x1
   23ffc:	b.lt	2402c <rpl_re_set_registers@@Base+0x5484>  // b.tstop
   24000:	lsl	x0, x8, #3
   24004:	mov	x20, x1
   24008:	str	x8, [x19]
   2400c:	bl	abc0 <malloc@plt>
   24010:	str	x0, [x19, #16]
   24014:	cbz	x0, 24048 <rpl_re_set_registers@@Base+0x54a0>
   24018:	ldr	x1, [x20, #16]
   2401c:	lsl	x2, x21, #3
   24020:	bl	a800 <memcpy@plt>
   24024:	mov	w0, wzr
   24028:	b	24038 <rpl_re_set_registers@@Base+0x5490>
   2402c:	mov	w0, wzr
   24030:	stp	xzr, xzr, [x19]
   24034:	str	xzr, [x19, #16]
   24038:	ldp	x20, x19, [sp, #32]
   2403c:	ldr	x21, [sp, #16]
   24040:	ldp	x29, x30, [sp], #48
   24044:	ret
   24048:	stp	xzr, xzr, [x19]
   2404c:	mov	w0, #0xc                   	// #12
   24050:	b	24038 <rpl_re_set_registers@@Base+0x5490>
   24054:	ldr	x8, [x0, #8]
   24058:	subs	x8, x8, #0x1
   2405c:	b.lt	24090 <rpl_re_set_registers@@Base+0x54e8>  // b.tstop
   24060:	b.eq	24098 <rpl_re_set_registers@@Base+0x54f0>  // b.none
   24064:	ldr	x10, [x0, #16]
   24068:	mov	x9, xzr
   2406c:	add	x11, x8, x9
   24070:	lsr	x11, x11, #1
   24074:	ldr	x12, [x10, x11, lsl #3]
   24078:	cmp	x12, x1
   2407c:	csinc	x9, x9, x11, ge  // ge = tcont
   24080:	csel	x8, x8, x11, lt  // lt = tstop
   24084:	cmp	x9, x8
   24088:	b.cc	2406c <rpl_re_set_registers@@Base+0x54c4>  // b.lo, b.ul, b.last
   2408c:	b	2409c <rpl_re_set_registers@@Base+0x54f4>
   24090:	mov	x0, xzr
   24094:	ret
   24098:	mov	x9, xzr
   2409c:	ldr	x8, [x0, #16]
   240a0:	ldr	x8, [x8, x9, lsl #3]
   240a4:	cmp	x8, x1
   240a8:	csinc	x0, xzr, x9, ne  // ne = any
   240ac:	ret
   240b0:	stp	x29, x30, [sp, #-96]!
   240b4:	stp	x28, x27, [sp, #16]
   240b8:	stp	x26, x25, [sp, #32]
   240bc:	stp	x24, x23, [sp, #48]
   240c0:	stp	x22, x21, [sp, #64]
   240c4:	stp	x20, x19, [sp, #80]
   240c8:	ldr	x8, [x2, #8]
   240cc:	mov	x19, x0
   240d0:	mov	x29, sp
   240d4:	cbz	x8, 241a4 <rpl_re_set_registers@@Base+0x55fc>
   240d8:	mov	x22, x1
   240dc:	mov	x0, x2
   240e0:	mov	w1, w3
   240e4:	mov	w20, w3
   240e8:	mov	x21, x2
   240ec:	bl	241cc <rpl_re_set_registers@@Base+0x5624>
   240f0:	ldr	x9, [x22, #136]
   240f4:	ldr	x8, [x22, #64]
   240f8:	mov	w10, #0x18                  	// #24
   240fc:	mov	x23, x0
   24100:	and	x9, x9, x0
   24104:	madd	x25, x9, x10, x8
   24108:	ldr	x10, [x25]
   2410c:	cmp	x10, #0x1
   24110:	b.lt	2417c <rpl_re_set_registers@@Base+0x55d4>  // b.tstop
   24114:	mov	w10, #0x18                  	// #24
   24118:	madd	x8, x9, x10, x8
   2411c:	ldr	x27, [x8, #16]
   24120:	mov	x26, xzr
   24124:	ldr	x28, [x27, x26, lsl #3]
   24128:	ldr	x8, [x28]
   2412c:	cmp	x8, x23
   24130:	b.ne	24164 <rpl_re_set_registers@@Base+0x55bc>  // b.any
   24134:	ldrb	w8, [x28, #104]
   24138:	and	w8, w8, #0xf
   2413c:	cmp	w8, w20
   24140:	b.ne	24164 <rpl_re_set_registers@@Base+0x55bc>  // b.any
   24144:	ldr	x0, [x28, #80]
   24148:	mov	x1, x21
   2414c:	bl	241f8 <rpl_re_set_registers@@Base+0x5650>
   24150:	tbz	w0, #0, 24164 <rpl_re_set_registers@@Base+0x55bc>
   24154:	mov	x24, x28
   24158:	mov	w8, wzr
   2415c:	tbnz	wzr, #0, 2416c <rpl_re_set_registers@@Base+0x55c4>
   24160:	b	241ac <rpl_re_set_registers@@Base+0x5604>
   24164:	mov	w8, #0x1                   	// #1
   24168:	tbz	w8, #0, 241ac <rpl_re_set_registers@@Base+0x5604>
   2416c:	ldr	x8, [x25]
   24170:	add	x26, x26, #0x1
   24174:	cmp	x26, x8
   24178:	b.lt	24124 <rpl_re_set_registers@@Base+0x557c>  // b.tstop
   2417c:	mov	x0, x22
   24180:	mov	x1, x21
   24184:	mov	w2, w20
   24188:	mov	x3, x23
   2418c:	bl	24258 <rpl_re_set_registers@@Base+0x56b0>
   24190:	mov	x24, x0
   24194:	cbnz	x0, 241ac <rpl_re_set_registers@@Base+0x5604>
   24198:	mov	w8, #0xc                   	// #12
   2419c:	str	w8, [x19]
   241a0:	b	241ac <rpl_re_set_registers@@Base+0x5604>
   241a4:	mov	x24, xzr
   241a8:	str	wzr, [x19]
   241ac:	mov	x0, x24
   241b0:	ldp	x20, x19, [sp, #80]
   241b4:	ldp	x22, x21, [sp, #64]
   241b8:	ldp	x24, x23, [sp, #48]
   241bc:	ldp	x26, x25, [sp, #32]
   241c0:	ldp	x28, x27, [sp, #16]
   241c4:	ldp	x29, x30, [sp], #96
   241c8:	ret
   241cc:	ldr	x9, [x0, #8]
   241d0:	mov	x8, x0
   241d4:	cmp	x9, #0x1
   241d8:	add	x0, x9, w1, uxtw
   241dc:	b.lt	241f4 <rpl_re_set_registers@@Base+0x564c>  // b.tstop
   241e0:	ldr	x8, [x8, #16]
   241e4:	ldr	x10, [x8], #8
   241e8:	subs	x9, x9, #0x1
   241ec:	add	x0, x10, x0
   241f0:	b.ne	241e4 <rpl_re_set_registers@@Base+0x563c>  // b.any
   241f4:	ret
   241f8:	mov	w8, wzr
   241fc:	cbz	x0, 24248 <rpl_re_set_registers@@Base+0x56a0>
   24200:	cbz	x1, 24248 <rpl_re_set_registers@@Base+0x56a0>
   24204:	ldr	x8, [x0, #8]
   24208:	ldr	x9, [x1, #8]
   2420c:	cmp	x8, x9
   24210:	b.ne	24244 <rpl_re_set_registers@@Base+0x569c>  // b.any
   24214:	sub	x8, x8, #0x1
   24218:	add	x9, x8, #0x1
   2421c:	cmp	x9, #0x1
   24220:	b.lt	24250 <rpl_re_set_registers@@Base+0x56a8>  // b.tstop
   24224:	ldr	x9, [x0, #16]
   24228:	ldr	x10, [x1, #16]
   2422c:	lsl	x11, x8, #3
   24230:	sub	x8, x8, #0x1
   24234:	ldr	x9, [x9, x11]
   24238:	ldr	x10, [x10, x11]
   2423c:	cmp	x9, x10
   24240:	b.eq	24218 <rpl_re_set_registers@@Base+0x5670>  // b.none
   24244:	mov	w8, wzr
   24248:	mov	w0, w8
   2424c:	ret
   24250:	mov	w0, #0x1                   	// #1
   24254:	ret
   24258:	stp	x29, x30, [sp, #-96]!
   2425c:	stp	x24, x23, [sp, #48]
   24260:	stp	x22, x21, [sp, #64]
   24264:	mov	x23, x1
   24268:	mov	x21, x0
   2426c:	mov	w0, #0x70                  	// #112
   24270:	mov	w1, #0x1                   	// #1
   24274:	str	x27, [sp, #16]
   24278:	stp	x26, x25, [sp, #32]
   2427c:	stp	x20, x19, [sp, #80]
   24280:	mov	x29, sp
   24284:	mov	x20, x3
   24288:	mov	w22, w2
   2428c:	bl	ae10 <calloc@plt>
   24290:	mov	x19, x0
   24294:	cbz	x0, 24414 <rpl_re_set_registers@@Base+0x586c>
   24298:	add	x24, x19, #0x8
   2429c:	mov	x0, x24
   242a0:	mov	x1, x23
   242a4:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   242a8:	cbnz	w0, 24408 <rpl_re_set_registers@@Base+0x5860>
   242ac:	ldrb	w8, [x19, #104]
   242b0:	str	x24, [x19, #80]
   242b4:	bfxil	w8, w22, #0, #4
   242b8:	strb	w8, [x19, #104]
   242bc:	ldr	x8, [x23, #8]
   242c0:	cmp	x8, #0x1
   242c4:	b.lt	243e8 <rpl_re_set_registers@@Base+0x5840>  // b.tstop
   242c8:	mov	x25, xzr
   242cc:	mov	x26, xzr
   242d0:	ldr	x8, [x23, #16]
   242d4:	ldr	x9, [x21]
   242d8:	ldr	x8, [x8, x25, lsl #3]
   242dc:	add	x8, x9, x8, lsl #4
   242e0:	ldr	w27, [x8, #8]
   242e4:	and	w8, w27, #0x3ffff
   242e8:	cmp	w8, #0x1
   242ec:	b.ne	242f8 <rpl_re_set_registers@@Base+0x5750>  // b.any
   242f0:	mov	w8, #0x4                   	// #4
   242f4:	b	243cc <rpl_re_set_registers@@Base+0x5824>
   242f8:	ldrb	w9, [x19, #104]
   242fc:	lsr	w11, w27, #15
   24300:	and	w10, w27, #0xff
   24304:	and	w11, w11, #0x20
   24308:	and	w8, w27, #0x3ff00
   2430c:	orr	w9, w9, w11
   24310:	cmp	w10, #0x2
   24314:	strb	w9, [x19, #104]
   24318:	b.eq	2432c <rpl_re_set_registers@@Base+0x5784>  // b.none
   2431c:	cmp	w10, #0x4
   24320:	b.ne	24338 <rpl_re_set_registers@@Base+0x5790>  // b.any
   24324:	mov	w10, #0x40                  	// #64
   24328:	b	24330 <rpl_re_set_registers@@Base+0x5788>
   2432c:	mov	w10, #0x10                  	// #16
   24330:	orr	w9, w9, w10
   24334:	strb	w9, [x19, #104]
   24338:	cbz	w8, 243cc <rpl_re_set_registers@@Base+0x5824>
   2433c:	ldr	x8, [x19, #80]
   24340:	cmp	x8, x24
   24344:	b.eq	24384 <rpl_re_set_registers@@Base+0x57dc>  // b.none
   24348:	tbnz	w22, #0, 24350 <rpl_re_set_registers@@Base+0x57a8>
   2434c:	tbnz	w27, #8, 2436c <rpl_re_set_registers@@Base+0x57c4>
   24350:	tbz	w22, #0, 24358 <rpl_re_set_registers@@Base+0x57b0>
   24354:	tbnz	w27, #9, 2436c <rpl_re_set_registers@@Base+0x57c4>
   24358:	tbnz	w22, #1, 24360 <rpl_re_set_registers@@Base+0x57b8>
   2435c:	tbnz	w27, #12, 2436c <rpl_re_set_registers@@Base+0x57c4>
   24360:	mov	w8, wzr
   24364:	tbnz	w22, #2, 243cc <rpl_re_set_registers@@Base+0x5824>
   24368:	tbz	w27, #14, 243cc <rpl_re_set_registers@@Base+0x5824>
   2436c:	sub	x1, x25, x26
   24370:	mov	x0, x24
   24374:	bl	24434 <rpl_re_set_registers@@Base+0x588c>
   24378:	mov	w8, wzr
   2437c:	add	x26, x26, #0x1
   24380:	b	243cc <rpl_re_set_registers@@Base+0x5824>
   24384:	mov	w0, #0x18                  	// #24
   24388:	bl	abc0 <malloc@plt>
   2438c:	cbz	x0, 243a0 <rpl_re_set_registers@@Base+0x57f8>
   24390:	mov	x1, x23
   24394:	str	x0, [x19, #80]
   24398:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   2439c:	cbz	w0, 243b4 <rpl_re_set_registers@@Base+0x580c>
   243a0:	mov	x0, x19
   243a4:	bl	1ec20 <rpl_re_set_registers@@Base+0x78>
   243a8:	mov	w8, #0x1                   	// #1
   243ac:	cbnz	w8, 243cc <rpl_re_set_registers@@Base+0x5824>
   243b0:	b	24348 <rpl_re_set_registers@@Base+0x57a0>
   243b4:	ldrb	w9, [x19, #104]
   243b8:	mov	w8, wzr
   243bc:	mov	x26, xzr
   243c0:	orr	w9, w9, #0x80
   243c4:	strb	w9, [x19, #104]
   243c8:	cbz	w8, 24348 <rpl_re_set_registers@@Base+0x57a0>
   243cc:	orr	w8, w8, #0x4
   243d0:	cmp	w8, #0x4
   243d4:	b.ne	24410 <rpl_re_set_registers@@Base+0x5868>  // b.any
   243d8:	ldr	x8, [x23, #8]
   243dc:	add	x25, x25, #0x1
   243e0:	cmp	x25, x8
   243e4:	b.lt	242d0 <rpl_re_set_registers@@Base+0x5728>  // b.tstop
   243e8:	mov	x0, x21
   243ec:	mov	x1, x19
   243f0:	mov	x2, x20
   243f4:	bl	24478 <rpl_re_set_registers@@Base+0x58d0>
   243f8:	cbz	w0, 24414 <rpl_re_set_registers@@Base+0x586c>
   243fc:	mov	x0, x19
   24400:	bl	1ec20 <rpl_re_set_registers@@Base+0x78>
   24404:	b	24410 <rpl_re_set_registers@@Base+0x5868>
   24408:	mov	x0, x19
   2440c:	bl	b1d0 <free@plt>
   24410:	mov	x19, xzr
   24414:	mov	x0, x19
   24418:	ldp	x20, x19, [sp, #80]
   2441c:	ldp	x22, x21, [sp, #64]
   24420:	ldp	x24, x23, [sp, #48]
   24424:	ldp	x26, x25, [sp, #32]
   24428:	ldr	x27, [sp, #16]
   2442c:	ldp	x29, x30, [sp], #96
   24430:	ret
   24434:	tbnz	x1, #63, 24474 <rpl_re_set_registers@@Base+0x58cc>
   24438:	ldr	x8, [x0, #8]
   2443c:	cmp	x8, x1
   24440:	b.le	24474 <rpl_re_set_registers@@Base+0x58cc>
   24444:	sub	x8, x8, #0x1
   24448:	cmp	x8, x1
   2444c:	str	x8, [x0, #8]
   24450:	b.le	24474 <rpl_re_set_registers@@Base+0x58cc>
   24454:	ldr	x8, [x0, #16]
   24458:	add	x9, x8, x1, lsl #3
   2445c:	ldr	x10, [x9, #8]
   24460:	add	x1, x1, #0x1
   24464:	str	x10, [x9]
   24468:	ldr	x9, [x0, #8]
   2446c:	cmp	x1, x9
   24470:	b.lt	24458 <rpl_re_set_registers@@Base+0x58b0>  // b.tstop
   24474:	ret
   24478:	stp	x29, x30, [sp, #-80]!
   2447c:	stp	x24, x23, [sp, #32]
   24480:	stp	x22, x21, [sp, #48]
   24484:	stp	x20, x19, [sp, #64]
   24488:	mov	x19, x1
   2448c:	ldr	x1, [x1, #16]
   24490:	add	x22, x19, #0x20
   24494:	mov	x21, x0
   24498:	mov	x0, x22
   2449c:	str	x25, [sp, #16]
   244a0:	mov	x29, sp
   244a4:	mov	x20, x2
   244a8:	str	x2, [x19]
   244ac:	bl	23980 <rpl_re_set_registers@@Base+0x4dd8>
   244b0:	cbnz	w0, 244fc <rpl_re_set_registers@@Base+0x5954>
   244b4:	ldr	x8, [x19, #16]
   244b8:	cmp	x8, #0x1
   244bc:	b.lt	24504 <rpl_re_set_registers@@Base+0x595c>  // b.tstop
   244c0:	mov	x23, xzr
   244c4:	b	244d8 <rpl_re_set_registers@@Base+0x5930>
   244c8:	ldr	x8, [x19, #16]
   244cc:	add	x23, x23, #0x1
   244d0:	cmp	x23, x8
   244d4:	b.ge	24504 <rpl_re_set_registers@@Base+0x595c>  // b.tcont
   244d8:	ldr	x8, [x19, #24]
   244dc:	ldr	x1, [x8, x23, lsl #3]
   244e0:	ldr	x8, [x21]
   244e4:	add	x8, x8, x1, lsl #4
   244e8:	ldrb	w8, [x8, #8]
   244ec:	tbnz	w8, #3, 244c8 <rpl_re_set_registers@@Base+0x5920>
   244f0:	mov	x0, x22
   244f4:	bl	23f78 <rpl_re_set_registers@@Base+0x53d0>
   244f8:	tbnz	w0, #0, 244c8 <rpl_re_set_registers@@Base+0x5920>
   244fc:	mov	w0, #0xc                   	// #12
   24500:	b	2454c <rpl_re_set_registers@@Base+0x59a4>
   24504:	ldr	x8, [x21, #136]
   24508:	ldr	x21, [x21, #64]
   2450c:	mov	w9, #0x18                  	// #24
   24510:	and	x22, x8, x20
   24514:	madd	x20, x22, x9, x21
   24518:	mov	x23, x20
   2451c:	ldr	x9, [x23, #8]!
   24520:	ldr	x8, [x20]
   24524:	cmp	x9, x8
   24528:	b.le	24564 <rpl_re_set_registers@@Base+0x59bc>
   2452c:	mov	w8, #0x18                  	// #24
   24530:	ldr	x9, [x20]
   24534:	madd	x8, x22, x8, x21
   24538:	ldr	x8, [x8, #16]
   2453c:	mov	w0, wzr
   24540:	add	x10, x9, #0x1
   24544:	str	x10, [x20]
   24548:	str	x19, [x8, x9, lsl #3]
   2454c:	ldp	x20, x19, [sp, #64]
   24550:	ldp	x22, x21, [sp, #48]
   24554:	ldp	x24, x23, [sp, #32]
   24558:	ldr	x25, [sp, #16]
   2455c:	ldp	x29, x30, [sp], #80
   24560:	ret
   24564:	mov	w9, #0x18                  	// #24
   24568:	madd	x24, x22, x9, x21
   2456c:	ldr	x0, [x24, #16]!
   24570:	lsl	x8, x8, #1
   24574:	add	x25, x8, #0x2
   24578:	lsl	x1, x25, #3
   2457c:	bl	aea0 <realloc@plt>
   24580:	cbz	x0, 244fc <rpl_re_set_registers@@Base+0x5954>
   24584:	str	x0, [x24]
   24588:	str	x25, [x23]
   2458c:	b	2452c <rpl_re_set_registers@@Base+0x5984>
   24590:	stp	x29, x30, [sp, #-64]!
   24594:	stp	x22, x21, [sp, #32]
   24598:	stp	x20, x19, [sp, #48]
   2459c:	mov	x19, x2
   245a0:	mov	x21, x1
   245a4:	cmp	w3, #0x2
   245a8:	mov	x20, x0
   245ac:	stp	x24, x23, [sp, #16]
   245b0:	mov	x29, sp
   245b4:	b.eq	24638 <rpl_re_set_registers@@Base+0x5a90>  // b.none
   245b8:	cmp	w3, #0x1
   245bc:	add	x24, x19, #0x1
   245c0:	b.eq	245f8 <rpl_re_set_registers@@Base+0x5a50>  // b.none
   245c4:	cbnz	w3, 246d8 <rpl_re_set_registers@@Base+0x5b30>
   245c8:	lsl	x23, x24, #3
   245cc:	mov	x0, x23
   245d0:	bl	abc0 <malloc@plt>
   245d4:	str	x0, [x20, #8]
   245d8:	cbz	x0, 24684 <rpl_re_set_registers@@Base+0x5adc>
   245dc:	mov	x22, x0
   245e0:	mov	x0, x23
   245e4:	bl	abc0 <malloc@plt>
   245e8:	str	x0, [x20, #16]
   245ec:	cbz	x0, 246c8 <rpl_re_set_registers@@Base+0x5b20>
   245f0:	str	x24, [x20]
   245f4:	b	24604 <rpl_re_set_registers@@Base+0x5a5c>
   245f8:	ldr	x8, [x20]
   245fc:	cmp	x24, x8
   24600:	b.hi	24698 <rpl_re_set_registers@@Base+0x5af0>  // b.pmore
   24604:	mov	w0, #0x1                   	// #1
   24608:	cmp	x19, #0x1
   2460c:	b.lt	24650 <rpl_re_set_registers@@Base+0x5aa8>  // b.tstop
   24610:	ldp	x8, x9, [x20, #8]
   24614:	add	x10, x21, #0x8
   24618:	mov	x11, x19
   2461c:	ldur	x12, [x10, #-8]
   24620:	subs	x11, x11, #0x1
   24624:	str	x12, [x8], #8
   24628:	ldr	x12, [x10], #16
   2462c:	str	x12, [x9], #8
   24630:	b.ne	2461c <rpl_re_set_registers@@Base+0x5a74>  // b.any
   24634:	b	24654 <rpl_re_set_registers@@Base+0x5aac>
   24638:	ldr	x8, [x20]
   2463c:	cmp	x8, x19
   24640:	b.cc	246f8 <rpl_re_set_registers@@Base+0x5b50>  // b.lo, b.ul, b.last
   24644:	mov	w0, #0x2                   	// #2
   24648:	cmp	x19, #0x1
   2464c:	b.ge	24610 <rpl_re_set_registers@@Base+0x5a68>  // b.tcont
   24650:	mov	x19, xzr
   24654:	ldr	x8, [x20]
   24658:	cmp	x19, x8
   2465c:	b.cs	24684 <rpl_re_set_registers@@Base+0x5adc>  // b.hs, b.nlast
   24660:	ldp	x9, x8, [x20, #8]
   24664:	mov	x10, #0xffffffffffffffff    	// #-1
   24668:	lsl	x11, x19, #3
   2466c:	str	x10, [x8, x11]
   24670:	str	x10, [x9, x11]
   24674:	ldr	x11, [x20]
   24678:	add	x19, x19, #0x1
   2467c:	cmp	x19, x11
   24680:	b.cc	24668 <rpl_re_set_registers@@Base+0x5ac0>  // b.lo, b.ul, b.last
   24684:	ldp	x20, x19, [sp, #48]
   24688:	ldp	x22, x21, [sp, #32]
   2468c:	ldp	x24, x23, [sp, #16]
   24690:	ldp	x29, x30, [sp], #64
   24694:	ret
   24698:	ldr	x0, [x20, #8]
   2469c:	lsl	x23, x24, #3
   246a0:	mov	x1, x23
   246a4:	bl	aea0 <realloc@plt>
   246a8:	cbz	x0, 24684 <rpl_re_set_registers@@Base+0x5adc>
   246ac:	mov	x22, x0
   246b0:	ldr	x0, [x20, #16]
   246b4:	mov	x1, x23
   246b8:	bl	aea0 <realloc@plt>
   246bc:	cbz	x0, 246c8 <rpl_re_set_registers@@Base+0x5b20>
   246c0:	stp	x22, x0, [x20, #8]
   246c4:	b	245f0 <rpl_re_set_registers@@Base+0x5a48>
   246c8:	mov	x0, x22
   246cc:	bl	b1d0 <free@plt>
   246d0:	mov	w0, wzr
   246d4:	b	24684 <rpl_re_set_registers@@Base+0x5adc>
   246d8:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   246dc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   246e0:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   246e4:	add	x0, x0, #0xc62
   246e8:	add	x1, x1, #0xbdd
   246ec:	add	x3, x3, #0xc7f
   246f0:	mov	w2, #0x1f9                 	// #505
   246f4:	bl	b6e0 <__assert_fail@plt>
   246f8:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   246fc:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   24700:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   24704:	add	x0, x0, #0xcc8
   24708:	add	x1, x1, #0xbdd
   2470c:	add	x3, x3, #0xc7f
   24710:	mov	w2, #0x1fb                 	// #507
   24714:	bl	b6e0 <__assert_fail@plt>
   24718:	stp	x29, x30, [sp, #-64]!
   2471c:	stp	x22, x21, [sp, #32]
   24720:	stp	x20, x19, [sp, #48]
   24724:	ldrsw	x9, [x6, #180]
   24728:	add	x10, x2, #0x1
   2472c:	mov	x8, x4
   24730:	mov	x19, x0
   24734:	cmp	x9, x3
   24738:	csel	x9, x9, x3, gt
   2473c:	cmp	x10, x9
   24740:	str	x23, [sp, #16]
   24744:	mov	x21, x2
   24748:	mov	x22, x1
   2474c:	csinc	x23, x9, x2, ge  // ge = tcont
   24750:	and	w4, w5, #0x1
   24754:	mov	x0, x1
   24758:	mov	x1, x2
   2475c:	mov	x2, x19
   24760:	mov	x3, x8
   24764:	mov	x5, x6
   24768:	mov	x29, sp
   2476c:	mov	x20, x6
   24770:	bl	1f6e4 <rpl_re_set_registers@@Base+0xb3c>
   24774:	mov	x0, x19
   24778:	mov	x1, x23
   2477c:	bl	1f734 <rpl_re_set_registers@@Base+0xb8c>
   24780:	cbnz	w0, 247c0 <rpl_re_set_registers@@Base+0x5c18>
   24784:	add	x8, x20, #0xb8
   24788:	str	x8, [x19, #128]
   2478c:	ldrb	w8, [x20, #176]
   24790:	ldrb	w9, [x19, #139]
   24794:	ubfx	w8, w8, #4, #1
   24798:	strb	w8, [x19, #142]
   2479c:	cbz	w9, 247a8 <rpl_re_set_registers@@Base+0x5c00>
   247a0:	mov	x8, xzr
   247a4:	b	247b8 <rpl_re_set_registers@@Base+0x5c10>
   247a8:	str	x22, [x19, #8]
   247ac:	ldr	w8, [x20, #180]
   247b0:	cmp	w8, #0x1
   247b4:	csel	x8, xzr, x21, gt
   247b8:	mov	w0, wzr
   247bc:	stp	x8, x8, [x19, #48]
   247c0:	ldp	x20, x19, [sp, #48]
   247c4:	ldp	x22, x21, [sp, #32]
   247c8:	ldr	x23, [sp, #16]
   247cc:	ldp	x29, x30, [sp], #64
   247d0:	ret
   247d4:	stp	x29, x30, [sp, #-48]!
   247d8:	stp	x20, x19, [sp, #32]
   247dc:	mov	x19, x2
   247e0:	mov	x20, x0
   247e4:	mov	x8, #0xffffffffffffffff    	// #-1
   247e8:	cmp	x2, #0x1
   247ec:	str	x21, [sp, #16]
   247f0:	mov	x29, sp
   247f4:	str	w1, [x0, #160]
   247f8:	str	x8, [x0, #168]
   247fc:	b.lt	24840 <rpl_re_set_registers@@Base+0x5c98>  // b.tstop
   24800:	mov	x8, #0x6666666666666666    	// #7378697629483820646
   24804:	movk	x8, #0x666, lsl #48
   24808:	cmp	x19, x8
   2480c:	b.hi	24864 <rpl_re_set_registers@@Base+0x5cbc>  // b.pmore
   24810:	add	x8, x19, x19, lsl #2
   24814:	lsl	x0, x8, #3
   24818:	bl	abc0 <malloc@plt>
   2481c:	mov	x21, x0
   24820:	str	x0, [x20, #216]
   24824:	lsl	x0, x19, #3
   24828:	bl	abc0 <malloc@plt>
   2482c:	mov	x8, x0
   24830:	str	x0, [x20, #248]
   24834:	mov	w0, #0xc                   	// #12
   24838:	cbz	x21, 24854 <rpl_re_set_registers@@Base+0x5cac>
   2483c:	cbz	x8, 24854 <rpl_re_set_registers@@Base+0x5cac>
   24840:	mov	w0, wzr
   24844:	mov	w8, #0x1                   	// #1
   24848:	str	x19, [x20, #208]
   2484c:	str	w8, [x20, #224]
   24850:	str	x19, [x20, #240]
   24854:	ldp	x20, x19, [sp, #32]
   24858:	ldr	x21, [sp, #16]
   2485c:	ldp	x29, x30, [sp], #48
   24860:	ret
   24864:	mov	w0, #0xc                   	// #12
   24868:	b	24854 <rpl_re_set_registers@@Base+0x5cac>
   2486c:	sub	sp, sp, #0x60
   24870:	stp	x29, x30, [sp, #16]
   24874:	str	x25, [sp, #32]
   24878:	stp	x24, x23, [sp, #48]
   2487c:	stp	x22, x21, [sp, #64]
   24880:	stp	x20, x19, [sp, #80]
   24884:	mov	x8, x0
   24888:	ldr	x9, [x8, #40]!
   2488c:	mov	x19, x0
   24890:	mov	x20, x1
   24894:	mov	w21, w2
   24898:	cmp	x9, x1
   2489c:	add	x29, sp, #0x10
   248a0:	b.le	249f4 <rpl_re_set_registers@@Base+0x5e4c>
   248a4:	ldr	w9, [x19, #144]
   248a8:	cmp	w9, #0x2
   248ac:	b.lt	248b4 <rpl_re_set_registers@@Base+0x5d0c>  // b.tstop
   248b0:	str	xzr, [x19, #32]
   248b4:	ldr	x9, [x19, #80]
   248b8:	ldr	x10, [x19, #96]
   248bc:	strb	wzr, [x19, #140]
   248c0:	tst	w21, #0x1
   248c4:	str	x9, [x19, #88]
   248c8:	str	x10, [x19, #104]
   248cc:	stp	xzr, xzr, [x8]
   248d0:	str	xzr, [x8, #16]
   248d4:	ldrb	w8, [x19, #139]
   248d8:	mov	w9, #0x4                   	// #4
   248dc:	mov	w10, #0x6                   	// #6
   248e0:	csel	w9, w10, w9, eq  // eq = none
   248e4:	mov	x22, x20
   248e8:	str	w9, [x19, #112]
   248ec:	cbnz	w8, 248fc <rpl_re_set_registers@@Base+0x5d54>
   248f0:	ldr	x8, [x19]
   248f4:	mov	x22, x20
   248f8:	str	x8, [x19, #8]
   248fc:	cbz	x22, 24978 <rpl_re_set_registers@@Base+0x5dd0>
   24900:	ldr	x8, [x19, #56]
   24904:	cmp	x22, x8
   24908:	b.ge	24a00 <rpl_re_set_registers@@Base+0x5e58>  // b.tcont
   2490c:	ldrb	w8, [x19, #140]
   24910:	cbnz	w8, 24b14 <rpl_re_set_registers@@Base+0x5f6c>
   24914:	sub	x1, x22, #0x1
   24918:	mov	x0, x19
   2491c:	mov	w2, w21
   24920:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   24924:	ldr	w8, [x19, #144]
   24928:	str	w0, [x19, #112]
   2492c:	cmp	w8, #0x2
   24930:	b.lt	2494c <rpl_re_set_registers@@Base+0x5da4>  // b.tstop
   24934:	ldr	x8, [x19, #48]
   24938:	ldr	x0, [x19, #16]
   2493c:	sub	x8, x8, x22
   24940:	add	x1, x0, x22, lsl #2
   24944:	lsl	x2, x8, #2
   24948:	bl	a810 <memmove@plt>
   2494c:	ldrb	w8, [x19, #139]
   24950:	cbnz	w8, 24c08 <rpl_re_set_registers@@Base+0x6060>
   24954:	ldp	x8, x9, [x19, #48]
   24958:	sub	x8, x8, x22
   2495c:	sub	x9, x9, x22
   24960:	stp	x8, x9, [x19, #48]
   24964:	ldrb	w8, [x19, #139]
   24968:	cbnz	w8, 24978 <rpl_re_set_registers@@Base+0x5dd0>
   2496c:	ldr	x8, [x19, #8]
   24970:	add	x8, x8, x22
   24974:	str	x8, [x19, #8]
   24978:	ldr	x8, [x19, #88]
   2497c:	ldr	x9, [x19, #104]
   24980:	ldr	w10, [x19, #144]
   24984:	str	x20, [x19, #40]
   24988:	sub	x8, x8, x22
   2498c:	sub	x9, x9, x22
   24990:	cmp	w10, #0x2
   24994:	str	x8, [x19, #88]
   24998:	str	x9, [x19, #104]
   2499c:	b.lt	249b8 <rpl_re_set_registers@@Base+0x5e10>  // b.tstop
   249a0:	ldrb	w8, [x19, #136]
   249a4:	cbz	w8, 249c8 <rpl_re_set_registers@@Base+0x5e20>
   249a8:	mov	x0, x19
   249ac:	bl	1f7e8 <rpl_re_set_registers@@Base+0xc40>
   249b0:	cbnz	w0, 249d8 <rpl_re_set_registers@@Base+0x5e30>
   249b4:	b	249d0 <rpl_re_set_registers@@Base+0x5e28>
   249b8:	ldrb	w9, [x19, #139]
   249bc:	cbnz	w9, 24c94 <rpl_re_set_registers@@Base+0x60ec>
   249c0:	str	x8, [x19, #48]
   249c4:	b	249d0 <rpl_re_set_registers@@Base+0x5e28>
   249c8:	mov	x0, x19
   249cc:	bl	1fe60 <rpl_re_set_registers@@Base+0x12b8>
   249d0:	mov	w0, wzr
   249d4:	str	xzr, [x19, #72]
   249d8:	ldp	x20, x19, [sp, #80]
   249dc:	ldp	x22, x21, [sp, #64]
   249e0:	ldp	x24, x23, [sp, #48]
   249e4:	ldr	x25, [sp, #32]
   249e8:	ldp	x29, x30, [sp, #16]
   249ec:	add	sp, sp, #0x60
   249f0:	ret
   249f4:	sub	x22, x20, x9
   249f8:	cbnz	x22, 24900 <rpl_re_set_registers@@Base+0x5d58>
   249fc:	b	24978 <rpl_re_set_registers@@Base+0x5dd0>
   24a00:	ldrb	w8, [x19, #140]
   24a04:	ldr	x23, [x19, #48]
   24a08:	cbnz	w8, 24d8c <rpl_re_set_registers@@Base+0x61e4>
   24a0c:	ldrsw	x8, [x19, #144]
   24a10:	str	xzr, [x19, #48]
   24a14:	cmp	w8, #0x2
   24a18:	b.lt	24ca8 <rpl_re_set_registers@@Base+0x6100>  // b.tstop
   24a1c:	mov	w9, #0xffffffff            	// #-1
   24a20:	str	w9, [x29, #28]
   24a24:	ldrb	w9, [x19, #137]
   24a28:	cbz	w9, 24ac0 <rpl_re_set_registers@@Base+0x5f18>
   24a2c:	ldr	x9, [x19]
   24a30:	ldr	x11, [x19, #40]
   24a34:	sub	x8, x22, x8
   24a38:	add	x10, x9, x11
   24a3c:	add	x11, x22, x11
   24a40:	add	x8, x10, x8
   24a44:	add	x11, x11, x9
   24a48:	cmp	x8, x9
   24a4c:	add	x24, x10, x22
   24a50:	csel	x9, x9, x8, cc  // cc = lo, ul, last
   24a54:	sub	x8, x11, #0x1
   24a58:	cmp	x8, x9
   24a5c:	b.cc	24ac0 <rpl_re_set_registers@@Base+0x5f18>  // b.lo, b.ul, b.last
   24a60:	ldrb	w11, [x8], #-1
   24a64:	and	w11, w11, #0xc0
   24a68:	cmp	w11, #0x80
   24a6c:	b.eq	24a58 <rpl_re_set_registers@@Base+0x5eb0>  // b.none
   24a70:	ldr	x11, [x19, #88]
   24a74:	ldr	x9, [x19, #120]
   24a78:	add	x25, x8, #0x1
   24a7c:	mov	x1, x25
   24a80:	add	x10, x10, x11
   24a84:	sub	x2, x10, x25
   24a88:	cbnz	x9, 24dfc <rpl_re_set_registers@@Base+0x6254>
   24a8c:	add	x0, x29, #0x18
   24a90:	add	x3, sp, #0x8
   24a94:	str	xzr, [sp, #8]
   24a98:	bl	a950 <rpl_mbrtowc@plt>
   24a9c:	sub	x8, x24, x25
   24aa0:	subs	x8, x0, x8
   24aa4:	b.cc	24ac0 <rpl_re_set_registers@@Base+0x5f18>  // b.lo, b.ul, b.last
   24aa8:	cmn	x0, #0x3
   24aac:	b.hi	24ac0 <rpl_re_set_registers@@Base+0x5f18>  // b.pmore
   24ab0:	str	xzr, [x19, #32]
   24ab4:	str	x8, [x19, #48]
   24ab8:	ldr	w8, [x29, #24]
   24abc:	str	w8, [x29, #28]
   24ac0:	ldr	w8, [x29, #28]
   24ac4:	cmn	w8, #0x1
   24ac8:	b.ne	24ae4 <rpl_re_set_registers@@Base+0x5f3c>  // b.any
   24acc:	add	x2, x29, #0x1c
   24ad0:	mov	x0, x19
   24ad4:	mov	x1, x20
   24ad8:	bl	25888 <rpl_re_set_registers@@Base+0x6ce0>
   24adc:	sub	x8, x0, x20
   24ae0:	str	x8, [x19, #48]
   24ae4:	ldr	w9, [x29, #28]
   24ae8:	cmn	w9, #0x1
   24aec:	b.eq	24d50 <rpl_re_set_registers@@Base+0x61a8>  // b.none
   24af0:	ldrb	w8, [x19, #142]
   24af4:	cbnz	w8, 24dd4 <rpl_re_set_registers@@Base+0x622c>
   24af8:	cmp	w9, #0xa
   24afc:	b.ne	24d64 <rpl_re_set_registers@@Base+0x61bc>  // b.any
   24b00:	ldrb	w8, [x19, #141]
   24b04:	cmp	w8, #0x0
   24b08:	cset	w8, ne  // ne = any
   24b0c:	lsl	w0, w8, #1
   24b10:	b	24d68 <rpl_re_set_registers@@Base+0x61c0>
   24b14:	ldr	x24, [x19, #48]
   24b18:	ldr	x23, [x19, #24]
   24b1c:	mov	x8, xzr
   24b20:	mov	x10, x24
   24b24:	b	24b34 <rpl_re_set_registers@@Base+0x5f8c>
   24b28:	cmp	x8, x12
   24b2c:	mov	x10, x12
   24b30:	b.ge	24b64 <rpl_re_set_registers@@Base+0x5fbc>  // b.tcont
   24b34:	add	x9, x8, x10
   24b38:	cmp	x9, #0x0
   24b3c:	cinc	x9, x9, lt  // lt = tstop
   24b40:	asr	x9, x9, #1
   24b44:	ldr	x11, [x23, x9, lsl #3]
   24b48:	mov	x12, x9
   24b4c:	cmp	x11, x22
   24b50:	b.gt	24b28 <rpl_re_set_registers@@Base+0x5f80>
   24b54:	b.ge	24b64 <rpl_re_set_registers@@Base+0x5fbc>  // b.tcont
   24b58:	add	x8, x9, #0x1
   24b5c:	mov	x12, x10
   24b60:	b	24b28 <rpl_re_set_registers@@Base+0x5f80>
   24b64:	cmp	x11, x22
   24b68:	cinc	x25, x9, lt  // lt = tstop
   24b6c:	sub	x1, x25, #0x1
   24b70:	mov	x0, x19
   24b74:	mov	w2, w21
   24b78:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   24b7c:	subs	x8, x24, x22
   24b80:	str	w0, [x19, #112]
   24b84:	b.le	24c20 <rpl_re_set_registers@@Base+0x6078>
   24b88:	cmp	x25, x22
   24b8c:	b.ne	24c20 <rpl_re_set_registers@@Base+0x6078>  // b.any
   24b90:	ldr	x9, [x23, x25, lsl #3]
   24b94:	cmp	x9, x22
   24b98:	b.ne	24c20 <rpl_re_set_registers@@Base+0x6078>  // b.any
   24b9c:	ldr	x0, [x19, #16]
   24ba0:	lsl	x2, x8, #2
   24ba4:	add	x1, x0, x22, lsl #2
   24ba8:	bl	a810 <memmove@plt>
   24bac:	ldr	x0, [x19, #8]
   24bb0:	ldr	x8, [x19, #48]
   24bb4:	add	x1, x0, x22
   24bb8:	sub	x2, x8, x22
   24bbc:	bl	a810 <memmove@plt>
   24bc0:	ldp	x8, x9, [x19, #48]
   24bc4:	sub	x8, x8, x22
   24bc8:	sub	x9, x9, x22
   24bcc:	cmp	x8, #0x1
   24bd0:	stp	x8, x9, [x19, #48]
   24bd4:	b.lt	24964 <rpl_re_set_registers@@Base+0x5dbc>  // b.tstop
   24bd8:	ldr	x9, [x19, #24]
   24bdc:	mov	x8, xzr
   24be0:	add	x10, x9, x22, lsl #3
   24be4:	lsl	x11, x8, #3
   24be8:	ldr	x12, [x10, x11]
   24bec:	add	x8, x8, #0x1
   24bf0:	sub	x12, x12, x22
   24bf4:	str	x12, [x9, x11]
   24bf8:	ldr	x11, [x19, #48]
   24bfc:	cmp	x8, x11
   24c00:	b.lt	24be4 <rpl_re_set_registers@@Base+0x603c>  // b.tstop
   24c04:	b	24964 <rpl_re_set_registers@@Base+0x5dbc>
   24c08:	ldr	x0, [x19, #8]
   24c0c:	ldr	x8, [x19, #48]
   24c10:	add	x1, x0, x22
   24c14:	sub	x2, x8, x22
   24c18:	bl	a810 <memmove@plt>
   24c1c:	b	24954 <rpl_re_set_registers@@Base+0x5dac>
   24c20:	ldr	x9, [x19, #96]
   24c24:	ldr	x8, [x19, #80]
   24c28:	sub	x10, x22, x20
   24c2c:	strb	wzr, [x19, #140]
   24c30:	add	x9, x10, x9
   24c34:	add	x8, x10, x8
   24c38:	str	x9, [x19, #104]
   24c3c:	sub	x9, x23, #0x8
   24c40:	str	x8, [x19, #88]
   24c44:	mov	x8, x25
   24c48:	subs	x25, x25, #0x1
   24c4c:	b.lt	24c5c <rpl_re_set_registers@@Base+0x60b4>  // b.tstop
   24c50:	ldr	x10, [x9, x8, lsl #3]
   24c54:	cmp	x10, x22
   24c58:	b.eq	24c44 <rpl_re_set_registers@@Base+0x609c>  // b.none
   24c5c:	cmp	x8, x24
   24c60:	b.ge	24c84 <rpl_re_set_registers@@Base+0x60dc>  // b.tcont
   24c64:	ldr	x9, [x19, #16]
   24c68:	ldr	w10, [x9, x8, lsl #2]
   24c6c:	cmn	w10, #0x1
   24c70:	b.ne	24c84 <rpl_re_set_registers@@Base+0x60dc>  // b.any
   24c74:	add	x8, x8, #0x1
   24c78:	cmp	x24, x8
   24c7c:	b.ne	24c68 <rpl_re_set_registers@@Base+0x60c0>  // b.any
   24c80:	mov	x8, x24
   24c84:	cmp	x8, x24
   24c88:	b.ne	24ce4 <rpl_re_set_registers@@Base+0x613c>  // b.any
   24c8c:	str	xzr, [x19, #48]
   24c90:	b	24d74 <rpl_re_set_registers@@Base+0x61cc>
   24c94:	ldrb	w8, [x19, #136]
   24c98:	cbz	w8, 24d3c <rpl_re_set_registers@@Base+0x6194>
   24c9c:	mov	x0, x19
   24ca0:	bl	1fde0 <rpl_re_set_registers@@Base+0x1238>
   24ca4:	b	249d0 <rpl_re_set_registers@@Base+0x5e28>
   24ca8:	ldr	x8, [x19, #40]
   24cac:	ldr	x9, [x19]
   24cb0:	add	x8, x22, x8
   24cb4:	add	x9, x8, x9
   24cb8:	ldr	x8, [x19, #120]
   24cbc:	ldurb	w21, [x9, #-1]
   24cc0:	str	xzr, [x19, #56]
   24cc4:	cbz	x8, 24ccc <rpl_re_set_registers@@Base+0x6124>
   24cc8:	ldrb	w21, [x8, x21]
   24ccc:	ldr	x0, [x19, #128]
   24cd0:	mov	x1, x21
   24cd4:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   24cd8:	tbz	w0, #0, 24d20 <rpl_re_set_registers@@Base+0x6178>
   24cdc:	mov	w8, #0x1                   	// #1
   24ce0:	b	24d84 <rpl_re_set_registers@@Base+0x61dc>
   24ce4:	ldr	x8, [x23, x8, lsl #3]
   24ce8:	subs	x21, x8, x22
   24cec:	str	x21, [x19, #48]
   24cf0:	b.eq	24d74 <rpl_re_set_registers@@Base+0x61cc>  // b.none
   24cf4:	cmp	x21, #0x1
   24cf8:	b.lt	24d0c <rpl_re_set_registers@@Base+0x6164>  // b.tstop
   24cfc:	ldr	x0, [x19, #16]
   24d00:	lsl	x2, x21, #2
   24d04:	mov	w1, #0xff                  	// #255
   24d08:	bl	ad40 <memset@plt>
   24d0c:	ldr	x0, [x19, #8]
   24d10:	mov	w1, #0xff                  	// #255
   24d14:	mov	x2, x21
   24d18:	bl	ad40 <memset@plt>
   24d1c:	b	24d74 <rpl_re_set_registers@@Base+0x61cc>
   24d20:	cmp	w21, #0xa
   24d24:	b.ne	24d80 <rpl_re_set_registers@@Base+0x61d8>  // b.any
   24d28:	ldrb	w8, [x19, #141]
   24d2c:	cmp	w8, #0x0
   24d30:	cset	w8, ne  // ne = any
   24d34:	lsl	w8, w8, #1
   24d38:	b	24d84 <rpl_re_set_registers@@Base+0x61dc>
   24d3c:	ldr	x8, [x19, #120]
   24d40:	cbz	x8, 249d0 <rpl_re_set_registers@@Base+0x5e28>
   24d44:	mov	x0, x19
   24d48:	bl	20004 <rpl_re_set_registers@@Base+0x145c>
   24d4c:	b	249d0 <rpl_re_set_registers@@Base+0x5e28>
   24d50:	sub	x1, x23, #0x1
   24d54:	mov	x0, x19
   24d58:	mov	w2, w21
   24d5c:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   24d60:	b	24d68 <rpl_re_set_registers@@Base+0x61c0>
   24d64:	mov	w0, wzr
   24d68:	ldr	x21, [x19, #48]
   24d6c:	str	w0, [x19, #112]
   24d70:	cbnz	x21, 24db0 <rpl_re_set_registers@@Base+0x6208>
   24d74:	ldr	x8, [x19, #48]
   24d78:	str	x8, [x19, #56]
   24d7c:	b	24964 <rpl_re_set_registers@@Base+0x5dbc>
   24d80:	mov	w8, wzr
   24d84:	str	w8, [x19, #112]
   24d88:	b	24964 <rpl_re_set_registers@@Base+0x5dbc>
   24d8c:	ldr	x8, [x19, #80]
   24d90:	ldr	x9, [x19, #96]
   24d94:	sub	x10, x22, x20
   24d98:	strb	wzr, [x19, #140]
   24d9c:	add	x8, x10, x8
   24da0:	add	x9, x10, x9
   24da4:	str	x8, [x19, #88]
   24da8:	str	x9, [x19, #104]
   24dac:	b	24a0c <rpl_re_set_registers@@Base+0x5e64>
   24db0:	cmp	x21, #0x1
   24db4:	b.lt	24dc8 <rpl_re_set_registers@@Base+0x6220>  // b.tstop
   24db8:	ldr	x0, [x19, #16]
   24dbc:	lsl	x2, x21, #2
   24dc0:	mov	w1, #0xff                  	// #255
   24dc4:	bl	ad40 <memset@plt>
   24dc8:	ldrb	w8, [x19, #139]
   24dcc:	cbnz	w8, 24d0c <rpl_re_set_registers@@Base+0x6164>
   24dd0:	b	24d74 <rpl_re_set_registers@@Base+0x61cc>
   24dd4:	mov	w0, w9
   24dd8:	mov	w21, w9
   24ddc:	bl	b500 <iswalnum@plt>
   24de0:	mov	w8, w0
   24de4:	cmp	w21, #0x5f
   24de8:	mov	w0, #0x1                   	// #1
   24dec:	b.eq	24d68 <rpl_re_set_registers@@Base+0x61c0>  // b.none
   24df0:	mov	w9, w21
   24df4:	cbz	w8, 24af8 <rpl_re_set_registers@@Base+0x5f50>
   24df8:	b	24d68 <rpl_re_set_registers@@Base+0x61c0>
   24dfc:	cmp	x2, #0x6
   24e00:	mov	w10, #0x6                   	// #6
   24e04:	csel	x10, x2, x10, lt  // lt = tstop
   24e08:	cmp	w10, #0x1
   24e0c:	mov	x1, sp
   24e10:	b.lt	24a8c <rpl_re_set_registers@@Base+0x5ee4>  // b.tstop
   24e14:	sxtw	x10, w10
   24e18:	sub	x11, x1, #0x1
   24e1c:	ldrb	w12, [x8, x10]
   24e20:	mov	x1, sp
   24e24:	ldrb	w12, [x9, x12]
   24e28:	strb	w12, [x11, x10]
   24e2c:	subs	x10, x10, #0x1
   24e30:	b.gt	24e1c <rpl_re_set_registers@@Base+0x6274>
   24e34:	b	24a8c <rpl_re_set_registers@@Base+0x5ee4>
   24e38:	sub	sp, sp, #0x70
   24e3c:	stp	x29, x30, [sp, #16]
   24e40:	stp	x28, x27, [sp, #32]
   24e44:	stp	x26, x25, [sp, #48]
   24e48:	stp	x24, x23, [sp, #64]
   24e4c:	stp	x22, x21, [sp, #80]
   24e50:	stp	x20, x19, [sp, #96]
   24e54:	ldr	x23, [x0, #152]
   24e58:	add	x29, sp, #0x10
   24e5c:	ldr	x20, [x0, #72]
   24e60:	stur	wzr, [x29, #-4]
   24e64:	ldr	x24, [x23, #72]
   24e68:	cmp	x2, #0x0
   24e6c:	mov	x25, x2
   24e70:	mov	w21, w1
   24e74:	ldrsb	w8, [x24, #104]
   24e78:	mov	x22, x0
   24e7c:	cset	w19, ne  // ne = any
   24e80:	tbz	w8, #31, 24eb4 <rpl_re_set_registers@@Base+0x630c>
   24e84:	ldr	w2, [x22, #160]
   24e88:	sub	x1, x20, #0x1
   24e8c:	mov	x0, x22
   24e90:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   24e94:	tbnz	w0, #0, 24eb0 <rpl_re_set_registers@@Base+0x6308>
   24e98:	mov	w3, w0
   24e9c:	cbz	w0, 24eb4 <rpl_re_set_registers@@Base+0x630c>
   24ea0:	tbz	w3, #1, 24ee4 <rpl_re_set_registers@@Base+0x633c>
   24ea4:	tbz	w3, #2, 24ee4 <rpl_re_set_registers@@Base+0x633c>
   24ea8:	ldr	x24, [x23, #96]
   24eac:	b	24eb4 <rpl_re_set_registers@@Base+0x630c>
   24eb0:	ldr	x24, [x23, #80]
   24eb4:	cbz	x24, 24f0c <rpl_re_set_registers@@Base+0x6364>
   24eb8:	ldr	x8, [x22, #184]
   24ebc:	cbz	x8, 24ecc <rpl_re_set_registers@@Base+0x6324>
   24ec0:	str	x24, [x8, x20, lsl #3]
   24ec4:	ldr	x8, [x23, #152]
   24ec8:	cbnz	x8, 24f4c <rpl_re_set_registers@@Base+0x63a4>
   24ecc:	ldrsb	w8, [x24, #104]
   24ed0:	str	x25, [sp]
   24ed4:	tbnz	w8, #4, 24f38 <rpl_re_set_registers@@Base+0x6390>
   24ed8:	mov	x27, xzr
   24edc:	mov	x23, #0xffffffffffffffff    	// #-1
   24ee0:	b	24fcc <rpl_re_set_registers@@Base+0x6424>
   24ee4:	tbnz	w3, #1, 24f04 <rpl_re_set_registers@@Base+0x635c>
   24ee8:	tbz	w3, #2, 24eb4 <rpl_re_set_registers@@Base+0x630c>
   24eec:	ldr	x2, [x24, #80]
   24ef0:	sub	x0, x29, #0x4
   24ef4:	mov	x1, x23
   24ef8:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   24efc:	mov	x24, x0
   24f00:	b	24eb4 <rpl_re_set_registers@@Base+0x630c>
   24f04:	ldr	x24, [x23, #88]
   24f08:	b	24eb4 <rpl_re_set_registers@@Base+0x630c>
   24f0c:	ldur	w8, [x29, #-4]
   24f10:	cmp	w8, #0xc
   24f14:	b.eq	2513c <rpl_re_set_registers@@Base+0x6594>  // b.none
   24f18:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   24f1c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   24f20:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   24f24:	add	x0, x0, #0xce0
   24f28:	add	x1, x1, #0xbdd
   24f2c:	add	x3, x3, #0xcf2
   24f30:	mov	w2, #0x435                 	// #1077
   24f34:	bl	b6e0 <__assert_fail@plt>
   24f38:	tbnz	w8, #31, 24f8c <rpl_re_set_registers@@Base+0x63e4>
   24f3c:	tbz	w21, #0, 24fb0 <rpl_re_set_registers@@Base+0x6408>
   24f40:	mov	w27, #0x1                   	// #1
   24f44:	mov	x23, x20
   24f48:	b	24fcc <rpl_re_set_registers@@Base+0x6424>
   24f4c:	add	x23, x24, #0x8
   24f50:	mov	x0, x22
   24f54:	mov	x1, x23
   24f58:	mov	x2, xzr
   24f5c:	bl	2596c <rpl_re_set_registers@@Base+0x6dc4>
   24f60:	stur	w0, [x29, #-4]
   24f64:	cbnz	w0, 25164 <rpl_re_set_registers@@Base+0x65bc>
   24f68:	ldrb	w8, [x24, #104]
   24f6c:	tbz	w8, #6, 24f84 <rpl_re_set_registers@@Base+0x63dc>
   24f70:	mov	x0, x22
   24f74:	mov	x1, x23
   24f78:	bl	25a30 <rpl_re_set_registers@@Base+0x6e88>
   24f7c:	stur	w0, [x29, #-4]
   24f80:	cbnz	w0, 25164 <rpl_re_set_registers@@Base+0x65bc>
   24f84:	mov	w19, wzr
   24f88:	b	24ecc <rpl_re_set_registers@@Base+0x6324>
   24f8c:	mov	x0, x22
   24f90:	mov	x1, x24
   24f94:	mov	x2, x20
   24f98:	bl	2518c <rpl_re_set_registers@@Base+0x65e4>
   24f9c:	cmp	x0, #0x0
   24fa0:	cset	w27, ne  // ne = any
   24fa4:	csinv	x23, x20, xzr, ne  // ne = any
   24fa8:	cbz	x0, 24fcc <rpl_re_set_registers@@Base+0x6424>
   24fac:	tbnz	w21, #0, 24fcc <rpl_re_set_registers@@Base+0x6424>
   24fb0:	mov	x23, x20
   24fb4:	b	25140 <rpl_re_set_registers@@Base+0x6598>
   24fb8:	mov	w27, #0x1                   	// #1
   24fbc:	mov	w8, wzr
   24fc0:	mov	x24, x25
   24fc4:	mov	w19, w26
   24fc8:	cbnz	w8, 2511c <rpl_re_set_registers@@Base+0x6574>
   24fcc:	ldr	x9, [x22, #104]
   24fd0:	ldr	x8, [x22, #72]
   24fd4:	cmp	x9, x8
   24fd8:	b.le	25124 <rpl_re_set_registers@@Base+0x657c>
   24fdc:	ldr	x9, [x22, #64]
   24fe0:	add	x28, x8, #0x1
   24fe4:	cmp	x28, x9
   24fe8:	b.ge	250c4 <rpl_re_set_registers@@Base+0x651c>  // b.tcont
   24fec:	ldr	x9, [x22, #48]
   24ff0:	cmp	x28, x9
   24ff4:	b.ge	250d4 <rpl_re_set_registers@@Base+0x652c>  // b.tcont
   24ff8:	sub	x0, x29, #0x4
   24ffc:	mov	x1, x22
   25000:	mov	x2, x24
   25004:	bl	25e18 <rpl_re_set_registers@@Base+0x7270>
   25008:	ldr	x8, [x22, #184]
   2500c:	mov	x25, x0
   25010:	cbz	x8, 25028 <rpl_re_set_registers@@Base+0x6480>
   25014:	sub	x0, x29, #0x4
   25018:	mov	x1, x22
   2501c:	mov	x2, x25
   25020:	bl	25edc <rpl_re_set_registers@@Base+0x7334>
   25024:	mov	x25, x0
   25028:	cbz	x25, 25078 <rpl_re_set_registers@@Base+0x64d0>
   2502c:	cmp	x24, x25
   25030:	ldrsb	w8, [x25, #104]
   25034:	cset	w9, eq  // eq = none
   25038:	tst	w19, w9
   2503c:	and	w26, w19, w9
   25040:	csel	x20, x28, x20, ne  // ne = any
   25044:	tbz	w8, #4, 24fbc <rpl_re_set_registers@@Base+0x6414>
   25048:	tbz	w8, #31, 25060 <rpl_re_set_registers@@Base+0x64b8>
   2504c:	ldr	x2, [x22, #72]
   25050:	mov	x0, x22
   25054:	mov	x1, x25
   25058:	bl	2518c <rpl_re_set_registers@@Base+0x65e4>
   2505c:	cbz	x0, 24fbc <rpl_re_set_registers@@Base+0x6414>
   25060:	ldr	x23, [x22, #72]
   25064:	str	xzr, [sp]
   25068:	tbnz	w21, #0, 24fb8 <rpl_re_set_registers@@Base+0x6410>
   2506c:	mov	w8, #0x3                   	// #3
   25070:	mov	w27, #0x1                   	// #1
   25074:	b	24fc0 <rpl_re_set_registers@@Base+0x6418>
   25078:	ldur	w8, [x29, #-4]
   2507c:	cbnz	w8, 2510c <rpl_re_set_registers@@Base+0x6564>
   25080:	cmp	x27, #0x0
   25084:	cset	w8, ne  // ne = any
   25088:	eor	w9, w21, #0x1
   2508c:	mov	x25, xzr
   25090:	and	w9, w8, w9
   25094:	mov	w8, #0x3                   	// #3
   25098:	tbnz	w9, #0, 250bc <rpl_re_set_registers@@Base+0x6514>
   2509c:	ldr	x9, [x22, #184]
   250a0:	cbz	x9, 250bc <rpl_re_set_registers@@Base+0x6514>
   250a4:	sub	x0, x29, #0x4
   250a8:	mov	x1, x22
   250ac:	bl	26028 <rpl_re_set_registers@@Base+0x7480>
   250b0:	mov	x25, x0
   250b4:	cbnz	x0, 2502c <rpl_re_set_registers@@Base+0x6484>
   250b8:	mov	w8, #0x3                   	// #3
   250bc:	mov	w26, w19
   250c0:	b	24fc0 <rpl_re_set_registers@@Base+0x6418>
   250c4:	ldr	x10, [x22, #88]
   250c8:	cmp	x9, x10
   250cc:	b.ge	24fec <rpl_re_set_registers@@Base+0x6444>  // b.tcont
   250d0:	b	250e0 <rpl_re_set_registers@@Base+0x6538>
   250d4:	ldr	x10, [x22, #88]
   250d8:	cmp	x9, x10
   250dc:	b.ge	24ff8 <rpl_re_set_registers@@Base+0x6450>  // b.tcont
   250e0:	add	w1, w8, #0x2
   250e4:	mov	x0, x22
   250e8:	bl	25d50 <rpl_re_set_registers@@Base+0x71a8>
   250ec:	stur	w0, [x29, #-4]
   250f0:	cbz	w0, 24ff8 <rpl_re_set_registers@@Base+0x6450>
   250f4:	cmp	w0, #0xc
   250f8:	b.ne	2516c <rpl_re_set_registers@@Base+0x65c4>  // b.any
   250fc:	mov	w8, #0x1                   	// #1
   25100:	mov	x25, x24
   25104:	mov	w26, w19
   25108:	b	24fc0 <rpl_re_set_registers@@Base+0x6418>
   2510c:	mov	x25, xzr
   25110:	mov	w8, #0x1                   	// #1
   25114:	mov	w26, w19
   25118:	b	24fc0 <rpl_re_set_registers@@Base+0x6418>
   2511c:	cmp	w8, #0x3
   25120:	b.ne	2513c <rpl_re_set_registers@@Base+0x6594>  // b.any
   25124:	ldr	x9, [sp]
   25128:	cbz	x9, 25140 <rpl_re_set_registers@@Base+0x6598>
   2512c:	ldr	x8, [x9]
   25130:	add	x8, x8, x20
   25134:	str	x8, [x9]
   25138:	b	25140 <rpl_re_set_registers@@Base+0x6598>
   2513c:	mov	x23, #0xfffffffffffffffe    	// #-2
   25140:	mov	x0, x23
   25144:	ldp	x20, x19, [sp, #96]
   25148:	ldp	x22, x21, [sp, #80]
   2514c:	ldp	x24, x23, [sp, #64]
   25150:	ldp	x26, x25, [sp, #48]
   25154:	ldp	x28, x27, [sp, #32]
   25158:	ldp	x29, x30, [sp, #16]
   2515c:	add	sp, sp, #0x70
   25160:	ret
   25164:	sxtw	x23, w0
   25168:	b	25140 <rpl_re_set_registers@@Base+0x6598>
   2516c:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   25170:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   25174:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   25178:	add	x0, x0, #0xce0
   2517c:	add	x1, x1, #0xbdd
   25180:	add	x3, x3, #0xcf2
   25184:	mov	w2, #0x46c                 	// #1132
   25188:	bl	b6e0 <__assert_fail@plt>
   2518c:	stp	x29, x30, [sp, #-64]!
   25190:	stp	x24, x23, [sp, #16]
   25194:	stp	x22, x21, [sp, #32]
   25198:	stp	x20, x19, [sp, #48]
   2519c:	mov	x8, x2
   251a0:	ldr	w2, [x0, #160]
   251a4:	mov	x19, x1
   251a8:	mov	x1, x8
   251ac:	mov	x29, sp
   251b0:	mov	x21, x0
   251b4:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   251b8:	ldr	x8, [x19, #16]
   251bc:	cmp	x8, #0x1
   251c0:	b.lt	251fc <rpl_re_set_registers@@Base+0x6654>  // b.tstop
   251c4:	ldr	x21, [x21, #152]
   251c8:	ldr	x23, [x19, #24]
   251cc:	mov	w20, w0
   251d0:	mov	x24, xzr
   251d4:	ldr	x22, [x23, x24, lsl #3]
   251d8:	mov	x0, x21
   251dc:	mov	w2, w20
   251e0:	mov	x1, x22
   251e4:	bl	28788 <rpl_re_set_registers@@Base+0x9be0>
   251e8:	tbnz	w0, #0, 25200 <rpl_re_set_registers@@Base+0x6658>
   251ec:	ldr	x8, [x19, #16]
   251f0:	add	x24, x24, #0x1
   251f4:	cmp	x24, x8
   251f8:	b.lt	251d4 <rpl_re_set_registers@@Base+0x662c>  // b.tstop
   251fc:	mov	x22, xzr
   25200:	mov	x0, x22
   25204:	ldp	x20, x19, [sp, #48]
   25208:	ldp	x22, x21, [sp, #32]
   2520c:	ldp	x24, x23, [sp, #16]
   25210:	ldp	x29, x30, [sp], #64
   25214:	ret
   25218:	sub	sp, sp, #0x90
   2521c:	stp	x29, x30, [sp, #64]
   25220:	stp	x26, x25, [sp, #80]
   25224:	stp	x24, x23, [sp, #96]
   25228:	stp	x22, x21, [sp, #112]
   2522c:	stp	x20, x19, [sp, #128]
   25230:	ldr	x21, [x0, #168]
   25234:	mov	x8, #0x1ffffffffffffffe    	// #2305843009213693950
   25238:	add	x29, sp, #0x40
   2523c:	cmp	x21, x8
   25240:	b.hi	253e4 <rpl_re_set_registers@@Base+0x683c>  // b.pmore
   25244:	ldr	x24, [x0, #152]
   25248:	ldr	x23, [x0, #176]
   2524c:	lsl	x8, x21, #3
   25250:	add	x22, x8, #0x8
   25254:	mov	x20, x0
   25258:	mov	x0, x22
   2525c:	bl	abc0 <malloc@plt>
   25260:	mov	x19, x0
   25264:	cbz	x0, 253ec <rpl_re_set_registers@@Base+0x6844>
   25268:	ldr	x8, [x24, #152]
   2526c:	cbz	x8, 25328 <rpl_re_set_registers@@Base+0x6780>
   25270:	mov	x0, x22
   25274:	bl	abc0 <malloc@plt>
   25278:	mov	x22, x0
   2527c:	cbz	x0, 253f0 <rpl_re_set_registers@@Base+0x6848>
   25280:	add	x26, x21, #0x1
   25284:	lsl	x2, x26, #3
   25288:	mov	x0, x22
   2528c:	mov	w1, wzr
   25290:	bl	ad40 <memset@plt>
   25294:	add	x0, sp, #0x8
   25298:	mov	x1, x19
   2529c:	mov	x2, x22
   252a0:	mov	x3, x23
   252a4:	mov	x4, x21
   252a8:	bl	287e4 <rpl_re_set_registers@@Base+0x9c3c>
   252ac:	add	x1, sp, #0x8
   252b0:	mov	x0, x20
   252b4:	bl	287f8 <rpl_re_set_registers@@Base+0x9c50>
   252b8:	ldr	x8, [sp, #56]
   252bc:	mov	w25, w0
   252c0:	mov	x0, x8
   252c4:	bl	b1d0 <free@plt>
   252c8:	cbnz	w25, 253b4 <rpl_re_set_registers@@Base+0x680c>
   252cc:	ldr	x8, [x19]
   252d0:	cbnz	x8, 25374 <rpl_re_set_registers@@Base+0x67cc>
   252d4:	ldr	x8, [x22]
   252d8:	cbnz	x8, 25374 <rpl_re_set_registers@@Base+0x67cc>
   252dc:	subs	x21, x21, #0x1
   252e0:	b.lt	25320 <rpl_re_set_registers@@Base+0x6778>  // b.tstop
   252e4:	ldr	x8, [x20, #184]
   252e8:	b	252fc <rpl_re_set_registers@@Base+0x6754>
   252ec:	add	x9, x21, #0x1
   252f0:	sub	x21, x21, #0x1
   252f4:	cmp	x9, #0x2
   252f8:	b.lt	25320 <rpl_re_set_registers@@Base+0x6778>  // b.tstop
   252fc:	ldr	x1, [x8, x21, lsl #3]
   25300:	cbz	x1, 252ec <rpl_re_set_registers@@Base+0x6744>
   25304:	ldrb	w9, [x1, #104]
   25308:	tbz	w9, #4, 252ec <rpl_re_set_registers@@Base+0x6744>
   2530c:	mov	x0, x20
   25310:	mov	x2, x21
   25314:	bl	2518c <rpl_re_set_registers@@Base+0x65e4>
   25318:	mov	x23, x0
   2531c:	b	25280 <rpl_re_set_registers@@Base+0x66d8>
   25320:	mov	w25, #0x1                   	// #1
   25324:	b	253b4 <rpl_re_set_registers@@Base+0x680c>
   25328:	add	x0, sp, #0x8
   2532c:	mov	x1, x19
   25330:	mov	x2, xzr
   25334:	mov	x3, x23
   25338:	mov	x4, x21
   2533c:	bl	287e4 <rpl_re_set_registers@@Base+0x9c3c>
   25340:	add	x1, sp, #0x8
   25344:	mov	x0, x20
   25348:	bl	287f8 <rpl_re_set_registers@@Base+0x9c50>
   2534c:	ldr	x8, [sp, #56]
   25350:	mov	w25, w0
   25354:	mov	x0, x8
   25358:	bl	b1d0 <free@plt>
   2535c:	cbnz	w25, 253f8 <rpl_re_set_registers@@Base+0x6850>
   25360:	ldr	x8, [x19]
   25364:	cbnz	x8, 25398 <rpl_re_set_registers@@Base+0x67f0>
   25368:	mov	x22, xzr
   2536c:	mov	w25, #0x1                   	// #1
   25370:	b	253b4 <rpl_re_set_registers@@Base+0x680c>
   25374:	mov	x0, x24
   25378:	mov	x1, x19
   2537c:	mov	x2, x22
   25380:	mov	x3, x26
   25384:	bl	288f4 <rpl_re_set_registers@@Base+0x9d4c>
   25388:	mov	w25, w0
   2538c:	mov	x0, x22
   25390:	bl	b1d0 <free@plt>
   25394:	cbnz	w25, 253f8 <rpl_re_set_registers@@Base+0x6850>
   25398:	ldr	x0, [x20, #184]
   2539c:	bl	b1d0 <free@plt>
   253a0:	mov	w25, wzr
   253a4:	mov	x22, xzr
   253a8:	stp	x23, x19, [x20, #176]
   253ac:	mov	x19, xzr
   253b0:	str	x21, [x20, #168]
   253b4:	mov	x0, x19
   253b8:	bl	b1d0 <free@plt>
   253bc:	mov	x0, x22
   253c0:	bl	b1d0 <free@plt>
   253c4:	mov	w0, w25
   253c8:	ldp	x20, x19, [sp, #128]
   253cc:	ldp	x22, x21, [sp, #112]
   253d0:	ldp	x24, x23, [sp, #96]
   253d4:	ldp	x26, x25, [sp, #80]
   253d8:	ldp	x29, x30, [sp, #64]
   253dc:	add	sp, sp, #0x90
   253e0:	ret
   253e4:	mov	w25, #0xc                   	// #12
   253e8:	b	253c4 <rpl_re_set_registers@@Base+0x681c>
   253ec:	mov	x22, xzr
   253f0:	mov	w25, #0xc                   	// #12
   253f4:	b	253b4 <rpl_re_set_registers@@Base+0x680c>
   253f8:	mov	x22, xzr
   253fc:	b	253b4 <rpl_re_set_registers@@Base+0x680c>
   25400:	stp	x29, x30, [sp, #-64]!
   25404:	stp	x22, x21, [sp, #32]
   25408:	stp	x20, x19, [sp, #48]
   2540c:	ldr	x8, [x0, #232]
   25410:	mov	x19, x0
   25414:	str	x23, [sp, #16]
   25418:	mov	x29, sp
   2541c:	cmp	x8, #0x1
   25420:	b.lt	254a8 <rpl_re_set_registers@@Base+0x6900>  // b.tstop
   25424:	mov	x22, xzr
   25428:	b	25444 <rpl_re_set_registers@@Base+0x689c>
   2542c:	mov	x0, x20
   25430:	bl	b1d0 <free@plt>
   25434:	ldr	x8, [x19, #232]
   25438:	add	x22, x22, #0x1
   2543c:	cmp	x22, x8
   25440:	b.ge	254a8 <rpl_re_set_registers@@Base+0x6900>  // b.tcont
   25444:	ldr	x8, [x19, #248]
   25448:	ldr	x20, [x8, x22, lsl #3]
   2544c:	ldr	x8, [x20, #32]
   25450:	cmp	x8, #0x1
   25454:	b.lt	25484 <rpl_re_set_registers@@Base+0x68dc>  // b.tstop
   25458:	mov	x23, xzr
   2545c:	ldr	x8, [x20, #40]
   25460:	ldr	x21, [x8, x23, lsl #3]
   25464:	ldr	x0, [x21, #32]
   25468:	bl	b1d0 <free@plt>
   2546c:	mov	x0, x21
   25470:	bl	b1d0 <free@plt>
   25474:	ldr	x8, [x20, #32]
   25478:	add	x23, x23, #0x1
   2547c:	cmp	x23, x8
   25480:	b.lt	2545c <rpl_re_set_registers@@Base+0x68b4>  // b.tstop
   25484:	ldr	x0, [x20, #40]
   25488:	bl	b1d0 <free@plt>
   2548c:	ldr	x8, [x20, #16]
   25490:	cbz	x8, 2542c <rpl_re_set_registers@@Base+0x6884>
   25494:	ldr	x0, [x8, #16]
   25498:	bl	b1d0 <free@plt>
   2549c:	ldr	x0, [x20, #16]
   254a0:	bl	b1d0 <free@plt>
   254a4:	b	2542c <rpl_re_set_registers@@Base+0x6884>
   254a8:	str	xzr, [x19, #232]
   254ac:	str	xzr, [x19, #200]
   254b0:	ldp	x20, x19, [sp, #48]
   254b4:	ldp	x22, x21, [sp, #32]
   254b8:	ldr	x23, [sp, #16]
   254bc:	ldp	x29, x30, [sp], #64
   254c0:	ret
   254c4:	stp	x29, x30, [sp, #-96]!
   254c8:	stp	x28, x27, [sp, #16]
   254cc:	stp	x26, x25, [sp, #32]
   254d0:	stp	x24, x23, [sp, #48]
   254d4:	stp	x22, x21, [sp, #64]
   254d8:	stp	x20, x19, [sp, #80]
   254dc:	mov	x29, sp
   254e0:	sub	sp, sp, #0x40
   254e4:	adrp	x8, 2d000 <vasnprintf@@Base+0x2ec4>
   254e8:	add	x8, x8, #0xa78
   254ec:	ldr	q0, [x8]
   254f0:	ldr	x8, [x8, #16]
   254f4:	ldr	x23, [x0]
   254f8:	mov	x20, x3
   254fc:	mov	x21, x2
   25500:	mov	x22, x1
   25504:	stur	q0, [x29, #-64]
   25508:	stur	x8, [x29, #-48]
   2550c:	tbz	w4, #0, 25530 <rpl_re_set_registers@@Base+0x6988>
   25510:	ldur	x8, [x29, #-56]
   25514:	add	x8, x8, x8, lsl #1
   25518:	lsl	x0, x8, #4
   2551c:	bl	abc0 <malloc@plt>
   25520:	stur	x0, [x29, #-48]
   25524:	cbz	x0, 25750 <rpl_re_set_registers@@Base+0x6ba8>
   25528:	sub	x19, x29, #0x40
   2552c:	b	25534 <rpl_re_set_registers@@Base+0x698c>
   25530:	mov	x19, xzr
   25534:	ldr	x25, [x23, #144]
   25538:	lsl	x26, x21, #4
   2553c:	cmp	x26, #0xfbf
   25540:	stp	xzr, xzr, [x29, #-32]
   25544:	stur	xzr, [x29, #-16]
   25548:	b.hi	25568 <rpl_re_set_registers@@Base+0x69c0>  // b.pmore
   2554c:	add	x9, x26, #0xf
   25550:	mov	x8, sp
   25554:	and	x9, x9, #0xfffffffffffffff0
   25558:	sub	x24, x8, x9
   2555c:	mov	sp, x24
   25560:	mov	w27, wzr
   25564:	b	2557c <rpl_re_set_registers@@Base+0x69d4>
   25568:	mov	x0, x26
   2556c:	bl	abc0 <malloc@plt>
   25570:	cbz	x0, 25748 <rpl_re_set_registers@@Base+0x6ba0>
   25574:	mov	x24, x0
   25578:	mov	w27, #0x1                   	// #1
   2557c:	mov	x0, x24
   25580:	mov	x1, x20
   25584:	mov	x2, x26
   25588:	bl	a800 <memcpy@plt>
   2558c:	ldp	x26, x8, [x20]
   25590:	cmp	x26, x8
   25594:	stur	x26, [x29, #-8]
   25598:	b.le	255c0 <rpl_re_set_registers@@Base+0x6a18>
   2559c:	ldur	x0, [x29, #-16]
   255a0:	bl	b1d0 <free@plt>
   255a4:	cbz	w27, 255b0 <rpl_re_set_registers@@Base+0x6a08>
   255a8:	mov	x0, x24
   255ac:	bl	b1d0 <free@plt>
   255b0:	mov	x0, x19
   255b4:	bl	29b34 <rpl_re_set_registers@@Base+0xaf8c>
   255b8:	mov	w0, wzr
   255bc:	b	25754 <rpl_re_set_registers@@Base+0x6bac>
   255c0:	add	x28, x20, #0x8
   255c4:	mov	x0, x23
   255c8:	mov	x1, x20
   255cc:	mov	x2, x24
   255d0:	mov	x3, x25
   255d4:	mov	x4, x26
   255d8:	mov	x5, x21
   255dc:	bl	29bac <rpl_re_set_registers@@Base+0xb004>
   255e0:	ldr	x8, [x20, #8]
   255e4:	cmp	x26, x8
   255e8:	b.ne	256b0 <rpl_re_set_registers@@Base+0x6b08>  // b.any
   255ec:	ldr	x8, [x22, #176]
   255f0:	cmp	x25, x8
   255f4:	b.ne	256b0 <rpl_re_set_registers@@Base+0x6b08>  // b.any
   255f8:	cbz	x19, 25660 <rpl_re_set_registers@@Base+0x6ab8>
   255fc:	mov	x8, xzr
   25600:	cbz	x21, 25630 <rpl_re_set_registers@@Base+0x6a88>
   25604:	mov	x9, x28
   25608:	b	2561c <rpl_re_set_registers@@Base+0x6a74>
   2560c:	add	x8, x8, #0x1
   25610:	cmp	x21, x8
   25614:	add	x9, x9, #0x10
   25618:	b.eq	25680 <rpl_re_set_registers@@Base+0x6ad8>  // b.none
   2561c:	ldur	x10, [x9, #-8]
   25620:	tbnz	x10, #63, 2560c <rpl_re_set_registers@@Base+0x6a64>
   25624:	ldr	x10, [x9]
   25628:	cmn	x10, #0x1
   2562c:	b.ne	2560c <rpl_re_set_registers@@Base+0x6a64>  // b.any
   25630:	cmp	x8, x21
   25634:	b.ne	2568c <rpl_re_set_registers@@Base+0x6ae4>  // b.any
   25638:	ldur	x0, [x29, #-16]
   2563c:	bl	b1d0 <free@plt>
   25640:	cbz	w27, 2564c <rpl_re_set_registers@@Base+0x6aa4>
   25644:	mov	x0, x24
   25648:	bl	b1d0 <free@plt>
   2564c:	mov	x0, x19
   25650:	bl	29b34 <rpl_re_set_registers@@Base+0xaf8c>
   25654:	mov	w8, wzr
   25658:	cbnz	w8, 256b0 <rpl_re_set_registers@@Base+0x6b08>
   2565c:	b	255b8 <rpl_re_set_registers@@Base+0x6a10>
   25660:	ldur	x0, [x29, #-16]
   25664:	bl	b1d0 <free@plt>
   25668:	cbz	w27, 25674 <rpl_re_set_registers@@Base+0x6acc>
   2566c:	mov	x0, x24
   25670:	bl	b1d0 <free@plt>
   25674:	mov	w8, wzr
   25678:	cbnz	w8, 256b0 <rpl_re_set_registers@@Base+0x6b08>
   2567c:	b	255b8 <rpl_re_set_registers@@Base+0x6a10>
   25680:	mov	x8, x21
   25684:	cmp	x8, x21
   25688:	b.eq	25638 <rpl_re_set_registers@@Base+0x6a90>  // b.none
   2568c:	sub	x1, x29, #0x8
   25690:	sub	x4, x29, #0x20
   25694:	mov	x0, x19
   25698:	mov	x2, x21
   2569c:	mov	x3, x20
   256a0:	bl	29c68 <rpl_re_set_registers@@Base+0xb0c0>
   256a4:	mov	x25, x0
   256a8:	mov	w8, #0x1                   	// #1
   256ac:	cbz	w8, 255b8 <rpl_re_set_registers@@Base+0x6a10>
   256b0:	sub	x3, x29, #0x8
   256b4:	sub	x5, x29, #0x20
   256b8:	mov	x0, x22
   256bc:	mov	x1, x21
   256c0:	mov	x2, x20
   256c4:	mov	x4, x25
   256c8:	mov	x6, x19
   256cc:	bl	29d28 <rpl_re_set_registers@@Base+0xb180>
   256d0:	mov	x25, x0
   256d4:	tbnz	x0, #63, 256ec <rpl_re_set_registers@@Base+0x6b44>
   256d8:	ldur	x26, [x29, #-8]
   256dc:	ldr	x8, [x20, #8]
   256e0:	cmp	x26, x8
   256e4:	b.le	255c4 <rpl_re_set_registers@@Base+0x6a1c>
   256e8:	b	2559c <rpl_re_set_registers@@Base+0x69f4>
   256ec:	cmn	x25, #0x2
   256f0:	b.eq	25734 <rpl_re_set_registers@@Base+0x6b8c>  // b.none
   256f4:	cbz	x19, 25718 <rpl_re_set_registers@@Base+0x6b70>
   256f8:	sub	x1, x29, #0x8
   256fc:	sub	x4, x29, #0x20
   25700:	mov	x0, x19
   25704:	mov	x2, x21
   25708:	mov	x3, x20
   2570c:	bl	29c68 <rpl_re_set_registers@@Base+0xb0c0>
   25710:	mov	x25, x0
   25714:	b	256d8 <rpl_re_set_registers@@Base+0x6b30>
   25718:	ldur	x0, [x29, #-16]
   2571c:	bl	b1d0 <free@plt>
   25720:	cbz	w27, 2572c <rpl_re_set_registers@@Base+0x6b84>
   25724:	mov	x0, x24
   25728:	bl	b1d0 <free@plt>
   2572c:	mov	w0, #0x1                   	// #1
   25730:	b	25754 <rpl_re_set_registers@@Base+0x6bac>
   25734:	ldur	x0, [x29, #-16]
   25738:	bl	b1d0 <free@plt>
   2573c:	cbz	w27, 25748 <rpl_re_set_registers@@Base+0x6ba0>
   25740:	mov	x0, x24
   25744:	bl	b1d0 <free@plt>
   25748:	mov	x0, x19
   2574c:	bl	29b34 <rpl_re_set_registers@@Base+0xaf8c>
   25750:	mov	w0, #0xc                   	// #12
   25754:	mov	sp, x29
   25758:	ldp	x20, x19, [sp, #80]
   2575c:	ldp	x22, x21, [sp, #64]
   25760:	ldp	x24, x23, [sp, #48]
   25764:	ldp	x26, x25, [sp, #32]
   25768:	ldp	x28, x27, [sp, #16]
   2576c:	ldp	x29, x30, [sp], #96
   25770:	ret
   25774:	stp	x29, x30, [sp, #-32]!
   25778:	str	x19, [sp, #16]
   2577c:	mov	x29, sp
   25780:	mov	x19, x0
   25784:	bl	25400 <rpl_re_set_registers@@Base+0x6858>
   25788:	ldr	x0, [x19, #248]
   2578c:	bl	b1d0 <free@plt>
   25790:	ldr	x0, [x19, #216]
   25794:	bl	b1d0 <free@plt>
   25798:	ldr	x19, [sp, #16]
   2579c:	ldp	x29, x30, [sp], #32
   257a0:	ret
   257a4:	stp	x29, x30, [sp, #-32]!
   257a8:	stp	x20, x19, [sp, #16]
   257ac:	mov	x19, x0
   257b0:	mov	x29, sp
   257b4:	tbnz	x1, #63, 257ec <rpl_re_set_registers@@Base+0x6c44>
   257b8:	ldr	x8, [x19, #88]
   257bc:	cmp	x8, x1
   257c0:	b.eq	25850 <rpl_re_set_registers@@Base+0x6ca8>  // b.none
   257c4:	ldr	w8, [x19, #144]
   257c8:	cmp	w8, #0x2
   257cc:	b.lt	257f4 <rpl_re_set_registers@@Base+0x6c4c>  // b.tstop
   257d0:	ldr	x9, [x19, #16]
   257d4:	ldr	w8, [x9, x1, lsl #2]
   257d8:	cmn	w8, #0x1
   257dc:	b.ne	25814 <rpl_re_set_registers@@Base+0x6c6c>  // b.any
   257e0:	cmp	x1, #0x0
   257e4:	sub	x1, x1, #0x1
   257e8:	b.gt	257d4 <rpl_re_set_registers@@Base+0x6c2c>
   257ec:	ldr	w0, [x19, #112]
   257f0:	b	25844 <rpl_re_set_registers@@Base+0x6c9c>
   257f4:	ldr	x8, [x19, #8]
   257f8:	ldr	x0, [x19, #128]
   257fc:	ldrb	w20, [x8, x1]
   25800:	mov	x1, x20
   25804:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   25808:	tbz	w0, #0, 25838 <rpl_re_set_registers@@Base+0x6c90>
   2580c:	mov	w0, #0x1                   	// #1
   25810:	b	25844 <rpl_re_set_registers@@Base+0x6c9c>
   25814:	ldrb	w9, [x19, #142]
   25818:	cbnz	w9, 25860 <rpl_re_set_registers@@Base+0x6cb8>
   2581c:	cmp	w8, #0xa
   25820:	b.ne	25840 <rpl_re_set_registers@@Base+0x6c98>  // b.any
   25824:	ldrb	w8, [x19, #141]
   25828:	cmp	w8, #0x0
   2582c:	cset	w8, ne  // ne = any
   25830:	lsl	w0, w8, #1
   25834:	b	25844 <rpl_re_set_registers@@Base+0x6c9c>
   25838:	cmp	w20, #0xa
   2583c:	b.eq	25824 <rpl_re_set_registers@@Base+0x6c7c>  // b.none
   25840:	mov	w0, wzr
   25844:	ldp	x20, x19, [sp, #16]
   25848:	ldp	x29, x30, [sp], #32
   2584c:	ret
   25850:	and	w8, w2, #0x2
   25854:	mov	w9, #0xa                   	// #10
   25858:	eor	w0, w8, w9
   2585c:	b	25844 <rpl_re_set_registers@@Base+0x6c9c>
   25860:	mov	w0, w8
   25864:	mov	w20, w8
   25868:	bl	b500 <iswalnum@plt>
   2586c:	mov	w9, w0
   25870:	cmp	w20, #0x5f
   25874:	mov	w0, #0x1                   	// #1
   25878:	b.eq	25844 <rpl_re_set_registers@@Base+0x6c9c>  // b.none
   2587c:	mov	w8, w20
   25880:	cbz	w9, 2581c <rpl_re_set_registers@@Base+0x6c74>
   25884:	b	25844 <rpl_re_set_registers@@Base+0x6c9c>
   25888:	stp	x29, x30, [sp, #-80]!
   2588c:	stp	x24, x23, [sp, #32]
   25890:	stp	x22, x21, [sp, #48]
   25894:	stp	x20, x19, [sp, #64]
   25898:	ldr	x8, [x0, #40]
   2589c:	ldr	x9, [x0, #56]
   258a0:	mov	x20, x2
   258a4:	str	x25, [sp, #16]
   258a8:	mov	x29, sp
   258ac:	add	x19, x9, x8
   258b0:	cmp	x19, x1
   258b4:	b.ge	25928 <rpl_re_set_registers@@Base+0x6d80>  // b.tcont
   258b8:	mov	x21, x1
   258bc:	mov	x22, x0
   258c0:	add	x23, x0, #0x20
   258c4:	ldr	x8, [x22, #80]
   258c8:	ldr	x9, [x22]
   258cc:	ldr	x25, [x22, #32]
   258d0:	add	x0, x29, #0x1c
   258d4:	sub	x24, x8, x19
   258d8:	add	x1, x9, x19
   258dc:	mov	x2, x24
   258e0:	mov	x3, x23
   258e4:	bl	a950 <rpl_mbrtowc@plt>
   258e8:	sub	x8, x0, #0x1
   258ec:	cmn	x8, #0x3
   258f0:	b.cs	25908 <rpl_re_set_registers@@Base+0x6d60>  // b.hs, b.nlast
   258f4:	ldr	w8, [x29, #28]
   258f8:	add	x19, x0, x19
   258fc:	cmp	x19, x21
   25900:	b.lt	258c4 <rpl_re_set_registers@@Base+0x6d1c>  // b.tstop
   25904:	b	2592c <rpl_re_set_registers@@Base+0x6d84>
   25908:	mov	w8, wzr
   2590c:	cbz	x24, 2591c <rpl_re_set_registers@@Base+0x6d74>
   25910:	cbz	x0, 2591c <rpl_re_set_registers@@Base+0x6d74>
   25914:	ldr	x8, [x22]
   25918:	ldrb	w8, [x8, x19]
   2591c:	str	x25, [x23]
   25920:	mov	w0, #0x1                   	// #1
   25924:	b	258f8 <rpl_re_set_registers@@Base+0x6d50>
   25928:	mov	w8, #0xffffffff            	// #-1
   2592c:	str	w8, [x20]
   25930:	mov	x0, x19
   25934:	ldp	x20, x19, [sp, #64]
   25938:	ldp	x22, x21, [sp, #48]
   2593c:	ldp	x24, x23, [sp, #32]
   25940:	ldr	x25, [sp, #16]
   25944:	ldp	x29, x30, [sp], #80
   25948:	ret
   2594c:	add	x8, x1, #0x3f
   25950:	cmp	x1, #0x0
   25954:	csel	x8, x8, x1, lt  // lt = tstop
   25958:	asr	x8, x8, #6
   2595c:	ldr	x8, [x0, x8, lsl #3]
   25960:	lsr	x8, x8, x1
   25964:	and	w0, w8, #0x1
   25968:	ret
   2596c:	stp	x29, x30, [sp, #-64]!
   25970:	stp	x24, x23, [sp, #16]
   25974:	stp	x22, x21, [sp, #32]
   25978:	stp	x20, x19, [sp, #48]
   2597c:	ldr	x8, [x1, #8]
   25980:	mov	x29, sp
   25984:	cmp	x8, #0x1
   25988:	b.lt	25a14 <rpl_re_set_registers@@Base+0x6e6c>  // b.tstop
   2598c:	ldr	x24, [x0, #152]
   25990:	mov	x19, x2
   25994:	mov	x20, x1
   25998:	mov	x21, x0
   2599c:	mov	x23, xzr
   259a0:	ldr	x8, [x20, #16]
   259a4:	ldr	x1, [x8, x23, lsl #3]
   259a8:	ldr	x8, [x24]
   259ac:	add	x9, x8, x1, lsl #4
   259b0:	ldrb	w9, [x9, #8]
   259b4:	cmp	w9, #0x8
   259b8:	b.ne	259e8 <rpl_re_set_registers@@Base+0x6e40>  // b.any
   259bc:	lsl	x9, x1, #4
   259c0:	ldr	x8, [x8, x9]
   259c4:	cmp	x8, #0x3f
   259c8:	b.gt	259e8 <rpl_re_set_registers@@Base+0x6e40>
   259cc:	ldr	x9, [x24, #160]
   259d0:	lsr	x8, x9, x8
   259d4:	tbz	w8, #0, 259e8 <rpl_re_set_registers@@Base+0x6e40>
   259d8:	mov	x0, x21
   259dc:	mov	x2, x19
   259e0:	bl	260b0 <rpl_re_set_registers@@Base+0x7508>
   259e4:	cbnz	w0, 25a04 <rpl_re_set_registers@@Base+0x6e5c>
   259e8:	mov	w8, #0x1                   	// #1
   259ec:	tbz	w8, #0, 25a18 <rpl_re_set_registers@@Base+0x6e70>
   259f0:	ldr	x8, [x20, #8]
   259f4:	add	x23, x23, #0x1
   259f8:	cmp	x23, x8
   259fc:	b.lt	259a0 <rpl_re_set_registers@@Base+0x6df8>  // b.tstop
   25a00:	b	25a14 <rpl_re_set_registers@@Base+0x6e6c>
   25a04:	mov	w8, wzr
   25a08:	mov	w22, w0
   25a0c:	tbnz	w8, #0, 259f0 <rpl_re_set_registers@@Base+0x6e48>
   25a10:	b	25a18 <rpl_re_set_registers@@Base+0x6e70>
   25a14:	mov	w22, wzr
   25a18:	mov	w0, w22
   25a1c:	ldp	x20, x19, [sp, #48]
   25a20:	ldp	x22, x21, [sp, #32]
   25a24:	ldp	x24, x23, [sp, #16]
   25a28:	ldp	x29, x30, [sp], #64
   25a2c:	ret
   25a30:	sub	sp, sp, #0xa0
   25a34:	stp	x29, x30, [sp, #64]
   25a38:	stp	x28, x27, [sp, #80]
   25a3c:	stp	x26, x25, [sp, #96]
   25a40:	stp	x24, x23, [sp, #112]
   25a44:	stp	x22, x21, [sp, #128]
   25a48:	stp	x20, x19, [sp, #144]
   25a4c:	ldr	x8, [x1, #8]
   25a50:	add	x29, sp, #0x40
   25a54:	cmp	x8, #0x1
   25a58:	b.lt	25d1c <rpl_re_set_registers@@Base+0x7174>  // b.tstop
   25a5c:	ldr	x25, [x0, #152]
   25a60:	ldr	x22, [x0, #72]
   25a64:	mov	x24, x1
   25a68:	mov	x20, x0
   25a6c:	mov	x26, xzr
   25a70:	str	x1, [sp]
   25a74:	str	x25, [sp, #16]
   25a78:	b	25a8c <rpl_re_set_registers@@Base+0x6ee4>
   25a7c:	ldr	x8, [x24, #8]
   25a80:	add	x26, x26, #0x1
   25a84:	cmp	x26, x8
   25a88:	b.ge	25d1c <rpl_re_set_registers@@Base+0x7174>  // b.tcont
   25a8c:	ldr	x8, [x24, #16]
   25a90:	ldr	x23, [x8, x26, lsl #3]
   25a94:	ldr	x8, [x25]
   25a98:	add	x8, x8, x23, lsl #4
   25a9c:	ldr	w19, [x8, #8]
   25aa0:	and	w8, w19, #0xff
   25aa4:	cmp	w8, #0x4
   25aa8:	b.ne	25ae8 <rpl_re_set_registers@@Base+0x6f40>  // b.any
   25aac:	tst	w19, #0x3ff00
   25ab0:	b.eq	25af4 <rpl_re_set_registers@@Base+0x6f4c>  // b.none
   25ab4:	ldr	w2, [x20, #160]
   25ab8:	mov	x0, x20
   25abc:	mov	x1, x22
   25ac0:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   25ac4:	and	w8, w0, #0x1
   25ac8:	tbz	w19, #10, 25ad0 <rpl_re_set_registers@@Base+0x6f28>
   25acc:	cbz	w8, 25ae8 <rpl_re_set_registers@@Base+0x6f40>
   25ad0:	tbz	w19, #11, 25ad8 <rpl_re_set_registers@@Base+0x6f30>
   25ad4:	cbnz	w8, 25ae8 <rpl_re_set_registers@@Base+0x6f40>
   25ad8:	tbz	w19, #13, 25ae0 <rpl_re_set_registers@@Base+0x6f38>
   25adc:	tbz	w0, #1, 25ae8 <rpl_re_set_registers@@Base+0x6f40>
   25ae0:	tbz	w19, #15, 25af4 <rpl_re_set_registers@@Base+0x6f4c>
   25ae4:	tbnz	w0, #3, 25af4 <rpl_re_set_registers@@Base+0x6f4c>
   25ae8:	mov	w8, #0x4                   	// #4
   25aec:	cbnz	w8, 25d04 <rpl_re_set_registers@@Base+0x715c>
   25af0:	b	25a7c <rpl_re_set_registers@@Base+0x6ed4>
   25af4:	ldr	x28, [x20, #200]
   25af8:	mov	x0, x20
   25afc:	mov	x1, x23
   25b00:	mov	x2, x22
   25b04:	bl	26148 <rpl_re_set_registers@@Base+0x75a0>
   25b08:	stur	w0, [x29, #-4]
   25b0c:	cbnz	w0, 25d10 <rpl_re_set_registers@@Base+0x7168>
   25b10:	ldr	x8, [x20, #200]
   25b14:	cmp	x28, x8
   25b18:	b.ge	25cfc <rpl_re_set_registers@@Base+0x7154>  // b.tcont
   25b1c:	add	x8, x28, x28, lsl #2
   25b20:	lsl	x27, x8, #3
   25b24:	ldr	x8, [x20, #216]
   25b28:	ldr	x9, [x8, x27]
   25b2c:	cmp	x9, x23
   25b30:	b.ne	25b68 <rpl_re_set_registers@@Base+0x6fc0>  // b.any
   25b34:	add	x8, x8, x27
   25b38:	ldr	x9, [x8, #8]
   25b3c:	cmp	x9, x22
   25b40:	b.ne	25b68 <rpl_re_set_registers@@Base+0x6fc0>  // b.any
   25b44:	ldp	x21, x19, [x8, #16]
   25b48:	ldr	x8, [x25, #48]
   25b4c:	cmp	x19, x21
   25b50:	b.ne	25b90 <rpl_re_set_registers@@Base+0x6fe8>  // b.any
   25b54:	ldr	x9, [x25, #40]
   25b58:	mov	w11, #0x18                  	// #24
   25b5c:	madd	x9, x23, x11, x9
   25b60:	ldr	x9, [x9, #16]
   25b64:	b	25b9c <rpl_re_set_registers@@Base+0x6ff4>
   25b68:	mov	w8, #0x8                   	// #8
   25b6c:	orr	w9, w8, #0x8
   25b70:	cmp	w9, #0x8
   25b74:	b.ne	25d00 <rpl_re_set_registers@@Base+0x7158>  // b.any
   25b78:	ldr	x8, [x20, #200]
   25b7c:	add	x28, x28, #0x1
   25b80:	add	x27, x27, #0x28
   25b84:	cmp	x28, x8
   25b88:	b.lt	25b24 <rpl_re_set_registers@@Base+0x6f7c>  // b.tstop
   25b8c:	b	25cfc <rpl_re_set_registers@@Base+0x7154>
   25b90:	ldr	x9, [x25, #24]
   25b94:	mov	w11, #0x18                  	// #24
   25b98:	add	x9, x9, x23, lsl #3
   25b9c:	ldr	x9, [x9]
   25ba0:	ldr	w2, [x20, #160]
   25ba4:	add	x10, x19, x22
   25ba8:	sub	x24, x10, x21
   25bac:	madd	x8, x9, x11, x8
   25bb0:	sub	x1, x24, #0x1
   25bb4:	mov	x0, x20
   25bb8:	str	x8, [sp, #24]
   25bbc:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   25bc0:	ldr	x8, [x20, #184]
   25bc4:	mov	w25, w0
   25bc8:	ldr	x9, [x8, x22, lsl #3]
   25bcc:	ldr	x8, [x8, x24, lsl #3]
   25bd0:	cbz	x9, 25c4c <rpl_re_set_registers@@Base+0x70a4>
   25bd4:	ldr	x9, [x9, #16]
   25bd8:	str	x9, [sp, #8]
   25bdc:	cbz	x8, 25c54 <rpl_re_set_registers@@Base+0x70ac>
   25be0:	ldr	x1, [x8, #80]
   25be4:	ldr	x2, [sp, #24]
   25be8:	add	x0, sp, #0x20
   25bec:	bl	26504 <rpl_re_set_registers@@Base+0x795c>
   25bf0:	stur	w0, [x29, #-4]
   25bf4:	cbnz	w0, 25cec <rpl_re_set_registers@@Base+0x7144>
   25bf8:	ldr	x1, [sp, #16]
   25bfc:	sub	x0, x29, #0x4
   25c00:	add	x2, sp, #0x20
   25c04:	mov	w3, w25
   25c08:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   25c0c:	ldr	x8, [x20, #184]
   25c10:	lsl	x24, x24, #3
   25c14:	str	x0, [x8, x24]
   25c18:	ldr	x0, [sp, #48]
   25c1c:	bl	b1d0 <free@plt>
   25c20:	ldr	x8, [x20, #184]
   25c24:	ldur	w9, [x29, #-4]
   25c28:	ldr	x8, [x8, x24]
   25c2c:	cmp	w9, #0x0
   25c30:	ccmp	x8, #0x0, #0x0, ne  // ne = any
   25c34:	mov	w8, #0x5                   	// #5
   25c38:	csel	w8, w8, wzr, eq  // eq = none
   25c3c:	ldr	x24, [sp]
   25c40:	ldr	x25, [sp, #16]
   25c44:	cbnz	w8, 25b6c <rpl_re_set_registers@@Base+0x6fc4>
   25c48:	b	25c8c <rpl_re_set_registers@@Base+0x70e4>
   25c4c:	str	xzr, [sp, #8]
   25c50:	cbnz	x8, 25be0 <rpl_re_set_registers@@Base+0x7038>
   25c54:	ldp	x1, x2, [sp, #16]
   25c58:	sub	x0, x29, #0x4
   25c5c:	mov	w3, w25
   25c60:	mov	x25, x1
   25c64:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   25c68:	ldr	x8, [x20, #184]
   25c6c:	lsl	x9, x24, #3
   25c70:	ldr	x24, [sp]
   25c74:	str	x0, [x8, x9]
   25c78:	ldr	x8, [x20, #184]
   25c7c:	ldr	x8, [x8, x9]
   25c80:	cbnz	x8, 25c8c <rpl_re_set_registers@@Base+0x70e4>
   25c84:	ldur	w8, [x29, #-4]
   25c88:	cbnz	w8, 25ce4 <rpl_re_set_registers@@Base+0x713c>
   25c8c:	cmp	x19, x21
   25c90:	b.ne	25cdc <rpl_re_set_registers@@Base+0x7134>  // b.any
   25c94:	ldr	x8, [x20, #184]
   25c98:	ldr	x9, [sp, #8]
   25c9c:	ldr	x8, [x8, x22, lsl #3]
   25ca0:	ldr	x8, [x8, #16]
   25ca4:	cmp	x8, x9
   25ca8:	b.le	25cdc <rpl_re_set_registers@@Base+0x7134>
   25cac:	ldr	x19, [sp, #24]
   25cb0:	mov	x0, x20
   25cb4:	mov	x2, x22
   25cb8:	mov	x1, x19
   25cbc:	bl	2596c <rpl_re_set_registers@@Base+0x6dc4>
   25cc0:	stur	w0, [x29, #-4]
   25cc4:	cbnz	w0, 25ce4 <rpl_re_set_registers@@Base+0x713c>
   25cc8:	mov	x0, x20
   25ccc:	mov	x1, x19
   25cd0:	bl	25a30 <rpl_re_set_registers@@Base+0x6e88>
   25cd4:	stur	w0, [x29, #-4]
   25cd8:	cbnz	w0, 25ce4 <rpl_re_set_registers@@Base+0x713c>
   25cdc:	mov	w8, wzr
   25ce0:	b	25b6c <rpl_re_set_registers@@Base+0x6fc4>
   25ce4:	mov	w8, #0x5                   	// #5
   25ce8:	b	25b6c <rpl_re_set_registers@@Base+0x6fc4>
   25cec:	ldr	x0, [sp, #48]
   25cf0:	bl	b1d0 <free@plt>
   25cf4:	mov	w8, #0x5                   	// #5
   25cf8:	b	25c3c <rpl_re_set_registers@@Base+0x7094>
   25cfc:	mov	w8, wzr
   25d00:	cbz	w8, 25a7c <rpl_re_set_registers@@Base+0x6ed4>
   25d04:	cmp	w8, #0x4
   25d08:	b.eq	25a7c <rpl_re_set_registers@@Base+0x6ed4>  // b.none
   25d0c:	b	25d44 <rpl_re_set_registers@@Base+0x719c>
   25d10:	mov	w8, #0x5                   	// #5
   25d14:	cbnz	w8, 25d04 <rpl_re_set_registers@@Base+0x715c>
   25d18:	b	25a7c <rpl_re_set_registers@@Base+0x6ed4>
   25d1c:	stur	wzr, [x29, #-4]
   25d20:	ldur	w0, [x29, #-4]
   25d24:	ldp	x20, x19, [sp, #144]
   25d28:	ldp	x22, x21, [sp, #128]
   25d2c:	ldp	x24, x23, [sp, #112]
   25d30:	ldp	x26, x25, [sp, #96]
   25d34:	ldp	x28, x27, [sp, #80]
   25d38:	ldp	x29, x30, [sp, #64]
   25d3c:	add	sp, sp, #0xa0
   25d40:	ret
   25d44:	cmp	w8, #0x5
   25d48:	b.eq	25d20 <rpl_re_set_registers@@Base+0x7178>  // b.none
   25d4c:	b	25d24 <rpl_re_set_registers@@Base+0x717c>
   25d50:	stp	x29, x30, [sp, #-32]!
   25d54:	ldr	x8, [x0, #64]
   25d58:	mov	x9, #0xffffffffffffffe     	// #1152921504606846974
   25d5c:	str	x19, [sp, #16]
   25d60:	mov	x29, sp
   25d64:	cmp	x8, x9
   25d68:	b.hi	25e10 <rpl_re_set_registers@@Base+0x7268>  // b.pmore
   25d6c:	ldr	x9, [x0, #88]
   25d70:	lsl	x8, x8, #1
   25d74:	sxtw	x10, w1
   25d78:	mov	x19, x0
   25d7c:	cmp	x9, x8
   25d80:	csel	x8, x9, x8, lt  // lt = tstop
   25d84:	cmp	x8, x10
   25d88:	csel	x1, x8, x10, gt
   25d8c:	bl	1f734 <rpl_re_set_registers@@Base+0xb8c>
   25d90:	cbnz	w0, 25e04 <rpl_re_set_registers@@Base+0x725c>
   25d94:	ldr	x0, [x19, #184]
   25d98:	cbz	x0, 25db4 <rpl_re_set_registers@@Base+0x720c>
   25d9c:	ldr	x8, [x19, #64]
   25da0:	lsl	x8, x8, #3
   25da4:	add	x1, x8, #0x8
   25da8:	bl	aea0 <realloc@plt>
   25dac:	cbz	x0, 25e10 <rpl_re_set_registers@@Base+0x7268>
   25db0:	str	x0, [x19, #184]
   25db4:	ldr	w8, [x19, #144]
   25db8:	ldrb	w9, [x19, #136]
   25dbc:	cmp	w8, #0x2
   25dc0:	cbz	w9, 25dd8 <rpl_re_set_registers@@Base+0x7230>
   25dc4:	mov	x0, x19
   25dc8:	b.lt	25de8 <rpl_re_set_registers@@Base+0x7240>  // b.tstop
   25dcc:	bl	1f7e8 <rpl_re_set_registers@@Base+0xc40>
   25dd0:	cbz	w0, 25e00 <rpl_re_set_registers@@Base+0x7258>
   25dd4:	b	25e04 <rpl_re_set_registers@@Base+0x725c>
   25dd8:	b.lt	25df0 <rpl_re_set_registers@@Base+0x7248>  // b.tstop
   25ddc:	mov	x0, x19
   25de0:	bl	1fe60 <rpl_re_set_registers@@Base+0x12b8>
   25de4:	b	25e00 <rpl_re_set_registers@@Base+0x7258>
   25de8:	bl	1fde0 <rpl_re_set_registers@@Base+0x1238>
   25dec:	b	25e00 <rpl_re_set_registers@@Base+0x7258>
   25df0:	ldr	x8, [x19, #120]
   25df4:	cbz	x8, 25e00 <rpl_re_set_registers@@Base+0x7258>
   25df8:	mov	x0, x19
   25dfc:	bl	20004 <rpl_re_set_registers@@Base+0x145c>
   25e00:	mov	w0, wzr
   25e04:	ldr	x19, [sp, #16]
   25e08:	ldp	x29, x30, [sp], #32
   25e0c:	ret
   25e10:	mov	w0, #0xc                   	// #12
   25e14:	b	25e04 <rpl_re_set_registers@@Base+0x725c>
   25e18:	stp	x29, x30, [sp, #-64]!
   25e1c:	stp	x22, x21, [sp, #32]
   25e20:	stp	x20, x19, [sp, #48]
   25e24:	ldrb	w8, [x2, #104]
   25e28:	mov	x20, x2
   25e2c:	mov	x19, x1
   25e30:	mov	x21, x0
   25e34:	str	x23, [sp, #16]
   25e38:	mov	x29, sp
   25e3c:	tbnz	w8, #5, 25e9c <rpl_re_set_registers@@Base+0x72f4>
   25e40:	ldr	x8, [x19, #72]
   25e44:	ldr	x9, [x19, #8]
   25e48:	add	x10, x8, #0x1
   25e4c:	str	x10, [x19, #72]
   25e50:	ldrb	w22, [x9, x8]
   25e54:	ldr	x8, [x20, #88]
   25e58:	cbnz	x8, 25e84 <rpl_re_set_registers@@Base+0x72dc>
   25e5c:	ldr	x23, [x20, #96]
   25e60:	cbnz	x23, 25eb8 <rpl_re_set_registers@@Base+0x7310>
   25e64:	ldr	x0, [x19, #152]
   25e68:	mov	x1, x20
   25e6c:	bl	27c94 <rpl_re_set_registers@@Base+0x90ec>
   25e70:	tbnz	w0, #0, 25e54 <rpl_re_set_registers@@Base+0x72ac>
   25e74:	mov	x0, xzr
   25e78:	mov	w8, #0xc                   	// #12
   25e7c:	str	w8, [x21]
   25e80:	b	25e88 <rpl_re_set_registers@@Base+0x72e0>
   25e84:	ldr	x0, [x8, x22, lsl #3]
   25e88:	ldp	x20, x19, [sp, #48]
   25e8c:	ldp	x22, x21, [sp, #32]
   25e90:	ldr	x23, [sp, #16]
   25e94:	ldp	x29, x30, [sp], #64
   25e98:	ret
   25e9c:	mov	x0, x19
   25ea0:	mov	x1, x20
   25ea4:	bl	27ac8 <rpl_re_set_registers@@Base+0x8f20>
   25ea8:	str	w0, [x21]
   25eac:	cbz	w0, 25e40 <rpl_re_set_registers@@Base+0x7298>
   25eb0:	mov	x0, xzr
   25eb4:	b	25e88 <rpl_re_set_registers@@Base+0x72e0>
   25eb8:	ldr	x8, [x19, #72]
   25ebc:	ldr	w2, [x19, #160]
   25ec0:	mov	x0, x19
   25ec4:	sub	x1, x8, #0x1
   25ec8:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   25ecc:	ubfiz	w8, w0, #8, #1
   25ed0:	orr	x8, x8, x22
   25ed4:	ldr	x0, [x23, x8, lsl #3]
   25ed8:	b	25e88 <rpl_re_set_registers@@Base+0x72e0>
   25edc:	sub	sp, sp, #0x60
   25ee0:	stp	x29, x30, [sp, #32]
   25ee4:	stp	x24, x23, [sp, #48]
   25ee8:	stp	x22, x21, [sp, #64]
   25eec:	stp	x20, x19, [sp, #80]
   25ef0:	ldr	x20, [x1, #72]
   25ef4:	ldp	x8, x9, [x1, #184]
   25ef8:	ldr	x23, [x1, #152]
   25efc:	mov	x22, x2
   25f00:	mov	x19, x1
   25f04:	cmp	x20, x9
   25f08:	mov	x21, x0
   25f0c:	add	x29, sp, #0x20
   25f10:	b.le	25f20 <rpl_re_set_registers@@Base+0x7378>
   25f14:	str	x22, [x8, x20, lsl #3]
   25f18:	str	x20, [x19, #192]
   25f1c:	b	25fb8 <rpl_re_set_registers@@Base+0x7410>
   25f20:	ldr	x9, [x8, x20, lsl #3]
   25f24:	cbz	x9, 25f54 <rpl_re_set_registers@@Base+0x73ac>
   25f28:	ldr	x8, [x8, x20, lsl #3]
   25f2c:	ldr	x2, [x8, #80]
   25f30:	cbz	x22, 25f5c <rpl_re_set_registers@@Base+0x73b4>
   25f34:	ldr	x24, [x22, #80]
   25f38:	mov	x0, sp
   25f3c:	mov	x1, x24
   25f40:	bl	26504 <rpl_re_set_registers@@Base+0x795c>
   25f44:	str	w0, [x21]
   25f48:	cbz	w0, 25f70 <rpl_re_set_registers@@Base+0x73c8>
   25f4c:	mov	w8, wzr
   25f50:	b	25fb4 <rpl_re_set_registers@@Base+0x740c>
   25f54:	str	x22, [x8, x20, lsl #3]
   25f58:	b	25fb8 <rpl_re_set_registers@@Base+0x7410>
   25f5c:	ldr	x8, [x2, #16]
   25f60:	ldr	q0, [x2]
   25f64:	mov	x24, xzr
   25f68:	str	x8, [sp, #16]
   25f6c:	str	q0, [sp]
   25f70:	ldr	x8, [x19, #72]
   25f74:	ldr	w2, [x19, #160]
   25f78:	mov	x0, x19
   25f7c:	sub	x1, x8, #0x1
   25f80:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   25f84:	mov	w3, w0
   25f88:	mov	x2, sp
   25f8c:	mov	x0, x21
   25f90:	mov	x1, x23
   25f94:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   25f98:	ldr	x8, [x19, #184]
   25f9c:	mov	x22, x0
   25fa0:	str	x0, [x8, x20, lsl #3]
   25fa4:	cbz	x24, 25fb0 <rpl_re_set_registers@@Base+0x7408>
   25fa8:	ldr	x0, [sp, #16]
   25fac:	bl	b1d0 <free@plt>
   25fb0:	mov	w8, #0x1                   	// #1
   25fb4:	cbz	w8, 26008 <rpl_re_set_registers@@Base+0x7460>
   25fb8:	cbz	x22, 2600c <rpl_re_set_registers@@Base+0x7464>
   25fbc:	ldr	x8, [x23, #152]
   25fc0:	cbz	x8, 2600c <rpl_re_set_registers@@Base+0x7464>
   25fc4:	add	x23, x22, #0x8
   25fc8:	mov	x0, x19
   25fcc:	mov	x1, x23
   25fd0:	mov	x2, x20
   25fd4:	bl	2596c <rpl_re_set_registers@@Base+0x6dc4>
   25fd8:	str	w0, [x21]
   25fdc:	cbnz	w0, 26008 <rpl_re_set_registers@@Base+0x7460>
   25fe0:	ldrb	w8, [x22, #104]
   25fe4:	tbz	w8, #6, 2600c <rpl_re_set_registers@@Base+0x7464>
   25fe8:	mov	x0, x19
   25fec:	mov	x1, x23
   25ff0:	bl	25a30 <rpl_re_set_registers@@Base+0x6e88>
   25ff4:	str	w0, [x21]
   25ff8:	cbnz	w0, 26008 <rpl_re_set_registers@@Base+0x7460>
   25ffc:	ldr	x8, [x19, #184]
   26000:	ldr	x22, [x8, x20, lsl #3]
   26004:	b	2600c <rpl_re_set_registers@@Base+0x7464>
   26008:	mov	x22, xzr
   2600c:	mov	x0, x22
   26010:	ldp	x20, x19, [sp, #80]
   26014:	ldp	x22, x21, [sp, #64]
   26018:	ldp	x24, x23, [sp, #48]
   2601c:	ldp	x29, x30, [sp, #32]
   26020:	add	sp, sp, #0x60
   26024:	ret
   26028:	stp	x29, x30, [sp, #-32]!
   2602c:	stp	x20, x19, [sp, #16]
   26030:	mov	x19, x1
   26034:	mov	x20, x0
   26038:	mov	x29, sp
   2603c:	ldr	x8, [x19, #192]
   26040:	ldr	x9, [x19, #72]
   26044:	cmp	x9, x8
   26048:	b.ge	26088 <rpl_re_set_registers@@Base+0x74e0>  // b.tcont
   2604c:	ldr	x10, [x19, #72]
   26050:	ldr	x11, [x19, #184]
   26054:	add	x10, x10, #0x1
   26058:	str	x10, [x19, #72]
   2605c:	add	x10, x11, x9, lsl #3
   26060:	ldr	x10, [x10, #8]
   26064:	add	x9, x9, #0x1
   26068:	cbz	x10, 26044 <rpl_re_set_registers@@Base+0x749c>
   2606c:	mov	x0, x20
   26070:	mov	x1, x19
   26074:	mov	x2, xzr
   26078:	bl	25edc <rpl_re_set_registers@@Base+0x7334>
   2607c:	mov	w8, #0x1                   	// #1
   26080:	cbnz	w8, 26090 <rpl_re_set_registers@@Base+0x74e8>
   26084:	b	260a0 <rpl_re_set_registers@@Base+0x74f8>
   26088:	mov	w8, wzr
   2608c:	cbz	w8, 260a0 <rpl_re_set_registers@@Base+0x74f8>
   26090:	cbnz	x0, 260a4 <rpl_re_set_registers@@Base+0x74fc>
   26094:	ldr	w8, [x20]
   26098:	cbz	w8, 2603c <rpl_re_set_registers@@Base+0x7494>
   2609c:	b	260a4 <rpl_re_set_registers@@Base+0x74fc>
   260a0:	mov	x0, xzr
   260a4:	ldp	x20, x19, [sp, #16]
   260a8:	ldp	x29, x30, [sp], #32
   260ac:	ret
   260b0:	stp	x29, x30, [sp, #-48]!
   260b4:	stp	x22, x21, [sp, #16]
   260b8:	stp	x20, x19, [sp, #32]
   260bc:	ldp	x8, x22, [x0, #232]
   260c0:	mov	x19, x2
   260c4:	mov	x20, x0
   260c8:	mov	x21, x1
   260cc:	cmp	x8, x22
   260d0:	mov	x29, sp
   260d4:	b.eq	26124 <rpl_re_set_registers@@Base+0x757c>  // b.none
   260d8:	mov	w0, #0x1                   	// #1
   260dc:	mov	w1, #0x30                  	// #48
   260e0:	bl	ae10 <calloc@plt>
   260e4:	ldr	x8, [x20, #232]
   260e8:	ldr	x9, [x20, #248]
   260ec:	lsl	x10, x8, #3
   260f0:	str	x0, [x9, x10]
   260f4:	ldr	x9, [x20, #248]
   260f8:	ldr	x9, [x9, x10]
   260fc:	cbz	x9, 26140 <rpl_re_set_registers@@Base+0x7598>
   26100:	mov	w0, wzr
   26104:	add	x8, x8, #0x1
   26108:	str	x21, [x9, #8]
   2610c:	str	x8, [x20, #232]
   26110:	str	x19, [x9]
   26114:	ldp	x20, x19, [sp, #32]
   26118:	ldp	x22, x21, [sp, #16]
   2611c:	ldp	x29, x30, [sp], #48
   26120:	ret
   26124:	ldr	x0, [x20, #248]
   26128:	lsl	x1, x22, #4
   2612c:	bl	aea0 <realloc@plt>
   26130:	cbz	x0, 26140 <rpl_re_set_registers@@Base+0x7598>
   26134:	lsl	x8, x22, #1
   26138:	stp	x8, x0, [x20, #240]
   2613c:	b	260d8 <rpl_re_set_registers@@Base+0x7530>
   26140:	mov	w0, #0xc                   	// #12
   26144:	b	26114 <rpl_re_set_registers@@Base+0x756c>
   26148:	sub	sp, sp, #0x90
   2614c:	stp	x29, x30, [sp, #48]
   26150:	stp	x28, x27, [sp, #64]
   26154:	stp	x26, x25, [sp, #80]
   26158:	stp	x24, x23, [sp, #96]
   2615c:	stp	x22, x21, [sp, #112]
   26160:	stp	x20, x19, [sp, #128]
   26164:	ldr	x21, [x0, #152]
   26168:	ldr	x28, [x0, #8]
   2616c:	add	x29, sp, #0x30
   26170:	stp	x1, x2, [x29, #-16]
   26174:	mov	x1, x2
   26178:	mov	x20, x0
   2617c:	bl	26704 <rpl_re_set_registers@@Base+0x7b5c>
   26180:	cmn	x0, #0x1
   26184:	b.eq	261b0 <rpl_re_set_registers@@Base+0x7608>  // b.none
   26188:	ldr	x8, [x20, #216]
   2618c:	ldur	x10, [x29, #-16]
   26190:	mov	w9, #0x28                  	// #40
   26194:	madd	x8, x0, x9, x8
   26198:	ldr	x9, [x8]
   2619c:	cmp	x9, x10
   261a0:	b.eq	264e0 <rpl_re_set_registers@@Base+0x7938>  // b.none
   261a4:	ldrb	w9, [x8, #32]
   261a8:	add	x8, x8, #0x28
   261ac:	cbnz	w9, 26198 <rpl_re_set_registers@@Base+0x75f0>
   261b0:	ldr	x8, [x20, #232]
   261b4:	cmp	x8, #0x1
   261b8:	b.lt	264e0 <rpl_re_set_registers@@Base+0x7938>  // b.tstop
   261bc:	ldur	x9, [x29, #-16]
   261c0:	ldr	x8, [x21]
   261c4:	mov	x24, xzr
   261c8:	str	wzr, [sp, #12]
   261cc:	lsl	x9, x9, #4
   261d0:	ldr	x22, [x8, x9]
   261d4:	stp	x22, x21, [sp, #16]
   261d8:	b	261ec <rpl_re_set_registers@@Base+0x7644>
   261dc:	ldr	x8, [x20, #232]
   261e0:	add	x24, x24, #0x1
   261e4:	cmp	x24, x8
   261e8:	b.ge	264e0 <rpl_re_set_registers@@Base+0x7938>  // b.tcont
   261ec:	ldr	x8, [x20, #248]
   261f0:	ldr	x9, [x21]
   261f4:	ldr	x25, [x8, x24, lsl #3]
   261f8:	ldr	x8, [x25, #8]
   261fc:	lsl	x8, x8, #4
   26200:	ldr	x8, [x9, x8]
   26204:	cmp	x8, x22
   26208:	b.ne	26300 <rpl_re_set_registers@@Base+0x7758>  // b.any
   2620c:	ldr	x8, [x25, #32]
   26210:	ldr	x23, [x25]
   26214:	cmp	x8, #0x1
   26218:	b.lt	26308 <rpl_re_set_registers@@Base+0x7760>  // b.tstop
   2621c:	ldur	x19, [x29, #-8]
   26220:	mov	x21, xzr
   26224:	b	26238 <rpl_re_set_registers@@Base+0x7690>
   26228:	ldr	x8, [x25, #32]
   2622c:	add	x21, x21, #0x1
   26230:	cmp	x21, x8
   26234:	b.ge	2631c <rpl_re_set_registers@@Base+0x7774>  // b.tcont
   26238:	ldr	x8, [x25, #40]
   2623c:	ldr	x26, [x8, x21, lsl #3]
   26240:	ldr	x22, [x26, #8]
   26244:	sub	x27, x22, x23
   26248:	cmp	x27, #0x1
   2624c:	b.lt	2627c <rpl_re_set_registers@@Base+0x76d4>  // b.tstop
   26250:	ldr	x8, [x20, #48]
   26254:	add	x1, x27, x19
   26258:	cmp	x1, x8
   2625c:	b.gt	262c4 <rpl_re_set_registers@@Base+0x771c>
   26260:	add	x0, x28, x19
   26264:	add	x1, x28, x23
   26268:	mov	x2, x27
   2626c:	bl	ae50 <bcmp@plt>
   26270:	cbz	w0, 2627c <rpl_re_set_registers@@Base+0x76d4>
   26274:	mov	w8, #0x7                   	// #7
   26278:	b	262b4 <rpl_re_set_registers@@Base+0x770c>
   2627c:	ldp	x3, x4, [x29, #-16]
   26280:	mov	x0, x20
   26284:	mov	x1, x25
   26288:	mov	x2, x26
   2628c:	add	x19, x27, x19
   26290:	bl	26828 <rpl_re_set_registers@@Base+0x7c80>
   26294:	ldr	x28, [x20, #8]
   26298:	cmp	w0, #0x1
   2629c:	b.ne	262a8 <rpl_re_set_registers@@Base+0x7700>  // b.any
   262a0:	mov	w8, #0x9                   	// #9
   262a4:	b	262b0 <rpl_re_set_registers@@Base+0x7708>
   262a8:	cbnz	w0, 262e4 <rpl_re_set_registers@@Base+0x773c>
   262ac:	mov	w8, wzr
   262b0:	mov	x23, x22
   262b4:	cbz	w8, 26228 <rpl_re_set_registers@@Base+0x7680>
   262b8:	cmp	w8, #0x9
   262bc:	b.eq	26228 <rpl_re_set_registers@@Base+0x7680>  // b.none
   262c0:	b	26314 <rpl_re_set_registers@@Base+0x776c>
   262c4:	ldr	x8, [x20, #88]
   262c8:	cmp	x1, x8
   262cc:	b.gt	26274 <rpl_re_set_registers@@Base+0x76cc>
   262d0:	mov	x0, x20
   262d4:	bl	26788 <rpl_re_set_registers@@Base+0x7be0>
   262d8:	cbnz	w0, 262f4 <rpl_re_set_registers@@Base+0x774c>
   262dc:	ldr	x28, [x20, #8]
   262e0:	b	26260 <rpl_re_set_registers@@Base+0x76b8>
   262e4:	mov	w8, #0x1                   	// #1
   262e8:	mov	x23, x22
   262ec:	str	w0, [sp, #12]
   262f0:	b	262b4 <rpl_re_set_registers@@Base+0x770c>
   262f4:	mov	w8, #0x1                   	// #1
   262f8:	str	w0, [sp, #12]
   262fc:	b	262b4 <rpl_re_set_registers@@Base+0x770c>
   26300:	mov	w8, #0x6                   	// #6
   26304:	b	264cc <rpl_re_set_registers@@Base+0x7924>
   26308:	ldur	x19, [x29, #-8]
   2630c:	mov	x21, xzr
   26310:	b	2631c <rpl_re_set_registers@@Base+0x7774>
   26314:	cmp	w8, #0x7
   26318:	b.ne	2632c <rpl_re_set_registers@@Base+0x7784>  // b.any
   2631c:	ldr	x8, [x25, #32]
   26320:	cmp	x21, x8
   26324:	b.ge	26334 <rpl_re_set_registers@@Base+0x778c>  // b.tcont
   26328:	mov	w8, #0x6                   	// #6
   2632c:	ldp	x22, x21, [sp, #16]
   26330:	b	264cc <rpl_re_set_registers@@Base+0x7924>
   26334:	ldur	x8, [x29, #-8]
   26338:	ldr	x22, [sp, #16]
   2633c:	cmp	x21, #0x0
   26340:	cinc	x26, x23, ne  // ne = any
   26344:	cmp	x26, x8
   26348:	b.le	26354 <rpl_re_set_registers@@Base+0x77ac>
   2634c:	ldr	x21, [sp, #24]
   26350:	b	264c8 <rpl_re_set_registers@@Base+0x7920>
   26354:	ldr	x21, [sp, #24]
   26358:	b	2636c <rpl_re_set_registers@@Base+0x77c4>
   2635c:	ldur	x8, [x29, #-8]
   26360:	cmp	x26, x8
   26364:	add	x26, x26, #0x1
   26368:	b.ge	264c8 <rpl_re_set_registers@@Base+0x7920>  // b.tcont
   2636c:	ldr	x8, [x25]
   26370:	cmp	x26, x8
   26374:	b.le	2639c <rpl_re_set_registers@@Base+0x77f4>
   26378:	ldr	x8, [x20, #48]
   2637c:	cmp	x19, x8
   26380:	b.ge	26478 <rpl_re_set_registers@@Base+0x78d0>  // b.tcont
   26384:	add	x9, x28, x26
   26388:	ldrb	w8, [x28, x19]
   2638c:	ldurb	w9, [x9, #-1]
   26390:	add	x19, x19, #0x1
   26394:	cmp	w8, w9
   26398:	b.ne	2649c <rpl_re_set_registers@@Base+0x78f4>  // b.any
   2639c:	ldr	x8, [x20, #184]
   263a0:	ldr	x8, [x8, x26, lsl #3]
   263a4:	cbz	x8, 26448 <rpl_re_set_registers@@Base+0x78a0>
   263a8:	add	x1, x8, #0x8
   263ac:	mov	w3, #0x9                   	// #9
   263b0:	mov	x0, x21
   263b4:	mov	x2, x22
   263b8:	bl	268b8 <rpl_re_set_registers@@Base+0x7d10>
   263bc:	cmn	x0, #0x1
   263c0:	b.eq	26448 <rpl_re_set_registers@@Base+0x78a0>  // b.none
   263c4:	ldr	x8, [x25, #16]
   263c8:	mov	x27, x0
   263cc:	cbnz	x8, 263ec <rpl_re_set_registers@@Base+0x7844>
   263d0:	ldr	x8, [x25]
   263d4:	mov	w0, #0x18                  	// #24
   263d8:	sub	x8, x26, x8
   263dc:	add	x1, x8, #0x1
   263e0:	bl	ae10 <calloc@plt>
   263e4:	str	x0, [x25, #16]
   263e8:	cbz	x0, 26464 <rpl_re_set_registers@@Base+0x78bc>
   263ec:	ldp	x2, x1, [x25, #8]
   263f0:	ldr	x3, [x25]
   263f4:	mov	w6, #0x9                   	// #9
   263f8:	mov	x0, x20
   263fc:	mov	x4, x27
   26400:	mov	x5, x26
   26404:	bl	26928 <rpl_re_set_registers@@Base+0x7d80>
   26408:	cmp	w0, #0x1
   2640c:	b.eq	26448 <rpl_re_set_registers@@Base+0x78a0>  // b.none
   26410:	cbnz	w0, 264b0 <rpl_re_set_registers@@Base+0x7908>
   26414:	mov	x0, x25
   26418:	mov	x1, x27
   2641c:	mov	x2, x26
   26420:	bl	26c74 <rpl_re_set_registers@@Base+0x80cc>
   26424:	cbz	x0, 26464 <rpl_re_set_registers@@Base+0x78bc>
   26428:	ldp	x3, x4, [x29, #-16]
   2642c:	mov	x2, x0
   26430:	mov	x0, x20
   26434:	mov	x1, x25
   26438:	bl	26828 <rpl_re_set_registers@@Base+0x7c80>
   2643c:	ldr	x28, [x20, #8]
   26440:	cmp	w0, #0x1
   26444:	b.ne	26454 <rpl_re_set_registers@@Base+0x78ac>  // b.any
   26448:	mov	w8, #0xc                   	// #12
   2644c:	cbnz	w8, 264a4 <rpl_re_set_registers@@Base+0x78fc>
   26450:	b	2635c <rpl_re_set_registers@@Base+0x77b4>
   26454:	cbnz	w0, 264b0 <rpl_re_set_registers@@Base+0x7908>
   26458:	mov	w8, wzr
   2645c:	cbnz	w8, 264a4 <rpl_re_set_registers@@Base+0x78fc>
   26460:	b	2635c <rpl_re_set_registers@@Base+0x77b4>
   26464:	mov	w8, #0xc                   	// #12
   26468:	str	w8, [sp, #12]
   2646c:	mov	w8, #0x1                   	// #1
   26470:	cbnz	w8, 264a4 <rpl_re_set_registers@@Base+0x78fc>
   26474:	b	2635c <rpl_re_set_registers@@Base+0x77b4>
   26478:	ldr	x8, [x20, #88]
   2647c:	cmp	x19, x8
   26480:	b.ge	2649c <rpl_re_set_registers@@Base+0x78f4>  // b.tcont
   26484:	add	w1, w19, #0x1
   26488:	mov	x0, x20
   2648c:	bl	25d50 <rpl_re_set_registers@@Base+0x71a8>
   26490:	cbnz	w0, 264b0 <rpl_re_set_registers@@Base+0x7908>
   26494:	ldr	x28, [x20, #8]
   26498:	b	26384 <rpl_re_set_registers@@Base+0x77dc>
   2649c:	mov	w8, #0xa                   	// #10
   264a0:	cbz	w8, 2635c <rpl_re_set_registers@@Base+0x77b4>
   264a4:	cmp	w8, #0xc
   264a8:	b.eq	2635c <rpl_re_set_registers@@Base+0x77b4>  // b.none
   264ac:	b	264c0 <rpl_re_set_registers@@Base+0x7918>
   264b0:	mov	w8, #0x1                   	// #1
   264b4:	str	w0, [sp, #12]
   264b8:	cbnz	w8, 264a4 <rpl_re_set_registers@@Base+0x78fc>
   264bc:	b	2635c <rpl_re_set_registers@@Base+0x77b4>
   264c0:	cmp	w8, #0xa
   264c4:	b.ne	264cc <rpl_re_set_registers@@Base+0x7924>  // b.any
   264c8:	mov	w8, wzr
   264cc:	cmp	w8, #0x6
   264d0:	b.eq	261dc <rpl_re_set_registers@@Base+0x7634>  // b.none
   264d4:	cbz	w8, 261dc <rpl_re_set_registers@@Base+0x7634>
   264d8:	ldr	w0, [sp, #12]
   264dc:	b	264e4 <rpl_re_set_registers@@Base+0x793c>
   264e0:	mov	w0, wzr
   264e4:	ldp	x20, x19, [sp, #128]
   264e8:	ldp	x22, x21, [sp, #112]
   264ec:	ldp	x24, x23, [sp, #96]
   264f0:	ldp	x26, x25, [sp, #80]
   264f4:	ldp	x28, x27, [sp, #64]
   264f8:	ldp	x29, x30, [sp, #48]
   264fc:	add	sp, sp, #0x90
   26500:	ret
   26504:	stp	x29, x30, [sp, #-64]!
   26508:	stp	x20, x19, [sp, #48]
   2650c:	mov	x20, x2
   26510:	mov	x19, x0
   26514:	stp	x24, x23, [sp, #16]
   26518:	stp	x22, x21, [sp, #32]
   2651c:	mov	x29, sp
   26520:	cbz	x1, 26634 <rpl_re_set_registers@@Base+0x7a8c>
   26524:	ldr	x8, [x1, #8]
   26528:	mov	x21, x1
   2652c:	cbz	x20, 2661c <rpl_re_set_registers@@Base+0x7a74>
   26530:	cmp	x8, #0x1
   26534:	b.lt	2661c <rpl_re_set_registers@@Base+0x7a74>  // b.tstop
   26538:	ldr	x9, [x20, #8]
   2653c:	cmp	x9, #0x1
   26540:	b.lt	2661c <rpl_re_set_registers@@Base+0x7a74>  // b.tstop
   26544:	add	x8, x9, x8
   26548:	lsl	x0, x8, #3
   2654c:	str	x8, [x19]
   26550:	bl	abc0 <malloc@plt>
   26554:	str	x0, [x19, #16]
   26558:	cbz	x0, 266fc <rpl_re_set_registers@@Base+0x7b54>
   2655c:	ldr	x8, [x21, #8]
   26560:	cmp	x8, #0x0
   26564:	cset	w9, gt
   26568:	cmp	x8, #0x1
   2656c:	b.lt	26664 <rpl_re_set_registers@@Base+0x7abc>  // b.tstop
   26570:	ldr	x10, [x20, #8]
   26574:	cmp	x10, #0x1
   26578:	b.lt	26670 <rpl_re_set_registers@@Base+0x7ac8>  // b.tstop
   2657c:	mov	x24, xzr
   26580:	mov	x13, xzr
   26584:	mov	x23, xzr
   26588:	mov	x22, x13
   2658c:	mov	x10, x23
   26590:	ldr	x8, [x21, #16]
   26594:	ldr	x9, [x20, #16]
   26598:	ldr	x12, [x8, x24, lsl #3]
   2659c:	ldr	x11, [x9, x22, lsl #3]
   265a0:	cmp	x12, x11
   265a4:	b.le	265dc <rpl_re_set_registers@@Base+0x7a34>
   265a8:	ldr	x8, [x19, #16]
   265ac:	add	x22, x22, #0x1
   265b0:	add	x23, x10, #0x1
   265b4:	str	x11, [x8, x10, lsl #3]
   265b8:	ldr	x8, [x21, #8]
   265bc:	cmp	x8, x24
   265c0:	cset	w9, gt
   265c4:	b.le	266b0 <rpl_re_set_registers@@Base+0x7b08>
   265c8:	ldr	x10, [x20, #8]
   265cc:	cmp	x22, x10
   265d0:	mov	x10, x23
   265d4:	b.lt	26590 <rpl_re_set_registers@@Base+0x79e8>  // b.tstop
   265d8:	b	2667c <rpl_re_set_registers@@Base+0x7ad4>
   265dc:	ldr	x8, [x19, #16]
   265e0:	add	x24, x24, #0x1
   265e4:	cinc	x13, x22, eq  // eq = none
   265e8:	add	x23, x10, #0x1
   265ec:	str	x12, [x8, x10, lsl #3]
   265f0:	ldr	x8, [x21, #8]
   265f4:	cmp	x8, x24
   265f8:	cset	w9, gt
   265fc:	b.le	266a8 <rpl_re_set_registers@@Base+0x7b00>
   26600:	ldr	x14, [x20, #8]
   26604:	cmp	x13, x14
   26608:	b.lt	26588 <rpl_re_set_registers@@Base+0x79e0>  // b.tstop
   2660c:	cmp	x12, x11
   26610:	cinc	x22, x22, eq  // eq = none
   26614:	add	x23, x10, #0x1
   26618:	b	2667c <rpl_re_set_registers@@Base+0x7ad4>
   2661c:	cmp	x8, #0x1
   26620:	b.lt	26634 <rpl_re_set_registers@@Base+0x7a8c>  // b.tstop
   26624:	mov	x0, x19
   26628:	mov	x1, x21
   2662c:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   26630:	b	266e8 <rpl_re_set_registers@@Base+0x7b40>
   26634:	cbz	x20, 26654 <rpl_re_set_registers@@Base+0x7aac>
   26638:	ldr	x8, [x20, #8]
   2663c:	cmp	x8, #0x1
   26640:	b.lt	26654 <rpl_re_set_registers@@Base+0x7aac>  // b.tstop
   26644:	mov	x0, x19
   26648:	mov	x1, x20
   2664c:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   26650:	b	266e8 <rpl_re_set_registers@@Base+0x7b40>
   26654:	mov	w0, wzr
   26658:	stp	xzr, xzr, [x19]
   2665c:	str	xzr, [x19, #16]
   26660:	b	266e8 <rpl_re_set_registers@@Base+0x7b40>
   26664:	mov	x22, xzr
   26668:	mov	x23, xzr
   2666c:	b	266b0 <rpl_re_set_registers@@Base+0x7b08>
   26670:	mov	x24, xzr
   26674:	mov	x23, xzr
   26678:	mov	x22, xzr
   2667c:	cbz	w9, 266b0 <rpl_re_set_registers@@Base+0x7b08>
   26680:	ldr	x9, [x19, #16]
   26684:	ldr	x10, [x21, #16]
   26688:	sub	x8, x8, x24
   2668c:	lsl	x2, x8, #3
   26690:	add	x0, x9, x23, lsl #3
   26694:	add	x1, x10, x24, lsl #3
   26698:	bl	a800 <memcpy@plt>
   2669c:	ldr	x8, [x21, #8]
   266a0:	sub	x9, x23, x24
   266a4:	b	266dc <rpl_re_set_registers@@Base+0x7b34>
   266a8:	cmp	x12, x11
   266ac:	cinc	x22, x22, eq  // eq = none
   266b0:	ldr	x8, [x20, #8]
   266b4:	subs	x8, x8, x22
   266b8:	b.le	266e0 <rpl_re_set_registers@@Base+0x7b38>
   266bc:	ldr	x9, [x19, #16]
   266c0:	ldr	x10, [x20, #16]
   266c4:	lsl	x2, x8, #3
   266c8:	add	x0, x9, x23, lsl #3
   266cc:	add	x1, x10, x22, lsl #3
   266d0:	bl	a800 <memcpy@plt>
   266d4:	ldr	x8, [x20, #8]
   266d8:	sub	x9, x23, x22
   266dc:	add	x23, x9, x8
   266e0:	mov	w0, wzr
   266e4:	str	x23, [x19, #8]
   266e8:	ldp	x20, x19, [sp, #48]
   266ec:	ldp	x22, x21, [sp, #32]
   266f0:	ldp	x24, x23, [sp, #16]
   266f4:	ldp	x29, x30, [sp], #64
   266f8:	ret
   266fc:	mov	w0, #0xc                   	// #12
   26700:	b	266e8 <rpl_re_set_registers@@Base+0x7b40>
   26704:	ldr	x9, [x0, #200]
   26708:	mov	x8, x0
   2670c:	cmp	x9, #0x1
   26710:	b.lt	2675c <rpl_re_set_registers@@Base+0x7bb4>  // b.tstop
   26714:	ldr	x10, [x8, #216]
   26718:	mov	x0, xzr
   2671c:	mov	w11, #0x28                  	// #40
   26720:	mov	x12, x9
   26724:	add	x13, x0, x12
   26728:	cmp	x13, #0x0
   2672c:	cinc	x13, x13, lt  // lt = tstop
   26730:	asr	x13, x13, #1
   26734:	madd	x14, x13, x11, x10
   26738:	ldr	x14, [x14, #8]
   2673c:	cmp	x14, x1
   26740:	csel	x12, x12, x13, lt  // lt = tstop
   26744:	csinc	x0, x0, x13, ge  // ge = tcont
   26748:	cmp	x0, x12
   2674c:	b.lt	26724 <rpl_re_set_registers@@Base+0x7b7c>  // b.tstop
   26750:	cmp	x0, x9
   26754:	b.lt	26768 <rpl_re_set_registers@@Base+0x7bc0>  // b.tstop
   26758:	b	26780 <rpl_re_set_registers@@Base+0x7bd8>
   2675c:	mov	x0, xzr
   26760:	cmp	x0, x9
   26764:	b.ge	26780 <rpl_re_set_registers@@Base+0x7bd8>  // b.tcont
   26768:	ldr	x8, [x8, #216]
   2676c:	mov	w9, #0x28                  	// #40
   26770:	madd	x8, x0, x9, x8
   26774:	ldr	x8, [x8, #8]
   26778:	cmp	x8, x1
   2677c:	b.eq	26784 <rpl_re_set_registers@@Base+0x7bdc>  // b.none
   26780:	mov	x0, #0xffffffffffffffff    	// #-1
   26784:	ret
   26788:	stp	x29, x30, [sp, #-48]!
   2678c:	stp	x20, x19, [sp, #32]
   26790:	ldr	x8, [x0, #64]
   26794:	str	x21, [sp, #16]
   26798:	ldr	x21, [x0, #192]
   2679c:	mov	x19, x0
   267a0:	mov	x20, x1
   267a4:	cmp	x8, x1
   267a8:	mov	x29, sp
   267ac:	b.gt	267bc <rpl_re_set_registers@@Base+0x7c14>
   267b0:	ldr	x9, [x19, #88]
   267b4:	cmp	x8, x9
   267b8:	b.lt	267d4 <rpl_re_set_registers@@Base+0x7c2c>  // b.tstop
   267bc:	ldr	x8, [x19, #48]
   267c0:	cmp	x8, x20
   267c4:	b.gt	267e4 <rpl_re_set_registers@@Base+0x7c3c>
   267c8:	ldr	x9, [x19, #88]
   267cc:	cmp	x8, x9
   267d0:	b.ge	267e4 <rpl_re_set_registers@@Base+0x7c3c>  // b.tcont
   267d4:	add	w1, w20, #0x1
   267d8:	mov	x0, x19
   267dc:	bl	25d50 <rpl_re_set_registers@@Base+0x71a8>
   267e0:	cbnz	w0, 26818 <rpl_re_set_registers@@Base+0x7c70>
   267e4:	cmp	x21, x20
   267e8:	b.ge	26814 <rpl_re_set_registers@@Base+0x7c6c>  // b.tcont
   267ec:	ldr	x8, [x19, #184]
   267f0:	sub	x9, x20, x21
   267f4:	lsl	x2, x9, #3
   267f8:	mov	w1, wzr
   267fc:	add	x8, x8, x21, lsl #3
   26800:	add	x0, x8, #0x8
   26804:	bl	ad40 <memset@plt>
   26808:	mov	w0, wzr
   2680c:	str	x20, [x19, #192]
   26810:	b	26818 <rpl_re_set_registers@@Base+0x7c70>
   26814:	mov	w0, wzr
   26818:	ldp	x20, x19, [sp, #32]
   2681c:	ldr	x21, [sp, #16]
   26820:	ldp	x29, x30, [sp], #48
   26824:	ret
   26828:	stp	x29, x30, [sp, #-64]!
   2682c:	stp	x22, x21, [sp, #32]
   26830:	stp	x20, x19, [sp, #48]
   26834:	mov	x22, x2
   26838:	str	x23, [sp, #16]
   2683c:	mov	x23, x3
   26840:	ldr	x2, [x2]
   26844:	ldr	x3, [x22, #8]
   26848:	mov	x19, x4
   2684c:	mov	x21, x1
   26850:	add	x1, x22, #0x10
   26854:	mov	w6, #0x8                   	// #8
   26858:	mov	x4, x23
   2685c:	mov	x5, x19
   26860:	mov	x29, sp
   26864:	mov	x20, x0
   26868:	bl	26928 <rpl_re_set_registers@@Base+0x7d80>
   2686c:	cbnz	w0, 268a4 <rpl_re_set_registers@@Base+0x7cfc>
   26870:	ldr	x3, [x21]
   26874:	ldr	x4, [x22, #8]
   26878:	mov	x0, x20
   2687c:	mov	x1, x23
   26880:	mov	x2, x19
   26884:	bl	26cf4 <rpl_re_set_registers@@Base+0x814c>
   26888:	cbnz	w0, 268a4 <rpl_re_set_registers@@Base+0x7cfc>
   2688c:	ldr	x8, [x22, #8]
   26890:	ldr	x9, [x21]
   26894:	mov	x0, x20
   26898:	add	x8, x8, x19
   2689c:	sub	x1, x8, x9
   268a0:	bl	26788 <rpl_re_set_registers@@Base+0x7be0>
   268a4:	ldp	x20, x19, [sp, #48]
   268a8:	ldp	x22, x21, [sp, #32]
   268ac:	ldr	x23, [sp, #16]
   268b0:	ldp	x29, x30, [sp], #64
   268b4:	ret
   268b8:	ldr	x8, [x1, #8]
   268bc:	cmp	x8, #0x1
   268c0:	b.lt	26920 <rpl_re_set_registers@@Base+0x7d78>  // b.tstop
   268c4:	ldr	x9, [x1, #16]
   268c8:	ldr	x10, [x0]
   268cc:	mov	x8, xzr
   268d0:	b	268ec <rpl_re_set_registers@@Base+0x7d44>
   268d4:	mov	w12, #0x1                   	// #1
   268d8:	tbz	w12, #0, 2691c <rpl_re_set_registers@@Base+0x7d74>
   268dc:	ldr	x11, [x1, #8]
   268e0:	add	x8, x8, #0x1
   268e4:	cmp	x8, x11
   268e8:	b.ge	26920 <rpl_re_set_registers@@Base+0x7d78>  // b.tcont
   268ec:	ldr	x11, [x9, x8, lsl #3]
   268f0:	add	x12, x10, x11, lsl #4
   268f4:	ldrb	w12, [x12, #8]
   268f8:	cmp	w12, w3
   268fc:	b.ne	268d4 <rpl_re_set_registers@@Base+0x7d2c>  // b.any
   26900:	lsl	x12, x11, #4
   26904:	ldr	x12, [x10, x12]
   26908:	cmp	x12, x2
   2690c:	b.ne	268d4 <rpl_re_set_registers@@Base+0x7d2c>  // b.any
   26910:	mov	w12, wzr
   26914:	mov	x0, x11
   26918:	tbnz	w12, #0, 268dc <rpl_re_set_registers@@Base+0x7d34>
   2691c:	ret
   26920:	mov	x0, #0xffffffffffffffff    	// #-1
   26924:	ret
   26928:	sub	sp, sp, #0xa0
   2692c:	stp	x29, x30, [sp, #64]
   26930:	stp	x28, x27, [sp, #80]
   26934:	stp	x26, x25, [sp, #96]
   26938:	stp	x24, x23, [sp, #112]
   2693c:	stp	x22, x21, [sp, #128]
   26940:	stp	x20, x19, [sp, #144]
   26944:	ldr	x24, [x0, #152]
   26948:	add	x29, sp, #0x40
   2694c:	stur	wzr, [x29, #-4]
   26950:	ldrsw	x9, [x0, #224]
   26954:	ldr	x8, [x24]
   26958:	ldr	x19, [x1, #8]
   2695c:	lsl	x10, x2, #4
   26960:	mov	w23, w6
   26964:	ldr	x25, [x8, x10]
   26968:	add	x8, x9, x5
   2696c:	mov	x20, x5
   26970:	mov	x28, x2
   26974:	mov	x22, x1
   26978:	mov	x21, x0
   2697c:	cmp	x19, x8
   26980:	mov	x27, x3
   26984:	str	x4, [sp, #8]
   26988:	b.le	26c1c <rpl_re_set_registers@@Base+0x8074>
   2698c:	ldr	x9, [x21, #184]
   26990:	ldr	x8, [x22]
   26994:	ldr	x10, [x21, #72]
   26998:	ldr	w2, [x21, #160]
   2699c:	str	x9, [sp, #24]
   269a0:	ldr	x9, [x22, #16]
   269a4:	cmp	x8, #0x0
   269a8:	csel	x26, x27, x8, eq  // eq = none
   269ac:	sub	x1, x26, #0x1
   269b0:	mov	x0, x21
   269b4:	str	x10, [sp, #16]
   269b8:	str	x9, [x21, #184]
   269bc:	str	x26, [x21, #72]
   269c0:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   269c4:	cmp	x26, x27
   269c8:	mov	w19, w0
   269cc:	b.ne	26a08 <rpl_re_set_registers@@Base+0x7e60>  // b.any
   269d0:	add	x0, sp, #0x20
   269d4:	mov	x1, x28
   269d8:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   269dc:	stur	w0, [x29, #-4]
   269e0:	cbnz	w0, 26bfc <rpl_re_set_registers@@Base+0x8054>
   269e4:	add	x1, sp, #0x20
   269e8:	mov	x0, x24
   269ec:	mov	x2, x25
   269f0:	mov	w3, w23
   269f4:	bl	26e00 <rpl_re_set_registers@@Base+0x8258>
   269f8:	stur	w0, [x29, #-4]
   269fc:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26a00:	mov	x28, xzr
   26a04:	b	26a3c <rpl_re_set_registers@@Base+0x7e94>
   26a08:	ldr	x8, [x21, #184]
   26a0c:	ldr	x28, [x8, x26, lsl #3]
   26a10:	cbz	x28, 26a1c <rpl_re_set_registers@@Base+0x7e74>
   26a14:	ldrb	w8, [x28, #104]
   26a18:	tbnz	w8, #6, 26a28 <rpl_re_set_registers@@Base+0x7e80>
   26a1c:	stp	xzr, xzr, [sp, #32]
   26a20:	str	xzr, [sp, #48]
   26a24:	b	26a3c <rpl_re_set_registers@@Base+0x7e94>
   26a28:	add	x1, x28, #0x8
   26a2c:	add	x0, sp, #0x20
   26a30:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   26a34:	stur	w0, [x29, #-4]
   26a38:	cbnz	w0, 26bfc <rpl_re_set_registers@@Base+0x8054>
   26a3c:	cmp	x26, x27
   26a40:	b.eq	26a50 <rpl_re_set_registers@@Base+0x7ea8>  // b.none
   26a44:	cbz	x28, 26aa4 <rpl_re_set_registers@@Base+0x7efc>
   26a48:	ldrb	w8, [x28, #104]
   26a4c:	tbz	w8, #6, 26aa4 <rpl_re_set_registers@@Base+0x7efc>
   26a50:	ldr	x8, [sp, #40]
   26a54:	cbz	x8, 26a78 <rpl_re_set_registers@@Base+0x7ed0>
   26a58:	add	x1, sp, #0x20
   26a5c:	mov	x0, x21
   26a60:	mov	x2, x26
   26a64:	mov	x3, x25
   26a68:	mov	w4, w23
   26a6c:	bl	26f2c <rpl_re_set_registers@@Base+0x8384>
   26a70:	stur	w0, [x29, #-4]
   26a74:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26a78:	sub	x0, x29, #0x4
   26a7c:	add	x2, sp, #0x20
   26a80:	mov	x1, x24
   26a84:	mov	w3, w19
   26a88:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   26a8c:	mov	x28, x0
   26a90:	cbnz	x0, 26a9c <rpl_re_set_registers@@Base+0x7ef4>
   26a94:	ldur	w8, [x29, #-4]
   26a98:	cbnz	w8, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26a9c:	ldr	x8, [x21, #184]
   26aa0:	str	x28, [x8, x26, lsl #3]
   26aa4:	cmp	x26, x20
   26aa8:	b.ge	26bb8 <rpl_re_set_registers@@Base+0x8010>  // b.tcont
   26aac:	mov	x27, xzr
   26ab0:	b	26ad4 <rpl_re_set_registers@@Base+0x7f2c>
   26ab4:	ldr	x8, [x21, #184]
   26ab8:	cmp	x28, #0x0
   26abc:	csinc	x27, xzr, x27, ne  // ne = any
   26ac0:	cmp	x20, x19
   26ac4:	add	x8, x8, x26, lsl #3
   26ac8:	mov	x26, x19
   26acc:	str	x28, [x8, #8]
   26ad0:	b.eq	26bb4 <rpl_re_set_registers@@Base+0x800c>  // b.none
   26ad4:	ldrsw	x8, [x21, #224]
   26ad8:	cmp	x27, x8
   26adc:	b.gt	26bb8 <rpl_re_set_registers@@Base+0x8010>
   26ae0:	str	xzr, [sp, #40]
   26ae4:	ldr	x8, [x21, #184]
   26ae8:	add	x8, x8, x26, lsl #3
   26aec:	ldr	x8, [x8, #8]
   26af0:	cbz	x8, 26b08 <rpl_re_set_registers@@Base+0x7f60>
   26af4:	add	x1, x8, #0x8
   26af8:	add	x0, sp, #0x20
   26afc:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   26b00:	stur	w0, [x29, #-4]
   26b04:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26b08:	cbz	x28, 26b28 <rpl_re_set_registers@@Base+0x7f80>
   26b0c:	add	x2, x28, #0x20
   26b10:	add	x3, sp, #0x20
   26b14:	mov	x0, x21
   26b18:	mov	x1, x26
   26b1c:	bl	271a0 <rpl_re_set_registers@@Base+0x85f8>
   26b20:	stur	w0, [x29, #-4]
   26b24:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26b28:	ldr	x8, [sp, #40]
   26b2c:	add	x19, x26, #0x1
   26b30:	cbz	x8, 26b70 <rpl_re_set_registers@@Base+0x7fc8>
   26b34:	add	x1, sp, #0x20
   26b38:	mov	x0, x24
   26b3c:	mov	x2, x25
   26b40:	mov	w3, w23
   26b44:	bl	26e00 <rpl_re_set_registers@@Base+0x8258>
   26b48:	stur	w0, [x29, #-4]
   26b4c:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26b50:	add	x1, sp, #0x20
   26b54:	mov	x0, x21
   26b58:	mov	x2, x19
   26b5c:	mov	x3, x25
   26b60:	mov	w4, w23
   26b64:	bl	26f2c <rpl_re_set_registers@@Base+0x8384>
   26b68:	stur	w0, [x29, #-4]
   26b6c:	cbnz	w0, 26ba4 <rpl_re_set_registers@@Base+0x7ffc>
   26b70:	ldr	w2, [x21, #160]
   26b74:	mov	x0, x21
   26b78:	mov	x1, x26
   26b7c:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   26b80:	mov	w3, w0
   26b84:	sub	x0, x29, #0x4
   26b88:	add	x2, sp, #0x20
   26b8c:	mov	x1, x24
   26b90:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   26b94:	mov	x28, x0
   26b98:	cbnz	x0, 26ab4 <rpl_re_set_registers@@Base+0x7f0c>
   26b9c:	ldur	w8, [x29, #-4]
   26ba0:	cbz	w8, 26ab4 <rpl_re_set_registers@@Base+0x7f0c>
   26ba4:	ldr	x0, [sp, #48]
   26ba8:	bl	b1d0 <free@plt>
   26bac:	ldur	w0, [x29, #-4]
   26bb0:	b	26bfc <rpl_re_set_registers@@Base+0x8054>
   26bb4:	mov	x26, x20
   26bb8:	ldr	x0, [sp, #48]
   26bbc:	bl	b1d0 <free@plt>
   26bc0:	ldr	x8, [x21, #184]
   26bc4:	ldr	x9, [sp, #24]
   26bc8:	ldr	x8, [x8, x20, lsl #3]
   26bcc:	str	x26, [x22]
   26bd0:	str	x9, [x21, #184]
   26bd4:	ldr	x9, [sp, #16]
   26bd8:	str	x9, [x21, #72]
   26bdc:	cbz	x8, 26bf8 <rpl_re_set_registers@@Base+0x8050>
   26be0:	ldr	x1, [sp, #8]
   26be4:	add	x0, x8, #0x8
   26be8:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   26bec:	cbz	x0, 26bf8 <rpl_re_set_registers@@Base+0x8050>
   26bf0:	mov	w0, wzr
   26bf4:	b	26bfc <rpl_re_set_registers@@Base+0x8054>
   26bf8:	mov	w0, #0x1                   	// #1
   26bfc:	ldp	x20, x19, [sp, #144]
   26c00:	ldp	x22, x21, [sp, #128]
   26c04:	ldp	x24, x23, [sp, #112]
   26c08:	ldp	x26, x25, [sp, #96]
   26c0c:	ldp	x28, x27, [sp, #80]
   26c10:	ldp	x29, x30, [sp, #64]
   26c14:	add	sp, sp, #0xa0
   26c18:	ret
   26c1c:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
   26c20:	sub	x9, x9, x19
   26c24:	cmp	x9, x8
   26c28:	b.le	26c6c <rpl_re_set_registers@@Base+0x80c4>
   26c2c:	add	x8, x8, #0x1
   26c30:	add	x26, x8, x19
   26c34:	str	x8, [sp, #24]
   26c38:	lsr	x8, x26, #61
   26c3c:	cbnz	x8, 26c6c <rpl_re_set_registers@@Base+0x80c4>
   26c40:	ldr	x0, [x22, #16]
   26c44:	lsl	x1, x26, #3
   26c48:	bl	aea0 <realloc@plt>
   26c4c:	cbz	x0, 26c6c <rpl_re_set_registers@@Base+0x80c4>
   26c50:	stp	x26, x0, [x22, #8]
   26c54:	ldr	x8, [sp, #24]
   26c58:	add	x0, x0, x19, lsl #3
   26c5c:	mov	w1, wzr
   26c60:	lsl	x2, x8, #3
   26c64:	bl	ad40 <memset@plt>
   26c68:	b	2698c <rpl_re_set_registers@@Base+0x7de4>
   26c6c:	mov	w0, #0xc                   	// #12
   26c70:	b	26bfc <rpl_re_set_registers@@Base+0x8054>
   26c74:	stp	x29, x30, [sp, #-48]!
   26c78:	stp	x22, x21, [sp, #16]
   26c7c:	stp	x20, x19, [sp, #32]
   26c80:	ldp	x8, x9, [x0, #24]
   26c84:	mov	x20, x2
   26c88:	mov	x19, x0
   26c8c:	mov	x21, x1
   26c90:	cmp	x9, x8
   26c94:	mov	x29, sp
   26c98:	b.eq	26cd0 <rpl_re_set_registers@@Base+0x8128>  // b.none
   26c9c:	mov	w0, #0x1                   	// #1
   26ca0:	mov	w1, #0x28                  	// #40
   26ca4:	bl	ae10 <calloc@plt>
   26ca8:	cbz	x0, 26cc0 <rpl_re_set_registers@@Base+0x8118>
   26cac:	ldp	x9, x8, [x19, #32]
   26cb0:	str	x0, [x8, x9, lsl #3]
   26cb4:	add	x8, x9, #0x1
   26cb8:	stp	x21, x20, [x0]
   26cbc:	str	x8, [x19, #32]
   26cc0:	ldp	x20, x19, [sp, #32]
   26cc4:	ldp	x22, x21, [sp, #16]
   26cc8:	ldp	x29, x30, [sp], #48
   26ccc:	ret
   26cd0:	ldr	x0, [x19, #40]
   26cd4:	mov	w22, #0x1                   	// #1
   26cd8:	bfi	x22, x8, #1, #63
   26cdc:	lsl	x1, x22, #3
   26ce0:	bl	aea0 <realloc@plt>
   26ce4:	cbz	x0, 26cc0 <rpl_re_set_registers@@Base+0x8118>
   26ce8:	str	x0, [x19, #40]
   26cec:	str	x22, [x19, #24]
   26cf0:	b	26c9c <rpl_re_set_registers@@Base+0x80f4>
   26cf4:	stp	x29, x30, [sp, #-64]!
   26cf8:	stp	x24, x23, [sp, #16]
   26cfc:	stp	x22, x21, [sp, #32]
   26d00:	stp	x20, x19, [sp, #48]
   26d04:	ldp	x9, x8, [x0, #200]
   26d08:	mov	x20, x4
   26d0c:	mov	x21, x3
   26d10:	mov	x22, x2
   26d14:	mov	x19, x0
   26d18:	cmp	x9, x8
   26d1c:	mov	x23, x1
   26d20:	mov	x29, sp
   26d24:	b.lt	26d64 <rpl_re_set_registers@@Base+0x81bc>  // b.tstop
   26d28:	ldr	x0, [x19, #216]
   26d2c:	add	x8, x8, x8, lsl #2
   26d30:	lsl	x1, x8, #4
   26d34:	bl	aea0 <realloc@plt>
   26d38:	cbz	x0, 26df0 <rpl_re_set_registers@@Base+0x8248>
   26d3c:	ldp	x8, x24, [x19, #200]
   26d40:	mov	w9, #0x28                  	// #40
   26d44:	str	x0, [x19, #216]
   26d48:	mov	w1, wzr
   26d4c:	madd	x0, x8, x9, x0
   26d50:	add	x8, x24, x24, lsl #2
   26d54:	lsl	x2, x8, #3
   26d58:	bl	ad40 <memset@plt>
   26d5c:	lsl	x8, x24, #1
   26d60:	str	x8, [x19, #208]
   26d64:	ldr	x8, [x19, #200]
   26d68:	subs	x9, x8, #0x1
   26d6c:	b.lt	26d98 <rpl_re_set_registers@@Base+0x81f0>  // b.tstop
   26d70:	ldr	x10, [x19, #216]
   26d74:	mov	w11, #0x28                  	// #40
   26d78:	madd	x11, x9, x11, x10
   26d7c:	ldr	x11, [x11, #8]
   26d80:	cmp	x11, x22
   26d84:	b.ne	26d98 <rpl_re_set_registers@@Base+0x81f0>  // b.any
   26d88:	mov	w11, #0x28                  	// #40
   26d8c:	madd	x9, x9, x11, x10
   26d90:	mov	w10, #0x1                   	// #1
   26d94:	strb	w10, [x9, #32]
   26d98:	ldr	x10, [x19, #216]
   26d9c:	mov	w11, #0x28                  	// #40
   26da0:	subs	x9, x20, x21
   26da4:	mov	w0, wzr
   26da8:	madd	x10, x8, x11, x10
   26dac:	add	x8, x8, #0x1
   26db0:	csetm	w11, eq  // eq = none
   26db4:	stp	x23, x22, [x10]
   26db8:	stp	x21, x20, [x10, #16]
   26dbc:	strh	w11, [x10, #34]
   26dc0:	str	x8, [x19, #200]
   26dc4:	strb	wzr, [x10, #32]
   26dc8:	ldrsw	x8, [x19, #224]
   26dcc:	cmp	x9, x8
   26dd0:	b.le	26ddc <rpl_re_set_registers@@Base+0x8234>
   26dd4:	mov	w0, wzr
   26dd8:	str	w9, [x19, #224]
   26ddc:	ldp	x20, x19, [sp, #48]
   26de0:	ldp	x22, x21, [sp, #32]
   26de4:	ldp	x24, x23, [sp, #16]
   26de8:	ldp	x29, x30, [sp], #64
   26dec:	ret
   26df0:	ldr	x0, [x19, #216]
   26df4:	bl	b1d0 <free@plt>
   26df8:	mov	w0, #0xc                   	// #12
   26dfc:	b	26ddc <rpl_re_set_registers@@Base+0x8234>
   26e00:	sub	sp, sp, #0x80
   26e04:	stp	x29, x30, [sp, #32]
   26e08:	stp	x26, x25, [sp, #64]
   26e0c:	stp	x24, x23, [sp, #80]
   26e10:	stp	x22, x21, [sp, #96]
   26e14:	stp	x20, x19, [sp, #112]
   26e18:	mov	x19, x1
   26e1c:	ldr	x1, [x1, #8]
   26e20:	mov	x22, x0
   26e24:	add	x0, sp, #0x8
   26e28:	str	x27, [sp, #48]
   26e2c:	add	x29, sp, #0x20
   26e30:	mov	w20, w3
   26e34:	mov	x21, x2
   26e38:	bl	23980 <rpl_re_set_registers@@Base+0x4dd8>
   26e3c:	cbnz	w0, 26f24 <rpl_re_set_registers@@Base+0x837c>
   26e40:	ldr	x8, [x19, #8]
   26e44:	cmp	x8, #0x1
   26e48:	b.lt	26ee4 <rpl_re_set_registers@@Base+0x833c>  // b.tstop
   26e4c:	mov	x26, xzr
   26e50:	mov	w27, #0x18                  	// #24
   26e54:	ldr	x8, [x19, #16]
   26e58:	mov	x0, x22
   26e5c:	mov	x2, x21
   26e60:	mov	w3, w20
   26e64:	ldr	x24, [x8, x26, lsl #3]
   26e68:	ldr	x8, [x22, #48]
   26e6c:	madd	x25, x24, x27, x8
   26e70:	mov	x1, x25
   26e74:	bl	268b8 <rpl_re_set_registers@@Base+0x7d10>
   26e78:	cmn	x0, #0x1
   26e7c:	b.eq	26eb8 <rpl_re_set_registers@@Base+0x8310>  // b.none
   26e80:	add	x1, sp, #0x8
   26e84:	mov	x0, x22
   26e88:	mov	x2, x24
   26e8c:	mov	x3, x21
   26e90:	mov	w4, w20
   26e94:	bl	2737c <rpl_re_set_registers@@Base+0x87d4>
   26e98:	cbnz	w0, 26ec8 <rpl_re_set_registers@@Base+0x8320>
   26e9c:	mov	w8, #0x1                   	// #1
   26ea0:	tbz	w8, #0, 26f00 <rpl_re_set_registers@@Base+0x8358>
   26ea4:	ldr	x8, [x19, #8]
   26ea8:	add	x26, x26, #0x1
   26eac:	cmp	x26, x8
   26eb0:	b.lt	26e54 <rpl_re_set_registers@@Base+0x82ac>  // b.tstop
   26eb4:	b	26ee4 <rpl_re_set_registers@@Base+0x833c>
   26eb8:	add	x0, sp, #0x8
   26ebc:	mov	x1, x25
   26ec0:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   26ec4:	cbz	w0, 26e9c <rpl_re_set_registers@@Base+0x82f4>
   26ec8:	mov	w24, w0
   26ecc:	ldr	x0, [sp, #24]
   26ed0:	bl	b1d0 <free@plt>
   26ed4:	mov	w23, w24
   26ed8:	mov	w8, wzr
   26edc:	tbnz	wzr, #0, 26ea4 <rpl_re_set_registers@@Base+0x82fc>
   26ee0:	b	26f00 <rpl_re_set_registers@@Base+0x8358>
   26ee4:	ldr	x0, [x19, #16]
   26ee8:	bl	b1d0 <free@plt>
   26eec:	ldr	x8, [sp, #24]
   26ef0:	ldur	q0, [sp, #8]
   26ef4:	mov	w23, wzr
   26ef8:	str	x8, [x19, #16]
   26efc:	str	q0, [x19]
   26f00:	mov	w0, w23
   26f04:	ldp	x20, x19, [sp, #112]
   26f08:	ldp	x22, x21, [sp, #96]
   26f0c:	ldp	x24, x23, [sp, #80]
   26f10:	ldp	x26, x25, [sp, #64]
   26f14:	ldr	x27, [sp, #48]
   26f18:	ldp	x29, x30, [sp, #32]
   26f1c:	add	sp, sp, #0x80
   26f20:	ret
   26f24:	mov	w23, w0
   26f28:	b	26f00 <rpl_re_set_registers@@Base+0x8358>
   26f2c:	sub	sp, sp, #0x90
   26f30:	stp	x29, x30, [sp, #48]
   26f34:	stp	x28, x27, [sp, #64]
   26f38:	stp	x26, x25, [sp, #80]
   26f3c:	stp	x24, x23, [sp, #96]
   26f40:	stp	x22, x21, [sp, #112]
   26f44:	stp	x20, x19, [sp, #128]
   26f48:	ldr	x23, [x0, #152]
   26f4c:	mov	x24, x1
   26f50:	mov	x1, x2
   26f54:	add	x29, sp, #0x30
   26f58:	str	w4, [sp, #12]
   26f5c:	str	x3, [sp]
   26f60:	mov	x21, x2
   26f64:	mov	x22, x0
   26f68:	bl	26704 <rpl_re_set_registers@@Base+0x7b5c>
   26f6c:	cmn	x0, #0x1
   26f70:	b.eq	27178 <rpl_re_set_registers@@Base+0x85d0>  // b.none
   26f74:	mov	x25, x0
   26f78:	ldr	x8, [x22, #216]
   26f7c:	mov	w9, #0x28                  	// #40
   26f80:	madd	x20, x25, x9, x8
   26f84:	b	26f94 <rpl_re_set_registers@@Base+0x83ec>
   26f88:	ldrb	w8, [x20, #32]
   26f8c:	add	x20, x20, #0x28
   26f90:	cbz	w8, 27178 <rpl_re_set_registers@@Base+0x85d0>
   26f94:	ldr	x1, [x20]
   26f98:	mov	x0, x24
   26f9c:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   26fa0:	cbz	x0, 26fe0 <rpl_re_set_registers@@Base+0x8438>
   26fa4:	ldp	x9, x8, [x20, #16]
   26fa8:	add	x8, x8, x21
   26fac:	sub	x19, x8, x9
   26fb0:	cmp	x19, x21
   26fb4:	b.ne	26fe8 <rpl_re_set_registers@@Base+0x8440>  // b.any
   26fb8:	ldr	x8, [x23, #40]
   26fbc:	ldr	x9, [x20]
   26fc0:	mov	w10, #0x18                  	// #24
   26fc4:	mov	x0, x24
   26fc8:	madd	x8, x9, x10, x8
   26fcc:	ldr	x8, [x8, #16]
   26fd0:	ldr	x27, [x8]
   26fd4:	mov	x1, x27
   26fd8:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   26fdc:	cbz	x0, 27020 <rpl_re_set_registers@@Base+0x8478>
   26fe0:	mov	w8, #0x4                   	// #4
   26fe4:	b	270dc <rpl_re_set_registers@@Base+0x8534>
   26fe8:	ldr	x9, [x23, #24]
   26fec:	ldr	x8, [x22, #184]
   26ff0:	ldr	x10, [x20]
   26ff4:	ldr	x8, [x8, x19, lsl #3]
   26ff8:	ldr	x27, [x9, x10, lsl #3]
   26ffc:	cbz	x8, 2707c <rpl_re_set_registers@@Base+0x84d4>
   27000:	add	x28, x8, #0x8
   27004:	mov	x0, x28
   27008:	mov	x1, x27
   2700c:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   27010:	cbz	x0, 270ec <rpl_re_set_registers@@Base+0x8544>
   27014:	mov	w8, #0x4                   	// #4
   27018:	cbnz	w8, 270dc <rpl_re_set_registers@@Base+0x8534>
   2701c:	b	27090 <rpl_re_set_registers@@Base+0x84e8>
   27020:	add	x0, sp, #0x10
   27024:	mov	x1, x27
   27028:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   2702c:	ldr	x2, [sp]
   27030:	ldr	w3, [sp, #12]
   27034:	mov	w27, w0
   27038:	stur	w0, [x29, #-4]
   2703c:	add	x1, sp, #0x10
   27040:	mov	x0, x23
   27044:	bl	26e00 <rpl_re_set_registers@@Base+0x8258>
   27048:	mov	w28, w0
   2704c:	add	x1, sp, #0x10
   27050:	mov	x0, x24
   27054:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   27058:	ldr	x8, [sp, #32]
   2705c:	mov	w19, w0
   27060:	mov	x0, x8
   27064:	bl	b1d0 <free@plt>
   27068:	orr	w8, w28, w27
   2706c:	orr	w8, w8, w19
   27070:	cbnz	w8, 27120 <rpl_re_set_registers@@Base+0x8578>
   27074:	mov	w8, #0x2                   	// #2
   27078:	b	270dc <rpl_re_set_registers@@Base+0x8534>
   2707c:	add	x0, sp, #0x10
   27080:	mov	x1, x27
   27084:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   27088:	stur	w0, [x29, #-4]
   2708c:	cbnz	w0, 2713c <rpl_re_set_registers@@Base+0x8594>
   27090:	sub	x0, x29, #0x4
   27094:	add	x2, sp, #0x10
   27098:	mov	x1, x23
   2709c:	bl	274ac <rpl_re_set_registers@@Base+0x8904>
   270a0:	ldr	x8, [x22, #184]
   270a4:	lsl	x19, x19, #3
   270a8:	str	x0, [x8, x19]
   270ac:	ldr	x0, [sp, #32]
   270b0:	bl	b1d0 <free@plt>
   270b4:	ldr	x8, [x22, #184]
   270b8:	ldur	w9, [x29, #-4]
   270bc:	ldr	x8, [x8, x19]
   270c0:	cmp	x8, #0x0
   270c4:	cset	w10, eq  // eq = none
   270c8:	cmp	w9, #0x0
   270cc:	cset	w11, ne  // ne = any
   270d0:	tst	w10, w11
   270d4:	and	w8, w10, w11
   270d8:	csel	w26, w9, w26, ne  // ne = any
   270dc:	cbz	w8, 26f88 <rpl_re_set_registers@@Base+0x83e0>
   270e0:	cmp	w8, #0x4
   270e4:	b.eq	26f88 <rpl_re_set_registers@@Base+0x83e0>  // b.none
   270e8:	b	2716c <rpl_re_set_registers@@Base+0x85c4>
   270ec:	add	x0, sp, #0x10
   270f0:	mov	x1, x28
   270f4:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   270f8:	mov	w28, w0
   270fc:	stur	w0, [x29, #-4]
   27100:	add	x0, sp, #0x10
   27104:	mov	x1, x27
   27108:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   2710c:	cbnz	w28, 27148 <rpl_re_set_registers@@Base+0x85a0>
   27110:	tbz	w0, #0, 27148 <rpl_re_set_registers@@Base+0x85a0>
   27114:	mov	w8, wzr
   27118:	cbnz	w8, 270dc <rpl_re_set_registers@@Base+0x8534>
   2711c:	b	27090 <rpl_re_set_registers@@Base+0x84e8>
   27120:	cmp	w28, #0x0
   27124:	csel	w8, w19, w28, eq  // eq = none
   27128:	cmp	w27, #0x0
   2712c:	csel	w26, w8, w27, eq  // eq = none
   27130:	stur	w26, [x29, #-4]
   27134:	mov	w8, #0x1                   	// #1
   27138:	b	270dc <rpl_re_set_registers@@Base+0x8534>
   2713c:	mov	w8, #0x1                   	// #1
   27140:	mov	w26, w0
   27144:	b	270dc <rpl_re_set_registers@@Base+0x8534>
   27148:	ldr	x0, [sp, #32]
   2714c:	bl	b1d0 <free@plt>
   27150:	cmp	w28, #0x0
   27154:	mov	w8, #0xc                   	// #12
   27158:	csel	w26, w8, w28, eq  // eq = none
   2715c:	mov	w8, #0x1                   	// #1
   27160:	stur	w26, [x29, #-4]
   27164:	cbnz	w8, 270dc <rpl_re_set_registers@@Base+0x8534>
   27168:	b	27090 <rpl_re_set_registers@@Base+0x84e8>
   2716c:	cmp	w8, #0x2
   27170:	b.eq	26f78 <rpl_re_set_registers@@Base+0x83d0>  // b.none
   27174:	b	2717c <rpl_re_set_registers@@Base+0x85d4>
   27178:	mov	w26, wzr
   2717c:	mov	w0, w26
   27180:	ldp	x20, x19, [sp, #128]
   27184:	ldp	x22, x21, [sp, #112]
   27188:	ldp	x24, x23, [sp, #96]
   2718c:	ldp	x26, x25, [sp, #80]
   27190:	ldp	x28, x27, [sp, #64]
   27194:	ldp	x29, x30, [sp, #48]
   27198:	add	sp, sp, #0x90
   2719c:	ret
   271a0:	sub	sp, sp, #0xa0
   271a4:	stp	x29, x30, [sp, #64]
   271a8:	stp	x28, x27, [sp, #80]
   271ac:	stp	x26, x25, [sp, #96]
   271b0:	stp	x24, x23, [sp, #112]
   271b4:	stp	x22, x21, [sp, #128]
   271b8:	stp	x20, x19, [sp, #144]
   271bc:	add	x29, sp, #0x40
   271c0:	ldr	x22, [x0, #152]
   271c4:	stur	wzr, [x29, #-4]
   271c8:	stp	xzr, xzr, [sp, #32]
   271cc:	str	xzr, [sp, #48]
   271d0:	ldr	x8, [x2, #8]
   271d4:	cmp	x8, #0x1
   271d8:	b.lt	27348 <rpl_re_set_registers@@Base+0x87a0>  // b.tstop
   271dc:	add	x8, sp, #0x20
   271e0:	add	x8, x8, #0x10
   271e4:	mov	x23, x3
   271e8:	mov	x20, x2
   271ec:	mov	x21, x0
   271f0:	mov	x27, x1
   271f4:	mov	x24, xzr
   271f8:	stp	x8, x1, [sp, #16]
   271fc:	ldr	x8, [x20, #16]
   27200:	ldr	x25, [x8, x24, lsl #3]
   27204:	ldr	x8, [x22]
   27208:	add	x8, x8, x25, lsl #4
   2720c:	ldrb	w8, [x8, #10]
   27210:	tbnz	w8, #4, 2721c <rpl_re_set_registers@@Base+0x8674>
   27214:	mov	w26, wzr
   27218:	b	272b8 <rpl_re_set_registers@@Base+0x8710>
   2721c:	mov	x0, x22
   27220:	mov	x1, x25
   27224:	mov	x2, x21
   27228:	mov	x3, x27
   2722c:	bl	276e0 <rpl_re_set_registers@@Base+0x8b38>
   27230:	mov	w26, w0
   27234:	cmp	w0, #0x2
   27238:	b.lt	272b8 <rpl_re_set_registers@@Base+0x8710>  // b.tstop
   2723c:	ldr	x8, [x21, #184]
   27240:	ldr	x9, [x22, #24]
   27244:	add	x19, x27, w26, sxtw
   27248:	ldr	x8, [x8, x19, lsl #3]
   2724c:	ldr	x28, [x9, x25, lsl #3]
   27250:	str	xzr, [sp, #40]
   27254:	cbz	x8, 2726c <rpl_re_set_registers@@Base+0x86c4>
   27258:	add	x1, x8, #0x8
   2725c:	add	x0, sp, #0x20
   27260:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   27264:	stur	w0, [x29, #-4]
   27268:	cbnz	w0, 27324 <rpl_re_set_registers@@Base+0x877c>
   2726c:	add	x0, sp, #0x20
   27270:	mov	x1, x28
   27274:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   27278:	tbz	w0, #0, 2731c <rpl_re_set_registers@@Base+0x8774>
   2727c:	sub	x0, x29, #0x4
   27280:	add	x2, sp, #0x20
   27284:	mov	x1, x22
   27288:	bl	274ac <rpl_re_set_registers@@Base+0x8904>
   2728c:	ldr	x8, [x21, #184]
   27290:	lsl	x9, x19, #3
   27294:	str	x0, [x8, x9]
   27298:	ldr	x8, [x21, #184]
   2729c:	ldr	x9, [x8, x9]
   272a0:	mov	w8, wzr
   272a4:	cbnz	x9, 272b0 <rpl_re_set_registers@@Base+0x8708>
   272a8:	ldur	w27, [x29, #-4]
   272ac:	cbnz	w27, 27328 <rpl_re_set_registers@@Base+0x8780>
   272b0:	ldr	x27, [sp, #24]
   272b4:	cbnz	w8, 272ec <rpl_re_set_registers@@Base+0x8744>
   272b8:	cbnz	w26, 272d4 <rpl_re_set_registers@@Base+0x872c>
   272bc:	ldr	x8, [x22]
   272c0:	mov	x0, x21
   272c4:	mov	x2, x27
   272c8:	add	x1, x8, x25, lsl #4
   272cc:	bl	279c0 <rpl_re_set_registers@@Base+0x8e18>
   272d0:	tbz	w0, #0, 272e8 <rpl_re_set_registers@@Base+0x8740>
   272d4:	ldr	x8, [x22, #24]
   272d8:	mov	x0, x23
   272dc:	ldr	x1, [x8, x25, lsl #3]
   272e0:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   272e4:	tbz	w0, #0, 27304 <rpl_re_set_registers@@Base+0x875c>
   272e8:	mov	w8, wzr
   272ec:	cbnz	w8, 27358 <rpl_re_set_registers@@Base+0x87b0>
   272f0:	ldr	x8, [x20, #8]
   272f4:	add	x24, x24, #0x1
   272f8:	cmp	x24, x8
   272fc:	b.lt	271fc <rpl_re_set_registers@@Base+0x8654>  // b.tstop
   27300:	b	27348 <rpl_re_set_registers@@Base+0x87a0>
   27304:	ldr	x0, [sp, #48]
   27308:	bl	b1d0 <free@plt>
   2730c:	mov	w8, #0x1                   	// #1
   27310:	mov	w9, #0xc                   	// #12
   27314:	str	w9, [sp, #12]
   27318:	b	272ec <rpl_re_set_registers@@Base+0x8744>
   2731c:	mov	w27, #0xc                   	// #12
   27320:	b	27328 <rpl_re_set_registers@@Base+0x8780>
   27324:	mov	w27, w0
   27328:	ldr	x8, [sp, #16]
   2732c:	ldr	x0, [x8]
   27330:	bl	b1d0 <free@plt>
   27334:	mov	w8, #0x1                   	// #1
   27338:	str	w27, [sp, #12]
   2733c:	ldr	x27, [sp, #24]
   27340:	cbnz	w8, 272ec <rpl_re_set_registers@@Base+0x8744>
   27344:	b	272b8 <rpl_re_set_registers@@Base+0x8710>
   27348:	ldr	x0, [sp, #48]
   2734c:	bl	b1d0 <free@plt>
   27350:	mov	w0, wzr
   27354:	b	2735c <rpl_re_set_registers@@Base+0x87b4>
   27358:	ldr	w0, [sp, #12]
   2735c:	ldp	x20, x19, [sp, #144]
   27360:	ldp	x22, x21, [sp, #128]
   27364:	ldp	x24, x23, [sp, #112]
   27368:	ldp	x26, x25, [sp, #96]
   2736c:	ldp	x28, x27, [sp, #80]
   27370:	ldp	x29, x30, [sp, #64]
   27374:	add	sp, sp, #0xa0
   27378:	ret
   2737c:	stp	x29, x30, [sp, #-80]!
   27380:	str	x25, [sp, #16]
   27384:	stp	x24, x23, [sp, #32]
   27388:	stp	x22, x21, [sp, #48]
   2738c:	stp	x20, x19, [sp, #64]
   27390:	mov	w20, w4
   27394:	mov	x21, x3
   27398:	mov	x23, x2
   2739c:	mov	x22, x1
   273a0:	mov	x24, x0
   273a4:	mov	w25, #0x18                  	// #24
   273a8:	mov	x29, sp
   273ac:	b	273b8 <rpl_re_set_registers@@Base+0x8810>
   273b0:	mov	w8, #0x2                   	// #2
   273b4:	cbnz	w8, 27484 <rpl_re_set_registers@@Base+0x88dc>
   273b8:	mov	x0, x22
   273bc:	mov	x1, x23
   273c0:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   273c4:	cbnz	x0, 2748c <rpl_re_set_registers@@Base+0x88e4>
   273c8:	ldr	x8, [x24]
   273cc:	add	x9, x8, x23, lsl #4
   273d0:	ldrb	w9, [x9, #8]
   273d4:	cmp	w9, w20
   273d8:	b.ne	27408 <rpl_re_set_registers@@Base+0x8860>  // b.any
   273dc:	lsl	x9, x23, #4
   273e0:	ldr	x8, [x8, x9]
   273e4:	cmp	x8, x21
   273e8:	b.ne	27408 <rpl_re_set_registers@@Base+0x8860>  // b.any
   273ec:	cmp	w20, #0x9
   273f0:	b.ne	273b0 <rpl_re_set_registers@@Base+0x8808>  // b.any
   273f4:	mov	x0, x22
   273f8:	mov	x1, x23
   273fc:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   27400:	tbnz	w0, #0, 273b0 <rpl_re_set_registers@@Base+0x8808>
   27404:	b	27478 <rpl_re_set_registers@@Base+0x88d0>
   27408:	mov	x0, x22
   2740c:	mov	x1, x23
   27410:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   27414:	tbz	w0, #0, 27478 <rpl_re_set_registers@@Base+0x88d0>
   27418:	ldr	x8, [x24, #40]
   2741c:	madd	x9, x23, x25, x8
   27420:	ldr	x9, [x9, #8]
   27424:	cbz	x9, 273b0 <rpl_re_set_registers@@Base+0x8808>
   27428:	cmp	x9, #0x2
   2742c:	b.ne	27460 <rpl_re_set_registers@@Base+0x88b8>  // b.any
   27430:	madd	x8, x23, x25, x8
   27434:	ldr	x8, [x8, #16]
   27438:	mov	x0, x24
   2743c:	mov	x1, x22
   27440:	mov	x3, x21
   27444:	ldr	x2, [x8, #8]
   27448:	mov	w4, w20
   2744c:	bl	2737c <rpl_re_set_registers@@Base+0x87d4>
   27450:	cmp	w0, #0x0
   27454:	cset	w8, ne  // ne = any
   27458:	csel	w19, w19, w0, eq  // eq = none
   2745c:	cbnz	w0, 273b4 <rpl_re_set_registers@@Base+0x880c>
   27460:	ldr	x8, [x24, #40]
   27464:	madd	x8, x23, x25, x8
   27468:	ldr	x8, [x8, #16]
   2746c:	ldr	x23, [x8]
   27470:	mov	w8, wzr
   27474:	b	273b4 <rpl_re_set_registers@@Base+0x880c>
   27478:	mov	w19, #0xc                   	// #12
   2747c:	mov	w8, #0x1                   	// #1
   27480:	b	273b4 <rpl_re_set_registers@@Base+0x880c>
   27484:	cmp	w8, #0x2
   27488:	b.ne	27490 <rpl_re_set_registers@@Base+0x88e8>  // b.any
   2748c:	mov	w19, wzr
   27490:	mov	w0, w19
   27494:	ldp	x20, x19, [sp, #64]
   27498:	ldp	x22, x21, [sp, #48]
   2749c:	ldp	x24, x23, [sp, #32]
   274a0:	ldr	x25, [sp, #16]
   274a4:	ldp	x29, x30, [sp], #80
   274a8:	ret
   274ac:	stp	x29, x30, [sp, #-96]!
   274b0:	stp	x26, x25, [sp, #32]
   274b4:	stp	x24, x23, [sp, #48]
   274b8:	stp	x22, x21, [sp, #64]
   274bc:	stp	x20, x19, [sp, #80]
   274c0:	ldr	x8, [x2, #8]
   274c4:	mov	x19, x0
   274c8:	str	x27, [sp, #16]
   274cc:	mov	x29, sp
   274d0:	cbz	x8, 275a0 <rpl_re_set_registers@@Base+0x89f8>
   274d4:	mov	x21, x1
   274d8:	mov	x0, x2
   274dc:	mov	w1, wzr
   274e0:	mov	x20, x2
   274e4:	bl	241cc <rpl_re_set_registers@@Base+0x5624>
   274e8:	ldr	x9, [x21, #136]
   274ec:	ldr	x8, [x21, #64]
   274f0:	mov	w10, #0x18                  	// #24
   274f4:	mov	x22, x0
   274f8:	and	x9, x9, x0
   274fc:	madd	x24, x9, x10, x8
   27500:	ldr	x10, [x24]
   27504:	cmp	x10, #0x1
   27508:	b.lt	27568 <rpl_re_set_registers@@Base+0x89c0>  // b.tstop
   2750c:	mov	w10, #0x18                  	// #24
   27510:	madd	x8, x9, x10, x8
   27514:	ldr	x26, [x8, #16]
   27518:	mov	x25, xzr
   2751c:	ldr	x27, [x26, x25, lsl #3]
   27520:	ldr	x8, [x27]
   27524:	cmp	x22, x8
   27528:	b.ne	27548 <rpl_re_set_registers@@Base+0x89a0>  // b.any
   2752c:	add	x0, x27, #0x8
   27530:	mov	x1, x20
   27534:	bl	241f8 <rpl_re_set_registers@@Base+0x5650>
   27538:	tst	w0, #0x1
   2753c:	and	w8, w0, #0x1
   27540:	csel	x23, x27, x23, ne  // ne = any
   27544:	b	2754c <rpl_re_set_registers@@Base+0x89a4>
   27548:	mov	w8, #0x4                   	// #4
   2754c:	orr	w8, w8, #0x4
   27550:	cmp	w8, #0x4
   27554:	b.ne	27580 <rpl_re_set_registers@@Base+0x89d8>  // b.any
   27558:	ldr	x8, [x24]
   2755c:	add	x25, x25, #0x1
   27560:	cmp	x25, x8
   27564:	b.lt	2751c <rpl_re_set_registers@@Base+0x8974>  // b.tstop
   27568:	mov	x0, x21
   2756c:	mov	x1, x20
   27570:	mov	x2, x22
   27574:	bl	275b8 <rpl_re_set_registers@@Base+0x8a10>
   27578:	mov	x23, x0
   2757c:	cbz	x0, 275ac <rpl_re_set_registers@@Base+0x8a04>
   27580:	mov	x0, x23
   27584:	ldp	x20, x19, [sp, #80]
   27588:	ldp	x22, x21, [sp, #64]
   2758c:	ldp	x24, x23, [sp, #48]
   27590:	ldp	x26, x25, [sp, #32]
   27594:	ldr	x27, [sp, #16]
   27598:	ldp	x29, x30, [sp], #96
   2759c:	ret
   275a0:	mov	x23, xzr
   275a4:	str	wzr, [x19]
   275a8:	b	27580 <rpl_re_set_registers@@Base+0x89d8>
   275ac:	mov	w8, #0xc                   	// #12
   275b0:	str	w8, [x19]
   275b4:	b	27580 <rpl_re_set_registers@@Base+0x89d8>
   275b8:	stp	x29, x30, [sp, #-64]!
   275bc:	stp	x22, x21, [sp, #32]
   275c0:	mov	x22, x1
   275c4:	mov	x21, x0
   275c8:	mov	w0, #0x70                  	// #112
   275cc:	mov	w1, #0x1                   	// #1
   275d0:	str	x23, [sp, #16]
   275d4:	stp	x20, x19, [sp, #48]
   275d8:	mov	x29, sp
   275dc:	mov	x20, x2
   275e0:	bl	ae10 <calloc@plt>
   275e4:	mov	x19, x0
   275e8:	cbz	x0, 276ac <rpl_re_set_registers@@Base+0x8b04>
   275ec:	add	x23, x19, #0x8
   275f0:	mov	x0, x23
   275f4:	mov	x1, x22
   275f8:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   275fc:	cbnz	w0, 276c4 <rpl_re_set_registers@@Base+0x8b1c>
   27600:	str	x23, [x19, #80]
   27604:	ldr	x8, [x22, #8]
   27608:	cmp	x8, #0x1
   2760c:	b.lt	27698 <rpl_re_set_registers@@Base+0x8af0>  // b.tstop
   27610:	ldr	x8, [x21]
   27614:	ldp	x10, x9, [x22, #8]
   27618:	mov	x11, xzr
   2761c:	b	27640 <rpl_re_set_registers@@Base+0x8a98>
   27620:	ldr	w12, [x12]
   27624:	tst	w12, #0x3ff00
   27628:	b.eq	27634 <rpl_re_set_registers@@Base+0x8a8c>  // b.none
   2762c:	orr	w12, w13, #0x80
   27630:	strb	w12, [x19, #104]
   27634:	add	x11, x11, #0x1
   27638:	cmp	x11, x10
   2763c:	b.ge	27698 <rpl_re_set_registers@@Base+0x8af0>  // b.tcont
   27640:	ldr	x12, [x9, x11, lsl #3]
   27644:	add	x12, x8, x12, lsl #4
   27648:	ldr	w13, [x12, #8]!
   2764c:	and	w14, w13, #0x3ffff
   27650:	cmp	w14, #0x1
   27654:	b.eq	27634 <rpl_re_set_registers@@Base+0x8a8c>  // b.none
   27658:	ldrb	w15, [x19, #104]
   2765c:	lsr	w16, w13, #15
   27660:	and	w14, w13, #0xff
   27664:	and	w13, w16, #0x20
   27668:	orr	w13, w15, w13
   2766c:	cmp	w14, #0xc
   27670:	strb	w13, [x19, #104]
   27674:	b.eq	2762c <rpl_re_set_registers@@Base+0x8a84>  // b.none
   27678:	cmp	w14, #0x4
   2767c:	b.eq	27690 <rpl_re_set_registers@@Base+0x8ae8>  // b.none
   27680:	cmp	w14, #0x2
   27684:	b.ne	27620 <rpl_re_set_registers@@Base+0x8a78>  // b.any
   27688:	orr	w12, w13, #0x10
   2768c:	b	27630 <rpl_re_set_registers@@Base+0x8a88>
   27690:	orr	w12, w13, #0x40
   27694:	b	27630 <rpl_re_set_registers@@Base+0x8a88>
   27698:	mov	x0, x21
   2769c:	mov	x1, x19
   276a0:	mov	x2, x20
   276a4:	bl	24478 <rpl_re_set_registers@@Base+0x58d0>
   276a8:	cbnz	w0, 276d0 <rpl_re_set_registers@@Base+0x8b28>
   276ac:	mov	x0, x19
   276b0:	ldp	x20, x19, [sp, #48]
   276b4:	ldp	x22, x21, [sp, #32]
   276b8:	ldr	x23, [sp, #16]
   276bc:	ldp	x29, x30, [sp], #64
   276c0:	ret
   276c4:	mov	x0, x19
   276c8:	bl	b1d0 <free@plt>
   276cc:	b	276d8 <rpl_re_set_registers@@Base+0x8b30>
   276d0:	mov	x0, x19
   276d4:	bl	1ec20 <rpl_re_set_registers@@Base+0x78>
   276d8:	mov	x19, xzr
   276dc:	b	276ac <rpl_re_set_registers@@Base+0x8b04>
   276e0:	stp	x29, x30, [sp, #-80]!
   276e4:	stp	x24, x23, [sp, #32]
   276e8:	stp	x22, x21, [sp, #48]
   276ec:	stp	x20, x19, [sp, #64]
   276f0:	ldr	x24, [x0]
   276f4:	str	x25, [sp, #16]
   276f8:	mov	x20, x3
   276fc:	mov	x22, x2
   27700:	add	x8, x24, x1, lsl #4
   27704:	ldrb	w25, [x8, #8]
   27708:	mov	x29, sp
   2770c:	cmp	w25, #0x7
   27710:	b.eq	278b4 <rpl_re_set_registers@@Base+0x8d0c>  // b.none
   27714:	mov	x21, x0
   27718:	mov	x23, x1
   2771c:	mov	x0, x22
   27720:	mov	x1, x20
   27724:	bl	228ac <rpl_re_set_registers@@Base+0x3d04>
   27728:	cmp	w25, #0x5
   2772c:	mov	w19, w0
   27730:	b.ne	2776c <rpl_re_set_registers@@Base+0x8bc4>  // b.any
   27734:	cmp	w19, #0x2
   27738:	b.lt	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.tstop
   2773c:	ldr	x8, [x21, #216]
   27740:	tbnz	w8, #6, 27754 <rpl_re_set_registers@@Base+0x8bac>
   27744:	ldr	x9, [x22, #8]
   27748:	ldrb	w9, [x9, x20]
   2774c:	cmp	w9, #0xa
   27750:	b.eq	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.none
   27754:	tbz	w8, #7, 27764 <rpl_re_set_registers@@Base+0x8bbc>
   27758:	ldr	x8, [x22, #8]
   2775c:	ldrb	w8, [x8, x20]
   27760:	cbz	w8, 27880 <rpl_re_set_registers@@Base+0x8cd8>
   27764:	mov	w21, w19
   27768:	b	27884 <rpl_re_set_registers@@Base+0x8cdc>
   2776c:	cmp	w25, #0x6
   27770:	mov	w21, wzr
   27774:	b.ne	27884 <rpl_re_set_registers@@Base+0x8cdc>  // b.any
   27778:	cmp	w19, #0x2
   2777c:	b.lt	27884 <rpl_re_set_registers@@Base+0x8cdc>  // b.tstop
   27780:	lsl	x8, x23, #4
   27784:	ldr	x23, [x24, x8]
   27788:	ldr	x8, [x23, #64]
   2778c:	cbnz	x8, 277a0 <rpl_re_set_registers@@Base+0x8bf8>
   27790:	ldr	x8, [x23, #72]
   27794:	cbnz	x8, 277a0 <rpl_re_set_registers@@Base+0x8bf8>
   27798:	ldr	x8, [x23, #40]
   2779c:	cbz	x8, 278ac <rpl_re_set_registers@@Base+0x8d04>
   277a0:	mov	x0, x22
   277a4:	mov	x1, x20
   277a8:	bl	207c0 <rpl_re_set_registers@@Base+0x1c18>
   277ac:	mov	w20, w0
   277b0:	ldr	x8, [x23, #40]
   277b4:	cmp	x8, #0x1
   277b8:	b.lt	277e0 <rpl_re_set_registers@@Base+0x8c38>  // b.tstop
   277bc:	ldr	x8, [x23]
   277c0:	mov	x9, xzr
   277c4:	ldr	w10, [x8, x9, lsl #2]
   277c8:	cmp	w20, w10
   277cc:	b.eq	2786c <rpl_re_set_registers@@Base+0x8cc4>  // b.none
   277d0:	ldr	x10, [x23, #40]
   277d4:	add	x9, x9, #0x1
   277d8:	cmp	x9, x10
   277dc:	b.lt	277c4 <rpl_re_set_registers@@Base+0x8c1c>  // b.tstop
   277e0:	ldr	x8, [x23, #72]
   277e4:	cmp	x8, #0x1
   277e8:	b.lt	27824 <rpl_re_set_registers@@Base+0x8c7c>  // b.tstop
   277ec:	mov	w21, wzr
   277f0:	mov	x22, xzr
   277f4:	ldr	x8, [x23, #24]
   277f8:	mov	w0, w20
   277fc:	ldr	x1, [x8, x22, lsl #3]
   27800:	bl	abb0 <iswctype@plt>
   27804:	cmp	w0, #0x0
   27808:	csel	w21, w21, w19, eq  // eq = none
   2780c:	cbnz	w0, 27870 <rpl_re_set_registers@@Base+0x8cc8>
   27810:	ldr	x8, [x23, #72]
   27814:	add	x22, x22, #0x1
   27818:	cmp	x22, x8
   2781c:	b.lt	277f4 <rpl_re_set_registers@@Base+0x8c4c>  // b.tstop
   27820:	b	27828 <rpl_re_set_registers@@Base+0x8c80>
   27824:	mov	w21, wzr
   27828:	ldr	x8, [x23, #64]
   2782c:	cmp	x8, #0x1
   27830:	b.lt	27870 <rpl_re_set_registers@@Base+0x8cc8>  // b.tstop
   27834:	ldr	x8, [x23, #8]
   27838:	mov	x9, xzr
   2783c:	b	27850 <rpl_re_set_registers@@Base+0x8ca8>
   27840:	ldr	x10, [x23, #64]
   27844:	add	x9, x9, #0x1
   27848:	cmp	x9, x10
   2784c:	b.ge	27870 <rpl_re_set_registers@@Base+0x8cc8>  // b.tcont
   27850:	ldr	w10, [x8, x9, lsl #2]
   27854:	cmp	w10, w20
   27858:	b.hi	27840 <rpl_re_set_registers@@Base+0x8c98>  // b.pmore
   2785c:	ldr	x10, [x23, #16]
   27860:	ldr	w10, [x10, x9, lsl #2]
   27864:	cmp	w20, w10
   27868:	b.hi	27840 <rpl_re_set_registers@@Base+0x8c98>  // b.pmore
   2786c:	mov	w21, w19
   27870:	ldrb	w8, [x23, #32]
   27874:	tbz	w8, #0, 27884 <rpl_re_set_registers@@Base+0x8cdc>
   27878:	cmp	w21, #0x0
   2787c:	b.le	278a0 <rpl_re_set_registers@@Base+0x8cf8>
   27880:	mov	w21, wzr
   27884:	mov	w0, w21
   27888:	ldp	x20, x19, [sp, #64]
   2788c:	ldp	x22, x21, [sp, #48]
   27890:	ldp	x24, x23, [sp, #32]
   27894:	ldr	x25, [sp, #16]
   27898:	ldp	x29, x30, [sp], #80
   2789c:	ret
   278a0:	cmp	w19, #0x1
   278a4:	csinc	w21, w19, wzr, gt
   278a8:	b	27884 <rpl_re_set_registers@@Base+0x8cdc>
   278ac:	mov	w20, wzr
   278b0:	b	277b0 <rpl_re_set_registers@@Base+0x8c08>
   278b4:	ldr	x8, [x22, #8]
   278b8:	ldrb	w10, [x8, x20]
   278bc:	cmp	w10, #0xc2
   278c0:	b.cc	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.lo, b.ul, b.last
   278c4:	ldr	x9, [x22, #88]
   278c8:	add	x11, x20, #0x2
   278cc:	cmp	x11, x9
   278d0:	b.gt	27880 <rpl_re_set_registers@@Base+0x8cd8>
   278d4:	add	x11, x20, x8
   278d8:	ldrb	w11, [x11, #1]
   278dc:	cmp	w10, #0xdf
   278e0:	b.hi	27900 <rpl_re_set_registers@@Base+0x8d58>  // b.pmore
   278e4:	sxtb	w8, w11
   278e8:	cmp	w11, #0xbf
   278ec:	mov	w9, #0xffffffff            	// #-1
   278f0:	ccmp	w8, w9, #0x0, ls  // ls = plast
   278f4:	mov	w8, #0x2                   	// #2
   278f8:	csel	w21, wzr, w8, gt
   278fc:	b	27884 <rpl_re_set_registers@@Base+0x8cdc>
   27900:	cmp	w10, #0xef
   27904:	b.hi	27920 <rpl_re_set_registers@@Base+0x8d78>  // b.pmore
   27908:	cmp	w10, #0xe0
   2790c:	mov	w10, #0x3                   	// #3
   27910:	b.ne	2797c <rpl_re_set_registers@@Base+0x8dd4>  // b.any
   27914:	cmp	w11, #0xa0
   27918:	b.cc	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.lo, b.ul, b.last
   2791c:	b	2797c <rpl_re_set_registers@@Base+0x8dd4>
   27920:	cmp	w10, #0xf7
   27924:	b.hi	27940 <rpl_re_set_registers@@Base+0x8d98>  // b.pmore
   27928:	cmp	w10, #0xf0
   2792c:	mov	w10, #0x4                   	// #4
   27930:	b.ne	2797c <rpl_re_set_registers@@Base+0x8dd4>  // b.any
   27934:	cmp	w11, #0x90
   27938:	b.cc	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.lo, b.ul, b.last
   2793c:	b	2797c <rpl_re_set_registers@@Base+0x8dd4>
   27940:	cmp	w10, #0xfb
   27944:	b.hi	27960 <rpl_re_set_registers@@Base+0x8db8>  // b.pmore
   27948:	cmp	w10, #0xf8
   2794c:	mov	w10, #0x5                   	// #5
   27950:	b.ne	2797c <rpl_re_set_registers@@Base+0x8dd4>  // b.any
   27954:	cmp	w11, #0x88
   27958:	b.cc	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.lo, b.ul, b.last
   2795c:	b	2797c <rpl_re_set_registers@@Base+0x8dd4>
   27960:	cmp	w10, #0xfd
   27964:	b.hi	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.pmore
   27968:	cmp	w10, #0xfc
   2796c:	mov	w10, #0x6                   	// #6
   27970:	b.ne	2797c <rpl_re_set_registers@@Base+0x8dd4>  // b.any
   27974:	cmp	w11, #0x84
   27978:	b.cc	27880 <rpl_re_set_registers@@Base+0x8cd8>  // b.lo, b.ul, b.last
   2797c:	add	x11, x10, x20
   27980:	cmp	x11, x9
   27984:	b.gt	27880 <rpl_re_set_registers@@Base+0x8cd8>
   27988:	add	x8, x20, x8
   2798c:	sub	x9, x10, #0x1
   27990:	add	x8, x8, #0x1
   27994:	ldrb	w11, [x8]
   27998:	mov	w21, wzr
   2799c:	sxtb	w12, w11
   279a0:	tbz	w12, #31, 27884 <rpl_re_set_registers@@Base+0x8cdc>
   279a4:	cmp	w11, #0xbf
   279a8:	b.hi	27884 <rpl_re_set_registers@@Base+0x8cdc>  // b.pmore
   279ac:	subs	x9, x9, #0x1
   279b0:	add	x8, x8, #0x1
   279b4:	b.ne	27994 <rpl_re_set_registers@@Base+0x8dec>  // b.any
   279b8:	mov	w21, w10
   279bc:	b	27884 <rpl_re_set_registers@@Base+0x8cdc>
   279c0:	stp	x29, x30, [sp, #-48]!
   279c4:	stp	x20, x19, [sp, #32]
   279c8:	str	x21, [sp, #16]
   279cc:	ldr	w21, [x1, #8]
   279d0:	mov	x20, x0
   279d4:	mov	w0, wzr
   279d8:	mov	x29, sp
   279dc:	and	w9, w21, #0xff
   279e0:	sub	w9, w9, #0x1
   279e4:	cmp	w9, #0x6
   279e8:	b.hi	27aa4 <rpl_re_set_registers@@Base+0x8efc>  // b.pmore
   279ec:	ldr	x10, [x20, #8]
   279f0:	mov	x8, x1
   279f4:	mov	x19, x2
   279f8:	ldrb	w1, [x10, x2]
   279fc:	adrp	x10, 2d000 <vasnprintf@@Base+0x2ec4>
   27a00:	add	x10, x10, #0x84a
   27a04:	adr	x11, 27a14 <rpl_re_set_registers@@Base+0x8e6c>
   27a08:	ldrb	w12, [x10, x9]
   27a0c:	add	x11, x11, x12, lsl #2
   27a10:	br	x11
   27a14:	ldrb	w8, [x8]
   27a18:	cmp	w8, w1
   27a1c:	b.eq	27a64 <rpl_re_set_registers@@Base+0x8ebc>  // b.none
   27a20:	b	27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a24:	ldr	x0, [x8]
   27a28:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   27a2c:	tbz	w0, #0, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a30:	b	27a64 <rpl_re_set_registers@@Base+0x8ebc>
   27a34:	sxtb	w8, w1
   27a38:	tbnz	w8, #31, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a3c:	cbz	w1, 27a58 <rpl_re_set_registers@@Base+0x8eb0>
   27a40:	cmp	w1, #0xa
   27a44:	b.ne	27a64 <rpl_re_set_registers@@Base+0x8ebc>  // b.any
   27a48:	ldr	x8, [x20, #152]
   27a4c:	ldrb	w8, [x8, #216]
   27a50:	tbz	w8, #6, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a54:	cbnz	w1, 27a64 <rpl_re_set_registers@@Base+0x8ebc>
   27a58:	ldr	x8, [x20, #152]
   27a5c:	ldrb	w8, [x8, #216]
   27a60:	tbnz	w8, #7, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a64:	tst	w21, #0x3ff00
   27a68:	b.eq	27aa0 <rpl_re_set_registers@@Base+0x8ef8>  // b.none
   27a6c:	ldr	w2, [x20, #160]
   27a70:	mov	x0, x20
   27a74:	mov	x1, x19
   27a78:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   27a7c:	and	w8, w0, #0x1
   27a80:	tbz	w21, #10, 27a88 <rpl_re_set_registers@@Base+0x8ee0>
   27a84:	cbz	w8, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a88:	tbz	w21, #11, 27a90 <rpl_re_set_registers@@Base+0x8ee8>
   27a8c:	cbnz	w8, 27a98 <rpl_re_set_registers@@Base+0x8ef0>
   27a90:	tbz	w21, #13, 27ab4 <rpl_re_set_registers@@Base+0x8f0c>
   27a94:	tbnz	w0, #1, 27ab4 <rpl_re_set_registers@@Base+0x8f0c>
   27a98:	mov	w0, wzr
   27a9c:	b	27aa4 <rpl_re_set_registers@@Base+0x8efc>
   27aa0:	mov	w0, #0x1                   	// #1
   27aa4:	ldp	x20, x19, [sp, #32]
   27aa8:	ldr	x21, [sp, #16]
   27aac:	ldp	x29, x30, [sp], #48
   27ab0:	ret
   27ab4:	tst	w21, #0x8000
   27ab8:	cset	w8, eq  // eq = none
   27abc:	and	w9, w0, #0x8
   27ac0:	orr	w0, w8, w9, lsr #3
   27ac4:	b	27aa4 <rpl_re_set_registers@@Base+0x8efc>
   27ac8:	sub	sp, sp, #0x70
   27acc:	stp	x29, x30, [sp, #32]
   27ad0:	stp	x26, x25, [sp, #48]
   27ad4:	stp	x24, x23, [sp, #64]
   27ad8:	stp	x22, x21, [sp, #80]
   27adc:	stp	x20, x19, [sp, #96]
   27ae0:	ldr	x8, [x1, #16]
   27ae4:	add	x29, sp, #0x20
   27ae8:	cmp	x8, #0x1
   27aec:	b.lt	27c70 <rpl_re_set_registers@@Base+0x90c8>  // b.tstop
   27af0:	ldr	x21, [x0, #152]
   27af4:	mov	x19, x1
   27af8:	mov	x20, x0
   27afc:	mov	x25, xzr
   27b00:	mov	w26, #0x18                  	// #24
   27b04:	ldr	x8, [x19, #24]
   27b08:	ldr	x23, [x8, x25, lsl #3]
   27b0c:	ldr	x8, [x21]
   27b10:	add	x8, x8, x23, lsl #4
   27b14:	ldr	w24, [x8, #8]
   27b18:	tbz	w24, #20, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b1c:	tst	w24, #0x3ff00
   27b20:	b.eq	27b58 <rpl_re_set_registers@@Base+0x8fb0>  // b.none
   27b24:	ldr	x1, [x20, #72]
   27b28:	ldr	w2, [x20, #160]
   27b2c:	mov	x0, x20
   27b30:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   27b34:	and	w8, w0, #0x1
   27b38:	tbz	w24, #10, 27b40 <rpl_re_set_registers@@Base+0x8f98>
   27b3c:	cbz	w8, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b40:	tbz	w24, #11, 27b48 <rpl_re_set_registers@@Base+0x8fa0>
   27b44:	cbnz	w8, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b48:	tbz	w24, #13, 27b50 <rpl_re_set_registers@@Base+0x8fa8>
   27b4c:	tbz	w0, #1, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b50:	tbz	w24, #15, 27b58 <rpl_re_set_registers@@Base+0x8fb0>
   27b54:	tbz	w0, #3, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b58:	ldr	x3, [x20, #72]
   27b5c:	mov	x0, x21
   27b60:	mov	x1, x23
   27b64:	mov	x2, x20
   27b68:	bl	276e0 <rpl_re_set_registers@@Base+0x8b38>
   27b6c:	cbz	w0, 27bd8 <rpl_re_set_registers@@Base+0x9030>
   27b70:	ldr	x8, [x20, #72]
   27b74:	ldr	w9, [x20, #224]
   27b78:	add	x24, x8, w0, sxtw
   27b7c:	cmp	w9, w0
   27b80:	csel	w8, w0, w9, lt  // lt = tstop
   27b84:	mov	x0, x20
   27b88:	mov	x1, x24
   27b8c:	str	w8, [x20, #224]
   27b90:	bl	26788 <rpl_re_set_registers@@Base+0x7be0>
   27b94:	stur	w0, [x29, #-4]
   27b98:	cbnz	w0, 27bcc <rpl_re_set_registers@@Base+0x9024>
   27b9c:	ldr	x8, [x21, #24]
   27ba0:	ldr	x9, [x20, #184]
   27ba4:	ldr	x10, [x21, #48]
   27ba8:	ldr	x8, [x8, x23, lsl #3]
   27bac:	ldr	x23, [x9, x24, lsl #3]
   27bb0:	madd	x2, x8, x26, x10
   27bb4:	cbz	x23, 27bfc <rpl_re_set_registers@@Base+0x9054>
   27bb8:	ldr	x1, [x23, #80]
   27bbc:	mov	x0, sp
   27bc0:	bl	26504 <rpl_re_set_registers@@Base+0x795c>
   27bc4:	stur	w0, [x29, #-4]
   27bc8:	cbz	w0, 27c0c <rpl_re_set_registers@@Base+0x9064>
   27bcc:	mov	w8, #0x1                   	// #1
   27bd0:	mov	w22, w0
   27bd4:	b	27bdc <rpl_re_set_registers@@Base+0x9034>
   27bd8:	mov	w8, #0x4                   	// #4
   27bdc:	orr	w8, w8, #0x4
   27be0:	cmp	w8, #0x4
   27be4:	b.ne	27c74 <rpl_re_set_registers@@Base+0x90cc>  // b.any
   27be8:	ldr	x8, [x19, #16]
   27bec:	add	x25, x25, #0x1
   27bf0:	cmp	x25, x8
   27bf4:	b.lt	27b04 <rpl_re_set_registers@@Base+0x8f5c>  // b.tstop
   27bf8:	b	27c70 <rpl_re_set_registers@@Base+0x90c8>
   27bfc:	ldr	x8, [x2, #16]
   27c00:	ldr	q0, [x2]
   27c04:	str	x8, [sp, #16]
   27c08:	str	q0, [sp]
   27c0c:	ldr	w2, [x20, #160]
   27c10:	sub	x1, x24, #0x1
   27c14:	mov	x0, x20
   27c18:	bl	257a4 <rpl_re_set_registers@@Base+0x6bfc>
   27c1c:	mov	w3, w0
   27c20:	sub	x0, x29, #0x4
   27c24:	mov	x2, sp
   27c28:	mov	x1, x21
   27c2c:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   27c30:	ldr	x8, [x20, #184]
   27c34:	str	x0, [x8, x24, lsl #3]
   27c38:	cbz	x23, 27c44 <rpl_re_set_registers@@Base+0x909c>
   27c3c:	ldr	x0, [sp, #16]
   27c40:	bl	b1d0 <free@plt>
   27c44:	ldr	x8, [x20, #184]
   27c48:	ldur	w9, [x29, #-4]
   27c4c:	ldr	x8, [x8, x24, lsl #3]
   27c50:	cmp	x8, #0x0
   27c54:	cset	w10, eq  // eq = none
   27c58:	cmp	w9, #0x0
   27c5c:	cset	w11, ne  // ne = any
   27c60:	tst	w10, w11
   27c64:	and	w8, w10, w11
   27c68:	csel	w22, w9, w22, ne  // ne = any
   27c6c:	b	27bdc <rpl_re_set_registers@@Base+0x9034>
   27c70:	mov	w22, wzr
   27c74:	mov	w0, w22
   27c78:	ldp	x20, x19, [sp, #96]
   27c7c:	ldp	x22, x21, [sp, #80]
   27c80:	ldp	x24, x23, [sp, #64]
   27c84:	ldp	x26, x25, [sp, #48]
   27c88:	ldp	x29, x30, [sp, #32]
   27c8c:	add	sp, sp, #0x70
   27c90:	ret
   27c94:	stp	x29, x30, [sp, #-96]!
   27c98:	stp	x28, x27, [sp, #16]
   27c9c:	stp	x26, x25, [sp, #32]
   27ca0:	stp	x24, x23, [sp, #48]
   27ca4:	stp	x22, x21, [sp, #64]
   27ca8:	stp	x20, x19, [sp, #80]
   27cac:	mov	x29, sp
   27cb0:	sub	sp, sp, #0x70
   27cb4:	mov	x23, x0
   27cb8:	mov	w0, #0x3800                	// #14336
   27cbc:	mov	x26, x1
   27cc0:	bl	abc0 <malloc@plt>
   27cc4:	cbz	x0, 2816c <rpl_re_set_registers@@Base+0x95c4>
   27cc8:	mov	w8, #0x1800                	// #6144
   27ccc:	mov	x25, x0
   27cd0:	add	x21, x0, x8
   27cd4:	mov	x19, x26
   27cd8:	mov	x0, x23
   27cdc:	mov	x1, x26
   27ce0:	mov	x2, x25
   27ce4:	mov	x3, x21
   27ce8:	str	xzr, [x19, #88]!
   27cec:	str	xzr, [x26, #96]
   27cf0:	bl	281b0 <rpl_re_set_registers@@Base+0x9608>
   27cf4:	mov	x20, x0
   27cf8:	cmp	x0, #0x0
   27cfc:	b.le	28028 <rpl_re_set_registers@@Base+0x9480>
   27d00:	add	x1, x20, #0x1
   27d04:	sub	x0, x29, #0x20
   27d08:	bl	23980 <rpl_re_set_registers@@Base+0x4dd8>
   27d0c:	mov	x8, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   27d10:	movk	x8, #0xa855
   27d14:	movk	x8, #0xaaa, lsl #48
   27d18:	mov	x22, xzr
   27d1c:	mov	w24, wzr
   27d20:	cmp	x20, x8
   27d24:	stur	w0, [x29, #-4]
   27d28:	b.hi	27f30 <rpl_re_set_registers@@Base+0x9388>  // b.pmore
   27d2c:	cbnz	w0, 27f30 <rpl_re_set_registers@@Base+0x9388>
   27d30:	add	x8, x20, x20, lsl #1
   27d34:	lsl	x0, x8, #3
   27d38:	mov	w8, #0x3800                	// #14336
   27d3c:	add	x8, x0, x8
   27d40:	cmp	x8, #0xfbf
   27d44:	b.hi	27d64 <rpl_re_set_registers@@Base+0x91bc>  // b.pmore
   27d48:	add	x9, x0, #0xf
   27d4c:	mov	x8, sp
   27d50:	and	x9, x9, #0xfffffffffffffff0
   27d54:	sub	x22, x8, x9
   27d58:	mov	sp, x22
   27d5c:	mov	w8, wzr
   27d60:	b	27d74 <rpl_re_set_registers@@Base+0x91cc>
   27d64:	bl	abc0 <malloc@plt>
   27d68:	mov	x22, x0
   27d6c:	cbz	x0, 2818c <rpl_re_set_registers@@Base+0x95e4>
   27d70:	mov	w8, #0x1                   	// #1
   27d74:	stur	w8, [x29, #-88]
   27d78:	lsl	x8, x20, #3
   27d7c:	add	x9, x22, x8
   27d80:	sub	x0, x29, #0x40
   27d84:	stp	x26, x19, [x29, #-104]
   27d88:	stur	x9, [x29, #-72]
   27d8c:	add	x27, x9, x8
   27d90:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   27d94:	cmp	x20, #0x1
   27d98:	b.lt	27f70 <rpl_re_set_registers@@Base+0x93c8>  // b.tstop
   27d9c:	mov	x26, xzr
   27da0:	stur	wzr, [x29, #-84]
   27da4:	mov	w24, #0x18                  	// #24
   27da8:	stur	x21, [x29, #-80]
   27dac:	stur	xzr, [x29, #-24]
   27db0:	madd	x28, x26, x24, x25
   27db4:	ldr	x8, [x28, #8]!
   27db8:	cmp	x8, #0x1
   27dbc:	b.lt	27e4c <rpl_re_set_registers@@Base+0x92a4>  // b.tstop
   27dc0:	madd	x8, x26, x24, x25
   27dc4:	ldr	x19, [x8, #16]
   27dc8:	ldur	w0, [x29, #-4]
   27dcc:	mov	x21, x27
   27dd0:	mov	x27, x22
   27dd4:	mov	x22, x25
   27dd8:	mov	x25, xzr
   27ddc:	b	27df0 <rpl_re_set_registers@@Base+0x9248>
   27de0:	ldr	x8, [x28]
   27de4:	add	x25, x25, #0x1
   27de8:	cmp	x25, x8
   27dec:	b.ge	27e38 <rpl_re_set_registers@@Base+0x9290>  // b.tcont
   27df0:	ldr	x8, [x23, #24]
   27df4:	ldr	x9, [x19, x25, lsl #3]
   27df8:	ldr	x8, [x8, x9, lsl #3]
   27dfc:	cmn	x8, #0x1
   27e00:	b.eq	27de0 <rpl_re_set_registers@@Base+0x9238>  // b.none
   27e04:	ldr	x9, [x23, #48]
   27e08:	sub	x0, x29, #0x20
   27e0c:	madd	x1, x8, x24, x9
   27e10:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   27e14:	cbz	w0, 27de0 <rpl_re_set_registers@@Base+0x9238>
   27e18:	mov	x25, x22
   27e1c:	mov	x22, x27
   27e20:	mov	x27, x21
   27e24:	ldur	x21, [x29, #-80]
   27e28:	mov	w8, wzr
   27e2c:	stur	w0, [x29, #-4]
   27e30:	tbnz	w8, #0, 27f14 <rpl_re_set_registers@@Base+0x936c>
   27e34:	b	27f2c <rpl_re_set_registers@@Base+0x9384>
   27e38:	mov	x25, x22
   27e3c:	mov	x22, x27
   27e40:	mov	x27, x21
   27e44:	ldur	x21, [x29, #-80]
   27e48:	stur	w0, [x29, #-4]
   27e4c:	sub	x0, x29, #0x4
   27e50:	sub	x2, x29, #0x20
   27e54:	mov	x1, x23
   27e58:	mov	w3, wzr
   27e5c:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   27e60:	str	x0, [x22, x26, lsl #3]
   27e64:	cbnz	x0, 27e70 <rpl_re_set_registers@@Base+0x92c8>
   27e68:	ldur	w8, [x29, #-4]
   27e6c:	cbnz	w8, 27f24 <rpl_re_set_registers@@Base+0x937c>
   27e70:	ldrsb	w8, [x0, #104]
   27e74:	tbnz	w8, #31, 27e90 <rpl_re_set_registers@@Base+0x92e8>
   27e78:	ldur	x9, [x29, #-72]
   27e7c:	lsl	x8, x26, #3
   27e80:	str	x0, [x9, x8]
   27e84:	ldr	x9, [x22, x8]
   27e88:	str	x9, [x27, x8]
   27e8c:	b	27f00 <rpl_re_set_registers@@Base+0x9358>
   27e90:	sub	x0, x29, #0x4
   27e94:	sub	x2, x29, #0x20
   27e98:	mov	w3, #0x1                   	// #1
   27e9c:	mov	x1, x23
   27ea0:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   27ea4:	ldur	x8, [x29, #-72]
   27ea8:	str	x0, [x8, x26, lsl #3]
   27eac:	cbnz	x0, 27eb8 <rpl_re_set_registers@@Base+0x9310>
   27eb0:	ldur	w8, [x29, #-4]
   27eb4:	cbnz	w8, 27f24 <rpl_re_set_registers@@Base+0x937c>
   27eb8:	ldr	x8, [x22, x26, lsl #3]
   27ebc:	cmp	x8, x0
   27ec0:	b.eq	27edc <rpl_re_set_registers@@Base+0x9334>  // b.none
   27ec4:	ldr	w8, [x23, #180]
   27ec8:	ldur	w9, [x29, #-84]
   27ecc:	cmp	w8, #0x1
   27ed0:	cset	w8, gt
   27ed4:	orr	w9, w9, w8
   27ed8:	stur	w9, [x29, #-84]
   27edc:	sub	x0, x29, #0x4
   27ee0:	sub	x2, x29, #0x20
   27ee4:	mov	w3, #0x2                   	// #2
   27ee8:	mov	x1, x23
   27eec:	bl	240b0 <rpl_re_set_registers@@Base+0x5508>
   27ef0:	str	x0, [x27, x26, lsl #3]
   27ef4:	cbnz	x0, 27f00 <rpl_re_set_registers@@Base+0x9358>
   27ef8:	ldur	w8, [x29, #-4]
   27efc:	cbnz	w8, 27f24 <rpl_re_set_registers@@Base+0x937c>
   27f00:	add	x1, x21, x26, lsl #5
   27f04:	sub	x0, x29, #0x40
   27f08:	bl	28720 <rpl_re_set_registers@@Base+0x9b78>
   27f0c:	mov	w8, #0x1                   	// #1
   27f10:	tbz	w8, #0, 27f2c <rpl_re_set_registers@@Base+0x9384>
   27f14:	add	x26, x26, #0x1
   27f18:	cmp	x26, x20
   27f1c:	b.ne	27dac <rpl_re_set_registers@@Base+0x9204>  // b.any
   27f20:	b	27f74 <rpl_re_set_registers@@Base+0x93cc>
   27f24:	mov	w8, wzr
   27f28:	tbnz	w8, #0, 27f14 <rpl_re_set_registers@@Base+0x936c>
   27f2c:	ldur	w24, [x29, #-88]
   27f30:	cbz	w24, 27f3c <rpl_re_set_registers@@Base+0x9394>
   27f34:	mov	x0, x22
   27f38:	bl	b1d0 <free@plt>
   27f3c:	ldur	x0, [x29, #-16]
   27f40:	bl	b1d0 <free@plt>
   27f44:	cmp	x20, #0x1
   27f48:	b.lt	27f60 <rpl_re_set_registers@@Base+0x93b8>  // b.tstop
   27f4c:	add	x19, x25, #0x10
   27f50:	ldr	x0, [x19], #24
   27f54:	bl	b1d0 <free@plt>
   27f58:	subs	x20, x20, #0x1
   27f5c:	b.ne	27f50 <rpl_re_set_registers@@Base+0x93a8>  // b.any
   27f60:	mov	x0, x25
   27f64:	bl	b1d0 <free@plt>
   27f68:	mov	w0, wzr
   27f6c:	b	2816c <rpl_re_set_registers@@Base+0x95c4>
   27f70:	stur	wzr, [x29, #-84]
   27f74:	ldur	w26, [x29, #-84]
   27f78:	tbnz	w26, #0, 2803c <rpl_re_set_registers@@Base+0x9494>
   27f7c:	mov	w0, #0x8                   	// #8
   27f80:	mov	w1, #0x100                 	// #256
   27f84:	bl	ae10 <calloc@plt>
   27f88:	ldur	x8, [x29, #-96]
   27f8c:	ldur	w24, [x29, #-88]
   27f90:	str	x0, [x8]
   27f94:	cbz	x0, 27f30 <rpl_re_set_registers@@Base+0x9388>
   27f98:	mov	x28, x0
   27f9c:	mov	x8, xzr
   27fa0:	mov	x9, xzr
   27fa4:	sub	x10, x29, #0x40
   27fa8:	mov	x11, x21
   27fac:	b	27fc4 <rpl_re_set_registers@@Base+0x941c>
   27fb0:	add	x9, x9, #0x1
   27fb4:	add	x8, x8, #0x40
   27fb8:	cmp	x9, #0x4
   27fbc:	add	x11, x11, #0x8
   27fc0:	b.eq	280e0 <rpl_re_set_registers@@Base+0x9538>  // b.none
   27fc4:	ldr	x12, [x10, x9, lsl #3]
   27fc8:	cbz	x12, 27fb0 <rpl_re_set_registers@@Base+0x9408>
   27fcc:	add	x14, x23, x9, lsl #3
   27fd0:	mov	x13, x8
   27fd4:	add	x14, x14, #0xb8
   27fd8:	mov	w15, #0x1                   	// #1
   27fdc:	tbnz	w12, #0, 27ff4 <rpl_re_set_registers@@Base+0x944c>
   27fe0:	lsl	x15, x15, #1
   27fe4:	lsr	x12, x12, #1
   27fe8:	add	x13, x13, #0x1
   27fec:	cbnz	x12, 27fdc <rpl_re_set_registers@@Base+0x9434>
   27ff0:	b	27fb0 <rpl_re_set_registers@@Base+0x9408>
   27ff4:	mov	x16, #0xfffffffffffffff8    	// #-8
   27ff8:	mov	x17, x11
   27ffc:	ldr	x18, [x17], #32
   28000:	add	x16, x16, #0x8
   28004:	tst	x18, x15
   28008:	b.eq	27ffc <rpl_re_set_registers@@Base+0x9454>  // b.none
   2800c:	ldr	x17, [x14]
   28010:	tst	x17, x15
   28014:	ldur	x17, [x29, #-72]
   28018:	csel	x17, x22, x17, eq  // eq = none
   2801c:	ldr	x16, [x17, x16]
   28020:	str	x16, [x28, x13, lsl #3]
   28024:	b	27fe0 <rpl_re_set_registers@@Base+0x9438>
   28028:	mov	x0, x25
   2802c:	bl	b1d0 <free@plt>
   28030:	cbz	x20, 28194 <rpl_re_set_registers@@Base+0x95ec>
   28034:	mov	w0, wzr
   28038:	b	2816c <rpl_re_set_registers@@Base+0x95c4>
   2803c:	mov	w0, #0x8                   	// #8
   28040:	mov	w1, #0x200                 	// #512
   28044:	bl	ae10 <calloc@plt>
   28048:	ldur	x8, [x29, #-104]
   2804c:	ldur	w24, [x29, #-88]
   28050:	str	x0, [x8, #96]
   28054:	cbz	x0, 27f30 <rpl_re_set_registers@@Base+0x9388>
   28058:	mov	x28, x0
   2805c:	mov	x8, xzr
   28060:	mov	x9, xzr
   28064:	sub	x10, x22, #0x8
   28068:	sub	x11, x29, #0x40
   2806c:	mov	x12, x21
   28070:	b	28088 <rpl_re_set_registers@@Base+0x94e0>
   28074:	add	x9, x9, #0x1
   28078:	add	x8, x8, #0x40
   2807c:	cmp	x9, #0x4
   28080:	add	x12, x12, #0x8
   28084:	b.eq	280e0 <rpl_re_set_registers@@Base+0x9538>  // b.none
   28088:	ldr	x13, [x11, x9, lsl #3]
   2808c:	cbz	x13, 28074 <rpl_re_set_registers@@Base+0x94cc>
   28090:	mov	x14, x8
   28094:	mov	w15, #0x1                   	// #1
   28098:	tbnz	w13, #0, 280b0 <rpl_re_set_registers@@Base+0x9508>
   2809c:	lsl	x15, x15, #1
   280a0:	lsr	x13, x13, #1
   280a4:	add	x14, x14, #0x1
   280a8:	cbnz	x13, 28098 <rpl_re_set_registers@@Base+0x94f0>
   280ac:	b	28074 <rpl_re_set_registers@@Base+0x94cc>
   280b0:	mov	x17, x12
   280b4:	mov	x16, x10
   280b8:	ldr	x18, [x17], #32
   280bc:	add	x16, x16, #0x8
   280c0:	tst	x18, x15
   280c4:	b.eq	280b8 <rpl_re_set_registers@@Base+0x9510>  // b.none
   280c8:	ldr	x17, [x16]
   280cc:	ldr	x16, [x16, x20, lsl #3]
   280d0:	add	x18, x28, x14, lsl #3
   280d4:	str	x17, [x18]
   280d8:	str	x16, [x18, #2048]
   280dc:	b	2809c <rpl_re_set_registers@@Base+0x94f4>
   280e0:	sub	x0, x29, #0x40
   280e4:	mov	w1, #0xa                   	// #10
   280e8:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   280ec:	tbz	w0, #0, 28130 <rpl_re_set_registers@@Base+0x9588>
   280f0:	cmp	x20, #0x1
   280f4:	b.lt	28130 <rpl_re_set_registers@@Base+0x9588>  // b.tstop
   280f8:	mov	x19, x20
   280fc:	mov	w1, #0xa                   	// #10
   28100:	mov	x0, x21
   28104:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   28108:	tbnz	w0, #0, 28120 <rpl_re_set_registers@@Base+0x9578>
   2810c:	add	x27, x27, #0x8
   28110:	subs	x19, x19, #0x1
   28114:	add	x21, x21, #0x20
   28118:	b.ne	280fc <rpl_re_set_registers@@Base+0x9554>  // b.any
   2811c:	b	28130 <rpl_re_set_registers@@Base+0x9588>
   28120:	ldr	x8, [x27]
   28124:	str	x8, [x28, #80]
   28128:	tbz	w26, #0, 28130 <rpl_re_set_registers@@Base+0x9588>
   2812c:	str	x8, [x28, #2128]
   28130:	cbz	w24, 2813c <rpl_re_set_registers@@Base+0x9594>
   28134:	mov	x0, x22
   28138:	bl	b1d0 <free@plt>
   2813c:	ldur	x0, [x29, #-16]
   28140:	bl	b1d0 <free@plt>
   28144:	cmp	x20, #0x1
   28148:	b.lt	28160 <rpl_re_set_registers@@Base+0x95b8>  // b.tstop
   2814c:	add	x19, x25, #0x10
   28150:	ldr	x0, [x19], #24
   28154:	bl	b1d0 <free@plt>
   28158:	subs	x20, x20, #0x1
   2815c:	b.ne	28150 <rpl_re_set_registers@@Base+0x95a8>  // b.any
   28160:	mov	x0, x25
   28164:	bl	b1d0 <free@plt>
   28168:	mov	w0, #0x1                   	// #1
   2816c:	mov	sp, x29
   28170:	ldp	x20, x19, [sp, #80]
   28174:	ldp	x22, x21, [sp, #64]
   28178:	ldp	x24, x23, [sp, #48]
   2817c:	ldp	x26, x25, [sp, #32]
   28180:	ldp	x28, x27, [sp, #16]
   28184:	ldp	x29, x30, [sp], #96
   28188:	ret
   2818c:	mov	w24, wzr
   28190:	b	27f30 <rpl_re_set_registers@@Base+0x9388>
   28194:	mov	w0, #0x8                   	// #8
   28198:	mov	w1, #0x100                 	// #256
   2819c:	bl	ae10 <calloc@plt>
   281a0:	cmp	x0, #0x0
   281a4:	str	x0, [x19]
   281a8:	cset	w0, ne  // ne = any
   281ac:	b	2816c <rpl_re_set_registers@@Base+0x95c4>
   281b0:	sub	sp, sp, #0xf0
   281b4:	stp	x29, x30, [sp, #144]
   281b8:	add	x29, sp, #0x90
   281bc:	stp	x22, x21, [sp, #208]
   281c0:	mov	x22, x0
   281c4:	sub	x0, x29, #0x20
   281c8:	stp	x28, x27, [sp, #160]
   281cc:	stp	x26, x25, [sp, #176]
   281d0:	stp	x24, x23, [sp, #192]
   281d4:	stp	x20, x19, [sp, #224]
   281d8:	stp	x2, x3, [sp, #32]
   281dc:	mov	x20, x1
   281e0:	sub	x25, x29, #0x20
   281e4:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   281e8:	ldr	x8, [x20, #16]
   281ec:	cmp	x8, #0x1
   281f0:	b.lt	286bc <rpl_re_set_registers@@Base+0x9b14>  // b.tstop
   281f4:	mov	x26, xzr
   281f8:	mov	x19, xzr
   281fc:	add	x24, x22, #0xb8
   28200:	sub	x28, x29, #0x40
   28204:	add	x23, sp, #0x30
   28208:	stp	x24, x22, [sp]
   2820c:	b	28220 <rpl_re_set_registers@@Base+0x9678>
   28210:	ldr	x8, [x20, #16]
   28214:	add	x26, x26, #0x1
   28218:	cmp	x26, x8
   2821c:	b.ge	286f0 <rpl_re_set_registers@@Base+0x9b48>  // b.tcont
   28220:	ldr	x8, [x20, #24]
   28224:	ldr	x9, [x22]
   28228:	ldr	x8, [x8, x26, lsl #3]
   2822c:	add	x8, x9, x8, lsl #4
   28230:	mov	x27, x8
   28234:	ldr	w21, [x27, #8]!
   28238:	and	w9, w21, #0xff
   2823c:	cmp	w9, #0x1
   28240:	str	w9, [sp, #28]
   28244:	b.ne	28264 <rpl_re_set_registers@@Base+0x96bc>  // b.any
   28248:	ldrb	w1, [x8]
   2824c:	sub	x0, x29, #0x20
   28250:	str	x8, [sp, #16]
   28254:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   28258:	and	w8, w21, #0x3ff00
   2825c:	cbnz	w8, 282c8 <rpl_re_set_registers@@Base+0x9720>
   28260:	b	284dc <rpl_re_set_registers@@Base+0x9934>
   28264:	cmp	w9, #0x7
   28268:	b.eq	28298 <rpl_re_set_registers@@Base+0x96f0>  // b.none
   2826c:	cmp	w9, #0x5
   28270:	b.eq	28358 <rpl_re_set_registers@@Base+0x97b0>  // b.none
   28274:	cmp	w9, #0x3
   28278:	b.ne	28380 <rpl_re_set_registers@@Base+0x97d8>  // b.any
   2827c:	ldr	x1, [x8]
   28280:	sub	x0, x29, #0x20
   28284:	str	x8, [sp, #16]
   28288:	bl	28720 <rpl_re_set_registers@@Base+0x9b78>
   2828c:	and	w8, w21, #0x3ff00
   28290:	cbnz	w8, 282c8 <rpl_re_set_registers@@Base+0x9720>
   28294:	b	284dc <rpl_re_set_registers@@Base+0x9934>
   28298:	str	x8, [sp, #16]
   2829c:	mov	x8, #0xffffffffffffffff    	// #-1
   282a0:	stp	x8, x8, [x29, #-32]
   282a4:	ldrb	w8, [x22, #216]
   282a8:	tbnz	w8, #6, 282b8 <rpl_re_set_registers@@Base+0x9710>
   282ac:	sub	x0, x29, #0x20
   282b0:	mov	w1, #0xa                   	// #10
   282b4:	bl	28750 <rpl_re_set_registers@@Base+0x9ba8>
   282b8:	ldrb	w8, [x22, #216]
   282bc:	tbnz	w8, #7, 2838c <rpl_re_set_registers@@Base+0x97e4>
   282c0:	and	w8, w21, #0x3ff00
   282c4:	cbz	w8, 284dc <rpl_re_set_registers@@Base+0x9934>
   282c8:	tbnz	w21, #13, 282fc <rpl_re_set_registers@@Base+0x9754>
   282cc:	tbnz	w21, #15, 28334 <rpl_re_set_registers@@Base+0x978c>
   282d0:	tbz	w21, #10, 28434 <rpl_re_set_registers@@Base+0x988c>
   282d4:	ldr	w8, [sp, #28]
   282d8:	cmp	w8, #0x1
   282dc:	b.ne	283a4 <rpl_re_set_registers@@Base+0x97fc>  // b.any
   282e0:	ldrb	w8, [x27, #2]
   282e4:	tbnz	w8, #6, 283a4 <rpl_re_set_registers@@Base+0x97fc>
   282e8:	sub	x0, x29, #0x20
   282ec:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   282f0:	mov	w8, #0x4                   	// #4
   282f4:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   282f8:	b	28434 <rpl_re_set_registers@@Base+0x988c>
   282fc:	sub	x0, x29, #0x20
   28300:	mov	w1, #0xa                   	// #10
   28304:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   28308:	mov	w24, w0
   2830c:	sub	x0, x29, #0x20
   28310:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   28314:	tbz	w24, #0, 28348 <rpl_re_set_registers@@Base+0x97a0>
   28318:	sub	x0, x29, #0x20
   2831c:	mov	w1, #0xa                   	// #10
   28320:	bl	21d64 <rpl_re_set_registers@@Base+0x31bc>
   28324:	mov	w8, wzr
   28328:	ldp	x24, x22, [sp]
   2832c:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   28330:	b	282cc <rpl_re_set_registers@@Base+0x9724>
   28334:	sub	x0, x29, #0x20
   28338:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   2833c:	mov	w8, #0x4                   	// #4
   28340:	cbnz	w8, 286a4 <rpl_re_set_registers@@Base+0x9afc>
   28344:	b	28210 <rpl_re_set_registers@@Base+0x9668>
   28348:	mov	w8, #0x4                   	// #4
   2834c:	ldp	x24, x22, [sp]
   28350:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   28354:	b	282cc <rpl_re_set_registers@@Base+0x9724>
   28358:	str	x8, [sp, #16]
   2835c:	ldr	w8, [x22, #180]
   28360:	cmp	w8, #0x2
   28364:	b.lt	283e8 <rpl_re_set_registers@@Base+0x9840>  // b.tstop
   28368:	ldr	x1, [x22, #120]
   2836c:	sub	x0, x29, #0x20
   28370:	bl	28720 <rpl_re_set_registers@@Base+0x9b78>
   28374:	ldrb	w8, [x22, #216]
   28378:	tbz	w8, #6, 282ac <rpl_re_set_registers@@Base+0x9704>
   2837c:	b	282b8 <rpl_re_set_registers@@Base+0x9710>
   28380:	mov	w8, #0x4                   	// #4
   28384:	cbnz	w8, 286a4 <rpl_re_set_registers@@Base+0x9afc>
   28388:	b	28210 <rpl_re_set_registers@@Base+0x9668>
   2838c:	sub	x0, x29, #0x20
   28390:	mov	x1, xzr
   28394:	bl	28750 <rpl_re_set_registers@@Base+0x9ba8>
   28398:	and	w8, w21, #0x3ff00
   2839c:	cbnz	w8, 282c8 <rpl_re_set_registers@@Base+0x9720>
   283a0:	b	284dc <rpl_re_set_registers@@Base+0x9934>
   283a4:	ldr	w8, [x22, #180]
   283a8:	cmp	w8, #0x1
   283ac:	b.le	283fc <rpl_re_set_registers@@Base+0x9854>
   283b0:	ldr	x10, [x22, #120]
   283b4:	mov	x9, xzr
   283b8:	mov	x8, xzr
   283bc:	ldr	x11, [x24, x9]
   283c0:	ldr	x12, [x10, x9]
   283c4:	ldr	x13, [x25, x9]
   283c8:	orn	x11, x11, x12
   283cc:	and	x11, x13, x11
   283d0:	str	x11, [x25, x9]
   283d4:	add	x9, x9, #0x8
   283d8:	cmp	x9, #0x20
   283dc:	orr	x8, x11, x8
   283e0:	b.ne	283bc <rpl_re_set_registers@@Base+0x9814>  // b.any
   283e4:	b	28424 <rpl_re_set_registers@@Base+0x987c>
   283e8:	sub	x0, x29, #0x20
   283ec:	bl	28744 <rpl_re_set_registers@@Base+0x9b9c>
   283f0:	ldrb	w8, [x22, #216]
   283f4:	tbnz	w8, #6, 282b8 <rpl_re_set_registers@@Base+0x9710>
   283f8:	b	282ac <rpl_re_set_registers@@Base+0x9704>
   283fc:	mov	x9, xzr
   28400:	mov	x8, xzr
   28404:	ldr	x10, [x24, x9]
   28408:	ldr	x11, [x25, x9]
   2840c:	and	x10, x11, x10
   28410:	str	x10, [x25, x9]
   28414:	add	x9, x9, #0x8
   28418:	cmp	x9, #0x20
   2841c:	orr	x8, x10, x8
   28420:	b.ne	28404 <rpl_re_set_registers@@Base+0x985c>  // b.any
   28424:	cmp	x8, #0x0
   28428:	cset	w8, eq  // eq = none
   2842c:	lsl	w8, w8, #2
   28430:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   28434:	tbz	w21, #11, 284dc <rpl_re_set_registers@@Base+0x9934>
   28438:	ldr	w8, [sp, #28]
   2843c:	cmp	w8, #0x1
   28440:	b.ne	2844c <rpl_re_set_registers@@Base+0x98a4>  // b.any
   28444:	ldrb	w8, [x27, #2]
   28448:	tbnz	w8, #6, 284cc <rpl_re_set_registers@@Base+0x9924>
   2844c:	ldr	w8, [x22, #180]
   28450:	cmp	w8, #0x1
   28454:	b.le	28490 <rpl_re_set_registers@@Base+0x98e8>
   28458:	ldr	x10, [x22, #120]
   2845c:	mov	x9, xzr
   28460:	mov	x8, xzr
   28464:	ldr	x11, [x24, x9]
   28468:	ldr	x12, [x10, x9]
   2846c:	ldr	x13, [x25, x9]
   28470:	and	x11, x12, x11
   28474:	bic	x11, x13, x11
   28478:	str	x11, [x25, x9]
   2847c:	add	x9, x9, #0x8
   28480:	cmp	x9, #0x20
   28484:	orr	x8, x11, x8
   28488:	b.ne	28464 <rpl_re_set_registers@@Base+0x98bc>  // b.any
   2848c:	b	284b8 <rpl_re_set_registers@@Base+0x9910>
   28490:	mov	x9, xzr
   28494:	mov	x8, xzr
   28498:	ldr	x10, [x24, x9]
   2849c:	ldr	x11, [x25, x9]
   284a0:	bic	x10, x11, x10
   284a4:	str	x10, [x25, x9]
   284a8:	add	x9, x9, #0x8
   284ac:	cmp	x9, #0x20
   284b0:	orr	x8, x10, x8
   284b4:	b.ne	28498 <rpl_re_set_registers@@Base+0x98f0>  // b.any
   284b8:	cmp	x8, #0x0
   284bc:	cset	w8, eq  // eq = none
   284c0:	lsl	w8, w8, #2
   284c4:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   284c8:	b	284dc <rpl_re_set_registers@@Base+0x9934>
   284cc:	sub	x0, x29, #0x20
   284d0:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   284d4:	mov	w8, #0x4                   	// #4
   284d8:	cbnz	w8, 286a0 <rpl_re_set_registers@@Base+0x9af8>
   284dc:	cmp	x19, #0x1
   284e0:	b.lt	28628 <rpl_re_set_registers@@Base+0x9a80>  // b.tstop
   284e4:	ldr	x24, [sp, #40]
   284e8:	ldr	w22, [sp, #28]
   284ec:	mov	x21, xzr
   284f0:	b	28504 <rpl_re_set_registers@@Base+0x995c>
   284f4:	add	x21, x21, #0x1
   284f8:	cmp	x21, x19
   284fc:	add	x24, x24, #0x20
   28500:	b.ge	28638 <rpl_re_set_registers@@Base+0x9a90>  // b.tcont
   28504:	cmp	w22, #0x1
   28508:	b.ne	28524 <rpl_re_set_registers@@Base+0x997c>  // b.any
   2850c:	ldr	x8, [sp, #16]
   28510:	ldrb	w1, [x8]
   28514:	ldr	x8, [sp, #40]
   28518:	add	x0, x8, x21, lsl #5
   2851c:	bl	2594c <rpl_re_set_registers@@Base+0x6da4>
   28520:	tbz	w0, #0, 285fc <rpl_re_set_registers@@Base+0x9a54>
   28524:	mov	x9, xzr
   28528:	mov	x8, xzr
   2852c:	ldr	x10, [x25, x9]
   28530:	ldr	x11, [x24, x9]
   28534:	and	x10, x11, x10
   28538:	str	x10, [x28, x9]
   2853c:	add	x9, x9, #0x8
   28540:	cmp	x9, #0x20
   28544:	orr	x8, x10, x8
   28548:	b.ne	2852c <rpl_re_set_registers@@Base+0x9984>  // b.any
   2854c:	cbz	x8, 285fc <rpl_re_set_registers@@Base+0x9a54>
   28550:	mov	x22, x20
   28554:	mov	x8, xzr
   28558:	mov	x27, xzr
   2855c:	mov	x9, xzr
   28560:	ldr	x10, [x25, x8]
   28564:	ldr	x11, [x24, x8]
   28568:	bic	x12, x11, x10
   2856c:	bic	x10, x10, x11
   28570:	str	x12, [x23, x8]
   28574:	str	x10, [x25, x8]
   28578:	add	x8, x8, #0x8
   2857c:	orr	x9, x12, x9
   28580:	cmp	x8, #0x20
   28584:	orr	x27, x10, x27
   28588:	b.ne	28560 <rpl_re_set_registers@@Base+0x99b8>  // b.any
   2858c:	cbz	x9, 285c8 <rpl_re_set_registers@@Base+0x9a20>
   28590:	ldr	x20, [sp, #40]
   28594:	add	x1, sp, #0x30
   28598:	add	x0, x20, x19, lsl #5
   2859c:	bl	2877c <rpl_re_set_registers@@Base+0x9bd4>
   285a0:	add	x0, x20, x21, lsl #5
   285a4:	sub	x1, x29, #0x40
   285a8:	bl	2877c <rpl_re_set_registers@@Base+0x9bd4>
   285ac:	ldr	x8, [sp, #32]
   285b0:	mov	w9, #0x18                  	// #24
   285b4:	madd	x0, x19, x9, x8
   285b8:	madd	x1, x21, x9, x8
   285bc:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   285c0:	cbnz	w0, 28618 <rpl_re_set_registers@@Base+0x9a70>
   285c4:	add	x19, x19, #0x1
   285c8:	mov	x20, x22
   285cc:	ldr	x8, [x20, #24]
   285d0:	ldr	w22, [sp, #28]
   285d4:	mov	w9, #0x18                  	// #24
   285d8:	ldr	x1, [x8, x26, lsl #3]
   285dc:	ldr	x8, [sp, #32]
   285e0:	madd	x0, x21, x9, x8
   285e4:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   285e8:	tbz	w0, #0, 28610 <rpl_re_set_registers@@Base+0x9a68>
   285ec:	cmp	x27, #0x0
   285f0:	mov	w8, #0x11                  	// #17
   285f4:	csel	w8, w8, wzr, eq  // eq = none
   285f8:	b	28600 <rpl_re_set_registers@@Base+0x9a58>
   285fc:	mov	w8, #0x13                  	// #19
   28600:	cbz	w8, 284f4 <rpl_re_set_registers@@Base+0x994c>
   28604:	cmp	w8, #0x13
   28608:	b.eq	284f4 <rpl_re_set_registers@@Base+0x994c>  // b.none
   2860c:	b	28630 <rpl_re_set_registers@@Base+0x9a88>
   28610:	mov	w8, #0x1a                  	// #26
   28614:	b	28600 <rpl_re_set_registers@@Base+0x9a58>
   28618:	mov	x20, x22
   2861c:	ldr	w22, [sp, #28]
   28620:	mov	w8, #0x1a                  	// #26
   28624:	b	28600 <rpl_re_set_registers@@Base+0x9a58>
   28628:	mov	x21, xzr
   2862c:	b	28638 <rpl_re_set_registers@@Base+0x9a90>
   28630:	cmp	w8, #0x11
   28634:	b.ne	2869c <rpl_re_set_registers@@Base+0x9af4>  // b.any
   28638:	ldr	x24, [sp]
   2863c:	cmp	x21, x19
   28640:	b.ne	2868c <rpl_re_set_registers@@Base+0x9ae4>  // b.any
   28644:	ldr	x8, [sp, #40]
   28648:	sub	x1, x29, #0x20
   2864c:	add	x0, x8, x19, lsl #5
   28650:	bl	2877c <rpl_re_set_registers@@Base+0x9bd4>
   28654:	ldr	x8, [x20, #24]
   28658:	mov	w9, #0x18                  	// #24
   2865c:	ldr	x1, [x8, x26, lsl #3]
   28660:	ldr	x8, [sp, #32]
   28664:	madd	x0, x19, x9, x8
   28668:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   2866c:	ldr	x22, [sp, #8]
   28670:	cbnz	w0, 286b0 <rpl_re_set_registers@@Base+0x9b08>
   28674:	sub	x0, x29, #0x20
   28678:	add	x19, x19, #0x1
   2867c:	bl	28714 <rpl_re_set_registers@@Base+0x9b6c>
   28680:	mov	w8, wzr
   28684:	cbnz	w8, 286a4 <rpl_re_set_registers@@Base+0x9afc>
   28688:	b	28210 <rpl_re_set_registers@@Base+0x9668>
   2868c:	ldr	x22, [sp, #8]
   28690:	mov	w8, wzr
   28694:	cbnz	w8, 286a4 <rpl_re_set_registers@@Base+0x9afc>
   28698:	b	28210 <rpl_re_set_registers@@Base+0x9668>
   2869c:	ldp	x24, x22, [sp]
   286a0:	cbz	w8, 28210 <rpl_re_set_registers@@Base+0x9668>
   286a4:	cmp	w8, #0x4
   286a8:	b.eq	28210 <rpl_re_set_registers@@Base+0x9668>  // b.none
   286ac:	b	286c4 <rpl_re_set_registers@@Base+0x9b1c>
   286b0:	mov	w8, #0x1a                  	// #26
   286b4:	cbnz	w8, 286a4 <rpl_re_set_registers@@Base+0x9afc>
   286b8:	b	28210 <rpl_re_set_registers@@Base+0x9668>
   286bc:	mov	x19, xzr
   286c0:	b	286f0 <rpl_re_set_registers@@Base+0x9b48>
   286c4:	cmp	w8, #0x1a
   286c8:	b.ne	286f0 <rpl_re_set_registers@@Base+0x9b48>  // b.any
   286cc:	cmp	x19, #0x1
   286d0:	b.lt	286ec <rpl_re_set_registers@@Base+0x9b44>  // b.tstop
   286d4:	ldr	x8, [sp, #32]
   286d8:	add	x20, x8, #0x10
   286dc:	ldr	x0, [x20], #24
   286e0:	bl	b1d0 <free@plt>
   286e4:	subs	x19, x19, #0x1
   286e8:	b.ne	286dc <rpl_re_set_registers@@Base+0x9b34>  // b.any
   286ec:	mov	x19, #0xffffffffffffffff    	// #-1
   286f0:	mov	x0, x19
   286f4:	ldp	x20, x19, [sp, #224]
   286f8:	ldp	x22, x21, [sp, #208]
   286fc:	ldp	x24, x23, [sp, #192]
   28700:	ldp	x26, x25, [sp, #176]
   28704:	ldp	x28, x27, [sp, #160]
   28708:	ldp	x29, x30, [sp, #144]
   2870c:	add	sp, sp, #0xf0
   28710:	ret
   28714:	movi	v0.2d, #0x0
   28718:	stp	q0, q0, [x0]
   2871c:	ret
   28720:	mov	x8, xzr
   28724:	ldr	x9, [x1, x8]
   28728:	ldr	x10, [x0, x8]
   2872c:	orr	x9, x10, x9
   28730:	str	x9, [x0, x8]
   28734:	add	x8, x8, #0x8
   28738:	cmp	x8, #0x20
   2873c:	b.ne	28724 <rpl_re_set_registers@@Base+0x9b7c>  // b.any
   28740:	ret
   28744:	movi	v0.2d, #0xffffffffffffffff
   28748:	stp	q0, q0, [x0]
   2874c:	ret
   28750:	add	x8, x1, #0x3f
   28754:	cmp	x1, #0x0
   28758:	csel	x8, x8, x1, lt  // lt = tstop
   2875c:	asr	x8, x8, #6
   28760:	lsl	x8, x8, #3
   28764:	ldr	x9, [x0, x8]
   28768:	mov	w10, #0x1                   	// #1
   2876c:	lsl	x10, x10, x1
   28770:	bic	x9, x9, x10
   28774:	str	x9, [x0, x8]
   28778:	ret
   2877c:	ldp	q1, q0, [x1]
   28780:	stp	q1, q0, [x0]
   28784:	ret
   28788:	ldr	x8, [x0]
   2878c:	add	x8, x8, x1, lsl #4
   28790:	ldr	w8, [x8, #8]
   28794:	and	w9, w8, #0xff
   28798:	cmp	w9, #0x2
   2879c:	b.ne	287c0 <rpl_re_set_registers@@Base+0x9c18>  // b.any
   287a0:	tst	w8, #0x3ff00
   287a4:	b.eq	287c8 <rpl_re_set_registers@@Base+0x9c20>  // b.none
   287a8:	tbnz	w2, #0, 287b0 <rpl_re_set_registers@@Base+0x9c08>
   287ac:	tbnz	w8, #10, 287c0 <rpl_re_set_registers@@Base+0x9c18>
   287b0:	tbz	w2, #0, 287b8 <rpl_re_set_registers@@Base+0x9c10>
   287b4:	tbnz	w8, #11, 287c0 <rpl_re_set_registers@@Base+0x9c18>
   287b8:	tbnz	w2, #1, 287d0 <rpl_re_set_registers@@Base+0x9c28>
   287bc:	tbz	w8, #13, 287d0 <rpl_re_set_registers@@Base+0x9c28>
   287c0:	mov	w0, wzr
   287c4:	ret
   287c8:	mov	w0, #0x1                   	// #1
   287cc:	ret
   287d0:	tst	w8, #0x8000
   287d4:	cset	w8, eq  // eq = none
   287d8:	and	w9, w2, #0x8
   287dc:	orr	w0, w8, w9, lsr #3
   287e0:	ret
   287e4:	stp	x1, x2, [x0]
   287e8:	stp	x3, x4, [x0, #16]
   287ec:	stp	xzr, xzr, [x0, #40]
   287f0:	str	xzr, [x0, #32]
   287f4:	ret
   287f8:	sub	sp, sp, #0x60
   287fc:	stp	x29, x30, [sp, #32]
   28800:	str	x23, [sp, #48]
   28804:	stp	x22, x21, [sp, #64]
   28808:	stp	x20, x19, [sp, #80]
   2880c:	mov	x19, x1
   28810:	ldp	x1, x21, [x1, #16]
   28814:	mov	x20, x0
   28818:	add	x0, sp, #0x8
   2881c:	add	x29, sp, #0x20
   28820:	bl	236d8 <rpl_re_set_registers@@Base+0x4b30>
   28824:	cbnz	w0, 288ec <rpl_re_set_registers@@Base+0x9d44>
   28828:	add	x3, sp, #0x8
   2882c:	mov	x0, x20
   28830:	mov	x1, x19
   28834:	mov	x2, x21
   28838:	bl	289c8 <rpl_re_set_registers@@Base+0x9e20>
   2883c:	cbnz	w0, 288b0 <rpl_re_set_registers@@Base+0x9d08>
   28840:	mov	w23, wzr
   28844:	b	28860 <rpl_re_set_registers@@Base+0x9cb8>
   28848:	add	x3, sp, #0x8
   2884c:	mov	x0, x20
   28850:	mov	x1, x19
   28854:	mov	x2, x21
   28858:	bl	289c8 <rpl_re_set_registers@@Base+0x9e20>
   2885c:	cbnz	w0, 288b0 <rpl_re_set_registers@@Base+0x9d08>
   28860:	subs	x8, x21, #0x1
   28864:	b.lt	288c4 <rpl_re_set_registers@@Base+0x9d1c>  // b.tstop
   28868:	ldr	x0, [x19]
   2886c:	ldr	w10, [x20, #224]
   28870:	ldr	x9, [x0, x21, lsl #3]
   28874:	cmp	x9, #0x0
   28878:	csinc	w23, wzr, w23, ne  // ne = any
   2887c:	cmp	w23, w10
   28880:	b.gt	288b8 <rpl_re_set_registers@@Base+0x9d10>
   28884:	str	xzr, [sp, #16]
   28888:	ldr	x9, [x20, #184]
   2888c:	mov	x21, x8
   28890:	ldr	x9, [x9, x8, lsl #3]
   28894:	cbz	x9, 28848 <rpl_re_set_registers@@Base+0x9ca0>
   28898:	add	x3, sp, #0x8
   2889c:	mov	x0, x20
   288a0:	mov	x1, x19
   288a4:	mov	x2, x21
   288a8:	bl	28ad8 <rpl_re_set_registers@@Base+0x9f30>
   288ac:	cbz	w0, 28848 <rpl_re_set_registers@@Base+0x9ca0>
   288b0:	mov	w22, w0
   288b4:	b	288c8 <rpl_re_set_registers@@Base+0x9d20>
   288b8:	lsl	x2, x21, #3
   288bc:	mov	w1, wzr
   288c0:	bl	ad40 <memset@plt>
   288c4:	mov	w22, wzr
   288c8:	ldr	x0, [sp, #24]
   288cc:	bl	b1d0 <free@plt>
   288d0:	mov	w0, w22
   288d4:	ldp	x20, x19, [sp, #80]
   288d8:	ldp	x22, x21, [sp, #64]
   288dc:	ldr	x23, [sp, #48]
   288e0:	ldp	x29, x30, [sp, #32]
   288e4:	add	sp, sp, #0x60
   288e8:	ret
   288ec:	mov	w22, w0
   288f0:	b	288d0 <rpl_re_set_registers@@Base+0x9d28>
   288f4:	sub	sp, sp, #0x60
   288f8:	cmp	x3, #0x1
   288fc:	stp	x29, x30, [sp, #32]
   28900:	str	x23, [sp, #48]
   28904:	stp	x22, x21, [sp, #64]
   28908:	stp	x20, x19, [sp, #80]
   2890c:	add	x29, sp, #0x20
   28910:	b.lt	289a8 <rpl_re_set_registers@@Base+0x9e00>  // b.tstop
   28914:	mov	x19, x3
   28918:	mov	x20, x2
   2891c:	mov	x21, x1
   28920:	mov	x22, x0
   28924:	b	2893c <rpl_re_set_registers@@Base+0x9d94>
   28928:	str	x8, [x21]
   2892c:	subs	x19, x19, #0x1
   28930:	add	x20, x20, #0x8
   28934:	add	x21, x21, #0x8
   28938:	b.eq	289a8 <rpl_re_set_registers@@Base+0x9e00>  // b.none
   2893c:	ldr	x9, [x21]
   28940:	ldr	x8, [x20]
   28944:	cbz	x9, 28928 <rpl_re_set_registers@@Base+0x9d80>
   28948:	cbz	x8, 2892c <rpl_re_set_registers@@Base+0x9d84>
   2894c:	add	x1, x9, #0x8
   28950:	add	x2, x8, #0x8
   28954:	add	x0, sp, #0x8
   28958:	bl	26504 <rpl_re_set_registers@@Base+0x795c>
   2895c:	str	w0, [x29, #28]
   28960:	cbnz	w0, 28998 <rpl_re_set_registers@@Base+0x9df0>
   28964:	add	x0, x29, #0x1c
   28968:	add	x2, sp, #0x8
   2896c:	mov	x1, x22
   28970:	bl	274ac <rpl_re_set_registers@@Base+0x8904>
   28974:	str	x0, [x21]
   28978:	ldr	x0, [sp, #24]
   2897c:	bl	b1d0 <free@plt>
   28980:	ldr	w9, [x29, #28]
   28984:	cmp	w9, #0x0
   28988:	cset	w8, eq  // eq = none
   2898c:	csel	w23, w23, w9, eq  // eq = none
   28990:	cbnz	w8, 2892c <rpl_re_set_registers@@Base+0x9d84>
   28994:	b	289ac <rpl_re_set_registers@@Base+0x9e04>
   28998:	mov	w8, wzr
   2899c:	mov	w23, w0
   289a0:	cbnz	w8, 2892c <rpl_re_set_registers@@Base+0x9d84>
   289a4:	b	289ac <rpl_re_set_registers@@Base+0x9e04>
   289a8:	mov	w23, wzr
   289ac:	mov	w0, w23
   289b0:	ldp	x20, x19, [sp, #80]
   289b4:	ldp	x22, x21, [sp, #64]
   289b8:	ldr	x23, [sp, #48]
   289bc:	ldp	x29, x30, [sp, #32]
   289c0:	add	sp, sp, #0x60
   289c4:	ret
   289c8:	stp	x29, x30, [sp, #-80]!
   289cc:	stp	x24, x23, [sp, #32]
   289d0:	stp	x22, x21, [sp, #48]
   289d4:	stp	x20, x19, [sp, #64]
   289d8:	mov	x29, sp
   289dc:	ldr	x24, [x0, #152]
   289e0:	str	wzr, [x29, #28]
   289e4:	ldr	x8, [x0, #184]
   289e8:	str	x25, [sp, #16]
   289ec:	mov	x19, x2
   289f0:	mov	x20, x1
   289f4:	ldr	x25, [x8, x2, lsl #3]
   289f8:	ldr	x8, [x3, #8]
   289fc:	mov	x21, x0
   28a00:	add	x9, x25, #0x8
   28a04:	cmp	x25, #0x0
   28a08:	csel	x22, xzr, x9, eq  // eq = none
   28a0c:	cbz	x8, 28a84 <rpl_re_set_registers@@Base+0x9edc>
   28a10:	mov	x23, x3
   28a14:	cbz	x25, 28a5c <rpl_re_set_registers@@Base+0x9eb4>
   28a18:	mov	x0, x24
   28a1c:	mov	x1, x23
   28a20:	mov	x2, x22
   28a24:	bl	28c54 <rpl_re_set_registers@@Base+0xa0ac>
   28a28:	str	w0, [x29, #28]
   28a2c:	cbnz	w0, 28ac0 <rpl_re_set_registers@@Base+0x9f18>
   28a30:	ldr	x8, [x20, #40]
   28a34:	cbz	x8, 28a5c <rpl_re_set_registers@@Base+0x9eb4>
   28a38:	ldr	x4, [x21, #216]
   28a3c:	add	x3, x20, #0x20
   28a40:	mov	x0, x24
   28a44:	mov	x1, x23
   28a48:	mov	x2, x22
   28a4c:	mov	x5, x19
   28a50:	bl	28d34 <rpl_re_set_registers@@Base+0xa18c>
   28a54:	str	w0, [x29, #28]
   28a58:	cbnz	w0, 28ac0 <rpl_re_set_registers@@Base+0x9f18>
   28a5c:	add	x0, x29, #0x1c
   28a60:	mov	x1, x24
   28a64:	mov	x2, x23
   28a68:	bl	274ac <rpl_re_set_registers@@Base+0x8904>
   28a6c:	ldr	x8, [x20]
   28a70:	str	x0, [x8, x19, lsl #3]
   28a74:	ldr	w0, [x29, #28]
   28a78:	cbnz	w0, 28ac0 <rpl_re_set_registers@@Base+0x9f18>
   28a7c:	cbnz	x25, 28a90 <rpl_re_set_registers@@Base+0x9ee8>
   28a80:	b	28abc <rpl_re_set_registers@@Base+0x9f14>
   28a84:	ldr	x8, [x20]
   28a88:	str	xzr, [x8, x19, lsl #3]
   28a8c:	cbz	x25, 28abc <rpl_re_set_registers@@Base+0x9f14>
   28a90:	ldr	x8, [x21, #184]
   28a94:	ldr	x8, [x8, x19, lsl #3]
   28a98:	ldrb	w8, [x8, #104]
   28a9c:	tbz	w8, #6, 28abc <rpl_re_set_registers@@Base+0x9f14>
   28aa0:	mov	x0, x21
   28aa4:	mov	x1, x20
   28aa8:	mov	x2, x19
   28aac:	mov	x3, x22
   28ab0:	bl	29018 <rpl_re_set_registers@@Base+0xa470>
   28ab4:	str	w0, [x29, #28]
   28ab8:	cbnz	w0, 28ac0 <rpl_re_set_registers@@Base+0x9f18>
   28abc:	mov	w0, wzr
   28ac0:	ldp	x20, x19, [sp, #64]
   28ac4:	ldp	x22, x21, [sp, #48]
   28ac8:	ldp	x24, x23, [sp, #32]
   28acc:	ldr	x25, [sp, #16]
   28ad0:	ldp	x29, x30, [sp], #80
   28ad4:	ret
   28ad8:	stp	x29, x30, [sp, #-96]!
   28adc:	stp	x28, x27, [sp, #16]
   28ae0:	stp	x26, x25, [sp, #32]
   28ae4:	stp	x24, x23, [sp, #48]
   28ae8:	stp	x22, x21, [sp, #64]
   28aec:	stp	x20, x19, [sp, #80]
   28af0:	ldr	x8, [x0, #184]
   28af4:	mov	x29, sp
   28af8:	ldr	x25, [x8, x2, lsl #3]
   28afc:	ldr	x8, [x25, #40]
   28b00:	cmp	x8, #0x1
   28b04:	b.lt	28c2c <rpl_re_set_registers@@Base+0xa084>  // b.tstop
   28b08:	ldr	x27, [x0, #152]
   28b0c:	mov	x19, x3
   28b10:	mov	x20, x0
   28b14:	mov	x21, x2
   28b18:	mov	x22, x1
   28b1c:	mov	x26, xzr
   28b20:	add	x28, x2, #0x1
   28b24:	add	x23, x1, #0x20
   28b28:	ldr	x8, [x25, #48]
   28b2c:	ldr	x24, [x8, x26, lsl #3]
   28b30:	ldr	x8, [x27]
   28b34:	add	x8, x8, x24, lsl #4
   28b38:	ldrb	w8, [x8, #10]
   28b3c:	tbnz	w8, #4, 28b4c <rpl_re_set_registers@@Base+0x9fa4>
   28b40:	mov	w0, wzr
   28b44:	cbnz	w0, 28bb0 <rpl_re_set_registers@@Base+0xa008>
   28b48:	b	28b68 <rpl_re_set_registers@@Base+0x9fc0>
   28b4c:	ldr	x4, [x22, #24]
   28b50:	mov	x0, x20
   28b54:	mov	x1, x22
   28b58:	mov	x2, x24
   28b5c:	mov	x3, x21
   28b60:	bl	29aa8 <rpl_re_set_registers@@Base+0xaf00>
   28b64:	cbnz	w0, 28bb0 <rpl_re_set_registers@@Base+0xa008>
   28b68:	ldr	x8, [x27]
   28b6c:	mov	x0, x20
   28b70:	mov	x2, x21
   28b74:	add	x1, x8, x24, lsl #4
   28b78:	bl	279c0 <rpl_re_set_registers@@Base+0x8e18>
   28b7c:	tbz	w0, #0, 28bac <rpl_re_set_registers@@Base+0xa004>
   28b80:	ldr	x8, [x22]
   28b84:	ldr	x8, [x8, x28, lsl #3]
   28b88:	cbz	x8, 28c04 <rpl_re_set_registers@@Base+0xa05c>
   28b8c:	ldr	x9, [x27, #24]
   28b90:	add	x0, x8, #0x8
   28b94:	ldr	x1, [x9, x24, lsl #3]
   28b98:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   28b9c:	cmp	x0, #0x0
   28ba0:	cset	w0, ne  // ne = any
   28ba4:	cbnz	w0, 28bb4 <rpl_re_set_registers@@Base+0xa00c>
   28ba8:	b	28c0c <rpl_re_set_registers@@Base+0xa064>
   28bac:	mov	w0, wzr
   28bb0:	cbz	w0, 28c0c <rpl_re_set_registers@@Base+0xa064>
   28bb4:	ldr	x8, [x22, #40]
   28bb8:	cbz	x8, 28bec <rpl_re_set_registers@@Base+0xa044>
   28bbc:	ldr	x8, [x27, #24]
   28bc0:	add	x3, x21, w0, sxtw
   28bc4:	mov	x0, x20
   28bc8:	mov	x1, x23
   28bcc:	ldr	x2, [x8, x24, lsl #3]
   28bd0:	mov	x4, x24
   28bd4:	mov	x5, x21
   28bd8:	bl	296b0 <rpl_re_set_registers@@Base+0xab08>
   28bdc:	tst	w0, #0x1
   28be0:	mov	w8, #0x4                   	// #4
   28be4:	csel	w8, w8, wzr, ne  // ne = any
   28be8:	tbnz	w0, #0, 28c10 <rpl_re_set_registers@@Base+0xa068>
   28bec:	mov	x0, x19
   28bf0:	mov	x1, x24
   28bf4:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   28bf8:	mvn	w8, w0
   28bfc:	and	w8, w8, #0x1
   28c00:	b	28c10 <rpl_re_set_registers@@Base+0xa068>
   28c04:	mov	w0, wzr
   28c08:	cbnz	w0, 28bb4 <rpl_re_set_registers@@Base+0xa00c>
   28c0c:	mov	w8, #0x4                   	// #4
   28c10:	orr	w8, w8, #0x4
   28c14:	cmp	w8, #0x4
   28c18:	b.ne	28c34 <rpl_re_set_registers@@Base+0xa08c>  // b.any
   28c1c:	ldr	x8, [x25, #40]
   28c20:	add	x26, x26, #0x1
   28c24:	cmp	x26, x8
   28c28:	b.lt	28b28 <rpl_re_set_registers@@Base+0x9f80>  // b.tstop
   28c2c:	mov	w0, wzr
   28c30:	b	28c38 <rpl_re_set_registers@@Base+0xa090>
   28c34:	mov	w0, #0xc                   	// #12
   28c38:	ldp	x20, x19, [sp, #80]
   28c3c:	ldp	x22, x21, [sp, #64]
   28c40:	ldp	x24, x23, [sp, #48]
   28c44:	ldp	x26, x25, [sp, #32]
   28c48:	ldp	x28, x27, [sp, #16]
   28c4c:	ldp	x29, x30, [sp], #96
   28c50:	ret
   28c54:	sub	sp, sp, #0x50
   28c58:	stp	x29, x30, [sp, #16]
   28c5c:	stp	x22, x21, [sp, #48]
   28c60:	stp	x20, x19, [sp, #64]
   28c64:	add	x29, sp, #0x10
   28c68:	mov	x20, x1
   28c6c:	mov	x21, x0
   28c70:	mov	x19, x2
   28c74:	sub	x0, x29, #0x4
   28c78:	mov	x1, x21
   28c7c:	mov	x2, x20
   28c80:	stp	x24, x23, [sp, #32]
   28c84:	stur	wzr, [x29, #-4]
   28c88:	bl	274ac <rpl_re_set_registers@@Base+0x8904>
   28c8c:	ldur	w8, [x29, #-4]
   28c90:	cbnz	w8, 28d0c <rpl_re_set_registers@@Base+0xa164>
   28c94:	mov	x22, x0
   28c98:	ldr	x8, [x22, #56]!
   28c9c:	cbnz	x8, 28cf8 <rpl_re_set_registers@@Base+0xa150>
   28ca0:	ldr	x1, [x20, #8]
   28ca4:	mov	x0, x22
   28ca8:	bl	23980 <rpl_re_set_registers@@Base+0x4dd8>
   28cac:	stur	w0, [x29, #-4]
   28cb0:	cbnz	w0, 28d2c <rpl_re_set_registers@@Base+0xa184>
   28cb4:	ldr	x8, [x20, #8]
   28cb8:	cmp	x8, #0x1
   28cbc:	b.lt	28cf8 <rpl_re_set_registers@@Base+0xa150>  // b.tstop
   28cc0:	mov	x23, xzr
   28cc4:	mov	w24, #0x18                  	// #24
   28cc8:	ldr	x8, [x20, #16]
   28ccc:	ldr	x9, [x21, #56]
   28cd0:	mov	x0, x22
   28cd4:	ldr	x8, [x8, x23, lsl #3]
   28cd8:	madd	x1, x8, x24, x9
   28cdc:	bl	23be8 <rpl_re_set_registers@@Base+0x5040>
   28ce0:	cbnz	w0, 28d28 <rpl_re_set_registers@@Base+0xa180>
   28ce4:	ldr	x8, [x20, #8]
   28ce8:	add	x23, x23, #0x1
   28cec:	cmp	x23, x8
   28cf0:	b.lt	28cc8 <rpl_re_set_registers@@Base+0xa120>  // b.tstop
   28cf4:	stur	w0, [x29, #-4]
   28cf8:	mov	x0, x20
   28cfc:	mov	x1, x19
   28d00:	mov	x2, x22
   28d04:	bl	292ec <rpl_re_set_registers@@Base+0xa744>
   28d08:	mov	w8, w0
   28d0c:	ldp	x20, x19, [sp, #64]
   28d10:	ldp	x22, x21, [sp, #48]
   28d14:	ldp	x24, x23, [sp, #32]
   28d18:	ldp	x29, x30, [sp, #16]
   28d1c:	mov	w0, w8
   28d20:	add	sp, sp, #0x50
   28d24:	ret
   28d28:	stur	w0, [x29, #-4]
   28d2c:	mov	w8, #0xc                   	// #12
   28d30:	b	28d0c <rpl_re_set_registers@@Base+0xa164>
   28d34:	sub	sp, sp, #0x70
   28d38:	stp	x29, x30, [sp, #16]
   28d3c:	stp	x28, x27, [sp, #32]
   28d40:	stp	x26, x25, [sp, #48]
   28d44:	stp	x24, x23, [sp, #64]
   28d48:	stp	x22, x21, [sp, #80]
   28d4c:	stp	x20, x19, [sp, #96]
   28d50:	ldr	x8, [x3, #8]
   28d54:	add	x29, sp, #0x10
   28d58:	str	x2, [sp, #8]
   28d5c:	cmp	x8, #0x1
   28d60:	b.lt	28fec <rpl_re_set_registers@@Base+0xa444>  // b.tstop
   28d64:	mov	x19, x5
   28d68:	mov	x20, x4
   28d6c:	mov	x21, x3
   28d70:	mov	x23, x1
   28d74:	mov	x24, x0
   28d78:	mov	x28, xzr
   28d7c:	mov	w25, #0x28                  	// #40
   28d80:	ldr	x8, [x21, #16]
   28d84:	ldr	x8, [x8, x28, lsl #3]
   28d88:	madd	x9, x8, x25, x20
   28d8c:	ldr	x9, [x9, #16]
   28d90:	cmp	x9, x19
   28d94:	b.ge	28da8 <rpl_re_set_registers@@Base+0xa200>  // b.tcont
   28d98:	madd	x9, x8, x25, x20
   28d9c:	ldr	x9, [x9, #8]
   28da0:	cmp	x9, x19
   28da4:	b.ge	28dcc <rpl_re_set_registers@@Base+0xa224>  // b.tcont
   28da8:	mov	w8, #0x4                   	// #4
   28dac:	orr	w8, w8, #0x4
   28db0:	cmp	w8, #0x4
   28db4:	b.ne	28ff4 <rpl_re_set_registers@@Base+0xa44c>  // b.any
   28db8:	ldr	x8, [x21, #8]
   28dbc:	add	x28, x28, #0x1
   28dc0:	cmp	x28, x8
   28dc4:	b.lt	28d80 <rpl_re_set_registers@@Base+0xa1d8>  // b.tstop
   28dc8:	b	28fec <rpl_re_set_registers@@Base+0xa444>
   28dcc:	madd	x9, x8, x25, x20
   28dd0:	ldr	x10, [x9]
   28dd4:	ldr	x8, [x24]
   28dd8:	ldr	x9, [x9, #24]
   28ddc:	lsl	x10, x10, #4
   28de0:	ldr	x27, [x8, x10]
   28de4:	cmp	x9, x19
   28de8:	b.ne	28e68 <rpl_re_set_registers@@Base+0xa2c0>  // b.any
   28dec:	ldr	x9, [x23, #8]
   28df0:	cmp	x9, #0x1
   28df4:	b.lt	28f08 <rpl_re_set_registers@@Base+0xa360>  // b.tstop
   28df8:	ldp	x11, x10, [x23, #8]
   28dfc:	mov	x9, xzr
   28e00:	mov	x26, #0xffffffffffffffff    	// #-1
   28e04:	mov	x1, #0xffffffffffffffff    	// #-1
   28e08:	b	28e28 <rpl_re_set_registers@@Base+0xa280>
   28e0c:	lsl	x13, x12, #4
   28e10:	ldr	x13, [x8, x13]
   28e14:	cmp	x27, x13
   28e18:	csel	x26, x12, x26, eq  // eq = none
   28e1c:	add	x9, x9, #0x1
   28e20:	cmp	x9, x11
   28e24:	b.ge	28f10 <rpl_re_set_registers@@Base+0xa368>  // b.tcont
   28e28:	ldr	x12, [x10, x9, lsl #3]
   28e2c:	add	x13, x8, x12, lsl #4
   28e30:	ldrb	w13, [x13, #8]
   28e34:	cmp	w13, #0x9
   28e38:	b.eq	28e0c <rpl_re_set_registers@@Base+0xa264>  // b.none
   28e3c:	cmp	w13, #0x8
   28e40:	b.ne	28e1c <rpl_re_set_registers@@Base+0xa274>  // b.any
   28e44:	lsl	x14, x12, #4
   28e48:	ldr	x14, [x8, x14]
   28e4c:	cmp	x27, x14
   28e50:	b.ne	28e5c <rpl_re_set_registers@@Base+0xa2b4>  // b.any
   28e54:	mov	x1, x12
   28e58:	b	28e1c <rpl_re_set_registers@@Base+0xa274>
   28e5c:	cmp	w13, #0x9
   28e60:	b.ne	28e1c <rpl_re_set_registers@@Base+0xa274>  // b.any
   28e64:	b	28e0c <rpl_re_set_registers@@Base+0xa264>
   28e68:	ldr	x8, [x23, #8]
   28e6c:	cmp	x8, #0x1
   28e70:	b.lt	28fd0 <rpl_re_set_registers@@Base+0xa428>  // b.tstop
   28e74:	mov	x22, xzr
   28e78:	b	28eb0 <rpl_re_set_registers@@Base+0xa308>
   28e7c:	ldr	x3, [sp, #8]
   28e80:	mov	x0, x24
   28e84:	mov	x2, x23
   28e88:	bl	294ac <rpl_re_set_registers@@Base+0xa904>
   28e8c:	cbnz	w0, 28ef4 <rpl_re_set_registers@@Base+0xa34c>
   28e90:	mov	w8, wzr
   28e94:	cmp	w8, #0xd
   28e98:	b.eq	28ea0 <rpl_re_set_registers@@Base+0xa2f8>  // b.none
   28e9c:	cbnz	w8, 28dac <rpl_re_set_registers@@Base+0xa204>
   28ea0:	ldr	x8, [x23, #8]
   28ea4:	add	x22, x22, #0x1
   28ea8:	cmp	x22, x8
   28eac:	b.ge	28fd0 <rpl_re_set_registers@@Base+0xa428>  // b.tcont
   28eb0:	ldr	x8, [x23, #16]
   28eb4:	ldr	x1, [x8, x22, lsl #3]
   28eb8:	ldr	x8, [x24]
   28ebc:	add	x9, x8, x1, lsl #4
   28ec0:	ldr	w9, [x9, #8]
   28ec4:	and	w9, w9, #0xfe
   28ec8:	orr	w9, w9, #0x1
   28ecc:	cmp	w9, #0x9
   28ed0:	b.ne	28e90 <rpl_re_set_registers@@Base+0xa2e8>  // b.any
   28ed4:	lsl	x9, x1, #4
   28ed8:	ldr	x8, [x8, x9]
   28edc:	cmp	x27, x8
   28ee0:	b.eq	28e7c <rpl_re_set_registers@@Base+0xa2d4>  // b.none
   28ee4:	mov	w8, #0xd                   	// #13
   28ee8:	cmp	w8, #0xd
   28eec:	b.ne	28e9c <rpl_re_set_registers@@Base+0xa2f4>  // b.any
   28ef0:	b	28ea0 <rpl_re_set_registers@@Base+0xa2f8>
   28ef4:	mov	w8, #0x1                   	// #1
   28ef8:	str	w0, [sp, #4]
   28efc:	cmp	w8, #0xd
   28f00:	b.ne	28e9c <rpl_re_set_registers@@Base+0xa2f4>  // b.any
   28f04:	b	28ea0 <rpl_re_set_registers@@Base+0xa2f8>
   28f08:	mov	x1, #0xffffffffffffffff    	// #-1
   28f0c:	mov	x26, #0xffffffffffffffff    	// #-1
   28f10:	tbnz	x1, #63, 28f28 <rpl_re_set_registers@@Base+0xa380>
   28f14:	ldr	x3, [sp, #8]
   28f18:	mov	x0, x24
   28f1c:	mov	x2, x23
   28f20:	bl	294ac <rpl_re_set_registers@@Base+0xa904>
   28f24:	cbnz	w0, 28fd8 <rpl_re_set_registers@@Base+0xa430>
   28f28:	tbnz	x26, #63, 28fc4 <rpl_re_set_registers@@Base+0xa41c>
   28f2c:	ldr	x8, [x23, #8]
   28f30:	cmp	x8, #0x1
   28f34:	b.lt	28fc4 <rpl_re_set_registers@@Base+0xa41c>  // b.tstop
   28f38:	mov	x22, xzr
   28f3c:	b	28f58 <rpl_re_set_registers@@Base+0xa3b0>
   28f40:	mov	w8, wzr
   28f44:	cbnz	w8, 28fc8 <rpl_re_set_registers@@Base+0xa420>
   28f48:	ldr	x8, [x23, #8]
   28f4c:	add	x22, x22, #0x1
   28f50:	cmp	x22, x8
   28f54:	b.ge	28fc4 <rpl_re_set_registers@@Base+0xa41c>  // b.tcont
   28f58:	ldr	x8, [x23, #16]
   28f5c:	mov	w25, #0x18                  	// #24
   28f60:	mov	x1, x26
   28f64:	ldr	x27, [x8, x22, lsl #3]
   28f68:	ldr	x8, [x24, #56]
   28f6c:	madd	x0, x27, x25, x8
   28f70:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   28f74:	cbnz	x0, 28f40 <rpl_re_set_registers@@Base+0xa398>
   28f78:	ldr	x8, [x24, #48]
   28f7c:	mov	x1, x26
   28f80:	madd	x0, x27, x25, x8
   28f84:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   28f88:	cbnz	x0, 28f40 <rpl_re_set_registers@@Base+0xa398>
   28f8c:	ldr	x3, [sp, #8]
   28f90:	mov	x0, x24
   28f94:	mov	x1, x27
   28f98:	mov	x2, x23
   28f9c:	bl	294ac <rpl_re_set_registers@@Base+0xa904>
   28fa0:	ldr	w10, [sp, #4]
   28fa4:	cmp	w0, #0x0
   28fa8:	cset	w9, eq  // eq = none
   28fac:	cset	w8, ne  // ne = any
   28fb0:	csel	w10, w10, w0, eq  // eq = none
   28fb4:	sub	x22, x22, x9
   28fb8:	str	w10, [sp, #4]
   28fbc:	cbz	w8, 28f48 <rpl_re_set_registers@@Base+0xa3a0>
   28fc0:	b	28fc8 <rpl_re_set_registers@@Base+0xa420>
   28fc4:	mov	w8, wzr
   28fc8:	mov	w25, #0x28                  	// #40
   28fcc:	cbnz	w8, 28dac <rpl_re_set_registers@@Base+0xa204>
   28fd0:	mov	w8, wzr
   28fd4:	b	28dac <rpl_re_set_registers@@Base+0xa204>
   28fd8:	mov	w8, #0x1                   	// #1
   28fdc:	str	w0, [sp, #4]
   28fe0:	mov	w25, #0x28                  	// #40
   28fe4:	cbnz	w8, 28dac <rpl_re_set_registers@@Base+0xa204>
   28fe8:	b	28fd0 <rpl_re_set_registers@@Base+0xa428>
   28fec:	mov	w0, wzr
   28ff0:	b	28ff8 <rpl_re_set_registers@@Base+0xa450>
   28ff4:	ldr	w0, [sp, #4]
   28ff8:	ldp	x20, x19, [sp, #96]
   28ffc:	ldp	x22, x21, [sp, #80]
   29000:	ldp	x24, x23, [sp, #64]
   29004:	ldp	x26, x25, [sp, #48]
   29008:	ldp	x28, x27, [sp, #32]
   2900c:	ldp	x29, x30, [sp, #16]
   29010:	add	sp, sp, #0x70
   29014:	ret
   29018:	sub	sp, sp, #0xe0
   2901c:	stp	x29, x30, [sp, #128]
   29020:	stp	x28, x27, [sp, #144]
   29024:	stp	x26, x25, [sp, #160]
   29028:	stp	x24, x23, [sp, #176]
   2902c:	stp	x22, x21, [sp, #192]
   29030:	stp	x20, x19, [sp, #208]
   29034:	ldr	x22, [x0, #152]
   29038:	mov	x23, x1
   2903c:	mov	x1, x2
   29040:	add	x29, sp, #0x80
   29044:	mov	x19, x3
   29048:	mov	x20, x2
   2904c:	str	x0, [sp, #56]
   29050:	bl	26704 <rpl_re_set_registers@@Base+0x7b5c>
   29054:	cmn	x0, #0x1
   29058:	str	x0, [sp, #32]
   2905c:	b.eq	292bc <rpl_re_set_registers@@Base+0xa714>  // b.none
   29060:	str	xzr, [sp, #64]
   29064:	ldr	x8, [x19, #8]
   29068:	cmp	x8, #0x1
   2906c:	b.lt	292a0 <rpl_re_set_registers@@Base+0xa6f8>  // b.tstop
   29070:	add	x9, x20, #0x1
   29074:	str	x9, [sp]
   29078:	ldr	x9, [sp, #32]
   2907c:	add	x8, x23, #0x20
   29080:	str	x8, [sp, #48]
   29084:	add	x8, sp, #0x40
   29088:	add	x9, x9, x9, lsl #2
   2908c:	add	x8, x8, #0x20
   29090:	mov	x28, xzr
   29094:	str	x8, [sp, #40]
   29098:	lsl	x8, x9, #3
   2909c:	stp	x8, x19, [sp, #16]
   290a0:	b	290b4 <rpl_re_set_registers@@Base+0xa50c>
   290a4:	ldr	x8, [x19, #8]
   290a8:	add	x28, x28, #0x1
   290ac:	cmp	x28, x8
   290b0:	b.ge	292a0 <rpl_re_set_registers@@Base+0xa6f8>  // b.tcont
   290b4:	ldr	x8, [x19, #16]
   290b8:	ldr	x9, [x23, #16]
   290bc:	ldr	x26, [x8, x28, lsl #3]
   290c0:	ldr	x8, [x22]
   290c4:	cmp	x26, x9
   290c8:	add	x8, x8, x26, lsl #4
   290cc:	ldrb	w8, [x8, #8]
   290d0:	b.ne	290f0 <rpl_re_set_registers@@Base+0xa548>  // b.any
   290d4:	cmp	w8, #0x4
   290d8:	mov	w8, #0x4                   	// #4
   290dc:	b.ne	29284 <rpl_re_set_registers@@Base+0xa6dc>  // b.any
   290e0:	ldr	x9, [x23, #24]
   290e4:	cmp	x9, x20
   290e8:	b.ne	290f8 <rpl_re_set_registers@@Base+0xa550>  // b.any
   290ec:	b	29284 <rpl_re_set_registers@@Base+0xa6dc>
   290f0:	cmp	w8, #0x4
   290f4:	b.ne	29294 <rpl_re_set_registers@@Base+0xa6ec>  // b.any
   290f8:	ldr	x8, [sp, #56]
   290fc:	ldr	x24, [sp, #32]
   29100:	ldr	x19, [sp, #16]
   29104:	mov	w9, #0x28                  	// #40
   29108:	ldr	x8, [x8, #216]
   2910c:	madd	x21, x24, x9, x8
   29110:	b	29128 <rpl_re_set_registers@@Base+0xa580>
   29114:	ldrb	w8, [x21, #32]
   29118:	add	x24, x24, #0x1
   2911c:	add	x21, x21, #0x28
   29120:	add	x19, x19, #0x28
   29124:	cbz	w8, 29280 <rpl_re_set_registers@@Base+0xa6d8>
   29128:	ldr	x8, [x21]
   2912c:	cmp	x8, x26
   29130:	b.ne	291a8 <rpl_re_set_registers@@Base+0xa600>  // b.any
   29134:	ldp	x9, x8, [x21, #16]
   29138:	subs	x8, x8, x9
   2913c:	add	x25, x8, x20
   29140:	b.eq	29150 <rpl_re_set_registers@@Base+0xa5a8>  // b.none
   29144:	ldr	x8, [x22, #24]
   29148:	add	x8, x8, x26, lsl #3
   2914c:	b	29160 <rpl_re_set_registers@@Base+0xa5b8>
   29150:	ldr	x8, [x22, #40]
   29154:	mov	w9, #0x18                  	// #24
   29158:	madd	x8, x26, x9, x8
   2915c:	ldr	x8, [x8, #16]
   29160:	ldr	x9, [x23, #24]
   29164:	cmp	x25, x9
   29168:	b.gt	291a8 <rpl_re_set_registers@@Base+0xa600>
   2916c:	ldr	x9, [x23]
   29170:	ldr	x9, [x9, x25, lsl #3]
   29174:	cbz	x9, 291a8 <rpl_re_set_registers@@Base+0xa600>
   29178:	ldr	x27, [x8]
   2917c:	add	x0, x9, #0x8
   29180:	mov	x1, x27
   29184:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29188:	cbz	x0, 291a8 <rpl_re_set_registers@@Base+0xa600>
   2918c:	ldp	x1, x0, [sp, #48]
   29190:	mov	x2, x26
   29194:	mov	x3, x20
   29198:	mov	x4, x27
   2919c:	mov	x5, x25
   291a0:	bl	296b0 <rpl_re_set_registers@@Base+0xab08>
   291a4:	tbz	w0, #0, 291bc <rpl_re_set_registers@@Base+0xa614>
   291a8:	mov	w8, #0x6                   	// #6
   291ac:	cmp	w8, #0x6
   291b0:	b.eq	29114 <rpl_re_set_registers@@Base+0xa56c>  // b.none
   291b4:	cbz	w8, 29114 <rpl_re_set_registers@@Base+0xa56c>
   291b8:	b	29280 <rpl_re_set_registers@@Base+0xa6d8>
   291bc:	ldr	x8, [sp, #64]
   291c0:	cbnz	x8, 291e8 <rpl_re_set_registers@@Base+0xa640>
   291c4:	ldr	x8, [x23, #48]
   291c8:	ldp	q1, q0, [x23, #16]
   291cc:	ldr	q2, [x23]
   291d0:	ldp	x0, x1, [sp, #40]
   291d4:	str	x8, [sp, #112]
   291d8:	stp	q1, q0, [sp, #80]
   291dc:	str	q2, [sp, #64]
   291e0:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   291e4:	cbnz	w0, 29264 <rpl_re_set_registers@@Base+0xa6bc>
   291e8:	ldr	x0, [sp, #40]
   291ec:	mov	x1, x24
   291f0:	stp	x26, x20, [sp, #80]
   291f4:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   291f8:	tbz	w0, #0, 29270 <rpl_re_set_registers@@Base+0xa6c8>
   291fc:	ldp	x0, x25, [sp, #56]
   29200:	add	x1, sp, #0x40
   29204:	ldr	x27, [x25, x20, lsl #3]
   29208:	bl	287f8 <rpl_re_set_registers@@Base+0x9c50>
   2920c:	cbnz	w0, 29264 <rpl_re_set_registers@@Base+0xa6bc>
   29210:	ldr	x1, [x23, #8]
   29214:	cbz	x1, 2922c <rpl_re_set_registers@@Base+0xa684>
   29218:	ldr	x3, [sp]
   2921c:	mov	x0, x22
   29220:	mov	x2, x25
   29224:	bl	288f4 <rpl_re_set_registers@@Base+0x9d4c>
   29228:	cbnz	w0, 29264 <rpl_re_set_registers@@Base+0xa6bc>
   2922c:	ldr	x21, [sp, #40]
   29230:	str	w0, [sp, #12]
   29234:	mov	x1, x24
   29238:	str	x27, [x25, x20, lsl #3]
   2923c:	mov	x0, x21
   29240:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29244:	sub	x1, x0, #0x1
   29248:	mov	x0, x21
   2924c:	bl	24434 <rpl_re_set_registers@@Base+0x588c>
   29250:	ldr	x9, [sp, #56]
   29254:	mov	w8, wzr
   29258:	ldr	x9, [x9, #216]
   2925c:	add	x21, x9, x19
   29260:	b	291ac <rpl_re_set_registers@@Base+0xa604>
   29264:	str	w0, [sp, #12]
   29268:	mov	w8, #0x7                   	// #7
   2926c:	b	291ac <rpl_re_set_registers@@Base+0xa604>
   29270:	mov	w8, #0xc                   	// #12
   29274:	str	w8, [sp, #12]
   29278:	mov	w8, #0x7                   	// #7
   2927c:	b	291ac <rpl_re_set_registers@@Base+0xa604>
   29280:	ldr	x19, [sp, #24]
   29284:	cbz	w8, 290a4 <rpl_re_set_registers@@Base+0xa4fc>
   29288:	cmp	w8, #0x4
   2928c:	b.eq	290a4 <rpl_re_set_registers@@Base+0xa4fc>  // b.none
   29290:	b	292c4 <rpl_re_set_registers@@Base+0xa71c>
   29294:	mov	w8, #0x4                   	// #4
   29298:	cbnz	w8, 29288 <rpl_re_set_registers@@Base+0xa6e0>
   2929c:	b	290a4 <rpl_re_set_registers@@Base+0xa4fc>
   292a0:	str	wzr, [sp, #12]
   292a4:	ldr	x8, [sp, #64]
   292a8:	cbz	x8, 292b4 <rpl_re_set_registers@@Base+0xa70c>
   292ac:	ldr	x0, [sp, #112]
   292b0:	bl	b1d0 <free@plt>
   292b4:	ldr	w0, [sp, #12]
   292b8:	b	292cc <rpl_re_set_registers@@Base+0xa724>
   292bc:	mov	w0, wzr
   292c0:	b	292cc <rpl_re_set_registers@@Base+0xa724>
   292c4:	cmp	w8, #0x7
   292c8:	b.eq	292a4 <rpl_re_set_registers@@Base+0xa6fc>  // b.none
   292cc:	ldp	x20, x19, [sp, #208]
   292d0:	ldp	x22, x21, [sp, #192]
   292d4:	ldp	x24, x23, [sp, #176]
   292d8:	ldp	x26, x25, [sp, #160]
   292dc:	ldp	x28, x27, [sp, #144]
   292e0:	ldp	x29, x30, [sp, #128]
   292e4:	add	sp, sp, #0xe0
   292e8:	ret
   292ec:	stp	x29, x30, [sp, #-48]!
   292f0:	stp	x22, x21, [sp, #16]
   292f4:	stp	x20, x19, [sp, #32]
   292f8:	ldr	x8, [x1, #8]
   292fc:	mov	x29, sp
   29300:	cbz	x8, 29490 <rpl_re_set_registers@@Base+0xa8e8>
   29304:	ldr	x10, [x2, #8]
   29308:	mov	x20, x2
   2930c:	cbz	x10, 29490 <rpl_re_set_registers@@Base+0xa8e8>
   29310:	ldp	x9, x11, [x0]
   29314:	add	x8, x10, x8
   29318:	mov	x21, x1
   2931c:	mov	x19, x0
   29320:	add	x10, x11, x8
   29324:	cmp	x10, x9
   29328:	b.le	29348 <rpl_re_set_registers@@Base+0xa7a0>
   2932c:	ldr	x0, [x19, #16]
   29330:	add	x22, x9, x8
   29334:	lsl	x1, x22, #3
   29338:	bl	aea0 <realloc@plt>
   2933c:	cbz	x0, 294a4 <rpl_re_set_registers@@Base+0xa8fc>
   29340:	str	x0, [x19, #16]
   29344:	str	x22, [x19]
   29348:	ldr	x13, [x19, #8]
   2934c:	ldp	x8, x9, [x21, #8]
   29350:	ldp	x14, x10, [x20, #8]
   29354:	add	x15, x8, x13
   29358:	sub	x12, x8, #0x1
   2935c:	sub	x11, x14, #0x1
   29360:	add	x8, x15, x14
   29364:	sub	x13, x13, #0x1
   29368:	ldr	x14, [x9, x12, lsl #3]
   2936c:	ldr	x15, [x10, x11, lsl #3]
   29370:	cmp	x14, x15
   29374:	b.eq	2938c <rpl_re_set_registers@@Base+0xa7e4>  // b.none
   29378:	b.lt	293e8 <rpl_re_set_registers@@Base+0xa840>  // b.tstop
   2937c:	cmp	x12, #0x0
   29380:	sub	x12, x12, #0x1
   29384:	b.gt	29368 <rpl_re_set_registers@@Base+0xa7c0>
   29388:	b	293f0 <rpl_re_set_registers@@Base+0xa848>
   2938c:	tbnz	x13, #63, 293b4 <rpl_re_set_registers@@Base+0xa80c>
   29390:	ldr	x15, [x19, #16]
   29394:	mov	x16, x13
   29398:	ldr	x13, [x15, x16, lsl #3]
   2939c:	cmp	x13, x14
   293a0:	b.le	293bc <rpl_re_set_registers@@Base+0xa814>
   293a4:	sub	x13, x16, #0x1
   293a8:	cmp	x16, #0x0
   293ac:	mov	x16, x13
   293b0:	b.gt	29398 <rpl_re_set_registers@@Base+0xa7f0>
   293b4:	tbz	x13, #63, 293c4 <rpl_re_set_registers@@Base+0xa81c>
   293b8:	b	293d4 <rpl_re_set_registers@@Base+0xa82c>
   293bc:	mov	x13, x16
   293c0:	tbnz	x13, #63, 293d4 <rpl_re_set_registers@@Base+0xa82c>
   293c4:	ldr	x15, [x19, #16]
   293c8:	ldr	x15, [x15, x13, lsl #3]
   293cc:	cmp	x15, x14
   293d0:	b.eq	293e0 <rpl_re_set_registers@@Base+0xa838>  // b.none
   293d4:	ldr	x15, [x19, #16]
   293d8:	sub	x8, x8, #0x1
   293dc:	str	x14, [x15, x8, lsl #3]
   293e0:	subs	x12, x12, #0x1
   293e4:	b.lt	293f0 <rpl_re_set_registers@@Base+0xa848>  // b.tstop
   293e8:	subs	x11, x11, #0x1
   293ec:	b.ge	29368 <rpl_re_set_registers@@Base+0xa7c0>  // b.tcont
   293f0:	ldr	x13, [x19, #8]
   293f4:	ldr	x14, [x21, #8]
   293f8:	ldr	x15, [x20, #8]
   293fc:	subs	x11, x13, #0x1
   29400:	add	x9, x13, x14
   29404:	add	x9, x9, x15
   29408:	sub	x10, x9, #0x1
   2940c:	sub	x12, x10, x8
   29410:	add	x9, x12, #0x1
   29414:	add	x16, x9, x13
   29418:	str	x16, [x19, #8]
   2941c:	b.lt	2947c <rpl_re_set_registers@@Base+0xa8d4>  // b.tstop
   29420:	tbnz	x12, #63, 2947c <rpl_re_set_registers@@Base+0xa8d4>
   29424:	ldr	x12, [x19, #16]
   29428:	add	x13, x13, x15
   2942c:	add	x13, x13, x14
   29430:	sub	x13, x13, x8
   29434:	add	x13, x12, x13, lsl #3
   29438:	ldr	x15, [x12, x10, lsl #3]
   2943c:	ldr	x14, [x12, x11, lsl #3]
   29440:	cmp	x15, x14
   29444:	b.gt	29460 <rpl_re_set_registers@@Base+0xa8b8>
   29448:	sub	x15, x11, #0x1
   2944c:	cmp	x11, #0x0
   29450:	str	x14, [x13, x11, lsl #3]
   29454:	mov	x11, x15
   29458:	b.gt	29438 <rpl_re_set_registers@@Base+0xa890>
   2945c:	b	2947c <rpl_re_set_registers@@Base+0xa8d4>
   29460:	mov	x14, xzr
   29464:	sub	x10, x10, #0x1
   29468:	sub	x9, x9, #0x1
   2946c:	str	x15, [x13, x11, lsl #3]
   29470:	sub	x13, x13, #0x8
   29474:	cbnz	x9, 29438 <rpl_re_set_registers@@Base+0xa890>
   29478:	b	29480 <rpl_re_set_registers@@Base+0xa8d8>
   2947c:	mov	x14, x9
   29480:	ldr	x0, [x19, #16]
   29484:	lsl	x2, x14, #3
   29488:	add	x1, x0, x8, lsl #3
   2948c:	bl	a800 <memcpy@plt>
   29490:	mov	w0, wzr
   29494:	ldp	x20, x19, [sp, #32]
   29498:	ldp	x22, x21, [sp, #16]
   2949c:	ldp	x29, x30, [sp], #48
   294a0:	ret
   294a4:	mov	w0, #0xc                   	// #12
   294a8:	b	29494 <rpl_re_set_registers@@Base+0xa8ec>
   294ac:	sub	sp, sp, #0x90
   294b0:	stp	x29, x30, [sp, #48]
   294b4:	stp	x28, x27, [sp, #64]
   294b8:	stp	x26, x25, [sp, #80]
   294bc:	stp	x24, x23, [sp, #96]
   294c0:	stp	x22, x21, [sp, #112]
   294c4:	stp	x20, x19, [sp, #128]
   294c8:	ldr	x9, [x0, #56]
   294cc:	mov	w8, #0x18                  	// #24
   294d0:	stp	xzr, xzr, [sp, #24]
   294d4:	str	xzr, [sp, #40]
   294d8:	madd	x23, x1, x8, x9
   294dc:	stp	x3, x9, [sp, #8]
   294e0:	mov	x27, x23
   294e4:	ldr	x8, [x27, #8]!
   294e8:	mov	x20, x1
   294ec:	mov	x19, x2
   294f0:	add	x29, sp, #0x30
   294f4:	cmp	x8, #0x1
   294f8:	b.lt	29614 <rpl_re_set_registers@@Base+0xaa6c>  // b.tstop
   294fc:	ldr	x8, [sp, #16]
   29500:	mov	w9, #0x18                  	// #24
   29504:	mov	x22, x0
   29508:	mov	x21, xzr
   2950c:	madd	x8, x20, x9, x8
   29510:	add	x24, x8, #0x10
   29514:	ldr	x8, [x24]
   29518:	ldr	x28, [x8, x21, lsl #3]
   2951c:	cmp	x28, x20
   29520:	b.ne	2952c <rpl_re_set_registers@@Base+0xa984>  // b.any
   29524:	mov	w8, #0x4                   	// #4
   29528:	b	295d8 <rpl_re_set_registers@@Base+0xaa30>
   2952c:	ldr	x8, [x22]
   29530:	add	x8, x8, x28, lsl #4
   29534:	ldrb	w8, [x8, #8]
   29538:	tbz	w8, #3, 295d4 <rpl_re_set_registers@@Base+0xaa2c>
   2953c:	ldr	x8, [x22, #40]
   29540:	mov	w9, #0x18                  	// #24
   29544:	madd	x9, x28, x9, x8
   29548:	ldp	x9, x8, [x9, #8]
   2954c:	ldr	x26, [x8]
   29550:	cmp	x9, #0x2
   29554:	b.lt	29560 <rpl_re_set_registers@@Base+0xa9b8>  // b.tstop
   29558:	ldr	x25, [x8, #8]
   2955c:	b	29564 <rpl_re_set_registers@@Base+0xa9bc>
   29560:	mov	x25, #0xffffffffffffffff    	// #-1
   29564:	mov	x0, x23
   29568:	mov	x1, x26
   2956c:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29570:	cbz	x0, 295a0 <rpl_re_set_registers@@Base+0xa9f8>
   29574:	cmp	x25, #0x1
   29578:	b.lt	295cc <rpl_re_set_registers@@Base+0xaa24>  // b.tstop
   2957c:	mov	x0, x23
   29580:	mov	x1, x25
   29584:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29588:	cbnz	x0, 295cc <rpl_re_set_registers@@Base+0xaa24>
   2958c:	mov	x0, x19
   29590:	mov	x1, x25
   29594:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29598:	cbnz	x0, 295b0 <rpl_re_set_registers@@Base+0xaa08>
   2959c:	b	295cc <rpl_re_set_registers@@Base+0xaa24>
   295a0:	mov	x0, x19
   295a4:	mov	x1, x26
   295a8:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   295ac:	cbz	x0, 29574 <rpl_re_set_registers@@Base+0xa9cc>
   295b0:	ldr	x8, [x22, #56]
   295b4:	ldr	x1, [sp, #8]
   295b8:	mov	w9, #0x18                  	// #24
   295bc:	add	x0, sp, #0x18
   295c0:	madd	x2, x28, x9, x8
   295c4:	bl	292ec <rpl_re_set_registers@@Base+0xa744>
   295c8:	cbnz	w0, 295f8 <rpl_re_set_registers@@Base+0xaa50>
   295cc:	mov	w8, wzr
   295d0:	cbnz	w8, 295d8 <rpl_re_set_registers@@Base+0xaa30>
   295d4:	mov	w8, wzr
   295d8:	orr	w8, w8, #0x4
   295dc:	cmp	w8, #0x4
   295e0:	b.ne	2968c <rpl_re_set_registers@@Base+0xaae4>  // b.any
   295e4:	ldr	x8, [x27]
   295e8:	add	x21, x21, #0x1
   295ec:	cmp	x21, x8
   295f0:	b.lt	29514 <rpl_re_set_registers@@Base+0xa96c>  // b.tstop
   295f4:	b	29614 <rpl_re_set_registers@@Base+0xaa6c>
   295f8:	mov	w25, w0
   295fc:	ldr	x0, [sp, #40]
   29600:	bl	b1d0 <free@plt>
   29604:	mov	w8, #0x1                   	// #1
   29608:	str	w25, [sp, #4]
   2960c:	cbnz	w8, 295d8 <rpl_re_set_registers@@Base+0xaa30>
   29610:	b	295d4 <rpl_re_set_registers@@Base+0xaa2c>
   29614:	ldr	x8, [x27]
   29618:	cmp	x8, #0x1
   2961c:	b.lt	2967c <rpl_re_set_registers@@Base+0xaad4>  // b.tstop
   29620:	ldr	x9, [sp, #16]
   29624:	mov	w8, #0x18                  	// #24
   29628:	mov	x21, xzr
   2962c:	madd	x8, x20, x8, x9
   29630:	add	x22, x8, #0x10
   29634:	b	29648 <rpl_re_set_registers@@Base+0xaaa0>
   29638:	ldr	x8, [x27]
   2963c:	add	x21, x21, #0x1
   29640:	cmp	x21, x8
   29644:	b.ge	2967c <rpl_re_set_registers@@Base+0xaad4>  // b.tcont
   29648:	ldr	x8, [x22]
   2964c:	add	x0, sp, #0x18
   29650:	ldr	x20, [x8, x21, lsl #3]
   29654:	mov	x1, x20
   29658:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   2965c:	cbnz	x0, 29638 <rpl_re_set_registers@@Base+0xaa90>
   29660:	mov	x0, x19
   29664:	mov	x1, x20
   29668:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   2966c:	sub	x1, x0, #0x1
   29670:	mov	x0, x19
   29674:	bl	24434 <rpl_re_set_registers@@Base+0x588c>
   29678:	b	29638 <rpl_re_set_registers@@Base+0xaa90>
   2967c:	ldr	x0, [sp, #40]
   29680:	bl	b1d0 <free@plt>
   29684:	mov	w0, wzr
   29688:	b	29690 <rpl_re_set_registers@@Base+0xaae8>
   2968c:	ldr	w0, [sp, #4]
   29690:	ldp	x20, x19, [sp, #128]
   29694:	ldp	x22, x21, [sp, #112]
   29698:	ldp	x24, x23, [sp, #96]
   2969c:	ldp	x26, x25, [sp, #80]
   296a0:	ldp	x28, x27, [sp, #64]
   296a4:	ldp	x29, x30, [sp, #48]
   296a8:	add	sp, sp, #0x90
   296ac:	ret
   296b0:	sub	sp, sp, #0x70
   296b4:	stp	x24, x23, [sp, #64]
   296b8:	mov	x23, x1
   296bc:	mov	x1, x3
   296c0:	stp	x29, x30, [sp, #16]
   296c4:	stp	x28, x27, [sp, #32]
   296c8:	stp	x26, x25, [sp, #48]
   296cc:	stp	x22, x21, [sp, #80]
   296d0:	stp	x20, x19, [sp, #96]
   296d4:	add	x29, sp, #0x10
   296d8:	mov	x19, x5
   296dc:	stp	x2, x4, [sp]
   296e0:	mov	x21, x3
   296e4:	mov	x24, x0
   296e8:	bl	26704 <rpl_re_set_registers@@Base+0x7b5c>
   296ec:	mov	x25, x0
   296f0:	mov	x0, x24
   296f4:	mov	x1, x19
   296f8:	bl	26704 <rpl_re_set_registers@@Base+0x7b5c>
   296fc:	ldr	x8, [x23, #8]
   29700:	cmp	x8, #0x1
   29704:	b.lt	29790 <rpl_re_set_registers@@Base+0xabe8>  // b.tstop
   29708:	ldr	x22, [x24, #152]
   2970c:	mov	x26, x0
   29710:	mov	x20, xzr
   29714:	ldr	x8, [x23, #16]
   29718:	lsl	x28, x20, #3
   2971c:	mov	w9, #0x28                  	// #40
   29720:	ldr	x3, [sp]
   29724:	ldr	x1, [x8, x28]
   29728:	ldr	x8, [x24, #216]
   2972c:	mov	x0, x24
   29730:	mov	x4, x21
   29734:	mul	x9, x1, x9
   29738:	ldr	x8, [x8, x9]
   2973c:	ldr	x9, [x22]
   29740:	mov	x5, x25
   29744:	lsl	x8, x8, #4
   29748:	ldr	x27, [x9, x8]
   2974c:	mov	x2, x27
   29750:	bl	297bc <rpl_re_set_registers@@Base+0xac14>
   29754:	ldr	x8, [x23, #16]
   29758:	ldr	x3, [sp, #8]
   2975c:	mov	x2, x27
   29760:	mov	x4, x19
   29764:	ldr	x1, [x8, x28]
   29768:	mov	w28, w0
   2976c:	mov	x0, x24
   29770:	mov	x5, x26
   29774:	bl	297bc <rpl_re_set_registers@@Base+0xac14>
   29778:	cmp	w0, w28
   2977c:	b.ne	29798 <rpl_re_set_registers@@Base+0xabf0>  // b.any
   29780:	ldr	x8, [x23, #8]
   29784:	add	x20, x20, #0x1
   29788:	cmp	x20, x8
   2978c:	b.lt	29714 <rpl_re_set_registers@@Base+0xab6c>  // b.tstop
   29790:	mov	w0, wzr
   29794:	b	2979c <rpl_re_set_registers@@Base+0xabf4>
   29798:	mov	w0, #0x1                   	// #1
   2979c:	ldp	x20, x19, [sp, #96]
   297a0:	ldp	x22, x21, [sp, #80]
   297a4:	ldp	x24, x23, [sp, #64]
   297a8:	ldp	x26, x25, [sp, #48]
   297ac:	ldp	x28, x27, [sp, #32]
   297b0:	ldp	x29, x30, [sp, #16]
   297b4:	add	sp, sp, #0x70
   297b8:	ret
   297bc:	stp	x29, x30, [sp, #-16]!
   297c0:	ldr	x9, [x0, #216]
   297c4:	mov	w8, #0x28                  	// #40
   297c8:	mov	x29, sp
   297cc:	madd	x8, x1, x8, x9
   297d0:	ldr	x8, [x8, #16]
   297d4:	cmp	x8, x4
   297d8:	b.le	297e8 <rpl_re_set_registers@@Base+0xac40>
   297dc:	mov	w0, #0xffffffff            	// #-1
   297e0:	ldp	x29, x30, [sp], #16
   297e4:	ret
   297e8:	mov	w10, #0x28                  	// #40
   297ec:	madd	x9, x1, x10, x9
   297f0:	ldr	x9, [x9, #24]
   297f4:	cmp	x9, x4
   297f8:	b.ge	29808 <rpl_re_set_registers@@Base+0xac60>  // b.tcont
   297fc:	mov	w0, #0x1                   	// #1
   29800:	ldp	x29, x30, [sp], #16
   29804:	ret
   29808:	cmp	x8, x4
   2980c:	cset	w1, eq  // eq = none
   29810:	cmp	x9, x4
   29814:	cset	w8, eq  // eq = none
   29818:	bfi	w1, w8, #1, #1
   2981c:	cbz	w1, 29830 <rpl_re_set_registers@@Base+0xac88>
   29820:	mov	x4, x5
   29824:	bl	2983c <rpl_re_set_registers@@Base+0xac94>
   29828:	ldp	x29, x30, [sp], #16
   2982c:	ret
   29830:	mov	w0, wzr
   29834:	ldp	x29, x30, [sp], #16
   29838:	ret
   2983c:	sub	sp, sp, #0x90
   29840:	stp	x29, x30, [sp, #48]
   29844:	stp	x28, x27, [sp, #64]
   29848:	stp	x26, x25, [sp, #80]
   2984c:	stp	x24, x23, [sp, #96]
   29850:	stp	x22, x21, [sp, #112]
   29854:	stp	x20, x19, [sp, #128]
   29858:	ldr	x25, [x0, #152]
   2985c:	add	x29, sp, #0x30
   29860:	mov	w9, #0x18                  	// #24
   29864:	stur	x0, [x29, #-8]
   29868:	ldr	x8, [x25, #48]
   2986c:	madd	x26, x3, x9, x8
   29870:	ldr	x9, [x26, #8]!
   29874:	cmp	x9, #0x1
   29878:	ubfx	w9, w1, #1, #1
   2987c:	str	w9, [sp, #24]
   29880:	b.lt	29a80 <rpl_re_set_registers@@Base+0xaed8>  // b.tstop
   29884:	mov	w11, #0x18                  	// #24
   29888:	madd	x8, x3, x11, x8
   2988c:	add	x12, x8, #0x10
   29890:	ldr	w8, [sp, #24]
   29894:	and	w10, w1, #0x2
   29898:	cmp	x2, #0x3f
   2989c:	str	w10, [sp, #20]
   298a0:	sbfx	w10, w1, #0, #1
   298a4:	mov	w9, #0x1                   	// #1
   298a8:	stur	w10, [x29, #-20]
   298ac:	cset	w10, gt
   298b0:	lsl	x9, x9, x2
   298b4:	orr	w8, w8, w10
   298b8:	str	w8, [sp, #16]
   298bc:	mvn	w8, w9
   298c0:	mov	x20, x3
   298c4:	mov	x21, x2
   298c8:	mov	w22, w1
   298cc:	mov	x28, xzr
   298d0:	stur	x9, [x29, #-16]
   298d4:	str	w8, [sp, #12]
   298d8:	str	x12, [sp]
   298dc:	b	298f8 <rpl_re_set_registers@@Base+0xad50>
   298e0:	mov	w8, wzr
   298e4:	cbnz	wzr, 29a84 <rpl_re_set_registers@@Base+0xaedc>
   298e8:	ldr	x8, [x26]
   298ec:	add	x28, x28, #0x1
   298f0:	cmp	x28, x8
   298f4:	b.ge	29a80 <rpl_re_set_registers@@Base+0xaed8>  // b.tcont
   298f8:	ldr	x8, [x12]
   298fc:	ldr	x23, [x8, x28, lsl #3]
   29900:	ldr	x8, [x25]
   29904:	add	x8, x8, x23, lsl #4
   29908:	ldrb	w9, [x8, #8]
   2990c:	cmp	w9, #0x9
   29910:	b.eq	29a34 <rpl_re_set_registers@@Base+0xae8c>  // b.none
   29914:	cmp	w9, #0x8
   29918:	b.eq	29a50 <rpl_re_set_registers@@Base+0xaea8>  // b.none
   2991c:	cmp	w9, #0x4
   29920:	b.ne	298e0 <rpl_re_set_registers@@Base+0xad38>  // b.any
   29924:	cmn	x4, #0x1
   29928:	b.eq	298e0 <rpl_re_set_registers@@Base+0xad38>  // b.none
   2992c:	ldur	x8, [x29, #-8]
   29930:	mov	w9, #0x28                  	// #40
   29934:	ldr	x8, [x8, #216]
   29938:	madd	x8, x4, x9, x8
   2993c:	add	x19, x8, #0x22
   29940:	b	29950 <rpl_re_set_registers@@Base+0xada8>
   29944:	ldurb	w8, [x19, #-2]
   29948:	add	x19, x19, #0x28
   2994c:	cbz	w8, 29a70 <rpl_re_set_registers@@Base+0xaec8>
   29950:	ldur	x8, [x19, #-34]
   29954:	cmp	x8, x23
   29958:	b.ne	29998 <rpl_re_set_registers@@Base+0xadf0>  // b.any
   2995c:	cmp	x21, #0x3f
   29960:	b.gt	29974 <rpl_re_set_registers@@Base+0xadcc>
   29964:	ldrh	w8, [x19]
   29968:	ldur	x9, [x29, #-16]
   2996c:	tst	x9, x8
   29970:	b.eq	29998 <rpl_re_set_registers@@Base+0xadf0>  // b.none
   29974:	ldr	x8, [x25, #40]
   29978:	madd	x8, x23, x11, x8
   2997c:	ldr	x8, [x8, #16]
   29980:	ldr	x3, [x8]
   29984:	cmp	x3, x20
   29988:	b.ne	299ac <rpl_re_set_registers@@Base+0xae04>  // b.any
   2998c:	ldur	w24, [x29, #-20]
   29990:	mov	w8, #0x1                   	// #1
   29994:	b	2999c <rpl_re_set_registers@@Base+0xadf4>
   29998:	mov	w8, #0x7                   	// #7
   2999c:	cmp	w8, #0x7
   299a0:	b.eq	29944 <rpl_re_set_registers@@Base+0xad9c>  // b.none
   299a4:	cbz	w8, 29944 <rpl_re_set_registers@@Base+0xad9c>
   299a8:	b	29a70 <rpl_re_set_registers@@Base+0xaec8>
   299ac:	ldur	x0, [x29, #-8]
   299b0:	mov	w1, w22
   299b4:	mov	x2, x21
   299b8:	mov	x27, x4
   299bc:	bl	2983c <rpl_re_set_registers@@Base+0xac94>
   299c0:	cmn	w0, #0x1
   299c4:	b.eq	299f0 <rpl_re_set_registers@@Base+0xae48>  // b.none
   299c8:	cbnz	w0, 29a04 <rpl_re_set_registers@@Base+0xae5c>
   299cc:	ldp	w9, w8, [sp, #16]
   299d0:	mov	x4, x27
   299d4:	mov	w11, #0x18                  	// #24
   299d8:	cmp	w8, #0x0
   299dc:	csel	w8, wzr, w24, ne  // ne = any
   299e0:	tbz	w9, #0, 29a14 <rpl_re_set_registers@@Base+0xae6c>
   299e4:	mov	w24, w8
   299e8:	ldr	w8, [sp, #24]
   299ec:	b	2999c <rpl_re_set_registers@@Base+0xadf4>
   299f0:	mov	w8, #0x1                   	// #1
   299f4:	mov	w24, w0
   299f8:	mov	x4, x27
   299fc:	mov	w11, #0x18                  	// #24
   29a00:	b	2999c <rpl_re_set_registers@@Base+0xadf4>
   29a04:	cmp	x21, #0x3f
   29a08:	mov	x4, x27
   29a0c:	mov	w11, #0x18                  	// #24
   29a10:	b.gt	29a2c <rpl_re_set_registers@@Base+0xae84>
   29a14:	ldrh	w9, [x19]
   29a18:	ldr	w10, [sp, #12]
   29a1c:	mov	w8, wzr
   29a20:	and	w9, w9, w10
   29a24:	strh	w9, [x19]
   29a28:	b	2999c <rpl_re_set_registers@@Base+0xadf4>
   29a2c:	mov	w8, wzr
   29a30:	b	2999c <rpl_re_set_registers@@Base+0xadf4>
   29a34:	tbz	w22, #1, 298e0 <rpl_re_set_registers@@Base+0xad38>
   29a38:	ldr	x8, [x8]
   29a3c:	cmp	x8, x21
   29a40:	b.ne	298e0 <rpl_re_set_registers@@Base+0xad38>  // b.any
   29a44:	mov	w24, wzr
   29a48:	mov	w8, #0x1                   	// #1
   29a4c:	b	29a78 <rpl_re_set_registers@@Base+0xaed0>
   29a50:	tbz	w22, #0, 298e0 <rpl_re_set_registers@@Base+0xad38>
   29a54:	ldr	x8, [x8]
   29a58:	cmp	x8, x21
   29a5c:	b.ne	298e0 <rpl_re_set_registers@@Base+0xad38>  // b.any
   29a60:	mov	w8, #0x1                   	// #1
   29a64:	mov	w24, #0xffffffff            	// #-1
   29a68:	cbz	w8, 298e8 <rpl_re_set_registers@@Base+0xad40>
   29a6c:	b	29a84 <rpl_re_set_registers@@Base+0xaedc>
   29a70:	ldr	x12, [sp]
   29a74:	cbz	w8, 298e0 <rpl_re_set_registers@@Base+0xad38>
   29a78:	cbz	w8, 298e8 <rpl_re_set_registers@@Base+0xad40>
   29a7c:	b	29a84 <rpl_re_set_registers@@Base+0xaedc>
   29a80:	ldr	w24, [sp, #24]
   29a84:	mov	w0, w24
   29a88:	ldp	x20, x19, [sp, #128]
   29a8c:	ldp	x22, x21, [sp, #112]
   29a90:	ldp	x24, x23, [sp, #96]
   29a94:	ldp	x26, x25, [sp, #80]
   29a98:	ldp	x28, x27, [sp, #64]
   29a9c:	ldp	x29, x30, [sp, #48]
   29aa0:	add	sp, sp, #0x90
   29aa4:	ret
   29aa8:	stp	x29, x30, [sp, #-64]!
   29aac:	stp	x24, x23, [sp, #16]
   29ab0:	stp	x22, x21, [sp, #32]
   29ab4:	stp	x20, x19, [sp, #48]
   29ab8:	ldr	x21, [x0, #152]
   29abc:	mov	x20, x2
   29ac0:	mov	x2, x0
   29ac4:	mov	x23, x1
   29ac8:	mov	x0, x21
   29acc:	mov	x1, x20
   29ad0:	mov	x29, sp
   29ad4:	mov	x22, x4
   29ad8:	mov	x24, x3
   29adc:	bl	276e0 <rpl_re_set_registers@@Base+0x8b38>
   29ae0:	mov	w19, w0
   29ae4:	cmp	w0, #0x1
   29ae8:	b.lt	29b1c <rpl_re_set_registers@@Base+0xaf74>  // b.tstop
   29aec:	add	x8, x24, w19, sxtw
   29af0:	cmp	x8, x22
   29af4:	b.gt	29b1c <rpl_re_set_registers@@Base+0xaf74>
   29af8:	ldr	x9, [x23]
   29afc:	ldr	x8, [x9, x8, lsl #3]
   29b00:	cbz	x8, 29b18 <rpl_re_set_registers@@Base+0xaf70>
   29b04:	ldr	x9, [x21, #24]
   29b08:	add	x0, x8, #0x8
   29b0c:	ldr	x1, [x9, x20, lsl #3]
   29b10:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29b14:	cbnz	x0, 29b1c <rpl_re_set_registers@@Base+0xaf74>
   29b18:	mov	w19, wzr
   29b1c:	mov	w0, w19
   29b20:	ldp	x20, x19, [sp, #48]
   29b24:	ldp	x22, x21, [sp, #32]
   29b28:	ldp	x24, x23, [sp, #16]
   29b2c:	ldp	x29, x30, [sp], #64
   29b30:	ret
   29b34:	cbz	x0, 29ba8 <rpl_re_set_registers@@Base+0xb000>
   29b38:	stp	x29, x30, [sp, #-48]!
   29b3c:	stp	x20, x19, [sp, #32]
   29b40:	ldr	x8, [x0]
   29b44:	mov	x19, x0
   29b48:	ldr	x0, [x0, #16]
   29b4c:	str	x21, [sp, #16]
   29b50:	cmp	x8, #0x1
   29b54:	mov	x29, sp
   29b58:	b.lt	29b98 <rpl_re_set_registers@@Base+0xaff0>  // b.tstop
   29b5c:	mov	x20, xzr
   29b60:	mov	x21, xzr
   29b64:	add	x8, x0, x20
   29b68:	ldr	x0, [x8, #40]
   29b6c:	bl	b1d0 <free@plt>
   29b70:	ldr	x8, [x19, #16]
   29b74:	add	x8, x8, x20
   29b78:	ldr	x0, [x8, #16]
   29b7c:	bl	b1d0 <free@plt>
   29b80:	ldr	x8, [x19]
   29b84:	ldr	x0, [x19, #16]
   29b88:	add	x21, x21, #0x1
   29b8c:	add	x20, x20, #0x30
   29b90:	cmp	x21, x8
   29b94:	b.lt	29b64 <rpl_re_set_registers@@Base+0xafbc>  // b.tstop
   29b98:	bl	b1d0 <free@plt>
   29b9c:	ldp	x20, x19, [sp, #32]
   29ba0:	ldr	x21, [sp, #16]
   29ba4:	ldp	x29, x30, [sp], #48
   29ba8:	ret
   29bac:	stp	x29, x30, [sp, #-16]!
   29bb0:	ldr	x8, [x0]
   29bb4:	mov	x29, sp
   29bb8:	add	x8, x8, x3, lsl #4
   29bbc:	ldr	w9, [x8, #8]
   29bc0:	and	w10, w9, #0xff
   29bc4:	cmp	w10, #0x9
   29bc8:	b.eq	29bf8 <rpl_re_set_registers@@Base+0xb050>  // b.none
   29bcc:	cmp	w10, #0x8
   29bd0:	b.ne	29c60 <rpl_re_set_registers@@Base+0xb0b8>  // b.any
   29bd4:	ldr	x8, [x8]
   29bd8:	add	x8, x8, #0x1
   29bdc:	cmp	x8, x5
   29be0:	b.ge	29c60 <rpl_re_set_registers@@Base+0xb0b8>  // b.tcont
   29be4:	add	x8, x1, x8, lsl #4
   29be8:	mov	x9, #0xffffffffffffffff    	// #-1
   29bec:	stp	x4, x9, [x8]
   29bf0:	ldp	x29, x30, [sp], #16
   29bf4:	ret
   29bf8:	ldr	x8, [x8]
   29bfc:	add	x8, x8, #0x1
   29c00:	cmp	x8, x5
   29c04:	b.ge	29c60 <rpl_re_set_registers@@Base+0xb0b8>  // b.tcont
   29c08:	lsl	x10, x8, #4
   29c0c:	ldr	x11, [x1, x10]
   29c10:	cmp	x11, x4
   29c14:	b.ge	29c2c <rpl_re_set_registers@@Base+0xb084>  // b.tcont
   29c18:	add	x8, x1, x8, lsl #4
   29c1c:	str	x4, [x8, #8]
   29c20:	lsl	x8, x5, #4
   29c24:	mov	x0, x2
   29c28:	b	29c48 <rpl_re_set_registers@@Base+0xb0a0>
   29c2c:	tbz	w9, #19, 29c58 <rpl_re_set_registers@@Base+0xb0b0>
   29c30:	ldr	x9, [x2, x10]
   29c34:	cmn	x9, #0x1
   29c38:	b.eq	29c58 <rpl_re_set_registers@@Base+0xb0b0>  // b.none
   29c3c:	lsl	x8, x5, #4
   29c40:	mov	x0, x1
   29c44:	mov	x1, x2
   29c48:	mov	x2, x8
   29c4c:	bl	a800 <memcpy@plt>
   29c50:	ldp	x29, x30, [sp], #16
   29c54:	ret
   29c58:	add	x8, x1, x8, lsl #4
   29c5c:	str	x4, [x8, #8]
   29c60:	ldp	x29, x30, [sp], #16
   29c64:	ret
   29c68:	stp	x29, x30, [sp, #-48]!
   29c6c:	stp	x20, x19, [sp, #32]
   29c70:	ldr	x9, [x0]
   29c74:	str	x21, [sp, #16]
   29c78:	mov	x29, sp
   29c7c:	sub	x8, x9, #0x1
   29c80:	cmp	x9, #0x0
   29c84:	str	x8, [x0]
   29c88:	b.le	29d08 <rpl_re_set_registers@@Base+0xb160>
   29c8c:	ldr	x9, [x0, #16]
   29c90:	add	x8, x8, x8, lsl #1
   29c94:	lsl	x21, x8, #4
   29c98:	mov	x20, x0
   29c9c:	add	x8, x9, x21
   29ca0:	ldr	x9, [x8]
   29ca4:	lsl	x2, x2, #4
   29ca8:	mov	x0, x3
   29cac:	mov	x19, x4
   29cb0:	str	x9, [x1]
   29cb4:	ldr	x1, [x8, #16]
   29cb8:	bl	a800 <memcpy@plt>
   29cbc:	ldr	x0, [x19, #16]
   29cc0:	bl	b1d0 <free@plt>
   29cc4:	ldr	x8, [x20, #16]
   29cc8:	add	x8, x8, x21
   29ccc:	ldr	x0, [x8, #16]
   29cd0:	bl	b1d0 <free@plt>
   29cd4:	ldr	x8, [x20, #16]
   29cd8:	add	x8, x8, x21
   29cdc:	ldr	x9, [x8, #40]
   29ce0:	ldur	q0, [x8, #24]
   29ce4:	str	x9, [x19, #16]
   29ce8:	str	q0, [x19]
   29cec:	ldr	x8, [x20, #16]
   29cf0:	ldp	x20, x19, [sp, #32]
   29cf4:	add	x8, x8, x21
   29cf8:	ldr	x0, [x8, #8]
   29cfc:	ldr	x21, [sp, #16]
   29d00:	ldp	x29, x30, [sp], #48
   29d04:	ret
   29d08:	adrp	x0, 2d000 <vasnprintf@@Base+0x2ec4>
   29d0c:	adrp	x1, 2d000 <vasnprintf@@Base+0x2ec4>
   29d10:	adrp	x3, 2d000 <vasnprintf@@Base+0x2ec4>
   29d14:	add	x0, x0, #0xd29
   29d18:	add	x1, x1, #0xbdd
   29d1c:	add	x3, x3, #0xd32
   29d20:	mov	w2, #0x555                 	// #1365
   29d24:	bl	b6e0 <__assert_fail@plt>
   29d28:	sub	sp, sp, #0x70
   29d2c:	stp	x29, x30, [sp, #16]
   29d30:	stp	x28, x27, [sp, #32]
   29d34:	stp	x26, x25, [sp, #48]
   29d38:	stp	x24, x23, [sp, #64]
   29d3c:	stp	x22, x21, [sp, #80]
   29d40:	stp	x20, x19, [sp, #96]
   29d44:	ldr	x24, [x0, #152]
   29d48:	mov	x28, x6
   29d4c:	mov	x19, x5
   29d50:	mov	x22, x4
   29d54:	ldr	x8, [x24]
   29d58:	mov	x27, x3
   29d5c:	mov	x25, x2
   29d60:	mov	x23, x0
   29d64:	add	x9, x8, x4, lsl #4
   29d68:	ldr	w9, [x9, #8]
   29d6c:	add	x29, sp, #0x10
   29d70:	tbnz	w9, #3, 29dd4 <rpl_re_set_registers@@Base+0xb22c>
   29d74:	tbnz	w9, #20, 29ef4 <rpl_re_set_registers@@Base+0xb34c>
   29d78:	and	w9, w9, #0xff
   29d7c:	cmp	w9, #0x4
   29d80:	b.ne	29f18 <rpl_re_set_registers@@Base+0xb370>  // b.any
   29d84:	lsl	x9, x22, #4
   29d88:	ldr	x8, [x8, x9]
   29d8c:	add	x9, x25, x8, lsl #4
   29d90:	ldp	x9, x8, [x9, #16]
   29d94:	sub	x25, x8, x9
   29d98:	cbz	x28, 29f54 <rpl_re_set_registers@@Base+0xb3ac>
   29d9c:	mov	x26, #0xffffffffffffffff    	// #-1
   29da0:	cmn	x8, #0x1
   29da4:	mov	w8, #0x1                   	// #1
   29da8:	b.eq	29fb0 <rpl_re_set_registers@@Base+0xb408>  // b.none
   29dac:	cmn	x9, #0x1
   29db0:	b.eq	29fb0 <rpl_re_set_registers@@Base+0xb408>  // b.none
   29db4:	cbz	x25, 29f60 <rpl_re_set_registers@@Base+0xb3b8>
   29db8:	ldr	x10, [x23, #48]
   29dbc:	ldr	x8, [x27]
   29dc0:	sub	x10, x10, x8
   29dc4:	cmp	x10, x25
   29dc8:	b.ge	29f2c <rpl_re_set_registers@@Base+0xb384>  // b.tcont
   29dcc:	mov	w8, #0x1                   	// #1
   29dd0:	b	29f48 <rpl_re_set_registers@@Base+0xb3a0>
   29dd4:	ldr	x8, [x23, #184]
   29dd8:	ldr	x9, [x27]
   29ddc:	ldr	x20, [x24, #40]
   29de0:	mov	x26, x1
   29de4:	mov	x0, x19
   29de8:	ldr	x21, [x8, x9, lsl #3]
   29dec:	mov	x1, x22
   29df0:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   29df4:	tbz	w0, #0, 2a058 <rpl_re_set_registers@@Base+0xb4b0>
   29df8:	mov	w8, #0x18                  	// #24
   29dfc:	str	x27, [sp]
   29e00:	madd	x27, x22, x8, x20
   29e04:	ldr	x8, [x27, #8]!
   29e08:	cmp	x8, #0x1
   29e0c:	b.lt	29f10 <rpl_re_set_registers@@Base+0xb368>  // b.tstop
   29e10:	mov	w8, #0x18                  	// #24
   29e14:	madd	x8, x22, x8, x20
   29e18:	str	x28, [sp, #8]
   29e1c:	mov	x28, xzr
   29e20:	add	x23, x21, #0x8
   29e24:	add	x20, x8, #0x10
   29e28:	mov	x22, #0xffffffffffffffff    	// #-1
   29e2c:	b	29e40 <rpl_re_set_registers@@Base+0xb298>
   29e30:	ldr	x8, [x27]
   29e34:	add	x28, x28, #0x1
   29e38:	cmp	x28, x8
   29e3c:	b.ge	29eec <rpl_re_set_registers@@Base+0xb344>  // b.tcont
   29e40:	ldr	x8, [x20]
   29e44:	mov	x0, x23
   29e48:	ldr	x24, [x8, x28, lsl #3]
   29e4c:	mov	x1, x24
   29e50:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29e54:	cbz	x0, 29e80 <rpl_re_set_registers@@Base+0xb2d8>
   29e58:	cmn	x22, #0x1
   29e5c:	b.eq	29e8c <rpl_re_set_registers@@Base+0xb2e4>  // b.none
   29e60:	mov	x0, x19
   29e64:	mov	x1, x22
   29e68:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29e6c:	cbz	x0, 29e9c <rpl_re_set_registers@@Base+0xb2f4>
   29e70:	mov	w8, #0x1                   	// #1
   29e74:	mov	x21, x24
   29e78:	cbnz	w8, 29edc <rpl_re_set_registers@@Base+0xb334>
   29e7c:	b	29e30 <rpl_re_set_registers@@Base+0xb288>
   29e80:	mov	w8, #0x4                   	// #4
   29e84:	cbnz	w8, 29edc <rpl_re_set_registers@@Base+0xb334>
   29e88:	b	29e30 <rpl_re_set_registers@@Base+0xb288>
   29e8c:	mov	w8, wzr
   29e90:	mov	x22, x24
   29e94:	cbnz	w8, 29edc <rpl_re_set_registers@@Base+0xb334>
   29e98:	b	29e30 <rpl_re_set_registers@@Base+0xb288>
   29e9c:	ldr	x0, [sp, #8]
   29ea0:	cbz	x0, 29ed4 <rpl_re_set_registers@@Base+0xb32c>
   29ea4:	ldr	x8, [sp]
   29ea8:	mov	x2, x24
   29eac:	mov	x3, x26
   29eb0:	mov	x4, x25
   29eb4:	ldr	x1, [x8]
   29eb8:	mov	x5, x19
   29ebc:	bl	2a070 <rpl_re_set_registers@@Base+0xb4c8>
   29ec0:	cbz	w0, 29ed4 <rpl_re_set_registers@@Base+0xb32c>
   29ec4:	mov	x21, #0xfffffffffffffffe    	// #-2
   29ec8:	mov	w8, #0x1                   	// #1
   29ecc:	cbnz	w8, 29edc <rpl_re_set_registers@@Base+0xb334>
   29ed0:	b	29e30 <rpl_re_set_registers@@Base+0xb288>
   29ed4:	mov	w8, #0x2                   	// #2
   29ed8:	cbz	w8, 29e30 <rpl_re_set_registers@@Base+0xb288>
   29edc:	cmp	w8, #0x4
   29ee0:	b.eq	29e30 <rpl_re_set_registers@@Base+0xb288>  // b.none
   29ee4:	cmp	w8, #0x2
   29ee8:	b.ne	29f20 <rpl_re_set_registers@@Base+0xb378>  // b.any
   29eec:	mov	x0, x22
   29ef0:	b	2a030 <rpl_re_set_registers@@Base+0xb488>
   29ef4:	ldr	x3, [x27]
   29ef8:	mov	x0, x24
   29efc:	mov	x1, x22
   29f00:	mov	x2, x23
   29f04:	bl	276e0 <rpl_re_set_registers@@Base+0x8b38>
   29f08:	sxtw	x25, w0
   29f0c:	b	29fb4 <rpl_re_set_registers@@Base+0xb40c>
   29f10:	mov	x0, #0xffffffffffffffff    	// #-1
   29f14:	b	2a030 <rpl_re_set_registers@@Base+0xb488>
   29f18:	mov	x25, xzr
   29f1c:	b	29fb4 <rpl_re_set_registers@@Base+0xb40c>
   29f20:	mov	x22, x21
   29f24:	mov	x0, x21
   29f28:	b	2a030 <rpl_re_set_registers@@Base+0xb488>
   29f2c:	ldr	x10, [x23, #8]
   29f30:	mov	x2, x25
   29f34:	add	x0, x10, x9
   29f38:	add	x1, x10, x8
   29f3c:	bl	ae50 <bcmp@plt>
   29f40:	cmp	w0, #0x0
   29f44:	cset	w8, ne  // ne = any
   29f48:	cbz	w8, 29f54 <rpl_re_set_registers@@Base+0xb3ac>
   29f4c:	mov	x26, #0xffffffffffffffff    	// #-1
   29f50:	b	29fb0 <rpl_re_set_registers@@Base+0xb408>
   29f54:	cbz	x25, 29f60 <rpl_re_set_registers@@Base+0xb3b8>
   29f58:	mov	x26, #0xffffffffffffffff    	// #-1
   29f5c:	b	29fac <rpl_re_set_registers@@Base+0xb404>
   29f60:	mov	x0, x19
   29f64:	mov	x1, x22
   29f68:	bl	23d78 <rpl_re_set_registers@@Base+0x51d0>
   29f6c:	tbz	w0, #0, 2a060 <rpl_re_set_registers@@Base+0xb4b8>
   29f70:	ldr	x8, [x24, #40]
   29f74:	mov	w9, #0x18                  	// #24
   29f78:	ldr	x10, [x23, #184]
   29f7c:	madd	x8, x22, x9, x8
   29f80:	ldr	x9, [x27]
   29f84:	ldr	x8, [x8, #16]
   29f88:	ldr	x9, [x10, x9, lsl #3]
   29f8c:	ldr	x26, [x8]
   29f90:	add	x0, x9, #0x8
   29f94:	mov	x1, x26
   29f98:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   29f9c:	cmp	x0, #0x0
   29fa0:	cset	w8, ne  // ne = any
   29fa4:	csinv	x26, x26, xzr, ne  // ne = any
   29fa8:	cbnz	w8, 29fb0 <rpl_re_set_registers@@Base+0xb408>
   29fac:	mov	w8, wzr
   29fb0:	cbnz	w8, 2a028 <rpl_re_set_registers@@Base+0xb480>
   29fb4:	cbnz	x25, 29fd0 <rpl_re_set_registers@@Base+0xb428>
   29fb8:	ldr	x8, [x24]
   29fbc:	ldr	x2, [x27]
   29fc0:	mov	x0, x23
   29fc4:	add	x1, x8, x22, lsl #4
   29fc8:	bl	279c0 <rpl_re_set_registers@@Base+0x8e18>
   29fcc:	tbz	w0, #0, 2a050 <rpl_re_set_registers@@Base+0xb4a8>
   29fd0:	ldr	x8, [x24, #24]
   29fd4:	ldr	x9, [x27]
   29fd8:	cmp	x25, #0x0
   29fdc:	ldr	x26, [x8, x22, lsl #3]
   29fe0:	csinc	x8, x25, xzr, ne  // ne = any
   29fe4:	add	x8, x9, x8
   29fe8:	str	x8, [x27]
   29fec:	cbz	x28, 2a018 <rpl_re_set_registers@@Base+0xb470>
   29ff0:	ldr	x9, [x23, #168]
   29ff4:	cmp	x8, x9
   29ff8:	b.gt	2a020 <rpl_re_set_registers@@Base+0xb478>
   29ffc:	ldr	x9, [x23, #184]
   2a000:	ldr	x8, [x9, x8, lsl #3]
   2a004:	cbz	x8, 2a020 <rpl_re_set_registers@@Base+0xb478>
   2a008:	add	x0, x8, #0x8
   2a00c:	mov	x1, x26
   2a010:	bl	24054 <rpl_re_set_registers@@Base+0x54ac>
   2a014:	cbz	x0, 2a020 <rpl_re_set_registers@@Base+0xb478>
   2a018:	str	xzr, [x19, #8]
   2a01c:	b	2a024 <rpl_re_set_registers@@Base+0xb47c>
   2a020:	mov	x26, #0xffffffffffffffff    	// #-1
   2a024:	mov	w8, #0x1                   	// #1
   2a028:	cmp	w8, #0x0
   2a02c:	csinv	x0, x26, xzr, ne  // ne = any
   2a030:	ldp	x20, x19, [sp, #96]
   2a034:	ldp	x22, x21, [sp, #80]
   2a038:	ldp	x24, x23, [sp, #64]
   2a03c:	ldp	x26, x25, [sp, #48]
   2a040:	ldp	x28, x27, [sp, #32]
   2a044:	ldp	x29, x30, [sp, #16]
   2a048:	add	sp, sp, #0x70
   2a04c:	ret
   2a050:	mov	w8, wzr
   2a054:	b	2a028 <rpl_re_set_registers@@Base+0xb480>
   2a058:	mov	x0, #0xfffffffffffffffe    	// #-2
   2a05c:	b	2a030 <rpl_re_set_registers@@Base+0xb488>
   2a060:	mov	x26, #0xfffffffffffffffe    	// #-2
   2a064:	mov	w8, #0x1                   	// #1
   2a068:	cbnz	w8, 29fb0 <rpl_re_set_registers@@Base+0xb408>
   2a06c:	b	29fac <rpl_re_set_registers@@Base+0xb404>
   2a070:	stp	x29, x30, [sp, #-80]!
   2a074:	stp	x26, x25, [sp, #16]
   2a078:	stp	x24, x23, [sp, #32]
   2a07c:	stp	x22, x21, [sp, #48]
   2a080:	stp	x20, x19, [sp, #64]
   2a084:	ldp	x25, x8, [x0]
   2a088:	mov	x19, x5
   2a08c:	mov	x21, x4
   2a090:	mov	x22, x3
   2a094:	add	x9, x25, #0x1
   2a098:	mov	x23, x2
   2a09c:	mov	x24, x1
   2a0a0:	mov	x20, x0
   2a0a4:	cmp	x9, x8
   2a0a8:	mov	x29, sp
   2a0ac:	str	x9, [x0]
   2a0b0:	b.ne	2a0d4 <rpl_re_set_registers@@Base+0xb52c>  // b.any
   2a0b4:	ldr	x0, [x20, #16]
   2a0b8:	add	x8, x8, x8, lsl #1
   2a0bc:	lsl	x1, x8, #5
   2a0c0:	bl	aea0 <realloc@plt>
   2a0c4:	cbz	x0, 2a120 <rpl_re_set_registers@@Base+0xb578>
   2a0c8:	ldr	x8, [x20, #8]
   2a0cc:	lsl	x8, x8, #1
   2a0d0:	stp	x8, x0, [x20, #8]
   2a0d4:	ldr	x8, [x20, #16]
   2a0d8:	mov	w9, #0x30                  	// #48
   2a0dc:	lsl	x22, x22, #4
   2a0e0:	mov	x0, x22
   2a0e4:	madd	x26, x25, x9, x8
   2a0e8:	stp	x24, x23, [x26]
   2a0ec:	bl	abc0 <malloc@plt>
   2a0f0:	str	x0, [x26, #16]
   2a0f4:	cbz	x0, 2a120 <rpl_re_set_registers@@Base+0xb578>
   2a0f8:	mov	x1, x21
   2a0fc:	mov	x2, x22
   2a100:	bl	a800 <memcpy@plt>
   2a104:	ldr	x8, [x20, #16]
   2a108:	mov	w9, #0x30                  	// #48
   2a10c:	mov	x1, x19
   2a110:	madd	x8, x25, x9, x8
   2a114:	add	x0, x8, #0x18
   2a118:	bl	23fd8 <rpl_re_set_registers@@Base+0x5430>
   2a11c:	b	2a124 <rpl_re_set_registers@@Base+0xb57c>
   2a120:	mov	w0, #0xc                   	// #12
   2a124:	ldp	x20, x19, [sp, #64]
   2a128:	ldp	x22, x21, [sp, #48]
   2a12c:	ldp	x24, x23, [sp, #32]
   2a130:	ldp	x26, x25, [sp, #16]
   2a134:	ldp	x29, x30, [sp], #80
   2a138:	ret

000000000002a13c <vasnprintf@@Base>:
   2a13c:	stp	x29, x30, [sp, #-96]!
   2a140:	stp	x28, x27, [sp, #16]
   2a144:	stp	x26, x25, [sp, #32]
   2a148:	stp	x24, x23, [sp, #48]
   2a14c:	stp	x22, x21, [sp, #64]
   2a150:	stp	x20, x19, [sp, #80]
   2a154:	mov	x29, sp
   2a158:	sub	sp, sp, #0x410
   2a15c:	mov	x19, sp
   2a160:	mov	x20, x2
   2a164:	mov	x22, x1
   2a168:	mov	x23, x0
   2a16c:	add	x1, x19, #0x178
   2a170:	add	x2, x19, #0x80
   2a174:	mov	x0, x20
   2a178:	mov	x21, x3
   2a17c:	bl	b760 <printf_parse@plt>
   2a180:	tbnz	w0, #31, 2ad6c <vasnprintf@@Base+0xc30>
   2a184:	ldp	q1, q0, [x21]
   2a188:	add	x0, x19, #0x60
   2a18c:	add	x1, x19, #0x80
   2a190:	add	x26, x19, #0x178
   2a194:	stp	q1, q0, [x19, #96]
   2a198:	bl	b260 <printf_fetchargs@plt>
   2a19c:	tbnz	w0, #31, 2a1ec <vasnprintf@@Base+0xb0>
   2a1a0:	ldp	x1, x2, [x26, #16]
   2a1a4:	mov	w0, #0x7                   	// #7
   2a1a8:	mov	w3, #0x6                   	// #6
   2a1ac:	bl	b860 <xsum4@plt>
   2a1b0:	cmp	x0, #0xf9f
   2a1b4:	b.hi	2a22c <vasnprintf@@Base+0xf0>  // b.pmore
   2a1b8:	add	x9, x0, #0xf
   2a1bc:	mov	x8, sp
   2a1c0:	and	x9, x9, #0xfffffffffffffff0
   2a1c4:	sub	x8, x8, x9
   2a1c8:	str	x8, [x19, #80]
   2a1cc:	mov	sp, x8
   2a1d0:	mov	x0, xzr
   2a1d4:	stp	x0, x23, [x19, #56]
   2a1d8:	str	x22, [x19]
   2a1dc:	cbz	x23, 2a250 <vasnprintf@@Base+0x114>
   2a1e0:	ldr	x25, [x22]
   2a1e4:	mov	x21, x23
   2a1e8:	b	2a258 <vasnprintf@@Base+0x11c>
   2a1ec:	ldr	x0, [x26, #8]
   2a1f0:	add	x8, x19, #0x178
   2a1f4:	add	x8, x8, #0x20
   2a1f8:	cmp	x0, x8
   2a1fc:	b.eq	2a204 <vasnprintf@@Base+0xc8>  // b.none
   2a200:	bl	b1d0 <free@plt>
   2a204:	ldr	x0, [x19, #136]
   2a208:	add	x8, x19, #0x80
   2a20c:	add	x8, x8, #0x10
   2a210:	cmp	x0, x8
   2a214:	b.eq	2a21c <vasnprintf@@Base+0xe0>  // b.none
   2a218:	bl	b1d0 <free@plt>
   2a21c:	bl	b6f0 <__errno_location@plt>
   2a220:	mov	x21, xzr
   2a224:	mov	w8, #0x16                  	// #22
   2a228:	b	2add4 <vasnprintf@@Base+0xc98>
   2a22c:	cmn	x0, #0x1
   2a230:	b.eq	2ac98 <vasnprintf@@Base+0xb5c>  // b.none
   2a234:	bl	abc0 <malloc@plt>
   2a238:	cmp	x0, #0x0
   2a23c:	cset	w8, eq  // eq = none
   2a240:	lsl	w8, w8, #1
   2a244:	str	x0, [x19, #80]
   2a248:	cbnz	w8, 2ad98 <vasnprintf@@Base+0xc5c>
   2a24c:	b	2a1d4 <vasnprintf@@Base+0x98>
   2a250:	mov	x25, xzr
   2a254:	mov	x21, xzr
   2a258:	ldr	x8, [x19, #80]
   2a25c:	ldr	x22, [x26, #8]
   2a260:	mov	x24, xzr
   2a264:	mov	x28, xzr
   2a268:	add	x9, x8, #0x1
   2a26c:	add	x8, x8, #0x2
   2a270:	str	x8, [x19, #8]
   2a274:	add	x8, x19, #0x178
   2a278:	str	x9, [x19, #32]
   2a27c:	add	x9, x19, #0x80
   2a280:	add	x8, x8, #0x20
   2a284:	str	x8, [x19, #48]
   2a288:	add	x8, x9, #0x10
   2a28c:	str	x8, [x19, #40]
   2a290:	b	2a2a8 <vasnprintf@@Base+0x16c>
   2a294:	ldr	x28, [x19, #24]
   2a298:	cbnz	w8, 2abc0 <vasnprintf@@Base+0xa84>
   2a29c:	ldr	x20, [x22, #8]
   2a2a0:	add	x28, x28, #0x1
   2a2a4:	add	x22, x22, #0x58
   2a2a8:	ldr	x8, [x22]
   2a2ac:	cmp	x20, x8
   2a2b0:	b.eq	2a38c <vasnprintf@@Base+0x250>  // b.none
   2a2b4:	sub	x27, x8, x20
   2a2b8:	mov	x0, x24
   2a2bc:	mov	x1, x27
   2a2c0:	mov	x26, x28
   2a2c4:	bl	ad10 <xsum@plt>
   2a2c8:	mov	x28, x0
   2a2cc:	cmp	x0, x25
   2a2d0:	b.ls	2a368 <vasnprintf@@Base+0x22c>  // b.plast
   2a2d4:	lsl	x8, x25, #1
   2a2d8:	cmp	x25, #0x0
   2a2dc:	csinv	x8, x8, xzr, ge  // ge = tcont
   2a2e0:	mov	w9, #0xc                   	// #12
   2a2e4:	csel	x8, x9, x8, eq  // eq = none
   2a2e8:	cmp	x28, x8
   2a2ec:	csel	x25, x28, x8, hi  // hi = pmore
   2a2f0:	cmn	x25, #0x1
   2a2f4:	b.eq	2a360 <vasnprintf@@Base+0x224>  // b.none
   2a2f8:	ldr	x8, [x19, #64]
   2a2fc:	cmp	x21, x8
   2a300:	b.eq	2a350 <vasnprintf@@Base+0x214>  // b.none
   2a304:	cbz	x21, 2a350 <vasnprintf@@Base+0x214>
   2a308:	mov	x0, x21
   2a30c:	mov	x1, x25
   2a310:	bl	aea0 <realloc@plt>
   2a314:	mov	x23, x0
   2a318:	cbz	x0, 2a360 <vasnprintf@@Base+0x224>
   2a31c:	mov	w8, wzr
   2a320:	cbz	x24, 2a344 <vasnprintf@@Base+0x208>
   2a324:	ldr	x9, [x19, #64]
   2a328:	cmp	x21, x9
   2a32c:	b.ne	2a344 <vasnprintf@@Base+0x208>  // b.any
   2a330:	mov	x0, x23
   2a334:	mov	x1, x21
   2a338:	mov	x2, x24
   2a33c:	bl	a800 <memcpy@plt>
   2a340:	mov	w8, wzr
   2a344:	mov	x21, x23
   2a348:	cbnz	w8, 2a380 <vasnprintf@@Base+0x244>
   2a34c:	b	2a368 <vasnprintf@@Base+0x22c>
   2a350:	mov	x0, x25
   2a354:	bl	abc0 <malloc@plt>
   2a358:	mov	x23, x0
   2a35c:	cbnz	x0, 2a31c <vasnprintf@@Base+0x1e0>
   2a360:	mov	w8, #0x6                   	// #6
   2a364:	cbnz	w8, 2a380 <vasnprintf@@Base+0x244>
   2a368:	add	x0, x21, x24
   2a36c:	mov	x1, x20
   2a370:	mov	x2, x27
   2a374:	bl	a800 <memcpy@plt>
   2a378:	mov	w8, wzr
   2a37c:	mov	x24, x28
   2a380:	mov	x28, x26
   2a384:	add	x26, x19, #0x178
   2a388:	cbnz	w8, 2ac34 <vasnprintf@@Base+0xaf8>
   2a38c:	ldr	x8, [x26]
   2a390:	cmp	x28, x8
   2a394:	b.eq	2ac40 <vasnprintf@@Base+0xb04>  // b.none
   2a398:	ldrb	w10, [x22, #72]
   2a39c:	ldr	x8, [x22, #80]
   2a3a0:	cmp	w10, #0x25
   2a3a4:	b.ne	2a420 <vasnprintf@@Base+0x2e4>  // b.any
   2a3a8:	cmn	x8, #0x1
   2a3ac:	b.ne	2adfc <vasnprintf@@Base+0xcc0>  // b.any
   2a3b0:	mov	w1, #0x1                   	// #1
   2a3b4:	mov	x0, x24
   2a3b8:	bl	ad10 <xsum@plt>
   2a3bc:	mov	x20, x0
   2a3c0:	cmp	x0, x25
   2a3c4:	b.ls	2ab48 <vasnprintf@@Base+0xa0c>  // b.plast
   2a3c8:	lsl	x8, x25, #1
   2a3cc:	cmp	x25, #0x0
   2a3d0:	csinv	x8, x8, xzr, ge  // ge = tcont
   2a3d4:	mov	w9, #0xc                   	// #12
   2a3d8:	csel	x8, x9, x8, eq  // eq = none
   2a3dc:	cmp	x20, x8
   2a3e0:	csel	x25, x20, x8, hi  // hi = pmore
   2a3e4:	cmn	x25, #0x1
   2a3e8:	b.eq	2a410 <vasnprintf@@Base+0x2d4>  // b.none
   2a3ec:	ldr	x8, [x19, #64]
   2a3f0:	cmp	x21, x8
   2a3f4:	b.eq	2ab08 <vasnprintf@@Base+0x9cc>  // b.none
   2a3f8:	cbz	x21, 2ab08 <vasnprintf@@Base+0x9cc>
   2a3fc:	mov	x0, x21
   2a400:	mov	x1, x25
   2a404:	bl	aea0 <realloc@plt>
   2a408:	mov	x23, x0
   2a40c:	cbnz	x0, 2ab18 <vasnprintf@@Base+0x9dc>
   2a410:	mov	w8, #0x6                   	// #6
   2a414:	cbz	w8, 2ab48 <vasnprintf@@Base+0xa0c>
   2a418:	cbz	w8, 2a29c <vasnprintf@@Base+0x160>
   2a41c:	b	2ac34 <vasnprintf@@Base+0xaf8>
   2a420:	cmn	x8, #0x1
   2a424:	b.eq	2adfc <vasnprintf@@Base+0xcc0>  // b.none
   2a428:	ldr	x9, [x19, #136]
   2a42c:	lsl	x11, x8, #5
   2a430:	cmp	w10, #0x6e
   2a434:	ldr	w23, [x9, x11]
   2a438:	b.ne	2a470 <vasnprintf@@Base+0x334>  // b.any
   2a43c:	sub	w10, w23, #0x12
   2a440:	cmp	w10, #0x4
   2a444:	b.hi	2adfc <vasnprintf@@Base+0xcc0>  // b.pmore
   2a448:	adrp	x13, 2d000 <vasnprintf@@Base+0x2ec4>
   2a44c:	add	x13, x13, #0xd9a
   2a450:	adr	x11, 2a460 <vasnprintf@@Base+0x324>
   2a454:	ldrh	w12, [x13, x10, lsl #1]
   2a458:	add	x11, x11, x12, lsl #2
   2a45c:	br	x11
   2a460:	add	x8, x9, x8, lsl #5
   2a464:	ldr	x8, [x8, #16]
   2a468:	str	x24, [x8]
   2a46c:	b	2a29c <vasnprintf@@Base+0x160>
   2a470:	ldr	w8, [x22, #16]
   2a474:	ldr	x9, [x19, #80]
   2a478:	ldr	x27, [x19, #32]
   2a47c:	mov	w10, #0x25                  	// #37
   2a480:	strb	w10, [x9]
   2a484:	tbnz	w8, #0, 2a560 <vasnprintf@@Base+0x424>
   2a488:	tbnz	w8, #1, 2a574 <vasnprintf@@Base+0x438>
   2a48c:	tbnz	w8, #2, 2a580 <vasnprintf@@Base+0x444>
   2a490:	tbnz	w8, #3, 2a58c <vasnprintf@@Base+0x450>
   2a494:	tbnz	w8, #4, 2a598 <vasnprintf@@Base+0x45c>
   2a498:	tbnz	w8, #6, 2a5a4 <vasnprintf@@Base+0x468>
   2a49c:	tbz	w8, #5, 2a4a8 <vasnprintf@@Base+0x36c>
   2a4a0:	mov	w8, #0x30                  	// #48
   2a4a4:	strb	w8, [x27], #1
   2a4a8:	ldp	x1, x8, [x22, #24]
   2a4ac:	cmp	x1, x8
   2a4b0:	b.eq	2a4c8 <vasnprintf@@Base+0x38c>  // b.none
   2a4b4:	sub	x20, x8, x1
   2a4b8:	mov	x0, x27
   2a4bc:	mov	x2, x20
   2a4c0:	bl	a800 <memcpy@plt>
   2a4c4:	add	x27, x27, x20
   2a4c8:	ldp	x1, x8, [x22, #48]
   2a4cc:	cmp	x1, x8
   2a4d0:	b.eq	2a4e8 <vasnprintf@@Base+0x3ac>  // b.none
   2a4d4:	sub	x20, x8, x1
   2a4d8:	mov	x0, x27
   2a4dc:	mov	x2, x20
   2a4e0:	bl	a800 <memcpy@plt>
   2a4e4:	add	x27, x27, x20
   2a4e8:	cmp	w23, #0x10
   2a4ec:	b.hi	2a520 <vasnprintf@@Base+0x3e4>  // b.pmore
   2a4f0:	mov	w8, #0x1                   	// #1
   2a4f4:	mov	w9, #0x4180                	// #16768
   2a4f8:	lsl	w8, w8, w23
   2a4fc:	movk	w9, #0x1, lsl #16
   2a500:	tst	w8, w9
   2a504:	b.ne	2a518 <vasnprintf@@Base+0x3dc>  // b.any
   2a508:	tst	w8, #0x600
   2a50c:	b.eq	2ab90 <vasnprintf@@Base+0xa54>  // b.none
   2a510:	mov	w8, #0x6c                  	// #108
   2a514:	strb	w8, [x27], #1
   2a518:	mov	w8, #0x6c                  	// #108
   2a51c:	strb	w8, [x27], #1
   2a520:	ldrb	w8, [x22, #72]
   2a524:	strb	wzr, [x27, #1]
   2a528:	strb	w8, [x27]
   2a52c:	ldr	x8, [x22, #40]
   2a530:	cmn	x8, #0x1
   2a534:	b.eq	2a5b4 <vasnprintf@@Base+0x478>  // b.none
   2a538:	ldr	x9, [x19, #136]
   2a53c:	lsl	x10, x8, #5
   2a540:	ldr	w10, [x9, x10]
   2a544:	cmp	w10, #0x5
   2a548:	b.ne	2adfc <vasnprintf@@Base+0xcc0>  // b.any
   2a54c:	add	x8, x9, x8, lsl #5
   2a550:	ldr	w8, [x8, #16]
   2a554:	mov	w26, #0x1                   	// #1
   2a558:	str	w8, [x19, #96]
   2a55c:	b	2a5b8 <vasnprintf@@Base+0x47c>
   2a560:	ldr	x9, [x19, #32]
   2a564:	ldr	x27, [x19, #8]
   2a568:	mov	w10, #0x27                  	// #39
   2a56c:	strb	w10, [x9]
   2a570:	tbz	w8, #1, 2a48c <vasnprintf@@Base+0x350>
   2a574:	mov	w9, #0x2d                  	// #45
   2a578:	strb	w9, [x27], #1
   2a57c:	tbz	w8, #2, 2a490 <vasnprintf@@Base+0x354>
   2a580:	mov	w9, #0x2b                  	// #43
   2a584:	strb	w9, [x27], #1
   2a588:	tbz	w8, #3, 2a494 <vasnprintf@@Base+0x358>
   2a58c:	mov	w9, #0x20                  	// #32
   2a590:	strb	w9, [x27], #1
   2a594:	tbz	w8, #4, 2a498 <vasnprintf@@Base+0x35c>
   2a598:	mov	w9, #0x23                  	// #35
   2a59c:	strb	w9, [x27], #1
   2a5a0:	tbz	w8, #6, 2a49c <vasnprintf@@Base+0x360>
   2a5a4:	mov	w9, #0x49                  	// #73
   2a5a8:	strb	w9, [x27], #1
   2a5ac:	tbnz	w8, #5, 2a4a0 <vasnprintf@@Base+0x364>
   2a5b0:	b	2a4a8 <vasnprintf@@Base+0x36c>
   2a5b4:	mov	w26, wzr
   2a5b8:	ldr	x8, [x22, #64]
   2a5bc:	cmn	x8, #0x1
   2a5c0:	b.eq	2a5f0 <vasnprintf@@Base+0x4b4>  // b.none
   2a5c4:	ldr	x9, [x19, #136]
   2a5c8:	lsl	x10, x8, #5
   2a5cc:	ldr	w10, [x9, x10]
   2a5d0:	cmp	w10, #0x5
   2a5d4:	b.ne	2adfc <vasnprintf@@Base+0xcc0>  // b.any
   2a5d8:	add	x8, x9, x8, lsl #5
   2a5dc:	ldr	w8, [x8, #16]
   2a5e0:	add	w9, w26, #0x1
   2a5e4:	add	x10, x19, #0x60
   2a5e8:	str	w8, [x10, w26, uxtw #2]
   2a5ec:	mov	w26, w9
   2a5f0:	mov	w1, #0x2                   	// #2
   2a5f4:	mov	x0, x24
   2a5f8:	bl	ad10 <xsum@plt>
   2a5fc:	cmp	x0, x25
   2a600:	str	w23, [x19, #76]
   2a604:	b.ls	2a680 <vasnprintf@@Base+0x544>  // b.plast
   2a608:	lsl	x8, x25, #1
   2a60c:	cmp	x25, #0x0
   2a610:	csinv	x8, x8, xzr, ge  // ge = tcont
   2a614:	mov	w9, #0xc                   	// #12
   2a618:	csel	x8, x9, x8, eq  // eq = none
   2a61c:	cmp	x0, x8
   2a620:	csel	x25, x0, x8, hi  // hi = pmore
   2a624:	cmn	x25, #0x1
   2a628:	b.eq	2abb0 <vasnprintf@@Base+0xa74>  // b.none
   2a62c:	ldr	x8, [x19, #64]
   2a630:	cmp	x21, x8
   2a634:	b.eq	2aba0 <vasnprintf@@Base+0xa64>  // b.none
   2a638:	cbz	x21, 2aba0 <vasnprintf@@Base+0xa64>
   2a63c:	mov	x0, x21
   2a640:	mov	x1, x25
   2a644:	bl	aea0 <realloc@plt>
   2a648:	mov	x20, x0
   2a64c:	cbz	x0, 2abb0 <vasnprintf@@Base+0xa74>
   2a650:	mov	w8, wzr
   2a654:	cbz	x24, 2a678 <vasnprintf@@Base+0x53c>
   2a658:	ldr	x9, [x19, #64]
   2a65c:	cmp	x21, x9
   2a660:	b.ne	2a678 <vasnprintf@@Base+0x53c>  // b.any
   2a664:	mov	x0, x20
   2a668:	mov	x1, x21
   2a66c:	mov	x2, x24
   2a670:	bl	a800 <memcpy@plt>
   2a674:	mov	w8, wzr
   2a678:	mov	x21, x20
   2a67c:	cbnz	w8, 2abb8 <vasnprintf@@Base+0xa7c>
   2a680:	str	x28, [x19, #24]
   2a684:	strb	wzr, [x21, x24]
   2a688:	bl	b6f0 <__errno_location@plt>
   2a68c:	ldr	w8, [x0]
   2a690:	mov	x28, x0
   2a694:	str	w8, [x19, #20]
   2a698:	b	2a6ac <vasnprintf@@Base+0x570>
   2a69c:	add	x24, x24, x8
   2a6a0:	mov	w8, #0x9                   	// #9
   2a6a4:	cmp	w8, #0xa
   2a6a8:	b.ne	2aaec <vasnprintf@@Base+0x9b0>  // b.any
   2a6ac:	mov	w8, #0xffffffff            	// #-1
   2a6b0:	str	w8, [x19, #92]
   2a6b4:	ldr	w8, [x19, #76]
   2a6b8:	sub	x23, x25, x24
   2a6bc:	mov	w9, #0x7fffffff            	// #2147483647
   2a6c0:	cmp	x23, x9
   2a6c4:	sub	w8, w8, #0x1
   2a6c8:	csel	x20, x23, x9, cc  // cc = lo, ul, last
   2a6cc:	cmp	w8, #0x10
   2a6d0:	str	wzr, [x28]
   2a6d4:	b.hi	2adfc <vasnprintf@@Base+0xcc0>  // b.pmore
   2a6d8:	adrp	x11, 2d000 <vasnprintf@@Base+0x2ec4>
   2a6dc:	add	x11, x11, #0xd88
   2a6e0:	adr	x9, 2a6f0 <vasnprintf@@Base+0x5b4>
   2a6e4:	ldrb	w10, [x11, x8]
   2a6e8:	add	x9, x9, x10, lsl #2
   2a6ec:	br	x9
   2a6f0:	ldr	x8, [x19, #136]
   2a6f4:	ldr	x9, [x22, #80]
   2a6f8:	cmp	w26, #0x2
   2a6fc:	add	x8, x8, x9, lsl #5
   2a700:	ldr	x8, [x8, #16]
   2a704:	b.eq	2a790 <vasnprintf@@Base+0x654>  // b.none
   2a708:	cmp	w26, #0x1
   2a70c:	b.eq	2a7b0 <vasnprintf@@Base+0x674>  // b.none
   2a710:	cbnz	w26, 2adfc <vasnprintf@@Base+0xcc0>
   2a714:	ldr	x2, [x19, #80]
   2a718:	add	x0, x21, x24
   2a71c:	add	x4, x19, #0x5c
   2a720:	mov	x1, x20
   2a724:	mov	x3, x8
   2a728:	bl	aaf0 <snprintf@plt>
   2a72c:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a730:	ldr	x8, [x19, #136]
   2a734:	ldr	x9, [x22, #80]
   2a738:	cmp	w26, #0x2
   2a73c:	add	x8, x8, x9, lsl #5
   2a740:	ldr	w8, [x8, #16]
   2a744:	b.eq	2a7e8 <vasnprintf@@Base+0x6ac>  // b.none
   2a748:	cmp	w26, #0x1
   2a74c:	b.ne	2a770 <vasnprintf@@Base+0x634>  // b.any
   2a750:	ldr	w3, [x19, #96]
   2a754:	ldr	x2, [x19, #80]
   2a758:	add	x0, x21, x24
   2a75c:	add	x5, x19, #0x5c
   2a760:	mov	x1, x20
   2a764:	mov	w4, w8
   2a768:	bl	aaf0 <snprintf@plt>
   2a76c:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a770:	cbnz	w26, 2adfc <vasnprintf@@Base+0xcc0>
   2a774:	ldr	x2, [x19, #80]
   2a778:	add	x0, x21, x24
   2a77c:	add	x4, x19, #0x5c
   2a780:	mov	x1, x20
   2a784:	mov	w3, w8
   2a788:	bl	aaf0 <snprintf@plt>
   2a78c:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a790:	ldp	w3, w4, [x19, #96]
   2a794:	ldr	x2, [x19, #80]
   2a798:	add	x0, x21, x24
   2a79c:	add	x6, x19, #0x5c
   2a7a0:	mov	x1, x20
   2a7a4:	mov	x5, x8
   2a7a8:	bl	aaf0 <snprintf@plt>
   2a7ac:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a7b0:	ldr	w3, [x19, #96]
   2a7b4:	ldr	x2, [x19, #80]
   2a7b8:	add	x0, x21, x24
   2a7bc:	add	x5, x19, #0x5c
   2a7c0:	mov	x1, x20
   2a7c4:	mov	x4, x8
   2a7c8:	bl	aaf0 <snprintf@plt>
   2a7cc:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a7d0:	ldr	x8, [x19, #136]
   2a7d4:	ldr	x9, [x22, #80]
   2a7d8:	cmp	w26, #0x2
   2a7dc:	add	x8, x8, x9, lsl #5
   2a7e0:	ldrsb	w8, [x8, #16]
   2a7e4:	b.ne	2a748 <vasnprintf@@Base+0x60c>  // b.any
   2a7e8:	ldp	w3, w4, [x19, #96]
   2a7ec:	ldr	x2, [x19, #80]
   2a7f0:	add	x0, x21, x24
   2a7f4:	add	x6, x19, #0x5c
   2a7f8:	mov	x1, x20
   2a7fc:	mov	w5, w8
   2a800:	bl	aaf0 <snprintf@plt>
   2a804:	ldr	w8, [x19, #92]
   2a808:	tbnz	w8, #31, 2a858 <vasnprintf@@Base+0x71c>
   2a80c:	cmp	x20, x8
   2a810:	b.ls	2a824 <vasnprintf@@Base+0x6e8>  // b.plast
   2a814:	sxtw	x9, w8
   2a818:	add	x10, x21, x24
   2a81c:	ldrb	w9, [x10, x9]
   2a820:	cbnz	w9, 2adfc <vasnprintf@@Base+0xcc0>
   2a824:	cmp	w0, w8
   2a828:	b.le	2a830 <vasnprintf@@Base+0x6f4>
   2a82c:	str	w0, [x19, #92]
   2a830:	ldrsw	x8, [x19, #92]
   2a834:	tbnz	w8, #31, 2a86c <vasnprintf@@Base+0x730>
   2a838:	add	w9, w8, #0x1
   2a83c:	cmp	x20, x9
   2a840:	b.hi	2a69c <vasnprintf@@Base+0x560>  // b.pmore
   2a844:	mov	w9, #0x7ffffffe            	// #2147483646
   2a848:	cmp	x23, x9
   2a84c:	b.ls	2a894 <vasnprintf@@Base+0x758>  // b.plast
   2a850:	mov	w8, #0x1d                  	// #29
   2a854:	b	2a6a4 <vasnprintf@@Base+0x568>
   2a858:	ldrb	w8, [x27, #1]
   2a85c:	cbz	w8, 2a88c <vasnprintf@@Base+0x750>
   2a860:	strb	wzr, [x27, #1]
   2a864:	mov	w8, #0xa                   	// #10
   2a868:	b	2a6a4 <vasnprintf@@Base+0x568>
   2a86c:	ldr	w20, [x28]
   2a870:	cbnz	w20, 2a9d8 <vasnprintf@@Base+0x89c>
   2a874:	ldrb	w8, [x22, #72]
   2a878:	orr	w8, w8, #0x10
   2a87c:	cmp	w8, #0x73
   2a880:	b.ne	2a9d4 <vasnprintf@@Base+0x898>  // b.any
   2a884:	mov	w20, #0x54                  	// #84
   2a888:	b	2a9d8 <vasnprintf@@Base+0x89c>
   2a88c:	tbz	w0, #31, 2a82c <vasnprintf@@Base+0x6f0>
   2a890:	b	2a830 <vasnprintf@@Base+0x6f4>
   2a894:	add	w1, w8, #0x2
   2a898:	mov	x0, x24
   2a89c:	bl	ad10 <xsum@plt>
   2a8a0:	lsl	x8, x25, #1
   2a8a4:	cmp	x25, #0x0
   2a8a8:	csinv	x20, x8, xzr, ge  // ge = tcont
   2a8ac:	mov	x1, x20
   2a8b0:	bl	b110 <xmax@plt>
   2a8b4:	cmp	x0, x25
   2a8b8:	b.ls	2aae4 <vasnprintf@@Base+0x9a8>  // b.plast
   2a8bc:	cmp	x25, #0x0
   2a8c0:	mov	w8, #0xc                   	// #12
   2a8c4:	csel	x8, x8, x20, eq  // eq = none
   2a8c8:	cmp	x0, x8
   2a8cc:	csel	x25, x0, x8, hi  // hi = pmore
   2a8d0:	cmn	x25, #0x1
   2a8d4:	b.eq	2a8fc <vasnprintf@@Base+0x7c0>  // b.none
   2a8d8:	ldr	x8, [x19, #64]
   2a8dc:	cmp	x21, x8
   2a8e0:	b.eq	2aaa4 <vasnprintf@@Base+0x968>  // b.none
   2a8e4:	cbz	x21, 2aaa4 <vasnprintf@@Base+0x968>
   2a8e8:	mov	x0, x21
   2a8ec:	mov	x1, x25
   2a8f0:	bl	aea0 <realloc@plt>
   2a8f4:	mov	x20, x0
   2a8f8:	cbnz	x0, 2aab4 <vasnprintf@@Base+0x978>
   2a8fc:	mov	w8, #0x6                   	// #6
   2a900:	cbnz	w8, 2a6a4 <vasnprintf@@Base+0x568>
   2a904:	b	2aae4 <vasnprintf@@Base+0x9a8>
   2a908:	ldr	x8, [x19, #136]
   2a90c:	ldr	x9, [x22, #80]
   2a910:	cmp	w26, #0x2
   2a914:	add	x8, x8, x9, lsl #5
   2a918:	ldrb	w8, [x8, #16]
   2a91c:	b.ne	2a748 <vasnprintf@@Base+0x60c>  // b.any
   2a920:	b	2a7e8 <vasnprintf@@Base+0x6ac>
   2a924:	ldr	x8, [x19, #136]
   2a928:	ldr	x9, [x22, #80]
   2a92c:	cmp	w26, #0x2
   2a930:	add	x8, x8, x9, lsl #5
   2a934:	ldrsh	w8, [x8, #16]
   2a938:	b.ne	2a748 <vasnprintf@@Base+0x60c>  // b.any
   2a93c:	b	2a7e8 <vasnprintf@@Base+0x6ac>
   2a940:	ldr	x8, [x19, #136]
   2a944:	ldr	x9, [x22, #80]
   2a948:	cmp	w26, #0x2
   2a94c:	add	x8, x8, x9, lsl #5
   2a950:	ldrh	w8, [x8, #16]
   2a954:	b.ne	2a748 <vasnprintf@@Base+0x60c>  // b.any
   2a958:	b	2a7e8 <vasnprintf@@Base+0x6ac>
   2a95c:	ldr	x8, [x19, #136]
   2a960:	ldr	x9, [x22, #80]
   2a964:	cmp	w26, #0x2
   2a968:	add	x8, x8, x9, lsl #5
   2a96c:	ldr	q0, [x8, #16]
   2a970:	b.eq	2aa34 <vasnprintf@@Base+0x8f8>  // b.none
   2a974:	cmp	w26, #0x1
   2a978:	b.eq	2aa50 <vasnprintf@@Base+0x914>  // b.none
   2a97c:	cbnz	w26, 2adfc <vasnprintf@@Base+0xcc0>
   2a980:	ldr	x2, [x19, #80]
   2a984:	add	x0, x21, x24
   2a988:	add	x3, x19, #0x5c
   2a98c:	mov	x1, x20
   2a990:	bl	aaf0 <snprintf@plt>
   2a994:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a998:	ldr	x8, [x19, #136]
   2a99c:	ldr	x9, [x22, #80]
   2a9a0:	cmp	w26, #0x2
   2a9a4:	add	x8, x8, x9, lsl #5
   2a9a8:	ldr	d0, [x8, #16]
   2a9ac:	b.eq	2aa6c <vasnprintf@@Base+0x930>  // b.none
   2a9b0:	cmp	w26, #0x1
   2a9b4:	b.eq	2aa88 <vasnprintf@@Base+0x94c>  // b.none
   2a9b8:	cbnz	w26, 2adfc <vasnprintf@@Base+0xcc0>
   2a9bc:	ldr	x2, [x19, #80]
   2a9c0:	add	x0, x21, x24
   2a9c4:	add	x3, x19, #0x5c
   2a9c8:	mov	x1, x20
   2a9cc:	bl	aaf0 <snprintf@plt>
   2a9d0:	b	2a804 <vasnprintf@@Base+0x6c8>
   2a9d4:	mov	w20, #0x16                  	// #22
   2a9d8:	ldr	x8, [x19, #64]
   2a9dc:	cmp	x21, x8
   2a9e0:	b.eq	2a9f0 <vasnprintf@@Base+0x8b4>  // b.none
   2a9e4:	cbz	x21, 2a9f0 <vasnprintf@@Base+0x8b4>
   2a9e8:	mov	x0, x21
   2a9ec:	bl	b1d0 <free@plt>
   2a9f0:	ldr	x0, [x19, #56]
   2a9f4:	cbz	x0, 2a9fc <vasnprintf@@Base+0x8c0>
   2a9f8:	bl	b1d0 <free@plt>
   2a9fc:	add	x8, x19, #0x178
   2aa00:	ldr	x0, [x8, #8]
   2aa04:	ldr	x8, [x19, #48]
   2aa08:	cmp	x0, x8
   2aa0c:	b.eq	2aa14 <vasnprintf@@Base+0x8d8>  // b.none
   2aa10:	bl	b1d0 <free@plt>
   2aa14:	ldr	x0, [x19, #136]
   2aa18:	ldr	x8, [x19, #40]
   2aa1c:	cmp	x0, x8
   2aa20:	b.eq	2aa28 <vasnprintf@@Base+0x8ec>  // b.none
   2aa24:	bl	b1d0 <free@plt>
   2aa28:	str	w20, [x28]
   2aa2c:	mov	w8, #0x1                   	// #1
   2aa30:	b	2a6a4 <vasnprintf@@Base+0x568>
   2aa34:	ldp	w3, w4, [x19, #96]
   2aa38:	ldr	x2, [x19, #80]
   2aa3c:	add	x0, x21, x24
   2aa40:	add	x5, x19, #0x5c
   2aa44:	mov	x1, x20
   2aa48:	bl	aaf0 <snprintf@plt>
   2aa4c:	b	2a804 <vasnprintf@@Base+0x6c8>
   2aa50:	ldr	w3, [x19, #96]
   2aa54:	ldr	x2, [x19, #80]
   2aa58:	add	x0, x21, x24
   2aa5c:	add	x4, x19, #0x5c
   2aa60:	mov	x1, x20
   2aa64:	bl	aaf0 <snprintf@plt>
   2aa68:	b	2a804 <vasnprintf@@Base+0x6c8>
   2aa6c:	ldp	w3, w4, [x19, #96]
   2aa70:	ldr	x2, [x19, #80]
   2aa74:	add	x0, x21, x24
   2aa78:	add	x5, x19, #0x5c
   2aa7c:	mov	x1, x20
   2aa80:	bl	aaf0 <snprintf@plt>
   2aa84:	b	2a804 <vasnprintf@@Base+0x6c8>
   2aa88:	ldr	w3, [x19, #96]
   2aa8c:	ldr	x2, [x19, #80]
   2aa90:	add	x0, x21, x24
   2aa94:	add	x4, x19, #0x5c
   2aa98:	mov	x1, x20
   2aa9c:	bl	aaf0 <snprintf@plt>
   2aaa0:	b	2a804 <vasnprintf@@Base+0x6c8>
   2aaa4:	mov	x0, x25
   2aaa8:	bl	abc0 <malloc@plt>
   2aaac:	mov	x20, x0
   2aab0:	cbz	x0, 2a8fc <vasnprintf@@Base+0x7c0>
   2aab4:	mov	w8, wzr
   2aab8:	cbz	x24, 2aadc <vasnprintf@@Base+0x9a0>
   2aabc:	ldr	x9, [x19, #64]
   2aac0:	cmp	x21, x9
   2aac4:	b.ne	2aadc <vasnprintf@@Base+0x9a0>  // b.any
   2aac8:	mov	x0, x20
   2aacc:	mov	x1, x21
   2aad0:	mov	x2, x24
   2aad4:	bl	a800 <memcpy@plt>
   2aad8:	mov	w8, wzr
   2aadc:	mov	x21, x20
   2aae0:	cbnz	w8, 2a6a4 <vasnprintf@@Base+0x568>
   2aae4:	mov	w8, #0xa                   	// #10
   2aae8:	b	2a6a4 <vasnprintf@@Base+0x568>
   2aaec:	cmp	w8, #0x9
   2aaf0:	add	x26, x19, #0x178
   2aaf4:	b.ne	2a294 <vasnprintf@@Base+0x158>  // b.any
   2aaf8:	ldr	w9, [x19, #20]
   2aafc:	mov	w8, wzr
   2ab00:	str	w9, [x28]
   2ab04:	b	2a294 <vasnprintf@@Base+0x158>
   2ab08:	mov	x0, x25
   2ab0c:	bl	abc0 <malloc@plt>
   2ab10:	mov	x23, x0
   2ab14:	cbz	x0, 2a410 <vasnprintf@@Base+0x2d4>
   2ab18:	mov	w8, wzr
   2ab1c:	cbz	x24, 2ab40 <vasnprintf@@Base+0xa04>
   2ab20:	ldr	x9, [x19, #64]
   2ab24:	cmp	x21, x9
   2ab28:	b.ne	2ab40 <vasnprintf@@Base+0xa04>  // b.any
   2ab2c:	mov	x0, x23
   2ab30:	mov	x1, x21
   2ab34:	mov	x2, x24
   2ab38:	bl	a800 <memcpy@plt>
   2ab3c:	mov	w8, wzr
   2ab40:	mov	x21, x23
   2ab44:	cbnz	w8, 2a418 <vasnprintf@@Base+0x2dc>
   2ab48:	mov	w9, #0x25                  	// #37
   2ab4c:	mov	w8, wzr
   2ab50:	strb	w9, [x21, x24]
   2ab54:	mov	x24, x20
   2ab58:	cbz	w8, 2a29c <vasnprintf@@Base+0x160>
   2ab5c:	b	2ac34 <vasnprintf@@Base+0xaf8>
   2ab60:	add	x8, x9, x8, lsl #5
   2ab64:	ldr	x8, [x8, #16]
   2ab68:	strb	w24, [x8]
   2ab6c:	b	2a29c <vasnprintf@@Base+0x160>
   2ab70:	add	x8, x9, x8, lsl #5
   2ab74:	ldr	x8, [x8, #16]
   2ab78:	strh	w24, [x8]
   2ab7c:	b	2a29c <vasnprintf@@Base+0x160>
   2ab80:	add	x8, x9, x8, lsl #5
   2ab84:	ldr	x8, [x8, #16]
   2ab88:	str	w24, [x8]
   2ab8c:	b	2a29c <vasnprintf@@Base+0x160>
   2ab90:	cmp	w23, #0xc
   2ab94:	b.ne	2a520 <vasnprintf@@Base+0x3e4>  // b.any
   2ab98:	mov	w8, #0x4c                  	// #76
   2ab9c:	b	2a51c <vasnprintf@@Base+0x3e0>
   2aba0:	mov	x0, x25
   2aba4:	bl	abc0 <malloc@plt>
   2aba8:	mov	x20, x0
   2abac:	cbnz	x0, 2a650 <vasnprintf@@Base+0x514>
   2abb0:	mov	w8, #0x6                   	// #6
   2abb4:	cbz	w8, 2a680 <vasnprintf@@Base+0x544>
   2abb8:	add	x26, x19, #0x178
   2abbc:	cbz	w8, 2a29c <vasnprintf@@Base+0x160>
   2abc0:	cmp	w8, #0x6
   2abc4:	b.eq	2ad74 <vasnprintf@@Base+0xc38>  // b.none
   2abc8:	cmp	w8, #0x1d
   2abcc:	b.ne	2ad6c <vasnprintf@@Base+0xc30>  // b.any
   2abd0:	ldr	x8, [x19, #64]
   2abd4:	cmp	x21, x8
   2abd8:	b.eq	2abe8 <vasnprintf@@Base+0xaac>  // b.none
   2abdc:	cbz	x21, 2abe8 <vasnprintf@@Base+0xaac>
   2abe0:	mov	x0, x21
   2abe4:	bl	b1d0 <free@plt>
   2abe8:	ldr	x0, [x19, #56]
   2abec:	cbz	x0, 2abf4 <vasnprintf@@Base+0xab8>
   2abf0:	bl	b1d0 <free@plt>
   2abf4:	ldr	x0, [x26, #8]
   2abf8:	add	x8, x19, #0x178
   2abfc:	add	x8, x8, #0x20
   2ac00:	cmp	x0, x8
   2ac04:	b.eq	2ac0c <vasnprintf@@Base+0xad0>  // b.none
   2ac08:	bl	b1d0 <free@plt>
   2ac0c:	ldr	x0, [x19, #136]
   2ac10:	add	x8, x19, #0x80
   2ac14:	add	x8, x8, #0x10
   2ac18:	cmp	x0, x8
   2ac1c:	b.eq	2ac24 <vasnprintf@@Base+0xae8>  // b.none
   2ac20:	bl	b1d0 <free@plt>
   2ac24:	bl	b6f0 <__errno_location@plt>
   2ac28:	mov	x21, xzr
   2ac2c:	mov	w8, #0x4b                  	// #75
   2ac30:	b	2add4 <vasnprintf@@Base+0xc98>
   2ac34:	cmp	w8, #0x6
   2ac38:	b.ne	2ad6c <vasnprintf@@Base+0xc30>  // b.any
   2ac3c:	b	2ad74 <vasnprintf@@Base+0xc38>
   2ac40:	mov	w1, #0x1                   	// #1
   2ac44:	mov	x0, x24
   2ac48:	bl	ad10 <xsum@plt>
   2ac4c:	cmp	x0, x25
   2ac50:	b.ls	2acf8 <vasnprintf@@Base+0xbbc>  // b.plast
   2ac54:	lsl	x8, x25, #1
   2ac58:	cmp	x25, #0x0
   2ac5c:	csinv	x8, x8, xzr, ge  // ge = tcont
   2ac60:	mov	w9, #0xc                   	// #12
   2ac64:	csel	x8, x9, x8, eq  // eq = none
   2ac68:	cmp	x0, x8
   2ac6c:	csel	x25, x0, x8, hi  // hi = pmore
   2ac70:	cmn	x25, #0x1
   2ac74:	b.eq	2ace8 <vasnprintf@@Base+0xbac>  // b.none
   2ac78:	ldr	x8, [x19, #64]
   2ac7c:	cmp	x21, x8
   2ac80:	b.eq	2aca8 <vasnprintf@@Base+0xb6c>  // b.none
   2ac84:	cbz	x21, 2aca8 <vasnprintf@@Base+0xb6c>
   2ac88:	mov	x0, x21
   2ac8c:	mov	x1, x25
   2ac90:	bl	aea0 <realloc@plt>
   2ac94:	b	2acb0 <vasnprintf@@Base+0xb74>
   2ac98:	mov	w8, #0x2                   	// #2
   2ac9c:	str	x0, [x19, #80]
   2aca0:	cbnz	w8, 2ad98 <vasnprintf@@Base+0xc5c>
   2aca4:	b	2a1d4 <vasnprintf@@Base+0x98>
   2aca8:	mov	x0, x25
   2acac:	bl	abc0 <malloc@plt>
   2acb0:	mov	x20, x0
   2acb4:	cbz	x0, 2ace8 <vasnprintf@@Base+0xbac>
   2acb8:	mov	w8, wzr
   2acbc:	cbz	x24, 2ace0 <vasnprintf@@Base+0xba4>
   2acc0:	ldr	x9, [x19, #64]
   2acc4:	cmp	x21, x9
   2acc8:	b.ne	2ace0 <vasnprintf@@Base+0xba4>  // b.any
   2accc:	mov	x0, x20
   2acd0:	mov	x1, x21
   2acd4:	mov	x2, x24
   2acd8:	bl	a800 <memcpy@plt>
   2acdc:	mov	w8, wzr
   2ace0:	mov	x21, x20
   2ace4:	b	2acec <vasnprintf@@Base+0xbb0>
   2ace8:	mov	w8, #0x6                   	// #6
   2acec:	cmp	w8, #0x6
   2acf0:	b.eq	2ad74 <vasnprintf@@Base+0xc38>  // b.none
   2acf4:	cbnz	w8, 2ad6c <vasnprintf@@Base+0xc30>
   2acf8:	ldr	x8, [x19, #64]
   2acfc:	strb	wzr, [x21, x24]
   2ad00:	cmp	x21, x8
   2ad04:	b.eq	2ad24 <vasnprintf@@Base+0xbe8>  // b.none
   2ad08:	add	x1, x24, #0x1
   2ad0c:	cmp	x1, x25
   2ad10:	b.cs	2ad24 <vasnprintf@@Base+0xbe8>  // b.hs, b.nlast
   2ad14:	mov	x0, x21
   2ad18:	bl	aea0 <realloc@plt>
   2ad1c:	cmp	x0, #0x0
   2ad20:	csel	x21, x21, x0, eq  // eq = none
   2ad24:	ldr	x20, [x19]
   2ad28:	ldr	x0, [x19, #56]
   2ad2c:	cbz	x0, 2ad34 <vasnprintf@@Base+0xbf8>
   2ad30:	bl	b1d0 <free@plt>
   2ad34:	ldr	x0, [x26, #8]
   2ad38:	add	x8, x19, #0x178
   2ad3c:	add	x8, x8, #0x20
   2ad40:	cmp	x0, x8
   2ad44:	b.eq	2ad4c <vasnprintf@@Base+0xc10>  // b.none
   2ad48:	bl	b1d0 <free@plt>
   2ad4c:	ldr	x0, [x19, #136]
   2ad50:	add	x8, x19, #0x80
   2ad54:	add	x8, x8, #0x10
   2ad58:	cmp	x0, x8
   2ad5c:	b.eq	2ad64 <vasnprintf@@Base+0xc28>  // b.none
   2ad60:	bl	b1d0 <free@plt>
   2ad64:	str	x24, [x20]
   2ad68:	b	2add8 <vasnprintf@@Base+0xc9c>
   2ad6c:	mov	x21, xzr
   2ad70:	b	2add8 <vasnprintf@@Base+0xc9c>
   2ad74:	ldr	x8, [x19, #64]
   2ad78:	cmp	x21, x8
   2ad7c:	b.eq	2ad8c <vasnprintf@@Base+0xc50>  // b.none
   2ad80:	cbz	x21, 2ad8c <vasnprintf@@Base+0xc50>
   2ad84:	mov	x0, x21
   2ad88:	bl	b1d0 <free@plt>
   2ad8c:	ldr	x0, [x19, #56]
   2ad90:	cbz	x0, 2ad98 <vasnprintf@@Base+0xc5c>
   2ad94:	bl	b1d0 <free@plt>
   2ad98:	ldr	x0, [x26, #8]
   2ad9c:	add	x8, x19, #0x178
   2ada0:	add	x8, x8, #0x20
   2ada4:	cmp	x0, x8
   2ada8:	b.eq	2adb0 <vasnprintf@@Base+0xc74>  // b.none
   2adac:	bl	b1d0 <free@plt>
   2adb0:	ldr	x0, [x19, #136]
   2adb4:	add	x8, x19, #0x80
   2adb8:	add	x8, x8, #0x10
   2adbc:	cmp	x0, x8
   2adc0:	b.eq	2adc8 <vasnprintf@@Base+0xc8c>  // b.none
   2adc4:	bl	b1d0 <free@plt>
   2adc8:	bl	b6f0 <__errno_location@plt>
   2adcc:	mov	x21, xzr
   2add0:	mov	w8, #0xc                   	// #12
   2add4:	str	w8, [x0]
   2add8:	mov	x0, x21
   2addc:	mov	sp, x29
   2ade0:	ldp	x20, x19, [sp, #80]
   2ade4:	ldp	x22, x21, [sp, #64]
   2ade8:	ldp	x24, x23, [sp, #48]
   2adec:	ldp	x26, x25, [sp, #32]
   2adf0:	ldp	x28, x27, [sp, #16]
   2adf4:	ldp	x29, x30, [sp], #96
   2adf8:	ret
   2adfc:	bl	b020 <abort@plt>
   2ae00:	adrp	x2, 40000 <base_len@@Base+0x2c984>
   2ae04:	mov	x1, #0x0                   	// #0
   2ae08:	ldr	x2, [x2, #2128]
   2ae0c:	b	aa50 <__cxa_atexit@plt>
   2ae10:	mov	x2, x1
   2ae14:	mov	x1, x0
   2ae18:	mov	w0, #0x0                   	// #0
   2ae1c:	b	b740 <__xstat@plt>
   2ae20:	mov	x2, x1
   2ae24:	mov	w1, w0
   2ae28:	mov	w0, #0x0                   	// #0
   2ae2c:	b	b510 <__fxstat@plt>
   2ae30:	mov	x2, x1
   2ae34:	mov	x1, x0
   2ae38:	mov	w0, #0x0                   	// #0
   2ae3c:	b	b420 <__lxstat@plt>
   2ae40:	mov	x4, x1
   2ae44:	mov	x5, x2
   2ae48:	mov	w1, w0
   2ae4c:	mov	x2, x4
   2ae50:	mov	w0, #0x0                   	// #0
   2ae54:	mov	w4, w3
   2ae58:	mov	x3, x5
   2ae5c:	b	b840 <__fxstatat@plt>

Disassembly of section .fini:

000000000002ae60 <.fini>:
   2ae60:	stp	x29, x30, [sp, #-16]!
   2ae64:	mov	x29, sp
   2ae68:	ldp	x29, x30, [sp], #16
   2ae6c:	ret
