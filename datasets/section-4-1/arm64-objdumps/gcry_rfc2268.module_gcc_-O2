
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_rfc2268.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <do_encrypt>:
   0:	ldrb	w3, [x2, #1]
   4:	mov	x9, x0
   8:	ldrb	w6, [x2]
   c:	mov	w10, #0x0                   	// #0
  10:	ldrb	w5, [x2, #3]
  14:	mov	w12, w6
  18:	ldrb	w8, [x2, #2]
  1c:	ldrb	w4, [x2, #5]
  20:	bfi	w12, w3, #8, #24
  24:	ldrb	w11, [x2, #4]
  28:	mov	w13, w8
  2c:	ldrb	w3, [x2, #7]
  30:	bfi	w13, w5, #8, #24
  34:	ldrb	w2, [x2, #6]
  38:	bfi	w11, w4, #8, #24
  3c:	bfi	w2, w3, #8, #24
  40:	sxth	w14, w2
  44:	ldrh	w3, [x9]
  48:	bic	w6, w13, w14
  4c:	and	w7, w11, w2
  50:	add	w6, w12, w6
  54:	add	w7, w7, w3
  58:	ldrh	w5, [x9, #4]
  5c:	cmp	w10, #0x4
  60:	add	w6, w7, w6, uxth
  64:	ldrh	w8, [x9, #2]
  68:	ldrh	w3, [x9, #6]
  6c:	ccmp	w10, #0xa, #0x4, ne  // ne = any
  70:	ubfiz	w7, w6, #1, #16
  74:	ubfx	x6, x6, #15, #1
  78:	orr	w7, w7, w6
  7c:	add	w8, w13, w8
  80:	and	w4, w7, w2
  84:	add	w6, w11, w5
  88:	sxth	w15, w7
  8c:	and	w12, w7, #0xffff
  90:	bic	w11, w11, w15
  94:	add	w2, w2, w3
  98:	add	w11, w11, w4
  9c:	add	w10, w10, #0x1
  a0:	add	w8, w11, w8, uxth
  a4:	add	x9, x9, #0x8
  a8:	ubfiz	w5, w8, #2, #16
  ac:	ubfx	x8, x8, #14, #2
  b0:	orr	w4, w5, w8
  b4:	and	w13, w4, #0xffff
  b8:	sxth	w4, w4
  bc:	and	w7, w7, w13
  c0:	bic	w4, w14, w4
  c4:	add	w4, w4, w7
  c8:	add	w5, w4, w6, uxth
  cc:	ubfiz	w4, w5, #3, #16
  d0:	ubfx	x5, x5, #13, #3
  d4:	orr	w3, w4, w5
  d8:	and	w4, w3, w13
  dc:	and	w11, w3, #0xffff
  e0:	sxth	w3, w3
  e4:	bic	w3, w15, w3
  e8:	add	w3, w3, w4
  ec:	add	w3, w3, w2, uxth
  f0:	ubfx	x2, x3, #11, #5
  f4:	ubfiz	w3, w3, #5, #11
  f8:	orr	w2, w3, w2
  fc:	b.ne	140 <do_encrypt+0x140>  // b.any
 100:	and	x3, x2, #0x3f
 104:	ldrh	w6, [x0, x3, lsl #1]
 108:	add	w6, w12, w6
 10c:	and	x3, x6, #0x3f
 110:	and	w12, w6, #0xffff
 114:	ldrh	w8, [x0, x3, lsl #1]
 118:	add	w8, w13, w8
 11c:	and	x3, x8, #0x3f
 120:	and	w13, w8, #0xffff
 124:	ldrh	w3, [x0, x3, lsl #1]
 128:	add	w11, w11, w3
 12c:	and	x3, x11, #0x3f
 130:	and	w11, w11, #0xffff
 134:	ldrh	w3, [x0, x3, lsl #1]
 138:	add	w2, w2, w3
 13c:	and	w2, w2, #0xffff
 140:	cmp	w10, #0x10
 144:	b.ne	40 <do_encrypt+0x40>  // b.any
 148:	strh	w12, [x1]
 14c:	strh	w13, [x1, #2]
 150:	strh	w11, [x1, #4]
 154:	strh	w2, [x1, #6]
 158:	ret
 15c:	nop

0000000000000160 <do_decrypt>:
 160:	ldrb	w5, [x2, #1]
 164:	add	x6, x0, #0x78
 168:	ldrb	w3, [x2]
 16c:	mov	w7, #0xf                   	// #15
 170:	ldrb	w8, [x2, #3]
 174:	ldrb	w4, [x2, #2]
 178:	mov	w10, w3
 17c:	ldrb	w11, [x2, #5]
 180:	bfi	w10, w5, #8, #24
 184:	ldrb	w3, [x2, #7]
 188:	mov	w9, w4
 18c:	ldrb	w5, [x2, #4]
 190:	bfi	w9, w8, #8, #24
 194:	ldrb	w2, [x2, #6]
 198:	mov	w8, w5
 19c:	bfi	w8, w11, #8, #24
 1a0:	bfi	w2, w3, #8, #24
 1a4:	nop
 1a8:	lsl	w4, w2, #11
 1ac:	sxth	w3, w10
 1b0:	orr	w2, w4, w2, lsr #5
 1b4:	bic	w12, w3, w8
 1b8:	ldrh	w11, [x6, #6]
 1bc:	and	w4, w9, w8
 1c0:	sxth	w2, w2
 1c4:	lsl	w5, w8, #13
 1c8:	sub	w2, w2, w12
 1cc:	add	w4, w4, w11
 1d0:	and	w2, w2, #0xffff
 1d4:	orr	w5, w5, w8, lsr #3
 1d8:	sub	w2, w2, w4
 1dc:	ldrh	w13, [x6, #4]
 1e0:	sxth	w5, w5
 1e4:	and	w8, w10, w9
 1e8:	sxth	w11, w2
 1ec:	lsl	w4, w9, #14
 1f0:	bic	w12, w11, w9
 1f4:	add	w8, w8, w13
 1f8:	sub	w5, w5, w12
 1fc:	orr	w4, w4, w9, lsr #2
 200:	and	w5, w5, #0xffff
 204:	ldrh	w12, [x6, #2]
 208:	sub	w5, w5, w8
 20c:	sxth	w4, w4
 210:	and	w8, w5, #0xffff
 214:	and	w9, w2, w10
 218:	bic	w5, w8, w3
 21c:	sub	w4, w4, w12
 220:	lsl	w3, w10, #15
 224:	add	w5, w5, w9
 228:	orr	w3, w3, w10, lsr #1
 22c:	and	w4, w4, #0xffff
 230:	sub	w4, w4, w5
 234:	ldrh	w5, [x6]
 238:	and	w9, w4, #0xffff
 23c:	sxth	w3, w3
 240:	and	w4, w2, w8
 244:	bic	w11, w9, w11
 248:	sub	w3, w3, w5
 24c:	add	w11, w11, w4
 250:	and	w3, w3, #0xffff
 254:	cmp	w7, #0x5
 258:	sub	w3, w3, w11
 25c:	ccmp	w7, #0xb, #0x4, ne  // ne = any
 260:	and	x13, x8, #0x3f
 264:	and	x12, x9, #0x3f
 268:	sub	w7, w7, #0x1
 26c:	and	w2, w2, #0xffff
 270:	and	w10, w3, #0xffff
 274:	b.ne	2b0 <do_decrypt+0x150>  // b.any
 278:	ldrh	w3, [x0, x13, lsl #1]
 27c:	and	x4, x10, #0x3f
 280:	ldrh	w5, [x0, x12, lsl #1]
 284:	sub	w2, w2, w3
 288:	and	x3, x2, #0x3f
 28c:	ldrh	w4, [x0, x4, lsl #1]
 290:	sub	w5, w8, w5
 294:	and	w2, w2, #0xffff
 298:	sub	w4, w9, w4
 29c:	and	w8, w5, #0xffff
 2a0:	ldrh	w3, [x0, x3, lsl #1]
 2a4:	and	w9, w4, #0xffff
 2a8:	sub	w3, w10, w3
 2ac:	and	w10, w3, #0xffff
 2b0:	sub	x6, x6, #0x8
 2b4:	cmn	w7, #0x1
 2b8:	b.ne	1a8 <do_decrypt+0x48>  // b.any
 2bc:	strh	w10, [x1]
 2c0:	strh	w9, [x1, #2]
 2c4:	strh	w8, [x1, #4]
 2c8:	strh	w2, [x1, #6]
 2cc:	ret

00000000000002d0 <do_setkey>:
 2d0:	adrp	x3, 0 <do_encrypt>
 2d4:	ldr	x4, [x3]
 2d8:	mov	x3, x0
 2dc:	ldr	w0, [x4]
 2e0:	cbnz	w0, 3e8 <do_setkey+0x118>
 2e4:	mov	w0, #0x1                   	// #1
 2e8:	str	w0, [x4]
 2ec:	str	xzr, [x4, #8]
 2f0:	cmp	w2, #0x4
 2f4:	mov	w0, #0xd                   	// #13
 2f8:	b.ls	3e4 <do_setkey+0x114>  // b.plast
 2fc:	mov	x0, #0x0                   	// #0
 300:	ldrb	w4, [x1, x0]
 304:	strb	w4, [x3, x0]
 308:	add	x0, x0, #0x1
 30c:	cmp	w2, w0
 310:	b.hi	300 <do_setkey+0x30>  // b.pmore
 314:	cmp	w2, #0x7f
 318:	adrp	x0, 0 <do_encrypt>
 31c:	b.hi	3f8 <do_setkey+0x128>  // b.pmore
 320:	mov	w4, #0x7f                  	// #127
 324:	sub	w9, w2, #0x1
 328:	sub	w4, w4, w2
 32c:	add	x8, x3, w2, uxtw
 330:	ldr	x5, [x0]
 334:	mov	x0, #0x0                   	// #0
 338:	add	w1, w9, w0
 33c:	ldrb	w6, [x3, x0]
 340:	cmp	x4, x0
 344:	ldrb	w1, [x3, w1, uxtw]
 348:	add	w1, w1, w6
 34c:	and	w1, w1, #0xff
 350:	ldrb	w1, [x5, w1, sxtw]
 354:	strb	w1, [x8, x0]
 358:	add	x0, x0, #0x1
 35c:	b.ne	338 <do_setkey+0x68>  // b.any
 360:	ldrb	w4, [x3]
 364:	sbfx	x2, x2, #0, #29
 368:	mov	w1, #0x80                  	// #128
 36c:	sub	w1, w1, w2
 370:	sub	w0, w1, #0x1
 374:	ldrb	w4, [x5, w4, sxtw]
 378:	strb	w4, [x3]
 37c:	ldrb	w4, [x3, w1, uxtw]
 380:	ldrb	w4, [x5, w4, sxtw]
 384:	strb	w4, [x3, w1, uxtw]
 388:	cbz	w1, 3c0 <do_setkey+0xf0>
 38c:	add	x0, x3, w0, uxtw
 390:	sub	w2, w2, #0x1
 394:	sub	w1, w1, w0
 398:	add	w2, w2, w1
 39c:	nop
 3a0:	add	w1, w2, w0
 3a4:	cmp	x3, x0
 3a8:	sub	x0, x0, #0x1
 3ac:	ldrb	w1, [x3, w1, uxtw]
 3b0:	eor	w1, w1, w4
 3b4:	ldrb	w4, [x5, w1, sxtw]
 3b8:	strb	w4, [x0, #1]
 3bc:	b.ne	3a0 <do_setkey+0xd0>  // b.any
 3c0:	add	x2, x3, #0x80
 3c4:	nop
 3c8:	ldrb	w0, [x3, #1]
 3cc:	ldrb	w1, [x3]
 3d0:	orr	w0, w1, w0, lsl #8
 3d4:	strh	w0, [x3], #2
 3d8:	cmp	x2, x3
 3dc:	b.ne	3c8 <do_setkey+0xf8>  // b.any
 3e0:	mov	w0, #0x0                   	// #0
 3e4:	ret
 3e8:	ldr	x4, [x4, #8]
 3ec:	mov	w0, #0x1c                  	// #28
 3f0:	cbz	x4, 2f0 <do_setkey+0x20>
 3f4:	ret
 3f8:	ldr	x5, [x0]
 3fc:	b	360 <do_setkey+0x90>
	...

0000000000000410 <grub_mod_init>:
 410:	adrp	x0, 0 <do_encrypt>
 414:	ldr	x0, [x0]
 418:	b	0 <grub_cipher_register>
 41c:	nop
	...

0000000000000428 <grub_mod_fini>:
 428:	adrp	x0, 0 <do_encrypt>
 42c:	ldr	x0, [x0]
 430:	b	0 <grub_cipher_unregister>
 434:	nop
	...
