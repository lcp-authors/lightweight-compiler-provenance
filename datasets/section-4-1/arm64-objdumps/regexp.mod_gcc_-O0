
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//regexp.mod_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_mod_init-0x450>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #40]
       c:	str	x1, [sp, #32]
      10:	str	x2, [sp, #24]
      14:	ldr	x0, [sp, #24]
      18:	ldr	w0, [x0, #4]
      1c:	sxtw	x0, w0
      20:	ldr	x1, [sp, #40]
      24:	add	x0, x1, x0
      28:	ldrb	w0, [x0]
      2c:	strb	w0, [sp, #63]
      30:	ldr	x0, [sp, #24]
      34:	ldr	w0, [x0, #4]
      38:	sxtw	x0, w0
      3c:	ldr	x1, [sp, #40]
      40:	add	x0, x1, x0
      44:	strb	wzr, [x0]
      48:	ldr	x0, [sp, #24]
      4c:	ldr	w0, [x0]
      50:	sxtw	x0, w0
      54:	ldr	x1, [sp, #40]
      58:	add	x0, x1, x0
      5c:	mov	x1, x0
      60:	ldr	x0, [sp, #32]
      64:	bl	0 <grub_env_set>
      68:	str	w0, [sp, #56]
      6c:	ldr	x0, [sp, #24]
      70:	ldr	w0, [x0, #4]
      74:	sxtw	x0, w0
      78:	ldr	x1, [sp, #40]
      7c:	add	x0, x1, x0
      80:	ldrb	w1, [sp, #63]
      84:	strb	w1, [x0]
      88:	ldr	w0, [sp, #56]
      8c:	ldp	x29, x30, [sp], #64
      90:	ret
      94:	stp	x29, x30, [sp, #-80]!
      98:	mov	x29, sp
      9c:	str	x0, [sp, #40]
      a0:	str	x1, [sp, #32]
      a4:	str	x2, [sp, #24]
      a8:	str	x3, [sp, #16]
      ac:	str	wzr, [sp, #76]
      b0:	b	23c <grub_mod_init-0x214>
      b4:	str	wzr, [sp, #72]
      b8:	ldrsw	x0, [sp, #76]
      bc:	lsl	x0, x0, #3
      c0:	ldr	x1, [sp, #40]
      c4:	add	x0, x1, x0
      c8:	ldr	x0, [x0]
      cc:	mov	w1, #0x3a                  	// #58
      d0:	bl	0 <grub_strchr>
      d4:	str	x0, [sp, #64]
      d8:	ldr	x0, [sp, #64]
      dc:	cmp	x0, #0x0
      e0:	b.ne	150 <grub_mod_init-0x300>  // b.any
      e4:	ldr	x0, [sp, #24]
      e8:	cmp	x0, #0x1
      ec:	b.ls	104 <grub_mod_init-0x34c>  // b.plast
      f0:	ldr	x0, [sp, #16]
      f4:	add	x0, x0, #0x8
      f8:	ldr	w0, [x0]
      fc:	cmn	w0, #0x1
     100:	b.ne	120 <grub_mod_init-0x330>  // b.any
     104:	ldrsw	x0, [sp, #76]
     108:	lsl	x0, x0, #3
     10c:	ldr	x1, [sp, #40]
     110:	add	x0, x1, x0
     114:	ldr	x0, [x0]
     118:	bl	0 <grub_env_unset>
     11c:	b	21c <grub_mod_init-0x234>
     120:	ldrsw	x0, [sp, #76]
     124:	lsl	x0, x0, #3
     128:	ldr	x1, [sp, #40]
     12c:	add	x0, x1, x0
     130:	ldr	x1, [x0]
     134:	ldr	x0, [sp, #16]
     138:	add	x0, x0, #0x8
     13c:	mov	x2, x0
     140:	ldr	x0, [sp, #32]
     144:	bl	0 <grub_mod_init-0x450>
     148:	str	w0, [sp, #72]
     14c:	b	21c <grub_mod_init-0x234>
     150:	ldrsw	x0, [sp, #76]
     154:	lsl	x0, x0, #3
     158:	ldr	x1, [sp, #40]
     15c:	add	x0, x1, x0
     160:	ldr	x0, [x0]
     164:	add	x1, sp, #0x30
     168:	mov	w2, #0xa                   	// #10
     16c:	bl	0 <grub_strtoul>
     170:	str	x0, [sp, #56]
     174:	ldr	x0, [sp, #48]
     178:	ldr	x1, [sp, #64]
     17c:	cmp	x1, x0
     180:	b.eq	1b4 <grub_mod_init-0x29c>  // b.none
     184:	ldrsw	x0, [sp, #76]
     188:	lsl	x0, x0, #3
     18c:	ldr	x1, [sp, #40]
     190:	add	x0, x1, x0
     194:	ldr	x0, [x0]
     198:	mov	x2, x0
     19c:	adrp	x0, 0 <grub_mod_init-0x450>
     1a0:	add	x0, x0, #0x0
     1a4:	ldr	x1, [x0]
     1a8:	mov	w0, #0x12                  	// #18
     1ac:	bl	0 <grub_error>
     1b0:	b	268 <grub_mod_init-0x1e8>
     1b4:	ldr	x1, [sp, #24]
     1b8:	ldr	x0, [sp, #56]
     1bc:	cmp	x1, x0
     1c0:	b.ls	1e0 <grub_mod_init-0x270>  // b.plast
     1c4:	ldr	x0, [sp, #56]
     1c8:	lsl	x0, x0, #3
     1cc:	ldr	x1, [sp, #16]
     1d0:	add	x0, x1, x0
     1d4:	ldr	w0, [x0]
     1d8:	cmn	w0, #0x1
     1dc:	b.ne	1f0 <grub_mod_init-0x260>  // b.any
     1e0:	ldr	x0, [sp, #64]
     1e4:	add	x0, x0, #0x1
     1e8:	bl	0 <grub_env_unset>
     1ec:	b	21c <grub_mod_init-0x234>
     1f0:	ldr	x0, [sp, #64]
     1f4:	add	x3, x0, #0x1
     1f8:	ldr	x0, [sp, #56]
     1fc:	lsl	x0, x0, #3
     200:	ldr	x1, [sp, #16]
     204:	add	x0, x1, x0
     208:	mov	x2, x0
     20c:	mov	x1, x3
     210:	ldr	x0, [sp, #32]
     214:	bl	0 <grub_mod_init-0x450>
     218:	str	w0, [sp, #72]
     21c:	ldr	w0, [sp, #72]
     220:	cmp	w0, #0x0
     224:	b.eq	230 <grub_mod_init-0x220>  // b.none
     228:	ldr	w0, [sp, #72]
     22c:	b	268 <grub_mod_init-0x1e8>
     230:	ldr	w0, [sp, #76]
     234:	add	w0, w0, #0x1
     238:	str	w0, [sp, #76]
     23c:	ldr	x0, [sp, #40]
     240:	cmp	x0, #0x0
     244:	b.eq	264 <grub_mod_init-0x1ec>  // b.none
     248:	ldrsw	x0, [sp, #76]
     24c:	lsl	x0, x0, #3
     250:	ldr	x1, [sp, #40]
     254:	add	x0, x1, x0
     258:	ldr	x0, [x0]
     25c:	cmp	x0, #0x0
     260:	b.ne	b4 <grub_mod_init-0x39c>  // b.any
     264:	mov	w0, #0x0                   	// #0
     268:	ldp	x29, x30, [sp], #80
     26c:	ret
	...
     278:	stp	x29, x30, [sp, #-160]!
     27c:	mov	x29, sp
     280:	str	x0, [sp, #40]
     284:	str	w1, [sp, #36]
     288:	str	x2, [sp, #24]
     28c:	str	xzr, [sp, #144]
     290:	ldr	w0, [sp, #36]
     294:	cmp	w0, #0x2
     298:	b.eq	2b4 <grub_mod_init-0x19c>  // b.none
     29c:	adrp	x0, 0 <grub_mod_init-0x450>
     2a0:	add	x0, x0, #0x0
     2a4:	ldr	x1, [x0]
     2a8:	mov	w0, #0x12                  	// #18
     2ac:	bl	0 <grub_error>
     2b0:	b	42c <grub_mod_init-0x24>
     2b4:	ldr	x0, [sp, #24]
     2b8:	ldr	x1, [x0]
     2bc:	add	x0, sp, #0x38
     2c0:	mov	w2, #0x1                   	// #1
     2c4:	bl	84ac <regcomp>
     2c8:	str	w0, [sp, #156]
     2cc:	ldr	w0, [sp, #156]
     2d0:	cmp	w0, #0x0
     2d4:	b.ne	378 <grub_mod_init-0xd8>  // b.any
     2d8:	ldr	x0, [sp, #104]
     2dc:	add	x0, x0, #0x1
     2e0:	lsl	x0, x0, #3
     2e4:	bl	0 <grub_zalloc>
     2e8:	str	x0, [sp, #144]
     2ec:	ldr	x0, [sp, #144]
     2f0:	cmp	x0, #0x0
     2f4:	b.eq	380 <grub_mod_init-0xd0>  // b.none
     2f8:	ldr	x0, [sp, #24]
     2fc:	add	x0, x0, #0x8
     300:	ldr	x1, [x0]
     304:	ldr	x0, [sp, #104]
     308:	add	x2, x0, #0x1
     30c:	add	x0, sp, #0x38
     310:	mov	w4, #0x0                   	// #0
     314:	ldr	x3, [sp, #144]
     318:	bl	10150 <regexec>
     31c:	str	w0, [sp, #156]
     320:	ldr	w0, [sp, #156]
     324:	cmp	w0, #0x0
     328:	b.ne	388 <grub_mod_init-0xc8>  // b.any
     32c:	ldr	x0, [sp, #40]
     330:	ldr	x0, [x0, #8]
     334:	ldr	x4, [x0, #8]
     338:	ldr	x0, [sp, #24]
     33c:	add	x0, x0, #0x8
     340:	ldr	x1, [x0]
     344:	ldr	x0, [sp, #104]
     348:	add	x0, x0, #0x1
     34c:	ldr	x3, [sp, #144]
     350:	mov	x2, x0
     354:	mov	x0, x4
     358:	bl	94 <grub_mod_init-0x3bc>
     35c:	str	w0, [sp, #140]
     360:	add	x0, sp, #0x38
     364:	bl	89c8 <regfree>
     368:	ldr	x0, [sp, #144]
     36c:	bl	0 <grub_free>
     370:	ldr	w0, [sp, #140]
     374:	b	42c <grub_mod_init-0x24>
     378:	nop
     37c:	b	38c <grub_mod_init-0xc4>
     380:	nop
     384:	b	38c <grub_mod_init-0xc4>
     388:	nop
     38c:	ldr	x0, [sp, #144]
     390:	bl	0 <grub_free>
     394:	add	x0, sp, #0x38
     398:	mov	x3, #0x0                   	// #0
     39c:	mov	x2, #0x0                   	// #0
     3a0:	mov	x1, x0
     3a4:	ldr	w0, [sp, #156]
     3a8:	bl	8648 <regerror>
     3ac:	str	x0, [sp, #128]
     3b0:	ldr	x0, [sp, #128]
     3b4:	bl	0 <grub_malloc>
     3b8:	str	x0, [sp, #120]
     3bc:	ldr	x0, [sp, #120]
     3c0:	cmp	x0, #0x0
     3c4:	b.ne	3e4 <grub_mod_init-0x6c>  // b.any
     3c8:	add	x0, sp, #0x38
     3cc:	bl	89c8 <regfree>
     3d0:	adrp	x0, 0 <grub_mod_init-0x450>
     3d4:	add	x0, x0, #0x0
     3d8:	ldr	x0, [x0]
     3dc:	ldr	w0, [x0]
     3e0:	b	42c <grub_mod_init-0x24>
     3e4:	add	x0, sp, #0x38
     3e8:	ldr	x3, [sp, #128]
     3ec:	ldr	x2, [sp, #120]
     3f0:	mov	x1, x0
     3f4:	ldr	w0, [sp, #156]
     3f8:	bl	8648 <regerror>
     3fc:	ldr	x2, [sp, #120]
     400:	adrp	x0, 0 <grub_mod_init-0x450>
     404:	add	x0, x0, #0x0
     408:	ldr	x1, [x0]
     40c:	mov	w0, #0x1                   	// #1
     410:	bl	0 <grub_error>
     414:	str	w0, [sp, #140]
     418:	add	x0, sp, #0x38
     41c:	bl	89c8 <regfree>
     420:	ldr	x0, [sp, #120]
     424:	bl	0 <grub_free>
     428:	ldr	w0, [sp, #140]
     42c:	ldp	x29, x30, [sp], #160
     430:	ret
     434:	nop
	...

0000000000000450 <grub_mod_init>:
     450:	stp	x29, x30, [sp, #-32]!
     454:	mov	x29, sp
     458:	str	x0, [sp, #24]
     45c:	adrp	x0, 0 <grub_mod_init-0x450>
     460:	add	x0, x0, #0x0
     464:	ldr	x5, [x0]
     468:	adrp	x0, 0 <grub_mod_init-0x450>
     46c:	add	x0, x0, #0x0
     470:	ldr	x4, [x0]
     474:	adrp	x0, 0 <grub_mod_init-0x450>
     478:	add	x0, x0, #0x0
     47c:	ldr	x3, [x0]
     480:	mov	w2, #0x0                   	// #0
     484:	adrp	x0, 0 <grub_mod_init-0x450>
     488:	add	x0, x0, #0x0
     48c:	ldr	x1, [x0]
     490:	adrp	x0, 0 <grub_mod_init-0x450>
     494:	add	x0, x0, #0x0
     498:	ldr	x0, [x0]
     49c:	bl	0 <grub_register_extcmd>
     4a0:	mov	x1, x0
     4a4:	adrp	x0, 0 <grub_mod_init-0x450>
     4a8:	add	x0, x0, #0x0
     4ac:	ldr	x0, [x0]
     4b0:	str	x1, [x0]
     4b4:	adrp	x0, 0 <grub_mod_init-0x450>
     4b8:	add	x0, x0, #0x0
     4bc:	ldr	x0, [x0]
     4c0:	adrp	x1, 0 <grub_mod_init-0x450>
     4c4:	add	x1, x1, #0x0
     4c8:	ldr	x1, [x1]
     4cc:	str	x1, [x0]
     4d0:	nop
     4d4:	ldp	x29, x30, [sp], #32
     4d8:	ret
     4dc:	nop
	...

0000000000000520 <grub_mod_fini>:
     520:	stp	x29, x30, [sp, #-16]!
     524:	mov	x29, sp
     528:	adrp	x0, 0 <grub_mod_init-0x450>
     52c:	add	x0, x0, #0x0
     530:	ldr	x0, [x0]
     534:	ldr	x0, [x0]
     538:	bl	0 <grub_unregister_extcmd>
     53c:	adrp	x0, 0 <grub_mod_init-0x450>
     540:	add	x0, x0, #0x0
     544:	ldr	x0, [x0]
     548:	str	xzr, [x0]
     54c:	nop
     550:	ldp	x29, x30, [sp], #16
     554:	ret
	...
     568:	stp	x29, x30, [sp, #-48]!
     56c:	mov	x29, sp
     570:	str	x0, [sp, #40]
     574:	str	x1, [sp, #32]
     578:	str	x2, [sp, #24]
     57c:	ldr	x2, [sp, #24]
     580:	ldr	x1, [sp, #32]
     584:	ldr	x0, [sp, #40]
     588:	bl	0 <grub_memmove>
     58c:	ldp	x29, x30, [sp], #48
     590:	ret
     594:	sub	sp, sp, #0x10
     598:	str	w0, [sp, #12]
     59c:	ldr	w0, [sp, #12]
     5a0:	cmp	w0, #0x40
     5a4:	b.le	5c0 <grub_mod_fini+0xa0>
     5a8:	ldr	w0, [sp, #12]
     5ac:	cmp	w0, #0x5a
     5b0:	b.gt	5c0 <grub_mod_fini+0xa0>
     5b4:	ldr	w0, [sp, #12]
     5b8:	add	w0, w0, #0x20
     5bc:	b	5c4 <grub_mod_fini+0xa4>
     5c0:	ldr	w0, [sp, #12]
     5c4:	add	sp, sp, #0x10
     5c8:	ret
     5cc:	stp	x29, x30, [sp, #-48]!
     5d0:	mov	x29, sp
     5d4:	str	x19, [sp, #16]
     5d8:	str	x0, [sp, #40]
     5dc:	str	x1, [sp, #32]
     5e0:	b	620 <grub_mod_fini+0x100>
     5e4:	ldr	x0, [sp, #40]
     5e8:	ldrb	w0, [x0]
     5ec:	bl	594 <grub_mod_fini+0x74>
     5f0:	mov	w19, w0
     5f4:	ldr	x0, [sp, #32]
     5f8:	ldrb	w0, [x0]
     5fc:	bl	594 <grub_mod_fini+0x74>
     600:	cmp	w19, w0
     604:	b.ne	644 <grub_mod_fini+0x124>  // b.any
     608:	ldr	x0, [sp, #40]
     60c:	add	x0, x0, #0x1
     610:	str	x0, [sp, #40]
     614:	ldr	x0, [sp, #32]
     618:	add	x0, x0, #0x1
     61c:	str	x0, [sp, #32]
     620:	ldr	x0, [sp, #40]
     624:	ldrb	w0, [x0]
     628:	cmp	w0, #0x0
     62c:	b.eq	648 <grub_mod_fini+0x128>  // b.none
     630:	ldr	x0, [sp, #32]
     634:	ldrb	w0, [x0]
     638:	cmp	w0, #0x0
     63c:	b.ne	5e4 <grub_mod_fini+0xc4>  // b.any
     640:	b	648 <grub_mod_fini+0x128>
     644:	nop
     648:	ldr	x0, [sp, #40]
     64c:	ldrb	w0, [x0]
     650:	bl	594 <grub_mod_fini+0x74>
     654:	mov	w19, w0
     658:	ldr	x0, [sp, #32]
     65c:	ldrb	w0, [x0]
     660:	bl	594 <grub_mod_fini+0x74>
     664:	sub	w0, w19, w0
     668:	ldr	x19, [sp, #16]
     66c:	ldp	x29, x30, [sp], #48
     670:	ret
     674:	stp	x29, x30, [sp, #-48]!
     678:	mov	x29, sp
     67c:	str	x0, [sp, #24]
     680:	str	x1, [sp, #16]
     684:	ldr	x0, [sp, #24]
     688:	cmp	x0, #0x0
     68c:	b.ne	698 <grub_mod_fini+0x178>  // b.any
     690:	ldr	x0, [sp, #16]
     694:	b	7e4 <grub_mod_fini+0x2c4>
     698:	ldr	x0, [sp, #16]
     69c:	cmp	x0, #0x0
     6a0:	b.ne	6ac <grub_mod_fini+0x18c>  // b.any
     6a4:	ldr	x0, [sp, #24]
     6a8:	b	7e4 <grub_mod_fini+0x2c4>
     6ac:	str	wzr, [sp, #44]
     6b0:	b	6c0 <grub_mod_fini+0x1a0>
     6b4:	ldr	w0, [sp, #44]
     6b8:	add	w0, w0, #0x1
     6bc:	str	w0, [sp, #44]
     6c0:	ldrsw	x0, [sp, #44]
     6c4:	lsl	x0, x0, #3
     6c8:	ldr	x1, [sp, #24]
     6cc:	add	x0, x1, x0
     6d0:	ldr	x0, [x0]
     6d4:	cmp	x0, #0x0
     6d8:	b.ne	6b4 <grub_mod_fini+0x194>  // b.any
     6dc:	str	wzr, [sp, #40]
     6e0:	b	6f0 <grub_mod_fini+0x1d0>
     6e4:	ldr	w0, [sp, #40]
     6e8:	add	w0, w0, #0x1
     6ec:	str	w0, [sp, #40]
     6f0:	ldrsw	x0, [sp, #40]
     6f4:	lsl	x0, x0, #3
     6f8:	ldr	x1, [sp, #16]
     6fc:	add	x0, x1, x0
     700:	ldr	x0, [x0]
     704:	cmp	x0, #0x0
     708:	b.ne	6e4 <grub_mod_fini+0x1c4>  // b.any
     70c:	ldr	w1, [sp, #44]
     710:	ldr	w0, [sp, #40]
     714:	add	w0, w1, w0
     718:	add	w0, w0, #0x1
     71c:	sxtw	x0, w0
     720:	lsl	x0, x0, #3
     724:	mov	x1, x0
     728:	ldr	x0, [sp, #24]
     72c:	bl	0 <grub_realloc>
     730:	str	x0, [sp, #32]
     734:	ldr	x0, [sp, #32]
     738:	cmp	x0, #0x0
     73c:	b.ne	758 <grub_mod_fini+0x238>  // b.any
     740:	ldr	x0, [sp, #24]
     744:	bl	0 <grub_free>
     748:	ldr	x0, [sp, #16]
     74c:	bl	0 <grub_free>
     750:	mov	x0, #0x0                   	// #0
     754:	b	7e4 <grub_mod_fini+0x2c4>
     758:	ldr	x0, [sp, #32]
     75c:	str	x0, [sp, #24]
     760:	str	wzr, [sp, #40]
     764:	b	7a8 <grub_mod_fini+0x288>
     768:	ldrsw	x0, [sp, #40]
     76c:	lsl	x0, x0, #3
     770:	ldr	x1, [sp, #16]
     774:	add	x1, x1, x0
     778:	ldr	w0, [sp, #44]
     77c:	add	w2, w0, #0x1
     780:	str	w2, [sp, #44]
     784:	sxtw	x0, w0
     788:	lsl	x0, x0, #3
     78c:	ldr	x2, [sp, #24]
     790:	add	x0, x2, x0
     794:	ldr	x1, [x1]
     798:	str	x1, [x0]
     79c:	ldr	w0, [sp, #40]
     7a0:	add	w0, w0, #0x1
     7a4:	str	w0, [sp, #40]
     7a8:	ldrsw	x0, [sp, #40]
     7ac:	lsl	x0, x0, #3
     7b0:	ldr	x1, [sp, #16]
     7b4:	add	x0, x1, x0
     7b8:	ldr	x0, [x0]
     7bc:	cmp	x0, #0x0
     7c0:	b.ne	768 <grub_mod_fini+0x248>  // b.any
     7c4:	ldrsw	x0, [sp, #44]
     7c8:	lsl	x0, x0, #3
     7cc:	ldr	x1, [sp, #24]
     7d0:	add	x0, x1, x0
     7d4:	str	xzr, [x0]
     7d8:	ldr	x0, [sp, #16]
     7dc:	bl	0 <grub_free>
     7e0:	ldr	x0, [sp, #24]
     7e4:	ldp	x29, x30, [sp], #48
     7e8:	ret
     7ec:	stp	x29, x30, [sp, #-32]!
     7f0:	mov	x29, sp
     7f4:	strb	w0, [sp, #31]
     7f8:	ldrb	w0, [sp, #31]
     7fc:	mov	w1, w0
     800:	adrp	x0, 0 <grub_mod_init-0x450>
     804:	add	x0, x0, #0x0
     808:	ldr	x0, [x0]
     80c:	bl	0 <grub_strchr>
     810:	cmp	x0, #0x0
     814:	cset	w0, ne  // ne = any
     818:	and	w0, w0, #0xff
     81c:	ldp	x29, x30, [sp], #32
     820:	ret
     824:	nop
	...
     830:	stp	x29, x30, [sp, #-80]!
     834:	mov	x29, sp
     838:	str	x0, [sp, #40]
     83c:	str	x1, [sp, #32]
     840:	str	x2, [sp, #24]
     844:	ldr	x0, [sp, #40]
     848:	bl	0 <grub_strlen>
     84c:	str	w0, [sp, #76]
     850:	ldr	w0, [sp, #76]
     854:	ldr	x1, [sp, #24]
     858:	add	x1, x1, x0
     85c:	ldr	x0, [sp, #32]
     860:	sub	x0, x1, x0
     864:	str	w0, [sp, #72]
     868:	ldr	w0, [sp, #72]
     86c:	add	w0, w0, #0x1
     870:	mov	w0, w0
     874:	bl	0 <grub_malloc>
     878:	str	x0, [sp, #64]
     87c:	ldr	x0, [sp, #64]
     880:	cmp	x0, #0x0
     884:	b.ne	890 <grub_mod_fini+0x370>  // b.any
     888:	mov	x0, #0x0                   	// #0
     88c:	b	954 <grub_mod_fini+0x434>
     890:	ldr	x1, [sp, #40]
     894:	ldr	x0, [sp, #64]
     898:	bl	0 <grub_strcpy>
     89c:	b	910 <grub_mod_fini+0x3f0>
     8a0:	ldrb	w0, [sp, #63]
     8a4:	cmp	w0, #0x5c
     8a8:	b.ne	8f0 <grub_mod_fini+0x3d0>  // b.any
     8ac:	ldr	x0, [sp, #32]
     8b0:	ldrb	w0, [x0]
     8b4:	bl	7ec <grub_mod_fini+0x2cc>
     8b8:	cmp	w0, #0x0
     8bc:	b.eq	8f0 <grub_mod_fini+0x3d0>  // b.none
     8c0:	ldr	x0, [sp, #32]
     8c4:	add	x1, x0, #0x1
     8c8:	str	x1, [sp, #32]
     8cc:	ldr	w1, [sp, #76]
     8d0:	add	w2, w1, #0x1
     8d4:	str	w2, [sp, #76]
     8d8:	mov	w1, w1
     8dc:	ldr	x2, [sp, #64]
     8e0:	add	x1, x2, x1
     8e4:	ldrb	w0, [x0]
     8e8:	strb	w0, [x1]
     8ec:	b	910 <grub_mod_fini+0x3f0>
     8f0:	ldr	w0, [sp, #76]
     8f4:	add	w1, w0, #0x1
     8f8:	str	w1, [sp, #76]
     8fc:	mov	w0, w0
     900:	ldr	x1, [sp, #64]
     904:	add	x0, x1, x0
     908:	ldrb	w1, [sp, #63]
     90c:	strb	w1, [x0]
     910:	ldr	x1, [sp, #32]
     914:	ldr	x0, [sp, #24]
     918:	cmp	x1, x0
     91c:	b.cs	940 <grub_mod_fini+0x420>  // b.hs, b.nlast
     920:	ldr	x0, [sp, #32]
     924:	add	x1, x0, #0x1
     928:	str	x1, [sp, #32]
     92c:	ldrb	w0, [x0]
     930:	strb	w0, [sp, #63]
     934:	ldrb	w0, [sp, #63]
     938:	cmp	w0, #0x0
     93c:	b.ne	8a0 <grub_mod_fini+0x380>  // b.any
     940:	ldr	w0, [sp, #76]
     944:	ldr	x1, [sp, #64]
     948:	add	x0, x1, x0
     94c:	strb	wzr, [x0]
     950:	ldr	x0, [sp, #64]
     954:	ldp	x29, x30, [sp], #80
     958:	ret
     95c:	stp	x29, x30, [sp, #-80]!
     960:	mov	x29, sp
     964:	str	x0, [sp, #40]
     968:	str	x1, [sp, #32]
     96c:	str	x2, [sp, #24]
     970:	str	wzr, [sp, #76]
     974:	ldr	x1, [sp, #32]
     978:	ldr	x0, [sp, #40]
     97c:	sub	x0, x1, x0
     980:	str	w0, [sp, #72]
     984:	ldr	w0, [sp, #72]
     988:	add	w0, w0, #0x1
     98c:	lsl	w0, w0, #1
     990:	add	w0, w0, #0x1
     994:	mov	w0, w0
     998:	bl	0 <grub_malloc>
     99c:	str	x0, [sp, #64]
     9a0:	ldr	x0, [sp, #64]
     9a4:	cmp	x0, #0x0
     9a8:	b.ne	9b4 <grub_mod_fini+0x494>  // b.any
     9ac:	mov	w0, #0x1                   	// #1
     9b0:	b	c78 <grub_mod_fini+0x758>
     9b4:	ldr	w0, [sp, #76]
     9b8:	add	w1, w0, #0x1
     9bc:	str	w1, [sp, #76]
     9c0:	sxtw	x0, w0
     9c4:	ldr	x1, [sp, #64]
     9c8:	add	x0, x1, x0
     9cc:	mov	w1, #0x5e                  	// #94
     9d0:	strb	w1, [x0]
     9d4:	b	bd0 <grub_mod_fini+0x6b0>
     9d8:	ldr	x0, [sp, #40]
     9dc:	add	x1, x0, #0x1
     9e0:	str	x1, [sp, #40]
     9e4:	ldrb	w0, [x0]
     9e8:	strb	w0, [sp, #63]
     9ec:	ldrb	w0, [sp, #63]
     9f0:	cmp	w0, #0x7d
     9f4:	b.gt	bb0 <grub_mod_fini+0x690>
     9f8:	cmp	w0, #0x3f
     9fc:	b.ge	a34 <grub_mod_fini+0x514>  // b.tcont
     a00:	cmp	w0, #0x2e
     a04:	b.eq	b04 <grub_mod_fini+0x5e4>  // b.none
     a08:	cmp	w0, #0x2e
     a0c:	b.gt	bb0 <grub_mod_fini+0x690>
     a10:	cmp	w0, #0x2b
     a14:	b.eq	b04 <grub_mod_fini+0x5e4>  // b.none
     a18:	cmp	w0, #0x2b
     a1c:	b.gt	bb0 <grub_mod_fini+0x690>
     a20:	cmp	w0, #0x29
     a24:	b.gt	a98 <grub_mod_fini+0x578>
     a28:	cmp	w0, #0x28
     a2c:	b.ge	b04 <grub_mod_fini+0x5e4>  // b.tcont
     a30:	b	bb0 <grub_mod_fini+0x690>
     a34:	sub	w0, w0, #0x3f
     a38:	mov	x1, #0x1                   	// #1
     a3c:	lsl	x0, x1, x0
     a40:	mov	x1, #0x2                   	// #2
     a44:	movk	x1, #0x5000, lsl #16
     a48:	movk	x1, #0x7000, lsl #48
     a4c:	and	x1, x0, x1
     a50:	cmp	x1, #0x0
     a54:	cset	w1, ne  // ne = any
     a58:	and	w1, w1, #0xff
     a5c:	cmp	w1, #0x0
     a60:	b.ne	b04 <grub_mod_fini+0x5e4>  // b.any
     a64:	and	x1, x0, #0x1
     a68:	cmp	x1, #0x0
     a6c:	cset	w1, ne  // ne = any
     a70:	and	w1, w1, #0xff
     a74:	cmp	w1, #0x0
     a78:	b.ne	b8c <grub_mod_fini+0x66c>  // b.any
     a7c:	and	x0, x0, #0x20000000
     a80:	cmp	x0, #0x0
     a84:	cset	w0, ne  // ne = any
     a88:	and	w0, w0, #0xff
     a8c:	cmp	w0, #0x0
     a90:	b.ne	aa4 <grub_mod_fini+0x584>  // b.any
     a94:	b	bb0 <grub_mod_fini+0x690>
     a98:	cmp	w0, #0x2a
     a9c:	b.eq	b48 <grub_mod_fini+0x628>  // b.none
     aa0:	b	bb0 <grub_mod_fini+0x690>
     aa4:	ldr	w0, [sp, #76]
     aa8:	add	w1, w0, #0x1
     aac:	str	w1, [sp, #76]
     ab0:	sxtw	x0, w0
     ab4:	ldr	x1, [sp, #64]
     ab8:	add	x0, x1, x0
     abc:	ldrb	w1, [sp, #63]
     ac0:	strb	w1, [x0]
     ac4:	ldr	x0, [sp, #40]
     ac8:	ldrb	w0, [x0]
     acc:	cmp	w0, #0x0
     ad0:	b.eq	bd0 <grub_mod_fini+0x6b0>  // b.none
     ad4:	ldr	x0, [sp, #40]
     ad8:	add	x1, x0, #0x1
     adc:	str	x1, [sp, #40]
     ae0:	ldr	w1, [sp, #76]
     ae4:	add	w2, w1, #0x1
     ae8:	str	w2, [sp, #76]
     aec:	sxtw	x1, w1
     af0:	ldr	x2, [sp, #64]
     af4:	add	x1, x2, x1
     af8:	ldrb	w0, [x0]
     afc:	strb	w0, [x1]
     b00:	b	bd0 <grub_mod_fini+0x6b0>
     b04:	ldr	w0, [sp, #76]
     b08:	add	w1, w0, #0x1
     b0c:	str	w1, [sp, #76]
     b10:	sxtw	x0, w0
     b14:	ldr	x1, [sp, #64]
     b18:	add	x0, x1, x0
     b1c:	mov	w1, #0x5c                  	// #92
     b20:	strb	w1, [x0]
     b24:	ldr	w0, [sp, #76]
     b28:	add	w1, w0, #0x1
     b2c:	str	w1, [sp, #76]
     b30:	sxtw	x0, w0
     b34:	ldr	x1, [sp, #64]
     b38:	add	x0, x1, x0
     b3c:	ldrb	w1, [sp, #63]
     b40:	strb	w1, [x0]
     b44:	b	bd0 <grub_mod_fini+0x6b0>
     b48:	ldr	w0, [sp, #76]
     b4c:	add	w1, w0, #0x1
     b50:	str	w1, [sp, #76]
     b54:	sxtw	x0, w0
     b58:	ldr	x1, [sp, #64]
     b5c:	add	x0, x1, x0
     b60:	mov	w1, #0x2e                  	// #46
     b64:	strb	w1, [x0]
     b68:	ldr	w0, [sp, #76]
     b6c:	add	w1, w0, #0x1
     b70:	str	w1, [sp, #76]
     b74:	sxtw	x0, w0
     b78:	ldr	x1, [sp, #64]
     b7c:	add	x0, x1, x0
     b80:	mov	w1, #0x2a                  	// #42
     b84:	strb	w1, [x0]
     b88:	b	bd0 <grub_mod_fini+0x6b0>
     b8c:	ldr	w0, [sp, #76]
     b90:	add	w1, w0, #0x1
     b94:	str	w1, [sp, #76]
     b98:	sxtw	x0, w0
     b9c:	ldr	x1, [sp, #64]
     ba0:	add	x0, x1, x0
     ba4:	mov	w1, #0x2e                  	// #46
     ba8:	strb	w1, [x0]
     bac:	b	bd0 <grub_mod_fini+0x6b0>
     bb0:	ldr	w0, [sp, #76]
     bb4:	add	w1, w0, #0x1
     bb8:	str	w1, [sp, #76]
     bbc:	sxtw	x0, w0
     bc0:	ldr	x1, [sp, #64]
     bc4:	add	x0, x1, x0
     bc8:	ldrb	w1, [sp, #63]
     bcc:	strb	w1, [x0]
     bd0:	ldr	x1, [sp, #40]
     bd4:	ldr	x0, [sp, #32]
     bd8:	cmp	x1, x0
     bdc:	b.cc	9d8 <grub_mod_fini+0x4b8>  // b.lo, b.ul, b.last
     be0:	ldr	w0, [sp, #76]
     be4:	add	w1, w0, #0x1
     be8:	str	w1, [sp, #76]
     bec:	sxtw	x0, w0
     bf0:	ldr	x1, [sp, #64]
     bf4:	add	x0, x1, x0
     bf8:	mov	w1, #0x24                  	// #36
     bfc:	strb	w1, [x0]
     c00:	ldrsw	x0, [sp, #76]
     c04:	ldr	x1, [sp, #64]
     c08:	add	x0, x1, x0
     c0c:	strb	wzr, [x0]
     c10:	ldr	x4, [sp, #64]
     c14:	adrp	x0, 0 <grub_mod_init-0x450>
     c18:	add	x0, x0, #0x0
     c1c:	ldr	x3, [x0]
     c20:	adrp	x0, 0 <grub_mod_init-0x450>
     c24:	add	x0, x0, #0x0
     c28:	ldr	x2, [x0]
     c2c:	mov	w1, #0xa4                  	// #164
     c30:	adrp	x0, 0 <grub_mod_init-0x450>
     c34:	add	x0, x0, #0x0
     c38:	ldr	x0, [x0]
     c3c:	bl	0 <grub_real_dprintf>
     c40:	mov	w2, #0xb24d                	// #45645
     c44:	movk	w2, #0x23, lsl #16
     c48:	ldr	x1, [sp, #64]
     c4c:	ldr	x0, [sp, #24]
     c50:	bl	84ac <regcomp>
     c54:	cmp	w0, #0x0
     c58:	b.eq	c6c <grub_mod_fini+0x74c>  // b.none
     c5c:	ldr	x0, [sp, #64]
     c60:	bl	0 <grub_free>
     c64:	mov	w0, #0x1                   	// #1
     c68:	b	c78 <grub_mod_fini+0x758>
     c6c:	ldr	x0, [sp, #64]
     c70:	bl	0 <grub_free>
     c74:	mov	w0, #0x0                   	// #0
     c78:	ldp	x29, x30, [sp], #80
     c7c:	ret
	...
     c98:	sub	sp, sp, #0x40
     c9c:	str	x0, [sp, #24]
     ca0:	str	x1, [sp, #16]
     ca4:	str	x2, [sp, #8]
     ca8:	strb	wzr, [sp, #39]
     cac:	str	wzr, [sp, #60]
     cb0:	ldr	x0, [sp, #24]
     cb4:	str	x0, [sp, #48]
     cb8:	ldr	x0, [sp, #48]
     cbc:	str	x0, [sp, #40]
     cc0:	b	d64 <grub_mod_fini+0x844>
     cc4:	ldrb	w0, [sp, #39]
     cc8:	cmp	w0, #0x5c
     ccc:	b.ne	cf4 <grub_mod_fini+0x7d4>  // b.any
     cd0:	ldr	x0, [sp, #48]
     cd4:	add	x0, x0, #0x1
     cd8:	ldrb	w0, [x0]
     cdc:	cmp	w0, #0x0
     ce0:	b.eq	cf4 <grub_mod_fini+0x7d4>  // b.none
     ce4:	ldr	x0, [sp, #48]
     ce8:	add	x0, x0, #0x1
     cec:	str	x0, [sp, #48]
     cf0:	b	d58 <grub_mod_fini+0x838>
     cf4:	ldrb	w0, [sp, #39]
     cf8:	cmp	w0, #0x2a
     cfc:	b.eq	d0c <grub_mod_fini+0x7ec>  // b.none
     d00:	ldrb	w0, [sp, #39]
     d04:	cmp	w0, #0x3f
     d08:	b.ne	d18 <grub_mod_fini+0x7f8>  // b.any
     d0c:	mov	w0, #0x1                   	// #1
     d10:	str	w0, [sp, #60]
     d14:	b	d58 <grub_mod_fini+0x838>
     d18:	ldrb	w0, [sp, #39]
     d1c:	cmp	w0, #0x2f
     d20:	b.ne	d40 <grub_mod_fini+0x820>  // b.any
     d24:	ldr	w0, [sp, #60]
     d28:	cmp	w0, #0x0
     d2c:	b.ne	d40 <grub_mod_fini+0x820>  // b.any
     d30:	ldr	x0, [sp, #48]
     d34:	add	x0, x0, #0x1
     d38:	str	x0, [sp, #40]
     d3c:	b	d58 <grub_mod_fini+0x838>
     d40:	ldrb	w0, [sp, #39]
     d44:	cmp	w0, #0x2f
     d48:	b.ne	d58 <grub_mod_fini+0x838>  // b.any
     d4c:	ldr	w0, [sp, #60]
     d50:	cmp	w0, #0x0
     d54:	b.ne	d80 <grub_mod_fini+0x860>  // b.any
     d58:	ldr	x0, [sp, #48]
     d5c:	add	x0, x0, #0x1
     d60:	str	x0, [sp, #48]
     d64:	ldr	x0, [sp, #48]
     d68:	ldrb	w0, [x0]
     d6c:	strb	w0, [sp, #39]
     d70:	ldrb	w0, [sp, #39]
     d74:	cmp	w0, #0x0
     d78:	b.ne	cc4 <grub_mod_fini+0x7a4>  // b.any
     d7c:	b	d84 <grub_mod_fini+0x864>
     d80:	nop
     d84:	ldr	x0, [sp, #8]
     d88:	ldr	x1, [sp, #48]
     d8c:	str	x1, [x0]
     d90:	ldr	w0, [sp, #60]
     d94:	cmp	w0, #0x0
     d98:	b.ne	dac <grub_mod_fini+0x88c>  // b.any
     d9c:	ldr	x0, [sp, #16]
     da0:	ldr	x1, [sp, #48]
     da4:	str	x1, [x0]
     da8:	b	db8 <grub_mod_fini+0x898>
     dac:	ldr	x0, [sp, #16]
     db0:	ldr	x1, [sp, #40]
     db4:	str	x1, [x0]
     db8:	nop
     dbc:	add	sp, sp, #0x40
     dc0:	ret
     dc4:	stp	x29, x30, [sp, #-64]!
     dc8:	mov	x29, sp
     dcc:	str	x0, [sp, #24]
     dd0:	str	x1, [sp, #16]
     dd4:	ldr	x0, [sp, #16]
     dd8:	str	x0, [sp, #56]
     ddc:	ldr	x0, [sp, #56]
     de0:	ldr	w0, [x0, #8]
     de4:	cmp	w0, #0x0
     de8:	b.eq	e08 <grub_mod_fini+0x8e8>  // b.none
     dec:	mov	w1, #0x2c                  	// #44
     df0:	ldr	x0, [sp, #24]
     df4:	bl	0 <grub_strchr>
     df8:	cmp	x0, #0x0
     dfc:	b.eq	e08 <grub_mod_fini+0x8e8>  // b.none
     e00:	mov	w0, #0x0                   	// #0
     e04:	b	f6c <grub_mod_fini+0xa4c>
     e08:	ldr	x1, [sp, #24]
     e0c:	adrp	x0, 0 <grub_mod_init-0x450>
     e10:	add	x0, x0, #0x0
     e14:	ldr	x0, [x0]
     e18:	bl	0 <grub_xasprintf>
     e1c:	str	x0, [sp, #48]
     e20:	ldr	x0, [sp, #48]
     e24:	cmp	x0, #0x0
     e28:	b.ne	e34 <grub_mod_fini+0x914>  // b.any
     e2c:	mov	w0, #0x1                   	// #1
     e30:	b	f6c <grub_mod_fini+0xa4c>
     e34:	ldr	x4, [sp, #48]
     e38:	adrp	x0, 0 <grub_mod_init-0x450>
     e3c:	add	x0, x0, #0x0
     e40:	ldr	x3, [x0]
     e44:	adrp	x0, 0 <grub_mod_init-0x450>
     e48:	add	x0, x0, #0x0
     e4c:	ldr	x2, [x0]
     e50:	mov	w1, #0xee                  	// #238
     e54:	adrp	x0, 0 <grub_mod_init-0x450>
     e58:	add	x0, x0, #0x0
     e5c:	ldr	x0, [x0]
     e60:	bl	0 <grub_real_dprintf>
     e64:	ldr	x0, [sp, #56]
     e68:	ldr	x0, [x0]
     e6c:	mov	w4, #0x0                   	// #0
     e70:	mov	x3, #0x0                   	// #0
     e74:	mov	x2, #0x0                   	// #0
     e78:	ldr	x1, [sp, #48]
     e7c:	bl	10150 <regexec>
     e80:	cmp	w0, #0x0
     e84:	b.eq	ec4 <grub_mod_fini+0x9a4>  // b.none
     e88:	adrp	x0, 0 <grub_mod_init-0x450>
     e8c:	add	x0, x0, #0x0
     e90:	ldr	x3, [x0]
     e94:	adrp	x0, 0 <grub_mod_init-0x450>
     e98:	add	x0, x0, #0x0
     e9c:	ldr	x2, [x0]
     ea0:	mov	w1, #0xf1                  	// #241
     ea4:	adrp	x0, 0 <grub_mod_init-0x450>
     ea8:	add	x0, x0, #0x0
     eac:	ldr	x0, [x0]
     eb0:	bl	0 <grub_real_dprintf>
     eb4:	ldr	x0, [sp, #48]
     eb8:	bl	0 <grub_free>
     ebc:	mov	w0, #0x0                   	// #0
     ec0:	b	f6c <grub_mod_fini+0xa4c>
     ec4:	ldr	x0, [sp, #56]
     ec8:	ldr	x2, [x0, #16]
     ecc:	ldr	x0, [sp, #56]
     ed0:	ldr	w0, [x0, #12]
     ed4:	add	w0, w0, #0x2
     ed8:	sxtw	x0, w0
     edc:	lsl	x0, x0, #3
     ee0:	mov	x1, x0
     ee4:	mov	x0, x2
     ee8:	bl	0 <grub_realloc>
     eec:	str	x0, [sp, #40]
     ef0:	ldr	x0, [sp, #40]
     ef4:	cmp	x0, #0x0
     ef8:	b.ne	f0c <grub_mod_fini+0x9ec>  // b.any
     efc:	ldr	x0, [sp, #48]
     f00:	bl	0 <grub_free>
     f04:	mov	w0, #0x1                   	// #1
     f08:	b	f6c <grub_mod_fini+0xa4c>
     f0c:	ldr	x0, [sp, #56]
     f10:	ldr	x1, [sp, #40]
     f14:	str	x1, [x0, #16]
     f18:	ldr	x0, [sp, #56]
     f1c:	ldr	x1, [x0, #16]
     f20:	ldr	x0, [sp, #56]
     f24:	ldr	w0, [x0, #12]
     f28:	add	w3, w0, #0x1
     f2c:	ldr	x2, [sp, #56]
     f30:	str	w3, [x2, #12]
     f34:	sxtw	x0, w0
     f38:	lsl	x0, x0, #3
     f3c:	add	x0, x1, x0
     f40:	ldr	x1, [sp, #48]
     f44:	str	x1, [x0]
     f48:	ldr	x0, [sp, #56]
     f4c:	ldr	x1, [x0, #16]
     f50:	ldr	x0, [sp, #56]
     f54:	ldr	w0, [x0, #12]
     f58:	sxtw	x0, w0
     f5c:	lsl	x0, x0, #3
     f60:	add	x0, x1, x0
     f64:	str	xzr, [x0]
     f68:	mov	w0, #0x0                   	// #0
     f6c:	ldp	x29, x30, [sp], #64
     f70:	ret
     f74:	nop
	...
     fa0:	stp	x29, x30, [sp, #-64]!
     fa4:	mov	x29, sp
     fa8:	str	x0, [sp, #24]
     fac:	str	w1, [sp, #20]
     fb0:	ldr	x0, [sp, #24]
     fb4:	str	x0, [sp, #32]
     fb8:	ldr	w0, [sp, #20]
     fbc:	str	w0, [sp, #40]
     fc0:	str	wzr, [sp, #44]
     fc4:	str	xzr, [sp, #48]
     fc8:	add	x0, sp, #0x20
     fcc:	mov	x1, x0
     fd0:	adrp	x0, 0 <grub_mod_init-0x450>
     fd4:	add	x0, x0, #0x0
     fd8:	ldr	x0, [x0]
     fdc:	bl	0 <grub_device_iterate>
     fe0:	cmp	w0, #0x0
     fe4:	b.ne	ff0 <grub_mod_fini+0xad0>  // b.any
     fe8:	ldr	x0, [sp, #48]
     fec:	b	1054 <grub_mod_fini+0xb34>
     ff0:	nop
     ff4:	str	wzr, [sp, #60]
     ff8:	b	1020 <grub_mod_fini+0xb00>
     ffc:	ldr	x1, [sp, #48]
    1000:	ldrsw	x0, [sp, #60]
    1004:	lsl	x0, x0, #3
    1008:	add	x0, x1, x0
    100c:	ldr	x0, [x0]
    1010:	bl	0 <grub_free>
    1014:	ldr	w0, [sp, #60]
    1018:	add	w0, w0, #0x1
    101c:	str	w0, [sp, #60]
    1020:	ldr	x0, [sp, #48]
    1024:	cmp	x0, #0x0
    1028:	b.eq	1048 <grub_mod_fini+0xb28>  // b.none
    102c:	ldr	x1, [sp, #48]
    1030:	ldrsw	x0, [sp, #60]
    1034:	lsl	x0, x0, #3
    1038:	add	x0, x1, x0
    103c:	ldr	x0, [x0]
    1040:	cmp	x0, #0x0
    1044:	b.ne	ffc <grub_mod_fini+0xadc>  // b.any
    1048:	ldr	x0, [sp, #48]
    104c:	bl	0 <grub_free>
    1050:	mov	x0, #0x0                   	// #0
    1054:	ldp	x29, x30, [sp], #64
    1058:	ret
    105c:	nop
	...
    1068:	stp	x29, x30, [sp, #-80]!
    106c:	mov	x29, sp
    1070:	str	x0, [sp, #40]
    1074:	str	x1, [sp, #32]
    1078:	str	x2, [sp, #24]
    107c:	ldr	x0, [sp, #24]
    1080:	str	x0, [sp, #72]
    1084:	ldr	x1, [sp, #40]
    1088:	adrp	x0, 0 <grub_mod_init-0x450>
    108c:	add	x0, x0, #0x0
    1090:	ldr	x0, [x0]
    1094:	bl	0 <grub_strcmp>
    1098:	cmp	w0, #0x0
    109c:	b.eq	10bc <grub_mod_fini+0xb9c>  // b.none
    10a0:	ldr	x1, [sp, #40]
    10a4:	adrp	x0, 0 <grub_mod_init-0x450>
    10a8:	add	x0, x0, #0x0
    10ac:	ldr	x0, [x0]
    10b0:	bl	0 <grub_strcmp>
    10b4:	cmp	w0, #0x0
    10b8:	b.ne	10c4 <grub_mod_fini+0xba4>  // b.any
    10bc:	mov	w0, #0x0                   	// #0
    10c0:	b	1238 <grub_mod_fini+0xd18>
    10c4:	ldr	x0, [sp, #72]
    10c8:	ldr	x0, [x0, #24]
    10cc:	mov	x5, x0
    10d0:	ldr	x4, [sp, #40]
    10d4:	adrp	x0, 0 <grub_mod_init-0x450>
    10d8:	add	x0, x0, #0x0
    10dc:	ldr	x3, [x0]
    10e0:	adrp	x0, 0 <grub_mod_init-0x450>
    10e4:	add	x0, x0, #0x0
    10e8:	ldr	x2, [x0]
    10ec:	mov	w1, #0x134                 	// #308
    10f0:	adrp	x0, 0 <grub_mod_init-0x450>
    10f4:	add	x0, x0, #0x0
    10f8:	ldr	x0, [x0]
    10fc:	bl	0 <grub_real_dprintf>
    1100:	ldr	x0, [sp, #72]
    1104:	ldr	x0, [x0]
    1108:	mov	w4, #0x0                   	// #0
    110c:	mov	x3, #0x0                   	// #0
    1110:	mov	x2, #0x0                   	// #0
    1114:	ldr	x1, [sp, #40]
    1118:	bl	10150 <regexec>
    111c:	cmp	w0, #0x0
    1120:	b.eq	112c <grub_mod_fini+0xc0c>  // b.none
    1124:	mov	w0, #0x0                   	// #0
    1128:	b	1238 <grub_mod_fini+0xd18>
    112c:	adrp	x0, 0 <grub_mod_init-0x450>
    1130:	add	x0, x0, #0x0
    1134:	ldr	x3, [x0]
    1138:	adrp	x0, 0 <grub_mod_init-0x450>
    113c:	add	x0, x0, #0x0
    1140:	ldr	x2, [x0]
    1144:	mov	w1, #0x138                 	// #312
    1148:	adrp	x0, 0 <grub_mod_init-0x450>
    114c:	add	x0, x0, #0x0
    1150:	ldr	x0, [x0]
    1154:	bl	0 <grub_real_dprintf>
    1158:	ldr	x0, [sp, #72]
    115c:	ldr	x0, [x0, #24]
    1160:	ldr	x2, [sp, #40]
    1164:	mov	x1, x0
    1168:	adrp	x0, 0 <grub_mod_init-0x450>
    116c:	add	x0, x0, #0x0
    1170:	ldr	x0, [x0]
    1174:	bl	0 <grub_xasprintf>
    1178:	str	x0, [sp, #64]
    117c:	ldr	x0, [sp, #64]
    1180:	cmp	x0, #0x0
    1184:	b.ne	1190 <grub_mod_fini+0xc70>  // b.any
    1188:	mov	w0, #0x1                   	// #1
    118c:	b	1238 <grub_mod_fini+0xd18>
    1190:	ldr	x0, [sp, #72]
    1194:	ldr	x2, [x0, #8]
    1198:	ldr	x0, [sp, #72]
    119c:	ldr	w0, [x0, #16]
    11a0:	add	w0, w0, #0x2
    11a4:	mov	w0, w0
    11a8:	lsl	x0, x0, #3
    11ac:	mov	x1, x0
    11b0:	mov	x0, x2
    11b4:	bl	0 <grub_realloc>
    11b8:	str	x0, [sp, #56]
    11bc:	ldr	x0, [sp, #56]
    11c0:	cmp	x0, #0x0
    11c4:	b.ne	11d8 <grub_mod_fini+0xcb8>  // b.any
    11c8:	ldr	x0, [sp, #64]
    11cc:	bl	0 <grub_free>
    11d0:	mov	w0, #0x1                   	// #1
    11d4:	b	1238 <grub_mod_fini+0xd18>
    11d8:	ldr	x0, [sp, #72]
    11dc:	ldr	x1, [sp, #56]
    11e0:	str	x1, [x0, #8]
    11e4:	ldr	x0, [sp, #72]
    11e8:	ldr	x1, [x0, #8]
    11ec:	ldr	x0, [sp, #72]
    11f0:	ldr	w0, [x0, #16]
    11f4:	add	w3, w0, #0x1
    11f8:	ldr	x2, [sp, #72]
    11fc:	str	w3, [x2, #16]
    1200:	mov	w0, w0
    1204:	lsl	x0, x0, #3
    1208:	add	x0, x1, x0
    120c:	ldr	x1, [sp, #64]
    1210:	str	x1, [x0]
    1214:	ldr	x0, [sp, #72]
    1218:	ldr	x1, [x0, #8]
    121c:	ldr	x0, [sp, #72]
    1220:	ldr	w0, [x0, #16]
    1224:	mov	w0, w0
    1228:	lsl	x0, x0, #3
    122c:	add	x0, x1, x0
    1230:	str	xzr, [x0]
    1234:	mov	w0, #0x0                   	// #0
    1238:	ldp	x29, x30, [sp], #80
    123c:	ret
	...
    1278:	stp	x29, x30, [sp, #-128]!
    127c:	mov	x29, sp
    1280:	str	x0, [sp, #40]
    1284:	str	x1, [sp, #32]
    1288:	str	x2, [sp, #24]
    128c:	str	x3, [sp, #16]
    1290:	stp	xzr, xzr, [sp, #56]
    1294:	stp	xzr, xzr, [sp, #72]
    1298:	ldr	x0, [sp, #16]
    129c:	str	x0, [sp, #56]
    12a0:	str	xzr, [sp, #96]
    12a4:	str	xzr, [sp, #104]
    12a8:	bl	0 <grub_error_push>
    12ac:	ldr	x2, [sp, #24]
    12b0:	ldr	x1, [sp, #32]
    12b4:	ldr	x0, [sp, #40]
    12b8:	bl	830 <grub_mod_fini+0x310>
    12bc:	str	x0, [sp, #80]
    12c0:	ldr	x0, [sp, #80]
    12c4:	cmp	x0, #0x0
    12c8:	b.eq	13a0 <grub_mod_fini+0xe80>  // b.none
    12cc:	ldr	x0, [sp, #80]
    12d0:	bl	0 <grub_file_get_device_name>
    12d4:	str	x0, [sp, #104]
    12d8:	ldr	x0, [sp, #104]
    12dc:	bl	0 <grub_device_open>
    12e0:	str	x0, [sp, #96]
    12e4:	ldr	x0, [sp, #96]
    12e8:	cmp	x0, #0x0
    12ec:	b.eq	13a8 <grub_mod_fini+0xe88>  // b.none
    12f0:	ldr	x0, [sp, #96]
    12f4:	bl	0 <grub_fs_probe>
    12f8:	str	x0, [sp, #88]
    12fc:	ldr	x0, [sp, #88]
    1300:	cmp	x0, #0x0
    1304:	b.eq	13b0 <grub_mod_fini+0xe90>  // b.none
    1308:	ldr	x0, [sp, #80]
    130c:	ldrb	w0, [x0]
    1310:	cmp	w0, #0x28
    1314:	b.ne	1344 <grub_mod_fini+0xe24>  // b.any
    1318:	ldr	x0, [sp, #80]
    131c:	mov	w1, #0x29                  	// #41
    1320:	bl	0 <grub_strchr>
    1324:	str	x0, [sp, #112]
    1328:	ldr	x0, [sp, #112]
    132c:	cmp	x0, #0x0
    1330:	b.eq	13b8 <grub_mod_fini+0xe98>  // b.none
    1334:	ldr	x0, [sp, #112]
    1338:	add	x0, x0, #0x1
    133c:	str	x0, [sp, #112]
    1340:	b	134c <grub_mod_fini+0xe2c>
    1344:	ldr	x0, [sp, #80]
    1348:	str	x0, [sp, #112]
    134c:	ldr	x0, [sp, #88]
    1350:	ldr	x4, [x0, #24]
    1354:	add	x0, sp, #0x38
    1358:	mov	x3, x0
    135c:	adrp	x0, 0 <grub_mod_init-0x450>
    1360:	add	x0, x0, #0x0
    1364:	ldr	x2, [x0]
    1368:	ldr	x1, [sp, #112]
    136c:	ldr	x0, [sp, #96]
    1370:	blr	x4
    1374:	cmp	w0, #0x0
    1378:	b.ne	13c0 <grub_mod_fini+0xea0>  // b.any
    137c:	ldr	x0, [sp, #80]
    1380:	bl	0 <grub_free>
    1384:	ldr	x0, [sp, #96]
    1388:	bl	0 <grub_device_close>
    138c:	ldr	x0, [sp, #104]
    1390:	bl	0 <grub_free>
    1394:	bl	0 <grub_error_pop>
    1398:	ldr	x0, [sp, #64]
    139c:	b	144c <grub_mod_fini+0xf2c>
    13a0:	nop
    13a4:	b	13c4 <grub_mod_fini+0xea4>
    13a8:	nop
    13ac:	b	13c4 <grub_mod_fini+0xea4>
    13b0:	nop
    13b4:	b	13c4 <grub_mod_fini+0xea4>
    13b8:	nop
    13bc:	b	13c4 <grub_mod_fini+0xea4>
    13c0:	nop
    13c4:	ldr	x0, [sp, #80]
    13c8:	bl	0 <grub_free>
    13cc:	str	wzr, [sp, #124]
    13d0:	b	13f8 <grub_mod_fini+0xed8>
    13d4:	ldr	x1, [sp, #64]
    13d8:	ldrsw	x0, [sp, #124]
    13dc:	lsl	x0, x0, #3
    13e0:	add	x0, x1, x0
    13e4:	ldr	x0, [x0]
    13e8:	bl	0 <grub_free>
    13ec:	ldr	w0, [sp, #124]
    13f0:	add	w0, w0, #0x1
    13f4:	str	w0, [sp, #124]
    13f8:	ldr	x0, [sp, #64]
    13fc:	cmp	x0, #0x0
    1400:	b.eq	1420 <grub_mod_fini+0xf00>  // b.none
    1404:	ldr	x1, [sp, #64]
    1408:	ldrsw	x0, [sp, #124]
    140c:	lsl	x0, x0, #3
    1410:	add	x0, x1, x0
    1414:	ldr	x0, [x0]
    1418:	cmp	x0, #0x0
    141c:	b.ne	13d4 <grub_mod_fini+0xeb4>  // b.any
    1420:	ldr	x0, [sp, #64]
    1424:	bl	0 <grub_free>
    1428:	ldr	x0, [sp, #96]
    142c:	cmp	x0, #0x0
    1430:	b.eq	143c <grub_mod_fini+0xf1c>  // b.none
    1434:	ldr	x0, [sp, #96]
    1438:	bl	0 <grub_device_close>
    143c:	ldr	x0, [sp, #104]
    1440:	bl	0 <grub_free>
    1444:	bl	0 <grub_error_pop>
    1448:	mov	x0, #0x0                   	// #0
    144c:	ldp	x29, x30, [sp], #128
    1450:	ret
    1454:	nop
	...
    1460:	stp	x29, x30, [sp, #-64]!
    1464:	mov	x29, sp
    1468:	str	x0, [sp, #40]
    146c:	str	x1, [sp, #32]
    1470:	str	x2, [sp, #24]
    1474:	ldr	x0, [sp, #24]
    1478:	str	x0, [sp, #56]
    147c:	ldr	x0, [sp, #56]
    1480:	ldr	x0, [x0]
    1484:	ldrb	w0, [x0]
    1488:	cmp	w0, #0x0
    148c:	b.eq	14e4 <grub_mod_fini+0xfc4>  // b.none
    1490:	ldr	x0, [sp, #32]
    1494:	ldrb	w0, [x0]
    1498:	and	w0, w0, #0x4
    149c:	and	w0, w0, #0xff
    14a0:	cmp	w0, #0x0
    14a4:	b.eq	14c8 <grub_mod_fini+0xfa8>  // b.none
    14a8:	ldr	x0, [sp, #56]
    14ac:	ldr	x0, [x0]
    14b0:	mov	x1, x0
    14b4:	ldr	x0, [sp, #40]
    14b8:	bl	5cc <grub_mod_fini+0xac>
    14bc:	cmp	w0, #0x0
    14c0:	b.eq	14e4 <grub_mod_fini+0xfc4>  // b.none
    14c4:	b	14f8 <grub_mod_fini+0xfd8>
    14c8:	ldr	x0, [sp, #56]
    14cc:	ldr	x0, [x0]
    14d0:	mov	x1, x0
    14d4:	ldr	x0, [sp, #40]
    14d8:	bl	0 <grub_strcmp>
    14dc:	cmp	w0, #0x0
    14e0:	b.ne	14f8 <grub_mod_fini+0xfd8>  // b.any
    14e4:	ldr	x0, [sp, #56]
    14e8:	mov	w1, #0x1                   	// #1
    14ec:	str	w1, [x0, #8]
    14f0:	mov	w0, #0x1                   	// #1
    14f4:	b	14fc <grub_mod_fini+0xfdc>
    14f8:	mov	w0, #0x0                   	// #0
    14fc:	ldp	x29, x30, [sp], #64
    1500:	ret
    1504:	stp	x29, x30, [sp, #-80]!
    1508:	mov	x29, sp
    150c:	str	x0, [sp, #24]
    1510:	str	x1, [sp, #16]
    1514:	ldr	x0, [sp, #16]
    1518:	str	x0, [sp, #32]
    151c:	str	wzr, [sp, #40]
    1520:	ldr	x0, [sp, #24]
    1524:	bl	0 <grub_file_get_device_name>
    1528:	str	x0, [sp, #64]
    152c:	ldr	x0, [sp, #64]
    1530:	bl	0 <grub_device_open>
    1534:	str	x0, [sp, #56]
    1538:	ldr	x0, [sp, #56]
    153c:	cmp	x0, #0x0
    1540:	b.eq	1620 <grub_mod_fini+0x1100>  // b.none
    1544:	ldr	x0, [sp, #56]
    1548:	bl	0 <grub_fs_probe>
    154c:	str	x0, [sp, #48]
    1550:	ldr	x0, [sp, #48]
    1554:	cmp	x0, #0x0
    1558:	b.eq	1628 <grub_mod_fini+0x1108>  // b.none
    155c:	ldr	x0, [sp, #24]
    1560:	ldrb	w0, [x0]
    1564:	cmp	w0, #0x28
    1568:	b.ne	1598 <grub_mod_fini+0x1078>  // b.any
    156c:	mov	w1, #0x29                  	// #41
    1570:	ldr	x0, [sp, #24]
    1574:	bl	0 <grub_strchr>
    1578:	str	x0, [sp, #72]
    157c:	ldr	x0, [sp, #72]
    1580:	cmp	x0, #0x0
    1584:	b.eq	1630 <grub_mod_fini+0x1110>  // b.none
    1588:	ldr	x0, [sp, #72]
    158c:	add	x0, x0, #0x1
    1590:	str	x0, [sp, #72]
    1594:	b	15a0 <grub_mod_fini+0x1080>
    1598:	ldr	x0, [sp, #24]
    159c:	str	x0, [sp, #72]
    15a0:	ldr	x0, [sp, #48]
    15a4:	ldr	x4, [x0, #24]
    15a8:	ldr	x0, [sp, #72]
    15ac:	ldrb	w0, [x0]
    15b0:	cmp	w0, #0x0
    15b4:	b.eq	15c0 <grub_mod_fini+0x10a0>  // b.none
    15b8:	ldr	x0, [sp, #72]
    15bc:	b	15cc <grub_mod_fini+0x10ac>
    15c0:	adrp	x0, 0 <grub_mod_init-0x450>
    15c4:	add	x0, x0, #0x0
    15c8:	ldr	x0, [x0]
    15cc:	add	x1, sp, #0x20
    15d0:	mov	x3, x1
    15d4:	adrp	x1, 0 <grub_mod_init-0x450>
    15d8:	add	x1, x1, #0x0
    15dc:	ldr	x2, [x1]
    15e0:	mov	x1, x0
    15e4:	ldr	x0, [sp, #56]
    15e8:	blr	x4
    15ec:	adrp	x0, 0 <grub_mod_init-0x450>
    15f0:	add	x0, x0, #0x0
    15f4:	ldr	x0, [x0]
    15f8:	ldr	w0, [x0]
    15fc:	cmp	w0, #0x0
    1600:	b.ne	1638 <grub_mod_fini+0x1118>  // b.any
    1604:	ldr	x0, [sp, #16]
    1608:	ldrb	w0, [x0]
    160c:	cmp	w0, #0x0
    1610:	b.ne	1638 <grub_mod_fini+0x1118>  // b.any
    1614:	mov	w0, #0x1                   	// #1
    1618:	str	w0, [sp, #40]
    161c:	b	163c <grub_mod_fini+0x111c>
    1620:	nop
    1624:	b	163c <grub_mod_fini+0x111c>
    1628:	nop
    162c:	b	163c <grub_mod_fini+0x111c>
    1630:	nop
    1634:	b	163c <grub_mod_fini+0x111c>
    1638:	nop
    163c:	adrp	x0, 0 <grub_mod_init-0x450>
    1640:	add	x0, x0, #0x0
    1644:	ldr	x0, [x0]
    1648:	str	wzr, [x0]
    164c:	ldr	w0, [sp, #40]
    1650:	ldp	x29, x30, [sp], #80
    1654:	ret
	...
    1670:	sub	sp, sp, #0x30
    1674:	str	x0, [sp, #24]
    1678:	str	x1, [sp, #16]
    167c:	str	x2, [sp, #8]
    1680:	ldr	x0, [sp, #24]
    1684:	str	x0, [sp, #40]
    1688:	ldr	x0, [sp, #16]
    168c:	str	x0, [sp, #32]
    1690:	b	1710 <grub_mod_fini+0x11f0>
    1694:	ldr	x0, [sp, #32]
    1698:	ldrb	w0, [x0]
    169c:	cmp	w0, #0x5c
    16a0:	b.ne	16e0 <grub_mod_fini+0x11c0>  // b.any
    16a4:	ldr	x0, [sp, #32]
    16a8:	add	x0, x0, #0x1
    16ac:	ldr	x1, [sp, #8]
    16b0:	cmp	x1, x0
    16b4:	b.ls	16e0 <grub_mod_fini+0x11c0>  // b.plast
    16b8:	ldr	x0, [sp, #40]
    16bc:	add	x1, x0, #0x1
    16c0:	str	x1, [sp, #40]
    16c4:	ldr	x1, [sp, #32]
    16c8:	ldrb	w1, [x1, #1]
    16cc:	strb	w1, [x0]
    16d0:	ldr	x0, [sp, #32]
    16d4:	add	x0, x0, #0x2
    16d8:	str	x0, [sp, #32]
    16dc:	b	1710 <grub_mod_fini+0x11f0>
    16e0:	ldr	x0, [sp, #32]
    16e4:	ldrb	w0, [x0]
    16e8:	cmp	w0, #0x5c
    16ec:	b.eq	1724 <grub_mod_fini+0x1204>  // b.none
    16f0:	ldr	x1, [sp, #32]
    16f4:	add	x0, x1, #0x1
    16f8:	str	x0, [sp, #32]
    16fc:	ldr	x0, [sp, #40]
    1700:	add	x2, x0, #0x1
    1704:	str	x2, [sp, #40]
    1708:	ldrb	w1, [x1]
    170c:	strb	w1, [x0]
    1710:	ldr	x1, [sp, #32]
    1714:	ldr	x0, [sp, #8]
    1718:	cmp	x1, x0
    171c:	b.cc	1694 <grub_mod_fini+0x1174>  // b.lo, b.ul, b.last
    1720:	b	1728 <grub_mod_fini+0x1208>
    1724:	nop
    1728:	ldr	x0, [sp, #40]
    172c:	strb	wzr, [x0]
    1730:	nop
    1734:	add	sp, sp, #0x30
    1738:	ret
    173c:	stp	x29, x30, [sp, #-192]!
    1740:	mov	x29, sp
    1744:	str	x0, [sp, #24]
    1748:	str	x1, [sp, #16]
    174c:	str	xzr, [sp, #176]
    1750:	str	wzr, [sp, #172]
    1754:	ldr	x0, [sp, #16]
    1758:	str	xzr, [x0]
    175c:	ldr	x0, [sp, #24]
    1760:	ldrb	w0, [x0]
    1764:	cmp	w0, #0x2f
    1768:	b.eq	1794 <grub_mod_fini+0x1274>  // b.none
    176c:	ldr	x0, [sp, #24]
    1770:	ldrb	w0, [x0]
    1774:	cmp	w0, #0x28
    1778:	b.eq	1794 <grub_mod_fini+0x1274>  // b.none
    177c:	ldr	x0, [sp, #24]
    1780:	ldrb	w0, [x0]
    1784:	cmp	w0, #0x2a
    1788:	b.eq	1794 <grub_mod_fini+0x1274>  // b.none
    178c:	mov	w0, #0x0                   	// #0
    1790:	b	1cf8 <grub_mod_fini+0x17d8>
    1794:	ldr	x0, [sp, #24]
    1798:	str	x0, [sp, #184]
    179c:	b	1c34 <grub_mod_fini+0x1714>
    17a0:	add	x1, sp, #0x68
    17a4:	add	x0, sp, #0x60
    17a8:	mov	x2, x1
    17ac:	mov	x1, x0
    17b0:	ldr	x0, [sp, #184]
    17b4:	bl	c98 <grub_mod_fini+0x778>
    17b8:	ldr	x1, [sp, #96]
    17bc:	ldr	x0, [sp, #104]
    17c0:	cmp	x1, x0
    17c4:	b.ne	1acc <grub_mod_fini+0x15ac>  // b.any
    17c8:	adrp	x0, 0 <grub_mod_init-0x450>
    17cc:	add	x0, x0, #0x0
    17d0:	ldr	x3, [x0]
    17d4:	adrp	x0, 0 <grub_mod_init-0x450>
    17d8:	add	x0, x0, #0x0
    17dc:	ldr	x2, [x0]
    17e0:	mov	w1, #0x1fd                 	// #509
    17e4:	adrp	x0, 0 <grub_mod_init-0x450>
    17e8:	add	x0, x0, #0x0
    17ec:	ldr	x0, [x0]
    17f0:	bl	0 <grub_real_dprintf>
    17f4:	ldr	x0, [sp, #176]
    17f8:	cmp	x0, #0x0
    17fc:	b.ne	1870 <grub_mod_fini+0x1350>  // b.any
    1800:	mov	x0, #0x10                  	// #16
    1804:	bl	0 <grub_malloc>
    1808:	str	x0, [sp, #176]
    180c:	ldr	x0, [sp, #176]
    1810:	cmp	x0, #0x0
    1814:	b.eq	1c60 <grub_mod_fini+0x1740>  // b.none
    1818:	ldr	x1, [sp, #104]
    181c:	ldr	x0, [sp, #184]
    1820:	sub	x0, x1, x0
    1824:	add	x0, x0, #0x1
    1828:	bl	0 <grub_malloc>
    182c:	mov	x1, x0
    1830:	ldr	x0, [sp, #176]
    1834:	str	x1, [x0]
    1838:	ldr	x0, [sp, #176]
    183c:	ldr	x0, [x0]
    1840:	cmp	x0, #0x0
    1844:	b.eq	1c68 <grub_mod_fini+0x1748>  // b.none
    1848:	ldr	x0, [sp, #176]
    184c:	ldr	x0, [x0]
    1850:	ldr	x1, [sp, #104]
    1854:	mov	x2, x1
    1858:	ldr	x1, [sp, #184]
    185c:	bl	1670 <grub_mod_fini+0x1150>
    1860:	ldr	x0, [sp, #176]
    1864:	add	x0, x0, #0x8
    1868:	str	xzr, [x0]
    186c:	b	1a88 <grub_mod_fini+0x1568>
    1870:	str	wzr, [sp, #164]
    1874:	str	wzr, [sp, #168]
    1878:	b	1a3c <grub_mod_fini+0x151c>
    187c:	ldr	w0, [sp, #168]
    1880:	lsl	x0, x0, #3
    1884:	ldr	x1, [sp, #176]
    1888:	add	x0, x1, x0
    188c:	ldr	x0, [x0]
    1890:	str	x0, [sp, #128]
    1894:	ldr	x0, [sp, #128]
    1898:	bl	0 <grub_strlen>
    189c:	mov	x1, x0
    18a0:	ldr	x0, [sp, #128]
    18a4:	add	x0, x0, x1
    18a8:	str	x0, [sp, #120]
    18ac:	ldr	x1, [sp, #120]
    18b0:	ldr	x0, [sp, #128]
    18b4:	sub	x1, x1, x0
    18b8:	ldr	x2, [sp, #104]
    18bc:	ldr	x0, [sp, #184]
    18c0:	sub	x0, x2, x0
    18c4:	add	x0, x1, x0
    18c8:	add	x0, x0, #0x1
    18cc:	bl	0 <grub_malloc>
    18d0:	str	x0, [sp, #112]
    18d4:	ldr	x0, [sp, #112]
    18d8:	cmp	x0, #0x0
    18dc:	b.eq	1c70 <grub_mod_fini+0x1750>  // b.none
    18e0:	ldr	x1, [sp, #120]
    18e4:	ldr	x0, [sp, #128]
    18e8:	sub	x0, x1, x0
    18ec:	mov	x2, x0
    18f0:	ldr	x1, [sp, #128]
    18f4:	ldr	x0, [sp, #112]
    18f8:	bl	568 <grub_mod_fini+0x48>
    18fc:	ldr	x1, [sp, #120]
    1900:	ldr	x0, [sp, #128]
    1904:	sub	x0, x1, x0
    1908:	mov	x1, x0
    190c:	ldr	x0, [sp, #112]
    1910:	add	x0, x0, x1
    1914:	ldr	x1, [sp, #104]
    1918:	mov	x2, x1
    191c:	ldr	x1, [sp, #184]
    1920:	bl	1670 <grub_mod_fini+0x1150>
    1924:	ldr	w0, [sp, #172]
    1928:	cmp	w0, #0x0
    192c:	b.eq	1944 <grub_mod_fini+0x1424>  // b.none
    1930:	mov	w1, #0x2f                  	// #47
    1934:	ldr	x0, [sp, #112]
    1938:	bl	0 <grub_strrchr>
    193c:	str	x0, [sp, #152]
    1940:	b	1948 <grub_mod_fini+0x1428>
    1944:	str	xzr, [sp, #152]
    1948:	ldr	x0, [sp, #152]
    194c:	cmp	x0, #0x0
    1950:	b.ne	1984 <grub_mod_fini+0x1464>  // b.any
    1954:	ldr	x0, [sp, #128]
    1958:	bl	0 <grub_free>
    195c:	ldr	w0, [sp, #164]
    1960:	add	w1, w0, #0x1
    1964:	str	w1, [sp, #164]
    1968:	sxtw	x0, w0
    196c:	lsl	x0, x0, #3
    1970:	ldr	x1, [sp, #176]
    1974:	add	x0, x1, x0
    1978:	ldr	x1, [sp, #112]
    197c:	str	x1, [x0]
    1980:	b	1a30 <grub_mod_fini+0x1510>
    1984:	ldr	x0, [sp, #152]
    1988:	strb	wzr, [x0]
    198c:	ldr	x0, [sp, #152]
    1990:	add	x0, x0, #0x1
    1994:	mov	x1, x0
    1998:	ldr	x0, [sp, #112]
    199c:	bl	1504 <grub_mod_fini+0xfe4>
    19a0:	cmp	w0, #0x0
    19a4:	b.ne	19f8 <grub_mod_fini+0x14d8>  // b.any
    19a8:	ldr	x0, [sp, #152]
    19ac:	add	x0, x0, #0x1
    19b0:	ldr	x5, [sp, #112]
    19b4:	mov	x4, x0
    19b8:	adrp	x0, 0 <grub_mod_init-0x450>
    19bc:	add	x0, x0, #0x0
    19c0:	ldr	x3, [x0]
    19c4:	adrp	x0, 0 <grub_mod_init-0x450>
    19c8:	add	x0, x0, #0x0
    19cc:	ldr	x2, [x0]
    19d0:	mov	w1, #0x226                 	// #550
    19d4:	adrp	x0, 0 <grub_mod_init-0x450>
    19d8:	add	x0, x0, #0x0
    19dc:	ldr	x0, [x0]
    19e0:	bl	0 <grub_real_dprintf>
    19e4:	ldr	x0, [sp, #128]
    19e8:	bl	0 <grub_free>
    19ec:	ldr	x0, [sp, #112]
    19f0:	bl	0 <grub_free>
    19f4:	b	1a30 <grub_mod_fini+0x1510>
    19f8:	ldr	x0, [sp, #152]
    19fc:	mov	w1, #0x2f                  	// #47
    1a00:	strb	w1, [x0]
    1a04:	ldr	x0, [sp, #128]
    1a08:	bl	0 <grub_free>
    1a0c:	ldr	w0, [sp, #164]
    1a10:	add	w1, w0, #0x1
    1a14:	str	w1, [sp, #164]
    1a18:	sxtw	x0, w0
    1a1c:	lsl	x0, x0, #3
    1a20:	ldr	x1, [sp, #176]
    1a24:	add	x0, x1, x0
    1a28:	ldr	x1, [sp, #112]
    1a2c:	str	x1, [x0]
    1a30:	ldr	w0, [sp, #168]
    1a34:	add	w0, w0, #0x1
    1a38:	str	w0, [sp, #168]
    1a3c:	ldr	w0, [sp, #168]
    1a40:	lsl	x0, x0, #3
    1a44:	ldr	x1, [sp, #176]
    1a48:	add	x0, x1, x0
    1a4c:	ldr	x0, [x0]
    1a50:	cmp	x0, #0x0
    1a54:	b.ne	187c <grub_mod_fini+0x135c>  // b.any
    1a58:	ldr	w0, [sp, #164]
    1a5c:	cmp	w0, #0x0
    1a60:	b.ne	1a74 <grub_mod_fini+0x1554>  // b.any
    1a64:	ldr	x0, [sp, #176]
    1a68:	bl	0 <grub_free>
    1a6c:	str	xzr, [sp, #176]
    1a70:	b	1c4c <grub_mod_fini+0x172c>
    1a74:	ldrsw	x0, [sp, #164]
    1a78:	lsl	x0, x0, #3
    1a7c:	ldr	x1, [sp, #176]
    1a80:	add	x0, x1, x0
    1a84:	str	xzr, [x0]
    1a88:	ldr	x0, [sp, #176]
    1a8c:	ldr	x0, [x0]
    1a90:	mov	x4, x0
    1a94:	adrp	x0, 0 <grub_mod_init-0x450>
    1a98:	add	x0, x0, #0x0
    1a9c:	ldr	x3, [x0]
    1aa0:	adrp	x0, 0 <grub_mod_init-0x450>
    1aa4:	add	x0, x0, #0x0
    1aa8:	ldr	x2, [x0]
    1aac:	mov	w1, #0x238                 	// #568
    1ab0:	adrp	x0, 0 <grub_mod_init-0x450>
    1ab4:	add	x0, x0, #0x0
    1ab8:	ldr	x0, [x0]
    1abc:	bl	0 <grub_real_dprintf>
    1ac0:	ldr	x0, [sp, #104]
    1ac4:	str	x0, [sp, #184]
    1ac8:	b	1c34 <grub_mod_fini+0x1714>
    1acc:	ldr	x0, [sp, #96]
    1ad0:	ldr	x1, [sp, #104]
    1ad4:	add	x2, sp, #0x20
    1ad8:	bl	95c <grub_mod_fini+0x43c>
    1adc:	cmp	w0, #0x0
    1ae0:	b.ne	1c78 <grub_mod_fini+0x1758>  // b.any
    1ae4:	mov	w0, #0x1                   	// #1
    1ae8:	str	w0, [sp, #172]
    1aec:	ldr	x0, [sp, #176]
    1af0:	cmp	x0, #0x0
    1af4:	b.ne	1b5c <grub_mod_fini+0x163c>  // b.any
    1af8:	ldr	x0, [sp, #96]
    1afc:	ldr	x1, [sp, #184]
    1b00:	cmp	x1, x0
    1b04:	b.ne	1b30 <grub_mod_fini+0x1610>  // b.any
    1b08:	ldr	x0, [sp, #184]
    1b0c:	ldrb	w0, [x0]
    1b10:	cmp	w0, #0x28
    1b14:	cset	w0, ne  // ne = any
    1b18:	and	w0, w0, #0xff
    1b1c:	mov	w1, w0
    1b20:	add	x0, sp, #0x20
    1b24:	bl	fa0 <grub_mod_fini+0xa80>
    1b28:	str	x0, [sp, #176]
    1b2c:	b	1c18 <grub_mod_fini+0x16f8>
    1b30:	ldr	x0, [sp, #96]
    1b34:	add	x1, sp, #0x20
    1b38:	mov	x3, x1
    1b3c:	mov	x2, x0
    1b40:	ldr	x1, [sp, #184]
    1b44:	adrp	x0, 0 <grub_mod_init-0x450>
    1b48:	add	x0, x0, #0x0
    1b4c:	ldr	x0, [x0]
    1b50:	bl	1278 <grub_mod_fini+0xd58>
    1b54:	str	x0, [sp, #176]
    1b58:	b	1c18 <grub_mod_fini+0x16f8>
    1b5c:	str	xzr, [sp, #144]
    1b60:	str	wzr, [sp, #168]
    1b64:	b	1bec <grub_mod_fini+0x16cc>
    1b68:	ldr	w0, [sp, #168]
    1b6c:	lsl	x0, x0, #3
    1b70:	ldr	x1, [sp, #176]
    1b74:	add	x0, x1, x0
    1b78:	ldr	x0, [x0]
    1b7c:	ldr	x1, [sp, #96]
    1b80:	add	x2, sp, #0x20
    1b84:	mov	x3, x2
    1b88:	mov	x2, x1
    1b8c:	ldr	x1, [sp, #184]
    1b90:	bl	1278 <grub_mod_fini+0xd58>
    1b94:	str	x0, [sp, #136]
    1b98:	ldr	w0, [sp, #168]
    1b9c:	lsl	x0, x0, #3
    1ba0:	ldr	x1, [sp, #176]
    1ba4:	add	x0, x1, x0
    1ba8:	ldr	x0, [x0]
    1bac:	bl	0 <grub_free>
    1bb0:	ldr	x0, [sp, #136]
    1bb4:	cmp	x0, #0x0
    1bb8:	b.eq	1bdc <grub_mod_fini+0x16bc>  // b.none
    1bbc:	ldr	x1, [sp, #136]
    1bc0:	ldr	x0, [sp, #144]
    1bc4:	bl	674 <grub_mod_fini+0x154>
    1bc8:	str	x0, [sp, #144]
    1bcc:	ldr	x0, [sp, #144]
    1bd0:	cmp	x0, #0x0
    1bd4:	b.eq	1c80 <grub_mod_fini+0x1760>  // b.none
    1bd8:	b	1be0 <grub_mod_fini+0x16c0>
    1bdc:	nop
    1be0:	ldr	w0, [sp, #168]
    1be4:	add	w0, w0, #0x1
    1be8:	str	w0, [sp, #168]
    1bec:	ldr	w0, [sp, #168]
    1bf0:	lsl	x0, x0, #3
    1bf4:	ldr	x1, [sp, #176]
    1bf8:	add	x0, x1, x0
    1bfc:	ldr	x0, [x0]
    1c00:	cmp	x0, #0x0
    1c04:	b.ne	1b68 <grub_mod_fini+0x1648>  // b.any
    1c08:	ldr	x0, [sp, #176]
    1c0c:	bl	0 <grub_free>
    1c10:	ldr	x0, [sp, #144]
    1c14:	str	x0, [sp, #176]
    1c18:	add	x0, sp, #0x20
    1c1c:	bl	89c8 <regfree>
    1c20:	ldr	x0, [sp, #176]
    1c24:	cmp	x0, #0x0
    1c28:	b.eq	1c48 <grub_mod_fini+0x1728>  // b.none
    1c2c:	ldr	x0, [sp, #104]
    1c30:	str	x0, [sp, #184]
    1c34:	ldr	x0, [sp, #184]
    1c38:	ldrb	w0, [x0]
    1c3c:	cmp	w0, #0x0
    1c40:	b.ne	17a0 <grub_mod_fini+0x1280>  // b.any
    1c44:	b	1c4c <grub_mod_fini+0x172c>
    1c48:	nop
    1c4c:	ldr	x0, [sp, #16]
    1c50:	ldr	x1, [sp, #176]
    1c54:	str	x1, [x0]
    1c58:	mov	w0, #0x0                   	// #0
    1c5c:	b	1cf8 <grub_mod_fini+0x17d8>
    1c60:	nop
    1c64:	b	1c84 <grub_mod_fini+0x1764>
    1c68:	nop
    1c6c:	b	1c84 <grub_mod_fini+0x1764>
    1c70:	nop
    1c74:	b	1c84 <grub_mod_fini+0x1764>
    1c78:	nop
    1c7c:	b	1c84 <grub_mod_fini+0x1764>
    1c80:	nop
    1c84:	str	wzr, [sp, #168]
    1c88:	b	1cb0 <grub_mod_fini+0x1790>
    1c8c:	ldr	w0, [sp, #168]
    1c90:	lsl	x0, x0, #3
    1c94:	ldr	x1, [sp, #176]
    1c98:	add	x0, x1, x0
    1c9c:	ldr	x0, [x0]
    1ca0:	bl	0 <grub_free>
    1ca4:	ldr	w0, [sp, #168]
    1ca8:	add	w0, w0, #0x1
    1cac:	str	w0, [sp, #168]
    1cb0:	ldr	x0, [sp, #176]
    1cb4:	cmp	x0, #0x0
    1cb8:	b.eq	1cd8 <grub_mod_fini+0x17b8>  // b.none
    1cbc:	ldr	w0, [sp, #168]
    1cc0:	lsl	x0, x0, #3
    1cc4:	ldr	x1, [sp, #176]
    1cc8:	add	x0, x1, x0
    1ccc:	ldr	x0, [x0]
    1cd0:	cmp	x0, #0x0
    1cd4:	b.ne	1c8c <grub_mod_fini+0x176c>  // b.any
    1cd8:	ldr	x0, [sp, #176]
    1cdc:	bl	0 <grub_free>
    1ce0:	add	x0, sp, #0x20
    1ce4:	bl	89c8 <regfree>
    1ce8:	adrp	x0, 0 <grub_mod_init-0x450>
    1cec:	add	x0, x0, #0x0
    1cf0:	ldr	x0, [x0]
    1cf4:	ldr	w0, [x0]
    1cf8:	ldp	x29, x30, [sp], #192
    1cfc:	ret
	...
    1d38:	stp	x29, x30, [sp, #-48]!
    1d3c:	mov	x29, sp
    1d40:	str	x0, [sp, #40]
    1d44:	str	x1, [sp, #32]
    1d48:	str	x2, [sp, #24]
    1d4c:	ldr	x2, [sp, #24]
    1d50:	ldr	x1, [sp, #32]
    1d54:	ldr	x0, [sp, #40]
    1d58:	bl	0 <grub_memmove>
    1d5c:	ldp	x29, x30, [sp], #48
    1d60:	ret
    1d64:	sub	sp, sp, #0x10
    1d68:	str	w0, [sp, #12]
    1d6c:	ldr	w0, [sp, #12]
    1d70:	cmp	w0, #0x1f
    1d74:	b.le	1d8c <grub_mod_fini+0x186c>
    1d78:	ldr	w0, [sp, #12]
    1d7c:	cmp	w0, #0x7e
    1d80:	b.gt	1d8c <grub_mod_fini+0x186c>
    1d84:	mov	w0, #0x1                   	// #1
    1d88:	b	1d90 <grub_mod_fini+0x1870>
    1d8c:	mov	w0, #0x0                   	// #0
    1d90:	add	sp, sp, #0x10
    1d94:	ret
    1d98:	sub	sp, sp, #0x10
    1d9c:	str	w0, [sp, #12]
    1da0:	ldr	w0, [sp, #12]
    1da4:	cmp	w0, #0x0
    1da8:	b.lt	1db8 <grub_mod_fini+0x1898>  // b.tstop
    1dac:	ldr	w0, [sp, #12]
    1db0:	cmp	w0, #0x1f
    1db4:	b.le	1dc4 <grub_mod_fini+0x18a4>
    1db8:	ldr	w0, [sp, #12]
    1dbc:	cmp	w0, #0x7f
    1dc0:	b.ne	1dcc <grub_mod_fini+0x18ac>  // b.any
    1dc4:	mov	w0, #0x1                   	// #1
    1dc8:	b	1dd0 <grub_mod_fini+0x18b0>
    1dcc:	mov	w0, #0x0                   	// #0
    1dd0:	add	sp, sp, #0x10
    1dd4:	ret
    1dd8:	sub	sp, sp, #0x10
    1ddc:	str	w0, [sp, #12]
    1de0:	ldr	w0, [sp, #12]
    1de4:	cmp	w0, #0x60
    1de8:	b.le	1df8 <grub_mod_fini+0x18d8>
    1dec:	ldr	w0, [sp, #12]
    1df0:	cmp	w0, #0x7a
    1df4:	b.le	1e10 <grub_mod_fini+0x18f0>
    1df8:	ldr	w0, [sp, #12]
    1dfc:	cmp	w0, #0x40
    1e00:	b.le	1e18 <grub_mod_fini+0x18f8>
    1e04:	ldr	w0, [sp, #12]
    1e08:	cmp	w0, #0x5a
    1e0c:	b.gt	1e18 <grub_mod_fini+0x18f8>
    1e10:	mov	w0, #0x1                   	// #1
    1e14:	b	1e1c <grub_mod_fini+0x18fc>
    1e18:	mov	w0, #0x0                   	// #0
    1e1c:	add	sp, sp, #0x10
    1e20:	ret
    1e24:	sub	sp, sp, #0x10
    1e28:	str	w0, [sp, #12]
    1e2c:	ldr	w0, [sp, #12]
    1e30:	cmp	w0, #0x60
    1e34:	b.le	1e4c <grub_mod_fini+0x192c>
    1e38:	ldr	w0, [sp, #12]
    1e3c:	cmp	w0, #0x7a
    1e40:	b.gt	1e4c <grub_mod_fini+0x192c>
    1e44:	mov	w0, #0x1                   	// #1
    1e48:	b	1e50 <grub_mod_fini+0x1930>
    1e4c:	mov	w0, #0x0                   	// #0
    1e50:	add	sp, sp, #0x10
    1e54:	ret
    1e58:	sub	sp, sp, #0x10
    1e5c:	str	w0, [sp, #12]
    1e60:	ldr	w0, [sp, #12]
    1e64:	cmp	w0, #0x40
    1e68:	b.le	1e80 <grub_mod_fini+0x1960>
    1e6c:	ldr	w0, [sp, #12]
    1e70:	cmp	w0, #0x5a
    1e74:	b.gt	1e80 <grub_mod_fini+0x1960>
    1e78:	mov	w0, #0x1                   	// #1
    1e7c:	b	1e84 <grub_mod_fini+0x1964>
    1e80:	mov	w0, #0x0                   	// #0
    1e84:	add	sp, sp, #0x10
    1e88:	ret
    1e8c:	sub	sp, sp, #0x10
    1e90:	str	w0, [sp, #12]
    1e94:	ldr	w0, [sp, #12]
    1e98:	cmp	w0, #0x20
    1e9c:	b.le	1eb4 <grub_mod_fini+0x1994>
    1ea0:	ldr	w0, [sp, #12]
    1ea4:	cmp	w0, #0x7e
    1ea8:	b.gt	1eb4 <grub_mod_fini+0x1994>
    1eac:	mov	w0, #0x1                   	// #1
    1eb0:	b	1eb8 <grub_mod_fini+0x1998>
    1eb4:	mov	w0, #0x0                   	// #0
    1eb8:	add	sp, sp, #0x10
    1ebc:	ret
    1ec0:	sub	sp, sp, #0x10
    1ec4:	str	w0, [sp, #12]
    1ec8:	ldr	w0, [sp, #12]
    1ecc:	cmp	w0, #0x2f
    1ed0:	b.le	1ee8 <grub_mod_fini+0x19c8>
    1ed4:	ldr	w0, [sp, #12]
    1ed8:	cmp	w0, #0x39
    1edc:	b.gt	1ee8 <grub_mod_fini+0x19c8>
    1ee0:	mov	w0, #0x1                   	// #1
    1ee4:	b	1eec <grub_mod_fini+0x19cc>
    1ee8:	mov	w0, #0x0                   	// #0
    1eec:	add	sp, sp, #0x10
    1ef0:	ret
    1ef4:	sub	sp, sp, #0x10
    1ef8:	str	w0, [sp, #12]
    1efc:	ldr	w0, [sp, #12]
    1f00:	cmp	w0, #0x2f
    1f04:	b.le	1f14 <grub_mod_fini+0x19f4>
    1f08:	ldr	w0, [sp, #12]
    1f0c:	cmp	w0, #0x39
    1f10:	b.le	1f44 <grub_mod_fini+0x1a24>
    1f14:	ldr	w0, [sp, #12]
    1f18:	cmp	w0, #0x60
    1f1c:	b.le	1f2c <grub_mod_fini+0x1a0c>
    1f20:	ldr	w0, [sp, #12]
    1f24:	cmp	w0, #0x66
    1f28:	b.le	1f44 <grub_mod_fini+0x1a24>
    1f2c:	ldr	w0, [sp, #12]
    1f30:	cmp	w0, #0x40
    1f34:	b.le	1f4c <grub_mod_fini+0x1a2c>
    1f38:	ldr	w0, [sp, #12]
    1f3c:	cmp	w0, #0x46
    1f40:	b.gt	1f4c <grub_mod_fini+0x1a2c>
    1f44:	mov	w0, #0x1                   	// #1
    1f48:	b	1f50 <grub_mod_fini+0x1a30>
    1f4c:	mov	w0, #0x0                   	// #0
    1f50:	add	sp, sp, #0x10
    1f54:	ret
    1f58:	sub	sp, sp, #0x10
    1f5c:	str	w0, [sp, #12]
    1f60:	ldr	w0, [sp, #12]
    1f64:	cmp	w0, #0x40
    1f68:	b.le	1f84 <grub_mod_fini+0x1a64>
    1f6c:	ldr	w0, [sp, #12]
    1f70:	cmp	w0, #0x5a
    1f74:	b.gt	1f84 <grub_mod_fini+0x1a64>
    1f78:	ldr	w0, [sp, #12]
    1f7c:	add	w0, w0, #0x20
    1f80:	b	1f88 <grub_mod_fini+0x1a68>
    1f84:	ldr	w0, [sp, #12]
    1f88:	add	sp, sp, #0x10
    1f8c:	ret
    1f90:	sub	sp, sp, #0x10
    1f94:	str	w0, [sp, #12]
    1f98:	ldr	w0, [sp, #12]
    1f9c:	cmp	w0, #0x60
    1fa0:	b.le	1fbc <grub_mod_fini+0x1a9c>
    1fa4:	ldr	w0, [sp, #12]
    1fa8:	cmp	w0, #0x7a
    1fac:	b.gt	1fbc <grub_mod_fini+0x1a9c>
    1fb0:	ldr	w0, [sp, #12]
    1fb4:	sub	w0, w0, #0x20
    1fb8:	b	1fc0 <grub_mod_fini+0x1aa0>
    1fbc:	ldr	w0, [sp, #12]
    1fc0:	add	sp, sp, #0x10
    1fc4:	ret
    1fc8:	stp	x29, x30, [sp, #-32]!
    1fcc:	mov	x29, sp
    1fd0:	str	x0, [sp, #24]
    1fd4:	str	w1, [sp, #20]
    1fd8:	str	w2, [sp, #16]
    1fdc:	ldr	w0, [sp, #16]
    1fe0:	cmp	w0, #0x0
    1fe4:	b.ne	2000 <grub_mod_fini+0x1ae0>  // b.any
    1fe8:	ldr	w2, [sp, #20]
    1fec:	ldr	x1, [sp, #24]
    1ff0:	adrp	x0, 0 <grub_mod_init-0x450>
    1ff4:	add	x0, x0, #0x0
    1ff8:	ldr	x0, [x0]
    1ffc:	bl	0 <grub_printf>
    2000:	nop
    2004:	ldp	x29, x30, [sp], #32
    2008:	ret
    200c:	nop
	...
    2018:	stp	x29, x30, [sp, #-32]!
    201c:	mov	x29, sp
    2020:	str	w0, [sp, #28]
    2024:	ldr	w0, [sp, #28]
    2028:	bl	1f90 <grub_mod_fini+0x1a70>
    202c:	ldp	x29, x30, [sp], #32
    2030:	ret
    2034:	stp	x29, x30, [sp, #-32]!
    2038:	mov	x29, sp
    203c:	str	w0, [sp, #28]
    2040:	ldr	w0, [sp, #28]
    2044:	bl	0 <grub_isspace>
    2048:	ldp	x29, x30, [sp], #32
    204c:	ret
    2050:	stp	x29, x30, [sp, #-32]!
    2054:	mov	x29, sp
    2058:	str	w0, [sp, #28]
    205c:	ldr	w0, [sp, #28]
    2060:	bl	1ec0 <grub_mod_fini+0x19a0>
    2064:	ldp	x29, x30, [sp], #32
    2068:	ret
    206c:	stp	x29, x30, [sp, #-32]!
    2070:	mov	x29, sp
    2074:	str	w0, [sp, #28]
    2078:	ldr	w0, [sp, #28]
    207c:	bl	1e24 <grub_mod_fini+0x1904>
    2080:	ldp	x29, x30, [sp], #32
    2084:	ret
    2088:	sub	sp, sp, #0x10
    208c:	str	w0, [sp, #12]
    2090:	ldr	w0, [sp, #12]
    2094:	and	w0, w0, #0xffffff80
    2098:	cmp	w0, #0x0
    209c:	cset	w0, eq  // eq = none
    20a0:	and	w0, w0, #0xff
    20a4:	add	sp, sp, #0x10
    20a8:	ret
    20ac:	stp	x29, x30, [sp, #-32]!
    20b0:	mov	x29, sp
    20b4:	str	w0, [sp, #28]
    20b8:	ldr	w0, [sp, #28]
    20bc:	bl	1e58 <grub_mod_fini+0x1938>
    20c0:	ldp	x29, x30, [sp], #32
    20c4:	ret
    20c8:	stp	x29, x30, [sp, #-32]!
    20cc:	mov	x29, sp
    20d0:	str	w0, [sp, #28]
    20d4:	ldr	w0, [sp, #28]
    20d8:	bl	1ef4 <grub_mod_fini+0x19d4>
    20dc:	ldp	x29, x30, [sp], #32
    20e0:	ret
    20e4:	stp	x29, x30, [sp, #-32]!
    20e8:	mov	x29, sp
    20ec:	str	w0, [sp, #28]
    20f0:	ldr	w0, [sp, #28]
    20f4:	bl	1d64 <grub_mod_fini+0x1844>
    20f8:	ldp	x29, x30, [sp], #32
    20fc:	ret
    2100:	stp	x29, x30, [sp, #-32]!
    2104:	mov	x29, sp
    2108:	str	w0, [sp, #28]
    210c:	ldr	w0, [sp, #28]
    2110:	bl	1d64 <grub_mod_fini+0x1844>
    2114:	cmp	w0, #0x0
    2118:	cset	w0, eq  // eq = none
    211c:	and	w0, w0, #0xff
    2120:	ldp	x29, x30, [sp], #32
    2124:	ret
    2128:	stp	x29, x30, [sp, #-32]!
    212c:	mov	x29, sp
    2130:	str	w0, [sp, #28]
    2134:	ldr	w0, [sp, #28]
    2138:	bl	1d64 <grub_mod_fini+0x1844>
    213c:	cmp	w0, #0x0
    2140:	b.eq	215c <grub_mod_fini+0x1c3c>  // b.none
    2144:	ldr	w0, [sp, #28]
    2148:	bl	0 <grub_isspace>
    214c:	cmp	w0, #0x0
    2150:	b.ne	215c <grub_mod_fini+0x1c3c>  // b.any
    2154:	mov	w0, #0x1                   	// #1
    2158:	b	2160 <grub_mod_fini+0x1c40>
    215c:	mov	w0, #0x0                   	// #0
    2160:	ldp	x29, x30, [sp], #32
    2164:	ret
    2168:	stp	x29, x30, [sp, #-32]!
    216c:	mov	x29, sp
    2170:	str	w0, [sp, #28]
    2174:	ldr	w0, [sp, #28]
    2178:	bl	1dd8 <grub_mod_fini+0x18b8>
    217c:	cmp	w0, #0x0
    2180:	b.ne	2194 <grub_mod_fini+0x1c74>  // b.any
    2184:	ldr	w0, [sp, #28]
    2188:	bl	1ec0 <grub_mod_fini+0x19a0>
    218c:	cmp	w0, #0x0
    2190:	b.eq	219c <grub_mod_fini+0x1c7c>  // b.none
    2194:	mov	w0, #0x1                   	// #1
    2198:	b	21a0 <grub_mod_fini+0x1c80>
    219c:	mov	w0, #0x0                   	// #0
    21a0:	ldp	x29, x30, [sp], #32
    21a4:	ret
    21a8:	stp	x29, x30, [sp, #-32]!
    21ac:	mov	x29, sp
    21b0:	str	w0, [sp, #28]
    21b4:	ldr	w0, [sp, #28]
    21b8:	bl	1d64 <grub_mod_fini+0x1844>
    21bc:	cmp	w0, #0x0
    21c0:	b.eq	21ec <grub_mod_fini+0x1ccc>  // b.none
    21c4:	ldr	w0, [sp, #28]
    21c8:	bl	0 <grub_isspace>
    21cc:	cmp	w0, #0x0
    21d0:	b.ne	21ec <grub_mod_fini+0x1ccc>  // b.any
    21d4:	ldr	w0, [sp, #28]
    21d8:	bl	2168 <grub_mod_fini+0x1c48>
    21dc:	cmp	w0, #0x0
    21e0:	b.ne	21ec <grub_mod_fini+0x1ccc>  // b.any
    21e4:	mov	w0, #0x1                   	// #1
    21e8:	b	21f0 <grub_mod_fini+0x1cd0>
    21ec:	mov	w0, #0x0                   	// #0
    21f0:	ldp	x29, x30, [sp], #32
    21f4:	ret
    21f8:	stp	x29, x30, [sp, #-32]!
    21fc:	mov	x29, sp
    2200:	str	w0, [sp, #28]
    2204:	ldr	w0, [sp, #28]
    2208:	bl	1dd8 <grub_mod_fini+0x18b8>
    220c:	ldp	x29, x30, [sp], #32
    2210:	ret
    2214:	stp	x29, x30, [sp, #-32]!
    2218:	mov	x29, sp
    221c:	str	w0, [sp, #28]
    2220:	ldr	w0, [sp, #28]
    2224:	bl	1f58 <grub_mod_fini+0x1a38>
    2228:	ldp	x29, x30, [sp], #32
    222c:	ret
    2230:	stp	x29, x30, [sp, #-32]!
    2234:	mov	x29, sp
    2238:	str	x0, [sp, #24]
    223c:	ldr	x0, [sp, #24]
    2240:	bl	0 <grub_free>
    2244:	nop
    2248:	ldp	x29, x30, [sp], #32
    224c:	ret
    2250:	stp	x29, x30, [sp, #-32]!
    2254:	mov	x29, sp
    2258:	str	x0, [sp, #24]
    225c:	ldr	x0, [sp, #24]
    2260:	bl	0 <grub_malloc>
    2264:	ldp	x29, x30, [sp], #32
    2268:	ret
    226c:	stp	x29, x30, [sp, #-32]!
    2270:	mov	x29, sp
    2274:	str	x0, [sp, #24]
    2278:	str	x1, [sp, #16]
    227c:	ldr	x1, [sp, #24]
    2280:	ldr	x0, [sp, #16]
    2284:	mul	x0, x1, x0
    2288:	bl	0 <grub_zalloc>
    228c:	ldp	x29, x30, [sp], #32
    2290:	ret
    2294:	stp	x29, x30, [sp, #-32]!
    2298:	mov	x29, sp
    229c:	str	x0, [sp, #24]
    22a0:	str	x1, [sp, #16]
    22a4:	ldr	x1, [sp, #16]
    22a8:	ldr	x0, [sp, #24]
    22ac:	bl	0 <grub_realloc>
    22b0:	ldp	x29, x30, [sp], #32
    22b4:	ret
    22b8:	stp	x29, x30, [sp, #-32]!
    22bc:	mov	x29, sp
    22c0:	str	x0, [sp, #24]
    22c4:	ldr	x0, [sp, #24]
    22c8:	bl	0 <grub_strlen>
    22cc:	ldp	x29, x30, [sp], #32
    22d0:	ret
    22d4:	stp	x29, x30, [sp, #-32]!
    22d8:	mov	x29, sp
    22dc:	str	x0, [sp, #24]
    22e0:	str	x1, [sp, #16]
    22e4:	ldr	x1, [sp, #16]
    22e8:	ldr	x0, [sp, #24]
    22ec:	bl	0 <grub_strcmp>
    22f0:	ldp	x29, x30, [sp], #32
    22f4:	ret
    22f8:	sub	sp, sp, #0x10
    22fc:	str	w0, [sp, #12]
    2300:	ldr	w0, [sp, #12]
    2304:	cmp	w0, #0x0
    2308:	b.ne	231c <grub_mod_fini+0x1dfc>  // b.any
    230c:	adrp	x0, 0 <grub_mod_init-0x450>
    2310:	add	x0, x0, #0x0
    2314:	ldr	x0, [x0]
    2318:	b	2328 <grub_mod_fini+0x1e08>
    231c:	adrp	x0, 0 <grub_mod_init-0x450>
    2320:	add	x0, x0, #0x0
    2324:	ldr	x0, [x0]
    2328:	add	sp, sp, #0x10
    232c:	ret
	...
    2340:	sub	sp, sp, #0x20
    2344:	strb	w0, [sp, #31]
    2348:	str	x1, [sp, #16]
    234c:	str	x2, [sp, #8]
    2350:	ldr	x0, [sp, #8]
    2354:	ldr	w0, [x0]
    2358:	cmp	w0, #0x0
    235c:	b.eq	2424 <grub_mod_fini+0x1f04>  // b.none
    2360:	ldrb	w0, [sp, #31]
    2364:	and	w0, w0, #0xc0
    2368:	cmp	w0, #0x80
    236c:	b.eq	2380 <grub_mod_fini+0x1e60>  // b.none
    2370:	ldr	x0, [sp, #8]
    2374:	str	wzr, [x0]
    2378:	mov	w0, #0x0                   	// #0
    237c:	b	250c <grub_mod_fini+0x1fec>
    2380:	ldr	x0, [sp, #16]
    2384:	ldr	w0, [x0]
    2388:	lsl	w1, w0, #6
    238c:	ldr	x0, [sp, #16]
    2390:	str	w1, [x0]
    2394:	ldr	x0, [sp, #16]
    2398:	ldr	w1, [x0]
    239c:	ldrb	w0, [sp, #31]
    23a0:	and	w0, w0, #0x3f
    23a4:	orr	w1, w1, w0
    23a8:	ldr	x0, [sp, #16]
    23ac:	str	w1, [x0]
    23b0:	ldr	x0, [sp, #8]
    23b4:	ldr	w0, [x0]
    23b8:	sub	w1, w0, #0x1
    23bc:	ldr	x0, [sp, #8]
    23c0:	str	w1, [x0]
    23c4:	ldr	x0, [sp, #8]
    23c8:	ldr	w0, [x0]
    23cc:	cmp	w0, #0x1
    23d0:	b.ne	23e4 <grub_mod_fini+0x1ec4>  // b.any
    23d4:	ldr	x0, [sp, #16]
    23d8:	ldr	w0, [x0]
    23dc:	cmp	w0, #0x1f
    23e0:	b.ls	2404 <grub_mod_fini+0x1ee4>  // b.plast
    23e4:	ldr	x0, [sp, #8]
    23e8:	ldr	w0, [x0]
    23ec:	cmp	w0, #0x2
    23f0:	b.ne	241c <grub_mod_fini+0x1efc>  // b.any
    23f4:	ldr	x0, [sp, #16]
    23f8:	ldr	w0, [x0]
    23fc:	cmp	w0, #0xf
    2400:	b.hi	241c <grub_mod_fini+0x1efc>  // b.pmore
    2404:	ldr	x0, [sp, #16]
    2408:	str	wzr, [x0]
    240c:	ldr	x0, [sp, #8]
    2410:	str	wzr, [x0]
    2414:	mov	w0, #0x0                   	// #0
    2418:	b	250c <grub_mod_fini+0x1fec>
    241c:	mov	w0, #0x1                   	// #1
    2420:	b	250c <grub_mod_fini+0x1fec>
    2424:	ldrsb	w0, [sp, #31]
    2428:	cmp	w0, #0x0
    242c:	b.lt	2444 <grub_mod_fini+0x1f24>  // b.tstop
    2430:	ldrb	w1, [sp, #31]
    2434:	ldr	x0, [sp, #16]
    2438:	str	w1, [x0]
    243c:	mov	w0, #0x1                   	// #1
    2440:	b	250c <grub_mod_fini+0x1fec>
    2444:	ldrb	w0, [sp, #31]
    2448:	and	w0, w0, #0xe0
    244c:	cmp	w0, #0xc0
    2450:	b.ne	24a0 <grub_mod_fini+0x1f80>  // b.any
    2454:	ldr	x0, [sp, #8]
    2458:	mov	w1, #0x1                   	// #1
    245c:	str	w1, [x0]
    2460:	ldrb	w0, [sp, #31]
    2464:	and	w1, w0, #0x1f
    2468:	ldr	x0, [sp, #16]
    246c:	str	w1, [x0]
    2470:	ldr	x0, [sp, #16]
    2474:	ldr	w0, [x0]
    2478:	cmp	w0, #0x1
    247c:	b.hi	2498 <grub_mod_fini+0x1f78>  // b.pmore
    2480:	ldr	x0, [sp, #8]
    2484:	str	wzr, [x0]
    2488:	ldr	x0, [sp, #16]
    248c:	str	wzr, [x0]
    2490:	mov	w0, #0x0                   	// #0
    2494:	b	250c <grub_mod_fini+0x1fec>
    2498:	mov	w0, #0x1                   	// #1
    249c:	b	250c <grub_mod_fini+0x1fec>
    24a0:	ldrb	w0, [sp, #31]
    24a4:	and	w0, w0, #0xf0
    24a8:	cmp	w0, #0xe0
    24ac:	b.ne	24d4 <grub_mod_fini+0x1fb4>  // b.any
    24b0:	ldr	x0, [sp, #8]
    24b4:	mov	w1, #0x2                   	// #2
    24b8:	str	w1, [x0]
    24bc:	ldrb	w0, [sp, #31]
    24c0:	and	w1, w0, #0xf
    24c4:	ldr	x0, [sp, #16]
    24c8:	str	w1, [x0]
    24cc:	mov	w0, #0x1                   	// #1
    24d0:	b	250c <grub_mod_fini+0x1fec>
    24d4:	ldrb	w0, [sp, #31]
    24d8:	and	w0, w0, #0xf8
    24dc:	cmp	w0, #0xf0
    24e0:	b.ne	2508 <grub_mod_fini+0x1fe8>  // b.any
    24e4:	ldr	x0, [sp, #8]
    24e8:	mov	w1, #0x3                   	// #3
    24ec:	str	w1, [x0]
    24f0:	ldrb	w0, [sp, #31]
    24f4:	and	w1, w0, #0x7
    24f8:	ldr	x0, [sp, #16]
    24fc:	str	w1, [x0]
    2500:	mov	w0, #0x1                   	// #1
    2504:	b	250c <grub_mod_fini+0x1fec>
    2508:	mov	w0, #0x0                   	// #0
    250c:	add	sp, sp, #0x20
    2510:	ret
    2514:	stp	x29, x30, [sp, #-64]!
    2518:	mov	x29, sp
    251c:	str	x0, [sp, #40]
    2520:	str	x1, [sp, #32]
    2524:	str	x2, [sp, #24]
    2528:	str	x3, [sp, #16]
    252c:	ldr	x0, [sp, #32]
    2530:	cmp	x0, #0x0
    2534:	b.ne	2554 <grub_mod_fini+0x2034>  // b.any
    2538:	str	xzr, [sp, #40]
    253c:	adrp	x0, 0 <grub_mod_init-0x450>
    2540:	add	x0, x0, #0x0
    2544:	ldr	x0, [x0]
    2548:	str	x0, [sp, #32]
    254c:	mov	x0, #0x1                   	// #1
    2550:	str	x0, [sp, #24]
    2554:	ldr	x0, [sp, #40]
    2558:	cmp	x0, #0x0
    255c:	b.eq	2568 <grub_mod_fini+0x2048>  // b.none
    2560:	ldr	x0, [sp, #40]
    2564:	str	wzr, [x0]
    2568:	ldr	x0, [sp, #32]
    256c:	str	x0, [sp, #56]
    2570:	b	2610 <grub_mod_fini+0x20f0>
    2574:	ldr	x0, [sp, #56]
    2578:	ldrb	w3, [x0]
    257c:	ldr	x1, [sp, #16]
    2580:	ldr	x0, [sp, #16]
    2584:	add	x0, x0, #0x4
    2588:	mov	x2, x0
    258c:	mov	w0, w3
    2590:	bl	2340 <grub_mod_fini+0x1e20>
    2594:	cmp	w0, #0x0
    2598:	b.ne	25a4 <grub_mod_fini+0x2084>  // b.any
    259c:	mov	x0, #0xffffffffffffffff    	// #-1
    25a0:	b	262c <grub_mod_fini+0x210c>
    25a4:	ldr	x0, [sp, #16]
    25a8:	ldr	w0, [x0, #4]
    25ac:	cmp	w0, #0x0
    25b0:	b.eq	25c4 <grub_mod_fini+0x20a4>  // b.none
    25b4:	ldr	x0, [sp, #56]
    25b8:	add	x0, x0, #0x1
    25bc:	str	x0, [sp, #56]
    25c0:	b	2610 <grub_mod_fini+0x20f0>
    25c4:	ldr	x0, [sp, #40]
    25c8:	cmp	x0, #0x0
    25cc:	b.eq	25e4 <grub_mod_fini+0x20c4>  // b.none
    25d0:	ldr	x0, [sp, #16]
    25d4:	ldr	w0, [x0]
    25d8:	mov	w1, w0
    25dc:	ldr	x0, [sp, #40]
    25e0:	str	w1, [x0]
    25e4:	ldr	x0, [sp, #16]
    25e8:	ldr	w0, [x0]
    25ec:	cmp	w0, #0x0
    25f0:	b.ne	25fc <grub_mod_fini+0x20dc>  // b.any
    25f4:	mov	x0, #0x0                   	// #0
    25f8:	b	262c <grub_mod_fini+0x210c>
    25fc:	ldr	x1, [sp, #56]
    2600:	ldr	x0, [sp, #32]
    2604:	sub	x0, x1, x0
    2608:	add	x0, x0, #0x1
    260c:	b	262c <grub_mod_fini+0x210c>
    2610:	ldr	x1, [sp, #32]
    2614:	ldr	x0, [sp, #24]
    2618:	add	x0, x1, x0
    261c:	ldr	x1, [sp, #56]
    2620:	cmp	x1, x0
    2624:	b.cc	2574 <grub_mod_fini+0x2054>  // b.lo, b.ul, b.last
    2628:	mov	x0, #0xfffffffffffffffe    	// #-2
    262c:	ldp	x29, x30, [sp], #64
    2630:	ret
    2634:	nop
	...
    2640:	sub	sp, sp, #0x10
    2644:	str	x0, [sp, #8]
    2648:	ldr	x0, [sp, #8]
    264c:	ldr	w0, [x0, #4]
    2650:	cmp	w0, #0x0
    2654:	cset	w0, eq  // eq = none
    2658:	and	w0, w0, #0xff
    265c:	add	sp, sp, #0x10
    2660:	ret
    2664:	stp	x29, x30, [sp, #-48]!
    2668:	mov	x29, sp
    266c:	str	x0, [sp, #40]
    2670:	str	w1, [sp, #36]
    2674:	str	x2, [sp, #24]
    2678:	ldr	x0, [sp, #40]
    267c:	cmp	x0, #0x0
    2680:	b.ne	268c <grub_mod_fini+0x216c>  // b.any
    2684:	mov	x0, #0x1                   	// #1
    2688:	b	26a8 <grub_mod_fini+0x2188>
    268c:	ldr	x0, [sp, #40]
    2690:	add	x0, x0, #0x4
    2694:	ldr	w1, [sp, #36]
    2698:	mov	w2, w1
    269c:	mov	x1, x0
    26a0:	ldr	x0, [sp, #40]
    26a4:	bl	0 <grub_encode_utf8_character>
    26a8:	ldp	x29, x30, [sp], #48
    26ac:	ret
    26b0:	sub	sp, sp, #0x10
    26b4:	str	w0, [sp, #12]
    26b8:	ldr	w0, [sp, #12]
    26bc:	and	w0, w0, #0xffffff80
    26c0:	cmp	w0, #0x0
    26c4:	b.eq	26d0 <grub_mod_fini+0x21b0>  // b.none
    26c8:	mov	w0, #0xffffffff            	// #-1
    26cc:	b	26d4 <grub_mod_fini+0x21b4>
    26d0:	ldr	w0, [sp, #12]
    26d4:	add	sp, sp, #0x10
    26d8:	ret
    26dc:	stp	x29, x30, [sp, #-48]!
    26e0:	mov	x29, sp
    26e4:	str	x0, [sp, #24]
    26e8:	str	wzr, [sp, #44]
    26ec:	b	2738 <grub_mod_fini+0x2218>
    26f0:	ldr	w1, [sp, #44]
    26f4:	mov	x0, x1
    26f8:	lsl	x0, x0, #2
    26fc:	add	x0, x0, x1
    2700:	lsl	x0, x0, #1
    2704:	adrp	x1, 0 <grub_mod_init-0x450>
    2708:	add	x1, x1, #0x0
    270c:	ldr	x1, [x1]
    2710:	add	x0, x0, x1
    2714:	ldr	x1, [sp, #24]
    2718:	bl	0 <grub_strcmp>
    271c:	cmp	w0, #0x0
    2720:	b.ne	272c <grub_mod_fini+0x220c>  // b.any
    2724:	ldr	w0, [sp, #44]
    2728:	b	2748 <grub_mod_fini+0x2228>
    272c:	ldr	w0, [sp, #44]
    2730:	add	w0, w0, #0x1
    2734:	str	w0, [sp, #44]
    2738:	ldr	w0, [sp, #44]
    273c:	cmp	w0, #0xc
    2740:	b.ls	26f0 <grub_mod_fini+0x21d0>  // b.plast
    2744:	mov	w0, #0x0                   	// #0
    2748:	ldp	x29, x30, [sp], #48
    274c:	ret
	...
    2758:	stp	x29, x30, [sp, #-32]!
    275c:	mov	x29, sp
    2760:	str	w0, [sp, #28]
    2764:	ldr	w0, [sp, #28]
    2768:	bl	1e24 <grub_mod_fini+0x1904>
    276c:	ldp	x29, x30, [sp], #32
    2770:	ret
    2774:	stp	x29, x30, [sp, #-32]!
    2778:	mov	x29, sp
    277c:	str	w0, [sp, #28]
    2780:	ldr	w0, [sp, #28]
    2784:	bl	1f58 <grub_mod_fini+0x1a38>
    2788:	ldp	x29, x30, [sp], #32
    278c:	ret
    2790:	stp	x29, x30, [sp, #-32]!
    2794:	mov	x29, sp
    2798:	str	w0, [sp, #28]
    279c:	ldr	w0, [sp, #28]
    27a0:	bl	1f90 <grub_mod_fini+0x1a70>
    27a4:	ldp	x29, x30, [sp], #32
    27a8:	ret
    27ac:	stp	x29, x30, [sp, #-32]!
    27b0:	mov	x29, sp
    27b4:	str	w0, [sp, #28]
    27b8:	ldr	w0, [sp, #28]
    27bc:	bl	1dd8 <grub_mod_fini+0x18b8>
    27c0:	cmp	w0, #0x0
    27c4:	b.ne	27d8 <grub_mod_fini+0x22b8>  // b.any
    27c8:	ldr	w0, [sp, #28]
    27cc:	bl	1ec0 <grub_mod_fini+0x19a0>
    27d0:	cmp	w0, #0x0
    27d4:	b.eq	27e0 <grub_mod_fini+0x22c0>  // b.none
    27d8:	mov	w0, #0x1                   	// #1
    27dc:	b	27e4 <grub_mod_fini+0x22c4>
    27e0:	mov	w0, #0x0                   	// #0
    27e4:	ldp	x29, x30, [sp], #32
    27e8:	ret
    27ec:	stp	x29, x30, [sp, #-32]!
    27f0:	mov	x29, sp
    27f4:	str	w0, [sp, #28]
    27f8:	str	w1, [sp, #24]
    27fc:	ldr	w0, [sp, #24]
    2800:	cmp	w0, #0xc
    2804:	b.eq	29dc <grub_mod_fini+0x24bc>  // b.none
    2808:	ldr	w0, [sp, #24]
    280c:	cmp	w0, #0xc
    2810:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    2814:	ldr	w0, [sp, #24]
    2818:	cmp	w0, #0xb
    281c:	b.eq	299c <grub_mod_fini+0x247c>  // b.none
    2820:	ldr	w0, [sp, #24]
    2824:	cmp	w0, #0xb
    2828:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    282c:	ldr	w0, [sp, #24]
    2830:	cmp	w0, #0xa
    2834:	b.eq	2990 <grub_mod_fini+0x2470>  // b.none
    2838:	ldr	w0, [sp, #24]
    283c:	cmp	w0, #0xa
    2840:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    2844:	ldr	w0, [sp, #24]
    2848:	cmp	w0, #0x9
    284c:	b.eq	2968 <grub_mod_fini+0x2448>  // b.none
    2850:	ldr	w0, [sp, #24]
    2854:	cmp	w0, #0x9
    2858:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    285c:	ldr	w0, [sp, #24]
    2860:	cmp	w0, #0x8
    2864:	b.eq	295c <grub_mod_fini+0x243c>  // b.none
    2868:	ldr	w0, [sp, #24]
    286c:	cmp	w0, #0x8
    2870:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    2874:	ldr	w0, [sp, #24]
    2878:	cmp	w0, #0x7
    287c:	b.eq	2950 <grub_mod_fini+0x2430>  // b.none
    2880:	ldr	w0, [sp, #24]
    2884:	cmp	w0, #0x7
    2888:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    288c:	ldr	w0, [sp, #24]
    2890:	cmp	w0, #0x6
    2894:	b.eq	2944 <grub_mod_fini+0x2424>  // b.none
    2898:	ldr	w0, [sp, #24]
    289c:	cmp	w0, #0x6
    28a0:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    28a4:	ldr	w0, [sp, #24]
    28a8:	cmp	w0, #0x5
    28ac:	b.eq	2938 <grub_mod_fini+0x2418>  // b.none
    28b0:	ldr	w0, [sp, #24]
    28b4:	cmp	w0, #0x5
    28b8:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    28bc:	ldr	w0, [sp, #24]
    28c0:	cmp	w0, #0x4
    28c4:	b.eq	292c <grub_mod_fini+0x240c>  // b.none
    28c8:	ldr	w0, [sp, #24]
    28cc:	cmp	w0, #0x4
    28d0:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    28d4:	ldr	w0, [sp, #24]
    28d8:	cmp	w0, #0x3
    28dc:	b.eq	2920 <grub_mod_fini+0x2400>  // b.none
    28e0:	ldr	w0, [sp, #24]
    28e4:	cmp	w0, #0x3
    28e8:	b.hi	29e8 <grub_mod_fini+0x24c8>  // b.pmore
    28ec:	ldr	w0, [sp, #24]
    28f0:	cmp	w0, #0x1
    28f4:	b.eq	2908 <grub_mod_fini+0x23e8>  // b.none
    28f8:	ldr	w0, [sp, #24]
    28fc:	cmp	w0, #0x2
    2900:	b.eq	2914 <grub_mod_fini+0x23f4>  // b.none
    2904:	b	29e8 <grub_mod_fini+0x24c8>
    2908:	ldr	w0, [sp, #28]
    290c:	bl	27ac <grub_mod_fini+0x228c>
    2910:	b	29ec <grub_mod_fini+0x24cc>
    2914:	ldr	w0, [sp, #28]
    2918:	bl	1d98 <grub_mod_fini+0x1878>
    291c:	b	29ec <grub_mod_fini+0x24cc>
    2920:	ldr	w0, [sp, #28]
    2924:	bl	2758 <grub_mod_fini+0x2238>
    2928:	b	29ec <grub_mod_fini+0x24cc>
    292c:	ldr	w0, [sp, #28]
    2930:	bl	0 <grub_isspace>
    2934:	b	29ec <grub_mod_fini+0x24cc>
    2938:	ldr	w0, [sp, #28]
    293c:	bl	1dd8 <grub_mod_fini+0x18b8>
    2940:	b	29ec <grub_mod_fini+0x24cc>
    2944:	ldr	w0, [sp, #28]
    2948:	bl	1ec0 <grub_mod_fini+0x19a0>
    294c:	b	29ec <grub_mod_fini+0x24cc>
    2950:	ldr	w0, [sp, #28]
    2954:	bl	1d64 <grub_mod_fini+0x1844>
    2958:	b	29ec <grub_mod_fini+0x24cc>
    295c:	ldr	w0, [sp, #28]
    2960:	bl	1e58 <grub_mod_fini+0x1938>
    2964:	b	29ec <grub_mod_fini+0x24cc>
    2968:	ldr	w0, [sp, #28]
    296c:	cmp	w0, #0x20
    2970:	b.eq	2980 <grub_mod_fini+0x2460>  // b.none
    2974:	ldr	w0, [sp, #28]
    2978:	cmp	w0, #0x9
    297c:	b.ne	2988 <grub_mod_fini+0x2468>  // b.any
    2980:	mov	w0, #0x1                   	// #1
    2984:	b	29ec <grub_mod_fini+0x24cc>
    2988:	mov	w0, #0x0                   	// #0
    298c:	b	29ec <grub_mod_fini+0x24cc>
    2990:	ldr	w0, [sp, #28]
    2994:	bl	1e8c <grub_mod_fini+0x196c>
    2998:	b	29ec <grub_mod_fini+0x24cc>
    299c:	ldr	w0, [sp, #28]
    29a0:	bl	1d64 <grub_mod_fini+0x1844>
    29a4:	cmp	w0, #0x0
    29a8:	b.eq	29d4 <grub_mod_fini+0x24b4>  // b.none
    29ac:	ldr	w0, [sp, #28]
    29b0:	bl	0 <grub_isspace>
    29b4:	cmp	w0, #0x0
    29b8:	b.ne	29d4 <grub_mod_fini+0x24b4>  // b.any
    29bc:	ldr	w0, [sp, #28]
    29c0:	bl	27ac <grub_mod_fini+0x228c>
    29c4:	cmp	w0, #0x0
    29c8:	b.ne	29d4 <grub_mod_fini+0x24b4>  // b.any
    29cc:	mov	w0, #0x1                   	// #1
    29d0:	b	29ec <grub_mod_fini+0x24cc>
    29d4:	mov	w0, #0x0                   	// #0
    29d8:	b	29ec <grub_mod_fini+0x24cc>
    29dc:	ldr	w0, [sp, #28]
    29e0:	bl	1ef4 <grub_mod_fini+0x19d4>
    29e4:	b	29ec <grub_mod_fini+0x24cc>
    29e8:	mov	w0, #0x0                   	// #0
    29ec:	ldp	x29, x30, [sp], #32
    29f0:	ret
    29f4:	sub	sp, sp, #0x10
    29f8:	str	x0, [sp, #8]
    29fc:	str	w1, [sp, #4]
    2a00:	ldr	w0, [sp, #4]
    2a04:	add	w1, w0, #0x3f
    2a08:	cmp	w0, #0x0
    2a0c:	csel	w0, w1, w0, lt  // lt = tstop
    2a10:	asr	w0, w0, #6
    2a14:	mov	w3, w0
    2a18:	sxtw	x0, w3
    2a1c:	lsl	x0, x0, #3
    2a20:	ldr	x1, [sp, #8]
    2a24:	add	x0, x1, x0
    2a28:	ldr	x2, [x0]
    2a2c:	ldr	w0, [sp, #4]
    2a30:	negs	w1, w0
    2a34:	and	w0, w0, #0x3f
    2a38:	and	w1, w1, #0x3f
    2a3c:	csneg	w0, w0, w1, mi  // mi = first
    2a40:	mov	x1, #0x1                   	// #1
    2a44:	lsl	x1, x1, x0
    2a48:	sxtw	x0, w3
    2a4c:	lsl	x0, x0, #3
    2a50:	ldr	x3, [sp, #8]
    2a54:	add	x0, x3, x0
    2a58:	orr	x1, x2, x1
    2a5c:	str	x1, [x0]
    2a60:	nop
    2a64:	add	sp, sp, #0x10
    2a68:	ret
    2a6c:	sub	sp, sp, #0x10
    2a70:	str	x0, [sp, #8]
    2a74:	str	w1, [sp, #4]
    2a78:	ldr	w0, [sp, #4]
    2a7c:	add	w1, w0, #0x3f
    2a80:	cmp	w0, #0x0
    2a84:	csel	w0, w1, w0, lt  // lt = tstop
    2a88:	asr	w0, w0, #6
    2a8c:	mov	w3, w0
    2a90:	sxtw	x0, w3
    2a94:	lsl	x0, x0, #3
    2a98:	ldr	x1, [sp, #8]
    2a9c:	add	x0, x1, x0
    2aa0:	ldr	x2, [x0]
    2aa4:	ldr	w0, [sp, #4]
    2aa8:	negs	w1, w0
    2aac:	and	w0, w0, #0x3f
    2ab0:	and	w1, w1, #0x3f
    2ab4:	csneg	w0, w0, w1, mi  // mi = first
    2ab8:	mov	x1, #0x1                   	// #1
    2abc:	lsl	x0, x1, x0
    2ac0:	mvn	x1, x0
    2ac4:	sxtw	x0, w3
    2ac8:	lsl	x0, x0, #3
    2acc:	ldr	x3, [sp, #8]
    2ad0:	add	x0, x3, x0
    2ad4:	and	x1, x2, x1
    2ad8:	str	x1, [x0]
    2adc:	nop
    2ae0:	add	sp, sp, #0x10
    2ae4:	ret
    2ae8:	sub	sp, sp, #0x10
    2aec:	str	x0, [sp, #8]
    2af0:	str	w1, [sp, #4]
    2af4:	ldr	w0, [sp, #4]
    2af8:	add	w1, w0, #0x3f
    2afc:	cmp	w0, #0x0
    2b00:	csel	w0, w1, w0, lt  // lt = tstop
    2b04:	asr	w0, w0, #6
    2b08:	sxtw	x0, w0
    2b0c:	lsl	x0, x0, #3
    2b10:	ldr	x1, [sp, #8]
    2b14:	add	x0, x1, x0
    2b18:	ldr	x1, [x0]
    2b1c:	ldr	w0, [sp, #4]
    2b20:	negs	w2, w0
    2b24:	and	w0, w0, #0x3f
    2b28:	and	w2, w2, #0x3f
    2b2c:	csneg	w0, w0, w2, mi  // mi = first
    2b30:	lsr	x0, x1, x0
    2b34:	and	x0, x0, #0x1
    2b38:	cmp	x0, #0x0
    2b3c:	cset	w0, ne  // ne = any
    2b40:	and	w0, w0, #0xff
    2b44:	add	sp, sp, #0x10
    2b48:	ret
    2b4c:	stp	x29, x30, [sp, #-32]!
    2b50:	mov	x29, sp
    2b54:	str	x0, [sp, #24]
    2b58:	mov	x2, #0x20                  	// #32
    2b5c:	mov	w1, #0x0                   	// #0
    2b60:	ldr	x0, [sp, #24]
    2b64:	bl	0 <grub_memset>
    2b68:	nop
    2b6c:	ldp	x29, x30, [sp], #32
    2b70:	ret
    2b74:	stp	x29, x30, [sp, #-32]!
    2b78:	mov	x29, sp
    2b7c:	str	x0, [sp, #24]
    2b80:	mov	x2, #0x20                  	// #32
    2b84:	mov	w1, #0xffffffff            	// #-1
    2b88:	ldr	x0, [sp, #24]
    2b8c:	bl	0 <grub_memset>
    2b90:	nop
    2b94:	ldp	x29, x30, [sp], #32
    2b98:	ret
    2b9c:	stp	x29, x30, [sp, #-32]!
    2ba0:	mov	x29, sp
    2ba4:	str	x0, [sp, #24]
    2ba8:	str	x1, [sp, #16]
    2bac:	mov	x2, #0x20                  	// #32
    2bb0:	ldr	x1, [sp, #16]
    2bb4:	ldr	x0, [sp, #24]
    2bb8:	bl	1d38 <grub_mod_fini+0x1818>
    2bbc:	nop
    2bc0:	ldp	x29, x30, [sp], #32
    2bc4:	ret
    2bc8:	sub	sp, sp, #0x20
    2bcc:	str	x0, [sp, #8]
    2bd0:	str	wzr, [sp, #28]
    2bd4:	b	2c10 <grub_mod_fini+0x26f0>
    2bd8:	ldrsw	x0, [sp, #28]
    2bdc:	lsl	x0, x0, #3
    2be0:	ldr	x1, [sp, #8]
    2be4:	add	x0, x1, x0
    2be8:	ldr	x1, [x0]
    2bec:	ldrsw	x0, [sp, #28]
    2bf0:	lsl	x0, x0, #3
    2bf4:	ldr	x2, [sp, #8]
    2bf8:	add	x0, x2, x0
    2bfc:	mvn	x1, x1
    2c00:	str	x1, [x0]
    2c04:	ldr	w0, [sp, #28]
    2c08:	add	w0, w0, #0x1
    2c0c:	str	w0, [sp, #28]
    2c10:	ldr	w0, [sp, #28]
    2c14:	cmp	w0, #0x3
    2c18:	b.le	2bd8 <grub_mod_fini+0x26b8>
    2c1c:	nop
    2c20:	nop
    2c24:	add	sp, sp, #0x20
    2c28:	ret
    2c2c:	sub	sp, sp, #0x20
    2c30:	str	x0, [sp, #8]
    2c34:	str	x1, [sp]
    2c38:	str	wzr, [sp, #28]
    2c3c:	b	2c8c <grub_mod_fini+0x276c>
    2c40:	ldrsw	x0, [sp, #28]
    2c44:	lsl	x0, x0, #3
    2c48:	ldr	x1, [sp, #8]
    2c4c:	add	x0, x1, x0
    2c50:	ldr	x2, [x0]
    2c54:	ldrsw	x0, [sp, #28]
    2c58:	lsl	x0, x0, #3
    2c5c:	ldr	x1, [sp]
    2c60:	add	x0, x1, x0
    2c64:	ldr	x1, [x0]
    2c68:	ldrsw	x0, [sp, #28]
    2c6c:	lsl	x0, x0, #3
    2c70:	ldr	x3, [sp, #8]
    2c74:	add	x0, x3, x0
    2c78:	orr	x1, x2, x1
    2c7c:	str	x1, [x0]
    2c80:	ldr	w0, [sp, #28]
    2c84:	add	w0, w0, #0x1
    2c88:	str	w0, [sp, #28]
    2c8c:	ldr	w0, [sp, #28]
    2c90:	cmp	w0, #0x3
    2c94:	b.le	2c40 <grub_mod_fini+0x2720>
    2c98:	nop
    2c9c:	nop
    2ca0:	add	sp, sp, #0x20
    2ca4:	ret
    2ca8:	sub	sp, sp, #0x20
    2cac:	str	x0, [sp, #8]
    2cb0:	str	x1, [sp]
    2cb4:	str	wzr, [sp, #28]
    2cb8:	b	2d08 <grub_mod_fini+0x27e8>
    2cbc:	ldrsw	x0, [sp, #28]
    2cc0:	lsl	x0, x0, #3
    2cc4:	ldr	x1, [sp, #8]
    2cc8:	add	x0, x1, x0
    2ccc:	ldr	x2, [x0]
    2cd0:	ldrsw	x0, [sp, #28]
    2cd4:	lsl	x0, x0, #3
    2cd8:	ldr	x1, [sp]
    2cdc:	add	x0, x1, x0
    2ce0:	ldr	x1, [x0]
    2ce4:	ldrsw	x0, [sp, #28]
    2ce8:	lsl	x0, x0, #3
    2cec:	ldr	x3, [sp, #8]
    2cf0:	add	x0, x3, x0
    2cf4:	and	x1, x2, x1
    2cf8:	str	x1, [x0]
    2cfc:	ldr	w0, [sp, #28]
    2d00:	add	w0, w0, #0x1
    2d04:	str	w0, [sp, #28]
    2d08:	ldr	w0, [sp, #28]
    2d0c:	cmp	w0, #0x3
    2d10:	b.le	2cbc <grub_mod_fini+0x279c>
    2d14:	nop
    2d18:	nop
    2d1c:	add	sp, sp, #0x20
    2d20:	ret
    2d24:	sub	sp, sp, #0x20
    2d28:	str	x0, [sp, #8]
    2d2c:	str	w1, [sp, #4]
    2d30:	ldr	x0, [sp, #8]
    2d34:	ldr	w0, [x0, #104]
    2d38:	cmp	w0, #0x1
    2d3c:	b.ne	2d48 <grub_mod_fini+0x2828>  // b.any
    2d40:	mov	w0, #0x1                   	// #1
    2d44:	b	2db4 <grub_mod_fini+0x2894>
    2d48:	mov	w0, #0x1                   	// #1
    2d4c:	str	w0, [sp, #28]
    2d50:	b	2d8c <grub_mod_fini+0x286c>
    2d54:	ldr	x0, [sp, #8]
    2d58:	ldr	x1, [x0, #16]
    2d5c:	ldr	w2, [sp, #4]
    2d60:	ldr	w0, [sp, #28]
    2d64:	add	w0, w2, w0
    2d68:	sxtw	x0, w0
    2d6c:	lsl	x0, x0, #2
    2d70:	add	x0, x1, x0
    2d74:	ldr	w0, [x0]
    2d78:	cmn	w0, #0x1
    2d7c:	b.ne	2dac <grub_mod_fini+0x288c>  // b.any
    2d80:	ldr	w0, [sp, #28]
    2d84:	add	w0, w0, #0x1
    2d88:	str	w0, [sp, #28]
    2d8c:	ldr	w1, [sp, #4]
    2d90:	ldr	w0, [sp, #28]
    2d94:	add	w1, w1, w0
    2d98:	ldr	x0, [sp, #8]
    2d9c:	ldr	w0, [x0, #44]
    2da0:	cmp	w1, w0
    2da4:	b.lt	2d54 <grub_mod_fini+0x2834>  // b.tstop
    2da8:	b	2db0 <grub_mod_fini+0x2890>
    2dac:	nop
    2db0:	ldr	w0, [sp, #28]
    2db4:	add	sp, sp, #0x20
    2db8:	ret
    2dbc:	sub	sp, sp, #0x10
    2dc0:	str	x0, [sp, #8]
    2dc4:	str	w1, [sp, #4]
    2dc8:	ldr	x0, [sp, #8]
    2dcc:	ldr	w0, [x0, #104]
    2dd0:	cmp	w0, #0x1
    2dd4:	b.ne	2df0 <grub_mod_fini+0x28d0>  // b.any
    2dd8:	ldr	x0, [sp, #8]
    2ddc:	ldr	x1, [x0, #8]
    2de0:	ldrsw	x0, [sp, #4]
    2de4:	add	x0, x1, x0
    2de8:	ldrb	w0, [x0]
    2dec:	b	2e08 <grub_mod_fini+0x28e8>
    2df0:	ldr	x0, [sp, #8]
    2df4:	ldr	x1, [x0, #16]
    2df8:	ldrsw	x0, [sp, #4]
    2dfc:	lsl	x0, x0, #2
    2e00:	add	x0, x1, x0
    2e04:	ldr	w0, [x0]
    2e08:	add	sp, sp, #0x10
    2e0c:	ret
    2e10:	sub	sp, sp, #0x10
    2e14:	str	x0, [sp, #8]
    2e18:	str	w1, [sp, #4]
    2e1c:	mov	w0, #0x1                   	// #1
    2e20:	add	sp, sp, #0x10
    2e24:	ret
    2e28:	stp	x29, x30, [sp, #-80]!
    2e2c:	mov	x29, sp
    2e30:	str	x0, [sp, #56]
    2e34:	str	x1, [sp, #48]
    2e38:	str	w2, [sp, #44]
    2e3c:	str	w3, [sp, #40]
    2e40:	str	x4, [sp, #32]
    2e44:	strb	w5, [sp, #31]
    2e48:	str	x6, [sp, #16]
    2e4c:	ldr	x0, [sp, #16]
    2e50:	ldr	w0, [x0, #164]
    2e54:	ldr	w1, [sp, #40]
    2e58:	cmp	w1, w0
    2e5c:	b.ge	2e6c <grub_mod_fini+0x294c>  // b.tcont
    2e60:	ldr	x0, [sp, #16]
    2e64:	ldr	w0, [x0, #164]
    2e68:	str	w0, [sp, #40]
    2e6c:	ldr	w0, [sp, #44]
    2e70:	add	w0, w0, #0x1
    2e74:	ldr	w2, [sp, #40]
    2e78:	ldr	w1, [sp, #40]
    2e7c:	cmp	w2, w0
    2e80:	csel	w0, w1, w0, le
    2e84:	str	w0, [sp, #76]
    2e88:	ldr	x5, [sp, #16]
    2e8c:	ldrb	w4, [sp, #31]
    2e90:	ldr	x3, [sp, #32]
    2e94:	ldr	x2, [sp, #56]
    2e98:	ldr	w1, [sp, #44]
    2e9c:	ldr	x0, [sp, #48]
    2ea0:	bl	32fc <grub_mod_fini+0x2ddc>
    2ea4:	ldr	w1, [sp, #76]
    2ea8:	ldr	x0, [sp, #56]
    2eac:	bl	3178 <grub_mod_fini+0x2c58>
    2eb0:	str	w0, [sp, #72]
    2eb4:	ldr	w0, [sp, #72]
    2eb8:	cmp	w0, #0x0
    2ebc:	cset	w0, ne  // ne = any
    2ec0:	and	w0, w0, #0xff
    2ec4:	and	x0, x0, #0xff
    2ec8:	cmp	x0, #0x0
    2ecc:	b.eq	2ed8 <grub_mod_fini+0x29b8>  // b.none
    2ed0:	ldr	w0, [sp, #72]
    2ed4:	b	2f74 <grub_mod_fini+0x2a54>
    2ed8:	ldr	x0, [sp, #16]
    2edc:	add	x1, x0, #0xa8
    2ee0:	ldr	x0, [sp, #56]
    2ee4:	str	x1, [x0, #88]
    2ee8:	ldr	x0, [sp, #16]
    2eec:	ldrb	w0, [x0, #160]
    2ef0:	ubfx	x0, x0, #4, #1
    2ef4:	and	w0, w0, #0xff
    2ef8:	mov	w1, w0
    2efc:	ldr	x0, [sp, #56]
    2f00:	strb	w1, [x0, #102]
    2f04:	ldr	x0, [sp, #56]
    2f08:	ldrb	w0, [x0, #99]
    2f0c:	cmp	w0, #0x0
    2f10:	b.eq	2f20 <grub_mod_fini+0x2a00>  // b.none
    2f14:	ldr	x0, [sp, #56]
    2f18:	ldr	x0, [x0, #8]
    2f1c:	b	2f24 <grub_mod_fini+0x2a04>
    2f20:	ldr	x0, [sp, #48]
    2f24:	ldr	x1, [sp, #56]
    2f28:	str	x0, [x1, #8]
    2f2c:	ldr	x0, [sp, #56]
    2f30:	ldrb	w0, [x0, #99]
    2f34:	cmp	w0, #0x0
    2f38:	b.ne	2f54 <grub_mod_fini+0x2a34>  // b.any
    2f3c:	ldr	x0, [sp, #16]
    2f40:	ldr	w0, [x0, #164]
    2f44:	cmp	w0, #0x1
    2f48:	b.gt	2f54 <grub_mod_fini+0x2a34>
    2f4c:	ldr	w0, [sp, #44]
    2f50:	b	2f58 <grub_mod_fini+0x2a38>
    2f54:	mov	w0, #0x0                   	// #0
    2f58:	ldr	x1, [sp, #56]
    2f5c:	str	w0, [x1, #44]
    2f60:	ldr	x0, [sp, #56]
    2f64:	ldr	w1, [x0, #44]
    2f68:	ldr	x0, [sp, #56]
    2f6c:	str	w1, [x0, #48]
    2f70:	mov	w0, #0x0                   	// #0
    2f74:	ldp	x29, x30, [sp], #80
    2f78:	ret
    2f7c:	stp	x29, x30, [sp, #-80]!
    2f80:	mov	x29, sp
    2f84:	str	x0, [sp, #56]
    2f88:	str	x1, [sp, #48]
    2f8c:	str	w2, [sp, #44]
    2f90:	str	x3, [sp, #32]
    2f94:	strb	w4, [sp, #43]
    2f98:	str	x5, [sp, #24]
    2f9c:	mov	x2, #0x70                  	// #112
    2fa0:	mov	w1, #0x0                   	// #0
    2fa4:	ldr	x0, [sp, #56]
    2fa8:	bl	0 <grub_memset>
    2fac:	ldr	x5, [sp, #24]
    2fb0:	ldrb	w4, [sp, #43]
    2fb4:	ldr	x3, [sp, #32]
    2fb8:	ldr	x2, [sp, #56]
    2fbc:	ldr	w1, [sp, #44]
    2fc0:	ldr	x0, [sp, #48]
    2fc4:	bl	32fc <grub_mod_fini+0x2ddc>
    2fc8:	ldr	w0, [sp, #44]
    2fcc:	cmp	w0, #0x0
    2fd0:	b.le	3010 <grub_mod_fini+0x2af0>
    2fd4:	ldr	w0, [sp, #44]
    2fd8:	add	w0, w0, #0x1
    2fdc:	mov	w1, w0
    2fe0:	ldr	x0, [sp, #56]
    2fe4:	bl	3178 <grub_mod_fini+0x2c58>
    2fe8:	str	w0, [sp, #76]
    2fec:	ldr	w0, [sp, #76]
    2ff0:	cmp	w0, #0x0
    2ff4:	cset	w0, ne  // ne = any
    2ff8:	and	w0, w0, #0xff
    2ffc:	and	x0, x0, #0xff
    3000:	cmp	x0, #0x0
    3004:	b.eq	3010 <grub_mod_fini+0x2af0>  // b.none
    3008:	ldr	w0, [sp, #76]
    300c:	b	3170 <grub_mod_fini+0x2c50>
    3010:	ldr	x0, [sp, #56]
    3014:	ldrb	w0, [x0, #99]
    3018:	cmp	w0, #0x0
    301c:	b.eq	302c <grub_mod_fini+0x2b0c>  // b.none
    3020:	ldr	x0, [sp, #56]
    3024:	ldr	x0, [x0, #8]
    3028:	b	3030 <grub_mod_fini+0x2b10>
    302c:	ldr	x0, [sp, #48]
    3030:	ldr	x1, [sp, #56]
    3034:	str	x0, [x1, #8]
    3038:	ldrb	w0, [sp, #43]
    303c:	cmp	w0, #0x0
    3040:	b.eq	3108 <grub_mod_fini+0x2be8>  // b.none
    3044:	ldr	x0, [sp, #24]
    3048:	ldr	w0, [x0, #164]
    304c:	cmp	w0, #0x1
    3050:	b.le	30fc <grub_mod_fini+0x2bdc>
    3054:	ldr	x0, [sp, #56]
    3058:	bl	3768 <grub_mod_fini+0x3248>
    305c:	str	w0, [sp, #76]
    3060:	ldr	w0, [sp, #76]
    3064:	cmp	w0, #0x0
    3068:	cset	w0, ne  // ne = any
    306c:	and	w0, w0, #0xff
    3070:	and	x0, x0, #0xff
    3074:	cmp	x0, #0x0
    3078:	b.eq	3084 <grub_mod_fini+0x2b64>  // b.none
    307c:	ldr	w0, [sp, #76]
    3080:	b	3170 <grub_mod_fini+0x2c50>
    3084:	ldr	x0, [sp, #56]
    3088:	ldr	w0, [x0, #48]
    308c:	ldr	w1, [sp, #44]
    3090:	cmp	w1, w0
    3094:	b.le	3160 <grub_mod_fini+0x2c40>
    3098:	ldr	x0, [sp, #56]
    309c:	ldr	w1, [x0, #52]
    30a0:	ldr	x0, [sp, #56]
    30a4:	ldr	w2, [x0, #44]
    30a8:	ldr	x0, [sp, #24]
    30ac:	ldr	w0, [x0, #164]
    30b0:	add	w0, w2, w0
    30b4:	cmp	w1, w0
    30b8:	b.gt	3168 <grub_mod_fini+0x2c48>
    30bc:	ldr	x0, [sp, #56]
    30c0:	ldr	w0, [x0, #52]
    30c4:	lsl	w0, w0, #1
    30c8:	mov	w1, w0
    30cc:	ldr	x0, [sp, #56]
    30d0:	bl	3178 <grub_mod_fini+0x2c58>
    30d4:	str	w0, [sp, #76]
    30d8:	ldr	w0, [sp, #76]
    30dc:	cmp	w0, #0x0
    30e0:	cset	w0, ne  // ne = any
    30e4:	and	w0, w0, #0xff
    30e8:	and	x0, x0, #0xff
    30ec:	cmp	x0, #0x0
    30f0:	b.eq	3054 <grub_mod_fini+0x2b34>  // b.none
    30f4:	ldr	w0, [sp, #76]
    30f8:	b	3170 <grub_mod_fini+0x2c50>
    30fc:	ldr	x0, [sp, #56]
    3100:	bl	4434 <grub_mod_fini+0x3f14>
    3104:	b	316c <grub_mod_fini+0x2c4c>
    3108:	ldr	x0, [sp, #24]
    310c:	ldr	w0, [x0, #164]
    3110:	cmp	w0, #0x1
    3114:	b.le	3124 <grub_mod_fini+0x2c04>
    3118:	ldr	x0, [sp, #56]
    311c:	bl	33f8 <grub_mod_fini+0x2ed8>
    3120:	b	316c <grub_mod_fini+0x2c4c>
    3124:	ldr	x0, [sp, #32]
    3128:	cmp	x0, #0x0
    312c:	b.eq	313c <grub_mod_fini+0x2c1c>  // b.none
    3130:	ldr	x0, [sp, #56]
    3134:	bl	4530 <grub_mod_fini+0x4010>
    3138:	b	316c <grub_mod_fini+0x2c4c>
    313c:	ldr	x0, [sp, #56]
    3140:	ldr	w1, [x0, #52]
    3144:	ldr	x0, [sp, #56]
    3148:	str	w1, [x0, #44]
    314c:	ldr	x0, [sp, #56]
    3150:	ldr	w1, [x0, #52]
    3154:	ldr	x0, [sp, #56]
    3158:	str	w1, [x0, #48]
    315c:	b	316c <grub_mod_fini+0x2c4c>
    3160:	nop
    3164:	b	316c <grub_mod_fini+0x2c4c>
    3168:	nop
    316c:	mov	w0, #0x0                   	// #0
    3170:	ldp	x29, x30, [sp], #80
    3174:	ret
    3178:	stp	x29, x30, [sp, #-64]!
    317c:	mov	x29, sp
    3180:	str	x0, [sp, #24]
    3184:	str	w1, [sp, #20]
    3188:	ldr	x0, [sp, #24]
    318c:	ldr	w0, [x0, #104]
    3190:	cmp	w0, #0x1
    3194:	b.le	3290 <grub_mod_fini+0x2d70>
    3198:	mov	x0, #0x4                   	// #4
    319c:	str	x0, [sp, #56]
    31a0:	mov	x1, #0xffffffffffffffff    	// #-1
    31a4:	ldr	x0, [sp, #56]
    31a8:	udiv	x0, x1, x0
    31ac:	mov	x2, #0x7fffffff            	// #2147483647
    31b0:	mov	x1, #0x7fffffff            	// #2147483647
    31b4:	cmp	x0, x2
    31b8:	csel	x1, x0, x1, ls  // ls = plast
    31bc:	ldrsw	x0, [sp, #20]
    31c0:	cmp	x1, x0
    31c4:	cset	w0, cc  // cc = lo, ul, last
    31c8:	and	w0, w0, #0xff
    31cc:	and	x0, x0, #0xff
    31d0:	cmp	x0, #0x0
    31d4:	b.eq	31e0 <grub_mod_fini+0x2cc0>  // b.none
    31d8:	mov	w0, #0xc                   	// #12
    31dc:	b	32f4 <grub_mod_fini+0x2dd4>
    31e0:	ldr	x0, [sp, #24]
    31e4:	ldr	x2, [x0, #16]
    31e8:	ldrsw	x0, [sp, #20]
    31ec:	lsl	x0, x0, #2
    31f0:	mov	x1, x0
    31f4:	mov	x0, x2
    31f8:	bl	2294 <grub_mod_fini+0x1d74>
    31fc:	str	x0, [sp, #48]
    3200:	ldr	x0, [sp, #48]
    3204:	cmp	x0, #0x0
    3208:	cset	w0, eq  // eq = none
    320c:	and	w0, w0, #0xff
    3210:	and	x0, x0, #0xff
    3214:	cmp	x0, #0x0
    3218:	b.eq	3224 <grub_mod_fini+0x2d04>  // b.none
    321c:	mov	w0, #0xc                   	// #12
    3220:	b	32f4 <grub_mod_fini+0x2dd4>
    3224:	ldr	x0, [sp, #24]
    3228:	ldr	x1, [sp, #48]
    322c:	str	x1, [x0, #16]
    3230:	ldr	x0, [sp, #24]
    3234:	ldr	x0, [x0, #24]
    3238:	cmp	x0, #0x0
    323c:	b.eq	3290 <grub_mod_fini+0x2d70>  // b.none
    3240:	ldr	x0, [sp, #24]
    3244:	ldr	x2, [x0, #24]
    3248:	ldrsw	x0, [sp, #20]
    324c:	lsl	x0, x0, #2
    3250:	mov	x1, x0
    3254:	mov	x0, x2
    3258:	bl	2294 <grub_mod_fini+0x1d74>
    325c:	str	x0, [sp, #40]
    3260:	ldr	x0, [sp, #40]
    3264:	cmp	x0, #0x0
    3268:	cset	w0, eq  // eq = none
    326c:	and	w0, w0, #0xff
    3270:	and	x0, x0, #0xff
    3274:	cmp	x0, #0x0
    3278:	b.eq	3284 <grub_mod_fini+0x2d64>  // b.none
    327c:	mov	w0, #0xc                   	// #12
    3280:	b	32f4 <grub_mod_fini+0x2dd4>
    3284:	ldr	x0, [sp, #24]
    3288:	ldr	x1, [sp, #40]
    328c:	str	x1, [x0, #24]
    3290:	ldr	x0, [sp, #24]
    3294:	ldrb	w0, [x0, #99]
    3298:	cmp	w0, #0x0
    329c:	b.eq	32e4 <grub_mod_fini+0x2dc4>  // b.none
    32a0:	ldr	x0, [sp, #24]
    32a4:	ldr	x0, [x0, #8]
    32a8:	ldrsw	x1, [sp, #20]
    32ac:	bl	2294 <grub_mod_fini+0x1d74>
    32b0:	str	x0, [sp, #32]
    32b4:	ldr	x0, [sp, #32]
    32b8:	cmp	x0, #0x0
    32bc:	cset	w0, eq  // eq = none
    32c0:	and	w0, w0, #0xff
    32c4:	and	x0, x0, #0xff
    32c8:	cmp	x0, #0x0
    32cc:	b.eq	32d8 <grub_mod_fini+0x2db8>  // b.none
    32d0:	mov	w0, #0xc                   	// #12
    32d4:	b	32f4 <grub_mod_fini+0x2dd4>
    32d8:	ldr	x0, [sp, #24]
    32dc:	ldr	x1, [sp, #32]
    32e0:	str	x1, [x0, #8]
    32e4:	ldr	x0, [sp, #24]
    32e8:	ldr	w1, [sp, #20]
    32ec:	str	w1, [x0, #52]
    32f0:	mov	w0, #0x0                   	// #0
    32f4:	ldp	x29, x30, [sp], #64
    32f8:	ret
    32fc:	sub	sp, sp, #0x30
    3300:	str	x0, [sp, #40]
    3304:	str	w1, [sp, #36]
    3308:	str	x2, [sp, #24]
    330c:	str	x3, [sp, #16]
    3310:	strb	w4, [sp, #35]
    3314:	str	x5, [sp, #8]
    3318:	ldr	x0, [sp, #24]
    331c:	ldr	x1, [sp, #40]
    3320:	str	x1, [x0]
    3324:	ldr	x0, [sp, #24]
    3328:	ldr	w1, [sp, #36]
    332c:	str	w1, [x0, #64]
    3330:	ldr	x0, [sp, #24]
    3334:	ldr	w1, [sp, #36]
    3338:	str	w1, [x0, #60]
    333c:	ldr	x0, [sp, #24]
    3340:	ldr	x1, [sp, #16]
    3344:	str	x1, [x0, #80]
    3348:	ldrb	w1, [sp, #35]
    334c:	ldr	x0, [sp, #24]
    3350:	strb	w1, [x0, #96]
    3354:	ldr	x0, [sp, #16]
    3358:	cmp	x0, #0x0
    335c:	b.ne	336c <grub_mod_fini+0x2e4c>  // b.any
    3360:	ldrb	w0, [sp, #35]
    3364:	cmp	w0, #0x0
    3368:	b.eq	3374 <grub_mod_fini+0x2e54>  // b.none
    336c:	mov	w0, #0x1                   	// #1
    3370:	b	3378 <grub_mod_fini+0x2e58>
    3374:	mov	w0, #0x0                   	// #0
    3378:	and	w1, w0, #0xff
    337c:	ldr	x0, [sp, #24]
    3380:	strb	w1, [x0, #99]
    3384:	ldr	x0, [sp, #8]
    3388:	ldr	w1, [x0, #164]
    338c:	ldr	x0, [sp, #24]
    3390:	str	w1, [x0, #104]
    3394:	ldr	x0, [sp, #8]
    3398:	ldrb	w0, [x0, #160]
    339c:	ubfx	x0, x0, #2, #1
    33a0:	and	w0, w0, #0xff
    33a4:	mov	w1, w0
    33a8:	ldr	x0, [sp, #24]
    33ac:	strb	w1, [x0, #97]
    33b0:	ldr	x0, [sp, #8]
    33b4:	ldrb	w0, [x0, #160]
    33b8:	ubfx	x0, x0, #3, #1
    33bc:	and	w0, w0, #0xff
    33c0:	mov	w1, w0
    33c4:	ldr	x0, [sp, #24]
    33c8:	strb	w1, [x0, #98]
    33cc:	ldr	x0, [sp, #24]
    33d0:	ldr	w1, [x0, #64]
    33d4:	ldr	x0, [sp, #24]
    33d8:	str	w1, [x0, #72]
    33dc:	ldr	x0, [sp, #24]
    33e0:	ldr	w1, [x0, #72]
    33e4:	ldr	x0, [sp, #24]
    33e8:	str	w1, [x0, #68]
    33ec:	nop
    33f0:	add	sp, sp, #0x30
    33f4:	ret
    33f8:	stp	x29, x30, [sp, #-160]!
    33fc:	mov	x29, sp
    3400:	str	x0, [sp, #24]
    3404:	ldr	x0, [sp, #24]
    3408:	ldr	w1, [x0, #52]
    340c:	ldr	x0, [sp, #24]
    3410:	ldr	w0, [x0, #64]
    3414:	cmp	w1, w0
    3418:	csel	w0, w1, w0, le
    341c:	str	w0, [sp, #128]
    3420:	ldr	x0, [sp, #24]
    3424:	ldr	w0, [x0, #44]
    3428:	str	w0, [sp, #156]
    342c:	b	3734 <grub_mod_fini+0x3214>
    3430:	ldr	w1, [sp, #128]
    3434:	ldr	w0, [sp, #156]
    3438:	sub	w0, w1, w0
    343c:	str	w0, [sp, #124]
    3440:	ldr	x0, [sp, #24]
    3444:	ldr	x0, [x0, #32]
    3448:	str	x0, [sp, #48]
    344c:	ldr	x0, [sp, #24]
    3450:	ldr	x0, [x0, #80]
    3454:	cmp	x0, #0x0
    3458:	cset	w0, ne  // ne = any
    345c:	and	w0, w0, #0xff
    3460:	and	x0, x0, #0xff
    3464:	cmp	x0, #0x0
    3468:	b.eq	3524 <grub_mod_fini+0x3004>  // b.none
    346c:	str	wzr, [sp, #132]
    3470:	b	34f4 <grub_mod_fini+0x2fd4>
    3474:	ldr	x0, [sp, #24]
    3478:	ldr	x1, [x0]
    347c:	ldr	x0, [sp, #24]
    3480:	ldr	w2, [x0, #40]
    3484:	ldr	w0, [sp, #156]
    3488:	add	w2, w2, w0
    348c:	ldr	w0, [sp, #132]
    3490:	add	w0, w2, w0
    3494:	sxtw	x0, w0
    3498:	add	x0, x1, x0
    349c:	ldrb	w0, [x0]
    34a0:	str	w0, [sp, #120]
    34a4:	ldr	x0, [sp, #24]
    34a8:	ldr	x1, [x0, #80]
    34ac:	ldrsw	x0, [sp, #120]
    34b0:	add	x1, x1, x0
    34b4:	ldr	x0, [sp, #24]
    34b8:	ldr	x2, [x0, #8]
    34bc:	ldr	w3, [sp, #156]
    34c0:	ldr	w0, [sp, #132]
    34c4:	add	w0, w3, w0
    34c8:	sxtw	x0, w0
    34cc:	add	x0, x2, x0
    34d0:	ldrb	w1, [x1]
    34d4:	strb	w1, [x0]
    34d8:	ldrb	w2, [x0]
    34dc:	ldrsw	x0, [sp, #132]
    34e0:	add	x1, sp, #0x38
    34e4:	strb	w2, [x1, x0]
    34e8:	ldr	w0, [sp, #132]
    34ec:	add	w0, w0, #0x1
    34f0:	str	w0, [sp, #132]
    34f4:	ldr	x0, [sp, #24]
    34f8:	ldr	w0, [x0, #104]
    34fc:	ldr	w1, [sp, #132]
    3500:	cmp	w1, w0
    3504:	b.ge	3518 <grub_mod_fini+0x2ff8>  // b.tcont
    3508:	ldr	w1, [sp, #132]
    350c:	ldr	w0, [sp, #124]
    3510:	cmp	w1, w0
    3514:	b.lt	3474 <grub_mod_fini+0x2f54>  // b.tstop
    3518:	add	x0, sp, #0x38
    351c:	str	x0, [sp, #136]
    3520:	b	3548 <grub_mod_fini+0x3028>
    3524:	ldr	x0, [sp, #24]
    3528:	ldr	x1, [x0]
    352c:	ldr	x0, [sp, #24]
    3530:	ldr	w0, [x0, #40]
    3534:	sxtw	x2, w0
    3538:	ldrsw	x0, [sp, #156]
    353c:	add	x0, x2, x0
    3540:	add	x0, x1, x0
    3544:	str	x0, [sp, #136]
    3548:	ldrsw	x1, [sp, #124]
    354c:	ldr	x0, [sp, #24]
    3550:	add	x2, x0, #0x20
    3554:	add	x0, sp, #0x2c
    3558:	mov	x3, x2
    355c:	mov	x2, x1
    3560:	ldr	x1, [sp, #136]
    3564:	bl	2514 <grub_mod_fini+0x1ff4>
    3568:	str	x0, [sp, #144]
    356c:	ldr	x0, [sp, #144]
    3570:	cmn	x0, #0x1
    3574:	cset	w0, eq  // eq = none
    3578:	and	w0, w0, #0xff
    357c:	and	x0, x0, #0xff
    3580:	cmp	x0, #0x0
    3584:	b.ne	35a4 <grub_mod_fini+0x3084>  // b.any
    3588:	ldr	x0, [sp, #144]
    358c:	cmp	x0, #0x0
    3590:	cset	w0, eq  // eq = none
    3594:	and	w0, w0, #0xff
    3598:	and	x0, x0, #0xff
    359c:	cmp	x0, #0x0
    35a0:	b.eq	35ac <grub_mod_fini+0x308c>  // b.none
    35a4:	mov	w0, #0x1                   	// #1
    35a8:	b	35b0 <grub_mod_fini+0x3090>
    35ac:	mov	w0, #0x0                   	// #0
    35b0:	cmp	w0, #0x0
    35b4:	b.ne	3610 <grub_mod_fini+0x30f0>  // b.any
    35b8:	ldr	x0, [sp, #144]
    35bc:	cmn	x0, #0x2
    35c0:	cset	w0, eq  // eq = none
    35c4:	and	w0, w0, #0xff
    35c8:	and	x0, x0, #0xff
    35cc:	cmp	x0, #0x0
    35d0:	b.eq	3604 <grub_mod_fini+0x30e4>  // b.none
    35d4:	ldr	x0, [sp, #24]
    35d8:	ldr	w1, [x0, #52]
    35dc:	ldr	x0, [sp, #24]
    35e0:	ldr	w0, [x0, #64]
    35e4:	cmp	w1, w0
    35e8:	cset	w0, ge  // ge = tcont
    35ec:	and	w0, w0, #0xff
    35f0:	and	x0, x0, #0xff
    35f4:	cmp	x0, #0x0
    35f8:	b.eq	3604 <grub_mod_fini+0x30e4>  // b.none
    35fc:	mov	w0, #0x1                   	// #1
    3600:	b	3608 <grub_mod_fini+0x30e8>
    3604:	mov	w0, #0x0                   	// #0
    3608:	cmp	w0, #0x0
    360c:	b.eq	368c <grub_mod_fini+0x316c>  // b.none
    3610:	mov	x0, #0x1                   	// #1
    3614:	str	x0, [sp, #144]
    3618:	ldr	x0, [sp, #24]
    361c:	ldr	x1, [x0]
    3620:	ldr	x0, [sp, #24]
    3624:	ldr	w2, [x0, #40]
    3628:	ldr	w0, [sp, #156]
    362c:	add	w0, w2, w0
    3630:	sxtw	x0, w0
    3634:	add	x0, x1, x0
    3638:	ldrb	w0, [x0]
    363c:	str	w0, [sp, #44]
    3640:	ldr	x0, [sp, #24]
    3644:	ldr	x0, [x0, #80]
    3648:	cmp	x0, #0x0
    364c:	cset	w0, ne  // ne = any
    3650:	and	w0, w0, #0xff
    3654:	and	x0, x0, #0xff
    3658:	cmp	x0, #0x0
    365c:	b.eq	367c <grub_mod_fini+0x315c>  // b.none
    3660:	ldr	x0, [sp, #24]
    3664:	ldr	x1, [x0, #80]
    3668:	ldr	w0, [sp, #44]
    366c:	sxtw	x0, w0
    3670:	add	x0, x1, x0
    3674:	ldrb	w0, [x0]
    3678:	str	w0, [sp, #44]
    367c:	ldr	x0, [sp, #24]
    3680:	ldr	x1, [sp, #48]
    3684:	str	x1, [x0, #32]
    3688:	b	36b8 <grub_mod_fini+0x3198>
    368c:	ldr	x0, [sp, #144]
    3690:	cmn	x0, #0x2
    3694:	cset	w0, eq  // eq = none
    3698:	and	w0, w0, #0xff
    369c:	and	x0, x0, #0xff
    36a0:	cmp	x0, #0x0
    36a4:	b.eq	36b8 <grub_mod_fini+0x3198>  // b.none
    36a8:	ldr	x0, [sp, #24]
    36ac:	ldr	x1, [sp, #48]
    36b0:	str	x1, [x0, #32]
    36b4:	b	3744 <grub_mod_fini+0x3224>
    36b8:	ldr	x0, [sp, #24]
    36bc:	ldr	x1, [x0, #16]
    36c0:	ldr	w0, [sp, #156]
    36c4:	add	w2, w0, #0x1
    36c8:	str	w2, [sp, #156]
    36cc:	sxtw	x0, w0
    36d0:	lsl	x0, x0, #2
    36d4:	add	x0, x1, x0
    36d8:	ldr	w1, [sp, #44]
    36dc:	str	w1, [x0]
    36e0:	ldr	x0, [sp, #144]
    36e4:	mov	w1, w0
    36e8:	ldr	w0, [sp, #156]
    36ec:	add	w0, w1, w0
    36f0:	sub	w0, w0, #0x1
    36f4:	str	w0, [sp, #124]
    36f8:	b	3724 <grub_mod_fini+0x3204>
    36fc:	ldr	x0, [sp, #24]
    3700:	ldr	x1, [x0, #16]
    3704:	ldr	w0, [sp, #156]
    3708:	add	w2, w0, #0x1
    370c:	str	w2, [sp, #156]
    3710:	sxtw	x0, w0
    3714:	lsl	x0, x0, #2
    3718:	add	x0, x1, x0
    371c:	mov	w1, #0xffffffff            	// #-1
    3720:	str	w1, [x0]
    3724:	ldr	w1, [sp, #156]
    3728:	ldr	w0, [sp, #124]
    372c:	cmp	w1, w0
    3730:	b.lt	36fc <grub_mod_fini+0x31dc>  // b.tstop
    3734:	ldr	w1, [sp, #156]
    3738:	ldr	w0, [sp, #128]
    373c:	cmp	w1, w0
    3740:	b.lt	3430 <grub_mod_fini+0x2f10>  // b.tstop
    3744:	ldr	x0, [sp, #24]
    3748:	ldr	w1, [sp, #156]
    374c:	str	w1, [x0, #44]
    3750:	ldr	x0, [sp, #24]
    3754:	ldr	w1, [sp, #156]
    3758:	str	w1, [x0, #48]
    375c:	nop
    3760:	ldp	x29, x30, [sp], #160
    3764:	ret
    3768:	stp	x29, x30, [sp, #-224]!
    376c:	mov	x29, sp
    3770:	str	x0, [sp, #24]
    3774:	ldr	x0, [sp, #24]
    3778:	ldr	w0, [x0, #44]
    377c:	str	w0, [sp, #216]
    3780:	ldr	x0, [sp, #24]
    3784:	ldr	w1, [x0, #52]
    3788:	ldr	x0, [sp, #24]
    378c:	ldr	w0, [x0, #64]
    3790:	cmp	w1, w0
    3794:	csel	w0, w1, w0, le
    3798:	str	w0, [sp, #212]
    379c:	ldr	x0, [sp, #24]
    37a0:	ldrb	w0, [x0, #98]
    37a4:	cmp	w0, #0x0
    37a8:	b.ne	3b7c <grub_mod_fini+0x365c>  // b.any
    37ac:	ldr	x0, [sp, #24]
    37b0:	ldr	x0, [x0, #80]
    37b4:	cmp	x0, #0x0
    37b8:	b.ne	3b7c <grub_mod_fini+0x365c>  // b.any
    37bc:	ldr	x0, [sp, #24]
    37c0:	ldrb	w0, [x0, #100]
    37c4:	cmp	w0, #0x0
    37c8:	b.ne	3b7c <grub_mod_fini+0x365c>  // b.any
    37cc:	b	3b4c <grub_mod_fini+0x362c>
    37d0:	ldr	x0, [sp, #24]
    37d4:	ldr	x1, [x0]
    37d8:	ldr	x0, [sp, #24]
    37dc:	ldr	w2, [x0, #40]
    37e0:	ldr	w0, [sp, #216]
    37e4:	add	w0, w2, w0
    37e8:	sxtw	x0, w0
    37ec:	add	x0, x1, x0
    37f0:	ldrb	w0, [x0]
    37f4:	bl	2088 <grub_mod_fini+0x1b68>
    37f8:	cmp	w0, #0x0
    37fc:	b.eq	3898 <grub_mod_fini+0x3378>  // b.none
    3800:	ldr	x0, [sp, #24]
    3804:	add	x0, x0, #0x20
    3808:	bl	2640 <grub_mod_fini+0x2120>
    380c:	cmp	w0, #0x0
    3810:	b.eq	3898 <grub_mod_fini+0x3378>  // b.none
    3814:	ldr	x0, [sp, #24]
    3818:	ldr	x1, [x0]
    381c:	ldr	x0, [sp, #24]
    3820:	ldr	w2, [x0, #40]
    3824:	ldr	w0, [sp, #216]
    3828:	add	w0, w2, w0
    382c:	sxtw	x0, w0
    3830:	add	x0, x1, x0
    3834:	ldrb	w0, [x0]
    3838:	bl	2018 <grub_mod_fini+0x1af8>
    383c:	mov	w2, w0
    3840:	ldr	x0, [sp, #24]
    3844:	ldr	x1, [x0, #8]
    3848:	ldrsw	x0, [sp, #216]
    384c:	add	x0, x1, x0
    3850:	and	w1, w2, #0xff
    3854:	strb	w1, [x0]
    3858:	ldr	x0, [sp, #24]
    385c:	ldr	x1, [x0, #8]
    3860:	ldrsw	x0, [sp, #216]
    3864:	add	x0, x1, x0
    3868:	ldrb	w2, [x0]
    386c:	ldr	x0, [sp, #24]
    3870:	ldr	x1, [x0, #16]
    3874:	ldrsw	x0, [sp, #216]
    3878:	lsl	x0, x0, #2
    387c:	add	x0, x1, x0
    3880:	mov	w1, w2
    3884:	str	w1, [x0]
    3888:	ldr	w0, [sp, #216]
    388c:	add	w0, w0, #0x1
    3890:	str	w0, [sp, #216]
    3894:	b	3b4c <grub_mod_fini+0x362c>
    3898:	ldr	w1, [sp, #212]
    389c:	ldr	w0, [sp, #216]
    38a0:	sub	w0, w1, w0
    38a4:	str	w0, [sp, #168]
    38a8:	ldr	x0, [sp, #24]
    38ac:	ldr	x0, [x0, #32]
    38b0:	str	x0, [sp, #112]
    38b4:	ldr	x0, [sp, #24]
    38b8:	ldr	x1, [x0]
    38bc:	ldr	x0, [sp, #24]
    38c0:	ldr	w0, [x0, #40]
    38c4:	sxtw	x2, w0
    38c8:	ldrsw	x0, [sp, #216]
    38cc:	add	x0, x2, x0
    38d0:	add	x1, x1, x0
    38d4:	ldrsw	x2, [sp, #168]
    38d8:	ldr	x0, [sp, #24]
    38dc:	add	x3, x0, #0x20
    38e0:	add	x0, sp, #0x2c
    38e4:	bl	2514 <grub_mod_fini+0x1ff4>
    38e8:	str	x0, [sp, #160]
    38ec:	ldr	x0, [sp, #160]
    38f0:	cmp	x0, #0x0
    38f4:	cset	w0, ne  // ne = any
    38f8:	and	w0, w0, #0xff
    38fc:	and	x0, x0, #0xff
    3900:	cmp	x0, #0x0
    3904:	b.eq	3a64 <grub_mod_fini+0x3544>  // b.none
    3908:	ldr	x0, [sp, #160]
    390c:	cmn	x0, #0x3
    3910:	cset	w0, ls  // ls = plast
    3914:	and	w0, w0, #0xff
    3918:	and	x0, x0, #0xff
    391c:	cmp	x0, #0x0
    3920:	b.eq	3a64 <grub_mod_fini+0x3544>  // b.none
    3924:	ldr	w0, [sp, #44]
    3928:	bl	2790 <grub_mod_fini+0x2270>
    392c:	str	w0, [sp, #156]
    3930:	ldr	w0, [sp, #44]
    3934:	ldr	w1, [sp, #156]
    3938:	cmp	w1, w0
    393c:	b.eq	39a4 <grub_mod_fini+0x3484>  // b.none
    3940:	add	x1, sp, #0x70
    3944:	add	x0, sp, #0x30
    3948:	mov	x2, x1
    394c:	ldr	w1, [sp, #156]
    3950:	bl	2664 <grub_mod_fini+0x2144>
    3954:	str	x0, [sp, #144]
    3958:	ldr	x1, [sp, #160]
    395c:	ldr	x0, [sp, #144]
    3960:	cmp	x1, x0
    3964:	cset	w0, eq  // eq = none
    3968:	and	w0, w0, #0xff
    396c:	and	x0, x0, #0xff
    3970:	cmp	x0, #0x0
    3974:	b.eq	3998 <grub_mod_fini+0x3478>  // b.none
    3978:	ldr	x0, [sp, #24]
    397c:	ldr	x1, [x0, #8]
    3980:	ldrsw	x0, [sp, #216]
    3984:	add	x0, x1, x0
    3988:	add	x1, sp, #0x30
    398c:	ldr	x2, [sp, #160]
    3990:	bl	1d38 <grub_mod_fini+0x1818>
    3994:	b	39e4 <grub_mod_fini+0x34c4>
    3998:	ldr	w0, [sp, #216]
    399c:	str	w0, [sp, #220]
    39a0:	b	3b90 <grub_mod_fini+0x3670>
    39a4:	ldr	x0, [sp, #24]
    39a8:	ldr	x1, [x0, #8]
    39ac:	ldrsw	x0, [sp, #216]
    39b0:	add	x3, x1, x0
    39b4:	ldr	x0, [sp, #24]
    39b8:	ldr	x1, [x0]
    39bc:	ldr	x0, [sp, #24]
    39c0:	ldr	w0, [x0, #40]
    39c4:	sxtw	x2, w0
    39c8:	ldrsw	x0, [sp, #216]
    39cc:	add	x0, x2, x0
    39d0:	add	x0, x1, x0
    39d4:	ldr	x2, [sp, #160]
    39d8:	mov	x1, x0
    39dc:	mov	x0, x3
    39e0:	bl	1d38 <grub_mod_fini+0x1818>
    39e4:	ldr	x0, [sp, #24]
    39e8:	ldr	x1, [x0, #16]
    39ec:	ldr	w0, [sp, #216]
    39f0:	add	w2, w0, #0x1
    39f4:	str	w2, [sp, #216]
    39f8:	sxtw	x0, w0
    39fc:	lsl	x0, x0, #2
    3a00:	add	x0, x1, x0
    3a04:	ldr	w1, [sp, #156]
    3a08:	str	w1, [x0]
    3a0c:	ldr	x0, [sp, #160]
    3a10:	mov	w1, w0
    3a14:	ldr	w0, [sp, #216]
    3a18:	add	w0, w1, w0
    3a1c:	sub	w0, w0, #0x1
    3a20:	str	w0, [sp, #168]
    3a24:	b	3a50 <grub_mod_fini+0x3530>
    3a28:	ldr	x0, [sp, #24]
    3a2c:	ldr	x1, [x0, #16]
    3a30:	ldr	w0, [sp, #216]
    3a34:	add	w2, w0, #0x1
    3a38:	str	w2, [sp, #216]
    3a3c:	sxtw	x0, w0
    3a40:	lsl	x0, x0, #2
    3a44:	add	x0, x1, x0
    3a48:	mov	w1, #0xffffffff            	// #-1
    3a4c:	str	w1, [x0]
    3a50:	ldr	w1, [sp, #216]
    3a54:	ldr	w0, [sp, #168]
    3a58:	cmp	w1, w0
    3a5c:	b.lt	3a28 <grub_mod_fini+0x3508>  // b.tstop
    3a60:	b	3b4c <grub_mod_fini+0x362c>
    3a64:	ldr	x0, [sp, #160]
    3a68:	cmn	x0, #0x1
    3a6c:	b.eq	3aa0 <grub_mod_fini+0x3580>  // b.none
    3a70:	ldr	x0, [sp, #160]
    3a74:	cmp	x0, #0x0
    3a78:	b.eq	3aa0 <grub_mod_fini+0x3580>  // b.none
    3a7c:	ldr	x0, [sp, #160]
    3a80:	cmn	x0, #0x2
    3a84:	b.ne	3b38 <grub_mod_fini+0x3618>  // b.any
    3a88:	ldr	x0, [sp, #24]
    3a8c:	ldr	w1, [x0, #52]
    3a90:	ldr	x0, [sp, #24]
    3a94:	ldr	w0, [x0, #64]
    3a98:	cmp	w1, w0
    3a9c:	b.lt	3b38 <grub_mod_fini+0x3618>  // b.tstop
    3aa0:	ldr	x0, [sp, #24]
    3aa4:	ldr	x1, [x0]
    3aa8:	ldr	x0, [sp, #24]
    3aac:	ldr	w2, [x0, #40]
    3ab0:	ldr	w0, [sp, #216]
    3ab4:	add	w0, w2, w0
    3ab8:	sxtw	x0, w0
    3abc:	add	x0, x1, x0
    3ac0:	ldrb	w0, [x0]
    3ac4:	str	w0, [sp, #140]
    3ac8:	ldr	x0, [sp, #24]
    3acc:	ldr	x1, [x0, #8]
    3ad0:	ldrsw	x0, [sp, #216]
    3ad4:	add	x0, x1, x0
    3ad8:	ldr	w1, [sp, #140]
    3adc:	and	w1, w1, #0xff
    3ae0:	strb	w1, [x0]
    3ae4:	ldr	x0, [sp, #24]
    3ae8:	ldr	x1, [x0, #16]
    3aec:	ldr	w0, [sp, #216]
    3af0:	add	w2, w0, #0x1
    3af4:	str	w2, [sp, #216]
    3af8:	sxtw	x0, w0
    3afc:	lsl	x0, x0, #2
    3b00:	add	x0, x1, x0
    3b04:	ldr	w1, [sp, #140]
    3b08:	str	w1, [x0]
    3b0c:	ldr	x0, [sp, #160]
    3b10:	cmn	x0, #0x1
    3b14:	cset	w0, eq  // eq = none
    3b18:	and	w0, w0, #0xff
    3b1c:	and	x0, x0, #0xff
    3b20:	cmp	x0, #0x0
    3b24:	b.eq	3b48 <grub_mod_fini+0x3628>  // b.none
    3b28:	ldr	x0, [sp, #24]
    3b2c:	ldr	x1, [sp, #112]
    3b30:	str	x1, [x0, #32]
    3b34:	b	3b48 <grub_mod_fini+0x3628>
    3b38:	ldr	x0, [sp, #24]
    3b3c:	ldr	x1, [sp, #112]
    3b40:	str	x1, [x0, #32]
    3b44:	b	3b5c <grub_mod_fini+0x363c>
    3b48:	nop
    3b4c:	ldr	w1, [sp, #216]
    3b50:	ldr	w0, [sp, #212]
    3b54:	cmp	w1, w0
    3b58:	b.lt	37d0 <grub_mod_fini+0x32b0>  // b.tstop
    3b5c:	ldr	x0, [sp, #24]
    3b60:	ldr	w1, [sp, #216]
    3b64:	str	w1, [x0, #44]
    3b68:	ldr	x0, [sp, #24]
    3b6c:	ldr	w1, [sp, #216]
    3b70:	str	w1, [x0, #48]
    3b74:	mov	w0, #0x0                   	// #0
    3b78:	b	42b0 <grub_mod_fini+0x3d90>
    3b7c:	ldr	x0, [sp, #24]
    3b80:	ldr	w0, [x0, #48]
    3b84:	str	w0, [sp, #220]
    3b88:	b	4284 <grub_mod_fini+0x3d64>
    3b8c:	nop
    3b90:	ldr	w1, [sp, #212]
    3b94:	ldr	w0, [sp, #216]
    3b98:	sub	w0, w1, w0
    3b9c:	str	w0, [sp, #168]
    3ba0:	ldr	x0, [sp, #24]
    3ba4:	ldr	x0, [x0, #32]
    3ba8:	str	x0, [sp, #112]
    3bac:	ldr	x0, [sp, #24]
    3bb0:	ldr	x0, [x0, #80]
    3bb4:	cmp	x0, #0x0
    3bb8:	cset	w0, ne  // ne = any
    3bbc:	and	w0, w0, #0xff
    3bc0:	and	x0, x0, #0xff
    3bc4:	cmp	x0, #0x0
    3bc8:	b.eq	3c60 <grub_mod_fini+0x3740>  // b.none
    3bcc:	str	wzr, [sp, #196]
    3bd0:	b	3c30 <grub_mod_fini+0x3710>
    3bd4:	ldr	x0, [sp, #24]
    3bd8:	ldr	x1, [x0]
    3bdc:	ldr	x0, [sp, #24]
    3be0:	ldr	w2, [x0, #40]
    3be4:	ldr	w0, [sp, #220]
    3be8:	add	w2, w2, w0
    3bec:	ldr	w0, [sp, #196]
    3bf0:	add	w0, w2, w0
    3bf4:	sxtw	x0, w0
    3bf8:	add	x0, x1, x0
    3bfc:	ldrb	w0, [x0]
    3c00:	str	w0, [sp, #136]
    3c04:	ldr	x0, [sp, #24]
    3c08:	ldr	x1, [x0, #80]
    3c0c:	ldrsw	x0, [sp, #136]
    3c10:	add	x0, x1, x0
    3c14:	ldrb	w2, [x0]
    3c18:	ldrsw	x0, [sp, #196]
    3c1c:	add	x1, sp, #0x30
    3c20:	strb	w2, [x1, x0]
    3c24:	ldr	w0, [sp, #196]
    3c28:	add	w0, w0, #0x1
    3c2c:	str	w0, [sp, #196]
    3c30:	ldr	x0, [sp, #24]
    3c34:	ldr	w0, [x0, #104]
    3c38:	ldr	w1, [sp, #196]
    3c3c:	cmp	w1, w0
    3c40:	b.ge	3c54 <grub_mod_fini+0x3734>  // b.tcont
    3c44:	ldr	w1, [sp, #196]
    3c48:	ldr	w0, [sp, #168]
    3c4c:	cmp	w1, w0
    3c50:	b.lt	3bd4 <grub_mod_fini+0x36b4>  // b.tstop
    3c54:	add	x0, sp, #0x30
    3c58:	str	x0, [sp, #200]
    3c5c:	b	3c84 <grub_mod_fini+0x3764>
    3c60:	ldr	x0, [sp, #24]
    3c64:	ldr	x1, [x0]
    3c68:	ldr	x0, [sp, #24]
    3c6c:	ldr	w0, [x0, #40]
    3c70:	sxtw	x2, w0
    3c74:	ldrsw	x0, [sp, #220]
    3c78:	add	x0, x2, x0
    3c7c:	add	x0, x1, x0
    3c80:	str	x0, [sp, #200]
    3c84:	ldrsw	x1, [sp, #168]
    3c88:	ldr	x0, [sp, #24]
    3c8c:	add	x2, x0, #0x20
    3c90:	add	x0, sp, #0x28
    3c94:	mov	x3, x2
    3c98:	mov	x2, x1
    3c9c:	ldr	x1, [sp, #200]
    3ca0:	bl	2514 <grub_mod_fini+0x1ff4>
    3ca4:	str	x0, [sp, #160]
    3ca8:	ldr	x0, [sp, #160]
    3cac:	cmp	x0, #0x0
    3cb0:	cset	w0, ne  // ne = any
    3cb4:	and	w0, w0, #0xff
    3cb8:	and	x0, x0, #0xff
    3cbc:	cmp	x0, #0x0
    3cc0:	b.eq	411c <grub_mod_fini+0x3bfc>  // b.none
    3cc4:	ldr	x0, [sp, #160]
    3cc8:	cmn	x0, #0x3
    3ccc:	cset	w0, ls  // ls = plast
    3cd0:	and	w0, w0, #0xff
    3cd4:	and	x0, x0, #0xff
    3cd8:	cmp	x0, #0x0
    3cdc:	b.eq	411c <grub_mod_fini+0x3bfc>  // b.none
    3ce0:	ldr	w0, [sp, #40]
    3ce4:	bl	2790 <grub_mod_fini+0x2270>
    3ce8:	str	w0, [sp, #132]
    3cec:	ldr	w0, [sp, #40]
    3cf0:	ldr	w1, [sp, #132]
    3cf4:	cmp	w1, w0
    3cf8:	b.eq	3ff4 <grub_mod_fini+0x3ad4>  // b.none
    3cfc:	add	x1, sp, #0x70
    3d00:	add	x0, sp, #0x30
    3d04:	mov	x2, x1
    3d08:	ldr	w1, [sp, #132]
    3d0c:	bl	2664 <grub_mod_fini+0x2144>
    3d10:	str	x0, [sp, #120]
    3d14:	ldr	x1, [sp, #160]
    3d18:	ldr	x0, [sp, #120]
    3d1c:	cmp	x1, x0
    3d20:	cset	w0, eq  // eq = none
    3d24:	and	w0, w0, #0xff
    3d28:	and	x0, x0, #0xff
    3d2c:	cmp	x0, #0x0
    3d30:	b.eq	3d54 <grub_mod_fini+0x3834>  // b.none
    3d34:	ldr	x0, [sp, #24]
    3d38:	ldr	x1, [x0, #8]
    3d3c:	ldrsw	x0, [sp, #216]
    3d40:	add	x0, x1, x0
    3d44:	add	x1, sp, #0x30
    3d48:	ldr	x2, [sp, #160]
    3d4c:	bl	1d38 <grub_mod_fini+0x1818>
    3d50:	b	4010 <grub_mod_fini+0x3af0>
    3d54:	ldr	x0, [sp, #120]
    3d58:	cmn	x0, #0x1
    3d5c:	b.eq	3fd4 <grub_mod_fini+0x3ab4>  // b.none
    3d60:	ldrsw	x1, [sp, #216]
    3d64:	ldr	x0, [sp, #120]
    3d68:	add	x1, x1, x0
    3d6c:	ldr	x0, [sp, #24]
    3d70:	ldr	w0, [x0, #52]
    3d74:	sxtw	x0, w0
    3d78:	cmp	x1, x0
    3d7c:	b.ls	3d90 <grub_mod_fini+0x3870>  // b.plast
    3d80:	ldr	x0, [sp, #24]
    3d84:	ldr	x1, [sp, #112]
    3d88:	str	x1, [x0, #32]
    3d8c:	b	4294 <grub_mod_fini+0x3d74>
    3d90:	ldr	x0, [sp, #24]
    3d94:	ldr	x0, [x0, #24]
    3d98:	cmp	x0, #0x0
    3d9c:	b.ne	3dd8 <grub_mod_fini+0x38b8>  // b.any
    3da0:	ldr	x0, [sp, #24]
    3da4:	ldr	w0, [x0, #52]
    3da8:	sxtw	x0, w0
    3dac:	lsl	x0, x0, #2
    3db0:	bl	2250 <grub_mod_fini+0x1d30>
    3db4:	mov	x1, x0
    3db8:	ldr	x0, [sp, #24]
    3dbc:	str	x1, [x0, #24]
    3dc0:	ldr	x0, [sp, #24]
    3dc4:	ldr	x0, [x0, #24]
    3dc8:	cmp	x0, #0x0
    3dcc:	b.ne	3dd8 <grub_mod_fini+0x38b8>  // b.any
    3dd0:	mov	w0, #0xc                   	// #12
    3dd4:	b	42b0 <grub_mod_fini+0x3d90>
    3dd8:	ldr	x0, [sp, #24]
    3ddc:	ldrb	w0, [x0, #100]
    3de0:	cmp	w0, #0x0
    3de4:	b.ne	3e34 <grub_mod_fini+0x3914>  // b.any
    3de8:	str	xzr, [sp, #184]
    3dec:	b	3e18 <grub_mod_fini+0x38f8>
    3df0:	ldr	x0, [sp, #24]
    3df4:	ldr	x1, [x0, #24]
    3df8:	ldr	x0, [sp, #184]
    3dfc:	lsl	x0, x0, #2
    3e00:	add	x0, x1, x0
    3e04:	ldr	x1, [sp, #184]
    3e08:	str	w1, [x0]
    3e0c:	ldr	x0, [sp, #184]
    3e10:	add	x0, x0, #0x1
    3e14:	str	x0, [sp, #184]
    3e18:	ldrsw	x0, [sp, #216]
    3e1c:	ldr	x1, [sp, #184]
    3e20:	cmp	x1, x0
    3e24:	b.cc	3df0 <grub_mod_fini+0x38d0>  // b.lo, b.ul, b.last
    3e28:	ldr	x0, [sp, #24]
    3e2c:	mov	w1, #0x1                   	// #1
    3e30:	strb	w1, [x0, #100]
    3e34:	ldr	x0, [sp, #24]
    3e38:	ldr	x1, [x0, #8]
    3e3c:	ldrsw	x0, [sp, #216]
    3e40:	add	x0, x1, x0
    3e44:	add	x1, sp, #0x30
    3e48:	ldr	x2, [sp, #120]
    3e4c:	bl	1d38 <grub_mod_fini+0x1818>
    3e50:	ldr	x0, [sp, #24]
    3e54:	ldr	x1, [x0, #16]
    3e58:	ldrsw	x0, [sp, #216]
    3e5c:	lsl	x0, x0, #2
    3e60:	add	x0, x1, x0
    3e64:	ldr	w1, [sp, #132]
    3e68:	str	w1, [x0]
    3e6c:	ldr	x0, [sp, #24]
    3e70:	ldr	x1, [x0, #24]
    3e74:	ldrsw	x0, [sp, #216]
    3e78:	lsl	x0, x0, #2
    3e7c:	add	x0, x1, x0
    3e80:	ldr	w1, [sp, #220]
    3e84:	str	w1, [x0]
    3e88:	mov	x0, #0x1                   	// #1
    3e8c:	str	x0, [sp, #184]
    3e90:	b	3f10 <grub_mod_fini+0x39f0>
    3e94:	ldr	x1, [sp, #184]
    3e98:	ldr	x0, [sp, #160]
    3e9c:	cmp	x1, x0
    3ea0:	b.cc	3eb0 <grub_mod_fini+0x3990>  // b.lo, b.ul, b.last
    3ea4:	ldr	x0, [sp, #160]
    3ea8:	sub	w0, w0, #0x1
    3eac:	b	3eb4 <grub_mod_fini+0x3994>
    3eb0:	ldr	x0, [sp, #184]
    3eb4:	ldr	w1, [sp, #220]
    3eb8:	add	w3, w0, w1
    3ebc:	ldr	x0, [sp, #24]
    3ec0:	ldr	x1, [x0, #24]
    3ec4:	ldrsw	x2, [sp, #216]
    3ec8:	ldr	x0, [sp, #184]
    3ecc:	add	x0, x2, x0
    3ed0:	lsl	x0, x0, #2
    3ed4:	add	x0, x1, x0
    3ed8:	mov	w1, w3
    3edc:	str	w1, [x0]
    3ee0:	ldr	x0, [sp, #24]
    3ee4:	ldr	x1, [x0, #16]
    3ee8:	ldrsw	x2, [sp, #216]
    3eec:	ldr	x0, [sp, #184]
    3ef0:	add	x0, x2, x0
    3ef4:	lsl	x0, x0, #2
    3ef8:	add	x0, x1, x0
    3efc:	mov	w1, #0xffffffff            	// #-1
    3f00:	str	w1, [x0]
    3f04:	ldr	x0, [sp, #184]
    3f08:	add	x0, x0, #0x1
    3f0c:	str	x0, [sp, #184]
    3f10:	ldr	x1, [sp, #184]
    3f14:	ldr	x0, [sp, #120]
    3f18:	cmp	x1, x0
    3f1c:	b.cc	3e94 <grub_mod_fini+0x3974>  // b.lo, b.ul, b.last
    3f20:	ldr	x0, [sp, #24]
    3f24:	ldr	w0, [x0, #64]
    3f28:	mov	w1, w0
    3f2c:	ldr	x0, [sp, #120]
    3f30:	mov	w2, w0
    3f34:	ldr	x0, [sp, #160]
    3f38:	sub	w0, w2, w0
    3f3c:	add	w0, w1, w0
    3f40:	mov	w1, w0
    3f44:	ldr	x0, [sp, #24]
    3f48:	str	w1, [x0, #64]
    3f4c:	ldr	x0, [sp, #24]
    3f50:	ldr	w0, [x0, #68]
    3f54:	ldr	w1, [sp, #220]
    3f58:	cmp	w1, w0
    3f5c:	b.ge	3f8c <grub_mod_fini+0x3a6c>  // b.tcont
    3f60:	ldr	x0, [sp, #24]
    3f64:	ldr	w0, [x0, #72]
    3f68:	mov	w1, w0
    3f6c:	ldr	x0, [sp, #120]
    3f70:	mov	w2, w0
    3f74:	ldr	x0, [sp, #160]
    3f78:	sub	w0, w2, w0
    3f7c:	add	w0, w1, w0
    3f80:	mov	w1, w0
    3f84:	ldr	x0, [sp, #24]
    3f88:	str	w1, [x0, #72]
    3f8c:	ldr	x0, [sp, #24]
    3f90:	ldr	w1, [x0, #52]
    3f94:	ldr	x0, [sp, #24]
    3f98:	ldr	w0, [x0, #64]
    3f9c:	cmp	w1, w0
    3fa0:	csel	w0, w1, w0, le
    3fa4:	str	w0, [sp, #212]
    3fa8:	ldr	x0, [sp, #120]
    3fac:	mov	w1, w0
    3fb0:	ldr	w0, [sp, #216]
    3fb4:	add	w0, w1, w0
    3fb8:	str	w0, [sp, #216]
    3fbc:	ldr	x0, [sp, #160]
    3fc0:	mov	w1, w0
    3fc4:	ldr	w0, [sp, #220]
    3fc8:	add	w0, w1, w0
    3fcc:	str	w0, [sp, #220]
    3fd0:	b	4284 <grub_mod_fini+0x3d64>
    3fd4:	ldr	x0, [sp, #24]
    3fd8:	ldr	x1, [x0, #8]
    3fdc:	ldrsw	x0, [sp, #216]
    3fe0:	add	x0, x1, x0
    3fe4:	ldr	x2, [sp, #160]
    3fe8:	ldr	x1, [sp, #200]
    3fec:	bl	1d38 <grub_mod_fini+0x1818>
    3ff0:	b	4010 <grub_mod_fini+0x3af0>
    3ff4:	ldr	x0, [sp, #24]
    3ff8:	ldr	x1, [x0, #8]
    3ffc:	ldrsw	x0, [sp, #216]
    4000:	add	x0, x1, x0
    4004:	ldr	x2, [sp, #160]
    4008:	ldr	x1, [sp, #200]
    400c:	bl	1d38 <grub_mod_fini+0x1818>
    4010:	ldr	x0, [sp, #24]
    4014:	ldrb	w0, [x0, #100]
    4018:	cmp	w0, #0x0
    401c:	cset	w0, ne  // ne = any
    4020:	and	w0, w0, #0xff
    4024:	and	x0, x0, #0xff
    4028:	cmp	x0, #0x0
    402c:	b.eq	4088 <grub_mod_fini+0x3b68>  // b.none
    4030:	str	xzr, [sp, #176]
    4034:	b	4078 <grub_mod_fini+0x3b58>
    4038:	ldr	x0, [sp, #176]
    403c:	mov	w1, w0
    4040:	ldr	w0, [sp, #220]
    4044:	add	w3, w1, w0
    4048:	ldr	x0, [sp, #24]
    404c:	ldr	x1, [x0, #24]
    4050:	ldrsw	x2, [sp, #216]
    4054:	ldr	x0, [sp, #176]
    4058:	add	x0, x2, x0
    405c:	lsl	x0, x0, #2
    4060:	add	x0, x1, x0
    4064:	mov	w1, w3
    4068:	str	w1, [x0]
    406c:	ldr	x0, [sp, #176]
    4070:	add	x0, x0, #0x1
    4074:	str	x0, [sp, #176]
    4078:	ldr	x1, [sp, #176]
    407c:	ldr	x0, [sp, #160]
    4080:	cmp	x1, x0
    4084:	b.cc	4038 <grub_mod_fini+0x3b18>  // b.lo, b.ul, b.last
    4088:	ldr	x0, [sp, #160]
    408c:	mov	w1, w0
    4090:	ldr	w0, [sp, #220]
    4094:	add	w0, w1, w0
    4098:	str	w0, [sp, #220]
    409c:	ldr	x0, [sp, #24]
    40a0:	ldr	x1, [x0, #16]
    40a4:	ldr	w0, [sp, #216]
    40a8:	add	w2, w0, #0x1
    40ac:	str	w2, [sp, #216]
    40b0:	sxtw	x0, w0
    40b4:	lsl	x0, x0, #2
    40b8:	add	x0, x1, x0
    40bc:	ldr	w1, [sp, #132]
    40c0:	str	w1, [x0]
    40c4:	ldr	x0, [sp, #160]
    40c8:	mov	w1, w0
    40cc:	ldr	w0, [sp, #216]
    40d0:	add	w0, w1, w0
    40d4:	sub	w0, w0, #0x1
    40d8:	str	w0, [sp, #168]
    40dc:	b	4108 <grub_mod_fini+0x3be8>
    40e0:	ldr	x0, [sp, #24]
    40e4:	ldr	x1, [x0, #16]
    40e8:	ldr	w0, [sp, #216]
    40ec:	add	w2, w0, #0x1
    40f0:	str	w2, [sp, #216]
    40f4:	sxtw	x0, w0
    40f8:	lsl	x0, x0, #2
    40fc:	add	x0, x1, x0
    4100:	mov	w1, #0xffffffff            	// #-1
    4104:	str	w1, [x0]
    4108:	ldr	w1, [sp, #216]
    410c:	ldr	w0, [sp, #168]
    4110:	cmp	w1, w0
    4114:	b.lt	40e0 <grub_mod_fini+0x3bc0>  // b.tstop
    4118:	b	4284 <grub_mod_fini+0x3d64>
    411c:	ldr	x0, [sp, #160]
    4120:	cmn	x0, #0x1
    4124:	b.eq	4158 <grub_mod_fini+0x3c38>  // b.none
    4128:	ldr	x0, [sp, #160]
    412c:	cmp	x0, #0x0
    4130:	b.eq	4158 <grub_mod_fini+0x3c38>  // b.none
    4134:	ldr	x0, [sp, #160]
    4138:	cmn	x0, #0x2
    413c:	b.ne	4270 <grub_mod_fini+0x3d50>  // b.any
    4140:	ldr	x0, [sp, #24]
    4144:	ldr	w1, [x0, #52]
    4148:	ldr	x0, [sp, #24]
    414c:	ldr	w0, [x0, #64]
    4150:	cmp	w1, w0
    4154:	b.lt	4270 <grub_mod_fini+0x3d50>  // b.tstop
    4158:	ldr	x0, [sp, #24]
    415c:	ldr	x1, [x0]
    4160:	ldr	x0, [sp, #24]
    4164:	ldr	w2, [x0, #40]
    4168:	ldr	w0, [sp, #220]
    416c:	add	w0, w2, w0
    4170:	sxtw	x0, w0
    4174:	add	x0, x1, x0
    4178:	ldrb	w0, [x0]
    417c:	str	w0, [sp, #172]
    4180:	ldr	x0, [sp, #24]
    4184:	ldr	x0, [x0, #80]
    4188:	cmp	x0, #0x0
    418c:	cset	w0, ne  // ne = any
    4190:	and	w0, w0, #0xff
    4194:	and	x0, x0, #0xff
    4198:	cmp	x0, #0x0
    419c:	b.eq	41b8 <grub_mod_fini+0x3c98>  // b.none
    41a0:	ldr	x0, [sp, #24]
    41a4:	ldr	x1, [x0, #80]
    41a8:	ldrsw	x0, [sp, #172]
    41ac:	add	x0, x1, x0
    41b0:	ldrb	w0, [x0]
    41b4:	str	w0, [sp, #172]
    41b8:	ldr	x0, [sp, #24]
    41bc:	ldr	x1, [x0, #8]
    41c0:	ldrsw	x0, [sp, #216]
    41c4:	add	x0, x1, x0
    41c8:	ldr	w1, [sp, #172]
    41cc:	and	w1, w1, #0xff
    41d0:	strb	w1, [x0]
    41d4:	ldr	x0, [sp, #24]
    41d8:	ldrb	w0, [x0, #100]
    41dc:	cmp	w0, #0x0
    41e0:	cset	w0, ne  // ne = any
    41e4:	and	w0, w0, #0xff
    41e8:	and	x0, x0, #0xff
    41ec:	cmp	x0, #0x0
    41f0:	b.eq	4210 <grub_mod_fini+0x3cf0>  // b.none
    41f4:	ldr	x0, [sp, #24]
    41f8:	ldr	x1, [x0, #24]
    41fc:	ldrsw	x0, [sp, #216]
    4200:	lsl	x0, x0, #2
    4204:	add	x0, x1, x0
    4208:	ldr	w1, [sp, #220]
    420c:	str	w1, [x0]
    4210:	ldr	w0, [sp, #220]
    4214:	add	w0, w0, #0x1
    4218:	str	w0, [sp, #220]
    421c:	ldr	x0, [sp, #24]
    4220:	ldr	x1, [x0, #16]
    4224:	ldr	w0, [sp, #216]
    4228:	add	w2, w0, #0x1
    422c:	str	w2, [sp, #216]
    4230:	sxtw	x0, w0
    4234:	lsl	x0, x0, #2
    4238:	add	x0, x1, x0
    423c:	ldr	w1, [sp, #172]
    4240:	str	w1, [x0]
    4244:	ldr	x0, [sp, #160]
    4248:	cmn	x0, #0x1
    424c:	cset	w0, eq  // eq = none
    4250:	and	w0, w0, #0xff
    4254:	and	x0, x0, #0xff
    4258:	cmp	x0, #0x0
    425c:	b.eq	4280 <grub_mod_fini+0x3d60>  // b.none
    4260:	ldr	x0, [sp, #24]
    4264:	ldr	x1, [sp, #112]
    4268:	str	x1, [x0, #32]
    426c:	b	4280 <grub_mod_fini+0x3d60>
    4270:	ldr	x0, [sp, #24]
    4274:	ldr	x1, [sp, #112]
    4278:	str	x1, [x0, #32]
    427c:	b	4294 <grub_mod_fini+0x3d74>
    4280:	nop
    4284:	ldr	w1, [sp, #216]
    4288:	ldr	w0, [sp, #212]
    428c:	cmp	w1, w0
    4290:	b.lt	3b8c <grub_mod_fini+0x366c>  // b.tstop
    4294:	ldr	x0, [sp, #24]
    4298:	ldr	w1, [sp, #216]
    429c:	str	w1, [x0, #44]
    42a0:	ldr	x0, [sp, #24]
    42a4:	ldr	w1, [sp, #220]
    42a8:	str	w1, [x0, #48]
    42ac:	mov	w0, #0x0                   	// #0
    42b0:	ldp	x29, x30, [sp], #224
    42b4:	ret
    42b8:	stp	x29, x30, [sp, #-96]!
    42bc:	mov	x29, sp
    42c0:	str	x0, [sp, #40]
    42c4:	str	w1, [sp, #36]
    42c8:	str	x2, [sp, #24]
    42cc:	mov	w0, #0xffffffff            	// #-1
    42d0:	str	w0, [sp, #76]
    42d4:	ldr	x0, [sp, #40]
    42d8:	ldr	w1, [x0, #40]
    42dc:	ldr	x0, [sp, #40]
    42e0:	ldr	w0, [x0, #48]
    42e4:	add	w0, w1, w0
    42e8:	str	w0, [sp, #92]
    42ec:	b	440c <grub_mod_fini+0x3eec>
    42f0:	ldr	x0, [sp, #40]
    42f4:	ldr	w1, [x0, #60]
    42f8:	ldr	w0, [sp, #92]
    42fc:	sub	w0, w1, w0
    4300:	str	w0, [sp, #72]
    4304:	ldr	x0, [sp, #40]
    4308:	ldr	x0, [x0, #32]
    430c:	str	x0, [sp, #64]
    4310:	ldr	x0, [sp, #40]
    4314:	ldr	x1, [x0]
    4318:	ldrsw	x0, [sp, #92]
    431c:	add	x1, x1, x0
    4320:	ldrsw	x2, [sp, #72]
    4324:	ldr	x0, [sp, #40]
    4328:	add	x3, x0, #0x20
    432c:	add	x0, sp, #0x3c
    4330:	bl	2514 <grub_mod_fini+0x1ff4>
    4334:	str	x0, [sp, #80]
    4338:	ldr	x0, [sp, #80]
    433c:	cmn	x0, #0x2
    4340:	cset	w0, eq  // eq = none
    4344:	and	w0, w0, #0xff
    4348:	and	x0, x0, #0xff
    434c:	cmp	x0, #0x0
    4350:	b.ne	4370 <grub_mod_fini+0x3e50>  // b.any
    4354:	ldr	x0, [sp, #80]
    4358:	cmn	x0, #0x1
    435c:	cset	w0, eq  // eq = none
    4360:	and	w0, w0, #0xff
    4364:	and	x0, x0, #0xff
    4368:	cmp	x0, #0x0
    436c:	b.eq	4378 <grub_mod_fini+0x3e58>  // b.none
    4370:	mov	w0, #0x1                   	// #1
    4374:	b	437c <grub_mod_fini+0x3e5c>
    4378:	mov	w0, #0x0                   	// #0
    437c:	cmp	w0, #0x0
    4380:	b.ne	43a0 <grub_mod_fini+0x3e80>  // b.any
    4384:	ldr	x0, [sp, #80]
    4388:	cmp	x0, #0x0
    438c:	cset	w0, eq  // eq = none
    4390:	and	w0, w0, #0xff
    4394:	and	x0, x0, #0xff
    4398:	cmp	x0, #0x0
    439c:	b.eq	43f0 <grub_mod_fini+0x3ed0>  // b.none
    43a0:	ldr	x0, [sp, #80]
    43a4:	cmp	x0, #0x0
    43a8:	b.eq	43b8 <grub_mod_fini+0x3e98>  // b.none
    43ac:	ldr	w0, [sp, #72]
    43b0:	cmp	w0, #0x0
    43b4:	b.ne	43c0 <grub_mod_fini+0x3ea0>  // b.any
    43b8:	str	wzr, [sp, #76]
    43bc:	b	43d8 <grub_mod_fini+0x3eb8>
    43c0:	ldr	x0, [sp, #40]
    43c4:	ldr	x1, [x0]
    43c8:	ldrsw	x0, [sp, #92]
    43cc:	add	x0, x1, x0
    43d0:	ldrb	w0, [x0]
    43d4:	str	w0, [sp, #76]
    43d8:	mov	x0, #0x1                   	// #1
    43dc:	str	x0, [sp, #80]
    43e0:	ldr	x0, [sp, #40]
    43e4:	ldr	x1, [sp, #64]
    43e8:	str	x1, [x0, #32]
    43ec:	b	43f8 <grub_mod_fini+0x3ed8>
    43f0:	ldr	w0, [sp, #60]
    43f4:	str	w0, [sp, #76]
    43f8:	ldr	x0, [sp, #80]
    43fc:	mov	w1, w0
    4400:	ldr	w0, [sp, #92]
    4404:	add	w0, w1, w0
    4408:	str	w0, [sp, #92]
    440c:	ldr	w1, [sp, #92]
    4410:	ldr	w0, [sp, #36]
    4414:	cmp	w1, w0
    4418:	b.lt	42f0 <grub_mod_fini+0x3dd0>  // b.tstop
    441c:	ldr	x0, [sp, #24]
    4420:	ldr	w1, [sp, #76]
    4424:	str	w1, [x0]
    4428:	ldr	w0, [sp, #92]
    442c:	ldp	x29, x30, [sp], #96
    4430:	ret
    4434:	stp	x29, x30, [sp, #-48]!
    4438:	mov	x29, sp
    443c:	str	x0, [sp, #24]
    4440:	ldr	x0, [sp, #24]
    4444:	ldr	w1, [x0, #52]
    4448:	ldr	x0, [sp, #24]
    444c:	ldr	w0, [x0, #64]
    4450:	cmp	w1, w0
    4454:	csel	w0, w1, w0, le
    4458:	str	w0, [sp, #36]
    445c:	ldr	x0, [sp, #24]
    4460:	ldr	w0, [x0, #44]
    4464:	str	w0, [sp, #44]
    4468:	b	44fc <grub_mod_fini+0x3fdc>
    446c:	ldr	x0, [sp, #24]
    4470:	ldr	x1, [x0]
    4474:	ldr	x0, [sp, #24]
    4478:	ldr	w2, [x0, #40]
    447c:	ldr	w0, [sp, #44]
    4480:	add	w0, w2, w0
    4484:	sxtw	x0, w0
    4488:	add	x0, x1, x0
    448c:	ldrb	w0, [x0]
    4490:	str	w0, [sp, #40]
    4494:	ldr	x0, [sp, #24]
    4498:	ldr	x0, [x0, #80]
    449c:	cmp	x0, #0x0
    44a0:	cset	w0, ne  // ne = any
    44a4:	and	w0, w0, #0xff
    44a8:	and	x0, x0, #0xff
    44ac:	cmp	x0, #0x0
    44b0:	b.eq	44cc <grub_mod_fini+0x3fac>  // b.none
    44b4:	ldr	x0, [sp, #24]
    44b8:	ldr	x1, [x0, #80]
    44bc:	ldrsw	x0, [sp, #40]
    44c0:	add	x0, x1, x0
    44c4:	ldrb	w0, [x0]
    44c8:	str	w0, [sp, #40]
    44cc:	ldr	w0, [sp, #40]
    44d0:	bl	2018 <grub_mod_fini+0x1af8>
    44d4:	mov	w2, w0
    44d8:	ldr	x0, [sp, #24]
    44dc:	ldr	x1, [x0, #8]
    44e0:	ldrsw	x0, [sp, #44]
    44e4:	add	x0, x1, x0
    44e8:	and	w1, w2, #0xff
    44ec:	strb	w1, [x0]
    44f0:	ldr	w0, [sp, #44]
    44f4:	add	w0, w0, #0x1
    44f8:	str	w0, [sp, #44]
    44fc:	ldr	w1, [sp, #44]
    4500:	ldr	w0, [sp, #36]
    4504:	cmp	w1, w0
    4508:	b.lt	446c <grub_mod_fini+0x3f4c>  // b.tstop
    450c:	ldr	x0, [sp, #24]
    4510:	ldr	w1, [sp, #44]
    4514:	str	w1, [x0, #44]
    4518:	ldr	x0, [sp, #24]
    451c:	ldr	w1, [sp, #44]
    4520:	str	w1, [x0, #48]
    4524:	nop
    4528:	ldp	x29, x30, [sp], #48
    452c:	ret
    4530:	sub	sp, sp, #0x20
    4534:	str	x0, [sp, #8]
    4538:	ldr	x0, [sp, #8]
    453c:	ldr	w1, [x0, #52]
    4540:	ldr	x0, [sp, #8]
    4544:	ldr	w0, [x0, #64]
    4548:	cmp	w1, w0
    454c:	csel	w0, w1, w0, le
    4550:	str	w0, [sp, #24]
    4554:	ldr	x0, [sp, #8]
    4558:	ldr	w0, [x0, #44]
    455c:	str	w0, [sp, #28]
    4560:	b	45c0 <grub_mod_fini+0x40a0>
    4564:	ldr	x0, [sp, #8]
    4568:	ldr	x1, [x0]
    456c:	ldr	x0, [sp, #8]
    4570:	ldr	w2, [x0, #40]
    4574:	ldr	w0, [sp, #28]
    4578:	add	w0, w2, w0
    457c:	sxtw	x0, w0
    4580:	add	x0, x1, x0
    4584:	ldrb	w0, [x0]
    4588:	str	w0, [sp, #20]
    458c:	ldr	x0, [sp, #8]
    4590:	ldr	x1, [x0, #80]
    4594:	ldrsw	x0, [sp, #20]
    4598:	add	x1, x1, x0
    459c:	ldr	x0, [sp, #8]
    45a0:	ldr	x2, [x0, #8]
    45a4:	ldrsw	x0, [sp, #28]
    45a8:	add	x0, x2, x0
    45ac:	ldrb	w1, [x1]
    45b0:	strb	w1, [x0]
    45b4:	ldr	w0, [sp, #28]
    45b8:	add	w0, w0, #0x1
    45bc:	str	w0, [sp, #28]
    45c0:	ldr	w1, [sp, #28]
    45c4:	ldr	w0, [sp, #24]
    45c8:	cmp	w1, w0
    45cc:	b.lt	4564 <grub_mod_fini+0x4044>  // b.tstop
    45d0:	ldr	x0, [sp, #8]
    45d4:	ldr	w1, [sp, #28]
    45d8:	str	w1, [x0, #44]
    45dc:	ldr	x0, [sp, #8]
    45e0:	ldr	w1, [sp, #28]
    45e4:	str	w1, [x0, #48]
    45e8:	nop
    45ec:	add	sp, sp, #0x20
    45f0:	ret
    45f4:	stp	x29, x30, [sp, #-160]!
    45f8:	mov	x29, sp
    45fc:	str	x0, [sp, #24]
    4600:	str	w1, [sp, #20]
    4604:	str	w2, [sp, #16]
    4608:	ldr	x0, [sp, #24]
    460c:	ldr	w0, [x0, #40]
    4610:	ldr	w1, [sp, #20]
    4614:	cmp	w1, w0
    4618:	cset	w0, ge  // ge = tcont
    461c:	and	w0, w0, #0xff
    4620:	and	x0, x0, #0xff
    4624:	cmp	x0, #0x0
    4628:	b.eq	4644 <grub_mod_fini+0x4124>  // b.none
    462c:	ldr	x0, [sp, #24]
    4630:	ldr	w0, [x0, #40]
    4634:	ldr	w1, [sp, #20]
    4638:	sub	w0, w1, w0
    463c:	str	w0, [sp, #156]
    4640:	b	46f4 <grub_mod_fini+0x41d4>
    4644:	ldr	x0, [sp, #24]
    4648:	ldr	w0, [x0, #104]
    464c:	cmp	w0, #0x1
    4650:	b.le	4668 <grub_mod_fini+0x4148>
    4654:	ldr	x0, [sp, #24]
    4658:	add	x0, x0, #0x20
    465c:	mov	x2, #0x8                   	// #8
    4660:	mov	w1, #0x0                   	// #0
    4664:	bl	0 <grub_memset>
    4668:	ldr	x0, [sp, #24]
    466c:	ldr	w1, [x0, #60]
    4670:	ldr	x0, [sp, #24]
    4674:	str	w1, [x0, #64]
    4678:	ldr	x0, [sp, #24]
    467c:	ldr	w1, [x0, #68]
    4680:	ldr	x0, [sp, #24]
    4684:	str	w1, [x0, #72]
    4688:	ldr	x0, [sp, #24]
    468c:	str	wzr, [x0, #44]
    4690:	ldr	x0, [sp, #24]
    4694:	str	wzr, [x0, #40]
    4698:	ldr	x0, [sp, #24]
    469c:	str	wzr, [x0, #48]
    46a0:	ldr	x0, [sp, #24]
    46a4:	strb	wzr, [x0, #100]
    46a8:	ldr	w0, [sp, #16]
    46ac:	and	w0, w0, #0x1
    46b0:	cmp	w0, #0x0
    46b4:	b.eq	46c0 <grub_mod_fini+0x41a0>  // b.none
    46b8:	mov	w0, #0x4                   	// #4
    46bc:	b	46c4 <grub_mod_fini+0x41a4>
    46c0:	mov	w0, #0x6                   	// #6
    46c4:	ldr	x1, [sp, #24]
    46c8:	str	w0, [x1, #76]
    46cc:	ldr	x0, [sp, #24]
    46d0:	ldrb	w0, [x0, #99]
    46d4:	cmp	w0, #0x0
    46d8:	b.ne	46ec <grub_mod_fini+0x41cc>  // b.any
    46dc:	ldr	x0, [sp, #24]
    46e0:	ldr	x1, [x0]
    46e4:	ldr	x0, [sp, #24]
    46e8:	str	x1, [x0, #8]
    46ec:	ldr	w0, [sp, #20]
    46f0:	str	w0, [sp, #156]
    46f4:	ldr	w0, [sp, #156]
    46f8:	cmp	w0, #0x0
    46fc:	cset	w0, ne  // ne = any
    4700:	and	w0, w0, #0xff
    4704:	and	x0, x0, #0xff
    4708:	cmp	x0, #0x0
    470c:	b.eq	514c <grub_mod_fini+0x4c2c>  // b.none
    4710:	ldr	x0, [sp, #24]
    4714:	ldr	w0, [x0, #48]
    4718:	ldr	w1, [sp, #156]
    471c:	cmp	w1, w0
    4720:	cset	w0, lt  // lt = tstop
    4724:	and	w0, w0, #0xff
    4728:	and	x0, x0, #0xff
    472c:	cmp	x0, #0x0
    4730:	b.eq	4c50 <grub_mod_fini+0x4730>  // b.none
    4734:	ldr	x0, [sp, #24]
    4738:	ldrb	w0, [x0, #100]
    473c:	and	x0, x0, #0xff
    4740:	cmp	x0, #0x0
    4744:	b.eq	4b54 <grub_mod_fini+0x4634>  // b.none
    4748:	str	wzr, [sp, #152]
    474c:	ldr	x0, [sp, #24]
    4750:	ldr	w0, [x0, #44]
    4754:	str	w0, [sp, #148]
    4758:	ldr	w1, [sp, #148]
    475c:	ldr	w0, [sp, #152]
    4760:	add	w0, w1, w0
    4764:	lsr	w1, w0, #31
    4768:	add	w0, w1, w0
    476c:	asr	w0, w0, #1
    4770:	str	w0, [sp, #144]
    4774:	ldr	x0, [sp, #24]
    4778:	ldr	x1, [x0, #24]
    477c:	ldrsw	x0, [sp, #144]
    4780:	lsl	x0, x0, #2
    4784:	add	x0, x1, x0
    4788:	ldr	w0, [x0]
    478c:	ldr	w1, [sp, #156]
    4790:	cmp	w1, w0
    4794:	b.ge	47a4 <grub_mod_fini+0x4284>  // b.tcont
    4798:	ldr	w0, [sp, #144]
    479c:	str	w0, [sp, #148]
    47a0:	b	47d4 <grub_mod_fini+0x42b4>
    47a4:	ldr	x0, [sp, #24]
    47a8:	ldr	x1, [x0, #24]
    47ac:	ldrsw	x0, [sp, #144]
    47b0:	lsl	x0, x0, #2
    47b4:	add	x0, x1, x0
    47b8:	ldr	w0, [x0]
    47bc:	ldr	w1, [sp, #156]
    47c0:	cmp	w1, w0
    47c4:	b.le	47e8 <grub_mod_fini+0x42c8>
    47c8:	ldr	w0, [sp, #144]
    47cc:	add	w0, w0, #0x1
    47d0:	str	w0, [sp, #152]
    47d4:	ldr	w1, [sp, #152]
    47d8:	ldr	w0, [sp, #148]
    47dc:	cmp	w1, w0
    47e0:	b.lt	4758 <grub_mod_fini+0x4238>  // b.tstop
    47e4:	b	47ec <grub_mod_fini+0x42cc>
    47e8:	nop
    47ec:	ldr	x0, [sp, #24]
    47f0:	ldr	x1, [x0, #24]
    47f4:	ldrsw	x0, [sp, #144]
    47f8:	lsl	x0, x0, #2
    47fc:	add	x0, x1, x0
    4800:	ldr	w0, [x0]
    4804:	ldr	w1, [sp, #156]
    4808:	cmp	w1, w0
    480c:	b.le	481c <grub_mod_fini+0x42fc>
    4810:	ldr	w0, [sp, #144]
    4814:	add	w0, w0, #0x1
    4818:	str	w0, [sp, #144]
    481c:	ldr	w0, [sp, #144]
    4820:	sub	w0, w0, #0x1
    4824:	ldr	w2, [sp, #16]
    4828:	mov	w1, w0
    482c:	ldr	x0, [sp, #24]
    4830:	bl	564c <grub_mod_fini+0x512c>
    4834:	mov	w1, w0
    4838:	ldr	x0, [sp, #24]
    483c:	str	w1, [x0, #76]
    4840:	ldr	x0, [sp, #24]
    4844:	ldr	w0, [x0, #44]
    4848:	ldr	w1, [sp, #156]
    484c:	cmp	w1, w0
    4850:	b.ge	49a8 <grub_mod_fini+0x4488>  // b.tcont
    4854:	ldr	w1, [sp, #144]
    4858:	ldr	w0, [sp, #156]
    485c:	cmp	w1, w0
    4860:	b.ne	49a8 <grub_mod_fini+0x4488>  // b.any
    4864:	ldr	x0, [sp, #24]
    4868:	ldr	x1, [x0, #24]
    486c:	ldrsw	x0, [sp, #144]
    4870:	lsl	x0, x0, #2
    4874:	add	x0, x1, x0
    4878:	ldr	w0, [x0]
    487c:	ldr	w1, [sp, #156]
    4880:	cmp	w1, w0
    4884:	b.ne	49a8 <grub_mod_fini+0x4488>  // b.any
    4888:	ldr	x0, [sp, #24]
    488c:	ldr	x3, [x0, #16]
    4890:	ldr	x0, [sp, #24]
    4894:	ldr	x1, [x0, #16]
    4898:	ldrsw	x0, [sp, #156]
    489c:	lsl	x0, x0, #2
    48a0:	add	x4, x1, x0
    48a4:	ldr	x0, [sp, #24]
    48a8:	ldr	w1, [x0, #44]
    48ac:	ldr	w0, [sp, #156]
    48b0:	sub	w0, w1, w0
    48b4:	sxtw	x0, w0
    48b8:	lsl	x0, x0, #2
    48bc:	mov	x2, x0
    48c0:	mov	x1, x4
    48c4:	mov	x0, x3
    48c8:	bl	0 <grub_memmove>
    48cc:	ldr	x0, [sp, #24]
    48d0:	ldr	x3, [x0, #8]
    48d4:	ldr	x0, [sp, #24]
    48d8:	ldr	x1, [x0, #8]
    48dc:	ldrsw	x0, [sp, #156]
    48e0:	add	x4, x1, x0
    48e4:	ldr	x0, [sp, #24]
    48e8:	ldr	w1, [x0, #44]
    48ec:	ldr	w0, [sp, #156]
    48f0:	sub	w0, w1, w0
    48f4:	sxtw	x0, w0
    48f8:	mov	x2, x0
    48fc:	mov	x1, x4
    4900:	mov	x0, x3
    4904:	bl	0 <grub_memmove>
    4908:	ldr	x0, [sp, #24]
    490c:	ldr	w1, [x0, #44]
    4910:	ldr	w0, [sp, #156]
    4914:	sub	w1, w1, w0
    4918:	ldr	x0, [sp, #24]
    491c:	str	w1, [x0, #44]
    4920:	ldr	x0, [sp, #24]
    4924:	ldr	w1, [x0, #48]
    4928:	ldr	w0, [sp, #156]
    492c:	sub	w1, w1, w0
    4930:	ldr	x0, [sp, #24]
    4934:	str	w1, [x0, #48]
    4938:	str	wzr, [sp, #152]
    493c:	b	4990 <grub_mod_fini+0x4470>
    4940:	ldr	x0, [sp, #24]
    4944:	ldr	x1, [x0, #24]
    4948:	ldr	w2, [sp, #152]
    494c:	ldr	w0, [sp, #156]
    4950:	add	w0, w2, w0
    4954:	sxtw	x0, w0
    4958:	lsl	x0, x0, #2
    495c:	add	x0, x1, x0
    4960:	ldr	w2, [x0]
    4964:	ldr	x0, [sp, #24]
    4968:	ldr	x1, [x0, #24]
    496c:	ldrsw	x0, [sp, #152]
    4970:	lsl	x0, x0, #2
    4974:	add	x0, x1, x0
    4978:	ldr	w1, [sp, #156]
    497c:	sub	w1, w2, w1
    4980:	str	w1, [x0]
    4984:	ldr	w0, [sp, #152]
    4988:	add	w0, w0, #0x1
    498c:	str	w0, [sp, #152]
    4990:	ldr	x0, [sp, #24]
    4994:	ldr	w0, [x0, #44]
    4998:	ldr	w1, [sp, #152]
    499c:	cmp	w1, w0
    49a0:	b.lt	4940 <grub_mod_fini+0x4420>  // b.tstop
    49a4:	b	5120 <grub_mod_fini+0x4c00>
    49a8:	ldr	x0, [sp, #24]
    49ac:	ldr	w1, [x0, #60]
    49b0:	ldr	w0, [sp, #20]
    49b4:	sub	w1, w1, w0
    49b8:	ldr	w0, [sp, #156]
    49bc:	add	w1, w1, w0
    49c0:	ldr	x0, [sp, #24]
    49c4:	str	w1, [x0, #64]
    49c8:	ldr	x0, [sp, #24]
    49cc:	ldr	w1, [x0, #68]
    49d0:	ldr	w0, [sp, #20]
    49d4:	sub	w1, w1, w0
    49d8:	ldr	w0, [sp, #156]
    49dc:	add	w1, w1, w0
    49e0:	ldr	x0, [sp, #24]
    49e4:	str	w1, [x0, #72]
    49e8:	ldr	x0, [sp, #24]
    49ec:	strb	wzr, [x0, #100]
    49f0:	b	4a00 <grub_mod_fini+0x44e0>
    49f4:	ldr	w0, [sp, #144]
    49f8:	sub	w0, w0, #0x1
    49fc:	str	w0, [sp, #144]
    4a00:	ldr	w0, [sp, #144]
    4a04:	cmp	w0, #0x0
    4a08:	b.le	4a64 <grub_mod_fini+0x4544>
    4a0c:	ldr	x0, [sp, #24]
    4a10:	ldr	x1, [x0, #24]
    4a14:	ldrsw	x0, [sp, #144]
    4a18:	lsl	x0, x0, #2
    4a1c:	sub	x0, x0, #0x4
    4a20:	add	x0, x1, x0
    4a24:	ldr	w0, [x0]
    4a28:	ldr	w1, [sp, #156]
    4a2c:	cmp	w1, w0
    4a30:	b.eq	49f4 <grub_mod_fini+0x44d4>  // b.none
    4a34:	b	4a64 <grub_mod_fini+0x4544>
    4a38:	ldr	x0, [sp, #24]
    4a3c:	ldr	x1, [x0, #16]
    4a40:	ldrsw	x0, [sp, #144]
    4a44:	lsl	x0, x0, #2
    4a48:	add	x0, x1, x0
    4a4c:	ldr	w0, [x0]
    4a50:	cmn	w0, #0x1
    4a54:	b.ne	4a7c <grub_mod_fini+0x455c>  // b.any
    4a58:	ldr	w0, [sp, #144]
    4a5c:	add	w0, w0, #0x1
    4a60:	str	w0, [sp, #144]
    4a64:	ldr	x0, [sp, #24]
    4a68:	ldr	w0, [x0, #44]
    4a6c:	ldr	w1, [sp, #144]
    4a70:	cmp	w1, w0
    4a74:	b.lt	4a38 <grub_mod_fini+0x4518>  // b.tstop
    4a78:	b	4a80 <grub_mod_fini+0x4560>
    4a7c:	nop
    4a80:	ldr	x0, [sp, #24]
    4a84:	ldr	w0, [x0, #44]
    4a88:	ldr	w1, [sp, #144]
    4a8c:	cmp	w1, w0
    4a90:	b.ne	4aa0 <grub_mod_fini+0x4580>  // b.any
    4a94:	ldr	x0, [sp, #24]
    4a98:	str	wzr, [x0, #44]
    4a9c:	b	4b40 <grub_mod_fini+0x4620>
    4aa0:	ldr	x0, [sp, #24]
    4aa4:	ldr	x1, [x0, #24]
    4aa8:	ldrsw	x0, [sp, #144]
    4aac:	lsl	x0, x0, #2
    4ab0:	add	x0, x1, x0
    4ab4:	ldr	w1, [x0]
    4ab8:	ldr	w0, [sp, #156]
    4abc:	sub	w1, w1, w0
    4ac0:	ldr	x0, [sp, #24]
    4ac4:	str	w1, [x0, #44]
    4ac8:	ldr	x0, [sp, #24]
    4acc:	ldr	w0, [x0, #44]
    4ad0:	cmp	w0, #0x0
    4ad4:	b.eq	4b40 <grub_mod_fini+0x4620>  // b.none
    4ad8:	str	wzr, [sp, #152]
    4adc:	b	4b08 <grub_mod_fini+0x45e8>
    4ae0:	ldr	x0, [sp, #24]
    4ae4:	ldr	x1, [x0, #16]
    4ae8:	ldrsw	x0, [sp, #152]
    4aec:	lsl	x0, x0, #2
    4af0:	add	x0, x1, x0
    4af4:	mov	w1, #0xffffffff            	// #-1
    4af8:	str	w1, [x0]
    4afc:	ldr	w0, [sp, #152]
    4b00:	add	w0, w0, #0x1
    4b04:	str	w0, [sp, #152]
    4b08:	ldr	x0, [sp, #24]
    4b0c:	ldr	w0, [x0, #44]
    4b10:	ldr	w1, [sp, #152]
    4b14:	cmp	w1, w0
    4b18:	b.lt	4ae0 <grub_mod_fini+0x45c0>  // b.tstop
    4b1c:	ldr	x0, [sp, #24]
    4b20:	ldr	x3, [x0, #8]
    4b24:	ldr	x0, [sp, #24]
    4b28:	ldr	w0, [x0, #44]
    4b2c:	sxtw	x0, w0
    4b30:	mov	x2, x0
    4b34:	mov	w1, #0xff                  	// #255
    4b38:	mov	x0, x3
    4b3c:	bl	0 <grub_memset>
    4b40:	ldr	x0, [sp, #24]
    4b44:	ldr	w1, [x0, #44]
    4b48:	ldr	x0, [sp, #24]
    4b4c:	str	w1, [x0, #48]
    4b50:	b	5120 <grub_mod_fini+0x4c00>
    4b54:	ldr	w0, [sp, #156]
    4b58:	sub	w0, w0, #0x1
    4b5c:	ldr	w2, [sp, #16]
    4b60:	mov	w1, w0
    4b64:	ldr	x0, [sp, #24]
    4b68:	bl	564c <grub_mod_fini+0x512c>
    4b6c:	mov	w1, w0
    4b70:	ldr	x0, [sp, #24]
    4b74:	str	w1, [x0, #76]
    4b78:	ldr	x0, [sp, #24]
    4b7c:	ldr	w0, [x0, #104]
    4b80:	cmp	w0, #0x1
    4b84:	b.le	4bcc <grub_mod_fini+0x46ac>
    4b88:	ldr	x0, [sp, #24]
    4b8c:	ldr	x3, [x0, #16]
    4b90:	ldr	x0, [sp, #24]
    4b94:	ldr	x1, [x0, #16]
    4b98:	ldrsw	x0, [sp, #156]
    4b9c:	lsl	x0, x0, #2
    4ba0:	add	x4, x1, x0
    4ba4:	ldr	x0, [sp, #24]
    4ba8:	ldr	w1, [x0, #44]
    4bac:	ldr	w0, [sp, #156]
    4bb0:	sub	w0, w1, w0
    4bb4:	sxtw	x0, w0
    4bb8:	lsl	x0, x0, #2
    4bbc:	mov	x2, x0
    4bc0:	mov	x1, x4
    4bc4:	mov	x0, x3
    4bc8:	bl	0 <grub_memmove>
    4bcc:	ldr	x0, [sp, #24]
    4bd0:	ldrb	w0, [x0, #99]
    4bd4:	and	x0, x0, #0xff
    4bd8:	cmp	x0, #0x0
    4bdc:	b.eq	4c1c <grub_mod_fini+0x46fc>  // b.none
    4be0:	ldr	x0, [sp, #24]
    4be4:	ldr	x3, [x0, #8]
    4be8:	ldr	x0, [sp, #24]
    4bec:	ldr	x1, [x0, #8]
    4bf0:	ldrsw	x0, [sp, #156]
    4bf4:	add	x4, x1, x0
    4bf8:	ldr	x0, [sp, #24]
    4bfc:	ldr	w1, [x0, #44]
    4c00:	ldr	w0, [sp, #156]
    4c04:	sub	w0, w1, w0
    4c08:	sxtw	x0, w0
    4c0c:	mov	x2, x0
    4c10:	mov	x1, x4
    4c14:	mov	x0, x3
    4c18:	bl	0 <grub_memmove>
    4c1c:	ldr	x0, [sp, #24]
    4c20:	ldr	w1, [x0, #44]
    4c24:	ldr	w0, [sp, #156]
    4c28:	sub	w1, w1, w0
    4c2c:	ldr	x0, [sp, #24]
    4c30:	str	w1, [x0, #44]
    4c34:	ldr	x0, [sp, #24]
    4c38:	ldr	w1, [x0, #48]
    4c3c:	ldr	w0, [sp, #156]
    4c40:	sub	w1, w1, w0
    4c44:	ldr	x0, [sp, #24]
    4c48:	str	w1, [x0, #48]
    4c4c:	b	5120 <grub_mod_fini+0x4c00>
    4c50:	ldr	x0, [sp, #24]
    4c54:	ldr	w0, [x0, #44]
    4c58:	str	w0, [sp, #100]
    4c5c:	ldr	x0, [sp, #24]
    4c60:	ldrb	w0, [x0, #100]
    4c64:	and	x0, x0, #0xff
    4c68:	cmp	x0, #0x0
    4c6c:	b.eq	4cb8 <grub_mod_fini+0x4798>  // b.none
    4c70:	ldr	x0, [sp, #24]
    4c74:	ldr	w1, [x0, #60]
    4c78:	ldr	w0, [sp, #20]
    4c7c:	sub	w1, w1, w0
    4c80:	ldr	w0, [sp, #156]
    4c84:	add	w1, w1, w0
    4c88:	ldr	x0, [sp, #24]
    4c8c:	str	w1, [x0, #64]
    4c90:	ldr	x0, [sp, #24]
    4c94:	ldr	w1, [x0, #68]
    4c98:	ldr	w0, [sp, #20]
    4c9c:	sub	w1, w1, w0
    4ca0:	ldr	w0, [sp, #156]
    4ca4:	add	w1, w1, w0
    4ca8:	ldr	x0, [sp, #24]
    4cac:	str	w1, [x0, #72]
    4cb0:	ldr	x0, [sp, #24]
    4cb4:	strb	wzr, [x0, #100]
    4cb8:	ldr	x0, [sp, #24]
    4cbc:	str	wzr, [x0, #44]
    4cc0:	ldr	x0, [sp, #24]
    4cc4:	ldr	w0, [x0, #104]
    4cc8:	cmp	w0, #0x1
    4ccc:	b.le	5070 <grub_mod_fini+0x4b50>
    4cd0:	mov	w0, #0xffffffff            	// #-1
    4cd4:	str	w0, [sp, #64]
    4cd8:	ldr	x0, [sp, #24]
    4cdc:	ldrb	w0, [x0, #97]
    4ce0:	cmp	w0, #0x0
    4ce4:	b.eq	4ef4 <grub_mod_fini+0x49d4>  // b.none
    4ce8:	ldr	x0, [sp, #24]
    4cec:	ldr	x1, [x0]
    4cf0:	ldr	x0, [sp, #24]
    4cf4:	ldr	w0, [x0, #40]
    4cf8:	sxtw	x0, w0
    4cfc:	add	x0, x1, x0
    4d00:	str	x0, [sp, #88]
    4d04:	ldr	x0, [sp, #24]
    4d08:	ldr	w0, [x0, #104]
    4d0c:	ldr	w1, [sp, #156]
    4d10:	sub	w0, w1, w0
    4d14:	sxtw	x0, w0
    4d18:	ldr	x1, [sp, #88]
    4d1c:	add	x0, x1, x0
    4d20:	str	x0, [sp, #120]
    4d24:	ldr	x0, [sp, #24]
    4d28:	ldr	x0, [x0]
    4d2c:	ldr	x1, [sp, #120]
    4d30:	cmp	x1, x0
    4d34:	b.cs	4d44 <grub_mod_fini+0x4824>  // b.hs, b.nlast
    4d38:	ldr	x0, [sp, #24]
    4d3c:	ldr	x0, [x0]
    4d40:	str	x0, [sp, #120]
    4d44:	ldrsw	x0, [sp, #156]
    4d48:	sub	x0, x0, #0x1
    4d4c:	ldr	x1, [sp, #88]
    4d50:	add	x0, x1, x0
    4d54:	str	x0, [sp, #128]
    4d58:	b	4edc <grub_mod_fini+0x49bc>
    4d5c:	ldr	x0, [sp, #128]
    4d60:	ldrb	w0, [x0]
    4d64:	and	w0, w0, #0xc0
    4d68:	cmp	w0, #0x80
    4d6c:	b.eq	4ed0 <grub_mod_fini+0x49b0>  // b.none
    4d70:	ldr	x0, [sp, #24]
    4d74:	ldr	w0, [x0, #64]
    4d78:	sxtw	x0, w0
    4d7c:	ldr	x1, [sp, #88]
    4d80:	add	x1, x1, x0
    4d84:	ldr	x0, [sp, #128]
    4d88:	sub	x0, x1, x0
    4d8c:	str	w0, [sp, #84]
    4d90:	ldr	x0, [sp, #128]
    4d94:	str	x0, [sp, #112]
    4d98:	ldr	x0, [sp, #24]
    4d9c:	ldr	x0, [x0, #80]
    4da0:	cmp	x0, #0x0
    4da4:	cset	w0, ne  // ne = any
    4da8:	and	w0, w0, #0xff
    4dac:	and	x0, x0, #0xff
    4db0:	cmp	x0, #0x0
    4db4:	b.eq	4e24 <grub_mod_fini+0x4904>  // b.none
    4db8:	ldr	w2, [sp, #84]
    4dbc:	ldr	w1, [sp, #84]
    4dc0:	mov	w0, #0x6                   	// #6
    4dc4:	cmp	w2, #0x6
    4dc8:	csel	w0, w1, w0, le
    4dcc:	str	w0, [sp, #108]
    4dd0:	b	4e04 <grub_mod_fini+0x48e4>
    4dd4:	ldr	x0, [sp, #24]
    4dd8:	ldr	x1, [x0, #80]
    4ddc:	ldrsw	x0, [sp, #108]
    4de0:	ldr	x2, [sp, #128]
    4de4:	add	x0, x2, x0
    4de8:	ldrb	w0, [x0]
    4dec:	and	x0, x0, #0xff
    4df0:	add	x0, x1, x0
    4df4:	ldrb	w2, [x0]
    4df8:	ldrsw	x0, [sp, #108]
    4dfc:	add	x1, sp, #0x28
    4e00:	strb	w2, [x1, x0]
    4e04:	ldr	w0, [sp, #108]
    4e08:	sub	w0, w0, #0x1
    4e0c:	str	w0, [sp, #108]
    4e10:	ldr	w0, [sp, #108]
    4e14:	cmp	w0, #0x0
    4e18:	b.ge	4dd4 <grub_mod_fini+0x48b4>  // b.tcont
    4e1c:	add	x0, sp, #0x28
    4e20:	str	x0, [sp, #112]
    4e24:	add	x0, sp, #0x38
    4e28:	mov	x2, #0x8                   	// #8
    4e2c:	mov	w1, #0x0                   	// #0
    4e30:	bl	0 <grub_memset>
    4e34:	ldrsw	x1, [sp, #84]
    4e38:	add	x2, sp, #0x38
    4e3c:	add	x0, sp, #0x34
    4e40:	mov	x3, x2
    4e44:	mov	x2, x1
    4e48:	ldr	x1, [sp, #112]
    4e4c:	bl	2514 <grub_mod_fini+0x1ff4>
    4e50:	str	x0, [sp, #72]
    4e54:	ldrsw	x0, [sp, #156]
    4e58:	ldr	x1, [sp, #88]
    4e5c:	add	x1, x1, x0
    4e60:	ldr	x0, [sp, #128]
    4e64:	sub	x0, x1, x0
    4e68:	mov	x1, x0
    4e6c:	ldr	x0, [sp, #72]
    4e70:	cmp	x0, x1
    4e74:	b.cc	4ef0 <grub_mod_fini+0x49d0>  // b.lo, b.ul, b.last
    4e78:	ldr	x0, [sp, #72]
    4e7c:	cmn	x0, #0x3
    4e80:	b.hi	4ef0 <grub_mod_fini+0x49d0>  // b.pmore
    4e84:	ldr	x0, [sp, #24]
    4e88:	add	x0, x0, #0x20
    4e8c:	mov	x2, #0x8                   	// #8
    4e90:	mov	w1, #0x0                   	// #0
    4e94:	bl	0 <grub_memset>
    4e98:	ldr	x0, [sp, #72]
    4e9c:	mov	w2, w0
    4ea0:	ldrsw	x0, [sp, #156]
    4ea4:	ldr	x1, [sp, #88]
    4ea8:	add	x1, x1, x0
    4eac:	ldr	x0, [sp, #128]
    4eb0:	sub	x0, x1, x0
    4eb4:	sub	w0, w2, w0
    4eb8:	mov	w1, w0
    4ebc:	ldr	x0, [sp, #24]
    4ec0:	str	w1, [x0, #44]
    4ec4:	ldr	w0, [sp, #52]
    4ec8:	str	w0, [sp, #64]
    4ecc:	b	4ef0 <grub_mod_fini+0x49d0>
    4ed0:	ldr	x0, [sp, #128]
    4ed4:	sub	x0, x0, #0x1
    4ed8:	str	x0, [sp, #128]
    4edc:	ldr	x1, [sp, #128]
    4ee0:	ldr	x0, [sp, #120]
    4ee4:	cmp	x1, x0
    4ee8:	b.cs	4d5c <grub_mod_fini+0x483c>  // b.hs, b.nlast
    4eec:	b	4ef4 <grub_mod_fini+0x49d4>
    4ef0:	nop
    4ef4:	ldr	w0, [sp, #64]
    4ef8:	cmn	w0, #0x1
    4efc:	b.ne	4f28 <grub_mod_fini+0x4a08>  // b.any
    4f00:	add	x0, sp, #0x40
    4f04:	mov	x2, x0
    4f08:	ldr	w1, [sp, #20]
    4f0c:	ldr	x0, [sp, #24]
    4f10:	bl	42b8 <grub_mod_fini+0x3d98>
    4f14:	mov	w1, w0
    4f18:	ldr	w0, [sp, #20]
    4f1c:	sub	w1, w1, w0
    4f20:	ldr	x0, [sp, #24]
    4f24:	str	w1, [x0, #44]
    4f28:	ldr	w0, [sp, #64]
    4f2c:	cmn	w0, #0x1
    4f30:	b.ne	4f5c <grub_mod_fini+0x4a3c>  // b.any
    4f34:	ldr	w0, [sp, #100]
    4f38:	sub	w0, w0, #0x1
    4f3c:	ldr	w2, [sp, #16]
    4f40:	mov	w1, w0
    4f44:	ldr	x0, [sp, #24]
    4f48:	bl	564c <grub_mod_fini+0x512c>
    4f4c:	mov	w1, w0
    4f50:	ldr	x0, [sp, #24]
    4f54:	str	w1, [x0, #76]
    4f58:	b	4fd0 <grub_mod_fini+0x4ab0>
    4f5c:	ldr	x0, [sp, #24]
    4f60:	ldrb	w0, [x0, #102]
    4f64:	cmp	w0, #0x0
    4f68:	cset	w0, ne  // ne = any
    4f6c:	and	w0, w0, #0xff
    4f70:	and	x0, x0, #0xff
    4f74:	cmp	x0, #0x0
    4f78:	b.eq	4f98 <grub_mod_fini+0x4a78>  // b.none
    4f7c:	ldr	w0, [sp, #64]
    4f80:	bl	27ac <grub_mod_fini+0x228c>
    4f84:	cmp	w0, #0x0
    4f88:	b.ne	4fc4 <grub_mod_fini+0x4aa4>  // b.any
    4f8c:	ldr	w0, [sp, #64]
    4f90:	cmp	w0, #0x5f
    4f94:	b.eq	4fc4 <grub_mod_fini+0x4aa4>  // b.none
    4f98:	ldr	w0, [sp, #64]
    4f9c:	cmp	w0, #0xa
    4fa0:	b.ne	4fbc <grub_mod_fini+0x4a9c>  // b.any
    4fa4:	ldr	x0, [sp, #24]
    4fa8:	ldrb	w0, [x0, #101]
    4fac:	cmp	w0, #0x0
    4fb0:	b.eq	4fbc <grub_mod_fini+0x4a9c>  // b.none
    4fb4:	mov	w0, #0x2                   	// #2
    4fb8:	b	4fc8 <grub_mod_fini+0x4aa8>
    4fbc:	mov	w0, #0x0                   	// #0
    4fc0:	b	4fc8 <grub_mod_fini+0x4aa8>
    4fc4:	mov	w0, #0x1                   	// #1
    4fc8:	ldr	x1, [sp, #24]
    4fcc:	str	w0, [x1, #76]
    4fd0:	ldr	x0, [sp, #24]
    4fd4:	ldr	w0, [x0, #44]
    4fd8:	sxtw	x0, w0
    4fdc:	cmp	x0, #0x0
    4fe0:	b.eq	505c <grub_mod_fini+0x4b3c>  // b.none
    4fe4:	str	wzr, [sp, #140]
    4fe8:	b	5014 <grub_mod_fini+0x4af4>
    4fec:	ldr	x0, [sp, #24]
    4ff0:	ldr	x1, [x0, #16]
    4ff4:	ldrsw	x0, [sp, #140]
    4ff8:	lsl	x0, x0, #2
    4ffc:	add	x0, x1, x0
    5000:	mov	w1, #0xffffffff            	// #-1
    5004:	str	w1, [x0]
    5008:	ldr	w0, [sp, #140]
    500c:	add	w0, w0, #0x1
    5010:	str	w0, [sp, #140]
    5014:	ldr	x0, [sp, #24]
    5018:	ldr	w0, [x0, #44]
    501c:	ldr	w1, [sp, #140]
    5020:	cmp	w1, w0
    5024:	b.lt	4fec <grub_mod_fini+0x4acc>  // b.tstop
    5028:	ldr	x0, [sp, #24]
    502c:	ldrb	w0, [x0, #99]
    5030:	cmp	w0, #0x0
    5034:	b.eq	505c <grub_mod_fini+0x4b3c>  // b.none
    5038:	ldr	x0, [sp, #24]
    503c:	ldr	x3, [x0, #8]
    5040:	ldr	x0, [sp, #24]
    5044:	ldr	w0, [x0, #44]
    5048:	sxtw	x0, w0
    504c:	mov	x2, x0
    5050:	mov	w1, #0xff                  	// #255
    5054:	mov	x0, x3
    5058:	bl	0 <grub_memset>
    505c:	ldr	x0, [sp, #24]
    5060:	ldr	w1, [x0, #44]
    5064:	ldr	x0, [sp, #24]
    5068:	str	w1, [x0, #48]
    506c:	b	5120 <grub_mod_fini+0x4c00>
    5070:	ldr	x0, [sp, #24]
    5074:	ldr	x1, [x0]
    5078:	ldr	x0, [sp, #24]
    507c:	ldr	w2, [x0, #40]
    5080:	ldr	w0, [sp, #156]
    5084:	add	w0, w2, w0
    5088:	sxtw	x0, w0
    508c:	sub	x0, x0, #0x1
    5090:	add	x0, x1, x0
    5094:	ldrb	w0, [x0]
    5098:	str	w0, [sp, #104]
    509c:	ldr	x0, [sp, #24]
    50a0:	str	wzr, [x0, #48]
    50a4:	ldr	x0, [sp, #24]
    50a8:	ldr	x0, [x0, #80]
    50ac:	cmp	x0, #0x0
    50b0:	b.eq	50cc <grub_mod_fini+0x4bac>  // b.none
    50b4:	ldr	x0, [sp, #24]
    50b8:	ldr	x1, [x0, #80]
    50bc:	ldrsw	x0, [sp, #104]
    50c0:	add	x0, x1, x0
    50c4:	ldrb	w0, [x0]
    50c8:	str	w0, [sp, #104]
    50cc:	ldr	x0, [sp, #24]
    50d0:	ldr	x0, [x0, #88]
    50d4:	ldr	w1, [sp, #104]
    50d8:	bl	2ae8 <grub_mod_fini+0x25c8>
    50dc:	and	w0, w0, #0xff
    50e0:	cmp	w0, #0x0
    50e4:	b.ne	5114 <grub_mod_fini+0x4bf4>  // b.any
    50e8:	ldr	w0, [sp, #104]
    50ec:	cmp	w0, #0xa
    50f0:	b.ne	510c <grub_mod_fini+0x4bec>  // b.any
    50f4:	ldr	x0, [sp, #24]
    50f8:	ldrb	w0, [x0, #101]
    50fc:	cmp	w0, #0x0
    5100:	b.eq	510c <grub_mod_fini+0x4bec>  // b.none
    5104:	mov	w0, #0x2                   	// #2
    5108:	b	5118 <grub_mod_fini+0x4bf8>
    510c:	mov	w0, #0x0                   	// #0
    5110:	b	5118 <grub_mod_fini+0x4bf8>
    5114:	mov	w0, #0x1                   	// #1
    5118:	ldr	x1, [sp, #24]
    511c:	str	w0, [x1, #76]
    5120:	ldr	x0, [sp, #24]
    5124:	ldrb	w0, [x0, #99]
    5128:	and	x0, x0, #0xff
    512c:	cmp	x0, #0x0
    5130:	b.ne	514c <grub_mod_fini+0x4c2c>  // b.any
    5134:	ldr	x0, [sp, #24]
    5138:	ldr	x1, [x0, #8]
    513c:	ldrsw	x0, [sp, #156]
    5140:	add	x1, x1, x0
    5144:	ldr	x0, [sp, #24]
    5148:	str	x1, [x0, #8]
    514c:	ldr	x0, [sp, #24]
    5150:	ldr	w1, [sp, #20]
    5154:	str	w1, [x0, #40]
    5158:	ldr	x0, [sp, #24]
    515c:	ldr	w1, [x0, #64]
    5160:	ldr	w0, [sp, #156]
    5164:	sub	w1, w1, w0
    5168:	ldr	x0, [sp, #24]
    516c:	str	w1, [x0, #64]
    5170:	ldr	x0, [sp, #24]
    5174:	ldr	w1, [x0, #72]
    5178:	ldr	w0, [sp, #156]
    517c:	sub	w1, w1, w0
    5180:	ldr	x0, [sp, #24]
    5184:	str	w1, [x0, #72]
    5188:	ldr	x0, [sp, #24]
    518c:	ldr	w0, [x0, #104]
    5190:	cmp	w0, #0x1
    5194:	b.le	51e4 <grub_mod_fini+0x4cc4>
    5198:	ldr	x0, [sp, #24]
    519c:	ldrb	w0, [x0, #96]
    51a0:	cmp	w0, #0x0
    51a4:	b.eq	51d8 <grub_mod_fini+0x4cb8>  // b.none
    51a8:	ldr	x0, [sp, #24]
    51ac:	bl	3768 <grub_mod_fini+0x3248>
    51b0:	str	w0, [sp, #68]
    51b4:	ldr	w0, [sp, #68]
    51b8:	cmp	w0, #0x0
    51bc:	cset	w0, ne  // ne = any
    51c0:	and	w0, w0, #0xff
    51c4:	and	x0, x0, #0xff
    51c8:	cmp	x0, #0x0
    51cc:	b.eq	5240 <grub_mod_fini+0x4d20>  // b.none
    51d0:	ldr	w0, [sp, #68]
    51d4:	b	524c <grub_mod_fini+0x4d2c>
    51d8:	ldr	x0, [sp, #24]
    51dc:	bl	33f8 <grub_mod_fini+0x2ed8>
    51e0:	b	5240 <grub_mod_fini+0x4d20>
    51e4:	ldr	x0, [sp, #24]
    51e8:	ldrb	w0, [x0, #99]
    51ec:	and	x0, x0, #0xff
    51f0:	cmp	x0, #0x0
    51f4:	b.eq	5230 <grub_mod_fini+0x4d10>  // b.none
    51f8:	ldr	x0, [sp, #24]
    51fc:	ldrb	w0, [x0, #96]
    5200:	cmp	w0, #0x0
    5204:	b.eq	5214 <grub_mod_fini+0x4cf4>  // b.none
    5208:	ldr	x0, [sp, #24]
    520c:	bl	4434 <grub_mod_fini+0x3f14>
    5210:	b	5240 <grub_mod_fini+0x4d20>
    5214:	ldr	x0, [sp, #24]
    5218:	ldr	x0, [x0, #80]
    521c:	cmp	x0, #0x0
    5220:	b.eq	5240 <grub_mod_fini+0x4d20>  // b.none
    5224:	ldr	x0, [sp, #24]
    5228:	bl	4530 <grub_mod_fini+0x4010>
    522c:	b	5240 <grub_mod_fini+0x4d20>
    5230:	ldr	x0, [sp, #24]
    5234:	ldr	w1, [x0, #64]
    5238:	ldr	x0, [sp, #24]
    523c:	str	w1, [x0, #44]
    5240:	ldr	x0, [sp, #24]
    5244:	str	wzr, [x0, #56]
    5248:	mov	w0, #0x0                   	// #0
    524c:	ldp	x29, x30, [sp], #160
    5250:	ret
    5254:	stp	x29, x30, [sp, #-48]!
    5258:	mov	x29, sp
    525c:	str	x0, [sp, #24]
    5260:	str	w1, [sp, #20]
    5264:	ldr	x0, [sp, #24]
    5268:	ldrb	w0, [x0, #99]
    526c:	cmp	w0, #0x0
    5270:	cset	w0, eq  // eq = none
    5274:	and	w0, w0, #0xff
    5278:	and	x0, x0, #0xff
    527c:	cmp	x0, #0x0
    5280:	b.eq	52ac <grub_mod_fini+0x4d8c>  // b.none
    5284:	ldr	x0, [sp, #24]
    5288:	ldr	x1, [x0, #8]
    528c:	ldr	x0, [sp, #24]
    5290:	ldr	w2, [x0, #56]
    5294:	ldr	w0, [sp, #20]
    5298:	add	w0, w2, w0
    529c:	sxtw	x0, w0
    52a0:	add	x0, x1, x0
    52a4:	ldrb	w0, [x0]
    52a8:	b	5424 <grub_mod_fini+0x4f04>
    52ac:	ldr	x0, [sp, #24]
    52b0:	ldr	w0, [x0, #104]
    52b4:	cmp	w0, #0x1
    52b8:	b.le	536c <grub_mod_fini+0x4e4c>
    52bc:	ldr	x0, [sp, #24]
    52c0:	ldr	x1, [x0, #16]
    52c4:	ldr	x0, [sp, #24]
    52c8:	ldr	w2, [x0, #56]
    52cc:	ldr	w0, [sp, #20]
    52d0:	add	w0, w2, w0
    52d4:	sxtw	x0, w0
    52d8:	lsl	x0, x0, #2
    52dc:	add	x0, x1, x0
    52e0:	ldr	w0, [x0]
    52e4:	cmn	w0, #0x1
    52e8:	b.eq	5344 <grub_mod_fini+0x4e24>  // b.none
    52ec:	ldr	x0, [sp, #24]
    52f0:	ldr	w1, [x0, #44]
    52f4:	ldr	x0, [sp, #24]
    52f8:	ldr	w2, [x0, #56]
    52fc:	ldr	w0, [sp, #20]
    5300:	add	w0, w2, w0
    5304:	add	w0, w0, #0x1
    5308:	cmp	w1, w0
    530c:	b.eq	536c <grub_mod_fini+0x4e4c>  // b.none
    5310:	ldr	x0, [sp, #24]
    5314:	ldr	x1, [x0, #16]
    5318:	ldr	x0, [sp, #24]
    531c:	ldr	w2, [x0, #56]
    5320:	ldr	w0, [sp, #20]
    5324:	add	w0, w2, w0
    5328:	sxtw	x0, w0
    532c:	add	x0, x0, #0x1
    5330:	lsl	x0, x0, #2
    5334:	add	x0, x1, x0
    5338:	ldr	w0, [x0]
    533c:	cmn	w0, #0x1
    5340:	b.ne	536c <grub_mod_fini+0x4e4c>  // b.any
    5344:	ldr	x0, [sp, #24]
    5348:	ldr	x1, [x0, #8]
    534c:	ldr	x0, [sp, #24]
    5350:	ldr	w2, [x0, #56]
    5354:	ldr	w0, [sp, #20]
    5358:	add	w0, w2, w0
    535c:	sxtw	x0, w0
    5360:	add	x0, x1, x0
    5364:	ldrb	w0, [x0]
    5368:	b	5424 <grub_mod_fini+0x4f04>
    536c:	ldr	x0, [sp, #24]
    5370:	ldr	w0, [x0, #56]
    5374:	ldr	w1, [sp, #20]
    5378:	add	w0, w1, w0
    537c:	str	w0, [sp, #44]
    5380:	ldr	x0, [sp, #24]
    5384:	ldrb	w0, [x0, #100]
    5388:	cmp	w0, #0x0
    538c:	b.eq	53ac <grub_mod_fini+0x4e8c>  // b.none
    5390:	ldr	x0, [sp, #24]
    5394:	ldr	x1, [x0, #24]
    5398:	ldrsw	x0, [sp, #44]
    539c:	lsl	x0, x0, #2
    53a0:	add	x0, x1, x0
    53a4:	ldr	w0, [x0]
    53a8:	str	w0, [sp, #44]
    53ac:	ldr	x0, [sp, #24]
    53b0:	ldr	x1, [x0]
    53b4:	ldr	x0, [sp, #24]
    53b8:	ldr	w2, [x0, #40]
    53bc:	ldr	w0, [sp, #44]
    53c0:	add	w0, w2, w0
    53c4:	sxtw	x0, w0
    53c8:	add	x0, x1, x0
    53cc:	ldrb	w0, [x0]
    53d0:	str	w0, [sp, #40]
    53d4:	ldr	x0, [sp, #24]
    53d8:	ldrb	w0, [x0, #100]
    53dc:	cmp	w0, #0x0
    53e0:	b.eq	541c <grub_mod_fini+0x4efc>  // b.none
    53e4:	ldr	w0, [sp, #40]
    53e8:	bl	2088 <grub_mod_fini+0x1b68>
    53ec:	cmp	w0, #0x0
    53f0:	b.ne	541c <grub_mod_fini+0x4efc>  // b.any
    53f4:	ldr	x0, [sp, #24]
    53f8:	ldr	x1, [x0, #8]
    53fc:	ldr	x0, [sp, #24]
    5400:	ldr	w2, [x0, #56]
    5404:	ldr	w0, [sp, #20]
    5408:	add	w0, w2, w0
    540c:	sxtw	x0, w0
    5410:	add	x0, x1, x0
    5414:	ldrb	w0, [x0]
    5418:	b	5424 <grub_mod_fini+0x4f04>
    541c:	ldr	w0, [sp, #40]
    5420:	and	w0, w0, #0xff
    5424:	ldp	x29, x30, [sp], #48
    5428:	ret
    542c:	stp	x29, x30, [sp, #-64]!
    5430:	mov	x29, sp
    5434:	str	x19, [sp, #16]
    5438:	str	x0, [sp, #40]
    543c:	ldr	x0, [sp, #40]
    5440:	ldrb	w0, [x0, #99]
    5444:	cmp	w0, #0x0
    5448:	cset	w0, eq  // eq = none
    544c:	and	w0, w0, #0xff
    5450:	and	x0, x0, #0xff
    5454:	cmp	x0, #0x0
    5458:	b.eq	5488 <grub_mod_fini+0x4f68>  // b.none
    545c:	ldr	x0, [sp, #40]
    5460:	ldr	x1, [x0, #8]
    5464:	ldr	x0, [sp, #40]
    5468:	ldr	w0, [x0, #56]
    546c:	add	w3, w0, #0x1
    5470:	ldr	x2, [sp, #40]
    5474:	str	w3, [x2, #56]
    5478:	sxtw	x0, w0
    547c:	add	x0, x1, x0
    5480:	ldrb	w0, [x0]
    5484:	b	55f4 <grub_mod_fini+0x50d4>
    5488:	ldr	x0, [sp, #40]
    548c:	ldrb	w0, [x0, #100]
    5490:	cmp	w0, #0x0
    5494:	b.eq	55c0 <grub_mod_fini+0x50a0>  // b.none
    5498:	ldr	x0, [sp, #40]
    549c:	ldr	w1, [x0, #56]
    54a0:	ldr	x0, [sp, #40]
    54a4:	ldr	w0, [x0, #44]
    54a8:	cmp	w1, w0
    54ac:	b.eq	5504 <grub_mod_fini+0x4fe4>  // b.none
    54b0:	ldr	x0, [sp, #40]
    54b4:	ldr	x1, [x0, #16]
    54b8:	ldr	x0, [sp, #40]
    54bc:	ldr	w0, [x0, #56]
    54c0:	sxtw	x0, w0
    54c4:	lsl	x0, x0, #2
    54c8:	add	x0, x1, x0
    54cc:	ldr	w0, [x0]
    54d0:	cmn	w0, #0x1
    54d4:	b.ne	5504 <grub_mod_fini+0x4fe4>  // b.any
    54d8:	ldr	x0, [sp, #40]
    54dc:	ldr	x1, [x0, #8]
    54e0:	ldr	x0, [sp, #40]
    54e4:	ldr	w0, [x0, #56]
    54e8:	add	w3, w0, #0x1
    54ec:	ldr	x2, [sp, #40]
    54f0:	str	w3, [x2, #56]
    54f4:	sxtw	x0, w0
    54f8:	add	x0, x1, x0
    54fc:	ldrb	w0, [x0]
    5500:	b	55f4 <grub_mod_fini+0x50d4>
    5504:	ldr	x0, [sp, #40]
    5508:	ldr	x1, [x0, #24]
    550c:	ldr	x0, [sp, #40]
    5510:	ldr	w0, [x0, #56]
    5514:	sxtw	x0, w0
    5518:	lsl	x0, x0, #2
    551c:	add	x0, x1, x0
    5520:	ldr	w0, [x0]
    5524:	str	w0, [sp, #60]
    5528:	ldr	x0, [sp, #40]
    552c:	ldr	x1, [x0]
    5530:	ldr	x0, [sp, #40]
    5534:	ldr	w2, [x0, #40]
    5538:	ldr	w0, [sp, #60]
    553c:	add	w0, w2, w0
    5540:	sxtw	x0, w0
    5544:	add	x0, x1, x0
    5548:	ldrb	w0, [x0]
    554c:	str	w0, [sp, #56]
    5550:	ldr	w0, [sp, #56]
    5554:	bl	2088 <grub_mod_fini+0x1b68>
    5558:	cmp	w0, #0x0
    555c:	b.ne	558c <grub_mod_fini+0x506c>  // b.any
    5560:	ldr	x0, [sp, #40]
    5564:	ldr	x1, [x0, #8]
    5568:	ldr	x0, [sp, #40]
    556c:	ldr	w0, [x0, #56]
    5570:	add	w3, w0, #0x1
    5574:	ldr	x2, [sp, #40]
    5578:	str	w3, [x2, #56]
    557c:	sxtw	x0, w0
    5580:	add	x0, x1, x0
    5584:	ldrb	w0, [x0]
    5588:	b	55f4 <grub_mod_fini+0x50d4>
    558c:	ldr	x0, [sp, #40]
    5590:	ldr	w19, [x0, #56]
    5594:	ldr	x0, [sp, #40]
    5598:	ldr	w0, [x0, #56]
    559c:	mov	w1, w0
    55a0:	ldr	x0, [sp, #40]
    55a4:	bl	2d24 <grub_mod_fini+0x2804>
    55a8:	add	w1, w19, w0
    55ac:	ldr	x0, [sp, #40]
    55b0:	str	w1, [x0, #56]
    55b4:	ldr	w0, [sp, #56]
    55b8:	and	w0, w0, #0xff
    55bc:	b	55f4 <grub_mod_fini+0x50d4>
    55c0:	ldr	x0, [sp, #40]
    55c4:	ldr	x1, [x0]
    55c8:	ldr	x0, [sp, #40]
    55cc:	ldr	w2, [x0, #40]
    55d0:	ldr	x0, [sp, #40]
    55d4:	ldr	w0, [x0, #56]
    55d8:	add	w4, w0, #0x1
    55dc:	ldr	x3, [sp, #40]
    55e0:	str	w4, [x3, #56]
    55e4:	add	w0, w2, w0
    55e8:	sxtw	x0, w0
    55ec:	add	x0, x1, x0
    55f0:	ldrb	w0, [x0]
    55f4:	ldr	x19, [sp, #16]
    55f8:	ldp	x29, x30, [sp], #64
    55fc:	ret
    5600:	stp	x29, x30, [sp, #-32]!
    5604:	mov	x29, sp
    5608:	str	x0, [sp, #24]
    560c:	ldr	x0, [sp, #24]
    5610:	ldr	x0, [x0, #16]
    5614:	bl	2230 <grub_mod_fini+0x1d10>
    5618:	ldr	x0, [sp, #24]
    561c:	ldr	x0, [x0, #24]
    5620:	bl	2230 <grub_mod_fini+0x1d10>
    5624:	ldr	x0, [sp, #24]
    5628:	ldrb	w0, [x0, #99]
    562c:	cmp	w0, #0x0
    5630:	b.eq	5640 <grub_mod_fini+0x5120>  // b.none
    5634:	ldr	x0, [sp, #24]
    5638:	ldr	x0, [x0, #8]
    563c:	bl	2230 <grub_mod_fini+0x1d10>
    5640:	nop
    5644:	ldp	x29, x30, [sp], #32
    5648:	ret
    564c:	stp	x29, x30, [sp, #-48]!
    5650:	mov	x29, sp
    5654:	str	x0, [sp, #24]
    5658:	str	w1, [sp, #20]
    565c:	str	w2, [sp, #16]
    5660:	ldr	w0, [sp, #20]
    5664:	lsr	w0, w0, #31
    5668:	and	w0, w0, #0xff
    566c:	and	x0, x0, #0xff
    5670:	cmp	x0, #0x0
    5674:	b.eq	5684 <grub_mod_fini+0x5164>  // b.none
    5678:	ldr	x0, [sp, #24]
    567c:	ldr	w0, [x0, #76]
    5680:	b	5818 <grub_mod_fini+0x52f8>
    5684:	ldr	x0, [sp, #24]
    5688:	ldr	w0, [x0, #64]
    568c:	ldr	w1, [sp, #20]
    5690:	cmp	w1, w0
    5694:	cset	w0, eq  // eq = none
    5698:	and	w0, w0, #0xff
    569c:	and	x0, x0, #0xff
    56a0:	cmp	x0, #0x0
    56a4:	b.eq	56c8 <grub_mod_fini+0x51a8>  // b.none
    56a8:	ldr	w0, [sp, #16]
    56ac:	and	w0, w0, #0x2
    56b0:	cmp	w0, #0x0
    56b4:	b.eq	56c0 <grub_mod_fini+0x51a0>  // b.none
    56b8:	mov	w0, #0x8                   	// #8
    56bc:	b	5818 <grub_mod_fini+0x52f8>
    56c0:	mov	w0, #0xa                   	// #10
    56c4:	b	5818 <grub_mod_fini+0x52f8>
    56c8:	ldr	x0, [sp, #24]
    56cc:	ldr	w0, [x0, #104]
    56d0:	cmp	w0, #0x1
    56d4:	b.le	57b4 <grub_mod_fini+0x5294>
    56d8:	ldr	w0, [sp, #20]
    56dc:	str	w0, [sp, #44]
    56e0:	b	5708 <grub_mod_fini+0x51e8>
    56e4:	ldr	w0, [sp, #44]
    56e8:	sub	w0, w0, #0x1
    56ec:	str	w0, [sp, #44]
    56f0:	ldr	w0, [sp, #44]
    56f4:	cmp	w0, #0x0
    56f8:	b.ge	5708 <grub_mod_fini+0x51e8>  // b.tcont
    56fc:	ldr	x0, [sp, #24]
    5700:	ldr	w0, [x0, #76]
    5704:	b	5818 <grub_mod_fini+0x52f8>
    5708:	ldr	x0, [sp, #24]
    570c:	ldr	x1, [x0, #16]
    5710:	ldrsw	x0, [sp, #44]
    5714:	lsl	x0, x0, #2
    5718:	add	x0, x1, x0
    571c:	ldr	w0, [x0]
    5720:	cmn	w0, #0x1
    5724:	b.eq	56e4 <grub_mod_fini+0x51c4>  // b.none
    5728:	ldr	x0, [sp, #24]
    572c:	ldr	x1, [x0, #16]
    5730:	ldrsw	x0, [sp, #44]
    5734:	lsl	x0, x0, #2
    5738:	add	x0, x1, x0
    573c:	ldr	w0, [x0]
    5740:	str	w0, [sp, #36]
    5744:	ldr	x0, [sp, #24]
    5748:	ldrb	w0, [x0, #102]
    574c:	cmp	w0, #0x0
    5750:	cset	w0, ne  // ne = any
    5754:	and	w0, w0, #0xff
    5758:	and	x0, x0, #0xff
    575c:	cmp	x0, #0x0
    5760:	b.eq	5788 <grub_mod_fini+0x5268>  // b.none
    5764:	ldr	w0, [sp, #36]
    5768:	bl	27ac <grub_mod_fini+0x228c>
    576c:	cmp	w0, #0x0
    5770:	b.ne	5780 <grub_mod_fini+0x5260>  // b.any
    5774:	ldr	w0, [sp, #36]
    5778:	cmp	w0, #0x5f
    577c:	b.ne	5788 <grub_mod_fini+0x5268>  // b.any
    5780:	mov	w0, #0x1                   	// #1
    5784:	b	5818 <grub_mod_fini+0x52f8>
    5788:	ldr	w0, [sp, #36]
    578c:	cmp	w0, #0xa
    5790:	b.ne	57ac <grub_mod_fini+0x528c>  // b.any
    5794:	ldr	x0, [sp, #24]
    5798:	ldrb	w0, [x0, #101]
    579c:	cmp	w0, #0x0
    57a0:	b.eq	57ac <grub_mod_fini+0x528c>  // b.none
    57a4:	mov	w0, #0x2                   	// #2
    57a8:	b	5818 <grub_mod_fini+0x52f8>
    57ac:	mov	w0, #0x0                   	// #0
    57b0:	b	5818 <grub_mod_fini+0x52f8>
    57b4:	ldr	x0, [sp, #24]
    57b8:	ldr	x1, [x0, #8]
    57bc:	ldrsw	x0, [sp, #20]
    57c0:	add	x0, x1, x0
    57c4:	ldrb	w0, [x0]
    57c8:	str	w0, [sp, #40]
    57cc:	ldr	x0, [sp, #24]
    57d0:	ldr	x0, [x0, #88]
    57d4:	ldr	w1, [sp, #40]
    57d8:	bl	2ae8 <grub_mod_fini+0x25c8>
    57dc:	and	w0, w0, #0xff
    57e0:	cmp	w0, #0x0
    57e4:	b.eq	57f0 <grub_mod_fini+0x52d0>  // b.none
    57e8:	mov	w0, #0x1                   	// #1
    57ec:	b	5818 <grub_mod_fini+0x52f8>
    57f0:	ldr	w0, [sp, #40]
    57f4:	cmp	w0, #0xa
    57f8:	b.ne	5814 <grub_mod_fini+0x52f4>  // b.any
    57fc:	ldr	x0, [sp, #24]
    5800:	ldrb	w0, [x0, #101]
    5804:	cmp	w0, #0x0
    5808:	b.eq	5814 <grub_mod_fini+0x52f4>  // b.none
    580c:	mov	w0, #0x2                   	// #2
    5810:	b	5818 <grub_mod_fini+0x52f8>
    5814:	mov	w0, #0x0                   	// #0
    5818:	ldp	x29, x30, [sp], #48
    581c:	ret
    5820:	stp	x29, x30, [sp, #-32]!
    5824:	mov	x29, sp
    5828:	str	x0, [sp, #24]
    582c:	str	w1, [sp, #20]
    5830:	ldr	x0, [sp, #24]
    5834:	ldr	w1, [sp, #20]
    5838:	str	w1, [x0]
    583c:	ldr	x0, [sp, #24]
    5840:	str	wzr, [x0, #4]
    5844:	ldrsw	x0, [sp, #20]
    5848:	lsl	x0, x0, #2
    584c:	bl	2250 <grub_mod_fini+0x1d30>
    5850:	mov	x1, x0
    5854:	ldr	x0, [sp, #24]
    5858:	str	x1, [x0, #8]
    585c:	ldr	x0, [sp, #24]
    5860:	ldr	x0, [x0, #8]
    5864:	cmp	x0, #0x0
    5868:	cset	w0, eq  // eq = none
    586c:	and	w0, w0, #0xff
    5870:	and	x0, x0, #0xff
    5874:	cmp	x0, #0x0
    5878:	b.eq	5890 <grub_mod_fini+0x5370>  // b.none
    587c:	ldr	w0, [sp, #20]
    5880:	cmp	w0, #0x0
    5884:	b.eq	5890 <grub_mod_fini+0x5370>  // b.none
    5888:	mov	w0, #0xc                   	// #12
    588c:	b	5894 <grub_mod_fini+0x5374>
    5890:	mov	w0, #0x0                   	// #0
    5894:	ldp	x29, x30, [sp], #32
    5898:	ret
    589c:	stp	x29, x30, [sp, #-32]!
    58a0:	mov	x29, sp
    58a4:	str	x0, [sp, #24]
    58a8:	str	w1, [sp, #20]
    58ac:	ldr	x0, [sp, #24]
    58b0:	mov	w1, #0x1                   	// #1
    58b4:	str	w1, [x0]
    58b8:	ldr	x0, [sp, #24]
    58bc:	mov	w1, #0x1                   	// #1
    58c0:	str	w1, [x0, #4]
    58c4:	mov	x0, #0x4                   	// #4
    58c8:	bl	2250 <grub_mod_fini+0x1d30>
    58cc:	mov	x1, x0
    58d0:	ldr	x0, [sp, #24]
    58d4:	str	x1, [x0, #8]
    58d8:	ldr	x0, [sp, #24]
    58dc:	ldr	x0, [x0, #8]
    58e0:	cmp	x0, #0x0
    58e4:	cset	w0, eq  // eq = none
    58e8:	and	w0, w0, #0xff
    58ec:	and	x0, x0, #0xff
    58f0:	cmp	x0, #0x0
    58f4:	b.eq	5918 <grub_mod_fini+0x53f8>  // b.none
    58f8:	ldr	x0, [sp, #24]
    58fc:	str	wzr, [x0, #4]
    5900:	ldr	x0, [sp, #24]
    5904:	ldr	w1, [x0, #4]
    5908:	ldr	x0, [sp, #24]
    590c:	str	w1, [x0]
    5910:	mov	w0, #0xc                   	// #12
    5914:	b	592c <grub_mod_fini+0x540c>
    5918:	ldr	x0, [sp, #24]
    591c:	ldr	x0, [x0, #8]
    5920:	ldr	w1, [sp, #20]
    5924:	str	w1, [x0]
    5928:	mov	w0, #0x0                   	// #0
    592c:	ldp	x29, x30, [sp], #32
    5930:	ret
    5934:	stp	x29, x30, [sp, #-32]!
    5938:	mov	x29, sp
    593c:	str	x0, [sp, #24]
    5940:	str	w1, [sp, #20]
    5944:	str	w2, [sp, #16]
    5948:	ldr	x0, [sp, #24]
    594c:	mov	w1, #0x2                   	// #2
    5950:	str	w1, [x0]
    5954:	mov	x0, #0x8                   	// #8
    5958:	bl	2250 <grub_mod_fini+0x1d30>
    595c:	mov	x1, x0
    5960:	ldr	x0, [sp, #24]
    5964:	str	x1, [x0, #8]
    5968:	ldr	x0, [sp, #24]
    596c:	ldr	x0, [x0, #8]
    5970:	cmp	x0, #0x0
    5974:	cset	w0, eq  // eq = none
    5978:	and	w0, w0, #0xff
    597c:	and	x0, x0, #0xff
    5980:	cmp	x0, #0x0
    5984:	b.eq	5990 <grub_mod_fini+0x5470>  // b.none
    5988:	mov	w0, #0xc                   	// #12
    598c:	b	5a2c <grub_mod_fini+0x550c>
    5990:	ldr	w1, [sp, #20]
    5994:	ldr	w0, [sp, #16]
    5998:	cmp	w1, w0
    599c:	b.ne	59c0 <grub_mod_fini+0x54a0>  // b.any
    59a0:	ldr	x0, [sp, #24]
    59a4:	mov	w1, #0x1                   	// #1
    59a8:	str	w1, [x0, #4]
    59ac:	ldr	x0, [sp, #24]
    59b0:	ldr	x0, [x0, #8]
    59b4:	ldr	w1, [sp, #20]
    59b8:	str	w1, [x0]
    59bc:	b	5a28 <grub_mod_fini+0x5508>
    59c0:	ldr	x0, [sp, #24]
    59c4:	mov	w1, #0x2                   	// #2
    59c8:	str	w1, [x0, #4]
    59cc:	ldr	w1, [sp, #20]
    59d0:	ldr	w0, [sp, #16]
    59d4:	cmp	w1, w0
    59d8:	b.ge	5a04 <grub_mod_fini+0x54e4>  // b.tcont
    59dc:	ldr	x0, [sp, #24]
    59e0:	ldr	x0, [x0, #8]
    59e4:	ldr	w1, [sp, #20]
    59e8:	str	w1, [x0]
    59ec:	ldr	x0, [sp, #24]
    59f0:	ldr	x0, [x0, #8]
    59f4:	add	x0, x0, #0x4
    59f8:	ldr	w1, [sp, #16]
    59fc:	str	w1, [x0]
    5a00:	b	5a28 <grub_mod_fini+0x5508>
    5a04:	ldr	x0, [sp, #24]
    5a08:	ldr	x0, [x0, #8]
    5a0c:	ldr	w1, [sp, #16]
    5a10:	str	w1, [x0]
    5a14:	ldr	x0, [sp, #24]
    5a18:	ldr	x0, [x0, #8]
    5a1c:	add	x0, x0, #0x4
    5a20:	ldr	w1, [sp, #20]
    5a24:	str	w1, [x0]
    5a28:	mov	w0, #0x0                   	// #0
    5a2c:	ldp	x29, x30, [sp], #32
    5a30:	ret
    5a34:	stp	x29, x30, [sp, #-32]!
    5a38:	mov	x29, sp
    5a3c:	str	x0, [sp, #24]
    5a40:	str	x1, [sp, #16]
    5a44:	ldr	x0, [sp, #16]
    5a48:	ldr	w1, [x0, #4]
    5a4c:	ldr	x0, [sp, #24]
    5a50:	str	w1, [x0, #4]
    5a54:	ldr	x0, [sp, #16]
    5a58:	ldr	w0, [x0, #4]
    5a5c:	cmp	w0, #0x0
    5a60:	b.le	5b04 <grub_mod_fini+0x55e4>
    5a64:	ldr	x0, [sp, #24]
    5a68:	ldr	w1, [x0, #4]
    5a6c:	ldr	x0, [sp, #24]
    5a70:	str	w1, [x0]
    5a74:	ldr	x0, [sp, #24]
    5a78:	ldr	w0, [x0]
    5a7c:	sxtw	x0, w0
    5a80:	lsl	x0, x0, #2
    5a84:	bl	2250 <grub_mod_fini+0x1d30>
    5a88:	mov	x1, x0
    5a8c:	ldr	x0, [sp, #24]
    5a90:	str	x1, [x0, #8]
    5a94:	ldr	x0, [sp, #24]
    5a98:	ldr	x0, [x0, #8]
    5a9c:	cmp	x0, #0x0
    5aa0:	cset	w0, eq  // eq = none
    5aa4:	and	w0, w0, #0xff
    5aa8:	and	x0, x0, #0xff
    5aac:	cmp	x0, #0x0
    5ab0:	b.eq	5ad4 <grub_mod_fini+0x55b4>  // b.none
    5ab4:	ldr	x0, [sp, #24]
    5ab8:	str	wzr, [x0, #4]
    5abc:	ldr	x0, [sp, #24]
    5ac0:	ldr	w1, [x0, #4]
    5ac4:	ldr	x0, [sp, #24]
    5ac8:	str	w1, [x0]
    5acc:	mov	w0, #0xc                   	// #12
    5ad0:	b	5b18 <grub_mod_fini+0x55f8>
    5ad4:	ldr	x0, [sp, #24]
    5ad8:	ldr	x3, [x0, #8]
    5adc:	ldr	x0, [sp, #16]
    5ae0:	ldr	x1, [x0, #8]
    5ae4:	ldr	x0, [sp, #16]
    5ae8:	ldr	w0, [x0, #4]
    5aec:	sxtw	x0, w0
    5af0:	lsl	x0, x0, #2
    5af4:	mov	x2, x0
    5af8:	mov	x0, x3
    5afc:	bl	1d38 <grub_mod_fini+0x1818>
    5b00:	b	5b14 <grub_mod_fini+0x55f4>
    5b04:	mov	x2, #0x10                  	// #16
    5b08:	mov	w1, #0x0                   	// #0
    5b0c:	ldr	x0, [sp, #24]
    5b10:	bl	0 <grub_memset>
    5b14:	mov	w0, #0x0                   	// #0
    5b18:	ldp	x29, x30, [sp], #32
    5b1c:	ret
    5b20:	stp	x29, x30, [sp, #-96]!
    5b24:	mov	x29, sp
    5b28:	str	x0, [sp, #40]
    5b2c:	str	x1, [sp, #32]
    5b30:	str	x2, [sp, #24]
    5b34:	ldr	x0, [sp, #32]
    5b38:	ldr	w0, [x0, #4]
    5b3c:	cmp	w0, #0x0
    5b40:	b.eq	5b54 <grub_mod_fini+0x5634>  // b.none
    5b44:	ldr	x0, [sp, #24]
    5b48:	ldr	w0, [x0, #4]
    5b4c:	cmp	w0, #0x0
    5b50:	b.ne	5b5c <grub_mod_fini+0x563c>  // b.any
    5b54:	mov	w0, #0x0                   	// #0
    5b58:	b	5fb8 <grub_mod_fini+0x5a98>
    5b5c:	ldr	x0, [sp, #32]
    5b60:	ldr	w1, [x0, #4]
    5b64:	ldr	x0, [sp, #24]
    5b68:	ldr	w0, [x0, #4]
    5b6c:	add	w1, w1, w0
    5b70:	ldr	x0, [sp, #40]
    5b74:	ldr	w0, [x0, #4]
    5b78:	add	w1, w1, w0
    5b7c:	ldr	x0, [sp, #40]
    5b80:	ldr	w0, [x0]
    5b84:	cmp	w1, w0
    5b88:	b.le	5c0c <grub_mod_fini+0x56ec>
    5b8c:	ldr	x0, [sp, #32]
    5b90:	ldr	w1, [x0, #4]
    5b94:	ldr	x0, [sp, #24]
    5b98:	ldr	w0, [x0, #4]
    5b9c:	add	w1, w1, w0
    5ba0:	ldr	x0, [sp, #40]
    5ba4:	ldr	w0, [x0]
    5ba8:	add	w0, w1, w0
    5bac:	str	w0, [sp, #68]
    5bb0:	ldr	x0, [sp, #40]
    5bb4:	ldr	x2, [x0, #8]
    5bb8:	ldrsw	x0, [sp, #68]
    5bbc:	lsl	x0, x0, #2
    5bc0:	mov	x1, x0
    5bc4:	mov	x0, x2
    5bc8:	bl	2294 <grub_mod_fini+0x1d74>
    5bcc:	str	x0, [sp, #56]
    5bd0:	ldr	x0, [sp, #56]
    5bd4:	cmp	x0, #0x0
    5bd8:	cset	w0, eq  // eq = none
    5bdc:	and	w0, w0, #0xff
    5be0:	and	x0, x0, #0xff
    5be4:	cmp	x0, #0x0
    5be8:	b.eq	5bf4 <grub_mod_fini+0x56d4>  // b.none
    5bec:	mov	w0, #0xc                   	// #12
    5bf0:	b	5fb8 <grub_mod_fini+0x5a98>
    5bf4:	ldr	x0, [sp, #40]
    5bf8:	ldr	x1, [sp, #56]
    5bfc:	str	x1, [x0, #8]
    5c00:	ldr	x0, [sp, #40]
    5c04:	ldr	w1, [sp, #68]
    5c08:	str	w1, [x0]
    5c0c:	ldr	x0, [sp, #40]
    5c10:	ldr	w1, [x0, #4]
    5c14:	ldr	x0, [sp, #32]
    5c18:	ldr	w0, [x0, #4]
    5c1c:	add	w1, w1, w0
    5c20:	ldr	x0, [sp, #24]
    5c24:	ldr	w0, [x0, #4]
    5c28:	add	w0, w1, w0
    5c2c:	str	w0, [sp, #72]
    5c30:	ldr	x0, [sp, #32]
    5c34:	ldr	w0, [x0, #4]
    5c38:	sub	w0, w0, #0x1
    5c3c:	str	w0, [sp, #92]
    5c40:	ldr	x0, [sp, #24]
    5c44:	ldr	w0, [x0, #4]
    5c48:	sub	w0, w0, #0x1
    5c4c:	str	w0, [sp, #88]
    5c50:	ldr	x0, [sp, #40]
    5c54:	ldr	w0, [x0, #4]
    5c58:	sub	w0, w0, #0x1
    5c5c:	str	w0, [sp, #80]
    5c60:	ldr	x0, [sp, #32]
    5c64:	ldr	x1, [x0, #8]
    5c68:	ldrsw	x0, [sp, #92]
    5c6c:	lsl	x0, x0, #2
    5c70:	add	x0, x1, x0
    5c74:	ldr	w1, [x0]
    5c78:	ldr	x0, [sp, #24]
    5c7c:	ldr	x2, [x0, #8]
    5c80:	ldrsw	x0, [sp, #88]
    5c84:	lsl	x0, x0, #2
    5c88:	add	x0, x2, x0
    5c8c:	ldr	w0, [x0]
    5c90:	cmp	w1, w0
    5c94:	b.ne	5da0 <grub_mod_fini+0x5880>  // b.any
    5c98:	b	5ca8 <grub_mod_fini+0x5788>
    5c9c:	ldr	w0, [sp, #80]
    5ca0:	sub	w0, w0, #0x1
    5ca4:	str	w0, [sp, #80]
    5ca8:	ldr	w0, [sp, #80]
    5cac:	cmp	w0, #0x0
    5cb0:	b.lt	5cec <grub_mod_fini+0x57cc>  // b.tstop
    5cb4:	ldr	x0, [sp, #40]
    5cb8:	ldr	x1, [x0, #8]
    5cbc:	ldrsw	x0, [sp, #80]
    5cc0:	lsl	x0, x0, #2
    5cc4:	add	x0, x1, x0
    5cc8:	ldr	w1, [x0]
    5ccc:	ldr	x0, [sp, #32]
    5cd0:	ldr	x2, [x0, #8]
    5cd4:	ldrsw	x0, [sp, #92]
    5cd8:	lsl	x0, x0, #2
    5cdc:	add	x0, x2, x0
    5ce0:	ldr	w0, [x0]
    5ce4:	cmp	w1, w0
    5ce8:	b.gt	5c9c <grub_mod_fini+0x577c>
    5cec:	ldr	w0, [sp, #80]
    5cf0:	cmp	w0, #0x0
    5cf4:	b.lt	5d30 <grub_mod_fini+0x5810>  // b.tstop
    5cf8:	ldr	x0, [sp, #40]
    5cfc:	ldr	x1, [x0, #8]
    5d00:	ldrsw	x0, [sp, #80]
    5d04:	lsl	x0, x0, #2
    5d08:	add	x0, x1, x0
    5d0c:	ldr	w1, [x0]
    5d10:	ldr	x0, [sp, #32]
    5d14:	ldr	x2, [x0, #8]
    5d18:	ldrsw	x0, [sp, #92]
    5d1c:	lsl	x0, x0, #2
    5d20:	add	x0, x2, x0
    5d24:	ldr	w0, [x0]
    5d28:	cmp	w1, w0
    5d2c:	b.eq	5d6c <grub_mod_fini+0x584c>  // b.none
    5d30:	ldr	x0, [sp, #32]
    5d34:	ldr	x1, [x0, #8]
    5d38:	ldrsw	x0, [sp, #92]
    5d3c:	lsl	x0, x0, #2
    5d40:	add	x1, x1, x0
    5d44:	ldr	x0, [sp, #40]
    5d48:	ldr	x2, [x0, #8]
    5d4c:	ldr	w0, [sp, #72]
    5d50:	sub	w0, w0, #0x1
    5d54:	str	w0, [sp, #72]
    5d58:	ldrsw	x0, [sp, #72]
    5d5c:	lsl	x0, x0, #2
    5d60:	add	x0, x2, x0
    5d64:	ldr	w1, [x1]
    5d68:	str	w1, [x0]
    5d6c:	ldr	w0, [sp, #92]
    5d70:	sub	w0, w0, #0x1
    5d74:	str	w0, [sp, #92]
    5d78:	ldr	w0, [sp, #92]
    5d7c:	cmp	w0, #0x0
    5d80:	b.lt	5e14 <grub_mod_fini+0x58f4>  // b.tstop
    5d84:	ldr	w0, [sp, #88]
    5d88:	sub	w0, w0, #0x1
    5d8c:	str	w0, [sp, #88]
    5d90:	ldr	w0, [sp, #88]
    5d94:	cmp	w0, #0x0
    5d98:	b.lt	5e14 <grub_mod_fini+0x58f4>  // b.tstop
    5d9c:	b	5c60 <grub_mod_fini+0x5740>
    5da0:	ldr	x0, [sp, #32]
    5da4:	ldr	x1, [x0, #8]
    5da8:	ldrsw	x0, [sp, #92]
    5dac:	lsl	x0, x0, #2
    5db0:	add	x0, x1, x0
    5db4:	ldr	w1, [x0]
    5db8:	ldr	x0, [sp, #24]
    5dbc:	ldr	x2, [x0, #8]
    5dc0:	ldrsw	x0, [sp, #88]
    5dc4:	lsl	x0, x0, #2
    5dc8:	add	x0, x2, x0
    5dcc:	ldr	w0, [x0]
    5dd0:	cmp	w1, w0
    5dd4:	b.ge	5df4 <grub_mod_fini+0x58d4>  // b.tcont
    5dd8:	ldr	w0, [sp, #88]
    5ddc:	sub	w0, w0, #0x1
    5de0:	str	w0, [sp, #88]
    5de4:	ldr	w0, [sp, #88]
    5de8:	cmp	w0, #0x0
    5dec:	b.ge	5c60 <grub_mod_fini+0x5740>  // b.tcont
    5df0:	b	5e14 <grub_mod_fini+0x58f4>
    5df4:	ldr	w0, [sp, #92]
    5df8:	sub	w0, w0, #0x1
    5dfc:	str	w0, [sp, #92]
    5e00:	ldr	w0, [sp, #92]
    5e04:	cmp	w0, #0x0
    5e08:	b.lt	5e10 <grub_mod_fini+0x58f0>  // b.tstop
    5e0c:	b	5c60 <grub_mod_fini+0x5740>
    5e10:	nop
    5e14:	ldr	x0, [sp, #40]
    5e18:	ldr	w0, [x0, #4]
    5e1c:	sub	w0, w0, #0x1
    5e20:	str	w0, [sp, #80]
    5e24:	ldr	x0, [sp, #40]
    5e28:	ldr	w1, [x0, #4]
    5e2c:	ldr	x0, [sp, #32]
    5e30:	ldr	w0, [x0, #4]
    5e34:	add	w1, w1, w0
    5e38:	ldr	x0, [sp, #24]
    5e3c:	ldr	w0, [x0, #4]
    5e40:	add	w0, w1, w0
    5e44:	sub	w0, w0, #0x1
    5e48:	str	w0, [sp, #84]
    5e4c:	ldr	w1, [sp, #84]
    5e50:	ldr	w0, [sp, #72]
    5e54:	sub	w0, w1, w0
    5e58:	add	w0, w0, #0x1
    5e5c:	str	w0, [sp, #76]
    5e60:	ldr	x0, [sp, #40]
    5e64:	ldr	w1, [x0, #4]
    5e68:	ldr	w0, [sp, #76]
    5e6c:	add	w1, w1, w0
    5e70:	ldr	x0, [sp, #40]
    5e74:	str	w1, [x0, #4]
    5e78:	ldr	w0, [sp, #76]
    5e7c:	cmp	w0, #0x0
    5e80:	b.le	5f84 <grub_mod_fini+0x5a64>
    5e84:	ldr	w0, [sp, #80]
    5e88:	cmp	w0, #0x0
    5e8c:	b.lt	5f84 <grub_mod_fini+0x5a64>  // b.tstop
    5e90:	ldr	x0, [sp, #40]
    5e94:	ldr	x1, [x0, #8]
    5e98:	ldrsw	x0, [sp, #84]
    5e9c:	lsl	x0, x0, #2
    5ea0:	add	x0, x1, x0
    5ea4:	ldr	w1, [x0]
    5ea8:	ldr	x0, [sp, #40]
    5eac:	ldr	x2, [x0, #8]
    5eb0:	ldrsw	x0, [sp, #80]
    5eb4:	lsl	x0, x0, #2
    5eb8:	add	x0, x2, x0
    5ebc:	ldr	w0, [x0]
    5ec0:	cmp	w1, w0
    5ec4:	b.le	5f28 <grub_mod_fini+0x5a08>
    5ec8:	ldr	x0, [sp, #40]
    5ecc:	ldr	x1, [x0, #8]
    5ed0:	ldr	w0, [sp, #84]
    5ed4:	sub	w2, w0, #0x1
    5ed8:	str	w2, [sp, #84]
    5edc:	sxtw	x0, w0
    5ee0:	lsl	x0, x0, #2
    5ee4:	add	x1, x1, x0
    5ee8:	ldr	x0, [sp, #40]
    5eec:	ldr	x2, [x0, #8]
    5ef0:	ldr	w0, [sp, #76]
    5ef4:	sub	w3, w0, #0x1
    5ef8:	str	w3, [sp, #76]
    5efc:	ldr	w3, [sp, #80]
    5f00:	add	w0, w0, w3
    5f04:	sxtw	x0, w0
    5f08:	lsl	x0, x0, #2
    5f0c:	add	x0, x2, x0
    5f10:	ldr	w1, [x1]
    5f14:	str	w1, [x0]
    5f18:	ldr	w0, [sp, #76]
    5f1c:	cmp	w0, #0x0
    5f20:	b.ne	5e90 <grub_mod_fini+0x5970>  // b.any
    5f24:	b	5f84 <grub_mod_fini+0x5a64>
    5f28:	ldr	x0, [sp, #40]
    5f2c:	ldr	x1, [x0, #8]
    5f30:	ldrsw	x0, [sp, #80]
    5f34:	lsl	x0, x0, #2
    5f38:	add	x1, x1, x0
    5f3c:	ldr	x0, [sp, #40]
    5f40:	ldr	x2, [x0, #8]
    5f44:	ldr	w3, [sp, #80]
    5f48:	ldr	w0, [sp, #76]
    5f4c:	add	w0, w3, w0
    5f50:	sxtw	x0, w0
    5f54:	lsl	x0, x0, #2
    5f58:	add	x0, x2, x0
    5f5c:	ldr	w1, [x1]
    5f60:	str	w1, [x0]
    5f64:	ldr	w0, [sp, #80]
    5f68:	sub	w0, w0, #0x1
    5f6c:	str	w0, [sp, #80]
    5f70:	ldr	w0, [sp, #80]
    5f74:	cmp	w0, #0x0
    5f78:	b.lt	5f80 <grub_mod_fini+0x5a60>  // b.tstop
    5f7c:	b	5e90 <grub_mod_fini+0x5970>
    5f80:	nop
    5f84:	ldr	x0, [sp, #40]
    5f88:	ldr	x3, [x0, #8]
    5f8c:	ldr	x0, [sp, #40]
    5f90:	ldr	x1, [x0, #8]
    5f94:	ldrsw	x0, [sp, #72]
    5f98:	lsl	x0, x0, #2
    5f9c:	add	x1, x1, x0
    5fa0:	ldrsw	x0, [sp, #76]
    5fa4:	lsl	x0, x0, #2
    5fa8:	mov	x2, x0
    5fac:	mov	x0, x3
    5fb0:	bl	1d38 <grub_mod_fini+0x1818>
    5fb4:	mov	w0, #0x0                   	// #0
    5fb8:	ldp	x29, x30, [sp], #96
    5fbc:	ret
    5fc0:	stp	x29, x30, [sp, #-64]!
    5fc4:	mov	x29, sp
    5fc8:	str	x0, [sp, #40]
    5fcc:	str	x1, [sp, #32]
    5fd0:	str	x2, [sp, #24]
    5fd4:	ldr	x0, [sp, #32]
    5fd8:	cmp	x0, #0x0
    5fdc:	b.eq	6070 <grub_mod_fini+0x5b50>  // b.none
    5fe0:	ldr	x0, [sp, #32]
    5fe4:	ldr	w0, [x0, #4]
    5fe8:	cmp	w0, #0x0
    5fec:	b.le	6070 <grub_mod_fini+0x5b50>
    5ff0:	ldr	x0, [sp, #24]
    5ff4:	cmp	x0, #0x0
    5ff8:	b.eq	6070 <grub_mod_fini+0x5b50>  // b.none
    5ffc:	ldr	x0, [sp, #24]
    6000:	ldr	w0, [x0, #4]
    6004:	cmp	w0, #0x0
    6008:	b.le	6070 <grub_mod_fini+0x5b50>
    600c:	ldr	x0, [sp, #32]
    6010:	ldr	w1, [x0, #4]
    6014:	ldr	x0, [sp, #24]
    6018:	ldr	w0, [x0, #4]
    601c:	add	w1, w1, w0
    6020:	ldr	x0, [sp, #40]
    6024:	str	w1, [x0]
    6028:	ldr	x0, [sp, #40]
    602c:	ldr	w0, [x0]
    6030:	sxtw	x0, w0
    6034:	lsl	x0, x0, #2
    6038:	bl	2250 <grub_mod_fini+0x1d30>
    603c:	mov	x1, x0
    6040:	ldr	x0, [sp, #40]
    6044:	str	x1, [x0, #8]
    6048:	ldr	x0, [sp, #40]
    604c:	ldr	x0, [x0, #8]
    6050:	cmp	x0, #0x0
    6054:	cset	w0, eq  // eq = none
    6058:	and	w0, w0, #0xff
    605c:	and	x0, x0, #0xff
    6060:	cmp	x0, #0x0
    6064:	b.eq	60e0 <grub_mod_fini+0x5bc0>  // b.none
    6068:	mov	w0, #0xc                   	// #12
    606c:	b	6344 <grub_mod_fini+0x5e24>
    6070:	ldr	x0, [sp, #32]
    6074:	cmp	x0, #0x0
    6078:	b.eq	609c <grub_mod_fini+0x5b7c>  // b.none
    607c:	ldr	x0, [sp, #32]
    6080:	ldr	w0, [x0, #4]
    6084:	cmp	w0, #0x0
    6088:	b.le	609c <grub_mod_fini+0x5b7c>
    608c:	ldr	x1, [sp, #32]
    6090:	ldr	x0, [sp, #40]
    6094:	bl	5a34 <grub_mod_fini+0x5514>
    6098:	b	6344 <grub_mod_fini+0x5e24>
    609c:	ldr	x0, [sp, #24]
    60a0:	cmp	x0, #0x0
    60a4:	b.eq	60c8 <grub_mod_fini+0x5ba8>  // b.none
    60a8:	ldr	x0, [sp, #24]
    60ac:	ldr	w0, [x0, #4]
    60b0:	cmp	w0, #0x0
    60b4:	b.le	60c8 <grub_mod_fini+0x5ba8>
    60b8:	ldr	x1, [sp, #24]
    60bc:	ldr	x0, [sp, #40]
    60c0:	bl	5a34 <grub_mod_fini+0x5514>
    60c4:	b	6344 <grub_mod_fini+0x5e24>
    60c8:	mov	x2, #0x10                  	// #16
    60cc:	mov	w1, #0x0                   	// #0
    60d0:	ldr	x0, [sp, #40]
    60d4:	bl	0 <grub_memset>
    60d8:	mov	w0, #0x0                   	// #0
    60dc:	b	6344 <grub_mod_fini+0x5e24>
    60e0:	str	wzr, [sp, #52]
    60e4:	ldr	w0, [sp, #52]
    60e8:	str	w0, [sp, #56]
    60ec:	ldr	w0, [sp, #56]
    60f0:	str	w0, [sp, #60]
    60f4:	b	6208 <grub_mod_fini+0x5ce8>
    60f8:	ldr	x0, [sp, #32]
    60fc:	ldr	x1, [x0, #8]
    6100:	ldrsw	x0, [sp, #60]
    6104:	lsl	x0, x0, #2
    6108:	add	x0, x1, x0
    610c:	ldr	w1, [x0]
    6110:	ldr	x0, [sp, #24]
    6114:	ldr	x2, [x0, #8]
    6118:	ldrsw	x0, [sp, #56]
    611c:	lsl	x0, x0, #2
    6120:	add	x0, x2, x0
    6124:	ldr	w0, [x0]
    6128:	cmp	w1, w0
    612c:	b.le	617c <grub_mod_fini+0x5c5c>
    6130:	ldr	x0, [sp, #24]
    6134:	ldr	x1, [x0, #8]
    6138:	ldr	w0, [sp, #56]
    613c:	add	w2, w0, #0x1
    6140:	str	w2, [sp, #56]
    6144:	sxtw	x0, w0
    6148:	lsl	x0, x0, #2
    614c:	add	x1, x1, x0
    6150:	ldr	x0, [sp, #40]
    6154:	ldr	x2, [x0, #8]
    6158:	ldr	w0, [sp, #52]
    615c:	add	w3, w0, #0x1
    6160:	str	w3, [sp, #52]
    6164:	sxtw	x0, w0
    6168:	lsl	x0, x0, #2
    616c:	add	x0, x2, x0
    6170:	ldr	w1, [x1]
    6174:	str	w1, [x0]
    6178:	b	6208 <grub_mod_fini+0x5ce8>
    617c:	ldr	x0, [sp, #32]
    6180:	ldr	x1, [x0, #8]
    6184:	ldrsw	x0, [sp, #60]
    6188:	lsl	x0, x0, #2
    618c:	add	x0, x1, x0
    6190:	ldr	w1, [x0]
    6194:	ldr	x0, [sp, #24]
    6198:	ldr	x2, [x0, #8]
    619c:	ldrsw	x0, [sp, #56]
    61a0:	lsl	x0, x0, #2
    61a4:	add	x0, x2, x0
    61a8:	ldr	w0, [x0]
    61ac:	cmp	w1, w0
    61b0:	b.ne	61c0 <grub_mod_fini+0x5ca0>  // b.any
    61b4:	ldr	w0, [sp, #56]
    61b8:	add	w0, w0, #0x1
    61bc:	str	w0, [sp, #56]
    61c0:	ldr	x0, [sp, #32]
    61c4:	ldr	x1, [x0, #8]
    61c8:	ldr	w0, [sp, #60]
    61cc:	add	w2, w0, #0x1
    61d0:	str	w2, [sp, #60]
    61d4:	sxtw	x0, w0
    61d8:	lsl	x0, x0, #2
    61dc:	add	x1, x1, x0
    61e0:	ldr	x0, [sp, #40]
    61e4:	ldr	x2, [x0, #8]
    61e8:	ldr	w0, [sp, #52]
    61ec:	add	w3, w0, #0x1
    61f0:	str	w3, [sp, #52]
    61f4:	sxtw	x0, w0
    61f8:	lsl	x0, x0, #2
    61fc:	add	x0, x2, x0
    6200:	ldr	w1, [x1]
    6204:	str	w1, [x0]
    6208:	ldr	x0, [sp, #32]
    620c:	ldr	w0, [x0, #4]
    6210:	ldr	w1, [sp, #60]
    6214:	cmp	w1, w0
    6218:	b.ge	6230 <grub_mod_fini+0x5d10>  // b.tcont
    621c:	ldr	x0, [sp, #24]
    6220:	ldr	w0, [x0, #4]
    6224:	ldr	w1, [sp, #56]
    6228:	cmp	w1, w0
    622c:	b.lt	60f8 <grub_mod_fini+0x5bd8>  // b.tstop
    6230:	ldr	x0, [sp, #32]
    6234:	ldr	w0, [x0, #4]
    6238:	ldr	w1, [sp, #60]
    623c:	cmp	w1, w0
    6240:	b.ge	62b4 <grub_mod_fini+0x5d94>  // b.tcont
    6244:	ldr	x0, [sp, #40]
    6248:	ldr	x1, [x0, #8]
    624c:	ldrsw	x0, [sp, #52]
    6250:	lsl	x0, x0, #2
    6254:	add	x3, x1, x0
    6258:	ldr	x0, [sp, #32]
    625c:	ldr	x1, [x0, #8]
    6260:	ldrsw	x0, [sp, #60]
    6264:	lsl	x0, x0, #2
    6268:	add	x4, x1, x0
    626c:	ldr	x0, [sp, #32]
    6270:	ldr	w1, [x0, #4]
    6274:	ldr	w0, [sp, #60]
    6278:	sub	w0, w1, w0
    627c:	sxtw	x0, w0
    6280:	lsl	x0, x0, #2
    6284:	mov	x2, x0
    6288:	mov	x1, x4
    628c:	mov	x0, x3
    6290:	bl	1d38 <grub_mod_fini+0x1818>
    6294:	ldr	x0, [sp, #32]
    6298:	ldr	w1, [x0, #4]
    629c:	ldr	w0, [sp, #60]
    62a0:	sub	w0, w1, w0
    62a4:	ldr	w1, [sp, #52]
    62a8:	add	w0, w1, w0
    62ac:	str	w0, [sp, #52]
    62b0:	b	6334 <grub_mod_fini+0x5e14>
    62b4:	ldr	x0, [sp, #24]
    62b8:	ldr	w0, [x0, #4]
    62bc:	ldr	w1, [sp, #56]
    62c0:	cmp	w1, w0
    62c4:	b.ge	6334 <grub_mod_fini+0x5e14>  // b.tcont
    62c8:	ldr	x0, [sp, #40]
    62cc:	ldr	x1, [x0, #8]
    62d0:	ldrsw	x0, [sp, #52]
    62d4:	lsl	x0, x0, #2
    62d8:	add	x3, x1, x0
    62dc:	ldr	x0, [sp, #24]
    62e0:	ldr	x1, [x0, #8]
    62e4:	ldrsw	x0, [sp, #56]
    62e8:	lsl	x0, x0, #2
    62ec:	add	x4, x1, x0
    62f0:	ldr	x0, [sp, #24]
    62f4:	ldr	w1, [x0, #4]
    62f8:	ldr	w0, [sp, #56]
    62fc:	sub	w0, w1, w0
    6300:	sxtw	x0, w0
    6304:	lsl	x0, x0, #2
    6308:	mov	x2, x0
    630c:	mov	x1, x4
    6310:	mov	x0, x3
    6314:	bl	1d38 <grub_mod_fini+0x1818>
    6318:	ldr	x0, [sp, #24]
    631c:	ldr	w1, [x0, #4]
    6320:	ldr	w0, [sp, #56]
    6324:	sub	w0, w1, w0
    6328:	ldr	w1, [sp, #52]
    632c:	add	w0, w1, w0
    6330:	str	w0, [sp, #52]
    6334:	ldr	x0, [sp, #40]
    6338:	ldr	w1, [sp, #52]
    633c:	str	w1, [x0, #4]
    6340:	mov	w0, #0x0                   	// #0
    6344:	ldp	x29, x30, [sp], #64
    6348:	ret
    634c:	stp	x29, x30, [sp, #-64]!
    6350:	mov	x29, sp
    6354:	str	x0, [sp, #24]
    6358:	str	x1, [sp, #16]
    635c:	ldr	x0, [sp, #16]
    6360:	cmp	x0, #0x0
    6364:	b.eq	6378 <grub_mod_fini+0x5e58>  // b.none
    6368:	ldr	x0, [sp, #16]
    636c:	ldr	w0, [x0, #4]
    6370:	cmp	w0, #0x0
    6374:	b.ne	6380 <grub_mod_fini+0x5e60>  // b.any
    6378:	mov	w0, #0x0                   	// #0
    637c:	b	67a8 <grub_mod_fini+0x6288>
    6380:	ldr	x0, [sp, #24]
    6384:	ldr	w1, [x0]
    6388:	ldr	x0, [sp, #16]
    638c:	ldr	w0, [x0, #4]
    6390:	lsl	w2, w0, #1
    6394:	ldr	x0, [sp, #24]
    6398:	ldr	w0, [x0, #4]
    639c:	add	w0, w2, w0
    63a0:	cmp	w1, w0
    63a4:	b.ge	6420 <grub_mod_fini+0x5f00>  // b.tcont
    63a8:	ldr	x0, [sp, #16]
    63ac:	ldr	w1, [x0, #4]
    63b0:	ldr	x0, [sp, #24]
    63b4:	ldr	w0, [x0]
    63b8:	add	w0, w1, w0
    63bc:	lsl	w0, w0, #1
    63c0:	str	w0, [sp, #44]
    63c4:	ldr	x0, [sp, #24]
    63c8:	ldr	x2, [x0, #8]
    63cc:	ldrsw	x0, [sp, #44]
    63d0:	lsl	x0, x0, #2
    63d4:	mov	x1, x0
    63d8:	mov	x0, x2
    63dc:	bl	2294 <grub_mod_fini+0x1d74>
    63e0:	str	x0, [sp, #32]
    63e4:	ldr	x0, [sp, #32]
    63e8:	cmp	x0, #0x0
    63ec:	cset	w0, eq  // eq = none
    63f0:	and	w0, w0, #0xff
    63f4:	and	x0, x0, #0xff
    63f8:	cmp	x0, #0x0
    63fc:	b.eq	6408 <grub_mod_fini+0x5ee8>  // b.none
    6400:	mov	w0, #0xc                   	// #12
    6404:	b	67a8 <grub_mod_fini+0x6288>
    6408:	ldr	x0, [sp, #24]
    640c:	ldr	x1, [sp, #32]
    6410:	str	x1, [x0, #8]
    6414:	ldr	x0, [sp, #24]
    6418:	ldr	w1, [sp, #44]
    641c:	str	w1, [x0]
    6420:	ldr	x0, [sp, #24]
    6424:	ldr	w0, [x0, #4]
    6428:	cmp	w0, #0x0
    642c:	cset	w0, eq  // eq = none
    6430:	and	w0, w0, #0xff
    6434:	and	x0, x0, #0xff
    6438:	cmp	x0, #0x0
    643c:	b.eq	6484 <grub_mod_fini+0x5f64>  // b.none
    6440:	ldr	x0, [sp, #16]
    6444:	ldr	w1, [x0, #4]
    6448:	ldr	x0, [sp, #24]
    644c:	str	w1, [x0, #4]
    6450:	ldr	x0, [sp, #24]
    6454:	ldr	x3, [x0, #8]
    6458:	ldr	x0, [sp, #16]
    645c:	ldr	x1, [x0, #8]
    6460:	ldr	x0, [sp, #16]
    6464:	ldr	w0, [x0, #4]
    6468:	sxtw	x0, w0
    646c:	lsl	x0, x0, #2
    6470:	mov	x2, x0
    6474:	mov	x0, x3
    6478:	bl	1d38 <grub_mod_fini+0x1818>
    647c:	mov	w0, #0x0                   	// #0
    6480:	b	67a8 <grub_mod_fini+0x6288>
    6484:	ldr	x0, [sp, #24]
    6488:	ldr	w1, [x0, #4]
    648c:	ldr	x0, [sp, #16]
    6490:	ldr	w0, [x0, #4]
    6494:	lsl	w0, w0, #1
    6498:	add	w0, w1, w0
    649c:	str	w0, [sp, #52]
    64a0:	ldr	x0, [sp, #16]
    64a4:	ldr	w0, [x0, #4]
    64a8:	sub	w0, w0, #0x1
    64ac:	str	w0, [sp, #60]
    64b0:	ldr	x0, [sp, #24]
    64b4:	ldr	w0, [x0, #4]
    64b8:	sub	w0, w0, #0x1
    64bc:	str	w0, [sp, #56]
    64c0:	b	65a8 <grub_mod_fini+0x6088>
    64c4:	ldr	x0, [sp, #24]
    64c8:	ldr	x1, [x0, #8]
    64cc:	ldrsw	x0, [sp, #56]
    64d0:	lsl	x0, x0, #2
    64d4:	add	x0, x1, x0
    64d8:	ldr	w1, [x0]
    64dc:	ldr	x0, [sp, #16]
    64e0:	ldr	x2, [x0, #8]
    64e4:	ldrsw	x0, [sp, #60]
    64e8:	lsl	x0, x0, #2
    64ec:	add	x0, x2, x0
    64f0:	ldr	w0, [x0]
    64f4:	cmp	w1, w0
    64f8:	b.ne	6518 <grub_mod_fini+0x5ff8>  // b.any
    64fc:	ldr	w0, [sp, #60]
    6500:	sub	w0, w0, #0x1
    6504:	str	w0, [sp, #60]
    6508:	ldr	w0, [sp, #56]
    650c:	sub	w0, w0, #0x1
    6510:	str	w0, [sp, #56]
    6514:	b	65a8 <grub_mod_fini+0x6088>
    6518:	ldr	x0, [sp, #24]
    651c:	ldr	x1, [x0, #8]
    6520:	ldrsw	x0, [sp, #56]
    6524:	lsl	x0, x0, #2
    6528:	add	x0, x1, x0
    652c:	ldr	w1, [x0]
    6530:	ldr	x0, [sp, #16]
    6534:	ldr	x2, [x0, #8]
    6538:	ldrsw	x0, [sp, #60]
    653c:	lsl	x0, x0, #2
    6540:	add	x0, x2, x0
    6544:	ldr	w0, [x0]
    6548:	cmp	w1, w0
    654c:	b.ge	659c <grub_mod_fini+0x607c>  // b.tcont
    6550:	ldr	x0, [sp, #16]
    6554:	ldr	x1, [x0, #8]
    6558:	ldr	w0, [sp, #60]
    655c:	sub	w2, w0, #0x1
    6560:	str	w2, [sp, #60]
    6564:	sxtw	x0, w0
    6568:	lsl	x0, x0, #2
    656c:	add	x1, x1, x0
    6570:	ldr	x0, [sp, #24]
    6574:	ldr	x2, [x0, #8]
    6578:	ldr	w0, [sp, #52]
    657c:	sub	w0, w0, #0x1
    6580:	str	w0, [sp, #52]
    6584:	ldrsw	x0, [sp, #52]
    6588:	lsl	x0, x0, #2
    658c:	add	x0, x2, x0
    6590:	ldr	w1, [x1]
    6594:	str	w1, [x0]
    6598:	b	65a8 <grub_mod_fini+0x6088>
    659c:	ldr	w0, [sp, #56]
    65a0:	sub	w0, w0, #0x1
    65a4:	str	w0, [sp, #56]
    65a8:	ldr	w0, [sp, #60]
    65ac:	cmp	w0, #0x0
    65b0:	b.lt	65c0 <grub_mod_fini+0x60a0>  // b.tstop
    65b4:	ldr	w0, [sp, #56]
    65b8:	cmp	w0, #0x0
    65bc:	b.ge	64c4 <grub_mod_fini+0x5fa4>  // b.tcont
    65c0:	ldr	w0, [sp, #60]
    65c4:	cmp	w0, #0x0
    65c8:	b.lt	6618 <grub_mod_fini+0x60f8>  // b.tstop
    65cc:	ldr	w0, [sp, #60]
    65d0:	add	w0, w0, #0x1
    65d4:	ldr	w1, [sp, #52]
    65d8:	sub	w0, w1, w0
    65dc:	str	w0, [sp, #52]
    65e0:	ldr	x0, [sp, #24]
    65e4:	ldr	x1, [x0, #8]
    65e8:	ldrsw	x0, [sp, #52]
    65ec:	lsl	x0, x0, #2
    65f0:	add	x3, x1, x0
    65f4:	ldr	x0, [sp, #16]
    65f8:	ldr	x1, [x0, #8]
    65fc:	ldr	w0, [sp, #60]
    6600:	add	w0, w0, #0x1
    6604:	sxtw	x0, w0
    6608:	lsl	x0, x0, #2
    660c:	mov	x2, x0
    6610:	mov	x0, x3
    6614:	bl	1d38 <grub_mod_fini+0x1818>
    6618:	ldr	x0, [sp, #24]
    661c:	ldr	w0, [x0, #4]
    6620:	sub	w0, w0, #0x1
    6624:	str	w0, [sp, #56]
    6628:	ldr	x0, [sp, #24]
    662c:	ldr	w1, [x0, #4]
    6630:	ldr	x0, [sp, #16]
    6634:	ldr	w0, [x0, #4]
    6638:	lsl	w0, w0, #1
    663c:	add	w0, w1, w0
    6640:	sub	w0, w0, #0x1
    6644:	str	w0, [sp, #60]
    6648:	ldr	w1, [sp, #60]
    664c:	ldr	w0, [sp, #52]
    6650:	sub	w0, w1, w0
    6654:	add	w0, w0, #0x1
    6658:	str	w0, [sp, #48]
    665c:	ldr	w0, [sp, #48]
    6660:	cmp	w0, #0x0
    6664:	b.ne	6670 <grub_mod_fini+0x6150>  // b.any
    6668:	mov	w0, #0x0                   	// #0
    666c:	b	67a8 <grub_mod_fini+0x6288>
    6670:	ldr	x0, [sp, #24]
    6674:	ldr	w1, [x0, #4]
    6678:	ldr	w0, [sp, #48]
    667c:	add	w1, w1, w0
    6680:	ldr	x0, [sp, #24]
    6684:	str	w1, [x0, #4]
    6688:	ldr	x0, [sp, #24]
    668c:	ldr	x1, [x0, #8]
    6690:	ldrsw	x0, [sp, #60]
    6694:	lsl	x0, x0, #2
    6698:	add	x0, x1, x0
    669c:	ldr	w1, [x0]
    66a0:	ldr	x0, [sp, #24]
    66a4:	ldr	x2, [x0, #8]
    66a8:	ldrsw	x0, [sp, #56]
    66ac:	lsl	x0, x0, #2
    66b0:	add	x0, x2, x0
    66b4:	ldr	w0, [x0]
    66b8:	cmp	w1, w0
    66bc:	b.le	6720 <grub_mod_fini+0x6200>
    66c0:	ldr	x0, [sp, #24]
    66c4:	ldr	x1, [x0, #8]
    66c8:	ldr	w0, [sp, #60]
    66cc:	sub	w2, w0, #0x1
    66d0:	str	w2, [sp, #60]
    66d4:	sxtw	x0, w0
    66d8:	lsl	x0, x0, #2
    66dc:	add	x1, x1, x0
    66e0:	ldr	x0, [sp, #24]
    66e4:	ldr	x2, [x0, #8]
    66e8:	ldr	w0, [sp, #48]
    66ec:	sub	w3, w0, #0x1
    66f0:	str	w3, [sp, #48]
    66f4:	ldr	w3, [sp, #56]
    66f8:	add	w0, w0, w3
    66fc:	sxtw	x0, w0
    6700:	lsl	x0, x0, #2
    6704:	add	x0, x2, x0
    6708:	ldr	w1, [x1]
    670c:	str	w1, [x0]
    6710:	ldr	w0, [sp, #48]
    6714:	cmp	w0, #0x0
    6718:	b.ne	6688 <grub_mod_fini+0x6168>  // b.any
    671c:	b	67a4 <grub_mod_fini+0x6284>
    6720:	ldr	x0, [sp, #24]
    6724:	ldr	x1, [x0, #8]
    6728:	ldrsw	x0, [sp, #56]
    672c:	lsl	x0, x0, #2
    6730:	add	x1, x1, x0
    6734:	ldr	x0, [sp, #24]
    6738:	ldr	x2, [x0, #8]
    673c:	ldr	w3, [sp, #56]
    6740:	ldr	w0, [sp, #48]
    6744:	add	w0, w3, w0
    6748:	sxtw	x0, w0
    674c:	lsl	x0, x0, #2
    6750:	add	x0, x2, x0
    6754:	ldr	w1, [x1]
    6758:	str	w1, [x0]
    675c:	ldr	w0, [sp, #56]
    6760:	sub	w0, w0, #0x1
    6764:	str	w0, [sp, #56]
    6768:	ldr	w0, [sp, #56]
    676c:	cmp	w0, #0x0
    6770:	b.ge	6688 <grub_mod_fini+0x6168>  // b.tcont
    6774:	ldr	x0, [sp, #24]
    6778:	ldr	x3, [x0, #8]
    677c:	ldr	x0, [sp, #24]
    6780:	ldr	x1, [x0, #8]
    6784:	ldrsw	x0, [sp, #52]
    6788:	lsl	x0, x0, #2
    678c:	add	x1, x1, x0
    6790:	ldrsw	x0, [sp, #48]
    6794:	lsl	x0, x0, #2
    6798:	mov	x2, x0
    679c:	mov	x0, x3
    67a0:	bl	1d38 <grub_mod_fini+0x1818>
    67a4:	mov	w0, #0x0                   	// #0
    67a8:	ldp	x29, x30, [sp], #64
    67ac:	ret
    67b0:	stp	x29, x30, [sp, #-48]!
    67b4:	mov	x29, sp
    67b8:	str	x0, [sp, #24]
    67bc:	str	w1, [sp, #20]
    67c0:	ldr	x0, [sp, #24]
    67c4:	ldr	w0, [x0]
    67c8:	cmp	w0, #0x0
    67cc:	b.ne	67fc <grub_mod_fini+0x62dc>  // b.any
    67d0:	ldr	w1, [sp, #20]
    67d4:	ldr	x0, [sp, #24]
    67d8:	bl	589c <grub_mod_fini+0x537c>
    67dc:	cmp	w0, #0x0
    67e0:	cset	w0, eq  // eq = none
    67e4:	and	w0, w0, #0xff
    67e8:	and	x0, x0, #0xff
    67ec:	cmp	x0, #0x0
    67f0:	cset	w0, ne  // ne = any
    67f4:	and	w0, w0, #0xff
    67f8:	b	69e8 <grub_mod_fini+0x64c8>
    67fc:	ldr	x0, [sp, #24]
    6800:	ldr	w0, [x0, #4]
    6804:	sxtw	x0, w0
    6808:	cmp	x0, #0x0
    680c:	b.ne	683c <grub_mod_fini+0x631c>  // b.any
    6810:	ldr	x0, [sp, #24]
    6814:	ldr	x0, [x0, #8]
    6818:	ldr	w1, [sp, #20]
    681c:	str	w1, [x0]
    6820:	ldr	x0, [sp, #24]
    6824:	ldr	w0, [x0, #4]
    6828:	add	w1, w0, #0x1
    682c:	ldr	x0, [sp, #24]
    6830:	str	w1, [x0, #4]
    6834:	mov	w0, #0x1                   	// #1
    6838:	b	69e8 <grub_mod_fini+0x64c8>
    683c:	ldr	x0, [sp, #24]
    6840:	ldr	w1, [x0]
    6844:	ldr	x0, [sp, #24]
    6848:	ldr	w0, [x0, #4]
    684c:	cmp	w1, w0
    6850:	b.ne	68c0 <grub_mod_fini+0x63a0>  // b.any
    6854:	ldr	x0, [sp, #24]
    6858:	ldr	w0, [x0]
    685c:	lsl	w1, w0, #1
    6860:	ldr	x0, [sp, #24]
    6864:	str	w1, [x0]
    6868:	ldr	x0, [sp, #24]
    686c:	ldr	x2, [x0, #8]
    6870:	ldr	x0, [sp, #24]
    6874:	ldr	w0, [x0]
    6878:	sxtw	x0, w0
    687c:	lsl	x0, x0, #2
    6880:	mov	x1, x0
    6884:	mov	x0, x2
    6888:	bl	2294 <grub_mod_fini+0x1d74>
    688c:	str	x0, [sp, #32]
    6890:	ldr	x0, [sp, #32]
    6894:	cmp	x0, #0x0
    6898:	cset	w0, eq  // eq = none
    689c:	and	w0, w0, #0xff
    68a0:	and	x0, x0, #0xff
    68a4:	cmp	x0, #0x0
    68a8:	b.eq	68b4 <grub_mod_fini+0x6394>  // b.none
    68ac:	mov	w0, #0x0                   	// #0
    68b0:	b	69e8 <grub_mod_fini+0x64c8>
    68b4:	ldr	x0, [sp, #24]
    68b8:	ldr	x1, [sp, #32]
    68bc:	str	x1, [x0, #8]
    68c0:	ldr	x0, [sp, #24]
    68c4:	ldr	x0, [x0, #8]
    68c8:	ldr	w0, [x0]
    68cc:	ldr	w1, [sp, #20]
    68d0:	cmp	w1, w0
    68d4:	b.ge	693c <grub_mod_fini+0x641c>  // b.tcont
    68d8:	str	wzr, [sp, #44]
    68dc:	ldr	x0, [sp, #24]
    68e0:	ldr	w0, [x0, #4]
    68e4:	str	w0, [sp, #44]
    68e8:	b	692c <grub_mod_fini+0x640c>
    68ec:	ldr	x0, [sp, #24]
    68f0:	ldr	x1, [x0, #8]
    68f4:	ldrsw	x0, [sp, #44]
    68f8:	lsl	x0, x0, #2
    68fc:	sub	x0, x0, #0x4
    6900:	add	x1, x1, x0
    6904:	ldr	x0, [sp, #24]
    6908:	ldr	x2, [x0, #8]
    690c:	ldrsw	x0, [sp, #44]
    6910:	lsl	x0, x0, #2
    6914:	add	x0, x2, x0
    6918:	ldr	w1, [x1]
    691c:	str	w1, [x0]
    6920:	ldr	w0, [sp, #44]
    6924:	sub	w0, w0, #0x1
    6928:	str	w0, [sp, #44]
    692c:	ldr	w0, [sp, #44]
    6930:	cmp	w0, #0x0
    6934:	b.gt	68ec <grub_mod_fini+0x63cc>
    6938:	b	69b4 <grub_mod_fini+0x6494>
    693c:	ldr	x0, [sp, #24]
    6940:	ldr	w0, [x0, #4]
    6944:	str	w0, [sp, #44]
    6948:	b	698c <grub_mod_fini+0x646c>
    694c:	ldr	x0, [sp, #24]
    6950:	ldr	x1, [x0, #8]
    6954:	ldrsw	x0, [sp, #44]
    6958:	lsl	x0, x0, #2
    695c:	sub	x0, x0, #0x4
    6960:	add	x1, x1, x0
    6964:	ldr	x0, [sp, #24]
    6968:	ldr	x2, [x0, #8]
    696c:	ldrsw	x0, [sp, #44]
    6970:	lsl	x0, x0, #2
    6974:	add	x0, x2, x0
    6978:	ldr	w1, [x1]
    697c:	str	w1, [x0]
    6980:	ldr	w0, [sp, #44]
    6984:	sub	w0, w0, #0x1
    6988:	str	w0, [sp, #44]
    698c:	ldr	x0, [sp, #24]
    6990:	ldr	x1, [x0, #8]
    6994:	ldrsw	x0, [sp, #44]
    6998:	lsl	x0, x0, #2
    699c:	sub	x0, x0, #0x4
    69a0:	add	x0, x1, x0
    69a4:	ldr	w0, [x0]
    69a8:	ldr	w1, [sp, #20]
    69ac:	cmp	w1, w0
    69b0:	b.lt	694c <grub_mod_fini+0x642c>  // b.tstop
    69b4:	ldr	x0, [sp, #24]
    69b8:	ldr	x1, [x0, #8]
    69bc:	ldrsw	x0, [sp, #44]
    69c0:	lsl	x0, x0, #2
    69c4:	add	x0, x1, x0
    69c8:	ldr	w1, [sp, #20]
    69cc:	str	w1, [x0]
    69d0:	ldr	x0, [sp, #24]
    69d4:	ldr	w0, [x0, #4]
    69d8:	add	w1, w0, #0x1
    69dc:	ldr	x0, [sp, #24]
    69e0:	str	w1, [x0, #4]
    69e4:	mov	w0, #0x1                   	// #1
    69e8:	ldp	x29, x30, [sp], #48
    69ec:	ret
    69f0:	stp	x29, x30, [sp, #-48]!
    69f4:	mov	x29, sp
    69f8:	str	x0, [sp, #24]
    69fc:	str	w1, [sp, #20]
    6a00:	ldr	x0, [sp, #24]
    6a04:	ldr	w1, [x0]
    6a08:	ldr	x0, [sp, #24]
    6a0c:	ldr	w0, [x0, #4]
    6a10:	cmp	w1, w0
    6a14:	b.ne	6a88 <grub_mod_fini+0x6568>  // b.any
    6a18:	ldr	x0, [sp, #24]
    6a1c:	ldr	w0, [x0]
    6a20:	add	w0, w0, #0x1
    6a24:	lsl	w1, w0, #1
    6a28:	ldr	x0, [sp, #24]
    6a2c:	str	w1, [x0]
    6a30:	ldr	x0, [sp, #24]
    6a34:	ldr	x2, [x0, #8]
    6a38:	ldr	x0, [sp, #24]
    6a3c:	ldr	w0, [x0]
    6a40:	sxtw	x0, w0
    6a44:	lsl	x0, x0, #2
    6a48:	mov	x1, x0
    6a4c:	mov	x0, x2
    6a50:	bl	2294 <grub_mod_fini+0x1d74>
    6a54:	str	x0, [sp, #40]
    6a58:	ldr	x0, [sp, #40]
    6a5c:	cmp	x0, #0x0
    6a60:	cset	w0, eq  // eq = none
    6a64:	and	w0, w0, #0xff
    6a68:	and	x0, x0, #0xff
    6a6c:	cmp	x0, #0x0
    6a70:	b.eq	6a7c <grub_mod_fini+0x655c>  // b.none
    6a74:	mov	w0, #0x0                   	// #0
    6a78:	b	6abc <grub_mod_fini+0x659c>
    6a7c:	ldr	x0, [sp, #24]
    6a80:	ldr	x1, [sp, #40]
    6a84:	str	x1, [x0, #8]
    6a88:	ldr	x0, [sp, #24]
    6a8c:	ldr	x1, [x0, #8]
    6a90:	ldr	x0, [sp, #24]
    6a94:	ldr	w0, [x0, #4]
    6a98:	add	w3, w0, #0x1
    6a9c:	ldr	x2, [sp, #24]
    6aa0:	str	w3, [x2, #4]
    6aa4:	sxtw	x0, w0
    6aa8:	lsl	x0, x0, #2
    6aac:	add	x0, x1, x0
    6ab0:	ldr	w1, [sp, #20]
    6ab4:	str	w1, [x0]
    6ab8:	mov	w0, #0x1                   	// #1
    6abc:	ldp	x29, x30, [sp], #48
    6ac0:	ret
    6ac4:	sub	sp, sp, #0x20
    6ac8:	str	x0, [sp, #8]
    6acc:	str	x1, [sp]
    6ad0:	ldr	x0, [sp, #8]
    6ad4:	cmp	x0, #0x0
    6ad8:	b.eq	6b00 <grub_mod_fini+0x65e0>  // b.none
    6adc:	ldr	x0, [sp]
    6ae0:	cmp	x0, #0x0
    6ae4:	b.eq	6b00 <grub_mod_fini+0x65e0>  // b.none
    6ae8:	ldr	x0, [sp, #8]
    6aec:	ldr	w1, [x0, #4]
    6af0:	ldr	x0, [sp]
    6af4:	ldr	w0, [x0, #4]
    6af8:	cmp	w1, w0
    6afc:	b.eq	6b08 <grub_mod_fini+0x65e8>  // b.none
    6b00:	mov	w0, #0x0                   	// #0
    6b04:	b	6b74 <grub_mod_fini+0x6654>
    6b08:	ldr	x0, [sp, #8]
    6b0c:	ldr	w0, [x0, #4]
    6b10:	str	w0, [sp, #28]
    6b14:	b	6b58 <grub_mod_fini+0x6638>
    6b18:	ldr	x0, [sp, #8]
    6b1c:	ldr	x1, [x0, #8]
    6b20:	ldrsw	x0, [sp, #28]
    6b24:	lsl	x0, x0, #2
    6b28:	add	x0, x1, x0
    6b2c:	ldr	w1, [x0]
    6b30:	ldr	x0, [sp]
    6b34:	ldr	x2, [x0, #8]
    6b38:	ldrsw	x0, [sp, #28]
    6b3c:	lsl	x0, x0, #2
    6b40:	add	x0, x2, x0
    6b44:	ldr	w0, [x0]
    6b48:	cmp	w1, w0
    6b4c:	b.eq	6b58 <grub_mod_fini+0x6638>  // b.none
    6b50:	mov	w0, #0x0                   	// #0
    6b54:	b	6b74 <grub_mod_fini+0x6654>
    6b58:	ldr	w0, [sp, #28]
    6b5c:	sub	w0, w0, #0x1
    6b60:	str	w0, [sp, #28]
    6b64:	ldr	w0, [sp, #28]
    6b68:	cmp	w0, #0x0
    6b6c:	b.ge	6b18 <grub_mod_fini+0x65f8>  // b.tcont
    6b70:	mov	w0, #0x1                   	// #1
    6b74:	add	sp, sp, #0x20
    6b78:	ret
    6b7c:	sub	sp, sp, #0x20
    6b80:	str	x0, [sp, #8]
    6b84:	str	w1, [sp, #4]
    6b88:	ldr	x0, [sp, #8]
    6b8c:	ldr	w0, [x0, #4]
    6b90:	cmp	w0, #0x0
    6b94:	b.gt	6ba0 <grub_mod_fini+0x6680>
    6b98:	mov	w0, #0x0                   	// #0
    6b9c:	b	6c4c <grub_mod_fini+0x672c>
    6ba0:	str	wzr, [sp, #28]
    6ba4:	ldr	x0, [sp, #8]
    6ba8:	ldr	w0, [x0, #4]
    6bac:	sub	w0, w0, #0x1
    6bb0:	str	w0, [sp, #24]
    6bb4:	b	6c08 <grub_mod_fini+0x66e8>
    6bb8:	ldr	w1, [sp, #28]
    6bbc:	ldr	w0, [sp, #24]
    6bc0:	add	w0, w1, w0
    6bc4:	lsr	w0, w0, #1
    6bc8:	str	w0, [sp, #20]
    6bcc:	ldr	x0, [sp, #8]
    6bd0:	ldr	x1, [x0, #8]
    6bd4:	ldr	w0, [sp, #20]
    6bd8:	lsl	x0, x0, #2
    6bdc:	add	x0, x1, x0
    6be0:	ldr	w0, [x0]
    6be4:	ldr	w1, [sp, #4]
    6be8:	cmp	w1, w0
    6bec:	b.le	6c00 <grub_mod_fini+0x66e0>
    6bf0:	ldr	w0, [sp, #20]
    6bf4:	add	w0, w0, #0x1
    6bf8:	str	w0, [sp, #28]
    6bfc:	b	6c08 <grub_mod_fini+0x66e8>
    6c00:	ldr	w0, [sp, #20]
    6c04:	str	w0, [sp, #24]
    6c08:	ldr	w1, [sp, #28]
    6c0c:	ldr	w0, [sp, #24]
    6c10:	cmp	w1, w0
    6c14:	b.cc	6bb8 <grub_mod_fini+0x6698>  // b.lo, b.ul, b.last
    6c18:	ldr	x0, [sp, #8]
    6c1c:	ldr	x1, [x0, #8]
    6c20:	ldr	w0, [sp, #28]
    6c24:	lsl	x0, x0, #2
    6c28:	add	x0, x1, x0
    6c2c:	ldr	w0, [x0]
    6c30:	ldr	w1, [sp, #4]
    6c34:	cmp	w1, w0
    6c38:	b.ne	6c48 <grub_mod_fini+0x6728>  // b.any
    6c3c:	ldr	w0, [sp, #28]
    6c40:	add	w0, w0, #0x1
    6c44:	b	6c4c <grub_mod_fini+0x672c>
    6c48:	mov	w0, #0x0                   	// #0
    6c4c:	add	sp, sp, #0x20
    6c50:	ret
    6c54:	sub	sp, sp, #0x10
    6c58:	str	x0, [sp, #8]
    6c5c:	str	w1, [sp, #4]
    6c60:	ldr	w0, [sp, #4]
    6c64:	cmp	w0, #0x0
    6c68:	b.lt	6cf0 <grub_mod_fini+0x67d0>  // b.tstop
    6c6c:	ldr	x0, [sp, #8]
    6c70:	ldr	w0, [x0, #4]
    6c74:	ldr	w1, [sp, #4]
    6c78:	cmp	w1, w0
    6c7c:	b.ge	6cf0 <grub_mod_fini+0x67d0>  // b.tcont
    6c80:	ldr	x0, [sp, #8]
    6c84:	ldr	w0, [x0, #4]
    6c88:	sub	w1, w0, #0x1
    6c8c:	ldr	x0, [sp, #8]
    6c90:	str	w1, [x0, #4]
    6c94:	b	6cd8 <grub_mod_fini+0x67b8>
    6c98:	ldr	x0, [sp, #8]
    6c9c:	ldr	x1, [x0, #8]
    6ca0:	ldrsw	x0, [sp, #4]
    6ca4:	add	x0, x0, #0x1
    6ca8:	lsl	x0, x0, #2
    6cac:	add	x1, x1, x0
    6cb0:	ldr	x0, [sp, #8]
    6cb4:	ldr	x2, [x0, #8]
    6cb8:	ldrsw	x0, [sp, #4]
    6cbc:	lsl	x0, x0, #2
    6cc0:	add	x0, x2, x0
    6cc4:	ldr	w1, [x1]
    6cc8:	str	w1, [x0]
    6ccc:	ldr	w0, [sp, #4]
    6cd0:	add	w0, w0, #0x1
    6cd4:	str	w0, [sp, #4]
    6cd8:	ldr	x0, [sp, #8]
    6cdc:	ldr	w0, [x0, #4]
    6ce0:	ldr	w1, [sp, #4]
    6ce4:	cmp	w1, w0
    6ce8:	b.lt	6c98 <grub_mod_fini+0x6778>  // b.tstop
    6cec:	b	6cf4 <grub_mod_fini+0x67d4>
    6cf0:	nop
    6cf4:	add	sp, sp, #0x10
    6cf8:	ret
    6cfc:	stp	x29, x30, [sp, #-112]!
    6d00:	mov	x29, sp
    6d04:	str	x0, [sp, #40]
    6d08:	stp	x1, x2, [sp, #24]
    6d0c:	ldr	x0, [sp, #40]
    6d10:	ldr	x1, [x0, #16]
    6d14:	ldr	x0, [sp, #40]
    6d18:	ldr	x0, [x0, #8]
    6d1c:	cmp	x1, x0
    6d20:	cset	w0, cs  // cs = hs, nlast
    6d24:	and	w0, w0, #0xff
    6d28:	and	x0, x0, #0xff
    6d2c:	cmp	x0, #0x0
    6d30:	b.eq	6f58 <grub_mod_fini+0x6a38>  // b.none
    6d34:	ldr	x0, [sp, #40]
    6d38:	ldr	x0, [x0, #8]
    6d3c:	lsl	x0, x0, #1
    6d40:	str	x0, [sp, #104]
    6d44:	mov	x0, #0x10                  	// #16
    6d48:	str	x0, [sp, #96]
    6d4c:	mov	x1, #0xffffffffffffffff    	// #-1
    6d50:	ldr	x0, [sp, #96]
    6d54:	udiv	x0, x1, x0
    6d58:	mov	x2, #0x7fffffff            	// #2147483647
    6d5c:	mov	x1, #0x7fffffff            	// #2147483647
    6d60:	cmp	x0, x2
    6d64:	csel	x0, x0, x1, ls  // ls = plast
    6d68:	ldr	x1, [sp, #104]
    6d6c:	cmp	x1, x0
    6d70:	cset	w0, hi  // hi = pmore
    6d74:	and	w0, w0, #0xff
    6d78:	and	x0, x0, #0xff
    6d7c:	cmp	x0, #0x0
    6d80:	b.eq	6d8c <grub_mod_fini+0x686c>  // b.none
    6d84:	mov	w0, #0xffffffff            	// #-1
    6d88:	b	707c <grub_mod_fini+0x6b5c>
    6d8c:	ldr	x0, [sp, #40]
    6d90:	ldr	x2, [x0]
    6d94:	ldr	x0, [sp, #104]
    6d98:	lsl	x0, x0, #4
    6d9c:	mov	x1, x0
    6da0:	mov	x0, x2
    6da4:	bl	2294 <grub_mod_fini+0x1d74>
    6da8:	str	x0, [sp, #88]
    6dac:	ldr	x0, [sp, #88]
    6db0:	cmp	x0, #0x0
    6db4:	cset	w0, eq  // eq = none
    6db8:	and	w0, w0, #0xff
    6dbc:	and	x0, x0, #0xff
    6dc0:	cmp	x0, #0x0
    6dc4:	b.eq	6dd0 <grub_mod_fini+0x68b0>  // b.none
    6dc8:	mov	w0, #0xffffffff            	// #-1
    6dcc:	b	707c <grub_mod_fini+0x6b5c>
    6dd0:	ldr	x0, [sp, #40]
    6dd4:	ldr	x1, [sp, #88]
    6dd8:	str	x1, [x0]
    6ddc:	ldr	x0, [sp, #40]
    6de0:	ldr	x2, [x0, #24]
    6de4:	ldr	x0, [sp, #104]
    6de8:	lsl	x0, x0, #2
    6dec:	mov	x1, x0
    6df0:	mov	x0, x2
    6df4:	bl	2294 <grub_mod_fini+0x1d74>
    6df8:	str	x0, [sp, #80]
    6dfc:	ldr	x0, [sp, #40]
    6e00:	ldr	x2, [x0, #32]
    6e04:	ldr	x0, [sp, #104]
    6e08:	lsl	x0, x0, #2
    6e0c:	mov	x1, x0
    6e10:	mov	x0, x2
    6e14:	bl	2294 <grub_mod_fini+0x1d74>
    6e18:	str	x0, [sp, #72]
    6e1c:	ldr	x0, [sp, #40]
    6e20:	ldr	x2, [x0, #40]
    6e24:	ldr	x0, [sp, #104]
    6e28:	lsl	x0, x0, #4
    6e2c:	mov	x1, x0
    6e30:	mov	x0, x2
    6e34:	bl	2294 <grub_mod_fini+0x1d74>
    6e38:	str	x0, [sp, #64]
    6e3c:	ldr	x0, [sp, #40]
    6e40:	ldr	x2, [x0, #48]
    6e44:	ldr	x0, [sp, #104]
    6e48:	lsl	x0, x0, #4
    6e4c:	mov	x1, x0
    6e50:	mov	x0, x2
    6e54:	bl	2294 <grub_mod_fini+0x1d74>
    6e58:	str	x0, [sp, #56]
    6e5c:	ldr	x0, [sp, #80]
    6e60:	cmp	x0, #0x0
    6e64:	cset	w0, eq  // eq = none
    6e68:	and	w0, w0, #0xff
    6e6c:	and	x0, x0, #0xff
    6e70:	cmp	x0, #0x0
    6e74:	b.ne	6e94 <grub_mod_fini+0x6974>  // b.any
    6e78:	ldr	x0, [sp, #72]
    6e7c:	cmp	x0, #0x0
    6e80:	cset	w0, eq  // eq = none
    6e84:	and	w0, w0, #0xff
    6e88:	and	x0, x0, #0xff
    6e8c:	cmp	x0, #0x0
    6e90:	b.eq	6e9c <grub_mod_fini+0x697c>  // b.none
    6e94:	mov	w0, #0x1                   	// #1
    6e98:	b	6ea0 <grub_mod_fini+0x6980>
    6e9c:	mov	w0, #0x0                   	// #0
    6ea0:	cmp	w0, #0x0
    6ea4:	b.ne	6ec4 <grub_mod_fini+0x69a4>  // b.any
    6ea8:	ldr	x0, [sp, #64]
    6eac:	cmp	x0, #0x0
    6eb0:	cset	w0, eq  // eq = none
    6eb4:	and	w0, w0, #0xff
    6eb8:	and	x0, x0, #0xff
    6ebc:	cmp	x0, #0x0
    6ec0:	b.eq	6ecc <grub_mod_fini+0x69ac>  // b.none
    6ec4:	mov	w0, #0x1                   	// #1
    6ec8:	b	6ed0 <grub_mod_fini+0x69b0>
    6ecc:	mov	w0, #0x0                   	// #0
    6ed0:	cmp	w0, #0x0
    6ed4:	b.ne	6ef4 <grub_mod_fini+0x69d4>  // b.any
    6ed8:	ldr	x0, [sp, #56]
    6edc:	cmp	x0, #0x0
    6ee0:	cset	w0, eq  // eq = none
    6ee4:	and	w0, w0, #0xff
    6ee8:	and	x0, x0, #0xff
    6eec:	cmp	x0, #0x0
    6ef0:	b.eq	6f1c <grub_mod_fini+0x69fc>  // b.none
    6ef4:	ldr	x0, [sp, #80]
    6ef8:	bl	2230 <grub_mod_fini+0x1d10>
    6efc:	ldr	x0, [sp, #72]
    6f00:	bl	2230 <grub_mod_fini+0x1d10>
    6f04:	ldr	x0, [sp, #64]
    6f08:	bl	2230 <grub_mod_fini+0x1d10>
    6f0c:	ldr	x0, [sp, #56]
    6f10:	bl	2230 <grub_mod_fini+0x1d10>
    6f14:	mov	w0, #0xffffffff            	// #-1
    6f18:	b	707c <grub_mod_fini+0x6b5c>
    6f1c:	ldr	x0, [sp, #40]
    6f20:	ldr	x1, [sp, #80]
    6f24:	str	x1, [x0, #24]
    6f28:	ldr	x0, [sp, #40]
    6f2c:	ldr	x1, [sp, #72]
    6f30:	str	x1, [x0, #32]
    6f34:	ldr	x0, [sp, #40]
    6f38:	ldr	x1, [sp, #64]
    6f3c:	str	x1, [x0, #40]
    6f40:	ldr	x0, [sp, #40]
    6f44:	ldr	x1, [sp, #56]
    6f48:	str	x1, [x0, #48]
    6f4c:	ldr	x0, [sp, #40]
    6f50:	ldr	x1, [sp, #104]
    6f54:	str	x1, [x0, #8]
    6f58:	ldr	x0, [sp, #40]
    6f5c:	ldr	x1, [x0]
    6f60:	ldr	x0, [sp, #40]
    6f64:	ldr	x0, [x0, #16]
    6f68:	lsl	x0, x0, #4
    6f6c:	add	x2, x1, x0
    6f70:	ldp	x0, x1, [sp, #24]
    6f74:	stp	x0, x1, [x2]
    6f78:	ldr	x0, [sp, #40]
    6f7c:	ldr	x1, [x0]
    6f80:	ldr	x0, [sp, #40]
    6f84:	ldr	x0, [x0, #16]
    6f88:	lsl	x0, x0, #4
    6f8c:	add	x0, x1, x0
    6f90:	ldr	w1, [x0, #8]
    6f94:	and	w1, w1, #0xfffc00ff
    6f98:	str	w1, [x0, #8]
    6f9c:	ldrb	w0, [sp, #32]
    6fa0:	cmp	w0, #0x5
    6fa4:	b.ne	6fb8 <grub_mod_fini+0x6a98>  // b.any
    6fa8:	ldr	x0, [sp, #40]
    6fac:	ldr	w0, [x0, #164]
    6fb0:	cmp	w0, #0x1
    6fb4:	b.gt	6fc4 <grub_mod_fini+0x6aa4>
    6fb8:	ldrb	w0, [sp, #32]
    6fbc:	cmp	w0, #0x6
    6fc0:	b.ne	6fcc <grub_mod_fini+0x6aac>  // b.any
    6fc4:	mov	w2, #0x1                   	// #1
    6fc8:	b	6fd0 <grub_mod_fini+0x6ab0>
    6fcc:	mov	w2, #0x0                   	// #0
    6fd0:	ldr	x0, [sp, #40]
    6fd4:	ldr	x1, [x0]
    6fd8:	ldr	x0, [sp, #40]
    6fdc:	ldr	x0, [x0, #16]
    6fe0:	lsl	x0, x0, #4
    6fe4:	add	x1, x1, x0
    6fe8:	mov	w0, w2
    6fec:	and	w0, w0, #0x1
    6ff0:	and	w2, w0, #0xff
    6ff4:	ldrb	w0, [x1, #10]
    6ff8:	bfi	w0, w2, #4, #1
    6ffc:	strb	w0, [x1, #10]
    7000:	ldr	x0, [sp, #40]
    7004:	ldr	x1, [x0, #24]
    7008:	ldr	x0, [sp, #40]
    700c:	ldr	x0, [x0, #16]
    7010:	lsl	x0, x0, #2
    7014:	add	x0, x1, x0
    7018:	mov	w1, #0xffffffff            	// #-1
    701c:	str	w1, [x0]
    7020:	ldr	x0, [sp, #40]
    7024:	ldr	x1, [x0, #40]
    7028:	ldr	x0, [sp, #40]
    702c:	ldr	x0, [x0, #16]
    7030:	lsl	x0, x0, #4
    7034:	add	x0, x1, x0
    7038:	mov	x2, #0x10                  	// #16
    703c:	mov	w1, #0x0                   	// #0
    7040:	bl	0 <grub_memset>
    7044:	ldr	x0, [sp, #40]
    7048:	ldr	x1, [x0, #48]
    704c:	ldr	x0, [sp, #40]
    7050:	ldr	x0, [x0, #16]
    7054:	lsl	x0, x0, #4
    7058:	add	x0, x1, x0
    705c:	mov	x2, #0x10                  	// #16
    7060:	mov	w1, #0x0                   	// #0
    7064:	bl	0 <grub_memset>
    7068:	ldr	x0, [sp, #40]
    706c:	ldr	x0, [x0, #16]
    7070:	add	x2, x0, #0x1
    7074:	ldr	x1, [sp, #40]
    7078:	str	x2, [x1, #16]
    707c:	ldp	x29, x30, [sp], #112
    7080:	ret
    7084:	sub	sp, sp, #0x20
    7088:	str	x0, [sp, #8]
    708c:	str	w1, [sp, #4]
    7090:	ldr	x0, [sp, #8]
    7094:	ldr	w0, [x0, #4]
    7098:	mov	w1, w0
    709c:	ldr	w0, [sp, #4]
    70a0:	add	w0, w0, w1
    70a4:	str	w0, [sp, #28]
    70a8:	str	wzr, [sp, #24]
    70ac:	b	70e4 <grub_mod_fini+0x6bc4>
    70b0:	ldr	x0, [sp, #8]
    70b4:	ldr	x1, [x0, #8]
    70b8:	ldrsw	x0, [sp, #24]
    70bc:	lsl	x0, x0, #2
    70c0:	add	x0, x1, x0
    70c4:	ldr	w0, [x0]
    70c8:	mov	w1, w0
    70cc:	ldr	w0, [sp, #28]
    70d0:	add	w0, w0, w1
    70d4:	str	w0, [sp, #28]
    70d8:	ldr	w0, [sp, #24]
    70dc:	add	w0, w0, #0x1
    70e0:	str	w0, [sp, #24]
    70e4:	ldr	x0, [sp, #8]
    70e8:	ldr	w0, [x0, #4]
    70ec:	ldr	w1, [sp, #24]
    70f0:	cmp	w1, w0
    70f4:	b.lt	70b0 <grub_mod_fini+0x6b90>  // b.tstop
    70f8:	ldr	w0, [sp, #28]
    70fc:	add	sp, sp, #0x20
    7100:	ret
    7104:	stp	x29, x30, [sp, #-80]!
    7108:	mov	x29, sp
    710c:	str	x0, [sp, #40]
    7110:	str	x1, [sp, #32]
    7114:	str	x2, [sp, #24]
    7118:	ldr	x0, [sp, #24]
    711c:	ldr	w0, [x0, #4]
    7120:	cmp	w0, #0x0
    7124:	cset	w0, eq  // eq = none
    7128:	and	w0, w0, #0xff
    712c:	and	x0, x0, #0xff
    7130:	cmp	x0, #0x0
    7134:	b.eq	7148 <grub_mod_fini+0x6c28>  // b.none
    7138:	ldr	x0, [sp, #40]
    713c:	str	wzr, [x0]
    7140:	mov	x0, #0x0                   	// #0
    7144:	b	7240 <grub_mod_fini+0x6d20>
    7148:	mov	w1, #0x0                   	// #0
    714c:	ldr	x0, [sp, #24]
    7150:	bl	7084 <grub_mod_fini+0x6b64>
    7154:	str	w0, [sp, #72]
    7158:	ldr	x0, [sp, #32]
    715c:	ldr	x1, [x0, #64]
    7160:	ldr	x0, [sp, #32]
    7164:	ldr	w2, [x0, #132]
    7168:	ldr	w0, [sp, #72]
    716c:	and	w0, w2, w0
    7170:	mov	w0, w0
    7174:	lsl	x0, x0, #4
    7178:	add	x0, x1, x0
    717c:	str	x0, [sp, #64]
    7180:	str	wzr, [sp, #76]
    7184:	b	71ec <grub_mod_fini+0x6ccc>
    7188:	ldr	x0, [sp, #64]
    718c:	ldr	x1, [x0, #8]
    7190:	ldrsw	x0, [sp, #76]
    7194:	lsl	x0, x0, #3
    7198:	add	x0, x1, x0
    719c:	ldr	x0, [x0]
    71a0:	str	x0, [sp, #48]
    71a4:	ldr	x0, [sp, #48]
    71a8:	ldr	w0, [x0]
    71ac:	ldr	w1, [sp, #72]
    71b0:	cmp	w1, w0
    71b4:	b.ne	71dc <grub_mod_fini+0x6cbc>  // b.any
    71b8:	ldr	x0, [sp, #48]
    71bc:	add	x0, x0, #0x8
    71c0:	ldr	x1, [sp, #24]
    71c4:	bl	6ac4 <grub_mod_fini+0x65a4>
    71c8:	and	w0, w0, #0xff
    71cc:	cmp	w0, #0x0
    71d0:	b.eq	71e0 <grub_mod_fini+0x6cc0>  // b.none
    71d4:	ldr	x0, [sp, #48]
    71d8:	b	7240 <grub_mod_fini+0x6d20>
    71dc:	nop
    71e0:	ldr	w0, [sp, #76]
    71e4:	add	w0, w0, #0x1
    71e8:	str	w0, [sp, #76]
    71ec:	ldr	x0, [sp, #64]
    71f0:	ldr	w0, [x0]
    71f4:	ldr	w1, [sp, #76]
    71f8:	cmp	w1, w0
    71fc:	b.lt	7188 <grub_mod_fini+0x6c68>  // b.tstop
    7200:	ldr	w2, [sp, #72]
    7204:	ldr	x1, [sp, #24]
    7208:	ldr	x0, [sp, #32]
    720c:	bl	7624 <grub_mod_fini+0x7104>
    7210:	str	x0, [sp, #56]
    7214:	ldr	x0, [sp, #56]
    7218:	cmp	x0, #0x0
    721c:	cset	w0, eq  // eq = none
    7220:	and	w0, w0, #0xff
    7224:	and	x0, x0, #0xff
    7228:	cmp	x0, #0x0
    722c:	b.eq	723c <grub_mod_fini+0x6d1c>  // b.none
    7230:	ldr	x0, [sp, #40]
    7234:	mov	w1, #0xc                   	// #12
    7238:	str	w1, [x0]
    723c:	ldr	x0, [sp, #56]
    7240:	ldp	x29, x30, [sp], #80
    7244:	ret
    7248:	stp	x29, x30, [sp, #-80]!
    724c:	mov	x29, sp
    7250:	str	x0, [sp, #40]
    7254:	str	x1, [sp, #32]
    7258:	str	x2, [sp, #24]
    725c:	str	w3, [sp, #20]
    7260:	ldr	x0, [sp, #24]
    7264:	ldr	w0, [x0, #4]
    7268:	cmp	w0, #0x0
    726c:	b.ne	7280 <grub_mod_fini+0x6d60>  // b.any
    7270:	ldr	x0, [sp, #40]
    7274:	str	wzr, [x0]
    7278:	mov	x0, #0x0                   	// #0
    727c:	b	7398 <grub_mod_fini+0x6e78>
    7280:	ldr	w1, [sp, #20]
    7284:	ldr	x0, [sp, #24]
    7288:	bl	7084 <grub_mod_fini+0x6b64>
    728c:	str	w0, [sp, #72]
    7290:	ldr	x0, [sp, #32]
    7294:	ldr	x1, [x0, #64]
    7298:	ldr	x0, [sp, #32]
    729c:	ldr	w2, [x0, #132]
    72a0:	ldr	w0, [sp, #72]
    72a4:	and	w0, w2, w0
    72a8:	mov	w0, w0
    72ac:	lsl	x0, x0, #4
    72b0:	add	x0, x1, x0
    72b4:	str	x0, [sp, #64]
    72b8:	str	wzr, [sp, #76]
    72bc:	b	7340 <grub_mod_fini+0x6e20>
    72c0:	ldr	x0, [sp, #64]
    72c4:	ldr	x1, [x0, #8]
    72c8:	ldrsw	x0, [sp, #76]
    72cc:	lsl	x0, x0, #3
    72d0:	add	x0, x1, x0
    72d4:	ldr	x0, [x0]
    72d8:	str	x0, [sp, #48]
    72dc:	ldr	x0, [sp, #48]
    72e0:	ldr	w0, [x0]
    72e4:	ldr	w1, [sp, #72]
    72e8:	cmp	w1, w0
    72ec:	b.ne	7334 <grub_mod_fini+0x6e14>  // b.any
    72f0:	ldr	x0, [sp, #48]
    72f4:	ldrb	w0, [x0, #80]
    72f8:	ubfx	x0, x0, #0, #4
    72fc:	and	w0, w0, #0xff
    7300:	mov	w1, w0
    7304:	ldr	w0, [sp, #20]
    7308:	cmp	w0, w1
    730c:	b.ne	7334 <grub_mod_fini+0x6e14>  // b.any
    7310:	ldr	x0, [sp, #48]
    7314:	ldr	x0, [x0, #56]
    7318:	ldr	x1, [sp, #24]
    731c:	bl	6ac4 <grub_mod_fini+0x65a4>
    7320:	and	w0, w0, #0xff
    7324:	cmp	w0, #0x0
    7328:	b.eq	7334 <grub_mod_fini+0x6e14>  // b.none
    732c:	ldr	x0, [sp, #48]
    7330:	b	7398 <grub_mod_fini+0x6e78>
    7334:	ldr	w0, [sp, #76]
    7338:	add	w0, w0, #0x1
    733c:	str	w0, [sp, #76]
    7340:	ldr	x0, [sp, #64]
    7344:	ldr	w0, [x0]
    7348:	ldr	w1, [sp, #76]
    734c:	cmp	w1, w0
    7350:	b.lt	72c0 <grub_mod_fini+0x6da0>  // b.tstop
    7354:	ldr	w3, [sp, #72]
    7358:	ldr	w2, [sp, #20]
    735c:	ldr	x1, [sp, #24]
    7360:	ldr	x0, [sp, #32]
    7364:	bl	7838 <grub_mod_fini+0x7318>
    7368:	str	x0, [sp, #56]
    736c:	ldr	x0, [sp, #56]
    7370:	cmp	x0, #0x0
    7374:	cset	w0, eq  // eq = none
    7378:	and	w0, w0, #0xff
    737c:	and	x0, x0, #0xff
    7380:	cmp	x0, #0x0
    7384:	b.eq	7394 <grub_mod_fini+0x6e74>  // b.none
    7388:	ldr	x0, [sp, #40]
    738c:	mov	w1, #0xc                   	// #12
    7390:	str	w1, [x0]
    7394:	ldr	x0, [sp, #56]
    7398:	ldp	x29, x30, [sp], #80
    739c:	ret
    73a0:	stp	x29, x30, [sp, #-96]!
    73a4:	mov	x29, sp
    73a8:	str	x0, [sp, #40]
    73ac:	str	x1, [sp, #32]
    73b0:	str	w2, [sp, #28]
    73b4:	ldr	x0, [sp, #32]
    73b8:	ldr	w1, [sp, #28]
    73bc:	str	w1, [x0]
    73c0:	ldr	x0, [sp, #32]
    73c4:	add	x2, x0, #0x18
    73c8:	ldr	x0, [sp, #32]
    73cc:	ldr	w0, [x0, #12]
    73d0:	mov	w1, w0
    73d4:	mov	x0, x2
    73d8:	bl	5820 <grub_mod_fini+0x5300>
    73dc:	str	w0, [sp, #88]
    73e0:	ldr	w0, [sp, #88]
    73e4:	cmp	w0, #0x0
    73e8:	cset	w0, ne  // ne = any
    73ec:	and	w0, w0, #0xff
    73f0:	and	x0, x0, #0xff
    73f4:	cmp	x0, #0x0
    73f8:	b.eq	7404 <grub_mod_fini+0x6ee4>  // b.none
    73fc:	mov	w0, #0xc                   	// #12
    7400:	b	758c <grub_mod_fini+0x706c>
    7404:	str	wzr, [sp, #92]
    7408:	b	7484 <grub_mod_fini+0x6f64>
    740c:	ldr	x0, [sp, #32]
    7410:	ldr	x1, [x0, #16]
    7414:	ldrsw	x0, [sp, #92]
    7418:	lsl	x0, x0, #2
    741c:	add	x0, x1, x0
    7420:	ldr	w0, [x0]
    7424:	str	w0, [sp, #60]
    7428:	ldr	x0, [sp, #40]
    742c:	ldr	x1, [x0]
    7430:	ldrsw	x0, [sp, #60]
    7434:	lsl	x0, x0, #4
    7438:	add	x0, x1, x0
    743c:	ldrb	w0, [x0, #8]
    7440:	and	w0, w0, #0x8
    7444:	cmp	w0, #0x0
    7448:	b.ne	7478 <grub_mod_fini+0x6f58>  // b.any
    744c:	ldr	x0, [sp, #32]
    7450:	add	x0, x0, #0x18
    7454:	ldr	w1, [sp, #60]
    7458:	bl	69f0 <grub_mod_fini+0x64d0>
    745c:	and	w0, w0, #0xff
    7460:	eor	w0, w0, #0x1
    7464:	and	w0, w0, #0xff
    7468:	cmp	w0, #0x0
    746c:	b.eq	7478 <grub_mod_fini+0x6f58>  // b.none
    7470:	mov	w0, #0xc                   	// #12
    7474:	b	758c <grub_mod_fini+0x706c>
    7478:	ldr	w0, [sp, #92]
    747c:	add	w0, w0, #0x1
    7480:	str	w0, [sp, #92]
    7484:	ldr	x0, [sp, #32]
    7488:	ldr	w0, [x0, #12]
    748c:	ldr	w1, [sp, #92]
    7490:	cmp	w1, w0
    7494:	b.lt	740c <grub_mod_fini+0x6eec>  // b.tstop
    7498:	ldr	x0, [sp, #40]
    749c:	ldr	x1, [x0, #64]
    74a0:	ldr	x0, [sp, #40]
    74a4:	ldr	w2, [x0, #132]
    74a8:	ldr	w0, [sp, #28]
    74ac:	and	w0, w2, w0
    74b0:	mov	w0, w0
    74b4:	lsl	x0, x0, #4
    74b8:	add	x0, x1, x0
    74bc:	str	x0, [sp, #80]
    74c0:	ldr	x0, [sp, #80]
    74c4:	ldr	w1, [x0, #4]
    74c8:	ldr	x0, [sp, #80]
    74cc:	ldr	w0, [x0]
    74d0:	cmp	w1, w0
    74d4:	cset	w0, le
    74d8:	and	w0, w0, #0xff
    74dc:	and	x0, x0, #0xff
    74e0:	cmp	x0, #0x0
    74e4:	b.eq	7558 <grub_mod_fini+0x7038>  // b.none
    74e8:	ldr	x0, [sp, #80]
    74ec:	ldr	w0, [x0]
    74f0:	add	w0, w0, #0x1
    74f4:	lsl	w0, w0, #1
    74f8:	str	w0, [sp, #76]
    74fc:	ldr	x0, [sp, #80]
    7500:	ldr	x2, [x0, #8]
    7504:	ldrsw	x0, [sp, #76]
    7508:	lsl	x0, x0, #3
    750c:	mov	x1, x0
    7510:	mov	x0, x2
    7514:	bl	2294 <grub_mod_fini+0x1d74>
    7518:	str	x0, [sp, #64]
    751c:	ldr	x0, [sp, #64]
    7520:	cmp	x0, #0x0
    7524:	cset	w0, eq  // eq = none
    7528:	and	w0, w0, #0xff
    752c:	and	x0, x0, #0xff
    7530:	cmp	x0, #0x0
    7534:	b.eq	7540 <grub_mod_fini+0x7020>  // b.none
    7538:	mov	w0, #0xc                   	// #12
    753c:	b	758c <grub_mod_fini+0x706c>
    7540:	ldr	x0, [sp, #80]
    7544:	ldr	x1, [sp, #64]
    7548:	str	x1, [x0, #8]
    754c:	ldr	x0, [sp, #80]
    7550:	ldr	w1, [sp, #76]
    7554:	str	w1, [x0, #4]
    7558:	ldr	x0, [sp, #80]
    755c:	ldr	x1, [x0, #8]
    7560:	ldr	x0, [sp, #80]
    7564:	ldr	w0, [x0]
    7568:	add	w3, w0, #0x1
    756c:	ldr	x2, [sp, #80]
    7570:	str	w3, [x2]
    7574:	sxtw	x0, w0
    7578:	lsl	x0, x0, #3
    757c:	add	x0, x1, x0
    7580:	ldr	x1, [sp, #32]
    7584:	str	x1, [x0]
    7588:	mov	w0, #0x0                   	// #0
    758c:	ldp	x29, x30, [sp], #96
    7590:	ret
    7594:	stp	x29, x30, [sp, #-32]!
    7598:	mov	x29, sp
    759c:	str	x0, [sp, #24]
    75a0:	ldr	x0, [sp, #24]
    75a4:	ldr	x0, [x0, #32]
    75a8:	bl	2230 <grub_mod_fini+0x1d10>
    75ac:	ldr	x0, [sp, #24]
    75b0:	ldr	x0, [x0, #48]
    75b4:	bl	2230 <grub_mod_fini+0x1d10>
    75b8:	ldr	x0, [sp, #24]
    75bc:	ldr	x1, [x0, #56]
    75c0:	ldr	x0, [sp, #24]
    75c4:	add	x0, x0, #0x8
    75c8:	cmp	x1, x0
    75cc:	b.eq	75ec <grub_mod_fini+0x70cc>  // b.none
    75d0:	ldr	x0, [sp, #24]
    75d4:	ldr	x0, [x0, #56]
    75d8:	ldr	x0, [x0, #8]
    75dc:	bl	2230 <grub_mod_fini+0x1d10>
    75e0:	ldr	x0, [sp, #24]
    75e4:	ldr	x0, [x0, #56]
    75e8:	bl	2230 <grub_mod_fini+0x1d10>
    75ec:	ldr	x0, [sp, #24]
    75f0:	ldr	x0, [x0, #16]
    75f4:	bl	2230 <grub_mod_fini+0x1d10>
    75f8:	ldr	x0, [sp, #24]
    75fc:	ldr	x0, [x0, #72]
    7600:	bl	2230 <grub_mod_fini+0x1d10>
    7604:	ldr	x0, [sp, #24]
    7608:	ldr	x0, [x0, #64]
    760c:	bl	2230 <grub_mod_fini+0x1d10>
    7610:	ldr	x0, [sp, #24]
    7614:	bl	2230 <grub_mod_fini+0x1d10>
    7618:	nop
    761c:	ldp	x29, x30, [sp], #32
    7620:	ret
    7624:	stp	x29, x30, [sp, #-96]!
    7628:	mov	x29, sp
    762c:	str	x0, [sp, #40]
    7630:	str	x1, [sp, #32]
    7634:	str	w2, [sp, #28]
    7638:	mov	x1, #0x1                   	// #1
    763c:	mov	x0, #0x58                  	// #88
    7640:	bl	226c <grub_mod_fini+0x1d4c>
    7644:	str	x0, [sp, #80]
    7648:	ldr	x0, [sp, #80]
    764c:	cmp	x0, #0x0
    7650:	cset	w0, eq  // eq = none
    7654:	and	w0, w0, #0xff
    7658:	and	x0, x0, #0xff
    765c:	cmp	x0, #0x0
    7660:	b.eq	766c <grub_mod_fini+0x714c>  // b.none
    7664:	mov	x0, #0x0                   	// #0
    7668:	b	7830 <grub_mod_fini+0x7310>
    766c:	ldr	x0, [sp, #80]
    7670:	add	x0, x0, #0x8
    7674:	ldr	x1, [sp, #32]
    7678:	bl	5a34 <grub_mod_fini+0x5514>
    767c:	str	w0, [sp, #76]
    7680:	ldr	w0, [sp, #76]
    7684:	cmp	w0, #0x0
    7688:	cset	w0, ne  // ne = any
    768c:	and	w0, w0, #0xff
    7690:	and	x0, x0, #0xff
    7694:	cmp	x0, #0x0
    7698:	b.eq	76ac <grub_mod_fini+0x718c>  // b.none
    769c:	ldr	x0, [sp, #80]
    76a0:	bl	2230 <grub_mod_fini+0x1d10>
    76a4:	mov	x0, #0x0                   	// #0
    76a8:	b	7830 <grub_mod_fini+0x7310>
    76ac:	ldr	x0, [sp, #80]
    76b0:	add	x1, x0, #0x8
    76b4:	ldr	x0, [sp, #80]
    76b8:	str	x1, [x0, #56]
    76bc:	str	wzr, [sp, #92]
    76c0:	b	77dc <grub_mod_fini+0x72bc>
    76c4:	ldr	x0, [sp, #40]
    76c8:	ldr	x1, [x0]
    76cc:	ldr	x0, [sp, #32]
    76d0:	ldr	x2, [x0, #8]
    76d4:	ldrsw	x0, [sp, #92]
    76d8:	lsl	x0, x0, #2
    76dc:	add	x0, x2, x0
    76e0:	ldr	w0, [x0]
    76e4:	sxtw	x0, w0
    76e8:	lsl	x0, x0, #4
    76ec:	add	x0, x1, x0
    76f0:	str	x0, [sp, #64]
    76f4:	ldr	x0, [sp, #64]
    76f8:	ldrb	w0, [x0, #8]
    76fc:	str	w0, [sp, #60]
    7700:	ldr	w0, [sp, #60]
    7704:	cmp	w0, #0x1
    7708:	b.ne	7720 <grub_mod_fini+0x7200>  // b.any
    770c:	ldr	x0, [sp, #64]
    7710:	ldr	w0, [x0, #8]
    7714:	and	w0, w0, #0x3ff00
    7718:	cmp	w0, #0x0
    771c:	b.eq	77cc <grub_mod_fini+0x72ac>  // b.none
    7720:	ldr	x0, [sp, #80]
    7724:	ldrb	w0, [x0, #80]
    7728:	ubfx	x0, x0, #5, #1
    772c:	and	w1, w0, #0xff
    7730:	ldr	x0, [sp, #64]
    7734:	ldrb	w0, [x0, #10]
    7738:	ubfx	x0, x0, #4, #1
    773c:	and	w0, w0, #0xff
    7740:	orr	w0, w1, w0
    7744:	and	w2, w0, #0xff
    7748:	ldr	x1, [sp, #80]
    774c:	ldrb	w0, [x1, #80]
    7750:	bfi	w0, w2, #5, #1
    7754:	strb	w0, [x1, #80]
    7758:	ldr	w0, [sp, #60]
    775c:	cmp	w0, #0x2
    7760:	b.ne	7778 <grub_mod_fini+0x7258>  // b.any
    7764:	ldr	x0, [sp, #80]
    7768:	ldrb	w1, [x0, #80]
    776c:	orr	w1, w1, #0x10
    7770:	strb	w1, [x0, #80]
    7774:	b	77d0 <grub_mod_fini+0x72b0>
    7778:	ldr	w0, [sp, #60]
    777c:	cmp	w0, #0x4
    7780:	b.ne	7798 <grub_mod_fini+0x7278>  // b.any
    7784:	ldr	x0, [sp, #80]
    7788:	ldrb	w1, [x0, #80]
    778c:	orr	w1, w1, #0x40
    7790:	strb	w1, [x0, #80]
    7794:	b	77d0 <grub_mod_fini+0x72b0>
    7798:	ldr	w0, [sp, #60]
    779c:	cmp	w0, #0xc
    77a0:	b.eq	77b8 <grub_mod_fini+0x7298>  // b.none
    77a4:	ldr	x0, [sp, #64]
    77a8:	ldr	w0, [x0, #8]
    77ac:	and	w0, w0, #0x3ff00
    77b0:	cmp	w0, #0x0
    77b4:	b.eq	77d0 <grub_mod_fini+0x72b0>  // b.none
    77b8:	ldr	x0, [sp, #80]
    77bc:	ldrb	w1, [x0, #80]
    77c0:	orr	w1, w1, #0xffffff80
    77c4:	strb	w1, [x0, #80]
    77c8:	b	77d0 <grub_mod_fini+0x72b0>
    77cc:	nop
    77d0:	ldr	w0, [sp, #92]
    77d4:	add	w0, w0, #0x1
    77d8:	str	w0, [sp, #92]
    77dc:	ldr	x0, [sp, #32]
    77e0:	ldr	w0, [x0, #4]
    77e4:	ldr	w1, [sp, #92]
    77e8:	cmp	w1, w0
    77ec:	b.lt	76c4 <grub_mod_fini+0x71a4>  // b.tstop
    77f0:	ldr	w2, [sp, #28]
    77f4:	ldr	x1, [sp, #80]
    77f8:	ldr	x0, [sp, #40]
    77fc:	bl	73a0 <grub_mod_fini+0x6e80>
    7800:	str	w0, [sp, #76]
    7804:	ldr	w0, [sp, #76]
    7808:	cmp	w0, #0x0
    780c:	cset	w0, ne  // ne = any
    7810:	and	w0, w0, #0xff
    7814:	and	x0, x0, #0xff
    7818:	cmp	x0, #0x0
    781c:	b.eq	782c <grub_mod_fini+0x730c>  // b.none
    7820:	ldr	x0, [sp, #80]
    7824:	bl	7594 <grub_mod_fini+0x7074>
    7828:	str	xzr, [sp, #80]
    782c:	ldr	x0, [sp, #80]
    7830:	ldp	x29, x30, [sp], #96
    7834:	ret
    7838:	stp	x29, x30, [sp, #-96]!
    783c:	mov	x29, sp
    7840:	str	x0, [sp, #40]
    7844:	str	x1, [sp, #32]
    7848:	str	w2, [sp, #28]
    784c:	str	w3, [sp, #24]
    7850:	str	wzr, [sp, #88]
    7854:	mov	x1, #0x1                   	// #1
    7858:	mov	x0, #0x58                  	// #88
    785c:	bl	226c <grub_mod_fini+0x1d4c>
    7860:	str	x0, [sp, #80]
    7864:	ldr	x0, [sp, #80]
    7868:	cmp	x0, #0x0
    786c:	cset	w0, eq  // eq = none
    7870:	and	w0, w0, #0xff
    7874:	and	x0, x0, #0xff
    7878:	cmp	x0, #0x0
    787c:	b.eq	7888 <grub_mod_fini+0x7368>  // b.none
    7880:	mov	x0, #0x0                   	// #0
    7884:	b	7b88 <grub_mod_fini+0x7668>
    7888:	ldr	x0, [sp, #80]
    788c:	add	x0, x0, #0x8
    7890:	ldr	x1, [sp, #32]
    7894:	bl	5a34 <grub_mod_fini+0x5514>
    7898:	str	w0, [sp, #76]
    789c:	ldr	w0, [sp, #76]
    78a0:	cmp	w0, #0x0
    78a4:	cset	w0, ne  // ne = any
    78a8:	and	w0, w0, #0xff
    78ac:	and	x0, x0, #0xff
    78b0:	cmp	x0, #0x0
    78b4:	b.eq	78c8 <grub_mod_fini+0x73a8>  // b.none
    78b8:	ldr	x0, [sp, #80]
    78bc:	bl	2230 <grub_mod_fini+0x1d10>
    78c0:	mov	x0, #0x0                   	// #0
    78c4:	b	7b88 <grub_mod_fini+0x7668>
    78c8:	ldr	w0, [sp, #28]
    78cc:	and	w0, w0, #0xf
    78d0:	and	w2, w0, #0xff
    78d4:	ldr	x1, [sp, #80]
    78d8:	ldrb	w0, [x1, #80]
    78dc:	bfxil	w0, w2, #0, #4
    78e0:	strb	w0, [x1, #80]
    78e4:	ldr	x0, [sp, #80]
    78e8:	add	x1, x0, #0x8
    78ec:	ldr	x0, [sp, #80]
    78f0:	str	x1, [x0, #56]
    78f4:	str	wzr, [sp, #92]
    78f8:	b	7b34 <grub_mod_fini+0x7614>
    78fc:	ldr	x0, [sp, #40]
    7900:	ldr	x1, [x0]
    7904:	ldr	x0, [sp, #32]
    7908:	ldr	x2, [x0, #8]
    790c:	ldrsw	x0, [sp, #92]
    7910:	lsl	x0, x0, #2
    7914:	add	x0, x2, x0
    7918:	ldr	w0, [x0]
    791c:	sxtw	x0, w0
    7920:	lsl	x0, x0, #4
    7924:	add	x0, x1, x0
    7928:	str	x0, [sp, #64]
    792c:	ldr	x0, [sp, #64]
    7930:	ldrb	w0, [x0, #8]
    7934:	str	w0, [sp, #60]
    7938:	ldr	x0, [sp, #64]
    793c:	ldr	w0, [x0, #8]
    7940:	ubfx	x0, x0, #8, #10
    7944:	and	w0, w0, #0xffff
    7948:	str	w0, [sp, #56]
    794c:	ldr	w0, [sp, #60]
    7950:	cmp	w0, #0x1
    7954:	b.ne	7964 <grub_mod_fini+0x7444>  // b.any
    7958:	ldr	w0, [sp, #56]
    795c:	cmp	w0, #0x0
    7960:	b.eq	7b24 <grub_mod_fini+0x7604>  // b.none
    7964:	ldr	x0, [sp, #80]
    7968:	ldrb	w0, [x0, #80]
    796c:	ubfx	x0, x0, #5, #1
    7970:	and	w1, w0, #0xff
    7974:	ldr	x0, [sp, #64]
    7978:	ldrb	w0, [x0, #10]
    797c:	ubfx	x0, x0, #4, #1
    7980:	and	w0, w0, #0xff
    7984:	orr	w0, w1, w0
    7988:	and	w2, w0, #0xff
    798c:	ldr	x1, [sp, #80]
    7990:	ldrb	w0, [x1, #80]
    7994:	bfi	w0, w2, #5, #1
    7998:	strb	w0, [x1, #80]
    799c:	ldr	w0, [sp, #60]
    79a0:	cmp	w0, #0x2
    79a4:	b.ne	79bc <grub_mod_fini+0x749c>  // b.any
    79a8:	ldr	x0, [sp, #80]
    79ac:	ldrb	w1, [x0, #80]
    79b0:	orr	w1, w1, #0x10
    79b4:	strb	w1, [x0, #80]
    79b8:	b	79d8 <grub_mod_fini+0x74b8>
    79bc:	ldr	w0, [sp, #60]
    79c0:	cmp	w0, #0x4
    79c4:	b.ne	79d8 <grub_mod_fini+0x74b8>  // b.any
    79c8:	ldr	x0, [sp, #80]
    79cc:	ldrb	w1, [x0, #80]
    79d0:	orr	w1, w1, #0x40
    79d4:	strb	w1, [x0, #80]
    79d8:	ldr	w0, [sp, #56]
    79dc:	cmp	w0, #0x0
    79e0:	b.eq	7b28 <grub_mod_fini+0x7608>  // b.none
    79e4:	ldr	x0, [sp, #80]
    79e8:	ldr	x1, [x0, #56]
    79ec:	ldr	x0, [sp, #80]
    79f0:	add	x0, x0, #0x8
    79f4:	cmp	x1, x0
    79f8:	b.ne	7a74 <grub_mod_fini+0x7554>  // b.any
    79fc:	mov	x0, #0x10                  	// #16
    7a00:	bl	2250 <grub_mod_fini+0x1d30>
    7a04:	mov	x1, x0
    7a08:	ldr	x0, [sp, #80]
    7a0c:	str	x1, [x0, #56]
    7a10:	ldr	x0, [sp, #80]
    7a14:	ldr	x0, [x0, #56]
    7a18:	cmp	x0, #0x0
    7a1c:	cset	w0, eq  // eq = none
    7a20:	and	w0, w0, #0xff
    7a24:	and	x0, x0, #0xff
    7a28:	cmp	x0, #0x0
    7a2c:	b.eq	7a40 <grub_mod_fini+0x7520>  // b.none
    7a30:	ldr	x0, [sp, #80]
    7a34:	bl	7594 <grub_mod_fini+0x7074>
    7a38:	mov	x0, #0x0                   	// #0
    7a3c:	b	7b88 <grub_mod_fini+0x7668>
    7a40:	ldr	x0, [sp, #80]
    7a44:	ldr	x0, [x0, #56]
    7a48:	ldr	x1, [sp, #32]
    7a4c:	bl	5a34 <grub_mod_fini+0x5514>
    7a50:	cmp	w0, #0x0
    7a54:	b.eq	7a60 <grub_mod_fini+0x7540>  // b.none
    7a58:	mov	x0, #0x0                   	// #0
    7a5c:	b	7b88 <grub_mod_fini+0x7668>
    7a60:	str	wzr, [sp, #88]
    7a64:	ldr	x0, [sp, #80]
    7a68:	ldrb	w1, [x0, #80]
    7a6c:	orr	w1, w1, #0xffffff80
    7a70:	strb	w1, [x0, #80]
    7a74:	ldr	w0, [sp, #56]
    7a78:	and	w0, w0, #0x1
    7a7c:	cmp	w0, #0x0
    7a80:	b.eq	7a94 <grub_mod_fini+0x7574>  // b.none
    7a84:	ldr	w0, [sp, #28]
    7a88:	and	w0, w0, #0x1
    7a8c:	cmp	w0, #0x0
    7a90:	b.eq	7af4 <grub_mod_fini+0x75d4>  // b.none
    7a94:	ldr	w0, [sp, #56]
    7a98:	and	w0, w0, #0x2
    7a9c:	cmp	w0, #0x0
    7aa0:	b.eq	7ab4 <grub_mod_fini+0x7594>  // b.none
    7aa4:	ldr	w0, [sp, #28]
    7aa8:	and	w0, w0, #0x1
    7aac:	cmp	w0, #0x0
    7ab0:	b.ne	7af4 <grub_mod_fini+0x75d4>  // b.any
    7ab4:	ldr	w0, [sp, #56]
    7ab8:	and	w0, w0, #0x10
    7abc:	cmp	w0, #0x0
    7ac0:	b.eq	7ad4 <grub_mod_fini+0x75b4>  // b.none
    7ac4:	ldr	w0, [sp, #28]
    7ac8:	and	w0, w0, #0x2
    7acc:	cmp	w0, #0x0
    7ad0:	b.eq	7af4 <grub_mod_fini+0x75d4>  // b.none
    7ad4:	ldr	w0, [sp, #56]
    7ad8:	and	w0, w0, #0x40
    7adc:	cmp	w0, #0x0
    7ae0:	b.eq	7b28 <grub_mod_fini+0x7608>  // b.none
    7ae4:	ldr	w0, [sp, #28]
    7ae8:	and	w0, w0, #0x4
    7aec:	cmp	w0, #0x0
    7af0:	b.ne	7b28 <grub_mod_fini+0x7608>  // b.any
    7af4:	ldr	x0, [sp, #80]
    7af8:	add	x2, x0, #0x8
    7afc:	ldr	w1, [sp, #92]
    7b00:	ldr	w0, [sp, #88]
    7b04:	sub	w0, w1, w0
    7b08:	mov	w1, w0
    7b0c:	mov	x0, x2
    7b10:	bl	6c54 <grub_mod_fini+0x6734>
    7b14:	ldr	w0, [sp, #88]
    7b18:	add	w0, w0, #0x1
    7b1c:	str	w0, [sp, #88]
    7b20:	b	7b28 <grub_mod_fini+0x7608>
    7b24:	nop
    7b28:	ldr	w0, [sp, #92]
    7b2c:	add	w0, w0, #0x1
    7b30:	str	w0, [sp, #92]
    7b34:	ldr	x0, [sp, #32]
    7b38:	ldr	w0, [x0, #4]
    7b3c:	ldr	w1, [sp, #92]
    7b40:	cmp	w1, w0
    7b44:	b.lt	78fc <grub_mod_fini+0x73dc>  // b.tstop
    7b48:	ldr	w2, [sp, #24]
    7b4c:	ldr	x1, [sp, #80]
    7b50:	ldr	x0, [sp, #40]
    7b54:	bl	73a0 <grub_mod_fini+0x6e80>
    7b58:	str	w0, [sp, #76]
    7b5c:	ldr	w0, [sp, #76]
    7b60:	cmp	w0, #0x0
    7b64:	cset	w0, ne  // ne = any
    7b68:	and	w0, w0, #0xff
    7b6c:	and	x0, x0, #0xff
    7b70:	cmp	x0, #0x0
    7b74:	b.eq	7b84 <grub_mod_fini+0x7664>  // b.none
    7b78:	ldr	x0, [sp, #80]
    7b7c:	bl	7594 <grub_mod_fini+0x7074>
    7b80:	str	xzr, [sp, #80]
    7b84:	ldr	x0, [sp, #80]
    7b88:	ldp	x29, x30, [sp], #96
    7b8c:	ret

0000000000007b90 <re_compile_pattern>:
    7b90:	stp	x29, x30, [sp, #-64]!
    7b94:	mov	x29, sp
    7b98:	str	x0, [sp, #40]
    7b9c:	str	x1, [sp, #32]
    7ba0:	str	x2, [sp, #24]
    7ba4:	adrp	x0, 0 <grub_mod_init-0x450>
    7ba8:	add	x0, x0, #0x0
    7bac:	ldr	x0, [x0]
    7bb0:	ldr	x0, [x0]
    7bb4:	and	x0, x0, #0x2000000
    7bb8:	cmp	x0, #0x0
    7bbc:	cset	w0, ne  // ne = any
    7bc0:	and	w2, w0, #0xff
    7bc4:	ldr	x1, [sp, #24]
    7bc8:	ldrb	w0, [x1, #56]
    7bcc:	bfi	w0, w2, #4, #1
    7bd0:	strb	w0, [x1, #56]
    7bd4:	ldr	x0, [sp, #24]
    7bd8:	ldrb	w1, [x0, #56]
    7bdc:	orr	w1, w1, #0xffffff80
    7be0:	strb	w1, [x0, #56]
    7be4:	adrp	x0, 0 <grub_mod_init-0x450>
    7be8:	add	x0, x0, #0x0
    7bec:	ldr	x0, [x0]
    7bf0:	ldr	x0, [x0]
    7bf4:	mov	x3, x0
    7bf8:	ldr	x2, [sp, #32]
    7bfc:	ldr	x1, [sp, #40]
    7c00:	ldr	x0, [sp, #24]
    7c04:	bl	8a48 <regfree+0x80>
    7c08:	str	w0, [sp, #60]
    7c0c:	ldr	w0, [sp, #60]
    7c10:	cmp	w0, #0x0
    7c14:	b.ne	7c20 <re_compile_pattern+0x90>  // b.any
    7c18:	mov	x0, #0x0                   	// #0
    7c1c:	b	7c44 <re_compile_pattern+0xb4>
    7c20:	adrp	x0, 0 <grub_mod_init-0x450>
    7c24:	add	x0, x0, #0x0
    7c28:	ldr	x0, [x0]
    7c2c:	ldrsw	x1, [sp, #60]
    7c30:	ldr	x1, [x0, x1, lsl #3]
    7c34:	adrp	x0, 0 <grub_mod_init-0x450>
    7c38:	add	x0, x0, #0x0
    7c3c:	ldr	x0, [x0]
    7c40:	add	x0, x1, x0
    7c44:	ldp	x29, x30, [sp], #64
    7c48:	ret
    7c4c:	nop
	...

0000000000007c68 <re_set_syntax>:
    7c68:	sub	sp, sp, #0x20
    7c6c:	str	x0, [sp, #8]
    7c70:	adrp	x0, 0 <grub_mod_init-0x450>
    7c74:	add	x0, x0, #0x0
    7c78:	ldr	x0, [x0]
    7c7c:	ldr	x0, [x0]
    7c80:	str	x0, [sp, #24]
    7c84:	adrp	x0, 0 <grub_mod_init-0x450>
    7c88:	add	x0, x0, #0x0
    7c8c:	ldr	x0, [x0]
    7c90:	ldr	x1, [sp, #8]
    7c94:	str	x1, [x0]
    7c98:	ldr	x0, [sp, #24]
    7c9c:	add	sp, sp, #0x20
    7ca0:	ret
    7ca4:	nop
	...

0000000000007cb0 <re_compile_fastmap>:
    7cb0:	stp	x29, x30, [sp, #-48]!
    7cb4:	mov	x29, sp
    7cb8:	str	x0, [sp, #24]
    7cbc:	ldr	x0, [sp, #24]
    7cc0:	ldr	x0, [x0]
    7cc4:	str	x0, [sp, #40]
    7cc8:	ldr	x0, [sp, #24]
    7ccc:	ldr	x0, [x0, #32]
    7cd0:	str	x0, [sp, #32]
    7cd4:	mov	x2, #0x100                 	// #256
    7cd8:	mov	w1, #0x0                   	// #0
    7cdc:	ldr	x0, [sp, #32]
    7ce0:	bl	0 <grub_memset>
    7ce4:	ldr	x0, [sp, #40]
    7ce8:	ldr	x0, [x0, #72]
    7cec:	ldr	x2, [sp, #32]
    7cf0:	mov	x1, x0
    7cf4:	ldr	x0, [sp, #24]
    7cf8:	bl	7da8 <re_compile_fastmap+0xf8>
    7cfc:	ldr	x0, [sp, #40]
    7d00:	ldr	x1, [x0, #72]
    7d04:	ldr	x0, [sp, #40]
    7d08:	ldr	x0, [x0, #80]
    7d0c:	cmp	x1, x0
    7d10:	b.eq	7d2c <re_compile_fastmap+0x7c>  // b.none
    7d14:	ldr	x0, [sp, #40]
    7d18:	ldr	x0, [x0, #80]
    7d1c:	ldr	x2, [sp, #32]
    7d20:	mov	x1, x0
    7d24:	ldr	x0, [sp, #24]
    7d28:	bl	7da8 <re_compile_fastmap+0xf8>
    7d2c:	ldr	x0, [sp, #40]
    7d30:	ldr	x1, [x0, #72]
    7d34:	ldr	x0, [sp, #40]
    7d38:	ldr	x0, [x0, #88]
    7d3c:	cmp	x1, x0
    7d40:	b.eq	7d5c <re_compile_fastmap+0xac>  // b.none
    7d44:	ldr	x0, [sp, #40]
    7d48:	ldr	x0, [x0, #88]
    7d4c:	ldr	x2, [sp, #32]
    7d50:	mov	x1, x0
    7d54:	ldr	x0, [sp, #24]
    7d58:	bl	7da8 <re_compile_fastmap+0xf8>
    7d5c:	ldr	x0, [sp, #40]
    7d60:	ldr	x1, [x0, #72]
    7d64:	ldr	x0, [sp, #40]
    7d68:	ldr	x0, [x0, #96]
    7d6c:	cmp	x1, x0
    7d70:	b.eq	7d8c <re_compile_fastmap+0xdc>  // b.none
    7d74:	ldr	x0, [sp, #40]
    7d78:	ldr	x0, [x0, #96]
    7d7c:	ldr	x2, [sp, #32]
    7d80:	mov	x1, x0
    7d84:	ldr	x0, [sp, #24]
    7d88:	bl	7da8 <re_compile_fastmap+0xf8>
    7d8c:	ldr	x0, [sp, #24]
    7d90:	ldrb	w1, [x0, #56]
    7d94:	orr	w1, w1, #0x8
    7d98:	strb	w1, [x0, #56]
    7d9c:	mov	w0, #0x0                   	// #0
    7da0:	ldp	x29, x30, [sp], #48
    7da4:	ret
    7da8:	sub	sp, sp, #0x200
    7dac:	stp	x29, x30, [sp]
    7db0:	mov	x29, sp
    7db4:	str	x0, [sp, #40]
    7db8:	str	x1, [sp, #32]
    7dbc:	str	x2, [sp, #24]
    7dc0:	ldr	x0, [sp, #40]
    7dc4:	ldr	x0, [x0]
    7dc8:	str	x0, [sp, #472]
    7dcc:	ldr	x0, [sp, #472]
    7dd0:	ldr	w0, [x0, #164]
    7dd4:	cmp	w0, #0x1
    7dd8:	b.ne	7df8 <re_compile_fastmap+0x148>  // b.any
    7ddc:	ldr	x0, [sp, #40]
    7de0:	ldr	x0, [x0, #24]
    7de4:	and	x0, x0, #0x400000
    7de8:	cmp	x0, #0x0
    7dec:	b.eq	7df8 <re_compile_fastmap+0x148>  // b.none
    7df0:	mov	w0, #0x1                   	// #1
    7df4:	b	7dfc <re_compile_fastmap+0x14c>
    7df8:	mov	w0, #0x0                   	// #0
    7dfc:	strb	w0, [sp, #471]
    7e00:	ldrb	w0, [sp, #471]
    7e04:	and	w0, w0, #0x1
    7e08:	strb	w0, [sp, #471]
    7e0c:	str	wzr, [sp, #508]
    7e10:	b	8484 <re_compile_fastmap+0x7d4>
    7e14:	ldr	x0, [sp, #32]
    7e18:	ldr	x1, [x0, #16]
    7e1c:	ldrsw	x0, [sp, #508]
    7e20:	lsl	x0, x0, #2
    7e24:	add	x0, x1, x0
    7e28:	ldr	w0, [x0]
    7e2c:	str	w0, [sp, #504]
    7e30:	ldr	x0, [sp, #472]
    7e34:	ldr	x1, [x0]
    7e38:	ldrsw	x0, [sp, #504]
    7e3c:	lsl	x0, x0, #4
    7e40:	add	x0, x1, x0
    7e44:	ldrb	w0, [x0, #8]
    7e48:	str	w0, [sp, #464]
    7e4c:	ldr	w0, [sp, #464]
    7e50:	cmp	w0, #0x1
    7e54:	b.ne	8080 <re_compile_fastmap+0x3d0>  // b.any
    7e58:	ldr	x0, [sp, #472]
    7e5c:	ldr	x1, [x0]
    7e60:	ldrsw	x0, [sp, #504]
    7e64:	lsl	x0, x0, #4
    7e68:	add	x0, x1, x0
    7e6c:	ldrb	w0, [x0]
    7e70:	mov	w1, w0
    7e74:	ldr	x0, [sp, #24]
    7e78:	str	x0, [sp, #440]
    7e7c:	ldrb	w0, [sp, #471]
    7e80:	strb	w0, [sp, #439]
    7e84:	str	w1, [sp, #432]
    7e88:	ldrsw	x0, [sp, #432]
    7e8c:	ldr	x1, [sp, #440]
    7e90:	add	x0, x1, x0
    7e94:	mov	w1, #0x1                   	// #1
    7e98:	strb	w1, [x0]
    7e9c:	ldrb	w0, [sp, #439]
    7ea0:	cmp	w0, #0x0
    7ea4:	b.eq	7ec4 <re_compile_fastmap+0x214>  // b.none
    7ea8:	ldr	w0, [sp, #432]
    7eac:	bl	2214 <grub_mod_fini+0x1cf4>
    7eb0:	sxtw	x0, w0
    7eb4:	ldr	x1, [sp, #440]
    7eb8:	add	x0, x1, x0
    7ebc:	mov	w1, #0x1                   	// #1
    7ec0:	strb	w1, [x0]
    7ec4:	nop
    7ec8:	ldr	x0, [sp, #40]
    7ecc:	ldr	x0, [x0, #24]
    7ed0:	and	x0, x0, #0x400000
    7ed4:	cmp	x0, #0x0
    7ed8:	b.eq	8478 <re_compile_fastmap+0x7c8>  // b.none
    7edc:	ldr	x0, [sp, #472]
    7ee0:	ldr	w0, [x0, #164]
    7ee4:	cmp	w0, #0x1
    7ee8:	b.le	8478 <re_compile_fastmap+0x7c8>
    7eec:	add	x0, sp, #0x158
    7ef0:	str	x0, [sp, #496]
    7ef4:	ldr	x0, [sp, #472]
    7ef8:	ldr	x1, [x0]
    7efc:	ldrsw	x0, [sp, #504]
    7f00:	lsl	x0, x0, #4
    7f04:	add	x1, x1, x0
    7f08:	ldr	x0, [sp, #496]
    7f0c:	add	x2, x0, #0x1
    7f10:	str	x2, [sp, #496]
    7f14:	ldrb	w1, [x1]
    7f18:	strb	w1, [x0]
    7f1c:	b	7f48 <re_compile_fastmap+0x298>
    7f20:	ldr	x0, [sp, #472]
    7f24:	ldr	x1, [x0]
    7f28:	ldrsw	x0, [sp, #504]
    7f2c:	lsl	x0, x0, #4
    7f30:	add	x1, x1, x0
    7f34:	ldr	x0, [sp, #496]
    7f38:	add	x2, x0, #0x1
    7f3c:	str	x2, [sp, #496]
    7f40:	ldrb	w1, [x1]
    7f44:	strb	w1, [x0]
    7f48:	ldr	w0, [sp, #504]
    7f4c:	add	w0, w0, #0x1
    7f50:	str	w0, [sp, #504]
    7f54:	ldrsw	x1, [sp, #504]
    7f58:	ldr	x0, [sp, #472]
    7f5c:	ldr	x0, [x0, #16]
    7f60:	cmp	x1, x0
    7f64:	b.cs	7fb0 <re_compile_fastmap+0x300>  // b.hs, b.nlast
    7f68:	ldr	x0, [sp, #472]
    7f6c:	ldr	x1, [x0]
    7f70:	ldrsw	x0, [sp, #504]
    7f74:	lsl	x0, x0, #4
    7f78:	add	x0, x1, x0
    7f7c:	ldrb	w0, [x0, #8]
    7f80:	cmp	w0, #0x1
    7f84:	b.ne	7fb0 <re_compile_fastmap+0x300>  // b.any
    7f88:	ldr	x0, [sp, #472]
    7f8c:	ldr	x1, [x0]
    7f90:	ldrsw	x0, [sp, #504]
    7f94:	lsl	x0, x0, #4
    7f98:	add	x0, x1, x0
    7f9c:	ldrb	w0, [x0, #10]
    7fa0:	and	w0, w0, #0x20
    7fa4:	and	w0, w0, #0xff
    7fa8:	cmp	w0, #0x0
    7fac:	b.ne	7f20 <re_compile_fastmap+0x270>  // b.any
    7fb0:	add	x0, sp, #0x148
    7fb4:	mov	x2, #0x8                   	// #8
    7fb8:	mov	w1, #0x0                   	// #0
    7fbc:	bl	0 <grub_memset>
    7fc0:	add	x0, sp, #0x158
    7fc4:	ldr	x1, [sp, #496]
    7fc8:	sub	x0, x1, x0
    7fcc:	mov	x4, x0
    7fd0:	add	x2, sp, #0x148
    7fd4:	add	x1, sp, #0x158
    7fd8:	add	x0, sp, #0x154
    7fdc:	mov	x3, x2
    7fe0:	mov	x2, x4
    7fe4:	bl	2514 <grub_mod_fini+0x1ff4>
    7fe8:	mov	x2, x0
    7fec:	add	x0, sp, #0x158
    7ff0:	ldr	x1, [sp, #496]
    7ff4:	sub	x0, x1, x0
    7ff8:	cmp	x2, x0
    7ffc:	b.ne	8478 <re_compile_fastmap+0x7c8>  // b.any
    8000:	ldr	w0, [sp, #340]
    8004:	bl	2774 <grub_mod_fini+0x2254>
    8008:	mov	w3, w0
    800c:	add	x1, sp, #0x148
    8010:	add	x0, sp, #0x158
    8014:	mov	x2, x1
    8018:	mov	w1, w3
    801c:	bl	2664 <grub_mod_fini+0x2144>
    8020:	cmn	x0, #0x1
    8024:	b.eq	8478 <re_compile_fastmap+0x7c8>  // b.none
    8028:	ldrb	w0, [sp, #344]
    802c:	mov	w1, w0
    8030:	ldr	x0, [sp, #24]
    8034:	str	x0, [sp, #424]
    8038:	strb	wzr, [sp, #423]
    803c:	str	w1, [sp, #416]
    8040:	ldrsw	x0, [sp, #416]
    8044:	ldr	x1, [sp, #424]
    8048:	add	x0, x1, x0
    804c:	mov	w1, #0x1                   	// #1
    8050:	strb	w1, [x0]
    8054:	ldrb	w0, [sp, #423]
    8058:	cmp	w0, #0x0
    805c:	b.eq	8474 <re_compile_fastmap+0x7c4>  // b.none
    8060:	ldr	w0, [sp, #416]
    8064:	bl	2214 <grub_mod_fini+0x1cf4>
    8068:	sxtw	x0, w0
    806c:	ldr	x1, [sp, #424]
    8070:	add	x0, x1, x0
    8074:	mov	w1, #0x1                   	// #1
    8078:	strb	w1, [x0]
    807c:	b	8474 <re_compile_fastmap+0x7c4>
    8080:	ldr	w0, [sp, #464]
    8084:	cmp	w0, #0x3
    8088:	b.ne	817c <re_compile_fastmap+0x4cc>  // b.any
    808c:	str	wzr, [sp, #492]
    8090:	str	wzr, [sp, #488]
    8094:	b	816c <re_compile_fastmap+0x4bc>
    8098:	ldr	x0, [sp, #472]
    809c:	ldr	x1, [x0]
    80a0:	ldrsw	x0, [sp, #504]
    80a4:	lsl	x0, x0, #4
    80a8:	add	x0, x1, x0
    80ac:	ldr	x1, [x0]
    80b0:	ldrsw	x0, [sp, #492]
    80b4:	lsl	x0, x0, #3
    80b8:	add	x0, x1, x0
    80bc:	ldr	x0, [x0]
    80c0:	str	x0, [sp, #448]
    80c4:	str	wzr, [sp, #484]
    80c8:	b	8154 <re_compile_fastmap+0x4a4>
    80cc:	ldr	w0, [sp, #484]
    80d0:	ldr	x1, [sp, #448]
    80d4:	lsr	x0, x1, x0
    80d8:	and	x0, x0, #0x1
    80dc:	cmp	x0, #0x0
    80e0:	b.eq	813c <re_compile_fastmap+0x48c>  // b.none
    80e4:	ldr	x0, [sp, #24]
    80e8:	str	x0, [sp, #408]
    80ec:	ldrb	w0, [sp, #471]
    80f0:	strb	w0, [sp, #407]
    80f4:	ldr	w0, [sp, #488]
    80f8:	str	w0, [sp, #400]
    80fc:	ldrsw	x0, [sp, #400]
    8100:	ldr	x1, [sp, #408]
    8104:	add	x0, x1, x0
    8108:	mov	w1, #0x1                   	// #1
    810c:	strb	w1, [x0]
    8110:	ldrb	w0, [sp, #407]
    8114:	cmp	w0, #0x0
    8118:	b.eq	8138 <re_compile_fastmap+0x488>  // b.none
    811c:	ldr	w0, [sp, #400]
    8120:	bl	2214 <grub_mod_fini+0x1cf4>
    8124:	sxtw	x0, w0
    8128:	ldr	x1, [sp, #408]
    812c:	add	x0, x1, x0
    8130:	mov	w1, #0x1                   	// #1
    8134:	strb	w1, [x0]
    8138:	nop
    813c:	ldr	w0, [sp, #484]
    8140:	add	w0, w0, #0x1
    8144:	str	w0, [sp, #484]
    8148:	ldr	w0, [sp, #488]
    814c:	add	w0, w0, #0x1
    8150:	str	w0, [sp, #488]
    8154:	ldr	w0, [sp, #484]
    8158:	cmp	w0, #0x3f
    815c:	b.le	80cc <re_compile_fastmap+0x41c>
    8160:	ldr	w0, [sp, #492]
    8164:	add	w0, w0, #0x1
    8168:	str	w0, [sp, #492]
    816c:	ldr	w0, [sp, #492]
    8170:	cmp	w0, #0x3
    8174:	b.le	8098 <re_compile_fastmap+0x3e8>
    8178:	b	8478 <re_compile_fastmap+0x7c8>
    817c:	ldr	w0, [sp, #464]
    8180:	cmp	w0, #0x6
    8184:	b.ne	8420 <re_compile_fastmap+0x770>  // b.any
    8188:	ldr	x0, [sp, #472]
    818c:	ldr	x1, [x0]
    8190:	ldrsw	x0, [sp, #504]
    8194:	lsl	x0, x0, #4
    8198:	add	x0, x1, x0
    819c:	ldr	x0, [x0]
    81a0:	str	x0, [sp, #456]
    81a4:	ldr	x0, [sp, #472]
    81a8:	ldr	w0, [x0, #164]
    81ac:	cmp	w0, #0x1
    81b0:	b.le	829c <re_compile_fastmap+0x5ec>
    81b4:	ldr	x0, [sp, #456]
    81b8:	ldr	w0, [x0, #52]
    81bc:	cmp	w0, #0x0
    81c0:	b.ne	81ec <re_compile_fastmap+0x53c>  // b.any
    81c4:	ldr	x0, [sp, #456]
    81c8:	ldrb	w0, [x0, #32]
    81cc:	and	w0, w0, #0x1
    81d0:	and	w0, w0, #0xff
    81d4:	cmp	w0, #0x0
    81d8:	b.ne	81ec <re_compile_fastmap+0x53c>  // b.any
    81dc:	ldr	x0, [sp, #456]
    81e0:	ldr	w0, [x0, #48]
    81e4:	cmp	w0, #0x0
    81e8:	b.eq	829c <re_compile_fastmap+0x5ec>  // b.none
    81ec:	strb	wzr, [sp, #327]
    81f0:	add	x0, sp, #0x138
    81f4:	mov	x2, #0x8                   	// #8
    81f8:	mov	w1, #0x0                   	// #0
    81fc:	bl	0 <grub_memset>
    8200:	add	x1, sp, #0x138
    8204:	add	x0, sp, #0x147
    8208:	mov	x3, x1
    820c:	mov	x2, #0x1                   	// #1
    8210:	mov	x1, x0
    8214:	mov	x0, #0x0                   	// #0
    8218:	bl	2514 <grub_mod_fini+0x1ff4>
    821c:	cmn	x0, #0x2
    8220:	b.ne	827c <re_compile_fastmap+0x5cc>  // b.any
    8224:	ldrb	w0, [sp, #327]
    8228:	mov	w1, w0
    822c:	ldr	x0, [sp, #24]
    8230:	str	x0, [sp, #392]
    8234:	strb	wzr, [sp, #391]
    8238:	str	w1, [sp, #384]
    823c:	ldrsw	x0, [sp, #384]
    8240:	ldr	x1, [sp, #392]
    8244:	add	x0, x1, x0
    8248:	mov	w1, #0x1                   	// #1
    824c:	strb	w1, [x0]
    8250:	ldrb	w0, [sp, #391]
    8254:	cmp	w0, #0x0
    8258:	b.eq	8278 <re_compile_fastmap+0x5c8>  // b.none
    825c:	ldr	w0, [sp, #384]
    8260:	bl	2214 <grub_mod_fini+0x1cf4>
    8264:	sxtw	x0, w0
    8268:	ldr	x1, [sp, #392]
    826c:	add	x0, x1, x0
    8270:	mov	w1, #0x1                   	// #1
    8274:	strb	w1, [x0]
    8278:	nop
    827c:	ldrb	w0, [sp, #327]
    8280:	add	w0, w0, #0x1
    8284:	and	w0, w0, #0xff
    8288:	strb	w0, [sp, #327]
    828c:	ldrb	w0, [sp, #327]
    8290:	cmp	w0, #0x0
    8294:	b.ne	81f0 <re_compile_fastmap+0x540>  // b.any
    8298:	b	8478 <re_compile_fastmap+0x7c8>
    829c:	str	wzr, [sp, #480]
    82a0:	b	8408 <re_compile_fastmap+0x758>
    82a4:	add	x0, sp, #0x130
    82a8:	mov	x2, #0x8                   	// #8
    82ac:	mov	w1, #0x0                   	// #0
    82b0:	bl	0 <grub_memset>
    82b4:	ldr	x0, [sp, #456]
    82b8:	ldr	x1, [x0]
    82bc:	ldrsw	x0, [sp, #480]
    82c0:	lsl	x0, x0, #2
    82c4:	add	x0, x1, x0
    82c8:	ldr	w1, [x0]
    82cc:	add	x2, sp, #0x130
    82d0:	add	x0, sp, #0x30
    82d4:	bl	2664 <grub_mod_fini+0x2144>
    82d8:	cmn	x0, #0x1
    82dc:	b.eq	8340 <re_compile_fastmap+0x690>  // b.none
    82e0:	add	x0, sp, #0x30
    82e4:	ldrb	w0, [x0]
    82e8:	mov	w1, w0
    82ec:	ldr	x0, [sp, #24]
    82f0:	str	x0, [sp, #376]
    82f4:	ldrb	w0, [sp, #471]
    82f8:	strb	w0, [sp, #375]
    82fc:	str	w1, [sp, #368]
    8300:	ldrsw	x0, [sp, #368]
    8304:	ldr	x1, [sp, #376]
    8308:	add	x0, x1, x0
    830c:	mov	w1, #0x1                   	// #1
    8310:	strb	w1, [x0]
    8314:	ldrb	w0, [sp, #375]
    8318:	cmp	w0, #0x0
    831c:	b.eq	833c <re_compile_fastmap+0x68c>  // b.none
    8320:	ldr	w0, [sp, #368]
    8324:	bl	2214 <grub_mod_fini+0x1cf4>
    8328:	sxtw	x0, w0
    832c:	ldr	x1, [sp, #376]
    8330:	add	x0, x1, x0
    8334:	mov	w1, #0x1                   	// #1
    8338:	strb	w1, [x0]
    833c:	nop
    8340:	ldr	x0, [sp, #40]
    8344:	ldr	x0, [x0, #24]
    8348:	and	x0, x0, #0x400000
    834c:	cmp	x0, #0x0
    8350:	b.eq	83fc <re_compile_fastmap+0x74c>  // b.none
    8354:	ldr	x0, [sp, #472]
    8358:	ldr	w0, [x0, #164]
    835c:	cmp	w0, #0x1
    8360:	b.le	83fc <re_compile_fastmap+0x74c>
    8364:	ldr	x0, [sp, #456]
    8368:	ldr	x1, [x0]
    836c:	ldrsw	x0, [sp, #480]
    8370:	lsl	x0, x0, #2
    8374:	add	x0, x1, x0
    8378:	ldr	w0, [x0]
    837c:	bl	2774 <grub_mod_fini+0x2254>
    8380:	mov	w3, w0
    8384:	add	x1, sp, #0x130
    8388:	add	x0, sp, #0x30
    838c:	mov	x2, x1
    8390:	mov	w1, w3
    8394:	bl	2664 <grub_mod_fini+0x2144>
    8398:	cmn	x0, #0x1
    839c:	b.eq	83fc <re_compile_fastmap+0x74c>  // b.none
    83a0:	add	x0, sp, #0x30
    83a4:	ldrb	w0, [x0]
    83a8:	mov	w1, w0
    83ac:	ldr	x0, [sp, #24]
    83b0:	str	x0, [sp, #360]
    83b4:	strb	wzr, [sp, #359]
    83b8:	str	w1, [sp, #352]
    83bc:	ldrsw	x0, [sp, #352]
    83c0:	ldr	x1, [sp, #360]
    83c4:	add	x0, x1, x0
    83c8:	mov	w1, #0x1                   	// #1
    83cc:	strb	w1, [x0]
    83d0:	ldrb	w0, [sp, #359]
    83d4:	cmp	w0, #0x0
    83d8:	b.eq	83f8 <re_compile_fastmap+0x748>  // b.none
    83dc:	ldr	w0, [sp, #352]
    83e0:	bl	2214 <grub_mod_fini+0x1cf4>
    83e4:	sxtw	x0, w0
    83e8:	ldr	x1, [sp, #360]
    83ec:	add	x0, x1, x0
    83f0:	mov	w1, #0x1                   	// #1
    83f4:	strb	w1, [x0]
    83f8:	nop
    83fc:	ldr	w0, [sp, #480]
    8400:	add	w0, w0, #0x1
    8404:	str	w0, [sp, #480]
    8408:	ldr	x0, [sp, #456]
    840c:	ldr	w0, [x0, #36]
    8410:	ldr	w1, [sp, #480]
    8414:	cmp	w1, w0
    8418:	b.lt	82a4 <re_compile_fastmap+0x5f4>  // b.tstop
    841c:	b	8478 <re_compile_fastmap+0x7c8>
    8420:	ldr	w0, [sp, #464]
    8424:	cmp	w0, #0x5
    8428:	b.eq	8444 <re_compile_fastmap+0x794>  // b.none
    842c:	ldr	w0, [sp, #464]
    8430:	cmp	w0, #0x7
    8434:	b.eq	8444 <re_compile_fastmap+0x794>  // b.none
    8438:	ldr	w0, [sp, #464]
    843c:	cmp	w0, #0x2
    8440:	b.ne	8478 <re_compile_fastmap+0x7c8>  // b.any
    8444:	mov	x2, #0x100                 	// #256
    8448:	mov	w1, #0x1                   	// #1
    844c:	ldr	x0, [sp, #24]
    8450:	bl	0 <grub_memset>
    8454:	ldr	w0, [sp, #464]
    8458:	cmp	w0, #0x2
    845c:	b.ne	849c <re_compile_fastmap+0x7ec>  // b.any
    8460:	ldr	x0, [sp, #40]
    8464:	ldrb	w1, [x0, #56]
    8468:	orr	w1, w1, #0x1
    846c:	strb	w1, [x0, #56]
    8470:	b	849c <re_compile_fastmap+0x7ec>
    8474:	nop
    8478:	ldr	w0, [sp, #508]
    847c:	add	w0, w0, #0x1
    8480:	str	w0, [sp, #508]
    8484:	ldr	x0, [sp, #32]
    8488:	ldr	w0, [x0, #12]
    848c:	ldr	w1, [sp, #508]
    8490:	cmp	w1, w0
    8494:	b.lt	7e14 <re_compile_fastmap+0x164>  // b.tstop
    8498:	b	84a0 <re_compile_fastmap+0x7f0>
    849c:	nop
    84a0:	ldp	x29, x30, [sp]
    84a4:	add	sp, sp, #0x200
    84a8:	ret

00000000000084ac <regcomp>:
    84ac:	stp	x29, x30, [sp, #-64]!
    84b0:	mov	x29, sp
    84b4:	str	x0, [sp, #40]
    84b8:	str	x1, [sp, #32]
    84bc:	str	w2, [sp, #28]
    84c0:	ldr	w0, [sp, #28]
    84c4:	and	w0, w0, #0x1
    84c8:	cmp	w0, #0x0
    84cc:	b.eq	84dc <regcomp+0x30>  // b.none
    84d0:	mov	x0, #0xb2fc                	// #45820
    84d4:	movk	x0, #0x3, lsl #16
    84d8:	b	84e4 <regcomp+0x38>
    84dc:	mov	x0, #0x2c6                 	// #710
    84e0:	movk	x0, #0x101, lsl #16
    84e4:	str	x0, [sp, #48]
    84e8:	ldr	x0, [sp, #40]
    84ec:	str	xzr, [x0]
    84f0:	ldr	x0, [sp, #40]
    84f4:	str	xzr, [x0, #8]
    84f8:	ldr	x0, [sp, #40]
    84fc:	str	xzr, [x0, #16]
    8500:	mov	x0, #0x100                 	// #256
    8504:	bl	2250 <grub_mod_fini+0x1d30>
    8508:	mov	x1, x0
    850c:	ldr	x0, [sp, #40]
    8510:	str	x1, [x0, #32]
    8514:	ldr	x0, [sp, #40]
    8518:	ldr	x0, [x0, #32]
    851c:	cmp	x0, #0x0
    8520:	cset	w0, eq  // eq = none
    8524:	and	w0, w0, #0xff
    8528:	and	x0, x0, #0xff
    852c:	cmp	x0, #0x0
    8530:	b.eq	853c <regcomp+0x90>  // b.none
    8534:	mov	w0, #0xc                   	// #12
    8538:	b	8640 <regcomp+0x194>
    853c:	ldrsw	x0, [sp, #28]
    8540:	lsl	x0, x0, #21
    8544:	and	x0, x0, #0x400000
    8548:	ldr	x1, [sp, #48]
    854c:	orr	x0, x1, x0
    8550:	str	x0, [sp, #48]
    8554:	ldr	w0, [sp, #28]
    8558:	and	w0, w0, #0x4
    855c:	cmp	w0, #0x0
    8560:	b.eq	8590 <regcomp+0xe4>  // b.none
    8564:	ldr	x0, [sp, #48]
    8568:	and	x0, x0, #0xffffffffffffffbf
    856c:	str	x0, [sp, #48]
    8570:	ldr	x0, [sp, #48]
    8574:	orr	x0, x0, #0x100
    8578:	str	x0, [sp, #48]
    857c:	ldr	x0, [sp, #40]
    8580:	ldrb	w1, [x0, #56]
    8584:	orr	w1, w1, #0xffffff80
    8588:	strb	w1, [x0, #56]
    858c:	b	85a0 <regcomp+0xf4>
    8590:	ldr	x0, [sp, #40]
    8594:	ldrb	w1, [x0, #56]
    8598:	and	w1, w1, #0x7f
    859c:	strb	w1, [x0, #56]
    85a0:	ldr	w0, [sp, #28]
    85a4:	and	w0, w0, #0x8
    85a8:	cmp	w0, #0x0
    85ac:	cset	w0, ne  // ne = any
    85b0:	and	w2, w0, #0xff
    85b4:	ldr	x1, [sp, #40]
    85b8:	ldrb	w0, [x1, #56]
    85bc:	bfi	w0, w2, #4, #1
    85c0:	strb	w0, [x1, #56]
    85c4:	ldr	x0, [sp, #40]
    85c8:	str	xzr, [x0, #40]
    85cc:	ldr	x0, [sp, #32]
    85d0:	bl	22b8 <grub_mod_fini+0x1d98>
    85d4:	ldr	x3, [sp, #48]
    85d8:	mov	x2, x0
    85dc:	ldr	x1, [sp, #32]
    85e0:	ldr	x0, [sp, #40]
    85e4:	bl	8a48 <regfree+0x80>
    85e8:	str	w0, [sp, #60]
    85ec:	ldr	w0, [sp, #60]
    85f0:	cmp	w0, #0x10
    85f4:	b.ne	8600 <regcomp+0x154>  // b.any
    85f8:	mov	w0, #0x8                   	// #8
    85fc:	str	w0, [sp, #60]
    8600:	ldr	w0, [sp, #60]
    8604:	cmp	w0, #0x0
    8608:	cset	w0, eq  // eq = none
    860c:	and	w0, w0, #0xff
    8610:	and	x0, x0, #0xff
    8614:	cmp	x0, #0x0
    8618:	b.eq	8628 <regcomp+0x17c>  // b.none
    861c:	ldr	x0, [sp, #40]
    8620:	bl	7cb0 <re_compile_fastmap>
    8624:	b	863c <regcomp+0x190>
    8628:	ldr	x0, [sp, #40]
    862c:	ldr	x0, [x0, #32]
    8630:	bl	2230 <grub_mod_fini+0x1d10>
    8634:	ldr	x0, [sp, #40]
    8638:	str	xzr, [x0, #32]
    863c:	ldr	w0, [sp, #60]
    8640:	ldp	x29, x30, [sp], #64
    8644:	ret

0000000000008648 <regerror>:
    8648:	stp	x29, x30, [sp, #-80]!
    864c:	mov	x29, sp
    8650:	str	w0, [sp, #44]
    8654:	str	x1, [sp, #32]
    8658:	str	x2, [sp, #24]
    865c:	str	x3, [sp, #16]
    8660:	mov	w0, #0x11                  	// #17
    8664:	str	w0, [sp, #60]
    8668:	ldr	w0, [sp, #44]
    866c:	lsr	w0, w0, #31
    8670:	and	w0, w0, #0xff
    8674:	and	x0, x0, #0xff
    8678:	cmp	x0, #0x0
    867c:	b.ne	86a0 <regerror+0x58>  // b.any
    8680:	ldr	w1, [sp, #44]
    8684:	ldr	w0, [sp, #60]
    8688:	cmp	w1, w0
    868c:	cset	w0, ge  // ge = tcont
    8690:	and	w0, w0, #0xff
    8694:	and	x0, x0, #0xff
    8698:	cmp	x0, #0x0
    869c:	b.eq	86b4 <regerror+0x6c>  // b.none
    86a0:	adrp	x0, 0 <grub_mod_init-0x450>
    86a4:	add	x0, x0, #0x0
    86a8:	ldr	x0, [x0]
    86ac:	str	x0, [sp, #72]
    86b0:	b	86dc <regerror+0x94>
    86b4:	adrp	x0, 0 <grub_mod_init-0x450>
    86b8:	add	x0, x0, #0x0
    86bc:	ldr	x0, [x0]
    86c0:	ldrsw	x1, [sp, #44]
    86c4:	ldr	x1, [x0, x1, lsl #3]
    86c8:	adrp	x0, 0 <grub_mod_init-0x450>
    86cc:	add	x0, x0, #0x0
    86d0:	ldr	x0, [x0]
    86d4:	add	x0, x1, x0
    86d8:	str	x0, [sp, #72]
    86dc:	ldr	x0, [sp, #72]
    86e0:	bl	22b8 <grub_mod_fini+0x1d98>
    86e4:	add	x0, x0, #0x1
    86e8:	str	x0, [sp, #48]
    86ec:	ldr	x0, [sp, #16]
    86f0:	cmp	x0, #0x0
    86f4:	cset	w0, ne  // ne = any
    86f8:	and	w0, w0, #0xff
    86fc:	and	x0, x0, #0xff
    8700:	cmp	x0, #0x0
    8704:	b.eq	875c <regerror+0x114>  // b.none
    8708:	ldr	x0, [sp, #48]
    870c:	str	x0, [sp, #64]
    8710:	ldr	x1, [sp, #48]
    8714:	ldr	x0, [sp, #16]
    8718:	cmp	x1, x0
    871c:	cset	w0, hi  // hi = pmore
    8720:	and	w0, w0, #0xff
    8724:	and	x0, x0, #0xff
    8728:	cmp	x0, #0x0
    872c:	b.eq	874c <regerror+0x104>  // b.none
    8730:	ldr	x0, [sp, #16]
    8734:	sub	x0, x0, #0x1
    8738:	str	x0, [sp, #64]
    873c:	ldr	x1, [sp, #24]
    8740:	ldr	x0, [sp, #64]
    8744:	add	x0, x1, x0
    8748:	strb	wzr, [x0]
    874c:	ldr	x2, [sp, #64]
    8750:	ldr	x1, [sp, #72]
    8754:	ldr	x0, [sp, #24]
    8758:	bl	1d38 <grub_mod_fini+0x1818>
    875c:	ldr	x0, [sp, #48]
    8760:	ldp	x29, x30, [sp], #80
    8764:	ret
	...
    8780:	stp	x29, x30, [sp, #-64]!
    8784:	mov	x29, sp
    8788:	str	x0, [sp, #24]
    878c:	ldr	x0, [sp, #24]
    8790:	ldr	x0, [x0]
    8794:	cmp	x0, #0x0
    8798:	b.eq	87dc <regerror+0x194>  // b.none
    879c:	str	wzr, [sp, #60]
    87a0:	b	87c8 <regerror+0x180>
    87a4:	ldr	x0, [sp, #24]
    87a8:	ldr	x1, [x0]
    87ac:	ldrsw	x0, [sp, #60]
    87b0:	lsl	x0, x0, #4
    87b4:	add	x0, x1, x0
    87b8:	bl	ff58 <regfree+0x7590>
    87bc:	ldr	w0, [sp, #60]
    87c0:	add	w0, w0, #0x1
    87c4:	str	w0, [sp, #60]
    87c8:	ldrsw	x1, [sp, #60]
    87cc:	ldr	x0, [sp, #24]
    87d0:	ldr	x0, [x0, #16]
    87d4:	cmp	x1, x0
    87d8:	b.cc	87a4 <regerror+0x15c>  // b.lo, b.ul, b.last
    87dc:	ldr	x0, [sp, #24]
    87e0:	ldr	x0, [x0, #24]
    87e4:	bl	2230 <grub_mod_fini+0x1d10>
    87e8:	str	wzr, [sp, #60]
    87ec:	b	8880 <regerror+0x238>
    87f0:	ldr	x0, [sp, #24]
    87f4:	ldr	x0, [x0, #48]
    87f8:	cmp	x0, #0x0
    87fc:	b.eq	881c <regerror+0x1d4>  // b.none
    8800:	ldr	x0, [sp, #24]
    8804:	ldr	x1, [x0, #48]
    8808:	ldrsw	x0, [sp, #60]
    880c:	lsl	x0, x0, #4
    8810:	add	x0, x1, x0
    8814:	ldr	x0, [x0, #8]
    8818:	bl	2230 <grub_mod_fini+0x1d10>
    881c:	ldr	x0, [sp, #24]
    8820:	ldr	x0, [x0, #56]
    8824:	cmp	x0, #0x0
    8828:	b.eq	8848 <regerror+0x200>  // b.none
    882c:	ldr	x0, [sp, #24]
    8830:	ldr	x1, [x0, #56]
    8834:	ldrsw	x0, [sp, #60]
    8838:	lsl	x0, x0, #4
    883c:	add	x0, x1, x0
    8840:	ldr	x0, [x0, #8]
    8844:	bl	2230 <grub_mod_fini+0x1d10>
    8848:	ldr	x0, [sp, #24]
    884c:	ldr	x0, [x0, #40]
    8850:	cmp	x0, #0x0
    8854:	b.eq	8874 <regerror+0x22c>  // b.none
    8858:	ldr	x0, [sp, #24]
    885c:	ldr	x1, [x0, #40]
    8860:	ldrsw	x0, [sp, #60]
    8864:	lsl	x0, x0, #4
    8868:	add	x0, x1, x0
    886c:	ldr	x0, [x0, #8]
    8870:	bl	2230 <grub_mod_fini+0x1d10>
    8874:	ldr	w0, [sp, #60]
    8878:	add	w0, w0, #0x1
    887c:	str	w0, [sp, #60]
    8880:	ldrsw	x1, [sp, #60]
    8884:	ldr	x0, [sp, #24]
    8888:	ldr	x0, [x0, #16]
    888c:	cmp	x1, x0
    8890:	b.cc	87f0 <regerror+0x1a8>  // b.lo, b.ul, b.last
    8894:	ldr	x0, [sp, #24]
    8898:	ldr	x0, [x0, #40]
    889c:	bl	2230 <grub_mod_fini+0x1d10>
    88a0:	ldr	x0, [sp, #24]
    88a4:	ldr	x0, [x0, #48]
    88a8:	bl	2230 <grub_mod_fini+0x1d10>
    88ac:	ldr	x0, [sp, #24]
    88b0:	ldr	x0, [x0, #56]
    88b4:	bl	2230 <grub_mod_fini+0x1d10>
    88b8:	ldr	x0, [sp, #24]
    88bc:	ldr	x0, [x0]
    88c0:	bl	2230 <grub_mod_fini+0x1d10>
    88c4:	ldr	x0, [sp, #24]
    88c8:	ldr	x0, [x0, #64]
    88cc:	cmp	x0, #0x0
    88d0:	b.eq	896c <regerror+0x324>  // b.none
    88d4:	str	wzr, [sp, #60]
    88d8:	b	8958 <regerror+0x310>
    88dc:	ldr	x0, [sp, #24]
    88e0:	ldr	x1, [x0, #64]
    88e4:	ldrsw	x0, [sp, #60]
    88e8:	lsl	x0, x0, #4
    88ec:	add	x0, x1, x0
    88f0:	str	x0, [sp, #48]
    88f4:	str	wzr, [sp, #56]
    88f8:	b	892c <regerror+0x2e4>
    88fc:	ldr	x0, [sp, #48]
    8900:	ldr	x1, [x0, #8]
    8904:	ldrsw	x0, [sp, #56]
    8908:	lsl	x0, x0, #3
    890c:	add	x0, x1, x0
    8910:	ldr	x0, [x0]
    8914:	str	x0, [sp, #40]
    8918:	ldr	x0, [sp, #40]
    891c:	bl	7594 <grub_mod_fini+0x7074>
    8920:	ldr	w0, [sp, #56]
    8924:	add	w0, w0, #0x1
    8928:	str	w0, [sp, #56]
    892c:	ldr	x0, [sp, #48]
    8930:	ldr	w0, [x0]
    8934:	ldr	w1, [sp, #56]
    8938:	cmp	w1, w0
    893c:	b.lt	88fc <regerror+0x2b4>  // b.tstop
    8940:	ldr	x0, [sp, #48]
    8944:	ldr	x0, [x0, #8]
    8948:	bl	2230 <grub_mod_fini+0x1d10>
    894c:	ldr	w0, [sp, #60]
    8950:	add	w0, w0, #0x1
    8954:	str	w0, [sp, #60]
    8958:	ldr	x0, [sp, #24]
    895c:	ldr	w1, [x0, #132]
    8960:	ldr	w0, [sp, #60]
    8964:	cmp	w1, w0
    8968:	b.cs	88dc <regerror+0x294>  // b.hs, b.nlast
    896c:	ldr	x0, [sp, #24]
    8970:	ldr	x0, [x0, #64]
    8974:	bl	2230 <grub_mod_fini+0x1d10>
    8978:	ldr	x0, [sp, #24]
    897c:	ldr	x1, [x0, #120]
    8980:	adrp	x0, 0 <grub_mod_init-0x450>
    8984:	add	x0, x0, #0x0
    8988:	ldr	x0, [x0]
    898c:	cmp	x1, x0
    8990:	b.eq	89a0 <regerror+0x358>  // b.none
    8994:	ldr	x0, [sp, #24]
    8998:	ldr	x0, [x0, #120]
    899c:	bl	2230 <grub_mod_fini+0x1d10>
    89a0:	ldr	x0, [sp, #24]
    89a4:	ldr	x0, [x0, #208]
    89a8:	bl	2230 <grub_mod_fini+0x1d10>
    89ac:	ldr	x0, [sp, #24]
    89b0:	bl	2230 <grub_mod_fini+0x1d10>
    89b4:	nop
    89b8:	ldp	x29, x30, [sp], #64
    89bc:	ret
	...

00000000000089c8 <regfree>:
    89c8:	stp	x29, x30, [sp, #-48]!
    89cc:	mov	x29, sp
    89d0:	str	x0, [sp, #24]
    89d4:	ldr	x0, [sp, #24]
    89d8:	ldr	x0, [x0]
    89dc:	str	x0, [sp, #40]
    89e0:	ldr	x0, [sp, #40]
    89e4:	cmp	x0, #0x0
    89e8:	cset	w0, ne  // ne = any
    89ec:	and	w0, w0, #0xff
    89f0:	and	x0, x0, #0xff
    89f4:	cmp	x0, #0x0
    89f8:	b.eq	8a04 <regfree+0x3c>  // b.none
    89fc:	ldr	x0, [sp, #40]
    8a00:	bl	8780 <regerror+0x138>
    8a04:	ldr	x0, [sp, #24]
    8a08:	str	xzr, [x0]
    8a0c:	ldr	x0, [sp, #24]
    8a10:	str	xzr, [x0, #8]
    8a14:	ldr	x0, [sp, #24]
    8a18:	ldr	x0, [x0, #32]
    8a1c:	bl	2230 <grub_mod_fini+0x1d10>
    8a20:	ldr	x0, [sp, #24]
    8a24:	str	xzr, [x0, #32]
    8a28:	ldr	x0, [sp, #24]
    8a2c:	ldr	x0, [x0, #40]
    8a30:	bl	2230 <grub_mod_fini+0x1d10>
    8a34:	ldr	x0, [sp, #24]
    8a38:	str	xzr, [x0, #40]
    8a3c:	nop
    8a40:	ldp	x29, x30, [sp], #48
    8a44:	ret
    8a48:	stp	x29, x30, [sp, #-176]!
    8a4c:	mov	x29, sp
    8a50:	str	x0, [sp, #40]
    8a54:	str	x1, [sp, #32]
    8a58:	str	x2, [sp, #24]
    8a5c:	str	x3, [sp, #16]
    8a60:	str	wzr, [sp, #164]
    8a64:	ldr	x0, [sp, #40]
    8a68:	ldrb	w1, [x0, #56]
    8a6c:	and	w1, w1, #0xfffffff7
    8a70:	strb	w1, [x0, #56]
    8a74:	ldr	x0, [sp, #40]
    8a78:	ldr	x1, [sp, #16]
    8a7c:	str	x1, [x0, #24]
    8a80:	ldr	x0, [sp, #40]
    8a84:	ldrb	w1, [x0, #56]
    8a88:	and	w1, w1, #0xffffffbf
    8a8c:	strb	w1, [x0, #56]
    8a90:	ldr	x0, [sp, #40]
    8a94:	ldrb	w0, [x0, #56]
    8a98:	ubfx	x0, x0, #6, #1
    8a9c:	and	w2, w0, #0xff
    8aa0:	ldr	x1, [sp, #40]
    8aa4:	ldrb	w0, [x1, #56]
    8aa8:	bfi	w0, w2, #5, #1
    8aac:	strb	w0, [x1, #56]
    8ab0:	ldr	x0, [sp, #40]
    8ab4:	str	xzr, [x0, #16]
    8ab8:	ldr	x0, [sp, #40]
    8abc:	str	xzr, [x0, #48]
    8ac0:	ldr	x0, [sp, #40]
    8ac4:	ldrb	w1, [x0, #56]
    8ac8:	and	w1, w1, #0xfffffffe
    8acc:	strb	w1, [x0, #56]
    8ad0:	ldr	x0, [sp, #40]
    8ad4:	ldrb	w1, [x0, #56]
    8ad8:	and	w1, w1, #0xfffffff9
    8adc:	strb	w1, [x0, #56]
    8ae0:	ldr	x0, [sp, #40]
    8ae4:	ldr	x0, [x0]
    8ae8:	str	x0, [sp, #168]
    8aec:	ldr	x0, [sp, #40]
    8af0:	ldr	x0, [x0, #8]
    8af4:	cmp	x0, #0xd7
    8af8:	cset	w0, ls  // ls = plast
    8afc:	and	w0, w0, #0xff
    8b00:	and	x0, x0, #0xff
    8b04:	cmp	x0, #0x0
    8b08:	b.eq	8b4c <regfree+0x184>  // b.none
    8b0c:	ldr	x0, [sp, #40]
    8b10:	ldr	x0, [x0]
    8b14:	mov	x1, #0xd8                  	// #216
    8b18:	bl	2294 <grub_mod_fini+0x1d74>
    8b1c:	str	x0, [sp, #168]
    8b20:	ldr	x0, [sp, #168]
    8b24:	cmp	x0, #0x0
    8b28:	b.ne	8b34 <regfree+0x16c>  // b.any
    8b2c:	mov	w0, #0xc                   	// #12
    8b30:	b	8d50 <regfree+0x388>
    8b34:	ldr	x0, [sp, #40]
    8b38:	mov	x1, #0xd8                  	// #216
    8b3c:	str	x1, [x0, #8]
    8b40:	ldr	x0, [sp, #40]
    8b44:	ldr	x1, [sp, #168]
    8b48:	str	x1, [x0]
    8b4c:	ldr	x0, [sp, #40]
    8b50:	mov	x1, #0xd8                  	// #216
    8b54:	str	x1, [x0, #16]
    8b58:	ldr	x1, [sp, #24]
    8b5c:	ldr	x0, [sp, #168]
    8b60:	bl	8d58 <regfree+0x390>
    8b64:	str	w0, [sp, #164]
    8b68:	ldr	w0, [sp, #164]
    8b6c:	cmp	w0, #0x0
    8b70:	cset	w0, ne  // ne = any
    8b74:	and	w0, w0, #0xff
    8b78:	and	x0, x0, #0xff
    8b7c:	cmp	x0, #0x0
    8b80:	b.eq	8ba4 <regfree+0x1dc>  // b.none
    8b84:	ldr	x0, [sp, #168]
    8b88:	bl	8780 <regerror+0x138>
    8b8c:	ldr	x0, [sp, #40]
    8b90:	str	xzr, [x0]
    8b94:	ldr	x0, [sp, #40]
    8b98:	str	xzr, [x0, #8]
    8b9c:	ldr	w0, [sp, #164]
    8ba0:	b	8d50 <regfree+0x388>
    8ba4:	ldr	x0, [sp, #24]
    8ba8:	mov	w6, w0
    8bac:	ldr	x0, [sp, #40]
    8bb0:	ldr	x1, [x0, #40]
    8bb4:	ldr	x0, [sp, #16]
    8bb8:	and	x0, x0, #0x400000
    8bbc:	cmp	x0, #0x0
    8bc0:	cset	w0, ne  // ne = any
    8bc4:	and	w2, w0, #0xff
    8bc8:	add	x0, sp, #0x30
    8bcc:	ldr	x5, [sp, #168]
    8bd0:	mov	w4, w2
    8bd4:	mov	x3, x1
    8bd8:	mov	w2, w6
    8bdc:	ldr	x1, [sp, #32]
    8be0:	bl	2f7c <grub_mod_fini+0x2a5c>
    8be4:	str	w0, [sp, #164]
    8be8:	ldr	w0, [sp, #164]
    8bec:	cmp	w0, #0x0
    8bf0:	cset	w0, ne  // ne = any
    8bf4:	and	w0, w0, #0xff
    8bf8:	and	x0, x0, #0xff
    8bfc:	cmp	x0, #0x0
    8c00:	b.eq	8c48 <regfree+0x280>  // b.none
    8c04:	nop
    8c08:	b	8c18 <regfree+0x250>
    8c0c:	nop
    8c10:	b	8c18 <regfree+0x250>
    8c14:	nop
    8c18:	ldr	x0, [sp, #40]
    8c1c:	bl	934c <regfree+0x984>
    8c20:	add	x0, sp, #0x30
    8c24:	bl	5600 <grub_mod_fini+0x50e0>
    8c28:	ldr	x0, [sp, #168]
    8c2c:	bl	8780 <regerror+0x138>
    8c30:	ldr	x0, [sp, #40]
    8c34:	str	xzr, [x0]
    8c38:	ldr	x0, [sp, #40]
    8c3c:	str	xzr, [x0, #8]
    8c40:	ldr	w0, [sp, #164]
    8c44:	b	8d50 <regfree+0x388>
    8c48:	ldr	x0, [sp, #40]
    8c4c:	str	xzr, [x0, #48]
    8c50:	add	x1, sp, #0xa4
    8c54:	add	x0, sp, #0x30
    8c58:	mov	x3, x1
    8c5c:	ldr	x2, [sp, #16]
    8c60:	ldr	x1, [sp, #40]
    8c64:	bl	c424 <regfree+0x3a5c>
    8c68:	mov	x1, x0
    8c6c:	ldr	x0, [sp, #168]
    8c70:	str	x1, [x0, #104]
    8c74:	ldr	x0, [sp, #168]
    8c78:	ldr	x0, [x0, #104]
    8c7c:	cmp	x0, #0x0
    8c80:	cset	w0, eq  // eq = none
    8c84:	and	w0, w0, #0xff
    8c88:	and	x0, x0, #0xff
    8c8c:	cmp	x0, #0x0
    8c90:	b.ne	8c0c <regfree+0x244>  // b.any
    8c94:	ldr	x0, [sp, #40]
    8c98:	bl	9abc <regfree+0x10f4>
    8c9c:	str	w0, [sp, #164]
    8ca0:	ldr	w0, [sp, #164]
    8ca4:	cmp	w0, #0x0
    8ca8:	cset	w0, ne  // ne = any
    8cac:	and	w0, w0, #0xff
    8cb0:	and	x0, x0, #0xff
    8cb4:	cmp	x0, #0x0
    8cb8:	b.ne	8c14 <regfree+0x24c>  // b.any
    8cbc:	ldr	x0, [sp, #168]
    8cc0:	ldrb	w0, [x0, #160]
    8cc4:	and	w0, w0, #0x4
    8cc8:	and	w0, w0, #0xff
    8ccc:	cmp	w0, #0x0
    8cd0:	b.eq	8cfc <regfree+0x334>  // b.none
    8cd4:	ldr	x0, [sp, #16]
    8cd8:	and	x0, x0, #0x400000
    8cdc:	cmp	x0, #0x0
    8ce0:	b.ne	8cfc <regfree+0x334>  // b.any
    8ce4:	ldr	x0, [sp, #40]
    8ce8:	ldr	x0, [x0, #40]
    8cec:	cmp	x0, #0x0
    8cf0:	b.ne	8cfc <regfree+0x334>  // b.any
    8cf4:	ldr	x0, [sp, #168]
    8cf8:	bl	9778 <regfree+0xdb0>
    8cfc:	ldr	x0, [sp, #168]
    8d00:	bl	93d8 <regfree+0xa10>
    8d04:	str	w0, [sp, #164]
    8d08:	ldr	x0, [sp, #40]
    8d0c:	bl	934c <regfree+0x984>
    8d10:	add	x0, sp, #0x30
    8d14:	bl	5600 <grub_mod_fini+0x50e0>
    8d18:	ldr	w0, [sp, #164]
    8d1c:	cmp	w0, #0x0
    8d20:	cset	w0, ne  // ne = any
    8d24:	and	w0, w0, #0xff
    8d28:	and	x0, x0, #0xff
    8d2c:	cmp	x0, #0x0
    8d30:	b.eq	8d4c <regfree+0x384>  // b.none
    8d34:	ldr	x0, [sp, #168]
    8d38:	bl	8780 <regerror+0x138>
    8d3c:	ldr	x0, [sp, #40]
    8d40:	str	xzr, [x0]
    8d44:	ldr	x0, [sp, #40]
    8d48:	str	xzr, [x0, #8]
    8d4c:	ldr	w0, [sp, #164]
    8d50:	ldp	x29, x30, [sp], #176
    8d54:	ret
    8d58:	stp	x29, x30, [sp, #-80]!
    8d5c:	mov	x29, sp
    8d60:	str	x0, [sp, #24]
    8d64:	str	x1, [sp, #16]
    8d68:	mov	x0, #0x4                   	// #4
    8d6c:	str	x0, [sp, #56]
    8d70:	ldr	x0, [sp, #56]
    8d74:	cmp	x0, #0x10
    8d78:	b.ls	8df0 <regfree+0x428>  // b.plast
    8d7c:	ldr	x0, [sp, #56]
    8d80:	cmp	x0, #0x10
    8d84:	b.ls	8df0 <regfree+0x428>  // b.plast
    8d88:	ldr	x0, [sp, #56]
    8d8c:	cmp	x0, #0x10
    8d90:	b.ls	8df0 <regfree+0x428>  // b.plast
    8d94:	ldr	x0, [sp, #56]
    8d98:	cmp	x0, #0x10
    8d9c:	b.ls	8df0 <regfree+0x428>  // b.plast
    8da0:	ldr	x0, [sp, #56]
    8da4:	cmp	x0, #0x10
    8da8:	b.ls	8de4 <regfree+0x41c>  // b.plast
    8dac:	ldr	x0, [sp, #56]
    8db0:	cmp	x0, #0x10
    8db4:	b.ls	8de4 <regfree+0x41c>  // b.plast
    8db8:	ldr	x0, [sp, #56]
    8dbc:	cmp	x0, #0x10
    8dc0:	b.ls	8ddc <regfree+0x414>  // b.plast
    8dc4:	ldr	x2, [sp, #56]
    8dc8:	ldr	x1, [sp, #56]
    8dcc:	mov	x0, #0x8                   	// #8
    8dd0:	cmp	x2, #0x8
    8dd4:	csel	x0, x1, x0, cs  // cs = hs, nlast
    8dd8:	b	8dec <regfree+0x424>
    8ddc:	mov	x0, #0x10                  	// #16
    8de0:	b	8dec <regfree+0x424>
    8de4:	mov	x0, #0x10                  	// #16
    8de8:	b	8df4 <regfree+0x42c>
    8dec:	b	8df4 <regfree+0x42c>
    8df0:	mov	x0, #0x10                  	// #16
    8df4:	str	x0, [sp, #48]
    8df8:	mov	x2, #0xd8                  	// #216
    8dfc:	mov	w1, #0x0                   	// #0
    8e00:	ldr	x0, [sp, #24]
    8e04:	bl	0 <grub_memset>
    8e08:	ldr	x0, [sp, #24]
    8e0c:	mov	w1, #0xf                   	// #15
    8e10:	str	w1, [x0, #128]
    8e14:	mov	x1, #0xffffffffffffffff    	// #-1
    8e18:	ldr	x0, [sp, #48]
    8e1c:	udiv	x0, x1, x0
    8e20:	mov	x2, #0x7fffffff            	// #2147483647
    8e24:	mov	x1, #0x7fffffff            	// #2147483647
    8e28:	cmp	x0, x2
    8e2c:	csel	x0, x0, x1, ls  // ls = plast
    8e30:	lsr	x0, x0, #1
    8e34:	ldr	x1, [sp, #16]
    8e38:	cmp	x1, x0
    8e3c:	cset	w0, cs  // cs = hs, nlast
    8e40:	and	w0, w0, #0xff
    8e44:	and	x0, x0, #0xff
    8e48:	cmp	x0, #0x0
    8e4c:	b.eq	8e58 <regfree+0x490>  // b.none
    8e50:	mov	w0, #0xc                   	// #12
    8e54:	b	916c <regfree+0x7a4>
    8e58:	ldr	x0, [sp, #16]
    8e5c:	add	x1, x0, #0x1
    8e60:	ldr	x0, [sp, #24]
    8e64:	str	x1, [x0, #8]
    8e68:	ldr	x0, [sp, #24]
    8e6c:	ldr	x0, [x0, #8]
    8e70:	lsl	x0, x0, #4
    8e74:	bl	2250 <grub_mod_fini+0x1d30>
    8e78:	mov	x1, x0
    8e7c:	ldr	x0, [sp, #24]
    8e80:	str	x1, [x0]
    8e84:	mov	w0, #0x1                   	// #1
    8e88:	str	w0, [sp, #76]
    8e8c:	ldr	w0, [sp, #76]
    8e90:	ldr	x1, [sp, #16]
    8e94:	cmp	x1, x0
    8e98:	b.cc	8eac <regfree+0x4e4>  // b.lo, b.ul, b.last
    8e9c:	ldr	w0, [sp, #76]
    8ea0:	lsl	w0, w0, #1
    8ea4:	str	w0, [sp, #76]
    8ea8:	b	8e8c <regfree+0x4c4>
    8eac:	nop
    8eb0:	ldr	w0, [sp, #76]
    8eb4:	mov	x1, x0
    8eb8:	mov	x0, #0x10                  	// #16
    8ebc:	bl	226c <grub_mod_fini+0x1d4c>
    8ec0:	mov	x1, x0
    8ec4:	ldr	x0, [sp, #24]
    8ec8:	str	x1, [x0, #64]
    8ecc:	ldr	w0, [sp, #76]
    8ed0:	sub	w1, w0, #0x1
    8ed4:	ldr	x0, [sp, #24]
    8ed8:	str	w1, [x0, #132]
    8edc:	ldr	x0, [sp, #24]
    8ee0:	mov	w1, #0x4                   	// #4
    8ee4:	str	w1, [x0, #164]
    8ee8:	mov	w0, #0x0                   	// #0
    8eec:	bl	22f8 <grub_mod_fini+0x1dd8>
    8ef0:	str	x0, [sp, #40]
    8ef4:	ldr	x0, [sp, #40]
    8ef8:	ldrb	w0, [x0]
    8efc:	cmp	w0, #0x55
    8f00:	b.eq	8f14 <regfree+0x54c>  // b.none
    8f04:	ldr	x0, [sp, #40]
    8f08:	ldrb	w0, [x0]
    8f0c:	cmp	w0, #0x75
    8f10:	b.ne	8fb8 <regfree+0x5f0>  // b.any
    8f14:	ldr	x0, [sp, #40]
    8f18:	add	x0, x0, #0x1
    8f1c:	ldrb	w0, [x0]
    8f20:	cmp	w0, #0x54
    8f24:	b.eq	8f3c <regfree+0x574>  // b.none
    8f28:	ldr	x0, [sp, #40]
    8f2c:	add	x0, x0, #0x1
    8f30:	ldrb	w0, [x0]
    8f34:	cmp	w0, #0x74
    8f38:	b.ne	8fb8 <regfree+0x5f0>  // b.any
    8f3c:	ldr	x0, [sp, #40]
    8f40:	add	x0, x0, #0x2
    8f44:	ldrb	w0, [x0]
    8f48:	cmp	w0, #0x46
    8f4c:	b.eq	8f64 <regfree+0x59c>  // b.none
    8f50:	ldr	x0, [sp, #40]
    8f54:	add	x0, x0, #0x2
    8f58:	ldrb	w0, [x0]
    8f5c:	cmp	w0, #0x66
    8f60:	b.ne	8fb8 <regfree+0x5f0>  // b.any
    8f64:	ldr	x0, [sp, #40]
    8f68:	add	x0, x0, #0x3
    8f6c:	ldrb	w0, [x0]
    8f70:	cmp	w0, #0x2d
    8f74:	b.ne	8f80 <regfree+0x5b8>  // b.any
    8f78:	mov	x0, #0x4                   	// #4
    8f7c:	b	8f84 <regfree+0x5bc>
    8f80:	mov	x0, #0x3                   	// #3
    8f84:	ldr	x1, [sp, #40]
    8f88:	add	x2, x1, x0
    8f8c:	adrp	x0, 0 <grub_mod_init-0x450>
    8f90:	add	x0, x0, #0x0
    8f94:	ldr	x1, [x0]
    8f98:	mov	x0, x2
    8f9c:	bl	22d4 <grub_mod_fini+0x1db4>
    8fa0:	cmp	w0, #0x0
    8fa4:	b.ne	8fb8 <regfree+0x5f0>  // b.any
    8fa8:	ldr	x0, [sp, #24]
    8fac:	ldrb	w1, [x0, #160]
    8fb0:	orr	w1, w1, #0x4
    8fb4:	strb	w1, [x0, #160]
    8fb8:	ldr	x0, [sp, #24]
    8fbc:	ldrb	w1, [x0, #160]
    8fc0:	and	w1, w1, #0xfffffff7
    8fc4:	strb	w1, [x0, #160]
    8fc8:	ldr	x0, [sp, #24]
    8fcc:	ldr	w0, [x0, #164]
    8fd0:	cmp	w0, #0x1
    8fd4:	b.le	9120 <regfree+0x758>
    8fd8:	ldr	x0, [sp, #24]
    8fdc:	ldrb	w0, [x0, #160]
    8fe0:	and	w0, w0, #0x4
    8fe4:	and	w0, w0, #0xff
    8fe8:	cmp	w0, #0x0
    8fec:	b.eq	9008 <regfree+0x640>  // b.none
    8ff0:	ldr	x0, [sp, #24]
    8ff4:	adrp	x1, 0 <grub_mod_init-0x450>
    8ff8:	add	x1, x1, #0x0
    8ffc:	ldr	x1, [x1]
    9000:	str	x1, [x0, #120]
    9004:	b	9120 <regfree+0x758>
    9008:	mov	x1, #0x1                   	// #1
    900c:	mov	x0, #0x20                  	// #32
    9010:	bl	226c <grub_mod_fini+0x1d4c>
    9014:	mov	x1, x0
    9018:	ldr	x0, [sp, #24]
    901c:	str	x1, [x0, #120]
    9020:	ldr	x0, [sp, #24]
    9024:	ldr	x0, [x0, #120]
    9028:	cmp	x0, #0x0
    902c:	cset	w0, eq  // eq = none
    9030:	and	w0, w0, #0xff
    9034:	and	x0, x0, #0xff
    9038:	cmp	x0, #0x0
    903c:	b.eq	9048 <regfree+0x680>  // b.none
    9040:	mov	w0, #0xc                   	// #12
    9044:	b	916c <regfree+0x7a4>
    9048:	str	wzr, [sp, #72]
    904c:	str	wzr, [sp, #64]
    9050:	b	9114 <regfree+0x74c>
    9054:	str	wzr, [sp, #68]
    9058:	b	90fc <regfree+0x734>
    905c:	ldr	w0, [sp, #64]
    9060:	bl	26b0 <grub_mod_fini+0x2190>
    9064:	str	w0, [sp, #36]
    9068:	ldr	w0, [sp, #36]
    906c:	cmn	w0, #0x1
    9070:	b.eq	90b4 <regfree+0x6ec>  // b.none
    9074:	ldr	x0, [sp, #24]
    9078:	ldr	x1, [x0, #120]
    907c:	ldrsw	x0, [sp, #72]
    9080:	lsl	x0, x0, #3
    9084:	add	x0, x1, x0
    9088:	ldr	x2, [x0]
    908c:	ldr	w0, [sp, #68]
    9090:	mov	x1, #0x1                   	// #1
    9094:	lsl	x1, x1, x0
    9098:	ldr	x0, [sp, #24]
    909c:	ldr	x3, [x0, #120]
    90a0:	ldrsw	x0, [sp, #72]
    90a4:	lsl	x0, x0, #3
    90a8:	add	x0, x3, x0
    90ac:	orr	x1, x2, x1
    90b0:	str	x1, [x0]
    90b4:	ldr	w0, [sp, #64]
    90b8:	bl	2088 <grub_mod_fini+0x1b68>
    90bc:	cmp	w0, #0x0
    90c0:	b.eq	90e4 <regfree+0x71c>  // b.none
    90c4:	ldr	w1, [sp, #36]
    90c8:	ldr	w0, [sp, #64]
    90cc:	cmp	w1, w0
    90d0:	b.eq	90e4 <regfree+0x71c>  // b.none
    90d4:	ldr	x0, [sp, #24]
    90d8:	ldrb	w1, [x0, #160]
    90dc:	orr	w1, w1, #0x8
    90e0:	strb	w1, [x0, #160]
    90e4:	ldr	w0, [sp, #68]
    90e8:	add	w0, w0, #0x1
    90ec:	str	w0, [sp, #68]
    90f0:	ldr	w0, [sp, #64]
    90f4:	add	w0, w0, #0x1
    90f8:	str	w0, [sp, #64]
    90fc:	ldr	w0, [sp, #68]
    9100:	cmp	w0, #0x3f
    9104:	b.le	905c <regfree+0x694>
    9108:	ldr	w0, [sp, #72]
    910c:	add	w0, w0, #0x1
    9110:	str	w0, [sp, #72]
    9114:	ldr	w0, [sp, #72]
    9118:	cmp	w0, #0x3
    911c:	b.le	9054 <regfree+0x68c>
    9120:	ldr	x0, [sp, #24]
    9124:	ldr	x0, [x0]
    9128:	cmp	x0, #0x0
    912c:	cset	w0, eq  // eq = none
    9130:	and	w0, w0, #0xff
    9134:	and	x0, x0, #0xff
    9138:	cmp	x0, #0x0
    913c:	b.ne	9160 <regfree+0x798>  // b.any
    9140:	ldr	x0, [sp, #24]
    9144:	ldr	x0, [x0, #64]
    9148:	cmp	x0, #0x0
    914c:	cset	w0, eq  // eq = none
    9150:	and	w0, w0, #0xff
    9154:	and	x0, x0, #0xff
    9158:	cmp	x0, #0x0
    915c:	b.eq	9168 <regfree+0x7a0>  // b.none
    9160:	mov	w0, #0xc                   	// #12
    9164:	b	916c <regfree+0x7a4>
    9168:	mov	w0, #0x0                   	// #0
    916c:	ldp	x29, x30, [sp], #80
    9170:	ret
    9174:	nop
	...
    9188:	stp	x29, x30, [sp, #-80]!
    918c:	mov	x29, sp
    9190:	str	x0, [sp, #24]
    9194:	str	wzr, [sp, #76]
    9198:	str	wzr, [sp, #68]
    919c:	ldr	x0, [sp, #24]
    91a0:	ldrb	w1, [x0, #160]
    91a4:	orr	w1, w1, #0x10
    91a8:	strb	w1, [x0, #160]
    91ac:	ldr	x0, [sp, #24]
    91b0:	ldrb	w0, [x0, #160]
    91b4:	and	w0, w0, #0x8
    91b8:	and	w0, w0, #0xff
    91bc:	cmp	w0, #0x0
    91c0:	cset	w0, eq  // eq = none
    91c4:	and	w0, w0, #0xff
    91c8:	and	x0, x0, #0xff
    91cc:	cmp	x0, #0x0
    91d0:	b.eq	929c <regfree+0x8d4>  // b.none
    91d4:	str	xzr, [sp, #56]
    91d8:	mov	x0, #0x3ff0000             	// #67043328
    91dc:	str	x0, [sp, #48]
    91e0:	mov	x0, #0xfffe                	// #65534
    91e4:	movk	x0, #0x87ff, lsl #16
    91e8:	str	x0, [sp, #40]
    91ec:	mov	x0, #0x7fffffe             	// #134217726
    91f0:	str	x0, [sp, #32]
    91f4:	ldr	x0, [sp, #48]
    91f8:	lsl	x1, x0, #32
    91fc:	ldr	x0, [sp, #56]
    9200:	orr	x1, x1, x0
    9204:	ldr	x0, [sp, #24]
    9208:	str	x1, [x0, #168]
    920c:	ldr	x0, [sp, #32]
    9210:	lsl	x1, x0, #32
    9214:	ldr	x0, [sp, #40]
    9218:	orr	x1, x1, x0
    921c:	ldr	x0, [sp, #24]
    9220:	str	x1, [x0, #176]
    9224:	mov	w0, #0x2                   	// #2
    9228:	str	w0, [sp, #76]
    922c:	mov	w0, #0x80                  	// #128
    9230:	str	w0, [sp, #68]
    9234:	ldr	x0, [sp, #24]
    9238:	ldrb	w0, [x0, #160]
    923c:	ubfx	x0, x0, #2, #1
    9240:	and	w0, w0, #0xff
    9244:	and	x0, x0, #0xff
    9248:	cmp	x0, #0x0
    924c:	b.eq	929c <regfree+0x8d4>  // b.none
    9250:	ldrsw	x0, [sp, #76]
    9254:	add	x0, x0, #0x14
    9258:	lsl	x0, x0, #3
    925c:	ldr	x1, [sp, #24]
    9260:	add	x0, x1, x0
    9264:	add	x3, x0, #0x8
    9268:	mov	w1, #0x100                 	// #256
    926c:	ldr	w0, [sp, #68]
    9270:	sub	w0, w1, w0
    9274:	add	w1, w0, #0x7
    9278:	cmp	w0, #0x0
    927c:	csel	w0, w1, w0, lt  // lt = tstop
    9280:	asr	w0, w0, #3
    9284:	sxtw	x0, w0
    9288:	mov	x2, x0
    928c:	mov	w1, #0x0                   	// #0
    9290:	mov	x0, x3
    9294:	bl	0 <grub_memset>
    9298:	b	9344 <regfree+0x97c>
    929c:	nop
    92a0:	b	9338 <regfree+0x970>
    92a4:	str	wzr, [sp, #72]
    92a8:	b	9320 <regfree+0x958>
    92ac:	ldr	w0, [sp, #68]
    92b0:	bl	2168 <grub_mod_fini+0x1c48>
    92b4:	cmp	w0, #0x0
    92b8:	b.ne	92c8 <regfree+0x900>  // b.any
    92bc:	ldr	w0, [sp, #68]
    92c0:	cmp	w0, #0x5f
    92c4:	b.ne	9308 <regfree+0x940>  // b.any
    92c8:	ldr	x1, [sp, #24]
    92cc:	ldrsw	x0, [sp, #76]
    92d0:	add	x0, x0, #0x14
    92d4:	lsl	x0, x0, #3
    92d8:	add	x0, x1, x0
    92dc:	ldr	x1, [x0, #8]
    92e0:	ldr	w0, [sp, #72]
    92e4:	mov	x2, #0x1                   	// #1
    92e8:	lsl	x0, x2, x0
    92ec:	orr	x1, x1, x0
    92f0:	ldr	x2, [sp, #24]
    92f4:	ldrsw	x0, [sp, #76]
    92f8:	add	x0, x0, #0x14
    92fc:	lsl	x0, x0, #3
    9300:	add	x0, x2, x0
    9304:	str	x1, [x0, #8]
    9308:	ldr	w0, [sp, #72]
    930c:	add	w0, w0, #0x1
    9310:	str	w0, [sp, #72]
    9314:	ldr	w0, [sp, #68]
    9318:	add	w0, w0, #0x1
    931c:	str	w0, [sp, #68]
    9320:	ldr	w0, [sp, #72]
    9324:	cmp	w0, #0x3f
    9328:	b.le	92ac <regfree+0x8e4>
    932c:	ldr	w0, [sp, #76]
    9330:	add	w0, w0, #0x1
    9334:	str	w0, [sp, #76]
    9338:	ldr	w0, [sp, #76]
    933c:	cmp	w0, #0x3
    9340:	b.le	92a4 <regfree+0x8dc>
    9344:	ldp	x29, x30, [sp], #80
    9348:	ret
    934c:	stp	x29, x30, [sp, #-64]!
    9350:	mov	x29, sp
    9354:	str	x0, [sp, #24]
    9358:	ldr	x0, [sp, #24]
    935c:	ldr	x0, [x0]
    9360:	str	x0, [sp, #48]
    9364:	ldr	x0, [sp, #48]
    9368:	ldr	x0, [x0, #112]
    936c:	str	x0, [sp, #56]
    9370:	b	9390 <regfree+0x9c8>
    9374:	ldr	x0, [sp, #56]
    9378:	ldr	x0, [x0]
    937c:	str	x0, [sp, #40]
    9380:	ldr	x0, [sp, #56]
    9384:	bl	2230 <grub_mod_fini+0x1d10>
    9388:	ldr	x0, [sp, #40]
    938c:	str	x0, [sp, #56]
    9390:	ldr	x0, [sp, #56]
    9394:	cmp	x0, #0x0
    9398:	b.ne	9374 <regfree+0x9ac>  // b.any
    939c:	ldr	x0, [sp, #48]
    93a0:	str	xzr, [x0, #112]
    93a4:	ldr	x0, [sp, #48]
    93a8:	mov	w1, #0xf                   	// #15
    93ac:	str	w1, [x0, #128]
    93b0:	ldr	x0, [sp, #48]
    93b4:	str	xzr, [x0, #104]
    93b8:	ldr	x0, [sp, #48]
    93bc:	ldr	x0, [x0, #32]
    93c0:	bl	2230 <grub_mod_fini+0x1d10>
    93c4:	ldr	x0, [sp, #48]
    93c8:	str	xzr, [x0, #32]
    93cc:	nop
    93d0:	ldp	x29, x30, [sp], #64
    93d4:	ret
    93d8:	stp	x29, x30, [sp, #-96]!
    93dc:	mov	x29, sp
    93e0:	str	x0, [sp, #24]
    93e4:	ldr	x0, [sp, #24]
    93e8:	ldr	x0, [x0, #104]
    93ec:	ldr	x0, [x0, #24]
    93f0:	ldr	w0, [x0, #56]
    93f4:	str	w0, [sp, #84]
    93f8:	ldr	x0, [sp, #24]
    93fc:	ldr	w1, [sp, #84]
    9400:	str	w1, [x0, #136]
    9404:	ldr	x0, [sp, #24]
    9408:	ldr	x1, [x0, #48]
    940c:	ldrsw	x0, [sp, #84]
    9410:	lsl	x0, x0, #4
    9414:	add	x1, x1, x0
    9418:	add	x0, sp, #0x20
    941c:	bl	5a34 <grub_mod_fini+0x5514>
    9420:	str	w0, [sp, #52]
    9424:	ldr	w0, [sp, #52]
    9428:	cmp	w0, #0x0
    942c:	cset	w0, ne  // ne = any
    9430:	and	w0, w0, #0xff
    9434:	and	x0, x0, #0xff
    9438:	cmp	x0, #0x0
    943c:	b.eq	9448 <regfree+0xa80>  // b.none
    9440:	ldr	w0, [sp, #52]
    9444:	b	9770 <regfree+0xda8>
    9448:	ldr	x0, [sp, #24]
    944c:	ldr	w0, [x0, #140]
    9450:	cmp	w0, #0x0
    9454:	b.le	95e4 <regfree+0xc1c>
    9458:	str	wzr, [sp, #92]
    945c:	b	95d4 <regfree+0xc0c>
    9460:	ldr	x1, [sp, #40]
    9464:	ldrsw	x0, [sp, #92]
    9468:	lsl	x0, x0, #2
    946c:	add	x0, x1, x0
    9470:	ldr	w0, [x0]
    9474:	str	w0, [sp, #80]
    9478:	ldr	x0, [sp, #24]
    947c:	ldr	x1, [x0]
    9480:	ldrsw	x0, [sp, #80]
    9484:	lsl	x0, x0, #4
    9488:	add	x0, x1, x0
    948c:	ldrb	w0, [x0, #8]
    9490:	str	w0, [sp, #76]
    9494:	ldr	w0, [sp, #76]
    9498:	cmp	w0, #0x4
    949c:	b.ne	95bc <regfree+0xbf4>  // b.any
    94a0:	str	wzr, [sp, #88]
    94a4:	b	9518 <regfree+0xb50>
    94a8:	ldr	x0, [sp, #24]
    94ac:	ldr	x1, [x0]
    94b0:	ldr	x2, [sp, #40]
    94b4:	ldrsw	x0, [sp, #88]
    94b8:	lsl	x0, x0, #2
    94bc:	add	x0, x2, x0
    94c0:	ldr	w0, [x0]
    94c4:	sxtw	x0, w0
    94c8:	lsl	x0, x0, #4
    94cc:	add	x0, x1, x0
    94d0:	str	x0, [sp, #64]
    94d4:	ldr	x0, [sp, #64]
    94d8:	ldrb	w0, [x0, #8]
    94dc:	cmp	w0, #0x9
    94e0:	b.ne	950c <regfree+0xb44>  // b.any
    94e4:	ldr	x0, [sp, #64]
    94e8:	ldr	w1, [x0]
    94ec:	ldr	x0, [sp, #24]
    94f0:	ldr	x2, [x0]
    94f4:	ldrsw	x0, [sp, #80]
    94f8:	lsl	x0, x0, #4
    94fc:	add	x0, x2, x0
    9500:	ldr	w0, [x0]
    9504:	cmp	w1, w0
    9508:	b.eq	952c <regfree+0xb64>  // b.none
    950c:	ldr	w0, [sp, #88]
    9510:	add	w0, w0, #0x1
    9514:	str	w0, [sp, #88]
    9518:	ldr	w0, [sp, #36]
    951c:	ldr	w1, [sp, #88]
    9520:	cmp	w1, w0
    9524:	b.lt	94a8 <regfree+0xae0>  // b.tstop
    9528:	b	9530 <regfree+0xb68>
    952c:	nop
    9530:	ldr	w0, [sp, #36]
    9534:	ldr	w1, [sp, #88]
    9538:	cmp	w1, w0
    953c:	b.eq	95c4 <regfree+0xbfc>  // b.none
    9540:	ldr	w0, [sp, #76]
    9544:	cmp	w0, #0x4
    9548:	b.ne	95c8 <regfree+0xc00>  // b.any
    954c:	ldr	x0, [sp, #24]
    9550:	ldr	x1, [x0, #40]
    9554:	ldrsw	x0, [sp, #80]
    9558:	lsl	x0, x0, #4
    955c:	add	x0, x1, x0
    9560:	ldr	x0, [x0, #8]
    9564:	ldr	w0, [x0]
    9568:	str	w0, [sp, #60]
    956c:	add	x0, sp, #0x20
    9570:	ldr	w1, [sp, #60]
    9574:	bl	6b7c <grub_mod_fini+0x665c>
    9578:	cmp	w0, #0x0
    957c:	b.ne	95c8 <regfree+0xc00>  // b.any
    9580:	ldr	x0, [sp, #24]
    9584:	ldr	x1, [x0, #48]
    9588:	ldrsw	x0, [sp, #60]
    958c:	lsl	x0, x0, #4
    9590:	add	x1, x1, x0
    9594:	add	x0, sp, #0x20
    9598:	bl	634c <grub_mod_fini+0x5e2c>
    959c:	str	w0, [sp, #56]
    95a0:	ldr	w0, [sp, #56]
    95a4:	cmp	w0, #0x0
    95a8:	b.eq	95b4 <regfree+0xbec>  // b.none
    95ac:	ldr	w0, [sp, #56]
    95b0:	b	9770 <regfree+0xda8>
    95b4:	str	wzr, [sp, #92]
    95b8:	b	95c8 <regfree+0xc00>
    95bc:	nop
    95c0:	b	95c8 <regfree+0xc00>
    95c4:	nop
    95c8:	ldr	w0, [sp, #92]
    95cc:	add	w0, w0, #0x1
    95d0:	str	w0, [sp, #92]
    95d4:	ldr	w0, [sp, #36]
    95d8:	ldr	w1, [sp, #92]
    95dc:	cmp	w1, w0
    95e0:	b.lt	9460 <regfree+0xa98>  // b.tstop
    95e4:	add	x1, sp, #0x20
    95e8:	add	x0, sp, #0x34
    95ec:	mov	w3, #0x0                   	// #0
    95f0:	mov	x2, x1
    95f4:	ldr	x1, [sp, #24]
    95f8:	bl	7248 <grub_mod_fini+0x6d28>
    95fc:	mov	x1, x0
    9600:	ldr	x0, [sp, #24]
    9604:	str	x1, [x0, #72]
    9608:	ldr	x0, [sp, #24]
    960c:	ldr	x0, [x0, #72]
    9610:	cmp	x0, #0x0
    9614:	cset	w0, eq  // eq = none
    9618:	and	w0, w0, #0xff
    961c:	and	x0, x0, #0xff
    9620:	cmp	x0, #0x0
    9624:	b.eq	9630 <regfree+0xc68>  // b.none
    9628:	ldr	w0, [sp, #52]
    962c:	b	9770 <regfree+0xda8>
    9630:	ldr	x0, [sp, #24]
    9634:	ldr	x0, [x0, #72]
    9638:	ldrb	w0, [x0, #80]
    963c:	and	w0, w0, #0xffffff80
    9640:	and	w0, w0, #0xff
    9644:	cmp	w0, #0x0
    9648:	b.eq	9734 <regfree+0xd6c>  // b.none
    964c:	add	x1, sp, #0x20
    9650:	add	x0, sp, #0x34
    9654:	mov	w3, #0x1                   	// #1
    9658:	mov	x2, x1
    965c:	ldr	x1, [sp, #24]
    9660:	bl	7248 <grub_mod_fini+0x6d28>
    9664:	mov	x1, x0
    9668:	ldr	x0, [sp, #24]
    966c:	str	x1, [x0, #80]
    9670:	add	x1, sp, #0x20
    9674:	add	x0, sp, #0x34
    9678:	mov	w3, #0x2                   	// #2
    967c:	mov	x2, x1
    9680:	ldr	x1, [sp, #24]
    9684:	bl	7248 <grub_mod_fini+0x6d28>
    9688:	mov	x1, x0
    968c:	ldr	x0, [sp, #24]
    9690:	str	x1, [x0, #88]
    9694:	add	x1, sp, #0x20
    9698:	add	x0, sp, #0x34
    969c:	mov	w3, #0x6                   	// #6
    96a0:	mov	x2, x1
    96a4:	ldr	x1, [sp, #24]
    96a8:	bl	7248 <grub_mod_fini+0x6d28>
    96ac:	mov	x1, x0
    96b0:	ldr	x0, [sp, #24]
    96b4:	str	x1, [x0, #96]
    96b8:	ldr	x0, [sp, #24]
    96bc:	ldr	x0, [x0, #80]
    96c0:	cmp	x0, #0x0
    96c4:	cset	w0, eq  // eq = none
    96c8:	and	w0, w0, #0xff
    96cc:	and	x0, x0, #0xff
    96d0:	cmp	x0, #0x0
    96d4:	b.ne	96f8 <regfree+0xd30>  // b.any
    96d8:	ldr	x0, [sp, #24]
    96dc:	ldr	x0, [x0, #88]
    96e0:	cmp	x0, #0x0
    96e4:	cset	w0, eq  // eq = none
    96e8:	and	w0, w0, #0xff
    96ec:	and	x0, x0, #0xff
    96f0:	cmp	x0, #0x0
    96f4:	b.eq	9700 <regfree+0xd38>  // b.none
    96f8:	mov	w0, #0x1                   	// #1
    96fc:	b	9704 <regfree+0xd3c>
    9700:	mov	w0, #0x0                   	// #0
    9704:	cmp	w0, #0x0
    9708:	b.ne	972c <regfree+0xd64>  // b.any
    970c:	ldr	x0, [sp, #24]
    9710:	ldr	x0, [x0, #96]
    9714:	cmp	x0, #0x0
    9718:	cset	w0, eq  // eq = none
    971c:	and	w0, w0, #0xff
    9720:	and	x0, x0, #0xff
    9724:	cmp	x0, #0x0
    9728:	b.eq	9764 <regfree+0xd9c>  // b.none
    972c:	ldr	w0, [sp, #52]
    9730:	b	9770 <regfree+0xda8>
    9734:	ldr	x0, [sp, #24]
    9738:	ldr	x1, [x0, #72]
    973c:	ldr	x0, [sp, #24]
    9740:	str	x1, [x0, #96]
    9744:	ldr	x0, [sp, #24]
    9748:	ldr	x1, [x0, #96]
    974c:	ldr	x0, [sp, #24]
    9750:	str	x1, [x0, #88]
    9754:	ldr	x0, [sp, #24]
    9758:	ldr	x1, [x0, #88]
    975c:	ldr	x0, [sp, #24]
    9760:	str	x1, [x0, #80]
    9764:	ldr	x0, [sp, #40]
    9768:	bl	2230 <grub_mod_fini+0x1d10>
    976c:	mov	w0, #0x0                   	// #0
    9770:	ldp	x29, x30, [sp], #96
    9774:	ret
    9778:	sub	sp, sp, #0x20
    977c:	str	x0, [sp, #8]
    9780:	strb	wzr, [sp, #23]
    9784:	strb	wzr, [sp, #22]
    9788:	str	wzr, [sp, #28]
    978c:	b	9948 <regfree+0xf80>
    9790:	ldr	x0, [sp, #8]
    9794:	ldr	x1, [x0]
    9798:	ldrsw	x0, [sp, #28]
    979c:	lsl	x0, x0, #4
    97a0:	add	x0, x1, x0
    97a4:	ldrb	w0, [x0, #8]
    97a8:	cmp	w0, #0xc
    97ac:	b.eq	984c <regfree+0xe84>  // b.none
    97b0:	cmp	w0, #0xc
    97b4:	b.gt	9928 <regfree+0xf60>
    97b8:	cmp	w0, #0xb
    97bc:	b.gt	9928 <regfree+0xf60>
    97c0:	cmp	w0, #0x8
    97c4:	b.ge	9930 <regfree+0xf68>  // b.tcont
    97c8:	cmp	w0, #0x6
    97cc:	b.eq	9aa0 <regfree+0x10d8>  // b.none
    97d0:	cmp	w0, #0x6
    97d4:	b.gt	9928 <regfree+0xf60>
    97d8:	cmp	w0, #0x5
    97dc:	b.eq	98b4 <regfree+0xeec>  // b.none
    97e0:	cmp	w0, #0x5
    97e4:	b.gt	9928 <regfree+0xf60>
    97e8:	cmp	w0, #0x4
    97ec:	b.eq	9930 <regfree+0xf68>  // b.none
    97f0:	cmp	w0, #0x4
    97f4:	b.gt	9928 <regfree+0xf60>
    97f8:	cmp	w0, #0x3
    97fc:	b.eq	98c0 <regfree+0xef8>  // b.none
    9800:	cmp	w0, #0x3
    9804:	b.gt	9928 <regfree+0xf60>
    9808:	cmp	w0, #0x1
    980c:	b.eq	981c <regfree+0xe54>  // b.none
    9810:	cmp	w0, #0x2
    9814:	b.eq	9930 <regfree+0xf68>  // b.none
    9818:	b	9928 <regfree+0xf60>
    981c:	ldr	x0, [sp, #8]
    9820:	ldr	x1, [x0]
    9824:	ldrsw	x0, [sp, #28]
    9828:	lsl	x0, x0, #4
    982c:	add	x0, x1, x0
    9830:	ldrb	w0, [x0]
    9834:	sxtb	w0, w0
    9838:	cmp	w0, #0x0
    983c:	b.ge	9938 <regfree+0xf70>  // b.tcont
    9840:	mov	w0, #0x1                   	// #1
    9844:	strb	w0, [sp, #23]
    9848:	b	9938 <regfree+0xf70>
    984c:	ldr	x0, [sp, #8]
    9850:	ldr	x1, [x0]
    9854:	ldrsw	x0, [sp, #28]
    9858:	lsl	x0, x0, #4
    985c:	add	x0, x1, x0
    9860:	ldr	w0, [x0]
    9864:	cmp	w0, #0x40
    9868:	b.hi	98a4 <regfree+0xedc>  // b.pmore
    986c:	cmp	w0, #0x10
    9870:	b.cc	9aa8 <regfree+0x10e0>  // b.lo, b.ul, b.last
    9874:	sub	w0, w0, #0x10
    9878:	mov	x1, #0x1                   	// #1
    987c:	lsl	x1, x1, x0
    9880:	mov	w0, #0x10001               	// #65537
    9884:	movk	x0, #0x1, lsl #48
    9888:	and	x0, x1, x0
    988c:	cmp	x0, #0x0
    9890:	cset	w0, ne  // ne = any
    9894:	and	w0, w0, #0xff
    9898:	cmp	w0, #0x0
    989c:	b.ne	98ac <regfree+0xee4>  // b.any
    98a0:	b	9aa8 <regfree+0x10e0>
    98a4:	cmp	w0, #0x80
    98a8:	b.ne	9aa8 <regfree+0x10e0>  // b.any
    98ac:	nop
    98b0:	b	993c <regfree+0xf74>
    98b4:	mov	w0, #0x1                   	// #1
    98b8:	strb	w0, [sp, #22]
    98bc:	b	993c <regfree+0xf74>
    98c0:	str	wzr, [sp, #16]
    98c4:	mov	w0, #0x2                   	// #2
    98c8:	str	w0, [sp, #24]
    98cc:	b	9918 <regfree+0xf50>
    98d0:	ldr	x0, [sp, #8]
    98d4:	ldr	x1, [x0]
    98d8:	ldrsw	x0, [sp, #28]
    98dc:	lsl	x0, x0, #4
    98e0:	add	x0, x1, x0
    98e4:	ldr	x1, [x0]
    98e8:	ldrsw	x0, [sp, #24]
    98ec:	lsl	x0, x0, #3
    98f0:	add	x0, x1, x0
    98f4:	ldr	x1, [x0]
    98f8:	ldr	w0, [sp, #16]
    98fc:	lsr	x0, x1, x0
    9900:	cmp	x0, #0x0
    9904:	b.ne	9ab0 <regfree+0x10e8>  // b.any
    9908:	str	wzr, [sp, #16]
    990c:	ldr	w0, [sp, #24]
    9910:	add	w0, w0, #0x1
    9914:	str	w0, [sp, #24]
    9918:	ldr	w0, [sp, #24]
    991c:	cmp	w0, #0x3
    9920:	b.le	98d0 <regfree+0xf08>
    9924:	b	993c <regfree+0xf74>
    9928:	nop
    992c:	b	993c <regfree+0xf74>
    9930:	nop
    9934:	b	993c <regfree+0xf74>
    9938:	nop
    993c:	ldr	w0, [sp, #28]
    9940:	add	w0, w0, #0x1
    9944:	str	w0, [sp, #28]
    9948:	ldrsw	x1, [sp, #28]
    994c:	ldr	x0, [sp, #8]
    9950:	ldr	x0, [x0, #16]
    9954:	cmp	x1, x0
    9958:	b.cc	9790 <regfree+0xdc8>  // b.lo, b.ul, b.last
    995c:	ldrb	w0, [sp, #23]
    9960:	cmp	w0, #0x0
    9964:	b.ne	9974 <regfree+0xfac>  // b.any
    9968:	ldrb	w0, [sp, #22]
    996c:	cmp	w0, #0x0
    9970:	b.eq	9a40 <regfree+0x1078>  // b.none
    9974:	str	wzr, [sp, #28]
    9978:	b	9a2c <regfree+0x1064>
    997c:	ldr	x0, [sp, #8]
    9980:	ldr	x1, [x0]
    9984:	ldrsw	x0, [sp, #28]
    9988:	lsl	x0, x0, #4
    998c:	add	x0, x1, x0
    9990:	ldrb	w0, [x0, #8]
    9994:	cmp	w0, #0x1
    9998:	b.ne	99e4 <regfree+0x101c>  // b.any
    999c:	ldr	x0, [sp, #8]
    99a0:	ldr	x1, [x0]
    99a4:	ldrsw	x0, [sp, #28]
    99a8:	lsl	x0, x0, #4
    99ac:	add	x0, x1, x0
    99b0:	ldrb	w0, [x0]
    99b4:	sxtb	w0, w0
    99b8:	cmp	w0, #0x0
    99bc:	b.ge	99e4 <regfree+0x101c>  // b.tcont
    99c0:	ldr	x0, [sp, #8]
    99c4:	ldr	x1, [x0]
    99c8:	ldrsw	x0, [sp, #28]
    99cc:	lsl	x0, x0, #4
    99d0:	add	x0, x1, x0
    99d4:	ldrb	w1, [x0, #10]
    99d8:	and	w1, w1, #0xffffffdf
    99dc:	strb	w1, [x0, #10]
    99e0:	b	9a20 <regfree+0x1058>
    99e4:	ldr	x0, [sp, #8]
    99e8:	ldr	x1, [x0]
    99ec:	ldrsw	x0, [sp, #28]
    99f0:	lsl	x0, x0, #4
    99f4:	add	x0, x1, x0
    99f8:	ldrb	w0, [x0, #8]
    99fc:	cmp	w0, #0x5
    9a00:	b.ne	9a20 <regfree+0x1058>  // b.any
    9a04:	ldr	x0, [sp, #8]
    9a08:	ldr	x1, [x0]
    9a0c:	ldrsw	x0, [sp, #28]
    9a10:	lsl	x0, x0, #4
    9a14:	add	x0, x1, x0
    9a18:	mov	w1, #0x7                   	// #7
    9a1c:	strb	w1, [x0, #8]
    9a20:	ldr	w0, [sp, #28]
    9a24:	add	w0, w0, #0x1
    9a28:	str	w0, [sp, #28]
    9a2c:	ldrsw	x1, [sp, #28]
    9a30:	ldr	x0, [sp, #8]
    9a34:	ldr	x0, [x0, #16]
    9a38:	cmp	x1, x0
    9a3c:	b.cc	997c <regfree+0xfb4>  // b.lo, b.ul, b.last
    9a40:	ldr	x0, [sp, #8]
    9a44:	mov	w1, #0x1                   	// #1
    9a48:	str	w1, [x0, #164]
    9a4c:	ldr	x0, [sp, #8]
    9a50:	ldrb	w1, [x0, #160]
    9a54:	and	w1, w1, #0xfffffffb
    9a58:	strb	w1, [x0, #160]
    9a5c:	ldr	x0, [sp, #8]
    9a60:	ldr	w0, [x0, #140]
    9a64:	cmp	w0, #0x0
    9a68:	b.gt	9a78 <regfree+0x10b0>
    9a6c:	ldrb	w0, [sp, #22]
    9a70:	cmp	w0, #0x0
    9a74:	b.eq	9a80 <regfree+0x10b8>  // b.none
    9a78:	mov	w0, #0x1                   	// #1
    9a7c:	b	9a84 <regfree+0x10bc>
    9a80:	mov	w0, #0x0                   	// #0
    9a84:	and	w0, w0, #0x1
    9a88:	and	w2, w0, #0xff
    9a8c:	ldr	x1, [sp, #8]
    9a90:	ldrb	w0, [x1, #160]
    9a94:	bfi	w0, w2, #1, #1
    9a98:	strb	w0, [x1, #160]
    9a9c:	b	9ab4 <regfree+0x10ec>
    9aa0:	nop
    9aa4:	b	9ab4 <regfree+0x10ec>
    9aa8:	nop
    9aac:	b	9ab4 <regfree+0x10ec>
    9ab0:	nop
    9ab4:	add	sp, sp, #0x20
    9ab8:	ret
    9abc:	stp	x29, x30, [sp, #-48]!
    9ac0:	mov	x29, sp
    9ac4:	str	x0, [sp, #24]
    9ac8:	ldr	x0, [sp, #24]
    9acc:	ldr	x0, [x0]
    9ad0:	str	x0, [sp, #32]
    9ad4:	ldr	x0, [sp, #32]
    9ad8:	ldr	x0, [x0, #8]
    9adc:	lsl	x0, x0, #2
    9ae0:	bl	2250 <grub_mod_fini+0x1d30>
    9ae4:	mov	x1, x0
    9ae8:	ldr	x0, [sp, #32]
    9aec:	str	x1, [x0, #24]
    9af0:	ldr	x0, [sp, #32]
    9af4:	ldr	x0, [x0, #8]
    9af8:	lsl	x0, x0, #2
    9afc:	bl	2250 <grub_mod_fini+0x1d30>
    9b00:	mov	x1, x0
    9b04:	ldr	x0, [sp, #32]
    9b08:	str	x1, [x0, #32]
    9b0c:	ldr	x0, [sp, #32]
    9b10:	ldr	x0, [x0, #8]
    9b14:	lsl	x0, x0, #4
    9b18:	bl	2250 <grub_mod_fini+0x1d30>
    9b1c:	mov	x1, x0
    9b20:	ldr	x0, [sp, #32]
    9b24:	str	x1, [x0, #40]
    9b28:	ldr	x0, [sp, #32]
    9b2c:	ldr	x0, [x0, #8]
    9b30:	lsl	x0, x0, #4
    9b34:	bl	2250 <grub_mod_fini+0x1d30>
    9b38:	mov	x1, x0
    9b3c:	ldr	x0, [sp, #32]
    9b40:	str	x1, [x0, #48]
    9b44:	ldr	x0, [sp, #32]
    9b48:	ldr	x0, [x0, #24]
    9b4c:	cmp	x0, #0x0
    9b50:	cset	w0, eq  // eq = none
    9b54:	and	w0, w0, #0xff
    9b58:	and	x0, x0, #0xff
    9b5c:	cmp	x0, #0x0
    9b60:	b.ne	9b84 <regfree+0x11bc>  // b.any
    9b64:	ldr	x0, [sp, #32]
    9b68:	ldr	x0, [x0, #32]
    9b6c:	cmp	x0, #0x0
    9b70:	cset	w0, eq  // eq = none
    9b74:	and	w0, w0, #0xff
    9b78:	and	x0, x0, #0xff
    9b7c:	cmp	x0, #0x0
    9b80:	b.eq	9b8c <regfree+0x11c4>  // b.none
    9b84:	mov	w0, #0x1                   	// #1
    9b88:	b	9b90 <regfree+0x11c8>
    9b8c:	mov	w0, #0x0                   	// #0
    9b90:	cmp	w0, #0x0
    9b94:	b.ne	9bb8 <regfree+0x11f0>  // b.any
    9b98:	ldr	x0, [sp, #32]
    9b9c:	ldr	x0, [x0, #40]
    9ba0:	cmp	x0, #0x0
    9ba4:	cset	w0, eq  // eq = none
    9ba8:	and	w0, w0, #0xff
    9bac:	and	x0, x0, #0xff
    9bb0:	cmp	x0, #0x0
    9bb4:	b.eq	9bc0 <regfree+0x11f8>  // b.none
    9bb8:	mov	w0, #0x1                   	// #1
    9bbc:	b	9bc4 <regfree+0x11fc>
    9bc0:	mov	w0, #0x0                   	// #0
    9bc4:	cmp	w0, #0x0
    9bc8:	b.ne	9bec <regfree+0x1224>  // b.any
    9bcc:	ldr	x0, [sp, #32]
    9bd0:	ldr	x0, [x0, #48]
    9bd4:	cmp	x0, #0x0
    9bd8:	cset	w0, eq  // eq = none
    9bdc:	and	w0, w0, #0xff
    9be0:	and	x0, x0, #0xff
    9be4:	cmp	x0, #0x0
    9be8:	b.eq	9bf4 <regfree+0x122c>  // b.none
    9bec:	mov	w0, #0xc                   	// #12
    9bf0:	b	9ecc <regfree+0x1504>
    9bf4:	ldr	x0, [sp, #24]
    9bf8:	ldr	x0, [x0, #48]
    9bfc:	lsl	x0, x0, #2
    9c00:	bl	2250 <grub_mod_fini+0x1d30>
    9c04:	mov	x1, x0
    9c08:	ldr	x0, [sp, #32]
    9c0c:	str	x1, [x0, #208]
    9c10:	ldr	x0, [sp, #32]
    9c14:	ldr	x0, [x0, #208]
    9c18:	cmp	x0, #0x0
    9c1c:	b.eq	9d00 <regfree+0x1338>  // b.none
    9c20:	str	wzr, [sp, #40]
    9c24:	b	9c50 <regfree+0x1288>
    9c28:	ldr	x0, [sp, #32]
    9c2c:	ldr	x1, [x0, #208]
    9c30:	ldrsw	x0, [sp, #40]
    9c34:	lsl	x0, x0, #2
    9c38:	add	x0, x1, x0
    9c3c:	ldr	w1, [sp, #40]
    9c40:	str	w1, [x0]
    9c44:	ldr	w0, [sp, #40]
    9c48:	add	w0, w0, #0x1
    9c4c:	str	w0, [sp, #40]
    9c50:	ldrsw	x1, [sp, #40]
    9c54:	ldr	x0, [sp, #24]
    9c58:	ldr	x0, [x0, #48]
    9c5c:	cmp	x1, x0
    9c60:	b.cc	9c28 <regfree+0x1260>  // b.lo, b.ul, b.last
    9c64:	ldr	x0, [sp, #32]
    9c68:	ldr	x3, [x0, #104]
    9c6c:	ldr	x2, [sp, #32]
    9c70:	adrp	x0, 0 <grub_mod_init-0x450>
    9c74:	add	x0, x0, #0x0
    9c78:	ldr	x1, [x0]
    9c7c:	mov	x0, x3
    9c80:	bl	a00c <regfree+0x1644>
    9c84:	str	wzr, [sp, #40]
    9c88:	b	9cbc <regfree+0x12f4>
    9c8c:	ldr	x0, [sp, #32]
    9c90:	ldr	x1, [x0, #208]
    9c94:	ldrsw	x0, [sp, #40]
    9c98:	lsl	x0, x0, #2
    9c9c:	add	x0, x1, x0
    9ca0:	ldr	w0, [x0]
    9ca4:	ldr	w1, [sp, #40]
    9ca8:	cmp	w1, w0
    9cac:	b.ne	9cd4 <regfree+0x130c>  // b.any
    9cb0:	ldr	w0, [sp, #40]
    9cb4:	add	w0, w0, #0x1
    9cb8:	str	w0, [sp, #40]
    9cbc:	ldrsw	x1, [sp, #40]
    9cc0:	ldr	x0, [sp, #24]
    9cc4:	ldr	x0, [x0, #48]
    9cc8:	cmp	x1, x0
    9ccc:	b.cc	9c8c <regfree+0x12c4>  // b.lo, b.ul, b.last
    9cd0:	b	9cd8 <regfree+0x1310>
    9cd4:	nop
    9cd8:	ldrsw	x1, [sp, #40]
    9cdc:	ldr	x0, [sp, #24]
    9ce0:	ldr	x0, [x0, #48]
    9ce4:	cmp	x1, x0
    9ce8:	b.ne	9d00 <regfree+0x1338>  // b.any
    9cec:	ldr	x0, [sp, #32]
    9cf0:	ldr	x0, [x0, #208]
    9cf4:	bl	2230 <grub_mod_fini+0x1d10>
    9cf8:	ldr	x0, [sp, #32]
    9cfc:	str	xzr, [x0, #208]
    9d00:	ldr	x0, [sp, #32]
    9d04:	ldr	x3, [x0, #104]
    9d08:	ldr	x2, [sp, #24]
    9d0c:	adrp	x0, 0 <grub_mod_init-0x450>
    9d10:	add	x0, x0, #0x0
    9d14:	ldr	x1, [x0]
    9d18:	mov	x0, x3
    9d1c:	bl	9f00 <regfree+0x1538>
    9d20:	str	w0, [sp, #44]
    9d24:	ldr	w0, [sp, #44]
    9d28:	cmp	w0, #0x0
    9d2c:	cset	w0, ne  // ne = any
    9d30:	and	w0, w0, #0xff
    9d34:	and	x0, x0, #0xff
    9d38:	cmp	x0, #0x0
    9d3c:	b.eq	9d48 <regfree+0x1380>  // b.none
    9d40:	ldr	w0, [sp, #44]
    9d44:	b	9ecc <regfree+0x1504>
    9d48:	ldr	x0, [sp, #32]
    9d4c:	ldr	x3, [x0, #104]
    9d50:	ldr	x2, [sp, #32]
    9d54:	adrp	x0, 0 <grub_mod_init-0x450>
    9d58:	add	x0, x0, #0x0
    9d5c:	ldr	x1, [x0]
    9d60:	mov	x0, x3
    9d64:	bl	9f00 <regfree+0x1538>
    9d68:	str	w0, [sp, #44]
    9d6c:	ldr	w0, [sp, #44]
    9d70:	cmp	w0, #0x0
    9d74:	cset	w0, ne  // ne = any
    9d78:	and	w0, w0, #0xff
    9d7c:	and	x0, x0, #0xff
    9d80:	cmp	x0, #0x0
    9d84:	b.eq	9d90 <regfree+0x13c8>  // b.none
    9d88:	ldr	w0, [sp, #44]
    9d8c:	b	9ecc <regfree+0x1504>
    9d90:	ldr	x0, [sp, #32]
    9d94:	ldr	x3, [x0, #104]
    9d98:	ldr	x2, [sp, #32]
    9d9c:	adrp	x0, 0 <grub_mod_init-0x450>
    9da0:	add	x0, x0, #0x0
    9da4:	ldr	x1, [x0]
    9da8:	mov	x0, x3
    9dac:	bl	a00c <regfree+0x1644>
    9db0:	ldr	x0, [sp, #32]
    9db4:	ldr	x3, [x0, #104]
    9db8:	ldr	x2, [sp, #32]
    9dbc:	adrp	x0, 0 <grub_mod_init-0x450>
    9dc0:	add	x0, x0, #0x0
    9dc4:	ldr	x1, [x0]
    9dc8:	mov	x0, x3
    9dcc:	bl	a00c <regfree+0x1644>
    9dd0:	str	w0, [sp, #44]
    9dd4:	ldr	w0, [sp, #44]
    9dd8:	cmp	w0, #0x0
    9ddc:	cset	w0, ne  // ne = any
    9de0:	and	w0, w0, #0xff
    9de4:	and	x0, x0, #0xff
    9de8:	cmp	x0, #0x0
    9dec:	b.eq	9df8 <regfree+0x1430>  // b.none
    9df0:	ldr	w0, [sp, #44]
    9df4:	b	9ecc <regfree+0x1504>
    9df8:	ldr	x0, [sp, #32]
    9dfc:	bl	b224 <regfree+0x285c>
    9e00:	str	w0, [sp, #44]
    9e04:	ldr	w0, [sp, #44]
    9e08:	cmp	w0, #0x0
    9e0c:	cset	w0, ne  // ne = any
    9e10:	and	w0, w0, #0xff
    9e14:	and	x0, x0, #0xff
    9e18:	cmp	x0, #0x0
    9e1c:	b.eq	9e28 <regfree+0x1460>  // b.none
    9e20:	ldr	w0, [sp, #44]
    9e24:	b	9ecc <regfree+0x1504>
    9e28:	ldr	x0, [sp, #24]
    9e2c:	ldrb	w0, [x0, #56]
    9e30:	and	w0, w0, #0x10
    9e34:	and	w0, w0, #0xff
    9e38:	cmp	w0, #0x0
    9e3c:	b.ne	9e68 <regfree+0x14a0>  // b.any
    9e40:	ldr	x0, [sp, #24]
    9e44:	ldr	x0, [x0, #48]
    9e48:	cmp	x0, #0x0
    9e4c:	b.eq	9e68 <regfree+0x14a0>  // b.none
    9e50:	ldr	x0, [sp, #32]
    9e54:	ldrb	w0, [x0, #160]
    9e58:	and	w0, w0, #0x1
    9e5c:	and	w0, w0, #0xff
    9e60:	cmp	w0, #0x0
    9e64:	b.ne	9e78 <regfree+0x14b0>  // b.any
    9e68:	ldr	x0, [sp, #32]
    9e6c:	ldr	w0, [x0, #140]
    9e70:	cmp	w0, #0x0
    9e74:	b.eq	9ec8 <regfree+0x1500>  // b.none
    9e78:	ldr	x0, [sp, #32]
    9e7c:	ldr	x0, [x0, #16]
    9e80:	lsl	x0, x0, #4
    9e84:	bl	2250 <grub_mod_fini+0x1d30>
    9e88:	mov	x1, x0
    9e8c:	ldr	x0, [sp, #32]
    9e90:	str	x1, [x0, #56]
    9e94:	ldr	x0, [sp, #32]
    9e98:	ldr	x0, [x0, #56]
    9e9c:	cmp	x0, #0x0
    9ea0:	cset	w0, eq  // eq = none
    9ea4:	and	w0, w0, #0xff
    9ea8:	and	x0, x0, #0xff
    9eac:	cmp	x0, #0x0
    9eb0:	b.eq	9ebc <regfree+0x14f4>  // b.none
    9eb4:	mov	w0, #0xc                   	// #12
    9eb8:	b	9ecc <regfree+0x1504>
    9ebc:	ldr	x0, [sp, #32]
    9ec0:	bl	b0f4 <regfree+0x272c>
    9ec4:	str	w0, [sp, #44]
    9ec8:	ldr	w0, [sp, #44]
    9ecc:	ldp	x29, x30, [sp], #48
    9ed0:	ret
    9ed4:	nop
	...
    9f00:	stp	x29, x30, [sp, #-80]!
    9f04:	mov	x29, sp
    9f08:	str	x0, [sp, #40]
    9f0c:	str	x1, [sp, #32]
    9f10:	str	x2, [sp, #24]
    9f14:	ldr	x0, [sp, #40]
    9f18:	str	x0, [sp, #72]
    9f1c:	b	9f4c <regfree+0x1584>
    9f20:	ldr	x0, [sp, #72]
    9f24:	ldr	x0, [x0, #8]
    9f28:	cmp	x0, #0x0
    9f2c:	b.eq	9f40 <regfree+0x1578>  // b.none
    9f30:	ldr	x0, [sp, #72]
    9f34:	ldr	x0, [x0, #8]
    9f38:	str	x0, [sp, #72]
    9f3c:	b	9f4c <regfree+0x1584>
    9f40:	ldr	x0, [sp, #72]
    9f44:	ldr	x0, [x0, #16]
    9f48:	str	x0, [sp, #72]
    9f4c:	ldr	x0, [sp, #72]
    9f50:	ldr	x0, [x0, #8]
    9f54:	cmp	x0, #0x0
    9f58:	b.ne	9f20 <regfree+0x1558>  // b.any
    9f5c:	ldr	x0, [sp, #72]
    9f60:	ldr	x0, [x0, #16]
    9f64:	cmp	x0, #0x0
    9f68:	b.ne	9f20 <regfree+0x1558>  // b.any
    9f6c:	ldr	x2, [sp, #32]
    9f70:	ldr	x1, [sp, #72]
    9f74:	ldr	x0, [sp, #24]
    9f78:	blr	x2
    9f7c:	str	w0, [sp, #68]
    9f80:	ldr	w0, [sp, #68]
    9f84:	cmp	w0, #0x0
    9f88:	cset	w0, ne  // ne = any
    9f8c:	and	w0, w0, #0xff
    9f90:	and	x0, x0, #0xff
    9f94:	cmp	x0, #0x0
    9f98:	b.eq	9fa4 <regfree+0x15dc>  // b.none
    9f9c:	ldr	w0, [sp, #68]
    9fa0:	b	a004 <regfree+0x163c>
    9fa4:	ldr	x0, [sp, #72]
    9fa8:	ldr	x0, [x0]
    9fac:	cmp	x0, #0x0
    9fb0:	b.ne	9fbc <regfree+0x15f4>  // b.any
    9fb4:	mov	w0, #0x0                   	// #0
    9fb8:	b	a004 <regfree+0x163c>
    9fbc:	ldr	x0, [sp, #72]
    9fc0:	str	x0, [sp, #56]
    9fc4:	ldr	x0, [sp, #72]
    9fc8:	ldr	x0, [x0]
    9fcc:	str	x0, [sp, #72]
    9fd0:	ldr	x0, [sp, #72]
    9fd4:	ldr	x0, [x0, #16]
    9fd8:	ldr	x1, [sp, #56]
    9fdc:	cmp	x1, x0
    9fe0:	b.eq	9f6c <regfree+0x15a4>  // b.none
    9fe4:	ldr	x0, [sp, #72]
    9fe8:	ldr	x0, [x0, #16]
    9fec:	cmp	x0, #0x0
    9ff0:	b.eq	9f6c <regfree+0x15a4>  // b.none
    9ff4:	ldr	x0, [sp, #72]
    9ff8:	ldr	x0, [x0, #16]
    9ffc:	str	x0, [sp, #72]
    a000:	b	9f4c <regfree+0x1584>
    a004:	ldp	x29, x30, [sp], #80
    a008:	ret
    a00c:	stp	x29, x30, [sp, #-80]!
    a010:	mov	x29, sp
    a014:	str	x0, [sp, #40]
    a018:	str	x1, [sp, #32]
    a01c:	str	x2, [sp, #24]
    a020:	ldr	x0, [sp, #40]
    a024:	str	x0, [sp, #72]
    a028:	ldr	x2, [sp, #32]
    a02c:	ldr	x1, [sp, #72]
    a030:	ldr	x0, [sp, #24]
    a034:	blr	x2
    a038:	str	w0, [sp, #60]
    a03c:	ldr	w0, [sp, #60]
    a040:	cmp	w0, #0x0
    a044:	cset	w0, ne  // ne = any
    a048:	and	w0, w0, #0xff
    a04c:	and	x0, x0, #0xff
    a050:	cmp	x0, #0x0
    a054:	b.eq	a060 <regfree+0x1698>  // b.none
    a058:	ldr	w0, [sp, #60]
    a05c:	b	a0e4 <regfree+0x171c>
    a060:	ldr	x0, [sp, #72]
    a064:	ldr	x0, [x0, #8]
    a068:	cmp	x0, #0x0
    a06c:	b.eq	a080 <regfree+0x16b8>  // b.none
    a070:	ldr	x0, [sp, #72]
    a074:	ldr	x0, [x0, #8]
    a078:	str	x0, [sp, #72]
    a07c:	b	a028 <regfree+0x1660>
    a080:	str	xzr, [sp, #64]
    a084:	b	a0b0 <regfree+0x16e8>
    a088:	ldr	x0, [sp, #72]
    a08c:	str	x0, [sp, #64]
    a090:	ldr	x0, [sp, #72]
    a094:	ldr	x0, [x0]
    a098:	str	x0, [sp, #72]
    a09c:	ldr	x0, [sp, #72]
    a0a0:	cmp	x0, #0x0
    a0a4:	b.ne	a0b0 <regfree+0x16e8>  // b.any
    a0a8:	mov	w0, #0x0                   	// #0
    a0ac:	b	a0e4 <regfree+0x171c>
    a0b0:	ldr	x0, [sp, #72]
    a0b4:	ldr	x0, [x0, #16]
    a0b8:	ldr	x1, [sp, #64]
    a0bc:	cmp	x1, x0
    a0c0:	b.eq	a088 <regfree+0x16c0>  // b.none
    a0c4:	ldr	x0, [sp, #72]
    a0c8:	ldr	x0, [x0, #16]
    a0cc:	cmp	x0, #0x0
    a0d0:	b.eq	a088 <regfree+0x16c0>  // b.none
    a0d4:	ldr	x0, [sp, #72]
    a0d8:	ldr	x0, [x0, #16]
    a0dc:	str	x0, [sp, #72]
    a0e0:	b	a028 <regfree+0x1660>
    a0e4:	ldp	x29, x30, [sp], #80
    a0e8:	ret
    a0ec:	sub	sp, sp, #0x20
    a0f0:	str	x0, [sp, #8]
    a0f4:	str	x1, [sp]
    a0f8:	ldr	x0, [sp, #8]
    a0fc:	str	x0, [sp, #24]
    a100:	ldr	x0, [sp]
    a104:	ldrb	w0, [x0, #48]
    a108:	cmp	w0, #0x4
    a10c:	b.ne	a178 <regfree+0x17b0>  // b.any
    a110:	ldr	x0, [sp, #24]
    a114:	ldr	x0, [x0, #208]
    a118:	cmp	x0, #0x0
    a11c:	b.eq	a178 <regfree+0x17b0>  // b.none
    a120:	ldr	x0, [sp]
    a124:	ldr	w0, [x0, #40]
    a128:	str	w0, [sp, #20]
    a12c:	ldr	x0, [sp, #24]
    a130:	ldr	x1, [x0, #208]
    a134:	ldrsw	x0, [sp, #20]
    a138:	lsl	x0, x0, #2
    a13c:	add	x0, x1, x0
    a140:	ldr	w1, [x0]
    a144:	ldr	x0, [sp]
    a148:	str	w1, [x0, #40]
    a14c:	ldr	x0, [sp, #24]
    a150:	ldr	x1, [x0, #144]
    a154:	ldr	x0, [sp]
    a158:	ldr	w0, [x0, #40]
    a15c:	mov	w2, #0x1                   	// #1
    a160:	lsl	w0, w2, w0
    a164:	sxtw	x0, w0
    a168:	orr	x1, x1, x0
    a16c:	ldr	x0, [sp, #24]
    a170:	str	x1, [x0, #144]
    a174:	b	a258 <regfree+0x1890>
    a178:	ldr	x0, [sp]
    a17c:	ldrb	w0, [x0, #48]
    a180:	cmp	w0, #0x11
    a184:	b.ne	a258 <regfree+0x1890>  // b.any
    a188:	ldr	x0, [sp]
    a18c:	ldr	x0, [x0, #8]
    a190:	cmp	x0, #0x0
    a194:	b.eq	a258 <regfree+0x1890>  // b.none
    a198:	ldr	x0, [sp]
    a19c:	ldr	x0, [x0, #8]
    a1a0:	ldrb	w0, [x0, #48]
    a1a4:	cmp	w0, #0x11
    a1a8:	b.ne	a258 <regfree+0x1890>  // b.any
    a1ac:	ldr	x0, [sp]
    a1b0:	ldr	x0, [x0, #8]
    a1b4:	ldr	w0, [x0, #40]
    a1b8:	str	w0, [sp, #16]
    a1bc:	ldr	x0, [sp]
    a1c0:	ldr	x0, [x0, #8]
    a1c4:	ldr	x1, [x0, #8]
    a1c8:	ldr	x0, [sp]
    a1cc:	str	x1, [x0, #8]
    a1d0:	ldr	x0, [sp]
    a1d4:	ldr	x0, [x0, #8]
    a1d8:	cmp	x0, #0x0
    a1dc:	b.eq	a1f0 <regfree+0x1828>  // b.none
    a1e0:	ldr	x0, [sp]
    a1e4:	ldr	x0, [x0, #8]
    a1e8:	ldr	x1, [sp]
    a1ec:	str	x1, [x0]
    a1f0:	ldr	x0, [sp, #24]
    a1f4:	ldr	x1, [x0, #208]
    a1f8:	ldr	x0, [sp]
    a1fc:	ldr	w0, [x0, #40]
    a200:	sxtw	x0, w0
    a204:	lsl	x0, x0, #2
    a208:	add	x1, x1, x0
    a20c:	ldr	x0, [sp, #24]
    a210:	ldr	x2, [x0, #208]
    a214:	ldrsw	x0, [sp, #16]
    a218:	lsl	x0, x0, #2
    a21c:	add	x0, x2, x0
    a220:	ldr	w1, [x1]
    a224:	str	w1, [x0]
    a228:	ldr	w0, [sp, #16]
    a22c:	cmp	w0, #0x3f
    a230:	b.gt	a258 <regfree+0x1890>
    a234:	ldr	x0, [sp, #24]
    a238:	ldr	x1, [x0, #144]
    a23c:	ldr	w0, [sp, #16]
    a240:	mov	x2, #0x1                   	// #1
    a244:	lsl	x0, x2, x0
    a248:	mvn	x0, x0
    a24c:	and	x1, x1, x0
    a250:	ldr	x0, [sp, #24]
    a254:	str	x1, [x0, #144]
    a258:	mov	w0, #0x0                   	// #0
    a25c:	add	sp, sp, #0x20
    a260:	ret
    a264:	stp	x29, x30, [sp, #-48]!
    a268:	mov	x29, sp
    a26c:	str	x0, [sp, #24]
    a270:	str	x1, [sp, #16]
    a274:	ldr	x0, [sp, #24]
    a278:	str	x0, [sp, #40]
    a27c:	str	wzr, [sp, #36]
    a280:	ldr	x0, [sp, #16]
    a284:	ldr	x0, [x0, #8]
    a288:	cmp	x0, #0x0
    a28c:	b.eq	a2e8 <regfree+0x1920>  // b.none
    a290:	ldr	x0, [sp, #16]
    a294:	ldr	x0, [x0, #8]
    a298:	ldrb	w0, [x0, #48]
    a29c:	cmp	w0, #0x11
    a2a0:	b.ne	a2e8 <regfree+0x1920>  // b.any
    a2a4:	ldr	x0, [sp, #16]
    a2a8:	ldr	x1, [x0, #8]
    a2ac:	add	x0, sp, #0x24
    a2b0:	mov	x2, x1
    a2b4:	ldr	x1, [sp, #40]
    a2b8:	bl	a35c <regfree+0x1994>
    a2bc:	mov	x1, x0
    a2c0:	ldr	x0, [sp, #16]
    a2c4:	str	x1, [x0, #8]
    a2c8:	ldr	x0, [sp, #16]
    a2cc:	ldr	x0, [x0, #8]
    a2d0:	cmp	x0, #0x0
    a2d4:	b.eq	a2e8 <regfree+0x1920>  // b.none
    a2d8:	ldr	x0, [sp, #16]
    a2dc:	ldr	x0, [x0, #8]
    a2e0:	ldr	x1, [sp, #16]
    a2e4:	str	x1, [x0]
    a2e8:	ldr	x0, [sp, #16]
    a2ec:	ldr	x0, [x0, #16]
    a2f0:	cmp	x0, #0x0
    a2f4:	b.eq	a350 <regfree+0x1988>  // b.none
    a2f8:	ldr	x0, [sp, #16]
    a2fc:	ldr	x0, [x0, #16]
    a300:	ldrb	w0, [x0, #48]
    a304:	cmp	w0, #0x11
    a308:	b.ne	a350 <regfree+0x1988>  // b.any
    a30c:	ldr	x0, [sp, #16]
    a310:	ldr	x1, [x0, #16]
    a314:	add	x0, sp, #0x24
    a318:	mov	x2, x1
    a31c:	ldr	x1, [sp, #40]
    a320:	bl	a35c <regfree+0x1994>
    a324:	mov	x1, x0
    a328:	ldr	x0, [sp, #16]
    a32c:	str	x1, [x0, #16]
    a330:	ldr	x0, [sp, #16]
    a334:	ldr	x0, [x0, #16]
    a338:	cmp	x0, #0x0
    a33c:	b.eq	a350 <regfree+0x1988>  // b.none
    a340:	ldr	x0, [sp, #16]
    a344:	ldr	x0, [x0, #16]
    a348:	ldr	x1, [sp, #16]
    a34c:	str	x1, [x0]
    a350:	ldr	w0, [sp, #36]
    a354:	ldp	x29, x30, [sp], #48
    a358:	ret
    a35c:	stp	x29, x30, [sp, #-96]!
    a360:	mov	x29, sp
    a364:	str	x0, [sp, #40]
    a368:	str	x1, [sp, #32]
    a36c:	str	x2, [sp, #24]
    a370:	ldr	x0, [sp, #32]
    a374:	ldr	x0, [x0]
    a378:	str	x0, [sp, #88]
    a37c:	ldr	x0, [sp, #24]
    a380:	ldr	x0, [x0, #8]
    a384:	str	x0, [sp, #80]
    a388:	ldr	x0, [sp, #32]
    a38c:	ldrb	w0, [x0, #56]
    a390:	and	w0, w0, #0x10
    a394:	and	w0, w0, #0xff
    a398:	cmp	w0, #0x0
    a39c:	b.eq	a3ec <regfree+0x1a24>  // b.none
    a3a0:	ldr	x0, [sp, #24]
    a3a4:	ldr	x0, [x0, #8]
    a3a8:	cmp	x0, #0x0
    a3ac:	b.eq	a3ec <regfree+0x1a24>  // b.none
    a3b0:	ldr	x0, [sp, #24]
    a3b4:	ldr	w0, [x0, #40]
    a3b8:	cmp	w0, #0x3f
    a3bc:	b.gt	a3e0 <regfree+0x1a18>
    a3c0:	ldr	x0, [sp, #88]
    a3c4:	ldr	x1, [x0, #144]
    a3c8:	ldr	x0, [sp, #24]
    a3cc:	ldr	w0, [x0, #40]
    a3d0:	lsr	x0, x1, x0
    a3d4:	and	x0, x0, #0x1
    a3d8:	cmp	x0, #0x0
    a3dc:	b.ne	a3ec <regfree+0x1a24>  // b.any
    a3e0:	ldr	x0, [sp, #24]
    a3e4:	ldr	x0, [x0, #8]
    a3e8:	b	a570 <regfree+0x1ba8>
    a3ec:	mov	w3, #0x8                   	// #8
    a3f0:	mov	x2, #0x0                   	// #0
    a3f4:	mov	x1, #0x0                   	// #0
    a3f8:	ldr	x0, [sp, #88]
    a3fc:	bl	fd6c <regfree+0x73a4>
    a400:	str	x0, [sp, #72]
    a404:	mov	w3, #0x9                   	// #9
    a408:	mov	x2, #0x0                   	// #0
    a40c:	mov	x1, #0x0                   	// #0
    a410:	ldr	x0, [sp, #88]
    a414:	bl	fd6c <regfree+0x73a4>
    a418:	str	x0, [sp, #64]
    a41c:	ldr	x0, [sp, #80]
    a420:	cmp	x0, #0x0
    a424:	b.eq	a440 <regfree+0x1a78>  // b.none
    a428:	mov	w3, #0x10                  	// #16
    a42c:	ldr	x2, [sp, #64]
    a430:	ldr	x1, [sp, #80]
    a434:	ldr	x0, [sp, #88]
    a438:	bl	fd6c <regfree+0x73a4>
    a43c:	b	a444 <regfree+0x1a7c>
    a440:	ldr	x0, [sp, #64]
    a444:	str	x0, [sp, #56]
    a448:	mov	w3, #0x10                  	// #16
    a44c:	ldr	x2, [sp, #56]
    a450:	ldr	x1, [sp, #72]
    a454:	ldr	x0, [sp, #88]
    a458:	bl	fd6c <regfree+0x73a4>
    a45c:	str	x0, [sp, #48]
    a460:	ldr	x0, [sp, #48]
    a464:	cmp	x0, #0x0
    a468:	cset	w0, eq  // eq = none
    a46c:	and	w0, w0, #0xff
    a470:	and	x0, x0, #0xff
    a474:	cmp	x0, #0x0
    a478:	b.ne	a498 <regfree+0x1ad0>  // b.any
    a47c:	ldr	x0, [sp, #56]
    a480:	cmp	x0, #0x0
    a484:	cset	w0, eq  // eq = none
    a488:	and	w0, w0, #0xff
    a48c:	and	x0, x0, #0xff
    a490:	cmp	x0, #0x0
    a494:	b.eq	a4a0 <regfree+0x1ad8>  // b.none
    a498:	mov	w0, #0x1                   	// #1
    a49c:	b	a4a4 <regfree+0x1adc>
    a4a0:	mov	w0, #0x0                   	// #0
    a4a4:	cmp	w0, #0x0
    a4a8:	b.ne	a4c8 <regfree+0x1b00>  // b.any
    a4ac:	ldr	x0, [sp, #72]
    a4b0:	cmp	x0, #0x0
    a4b4:	cset	w0, eq  // eq = none
    a4b8:	and	w0, w0, #0xff
    a4bc:	and	x0, x0, #0xff
    a4c0:	cmp	x0, #0x0
    a4c4:	b.eq	a4d0 <regfree+0x1b08>  // b.none
    a4c8:	mov	w0, #0x1                   	// #1
    a4cc:	b	a4d4 <regfree+0x1b0c>
    a4d0:	mov	w0, #0x0                   	// #0
    a4d4:	cmp	w0, #0x0
    a4d8:	b.ne	a4f8 <regfree+0x1b30>  // b.any
    a4dc:	ldr	x0, [sp, #64]
    a4e0:	cmp	x0, #0x0
    a4e4:	cset	w0, eq  // eq = none
    a4e8:	and	w0, w0, #0xff
    a4ec:	and	x0, x0, #0xff
    a4f0:	cmp	x0, #0x0
    a4f4:	b.eq	a50c <regfree+0x1b44>  // b.none
    a4f8:	ldr	x0, [sp, #40]
    a4fc:	mov	w1, #0xc                   	// #12
    a500:	str	w1, [x0]
    a504:	mov	x0, #0x0                   	// #0
    a508:	b	a570 <regfree+0x1ba8>
    a50c:	ldr	x0, [sp, #24]
    a510:	ldr	w1, [x0, #40]
    a514:	ldr	x0, [sp, #64]
    a518:	str	w1, [x0, #40]
    a51c:	ldr	x0, [sp, #64]
    a520:	ldr	w1, [x0, #40]
    a524:	ldr	x0, [sp, #72]
    a528:	str	w1, [x0, #40]
    a52c:	ldr	x0, [sp, #24]
    a530:	ldrb	w0, [x0, #50]
    a534:	ubfx	x0, x0, #3, #1
    a538:	and	w2, w0, #0xff
    a53c:	ldr	x1, [sp, #64]
    a540:	ldrb	w0, [x1, #50]
    a544:	bfi	w0, w2, #3, #1
    a548:	strb	w0, [x1, #50]
    a54c:	ldr	x0, [sp, #64]
    a550:	ldrb	w0, [x0, #50]
    a554:	ubfx	x0, x0, #3, #1
    a558:	and	w2, w0, #0xff
    a55c:	ldr	x1, [sp, #72]
    a560:	ldrb	w0, [x1, #50]
    a564:	bfi	w0, w2, #3, #1
    a568:	strb	w0, [x1, #50]
    a56c:	ldr	x0, [sp, #48]
    a570:	ldp	x29, x30, [sp], #96
    a574:	ret
    a578:	stp	x29, x30, [sp, #-48]!
    a57c:	mov	x29, sp
    a580:	str	x0, [sp, #24]
    a584:	str	x1, [sp, #16]
    a588:	ldr	x0, [sp, #24]
    a58c:	str	x0, [sp, #40]
    a590:	ldr	x0, [sp, #16]
    a594:	ldrb	w0, [x0, #48]
    a598:	cmp	w0, #0x10
    a59c:	b.ne	a5cc <regfree+0x1c04>  // b.any
    a5a0:	ldr	x0, [sp, #16]
    a5a4:	ldr	x0, [x0, #8]
    a5a8:	ldr	x1, [x0, #24]
    a5ac:	ldr	x0, [sp, #16]
    a5b0:	str	x1, [x0, #24]
    a5b4:	ldr	x0, [sp, #16]
    a5b8:	ldr	x0, [x0, #8]
    a5bc:	ldr	w1, [x0, #56]
    a5c0:	ldr	x0, [sp, #16]
    a5c4:	str	w1, [x0, #56]
    a5c8:	b	a668 <regfree+0x1ca0>
    a5cc:	ldr	x0, [sp, #16]
    a5d0:	ldr	x1, [sp, #16]
    a5d4:	str	x1, [x0, #24]
    a5d8:	ldr	x0, [sp, #16]
    a5dc:	ldp	x1, x2, [x0, #40]
    a5e0:	ldr	x0, [sp, #40]
    a5e4:	bl	6cfc <grub_mod_fini+0x67dc>
    a5e8:	mov	w1, w0
    a5ec:	ldr	x0, [sp, #16]
    a5f0:	str	w1, [x0, #56]
    a5f4:	ldr	x0, [sp, #16]
    a5f8:	ldr	w0, [x0, #56]
    a5fc:	cmn	w0, #0x1
    a600:	cset	w0, eq  // eq = none
    a604:	and	w0, w0, #0xff
    a608:	and	x0, x0, #0xff
    a60c:	cmp	x0, #0x0
    a610:	b.eq	a61c <regfree+0x1c54>  // b.none
    a614:	mov	w0, #0xc                   	// #12
    a618:	b	a66c <regfree+0x1ca4>
    a61c:	ldr	x0, [sp, #16]
    a620:	ldrb	w0, [x0, #48]
    a624:	cmp	w0, #0xc
    a628:	b.ne	a668 <regfree+0x1ca0>  // b.any
    a62c:	ldr	x0, [sp, #16]
    a630:	ldr	w2, [x0, #40]
    a634:	ldr	x0, [sp, #40]
    a638:	ldr	x1, [x0]
    a63c:	ldr	x0, [sp, #16]
    a640:	ldr	w0, [x0, #56]
    a644:	sxtw	x0, w0
    a648:	lsl	x0, x0, #4
    a64c:	add	x1, x1, x0
    a650:	mov	w0, w2
    a654:	and	w0, w0, #0x3ff
    a658:	and	w2, w0, #0xffff
    a65c:	ldr	w0, [x1, #8]
    a660:	bfi	w0, w2, #8, #10
    a664:	str	w0, [x1, #8]
    a668:	mov	w0, #0x0                   	// #0
    a66c:	ldp	x29, x30, [sp], #48
    a670:	ret
    a674:	sub	sp, sp, #0x10
    a678:	str	x0, [sp, #8]
    a67c:	str	x1, [sp]
    a680:	ldr	x0, [sp]
    a684:	ldrb	w0, [x0, #48]
    a688:	cmp	w0, #0xb
    a68c:	b.eq	a69c <regfree+0x1cd4>  // b.none
    a690:	cmp	w0, #0x10
    a694:	b.eq	a6b0 <regfree+0x1ce8>  // b.none
    a698:	b	a6e0 <regfree+0x1d18>
    a69c:	ldr	x0, [sp]
    a6a0:	ldr	x0, [x0, #8]
    a6a4:	ldr	x1, [sp]
    a6a8:	str	x1, [x0, #32]
    a6ac:	b	a72c <regfree+0x1d64>
    a6b0:	ldr	x0, [sp]
    a6b4:	ldr	x1, [x0, #16]
    a6b8:	ldr	x0, [sp]
    a6bc:	ldr	x0, [x0, #8]
    a6c0:	ldr	x1, [x1, #24]
    a6c4:	str	x1, [x0, #32]
    a6c8:	ldr	x0, [sp]
    a6cc:	ldr	x0, [x0, #16]
    a6d0:	ldr	x1, [sp]
    a6d4:	ldr	x1, [x1, #32]
    a6d8:	str	x1, [x0, #32]
    a6dc:	b	a72c <regfree+0x1d64>
    a6e0:	ldr	x0, [sp]
    a6e4:	ldr	x0, [x0, #8]
    a6e8:	cmp	x0, #0x0
    a6ec:	b.eq	a704 <regfree+0x1d3c>  // b.none
    a6f0:	ldr	x0, [sp]
    a6f4:	ldr	x0, [x0, #8]
    a6f8:	ldr	x1, [sp]
    a6fc:	ldr	x1, [x1, #32]
    a700:	str	x1, [x0, #32]
    a704:	ldr	x0, [sp]
    a708:	ldr	x0, [x0, #16]
    a70c:	cmp	x0, #0x0
    a710:	b.eq	a728 <regfree+0x1d60>  // b.none
    a714:	ldr	x0, [sp]
    a718:	ldr	x0, [x0, #16]
    a71c:	ldr	x1, [sp]
    a720:	ldr	x1, [x1, #32]
    a724:	str	x1, [x0, #32]
    a728:	nop
    a72c:	mov	w0, #0x0                   	// #0
    a730:	add	sp, sp, #0x10
    a734:	ret
    a738:	stp	x29, x30, [sp, #-64]!
    a73c:	mov	x29, sp
    a740:	str	x0, [sp, #24]
    a744:	str	x1, [sp, #16]
    a748:	ldr	x0, [sp, #24]
    a74c:	str	x0, [sp, #40]
    a750:	ldr	x0, [sp, #16]
    a754:	ldr	w0, [x0, #56]
    a758:	str	w0, [sp, #36]
    a75c:	str	wzr, [sp, #60]
    a760:	ldr	x0, [sp, #16]
    a764:	ldrb	w0, [x0, #48]
    a768:	cmp	w0, #0x10
    a76c:	b.eq	a9e4 <regfree+0x201c>  // b.none
    a770:	cmp	w0, #0x10
    a774:	b.gt	a98c <regfree+0x1fc4>
    a778:	cmp	w0, #0xc
    a77c:	b.eq	a8e4 <regfree+0x1f1c>  // b.none
    a780:	cmp	w0, #0xc
    a784:	b.gt	a98c <regfree+0x1fc4>
    a788:	cmp	w0, #0xb
    a78c:	b.gt	a98c <regfree+0x1fc4>
    a790:	cmp	w0, #0xa
    a794:	b.ge	a7ec <regfree+0x1e24>  // b.tcont
    a798:	cmp	w0, #0x9
    a79c:	b.gt	a98c <regfree+0x1fc4>
    a7a0:	cmp	w0, #0x8
    a7a4:	b.ge	a8e4 <regfree+0x1f1c>  // b.tcont
    a7a8:	cmp	w0, #0x2
    a7ac:	b.eq	a7bc <regfree+0x1df4>  // b.none
    a7b0:	cmp	w0, #0x4
    a7b4:	b.eq	a918 <regfree+0x1f50>  // b.none
    a7b8:	b	a98c <regfree+0x1fc4>
    a7bc:	ldr	x0, [sp, #16]
    a7c0:	ldr	x0, [x0, #32]
    a7c4:	cmp	x0, #0x0
    a7c8:	cset	w0, eq  // eq = none
    a7cc:	and	w0, w0, #0xff
    a7d0:	mov	w2, w0
    a7d4:	mov	w1, #0x59f                 	// #1439
    a7d8:	adrp	x0, 0 <grub_mod_init-0x450>
    a7dc:	add	x0, x0, #0x0
    a7e0:	ldr	x0, [x0]
    a7e4:	bl	1fc8 <grub_mod_fini+0x1aa8>
    a7e8:	b	a9f0 <regfree+0x2028>
    a7ec:	ldr	x0, [sp, #40]
    a7f0:	ldrb	w1, [x0, #160]
    a7f4:	orr	w1, w1, #0x1
    a7f8:	strb	w1, [x0, #160]
    a7fc:	ldr	x0, [sp, #16]
    a800:	ldr	x0, [x0, #8]
    a804:	cmp	x0, #0x0
    a808:	b.eq	a824 <regfree+0x1e5c>  // b.none
    a80c:	ldr	x0, [sp, #16]
    a810:	ldr	x0, [x0, #8]
    a814:	ldr	x0, [x0, #24]
    a818:	ldr	w0, [x0, #56]
    a81c:	str	w0, [sp, #56]
    a820:	b	a834 <regfree+0x1e6c>
    a824:	ldr	x0, [sp, #16]
    a828:	ldr	x0, [x0, #32]
    a82c:	ldr	w0, [x0, #56]
    a830:	str	w0, [sp, #56]
    a834:	ldr	x0, [sp, #16]
    a838:	ldr	x0, [x0, #16]
    a83c:	cmp	x0, #0x0
    a840:	b.eq	a85c <regfree+0x1e94>  // b.none
    a844:	ldr	x0, [sp, #16]
    a848:	ldr	x0, [x0, #16]
    a84c:	ldr	x0, [x0, #24]
    a850:	ldr	w0, [x0, #56]
    a854:	str	w0, [sp, #52]
    a858:	b	a86c <regfree+0x1ea4>
    a85c:	ldr	x0, [sp, #16]
    a860:	ldr	x0, [x0, #32]
    a864:	ldr	w0, [x0, #56]
    a868:	str	w0, [sp, #52]
    a86c:	ldr	w0, [sp, #56]
    a870:	mvn	w0, w0
    a874:	lsr	w0, w0, #31
    a878:	and	w0, w0, #0xff
    a87c:	mov	w2, w0
    a880:	mov	w1, #0x5af                 	// #1455
    a884:	adrp	x0, 0 <grub_mod_init-0x450>
    a888:	add	x0, x0, #0x0
    a88c:	ldr	x0, [x0]
    a890:	bl	1fc8 <grub_mod_fini+0x1aa8>
    a894:	ldr	w0, [sp, #52]
    a898:	mvn	w0, w0
    a89c:	lsr	w0, w0, #31
    a8a0:	and	w0, w0, #0xff
    a8a4:	mov	w2, w0
    a8a8:	mov	w1, #0x5b0                 	// #1456
    a8ac:	adrp	x0, 0 <grub_mod_init-0x450>
    a8b0:	add	x0, x0, #0x0
    a8b4:	ldr	x0, [x0]
    a8b8:	bl	1fc8 <grub_mod_fini+0x1aa8>
    a8bc:	ldr	x0, [sp, #40]
    a8c0:	ldr	x1, [x0, #40]
    a8c4:	ldrsw	x0, [sp, #36]
    a8c8:	lsl	x0, x0, #4
    a8cc:	add	x0, x1, x0
    a8d0:	ldr	w2, [sp, #52]
    a8d4:	ldr	w1, [sp, #56]
    a8d8:	bl	5934 <grub_mod_fini+0x5414>
    a8dc:	str	w0, [sp, #60]
    a8e0:	b	a9f0 <regfree+0x2028>
    a8e4:	ldr	x0, [sp, #40]
    a8e8:	ldr	x1, [x0, #40]
    a8ec:	ldrsw	x0, [sp, #36]
    a8f0:	lsl	x0, x0, #4
    a8f4:	add	x2, x1, x0
    a8f8:	ldr	x0, [sp, #16]
    a8fc:	ldr	x0, [x0, #32]
    a900:	ldr	w0, [x0, #56]
    a904:	mov	w1, w0
    a908:	mov	x0, x2
    a90c:	bl	589c <grub_mod_fini+0x537c>
    a910:	str	w0, [sp, #60]
    a914:	b	a9f0 <regfree+0x2028>
    a918:	ldr	x0, [sp, #16]
    a91c:	ldr	x1, [x0, #32]
    a920:	ldr	x0, [sp, #40]
    a924:	ldr	x2, [x0, #24]
    a928:	ldrsw	x0, [sp, #36]
    a92c:	lsl	x0, x0, #2
    a930:	add	x0, x2, x0
    a934:	ldr	w1, [x1, #56]
    a938:	str	w1, [x0]
    a93c:	ldr	x0, [sp, #16]
    a940:	ldrb	w0, [x0, #48]
    a944:	cmp	w0, #0x4
    a948:	b.ne	a9ec <regfree+0x2024>  // b.any
    a94c:	ldr	x0, [sp, #40]
    a950:	ldr	x1, [x0, #40]
    a954:	ldrsw	x0, [sp, #36]
    a958:	lsl	x0, x0, #4
    a95c:	add	x2, x1, x0
    a960:	ldr	x0, [sp, #40]
    a964:	ldr	x1, [x0, #24]
    a968:	ldrsw	x0, [sp, #36]
    a96c:	lsl	x0, x0, #2
    a970:	add	x0, x1, x0
    a974:	ldr	w0, [x0]
    a978:	mov	w1, w0
    a97c:	mov	x0, x2
    a980:	bl	589c <grub_mod_fini+0x537c>
    a984:	str	w0, [sp, #60]
    a988:	b	a9ec <regfree+0x2024>
    a98c:	ldr	x0, [sp, #16]
    a990:	ldrb	w0, [x0, #48]
    a994:	and	w0, w0, #0x8
    a998:	cmp	w0, #0x0
    a99c:	cset	w0, eq  // eq = none
    a9a0:	and	w0, w0, #0xff
    a9a4:	mov	w2, w0
    a9a8:	mov	w1, #0x5c2                 	// #1474
    a9ac:	adrp	x0, 0 <grub_mod_init-0x450>
    a9b0:	add	x0, x0, #0x0
    a9b4:	ldr	x0, [x0]
    a9b8:	bl	1fc8 <grub_mod_fini+0x1aa8>
    a9bc:	ldr	x0, [sp, #16]
    a9c0:	ldr	x1, [x0, #32]
    a9c4:	ldr	x0, [sp, #40]
    a9c8:	ldr	x2, [x0, #24]
    a9cc:	ldrsw	x0, [sp, #36]
    a9d0:	lsl	x0, x0, #2
    a9d4:	add	x0, x2, x0
    a9d8:	ldr	w1, [x1, #56]
    a9dc:	str	w1, [x0]
    a9e0:	b	a9f0 <regfree+0x2028>
    a9e4:	nop
    a9e8:	b	a9f0 <regfree+0x2028>
    a9ec:	nop
    a9f0:	ldr	w0, [sp, #60]
    a9f4:	ldp	x29, x30, [sp], #64
    a9f8:	ret
    a9fc:	nop
	...
    aa08:	stp	x29, x30, [sp, #-80]!
    aa0c:	mov	x29, sp
    aa10:	str	x0, [sp, #40]
    aa14:	str	w1, [sp, #36]
    aa18:	str	w2, [sp, #32]
    aa1c:	str	w3, [sp, #28]
    aa20:	str	w4, [sp, #24]
    aa24:	ldr	w0, [sp, #24]
    aa28:	str	w0, [sp, #68]
    aa2c:	ldr	w0, [sp, #36]
    aa30:	str	w0, [sp, #76]
    aa34:	ldr	w0, [sp, #32]
    aa38:	str	w0, [sp, #72]
    aa3c:	ldr	x0, [sp, #40]
    aa40:	ldr	x1, [x0]
    aa44:	ldrsw	x0, [sp, #76]
    aa48:	lsl	x0, x0, #4
    aa4c:	add	x0, x1, x0
    aa50:	ldrb	w0, [x0, #8]
    aa54:	cmp	w0, #0x4
    aa58:	b.ne	ab38 <regfree+0x2170>  // b.any
    aa5c:	ldr	x0, [sp, #40]
    aa60:	ldr	x1, [x0, #24]
    aa64:	ldrsw	x0, [sp, #76]
    aa68:	lsl	x0, x0, #2
    aa6c:	add	x0, x1, x0
    aa70:	ldr	w0, [x0]
    aa74:	str	w0, [sp, #64]
    aa78:	ldr	x0, [sp, #40]
    aa7c:	ldr	x1, [x0, #40]
    aa80:	ldrsw	x0, [sp, #72]
    aa84:	lsl	x0, x0, #4
    aa88:	add	x0, x1, x0
    aa8c:	str	wzr, [x0, #4]
    aa90:	ldr	w2, [sp, #68]
    aa94:	ldr	w1, [sp, #64]
    aa98:	ldr	x0, [sp, #40]
    aa9c:	bl	afc4 <regfree+0x25fc>
    aaa0:	str	w0, [sp, #60]
    aaa4:	ldr	w0, [sp, #60]
    aaa8:	cmn	w0, #0x1
    aaac:	cset	w0, eq  // eq = none
    aab0:	and	w0, w0, #0xff
    aab4:	and	x0, x0, #0xff
    aab8:	cmp	x0, #0x0
    aabc:	b.eq	aac8 <regfree+0x2100>  // b.none
    aac0:	mov	w0, #0xc                   	// #12
    aac4:	b	aef0 <regfree+0x2528>
    aac8:	ldr	x0, [sp, #40]
    aacc:	ldr	x1, [x0, #24]
    aad0:	ldrsw	x0, [sp, #76]
    aad4:	lsl	x0, x0, #2
    aad8:	add	x1, x1, x0
    aadc:	ldr	x0, [sp, #40]
    aae0:	ldr	x2, [x0, #24]
    aae4:	ldrsw	x0, [sp, #72]
    aae8:	lsl	x0, x0, #2
    aaec:	add	x0, x2, x0
    aaf0:	ldr	w1, [x1]
    aaf4:	str	w1, [x0]
    aaf8:	ldr	x0, [sp, #40]
    aafc:	ldr	x1, [x0, #40]
    ab00:	ldrsw	x0, [sp, #72]
    ab04:	lsl	x0, x0, #4
    ab08:	add	x0, x1, x0
    ab0c:	ldr	w1, [sp, #60]
    ab10:	bl	67b0 <grub_mod_fini+0x6290>
    ab14:	strb	w0, [sp, #59]
    ab18:	ldrb	w0, [sp, #59]
    ab1c:	eor	w0, w0, #0x1
    ab20:	and	w0, w0, #0xff
    ab24:	and	x0, x0, #0xff
    ab28:	cmp	x0, #0x0
    ab2c:	b.eq	aed4 <regfree+0x250c>  // b.none
    ab30:	mov	w0, #0xc                   	// #12
    ab34:	b	aef0 <regfree+0x2528>
    ab38:	ldr	x0, [sp, #40]
    ab3c:	ldr	x1, [x0, #40]
    ab40:	ldrsw	x0, [sp, #76]
    ab44:	lsl	x0, x0, #4
    ab48:	add	x0, x1, x0
    ab4c:	ldr	w0, [x0, #4]
    ab50:	cmp	w0, #0x0
    ab54:	b.ne	ab8c <regfree+0x21c4>  // b.any
    ab58:	ldr	x0, [sp, #40]
    ab5c:	ldr	x1, [x0, #24]
    ab60:	ldrsw	x0, [sp, #76]
    ab64:	lsl	x0, x0, #2
    ab68:	add	x1, x1, x0
    ab6c:	ldr	x0, [sp, #40]
    ab70:	ldr	x2, [x0, #24]
    ab74:	ldrsw	x0, [sp, #72]
    ab78:	lsl	x0, x0, #2
    ab7c:	add	x0, x2, x0
    ab80:	ldr	w1, [x1]
    ab84:	str	w1, [x0]
    ab88:	b	aeec <regfree+0x2524>
    ab8c:	ldr	x0, [sp, #40]
    ab90:	ldr	x1, [x0, #40]
    ab94:	ldrsw	x0, [sp, #76]
    ab98:	lsl	x0, x0, #4
    ab9c:	add	x0, x1, x0
    aba0:	ldr	w0, [x0, #4]
    aba4:	cmp	w0, #0x1
    aba8:	b.ne	acec <regfree+0x2324>  // b.any
    abac:	ldr	x0, [sp, #40]
    abb0:	ldr	x1, [x0, #40]
    abb4:	ldrsw	x0, [sp, #76]
    abb8:	lsl	x0, x0, #4
    abbc:	add	x0, x1, x0
    abc0:	ldr	x0, [x0, #8]
    abc4:	ldr	w0, [x0]
    abc8:	str	w0, [sp, #64]
    abcc:	ldr	x0, [sp, #40]
    abd0:	ldr	x1, [x0, #40]
    abd4:	ldrsw	x0, [sp, #72]
    abd8:	lsl	x0, x0, #4
    abdc:	add	x0, x1, x0
    abe0:	str	wzr, [x0, #4]
    abe4:	ldr	w1, [sp, #76]
    abe8:	ldr	w0, [sp, #28]
    abec:	cmp	w1, w0
    abf0:	b.ne	ac44 <regfree+0x227c>  // b.any
    abf4:	ldr	w1, [sp, #72]
    abf8:	ldr	w0, [sp, #76]
    abfc:	cmp	w1, w0
    ac00:	b.eq	ac44 <regfree+0x227c>  // b.none
    ac04:	ldr	x0, [sp, #40]
    ac08:	ldr	x1, [x0, #40]
    ac0c:	ldrsw	x0, [sp, #72]
    ac10:	lsl	x0, x0, #4
    ac14:	add	x0, x1, x0
    ac18:	ldr	w1, [sp, #64]
    ac1c:	bl	67b0 <grub_mod_fini+0x6290>
    ac20:	strb	w0, [sp, #59]
    ac24:	ldrb	w0, [sp, #59]
    ac28:	eor	w0, w0, #0x1
    ac2c:	and	w0, w0, #0xff
    ac30:	and	x0, x0, #0xff
    ac34:	cmp	x0, #0x0
    ac38:	b.eq	aee8 <regfree+0x2520>  // b.none
    ac3c:	mov	w0, #0xc                   	// #12
    ac40:	b	aef0 <regfree+0x2528>
    ac44:	ldr	x0, [sp, #40]
    ac48:	ldr	x1, [x0]
    ac4c:	ldrsw	x0, [sp, #76]
    ac50:	lsl	x0, x0, #4
    ac54:	add	x0, x1, x0
    ac58:	ldr	w0, [x0, #8]
    ac5c:	ubfx	x0, x0, #8, #10
    ac60:	and	w0, w0, #0xffff
    ac64:	mov	w1, w0
    ac68:	ldr	w0, [sp, #68]
    ac6c:	orr	w0, w0, w1
    ac70:	str	w0, [sp, #68]
    ac74:	ldr	w2, [sp, #68]
    ac78:	ldr	w1, [sp, #64]
    ac7c:	ldr	x0, [sp, #40]
    ac80:	bl	afc4 <regfree+0x25fc>
    ac84:	str	w0, [sp, #60]
    ac88:	ldr	w0, [sp, #60]
    ac8c:	cmn	w0, #0x1
    ac90:	cset	w0, eq  // eq = none
    ac94:	and	w0, w0, #0xff
    ac98:	and	x0, x0, #0xff
    ac9c:	cmp	x0, #0x0
    aca0:	b.eq	acac <regfree+0x22e4>  // b.none
    aca4:	mov	w0, #0xc                   	// #12
    aca8:	b	aef0 <regfree+0x2528>
    acac:	ldr	x0, [sp, #40]
    acb0:	ldr	x1, [x0, #40]
    acb4:	ldrsw	x0, [sp, #72]
    acb8:	lsl	x0, x0, #4
    acbc:	add	x0, x1, x0
    acc0:	ldr	w1, [sp, #60]
    acc4:	bl	67b0 <grub_mod_fini+0x6290>
    acc8:	strb	w0, [sp, #59]
    accc:	ldrb	w0, [sp, #59]
    acd0:	eor	w0, w0, #0x1
    acd4:	and	w0, w0, #0xff
    acd8:	and	x0, x0, #0xff
    acdc:	cmp	x0, #0x0
    ace0:	b.eq	aed4 <regfree+0x250c>  // b.none
    ace4:	mov	w0, #0xc                   	// #12
    ace8:	b	aef0 <regfree+0x2528>
    acec:	ldr	x0, [sp, #40]
    acf0:	ldr	x1, [x0, #40]
    acf4:	ldrsw	x0, [sp, #76]
    acf8:	lsl	x0, x0, #4
    acfc:	add	x0, x1, x0
    ad00:	ldr	x0, [x0, #8]
    ad04:	ldr	w0, [x0]
    ad08:	str	w0, [sp, #64]
    ad0c:	ldr	x0, [sp, #40]
    ad10:	ldr	x1, [x0, #40]
    ad14:	ldrsw	x0, [sp, #72]
    ad18:	lsl	x0, x0, #4
    ad1c:	add	x0, x1, x0
    ad20:	str	wzr, [x0, #4]
    ad24:	ldr	w2, [sp, #68]
    ad28:	ldr	w1, [sp, #64]
    ad2c:	ldr	x0, [sp, #40]
    ad30:	bl	aef8 <regfree+0x2530>
    ad34:	str	w0, [sp, #60]
    ad38:	ldr	w0, [sp, #60]
    ad3c:	cmn	w0, #0x1
    ad40:	b.ne	adfc <regfree+0x2434>  // b.any
    ad44:	ldr	w2, [sp, #68]
    ad48:	ldr	w1, [sp, #64]
    ad4c:	ldr	x0, [sp, #40]
    ad50:	bl	afc4 <regfree+0x25fc>
    ad54:	str	w0, [sp, #60]
    ad58:	ldr	w0, [sp, #60]
    ad5c:	cmn	w0, #0x1
    ad60:	cset	w0, eq  // eq = none
    ad64:	and	w0, w0, #0xff
    ad68:	and	x0, x0, #0xff
    ad6c:	cmp	x0, #0x0
    ad70:	b.eq	ad7c <regfree+0x23b4>  // b.none
    ad74:	mov	w0, #0xc                   	// #12
    ad78:	b	aef0 <regfree+0x2528>
    ad7c:	ldr	x0, [sp, #40]
    ad80:	ldr	x1, [x0, #40]
    ad84:	ldrsw	x0, [sp, #72]
    ad88:	lsl	x0, x0, #4
    ad8c:	add	x0, x1, x0
    ad90:	ldr	w1, [sp, #60]
    ad94:	bl	67b0 <grub_mod_fini+0x6290>
    ad98:	strb	w0, [sp, #59]
    ad9c:	ldrb	w0, [sp, #59]
    ada0:	eor	w0, w0, #0x1
    ada4:	and	w0, w0, #0xff
    ada8:	and	x0, x0, #0xff
    adac:	cmp	x0, #0x0
    adb0:	b.eq	adbc <regfree+0x23f4>  // b.none
    adb4:	mov	w0, #0xc                   	// #12
    adb8:	b	aef0 <regfree+0x2528>
    adbc:	ldr	w4, [sp, #68]
    adc0:	ldr	w3, [sp, #28]
    adc4:	ldr	w2, [sp, #60]
    adc8:	ldr	w1, [sp, #64]
    adcc:	ldr	x0, [sp, #40]
    add0:	bl	aa08 <regfree+0x2040>
    add4:	str	w0, [sp, #52]
    add8:	ldr	w0, [sp, #52]
    addc:	cmp	w0, #0x0
    ade0:	cset	w0, ne  // ne = any
    ade4:	and	w0, w0, #0xff
    ade8:	and	x0, x0, #0xff
    adec:	cmp	x0, #0x0
    adf0:	b.eq	ae3c <regfree+0x2474>  // b.none
    adf4:	ldr	w0, [sp, #52]
    adf8:	b	aef0 <regfree+0x2528>
    adfc:	ldr	x0, [sp, #40]
    ae00:	ldr	x1, [x0, #40]
    ae04:	ldrsw	x0, [sp, #72]
    ae08:	lsl	x0, x0, #4
    ae0c:	add	x0, x1, x0
    ae10:	ldr	w1, [sp, #60]
    ae14:	bl	67b0 <grub_mod_fini+0x6290>
    ae18:	strb	w0, [sp, #59]
    ae1c:	ldrb	w0, [sp, #59]
    ae20:	eor	w0, w0, #0x1
    ae24:	and	w0, w0, #0xff
    ae28:	and	x0, x0, #0xff
    ae2c:	cmp	x0, #0x0
    ae30:	b.eq	ae3c <regfree+0x2474>  // b.none
    ae34:	mov	w0, #0xc                   	// #12
    ae38:	b	aef0 <regfree+0x2528>
    ae3c:	ldr	x0, [sp, #40]
    ae40:	ldr	x1, [x0, #40]
    ae44:	ldrsw	x0, [sp, #76]
    ae48:	lsl	x0, x0, #4
    ae4c:	add	x0, x1, x0
    ae50:	ldr	x0, [x0, #8]
    ae54:	ldr	w0, [x0, #4]
    ae58:	str	w0, [sp, #64]
    ae5c:	ldr	w2, [sp, #68]
    ae60:	ldr	w1, [sp, #64]
    ae64:	ldr	x0, [sp, #40]
    ae68:	bl	afc4 <regfree+0x25fc>
    ae6c:	str	w0, [sp, #60]
    ae70:	ldr	w0, [sp, #60]
    ae74:	cmn	w0, #0x1
    ae78:	cset	w0, eq  // eq = none
    ae7c:	and	w0, w0, #0xff
    ae80:	and	x0, x0, #0xff
    ae84:	cmp	x0, #0x0
    ae88:	b.eq	ae94 <regfree+0x24cc>  // b.none
    ae8c:	mov	w0, #0xc                   	// #12
    ae90:	b	aef0 <regfree+0x2528>
    ae94:	ldr	x0, [sp, #40]
    ae98:	ldr	x1, [x0, #40]
    ae9c:	ldrsw	x0, [sp, #72]
    aea0:	lsl	x0, x0, #4
    aea4:	add	x0, x1, x0
    aea8:	ldr	w1, [sp, #60]
    aeac:	bl	67b0 <grub_mod_fini+0x6290>
    aeb0:	strb	w0, [sp, #59]
    aeb4:	ldrb	w0, [sp, #59]
    aeb8:	eor	w0, w0, #0x1
    aebc:	and	w0, w0, #0xff
    aec0:	and	x0, x0, #0xff
    aec4:	cmp	x0, #0x0
    aec8:	b.eq	aed4 <regfree+0x250c>  // b.none
    aecc:	mov	w0, #0xc                   	// #12
    aed0:	b	aef0 <regfree+0x2528>
    aed4:	ldr	w0, [sp, #64]
    aed8:	str	w0, [sp, #76]
    aedc:	ldr	w0, [sp, #60]
    aee0:	str	w0, [sp, #72]
    aee4:	b	aa3c <regfree+0x2074>
    aee8:	nop
    aeec:	mov	w0, #0x0                   	// #0
    aef0:	ldp	x29, x30, [sp], #80
    aef4:	ret
    aef8:	sub	sp, sp, #0x20
    aefc:	str	x0, [sp, #8]
    af00:	str	w1, [sp, #4]
    af04:	str	w2, [sp]
    af08:	ldr	x0, [sp, #8]
    af0c:	ldr	x0, [x0, #16]
    af10:	sub	w0, w0, #0x1
    af14:	str	w0, [sp, #28]
    af18:	b	af84 <regfree+0x25bc>
    af1c:	ldr	x0, [sp, #8]
    af20:	ldr	x1, [x0, #32]
    af24:	ldrsw	x0, [sp, #28]
    af28:	lsl	x0, x0, #2
    af2c:	add	x0, x1, x0
    af30:	ldr	w0, [x0]
    af34:	ldr	w1, [sp, #4]
    af38:	cmp	w1, w0
    af3c:	b.ne	af78 <regfree+0x25b0>  // b.any
    af40:	ldr	x0, [sp, #8]
    af44:	ldr	x1, [x0]
    af48:	ldrsw	x0, [sp, #28]
    af4c:	lsl	x0, x0, #4
    af50:	add	x0, x1, x0
    af54:	ldr	w0, [x0, #8]
    af58:	ubfx	x0, x0, #8, #10
    af5c:	and	w0, w0, #0xffff
    af60:	mov	w1, w0
    af64:	ldr	w0, [sp]
    af68:	cmp	w0, w1
    af6c:	b.ne	af78 <regfree+0x25b0>  // b.any
    af70:	ldr	w0, [sp, #28]
    af74:	b	afbc <regfree+0x25f4>
    af78:	ldr	w0, [sp, #28]
    af7c:	sub	w0, w0, #0x1
    af80:	str	w0, [sp, #28]
    af84:	ldr	x0, [sp, #8]
    af88:	ldr	x1, [x0]
    af8c:	ldrsw	x0, [sp, #28]
    af90:	lsl	x0, x0, #4
    af94:	add	x0, x1, x0
    af98:	ldrb	w0, [x0, #10]
    af9c:	and	w0, w0, #0x4
    afa0:	and	w0, w0, #0xff
    afa4:	cmp	w0, #0x0
    afa8:	b.eq	afb8 <regfree+0x25f0>  // b.none
    afac:	ldr	w0, [sp, #28]
    afb0:	cmp	w0, #0x0
    afb4:	b.gt	af1c <regfree+0x2554>
    afb8:	mov	w0, #0xffffffff            	// #-1
    afbc:	add	sp, sp, #0x20
    afc0:	ret
    afc4:	stp	x29, x30, [sp, #-48]!
    afc8:	mov	x29, sp
    afcc:	str	x0, [sp, #24]
    afd0:	str	w1, [sp, #20]
    afd4:	str	w2, [sp, #16]
    afd8:	ldr	x0, [sp, #24]
    afdc:	ldr	x1, [x0]
    afe0:	ldrsw	x0, [sp, #20]
    afe4:	lsl	x0, x0, #4
    afe8:	add	x0, x1, x0
    afec:	ldp	x1, x2, [x0]
    aff0:	ldr	x0, [sp, #24]
    aff4:	bl	6cfc <grub_mod_fini+0x67dc>
    aff8:	str	w0, [sp, #44]
    affc:	ldr	w0, [sp, #44]
    b000:	cmn	w0, #0x1
    b004:	cset	w0, ne  // ne = any
    b008:	and	w0, w0, #0xff
    b00c:	and	x0, x0, #0xff
    b010:	cmp	x0, #0x0
    b014:	b.eq	b0e8 <regfree+0x2720>  // b.none
    b018:	ldr	x0, [sp, #24]
    b01c:	ldr	x1, [x0]
    b020:	ldrsw	x0, [sp, #44]
    b024:	lsl	x0, x0, #4
    b028:	add	x1, x1, x0
    b02c:	ldr	w0, [sp, #16]
    b030:	and	w0, w0, #0x3ff
    b034:	and	w2, w0, #0xffff
    b038:	ldr	w0, [x1, #8]
    b03c:	bfi	w0, w2, #8, #10
    b040:	str	w0, [x1, #8]
    b044:	ldr	x0, [sp, #24]
    b048:	ldr	x1, [x0]
    b04c:	ldrsw	x0, [sp, #44]
    b050:	lsl	x0, x0, #4
    b054:	add	x0, x1, x0
    b058:	ldr	w0, [x0, #8]
    b05c:	ubfx	x0, x0, #8, #10
    b060:	and	w2, w0, #0xffff
    b064:	ldr	x0, [sp, #24]
    b068:	ldr	x1, [x0]
    b06c:	ldrsw	x0, [sp, #20]
    b070:	lsl	x0, x0, #4
    b074:	add	x0, x1, x0
    b078:	ldr	w0, [x0, #8]
    b07c:	ubfx	x0, x0, #8, #10
    b080:	and	w0, w0, #0xffff
    b084:	ldr	x1, [sp, #24]
    b088:	ldr	x3, [x1]
    b08c:	ldrsw	x1, [sp, #44]
    b090:	lsl	x1, x1, #4
    b094:	add	x1, x3, x1
    b098:	orr	w0, w2, w0
    b09c:	and	w2, w0, #0xffff
    b0a0:	ldr	w0, [x1, #8]
    b0a4:	bfi	w0, w2, #8, #10
    b0a8:	str	w0, [x1, #8]
    b0ac:	ldr	x0, [sp, #24]
    b0b0:	ldr	x1, [x0]
    b0b4:	ldrsw	x0, [sp, #44]
    b0b8:	lsl	x0, x0, #4
    b0bc:	add	x0, x1, x0
    b0c0:	ldrb	w1, [x0, #10]
    b0c4:	orr	w1, w1, #0x4
    b0c8:	strb	w1, [x0, #10]
    b0cc:	ldr	x0, [sp, #24]
    b0d0:	ldr	x1, [x0, #32]
    b0d4:	ldrsw	x0, [sp, #44]
    b0d8:	lsl	x0, x0, #2
    b0dc:	add	x0, x1, x0
    b0e0:	ldr	w1, [sp, #20]
    b0e4:	str	w1, [x0]
    b0e8:	ldr	w0, [sp, #44]
    b0ec:	ldp	x29, x30, [sp], #48
    b0f0:	ret
    b0f4:	stp	x29, x30, [sp, #-64]!
    b0f8:	mov	x29, sp
    b0fc:	str	x0, [sp, #24]
    b100:	str	wzr, [sp, #56]
    b104:	b	b134 <regfree+0x276c>
    b108:	ldr	x0, [sp, #24]
    b10c:	ldr	x1, [x0, #56]
    b110:	ldrsw	x0, [sp, #56]
    b114:	lsl	x0, x0, #4
    b118:	add	x0, x1, x0
    b11c:	mov	x2, #0x10                  	// #16
    b120:	mov	w1, #0x0                   	// #0
    b124:	bl	0 <grub_memset>
    b128:	ldr	w0, [sp, #56]
    b12c:	add	w0, w0, #0x1
    b130:	str	w0, [sp, #56]
    b134:	ldrsw	x1, [sp, #56]
    b138:	ldr	x0, [sp, #24]
    b13c:	ldr	x0, [x0, #16]
    b140:	cmp	x1, x0
    b144:	b.cc	b108 <regfree+0x2740>  // b.lo, b.ul, b.last
    b148:	str	wzr, [sp, #60]
    b14c:	b	b204 <regfree+0x283c>
    b150:	ldr	x0, [sp, #24]
    b154:	ldr	x1, [x0, #48]
    b158:	ldrsw	x0, [sp, #60]
    b15c:	lsl	x0, x0, #4
    b160:	add	x0, x1, x0
    b164:	ldr	x0, [x0, #8]
    b168:	str	x0, [sp, #48]
    b16c:	str	wzr, [sp, #56]
    b170:	b	b1d4 <regfree+0x280c>
    b174:	ldr	x0, [sp, #24]
    b178:	ldr	x1, [x0, #56]
    b17c:	ldrsw	x0, [sp, #56]
    b180:	lsl	x0, x0, #2
    b184:	ldr	x2, [sp, #48]
    b188:	add	x0, x2, x0
    b18c:	ldr	w0, [x0]
    b190:	sxtw	x0, w0
    b194:	lsl	x0, x0, #4
    b198:	add	x0, x1, x0
    b19c:	ldr	w1, [sp, #60]
    b1a0:	bl	69f0 <grub_mod_fini+0x64d0>
    b1a4:	strb	w0, [sp, #47]
    b1a8:	ldrb	w0, [sp, #47]
    b1ac:	eor	w0, w0, #0x1
    b1b0:	and	w0, w0, #0xff
    b1b4:	and	x0, x0, #0xff
    b1b8:	cmp	x0, #0x0
    b1bc:	b.eq	b1c8 <regfree+0x2800>  // b.none
    b1c0:	mov	w0, #0xc                   	// #12
    b1c4:	b	b21c <regfree+0x2854>
    b1c8:	ldr	w0, [sp, #56]
    b1cc:	add	w0, w0, #0x1
    b1d0:	str	w0, [sp, #56]
    b1d4:	ldr	x0, [sp, #24]
    b1d8:	ldr	x1, [x0, #48]
    b1dc:	ldrsw	x0, [sp, #60]
    b1e0:	lsl	x0, x0, #4
    b1e4:	add	x0, x1, x0
    b1e8:	ldr	w0, [x0, #4]
    b1ec:	ldr	w1, [sp, #56]
    b1f0:	cmp	w1, w0
    b1f4:	b.lt	b174 <regfree+0x27ac>  // b.tstop
    b1f8:	ldr	w0, [sp, #60]
    b1fc:	add	w0, w0, #0x1
    b200:	str	w0, [sp, #60]
    b204:	ldrsw	x1, [sp, #60]
    b208:	ldr	x0, [sp, #24]
    b20c:	ldr	x0, [x0, #16]
    b210:	cmp	x1, x0
    b214:	b.cc	b150 <regfree+0x2788>  // b.lo, b.ul, b.last
    b218:	mov	w0, #0x0                   	// #0
    b21c:	ldp	x29, x30, [sp], #64
    b220:	ret
    b224:	stp	x29, x30, [sp, #-64]!
    b228:	mov	x29, sp
    b22c:	str	x0, [sp, #24]
    b230:	strb	wzr, [sp, #59]
    b234:	str	wzr, [sp, #60]
    b238:	ldrsw	x1, [sp, #60]
    b23c:	ldr	x0, [sp, #24]
    b240:	ldr	x0, [x0, #16]
    b244:	cmp	x1, x0
    b248:	b.ne	b270 <regfree+0x28a8>  // b.any
    b24c:	ldrb	w0, [sp, #59]
    b250:	eor	w0, w0, #0x1
    b254:	and	w0, w0, #0xff
    b258:	cmp	w0, #0x0
    b25c:	b.eq	b268 <regfree+0x28a0>  // b.none
    b260:	mov	w0, #0x0                   	// #0
    b264:	b	b314 <regfree+0x294c>
    b268:	strb	wzr, [sp, #59]
    b26c:	str	wzr, [sp, #60]
    b270:	ldr	x0, [sp, #24]
    b274:	ldr	x1, [x0, #48]
    b278:	ldrsw	x0, [sp, #60]
    b27c:	lsl	x0, x0, #4
    b280:	add	x0, x1, x0
    b284:	ldr	w0, [x0, #4]
    b288:	cmp	w0, #0x0
    b28c:	b.ne	b300 <regfree+0x2938>  // b.any
    b290:	add	x0, sp, #0x20
    b294:	mov	w3, #0x1                   	// #1
    b298:	ldr	w2, [sp, #60]
    b29c:	ldr	x1, [sp, #24]
    b2a0:	bl	b31c <regfree+0x2954>
    b2a4:	str	w0, [sp, #52]
    b2a8:	ldr	w0, [sp, #52]
    b2ac:	cmp	w0, #0x0
    b2b0:	cset	w0, ne  // ne = any
    b2b4:	and	w0, w0, #0xff
    b2b8:	and	x0, x0, #0xff
    b2bc:	cmp	x0, #0x0
    b2c0:	b.eq	b2cc <regfree+0x2904>  // b.none
    b2c4:	ldr	w0, [sp, #52]
    b2c8:	b	b314 <regfree+0x294c>
    b2cc:	ldr	x0, [sp, #24]
    b2d0:	ldr	x1, [x0, #48]
    b2d4:	ldrsw	x0, [sp, #60]
    b2d8:	lsl	x0, x0, #4
    b2dc:	add	x0, x1, x0
    b2e0:	ldr	w0, [x0, #4]
    b2e4:	cmp	w0, #0x0
    b2e8:	b.ne	b304 <regfree+0x293c>  // b.any
    b2ec:	mov	w0, #0x1                   	// #1
    b2f0:	strb	w0, [sp, #59]
    b2f4:	ldr	x0, [sp, #40]
    b2f8:	bl	2230 <grub_mod_fini+0x1d10>
    b2fc:	b	b304 <regfree+0x293c>
    b300:	nop
    b304:	ldr	w0, [sp, #60]
    b308:	add	w0, w0, #0x1
    b30c:	str	w0, [sp, #60]
    b310:	b	b238 <regfree+0x2870>
    b314:	ldp	x29, x30, [sp], #64
    b318:	ret
    b31c:	stp	x29, x30, [sp, #-112]!
    b320:	mov	x29, sp
    b324:	str	x0, [sp, #40]
    b328:	str	x1, [sp, #32]
    b32c:	str	w2, [sp, #28]
    b330:	strb	w3, [sp, #27]
    b334:	strb	wzr, [sp, #107]
    b338:	ldr	x0, [sp, #32]
    b33c:	ldr	x1, [x0, #40]
    b340:	ldrsw	x0, [sp, #28]
    b344:	lsl	x0, x0, #4
    b348:	add	x0, x1, x0
    b34c:	ldr	w0, [x0, #4]
    b350:	add	w1, w0, #0x1
    b354:	add	x0, sp, #0x48
    b358:	bl	5820 <grub_mod_fini+0x5300>
    b35c:	str	w0, [sp, #100]
    b360:	ldr	w0, [sp, #100]
    b364:	cmp	w0, #0x0
    b368:	cset	w0, ne  // ne = any
    b36c:	and	w0, w0, #0xff
    b370:	and	x0, x0, #0xff
    b374:	cmp	x0, #0x0
    b378:	b.eq	b384 <regfree+0x29bc>  // b.none
    b37c:	ldr	w0, [sp, #100]
    b380:	b	b6b0 <regfree+0x2ce8>
    b384:	ldr	x0, [sp, #32]
    b388:	ldr	x1, [x0, #48]
    b38c:	ldrsw	x0, [sp, #28]
    b390:	lsl	x0, x0, #4
    b394:	add	x0, x1, x0
    b398:	mov	w1, #0xffffffff            	// #-1
    b39c:	str	w1, [x0, #4]
    b3a0:	ldr	x0, [sp, #32]
    b3a4:	ldr	x1, [x0]
    b3a8:	ldrsw	x0, [sp, #28]
    b3ac:	lsl	x0, x0, #4
    b3b0:	add	x0, x1, x0
    b3b4:	ldr	w0, [x0, #8]
    b3b8:	and	w0, w0, #0x3ff00
    b3bc:	cmp	w0, #0x0
    b3c0:	b.eq	b488 <regfree+0x2ac0>  // b.none
    b3c4:	ldr	x0, [sp, #32]
    b3c8:	ldr	x1, [x0, #40]
    b3cc:	ldrsw	x0, [sp, #28]
    b3d0:	lsl	x0, x0, #4
    b3d4:	add	x0, x1, x0
    b3d8:	ldr	w0, [x0, #4]
    b3dc:	cmp	w0, #0x0
    b3e0:	b.eq	b488 <regfree+0x2ac0>  // b.none
    b3e4:	ldr	x0, [sp, #32]
    b3e8:	ldr	x1, [x0]
    b3ec:	ldr	x0, [sp, #32]
    b3f0:	ldr	x2, [x0, #40]
    b3f4:	ldrsw	x0, [sp, #28]
    b3f8:	lsl	x0, x0, #4
    b3fc:	add	x0, x2, x0
    b400:	ldr	x0, [x0, #8]
    b404:	ldr	w0, [x0]
    b408:	sxtw	x0, w0
    b40c:	lsl	x0, x0, #4
    b410:	add	x0, x1, x0
    b414:	ldrb	w0, [x0, #10]
    b418:	and	w0, w0, #0x4
    b41c:	and	w0, w0, #0xff
    b420:	cmp	w0, #0x0
    b424:	b.ne	b488 <regfree+0x2ac0>  // b.any
    b428:	ldr	x0, [sp, #32]
    b42c:	ldr	x1, [x0]
    b430:	ldrsw	x0, [sp, #28]
    b434:	lsl	x0, x0, #4
    b438:	add	x0, x1, x0
    b43c:	ldr	w0, [x0, #8]
    b440:	ubfx	x0, x0, #8, #10
    b444:	and	w0, w0, #0xffff
    b448:	mov	w4, w0
    b44c:	ldr	w3, [sp, #28]
    b450:	ldr	w2, [sp, #28]
    b454:	ldr	w1, [sp, #28]
    b458:	ldr	x0, [sp, #32]
    b45c:	bl	aa08 <regfree+0x2040>
    b460:	str	w0, [sp, #100]
    b464:	ldr	w0, [sp, #100]
    b468:	cmp	w0, #0x0
    b46c:	cset	w0, ne  // ne = any
    b470:	and	w0, w0, #0xff
    b474:	and	x0, x0, #0xff
    b478:	cmp	x0, #0x0
    b47c:	b.eq	b488 <regfree+0x2ac0>  // b.none
    b480:	ldr	w0, [sp, #100]
    b484:	b	b6b0 <regfree+0x2ce8>
    b488:	ldr	x0, [sp, #32]
    b48c:	ldr	x1, [x0]
    b490:	ldrsw	x0, [sp, #28]
    b494:	lsl	x0, x0, #4
    b498:	add	x0, x1, x0
    b49c:	ldrb	w0, [x0, #8]
    b4a0:	and	w0, w0, #0x8
    b4a4:	cmp	w0, #0x0
    b4a8:	b.eq	b618 <regfree+0x2c50>  // b.none
    b4ac:	str	wzr, [sp, #108]
    b4b0:	b	b5f4 <regfree+0x2c2c>
    b4b4:	ldr	x0, [sp, #32]
    b4b8:	ldr	x1, [x0, #40]
    b4bc:	ldrsw	x0, [sp, #28]
    b4c0:	lsl	x0, x0, #4
    b4c4:	add	x0, x1, x0
    b4c8:	ldr	x1, [x0, #8]
    b4cc:	ldrsw	x0, [sp, #108]
    b4d0:	lsl	x0, x0, #2
    b4d4:	add	x0, x1, x0
    b4d8:	ldr	w0, [x0]
    b4dc:	str	w0, [sp, #96]
    b4e0:	ldr	x0, [sp, #32]
    b4e4:	ldr	x1, [x0, #48]
    b4e8:	ldrsw	x0, [sp, #96]
    b4ec:	lsl	x0, x0, #4
    b4f0:	add	x0, x1, x0
    b4f4:	ldr	w0, [x0, #4]
    b4f8:	cmn	w0, #0x1
    b4fc:	b.ne	b50c <regfree+0x2b44>  // b.any
    b500:	mov	w0, #0x1                   	// #1
    b504:	strb	w0, [sp, #107]
    b508:	b	b5e8 <regfree+0x2c20>
    b50c:	ldr	x0, [sp, #32]
    b510:	ldr	x1, [x0, #48]
    b514:	ldrsw	x0, [sp, #96]
    b518:	lsl	x0, x0, #4
    b51c:	add	x0, x1, x0
    b520:	ldr	w0, [x0, #4]
    b524:	cmp	w0, #0x0
    b528:	b.ne	b568 <regfree+0x2ba0>  // b.any
    b52c:	add	x0, sp, #0x38
    b530:	mov	w3, #0x0                   	// #0
    b534:	ldr	w2, [sp, #96]
    b538:	ldr	x1, [sp, #32]
    b53c:	bl	b31c <regfree+0x2954>
    b540:	str	w0, [sp, #100]
    b544:	ldr	w0, [sp, #100]
    b548:	cmp	w0, #0x0
    b54c:	cset	w0, ne  // ne = any
    b550:	and	w0, w0, #0xff
    b554:	and	x0, x0, #0xff
    b558:	cmp	x0, #0x0
    b55c:	b.eq	b584 <regfree+0x2bbc>  // b.none
    b560:	ldr	w0, [sp, #100]
    b564:	b	b6b0 <regfree+0x2ce8>
    b568:	ldr	x0, [sp, #32]
    b56c:	ldr	x1, [x0, #48]
    b570:	ldrsw	x0, [sp, #96]
    b574:	lsl	x0, x0, #4
    b578:	add	x0, x1, x0
    b57c:	ldp	x0, x1, [x0]
    b580:	stp	x0, x1, [sp, #56]
    b584:	add	x1, sp, #0x38
    b588:	add	x0, sp, #0x48
    b58c:	bl	634c <grub_mod_fini+0x5e2c>
    b590:	str	w0, [sp, #100]
    b594:	ldr	w0, [sp, #100]
    b598:	cmp	w0, #0x0
    b59c:	cset	w0, ne  // ne = any
    b5a0:	and	w0, w0, #0xff
    b5a4:	and	x0, x0, #0xff
    b5a8:	cmp	x0, #0x0
    b5ac:	b.eq	b5b8 <regfree+0x2bf0>  // b.none
    b5b0:	ldr	w0, [sp, #100]
    b5b4:	b	b6b0 <regfree+0x2ce8>
    b5b8:	ldr	x0, [sp, #32]
    b5bc:	ldr	x1, [x0, #48]
    b5c0:	ldrsw	x0, [sp, #96]
    b5c4:	lsl	x0, x0, #4
    b5c8:	add	x0, x1, x0
    b5cc:	ldr	w0, [x0, #4]
    b5d0:	cmp	w0, #0x0
    b5d4:	b.ne	b5e8 <regfree+0x2c20>  // b.any
    b5d8:	mov	w0, #0x1                   	// #1
    b5dc:	strb	w0, [sp, #107]
    b5e0:	ldr	x0, [sp, #64]
    b5e4:	bl	2230 <grub_mod_fini+0x1d10>
    b5e8:	ldr	w0, [sp, #108]
    b5ec:	add	w0, w0, #0x1
    b5f0:	str	w0, [sp, #108]
    b5f4:	ldr	x0, [sp, #32]
    b5f8:	ldr	x1, [x0, #40]
    b5fc:	ldrsw	x0, [sp, #28]
    b600:	lsl	x0, x0, #4
    b604:	add	x0, x1, x0
    b608:	ldr	w0, [x0, #4]
    b60c:	ldr	w1, [sp, #108]
    b610:	cmp	w1, w0
    b614:	b.lt	b4b4 <regfree+0x2aec>  // b.tstop
    b618:	add	x0, sp, #0x48
    b61c:	ldr	w1, [sp, #28]
    b620:	bl	67b0 <grub_mod_fini+0x6290>
    b624:	strb	w0, [sp, #95]
    b628:	ldrb	w0, [sp, #95]
    b62c:	eor	w0, w0, #0x1
    b630:	and	w0, w0, #0xff
    b634:	and	x0, x0, #0xff
    b638:	cmp	x0, #0x0
    b63c:	b.eq	b648 <regfree+0x2c80>  // b.none
    b640:	mov	w0, #0xc                   	// #12
    b644:	b	b6b0 <regfree+0x2ce8>
    b648:	ldrb	w0, [sp, #107]
    b64c:	cmp	w0, #0x0
    b650:	b.eq	b684 <regfree+0x2cbc>  // b.none
    b654:	ldrb	w0, [sp, #27]
    b658:	eor	w0, w0, #0x1
    b65c:	and	w0, w0, #0xff
    b660:	cmp	w0, #0x0
    b664:	b.eq	b684 <regfree+0x2cbc>  // b.none
    b668:	ldr	x0, [sp, #32]
    b66c:	ldr	x1, [x0, #48]
    b670:	ldrsw	x0, [sp, #28]
    b674:	lsl	x0, x0, #4
    b678:	add	x0, x1, x0
    b67c:	str	wzr, [x0, #4]
    b680:	b	b6a0 <regfree+0x2cd8>
    b684:	ldr	x0, [sp, #32]
    b688:	ldr	x1, [x0, #48]
    b68c:	ldrsw	x0, [sp, #28]
    b690:	lsl	x0, x0, #4
    b694:	add	x2, x1, x0
    b698:	ldp	x0, x1, [sp, #72]
    b69c:	stp	x0, x1, [x2]
    b6a0:	ldr	x2, [sp, #40]
    b6a4:	ldp	x0, x1, [sp, #72]
    b6a8:	stp	x0, x1, [x2]
    b6ac:	mov	w0, #0x0                   	// #0
    b6b0:	ldp	x29, x30, [sp], #112
    b6b4:	ret
    b6b8:	stp	x29, x30, [sp, #-48]!
    b6bc:	mov	x29, sp
    b6c0:	str	x0, [sp, #40]
    b6c4:	str	x1, [sp, #32]
    b6c8:	str	x2, [sp, #24]
    b6cc:	ldr	x2, [sp, #24]
    b6d0:	ldr	x1, [sp, #32]
    b6d4:	ldr	x0, [sp, #40]
    b6d8:	bl	b700 <regfree+0x2d38>
    b6dc:	mov	w1, w0
    b6e0:	ldr	x0, [sp, #32]
    b6e4:	ldr	w0, [x0, #56]
    b6e8:	add	w1, w1, w0
    b6ec:	ldr	x0, [sp, #32]
    b6f0:	str	w1, [x0, #56]
    b6f4:	nop
    b6f8:	ldp	x29, x30, [sp], #48
    b6fc:	ret
    b700:	stp	x29, x30, [sp, #-80]!
    b704:	mov	x29, sp
    b708:	str	x0, [sp, #40]
    b70c:	str	x1, [sp, #32]
    b710:	str	x2, [sp, #24]
    b714:	ldr	x0, [sp, #32]
    b718:	ldr	w1, [x0, #72]
    b71c:	ldr	x0, [sp, #32]
    b720:	ldr	w0, [x0, #56]
    b724:	cmp	w1, w0
    b728:	b.gt	b740 <regfree+0x2d78>
    b72c:	ldr	x0, [sp, #40]
    b730:	mov	w1, #0x2                   	// #2
    b734:	strb	w1, [x0, #8]
    b738:	mov	w0, #0x0                   	// #0
    b73c:	b	c14c <regfree+0x3784>
    b740:	ldr	x0, [sp, #32]
    b744:	ldr	x1, [x0, #8]
    b748:	ldr	x0, [sp, #32]
    b74c:	ldr	w0, [x0, #56]
    b750:	sxtw	x0, w0
    b754:	add	x0, x1, x0
    b758:	ldrb	w0, [x0]
    b75c:	strb	w0, [sp, #79]
    b760:	ldr	x0, [sp, #40]
    b764:	ldrb	w1, [sp, #79]
    b768:	strb	w1, [x0]
    b76c:	ldr	x0, [sp, #40]
    b770:	ldrb	w1, [x0, #10]
    b774:	and	w1, w1, #0xffffffbf
    b778:	strb	w1, [x0, #10]
    b77c:	ldr	x0, [sp, #40]
    b780:	ldrb	w1, [x0, #10]
    b784:	and	w1, w1, #0xffffffdf
    b788:	strb	w1, [x0, #10]
    b78c:	ldr	x0, [sp, #32]
    b790:	ldr	w0, [x0, #104]
    b794:	cmp	w0, #0x1
    b798:	b.le	b800 <regfree+0x2e38>
    b79c:	ldr	x0, [sp, #32]
    b7a0:	ldr	w1, [x0, #56]
    b7a4:	ldr	x0, [sp, #32]
    b7a8:	ldr	w0, [x0, #44]
    b7ac:	cmp	w1, w0
    b7b0:	b.eq	b800 <regfree+0x2e38>  // b.none
    b7b4:	ldr	x0, [sp, #32]
    b7b8:	ldr	x1, [x0, #16]
    b7bc:	ldr	x0, [sp, #32]
    b7c0:	ldr	w0, [x0, #56]
    b7c4:	sxtw	x0, w0
    b7c8:	lsl	x0, x0, #2
    b7cc:	add	x0, x1, x0
    b7d0:	ldr	w0, [x0]
    b7d4:	cmn	w0, #0x1
    b7d8:	b.ne	b800 <regfree+0x2e38>  // b.any
    b7dc:	ldr	x0, [sp, #40]
    b7e0:	mov	w1, #0x1                   	// #1
    b7e4:	strb	w1, [x0, #8]
    b7e8:	ldr	x0, [sp, #40]
    b7ec:	ldrb	w1, [x0, #10]
    b7f0:	orr	w1, w1, #0x20
    b7f4:	strb	w1, [x0, #10]
    b7f8:	mov	w0, #0x1                   	// #1
    b7fc:	b	c14c <regfree+0x3784>
    b800:	ldrb	w0, [sp, #79]
    b804:	cmp	w0, #0x5c
    b808:	b.ne	bccc <regfree+0x3304>  // b.any
    b80c:	ldr	x0, [sp, #32]
    b810:	ldr	w0, [x0, #56]
    b814:	add	w1, w0, #0x1
    b818:	ldr	x0, [sp, #32]
    b81c:	ldr	w0, [x0, #64]
    b820:	cmp	w1, w0
    b824:	b.lt	b83c <regfree+0x2e74>  // b.tstop
    b828:	ldr	x0, [sp, #40]
    b82c:	mov	w1, #0x24                  	// #36
    b830:	strb	w1, [x0, #8]
    b834:	mov	w0, #0x1                   	// #1
    b838:	b	c14c <regfree+0x3784>
    b83c:	mov	w1, #0x1                   	// #1
    b840:	ldr	x0, [sp, #32]
    b844:	bl	5254 <grub_mod_fini+0x4d34>
    b848:	strb	w0, [sp, #70]
    b84c:	ldr	x0, [sp, #40]
    b850:	ldrb	w1, [sp, #70]
    b854:	strb	w1, [x0]
    b858:	ldr	x0, [sp, #40]
    b85c:	mov	w1, #0x1                   	// #1
    b860:	strb	w1, [x0, #8]
    b864:	ldr	x0, [sp, #32]
    b868:	ldr	w0, [x0, #104]
    b86c:	cmp	w0, #0x1
    b870:	b.le	b8d8 <regfree+0x2f10>
    b874:	ldr	x0, [sp, #32]
    b878:	ldr	w0, [x0, #56]
    b87c:	add	w0, w0, #0x1
    b880:	mov	w1, w0
    b884:	ldr	x0, [sp, #32]
    b888:	bl	2dbc <grub_mod_fini+0x289c>
    b88c:	str	w0, [sp, #64]
    b890:	ldr	w0, [sp, #64]
    b894:	bl	27ac <grub_mod_fini+0x228c>
    b898:	cmp	w0, #0x0
    b89c:	b.ne	b8ac <regfree+0x2ee4>  // b.any
    b8a0:	ldr	w0, [sp, #64]
    b8a4:	cmp	w0, #0x5f
    b8a8:	b.ne	b8b4 <regfree+0x2eec>  // b.any
    b8ac:	mov	w0, #0x1                   	// #1
    b8b0:	b	b8b8 <regfree+0x2ef0>
    b8b4:	mov	w0, #0x0                   	// #0
    b8b8:	cmp	w0, #0x0
    b8bc:	cset	w0, ne  // ne = any
    b8c0:	and	w2, w0, #0xff
    b8c4:	ldr	x1, [sp, #40]
    b8c8:	ldrb	w0, [x1, #10]
    b8cc:	bfi	w0, w2, #6, #1
    b8d0:	strb	w0, [x1, #10]
    b8d4:	b	b91c <regfree+0x2f54>
    b8d8:	ldrb	w0, [sp, #70]
    b8dc:	bl	2168 <grub_mod_fini+0x1c48>
    b8e0:	cmp	w0, #0x0
    b8e4:	b.ne	b8f4 <regfree+0x2f2c>  // b.any
    b8e8:	ldrb	w0, [sp, #70]
    b8ec:	cmp	w0, #0x5f
    b8f0:	b.ne	b8fc <regfree+0x2f34>  // b.any
    b8f4:	mov	w0, #0x1                   	// #1
    b8f8:	b	b900 <regfree+0x2f38>
    b8fc:	mov	w0, #0x0                   	// #0
    b900:	cmp	w0, #0x0
    b904:	cset	w0, ne  // ne = any
    b908:	and	w2, w0, #0xff
    b90c:	ldr	x1, [sp, #40]
    b910:	ldrb	w0, [x1, #10]
    b914:	bfi	w0, w2, #6, #1
    b918:	strb	w0, [x1, #10]
    b91c:	ldrb	w0, [sp, #70]
    b920:	sub	w0, w0, #0x27
    b924:	cmp	w0, #0x56
    b928:	b.hi	bc30 <regfree+0x3268>  // b.pmore
    b92c:	adrp	x1, 0 <grub_mod_init-0x450>
    b930:	add	x1, x1, #0x0
    b934:	ldr	x1, [x1]
    b938:	ldr	w0, [x1, w0, uxtw #2]
    b93c:	adr	x1, b948 <regfree+0x2f80>
    b940:	add	x0, x1, w0, sxtw #2
    b944:	br	x0
    b948:	ldr	x0, [sp, #24]
    b94c:	and	x0, x0, #0x400
    b950:	cmp	x0, #0x0
    b954:	b.ne	bc38 <regfree+0x3270>  // b.any
    b958:	ldr	x0, [sp, #24]
    b95c:	and	x0, x0, #0x8000
    b960:	cmp	x0, #0x0
    b964:	b.ne	bc38 <regfree+0x3270>  // b.any
    b968:	ldr	x0, [sp, #40]
    b96c:	mov	w1, #0xa                   	// #10
    b970:	strb	w1, [x0, #8]
    b974:	b	bc38 <regfree+0x3270>
    b978:	ldr	x0, [sp, #24]
    b97c:	and	x0, x0, #0x4000
    b980:	cmp	x0, #0x0
    b984:	b.ne	bc40 <regfree+0x3278>  // b.any
    b988:	ldr	x0, [sp, #40]
    b98c:	mov	w1, #0x4                   	// #4
    b990:	strb	w1, [x0, #8]
    b994:	ldrb	w0, [sp, #70]
    b998:	sub	w1, w0, #0x31
    b99c:	ldr	x0, [sp, #40]
    b9a0:	str	w1, [x0]
    b9a4:	b	bc40 <regfree+0x3278>
    b9a8:	ldr	x0, [sp, #24]
    b9ac:	and	x0, x0, #0x80000
    b9b0:	cmp	x0, #0x0
    b9b4:	b.ne	bc48 <regfree+0x3280>  // b.any
    b9b8:	ldr	x0, [sp, #40]
    b9bc:	mov	w1, #0xc                   	// #12
    b9c0:	strb	w1, [x0, #8]
    b9c4:	ldr	x0, [sp, #40]
    b9c8:	mov	w1, #0x6                   	// #6
    b9cc:	str	w1, [x0]
    b9d0:	b	bc48 <regfree+0x3280>
    b9d4:	ldr	x0, [sp, #24]
    b9d8:	and	x0, x0, #0x80000
    b9dc:	cmp	x0, #0x0
    b9e0:	b.ne	bc50 <regfree+0x3288>  // b.any
    b9e4:	ldr	x0, [sp, #40]
    b9e8:	mov	w1, #0xc                   	// #12
    b9ec:	strb	w1, [x0, #8]
    b9f0:	ldr	x0, [sp, #40]
    b9f4:	mov	w1, #0x9                   	// #9
    b9f8:	str	w1, [x0]
    b9fc:	b	bc50 <regfree+0x3288>
    ba00:	ldr	x0, [sp, #24]
    ba04:	and	x0, x0, #0x80000
    ba08:	cmp	x0, #0x0
    ba0c:	b.ne	bc58 <regfree+0x3290>  // b.any
    ba10:	ldr	x0, [sp, #40]
    ba14:	mov	w1, #0xc                   	// #12
    ba18:	strb	w1, [x0, #8]
    ba1c:	ldr	x0, [sp, #40]
    ba20:	mov	w1, #0x100                 	// #256
    ba24:	str	w1, [x0]
    ba28:	b	bc58 <regfree+0x3290>
    ba2c:	ldr	x0, [sp, #24]
    ba30:	and	x0, x0, #0x80000
    ba34:	cmp	x0, #0x0
    ba38:	b.ne	bc60 <regfree+0x3298>  // b.any
    ba3c:	ldr	x0, [sp, #40]
    ba40:	mov	w1, #0xc                   	// #12
    ba44:	strb	w1, [x0, #8]
    ba48:	ldr	x0, [sp, #40]
    ba4c:	mov	w1, #0x200                 	// #512
    ba50:	str	w1, [x0]
    ba54:	b	bc60 <regfree+0x3298>
    ba58:	ldr	x0, [sp, #24]
    ba5c:	and	x0, x0, #0x80000
    ba60:	cmp	x0, #0x0
    ba64:	b.ne	bc68 <regfree+0x32a0>  // b.any
    ba68:	ldr	x0, [sp, #40]
    ba6c:	mov	w1, #0x20                  	// #32
    ba70:	strb	w1, [x0, #8]
    ba74:	b	bc68 <regfree+0x32a0>
    ba78:	ldr	x0, [sp, #24]
    ba7c:	and	x0, x0, #0x80000
    ba80:	cmp	x0, #0x0
    ba84:	b.ne	bc70 <regfree+0x32a8>  // b.any
    ba88:	ldr	x0, [sp, #40]
    ba8c:	mov	w1, #0x21                  	// #33
    ba90:	strb	w1, [x0, #8]
    ba94:	b	bc70 <regfree+0x32a8>
    ba98:	ldr	x0, [sp, #24]
    ba9c:	and	x0, x0, #0x80000
    baa0:	cmp	x0, #0x0
    baa4:	b.ne	bc78 <regfree+0x32b0>  // b.any
    baa8:	ldr	x0, [sp, #40]
    baac:	mov	w1, #0x22                  	// #34
    bab0:	strb	w1, [x0, #8]
    bab4:	b	bc78 <regfree+0x32b0>
    bab8:	ldr	x0, [sp, #24]
    babc:	and	x0, x0, #0x80000
    bac0:	cmp	x0, #0x0
    bac4:	b.ne	bc80 <regfree+0x32b8>  // b.any
    bac8:	ldr	x0, [sp, #40]
    bacc:	mov	w1, #0x23                  	// #35
    bad0:	strb	w1, [x0, #8]
    bad4:	b	bc80 <regfree+0x32b8>
    bad8:	ldr	x0, [sp, #24]
    badc:	and	x0, x0, #0x80000
    bae0:	cmp	x0, #0x0
    bae4:	b.ne	bc88 <regfree+0x32c0>  // b.any
    bae8:	ldr	x0, [sp, #40]
    baec:	mov	w1, #0xc                   	// #12
    baf0:	strb	w1, [x0, #8]
    baf4:	ldr	x0, [sp, #40]
    baf8:	mov	w1, #0x40                  	// #64
    bafc:	str	w1, [x0]
    bb00:	b	bc88 <regfree+0x32c0>
    bb04:	ldr	x0, [sp, #24]
    bb08:	and	x0, x0, #0x80000
    bb0c:	cmp	x0, #0x0
    bb10:	b.ne	bc90 <regfree+0x32c8>  // b.any
    bb14:	ldr	x0, [sp, #40]
    bb18:	mov	w1, #0xc                   	// #12
    bb1c:	strb	w1, [x0, #8]
    bb20:	ldr	x0, [sp, #40]
    bb24:	mov	w1, #0x80                  	// #128
    bb28:	str	w1, [x0]
    bb2c:	b	bc90 <regfree+0x32c8>
    bb30:	ldr	x0, [sp, #24]
    bb34:	and	x0, x0, #0x2000
    bb38:	cmp	x0, #0x0
    bb3c:	b.ne	bc98 <regfree+0x32d0>  // b.any
    bb40:	ldr	x0, [sp, #40]
    bb44:	mov	w1, #0x8                   	// #8
    bb48:	strb	w1, [x0, #8]
    bb4c:	b	bc98 <regfree+0x32d0>
    bb50:	ldr	x0, [sp, #24]
    bb54:	and	x0, x0, #0x2000
    bb58:	cmp	x0, #0x0
    bb5c:	b.ne	bca0 <regfree+0x32d8>  // b.any
    bb60:	ldr	x0, [sp, #40]
    bb64:	mov	w1, #0x9                   	// #9
    bb68:	strb	w1, [x0, #8]
    bb6c:	b	bca0 <regfree+0x32d8>
    bb70:	ldr	x0, [sp, #24]
    bb74:	and	x0, x0, #0x400
    bb78:	cmp	x0, #0x0
    bb7c:	b.ne	bca8 <regfree+0x32e0>  // b.any
    bb80:	ldr	x0, [sp, #24]
    bb84:	and	x0, x0, #0x2
    bb88:	cmp	x0, #0x0
    bb8c:	b.eq	bca8 <regfree+0x32e0>  // b.none
    bb90:	ldr	x0, [sp, #40]
    bb94:	mov	w1, #0x12                  	// #18
    bb98:	strb	w1, [x0, #8]
    bb9c:	b	bca8 <regfree+0x32e0>
    bba0:	ldr	x0, [sp, #24]
    bba4:	and	x0, x0, #0x400
    bba8:	cmp	x0, #0x0
    bbac:	b.ne	bcb0 <regfree+0x32e8>  // b.any
    bbb0:	ldr	x0, [sp, #24]
    bbb4:	and	x0, x0, #0x2
    bbb8:	cmp	x0, #0x0
    bbbc:	b.eq	bcb0 <regfree+0x32e8>  // b.none
    bbc0:	ldr	x0, [sp, #40]
    bbc4:	mov	w1, #0x13                  	// #19
    bbc8:	strb	w1, [x0, #8]
    bbcc:	b	bcb0 <regfree+0x32e8>
    bbd0:	ldr	x0, [sp, #24]
    bbd4:	and	x0, x0, #0x200
    bbd8:	cmp	x0, #0x0
    bbdc:	b.eq	bcb8 <regfree+0x32f0>  // b.none
    bbe0:	ldr	x0, [sp, #24]
    bbe4:	and	x0, x0, #0x1000
    bbe8:	cmp	x0, #0x0
    bbec:	b.ne	bcb8 <regfree+0x32f0>  // b.any
    bbf0:	ldr	x0, [sp, #40]
    bbf4:	mov	w1, #0x17                  	// #23
    bbf8:	strb	w1, [x0, #8]
    bbfc:	b	bcb8 <regfree+0x32f0>
    bc00:	ldr	x0, [sp, #24]
    bc04:	and	x0, x0, #0x200
    bc08:	cmp	x0, #0x0
    bc0c:	b.eq	bcc0 <regfree+0x32f8>  // b.none
    bc10:	ldr	x0, [sp, #24]
    bc14:	and	x0, x0, #0x1000
    bc18:	cmp	x0, #0x0
    bc1c:	b.ne	bcc0 <regfree+0x32f8>  // b.any
    bc20:	ldr	x0, [sp, #40]
    bc24:	mov	w1, #0x18                  	// #24
    bc28:	strb	w1, [x0, #8]
    bc2c:	b	bcc0 <regfree+0x32f8>
    bc30:	nop
    bc34:	b	bcc4 <regfree+0x32fc>
    bc38:	nop
    bc3c:	b	bcc4 <regfree+0x32fc>
    bc40:	nop
    bc44:	b	bcc4 <regfree+0x32fc>
    bc48:	nop
    bc4c:	b	bcc4 <regfree+0x32fc>
    bc50:	nop
    bc54:	b	bcc4 <regfree+0x32fc>
    bc58:	nop
    bc5c:	b	bcc4 <regfree+0x32fc>
    bc60:	nop
    bc64:	b	bcc4 <regfree+0x32fc>
    bc68:	nop
    bc6c:	b	bcc4 <regfree+0x32fc>
    bc70:	nop
    bc74:	b	bcc4 <regfree+0x32fc>
    bc78:	nop
    bc7c:	b	bcc4 <regfree+0x32fc>
    bc80:	nop
    bc84:	b	bcc4 <regfree+0x32fc>
    bc88:	nop
    bc8c:	b	bcc4 <regfree+0x32fc>
    bc90:	nop
    bc94:	b	bcc4 <regfree+0x32fc>
    bc98:	nop
    bc9c:	b	bcc4 <regfree+0x32fc>
    bca0:	nop
    bca4:	b	bcc4 <regfree+0x32fc>
    bca8:	nop
    bcac:	b	bcc4 <regfree+0x32fc>
    bcb0:	nop
    bcb4:	b	bcc4 <regfree+0x32fc>
    bcb8:	nop
    bcbc:	b	bcc4 <regfree+0x32fc>
    bcc0:	nop
    bcc4:	mov	w0, #0x2                   	// #2
    bcc8:	b	c14c <regfree+0x3784>
    bccc:	ldr	x0, [sp, #40]
    bcd0:	mov	w1, #0x1                   	// #1
    bcd4:	strb	w1, [x0, #8]
    bcd8:	ldr	x0, [sp, #32]
    bcdc:	ldr	w0, [x0, #104]
    bce0:	cmp	w0, #0x1
    bce4:	b.le	bd48 <regfree+0x3380>
    bce8:	ldr	x0, [sp, #32]
    bcec:	ldr	w0, [x0, #56]
    bcf0:	mov	w1, w0
    bcf4:	ldr	x0, [sp, #32]
    bcf8:	bl	2dbc <grub_mod_fini+0x289c>
    bcfc:	str	w0, [sp, #72]
    bd00:	ldr	w0, [sp, #72]
    bd04:	bl	27ac <grub_mod_fini+0x228c>
    bd08:	cmp	w0, #0x0
    bd0c:	b.ne	bd1c <regfree+0x3354>  // b.any
    bd10:	ldr	w0, [sp, #72]
    bd14:	cmp	w0, #0x5f
    bd18:	b.ne	bd24 <regfree+0x335c>  // b.any
    bd1c:	mov	w0, #0x1                   	// #1
    bd20:	b	bd28 <regfree+0x3360>
    bd24:	mov	w0, #0x0                   	// #0
    bd28:	cmp	w0, #0x0
    bd2c:	cset	w0, ne  // ne = any
    bd30:	and	w2, w0, #0xff
    bd34:	ldr	x1, [sp, #40]
    bd38:	ldrb	w0, [x1, #10]
    bd3c:	bfi	w0, w2, #6, #1
    bd40:	strb	w0, [x1, #10]
    bd44:	b	bd90 <regfree+0x33c8>
    bd48:	ldr	x0, [sp, #40]
    bd4c:	ldrb	w0, [x0]
    bd50:	bl	2168 <grub_mod_fini+0x1c48>
    bd54:	cmp	w0, #0x0
    bd58:	b.ne	bd6c <regfree+0x33a4>  // b.any
    bd5c:	ldr	x0, [sp, #40]
    bd60:	ldrb	w0, [x0]
    bd64:	cmp	w0, #0x5f
    bd68:	b.ne	bd74 <regfree+0x33ac>  // b.any
    bd6c:	mov	w0, #0x1                   	// #1
    bd70:	b	bd78 <regfree+0x33b0>
    bd74:	mov	w0, #0x0                   	// #0
    bd78:	and	w0, w0, #0x1
    bd7c:	and	w2, w0, #0xff
    bd80:	ldr	x1, [sp, #40]
    bd84:	ldrb	w0, [x1, #10]
    bd88:	bfi	w0, w2, #6, #1
    bd8c:	strb	w0, [x1, #10]
    bd90:	ldrb	w0, [sp, #79]
    bd94:	cmp	w0, #0x7d
    bd98:	b.eq	bf48 <regfree+0x3580>  // b.none
    bd9c:	cmp	w0, #0x7d
    bda0:	b.gt	c0f4 <regfree+0x372c>
    bda4:	cmp	w0, #0x7c
    bda8:	b.eq	be78 <regfree+0x34b0>  // b.none
    bdac:	cmp	w0, #0x7c
    bdb0:	b.gt	c0f4 <regfree+0x372c>
    bdb4:	cmp	w0, #0x7b
    bdb8:	b.eq	bf18 <regfree+0x3550>  // b.none
    bdbc:	cmp	w0, #0x7b
    bdc0:	b.gt	c0f4 <regfree+0x372c>
    bdc4:	cmp	w0, #0x5e
    bdc8:	b.eq	bfd8 <regfree+0x3610>  // b.none
    bdcc:	cmp	w0, #0x5e
    bdd0:	b.gt	c0f4 <regfree+0x372c>
    bdd4:	cmp	w0, #0x5b
    bdd8:	b.eq	bfb8 <regfree+0x35f0>  // b.none
    bddc:	cmp	w0, #0x5b
    bde0:	b.gt	c0f4 <regfree+0x372c>
    bde4:	cmp	w0, #0x3f
    bde8:	b.eq	bee8 <regfree+0x3520>  // b.none
    bdec:	cmp	w0, #0x3f
    bdf0:	b.gt	c0f4 <regfree+0x372c>
    bdf4:	cmp	w0, #0x2e
    bdf8:	b.eq	bfc8 <regfree+0x3600>  // b.none
    bdfc:	cmp	w0, #0x2e
    be00:	b.gt	c0f4 <regfree+0x372c>
    be04:	cmp	w0, #0x2b
    be08:	b.eq	beb8 <regfree+0x34f0>  // b.none
    be0c:	cmp	w0, #0x2b
    be10:	b.gt	c0f4 <regfree+0x372c>
    be14:	cmp	w0, #0x2a
    be18:	b.eq	bea8 <regfree+0x34e0>  // b.none
    be1c:	cmp	w0, #0x2a
    be20:	b.gt	c0f4 <regfree+0x372c>
    be24:	cmp	w0, #0x29
    be28:	b.eq	bf98 <regfree+0x35d0>  // b.none
    be2c:	cmp	w0, #0x29
    be30:	b.gt	c0f4 <regfree+0x372c>
    be34:	cmp	w0, #0x28
    be38:	b.eq	bf78 <regfree+0x35b0>  // b.none
    be3c:	cmp	w0, #0x28
    be40:	b.gt	c0f4 <regfree+0x372c>
    be44:	cmp	w0, #0xa
    be48:	b.eq	be58 <regfree+0x3490>  // b.none
    be4c:	cmp	w0, #0x24
    be50:	b.eq	c05c <regfree+0x3694>  // b.none
    be54:	b	c0f4 <regfree+0x372c>
    be58:	ldr	x0, [sp, #24]
    be5c:	and	x0, x0, #0x800
    be60:	cmp	x0, #0x0
    be64:	b.eq	c0fc <regfree+0x3734>  // b.none
    be68:	ldr	x0, [sp, #40]
    be6c:	mov	w1, #0xa                   	// #10
    be70:	strb	w1, [x0, #8]
    be74:	b	c0fc <regfree+0x3734>
    be78:	ldr	x0, [sp, #24]
    be7c:	and	x0, x0, #0x400
    be80:	cmp	x0, #0x0
    be84:	b.ne	c104 <regfree+0x373c>  // b.any
    be88:	ldr	x0, [sp, #24]
    be8c:	and	x0, x0, #0x8000
    be90:	cmp	x0, #0x0
    be94:	b.eq	c104 <regfree+0x373c>  // b.none
    be98:	ldr	x0, [sp, #40]
    be9c:	mov	w1, #0xa                   	// #10
    bea0:	strb	w1, [x0, #8]
    bea4:	b	c104 <regfree+0x373c>
    bea8:	ldr	x0, [sp, #40]
    beac:	mov	w1, #0xb                   	// #11
    beb0:	strb	w1, [x0, #8]
    beb4:	b	c148 <regfree+0x3780>
    beb8:	ldr	x0, [sp, #24]
    bebc:	and	x0, x0, #0x400
    bec0:	cmp	x0, #0x0
    bec4:	b.ne	c10c <regfree+0x3744>  // b.any
    bec8:	ldr	x0, [sp, #24]
    becc:	and	x0, x0, #0x2
    bed0:	cmp	x0, #0x0
    bed4:	b.ne	c10c <regfree+0x3744>  // b.any
    bed8:	ldr	x0, [sp, #40]
    bedc:	mov	w1, #0x12                  	// #18
    bee0:	strb	w1, [x0, #8]
    bee4:	b	c10c <regfree+0x3744>
    bee8:	ldr	x0, [sp, #24]
    beec:	and	x0, x0, #0x400
    bef0:	cmp	x0, #0x0
    bef4:	b.ne	c114 <regfree+0x374c>  // b.any
    bef8:	ldr	x0, [sp, #24]
    befc:	and	x0, x0, #0x2
    bf00:	cmp	x0, #0x0
    bf04:	b.ne	c114 <regfree+0x374c>  // b.any
    bf08:	ldr	x0, [sp, #40]
    bf0c:	mov	w1, #0x13                  	// #19
    bf10:	strb	w1, [x0, #8]
    bf14:	b	c114 <regfree+0x374c>
    bf18:	ldr	x0, [sp, #24]
    bf1c:	and	x0, x0, #0x200
    bf20:	cmp	x0, #0x0
    bf24:	b.eq	c11c <regfree+0x3754>  // b.none
    bf28:	ldr	x0, [sp, #24]
    bf2c:	and	x0, x0, #0x1000
    bf30:	cmp	x0, #0x0
    bf34:	b.eq	c11c <regfree+0x3754>  // b.none
    bf38:	ldr	x0, [sp, #40]
    bf3c:	mov	w1, #0x17                  	// #23
    bf40:	strb	w1, [x0, #8]
    bf44:	b	c11c <regfree+0x3754>
    bf48:	ldr	x0, [sp, #24]
    bf4c:	and	x0, x0, #0x200
    bf50:	cmp	x0, #0x0
    bf54:	b.eq	c124 <regfree+0x375c>  // b.none
    bf58:	ldr	x0, [sp, #24]
    bf5c:	and	x0, x0, #0x1000
    bf60:	cmp	x0, #0x0
    bf64:	b.eq	c124 <regfree+0x375c>  // b.none
    bf68:	ldr	x0, [sp, #40]
    bf6c:	mov	w1, #0x18                  	// #24
    bf70:	strb	w1, [x0, #8]
    bf74:	b	c124 <regfree+0x375c>
    bf78:	ldr	x0, [sp, #24]
    bf7c:	and	x0, x0, #0x2000
    bf80:	cmp	x0, #0x0
    bf84:	b.eq	c12c <regfree+0x3764>  // b.none
    bf88:	ldr	x0, [sp, #40]
    bf8c:	mov	w1, #0x8                   	// #8
    bf90:	strb	w1, [x0, #8]
    bf94:	b	c12c <regfree+0x3764>
    bf98:	ldr	x0, [sp, #24]
    bf9c:	and	x0, x0, #0x2000
    bfa0:	cmp	x0, #0x0
    bfa4:	b.eq	c134 <regfree+0x376c>  // b.none
    bfa8:	ldr	x0, [sp, #40]
    bfac:	mov	w1, #0x9                   	// #9
    bfb0:	strb	w1, [x0, #8]
    bfb4:	b	c134 <regfree+0x376c>
    bfb8:	ldr	x0, [sp, #40]
    bfbc:	mov	w1, #0x14                  	// #20
    bfc0:	strb	w1, [x0, #8]
    bfc4:	b	c148 <regfree+0x3780>
    bfc8:	ldr	x0, [sp, #40]
    bfcc:	mov	w1, #0x5                   	// #5
    bfd0:	strb	w1, [x0, #8]
    bfd4:	b	c148 <regfree+0x3780>
    bfd8:	ldr	x1, [sp, #24]
    bfdc:	mov	x0, #0x8                   	// #8
    bfe0:	movk	x0, #0x80, lsl #16
    bfe4:	and	x0, x1, x0
    bfe8:	cmp	x0, #0x0
    bfec:	b.ne	c040 <regfree+0x3678>  // b.any
    bff0:	ldr	x0, [sp, #32]
    bff4:	ldr	w0, [x0, #56]
    bff8:	cmp	w0, #0x0
    bffc:	b.eq	c040 <regfree+0x3678>  // b.none
    c000:	ldr	x0, [sp, #32]
    c004:	ldr	x1, [x0, #8]
    c008:	ldr	x0, [sp, #32]
    c00c:	ldr	w0, [x0, #56]
    c010:	sxtw	x0, w0
    c014:	sub	x0, x0, #0x1
    c018:	add	x0, x1, x0
    c01c:	ldrb	w0, [x0]
    c020:	strb	w0, [sp, #71]
    c024:	ldr	x0, [sp, #24]
    c028:	and	x0, x0, #0x800
    c02c:	cmp	x0, #0x0
    c030:	b.eq	c13c <regfree+0x3774>  // b.none
    c034:	ldrb	w0, [sp, #71]
    c038:	cmp	w0, #0xa
    c03c:	b.ne	c13c <regfree+0x3774>  // b.any
    c040:	ldr	x0, [sp, #40]
    c044:	mov	w1, #0xc                   	// #12
    c048:	strb	w1, [x0, #8]
    c04c:	ldr	x0, [sp, #40]
    c050:	mov	w1, #0x10                  	// #16
    c054:	str	w1, [x0]
    c058:	b	c148 <regfree+0x3780>
    c05c:	ldr	x0, [sp, #24]
    c060:	and	x0, x0, #0x8
    c064:	cmp	x0, #0x0
    c068:	b.ne	c0d8 <regfree+0x3710>  // b.any
    c06c:	ldr	x0, [sp, #32]
    c070:	ldr	w0, [x0, #56]
    c074:	add	w1, w0, #0x1
    c078:	ldr	x0, [sp, #32]
    c07c:	ldr	w0, [x0, #64]
    c080:	cmp	w1, w0
    c084:	b.eq	c0d8 <regfree+0x3710>  // b.none
    c088:	ldr	x0, [sp, #32]
    c08c:	ldr	w0, [x0, #56]
    c090:	add	w1, w0, #0x1
    c094:	ldr	x0, [sp, #32]
    c098:	str	w1, [x0, #56]
    c09c:	add	x0, sp, #0x30
    c0a0:	ldr	x2, [sp, #24]
    c0a4:	ldr	x1, [sp, #32]
    c0a8:	bl	b700 <regfree+0x2d38>
    c0ac:	ldr	x0, [sp, #32]
    c0b0:	ldr	w0, [x0, #56]
    c0b4:	sub	w1, w0, #0x1
    c0b8:	ldr	x0, [sp, #32]
    c0bc:	str	w1, [x0, #56]
    c0c0:	ldrb	w0, [sp, #56]
    c0c4:	cmp	w0, #0xa
    c0c8:	b.eq	c0d8 <regfree+0x3710>  // b.none
    c0cc:	ldrb	w0, [sp, #56]
    c0d0:	cmp	w0, #0x9
    c0d4:	b.ne	c144 <regfree+0x377c>  // b.any
    c0d8:	ldr	x0, [sp, #40]
    c0dc:	mov	w1, #0xc                   	// #12
    c0e0:	strb	w1, [x0, #8]
    c0e4:	ldr	x0, [sp, #40]
    c0e8:	mov	w1, #0x20                  	// #32
    c0ec:	str	w1, [x0]
    c0f0:	b	c148 <regfree+0x3780>
    c0f4:	nop
    c0f8:	b	c148 <regfree+0x3780>
    c0fc:	nop
    c100:	b	c148 <regfree+0x3780>
    c104:	nop
    c108:	b	c148 <regfree+0x3780>
    c10c:	nop
    c110:	b	c148 <regfree+0x3780>
    c114:	nop
    c118:	b	c148 <regfree+0x3780>
    c11c:	nop
    c120:	b	c148 <regfree+0x3780>
    c124:	nop
    c128:	b	c148 <regfree+0x3780>
    c12c:	nop
    c130:	b	c148 <regfree+0x3780>
    c134:	nop
    c138:	b	c148 <regfree+0x3780>
    c13c:	nop
    c140:	b	c148 <regfree+0x3780>
    c144:	nop
    c148:	mov	w0, #0x1                   	// #1
    c14c:	ldp	x29, x30, [sp], #80
    c150:	ret
    c154:	nop
	...
    c160:	sub	sp, sp, #0x30
    c164:	str	x0, [sp, #24]
    c168:	str	x1, [sp, #16]
    c16c:	str	x2, [sp, #8]
    c170:	ldr	x0, [sp, #16]
    c174:	ldr	w1, [x0, #72]
    c178:	ldr	x0, [sp, #16]
    c17c:	ldr	w0, [x0, #56]
    c180:	cmp	w1, w0
    c184:	b.gt	c19c <regfree+0x37d4>
    c188:	ldr	x0, [sp, #24]
    c18c:	mov	w1, #0x2                   	// #2
    c190:	strb	w1, [x0, #8]
    c194:	mov	w0, #0x0                   	// #0
    c198:	b	c41c <regfree+0x3a54>
    c19c:	ldr	x0, [sp, #16]
    c1a0:	ldr	x1, [x0, #8]
    c1a4:	ldr	x0, [sp, #16]
    c1a8:	ldr	w0, [x0, #56]
    c1ac:	sxtw	x0, w0
    c1b0:	add	x0, x1, x0
    c1b4:	ldrb	w0, [x0]
    c1b8:	strb	w0, [sp, #39]
    c1bc:	ldr	x0, [sp, #24]
    c1c0:	ldrb	w1, [sp, #39]
    c1c4:	strb	w1, [x0]
    c1c8:	ldr	x0, [sp, #16]
    c1cc:	ldr	w0, [x0, #104]
    c1d0:	cmp	w0, #0x1
    c1d4:	b.le	c22c <regfree+0x3864>
    c1d8:	ldr	x0, [sp, #16]
    c1dc:	ldr	w1, [x0, #56]
    c1e0:	ldr	x0, [sp, #16]
    c1e4:	ldr	w0, [x0, #44]
    c1e8:	cmp	w1, w0
    c1ec:	b.eq	c22c <regfree+0x3864>  // b.none
    c1f0:	ldr	x0, [sp, #16]
    c1f4:	ldr	x1, [x0, #16]
    c1f8:	ldr	x0, [sp, #16]
    c1fc:	ldr	w0, [x0, #56]
    c200:	sxtw	x0, w0
    c204:	lsl	x0, x0, #2
    c208:	add	x0, x1, x0
    c20c:	ldr	w0, [x0]
    c210:	cmn	w0, #0x1
    c214:	b.ne	c22c <regfree+0x3864>  // b.any
    c218:	ldr	x0, [sp, #24]
    c21c:	mov	w1, #0x1                   	// #1
    c220:	strb	w1, [x0, #8]
    c224:	mov	w0, #0x1                   	// #1
    c228:	b	c41c <regfree+0x3a54>
    c22c:	ldrb	w0, [sp, #39]
    c230:	cmp	w0, #0x5c
    c234:	b.ne	c2b8 <regfree+0x38f0>  // b.any
    c238:	ldr	x0, [sp, #8]
    c23c:	and	x0, x0, #0x1
    c240:	cmp	x0, #0x0
    c244:	b.eq	c2b8 <regfree+0x38f0>  // b.none
    c248:	ldr	x0, [sp, #16]
    c24c:	ldr	w0, [x0, #56]
    c250:	add	w1, w0, #0x1
    c254:	ldr	x0, [sp, #16]
    c258:	ldr	w0, [x0, #64]
    c25c:	cmp	w1, w0
    c260:	b.ge	c2b8 <regfree+0x38f0>  // b.tcont
    c264:	ldr	x0, [sp, #16]
    c268:	ldr	w0, [x0, #56]
    c26c:	add	w1, w0, #0x1
    c270:	ldr	x0, [sp, #16]
    c274:	str	w1, [x0, #56]
    c278:	ldr	x0, [sp, #16]
    c27c:	ldr	x1, [x0, #8]
    c280:	ldr	x0, [sp, #16]
    c284:	ldr	w0, [x0, #56]
    c288:	sxtw	x0, w0
    c28c:	add	x0, x1, x0
    c290:	ldrb	w0, [x0]
    c294:	strb	w0, [sp, #38]
    c298:	ldr	x0, [sp, #24]
    c29c:	ldrb	w1, [sp, #38]
    c2a0:	strb	w1, [x0]
    c2a4:	ldr	x0, [sp, #24]
    c2a8:	mov	w1, #0x1                   	// #1
    c2ac:	strb	w1, [x0, #8]
    c2b0:	mov	w0, #0x1                   	// #1
    c2b4:	b	c41c <regfree+0x3a54>
    c2b8:	ldrb	w0, [sp, #39]
    c2bc:	cmp	w0, #0x5b
    c2c0:	b.ne	c3b4 <regfree+0x39ec>  // b.any
    c2c4:	ldr	x0, [sp, #16]
    c2c8:	ldr	w0, [x0, #56]
    c2cc:	add	w1, w0, #0x1
    c2d0:	ldr	x0, [sp, #16]
    c2d4:	ldr	w0, [x0, #64]
    c2d8:	cmp	w1, w0
    c2dc:	b.ge	c308 <regfree+0x3940>  // b.tcont
    c2e0:	ldr	x0, [sp, #16]
    c2e4:	ldr	x1, [x0, #8]
    c2e8:	ldr	x0, [sp, #16]
    c2ec:	ldr	w0, [x0, #56]
    c2f0:	sxtw	x0, w0
    c2f4:	add	x0, x0, #0x1
    c2f8:	add	x0, x1, x0
    c2fc:	ldrb	w0, [x0]
    c300:	strb	w0, [sp, #47]
    c304:	b	c30c <regfree+0x3944>
    c308:	strb	wzr, [sp, #47]
    c30c:	ldr	x0, [sp, #24]
    c310:	ldrb	w1, [sp, #47]
    c314:	strb	w1, [x0]
    c318:	mov	w0, #0x2                   	// #2
    c31c:	str	w0, [sp, #40]
    c320:	ldrb	w0, [sp, #47]
    c324:	cmp	w0, #0x3d
    c328:	b.eq	c358 <regfree+0x3990>  // b.none
    c32c:	cmp	w0, #0x3d
    c330:	b.gt	c388 <regfree+0x39c0>
    c334:	cmp	w0, #0x2e
    c338:	b.eq	c348 <regfree+0x3980>  // b.none
    c33c:	cmp	w0, #0x3a
    c340:	b.eq	c368 <regfree+0x39a0>  // b.none
    c344:	b	c388 <regfree+0x39c0>
    c348:	ldr	x0, [sp, #24]
    c34c:	mov	w1, #0x1a                  	// #26
    c350:	strb	w1, [x0, #8]
    c354:	b	c3ac <regfree+0x39e4>
    c358:	ldr	x0, [sp, #24]
    c35c:	mov	w1, #0x1c                  	// #28
    c360:	strb	w1, [x0, #8]
    c364:	b	c3ac <regfree+0x39e4>
    c368:	ldr	x0, [sp, #8]
    c36c:	and	x0, x0, #0x4
    c370:	cmp	x0, #0x0
    c374:	b.eq	c388 <regfree+0x39c0>  // b.none
    c378:	ldr	x0, [sp, #24]
    c37c:	mov	w1, #0x1e                  	// #30
    c380:	strb	w1, [x0, #8]
    c384:	b	c3ac <regfree+0x39e4>
    c388:	ldr	x0, [sp, #24]
    c38c:	mov	w1, #0x1                   	// #1
    c390:	strb	w1, [x0, #8]
    c394:	ldr	x0, [sp, #24]
    c398:	ldrb	w1, [sp, #39]
    c39c:	strb	w1, [x0]
    c3a0:	mov	w0, #0x1                   	// #1
    c3a4:	str	w0, [sp, #40]
    c3a8:	nop
    c3ac:	ldr	w0, [sp, #40]
    c3b0:	b	c41c <regfree+0x3a54>
    c3b4:	ldrb	w0, [sp, #39]
    c3b8:	cmp	w0, #0x5e
    c3bc:	b.eq	c3fc <regfree+0x3a34>  // b.none
    c3c0:	cmp	w0, #0x5e
    c3c4:	b.gt	c40c <regfree+0x3a44>
    c3c8:	cmp	w0, #0x2d
    c3cc:	b.eq	c3dc <regfree+0x3a14>  // b.none
    c3d0:	cmp	w0, #0x5d
    c3d4:	b.eq	c3ec <regfree+0x3a24>  // b.none
    c3d8:	b	c40c <regfree+0x3a44>
    c3dc:	ldr	x0, [sp, #24]
    c3e0:	mov	w1, #0x16                  	// #22
    c3e4:	strb	w1, [x0, #8]
    c3e8:	b	c418 <regfree+0x3a50>
    c3ec:	ldr	x0, [sp, #24]
    c3f0:	mov	w1, #0x15                  	// #21
    c3f4:	strb	w1, [x0, #8]
    c3f8:	b	c418 <regfree+0x3a50>
    c3fc:	ldr	x0, [sp, #24]
    c400:	mov	w1, #0x19                  	// #25
    c404:	strb	w1, [x0, #8]
    c408:	b	c418 <regfree+0x3a50>
    c40c:	ldr	x0, [sp, #24]
    c410:	mov	w1, #0x1                   	// #1
    c414:	strb	w1, [x0, #8]
    c418:	mov	w0, #0x1                   	// #1
    c41c:	add	sp, sp, #0x30
    c420:	ret
    c424:	stp	x29, x30, [sp, #-96]!
    c428:	mov	x29, sp
    c42c:	str	x0, [sp, #40]
    c430:	str	x1, [sp, #32]
    c434:	str	x2, [sp, #24]
    c438:	str	x3, [sp, #16]
    c43c:	ldr	x0, [sp, #32]
    c440:	ldr	x0, [x0]
    c444:	str	x0, [sp, #80]
    c448:	ldr	x0, [sp, #80]
    c44c:	ldr	x1, [sp, #24]
    c450:	str	x1, [x0, #200]
    c454:	ldr	x0, [sp, #24]
    c458:	orr	x1, x0, #0x800000
    c45c:	add	x0, sp, #0x30
    c460:	mov	x2, x1
    c464:	ldr	x1, [sp, #40]
    c468:	bl	b6b8 <regfree+0x2cf0>
    c46c:	add	x0, sp, #0x30
    c470:	ldr	x5, [sp, #16]
    c474:	mov	w4, #0x0                   	// #0
    c478:	ldr	x3, [sp, #24]
    c47c:	mov	x2, x0
    c480:	ldr	x1, [sp, #32]
    c484:	ldr	x0, [sp, #40]
    c488:	bl	c574 <regfree+0x3bac>
    c48c:	str	x0, [sp, #72]
    c490:	ldr	x0, [sp, #16]
    c494:	ldr	w0, [x0]
    c498:	cmp	w0, #0x0
    c49c:	cset	w0, ne  // ne = any
    c4a0:	and	w0, w0, #0xff
    c4a4:	and	x0, x0, #0xff
    c4a8:	cmp	x0, #0x0
    c4ac:	b.eq	c4d4 <regfree+0x3b0c>  // b.none
    c4b0:	ldr	x0, [sp, #72]
    c4b4:	cmp	x0, #0x0
    c4b8:	cset	w0, eq  // eq = none
    c4bc:	and	w0, w0, #0xff
    c4c0:	and	x0, x0, #0xff
    c4c4:	cmp	x0, #0x0
    c4c8:	b.eq	c4d4 <regfree+0x3b0c>  // b.none
    c4cc:	mov	x0, #0x0                   	// #0
    c4d0:	b	c56c <regfree+0x3ba4>
    c4d4:	mov	w3, #0x2                   	// #2
    c4d8:	mov	x2, #0x0                   	// #0
    c4dc:	mov	x1, #0x0                   	// #0
    c4e0:	ldr	x0, [sp, #80]
    c4e4:	bl	fd6c <regfree+0x73a4>
    c4e8:	str	x0, [sp, #64]
    c4ec:	ldr	x0, [sp, #72]
    c4f0:	cmp	x0, #0x0
    c4f4:	b.eq	c514 <regfree+0x3b4c>  // b.none
    c4f8:	mov	w3, #0x10                  	// #16
    c4fc:	ldr	x2, [sp, #64]
    c500:	ldr	x1, [sp, #72]
    c504:	ldr	x0, [sp, #80]
    c508:	bl	fd6c <regfree+0x73a4>
    c50c:	str	x0, [sp, #88]
    c510:	b	c51c <regfree+0x3b54>
    c514:	ldr	x0, [sp, #64]
    c518:	str	x0, [sp, #88]
    c51c:	ldr	x0, [sp, #64]
    c520:	cmp	x0, #0x0
    c524:	cset	w0, eq  // eq = none
    c528:	and	w0, w0, #0xff
    c52c:	and	x0, x0, #0xff
    c530:	cmp	x0, #0x0
    c534:	b.ne	c554 <regfree+0x3b8c>  // b.any
    c538:	ldr	x0, [sp, #88]
    c53c:	cmp	x0, #0x0
    c540:	cset	w0, eq  // eq = none
    c544:	and	w0, w0, #0xff
    c548:	and	x0, x0, #0xff
    c54c:	cmp	x0, #0x0
    c550:	b.eq	c568 <regfree+0x3ba0>  // b.none
    c554:	ldr	x0, [sp, #16]
    c558:	mov	w1, #0xc                   	// #12
    c55c:	str	w1, [x0]
    c560:	mov	x0, #0x0                   	// #0
    c564:	b	c56c <regfree+0x3ba4>
    c568:	ldr	x0, [sp, #88]
    c56c:	ldp	x29, x30, [sp], #96
    c570:	ret
    c574:	stp	x29, x30, [sp, #-112]!
    c578:	mov	x29, sp
    c57c:	str	x0, [sp, #56]
    c580:	str	x1, [sp, #48]
    c584:	str	x2, [sp, #40]
    c588:	str	x3, [sp, #32]
    c58c:	str	w4, [sp, #28]
    c590:	str	x5, [sp, #16]
    c594:	ldr	x0, [sp, #48]
    c598:	ldr	x0, [x0]
    c59c:	str	x0, [sp, #88]
    c5a0:	str	xzr, [sp, #96]
    c5a4:	ldr	x0, [sp, #88]
    c5a8:	ldr	x0, [x0, #152]
    c5ac:	str	x0, [sp, #80]
    c5b0:	ldr	x5, [sp, #16]
    c5b4:	ldr	w4, [sp, #28]
    c5b8:	ldr	x3, [sp, #32]
    c5bc:	ldr	x2, [sp, #40]
    c5c0:	ldr	x1, [sp, #48]
    c5c4:	ldr	x0, [sp, #56]
    c5c8:	bl	c798 <regfree+0x3dd0>
    c5cc:	str	x0, [sp, #104]
    c5d0:	ldr	x0, [sp, #16]
    c5d4:	ldr	w0, [x0]
    c5d8:	cmp	w0, #0x0
    c5dc:	cset	w0, ne  // ne = any
    c5e0:	and	w0, w0, #0xff
    c5e4:	and	x0, x0, #0xff
    c5e8:	cmp	x0, #0x0
    c5ec:	b.eq	c770 <regfree+0x3da8>  // b.none
    c5f0:	ldr	x0, [sp, #104]
    c5f4:	cmp	x0, #0x0
    c5f8:	cset	w0, eq  // eq = none
    c5fc:	and	w0, w0, #0xff
    c600:	and	x0, x0, #0xff
    c604:	cmp	x0, #0x0
    c608:	b.eq	c770 <regfree+0x3da8>  // b.none
    c60c:	mov	x0, #0x0                   	// #0
    c610:	b	c784 <regfree+0x3dbc>
    c614:	ldr	x0, [sp, #32]
    c618:	orr	x0, x0, #0x800000
    c61c:	mov	x2, x0
    c620:	ldr	x1, [sp, #56]
    c624:	ldr	x0, [sp, #40]
    c628:	bl	b6b8 <regfree+0x2cf0>
    c62c:	ldr	x0, [sp, #40]
    c630:	ldrb	w0, [x0, #8]
    c634:	cmp	w0, #0xa
    c638:	b.eq	c724 <regfree+0x3d5c>  // b.none
    c63c:	ldr	x0, [sp, #40]
    c640:	ldrb	w0, [x0, #8]
    c644:	cmp	w0, #0x2
    c648:	b.eq	c724 <regfree+0x3d5c>  // b.none
    c64c:	ldr	w0, [sp, #28]
    c650:	cmp	w0, #0x0
    c654:	b.eq	c668 <regfree+0x3ca0>  // b.none
    c658:	ldr	x0, [sp, #40]
    c65c:	ldrb	w0, [x0, #8]
    c660:	cmp	w0, #0x9
    c664:	b.eq	c724 <regfree+0x3d5c>  // b.none
    c668:	ldr	x0, [sp, #88]
    c66c:	ldr	x0, [x0, #152]
    c670:	str	x0, [sp, #72]
    c674:	ldr	x0, [sp, #88]
    c678:	ldr	x1, [sp, #80]
    c67c:	str	x1, [x0, #152]
    c680:	ldr	x5, [sp, #16]
    c684:	ldr	w4, [sp, #28]
    c688:	ldr	x3, [sp, #32]
    c68c:	ldr	x2, [sp, #40]
    c690:	ldr	x1, [sp, #48]
    c694:	ldr	x0, [sp, #56]
    c698:	bl	c798 <regfree+0x3dd0>
    c69c:	str	x0, [sp, #96]
    c6a0:	ldr	x0, [sp, #16]
    c6a4:	ldr	w0, [x0]
    c6a8:	cmp	w0, #0x0
    c6ac:	cset	w0, ne  // ne = any
    c6b0:	and	w0, w0, #0xff
    c6b4:	and	x0, x0, #0xff
    c6b8:	cmp	x0, #0x0
    c6bc:	b.eq	c708 <regfree+0x3d40>  // b.none
    c6c0:	ldr	x0, [sp, #96]
    c6c4:	cmp	x0, #0x0
    c6c8:	cset	w0, eq  // eq = none
    c6cc:	and	w0, w0, #0xff
    c6d0:	and	x0, x0, #0xff
    c6d4:	cmp	x0, #0x0
    c6d8:	b.eq	c708 <regfree+0x3d40>  // b.none
    c6dc:	ldr	x0, [sp, #104]
    c6e0:	cmp	x0, #0x0
    c6e4:	b.eq	c700 <regfree+0x3d38>  // b.none
    c6e8:	mov	x2, #0x0                   	// #0
    c6ec:	adrp	x0, 0 <grub_mod_init-0x450>
    c6f0:	add	x0, x0, #0x0
    c6f4:	ldr	x1, [x0]
    c6f8:	ldr	x0, [sp, #104]
    c6fc:	bl	9f00 <regfree+0x1538>
    c700:	mov	x0, #0x0                   	// #0
    c704:	b	c784 <regfree+0x3dbc>
    c708:	ldr	x0, [sp, #88]
    c70c:	ldr	x1, [x0, #152]
    c710:	ldr	x0, [sp, #72]
    c714:	orr	x1, x1, x0
    c718:	ldr	x0, [sp, #88]
    c71c:	str	x1, [x0, #152]
    c720:	b	c728 <regfree+0x3d60>
    c724:	str	xzr, [sp, #96]
    c728:	mov	w3, #0xa                   	// #10
    c72c:	ldr	x2, [sp, #96]
    c730:	ldr	x1, [sp, #104]
    c734:	ldr	x0, [sp, #88]
    c738:	bl	fd6c <regfree+0x73a4>
    c73c:	str	x0, [sp, #104]
    c740:	ldr	x0, [sp, #104]
    c744:	cmp	x0, #0x0
    c748:	cset	w0, eq  // eq = none
    c74c:	and	w0, w0, #0xff
    c750:	and	x0, x0, #0xff
    c754:	cmp	x0, #0x0
    c758:	b.eq	c770 <regfree+0x3da8>  // b.none
    c75c:	ldr	x0, [sp, #16]
    c760:	mov	w1, #0xc                   	// #12
    c764:	str	w1, [x0]
    c768:	mov	x0, #0x0                   	// #0
    c76c:	b	c784 <regfree+0x3dbc>
    c770:	ldr	x0, [sp, #40]
    c774:	ldrb	w0, [x0, #8]
    c778:	cmp	w0, #0xa
    c77c:	b.eq	c614 <regfree+0x3c4c>  // b.none
    c780:	ldr	x0, [sp, #104]
    c784:	ldp	x29, x30, [sp], #112
    c788:	ret
    c78c:	nop
	...
    c798:	stp	x29, x30, [sp, #-96]!
    c79c:	mov	x29, sp
    c7a0:	str	x0, [sp, #56]
    c7a4:	str	x1, [sp, #48]
    c7a8:	str	x2, [sp, #40]
    c7ac:	str	x3, [sp, #32]
    c7b0:	str	w4, [sp, #28]
    c7b4:	str	x5, [sp, #16]
    c7b8:	ldr	x0, [sp, #48]
    c7bc:	ldr	x0, [x0]
    c7c0:	str	x0, [sp, #80]
    c7c4:	ldr	x5, [sp, #16]
    c7c8:	ldr	w4, [sp, #28]
    c7cc:	ldr	x3, [sp, #32]
    c7d0:	ldr	x2, [sp, #40]
    c7d4:	ldr	x1, [sp, #48]
    c7d8:	ldr	x0, [sp, #56]
    c7dc:	bl	c9a0 <regfree+0x3fd8>
    c7e0:	str	x0, [sp, #88]
    c7e4:	ldr	x0, [sp, #16]
    c7e8:	ldr	w0, [x0]
    c7ec:	cmp	w0, #0x0
    c7f0:	cset	w0, ne  // ne = any
    c7f4:	and	w0, w0, #0xff
    c7f8:	and	x0, x0, #0xff
    c7fc:	cmp	x0, #0x0
    c800:	b.eq	c950 <regfree+0x3f88>  // b.none
    c804:	ldr	x0, [sp, #88]
    c808:	cmp	x0, #0x0
    c80c:	cset	w0, eq  // eq = none
    c810:	and	w0, w0, #0xff
    c814:	and	x0, x0, #0xff
    c818:	cmp	x0, #0x0
    c81c:	b.eq	c950 <regfree+0x3f88>  // b.none
    c820:	mov	x0, #0x0                   	// #0
    c824:	b	c990 <regfree+0x3fc8>
    c828:	ldr	x5, [sp, #16]
    c82c:	ldr	w4, [sp, #28]
    c830:	ldr	x3, [sp, #32]
    c834:	ldr	x2, [sp, #40]
    c838:	ldr	x1, [sp, #48]
    c83c:	ldr	x0, [sp, #56]
    c840:	bl	c9a0 <regfree+0x3fd8>
    c844:	str	x0, [sp, #72]
    c848:	ldr	x0, [sp, #16]
    c84c:	ldr	w0, [x0]
    c850:	cmp	w0, #0x0
    c854:	cset	w0, ne  // ne = any
    c858:	and	w0, w0, #0xff
    c85c:	and	x0, x0, #0xff
    c860:	cmp	x0, #0x0
    c864:	b.eq	c8b0 <regfree+0x3ee8>  // b.none
    c868:	ldr	x0, [sp, #72]
    c86c:	cmp	x0, #0x0
    c870:	cset	w0, eq  // eq = none
    c874:	and	w0, w0, #0xff
    c878:	and	x0, x0, #0xff
    c87c:	cmp	x0, #0x0
    c880:	b.eq	c8b0 <regfree+0x3ee8>  // b.none
    c884:	ldr	x0, [sp, #88]
    c888:	cmp	x0, #0x0
    c88c:	b.eq	c8a8 <regfree+0x3ee0>  // b.none
    c890:	mov	x2, #0x0                   	// #0
    c894:	adrp	x0, 0 <grub_mod_init-0x450>
    c898:	add	x0, x0, #0x0
    c89c:	ldr	x1, [x0]
    c8a0:	ldr	x0, [sp, #88]
    c8a4:	bl	9f00 <regfree+0x1538>
    c8a8:	mov	x0, #0x0                   	// #0
    c8ac:	b	c990 <regfree+0x3fc8>
    c8b0:	ldr	x0, [sp, #88]
    c8b4:	cmp	x0, #0x0
    c8b8:	b.eq	c93c <regfree+0x3f74>  // b.none
    c8bc:	ldr	x0, [sp, #72]
    c8c0:	cmp	x0, #0x0
    c8c4:	b.eq	c93c <regfree+0x3f74>  // b.none
    c8c8:	mov	w3, #0x10                  	// #16
    c8cc:	ldr	x2, [sp, #72]
    c8d0:	ldr	x1, [sp, #88]
    c8d4:	ldr	x0, [sp, #80]
    c8d8:	bl	fd6c <regfree+0x73a4>
    c8dc:	str	x0, [sp, #64]
    c8e0:	ldr	x0, [sp, #64]
    c8e4:	cmp	x0, #0x0
    c8e8:	b.ne	c930 <regfree+0x3f68>  // b.any
    c8ec:	mov	x2, #0x0                   	// #0
    c8f0:	adrp	x0, 0 <grub_mod_init-0x450>
    c8f4:	add	x0, x0, #0x0
    c8f8:	ldr	x1, [x0]
    c8fc:	ldr	x0, [sp, #72]
    c900:	bl	9f00 <regfree+0x1538>
    c904:	mov	x2, #0x0                   	// #0
    c908:	adrp	x0, 0 <grub_mod_init-0x450>
    c90c:	add	x0, x0, #0x0
    c910:	ldr	x1, [x0]
    c914:	ldr	x0, [sp, #88]
    c918:	bl	9f00 <regfree+0x1538>
    c91c:	ldr	x0, [sp, #16]
    c920:	mov	w1, #0xc                   	// #12
    c924:	str	w1, [x0]
    c928:	mov	x0, #0x0                   	// #0
    c92c:	b	c990 <regfree+0x3fc8>
    c930:	ldr	x0, [sp, #64]
    c934:	str	x0, [sp, #88]
    c938:	b	c950 <regfree+0x3f88>
    c93c:	ldr	x0, [sp, #88]
    c940:	cmp	x0, #0x0
    c944:	b.ne	c950 <regfree+0x3f88>  // b.any
    c948:	ldr	x0, [sp, #72]
    c94c:	str	x0, [sp, #88]
    c950:	ldr	x0, [sp, #40]
    c954:	ldrb	w0, [x0, #8]
    c958:	cmp	w0, #0xa
    c95c:	b.eq	c98c <regfree+0x3fc4>  // b.none
    c960:	ldr	x0, [sp, #40]
    c964:	ldrb	w0, [x0, #8]
    c968:	cmp	w0, #0x2
    c96c:	b.eq	c98c <regfree+0x3fc4>  // b.none
    c970:	ldr	w0, [sp, #28]
    c974:	cmp	w0, #0x0
    c978:	b.eq	c828 <regfree+0x3e60>  // b.none
    c97c:	ldr	x0, [sp, #40]
    c980:	ldrb	w0, [x0, #8]
    c984:	cmp	w0, #0x9
    c988:	b.ne	c828 <regfree+0x3e60>  // b.any
    c98c:	ldr	x0, [sp, #88]
    c990:	ldp	x29, x30, [sp], #96
    c994:	ret
	...
    c9a0:	stp	x29, x30, [sp, #-112]!
    c9a4:	mov	x29, sp
    c9a8:	str	x0, [sp, #56]
    c9ac:	str	x1, [sp, #48]
    c9b0:	str	x2, [sp, #40]
    c9b4:	str	x3, [sp, #32]
    c9b8:	str	w4, [sp, #28]
    c9bc:	str	x5, [sp, #16]
    c9c0:	ldr	x0, [sp, #48]
    c9c4:	ldr	x0, [x0]
    c9c8:	str	x0, [sp, #88]
    c9cc:	ldr	x0, [sp, #40]
    c9d0:	ldrb	w0, [x0, #8]
    c9d4:	cmp	w0, #0x24
    c9d8:	b.eq	d224 <regfree+0x485c>  // b.none
    c9dc:	cmp	w0, #0x24
    c9e0:	b.gt	d238 <regfree+0x4870>
    c9e4:	cmp	w0, #0x23
    c9e8:	b.gt	d238 <regfree+0x4870>
    c9ec:	cmp	w0, #0x22
    c9f0:	b.ge	d190 <regfree+0x47c8>  // b.tcont
    c9f4:	cmp	w0, #0x21
    c9f8:	b.gt	d238 <regfree+0x4870>
    c9fc:	cmp	w0, #0x20
    ca00:	b.ge	d104 <regfree+0x473c>  // b.tcont
    ca04:	cmp	w0, #0x18
    ca08:	b.eq	ce68 <regfree+0x44a0>  // b.none
    ca0c:	cmp	w0, #0x18
    ca10:	b.gt	d238 <regfree+0x4870>
    ca14:	cmp	w0, #0x17
    ca18:	b.eq	cdac <regfree+0x43e4>  // b.none
    ca1c:	cmp	w0, #0x17
    ca20:	b.gt	d238 <regfree+0x4870>
    ca24:	cmp	w0, #0x14
    ca28:	b.eq	cc78 <regfree+0x42b0>  // b.none
    ca2c:	cmp	w0, #0x14
    ca30:	b.gt	d238 <regfree+0x4870>
    ca34:	cmp	w0, #0x13
    ca38:	b.gt	d238 <regfree+0x4870>
    ca3c:	cmp	w0, #0x12
    ca40:	b.ge	cdd0 <regfree+0x4408>  // b.tcont
    ca44:	cmp	w0, #0xc
    ca48:	b.eq	cebc <regfree+0x44f4>  // b.none
    ca4c:	cmp	w0, #0xc
    ca50:	b.gt	d238 <regfree+0x4870>
    ca54:	cmp	w0, #0xb
    ca58:	b.eq	cdd0 <regfree+0x4408>  // b.none
    ca5c:	cmp	w0, #0xb
    ca60:	b.gt	d238 <regfree+0x4870>
    ca64:	cmp	w0, #0xa
    ca68:	b.eq	d21c <regfree+0x4854>  // b.none
    ca6c:	cmp	w0, #0xa
    ca70:	b.gt	d238 <regfree+0x4870>
    ca74:	cmp	w0, #0x9
    ca78:	b.eq	ce34 <regfree+0x446c>  // b.none
    ca7c:	cmp	w0, #0x9
    ca80:	b.gt	d238 <regfree+0x4870>
    ca84:	cmp	w0, #0x8
    ca88:	b.eq	cc0c <regfree+0x4244>  // b.none
    ca8c:	cmp	w0, #0x8
    ca90:	b.gt	d238 <regfree+0x4870>
    ca94:	cmp	w0, #0x5
    ca98:	b.eq	d098 <regfree+0x46d0>  // b.none
    ca9c:	cmp	w0, #0x5
    caa0:	b.gt	d238 <regfree+0x4870>
    caa4:	cmp	w0, #0x4
    caa8:	b.eq	ccd8 <regfree+0x4310>  // b.none
    caac:	cmp	w0, #0x4
    cab0:	b.gt	d238 <regfree+0x4870>
    cab4:	cmp	w0, #0x1
    cab8:	b.eq	cac8 <regfree+0x4100>  // b.none
    cabc:	cmp	w0, #0x2
    cac0:	b.eq	d21c <regfree+0x4854>  // b.none
    cac4:	b	d238 <regfree+0x4870>
    cac8:	ldr	x3, [sp, #40]
    cacc:	mov	x2, #0x0                   	// #0
    cad0:	mov	x1, #0x0                   	// #0
    cad4:	ldr	x0, [sp, #88]
    cad8:	bl	fdb0 <regfree+0x73e8>
    cadc:	str	x0, [sp, #104]
    cae0:	ldr	x0, [sp, #104]
    cae4:	cmp	x0, #0x0
    cae8:	cset	w0, eq  // eq = none
    caec:	and	w0, w0, #0xff
    caf0:	and	x0, x0, #0xff
    caf4:	cmp	x0, #0x0
    caf8:	b.eq	cb10 <regfree+0x4148>  // b.none
    cafc:	ldr	x0, [sp, #16]
    cb00:	mov	w1, #0xc                   	// #12
    cb04:	str	w1, [x0]
    cb08:	mov	x0, #0x0                   	// #0
    cb0c:	b	d3c4 <regfree+0x49fc>
    cb10:	ldr	x0, [sp, #88]
    cb14:	ldr	w0, [x0, #164]
    cb18:	cmp	w0, #0x1
    cb1c:	b.le	d240 <regfree+0x4878>
    cb20:	b	cbb0 <regfree+0x41e8>
    cb24:	ldr	x2, [sp, #32]
    cb28:	ldr	x1, [sp, #56]
    cb2c:	ldr	x0, [sp, #40]
    cb30:	bl	b6b8 <regfree+0x2cf0>
    cb34:	ldr	x3, [sp, #40]
    cb38:	mov	x2, #0x0                   	// #0
    cb3c:	mov	x1, #0x0                   	// #0
    cb40:	ldr	x0, [sp, #88]
    cb44:	bl	fdb0 <regfree+0x73e8>
    cb48:	str	x0, [sp, #72]
    cb4c:	mov	w3, #0x10                  	// #16
    cb50:	ldr	x2, [sp, #72]
    cb54:	ldr	x1, [sp, #104]
    cb58:	ldr	x0, [sp, #88]
    cb5c:	bl	fd6c <regfree+0x73a4>
    cb60:	str	x0, [sp, #104]
    cb64:	ldr	x0, [sp, #72]
    cb68:	cmp	x0, #0x0
    cb6c:	cset	w0, eq  // eq = none
    cb70:	and	w0, w0, #0xff
    cb74:	and	x0, x0, #0xff
    cb78:	cmp	x0, #0x0
    cb7c:	b.ne	cb9c <regfree+0x41d4>  // b.any
    cb80:	ldr	x0, [sp, #104]
    cb84:	cmp	x0, #0x0
    cb88:	cset	w0, eq  // eq = none
    cb8c:	and	w0, w0, #0xff
    cb90:	and	x0, x0, #0xff
    cb94:	cmp	x0, #0x0
    cb98:	b.eq	cbb0 <regfree+0x41e8>  // b.none
    cb9c:	ldr	x0, [sp, #16]
    cba0:	mov	w1, #0xc                   	// #12
    cba4:	str	w1, [x0]
    cba8:	mov	x0, #0x0                   	// #0
    cbac:	b	d3c4 <regfree+0x49fc>
    cbb0:	ldr	x0, [sp, #56]
    cbb4:	ldr	w1, [x0, #72]
    cbb8:	ldr	x0, [sp, #56]
    cbbc:	ldr	w0, [x0, #56]
    cbc0:	cmp	w1, w0
    cbc4:	b.le	d240 <regfree+0x4878>
    cbc8:	ldr	x0, [sp, #56]
    cbcc:	ldr	w1, [x0, #56]
    cbd0:	ldr	x0, [sp, #56]
    cbd4:	ldr	w0, [x0, #44]
    cbd8:	cmp	w1, w0
    cbdc:	b.eq	d240 <regfree+0x4878>  // b.none
    cbe0:	ldr	x0, [sp, #56]
    cbe4:	ldr	x1, [x0, #16]
    cbe8:	ldr	x0, [sp, #56]
    cbec:	ldr	w0, [x0, #56]
    cbf0:	sxtw	x0, w0
    cbf4:	lsl	x0, x0, #2
    cbf8:	add	x0, x1, x0
    cbfc:	ldr	w0, [x0]
    cc00:	cmn	w0, #0x1
    cc04:	b.eq	cb24 <regfree+0x415c>  // b.none
    cc08:	b	d240 <regfree+0x4878>
    cc0c:	ldr	w0, [sp, #28]
    cc10:	add	w0, w0, #0x1
    cc14:	ldr	x5, [sp, #16]
    cc18:	mov	w4, w0
    cc1c:	ldr	x3, [sp, #32]
    cc20:	ldr	x2, [sp, #40]
    cc24:	ldr	x1, [sp, #48]
    cc28:	ldr	x0, [sp, #56]
    cc2c:	bl	d3f8 <regfree+0x4a30>
    cc30:	str	x0, [sp, #104]
    cc34:	ldr	x0, [sp, #16]
    cc38:	ldr	w0, [x0]
    cc3c:	cmp	w0, #0x0
    cc40:	cset	w0, ne  // ne = any
    cc44:	and	w0, w0, #0xff
    cc48:	and	x0, x0, #0xff
    cc4c:	cmp	x0, #0x0
    cc50:	b.eq	d248 <regfree+0x4880>  // b.none
    cc54:	ldr	x0, [sp, #104]
    cc58:	cmp	x0, #0x0
    cc5c:	cset	w0, eq  // eq = none
    cc60:	and	w0, w0, #0xff
    cc64:	and	x0, x0, #0xff
    cc68:	cmp	x0, #0x0
    cc6c:	b.eq	d248 <regfree+0x4880>  // b.none
    cc70:	mov	x0, #0x0                   	// #0
    cc74:	b	d3c4 <regfree+0x49fc>
    cc78:	ldr	x4, [sp, #16]
    cc7c:	ldr	x3, [sp, #32]
    cc80:	ldr	x2, [sp, #40]
    cc84:	ldr	x1, [sp, #88]
    cc88:	ldr	x0, [sp, #56]
    cc8c:	bl	e144 <regfree+0x577c>
    cc90:	str	x0, [sp, #104]
    cc94:	ldr	x0, [sp, #16]
    cc98:	ldr	w0, [x0]
    cc9c:	cmp	w0, #0x0
    cca0:	cset	w0, ne  // ne = any
    cca4:	and	w0, w0, #0xff
    cca8:	and	x0, x0, #0xff
    ccac:	cmp	x0, #0x0
    ccb0:	b.eq	d250 <regfree+0x4888>  // b.none
    ccb4:	ldr	x0, [sp, #104]
    ccb8:	cmp	x0, #0x0
    ccbc:	cset	w0, eq  // eq = none
    ccc0:	and	w0, w0, #0xff
    ccc4:	and	x0, x0, #0xff
    ccc8:	cmp	x0, #0x0
    cccc:	b.eq	d250 <regfree+0x4888>  // b.none
    ccd0:	mov	x0, #0x0                   	// #0
    ccd4:	b	d3c4 <regfree+0x49fc>
    ccd8:	ldr	x0, [sp, #88]
    ccdc:	ldr	x1, [x0, #152]
    cce0:	ldr	x0, [sp, #40]
    cce4:	ldr	w0, [x0]
    cce8:	mov	w2, #0x1                   	// #1
    ccec:	lsl	w0, w2, w0
    ccf0:	sxtw	x0, w0
    ccf4:	and	x0, x1, x0
    ccf8:	cmp	x0, #0x0
    ccfc:	b.ne	cd14 <regfree+0x434c>  // b.any
    cd00:	ldr	x0, [sp, #16]
    cd04:	mov	w1, #0x6                   	// #6
    cd08:	str	w1, [x0]
    cd0c:	mov	x0, #0x0                   	// #0
    cd10:	b	d3c4 <regfree+0x49fc>
    cd14:	ldr	x0, [sp, #88]
    cd18:	ldr	x1, [x0, #144]
    cd1c:	ldr	x0, [sp, #40]
    cd20:	ldr	w0, [x0]
    cd24:	mov	w2, #0x1                   	// #1
    cd28:	lsl	w0, w2, w0
    cd2c:	sxtw	x0, w0
    cd30:	orr	x1, x1, x0
    cd34:	ldr	x0, [sp, #88]
    cd38:	str	x1, [x0, #144]
    cd3c:	ldr	x3, [sp, #40]
    cd40:	mov	x2, #0x0                   	// #0
    cd44:	mov	x1, #0x0                   	// #0
    cd48:	ldr	x0, [sp, #88]
    cd4c:	bl	fdb0 <regfree+0x73e8>
    cd50:	str	x0, [sp, #104]
    cd54:	ldr	x0, [sp, #104]
    cd58:	cmp	x0, #0x0
    cd5c:	cset	w0, eq  // eq = none
    cd60:	and	w0, w0, #0xff
    cd64:	and	x0, x0, #0xff
    cd68:	cmp	x0, #0x0
    cd6c:	b.eq	cd84 <regfree+0x43bc>  // b.none
    cd70:	ldr	x0, [sp, #16]
    cd74:	mov	w1, #0xc                   	// #12
    cd78:	str	w1, [x0]
    cd7c:	mov	x0, #0x0                   	// #0
    cd80:	b	d3c4 <regfree+0x49fc>
    cd84:	ldr	x0, [sp, #88]
    cd88:	ldr	w0, [x0, #140]
    cd8c:	add	w1, w0, #0x1
    cd90:	ldr	x0, [sp, #88]
    cd94:	str	w1, [x0, #140]
    cd98:	ldr	x0, [sp, #88]
    cd9c:	ldrb	w1, [x0, #160]
    cda0:	orr	w1, w1, #0x2
    cda4:	strb	w1, [x0, #160]
    cda8:	b	d274 <regfree+0x48ac>
    cdac:	ldr	x0, [sp, #32]
    cdb0:	and	x0, x0, #0x1000000
    cdb4:	cmp	x0, #0x0
    cdb8:	b.eq	cdd0 <regfree+0x4408>  // b.none
    cdbc:	ldr	x0, [sp, #16]
    cdc0:	mov	w1, #0xd                   	// #13
    cdc4:	str	w1, [x0]
    cdc8:	mov	x0, #0x0                   	// #0
    cdcc:	b	d3c4 <regfree+0x49fc>
    cdd0:	ldr	x0, [sp, #32]
    cdd4:	and	x0, x0, #0x20
    cdd8:	cmp	x0, #0x0
    cddc:	b.eq	cdf4 <regfree+0x442c>  // b.none
    cde0:	ldr	x0, [sp, #16]
    cde4:	mov	w1, #0xd                   	// #13
    cde8:	str	w1, [x0]
    cdec:	mov	x0, #0x0                   	// #0
    cdf0:	b	d3c4 <regfree+0x49fc>
    cdf4:	ldr	x0, [sp, #32]
    cdf8:	and	x0, x0, #0x10
    cdfc:	cmp	x0, #0x0
    ce00:	b.eq	ce34 <regfree+0x446c>  // b.none
    ce04:	ldr	x2, [sp, #32]
    ce08:	ldr	x1, [sp, #56]
    ce0c:	ldr	x0, [sp, #40]
    ce10:	bl	b6b8 <regfree+0x2cf0>
    ce14:	ldr	x5, [sp, #16]
    ce18:	ldr	w4, [sp, #28]
    ce1c:	ldr	x3, [sp, #32]
    ce20:	ldr	x2, [sp, #40]
    ce24:	ldr	x1, [sp, #48]
    ce28:	ldr	x0, [sp, #56]
    ce2c:	bl	c9a0 <regfree+0x3fd8>
    ce30:	b	d3c4 <regfree+0x49fc>
    ce34:	ldr	x0, [sp, #40]
    ce38:	ldrb	w0, [x0, #8]
    ce3c:	cmp	w0, #0x9
    ce40:	b.ne	ce68 <regfree+0x44a0>  // b.any
    ce44:	ldr	x0, [sp, #32]
    ce48:	and	x0, x0, #0x20000
    ce4c:	cmp	x0, #0x0
    ce50:	b.ne	ce68 <regfree+0x44a0>  // b.any
    ce54:	ldr	x0, [sp, #16]
    ce58:	mov	w1, #0x10                  	// #16
    ce5c:	str	w1, [x0]
    ce60:	mov	x0, #0x0                   	// #0
    ce64:	b	d3c4 <regfree+0x49fc>
    ce68:	ldr	x0, [sp, #40]
    ce6c:	mov	w1, #0x1                   	// #1
    ce70:	strb	w1, [x0, #8]
    ce74:	ldr	x3, [sp, #40]
    ce78:	mov	x2, #0x0                   	// #0
    ce7c:	mov	x1, #0x0                   	// #0
    ce80:	ldr	x0, [sp, #88]
    ce84:	bl	fdb0 <regfree+0x73e8>
    ce88:	str	x0, [sp, #104]
    ce8c:	ldr	x0, [sp, #104]
    ce90:	cmp	x0, #0x0
    ce94:	cset	w0, eq  // eq = none
    ce98:	and	w0, w0, #0xff
    ce9c:	and	x0, x0, #0xff
    cea0:	cmp	x0, #0x0
    cea4:	b.eq	d258 <regfree+0x4890>  // b.none
    cea8:	ldr	x0, [sp, #16]
    ceac:	mov	w1, #0xc                   	// #12
    ceb0:	str	w1, [x0]
    ceb4:	mov	x0, #0x0                   	// #0
    ceb8:	b	d3c4 <regfree+0x49fc>
    cebc:	ldr	x0, [sp, #40]
    cec0:	ldr	w1, [x0]
    cec4:	mov	w0, #0x30f                 	// #783
    cec8:	and	w0, w1, w0
    cecc:	cmp	w0, #0x0
    ced0:	b.eq	cef4 <regfree+0x452c>  // b.none
    ced4:	ldr	x0, [sp, #88]
    ced8:	ldrb	w0, [x0, #160]
    cedc:	and	w0, w0, #0x10
    cee0:	and	w0, w0, #0xff
    cee4:	cmp	w0, #0x0
    cee8:	b.ne	cef4 <regfree+0x452c>  // b.any
    ceec:	ldr	x0, [sp, #88]
    cef0:	bl	9188 <regfree+0x7c0>
    cef4:	ldr	x0, [sp, #40]
    cef8:	ldr	w0, [x0]
    cefc:	cmp	w0, #0x100
    cf00:	b.eq	cf14 <regfree+0x454c>  // b.none
    cf04:	ldr	x0, [sp, #40]
    cf08:	ldr	w0, [x0]
    cf0c:	cmp	w0, #0x200
    cf10:	b.ne	d034 <regfree+0x466c>  // b.any
    cf14:	ldr	x0, [sp, #40]
    cf18:	ldr	w0, [x0]
    cf1c:	cmp	w0, #0x100
    cf20:	b.ne	cf58 <regfree+0x4590>  // b.any
    cf24:	ldr	x0, [sp, #40]
    cf28:	mov	w1, #0x6                   	// #6
    cf2c:	str	w1, [x0]
    cf30:	ldr	x3, [sp, #40]
    cf34:	mov	x2, #0x0                   	// #0
    cf38:	mov	x1, #0x0                   	// #0
    cf3c:	ldr	x0, [sp, #88]
    cf40:	bl	fdb0 <regfree+0x73e8>
    cf44:	str	x0, [sp, #96]
    cf48:	ldr	x0, [sp, #40]
    cf4c:	mov	w1, #0x9                   	// #9
    cf50:	str	w1, [x0]
    cf54:	b	cf88 <regfree+0x45c0>
    cf58:	ldr	x0, [sp, #40]
    cf5c:	mov	w1, #0x5                   	// #5
    cf60:	str	w1, [x0]
    cf64:	ldr	x3, [sp, #40]
    cf68:	mov	x2, #0x0                   	// #0
    cf6c:	mov	x1, #0x0                   	// #0
    cf70:	ldr	x0, [sp, #88]
    cf74:	bl	fdb0 <regfree+0x73e8>
    cf78:	str	x0, [sp, #96]
    cf7c:	ldr	x0, [sp, #40]
    cf80:	mov	w1, #0xa                   	// #10
    cf84:	str	w1, [x0]
    cf88:	ldr	x3, [sp, #40]
    cf8c:	mov	x2, #0x0                   	// #0
    cf90:	mov	x1, #0x0                   	// #0
    cf94:	ldr	x0, [sp, #88]
    cf98:	bl	fdb0 <regfree+0x73e8>
    cf9c:	str	x0, [sp, #80]
    cfa0:	mov	w3, #0xa                   	// #10
    cfa4:	ldr	x2, [sp, #80]
    cfa8:	ldr	x1, [sp, #96]
    cfac:	ldr	x0, [sp, #88]
    cfb0:	bl	fd6c <regfree+0x73a4>
    cfb4:	str	x0, [sp, #104]
    cfb8:	ldr	x0, [sp, #96]
    cfbc:	cmp	x0, #0x0
    cfc0:	cset	w0, eq  // eq = none
    cfc4:	and	w0, w0, #0xff
    cfc8:	and	x0, x0, #0xff
    cfcc:	cmp	x0, #0x0
    cfd0:	b.ne	cff0 <regfree+0x4628>  // b.any
    cfd4:	ldr	x0, [sp, #80]
    cfd8:	cmp	x0, #0x0
    cfdc:	cset	w0, eq  // eq = none
    cfe0:	and	w0, w0, #0xff
    cfe4:	and	x0, x0, #0xff
    cfe8:	cmp	x0, #0x0
    cfec:	b.eq	cff8 <regfree+0x4630>  // b.none
    cff0:	mov	w0, #0x1                   	// #1
    cff4:	b	cffc <regfree+0x4634>
    cff8:	mov	w0, #0x0                   	// #0
    cffc:	cmp	w0, #0x0
    d000:	b.ne	d020 <regfree+0x4658>  // b.any
    d004:	ldr	x0, [sp, #104]
    d008:	cmp	x0, #0x0
    d00c:	cset	w0, eq  // eq = none
    d010:	and	w0, w0, #0xff
    d014:	and	x0, x0, #0xff
    d018:	cmp	x0, #0x0
    d01c:	b.eq	d07c <regfree+0x46b4>  // b.none
    d020:	ldr	x0, [sp, #16]
    d024:	mov	w1, #0xc                   	// #12
    d028:	str	w1, [x0]
    d02c:	mov	x0, #0x0                   	// #0
    d030:	b	d3c4 <regfree+0x49fc>
    d034:	ldr	x3, [sp, #40]
    d038:	mov	x2, #0x0                   	// #0
    d03c:	mov	x1, #0x0                   	// #0
    d040:	ldr	x0, [sp, #88]
    d044:	bl	fdb0 <regfree+0x73e8>
    d048:	str	x0, [sp, #104]
    d04c:	ldr	x0, [sp, #104]
    d050:	cmp	x0, #0x0
    d054:	cset	w0, eq  // eq = none
    d058:	and	w0, w0, #0xff
    d05c:	and	x0, x0, #0xff
    d060:	cmp	x0, #0x0
    d064:	b.eq	d080 <regfree+0x46b8>  // b.none
    d068:	ldr	x0, [sp, #16]
    d06c:	mov	w1, #0xc                   	// #12
    d070:	str	w1, [x0]
    d074:	mov	x0, #0x0                   	// #0
    d078:	b	d3c4 <regfree+0x49fc>
    d07c:	nop
    d080:	ldr	x2, [sp, #32]
    d084:	ldr	x1, [sp, #56]
    d088:	ldr	x0, [sp, #40]
    d08c:	bl	b6b8 <regfree+0x2cf0>
    d090:	ldr	x0, [sp, #104]
    d094:	b	d3c4 <regfree+0x49fc>
    d098:	ldr	x3, [sp, #40]
    d09c:	mov	x2, #0x0                   	// #0
    d0a0:	mov	x1, #0x0                   	// #0
    d0a4:	ldr	x0, [sp, #88]
    d0a8:	bl	fdb0 <regfree+0x73e8>
    d0ac:	str	x0, [sp, #104]
    d0b0:	ldr	x0, [sp, #104]
    d0b4:	cmp	x0, #0x0
    d0b8:	cset	w0, eq  // eq = none
    d0bc:	and	w0, w0, #0xff
    d0c0:	and	x0, x0, #0xff
    d0c4:	cmp	x0, #0x0
    d0c8:	b.eq	d0e0 <regfree+0x4718>  // b.none
    d0cc:	ldr	x0, [sp, #16]
    d0d0:	mov	w1, #0xc                   	// #12
    d0d4:	str	w1, [x0]
    d0d8:	mov	x0, #0x0                   	// #0
    d0dc:	b	d3c4 <regfree+0x49fc>
    d0e0:	ldr	x0, [sp, #88]
    d0e4:	ldr	w0, [x0, #164]
    d0e8:	cmp	w0, #0x1
    d0ec:	b.le	d260 <regfree+0x4898>
    d0f0:	ldr	x0, [sp, #88]
    d0f4:	ldrb	w1, [x0, #160]
    d0f8:	orr	w1, w1, #0x2
    d0fc:	strb	w1, [x0, #160]
    d100:	b	d260 <regfree+0x4898>
    d104:	ldr	x0, [sp, #56]
    d108:	ldr	x1, [x0, #80]
    d10c:	ldr	x0, [sp, #40]
    d110:	ldrb	w0, [x0, #8]
    d114:	cmp	w0, #0x21
    d118:	cset	w0, eq  // eq = none
    d11c:	and	w0, w0, #0xff
    d120:	ldr	x5, [sp, #16]
    d124:	mov	w4, w0
    d128:	adrp	x0, 0 <grub_mod_init-0x450>
    d12c:	add	x0, x0, #0x0
    d130:	ldr	x3, [x0]
    d134:	adrp	x0, 0 <grub_mod_init-0x450>
    d138:	add	x0, x0, #0x0
    d13c:	ldr	x2, [x0]
    d140:	ldr	x0, [sp, #88]
    d144:	bl	f948 <regfree+0x6f80>
    d148:	str	x0, [sp, #104]
    d14c:	ldr	x0, [sp, #16]
    d150:	ldr	w0, [x0]
    d154:	cmp	w0, #0x0
    d158:	cset	w0, ne  // ne = any
    d15c:	and	w0, w0, #0xff
    d160:	and	x0, x0, #0xff
    d164:	cmp	x0, #0x0
    d168:	b.eq	d268 <regfree+0x48a0>  // b.none
    d16c:	ldr	x0, [sp, #104]
    d170:	cmp	x0, #0x0
    d174:	cset	w0, eq  // eq = none
    d178:	and	w0, w0, #0xff
    d17c:	and	x0, x0, #0xff
    d180:	cmp	x0, #0x0
    d184:	b.eq	d268 <regfree+0x48a0>  // b.none
    d188:	mov	x0, #0x0                   	// #0
    d18c:	b	d3c4 <regfree+0x49fc>
    d190:	ldr	x0, [sp, #56]
    d194:	ldr	x1, [x0, #80]
    d198:	ldr	x0, [sp, #40]
    d19c:	ldrb	w0, [x0, #8]
    d1a0:	cmp	w0, #0x23
    d1a4:	cset	w0, eq  // eq = none
    d1a8:	and	w0, w0, #0xff
    d1ac:	ldr	x5, [sp, #16]
    d1b0:	mov	w4, w0
    d1b4:	adrp	x0, 0 <grub_mod_init-0x450>
    d1b8:	add	x0, x0, #0x0
    d1bc:	ldr	x3, [x0]
    d1c0:	adrp	x0, 0 <grub_mod_init-0x450>
    d1c4:	add	x0, x0, #0x0
    d1c8:	ldr	x2, [x0]
    d1cc:	ldr	x0, [sp, #88]
    d1d0:	bl	f948 <regfree+0x6f80>
    d1d4:	str	x0, [sp, #104]
    d1d8:	ldr	x0, [sp, #16]
    d1dc:	ldr	w0, [x0]
    d1e0:	cmp	w0, #0x0
    d1e4:	cset	w0, ne  // ne = any
    d1e8:	and	w0, w0, #0xff
    d1ec:	and	x0, x0, #0xff
    d1f0:	cmp	x0, #0x0
    d1f4:	b.eq	d270 <regfree+0x48a8>  // b.none
    d1f8:	ldr	x0, [sp, #104]
    d1fc:	cmp	x0, #0x0
    d200:	cset	w0, eq  // eq = none
    d204:	and	w0, w0, #0xff
    d208:	and	x0, x0, #0xff
    d20c:	cmp	x0, #0x0
    d210:	b.eq	d270 <regfree+0x48a8>  // b.none
    d214:	mov	x0, #0x0                   	// #0
    d218:	b	d3c4 <regfree+0x49fc>
    d21c:	mov	x0, #0x0                   	// #0
    d220:	b	d3c4 <regfree+0x49fc>
    d224:	ldr	x0, [sp, #16]
    d228:	mov	w1, #0x5                   	// #5
    d22c:	str	w1, [x0]
    d230:	mov	x0, #0x0                   	// #0
    d234:	b	d3c4 <regfree+0x49fc>
    d238:	mov	x0, #0x0                   	// #0
    d23c:	b	d3c4 <regfree+0x49fc>
    d240:	nop
    d244:	b	d274 <regfree+0x48ac>
    d248:	nop
    d24c:	b	d274 <regfree+0x48ac>
    d250:	nop
    d254:	b	d274 <regfree+0x48ac>
    d258:	nop
    d25c:	b	d274 <regfree+0x48ac>
    d260:	nop
    d264:	b	d274 <regfree+0x48ac>
    d268:	nop
    d26c:	b	d274 <regfree+0x48ac>
    d270:	nop
    d274:	ldr	x2, [sp, #32]
    d278:	ldr	x1, [sp, #56]
    d27c:	ldr	x0, [sp, #40]
    d280:	bl	b6b8 <regfree+0x2cf0>
    d284:	b	d380 <regfree+0x49b8>
    d288:	ldr	x5, [sp, #16]
    d28c:	ldr	x4, [sp, #32]
    d290:	ldr	x3, [sp, #40]
    d294:	ldr	x2, [sp, #88]
    d298:	ldr	x1, [sp, #56]
    d29c:	ldr	x0, [sp, #104]
    d2a0:	bl	d5c8 <regfree+0x4c00>
    d2a4:	str	x0, [sp, #64]
    d2a8:	ldr	x0, [sp, #16]
    d2ac:	ldr	w0, [x0]
    d2b0:	cmp	w0, #0x0
    d2b4:	cset	w0, ne  // ne = any
    d2b8:	and	w0, w0, #0xff
    d2bc:	and	x0, x0, #0xff
    d2c0:	cmp	x0, #0x0
    d2c4:	b.eq	d310 <regfree+0x4948>  // b.none
    d2c8:	ldr	x0, [sp, #64]
    d2cc:	cmp	x0, #0x0
    d2d0:	cset	w0, eq  // eq = none
    d2d4:	and	w0, w0, #0xff
    d2d8:	and	x0, x0, #0xff
    d2dc:	cmp	x0, #0x0
    d2e0:	b.eq	d310 <regfree+0x4948>  // b.none
    d2e4:	ldr	x0, [sp, #104]
    d2e8:	cmp	x0, #0x0
    d2ec:	b.eq	d308 <regfree+0x4940>  // b.none
    d2f0:	mov	x2, #0x0                   	// #0
    d2f4:	adrp	x0, 0 <grub_mod_init-0x450>
    d2f8:	add	x0, x0, #0x0
    d2fc:	ldr	x1, [x0]
    d300:	ldr	x0, [sp, #104]
    d304:	bl	9f00 <regfree+0x1538>
    d308:	mov	x0, #0x0                   	// #0
    d30c:	b	d3c4 <regfree+0x49fc>
    d310:	ldr	x0, [sp, #64]
    d314:	str	x0, [sp, #104]
    d318:	ldr	x0, [sp, #32]
    d31c:	and	x0, x0, #0x1000000
    d320:	cmp	x0, #0x0
    d324:	b.eq	d380 <regfree+0x49b8>  // b.none
    d328:	ldr	x0, [sp, #40]
    d32c:	ldrb	w0, [x0, #8]
    d330:	cmp	w0, #0xb
    d334:	b.eq	d348 <regfree+0x4980>  // b.none
    d338:	ldr	x0, [sp, #40]
    d33c:	ldrb	w0, [x0, #8]
    d340:	cmp	w0, #0x17
    d344:	b.ne	d380 <regfree+0x49b8>  // b.any
    d348:	ldr	x0, [sp, #104]
    d34c:	cmp	x0, #0x0
    d350:	b.eq	d36c <regfree+0x49a4>  // b.none
    d354:	mov	x2, #0x0                   	// #0
    d358:	adrp	x0, 0 <grub_mod_init-0x450>
    d35c:	add	x0, x0, #0x0
    d360:	ldr	x1, [x0]
    d364:	ldr	x0, [sp, #104]
    d368:	bl	9f00 <regfree+0x1538>
    d36c:	ldr	x0, [sp, #16]
    d370:	mov	w1, #0xd                   	// #13
    d374:	str	w1, [x0]
    d378:	mov	x0, #0x0                   	// #0
    d37c:	b	d3c4 <regfree+0x49fc>
    d380:	ldr	x0, [sp, #40]
    d384:	ldrb	w0, [x0, #8]
    d388:	cmp	w0, #0xb
    d38c:	b.eq	d288 <regfree+0x48c0>  // b.none
    d390:	ldr	x0, [sp, #40]
    d394:	ldrb	w0, [x0, #8]
    d398:	cmp	w0, #0x12
    d39c:	b.eq	d288 <regfree+0x48c0>  // b.none
    d3a0:	ldr	x0, [sp, #40]
    d3a4:	ldrb	w0, [x0, #8]
    d3a8:	cmp	w0, #0x13
    d3ac:	b.eq	d288 <regfree+0x48c0>  // b.none
    d3b0:	ldr	x0, [sp, #40]
    d3b4:	ldrb	w0, [x0, #8]
    d3b8:	cmp	w0, #0x17
    d3bc:	b.eq	d288 <regfree+0x48c0>  // b.none
    d3c0:	ldr	x0, [sp, #104]
    d3c4:	ldp	x29, x30, [sp], #112
    d3c8:	ret
    d3cc:	nop
	...
    d3f8:	stp	x29, x30, [sp, #-96]!
    d3fc:	mov	x29, sp
    d400:	str	x0, [sp, #56]
    d404:	str	x1, [sp, #48]
    d408:	str	x2, [sp, #40]
    d40c:	str	x3, [sp, #32]
    d410:	str	w4, [sp, #28]
    d414:	str	x5, [sp, #16]
    d418:	ldr	x0, [sp, #48]
    d41c:	ldr	x0, [x0]
    d420:	str	x0, [sp, #80]
    d424:	ldr	x0, [sp, #48]
    d428:	ldr	x0, [x0, #48]
    d42c:	add	x2, x0, #0x1
    d430:	ldr	x1, [sp, #48]
    d434:	str	x2, [x1, #48]
    d438:	str	x0, [sp, #72]
    d43c:	ldr	x0, [sp, #32]
    d440:	orr	x0, x0, #0x800000
    d444:	mov	x2, x0
    d448:	ldr	x1, [sp, #56]
    d44c:	ldr	x0, [sp, #40]
    d450:	bl	b6b8 <regfree+0x2cf0>
    d454:	ldr	x0, [sp, #40]
    d458:	ldrb	w0, [x0, #8]
    d45c:	cmp	w0, #0x9
    d460:	b.ne	d46c <regfree+0x4aa4>  // b.any
    d464:	str	xzr, [sp, #88]
    d468:	b	d524 <regfree+0x4b5c>
    d46c:	ldr	x5, [sp, #16]
    d470:	ldr	w4, [sp, #28]
    d474:	ldr	x3, [sp, #32]
    d478:	ldr	x2, [sp, #40]
    d47c:	ldr	x1, [sp, #48]
    d480:	ldr	x0, [sp, #56]
    d484:	bl	c574 <regfree+0x3bac>
    d488:	str	x0, [sp, #88]
    d48c:	ldr	x0, [sp, #16]
    d490:	ldr	w0, [x0]
    d494:	cmp	w0, #0x0
    d498:	cset	w0, eq  // eq = none
    d49c:	and	w0, w0, #0xff
    d4a0:	and	x0, x0, #0xff
    d4a4:	cmp	x0, #0x0
    d4a8:	b.eq	d4fc <regfree+0x4b34>  // b.none
    d4ac:	ldr	x0, [sp, #40]
    d4b0:	ldrb	w0, [x0, #8]
    d4b4:	cmp	w0, #0x9
    d4b8:	cset	w0, ne  // ne = any
    d4bc:	and	w0, w0, #0xff
    d4c0:	and	x0, x0, #0xff
    d4c4:	cmp	x0, #0x0
    d4c8:	b.eq	d4fc <regfree+0x4b34>  // b.none
    d4cc:	ldr	x0, [sp, #88]
    d4d0:	cmp	x0, #0x0
    d4d4:	b.eq	d4f0 <regfree+0x4b28>  // b.none
    d4d8:	mov	x2, #0x0                   	// #0
    d4dc:	adrp	x0, 0 <grub_mod_init-0x450>
    d4e0:	add	x0, x0, #0x0
    d4e4:	ldr	x1, [x0]
    d4e8:	ldr	x0, [sp, #88]
    d4ec:	bl	9f00 <regfree+0x1538>
    d4f0:	ldr	x0, [sp, #16]
    d4f4:	mov	w1, #0x8                   	// #8
    d4f8:	str	w1, [x0]
    d4fc:	ldr	x0, [sp, #16]
    d500:	ldr	w0, [x0]
    d504:	cmp	w0, #0x0
    d508:	cset	w0, ne  // ne = any
    d50c:	and	w0, w0, #0xff
    d510:	and	x0, x0, #0xff
    d514:	cmp	x0, #0x0
    d518:	b.eq	d524 <regfree+0x4b5c>  // b.none
    d51c:	mov	x0, #0x0                   	// #0
    d520:	b	d5b4 <regfree+0x4bec>
    d524:	ldr	x0, [sp, #72]
    d528:	cmp	x0, #0x8
    d52c:	b.hi	d558 <regfree+0x4b90>  // b.pmore
    d530:	ldr	x0, [sp, #80]
    d534:	ldr	x1, [x0, #152]
    d538:	ldr	x0, [sp, #72]
    d53c:	mov	w2, w0
    d540:	mov	w0, #0x1                   	// #1
    d544:	lsl	w0, w0, w2
    d548:	sxtw	x0, w0
    d54c:	orr	x1, x1, x0
    d550:	ldr	x0, [sp, #80]
    d554:	str	x1, [x0, #152]
    d558:	mov	w3, #0x11                  	// #17
    d55c:	mov	x2, #0x0                   	// #0
    d560:	ldr	x1, [sp, #88]
    d564:	ldr	x0, [sp, #80]
    d568:	bl	fd6c <regfree+0x73a4>
    d56c:	str	x0, [sp, #88]
    d570:	ldr	x0, [sp, #88]
    d574:	cmp	x0, #0x0
    d578:	cset	w0, eq  // eq = none
    d57c:	and	w0, w0, #0xff
    d580:	and	x0, x0, #0xff
    d584:	cmp	x0, #0x0
    d588:	b.eq	d5a0 <regfree+0x4bd8>  // b.none
    d58c:	ldr	x0, [sp, #16]
    d590:	mov	w1, #0xc                   	// #12
    d594:	str	w1, [x0]
    d598:	mov	x0, #0x0                   	// #0
    d59c:	b	d5b4 <regfree+0x4bec>
    d5a0:	ldr	x0, [sp, #72]
    d5a4:	mov	w1, w0
    d5a8:	ldr	x0, [sp, #88]
    d5ac:	str	w1, [x0, #40]
    d5b0:	ldr	x0, [sp, #88]
    d5b4:	ldp	x29, x30, [sp], #96
    d5b8:	ret
    d5bc:	nop
	...
    d5c8:	stp	x29, x30, [sp, #-128]!
    d5cc:	mov	x29, sp
    d5d0:	str	x0, [sp, #56]
    d5d4:	str	x1, [sp, #48]
    d5d8:	str	x2, [sp, #40]
    d5dc:	str	x3, [sp, #32]
    d5e0:	str	x4, [sp, #24]
    d5e4:	str	x5, [sp, #16]
    d5e8:	str	xzr, [sp, #120]
    d5ec:	str	xzr, [sp, #112]
    d5f0:	ldr	x0, [sp, #48]
    d5f4:	ldr	w0, [x0, #56]
    d5f8:	str	w0, [sp, #96]
    d5fc:	ldr	x0, [sp, #32]
    d600:	ldp	x0, x1, [x0]
    d604:	stp	x0, x1, [sp, #72]
    d608:	ldr	x0, [sp, #32]
    d60c:	ldrb	w0, [x0, #8]
    d610:	cmp	w0, #0x17
    d614:	b.ne	d880 <regfree+0x4eb8>  // b.any
    d618:	str	wzr, [sp, #100]
    d61c:	ldr	x2, [sp, #24]
    d620:	ldr	x1, [sp, #32]
    d624:	ldr	x0, [sp, #48]
    d628:	bl	fc04 <regfree+0x723c>
    d62c:	str	w0, [sp, #104]
    d630:	ldr	w0, [sp, #104]
    d634:	cmn	w0, #0x1
    d638:	b.ne	d678 <regfree+0x4cb0>  // b.any
    d63c:	ldr	x0, [sp, #32]
    d640:	ldrb	w0, [x0, #8]
    d644:	cmp	w0, #0x1
    d648:	b.ne	d664 <regfree+0x4c9c>  // b.any
    d64c:	ldr	x0, [sp, #32]
    d650:	ldrb	w0, [x0]
    d654:	cmp	w0, #0x2c
    d658:	b.ne	d664 <regfree+0x4c9c>  // b.any
    d65c:	str	wzr, [sp, #104]
    d660:	b	d678 <regfree+0x4cb0>
    d664:	ldr	x0, [sp, #16]
    d668:	mov	w1, #0xa                   	// #10
    d66c:	str	w1, [x0]
    d670:	mov	x0, #0x0                   	// #0
    d674:	b	dbec <regfree+0x5224>
    d678:	ldr	w0, [sp, #104]
    d67c:	cmn	w0, #0x2
    d680:	cset	w0, ne  // ne = any
    d684:	and	w0, w0, #0xff
    d688:	and	x0, x0, #0xff
    d68c:	cmp	x0, #0x0
    d690:	b.eq	d6e8 <regfree+0x4d20>  // b.none
    d694:	ldr	x0, [sp, #32]
    d698:	ldrb	w0, [x0, #8]
    d69c:	cmp	w0, #0x18
    d6a0:	b.eq	d6e0 <regfree+0x4d18>  // b.none
    d6a4:	ldr	x0, [sp, #32]
    d6a8:	ldrb	w0, [x0, #8]
    d6ac:	cmp	w0, #0x1
    d6b0:	b.ne	d6d8 <regfree+0x4d10>  // b.any
    d6b4:	ldr	x0, [sp, #32]
    d6b8:	ldrb	w0, [x0]
    d6bc:	cmp	w0, #0x2c
    d6c0:	b.ne	d6d8 <regfree+0x4d10>  // b.any
    d6c4:	ldr	x2, [sp, #24]
    d6c8:	ldr	x1, [sp, #32]
    d6cc:	ldr	x0, [sp, #48]
    d6d0:	bl	fc04 <regfree+0x723c>
    d6d4:	b	d6e4 <regfree+0x4d1c>
    d6d8:	mov	w0, #0xfffffffe            	// #-2
    d6dc:	b	d6e4 <regfree+0x4d1c>
    d6e0:	ldr	w0, [sp, #104]
    d6e4:	str	w0, [sp, #100]
    d6e8:	ldr	w0, [sp, #104]
    d6ec:	cmn	w0, #0x2
    d6f0:	cset	w0, eq  // eq = none
    d6f4:	and	w0, w0, #0xff
    d6f8:	and	x0, x0, #0xff
    d6fc:	cmp	x0, #0x0
    d700:	b.ne	d720 <regfree+0x4d58>  // b.any
    d704:	ldr	w0, [sp, #100]
    d708:	cmn	w0, #0x2
    d70c:	cset	w0, eq  // eq = none
    d710:	and	w0, w0, #0xff
    d714:	and	x0, x0, #0xff
    d718:	cmp	x0, #0x0
    d71c:	b.eq	d7a0 <regfree+0x4dd8>  // b.none
    d720:	ldr	x0, [sp, #24]
    d724:	and	x0, x0, #0x200000
    d728:	cmp	x0, #0x0
    d72c:	cset	w0, eq  // eq = none
    d730:	and	w0, w0, #0xff
    d734:	and	x0, x0, #0xff
    d738:	cmp	x0, #0x0
    d73c:	b.eq	d774 <regfree+0x4dac>  // b.none
    d740:	ldr	x0, [sp, #32]
    d744:	ldrb	w0, [x0, #8]
    d748:	cmp	w0, #0x2
    d74c:	b.ne	d760 <regfree+0x4d98>  // b.any
    d750:	ldr	x0, [sp, #16]
    d754:	mov	w1, #0x9                   	// #9
    d758:	str	w1, [x0]
    d75c:	b	d76c <regfree+0x4da4>
    d760:	ldr	x0, [sp, #16]
    d764:	mov	w1, #0xa                   	// #10
    d768:	str	w1, [x0]
    d76c:	mov	x0, #0x0                   	// #0
    d770:	b	dbec <regfree+0x5224>
    d774:	ldr	x0, [sp, #48]
    d778:	ldr	w1, [sp, #96]
    d77c:	str	w1, [x0, #56]
    d780:	ldr	x2, [sp, #32]
    d784:	ldp	x0, x1, [sp, #72]
    d788:	stp	x0, x1, [x2]
    d78c:	ldr	x0, [sp, #32]
    d790:	mov	w1, #0x1                   	// #1
    d794:	strb	w1, [x0, #8]
    d798:	ldr	x0, [sp, #56]
    d79c:	b	dbec <regfree+0x5224>
    d7a0:	ldr	w0, [sp, #100]
    d7a4:	cmn	w0, #0x1
    d7a8:	cset	w0, ne  // ne = any
    d7ac:	and	w0, w0, #0xff
    d7b0:	and	x0, x0, #0xff
    d7b4:	cmp	x0, #0x0
    d7b8:	b.eq	d7e4 <regfree+0x4e1c>  // b.none
    d7bc:	ldr	w1, [sp, #104]
    d7c0:	ldr	w0, [sp, #100]
    d7c4:	cmp	w1, w0
    d7c8:	cset	w0, gt
    d7cc:	and	w0, w0, #0xff
    d7d0:	and	x0, x0, #0xff
    d7d4:	cmp	x0, #0x0
    d7d8:	b.eq	d7e4 <regfree+0x4e1c>  // b.none
    d7dc:	mov	w0, #0x1                   	// #1
    d7e0:	b	d7e8 <regfree+0x4e20>
    d7e4:	mov	w0, #0x0                   	// #0
    d7e8:	cmp	w0, #0x0
    d7ec:	b.ne	d810 <regfree+0x4e48>  // b.any
    d7f0:	ldr	x0, [sp, #32]
    d7f4:	ldrb	w0, [x0, #8]
    d7f8:	cmp	w0, #0x18
    d7fc:	cset	w0, ne  // ne = any
    d800:	and	w0, w0, #0xff
    d804:	and	x0, x0, #0xff
    d808:	cmp	x0, #0x0
    d80c:	b.eq	d824 <regfree+0x4e5c>  // b.none
    d810:	ldr	x0, [sp, #16]
    d814:	mov	w1, #0xa                   	// #10
    d818:	str	w1, [x0]
    d81c:	mov	x0, #0x0                   	// #0
    d820:	b	dbec <regfree+0x5224>
    d824:	ldr	w0, [sp, #100]
    d828:	cmn	w0, #0x1
    d82c:	b.ne	d84c <regfree+0x4e84>  // b.any
    d830:	ldr	w1, [sp, #104]
    d834:	mov	w0, #0x7fff                	// #32767
    d838:	cmp	w1, w0
    d83c:	cset	w0, gt
    d840:	and	w0, w0, #0xff
    d844:	sxtw	x0, w0
    d848:	b	d864 <regfree+0x4e9c>
    d84c:	ldr	w1, [sp, #100]
    d850:	mov	w0, #0x7fff                	// #32767
    d854:	cmp	w1, w0
    d858:	cset	w0, gt
    d85c:	and	w0, w0, #0xff
    d860:	sxtw	x0, w0
    d864:	cmp	x0, #0x0
    d868:	b.eq	d8b8 <regfree+0x4ef0>  // b.none
    d86c:	ldr	x0, [sp, #16]
    d870:	mov	w1, #0xf                   	// #15
    d874:	str	w1, [x0]
    d878:	mov	x0, #0x0                   	// #0
    d87c:	b	dbec <regfree+0x5224>
    d880:	ldr	x0, [sp, #32]
    d884:	ldrb	w0, [x0, #8]
    d888:	cmp	w0, #0x12
    d88c:	cset	w0, eq  // eq = none
    d890:	and	w0, w0, #0xff
    d894:	str	w0, [sp, #104]
    d898:	ldr	x0, [sp, #32]
    d89c:	ldrb	w0, [x0, #8]
    d8a0:	cmp	w0, #0x13
    d8a4:	b.ne	d8b0 <regfree+0x4ee8>  // b.any
    d8a8:	mov	w0, #0x1                   	// #1
    d8ac:	b	d8b4 <regfree+0x4eec>
    d8b0:	mov	w0, #0xffffffff            	// #-1
    d8b4:	str	w0, [sp, #100]
    d8b8:	ldr	x2, [sp, #24]
    d8bc:	ldr	x1, [sp, #48]
    d8c0:	ldr	x0, [sp, #32]
    d8c4:	bl	b6b8 <regfree+0x2cf0>
    d8c8:	ldr	x0, [sp, #56]
    d8cc:	cmp	x0, #0x0
    d8d0:	cset	w0, eq  // eq = none
    d8d4:	and	w0, w0, #0xff
    d8d8:	and	x0, x0, #0xff
    d8dc:	cmp	x0, #0x0
    d8e0:	b.eq	d8ec <regfree+0x4f24>  // b.none
    d8e4:	mov	x0, #0x0                   	// #0
    d8e8:	b	dbec <regfree+0x5224>
    d8ec:	ldr	w0, [sp, #104]
    d8f0:	cmp	w0, #0x0
    d8f4:	cset	w0, eq  // eq = none
    d8f8:	and	w0, w0, #0xff
    d8fc:	and	x0, x0, #0xff
    d900:	cmp	x0, #0x0
    d904:	b.eq	d944 <regfree+0x4f7c>  // b.none
    d908:	ldr	w0, [sp, #100]
    d90c:	cmp	w0, #0x0
    d910:	cset	w0, eq  // eq = none
    d914:	and	w0, w0, #0xff
    d918:	and	x0, x0, #0xff
    d91c:	cmp	x0, #0x0
    d920:	b.eq	d944 <regfree+0x4f7c>  // b.none
    d924:	mov	x2, #0x0                   	// #0
    d928:	adrp	x0, 0 <grub_mod_init-0x450>
    d92c:	add	x0, x0, #0x0
    d930:	ldr	x1, [x0]
    d934:	ldr	x0, [sp, #56]
    d938:	bl	9f00 <regfree+0x1538>
    d93c:	mov	x0, #0x0                   	// #0
    d940:	b	dbec <regfree+0x5224>
    d944:	ldr	w0, [sp, #104]
    d948:	cmp	w0, #0x0
    d94c:	cset	w0, gt
    d950:	and	w0, w0, #0xff
    d954:	and	x0, x0, #0xff
    d958:	cmp	x0, #0x0
    d95c:	b.eq	da40 <regfree+0x5078>  // b.none
    d960:	ldr	x0, [sp, #56]
    d964:	str	x0, [sp, #120]
    d968:	mov	w0, #0x2                   	// #2
    d96c:	str	w0, [sp, #108]
    d970:	b	d9e0 <regfree+0x5018>
    d974:	ldr	x1, [sp, #40]
    d978:	ldr	x0, [sp, #56]
    d97c:	bl	10004 <regfree+0x763c>
    d980:	str	x0, [sp, #56]
    d984:	mov	w3, #0x10                  	// #16
    d988:	ldr	x2, [sp, #56]
    d98c:	ldr	x1, [sp, #120]
    d990:	ldr	x0, [sp, #40]
    d994:	bl	fd6c <regfree+0x73a4>
    d998:	str	x0, [sp, #120]
    d99c:	ldr	x0, [sp, #56]
    d9a0:	cmp	x0, #0x0
    d9a4:	cset	w0, eq  // eq = none
    d9a8:	and	w0, w0, #0xff
    d9ac:	and	x0, x0, #0xff
    d9b0:	cmp	x0, #0x0
    d9b4:	b.ne	dbb8 <regfree+0x51f0>  // b.any
    d9b8:	ldr	x0, [sp, #120]
    d9bc:	cmp	x0, #0x0
    d9c0:	cset	w0, eq  // eq = none
    d9c4:	and	w0, w0, #0xff
    d9c8:	and	x0, x0, #0xff
    d9cc:	cmp	x0, #0x0
    d9d0:	b.ne	dbb8 <regfree+0x51f0>  // b.any
    d9d4:	ldr	w0, [sp, #108]
    d9d8:	add	w0, w0, #0x1
    d9dc:	str	w0, [sp, #108]
    d9e0:	ldr	w1, [sp, #108]
    d9e4:	ldr	w0, [sp, #104]
    d9e8:	cmp	w1, w0
    d9ec:	b.le	d974 <regfree+0x4fac>
    d9f0:	ldr	w1, [sp, #104]
    d9f4:	ldr	w0, [sp, #100]
    d9f8:	cmp	w1, w0
    d9fc:	b.ne	da08 <regfree+0x5040>  // b.any
    da00:	ldr	x0, [sp, #120]
    da04:	b	dbec <regfree+0x5224>
    da08:	ldr	x1, [sp, #40]
    da0c:	ldr	x0, [sp, #56]
    da10:	bl	10004 <regfree+0x763c>
    da14:	str	x0, [sp, #56]
    da18:	ldr	x0, [sp, #56]
    da1c:	cmp	x0, #0x0
    da20:	cset	w0, eq  // eq = none
    da24:	and	w0, w0, #0xff
    da28:	and	x0, x0, #0xff
    da2c:	cmp	x0, #0x0
    da30:	b.ne	dbc0 <regfree+0x51f8>  // b.any
    da34:	ldr	x0, [sp, #120]
    da38:	str	x0, [sp, #112]
    da3c:	b	da44 <regfree+0x507c>
    da40:	str	xzr, [sp, #112]
    da44:	ldr	x0, [sp, #56]
    da48:	ldrb	w0, [x0, #48]
    da4c:	cmp	w0, #0x11
    da50:	b.ne	da80 <regfree+0x50b8>  // b.any
    da54:	ldr	x0, [sp, #56]
    da58:	ldr	w0, [x0, #40]
    da5c:	sxtw	x0, w0
    da60:	str	x0, [sp, #88]
    da64:	ldr	x0, [sp, #88]
    da68:	mov	x2, x0
    da6c:	adrp	x0, 0 <grub_mod_init-0x450>
    da70:	add	x0, x0, #0x0
    da74:	ldr	x1, [x0]
    da78:	ldr	x0, [sp, #56]
    da7c:	bl	9f00 <regfree+0x1538>
    da80:	ldr	w0, [sp, #100]
    da84:	cmn	w0, #0x1
    da88:	b.ne	da94 <regfree+0x50cc>  // b.any
    da8c:	mov	w0, #0xb                   	// #11
    da90:	b	da98 <regfree+0x50d0>
    da94:	mov	w0, #0xa                   	// #10
    da98:	mov	w3, w0
    da9c:	mov	x2, #0x0                   	// #0
    daa0:	ldr	x1, [sp, #56]
    daa4:	ldr	x0, [sp, #40]
    daa8:	bl	fd6c <regfree+0x73a4>
    daac:	str	x0, [sp, #120]
    dab0:	ldr	x0, [sp, #120]
    dab4:	cmp	x0, #0x0
    dab8:	cset	w0, eq  // eq = none
    dabc:	and	w0, w0, #0xff
    dac0:	and	x0, x0, #0xff
    dac4:	cmp	x0, #0x0
    dac8:	b.ne	dbc8 <regfree+0x5200>  // b.any
    dacc:	ldr	w0, [sp, #104]
    dad0:	add	w0, w0, #0x2
    dad4:	str	w0, [sp, #108]
    dad8:	b	db7c <regfree+0x51b4>
    dadc:	ldr	x1, [sp, #40]
    dae0:	ldr	x0, [sp, #56]
    dae4:	bl	10004 <regfree+0x763c>
    dae8:	str	x0, [sp, #56]
    daec:	mov	w3, #0x10                  	// #16
    daf0:	ldr	x2, [sp, #56]
    daf4:	ldr	x1, [sp, #120]
    daf8:	ldr	x0, [sp, #40]
    dafc:	bl	fd6c <regfree+0x73a4>
    db00:	str	x0, [sp, #120]
    db04:	ldr	x0, [sp, #56]
    db08:	cmp	x0, #0x0
    db0c:	cset	w0, eq  // eq = none
    db10:	and	w0, w0, #0xff
    db14:	and	x0, x0, #0xff
    db18:	cmp	x0, #0x0
    db1c:	b.ne	dbd0 <regfree+0x5208>  // b.any
    db20:	ldr	x0, [sp, #120]
    db24:	cmp	x0, #0x0
    db28:	cset	w0, eq  // eq = none
    db2c:	and	w0, w0, #0xff
    db30:	and	x0, x0, #0xff
    db34:	cmp	x0, #0x0
    db38:	b.ne	dbd0 <regfree+0x5208>  // b.any
    db3c:	mov	w3, #0xa                   	// #10
    db40:	mov	x2, #0x0                   	// #0
    db44:	ldr	x1, [sp, #120]
    db48:	ldr	x0, [sp, #40]
    db4c:	bl	fd6c <regfree+0x73a4>
    db50:	str	x0, [sp, #120]
    db54:	ldr	x0, [sp, #120]
    db58:	cmp	x0, #0x0
    db5c:	cset	w0, eq  // eq = none
    db60:	and	w0, w0, #0xff
    db64:	and	x0, x0, #0xff
    db68:	cmp	x0, #0x0
    db6c:	b.ne	dbd8 <regfree+0x5210>  // b.any
    db70:	ldr	w0, [sp, #108]
    db74:	add	w0, w0, #0x1
    db78:	str	w0, [sp, #108]
    db7c:	ldr	w1, [sp, #108]
    db80:	ldr	w0, [sp, #100]
    db84:	cmp	w1, w0
    db88:	b.le	dadc <regfree+0x5114>
    db8c:	ldr	x0, [sp, #112]
    db90:	cmp	x0, #0x0
    db94:	b.eq	dbb0 <regfree+0x51e8>  // b.none
    db98:	mov	w3, #0x10                  	// #16
    db9c:	ldr	x2, [sp, #120]
    dba0:	ldr	x1, [sp, #112]
    dba4:	ldr	x0, [sp, #40]
    dba8:	bl	fd6c <regfree+0x73a4>
    dbac:	str	x0, [sp, #120]
    dbb0:	ldr	x0, [sp, #120]
    dbb4:	b	dbec <regfree+0x5224>
    dbb8:	nop
    dbbc:	b	dbdc <regfree+0x5214>
    dbc0:	nop
    dbc4:	b	dbdc <regfree+0x5214>
    dbc8:	nop
    dbcc:	b	dbdc <regfree+0x5214>
    dbd0:	nop
    dbd4:	b	dbdc <regfree+0x5214>
    dbd8:	nop
    dbdc:	ldr	x0, [sp, #16]
    dbe0:	mov	w1, #0xc                   	// #12
    dbe4:	str	w1, [x0]
    dbe8:	mov	x0, #0x0                   	// #0
    dbec:	ldp	x29, x30, [sp], #128
    dbf0:	ret
    dbf4:	nop
	...
    dc08:	stp	x29, x30, [sp, #-32]!
    dc0c:	mov	x29, sp
    dc10:	strb	w0, [sp, #31]
    dc14:	str	x1, [sp, #16]
    dc18:	ldr	x0, [sp, #16]
    dc1c:	cmp	x0, #0x0
    dc20:	b.ne	dc2c <regfree+0x5264>  // b.any
    dc24:	ldrb	w0, [sp, #31]
    dc28:	b	dc34 <regfree+0x526c>
    dc2c:	ldrb	w0, [sp, #31]
    dc30:	bl	26b0 <grub_mod_fini+0x2190>
    dc34:	ldp	x29, x30, [sp], #32
    dc38:	ret
    dc3c:	stp	x29, x30, [sp, #-112]!
    dc40:	mov	x29, sp
    dc44:	str	x0, [sp, #56]
    dc48:	str	x1, [sp, #48]
    dc4c:	str	x2, [sp, #40]
    dc50:	str	x3, [sp, #32]
    dc54:	str	x4, [sp, #24]
    dc58:	str	x5, [sp, #16]
    dc5c:	ldr	x0, [sp, #24]
    dc60:	ldr	w0, [x0]
    dc64:	cmp	w0, #0x2
    dc68:	cset	w0, eq  // eq = none
    dc6c:	and	w0, w0, #0xff
    dc70:	and	x0, x0, #0xff
    dc74:	cmp	x0, #0x0
    dc78:	b.ne	dc9c <regfree+0x52d4>  // b.any
    dc7c:	ldr	x0, [sp, #24]
    dc80:	ldr	w0, [x0]
    dc84:	cmp	w0, #0x4
    dc88:	cset	w0, eq  // eq = none
    dc8c:	and	w0, w0, #0xff
    dc90:	and	x0, x0, #0xff
    dc94:	cmp	x0, #0x0
    dc98:	b.eq	dca4 <regfree+0x52dc>  // b.none
    dc9c:	mov	w0, #0x1                   	// #1
    dca0:	b	dca8 <regfree+0x52e0>
    dca4:	mov	w0, #0x0                   	// #0
    dca8:	cmp	w0, #0x0
    dcac:	b.ne	dcd0 <regfree+0x5308>  // b.any
    dcb0:	ldr	x0, [sp, #16]
    dcb4:	ldr	w0, [x0]
    dcb8:	cmp	w0, #0x2
    dcbc:	cset	w0, eq  // eq = none
    dcc0:	and	w0, w0, #0xff
    dcc4:	and	x0, x0, #0xff
    dcc8:	cmp	x0, #0x0
    dccc:	b.eq	dcd8 <regfree+0x5310>  // b.none
    dcd0:	mov	w0, #0x1                   	// #1
    dcd4:	b	dcdc <regfree+0x5314>
    dcd8:	mov	w0, #0x0                   	// #0
    dcdc:	cmp	w0, #0x0
    dce0:	b.ne	dd04 <regfree+0x533c>  // b.any
    dce4:	ldr	x0, [sp, #16]
    dce8:	ldr	w0, [x0]
    dcec:	cmp	w0, #0x4
    dcf0:	cset	w0, eq  // eq = none
    dcf4:	and	w0, w0, #0xff
    dcf8:	and	x0, x0, #0xff
    dcfc:	cmp	x0, #0x0
    dd00:	b.eq	dd0c <regfree+0x5344>  // b.none
    dd04:	mov	w0, #0xb                   	// #11
    dd08:	b	e0d4 <regfree+0x570c>
    dd0c:	ldr	x0, [sp, #24]
    dd10:	ldr	w0, [x0]
    dd14:	cmp	w0, #0x3
    dd18:	cset	w0, eq  // eq = none
    dd1c:	and	w0, w0, #0xff
    dd20:	and	x0, x0, #0xff
    dd24:	cmp	x0, #0x0
    dd28:	b.eq	dd58 <regfree+0x5390>  // b.none
    dd2c:	ldr	x0, [sp, #24]
    dd30:	ldr	x0, [x0, #8]
    dd34:	bl	22b8 <grub_mod_fini+0x1d98>
    dd38:	cmp	x0, #0x1
    dd3c:	cset	w0, hi  // hi = pmore
    dd40:	and	w0, w0, #0xff
    dd44:	and	x0, x0, #0xff
    dd48:	cmp	x0, #0x0
    dd4c:	b.eq	dd58 <regfree+0x5390>  // b.none
    dd50:	mov	w0, #0x1                   	// #1
    dd54:	b	dd5c <regfree+0x5394>
    dd58:	mov	w0, #0x0                   	// #0
    dd5c:	cmp	w0, #0x0
    dd60:	b.ne	ddbc <regfree+0x53f4>  // b.any
    dd64:	ldr	x0, [sp, #16]
    dd68:	ldr	w0, [x0]
    dd6c:	cmp	w0, #0x3
    dd70:	cset	w0, eq  // eq = none
    dd74:	and	w0, w0, #0xff
    dd78:	and	x0, x0, #0xff
    dd7c:	cmp	x0, #0x0
    dd80:	b.eq	ddb0 <regfree+0x53e8>  // b.none
    dd84:	ldr	x0, [sp, #16]
    dd88:	ldr	x0, [x0, #8]
    dd8c:	bl	22b8 <grub_mod_fini+0x1d98>
    dd90:	cmp	x0, #0x1
    dd94:	cset	w0, hi  // hi = pmore
    dd98:	and	w0, w0, #0xff
    dd9c:	and	x0, x0, #0xff
    dda0:	cmp	x0, #0x0
    dda4:	b.eq	ddb0 <regfree+0x53e8>  // b.none
    dda8:	mov	w0, #0x1                   	// #1
    ddac:	b	ddb4 <regfree+0x53ec>
    ddb0:	mov	w0, #0x0                   	// #0
    ddb4:	cmp	w0, #0x0
    ddb8:	b.eq	ddc4 <regfree+0x53fc>  // b.none
    ddbc:	mov	w0, #0x3                   	// #3
    ddc0:	b	e0d4 <regfree+0x570c>
    ddc4:	ldr	x0, [sp, #24]
    ddc8:	ldr	w0, [x0]
    ddcc:	cmp	w0, #0x0
    ddd0:	b.ne	dde0 <regfree+0x5418>  // b.any
    ddd4:	ldr	x0, [sp, #24]
    ddd8:	ldrb	w0, [x0, #8]
    dddc:	b	de04 <regfree+0x543c>
    dde0:	ldr	x0, [sp, #24]
    dde4:	ldr	w0, [x0]
    dde8:	cmp	w0, #0x3
    ddec:	b.ne	de00 <regfree+0x5438>  // b.any
    ddf0:	ldr	x0, [sp, #24]
    ddf4:	ldr	x0, [x0, #8]
    ddf8:	ldrb	w0, [x0]
    ddfc:	b	de04 <regfree+0x543c>
    de00:	mov	w0, #0x0                   	// #0
    de04:	str	w0, [sp, #104]
    de08:	ldr	x0, [sp, #16]
    de0c:	ldr	w0, [x0]
    de10:	cmp	w0, #0x0
    de14:	b.ne	de24 <regfree+0x545c>  // b.any
    de18:	ldr	x0, [sp, #16]
    de1c:	ldrb	w0, [x0, #8]
    de20:	b	de48 <regfree+0x5480>
    de24:	ldr	x0, [sp, #16]
    de28:	ldr	w0, [x0]
    de2c:	cmp	w0, #0x3
    de30:	b.ne	de44 <regfree+0x547c>  // b.any
    de34:	ldr	x0, [sp, #16]
    de38:	ldr	x0, [x0, #8]
    de3c:	ldrb	w0, [x0]
    de40:	b	de48 <regfree+0x5480>
    de44:	mov	w0, #0x0                   	// #0
    de48:	str	w0, [sp, #100]
    de4c:	ldr	x0, [sp, #24]
    de50:	ldr	w0, [x0]
    de54:	cmp	w0, #0x0
    de58:	b.eq	de6c <regfree+0x54a4>  // b.none
    de5c:	ldr	x0, [sp, #24]
    de60:	ldr	w0, [x0]
    de64:	cmp	w0, #0x3
    de68:	b.ne	de80 <regfree+0x54b8>  // b.any
    de6c:	ldr	w0, [sp, #104]
    de70:	and	w0, w0, #0xff
    de74:	ldr	x1, [sp, #40]
    de78:	bl	dc08 <regfree+0x5240>
    de7c:	b	de88 <regfree+0x54c0>
    de80:	ldr	x0, [sp, #24]
    de84:	ldr	w0, [x0, #8]
    de88:	str	w0, [sp, #96]
    de8c:	ldr	x0, [sp, #16]
    de90:	ldr	w0, [x0]
    de94:	cmp	w0, #0x0
    de98:	b.eq	deac <regfree+0x54e4>  // b.none
    de9c:	ldr	x0, [sp, #16]
    dea0:	ldr	w0, [x0]
    dea4:	cmp	w0, #0x3
    dea8:	b.ne	dec0 <regfree+0x54f8>  // b.any
    deac:	ldr	w0, [sp, #100]
    deb0:	and	w0, w0, #0xff
    deb4:	ldr	x1, [sp, #40]
    deb8:	bl	dc08 <regfree+0x5240>
    debc:	b	dec8 <regfree+0x5500>
    dec0:	ldr	x0, [sp, #16]
    dec4:	ldr	w0, [x0, #8]
    dec8:	str	w0, [sp, #92]
    decc:	ldr	w0, [sp, #96]
    ded0:	cmn	w0, #0x1
    ded4:	b.eq	dee4 <regfree+0x551c>  // b.none
    ded8:	ldr	w0, [sp, #92]
    dedc:	cmn	w0, #0x1
    dee0:	b.ne	deec <regfree+0x5524>  // b.any
    dee4:	mov	w0, #0x3                   	// #3
    dee8:	b	e0d4 <regfree+0x570c>
    deec:	ldr	x0, [sp, #56]
    def0:	and	x0, x0, #0x10000
    def4:	cmp	x0, #0x0
    def8:	cset	w0, ne  // ne = any
    defc:	and	w0, w0, #0xff
    df00:	and	x0, x0, #0xff
    df04:	cmp	x0, #0x0
    df08:	b.eq	df34 <regfree+0x556c>  // b.none
    df0c:	ldr	w1, [sp, #96]
    df10:	ldr	w0, [sp, #92]
    df14:	cmp	w1, w0
    df18:	cset	w0, gt
    df1c:	and	w0, w0, #0xff
    df20:	and	x0, x0, #0xff
    df24:	cmp	x0, #0x0
    df28:	b.eq	df34 <regfree+0x556c>  // b.none
    df2c:	mov	w0, #0xb                   	// #11
    df30:	b	e0d4 <regfree+0x570c>
    df34:	ldr	x0, [sp, #40]
    df38:	cmp	x0, #0x0
    df3c:	b.eq	e084 <regfree+0x56bc>  // b.none
    df40:	ldr	x0, [sp, #32]
    df44:	ldr	w1, [x0]
    df48:	ldr	x0, [sp, #40]
    df4c:	ldr	w0, [x0, #48]
    df50:	cmp	w1, w0
    df54:	cset	w0, eq  // eq = none
    df58:	and	w0, w0, #0xff
    df5c:	and	x0, x0, #0xff
    df60:	cmp	x0, #0x0
    df64:	b.eq	e030 <regfree+0x5668>  // b.none
    df68:	ldr	x0, [sp, #40]
    df6c:	ldr	w0, [x0, #48]
    df70:	lsl	w0, w0, #1
    df74:	add	w0, w0, #0x1
    df78:	str	w0, [sp, #88]
    df7c:	ldr	x0, [sp, #40]
    df80:	ldr	x2, [x0, #8]
    df84:	ldrsw	x0, [sp, #88]
    df88:	lsl	x0, x0, #2
    df8c:	mov	x1, x0
    df90:	mov	x0, x2
    df94:	bl	2294 <grub_mod_fini+0x1d74>
    df98:	str	x0, [sp, #80]
    df9c:	ldr	x0, [sp, #40]
    dfa0:	ldr	x2, [x0, #16]
    dfa4:	ldrsw	x0, [sp, #88]
    dfa8:	lsl	x0, x0, #2
    dfac:	mov	x1, x0
    dfb0:	mov	x0, x2
    dfb4:	bl	2294 <grub_mod_fini+0x1d74>
    dfb8:	str	x0, [sp, #72]
    dfbc:	ldr	x0, [sp, #80]
    dfc0:	cmp	x0, #0x0
    dfc4:	cset	w0, eq  // eq = none
    dfc8:	and	w0, w0, #0xff
    dfcc:	and	x0, x0, #0xff
    dfd0:	cmp	x0, #0x0
    dfd4:	b.ne	dff4 <regfree+0x562c>  // b.any
    dfd8:	ldr	x0, [sp, #72]
    dfdc:	cmp	x0, #0x0
    dfe0:	cset	w0, eq  // eq = none
    dfe4:	and	w0, w0, #0xff
    dfe8:	and	x0, x0, #0xff
    dfec:	cmp	x0, #0x0
    dff0:	b.eq	e00c <regfree+0x5644>  // b.none
    dff4:	ldr	x0, [sp, #80]
    dff8:	bl	2230 <grub_mod_fini+0x1d10>
    dffc:	ldr	x0, [sp, #72]
    e000:	bl	2230 <grub_mod_fini+0x1d10>
    e004:	mov	w0, #0xc                   	// #12
    e008:	b	e0d4 <regfree+0x570c>
    e00c:	ldr	x0, [sp, #40]
    e010:	ldr	x1, [sp, #80]
    e014:	str	x1, [x0, #8]
    e018:	ldr	x0, [sp, #40]
    e01c:	ldr	x1, [sp, #72]
    e020:	str	x1, [x0, #16]
    e024:	ldr	x0, [sp, #32]
    e028:	ldr	w1, [sp, #88]
    e02c:	str	w1, [x0]
    e030:	ldr	x0, [sp, #40]
    e034:	ldr	x1, [x0, #8]
    e038:	ldr	x0, [sp, #40]
    e03c:	ldr	w0, [x0, #48]
    e040:	sxtw	x0, w0
    e044:	lsl	x0, x0, #2
    e048:	add	x0, x1, x0
    e04c:	ldr	w1, [sp, #96]
    e050:	str	w1, [x0]
    e054:	ldr	x0, [sp, #40]
    e058:	ldr	x1, [x0, #16]
    e05c:	ldr	x0, [sp, #40]
    e060:	ldr	w0, [x0, #48]
    e064:	add	w3, w0, #0x1
    e068:	ldr	x2, [sp, #40]
    e06c:	str	w3, [x2, #48]
    e070:	sxtw	x0, w0
    e074:	lsl	x0, x0, #2
    e078:	add	x0, x1, x0
    e07c:	ldr	w1, [sp, #92]
    e080:	str	w1, [x0]
    e084:	str	wzr, [sp, #108]
    e088:	b	e0c4 <regfree+0x56fc>
    e08c:	ldr	w1, [sp, #96]
    e090:	ldr	w0, [sp, #108]
    e094:	cmp	w1, w0
    e098:	b.gt	e0b8 <regfree+0x56f0>
    e09c:	ldr	w1, [sp, #108]
    e0a0:	ldr	w0, [sp, #92]
    e0a4:	cmp	w1, w0
    e0a8:	b.gt	e0b8 <regfree+0x56f0>
    e0ac:	ldr	w1, [sp, #108]
    e0b0:	ldr	x0, [sp, #48]
    e0b4:	bl	29f4 <grub_mod_fini+0x24d4>
    e0b8:	ldr	w0, [sp, #108]
    e0bc:	add	w0, w0, #0x1
    e0c0:	str	w0, [sp, #108]
    e0c4:	ldr	w0, [sp, #108]
    e0c8:	cmp	w0, #0xff
    e0cc:	b.le	e08c <regfree+0x56c4>
    e0d0:	mov	w0, #0x0                   	// #0
    e0d4:	ldp	x29, x30, [sp], #112
    e0d8:	ret
    e0dc:	stp	x29, x30, [sp, #-64]!
    e0e0:	mov	x29, sp
    e0e4:	str	x0, [sp, #40]
    e0e8:	str	x1, [sp, #32]
    e0ec:	str	x2, [sp, #24]
    e0f0:	str	x3, [sp, #16]
    e0f4:	ldr	x0, [sp, #16]
    e0f8:	bl	22b8 <grub_mod_fini+0x1d98>
    e0fc:	str	x0, [sp, #56]
    e100:	ldr	x0, [sp, #56]
    e104:	cmp	x0, #0x1
    e108:	cset	w0, ne  // ne = any
    e10c:	and	w0, w0, #0xff
    e110:	and	x0, x0, #0xff
    e114:	cmp	x0, #0x0
    e118:	b.eq	e124 <regfree+0x575c>  // b.none
    e11c:	mov	w0, #0x3                   	// #3
    e120:	b	e13c <regfree+0x5774>
    e124:	ldr	x0, [sp, #16]
    e128:	ldrb	w0, [x0]
    e12c:	mov	w1, w0
    e130:	ldr	x0, [sp, #40]
    e134:	bl	29f4 <grub_mod_fini+0x24d4>
    e138:	mov	w0, #0x0                   	// #0
    e13c:	ldp	x29, x30, [sp], #64
    e140:	ret
    e144:	stp	x29, x30, [sp, #-288]!
    e148:	mov	x29, sp
    e14c:	str	x0, [sp, #56]
    e150:	str	x1, [sp, #48]
    e154:	str	x2, [sp, #40]
    e158:	str	x3, [sp, #32]
    e15c:	str	x4, [sp, #24]
    e160:	str	wzr, [sp, #188]
    e164:	str	wzr, [sp, #184]
    e168:	str	wzr, [sp, #284]
    e16c:	str	wzr, [sp, #180]
    e170:	str	wzr, [sp, #176]
    e174:	strb	wzr, [sp, #283]
    e178:	mov	w0, #0x1                   	// #1
    e17c:	strb	w0, [sp, #267]
    e180:	mov	x1, #0x1                   	// #1
    e184:	mov	x0, #0x20                  	// #32
    e188:	bl	226c <grub_mod_fini+0x1d4c>
    e18c:	str	x0, [sp, #240]
    e190:	mov	x1, #0x1                   	// #1
    e194:	mov	x0, #0x38                  	// #56
    e198:	bl	226c <grub_mod_fini+0x1d4c>
    e19c:	str	x0, [sp, #232]
    e1a0:	ldr	x0, [sp, #240]
    e1a4:	cmp	x0, #0x0
    e1a8:	cset	w0, eq  // eq = none
    e1ac:	and	w0, w0, #0xff
    e1b0:	and	x0, x0, #0xff
    e1b4:	cmp	x0, #0x0
    e1b8:	b.ne	e1d8 <regfree+0x5810>  // b.any
    e1bc:	ldr	x0, [sp, #232]
    e1c0:	cmp	x0, #0x0
    e1c4:	cset	w0, eq  // eq = none
    e1c8:	and	w0, w0, #0xff
    e1cc:	and	x0, x0, #0xff
    e1d0:	cmp	x0, #0x0
    e1d4:	b.eq	e1fc <regfree+0x5834>  // b.none
    e1d8:	ldr	x0, [sp, #240]
    e1dc:	bl	2230 <grub_mod_fini+0x1d10>
    e1e0:	ldr	x0, [sp, #232]
    e1e4:	bl	2230 <grub_mod_fini+0x1d10>
    e1e8:	ldr	x0, [sp, #24]
    e1ec:	mov	w1, #0xc                   	// #12
    e1f0:	str	w1, [x0]
    e1f4:	mov	x0, #0x0                   	// #0
    e1f8:	b	ea74 <regfree+0x60ac>
    e1fc:	ldr	x2, [sp, #32]
    e200:	ldr	x1, [sp, #56]
    e204:	ldr	x0, [sp, #40]
    e208:	bl	c160 <regfree+0x3798>
    e20c:	str	w0, [sp, #268]
    e210:	ldr	x0, [sp, #40]
    e214:	ldrb	w0, [x0, #8]
    e218:	cmp	w0, #0x2
    e21c:	cset	w0, eq  // eq = none
    e220:	and	w0, w0, #0xff
    e224:	and	x0, x0, #0xff
    e228:	cmp	x0, #0x0
    e22c:	b.eq	e240 <regfree+0x5878>  // b.none
    e230:	ldr	x0, [sp, #24]
    e234:	mov	w1, #0x2                   	// #2
    e238:	str	w1, [x0]
    e23c:	b	ea60 <regfree+0x6098>
    e240:	ldr	x0, [sp, #40]
    e244:	ldrb	w0, [x0, #8]
    e248:	cmp	w0, #0x19
    e24c:	b.ne	e2e0 <regfree+0x5918>  // b.any
    e250:	ldr	x0, [sp, #232]
    e254:	ldrb	w1, [x0, #32]
    e258:	orr	w1, w1, #0x1
    e25c:	strb	w1, [x0, #32]
    e260:	mov	w0, #0x1                   	// #1
    e264:	strb	w0, [sp, #283]
    e268:	ldr	x0, [sp, #32]
    e26c:	and	x0, x0, #0x100
    e270:	cmp	x0, #0x0
    e274:	b.eq	e284 <regfree+0x58bc>  // b.none
    e278:	mov	w1, #0xa                   	// #10
    e27c:	ldr	x0, [sp, #240]
    e280:	bl	29f4 <grub_mod_fini+0x24d4>
    e284:	ldr	x0, [sp, #56]
    e288:	ldr	w1, [x0, #56]
    e28c:	ldr	w0, [sp, #268]
    e290:	add	w1, w1, w0
    e294:	ldr	x0, [sp, #56]
    e298:	str	w1, [x0, #56]
    e29c:	ldr	x2, [sp, #32]
    e2a0:	ldr	x1, [sp, #56]
    e2a4:	ldr	x0, [sp, #40]
    e2a8:	bl	c160 <regfree+0x3798>
    e2ac:	str	w0, [sp, #268]
    e2b0:	ldr	x0, [sp, #40]
    e2b4:	ldrb	w0, [x0, #8]
    e2b8:	cmp	w0, #0x2
    e2bc:	cset	w0, eq  // eq = none
    e2c0:	and	w0, w0, #0xff
    e2c4:	and	x0, x0, #0xff
    e2c8:	cmp	x0, #0x0
    e2cc:	b.eq	e2e0 <regfree+0x5918>  // b.none
    e2d0:	ldr	x0, [sp, #24]
    e2d4:	mov	w1, #0x2                   	// #2
    e2d8:	str	w1, [x0]
    e2dc:	b	ea60 <regfree+0x6098>
    e2e0:	ldr	x0, [sp, #40]
    e2e4:	ldrb	w0, [x0, #8]
    e2e8:	cmp	w0, #0x15
    e2ec:	b.ne	e2fc <regfree+0x5934>  // b.any
    e2f0:	ldr	x0, [sp, #40]
    e2f4:	mov	w1, #0x1                   	// #1
    e2f8:	strb	w1, [x0, #8]
    e2fc:	str	wzr, [sp, #260]
    e300:	strb	wzr, [sp, #259]
    e304:	add	x0, sp, #0x40
    e308:	str	x0, [sp, #168]
    e30c:	mov	w0, #0x3                   	// #3
    e310:	str	w0, [sp, #160]
    e314:	add	x0, sp, #0xa0
    e318:	ldrb	w6, [sp, #267]
    e31c:	ldr	x5, [sp, #32]
    e320:	ldr	x4, [sp, #48]
    e324:	ldr	w3, [sp, #268]
    e328:	ldr	x2, [sp, #40]
    e32c:	ldr	x1, [sp, #56]
    e330:	bl	ea88 <regfree+0x60c0>
    e334:	str	w0, [sp, #228]
    e338:	ldr	w0, [sp, #228]
    e33c:	cmp	w0, #0x0
    e340:	cset	w0, ne  // ne = any
    e344:	and	w0, w0, #0xff
    e348:	and	x0, x0, #0xff
    e34c:	cmp	x0, #0x0
    e350:	b.eq	e364 <regfree+0x599c>  // b.none
    e354:	ldr	x0, [sp, #24]
    e358:	ldr	w1, [sp, #228]
    e35c:	str	w1, [x0]
    e360:	b	ea60 <regfree+0x6098>
    e364:	strb	wzr, [sp, #267]
    e368:	ldr	x2, [sp, #32]
    e36c:	ldr	x1, [sp, #56]
    e370:	ldr	x0, [sp, #40]
    e374:	bl	c160 <regfree+0x3798>
    e378:	str	w0, [sp, #268]
    e37c:	ldr	w0, [sp, #160]
    e380:	cmp	w0, #0x4
    e384:	b.eq	e468 <regfree+0x5aa0>  // b.none
    e388:	ldr	w0, [sp, #160]
    e38c:	cmp	w0, #0x2
    e390:	b.eq	e468 <regfree+0x5aa0>  // b.none
    e394:	ldr	x0, [sp, #40]
    e398:	ldrb	w0, [x0, #8]
    e39c:	cmp	w0, #0x2
    e3a0:	cset	w0, eq  // eq = none
    e3a4:	and	w0, w0, #0xff
    e3a8:	and	x0, x0, #0xff
    e3ac:	cmp	x0, #0x0
    e3b0:	b.eq	e3c4 <regfree+0x59fc>  // b.none
    e3b4:	ldr	x0, [sp, #24]
    e3b8:	mov	w1, #0x7                   	// #7
    e3bc:	str	w1, [x0]
    e3c0:	b	ea60 <regfree+0x6098>
    e3c4:	ldr	x0, [sp, #40]
    e3c8:	ldrb	w0, [x0, #8]
    e3cc:	cmp	w0, #0x16
    e3d0:	b.ne	e468 <regfree+0x5aa0>  // b.any
    e3d4:	ldr	x0, [sp, #56]
    e3d8:	ldr	w1, [x0, #56]
    e3dc:	ldr	w0, [sp, #268]
    e3e0:	add	w1, w1, w0
    e3e4:	ldr	x0, [sp, #56]
    e3e8:	str	w1, [x0, #56]
    e3ec:	add	x0, sp, #0x80
    e3f0:	ldr	x2, [sp, #32]
    e3f4:	ldr	x1, [sp, #56]
    e3f8:	bl	c160 <regfree+0x3798>
    e3fc:	str	w0, [sp, #260]
    e400:	ldrb	w0, [sp, #136]
    e404:	cmp	w0, #0x2
    e408:	cset	w0, eq  // eq = none
    e40c:	and	w0, w0, #0xff
    e410:	and	x0, x0, #0xff
    e414:	cmp	x0, #0x0
    e418:	b.eq	e42c <regfree+0x5a64>  // b.none
    e41c:	ldr	x0, [sp, #24]
    e420:	mov	w1, #0x7                   	// #7
    e424:	str	w1, [x0]
    e428:	b	ea60 <regfree+0x6098>
    e42c:	ldrb	w0, [sp, #136]
    e430:	cmp	w0, #0x15
    e434:	b.ne	e460 <regfree+0x5a98>  // b.any
    e438:	ldr	x0, [sp, #56]
    e43c:	ldr	w1, [x0, #56]
    e440:	ldr	w0, [sp, #268]
    e444:	sub	w1, w1, w0
    e448:	ldr	x0, [sp, #56]
    e44c:	str	w1, [x0, #56]
    e450:	ldr	x0, [sp, #40]
    e454:	mov	w1, #0x1                   	// #1
    e458:	strb	w1, [x0, #8]
    e45c:	b	e468 <regfree+0x5aa0>
    e460:	mov	w0, #0x1                   	// #1
    e464:	strb	w0, [sp, #259]
    e468:	ldrb	w0, [sp, #259]
    e46c:	cmp	w0, #0x0
    e470:	b.eq	e560 <regfree+0x5b98>  // b.none
    e474:	add	x0, sp, #0x60
    e478:	str	x0, [sp, #152]
    e47c:	mov	w0, #0x3                   	// #3
    e480:	str	w0, [sp, #144]
    e484:	add	x1, sp, #0x80
    e488:	add	x0, sp, #0x90
    e48c:	mov	w6, #0x1                   	// #1
    e490:	ldr	x5, [sp, #32]
    e494:	ldr	x4, [sp, #48]
    e498:	ldr	w3, [sp, #260]
    e49c:	mov	x2, x1
    e4a0:	ldr	x1, [sp, #56]
    e4a4:	bl	ea88 <regfree+0x60c0>
    e4a8:	str	w0, [sp, #228]
    e4ac:	ldr	w0, [sp, #228]
    e4b0:	cmp	w0, #0x0
    e4b4:	cset	w0, ne  // ne = any
    e4b8:	and	w0, w0, #0xff
    e4bc:	and	x0, x0, #0xff
    e4c0:	cmp	x0, #0x0
    e4c4:	b.eq	e4d8 <regfree+0x5b10>  // b.none
    e4c8:	ldr	x0, [sp, #24]
    e4cc:	ldr	w1, [sp, #228]
    e4d0:	str	w1, [x0]
    e4d4:	b	ea60 <regfree+0x6098>
    e4d8:	ldr	x2, [sp, #32]
    e4dc:	ldr	x1, [sp, #56]
    e4e0:	ldr	x0, [sp, #40]
    e4e4:	bl	c160 <regfree+0x3798>
    e4e8:	str	w0, [sp, #268]
    e4ec:	ldr	x0, [sp, #48]
    e4f0:	ldr	w0, [x0, #164]
    e4f4:	cmp	w0, #0x1
    e4f8:	b.le	e504 <regfree+0x5b3c>
    e4fc:	ldr	x0, [sp, #232]
    e500:	b	e508 <regfree+0x5b40>
    e504:	mov	x0, #0x0                   	// #0
    e508:	add	x3, sp, #0x90
    e50c:	add	x2, sp, #0xa0
    e510:	add	x1, sp, #0xb8
    e514:	mov	x5, x3
    e518:	mov	x4, x2
    e51c:	mov	x3, x1
    e520:	mov	x2, x0
    e524:	ldr	x1, [sp, #240]
    e528:	ldr	x0, [sp, #32]
    e52c:	bl	dc3c <regfree+0x5274>
    e530:	mov	w1, w0
    e534:	ldr	x0, [sp, #24]
    e538:	str	w1, [x0]
    e53c:	ldr	x0, [sp, #24]
    e540:	ldr	w0, [x0]
    e544:	cmp	w0, #0x0
    e548:	cset	w0, ne  // ne = any
    e54c:	and	w0, w0, #0xff
    e550:	and	x0, x0, #0xff
    e554:	cmp	x0, #0x0
    e558:	b.eq	e790 <regfree+0x5dc8>  // b.none
    e55c:	b	ea60 <regfree+0x6098>
    e560:	ldr	w0, [sp, #160]
    e564:	cmp	w0, #0x4
    e568:	b.eq	e708 <regfree+0x5d40>  // b.none
    e56c:	cmp	w0, #0x4
    e570:	b.hi	e760 <regfree+0x5d98>  // b.pmore
    e574:	cmp	w0, #0x3
    e578:	b.eq	e6bc <regfree+0x5cf4>  // b.none
    e57c:	cmp	w0, #0x3
    e580:	b.hi	e760 <regfree+0x5d98>  // b.pmore
    e584:	cmp	w0, #0x2
    e588:	b.eq	e670 <regfree+0x5ca8>  // b.none
    e58c:	cmp	w0, #0x2
    e590:	b.hi	e760 <regfree+0x5d98>  // b.pmore
    e594:	cmp	w0, #0x0
    e598:	b.eq	e5a8 <regfree+0x5be0>  // b.none
    e59c:	cmp	w0, #0x1
    e5a0:	b.eq	e5bc <regfree+0x5bf4>  // b.none
    e5a4:	b	e760 <regfree+0x5d98>
    e5a8:	ldrb	w0, [sp, #168]
    e5ac:	mov	w1, w0
    e5b0:	ldr	x0, [sp, #240]
    e5b4:	bl	29f4 <grub_mod_fini+0x24d4>
    e5b8:	b	e790 <regfree+0x5dc8>
    e5bc:	ldr	x0, [sp, #232]
    e5c0:	ldr	w0, [x0, #36]
    e5c4:	ldr	w1, [sp, #284]
    e5c8:	cmp	w1, w0
    e5cc:	cset	w0, eq  // eq = none
    e5d0:	and	w0, w0, #0xff
    e5d4:	and	x0, x0, #0xff
    e5d8:	cmp	x0, #0x0
    e5dc:	b.eq	e63c <regfree+0x5c74>  // b.none
    e5e0:	ldr	x0, [sp, #232]
    e5e4:	ldr	w0, [x0, #36]
    e5e8:	lsl	w0, w0, #1
    e5ec:	add	w0, w0, #0x1
    e5f0:	str	w0, [sp, #284]
    e5f4:	ldr	x0, [sp, #232]
    e5f8:	ldr	x2, [x0]
    e5fc:	ldrsw	x0, [sp, #284]
    e600:	lsl	x0, x0, #2
    e604:	mov	x1, x0
    e608:	mov	x0, x2
    e60c:	bl	2294 <grub_mod_fini+0x1d74>
    e610:	str	x0, [sp, #216]
    e614:	ldr	x0, [sp, #216]
    e618:	cmp	x0, #0x0
    e61c:	cset	w0, eq  // eq = none
    e620:	and	w0, w0, #0xff
    e624:	and	x0, x0, #0xff
    e628:	cmp	x0, #0x0
    e62c:	b.ne	ea38 <regfree+0x6070>  // b.any
    e630:	ldr	x0, [sp, #232]
    e634:	ldr	x1, [sp, #216]
    e638:	str	x1, [x0]
    e63c:	ldr	x0, [sp, #232]
    e640:	ldr	x1, [x0]
    e644:	ldr	x0, [sp, #232]
    e648:	ldr	w0, [x0, #36]
    e64c:	add	w3, w0, #0x1
    e650:	ldr	x2, [sp, #232]
    e654:	str	w3, [x2, #36]
    e658:	sxtw	x0, w0
    e65c:	lsl	x0, x0, #2
    e660:	add	x0, x1, x0
    e664:	ldr	w1, [sp, #168]
    e668:	str	w1, [x0]
    e66c:	b	e790 <regfree+0x5dc8>
    e670:	ldr	x1, [sp, #168]
    e674:	add	x0, sp, #0xb4
    e678:	mov	x3, x1
    e67c:	mov	x2, x0
    e680:	ldr	x1, [sp, #232]
    e684:	ldr	x0, [sp, #240]
    e688:	bl	edac <regfree+0x63e4>
    e68c:	mov	w1, w0
    e690:	ldr	x0, [sp, #24]
    e694:	str	w1, [x0]
    e698:	ldr	x0, [sp, #24]
    e69c:	ldr	w0, [x0]
    e6a0:	cmp	w0, #0x0
    e6a4:	cset	w0, ne  // ne = any
    e6a8:	and	w0, w0, #0xff
    e6ac:	and	x0, x0, #0xff
    e6b0:	cmp	x0, #0x0
    e6b4:	b.eq	e77c <regfree+0x5db4>  // b.none
    e6b8:	b	ea60 <regfree+0x6098>
    e6bc:	ldr	x1, [sp, #168]
    e6c0:	add	x0, sp, #0xbc
    e6c4:	mov	x3, x1
    e6c8:	mov	x2, x0
    e6cc:	ldr	x1, [sp, #232]
    e6d0:	ldr	x0, [sp, #240]
    e6d4:	bl	e0dc <regfree+0x5714>
    e6d8:	mov	w1, w0
    e6dc:	ldr	x0, [sp, #24]
    e6e0:	str	w1, [x0]
    e6e4:	ldr	x0, [sp, #24]
    e6e8:	ldr	w0, [x0]
    e6ec:	cmp	w0, #0x0
    e6f0:	cset	w0, ne  // ne = any
    e6f4:	and	w0, w0, #0xff
    e6f8:	and	x0, x0, #0xff
    e6fc:	cmp	x0, #0x0
    e700:	b.eq	e784 <regfree+0x5dbc>  // b.none
    e704:	b	ea60 <regfree+0x6098>
    e708:	ldr	x0, [sp, #56]
    e70c:	ldr	x0, [x0, #80]
    e710:	ldr	x2, [sp, #168]
    e714:	add	x1, sp, #0xb0
    e718:	ldr	x5, [sp, #32]
    e71c:	mov	x4, x2
    e720:	mov	x3, x1
    e724:	ldr	x2, [sp, #232]
    e728:	ldr	x1, [sp, #240]
    e72c:	bl	ee0c <regfree+0x6444>
    e730:	mov	w1, w0
    e734:	ldr	x0, [sp, #24]
    e738:	str	w1, [x0]
    e73c:	ldr	x0, [sp, #24]
    e740:	ldr	w0, [x0]
    e744:	cmp	w0, #0x0
    e748:	cset	w0, ne  // ne = any
    e74c:	and	w0, w0, #0xff
    e750:	and	x0, x0, #0xff
    e754:	cmp	x0, #0x0
    e758:	b.eq	e78c <regfree+0x5dc4>  // b.none
    e75c:	b	ea60 <regfree+0x6098>
    e760:	mov	w2, #0x0                   	// #0
    e764:	mov	w1, #0xced                 	// #3309
    e768:	adrp	x0, 0 <grub_mod_init-0x450>
    e76c:	add	x0, x0, #0x0
    e770:	ldr	x0, [x0]
    e774:	bl	1fc8 <grub_mod_fini+0x1aa8>
    e778:	b	e790 <regfree+0x5dc8>
    e77c:	nop
    e780:	b	e790 <regfree+0x5dc8>
    e784:	nop
    e788:	b	e790 <regfree+0x5dc8>
    e78c:	nop
    e790:	ldr	x0, [sp, #40]
    e794:	ldrb	w0, [x0, #8]
    e798:	cmp	w0, #0x2
    e79c:	cset	w0, eq  // eq = none
    e7a0:	and	w0, w0, #0xff
    e7a4:	and	x0, x0, #0xff
    e7a8:	cmp	x0, #0x0
    e7ac:	b.eq	e7c0 <regfree+0x5df8>  // b.none
    e7b0:	ldr	x0, [sp, #24]
    e7b4:	mov	w1, #0x7                   	// #7
    e7b8:	str	w1, [x0]
    e7bc:	b	ea60 <regfree+0x6098>
    e7c0:	ldr	x0, [sp, #40]
    e7c4:	ldrb	w0, [x0, #8]
    e7c8:	cmp	w0, #0x15
    e7cc:	b.ne	e2fc <regfree+0x5934>  // b.any
    e7d0:	ldr	x0, [sp, #56]
    e7d4:	ldr	w1, [x0, #56]
    e7d8:	ldr	w0, [sp, #268]
    e7dc:	add	w1, w1, w0
    e7e0:	ldr	x0, [sp, #56]
    e7e4:	str	w1, [x0, #56]
    e7e8:	ldrb	w0, [sp, #283]
    e7ec:	cmp	w0, #0x0
    e7f0:	b.ne	e7f8 <regfree+0x5e30>  // b.any
    e7f4:	b	e800 <regfree+0x5e38>
    e7f8:	ldr	x0, [sp, #240]
    e7fc:	bl	2bc8 <grub_mod_fini+0x26a8>
    e800:	ldr	x0, [sp, #48]
    e804:	ldr	w0, [x0, #164]
    e808:	cmp	w0, #0x1
    e80c:	b.le	e824 <regfree+0x5e5c>
    e810:	ldr	x0, [sp, #48]
    e814:	ldr	x0, [x0, #120]
    e818:	mov	x1, x0
    e81c:	ldr	x0, [sp, #240]
    e820:	bl	2ca8 <grub_mod_fini+0x2788>
    e824:	ldr	x0, [sp, #232]
    e828:	ldr	w0, [x0, #36]
    e82c:	cmp	w0, #0x0
    e830:	b.ne	e89c <regfree+0x5ed4>  // b.any
    e834:	ldr	x0, [sp, #232]
    e838:	ldr	w0, [x0, #40]
    e83c:	cmp	w0, #0x0
    e840:	b.ne	e89c <regfree+0x5ed4>  // b.any
    e844:	ldr	x0, [sp, #232]
    e848:	ldr	w0, [x0, #44]
    e84c:	cmp	w0, #0x0
    e850:	b.ne	e89c <regfree+0x5ed4>  // b.any
    e854:	ldr	x0, [sp, #232]
    e858:	ldr	w0, [x0, #48]
    e85c:	cmp	w0, #0x0
    e860:	b.ne	e89c <regfree+0x5ed4>  // b.any
    e864:	ldr	x0, [sp, #48]
    e868:	ldr	w0, [x0, #164]
    e86c:	cmp	w0, #0x1
    e870:	b.le	e9d8 <regfree+0x6010>
    e874:	ldr	x0, [sp, #232]
    e878:	ldr	w0, [x0, #52]
    e87c:	cmp	w0, #0x0
    e880:	b.ne	e89c <regfree+0x5ed4>  // b.any
    e884:	ldr	x0, [sp, #232]
    e888:	ldrb	w0, [x0, #32]
    e88c:	and	w0, w0, #0x1
    e890:	and	w0, w0, #0xff
    e894:	cmp	w0, #0x0
    e898:	b.eq	e9d8 <regfree+0x6010>  // b.none
    e89c:	ldr	x0, [sp, #48]
    e8a0:	ldrb	w1, [x0, #160]
    e8a4:	orr	w1, w1, #0x2
    e8a8:	strb	w1, [x0, #160]
    e8ac:	mov	w0, #0x6                   	// #6
    e8b0:	strb	w0, [sp, #200]
    e8b4:	ldr	x0, [sp, #232]
    e8b8:	str	x0, [sp, #192]
    e8bc:	add	x0, sp, #0xc0
    e8c0:	mov	x3, x0
    e8c4:	mov	x2, #0x0                   	// #0
    e8c8:	mov	x1, #0x0                   	// #0
    e8cc:	ldr	x0, [sp, #48]
    e8d0:	bl	fdb0 <regfree+0x73e8>
    e8d4:	str	x0, [sp, #208]
    e8d8:	ldr	x0, [sp, #208]
    e8dc:	cmp	x0, #0x0
    e8e0:	cset	w0, eq  // eq = none
    e8e4:	and	w0, w0, #0xff
    e8e8:	and	x0, x0, #0xff
    e8ec:	cmp	x0, #0x0
    e8f0:	b.ne	ea40 <regfree+0x6078>  // b.any
    e8f4:	str	wzr, [sp, #252]
    e8f8:	b	e924 <regfree+0x5f5c>
    e8fc:	ldrsw	x0, [sp, #252]
    e900:	lsl	x0, x0, #3
    e904:	ldr	x1, [sp, #240]
    e908:	add	x0, x1, x0
    e90c:	ldr	x0, [x0]
    e910:	cmp	x0, #0x0
    e914:	b.ne	e934 <regfree+0x5f6c>  // b.any
    e918:	ldr	w0, [sp, #252]
    e91c:	add	w0, w0, #0x1
    e920:	str	w0, [sp, #252]
    e924:	ldr	w0, [sp, #252]
    e928:	cmp	w0, #0x3
    e92c:	b.le	e8fc <regfree+0x5f34>
    e930:	b	e938 <regfree+0x5f70>
    e934:	nop
    e938:	ldr	w0, [sp, #252]
    e93c:	cmp	w0, #0x3
    e940:	b.gt	e9c4 <regfree+0x5ffc>
    e944:	mov	w0, #0x3                   	// #3
    e948:	strb	w0, [sp, #200]
    e94c:	ldr	x0, [sp, #240]
    e950:	str	x0, [sp, #192]
    e954:	add	x0, sp, #0xc0
    e958:	mov	x3, x0
    e95c:	mov	x2, #0x0                   	// #0
    e960:	mov	x1, #0x0                   	// #0
    e964:	ldr	x0, [sp, #48]
    e968:	bl	fdb0 <regfree+0x73e8>
    e96c:	str	x0, [sp, #272]
    e970:	ldr	x0, [sp, #272]
    e974:	cmp	x0, #0x0
    e978:	cset	w0, eq  // eq = none
    e97c:	and	w0, w0, #0xff
    e980:	and	x0, x0, #0xff
    e984:	cmp	x0, #0x0
    e988:	b.ne	ea48 <regfree+0x6080>  // b.any
    e98c:	mov	w3, #0xa                   	// #10
    e990:	ldr	x2, [sp, #208]
    e994:	ldr	x1, [sp, #272]
    e998:	ldr	x0, [sp, #48]
    e99c:	bl	fd6c <regfree+0x73a4>
    e9a0:	str	x0, [sp, #272]
    e9a4:	ldr	x0, [sp, #272]
    e9a8:	cmp	x0, #0x0
    e9ac:	cset	w0, eq  // eq = none
    e9b0:	and	w0, w0, #0xff
    e9b4:	and	x0, x0, #0xff
    e9b8:	cmp	x0, #0x0
    e9bc:	b.eq	ea2c <regfree+0x6064>  // b.none
    e9c0:	b	ea54 <regfree+0x608c>
    e9c4:	ldr	x0, [sp, #240]
    e9c8:	bl	2230 <grub_mod_fini+0x1d10>
    e9cc:	ldr	x0, [sp, #208]
    e9d0:	str	x0, [sp, #272]
    e9d4:	b	ea2c <regfree+0x6064>
    e9d8:	ldr	x0, [sp, #232]
    e9dc:	bl	fd1c <regfree+0x7354>
    e9e0:	mov	w0, #0x3                   	// #3
    e9e4:	strb	w0, [sp, #200]
    e9e8:	ldr	x0, [sp, #240]
    e9ec:	str	x0, [sp, #192]
    e9f0:	add	x0, sp, #0xc0
    e9f4:	mov	x3, x0
    e9f8:	mov	x2, #0x0                   	// #0
    e9fc:	mov	x1, #0x0                   	// #0
    ea00:	ldr	x0, [sp, #48]
    ea04:	bl	fdb0 <regfree+0x73e8>
    ea08:	str	x0, [sp, #272]
    ea0c:	ldr	x0, [sp, #272]
    ea10:	cmp	x0, #0x0
    ea14:	cset	w0, eq  // eq = none
    ea18:	and	w0, w0, #0xff
    ea1c:	and	x0, x0, #0xff
    ea20:	cmp	x0, #0x0
    ea24:	b.ne	ea50 <regfree+0x6088>  // b.any
    ea28:	b	ea30 <regfree+0x6068>
    ea2c:	nop
    ea30:	ldr	x0, [sp, #272]
    ea34:	b	ea74 <regfree+0x60ac>
    ea38:	nop
    ea3c:	b	ea54 <regfree+0x608c>
    ea40:	nop
    ea44:	b	ea54 <regfree+0x608c>
    ea48:	nop
    ea4c:	b	ea54 <regfree+0x608c>
    ea50:	nop
    ea54:	ldr	x0, [sp, #24]
    ea58:	mov	w1, #0xc                   	// #12
    ea5c:	str	w1, [x0]
    ea60:	ldr	x0, [sp, #240]
    ea64:	bl	2230 <grub_mod_fini+0x1d10>
    ea68:	ldr	x0, [sp, #232]
    ea6c:	bl	fd1c <regfree+0x7354>
    ea70:	mov	x0, #0x0                   	// #0
    ea74:	ldp	x29, x30, [sp], #288
    ea78:	ret
    ea7c:	nop
	...
    ea88:	stp	x29, x30, [sp, #-96]!
    ea8c:	mov	x29, sp
    ea90:	str	x0, [sp, #56]
    ea94:	str	x1, [sp, #48]
    ea98:	str	x2, [sp, #40]
    ea9c:	str	w3, [sp, #36]
    eaa0:	str	x4, [sp, #24]
    eaa4:	str	x5, [sp, #16]
    eaa8:	strb	w6, [sp, #35]
    eaac:	ldr	x0, [sp, #48]
    eab0:	ldr	w0, [x0, #56]
    eab4:	mov	w1, w0
    eab8:	ldr	x0, [sp, #48]
    eabc:	bl	2d24 <grub_mod_fini+0x2804>
    eac0:	str	w0, [sp, #92]
    eac4:	ldr	w0, [sp, #92]
    eac8:	cmp	w0, #0x1
    eacc:	b.le	eb1c <regfree+0x6154>
    ead0:	ldr	x0, [sp, #56]
    ead4:	mov	w1, #0x1                   	// #1
    ead8:	str	w1, [x0]
    eadc:	ldr	x0, [sp, #48]
    eae0:	ldr	w0, [x0, #56]
    eae4:	mov	w1, w0
    eae8:	ldr	x0, [sp, #48]
    eaec:	bl	2dbc <grub_mod_fini+0x289c>
    eaf0:	mov	w1, w0
    eaf4:	ldr	x0, [sp, #56]
    eaf8:	str	w1, [x0, #8]
    eafc:	ldr	x0, [sp, #48]
    eb00:	ldr	w1, [x0, #56]
    eb04:	ldr	w0, [sp, #92]
    eb08:	add	w1, w1, w0
    eb0c:	ldr	x0, [sp, #48]
    eb10:	str	w1, [x0, #56]
    eb14:	mov	w0, #0x0                   	// #0
    eb18:	b	ebec <regfree+0x6224>
    eb1c:	ldr	x0, [sp, #48]
    eb20:	ldr	w1, [x0, #56]
    eb24:	ldr	w0, [sp, #36]
    eb28:	add	w1, w1, w0
    eb2c:	ldr	x0, [sp, #48]
    eb30:	str	w1, [x0, #56]
    eb34:	ldr	x0, [sp, #40]
    eb38:	ldrb	w0, [x0, #8]
    eb3c:	cmp	w0, #0x1a
    eb40:	b.eq	eb64 <regfree+0x619c>  // b.none
    eb44:	ldr	x0, [sp, #40]
    eb48:	ldrb	w0, [x0, #8]
    eb4c:	cmp	w0, #0x1e
    eb50:	b.eq	eb64 <regfree+0x619c>  // b.none
    eb54:	ldr	x0, [sp, #40]
    eb58:	ldrb	w0, [x0, #8]
    eb5c:	cmp	w0, #0x1c
    eb60:	b.ne	eb78 <regfree+0x61b0>  // b.any
    eb64:	ldr	x2, [sp, #40]
    eb68:	ldr	x1, [sp, #48]
    eb6c:	ldr	x0, [sp, #56]
    eb70:	bl	ebf4 <regfree+0x622c>
    eb74:	b	ebec <regfree+0x6224>
    eb78:	ldr	x0, [sp, #40]
    eb7c:	ldrb	w0, [x0, #8]
    eb80:	cmp	w0, #0x16
    eb84:	cset	w0, eq  // eq = none
    eb88:	and	w0, w0, #0xff
    eb8c:	and	x0, x0, #0xff
    eb90:	cmp	x0, #0x0
    eb94:	b.eq	ebd0 <regfree+0x6208>  // b.none
    eb98:	ldrb	w0, [sp, #35]
    eb9c:	eor	w0, w0, #0x1
    eba0:	and	w0, w0, #0xff
    eba4:	cmp	w0, #0x0
    eba8:	b.eq	ebd0 <regfree+0x6208>  // b.none
    ebac:	add	x0, sp, #0x48
    ebb0:	ldr	x2, [sp, #16]
    ebb4:	ldr	x1, [sp, #48]
    ebb8:	bl	c160 <regfree+0x3798>
    ebbc:	ldrb	w0, [sp, #80]
    ebc0:	cmp	w0, #0x15
    ebc4:	b.eq	ebd0 <regfree+0x6208>  // b.none
    ebc8:	mov	w0, #0xb                   	// #11
    ebcc:	b	ebec <regfree+0x6224>
    ebd0:	ldr	x0, [sp, #56]
    ebd4:	str	wzr, [x0]
    ebd8:	ldr	x0, [sp, #40]
    ebdc:	ldrb	w1, [x0]
    ebe0:	ldr	x0, [sp, #56]
    ebe4:	strb	w1, [x0, #8]
    ebe8:	mov	w0, #0x0                   	// #0
    ebec:	ldp	x29, x30, [sp], #96
    ebf0:	ret
    ebf4:	stp	x29, x30, [sp, #-64]!
    ebf8:	mov	x29, sp
    ebfc:	str	x0, [sp, #40]
    ec00:	str	x1, [sp, #32]
    ec04:	str	x2, [sp, #24]
    ec08:	ldr	x0, [sp, #24]
    ec0c:	ldrb	w0, [x0]
    ec10:	strb	w0, [sp, #55]
    ec14:	str	wzr, [sp, #56]
    ec18:	ldr	x0, [sp, #32]
    ec1c:	ldr	w1, [x0, #72]
    ec20:	ldr	x0, [sp, #32]
    ec24:	ldr	w0, [x0, #56]
    ec28:	cmp	w1, w0
    ec2c:	b.gt	ec38 <regfree+0x6270>
    ec30:	mov	w0, #0x7                   	// #7
    ec34:	b	eda4 <regfree+0x63dc>
    ec38:	ldr	w0, [sp, #56]
    ec3c:	cmp	w0, #0x1f
    ec40:	b.le	ec4c <regfree+0x6284>
    ec44:	mov	w0, #0x7                   	// #7
    ec48:	b	eda4 <regfree+0x63dc>
    ec4c:	ldr	x0, [sp, #24]
    ec50:	ldrb	w0, [x0, #8]
    ec54:	cmp	w0, #0x1e
    ec58:	b.ne	ec6c <regfree+0x62a4>  // b.any
    ec5c:	ldr	x0, [sp, #32]
    ec60:	bl	542c <grub_mod_fini+0x4f0c>
    ec64:	strb	w0, [sp, #63]
    ec68:	b	ec98 <regfree+0x62d0>
    ec6c:	ldr	x0, [sp, #32]
    ec70:	ldr	x1, [x0, #8]
    ec74:	ldr	x0, [sp, #32]
    ec78:	ldr	w0, [x0, #56]
    ec7c:	add	w3, w0, #0x1
    ec80:	ldr	x2, [sp, #32]
    ec84:	str	w3, [x2, #56]
    ec88:	sxtw	x0, w0
    ec8c:	add	x0, x1, x0
    ec90:	ldrb	w0, [x0]
    ec94:	strb	w0, [sp, #63]
    ec98:	ldr	x0, [sp, #32]
    ec9c:	ldr	w1, [x0, #72]
    eca0:	ldr	x0, [sp, #32]
    eca4:	ldr	w0, [x0, #56]
    eca8:	cmp	w1, w0
    ecac:	b.gt	ecb8 <regfree+0x62f0>
    ecb0:	mov	w0, #0x7                   	// #7
    ecb4:	b	eda4 <regfree+0x63dc>
    ecb8:	ldrb	w1, [sp, #63]
    ecbc:	ldrb	w0, [sp, #55]
    ecc0:	cmp	w1, w0
    ecc4:	b.ne	ecec <regfree+0x6324>  // b.any
    ecc8:	ldr	x0, [sp, #32]
    eccc:	ldr	x1, [x0, #8]
    ecd0:	ldr	x0, [sp, #32]
    ecd4:	ldr	w0, [x0, #56]
    ecd8:	sxtw	x0, w0
    ecdc:	add	x0, x1, x0
    ece0:	ldrb	w0, [x0]
    ece4:	cmp	w0, #0x5d
    ece8:	b.eq	ed14 <regfree+0x634c>  // b.none
    ecec:	ldr	x0, [sp, #40]
    ecf0:	ldr	x1, [x0, #8]
    ecf4:	ldrsw	x0, [sp, #56]
    ecf8:	add	x0, x1, x0
    ecfc:	ldrb	w1, [sp, #63]
    ed00:	strb	w1, [x0]
    ed04:	ldr	w0, [sp, #56]
    ed08:	add	w0, w0, #0x1
    ed0c:	str	w0, [sp, #56]
    ed10:	b	ec38 <regfree+0x6270>
    ed14:	nop
    ed18:	ldr	x0, [sp, #32]
    ed1c:	ldr	w0, [x0, #56]
    ed20:	add	w1, w0, #0x1
    ed24:	ldr	x0, [sp, #32]
    ed28:	str	w1, [x0, #56]
    ed2c:	ldr	x0, [sp, #40]
    ed30:	ldr	x1, [x0, #8]
    ed34:	ldrsw	x0, [sp, #56]
    ed38:	add	x0, x1, x0
    ed3c:	strb	wzr, [x0]
    ed40:	ldr	x0, [sp, #24]
    ed44:	ldrb	w0, [x0, #8]
    ed48:	cmp	w0, #0x1e
    ed4c:	b.eq	ed8c <regfree+0x63c4>  // b.none
    ed50:	cmp	w0, #0x1e
    ed54:	b.gt	ed9c <regfree+0x63d4>
    ed58:	cmp	w0, #0x1a
    ed5c:	b.eq	ed6c <regfree+0x63a4>  // b.none
    ed60:	cmp	w0, #0x1c
    ed64:	b.eq	ed7c <regfree+0x63b4>  // b.none
    ed68:	b	ed9c <regfree+0x63d4>
    ed6c:	ldr	x0, [sp, #40]
    ed70:	mov	w1, #0x3                   	// #3
    ed74:	str	w1, [x0]
    ed78:	b	eda0 <regfree+0x63d8>
    ed7c:	ldr	x0, [sp, #40]
    ed80:	mov	w1, #0x2                   	// #2
    ed84:	str	w1, [x0]
    ed88:	b	eda0 <regfree+0x63d8>
    ed8c:	ldr	x0, [sp, #40]
    ed90:	mov	w1, #0x4                   	// #4
    ed94:	str	w1, [x0]
    ed98:	b	eda0 <regfree+0x63d8>
    ed9c:	nop
    eda0:	mov	w0, #0x0                   	// #0
    eda4:	ldp	x29, x30, [sp], #64
    eda8:	ret
    edac:	stp	x29, x30, [sp, #-48]!
    edb0:	mov	x29, sp
    edb4:	str	x0, [sp, #40]
    edb8:	str	x1, [sp, #32]
    edbc:	str	x2, [sp, #24]
    edc0:	str	x3, [sp, #16]
    edc4:	ldr	x0, [sp, #16]
    edc8:	bl	22b8 <grub_mod_fini+0x1d98>
    edcc:	cmp	x0, #0x1
    edd0:	cset	w0, ne  // ne = any
    edd4:	and	w0, w0, #0xff
    edd8:	and	x0, x0, #0xff
    eddc:	cmp	x0, #0x0
    ede0:	b.eq	edec <regfree+0x6424>  // b.none
    ede4:	mov	w0, #0x3                   	// #3
    ede8:	b	ee04 <regfree+0x643c>
    edec:	ldr	x0, [sp, #16]
    edf0:	ldrb	w0, [x0]
    edf4:	mov	w1, w0
    edf8:	ldr	x0, [sp, #40]
    edfc:	bl	29f4 <grub_mod_fini+0x24d4>
    ee00:	mov	w0, #0x0                   	// #0
    ee04:	ldp	x29, x30, [sp], #48
    ee08:	ret
    ee0c:	stp	x29, x30, [sp, #-112]!
    ee10:	mov	x29, sp
    ee14:	str	x19, [sp, #16]
    ee18:	str	x0, [sp, #72]
    ee1c:	str	x1, [sp, #64]
    ee20:	str	x2, [sp, #56]
    ee24:	str	x3, [sp, #48]
    ee28:	str	x4, [sp, #40]
    ee2c:	str	x5, [sp, #32]
    ee30:	ldr	x0, [sp, #40]
    ee34:	str	x0, [sp, #96]
    ee38:	ldr	x0, [sp, #32]
    ee3c:	and	x0, x0, #0x400000
    ee40:	cmp	x0, #0x0
    ee44:	b.eq	ee90 <regfree+0x64c8>  // b.none
    ee48:	adrp	x0, 0 <grub_mod_init-0x450>
    ee4c:	add	x0, x0, #0x0
    ee50:	ldr	x1, [x0]
    ee54:	ldr	x0, [sp, #96]
    ee58:	bl	22d4 <grub_mod_fini+0x1db4>
    ee5c:	cmp	w0, #0x0
    ee60:	b.eq	ee80 <regfree+0x64b8>  // b.none
    ee64:	adrp	x0, 0 <grub_mod_init-0x450>
    ee68:	add	x0, x0, #0x0
    ee6c:	ldr	x1, [x0]
    ee70:	ldr	x0, [sp, #96]
    ee74:	bl	22d4 <grub_mod_fini+0x1db4>
    ee78:	cmp	w0, #0x0
    ee7c:	b.ne	ee90 <regfree+0x64c8>  // b.any
    ee80:	adrp	x0, 0 <grub_mod_init-0x450>
    ee84:	add	x0, x0, #0x0
    ee88:	ldr	x0, [x0]
    ee8c:	str	x0, [sp, #96]
    ee90:	ldr	x0, [sp, #48]
    ee94:	ldr	w1, [x0]
    ee98:	ldr	x0, [sp, #56]
    ee9c:	ldr	w0, [x0, #52]
    eea0:	cmp	w1, w0
    eea4:	cset	w0, eq  // eq = none
    eea8:	and	w0, w0, #0xff
    eeac:	and	x0, x0, #0xff
    eeb0:	cmp	x0, #0x0
    eeb4:	b.eq	ef28 <regfree+0x6560>  // b.none
    eeb8:	ldr	x0, [sp, #56]
    eebc:	ldr	w0, [x0, #52]
    eec0:	lsl	w0, w0, #1
    eec4:	add	w0, w0, #0x1
    eec8:	str	w0, [sp, #92]
    eecc:	ldr	x0, [sp, #56]
    eed0:	ldr	x2, [x0, #24]
    eed4:	ldrsw	x0, [sp, #92]
    eed8:	lsl	x0, x0, #2
    eedc:	mov	x1, x0
    eee0:	mov	x0, x2
    eee4:	bl	2294 <grub_mod_fini+0x1d74>
    eee8:	str	x0, [sp, #80]
    eeec:	ldr	x0, [sp, #80]
    eef0:	cmp	x0, #0x0
    eef4:	cset	w0, eq  // eq = none
    eef8:	and	w0, w0, #0xff
    eefc:	and	x0, x0, #0xff
    ef00:	cmp	x0, #0x0
    ef04:	b.eq	ef10 <regfree+0x6548>  // b.none
    ef08:	mov	w0, #0xc                   	// #12
    ef0c:	b	f8d8 <regfree+0x6f10>
    ef10:	ldr	x0, [sp, #56]
    ef14:	ldr	x1, [sp, #80]
    ef18:	str	x1, [x0, #24]
    ef1c:	ldr	x0, [sp, #48]
    ef20:	ldr	w1, [sp, #92]
    ef24:	str	w1, [x0]
    ef28:	ldr	x0, [sp, #56]
    ef2c:	ldr	x1, [x0, #24]
    ef30:	ldr	x0, [sp, #56]
    ef34:	ldr	w0, [x0, #52]
    ef38:	add	w3, w0, #0x1
    ef3c:	ldr	x2, [sp, #56]
    ef40:	str	w3, [x2, #52]
    ef44:	sxtw	x0, w0
    ef48:	lsl	x0, x0, #2
    ef4c:	add	x19, x1, x0
    ef50:	ldr	x0, [sp, #96]
    ef54:	bl	26dc <grub_mod_fini+0x21bc>
    ef58:	str	w0, [x19]
    ef5c:	adrp	x0, 0 <grub_mod_init-0x450>
    ef60:	add	x0, x0, #0x0
    ef64:	ldr	x1, [x0]
    ef68:	ldr	x0, [sp, #96]
    ef6c:	bl	22d4 <grub_mod_fini+0x1db4>
    ef70:	cmp	w0, #0x0
    ef74:	b.ne	f024 <regfree+0x665c>  // b.any
    ef78:	ldr	x0, [sp, #72]
    ef7c:	cmp	x0, #0x0
    ef80:	cset	w0, ne  // ne = any
    ef84:	and	w0, w0, #0xff
    ef88:	and	x0, x0, #0xff
    ef8c:	cmp	x0, #0x0
    ef90:	b.eq	efe4 <regfree+0x661c>  // b.none
    ef94:	str	wzr, [sp, #108]
    ef98:	b	efd4 <regfree+0x660c>
    ef9c:	ldr	w0, [sp, #108]
    efa0:	bl	2168 <grub_mod_fini+0x1c48>
    efa4:	cmp	w0, #0x0
    efa8:	b.eq	efc8 <regfree+0x6600>  // b.none
    efac:	ldrsw	x0, [sp, #108]
    efb0:	ldr	x1, [sp, #72]
    efb4:	add	x0, x1, x0
    efb8:	ldrb	w0, [x0]
    efbc:	mov	w1, w0
    efc0:	ldr	x0, [sp, #64]
    efc4:	bl	29f4 <grub_mod_fini+0x24d4>
    efc8:	ldr	w0, [sp, #108]
    efcc:	add	w0, w0, #0x1
    efd0:	str	w0, [sp, #108]
    efd4:	ldr	w0, [sp, #108]
    efd8:	cmp	w0, #0xff
    efdc:	b.le	ef9c <regfree+0x65d4>
    efe0:	b	f8d4 <regfree+0x6f0c>
    efe4:	str	wzr, [sp, #108]
    efe8:	b	f014 <regfree+0x664c>
    efec:	ldr	w0, [sp, #108]
    eff0:	bl	2168 <grub_mod_fini+0x1c48>
    eff4:	cmp	w0, #0x0
    eff8:	b.eq	f008 <regfree+0x6640>  // b.none
    effc:	ldr	w1, [sp, #108]
    f000:	ldr	x0, [sp, #64]
    f004:	bl	29f4 <grub_mod_fini+0x24d4>
    f008:	ldr	w0, [sp, #108]
    f00c:	add	w0, w0, #0x1
    f010:	str	w0, [sp, #108]
    f014:	ldr	w0, [sp, #108]
    f018:	cmp	w0, #0xff
    f01c:	b.le	efec <regfree+0x6624>
    f020:	b	f8d4 <regfree+0x6f0c>
    f024:	adrp	x0, 0 <grub_mod_init-0x450>
    f028:	add	x0, x0, #0x0
    f02c:	ldr	x1, [x0]
    f030:	ldr	x0, [sp, #96]
    f034:	bl	22d4 <grub_mod_fini+0x1db4>
    f038:	cmp	w0, #0x0
    f03c:	b.ne	f0ec <regfree+0x6724>  // b.any
    f040:	ldr	x0, [sp, #72]
    f044:	cmp	x0, #0x0
    f048:	cset	w0, ne  // ne = any
    f04c:	and	w0, w0, #0xff
    f050:	and	x0, x0, #0xff
    f054:	cmp	x0, #0x0
    f058:	b.eq	f0ac <regfree+0x66e4>  // b.none
    f05c:	str	wzr, [sp, #108]
    f060:	b	f09c <regfree+0x66d4>
    f064:	ldr	w0, [sp, #108]
    f068:	bl	2100 <grub_mod_fini+0x1be0>
    f06c:	cmp	w0, #0x0
    f070:	b.eq	f090 <regfree+0x66c8>  // b.none
    f074:	ldrsw	x0, [sp, #108]
    f078:	ldr	x1, [sp, #72]
    f07c:	add	x0, x1, x0
    f080:	ldrb	w0, [x0]
    f084:	mov	w1, w0
    f088:	ldr	x0, [sp, #64]
    f08c:	bl	29f4 <grub_mod_fini+0x24d4>
    f090:	ldr	w0, [sp, #108]
    f094:	add	w0, w0, #0x1
    f098:	str	w0, [sp, #108]
    f09c:	ldr	w0, [sp, #108]
    f0a0:	cmp	w0, #0xff
    f0a4:	b.le	f064 <regfree+0x669c>
    f0a8:	b	f8d4 <regfree+0x6f0c>
    f0ac:	str	wzr, [sp, #108]
    f0b0:	b	f0dc <regfree+0x6714>
    f0b4:	ldr	w0, [sp, #108]
    f0b8:	bl	2100 <grub_mod_fini+0x1be0>
    f0bc:	cmp	w0, #0x0
    f0c0:	b.eq	f0d0 <regfree+0x6708>  // b.none
    f0c4:	ldr	w1, [sp, #108]
    f0c8:	ldr	x0, [sp, #64]
    f0cc:	bl	29f4 <grub_mod_fini+0x24d4>
    f0d0:	ldr	w0, [sp, #108]
    f0d4:	add	w0, w0, #0x1
    f0d8:	str	w0, [sp, #108]
    f0dc:	ldr	w0, [sp, #108]
    f0e0:	cmp	w0, #0xff
    f0e4:	b.le	f0b4 <regfree+0x66ec>
    f0e8:	b	f8d4 <regfree+0x6f0c>
    f0ec:	adrp	x0, 0 <grub_mod_init-0x450>
    f0f0:	add	x0, x0, #0x0
    f0f4:	ldr	x1, [x0]
    f0f8:	ldr	x0, [sp, #96]
    f0fc:	bl	22d4 <grub_mod_fini+0x1db4>
    f100:	cmp	w0, #0x0
    f104:	b.ne	f1b4 <regfree+0x67ec>  // b.any
    f108:	ldr	x0, [sp, #72]
    f10c:	cmp	x0, #0x0
    f110:	cset	w0, ne  // ne = any
    f114:	and	w0, w0, #0xff
    f118:	and	x0, x0, #0xff
    f11c:	cmp	x0, #0x0
    f120:	b.eq	f174 <regfree+0x67ac>  // b.none
    f124:	str	wzr, [sp, #108]
    f128:	b	f164 <regfree+0x679c>
    f12c:	ldr	w0, [sp, #108]
    f130:	bl	206c <grub_mod_fini+0x1b4c>
    f134:	cmp	w0, #0x0
    f138:	b.eq	f158 <regfree+0x6790>  // b.none
    f13c:	ldrsw	x0, [sp, #108]
    f140:	ldr	x1, [sp, #72]
    f144:	add	x0, x1, x0
    f148:	ldrb	w0, [x0]
    f14c:	mov	w1, w0
    f150:	ldr	x0, [sp, #64]
    f154:	bl	29f4 <grub_mod_fini+0x24d4>
    f158:	ldr	w0, [sp, #108]
    f15c:	add	w0, w0, #0x1
    f160:	str	w0, [sp, #108]
    f164:	ldr	w0, [sp, #108]
    f168:	cmp	w0, #0xff
    f16c:	b.le	f12c <regfree+0x6764>
    f170:	b	f8d4 <regfree+0x6f0c>
    f174:	str	wzr, [sp, #108]
    f178:	b	f1a4 <regfree+0x67dc>
    f17c:	ldr	w0, [sp, #108]
    f180:	bl	206c <grub_mod_fini+0x1b4c>
    f184:	cmp	w0, #0x0
    f188:	b.eq	f198 <regfree+0x67d0>  // b.none
    f18c:	ldr	w1, [sp, #108]
    f190:	ldr	x0, [sp, #64]
    f194:	bl	29f4 <grub_mod_fini+0x24d4>
    f198:	ldr	w0, [sp, #108]
    f19c:	add	w0, w0, #0x1
    f1a0:	str	w0, [sp, #108]
    f1a4:	ldr	w0, [sp, #108]
    f1a8:	cmp	w0, #0xff
    f1ac:	b.le	f17c <regfree+0x67b4>
    f1b0:	b	f8d4 <regfree+0x6f0c>
    f1b4:	adrp	x0, 0 <grub_mod_init-0x450>
    f1b8:	add	x0, x0, #0x0
    f1bc:	ldr	x1, [x0]
    f1c0:	ldr	x0, [sp, #96]
    f1c4:	bl	22d4 <grub_mod_fini+0x1db4>
    f1c8:	cmp	w0, #0x0
    f1cc:	b.ne	f27c <regfree+0x68b4>  // b.any
    f1d0:	ldr	x0, [sp, #72]
    f1d4:	cmp	x0, #0x0
    f1d8:	cset	w0, ne  // ne = any
    f1dc:	and	w0, w0, #0xff
    f1e0:	and	x0, x0, #0xff
    f1e4:	cmp	x0, #0x0
    f1e8:	b.eq	f23c <regfree+0x6874>  // b.none
    f1ec:	str	wzr, [sp, #108]
    f1f0:	b	f22c <regfree+0x6864>
    f1f4:	ldr	w0, [sp, #108]
    f1f8:	bl	2034 <grub_mod_fini+0x1b14>
    f1fc:	cmp	w0, #0x0
    f200:	b.eq	f220 <regfree+0x6858>  // b.none
    f204:	ldrsw	x0, [sp, #108]
    f208:	ldr	x1, [sp, #72]
    f20c:	add	x0, x1, x0
    f210:	ldrb	w0, [x0]
    f214:	mov	w1, w0
    f218:	ldr	x0, [sp, #64]
    f21c:	bl	29f4 <grub_mod_fini+0x24d4>
    f220:	ldr	w0, [sp, #108]
    f224:	add	w0, w0, #0x1
    f228:	str	w0, [sp, #108]
    f22c:	ldr	w0, [sp, #108]
    f230:	cmp	w0, #0xff
    f234:	b.le	f1f4 <regfree+0x682c>
    f238:	b	f8d4 <regfree+0x6f0c>
    f23c:	str	wzr, [sp, #108]
    f240:	b	f26c <regfree+0x68a4>
    f244:	ldr	w0, [sp, #108]
    f248:	bl	2034 <grub_mod_fini+0x1b14>
    f24c:	cmp	w0, #0x0
    f250:	b.eq	f260 <regfree+0x6898>  // b.none
    f254:	ldr	w1, [sp, #108]
    f258:	ldr	x0, [sp, #64]
    f25c:	bl	29f4 <grub_mod_fini+0x24d4>
    f260:	ldr	w0, [sp, #108]
    f264:	add	w0, w0, #0x1
    f268:	str	w0, [sp, #108]
    f26c:	ldr	w0, [sp, #108]
    f270:	cmp	w0, #0xff
    f274:	b.le	f244 <regfree+0x687c>
    f278:	b	f8d4 <regfree+0x6f0c>
    f27c:	adrp	x0, 0 <grub_mod_init-0x450>
    f280:	add	x0, x0, #0x0
    f284:	ldr	x1, [x0]
    f288:	ldr	x0, [sp, #96]
    f28c:	bl	22d4 <grub_mod_fini+0x1db4>
    f290:	cmp	w0, #0x0
    f294:	b.ne	f344 <regfree+0x697c>  // b.any
    f298:	ldr	x0, [sp, #72]
    f29c:	cmp	x0, #0x0
    f2a0:	cset	w0, ne  // ne = any
    f2a4:	and	w0, w0, #0xff
    f2a8:	and	x0, x0, #0xff
    f2ac:	cmp	x0, #0x0
    f2b0:	b.eq	f304 <regfree+0x693c>  // b.none
    f2b4:	str	wzr, [sp, #108]
    f2b8:	b	f2f4 <regfree+0x692c>
    f2bc:	ldr	w0, [sp, #108]
    f2c0:	bl	21f8 <grub_mod_fini+0x1cd8>
    f2c4:	cmp	w0, #0x0
    f2c8:	b.eq	f2e8 <regfree+0x6920>  // b.none
    f2cc:	ldrsw	x0, [sp, #108]
    f2d0:	ldr	x1, [sp, #72]
    f2d4:	add	x0, x1, x0
    f2d8:	ldrb	w0, [x0]
    f2dc:	mov	w1, w0
    f2e0:	ldr	x0, [sp, #64]
    f2e4:	bl	29f4 <grub_mod_fini+0x24d4>
    f2e8:	ldr	w0, [sp, #108]
    f2ec:	add	w0, w0, #0x1
    f2f0:	str	w0, [sp, #108]
    f2f4:	ldr	w0, [sp, #108]
    f2f8:	cmp	w0, #0xff
    f2fc:	b.le	f2bc <regfree+0x68f4>
    f300:	b	f8d4 <regfree+0x6f0c>
    f304:	str	wzr, [sp, #108]
    f308:	b	f334 <regfree+0x696c>
    f30c:	ldr	w0, [sp, #108]
    f310:	bl	21f8 <grub_mod_fini+0x1cd8>
    f314:	cmp	w0, #0x0
    f318:	b.eq	f328 <regfree+0x6960>  // b.none
    f31c:	ldr	w1, [sp, #108]
    f320:	ldr	x0, [sp, #64]
    f324:	bl	29f4 <grub_mod_fini+0x24d4>
    f328:	ldr	w0, [sp, #108]
    f32c:	add	w0, w0, #0x1
    f330:	str	w0, [sp, #108]
    f334:	ldr	w0, [sp, #108]
    f338:	cmp	w0, #0xff
    f33c:	b.le	f30c <regfree+0x6944>
    f340:	b	f8d4 <regfree+0x6f0c>
    f344:	adrp	x0, 0 <grub_mod_init-0x450>
    f348:	add	x0, x0, #0x0
    f34c:	ldr	x1, [x0]
    f350:	ldr	x0, [sp, #96]
    f354:	bl	22d4 <grub_mod_fini+0x1db4>
    f358:	cmp	w0, #0x0
    f35c:	b.ne	f40c <regfree+0x6a44>  // b.any
    f360:	ldr	x0, [sp, #72]
    f364:	cmp	x0, #0x0
    f368:	cset	w0, ne  // ne = any
    f36c:	and	w0, w0, #0xff
    f370:	and	x0, x0, #0xff
    f374:	cmp	x0, #0x0
    f378:	b.eq	f3cc <regfree+0x6a04>  // b.none
    f37c:	str	wzr, [sp, #108]
    f380:	b	f3bc <regfree+0x69f4>
    f384:	ldr	w0, [sp, #108]
    f388:	bl	2050 <grub_mod_fini+0x1b30>
    f38c:	cmp	w0, #0x0
    f390:	b.eq	f3b0 <regfree+0x69e8>  // b.none
    f394:	ldrsw	x0, [sp, #108]
    f398:	ldr	x1, [sp, #72]
    f39c:	add	x0, x1, x0
    f3a0:	ldrb	w0, [x0]
    f3a4:	mov	w1, w0
    f3a8:	ldr	x0, [sp, #64]
    f3ac:	bl	29f4 <grub_mod_fini+0x24d4>
    f3b0:	ldr	w0, [sp, #108]
    f3b4:	add	w0, w0, #0x1
    f3b8:	str	w0, [sp, #108]
    f3bc:	ldr	w0, [sp, #108]
    f3c0:	cmp	w0, #0xff
    f3c4:	b.le	f384 <regfree+0x69bc>
    f3c8:	b	f8d4 <regfree+0x6f0c>
    f3cc:	str	wzr, [sp, #108]
    f3d0:	b	f3fc <regfree+0x6a34>
    f3d4:	ldr	w0, [sp, #108]
    f3d8:	bl	2050 <grub_mod_fini+0x1b30>
    f3dc:	cmp	w0, #0x0
    f3e0:	b.eq	f3f0 <regfree+0x6a28>  // b.none
    f3e4:	ldr	w1, [sp, #108]
    f3e8:	ldr	x0, [sp, #64]
    f3ec:	bl	29f4 <grub_mod_fini+0x24d4>
    f3f0:	ldr	w0, [sp, #108]
    f3f4:	add	w0, w0, #0x1
    f3f8:	str	w0, [sp, #108]
    f3fc:	ldr	w0, [sp, #108]
    f400:	cmp	w0, #0xff
    f404:	b.le	f3d4 <regfree+0x6a0c>
    f408:	b	f8d4 <regfree+0x6f0c>
    f40c:	adrp	x0, 0 <grub_mod_init-0x450>
    f410:	add	x0, x0, #0x0
    f414:	ldr	x1, [x0]
    f418:	ldr	x0, [sp, #96]
    f41c:	bl	22d4 <grub_mod_fini+0x1db4>
    f420:	cmp	w0, #0x0
    f424:	b.ne	f4d4 <regfree+0x6b0c>  // b.any
    f428:	ldr	x0, [sp, #72]
    f42c:	cmp	x0, #0x0
    f430:	cset	w0, ne  // ne = any
    f434:	and	w0, w0, #0xff
    f438:	and	x0, x0, #0xff
    f43c:	cmp	x0, #0x0
    f440:	b.eq	f494 <regfree+0x6acc>  // b.none
    f444:	str	wzr, [sp, #108]
    f448:	b	f484 <regfree+0x6abc>
    f44c:	ldr	w0, [sp, #108]
    f450:	bl	20e4 <grub_mod_fini+0x1bc4>
    f454:	cmp	w0, #0x0
    f458:	b.eq	f478 <regfree+0x6ab0>  // b.none
    f45c:	ldrsw	x0, [sp, #108]
    f460:	ldr	x1, [sp, #72]
    f464:	add	x0, x1, x0
    f468:	ldrb	w0, [x0]
    f46c:	mov	w1, w0
    f470:	ldr	x0, [sp, #64]
    f474:	bl	29f4 <grub_mod_fini+0x24d4>
    f478:	ldr	w0, [sp, #108]
    f47c:	add	w0, w0, #0x1
    f480:	str	w0, [sp, #108]
    f484:	ldr	w0, [sp, #108]
    f488:	cmp	w0, #0xff
    f48c:	b.le	f44c <regfree+0x6a84>
    f490:	b	f8d4 <regfree+0x6f0c>
    f494:	str	wzr, [sp, #108]
    f498:	b	f4c4 <regfree+0x6afc>
    f49c:	ldr	w0, [sp, #108]
    f4a0:	bl	20e4 <grub_mod_fini+0x1bc4>
    f4a4:	cmp	w0, #0x0
    f4a8:	b.eq	f4b8 <regfree+0x6af0>  // b.none
    f4ac:	ldr	w1, [sp, #108]
    f4b0:	ldr	x0, [sp, #64]
    f4b4:	bl	29f4 <grub_mod_fini+0x24d4>
    f4b8:	ldr	w0, [sp, #108]
    f4bc:	add	w0, w0, #0x1
    f4c0:	str	w0, [sp, #108]
    f4c4:	ldr	w0, [sp, #108]
    f4c8:	cmp	w0, #0xff
    f4cc:	b.le	f49c <regfree+0x6ad4>
    f4d0:	b	f8d4 <regfree+0x6f0c>
    f4d4:	adrp	x0, 0 <grub_mod_init-0x450>
    f4d8:	add	x0, x0, #0x0
    f4dc:	ldr	x1, [x0]
    f4e0:	ldr	x0, [sp, #96]
    f4e4:	bl	22d4 <grub_mod_fini+0x1db4>
    f4e8:	cmp	w0, #0x0
    f4ec:	b.ne	f59c <regfree+0x6bd4>  // b.any
    f4f0:	ldr	x0, [sp, #72]
    f4f4:	cmp	x0, #0x0
    f4f8:	cset	w0, ne  // ne = any
    f4fc:	and	w0, w0, #0xff
    f500:	and	x0, x0, #0xff
    f504:	cmp	x0, #0x0
    f508:	b.eq	f55c <regfree+0x6b94>  // b.none
    f50c:	str	wzr, [sp, #108]
    f510:	b	f54c <regfree+0x6b84>
    f514:	ldr	w0, [sp, #108]
    f518:	bl	20ac <grub_mod_fini+0x1b8c>
    f51c:	cmp	w0, #0x0
    f520:	b.eq	f540 <regfree+0x6b78>  // b.none
    f524:	ldrsw	x0, [sp, #108]
    f528:	ldr	x1, [sp, #72]
    f52c:	add	x0, x1, x0
    f530:	ldrb	w0, [x0]
    f534:	mov	w1, w0
    f538:	ldr	x0, [sp, #64]
    f53c:	bl	29f4 <grub_mod_fini+0x24d4>
    f540:	ldr	w0, [sp, #108]
    f544:	add	w0, w0, #0x1
    f548:	str	w0, [sp, #108]
    f54c:	ldr	w0, [sp, #108]
    f550:	cmp	w0, #0xff
    f554:	b.le	f514 <regfree+0x6b4c>
    f558:	b	f8d4 <regfree+0x6f0c>
    f55c:	str	wzr, [sp, #108]
    f560:	b	f58c <regfree+0x6bc4>
    f564:	ldr	w0, [sp, #108]
    f568:	bl	20ac <grub_mod_fini+0x1b8c>
    f56c:	cmp	w0, #0x0
    f570:	b.eq	f580 <regfree+0x6bb8>  // b.none
    f574:	ldr	w1, [sp, #108]
    f578:	ldr	x0, [sp, #64]
    f57c:	bl	29f4 <grub_mod_fini+0x24d4>
    f580:	ldr	w0, [sp, #108]
    f584:	add	w0, w0, #0x1
    f588:	str	w0, [sp, #108]
    f58c:	ldr	w0, [sp, #108]
    f590:	cmp	w0, #0xff
    f594:	b.le	f564 <regfree+0x6b9c>
    f598:	b	f8d4 <regfree+0x6f0c>
    f59c:	adrp	x0, 0 <grub_mod_init-0x450>
    f5a0:	add	x0, x0, #0x0
    f5a4:	ldr	x1, [x0]
    f5a8:	ldr	x0, [sp, #96]
    f5ac:	bl	22d4 <grub_mod_fini+0x1db4>
    f5b0:	cmp	w0, #0x0
    f5b4:	b.ne	f674 <regfree+0x6cac>  // b.any
    f5b8:	ldr	x0, [sp, #72]
    f5bc:	cmp	x0, #0x0
    f5c0:	cset	w0, ne  // ne = any
    f5c4:	and	w0, w0, #0xff
    f5c8:	and	x0, x0, #0xff
    f5cc:	cmp	x0, #0x0
    f5d0:	b.eq	f62c <regfree+0x6c64>  // b.none
    f5d4:	str	wzr, [sp, #108]
    f5d8:	b	f61c <regfree+0x6c54>
    f5dc:	ldr	w0, [sp, #108]
    f5e0:	cmp	w0, #0x20
    f5e4:	b.eq	f5f4 <regfree+0x6c2c>  // b.none
    f5e8:	ldr	w0, [sp, #108]
    f5ec:	cmp	w0, #0x9
    f5f0:	b.ne	f610 <regfree+0x6c48>  // b.any
    f5f4:	ldrsw	x0, [sp, #108]
    f5f8:	ldr	x1, [sp, #72]
    f5fc:	add	x0, x1, x0
    f600:	ldrb	w0, [x0]
    f604:	mov	w1, w0
    f608:	ldr	x0, [sp, #64]
    f60c:	bl	29f4 <grub_mod_fini+0x24d4>
    f610:	ldr	w0, [sp, #108]
    f614:	add	w0, w0, #0x1
    f618:	str	w0, [sp, #108]
    f61c:	ldr	w0, [sp, #108]
    f620:	cmp	w0, #0xff
    f624:	b.le	f5dc <regfree+0x6c14>
    f628:	b	f8d4 <regfree+0x6f0c>
    f62c:	str	wzr, [sp, #108]
    f630:	b	f664 <regfree+0x6c9c>
    f634:	ldr	w0, [sp, #108]
    f638:	cmp	w0, #0x20
    f63c:	b.eq	f64c <regfree+0x6c84>  // b.none
    f640:	ldr	w0, [sp, #108]
    f644:	cmp	w0, #0x9
    f648:	b.ne	f658 <regfree+0x6c90>  // b.any
    f64c:	ldr	w1, [sp, #108]
    f650:	ldr	x0, [sp, #64]
    f654:	bl	29f4 <grub_mod_fini+0x24d4>
    f658:	ldr	w0, [sp, #108]
    f65c:	add	w0, w0, #0x1
    f660:	str	w0, [sp, #108]
    f664:	ldr	w0, [sp, #108]
    f668:	cmp	w0, #0xff
    f66c:	b.le	f634 <regfree+0x6c6c>
    f670:	b	f8d4 <regfree+0x6f0c>
    f674:	adrp	x0, 0 <grub_mod_init-0x450>
    f678:	add	x0, x0, #0x0
    f67c:	ldr	x1, [x0]
    f680:	ldr	x0, [sp, #96]
    f684:	bl	22d4 <grub_mod_fini+0x1db4>
    f688:	cmp	w0, #0x0
    f68c:	b.ne	f73c <regfree+0x6d74>  // b.any
    f690:	ldr	x0, [sp, #72]
    f694:	cmp	x0, #0x0
    f698:	cset	w0, ne  // ne = any
    f69c:	and	w0, w0, #0xff
    f6a0:	and	x0, x0, #0xff
    f6a4:	cmp	x0, #0x0
    f6a8:	b.eq	f6fc <regfree+0x6d34>  // b.none
    f6ac:	str	wzr, [sp, #108]
    f6b0:	b	f6ec <regfree+0x6d24>
    f6b4:	ldr	w0, [sp, #108]
    f6b8:	bl	2128 <grub_mod_fini+0x1c08>
    f6bc:	cmp	w0, #0x0
    f6c0:	b.eq	f6e0 <regfree+0x6d18>  // b.none
    f6c4:	ldrsw	x0, [sp, #108]
    f6c8:	ldr	x1, [sp, #72]
    f6cc:	add	x0, x1, x0
    f6d0:	ldrb	w0, [x0]
    f6d4:	mov	w1, w0
    f6d8:	ldr	x0, [sp, #64]
    f6dc:	bl	29f4 <grub_mod_fini+0x24d4>
    f6e0:	ldr	w0, [sp, #108]
    f6e4:	add	w0, w0, #0x1
    f6e8:	str	w0, [sp, #108]
    f6ec:	ldr	w0, [sp, #108]
    f6f0:	cmp	w0, #0xff
    f6f4:	b.le	f6b4 <regfree+0x6cec>
    f6f8:	b	f8d4 <regfree+0x6f0c>
    f6fc:	str	wzr, [sp, #108]
    f700:	b	f72c <regfree+0x6d64>
    f704:	ldr	w0, [sp, #108]
    f708:	bl	2128 <grub_mod_fini+0x1c08>
    f70c:	cmp	w0, #0x0
    f710:	b.eq	f720 <regfree+0x6d58>  // b.none
    f714:	ldr	w1, [sp, #108]
    f718:	ldr	x0, [sp, #64]
    f71c:	bl	29f4 <grub_mod_fini+0x24d4>
    f720:	ldr	w0, [sp, #108]
    f724:	add	w0, w0, #0x1
    f728:	str	w0, [sp, #108]
    f72c:	ldr	w0, [sp, #108]
    f730:	cmp	w0, #0xff
    f734:	b.le	f704 <regfree+0x6d3c>
    f738:	b	f8d4 <regfree+0x6f0c>
    f73c:	adrp	x0, 0 <grub_mod_init-0x450>
    f740:	add	x0, x0, #0x0
    f744:	ldr	x1, [x0]
    f748:	ldr	x0, [sp, #96]
    f74c:	bl	22d4 <grub_mod_fini+0x1db4>
    f750:	cmp	w0, #0x0
    f754:	b.ne	f804 <regfree+0x6e3c>  // b.any
    f758:	ldr	x0, [sp, #72]
    f75c:	cmp	x0, #0x0
    f760:	cset	w0, ne  // ne = any
    f764:	and	w0, w0, #0xff
    f768:	and	x0, x0, #0xff
    f76c:	cmp	x0, #0x0
    f770:	b.eq	f7c4 <regfree+0x6dfc>  // b.none
    f774:	str	wzr, [sp, #108]
    f778:	b	f7b4 <regfree+0x6dec>
    f77c:	ldr	w0, [sp, #108]
    f780:	bl	21a8 <grub_mod_fini+0x1c88>
    f784:	cmp	w0, #0x0
    f788:	b.eq	f7a8 <regfree+0x6de0>  // b.none
    f78c:	ldrsw	x0, [sp, #108]
    f790:	ldr	x1, [sp, #72]
    f794:	add	x0, x1, x0
    f798:	ldrb	w0, [x0]
    f79c:	mov	w1, w0
    f7a0:	ldr	x0, [sp, #64]
    f7a4:	bl	29f4 <grub_mod_fini+0x24d4>
    f7a8:	ldr	w0, [sp, #108]
    f7ac:	add	w0, w0, #0x1
    f7b0:	str	w0, [sp, #108]
    f7b4:	ldr	w0, [sp, #108]
    f7b8:	cmp	w0, #0xff
    f7bc:	b.le	f77c <regfree+0x6db4>
    f7c0:	b	f8d4 <regfree+0x6f0c>
    f7c4:	str	wzr, [sp, #108]
    f7c8:	b	f7f4 <regfree+0x6e2c>
    f7cc:	ldr	w0, [sp, #108]
    f7d0:	bl	21a8 <grub_mod_fini+0x1c88>
    f7d4:	cmp	w0, #0x0
    f7d8:	b.eq	f7e8 <regfree+0x6e20>  // b.none
    f7dc:	ldr	w1, [sp, #108]
    f7e0:	ldr	x0, [sp, #64]
    f7e4:	bl	29f4 <grub_mod_fini+0x24d4>
    f7e8:	ldr	w0, [sp, #108]
    f7ec:	add	w0, w0, #0x1
    f7f0:	str	w0, [sp, #108]
    f7f4:	ldr	w0, [sp, #108]
    f7f8:	cmp	w0, #0xff
    f7fc:	b.le	f7cc <regfree+0x6e04>
    f800:	b	f8d4 <regfree+0x6f0c>
    f804:	adrp	x0, 0 <grub_mod_init-0x450>
    f808:	add	x0, x0, #0x0
    f80c:	ldr	x1, [x0]
    f810:	ldr	x0, [sp, #96]
    f814:	bl	22d4 <grub_mod_fini+0x1db4>
    f818:	cmp	w0, #0x0
    f81c:	b.ne	f8cc <regfree+0x6f04>  // b.any
    f820:	ldr	x0, [sp, #72]
    f824:	cmp	x0, #0x0
    f828:	cset	w0, ne  // ne = any
    f82c:	and	w0, w0, #0xff
    f830:	and	x0, x0, #0xff
    f834:	cmp	x0, #0x0
    f838:	b.eq	f88c <regfree+0x6ec4>  // b.none
    f83c:	str	wzr, [sp, #108]
    f840:	b	f87c <regfree+0x6eb4>
    f844:	ldr	w0, [sp, #108]
    f848:	bl	20c8 <grub_mod_fini+0x1ba8>
    f84c:	cmp	w0, #0x0
    f850:	b.eq	f870 <regfree+0x6ea8>  // b.none
    f854:	ldrsw	x0, [sp, #108]
    f858:	ldr	x1, [sp, #72]
    f85c:	add	x0, x1, x0
    f860:	ldrb	w0, [x0]
    f864:	mov	w1, w0
    f868:	ldr	x0, [sp, #64]
    f86c:	bl	29f4 <grub_mod_fini+0x24d4>
    f870:	ldr	w0, [sp, #108]
    f874:	add	w0, w0, #0x1
    f878:	str	w0, [sp, #108]
    f87c:	ldr	w0, [sp, #108]
    f880:	cmp	w0, #0xff
    f884:	b.le	f844 <regfree+0x6e7c>
    f888:	b	f8d4 <regfree+0x6f0c>
    f88c:	str	wzr, [sp, #108]
    f890:	b	f8bc <regfree+0x6ef4>
    f894:	ldr	w0, [sp, #108]
    f898:	bl	20c8 <grub_mod_fini+0x1ba8>
    f89c:	cmp	w0, #0x0
    f8a0:	b.eq	f8b0 <regfree+0x6ee8>  // b.none
    f8a4:	ldr	w1, [sp, #108]
    f8a8:	ldr	x0, [sp, #64]
    f8ac:	bl	29f4 <grub_mod_fini+0x24d4>
    f8b0:	ldr	w0, [sp, #108]
    f8b4:	add	w0, w0, #0x1
    f8b8:	str	w0, [sp, #108]
    f8bc:	ldr	w0, [sp, #108]
    f8c0:	cmp	w0, #0xff
    f8c4:	b.le	f894 <regfree+0x6ecc>
    f8c8:	b	f8d4 <regfree+0x6f0c>
    f8cc:	mov	w0, #0x4                   	// #4
    f8d0:	b	f8d8 <regfree+0x6f10>
    f8d4:	mov	w0, #0x0                   	// #0
    f8d8:	ldr	x19, [sp, #16]
    f8dc:	ldp	x29, x30, [sp], #112
    f8e0:	ret
    f8e4:	nop
	...
    f948:	stp	x29, x30, [sp, #-128]!
    f94c:	mov	x29, sp
    f950:	str	x0, [sp, #56]
    f954:	str	x1, [sp, #48]
    f958:	str	x2, [sp, #40]
    f95c:	str	x3, [sp, #32]
    f960:	strb	w4, [sp, #31]
    f964:	str	x5, [sp, #16]
    f968:	str	wzr, [sp, #84]
    f96c:	mov	x1, #0x1                   	// #1
    f970:	mov	x0, #0x20                  	// #32
    f974:	bl	226c <grub_mod_fini+0x1d4c>
    f978:	str	x0, [sp, #120]
    f97c:	ldr	x0, [sp, #120]
    f980:	cmp	x0, #0x0
    f984:	cset	w0, eq  // eq = none
    f988:	and	w0, w0, #0xff
    f98c:	and	x0, x0, #0xff
    f990:	cmp	x0, #0x0
    f994:	b.eq	f9ac <regfree+0x6fe4>  // b.none
    f998:	ldr	x0, [sp, #16]
    f99c:	mov	w1, #0xc                   	// #12
    f9a0:	str	w1, [x0]
    f9a4:	mov	x0, #0x0                   	// #0
    f9a8:	b	fbfc <regfree+0x7234>
    f9ac:	mov	x1, #0x1                   	// #1
    f9b0:	mov	x0, #0x38                  	// #56
    f9b4:	bl	226c <grub_mod_fini+0x1d4c>
    f9b8:	str	x0, [sp, #112]
    f9bc:	ldr	x0, [sp, #112]
    f9c0:	cmp	x0, #0x0
    f9c4:	cset	w0, eq  // eq = none
    f9c8:	and	w0, w0, #0xff
    f9cc:	and	x0, x0, #0xff
    f9d0:	cmp	x0, #0x0
    f9d4:	b.eq	f9f4 <regfree+0x702c>  // b.none
    f9d8:	ldr	x0, [sp, #120]
    f9dc:	bl	2230 <grub_mod_fini+0x1d10>
    f9e0:	ldr	x0, [sp, #16]
    f9e4:	mov	w1, #0xc                   	// #12
    f9e8:	str	w1, [x0]
    f9ec:	mov	x0, #0x0                   	// #0
    f9f0:	b	fbfc <regfree+0x7234>
    f9f4:	ldr	x1, [sp, #112]
    f9f8:	ldrb	w0, [x1, #32]
    f9fc:	ldrb	w2, [sp, #31]
    fa00:	bfxil	w0, w2, #0, #1
    fa04:	strb	w0, [x1, #32]
    fa08:	add	x0, sp, #0x54
    fa0c:	mov	x5, #0x0                   	// #0
    fa10:	ldr	x4, [sp, #40]
    fa14:	mov	x3, x0
    fa18:	ldr	x2, [sp, #112]
    fa1c:	ldr	x1, [sp, #120]
    fa20:	ldr	x0, [sp, #48]
    fa24:	bl	ee0c <regfree+0x6444>
    fa28:	str	w0, [sp, #108]
    fa2c:	ldr	w0, [sp, #108]
    fa30:	cmp	w0, #0x0
    fa34:	cset	w0, ne  // ne = any
    fa38:	and	w0, w0, #0xff
    fa3c:	and	x0, x0, #0xff
    fa40:	cmp	x0, #0x0
    fa44:	b.eq	fa8c <regfree+0x70c4>  // b.none
    fa48:	ldr	x0, [sp, #120]
    fa4c:	bl	2230 <grub_mod_fini+0x1d10>
    fa50:	ldr	x0, [sp, #112]
    fa54:	bl	fd1c <regfree+0x7354>
    fa58:	ldr	x0, [sp, #16]
    fa5c:	ldr	w1, [sp, #108]
    fa60:	str	w1, [x0]
    fa64:	mov	x0, #0x0                   	// #0
    fa68:	b	fbfc <regfree+0x7234>
    fa6c:	ldr	x0, [sp, #32]
    fa70:	ldrb	w0, [x0]
    fa74:	mov	w1, w0
    fa78:	ldr	x0, [sp, #120]
    fa7c:	bl	29f4 <grub_mod_fini+0x24d4>
    fa80:	ldr	x0, [sp, #32]
    fa84:	add	x0, x0, #0x1
    fa88:	str	x0, [sp, #32]
    fa8c:	ldr	x0, [sp, #32]
    fa90:	ldrb	w0, [x0]
    fa94:	cmp	w0, #0x0
    fa98:	b.ne	fa6c <regfree+0x70a4>  // b.any
    fa9c:	ldrb	w0, [sp, #31]
    faa0:	cmp	w0, #0x0
    faa4:	b.eq	fab0 <regfree+0x70e8>  // b.none
    faa8:	ldr	x0, [sp, #120]
    faac:	bl	2bc8 <grub_mod_fini+0x26a8>
    fab0:	ldr	x0, [sp, #56]
    fab4:	ldr	w0, [x0, #164]
    fab8:	cmp	w0, #0x1
    fabc:	b.le	fad4 <regfree+0x710c>
    fac0:	ldr	x0, [sp, #56]
    fac4:	ldr	x0, [x0, #120]
    fac8:	mov	x1, x0
    facc:	ldr	x0, [sp, #120]
    fad0:	bl	2ca8 <grub_mod_fini+0x2788>
    fad4:	mov	w0, #0x3                   	// #3
    fad8:	strb	w0, [sp, #72]
    fadc:	ldr	x0, [sp, #120]
    fae0:	str	x0, [sp, #64]
    fae4:	add	x0, sp, #0x40
    fae8:	mov	x3, x0
    faec:	mov	x2, #0x0                   	// #0
    faf0:	mov	x1, #0x0                   	// #0
    faf4:	ldr	x0, [sp, #56]
    faf8:	bl	fdb0 <regfree+0x73e8>
    fafc:	str	x0, [sp, #96]
    fb00:	ldr	x0, [sp, #96]
    fb04:	cmp	x0, #0x0
    fb08:	cset	w0, eq  // eq = none
    fb0c:	and	w0, w0, #0xff
    fb10:	and	x0, x0, #0xff
    fb14:	cmp	x0, #0x0
    fb18:	b.ne	fbd0 <regfree+0x7208>  // b.any
    fb1c:	ldr	x0, [sp, #56]
    fb20:	ldr	w0, [x0, #164]
    fb24:	cmp	w0, #0x1
    fb28:	b.le	fbc0 <regfree+0x71f8>
    fb2c:	mov	w0, #0x6                   	// #6
    fb30:	strb	w0, [sp, #72]
    fb34:	ldr	x0, [sp, #112]
    fb38:	str	x0, [sp, #64]
    fb3c:	ldr	x0, [sp, #56]
    fb40:	ldrb	w1, [x0, #160]
    fb44:	orr	w1, w1, #0x2
    fb48:	strb	w1, [x0, #160]
    fb4c:	add	x0, sp, #0x40
    fb50:	mov	x3, x0
    fb54:	mov	x2, #0x0                   	// #0
    fb58:	mov	x1, #0x0                   	// #0
    fb5c:	ldr	x0, [sp, #56]
    fb60:	bl	fdb0 <regfree+0x73e8>
    fb64:	str	x0, [sp, #88]
    fb68:	ldr	x0, [sp, #88]
    fb6c:	cmp	x0, #0x0
    fb70:	cset	w0, eq  // eq = none
    fb74:	and	w0, w0, #0xff
    fb78:	and	x0, x0, #0xff
    fb7c:	cmp	x0, #0x0
    fb80:	b.ne	fbd8 <regfree+0x7210>  // b.any
    fb84:	mov	w3, #0xa                   	// #10
    fb88:	ldr	x2, [sp, #88]
    fb8c:	ldr	x1, [sp, #96]
    fb90:	ldr	x0, [sp, #56]
    fb94:	bl	fd6c <regfree+0x73a4>
    fb98:	str	x0, [sp, #96]
    fb9c:	ldr	x0, [sp, #88]
    fba0:	cmp	x0, #0x0
    fba4:	cset	w0, ne  // ne = any
    fba8:	and	w0, w0, #0xff
    fbac:	and	x0, x0, #0xff
    fbb0:	cmp	x0, #0x0
    fbb4:	b.eq	fbdc <regfree+0x7214>  // b.none
    fbb8:	ldr	x0, [sp, #96]
    fbbc:	b	fbfc <regfree+0x7234>
    fbc0:	ldr	x0, [sp, #112]
    fbc4:	bl	fd1c <regfree+0x7354>
    fbc8:	ldr	x0, [sp, #96]
    fbcc:	b	fbfc <regfree+0x7234>
    fbd0:	nop
    fbd4:	b	fbdc <regfree+0x7214>
    fbd8:	nop
    fbdc:	ldr	x0, [sp, #120]
    fbe0:	bl	2230 <grub_mod_fini+0x1d10>
    fbe4:	ldr	x0, [sp, #112]
    fbe8:	bl	fd1c <regfree+0x7354>
    fbec:	ldr	x0, [sp, #16]
    fbf0:	mov	w1, #0xc                   	// #12
    fbf4:	str	w1, [x0]
    fbf8:	mov	x0, #0x0                   	// #0
    fbfc:	ldp	x29, x30, [sp], #128
    fc00:	ret
    fc04:	stp	x29, x30, [sp, #-64]!
    fc08:	mov	x29, sp
    fc0c:	str	x0, [sp, #40]
    fc10:	str	x1, [sp, #32]
    fc14:	str	x2, [sp, #24]
    fc18:	mov	w0, #0xffffffff            	// #-1
    fc1c:	str	w0, [sp, #60]
    fc20:	ldr	x2, [sp, #24]
    fc24:	ldr	x1, [sp, #40]
    fc28:	ldr	x0, [sp, #32]
    fc2c:	bl	b6b8 <regfree+0x2cf0>
    fc30:	ldr	x0, [sp, #32]
    fc34:	ldrb	w0, [x0]
    fc38:	strb	w0, [sp, #59]
    fc3c:	ldr	x0, [sp, #32]
    fc40:	ldrb	w0, [x0, #8]
    fc44:	cmp	w0, #0x2
    fc48:	cset	w0, eq  // eq = none
    fc4c:	and	w0, w0, #0xff
    fc50:	and	x0, x0, #0xff
    fc54:	cmp	x0, #0x0
    fc58:	b.eq	fc64 <regfree+0x729c>  // b.none
    fc5c:	mov	w0, #0xfffffffe            	// #-2
    fc60:	b	fd14 <regfree+0x734c>
    fc64:	ldr	x0, [sp, #32]
    fc68:	ldrb	w0, [x0, #8]
    fc6c:	cmp	w0, #0x18
    fc70:	b.eq	fd10 <regfree+0x7348>  // b.none
    fc74:	ldrb	w0, [sp, #59]
    fc78:	cmp	w0, #0x2c
    fc7c:	b.eq	fd10 <regfree+0x7348>  // b.none
    fc80:	ldr	x0, [sp, #32]
    fc84:	ldrb	w0, [x0, #8]
    fc88:	cmp	w0, #0x1
    fc8c:	b.ne	fd04 <regfree+0x733c>  // b.any
    fc90:	ldrb	w0, [sp, #59]
    fc94:	cmp	w0, #0x2f
    fc98:	b.ls	fd04 <regfree+0x733c>  // b.plast
    fc9c:	ldrb	w0, [sp, #59]
    fca0:	cmp	w0, #0x39
    fca4:	b.hi	fd04 <regfree+0x733c>  // b.pmore
    fca8:	ldr	w0, [sp, #60]
    fcac:	cmn	w0, #0x2
    fcb0:	b.eq	fd04 <regfree+0x733c>  // b.none
    fcb4:	ldr	w0, [sp, #60]
    fcb8:	cmn	w0, #0x1
    fcbc:	b.ne	fccc <regfree+0x7304>  // b.any
    fcc0:	ldrb	w0, [sp, #59]
    fcc4:	sub	w0, w0, #0x30
    fcc8:	b	fd08 <regfree+0x7340>
    fccc:	ldr	w1, [sp, #60]
    fcd0:	mov	w0, w1
    fcd4:	lsl	w0, w0, #2
    fcd8:	add	w0, w0, w1
    fcdc:	lsl	w0, w0, #1
    fce0:	mov	w1, w0
    fce4:	ldrb	w0, [sp, #59]
    fce8:	add	w0, w1, w0
    fcec:	mov	w2, #0x8030                	// #32816
    fcf0:	mov	w1, #0x8030                	// #32816
    fcf4:	cmp	w0, w2
    fcf8:	csel	w0, w0, w1, le
    fcfc:	sub	w0, w0, #0x30
    fd00:	b	fd08 <regfree+0x7340>
    fd04:	mov	w0, #0xfffffffe            	// #-2
    fd08:	str	w0, [sp, #60]
    fd0c:	b	fc20 <regfree+0x7258>
    fd10:	ldr	w0, [sp, #60]
    fd14:	ldp	x29, x30, [sp], #64
    fd18:	ret
    fd1c:	stp	x29, x30, [sp, #-32]!
    fd20:	mov	x29, sp
    fd24:	str	x0, [sp, #24]
    fd28:	ldr	x0, [sp, #24]
    fd2c:	ldr	x0, [x0]
    fd30:	bl	2230 <grub_mod_fini+0x1d10>
    fd34:	ldr	x0, [sp, #24]
    fd38:	ldr	x0, [x0, #8]
    fd3c:	bl	2230 <grub_mod_fini+0x1d10>
    fd40:	ldr	x0, [sp, #24]
    fd44:	ldr	x0, [x0, #16]
    fd48:	bl	2230 <grub_mod_fini+0x1d10>
    fd4c:	ldr	x0, [sp, #24]
    fd50:	ldr	x0, [x0, #24]
    fd54:	bl	2230 <grub_mod_fini+0x1d10>
    fd58:	ldr	x0, [sp, #24]
    fd5c:	bl	2230 <grub_mod_fini+0x1d10>
    fd60:	nop
    fd64:	ldp	x29, x30, [sp], #32
    fd68:	ret
    fd6c:	stp	x29, x30, [sp, #-64]!
    fd70:	mov	x29, sp
    fd74:	str	x0, [sp, #40]
    fd78:	str	x1, [sp, #32]
    fd7c:	str	x2, [sp, #24]
    fd80:	str	w3, [sp, #20]
    fd84:	ldr	w0, [sp, #20]
    fd88:	and	w0, w0, #0xff
    fd8c:	strb	w0, [sp, #56]
    fd90:	add	x0, sp, #0x30
    fd94:	mov	x3, x0
    fd98:	ldr	x2, [sp, #24]
    fd9c:	ldr	x1, [sp, #32]
    fda0:	ldr	x0, [sp, #40]
    fda4:	bl	fdb0 <regfree+0x73e8>
    fda8:	ldp	x29, x30, [sp], #64
    fdac:	ret
    fdb0:	stp	x29, x30, [sp, #-64]!
    fdb4:	mov	x29, sp
    fdb8:	str	x0, [sp, #40]
    fdbc:	str	x1, [sp, #32]
    fdc0:	str	x2, [sp, #24]
    fdc4:	str	x3, [sp, #16]
    fdc8:	ldr	x0, [sp, #40]
    fdcc:	ldr	w0, [x0, #128]
    fdd0:	cmp	w0, #0xf
    fdd4:	cset	w0, eq  // eq = none
    fdd8:	and	w0, w0, #0xff
    fddc:	and	x0, x0, #0xff
    fde0:	cmp	x0, #0x0
    fde4:	b.eq	fe2c <regfree+0x7464>  // b.none
    fde8:	mov	x0, #0x3c8                 	// #968
    fdec:	bl	2250 <grub_mod_fini+0x1d30>
    fdf0:	str	x0, [sp, #56]
    fdf4:	ldr	x0, [sp, #56]
    fdf8:	cmp	x0, #0x0
    fdfc:	b.ne	fe08 <regfree+0x7440>  // b.any
    fe00:	mov	x0, #0x0                   	// #0
    fe04:	b	fefc <regfree+0x7534>
    fe08:	ldr	x0, [sp, #40]
    fe0c:	ldr	x1, [x0, #112]
    fe10:	ldr	x0, [sp, #56]
    fe14:	str	x1, [x0]
    fe18:	ldr	x0, [sp, #40]
    fe1c:	ldr	x1, [sp, #56]
    fe20:	str	x1, [x0, #112]
    fe24:	ldr	x0, [sp, #40]
    fe28:	str	wzr, [x0, #128]
    fe2c:	ldr	x0, [sp, #40]
    fe30:	ldr	x1, [x0, #112]
    fe34:	ldr	x0, [sp, #40]
    fe38:	ldr	w0, [x0, #128]
    fe3c:	add	w3, w0, #0x1
    fe40:	ldr	x2, [sp, #40]
    fe44:	str	w3, [x2, #128]
    fe48:	sxtw	x0, w0
    fe4c:	lsl	x0, x0, #6
    fe50:	add	x0, x1, x0
    fe54:	add	x0, x0, #0x8
    fe58:	str	x0, [sp, #48]
    fe5c:	ldr	x0, [sp, #48]
    fe60:	str	xzr, [x0]
    fe64:	ldr	x0, [sp, #48]
    fe68:	ldr	x1, [sp, #32]
    fe6c:	str	x1, [x0, #8]
    fe70:	ldr	x0, [sp, #48]
    fe74:	ldr	x1, [sp, #24]
    fe78:	str	x1, [x0, #16]
    fe7c:	ldr	x2, [sp, #48]
    fe80:	ldr	x0, [sp, #16]
    fe84:	ldp	x0, x1, [x0]
    fe88:	stp	x0, x1, [x2, #40]
    fe8c:	ldr	x0, [sp, #48]
    fe90:	ldrb	w1, [x0, #50]
    fe94:	and	w1, w1, #0xfffffffb
    fe98:	strb	w1, [x0, #50]
    fe9c:	ldr	x0, [sp, #48]
    fea0:	ldrb	w1, [x0, #50]
    fea4:	and	w1, w1, #0xfffffff7
    fea8:	strb	w1, [x0, #50]
    feac:	ldr	x0, [sp, #48]
    feb0:	str	xzr, [x0, #24]
    feb4:	ldr	x0, [sp, #48]
    feb8:	str	xzr, [x0, #32]
    febc:	ldr	x0, [sp, #48]
    fec0:	mov	w1, #0xffffffff            	// #-1
    fec4:	str	w1, [x0, #56]
    fec8:	ldr	x0, [sp, #32]
    fecc:	cmp	x0, #0x0
    fed0:	b.eq	fee0 <regfree+0x7518>  // b.none
    fed4:	ldr	x0, [sp, #32]
    fed8:	ldr	x1, [sp, #48]
    fedc:	str	x1, [x0]
    fee0:	ldr	x0, [sp, #24]
    fee4:	cmp	x0, #0x0
    fee8:	b.eq	fef8 <regfree+0x7530>  // b.none
    feec:	ldr	x0, [sp, #24]
    fef0:	ldr	x1, [sp, #48]
    fef4:	str	x1, [x0]
    fef8:	ldr	x0, [sp, #48]
    fefc:	ldp	x29, x30, [sp], #64
    ff00:	ret
    ff04:	sub	sp, sp, #0x20
    ff08:	str	x0, [sp, #8]
    ff0c:	str	x1, [sp]
    ff10:	ldr	x0, [sp, #8]
    ff14:	str	w0, [sp, #28]
    ff18:	ldr	x0, [sp]
    ff1c:	ldrb	w0, [x0, #48]
    ff20:	cmp	w0, #0x11
    ff24:	b.ne	ff4c <regfree+0x7584>  // b.any
    ff28:	ldr	x0, [sp]
    ff2c:	ldr	w0, [x0, #40]
    ff30:	ldr	w1, [sp, #28]
    ff34:	cmp	w1, w0
    ff38:	b.ne	ff4c <regfree+0x7584>  // b.any
    ff3c:	ldr	x0, [sp]
    ff40:	ldrb	w1, [x0, #50]
    ff44:	orr	w1, w1, #0x8
    ff48:	strb	w1, [x0, #50]
    ff4c:	mov	w0, #0x0                   	// #0
    ff50:	add	sp, sp, #0x20
    ff54:	ret
    ff58:	stp	x29, x30, [sp, #-32]!
    ff5c:	mov	x29, sp
    ff60:	str	x0, [sp, #24]
    ff64:	ldr	x0, [sp, #24]
    ff68:	ldrb	w0, [x0, #8]
    ff6c:	cmp	w0, #0x6
    ff70:	b.ne	ff9c <regfree+0x75d4>  // b.any
    ff74:	ldr	x0, [sp, #24]
    ff78:	ldrb	w0, [x0, #10]
    ff7c:	and	w0, w0, #0x4
    ff80:	and	w0, w0, #0xff
    ff84:	cmp	w0, #0x0
    ff88:	b.ne	ff9c <regfree+0x75d4>  // b.any
    ff8c:	ldr	x0, [sp, #24]
    ff90:	ldr	x0, [x0]
    ff94:	bl	fd1c <regfree+0x7354>
    ff98:	b	ffd0 <regfree+0x7608>
    ff9c:	ldr	x0, [sp, #24]
    ffa0:	ldrb	w0, [x0, #8]
    ffa4:	cmp	w0, #0x3
    ffa8:	b.ne	ffd0 <regfree+0x7608>  // b.any
    ffac:	ldr	x0, [sp, #24]
    ffb0:	ldrb	w0, [x0, #10]
    ffb4:	and	w0, w0, #0x4
    ffb8:	and	w0, w0, #0xff
    ffbc:	cmp	w0, #0x0
    ffc0:	b.ne	ffd0 <regfree+0x7608>  // b.any
    ffc4:	ldr	x0, [sp, #24]
    ffc8:	ldr	x0, [x0]
    ffcc:	bl	2230 <grub_mod_fini+0x1d10>
    ffd0:	nop
    ffd4:	ldp	x29, x30, [sp], #32
    ffd8:	ret
    ffdc:	stp	x29, x30, [sp, #-32]!
    ffe0:	mov	x29, sp
    ffe4:	str	x0, [sp, #24]
    ffe8:	str	x1, [sp, #16]
    ffec:	ldr	x0, [sp, #16]
    fff0:	add	x0, x0, #0x28
    fff4:	bl	ff58 <regfree+0x7590>
    fff8:	mov	w0, #0x0                   	// #0
    fffc:	ldp	x29, x30, [sp], #32
   10000:	ret
   10004:	stp	x29, x30, [sp, #-80]!
   10008:	mov	x29, sp
   1000c:	str	x0, [sp, #24]
   10010:	str	x1, [sp, #16]
   10014:	add	x0, sp, #0x28
   10018:	str	x0, [sp, #64]
   1001c:	ldr	x0, [sp, #24]
   10020:	ldr	x0, [x0]
   10024:	str	x0, [sp, #56]
   10028:	ldr	x0, [sp, #24]
   1002c:	str	x0, [sp, #72]
   10030:	ldr	x0, [sp, #72]
   10034:	add	x0, x0, #0x28
   10038:	mov	x3, x0
   1003c:	mov	x2, #0x0                   	// #0
   10040:	mov	x1, #0x0                   	// #0
   10044:	ldr	x0, [sp, #16]
   10048:	bl	fdb0 <regfree+0x73e8>
   1004c:	mov	x1, x0
   10050:	ldr	x0, [sp, #64]
   10054:	str	x1, [x0]
   10058:	ldr	x0, [sp, #64]
   1005c:	ldr	x0, [x0]
   10060:	cmp	x0, #0x0
   10064:	b.ne	10070 <regfree+0x76a8>  // b.any
   10068:	mov	x0, #0x0                   	// #0
   1006c:	b	10148 <regfree+0x7780>
   10070:	ldr	x0, [sp, #64]
   10074:	ldr	x0, [x0]
   10078:	ldr	x1, [sp, #56]
   1007c:	str	x1, [x0]
   10080:	ldr	x0, [sp, #64]
   10084:	ldr	x0, [x0]
   10088:	ldrb	w1, [x0, #50]
   1008c:	orr	w1, w1, #0x4
   10090:	strb	w1, [x0, #50]
   10094:	ldr	x0, [sp, #64]
   10098:	ldr	x0, [x0]
   1009c:	str	x0, [sp, #56]
   100a0:	ldr	x0, [sp, #72]
   100a4:	ldr	x0, [x0, #8]
   100a8:	cmp	x0, #0x0
   100ac:	b.eq	100cc <regfree+0x7704>  // b.none
   100b0:	ldr	x0, [sp, #72]
   100b4:	ldr	x0, [x0, #8]
   100b8:	str	x0, [sp, #72]
   100bc:	ldr	x0, [sp, #56]
   100c0:	add	x0, x0, #0x8
   100c4:	str	x0, [sp, #64]
   100c8:	b	10030 <regfree+0x7668>
   100cc:	str	xzr, [sp, #48]
   100d0:	b	10108 <regfree+0x7740>
   100d4:	ldr	x0, [sp, #72]
   100d8:	str	x0, [sp, #48]
   100dc:	ldr	x0, [sp, #72]
   100e0:	ldr	x0, [x0]
   100e4:	str	x0, [sp, #72]
   100e8:	ldr	x0, [sp, #56]
   100ec:	ldr	x0, [x0]
   100f0:	str	x0, [sp, #56]
   100f4:	ldr	x0, [sp, #72]
   100f8:	cmp	x0, #0x0
   100fc:	b.ne	10108 <regfree+0x7740>  // b.any
   10100:	ldr	x0, [sp, #40]
   10104:	b	10148 <regfree+0x7780>
   10108:	ldr	x0, [sp, #72]
   1010c:	ldr	x0, [x0, #16]
   10110:	ldr	x1, [sp, #48]
   10114:	cmp	x1, x0
   10118:	b.eq	100d4 <regfree+0x770c>  // b.none
   1011c:	ldr	x0, [sp, #72]
   10120:	ldr	x0, [x0, #16]
   10124:	cmp	x0, #0x0
   10128:	b.eq	100d4 <regfree+0x770c>  // b.none
   1012c:	ldr	x0, [sp, #72]
   10130:	ldr	x0, [x0, #16]
   10134:	str	x0, [sp, #72]
   10138:	ldr	x0, [sp, #56]
   1013c:	add	x0, x0, #0x10
   10140:	str	x0, [sp, #64]
   10144:	b	10030 <regfree+0x7668>
   10148:	ldp	x29, x30, [sp], #80
   1014c:	ret

0000000000010150 <regexec>:
   10150:	sub	sp, sp, #0x70
   10154:	stp	x29, x30, [sp, #16]
   10158:	add	x29, sp, #0x10
   1015c:	str	x0, [sp, #72]
   10160:	str	x1, [sp, #64]
   10164:	str	x2, [sp, #56]
   10168:	str	x3, [sp, #48]
   1016c:	str	w4, [sp, #44]
   10170:	ldr	x0, [sp, #72]
   10174:	ldr	x0, [x0]
   10178:	str	x0, [sp, #88]
   1017c:	ldr	w0, [sp, #44]
   10180:	and	w0, w0, #0xfffffff8
   10184:	cmp	w0, #0x0
   10188:	b.eq	10194 <regexec+0x44>  // b.none
   1018c:	mov	w0, #0x2                   	// #2
   10190:	b	1025c <regexec+0x10c>
   10194:	ldr	w0, [sp, #44]
   10198:	and	w0, w0, #0x4
   1019c:	cmp	w0, #0x0
   101a0:	b.eq	101c0 <regexec+0x70>  // b.none
   101a4:	ldr	x0, [sp, #48]
   101a8:	ldr	w0, [x0]
   101ac:	str	w0, [sp, #104]
   101b0:	ldr	x0, [sp, #48]
   101b4:	ldr	w0, [x0, #4]
   101b8:	str	w0, [sp, #100]
   101bc:	b	101d0 <regexec+0x80>
   101c0:	str	wzr, [sp, #104]
   101c4:	ldr	x0, [sp, #64]
   101c8:	bl	22b8 <grub_mod_fini+0x1d98>
   101cc:	str	w0, [sp, #100]
   101d0:	ldr	x0, [sp, #72]
   101d4:	ldrb	w0, [x0, #56]
   101d8:	and	w0, w0, #0x10
   101dc:	and	w0, w0, #0xff
   101e0:	cmp	w0, #0x0
   101e4:	b.eq	1021c <regexec+0xcc>  // b.none
   101e8:	ldr	w0, [sp, #44]
   101ec:	str	w0, [sp]
   101f0:	mov	x7, #0x0                   	// #0
   101f4:	mov	x6, #0x0                   	// #0
   101f8:	ldr	w5, [sp, #100]
   101fc:	ldr	w4, [sp, #100]
   10200:	ldr	w3, [sp, #104]
   10204:	ldr	w2, [sp, #100]
   10208:	ldr	x1, [sp, #64]
   1020c:	ldr	x0, [sp, #72]
   10210:	bl	10d9c <re_set_registers+0x9c>
   10214:	str	w0, [sp, #108]
   10218:	b	1024c <regexec+0xfc>
   1021c:	ldr	w0, [sp, #44]
   10220:	str	w0, [sp]
   10224:	ldr	x7, [sp, #48]
   10228:	ldr	x6, [sp, #56]
   1022c:	ldr	w5, [sp, #100]
   10230:	ldr	w4, [sp, #100]
   10234:	ldr	w3, [sp, #104]
   10238:	ldr	w2, [sp, #100]
   1023c:	ldr	x1, [sp, #64]
   10240:	ldr	x0, [sp, #72]
   10244:	bl	10d9c <re_set_registers+0x9c>
   10248:	str	w0, [sp, #108]
   1024c:	ldr	w0, [sp, #108]
   10250:	cmp	w0, #0x0
   10254:	cset	w0, ne  // ne = any
   10258:	and	w0, w0, #0xff
   1025c:	ldp	x29, x30, [sp, #16]
   10260:	add	sp, sp, #0x70
   10264:	ret

0000000000010268 <re_match>:
   10268:	stp	x29, x30, [sp, #-48]!
   1026c:	mov	x29, sp
   10270:	str	x0, [sp, #40]
   10274:	str	x1, [sp, #32]
   10278:	str	w2, [sp, #28]
   1027c:	str	w3, [sp, #24]
   10280:	str	x4, [sp, #16]
   10284:	mov	w7, #0x1                   	// #1
   10288:	ldr	x6, [sp, #16]
   1028c:	ldr	w5, [sp, #28]
   10290:	mov	w4, #0x0                   	// #0
   10294:	ldr	w3, [sp, #24]
   10298:	ldr	w2, [sp, #28]
   1029c:	ldr	x1, [sp, #32]
   102a0:	ldr	x0, [sp, #40]
   102a4:	bl	10584 <re_search_2+0x21c>
   102a8:	ldp	x29, x30, [sp], #48
   102ac:	ret

00000000000102b0 <re_search>:
   102b0:	stp	x29, x30, [sp, #-64]!
   102b4:	mov	x29, sp
   102b8:	str	x0, [sp, #56]
   102bc:	str	x1, [sp, #48]
   102c0:	str	w2, [sp, #44]
   102c4:	str	w3, [sp, #40]
   102c8:	str	w4, [sp, #36]
   102cc:	str	x5, [sp, #24]
   102d0:	mov	w7, #0x0                   	// #0
   102d4:	ldr	x6, [sp, #24]
   102d8:	ldr	w5, [sp, #44]
   102dc:	ldr	w4, [sp, #36]
   102e0:	ldr	w3, [sp, #40]
   102e4:	ldr	w2, [sp, #44]
   102e8:	ldr	x1, [sp, #48]
   102ec:	ldr	x0, [sp, #56]
   102f0:	bl	10584 <re_search_2+0x21c>
   102f4:	ldp	x29, x30, [sp], #64
   102f8:	ret

00000000000102fc <re_match_2>:
   102fc:	sub	sp, sp, #0x50
   10300:	stp	x29, x30, [sp, #16]
   10304:	add	x29, sp, #0x10
   10308:	str	x0, [sp, #72]
   1030c:	str	x1, [sp, #64]
   10310:	str	w2, [sp, #60]
   10314:	str	x3, [sp, #48]
   10318:	str	w4, [sp, #56]
   1031c:	str	w5, [sp, #44]
   10320:	str	x6, [sp, #32]
   10324:	str	w7, [sp, #40]
   10328:	mov	w0, #0x1                   	// #1
   1032c:	strb	w0, [sp, #8]
   10330:	ldr	w0, [sp, #40]
   10334:	str	w0, [sp]
   10338:	ldr	x7, [sp, #32]
   1033c:	mov	w6, #0x0                   	// #0
   10340:	ldr	w5, [sp, #44]
   10344:	ldr	w4, [sp, #56]
   10348:	ldr	x3, [sp, #48]
   1034c:	ldr	w2, [sp, #60]
   10350:	ldr	x1, [sp, #64]
   10354:	ldr	x0, [sp, #72]
   10358:	bl	103d0 <re_search_2+0x68>
   1035c:	ldp	x29, x30, [sp, #16]
   10360:	add	sp, sp, #0x50
   10364:	ret

0000000000010368 <re_search_2>:
   10368:	sub	sp, sp, #0x50
   1036c:	stp	x29, x30, [sp, #16]
   10370:	add	x29, sp, #0x10
   10374:	str	x0, [sp, #72]
   10378:	str	x1, [sp, #64]
   1037c:	str	w2, [sp, #60]
   10380:	str	x3, [sp, #48]
   10384:	str	w4, [sp, #56]
   10388:	str	w5, [sp, #44]
   1038c:	str	w6, [sp, #40]
   10390:	str	x7, [sp, #32]
   10394:	strb	wzr, [sp, #8]
   10398:	ldr	w0, [sp, #80]
   1039c:	str	w0, [sp]
   103a0:	ldr	x7, [sp, #32]
   103a4:	ldr	w6, [sp, #40]
   103a8:	ldr	w5, [sp, #44]
   103ac:	ldr	w4, [sp, #56]
   103b0:	ldr	x3, [sp, #48]
   103b4:	ldr	w2, [sp, #60]
   103b8:	ldr	x1, [sp, #64]
   103bc:	ldr	x0, [sp, #72]
   103c0:	bl	103d0 <re_search_2+0x68>
   103c4:	ldp	x29, x30, [sp, #16]
   103c8:	add	sp, sp, #0x50
   103cc:	ret
   103d0:	stp	x29, x30, [sp, #-96]!
   103d4:	mov	x29, sp
   103d8:	str	x0, [sp, #56]
   103dc:	str	x1, [sp, #48]
   103e0:	str	w2, [sp, #44]
   103e4:	str	x3, [sp, #32]
   103e8:	str	w4, [sp, #40]
   103ec:	str	w5, [sp, #28]
   103f0:	str	w6, [sp, #24]
   103f4:	str	x7, [sp, #16]
   103f8:	str	xzr, [sp, #80]
   103fc:	ldr	w0, [sp, #44]
   10400:	lsr	w0, w0, #31
   10404:	and	w0, w0, #0xff
   10408:	and	x0, x0, #0xff
   1040c:	cmp	x0, #0x0
   10410:	b.ne	1042c <re_search_2+0xc4>  // b.any
   10414:	ldr	w0, [sp, #40]
   10418:	lsr	w0, w0, #31
   1041c:	and	w0, w0, #0xff
   10420:	and	x0, x0, #0xff
   10424:	cmp	x0, #0x0
   10428:	b.eq	10434 <re_search_2+0xcc>  // b.none
   1042c:	mov	w0, #0x1                   	// #1
   10430:	b	10438 <re_search_2+0xd0>
   10434:	mov	w0, #0x0                   	// #0
   10438:	cmp	w0, #0x0
   1043c:	b.ne	10458 <re_search_2+0xf0>  // b.any
   10440:	ldr	w0, [sp, #96]
   10444:	lsr	w0, w0, #31
   10448:	and	w0, w0, #0xff
   1044c:	and	x0, x0, #0xff
   10450:	cmp	x0, #0x0
   10454:	b.eq	10460 <re_search_2+0xf8>  // b.none
   10458:	mov	w0, #0x1                   	// #1
   1045c:	b	10464 <re_search_2+0xfc>
   10460:	mov	w0, #0x0                   	// #0
   10464:	cmp	w0, #0x0
   10468:	b.ne	104a0 <re_search_2+0x138>  // b.any
   1046c:	mov	w2, #0x0                   	// #0
   10470:	ldr	w1, [sp, #44]
   10474:	ldr	w0, [sp, #40]
   10478:	adds	w0, w1, w0
   1047c:	b.vc	10484 <re_search_2+0x11c>
   10480:	mov	w2, #0x1                   	// #1
   10484:	str	w0, [sp, #72]
   10488:	mov	w0, w2
   1048c:	and	w0, w0, #0x1
   10490:	and	w0, w0, #0xff
   10494:	sxtw	x0, w0
   10498:	cmp	x0, #0x0
   1049c:	b.eq	104a8 <re_search_2+0x140>  // b.none
   104a0:	mov	w0, #0xfffffffe            	// #-2
   104a4:	b	1057c <re_search_2+0x214>
   104a8:	ldr	w0, [sp, #40]
   104ac:	cmp	w0, #0x0
   104b0:	b.le	1053c <re_search_2+0x1d4>
   104b4:	ldr	w0, [sp, #44]
   104b8:	cmp	w0, #0x0
   104bc:	b.le	10530 <re_search_2+0x1c8>
   104c0:	ldr	w0, [sp, #72]
   104c4:	sxtw	x0, w0
   104c8:	bl	2250 <grub_mod_fini+0x1d30>
   104cc:	str	x0, [sp, #80]
   104d0:	ldr	x0, [sp, #80]
   104d4:	cmp	x0, #0x0
   104d8:	cset	w0, eq  // eq = none
   104dc:	and	w0, w0, #0xff
   104e0:	and	x0, x0, #0xff
   104e4:	cmp	x0, #0x0
   104e8:	b.eq	104f4 <re_search_2+0x18c>  // b.none
   104ec:	mov	w0, #0xfffffffe            	// #-2
   104f0:	b	1057c <re_search_2+0x214>
   104f4:	ldrsw	x0, [sp, #44]
   104f8:	mov	x2, x0
   104fc:	ldr	x1, [sp, #48]
   10500:	ldr	x0, [sp, #80]
   10504:	bl	1d38 <grub_mod_fini+0x1818>
   10508:	ldrsw	x0, [sp, #44]
   1050c:	ldr	x1, [sp, #80]
   10510:	add	x0, x1, x0
   10514:	ldrsw	x1, [sp, #40]
   10518:	mov	x2, x1
   1051c:	ldr	x1, [sp, #32]
   10520:	bl	1d38 <grub_mod_fini+0x1818>
   10524:	ldr	x0, [sp, #80]
   10528:	str	x0, [sp, #88]
   1052c:	b	10544 <re_search_2+0x1dc>
   10530:	ldr	x0, [sp, #32]
   10534:	str	x0, [sp, #88]
   10538:	b	10544 <re_search_2+0x1dc>
   1053c:	ldr	x0, [sp, #48]
   10540:	str	x0, [sp, #88]
   10544:	ldr	w0, [sp, #72]
   10548:	ldrb	w7, [sp, #104]
   1054c:	ldr	x6, [sp, #16]
   10550:	ldr	w5, [sp, #96]
   10554:	ldr	w4, [sp, #24]
   10558:	ldr	w3, [sp, #28]
   1055c:	mov	w2, w0
   10560:	ldr	x1, [sp, #88]
   10564:	ldr	x0, [sp, #56]
   10568:	bl	10584 <re_search_2+0x21c>
   1056c:	str	w0, [sp, #76]
   10570:	ldr	x0, [sp, #80]
   10574:	bl	2230 <grub_mod_fini+0x1d10>
   10578:	ldr	w0, [sp, #76]
   1057c:	ldp	x29, x30, [sp], #96
   10580:	ret
   10584:	sub	sp, sp, #0x80
   10588:	stp	x29, x30, [sp, #16]
   1058c:	add	x29, sp, #0x10
   10590:	str	x0, [sp, #72]
   10594:	str	x1, [sp, #64]
   10598:	str	w2, [sp, #60]
   1059c:	str	w3, [sp, #56]
   105a0:	str	w4, [sp, #52]
   105a4:	str	w5, [sp, #48]
   105a8:	str	x6, [sp, #40]
   105ac:	strb	w7, [sp, #39]
   105b0:	str	wzr, [sp, #112]
   105b4:	ldr	x0, [sp, #72]
   105b8:	ldr	x0, [x0]
   105bc:	str	x0, [sp, #104]
   105c0:	ldr	w1, [sp, #56]
   105c4:	ldr	w0, [sp, #52]
   105c8:	add	w0, w1, w0
   105cc:	str	w0, [sp, #116]
   105d0:	ldr	w0, [sp, #56]
   105d4:	lsr	w0, w0, #31
   105d8:	and	w0, w0, #0xff
   105dc:	and	x0, x0, #0xff
   105e0:	cmp	x0, #0x0
   105e4:	b.ne	10608 <re_search_2+0x2a0>  // b.any
   105e8:	ldr	w1, [sp, #56]
   105ec:	ldr	w0, [sp, #60]
   105f0:	cmp	w1, w0
   105f4:	cset	w0, gt
   105f8:	and	w0, w0, #0xff
   105fc:	and	x0, x0, #0xff
   10600:	cmp	x0, #0x0
   10604:	b.eq	10610 <re_search_2+0x2a8>  // b.none
   10608:	mov	w0, #0xffffffff            	// #-1
   1060c:	b	109e4 <re_search_2+0x67c>
   10610:	ldr	w1, [sp, #60]
   10614:	ldr	w0, [sp, #116]
   10618:	cmp	w1, w0
   1061c:	cset	w0, lt  // lt = tstop
   10620:	and	w0, w0, #0xff
   10624:	and	x0, x0, #0xff
   10628:	cmp	x0, #0x0
   1062c:	b.ne	10680 <re_search_2+0x318>  // b.any
   10630:	ldr	w0, [sp, #52]
   10634:	mvn	w0, w0
   10638:	lsr	w0, w0, #31
   1063c:	and	w0, w0, #0xff
   10640:	and	x0, x0, #0xff
   10644:	cmp	x0, #0x0
   10648:	b.eq	10674 <re_search_2+0x30c>  // b.none
   1064c:	ldr	w1, [sp, #116]
   10650:	ldr	w0, [sp, #56]
   10654:	cmp	w1, w0
   10658:	cset	w0, lt  // lt = tstop
   1065c:	and	w0, w0, #0xff
   10660:	and	x0, x0, #0xff
   10664:	cmp	x0, #0x0
   10668:	b.eq	10674 <re_search_2+0x30c>  // b.none
   1066c:	mov	w0, #0x1                   	// #1
   10670:	b	10678 <re_search_2+0x310>
   10674:	mov	w0, #0x0                   	// #0
   10678:	cmp	w0, #0x0
   1067c:	b.eq	1068c <re_search_2+0x324>  // b.none
   10680:	ldr	w0, [sp, #60]
   10684:	str	w0, [sp, #116]
   10688:	b	106f4 <re_search_2+0x38c>
   1068c:	ldr	w0, [sp, #116]
   10690:	lsr	w0, w0, #31
   10694:	and	w0, w0, #0xff
   10698:	and	x0, x0, #0xff
   1069c:	cmp	x0, #0x0
   106a0:	b.ne	106f0 <re_search_2+0x388>  // b.any
   106a4:	ldr	w0, [sp, #52]
   106a8:	lsr	w0, w0, #31
   106ac:	and	w0, w0, #0xff
   106b0:	and	x0, x0, #0xff
   106b4:	cmp	x0, #0x0
   106b8:	b.eq	106e4 <re_search_2+0x37c>  // b.none
   106bc:	ldr	w1, [sp, #56]
   106c0:	ldr	w0, [sp, #116]
   106c4:	cmp	w1, w0
   106c8:	cset	w0, le
   106cc:	and	w0, w0, #0xff
   106d0:	and	x0, x0, #0xff
   106d4:	cmp	x0, #0x0
   106d8:	b.eq	106e4 <re_search_2+0x37c>  // b.none
   106dc:	mov	w0, #0x1                   	// #1
   106e0:	b	106e8 <re_search_2+0x380>
   106e4:	mov	w0, #0x0                   	// #0
   106e8:	cmp	w0, #0x0
   106ec:	b.eq	106f4 <re_search_2+0x38c>  // b.none
   106f0:	str	wzr, [sp, #116]
   106f4:	ldr	x0, [sp, #72]
   106f8:	ldrb	w0, [x0, #56]
   106fc:	lsr	w0, w0, #5
   10700:	and	w0, w0, #0xff
   10704:	and	w0, w0, #0x1
   10708:	ldr	w1, [sp, #112]
   1070c:	orr	w0, w1, w0
   10710:	str	w0, [sp, #112]
   10714:	ldr	x0, [sp, #72]
   10718:	ldrb	w0, [x0, #56]
   1071c:	lsr	w0, w0, #5
   10720:	and	w0, w0, #0xff
   10724:	and	w0, w0, #0x2
   10728:	ldr	w1, [sp, #112]
   1072c:	orr	w0, w1, w0
   10730:	str	w0, [sp, #112]
   10734:	ldr	w1, [sp, #56]
   10738:	ldr	w0, [sp, #116]
   1073c:	cmp	w1, w0
   10740:	b.ge	10774 <re_search_2+0x40c>  // b.tcont
   10744:	ldr	x0, [sp, #72]
   10748:	ldr	x0, [x0, #32]
   1074c:	cmp	x0, #0x0
   10750:	b.eq	10774 <re_search_2+0x40c>  // b.none
   10754:	ldr	x0, [sp, #72]
   10758:	ldrb	w0, [x0, #56]
   1075c:	and	w0, w0, #0x8
   10760:	and	w0, w0, #0xff
   10764:	cmp	w0, #0x0
   10768:	b.ne	10774 <re_search_2+0x40c>  // b.any
   1076c:	ldr	x0, [sp, #72]
   10770:	bl	7cb0 <re_compile_fastmap>
   10774:	ldr	x0, [sp, #72]
   10778:	ldrb	w0, [x0, #56]
   1077c:	ubfx	x0, x0, #4, #1
   10780:	and	w0, w0, #0xff
   10784:	and	x0, x0, #0xff
   10788:	cmp	x0, #0x0
   1078c:	b.eq	10794 <re_search_2+0x42c>  // b.none
   10790:	str	xzr, [sp, #40]
   10794:	ldr	x0, [sp, #40]
   10798:	cmp	x0, #0x0
   1079c:	b.ne	107ac <re_search_2+0x444>  // b.any
   107a0:	mov	w0, #0x1                   	// #1
   107a4:	str	w0, [sp, #124]
   107a8:	b	10848 <re_search_2+0x4e0>
   107ac:	ldr	x0, [sp, #72]
   107b0:	ldrb	w0, [x0, #56]
   107b4:	and	w0, w0, #0x6
   107b8:	and	w0, w0, #0xff
   107bc:	cmp	w0, #0x4
   107c0:	cset	w0, eq  // eq = none
   107c4:	and	w0, w0, #0xff
   107c8:	and	x0, x0, #0xff
   107cc:	cmp	x0, #0x0
   107d0:	b.eq	10838 <re_search_2+0x4d0>  // b.none
   107d4:	ldr	x0, [sp, #40]
   107d8:	ldr	w0, [x0]
   107dc:	mov	w1, w0
   107e0:	ldr	x0, [sp, #72]
   107e4:	ldr	x0, [x0, #48]
   107e8:	cmp	x1, x0
   107ec:	cset	w0, ls  // ls = plast
   107f0:	and	w0, w0, #0xff
   107f4:	and	x0, x0, #0xff
   107f8:	cmp	x0, #0x0
   107fc:	b.eq	10838 <re_search_2+0x4d0>  // b.none
   10800:	ldr	x0, [sp, #40]
   10804:	ldr	w0, [x0]
   10808:	str	w0, [sp, #124]
   1080c:	ldr	w0, [sp, #124]
   10810:	cmp	w0, #0x0
   10814:	cset	w0, le
   10818:	and	w0, w0, #0xff
   1081c:	and	x0, x0, #0xff
   10820:	cmp	x0, #0x0
   10824:	b.eq	10848 <re_search_2+0x4e0>  // b.none
   10828:	str	xzr, [sp, #40]
   1082c:	mov	w0, #0x1                   	// #1
   10830:	str	w0, [sp, #124]
   10834:	b	10848 <re_search_2+0x4e0>
   10838:	ldr	x0, [sp, #72]
   1083c:	ldr	x0, [x0, #48]
   10840:	add	w0, w0, #0x1
   10844:	str	w0, [sp, #124]
   10848:	ldrsw	x0, [sp, #124]
   1084c:	lsl	x0, x0, #3
   10850:	bl	2250 <grub_mod_fini+0x1d30>
   10854:	str	x0, [sp, #96]
   10858:	ldr	x0, [sp, #96]
   1085c:	cmp	x0, #0x0
   10860:	cset	w0, eq  // eq = none
   10864:	and	w0, w0, #0xff
   10868:	and	x0, x0, #0xff
   1086c:	cmp	x0, #0x0
   10870:	b.eq	10880 <re_search_2+0x518>  // b.none
   10874:	mov	w0, #0xfffffffe            	// #-2
   10878:	str	w0, [sp, #120]
   1087c:	b	109e0 <re_search_2+0x678>
   10880:	ldrsw	x1, [sp, #124]
   10884:	ldr	w0, [sp, #112]
   10888:	str	w0, [sp]
   1088c:	ldr	x7, [sp, #96]
   10890:	mov	x6, x1
   10894:	ldr	w5, [sp, #48]
   10898:	ldr	w4, [sp, #116]
   1089c:	ldr	w3, [sp, #56]
   108a0:	ldr	w2, [sp, #60]
   108a4:	ldr	x1, [sp, #64]
   108a8:	ldr	x0, [sp, #72]
   108ac:	bl	10d9c <re_set_registers+0x9c>
   108b0:	str	w0, [sp, #92]
   108b4:	str	wzr, [sp, #120]
   108b8:	ldr	w0, [sp, #92]
   108bc:	cmp	w0, #0x0
   108c0:	b.eq	108e4 <re_search_2+0x57c>  // b.none
   108c4:	ldr	w0, [sp, #92]
   108c8:	cmp	w0, #0x1
   108cc:	b.ne	108d8 <re_search_2+0x570>  // b.any
   108d0:	mov	w0, #0xffffffff            	// #-1
   108d4:	b	108dc <re_search_2+0x574>
   108d8:	mov	w0, #0xfffffffe            	// #-2
   108dc:	str	w0, [sp, #120]
   108e0:	b	1095c <re_search_2+0x5f4>
   108e4:	ldr	x0, [sp, #40]
   108e8:	cmp	x0, #0x0
   108ec:	b.eq	1095c <re_search_2+0x5f4>  // b.none
   108f0:	ldr	x0, [sp, #72]
   108f4:	ldrb	w0, [x0, #56]
   108f8:	ubfx	x0, x0, #1, #2
   108fc:	and	w0, w0, #0xff
   10900:	mov	w3, w0
   10904:	ldr	w2, [sp, #124]
   10908:	ldr	x1, [sp, #96]
   1090c:	ldr	x0, [sp, #40]
   10910:	bl	109f8 <re_search_2+0x690>
   10914:	and	w0, w0, #0x3
   10918:	and	w2, w0, #0xff
   1091c:	ldr	x1, [sp, #72]
   10920:	ldrb	w0, [x1, #56]
   10924:	bfi	w0, w2, #1, #2
   10928:	strb	w0, [x1, #56]
   1092c:	ldr	x0, [sp, #72]
   10930:	ldrb	w0, [x0, #56]
   10934:	and	w0, w0, #0x6
   10938:	and	w0, w0, #0xff
   1093c:	cmp	w0, #0x0
   10940:	cset	w0, eq  // eq = none
   10944:	and	w0, w0, #0xff
   10948:	and	x0, x0, #0xff
   1094c:	cmp	x0, #0x0
   10950:	b.eq	1095c <re_search_2+0x5f4>  // b.none
   10954:	mov	w0, #0xfffffffe            	// #-2
   10958:	str	w0, [sp, #120]
   1095c:	ldr	w0, [sp, #120]
   10960:	cmp	w0, #0x0
   10964:	cset	w0, eq  // eq = none
   10968:	and	w0, w0, #0xff
   1096c:	and	x0, x0, #0xff
   10970:	cmp	x0, #0x0
   10974:	b.eq	109d8 <re_search_2+0x670>  // b.none
   10978:	ldrb	w0, [sp, #39]
   1097c:	cmp	w0, #0x0
   10980:	b.eq	109cc <re_search_2+0x664>  // b.none
   10984:	ldr	x0, [sp, #96]
   10988:	ldr	w0, [x0]
   1098c:	ldr	w1, [sp, #56]
   10990:	cmp	w1, w0
   10994:	cset	w0, eq  // eq = none
   10998:	and	w0, w0, #0xff
   1099c:	mov	w2, w0
   109a0:	mov	w1, #0x1be                 	// #446
   109a4:	adrp	x0, 0 <grub_mod_init-0x450>
   109a8:	add	x0, x0, #0x0
   109ac:	ldr	x0, [x0]
   109b0:	bl	1fc8 <grub_mod_fini+0x1aa8>
   109b4:	ldr	x0, [sp, #96]
   109b8:	ldr	w1, [x0, #4]
   109bc:	ldr	w0, [sp, #56]
   109c0:	sub	w0, w1, w0
   109c4:	str	w0, [sp, #120]
   109c8:	b	109d8 <re_search_2+0x670>
   109cc:	ldr	x0, [sp, #96]
   109d0:	ldr	w0, [x0]
   109d4:	str	w0, [sp, #120]
   109d8:	ldr	x0, [sp, #96]
   109dc:	bl	2230 <grub_mod_fini+0x1d10>
   109e0:	ldr	w0, [sp, #120]
   109e4:	ldp	x29, x30, [sp, #16]
   109e8:	add	sp, sp, #0x80
   109ec:	ret
	...
   109f8:	stp	x29, x30, [sp, #-80]!
   109fc:	mov	x29, sp
   10a00:	str	x0, [sp, #40]
   10a04:	str	x1, [sp, #32]
   10a08:	str	w2, [sp, #28]
   10a0c:	str	w3, [sp, #24]
   10a10:	mov	w0, #0x1                   	// #1
   10a14:	str	w0, [sp, #76]
   10a18:	ldr	w0, [sp, #28]
   10a1c:	add	w0, w0, #0x1
   10a20:	str	w0, [sp, #68]
   10a24:	ldr	w0, [sp, #24]
   10a28:	cmp	w0, #0x0
   10a2c:	b.ne	10acc <re_search_2+0x764>  // b.any
   10a30:	ldrsw	x0, [sp, #68]
   10a34:	lsl	x0, x0, #2
   10a38:	bl	2250 <grub_mod_fini+0x1d30>
   10a3c:	mov	x1, x0
   10a40:	ldr	x0, [sp, #40]
   10a44:	str	x1, [x0, #8]
   10a48:	ldr	x0, [sp, #40]
   10a4c:	ldr	x0, [x0, #8]
   10a50:	cmp	x0, #0x0
   10a54:	cset	w0, eq  // eq = none
   10a58:	and	w0, w0, #0xff
   10a5c:	and	x0, x0, #0xff
   10a60:	cmp	x0, #0x0
   10a64:	b.eq	10a70 <re_search_2+0x708>  // b.none
   10a68:	mov	w0, #0x0                   	// #0
   10a6c:	b	10cf0 <re_search_2+0x988>
   10a70:	ldrsw	x0, [sp, #68]
   10a74:	lsl	x0, x0, #2
   10a78:	bl	2250 <grub_mod_fini+0x1d30>
   10a7c:	mov	x1, x0
   10a80:	ldr	x0, [sp, #40]
   10a84:	str	x1, [x0, #16]
   10a88:	ldr	x0, [sp, #40]
   10a8c:	ldr	x0, [x0, #16]
   10a90:	cmp	x0, #0x0
   10a94:	cset	w0, eq  // eq = none
   10a98:	and	w0, w0, #0xff
   10a9c:	and	x0, x0, #0xff
   10aa0:	cmp	x0, #0x0
   10aa4:	b.eq	10abc <re_search_2+0x754>  // b.none
   10aa8:	ldr	x0, [sp, #40]
   10aac:	ldr	x0, [x0, #8]
   10ab0:	bl	2230 <grub_mod_fini+0x1d10>
   10ab4:	mov	w0, #0x0                   	// #0
   10ab8:	b	10cf0 <re_search_2+0x988>
   10abc:	ldr	w1, [sp, #68]
   10ac0:	ldr	x0, [sp, #40]
   10ac4:	str	w1, [x0]
   10ac8:	b	10c14 <re_search_2+0x8ac>
   10acc:	ldr	w0, [sp, #24]
   10ad0:	cmp	w0, #0x1
   10ad4:	b.ne	10bb4 <re_search_2+0x84c>  // b.any
   10ad8:	ldr	x0, [sp, #40]
   10adc:	ldr	w1, [x0]
   10ae0:	ldr	w0, [sp, #68]
   10ae4:	cmp	w1, w0
   10ae8:	cset	w0, cc  // cc = lo, ul, last
   10aec:	and	w0, w0, #0xff
   10af0:	and	x0, x0, #0xff
   10af4:	cmp	x0, #0x0
   10af8:	b.eq	10c14 <re_search_2+0x8ac>  // b.none
   10afc:	ldr	x0, [sp, #40]
   10b00:	ldr	x2, [x0, #8]
   10b04:	ldrsw	x0, [sp, #68]
   10b08:	lsl	x0, x0, #2
   10b0c:	mov	x1, x0
   10b10:	mov	x0, x2
   10b14:	bl	2294 <grub_mod_fini+0x1d74>
   10b18:	str	x0, [sp, #56]
   10b1c:	ldr	x0, [sp, #56]
   10b20:	cmp	x0, #0x0
   10b24:	cset	w0, eq  // eq = none
   10b28:	and	w0, w0, #0xff
   10b2c:	and	x0, x0, #0xff
   10b30:	cmp	x0, #0x0
   10b34:	b.eq	10b40 <re_search_2+0x7d8>  // b.none
   10b38:	mov	w0, #0x0                   	// #0
   10b3c:	b	10cf0 <re_search_2+0x988>
   10b40:	ldr	x0, [sp, #40]
   10b44:	ldr	x2, [x0, #16]
   10b48:	ldrsw	x0, [sp, #68]
   10b4c:	lsl	x0, x0, #2
   10b50:	mov	x1, x0
   10b54:	mov	x0, x2
   10b58:	bl	2294 <grub_mod_fini+0x1d74>
   10b5c:	str	x0, [sp, #48]
   10b60:	ldr	x0, [sp, #48]
   10b64:	cmp	x0, #0x0
   10b68:	cset	w0, eq  // eq = none
   10b6c:	and	w0, w0, #0xff
   10b70:	and	x0, x0, #0xff
   10b74:	cmp	x0, #0x0
   10b78:	b.eq	10b8c <re_search_2+0x824>  // b.none
   10b7c:	ldr	x0, [sp, #56]
   10b80:	bl	2230 <grub_mod_fini+0x1d10>
   10b84:	mov	w0, #0x0                   	// #0
   10b88:	b	10cf0 <re_search_2+0x988>
   10b8c:	ldr	x0, [sp, #40]
   10b90:	ldr	x1, [sp, #56]
   10b94:	str	x1, [x0, #8]
   10b98:	ldr	x0, [sp, #40]
   10b9c:	ldr	x1, [sp, #48]
   10ba0:	str	x1, [x0, #16]
   10ba4:	ldr	w1, [sp, #68]
   10ba8:	ldr	x0, [sp, #40]
   10bac:	str	w1, [x0]
   10bb0:	b	10c14 <re_search_2+0x8ac>
   10bb4:	ldr	w0, [sp, #24]
   10bb8:	cmp	w0, #0x2
   10bbc:	cset	w0, eq  // eq = none
   10bc0:	and	w0, w0, #0xff
   10bc4:	mov	w2, w0
   10bc8:	mov	w1, #0x1f9                 	// #505
   10bcc:	adrp	x0, 0 <grub_mod_init-0x450>
   10bd0:	add	x0, x0, #0x0
   10bd4:	ldr	x0, [x0]
   10bd8:	bl	1fc8 <grub_mod_fini+0x1aa8>
   10bdc:	ldr	x0, [sp, #40]
   10be0:	ldr	w1, [x0]
   10be4:	ldr	w0, [sp, #28]
   10be8:	cmp	w1, w0
   10bec:	cset	w0, cs  // cs = hs, nlast
   10bf0:	and	w0, w0, #0xff
   10bf4:	mov	w2, w0
   10bf8:	mov	w1, #0x1fb                 	// #507
   10bfc:	adrp	x0, 0 <grub_mod_init-0x450>
   10c00:	add	x0, x0, #0x0
   10c04:	ldr	x0, [x0]
   10c08:	bl	1fc8 <grub_mod_fini+0x1aa8>
   10c0c:	mov	w0, #0x2                   	// #2
   10c10:	str	w0, [sp, #76]
   10c14:	str	wzr, [sp, #72]
   10c18:	b	10c80 <re_search_2+0x918>
   10c1c:	ldrsw	x0, [sp, #72]
   10c20:	lsl	x0, x0, #3
   10c24:	ldr	x1, [sp, #32]
   10c28:	add	x1, x1, x0
   10c2c:	ldr	x0, [sp, #40]
   10c30:	ldr	x2, [x0, #8]
   10c34:	ldrsw	x0, [sp, #72]
   10c38:	lsl	x0, x0, #2
   10c3c:	add	x0, x2, x0
   10c40:	ldr	w1, [x1]
   10c44:	str	w1, [x0]
   10c48:	ldrsw	x0, [sp, #72]
   10c4c:	lsl	x0, x0, #3
   10c50:	ldr	x1, [sp, #32]
   10c54:	add	x1, x1, x0
   10c58:	ldr	x0, [sp, #40]
   10c5c:	ldr	x2, [x0, #16]
   10c60:	ldrsw	x0, [sp, #72]
   10c64:	lsl	x0, x0, #2
   10c68:	add	x0, x2, x0
   10c6c:	ldr	w1, [x1, #4]
   10c70:	str	w1, [x0]
   10c74:	ldr	w0, [sp, #72]
   10c78:	add	w0, w0, #0x1
   10c7c:	str	w0, [sp, #72]
   10c80:	ldr	w1, [sp, #72]
   10c84:	ldr	w0, [sp, #28]
   10c88:	cmp	w1, w0
   10c8c:	b.lt	10c1c <re_search_2+0x8b4>  // b.tstop
   10c90:	b	10cd8 <re_search_2+0x970>
   10c94:	ldr	x0, [sp, #40]
   10c98:	ldr	x1, [x0, #16]
   10c9c:	ldrsw	x0, [sp, #72]
   10ca0:	lsl	x0, x0, #2
   10ca4:	add	x0, x1, x0
   10ca8:	mov	w1, #0xffffffff            	// #-1
   10cac:	str	w1, [x0]
   10cb0:	ldr	x1, [sp, #40]
   10cb4:	ldr	x2, [x1, #8]
   10cb8:	ldrsw	x1, [sp, #72]
   10cbc:	lsl	x1, x1, #2
   10cc0:	add	x1, x2, x1
   10cc4:	ldr	w0, [x0]
   10cc8:	str	w0, [x1]
   10ccc:	ldr	w0, [sp, #72]
   10cd0:	add	w0, w0, #0x1
   10cd4:	str	w0, [sp, #72]
   10cd8:	ldr	x0, [sp, #40]
   10cdc:	ldr	w1, [x0]
   10ce0:	ldr	w0, [sp, #72]
   10ce4:	cmp	w1, w0
   10ce8:	b.hi	10c94 <re_search_2+0x92c>  // b.pmore
   10cec:	ldr	w0, [sp, #76]
   10cf0:	ldp	x29, x30, [sp], #80
   10cf4:	ret
	...

0000000000010d00 <re_set_registers>:
   10d00:	sub	sp, sp, #0x30
   10d04:	str	x0, [sp, #40]
   10d08:	str	x1, [sp, #32]
   10d0c:	str	w2, [sp, #28]
   10d10:	str	x3, [sp, #16]
   10d14:	str	x4, [sp, #8]
   10d18:	ldr	w0, [sp, #28]
   10d1c:	cmp	w0, #0x0
   10d20:	b.eq	10d60 <re_set_registers+0x60>  // b.none
   10d24:	ldr	x1, [sp, #40]
   10d28:	ldrb	w0, [x1, #56]
   10d2c:	mov	w2, #0x1                   	// #1
   10d30:	bfi	w0, w2, #1, #2
   10d34:	strb	w0, [x1, #56]
   10d38:	ldr	x0, [sp, #32]
   10d3c:	ldr	w1, [sp, #28]
   10d40:	str	w1, [x0]
   10d44:	ldr	x0, [sp, #32]
   10d48:	ldr	x1, [sp, #16]
   10d4c:	str	x1, [x0, #8]
   10d50:	ldr	x0, [sp, #32]
   10d54:	ldr	x1, [sp, #8]
   10d58:	str	x1, [x0, #16]
   10d5c:	b	10d90 <re_set_registers+0x90>
   10d60:	ldr	x0, [sp, #40]
   10d64:	ldrb	w1, [x0, #56]
   10d68:	and	w1, w1, #0xfffffff9
   10d6c:	strb	w1, [x0, #56]
   10d70:	ldr	x0, [sp, #32]
   10d74:	str	wzr, [x0]
   10d78:	ldr	x0, [sp, #32]
   10d7c:	str	xzr, [x0, #16]
   10d80:	ldr	x0, [sp, #32]
   10d84:	ldr	x1, [x0, #16]
   10d88:	ldr	x0, [sp, #32]
   10d8c:	str	x1, [x0, #8]
   10d90:	nop
   10d94:	add	sp, sp, #0x30
   10d98:	ret
   10d9c:	stp	x29, x30, [sp, #-352]!
   10da0:	mov	x29, sp
   10da4:	str	x0, [sp, #56]
   10da8:	str	x1, [sp, #48]
   10dac:	str	w2, [sp, #44]
   10db0:	str	w3, [sp, #40]
   10db4:	str	w4, [sp, #36]
   10db8:	str	w5, [sp, #32]
   10dbc:	str	x6, [sp, #24]
   10dc0:	str	x7, [sp, #16]
   10dc4:	ldr	x0, [sp, #56]
   10dc8:	ldr	x0, [x0]
   10dcc:	str	x0, [sp, #328]
   10dd0:	mov	w0, #0xffffffff            	// #-1
   10dd4:	str	w0, [sp, #324]
   10dd8:	stp	xzr, xzr, [sp, #64]
   10ddc:	stp	xzr, xzr, [sp, #80]
   10de0:	stp	xzr, xzr, [sp, #96]
   10de4:	stp	xzr, xzr, [sp, #112]
   10de8:	stp	xzr, xzr, [sp, #128]
   10dec:	stp	xzr, xzr, [sp, #144]
   10df0:	stp	xzr, xzr, [sp, #160]
   10df4:	stp	xzr, xzr, [sp, #176]
   10df8:	stp	xzr, xzr, [sp, #192]
   10dfc:	stp	xzr, xzr, [sp, #208]
   10e00:	stp	xzr, xzr, [sp, #224]
   10e04:	stp	xzr, xzr, [sp, #240]
   10e08:	ldr	x0, [sp, #328]
   10e0c:	str	x0, [sp, #176]
   10e10:	ldr	x0, [sp, #56]
   10e14:	ldr	x0, [x0, #32]
   10e18:	cmp	x0, #0x0
   10e1c:	b.eq	10e6c <re_set_registers+0x16c>  // b.none
   10e20:	ldr	x0, [sp, #56]
   10e24:	ldrb	w0, [x0, #56]
   10e28:	and	w0, w0, #0x8
   10e2c:	and	w0, w0, #0xff
   10e30:	cmp	w0, #0x0
   10e34:	b.eq	10e6c <re_set_registers+0x16c>  // b.none
   10e38:	ldr	w1, [sp, #40]
   10e3c:	ldr	w0, [sp, #36]
   10e40:	cmp	w1, w0
   10e44:	b.eq	10e6c <re_set_registers+0x16c>  // b.none
   10e48:	ldr	x0, [sp, #56]
   10e4c:	ldrb	w0, [x0, #56]
   10e50:	and	w0, w0, #0x1
   10e54:	and	w0, w0, #0xff
   10e58:	cmp	w0, #0x0
   10e5c:	b.ne	10e6c <re_set_registers+0x16c>  // b.any
   10e60:	ldr	x0, [sp, #56]
   10e64:	ldr	x0, [x0, #32]
   10e68:	b	10e70 <re_set_registers+0x170>
   10e6c:	mov	x0, #0x0                   	// #0
   10e70:	str	x0, [sp, #312]
   10e74:	ldr	x0, [sp, #56]
   10e78:	ldr	x0, [x0, #40]
   10e7c:	str	x0, [sp, #304]
   10e80:	ldr	x0, [sp, #56]
   10e84:	ldr	x0, [x0, #48]
   10e88:	ldr	x1, [sp, #24]
   10e8c:	cmp	x1, x0
   10e90:	b.ls	10eb0 <re_set_registers+0x1b0>  // b.plast
   10e94:	ldr	x0, [sp, #24]
   10e98:	mov	w1, w0
   10e9c:	ldr	x0, [sp, #56]
   10ea0:	ldr	x0, [x0, #48]
   10ea4:	sub	w0, w1, w0
   10ea8:	sub	w0, w0, #0x1
   10eac:	b	10eb4 <re_set_registers+0x1b4>
   10eb0:	mov	w0, #0x0                   	// #0
   10eb4:	str	w0, [sp, #300]
   10eb8:	ldrsw	x0, [sp, #300]
   10ebc:	ldr	x1, [sp, #24]
   10ec0:	sub	x0, x1, x0
   10ec4:	str	x0, [sp, #24]
   10ec8:	ldr	x0, [sp, #56]
   10ecc:	ldr	x0, [x0, #16]
   10ed0:	cmp	x0, #0x0
   10ed4:	cset	w0, eq  // eq = none
   10ed8:	and	w0, w0, #0xff
   10edc:	and	x0, x0, #0xff
   10ee0:	cmp	x0, #0x0
   10ee4:	b.ne	10f08 <re_set_registers+0x208>  // b.any
   10ee8:	ldr	x0, [sp, #328]
   10eec:	ldr	x0, [x0, #72]
   10ef0:	cmp	x0, #0x0
   10ef4:	cset	w0, eq  // eq = none
   10ef8:	and	w0, w0, #0xff
   10efc:	and	x0, x0, #0xff
   10f00:	cmp	x0, #0x0
   10f04:	b.eq	10f10 <re_set_registers+0x210>  // b.none
   10f08:	mov	w0, #0x1                   	// #1
   10f0c:	b	10f14 <re_set_registers+0x214>
   10f10:	mov	w0, #0x0                   	// #0
   10f14:	cmp	w0, #0x0
   10f18:	b.ne	10f3c <re_set_registers+0x23c>  // b.any
   10f1c:	ldr	x0, [sp, #328]
   10f20:	ldr	x0, [x0, #80]
   10f24:	cmp	x0, #0x0
   10f28:	cset	w0, eq  // eq = none
   10f2c:	and	w0, w0, #0xff
   10f30:	and	x0, x0, #0xff
   10f34:	cmp	x0, #0x0
   10f38:	b.eq	10f44 <re_set_registers+0x244>  // b.none
   10f3c:	mov	w0, #0x1                   	// #1
   10f40:	b	10f48 <re_set_registers+0x248>
   10f44:	mov	w0, #0x0                   	// #0
   10f48:	cmp	w0, #0x0
   10f4c:	b.ne	10f70 <re_set_registers+0x270>  // b.any
   10f50:	ldr	x0, [sp, #328]
   10f54:	ldr	x0, [x0, #88]
   10f58:	cmp	x0, #0x0
   10f5c:	cset	w0, eq  // eq = none
   10f60:	and	w0, w0, #0xff
   10f64:	and	x0, x0, #0xff
   10f68:	cmp	x0, #0x0
   10f6c:	b.eq	10f78 <re_set_registers+0x278>  // b.none
   10f70:	mov	w0, #0x1                   	// #1
   10f74:	b	10f7c <re_set_registers+0x27c>
   10f78:	mov	w0, #0x0                   	// #0
   10f7c:	cmp	w0, #0x0
   10f80:	b.ne	10fa4 <re_set_registers+0x2a4>  // b.any
   10f84:	ldr	x0, [sp, #328]
   10f88:	ldr	x0, [x0, #96]
   10f8c:	cmp	x0, #0x0
   10f90:	cset	w0, eq  // eq = none
   10f94:	and	w0, w0, #0xff
   10f98:	and	x0, x0, #0xff
   10f9c:	cmp	x0, #0x0
   10fa0:	b.eq	10fac <re_set_registers+0x2ac>  // b.none
   10fa4:	mov	w0, #0x1                   	// #1
   10fa8:	b	11cc0 <re_set_registers+0xfc0>
   10fac:	ldr	x0, [sp, #328]
   10fb0:	ldr	x0, [x0, #72]
   10fb4:	ldr	w0, [x0, #12]
   10fb8:	cmp	w0, #0x0
   10fbc:	b.ne	1102c <re_set_registers+0x32c>  // b.any
   10fc0:	ldr	x0, [sp, #328]
   10fc4:	ldr	x0, [x0, #80]
   10fc8:	ldr	w0, [x0, #12]
   10fcc:	cmp	w0, #0x0
   10fd0:	b.ne	1102c <re_set_registers+0x32c>  // b.any
   10fd4:	ldr	x0, [sp, #328]
   10fd8:	ldr	x0, [x0, #88]
   10fdc:	ldr	w0, [x0, #12]
   10fe0:	cmp	w0, #0x0
   10fe4:	b.eq	11000 <re_set_registers+0x300>  // b.none
   10fe8:	ldr	x0, [sp, #56]
   10fec:	ldrb	w0, [x0, #56]
   10ff0:	and	w0, w0, #0xffffff80
   10ff4:	and	w0, w0, #0xff
   10ff8:	cmp	w0, #0x0
   10ffc:	b.ne	1102c <re_set_registers+0x32c>  // b.any
   11000:	ldr	w0, [sp, #40]
   11004:	cmp	w0, #0x0
   11008:	b.eq	11020 <re_set_registers+0x320>  // b.none
   1100c:	ldr	w0, [sp, #36]
   11010:	cmp	w0, #0x0
   11014:	b.eq	11020 <re_set_registers+0x320>  // b.none
   11018:	mov	w0, #0x1                   	// #1
   1101c:	b	11cc0 <re_set_registers+0xfc0>
   11020:	str	wzr, [sp, #36]
   11024:	ldr	w0, [sp, #36]
   11028:	str	w0, [sp, #40]
   1102c:	ldr	x0, [sp, #24]
   11030:	cmp	x0, #0x0
   11034:	b.ne	11048 <re_set_registers+0x348>  // b.any
   11038:	ldr	x0, [sp, #328]
   1103c:	ldr	w0, [x0, #140]
   11040:	cmp	w0, #0x0
   11044:	b.eq	11050 <re_set_registers+0x350>  // b.none
   11048:	mov	w0, #0x1                   	// #1
   1104c:	b	11054 <re_set_registers+0x354>
   11050:	mov	w0, #0x0                   	// #0
   11054:	strb	w0, [sp, #299]
   11058:	ldrb	w0, [sp, #299]
   1105c:	and	w0, w0, #0x1
   11060:	strb	w0, [sp, #299]
   11064:	ldr	x0, [sp, #328]
   11068:	ldr	x0, [x0, #16]
   1106c:	add	w0, w0, #0x1
   11070:	mov	w3, w0
   11074:	ldr	x0, [sp, #56]
   11078:	ldr	x1, [x0, #40]
   1107c:	ldr	x0, [sp, #56]
   11080:	ldr	x0, [x0, #24]
   11084:	and	x0, x0, #0x400000
   11088:	cmp	x0, #0x0
   1108c:	cset	w0, ne  // ne = any
   11090:	and	w2, w0, #0xff
   11094:	add	x0, sp, #0x40
   11098:	ldr	x6, [sp, #328]
   1109c:	mov	w5, w2
   110a0:	mov	x4, x1
   110a4:	ldr	w2, [sp, #44]
   110a8:	ldr	x1, [sp, #48]
   110ac:	bl	2e28 <grub_mod_fini+0x2908>
   110b0:	str	w0, [sp, #348]
   110b4:	ldr	w0, [sp, #348]
   110b8:	cmp	w0, #0x0
   110bc:	cset	w0, ne  // ne = any
   110c0:	and	w0, w0, #0xff
   110c4:	and	x0, x0, #0xff
   110c8:	cmp	x0, #0x0
   110cc:	b.ne	11c58 <re_set_registers+0xf58>  // b.any
   110d0:	ldr	w0, [sp, #32]
   110d4:	str	w0, [sp, #136]
   110d8:	ldr	w0, [sp, #32]
   110dc:	str	w0, [sp, #132]
   110e0:	ldr	x0, [sp, #56]
   110e4:	ldrb	w0, [x0, #56]
   110e8:	ubfx	x0, x0, #7, #1
   110ec:	and	w0, w0, #0xff
   110f0:	strb	w0, [sp, #165]
   110f4:	ldr	x0, [sp, #328]
   110f8:	ldr	w0, [x0, #140]
   110fc:	lsl	w1, w0, #1
   11100:	add	x0, sp, #0x40
   11104:	mov	w2, w1
   11108:	ldr	w1, [sp, #352]
   1110c:	bl	194d4 <re_set_registers+0x87d4>
   11110:	str	w0, [sp, #348]
   11114:	ldr	w0, [sp, #348]
   11118:	cmp	w0, #0x0
   1111c:	cset	w0, ne  // ne = any
   11120:	and	w0, w0, #0xff
   11124:	and	x0, x0, #0xff
   11128:	cmp	x0, #0x0
   1112c:	b.ne	11c60 <re_set_registers+0xf60>  // b.any
   11130:	ldr	x0, [sp, #24]
   11134:	cmp	x0, #0x1
   11138:	b.hi	11154 <re_set_registers+0x454>  // b.pmore
   1113c:	ldr	x0, [sp, #328]
   11140:	ldrb	w0, [x0, #160]
   11144:	and	w0, w0, #0x2
   11148:	and	w0, w0, #0xff
   1114c:	cmp	w0, #0x0
   11150:	b.eq	111c4 <re_set_registers+0x4c4>  // b.none
   11154:	ldr	w0, [sp, #116]
   11158:	mov	w1, w0
   1115c:	mov	w0, #0x7ffffffe            	// #2147483646
   11160:	cmp	w1, w0
   11164:	cset	w0, hi  // hi = pmore
   11168:	and	w0, w0, #0xff
   1116c:	and	x0, x0, #0xff
   11170:	cmp	x0, #0x0
   11174:	b.eq	11184 <re_set_registers+0x484>  // b.none
   11178:	mov	w0, #0xc                   	// #12
   1117c:	str	w0, [sp, #348]
   11180:	b	11c94 <re_set_registers+0xf94>
   11184:	ldr	w0, [sp, #116]
   11188:	add	w0, w0, #0x1
   1118c:	sxtw	x0, w0
   11190:	lsl	x0, x0, #3
   11194:	bl	2250 <grub_mod_fini+0x1d30>
   11198:	str	x0, [sp, #200]
   1119c:	ldr	x0, [sp, #200]
   111a0:	cmp	x0, #0x0
   111a4:	cset	w0, eq  // eq = none
   111a8:	and	w0, w0, #0xff
   111ac:	and	x0, x0, #0xff
   111b0:	cmp	x0, #0x0
   111b4:	b.eq	111c8 <re_set_registers+0x4c8>  // b.none
   111b8:	mov	w0, #0xc                   	// #12
   111bc:	str	w0, [sp, #348]
   111c0:	b	11c94 <re_set_registers+0xf94>
   111c4:	str	xzr, [sp, #200]
   111c8:	ldr	w0, [sp, #40]
   111cc:	str	w0, [sp, #260]
   111d0:	ldr	w0, [sp, #352]
   111d4:	and	w0, w0, #0x1
   111d8:	cmp	w0, #0x0
   111dc:	b.eq	111e8 <re_set_registers+0x4e8>  // b.none
   111e0:	mov	w0, #0x4                   	// #4
   111e4:	b	111ec <re_set_registers+0x4ec>
   111e8:	mov	w0, #0x6                   	// #6
   111ec:	str	w0, [sp, #140]
   111f0:	ldr	w1, [sp, #36]
   111f4:	ldr	w0, [sp, #40]
   111f8:	cmp	w1, w0
   111fc:	b.ge	11208 <re_set_registers+0x508>  // b.tcont
   11200:	mov	w0, #0xffffffff            	// #-1
   11204:	b	1120c <re_set_registers+0x50c>
   11208:	mov	w0, #0x1                   	// #1
   1120c:	str	w0, [sp, #292]
   11210:	ldr	w0, [sp, #36]
   11214:	ldr	w2, [sp, #40]
   11218:	ldr	w1, [sp, #40]
   1121c:	cmp	w2, w0
   11220:	csel	w0, w1, w0, le
   11224:	str	w0, [sp, #288]
   11228:	ldr	w0, [sp, #40]
   1122c:	ldr	w2, [sp, #36]
   11230:	ldr	w1, [sp, #36]
   11234:	cmp	w2, w0
   11238:	csel	w0, w1, w0, ge  // ge = tcont
   1123c:	str	w0, [sp, #284]
   11240:	ldr	x0, [sp, #328]
   11244:	ldr	w0, [x0, #164]
   11248:	cmp	w0, #0x1
   1124c:	cset	w0, eq  // eq = none
   11250:	strb	w0, [sp, #283]
   11254:	ldr	x0, [sp, #312]
   11258:	cmp	x0, #0x0
   1125c:	b.eq	112d0 <re_set_registers+0x5d0>  // b.none
   11260:	ldrb	w0, [sp, #283]
   11264:	cmp	w0, #0x0
   11268:	b.ne	1128c <re_set_registers+0x58c>  // b.any
   1126c:	ldr	x0, [sp, #56]
   11270:	ldr	x0, [x0, #24]
   11274:	and	x0, x0, #0x400000
   11278:	cmp	x0, #0x0
   1127c:	b.ne	11294 <re_set_registers+0x594>  // b.any
   11280:	ldr	x0, [sp, #304]
   11284:	cmp	x0, #0x0
   11288:	b.ne	11294 <re_set_registers+0x594>  // b.any
   1128c:	mov	w1, #0x4                   	// #4
   11290:	b	11298 <re_set_registers+0x598>
   11294:	mov	w1, #0x0                   	// #0
   11298:	ldr	w2, [sp, #40]
   1129c:	ldr	w0, [sp, #36]
   112a0:	cmp	w2, w0
   112a4:	b.gt	112b0 <re_set_registers+0x5b0>
   112a8:	mov	w0, #0x2                   	// #2
   112ac:	b	112b4 <re_set_registers+0x5b4>
   112b0:	mov	w0, #0x0                   	// #0
   112b4:	orr	w0, w1, w0
   112b8:	ldr	x1, [sp, #304]
   112bc:	cmp	x1, #0x0
   112c0:	cset	w1, ne  // ne = any
   112c4:	and	w1, w1, #0xff
   112c8:	orr	w0, w0, w1
   112cc:	b	112d4 <re_set_registers+0x5d4>
   112d0:	mov	w0, #0x8                   	// #8
   112d4:	str	w0, [sp, #276]
   112d8:	mov	w0, #0x1                   	// #1
   112dc:	str	w0, [sp, #348]
   112e0:	ldr	w0, [sp, #260]
   112e4:	ldr	w1, [sp, #288]
   112e8:	cmp	w1, w0
   112ec:	b.gt	11c68 <re_set_registers+0xf68>
   112f0:	ldr	w0, [sp, #260]
   112f4:	ldr	w1, [sp, #284]
   112f8:	cmp	w1, w0
   112fc:	b.lt	11c68 <re_set_registers+0xf68>  // b.tstop
   11300:	ldr	w0, [sp, #276]
   11304:	cmp	w0, #0x8
   11308:	b.eq	11660 <re_set_registers+0x960>  // b.none
   1130c:	ldr	w0, [sp, #276]
   11310:	cmp	w0, #0x8
   11314:	b.gt	11564 <re_set_registers+0x864>
   11318:	ldr	w0, [sp, #276]
   1131c:	cmp	w0, #0x7
   11320:	b.eq	11368 <re_set_registers+0x668>  // b.none
   11324:	ldr	w0, [sp, #276]
   11328:	cmp	w0, #0x7
   1132c:	b.gt	11564 <re_set_registers+0x864>
   11330:	ldr	w0, [sp, #276]
   11334:	cmp	w0, #0x5
   11338:	b.gt	1134c <re_set_registers+0x64c>
   1133c:	ldr	w0, [sp, #276]
   11340:	cmp	w0, #0x4
   11344:	b.ge	11538 <re_set_registers+0x838>  // b.tcont
   11348:	b	11564 <re_set_registers+0x864>
   1134c:	ldr	w0, [sp, #276]
   11350:	cmp	w0, #0x6
   11354:	b.eq	113d4 <re_set_registers+0x6d4>  // b.none
   11358:	b	11564 <re_set_registers+0x864>
   1135c:	ldr	w0, [sp, #260]
   11360:	add	w0, w0, #0x1
   11364:	str	w0, [sp, #260]
   11368:	ldr	w0, [sp, #260]
   1136c:	ldr	w1, [sp, #284]
   11370:	cmp	w1, w0
   11374:	cset	w0, gt
   11378:	and	w0, w0, #0xff
   1137c:	and	x0, x0, #0xff
   11380:	cmp	x0, #0x0
   11384:	b.eq	11424 <re_set_registers+0x724>  // b.none
   11388:	ldr	w0, [sp, #260]
   1138c:	sxtw	x0, w0
   11390:	ldr	x1, [sp, #48]
   11394:	add	x0, x1, x0
   11398:	ldrb	w0, [x0]
   1139c:	and	x0, x0, #0xff
   113a0:	ldr	x1, [sp, #304]
   113a4:	add	x0, x1, x0
   113a8:	ldrb	w0, [x0]
   113ac:	and	x0, x0, #0xff
   113b0:	ldr	x1, [sp, #312]
   113b4:	add	x0, x1, x0
   113b8:	ldrb	w0, [x0]
   113bc:	cmp	w0, #0x0
   113c0:	b.eq	1135c <re_set_registers+0x65c>  // b.none
   113c4:	b	11424 <re_set_registers+0x724>
   113c8:	ldr	w0, [sp, #260]
   113cc:	add	w0, w0, #0x1
   113d0:	str	w0, [sp, #260]
   113d4:	ldr	w0, [sp, #260]
   113d8:	ldr	w1, [sp, #284]
   113dc:	cmp	w1, w0
   113e0:	cset	w0, gt
   113e4:	and	w0, w0, #0xff
   113e8:	and	x0, x0, #0xff
   113ec:	cmp	x0, #0x0
   113f0:	b.eq	1142c <re_set_registers+0x72c>  // b.none
   113f4:	ldr	w0, [sp, #260]
   113f8:	sxtw	x0, w0
   113fc:	ldr	x1, [sp, #48]
   11400:	add	x0, x1, x0
   11404:	ldrb	w0, [x0]
   11408:	and	x0, x0, #0xff
   1140c:	ldr	x1, [sp, #312]
   11410:	add	x0, x1, x0
   11414:	ldrb	w0, [x0]
   11418:	cmp	w0, #0x0
   1141c:	b.eq	113c8 <re_set_registers+0x6c8>  // b.none
   11420:	b	1142c <re_set_registers+0x72c>
   11424:	nop
   11428:	b	11430 <re_set_registers+0x730>
   1142c:	nop
   11430:	ldr	w0, [sp, #260]
   11434:	ldr	w1, [sp, #284]
   11438:	cmp	w1, w0
   1143c:	cset	w0, eq  // eq = none
   11440:	and	w0, w0, #0xff
   11444:	and	x0, x0, #0xff
   11448:	cmp	x0, #0x0
   1144c:	b.eq	11668 <re_set_registers+0x968>  // b.none
   11450:	ldr	w0, [sp, #260]
   11454:	ldr	w1, [sp, #44]
   11458:	cmp	w1, w0
   1145c:	b.le	11478 <re_set_registers+0x778>
   11460:	ldr	w0, [sp, #260]
   11464:	sxtw	x0, w0
   11468:	ldr	x1, [sp, #48]
   1146c:	add	x0, x1, x0
   11470:	ldrb	w0, [x0]
   11474:	b	1147c <re_set_registers+0x77c>
   11478:	mov	w0, #0x0                   	// #0
   1147c:	str	w0, [sp, #272]
   11480:	ldr	x0, [sp, #304]
   11484:	cmp	x0, #0x0
   11488:	b.eq	114a4 <re_set_registers+0x7a4>  // b.none
   1148c:	ldrsw	x0, [sp, #272]
   11490:	ldr	x1, [sp, #304]
   11494:	add	x0, x1, x0
   11498:	ldrb	w0, [x0]
   1149c:	and	x0, x0, #0xff
   114a0:	b	114a8 <re_set_registers+0x7a8>
   114a4:	ldrsw	x0, [sp, #272]
   114a8:	ldr	x1, [sp, #312]
   114ac:	add	x0, x1, x0
   114b0:	ldrb	w0, [x0]
   114b4:	cmp	w0, #0x0
   114b8:	b.ne	11668 <re_set_registers+0x968>  // b.any
   114bc:	b	11c94 <re_set_registers+0xf94>
   114c0:	ldr	w0, [sp, #260]
   114c4:	ldr	w1, [sp, #44]
   114c8:	cmp	w1, w0
   114cc:	b.le	114e8 <re_set_registers+0x7e8>
   114d0:	ldr	w0, [sp, #260]
   114d4:	sxtw	x0, w0
   114d8:	ldr	x1, [sp, #48]
   114dc:	add	x0, x1, x0
   114e0:	ldrb	w0, [x0]
   114e4:	b	114ec <re_set_registers+0x7ec>
   114e8:	mov	w0, #0x0                   	// #0
   114ec:	str	w0, [sp, #272]
   114f0:	ldr	x0, [sp, #304]
   114f4:	cmp	x0, #0x0
   114f8:	b.eq	11514 <re_set_registers+0x814>  // b.none
   114fc:	ldrsw	x0, [sp, #272]
   11500:	ldr	x1, [sp, #304]
   11504:	add	x0, x1, x0
   11508:	ldrb	w0, [x0]
   1150c:	and	x0, x0, #0xff
   11510:	b	11518 <re_set_registers+0x818>
   11514:	ldrsw	x0, [sp, #272]
   11518:	ldr	x1, [sp, #312]
   1151c:	add	x0, x1, x0
   11520:	ldrb	w0, [x0]
   11524:	cmp	w0, #0x0
   11528:	b.ne	1154c <re_set_registers+0x84c>  // b.any
   1152c:	ldr	w0, [sp, #260]
   11530:	sub	w0, w0, #0x1
   11534:	str	w0, [sp, #260]
   11538:	ldr	w0, [sp, #260]
   1153c:	ldr	w1, [sp, #288]
   11540:	cmp	w1, w0
   11544:	b.le	114c0 <re_set_registers+0x7c0>
   11548:	b	11550 <re_set_registers+0x850>
   1154c:	nop
   11550:	ldr	w0, [sp, #260]
   11554:	ldr	w1, [sp, #288]
   11558:	cmp	w1, w0
   1155c:	b.le	11670 <re_set_registers+0x970>
   11560:	b	11c94 <re_set_registers+0xf94>
   11564:	ldr	w1, [sp, #260]
   11568:	ldr	w0, [sp, #104]
   1156c:	sub	w0, w1, w0
   11570:	str	w0, [sp, #344]
   11574:	ldr	w0, [sp, #112]
   11578:	mov	w1, w0
   1157c:	ldr	w0, [sp, #344]
   11580:	cmp	w0, w1
   11584:	cset	w0, cs  // cs = hs, nlast
   11588:	and	w0, w0, #0xff
   1158c:	and	x0, x0, #0xff
   11590:	cmp	x0, #0x0
   11594:	b.eq	115d8 <re_set_registers+0x8d8>  // b.none
   11598:	ldr	w1, [sp, #260]
   1159c:	add	x0, sp, #0x40
   115a0:	ldr	w2, [sp, #352]
   115a4:	bl	45f4 <grub_mod_fini+0x40d4>
   115a8:	str	w0, [sp, #348]
   115ac:	ldr	w0, [sp, #348]
   115b0:	cmp	w0, #0x0
   115b4:	cset	w0, ne  // ne = any
   115b8:	and	w0, w0, #0xff
   115bc:	and	x0, x0, #0xff
   115c0:	cmp	x0, #0x0
   115c4:	b.ne	11c70 <re_set_registers+0xf70>  // b.any
   115c8:	ldr	w1, [sp, #260]
   115cc:	ldr	w0, [sp, #104]
   115d0:	sub	w0, w1, w0
   115d4:	str	w0, [sp, #344]
   115d8:	ldr	w0, [sp, #260]
   115dc:	ldr	w1, [sp, #44]
   115e0:	cmp	w1, w0
   115e4:	b.le	115fc <re_set_registers+0x8fc>
   115e8:	ldr	x1, [sp, #72]
   115ec:	ldr	w0, [sp, #344]
   115f0:	add	x0, x1, x0
   115f4:	ldrb	w0, [x0]
   115f8:	b	11600 <re_set_registers+0x900>
   115fc:	mov	w0, #0x0                   	// #0
   11600:	str	w0, [sp, #272]
   11604:	ldrsw	x0, [sp, #272]
   11608:	ldr	x1, [sp, #312]
   1160c:	add	x0, x1, x0
   11610:	ldrb	w0, [x0]
   11614:	cmp	w0, #0x0
   11618:	b.ne	11658 <re_set_registers+0x958>  // b.any
   1161c:	ldr	w1, [sp, #260]
   11620:	ldr	w0, [sp, #292]
   11624:	add	w0, w1, w0
   11628:	str	w0, [sp, #260]
   1162c:	ldr	w0, [sp, #260]
   11630:	ldr	w1, [sp, #288]
   11634:	cmp	w1, w0
   11638:	b.gt	1164c <re_set_registers+0x94c>
   1163c:	ldr	w0, [sp, #260]
   11640:	ldr	w1, [sp, #284]
   11644:	cmp	w1, w0
   11648:	b.ge	11564 <re_set_registers+0x864>  // b.tcont
   1164c:	mov	w0, #0x1                   	// #1
   11650:	str	w0, [sp, #348]
   11654:	b	11c94 <re_set_registers+0xf94>
   11658:	nop
   1165c:	b	11674 <re_set_registers+0x974>
   11660:	nop
   11664:	b	11674 <re_set_registers+0x974>
   11668:	nop
   1166c:	b	11674 <re_set_registers+0x974>
   11670:	nop
   11674:	ldr	w1, [sp, #260]
   11678:	add	x0, sp, #0x40
   1167c:	ldr	w2, [sp, #352]
   11680:	bl	45f4 <grub_mod_fini+0x40d4>
   11684:	str	w0, [sp, #348]
   11688:	ldr	w0, [sp, #348]
   1168c:	cmp	w0, #0x0
   11690:	cset	w0, ne  // ne = any
   11694:	and	w0, w0, #0xff
   11698:	and	x0, x0, #0xff
   1169c:	cmp	x0, #0x0
   116a0:	b.ne	11c78 <re_set_registers+0xf78>  // b.any
   116a4:	ldrb	w0, [sp, #283]
   116a8:	eor	w0, w0, #0x1
   116ac:	and	w0, w0, #0xff
   116b0:	cmp	w0, #0x0
   116b4:	b.eq	116d4 <re_set_registers+0x9d4>  // b.none
   116b8:	ldr	w0, [sp, #108]
   116bc:	cmp	w0, #0x0
   116c0:	b.eq	116d4 <re_set_registers+0x9d4>  // b.none
   116c4:	ldr	x0, [sp, #80]
   116c8:	ldr	w0, [x0]
   116cc:	cmn	w0, #0x1
   116d0:	b.eq	1184c <re_set_registers+0xb4c>  // b.none
   116d4:	str	wzr, [sp, #232]
   116d8:	ldr	w0, [sp, #232]
   116dc:	str	w0, [sp, #212]
   116e0:	ldr	w0, [sp, #212]
   116e4:	str	w0, [sp, #208]
   116e8:	ldr	w1, [sp, #40]
   116ec:	ldr	w0, [sp, #36]
   116f0:	cmp	w1, w0
   116f4:	b.gt	11700 <re_set_registers+0xa00>
   116f8:	add	x0, sp, #0x104
   116fc:	b	11704 <re_set_registers+0xa04>
   11700:	mov	x0, #0x0                   	// #0
   11704:	add	x3, sp, #0x40
   11708:	mov	x2, x0
   1170c:	ldrb	w1, [sp, #299]
   11710:	mov	x0, x3
   11714:	bl	12000 <re_set_registers+0x1300>
   11718:	str	w0, [sp, #324]
   1171c:	ldr	w0, [sp, #324]
   11720:	cmn	w0, #0x1
   11724:	b.eq	11840 <re_set_registers+0xb40>  // b.none
   11728:	ldr	w0, [sp, #324]
   1172c:	cmn	w0, #0x2
   11730:	cset	w0, eq  // eq = none
   11734:	and	w0, w0, #0xff
   11738:	and	x0, x0, #0xff
   1173c:	cmp	x0, #0x0
   11740:	b.eq	11750 <re_set_registers+0xa50>  // b.none
   11744:	mov	w0, #0xc                   	// #12
   11748:	str	w0, [sp, #348]
   1174c:	b	11c94 <re_set_registers+0xf94>
   11750:	ldr	w0, [sp, #324]
   11754:	str	w0, [sp, #188]
   11758:	ldr	x0, [sp, #56]
   1175c:	ldrb	w0, [x0, #56]
   11760:	and	w0, w0, #0x10
   11764:	and	w0, w0, #0xff
   11768:	cmp	w0, #0x0
   1176c:	b.ne	1177c <re_set_registers+0xa7c>  // b.any
   11770:	ldr	x0, [sp, #24]
   11774:	cmp	x0, #0x1
   11778:	b.hi	1178c <re_set_registers+0xa8c>  // b.pmore
   1177c:	ldr	x0, [sp, #328]
   11780:	ldr	w0, [x0, #140]
   11784:	cmp	w0, #0x0
   11788:	b.eq	117b8 <re_set_registers+0xab8>  // b.none
   1178c:	ldr	x1, [sp, #200]
   11790:	ldrsw	x0, [sp, #324]
   11794:	lsl	x0, x0, #3
   11798:	add	x0, x1, x0
   1179c:	ldr	x0, [x0]
   117a0:	str	x0, [sp, #264]
   117a4:	add	x0, sp, #0x40
   117a8:	ldr	w2, [sp, #324]
   117ac:	ldr	x1, [sp, #264]
   117b0:	bl	126d4 <re_set_registers+0x19d4>
   117b4:	str	w0, [sp, #192]
   117b8:	ldr	x0, [sp, #56]
   117bc:	ldrb	w0, [x0, #56]
   117c0:	and	w0, w0, #0x10
   117c4:	and	w0, w0, #0xff
   117c8:	cmp	w0, #0x0
   117cc:	b.ne	117f4 <re_set_registers+0xaf4>  // b.any
   117d0:	ldr	x0, [sp, #24]
   117d4:	cmp	x0, #0x1
   117d8:	b.ls	117f4 <re_set_registers+0xaf4>  // b.plast
   117dc:	ldr	x0, [sp, #328]
   117e0:	ldrb	w0, [x0, #160]
   117e4:	and	w0, w0, #0x1
   117e8:	and	w0, w0, #0xff
   117ec:	cmp	w0, #0x0
   117f0:	b.ne	11804 <re_set_registers+0xb04>  // b.any
   117f4:	ldr	x0, [sp, #328]
   117f8:	ldr	w0, [x0, #140]
   117fc:	cmp	w0, #0x0
   11800:	b.eq	11868 <re_set_registers+0xb68>  // b.none
   11804:	add	x0, sp, #0x40
   11808:	bl	11cc8 <re_set_registers+0xfc8>
   1180c:	str	w0, [sp, #348]
   11810:	ldr	w0, [sp, #348]
   11814:	cmp	w0, #0x0
   11818:	b.eq	11864 <re_set_registers+0xb64>  // b.none
   1181c:	ldr	w0, [sp, #348]
   11820:	cmp	w0, #0x1
   11824:	cset	w0, ne  // ne = any
   11828:	and	w0, w0, #0xff
   1182c:	and	x0, x0, #0xff
   11830:	cmp	x0, #0x0
   11834:	b.ne	11c80 <re_set_registers+0xf80>  // b.any
   11838:	mov	w0, #0xffffffff            	// #-1
   1183c:	str	w0, [sp, #324]
   11840:	add	x0, sp, #0x40
   11844:	bl	19608 <re_set_registers+0x8908>
   11848:	b	11850 <re_set_registers+0xb50>
   1184c:	nop
   11850:	ldr	w1, [sp, #260]
   11854:	ldr	w0, [sp, #292]
   11858:	add	w0, w1, w0
   1185c:	str	w0, [sp, #260]
   11860:	b	112d8 <re_set_registers+0x5d8>
   11864:	nop
   11868:	ldr	x0, [sp, #24]
   1186c:	cmp	x0, #0x0
   11870:	b.eq	11c88 <re_set_registers+0xf88>  // b.none
   11874:	mov	w0, #0x1                   	// #1
   11878:	str	w0, [sp, #340]
   1187c:	b	118bc <re_set_registers+0xbbc>
   11880:	ldrsw	x0, [sp, #340]
   11884:	lsl	x0, x0, #3
   11888:	ldr	x1, [sp, #16]
   1188c:	add	x0, x1, x0
   11890:	mov	w1, #0xffffffff            	// #-1
   11894:	str	w1, [x0, #4]
   11898:	ldrsw	x1, [sp, #340]
   1189c:	lsl	x1, x1, #3
   118a0:	ldr	x2, [sp, #16]
   118a4:	add	x1, x2, x1
   118a8:	ldr	w0, [x0, #4]
   118ac:	str	w0, [x1]
   118b0:	ldr	w0, [sp, #340]
   118b4:	add	w0, w0, #0x1
   118b8:	str	w0, [sp, #340]
   118bc:	ldrsw	x0, [sp, #340]
   118c0:	ldr	x1, [sp, #24]
   118c4:	cmp	x1, x0
   118c8:	b.hi	11880 <re_set_registers+0xb80>  // b.pmore
   118cc:	ldr	x0, [sp, #16]
   118d0:	str	wzr, [x0]
   118d4:	ldr	w1, [sp, #188]
   118d8:	ldr	x0, [sp, #16]
   118dc:	str	w1, [x0, #4]
   118e0:	ldr	x0, [sp, #56]
   118e4:	ldrb	w0, [x0, #56]
   118e8:	and	w0, w0, #0x10
   118ec:	and	w0, w0, #0xff
   118f0:	cmp	w0, #0x0
   118f4:	b.ne	1197c <re_set_registers+0xc7c>  // b.any
   118f8:	ldr	x0, [sp, #24]
   118fc:	cmp	x0, #0x1
   11900:	b.ls	1197c <re_set_registers+0xc7c>  // b.plast
   11904:	ldr	x0, [sp, #328]
   11908:	ldrb	w0, [x0, #160]
   1190c:	and	w0, w0, #0x1
   11910:	and	w0, w0, #0xff
   11914:	cmp	w0, #0x0
   11918:	b.eq	11934 <re_set_registers+0xc34>  // b.none
   1191c:	ldr	x0, [sp, #328]
   11920:	ldr	w0, [x0, #140]
   11924:	cmp	w0, #0x0
   11928:	b.le	11934 <re_set_registers+0xc34>
   1192c:	mov	w0, #0x1                   	// #1
   11930:	b	11938 <re_set_registers+0xc38>
   11934:	mov	w0, #0x0                   	// #0
   11938:	and	w0, w0, #0x1
   1193c:	and	w1, w0, #0xff
   11940:	add	x0, sp, #0x40
   11944:	mov	w4, w1
   11948:	ldr	x3, [sp, #16]
   1194c:	ldr	x2, [sp, #24]
   11950:	mov	x1, x0
   11954:	ldr	x0, [sp, #56]
   11958:	bl	12f58 <re_set_registers+0x2258>
   1195c:	str	w0, [sp, #348]
   11960:	ldr	w0, [sp, #348]
   11964:	cmp	w0, #0x0
   11968:	cset	w0, ne  // ne = any
   1196c:	and	w0, w0, #0xff
   11970:	and	x0, x0, #0xff
   11974:	cmp	x0, #0x0
   11978:	b.ne	11c90 <re_set_registers+0xf90>  // b.any
   1197c:	str	wzr, [sp, #340]
   11980:	b	11af0 <re_set_registers+0xdf0>
   11984:	ldrsw	x0, [sp, #340]
   11988:	lsl	x0, x0, #3
   1198c:	ldr	x1, [sp, #16]
   11990:	add	x0, x1, x0
   11994:	ldr	w0, [x0]
   11998:	cmn	w0, #0x1
   1199c:	b.eq	11ae4 <re_set_registers+0xde4>  // b.none
   119a0:	ldrb	w0, [sp, #164]
   119a4:	cmp	w0, #0x0
   119a8:	cset	w0, ne  // ne = any
   119ac:	and	w0, w0, #0xff
   119b0:	and	x0, x0, #0xff
   119b4:	cmp	x0, #0x0
   119b8:	b.eq	11a84 <re_set_registers+0xd84>  // b.none
   119bc:	ldrsw	x0, [sp, #340]
   119c0:	lsl	x0, x0, #3
   119c4:	ldr	x1, [sp, #16]
   119c8:	add	x0, x1, x0
   119cc:	ldr	w1, [x0]
   119d0:	ldr	w0, [sp, #108]
   119d4:	cmp	w1, w0
   119d8:	b.ne	119e4 <re_set_registers+0xce4>  // b.any
   119dc:	ldr	w0, [sp, #112]
   119e0:	b	11a0c <re_set_registers+0xd0c>
   119e4:	ldr	x1, [sp, #88]
   119e8:	ldrsw	x0, [sp, #340]
   119ec:	lsl	x0, x0, #3
   119f0:	ldr	x2, [sp, #16]
   119f4:	add	x0, x2, x0
   119f8:	ldr	w0, [x0]
   119fc:	sxtw	x0, w0
   11a00:	lsl	x0, x0, #2
   11a04:	add	x0, x1, x0
   11a08:	ldr	w0, [x0]
   11a0c:	ldrsw	x1, [sp, #340]
   11a10:	lsl	x1, x1, #3
   11a14:	ldr	x2, [sp, #16]
   11a18:	add	x1, x2, x1
   11a1c:	str	w0, [x1]
   11a20:	ldrsw	x0, [sp, #340]
   11a24:	lsl	x0, x0, #3
   11a28:	ldr	x1, [sp, #16]
   11a2c:	add	x0, x1, x0
   11a30:	ldr	w1, [x0, #4]
   11a34:	ldr	w0, [sp, #108]
   11a38:	cmp	w1, w0
   11a3c:	b.ne	11a48 <re_set_registers+0xd48>  // b.any
   11a40:	ldr	w0, [sp, #112]
   11a44:	b	11a70 <re_set_registers+0xd70>
   11a48:	ldr	x1, [sp, #88]
   11a4c:	ldrsw	x0, [sp, #340]
   11a50:	lsl	x0, x0, #3
   11a54:	ldr	x2, [sp, #16]
   11a58:	add	x0, x2, x0
   11a5c:	ldr	w0, [x0, #4]
   11a60:	sxtw	x0, w0
   11a64:	lsl	x0, x0, #2
   11a68:	add	x0, x1, x0
   11a6c:	ldr	w0, [x0]
   11a70:	ldrsw	x1, [sp, #340]
   11a74:	lsl	x1, x1, #3
   11a78:	ldr	x2, [sp, #16]
   11a7c:	add	x1, x2, x1
   11a80:	str	w0, [x1, #4]
   11a84:	ldrsw	x0, [sp, #340]
   11a88:	lsl	x0, x0, #3
   11a8c:	ldr	x1, [sp, #16]
   11a90:	add	x0, x1, x0
   11a94:	ldr	w2, [x0]
   11a98:	ldr	w1, [sp, #260]
   11a9c:	ldrsw	x0, [sp, #340]
   11aa0:	lsl	x0, x0, #3
   11aa4:	ldr	x3, [sp, #16]
   11aa8:	add	x0, x3, x0
   11aac:	add	w1, w2, w1
   11ab0:	str	w1, [x0]
   11ab4:	ldrsw	x0, [sp, #340]
   11ab8:	lsl	x0, x0, #3
   11abc:	ldr	x1, [sp, #16]
   11ac0:	add	x0, x1, x0
   11ac4:	ldr	w2, [x0, #4]
   11ac8:	ldr	w1, [sp, #260]
   11acc:	ldrsw	x0, [sp, #340]
   11ad0:	lsl	x0, x0, #3
   11ad4:	ldr	x3, [sp, #16]
   11ad8:	add	x0, x3, x0
   11adc:	add	w1, w2, w1
   11ae0:	str	w1, [x0, #4]
   11ae4:	ldr	w0, [sp, #340]
   11ae8:	add	w0, w0, #0x1
   11aec:	str	w0, [sp, #340]
   11af0:	ldrsw	x0, [sp, #340]
   11af4:	ldr	x1, [sp, #24]
   11af8:	cmp	x1, x0
   11afc:	b.hi	11984 <re_set_registers+0xc84>  // b.pmore
   11b00:	str	wzr, [sp, #340]
   11b04:	b	11b54 <re_set_registers+0xe54>
   11b08:	ldrsw	x1, [sp, #340]
   11b0c:	ldr	x0, [sp, #24]
   11b10:	add	x0, x1, x0
   11b14:	lsl	x0, x0, #3
   11b18:	ldr	x1, [sp, #16]
   11b1c:	add	x0, x1, x0
   11b20:	mov	w1, #0xffffffff            	// #-1
   11b24:	str	w1, [x0]
   11b28:	ldrsw	x1, [sp, #340]
   11b2c:	ldr	x0, [sp, #24]
   11b30:	add	x0, x1, x0
   11b34:	lsl	x0, x0, #3
   11b38:	ldr	x1, [sp, #16]
   11b3c:	add	x0, x1, x0
   11b40:	mov	w1, #0xffffffff            	// #-1
   11b44:	str	w1, [x0, #4]
   11b48:	ldr	w0, [sp, #340]
   11b4c:	add	w0, w0, #0x1
   11b50:	str	w0, [sp, #340]
   11b54:	ldr	w1, [sp, #340]
   11b58:	ldr	w0, [sp, #300]
   11b5c:	cmp	w1, w0
   11b60:	b.lt	11b08 <re_set_registers+0xe08>  // b.tstop
   11b64:	ldr	x0, [sp, #328]
   11b68:	ldr	x0, [x0, #208]
   11b6c:	cmp	x0, #0x0
   11b70:	b.eq	11c88 <re_set_registers+0xf88>  // b.none
   11b74:	str	wzr, [sp, #340]
   11b78:	b	11c3c <re_set_registers+0xf3c>
   11b7c:	ldr	x0, [sp, #328]
   11b80:	ldr	x1, [x0, #208]
   11b84:	ldrsw	x0, [sp, #340]
   11b88:	lsl	x0, x0, #2
   11b8c:	add	x0, x1, x0
   11b90:	ldr	w0, [x0]
   11b94:	ldr	w1, [sp, #340]
   11b98:	cmp	w1, w0
   11b9c:	b.eq	11c30 <re_set_registers+0xf30>  // b.none
   11ba0:	ldr	x0, [sp, #328]
   11ba4:	ldr	x1, [x0, #208]
   11ba8:	ldrsw	x0, [sp, #340]
   11bac:	lsl	x0, x0, #2
   11bb0:	add	x0, x1, x0
   11bb4:	ldr	w0, [x0]
   11bb8:	sxtw	x0, w0
   11bbc:	add	x0, x0, #0x1
   11bc0:	lsl	x0, x0, #3
   11bc4:	ldr	x1, [sp, #16]
   11bc8:	add	x1, x1, x0
   11bcc:	ldrsw	x0, [sp, #340]
   11bd0:	add	x0, x0, #0x1
   11bd4:	lsl	x0, x0, #3
   11bd8:	ldr	x2, [sp, #16]
   11bdc:	add	x0, x2, x0
   11be0:	ldr	w1, [x1]
   11be4:	str	w1, [x0]
   11be8:	ldr	x0, [sp, #328]
   11bec:	ldr	x1, [x0, #208]
   11bf0:	ldrsw	x0, [sp, #340]
   11bf4:	lsl	x0, x0, #2
   11bf8:	add	x0, x1, x0
   11bfc:	ldr	w0, [x0]
   11c00:	sxtw	x0, w0
   11c04:	add	x0, x0, #0x1
   11c08:	lsl	x0, x0, #3
   11c0c:	ldr	x1, [sp, #16]
   11c10:	add	x1, x1, x0
   11c14:	ldrsw	x0, [sp, #340]
   11c18:	add	x0, x0, #0x1
   11c1c:	lsl	x0, x0, #3
   11c20:	ldr	x2, [sp, #16]
   11c24:	add	x0, x2, x0
   11c28:	ldr	w1, [x1, #4]
   11c2c:	str	w1, [x0, #4]
   11c30:	ldr	w0, [sp, #340]
   11c34:	add	w0, w0, #0x1
   11c38:	str	w0, [sp, #340]
   11c3c:	ldr	w0, [sp, #340]
   11c40:	add	w0, w0, #0x1
   11c44:	sxtw	x0, w0
   11c48:	ldr	x1, [sp, #24]
   11c4c:	cmp	x1, x0
   11c50:	b.hi	11b7c <re_set_registers+0xe7c>  // b.pmore
   11c54:	b	11c88 <re_set_registers+0xf88>
   11c58:	nop
   11c5c:	b	11c94 <re_set_registers+0xf94>
   11c60:	nop
   11c64:	b	11c94 <re_set_registers+0xf94>
   11c68:	nop
   11c6c:	b	11c94 <re_set_registers+0xf94>
   11c70:	nop
   11c74:	b	11c94 <re_set_registers+0xf94>
   11c78:	nop
   11c7c:	b	11c94 <re_set_registers+0xf94>
   11c80:	nop
   11c84:	b	11c94 <re_set_registers+0xf94>
   11c88:	nop
   11c8c:	b	11c94 <re_set_registers+0xf94>
   11c90:	nop
   11c94:	ldr	x0, [sp, #200]
   11c98:	bl	2230 <grub_mod_fini+0x1d10>
   11c9c:	ldr	x0, [sp, #328]
   11ca0:	ldr	w0, [x0, #140]
   11ca4:	cmp	w0, #0x0
   11ca8:	b.eq	11cb4 <re_set_registers+0xfb4>  // b.none
   11cac:	add	x0, sp, #0x40
   11cb0:	bl	1970c <re_set_registers+0x8a0c>
   11cb4:	add	x0, sp, #0x40
   11cb8:	bl	5600 <grub_mod_fini+0x50e0>
   11cbc:	ldr	w0, [sp, #348]
   11cc0:	ldp	x29, x30, [sp], #352
   11cc4:	ret
   11cc8:	stp	x29, x30, [sp, #-112]!
   11ccc:	mov	x29, sp
   11cd0:	str	x0, [sp, #24]
   11cd4:	ldr	x0, [sp, #24]
   11cd8:	ldr	x0, [x0, #112]
   11cdc:	str	x0, [sp, #72]
   11ce0:	str	xzr, [sp, #80]
   11ce4:	ldr	x0, [sp, #24]
   11ce8:	ldr	w0, [x0, #124]
   11cec:	str	w0, [sp, #104]
   11cf0:	ldr	x0, [sp, #24]
   11cf4:	ldr	w0, [x0, #128]
   11cf8:	str	w0, [sp, #108]
   11cfc:	ldr	w1, [sp, #104]
   11d00:	mov	w0, #0x7ffffffe            	// #2147483646
   11d04:	cmp	w1, w0
   11d08:	cset	w0, hi  // hi = pmore
   11d0c:	and	w0, w0, #0xff
   11d10:	and	x0, x0, #0xff
   11d14:	cmp	x0, #0x0
   11d18:	b.eq	11d24 <re_set_registers+0x1024>  // b.none
   11d1c:	mov	w0, #0xc                   	// #12
   11d20:	b	11ff8 <re_set_registers+0x12f8>
   11d24:	ldr	w0, [sp, #104]
   11d28:	add	w0, w0, #0x1
   11d2c:	sxtw	x0, w0
   11d30:	lsl	x0, x0, #3
   11d34:	bl	2250 <grub_mod_fini+0x1d30>
   11d38:	str	x0, [sp, #88]
   11d3c:	ldr	x0, [sp, #88]
   11d40:	cmp	x0, #0x0
   11d44:	cset	w0, eq  // eq = none
   11d48:	and	w0, w0, #0xff
   11d4c:	and	x0, x0, #0xff
   11d50:	cmp	x0, #0x0
   11d54:	b.eq	11d64 <re_set_registers+0x1064>  // b.none
   11d58:	mov	w0, #0xc                   	// #12
   11d5c:	str	w0, [sp, #100]
   11d60:	b	11fe4 <re_set_registers+0x12e4>
   11d64:	ldr	x0, [sp, #72]
   11d68:	ldr	w0, [x0, #140]
   11d6c:	cmp	w0, #0x0
   11d70:	b.eq	11f30 <re_set_registers+0x1230>  // b.none
   11d74:	ldr	w0, [sp, #104]
   11d78:	add	w0, w0, #0x1
   11d7c:	sxtw	x0, w0
   11d80:	lsl	x0, x0, #3
   11d84:	bl	2250 <grub_mod_fini+0x1d30>
   11d88:	str	x0, [sp, #80]
   11d8c:	ldr	x0, [sp, #80]
   11d90:	cmp	x0, #0x0
   11d94:	cset	w0, eq  // eq = none
   11d98:	and	w0, w0, #0xff
   11d9c:	and	x0, x0, #0xff
   11da0:	cmp	x0, #0x0
   11da4:	b.eq	11db4 <re_set_registers+0x10b4>  // b.none
   11da8:	mov	w0, #0xc                   	// #12
   11dac:	str	w0, [sp, #100]
   11db0:	b	11fe4 <re_set_registers+0x12e4>
   11db4:	ldr	w0, [sp, #104]
   11db8:	add	w0, w0, #0x1
   11dbc:	sxtw	x0, w0
   11dc0:	lsl	x0, x0, #3
   11dc4:	mov	x2, x0
   11dc8:	mov	w1, #0x0                   	// #0
   11dcc:	ldr	x0, [sp, #80]
   11dd0:	bl	0 <grub_memset>
   11dd4:	add	x0, sp, #0x20
   11dd8:	ldr	w4, [sp, #104]
   11ddc:	ldr	w3, [sp, #108]
   11de0:	ldr	x2, [sp, #80]
   11de4:	ldr	x1, [sp, #88]
   11de8:	bl	19dfc <re_set_registers+0x90fc>
   11dec:	add	x0, sp, #0x20
   11df0:	mov	x1, x0
   11df4:	ldr	x0, [sp, #24]
   11df8:	bl	13520 <re_set_registers+0x2820>
   11dfc:	str	w0, [sp, #100]
   11e00:	ldr	x0, [sp, #64]
   11e04:	bl	2230 <grub_mod_fini+0x1d10>
   11e08:	ldr	w0, [sp, #100]
   11e0c:	cmp	w0, #0x0
   11e10:	cset	w0, ne  // ne = any
   11e14:	and	w0, w0, #0xff
   11e18:	and	x0, x0, #0xff
   11e1c:	cmp	x0, #0x0
   11e20:	b.ne	11fd8 <re_set_registers+0x12d8>  // b.any
   11e24:	ldr	x0, [sp, #88]
   11e28:	ldr	x0, [x0]
   11e2c:	cmp	x0, #0x0
   11e30:	b.ne	11ee4 <re_set_registers+0x11e4>  // b.any
   11e34:	ldr	x0, [sp, #80]
   11e38:	ldr	x0, [x0]
   11e3c:	cmp	x0, #0x0
   11e40:	b.ne	11ee4 <re_set_registers+0x11e4>  // b.any
   11e44:	ldr	w0, [sp, #104]
   11e48:	sub	w0, w0, #0x1
   11e4c:	str	w0, [sp, #104]
   11e50:	ldr	w0, [sp, #104]
   11e54:	cmp	w0, #0x0
   11e58:	b.ge	11e68 <re_set_registers+0x1168>  // b.tcont
   11e5c:	mov	w0, #0x1                   	// #1
   11e60:	str	w0, [sp, #100]
   11e64:	b	11fe4 <re_set_registers+0x12e4>
   11e68:	ldr	x0, [sp, #24]
   11e6c:	ldr	x1, [x0, #136]
   11e70:	ldrsw	x0, [sp, #104]
   11e74:	lsl	x0, x0, #3
   11e78:	add	x0, x1, x0
   11e7c:	ldr	x0, [x0]
   11e80:	cmp	x0, #0x0
   11e84:	b.eq	11e44 <re_set_registers+0x1144>  // b.none
   11e88:	ldr	x0, [sp, #24]
   11e8c:	ldr	x1, [x0, #136]
   11e90:	ldrsw	x0, [sp, #104]
   11e94:	lsl	x0, x0, #3
   11e98:	add	x0, x1, x0
   11e9c:	ldr	x0, [x0]
   11ea0:	ldrb	w0, [x0, #80]
   11ea4:	and	w0, w0, #0x10
   11ea8:	and	w0, w0, #0xff
   11eac:	cmp	w0, #0x0
   11eb0:	b.eq	11e44 <re_set_registers+0x1144>  // b.none
   11eb4:	ldr	x0, [sp, #24]
   11eb8:	ldr	x1, [x0, #136]
   11ebc:	ldrsw	x0, [sp, #104]
   11ec0:	lsl	x0, x0, #3
   11ec4:	add	x0, x1, x0
   11ec8:	ldr	x0, [x0]
   11ecc:	ldr	w2, [sp, #104]
   11ed0:	mov	x1, x0
   11ed4:	ldr	x0, [sp, #24]
   11ed8:	bl	126d4 <re_set_registers+0x19d4>
   11edc:	str	w0, [sp, #108]
   11ee0:	b	11db4 <re_set_registers+0x10b4>
   11ee4:	ldr	w0, [sp, #104]
   11ee8:	add	w0, w0, #0x1
   11eec:	mov	w3, w0
   11ef0:	ldr	x2, [sp, #80]
   11ef4:	ldr	x1, [sp, #88]
   11ef8:	ldr	x0, [sp, #72]
   11efc:	bl	13a64 <re_set_registers+0x2d64>
   11f00:	str	w0, [sp, #100]
   11f04:	ldr	x0, [sp, #80]
   11f08:	bl	2230 <grub_mod_fini+0x1d10>
   11f0c:	str	xzr, [sp, #80]
   11f10:	ldr	w0, [sp, #100]
   11f14:	cmp	w0, #0x0
   11f18:	cset	w0, ne  // ne = any
   11f1c:	and	w0, w0, #0xff
   11f20:	and	x0, x0, #0xff
   11f24:	cmp	x0, #0x0
   11f28:	b.eq	11f9c <re_set_registers+0x129c>  // b.none
   11f2c:	b	11fe4 <re_set_registers+0x12e4>
   11f30:	add	x0, sp, #0x20
   11f34:	ldr	w4, [sp, #104]
   11f38:	ldr	w3, [sp, #108]
   11f3c:	ldr	x2, [sp, #80]
   11f40:	ldr	x1, [sp, #88]
   11f44:	bl	19dfc <re_set_registers+0x90fc>
   11f48:	add	x0, sp, #0x20
   11f4c:	mov	x1, x0
   11f50:	ldr	x0, [sp, #24]
   11f54:	bl	13520 <re_set_registers+0x2820>
   11f58:	str	w0, [sp, #100]
   11f5c:	ldr	x0, [sp, #64]
   11f60:	bl	2230 <grub_mod_fini+0x1d10>
   11f64:	ldr	w0, [sp, #100]
   11f68:	cmp	w0, #0x0
   11f6c:	cset	w0, ne  // ne = any
   11f70:	and	w0, w0, #0xff
   11f74:	and	x0, x0, #0xff
   11f78:	cmp	x0, #0x0
   11f7c:	b.ne	11fe0 <re_set_registers+0x12e0>  // b.any
   11f80:	ldr	x0, [sp, #88]
   11f84:	ldr	x0, [x0]
   11f88:	cmp	x0, #0x0
   11f8c:	b.ne	11f9c <re_set_registers+0x129c>  // b.any
   11f90:	mov	w0, #0x1                   	// #1
   11f94:	str	w0, [sp, #100]
   11f98:	b	11fe4 <re_set_registers+0x12e4>
   11f9c:	ldr	x0, [sp, #24]
   11fa0:	ldr	x0, [x0, #136]
   11fa4:	bl	2230 <grub_mod_fini+0x1d10>
   11fa8:	ldr	x0, [sp, #24]
   11fac:	ldr	x1, [sp, #88]
   11fb0:	str	x1, [x0, #136]
   11fb4:	str	xzr, [sp, #88]
   11fb8:	ldr	x0, [sp, #24]
   11fbc:	ldr	w1, [sp, #108]
   11fc0:	str	w1, [x0, #128]
   11fc4:	ldr	x0, [sp, #24]
   11fc8:	ldr	w1, [sp, #104]
   11fcc:	str	w1, [x0, #124]
   11fd0:	str	wzr, [sp, #100]
   11fd4:	b	11fe4 <re_set_registers+0x12e4>
   11fd8:	nop
   11fdc:	b	11fe4 <re_set_registers+0x12e4>
   11fe0:	nop
   11fe4:	ldr	x0, [sp, #88]
   11fe8:	bl	2230 <grub_mod_fini+0x1d10>
   11fec:	ldr	x0, [sp, #80]
   11ff0:	bl	2230 <grub_mod_fini+0x1d10>
   11ff4:	ldr	w0, [sp, #100]
   11ff8:	ldp	x29, x30, [sp], #112
   11ffc:	ret
   12000:	stp	x29, x30, [sp, #-144]!
   12004:	mov	x29, sp
   12008:	str	x0, [sp, #40]
   1200c:	strb	w1, [sp, #39]
   12010:	str	x2, [sp, #24]
   12014:	ldr	x0, [sp, #40]
   12018:	ldr	x0, [x0, #112]
   1201c:	str	x0, [sp, #112]
   12020:	str	wzr, [sp, #140]
   12024:	mov	w0, #0xffffffff            	// #-1
   12028:	str	w0, [sp, #136]
   1202c:	ldr	x0, [sp, #40]
   12030:	ldr	w0, [x0, #56]
   12034:	str	w0, [sp, #108]
   12038:	ldr	x0, [sp, #24]
   1203c:	cmp	x0, #0x0
   12040:	cset	w0, ne  // ne = any
   12044:	strb	w0, [sp, #127]
   12048:	ldr	w0, [sp, #108]
   1204c:	str	w0, [sp, #120]
   12050:	str	wzr, [sp, #48]
   12054:	add	x0, sp, #0x30
   12058:	str	x0, [sp, #80]
   1205c:	ldr	x0, [sp, #40]
   12060:	str	x0, [sp, #72]
   12064:	ldr	w0, [sp, #108]
   12068:	str	w0, [sp, #68]
   1206c:	ldr	x0, [sp, #72]
   12070:	ldr	x0, [x0, #112]
   12074:	str	x0, [sp, #56]
   12078:	ldr	x0, [sp, #56]
   1207c:	ldr	x0, [x0, #72]
   12080:	ldrb	w0, [x0, #80]
   12084:	and	w0, w0, #0xffffff80
   12088:	and	w0, w0, #0xff
   1208c:	cmp	w0, #0x0
   12090:	b.eq	12174 <re_set_registers+0x1474>  // b.none
   12094:	ldr	x3, [sp, #72]
   12098:	ldr	w0, [sp, #68]
   1209c:	sub	w1, w0, #0x1
   120a0:	ldr	x0, [sp, #72]
   120a4:	ldr	w0, [x0, #120]
   120a8:	mov	w2, w0
   120ac:	mov	x0, x3
   120b0:	bl	564c <grub_mod_fini+0x512c>
   120b4:	str	w0, [sp, #52]
   120b8:	ldr	w0, [sp, #52]
   120bc:	and	w0, w0, #0x1
   120c0:	cmp	w0, #0x0
   120c4:	b.eq	120d4 <re_set_registers+0x13d4>  // b.none
   120c8:	ldr	x0, [sp, #56]
   120cc:	ldr	x0, [x0, #80]
   120d0:	b	1217c <re_set_registers+0x147c>
   120d4:	ldr	w0, [sp, #52]
   120d8:	cmp	w0, #0x0
   120dc:	b.ne	120ec <re_set_registers+0x13ec>  // b.any
   120e0:	ldr	x0, [sp, #56]
   120e4:	ldr	x0, [x0, #72]
   120e8:	b	1217c <re_set_registers+0x147c>
   120ec:	ldr	w0, [sp, #52]
   120f0:	and	w0, w0, #0x4
   120f4:	cmp	w0, #0x0
   120f8:	b.eq	12118 <re_set_registers+0x1418>  // b.none
   120fc:	ldr	w0, [sp, #52]
   12100:	and	w0, w0, #0x2
   12104:	cmp	w0, #0x0
   12108:	b.eq	12118 <re_set_registers+0x1418>  // b.none
   1210c:	ldr	x0, [sp, #56]
   12110:	ldr	x0, [x0, #96]
   12114:	b	1217c <re_set_registers+0x147c>
   12118:	ldr	w0, [sp, #52]
   1211c:	and	w0, w0, #0x2
   12120:	cmp	w0, #0x0
   12124:	b.eq	12134 <re_set_registers+0x1434>  // b.none
   12128:	ldr	x0, [sp, #56]
   1212c:	ldr	x0, [x0, #88]
   12130:	b	1217c <re_set_registers+0x147c>
   12134:	ldr	w0, [sp, #52]
   12138:	and	w0, w0, #0x4
   1213c:	cmp	w0, #0x0
   12140:	b.eq	12168 <re_set_registers+0x1468>  // b.none
   12144:	ldr	x0, [sp, #56]
   12148:	ldr	x0, [x0, #72]
   1214c:	ldr	x0, [x0, #56]
   12150:	ldr	w3, [sp, #52]
   12154:	mov	x2, x0
   12158:	ldr	x1, [sp, #56]
   1215c:	ldr	x0, [sp, #80]
   12160:	bl	7248 <grub_mod_fini+0x6d28>
   12164:	b	1217c <re_set_registers+0x147c>
   12168:	ldr	x0, [sp, #56]
   1216c:	ldr	x0, [x0, #72]
   12170:	b	1217c <re_set_registers+0x147c>
   12174:	ldr	x0, [sp, #56]
   12178:	ldr	x0, [x0, #72]
   1217c:	str	x0, [sp, #128]
   12180:	ldr	x0, [sp, #128]
   12184:	cmp	x0, #0x0
   12188:	cset	w0, eq  // eq = none
   1218c:	and	w0, w0, #0xff
   12190:	and	x0, x0, #0xff
   12194:	cmp	x0, #0x0
   12198:	b.eq	121cc <re_set_registers+0x14cc>  // b.none
   1219c:	ldr	w0, [sp, #48]
   121a0:	cmp	w0, #0xc
   121a4:	cset	w0, eq  // eq = none
   121a8:	and	w0, w0, #0xff
   121ac:	mov	w2, w0
   121b0:	mov	w1, #0x435                 	// #1077
   121b4:	adrp	x0, 0 <grub_mod_init-0x450>
   121b8:	add	x0, x0, #0x0
   121bc:	ldr	x0, [x0]
   121c0:	bl	1fc8 <grub_mod_fini+0x1aa8>
   121c4:	mov	w0, #0xfffffffe            	// #-2
   121c8:	b	125b8 <re_set_registers+0x18b8>
   121cc:	ldr	x0, [sp, #40]
   121d0:	ldr	x0, [x0, #136]
   121d4:	cmp	x0, #0x0
   121d8:	b.eq	122a4 <re_set_registers+0x15a4>  // b.none
   121dc:	ldr	x0, [sp, #40]
   121e0:	ldr	x1, [x0, #136]
   121e4:	ldrsw	x0, [sp, #108]
   121e8:	lsl	x0, x0, #3
   121ec:	add	x0, x1, x0
   121f0:	ldr	x1, [sp, #128]
   121f4:	str	x1, [x0]
   121f8:	ldr	x0, [sp, #112]
   121fc:	ldr	w0, [x0, #140]
   12200:	sxtw	x0, w0
   12204:	cmp	x0, #0x0
   12208:	b.eq	122a4 <re_set_registers+0x15a4>  // b.none
   1220c:	strb	wzr, [sp, #127]
   12210:	ldr	x0, [sp, #128]
   12214:	add	x0, x0, #0x8
   12218:	mov	w2, #0x0                   	// #0
   1221c:	mov	x1, x0
   12220:	ldr	x0, [sp, #40]
   12224:	bl	1553c <re_set_registers+0x483c>
   12228:	str	w0, [sp, #48]
   1222c:	ldr	w0, [sp, #48]
   12230:	cmp	w0, #0x0
   12234:	cset	w0, ne  // ne = any
   12238:	and	w0, w0, #0xff
   1223c:	and	x0, x0, #0xff
   12240:	cmp	x0, #0x0
   12244:	b.eq	12250 <re_set_registers+0x1550>  // b.none
   12248:	ldr	w0, [sp, #48]
   1224c:	b	125b8 <re_set_registers+0x18b8>
   12250:	ldr	x0, [sp, #128]
   12254:	ldrb	w0, [x0, #80]
   12258:	and	w0, w0, #0x40
   1225c:	and	w0, w0, #0xff
   12260:	cmp	w0, #0x0
   12264:	b.eq	122a4 <re_set_registers+0x15a4>  // b.none
   12268:	ldr	x0, [sp, #128]
   1226c:	add	x0, x0, #0x8
   12270:	mov	x1, x0
   12274:	ldr	x0, [sp, #40]
   12278:	bl	15a34 <re_set_registers+0x4d34>
   1227c:	str	w0, [sp, #48]
   12280:	ldr	w0, [sp, #48]
   12284:	cmp	w0, #0x0
   12288:	cset	w0, ne  // ne = any
   1228c:	and	w0, w0, #0xff
   12290:	and	x0, x0, #0xff
   12294:	cmp	x0, #0x0
   12298:	b.eq	122a4 <re_set_registers+0x15a4>  // b.none
   1229c:	ldr	w0, [sp, #48]
   122a0:	b	125b8 <re_set_registers+0x18b8>
   122a4:	ldr	x0, [sp, #128]
   122a8:	ldrb	w0, [x0, #80]
   122ac:	ubfx	x0, x0, #4, #1
   122b0:	and	w0, w0, #0xff
   122b4:	and	x0, x0, #0xff
   122b8:	cmp	x0, #0x0
   122bc:	b.eq	12570 <re_set_registers+0x1870>  // b.none
   122c0:	ldr	x0, [sp, #128]
   122c4:	ldrb	w0, [x0, #80]
   122c8:	and	w0, w0, #0xffffff80
   122cc:	and	w0, w0, #0xff
   122d0:	cmp	w0, #0x0
   122d4:	b.eq	122f0 <re_set_registers+0x15f0>  // b.none
   122d8:	ldr	w2, [sp, #108]
   122dc:	ldr	x1, [sp, #128]
   122e0:	ldr	x0, [sp, #40]
   122e4:	bl	126d4 <re_set_registers+0x19d4>
   122e8:	cmp	w0, #0x0
   122ec:	b.eq	12570 <re_set_registers+0x1870>  // b.none
   122f0:	ldrb	w0, [sp, #39]
   122f4:	eor	w0, w0, #0x1
   122f8:	and	w0, w0, #0xff
   122fc:	cmp	w0, #0x0
   12300:	b.eq	1230c <re_set_registers+0x160c>  // b.none
   12304:	ldr	w0, [sp, #108]
   12308:	b	125b8 <re_set_registers+0x18b8>
   1230c:	ldr	w0, [sp, #108]
   12310:	str	w0, [sp, #136]
   12314:	mov	w0, #0x1                   	// #1
   12318:	str	w0, [sp, #140]
   1231c:	b	12570 <re_set_registers+0x1870>
   12320:	ldr	x0, [sp, #128]
   12324:	str	x0, [sp, #96]
   12328:	ldr	x0, [sp, #40]
   1232c:	ldr	w0, [x0, #56]
   12330:	add	w0, w0, #0x1
   12334:	str	w0, [sp, #92]
   12338:	ldr	x0, [sp, #40]
   1233c:	ldr	w0, [x0, #52]
   12340:	ldr	w1, [sp, #92]
   12344:	cmp	w1, w0
   12348:	cset	w0, ge  // ge = tcont
   1234c:	and	w0, w0, #0xff
   12350:	and	x0, x0, #0xff
   12354:	cmp	x0, #0x0
   12358:	b.eq	12374 <re_set_registers+0x1674>  // b.none
   1235c:	ldr	x0, [sp, #40]
   12360:	ldr	w1, [x0, #52]
   12364:	ldr	x0, [sp, #40]
   12368:	ldr	w0, [x0, #64]
   1236c:	cmp	w1, w0
   12370:	b.lt	123b0 <re_set_registers+0x16b0>  // b.tstop
   12374:	ldr	x0, [sp, #40]
   12378:	ldr	w0, [x0, #44]
   1237c:	ldr	w1, [sp, #92]
   12380:	cmp	w1, w0
   12384:	cset	w0, ge  // ge = tcont
   12388:	and	w0, w0, #0xff
   1238c:	and	x0, x0, #0xff
   12390:	cmp	x0, #0x0
   12394:	b.eq	12414 <re_set_registers+0x1714>  // b.none
   12398:	ldr	x0, [sp, #40]
   1239c:	ldr	w1, [x0, #44]
   123a0:	ldr	x0, [sp, #40]
   123a4:	ldr	w0, [x0, #64]
   123a8:	cmp	w1, w0
   123ac:	b.ge	12414 <re_set_registers+0x1714>  // b.tcont
   123b0:	ldr	w0, [sp, #92]
   123b4:	add	w0, w0, #0x1
   123b8:	mov	w1, w0
   123bc:	ldr	x0, [sp, #40]
   123c0:	bl	19324 <re_set_registers+0x8624>
   123c4:	str	w0, [sp, #48]
   123c8:	ldr	w0, [sp, #48]
   123cc:	cmp	w0, #0x0
   123d0:	cset	w0, ne  // ne = any
   123d4:	and	w0, w0, #0xff
   123d8:	and	x0, x0, #0xff
   123dc:	cmp	x0, #0x0
   123e0:	b.eq	12414 <re_set_registers+0x1714>  // b.none
   123e4:	ldr	w0, [sp, #48]
   123e8:	cmp	w0, #0xc
   123ec:	cset	w0, eq  // eq = none
   123f0:	and	w0, w0, #0xff
   123f4:	mov	w2, w0
   123f8:	mov	w1, #0x46c                 	// #1132
   123fc:	adrp	x0, 0 <grub_mod_init-0x450>
   12400:	add	x0, x0, #0x0
   12404:	ldr	x0, [x0]
   12408:	bl	1fc8 <grub_mod_fini+0x1aa8>
   1240c:	mov	w0, #0xfffffffe            	// #-2
   12410:	b	125b8 <re_set_registers+0x18b8>
   12414:	add	x0, sp, #0x30
   12418:	ldr	x2, [sp, #128]
   1241c:	ldr	x1, [sp, #40]
   12420:	bl	15024 <re_set_registers+0x4324>
   12424:	str	x0, [sp, #128]
   12428:	ldr	x0, [sp, #40]
   1242c:	ldr	x0, [x0, #136]
   12430:	cmp	x0, #0x0
   12434:	b.eq	1244c <re_set_registers+0x174c>  // b.none
   12438:	add	x0, sp, #0x30
   1243c:	ldr	x2, [sp, #128]
   12440:	ldr	x1, [sp, #40]
   12444:	bl	151d0 <re_set_registers+0x44d0>
   12448:	str	x0, [sp, #128]
   1244c:	ldr	x0, [sp, #128]
   12450:	cmp	x0, #0x0
   12454:	b.ne	124c8 <re_set_registers+0x17c8>  // b.any
   12458:	ldr	w0, [sp, #48]
   1245c:	cmp	w0, #0x0
   12460:	cset	w0, ne  // ne = any
   12464:	and	w0, w0, #0xff
   12468:	and	x0, x0, #0xff
   1246c:	cmp	x0, #0x0
   12470:	b.eq	1247c <re_set_registers+0x177c>  // b.none
   12474:	mov	w0, #0xfffffffe            	// #-2
   12478:	b	125b8 <re_set_registers+0x18b8>
   1247c:	ldr	x0, [sp, #40]
   12480:	ldr	x0, [x0, #136]
   12484:	cmp	x0, #0x0
   12488:	b.eq	12590 <re_set_registers+0x1890>  // b.none
   1248c:	ldr	w0, [sp, #140]
   12490:	cmp	w0, #0x0
   12494:	b.eq	124ac <re_set_registers+0x17ac>  // b.none
   12498:	ldrb	w0, [sp, #39]
   1249c:	eor	w0, w0, #0x1
   124a0:	and	w0, w0, #0xff
   124a4:	cmp	w0, #0x0
   124a8:	b.ne	12590 <re_set_registers+0x1890>  // b.any
   124ac:	add	x0, sp, #0x30
   124b0:	ldr	x1, [sp, #40]
   124b4:	bl	15480 <re_set_registers+0x4780>
   124b8:	str	x0, [sp, #128]
   124bc:	ldr	x0, [sp, #128]
   124c0:	cmp	x0, #0x0
   124c4:	b.eq	12590 <re_set_registers+0x1890>  // b.none
   124c8:	ldrb	w0, [sp, #127]
   124cc:	cmp	x0, #0x0
   124d0:	b.eq	124f4 <re_set_registers+0x17f4>  // b.none
   124d4:	ldr	x1, [sp, #96]
   124d8:	ldr	x0, [sp, #128]
   124dc:	cmp	x1, x0
   124e0:	b.ne	124f0 <re_set_registers+0x17f0>  // b.any
   124e4:	ldr	w0, [sp, #92]
   124e8:	str	w0, [sp, #120]
   124ec:	b	124f4 <re_set_registers+0x17f4>
   124f0:	strb	wzr, [sp, #127]
   124f4:	ldr	x0, [sp, #128]
   124f8:	ldrb	w0, [x0, #80]
   124fc:	and	w0, w0, #0x10
   12500:	and	w0, w0, #0xff
   12504:	cmp	w0, #0x0
   12508:	b.eq	12570 <re_set_registers+0x1870>  // b.none
   1250c:	ldr	x0, [sp, #128]
   12510:	ldrb	w0, [x0, #80]
   12514:	and	w0, w0, #0xffffff80
   12518:	and	w0, w0, #0xff
   1251c:	cmp	w0, #0x0
   12520:	b.eq	12544 <re_set_registers+0x1844>  // b.none
   12524:	ldr	x0, [sp, #40]
   12528:	ldr	w0, [x0, #56]
   1252c:	mov	w2, w0
   12530:	ldr	x1, [sp, #128]
   12534:	ldr	x0, [sp, #40]
   12538:	bl	126d4 <re_set_registers+0x19d4>
   1253c:	cmp	w0, #0x0
   12540:	b.eq	12570 <re_set_registers+0x1870>  // b.none
   12544:	ldr	x0, [sp, #40]
   12548:	ldr	w0, [x0, #56]
   1254c:	str	w0, [sp, #136]
   12550:	mov	w0, #0x1                   	// #1
   12554:	str	w0, [sp, #140]
   12558:	str	xzr, [sp, #24]
   1255c:	ldrb	w0, [sp, #39]
   12560:	eor	w0, w0, #0x1
   12564:	and	w0, w0, #0xff
   12568:	cmp	w0, #0x0
   1256c:	b.ne	1258c <re_set_registers+0x188c>  // b.any
   12570:	ldr	x0, [sp, #40]
   12574:	ldr	w1, [x0, #72]
   12578:	ldr	x0, [sp, #40]
   1257c:	ldr	w0, [x0, #56]
   12580:	cmp	w1, w0
   12584:	b.gt	12320 <re_set_registers+0x1620>
   12588:	b	12590 <re_set_registers+0x1890>
   1258c:	nop
   12590:	ldr	x0, [sp, #24]
   12594:	cmp	x0, #0x0
   12598:	b.eq	125b4 <re_set_registers+0x18b4>  // b.none
   1259c:	ldr	x0, [sp, #24]
   125a0:	ldr	w1, [x0]
   125a4:	ldr	w0, [sp, #120]
   125a8:	add	w1, w1, w0
   125ac:	ldr	x0, [sp, #24]
   125b0:	str	w1, [x0]
   125b4:	ldr	w0, [sp, #136]
   125b8:	ldp	x29, x30, [sp], #144
   125bc:	ret
	...
   125c8:	sub	sp, sp, #0x20
   125cc:	str	x0, [sp, #8]
   125d0:	str	w1, [sp, #4]
   125d4:	str	w2, [sp]
   125d8:	ldr	x0, [sp, #8]
   125dc:	ldr	x1, [x0]
   125e0:	ldrsw	x0, [sp, #4]
   125e4:	lsl	x0, x0, #4
   125e8:	add	x0, x1, x0
   125ec:	ldrb	w0, [x0, #8]
   125f0:	str	w0, [sp, #28]
   125f4:	ldr	x0, [sp, #8]
   125f8:	ldr	x1, [x0]
   125fc:	ldrsw	x0, [sp, #4]
   12600:	lsl	x0, x0, #4
   12604:	add	x0, x1, x0
   12608:	ldr	w0, [x0, #8]
   1260c:	ubfx	x0, x0, #8, #10
   12610:	and	w0, w0, #0xffff
   12614:	str	w0, [sp, #24]
   12618:	ldr	w0, [sp, #28]
   1261c:	cmp	w0, #0x2
   12620:	b.eq	1262c <re_set_registers+0x192c>  // b.none
   12624:	mov	w0, #0x0                   	// #0
   12628:	b	126cc <re_set_registers+0x19cc>
   1262c:	ldr	w0, [sp, #24]
   12630:	cmp	w0, #0x0
   12634:	b.ne	12640 <re_set_registers+0x1940>  // b.any
   12638:	mov	w0, #0x1                   	// #1
   1263c:	b	126cc <re_set_registers+0x19cc>
   12640:	ldr	w0, [sp, #24]
   12644:	and	w0, w0, #0x4
   12648:	cmp	w0, #0x0
   1264c:	b.eq	12660 <re_set_registers+0x1960>  // b.none
   12650:	ldr	w0, [sp]
   12654:	and	w0, w0, #0x1
   12658:	cmp	w0, #0x0
   1265c:	b.eq	126c0 <re_set_registers+0x19c0>  // b.none
   12660:	ldr	w0, [sp, #24]
   12664:	and	w0, w0, #0x8
   12668:	cmp	w0, #0x0
   1266c:	b.eq	12680 <re_set_registers+0x1980>  // b.none
   12670:	ldr	w0, [sp]
   12674:	and	w0, w0, #0x1
   12678:	cmp	w0, #0x0
   1267c:	b.ne	126c0 <re_set_registers+0x19c0>  // b.any
   12680:	ldr	w0, [sp, #24]
   12684:	and	w0, w0, #0x20
   12688:	cmp	w0, #0x0
   1268c:	b.eq	126a0 <re_set_registers+0x19a0>  // b.none
   12690:	ldr	w0, [sp]
   12694:	and	w0, w0, #0x2
   12698:	cmp	w0, #0x0
   1269c:	b.eq	126c0 <re_set_registers+0x19c0>  // b.none
   126a0:	ldr	w0, [sp, #24]
   126a4:	and	w0, w0, #0x80
   126a8:	cmp	w0, #0x0
   126ac:	b.eq	126c8 <re_set_registers+0x19c8>  // b.none
   126b0:	ldr	w0, [sp]
   126b4:	and	w0, w0, #0x8
   126b8:	cmp	w0, #0x0
   126bc:	b.ne	126c8 <re_set_registers+0x19c8>  // b.any
   126c0:	mov	w0, #0x0                   	// #0
   126c4:	b	126cc <re_set_registers+0x19cc>
   126c8:	mov	w0, #0x1                   	// #1
   126cc:	add	sp, sp, #0x20
   126d0:	ret
   126d4:	stp	x29, x30, [sp, #-64]!
   126d8:	mov	x29, sp
   126dc:	str	x0, [sp, #40]
   126e0:	str	x1, [sp, #32]
   126e4:	str	w2, [sp, #28]
   126e8:	ldr	x3, [sp, #40]
   126ec:	ldr	x0, [sp, #40]
   126f0:	ldr	w0, [x0, #120]
   126f4:	mov	w2, w0
   126f8:	ldr	w1, [sp, #28]
   126fc:	mov	x0, x3
   12700:	bl	564c <grub_mod_fini+0x512c>
   12704:	str	w0, [sp, #56]
   12708:	str	wzr, [sp, #60]
   1270c:	b	12774 <re_set_registers+0x1a74>
   12710:	ldr	x0, [sp, #40]
   12714:	ldr	x3, [x0, #112]
   12718:	ldr	x0, [sp, #32]
   1271c:	ldr	x1, [x0, #16]
   12720:	ldrsw	x0, [sp, #60]
   12724:	lsl	x0, x0, #2
   12728:	add	x0, x1, x0
   1272c:	ldr	w0, [x0]
   12730:	ldr	w2, [sp, #56]
   12734:	mov	w1, w0
   12738:	mov	x0, x3
   1273c:	bl	125c8 <re_set_registers+0x18c8>
   12740:	and	w0, w0, #0xff
   12744:	cmp	w0, #0x0
   12748:	b.eq	12768 <re_set_registers+0x1a68>  // b.none
   1274c:	ldr	x0, [sp, #32]
   12750:	ldr	x1, [x0, #16]
   12754:	ldrsw	x0, [sp, #60]
   12758:	lsl	x0, x0, #2
   1275c:	add	x0, x1, x0
   12760:	ldr	w0, [x0]
   12764:	b	1278c <re_set_registers+0x1a8c>
   12768:	ldr	w0, [sp, #60]
   1276c:	add	w0, w0, #0x1
   12770:	str	w0, [sp, #60]
   12774:	ldr	x0, [sp, #32]
   12778:	ldr	w0, [x0, #12]
   1277c:	ldr	w1, [sp, #60]
   12780:	cmp	w1, w0
   12784:	b.lt	12710 <re_set_registers+0x1a10>  // b.tstop
   12788:	mov	w0, #0x0                   	// #0
   1278c:	ldp	x29, x30, [sp], #64
   12790:	ret
   12794:	stp	x29, x30, [sp, #-144]!
   12798:	mov	x29, sp
   1279c:	str	x0, [sp, #56]
   127a0:	str	w1, [sp, #52]
   127a4:	str	x2, [sp, #40]
   127a8:	str	x3, [sp, #32]
   127ac:	str	w4, [sp, #48]
   127b0:	str	x5, [sp, #24]
   127b4:	str	x6, [sp, #16]
   127b8:	ldr	x0, [sp, #56]
   127bc:	ldr	x0, [x0, #112]
   127c0:	str	x0, [sp, #120]
   127c4:	ldr	x0, [sp, #120]
   127c8:	ldr	x1, [x0]
   127cc:	ldrsw	x0, [sp, #48]
   127d0:	lsl	x0, x0, #4
   127d4:	add	x0, x1, x0
   127d8:	ldrb	w0, [x0, #8]
   127dc:	and	w0, w0, #0x8
   127e0:	cmp	w0, #0x0
   127e4:	b.eq	12940 <re_set_registers+0x1c40>  // b.none
   127e8:	ldr	x0, [sp, #56]
   127ec:	ldr	x1, [x0, #136]
   127f0:	ldr	x0, [sp, #32]
   127f4:	ldr	w0, [x0]
   127f8:	sxtw	x0, w0
   127fc:	lsl	x0, x0, #3
   12800:	add	x0, x1, x0
   12804:	ldr	x0, [x0]
   12808:	add	x0, x0, #0x8
   1280c:	str	x0, [sp, #80]
   12810:	ldr	x0, [sp, #120]
   12814:	ldr	x1, [x0, #40]
   12818:	ldrsw	x0, [sp, #48]
   1281c:	lsl	x0, x0, #4
   12820:	add	x0, x1, x0
   12824:	str	x0, [sp, #72]
   12828:	ldr	w1, [sp, #48]
   1282c:	ldr	x0, [sp, #24]
   12830:	bl	67b0 <grub_mod_fini+0x6290>
   12834:	strb	w0, [sp, #103]
   12838:	ldrb	w0, [sp, #103]
   1283c:	eor	w0, w0, #0x1
   12840:	and	w0, w0, #0xff
   12844:	and	x0, x0, #0xff
   12848:	cmp	x0, #0x0
   1284c:	b.eq	12858 <re_set_registers+0x1b58>  // b.none
   12850:	mov	w0, #0xfffffffe            	// #-2
   12854:	b	12c8c <re_set_registers+0x1f8c>
   12858:	mov	w0, #0xffffffff            	// #-1
   1285c:	str	w0, [sp, #136]
   12860:	str	wzr, [sp, #140]
   12864:	b	1291c <re_set_registers+0x1c1c>
   12868:	ldr	x0, [sp, #72]
   1286c:	ldr	x1, [x0, #8]
   12870:	ldrsw	x0, [sp, #140]
   12874:	lsl	x0, x0, #2
   12878:	add	x0, x1, x0
   1287c:	ldr	w0, [x0]
   12880:	str	w0, [sp, #68]
   12884:	ldr	w1, [sp, #68]
   12888:	ldr	x0, [sp, #80]
   1288c:	bl	6b7c <grub_mod_fini+0x665c>
   12890:	cmp	w0, #0x0
   12894:	b.eq	1290c <re_set_registers+0x1c0c>  // b.none
   12898:	ldr	w0, [sp, #136]
   1289c:	cmn	w0, #0x1
   128a0:	b.ne	128b0 <re_set_registers+0x1bb0>  // b.any
   128a4:	ldr	w0, [sp, #68]
   128a8:	str	w0, [sp, #136]
   128ac:	b	12910 <re_set_registers+0x1c10>
   128b0:	ldr	w1, [sp, #136]
   128b4:	ldr	x0, [sp, #24]
   128b8:	bl	6b7c <grub_mod_fini+0x665c>
   128bc:	cmp	w0, #0x0
   128c0:	b.eq	128cc <re_set_registers+0x1bcc>  // b.none
   128c4:	ldr	w0, [sp, #68]
   128c8:	b	12c8c <re_set_registers+0x1f8c>
   128cc:	ldr	x0, [sp, #16]
   128d0:	cmp	x0, #0x0
   128d4:	b.eq	12934 <re_set_registers+0x1c34>  // b.none
   128d8:	ldr	x0, [sp, #32]
   128dc:	ldr	w0, [x0]
   128e0:	ldr	x5, [sp, #24]
   128e4:	ldr	x4, [sp, #40]
   128e8:	ldr	w3, [sp, #52]
   128ec:	ldr	w2, [sp, #68]
   128f0:	mov	w1, w0
   128f4:	ldr	x0, [sp, #16]
   128f8:	bl	12c94 <re_set_registers+0x1f94>
   128fc:	cmp	w0, #0x0
   12900:	b.eq	12934 <re_set_registers+0x1c34>  // b.none
   12904:	mov	w0, #0xfffffffe            	// #-2
   12908:	b	12c8c <re_set_registers+0x1f8c>
   1290c:	nop
   12910:	ldr	w0, [sp, #140]
   12914:	add	w0, w0, #0x1
   12918:	str	w0, [sp, #140]
   1291c:	ldr	x0, [sp, #72]
   12920:	ldr	w0, [x0, #4]
   12924:	ldr	w1, [sp, #140]
   12928:	cmp	w1, w0
   1292c:	b.lt	12868 <re_set_registers+0x1b68>  // b.tstop
   12930:	b	12938 <re_set_registers+0x1c38>
   12934:	nop
   12938:	ldr	w0, [sp, #136]
   1293c:	b	12c8c <re_set_registers+0x1f8c>
   12940:	str	wzr, [sp, #132]
   12944:	ldr	x0, [sp, #120]
   12948:	ldr	x1, [x0]
   1294c:	ldrsw	x0, [sp, #48]
   12950:	lsl	x0, x0, #4
   12954:	add	x0, x1, x0
   12958:	ldrb	w0, [x0, #8]
   1295c:	str	w0, [sp, #116]
   12960:	ldr	x0, [sp, #120]
   12964:	ldr	x1, [x0]
   12968:	ldrsw	x0, [sp, #48]
   1296c:	lsl	x0, x0, #4
   12970:	add	x0, x1, x0
   12974:	ldrb	w0, [x0, #10]
   12978:	and	w0, w0, #0x10
   1297c:	and	w0, w0, #0xff
   12980:	cmp	w0, #0x0
   12984:	b.eq	129b0 <re_set_registers+0x1cb0>  // b.none
   12988:	ldr	x1, [sp, #56]
   1298c:	ldr	x0, [sp, #32]
   12990:	ldr	w0, [x0]
   12994:	mov	w3, w0
   12998:	mov	x2, x1
   1299c:	ldr	w1, [sp, #48]
   129a0:	ldr	x0, [sp, #120]
   129a4:	bl	18bb4 <re_set_registers+0x7eb4>
   129a8:	str	w0, [sp, #132]
   129ac:	b	12b60 <re_set_registers+0x1e60>
   129b0:	ldr	w0, [sp, #116]
   129b4:	cmp	w0, #0x4
   129b8:	b.ne	12b60 <re_set_registers+0x1e60>  // b.any
   129bc:	ldr	x0, [sp, #120]
   129c0:	ldr	x1, [x0]
   129c4:	ldrsw	x0, [sp, #48]
   129c8:	lsl	x0, x0, #4
   129cc:	add	x0, x1, x0
   129d0:	ldr	w0, [x0]
   129d4:	add	w0, w0, #0x1
   129d8:	str	w0, [sp, #112]
   129dc:	ldrsw	x0, [sp, #112]
   129e0:	lsl	x0, x0, #3
   129e4:	ldr	x1, [sp, #40]
   129e8:	add	x0, x1, x0
   129ec:	ldr	w1, [x0, #4]
   129f0:	ldrsw	x0, [sp, #112]
   129f4:	lsl	x0, x0, #3
   129f8:	ldr	x2, [sp, #40]
   129fc:	add	x0, x2, x0
   12a00:	ldr	w0, [x0]
   12a04:	sub	w0, w1, w0
   12a08:	str	w0, [sp, #132]
   12a0c:	ldr	x0, [sp, #16]
   12a10:	cmp	x0, #0x0
   12a14:	b.eq	12ac8 <re_set_registers+0x1dc8>  // b.none
   12a18:	ldrsw	x0, [sp, #112]
   12a1c:	lsl	x0, x0, #3
   12a20:	ldr	x1, [sp, #40]
   12a24:	add	x0, x1, x0
   12a28:	ldr	w0, [x0]
   12a2c:	cmn	w0, #0x1
   12a30:	b.eq	12a50 <re_set_registers+0x1d50>  // b.none
   12a34:	ldrsw	x0, [sp, #112]
   12a38:	lsl	x0, x0, #3
   12a3c:	ldr	x1, [sp, #40]
   12a40:	add	x0, x1, x0
   12a44:	ldr	w0, [x0, #4]
   12a48:	cmn	w0, #0x1
   12a4c:	b.ne	12a58 <re_set_registers+0x1d58>  // b.any
   12a50:	mov	w0, #0xffffffff            	// #-1
   12a54:	b	12c8c <re_set_registers+0x1f8c>
   12a58:	ldr	w0, [sp, #132]
   12a5c:	cmp	w0, #0x0
   12a60:	b.eq	12ac8 <re_set_registers+0x1dc8>  // b.none
   12a64:	ldr	x0, [sp, #56]
   12a68:	ldr	x0, [x0, #8]
   12a6c:	str	x0, [sp, #104]
   12a70:	ldrsw	x0, [sp, #112]
   12a74:	lsl	x0, x0, #3
   12a78:	ldr	x1, [sp, #40]
   12a7c:	add	x0, x1, x0
   12a80:	ldr	w0, [x0]
   12a84:	sxtw	x0, w0
   12a88:	ldr	x1, [sp, #104]
   12a8c:	add	x3, x1, x0
   12a90:	ldr	x0, [sp, #32]
   12a94:	ldr	w0, [x0]
   12a98:	sxtw	x0, w0
   12a9c:	ldr	x1, [sp, #104]
   12aa0:	add	x0, x1, x0
   12aa4:	ldrsw	x1, [sp, #132]
   12aa8:	mov	x2, x1
   12aac:	mov	x1, x0
   12ab0:	mov	x0, x3
   12ab4:	bl	0 <grub_memcmp>
   12ab8:	cmp	w0, #0x0
   12abc:	b.eq	12ac8 <re_set_registers+0x1dc8>  // b.none
   12ac0:	mov	w0, #0xffffffff            	// #-1
   12ac4:	b	12c8c <re_set_registers+0x1f8c>
   12ac8:	ldr	w0, [sp, #132]
   12acc:	cmp	w0, #0x0
   12ad0:	b.ne	12b60 <re_set_registers+0x1e60>  // b.any
   12ad4:	ldr	w1, [sp, #48]
   12ad8:	ldr	x0, [sp, #24]
   12adc:	bl	67b0 <grub_mod_fini+0x6290>
   12ae0:	strb	w0, [sp, #103]
   12ae4:	ldrb	w0, [sp, #103]
   12ae8:	eor	w0, w0, #0x1
   12aec:	and	w0, w0, #0xff
   12af0:	and	x0, x0, #0xff
   12af4:	cmp	x0, #0x0
   12af8:	b.eq	12b04 <re_set_registers+0x1e04>  // b.none
   12afc:	mov	w0, #0xfffffffe            	// #-2
   12b00:	b	12c8c <re_set_registers+0x1f8c>
   12b04:	ldr	x0, [sp, #120]
   12b08:	ldr	x1, [x0, #40]
   12b0c:	ldrsw	x0, [sp, #48]
   12b10:	lsl	x0, x0, #4
   12b14:	add	x0, x1, x0
   12b18:	ldr	x0, [x0, #8]
   12b1c:	ldr	w0, [x0]
   12b20:	str	w0, [sp, #96]
   12b24:	ldr	x0, [sp, #56]
   12b28:	ldr	x1, [x0, #136]
   12b2c:	ldr	x0, [sp, #32]
   12b30:	ldr	w0, [x0]
   12b34:	sxtw	x0, w0
   12b38:	lsl	x0, x0, #3
   12b3c:	add	x0, x1, x0
   12b40:	ldr	x0, [x0]
   12b44:	add	x0, x0, #0x8
   12b48:	ldr	w1, [sp, #96]
   12b4c:	bl	6b7c <grub_mod_fini+0x665c>
   12b50:	cmp	w0, #0x0
   12b54:	b.eq	12b60 <re_set_registers+0x1e60>  // b.none
   12b58:	ldr	w0, [sp, #96]
   12b5c:	b	12c8c <re_set_registers+0x1f8c>
   12b60:	ldr	w0, [sp, #132]
   12b64:	cmp	w0, #0x0
   12b68:	b.ne	12ba0 <re_set_registers+0x1ea0>  // b.any
   12b6c:	ldr	x0, [sp, #120]
   12b70:	ldr	x1, [x0]
   12b74:	ldrsw	x0, [sp, #48]
   12b78:	lsl	x0, x0, #4
   12b7c:	add	x1, x1, x0
   12b80:	ldr	x0, [sp, #32]
   12b84:	ldr	w0, [x0]
   12b88:	mov	w2, w0
   12b8c:	ldr	x0, [sp, #56]
   12b90:	bl	190fc <re_set_registers+0x83fc>
   12b94:	and	w0, w0, #0xff
   12b98:	cmp	w0, #0x0
   12b9c:	b.eq	12c88 <re_set_registers+0x1f88>  // b.none
   12ba0:	ldr	x0, [sp, #120]
   12ba4:	ldr	x1, [x0, #24]
   12ba8:	ldrsw	x0, [sp, #48]
   12bac:	lsl	x0, x0, #2
   12bb0:	add	x0, x1, x0
   12bb4:	ldr	w0, [x0]
   12bb8:	str	w0, [sp, #92]
   12bbc:	ldr	w0, [sp, #132]
   12bc0:	cmp	w0, #0x0
   12bc4:	b.ne	12bd8 <re_set_registers+0x1ed8>  // b.any
   12bc8:	ldr	x0, [sp, #32]
   12bcc:	ldr	w0, [x0]
   12bd0:	add	w0, w0, #0x1
   12bd4:	b	12be8 <re_set_registers+0x1ee8>
   12bd8:	ldr	x0, [sp, #32]
   12bdc:	ldr	w1, [x0]
   12be0:	ldr	w0, [sp, #132]
   12be4:	add	w0, w1, w0
   12be8:	ldr	x1, [sp, #32]
   12bec:	str	w0, [x1]
   12bf0:	ldr	x0, [sp, #16]
   12bf4:	cmp	x0, #0x0
   12bf8:	b.eq	12c78 <re_set_registers+0x1f78>  // b.none
   12bfc:	ldr	x0, [sp, #32]
   12c00:	ldr	w1, [x0]
   12c04:	ldr	x0, [sp, #56]
   12c08:	ldr	w0, [x0, #124]
   12c0c:	cmp	w1, w0
   12c10:	b.gt	12c70 <re_set_registers+0x1f70>
   12c14:	ldr	x0, [sp, #56]
   12c18:	ldr	x1, [x0, #136]
   12c1c:	ldr	x0, [sp, #32]
   12c20:	ldr	w0, [x0]
   12c24:	sxtw	x0, w0
   12c28:	lsl	x0, x0, #3
   12c2c:	add	x0, x1, x0
   12c30:	ldr	x0, [x0]
   12c34:	cmp	x0, #0x0
   12c38:	b.eq	12c70 <re_set_registers+0x1f70>  // b.none
   12c3c:	ldr	x0, [sp, #56]
   12c40:	ldr	x1, [x0, #136]
   12c44:	ldr	x0, [sp, #32]
   12c48:	ldr	w0, [x0]
   12c4c:	sxtw	x0, w0
   12c50:	lsl	x0, x0, #3
   12c54:	add	x0, x1, x0
   12c58:	ldr	x0, [x0]
   12c5c:	add	x0, x0, #0x8
   12c60:	ldr	w1, [sp, #92]
   12c64:	bl	6b7c <grub_mod_fini+0x665c>
   12c68:	cmp	w0, #0x0
   12c6c:	b.ne	12c78 <re_set_registers+0x1f78>  // b.any
   12c70:	mov	w0, #0xffffffff            	// #-1
   12c74:	b	12c8c <re_set_registers+0x1f8c>
   12c78:	ldr	x0, [sp, #24]
   12c7c:	str	wzr, [x0, #4]
   12c80:	ldr	w0, [sp, #92]
   12c84:	b	12c8c <re_set_registers+0x1f8c>
   12c88:	mov	w0, #0xffffffff            	// #-1
   12c8c:	ldp	x29, x30, [sp], #144
   12c90:	ret
   12c94:	stp	x29, x30, [sp, #-112]!
   12c98:	mov	x29, sp
   12c9c:	str	x19, [sp, #16]
   12ca0:	str	x0, [sp, #72]
   12ca4:	str	w1, [sp, #68]
   12ca8:	str	w2, [sp, #64]
   12cac:	str	w3, [sp, #60]
   12cb0:	str	x4, [sp, #48]
   12cb4:	str	x5, [sp, #40]
   12cb8:	ldr	x0, [sp, #72]
   12cbc:	ldr	w0, [x0]
   12cc0:	add	w2, w0, #0x1
   12cc4:	ldr	x1, [sp, #72]
   12cc8:	str	w2, [x1]
   12ccc:	str	w0, [sp, #108]
   12cd0:	ldr	x0, [sp, #72]
   12cd4:	ldr	w1, [x0]
   12cd8:	ldr	x0, [sp, #72]
   12cdc:	ldr	w0, [x0, #4]
   12ce0:	cmp	w1, w0
   12ce4:	b.ne	12d48 <re_set_registers+0x2048>  // b.any
   12ce8:	ldr	x0, [sp, #72]
   12cec:	ldr	x2, [x0, #8]
   12cf0:	ldr	x0, [sp, #72]
   12cf4:	ldr	w0, [x0, #4]
   12cf8:	lsl	w0, w0, #1
   12cfc:	sxtw	x0, w0
   12d00:	lsl	x0, x0, #5
   12d04:	mov	x1, x0
   12d08:	mov	x0, x2
   12d0c:	bl	2294 <grub_mod_fini+0x1d74>
   12d10:	str	x0, [sp, #96]
   12d14:	ldr	x0, [sp, #96]
   12d18:	cmp	x0, #0x0
   12d1c:	b.ne	12d28 <re_set_registers+0x2028>  // b.any
   12d20:	mov	w0, #0xc                   	// #12
   12d24:	b	12e28 <re_set_registers+0x2128>
   12d28:	ldr	x0, [sp, #72]
   12d2c:	ldr	w0, [x0, #4]
   12d30:	lsl	w1, w0, #1
   12d34:	ldr	x0, [sp, #72]
   12d38:	str	w1, [x0, #4]
   12d3c:	ldr	x0, [sp, #72]
   12d40:	ldr	x1, [sp, #96]
   12d44:	str	x1, [x0, #8]
   12d48:	ldr	x0, [sp, #72]
   12d4c:	ldr	x1, [x0, #8]
   12d50:	ldrsw	x0, [sp, #108]
   12d54:	lsl	x0, x0, #5
   12d58:	add	x0, x1, x0
   12d5c:	ldr	w1, [sp, #68]
   12d60:	str	w1, [x0]
   12d64:	ldr	x0, [sp, #72]
   12d68:	ldr	x1, [x0, #8]
   12d6c:	ldrsw	x0, [sp, #108]
   12d70:	lsl	x0, x0, #5
   12d74:	add	x0, x1, x0
   12d78:	ldr	w1, [sp, #64]
   12d7c:	str	w1, [x0, #4]
   12d80:	ldrsw	x0, [sp, #60]
   12d84:	lsl	x2, x0, #3
   12d88:	ldr	x0, [sp, #72]
   12d8c:	ldr	x1, [x0, #8]
   12d90:	ldrsw	x0, [sp, #108]
   12d94:	lsl	x0, x0, #5
   12d98:	add	x19, x1, x0
   12d9c:	mov	x0, x2
   12da0:	bl	2250 <grub_mod_fini+0x1d30>
   12da4:	str	x0, [x19, #8]
   12da8:	ldr	x0, [sp, #72]
   12dac:	ldr	x1, [x0, #8]
   12db0:	ldrsw	x0, [sp, #108]
   12db4:	lsl	x0, x0, #5
   12db8:	add	x0, x1, x0
   12dbc:	ldr	x0, [x0, #8]
   12dc0:	cmp	x0, #0x0
   12dc4:	b.ne	12dd0 <re_set_registers+0x20d0>  // b.any
   12dc8:	mov	w0, #0xc                   	// #12
   12dcc:	b	12e28 <re_set_registers+0x2128>
   12dd0:	ldr	x0, [sp, #72]
   12dd4:	ldr	x1, [x0, #8]
   12dd8:	ldrsw	x0, [sp, #108]
   12ddc:	lsl	x0, x0, #5
   12de0:	add	x0, x1, x0
   12de4:	ldr	x3, [x0, #8]
   12de8:	ldrsw	x0, [sp, #60]
   12dec:	lsl	x0, x0, #3
   12df0:	mov	x2, x0
   12df4:	ldr	x1, [sp, #48]
   12df8:	mov	x0, x3
   12dfc:	bl	1d38 <grub_mod_fini+0x1818>
   12e00:	ldr	x0, [sp, #72]
   12e04:	ldr	x1, [x0, #8]
   12e08:	ldrsw	x0, [sp, #108]
   12e0c:	lsl	x0, x0, #5
   12e10:	add	x0, x1, x0
   12e14:	add	x0, x0, #0x10
   12e18:	ldr	x1, [sp, #40]
   12e1c:	bl	5a34 <grub_mod_fini+0x5514>
   12e20:	str	w0, [sp, #92]
   12e24:	ldr	w0, [sp, #92]
   12e28:	ldr	x19, [sp, #16]
   12e2c:	ldp	x29, x30, [sp], #112
   12e30:	ret
   12e34:	stp	x29, x30, [sp, #-80]!
   12e38:	mov	x29, sp
   12e3c:	str	x0, [sp, #56]
   12e40:	str	x1, [sp, #48]
   12e44:	str	w2, [sp, #44]
   12e48:	str	x3, [sp, #32]
   12e4c:	str	x4, [sp, #24]
   12e50:	ldr	x0, [sp, #56]
   12e54:	ldr	w0, [x0]
   12e58:	sub	w1, w0, #0x1
   12e5c:	ldr	x0, [sp, #56]
   12e60:	str	w1, [x0]
   12e64:	ldr	x0, [sp, #56]
   12e68:	ldr	w0, [x0]
   12e6c:	str	w0, [sp, #76]
   12e70:	ldr	w0, [sp, #76]
   12e74:	mvn	w0, w0
   12e78:	lsr	w0, w0, #31
   12e7c:	and	w0, w0, #0xff
   12e80:	mov	w2, w0
   12e84:	mov	w1, #0x553                 	// #1363
   12e88:	adrp	x0, 0 <grub_mod_init-0x450>
   12e8c:	add	x0, x0, #0x0
   12e90:	ldr	x0, [x0]
   12e94:	bl	1fc8 <grub_mod_fini+0x1aa8>
   12e98:	ldr	x0, [sp, #56]
   12e9c:	ldr	x1, [x0, #8]
   12ea0:	ldrsw	x0, [sp, #76]
   12ea4:	lsl	x0, x0, #5
   12ea8:	add	x0, x1, x0
   12eac:	ldr	w1, [x0]
   12eb0:	ldr	x0, [sp, #48]
   12eb4:	str	w1, [x0]
   12eb8:	ldr	x0, [sp, #56]
   12ebc:	ldr	x1, [x0, #8]
   12ec0:	ldrsw	x0, [sp, #76]
   12ec4:	lsl	x0, x0, #5
   12ec8:	add	x0, x1, x0
   12ecc:	ldr	x1, [x0, #8]
   12ed0:	ldrsw	x0, [sp, #44]
   12ed4:	lsl	x0, x0, #3
   12ed8:	mov	x2, x0
   12edc:	ldr	x0, [sp, #32]
   12ee0:	bl	1d38 <grub_mod_fini+0x1818>
   12ee4:	ldr	x0, [sp, #24]
   12ee8:	ldr	x0, [x0, #8]
   12eec:	bl	2230 <grub_mod_fini+0x1d10>
   12ef0:	ldr	x0, [sp, #56]
   12ef4:	ldr	x1, [x0, #8]
   12ef8:	ldrsw	x0, [sp, #76]
   12efc:	lsl	x0, x0, #5
   12f00:	add	x0, x1, x0
   12f04:	ldr	x0, [x0, #8]
   12f08:	bl	2230 <grub_mod_fini+0x1d10>
   12f0c:	ldr	x0, [sp, #56]
   12f10:	ldr	x1, [x0, #8]
   12f14:	ldrsw	x0, [sp, #76]
   12f18:	lsl	x0, x0, #5
   12f1c:	add	x0, x1, x0
   12f20:	ldr	x2, [sp, #24]
   12f24:	ldp	x0, x1, [x0, #16]
   12f28:	stp	x0, x1, [x2]
   12f2c:	ldr	x0, [sp, #56]
   12f30:	ldr	x1, [x0, #8]
   12f34:	ldrsw	x0, [sp, #76]
   12f38:	lsl	x0, x0, #5
   12f3c:	add	x0, x1, x0
   12f40:	ldr	w0, [x0, #4]
   12f44:	ldp	x29, x30, [sp], #80
   12f48:	ret
   12f4c:	nop
	...
   12f58:	stp	x29, x30, [sp, #-160]!
   12f5c:	mov	x29, sp
   12f60:	str	x0, [sp, #56]
   12f64:	str	x1, [sp, #48]
   12f68:	str	x2, [sp, #40]
   12f6c:	str	x3, [sp, #32]
   12f70:	strb	w4, [sp, #31]
   12f74:	ldr	x0, [sp, #56]
   12f78:	ldr	x0, [x0]
   12f7c:	str	x0, [sp, #128]
   12f80:	str	wzr, [sp, #72]
   12f84:	mov	w0, #0x2                   	// #2
   12f88:	str	w0, [sp, #76]
   12f8c:	str	xzr, [sp, #80]
   12f90:	strb	wzr, [sp, #127]
   12f94:	ldrb	w0, [sp, #31]
   12f98:	cmp	w0, #0x0
   12f9c:	b.eq	12fe0 <re_set_registers+0x22e0>  // b.none
   12fa0:	add	x0, sp, #0x48
   12fa4:	str	x0, [sp, #144]
   12fa8:	ldr	x0, [sp, #144]
   12fac:	ldr	w0, [x0, #4]
   12fb0:	sxtw	x0, w0
   12fb4:	lsl	x0, x0, #5
   12fb8:	bl	2250 <grub_mod_fini+0x1d30>
   12fbc:	mov	x1, x0
   12fc0:	ldr	x0, [sp, #144]
   12fc4:	str	x1, [x0, #8]
   12fc8:	ldr	x0, [sp, #144]
   12fcc:	ldr	x0, [x0, #8]
   12fd0:	cmp	x0, #0x0
   12fd4:	b.ne	12fe4 <re_set_registers+0x22e4>  // b.any
   12fd8:	mov	w0, #0xc                   	// #12
   12fdc:	b	132c8 <re_set_registers+0x25c8>
   12fe0:	str	xzr, [sp, #144]
   12fe4:	ldr	x0, [sp, #128]
   12fe8:	ldr	w0, [x0, #136]
   12fec:	str	w0, [sp, #156]
   12ff0:	add	x0, sp, #0x58
   12ff4:	mov	x2, #0x10                  	// #16
   12ff8:	mov	w1, #0x0                   	// #0
   12ffc:	bl	0 <grub_memset>
   13000:	ldr	x0, [sp, #40]
   13004:	lsl	x0, x0, #3
   13008:	bl	2250 <grub_mod_fini+0x1d30>
   1300c:	str	x0, [sp, #112]
   13010:	ldr	x0, [sp, #112]
   13014:	cmp	x0, #0x0
   13018:	b.ne	1302c <re_set_registers+0x232c>  // b.any
   1301c:	ldr	x0, [sp, #144]
   13020:	bl	132d0 <re_set_registers+0x25d0>
   13024:	mov	w0, #0xc                   	// #12
   13028:	b	132c8 <re_set_registers+0x25c8>
   1302c:	mov	w0, #0x1                   	// #1
   13030:	strb	w0, [sp, #127]
   13034:	ldr	x0, [sp, #40]
   13038:	lsl	x0, x0, #3
   1303c:	mov	x2, x0
   13040:	ldr	x1, [sp, #32]
   13044:	ldr	x0, [sp, #112]
   13048:	bl	1d38 <grub_mod_fini+0x1818>
   1304c:	ldr	x0, [sp, #32]
   13050:	ldr	w0, [x0]
   13054:	str	w0, [sp, #108]
   13058:	b	13290 <re_set_registers+0x2590>
   1305c:	ldr	w0, [sp, #108]
   13060:	ldr	x1, [sp, #40]
   13064:	mov	w5, w1
   13068:	mov	w4, w0
   1306c:	ldr	w3, [sp, #156]
   13070:	ldr	x2, [sp, #112]
   13074:	ldr	x1, [sp, #32]
   13078:	ldr	x0, [sp, #128]
   1307c:	bl	13360 <re_set_registers+0x2660>
   13080:	ldr	x0, [sp, #32]
   13084:	ldr	w1, [x0, #4]
   13088:	ldr	w0, [sp, #108]
   1308c:	cmp	w1, w0
   13090:	b.ne	131a0 <re_set_registers+0x24a0>  // b.any
   13094:	ldr	x0, [sp, #48]
   13098:	ldr	w0, [x0, #128]
   1309c:	ldr	w1, [sp, #156]
   130a0:	cmp	w1, w0
   130a4:	b.ne	131a0 <re_set_registers+0x24a0>  // b.any
   130a8:	ldr	x0, [sp, #144]
   130ac:	cmp	x0, #0x0
   130b0:	b.eq	1317c <re_set_registers+0x247c>  // b.none
   130b4:	str	wzr, [sp, #140]
   130b8:	b	13100 <re_set_registers+0x2400>
   130bc:	ldrsw	x0, [sp, #140]
   130c0:	lsl	x0, x0, #3
   130c4:	ldr	x1, [sp, #32]
   130c8:	add	x0, x1, x0
   130cc:	ldr	w0, [x0]
   130d0:	cmp	w0, #0x0
   130d4:	b.lt	130f4 <re_set_registers+0x23f4>  // b.tstop
   130d8:	ldrsw	x0, [sp, #140]
   130dc:	lsl	x0, x0, #3
   130e0:	ldr	x1, [sp, #32]
   130e4:	add	x0, x1, x0
   130e8:	ldr	w0, [x0, #4]
   130ec:	cmn	w0, #0x1
   130f0:	b.eq	13114 <re_set_registers+0x2414>  // b.none
   130f4:	ldr	w0, [sp, #140]
   130f8:	add	w0, w0, #0x1
   130fc:	str	w0, [sp, #140]
   13100:	ldrsw	x0, [sp, #140]
   13104:	ldr	x1, [sp, #40]
   13108:	cmp	x1, x0
   1310c:	b.hi	130bc <re_set_registers+0x23bc>  // b.pmore
   13110:	b	13118 <re_set_registers+0x2418>
   13114:	nop
   13118:	ldrsw	x0, [sp, #140]
   1311c:	ldr	x1, [sp, #40]
   13120:	cmp	x1, x0
   13124:	b.ne	13150 <re_set_registers+0x2450>  // b.any
   13128:	ldr	x0, [sp, #96]
   1312c:	bl	2230 <grub_mod_fini+0x1d10>
   13130:	ldrb	w0, [sp, #127]
   13134:	cmp	w0, #0x0
   13138:	b.eq	13144 <re_set_registers+0x2444>  // b.none
   1313c:	ldr	x0, [sp, #112]
   13140:	bl	2230 <grub_mod_fini+0x1d10>
   13144:	ldr	x0, [sp, #144]
   13148:	bl	132d0 <re_set_registers+0x25d0>
   1314c:	b	132c8 <re_set_registers+0x25c8>
   13150:	ldr	x0, [sp, #40]
   13154:	mov	w2, w0
   13158:	add	x1, sp, #0x58
   1315c:	add	x0, sp, #0x6c
   13160:	mov	x4, x1
   13164:	ldr	x3, [sp, #32]
   13168:	mov	x1, x0
   1316c:	ldr	x0, [sp, #144]
   13170:	bl	12e34 <re_set_registers+0x2134>
   13174:	str	w0, [sp, #156]
   13178:	b	131a0 <re_set_registers+0x24a0>
   1317c:	ldr	x0, [sp, #96]
   13180:	bl	2230 <grub_mod_fini+0x1d10>
   13184:	ldrb	w0, [sp, #127]
   13188:	cmp	w0, #0x0
   1318c:	b.eq	13198 <re_set_registers+0x2498>  // b.none
   13190:	ldr	x0, [sp, #112]
   13194:	bl	2230 <grub_mod_fini+0x1d10>
   13198:	mov	w0, #0x0                   	// #0
   1319c:	b	132c8 <re_set_registers+0x25c8>
   131a0:	ldr	x0, [sp, #40]
   131a4:	mov	w7, w0
   131a8:	add	x1, sp, #0x58
   131ac:	add	x0, sp, #0x6c
   131b0:	ldr	x6, [sp, #144]
   131b4:	mov	x5, x1
   131b8:	ldr	w4, [sp, #156]
   131bc:	mov	x3, x0
   131c0:	ldr	x2, [sp, #32]
   131c4:	mov	w1, w7
   131c8:	ldr	x0, [sp, #48]
   131cc:	bl	12794 <re_set_registers+0x1a94>
   131d0:	str	w0, [sp, #156]
   131d4:	ldr	w0, [sp, #156]
   131d8:	lsr	w0, w0, #31
   131dc:	and	w0, w0, #0xff
   131e0:	and	x0, x0, #0xff
   131e4:	cmp	x0, #0x0
   131e8:	b.eq	13290 <re_set_registers+0x2590>  // b.none
   131ec:	ldr	w0, [sp, #156]
   131f0:	cmn	w0, #0x2
   131f4:	cset	w0, eq  // eq = none
   131f8:	and	w0, w0, #0xff
   131fc:	and	x0, x0, #0xff
   13200:	cmp	x0, #0x0
   13204:	b.eq	13234 <re_set_registers+0x2534>  // b.none
   13208:	ldr	x0, [sp, #96]
   1320c:	bl	2230 <grub_mod_fini+0x1d10>
   13210:	ldrb	w0, [sp, #127]
   13214:	cmp	w0, #0x0
   13218:	b.eq	13224 <re_set_registers+0x2524>  // b.none
   1321c:	ldr	x0, [sp, #112]
   13220:	bl	2230 <grub_mod_fini+0x1d10>
   13224:	ldr	x0, [sp, #144]
   13228:	bl	132d0 <re_set_registers+0x25d0>
   1322c:	mov	w0, #0xc                   	// #12
   13230:	b	132c8 <re_set_registers+0x25c8>
   13234:	ldr	x0, [sp, #144]
   13238:	cmp	x0, #0x0
   1323c:	b.eq	1326c <re_set_registers+0x256c>  // b.none
   13240:	ldr	x0, [sp, #40]
   13244:	mov	w2, w0
   13248:	add	x1, sp, #0x58
   1324c:	add	x0, sp, #0x6c
   13250:	mov	x4, x1
   13254:	ldr	x3, [sp, #32]
   13258:	mov	x1, x0
   1325c:	ldr	x0, [sp, #144]
   13260:	bl	12e34 <re_set_registers+0x2134>
   13264:	str	w0, [sp, #156]
   13268:	b	13290 <re_set_registers+0x2590>
   1326c:	ldr	x0, [sp, #96]
   13270:	bl	2230 <grub_mod_fini+0x1d10>
   13274:	ldrb	w0, [sp, #127]
   13278:	cmp	w0, #0x0
   1327c:	b.eq	13288 <re_set_registers+0x2588>  // b.none
   13280:	ldr	x0, [sp, #112]
   13284:	bl	2230 <grub_mod_fini+0x1d10>
   13288:	mov	w0, #0x1                   	// #1
   1328c:	b	132c8 <re_set_registers+0x25c8>
   13290:	ldr	x0, [sp, #32]
   13294:	ldr	w1, [x0, #4]
   13298:	ldr	w0, [sp, #108]
   1329c:	cmp	w1, w0
   132a0:	b.ge	1305c <re_set_registers+0x235c>  // b.tcont
   132a4:	ldr	x0, [sp, #96]
   132a8:	bl	2230 <grub_mod_fini+0x1d10>
   132ac:	ldrb	w0, [sp, #127]
   132b0:	cmp	w0, #0x0
   132b4:	b.eq	132c0 <re_set_registers+0x25c0>  // b.none
   132b8:	ldr	x0, [sp, #112]
   132bc:	bl	2230 <grub_mod_fini+0x1d10>
   132c0:	ldr	x0, [sp, #144]
   132c4:	bl	132d0 <re_set_registers+0x25d0>
   132c8:	ldp	x29, x30, [sp], #160
   132cc:	ret
   132d0:	stp	x29, x30, [sp, #-48]!
   132d4:	mov	x29, sp
   132d8:	str	x0, [sp, #24]
   132dc:	ldr	x0, [sp, #24]
   132e0:	cmp	x0, #0x0
   132e4:	b.eq	13354 <re_set_registers+0x2654>  // b.none
   132e8:	str	wzr, [sp, #44]
   132ec:	b	13334 <re_set_registers+0x2634>
   132f0:	ldr	x0, [sp, #24]
   132f4:	ldr	x1, [x0, #8]
   132f8:	ldrsw	x0, [sp, #44]
   132fc:	lsl	x0, x0, #5
   13300:	add	x0, x1, x0
   13304:	ldr	x0, [x0, #24]
   13308:	bl	2230 <grub_mod_fini+0x1d10>
   1330c:	ldr	x0, [sp, #24]
   13310:	ldr	x1, [x0, #8]
   13314:	ldrsw	x0, [sp, #44]
   13318:	lsl	x0, x0, #5
   1331c:	add	x0, x1, x0
   13320:	ldr	x0, [x0, #8]
   13324:	bl	2230 <grub_mod_fini+0x1d10>
   13328:	ldr	w0, [sp, #44]
   1332c:	add	w0, w0, #0x1
   13330:	str	w0, [sp, #44]
   13334:	ldr	x0, [sp, #24]
   13338:	ldr	w0, [x0]
   1333c:	ldr	w1, [sp, #44]
   13340:	cmp	w1, w0
   13344:	b.lt	132f0 <re_set_registers+0x25f0>  // b.tstop
   13348:	ldr	x0, [sp, #24]
   1334c:	ldr	x0, [x0, #8]
   13350:	bl	2230 <grub_mod_fini+0x1d10>
   13354:	mov	w0, #0x0                   	// #0
   13358:	ldp	x29, x30, [sp], #48
   1335c:	ret
   13360:	stp	x29, x30, [sp, #-80]!
   13364:	mov	x29, sp
   13368:	str	x0, [sp, #56]
   1336c:	str	x1, [sp, #48]
   13370:	str	x2, [sp, #40]
   13374:	str	w3, [sp, #36]
   13378:	str	w4, [sp, #32]
   1337c:	str	w5, [sp, #28]
   13380:	ldr	x0, [sp, #56]
   13384:	ldr	x1, [x0]
   13388:	ldrsw	x0, [sp, #36]
   1338c:	lsl	x0, x0, #4
   13390:	add	x0, x1, x0
   13394:	ldrb	w0, [x0, #8]
   13398:	str	w0, [sp, #76]
   1339c:	ldr	w0, [sp, #76]
   133a0:	cmp	w0, #0x8
   133a4:	b.ne	1340c <re_set_registers+0x270c>  // b.any
   133a8:	ldr	x0, [sp, #56]
   133ac:	ldr	x1, [x0]
   133b0:	ldrsw	x0, [sp, #36]
   133b4:	lsl	x0, x0, #4
   133b8:	add	x0, x1, x0
   133bc:	ldr	w0, [x0]
   133c0:	add	w0, w0, #0x1
   133c4:	str	w0, [sp, #68]
   133c8:	ldr	w1, [sp, #68]
   133cc:	ldr	w0, [sp, #28]
   133d0:	cmp	w1, w0
   133d4:	b.ge	13514 <re_set_registers+0x2814>  // b.tcont
   133d8:	ldrsw	x0, [sp, #68]
   133dc:	lsl	x0, x0, #3
   133e0:	ldr	x1, [sp, #48]
   133e4:	add	x0, x1, x0
   133e8:	ldr	w1, [sp, #32]
   133ec:	str	w1, [x0]
   133f0:	ldrsw	x0, [sp, #68]
   133f4:	lsl	x0, x0, #3
   133f8:	ldr	x1, [sp, #48]
   133fc:	add	x0, x1, x0
   13400:	mov	w1, #0xffffffff            	// #-1
   13404:	str	w1, [x0, #4]
   13408:	b	13514 <re_set_registers+0x2814>
   1340c:	ldr	w0, [sp, #76]
   13410:	cmp	w0, #0x9
   13414:	b.ne	13514 <re_set_registers+0x2814>  // b.any
   13418:	ldr	x0, [sp, #56]
   1341c:	ldr	x1, [x0]
   13420:	ldrsw	x0, [sp, #36]
   13424:	lsl	x0, x0, #4
   13428:	add	x0, x1, x0
   1342c:	ldr	w0, [x0]
   13430:	add	w0, w0, #0x1
   13434:	str	w0, [sp, #72]
   13438:	ldr	w1, [sp, #72]
   1343c:	ldr	w0, [sp, #28]
   13440:	cmp	w1, w0
   13444:	b.ge	13514 <re_set_registers+0x2814>  // b.tcont
   13448:	ldrsw	x0, [sp, #72]
   1344c:	lsl	x0, x0, #3
   13450:	ldr	x1, [sp, #48]
   13454:	add	x0, x1, x0
   13458:	ldr	w0, [x0]
   1345c:	ldr	w1, [sp, #32]
   13460:	cmp	w1, w0
   13464:	b.le	1349c <re_set_registers+0x279c>
   13468:	ldrsw	x0, [sp, #72]
   1346c:	lsl	x0, x0, #3
   13470:	ldr	x1, [sp, #48]
   13474:	add	x0, x1, x0
   13478:	ldr	w1, [sp, #32]
   1347c:	str	w1, [x0, #4]
   13480:	ldrsw	x0, [sp, #28]
   13484:	lsl	x0, x0, #3
   13488:	mov	x2, x0
   1348c:	ldr	x1, [sp, #48]
   13490:	ldr	x0, [sp, #40]
   13494:	bl	1d38 <grub_mod_fini+0x1818>
   13498:	b	13514 <re_set_registers+0x2814>
   1349c:	ldr	x0, [sp, #56]
   134a0:	ldr	x1, [x0]
   134a4:	ldrsw	x0, [sp, #36]
   134a8:	lsl	x0, x0, #4
   134ac:	add	x0, x1, x0
   134b0:	ldrb	w0, [x0, #10]
   134b4:	and	w0, w0, #0x8
   134b8:	and	w0, w0, #0xff
   134bc:	cmp	w0, #0x0
   134c0:	b.eq	134fc <re_set_registers+0x27fc>  // b.none
   134c4:	ldrsw	x0, [sp, #72]
   134c8:	lsl	x0, x0, #3
   134cc:	ldr	x1, [sp, #40]
   134d0:	add	x0, x1, x0
   134d4:	ldr	w0, [x0]
   134d8:	cmn	w0, #0x1
   134dc:	b.eq	134fc <re_set_registers+0x27fc>  // b.none
   134e0:	ldrsw	x0, [sp, #28]
   134e4:	lsl	x0, x0, #3
   134e8:	mov	x2, x0
   134ec:	ldr	x1, [sp, #40]
   134f0:	ldr	x0, [sp, #48]
   134f4:	bl	1d38 <grub_mod_fini+0x1818>
   134f8:	b	13514 <re_set_registers+0x2814>
   134fc:	ldrsw	x0, [sp, #72]
   13500:	lsl	x0, x0, #3
   13504:	ldr	x1, [sp, #48]
   13508:	add	x0, x1, x0
   1350c:	ldr	w1, [sp, #32]
   13510:	str	w1, [x0, #4]
   13514:	nop
   13518:	ldp	x29, x30, [sp], #80
   1351c:	ret
   13520:	stp	x29, x30, [sp, #-64]!
   13524:	mov	x29, sp
   13528:	str	x0, [sp, #24]
   1352c:	str	x1, [sp, #16]
   13530:	str	wzr, [sp, #56]
   13534:	ldr	x0, [sp, #16]
   13538:	ldr	w0, [x0, #20]
   1353c:	str	w0, [sp, #52]
   13540:	ldr	x0, [sp, #16]
   13544:	ldr	w1, [x0, #16]
   13548:	add	x0, sp, #0x20
   1354c:	bl	589c <grub_mod_fini+0x537c>
   13550:	str	w0, [sp, #60]
   13554:	ldr	w0, [sp, #60]
   13558:	cmp	w0, #0x0
   1355c:	cset	w0, ne  // ne = any
   13560:	and	w0, w0, #0xff
   13564:	and	x0, x0, #0xff
   13568:	cmp	x0, #0x0
   1356c:	b.eq	13578 <re_set_registers+0x2878>  // b.none
   13570:	ldr	w0, [sp, #60]
   13574:	b	13700 <re_set_registers+0x2a00>
   13578:	add	x0, sp, #0x20
   1357c:	mov	x3, x0
   13580:	ldr	w2, [sp, #52]
   13584:	ldr	x1, [sp, #16]
   13588:	ldr	x0, [sp, #24]
   1358c:	bl	13bd4 <re_set_registers+0x2ed4>
   13590:	str	w0, [sp, #60]
   13594:	ldr	w0, [sp, #60]
   13598:	cmp	w0, #0x0
   1359c:	cset	w0, ne  // ne = any
   135a0:	and	w0, w0, #0xff
   135a4:	and	x0, x0, #0xff
   135a8:	cmp	x0, #0x0
   135ac:	b.ne	136e0 <re_set_registers+0x29e0>  // b.any
   135b0:	b	136cc <re_set_registers+0x29cc>
   135b4:	ldr	x0, [sp, #16]
   135b8:	ldr	x1, [x0]
   135bc:	ldrsw	x0, [sp, #52]
   135c0:	lsl	x0, x0, #3
   135c4:	add	x0, x1, x0
   135c8:	ldr	x0, [x0]
   135cc:	cmp	x0, #0x0
   135d0:	b.ne	135e0 <re_set_registers+0x28e0>  // b.any
   135d4:	ldr	w0, [sp, #56]
   135d8:	add	w0, w0, #0x1
   135dc:	b	135e4 <re_set_registers+0x28e4>
   135e0:	mov	w0, #0x0                   	// #0
   135e4:	str	w0, [sp, #56]
   135e8:	ldr	x0, [sp, #24]
   135ec:	ldr	w0, [x0, #168]
   135f0:	ldr	w1, [sp, #56]
   135f4:	cmp	w1, w0
   135f8:	b.le	1362c <re_set_registers+0x292c>
   135fc:	ldr	x0, [sp, #16]
   13600:	ldr	x3, [x0]
   13604:	ldrsw	x0, [sp, #52]
   13608:	lsl	x0, x0, #3
   1360c:	mov	x2, x0
   13610:	mov	w1, #0x0                   	// #0
   13614:	mov	x0, x3
   13618:	bl	0 <grub_memset>
   1361c:	ldr	x0, [sp, #40]
   13620:	bl	2230 <grub_mod_fini+0x1d10>
   13624:	mov	w0, #0x0                   	// #0
   13628:	b	13700 <re_set_registers+0x2a00>
   1362c:	str	wzr, [sp, #36]
   13630:	ldr	w0, [sp, #52]
   13634:	sub	w0, w0, #0x1
   13638:	str	w0, [sp, #52]
   1363c:	ldr	x0, [sp, #24]
   13640:	ldr	x1, [x0, #136]
   13644:	ldrsw	x0, [sp, #52]
   13648:	lsl	x0, x0, #3
   1364c:	add	x0, x1, x0
   13650:	ldr	x0, [x0]
   13654:	cmp	x0, #0x0
   13658:	b.eq	13694 <re_set_registers+0x2994>  // b.none
   1365c:	add	x0, sp, #0x20
   13660:	mov	x3, x0
   13664:	ldr	w2, [sp, #52]
   13668:	ldr	x1, [sp, #16]
   1366c:	ldr	x0, [sp, #24]
   13670:	bl	13708 <re_set_registers+0x2a08>
   13674:	str	w0, [sp, #60]
   13678:	ldr	w0, [sp, #60]
   1367c:	cmp	w0, #0x0
   13680:	cset	w0, ne  // ne = any
   13684:	and	w0, w0, #0xff
   13688:	and	x0, x0, #0xff
   1368c:	cmp	x0, #0x0
   13690:	b.ne	136e8 <re_set_registers+0x29e8>  // b.any
   13694:	add	x0, sp, #0x20
   13698:	mov	x3, x0
   1369c:	ldr	w2, [sp, #52]
   136a0:	ldr	x1, [sp, #16]
   136a4:	ldr	x0, [sp, #24]
   136a8:	bl	13bd4 <re_set_registers+0x2ed4>
   136ac:	str	w0, [sp, #60]
   136b0:	ldr	w0, [sp, #60]
   136b4:	cmp	w0, #0x0
   136b8:	cset	w0, ne  // ne = any
   136bc:	and	w0, w0, #0xff
   136c0:	and	x0, x0, #0xff
   136c4:	cmp	x0, #0x0
   136c8:	b.ne	136f0 <re_set_registers+0x29f0>  // b.any
   136cc:	ldr	w0, [sp, #52]
   136d0:	cmp	w0, #0x0
   136d4:	b.gt	135b4 <re_set_registers+0x28b4>
   136d8:	str	wzr, [sp, #60]
   136dc:	b	136f4 <re_set_registers+0x29f4>
   136e0:	nop
   136e4:	b	136f4 <re_set_registers+0x29f4>
   136e8:	nop
   136ec:	b	136f4 <re_set_registers+0x29f4>
   136f0:	nop
   136f4:	ldr	x0, [sp, #40]
   136f8:	bl	2230 <grub_mod_fini+0x1d10>
   136fc:	ldr	w0, [sp, #60]
   13700:	ldp	x29, x30, [sp], #64
   13704:	ret
   13708:	stp	x29, x30, [sp, #-96]!
   1370c:	mov	x29, sp
   13710:	str	x0, [sp, #40]
   13714:	str	x1, [sp, #32]
   13718:	str	w2, [sp, #28]
   1371c:	str	x3, [sp, #16]
   13720:	ldr	x0, [sp, #40]
   13724:	ldr	x0, [x0, #112]
   13728:	str	x0, [sp, #80]
   1372c:	ldr	x0, [sp, #40]
   13730:	ldr	x1, [x0, #136]
   13734:	ldrsw	x0, [sp, #28]
   13738:	lsl	x0, x0, #3
   1373c:	add	x0, x1, x0
   13740:	ldr	x0, [x0]
   13744:	add	x0, x0, #0x18
   13748:	str	x0, [sp, #72]
   1374c:	str	wzr, [sp, #92]
   13750:	b	13930 <re_set_registers+0x2c30>
   13754:	ldr	x0, [sp, #72]
   13758:	ldr	x1, [x0, #8]
   1375c:	ldrsw	x0, [sp, #92]
   13760:	lsl	x0, x0, #2
   13764:	add	x0, x1, x0
   13768:	ldr	w0, [x0]
   1376c:	str	w0, [sp, #68]
   13770:	str	wzr, [sp, #88]
   13774:	ldr	x0, [sp, #80]
   13778:	ldr	x1, [x0]
   1377c:	ldrsw	x0, [sp, #68]
   13780:	lsl	x0, x0, #4
   13784:	add	x0, x1, x0
   13788:	ldrb	w0, [x0, #10]
   1378c:	and	w0, w0, #0x10
   13790:	and	w0, w0, #0xff
   13794:	cmp	w0, #0x0
   13798:	b.eq	137c0 <re_set_registers+0x2ac0>  // b.none
   1379c:	ldr	x0, [sp, #32]
   137a0:	ldr	w0, [x0, #20]
   137a4:	mov	w4, w0
   137a8:	ldr	w3, [sp, #28]
   137ac:	ldr	w2, [sp, #68]
   137b0:	ldr	x1, [sp, #32]
   137b4:	ldr	x0, [sp, #40]
   137b8:	bl	14f2c <re_set_registers+0x422c>
   137bc:	str	w0, [sp, #88]
   137c0:	ldr	w0, [sp, #88]
   137c4:	cmp	w0, #0x0
   137c8:	b.ne	13874 <re_set_registers+0x2b74>  // b.any
   137cc:	ldr	x0, [sp, #80]
   137d0:	ldr	x1, [x0]
   137d4:	ldrsw	x0, [sp, #68]
   137d8:	lsl	x0, x0, #4
   137dc:	add	x0, x1, x0
   137e0:	ldr	w2, [sp, #28]
   137e4:	mov	x1, x0
   137e8:	ldr	x0, [sp, #40]
   137ec:	bl	190fc <re_set_registers+0x83fc>
   137f0:	and	w0, w0, #0xff
   137f4:	cmp	w0, #0x0
   137f8:	b.eq	13874 <re_set_registers+0x2b74>  // b.none
   137fc:	ldr	x0, [sp, #32]
   13800:	ldr	x1, [x0]
   13804:	ldrsw	x0, [sp, #28]
   13808:	add	x0, x0, #0x1
   1380c:	lsl	x0, x0, #3
   13810:	add	x0, x1, x0
   13814:	ldr	x0, [x0]
   13818:	cmp	x0, #0x0
   1381c:	b.eq	13874 <re_set_registers+0x2b74>  // b.none
   13820:	ldr	x0, [sp, #32]
   13824:	ldr	x1, [x0]
   13828:	ldrsw	x0, [sp, #28]
   1382c:	add	x0, x0, #0x1
   13830:	lsl	x0, x0, #3
   13834:	add	x0, x1, x0
   13838:	ldr	x0, [x0]
   1383c:	add	x2, x0, #0x8
   13840:	ldr	x0, [sp, #80]
   13844:	ldr	x1, [x0, #24]
   13848:	ldrsw	x0, [sp, #68]
   1384c:	lsl	x0, x0, #2
   13850:	add	x0, x1, x0
   13854:	ldr	w0, [x0]
   13858:	mov	w1, w0
   1385c:	mov	x0, x2
   13860:	bl	6b7c <grub_mod_fini+0x665c>
   13864:	cmp	w0, #0x0
   13868:	b.eq	13874 <re_set_registers+0x2b74>  // b.none
   1386c:	mov	w0, #0x1                   	// #1
   13870:	str	w0, [sp, #88]
   13874:	ldr	w0, [sp, #88]
   13878:	cmp	w0, #0x0
   1387c:	b.eq	13918 <re_set_registers+0x2c18>  // b.none
   13880:	ldr	x0, [sp, #32]
   13884:	ldr	w0, [x0, #28]
   13888:	cmp	w0, #0x0
   1388c:	b.eq	138e8 <re_set_registers+0x2be8>  // b.none
   13890:	ldr	w1, [sp, #28]
   13894:	ldr	w0, [sp, #88]
   13898:	add	w0, w1, w0
   1389c:	str	w0, [sp, #64]
   138a0:	ldr	x0, [sp, #32]
   138a4:	add	x6, x0, #0x18
   138a8:	ldr	x0, [sp, #80]
   138ac:	ldr	x1, [x0, #24]
   138b0:	ldrsw	x0, [sp, #68]
   138b4:	lsl	x0, x0, #2
   138b8:	add	x0, x1, x0
   138bc:	ldr	w0, [x0]
   138c0:	ldr	w5, [sp, #28]
   138c4:	ldr	w4, [sp, #68]
   138c8:	ldr	w3, [sp, #64]
   138cc:	mov	w2, w0
   138d0:	mov	x1, x6
   138d4:	ldr	x0, [sp, #40]
   138d8:	bl	141a4 <re_set_registers+0x34a4>
   138dc:	and	w0, w0, #0xff
   138e0:	cmp	w0, #0x0
   138e4:	b.ne	13920 <re_set_registers+0x2c20>  // b.any
   138e8:	ldr	w1, [sp, #68]
   138ec:	ldr	x0, [sp, #16]
   138f0:	bl	67b0 <grub_mod_fini+0x6290>
   138f4:	strb	w0, [sp, #63]
   138f8:	ldrb	w0, [sp, #63]
   138fc:	eor	w0, w0, #0x1
   13900:	and	w0, w0, #0xff
   13904:	and	x0, x0, #0xff
   13908:	cmp	x0, #0x0
   1390c:	b.eq	13924 <re_set_registers+0x2c24>  // b.none
   13910:	mov	w0, #0xc                   	// #12
   13914:	b	13948 <re_set_registers+0x2c48>
   13918:	nop
   1391c:	b	13924 <re_set_registers+0x2c24>
   13920:	nop
   13924:	ldr	w0, [sp, #92]
   13928:	add	w0, w0, #0x1
   1392c:	str	w0, [sp, #92]
   13930:	ldr	x0, [sp, #72]
   13934:	ldr	w0, [x0, #4]
   13938:	ldr	w1, [sp, #92]
   1393c:	cmp	w1, w0
   13940:	b.lt	13754 <re_set_registers+0x2a54>  // b.tstop
   13944:	mov	w0, #0x0                   	// #0
   13948:	ldp	x29, x30, [sp], #96
   1394c:	ret
   13950:	stp	x29, x30, [sp, #-48]!
   13954:	mov	x29, sp
   13958:	str	x0, [sp, #24]
   1395c:	str	w1, [sp, #20]
   13960:	ldr	x0, [sp, #24]
   13964:	ldr	w0, [x0, #144]
   13968:	str	w0, [sp, #44]
   1396c:	ldr	x0, [sp, #24]
   13970:	ldr	w0, [x0, #52]
   13974:	ldr	w1, [sp, #20]
   13978:	cmp	w1, w0
   1397c:	b.lt	13998 <re_set_registers+0x2c98>  // b.tstop
   13980:	ldr	x0, [sp, #24]
   13984:	ldr	w1, [x0, #52]
   13988:	ldr	x0, [sp, #24]
   1398c:	ldr	w0, [x0, #64]
   13990:	cmp	w1, w0
   13994:	b.lt	139c4 <re_set_registers+0x2cc4>  // b.tstop
   13998:	ldr	x0, [sp, #24]
   1399c:	ldr	w0, [x0, #44]
   139a0:	ldr	w1, [sp, #20]
   139a4:	cmp	w1, w0
   139a8:	b.lt	13a00 <re_set_registers+0x2d00>  // b.tstop
   139ac:	ldr	x0, [sp, #24]
   139b0:	ldr	w1, [x0, #44]
   139b4:	ldr	x0, [sp, #24]
   139b8:	ldr	w0, [x0, #64]
   139bc:	cmp	w1, w0
   139c0:	b.ge	13a00 <re_set_registers+0x2d00>  // b.tcont
   139c4:	ldr	w0, [sp, #20]
   139c8:	add	w0, w0, #0x1
   139cc:	mov	w1, w0
   139d0:	ldr	x0, [sp, #24]
   139d4:	bl	19324 <re_set_registers+0x8624>
   139d8:	str	w0, [sp, #40]
   139dc:	ldr	w0, [sp, #40]
   139e0:	cmp	w0, #0x0
   139e4:	cset	w0, ne  // ne = any
   139e8:	and	w0, w0, #0xff
   139ec:	and	x0, x0, #0xff
   139f0:	cmp	x0, #0x0
   139f4:	b.eq	13a00 <re_set_registers+0x2d00>  // b.none
   139f8:	ldr	w0, [sp, #40]
   139fc:	b	13a5c <re_set_registers+0x2d5c>
   13a00:	ldr	w1, [sp, #44]
   13a04:	ldr	w0, [sp, #20]
   13a08:	cmp	w1, w0
   13a0c:	b.ge	13a58 <re_set_registers+0x2d58>  // b.tcont
   13a10:	ldr	x0, [sp, #24]
   13a14:	ldr	x1, [x0, #136]
   13a18:	ldrsw	x0, [sp, #44]
   13a1c:	add	x0, x0, #0x1
   13a20:	lsl	x0, x0, #3
   13a24:	add	x3, x1, x0
   13a28:	ldr	w1, [sp, #20]
   13a2c:	ldr	w0, [sp, #44]
   13a30:	sub	w0, w1, w0
   13a34:	sxtw	x0, w0
   13a38:	lsl	x0, x0, #3
   13a3c:	mov	x2, x0
   13a40:	mov	w1, #0x0                   	// #0
   13a44:	mov	x0, x3
   13a48:	bl	0 <grub_memset>
   13a4c:	ldr	x0, [sp, #24]
   13a50:	ldr	w1, [sp, #20]
   13a54:	str	w1, [x0, #144]
   13a58:	mov	w0, #0x0                   	// #0
   13a5c:	ldp	x29, x30, [sp], #48
   13a60:	ret
   13a64:	stp	x29, x30, [sp, #-96]!
   13a68:	mov	x29, sp
   13a6c:	str	x19, [sp, #16]
   13a70:	str	x0, [sp, #56]
   13a74:	str	x1, [sp, #48]
   13a78:	str	x2, [sp, #40]
   13a7c:	str	w3, [sp, #36]
   13a80:	str	wzr, [sp, #92]
   13a84:	b	13bb4 <re_set_registers+0x2eb4>
   13a88:	ldrsw	x0, [sp, #92]
   13a8c:	lsl	x0, x0, #3
   13a90:	ldr	x1, [sp, #48]
   13a94:	add	x0, x1, x0
   13a98:	ldr	x0, [x0]
   13a9c:	cmp	x0, #0x0
   13aa0:	b.ne	13ad0 <re_set_registers+0x2dd0>  // b.any
   13aa4:	ldrsw	x0, [sp, #92]
   13aa8:	lsl	x0, x0, #3
   13aac:	ldr	x1, [sp, #40]
   13ab0:	add	x1, x1, x0
   13ab4:	ldrsw	x0, [sp, #92]
   13ab8:	lsl	x0, x0, #3
   13abc:	ldr	x2, [sp, #48]
   13ac0:	add	x0, x2, x0
   13ac4:	ldr	x1, [x1]
   13ac8:	str	x1, [x0]
   13acc:	b	13ba8 <re_set_registers+0x2ea8>
   13ad0:	ldrsw	x0, [sp, #92]
   13ad4:	lsl	x0, x0, #3
   13ad8:	ldr	x1, [sp, #40]
   13adc:	add	x0, x1, x0
   13ae0:	ldr	x0, [x0]
   13ae4:	cmp	x0, #0x0
   13ae8:	b.eq	13ba8 <re_set_registers+0x2ea8>  // b.none
   13aec:	ldrsw	x0, [sp, #92]
   13af0:	lsl	x0, x0, #3
   13af4:	ldr	x1, [sp, #48]
   13af8:	add	x0, x1, x0
   13afc:	ldr	x0, [x0]
   13b00:	add	x3, x0, #0x8
   13b04:	ldrsw	x0, [sp, #92]
   13b08:	lsl	x0, x0, #3
   13b0c:	ldr	x1, [sp, #40]
   13b10:	add	x0, x1, x0
   13b14:	ldr	x0, [x0]
   13b18:	add	x1, x0, #0x8
   13b1c:	add	x0, sp, #0x48
   13b20:	mov	x2, x1
   13b24:	mov	x1, x3
   13b28:	bl	5fc0 <grub_mod_fini+0x5aa0>
   13b2c:	str	w0, [sp, #88]
   13b30:	ldr	w0, [sp, #88]
   13b34:	cmp	w0, #0x0
   13b38:	cset	w0, ne  // ne = any
   13b3c:	and	w0, w0, #0xff
   13b40:	and	x0, x0, #0xff
   13b44:	cmp	x0, #0x0
   13b48:	b.eq	13b54 <re_set_registers+0x2e54>  // b.none
   13b4c:	ldr	w0, [sp, #88]
   13b50:	b	13bc8 <re_set_registers+0x2ec8>
   13b54:	ldrsw	x0, [sp, #92]
   13b58:	lsl	x0, x0, #3
   13b5c:	ldr	x1, [sp, #48]
   13b60:	add	x19, x1, x0
   13b64:	add	x1, sp, #0x48
   13b68:	add	x0, sp, #0x58
   13b6c:	mov	x2, x1
   13b70:	ldr	x1, [sp, #56]
   13b74:	bl	7104 <grub_mod_fini+0x6be4>
   13b78:	str	x0, [x19]
   13b7c:	ldr	x0, [sp, #80]
   13b80:	bl	2230 <grub_mod_fini+0x1d10>
   13b84:	ldr	w0, [sp, #88]
   13b88:	cmp	w0, #0x0
   13b8c:	cset	w0, ne  // ne = any
   13b90:	and	w0, w0, #0xff
   13b94:	and	x0, x0, #0xff
   13b98:	cmp	x0, #0x0
   13b9c:	b.eq	13ba8 <re_set_registers+0x2ea8>  // b.none
   13ba0:	ldr	w0, [sp, #88]
   13ba4:	b	13bc8 <re_set_registers+0x2ec8>
   13ba8:	ldr	w0, [sp, #92]
   13bac:	add	w0, w0, #0x1
   13bb0:	str	w0, [sp, #92]
   13bb4:	ldr	w1, [sp, #92]
   13bb8:	ldr	w0, [sp, #36]
   13bbc:	cmp	w1, w0
   13bc0:	b.lt	13a88 <re_set_registers+0x2d88>  // b.tstop
   13bc4:	mov	w0, #0x0                   	// #0
   13bc8:	ldr	x19, [sp, #16]
   13bcc:	ldp	x29, x30, [sp], #96
   13bd0:	ret
   13bd4:	stp	x29, x30, [sp, #-96]!
   13bd8:	mov	x29, sp
   13bdc:	str	x19, [sp, #16]
   13be0:	str	x0, [sp, #56]
   13be4:	str	x1, [sp, #48]
   13be8:	str	w2, [sp, #44]
   13bec:	str	x3, [sp, #32]
   13bf0:	ldr	x0, [sp, #56]
   13bf4:	ldr	x0, [x0, #112]
   13bf8:	str	x0, [sp, #88]
   13bfc:	str	wzr, [sp, #76]
   13c00:	ldr	x0, [sp, #56]
   13c04:	ldr	x1, [x0, #136]
   13c08:	ldrsw	x0, [sp, #44]
   13c0c:	lsl	x0, x0, #3
   13c10:	add	x0, x1, x0
   13c14:	ldr	x0, [x0]
   13c18:	cmp	x0, #0x0
   13c1c:	b.eq	13c40 <re_set_registers+0x2f40>  // b.none
   13c20:	ldr	x0, [sp, #56]
   13c24:	ldr	x1, [x0, #136]
   13c28:	ldrsw	x0, [sp, #44]
   13c2c:	lsl	x0, x0, #3
   13c30:	add	x0, x1, x0
   13c34:	ldr	x0, [x0]
   13c38:	add	x0, x0, #0x8
   13c3c:	b	13c44 <re_set_registers+0x2f44>
   13c40:	mov	x0, #0x0                   	// #0
   13c44:	str	x0, [sp, #80]
   13c48:	ldr	x0, [sp, #32]
   13c4c:	ldr	w0, [x0, #4]
   13c50:	cmp	w0, #0x0
   13c54:	b.ne	13c74 <re_set_registers+0x2f74>  // b.any
   13c58:	ldr	x0, [sp, #48]
   13c5c:	ldr	x1, [x0]
   13c60:	ldrsw	x0, [sp, #44]
   13c64:	lsl	x0, x0, #3
   13c68:	add	x0, x1, x0
   13c6c:	str	xzr, [x0]
   13c70:	b	13d68 <re_set_registers+0x3068>
   13c74:	ldr	x0, [sp, #80]
   13c78:	cmp	x0, #0x0
   13c7c:	b.eq	13d1c <re_set_registers+0x301c>  // b.none
   13c80:	ldr	x2, [sp, #80]
   13c84:	ldr	x1, [sp, #32]
   13c88:	ldr	x0, [sp, #88]
   13c8c:	bl	13dec <re_set_registers+0x30ec>
   13c90:	str	w0, [sp, #76]
   13c94:	ldr	w0, [sp, #76]
   13c98:	cmp	w0, #0x0
   13c9c:	cset	w0, ne  // ne = any
   13ca0:	and	w0, w0, #0xff
   13ca4:	and	x0, x0, #0xff
   13ca8:	cmp	x0, #0x0
   13cac:	b.eq	13cb8 <re_set_registers+0x2fb8>  // b.none
   13cb0:	ldr	w0, [sp, #76]
   13cb4:	b	13de0 <re_set_registers+0x30e0>
   13cb8:	ldr	x0, [sp, #48]
   13cbc:	ldr	w0, [x0, #28]
   13cc0:	cmp	w0, #0x0
   13cc4:	b.eq	13d1c <re_set_registers+0x301c>  // b.none
   13cc8:	ldr	x0, [sp, #48]
   13ccc:	add	x1, x0, #0x18
   13cd0:	ldr	x0, [sp, #56]
   13cd4:	ldr	x0, [x0, #160]
   13cd8:	ldr	w5, [sp, #44]
   13cdc:	mov	x4, x0
   13ce0:	mov	x3, x1
   13ce4:	ldr	x2, [sp, #80]
   13ce8:	ldr	x1, [sp, #32]
   13cec:	ldr	x0, [sp, #88]
   13cf0:	bl	146ec <re_set_registers+0x39ec>
   13cf4:	str	w0, [sp, #76]
   13cf8:	ldr	w0, [sp, #76]
   13cfc:	cmp	w0, #0x0
   13d00:	cset	w0, ne  // ne = any
   13d04:	and	w0, w0, #0xff
   13d08:	and	x0, x0, #0xff
   13d0c:	cmp	x0, #0x0
   13d10:	b.eq	13d1c <re_set_registers+0x301c>  // b.none
   13d14:	ldr	w0, [sp, #76]
   13d18:	b	13de0 <re_set_registers+0x30e0>
   13d1c:	ldr	x0, [sp, #48]
   13d20:	ldr	x1, [x0]
   13d24:	ldrsw	x0, [sp, #44]
   13d28:	lsl	x0, x0, #3
   13d2c:	add	x19, x1, x0
   13d30:	add	x0, sp, #0x4c
   13d34:	ldr	x2, [sp, #32]
   13d38:	ldr	x1, [sp, #88]
   13d3c:	bl	7104 <grub_mod_fini+0x6be4>
   13d40:	str	x0, [x19]
   13d44:	ldr	w0, [sp, #76]
   13d48:	cmp	w0, #0x0
   13d4c:	cset	w0, ne  // ne = any
   13d50:	and	w0, w0, #0xff
   13d54:	and	x0, x0, #0xff
   13d58:	cmp	x0, #0x0
   13d5c:	b.eq	13d68 <re_set_registers+0x3068>  // b.none
   13d60:	ldr	w0, [sp, #76]
   13d64:	b	13de0 <re_set_registers+0x30e0>
   13d68:	ldr	x0, [sp, #80]
   13d6c:	cmp	x0, #0x0
   13d70:	b.eq	13ddc <re_set_registers+0x30dc>  // b.none
   13d74:	ldr	x0, [sp, #56]
   13d78:	ldr	x1, [x0, #136]
   13d7c:	ldrsw	x0, [sp, #44]
   13d80:	lsl	x0, x0, #3
   13d84:	add	x0, x1, x0
   13d88:	ldr	x0, [x0]
   13d8c:	ldrb	w0, [x0, #80]
   13d90:	and	w0, w0, #0x40
   13d94:	and	w0, w0, #0xff
   13d98:	cmp	w0, #0x0
   13d9c:	b.eq	13ddc <re_set_registers+0x30dc>  // b.none
   13da0:	ldr	x3, [sp, #80]
   13da4:	ldr	w2, [sp, #44]
   13da8:	ldr	x1, [sp, #48]
   13dac:	ldr	x0, [sp, #56]
   13db0:	bl	14ad0 <re_set_registers+0x3dd0>
   13db4:	str	w0, [sp, #76]
   13db8:	ldr	w0, [sp, #76]
   13dbc:	cmp	w0, #0x0
   13dc0:	cset	w0, ne  // ne = any
   13dc4:	and	w0, w0, #0xff
   13dc8:	and	x0, x0, #0xff
   13dcc:	cmp	x0, #0x0
   13dd0:	b.eq	13ddc <re_set_registers+0x30dc>  // b.none
   13dd4:	ldr	w0, [sp, #76]
   13dd8:	b	13de0 <re_set_registers+0x30e0>
   13ddc:	mov	w0, #0x0                   	// #0
   13de0:	ldr	x19, [sp, #16]
   13de4:	ldp	x29, x30, [sp], #96
   13de8:	ret
   13dec:	stp	x29, x30, [sp, #-80]!
   13df0:	mov	x29, sp
   13df4:	str	x0, [sp, #40]
   13df8:	str	x1, [sp, #32]
   13dfc:	str	x2, [sp, #24]
   13e00:	str	wzr, [sp, #60]
   13e04:	add	x0, sp, #0x3c
   13e08:	ldr	x2, [sp, #32]
   13e0c:	ldr	x1, [sp, #40]
   13e10:	bl	7104 <grub_mod_fini+0x6be4>
   13e14:	str	x0, [sp, #64]
   13e18:	ldr	w0, [sp, #60]
   13e1c:	cmp	w0, #0x0
   13e20:	cset	w0, ne  // ne = any
   13e24:	and	w0, w0, #0xff
   13e28:	and	x0, x0, #0xff
   13e2c:	cmp	x0, #0x0
   13e30:	b.eq	13e3c <re_set_registers+0x313c>  // b.none
   13e34:	ldr	w0, [sp, #60]
   13e38:	b	13f38 <re_set_registers+0x3238>
   13e3c:	ldr	x0, [sp, #64]
   13e40:	ldr	w0, [x0, #40]
   13e44:	cmp	w0, #0x0
   13e48:	b.ne	13f20 <re_set_registers+0x3220>  // b.any
   13e4c:	ldr	x0, [sp, #64]
   13e50:	add	x2, x0, #0x28
   13e54:	ldr	x0, [sp, #32]
   13e58:	ldr	w0, [x0, #4]
   13e5c:	mov	w1, w0
   13e60:	mov	x0, x2
   13e64:	bl	5820 <grub_mod_fini+0x5300>
   13e68:	str	w0, [sp, #60]
   13e6c:	ldr	w0, [sp, #60]
   13e70:	cmp	w0, #0x0
   13e74:	cset	w0, ne  // ne = any
   13e78:	and	w0, w0, #0xff
   13e7c:	and	x0, x0, #0xff
   13e80:	cmp	x0, #0x0
   13e84:	b.eq	13e90 <re_set_registers+0x3190>  // b.none
   13e88:	mov	w0, #0xc                   	// #12
   13e8c:	b	13f38 <re_set_registers+0x3238>
   13e90:	str	wzr, [sp, #76]
   13e94:	b	13f0c <re_set_registers+0x320c>
   13e98:	ldr	x0, [sp, #64]
   13e9c:	add	x3, x0, #0x28
   13ea0:	ldr	x0, [sp, #40]
   13ea4:	ldr	x1, [x0, #56]
   13ea8:	ldr	x0, [sp, #32]
   13eac:	ldr	x2, [x0, #8]
   13eb0:	ldrsw	x0, [sp, #76]
   13eb4:	lsl	x0, x0, #2
   13eb8:	add	x0, x2, x0
   13ebc:	ldr	w0, [x0]
   13ec0:	sxtw	x0, w0
   13ec4:	lsl	x0, x0, #4
   13ec8:	add	x0, x1, x0
   13ecc:	mov	x1, x0
   13ed0:	mov	x0, x3
   13ed4:	bl	634c <grub_mod_fini+0x5e2c>
   13ed8:	str	w0, [sp, #60]
   13edc:	ldr	w0, [sp, #60]
   13ee0:	cmp	w0, #0x0
   13ee4:	cset	w0, ne  // ne = any
   13ee8:	and	w0, w0, #0xff
   13eec:	and	x0, x0, #0xff
   13ef0:	cmp	x0, #0x0
   13ef4:	b.eq	13f00 <re_set_registers+0x3200>  // b.none
   13ef8:	mov	w0, #0xc                   	// #12
   13efc:	b	13f38 <re_set_registers+0x3238>
   13f00:	ldr	w0, [sp, #76]
   13f04:	add	w0, w0, #0x1
   13f08:	str	w0, [sp, #76]
   13f0c:	ldr	x0, [sp, #32]
   13f10:	ldr	w0, [x0, #4]
   13f14:	ldr	w1, [sp, #76]
   13f18:	cmp	w1, w0
   13f1c:	b.lt	13e98 <re_set_registers+0x3198>  // b.tstop
   13f20:	ldr	x0, [sp, #64]
   13f24:	add	x0, x0, #0x28
   13f28:	mov	x2, x0
   13f2c:	ldr	x1, [sp, #24]
   13f30:	ldr	x0, [sp, #32]
   13f34:	bl	5b20 <grub_mod_fini+0x5600>
   13f38:	ldp	x29, x30, [sp], #80
   13f3c:	ret
   13f40:	stp	x29, x30, [sp, #-112]!
   13f44:	mov	x29, sp
   13f48:	str	x0, [sp, #40]
   13f4c:	str	w1, [sp, #36]
   13f50:	str	x2, [sp, #24]
   13f54:	str	x3, [sp, #16]
   13f58:	ldr	x0, [sp, #40]
   13f5c:	ldr	x1, [x0, #56]
   13f60:	ldrsw	x0, [sp, #36]
   13f64:	lsl	x0, x0, #4
   13f68:	add	x0, x1, x0
   13f6c:	str	x0, [sp, #96]
   13f70:	add	x0, sp, #0x38
   13f74:	mov	x2, #0x10                  	// #16
   13f78:	mov	w1, #0x0                   	// #0
   13f7c:	bl	0 <grub_memset>
   13f80:	str	wzr, [sp, #108]
   13f84:	b	14104 <re_set_registers+0x3404>
   13f88:	ldr	x0, [sp, #96]
   13f8c:	ldr	x1, [x0, #8]
   13f90:	ldrsw	x0, [sp, #108]
   13f94:	lsl	x0, x0, #2
   13f98:	add	x0, x1, x0
   13f9c:	ldr	w0, [x0]
   13fa0:	str	w0, [sp, #84]
   13fa4:	ldr	w1, [sp, #84]
   13fa8:	ldr	w0, [sp, #36]
   13fac:	cmp	w1, w0
   13fb0:	b.eq	140f4 <re_set_registers+0x33f4>  // b.none
   13fb4:	ldr	x0, [sp, #40]
   13fb8:	ldr	x1, [x0]
   13fbc:	ldrsw	x0, [sp, #84]
   13fc0:	lsl	x0, x0, #4
   13fc4:	add	x0, x1, x0
   13fc8:	ldrb	w0, [x0, #8]
   13fcc:	and	w0, w0, #0x8
   13fd0:	cmp	w0, #0x0
   13fd4:	b.eq	140f8 <re_set_registers+0x33f8>  // b.none
   13fd8:	ldr	x0, [sp, #40]
   13fdc:	ldr	x1, [x0, #40]
   13fe0:	ldrsw	x0, [sp, #84]
   13fe4:	lsl	x0, x0, #4
   13fe8:	add	x0, x1, x0
   13fec:	ldr	x0, [x0, #8]
   13ff0:	ldr	w0, [x0]
   13ff4:	str	w0, [sp, #80]
   13ff8:	ldr	x0, [sp, #40]
   13ffc:	ldr	x1, [x0, #40]
   14000:	ldrsw	x0, [sp, #84]
   14004:	lsl	x0, x0, #4
   14008:	add	x0, x1, x0
   1400c:	ldr	w0, [x0, #4]
   14010:	cmp	w0, #0x1
   14014:	b.le	1403c <re_set_registers+0x333c>
   14018:	ldr	x0, [sp, #40]
   1401c:	ldr	x1, [x0, #40]
   14020:	ldrsw	x0, [sp, #84]
   14024:	lsl	x0, x0, #4
   14028:	add	x0, x1, x0
   1402c:	ldr	x0, [x0, #8]
   14030:	add	x0, x0, #0x4
   14034:	ldr	w0, [x0]
   14038:	b	14040 <re_set_registers+0x3340>
   1403c:	mov	w0, #0xffffffff            	// #-1
   14040:	str	w0, [sp, #76]
   14044:	ldr	w1, [sp, #80]
   14048:	ldr	x0, [sp, #96]
   1404c:	bl	6b7c <grub_mod_fini+0x665c>
   14050:	cmp	w0, #0x0
   14054:	b.ne	1406c <re_set_registers+0x336c>  // b.any
   14058:	ldr	w1, [sp, #80]
   1405c:	ldr	x0, [sp, #24]
   14060:	bl	6b7c <grub_mod_fini+0x665c>
   14064:	cmp	w0, #0x0
   14068:	b.ne	140a0 <re_set_registers+0x33a0>  // b.any
   1406c:	ldr	w0, [sp, #76]
   14070:	cmp	w0, #0x0
   14074:	b.le	140f8 <re_set_registers+0x33f8>
   14078:	ldr	w1, [sp, #76]
   1407c:	ldr	x0, [sp, #96]
   14080:	bl	6b7c <grub_mod_fini+0x665c>
   14084:	cmp	w0, #0x0
   14088:	b.ne	140f8 <re_set_registers+0x33f8>  // b.any
   1408c:	ldr	w1, [sp, #76]
   14090:	ldr	x0, [sp, #24]
   14094:	bl	6b7c <grub_mod_fini+0x665c>
   14098:	cmp	w0, #0x0
   1409c:	b.eq	140f8 <re_set_registers+0x33f8>  // b.none
   140a0:	ldr	x0, [sp, #40]
   140a4:	ldr	x1, [x0, #56]
   140a8:	ldrsw	x0, [sp, #84]
   140ac:	lsl	x0, x0, #4
   140b0:	add	x1, x1, x0
   140b4:	add	x0, sp, #0x38
   140b8:	mov	x2, x1
   140bc:	ldr	x1, [sp, #16]
   140c0:	bl	5b20 <grub_mod_fini+0x5600>
   140c4:	str	w0, [sp, #72]
   140c8:	ldr	w0, [sp, #72]
   140cc:	cmp	w0, #0x0
   140d0:	cset	w0, ne  // ne = any
   140d4:	and	w0, w0, #0xff
   140d8:	and	x0, x0, #0xff
   140dc:	cmp	x0, #0x0
   140e0:	b.eq	140f8 <re_set_registers+0x33f8>  // b.none
   140e4:	ldr	x0, [sp, #64]
   140e8:	bl	2230 <grub_mod_fini+0x1d10>
   140ec:	ldr	w0, [sp, #72]
   140f0:	b	1419c <re_set_registers+0x349c>
   140f4:	nop
   140f8:	ldr	w0, [sp, #108]
   140fc:	add	w0, w0, #0x1
   14100:	str	w0, [sp, #108]
   14104:	ldr	x0, [sp, #96]
   14108:	ldr	w0, [x0, #4]
   1410c:	ldr	w1, [sp, #108]
   14110:	cmp	w1, w0
   14114:	b.lt	13f88 <re_set_registers+0x3288>  // b.tstop
   14118:	str	wzr, [sp, #108]
   1411c:	b	1417c <re_set_registers+0x347c>
   14120:	ldr	x0, [sp, #96]
   14124:	ldr	x1, [x0, #8]
   14128:	ldrsw	x0, [sp, #108]
   1412c:	lsl	x0, x0, #2
   14130:	add	x0, x1, x0
   14134:	ldr	w0, [x0]
   14138:	str	w0, [sp, #92]
   1413c:	add	x0, sp, #0x38
   14140:	ldr	w1, [sp, #92]
   14144:	bl	6b7c <grub_mod_fini+0x665c>
   14148:	cmp	w0, #0x0
   1414c:	b.ne	14170 <re_set_registers+0x3470>  // b.any
   14150:	ldr	w1, [sp, #92]
   14154:	ldr	x0, [sp, #24]
   14158:	bl	6b7c <grub_mod_fini+0x665c>
   1415c:	sub	w0, w0, #0x1
   14160:	str	w0, [sp, #88]
   14164:	ldr	w1, [sp, #88]
   14168:	ldr	x0, [sp, #24]
   1416c:	bl	6c54 <grub_mod_fini+0x6734>
   14170:	ldr	w0, [sp, #108]
   14174:	add	w0, w0, #0x1
   14178:	str	w0, [sp, #108]
   1417c:	ldr	x0, [sp, #96]
   14180:	ldr	w0, [x0, #4]
   14184:	ldr	w1, [sp, #108]
   14188:	cmp	w1, w0
   1418c:	b.lt	14120 <re_set_registers+0x3420>  // b.tstop
   14190:	ldr	x0, [sp, #64]
   14194:	bl	2230 <grub_mod_fini+0x1d10>
   14198:	mov	w0, #0x0                   	// #0
   1419c:	ldp	x29, x30, [sp], #112
   141a0:	ret
   141a4:	stp	x29, x30, [sp, #-96]!
   141a8:	mov	x29, sp
   141ac:	str	x0, [sp, #40]
   141b0:	str	x1, [sp, #32]
   141b4:	str	w2, [sp, #28]
   141b8:	str	w3, [sp, #24]
   141bc:	str	w4, [sp, #20]
   141c0:	str	w5, [sp, #16]
   141c4:	ldr	x0, [sp, #40]
   141c8:	ldr	x0, [x0, #112]
   141cc:	str	x0, [sp, #80]
   141d0:	ldr	w1, [sp, #24]
   141d4:	ldr	x0, [sp, #40]
   141d8:	bl	19a54 <re_set_registers+0x8d54>
   141dc:	str	w0, [sp, #76]
   141e0:	ldr	w1, [sp, #16]
   141e4:	ldr	x0, [sp, #40]
   141e8:	bl	19a54 <re_set_registers+0x8d54>
   141ec:	str	w0, [sp, #72]
   141f0:	str	wzr, [sp, #92]
   141f4:	b	142f0 <re_set_registers+0x35f0>
   141f8:	ldr	x0, [sp, #40]
   141fc:	ldr	x2, [x0, #160]
   14200:	ldr	x0, [sp, #32]
   14204:	ldr	x1, [x0, #8]
   14208:	ldrsw	x0, [sp, #92]
   1420c:	lsl	x0, x0, #2
   14210:	add	x0, x1, x0
   14214:	ldr	w0, [x0]
   14218:	sxtw	x1, w0
   1421c:	mov	x0, x1
   14220:	lsl	x0, x0, #2
   14224:	add	x0, x0, x1
   14228:	lsl	x0, x0, #2
   1422c:	add	x0, x2, x0
   14230:	str	x0, [sp, #64]
   14234:	ldr	x0, [sp, #80]
   14238:	ldr	x1, [x0]
   1423c:	ldr	x0, [sp, #64]
   14240:	ldr	w0, [x0]
   14244:	sxtw	x0, w0
   14248:	lsl	x0, x0, #4
   1424c:	add	x0, x1, x0
   14250:	ldr	w0, [x0]
   14254:	str	w0, [sp, #60]
   14258:	ldr	x0, [sp, #32]
   1425c:	ldr	x1, [x0, #8]
   14260:	ldrsw	x0, [sp, #92]
   14264:	lsl	x0, x0, #2
   14268:	add	x0, x1, x0
   1426c:	ldr	w0, [x0]
   14270:	ldr	w5, [sp, #76]
   14274:	ldr	w4, [sp, #24]
   14278:	ldr	w3, [sp, #28]
   1427c:	ldr	w2, [sp, #60]
   14280:	mov	w1, w0
   14284:	ldr	x0, [sp, #40]
   14288:	bl	145f4 <re_set_registers+0x38f4>
   1428c:	str	w0, [sp, #56]
   14290:	ldr	x0, [sp, #32]
   14294:	ldr	x1, [x0, #8]
   14298:	ldrsw	x0, [sp, #92]
   1429c:	lsl	x0, x0, #2
   142a0:	add	x0, x1, x0
   142a4:	ldr	w0, [x0]
   142a8:	ldr	w5, [sp, #72]
   142ac:	ldr	w4, [sp, #16]
   142b0:	ldr	w3, [sp, #20]
   142b4:	ldr	w2, [sp, #60]
   142b8:	mov	w1, w0
   142bc:	ldr	x0, [sp, #40]
   142c0:	bl	145f4 <re_set_registers+0x38f4>
   142c4:	str	w0, [sp, #52]
   142c8:	ldr	w1, [sp, #52]
   142cc:	ldr	w0, [sp, #56]
   142d0:	cmp	w1, w0
   142d4:	b.ne	142e8 <re_set_registers+0x35e8>  // b.any
   142d8:	ldr	w0, [sp, #92]
   142dc:	add	w0, w0, #0x1
   142e0:	str	w0, [sp, #92]
   142e4:	b	142f0 <re_set_registers+0x35f0>
   142e8:	mov	w0, #0x1                   	// #1
   142ec:	b	14308 <re_set_registers+0x3608>
   142f0:	ldr	x0, [sp, #32]
   142f4:	ldr	w0, [x0, #4]
   142f8:	ldr	w1, [sp, #92]
   142fc:	cmp	w1, w0
   14300:	b.lt	141f8 <re_set_registers+0x34f8>  // b.tstop
   14304:	mov	w0, #0x0                   	// #0
   14308:	ldp	x29, x30, [sp], #96
   1430c:	ret
   14310:	stp	x29, x30, [sp, #-96]!
   14314:	mov	x29, sp
   14318:	str	x0, [sp, #40]
   1431c:	str	w1, [sp, #36]
   14320:	str	w2, [sp, #32]
   14324:	str	w3, [sp, #28]
   14328:	str	w4, [sp, #24]
   1432c:	ldr	x0, [sp, #40]
   14330:	ldr	x0, [x0, #112]
   14334:	str	x0, [sp, #72]
   14338:	ldr	x0, [sp, #72]
   1433c:	ldr	x1, [x0, #48]
   14340:	ldrsw	x0, [sp, #28]
   14344:	lsl	x0, x0, #4
   14348:	add	x0, x1, x0
   1434c:	str	x0, [sp, #64]
   14350:	str	wzr, [sp, #92]
   14354:	b	145cc <re_set_registers+0x38cc>
   14358:	ldr	x0, [sp, #64]
   1435c:	ldr	x1, [x0, #8]
   14360:	ldrsw	x0, [sp, #92]
   14364:	lsl	x0, x0, #2
   14368:	add	x0, x1, x0
   1436c:	ldr	w0, [x0]
   14370:	str	w0, [sp, #60]
   14374:	ldr	x0, [sp, #72]
   14378:	ldr	x1, [x0]
   1437c:	ldrsw	x0, [sp, #60]
   14380:	lsl	x0, x0, #4
   14384:	add	x0, x1, x0
   14388:	ldrb	w0, [x0, #8]
   1438c:	cmp	w0, #0x9
   14390:	b.eq	14568 <re_set_registers+0x3868>  // b.none
   14394:	cmp	w0, #0x9
   14398:	b.gt	145a4 <re_set_registers+0x38a4>
   1439c:	cmp	w0, #0x4
   143a0:	b.eq	143b0 <re_set_registers+0x36b0>  // b.none
   143a4:	cmp	w0, #0x8
   143a8:	b.eq	1452c <re_set_registers+0x382c>  // b.none
   143ac:	b	145a4 <re_set_registers+0x38a4>
   143b0:	ldr	w0, [sp, #24]
   143b4:	cmn	w0, #0x1
   143b8:	b.eq	145ac <re_set_registers+0x38ac>  // b.none
   143bc:	ldr	x0, [sp, #40]
   143c0:	ldr	x2, [x0, #160]
   143c4:	ldrsw	x1, [sp, #24]
   143c8:	mov	x0, x1
   143cc:	lsl	x0, x0, #2
   143d0:	add	x0, x0, x1
   143d4:	lsl	x0, x0, #2
   143d8:	add	x0, x2, x0
   143dc:	str	x0, [sp, #80]
   143e0:	ldr	x0, [sp, #80]
   143e4:	ldr	w0, [x0]
   143e8:	ldr	w1, [sp, #60]
   143ec:	cmp	w1, w0
   143f0:	b.ne	14504 <re_set_registers+0x3804>  // b.any
   143f4:	ldr	w0, [sp, #32]
   143f8:	cmp	w0, #0x3f
   143fc:	b.gt	14420 <re_set_registers+0x3720>
   14400:	ldr	x0, [sp, #80]
   14404:	ldrh	w0, [x0, #18]
   14408:	and	x1, x0, #0xffff
   1440c:	ldr	w0, [sp, #32]
   14410:	lsr	x0, x1, x0
   14414:	and	x0, x0, #0x1
   14418:	cmp	x0, #0x0
   1441c:	b.eq	1450c <re_set_registers+0x380c>  // b.none
   14420:	ldr	x0, [sp, #72]
   14424:	ldr	x1, [x0, #40]
   14428:	ldrsw	x0, [sp, #60]
   1442c:	lsl	x0, x0, #4
   14430:	add	x0, x1, x0
   14434:	ldr	x0, [x0, #8]
   14438:	ldr	w0, [x0]
   1443c:	str	w0, [sp, #56]
   14440:	ldr	w1, [sp, #56]
   14444:	ldr	w0, [sp, #28]
   14448:	cmp	w1, w0
   1444c:	b.ne	14470 <re_set_registers+0x3770>  // b.any
   14450:	ldr	w0, [sp, #36]
   14454:	and	w0, w0, #0x1
   14458:	cmp	w0, #0x0
   1445c:	b.eq	14468 <re_set_registers+0x3768>  // b.none
   14460:	mov	w0, #0xffffffff            	// #-1
   14464:	b	145ec <re_set_registers+0x38ec>
   14468:	mov	w0, #0x0                   	// #0
   1446c:	b	145ec <re_set_registers+0x38ec>
   14470:	ldr	w4, [sp, #24]
   14474:	ldr	w3, [sp, #56]
   14478:	ldr	w2, [sp, #32]
   1447c:	ldr	w1, [sp, #36]
   14480:	ldr	x0, [sp, #40]
   14484:	bl	14310 <re_set_registers+0x3610>
   14488:	str	w0, [sp, #52]
   1448c:	ldr	w0, [sp, #52]
   14490:	cmn	w0, #0x1
   14494:	b.ne	144a0 <re_set_registers+0x37a0>  // b.any
   14498:	mov	w0, #0xffffffff            	// #-1
   1449c:	b	145ec <re_set_registers+0x38ec>
   144a0:	ldr	w0, [sp, #52]
   144a4:	cmp	w0, #0x0
   144a8:	b.ne	144c4 <re_set_registers+0x37c4>  // b.any
   144ac:	ldr	w0, [sp, #36]
   144b0:	and	w0, w0, #0x2
   144b4:	cmp	w0, #0x0
   144b8:	b.eq	144c4 <re_set_registers+0x37c4>  // b.none
   144bc:	mov	w0, #0x0                   	// #0
   144c0:	b	145ec <re_set_registers+0x38ec>
   144c4:	ldr	w0, [sp, #32]
   144c8:	cmp	w0, #0x3f
   144cc:	b.gt	14510 <re_set_registers+0x3810>
   144d0:	ldr	x0, [sp, #80]
   144d4:	ldrh	w1, [x0, #18]
   144d8:	ldr	w0, [sp, #32]
   144dc:	mov	x2, #0x1                   	// #1
   144e0:	lsl	x0, x2, x0
   144e4:	and	w0, w0, #0xffff
   144e8:	mvn	w0, w0
   144ec:	and	w0, w0, #0xffff
   144f0:	and	w0, w1, w0
   144f4:	and	w1, w0, #0xffff
   144f8:	ldr	x0, [sp, #80]
   144fc:	strh	w1, [x0, #18]
   14500:	b	14510 <re_set_registers+0x3810>
   14504:	nop
   14508:	b	14510 <re_set_registers+0x3810>
   1450c:	nop
   14510:	ldr	x0, [sp, #80]
   14514:	add	x1, x0, #0x14
   14518:	str	x1, [sp, #80]
   1451c:	ldrb	w0, [x0, #16]
   14520:	cmp	w0, #0x0
   14524:	b.ne	143e0 <re_set_registers+0x36e0>  // b.any
   14528:	b	145ac <re_set_registers+0x38ac>
   1452c:	ldr	w0, [sp, #36]
   14530:	and	w0, w0, #0x1
   14534:	cmp	w0, #0x0
   14538:	b.eq	145b4 <re_set_registers+0x38b4>  // b.none
   1453c:	ldr	x0, [sp, #72]
   14540:	ldr	x1, [x0]
   14544:	ldrsw	x0, [sp, #60]
   14548:	lsl	x0, x0, #4
   1454c:	add	x0, x1, x0
   14550:	ldr	w0, [x0]
   14554:	ldr	w1, [sp, #32]
   14558:	cmp	w1, w0
   1455c:	b.ne	145b4 <re_set_registers+0x38b4>  // b.any
   14560:	mov	w0, #0xffffffff            	// #-1
   14564:	b	145ec <re_set_registers+0x38ec>
   14568:	ldr	w0, [sp, #36]
   1456c:	and	w0, w0, #0x2
   14570:	cmp	w0, #0x0
   14574:	b.eq	145bc <re_set_registers+0x38bc>  // b.none
   14578:	ldr	x0, [sp, #72]
   1457c:	ldr	x1, [x0]
   14580:	ldrsw	x0, [sp, #60]
   14584:	lsl	x0, x0, #4
   14588:	add	x0, x1, x0
   1458c:	ldr	w0, [x0]
   14590:	ldr	w1, [sp, #32]
   14594:	cmp	w1, w0
   14598:	b.ne	145bc <re_set_registers+0x38bc>  // b.any
   1459c:	mov	w0, #0x0                   	// #0
   145a0:	b	145ec <re_set_registers+0x38ec>
   145a4:	nop
   145a8:	b	145c0 <re_set_registers+0x38c0>
   145ac:	nop
   145b0:	b	145c0 <re_set_registers+0x38c0>
   145b4:	nop
   145b8:	b	145c0 <re_set_registers+0x38c0>
   145bc:	nop
   145c0:	ldr	w0, [sp, #92]
   145c4:	add	w0, w0, #0x1
   145c8:	str	w0, [sp, #92]
   145cc:	ldr	x0, [sp, #64]
   145d0:	ldr	w0, [x0, #4]
   145d4:	ldr	w1, [sp, #92]
   145d8:	cmp	w1, w0
   145dc:	b.lt	14358 <re_set_registers+0x3658>  // b.tstop
   145e0:	ldr	w0, [sp, #36]
   145e4:	asr	w0, w0, #1
   145e8:	and	w0, w0, #0x1
   145ec:	ldp	x29, x30, [sp], #96
   145f0:	ret
   145f4:	stp	x29, x30, [sp, #-64]!
   145f8:	mov	x29, sp
   145fc:	str	x0, [sp, #40]
   14600:	str	w1, [sp, #36]
   14604:	str	w2, [sp, #32]
   14608:	str	w3, [sp, #28]
   1460c:	str	w4, [sp, #24]
   14610:	str	w5, [sp, #20]
   14614:	ldr	x0, [sp, #40]
   14618:	ldr	x2, [x0, #160]
   1461c:	ldrsw	x1, [sp, #36]
   14620:	mov	x0, x1
   14624:	lsl	x0, x0, #2
   14628:	add	x0, x0, x1
   1462c:	lsl	x0, x0, #2
   14630:	add	x0, x2, x0
   14634:	str	x0, [sp, #56]
   14638:	ldr	x0, [sp, #56]
   1463c:	ldr	w0, [x0, #8]
   14640:	ldr	w1, [sp, #24]
   14644:	cmp	w1, w0
   14648:	b.ge	14654 <re_set_registers+0x3954>  // b.tcont
   1464c:	mov	w0, #0xffffffff            	// #-1
   14650:	b	146e4 <re_set_registers+0x39e4>
   14654:	ldr	x0, [sp, #56]
   14658:	ldr	w0, [x0, #12]
   1465c:	ldr	w1, [sp, #24]
   14660:	cmp	w1, w0
   14664:	b.le	14670 <re_set_registers+0x3970>
   14668:	mov	w0, #0x1                   	// #1
   1466c:	b	146e4 <re_set_registers+0x39e4>
   14670:	ldr	x0, [sp, #56]
   14674:	ldr	w0, [x0, #8]
   14678:	ldr	w1, [sp, #24]
   1467c:	cmp	w1, w0
   14680:	cset	w0, eq  // eq = none
   14684:	and	w0, w0, #0xff
   14688:	str	w0, [sp, #52]
   1468c:	ldr	x0, [sp, #56]
   14690:	ldr	w0, [x0, #12]
   14694:	ldr	w1, [sp, #24]
   14698:	cmp	w1, w0
   1469c:	b.ne	146a8 <re_set_registers+0x39a8>  // b.any
   146a0:	mov	w0, #0x2                   	// #2
   146a4:	b	146ac <re_set_registers+0x39ac>
   146a8:	mov	w0, #0x0                   	// #0
   146ac:	ldr	w1, [sp, #52]
   146b0:	orr	w0, w1, w0
   146b4:	str	w0, [sp, #52]
   146b8:	ldr	w0, [sp, #52]
   146bc:	cmp	w0, #0x0
   146c0:	b.ne	146cc <re_set_registers+0x39cc>  // b.any
   146c4:	mov	w0, #0x0                   	// #0
   146c8:	b	146e4 <re_set_registers+0x39e4>
   146cc:	ldr	w4, [sp, #20]
   146d0:	ldr	w3, [sp, #28]
   146d4:	ldr	w2, [sp, #32]
   146d8:	ldr	w1, [sp, #52]
   146dc:	ldr	x0, [sp, #40]
   146e0:	bl	14310 <re_set_registers+0x3610>
   146e4:	ldp	x29, x30, [sp], #64
   146e8:	ret
   146ec:	stp	x29, x30, [sp, #-128]!
   146f0:	mov	x29, sp
   146f4:	str	x0, [sp, #56]
   146f8:	str	x1, [sp, #48]
   146fc:	str	x2, [sp, #40]
   14700:	str	x3, [sp, #32]
   14704:	str	x4, [sp, #24]
   14708:	str	w5, [sp, #20]
   1470c:	str	wzr, [sp, #120]
   14710:	b	14ab0 <re_set_registers+0x3db0>
   14714:	ldr	x0, [sp, #32]
   14718:	ldr	x1, [x0, #8]
   1471c:	ldrsw	x0, [sp, #120]
   14720:	lsl	x0, x0, #2
   14724:	add	x0, x1, x0
   14728:	ldr	w0, [x0]
   1472c:	sxtw	x1, w0
   14730:	mov	x0, x1
   14734:	lsl	x0, x0, #2
   14738:	add	x0, x0, x1
   1473c:	lsl	x0, x0, #2
   14740:	mov	x1, x0
   14744:	ldr	x0, [sp, #24]
   14748:	add	x0, x0, x1
   1474c:	str	x0, [sp, #104]
   14750:	ldr	x0, [sp, #104]
   14754:	ldr	w0, [x0, #8]
   14758:	ldr	w1, [sp, #20]
   1475c:	cmp	w1, w0
   14760:	b.le	14aa0 <re_set_registers+0x3da0>
   14764:	ldr	x0, [sp, #104]
   14768:	ldr	w0, [x0, #4]
   1476c:	ldr	w1, [sp, #20]
   14770:	cmp	w1, w0
   14774:	b.gt	14aa0 <re_set_registers+0x3da0>
   14778:	ldr	x0, [sp, #56]
   1477c:	ldr	x1, [x0]
   14780:	ldr	x0, [sp, #104]
   14784:	ldr	w0, [x0]
   14788:	sxtw	x0, w0
   1478c:	lsl	x0, x0, #4
   14790:	add	x0, x1, x0
   14794:	ldr	w0, [x0]
   14798:	str	w0, [sp, #100]
   1479c:	ldr	x0, [sp, #104]
   147a0:	ldr	w0, [x0, #12]
   147a4:	ldr	w1, [sp, #20]
   147a8:	cmp	w1, w0
   147ac:	b.ne	149c0 <re_set_registers+0x3cc0>  // b.any
   147b0:	mov	w0, #0xffffffff            	// #-1
   147b4:	str	w0, [sp, #116]
   147b8:	mov	w0, #0xffffffff            	// #-1
   147bc:	str	w0, [sp, #112]
   147c0:	str	wzr, [sp, #124]
   147c4:	b	14880 <re_set_registers+0x3b80>
   147c8:	ldr	x0, [sp, #48]
   147cc:	ldr	x1, [x0, #8]
   147d0:	ldrsw	x0, [sp, #124]
   147d4:	lsl	x0, x0, #2
   147d8:	add	x0, x1, x0
   147dc:	ldr	w0, [x0]
   147e0:	str	w0, [sp, #80]
   147e4:	ldr	x0, [sp, #56]
   147e8:	ldr	x1, [x0]
   147ec:	ldrsw	x0, [sp, #80]
   147f0:	lsl	x0, x0, #4
   147f4:	add	x0, x1, x0
   147f8:	ldrb	w0, [x0, #8]
   147fc:	str	w0, [sp, #76]
   14800:	ldr	w0, [sp, #76]
   14804:	cmp	w0, #0x8
   14808:	b.ne	1483c <re_set_registers+0x3b3c>  // b.any
   1480c:	ldr	x0, [sp, #56]
   14810:	ldr	x1, [x0]
   14814:	ldrsw	x0, [sp, #80]
   14818:	lsl	x0, x0, #4
   1481c:	add	x0, x1, x0
   14820:	ldr	w0, [x0]
   14824:	ldr	w1, [sp, #100]
   14828:	cmp	w1, w0
   1482c:	b.ne	1483c <re_set_registers+0x3b3c>  // b.any
   14830:	ldr	w0, [sp, #80]
   14834:	str	w0, [sp, #116]
   14838:	b	14874 <re_set_registers+0x3b74>
   1483c:	ldr	w0, [sp, #76]
   14840:	cmp	w0, #0x9
   14844:	b.ne	14874 <re_set_registers+0x3b74>  // b.any
   14848:	ldr	x0, [sp, #56]
   1484c:	ldr	x1, [x0]
   14850:	ldrsw	x0, [sp, #80]
   14854:	lsl	x0, x0, #4
   14858:	add	x0, x1, x0
   1485c:	ldr	w0, [x0]
   14860:	ldr	w1, [sp, #100]
   14864:	cmp	w1, w0
   14868:	b.ne	14874 <re_set_registers+0x3b74>  // b.any
   1486c:	ldr	w0, [sp, #80]
   14870:	str	w0, [sp, #112]
   14874:	ldr	w0, [sp, #124]
   14878:	add	w0, w0, #0x1
   1487c:	str	w0, [sp, #124]
   14880:	ldr	x0, [sp, #48]
   14884:	ldr	w0, [x0, #4]
   14888:	ldr	w1, [sp, #124]
   1488c:	cmp	w1, w0
   14890:	b.lt	147c8 <re_set_registers+0x3ac8>  // b.tstop
   14894:	ldr	w0, [sp, #116]
   14898:	cmp	w0, #0x0
   1489c:	b.lt	148dc <re_set_registers+0x3bdc>  // b.tstop
   148a0:	ldr	x3, [sp, #40]
   148a4:	ldr	x2, [sp, #48]
   148a8:	ldr	w1, [sp, #116]
   148ac:	ldr	x0, [sp, #56]
   148b0:	bl	13f40 <re_set_registers+0x3240>
   148b4:	str	w0, [sp, #88]
   148b8:	ldr	w0, [sp, #88]
   148bc:	cmp	w0, #0x0
   148c0:	cset	w0, ne  // ne = any
   148c4:	and	w0, w0, #0xff
   148c8:	and	x0, x0, #0xff
   148cc:	cmp	x0, #0x0
   148d0:	b.eq	148dc <re_set_registers+0x3bdc>  // b.none
   148d4:	ldr	w0, [sp, #88]
   148d8:	b	14ac8 <re_set_registers+0x3dc8>
   148dc:	ldr	w0, [sp, #112]
   148e0:	cmp	w0, #0x0
   148e4:	b.lt	14aa4 <re_set_registers+0x3da4>  // b.tstop
   148e8:	str	wzr, [sp, #124]
   148ec:	b	149a8 <re_set_registers+0x3ca8>
   148f0:	ldr	x0, [sp, #48]
   148f4:	ldr	x1, [x0, #8]
   148f8:	ldrsw	x0, [sp, #124]
   148fc:	lsl	x0, x0, #2
   14900:	add	x0, x1, x0
   14904:	ldr	w0, [x0]
   14908:	str	w0, [sp, #84]
   1490c:	ldr	x0, [sp, #56]
   14910:	ldr	x1, [x0, #56]
   14914:	ldrsw	x0, [sp, #84]
   14918:	lsl	x0, x0, #4
   1491c:	add	x0, x1, x0
   14920:	ldr	w1, [sp, #112]
   14924:	bl	6b7c <grub_mod_fini+0x665c>
   14928:	cmp	w0, #0x0
   1492c:	b.ne	1499c <re_set_registers+0x3c9c>  // b.any
   14930:	ldr	x0, [sp, #56]
   14934:	ldr	x1, [x0, #48]
   14938:	ldrsw	x0, [sp, #84]
   1493c:	lsl	x0, x0, #4
   14940:	add	x0, x1, x0
   14944:	ldr	w1, [sp, #112]
   14948:	bl	6b7c <grub_mod_fini+0x665c>
   1494c:	cmp	w0, #0x0
   14950:	b.ne	1499c <re_set_registers+0x3c9c>  // b.any
   14954:	ldr	x3, [sp, #40]
   14958:	ldr	x2, [sp, #48]
   1495c:	ldr	w1, [sp, #84]
   14960:	ldr	x0, [sp, #56]
   14964:	bl	13f40 <re_set_registers+0x3240>
   14968:	str	w0, [sp, #88]
   1496c:	ldr	w0, [sp, #88]
   14970:	cmp	w0, #0x0
   14974:	cset	w0, ne  // ne = any
   14978:	and	w0, w0, #0xff
   1497c:	and	x0, x0, #0xff
   14980:	cmp	x0, #0x0
   14984:	b.eq	14990 <re_set_registers+0x3c90>  // b.none
   14988:	ldr	w0, [sp, #88]
   1498c:	b	14ac8 <re_set_registers+0x3dc8>
   14990:	ldr	w0, [sp, #124]
   14994:	sub	w0, w0, #0x1
   14998:	str	w0, [sp, #124]
   1499c:	ldr	w0, [sp, #124]
   149a0:	add	w0, w0, #0x1
   149a4:	str	w0, [sp, #124]
   149a8:	ldr	x0, [sp, #48]
   149ac:	ldr	w0, [x0, #4]
   149b0:	ldr	w1, [sp, #124]
   149b4:	cmp	w1, w0
   149b8:	b.lt	148f0 <re_set_registers+0x3bf0>  // b.tstop
   149bc:	b	14aa4 <re_set_registers+0x3da4>
   149c0:	str	wzr, [sp, #124]
   149c4:	b	14a88 <re_set_registers+0x3d88>
   149c8:	ldr	x0, [sp, #48]
   149cc:	ldr	x1, [x0, #8]
   149d0:	ldrsw	x0, [sp, #124]
   149d4:	lsl	x0, x0, #2
   149d8:	add	x0, x1, x0
   149dc:	ldr	w0, [x0]
   149e0:	str	w0, [sp, #96]
   149e4:	ldr	x0, [sp, #56]
   149e8:	ldr	x1, [x0]
   149ec:	ldrsw	x0, [sp, #96]
   149f0:	lsl	x0, x0, #4
   149f4:	add	x0, x1, x0
   149f8:	ldrb	w0, [x0, #8]
   149fc:	str	w0, [sp, #92]
   14a00:	ldr	w0, [sp, #92]
   14a04:	cmp	w0, #0x9
   14a08:	b.eq	14a18 <re_set_registers+0x3d18>  // b.none
   14a0c:	ldr	w0, [sp, #92]
   14a10:	cmp	w0, #0x8
   14a14:	b.ne	14a7c <re_set_registers+0x3d7c>  // b.any
   14a18:	ldr	x0, [sp, #56]
   14a1c:	ldr	x1, [x0]
   14a20:	ldrsw	x0, [sp, #96]
   14a24:	lsl	x0, x0, #4
   14a28:	add	x0, x1, x0
   14a2c:	ldr	w0, [x0]
   14a30:	ldr	w1, [sp, #100]
   14a34:	cmp	w1, w0
   14a38:	b.ne	14a78 <re_set_registers+0x3d78>  // b.any
   14a3c:	ldr	x3, [sp, #40]
   14a40:	ldr	x2, [sp, #48]
   14a44:	ldr	w1, [sp, #96]
   14a48:	ldr	x0, [sp, #56]
   14a4c:	bl	13f40 <re_set_registers+0x3240>
   14a50:	str	w0, [sp, #88]
   14a54:	ldr	w0, [sp, #88]
   14a58:	cmp	w0, #0x0
   14a5c:	cset	w0, ne  // ne = any
   14a60:	and	w0, w0, #0xff
   14a64:	and	x0, x0, #0xff
   14a68:	cmp	x0, #0x0
   14a6c:	b.eq	14a7c <re_set_registers+0x3d7c>  // b.none
   14a70:	ldr	w0, [sp, #88]
   14a74:	b	14ac8 <re_set_registers+0x3dc8>
   14a78:	nop
   14a7c:	ldr	w0, [sp, #124]
   14a80:	add	w0, w0, #0x1
   14a84:	str	w0, [sp, #124]
   14a88:	ldr	x0, [sp, #48]
   14a8c:	ldr	w0, [x0, #4]
   14a90:	ldr	w1, [sp, #124]
   14a94:	cmp	w1, w0
   14a98:	b.lt	149c8 <re_set_registers+0x3cc8>  // b.tstop
   14a9c:	b	14aa4 <re_set_registers+0x3da4>
   14aa0:	nop
   14aa4:	ldr	w0, [sp, #120]
   14aa8:	add	w0, w0, #0x1
   14aac:	str	w0, [sp, #120]
   14ab0:	ldr	x0, [sp, #32]
   14ab4:	ldr	w0, [x0, #4]
   14ab8:	ldr	w1, [sp, #120]
   14abc:	cmp	w1, w0
   14ac0:	b.lt	14714 <re_set_registers+0x3a14>  // b.tstop
   14ac4:	mov	w0, #0x0                   	// #0
   14ac8:	ldp	x29, x30, [sp], #128
   14acc:	ret
   14ad0:	stp	x29, x30, [sp, #-160]!
   14ad4:	mov	x29, sp
   14ad8:	str	x0, [sp, #40]
   14adc:	str	x1, [sp, #32]
   14ae0:	str	w2, [sp, #28]
   14ae4:	str	x3, [sp, #16]
   14ae8:	ldr	x0, [sp, #40]
   14aec:	ldr	x0, [x0, #112]
   14af0:	str	x0, [sp, #128]
   14af4:	ldr	w1, [sp, #28]
   14af8:	ldr	x0, [sp, #40]
   14afc:	bl	19a54 <re_set_registers+0x8d54>
   14b00:	str	w0, [sp, #124]
   14b04:	ldr	w0, [sp, #124]
   14b08:	cmn	w0, #0x1
   14b0c:	b.ne	14b18 <re_set_registers+0x3e18>  // b.any
   14b10:	mov	w0, #0x0                   	// #0
   14b14:	b	14f24 <re_set_registers+0x4224>
   14b18:	str	xzr, [sp, #48]
   14b1c:	str	wzr, [sp, #152]
   14b20:	b	14edc <re_set_registers+0x41dc>
   14b24:	ldr	x0, [sp, #16]
   14b28:	ldr	x1, [x0, #8]
   14b2c:	ldrsw	x0, [sp, #152]
   14b30:	lsl	x0, x0, #2
   14b34:	add	x0, x1, x0
   14b38:	ldr	w0, [x0]
   14b3c:	str	w0, [sp, #120]
   14b40:	ldr	x0, [sp, #128]
   14b44:	ldr	x1, [x0]
   14b48:	ldrsw	x0, [sp, #120]
   14b4c:	lsl	x0, x0, #4
   14b50:	add	x0, x1, x0
   14b54:	ldrb	w0, [x0, #8]
   14b58:	str	w0, [sp, #116]
   14b5c:	ldr	x0, [sp, #32]
   14b60:	ldr	w0, [x0, #16]
   14b64:	ldr	w1, [sp, #120]
   14b68:	cmp	w1, w0
   14b6c:	b.ne	14b84 <re_set_registers+0x3e84>  // b.any
   14b70:	ldr	x0, [sp, #32]
   14b74:	ldr	w0, [x0, #20]
   14b78:	ldr	w1, [sp, #28]
   14b7c:	cmp	w1, w0
   14b80:	b.eq	14ec4 <re_set_registers+0x41c4>  // b.none
   14b84:	ldr	w0, [sp, #116]
   14b88:	cmp	w0, #0x4
   14b8c:	b.ne	14ecc <re_set_registers+0x41cc>  // b.any
   14b90:	ldr	x0, [sp, #40]
   14b94:	ldr	x2, [x0, #160]
   14b98:	ldrsw	x1, [sp, #124]
   14b9c:	mov	x0, x1
   14ba0:	lsl	x0, x0, #2
   14ba4:	add	x0, x0, x1
   14ba8:	lsl	x0, x0, #2
   14bac:	add	x0, x2, x0
   14bb0:	str	x0, [sp, #136]
   14bb4:	ldr	w0, [sp, #124]
   14bb8:	str	w0, [sp, #148]
   14bbc:	ldr	x0, [sp, #136]
   14bc0:	ldr	w0, [x0]
   14bc4:	ldr	w1, [sp, #120]
   14bc8:	cmp	w1, w0
   14bcc:	b.ne	14e90 <re_set_registers+0x4190>  // b.any
   14bd0:	ldr	x0, [sp, #136]
   14bd4:	ldr	w1, [x0, #12]
   14bd8:	ldr	x0, [sp, #136]
   14bdc:	ldr	w0, [x0, #8]
   14be0:	sub	w0, w1, w0
   14be4:	str	w0, [sp, #112]
   14be8:	ldr	w1, [sp, #28]
   14bec:	ldr	w0, [sp, #112]
   14bf0:	add	w0, w1, w0
   14bf4:	str	w0, [sp, #108]
   14bf8:	ldr	w0, [sp, #112]
   14bfc:	cmp	w0, #0x0
   14c00:	b.eq	14c20 <re_set_registers+0x3f20>  // b.none
   14c04:	ldr	x0, [sp, #128]
   14c08:	ldr	x1, [x0, #24]
   14c0c:	ldrsw	x0, [sp, #120]
   14c10:	lsl	x0, x0, #2
   14c14:	add	x0, x1, x0
   14c18:	ldr	w0, [x0]
   14c1c:	b	14c3c <re_set_registers+0x3f3c>
   14c20:	ldr	x0, [sp, #128]
   14c24:	ldr	x1, [x0, #40]
   14c28:	ldrsw	x0, [sp, #120]
   14c2c:	lsl	x0, x0, #4
   14c30:	add	x0, x1, x0
   14c34:	ldr	x0, [x0, #8]
   14c38:	ldr	w0, [x0]
   14c3c:	str	w0, [sp, #104]
   14c40:	ldr	x0, [sp, #32]
   14c44:	ldr	w0, [x0, #20]
   14c48:	ldr	w1, [sp, #108]
   14c4c:	cmp	w1, w0
   14c50:	b.gt	14e98 <re_set_registers+0x4198>
   14c54:	ldr	x0, [sp, #32]
   14c58:	ldr	x1, [x0]
   14c5c:	ldrsw	x0, [sp, #108]
   14c60:	lsl	x0, x0, #3
   14c64:	add	x0, x1, x0
   14c68:	ldr	x0, [x0]
   14c6c:	cmp	x0, #0x0
   14c70:	b.eq	14e98 <re_set_registers+0x4198>  // b.none
   14c74:	ldr	x0, [sp, #32]
   14c78:	ldr	x1, [x0]
   14c7c:	ldrsw	x0, [sp, #108]
   14c80:	lsl	x0, x0, #3
   14c84:	add	x0, x1, x0
   14c88:	ldr	x0, [x0]
   14c8c:	cmp	x0, #0x0
   14c90:	b.eq	14e98 <re_set_registers+0x4198>  // b.none
   14c94:	ldr	x0, [sp, #32]
   14c98:	ldr	x1, [x0]
   14c9c:	ldrsw	x0, [sp, #108]
   14ca0:	lsl	x0, x0, #3
   14ca4:	add	x0, x1, x0
   14ca8:	ldr	x0, [x0]
   14cac:	add	x0, x0, #0x8
   14cb0:	ldr	w1, [sp, #104]
   14cb4:	bl	6b7c <grub_mod_fini+0x665c>
   14cb8:	cmp	w0, #0x0
   14cbc:	b.eq	14e98 <re_set_registers+0x4198>  // b.none
   14cc0:	ldr	x0, [sp, #32]
   14cc4:	add	x0, x0, #0x18
   14cc8:	ldr	w5, [sp, #108]
   14ccc:	ldr	w4, [sp, #104]
   14cd0:	ldr	w3, [sp, #28]
   14cd4:	ldr	w2, [sp, #120]
   14cd8:	mov	x1, x0
   14cdc:	ldr	x0, [sp, #40]
   14ce0:	bl	141a4 <re_set_registers+0x34a4>
   14ce4:	and	w0, w0, #0xff
   14ce8:	cmp	w0, #0x0
   14cec:	b.ne	14e98 <re_set_registers+0x4198>  // b.any
   14cf0:	ldr	x0, [sp, #48]
   14cf4:	cmp	x0, #0x0
   14cf8:	b.ne	14d50 <re_set_registers+0x4050>  // b.any
   14cfc:	ldr	x1, [sp, #32]
   14d00:	add	x0, sp, #0x30
   14d04:	ldp	x2, x3, [x1]
   14d08:	stp	x2, x3, [x0]
   14d0c:	ldp	x2, x3, [x1, #16]
   14d10:	stp	x2, x3, [x0, #16]
   14d14:	ldr	x1, [x1, #32]
   14d18:	str	x1, [x0, #32]
   14d1c:	ldr	x0, [sp, #32]
   14d20:	add	x1, x0, #0x18
   14d24:	add	x0, sp, #0x30
   14d28:	add	x0, x0, #0x18
   14d2c:	bl	5a34 <grub_mod_fini+0x5514>
   14d30:	str	w0, [sp, #156]
   14d34:	ldr	w0, [sp, #156]
   14d38:	cmp	w0, #0x0
   14d3c:	cset	w0, ne  // ne = any
   14d40:	and	w0, w0, #0xff
   14d44:	and	x0, x0, #0xff
   14d48:	cmp	x0, #0x0
   14d4c:	b.ne	14ef8 <re_set_registers+0x41f8>  // b.any
   14d50:	ldr	w0, [sp, #120]
   14d54:	str	w0, [sp, #64]
   14d58:	ldr	w0, [sp, #28]
   14d5c:	str	w0, [sp, #68]
   14d60:	add	x0, sp, #0x30
   14d64:	add	x0, x0, #0x18
   14d68:	ldr	w1, [sp, #148]
   14d6c:	bl	67b0 <grub_mod_fini+0x6290>
   14d70:	strb	w0, [sp, #103]
   14d74:	ldrb	w0, [sp, #103]
   14d78:	eor	w0, w0, #0x1
   14d7c:	and	w0, w0, #0xff
   14d80:	and	x0, x0, #0xff
   14d84:	cmp	x0, #0x0
   14d88:	b.eq	14d98 <re_set_registers+0x4098>  // b.none
   14d8c:	mov	w0, #0xc                   	// #12
   14d90:	str	w0, [sp, #156]
   14d94:	b	14f0c <re_set_registers+0x420c>
   14d98:	ldr	x1, [sp, #48]
   14d9c:	ldrsw	x0, [sp, #28]
   14da0:	lsl	x0, x0, #3
   14da4:	add	x0, x1, x0
   14da8:	ldr	x0, [x0]
   14dac:	str	x0, [sp, #88]
   14db0:	add	x0, sp, #0x30
   14db4:	mov	x1, x0
   14db8:	ldr	x0, [sp, #40]
   14dbc:	bl	13520 <re_set_registers+0x2820>
   14dc0:	str	w0, [sp, #156]
   14dc4:	ldr	w0, [sp, #156]
   14dc8:	cmp	w0, #0x0
   14dcc:	cset	w0, ne  // ne = any
   14dd0:	and	w0, w0, #0xff
   14dd4:	and	x0, x0, #0xff
   14dd8:	cmp	x0, #0x0
   14ddc:	b.ne	14f00 <re_set_registers+0x4200>  // b.any
   14de0:	ldr	x0, [sp, #32]
   14de4:	ldr	x0, [x0, #8]
   14de8:	cmp	x0, #0x0
   14dec:	b.eq	14e30 <re_set_registers+0x4130>  // b.none
   14df0:	ldr	x0, [sp, #32]
   14df4:	ldr	x1, [x0, #8]
   14df8:	ldr	x2, [sp, #48]
   14dfc:	ldr	w0, [sp, #28]
   14e00:	add	w0, w0, #0x1
   14e04:	mov	w3, w0
   14e08:	ldr	x0, [sp, #128]
   14e0c:	bl	13a64 <re_set_registers+0x2d64>
   14e10:	str	w0, [sp, #156]
   14e14:	ldr	w0, [sp, #156]
   14e18:	cmp	w0, #0x0
   14e1c:	cset	w0, ne  // ne = any
   14e20:	and	w0, w0, #0xff
   14e24:	and	x0, x0, #0xff
   14e28:	cmp	x0, #0x0
   14e2c:	b.ne	14f08 <re_set_registers+0x4208>  // b.any
   14e30:	ldr	x1, [sp, #48]
   14e34:	ldrsw	x0, [sp, #28]
   14e38:	lsl	x0, x0, #3
   14e3c:	add	x0, x1, x0
   14e40:	ldr	x1, [sp, #88]
   14e44:	str	x1, [x0]
   14e48:	add	x0, sp, #0x30
   14e4c:	add	x0, x0, #0x18
   14e50:	ldr	w1, [sp, #148]
   14e54:	bl	6b7c <grub_mod_fini+0x665c>
   14e58:	sub	w1, w0, #0x1
   14e5c:	add	x0, sp, #0x30
   14e60:	add	x0, x0, #0x18
   14e64:	bl	6c54 <grub_mod_fini+0x6734>
   14e68:	ldr	x0, [sp, #40]
   14e6c:	ldr	x2, [x0, #160]
   14e70:	ldrsw	x1, [sp, #148]
   14e74:	mov	x0, x1
   14e78:	lsl	x0, x0, #2
   14e7c:	add	x0, x0, x1
   14e80:	lsl	x0, x0, #2
   14e84:	add	x0, x2, x0
   14e88:	str	x0, [sp, #136]
   14e8c:	b	14e9c <re_set_registers+0x419c>
   14e90:	nop
   14e94:	b	14e9c <re_set_registers+0x419c>
   14e98:	nop
   14e9c:	ldr	w0, [sp, #148]
   14ea0:	add	w0, w0, #0x1
   14ea4:	str	w0, [sp, #148]
   14ea8:	ldr	x0, [sp, #136]
   14eac:	add	x1, x0, #0x14
   14eb0:	str	x1, [sp, #136]
   14eb4:	ldrb	w0, [x0, #16]
   14eb8:	cmp	w0, #0x0
   14ebc:	b.ne	14bbc <re_set_registers+0x3ebc>  // b.any
   14ec0:	b	14ed0 <re_set_registers+0x41d0>
   14ec4:	nop
   14ec8:	b	14ed0 <re_set_registers+0x41d0>
   14ecc:	nop
   14ed0:	ldr	w0, [sp, #152]
   14ed4:	add	w0, w0, #0x1
   14ed8:	str	w0, [sp, #152]
   14edc:	ldr	x0, [sp, #16]
   14ee0:	ldr	w0, [x0, #4]
   14ee4:	ldr	w1, [sp, #152]
   14ee8:	cmp	w1, w0
   14eec:	b.lt	14b24 <re_set_registers+0x3e24>  // b.tstop
   14ef0:	str	wzr, [sp, #156]
   14ef4:	b	14f0c <re_set_registers+0x420c>
   14ef8:	nop
   14efc:	b	14f0c <re_set_registers+0x420c>
   14f00:	nop
   14f04:	b	14f0c <re_set_registers+0x420c>
   14f08:	nop
   14f0c:	ldr	x0, [sp, #48]
   14f10:	cmp	x0, #0x0
   14f14:	b.eq	14f20 <re_set_registers+0x4220>  // b.none
   14f18:	ldr	x0, [sp, #80]
   14f1c:	bl	2230 <grub_mod_fini+0x1d10>
   14f20:	ldr	w0, [sp, #156]
   14f24:	ldp	x29, x30, [sp], #160
   14f28:	ret
   14f2c:	stp	x29, x30, [sp, #-64]!
   14f30:	mov	x29, sp
   14f34:	str	x0, [sp, #40]
   14f38:	str	x1, [sp, #32]
   14f3c:	str	w2, [sp, #28]
   14f40:	str	w3, [sp, #24]
   14f44:	str	w4, [sp, #20]
   14f48:	ldr	x0, [sp, #40]
   14f4c:	ldr	x0, [x0, #112]
   14f50:	str	x0, [sp, #48]
   14f54:	ldr	x0, [sp, #40]
   14f58:	ldr	w3, [sp, #24]
   14f5c:	mov	x2, x0
   14f60:	ldr	w1, [sp, #28]
   14f64:	ldr	x0, [sp, #48]
   14f68:	bl	18bb4 <re_set_registers+0x7eb4>
   14f6c:	str	w0, [sp, #60]
   14f70:	ldr	w0, [sp, #60]
   14f74:	cmp	w0, #0x0
   14f78:	b.le	15018 <re_set_registers+0x4318>
   14f7c:	ldr	w1, [sp, #24]
   14f80:	ldr	w0, [sp, #60]
   14f84:	add	w0, w1, w0
   14f88:	ldr	w1, [sp, #20]
   14f8c:	cmp	w1, w0
   14f90:	b.lt	15018 <re_set_registers+0x4318>  // b.tstop
   14f94:	ldr	x0, [sp, #32]
   14f98:	ldr	x1, [x0]
   14f9c:	ldr	w2, [sp, #24]
   14fa0:	ldr	w0, [sp, #60]
   14fa4:	add	w0, w2, w0
   14fa8:	sxtw	x0, w0
   14fac:	lsl	x0, x0, #3
   14fb0:	add	x0, x1, x0
   14fb4:	ldr	x0, [x0]
   14fb8:	cmp	x0, #0x0
   14fbc:	b.eq	15014 <re_set_registers+0x4314>  // b.none
   14fc0:	ldr	x0, [sp, #32]
   14fc4:	ldr	x1, [x0]
   14fc8:	ldr	w2, [sp, #24]
   14fcc:	ldr	w0, [sp, #60]
   14fd0:	add	w0, w2, w0
   14fd4:	sxtw	x0, w0
   14fd8:	lsl	x0, x0, #3
   14fdc:	add	x0, x1, x0
   14fe0:	ldr	x0, [x0]
   14fe4:	add	x2, x0, #0x8
   14fe8:	ldr	x0, [sp, #48]
   14fec:	ldr	x1, [x0, #24]
   14ff0:	ldrsw	x0, [sp, #28]
   14ff4:	lsl	x0, x0, #2
   14ff8:	add	x0, x1, x0
   14ffc:	ldr	w0, [x0]
   15000:	mov	w1, w0
   15004:	mov	x0, x2
   15008:	bl	6b7c <grub_mod_fini+0x665c>
   1500c:	cmp	w0, #0x0
   15010:	b.ne	15018 <re_set_registers+0x4318>  // b.any
   15014:	str	wzr, [sp, #60]
   15018:	ldr	w0, [sp, #60]
   1501c:	ldp	x29, x30, [sp], #64
   15020:	ret
   15024:	stp	x29, x30, [sp, #-80]!
   15028:	mov	x29, sp
   1502c:	str	x0, [sp, #40]
   15030:	str	x1, [sp, #32]
   15034:	str	x2, [sp, #24]
   15038:	ldr	x0, [sp, #24]
   1503c:	ldrb	w0, [x0, #80]
   15040:	ubfx	x0, x0, #5, #1
   15044:	and	w0, w0, #0xff
   15048:	and	x0, x0, #0xff
   1504c:	cmp	x0, #0x0
   15050:	b.eq	15094 <re_set_registers+0x4394>  // b.none
   15054:	ldr	x1, [sp, #24]
   15058:	ldr	x0, [sp, #32]
   1505c:	bl	15654 <re_set_registers+0x4954>
   15060:	mov	w1, w0
   15064:	ldr	x0, [sp, #40]
   15068:	str	w1, [x0]
   1506c:	ldr	x0, [sp, #40]
   15070:	ldr	w0, [x0]
   15074:	cmp	w0, #0x0
   15078:	cset	w0, ne  // ne = any
   1507c:	and	w0, w0, #0xff
   15080:	and	x0, x0, #0xff
   15084:	cmp	x0, #0x0
   15088:	b.eq	15094 <re_set_registers+0x4394>  // b.none
   1508c:	mov	x0, #0x0                   	// #0
   15090:	b	151c8 <re_set_registers+0x44c8>
   15094:	ldr	x0, [sp, #32]
   15098:	ldr	x1, [x0, #8]
   1509c:	ldr	x0, [sp, #32]
   150a0:	ldr	w0, [x0, #56]
   150a4:	add	w3, w0, #0x1
   150a8:	ldr	x2, [sp, #32]
   150ac:	str	w3, [x2, #56]
   150b0:	sxtw	x0, w0
   150b4:	add	x0, x1, x0
   150b8:	ldrb	w0, [x0]
   150bc:	strb	w0, [sp, #79]
   150c0:	ldr	x0, [sp, #24]
   150c4:	ldr	x0, [x0, #64]
   150c8:	str	x0, [sp, #64]
   150cc:	ldr	x0, [sp, #64]
   150d0:	cmp	x0, #0x0
   150d4:	cset	w0, ne  // ne = any
   150d8:	and	w0, w0, #0xff
   150dc:	and	x0, x0, #0xff
   150e0:	cmp	x0, #0x0
   150e4:	b.eq	15100 <re_set_registers+0x4400>  // b.none
   150e8:	ldrb	w0, [sp, #79]
   150ec:	lsl	x0, x0, #3
   150f0:	ldr	x1, [sp, #64]
   150f4:	add	x0, x1, x0
   150f8:	ldr	x0, [x0]
   150fc:	b	151c8 <re_set_registers+0x44c8>
   15100:	ldr	x0, [sp, #24]
   15104:	ldr	x0, [x0, #72]
   15108:	str	x0, [sp, #64]
   1510c:	ldr	x0, [sp, #64]
   15110:	cmp	x0, #0x0
   15114:	cset	w0, ne  // ne = any
   15118:	and	w0, w0, #0xff
   1511c:	and	x0, x0, #0xff
   15120:	cmp	x0, #0x0
   15124:	b.eq	15194 <re_set_registers+0x4494>  // b.none
   15128:	ldr	x3, [sp, #32]
   1512c:	ldr	x0, [sp, #32]
   15130:	ldr	w0, [x0, #56]
   15134:	sub	w1, w0, #0x1
   15138:	ldr	x0, [sp, #32]
   1513c:	ldr	w0, [x0, #120]
   15140:	mov	w2, w0
   15144:	mov	x0, x3
   15148:	bl	564c <grub_mod_fini+0x512c>
   1514c:	str	w0, [sp, #60]
   15150:	ldr	w0, [sp, #60]
   15154:	and	w0, w0, #0x1
   15158:	cmp	w0, #0x0
   1515c:	b.eq	1517c <re_set_registers+0x447c>  // b.none
   15160:	ldrb	w0, [sp, #79]
   15164:	add	x0, x0, #0x100
   15168:	lsl	x0, x0, #3
   1516c:	ldr	x1, [sp, #64]
   15170:	add	x0, x1, x0
   15174:	ldr	x0, [x0]
   15178:	b	151c8 <re_set_registers+0x44c8>
   1517c:	ldrb	w0, [sp, #79]
   15180:	lsl	x0, x0, #3
   15184:	ldr	x1, [sp, #64]
   15188:	add	x0, x1, x0
   1518c:	ldr	x0, [x0]
   15190:	b	151c8 <re_set_registers+0x44c8>
   15194:	ldr	x0, [sp, #32]
   15198:	ldr	x0, [x0, #112]
   1519c:	ldr	x1, [sp, #24]
   151a0:	bl	178bc <re_set_registers+0x6bbc>
   151a4:	and	w0, w0, #0xff
   151a8:	eor	w0, w0, #0x1
   151ac:	and	w0, w0, #0xff
   151b0:	cmp	w0, #0x0
   151b4:	b.eq	150c0 <re_set_registers+0x43c0>  // b.none
   151b8:	ldr	x0, [sp, #40]
   151bc:	mov	w1, #0xc                   	// #12
   151c0:	str	w1, [x0]
   151c4:	mov	x0, #0x0                   	// #0
   151c8:	ldp	x29, x30, [sp], #80
   151cc:	ret
   151d0:	stp	x29, x30, [sp, #-128]!
   151d4:	mov	x29, sp
   151d8:	str	x19, [sp, #16]
   151dc:	str	x0, [sp, #56]
   151e0:	str	x1, [sp, #48]
   151e4:	str	x2, [sp, #40]
   151e8:	ldr	x0, [sp, #48]
   151ec:	ldr	x0, [x0, #112]
   151f0:	str	x0, [sp, #112]
   151f4:	ldr	x0, [sp, #48]
   151f8:	ldr	w0, [x0, #56]
   151fc:	str	w0, [sp, #108]
   15200:	ldr	x0, [sp, #48]
   15204:	ldr	w0, [x0, #144]
   15208:	ldr	w1, [sp, #108]
   1520c:	cmp	w1, w0
   15210:	b.le	15240 <re_set_registers+0x4540>
   15214:	ldr	x0, [sp, #48]
   15218:	ldr	x1, [x0, #136]
   1521c:	ldrsw	x0, [sp, #108]
   15220:	lsl	x0, x0, #3
   15224:	add	x0, x1, x0
   15228:	ldr	x1, [sp, #40]
   1522c:	str	x1, [x0]
   15230:	ldr	x0, [sp, #48]
   15234:	ldr	w1, [sp, #108]
   15238:	str	w1, [x0, #144]
   1523c:	b	15388 <re_set_registers+0x4688>
   15240:	ldr	x0, [sp, #48]
   15244:	ldr	x1, [x0, #136]
   15248:	ldrsw	x0, [sp, #108]
   1524c:	lsl	x0, x0, #3
   15250:	add	x0, x1, x0
   15254:	ldr	x0, [x0]
   15258:	cmp	x0, #0x0
   1525c:	b.ne	15280 <re_set_registers+0x4580>  // b.any
   15260:	ldr	x0, [sp, #48]
   15264:	ldr	x1, [x0, #136]
   15268:	ldrsw	x0, [sp, #108]
   1526c:	lsl	x0, x0, #3
   15270:	add	x0, x1, x0
   15274:	ldr	x1, [sp, #40]
   15278:	str	x1, [x0]
   1527c:	b	15388 <re_set_registers+0x4688>
   15280:	str	xzr, [sp, #120]
   15284:	ldr	x0, [sp, #48]
   15288:	ldr	x1, [x0, #136]
   1528c:	ldrsw	x0, [sp, #108]
   15290:	lsl	x0, x0, #3
   15294:	add	x0, x1, x0
   15298:	ldr	x0, [x0]
   1529c:	str	x0, [sp, #96]
   152a0:	ldr	x0, [sp, #96]
   152a4:	ldr	x0, [x0, #56]
   152a8:	str	x0, [sp, #88]
   152ac:	ldr	x0, [sp, #40]
   152b0:	cmp	x0, #0x0
   152b4:	b.eq	15308 <re_set_registers+0x4608>  // b.none
   152b8:	ldr	x0, [sp, #40]
   152bc:	ldr	x0, [x0, #56]
   152c0:	str	x0, [sp, #120]
   152c4:	add	x0, sp, #0x40
   152c8:	ldr	x2, [sp, #88]
   152cc:	ldr	x1, [sp, #120]
   152d0:	bl	5fc0 <grub_mod_fini+0x5aa0>
   152d4:	mov	w1, w0
   152d8:	ldr	x0, [sp, #56]
   152dc:	str	w1, [x0]
   152e0:	ldr	x0, [sp, #56]
   152e4:	ldr	w0, [x0]
   152e8:	cmp	w0, #0x0
   152ec:	cset	w0, ne  // ne = any
   152f0:	and	w0, w0, #0xff
   152f4:	and	x0, x0, #0xff
   152f8:	cmp	x0, #0x0
   152fc:	b.eq	15314 <re_set_registers+0x4614>  // b.none
   15300:	mov	x0, #0x0                   	// #0
   15304:	b	15474 <re_set_registers+0x4774>
   15308:	ldr	x0, [sp, #88]
   1530c:	ldp	x0, x1, [x0]
   15310:	stp	x0, x1, [sp, #64]
   15314:	ldr	x3, [sp, #48]
   15318:	ldr	x0, [sp, #48]
   1531c:	ldr	w0, [x0, #56]
   15320:	sub	w1, w0, #0x1
   15324:	ldr	x0, [sp, #48]
   15328:	ldr	w0, [x0, #120]
   1532c:	mov	w2, w0
   15330:	mov	x0, x3
   15334:	bl	564c <grub_mod_fini+0x512c>
   15338:	str	w0, [sp, #84]
   1533c:	ldr	x0, [sp, #48]
   15340:	ldr	x1, [x0, #136]
   15344:	ldrsw	x0, [sp, #108]
   15348:	lsl	x0, x0, #3
   1534c:	add	x19, x1, x0
   15350:	add	x0, sp, #0x40
   15354:	ldr	w3, [sp, #84]
   15358:	mov	x2, x0
   1535c:	ldr	x1, [sp, #112]
   15360:	ldr	x0, [sp, #56]
   15364:	bl	7248 <grub_mod_fini+0x6d28>
   15368:	str	x0, [x19]
   1536c:	ldr	x0, [x19]
   15370:	str	x0, [sp, #40]
   15374:	ldr	x0, [sp, #120]
   15378:	cmp	x0, #0x0
   1537c:	b.eq	15388 <re_set_registers+0x4688>  // b.none
   15380:	ldr	x0, [sp, #72]
   15384:	bl	2230 <grub_mod_fini+0x1d10>
   15388:	ldr	x0, [sp, #112]
   1538c:	ldr	w0, [x0, #140]
   15390:	sxtw	x0, w0
   15394:	cmp	x0, #0x0
   15398:	b.eq	15470 <re_set_registers+0x4770>  // b.none
   1539c:	ldr	x0, [sp, #40]
   153a0:	cmp	x0, #0x0
   153a4:	b.eq	15470 <re_set_registers+0x4770>  // b.none
   153a8:	ldr	x0, [sp, #40]
   153ac:	add	x0, x0, #0x8
   153b0:	ldr	w2, [sp, #108]
   153b4:	mov	x1, x0
   153b8:	ldr	x0, [sp, #48]
   153bc:	bl	1553c <re_set_registers+0x483c>
   153c0:	mov	w1, w0
   153c4:	ldr	x0, [sp, #56]
   153c8:	str	w1, [x0]
   153cc:	ldr	x0, [sp, #56]
   153d0:	ldr	w0, [x0]
   153d4:	cmp	w0, #0x0
   153d8:	cset	w0, ne  // ne = any
   153dc:	and	w0, w0, #0xff
   153e0:	and	x0, x0, #0xff
   153e4:	cmp	x0, #0x0
   153e8:	b.eq	153f4 <re_set_registers+0x46f4>  // b.none
   153ec:	mov	x0, #0x0                   	// #0
   153f0:	b	15474 <re_set_registers+0x4774>
   153f4:	ldr	x0, [sp, #40]
   153f8:	ldrb	w0, [x0, #80]
   153fc:	and	w0, w0, #0x40
   15400:	and	w0, w0, #0xff
   15404:	cmp	w0, #0x0
   15408:	b.eq	15470 <re_set_registers+0x4770>  // b.none
   1540c:	ldr	x0, [sp, #40]
   15410:	add	x0, x0, #0x8
   15414:	mov	x1, x0
   15418:	ldr	x0, [sp, #48]
   1541c:	bl	15a34 <re_set_registers+0x4d34>
   15420:	mov	w1, w0
   15424:	ldr	x0, [sp, #56]
   15428:	str	w1, [x0]
   1542c:	ldr	x0, [sp, #56]
   15430:	ldr	w0, [x0]
   15434:	cmp	w0, #0x0
   15438:	cset	w0, ne  // ne = any
   1543c:	and	w0, w0, #0xff
   15440:	and	x0, x0, #0xff
   15444:	cmp	x0, #0x0
   15448:	b.eq	15454 <re_set_registers+0x4754>  // b.none
   1544c:	mov	x0, #0x0                   	// #0
   15450:	b	15474 <re_set_registers+0x4774>
   15454:	ldr	x0, [sp, #48]
   15458:	ldr	x1, [x0, #136]
   1545c:	ldrsw	x0, [sp, #108]
   15460:	lsl	x0, x0, #3
   15464:	add	x0, x1, x0
   15468:	ldr	x0, [x0]
   1546c:	str	x0, [sp, #40]
   15470:	ldr	x0, [sp, #40]
   15474:	ldr	x19, [sp, #16]
   15478:	ldp	x29, x30, [sp], #128
   1547c:	ret
   15480:	stp	x29, x30, [sp, #-48]!
   15484:	mov	x29, sp
   15488:	str	x0, [sp, #24]
   1548c:	str	x1, [sp, #16]
   15490:	ldr	x0, [sp, #16]
   15494:	ldr	w0, [x0, #144]
   15498:	str	w0, [sp, #40]
   1549c:	ldr	x0, [sp, #16]
   154a0:	ldr	w0, [x0, #56]
   154a4:	str	w0, [sp, #44]
   154a8:	ldr	w0, [sp, #44]
   154ac:	add	w0, w0, #0x1
   154b0:	str	w0, [sp, #44]
   154b4:	ldr	w1, [sp, #44]
   154b8:	ldr	w0, [sp, #40]
   154bc:	cmp	w1, w0
   154c0:	b.le	154cc <re_set_registers+0x47cc>
   154c4:	mov	x0, #0x0                   	// #0
   154c8:	b	15534 <re_set_registers+0x4834>
   154cc:	ldr	x0, [sp, #16]
   154d0:	ldr	w0, [x0, #56]
   154d4:	add	w1, w0, #0x1
   154d8:	ldr	x0, [sp, #16]
   154dc:	str	w1, [x0, #56]
   154e0:	ldr	x0, [sp, #16]
   154e4:	ldr	x1, [x0, #136]
   154e8:	ldrsw	x0, [sp, #44]
   154ec:	lsl	x0, x0, #3
   154f0:	add	x0, x1, x0
   154f4:	ldr	x0, [x0]
   154f8:	cmp	x0, #0x0
   154fc:	b.eq	154a8 <re_set_registers+0x47a8>  // b.none
   15500:	mov	x2, #0x0                   	// #0
   15504:	ldr	x1, [sp, #16]
   15508:	ldr	x0, [sp, #24]
   1550c:	bl	151d0 <re_set_registers+0x44d0>
   15510:	str	x0, [sp, #32]
   15514:	ldr	x0, [sp, #24]
   15518:	ldr	w0, [x0]
   1551c:	cmp	w0, #0x0
   15520:	b.ne	15530 <re_set_registers+0x4830>  // b.any
   15524:	ldr	x0, [sp, #32]
   15528:	cmp	x0, #0x0
   1552c:	b.eq	15490 <re_set_registers+0x4790>  // b.none
   15530:	ldr	x0, [sp, #32]
   15534:	ldp	x29, x30, [sp], #48
   15538:	ret
   1553c:	stp	x29, x30, [sp, #-80]!
   15540:	mov	x29, sp
   15544:	str	x0, [sp, #40]
   15548:	str	x1, [sp, #32]
   1554c:	str	w2, [sp, #28]
   15550:	ldr	x0, [sp, #40]
   15554:	ldr	x0, [x0, #112]
   15558:	str	x0, [sp, #64]
   1555c:	str	wzr, [sp, #76]
   15560:	b	15634 <re_set_registers+0x4934>
   15564:	ldr	x0, [sp, #32]
   15568:	ldr	x1, [x0, #8]
   1556c:	ldrsw	x0, [sp, #76]
   15570:	lsl	x0, x0, #2
   15574:	add	x0, x1, x0
   15578:	ldr	w0, [x0]
   1557c:	str	w0, [sp, #60]
   15580:	ldr	x0, [sp, #64]
   15584:	ldr	x1, [x0]
   15588:	ldrsw	x0, [sp, #60]
   1558c:	lsl	x0, x0, #4
   15590:	add	x0, x1, x0
   15594:	ldrb	w0, [x0, #8]
   15598:	cmp	w0, #0x8
   1559c:	b.ne	15628 <re_set_registers+0x4928>  // b.any
   155a0:	ldr	x0, [sp, #64]
   155a4:	ldr	x1, [x0]
   155a8:	ldrsw	x0, [sp, #60]
   155ac:	lsl	x0, x0, #4
   155b0:	add	x0, x1, x0
   155b4:	ldr	w0, [x0]
   155b8:	cmp	w0, #0x3f
   155bc:	b.gt	15628 <re_set_registers+0x4928>
   155c0:	ldr	x0, [sp, #64]
   155c4:	ldr	x1, [x0, #144]
   155c8:	ldr	x0, [sp, #64]
   155cc:	ldr	x2, [x0]
   155d0:	ldrsw	x0, [sp, #60]
   155d4:	lsl	x0, x0, #4
   155d8:	add	x0, x2, x0
   155dc:	ldr	w0, [x0]
   155e0:	lsr	x0, x1, x0
   155e4:	and	x0, x0, #0x1
   155e8:	cmp	x0, #0x0
   155ec:	b.eq	15628 <re_set_registers+0x4928>  // b.none
   155f0:	ldr	w2, [sp, #28]
   155f4:	ldr	w1, [sp, #60]
   155f8:	ldr	x0, [sp, #40]
   155fc:	bl	19b44 <re_set_registers+0x8e44>
   15600:	str	w0, [sp, #56]
   15604:	ldr	w0, [sp, #56]
   15608:	cmp	w0, #0x0
   1560c:	cset	w0, ne  // ne = any
   15610:	and	w0, w0, #0xff
   15614:	and	x0, x0, #0xff
   15618:	cmp	x0, #0x0
   1561c:	b.eq	15628 <re_set_registers+0x4928>  // b.none
   15620:	ldr	w0, [sp, #56]
   15624:	b	1564c <re_set_registers+0x494c>
   15628:	ldr	w0, [sp, #76]
   1562c:	add	w0, w0, #0x1
   15630:	str	w0, [sp, #76]
   15634:	ldr	x0, [sp, #32]
   15638:	ldr	w0, [x0, #4]
   1563c:	ldr	w1, [sp, #76]
   15640:	cmp	w1, w0
   15644:	b.lt	15564 <re_set_registers+0x4864>  // b.tstop
   15648:	mov	w0, #0x0                   	// #0
   1564c:	ldp	x29, x30, [sp], #80
   15650:	ret
   15654:	stp	x29, x30, [sp, #-128]!
   15658:	mov	x29, sp
   1565c:	str	x19, [sp, #16]
   15660:	str	x0, [sp, #40]
   15664:	str	x1, [sp, #32]
   15668:	ldr	x0, [sp, #40]
   1566c:	ldr	x0, [x0, #112]
   15670:	str	x0, [sp, #112]
   15674:	str	wzr, [sp, #124]
   15678:	b	15a10 <re_set_registers+0x4d10>
   1567c:	ldr	x0, [sp, #32]
   15680:	ldr	x1, [x0, #16]
   15684:	ldrsw	x0, [sp, #124]
   15688:	lsl	x0, x0, #2
   1568c:	add	x0, x1, x0
   15690:	ldr	w0, [x0]
   15694:	str	w0, [sp, #108]
   15698:	ldr	x0, [sp, #112]
   1569c:	ldr	x1, [x0]
   156a0:	ldrsw	x0, [sp, #108]
   156a4:	lsl	x0, x0, #4
   156a8:	add	x0, x1, x0
   156ac:	ldrb	w0, [x0, #10]
   156b0:	and	w0, w0, #0x10
   156b4:	and	w0, w0, #0xff
   156b8:	cmp	w0, #0x0
   156bc:	b.eq	159f0 <re_set_registers+0x4cf0>  // b.none
   156c0:	ldr	x0, [sp, #112]
   156c4:	ldr	x1, [x0]
   156c8:	ldrsw	x0, [sp, #108]
   156cc:	lsl	x0, x0, #4
   156d0:	add	x0, x1, x0
   156d4:	ldr	w0, [x0, #8]
   156d8:	and	w0, w0, #0x3ff00
   156dc:	cmp	w0, #0x0
   156e0:	b.eq	157f8 <re_set_registers+0x4af8>  // b.none
   156e4:	ldr	x3, [sp, #40]
   156e8:	ldr	x0, [sp, #40]
   156ec:	ldr	w1, [x0, #56]
   156f0:	ldr	x0, [sp, #40]
   156f4:	ldr	w0, [x0, #120]
   156f8:	mov	w2, w0
   156fc:	mov	x0, x3
   15700:	bl	564c <grub_mod_fini+0x512c>
   15704:	str	w0, [sp, #104]
   15708:	ldr	x0, [sp, #112]
   1570c:	ldr	x1, [x0]
   15710:	ldrsw	x0, [sp, #108]
   15714:	lsl	x0, x0, #4
   15718:	add	x0, x1, x0
   1571c:	ldr	w0, [x0, #8]
   15720:	ubfx	x0, x0, #8, #10
   15724:	and	w0, w0, #0xffff
   15728:	and	w0, w0, #0x4
   1572c:	cmp	w0, #0x0
   15730:	b.eq	15744 <re_set_registers+0x4a44>  // b.none
   15734:	ldr	w0, [sp, #104]
   15738:	and	w0, w0, #0x1
   1573c:	cmp	w0, #0x0
   15740:	b.eq	159f8 <re_set_registers+0x4cf8>  // b.none
   15744:	ldr	x0, [sp, #112]
   15748:	ldr	x1, [x0]
   1574c:	ldrsw	x0, [sp, #108]
   15750:	lsl	x0, x0, #4
   15754:	add	x0, x1, x0
   15758:	ldr	w0, [x0, #8]
   1575c:	ubfx	x0, x0, #8, #10
   15760:	and	w0, w0, #0xffff
   15764:	and	w0, w0, #0x8
   15768:	cmp	w0, #0x0
   1576c:	b.eq	15780 <re_set_registers+0x4a80>  // b.none
   15770:	ldr	w0, [sp, #104]
   15774:	and	w0, w0, #0x1
   15778:	cmp	w0, #0x0
   1577c:	b.ne	159f8 <re_set_registers+0x4cf8>  // b.any
   15780:	ldr	x0, [sp, #112]
   15784:	ldr	x1, [x0]
   15788:	ldrsw	x0, [sp, #108]
   1578c:	lsl	x0, x0, #4
   15790:	add	x0, x1, x0
   15794:	ldr	w0, [x0, #8]
   15798:	ubfx	x0, x0, #8, #10
   1579c:	and	w0, w0, #0xffff
   157a0:	and	w0, w0, #0x20
   157a4:	cmp	w0, #0x0
   157a8:	b.eq	157bc <re_set_registers+0x4abc>  // b.none
   157ac:	ldr	w0, [sp, #104]
   157b0:	and	w0, w0, #0x2
   157b4:	cmp	w0, #0x0
   157b8:	b.eq	159f8 <re_set_registers+0x4cf8>  // b.none
   157bc:	ldr	x0, [sp, #112]
   157c0:	ldr	x1, [x0]
   157c4:	ldrsw	x0, [sp, #108]
   157c8:	lsl	x0, x0, #4
   157cc:	add	x0, x1, x0
   157d0:	ldr	w0, [x0, #8]
   157d4:	ubfx	x0, x0, #8, #10
   157d8:	and	w0, w0, #0xffff
   157dc:	and	w0, w0, #0x80
   157e0:	cmp	w0, #0x0
   157e4:	b.eq	157f8 <re_set_registers+0x4af8>  // b.none
   157e8:	ldr	w0, [sp, #104]
   157ec:	and	w0, w0, #0x8
   157f0:	cmp	w0, #0x0
   157f4:	b.eq	159f8 <re_set_registers+0x4cf8>  // b.none
   157f8:	ldr	x1, [sp, #40]
   157fc:	ldr	x0, [sp, #40]
   15800:	ldr	w0, [x0, #56]
   15804:	mov	w3, w0
   15808:	mov	x2, x1
   1580c:	ldr	w1, [sp, #108]
   15810:	ldr	x0, [sp, #112]
   15814:	bl	18bb4 <re_set_registers+0x7eb4>
   15818:	str	w0, [sp, #100]
   1581c:	ldr	w0, [sp, #100]
   15820:	cmp	w0, #0x0
   15824:	b.eq	15a00 <re_set_registers+0x4d00>  // b.none
   15828:	ldr	x0, [sp, #40]
   1582c:	ldr	w0, [x0, #56]
   15830:	ldr	w1, [sp, #100]
   15834:	add	w0, w1, w0
   15838:	str	w0, [sp, #96]
   1583c:	ldr	x0, [sp, #40]
   15840:	ldr	w0, [x0, #168]
   15844:	ldr	w2, [sp, #100]
   15848:	ldr	w1, [sp, #100]
   1584c:	cmp	w2, w0
   15850:	csel	w1, w1, w0, ge  // ge = tcont
   15854:	ldr	x0, [sp, #40]
   15858:	str	w1, [x0, #168]
   1585c:	ldr	w1, [sp, #96]
   15860:	ldr	x0, [sp, #40]
   15864:	bl	13950 <re_set_registers+0x2c50>
   15868:	str	w0, [sp, #76]
   1586c:	ldr	w0, [sp, #76]
   15870:	cmp	w0, #0x0
   15874:	cset	w0, ne  // ne = any
   15878:	and	w0, w0, #0xff
   1587c:	and	x0, x0, #0xff
   15880:	cmp	x0, #0x0
   15884:	b.eq	15890 <re_set_registers+0x4b90>  // b.none
   15888:	ldr	w0, [sp, #76]
   1588c:	b	15a28 <re_set_registers+0x4d28>
   15890:	ldr	x0, [sp, #112]
   15894:	ldr	x1, [x0, #48]
   15898:	ldr	x0, [sp, #112]
   1589c:	ldr	x2, [x0, #24]
   158a0:	ldrsw	x0, [sp, #108]
   158a4:	lsl	x0, x0, #2
   158a8:	add	x0, x2, x0
   158ac:	ldr	w0, [x0]
   158b0:	sxtw	x0, w0
   158b4:	lsl	x0, x0, #4
   158b8:	add	x0, x1, x0
   158bc:	str	x0, [sp, #88]
   158c0:	ldr	x0, [sp, #40]
   158c4:	ldr	x1, [x0, #136]
   158c8:	ldrsw	x0, [sp, #96]
   158cc:	lsl	x0, x0, #3
   158d0:	add	x0, x1, x0
   158d4:	ldr	x0, [x0]
   158d8:	str	x0, [sp, #80]
   158dc:	ldr	x0, [sp, #80]
   158e0:	cmp	x0, #0x0
   158e4:	b.ne	158f8 <re_set_registers+0x4bf8>  // b.any
   158e8:	ldr	x0, [sp, #88]
   158ec:	ldp	x0, x1, [x0]
   158f0:	stp	x0, x1, [sp, #56]
   158f4:	b	15934 <re_set_registers+0x4c34>
   158f8:	ldr	x0, [sp, #80]
   158fc:	ldr	x1, [x0, #56]
   15900:	add	x0, sp, #0x38
   15904:	ldr	x2, [sp, #88]
   15908:	bl	5fc0 <grub_mod_fini+0x5aa0>
   1590c:	str	w0, [sp, #76]
   15910:	ldr	w0, [sp, #76]
   15914:	cmp	w0, #0x0
   15918:	cset	w0, ne  // ne = any
   1591c:	and	w0, w0, #0xff
   15920:	and	x0, x0, #0xff
   15924:	cmp	x0, #0x0
   15928:	b.eq	15934 <re_set_registers+0x4c34>  // b.none
   1592c:	ldr	w0, [sp, #76]
   15930:	b	15a28 <re_set_registers+0x4d28>
   15934:	ldr	x3, [sp, #40]
   15938:	ldr	w0, [sp, #96]
   1593c:	sub	w1, w0, #0x1
   15940:	ldr	x0, [sp, #40]
   15944:	ldr	w0, [x0, #120]
   15948:	mov	w2, w0
   1594c:	mov	x0, x3
   15950:	bl	564c <grub_mod_fini+0x512c>
   15954:	str	w0, [sp, #104]
   15958:	ldr	x0, [sp, #40]
   1595c:	ldr	x1, [x0, #136]
   15960:	ldrsw	x0, [sp, #96]
   15964:	lsl	x0, x0, #3
   15968:	add	x19, x1, x0
   1596c:	add	x1, sp, #0x38
   15970:	add	x0, sp, #0x4c
   15974:	ldr	w3, [sp, #104]
   15978:	mov	x2, x1
   1597c:	ldr	x1, [sp, #112]
   15980:	bl	7248 <grub_mod_fini+0x6d28>
   15984:	str	x0, [x19]
   15988:	ldr	x0, [sp, #80]
   1598c:	cmp	x0, #0x0
   15990:	b.eq	1599c <re_set_registers+0x4c9c>  // b.none
   15994:	ldr	x0, [sp, #64]
   15998:	bl	2230 <grub_mod_fini+0x1d10>
   1599c:	ldr	x0, [sp, #40]
   159a0:	ldr	x1, [x0, #136]
   159a4:	ldrsw	x0, [sp, #96]
   159a8:	lsl	x0, x0, #3
   159ac:	add	x0, x1, x0
   159b0:	ldr	x0, [x0]
   159b4:	cmp	x0, #0x0
   159b8:	cset	w0, eq  // eq = none
   159bc:	and	w0, w0, #0xff
   159c0:	and	x0, x0, #0xff
   159c4:	cmp	x0, #0x0
   159c8:	b.eq	15a04 <re_set_registers+0x4d04>  // b.none
   159cc:	ldr	w0, [sp, #76]
   159d0:	cmp	w0, #0x0
   159d4:	cset	w0, ne  // ne = any
   159d8:	and	w0, w0, #0xff
   159dc:	and	x0, x0, #0xff
   159e0:	cmp	x0, #0x0
   159e4:	b.eq	15a04 <re_set_registers+0x4d04>  // b.none
   159e8:	ldr	w0, [sp, #76]
   159ec:	b	15a28 <re_set_registers+0x4d28>
   159f0:	nop
   159f4:	b	15a04 <re_set_registers+0x4d04>
   159f8:	nop
   159fc:	b	15a04 <re_set_registers+0x4d04>
   15a00:	nop
   15a04:	ldr	w0, [sp, #124]
   15a08:	add	w0, w0, #0x1
   15a0c:	str	w0, [sp, #124]
   15a10:	ldr	x0, [sp, #32]
   15a14:	ldr	w0, [x0, #12]
   15a18:	ldr	w1, [sp, #124]
   15a1c:	cmp	w1, w0
   15a20:	b.lt	1567c <re_set_registers+0x497c>  // b.tstop
   15a24:	mov	w0, #0x0                   	// #0
   15a28:	ldr	x19, [sp, #16]
   15a2c:	ldp	x29, x30, [sp], #128
   15a30:	ret
   15a34:	stp	x29, x30, [sp, #-160]!
   15a38:	mov	x29, sp
   15a3c:	str	x19, [sp, #16]
   15a40:	str	x0, [sp, #40]
   15a44:	str	x1, [sp, #32]
   15a48:	ldr	x0, [sp, #40]
   15a4c:	ldr	x0, [x0, #112]
   15a50:	str	x0, [sp, #144]
   15a54:	ldr	x0, [sp, #40]
   15a58:	ldr	w0, [x0, #56]
   15a5c:	str	w0, [sp, #140]
   15a60:	str	wzr, [sp, #156]
   15a64:	b	15f6c <re_set_registers+0x526c>
   15a68:	ldr	x0, [sp, #32]
   15a6c:	ldr	x1, [x0, #8]
   15a70:	ldrsw	x0, [sp, #156]
   15a74:	lsl	x0, x0, #2
   15a78:	add	x0, x1, x0
   15a7c:	ldr	w0, [x0]
   15a80:	str	w0, [sp, #136]
   15a84:	ldr	x0, [sp, #144]
   15a88:	ldr	x1, [x0]
   15a8c:	ldrsw	x0, [sp, #136]
   15a90:	lsl	x0, x0, #4
   15a94:	add	x0, x1, x0
   15a98:	str	x0, [sp, #128]
   15a9c:	ldr	x0, [sp, #128]
   15aa0:	ldrb	w0, [x0, #8]
   15aa4:	cmp	w0, #0x4
   15aa8:	b.ne	15f54 <re_set_registers+0x5254>  // b.any
   15aac:	ldr	x0, [sp, #128]
   15ab0:	ldr	w0, [x0, #8]
   15ab4:	and	w0, w0, #0x3ff00
   15ab8:	cmp	w0, #0x0
   15abc:	b.eq	15b90 <re_set_registers+0x4e90>  // b.none
   15ac0:	ldr	x3, [sp, #40]
   15ac4:	ldr	x0, [sp, #40]
   15ac8:	ldr	w0, [x0, #120]
   15acc:	mov	w2, w0
   15ad0:	ldr	w1, [sp, #140]
   15ad4:	mov	x0, x3
   15ad8:	bl	564c <grub_mod_fini+0x512c>
   15adc:	str	w0, [sp, #124]
   15ae0:	ldr	x0, [sp, #128]
   15ae4:	ldr	w0, [x0, #8]
   15ae8:	ubfx	x0, x0, #8, #10
   15aec:	and	w0, w0, #0xffff
   15af0:	and	w0, w0, #0x4
   15af4:	cmp	w0, #0x0
   15af8:	b.eq	15b0c <re_set_registers+0x4e0c>  // b.none
   15afc:	ldr	w0, [sp, #124]
   15b00:	and	w0, w0, #0x1
   15b04:	cmp	w0, #0x0
   15b08:	b.eq	15f5c <re_set_registers+0x525c>  // b.none
   15b0c:	ldr	x0, [sp, #128]
   15b10:	ldr	w0, [x0, #8]
   15b14:	ubfx	x0, x0, #8, #10
   15b18:	and	w0, w0, #0xffff
   15b1c:	and	w0, w0, #0x8
   15b20:	cmp	w0, #0x0
   15b24:	b.eq	15b38 <re_set_registers+0x4e38>  // b.none
   15b28:	ldr	w0, [sp, #124]
   15b2c:	and	w0, w0, #0x1
   15b30:	cmp	w0, #0x0
   15b34:	b.ne	15f5c <re_set_registers+0x525c>  // b.any
   15b38:	ldr	x0, [sp, #128]
   15b3c:	ldr	w0, [x0, #8]
   15b40:	ubfx	x0, x0, #8, #10
   15b44:	and	w0, w0, #0xffff
   15b48:	and	w0, w0, #0x20
   15b4c:	cmp	w0, #0x0
   15b50:	b.eq	15b64 <re_set_registers+0x4e64>  // b.none
   15b54:	ldr	w0, [sp, #124]
   15b58:	and	w0, w0, #0x2
   15b5c:	cmp	w0, #0x0
   15b60:	b.eq	15f5c <re_set_registers+0x525c>  // b.none
   15b64:	ldr	x0, [sp, #128]
   15b68:	ldr	w0, [x0, #8]
   15b6c:	ubfx	x0, x0, #8, #10
   15b70:	and	w0, w0, #0xffff
   15b74:	and	w0, w0, #0x80
   15b78:	cmp	w0, #0x0
   15b7c:	b.eq	15b90 <re_set_registers+0x4e90>  // b.none
   15b80:	ldr	w0, [sp, #124]
   15b84:	and	w0, w0, #0x8
   15b88:	cmp	w0, #0x0
   15b8c:	b.eq	15f5c <re_set_registers+0x525c>  // b.none
   15b90:	ldr	x0, [sp, #40]
   15b94:	ldr	w0, [x0, #148]
   15b98:	str	w0, [sp, #152]
   15b9c:	ldr	w2, [sp, #140]
   15ba0:	ldr	w1, [sp, #136]
   15ba4:	ldr	x0, [sp, #40]
   15ba8:	bl	15fb4 <re_set_registers+0x52b4>
   15bac:	str	w0, [sp, #72]
   15bb0:	ldr	w0, [sp, #72]
   15bb4:	cmp	w0, #0x0
   15bb8:	cset	w0, ne  // ne = any
   15bbc:	and	w0, w0, #0xff
   15bc0:	and	x0, x0, #0xff
   15bc4:	cmp	x0, #0x0
   15bc8:	b.ne	15f88 <re_set_registers+0x5288>  // b.any
   15bcc:	b	15f3c <re_set_registers+0x523c>
   15bd0:	ldr	x0, [sp, #40]
   15bd4:	ldr	x2, [x0, #160]
   15bd8:	ldrsw	x1, [sp, #152]
   15bdc:	mov	x0, x1
   15be0:	lsl	x0, x0, #2
   15be4:	add	x0, x0, x1
   15be8:	lsl	x0, x0, #2
   15bec:	add	x0, x2, x0
   15bf0:	str	x0, [sp, #112]
   15bf4:	ldr	x0, [sp, #112]
   15bf8:	ldr	w0, [x0]
   15bfc:	ldr	w1, [sp, #136]
   15c00:	cmp	w1, w0
   15c04:	b.ne	15f2c <re_set_registers+0x522c>  // b.any
   15c08:	ldr	x0, [sp, #112]
   15c0c:	ldr	w0, [x0, #4]
   15c10:	ldr	w1, [sp, #140]
   15c14:	cmp	w1, w0
   15c18:	b.ne	15f2c <re_set_registers+0x522c>  // b.any
   15c1c:	ldr	x0, [sp, #112]
   15c20:	ldr	w1, [x0, #12]
   15c24:	ldr	x0, [sp, #112]
   15c28:	ldr	w0, [x0, #8]
   15c2c:	sub	w0, w1, w0
   15c30:	str	w0, [sp, #108]
   15c34:	ldr	w0, [sp, #108]
   15c38:	cmp	w0, #0x0
   15c3c:	b.ne	15c74 <re_set_registers+0x4f74>  // b.any
   15c40:	ldr	x0, [sp, #144]
   15c44:	ldr	x1, [x0, #48]
   15c48:	ldr	x0, [sp, #144]
   15c4c:	ldr	x2, [x0, #40]
   15c50:	ldrsw	x0, [sp, #136]
   15c54:	lsl	x0, x0, #4
   15c58:	add	x0, x2, x0
   15c5c:	ldr	x0, [x0, #8]
   15c60:	ldr	w0, [x0]
   15c64:	sxtw	x0, w0
   15c68:	lsl	x0, x0, #4
   15c6c:	add	x0, x1, x0
   15c70:	b	15ca0 <re_set_registers+0x4fa0>
   15c74:	ldr	x0, [sp, #144]
   15c78:	ldr	x1, [x0, #48]
   15c7c:	ldr	x0, [sp, #144]
   15c80:	ldr	x2, [x0, #24]
   15c84:	ldrsw	x0, [sp, #136]
   15c88:	lsl	x0, x0, #2
   15c8c:	add	x0, x2, x0
   15c90:	ldr	w0, [x0]
   15c94:	sxtw	x0, w0
   15c98:	lsl	x0, x0, #4
   15c9c:	add	x0, x1, x0
   15ca0:	str	x0, [sp, #96]
   15ca4:	ldr	x0, [sp, #112]
   15ca8:	ldr	w1, [x0, #12]
   15cac:	ldr	w0, [sp, #140]
   15cb0:	add	w1, w1, w0
   15cb4:	ldr	x0, [sp, #112]
   15cb8:	ldr	w0, [x0, #8]
   15cbc:	sub	w0, w1, w0
   15cc0:	str	w0, [sp, #92]
   15cc4:	ldr	x3, [sp, #40]
   15cc8:	ldr	w0, [sp, #92]
   15ccc:	sub	w1, w0, #0x1
   15cd0:	ldr	x0, [sp, #40]
   15cd4:	ldr	w0, [x0, #120]
   15cd8:	mov	w2, w0
   15cdc:	mov	x0, x3
   15ce0:	bl	564c <grub_mod_fini+0x512c>
   15ce4:	str	w0, [sp, #124]
   15ce8:	ldr	x0, [sp, #40]
   15cec:	ldr	x1, [x0, #136]
   15cf0:	ldrsw	x0, [sp, #92]
   15cf4:	lsl	x0, x0, #3
   15cf8:	add	x0, x1, x0
   15cfc:	ldr	x0, [x0]
   15d00:	str	x0, [sp, #80]
   15d04:	ldr	x0, [sp, #40]
   15d08:	ldr	x1, [x0, #136]
   15d0c:	ldrsw	x0, [sp, #140]
   15d10:	lsl	x0, x0, #3
   15d14:	add	x0, x1, x0
   15d18:	ldr	x0, [x0]
   15d1c:	cmp	x0, #0x0
   15d20:	b.eq	15d44 <re_set_registers+0x5044>  // b.none
   15d24:	ldr	x0, [sp, #40]
   15d28:	ldr	x1, [x0, #136]
   15d2c:	ldrsw	x0, [sp, #140]
   15d30:	lsl	x0, x0, #3
   15d34:	add	x0, x1, x0
   15d38:	ldr	x0, [x0]
   15d3c:	ldr	w0, [x0, #12]
   15d40:	b	15d48 <re_set_registers+0x5048>
   15d44:	mov	w0, #0x0                   	// #0
   15d48:	str	w0, [sp, #76]
   15d4c:	ldr	x0, [sp, #80]
   15d50:	cmp	x0, #0x0
   15d54:	b.ne	15dd4 <re_set_registers+0x50d4>  // b.any
   15d58:	ldr	x0, [sp, #40]
   15d5c:	ldr	x1, [x0, #136]
   15d60:	ldrsw	x0, [sp, #92]
   15d64:	lsl	x0, x0, #3
   15d68:	add	x19, x1, x0
   15d6c:	add	x0, sp, #0x48
   15d70:	ldr	w3, [sp, #124]
   15d74:	ldr	x2, [sp, #96]
   15d78:	ldr	x1, [sp, #144]
   15d7c:	bl	7248 <grub_mod_fini+0x6d28>
   15d80:	str	x0, [x19]
   15d84:	ldr	x0, [sp, #40]
   15d88:	ldr	x1, [x0, #136]
   15d8c:	ldrsw	x0, [sp, #92]
   15d90:	lsl	x0, x0, #3
   15d94:	add	x0, x1, x0
   15d98:	ldr	x0, [x0]
   15d9c:	cmp	x0, #0x0
   15da0:	cset	w0, eq  // eq = none
   15da4:	and	w0, w0, #0xff
   15da8:	and	x0, x0, #0xff
   15dac:	cmp	x0, #0x0
   15db0:	b.eq	15e98 <re_set_registers+0x5198>  // b.none
   15db4:	ldr	w0, [sp, #72]
   15db8:	cmp	w0, #0x0
   15dbc:	cset	w0, ne  // ne = any
   15dc0:	and	w0, w0, #0xff
   15dc4:	and	x0, x0, #0xff
   15dc8:	cmp	x0, #0x0
   15dcc:	b.eq	15e98 <re_set_registers+0x5198>  // b.none
   15dd0:	b	15fa4 <re_set_registers+0x52a4>
   15dd4:	ldr	x0, [sp, #80]
   15dd8:	ldr	x1, [x0, #56]
   15ddc:	add	x0, sp, #0x38
   15de0:	ldr	x2, [sp, #96]
   15de4:	bl	5fc0 <grub_mod_fini+0x5aa0>
   15de8:	str	w0, [sp, #72]
   15dec:	ldr	w0, [sp, #72]
   15df0:	cmp	w0, #0x0
   15df4:	cset	w0, ne  // ne = any
   15df8:	and	w0, w0, #0xff
   15dfc:	and	x0, x0, #0xff
   15e00:	cmp	x0, #0x0
   15e04:	b.eq	15e14 <re_set_registers+0x5114>  // b.none
   15e08:	ldr	x0, [sp, #64]
   15e0c:	bl	2230 <grub_mod_fini+0x1d10>
   15e10:	b	15fa4 <re_set_registers+0x52a4>
   15e14:	ldr	x0, [sp, #40]
   15e18:	ldr	x1, [x0, #136]
   15e1c:	ldrsw	x0, [sp, #92]
   15e20:	lsl	x0, x0, #3
   15e24:	add	x19, x1, x0
   15e28:	add	x1, sp, #0x38
   15e2c:	add	x0, sp, #0x48
   15e30:	ldr	w3, [sp, #124]
   15e34:	mov	x2, x1
   15e38:	ldr	x1, [sp, #144]
   15e3c:	bl	7248 <grub_mod_fini+0x6d28>
   15e40:	str	x0, [x19]
   15e44:	ldr	x0, [sp, #64]
   15e48:	bl	2230 <grub_mod_fini+0x1d10>
   15e4c:	ldr	x0, [sp, #40]
   15e50:	ldr	x1, [x0, #136]
   15e54:	ldrsw	x0, [sp, #92]
   15e58:	lsl	x0, x0, #3
   15e5c:	add	x0, x1, x0
   15e60:	ldr	x0, [x0]
   15e64:	cmp	x0, #0x0
   15e68:	cset	w0, eq  // eq = none
   15e6c:	and	w0, w0, #0xff
   15e70:	and	x0, x0, #0xff
   15e74:	cmp	x0, #0x0
   15e78:	b.eq	15e98 <re_set_registers+0x5198>  // b.none
   15e7c:	ldr	w0, [sp, #72]
   15e80:	cmp	w0, #0x0
   15e84:	cset	w0, ne  // ne = any
   15e88:	and	w0, w0, #0xff
   15e8c:	and	x0, x0, #0xff
   15e90:	cmp	x0, #0x0
   15e94:	b.ne	15f90 <re_set_registers+0x5290>  // b.any
   15e98:	ldr	w0, [sp, #108]
   15e9c:	cmp	w0, #0x0
   15ea0:	b.ne	15f30 <re_set_registers+0x5230>  // b.any
   15ea4:	ldr	x0, [sp, #40]
   15ea8:	ldr	x1, [x0, #136]
   15eac:	ldrsw	x0, [sp, #140]
   15eb0:	lsl	x0, x0, #3
   15eb4:	add	x0, x1, x0
   15eb8:	ldr	x0, [x0]
   15ebc:	ldr	w0, [x0, #12]
   15ec0:	ldr	w1, [sp, #76]
   15ec4:	cmp	w1, w0
   15ec8:	b.ge	15f30 <re_set_registers+0x5230>  // b.tcont
   15ecc:	ldr	w2, [sp, #140]
   15ed0:	ldr	x1, [sp, #96]
   15ed4:	ldr	x0, [sp, #40]
   15ed8:	bl	1553c <re_set_registers+0x483c>
   15edc:	str	w0, [sp, #72]
   15ee0:	ldr	w0, [sp, #72]
   15ee4:	cmp	w0, #0x0
   15ee8:	cset	w0, ne  // ne = any
   15eec:	and	w0, w0, #0xff
   15ef0:	and	x0, x0, #0xff
   15ef4:	cmp	x0, #0x0
   15ef8:	b.ne	15f98 <re_set_registers+0x5298>  // b.any
   15efc:	ldr	x1, [sp, #96]
   15f00:	ldr	x0, [sp, #40]
   15f04:	bl	15a34 <re_set_registers+0x4d34>
   15f08:	str	w0, [sp, #72]
   15f0c:	ldr	w0, [sp, #72]
   15f10:	cmp	w0, #0x0
   15f14:	cset	w0, ne  // ne = any
   15f18:	and	w0, w0, #0xff
   15f1c:	and	x0, x0, #0xff
   15f20:	cmp	x0, #0x0
   15f24:	b.ne	15fa0 <re_set_registers+0x52a0>  // b.any
   15f28:	b	15f30 <re_set_registers+0x5230>
   15f2c:	nop
   15f30:	ldr	w0, [sp, #152]
   15f34:	add	w0, w0, #0x1
   15f38:	str	w0, [sp, #152]
   15f3c:	ldr	x0, [sp, #40]
   15f40:	ldr	w0, [x0, #148]
   15f44:	ldr	w1, [sp, #152]
   15f48:	cmp	w1, w0
   15f4c:	b.lt	15bd0 <re_set_registers+0x4ed0>  // b.tstop
   15f50:	b	15f60 <re_set_registers+0x5260>
   15f54:	nop
   15f58:	b	15f60 <re_set_registers+0x5260>
   15f5c:	nop
   15f60:	ldr	w0, [sp, #156]
   15f64:	add	w0, w0, #0x1
   15f68:	str	w0, [sp, #156]
   15f6c:	ldr	x0, [sp, #32]
   15f70:	ldr	w0, [x0, #4]
   15f74:	ldr	w1, [sp, #156]
   15f78:	cmp	w1, w0
   15f7c:	b.lt	15a68 <re_set_registers+0x4d68>  // b.tstop
   15f80:	str	wzr, [sp, #72]
   15f84:	b	15fa4 <re_set_registers+0x52a4>
   15f88:	nop
   15f8c:	b	15fa4 <re_set_registers+0x52a4>
   15f90:	nop
   15f94:	b	15fa4 <re_set_registers+0x52a4>
   15f98:	nop
   15f9c:	b	15fa4 <re_set_registers+0x52a4>
   15fa0:	nop
   15fa4:	ldr	w0, [sp, #72]
   15fa8:	ldr	x19, [sp, #16]
   15fac:	ldp	x29, x30, [sp], #160
   15fb0:	ret
   15fb4:	stp	x29, x30, [sp, #-144]!
   15fb8:	mov	x29, sp
   15fbc:	str	x0, [sp, #24]
   15fc0:	str	w1, [sp, #20]
   15fc4:	str	w2, [sp, #16]
   15fc8:	ldr	x0, [sp, #24]
   15fcc:	ldr	x0, [x0, #112]
   15fd0:	str	x0, [sp, #96]
   15fd4:	ldr	x0, [sp, #24]
   15fd8:	ldr	x0, [x0, #8]
   15fdc:	str	x0, [sp, #128]
   15fe0:	ldr	w1, [sp, #16]
   15fe4:	ldr	x0, [sp, #24]
   15fe8:	bl	19a54 <re_set_registers+0x8d54>
   15fec:	str	w0, [sp, #92]
   15ff0:	ldr	w0, [sp, #92]
   15ff4:	cmn	w0, #0x1
   15ff8:	b.eq	16054 <re_set_registers+0x5354>  // b.none
   15ffc:	ldr	x0, [sp, #24]
   16000:	ldr	x2, [x0, #160]
   16004:	ldrsw	x1, [sp, #92]
   16008:	mov	x0, x1
   1600c:	lsl	x0, x0, #2
   16010:	add	x0, x0, x1
   16014:	lsl	x0, x0, #2
   16018:	add	x0, x2, x0
   1601c:	str	x0, [sp, #120]
   16020:	ldr	x0, [sp, #120]
   16024:	ldr	w0, [x0]
   16028:	ldr	w1, [sp, #20]
   1602c:	cmp	w1, w0
   16030:	b.ne	1603c <re_set_registers+0x533c>  // b.any
   16034:	mov	w0, #0x0                   	// #0
   16038:	b	165c0 <re_set_registers+0x58c0>
   1603c:	ldr	x0, [sp, #120]
   16040:	add	x1, x0, #0x14
   16044:	str	x1, [sp, #120]
   16048:	ldrb	w0, [x0, #16]
   1604c:	cmp	w0, #0x0
   16050:	b.ne	16020 <re_set_registers+0x5320>  // b.any
   16054:	ldr	x0, [sp, #96]
   16058:	ldr	x1, [x0]
   1605c:	ldrsw	x0, [sp, #20]
   16060:	lsl	x0, x0, #4
   16064:	add	x0, x1, x0
   16068:	ldr	w0, [x0]
   1606c:	str	w0, [sp, #88]
   16070:	str	wzr, [sp, #140]
   16074:	b	165a8 <re_set_registers+0x58a8>
   16078:	ldr	x0, [sp, #24]
   1607c:	ldr	x1, [x0, #184]
   16080:	ldrsw	x0, [sp, #140]
   16084:	lsl	x0, x0, #3
   16088:	add	x0, x1, x0
   1608c:	ldr	x0, [x0]
   16090:	str	x0, [sp, #80]
   16094:	ldr	x0, [sp, #96]
   16098:	ldr	x1, [x0]
   1609c:	ldr	x0, [sp, #80]
   160a0:	ldr	w0, [x0, #4]
   160a4:	sxtw	x0, w0
   160a8:	lsl	x0, x0, #4
   160ac:	add	x0, x1, x0
   160b0:	ldr	w0, [x0]
   160b4:	ldr	w1, [sp, #88]
   160b8:	cmp	w1, w0
   160bc:	b.ne	16580 <re_set_registers+0x5880>  // b.any
   160c0:	ldr	x0, [sp, #80]
   160c4:	ldr	w0, [x0]
   160c8:	str	w0, [sp, #112]
   160cc:	ldr	w0, [sp, #16]
   160d0:	str	w0, [sp, #108]
   160d4:	str	wzr, [sp, #116]
   160d8:	b	16268 <re_set_registers+0x5568>
   160dc:	ldr	x0, [sp, #80]
   160e0:	ldr	x1, [x0, #24]
   160e4:	ldrsw	x0, [sp, #116]
   160e8:	lsl	x0, x0, #3
   160ec:	add	x0, x1, x0
   160f0:	ldr	x0, [x0]
   160f4:	str	x0, [sp, #72]
   160f8:	ldr	x0, [sp, #72]
   160fc:	ldr	w1, [x0, #4]
   16100:	ldr	w0, [sp, #112]
   16104:	sub	w0, w1, w0
   16108:	str	w0, [sp, #68]
   1610c:	ldr	w0, [sp, #68]
   16110:	cmp	w0, #0x0
   16114:	b.le	161e0 <re_set_registers+0x54e0>
   16118:	ldr	w1, [sp, #108]
   1611c:	ldr	w0, [sp, #68]
   16120:	add	w1, w1, w0
   16124:	ldr	x0, [sp, #24]
   16128:	ldr	w0, [x0, #44]
   1612c:	cmp	w1, w0
   16130:	cset	w0, gt
   16134:	and	w0, w0, #0xff
   16138:	and	x0, x0, #0xff
   1613c:	cmp	x0, #0x0
   16140:	b.eq	161ac <re_set_registers+0x54ac>  // b.none
   16144:	ldr	w1, [sp, #108]
   16148:	ldr	w0, [sp, #68]
   1614c:	add	w1, w1, w0
   16150:	ldr	x0, [sp, #24]
   16154:	ldr	w0, [x0, #64]
   16158:	cmp	w1, w0
   1615c:	b.gt	16280 <re_set_registers+0x5580>
   16160:	ldr	w1, [sp, #108]
   16164:	ldr	w0, [sp, #68]
   16168:	add	w0, w1, w0
   1616c:	mov	w1, w0
   16170:	ldr	x0, [sp, #24]
   16174:	bl	13950 <re_set_registers+0x2c50>
   16178:	str	w0, [sp, #64]
   1617c:	ldr	w0, [sp, #64]
   16180:	cmp	w0, #0x0
   16184:	cset	w0, ne  // ne = any
   16188:	and	w0, w0, #0xff
   1618c:	and	x0, x0, #0xff
   16190:	cmp	x0, #0x0
   16194:	b.eq	161a0 <re_set_registers+0x54a0>  // b.none
   16198:	ldr	w0, [sp, #64]
   1619c:	b	165c0 <re_set_registers+0x58c0>
   161a0:	ldr	x0, [sp, #24]
   161a4:	ldr	x0, [x0, #8]
   161a8:	str	x0, [sp, #128]
   161ac:	ldrsw	x0, [sp, #108]
   161b0:	ldr	x1, [sp, #128]
   161b4:	add	x3, x1, x0
   161b8:	ldrsw	x0, [sp, #112]
   161bc:	ldr	x1, [sp, #128]
   161c0:	add	x0, x1, x0
   161c4:	ldrsw	x1, [sp, #68]
   161c8:	mov	x2, x1
   161cc:	mov	x1, x0
   161d0:	mov	x0, x3
   161d4:	bl	0 <grub_memcmp>
   161d8:	cmp	w0, #0x0
   161dc:	b.ne	16288 <re_set_registers+0x5588>  // b.any
   161e0:	ldr	w1, [sp, #108]
   161e4:	ldr	w0, [sp, #68]
   161e8:	add	w0, w1, w0
   161ec:	str	w0, [sp, #108]
   161f0:	ldr	w1, [sp, #112]
   161f4:	ldr	w0, [sp, #68]
   161f8:	add	w0, w1, w0
   161fc:	str	w0, [sp, #112]
   16200:	ldr	w4, [sp, #16]
   16204:	ldr	w3, [sp, #20]
   16208:	ldr	x2, [sp, #72]
   1620c:	ldr	x1, [sp, #80]
   16210:	ldr	x0, [sp, #24]
   16214:	bl	165c8 <re_set_registers+0x58c8>
   16218:	str	w0, [sp, #64]
   1621c:	ldr	x0, [sp, #24]
   16220:	ldr	x0, [x0, #8]
   16224:	str	x0, [sp, #128]
   16228:	ldr	w0, [sp, #64]
   1622c:	cmp	w0, #0x1
   16230:	b.eq	16258 <re_set_registers+0x5558>  // b.none
   16234:	ldr	w0, [sp, #64]
   16238:	cmp	w0, #0x0
   1623c:	cset	w0, ne  // ne = any
   16240:	and	w0, w0, #0xff
   16244:	and	x0, x0, #0xff
   16248:	cmp	x0, #0x0
   1624c:	b.eq	1625c <re_set_registers+0x555c>  // b.none
   16250:	ldr	w0, [sp, #64]
   16254:	b	165c0 <re_set_registers+0x58c0>
   16258:	nop
   1625c:	ldr	w0, [sp, #116]
   16260:	add	w0, w0, #0x1
   16264:	str	w0, [sp, #116]
   16268:	ldr	x0, [sp, #80]
   1626c:	ldr	w0, [x0, #20]
   16270:	ldr	w1, [sp, #116]
   16274:	cmp	w1, w0
   16278:	b.lt	160dc <re_set_registers+0x53dc>  // b.tstop
   1627c:	b	1628c <re_set_registers+0x558c>
   16280:	nop
   16284:	b	1628c <re_set_registers+0x558c>
   16288:	nop
   1628c:	ldr	x0, [sp, #80]
   16290:	ldr	w0, [x0, #20]
   16294:	ldr	w1, [sp, #116]
   16298:	cmp	w1, w0
   1629c:	b.lt	16588 <re_set_registers+0x5888>  // b.tstop
   162a0:	ldr	w0, [sp, #116]
   162a4:	cmp	w0, #0x0
   162a8:	b.le	1656c <re_set_registers+0x586c>
   162ac:	ldr	w0, [sp, #112]
   162b0:	add	w0, w0, #0x1
   162b4:	str	w0, [sp, #112]
   162b8:	b	1656c <re_set_registers+0x586c>
   162bc:	ldr	x0, [sp, #80]
   162c0:	ldr	w0, [x0]
   162c4:	ldr	w1, [sp, #112]
   162c8:	sub	w0, w1, w0
   162cc:	str	w0, [sp, #60]
   162d0:	ldr	w0, [sp, #60]
   162d4:	cmp	w0, #0x0
   162d8:	b.le	16394 <re_set_registers+0x5694>
   162dc:	ldr	x0, [sp, #24]
   162e0:	ldr	w0, [x0, #44]
   162e4:	ldr	w1, [sp, #108]
   162e8:	cmp	w1, w0
   162ec:	cset	w0, ge  // ge = tcont
   162f0:	and	w0, w0, #0xff
   162f4:	and	x0, x0, #0xff
   162f8:	cmp	x0, #0x0
   162fc:	b.eq	1635c <re_set_registers+0x565c>  // b.none
   16300:	ldr	x0, [sp, #24]
   16304:	ldr	w0, [x0, #64]
   16308:	ldr	w1, [sp, #108]
   1630c:	cmp	w1, w0
   16310:	b.ge	16590 <re_set_registers+0x5890>  // b.tcont
   16314:	ldr	w0, [sp, #108]
   16318:	add	w0, w0, #0x1
   1631c:	mov	w1, w0
   16320:	ldr	x0, [sp, #24]
   16324:	bl	19324 <re_set_registers+0x8624>
   16328:	str	w0, [sp, #64]
   1632c:	ldr	w0, [sp, #64]
   16330:	cmp	w0, #0x0
   16334:	cset	w0, ne  // ne = any
   16338:	and	w0, w0, #0xff
   1633c:	and	x0, x0, #0xff
   16340:	cmp	x0, #0x0
   16344:	b.eq	16350 <re_set_registers+0x5650>  // b.none
   16348:	ldr	w0, [sp, #64]
   1634c:	b	165c0 <re_set_registers+0x58c0>
   16350:	ldr	x0, [sp, #24]
   16354:	ldr	x0, [x0, #8]
   16358:	str	x0, [sp, #128]
   1635c:	ldr	w0, [sp, #108]
   16360:	add	w1, w0, #0x1
   16364:	str	w1, [sp, #108]
   16368:	sxtw	x0, w0
   1636c:	ldr	x1, [sp, #128]
   16370:	add	x0, x1, x0
   16374:	ldrb	w1, [x0]
   16378:	ldrsw	x0, [sp, #112]
   1637c:	sub	x0, x0, #0x1
   16380:	ldr	x2, [sp, #128]
   16384:	add	x0, x2, x0
   16388:	ldrb	w0, [x0]
   1638c:	cmp	w1, w0
   16390:	b.ne	16598 <re_set_registers+0x5898>  // b.any
   16394:	ldr	x0, [sp, #24]
   16398:	ldr	x1, [x0, #136]
   1639c:	ldrsw	x0, [sp, #112]
   163a0:	lsl	x0, x0, #3
   163a4:	add	x0, x1, x0
   163a8:	ldr	x0, [x0]
   163ac:	cmp	x0, #0x0
   163b0:	b.eq	16544 <re_set_registers+0x5844>  // b.none
   163b4:	ldr	x0, [sp, #24]
   163b8:	ldr	x1, [x0, #136]
   163bc:	ldrsw	x0, [sp, #112]
   163c0:	lsl	x0, x0, #3
   163c4:	add	x0, x1, x0
   163c8:	ldr	x0, [x0]
   163cc:	add	x0, x0, #0x8
   163d0:	str	x0, [sp, #48]
   163d4:	mov	w3, #0x9                   	// #9
   163d8:	ldr	w2, [sp, #88]
   163dc:	ldr	x1, [sp, #48]
   163e0:	ldr	x0, [sp, #96]
   163e4:	bl	166b0 <re_set_registers+0x59b0>
   163e8:	str	w0, [sp, #44]
   163ec:	ldr	w0, [sp, #44]
   163f0:	cmn	w0, #0x1
   163f4:	b.eq	1654c <re_set_registers+0x584c>  // b.none
   163f8:	ldr	x0, [sp, #80]
   163fc:	ldr	x0, [x0, #8]
   16400:	cmp	x0, #0x0
   16404:	b.ne	16450 <re_set_registers+0x5750>  // b.any
   16408:	ldr	x0, [sp, #80]
   1640c:	ldr	w0, [x0]
   16410:	ldr	w1, [sp, #112]
   16414:	sub	w0, w1, w0
   16418:	add	w0, w0, #0x1
   1641c:	sxtw	x0, w0
   16420:	mov	x1, x0
   16424:	mov	x0, #0x10                  	// #16
   16428:	bl	226c <grub_mod_fini+0x1d4c>
   1642c:	mov	x1, x0
   16430:	ldr	x0, [sp, #80]
   16434:	str	x1, [x0, #8]
   16438:	ldr	x0, [sp, #80]
   1643c:	ldr	x0, [x0, #8]
   16440:	cmp	x0, #0x0
   16444:	b.ne	16450 <re_set_registers+0x5750>  // b.any
   16448:	mov	w0, #0xc                   	// #12
   1644c:	b	165c0 <re_set_registers+0x58c0>
   16450:	ldr	x0, [sp, #80]
   16454:	ldr	x1, [x0, #8]
   16458:	ldr	x0, [sp, #80]
   1645c:	ldr	w2, [x0, #4]
   16460:	ldr	x0, [sp, #80]
   16464:	ldr	w0, [x0]
   16468:	mov	w6, #0x9                   	// #9
   1646c:	ldr	w5, [sp, #112]
   16470:	ldr	w4, [sp, #44]
   16474:	mov	w3, w0
   16478:	ldr	x0, [sp, #24]
   1647c:	bl	16760 <re_set_registers+0x5a60>
   16480:	str	w0, [sp, #64]
   16484:	ldr	w0, [sp, #64]
   16488:	cmp	w0, #0x1
   1648c:	b.eq	16554 <re_set_registers+0x5854>  // b.none
   16490:	ldr	w0, [sp, #64]
   16494:	cmp	w0, #0x0
   16498:	cset	w0, ne  // ne = any
   1649c:	and	w0, w0, #0xff
   164a0:	and	x0, x0, #0xff
   164a4:	cmp	x0, #0x0
   164a8:	b.eq	164b4 <re_set_registers+0x57b4>  // b.none
   164ac:	ldr	w0, [sp, #64]
   164b0:	b	165c0 <re_set_registers+0x58c0>
   164b4:	ldr	w2, [sp, #112]
   164b8:	ldr	w1, [sp, #44]
   164bc:	ldr	x0, [sp, #80]
   164c0:	bl	19cc8 <re_set_registers+0x8fc8>
   164c4:	str	x0, [sp, #72]
   164c8:	ldr	x0, [sp, #72]
   164cc:	cmp	x0, #0x0
   164d0:	cset	w0, eq  // eq = none
   164d4:	and	w0, w0, #0xff
   164d8:	and	x0, x0, #0xff
   164dc:	cmp	x0, #0x0
   164e0:	b.eq	164ec <re_set_registers+0x57ec>  // b.none
   164e4:	mov	w0, #0xc                   	// #12
   164e8:	b	165c0 <re_set_registers+0x58c0>
   164ec:	ldr	w4, [sp, #16]
   164f0:	ldr	w3, [sp, #20]
   164f4:	ldr	x2, [sp, #72]
   164f8:	ldr	x1, [sp, #80]
   164fc:	ldr	x0, [sp, #24]
   16500:	bl	165c8 <re_set_registers+0x58c8>
   16504:	str	w0, [sp, #64]
   16508:	ldr	x0, [sp, #24]
   1650c:	ldr	x0, [x0, #8]
   16510:	str	x0, [sp, #128]
   16514:	ldr	w0, [sp, #64]
   16518:	cmp	w0, #0x1
   1651c:	b.eq	1655c <re_set_registers+0x585c>  // b.none
   16520:	ldr	w0, [sp, #64]
   16524:	cmp	w0, #0x0
   16528:	cset	w0, ne  // ne = any
   1652c:	and	w0, w0, #0xff
   16530:	and	x0, x0, #0xff
   16534:	cmp	x0, #0x0
   16538:	b.eq	16560 <re_set_registers+0x5860>  // b.none
   1653c:	ldr	w0, [sp, #64]
   16540:	b	165c0 <re_set_registers+0x58c0>
   16544:	nop
   16548:	b	16560 <re_set_registers+0x5860>
   1654c:	nop
   16550:	b	16560 <re_set_registers+0x5860>
   16554:	nop
   16558:	b	16560 <re_set_registers+0x5860>
   1655c:	nop
   16560:	ldr	w0, [sp, #112]
   16564:	add	w0, w0, #0x1
   16568:	str	w0, [sp, #112]
   1656c:	ldr	w1, [sp, #112]
   16570:	ldr	w0, [sp, #16]
   16574:	cmp	w1, w0
   16578:	b.le	162bc <re_set_registers+0x55bc>
   1657c:	b	1659c <re_set_registers+0x589c>
   16580:	nop
   16584:	b	1659c <re_set_registers+0x589c>
   16588:	nop
   1658c:	b	1659c <re_set_registers+0x589c>
   16590:	nop
   16594:	b	1659c <re_set_registers+0x589c>
   16598:	nop
   1659c:	ldr	w0, [sp, #140]
   165a0:	add	w0, w0, #0x1
   165a4:	str	w0, [sp, #140]
   165a8:	ldr	x0, [sp, #24]
   165ac:	ldr	w0, [x0, #172]
   165b0:	ldr	w1, [sp, #140]
   165b4:	cmp	w1, w0
   165b8:	b.lt	16078 <re_set_registers+0x5378>  // b.tstop
   165bc:	mov	w0, #0x0                   	// #0
   165c0:	ldp	x29, x30, [sp], #144
   165c4:	ret
   165c8:	stp	x29, x30, [sp, #-64]!
   165cc:	mov	x29, sp
   165d0:	str	x0, [sp, #40]
   165d4:	str	x1, [sp, #32]
   165d8:	str	x2, [sp, #24]
   165dc:	str	w3, [sp, #20]
   165e0:	str	w4, [sp, #16]
   165e4:	ldr	x0, [sp, #24]
   165e8:	add	x1, x0, #0x8
   165ec:	ldr	x0, [sp, #24]
   165f0:	ldr	w2, [x0]
   165f4:	ldr	x0, [sp, #24]
   165f8:	ldr	w0, [x0, #4]
   165fc:	mov	w6, #0x8                   	// #8
   16600:	ldr	w5, [sp, #16]
   16604:	ldr	w4, [sp, #20]
   16608:	mov	w3, w0
   1660c:	ldr	x0, [sp, #40]
   16610:	bl	16760 <re_set_registers+0x5a60>
   16614:	str	w0, [sp, #60]
   16618:	ldr	w0, [sp, #60]
   1661c:	cmp	w0, #0x0
   16620:	b.eq	1662c <re_set_registers+0x592c>  // b.none
   16624:	ldr	w0, [sp, #60]
   16628:	b	166a8 <re_set_registers+0x59a8>
   1662c:	ldr	x0, [sp, #32]
   16630:	ldr	w1, [x0]
   16634:	ldr	x0, [sp, #24]
   16638:	ldr	w0, [x0, #4]
   1663c:	mov	w4, w0
   16640:	mov	w3, w1
   16644:	ldr	w2, [sp, #16]
   16648:	ldr	w1, [sp, #20]
   1664c:	ldr	x0, [sp, #40]
   16650:	bl	19744 <re_set_registers+0x8a44>
   16654:	str	w0, [sp, #60]
   16658:	ldr	w0, [sp, #60]
   1665c:	cmp	w0, #0x0
   16660:	cset	w0, ne  // ne = any
   16664:	and	w0, w0, #0xff
   16668:	and	x0, x0, #0xff
   1666c:	cmp	x0, #0x0
   16670:	b.eq	1667c <re_set_registers+0x597c>  // b.none
   16674:	ldr	w0, [sp, #60]
   16678:	b	166a8 <re_set_registers+0x59a8>
   1667c:	ldr	x0, [sp, #24]
   16680:	ldr	w1, [x0, #4]
   16684:	ldr	w0, [sp, #16]
   16688:	add	w1, w1, w0
   1668c:	ldr	x0, [sp, #32]
   16690:	ldr	w0, [x0]
   16694:	sub	w0, w1, w0
   16698:	str	w0, [sp, #56]
   1669c:	ldr	w1, [sp, #56]
   166a0:	ldr	x0, [sp, #40]
   166a4:	bl	13950 <re_set_registers+0x2c50>
   166a8:	ldp	x29, x30, [sp], #64
   166ac:	ret
   166b0:	sub	sp, sp, #0x30
   166b4:	str	x0, [sp, #24]
   166b8:	str	x1, [sp, #16]
   166bc:	str	w2, [sp, #12]
   166c0:	str	w3, [sp, #8]
   166c4:	str	wzr, [sp, #44]
   166c8:	b	16740 <re_set_registers+0x5a40>
   166cc:	ldr	x0, [sp, #16]
   166d0:	ldr	x1, [x0, #8]
   166d4:	ldrsw	x0, [sp, #44]
   166d8:	lsl	x0, x0, #2
   166dc:	add	x0, x1, x0
   166e0:	ldr	w0, [x0]
   166e4:	str	w0, [sp, #40]
   166e8:	ldr	x0, [sp, #24]
   166ec:	ldr	x1, [x0]
   166f0:	ldrsw	x0, [sp, #40]
   166f4:	lsl	x0, x0, #4
   166f8:	add	x0, x1, x0
   166fc:	str	x0, [sp, #32]
   16700:	ldr	x0, [sp, #32]
   16704:	ldrb	w0, [x0, #8]
   16708:	mov	w1, w0
   1670c:	ldr	w0, [sp, #8]
   16710:	cmp	w0, w1
   16714:	b.ne	16734 <re_set_registers+0x5a34>  // b.any
   16718:	ldr	x0, [sp, #32]
   1671c:	ldr	w0, [x0]
   16720:	ldr	w1, [sp, #12]
   16724:	cmp	w1, w0
   16728:	b.ne	16734 <re_set_registers+0x5a34>  // b.any
   1672c:	ldr	w0, [sp, #40]
   16730:	b	16758 <re_set_registers+0x5a58>
   16734:	ldr	w0, [sp, #44]
   16738:	add	w0, w0, #0x1
   1673c:	str	w0, [sp, #44]
   16740:	ldr	x0, [sp, #16]
   16744:	ldr	w0, [x0, #4]
   16748:	ldr	w1, [sp, #44]
   1674c:	cmp	w1, w0
   16750:	b.lt	166cc <re_set_registers+0x59cc>  // b.tstop
   16754:	mov	w0, #0xffffffff            	// #-1
   16758:	add	sp, sp, #0x30
   1675c:	ret
   16760:	stp	x29, x30, [sp, #-160]!
   16764:	mov	x29, sp
   16768:	str	x0, [sp, #56]
   1676c:	str	x1, [sp, #48]
   16770:	str	w2, [sp, #44]
   16774:	str	w3, [sp, #40]
   16778:	str	w4, [sp, #36]
   1677c:	str	w5, [sp, #32]
   16780:	str	w6, [sp, #28]
   16784:	ldr	x0, [sp, #56]
   16788:	ldr	x0, [x0, #112]
   1678c:	str	x0, [sp, #136]
   16790:	str	wzr, [sp, #84]
   16794:	str	xzr, [sp, #144]
   16798:	ldr	x0, [sp, #136]
   1679c:	ldr	x1, [x0]
   167a0:	ldrsw	x0, [sp, #44]
   167a4:	lsl	x0, x0, #4
   167a8:	add	x0, x1, x0
   167ac:	ldr	w0, [x0]
   167b0:	str	w0, [sp, #132]
   167b4:	ldr	x0, [sp, #56]
   167b8:	ldr	w1, [x0, #168]
   167bc:	ldr	w0, [sp, #32]
   167c0:	add	w1, w1, w0
   167c4:	ldr	x0, [sp, #48]
   167c8:	ldr	w0, [x0, #4]
   167cc:	cmp	w1, w0
   167d0:	cset	w0, ge  // ge = tcont
   167d4:	and	w0, w0, #0xff
   167d8:	and	x0, x0, #0xff
   167dc:	cmp	x0, #0x0
   167e0:	b.eq	168fc <re_set_registers+0x5bfc>  // b.none
   167e4:	ldr	x0, [sp, #48]
   167e8:	ldr	w0, [x0, #4]
   167ec:	str	w0, [sp, #128]
   167f0:	ldr	x0, [sp, #56]
   167f4:	ldr	w1, [x0, #168]
   167f8:	ldr	w0, [sp, #32]
   167fc:	add	w0, w1, w0
   16800:	add	w0, w0, #0x1
   16804:	str	w0, [sp, #124]
   16808:	mov	w1, #0x7fffffff            	// #2147483647
   1680c:	ldr	w0, [sp, #128]
   16810:	sub	w0, w1, w0
   16814:	ldr	w1, [sp, #124]
   16818:	cmp	w1, w0
   1681c:	cset	w0, gt
   16820:	and	w0, w0, #0xff
   16824:	and	x0, x0, #0xff
   16828:	cmp	x0, #0x0
   1682c:	b.eq	16838 <re_set_registers+0x5b38>  // b.none
   16830:	mov	w0, #0xc                   	// #12
   16834:	b	16eb0 <re_set_registers+0x61b0>
   16838:	ldr	w1, [sp, #128]
   1683c:	ldr	w0, [sp, #124]
   16840:	add	w0, w1, w0
   16844:	str	w0, [sp, #120]
   16848:	ldr	w0, [sp, #120]
   1684c:	lsr	w0, w0, #31
   16850:	and	w0, w0, #0xff
   16854:	and	x0, x0, #0xff
   16858:	cmp	x0, #0x0
   1685c:	b.eq	16868 <re_set_registers+0x5b68>  // b.none
   16860:	mov	w0, #0xc                   	// #12
   16864:	b	16eb0 <re_set_registers+0x61b0>
   16868:	ldr	x0, [sp, #48]
   1686c:	ldr	x2, [x0, #8]
   16870:	ldrsw	x0, [sp, #120]
   16874:	lsl	x0, x0, #3
   16878:	mov	x1, x0
   1687c:	mov	x0, x2
   16880:	bl	2294 <grub_mod_fini+0x1d74>
   16884:	str	x0, [sp, #112]
   16888:	ldr	x0, [sp, #112]
   1688c:	cmp	x0, #0x0
   16890:	cset	w0, eq  // eq = none
   16894:	and	w0, w0, #0xff
   16898:	and	x0, x0, #0xff
   1689c:	cmp	x0, #0x0
   168a0:	b.eq	168ac <re_set_registers+0x5bac>  // b.none
   168a4:	mov	w0, #0xc                   	// #12
   168a8:	b	16eb0 <re_set_registers+0x61b0>
   168ac:	ldr	x0, [sp, #48]
   168b0:	ldr	x1, [sp, #112]
   168b4:	str	x1, [x0, #8]
   168b8:	ldr	x0, [sp, #48]
   168bc:	ldr	w1, [sp, #120]
   168c0:	str	w1, [x0, #4]
   168c4:	ldrsw	x0, [sp, #128]
   168c8:	lsl	x0, x0, #3
   168cc:	ldr	x1, [sp, #112]
   168d0:	add	x3, x1, x0
   168d4:	ldr	x0, [sp, #48]
   168d8:	ldr	w1, [x0, #4]
   168dc:	ldr	w0, [sp, #128]
   168e0:	sub	w0, w1, w0
   168e4:	sxtw	x0, w0
   168e8:	lsl	x0, x0, #3
   168ec:	mov	x2, x0
   168f0:	mov	w1, #0x0                   	// #0
   168f4:	mov	x0, x3
   168f8:	bl	0 <grub_memset>
   168fc:	ldr	x0, [sp, #48]
   16900:	ldr	w0, [x0]
   16904:	cmp	w0, #0x0
   16908:	b.eq	16918 <re_set_registers+0x5c18>  // b.none
   1690c:	ldr	x0, [sp, #48]
   16910:	ldr	w0, [x0]
   16914:	b	1691c <re_set_registers+0x5c1c>
   16918:	ldr	w0, [sp, #40]
   1691c:	str	w0, [sp, #156]
   16920:	ldr	x0, [sp, #56]
   16924:	ldr	x0, [x0, #136]
   16928:	str	x0, [sp, #104]
   1692c:	ldr	x0, [sp, #56]
   16930:	ldr	w0, [x0, #56]
   16934:	str	w0, [sp, #100]
   16938:	ldr	x0, [sp, #48]
   1693c:	ldr	x1, [x0, #8]
   16940:	ldr	x0, [sp, #56]
   16944:	str	x1, [x0, #136]
   16948:	ldr	x0, [sp, #56]
   1694c:	ldr	w1, [sp, #156]
   16950:	str	w1, [x0, #56]
   16954:	ldr	x3, [sp, #56]
   16958:	ldr	w0, [sp, #156]
   1695c:	sub	w1, w0, #0x1
   16960:	ldr	x0, [sp, #56]
   16964:	ldr	w0, [x0, #120]
   16968:	mov	w2, w0
   1696c:	mov	x0, x3
   16970:	bl	564c <grub_mod_fini+0x512c>
   16974:	str	w0, [sp, #96]
   16978:	ldr	w1, [sp, #156]
   1697c:	ldr	w0, [sp, #40]
   16980:	cmp	w1, w0
   16984:	b.ne	16a04 <re_set_registers+0x5d04>  // b.any
   16988:	add	x0, sp, #0x40
   1698c:	ldr	w1, [sp, #44]
   16990:	bl	589c <grub_mod_fini+0x537c>
   16994:	str	w0, [sp, #84]
   16998:	ldr	w0, [sp, #84]
   1699c:	cmp	w0, #0x0
   169a0:	cset	w0, ne  // ne = any
   169a4:	and	w0, w0, #0xff
   169a8:	and	x0, x0, #0xff
   169ac:	cmp	x0, #0x0
   169b0:	b.eq	169bc <re_set_registers+0x5cbc>  // b.none
   169b4:	ldr	w0, [sp, #84]
   169b8:	b	16eb0 <re_set_registers+0x61b0>
   169bc:	add	x0, sp, #0x40
   169c0:	ldr	w3, [sp, #28]
   169c4:	ldr	w2, [sp, #132]
   169c8:	mov	x1, x0
   169cc:	ldr	x0, [sp, #136]
   169d0:	bl	17188 <re_set_registers+0x6488>
   169d4:	str	w0, [sp, #84]
   169d8:	ldr	w0, [sp, #84]
   169dc:	cmp	w0, #0x0
   169e0:	cset	w0, ne  // ne = any
   169e4:	and	w0, w0, #0xff
   169e8:	and	x0, x0, #0xff
   169ec:	cmp	x0, #0x0
   169f0:	b.eq	16a8c <re_set_registers+0x5d8c>  // b.none
   169f4:	ldr	x0, [sp, #72]
   169f8:	bl	2230 <grub_mod_fini+0x1d10>
   169fc:	ldr	w0, [sp, #84]
   16a00:	b	16eb0 <re_set_registers+0x61b0>
   16a04:	ldr	x0, [sp, #56]
   16a08:	ldr	x1, [x0, #136]
   16a0c:	ldrsw	x0, [sp, #156]
   16a10:	lsl	x0, x0, #3
   16a14:	add	x0, x1, x0
   16a18:	ldr	x0, [x0]
   16a1c:	str	x0, [sp, #144]
   16a20:	ldr	x0, [sp, #144]
   16a24:	cmp	x0, #0x0
   16a28:	b.eq	16a7c <re_set_registers+0x5d7c>  // b.none
   16a2c:	ldr	x0, [sp, #144]
   16a30:	ldrb	w0, [x0, #80]
   16a34:	and	w0, w0, #0x40
   16a38:	and	w0, w0, #0xff
   16a3c:	cmp	w0, #0x0
   16a40:	b.eq	16a7c <re_set_registers+0x5d7c>  // b.none
   16a44:	ldr	x0, [sp, #144]
   16a48:	add	x1, x0, #0x8
   16a4c:	add	x0, sp, #0x40
   16a50:	bl	5a34 <grub_mod_fini+0x5514>
   16a54:	str	w0, [sp, #84]
   16a58:	ldr	w0, [sp, #84]
   16a5c:	cmp	w0, #0x0
   16a60:	cset	w0, ne  // ne = any
   16a64:	and	w0, w0, #0xff
   16a68:	and	x0, x0, #0xff
   16a6c:	cmp	x0, #0x0
   16a70:	b.eq	16a8c <re_set_registers+0x5d8c>  // b.none
   16a74:	ldr	w0, [sp, #84]
   16a78:	b	16eb0 <re_set_registers+0x61b0>
   16a7c:	add	x0, sp, #0x40
   16a80:	mov	x2, #0x10                  	// #16
   16a84:	mov	w1, #0x0                   	// #0
   16a88:	bl	0 <grub_memset>
   16a8c:	ldr	w1, [sp, #156]
   16a90:	ldr	w0, [sp, #40]
   16a94:	cmp	w1, w0
   16a98:	b.eq	16ac0 <re_set_registers+0x5dc0>  // b.none
   16a9c:	ldr	x0, [sp, #144]
   16aa0:	cmp	x0, #0x0
   16aa4:	b.eq	16b98 <re_set_registers+0x5e98>  // b.none
   16aa8:	ldr	x0, [sp, #144]
   16aac:	ldrb	w0, [x0, #80]
   16ab0:	and	w0, w0, #0x40
   16ab4:	and	w0, w0, #0xff
   16ab8:	cmp	w0, #0x0
   16abc:	b.eq	16b98 <re_set_registers+0x5e98>  // b.none
   16ac0:	ldr	w0, [sp, #68]
   16ac4:	cmp	w0, #0x0
   16ac8:	b.eq	16b18 <re_set_registers+0x5e18>  // b.none
   16acc:	add	x0, sp, #0x40
   16ad0:	ldr	w4, [sp, #28]
   16ad4:	ldr	w3, [sp, #132]
   16ad8:	ldr	w2, [sp, #156]
   16adc:	mov	x1, x0
   16ae0:	ldr	x0, [sp, #56]
   16ae4:	bl	174d4 <re_set_registers+0x67d4>
   16ae8:	str	w0, [sp, #84]
   16aec:	ldr	w0, [sp, #84]
   16af0:	cmp	w0, #0x0
   16af4:	cset	w0, ne  // ne = any
   16af8:	and	w0, w0, #0xff
   16afc:	and	x0, x0, #0xff
   16b00:	cmp	x0, #0x0
   16b04:	b.eq	16b18 <re_set_registers+0x5e18>  // b.none
   16b08:	ldr	x0, [sp, #72]
   16b0c:	bl	2230 <grub_mod_fini+0x1d10>
   16b10:	ldr	w0, [sp, #84]
   16b14:	b	16eb0 <re_set_registers+0x61b0>
   16b18:	add	x1, sp, #0x40
   16b1c:	add	x0, sp, #0x54
   16b20:	ldr	w3, [sp, #96]
   16b24:	mov	x2, x1
   16b28:	ldr	x1, [sp, #136]
   16b2c:	bl	7248 <grub_mod_fini+0x6d28>
   16b30:	str	x0, [sp, #144]
   16b34:	ldr	x0, [sp, #144]
   16b38:	cmp	x0, #0x0
   16b3c:	cset	w0, eq  // eq = none
   16b40:	and	w0, w0, #0xff
   16b44:	and	x0, x0, #0xff
   16b48:	cmp	x0, #0x0
   16b4c:	b.eq	16b7c <re_set_registers+0x5e7c>  // b.none
   16b50:	ldr	w0, [sp, #84]
   16b54:	cmp	w0, #0x0
   16b58:	cset	w0, ne  // ne = any
   16b5c:	and	w0, w0, #0xff
   16b60:	and	x0, x0, #0xff
   16b64:	cmp	x0, #0x0
   16b68:	b.eq	16b7c <re_set_registers+0x5e7c>  // b.none
   16b6c:	ldr	x0, [sp, #72]
   16b70:	bl	2230 <grub_mod_fini+0x1d10>
   16b74:	ldr	w0, [sp, #84]
   16b78:	b	16eb0 <re_set_registers+0x61b0>
   16b7c:	ldr	x0, [sp, #56]
   16b80:	ldr	x1, [x0, #136]
   16b84:	ldrsw	x0, [sp, #156]
   16b88:	lsl	x0, x0, #3
   16b8c:	add	x0, x1, x0
   16b90:	ldr	x1, [sp, #144]
   16b94:	str	x1, [x0]
   16b98:	str	wzr, [sp, #152]
   16b9c:	b	16dec <re_set_registers+0x60ec>
   16ba0:	str	wzr, [sp, #68]
   16ba4:	ldr	x0, [sp, #56]
   16ba8:	ldr	x1, [x0, #136]
   16bac:	ldrsw	x0, [sp, #156]
   16bb0:	add	x0, x0, #0x1
   16bb4:	lsl	x0, x0, #3
   16bb8:	add	x0, x1, x0
   16bbc:	ldr	x0, [x0]
   16bc0:	cmp	x0, #0x0
   16bc4:	b.eq	16c20 <re_set_registers+0x5f20>  // b.none
   16bc8:	ldr	x0, [sp, #56]
   16bcc:	ldr	x1, [x0, #136]
   16bd0:	ldrsw	x0, [sp, #156]
   16bd4:	add	x0, x0, #0x1
   16bd8:	lsl	x0, x0, #3
   16bdc:	add	x0, x1, x0
   16be0:	ldr	x0, [x0]
   16be4:	add	x1, x0, #0x8
   16be8:	add	x0, sp, #0x40
   16bec:	bl	634c <grub_mod_fini+0x5e2c>
   16bf0:	str	w0, [sp, #84]
   16bf4:	ldr	w0, [sp, #84]
   16bf8:	cmp	w0, #0x0
   16bfc:	cset	w0, ne  // ne = any
   16c00:	and	w0, w0, #0xff
   16c04:	and	x0, x0, #0xff
   16c08:	cmp	x0, #0x0
   16c0c:	b.eq	16c20 <re_set_registers+0x5f20>  // b.none
   16c10:	ldr	x0, [sp, #72]
   16c14:	bl	2230 <grub_mod_fini+0x1d10>
   16c18:	ldr	w0, [sp, #84]
   16c1c:	b	16eb0 <re_set_registers+0x61b0>
   16c20:	ldr	x0, [sp, #144]
   16c24:	cmp	x0, #0x0
   16c28:	b.eq	16c7c <re_set_registers+0x5f7c>  // b.none
   16c2c:	ldr	x0, [sp, #144]
   16c30:	add	x0, x0, #0x18
   16c34:	add	x1, sp, #0x40
   16c38:	mov	x3, x1
   16c3c:	mov	x2, x0
   16c40:	ldr	w1, [sp, #156]
   16c44:	ldr	x0, [sp, #56]
   16c48:	bl	16eb8 <re_set_registers+0x61b8>
   16c4c:	str	w0, [sp, #84]
   16c50:	ldr	w0, [sp, #84]
   16c54:	cmp	w0, #0x0
   16c58:	cset	w0, ne  // ne = any
   16c5c:	and	w0, w0, #0xff
   16c60:	and	x0, x0, #0xff
   16c64:	cmp	x0, #0x0
   16c68:	b.eq	16c7c <re_set_registers+0x5f7c>  // b.none
   16c6c:	ldr	x0, [sp, #72]
   16c70:	bl	2230 <grub_mod_fini+0x1d10>
   16c74:	ldr	w0, [sp, #84]
   16c78:	b	16eb0 <re_set_registers+0x61b0>
   16c7c:	ldr	w0, [sp, #156]
   16c80:	add	w0, w0, #0x1
   16c84:	str	w0, [sp, #156]
   16c88:	ldr	w0, [sp, #68]
   16c8c:	cmp	w0, #0x0
   16c90:	b.eq	16d28 <re_set_registers+0x6028>  // b.none
   16c94:	add	x0, sp, #0x40
   16c98:	ldr	w3, [sp, #28]
   16c9c:	ldr	w2, [sp, #132]
   16ca0:	mov	x1, x0
   16ca4:	ldr	x0, [sp, #136]
   16ca8:	bl	17188 <re_set_registers+0x6488>
   16cac:	str	w0, [sp, #84]
   16cb0:	ldr	w0, [sp, #84]
   16cb4:	cmp	w0, #0x0
   16cb8:	cset	w0, ne  // ne = any
   16cbc:	and	w0, w0, #0xff
   16cc0:	and	x0, x0, #0xff
   16cc4:	cmp	x0, #0x0
   16cc8:	b.eq	16cdc <re_set_registers+0x5fdc>  // b.none
   16ccc:	ldr	x0, [sp, #72]
   16cd0:	bl	2230 <grub_mod_fini+0x1d10>
   16cd4:	ldr	w0, [sp, #84]
   16cd8:	b	16eb0 <re_set_registers+0x61b0>
   16cdc:	add	x0, sp, #0x40
   16ce0:	ldr	w4, [sp, #28]
   16ce4:	ldr	w3, [sp, #132]
   16ce8:	ldr	w2, [sp, #156]
   16cec:	mov	x1, x0
   16cf0:	ldr	x0, [sp, #56]
   16cf4:	bl	174d4 <re_set_registers+0x67d4>
   16cf8:	str	w0, [sp, #84]
   16cfc:	ldr	w0, [sp, #84]
   16d00:	cmp	w0, #0x0
   16d04:	cset	w0, ne  // ne = any
   16d08:	and	w0, w0, #0xff
   16d0c:	and	x0, x0, #0xff
   16d10:	cmp	x0, #0x0
   16d14:	b.eq	16d28 <re_set_registers+0x6028>  // b.none
   16d18:	ldr	x0, [sp, #72]
   16d1c:	bl	2230 <grub_mod_fini+0x1d10>
   16d20:	ldr	w0, [sp, #84]
   16d24:	b	16eb0 <re_set_registers+0x61b0>
   16d28:	ldr	x3, [sp, #56]
   16d2c:	ldr	w0, [sp, #156]
   16d30:	sub	w1, w0, #0x1
   16d34:	ldr	x0, [sp, #56]
   16d38:	ldr	w0, [x0, #120]
   16d3c:	mov	w2, w0
   16d40:	mov	x0, x3
   16d44:	bl	564c <grub_mod_fini+0x512c>
   16d48:	str	w0, [sp, #96]
   16d4c:	add	x1, sp, #0x40
   16d50:	add	x0, sp, #0x54
   16d54:	ldr	w3, [sp, #96]
   16d58:	mov	x2, x1
   16d5c:	ldr	x1, [sp, #136]
   16d60:	bl	7248 <grub_mod_fini+0x6d28>
   16d64:	str	x0, [sp, #144]
   16d68:	ldr	x0, [sp, #144]
   16d6c:	cmp	x0, #0x0
   16d70:	cset	w0, eq  // eq = none
   16d74:	and	w0, w0, #0xff
   16d78:	and	x0, x0, #0xff
   16d7c:	cmp	x0, #0x0
   16d80:	b.eq	16db0 <re_set_registers+0x60b0>  // b.none
   16d84:	ldr	w0, [sp, #84]
   16d88:	cmp	w0, #0x0
   16d8c:	cset	w0, ne  // ne = any
   16d90:	and	w0, w0, #0xff
   16d94:	and	x0, x0, #0xff
   16d98:	cmp	x0, #0x0
   16d9c:	b.eq	16db0 <re_set_registers+0x60b0>  // b.none
   16da0:	ldr	x0, [sp, #72]
   16da4:	bl	2230 <grub_mod_fini+0x1d10>
   16da8:	ldr	w0, [sp, #84]
   16dac:	b	16eb0 <re_set_registers+0x61b0>
   16db0:	ldr	x0, [sp, #56]
   16db4:	ldr	x1, [x0, #136]
   16db8:	ldrsw	x0, [sp, #156]
   16dbc:	lsl	x0, x0, #3
   16dc0:	add	x0, x1, x0
   16dc4:	ldr	x1, [sp, #144]
   16dc8:	str	x1, [x0]
   16dcc:	ldr	x0, [sp, #144]
   16dd0:	cmp	x0, #0x0
   16dd4:	b.ne	16de4 <re_set_registers+0x60e4>  // b.any
   16dd8:	ldr	w0, [sp, #152]
   16ddc:	add	w0, w0, #0x1
   16de0:	b	16de8 <re_set_registers+0x60e8>
   16de4:	mov	w0, #0x0                   	// #0
   16de8:	str	w0, [sp, #152]
   16dec:	ldr	w1, [sp, #156]
   16df0:	ldr	w0, [sp, #32]
   16df4:	cmp	w1, w0
   16df8:	b.ge	16e10 <re_set_registers+0x6110>  // b.tcont
   16dfc:	ldr	x0, [sp, #56]
   16e00:	ldr	w0, [x0, #168]
   16e04:	ldr	w1, [sp, #152]
   16e08:	cmp	w1, w0
   16e0c:	b.le	16ba0 <re_set_registers+0x5ea0>
   16e10:	ldr	x0, [sp, #72]
   16e14:	bl	2230 <grub_mod_fini+0x1d10>
   16e18:	ldr	x0, [sp, #56]
   16e1c:	ldr	x1, [x0, #136]
   16e20:	ldrsw	x0, [sp, #32]
   16e24:	lsl	x0, x0, #3
   16e28:	add	x0, x1, x0
   16e2c:	ldr	x0, [x0]
   16e30:	cmp	x0, #0x0
   16e34:	b.eq	16e58 <re_set_registers+0x6158>  // b.none
   16e38:	ldr	x0, [sp, #56]
   16e3c:	ldr	x1, [x0, #136]
   16e40:	ldrsw	x0, [sp, #32]
   16e44:	lsl	x0, x0, #3
   16e48:	add	x0, x1, x0
   16e4c:	ldr	x0, [x0]
   16e50:	add	x0, x0, #0x8
   16e54:	b	16e5c <re_set_registers+0x615c>
   16e58:	mov	x0, #0x0                   	// #0
   16e5c:	str	x0, [sp, #88]
   16e60:	ldr	x0, [sp, #48]
   16e64:	ldr	w1, [sp, #156]
   16e68:	str	w1, [x0]
   16e6c:	ldr	x0, [sp, #56]
   16e70:	ldr	x1, [sp, #104]
   16e74:	str	x1, [x0, #136]
   16e78:	ldr	x0, [sp, #56]
   16e7c:	ldr	w1, [sp, #100]
   16e80:	str	w1, [x0, #56]
   16e84:	ldr	x0, [sp, #88]
   16e88:	cmp	x0, #0x0
   16e8c:	b.eq	16eac <re_set_registers+0x61ac>  // b.none
   16e90:	ldr	w1, [sp, #36]
   16e94:	ldr	x0, [sp, #88]
   16e98:	bl	6b7c <grub_mod_fini+0x665c>
   16e9c:	cmp	w0, #0x0
   16ea0:	b.eq	16eac <re_set_registers+0x61ac>  // b.none
   16ea4:	mov	w0, #0x0                   	// #0
   16ea8:	b	16eb0 <re_set_registers+0x61b0>
   16eac:	mov	w0, #0x1                   	// #1
   16eb0:	ldp	x29, x30, [sp], #160
   16eb4:	ret
   16eb8:	stp	x29, x30, [sp, #-128]!
   16ebc:	mov	x29, sp
   16ec0:	str	x19, [sp, #16]
   16ec4:	str	x0, [sp, #56]
   16ec8:	str	w1, [sp, #52]
   16ecc:	str	x2, [sp, #40]
   16ed0:	str	x3, [sp, #32]
   16ed4:	ldr	x0, [sp, #56]
   16ed8:	ldr	x0, [x0, #112]
   16edc:	str	x0, [sp, #112]
   16ee0:	str	wzr, [sp, #80]
   16ee4:	add	x0, sp, #0x40
   16ee8:	mov	x2, #0x10                  	// #16
   16eec:	mov	w1, #0x0                   	// #0
   16ef0:	bl	0 <grub_memset>
   16ef4:	str	wzr, [sp, #124]
   16ef8:	b	1715c <re_set_registers+0x645c>
   16efc:	str	wzr, [sp, #120]
   16f00:	ldr	x0, [sp, #40]
   16f04:	ldr	x1, [x0, #8]
   16f08:	ldrsw	x0, [sp, #124]
   16f0c:	lsl	x0, x0, #2
   16f10:	add	x0, x1, x0
   16f14:	ldr	w0, [x0]
   16f18:	str	w0, [sp, #108]
   16f1c:	ldr	x0, [sp, #112]
   16f20:	ldr	x1, [x0]
   16f24:	ldrsw	x0, [sp, #108]
   16f28:	lsl	x0, x0, #4
   16f2c:	add	x0, x1, x0
   16f30:	ldrb	w0, [x0, #10]
   16f34:	and	w0, w0, #0x10
   16f38:	and	w0, w0, #0xff
   16f3c:	cmp	w0, #0x0
   16f40:	b.eq	170c4 <re_set_registers+0x63c4>  // b.none
   16f44:	ldr	x0, [sp, #56]
   16f48:	ldr	w3, [sp, #52]
   16f4c:	mov	x2, x0
   16f50:	ldr	w1, [sp, #108]
   16f54:	ldr	x0, [sp, #112]
   16f58:	bl	18bb4 <re_set_registers+0x7eb4>
   16f5c:	str	w0, [sp, #120]
   16f60:	ldr	w0, [sp, #120]
   16f64:	cmp	w0, #0x1
   16f68:	b.le	170c4 <re_set_registers+0x63c4>
   16f6c:	ldr	x0, [sp, #112]
   16f70:	ldr	x1, [x0, #24]
   16f74:	ldrsw	x0, [sp, #108]
   16f78:	lsl	x0, x0, #2
   16f7c:	add	x0, x1, x0
   16f80:	ldr	w0, [x0]
   16f84:	str	w0, [sp, #104]
   16f88:	ldr	w1, [sp, #52]
   16f8c:	ldr	w0, [sp, #120]
   16f90:	add	w0, w1, w0
   16f94:	str	w0, [sp, #100]
   16f98:	ldr	x0, [sp, #56]
   16f9c:	ldr	x1, [x0, #136]
   16fa0:	ldrsw	x0, [sp, #100]
   16fa4:	lsl	x0, x0, #3
   16fa8:	add	x0, x1, x0
   16fac:	ldr	x0, [x0]
   16fb0:	str	x0, [sp, #88]
   16fb4:	str	wzr, [sp, #68]
   16fb8:	ldr	x0, [sp, #88]
   16fbc:	cmp	x0, #0x0
   16fc0:	b.eq	17004 <re_set_registers+0x6304>  // b.none
   16fc4:	ldr	x0, [sp, #88]
   16fc8:	add	x1, x0, #0x8
   16fcc:	add	x0, sp, #0x40
   16fd0:	bl	634c <grub_mod_fini+0x5e2c>
   16fd4:	str	w0, [sp, #80]
   16fd8:	ldr	w0, [sp, #80]
   16fdc:	cmp	w0, #0x0
   16fe0:	cset	w0, ne  // ne = any
   16fe4:	and	w0, w0, #0xff
   16fe8:	and	x0, x0, #0xff
   16fec:	cmp	x0, #0x0
   16ff0:	b.eq	17004 <re_set_registers+0x6304>  // b.none
   16ff4:	ldr	x0, [sp, #72]
   16ff8:	bl	2230 <grub_mod_fini+0x1d10>
   16ffc:	ldr	w0, [sp, #80]
   17000:	b	1717c <re_set_registers+0x647c>
   17004:	add	x0, sp, #0x40
   17008:	ldr	w1, [sp, #104]
   1700c:	bl	67b0 <grub_mod_fini+0x6290>
   17010:	strb	w0, [sp, #87]
   17014:	ldrb	w0, [sp, #87]
   17018:	eor	w0, w0, #0x1
   1701c:	and	w0, w0, #0xff
   17020:	and	x0, x0, #0xff
   17024:	cmp	x0, #0x0
   17028:	b.eq	1703c <re_set_registers+0x633c>  // b.none
   1702c:	ldr	x0, [sp, #72]
   17030:	bl	2230 <grub_mod_fini+0x1d10>
   17034:	mov	w0, #0xc                   	// #12
   17038:	b	1717c <re_set_registers+0x647c>
   1703c:	ldr	x0, [sp, #56]
   17040:	ldr	x1, [x0, #136]
   17044:	ldrsw	x0, [sp, #100]
   17048:	lsl	x0, x0, #3
   1704c:	add	x19, x1, x0
   17050:	add	x1, sp, #0x40
   17054:	add	x0, sp, #0x50
   17058:	mov	x2, x1
   1705c:	ldr	x1, [sp, #112]
   17060:	bl	7104 <grub_mod_fini+0x6be4>
   17064:	str	x0, [x19]
   17068:	ldr	x0, [sp, #56]
   1706c:	ldr	x1, [x0, #136]
   17070:	ldrsw	x0, [sp, #100]
   17074:	lsl	x0, x0, #3
   17078:	add	x0, x1, x0
   1707c:	ldr	x0, [x0]
   17080:	cmp	x0, #0x0
   17084:	cset	w0, eq  // eq = none
   17088:	and	w0, w0, #0xff
   1708c:	and	x0, x0, #0xff
   17090:	cmp	x0, #0x0
   17094:	b.eq	170c4 <re_set_registers+0x63c4>  // b.none
   17098:	ldr	w0, [sp, #80]
   1709c:	cmp	w0, #0x0
   170a0:	cset	w0, ne  // ne = any
   170a4:	and	w0, w0, #0xff
   170a8:	and	x0, x0, #0xff
   170ac:	cmp	x0, #0x0
   170b0:	b.eq	170c4 <re_set_registers+0x63c4>  // b.none
   170b4:	ldr	x0, [sp, #72]
   170b8:	bl	2230 <grub_mod_fini+0x1d10>
   170bc:	ldr	w0, [sp, #80]
   170c0:	b	1717c <re_set_registers+0x647c>
   170c4:	ldr	w0, [sp, #120]
   170c8:	cmp	w0, #0x0
   170cc:	b.ne	17100 <re_set_registers+0x6400>  // b.any
   170d0:	ldr	x0, [sp, #112]
   170d4:	ldr	x1, [x0]
   170d8:	ldrsw	x0, [sp, #108]
   170dc:	lsl	x0, x0, #4
   170e0:	add	x0, x1, x0
   170e4:	ldr	w2, [sp, #52]
   170e8:	mov	x1, x0
   170ec:	ldr	x0, [sp, #56]
   170f0:	bl	190fc <re_set_registers+0x83fc>
   170f4:	and	w0, w0, #0xff
   170f8:	cmp	w0, #0x0
   170fc:	b.eq	17150 <re_set_registers+0x6450>  // b.none
   17100:	ldr	x0, [sp, #112]
   17104:	ldr	x1, [x0, #24]
   17108:	ldrsw	x0, [sp, #108]
   1710c:	lsl	x0, x0, #2
   17110:	add	x0, x1, x0
   17114:	ldr	w0, [x0]
   17118:	mov	w1, w0
   1711c:	ldr	x0, [sp, #32]
   17120:	bl	67b0 <grub_mod_fini+0x6290>
   17124:	strb	w0, [sp, #87]
   17128:	ldrb	w0, [sp, #87]
   1712c:	eor	w0, w0, #0x1
   17130:	and	w0, w0, #0xff
   17134:	and	x0, x0, #0xff
   17138:	cmp	x0, #0x0
   1713c:	b.eq	17150 <re_set_registers+0x6450>  // b.none
   17140:	ldr	x0, [sp, #72]
   17144:	bl	2230 <grub_mod_fini+0x1d10>
   17148:	mov	w0, #0xc                   	// #12
   1714c:	b	1717c <re_set_registers+0x647c>
   17150:	ldr	w0, [sp, #124]
   17154:	add	w0, w0, #0x1
   17158:	str	w0, [sp, #124]
   1715c:	ldr	x0, [sp, #40]
   17160:	ldr	w0, [x0, #4]
   17164:	ldr	w1, [sp, #124]
   17168:	cmp	w1, w0
   1716c:	b.lt	16efc <re_set_registers+0x61fc>  // b.tstop
   17170:	ldr	x0, [sp, #72]
   17174:	bl	2230 <grub_mod_fini+0x1d10>
   17178:	mov	w0, #0x0                   	// #0
   1717c:	ldr	x19, [sp, #16]
   17180:	ldp	x29, x30, [sp], #128
   17184:	ret
   17188:	stp	x29, x30, [sp, #-96]!
   1718c:	mov	x29, sp
   17190:	str	x0, [sp, #40]
   17194:	str	x1, [sp, #32]
   17198:	str	w2, [sp, #28]
   1719c:	str	w3, [sp, #24]
   171a0:	ldr	x0, [sp, #32]
   171a4:	ldr	w1, [x0, #4]
   171a8:	add	x0, sp, #0x30
   171ac:	bl	5820 <grub_mod_fini+0x5300>
   171b0:	str	w0, [sp, #88]
   171b4:	ldr	w0, [sp, #88]
   171b8:	cmp	w0, #0x0
   171bc:	cset	w0, ne  // ne = any
   171c0:	and	w0, w0, #0xff
   171c4:	and	x0, x0, #0xff
   171c8:	cmp	x0, #0x0
   171cc:	b.eq	171d8 <re_set_registers+0x64d8>  // b.none
   171d0:	ldr	w0, [sp, #88]
   171d4:	b	172fc <re_set_registers+0x65fc>
   171d8:	str	wzr, [sp, #92]
   171dc:	b	172cc <re_set_registers+0x65cc>
   171e0:	ldr	x0, [sp, #32]
   171e4:	ldr	x1, [x0, #8]
   171e8:	ldrsw	x0, [sp, #92]
   171ec:	lsl	x0, x0, #2
   171f0:	add	x0, x1, x0
   171f4:	ldr	w0, [x0]
   171f8:	str	w0, [sp, #84]
   171fc:	ldr	x0, [sp, #40]
   17200:	ldr	x1, [x0, #48]
   17204:	ldrsw	x0, [sp, #84]
   17208:	lsl	x0, x0, #4
   1720c:	add	x0, x1, x0
   17210:	str	x0, [sp, #72]
   17214:	ldr	w3, [sp, #24]
   17218:	ldr	w2, [sp, #28]
   1721c:	ldr	x1, [sp, #72]
   17220:	ldr	x0, [sp, #40]
   17224:	bl	166b0 <re_set_registers+0x59b0>
   17228:	str	w0, [sp, #68]
   1722c:	ldr	w0, [sp, #68]
   17230:	cmn	w0, #0x1
   17234:	b.ne	17274 <re_set_registers+0x6574>  // b.any
   17238:	add	x0, sp, #0x30
   1723c:	ldr	x1, [sp, #72]
   17240:	bl	634c <grub_mod_fini+0x5e2c>
   17244:	str	w0, [sp, #88]
   17248:	ldr	w0, [sp, #88]
   1724c:	cmp	w0, #0x0
   17250:	cset	w0, ne  // ne = any
   17254:	and	w0, w0, #0xff
   17258:	and	x0, x0, #0xff
   1725c:	cmp	x0, #0x0
   17260:	b.eq	172c0 <re_set_registers+0x65c0>  // b.none
   17264:	ldr	x0, [sp, #56]
   17268:	bl	2230 <grub_mod_fini+0x1d10>
   1726c:	ldr	w0, [sp, #88]
   17270:	b	172fc <re_set_registers+0x65fc>
   17274:	add	x0, sp, #0x30
   17278:	ldr	w4, [sp, #24]
   1727c:	ldr	w3, [sp, #28]
   17280:	ldr	w2, [sp, #84]
   17284:	mov	x1, x0
   17288:	ldr	x0, [sp, #40]
   1728c:	bl	17304 <re_set_registers+0x6604>
   17290:	str	w0, [sp, #88]
   17294:	ldr	w0, [sp, #88]
   17298:	cmp	w0, #0x0
   1729c:	cset	w0, ne  // ne = any
   172a0:	and	w0, w0, #0xff
   172a4:	and	x0, x0, #0xff
   172a8:	cmp	x0, #0x0
   172ac:	b.eq	172c0 <re_set_registers+0x65c0>  // b.none
   172b0:	ldr	x0, [sp, #56]
   172b4:	bl	2230 <grub_mod_fini+0x1d10>
   172b8:	ldr	w0, [sp, #88]
   172bc:	b	172fc <re_set_registers+0x65fc>
   172c0:	ldr	w0, [sp, #92]
   172c4:	add	w0, w0, #0x1
   172c8:	str	w0, [sp, #92]
   172cc:	ldr	x0, [sp, #32]
   172d0:	ldr	w0, [x0, #4]
   172d4:	ldr	w1, [sp, #92]
   172d8:	cmp	w1, w0
   172dc:	b.lt	171e0 <re_set_registers+0x64e0>  // b.tstop
   172e0:	ldr	x0, [sp, #32]
   172e4:	ldr	x0, [x0, #8]
   172e8:	bl	2230 <grub_mod_fini+0x1d10>
   172ec:	ldr	x2, [sp, #32]
   172f0:	ldp	x0, x1, [sp, #48]
   172f4:	stp	x0, x1, [x2]
   172f8:	mov	w0, #0x0                   	// #0
   172fc:	ldp	x29, x30, [sp], #96
   17300:	ret
   17304:	stp	x29, x30, [sp, #-64]!
   17308:	mov	x29, sp
   1730c:	str	x0, [sp, #40]
   17310:	str	x1, [sp, #32]
   17314:	str	w2, [sp, #28]
   17318:	str	w3, [sp, #24]
   1731c:	str	w4, [sp, #20]
   17320:	ldr	w0, [sp, #28]
   17324:	str	w0, [sp, #60]
   17328:	b	174a4 <re_set_registers+0x67a4>
   1732c:	ldr	x0, [sp, #40]
   17330:	ldr	x1, [x0]
   17334:	ldrsw	x0, [sp, #60]
   17338:	lsl	x0, x0, #4
   1733c:	add	x0, x1, x0
   17340:	ldrb	w0, [x0, #8]
   17344:	mov	w1, w0
   17348:	ldr	w0, [sp, #20]
   1734c:	cmp	w0, w1
   17350:	b.ne	173b4 <re_set_registers+0x66b4>  // b.any
   17354:	ldr	x0, [sp, #40]
   17358:	ldr	x1, [x0]
   1735c:	ldrsw	x0, [sp, #60]
   17360:	lsl	x0, x0, #4
   17364:	add	x0, x1, x0
   17368:	ldr	w0, [x0]
   1736c:	ldr	w1, [sp, #24]
   17370:	cmp	w1, w0
   17374:	b.ne	173b4 <re_set_registers+0x66b4>  // b.any
   17378:	ldr	w0, [sp, #20]
   1737c:	cmp	w0, #0x9
   17380:	b.ne	174bc <re_set_registers+0x67bc>  // b.any
   17384:	ldr	w1, [sp, #60]
   17388:	ldr	x0, [sp, #32]
   1738c:	bl	67b0 <grub_mod_fini+0x6290>
   17390:	strb	w0, [sp, #59]
   17394:	ldrb	w0, [sp, #59]
   17398:	eor	w0, w0, #0x1
   1739c:	and	w0, w0, #0xff
   173a0:	and	x0, x0, #0xff
   173a4:	cmp	x0, #0x0
   173a8:	b.eq	174bc <re_set_registers+0x67bc>  // b.none
   173ac:	mov	w0, #0xc                   	// #12
   173b0:	b	174cc <re_set_registers+0x67cc>
   173b4:	ldr	w1, [sp, #60]
   173b8:	ldr	x0, [sp, #32]
   173bc:	bl	67b0 <grub_mod_fini+0x6290>
   173c0:	strb	w0, [sp, #59]
   173c4:	ldrb	w0, [sp, #59]
   173c8:	eor	w0, w0, #0x1
   173cc:	and	w0, w0, #0xff
   173d0:	and	x0, x0, #0xff
   173d4:	cmp	x0, #0x0
   173d8:	b.eq	173e4 <re_set_registers+0x66e4>  // b.none
   173dc:	mov	w0, #0xc                   	// #12
   173e0:	b	174cc <re_set_registers+0x67cc>
   173e4:	ldr	x0, [sp, #40]
   173e8:	ldr	x1, [x0, #40]
   173ec:	ldrsw	x0, [sp, #60]
   173f0:	lsl	x0, x0, #4
   173f4:	add	x0, x1, x0
   173f8:	ldr	w0, [x0, #4]
   173fc:	cmp	w0, #0x0
   17400:	b.eq	174c4 <re_set_registers+0x67c4>  // b.none
   17404:	ldr	x0, [sp, #40]
   17408:	ldr	x1, [x0, #40]
   1740c:	ldrsw	x0, [sp, #60]
   17410:	lsl	x0, x0, #4
   17414:	add	x0, x1, x0
   17418:	ldr	w0, [x0, #4]
   1741c:	cmp	w0, #0x2
   17420:	b.ne	17484 <re_set_registers+0x6784>  // b.any
   17424:	ldr	x0, [sp, #40]
   17428:	ldr	x1, [x0, #40]
   1742c:	ldrsw	x0, [sp, #60]
   17430:	lsl	x0, x0, #4
   17434:	add	x0, x1, x0
   17438:	ldr	x0, [x0, #8]
   1743c:	add	x0, x0, #0x4
   17440:	ldr	w0, [x0]
   17444:	ldr	w4, [sp, #20]
   17448:	ldr	w3, [sp, #24]
   1744c:	mov	w2, w0
   17450:	ldr	x1, [sp, #32]
   17454:	ldr	x0, [sp, #40]
   17458:	bl	17304 <re_set_registers+0x6604>
   1745c:	str	w0, [sp, #52]
   17460:	ldr	w0, [sp, #52]
   17464:	cmp	w0, #0x0
   17468:	cset	w0, ne  // ne = any
   1746c:	and	w0, w0, #0xff
   17470:	and	x0, x0, #0xff
   17474:	cmp	x0, #0x0
   17478:	b.eq	17484 <re_set_registers+0x6784>  // b.none
   1747c:	ldr	w0, [sp, #52]
   17480:	b	174cc <re_set_registers+0x67cc>
   17484:	ldr	x0, [sp, #40]
   17488:	ldr	x1, [x0, #40]
   1748c:	ldrsw	x0, [sp, #60]
   17490:	lsl	x0, x0, #4
   17494:	add	x0, x1, x0
   17498:	ldr	x0, [x0, #8]
   1749c:	ldr	w0, [x0]
   174a0:	str	w0, [sp, #60]
   174a4:	ldr	w1, [sp, #60]
   174a8:	ldr	x0, [sp, #32]
   174ac:	bl	6b7c <grub_mod_fini+0x665c>
   174b0:	cmp	w0, #0x0
   174b4:	b.eq	1732c <re_set_registers+0x662c>  // b.none
   174b8:	b	174c8 <re_set_registers+0x67c8>
   174bc:	nop
   174c0:	b	174c8 <re_set_registers+0x67c8>
   174c4:	nop
   174c8:	mov	w0, #0x0                   	// #0
   174cc:	ldp	x29, x30, [sp], #64
   174d0:	ret
   174d4:	stp	x29, x30, [sp, #-144]!
   174d8:	mov	x29, sp
   174dc:	str	x19, [sp, #16]
   174e0:	str	x0, [sp, #56]
   174e4:	str	x1, [sp, #48]
   174e8:	str	w2, [sp, #44]
   174ec:	str	w3, [sp, #40]
   174f0:	str	w4, [sp, #36]
   174f4:	ldr	x0, [sp, #56]
   174f8:	ldr	x0, [x0, #112]
   174fc:	str	x0, [sp, #128]
   17500:	ldr	w1, [sp, #44]
   17504:	ldr	x0, [sp, #56]
   17508:	bl	19a54 <re_set_registers+0x8d54>
   1750c:	str	w0, [sp, #124]
   17510:	ldr	w0, [sp, #124]
   17514:	cmn	w0, #0x1
   17518:	b.ne	17524 <re_set_registers+0x6824>  // b.any
   1751c:	mov	w0, #0x0                   	// #0
   17520:	b	178b0 <re_set_registers+0x6bb0>
   17524:	nop
   17528:	ldr	x0, [sp, #56]
   1752c:	ldr	x2, [x0, #160]
   17530:	ldrsw	x1, [sp, #124]
   17534:	mov	x0, x1
   17538:	lsl	x0, x0, #2
   1753c:	add	x0, x0, x1
   17540:	lsl	x0, x0, #2
   17544:	add	x0, x2, x0
   17548:	str	x0, [sp, #136]
   1754c:	ldr	x0, [sp, #136]
   17550:	ldr	w0, [x0]
   17554:	mov	w1, w0
   17558:	ldr	x0, [sp, #48]
   1755c:	bl	6b7c <grub_mod_fini+0x665c>
   17560:	cmp	w0, #0x0
   17564:	b.eq	17880 <re_set_registers+0x6b80>  // b.none
   17568:	ldr	x0, [sp, #136]
   1756c:	ldr	w1, [x0, #12]
   17570:	ldr	w0, [sp, #44]
   17574:	add	w1, w1, w0
   17578:	ldr	x0, [sp, #136]
   1757c:	ldr	w0, [x0, #8]
   17580:	sub	w0, w1, w0
   17584:	str	w0, [sp, #120]
   17588:	ldr	w1, [sp, #120]
   1758c:	ldr	w0, [sp, #44]
   17590:	cmp	w1, w0
   17594:	b.ne	176bc <re_set_registers+0x69bc>  // b.any
   17598:	ldr	x0, [sp, #128]
   1759c:	ldr	x1, [x0, #40]
   175a0:	ldr	x0, [sp, #136]
   175a4:	ldr	w0, [x0]
   175a8:	sxtw	x0, w0
   175ac:	lsl	x0, x0, #4
   175b0:	add	x0, x1, x0
   175b4:	ldr	x0, [x0, #8]
   175b8:	ldr	w0, [x0]
   175bc:	str	w0, [sp, #116]
   175c0:	ldr	w1, [sp, #116]
   175c4:	ldr	x0, [sp, #48]
   175c8:	bl	6b7c <grub_mod_fini+0x665c>
   175cc:	cmp	w0, #0x0
   175d0:	b.ne	17888 <re_set_registers+0x6b88>  // b.any
   175d4:	add	x0, sp, #0x50
   175d8:	ldr	w1, [sp, #116]
   175dc:	bl	589c <grub_mod_fini+0x537c>
   175e0:	str	w0, [sp, #100]
   175e4:	add	x0, sp, #0x50
   175e8:	ldr	w3, [sp, #36]
   175ec:	ldr	w2, [sp, #40]
   175f0:	mov	x1, x0
   175f4:	ldr	x0, [sp, #128]
   175f8:	bl	17188 <re_set_registers+0x6488>
   175fc:	str	w0, [sp, #108]
   17600:	add	x0, sp, #0x50
   17604:	mov	x1, x0
   17608:	ldr	x0, [sp, #48]
   1760c:	bl	634c <grub_mod_fini+0x5e2c>
   17610:	str	w0, [sp, #104]
   17614:	ldr	x0, [sp, #88]
   17618:	bl	2230 <grub_mod_fini+0x1d10>
   1761c:	ldr	w0, [sp, #100]
   17620:	cmp	w0, #0x0
   17624:	cset	w0, ne  // ne = any
   17628:	and	w0, w0, #0xff
   1762c:	and	x0, x0, #0xff
   17630:	cmp	x0, #0x0
   17634:	b.ne	17654 <re_set_registers+0x6954>  // b.any
   17638:	ldr	w0, [sp, #108]
   1763c:	cmp	w0, #0x0
   17640:	cset	w0, ne  // ne = any
   17644:	and	w0, w0, #0xff
   17648:	and	x0, x0, #0xff
   1764c:	cmp	x0, #0x0
   17650:	b.eq	1765c <re_set_registers+0x695c>  // b.none
   17654:	mov	w0, #0x1                   	// #1
   17658:	b	17660 <re_set_registers+0x6960>
   1765c:	mov	w0, #0x0                   	// #0
   17660:	cmp	w0, #0x0
   17664:	b.ne	17684 <re_set_registers+0x6984>  // b.any
   17668:	ldr	w0, [sp, #104]
   1766c:	cmp	w0, #0x0
   17670:	cset	w0, ne  // ne = any
   17674:	and	w0, w0, #0xff
   17678:	and	x0, x0, #0xff
   1767c:	cmp	x0, #0x0
   17680:	b.eq	17528 <re_set_registers+0x6828>  // b.none
   17684:	ldr	w0, [sp, #100]
   17688:	cmp	w0, #0x0
   1768c:	b.ne	176ac <re_set_registers+0x69ac>  // b.any
   17690:	ldr	w0, [sp, #108]
   17694:	cmp	w0, #0x0
   17698:	b.eq	176a4 <re_set_registers+0x69a4>  // b.none
   1769c:	ldr	w0, [sp, #108]
   176a0:	b	176b0 <re_set_registers+0x69b0>
   176a4:	ldr	w0, [sp, #104]
   176a8:	b	176b0 <re_set_registers+0x69b0>
   176ac:	ldr	w0, [sp, #100]
   176b0:	str	w0, [sp, #100]
   176b4:	ldr	w0, [sp, #100]
   176b8:	b	178b0 <re_set_registers+0x6bb0>
   176bc:	ldr	x0, [sp, #128]
   176c0:	ldr	x1, [x0, #24]
   176c4:	ldr	x0, [sp, #136]
   176c8:	ldr	w0, [x0]
   176cc:	sxtw	x0, w0
   176d0:	lsl	x0, x0, #2
   176d4:	add	x0, x1, x0
   176d8:	ldr	w0, [x0]
   176dc:	str	w0, [sp, #116]
   176e0:	ldr	x0, [sp, #56]
   176e4:	ldr	x1, [x0, #136]
   176e8:	ldrsw	x0, [sp, #120]
   176ec:	lsl	x0, x0, #3
   176f0:	add	x0, x1, x0
   176f4:	ldr	x0, [x0]
   176f8:	cmp	x0, #0x0
   176fc:	b.eq	177c4 <re_set_registers+0x6ac4>  // b.none
   17700:	ldr	x0, [sp, #56]
   17704:	ldr	x1, [x0, #136]
   17708:	ldrsw	x0, [sp, #120]
   1770c:	lsl	x0, x0, #3
   17710:	add	x0, x1, x0
   17714:	ldr	x0, [x0]
   17718:	add	x0, x0, #0x8
   1771c:	ldr	w1, [sp, #116]
   17720:	bl	6b7c <grub_mod_fini+0x665c>
   17724:	cmp	w0, #0x0
   17728:	b.ne	17890 <re_set_registers+0x6b90>  // b.any
   1772c:	ldr	x0, [sp, #56]
   17730:	ldr	x1, [x0, #136]
   17734:	ldrsw	x0, [sp, #120]
   17738:	lsl	x0, x0, #3
   1773c:	add	x0, x1, x0
   17740:	ldr	x0, [x0]
   17744:	add	x1, x0, #0x8
   17748:	add	x0, sp, #0x40
   1774c:	bl	5a34 <grub_mod_fini+0x5514>
   17750:	str	w0, [sp, #100]
   17754:	add	x0, sp, #0x40
   17758:	ldr	w1, [sp, #116]
   1775c:	bl	67b0 <grub_mod_fini+0x6290>
   17760:	strb	w0, [sp, #115]
   17764:	ldr	w0, [sp, #100]
   17768:	cmp	w0, #0x0
   1776c:	cset	w0, ne  // ne = any
   17770:	and	w0, w0, #0xff
   17774:	and	x0, x0, #0xff
   17778:	cmp	x0, #0x0
   1777c:	b.ne	17798 <re_set_registers+0x6a98>  // b.any
   17780:	ldrb	w0, [sp, #115]
   17784:	eor	w0, w0, #0x1
   17788:	and	w0, w0, #0xff
   1778c:	and	x0, x0, #0xff
   17790:	cmp	x0, #0x0
   17794:	b.eq	177f8 <re_set_registers+0x6af8>  // b.none
   17798:	ldr	x0, [sp, #72]
   1779c:	bl	2230 <grub_mod_fini+0x1d10>
   177a0:	ldr	w0, [sp, #100]
   177a4:	cmp	w0, #0x0
   177a8:	b.eq	177b4 <re_set_registers+0x6ab4>  // b.none
   177ac:	ldr	w0, [sp, #100]
   177b0:	b	177b8 <re_set_registers+0x6ab8>
   177b4:	mov	w0, #0xc                   	// #12
   177b8:	str	w0, [sp, #100]
   177bc:	ldr	w0, [sp, #100]
   177c0:	b	178b0 <re_set_registers+0x6bb0>
   177c4:	add	x0, sp, #0x40
   177c8:	ldr	w1, [sp, #116]
   177cc:	bl	589c <grub_mod_fini+0x537c>
   177d0:	str	w0, [sp, #100]
   177d4:	ldr	w0, [sp, #100]
   177d8:	cmp	w0, #0x0
   177dc:	cset	w0, ne  // ne = any
   177e0:	and	w0, w0, #0xff
   177e4:	and	x0, x0, #0xff
   177e8:	cmp	x0, #0x0
   177ec:	b.eq	177f8 <re_set_registers+0x6af8>  // b.none
   177f0:	ldr	w0, [sp, #100]
   177f4:	b	178b0 <re_set_registers+0x6bb0>
   177f8:	ldr	x0, [sp, #56]
   177fc:	ldr	x1, [x0, #136]
   17800:	ldrsw	x0, [sp, #120]
   17804:	lsl	x0, x0, #3
   17808:	add	x19, x1, x0
   1780c:	add	x1, sp, #0x40
   17810:	add	x0, sp, #0x64
   17814:	mov	x2, x1
   17818:	ldr	x1, [sp, #128]
   1781c:	bl	7104 <grub_mod_fini+0x6be4>
   17820:	str	x0, [x19]
   17824:	ldr	x0, [sp, #72]
   17828:	bl	2230 <grub_mod_fini+0x1d10>
   1782c:	ldr	x0, [sp, #56]
   17830:	ldr	x1, [x0, #136]
   17834:	ldrsw	x0, [sp, #120]
   17838:	lsl	x0, x0, #3
   1783c:	add	x0, x1, x0
   17840:	ldr	x0, [x0]
   17844:	cmp	x0, #0x0
   17848:	cset	w0, eq  // eq = none
   1784c:	and	w0, w0, #0xff
   17850:	and	x0, x0, #0xff
   17854:	cmp	x0, #0x0
   17858:	b.eq	17894 <re_set_registers+0x6b94>  // b.none
   1785c:	ldr	w0, [sp, #100]
   17860:	cmp	w0, #0x0
   17864:	cset	w0, ne  // ne = any
   17868:	and	w0, w0, #0xff
   1786c:	and	x0, x0, #0xff
   17870:	cmp	x0, #0x0
   17874:	b.eq	17894 <re_set_registers+0x6b94>  // b.none
   17878:	ldr	w0, [sp, #100]
   1787c:	b	178b0 <re_set_registers+0x6bb0>
   17880:	nop
   17884:	b	17894 <re_set_registers+0x6b94>
   17888:	nop
   1788c:	b	17894 <re_set_registers+0x6b94>
   17890:	nop
   17894:	ldr	x0, [sp, #136]
   17898:	add	x1, x0, #0x14
   1789c:	str	x1, [sp, #136]
   178a0:	ldrb	w0, [x0, #16]
   178a4:	cmp	w0, #0x0
   178a8:	b.ne	1754c <re_set_registers+0x684c>  // b.any
   178ac:	mov	w0, #0x0                   	// #0
   178b0:	ldr	x19, [sp, #16]
   178b4:	ldp	x29, x30, [sp], #144
   178b8:	ret
   178bc:	stp	x29, x30, [sp, #-224]!
   178c0:	mov	x29, sp
   178c4:	str	x19, [sp, #16]
   178c8:	str	x0, [sp, #40]
   178cc:	str	x1, [sp, #32]
   178d0:	strb	wzr, [sp, #211]
   178d4:	strb	wzr, [sp, #167]
   178d8:	strb	wzr, [sp, #191]
   178dc:	str	xzr, [sp, #168]
   178e0:	mov	x0, #0x3000                	// #12288
   178e4:	bl	2250 <grub_mod_fini+0x1d30>
   178e8:	str	x0, [sp, #152]
   178ec:	ldr	x0, [sp, #152]
   178f0:	cmp	x0, #0x0
   178f4:	cset	w0, eq  // eq = none
   178f8:	and	w0, w0, #0xff
   178fc:	and	x0, x0, #0xff
   17900:	cmp	x0, #0x0
   17904:	b.eq	17910 <re_set_registers+0x6c10>  // b.none
   17908:	mov	w0, #0x0                   	// #0
   1790c:	b	182a0 <re_set_registers+0x75a0>
   17910:	mov	w0, #0x1                   	// #1
   17914:	strb	w0, [sp, #167]
   17918:	ldr	x0, [sp, #152]
   1791c:	str	x0, [sp, #144]
   17920:	ldr	x0, [sp, #152]
   17924:	add	x0, x0, #0x1, lsl #12
   17928:	str	x0, [sp, #136]
   1792c:	ldr	x0, [sp, #32]
   17930:	str	xzr, [x0, #64]
   17934:	ldr	x0, [sp, #32]
   17938:	ldr	x1, [x0, #64]
   1793c:	ldr	x0, [sp, #32]
   17940:	str	x1, [x0, #72]
   17944:	ldr	x3, [sp, #136]
   17948:	ldr	x2, [sp, #144]
   1794c:	ldr	x1, [sp, #32]
   17950:	ldr	x0, [sp, #40]
   17954:	bl	182ac <re_set_registers+0x75ac>
   17958:	str	w0, [sp, #132]
   1795c:	ldr	w0, [sp, #132]
   17960:	cmp	w0, #0x0
   17964:	cset	w0, le
   17968:	and	w0, w0, #0xff
   1796c:	and	x0, x0, #0xff
   17970:	cmp	x0, #0x0
   17974:	b.eq	179e8 <re_set_registers+0x6ce8>  // b.none
   17978:	ldrb	w0, [sp, #167]
   1797c:	cmp	w0, #0x0
   17980:	b.eq	1798c <re_set_registers+0x6c8c>  // b.none
   17984:	ldr	x0, [sp, #152]
   17988:	bl	2230 <grub_mod_fini+0x1d10>
   1798c:	ldr	w0, [sp, #132]
   17990:	cmp	w0, #0x0
   17994:	b.ne	179e0 <re_set_registers+0x6ce0>  // b.any
   17998:	mov	x1, #0x100                 	// #256
   1799c:	mov	x0, #0x8                   	// #8
   179a0:	bl	226c <grub_mod_fini+0x1d4c>
   179a4:	mov	x1, x0
   179a8:	ldr	x0, [sp, #32]
   179ac:	str	x1, [x0, #64]
   179b0:	ldr	x0, [sp, #32]
   179b4:	ldr	x0, [x0, #64]
   179b8:	cmp	x0, #0x0
   179bc:	cset	w0, eq  // eq = none
   179c0:	and	w0, w0, #0xff
   179c4:	and	x0, x0, #0xff
   179c8:	cmp	x0, #0x0
   179cc:	b.eq	179d8 <re_set_registers+0x6cd8>  // b.none
   179d0:	mov	w0, #0x0                   	// #0
   179d4:	b	182a0 <re_set_registers+0x75a0>
   179d8:	mov	w0, #0x1                   	// #1
   179dc:	b	182a0 <re_set_registers+0x75a0>
   179e0:	mov	w0, #0x0                   	// #0
   179e4:	b	182a0 <re_set_registers+0x75a0>
   179e8:	ldr	w0, [sp, #132]
   179ec:	add	w1, w0, #0x1
   179f0:	add	x0, sp, #0x50
   179f4:	bl	5820 <grub_mod_fini+0x5300>
   179f8:	str	w0, [sp, #96]
   179fc:	ldr	w0, [sp, #96]
   17a00:	cmp	w0, #0x0
   17a04:	cset	w0, ne  // ne = any
   17a08:	and	w0, w0, #0xff
   17a0c:	and	x0, x0, #0xff
   17a10:	cmp	x0, #0x0
   17a14:	b.ne	17a8c <re_set_registers+0x6d8c>  // b.any
   17a18:	mov	x0, #0xa8aa                	// #43178
   17a1c:	movk	x0, #0xaaaa, lsl #16
   17a20:	movk	x0, #0xaaaa, lsl #32
   17a24:	movk	x0, #0xaaa, lsl #48
   17a28:	str	x0, [sp, #120]
   17a2c:	ldrsw	x0, [sp, #132]
   17a30:	ldr	x1, [sp, #120]
   17a34:	cmp	x1, x0
   17a38:	cset	w0, cc  // cc = lo, ul, last
   17a3c:	and	w0, w0, #0xff
   17a40:	and	x0, x0, #0xff
   17a44:	cmp	x0, #0x0
   17a48:	b.ne	17a94 <re_set_registers+0x6d94>  // b.any
   17a4c:	ldr	w1, [sp, #132]
   17a50:	mov	w0, w1
   17a54:	lsl	w0, w0, #1
   17a58:	add	w0, w0, w1
   17a5c:	sxtw	x0, w0
   17a60:	lsl	x0, x0, #3
   17a64:	bl	2250 <grub_mod_fini+0x1d30>
   17a68:	str	x0, [sp, #168]
   17a6c:	ldr	x0, [sp, #168]
   17a70:	cmp	x0, #0x0
   17a74:	cset	w0, eq  // eq = none
   17a78:	and	w0, w0, #0xff
   17a7c:	and	x0, x0, #0xff
   17a80:	cmp	x0, #0x0
   17a84:	b.eq	17b34 <re_set_registers+0x6e34>  // b.none
   17a88:	b	17ac0 <re_set_registers+0x6dc0>
   17a8c:	nop
   17a90:	b	17ac0 <re_set_registers+0x6dc0>
   17a94:	nop
   17a98:	b	17ac0 <re_set_registers+0x6dc0>
   17a9c:	nop
   17aa0:	b	17ac0 <re_set_registers+0x6dc0>
   17aa4:	nop
   17aa8:	b	17ac0 <re_set_registers+0x6dc0>
   17aac:	nop
   17ab0:	b	17ac0 <re_set_registers+0x6dc0>
   17ab4:	nop
   17ab8:	b	17ac0 <re_set_registers+0x6dc0>
   17abc:	nop
   17ac0:	ldrb	w0, [sp, #191]
   17ac4:	cmp	w0, #0x0
   17ac8:	b.eq	17ad4 <re_set_registers+0x6dd4>  // b.none
   17acc:	ldr	x0, [sp, #168]
   17ad0:	bl	2230 <grub_mod_fini+0x1d10>
   17ad4:	ldr	x0, [sp, #88]
   17ad8:	bl	2230 <grub_mod_fini+0x1d10>
   17adc:	str	wzr, [sp, #220]
   17ae0:	b	17b08 <re_set_registers+0x6e08>
   17ae4:	ldrsw	x0, [sp, #220]
   17ae8:	lsl	x0, x0, #4
   17aec:	ldr	x1, [sp, #144]
   17af0:	add	x0, x1, x0
   17af4:	ldr	x0, [x0, #8]
   17af8:	bl	2230 <grub_mod_fini+0x1d10>
   17afc:	ldr	w0, [sp, #220]
   17b00:	add	w0, w0, #0x1
   17b04:	str	w0, [sp, #220]
   17b08:	ldr	w1, [sp, #220]
   17b0c:	ldr	w0, [sp, #132]
   17b10:	cmp	w1, w0
   17b14:	b.lt	17ae4 <re_set_registers+0x6de4>  // b.tstop
   17b18:	ldrb	w0, [sp, #167]
   17b1c:	cmp	w0, #0x0
   17b20:	b.eq	17b2c <re_set_registers+0x6e2c>  // b.none
   17b24:	ldr	x0, [sp, #152]
   17b28:	bl	2230 <grub_mod_fini+0x1d10>
   17b2c:	mov	w0, #0x0                   	// #0
   17b30:	b	182a0 <re_set_registers+0x75a0>
   17b34:	mov	w0, #0x1                   	// #1
   17b38:	strb	w0, [sp, #191]
   17b3c:	ldrsw	x0, [sp, #132]
   17b40:	lsl	x0, x0, #3
   17b44:	ldr	x1, [sp, #168]
   17b48:	add	x0, x1, x0
   17b4c:	str	x0, [sp, #112]
   17b50:	ldrsw	x0, [sp, #132]
   17b54:	lsl	x0, x0, #3
   17b58:	ldr	x1, [sp, #112]
   17b5c:	add	x0, x1, x0
   17b60:	str	x0, [sp, #104]
   17b64:	add	x0, sp, #0x30
   17b68:	bl	2b4c <grub_mod_fini+0x262c>
   17b6c:	str	wzr, [sp, #220]
   17b70:	b	17e78 <re_set_registers+0x7178>
   17b74:	str	wzr, [sp, #84]
   17b78:	str	wzr, [sp, #216]
   17b7c:	b	17c14 <re_set_registers+0x6f14>
   17b80:	ldr	x0, [sp, #40]
   17b84:	ldr	x1, [x0, #24]
   17b88:	ldrsw	x0, [sp, #220]
   17b8c:	lsl	x0, x0, #4
   17b90:	ldr	x2, [sp, #144]
   17b94:	add	x0, x2, x0
   17b98:	ldr	x2, [x0, #8]
   17b9c:	ldrsw	x0, [sp, #216]
   17ba0:	lsl	x0, x0, #2
   17ba4:	add	x0, x2, x0
   17ba8:	ldr	w0, [x0]
   17bac:	sxtw	x0, w0
   17bb0:	lsl	x0, x0, #2
   17bb4:	add	x0, x1, x0
   17bb8:	ldr	w0, [x0]
   17bbc:	str	w0, [sp, #100]
   17bc0:	ldr	w0, [sp, #100]
   17bc4:	cmn	w0, #0x1
   17bc8:	b.eq	17c08 <re_set_registers+0x6f08>  // b.none
   17bcc:	ldr	x0, [sp, #40]
   17bd0:	ldr	x1, [x0, #48]
   17bd4:	ldrsw	x0, [sp, #100]
   17bd8:	lsl	x0, x0, #4
   17bdc:	add	x1, x1, x0
   17be0:	add	x0, sp, #0x50
   17be4:	bl	634c <grub_mod_fini+0x5e2c>
   17be8:	str	w0, [sp, #96]
   17bec:	ldr	w0, [sp, #96]
   17bf0:	cmp	w0, #0x0
   17bf4:	cset	w0, ne  // ne = any
   17bf8:	and	w0, w0, #0xff
   17bfc:	and	x0, x0, #0xff
   17c00:	cmp	x0, #0x0
   17c04:	b.ne	17a9c <re_set_registers+0x6d9c>  // b.any
   17c08:	ldr	w0, [sp, #216]
   17c0c:	add	w0, w0, #0x1
   17c10:	str	w0, [sp, #216]
   17c14:	ldrsw	x0, [sp, #220]
   17c18:	lsl	x0, x0, #4
   17c1c:	ldr	x1, [sp, #144]
   17c20:	add	x0, x1, x0
   17c24:	ldr	w0, [x0, #4]
   17c28:	ldr	w1, [sp, #216]
   17c2c:	cmp	w1, w0
   17c30:	b.lt	17b80 <re_set_registers+0x6e80>  // b.tstop
   17c34:	ldrsw	x0, [sp, #220]
   17c38:	lsl	x0, x0, #3
   17c3c:	ldr	x1, [sp, #168]
   17c40:	add	x19, x1, x0
   17c44:	add	x1, sp, #0x50
   17c48:	add	x0, sp, #0x60
   17c4c:	mov	w3, #0x0                   	// #0
   17c50:	mov	x2, x1
   17c54:	ldr	x1, [sp, #40]
   17c58:	bl	7248 <grub_mod_fini+0x6d28>
   17c5c:	str	x0, [x19]
   17c60:	ldrsw	x0, [sp, #220]
   17c64:	lsl	x0, x0, #3
   17c68:	ldr	x1, [sp, #168]
   17c6c:	add	x0, x1, x0
   17c70:	ldr	x0, [x0]
   17c74:	cmp	x0, #0x0
   17c78:	cset	w0, eq  // eq = none
   17c7c:	and	w0, w0, #0xff
   17c80:	and	x0, x0, #0xff
   17c84:	cmp	x0, #0x0
   17c88:	b.eq	17ca8 <re_set_registers+0x6fa8>  // b.none
   17c8c:	ldr	w0, [sp, #96]
   17c90:	cmp	w0, #0x0
   17c94:	cset	w0, ne  // ne = any
   17c98:	and	w0, w0, #0xff
   17c9c:	and	x0, x0, #0xff
   17ca0:	cmp	x0, #0x0
   17ca4:	b.ne	17aa4 <re_set_registers+0x6da4>  // b.any
   17ca8:	ldrsw	x0, [sp, #220]
   17cac:	lsl	x0, x0, #3
   17cb0:	ldr	x1, [sp, #168]
   17cb4:	add	x0, x1, x0
   17cb8:	ldr	x0, [x0]
   17cbc:	ldrb	w0, [x0, #80]
   17cc0:	and	w0, w0, #0xffffff80
   17cc4:	and	w0, w0, #0xff
   17cc8:	cmp	w0, #0x0
   17ccc:	b.eq	17e04 <re_set_registers+0x7104>  // b.none
   17cd0:	ldrsw	x0, [sp, #220]
   17cd4:	lsl	x0, x0, #3
   17cd8:	ldr	x1, [sp, #112]
   17cdc:	add	x19, x1, x0
   17ce0:	add	x1, sp, #0x50
   17ce4:	add	x0, sp, #0x60
   17ce8:	mov	w3, #0x1                   	// #1
   17cec:	mov	x2, x1
   17cf0:	ldr	x1, [sp, #40]
   17cf4:	bl	7248 <grub_mod_fini+0x6d28>
   17cf8:	str	x0, [x19]
   17cfc:	ldrsw	x0, [sp, #220]
   17d00:	lsl	x0, x0, #3
   17d04:	ldr	x1, [sp, #112]
   17d08:	add	x0, x1, x0
   17d0c:	ldr	x0, [x0]
   17d10:	cmp	x0, #0x0
   17d14:	cset	w0, eq  // eq = none
   17d18:	and	w0, w0, #0xff
   17d1c:	and	x0, x0, #0xff
   17d20:	cmp	x0, #0x0
   17d24:	b.eq	17d44 <re_set_registers+0x7044>  // b.none
   17d28:	ldr	w0, [sp, #96]
   17d2c:	cmp	w0, #0x0
   17d30:	cset	w0, ne  // ne = any
   17d34:	and	w0, w0, #0xff
   17d38:	and	x0, x0, #0xff
   17d3c:	cmp	x0, #0x0
   17d40:	b.ne	17aac <re_set_registers+0x6dac>  // b.any
   17d44:	ldrsw	x0, [sp, #220]
   17d48:	lsl	x0, x0, #3
   17d4c:	ldr	x1, [sp, #168]
   17d50:	add	x0, x1, x0
   17d54:	ldr	x1, [x0]
   17d58:	ldrsw	x0, [sp, #220]
   17d5c:	lsl	x0, x0, #3
   17d60:	ldr	x2, [sp, #112]
   17d64:	add	x0, x2, x0
   17d68:	ldr	x0, [x0]
   17d6c:	cmp	x1, x0
   17d70:	b.eq	17d8c <re_set_registers+0x708c>  // b.none
   17d74:	ldr	x0, [sp, #40]
   17d78:	ldr	w0, [x0, #164]
   17d7c:	cmp	w0, #0x1
   17d80:	b.le	17d8c <re_set_registers+0x708c>
   17d84:	mov	w0, #0x1                   	// #1
   17d88:	strb	w0, [sp, #211]
   17d8c:	ldrsw	x0, [sp, #220]
   17d90:	lsl	x0, x0, #3
   17d94:	ldr	x1, [sp, #104]
   17d98:	add	x19, x1, x0
   17d9c:	add	x1, sp, #0x50
   17da0:	add	x0, sp, #0x60
   17da4:	mov	w3, #0x2                   	// #2
   17da8:	mov	x2, x1
   17dac:	ldr	x1, [sp, #40]
   17db0:	bl	7248 <grub_mod_fini+0x6d28>
   17db4:	str	x0, [x19]
   17db8:	ldrsw	x0, [sp, #220]
   17dbc:	lsl	x0, x0, #3
   17dc0:	ldr	x1, [sp, #104]
   17dc4:	add	x0, x1, x0
   17dc8:	ldr	x0, [x0]
   17dcc:	cmp	x0, #0x0
   17dd0:	cset	w0, eq  // eq = none
   17dd4:	and	w0, w0, #0xff
   17dd8:	and	x0, x0, #0xff
   17ddc:	cmp	x0, #0x0
   17de0:	b.eq	17e54 <re_set_registers+0x7154>  // b.none
   17de4:	ldr	w0, [sp, #96]
   17de8:	cmp	w0, #0x0
   17dec:	cset	w0, ne  // ne = any
   17df0:	and	w0, w0, #0xff
   17df4:	and	x0, x0, #0xff
   17df8:	cmp	x0, #0x0
   17dfc:	b.eq	17e54 <re_set_registers+0x7154>  // b.none
   17e00:	b	17ac0 <re_set_registers+0x6dc0>
   17e04:	ldrsw	x0, [sp, #220]
   17e08:	lsl	x0, x0, #3
   17e0c:	ldr	x1, [sp, #168]
   17e10:	add	x1, x1, x0
   17e14:	ldrsw	x0, [sp, #220]
   17e18:	lsl	x0, x0, #3
   17e1c:	ldr	x2, [sp, #112]
   17e20:	add	x0, x2, x0
   17e24:	ldr	x1, [x1]
   17e28:	str	x1, [x0]
   17e2c:	ldrsw	x0, [sp, #220]
   17e30:	lsl	x0, x0, #3
   17e34:	ldr	x1, [sp, #168]
   17e38:	add	x1, x1, x0
   17e3c:	ldrsw	x0, [sp, #220]
   17e40:	lsl	x0, x0, #3
   17e44:	ldr	x2, [sp, #104]
   17e48:	add	x0, x2, x0
   17e4c:	ldr	x1, [x1]
   17e50:	str	x1, [x0]
   17e54:	ldrsw	x0, [sp, #220]
   17e58:	lsl	x0, x0, #5
   17e5c:	ldr	x1, [sp, #136]
   17e60:	add	x1, x1, x0
   17e64:	add	x0, sp, #0x30
   17e68:	bl	2c2c <grub_mod_fini+0x270c>
   17e6c:	ldr	w0, [sp, #220]
   17e70:	add	w0, w0, #0x1
   17e74:	str	w0, [sp, #220]
   17e78:	ldr	w1, [sp, #220]
   17e7c:	ldr	w0, [sp, #132]
   17e80:	cmp	w1, w0
   17e84:	b.lt	17b74 <re_set_registers+0x6e74>  // b.tstop
   17e88:	ldrb	w0, [sp, #211]
   17e8c:	cmp	x0, #0x0
   17e90:	b.ne	1801c <re_set_registers+0x731c>  // b.any
   17e94:	mov	x1, #0x100                 	// #256
   17e98:	mov	x0, #0x8                   	// #8
   17e9c:	bl	226c <grub_mod_fini+0x1d4c>
   17ea0:	mov	x1, x0
   17ea4:	ldr	x0, [sp, #32]
   17ea8:	str	x1, [x0, #64]
   17eac:	ldr	x0, [sp, #32]
   17eb0:	ldr	x0, [x0, #64]
   17eb4:	str	x0, [sp, #176]
   17eb8:	ldr	x0, [sp, #176]
   17ebc:	cmp	x0, #0x0
   17ec0:	cset	w0, eq  // eq = none
   17ec4:	and	w0, w0, #0xff
   17ec8:	and	x0, x0, #0xff
   17ecc:	cmp	x0, #0x0
   17ed0:	b.ne	17ab4 <re_set_registers+0x6db4>  // b.any
   17ed4:	str	wzr, [sp, #220]
   17ed8:	b	1800c <re_set_registers+0x730c>
   17edc:	ldr	w0, [sp, #220]
   17ee0:	lsl	w0, w0, #6
   17ee4:	str	w0, [sp, #212]
   17ee8:	ldrsw	x0, [sp, #220]
   17eec:	lsl	x0, x0, #3
   17ef0:	add	x1, sp, #0x30
   17ef4:	ldr	x0, [x1, x0]
   17ef8:	str	x0, [sp, #200]
   17efc:	mov	x0, #0x1                   	// #1
   17f00:	str	x0, [sp, #192]
   17f04:	b	17ff4 <re_set_registers+0x72f4>
   17f08:	ldr	x0, [sp, #200]
   17f0c:	and	x0, x0, #0x1
   17f10:	cmp	x0, #0x0
   17f14:	b.eq	17fd0 <re_set_registers+0x72d0>  // b.none
   17f18:	str	wzr, [sp, #216]
   17f1c:	b	17f2c <re_set_registers+0x722c>
   17f20:	ldr	w0, [sp, #216]
   17f24:	add	w0, w0, #0x1
   17f28:	str	w0, [sp, #216]
   17f2c:	ldrsw	x0, [sp, #216]
   17f30:	lsl	x0, x0, #5
   17f34:	ldr	x1, [sp, #136]
   17f38:	add	x0, x1, x0
   17f3c:	ldrsw	x1, [sp, #220]
   17f40:	ldr	x1, [x0, x1, lsl #3]
   17f44:	ldr	x0, [sp, #192]
   17f48:	and	x0, x1, x0
   17f4c:	cmp	x0, #0x0
   17f50:	b.eq	17f20 <re_set_registers+0x7220>  // b.none
   17f54:	ldr	x1, [sp, #40]
   17f58:	ldrsw	x0, [sp, #220]
   17f5c:	add	x0, x0, #0x14
   17f60:	lsl	x0, x0, #3
   17f64:	add	x0, x1, x0
   17f68:	ldr	x1, [x0, #8]
   17f6c:	ldr	x0, [sp, #192]
   17f70:	and	x0, x1, x0
   17f74:	cmp	x0, #0x0
   17f78:	b.eq	17fa8 <re_set_registers+0x72a8>  // b.none
   17f7c:	ldrsw	x0, [sp, #216]
   17f80:	lsl	x0, x0, #3
   17f84:	ldr	x1, [sp, #112]
   17f88:	add	x1, x1, x0
   17f8c:	ldrsw	x0, [sp, #212]
   17f90:	lsl	x0, x0, #3
   17f94:	ldr	x2, [sp, #176]
   17f98:	add	x0, x2, x0
   17f9c:	ldr	x1, [x1]
   17fa0:	str	x1, [x0]
   17fa4:	b	17fd0 <re_set_registers+0x72d0>
   17fa8:	ldrsw	x0, [sp, #216]
   17fac:	lsl	x0, x0, #3
   17fb0:	ldr	x1, [sp, #168]
   17fb4:	add	x1, x1, x0
   17fb8:	ldrsw	x0, [sp, #212]
   17fbc:	lsl	x0, x0, #3
   17fc0:	ldr	x2, [sp, #176]
   17fc4:	add	x0, x2, x0
   17fc8:	ldr	x1, [x1]
   17fcc:	str	x1, [x0]
   17fd0:	ldr	x0, [sp, #192]
   17fd4:	lsl	x0, x0, #1
   17fd8:	str	x0, [sp, #192]
   17fdc:	ldr	x0, [sp, #200]
   17fe0:	lsr	x0, x0, #1
   17fe4:	str	x0, [sp, #200]
   17fe8:	ldr	w0, [sp, #212]
   17fec:	add	w0, w0, #0x1
   17ff0:	str	w0, [sp, #212]
   17ff4:	ldr	x0, [sp, #200]
   17ff8:	cmp	x0, #0x0
   17ffc:	b.ne	17f08 <re_set_registers+0x7208>  // b.any
   18000:	ldr	w0, [sp, #220]
   18004:	add	w0, w0, #0x1
   18008:	str	w0, [sp, #220]
   1800c:	ldr	w0, [sp, #220]
   18010:	cmp	w0, #0x3
   18014:	b.le	17edc <re_set_registers+0x71dc>
   18018:	b	18178 <re_set_registers+0x7478>
   1801c:	mov	x1, #0x200                 	// #512
   18020:	mov	x0, #0x8                   	// #8
   18024:	bl	226c <grub_mod_fini+0x1d4c>
   18028:	mov	x1, x0
   1802c:	ldr	x0, [sp, #32]
   18030:	str	x1, [x0, #72]
   18034:	ldr	x0, [sp, #32]
   18038:	ldr	x0, [x0, #72]
   1803c:	str	x0, [sp, #176]
   18040:	ldr	x0, [sp, #176]
   18044:	cmp	x0, #0x0
   18048:	cset	w0, eq  // eq = none
   1804c:	and	w0, w0, #0xff
   18050:	and	x0, x0, #0xff
   18054:	cmp	x0, #0x0
   18058:	b.ne	17abc <re_set_registers+0x6dbc>  // b.any
   1805c:	str	wzr, [sp, #220]
   18060:	b	1816c <re_set_registers+0x746c>
   18064:	ldr	w0, [sp, #220]
   18068:	lsl	w0, w0, #6
   1806c:	str	w0, [sp, #212]
   18070:	ldrsw	x0, [sp, #220]
   18074:	lsl	x0, x0, #3
   18078:	add	x1, sp, #0x30
   1807c:	ldr	x0, [x1, x0]
   18080:	str	x0, [sp, #200]
   18084:	mov	x0, #0x1                   	// #1
   18088:	str	x0, [sp, #192]
   1808c:	b	18154 <re_set_registers+0x7454>
   18090:	ldr	x0, [sp, #200]
   18094:	and	x0, x0, #0x1
   18098:	cmp	x0, #0x0
   1809c:	b.eq	18130 <re_set_registers+0x7430>  // b.none
   180a0:	str	wzr, [sp, #216]
   180a4:	b	180b4 <re_set_registers+0x73b4>
   180a8:	ldr	w0, [sp, #216]
   180ac:	add	w0, w0, #0x1
   180b0:	str	w0, [sp, #216]
   180b4:	ldrsw	x0, [sp, #216]
   180b8:	lsl	x0, x0, #5
   180bc:	ldr	x1, [sp, #136]
   180c0:	add	x0, x1, x0
   180c4:	ldrsw	x1, [sp, #220]
   180c8:	ldr	x1, [x0, x1, lsl #3]
   180cc:	ldr	x0, [sp, #192]
   180d0:	and	x0, x1, x0
   180d4:	cmp	x0, #0x0
   180d8:	b.eq	180a8 <re_set_registers+0x73a8>  // b.none
   180dc:	ldrsw	x0, [sp, #216]
   180e0:	lsl	x0, x0, #3
   180e4:	ldr	x1, [sp, #168]
   180e8:	add	x1, x1, x0
   180ec:	ldrsw	x0, [sp, #212]
   180f0:	lsl	x0, x0, #3
   180f4:	ldr	x2, [sp, #176]
   180f8:	add	x0, x2, x0
   180fc:	ldr	x1, [x1]
   18100:	str	x1, [x0]
   18104:	ldrsw	x0, [sp, #216]
   18108:	lsl	x0, x0, #3
   1810c:	ldr	x1, [sp, #112]
   18110:	add	x1, x1, x0
   18114:	ldrsw	x0, [sp, #212]
   18118:	add	x0, x0, #0x100
   1811c:	lsl	x0, x0, #3
   18120:	ldr	x2, [sp, #176]
   18124:	add	x0, x2, x0
   18128:	ldr	x1, [x1]
   1812c:	str	x1, [x0]
   18130:	ldr	x0, [sp, #192]
   18134:	lsl	x0, x0, #1
   18138:	str	x0, [sp, #192]
   1813c:	ldr	x0, [sp, #200]
   18140:	lsr	x0, x0, #1
   18144:	str	x0, [sp, #200]
   18148:	ldr	w0, [sp, #212]
   1814c:	add	w0, w0, #0x1
   18150:	str	w0, [sp, #212]
   18154:	ldr	x0, [sp, #200]
   18158:	cmp	x0, #0x0
   1815c:	b.ne	18090 <re_set_registers+0x7390>  // b.any
   18160:	ldr	w0, [sp, #220]
   18164:	add	w0, w0, #0x1
   18168:	str	w0, [sp, #220]
   1816c:	ldr	w0, [sp, #220]
   18170:	cmp	w0, #0x3
   18174:	b.le	18064 <re_set_registers+0x7364>
   18178:	add	x0, sp, #0x30
   1817c:	mov	w1, #0xa                   	// #10
   18180:	bl	2ae8 <grub_mod_fini+0x25c8>
   18184:	and	w0, w0, #0xff
   18188:	cmp	w0, #0x0
   1818c:	b.eq	18230 <re_set_registers+0x7530>  // b.none
   18190:	str	wzr, [sp, #216]
   18194:	b	18218 <re_set_registers+0x7518>
   18198:	ldrsw	x0, [sp, #216]
   1819c:	lsl	x0, x0, #5
   181a0:	ldr	x1, [sp, #136]
   181a4:	add	x0, x1, x0
   181a8:	mov	w1, #0xa                   	// #10
   181ac:	bl	2ae8 <grub_mod_fini+0x25c8>
   181b0:	and	w0, w0, #0xff
   181b4:	cmp	w0, #0x0
   181b8:	b.eq	1820c <re_set_registers+0x750c>  // b.none
   181bc:	ldrsw	x0, [sp, #216]
   181c0:	lsl	x0, x0, #3
   181c4:	ldr	x1, [sp, #104]
   181c8:	add	x1, x1, x0
   181cc:	ldr	x0, [sp, #176]
   181d0:	add	x0, x0, #0x50
   181d4:	ldr	x1, [x1]
   181d8:	str	x1, [x0]
   181dc:	ldrb	w0, [sp, #211]
   181e0:	cmp	w0, #0x0
   181e4:	b.eq	1822c <re_set_registers+0x752c>  // b.none
   181e8:	ldrsw	x0, [sp, #216]
   181ec:	lsl	x0, x0, #3
   181f0:	ldr	x1, [sp, #104]
   181f4:	add	x1, x1, x0
   181f8:	ldr	x0, [sp, #176]
   181fc:	add	x0, x0, #0x850
   18200:	ldr	x1, [x1]
   18204:	str	x1, [x0]
   18208:	b	1822c <re_set_registers+0x752c>
   1820c:	ldr	w0, [sp, #216]
   18210:	add	w0, w0, #0x1
   18214:	str	w0, [sp, #216]
   18218:	ldr	w1, [sp, #216]
   1821c:	ldr	w0, [sp, #132]
   18220:	cmp	w1, w0
   18224:	b.lt	18198 <re_set_registers+0x7498>  // b.tstop
   18228:	b	18230 <re_set_registers+0x7530>
   1822c:	nop
   18230:	ldrb	w0, [sp, #191]
   18234:	cmp	w0, #0x0
   18238:	b.eq	18244 <re_set_registers+0x7544>  // b.none
   1823c:	ldr	x0, [sp, #168]
   18240:	bl	2230 <grub_mod_fini+0x1d10>
   18244:	ldr	x0, [sp, #88]
   18248:	bl	2230 <grub_mod_fini+0x1d10>
   1824c:	str	wzr, [sp, #220]
   18250:	b	18278 <re_set_registers+0x7578>
   18254:	ldrsw	x0, [sp, #220]
   18258:	lsl	x0, x0, #4
   1825c:	ldr	x1, [sp, #144]
   18260:	add	x0, x1, x0
   18264:	ldr	x0, [x0, #8]
   18268:	bl	2230 <grub_mod_fini+0x1d10>
   1826c:	ldr	w0, [sp, #220]
   18270:	add	w0, w0, #0x1
   18274:	str	w0, [sp, #220]
   18278:	ldr	w1, [sp, #220]
   1827c:	ldr	w0, [sp, #132]
   18280:	cmp	w1, w0
   18284:	b.lt	18254 <re_set_registers+0x7554>  // b.tstop
   18288:	ldrb	w0, [sp, #167]
   1828c:	cmp	w0, #0x0
   18290:	b.eq	1829c <re_set_registers+0x759c>  // b.none
   18294:	ldr	x0, [sp, #152]
   18298:	bl	2230 <grub_mod_fini+0x1d10>
   1829c:	mov	w0, #0x1                   	// #1
   182a0:	ldr	x19, [sp, #16]
   182a4:	ldp	x29, x30, [sp], #224
   182a8:	ret
   182ac:	stp	x29, x30, [sp, #-240]!
   182b0:	mov	x29, sp
   182b4:	str	x0, [sp, #40]
   182b8:	str	x1, [sp, #32]
   182bc:	str	x2, [sp, #24]
   182c0:	str	x3, [sp, #16]
   182c4:	ldr	x0, [sp, #32]
   182c8:	add	x0, x0, #0x8
   182cc:	str	x0, [sp, #176]
   182d0:	add	x0, sp, #0x70
   182d4:	bl	2b4c <grub_mod_fini+0x262c>
   182d8:	str	wzr, [sp, #224]
   182dc:	str	wzr, [sp, #236]
   182e0:	b	18b3c <re_set_registers+0x7e3c>
   182e4:	ldr	x0, [sp, #40]
   182e8:	ldr	x1, [x0]
   182ec:	ldr	x0, [sp, #176]
   182f0:	ldr	x2, [x0, #8]
   182f4:	ldrsw	x0, [sp, #236]
   182f8:	lsl	x0, x0, #2
   182fc:	add	x0, x2, x0
   18300:	ldr	w0, [x0]
   18304:	sxtw	x0, w0
   18308:	lsl	x0, x0, #4
   1830c:	add	x0, x1, x0
   18310:	str	x0, [sp, #168]
   18314:	ldr	x0, [sp, #168]
   18318:	ldrb	w0, [x0, #8]
   1831c:	str	w0, [sp, #164]
   18320:	ldr	x0, [sp, #168]
   18324:	ldr	w0, [x0, #8]
   18328:	ubfx	x0, x0, #8, #10
   1832c:	and	w0, w0, #0xffff
   18330:	str	w0, [sp, #160]
   18334:	ldr	w0, [sp, #164]
   18338:	cmp	w0, #0x1
   1833c:	b.ne	18358 <re_set_registers+0x7658>  // b.any
   18340:	ldr	x0, [sp, #168]
   18344:	ldrb	w0, [x0]
   18348:	mov	w1, w0
   1834c:	add	x0, sp, #0x70
   18350:	bl	29f4 <grub_mod_fini+0x24d4>
   18354:	b	18450 <re_set_registers+0x7750>
   18358:	ldr	w0, [sp, #164]
   1835c:	cmp	w0, #0x3
   18360:	b.ne	18378 <re_set_registers+0x7678>  // b.any
   18364:	ldr	x0, [sp, #168]
   18368:	ldr	x1, [x0]
   1836c:	add	x0, sp, #0x70
   18370:	bl	2c2c <grub_mod_fini+0x270c>
   18374:	b	18450 <re_set_registers+0x7750>
   18378:	ldr	w0, [sp, #164]
   1837c:	cmp	w0, #0x5
   18380:	b.ne	183f4 <re_set_registers+0x76f4>  // b.any
   18384:	ldr	x0, [sp, #40]
   18388:	ldr	w0, [x0, #164]
   1838c:	cmp	w0, #0x1
   18390:	b.le	183a8 <re_set_registers+0x76a8>
   18394:	ldr	x0, [sp, #40]
   18398:	ldr	x1, [x0, #120]
   1839c:	add	x0, sp, #0x70
   183a0:	bl	2c2c <grub_mod_fini+0x270c>
   183a4:	b	183b0 <re_set_registers+0x76b0>
   183a8:	add	x0, sp, #0x70
   183ac:	bl	2b74 <grub_mod_fini+0x2654>
   183b0:	ldr	x0, [sp, #40]
   183b4:	ldr	x0, [x0, #200]
   183b8:	and	x0, x0, #0x40
   183bc:	cmp	x0, #0x0
   183c0:	b.ne	183d0 <re_set_registers+0x76d0>  // b.any
   183c4:	add	x0, sp, #0x70
   183c8:	mov	w1, #0xa                   	// #10
   183cc:	bl	2a6c <grub_mod_fini+0x254c>
   183d0:	ldr	x0, [sp, #40]
   183d4:	ldr	x0, [x0, #200]
   183d8:	and	x0, x0, #0x80
   183dc:	cmp	x0, #0x0
   183e0:	b.eq	18450 <re_set_registers+0x7750>  // b.none
   183e4:	add	x0, sp, #0x70
   183e8:	mov	w1, #0x0                   	// #0
   183ec:	bl	2a6c <grub_mod_fini+0x254c>
   183f0:	b	18450 <re_set_registers+0x7750>
   183f4:	ldr	w0, [sp, #164]
   183f8:	cmp	w0, #0x7
   183fc:	b.ne	18b14 <re_set_registers+0x7e14>  // b.any
   18400:	add	x0, sp, #0x70
   18404:	mov	x2, #0x10                  	// #16
   18408:	mov	w1, #0xffffffff            	// #-1
   1840c:	bl	0 <grub_memset>
   18410:	ldr	x0, [sp, #40]
   18414:	ldr	x0, [x0, #200]
   18418:	and	x0, x0, #0x40
   1841c:	cmp	x0, #0x0
   18420:	b.ne	18430 <re_set_registers+0x7730>  // b.any
   18424:	add	x0, sp, #0x70
   18428:	mov	w1, #0xa                   	// #10
   1842c:	bl	2a6c <grub_mod_fini+0x254c>
   18430:	ldr	x0, [sp, #40]
   18434:	ldr	x0, [x0, #200]
   18438:	and	x0, x0, #0x80
   1843c:	cmp	x0, #0x0
   18440:	b.eq	18450 <re_set_registers+0x7750>  // b.none
   18444:	add	x0, sp, #0x70
   18448:	mov	w1, #0x0                   	// #0
   1844c:	bl	2a6c <grub_mod_fini+0x254c>
   18450:	ldr	w0, [sp, #160]
   18454:	cmp	w0, #0x0
   18458:	b.eq	187a4 <re_set_registers+0x7aa4>  // b.none
   1845c:	ldr	w0, [sp, #160]
   18460:	and	w0, w0, #0x20
   18464:	cmp	w0, #0x0
   18468:	b.eq	1849c <re_set_registers+0x779c>  // b.none
   1846c:	add	x0, sp, #0x70
   18470:	mov	w1, #0xa                   	// #10
   18474:	bl	2ae8 <grub_mod_fini+0x25c8>
   18478:	strb	w0, [sp, #159]
   1847c:	add	x0, sp, #0x70
   18480:	bl	2b4c <grub_mod_fini+0x262c>
   18484:	ldrb	w0, [sp, #159]
   18488:	cmp	w0, #0x0
   1848c:	b.eq	18b1c <re_set_registers+0x7e1c>  // b.none
   18490:	add	x0, sp, #0x70
   18494:	mov	w1, #0xa                   	// #10
   18498:	bl	29f4 <grub_mod_fini+0x24d4>
   1849c:	ldr	w0, [sp, #160]
   184a0:	and	w0, w0, #0x80
   184a4:	cmp	w0, #0x0
   184a8:	b.eq	184b8 <re_set_registers+0x77b8>  // b.none
   184ac:	add	x0, sp, #0x70
   184b0:	bl	2b4c <grub_mod_fini+0x262c>
   184b4:	b	18b30 <re_set_registers+0x7e30>
   184b8:	ldr	w0, [sp, #160]
   184bc:	and	w0, w0, #0x4
   184c0:	cmp	w0, #0x0
   184c4:	b.eq	1862c <re_set_registers+0x792c>  // b.none
   184c8:	str	xzr, [sp, #216]
   184cc:	ldr	w0, [sp, #164]
   184d0:	cmp	w0, #0x1
   184d4:	b.ne	184fc <re_set_registers+0x77fc>  // b.any
   184d8:	ldr	x0, [sp, #168]
   184dc:	ldrb	w0, [x0, #10]
   184e0:	and	w0, w0, #0x40
   184e4:	and	w0, w0, #0xff
   184e8:	cmp	w0, #0x0
   184ec:	b.ne	184fc <re_set_registers+0x77fc>  // b.any
   184f0:	add	x0, sp, #0x70
   184f4:	bl	2b4c <grub_mod_fini+0x262c>
   184f8:	b	18b30 <re_set_registers+0x7e30>
   184fc:	ldr	x0, [sp, #40]
   18500:	ldr	w0, [x0, #164]
   18504:	cmp	w0, #0x1
   18508:	b.le	185a8 <re_set_registers+0x78a8>
   1850c:	str	wzr, [sp, #232]
   18510:	b	18598 <re_set_registers+0x7898>
   18514:	ldrsw	x0, [sp, #232]
   18518:	lsl	x0, x0, #3
   1851c:	add	x1, sp, #0x70
   18520:	ldr	x1, [x1, x0]
   18524:	ldr	x2, [sp, #40]
   18528:	ldrsw	x0, [sp, #232]
   1852c:	add	x0, x0, #0x14
   18530:	lsl	x0, x0, #3
   18534:	add	x0, x2, x0
   18538:	ldr	x2, [x0, #8]
   1853c:	ldr	x0, [sp, #40]
   18540:	ldr	x3, [x0, #120]
   18544:	ldrsw	x0, [sp, #232]
   18548:	lsl	x0, x0, #3
   1854c:	add	x0, x3, x0
   18550:	ldr	x0, [x0]
   18554:	mvn	x0, x0
   18558:	orr	x0, x2, x0
   1855c:	and	x2, x1, x0
   18560:	ldrsw	x0, [sp, #232]
   18564:	lsl	x0, x0, #3
   18568:	add	x1, sp, #0x70
   1856c:	str	x2, [x1, x0]
   18570:	ldrsw	x0, [sp, #232]
   18574:	lsl	x0, x0, #3
   18578:	add	x1, sp, #0x70
   1857c:	ldr	x0, [x1, x0]
   18580:	ldr	x1, [sp, #216]
   18584:	orr	x0, x1, x0
   18588:	str	x0, [sp, #216]
   1858c:	ldr	w0, [sp, #232]
   18590:	add	w0, w0, #0x1
   18594:	str	w0, [sp, #232]
   18598:	ldr	w0, [sp, #232]
   1859c:	cmp	w0, #0x3
   185a0:	b.le	18514 <re_set_registers+0x7814>
   185a4:	b	18620 <re_set_registers+0x7920>
   185a8:	str	wzr, [sp, #232]
   185ac:	b	18614 <re_set_registers+0x7914>
   185b0:	ldrsw	x0, [sp, #232]
   185b4:	lsl	x0, x0, #3
   185b8:	add	x1, sp, #0x70
   185bc:	ldr	x1, [x1, x0]
   185c0:	ldr	x2, [sp, #40]
   185c4:	ldrsw	x0, [sp, #232]
   185c8:	add	x0, x0, #0x14
   185cc:	lsl	x0, x0, #3
   185d0:	add	x0, x2, x0
   185d4:	ldr	x0, [x0, #8]
   185d8:	and	x2, x1, x0
   185dc:	ldrsw	x0, [sp, #232]
   185e0:	lsl	x0, x0, #3
   185e4:	add	x1, sp, #0x70
   185e8:	str	x2, [x1, x0]
   185ec:	ldrsw	x0, [sp, #232]
   185f0:	lsl	x0, x0, #3
   185f4:	add	x1, sp, #0x70
   185f8:	ldr	x0, [x1, x0]
   185fc:	ldr	x1, [sp, #216]
   18600:	orr	x0, x1, x0
   18604:	str	x0, [sp, #216]
   18608:	ldr	w0, [sp, #232]
   1860c:	add	w0, w0, #0x1
   18610:	str	w0, [sp, #232]
   18614:	ldr	w0, [sp, #232]
   18618:	cmp	w0, #0x3
   1861c:	b.le	185b0 <re_set_registers+0x78b0>
   18620:	ldr	x0, [sp, #216]
   18624:	cmp	x0, #0x0
   18628:	b.eq	18b24 <re_set_registers+0x7e24>  // b.none
   1862c:	ldr	w0, [sp, #160]
   18630:	and	w0, w0, #0x8
   18634:	cmp	w0, #0x0
   18638:	b.eq	187a4 <re_set_registers+0x7aa4>  // b.none
   1863c:	str	xzr, [sp, #208]
   18640:	ldr	w0, [sp, #164]
   18644:	cmp	w0, #0x1
   18648:	b.ne	18670 <re_set_registers+0x7970>  // b.any
   1864c:	ldr	x0, [sp, #168]
   18650:	ldrb	w0, [x0, #10]
   18654:	and	w0, w0, #0x40
   18658:	and	w0, w0, #0xff
   1865c:	cmp	w0, #0x0
   18660:	b.eq	18670 <re_set_registers+0x7970>  // b.none
   18664:	add	x0, sp, #0x70
   18668:	bl	2b4c <grub_mod_fini+0x262c>
   1866c:	b	18b30 <re_set_registers+0x7e30>
   18670:	ldr	x0, [sp, #40]
   18674:	ldr	w0, [x0, #164]
   18678:	cmp	w0, #0x1
   1867c:	b.le	1871c <re_set_registers+0x7a1c>
   18680:	str	wzr, [sp, #232]
   18684:	b	1870c <re_set_registers+0x7a0c>
   18688:	ldrsw	x0, [sp, #232]
   1868c:	lsl	x0, x0, #3
   18690:	add	x1, sp, #0x70
   18694:	ldr	x1, [x1, x0]
   18698:	ldr	x2, [sp, #40]
   1869c:	ldrsw	x0, [sp, #232]
   186a0:	add	x0, x0, #0x14
   186a4:	lsl	x0, x0, #3
   186a8:	add	x0, x2, x0
   186ac:	ldr	x2, [x0, #8]
   186b0:	ldr	x0, [sp, #40]
   186b4:	ldr	x3, [x0, #120]
   186b8:	ldrsw	x0, [sp, #232]
   186bc:	lsl	x0, x0, #3
   186c0:	add	x0, x3, x0
   186c4:	ldr	x0, [x0]
   186c8:	and	x0, x2, x0
   186cc:	mvn	x0, x0
   186d0:	and	x2, x1, x0
   186d4:	ldrsw	x0, [sp, #232]
   186d8:	lsl	x0, x0, #3
   186dc:	add	x1, sp, #0x70
   186e0:	str	x2, [x1, x0]
   186e4:	ldrsw	x0, [sp, #232]
   186e8:	lsl	x0, x0, #3
   186ec:	add	x1, sp, #0x70
   186f0:	ldr	x0, [x1, x0]
   186f4:	ldr	x1, [sp, #208]
   186f8:	orr	x0, x1, x0
   186fc:	str	x0, [sp, #208]
   18700:	ldr	w0, [sp, #232]
   18704:	add	w0, w0, #0x1
   18708:	str	w0, [sp, #232]
   1870c:	ldr	w0, [sp, #232]
   18710:	cmp	w0, #0x3
   18714:	b.le	18688 <re_set_registers+0x7988>
   18718:	b	18798 <re_set_registers+0x7a98>
   1871c:	str	wzr, [sp, #232]
   18720:	b	1878c <re_set_registers+0x7a8c>
   18724:	ldrsw	x0, [sp, #232]
   18728:	lsl	x0, x0, #3
   1872c:	add	x1, sp, #0x70
   18730:	ldr	x1, [x1, x0]
   18734:	ldr	x2, [sp, #40]
   18738:	ldrsw	x0, [sp, #232]
   1873c:	add	x0, x0, #0x14
   18740:	lsl	x0, x0, #3
   18744:	add	x0, x2, x0
   18748:	ldr	x0, [x0, #8]
   1874c:	mvn	x0, x0
   18750:	and	x2, x1, x0
   18754:	ldrsw	x0, [sp, #232]
   18758:	lsl	x0, x0, #3
   1875c:	add	x1, sp, #0x70
   18760:	str	x2, [x1, x0]
   18764:	ldrsw	x0, [sp, #232]
   18768:	lsl	x0, x0, #3
   1876c:	add	x1, sp, #0x70
   18770:	ldr	x0, [x1, x0]
   18774:	ldr	x1, [sp, #208]
   18778:	orr	x0, x1, x0
   1877c:	str	x0, [sp, #208]
   18780:	ldr	w0, [sp, #232]
   18784:	add	w0, w0, #0x1
   18788:	str	w0, [sp, #232]
   1878c:	ldr	w0, [sp, #232]
   18790:	cmp	w0, #0x3
   18794:	b.le	18724 <re_set_registers+0x7a24>
   18798:	ldr	x0, [sp, #208]
   1879c:	cmp	x0, #0x0
   187a0:	b.eq	18b2c <re_set_registers+0x7e2c>  // b.none
   187a4:	str	wzr, [sp, #232]
   187a8:	b	18a68 <re_set_registers+0x7d68>
   187ac:	ldr	w0, [sp, #164]
   187b0:	cmp	w0, #0x1
   187b4:	b.ne	187f0 <re_set_registers+0x7af0>  // b.any
   187b8:	ldrsw	x0, [sp, #232]
   187bc:	lsl	x0, x0, #5
   187c0:	ldr	x1, [sp, #16]
   187c4:	add	x2, x1, x0
   187c8:	ldr	x0, [sp, #168]
   187cc:	ldrb	w0, [x0]
   187d0:	mov	w1, w0
   187d4:	mov	x0, x2
   187d8:	bl	2ae8 <grub_mod_fini+0x25c8>
   187dc:	and	w0, w0, #0xff
   187e0:	eor	w0, w0, #0x1
   187e4:	and	w0, w0, #0xff
   187e8:	cmp	w0, #0x0
   187ec:	b.ne	18a50 <re_set_registers+0x7d50>  // b.any
   187f0:	str	xzr, [sp, #200]
   187f4:	str	wzr, [sp, #228]
   187f8:	b	18860 <re_set_registers+0x7b60>
   187fc:	ldrsw	x0, [sp, #228]
   18800:	lsl	x0, x0, #3
   18804:	add	x1, sp, #0x70
   18808:	ldr	x1, [x1, x0]
   1880c:	ldrsw	x0, [sp, #232]
   18810:	lsl	x0, x0, #5
   18814:	ldr	x2, [sp, #16]
   18818:	add	x0, x2, x0
   1881c:	ldrsw	x2, [sp, #228]
   18820:	ldr	x0, [x0, x2, lsl #3]
   18824:	and	x2, x1, x0
   18828:	ldrsw	x0, [sp, #228]
   1882c:	lsl	x0, x0, #3
   18830:	add	x1, sp, #0x30
   18834:	str	x2, [x1, x0]
   18838:	ldrsw	x0, [sp, #228]
   1883c:	lsl	x0, x0, #3
   18840:	add	x1, sp, #0x30
   18844:	ldr	x0, [x1, x0]
   18848:	ldr	x1, [sp, #200]
   1884c:	orr	x0, x1, x0
   18850:	str	x0, [sp, #200]
   18854:	ldr	w0, [sp, #228]
   18858:	add	w0, w0, #0x1
   1885c:	str	w0, [sp, #228]
   18860:	ldr	w0, [sp, #228]
   18864:	cmp	w0, #0x3
   18868:	b.le	187fc <re_set_registers+0x7afc>
   1886c:	ldr	x0, [sp, #200]
   18870:	cmp	x0, #0x0
   18874:	b.eq	18a58 <re_set_registers+0x7d58>  // b.none
   18878:	str	xzr, [sp, #184]
   1887c:	ldr	x0, [sp, #184]
   18880:	str	x0, [sp, #192]
   18884:	str	wzr, [sp, #228]
   18888:	b	18950 <re_set_registers+0x7c50>
   1888c:	ldrsw	x0, [sp, #228]
   18890:	lsl	x0, x0, #3
   18894:	add	x1, sp, #0x70
   18898:	ldr	x0, [x1, x0]
   1889c:	mvn	x1, x0
   188a0:	ldrsw	x0, [sp, #232]
   188a4:	lsl	x0, x0, #5
   188a8:	ldr	x2, [sp, #16]
   188ac:	add	x0, x2, x0
   188b0:	ldrsw	x2, [sp, #228]
   188b4:	ldr	x0, [x0, x2, lsl #3]
   188b8:	and	x2, x1, x0
   188bc:	ldrsw	x0, [sp, #228]
   188c0:	lsl	x0, x0, #3
   188c4:	add	x1, sp, #0x50
   188c8:	str	x2, [x1, x0]
   188cc:	ldrsw	x0, [sp, #228]
   188d0:	lsl	x0, x0, #3
   188d4:	add	x1, sp, #0x50
   188d8:	ldr	x0, [x1, x0]
   188dc:	ldr	x1, [sp, #192]
   188e0:	orr	x0, x1, x0
   188e4:	str	x0, [sp, #192]
   188e8:	ldrsw	x0, [sp, #228]
   188ec:	lsl	x0, x0, #3
   188f0:	add	x1, sp, #0x70
   188f4:	ldr	x1, [x1, x0]
   188f8:	ldrsw	x0, [sp, #232]
   188fc:	lsl	x0, x0, #5
   18900:	ldr	x2, [sp, #16]
   18904:	add	x0, x2, x0
   18908:	ldrsw	x2, [sp, #228]
   1890c:	ldr	x0, [x0, x2, lsl #3]
   18910:	mvn	x0, x0
   18914:	and	x2, x1, x0
   18918:	ldrsw	x0, [sp, #228]
   1891c:	lsl	x0, x0, #3
   18920:	add	x1, sp, #0x70
   18924:	str	x2, [x1, x0]
   18928:	ldrsw	x0, [sp, #228]
   1892c:	lsl	x0, x0, #3
   18930:	add	x1, sp, #0x70
   18934:	ldr	x0, [x1, x0]
   18938:	ldr	x1, [sp, #184]
   1893c:	orr	x0, x1, x0
   18940:	str	x0, [sp, #184]
   18944:	ldr	w0, [sp, #228]
   18948:	add	w0, w0, #0x1
   1894c:	str	w0, [sp, #228]
   18950:	ldr	w0, [sp, #228]
   18954:	cmp	w0, #0x3
   18958:	b.le	1888c <re_set_registers+0x7b8c>
   1895c:	ldr	x0, [sp, #192]
   18960:	cmp	x0, #0x0
   18964:	b.eq	189f0 <re_set_registers+0x7cf0>  // b.none
   18968:	ldrsw	x0, [sp, #224]
   1896c:	lsl	x0, x0, #5
   18970:	ldr	x1, [sp, #16]
   18974:	add	x0, x1, x0
   18978:	add	x1, sp, #0x50
   1897c:	bl	2b9c <grub_mod_fini+0x267c>
   18980:	ldrsw	x0, [sp, #232]
   18984:	lsl	x0, x0, #5
   18988:	ldr	x1, [sp, #16]
   1898c:	add	x0, x1, x0
   18990:	add	x1, sp, #0x30
   18994:	bl	2b9c <grub_mod_fini+0x267c>
   18998:	ldrsw	x0, [sp, #224]
   1899c:	lsl	x0, x0, #4
   189a0:	ldr	x1, [sp, #24]
   189a4:	add	x2, x1, x0
   189a8:	ldrsw	x0, [sp, #232]
   189ac:	lsl	x0, x0, #4
   189b0:	ldr	x1, [sp, #24]
   189b4:	add	x0, x1, x0
   189b8:	mov	x1, x0
   189bc:	mov	x0, x2
   189c0:	bl	5a34 <grub_mod_fini+0x5514>
   189c4:	str	w0, [sp, #152]
   189c8:	ldr	w0, [sp, #152]
   189cc:	cmp	w0, #0x0
   189d0:	cset	w0, ne  // ne = any
   189d4:	and	w0, w0, #0xff
   189d8:	and	x0, x0, #0xff
   189dc:	cmp	x0, #0x0
   189e0:	b.ne	18b58 <re_set_registers+0x7e58>  // b.any
   189e4:	ldr	w0, [sp, #224]
   189e8:	add	w0, w0, #0x1
   189ec:	str	w0, [sp, #224]
   189f0:	ldrsw	x0, [sp, #232]
   189f4:	lsl	x0, x0, #4
   189f8:	ldr	x1, [sp, #24]
   189fc:	add	x2, x1, x0
   18a00:	ldr	x0, [sp, #176]
   18a04:	ldr	x1, [x0, #8]
   18a08:	ldrsw	x0, [sp, #236]
   18a0c:	lsl	x0, x0, #2
   18a10:	add	x0, x1, x0
   18a14:	ldr	w0, [x0]
   18a18:	mov	w1, w0
   18a1c:	mov	x0, x2
   18a20:	bl	67b0 <grub_mod_fini+0x6290>
   18a24:	strb	w0, [sp, #151]
   18a28:	ldrb	w0, [sp, #151]
   18a2c:	eor	w0, w0, #0x1
   18a30:	and	w0, w0, #0xff
   18a34:	and	x0, x0, #0xff
   18a38:	cmp	x0, #0x0
   18a3c:	b.ne	18b60 <re_set_registers+0x7e60>  // b.any
   18a40:	ldr	x0, [sp, #184]
   18a44:	cmp	x0, #0x0
   18a48:	b.eq	18a7c <re_set_registers+0x7d7c>  // b.none
   18a4c:	b	18a5c <re_set_registers+0x7d5c>
   18a50:	nop
   18a54:	b	18a5c <re_set_registers+0x7d5c>
   18a58:	nop
   18a5c:	ldr	w0, [sp, #232]
   18a60:	add	w0, w0, #0x1
   18a64:	str	w0, [sp, #232]
   18a68:	ldr	w1, [sp, #232]
   18a6c:	ldr	w0, [sp, #224]
   18a70:	cmp	w1, w0
   18a74:	b.lt	187ac <re_set_registers+0x7aac>  // b.tstop
   18a78:	b	18a80 <re_set_registers+0x7d80>
   18a7c:	nop
   18a80:	ldr	w1, [sp, #232]
   18a84:	ldr	w0, [sp, #224]
   18a88:	cmp	w1, w0
   18a8c:	b.ne	18b30 <re_set_registers+0x7e30>  // b.any
   18a90:	ldrsw	x0, [sp, #224]
   18a94:	lsl	x0, x0, #5
   18a98:	ldr	x1, [sp, #16]
   18a9c:	add	x0, x1, x0
   18aa0:	add	x1, sp, #0x70
   18aa4:	bl	2b9c <grub_mod_fini+0x267c>
   18aa8:	ldrsw	x0, [sp, #224]
   18aac:	lsl	x0, x0, #4
   18ab0:	ldr	x1, [sp, #24]
   18ab4:	add	x2, x1, x0
   18ab8:	ldr	x0, [sp, #176]
   18abc:	ldr	x1, [x0, #8]
   18ac0:	ldrsw	x0, [sp, #236]
   18ac4:	lsl	x0, x0, #2
   18ac8:	add	x0, x1, x0
   18acc:	ldr	w0, [x0]
   18ad0:	mov	w1, w0
   18ad4:	mov	x0, x2
   18ad8:	bl	589c <grub_mod_fini+0x537c>
   18adc:	str	w0, [sp, #152]
   18ae0:	ldr	w0, [sp, #152]
   18ae4:	cmp	w0, #0x0
   18ae8:	cset	w0, ne  // ne = any
   18aec:	and	w0, w0, #0xff
   18af0:	and	x0, x0, #0xff
   18af4:	cmp	x0, #0x0
   18af8:	b.ne	18b68 <re_set_registers+0x7e68>  // b.any
   18afc:	ldr	w0, [sp, #224]
   18b00:	add	w0, w0, #0x1
   18b04:	str	w0, [sp, #224]
   18b08:	add	x0, sp, #0x70
   18b0c:	bl	2b4c <grub_mod_fini+0x262c>
   18b10:	b	18b30 <re_set_registers+0x7e30>
   18b14:	nop
   18b18:	b	18b30 <re_set_registers+0x7e30>
   18b1c:	nop
   18b20:	b	18b30 <re_set_registers+0x7e30>
   18b24:	nop
   18b28:	b	18b30 <re_set_registers+0x7e30>
   18b2c:	nop
   18b30:	ldr	w0, [sp, #236]
   18b34:	add	w0, w0, #0x1
   18b38:	str	w0, [sp, #236]
   18b3c:	ldr	x0, [sp, #176]
   18b40:	ldr	w0, [x0, #4]
   18b44:	ldr	w1, [sp, #236]
   18b48:	cmp	w1, w0
   18b4c:	b.lt	182e4 <re_set_registers+0x75e4>  // b.tstop
   18b50:	ldr	w0, [sp, #224]
   18b54:	b	18bac <re_set_registers+0x7eac>
   18b58:	nop
   18b5c:	b	18b6c <re_set_registers+0x7e6c>
   18b60:	nop
   18b64:	b	18b6c <re_set_registers+0x7e6c>
   18b68:	nop
   18b6c:	str	wzr, [sp, #232]
   18b70:	b	18b98 <re_set_registers+0x7e98>
   18b74:	ldrsw	x0, [sp, #232]
   18b78:	lsl	x0, x0, #4
   18b7c:	ldr	x1, [sp, #24]
   18b80:	add	x0, x1, x0
   18b84:	ldr	x0, [x0, #8]
   18b88:	bl	2230 <grub_mod_fini+0x1d10>
   18b8c:	ldr	w0, [sp, #232]
   18b90:	add	w0, w0, #0x1
   18b94:	str	w0, [sp, #232]
   18b98:	ldr	w1, [sp, #232]
   18b9c:	ldr	w0, [sp, #224]
   18ba0:	cmp	w1, w0
   18ba4:	b.lt	18b74 <re_set_registers+0x7e74>  // b.tstop
   18ba8:	mov	w0, #0xffffffff            	// #-1
   18bac:	ldp	x29, x30, [sp], #240
   18bb0:	ret
   18bb4:	stp	x29, x30, [sp, #-112]!
   18bb8:	mov	x29, sp
   18bbc:	str	x0, [sp, #40]
   18bc0:	str	w1, [sp, #36]
   18bc4:	str	x2, [sp, #24]
   18bc8:	str	w3, [sp, #32]
   18bcc:	ldr	x0, [sp, #40]
   18bd0:	ldr	x1, [x0]
   18bd4:	ldrsw	x0, [sp, #36]
   18bd8:	lsl	x0, x0, #4
   18bdc:	add	x0, x1, x0
   18be0:	str	x0, [sp, #88]
   18be4:	ldr	x0, [sp, #88]
   18be8:	ldrb	w0, [x0, #8]
   18bec:	cmp	w0, #0x7
   18bf0:	cset	w0, eq  // eq = none
   18bf4:	and	w0, w0, #0xff
   18bf8:	and	x0, x0, #0xff
   18bfc:	cmp	x0, #0x0
   18c00:	b.eq	18e20 <re_set_registers+0x8120>  // b.none
   18c04:	ldr	x0, [sp, #24]
   18c08:	ldr	x1, [x0, #8]
   18c0c:	ldrsw	x0, [sp, #32]
   18c10:	add	x0, x1, x0
   18c14:	ldrb	w0, [x0]
   18c18:	strb	w0, [sp, #63]
   18c1c:	ldrb	w0, [sp, #63]
   18c20:	cmp	w0, #0xc1
   18c24:	cset	w0, ls  // ls = plast
   18c28:	and	w0, w0, #0xff
   18c2c:	and	x0, x0, #0xff
   18c30:	cmp	x0, #0x0
   18c34:	b.eq	18c40 <re_set_registers+0x7f40>  // b.none
   18c38:	mov	w0, #0x0                   	// #0
   18c3c:	b	190f4 <re_set_registers+0x83f4>
   18c40:	ldr	w0, [sp, #32]
   18c44:	add	w1, w0, #0x1
   18c48:	ldr	x0, [sp, #24]
   18c4c:	ldr	w0, [x0, #64]
   18c50:	cmp	w1, w0
   18c54:	b.lt	18c60 <re_set_registers+0x7f60>  // b.tstop
   18c58:	mov	w0, #0x0                   	// #0
   18c5c:	b	190f4 <re_set_registers+0x83f4>
   18c60:	ldr	x0, [sp, #24]
   18c64:	ldr	x1, [x0, #8]
   18c68:	ldrsw	x0, [sp, #32]
   18c6c:	add	x0, x0, #0x1
   18c70:	add	x0, x1, x0
   18c74:	ldrb	w0, [x0]
   18c78:	strb	w0, [sp, #62]
   18c7c:	ldrb	w0, [sp, #63]
   18c80:	cmp	w0, #0xdf
   18c84:	b.hi	18cb0 <re_set_registers+0x7fb0>  // b.pmore
   18c88:	ldrsb	w0, [sp, #62]
   18c8c:	cmp	w0, #0x0
   18c90:	b.ge	18ca0 <re_set_registers+0x7fa0>  // b.tcont
   18c94:	ldrb	w0, [sp, #62]
   18c98:	cmp	w0, #0xbf
   18c9c:	b.ls	18ca8 <re_set_registers+0x7fa8>  // b.plast
   18ca0:	mov	w0, #0x0                   	// #0
   18ca4:	b	190f4 <re_set_registers+0x83f4>
   18ca8:	mov	w0, #0x2                   	// #2
   18cac:	b	190f4 <re_set_registers+0x83f4>
   18cb0:	ldrb	w0, [sp, #63]
   18cb4:	cmp	w0, #0xef
   18cb8:	b.hi	18ce4 <re_set_registers+0x7fe4>  // b.pmore
   18cbc:	mov	w0, #0x3                   	// #3
   18cc0:	str	w0, [sp, #108]
   18cc4:	ldrb	w0, [sp, #63]
   18cc8:	cmp	w0, #0xe0
   18ccc:	b.ne	18d88 <re_set_registers+0x8088>  // b.any
   18cd0:	ldrb	w0, [sp, #62]
   18cd4:	cmp	w0, #0x9f
   18cd8:	b.hi	18d88 <re_set_registers+0x8088>  // b.pmore
   18cdc:	mov	w0, #0x0                   	// #0
   18ce0:	b	190f4 <re_set_registers+0x83f4>
   18ce4:	ldrb	w0, [sp, #63]
   18ce8:	cmp	w0, #0xf7
   18cec:	b.hi	18d18 <re_set_registers+0x8018>  // b.pmore
   18cf0:	mov	w0, #0x4                   	// #4
   18cf4:	str	w0, [sp, #108]
   18cf8:	ldrb	w0, [sp, #63]
   18cfc:	cmp	w0, #0xf0
   18d00:	b.ne	18d88 <re_set_registers+0x8088>  // b.any
   18d04:	ldrb	w0, [sp, #62]
   18d08:	cmp	w0, #0x8f
   18d0c:	b.hi	18d88 <re_set_registers+0x8088>  // b.pmore
   18d10:	mov	w0, #0x0                   	// #0
   18d14:	b	190f4 <re_set_registers+0x83f4>
   18d18:	ldrb	w0, [sp, #63]
   18d1c:	cmp	w0, #0xfb
   18d20:	b.hi	18d4c <re_set_registers+0x804c>  // b.pmore
   18d24:	mov	w0, #0x5                   	// #5
   18d28:	str	w0, [sp, #108]
   18d2c:	ldrb	w0, [sp, #63]
   18d30:	cmp	w0, #0xf8
   18d34:	b.ne	18d88 <re_set_registers+0x8088>  // b.any
   18d38:	ldrb	w0, [sp, #62]
   18d3c:	cmp	w0, #0x87
   18d40:	b.hi	18d88 <re_set_registers+0x8088>  // b.pmore
   18d44:	mov	w0, #0x0                   	// #0
   18d48:	b	190f4 <re_set_registers+0x83f4>
   18d4c:	ldrb	w0, [sp, #63]
   18d50:	cmp	w0, #0xfd
   18d54:	b.hi	18d80 <re_set_registers+0x8080>  // b.pmore
   18d58:	mov	w0, #0x6                   	// #6
   18d5c:	str	w0, [sp, #108]
   18d60:	ldrb	w0, [sp, #63]
   18d64:	cmp	w0, #0xfc
   18d68:	b.ne	18d88 <re_set_registers+0x8088>  // b.any
   18d6c:	ldrb	w0, [sp, #62]
   18d70:	cmp	w0, #0x83
   18d74:	b.hi	18d88 <re_set_registers+0x8088>  // b.pmore
   18d78:	mov	w0, #0x0                   	// #0
   18d7c:	b	190f4 <re_set_registers+0x83f4>
   18d80:	mov	w0, #0x0                   	// #0
   18d84:	b	190f4 <re_set_registers+0x83f4>
   18d88:	ldr	w1, [sp, #32]
   18d8c:	ldr	w0, [sp, #108]
   18d90:	add	w1, w1, w0
   18d94:	ldr	x0, [sp, #24]
   18d98:	ldr	w0, [x0, #64]
   18d9c:	cmp	w1, w0
   18da0:	b.le	18dac <re_set_registers+0x80ac>
   18da4:	mov	w0, #0x0                   	// #0
   18da8:	b	190f4 <re_set_registers+0x83f4>
   18dac:	mov	w0, #0x1                   	// #1
   18db0:	str	w0, [sp, #104]
   18db4:	b	18e08 <re_set_registers+0x8108>
   18db8:	ldr	x0, [sp, #24]
   18dbc:	ldr	x1, [x0, #8]
   18dc0:	ldr	w2, [sp, #32]
   18dc4:	ldr	w0, [sp, #104]
   18dc8:	add	w0, w2, w0
   18dcc:	sxtw	x0, w0
   18dd0:	add	x0, x1, x0
   18dd4:	ldrb	w0, [x0]
   18dd8:	strb	w0, [sp, #62]
   18ddc:	ldrsb	w0, [sp, #62]
   18de0:	cmp	w0, #0x0
   18de4:	b.ge	18df4 <re_set_registers+0x80f4>  // b.tcont
   18de8:	ldrb	w0, [sp, #62]
   18dec:	cmp	w0, #0xbf
   18df0:	b.ls	18dfc <re_set_registers+0x80fc>  // b.plast
   18df4:	mov	w0, #0x0                   	// #0
   18df8:	b	190f4 <re_set_registers+0x83f4>
   18dfc:	ldr	w0, [sp, #104]
   18e00:	add	w0, w0, #0x1
   18e04:	str	w0, [sp, #104]
   18e08:	ldr	w1, [sp, #104]
   18e0c:	ldr	w0, [sp, #108]
   18e10:	cmp	w1, w0
   18e14:	b.lt	18db8 <re_set_registers+0x80b8>  // b.tstop
   18e18:	ldr	w0, [sp, #108]
   18e1c:	b	190f4 <re_set_registers+0x83f4>
   18e20:	ldr	w1, [sp, #32]
   18e24:	ldr	x0, [sp, #24]
   18e28:	bl	2d24 <grub_mod_fini+0x2804>
   18e2c:	str	w0, [sp, #108]
   18e30:	ldr	x0, [sp, #88]
   18e34:	ldrb	w0, [x0, #8]
   18e38:	cmp	w0, #0x5
   18e3c:	b.ne	18ec4 <re_set_registers+0x81c4>  // b.any
   18e40:	ldr	w0, [sp, #108]
   18e44:	cmp	w0, #0x1
   18e48:	b.gt	18e54 <re_set_registers+0x8154>
   18e4c:	mov	w0, #0x0                   	// #0
   18e50:	b	190f4 <re_set_registers+0x83f4>
   18e54:	ldr	x0, [sp, #40]
   18e58:	ldr	x0, [x0, #200]
   18e5c:	and	x0, x0, #0x40
   18e60:	cmp	x0, #0x0
   18e64:	b.ne	18e84 <re_set_registers+0x8184>  // b.any
   18e68:	ldr	x0, [sp, #24]
   18e6c:	ldr	x1, [x0, #8]
   18e70:	ldrsw	x0, [sp, #32]
   18e74:	add	x0, x1, x0
   18e78:	ldrb	w0, [x0]
   18e7c:	cmp	w0, #0xa
   18e80:	b.eq	18eb4 <re_set_registers+0x81b4>  // b.none
   18e84:	ldr	x0, [sp, #40]
   18e88:	ldr	x0, [x0, #200]
   18e8c:	and	x0, x0, #0x80
   18e90:	cmp	x0, #0x0
   18e94:	b.eq	18ebc <re_set_registers+0x81bc>  // b.none
   18e98:	ldr	x0, [sp, #24]
   18e9c:	ldr	x1, [x0, #8]
   18ea0:	ldrsw	x0, [sp, #32]
   18ea4:	add	x0, x1, x0
   18ea8:	ldrb	w0, [x0]
   18eac:	cmp	w0, #0x0
   18eb0:	b.ne	18ebc <re_set_registers+0x81bc>  // b.any
   18eb4:	mov	w0, #0x0                   	// #0
   18eb8:	b	190f4 <re_set_registers+0x83f4>
   18ebc:	ldr	w0, [sp, #108]
   18ec0:	b	190f4 <re_set_registers+0x83f4>
   18ec4:	ldr	w1, [sp, #32]
   18ec8:	ldr	x0, [sp, #24]
   18ecc:	bl	2e10 <grub_mod_fini+0x28f0>
   18ed0:	str	w0, [sp, #84]
   18ed4:	ldr	w0, [sp, #84]
   18ed8:	cmp	w0, #0x1
   18edc:	b.gt	18eec <re_set_registers+0x81ec>
   18ee0:	ldr	w0, [sp, #108]
   18ee4:	cmp	w0, #0x1
   18ee8:	b.le	18ef8 <re_set_registers+0x81f8>
   18eec:	ldr	w0, [sp, #108]
   18ef0:	cmp	w0, #0x0
   18ef4:	b.ne	18f00 <re_set_registers+0x8200>  // b.any
   18ef8:	mov	w0, #0x0                   	// #0
   18efc:	b	190f4 <re_set_registers+0x83f4>
   18f00:	ldr	x0, [sp, #88]
   18f04:	ldrb	w0, [x0, #8]
   18f08:	cmp	w0, #0x6
   18f0c:	b.ne	190f0 <re_set_registers+0x83f0>  // b.any
   18f10:	ldr	x0, [sp, #88]
   18f14:	ldr	x0, [x0]
   18f18:	str	x0, [sp, #72]
   18f1c:	str	wzr, [sp, #100]
   18f20:	ldr	x0, [sp, #72]
   18f24:	ldr	w0, [x0, #48]
   18f28:	cmp	w0, #0x0
   18f2c:	b.ne	18f50 <re_set_registers+0x8250>  // b.any
   18f30:	ldr	x0, [sp, #72]
   18f34:	ldr	w0, [x0, #52]
   18f38:	cmp	w0, #0x0
   18f3c:	b.ne	18f50 <re_set_registers+0x8250>  // b.any
   18f40:	ldr	x0, [sp, #72]
   18f44:	ldr	w0, [x0, #36]
   18f48:	cmp	w0, #0x0
   18f4c:	b.eq	18f60 <re_set_registers+0x8260>  // b.none
   18f50:	ldr	w1, [sp, #32]
   18f54:	ldr	x0, [sp, #24]
   18f58:	bl	2dbc <grub_mod_fini+0x289c>
   18f5c:	b	18f64 <re_set_registers+0x8264>
   18f60:	mov	w0, #0x0                   	// #0
   18f64:	str	w0, [sp, #68]
   18f68:	str	wzr, [sp, #104]
   18f6c:	b	18fac <re_set_registers+0x82ac>
   18f70:	ldr	x0, [sp, #72]
   18f74:	ldr	x1, [x0]
   18f78:	ldrsw	x0, [sp, #104]
   18f7c:	lsl	x0, x0, #2
   18f80:	add	x0, x1, x0
   18f84:	ldr	w0, [x0]
   18f88:	ldr	w1, [sp, #68]
   18f8c:	cmp	w1, w0
   18f90:	b.ne	18fa0 <re_set_registers+0x82a0>  // b.any
   18f94:	ldr	w0, [sp, #108]
   18f98:	str	w0, [sp, #100]
   18f9c:	b	190a4 <re_set_registers+0x83a4>
   18fa0:	ldr	w0, [sp, #104]
   18fa4:	add	w0, w0, #0x1
   18fa8:	str	w0, [sp, #104]
   18fac:	ldr	x0, [sp, #72]
   18fb0:	ldr	w0, [x0, #36]
   18fb4:	ldr	w1, [sp, #104]
   18fb8:	cmp	w1, w0
   18fbc:	b.lt	18f70 <re_set_registers+0x8270>  // b.tstop
   18fc0:	str	wzr, [sp, #104]
   18fc4:	b	19010 <re_set_registers+0x8310>
   18fc8:	ldr	x0, [sp, #72]
   18fcc:	ldr	x1, [x0, #24]
   18fd0:	ldrsw	x0, [sp, #104]
   18fd4:	lsl	x0, x0, #2
   18fd8:	add	x0, x1, x0
   18fdc:	ldr	w0, [x0]
   18fe0:	str	w0, [sp, #64]
   18fe4:	ldr	w1, [sp, #64]
   18fe8:	ldr	w0, [sp, #68]
   18fec:	bl	27ec <grub_mod_fini+0x22cc>
   18ff0:	cmp	w0, #0x0
   18ff4:	b.eq	19004 <re_set_registers+0x8304>  // b.none
   18ff8:	ldr	w0, [sp, #108]
   18ffc:	str	w0, [sp, #100]
   19000:	b	190a4 <re_set_registers+0x83a4>
   19004:	ldr	w0, [sp, #104]
   19008:	add	w0, w0, #0x1
   1900c:	str	w0, [sp, #104]
   19010:	ldr	x0, [sp, #72]
   19014:	ldr	w0, [x0, #52]
   19018:	ldr	w1, [sp, #104]
   1901c:	cmp	w1, w0
   19020:	b.lt	18fc8 <re_set_registers+0x82c8>  // b.tstop
   19024:	str	wzr, [sp, #104]
   19028:	b	1908c <re_set_registers+0x838c>
   1902c:	ldr	x0, [sp, #72]
   19030:	ldr	x1, [x0, #8]
   19034:	ldrsw	x0, [sp, #104]
   19038:	lsl	x0, x0, #2
   1903c:	add	x0, x1, x0
   19040:	ldr	w0, [x0]
   19044:	ldr	w1, [sp, #68]
   19048:	cmp	w1, w0
   1904c:	b.lt	19080 <re_set_registers+0x8380>  // b.tstop
   19050:	ldr	x0, [sp, #72]
   19054:	ldr	x1, [x0, #16]
   19058:	ldrsw	x0, [sp, #104]
   1905c:	lsl	x0, x0, #2
   19060:	add	x0, x1, x0
   19064:	ldr	w0, [x0]
   19068:	ldr	w1, [sp, #68]
   1906c:	cmp	w1, w0
   19070:	b.gt	19080 <re_set_registers+0x8380>
   19074:	ldr	w0, [sp, #108]
   19078:	str	w0, [sp, #100]
   1907c:	b	190a4 <re_set_registers+0x83a4>
   19080:	ldr	w0, [sp, #104]
   19084:	add	w0, w0, #0x1
   19088:	str	w0, [sp, #104]
   1908c:	ldr	x0, [sp, #72]
   19090:	ldr	w0, [x0, #48]
   19094:	ldr	w1, [sp, #104]
   19098:	cmp	w1, w0
   1909c:	b.lt	1902c <re_set_registers+0x832c>  // b.tstop
   190a0:	nop
   190a4:	ldr	x0, [sp, #72]
   190a8:	ldrb	w0, [x0, #32]
   190ac:	and	w0, w0, #0x1
   190b0:	and	w0, w0, #0xff
   190b4:	cmp	w0, #0x0
   190b8:	b.ne	190c4 <re_set_registers+0x83c4>  // b.any
   190bc:	ldr	w0, [sp, #100]
   190c0:	b	190f4 <re_set_registers+0x83f4>
   190c4:	ldr	w0, [sp, #100]
   190c8:	cmp	w0, #0x0
   190cc:	b.le	190d8 <re_set_registers+0x83d8>
   190d0:	mov	w0, #0x0                   	// #0
   190d4:	b	190f4 <re_set_registers+0x83f4>
   190d8:	ldr	w0, [sp, #84]
   190dc:	ldr	w2, [sp, #108]
   190e0:	ldr	w1, [sp, #108]
   190e4:	cmp	w2, w0
   190e8:	csel	w0, w1, w0, ge  // ge = tcont
   190ec:	b	190f4 <re_set_registers+0x83f4>
   190f0:	mov	w0, #0x0                   	// #0
   190f4:	ldp	x29, x30, [sp], #112
   190f8:	ret
   190fc:	stp	x29, x30, [sp, #-64]!
   19100:	mov	x29, sp
   19104:	str	x0, [sp, #40]
   19108:	str	x1, [sp, #32]
   1910c:	str	w2, [sp, #28]
   19110:	ldr	x0, [sp, #40]
   19114:	ldr	x1, [x0, #8]
   19118:	ldrsw	x0, [sp, #28]
   1911c:	add	x0, x1, x0
   19120:	ldrb	w0, [x0]
   19124:	strb	w0, [sp, #63]
   19128:	ldr	x0, [sp, #32]
   1912c:	ldrb	w0, [x0, #8]
   19130:	cmp	w0, #0x7
   19134:	b.eq	191ac <re_set_registers+0x84ac>  // b.none
   19138:	cmp	w0, #0x7
   1913c:	b.gt	19210 <re_set_registers+0x8510>
   19140:	cmp	w0, #0x5
   19144:	b.eq	191c0 <re_set_registers+0x84c0>  // b.none
   19148:	cmp	w0, #0x5
   1914c:	b.gt	19210 <re_set_registers+0x8510>
   19150:	cmp	w0, #0x1
   19154:	b.eq	19164 <re_set_registers+0x8464>  // b.none
   19158:	cmp	w0, #0x3
   1915c:	b.eq	19180 <re_set_registers+0x8480>  // b.none
   19160:	b	19210 <re_set_registers+0x8510>
   19164:	ldr	x0, [sp, #32]
   19168:	ldrb	w0, [x0]
   1916c:	ldrb	w1, [sp, #63]
   19170:	cmp	w1, w0
   19174:	b.eq	19218 <re_set_registers+0x8518>  // b.none
   19178:	mov	w0, #0x0                   	// #0
   1917c:	b	1931c <re_set_registers+0x861c>
   19180:	ldr	x0, [sp, #32]
   19184:	ldr	x0, [x0]
   19188:	ldrb	w1, [sp, #63]
   1918c:	bl	2ae8 <grub_mod_fini+0x25c8>
   19190:	and	w0, w0, #0xff
   19194:	eor	w0, w0, #0x1
   19198:	and	w0, w0, #0xff
   1919c:	cmp	w0, #0x0
   191a0:	b.eq	19220 <re_set_registers+0x8520>  // b.none
   191a4:	mov	w0, #0x0                   	// #0
   191a8:	b	1931c <re_set_registers+0x861c>
   191ac:	ldrsb	w0, [sp, #63]
   191b0:	cmp	w0, #0x0
   191b4:	b.ge	191c0 <re_set_registers+0x84c0>  // b.tcont
   191b8:	mov	w0, #0x0                   	// #0
   191bc:	b	1931c <re_set_registers+0x861c>
   191c0:	ldrb	w0, [sp, #63]
   191c4:	cmp	w0, #0xa
   191c8:	b.ne	191e4 <re_set_registers+0x84e4>  // b.any
   191cc:	ldr	x0, [sp, #40]
   191d0:	ldr	x0, [x0, #112]
   191d4:	ldr	x0, [x0, #200]
   191d8:	and	x0, x0, #0x40
   191dc:	cmp	x0, #0x0
   191e0:	b.eq	19208 <re_set_registers+0x8508>  // b.none
   191e4:	ldrb	w0, [sp, #63]
   191e8:	cmp	w0, #0x0
   191ec:	b.ne	19228 <re_set_registers+0x8528>  // b.any
   191f0:	ldr	x0, [sp, #40]
   191f4:	ldr	x0, [x0, #112]
   191f8:	ldr	x0, [x0, #200]
   191fc:	and	x0, x0, #0x80
   19200:	cmp	x0, #0x0
   19204:	b.eq	19228 <re_set_registers+0x8528>  // b.none
   19208:	mov	w0, #0x0                   	// #0
   1920c:	b	1931c <re_set_registers+0x861c>
   19210:	mov	w0, #0x0                   	// #0
   19214:	b	1931c <re_set_registers+0x861c>
   19218:	nop
   1921c:	b	1922c <re_set_registers+0x852c>
   19220:	nop
   19224:	b	1922c <re_set_registers+0x852c>
   19228:	nop
   1922c:	ldr	x0, [sp, #32]
   19230:	ldr	w0, [x0, #8]
   19234:	and	w0, w0, #0x3ff00
   19238:	cmp	w0, #0x0
   1923c:	b.eq	19318 <re_set_registers+0x8618>  // b.none
   19240:	ldr	x3, [sp, #40]
   19244:	ldr	x0, [sp, #40]
   19248:	ldr	w0, [x0, #120]
   1924c:	mov	w2, w0
   19250:	ldr	w1, [sp, #28]
   19254:	mov	x0, x3
   19258:	bl	564c <grub_mod_fini+0x512c>
   1925c:	str	w0, [sp, #56]
   19260:	ldr	x0, [sp, #32]
   19264:	ldr	w0, [x0, #8]
   19268:	ubfx	x0, x0, #8, #10
   1926c:	and	w0, w0, #0xffff
   19270:	and	w0, w0, #0x4
   19274:	cmp	w0, #0x0
   19278:	b.eq	1928c <re_set_registers+0x858c>  // b.none
   1927c:	ldr	w0, [sp, #56]
   19280:	and	w0, w0, #0x1
   19284:	cmp	w0, #0x0
   19288:	b.eq	19310 <re_set_registers+0x8610>  // b.none
   1928c:	ldr	x0, [sp, #32]
   19290:	ldr	w0, [x0, #8]
   19294:	ubfx	x0, x0, #8, #10
   19298:	and	w0, w0, #0xffff
   1929c:	and	w0, w0, #0x8
   192a0:	cmp	w0, #0x0
   192a4:	b.eq	192b8 <re_set_registers+0x85b8>  // b.none
   192a8:	ldr	w0, [sp, #56]
   192ac:	and	w0, w0, #0x1
   192b0:	cmp	w0, #0x0
   192b4:	b.ne	19310 <re_set_registers+0x8610>  // b.any
   192b8:	ldr	x0, [sp, #32]
   192bc:	ldr	w0, [x0, #8]
   192c0:	ubfx	x0, x0, #8, #10
   192c4:	and	w0, w0, #0xffff
   192c8:	and	w0, w0, #0x20
   192cc:	cmp	w0, #0x0
   192d0:	b.eq	192e4 <re_set_registers+0x85e4>  // b.none
   192d4:	ldr	w0, [sp, #56]
   192d8:	and	w0, w0, #0x2
   192dc:	cmp	w0, #0x0
   192e0:	b.eq	19310 <re_set_registers+0x8610>  // b.none
   192e4:	ldr	x0, [sp, #32]
   192e8:	ldr	w0, [x0, #8]
   192ec:	ubfx	x0, x0, #8, #10
   192f0:	and	w0, w0, #0xffff
   192f4:	and	w0, w0, #0x80
   192f8:	cmp	w0, #0x0
   192fc:	b.eq	19318 <re_set_registers+0x8618>  // b.none
   19300:	ldr	w0, [sp, #56]
   19304:	and	w0, w0, #0x8
   19308:	cmp	w0, #0x0
   1930c:	b.ne	19318 <re_set_registers+0x8618>  // b.any
   19310:	mov	w0, #0x0                   	// #0
   19314:	b	1931c <re_set_registers+0x861c>
   19318:	mov	w0, #0x1                   	// #1
   1931c:	ldp	x29, x30, [sp], #64
   19320:	ret
   19324:	stp	x29, x30, [sp, #-64]!
   19328:	mov	x29, sp
   1932c:	str	x0, [sp, #24]
   19330:	str	w1, [sp, #20]
   19334:	ldr	x0, [sp, #24]
   19338:	str	x0, [sp, #56]
   1933c:	ldr	x0, [sp, #56]
   19340:	ldr	w0, [x0, #52]
   19344:	mov	w1, w0
   19348:	mov	w0, #0x3ffffffe            	// #1073741822
   1934c:	cmp	w1, w0
   19350:	cset	w0, hi  // hi = pmore
   19354:	and	w0, w0, #0xff
   19358:	and	x0, x0, #0xff
   1935c:	cmp	x0, #0x0
   19360:	b.eq	1936c <re_set_registers+0x866c>  // b.none
   19364:	mov	w0, #0xc                   	// #12
   19368:	b	194cc <re_set_registers+0x87cc>
   1936c:	ldr	x0, [sp, #56]
   19370:	ldr	w0, [x0, #52]
   19374:	lsl	w1, w0, #1
   19378:	ldr	x0, [sp, #56]
   1937c:	ldr	w0, [x0, #64]
   19380:	cmp	w1, w0
   19384:	csel	w0, w1, w0, le
   19388:	ldr	w2, [sp, #20]
   1938c:	ldr	w1, [sp, #20]
   19390:	cmp	w2, w0
   19394:	csel	w0, w1, w0, ge  // ge = tcont
   19398:	mov	w1, w0
   1939c:	ldr	x0, [sp, #56]
   193a0:	bl	3178 <grub_mod_fini+0x2c58>
   193a4:	str	w0, [sp, #52]
   193a8:	ldr	w0, [sp, #52]
   193ac:	cmp	w0, #0x0
   193b0:	cset	w0, ne  // ne = any
   193b4:	and	w0, w0, #0xff
   193b8:	and	x0, x0, #0xff
   193bc:	cmp	x0, #0x0
   193c0:	b.eq	193cc <re_set_registers+0x86cc>  // b.none
   193c4:	ldr	w0, [sp, #52]
   193c8:	b	194cc <re_set_registers+0x87cc>
   193cc:	ldr	x0, [sp, #24]
   193d0:	ldr	x0, [x0, #136]
   193d4:	cmp	x0, #0x0
   193d8:	b.eq	19438 <re_set_registers+0x8738>  // b.none
   193dc:	ldr	x0, [sp, #24]
   193e0:	ldr	x2, [x0, #136]
   193e4:	ldr	x0, [sp, #56]
   193e8:	ldr	w0, [x0, #52]
   193ec:	add	w0, w0, #0x1
   193f0:	sxtw	x0, w0
   193f4:	lsl	x0, x0, #3
   193f8:	mov	x1, x0
   193fc:	mov	x0, x2
   19400:	bl	2294 <grub_mod_fini+0x1d74>
   19404:	str	x0, [sp, #40]
   19408:	ldr	x0, [sp, #40]
   1940c:	cmp	x0, #0x0
   19410:	cset	w0, eq  // eq = none
   19414:	and	w0, w0, #0xff
   19418:	and	x0, x0, #0xff
   1941c:	cmp	x0, #0x0
   19420:	b.eq	1942c <re_set_registers+0x872c>  // b.none
   19424:	mov	w0, #0xc                   	// #12
   19428:	b	194cc <re_set_registers+0x87cc>
   1942c:	ldr	x0, [sp, #24]
   19430:	ldr	x1, [sp, #40]
   19434:	str	x1, [x0, #136]
   19438:	ldr	x0, [sp, #56]
   1943c:	ldrb	w0, [x0, #96]
   19440:	cmp	w0, #0x0
   19444:	b.eq	19494 <re_set_registers+0x8794>  // b.none
   19448:	ldr	x0, [sp, #56]
   1944c:	ldr	w0, [x0, #104]
   19450:	cmp	w0, #0x1
   19454:	b.le	19488 <re_set_registers+0x8788>
   19458:	ldr	x0, [sp, #56]
   1945c:	bl	3768 <grub_mod_fini+0x3248>
   19460:	str	w0, [sp, #52]
   19464:	ldr	w0, [sp, #52]
   19468:	cmp	w0, #0x0
   1946c:	cset	w0, ne  // ne = any
   19470:	and	w0, w0, #0xff
   19474:	and	x0, x0, #0xff
   19478:	cmp	x0, #0x0
   1947c:	b.eq	194c8 <re_set_registers+0x87c8>  // b.none
   19480:	ldr	w0, [sp, #52]
   19484:	b	194cc <re_set_registers+0x87cc>
   19488:	ldr	x0, [sp, #56]
   1948c:	bl	4434 <grub_mod_fini+0x3f14>
   19490:	b	194c8 <re_set_registers+0x87c8>
   19494:	ldr	x0, [sp, #56]
   19498:	ldr	w0, [x0, #104]
   1949c:	cmp	w0, #0x1
   194a0:	b.le	194b0 <re_set_registers+0x87b0>
   194a4:	ldr	x0, [sp, #56]
   194a8:	bl	33f8 <grub_mod_fini+0x2ed8>
   194ac:	b	194c8 <re_set_registers+0x87c8>
   194b0:	ldr	x0, [sp, #56]
   194b4:	ldr	x0, [x0, #80]
   194b8:	cmp	x0, #0x0
   194bc:	b.eq	194c8 <re_set_registers+0x87c8>  // b.none
   194c0:	ldr	x0, [sp, #56]
   194c4:	bl	4530 <grub_mod_fini+0x4010>
   194c8:	mov	w0, #0x0                   	// #0
   194cc:	ldp	x29, x30, [sp], #64
   194d0:	ret
   194d4:	stp	x29, x30, [sp, #-48]!
   194d8:	mov	x29, sp
   194dc:	str	x0, [sp, #24]
   194e0:	str	w1, [sp, #20]
   194e4:	str	w2, [sp, #16]
   194e8:	ldr	x0, [sp, #24]
   194ec:	ldr	w1, [sp, #20]
   194f0:	str	w1, [x0, #120]
   194f4:	ldr	x0, [sp, #24]
   194f8:	mov	w1, #0xffffffff            	// #-1
   194fc:	str	w1, [x0, #124]
   19500:	ldr	w0, [sp, #16]
   19504:	cmp	w0, #0x0
   19508:	b.le	195d8 <re_set_registers+0x88d8>
   1950c:	mov	x0, #0x14                  	// #20
   19510:	str	x0, [sp, #40]
   19514:	mov	x1, #0xffffffffffffffff    	// #-1
   19518:	ldr	x0, [sp, #40]
   1951c:	udiv	x0, x1, x0
   19520:	mov	x2, #0x7fffffff            	// #2147483647
   19524:	mov	x1, #0x7fffffff            	// #2147483647
   19528:	cmp	x0, x2
   1952c:	csel	x1, x0, x1, ls  // ls = plast
   19530:	ldrsw	x0, [sp, #16]
   19534:	cmp	x1, x0
   19538:	cset	w0, cc  // cc = lo, ul, last
   1953c:	and	w0, w0, #0xff
   19540:	and	x0, x0, #0xff
   19544:	cmp	x0, #0x0
   19548:	b.eq	19554 <re_set_registers+0x8854>  // b.none
   1954c:	mov	w0, #0xc                   	// #12
   19550:	b	19600 <re_set_registers+0x8900>
   19554:	ldrsw	x1, [sp, #16]
   19558:	mov	x0, x1
   1955c:	lsl	x0, x0, #2
   19560:	add	x0, x0, x1
   19564:	lsl	x0, x0, #2
   19568:	bl	2250 <grub_mod_fini+0x1d30>
   1956c:	mov	x1, x0
   19570:	ldr	x0, [sp, #24]
   19574:	str	x1, [x0, #160]
   19578:	ldrsw	x0, [sp, #16]
   1957c:	lsl	x0, x0, #3
   19580:	bl	2250 <grub_mod_fini+0x1d30>
   19584:	mov	x1, x0
   19588:	ldr	x0, [sp, #24]
   1958c:	str	x1, [x0, #184]
   19590:	ldr	x0, [sp, #24]
   19594:	ldr	x0, [x0, #160]
   19598:	cmp	x0, #0x0
   1959c:	cset	w0, eq  // eq = none
   195a0:	and	w0, w0, #0xff
   195a4:	and	x0, x0, #0xff
   195a8:	cmp	x0, #0x0
   195ac:	b.ne	195d0 <re_set_registers+0x88d0>  // b.any
   195b0:	ldr	x0, [sp, #24]
   195b4:	ldr	x0, [x0, #184]
   195b8:	cmp	x0, #0x0
   195bc:	cset	w0, eq  // eq = none
   195c0:	and	w0, w0, #0xff
   195c4:	and	x0, x0, #0xff
   195c8:	cmp	x0, #0x0
   195cc:	b.eq	195d8 <re_set_registers+0x88d8>  // b.none
   195d0:	mov	w0, #0xc                   	// #12
   195d4:	b	19600 <re_set_registers+0x8900>
   195d8:	ldr	x0, [sp, #24]
   195dc:	ldr	w1, [sp, #16]
   195e0:	str	w1, [x0, #152]
   195e4:	ldr	x0, [sp, #24]
   195e8:	mov	w1, #0x1                   	// #1
   195ec:	str	w1, [x0, #168]
   195f0:	ldr	x0, [sp, #24]
   195f4:	ldr	w1, [sp, #16]
   195f8:	str	w1, [x0, #176]
   195fc:	mov	w0, #0x0                   	// #0
   19600:	ldp	x29, x30, [sp], #48
   19604:	ret
   19608:	stp	x29, x30, [sp, #-64]!
   1960c:	mov	x29, sp
   19610:	str	x0, [sp, #24]
   19614:	str	wzr, [sp, #60]
   19618:	b	196dc <re_set_registers+0x89dc>
   1961c:	ldr	x0, [sp, #24]
   19620:	ldr	x1, [x0, #184]
   19624:	ldrsw	x0, [sp, #60]
   19628:	lsl	x0, x0, #3
   1962c:	add	x0, x1, x0
   19630:	ldr	x0, [x0]
   19634:	str	x0, [sp, #48]
   19638:	str	wzr, [sp, #56]
   1963c:	b	1967c <re_set_registers+0x897c>
   19640:	ldr	x0, [sp, #48]
   19644:	ldr	x1, [x0, #24]
   19648:	ldrsw	x0, [sp, #56]
   1964c:	lsl	x0, x0, #3
   19650:	add	x0, x1, x0
   19654:	ldr	x0, [x0]
   19658:	str	x0, [sp, #40]
   1965c:	ldr	x0, [sp, #40]
   19660:	ldr	x0, [x0, #16]
   19664:	bl	2230 <grub_mod_fini+0x1d10>
   19668:	ldr	x0, [sp, #40]
   1966c:	bl	2230 <grub_mod_fini+0x1d10>
   19670:	ldr	w0, [sp, #56]
   19674:	add	w0, w0, #0x1
   19678:	str	w0, [sp, #56]
   1967c:	ldr	x0, [sp, #48]
   19680:	ldr	w0, [x0, #20]
   19684:	ldr	w1, [sp, #56]
   19688:	cmp	w1, w0
   1968c:	b.lt	19640 <re_set_registers+0x8940>  // b.tstop
   19690:	ldr	x0, [sp, #48]
   19694:	ldr	x0, [x0, #24]
   19698:	bl	2230 <grub_mod_fini+0x1d10>
   1969c:	ldr	x0, [sp, #48]
   196a0:	ldr	x0, [x0, #8]
   196a4:	cmp	x0, #0x0
   196a8:	b.eq	196c8 <re_set_registers+0x89c8>  // b.none
   196ac:	ldr	x0, [sp, #48]
   196b0:	ldr	x0, [x0, #8]
   196b4:	ldr	x0, [x0, #8]
   196b8:	bl	2230 <grub_mod_fini+0x1d10>
   196bc:	ldr	x0, [sp, #48]
   196c0:	ldr	x0, [x0, #8]
   196c4:	bl	2230 <grub_mod_fini+0x1d10>
   196c8:	ldr	x0, [sp, #48]
   196cc:	bl	2230 <grub_mod_fini+0x1d10>
   196d0:	ldr	w0, [sp, #60]
   196d4:	add	w0, w0, #0x1
   196d8:	str	w0, [sp, #60]
   196dc:	ldr	x0, [sp, #24]
   196e0:	ldr	w0, [x0, #172]
   196e4:	ldr	w1, [sp, #60]
   196e8:	cmp	w1, w0
   196ec:	b.lt	1961c <re_set_registers+0x891c>  // b.tstop
   196f0:	ldr	x0, [sp, #24]
   196f4:	str	wzr, [x0, #172]
   196f8:	ldr	x0, [sp, #24]
   196fc:	str	wzr, [x0, #148]
   19700:	nop
   19704:	ldp	x29, x30, [sp], #64
   19708:	ret
   1970c:	stp	x29, x30, [sp, #-32]!
   19710:	mov	x29, sp
   19714:	str	x0, [sp, #24]
   19718:	ldr	x0, [sp, #24]
   1971c:	bl	19608 <re_set_registers+0x8908>
   19720:	ldr	x0, [sp, #24]
   19724:	ldr	x0, [x0, #184]
   19728:	bl	2230 <grub_mod_fini+0x1d10>
   1972c:	ldr	x0, [sp, #24]
   19730:	ldr	x0, [x0, #160]
   19734:	bl	2230 <grub_mod_fini+0x1d10>
   19738:	nop
   1973c:	ldp	x29, x30, [sp], #32
   19740:	ret
   19744:	stp	x29, x30, [sp, #-64]!
   19748:	mov	x29, sp
   1974c:	str	x0, [sp, #40]
   19750:	str	w1, [sp, #36]
   19754:	str	w2, [sp, #32]
   19758:	str	w3, [sp, #28]
   1975c:	str	w4, [sp, #24]
   19760:	ldr	x0, [sp, #40]
   19764:	ldr	w1, [x0, #148]
   19768:	ldr	x0, [sp, #40]
   1976c:	ldr	w0, [x0, #152]
   19770:	cmp	w1, w0
   19774:	b.lt	19854 <re_set_registers+0x8b54>  // b.tstop
   19778:	ldr	x0, [sp, #40]
   1977c:	ldr	x2, [x0, #160]
   19780:	ldr	x0, [sp, #40]
   19784:	ldr	w0, [x0, #152]
   19788:	lsl	w0, w0, #1
   1978c:	sxtw	x1, w0
   19790:	mov	x0, x1
   19794:	lsl	x0, x0, #2
   19798:	add	x0, x0, x1
   1979c:	lsl	x0, x0, #2
   197a0:	mov	x1, x0
   197a4:	mov	x0, x2
   197a8:	bl	2294 <grub_mod_fini+0x1d74>
   197ac:	str	x0, [sp, #56]
   197b0:	ldr	x0, [sp, #56]
   197b4:	cmp	x0, #0x0
   197b8:	cset	w0, eq  // eq = none
   197bc:	and	w0, w0, #0xff
   197c0:	and	x0, x0, #0xff
   197c4:	cmp	x0, #0x0
   197c8:	b.eq	197e0 <re_set_registers+0x8ae0>  // b.none
   197cc:	ldr	x0, [sp, #40]
   197d0:	ldr	x0, [x0, #160]
   197d4:	bl	2230 <grub_mod_fini+0x1d10>
   197d8:	mov	w0, #0xc                   	// #12
   197dc:	b	19a4c <re_set_registers+0x8d4c>
   197e0:	ldr	x0, [sp, #40]
   197e4:	ldr	x1, [sp, #56]
   197e8:	str	x1, [x0, #160]
   197ec:	ldr	x0, [sp, #40]
   197f0:	ldr	x2, [x0, #160]
   197f4:	ldr	x0, [sp, #40]
   197f8:	ldr	w0, [x0, #148]
   197fc:	sxtw	x1, w0
   19800:	mov	x0, x1
   19804:	lsl	x0, x0, #2
   19808:	add	x0, x0, x1
   1980c:	lsl	x0, x0, #2
   19810:	add	x3, x2, x0
   19814:	ldr	x0, [sp, #40]
   19818:	ldr	w0, [x0, #152]
   1981c:	sxtw	x1, w0
   19820:	mov	x0, x1
   19824:	lsl	x0, x0, #2
   19828:	add	x0, x0, x1
   1982c:	lsl	x0, x0, #2
   19830:	mov	x2, x0
   19834:	mov	w1, #0x0                   	// #0
   19838:	mov	x0, x3
   1983c:	bl	0 <grub_memset>
   19840:	ldr	x0, [sp, #40]
   19844:	ldr	w0, [x0, #152]
   19848:	lsl	w1, w0, #1
   1984c:	ldr	x0, [sp, #40]
   19850:	str	w1, [x0, #152]
   19854:	ldr	x0, [sp, #40]
   19858:	ldr	w0, [x0, #148]
   1985c:	cmp	w0, #0x0
   19860:	b.le	198d4 <re_set_registers+0x8bd4>
   19864:	ldr	x0, [sp, #40]
   19868:	ldr	x2, [x0, #160]
   1986c:	ldr	x0, [sp, #40]
   19870:	ldr	w0, [x0, #148]
   19874:	sxtw	x1, w0
   19878:	mov	x0, x1
   1987c:	lsl	x0, x0, #2
   19880:	add	x0, x0, x1
   19884:	lsl	x0, x0, #2
   19888:	sub	x0, x0, #0x14
   1988c:	add	x0, x2, x0
   19890:	ldr	w0, [x0, #4]
   19894:	ldr	w1, [sp, #32]
   19898:	cmp	w1, w0
   1989c:	b.ne	198d4 <re_set_registers+0x8bd4>  // b.any
   198a0:	ldr	x0, [sp, #40]
   198a4:	ldr	x2, [x0, #160]
   198a8:	ldr	x0, [sp, #40]
   198ac:	ldr	w0, [x0, #148]
   198b0:	sxtw	x1, w0
   198b4:	mov	x0, x1
   198b8:	lsl	x0, x0, #2
   198bc:	add	x0, x0, x1
   198c0:	lsl	x0, x0, #2
   198c4:	sub	x0, x0, #0x14
   198c8:	add	x0, x2, x0
   198cc:	mov	w1, #0x1                   	// #1
   198d0:	strb	w1, [x0, #16]
   198d4:	ldr	x0, [sp, #40]
   198d8:	ldr	x2, [x0, #160]
   198dc:	ldr	x0, [sp, #40]
   198e0:	ldr	w0, [x0, #148]
   198e4:	sxtw	x1, w0
   198e8:	mov	x0, x1
   198ec:	lsl	x0, x0, #2
   198f0:	add	x0, x0, x1
   198f4:	lsl	x0, x0, #2
   198f8:	add	x0, x2, x0
   198fc:	ldr	w1, [sp, #36]
   19900:	str	w1, [x0]
   19904:	ldr	x0, [sp, #40]
   19908:	ldr	x2, [x0, #160]
   1990c:	ldr	x0, [sp, #40]
   19910:	ldr	w0, [x0, #148]
   19914:	sxtw	x1, w0
   19918:	mov	x0, x1
   1991c:	lsl	x0, x0, #2
   19920:	add	x0, x0, x1
   19924:	lsl	x0, x0, #2
   19928:	add	x0, x2, x0
   1992c:	ldr	w1, [sp, #32]
   19930:	str	w1, [x0, #4]
   19934:	ldr	x0, [sp, #40]
   19938:	ldr	x2, [x0, #160]
   1993c:	ldr	x0, [sp, #40]
   19940:	ldr	w0, [x0, #148]
   19944:	sxtw	x1, w0
   19948:	mov	x0, x1
   1994c:	lsl	x0, x0, #2
   19950:	add	x0, x0, x1
   19954:	lsl	x0, x0, #2
   19958:	add	x0, x2, x0
   1995c:	ldr	w1, [sp, #28]
   19960:	str	w1, [x0, #8]
   19964:	ldr	x0, [sp, #40]
   19968:	ldr	x2, [x0, #160]
   1996c:	ldr	x0, [sp, #40]
   19970:	ldr	w0, [x0, #148]
   19974:	sxtw	x1, w0
   19978:	mov	x0, x1
   1997c:	lsl	x0, x0, #2
   19980:	add	x0, x0, x1
   19984:	lsl	x0, x0, #2
   19988:	add	x0, x2, x0
   1998c:	ldr	w1, [sp, #24]
   19990:	str	w1, [x0, #12]
   19994:	ldr	w1, [sp, #28]
   19998:	ldr	w0, [sp, #24]
   1999c:	cmp	w1, w0
   199a0:	b.ne	199ac <re_set_registers+0x8cac>  // b.any
   199a4:	mov	w3, #0xffff                	// #65535
   199a8:	b	199b0 <re_set_registers+0x8cb0>
   199ac:	mov	w3, #0x0                   	// #0
   199b0:	ldr	x0, [sp, #40]
   199b4:	ldr	x2, [x0, #160]
   199b8:	ldr	x0, [sp, #40]
   199bc:	ldr	w0, [x0, #148]
   199c0:	sxtw	x1, w0
   199c4:	mov	x0, x1
   199c8:	lsl	x0, x0, #2
   199cc:	add	x0, x0, x1
   199d0:	lsl	x0, x0, #2
   199d4:	add	x0, x2, x0
   199d8:	mov	w1, w3
   199dc:	strh	w1, [x0, #18]
   199e0:	ldr	x0, [sp, #40]
   199e4:	ldr	x2, [x0, #160]
   199e8:	ldr	x0, [sp, #40]
   199ec:	ldr	w0, [x0, #148]
   199f0:	add	w3, w0, #0x1
   199f4:	ldr	x1, [sp, #40]
   199f8:	str	w3, [x1, #148]
   199fc:	sxtw	x1, w0
   19a00:	mov	x0, x1
   19a04:	lsl	x0, x0, #2
   19a08:	add	x0, x0, x1
   19a0c:	lsl	x0, x0, #2
   19a10:	add	x0, x2, x0
   19a14:	strb	wzr, [x0, #16]
   19a18:	ldr	x0, [sp, #40]
   19a1c:	ldr	w1, [x0, #168]
   19a20:	ldr	w2, [sp, #24]
   19a24:	ldr	w0, [sp, #28]
   19a28:	sub	w0, w2, w0
   19a2c:	cmp	w1, w0
   19a30:	b.ge	19a48 <re_set_registers+0x8d48>  // b.tcont
   19a34:	ldr	w1, [sp, #24]
   19a38:	ldr	w0, [sp, #28]
   19a3c:	sub	w1, w1, w0
   19a40:	ldr	x0, [sp, #40]
   19a44:	str	w1, [x0, #168]
   19a48:	mov	w0, #0x0                   	// #0
   19a4c:	ldp	x29, x30, [sp], #64
   19a50:	ret
   19a54:	sub	sp, sp, #0x20
   19a58:	str	x0, [sp, #8]
   19a5c:	str	w1, [sp, #4]
   19a60:	ldr	x0, [sp, #8]
   19a64:	ldr	w0, [x0, #148]
   19a68:	str	w0, [sp, #24]
   19a6c:	ldr	w0, [sp, #24]
   19a70:	str	w0, [sp, #20]
   19a74:	str	wzr, [sp, #28]
   19a78:	b	19ae0 <re_set_registers+0x8de0>
   19a7c:	ldr	w1, [sp, #28]
   19a80:	ldr	w0, [sp, #24]
   19a84:	add	w0, w1, w0
   19a88:	lsr	w1, w0, #31
   19a8c:	add	w0, w1, w0
   19a90:	asr	w0, w0, #1
   19a94:	str	w0, [sp, #16]
   19a98:	ldr	x0, [sp, #8]
   19a9c:	ldr	x2, [x0, #160]
   19aa0:	ldrsw	x1, [sp, #16]
   19aa4:	mov	x0, x1
   19aa8:	lsl	x0, x0, #2
   19aac:	add	x0, x0, x1
   19ab0:	lsl	x0, x0, #2
   19ab4:	add	x0, x2, x0
   19ab8:	ldr	w0, [x0, #4]
   19abc:	ldr	w1, [sp, #4]
   19ac0:	cmp	w1, w0
   19ac4:	b.le	19ad8 <re_set_registers+0x8dd8>
   19ac8:	ldr	w0, [sp, #16]
   19acc:	add	w0, w0, #0x1
   19ad0:	str	w0, [sp, #28]
   19ad4:	b	19ae0 <re_set_registers+0x8de0>
   19ad8:	ldr	w0, [sp, #16]
   19adc:	str	w0, [sp, #24]
   19ae0:	ldr	w1, [sp, #28]
   19ae4:	ldr	w0, [sp, #24]
   19ae8:	cmp	w1, w0
   19aec:	b.lt	19a7c <re_set_registers+0x8d7c>  // b.tstop
   19af0:	ldr	w1, [sp, #28]
   19af4:	ldr	w0, [sp, #20]
   19af8:	cmp	w1, w0
   19afc:	b.ge	19b38 <re_set_registers+0x8e38>  // b.tcont
   19b00:	ldr	x0, [sp, #8]
   19b04:	ldr	x2, [x0, #160]
   19b08:	ldrsw	x1, [sp, #28]
   19b0c:	mov	x0, x1
   19b10:	lsl	x0, x0, #2
   19b14:	add	x0, x0, x1
   19b18:	lsl	x0, x0, #2
   19b1c:	add	x0, x2, x0
   19b20:	ldr	w0, [x0, #4]
   19b24:	ldr	w1, [sp, #4]
   19b28:	cmp	w1, w0
   19b2c:	b.ne	19b38 <re_set_registers+0x8e38>  // b.any
   19b30:	ldr	w0, [sp, #28]
   19b34:	b	19b3c <re_set_registers+0x8e3c>
   19b38:	mov	w0, #0xffffffff            	// #-1
   19b3c:	add	sp, sp, #0x20
   19b40:	ret
   19b44:	stp	x29, x30, [sp, #-64]!
   19b48:	mov	x29, sp
   19b4c:	str	x19, [sp, #16]
   19b50:	str	x0, [sp, #40]
   19b54:	str	w1, [sp, #36]
   19b58:	str	w2, [sp, #32]
   19b5c:	ldr	x0, [sp, #40]
   19b60:	ldr	w1, [x0, #172]
   19b64:	ldr	x0, [sp, #40]
   19b68:	ldr	w0, [x0, #176]
   19b6c:	cmp	w1, w0
   19b70:	cset	w0, eq  // eq = none
   19b74:	and	w0, w0, #0xff
   19b78:	and	x0, x0, #0xff
   19b7c:	cmp	x0, #0x0
   19b80:	b.eq	19bf0 <re_set_registers+0x8ef0>  // b.none
   19b84:	ldr	x0, [sp, #40]
   19b88:	ldr	w0, [x0, #176]
   19b8c:	lsl	w0, w0, #1
   19b90:	str	w0, [sp, #60]
   19b94:	ldr	x0, [sp, #40]
   19b98:	ldr	x2, [x0, #184]
   19b9c:	ldrsw	x0, [sp, #60]
   19ba0:	lsl	x0, x0, #3
   19ba4:	mov	x1, x0
   19ba8:	mov	x0, x2
   19bac:	bl	2294 <grub_mod_fini+0x1d74>
   19bb0:	str	x0, [sp, #48]
   19bb4:	ldr	x0, [sp, #48]
   19bb8:	cmp	x0, #0x0
   19bbc:	cset	w0, eq  // eq = none
   19bc0:	and	w0, w0, #0xff
   19bc4:	and	x0, x0, #0xff
   19bc8:	cmp	x0, #0x0
   19bcc:	b.eq	19bd8 <re_set_registers+0x8ed8>  // b.none
   19bd0:	mov	w0, #0xc                   	// #12
   19bd4:	b	19cbc <re_set_registers+0x8fbc>
   19bd8:	ldr	x0, [sp, #40]
   19bdc:	ldr	x1, [sp, #48]
   19be0:	str	x1, [x0, #184]
   19be4:	ldr	x0, [sp, #40]
   19be8:	ldr	w1, [sp, #60]
   19bec:	str	w1, [x0, #176]
   19bf0:	ldr	x0, [sp, #40]
   19bf4:	ldr	x1, [x0, #184]
   19bf8:	ldr	x0, [sp, #40]
   19bfc:	ldr	w0, [x0, #172]
   19c00:	sxtw	x0, w0
   19c04:	lsl	x0, x0, #3
   19c08:	add	x19, x1, x0
   19c0c:	mov	x1, #0x20                  	// #32
   19c10:	mov	x0, #0x1                   	// #1
   19c14:	bl	226c <grub_mod_fini+0x1d4c>
   19c18:	str	x0, [x19]
   19c1c:	ldr	x0, [sp, #40]
   19c20:	ldr	x1, [x0, #184]
   19c24:	ldr	x0, [sp, #40]
   19c28:	ldr	w0, [x0, #172]
   19c2c:	sxtw	x0, w0
   19c30:	lsl	x0, x0, #3
   19c34:	add	x0, x1, x0
   19c38:	ldr	x0, [x0]
   19c3c:	cmp	x0, #0x0
   19c40:	cset	w0, eq  // eq = none
   19c44:	and	w0, w0, #0xff
   19c48:	and	x0, x0, #0xff
   19c4c:	cmp	x0, #0x0
   19c50:	b.eq	19c5c <re_set_registers+0x8f5c>  // b.none
   19c54:	mov	w0, #0xc                   	// #12
   19c58:	b	19cbc <re_set_registers+0x8fbc>
   19c5c:	ldr	x0, [sp, #40]
   19c60:	ldr	x1, [x0, #184]
   19c64:	ldr	x0, [sp, #40]
   19c68:	ldr	w0, [x0, #172]
   19c6c:	sxtw	x0, w0
   19c70:	lsl	x0, x0, #3
   19c74:	add	x0, x1, x0
   19c78:	ldr	x0, [x0]
   19c7c:	ldr	w1, [sp, #36]
   19c80:	str	w1, [x0, #4]
   19c84:	ldr	x0, [sp, #40]
   19c88:	ldr	x1, [x0, #184]
   19c8c:	ldr	x0, [sp, #40]
   19c90:	ldr	w0, [x0, #172]
   19c94:	add	w3, w0, #0x1
   19c98:	ldr	x2, [sp, #40]
   19c9c:	str	w3, [x2, #172]
   19ca0:	sxtw	x0, w0
   19ca4:	lsl	x0, x0, #3
   19ca8:	add	x0, x1, x0
   19cac:	ldr	x0, [x0]
   19cb0:	ldr	w1, [sp, #32]
   19cb4:	str	w1, [x0]
   19cb8:	mov	w0, #0x0                   	// #0
   19cbc:	ldr	x19, [sp, #16]
   19cc0:	ldp	x29, x30, [sp], #64
   19cc4:	ret
   19cc8:	stp	x29, x30, [sp, #-64]!
   19ccc:	mov	x29, sp
   19cd0:	str	x0, [sp, #24]
   19cd4:	str	w1, [sp, #20]
   19cd8:	str	w2, [sp, #16]
   19cdc:	ldr	x0, [sp, #24]
   19ce0:	ldr	w1, [x0, #20]
   19ce4:	ldr	x0, [sp, #24]
   19ce8:	ldr	w0, [x0, #16]
   19cec:	cmp	w1, w0
   19cf0:	cset	w0, eq  // eq = none
   19cf4:	and	w0, w0, #0xff
   19cf8:	and	x0, x0, #0xff
   19cfc:	cmp	x0, #0x0
   19d00:	b.eq	19d74 <re_set_registers+0x9074>  // b.none
   19d04:	ldr	x0, [sp, #24]
   19d08:	ldr	w0, [x0, #16]
   19d0c:	lsl	w0, w0, #1
   19d10:	add	w0, w0, #0x1
   19d14:	str	w0, [sp, #60]
   19d18:	ldr	x0, [sp, #24]
   19d1c:	ldr	x2, [x0, #24]
   19d20:	ldrsw	x0, [sp, #60]
   19d24:	lsl	x0, x0, #3
   19d28:	mov	x1, x0
   19d2c:	mov	x0, x2
   19d30:	bl	2294 <grub_mod_fini+0x1d74>
   19d34:	str	x0, [sp, #48]
   19d38:	ldr	x0, [sp, #48]
   19d3c:	cmp	x0, #0x0
   19d40:	cset	w0, eq  // eq = none
   19d44:	and	w0, w0, #0xff
   19d48:	and	x0, x0, #0xff
   19d4c:	cmp	x0, #0x0
   19d50:	b.eq	19d5c <re_set_registers+0x905c>  // b.none
   19d54:	mov	x0, #0x0                   	// #0
   19d58:	b	19df4 <re_set_registers+0x90f4>
   19d5c:	ldr	x0, [sp, #24]
   19d60:	ldr	x1, [sp, #48]
   19d64:	str	x1, [x0, #24]
   19d68:	ldr	x0, [sp, #24]
   19d6c:	ldr	w1, [sp, #60]
   19d70:	str	w1, [x0, #16]
   19d74:	mov	x1, #0x18                  	// #24
   19d78:	mov	x0, #0x1                   	// #1
   19d7c:	bl	226c <grub_mod_fini+0x1d4c>
   19d80:	str	x0, [sp, #40]
   19d84:	ldr	x0, [sp, #40]
   19d88:	cmp	x0, #0x0
   19d8c:	cset	w0, ne  // ne = any
   19d90:	and	w0, w0, #0xff
   19d94:	and	x0, x0, #0xff
   19d98:	cmp	x0, #0x0
   19d9c:	b.eq	19df0 <re_set_registers+0x90f0>  // b.none
   19da0:	ldr	x0, [sp, #24]
   19da4:	ldr	x1, [x0, #24]
   19da8:	ldr	x0, [sp, #24]
   19dac:	ldr	w0, [x0, #20]
   19db0:	sxtw	x0, w0
   19db4:	lsl	x0, x0, #3
   19db8:	add	x0, x1, x0
   19dbc:	ldr	x1, [sp, #40]
   19dc0:	str	x1, [x0]
   19dc4:	ldr	x0, [sp, #40]
   19dc8:	ldr	w1, [sp, #20]
   19dcc:	str	w1, [x0]
   19dd0:	ldr	x0, [sp, #40]
   19dd4:	ldr	w1, [sp, #16]
   19dd8:	str	w1, [x0, #4]
   19ddc:	ldr	x0, [sp, #24]
   19de0:	ldr	w0, [x0, #20]
   19de4:	add	w1, w0, #0x1
   19de8:	ldr	x0, [sp, #24]
   19dec:	str	w1, [x0, #20]
   19df0:	ldr	x0, [sp, #40]
   19df4:	ldp	x29, x30, [sp], #64
   19df8:	ret
   19dfc:	stp	x29, x30, [sp, #-48]!
   19e00:	mov	x29, sp
   19e04:	str	x0, [sp, #40]
   19e08:	str	x1, [sp, #32]
   19e0c:	str	x2, [sp, #24]
   19e10:	str	w3, [sp, #20]
   19e14:	str	w4, [sp, #16]
   19e18:	ldr	x0, [sp, #40]
   19e1c:	ldr	x1, [sp, #32]
   19e20:	str	x1, [x0]
   19e24:	ldr	x0, [sp, #40]
   19e28:	ldr	x1, [sp, #24]
   19e2c:	str	x1, [x0, #8]
   19e30:	ldr	x0, [sp, #40]
   19e34:	ldr	w1, [sp, #20]
   19e38:	str	w1, [x0, #16]
   19e3c:	ldr	x0, [sp, #40]
   19e40:	ldr	w1, [sp, #16]
   19e44:	str	w1, [x0, #20]
   19e48:	ldr	x0, [sp, #40]
   19e4c:	add	x0, x0, #0x18
   19e50:	mov	x2, #0x10                  	// #16
   19e54:	mov	w1, #0x0                   	// #0
   19e58:	bl	0 <grub_memset>
   19e5c:	nop
   19e60:	ldp	x29, x30, [sp], #48
   19e64:	ret
