
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//div_test.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <test32>:
       0:	sub	sp, sp, #0x40
       4:	stp	x29, x30, [sp, #16]
       8:	add	x29, sp, #0x10
       c:	str	w0, [sp, #44]
      10:	str	w1, [sp, #40]
      14:	ldr	w0, [sp, #40]
      18:	cmp	w0, #0x0
      1c:	b.eq	2e0 <test32+0x2e0>  // b.none
      20:	ldr	w0, [sp, #44]
      24:	ldr	w1, [sp, #40]
      28:	add	x2, sp, #0x30
      2c:	bl	0 <grub_divmod64>
      30:	str	x0, [sp, #56]
      34:	ldr	w1, [sp, #40]
      38:	ldr	x0, [sp, #48]
      3c:	cmp	x1, x0
      40:	cset	w0, hi  // hi = pmore
      44:	and	w0, w0, #0xff
      48:	mov	w8, w0
      4c:	ldr	w0, [sp, #44]
      50:	ldr	w1, [sp, #40]
      54:	ldr	x2, [sp, #48]
      58:	str	x2, [sp]
      5c:	mov	x7, x1
      60:	mov	x6, x0
      64:	adrp	x0, 0 <test32>
      68:	add	x0, x0, #0x0
      6c:	ldr	x5, [x0]
      70:	adrp	x0, 0 <test32>
      74:	add	x0, x0, #0x0
      78:	ldr	x4, [x0]
      7c:	mov	w3, #0x28                  	// #40
      80:	adrp	x0, 0 <test32>
      84:	add	x0, x0, #0x0
      88:	ldr	x2, [x0]
      8c:	adrp	x0, 0 <test32>
      90:	add	x0, x0, #0x0
      94:	ldr	x1, [x0]
      98:	mov	w0, w8
      9c:	bl	0 <grub_test_assert_helper>
      a0:	ldr	w1, [sp, #40]
      a4:	ldr	x0, [sp, #56]
      a8:	mul	x1, x1, x0
      ac:	ldr	x0, [sp, #48]
      b0:	add	x1, x1, x0
      b4:	ldr	w0, [sp, #44]
      b8:	cmp	x1, x0
      bc:	cset	w0, eq  // eq = none
      c0:	and	w0, w0, #0xff
      c4:	mov	w8, w0
      c8:	ldr	x1, [sp, #56]
      cc:	ldr	w2, [sp, #40]
      d0:	ldr	x0, [sp, #48]
      d4:	mov	x3, x0
      d8:	ldr	w0, [sp, #44]
      dc:	str	x0, [sp, #8]
      e0:	str	x3, [sp]
      e4:	mov	x7, x2
      e8:	mov	x6, x1
      ec:	adrp	x0, 0 <test32>
      f0:	add	x0, x0, #0x0
      f4:	ldr	x5, [x0]
      f8:	adrp	x0, 0 <test32>
      fc:	add	x0, x0, #0x0
     100:	ldr	x4, [x0]
     104:	mov	w3, #0x2a                  	// #42
     108:	adrp	x0, 0 <test32>
     10c:	add	x0, x0, #0x0
     110:	ldr	x2, [x0]
     114:	adrp	x0, 0 <test32>
     118:	add	x0, x0, #0x0
     11c:	ldr	x1, [x0]
     120:	mov	w0, w8
     124:	bl	0 <grub_test_assert_helper>
     128:	ldr	x0, [sp, #56]
     12c:	lsr	x0, x0, #32
     130:	cmp	x0, #0x0
     134:	cset	w0, eq  // eq = none
     138:	and	w0, w0, #0xff
     13c:	mov	w8, w0
     140:	ldr	w0, [sp, #44]
     144:	ldr	w1, [sp, #40]
     148:	mov	x7, x1
     14c:	mov	x6, x0
     150:	adrp	x0, 0 <test32>
     154:	add	x0, x0, #0x0
     158:	ldr	x5, [x0]
     15c:	adrp	x0, 0 <test32>
     160:	add	x0, x0, #0x0
     164:	ldr	x4, [x0]
     168:	mov	w3, #0x2d                  	// #45
     16c:	adrp	x0, 0 <test32>
     170:	add	x0, x0, #0x0
     174:	ldr	x2, [x0]
     178:	adrp	x0, 0 <test32>
     17c:	add	x0, x0, #0x0
     180:	ldr	x1, [x0]
     184:	mov	w0, w8
     188:	bl	0 <grub_test_assert_helper>
     18c:	ldr	x0, [sp, #48]
     190:	lsr	x0, x0, #32
     194:	cmp	x0, #0x0
     198:	cset	w0, eq  // eq = none
     19c:	and	w0, w0, #0xff
     1a0:	mov	w8, w0
     1a4:	ldr	w0, [sp, #44]
     1a8:	ldr	w1, [sp, #40]
     1ac:	mov	x7, x1
     1b0:	mov	x6, x0
     1b4:	adrp	x0, 0 <test32>
     1b8:	add	x0, x0, #0x0
     1bc:	ldr	x5, [x0]
     1c0:	adrp	x0, 0 <test32>
     1c4:	add	x0, x0, #0x0
     1c8:	ldr	x4, [x0]
     1cc:	mov	w3, #0x2f                  	// #47
     1d0:	adrp	x0, 0 <test32>
     1d4:	add	x0, x0, #0x0
     1d8:	ldr	x2, [x0]
     1dc:	adrp	x0, 0 <test32>
     1e0:	add	x0, x0, #0x0
     1e4:	ldr	x1, [x0]
     1e8:	mov	w0, w8
     1ec:	bl	0 <grub_test_assert_helper>
     1f0:	ldr	w1, [sp, #44]
     1f4:	ldr	w0, [sp, #40]
     1f8:	udiv	w0, w1, w0
     1fc:	mov	w0, w0
     200:	ldr	x1, [sp, #56]
     204:	cmp	x1, x0
     208:	cset	w0, eq  // eq = none
     20c:	and	w0, w0, #0xff
     210:	mov	w8, w0
     214:	ldr	w0, [sp, #44]
     218:	ldr	w1, [sp, #40]
     21c:	mov	x7, x1
     220:	mov	x6, x0
     224:	adrp	x0, 0 <test32>
     228:	add	x0, x0, #0x0
     22c:	ldr	x5, [x0]
     230:	adrp	x0, 0 <test32>
     234:	add	x0, x0, #0x0
     238:	ldr	x4, [x0]
     23c:	mov	w3, #0x35                  	// #53
     240:	adrp	x0, 0 <test32>
     244:	add	x0, x0, #0x0
     248:	ldr	x2, [x0]
     24c:	adrp	x0, 0 <test32>
     250:	add	x0, x0, #0x0
     254:	ldr	x1, [x0]
     258:	mov	w0, w8
     25c:	bl	0 <grub_test_assert_helper>
     260:	ldr	w0, [sp, #44]
     264:	ldr	w1, [sp, #40]
     268:	udiv	w2, w0, w1
     26c:	ldr	w1, [sp, #40]
     270:	mul	w1, w2, w1
     274:	sub	w0, w0, w1
     278:	mov	w1, w0
     27c:	ldr	x0, [sp, #48]
     280:	cmp	x1, x0
     284:	cset	w0, eq  // eq = none
     288:	and	w0, w0, #0xff
     28c:	mov	w8, w0
     290:	ldr	w0, [sp, #44]
     294:	ldr	w1, [sp, #40]
     298:	mov	x7, x1
     29c:	mov	x6, x0
     2a0:	adrp	x0, 0 <test32>
     2a4:	add	x0, x0, #0x0
     2a8:	ldr	x5, [x0]
     2ac:	adrp	x0, 0 <test32>
     2b0:	add	x0, x0, #0x0
     2b4:	ldr	x4, [x0]
     2b8:	mov	w3, #0x37                  	// #55
     2bc:	adrp	x0, 0 <test32>
     2c0:	add	x0, x0, #0x0
     2c4:	ldr	x2, [x0]
     2c8:	adrp	x0, 0 <test32>
     2cc:	add	x0, x0, #0x0
     2d0:	ldr	x1, [x0]
     2d4:	mov	w0, w8
     2d8:	bl	0 <grub_test_assert_helper>
     2dc:	b	2e4 <test32+0x2e4>
     2e0:	nop
     2e4:	ldp	x29, x30, [sp, #16]
     2e8:	add	sp, sp, #0x40
     2ec:	ret
	...

0000000000000358 <test64>:
     358:	sub	sp, sp, #0x50
     35c:	stp	x29, x30, [sp, #16]
     360:	add	x29, sp, #0x10
     364:	str	x0, [sp, #40]
     368:	str	x1, [sp, #32]
     36c:	add	x0, sp, #0x30
     370:	mov	x2, x0
     374:	ldr	x1, [sp, #32]
     378:	ldr	x0, [sp, #40]
     37c:	bl	0 <grub_divmod64>
     380:	str	x0, [sp, #72]
     384:	ldr	x0, [sp, #48]
     388:	ldr	x1, [sp, #32]
     38c:	cmp	x1, x0
     390:	cset	w0, hi  // hi = pmore
     394:	and	w0, w0, #0xff
     398:	mov	w8, w0
     39c:	ldr	x0, [sp, #40]
     3a0:	ldr	x1, [sp, #32]
     3a4:	ldr	x2, [sp, #48]
     3a8:	str	x2, [sp]
     3ac:	mov	x7, x1
     3b0:	mov	x6, x0
     3b4:	adrp	x0, 0 <test32>
     3b8:	add	x0, x0, #0x0
     3bc:	ldr	x5, [x0]
     3c0:	adrp	x0, 0 <test32>
     3c4:	add	x0, x0, #0x0
     3c8:	ldr	x4, [x0]
     3cc:	mov	w3, #0x41                  	// #65
     3d0:	adrp	x0, 0 <test32>
     3d4:	add	x0, x0, #0x0
     3d8:	ldr	x2, [x0]
     3dc:	adrp	x0, 0 <test32>
     3e0:	add	x0, x0, #0x0
     3e4:	ldr	x1, [x0]
     3e8:	mov	w0, w8
     3ec:	bl	0 <grub_test_assert_helper>
     3f0:	ldr	x1, [sp, #72]
     3f4:	ldr	x0, [sp, #32]
     3f8:	mul	x1, x1, x0
     3fc:	ldr	x0, [sp, #48]
     400:	add	x0, x1, x0
     404:	ldr	x1, [sp, #40]
     408:	cmp	x1, x0
     40c:	cset	w0, eq  // eq = none
     410:	and	w0, w0, #0xff
     414:	mov	w8, w0
     418:	ldr	x1, [sp, #72]
     41c:	ldr	x2, [sp, #32]
     420:	ldr	x0, [sp, #48]
     424:	mov	x3, x0
     428:	ldr	x0, [sp, #40]
     42c:	str	x0, [sp, #8]
     430:	str	x3, [sp]
     434:	mov	x7, x2
     438:	mov	x6, x1
     43c:	adrp	x0, 0 <test32>
     440:	add	x0, x0, #0x0
     444:	ldr	x5, [x0]
     448:	adrp	x0, 0 <test32>
     44c:	add	x0, x0, #0x0
     450:	ldr	x4, [x0]
     454:	mov	w3, #0x43                  	// #67
     458:	adrp	x0, 0 <test32>
     45c:	add	x0, x0, #0x0
     460:	ldr	x2, [x0]
     464:	adrp	x0, 0 <test32>
     468:	add	x0, x0, #0x0
     46c:	ldr	x1, [x0]
     470:	mov	w0, w8
     474:	bl	0 <grub_test_assert_helper>
     478:	ldr	x0, [sp, #72]
     47c:	lsr	x1, x0, #32
     480:	ldr	x0, [sp, #32]
     484:	lsr	x0, x0, #32
     488:	mul	x0, x1, x0
     48c:	cmp	x0, #0x0
     490:	cset	w0, eq  // eq = none
     494:	and	w0, w0, #0xff
     498:	mov	w8, w0
     49c:	ldr	x0, [sp, #40]
     4a0:	ldr	x1, [sp, #32]
     4a4:	mov	x7, x1
     4a8:	mov	x6, x0
     4ac:	adrp	x0, 0 <test32>
     4b0:	add	x0, x0, #0x0
     4b4:	ldr	x5, [x0]
     4b8:	adrp	x0, 0 <test32>
     4bc:	add	x0, x0, #0x0
     4c0:	ldr	x4, [x0]
     4c4:	mov	w3, #0x46                  	// #70
     4c8:	adrp	x0, 0 <test32>
     4cc:	add	x0, x0, #0x0
     4d0:	ldr	x2, [x0]
     4d4:	adrp	x0, 0 <test32>
     4d8:	add	x0, x0, #0x0
     4dc:	ldr	x1, [x0]
     4e0:	mov	w0, w8
     4e4:	bl	0 <grub_test_assert_helper>
     4e8:	ldr	x0, [sp, #72]
     4ec:	lsr	x1, x0, #32
     4f0:	ldr	x0, [sp, #32]
     4f4:	and	x0, x0, #0xffffffff
     4f8:	mul	x0, x1, x0
     4fc:	str	x0, [sp, #64]
     500:	ldr	x1, [sp, #64]
     504:	mov	x0, #0xffffffff            	// #4294967295
     508:	cmp	x1, x0
     50c:	cset	w0, ls  // ls = plast
     510:	and	w0, w0, #0xff
     514:	mov	w8, w0
     518:	ldr	x0, [sp, #40]
     51c:	ldr	x1, [sp, #32]
     520:	mov	x7, x1
     524:	mov	x6, x0
     528:	adrp	x0, 0 <test32>
     52c:	add	x0, x0, #0x0
     530:	ldr	x5, [x0]
     534:	adrp	x0, 0 <test32>
     538:	add	x0, x0, #0x0
     53c:	ldr	x4, [x0]
     540:	mov	w3, #0x49                  	// #73
     544:	adrp	x0, 0 <test32>
     548:	add	x0, x0, #0x0
     54c:	ldr	x2, [x0]
     550:	adrp	x0, 0 <test32>
     554:	add	x0, x0, #0x0
     558:	ldr	x1, [x0]
     55c:	mov	w0, w8
     560:	bl	0 <grub_test_assert_helper>
     564:	ldr	x0, [sp, #64]
     568:	lsl	x0, x0, #32
     56c:	str	x0, [sp, #64]
     570:	ldr	x0, [sp, #32]
     574:	lsr	x1, x0, #32
     578:	ldr	x0, [sp, #72]
     57c:	and	x0, x0, #0xffffffff
     580:	mul	x0, x1, x0
     584:	str	x0, [sp, #56]
     588:	ldr	x1, [sp, #56]
     58c:	mov	x0, #0xffffffff            	// #4294967295
     590:	cmp	x1, x0
     594:	cset	w0, ls  // ls = plast
     598:	and	w0, w0, #0xff
     59c:	mov	w8, w0
     5a0:	ldr	x0, [sp, #40]
     5a4:	ldr	x1, [sp, #32]
     5a8:	mov	x7, x1
     5ac:	mov	x6, x0
     5b0:	adrp	x0, 0 <test32>
     5b4:	add	x0, x0, #0x0
     5b8:	ldr	x5, [x0]
     5bc:	adrp	x0, 0 <test32>
     5c0:	add	x0, x0, #0x0
     5c4:	ldr	x4, [x0]
     5c8:	mov	w3, #0x4d                  	// #77
     5cc:	adrp	x0, 0 <test32>
     5d0:	add	x0, x0, #0x0
     5d4:	ldr	x2, [x0]
     5d8:	adrp	x0, 0 <test32>
     5dc:	add	x0, x0, #0x0
     5e0:	ldr	x1, [x0]
     5e4:	mov	w0, w8
     5e8:	bl	0 <grub_test_assert_helper>
     5ec:	ldr	x0, [sp, #56]
     5f0:	lsl	x0, x0, #32
     5f4:	str	x0, [sp, #56]
     5f8:	ldr	x0, [sp, #56]
     5fc:	mvn	x0, x0
     600:	ldr	x1, [sp, #64]
     604:	cmp	x1, x0
     608:	cset	w0, ls  // ls = plast
     60c:	and	w0, w0, #0xff
     610:	mov	w8, w0
     614:	ldr	x0, [sp, #40]
     618:	ldr	x1, [sp, #32]
     61c:	mov	x7, x1
     620:	mov	x6, x0
     624:	adrp	x0, 0 <test32>
     628:	add	x0, x0, #0x0
     62c:	ldr	x5, [x0]
     630:	adrp	x0, 0 <test32>
     634:	add	x0, x0, #0x0
     638:	ldr	x4, [x0]
     63c:	mov	w3, #0x50                  	// #80
     640:	adrp	x0, 0 <test32>
     644:	add	x0, x0, #0x0
     648:	ldr	x2, [x0]
     64c:	adrp	x0, 0 <test32>
     650:	add	x0, x0, #0x0
     654:	ldr	x1, [x0]
     658:	mov	w0, w8
     65c:	bl	0 <grub_test_assert_helper>
     660:	ldr	x1, [sp, #64]
     664:	ldr	x0, [sp, #56]
     668:	add	x0, x1, x0
     66c:	str	x0, [sp, #64]
     670:	ldr	x0, [sp, #72]
     674:	and	x1, x0, #0xffffffff
     678:	ldr	x0, [sp, #32]
     67c:	and	x0, x0, #0xffffffff
     680:	mul	x0, x1, x0
     684:	str	x0, [sp, #56]
     688:	ldr	x0, [sp, #56]
     68c:	mvn	x0, x0
     690:	ldr	x1, [sp, #64]
     694:	cmp	x1, x0
     698:	cset	w0, ls  // ls = plast
     69c:	and	w0, w0, #0xff
     6a0:	mov	w8, w0
     6a4:	ldr	x0, [sp, #40]
     6a8:	ldr	x1, [sp, #32]
     6ac:	mov	x7, x1
     6b0:	mov	x6, x0
     6b4:	adrp	x0, 0 <test32>
     6b8:	add	x0, x0, #0x0
     6bc:	ldr	x5, [x0]
     6c0:	adrp	x0, 0 <test32>
     6c4:	add	x0, x0, #0x0
     6c8:	ldr	x4, [x0]
     6cc:	mov	w3, #0x54                  	// #84
     6d0:	adrp	x0, 0 <test32>
     6d4:	add	x0, x0, #0x0
     6d8:	ldr	x2, [x0]
     6dc:	adrp	x0, 0 <test32>
     6e0:	add	x0, x0, #0x0
     6e4:	ldr	x1, [x0]
     6e8:	mov	w0, w8
     6ec:	bl	0 <grub_test_assert_helper>
     6f0:	ldr	x1, [sp, #64]
     6f4:	ldr	x0, [sp, #56]
     6f8:	add	x0, x1, x0
     6fc:	str	x0, [sp, #64]
     700:	ldr	x0, [sp, #48]
     704:	mvn	x0, x0
     708:	ldr	x1, [sp, #64]
     70c:	cmp	x1, x0
     710:	cset	w0, ls  // ls = plast
     714:	and	w0, w0, #0xff
     718:	mov	w8, w0
     71c:	ldr	x0, [sp, #40]
     720:	ldr	x1, [sp, #32]
     724:	mov	x7, x1
     728:	mov	x6, x0
     72c:	adrp	x0, 0 <test32>
     730:	add	x0, x0, #0x0
     734:	ldr	x5, [x0]
     738:	adrp	x0, 0 <test32>
     73c:	add	x0, x0, #0x0
     740:	ldr	x4, [x0]
     744:	mov	w3, #0x57                  	// #87
     748:	adrp	x0, 0 <test32>
     74c:	add	x0, x0, #0x0
     750:	ldr	x2, [x0]
     754:	adrp	x0, 0 <test32>
     758:	add	x0, x0, #0x0
     75c:	ldr	x1, [x0]
     760:	mov	w0, w8
     764:	bl	0 <grub_test_assert_helper>
     768:	ldr	x0, [sp, #48]
     76c:	ldr	x1, [sp, #64]
     770:	add	x0, x1, x0
     774:	str	x0, [sp, #64]
     778:	ldr	x1, [sp, #40]
     77c:	ldr	x0, [sp, #64]
     780:	cmp	x1, x0
     784:	cset	w0, eq  // eq = none
     788:	and	w0, w0, #0xff
     78c:	mov	w8, w0
     790:	ldr	x0, [sp, #40]
     794:	ldr	x1, [sp, #32]
     798:	mov	x7, x1
     79c:	mov	x6, x0
     7a0:	adrp	x0, 0 <test32>
     7a4:	add	x0, x0, #0x0
     7a8:	ldr	x5, [x0]
     7ac:	adrp	x0, 0 <test32>
     7b0:	add	x0, x0, #0x0
     7b4:	ldr	x4, [x0]
     7b8:	mov	w3, #0x5a                  	// #90
     7bc:	adrp	x0, 0 <test32>
     7c0:	add	x0, x0, #0x0
     7c4:	ldr	x2, [x0]
     7c8:	adrp	x0, 0 <test32>
     7cc:	add	x0, x0, #0x0
     7d0:	ldr	x1, [x0]
     7d4:	mov	w0, w8
     7d8:	bl	0 <grub_test_assert_helper>
     7dc:	ldr	x1, [sp, #40]
     7e0:	ldr	x0, [sp, #32]
     7e4:	udiv	x0, x1, x0
     7e8:	ldr	x1, [sp, #72]
     7ec:	cmp	x1, x0
     7f0:	cset	w0, eq  // eq = none
     7f4:	and	w0, w0, #0xff
     7f8:	mov	w8, w0
     7fc:	ldr	x0, [sp, #40]
     800:	ldr	x1, [sp, #32]
     804:	mov	x7, x1
     808:	mov	x6, x0
     80c:	adrp	x0, 0 <test32>
     810:	add	x0, x0, #0x0
     814:	ldr	x5, [x0]
     818:	adrp	x0, 0 <test32>
     81c:	add	x0, x0, #0x0
     820:	ldr	x4, [x0]
     824:	mov	w3, #0x5d                  	// #93
     828:	adrp	x0, 0 <test32>
     82c:	add	x0, x0, #0x0
     830:	ldr	x2, [x0]
     834:	adrp	x0, 0 <test32>
     838:	add	x0, x0, #0x0
     83c:	ldr	x1, [x0]
     840:	mov	w0, w8
     844:	bl	0 <grub_test_assert_helper>
     848:	ldr	x0, [sp, #40]
     84c:	ldr	x1, [sp, #32]
     850:	udiv	x2, x0, x1
     854:	ldr	x1, [sp, #32]
     858:	mul	x1, x2, x1
     85c:	sub	x1, x0, x1
     860:	ldr	x0, [sp, #48]
     864:	cmp	x1, x0
     868:	cset	w0, eq  // eq = none
     86c:	and	w0, w0, #0xff
     870:	mov	w8, w0
     874:	ldr	x0, [sp, #40]
     878:	ldr	x1, [sp, #32]
     87c:	mov	x7, x1
     880:	mov	x6, x0
     884:	adrp	x0, 0 <test32>
     888:	add	x0, x0, #0x0
     88c:	ldr	x5, [x0]
     890:	adrp	x0, 0 <test32>
     894:	add	x0, x0, #0x0
     898:	ldr	x4, [x0]
     89c:	mov	w3, #0x5f                  	// #95
     8a0:	adrp	x0, 0 <test32>
     8a4:	add	x0, x0, #0x0
     8a8:	ldr	x2, [x0]
     8ac:	adrp	x0, 0 <test32>
     8b0:	add	x0, x0, #0x0
     8b4:	ldr	x1, [x0]
     8b8:	mov	w0, w8
     8bc:	bl	0 <grub_test_assert_helper>
     8c0:	nop
     8c4:	ldp	x29, x30, [sp, #16]
     8c8:	add	sp, sp, #0x50
     8cc:	ret
	...

0000000000000960 <abs64>:
     960:	sub	sp, sp, #0x10
     964:	str	x0, [sp, #8]
     968:	ldr	x0, [sp, #8]
     96c:	cmp	x0, #0x0
     970:	cneg	x0, x0, lt  // lt = tstop
     974:	add	sp, sp, #0x10
     978:	ret

000000000000097c <test32s>:
     97c:	sub	sp, sp, #0x50
     980:	stp	x29, x30, [sp, #16]
     984:	add	x29, sp, #0x10
     988:	str	x19, [sp, #32]
     98c:	str	w0, [sp, #60]
     990:	str	w1, [sp, #56]
     994:	ldr	w0, [sp, #56]
     998:	cmp	w0, #0x0
     99c:	b.eq	bec <test32s+0x270>  // b.none
     9a0:	ldrsw	x0, [sp, #60]
     9a4:	ldrsw	x1, [sp, #56]
     9a8:	add	x2, sp, #0x40
     9ac:	bl	0 <grub_divmod64s>
     9b0:	str	x0, [sp, #72]
     9b4:	ldr	w0, [sp, #60]
     9b8:	cmp	w0, #0x0
     9bc:	b.le	9d8 <test32s+0x5c>
     9c0:	ldr	x0, [sp, #64]
     9c4:	mvn	x0, x0
     9c8:	lsr	x0, x0, #63
     9cc:	and	w0, w0, #0xff
     9d0:	mov	w8, w0
     9d4:	b	9ec <test32s+0x70>
     9d8:	ldr	x0, [sp, #64]
     9dc:	cmp	x0, #0x0
     9e0:	cset	w0, le
     9e4:	and	w0, w0, #0xff
     9e8:	mov	w8, w0
     9ec:	ldrsw	x1, [sp, #60]
     9f0:	ldrsw	x2, [sp, #56]
     9f4:	ldr	x0, [sp, #64]
     9f8:	str	x0, [sp]
     9fc:	mov	x7, x2
     a00:	mov	x6, x1
     a04:	adrp	x0, 0 <test32>
     a08:	add	x0, x0, #0x0
     a0c:	ldr	x5, [x0]
     a10:	adrp	x0, 0 <test32>
     a14:	add	x0, x0, #0x0
     a18:	ldr	x4, [x0]
     a1c:	mov	w3, #0x72                  	// #114
     a20:	adrp	x0, 0 <test32>
     a24:	add	x0, x0, #0x0
     a28:	ldr	x2, [x0]
     a2c:	adrp	x0, 0 <test32>
     a30:	add	x0, x0, #0x0
     a34:	ldr	x1, [x0]
     a38:	mov	w0, w8
     a3c:	bl	0 <grub_test_assert_helper>
     a40:	ldr	w0, [sp, #60]
     a44:	cmp	w0, #0x0
     a48:	cset	w0, le
     a4c:	and	w1, w0, #0xff
     a50:	ldr	w0, [sp, #56]
     a54:	cmp	w0, #0x0
     a58:	cset	w0, gt
     a5c:	and	w0, w0, #0xff
     a60:	eor	w0, w1, w0
     a64:	and	w0, w0, #0xff
     a68:	cmp	w0, #0x0
     a6c:	b.eq	a88 <test32s+0x10c>  // b.none
     a70:	ldr	x0, [sp, #72]
     a74:	mvn	x0, x0
     a78:	lsr	x0, x0, #63
     a7c:	and	w0, w0, #0xff
     a80:	mov	w8, w0
     a84:	b	a9c <test32s+0x120>
     a88:	ldr	x0, [sp, #72]
     a8c:	cmp	x0, #0x0
     a90:	cset	w0, le
     a94:	and	w0, w0, #0xff
     a98:	mov	w8, w0
     a9c:	ldrsw	x1, [sp, #60]
     aa0:	ldrsw	x2, [sp, #56]
     aa4:	ldr	x0, [sp, #72]
     aa8:	str	x0, [sp]
     aac:	mov	x7, x2
     ab0:	mov	x6, x1
     ab4:	adrp	x0, 0 <test32>
     ab8:	add	x0, x0, #0x0
     abc:	ldr	x5, [x0]
     ac0:	adrp	x0, 0 <test32>
     ac4:	add	x0, x0, #0x0
     ac8:	ldr	x4, [x0]
     acc:	mov	w3, #0x74                  	// #116
     ad0:	adrp	x0, 0 <test32>
     ad4:	add	x0, x0, #0x0
     ad8:	ldr	x2, [x0]
     adc:	adrp	x0, 0 <test32>
     ae0:	add	x0, x0, #0x0
     ae4:	ldr	x1, [x0]
     ae8:	mov	w0, w8
     aec:	bl	0 <grub_test_assert_helper>
     af0:	ldr	x0, [sp, #64]
     af4:	bl	960 <abs64>
     af8:	mov	x19, x0
     afc:	ldrsw	x0, [sp, #56]
     b00:	bl	960 <abs64>
     b04:	cmp	x19, x0
     b08:	cset	w0, lt  // lt = tstop
     b0c:	and	w0, w0, #0xff
     b10:	mov	w8, w0
     b14:	ldrsw	x1, [sp, #60]
     b18:	ldrsw	x2, [sp, #56]
     b1c:	ldr	x0, [sp, #64]
     b20:	str	x0, [sp]
     b24:	mov	x7, x2
     b28:	mov	x6, x1
     b2c:	adrp	x0, 0 <test32>
     b30:	add	x0, x0, #0x0
     b34:	ldr	x5, [x0]
     b38:	adrp	x0, 0 <test32>
     b3c:	add	x0, x0, #0x0
     b40:	ldr	x4, [x0]
     b44:	mov	w3, #0x76                  	// #118
     b48:	adrp	x0, 0 <test32>
     b4c:	add	x0, x0, #0x0
     b50:	ldr	x2, [x0]
     b54:	adrp	x0, 0 <test32>
     b58:	add	x0, x0, #0x0
     b5c:	ldr	x1, [x0]
     b60:	mov	w0, w8
     b64:	bl	0 <grub_test_assert_helper>
     b68:	ldrsw	x1, [sp, #56]
     b6c:	ldr	x0, [sp, #72]
     b70:	mul	x1, x1, x0
     b74:	ldr	x0, [sp, #64]
     b78:	add	x1, x1, x0
     b7c:	ldrsw	x0, [sp, #60]
     b80:	cmp	x1, x0
     b84:	cset	w0, eq  // eq = none
     b88:	and	w0, w0, #0xff
     b8c:	mov	w8, w0
     b90:	ldrsw	x2, [sp, #56]
     b94:	ldr	x0, [sp, #64]
     b98:	ldrsw	x1, [sp, #60]
     b9c:	str	x1, [sp, #8]
     ba0:	str	x0, [sp]
     ba4:	mov	x7, x2
     ba8:	ldr	x6, [sp, #72]
     bac:	adrp	x0, 0 <test32>
     bb0:	add	x0, x0, #0x0
     bb4:	ldr	x5, [x0]
     bb8:	adrp	x0, 0 <test32>
     bbc:	add	x0, x0, #0x0
     bc0:	ldr	x4, [x0]
     bc4:	mov	w3, #0x78                  	// #120
     bc8:	adrp	x0, 0 <test32>
     bcc:	add	x0, x0, #0x0
     bd0:	ldr	x2, [x0]
     bd4:	adrp	x0, 0 <test32>
     bd8:	add	x0, x0, #0x0
     bdc:	ldr	x1, [x0]
     be0:	mov	w0, w8
     be4:	bl	0 <grub_test_assert_helper>
     be8:	b	bf0 <test32s+0x274>
     bec:	nop
     bf0:	ldr	x19, [sp, #32]
     bf4:	ldp	x29, x30, [sp, #16]
     bf8:	add	sp, sp, #0x50
     bfc:	ret
	...

0000000000000c50 <test64s>:
     c50:	sub	sp, sp, #0x50
     c54:	stp	x29, x30, [sp, #16]
     c58:	add	x29, sp, #0x10
     c5c:	str	x19, [sp, #32]
     c60:	str	x0, [sp, #56]
     c64:	str	x1, [sp, #48]
     c68:	add	x0, sp, #0x40
     c6c:	mov	x2, x0
     c70:	ldr	x1, [sp, #48]
     c74:	ldr	x0, [sp, #56]
     c78:	bl	0 <grub_divmod64s>
     c7c:	str	x0, [sp, #72]
     c80:	ldr	x0, [sp, #56]
     c84:	cmp	x0, #0x0
     c88:	b.le	ca4 <test64s+0x54>
     c8c:	ldr	x0, [sp, #64]
     c90:	mvn	x0, x0
     c94:	lsr	x0, x0, #63
     c98:	and	w0, w0, #0xff
     c9c:	mov	w8, w0
     ca0:	b	cb8 <test64s+0x68>
     ca4:	ldr	x0, [sp, #64]
     ca8:	cmp	x0, #0x0
     cac:	cset	w0, le
     cb0:	and	w0, w0, #0xff
     cb4:	mov	w8, w0
     cb8:	ldr	x0, [sp, #64]
     cbc:	str	x0, [sp]
     cc0:	ldr	x7, [sp, #48]
     cc4:	ldr	x6, [sp, #56]
     cc8:	adrp	x0, 0 <test32>
     ccc:	add	x0, x0, #0x0
     cd0:	ldr	x5, [x0]
     cd4:	adrp	x0, 0 <test32>
     cd8:	add	x0, x0, #0x0
     cdc:	ldr	x4, [x0]
     ce0:	mov	w3, #0x87                  	// #135
     ce4:	adrp	x0, 0 <test32>
     ce8:	add	x0, x0, #0x0
     cec:	ldr	x2, [x0]
     cf0:	adrp	x0, 0 <test32>
     cf4:	add	x0, x0, #0x0
     cf8:	ldr	x1, [x0]
     cfc:	mov	w0, w8
     d00:	bl	0 <grub_test_assert_helper>
     d04:	ldr	x0, [sp, #56]
     d08:	cmp	x0, #0x0
     d0c:	cset	w0, le
     d10:	and	w1, w0, #0xff
     d14:	ldr	x0, [sp, #48]
     d18:	cmp	x0, #0x0
     d1c:	cset	w0, gt
     d20:	and	w0, w0, #0xff
     d24:	eor	w0, w1, w0
     d28:	and	w0, w0, #0xff
     d2c:	cmp	w0, #0x0
     d30:	b.eq	d4c <test64s+0xfc>  // b.none
     d34:	ldr	x0, [sp, #72]
     d38:	mvn	x0, x0
     d3c:	lsr	x0, x0, #63
     d40:	and	w0, w0, #0xff
     d44:	mov	w8, w0
     d48:	b	d60 <test64s+0x110>
     d4c:	ldr	x0, [sp, #72]
     d50:	cmp	x0, #0x0
     d54:	cset	w0, le
     d58:	and	w0, w0, #0xff
     d5c:	mov	w8, w0
     d60:	ldr	x0, [sp, #72]
     d64:	str	x0, [sp]
     d68:	ldr	x7, [sp, #48]
     d6c:	ldr	x6, [sp, #56]
     d70:	adrp	x0, 0 <test32>
     d74:	add	x0, x0, #0x0
     d78:	ldr	x5, [x0]
     d7c:	adrp	x0, 0 <test32>
     d80:	add	x0, x0, #0x0
     d84:	ldr	x4, [x0]
     d88:	mov	w3, #0x89                  	// #137
     d8c:	adrp	x0, 0 <test32>
     d90:	add	x0, x0, #0x0
     d94:	ldr	x2, [x0]
     d98:	adrp	x0, 0 <test32>
     d9c:	add	x0, x0, #0x0
     da0:	ldr	x1, [x0]
     da4:	mov	w0, w8
     da8:	bl	0 <grub_test_assert_helper>
     dac:	ldr	x0, [sp, #64]
     db0:	bl	960 <abs64>
     db4:	mov	x19, x0
     db8:	ldr	x0, [sp, #48]
     dbc:	bl	960 <abs64>
     dc0:	cmp	x19, x0
     dc4:	cset	w0, lt  // lt = tstop
     dc8:	and	w0, w0, #0xff
     dcc:	mov	w8, w0
     dd0:	ldr	x0, [sp, #64]
     dd4:	str	x0, [sp]
     dd8:	ldr	x7, [sp, #48]
     ddc:	ldr	x6, [sp, #56]
     de0:	adrp	x0, 0 <test32>
     de4:	add	x0, x0, #0x0
     de8:	ldr	x5, [x0]
     dec:	adrp	x0, 0 <test32>
     df0:	add	x0, x0, #0x0
     df4:	ldr	x4, [x0]
     df8:	mov	w3, #0x8b                  	// #139
     dfc:	adrp	x0, 0 <test32>
     e00:	add	x0, x0, #0x0
     e04:	ldr	x2, [x0]
     e08:	adrp	x0, 0 <test32>
     e0c:	add	x0, x0, #0x0
     e10:	ldr	x1, [x0]
     e14:	mov	w0, w8
     e18:	bl	0 <grub_test_assert_helper>
     e1c:	ldr	x1, [sp, #72]
     e20:	ldr	x0, [sp, #48]
     e24:	mul	x1, x1, x0
     e28:	ldr	x0, [sp, #64]
     e2c:	add	x0, x1, x0
     e30:	ldr	x1, [sp, #56]
     e34:	cmp	x1, x0
     e38:	cset	w0, eq  // eq = none
     e3c:	and	w0, w0, #0xff
     e40:	mov	w8, w0
     e44:	ldr	x0, [sp, #64]
     e48:	ldr	x1, [sp, #56]
     e4c:	str	x1, [sp, #8]
     e50:	str	x0, [sp]
     e54:	ldr	x7, [sp, #48]
     e58:	ldr	x6, [sp, #72]
     e5c:	adrp	x0, 0 <test32>
     e60:	add	x0, x0, #0x0
     e64:	ldr	x5, [x0]
     e68:	adrp	x0, 0 <test32>
     e6c:	add	x0, x0, #0x0
     e70:	ldr	x4, [x0]
     e74:	mov	w3, #0x8d                  	// #141
     e78:	adrp	x0, 0 <test32>
     e7c:	add	x0, x0, #0x0
     e80:	ldr	x2, [x0]
     e84:	adrp	x0, 0 <test32>
     e88:	add	x0, x0, #0x0
     e8c:	ldr	x1, [x0]
     e90:	mov	w0, w8
     e94:	bl	0 <grub_test_assert_helper>
     e98:	ldr	x1, [sp, #56]
     e9c:	ldr	x0, [sp, #48]
     ea0:	sdiv	x0, x1, x0
     ea4:	ldr	x1, [sp, #72]
     ea8:	cmp	x1, x0
     eac:	cset	w0, eq  // eq = none
     eb0:	and	w0, w0, #0xff
     eb4:	mov	w8, w0
     eb8:	ldr	x7, [sp, #48]
     ebc:	ldr	x6, [sp, #56]
     ec0:	adrp	x0, 0 <test32>
     ec4:	add	x0, x0, #0x0
     ec8:	ldr	x5, [x0]
     ecc:	adrp	x0, 0 <test32>
     ed0:	add	x0, x0, #0x0
     ed4:	ldr	x4, [x0]
     ed8:	mov	w3, #0x90                  	// #144
     edc:	adrp	x0, 0 <test32>
     ee0:	add	x0, x0, #0x0
     ee4:	ldr	x2, [x0]
     ee8:	adrp	x0, 0 <test32>
     eec:	add	x0, x0, #0x0
     ef0:	ldr	x1, [x0]
     ef4:	mov	w0, w8
     ef8:	bl	0 <grub_test_assert_helper>
     efc:	ldr	x0, [sp, #56]
     f00:	ldr	x1, [sp, #48]
     f04:	sdiv	x2, x0, x1
     f08:	ldr	x1, [sp, #48]
     f0c:	mul	x1, x2, x1
     f10:	sub	x1, x0, x1
     f14:	ldr	x0, [sp, #64]
     f18:	cmp	x1, x0
     f1c:	cset	w0, eq  // eq = none
     f20:	and	w0, w0, #0xff
     f24:	mov	w8, w0
     f28:	ldr	x7, [sp, #48]
     f2c:	ldr	x6, [sp, #56]
     f30:	adrp	x0, 0 <test32>
     f34:	add	x0, x0, #0x0
     f38:	ldr	x5, [x0]
     f3c:	adrp	x0, 0 <test32>
     f40:	add	x0, x0, #0x0
     f44:	ldr	x4, [x0]
     f48:	mov	w3, #0x92                  	// #146
     f4c:	adrp	x0, 0 <test32>
     f50:	add	x0, x0, #0x0
     f54:	ldr	x2, [x0]
     f58:	adrp	x0, 0 <test32>
     f5c:	add	x0, x0, #0x0
     f60:	ldr	x1, [x0]
     f64:	mov	w0, w8
     f68:	bl	0 <grub_test_assert_helper>
     f6c:	nop
     f70:	ldr	x19, [sp, #32]
     f74:	ldp	x29, x30, [sp, #16]
     f78:	add	sp, sp, #0x50
     f7c:	ret
	...

0000000000000ff0 <test_all>:
     ff0:	stp	x29, x30, [sp, #-32]!
     ff4:	mov	x29, sp
     ff8:	str	x0, [sp, #24]
     ffc:	str	x1, [sp, #16]
    1000:	ldr	x1, [sp, #16]
    1004:	ldr	x0, [sp, #24]
    1008:	bl	358 <test64>
    100c:	ldr	x0, [sp, #24]
    1010:	mov	w2, w0
    1014:	ldr	x0, [sp, #16]
    1018:	mov	w1, w0
    101c:	mov	w0, w2
    1020:	bl	0 <test32>
    1024:	ldr	x0, [sp, #24]
    1028:	ldr	x1, [sp, #16]
    102c:	bl	c50 <test64s>
    1030:	ldr	x0, [sp, #24]
    1034:	mov	w2, w0
    1038:	ldr	x0, [sp, #16]
    103c:	mov	w1, w0
    1040:	mov	w0, w2
    1044:	bl	97c <test32s>
    1048:	ldr	x2, [sp, #24]
    104c:	ldr	x0, [sp, #16]
    1050:	neg	x0, x0
    1054:	mov	x1, x0
    1058:	mov	x0, x2
    105c:	bl	c50 <test64s>
    1060:	ldr	x0, [sp, #24]
    1064:	mov	w2, w0
    1068:	ldr	x0, [sp, #16]
    106c:	neg	w0, w0
    1070:	mov	w1, w0
    1074:	mov	w0, w2
    1078:	bl	97c <test32s>
    107c:	ldr	x0, [sp, #24]
    1080:	neg	x0, x0
    1084:	mov	x2, x0
    1088:	ldr	x0, [sp, #16]
    108c:	mov	x1, x0
    1090:	mov	x0, x2
    1094:	bl	c50 <test64s>
    1098:	ldr	x0, [sp, #24]
    109c:	neg	w0, w0
    10a0:	mov	w2, w0
    10a4:	ldr	x0, [sp, #16]
    10a8:	mov	w1, w0
    10ac:	mov	w0, w2
    10b0:	bl	97c <test32s>
    10b4:	ldr	x0, [sp, #24]
    10b8:	neg	x0, x0
    10bc:	mov	x2, x0
    10c0:	ldr	x0, [sp, #16]
    10c4:	neg	x0, x0
    10c8:	mov	x1, x0
    10cc:	mov	x0, x2
    10d0:	bl	c50 <test64s>
    10d4:	ldr	x0, [sp, #24]
    10d8:	neg	w0, w0
    10dc:	mov	w2, w0
    10e0:	ldr	x0, [sp, #16]
    10e4:	neg	w0, w0
    10e8:	mov	w1, w0
    10ec:	mov	w0, w2
    10f0:	bl	97c <test32s>
    10f4:	nop
    10f8:	ldp	x29, x30, [sp], #32
    10fc:	ret

0000000000001100 <div_test>:
    1100:	stp	x29, x30, [sp, #-48]!
    1104:	mov	x29, sp
    1108:	mov	x0, #0x194                 	// #404
    110c:	str	x0, [sp, #40]
    1110:	mov	x0, #0x7                   	// #7
    1114:	str	x0, [sp, #32]
    1118:	str	xzr, [sp, #24]
    111c:	b	1170 <div_test+0x70>
    1120:	adrp	x0, 0 <test32>
    1124:	add	x0, x0, #0x0
    1128:	ldr	x1, [x0]
    112c:	ldr	x0, [sp, #24]
    1130:	lsl	x0, x0, #4
    1134:	add	x0, x1, x0
    1138:	ldr	x2, [x0]
    113c:	adrp	x0, 0 <test32>
    1140:	add	x0, x0, #0x0
    1144:	ldr	x1, [x0]
    1148:	ldr	x0, [sp, #24]
    114c:	lsl	x0, x0, #4
    1150:	add	x0, x1, x0
    1154:	ldr	x0, [x0, #8]
    1158:	mov	x1, x0
    115c:	mov	x0, x2
    1160:	bl	ff0 <test_all>
    1164:	ldr	x0, [sp, #24]
    1168:	add	x0, x0, #0x1
    116c:	str	x0, [sp, #24]
    1170:	ldr	x0, [sp, #24]
    1174:	cmp	x0, #0x4
    1178:	b.ls	1120 <div_test+0x20>  // b.plast
    117c:	str	xzr, [sp, #24]
    1180:	b	122c <div_test+0x12c>
    1184:	ldr	x1, [sp, #40]
    1188:	mov	x0, x1
    118c:	lsl	x0, x0, #4
    1190:	add	x2, x0, x1
    1194:	ldr	x1, [sp, #32]
    1198:	mov	x0, x1
    119c:	lsl	x0, x0, #1
    11a0:	add	x0, x0, x1
    11a4:	lsl	x0, x0, #2
    11a8:	add	x0, x0, x1
    11ac:	add	x0, x2, x0
    11b0:	str	x0, [sp, #40]
    11b4:	ldr	x1, [sp, #40]
    11b8:	mov	x0, x1
    11bc:	lsl	x0, x0, #1
    11c0:	add	x0, x0, x1
    11c4:	lsl	x0, x0, #3
    11c8:	sub	x2, x0, x1
    11cc:	ldr	x1, [sp, #32]
    11d0:	mov	x0, x1
    11d4:	lsl	x0, x0, #3
    11d8:	sub	x0, x0, x1
    11dc:	lsl	x0, x0, #2
    11e0:	add	x0, x0, x1
    11e4:	add	x0, x2, x0
    11e8:	str	x0, [sp, #32]
    11ec:	ldr	x0, [sp, #32]
    11f0:	cmp	x0, #0x0
    11f4:	b.ne	1200 <div_test+0x100>  // b.any
    11f8:	mov	x0, #0x1                   	// #1
    11fc:	str	x0, [sp, #32]
    1200:	ldr	x0, [sp, #40]
    1204:	cmp	x0, #0x0
    1208:	b.ne	1214 <div_test+0x114>  // b.any
    120c:	mov	x0, #0x1                   	// #1
    1210:	str	x0, [sp, #40]
    1214:	ldr	x1, [sp, #32]
    1218:	ldr	x0, [sp, #40]
    121c:	bl	ff0 <test_all>
    1220:	ldr	x0, [sp, #24]
    1224:	add	x0, x0, #0x1
    1228:	str	x0, [sp, #24]
    122c:	ldr	x1, [sp, #24]
    1230:	mov	x0, #0x9c3f                	// #39999
    1234:	cmp	x1, x0
    1238:	b.ls	1184 <div_test+0x84>  // b.plast
    123c:	nop
    1240:	nop
    1244:	ldp	x29, x30, [sp], #48
    1248:	ret
    124c:	nop
	...

0000000000001258 <grub_mod_init>:
    1258:	stp	x29, x30, [sp, #-32]!
    125c:	mov	x29, sp
    1260:	str	x0, [sp, #24]
    1264:	adrp	x0, 0 <test32>
    1268:	add	x0, x0, #0x0
    126c:	ldr	x1, [x0]
    1270:	adrp	x0, 0 <test32>
    1274:	add	x0, x0, #0x0
    1278:	ldr	x0, [x0]
    127c:	bl	0 <grub_test_register>
    1280:	nop
    1284:	ldp	x29, x30, [sp], #32
    1288:	ret
    128c:	nop
	...

00000000000012a0 <grub_mod_fini>:
    12a0:	stp	x29, x30, [sp, #-16]!
    12a4:	mov	x29, sp
    12a8:	adrp	x0, 0 <test32>
    12ac:	add	x0, x0, #0x0
    12b0:	ldr	x0, [x0]
    12b4:	bl	0 <grub_test_unregister>
    12b8:	nop
    12bc:	ldp	x29, x30, [sp], #16
    12c0:	ret
    12c4:	nop
	...
