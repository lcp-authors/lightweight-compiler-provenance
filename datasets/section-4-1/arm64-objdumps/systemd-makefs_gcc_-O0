
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-makefs_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400c50 <_init>:
  400c50:	stp	x29, x30, [sp, #-16]!
  400c54:	mov	x29, sp
  400c58:	bl	400e60 <call_weak_fn>
  400c5c:	ldp	x29, x30, [sp], #16
  400c60:	ret

Disassembly of section .plt:

0000000000400c70 <.plt>:
  400c70:	stp	x16, x30, [sp, #-16]!
  400c74:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400c78:	ldr	x17, [x16, #3880]
  400c7c:	add	x16, x16, #0xf28
  400c80:	br	x17
  400c84:	nop
  400c88:	nop
  400c8c:	nop

0000000000400c90 <stpcpy@plt>:
  400c90:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400c94:	ldr	x17, [x16, #3888]
  400c98:	add	x16, x16, #0xf30
  400c9c:	br	x17

0000000000400ca0 <__libc_start_main@plt>:
  400ca0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400ca4:	ldr	x17, [x16, #3896]
  400ca8:	add	x16, x16, #0xf38
  400cac:	br	x17

0000000000400cb0 <__gmon_start__@plt>:
  400cb0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400cb4:	ldr	x17, [x16, #3904]
  400cb8:	add	x16, x16, #0xf40
  400cbc:	br	x17

0000000000400cc0 <polkit_agent_close@plt>:
  400cc0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400cc4:	ldr	x17, [x16, #3912]
  400cc8:	add	x16, x16, #0xf48
  400ccc:	br	x17

0000000000400cd0 <log_setup_service@plt>:
  400cd0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400cd4:	ldr	x17, [x16, #3920]
  400cd8:	add	x16, x16, #0xf50
  400cdc:	br	x17

0000000000400ce0 <log_assert_failed_realm@plt>:
  400ce0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400ce4:	ldr	x17, [x16, #3928]
  400ce8:	add	x16, x16, #0xf58
  400cec:	br	x17

0000000000400cf0 <_exit@plt>:
  400cf0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400cf4:	ldr	x17, [x16, #3936]
  400cf8:	add	x16, x16, #0xf60
  400cfc:	br	x17

0000000000400d00 <probe_filesystem@plt>:
  400d00:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d04:	ldr	x17, [x16, #3944]
  400d08:	add	x16, x16, #0xf68
  400d0c:	br	x17

0000000000400d10 <access@plt>:
  400d10:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d14:	ldr	x17, [x16, #3952]
  400d18:	add	x16, x16, #0xf70
  400d1c:	br	x17

0000000000400d20 <abort@plt>:
  400d20:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d24:	ldr	x17, [x16, #3960]
  400d28:	add	x16, x16, #0xf78
  400d2c:	br	x17

0000000000400d30 <__errno_location@plt>:
  400d30:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d34:	ldr	x17, [x16, #3968]
  400d38:	add	x16, x16, #0xf80
  400d3c:	br	x17

0000000000400d40 <wait_for_terminate_and_check@plt>:
  400d40:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d44:	ldr	x17, [x16, #3976]
  400d48:	add	x16, x16, #0xf88
  400d4c:	br	x17

0000000000400d50 <__stack_chk_fail@plt>:
  400d50:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d54:	ldr	x17, [x16, #3984]
  400d58:	add	x16, x16, #0xf90
  400d5c:	br	x17

0000000000400d60 <__xstat64@plt>:
  400d60:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d64:	ldr	x17, [x16, #3992]
  400d68:	add	x16, x16, #0xf98
  400d6c:	br	x17

0000000000400d70 <ask_password_agent_close@plt>:
  400d70:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d74:	ldr	x17, [x16, #4000]
  400d78:	add	x16, x16, #0xfa0
  400d7c:	br	x17

0000000000400d80 <pager_close@plt>:
  400d80:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d84:	ldr	x17, [x16, #4008]
  400d88:	add	x16, x16, #0xfa8
  400d8c:	br	x17

0000000000400d90 <log_internal_realm@plt>:
  400d90:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400d94:	ldr	x17, [x16, #4016]
  400d98:	add	x16, x16, #0xfb0
  400d9c:	br	x17

0000000000400da0 <strcmp@plt>:
  400da0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400da4:	ldr	x17, [x16, #4024]
  400da8:	add	x16, x16, #0xfb8
  400dac:	br	x17

0000000000400db0 <execv@plt>:
  400db0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400db4:	ldr	x17, [x16, #4032]
  400db8:	add	x16, x16, #0xfc0
  400dbc:	br	x17

0000000000400dc0 <safe_fork_full@plt>:
  400dc0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400dc4:	ldr	x17, [x16, #4040]
  400dc8:	add	x16, x16, #0xfc8
  400dcc:	br	x17

0000000000400dd0 <free@plt>:
  400dd0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400dd4:	ldr	x17, [x16, #4048]
  400dd8:	add	x16, x16, #0xfd0
  400ddc:	br	x17

0000000000400de0 <mac_selinux_finish@plt>:
  400de0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400de4:	ldr	x17, [x16, #4056]
  400de8:	add	x16, x16, #0xfd8
  400dec:	br	x17

0000000000400df0 <strlen@plt>:
  400df0:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400df4:	ldr	x17, [x16, #4064]
  400df8:	add	x16, x16, #0xfe0
  400dfc:	br	x17

0000000000400e00 <log_get_max_level_realm@plt>:
  400e00:	adrp	x16, 412000 <__FRAME_END__+0x101fc>
  400e04:	ldr	x17, [x16, #4072]
  400e08:	add	x16, x16, #0xfe8
  400e0c:	br	x17

Disassembly of section .text:

0000000000400e10 <_start>:
  400e10:	mov	x29, #0x0                   	// #0
  400e14:	mov	x30, #0x0                   	// #0
  400e18:	mov	x5, x0
  400e1c:	ldr	x1, [sp]
  400e20:	add	x2, sp, #0x8
  400e24:	mov	x6, sp
  400e28:	movz	x0, #0x0, lsl #48
  400e2c:	movk	x0, #0x0, lsl #32
  400e30:	movk	x0, #0x40, lsl #16
  400e34:	movk	x0, #0x189c
  400e38:	movz	x3, #0x0, lsl #48
  400e3c:	movk	x3, #0x0, lsl #32
  400e40:	movk	x3, #0x40, lsl #16
  400e44:	movk	x3, #0x18f0
  400e48:	movz	x4, #0x0, lsl #48
  400e4c:	movk	x4, #0x0, lsl #32
  400e50:	movk	x4, #0x40, lsl #16
  400e54:	movk	x4, #0x1970
  400e58:	bl	400ca0 <__libc_start_main@plt>
  400e5c:	bl	400d20 <abort@plt>

0000000000400e60 <call_weak_fn>:
  400e60:	adrp	x0, 412000 <__FRAME_END__+0x101fc>
  400e64:	ldr	x0, [x0, #4088]
  400e68:	cbz	x0, 400e70 <call_weak_fn+0x10>
  400e6c:	b	400cb0 <__gmon_start__@plt>
  400e70:	ret

0000000000400e74 <deregister_tm_clones>:
  400e74:	stp	x29, x30, [sp, #-32]!
  400e78:	mov	x29, sp
  400e7c:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400e80:	add	x0, x0, #0x0
  400e84:	str	x0, [sp, #24]
  400e88:	ldr	x0, [sp, #24]
  400e8c:	str	x0, [sp, #24]
  400e90:	ldr	x1, [sp, #24]
  400e94:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400e98:	add	x0, x0, #0x0
  400e9c:	cmp	x1, x0
  400ea0:	b.eq	400edc <deregister_tm_clones+0x68>  // b.none
  400ea4:	adrp	x0, 401000 <ALIGN_TO+0x28>
  400ea8:	add	x0, x0, #0x998
  400eac:	ldr	x0, [x0]
  400eb0:	str	x0, [sp, #16]
  400eb4:	ldr	x0, [sp, #16]
  400eb8:	str	x0, [sp, #16]
  400ebc:	ldr	x0, [sp, #16]
  400ec0:	cmp	x0, #0x0
  400ec4:	b.eq	400ee0 <deregister_tm_clones+0x6c>  // b.none
  400ec8:	ldr	x1, [sp, #16]
  400ecc:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400ed0:	add	x0, x0, #0x0
  400ed4:	blr	x1
  400ed8:	b	400ee0 <deregister_tm_clones+0x6c>
  400edc:	nop
  400ee0:	ldp	x29, x30, [sp], #32
  400ee4:	ret

0000000000400ee8 <register_tm_clones>:
  400ee8:	stp	x29, x30, [sp, #-48]!
  400eec:	mov	x29, sp
  400ef0:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400ef4:	add	x0, x0, #0x0
  400ef8:	str	x0, [sp, #40]
  400efc:	ldr	x0, [sp, #40]
  400f00:	str	x0, [sp, #40]
  400f04:	ldr	x1, [sp, #40]
  400f08:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400f0c:	add	x0, x0, #0x0
  400f10:	sub	x0, x1, x0
  400f14:	asr	x0, x0, #3
  400f18:	lsr	x1, x0, #63
  400f1c:	add	x0, x1, x0
  400f20:	asr	x0, x0, #1
  400f24:	str	x0, [sp, #32]
  400f28:	ldr	x0, [sp, #32]
  400f2c:	cmp	x0, #0x0
  400f30:	b.eq	400f70 <register_tm_clones+0x88>  // b.none
  400f34:	adrp	x0, 401000 <ALIGN_TO+0x28>
  400f38:	add	x0, x0, #0x9a0
  400f3c:	ldr	x0, [x0]
  400f40:	str	x0, [sp, #24]
  400f44:	ldr	x0, [sp, #24]
  400f48:	str	x0, [sp, #24]
  400f4c:	ldr	x0, [sp, #24]
  400f50:	cmp	x0, #0x0
  400f54:	b.eq	400f74 <register_tm_clones+0x8c>  // b.none
  400f58:	ldr	x2, [sp, #24]
  400f5c:	ldr	x1, [sp, #32]
  400f60:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400f64:	add	x0, x0, #0x0
  400f68:	blr	x2
  400f6c:	b	400f74 <register_tm_clones+0x8c>
  400f70:	nop
  400f74:	ldp	x29, x30, [sp], #48
  400f78:	ret

0000000000400f7c <__do_global_dtors_aux>:
  400f7c:	stp	x29, x30, [sp, #-16]!
  400f80:	mov	x29, sp
  400f84:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400f88:	add	x0, x0, #0xc
  400f8c:	ldrb	w0, [x0]
  400f90:	and	x0, x0, #0xff
  400f94:	cmp	x0, #0x0
  400f98:	b.ne	400fb4 <__do_global_dtors_aux+0x38>  // b.any
  400f9c:	bl	400e74 <deregister_tm_clones>
  400fa0:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  400fa4:	add	x0, x0, #0xc
  400fa8:	mov	w1, #0x1                   	// #1
  400fac:	strb	w1, [x0]
  400fb0:	b	400fb8 <__do_global_dtors_aux+0x3c>
  400fb4:	nop
  400fb8:	ldp	x29, x30, [sp], #16
  400fbc:	ret

0000000000400fc0 <frame_dummy>:
  400fc0:	stp	x29, x30, [sp, #-16]!
  400fc4:	mov	x29, sp
  400fc8:	bl	400ee8 <register_tm_clones>
  400fcc:	nop
  400fd0:	ldp	x29, x30, [sp], #16
  400fd4:	ret

0000000000400fd8 <ALIGN_TO>:
  400fd8:	sub	sp, sp, #0x10
  400fdc:	str	x0, [sp, #8]
  400fe0:	str	x1, [sp]
  400fe4:	ldr	x1, [sp, #8]
  400fe8:	ldr	x0, [sp]
  400fec:	add	x0, x1, x0
  400ff0:	sub	x1, x0, #0x1
  400ff4:	ldr	x0, [sp]
  400ff8:	neg	x0, x0
  400ffc:	and	x0, x1, x0
  401000:	add	sp, sp, #0x10
  401004:	ret

0000000000401008 <freep>:
  401008:	stp	x29, x30, [sp, #-32]!
  40100c:	mov	x29, sp
  401010:	str	x0, [sp, #24]
  401014:	ldr	x0, [sp, #24]
  401018:	ldr	x0, [x0]
  40101c:	bl	400dd0 <free@plt>
  401020:	nop
  401024:	ldp	x29, x30, [sp], #32
  401028:	ret

000000000040102c <size_multiply_overflow>:
  40102c:	sub	sp, sp, #0x10
  401030:	str	x0, [sp, #8]
  401034:	str	x1, [sp]
  401038:	ldr	x0, [sp]
  40103c:	cmp	x0, #0x0
  401040:	cset	w0, ne  // ne = any
  401044:	and	w0, w0, #0xff
  401048:	and	x0, x0, #0xff
  40104c:	cmp	x0, #0x0
  401050:	b.eq	401094 <size_multiply_overflow+0x68>  // b.none
  401054:	mov	x2, #0x0                   	// #0
  401058:	ldr	x1, [sp, #8]
  40105c:	ldr	x0, [sp]
  401060:	umulh	x0, x1, x0
  401064:	cmp	x0, #0x0
  401068:	b.eq	401070 <size_multiply_overflow+0x44>  // b.none
  40106c:	mov	x2, #0x1                   	// #1
  401070:	mov	x0, x2
  401074:	cmp	x0, #0x0
  401078:	cset	w0, ne  // ne = any
  40107c:	and	w0, w0, #0xff
  401080:	and	x0, x0, #0xff
  401084:	cmp	x0, #0x0
  401088:	b.eq	401094 <size_multiply_overflow+0x68>  // b.none
  40108c:	mov	w0, #0x1                   	// #1
  401090:	b	401098 <size_multiply_overflow+0x6c>
  401094:	mov	w0, #0x0                   	// #0
  401098:	and	w0, w0, #0x1
  40109c:	and	w0, w0, #0xff
  4010a0:	add	sp, sp, #0x10
  4010a4:	ret

00000000004010a8 <save_argc_argv>:
  4010a8:	sub	sp, sp, #0x10
  4010ac:	str	w0, [sp, #12]
  4010b0:	str	x1, [sp]
  4010b4:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  4010b8:	add	x0, x0, #0x8
  4010bc:	ldr	w1, [sp, #12]
  4010c0:	str	w1, [x0]
  4010c4:	adrp	x0, 413000 <saved_argv@@SD_SHARED>
  4010c8:	add	x0, x0, #0x0
  4010cc:	ldr	x1, [sp]
  4010d0:	str	x1, [x0]
  4010d4:	nop
  4010d8:	add	sp, sp, #0x10
  4010dc:	ret

00000000004010e0 <static_destruct>:
  4010e0:	stp	x29, x30, [sp, #-32]!
  4010e4:	mov	x29, sp
  4010e8:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4010ec:	add	x0, x0, #0xb50
  4010f0:	ldr	x0, [x0]
  4010f4:	cmp	x0, #0x0
  4010f8:	b.eq	40115c <static_destruct+0x7c>  // b.none
  4010fc:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401100:	add	x0, x0, #0xb50
  401104:	ldr	x0, [x0]
  401108:	mov	x1, #0x8                   	// #8
  40110c:	bl	400fd8 <ALIGN_TO>
  401110:	str	x0, [sp, #24]
  401114:	b	401140 <static_destruct+0x60>
  401118:	ldr	x0, [sp, #24]
  40111c:	ldr	x1, [x0, #8]
  401120:	ldr	x0, [sp, #24]
  401124:	ldr	x0, [x0]
  401128:	blr	x1
  40112c:	ldr	x0, [sp, #24]
  401130:	add	x0, x0, #0x10
  401134:	mov	x1, #0x8                   	// #8
  401138:	bl	400fd8 <ALIGN_TO>
  40113c:	str	x0, [sp, #24]
  401140:	ldr	x1, [sp, #24]
  401144:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401148:	add	x0, x0, #0xb58
  40114c:	ldr	x0, [x0]
  401150:	cmp	x1, x0
  401154:	b.cc	401118 <static_destruct+0x38>  // b.lo, b.ul, b.last
  401158:	b	401160 <static_destruct+0x80>
  40115c:	nop
  401160:	ldp	x29, x30, [sp], #32
  401164:	ret

0000000000401168 <safe_fork>:
  401168:	stp	x29, x30, [sp, #-48]!
  40116c:	mov	x29, sp
  401170:	str	x0, [sp, #40]
  401174:	str	w1, [sp, #36]
  401178:	str	x2, [sp, #24]
  40117c:	ldr	x4, [sp, #24]
  401180:	ldr	w3, [sp, #36]
  401184:	mov	x2, #0x0                   	// #0
  401188:	mov	x1, #0x0                   	// #0
  40118c:	ldr	x0, [sp, #40]
  401190:	bl	400dc0 <safe_fork_full@plt>
  401194:	ldp	x29, x30, [sp], #48
  401198:	ret

000000000040119c <makefs>:
  40119c:	stp	x29, x30, [sp, #-144]!
  4011a0:	mov	x29, sp
  4011a4:	str	x0, [x29, #24]
  4011a8:	str	x1, [x29, #16]
  4011ac:	adrp	x0, 412000 <__FRAME_END__+0x101fc>
  4011b0:	add	x0, x0, #0xce0
  4011b4:	ldr	x1, [x0]
  4011b8:	str	x1, [x29, #136]
  4011bc:	mov	x1, #0x0                   	// #0
  4011c0:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4011c4:	add	x1, x0, #0x9a8
  4011c8:	ldr	x0, [x29, #24]
  4011cc:	bl	400da0 <strcmp@plt>
  4011d0:	cmp	w0, #0x0
  4011d4:	b.ne	4011e8 <makefs+0x4c>  // b.any
  4011d8:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4011dc:	add	x0, x0, #0x9b0
  4011e0:	str	x0, [x29, #64]
  4011e4:	b	401388 <makefs+0x1ec>
  4011e8:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4011ec:	add	x0, x0, #0x9c0
  4011f0:	str	x0, [x29, #112]
  4011f4:	ldr	x0, [x29, #24]
  4011f8:	str	x0, [x29, #120]
  4011fc:	str	xzr, [x29, #80]
  401200:	str	xzr, [x29, #88]
  401204:	b	401238 <makefs+0x9c>
  401208:	ldr	x0, [x29, #88]
  40120c:	lsl	x0, x0, #3
  401210:	add	x1, x29, #0x70
  401214:	ldr	x0, [x1, x0]
  401218:	bl	400df0 <strlen@plt>
  40121c:	mov	x1, x0
  401220:	ldr	x0, [x29, #80]
  401224:	add	x0, x0, x1
  401228:	str	x0, [x29, #80]
  40122c:	ldr	x0, [x29, #88]
  401230:	add	x0, x0, #0x1
  401234:	str	x0, [x29, #88]
  401238:	ldr	x0, [x29, #88]
  40123c:	cmp	x0, #0x1
  401240:	b.hi	40125c <makefs+0xc0>  // b.pmore
  401244:	ldr	x0, [x29, #88]
  401248:	lsl	x0, x0, #3
  40124c:	add	x1, x29, #0x70
  401250:	ldr	x0, [x1, x0]
  401254:	cmp	x0, #0x0
  401258:	b.ne	401208 <makefs+0x6c>  // b.any
  40125c:	ldr	x0, [x29, #80]
  401260:	add	x0, x0, #0x1
  401264:	str	x0, [x29, #96]
  401268:	ldr	x1, [x29, #96]
  40126c:	mov	x0, #0x1                   	// #1
  401270:	bl	40102c <size_multiply_overflow>
  401274:	and	w0, w0, #0xff
  401278:	and	x0, x0, #0xff
  40127c:	cmp	x0, #0x0
  401280:	b.eq	4012ac <makefs+0x110>  // b.none
  401284:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401288:	add	x1, x0, #0x9d3
  40128c:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401290:	add	x4, x0, #0xb60
  401294:	mov	w3, #0x1a                  	// #26
  401298:	mov	x2, x1
  40129c:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4012a0:	add	x1, x0, #0x9f0
  4012a4:	mov	w0, #0x0                   	// #0
  4012a8:	bl	400ce0 <log_assert_failed_realm@plt>
  4012ac:	ldr	x0, [x29, #96]
  4012b0:	cmp	x0, #0x400, lsl #12
  4012b4:	cset	w0, hi  // hi = pmore
  4012b8:	and	w0, w0, #0xff
  4012bc:	and	x0, x0, #0xff
  4012c0:	cmp	x0, #0x0
  4012c4:	b.eq	4012f0 <makefs+0x154>  // b.none
  4012c8:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4012cc:	add	x1, x0, #0x9d3
  4012d0:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4012d4:	add	x4, x0, #0xb60
  4012d8:	mov	w3, #0x1a                  	// #26
  4012dc:	mov	x2, x1
  4012e0:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4012e4:	add	x1, x0, #0xa20
  4012e8:	mov	w0, #0x0                   	// #0
  4012ec:	bl	400ce0 <log_assert_failed_realm@plt>
  4012f0:	ldr	x0, [x29, #96]
  4012f4:	add	x0, x0, #0xf
  4012f8:	lsr	x0, x0, #4
  4012fc:	lsl	x0, x0, #4
  401300:	sub	sp, sp, x0
  401304:	mov	x0, sp
  401308:	add	x0, x0, #0xf
  40130c:	lsr	x0, x0, #4
  401310:	lsl	x0, x0, #4
  401314:	str	x0, [x29, #104]
  401318:	ldr	x0, [x29, #104]
  40131c:	str	x0, [x29, #72]
  401320:	str	xzr, [x29, #88]
  401324:	b	401354 <makefs+0x1b8>
  401328:	ldr	x0, [x29, #88]
  40132c:	lsl	x0, x0, #3
  401330:	add	x1, x29, #0x70
  401334:	ldr	x0, [x1, x0]
  401338:	mov	x1, x0
  40133c:	ldr	x0, [x29, #72]
  401340:	bl	400c90 <stpcpy@plt>
  401344:	str	x0, [x29, #72]
  401348:	ldr	x0, [x29, #88]
  40134c:	add	x0, x0, #0x1
  401350:	str	x0, [x29, #88]
  401354:	ldr	x0, [x29, #88]
  401358:	cmp	x0, #0x1
  40135c:	b.hi	401378 <makefs+0x1dc>  // b.pmore
  401360:	ldr	x0, [x29, #88]
  401364:	lsl	x0, x0, #3
  401368:	add	x1, x29, #0x70
  40136c:	ldr	x0, [x1, x0]
  401370:	cmp	x0, #0x0
  401374:	b.ne	401328 <makefs+0x18c>  // b.any
  401378:	ldr	x0, [x29, #72]
  40137c:	strb	wzr, [x0]
  401380:	ldr	x0, [x29, #104]
  401384:	str	x0, [x29, #64]
  401388:	mov	w1, #0x1                   	// #1
  40138c:	ldr	x0, [x29, #64]
  401390:	bl	400d10 <access@plt>
  401394:	cmp	w0, #0x0
  401398:	b.eq	40142c <makefs+0x290>  // b.none
  40139c:	mov	w0, #0x3                   	// #3
  4013a0:	str	w0, [x29, #52]
  4013a4:	bl	400d30 <__errno_location@plt>
  4013a8:	ldr	w0, [x0]
  4013ac:	str	w0, [x29, #56]
  4013b0:	str	wzr, [x29, #60]
  4013b4:	ldr	w0, [x29, #60]
  4013b8:	bl	400e00 <log_get_max_level_realm@plt>
  4013bc:	mov	w1, w0
  4013c0:	ldr	w0, [x29, #52]
  4013c4:	and	w0, w0, #0x7
  4013c8:	cmp	w1, w0
  4013cc:	b.lt	401414 <makefs+0x278>  // b.tstop
  4013d0:	ldr	w0, [x29, #60]
  4013d4:	lsl	w1, w0, #10
  4013d8:	ldr	w0, [x29, #52]
  4013dc:	orr	w7, w1, w0
  4013e0:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4013e4:	add	x1, x0, #0x9d3
  4013e8:	ldr	x6, [x29, #64]
  4013ec:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4013f0:	add	x5, x0, #0xa40
  4013f4:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4013f8:	add	x4, x0, #0xb68
  4013fc:	mov	w3, #0x1c                  	// #28
  401400:	mov	x2, x1
  401404:	ldr	w1, [x29, #56]
  401408:	mov	w0, w7
  40140c:	bl	400d90 <log_internal_realm@plt>
  401410:	b	4014a4 <makefs+0x308>
  401414:	ldr	w0, [x29, #56]
  401418:	cmp	w0, #0x0
  40141c:	cneg	w0, w0, lt  // lt = tstop
  401420:	and	w0, w0, #0xff
  401424:	neg	w0, w0
  401428:	b	4014a4 <makefs+0x308>
  40142c:	add	x0, x29, #0x2c
  401430:	mov	x2, x0
  401434:	mov	w1, #0x225                 	// #549
  401438:	adrp	x0, 401000 <ALIGN_TO+0x28>
  40143c:	add	x0, x0, #0xa60
  401440:	bl	401168 <safe_fork>
  401444:	str	w0, [x29, #48]
  401448:	ldr	w0, [x29, #48]
  40144c:	cmp	w0, #0x0
  401450:	b.ge	40145c <makefs+0x2c0>  // b.tcont
  401454:	ldr	w0, [x29, #48]
  401458:	b	4014a4 <makefs+0x308>
  40145c:	ldr	w0, [x29, #48]
  401460:	cmp	w0, #0x0
  401464:	b.ne	401490 <makefs+0x2f4>  // b.any
  401468:	ldr	x0, [x29, #64]
  40146c:	str	x0, [x29, #112]
  401470:	ldr	x0, [x29, #16]
  401474:	str	x0, [x29, #120]
  401478:	str	xzr, [x29, #128]
  40147c:	ldr	x0, [x29, #112]
  401480:	add	x1, x29, #0x70
  401484:	bl	400db0 <execv@plt>
  401488:	mov	w0, #0x1                   	// #1
  40148c:	bl	400cf0 <_exit@plt>
  401490:	ldr	w0, [x29, #44]
  401494:	mov	w2, #0x3                   	// #3
  401498:	mov	w1, w0
  40149c:	ldr	x0, [x29, #64]
  4014a0:	bl	400d40 <wait_for_terminate_and_check@plt>
  4014a4:	mov	w1, w0
  4014a8:	adrp	x0, 412000 <__FRAME_END__+0x101fc>
  4014ac:	add	x0, x0, #0xce0
  4014b0:	ldr	x2, [x29, #136]
  4014b4:	ldr	x0, [x0]
  4014b8:	eor	x0, x2, x0
  4014bc:	cmp	x0, #0x0
  4014c0:	b.eq	4014c8 <makefs+0x32c>  // b.none
  4014c4:	bl	400d50 <__stack_chk_fail@plt>
  4014c8:	mov	w0, w1
  4014cc:	mov	sp, x29
  4014d0:	ldp	x29, x30, [sp], #144
  4014d4:	ret

00000000004014d8 <run>:
  4014d8:	stp	x29, x30, [sp, #-272]!
  4014dc:	mov	x29, sp
  4014e0:	str	x19, [sp, #16]
  4014e4:	str	w0, [sp, #44]
  4014e8:	str	x1, [sp, #32]
  4014ec:	adrp	x0, 412000 <__FRAME_END__+0x101fc>
  4014f0:	add	x0, x0, #0xce0
  4014f4:	ldr	x1, [x0]
  4014f8:	str	x1, [sp, #264]
  4014fc:	mov	x1, #0x0                   	// #0
  401500:	str	xzr, [sp, #112]
  401504:	bl	400cd0 <log_setup_service@plt>
  401508:	ldr	w0, [sp, #44]
  40150c:	cmp	w0, #0x3
  401510:	b.eq	4015a4 <run+0xcc>  // b.none
  401514:	mov	w0, #0x3                   	// #3
  401518:	str	w0, [sp, #100]
  40151c:	mov	w0, #0x16                  	// #22
  401520:	movk	w0, #0x4000, lsl #16
  401524:	str	w0, [sp, #104]
  401528:	str	wzr, [sp, #108]
  40152c:	ldr	w0, [sp, #108]
  401530:	bl	400e00 <log_get_max_level_realm@plt>
  401534:	mov	w1, w0
  401538:	ldr	w0, [sp, #100]
  40153c:	and	w0, w0, #0x7
  401540:	cmp	w1, w0
  401544:	b.lt	40158c <run+0xb4>  // b.tstop
  401548:	ldr	w0, [sp, #108]
  40154c:	lsl	w1, w0, #10
  401550:	ldr	w0, [sp, #100]
  401554:	orr	w6, w1, w0
  401558:	adrp	x0, 401000 <ALIGN_TO+0x28>
  40155c:	add	x1, x0, #0x9d3
  401560:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401564:	add	x5, x0, #0xa68
  401568:	adrp	x0, 401000 <ALIGN_TO+0x28>
  40156c:	add	x4, x0, #0xb70
  401570:	mov	w3, #0x36                  	// #54
  401574:	mov	x2, x1
  401578:	ldr	w1, [sp, #104]
  40157c:	mov	w0, w6
  401580:	bl	400d90 <log_internal_realm@plt>
  401584:	mov	w19, w0
  401588:	b	401860 <run+0x388>
  40158c:	ldr	w0, [sp, #104]
  401590:	cmp	w0, #0x0
  401594:	cneg	w0, w0, lt  // lt = tstop
  401598:	and	w0, w0, #0xff
  40159c:	neg	w19, w0
  4015a0:	b	401860 <run+0x388>
  4015a4:	ldr	x0, [sp, #32]
  4015a8:	ldr	x0, [x0, #8]
  4015ac:	str	x0, [sp, #120]
  4015b0:	ldr	x0, [sp, #32]
  4015b4:	ldr	x0, [x0, #16]
  4015b8:	str	x0, [sp, #128]
  4015bc:	add	x0, sp, #0x88
  4015c0:	mov	x1, x0
  4015c4:	ldr	x0, [sp, #128]
  4015c8:	bl	401978 <stat64>
  4015cc:	cmp	w0, #0x0
  4015d0:	b.ge	401668 <run+0x190>  // b.tcont
  4015d4:	mov	w0, #0x3                   	// #3
  4015d8:	str	w0, [sp, #88]
  4015dc:	bl	400d30 <__errno_location@plt>
  4015e0:	ldr	w0, [x0]
  4015e4:	str	w0, [sp, #92]
  4015e8:	str	wzr, [sp, #96]
  4015ec:	ldr	w0, [sp, #96]
  4015f0:	bl	400e00 <log_get_max_level_realm@plt>
  4015f4:	mov	w1, w0
  4015f8:	ldr	w0, [sp, #88]
  4015fc:	and	w0, w0, #0x7
  401600:	cmp	w1, w0
  401604:	b.lt	401650 <run+0x178>  // b.tstop
  401608:	ldr	w0, [sp, #96]
  40160c:	lsl	w1, w0, #10
  401610:	ldr	w0, [sp, #88]
  401614:	orr	w7, w1, w0
  401618:	adrp	x0, 401000 <ALIGN_TO+0x28>
  40161c:	add	x1, x0, #0x9d3
  401620:	ldr	x6, [sp, #128]
  401624:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401628:	add	x5, x0, #0xa90
  40162c:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401630:	add	x4, x0, #0xb70
  401634:	mov	w3, #0x3d                  	// #61
  401638:	mov	x2, x1
  40163c:	ldr	w1, [sp, #92]
  401640:	mov	w0, w7
  401644:	bl	400d90 <log_internal_realm@plt>
  401648:	mov	w19, w0
  40164c:	b	401860 <run+0x388>
  401650:	ldr	w0, [sp, #92]
  401654:	cmp	w0, #0x0
  401658:	cneg	w0, w0, lt  // lt = tstop
  40165c:	and	w0, w0, #0xff
  401660:	neg	w19, w0
  401664:	b	401860 <run+0x388>
  401668:	ldr	w0, [sp, #152]
  40166c:	and	w0, w0, #0xf000
  401670:	cmp	w0, #0x6, lsl #12
  401674:	b.eq	4016f0 <run+0x218>  // b.none
  401678:	mov	w0, #0x6                   	// #6
  40167c:	str	w0, [sp, #48]
  401680:	str	wzr, [sp, #52]
  401684:	str	wzr, [sp, #56]
  401688:	ldr	w0, [sp, #56]
  40168c:	bl	400e00 <log_get_max_level_realm@plt>
  401690:	mov	w1, w0
  401694:	ldr	w0, [sp, #48]
  401698:	and	w0, w0, #0x7
  40169c:	cmp	w1, w0
  4016a0:	b.lt	4016e8 <run+0x210>  // b.tstop
  4016a4:	ldr	w0, [sp, #56]
  4016a8:	lsl	w1, w0, #10
  4016ac:	ldr	w0, [sp, #48]
  4016b0:	orr	w7, w1, w0
  4016b4:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4016b8:	add	x1, x0, #0x9d3
  4016bc:	ldr	x6, [sp, #128]
  4016c0:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4016c4:	add	x5, x0, #0xaa8
  4016c8:	adrp	x0, 401000 <ALIGN_TO+0x28>
  4016cc:	add	x4, x0, #0xb70
  4016d0:	mov	w3, #0x40                  	// #64
  4016d4:	mov	x2, x1
  4016d8:	ldr	w1, [sp, #52]
  4016dc:	mov	w0, w7
  4016e0:	bl	400d90 <log_internal_realm@plt>
  4016e4:	b	4016f0 <run+0x218>
  4016e8:	ldr	w0, [sp, #52]
  4016ec:	cmp	w0, #0x0
  4016f0:	add	x0, sp, #0x70
  4016f4:	mov	x1, x0
  4016f8:	ldr	x0, [sp, #128]
  4016fc:	bl	400d00 <probe_filesystem@plt>
  401700:	str	w0, [sp, #60]
  401704:	ldr	w0, [sp, #60]
  401708:	cmp	w0, #0x0
  40170c:	b.ge	4017bc <run+0x2e4>  // b.tcont
  401710:	mov	w0, #0x4                   	// #4
  401714:	str	w0, [sp, #76]
  401718:	ldr	w0, [sp, #60]
  40171c:	str	w0, [sp, #80]
  401720:	str	wzr, [sp, #84]
  401724:	ldr	w0, [sp, #84]
  401728:	bl	400e00 <log_get_max_level_realm@plt>
  40172c:	mov	w1, w0
  401730:	ldr	w0, [sp, #76]
  401734:	and	w0, w0, #0x7
  401738:	cmp	w1, w0
  40173c:	b.lt	4017a4 <run+0x2cc>  // b.tstop
  401740:	ldr	w0, [sp, #84]
  401744:	lsl	w1, w0, #10
  401748:	ldr	w0, [sp, #76]
  40174c:	orr	w7, w1, w0
  401750:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401754:	add	x1, x0, #0x9d3
  401758:	ldr	w0, [sp, #60]
  40175c:	cmn	w0, #0x75
  401760:	b.ne	401770 <run+0x298>  // b.any
  401764:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401768:	add	x0, x0, #0xac8
  40176c:	b	401778 <run+0x2a0>
  401770:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401774:	add	x0, x0, #0xb08
  401778:	ldr	x6, [sp, #128]
  40177c:	mov	x5, x0
  401780:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401784:	add	x4, x0, #0xb70
  401788:	mov	w3, #0x44                  	// #68
  40178c:	mov	x2, x1
  401790:	ldr	w1, [sp, #80]
  401794:	mov	w0, w7
  401798:	bl	400d90 <log_internal_realm@plt>
  40179c:	mov	w19, w0
  4017a0:	b	401860 <run+0x388>
  4017a4:	ldr	w0, [sp, #80]
  4017a8:	cmp	w0, #0x0
  4017ac:	cneg	w0, w0, lt  // lt = tstop
  4017b0:	and	w0, w0, #0xff
  4017b4:	neg	w19, w0
  4017b8:	b	401860 <run+0x388>
  4017bc:	ldr	x0, [sp, #112]
  4017c0:	cmp	x0, #0x0
  4017c4:	b.eq	401850 <run+0x378>  // b.none
  4017c8:	mov	w0, #0x6                   	// #6
  4017cc:	str	w0, [sp, #64]
  4017d0:	str	wzr, [sp, #68]
  4017d4:	str	wzr, [sp, #72]
  4017d8:	ldr	w0, [sp, #72]
  4017dc:	bl	400e00 <log_get_max_level_realm@plt>
  4017e0:	mov	w1, w0
  4017e4:	ldr	w0, [sp, #64]
  4017e8:	and	w0, w0, #0x7
  4017ec:	cmp	w1, w0
  4017f0:	b.lt	401840 <run+0x368>  // b.tstop
  4017f4:	ldr	w0, [sp, #72]
  4017f8:	lsl	w1, w0, #10
  4017fc:	ldr	w0, [sp, #64]
  401800:	orr	w8, w1, w0
  401804:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401808:	add	x1, x0, #0x9d3
  40180c:	ldr	x0, [sp, #112]
  401810:	mov	x7, x0
  401814:	ldr	x6, [sp, #128]
  401818:	adrp	x0, 401000 <ALIGN_TO+0x28>
  40181c:	add	x5, x0, #0xb28
  401820:	adrp	x0, 401000 <ALIGN_TO+0x28>
  401824:	add	x4, x0, #0xb70
  401828:	mov	w3, #0x4b                  	// #75
  40182c:	mov	x2, x1
  401830:	ldr	w1, [sp, #68]
  401834:	mov	w0, w8
  401838:	bl	400d90 <log_internal_realm@plt>
  40183c:	b	401848 <run+0x370>
  401840:	ldr	w0, [sp, #68]
  401844:	cmp	w0, #0x0
  401848:	mov	w19, #0x0                   	// #0
  40184c:	b	401860 <run+0x388>
  401850:	ldr	x1, [sp, #128]
  401854:	ldr	x0, [sp, #120]
  401858:	bl	40119c <makefs>
  40185c:	mov	w19, w0
  401860:	add	x0, sp, #0x70
  401864:	bl	401008 <freep>
  401868:	mov	w1, w19
  40186c:	adrp	x0, 412000 <__FRAME_END__+0x101fc>
  401870:	add	x0, x0, #0xce0
  401874:	ldr	x2, [sp, #264]
  401878:	ldr	x0, [x0]
  40187c:	eor	x0, x2, x0
  401880:	cmp	x0, #0x0
  401884:	b.eq	40188c <run+0x3b4>  // b.none
  401888:	bl	400d50 <__stack_chk_fail@plt>
  40188c:	mov	w0, w1
  401890:	ldr	x19, [sp, #16]
  401894:	ldp	x29, x30, [sp], #272
  401898:	ret

000000000040189c <main>:
  40189c:	stp	x29, x30, [sp, #-48]!
  4018a0:	mov	x29, sp
  4018a4:	str	w0, [sp, #28]
  4018a8:	str	x1, [sp, #16]
  4018ac:	ldr	x1, [sp, #16]
  4018b0:	ldr	w0, [sp, #28]
  4018b4:	bl	4010a8 <save_argc_argv>
  4018b8:	ldr	x1, [sp, #16]
  4018bc:	ldr	w0, [sp, #28]
  4018c0:	bl	4014d8 <run>
  4018c4:	str	w0, [sp, #44]
  4018c8:	bl	400d70 <ask_password_agent_close@plt>
  4018cc:	bl	400cc0 <polkit_agent_close@plt>
  4018d0:	bl	400d80 <pager_close@plt>
  4018d4:	bl	400de0 <mac_selinux_finish@plt>
  4018d8:	bl	4010e0 <static_destruct>
  4018dc:	ldr	w0, [sp, #44]
  4018e0:	lsr	w0, w0, #31
  4018e4:	ldp	x29, x30, [sp], #48
  4018e8:	ret
  4018ec:	nop

00000000004018f0 <__libc_csu_init>:
  4018f0:	stp	x29, x30, [sp, #-64]!
  4018f4:	mov	x29, sp
  4018f8:	stp	x19, x20, [sp, #16]
  4018fc:	adrp	x20, 412000 <__FRAME_END__+0x101fc>
  401900:	add	x20, x20, #0xcd8
  401904:	stp	x21, x22, [sp, #32]
  401908:	adrp	x21, 412000 <__FRAME_END__+0x101fc>
  40190c:	add	x21, x21, #0xcd0
  401910:	sub	x20, x20, x21
  401914:	mov	w22, w0
  401918:	stp	x23, x24, [sp, #48]
  40191c:	mov	x23, x1
  401920:	mov	x24, x2
  401924:	bl	400c50 <_init>
  401928:	cmp	xzr, x20, asr #3
  40192c:	b.eq	401958 <__libc_csu_init+0x68>  // b.none
  401930:	asr	x20, x20, #3
  401934:	mov	x19, #0x0                   	// #0
  401938:	ldr	x3, [x21, x19, lsl #3]
  40193c:	mov	x2, x24
  401940:	add	x19, x19, #0x1
  401944:	mov	x1, x23
  401948:	mov	w0, w22
  40194c:	blr	x3
  401950:	cmp	x20, x19
  401954:	b.ne	401938 <__libc_csu_init+0x48>  // b.any
  401958:	ldp	x19, x20, [sp, #16]
  40195c:	ldp	x21, x22, [sp, #32]
  401960:	ldp	x23, x24, [sp, #48]
  401964:	ldp	x29, x30, [sp], #64
  401968:	ret
  40196c:	nop

0000000000401970 <__libc_csu_fini>:
  401970:	ret
  401974:	nop

0000000000401978 <stat64>:
  401978:	mov	x2, x1
  40197c:	mov	x1, x0
  401980:	mov	w0, #0x0                   	// #0
  401984:	b	400d60 <__xstat64@plt>

Disassembly of section .fini:

0000000000401988 <_fini>:
  401988:	stp	x29, x30, [sp, #-16]!
  40198c:	mov	x29, sp
  401990:	ldp	x29, x30, [sp], #16
  401994:	ret
