
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_clang_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000350d0 <.init>:
   350d0:	stp	x29, x30, [sp, #-16]!
   350d4:	mov	x29, sp
   350d8:	bl	35c70 <aarch64_get_operand_modifier_from_value@plt+0x10>
   350dc:	ldp	x29, x30, [sp], #16
   350e0:	ret

Disassembly of section .plt:

00000000000350f0 <aarch64_ext_sysins_op@plt-0x20>:
   350f0:	stp	x16, x30, [sp, #-16]!
   350f4:	adrp	x16, 96000 <aarch64_operands@@Base+0x16c38>
   350f8:	ldr	x17, [x16, #4088]
   350fc:	add	x16, x16, #0xff8
   35100:	br	x17
   35104:	nop
   35108:	nop
   3510c:	nop

0000000000035110 <aarch64_ext_sysins_op@plt>:
   35110:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35114:	ldr	x17, [x16]
   35118:	add	x16, x16, #0x0
   3511c:	br	x17

0000000000035120 <aarch64_ins_sve_float_zero_one@plt>:
   35120:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35124:	ldr	x17, [x16, #8]
   35128:	add	x16, x16, #0x8
   3512c:	br	x17

0000000000035130 <aarch64_ins_simd_addr_post@plt>:
   35130:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35134:	ldr	x17, [x16, #16]
   35138:	add	x16, x16, #0x10
   3513c:	br	x17

0000000000035140 <memcpy@plt>:
   35140:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35144:	ldr	x17, [x16, #24]
   35148:	add	x16, x16, #0x18
   3514c:	br	x17

0000000000035150 <memmove@plt>:
   35150:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35154:	ldr	x17, [x16, #32]
   35158:	add	x16, x16, #0x20
   3515c:	br	x17

0000000000035160 <aarch64_ins_sve_quad_index@plt>:
   35160:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35164:	ldr	x17, [x16, #40]
   35168:	add	x16, x16, #0x28
   3516c:	br	x17

0000000000035170 <aarch64_ins_cond@plt>:
   35170:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35174:	ldr	x17, [x16, #48]
   35178:	add	x16, x16, #0x30
   3517c:	br	x17

0000000000035180 <aarch64_ext_sve_addr_zi_u5@plt>:
   35180:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35184:	ldr	x17, [x16, #56]
   35188:	add	x16, x16, #0x38
   3518c:	br	x17

0000000000035190 <strlen@plt>:
   35190:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35194:	ldr	x17, [x16, #64]
   35198:	add	x16, x16, #0x40
   3519c:	br	x17

00000000000351a0 <aarch64_ins_sve_addr_rz_xtw@plt>:
   351a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351a4:	ldr	x17, [x16, #72]
   351a8:	add	x16, x16, #0x48
   351ac:	br	x17

00000000000351b0 <aarch64_ext_sysreg@plt>:
   351b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351b4:	ldr	x17, [x16, #80]
   351b8:	add	x16, x16, #0x50
   351bc:	br	x17

00000000000351c0 <aarch64_ins_sve_reglist@plt>:
   351c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351c4:	ldr	x17, [x16, #88]
   351c8:	add	x16, x16, #0x58
   351cc:	br	x17

00000000000351d0 <aarch64_ins_imm_rotate1@plt>:
   351d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351d4:	ldr	x17, [x16, #96]
   351d8:	add	x16, x16, #0x60
   351dc:	br	x17

00000000000351e0 <exit@plt>:
   351e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351e4:	ldr	x17, [x16, #104]
   351e8:	add	x16, x16, #0x68
   351ec:	br	x17

00000000000351f0 <aarch64_operand_index@plt>:
   351f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   351f4:	ldr	x17, [x16, #112]
   351f8:	add	x16, x16, #0x70
   351fc:	br	x17

0000000000035200 <aarch64_ext_regrt_sysins@plt>:
   35200:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35204:	ldr	x17, [x16, #120]
   35208:	add	x16, x16, #0x78
   3520c:	br	x17

0000000000035210 <aarch64_ext_fbits@plt>:
   35210:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35214:	ldr	x17, [x16, #128]
   35218:	add	x16, x16, #0x80
   3521c:	br	x17

0000000000035220 <aarch64_ins_sve_addr_rr_lsl@plt>:
   35220:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35224:	ldr	x17, [x16, #136]
   35228:	add	x16, x16, #0x88
   3522c:	br	x17

0000000000035230 <aarch64_ins_sve_scale@plt>:
   35230:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35234:	ldr	x17, [x16, #144]
   35238:	add	x16, x16, #0x90
   3523c:	br	x17

0000000000035240 <aarch64_ext_ldst_reglist_r@plt>:
   35240:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35244:	ldr	x17, [x16, #152]
   35248:	add	x16, x16, #0x98
   3524c:	br	x17

0000000000035250 <sbrk@plt>:
   35250:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35254:	ldr	x17, [x16, #160]
   35258:	add	x16, x16, #0xa0
   3525c:	br	x17

0000000000035260 <aarch64_num_of_operands@plt>:
   35260:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35264:	ldr	x17, [x16, #168]
   35268:	add	x16, x16, #0xa8
   3526c:	br	x17

0000000000035270 <aarch64_ext_sve_shrimm@plt>:
   35270:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35274:	ldr	x17, [x16, #176]
   35278:	add	x16, x16, #0xb0
   3527c:	br	x17

0000000000035280 <aarch64_ext_sve_shlimm@plt>:
   35280:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35284:	ldr	x17, [x16, #184]
   35288:	add	x16, x16, #0xb8
   3528c:	br	x17

0000000000035290 <aarch64_ext_addr_uimm12@plt>:
   35290:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35294:	ldr	x17, [x16, #192]
   35298:	add	x16, x16, #0xc0
   3529c:	br	x17

00000000000352a0 <aarch64_ins_addr_simm10@plt>:
   352a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352a4:	ldr	x17, [x16, #200]
   352a8:	add	x16, x16, #0xc8
   352ac:	br	x17

00000000000352b0 <aarch64_ext_aimm@plt>:
   352b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352b4:	ldr	x17, [x16, #208]
   352b8:	add	x16, x16, #0xd0
   352bc:	br	x17

00000000000352c0 <ldexp@plt>:
   352c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352c4:	ldr	x17, [x16, #216]
   352c8:	add	x16, x16, #0xd8
   352cc:	br	x17

00000000000352d0 <aarch64_ext_sve_asimm@plt>:
   352d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352d4:	ldr	x17, [x16, #224]
   352d8:	add	x16, x16, #0xe0
   352dc:	br	x17

00000000000352e0 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   352e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352e4:	ldr	x17, [x16, #232]
   352e8:	add	x16, x16, #0xe8
   352ec:	br	x17

00000000000352f0 <aarch64_ins_regno@plt>:
   352f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   352f4:	ldr	x17, [x16, #240]
   352f8:	add	x16, x16, #0xf0
   352fc:	br	x17

0000000000035300 <__cxa_finalize@plt>:
   35300:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35304:	ldr	x17, [x16, #248]
   35308:	add	x16, x16, #0xf8
   3530c:	br	x17

0000000000035310 <aarch64_ins_aimm@plt>:
   35310:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35314:	ldr	x17, [x16, #256]
   35318:	add	x16, x16, #0x100
   3531c:	br	x17

0000000000035320 <sprintf@plt>:
   35320:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35324:	ldr	x17, [x16, #264]
   35328:	add	x16, x16, #0x108
   3532c:	br	x17

0000000000035330 <aarch64_ins_pstatefield@plt>:
   35330:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35334:	ldr	x17, [x16, #272]
   35338:	add	x16, x16, #0x110
   3533c:	br	x17

0000000000035340 <verify_constraints@plt>:
   35340:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35344:	ldr	x17, [x16, #280]
   35348:	add	x16, x16, #0x118
   3534c:	br	x17

0000000000035350 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   35350:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35354:	ldr	x17, [x16, #288]
   35358:	add	x16, x16, #0x120
   3535c:	br	x17

0000000000035360 <qsort@plt>:
   35360:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35364:	ldr	x17, [x16, #296]
   35368:	add	x16, x16, #0x128
   3536c:	br	x17

0000000000035370 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   35370:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35374:	ldr	x17, [x16, #304]
   35378:	add	x16, x16, #0x130
   3537c:	br	x17

0000000000035380 <aarch64_ins_sve_addr_zz_lsl@plt>:
   35380:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35384:	ldr	x17, [x16, #312]
   35388:	add	x16, x16, #0x138
   3538c:	br	x17

0000000000035390 <aarch64_ext_addr_simm@plt>:
   35390:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35394:	ldr	x17, [x16, #320]
   35398:	add	x16, x16, #0x140
   3539c:	br	x17

00000000000353a0 <aarch64_ext_reglane@plt>:
   353a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353a4:	ldr	x17, [x16, #328]
   353a8:	add	x16, x16, #0x148
   353ac:	br	x17

00000000000353b0 <aarch64_ins_sve_addr_ri_u6@plt>:
   353b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353b4:	ldr	x17, [x16, #336]
   353b8:	add	x16, x16, #0x150
   353bc:	br	x17

00000000000353c0 <aarch64_ins_sve_index@plt>:
   353c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353c4:	ldr	x17, [x16, #344]
   353c8:	add	x16, x16, #0x158
   353cc:	br	x17

00000000000353d0 <aarch64_decode_insn@plt>:
   353d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353d4:	ldr	x17, [x16, #352]
   353d8:	add	x16, x16, #0x160
   353dc:	br	x17

00000000000353e0 <aarch64_find_real_opcode@plt>:
   353e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353e4:	ldr	x17, [x16, #360]
   353e8:	add	x16, x16, #0x168
   353ec:	br	x17

00000000000353f0 <aarch64_ins_addr_simm@plt>:
   353f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   353f4:	ldr	x17, [x16, #368]
   353f8:	add	x16, x16, #0x170
   353fc:	br	x17

0000000000035400 <get_cond_from_value@plt>:
   35400:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35404:	ldr	x17, [x16, #376]
   35408:	add	x16, x16, #0x178
   3540c:	br	x17

0000000000035410 <aarch64_ext_addr_simm10@plt>:
   35410:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35414:	ldr	x17, [x16, #384]
   35418:	add	x16, x16, #0x180
   3541c:	br	x17

0000000000035420 <aarch64_ins_sysins_op@plt>:
   35420:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35424:	ldr	x17, [x16, #392]
   35428:	add	x16, x16, #0x188
   3542c:	br	x17

0000000000035430 <aarch64_ins_ft@plt>:
   35430:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35434:	ldr	x17, [x16, #400]
   35438:	add	x16, x16, #0x190
   3543c:	br	x17

0000000000035440 <aarch64_ext_addr_offset@plt>:
   35440:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35444:	ldr	x17, [x16, #408]
   35448:	add	x16, x16, #0x198
   3544c:	br	x17

0000000000035450 <aarch64_find_best_match@plt>:
   35450:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35454:	ldr	x17, [x16, #416]
   35458:	add	x16, x16, #0x1a0
   3545c:	br	x17

0000000000035460 <aarch64_ext_fpimm@plt>:
   35460:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35464:	ldr	x17, [x16, #424]
   35468:	add	x16, x16, #0x1a8
   3546c:	br	x17

0000000000035470 <snprintf@plt>:
   35470:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35474:	ldr	x17, [x16, #432]
   35478:	add	x16, x16, #0x1b0
   3547c:	br	x17

0000000000035480 <extract_fields@plt>:
   35480:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35484:	ldr	x17, [x16, #440]
   35488:	add	x16, x16, #0x1b8
   3548c:	br	x17

0000000000035490 <aarch64_ins_limm@plt>:
   35490:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35494:	ldr	x17, [x16, #448]
   35498:	add	x16, x16, #0x1c0
   3549c:	br	x17

00000000000354a0 <aarch64_print_operand@plt>:
   354a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354a4:	ldr	x17, [x16, #456]
   354a8:	add	x16, x16, #0x1c8
   354ac:	br	x17

00000000000354b0 <aarch64_ext_reg_extended@plt>:
   354b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354b4:	ldr	x17, [x16, #464]
   354b8:	add	x16, x16, #0x1d0
   354bc:	br	x17

00000000000354c0 <aarch64_get_qualifier_standard_value@plt>:
   354c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354c4:	ldr	x17, [x16, #472]
   354c8:	add	x16, x16, #0x1d8
   354cc:	br	x17

00000000000354d0 <malloc@plt>:
   354d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354d4:	ldr	x17, [x16, #480]
   354d8:	add	x16, x16, #0x1e0
   354dc:	br	x17

00000000000354e0 <aarch64_logical_immediate_p@plt>:
   354e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354e4:	ldr	x17, [x16, #488]
   354e8:	add	x16, x16, #0x1e8
   354ec:	br	x17

00000000000354f0 <aarch64_replace_opcode@plt>:
   354f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   354f4:	ldr	x17, [x16, #496]
   354f8:	add	x16, x16, #0x1f0
   354fc:	br	x17

0000000000035500 <aarch64_ext_limm@plt>:
   35500:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35504:	ldr	x17, [x16, #504]
   35508:	add	x16, x16, #0x1f8
   3550c:	br	x17

0000000000035510 <aarch64_get_operand_modifier_value@plt>:
   35510:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35514:	ldr	x17, [x16, #512]
   35518:	add	x16, x16, #0x200
   3551c:	br	x17

0000000000035520 <strncmp@plt>:
   35520:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35524:	ldr	x17, [x16, #520]
   35528:	add	x16, x16, #0x208
   3552c:	br	x17

0000000000035530 <aarch64_ins_reg_shifted@plt>:
   35530:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35534:	ldr	x17, [x16, #528]
   35538:	add	x16, x16, #0x210
   3553c:	br	x17

0000000000035540 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   35540:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35544:	ldr	x17, [x16, #536]
   35548:	add	x16, x16, #0x218
   3554c:	br	x17

0000000000035550 <memset@plt>:
   35550:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35554:	ldr	x17, [x16, #544]
   35558:	add	x16, x16, #0x220
   3555c:	br	x17

0000000000035560 <xmalloc@plt>:
   35560:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35564:	ldr	x17, [x16, #552]
   35568:	add	x16, x16, #0x228
   3556c:	br	x17

0000000000035570 <aarch64_ins_sysreg@plt>:
   35570:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35574:	ldr	x17, [x16, #560]
   35578:	add	x16, x16, #0x230
   3557c:	br	x17

0000000000035580 <print_arm_disassembler_options@plt>:
   35580:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35584:	ldr	x17, [x16, #568]
   35588:	add	x16, x16, #0x238
   3558c:	br	x17

0000000000035590 <aarch64_ins_fpimm@plt>:
   35590:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35594:	ldr	x17, [x16, #576]
   35598:	add	x16, x16, #0x240
   3559c:	br	x17

00000000000355a0 <aarch64_ext_sve_reglist@plt>:
   355a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355a4:	ldr	x17, [x16, #584]
   355a8:	add	x16, x16, #0x248
   355ac:	br	x17

00000000000355b0 <aarch64_ext_sve_quad_index@plt>:
   355b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355b4:	ldr	x17, [x16, #592]
   355b8:	add	x16, x16, #0x250
   355bc:	br	x17

00000000000355c0 <aarch64_match_operands_constraint@plt>:
   355c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355c4:	ldr	x17, [x16, #600]
   355c8:	add	x16, x16, #0x258
   355cc:	br	x17

00000000000355d0 <aarch64_ins_sve_limm_mov@plt>:
   355d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355d4:	ldr	x17, [x16, #608]
   355d8:	add	x16, x16, #0x260
   355dc:	br	x17

00000000000355e0 <aarch64_ext_inv_limm@plt>:
   355e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355e4:	ldr	x17, [x16, #616]
   355e8:	add	x16, x16, #0x268
   355ec:	br	x17

00000000000355f0 <aarch64_ext_sve_float_half_two@plt>:
   355f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   355f4:	ldr	x17, [x16, #624]
   355f8:	add	x16, x16, #0x270
   355fc:	br	x17

0000000000035600 <calloc@plt>:
   35600:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35604:	ldr	x17, [x16, #632]
   35608:	add	x16, x16, #0x278
   3560c:	br	x17

0000000000035610 <bfd_get_bits@plt>:
   35610:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35614:	ldr	x17, [x16, #640]
   35618:	add	x16, x16, #0x280
   3561c:	br	x17

0000000000035620 <aarch64_sve_dupm_mov_immediate_p@plt>:
   35620:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35624:	ldr	x17, [x16, #648]
   35628:	add	x16, x16, #0x288
   3562c:	br	x17

0000000000035630 <aarch64_ins_advsimd_imm_modified@plt>:
   35630:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35634:	ldr	x17, [x16, #656]
   35638:	add	x16, x16, #0x290
   3563c:	br	x17

0000000000035640 <aarch64_ins_ldst_reglist_r@plt>:
   35640:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35644:	ldr	x17, [x16, #664]
   35648:	add	x16, x16, #0x298
   3564c:	br	x17

0000000000035650 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   35650:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35654:	ldr	x17, [x16, #672]
   35658:	add	x16, x16, #0x2a0
   3565c:	br	x17

0000000000035660 <bsearch@plt>:
   35660:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35664:	ldr	x17, [x16, #680]
   35668:	add	x16, x16, #0x2a8
   3566c:	br	x17

0000000000035670 <aarch64_ext_ldst_reglist@plt>:
   35670:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35674:	ldr	x17, [x16, #688]
   35678:	add	x16, x16, #0x2b0
   3567c:	br	x17

0000000000035680 <realloc@plt>:
   35680:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35684:	ldr	x17, [x16, #696]
   35688:	add	x16, x16, #0x2b8
   3568c:	br	x17

0000000000035690 <aarch64_opcode_lookup@plt>:
   35690:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35694:	ldr	x17, [x16, #704]
   35698:	add	x16, x16, #0x2c0
   3569c:	br	x17

00000000000356a0 <aarch64_ext_sve_index@plt>:
   356a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356a4:	ldr	x17, [x16, #712]
   356a8:	add	x16, x16, #0x2c8
   356ac:	br	x17

00000000000356b0 <aarch64_ext_imm_rotate2@plt>:
   356b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356b4:	ldr	x17, [x16, #720]
   356b8:	add	x16, x16, #0x2d0
   356bc:	br	x17

00000000000356c0 <aarch64_ext_hint@plt>:
   356c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356c4:	ldr	x17, [x16, #728]
   356c8:	add	x16, x16, #0x2d8
   356cc:	br	x17

00000000000356d0 <aarch64_ins_reglist@plt>:
   356d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356d4:	ldr	x17, [x16, #736]
   356d8:	add	x16, x16, #0x2e0
   356dc:	br	x17

00000000000356e0 <aarch64_extract_operand@plt>:
   356e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356e4:	ldr	x17, [x16, #744]
   356e8:	add	x16, x16, #0x2e8
   356ec:	br	x17

00000000000356f0 <aarch64_ins_sve_addr_ri_s4@plt>:
   356f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   356f4:	ldr	x17, [x16, #752]
   356f8:	add	x16, x16, #0x2f0
   356fc:	br	x17

0000000000035700 <aarch64_ins_prfop@plt>:
   35700:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35704:	ldr	x17, [x16, #760]
   35708:	add	x16, x16, #0x2f8
   3570c:	br	x17

0000000000035710 <aarch64_ins_hint@plt>:
   35710:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35714:	ldr	x17, [x16, #768]
   35718:	add	x16, x16, #0x300
   3571c:	br	x17

0000000000035720 <__gmon_start__@plt>:
   35720:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35724:	ldr	x17, [x16, #776]
   35728:	add	x16, x16, #0x308
   3572c:	br	x17

0000000000035730 <aarch64_ins_sve_float_half_two@plt>:
   35730:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35734:	ldr	x17, [x16, #784]
   35738:	add	x16, x16, #0x310
   3573c:	br	x17

0000000000035740 <aarch64_ext_sve_addr_zz_lsl@plt>:
   35740:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35744:	ldr	x17, [x16, #792]
   35748:	add	x16, x16, #0x318
   3574c:	br	x17

0000000000035750 <abort@plt>:
   35750:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35754:	ldr	x17, [x16, #800]
   35758:	add	x16, x16, #0x320
   3575c:	br	x17

0000000000035760 <aarch64_get_qualifier_esize@plt>:
   35760:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35764:	ldr	x17, [x16, #808]
   35768:	add	x16, x16, #0x328
   3576c:	br	x17

0000000000035770 <aarch64_ins_reglane@plt>:
   35770:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35774:	ldr	x17, [x16, #816]
   35778:	add	x16, x16, #0x330
   3577c:	br	x17

0000000000035780 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   35780:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35784:	ldr	x17, [x16, #824]
   35788:	add	x16, x16, #0x338
   3578c:	br	x17

0000000000035790 <aarch64_ins_imm_rotate2@plt>:
   35790:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35794:	ldr	x17, [x16, #832]
   35798:	add	x16, x16, #0x340
   3579c:	br	x17

00000000000357a0 <aarch64_ext_ldst_elemlist@plt>:
   357a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357a4:	ldr	x17, [x16, #840]
   357a8:	add	x16, x16, #0x348
   357ac:	br	x17

00000000000357b0 <aarch64_ins_fbits@plt>:
   357b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357b4:	ldr	x17, [x16, #848]
   357b8:	add	x16, x16, #0x350
   357bc:	br	x17

00000000000357c0 <aarch64_ins_imm_half@plt>:
   357c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357c4:	ldr	x17, [x16, #856]
   357c8:	add	x16, x16, #0x358
   357cc:	br	x17

00000000000357d0 <aarch64_ext_sve_aimm@plt>:
   357d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357d4:	ldr	x17, [x16, #864]
   357d8:	add	x16, x16, #0x360
   357dc:	br	x17

00000000000357e0 <aarch64_ins_addr_simple@plt>:
   357e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357e4:	ldr	x17, [x16, #872]
   357e8:	add	x16, x16, #0x368
   357ec:	br	x17

00000000000357f0 <aarch64_get_operand_class@plt>:
   357f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   357f4:	ldr	x17, [x16, #880]
   357f8:	add	x16, x16, #0x370
   357fc:	br	x17

0000000000035800 <aarch64_ext_imm@plt>:
   35800:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35804:	ldr	x17, [x16, #888]
   35808:	add	x16, x16, #0x378
   3580c:	br	x17

0000000000035810 <aarch64_ins_addr_uimm12@plt>:
   35810:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35814:	ldr	x17, [x16, #896]
   35818:	add	x16, x16, #0x380
   3581c:	br	x17

0000000000035820 <aarch64_ext_reglist@plt>:
   35820:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35824:	ldr	x17, [x16, #904]
   35828:	add	x16, x16, #0x388
   3582c:	br	x17

0000000000035830 <aarch64_shrink_expanded_imm8@plt>:
   35830:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35834:	ldr	x17, [x16, #912]
   35838:	add	x16, x16, #0x390
   3583c:	br	x17

0000000000035840 <aarch64_ext_shll_imm@plt>:
   35840:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35844:	ldr	x17, [x16, #920]
   35848:	add	x16, x16, #0x398
   3584c:	br	x17

0000000000035850 <aarch64_ins_inv_limm@plt>:
   35850:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35854:	ldr	x17, [x16, #928]
   35858:	add	x16, x16, #0x3a0
   3585c:	br	x17

0000000000035860 <free@plt>:
   35860:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35864:	ldr	x17, [x16, #936]
   35868:	add	x16, x16, #0x3a8
   3586c:	br	x17

0000000000035870 <aarch64_ext_sve_float_zero_one@plt>:
   35870:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35874:	ldr	x17, [x16, #944]
   35878:	add	x16, x16, #0x3b0
   3587c:	br	x17

0000000000035880 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   35880:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35884:	ldr	x17, [x16, #952]
   35888:	add	x16, x16, #0x3b8
   3588c:	br	x17

0000000000035890 <aarch64_ext_addr_regoff@plt>:
   35890:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35894:	ldr	x17, [x16, #960]
   35898:	add	x16, x16, #0x3c0
   3589c:	br	x17

00000000000358a0 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   358a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358a4:	ldr	x17, [x16, #968]
   358a8:	add	x16, x16, #0x3c8
   358ac:	br	x17

00000000000358b0 <aarch64_ins_imm@plt>:
   358b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358b4:	ldr	x17, [x16, #976]
   358b8:	add	x16, x16, #0x3d0
   358bc:	br	x17

00000000000358c0 <aarch64_ins_addr_offset@plt>:
   358c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358c4:	ldr	x17, [x16, #984]
   358c8:	add	x16, x16, #0x3d8
   358cc:	br	x17

00000000000358d0 <aarch64_ext_advsimd_imm_shift@plt>:
   358d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358d4:	ldr	x17, [x16, #992]
   358d8:	add	x16, x16, #0x3e0
   358dc:	br	x17

00000000000358e0 <aarch64_ins_sve_shrimm@plt>:
   358e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358e4:	ldr	x17, [x16, #1000]
   358e8:	add	x16, x16, #0x3e8
   358ec:	br	x17

00000000000358f0 <aarch64_ins_ldst_elemlist@plt>:
   358f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   358f4:	ldr	x17, [x16, #1008]
   358f8:	add	x16, x16, #0x3f0
   358fc:	br	x17

0000000000035900 <init_insn_sequence@plt>:
   35900:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35904:	ldr	x17, [x16, #1016]
   35908:	add	x16, x16, #0x3f8
   3590c:	br	x17

0000000000035910 <strchr@plt>:
   35910:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35914:	ldr	x17, [x16, #1024]
   35918:	add	x16, x16, #0x400
   3591c:	br	x17

0000000000035920 <frexp@plt>:
   35920:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35924:	ldr	x17, [x16, #1032]
   35928:	add	x16, x16, #0x408
   3592c:	br	x17

0000000000035930 <aarch64_ins_barrier@plt>:
   35930:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35934:	ldr	x17, [x16, #1040]
   35938:	add	x16, x16, #0x410
   3593c:	br	x17

0000000000035940 <get_inverted_cond@plt>:
   35940:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35944:	ldr	x17, [x16, #1048]
   35948:	add	x16, x16, #0x418
   3594c:	br	x17

0000000000035950 <aarch64_ext_prfop@plt>:
   35950:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35954:	ldr	x17, [x16, #1056]
   35958:	add	x16, x16, #0x420
   3595c:	br	x17

0000000000035960 <print_aarch64_disassembler_options@plt>:
   35960:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35964:	ldr	x17, [x16, #1064]
   35968:	add	x16, x16, #0x428
   3596c:	br	x17

0000000000035970 <aarch64_ext_addr_simple@plt>:
   35970:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35974:	ldr	x17, [x16, #1072]
   35978:	add	x16, x16, #0x430
   3597c:	br	x17

0000000000035980 <aarch64_ins_addr_regoff@plt>:
   35980:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35984:	ldr	x17, [x16, #1080]
   35988:	add	x16, x16, #0x438
   3598c:	br	x17

0000000000035990 <aarch64_ext_regno@plt>:
   35990:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35994:	ldr	x17, [x16, #1088]
   35998:	add	x16, x16, #0x440
   3599c:	br	x17

00000000000359a0 <floatformat_to_double@plt>:
   359a0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359a4:	ldr	x17, [x16, #1096]
   359a8:	add	x16, x16, #0x448
   359ac:	br	x17

00000000000359b0 <aarch64_ins_advsimd_imm_shift@plt>:
   359b0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359b4:	ldr	x17, [x16, #1104]
   359b8:	add	x16, x16, #0x450
   359bc:	br	x17

00000000000359c0 <aarch64_get_qualifier_nelem@plt>:
   359c0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359c4:	ldr	x17, [x16, #1112]
   359c8:	add	x16, x16, #0x458
   359cc:	br	x17

00000000000359d0 <aarch64_ext_sve_addr_rr_lsl@plt>:
   359d0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359d4:	ldr	x17, [x16, #1120]
   359d8:	add	x16, x16, #0x460
   359dc:	br	x17

00000000000359e0 <aarch64_ext_sve_addr_ri_s4@plt>:
   359e0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359e4:	ldr	x17, [x16, #1128]
   359e8:	add	x16, x16, #0x468
   359ec:	br	x17

00000000000359f0 <aarch64_ins_sve_aimm@plt>:
   359f0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   359f4:	ldr	x17, [x16, #1136]
   359f8:	add	x16, x16, #0x470
   359fc:	br	x17

0000000000035a00 <aarch64_ext_sve_scale@plt>:
   35a00:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a04:	ldr	x17, [x16, #1144]
   35a08:	add	x16, x16, #0x478
   35a0c:	br	x17

0000000000035a10 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   35a10:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a14:	ldr	x17, [x16, #1152]
   35a18:	add	x16, x16, #0x480
   35a1c:	br	x17

0000000000035a20 <xexit@plt>:
   35a20:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a24:	ldr	x17, [x16, #1160]
   35a28:	add	x16, x16, #0x488
   35a2c:	br	x17

0000000000035a30 <aarch64_ext_imm_half@plt>:
   35a30:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a34:	ldr	x17, [x16, #1168]
   35a38:	add	x16, x16, #0x490
   35a3c:	br	x17

0000000000035a40 <disassembler_options_cmp@plt>:
   35a40:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a44:	ldr	x17, [x16, #1176]
   35a48:	add	x16, x16, #0x498
   35a4c:	br	x17

0000000000035a50 <aarch64_insert_operand@plt>:
   35a50:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a54:	ldr	x17, [x16, #1184]
   35a58:	add	x16, x16, #0x4a0
   35a5c:	br	x17

0000000000035a60 <aarch64_ins_sve_asimm@plt>:
   35a60:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a64:	ldr	x17, [x16, #1192]
   35a68:	add	x16, x16, #0x4a8
   35a6c:	br	x17

0000000000035a70 <xmalloc_failed@plt>:
   35a70:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a74:	ldr	x17, [x16, #1200]
   35a78:	add	x16, x16, #0x4b0
   35a7c:	br	x17

0000000000035a80 <aarch64_ins_reg_extended@plt>:
   35a80:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a84:	ldr	x17, [x16, #1208]
   35a88:	add	x16, x16, #0x4b8
   35a8c:	br	x17

0000000000035a90 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   35a90:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35a94:	ldr	x17, [x16, #1216]
   35a98:	add	x16, x16, #0x4c0
   35a9c:	br	x17

0000000000035aa0 <aarch64_ext_barrier@plt>:
   35aa0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35aa4:	ldr	x17, [x16, #1224]
   35aa8:	add	x16, x16, #0x4c8
   35aac:	br	x17

0000000000035ab0 <dcgettext@plt>:
   35ab0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35ab4:	ldr	x17, [x16, #1232]
   35ab8:	add	x16, x16, #0x4d0
   35abc:	br	x17

0000000000035ac0 <aarch64_ext_sve_float_half_one@plt>:
   35ac0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35ac4:	ldr	x17, [x16, #1240]
   35ac8:	add	x16, x16, #0x4d8
   35acc:	br	x17

0000000000035ad0 <aarch64_sys_ins_reg_has_xt@plt>:
   35ad0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35ad4:	ldr	x17, [x16, #1248]
   35ad8:	add	x16, x16, #0x4e0
   35adc:	br	x17

0000000000035ae0 <_bfd_error_handler@plt>:
   35ae0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35ae4:	ldr	x17, [x16, #1256]
   35ae8:	add	x16, x16, #0x4e8
   35aec:	br	x17

0000000000035af0 <aarch64_ins_sve_addr_zi_u5@plt>:
   35af0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35af4:	ldr	x17, [x16, #1264]
   35af8:	add	x16, x16, #0x4f0
   35afc:	br	x17

0000000000035b00 <aarch64_ins_sve_shlimm@plt>:
   35b00:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b04:	ldr	x17, [x16, #1272]
   35b08:	add	x16, x16, #0x4f8
   35b0c:	br	x17

0000000000035b10 <aarch64_wide_constant_p@plt>:
   35b10:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b14:	ldr	x17, [x16, #1280]
   35b18:	add	x16, x16, #0x500
   35b1c:	br	x17

0000000000035b20 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35b20:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b24:	ldr	x17, [x16, #1288]
   35b28:	add	x16, x16, #0x508
   35b2c:	br	x17

0000000000035b30 <aarch64_ext_regno_pair@plt>:
   35b30:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b34:	ldr	x17, [x16, #1296]
   35b38:	add	x16, x16, #0x510
   35b3c:	br	x17

0000000000035b40 <aarch64_ext_ft@plt>:
   35b40:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b44:	ldr	x17, [x16, #1304]
   35b48:	add	x16, x16, #0x518
   35b4c:	br	x17

0000000000035b50 <strncpy@plt>:
   35b50:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b54:	ldr	x17, [x16, #1312]
   35b58:	add	x16, x16, #0x520
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_reg_shifted@plt>:
   35b60:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b64:	ldr	x17, [x16, #1320]
   35b68:	add	x16, x16, #0x528
   35b6c:	br	x17

0000000000035b70 <aarch64_ins_ldst_reglist@plt>:
   35b70:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b74:	ldr	x17, [x16, #1328]
   35b78:	add	x16, x16, #0x530
   35b7c:	br	x17

0000000000035b80 <aarch64_ext_sve_limm_mov@plt>:
   35b80:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b84:	ldr	x17, [x16, #1336]
   35b88:	add	x16, x16, #0x538
   35b8c:	br	x17

0000000000035b90 <__assert_fail@plt>:
   35b90:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35b94:	ldr	x17, [x16, #1344]
   35b98:	add	x16, x16, #0x540
   35b9c:	br	x17

0000000000035ba0 <aarch64_ins_sve_float_half_one@plt>:
   35ba0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35ba4:	ldr	x17, [x16, #1352]
   35ba8:	add	x16, x16, #0x548
   35bac:	br	x17

0000000000035bb0 <aarch64_find_next_alias_opcode@plt>:
   35bb0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35bb4:	ldr	x17, [x16, #1360]
   35bb8:	add	x16, x16, #0x550
   35bbc:	br	x17

0000000000035bc0 <aarch64_ext_imm_rotate1@plt>:
   35bc0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35bc4:	ldr	x17, [x16, #1368]
   35bc8:	add	x16, x16, #0x558
   35bcc:	br	x17

0000000000035bd0 <aarch64_ext_advsimd_imm_modified@plt>:
   35bd0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35bd4:	ldr	x17, [x16, #1376]
   35bd8:	add	x16, x16, #0x560
   35bdc:	br	x17

0000000000035be0 <aarch64_ext_pstatefield@plt>:
   35be0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35be4:	ldr	x17, [x16, #1384]
   35be8:	add	x16, x16, #0x568
   35bec:	br	x17

0000000000035bf0 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35bf0:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35bf4:	ldr	x17, [x16, #1392]
   35bf8:	add	x16, x16, #0x570
   35bfc:	br	x17

0000000000035c00 <aarch64_ext_simd_addr_post@plt>:
   35c00:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c04:	ldr	x17, [x16, #1400]
   35c08:	add	x16, x16, #0x578
   35c0c:	br	x17

0000000000035c10 <aarch64_find_next_opcode@plt>:
   35c10:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c14:	ldr	x17, [x16, #1408]
   35c18:	add	x16, x16, #0x580
   35c1c:	br	x17

0000000000035c20 <aarch64_ext_sve_addr_ri_u6@plt>:
   35c20:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c24:	ldr	x17, [x16, #1416]
   35c28:	add	x16, x16, #0x588
   35c2c:	br	x17

0000000000035c30 <fprintf@plt>:
   35c30:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c34:	ldr	x17, [x16, #1424]
   35c38:	add	x16, x16, #0x590
   35c3c:	br	x17

0000000000035c40 <aarch64_ext_cond@plt>:
   35c40:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c44:	ldr	x17, [x16, #1432]
   35c48:	add	x16, x16, #0x598
   35c4c:	br	x17

0000000000035c50 <aarch64_find_alias_opcode@plt>:
   35c50:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c54:	ldr	x17, [x16, #1440]
   35c58:	add	x16, x16, #0x5a0
   35c5c:	br	x17

0000000000035c60 <aarch64_get_operand_modifier_from_value@plt>:
   35c60:	adrp	x16, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35c64:	ldr	x17, [x16, #1448]
   35c68:	add	x16, x16, #0x5a8
   35c6c:	br	x17

Disassembly of section .text:

0000000000035c70 <buffer_read_memory@@Base-0xd4>:
   35c70:	adrp	x0, 96000 <aarch64_operands@@Base+0x16c38>
   35c74:	ldr	x0, [x0, #3928]
   35c78:	cbz	x0, 35c80 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35c7c:	b	35720 <__gmon_start__@plt>
   35c80:	ret
   35c84:	nop
   35c88:	adrp	x0, ed000 <aarch64_opcode_table@@Base+0x555c0>
   35c8c:	add	x0, x0, #0x640
   35c90:	adrp	x1, ed000 <aarch64_opcode_table@@Base+0x555c0>
   35c94:	add	x1, x1, #0x640
   35c98:	cmp	x1, x0
   35c9c:	b.eq	35cb4 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35ca0:	adrp	x1, 96000 <aarch64_operands@@Base+0x16c38>
   35ca4:	ldr	x1, [x1, #3800]
   35ca8:	cbz	x1, 35cb4 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35cac:	mov	x16, x1
   35cb0:	br	x16
   35cb4:	ret
   35cb8:	adrp	x0, ed000 <aarch64_opcode_table@@Base+0x555c0>
   35cbc:	add	x0, x0, #0x640
   35cc0:	adrp	x1, ed000 <aarch64_opcode_table@@Base+0x555c0>
   35cc4:	add	x1, x1, #0x640
   35cc8:	sub	x1, x1, x0
   35ccc:	lsr	x2, x1, #63
   35cd0:	add	x1, x2, x1, asr #3
   35cd4:	cmp	xzr, x1, asr #1
   35cd8:	asr	x1, x1, #1
   35cdc:	b.eq	35cf4 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35ce0:	adrp	x2, 96000 <aarch64_operands@@Base+0x16c38>
   35ce4:	ldr	x2, [x2, #4048]
   35ce8:	cbz	x2, 35cf4 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35cec:	mov	x16, x2
   35cf0:	br	x16
   35cf4:	ret
   35cf8:	stp	x29, x30, [sp, #-32]!
   35cfc:	mov	x29, sp
   35d00:	str	x19, [sp, #16]
   35d04:	adrp	x19, ed000 <aarch64_opcode_table@@Base+0x555c0>
   35d08:	ldrb	w0, [x19, #1600]
   35d0c:	cbnz	w0, 35d34 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35d10:	adrp	x0, 96000 <aarch64_operands@@Base+0x16c38>
   35d14:	ldr	x0, [x0, #3824]
   35d18:	cbz	x0, 35d28 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35d1c:	adrp	x0, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   35d20:	ldr	x0, [x0, #1456]
   35d24:	bl	35300 <__cxa_finalize@plt>
   35d28:	bl	35c88 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35d2c:	mov	w0, #0x1                   	// #1
   35d30:	strb	w0, [x19, #1600]
   35d34:	ldr	x19, [sp, #16]
   35d38:	ldp	x29, x30, [sp], #32
   35d3c:	ret
   35d40:	b	35cb8 <aarch64_get_operand_modifier_from_value@plt+0x58>

0000000000035d44 <buffer_read_memory@@Base>:
   35d44:	stp	x29, x30, [sp, #-16]!
   35d48:	ldr	x9, [x3, #152]
   35d4c:	mov	x8, x0
   35d50:	mov	x29, sp
   35d54:	subs	x9, x0, x9
   35d58:	mov	w0, #0x5                   	// #5
   35d5c:	b.cc	35dc4 <buffer_read_memory@@Base+0x80>  // b.lo, b.ul, b.last
   35d60:	ldr	w10, [x3, #180]
   35d64:	ldr	x11, [x3, #160]
   35d68:	udiv	x12, x11, x10
   35d6c:	cmp	x9, x12
   35d70:	b.hi	35dc4 <buffer_read_memory@@Base+0x80>  // b.pmore
   35d74:	udiv	w11, w2, w10
   35d78:	add	x13, x9, x11
   35d7c:	cmp	x13, x12
   35d80:	b.hi	35dc4 <buffer_read_memory@@Base+0x80>  // b.pmore
   35d84:	ldr	x12, [x3, #232]
   35d88:	cbz	x12, 35da4 <buffer_read_memory@@Base+0x60>
   35d8c:	cmp	x12, x8
   35d90:	mov	w0, #0x5                   	// #5
   35d94:	b.ls	35dc4 <buffer_read_memory@@Base+0x80>  // b.plast
   35d98:	add	x8, x11, x8
   35d9c:	cmp	x8, x12
   35da0:	b.hi	35dc4 <buffer_read_memory@@Base+0x80>  // b.pmore
   35da4:	ldr	x8, [x3, #144]
   35da8:	mul	x9, x9, x10
   35dac:	mov	w2, w2
   35db0:	mov	x0, x1
   35db4:	add	x8, x8, x9
   35db8:	mov	x1, x8
   35dbc:	bl	35140 <memcpy@plt>
   35dc0:	mov	w0, wzr
   35dc4:	ldp	x29, x30, [sp], #16
   35dc8:	ret

0000000000035dcc <perror_memory@@Base>:
   35dcc:	sub	sp, sp, #0x50
   35dd0:	stp	x20, x19, [sp, #64]
   35dd4:	mov	x20, x2
   35dd8:	cmp	w0, #0x5
   35ddc:	stp	x29, x30, [sp, #32]
   35de0:	str	x21, [sp, #48]
   35de4:	add	x29, sp, #0x20
   35de8:	b.ne	35e40 <perror_memory@@Base+0x74>  // b.any
   35dec:	mov	x2, x1
   35df0:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35df4:	add	x1, x1, #0x80a
   35df8:	mov	x0, sp
   35dfc:	bl	35320 <sprintf@plt>
   35e00:	ldp	x21, x19, [x20]
   35e04:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35e08:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35e0c:	add	x0, x0, #0x7f0
   35e10:	add	x1, x1, #0x811
   35e14:	mov	w2, #0x5                   	// #5
   35e18:	bl	35ab0 <dcgettext@plt>
   35e1c:	mov	x1, x0
   35e20:	mov	x2, sp
   35e24:	mov	x0, x19
   35e28:	blr	x21
   35e2c:	ldp	x20, x19, [sp, #64]
   35e30:	ldr	x21, [sp, #48]
   35e34:	ldp	x29, x30, [sp, #32]
   35e38:	add	sp, sp, #0x50
   35e3c:	ret
   35e40:	mov	w19, w0
   35e44:	ldp	x0, x20, [x20]
   35e48:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35e4c:	add	x1, x1, #0x7f8
   35e50:	mov	w2, #0x5                   	// #5
   35e54:	str	x0, [x29, #24]
   35e58:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35e5c:	add	x0, x0, #0x7f0
   35e60:	bl	35ab0 <dcgettext@plt>
   35e64:	mov	x1, x0
   35e68:	mov	x0, x20
   35e6c:	mov	w2, w19
   35e70:	ldr	x3, [x29, #24]
   35e74:	ldp	x20, x19, [sp, #64]
   35e78:	ldr	x21, [sp, #48]
   35e7c:	ldp	x29, x30, [sp, #32]
   35e80:	add	sp, sp, #0x50
   35e84:	br	x3

0000000000035e88 <generic_print_address@@Base>:
   35e88:	sub	sp, sp, #0x40
   35e8c:	str	x19, [sp, #48]
   35e90:	mov	x19, x1
   35e94:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35e98:	mov	x2, x0
   35e9c:	add	x1, x1, #0x80a
   35ea0:	mov	x0, sp
   35ea4:	stp	x29, x30, [sp, #32]
   35ea8:	add	x29, sp, #0x20
   35eac:	bl	35320 <sprintf@plt>
   35eb0:	ldp	x8, x0, [x19]
   35eb4:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   35eb8:	add	x1, x1, #0x831
   35ebc:	mov	x2, sp
   35ec0:	blr	x8
   35ec4:	ldr	x19, [sp, #48]
   35ec8:	ldp	x29, x30, [sp, #32]
   35ecc:	add	sp, sp, #0x40
   35ed0:	ret

0000000000035ed4 <generic_symbol_at_address@@Base>:
   35ed4:	mov	w0, #0x1                   	// #1
   35ed8:	ret

0000000000035edc <generic_symbol_is_valid@@Base>:
   35edc:	mov	w0, #0x1                   	// #1
   35ee0:	ret

0000000000035ee4 <disassembler@@Base>:
   35ee4:	cmp	w0, #0x52
   35ee8:	b.eq	35f10 <disassembler@@Base+0x2c>  // b.none
   35eec:	cmp	w0, #0x21
   35ef0:	b.ne	35f1c <disassembler@@Base+0x38>  // b.any
   35ef4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   35ef8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   35efc:	ldr	x8, [x8, #3808]
   35f00:	ldr	x9, [x9, #3952]
   35f04:	cmp	w1, #0x0
   35f08:	csel	x0, x9, x8, eq  // eq = none
   35f0c:	ret
   35f10:	adrp	x0, 96000 <aarch64_operands@@Base+0x16c38>
   35f14:	ldr	x0, [x0, #4024]
   35f18:	ret
   35f1c:	mov	x0, xzr
   35f20:	ret

0000000000035f24 <disassembler_usage@@Base>:
   35f24:	stp	x29, x30, [sp, #-32]!
   35f28:	str	x19, [sp, #16]
   35f2c:	mov	x29, sp
   35f30:	mov	x19, x0
   35f34:	bl	35960 <print_aarch64_disassembler_options@plt>
   35f38:	mov	x0, x19
   35f3c:	ldr	x19, [sp, #16]
   35f40:	ldp	x29, x30, [sp], #32
   35f44:	b	35580 <print_arm_disassembler_options@plt>

0000000000035f48 <disassemble_init_for_target@@Base>:
   35f48:	cbz	x0, 35f80 <disassemble_init_for_target@@Base+0x38>
   35f4c:	ldr	w8, [x0, #28]
   35f50:	cmp	w8, #0x21
   35f54:	b.eq	35f6c <disassemble_init_for_target@@Base+0x24>  // b.none
   35f58:	cmp	w8, #0x52
   35f5c:	b.ne	35f80 <disassemble_init_for_target@@Base+0x38>  // b.any
   35f60:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   35f64:	ldr	x8, [x8, #3856]
   35f68:	b	35f74 <disassemble_init_for_target@@Base+0x2c>
   35f6c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   35f70:	ldr	x8, [x8, #3912]
   35f74:	mov	w9, #0x1                   	// #1
   35f78:	str	x8, [x0, #136]
   35f7c:	str	w9, [x0, #192]
   35f80:	ret

0000000000035f84 <disassemble_free_target@@Base>:
   35f84:	ret

0000000000035f88 <remove_whitespace_and_extra_commas@@Base>:
   35f88:	cbz	x0, 36094 <remove_whitespace_and_extra_commas@@Base+0x10c>
   35f8c:	stp	x29, x30, [sp, #-64]!
   35f90:	str	x23, [sp, #16]
   35f94:	stp	x22, x21, [sp, #32]
   35f98:	stp	x20, x19, [sp, #48]
   35f9c:	mov	x29, sp
   35fa0:	mov	x19, x0
   35fa4:	bl	35190 <strlen@plt>
   35fa8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   35fac:	ldr	x8, [x8, #3880]
   35fb0:	cbz	x0, 35fdc <remove_whitespace_and_extra_commas@@Base+0x54>
   35fb4:	sub	x9, x19, #0x1
   35fb8:	ldrb	w10, [x9, x0]
   35fbc:	cmp	x10, #0x2c
   35fc0:	b.eq	35fcc <remove_whitespace_and_extra_commas@@Base+0x44>  // b.none
   35fc4:	ldrh	w10, [x8, x10, lsl #1]
   35fc8:	tbz	w10, #6, 35fdc <remove_whitespace_and_extra_commas@@Base+0x54>
   35fcc:	sub	x10, x0, #0x1
   35fd0:	strb	wzr, [x9, x0]
   35fd4:	mov	x0, x10
   35fd8:	cbnz	x10, 35fb8 <remove_whitespace_and_extra_commas@@Base+0x30>
   35fdc:	ldrb	w11, [x19]
   35fe0:	cbz	w11, 36004 <remove_whitespace_and_extra_commas@@Base+0x7c>
   35fe4:	add	x9, x19, #0x1
   35fe8:	mov	w10, #0x2c                  	// #44
   35fec:	and	x11, x11, #0xff
   35ff0:	ldrh	w11, [x8, x11, lsl #1]
   35ff4:	tbz	w11, #6, 35ffc <remove_whitespace_and_extra_commas@@Base+0x74>
   35ff8:	sturb	w10, [x9, #-1]
   35ffc:	ldrb	w11, [x9], #1
   36000:	cbnz	w11, 35fec <remove_whitespace_and_extra_commas@@Base+0x64>
   36004:	mov	x20, x19
   36008:	ldrb	w8, [x20]
   3600c:	cmp	w8, #0x2c
   36010:	b.eq	3601c <remove_whitespace_and_extra_commas@@Base+0x94>  // b.none
   36014:	cbnz	w8, 36070 <remove_whitespace_and_extra_commas@@Base+0xe8>
   36018:	b	36078 <remove_whitespace_and_extra_commas@@Base+0xf0>
   3601c:	mov	x23, x20
   36020:	ldrb	w8, [x23, #1]!
   36024:	cmp	x20, x19
   36028:	b.eq	36034 <remove_whitespace_and_extra_commas@@Base+0xac>  // b.none
   3602c:	cmp	w8, #0x2c
   36030:	b.ne	36070 <remove_whitespace_and_extra_commas@@Base+0xe8>  // b.any
   36034:	mov	x21, x23
   36038:	cmp	w8, #0x2c
   3603c:	b.ne	36048 <remove_whitespace_and_extra_commas@@Base+0xc0>  // b.any
   36040:	ldrb	w8, [x21, #1]!
   36044:	b	36038 <remove_whitespace_and_extra_commas@@Base+0xb0>
   36048:	mov	x0, x21
   3604c:	bl	35190 <strlen@plt>
   36050:	cmp	x20, x19
   36054:	mov	x22, x0
   36058:	csel	x20, x20, x23, eq  // eq = none
   3605c:	mov	x0, x20
   36060:	mov	x1, x21
   36064:	mov	x2, x22
   36068:	bl	35150 <memmove@plt>
   3606c:	strb	wzr, [x20, x22]
   36070:	add	x20, x20, #0x1
   36074:	b	36008 <remove_whitespace_and_extra_commas@@Base+0x80>
   36078:	ldrb	w8, [x19]
   3607c:	ldp	x22, x21, [sp, #32]
   36080:	ldr	x23, [sp, #16]
   36084:	cmp	w8, #0x0
   36088:	csel	x0, xzr, x19, eq  // eq = none
   3608c:	ldp	x20, x19, [sp, #48]
   36090:	ldp	x29, x30, [sp], #64
   36094:	ret

0000000000036098 <disassembler_options_cmp@@Base>:
   36098:	ldrb	w8, [x0]
   3609c:	ldrb	w9, [x1]
   360a0:	cmp	w8, #0x2c
   360a4:	csel	w8, wzr, w8, eq  // eq = none
   360a8:	cmp	w9, #0x2c
   360ac:	csel	w9, wzr, w9, eq  // eq = none
   360b0:	cbz	w8, 360c4 <disassembler_options_cmp@@Base+0x2c>
   360b4:	add	x1, x1, #0x1
   360b8:	cmp	w8, w9
   360bc:	add	x0, x0, #0x1
   360c0:	b.eq	36098 <disassembler_options_cmp@@Base>  // b.none
   360c4:	sub	w0, w8, w9
   360c8:	ret

00000000000360cc <init_disassemble_info@@Base>:
   360cc:	stp	x29, x30, [sp, #-48]!
   360d0:	str	x21, [sp, #16]
   360d4:	stp	x20, x19, [sp, #32]
   360d8:	mov	x19, x2
   360dc:	mov	x20, x1
   360e0:	mov	x21, x0
   360e4:	add	x0, x0, #0x10
   360e8:	mov	w2, #0xe8                  	// #232
   360ec:	mov	w1, wzr
   360f0:	mov	x29, sp
   360f4:	bl	35550 <memset@plt>
   360f8:	stp	x19, x20, [x21]
   360fc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   36100:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   36104:	ldr	x8, [x8, #3976]
   36108:	ldr	x9, [x9, #3816]
   3610c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   36110:	movi	v0.2s, #0x2
   36114:	ldr	x10, [x10, #3784]
   36118:	stp	x8, x9, [x21, #104]
   3611c:	adrp	x8, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36120:	str	d0, [x21, #40]
   36124:	ldr	d0, [x8, #2104]
   36128:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3612c:	ldr	x8, [x8, #3936]
   36130:	stp	x10, x8, [x21, #120]
   36134:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   36138:	ldr	x8, [x8, #3872]
   3613c:	str	d0, [x21, #176]
   36140:	str	x8, [x21, #136]
   36144:	ldp	x20, x19, [sp, #32]
   36148:	ldr	x21, [sp, #16]
   3614c:	ldp	x29, x30, [sp], #48
   36150:	ret

0000000000036154 <aarch64_ins_regno@@Base>:
   36154:	stp	x29, x30, [sp, #-16]!
   36158:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3615c:	ldr	w9, [x0, #20]
   36160:	ldr	x10, [x10, #3944]
   36164:	mov	x29, sp
   36168:	add	x8, x10, x9, lsl #3
   3616c:	ldr	w8, [x8, #4]
   36170:	sub	w11, w8, #0x1
   36174:	cmp	w11, #0x1e
   36178:	b.hi	361c0 <aarch64_ins_regno@@Base+0x6c>  // b.pmore
   3617c:	lsl	x9, x9, #3
   36180:	ldr	w9, [x10, x9]
   36184:	tbnz	w9, #31, 361c0 <aarch64_ins_regno@@Base+0x6c>
   36188:	add	w10, w9, w8
   3618c:	cmp	w10, #0x21
   36190:	b.ge	361c0 <aarch64_ins_regno@@Base+0x6c>  // b.tcont
   36194:	ldr	w10, [x1, #16]
   36198:	mov	w11, #0xffffffff            	// #-1
   3619c:	ldr	w12, [x2]
   361a0:	lsl	w8, w11, w8
   361a4:	bic	w8, w10, w8
   361a8:	lsl	w8, w8, w9
   361ac:	orr	w8, w12, w8
   361b0:	mov	w0, #0x1                   	// #1
   361b4:	str	w8, [x2]
   361b8:	ldp	x29, x30, [sp], #16
   361bc:	ret
   361c0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   361c4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   361c8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   361cc:	add	x0, x0, #0x553
   361d0:	add	x1, x1, #0x5b0
   361d4:	add	x3, x3, #0x5cc
   361d8:	mov	w2, #0x16a                 	// #362
   361dc:	bl	35b90 <__assert_fail@plt>

00000000000361e0 <aarch64_ins_reglane@@Base>:
   361e0:	stp	x29, x30, [sp, #-16]!
   361e4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   361e8:	ldr	w10, [x0, #20]
   361ec:	ldr	x9, [x9, #3944]
   361f0:	mov	x29, sp
   361f4:	add	x8, x9, x10, lsl #3
   361f8:	ldr	w8, [x8, #4]
   361fc:	sub	w11, w8, #0x1
   36200:	cmp	w11, #0x1e
   36204:	b.hi	36468 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   36208:	lsl	x10, x10, #3
   3620c:	ldr	w10, [x9, x10]
   36210:	tbnz	w10, #31, 36468 <aarch64_ins_reglane@@Base+0x288>
   36214:	add	w11, w10, w8
   36218:	cmp	w11, #0x21
   3621c:	b.ge	36468 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   36220:	ldr	x11, [x3, #8]
   36224:	ldr	w12, [x1, #16]
   36228:	mov	w13, #0xffffffff            	// #-1
   3622c:	lsl	w8, w13, w8
   36230:	ldr	w14, [x11, #12]
   36234:	ldr	w13, [x2]
   36238:	bic	w8, w12, w8
   3623c:	lsl	w8, w8, w10
   36240:	bic	w8, w8, w14
   36244:	orr	w8, w13, w8
   36248:	str	w8, [x2]
   3624c:	ldr	w10, [x11, #16]
   36250:	cmp	w10, #0x5a
   36254:	b.gt	362cc <aarch64_ins_reglane@@Base+0xec>
   36258:	cmp	w10, #0xa
   3625c:	b.eq	36268 <aarch64_ins_reglane@@Base+0x88>  // b.none
   36260:	cmp	w10, #0x17
   36264:	b.ne	3635c <aarch64_ins_reglane@@Base+0x17c>  // b.any
   36268:	ldr	w10, [x1]
   3626c:	ldrb	w12, [x1, #4]
   36270:	cmp	w10, #0x20
   36274:	sub	w10, w12, #0x5
   36278:	b.ne	36318 <aarch64_ins_reglane@@Base+0x138>  // b.any
   3627c:	ldr	w11, [x11, #32]
   36280:	cmp	w11, #0x1f
   36284:	b.ne	36318 <aarch64_ins_reglane@@Base+0x138>  // b.any
   36288:	ldr	w11, [x1, #8]
   3628c:	cmp	w11, #0x1
   36290:	b.ne	364e8 <aarch64_ins_reglane@@Base+0x308>  // b.any
   36294:	ldr	w11, [x9, #324]
   36298:	sub	w12, w11, #0x1
   3629c:	cmp	w12, #0x1e
   362a0:	b.hi	36468 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   362a4:	ldr	w9, [x9, #320]
   362a8:	tbnz	w9, #31, 36468 <aarch64_ins_reglane@@Base+0x288>
   362ac:	add	w12, w9, w11
   362b0:	cmp	w12, #0x21
   362b4:	b.ge	36468 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   362b8:	ldr	x12, [x1, #24]
   362bc:	mov	w13, #0xffffffff            	// #-1
   362c0:	lsl	w11, w13, w11
   362c4:	lsl	x10, x12, x10
   362c8:	b	36354 <aarch64_ins_reglane@@Base+0x174>
   362cc:	cmp	w10, #0x5b
   362d0:	b.eq	363b4 <aarch64_ins_reglane@@Base+0x1d4>  // b.none
   362d4:	cmp	w10, #0x5d
   362d8:	b.ne	3635c <aarch64_ins_reglane@@Base+0x17c>  // b.any
   362dc:	ldrb	w8, [x1, #4]
   362e0:	and	w8, w8, #0xfe
   362e4:	cmp	w8, #0xa
   362e8:	b.ne	364a8 <aarch64_ins_reglane@@Base+0x2c8>  // b.any
   362ec:	ldr	w1, [x1, #24]
   362f0:	cmp	w1, #0x4
   362f4:	b.cc	363fc <aarch64_ins_reglane@@Base+0x21c>  // b.lo, b.ul, b.last
   362f8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   362fc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36300:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36304:	add	x0, x0, #0x98e
   36308:	add	x1, x1, #0x8df
   3630c:	add	x3, x3, #0x8fb
   36310:	mov	w2, #0x87                  	// #135
   36314:	bl	35b90 <__assert_fail@plt>
   36318:	ldr	w11, [x9, #348]
   3631c:	sub	w12, w11, #0x1
   36320:	cmp	w12, #0x1e
   36324:	b.hi	36468 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   36328:	ldr	w9, [x9, #344]
   3632c:	tbnz	w9, #31, 36468 <aarch64_ins_reglane@@Base+0x288>
   36330:	add	w12, w9, w11
   36334:	cmp	w12, #0x21
   36338:	b.ge	36468 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   3633c:	ldr	x12, [x1, #24]
   36340:	mov	w13, #0x1                   	// #1
   36344:	mov	w14, #0xffffffff            	// #-1
   36348:	lsl	w11, w14, w11
   3634c:	bfi	x13, x12, #1, #63
   36350:	lsl	x10, x13, x10
   36354:	bic	w10, w10, w11
   36358:	b	36450 <aarch64_ins_reglane@@Base+0x270>
   3635c:	ldr	w11, [x11, #20]
   36360:	ldrb	w10, [x1, #4]
   36364:	ldr	w12, [x1, #24]
   36368:	cmp	w11, #0x50
   3636c:	cset	w11, eq  // eq = none
   36370:	cmp	w10, #0x8
   36374:	lsl	w1, w12, w11
   36378:	b.eq	36418 <aarch64_ins_reglane@@Base+0x238>  // b.none
   3637c:	cmp	w10, #0x7
   36380:	b.eq	363f4 <aarch64_ins_reglane@@Base+0x214>  // b.none
   36384:	cmp	w10, #0x6
   36388:	b.ne	36488 <aarch64_ins_reglane@@Base+0x2a8>  // b.any
   3638c:	cmp	w1, #0x8
   36390:	b.cs	36508 <aarch64_ins_reglane@@Base+0x328>  // b.hs, b.nlast
   36394:	mov	w3, #0x3                   	// #3
   36398:	mov	w4, #0x3f                  	// #63
   3639c:	mov	w5, #0x3e                  	// #62
   363a0:	mov	w6, #0x3d                  	// #61
   363a4:	mov	x0, x2
   363a8:	mov	w2, wzr
   363ac:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   363b0:	b	3645c <aarch64_ins_reglane@@Base+0x27c>
   363b4:	ldr	w10, [x1, #24]
   363b8:	cmp	w10, #0x4
   363bc:	b.cs	364c8 <aarch64_ins_reglane@@Base+0x2e8>  // b.hs, b.nlast
   363c0:	ldr	w11, [x9, #996]
   363c4:	sub	w12, w11, #0x1
   363c8:	cmp	w12, #0x1e
   363cc:	b.hi	36468 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   363d0:	ldr	w9, [x9, #992]
   363d4:	tbnz	w9, #31, 36468 <aarch64_ins_reglane@@Base+0x288>
   363d8:	add	w12, w9, w11
   363dc:	cmp	w12, #0x21
   363e0:	b.ge	36468 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   363e4:	mov	w12, #0xffffffff            	// #-1
   363e8:	lsl	w11, w12, w11
   363ec:	bic	w10, w10, w11
   363f0:	b	36450 <aarch64_ins_reglane@@Base+0x270>
   363f4:	cmp	w1, #0x4
   363f8:	b.cs	36528 <aarch64_ins_reglane@@Base+0x348>  // b.hs, b.nlast
   363fc:	mov	w3, #0x2                   	// #2
   36400:	mov	w4, #0x3e                  	// #62
   36404:	mov	w5, #0x3d                  	// #61
   36408:	mov	x0, x2
   3640c:	mov	w2, wzr
   36410:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   36414:	b	3645c <aarch64_ins_reglane@@Base+0x27c>
   36418:	cmp	w1, #0x2
   3641c:	b.cs	36548 <aarch64_ins_reglane@@Base+0x368>  // b.hs, b.nlast
   36420:	ldr	w10, [x9, #492]
   36424:	sub	w11, w10, #0x1
   36428:	cmp	w11, #0x1e
   3642c:	b.hi	36468 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   36430:	ldr	w9, [x9, #488]
   36434:	tbnz	w9, #31, 36468 <aarch64_ins_reglane@@Base+0x288>
   36438:	add	w11, w9, w10
   3643c:	cmp	w11, #0x21
   36440:	b.ge	36468 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   36444:	mov	w11, #0xffffffff            	// #-1
   36448:	lsl	w10, w11, w10
   3644c:	bic	w10, w1, w10
   36450:	lsl	w9, w10, w9
   36454:	orr	w8, w9, w8
   36458:	str	w8, [x2]
   3645c:	mov	w0, #0x1                   	// #1
   36460:	ldp	x29, x30, [sp], #16
   36464:	ret
   36468:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3646c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36470:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36474:	add	x0, x0, #0x553
   36478:	add	x1, x1, #0x5b0
   3647c:	add	x3, x3, #0x5cc
   36480:	mov	w2, #0x16a                 	// #362
   36484:	bl	35b90 <__assert_fail@plt>
   36488:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3648c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36490:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36494:	add	x0, x0, #0x5dc
   36498:	add	x1, x1, #0x8df
   3649c:	add	x3, x3, #0x8fb
   364a0:	mov	w2, #0xb1                  	// #177
   364a4:	bl	35b90 <__assert_fail@plt>
   364a8:	adrp	x0, 58000 <fields@@Base+0x1e84>
   364ac:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364b0:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364b4:	add	x0, x0, #0x5dc
   364b8:	add	x1, x1, #0x8df
   364bc:	add	x3, x3, #0x8fb
   364c0:	mov	w2, #0x8b                  	// #139
   364c4:	bl	35b90 <__assert_fail@plt>
   364c8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364cc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364d0:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364d4:	add	x0, x0, #0x98e
   364d8:	add	x1, x1, #0x8df
   364dc:	add	x3, x3, #0x8fb
   364e0:	mov	w2, #0x92                  	// #146
   364e4:	bl	35b90 <__assert_fail@plt>
   364e8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364ec:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364f0:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   364f4:	add	x0, x0, #0x8d0
   364f8:	add	x1, x1, #0x8df
   364fc:	add	x3, x3, #0x8fb
   36500:	mov	w2, #0x6e                  	// #110
   36504:	bl	35b90 <__assert_fail@plt>
   36508:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3650c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36510:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36514:	add	x0, x0, #0x9a0
   36518:	add	x1, x1, #0x8df
   3651c:	add	x3, x3, #0x8fb
   36520:	mov	w2, #0xa3                  	// #163
   36524:	bl	35b90 <__assert_fail@plt>
   36528:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3652c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36530:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36534:	add	x0, x0, #0x98e
   36538:	add	x1, x1, #0x8df
   3653c:	add	x3, x3, #0x8fb
   36540:	mov	w2, #0xa8                  	// #168
   36544:	bl	35b90 <__assert_fail@plt>
   36548:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3654c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36550:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36554:	add	x0, x0, #0x9b2
   36558:	add	x1, x1, #0x8df
   3655c:	add	x3, x3, #0x8fb
   36560:	mov	w2, #0xad                  	// #173
   36564:	bl	35b90 <__assert_fail@plt>
   36568:	sub	sp, sp, #0xe0
   3656c:	stp	x29, x30, [sp, #208]
   36570:	add	x29, sp, #0xd0
   36574:	mov	x8, #0xffffffffffffffd8    	// #-40
   36578:	mov	x10, sp
   3657c:	movk	x8, #0xff80, lsl #32
   36580:	sub	x11, x29, #0x48
   36584:	add	x10, x10, #0x80
   36588:	add	x12, x29, #0x10
   3658c:	mov	w9, #0xffffffd8            	// #-40
   36590:	add	x11, x11, #0x28
   36594:	stp	x10, x8, [x29, #-16]
   36598:	mov	w8, #0xffffffd8            	// #-40
   3659c:	stp	x3, x4, [x29, #-72]
   365a0:	stp	x5, x6, [x29, #-56]
   365a4:	stur	x7, [x29, #-40]
   365a8:	stp	q1, q2, [sp, #16]
   365ac:	stp	q3, q4, [sp, #48]
   365b0:	str	q0, [sp]
   365b4:	stp	q5, q6, [sp, #80]
   365b8:	str	q7, [sp, #112]
   365bc:	stp	x12, x11, [x29, #-32]
   365c0:	tbz	w9, #31, 365e4 <aarch64_ins_reglane@@Base+0x404>
   365c4:	add	w8, w9, #0x8
   365c8:	cmn	w9, #0x8
   365cc:	stur	w8, [x29, #-8]
   365d0:	b.gt	365e4 <aarch64_ins_reglane@@Base+0x404>
   365d4:	ldur	x9, [x29, #-24]
   365d8:	mov	x10, #0xffffffffffffffd8    	// #-40
   365dc:	add	x9, x9, x10
   365e0:	b	365f0 <aarch64_ins_reglane@@Base+0x410>
   365e4:	ldur	x9, [x29, #-32]
   365e8:	add	x10, x9, #0x8
   365ec:	stur	x10, [x29, #-32]
   365f0:	ldr	w9, [x9]
   365f4:	cmp	w9, #0x5
   365f8:	b.hi	366c8 <aarch64_ins_reglane@@Base+0x4e8>  // b.pmore
   365fc:	cbz	w9, 3669c <aarch64_ins_reglane@@Base+0x4bc>
   36600:	adrp	x12, 96000 <aarch64_operands@@Base+0x16c38>
   36604:	ldur	x10, [x29, #-24]
   36608:	ldr	x12, [x12, #3944]
   3660c:	mvn	w11, w2
   36610:	mov	w13, #0xffffffff            	// #-1
   36614:	tbz	w8, #31, 36638 <aarch64_ins_reglane@@Base+0x458>
   36618:	add	w15, w8, #0x8
   3661c:	cmn	w8, #0x8
   36620:	stur	w15, [x29, #-8]
   36624:	b.gt	36634 <aarch64_ins_reglane@@Base+0x454>
   36628:	add	x14, x10, w8, sxtw
   3662c:	mov	w8, w15
   36630:	b	36644 <aarch64_ins_reglane@@Base+0x464>
   36634:	mov	w8, w15
   36638:	ldur	x14, [x29, #-32]
   3663c:	add	x15, x14, #0x8
   36640:	stur	x15, [x29, #-32]
   36644:	ldr	w15, [x14]
   36648:	add	x14, x12, x15, lsl #3
   3664c:	ldr	w14, [x14, #4]
   36650:	sub	w16, w14, #0x1
   36654:	cmp	w16, #0x1e
   36658:	b.hi	366a8 <aarch64_ins_reglane@@Base+0x4c8>  // b.pmore
   3665c:	lsl	x15, x15, #3
   36660:	ldr	w15, [x12, x15]
   36664:	tbnz	w15, #31, 366a8 <aarch64_ins_reglane@@Base+0x4c8>
   36668:	add	w16, w15, w14
   3666c:	cmp	w16, #0x21
   36670:	b.ge	366a8 <aarch64_ins_reglane@@Base+0x4c8>  // b.tcont
   36674:	lsl	w16, w13, w14
   36678:	ldr	w17, [x0]
   3667c:	bic	w16, w1, w16
   36680:	lsl	w15, w16, w15
   36684:	and	w15, w15, w11
   36688:	sub	w9, w9, #0x1
   3668c:	orr	w15, w17, w15
   36690:	lsr	w1, w1, w14
   36694:	str	w15, [x0]
   36698:	cbnz	w9, 36614 <aarch64_ins_reglane@@Base+0x434>
   3669c:	ldp	x29, x30, [sp, #208]
   366a0:	add	sp, sp, #0xe0
   366a4:	ret
   366a8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   366ac:	adrp	x1, 54000 <xexit@@Base+0x84c>
   366b0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   366b4:	add	x0, x0, #0x553
   366b8:	add	x1, x1, #0x5b0
   366bc:	add	x3, x3, #0x5cc
   366c0:	mov	w2, #0x16a                 	// #362
   366c4:	bl	35b90 <__assert_fail@plt>
   366c8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   366cc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   366d0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   366d4:	add	x0, x0, #0x506
   366d8:	add	x1, x1, #0x8df
   366dc:	add	x3, x3, #0x50f
   366e0:	mov	w2, #0x31                  	// #49
   366e4:	bl	35b90 <__assert_fail@plt>

00000000000366e8 <aarch64_ins_reglist@@Base>:
   366e8:	stp	x29, x30, [sp, #-16]!
   366ec:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   366f0:	ldr	w10, [x0, #20]
   366f4:	ldr	x8, [x8, #3944]
   366f8:	mov	x29, sp
   366fc:	add	x9, x8, x10, lsl #3
   36700:	ldr	w9, [x9, #4]
   36704:	sub	w11, w9, #0x1
   36708:	cmp	w11, #0x1e
   3670c:	b.hi	367a0 <aarch64_ins_reglist@@Base+0xb8>  // b.pmore
   36710:	lsl	x10, x10, #3
   36714:	ldr	w10, [x8, x10]
   36718:	tbnz	w10, #31, 367a0 <aarch64_ins_reglist@@Base+0xb8>
   3671c:	add	w11, w10, w9
   36720:	cmp	w11, #0x21
   36724:	b.ge	367a0 <aarch64_ins_reglist@@Base+0xb8>  // b.tcont
   36728:	ldrh	w12, [x1, #16]
   3672c:	ldr	w11, [x8, #220]
   36730:	mov	w13, #0xffffffff            	// #-1
   36734:	ldr	w14, [x2]
   36738:	lsl	w9, w13, w9
   3673c:	and	w12, w12, #0x1f
   36740:	bic	w9, w12, w9
   36744:	sub	w13, w11, #0x1
   36748:	lsl	w9, w9, w10
   3674c:	orr	w9, w14, w9
   36750:	cmp	w13, #0x1e
   36754:	str	w9, [x2]
   36758:	b.hi	367a0 <aarch64_ins_reglist@@Base+0xb8>  // b.pmore
   3675c:	ldr	w8, [x8, #216]
   36760:	tbnz	w8, #31, 367a0 <aarch64_ins_reglist@@Base+0xb8>
   36764:	add	w10, w8, w11
   36768:	cmp	w10, #0x21
   3676c:	b.ge	367a0 <aarch64_ins_reglist@@Base+0xb8>  // b.tcont
   36770:	ldrh	w10, [x1, #16]
   36774:	mov	w12, #0xffffffff            	// #-1
   36778:	lsl	w11, w12, w11
   3677c:	mov	w0, #0x1                   	// #1
   36780:	ubfx	w10, w10, #5, #3
   36784:	sub	w10, w10, #0x1
   36788:	bic	w10, w10, w11
   3678c:	lsl	w8, w10, w8
   36790:	orr	w8, w8, w9
   36794:	str	w8, [x2]
   36798:	ldp	x29, x30, [sp], #16
   3679c:	ret
   367a0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   367a4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   367a8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   367ac:	add	x0, x0, #0x553
   367b0:	add	x1, x1, #0x5b0
   367b4:	add	x3, x3, #0x5cc
   367b8:	mov	w2, #0x16a                 	// #362
   367bc:	bl	35b90 <__assert_fail@plt>

00000000000367c0 <aarch64_ins_ldst_reglist@@Base>:
   367c0:	stp	x29, x30, [sp, #-16]!
   367c4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   367c8:	ldr	x8, [x8, #3944]
   367cc:	mov	x29, sp
   367d0:	ldr	w9, [x8, #100]
   367d4:	sub	w10, w9, #0x1
   367d8:	cmp	w10, #0x1e
   367dc:	b.hi	368d8 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.pmore
   367e0:	ldr	w10, [x8, #96]
   367e4:	tbnz	w10, #31, 368d8 <aarch64_ins_ldst_reglist@@Base+0x118>
   367e8:	add	w11, w10, w9
   367ec:	cmp	w11, #0x21
   367f0:	b.ge	368d8 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.tcont
   367f4:	ldr	x11, [x3, #8]
   367f8:	ldrh	w12, [x1, #16]
   367fc:	mov	w13, #0xffffffff            	// #-1
   36800:	ldr	w14, [x2]
   36804:	ldrb	w11, [x11, #123]
   36808:	lsl	w9, w13, w9
   3680c:	and	w12, w12, #0x1f
   36810:	bic	w9, w12, w9
   36814:	lsl	w9, w9, w10
   36818:	and	w10, w11, #0x7
   3681c:	sub	w10, w10, #0x1
   36820:	orr	w9, w14, w9
   36824:	cmp	w10, #0x3
   36828:	str	w9, [x2]
   3682c:	b.hi	368f8 <aarch64_ins_ldst_reglist@@Base+0x138>  // b.pmore
   36830:	adrp	x11, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36834:	add	x11, x11, #0x840
   36838:	adr	x12, 3684c <aarch64_ins_ldst_reglist@@Base+0x8c>
   3683c:	ldrb	w13, [x11, x10]
   36840:	add	x12, x12, x13, lsl #2
   36844:	mov	w10, #0x4                   	// #4
   36848:	br	x12
   3684c:	ldrh	w10, [x1, #16]
   36850:	ubfx	x10, x10, #5, #3
   36854:	sub	x10, x10, #0x1
   36858:	cmp	w10, #0x4
   3685c:	b.cs	36918 <aarch64_ins_ldst_reglist@@Base+0x158>  // b.hs, b.nlast
   36860:	adrp	x11, 54000 <xexit@@Base+0x84c>
   36864:	add	x11, x11, #0xafc
   36868:	ldr	w10, [x11, x10, lsl #2]
   3686c:	b	36890 <aarch64_ins_ldst_reglist@@Base+0xd0>
   36870:	ldrh	w10, [x1, #16]
   36874:	mov	w11, #0x8                   	// #8
   36878:	and	w10, w10, #0xe0
   3687c:	cmp	w10, #0x80
   36880:	mov	w10, #0x3                   	// #3
   36884:	csel	w10, w10, w11, eq  // eq = none
   36888:	b	36890 <aarch64_ins_ldst_reglist@@Base+0xd0>
   3688c:	mov	w10, wzr
   36890:	ldr	w11, [x8, #196]
   36894:	sub	w12, w11, #0x1
   36898:	cmp	w12, #0x1e
   3689c:	b.hi	368d8 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.pmore
   368a0:	ldr	w8, [x8, #192]
   368a4:	tbnz	w8, #31, 368d8 <aarch64_ins_ldst_reglist@@Base+0x118>
   368a8:	add	w12, w8, w11
   368ac:	cmp	w12, #0x21
   368b0:	b.ge	368d8 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.tcont
   368b4:	mov	w12, #0xffffffff            	// #-1
   368b8:	lsl	w11, w12, w11
   368bc:	bic	w10, w10, w11
   368c0:	lsl	w8, w10, w8
   368c4:	orr	w8, w8, w9
   368c8:	mov	w0, #0x1                   	// #1
   368cc:	str	w8, [x2]
   368d0:	ldp	x29, x30, [sp], #16
   368d4:	ret
   368d8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   368dc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   368e0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   368e4:	add	x0, x0, #0x553
   368e8:	add	x1, x1, #0x5b0
   368ec:	add	x3, x3, #0x5cc
   368f0:	mov	w2, #0x16a                 	// #362
   368f4:	bl	35b90 <__assert_fail@plt>
   368f8:	adrp	x0, 58000 <fields@@Base+0x1e84>
   368fc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36900:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36904:	add	x0, x0, #0x5dc
   36908:	add	x1, x1, #0x8df
   3690c:	add	x3, x3, #0x9c4
   36910:	mov	w2, #0xea                  	// #234
   36914:	bl	35b90 <__assert_fail@plt>
   36918:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3691c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36920:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36924:	add	x0, x0, #0x5dc
   36928:	add	x1, x1, #0x8df
   3692c:	add	x3, x3, #0x9c4
   36930:	mov	w2, #0xdd                  	// #221
   36934:	bl	35b90 <__assert_fail@plt>

0000000000036938 <aarch64_ins_ldst_reglist_r@@Base>:
   36938:	stp	x29, x30, [sp, #-16]!
   3693c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   36940:	ldr	x8, [x8, #3944]
   36944:	mov	x29, sp
   36948:	ldr	w9, [x8, #100]
   3694c:	sub	w10, w9, #0x1
   36950:	cmp	w10, #0x1e
   36954:	b.hi	36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.pmore
   36958:	ldr	w10, [x8, #96]
   3695c:	tbnz	w10, #31, 36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   36960:	add	w11, w10, w9
   36964:	cmp	w11, #0x21
   36968:	b.ge	36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.tcont
   3696c:	ldr	x11, [x3, #8]
   36970:	ldrh	w12, [x1, #16]
   36974:	mov	w13, #0xffffffff            	// #-1
   36978:	ldr	w14, [x2]
   3697c:	ldr	x11, [x11, #120]
   36980:	lsl	w9, w13, w9
   36984:	and	w12, w12, #0x1f
   36988:	bic	w9, w12, w9
   3698c:	lsl	w9, w9, w10
   36990:	and	x10, x11, #0x7000000
   36994:	mov	w11, #0x1000000             	// #16777216
   36998:	orr	w9, w14, w9
   3699c:	cmp	x10, x11
   369a0:	str	w9, [x2]
   369a4:	b.ne	369bc <aarch64_ins_ldst_reglist_r@@Base+0x84>  // b.any
   369a8:	ldrh	w10, [x1, #16]
   369ac:	and	w10, w10, #0xe0
   369b0:	cmp	w10, #0x40
   369b4:	cset	w10, eq  // eq = none
   369b8:	b	369c0 <aarch64_ins_ldst_reglist_r@@Base+0x88>
   369bc:	mov	w10, wzr
   369c0:	ldr	w11, [x8, #252]
   369c4:	sub	w12, w11, #0x1
   369c8:	cmp	w12, #0x1e
   369cc:	b.hi	36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.pmore
   369d0:	ldr	w8, [x8, #248]
   369d4:	tbnz	w8, #31, 36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   369d8:	add	w12, w8, w11
   369dc:	cmp	w12, #0x21
   369e0:	b.ge	36a08 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.tcont
   369e4:	mov	w12, #0xffffffff            	// #-1
   369e8:	lsl	w11, w12, w11
   369ec:	bic	w10, w10, w11
   369f0:	lsl	w8, w10, w8
   369f4:	orr	w8, w8, w9
   369f8:	mov	w0, #0x1                   	// #1
   369fc:	str	w8, [x2]
   36a00:	ldp	x29, x30, [sp], #16
   36a04:	ret
   36a08:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36a0c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36a10:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36a14:	add	x0, x0, #0x553
   36a18:	add	x1, x1, #0x5b0
   36a1c:	add	x3, x3, #0x5cc
   36a20:	mov	w2, #0x16a                 	// #362
   36a24:	bl	35b90 <__assert_fail@plt>

0000000000036a28 <aarch64_ins_ldst_elemlist@@Base>:
   36a28:	stp	x29, x30, [sp, #-48]!
   36a2c:	stp	x20, x19, [sp, #32]
   36a30:	ldrh	w9, [x1, #16]
   36a34:	str	x21, [sp, #16]
   36a38:	mov	x29, sp
   36a3c:	tbz	w9, #8, 36b70 <aarch64_ins_ldst_elemlist@@Base+0x148>
   36a40:	adrp	x20, 96000 <aarch64_operands@@Base+0x16c38>
   36a44:	ldr	x20, [x20, #3944]
   36a48:	ldr	w8, [x20, #100]
   36a4c:	sub	w10, w8, #0x1
   36a50:	cmp	w10, #0x1e
   36a54:	b.hi	36b50 <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.pmore
   36a58:	ldr	w10, [x20, #96]
   36a5c:	tbnz	w10, #31, 36b50 <aarch64_ins_ldst_elemlist@@Base+0x128>
   36a60:	add	w11, w10, w8
   36a64:	cmp	w11, #0x21
   36a68:	b.ge	36b50 <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.tcont
   36a6c:	mov	w11, #0xffffffff            	// #-1
   36a70:	ldr	w12, [x2]
   36a74:	and	w9, w9, #0x1f
   36a78:	lsl	w8, w11, w8
   36a7c:	bic	w8, w9, w8
   36a80:	lsl	w8, w8, w10
   36a84:	orr	w8, w12, w8
   36a88:	str	w8, [x2]
   36a8c:	ldrb	w8, [x1, #4]
   36a90:	mov	x19, x2
   36a94:	sub	w8, w8, #0x5
   36a98:	cmp	w8, #0x3
   36a9c:	b.hi	36b90 <aarch64_ins_ldst_elemlist@@Base+0x168>  // b.pmore
   36aa0:	adrp	x9, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36aa4:	add	x9, x9, #0x844
   36aa8:	adr	x10, 36ab8 <aarch64_ins_ldst_elemlist@@Base+0x90>
   36aac:	ldrb	w11, [x9, x8]
   36ab0:	add	x10, x10, x11, lsl #2
   36ab4:	br	x10
   36ab8:	ldr	w1, [x1, #24]
   36abc:	mov	w21, wzr
   36ac0:	b	36af4 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36ac4:	ldr	w8, [x1, #24]
   36ac8:	mov	w21, #0x2                   	// #2
   36acc:	lsl	w1, w8, #2
   36ad0:	b	36af4 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36ad4:	ldr	w8, [x1, #24]
   36ad8:	mov	w1, #0x1                   	// #1
   36adc:	mov	w21, #0x2                   	// #2
   36ae0:	bfi	w1, w8, #3, #29
   36ae4:	b	36af4 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36ae8:	ldr	w8, [x1, #24]
   36aec:	mov	w21, #0x1                   	// #1
   36af0:	lsl	w1, w8, #1
   36af4:	mov	w3, #0x3                   	// #3
   36af8:	mov	w4, #0x9                   	// #9
   36afc:	mov	w5, #0x1f                  	// #31
   36b00:	mov	w6, #0xb                   	// #11
   36b04:	mov	x0, x19
   36b08:	mov	w2, wzr
   36b0c:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   36b10:	ldr	w8, [x20, #212]
   36b14:	cmp	w8, #0x3
   36b18:	b.lt	36b50 <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.tstop
   36b1c:	ldr	w8, [x20, #208]
   36b20:	add	w8, w8, #0x1
   36b24:	cmp	w8, #0x1f
   36b28:	b.cs	36b50 <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.hs, b.nlast
   36b2c:	ldr	w9, [x19]
   36b30:	lsl	w8, w21, w8
   36b34:	ldr	x21, [sp, #16]
   36b38:	mov	w0, #0x1                   	// #1
   36b3c:	orr	w8, w9, w8
   36b40:	str	w8, [x19]
   36b44:	ldp	x20, x19, [sp, #32]
   36b48:	ldp	x29, x30, [sp], #48
   36b4c:	ret
   36b50:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36b54:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36b58:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36b5c:	add	x0, x0, #0x553
   36b60:	add	x1, x1, #0x5b0
   36b64:	add	x3, x3, #0x5cc
   36b68:	mov	w2, #0x16a                 	// #362
   36b6c:	bl	35b90 <__assert_fail@plt>
   36b70:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36b74:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36b78:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36b7c:	add	x0, x0, #0xa5c
   36b80:	add	x1, x1, #0x8df
   36b84:	add	x3, x3, #0xa74
   36b88:	mov	w2, #0x117                 	// #279
   36b8c:	bl	35b90 <__assert_fail@plt>
   36b90:	adrp	x0, 58000 <fields@@Base+0x1e84>
   36b94:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36b98:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36b9c:	add	x0, x0, #0x5dc
   36ba0:	add	x1, x1, #0x8df
   36ba4:	add	x3, x3, #0xa74
   36ba8:	mov	w2, #0x133                 	// #307
   36bac:	bl	35b90 <__assert_fail@plt>

0000000000036bb0 <aarch64_ins_advsimd_imm_shift@@Base>:
   36bb0:	stp	x29, x30, [sp, #-48]!
   36bb4:	stp	x20, x19, [sp, #32]
   36bb8:	ldrb	w0, [x1, #4]
   36bbc:	str	x21, [sp, #16]
   36bc0:	mov	x29, sp
   36bc4:	mov	x21, x3
   36bc8:	mov	x20, x1
   36bcc:	mov	x19, x2
   36bd0:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   36bd4:	ldr	x8, [x21, #8]
   36bd8:	ldr	w9, [x8, #16]
   36bdc:	cmp	w9, #0xe
   36be0:	b.ne	36c3c <aarch64_ins_advsimd_imm_shift@@Base+0x8c>  // b.any
   36be4:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   36be8:	ldr	x10, [x10, #3944]
   36bec:	ldr	w9, [x10, #92]
   36bf0:	sub	w11, w9, #0x1
   36bf4:	cmp	w11, #0x1e
   36bf8:	b.hi	36ca4 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>  // b.pmore
   36bfc:	ldr	w10, [x10, #88]
   36c00:	tbnz	w10, #31, 36ca4 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>
   36c04:	add	w11, w10, w9
   36c08:	cmp	w11, #0x21
   36c0c:	b.ge	36ca4 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>  // b.tcont
   36c10:	ldr	w8, [x8, #12]
   36c14:	mov	w12, #0xffffffff            	// #-1
   36c18:	and	w11, w0, #0x1
   36c1c:	ldr	w13, [x19]
   36c20:	lsl	w9, w12, w9
   36c24:	bic	w9, w11, w9
   36c28:	lsl	w9, w9, w10
   36c2c:	bic	w8, w9, w8
   36c30:	orr	w8, w13, w8
   36c34:	lsr	w0, w0, #1
   36c38:	str	w8, [x19]
   36c3c:	ldr	w8, [x20]
   36c40:	sub	w9, w8, #0x2b
   36c44:	cmp	w9, #0x2
   36c48:	b.cs	36cc4 <aarch64_ins_advsimd_imm_shift@@Base+0x114>  // b.hs, b.nlast
   36c4c:	cmp	w8, #0x2c
   36c50:	b.ne	36c68 <aarch64_ins_advsimd_imm_shift@@Base+0xb8>  // b.any
   36c54:	ldr	w8, [x20, #16]
   36c58:	mov	w9, #0x10                  	// #16
   36c5c:	lsl	w9, w9, w0
   36c60:	sub	w1, w9, w8
   36c64:	b	36c78 <aarch64_ins_advsimd_imm_shift@@Base+0xc8>
   36c68:	ldr	w8, [x20, #16]
   36c6c:	mov	w9, #0x8                   	// #8
   36c70:	lsl	w9, w9, w0
   36c74:	add	w1, w9, w8
   36c78:	mov	w3, #0x2                   	// #2
   36c7c:	mov	w4, #0x35                  	// #53
   36c80:	mov	w5, #0x36                  	// #54
   36c84:	mov	x0, x19
   36c88:	mov	w2, wzr
   36c8c:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   36c90:	ldp	x20, x19, [sp, #32]
   36c94:	ldr	x21, [sp, #16]
   36c98:	mov	w0, #0x1                   	// #1
   36c9c:	ldp	x29, x30, [sp], #48
   36ca0:	ret
   36ca4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36ca8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36cac:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36cb0:	add	x0, x0, #0x553
   36cb4:	add	x1, x1, #0x5b0
   36cb8:	add	x3, x3, #0x5cc
   36cbc:	mov	w2, #0x16a                 	// #362
   36cc0:	bl	35b90 <__assert_fail@plt>
   36cc4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36cc8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36ccc:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36cd0:	add	x0, x0, #0xb0d
   36cd4:	add	x1, x1, #0x8df
   36cd8:	add	x3, x3, #0xb58
   36cdc:	mov	w2, #0x15b                 	// #347
   36ce0:	bl	35b90 <__assert_fail@plt>

0000000000036ce4 <aarch64_ins_imm@@Base>:
   36ce4:	stp	x29, x30, [sp, #-16]!
   36ce8:	ldr	x9, [x1, #16]
   36cec:	ldr	w10, [x0, #16]
   36cf0:	mov	x8, x2
   36cf4:	mov	x1, x8
   36cf8:	asr	x11, x9, #2
   36cfc:	tst	w10, #0x8
   36d00:	csel	x9, x9, x11, eq  // eq = none
   36d04:	lsr	x11, x9, #4
   36d08:	tst	w10, #0x200
   36d0c:	csel	w2, w9, w11, eq  // eq = none
   36d10:	mov	x29, sp
   36d14:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   36d18:	mov	w0, #0x1                   	// #1
   36d1c:	ldp	x29, x30, [sp], #16
   36d20:	ret
   36d24:	stp	x29, x30, [sp, #-16]!
   36d28:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   36d2c:	ldr	x9, [x9, #3944]
   36d30:	mov	w8, #0x20                  	// #32
   36d34:	mov	w10, #0xffffffff            	// #-1
   36d38:	mov	x29, sp
   36d3c:	ldr	w12, [x0, x8]
   36d40:	cbz	w12, 36d8c <aarch64_ins_imm@@Base+0xa8>
   36d44:	add	x11, x9, x12, lsl #3
   36d48:	ldr	w11, [x11, #4]
   36d4c:	sub	w13, w11, #0x1
   36d50:	cmp	w13, #0x1e
   36d54:	b.hi	36da0 <aarch64_ins_imm@@Base+0xbc>  // b.pmore
   36d58:	lsl	x12, x12, #3
   36d5c:	ldr	w12, [x9, x12]
   36d60:	tbnz	w12, #31, 36da0 <aarch64_ins_imm@@Base+0xbc>
   36d64:	add	w13, w12, w11
   36d68:	cmp	w13, #0x21
   36d6c:	b.ge	36da0 <aarch64_ins_imm@@Base+0xbc>  // b.tcont
   36d70:	ldr	w13, [x1]
   36d74:	lsl	w14, w10, w11
   36d78:	bic	w14, w2, w14
   36d7c:	lsl	w12, w14, w12
   36d80:	orr	w12, w13, w12
   36d84:	lsr	w2, w2, w11
   36d88:	str	w12, [x1]
   36d8c:	sub	x8, x8, #0x4
   36d90:	cmp	x8, #0x10
   36d94:	b.ne	36d3c <aarch64_ins_imm@@Base+0x58>  // b.any
   36d98:	ldp	x29, x30, [sp], #16
   36d9c:	ret
   36da0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36da4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36da8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36dac:	add	x0, x0, #0x553
   36db0:	add	x1, x1, #0x5b0
   36db4:	add	x3, x3, #0x5cc
   36db8:	mov	w2, #0x16a                 	// #362
   36dbc:	bl	35b90 <__assert_fail@plt>

0000000000036dc0 <aarch64_ins_imm_half@@Base>:
   36dc0:	stp	x29, x30, [sp, #-32]!
   36dc4:	stp	x20, x19, [sp, #16]
   36dc8:	ldr	x8, [x1, #16]
   36dcc:	ldr	w9, [x0, #16]
   36dd0:	mov	x19, x2
   36dd4:	mov	x20, x1
   36dd8:	asr	x10, x8, #2
   36ddc:	tst	w9, #0x8
   36de0:	csel	x8, x8, x10, eq  // eq = none
   36de4:	lsr	x10, x8, #4
   36de8:	tst	w9, #0x200
   36dec:	csel	w2, w8, w10, eq  // eq = none
   36df0:	mov	x1, x19
   36df4:	mov	x29, sp
   36df8:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   36dfc:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   36e00:	ldr	x9, [x9, #3944]
   36e04:	ldr	w8, [x9, #260]
   36e08:	sub	w10, w8, #0x1
   36e0c:	cmp	w10, #0x1e
   36e10:	b.hi	36e5c <aarch64_ins_imm_half@@Base+0x9c>  // b.pmore
   36e14:	ldr	w9, [x9, #256]
   36e18:	tbnz	w9, #31, 36e5c <aarch64_ins_imm_half@@Base+0x9c>
   36e1c:	add	w10, w9, w8
   36e20:	cmp	w10, #0x21
   36e24:	b.ge	36e5c <aarch64_ins_imm_half@@Base+0x9c>  // b.tcont
   36e28:	ldr	x10, [x20, #40]
   36e2c:	mov	w11, #0xffffffff            	// #-1
   36e30:	ldr	w12, [x19]
   36e34:	lsl	w8, w11, w8
   36e38:	lsr	x10, x10, #4
   36e3c:	bic	w8, w10, w8
   36e40:	lsl	w8, w8, w9
   36e44:	orr	w8, w12, w8
   36e48:	str	w8, [x19]
   36e4c:	ldp	x20, x19, [sp, #16]
   36e50:	mov	w0, #0x1                   	// #1
   36e54:	ldp	x29, x30, [sp], #32
   36e58:	ret
   36e5c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36e60:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36e64:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36e68:	add	x0, x0, #0x553
   36e6c:	add	x1, x1, #0x5b0
   36e70:	add	x3, x3, #0x5cc
   36e74:	mov	w2, #0x16a                 	// #362
   36e78:	bl	35b90 <__assert_fail@plt>

0000000000036e7c <aarch64_ins_advsimd_imm_modified@@Base>:
   36e7c:	stp	x29, x30, [sp, #-64]!
   36e80:	stp	x22, x21, [sp, #32]
   36e84:	stp	x20, x19, [sp, #48]
   36e88:	str	x23, [sp, #16]
   36e8c:	ldrb	w20, [x3, #28]
   36e90:	ldr	x21, [x1, #16]
   36e94:	ldr	w23, [x1, #32]
   36e98:	ldrb	w8, [x1, #24]
   36e9c:	ldr	w22, [x1, #40]
   36ea0:	mov	x19, x2
   36ea4:	mov	x29, sp
   36ea8:	tbnz	w8, #0, 36ed0 <aarch64_ins_advsimd_imm_modified@@Base+0x54>
   36eac:	mov	w0, w20
   36eb0:	bl	35760 <aarch64_get_qualifier_esize@plt>
   36eb4:	and	w8, w0, #0xff
   36eb8:	cmp	w8, #0x8
   36ebc:	b.ne	36ed0 <aarch64_ins_advsimd_imm_modified@@Base+0x54>  // b.any
   36ec0:	mov	x0, x21
   36ec4:	bl	35830 <aarch64_shrink_expanded_imm8@plt>
   36ec8:	tbnz	w0, #31, 37034 <aarch64_ins_advsimd_imm_modified@@Base+0x1b8>
   36ecc:	sxtw	x21, w0
   36ed0:	mov	w3, #0x2                   	// #2
   36ed4:	mov	w4, #0x3                   	// #3
   36ed8:	mov	w5, #0x4                   	// #4
   36edc:	mov	x0, x19
   36ee0:	mov	w1, w21
   36ee4:	mov	w2, wzr
   36ee8:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   36eec:	cbz	w23, 36fbc <aarch64_ins_advsimd_imm_modified@@Base+0x140>
   36ef0:	orr	w8, w23, #0x4
   36ef4:	cmp	w8, #0x5
   36ef8:	b.ne	36ff4 <aarch64_ins_advsimd_imm_modified@@Base+0x178>  // b.any
   36efc:	cmp	w23, #0x5
   36f00:	b.ne	36f5c <aarch64_ins_advsimd_imm_modified@@Base+0xe0>  // b.any
   36f04:	mov	w0, w20
   36f08:	bl	35760 <aarch64_get_qualifier_esize@plt>
   36f0c:	and	w8, w0, #0xff
   36f10:	cmp	w8, #0x1
   36f14:	b.eq	36fbc <aarch64_ins_advsimd_imm_modified@@Base+0x140>  // b.none
   36f18:	cmp	w8, #0x2
   36f1c:	b.eq	36f28 <aarch64_ins_advsimd_imm_modified@@Base+0xac>  // b.none
   36f20:	cmp	w8, #0x4
   36f24:	b.ne	37014 <aarch64_ins_advsimd_imm_modified@@Base+0x198>  // b.any
   36f28:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   36f2c:	ldr	x9, [x9, #3944]
   36f30:	and	w8, w0, #0xff
   36f34:	cmp	w8, #0x4
   36f38:	asr	w8, w22, #3
   36f3c:	ldr	w10, [x9, #204]
   36f40:	b.ne	36f7c <aarch64_ins_advsimd_imm_modified@@Base+0x100>  // b.any
   36f44:	cmp	w10, #0x3
   36f48:	b.lt	36fd4 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   36f4c:	ldr	w9, [x9, #200]
   36f50:	mov	w10, #0x2                   	// #2
   36f54:	add	w9, w9, #0x1
   36f58:	b	36f90 <aarch64_ins_advsimd_imm_modified@@Base+0x114>
   36f5c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   36f60:	ldr	x8, [x8, #3944]
   36f64:	ldr	w9, [x8, #204]
   36f68:	cmp	w9, #0x1
   36f6c:	b.lt	36fd4 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   36f70:	ldr	w9, [x8, #200]
   36f74:	asr	w8, w22, #4
   36f78:	b	36f8c <aarch64_ins_advsimd_imm_modified@@Base+0x110>
   36f7c:	cmp	w10, #0x2
   36f80:	b.lt	36fd4 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   36f84:	ldr	w9, [x9, #200]
   36f88:	add	w9, w9, #0x1
   36f8c:	mov	w10, #0x1                   	// #1
   36f90:	tbnz	w9, #31, 36fd4 <aarch64_ins_advsimd_imm_modified@@Base+0x158>
   36f94:	add	w11, w10, w9
   36f98:	cmp	w11, #0x21
   36f9c:	b.ge	36fd4 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tcont
   36fa0:	mov	w11, #0xffffffff            	// #-1
   36fa4:	ldr	w12, [x19]
   36fa8:	lsl	w10, w11, w10
   36fac:	bic	w8, w8, w10
   36fb0:	lsl	w8, w8, w9
   36fb4:	orr	w8, w12, w8
   36fb8:	str	w8, [x19]
   36fbc:	ldp	x20, x19, [sp, #48]
   36fc0:	ldp	x22, x21, [sp, #32]
   36fc4:	ldr	x23, [sp, #16]
   36fc8:	mov	w0, #0x1                   	// #1
   36fcc:	ldp	x29, x30, [sp], #64
   36fd0:	ret
   36fd4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   36fd8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   36fdc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   36fe0:	add	x0, x0, #0x553
   36fe4:	add	x1, x1, #0x5b0
   36fe8:	add	x3, x3, #0x5cc
   36fec:	mov	w2, #0x16a                 	// #362
   36ff0:	bl	35b90 <__assert_fail@plt>
   36ff4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36ff8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   36ffc:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37000:	add	x0, x0, #0xca3
   37004:	add	x1, x1, #0x8df
   37008:	add	x3, x3, #0xc03
   3700c:	mov	w2, #0x1b6                 	// #438
   37010:	bl	35b90 <__assert_fail@plt>
   37014:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37018:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3701c:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37020:	add	x0, x0, #0xcd6
   37024:	add	x1, x1, #0x8df
   37028:	add	x3, x3, #0xc03
   3702c:	mov	w2, #0x1bb                 	// #443
   37030:	bl	35b90 <__assert_fail@plt>
   37034:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37038:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3703c:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37040:	add	x0, x0, #0xbf5
   37044:	add	x1, x1, #0x8df
   37048:	add	x3, x3, #0xc03
   3704c:	mov	w2, #0x1ae                 	// #430
   37050:	bl	35b90 <__assert_fail@plt>

0000000000037054 <aarch64_ins_fpimm@@Base>:
   37054:	stp	x29, x30, [sp, #-16]!
   37058:	mov	x8, x2
   3705c:	ldr	w2, [x1, #16]
   37060:	mov	x1, x8
   37064:	mov	x29, sp
   37068:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   3706c:	mov	w0, #0x1                   	// #1
   37070:	ldp	x29, x30, [sp], #16
   37074:	ret

0000000000037078 <aarch64_ins_imm_rotate1@@Base>:
   37078:	stp	x29, x30, [sp, #-16]!
   3707c:	ldr	x8, [x1, #16]
   37080:	mov	x9, #0x2d83                	// #11651
   37084:	movk	x9, #0x82d8, lsl #16
   37088:	movk	x9, #0xd82d, lsl #32
   3708c:	sub	x8, x8, #0x5a
   37090:	movk	x9, #0x2d82, lsl #48
   37094:	smulh	x8, x8, x9
   37098:	asr	x9, x8, #5
   3709c:	add	x8, x9, x8, lsr #63
   370a0:	cmp	x8, #0x2
   370a4:	mov	x29, sp
   370a8:	b.cs	37138 <aarch64_ins_imm_rotate1@@Base+0xc0>  // b.hs, b.nlast
   370ac:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   370b0:	ldr	w10, [x0, #20]
   370b4:	ldr	x11, [x11, #3944]
   370b8:	add	x9, x11, x10, lsl #3
   370bc:	ldr	w9, [x9, #4]
   370c0:	sub	w12, w9, #0x1
   370c4:	cmp	w12, #0x1e
   370c8:	b.hi	37118 <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.pmore
   370cc:	lsl	x10, x10, #3
   370d0:	ldr	w10, [x11, x10]
   370d4:	tbnz	w10, #31, 37118 <aarch64_ins_imm_rotate1@@Base+0xa0>
   370d8:	add	w11, w10, w9
   370dc:	cmp	w11, #0x21
   370e0:	b.ge	37118 <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.tcont
   370e4:	ldr	x11, [x3, #8]
   370e8:	mov	w12, #0xffffffff            	// #-1
   370ec:	ldr	w13, [x2]
   370f0:	lsl	w9, w12, w9
   370f4:	ldr	w11, [x11, #12]
   370f8:	bic	w8, w8, w9
   370fc:	lsl	w8, w8, w10
   37100:	mov	w0, #0x1                   	// #1
   37104:	bic	w8, w8, w11
   37108:	orr	w8, w13, w8
   3710c:	str	w8, [x2]
   37110:	ldp	x29, x30, [sp], #16
   37114:	ret
   37118:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3711c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37120:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37124:	add	x0, x0, #0x553
   37128:	add	x1, x1, #0x5b0
   3712c:	add	x3, x3, #0x5cc
   37130:	mov	w2, #0x16a                 	// #362
   37134:	bl	35b90 <__assert_fail@plt>
   37138:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3713c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37140:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37144:	add	x0, x0, #0xcfd
   37148:	add	x1, x1, #0x8df
   3714c:	add	x3, x3, #0xd06
   37150:	mov	w2, #0x1e4                 	// #484
   37154:	bl	35b90 <__assert_fail@plt>

0000000000037158 <aarch64_ins_imm_rotate2@@Base>:
   37158:	stp	x29, x30, [sp, #-16]!
   3715c:	ldr	x8, [x1, #16]
   37160:	mov	x9, #0x2d83                	// #11651
   37164:	movk	x9, #0x82d8, lsl #16
   37168:	movk	x9, #0xd82d, lsl #32
   3716c:	movk	x9, #0x2d82, lsl #48
   37170:	smulh	x8, x8, x9
   37174:	asr	x9, x8, #4
   37178:	add	x8, x9, x8, lsr #63
   3717c:	cmp	x8, #0x4
   37180:	mov	x29, sp
   37184:	b.cs	37214 <aarch64_ins_imm_rotate2@@Base+0xbc>  // b.hs, b.nlast
   37188:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   3718c:	ldr	w10, [x0, #20]
   37190:	ldr	x11, [x11, #3944]
   37194:	add	x9, x11, x10, lsl #3
   37198:	ldr	w9, [x9, #4]
   3719c:	sub	w12, w9, #0x1
   371a0:	cmp	w12, #0x1e
   371a4:	b.hi	371f4 <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.pmore
   371a8:	lsl	x10, x10, #3
   371ac:	ldr	w10, [x11, x10]
   371b0:	tbnz	w10, #31, 371f4 <aarch64_ins_imm_rotate2@@Base+0x9c>
   371b4:	add	w11, w10, w9
   371b8:	cmp	w11, #0x21
   371bc:	b.ge	371f4 <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.tcont
   371c0:	ldr	x11, [x3, #8]
   371c4:	mov	w12, #0xffffffff            	// #-1
   371c8:	ldr	w13, [x2]
   371cc:	lsl	w9, w12, w9
   371d0:	ldr	w11, [x11, #12]
   371d4:	bic	w8, w8, w9
   371d8:	lsl	w8, w8, w10
   371dc:	mov	w0, #0x1                   	// #1
   371e0:	bic	w8, w8, w11
   371e4:	orr	w8, w13, w8
   371e8:	str	w8, [x2]
   371ec:	ldp	x29, x30, [sp], #16
   371f0:	ret
   371f4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   371f8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   371fc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37200:	add	x0, x0, #0x553
   37204:	add	x1, x1, #0x5b0
   37208:	add	x3, x3, #0x5cc
   3720c:	mov	w2, #0x16a                 	// #362
   37210:	bl	35b90 <__assert_fail@plt>
   37214:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37218:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3721c:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37220:	add	x0, x0, #0xd9d
   37224:	add	x1, x1, #0x8df
   37228:	add	x3, x3, #0xda6
   3722c:	mov	w2, #0x1f1                 	// #497
   37230:	bl	35b90 <__assert_fail@plt>

0000000000037234 <aarch64_ins_fbits@@Base>:
   37234:	stp	x29, x30, [sp, #-16]!
   37238:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3723c:	ldr	w9, [x0, #20]
   37240:	ldr	x10, [x10, #3944]
   37244:	mov	x29, sp
   37248:	add	x8, x10, x9, lsl #3
   3724c:	ldr	w8, [x8, #4]
   37250:	sub	w11, w8, #0x1
   37254:	cmp	w11, #0x1e
   37258:	b.hi	372a8 <aarch64_ins_fbits@@Base+0x74>  // b.pmore
   3725c:	lsl	x9, x9, #3
   37260:	ldr	w9, [x10, x9]
   37264:	tbnz	w9, #31, 372a8 <aarch64_ins_fbits@@Base+0x74>
   37268:	add	w10, w9, w8
   3726c:	cmp	w10, #0x21
   37270:	b.ge	372a8 <aarch64_ins_fbits@@Base+0x74>  // b.tcont
   37274:	ldr	w10, [x1, #16]
   37278:	mov	w11, #0x40                  	// #64
   3727c:	mov	w12, #0xffffffff            	// #-1
   37280:	ldr	w13, [x2]
   37284:	lsl	w8, w12, w8
   37288:	sub	w10, w11, w10
   3728c:	bic	w8, w10, w8
   37290:	lsl	w8, w8, w9
   37294:	orr	w8, w13, w8
   37298:	mov	w0, #0x1                   	// #1
   3729c:	str	w8, [x2]
   372a0:	ldp	x29, x30, [sp], #16
   372a4:	ret
   372a8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   372ac:	adrp	x1, 54000 <xexit@@Base+0x84c>
   372b0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   372b4:	add	x0, x0, #0x553
   372b8:	add	x1, x1, #0x5b0
   372bc:	add	x3, x3, #0x5cc
   372c0:	mov	w2, #0x16a                 	// #362
   372c4:	bl	35b90 <__assert_fail@plt>

00000000000372c8 <aarch64_ins_aimm@@Base>:
   372c8:	stp	x29, x30, [sp, #-16]!
   372cc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   372d0:	ldr	w11, [x0, #20]
   372d4:	ldr	x9, [x1, #40]
   372d8:	ldr	x8, [x8, #3944]
   372dc:	mov	x29, sp
   372e0:	cmp	x9, #0x0
   372e4:	add	x10, x8, x11, lsl #3
   372e8:	ldr	w10, [x10, #4]
   372ec:	cset	w9, ne  // ne = any
   372f0:	sub	w12, w10, #0x1
   372f4:	cmp	w12, #0x1e
   372f8:	b.hi	37388 <aarch64_ins_aimm@@Base+0xc0>  // b.pmore
   372fc:	lsl	x11, x11, #3
   37300:	ldr	w11, [x8, x11]
   37304:	tbnz	w11, #31, 37388 <aarch64_ins_aimm@@Base+0xc0>
   37308:	add	w12, w11, w10
   3730c:	cmp	w12, #0x21
   37310:	b.ge	37388 <aarch64_ins_aimm@@Base+0xc0>  // b.tcont
   37314:	mov	w12, #0xffffffff            	// #-1
   37318:	ldr	w13, [x2]
   3731c:	lsl	w10, w12, w10
   37320:	bic	w9, w9, w10
   37324:	lsl	w9, w9, w11
   37328:	orr	w9, w13, w9
   3732c:	str	w9, [x2]
   37330:	ldr	w11, [x0, #24]
   37334:	add	x10, x8, x11, lsl #3
   37338:	ldr	w10, [x10, #4]
   3733c:	sub	w12, w10, #0x1
   37340:	cmp	w12, #0x1e
   37344:	b.hi	37388 <aarch64_ins_aimm@@Base+0xc0>  // b.pmore
   37348:	lsl	x11, x11, #3
   3734c:	ldr	w8, [x8, x11]
   37350:	tbnz	w8, #31, 37388 <aarch64_ins_aimm@@Base+0xc0>
   37354:	add	w11, w8, w10
   37358:	cmp	w11, #0x21
   3735c:	b.ge	37388 <aarch64_ins_aimm@@Base+0xc0>  // b.tcont
   37360:	ldr	w11, [x1, #16]
   37364:	mov	w12, #0xffffffff            	// #-1
   37368:	lsl	w10, w12, w10
   3736c:	mov	w0, #0x1                   	// #1
   37370:	bic	w10, w11, w10
   37374:	lsl	w8, w10, w8
   37378:	orr	w8, w8, w9
   3737c:	str	w8, [x2]
   37380:	ldp	x29, x30, [sp], #16
   37384:	ret
   37388:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3738c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37390:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37394:	add	x0, x0, #0x553
   37398:	add	x1, x1, #0x5b0
   3739c:	add	x3, x3, #0x5cc
   373a0:	mov	w2, #0x16a                 	// #362
   373a4:	bl	35b90 <__assert_fail@plt>

00000000000373a8 <aarch64_ins_limm@@Base>:
   373a8:	stp	x29, x30, [sp, #-16]!
   373ac:	ldr	x8, [x3, #8]
   373b0:	mov	x29, sp
   373b4:	ldr	w8, [x8, #20]
   373b8:	cmp	w8, #0x2a
   373bc:	cset	w4, eq  // eq = none
   373c0:	bl	373d0 <aarch64_ins_limm@@Base+0x28>
   373c4:	mov	w0, #0x1                   	// #1
   373c8:	ldp	x29, x30, [sp], #16
   373cc:	ret
   373d0:	stp	x29, x30, [sp, #-48]!
   373d4:	stp	x20, x19, [sp, #32]
   373d8:	mov	x20, x0
   373dc:	ldr	x8, [x1, #16]
   373e0:	ldrb	w0, [x3, #28]
   373e4:	cmp	w4, #0x0
   373e8:	str	x21, [sp, #16]
   373ec:	mov	x29, sp
   373f0:	mov	x19, x2
   373f4:	cinv	x21, x8, ne  // ne = any
   373f8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   373fc:	and	w1, w0, #0xff
   37400:	add	x2, x29, #0x1c
   37404:	mov	x0, x21
   37408:	bl	354e0 <aarch64_logical_immediate_p@plt>
   3740c:	cbz	w0, 3743c <aarch64_ins_limm@@Base+0x94>
   37410:	ldr	w1, [x29, #28]
   37414:	ldp	w5, w4, [x20, #24]
   37418:	ldr	w6, [x20, #20]
   3741c:	mov	w3, #0x3                   	// #3
   37420:	mov	x0, x19
   37424:	mov	w2, wzr
   37428:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   3742c:	ldp	x20, x19, [sp, #32]
   37430:	ldr	x21, [sp, #16]
   37434:	ldp	x29, x30, [sp], #48
   37438:	ret
   3743c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37440:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37444:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37448:	add	x0, x0, #0x623
   3744c:	add	x1, x1, #0x8df
   37450:	add	x3, x3, #0x654
   37454:	mov	w2, #0x220                 	// #544
   37458:	bl	35b90 <__assert_fail@plt>

000000000003745c <aarch64_ins_inv_limm@@Base>:
   3745c:	stp	x29, x30, [sp, #-16]!
   37460:	mov	w4, #0x1                   	// #1
   37464:	mov	x29, sp
   37468:	bl	373d0 <aarch64_ins_limm@@Base+0x28>
   3746c:	mov	w0, #0x1                   	// #1
   37470:	ldp	x29, x30, [sp], #16
   37474:	ret

0000000000037478 <aarch64_ins_ft@@Base>:
   37478:	stp	x29, x30, [sp, #-48]!
   3747c:	stp	x20, x19, [sp, #32]
   37480:	ldr	w8, [x1, #8]
   37484:	str	x21, [sp, #16]
   37488:	mov	x29, sp
   3748c:	cbnz	w8, 37568 <aarch64_ins_ft@@Base+0xf0>
   37490:	mov	x21, x3
   37494:	mov	x19, x2
   37498:	mov	x20, x1
   3749c:	bl	352f0 <aarch64_ins_regno@plt>
   374a0:	ldr	x8, [x21, #8]
   374a4:	ldrb	w0, [x20, #4]
   374a8:	ldr	w8, [x8, #16]
   374ac:	sub	w8, w8, #0x3d
   374b0:	cmp	w8, #0x3
   374b4:	b.hi	37514 <aarch64_ins_ft@@Base+0x9c>  // b.pmore
   374b8:	sub	w8, w0, #0x7
   374bc:	cmp	w8, #0x3
   374c0:	b.cs	37588 <aarch64_ins_ft@@Base+0x110>  // b.hs, b.nlast
   374c4:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   374c8:	ldr	x10, [x10, #3944]
   374cc:	ldr	w9, [x10, #300]
   374d0:	sub	w11, w9, #0x1
   374d4:	cmp	w11, #0x1e
   374d8:	b.hi	37548 <aarch64_ins_ft@@Base+0xd0>  // b.pmore
   374dc:	ldr	w10, [x10, #296]
   374e0:	tbnz	w10, #31, 37548 <aarch64_ins_ft@@Base+0xd0>
   374e4:	add	w11, w10, w9
   374e8:	cmp	w11, #0x21
   374ec:	b.ge	37548 <aarch64_ins_ft@@Base+0xd0>  // b.tcont
   374f0:	mov	w11, #0xffffffff            	// #-1
   374f4:	ldr	w12, [x19]
   374f8:	and	w8, w8, #0xff
   374fc:	lsl	w9, w11, w9
   37500:	bic	w8, w8, w9
   37504:	lsl	w8, w8, w10
   37508:	orr	w8, w12, w8
   3750c:	str	w8, [x19]
   37510:	b	37534 <aarch64_ins_ft@@Base+0xbc>
   37514:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   37518:	mov	w1, w0
   3751c:	mov	w3, #0x2                   	// #2
   37520:	mov	w4, #0x25                  	// #37
   37524:	mov	w5, #0x22                  	// #34
   37528:	mov	x0, x19
   3752c:	mov	w2, wzr
   37530:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   37534:	ldp	x20, x19, [sp, #32]
   37538:	ldr	x21, [sp, #16]
   3753c:	mov	w0, #0x1                   	// #1
   37540:	ldp	x29, x30, [sp], #48
   37544:	ret
   37548:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3754c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37550:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37554:	add	x0, x0, #0x553
   37558:	add	x1, x1, #0x5b0
   3755c:	add	x3, x3, #0x5cc
   37560:	mov	w2, #0x16a                 	// #362
   37564:	bl	35b90 <__assert_fail@plt>
   37568:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3756c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37570:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37574:	add	x0, x0, #0xe3d
   37578:	add	x1, x1, #0x8df
   3757c:	add	x3, x3, #0xe4c
   37580:	mov	w2, #0x245                 	// #581
   37584:	bl	35b90 <__assert_fail@plt>
   37588:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3758c:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37590:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37594:	add	x0, x0, #0x5dc
   37598:	add	x1, x1, #0x8df
   3759c:	add	x3, x3, #0xe4c
   375a0:	mov	w2, #0x254                 	// #596
   375a4:	bl	35b90 <__assert_fail@plt>

00000000000375a8 <aarch64_ins_addr_simple@@Base>:
   375a8:	stp	x29, x30, [sp, #-16]!
   375ac:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   375b0:	ldr	x9, [x9, #3944]
   375b4:	mov	x29, sp
   375b8:	ldr	w8, [x9, #116]
   375bc:	sub	w10, w8, #0x1
   375c0:	cmp	w10, #0x1e
   375c4:	b.hi	37608 <aarch64_ins_addr_simple@@Base+0x60>  // b.pmore
   375c8:	ldr	w9, [x9, #112]
   375cc:	tbnz	w9, #31, 37608 <aarch64_ins_addr_simple@@Base+0x60>
   375d0:	add	w10, w9, w8
   375d4:	cmp	w10, #0x21
   375d8:	b.ge	37608 <aarch64_ins_addr_simple@@Base+0x60>  // b.tcont
   375dc:	ldr	w10, [x1, #16]
   375e0:	mov	w11, #0xffffffff            	// #-1
   375e4:	ldr	w12, [x2]
   375e8:	lsl	w8, w11, w8
   375ec:	bic	w8, w10, w8
   375f0:	lsl	w8, w8, w9
   375f4:	orr	w8, w12, w8
   375f8:	mov	w0, #0x1                   	// #1
   375fc:	str	w8, [x2]
   37600:	ldp	x29, x30, [sp], #16
   37604:	ret
   37608:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3760c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37610:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37614:	add	x0, x0, #0x553
   37618:	add	x1, x1, #0x5b0
   3761c:	add	x3, x3, #0x5cc
   37620:	mov	w2, #0x16a                 	// #362
   37624:	bl	35b90 <__assert_fail@plt>

0000000000037628 <aarch64_ins_addr_regoff@@Base>:
   37628:	stp	x29, x30, [sp, #-48]!
   3762c:	str	x21, [sp, #16]
   37630:	stp	x20, x19, [sp, #32]
   37634:	adrp	x21, 96000 <aarch64_operands@@Base+0x16c38>
   37638:	ldr	x21, [x21, #3944]
   3763c:	mov	x29, sp
   37640:	ldr	w9, [x21, #116]
   37644:	sub	w8, w9, #0x1
   37648:	cmp	w8, #0x1e
   3764c:	b.hi	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   37650:	ldr	w11, [x21, #112]
   37654:	tbnz	w11, #31, 37798 <aarch64_ins_addr_regoff@@Base+0x170>
   37658:	add	w8, w11, w9
   3765c:	cmp	w8, #0x21
   37660:	b.ge	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   37664:	ldr	w12, [x1, #16]
   37668:	ldr	w10, [x21, #228]
   3766c:	mov	w13, #0xffffffff            	// #-1
   37670:	ldr	w14, [x2]
   37674:	ldr	w8, [x1, #32]
   37678:	lsl	w9, w13, w9
   3767c:	bic	w9, w12, w9
   37680:	sub	w12, w10, #0x1
   37684:	lsl	w9, w9, w11
   37688:	mov	x19, x2
   3768c:	mov	x20, x1
   37690:	orr	w9, w14, w9
   37694:	cmp	w12, #0x1e
   37698:	str	w9, [x2]
   3769c:	b.hi	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   376a0:	ldr	w11, [x21, #224]
   376a4:	tbnz	w11, #31, 37798 <aarch64_ins_addr_regoff@@Base+0x170>
   376a8:	add	w12, w11, w10
   376ac:	cmp	w12, #0x21
   376b0:	b.ge	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   376b4:	ldr	w12, [x20, #20]
   376b8:	mov	w13, #0xffffffff            	// #-1
   376bc:	lsl	w10, w13, w10
   376c0:	cmp	w8, #0x5
   376c4:	bic	w10, w12, w10
   376c8:	mov	w14, #0x9                   	// #9
   376cc:	lsl	w10, w10, w11
   376d0:	orr	w9, w10, w9
   376d4:	csel	w0, w14, w8, eq  // eq = none
   376d8:	str	w9, [x19]
   376dc:	bl	35510 <aarch64_get_operand_modifier_value@plt>
   376e0:	ldr	w8, [x21, #244]
   376e4:	sub	w9, w8, #0x1
   376e8:	cmp	w9, #0x1e
   376ec:	b.hi	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   376f0:	ldr	w9, [x21, #240]
   376f4:	tbnz	w9, #31, 37798 <aarch64_ins_addr_regoff@@Base+0x170>
   376f8:	add	w10, w9, w8
   376fc:	cmp	w10, #0x21
   37700:	b.ge	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   37704:	mov	w10, #0xffffffff            	// #-1
   37708:	ldr	w11, [x19]
   3770c:	lsl	w8, w10, w8
   37710:	bic	w8, w0, w8
   37714:	lsl	w8, w8, w9
   37718:	orr	w8, w11, w8
   3771c:	str	w8, [x19]
   37720:	ldrb	w9, [x20, #4]
   37724:	cmp	w9, #0x5
   37728:	b.ne	3773c <aarch64_ins_addr_regoff@@Base+0x114>  // b.any
   3772c:	ldrb	w9, [x20, #36]
   37730:	and	w9, w9, w9, lsr #1
   37734:	and	w9, w9, #0x1
   37738:	b	37748 <aarch64_ins_addr_regoff@@Base+0x120>
   3773c:	ldr	x9, [x20, #40]
   37740:	cmp	x9, #0x0
   37744:	cset	w9, ne  // ne = any
   37748:	ldr	w10, [x21, #252]
   3774c:	sub	w11, w10, #0x1
   37750:	cmp	w11, #0x1e
   37754:	b.hi	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   37758:	ldr	w11, [x21, #248]
   3775c:	tbnz	w11, #31, 37798 <aarch64_ins_addr_regoff@@Base+0x170>
   37760:	add	w12, w11, w10
   37764:	cmp	w12, #0x21
   37768:	b.ge	37798 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   3776c:	mov	w12, #0xffffffff            	// #-1
   37770:	lsl	w10, w12, w10
   37774:	bic	w9, w9, w10
   37778:	lsl	w9, w9, w11
   3777c:	orr	w8, w9, w8
   37780:	str	w8, [x19]
   37784:	ldp	x20, x19, [sp, #32]
   37788:	ldr	x21, [sp, #16]
   3778c:	mov	w0, #0x1                   	// #1
   37790:	ldp	x29, x30, [sp], #48
   37794:	ret
   37798:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3779c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   377a0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   377a4:	add	x0, x0, #0x553
   377a8:	add	x1, x1, #0x5b0
   377ac:	add	x3, x3, #0x5cc
   377b0:	mov	w2, #0x16a                 	// #362
   377b4:	bl	35b90 <__assert_fail@plt>

00000000000377b8 <aarch64_ins_addr_offset@@Base>:
   377b8:	stp	x29, x30, [sp, #-16]!
   377bc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   377c0:	ldr	w10, [x0, #20]
   377c4:	ldr	x8, [x8, #3944]
   377c8:	mov	x29, sp
   377cc:	add	x9, x8, x10, lsl #3
   377d0:	ldr	w9, [x9, #4]
   377d4:	sub	w11, w9, #0x1
   377d8:	cmp	w11, #0x1e
   377dc:	b.hi	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   377e0:	lsl	x10, x10, #3
   377e4:	ldr	w10, [x8, x10]
   377e8:	tbnz	w10, #31, 378d0 <aarch64_ins_addr_offset@@Base+0x118>
   377ec:	add	w11, w10, w9
   377f0:	cmp	w11, #0x21
   377f4:	b.ge	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   377f8:	ldr	w11, [x1, #16]
   377fc:	mov	w12, #0xffffffff            	// #-1
   37800:	ldr	w13, [x2]
   37804:	lsl	w9, w12, w9
   37808:	bic	w9, w11, w9
   3780c:	lsl	w9, w9, w10
   37810:	orr	w9, w13, w9
   37814:	str	w9, [x2]
   37818:	ldr	w11, [x0, #24]
   3781c:	add	x10, x8, x11, lsl #3
   37820:	ldr	w10, [x10, #4]
   37824:	sub	w12, w10, #0x1
   37828:	cmp	w12, #0x1e
   3782c:	b.hi	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   37830:	lsl	x11, x11, #3
   37834:	ldr	w11, [x8, x11]
   37838:	tbnz	w11, #31, 378d0 <aarch64_ins_addr_offset@@Base+0x118>
   3783c:	add	w12, w11, w10
   37840:	cmp	w12, #0x21
   37844:	b.ge	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   37848:	ldr	w12, [x1, #20]
   3784c:	mov	w13, #0xffffffff            	// #-1
   37850:	lsl	w10, w13, w10
   37854:	bic	w10, w12, w10
   37858:	lsl	w10, w10, w11
   3785c:	orr	w9, w10, w9
   37860:	str	w9, [x2]
   37864:	ldrb	w10, [x1, #28]
   37868:	tbz	w10, #1, 378c4 <aarch64_ins_addr_offset@@Base+0x10c>
   3786c:	and	w10, w10, #0xc
   37870:	cmp	w10, #0x4
   37874:	b.ne	378f0 <aarch64_ins_addr_offset@@Base+0x138>  // b.any
   37878:	ldr	w11, [x0, #28]
   3787c:	add	x10, x8, x11, lsl #3
   37880:	ldr	w10, [x10, #4]
   37884:	sub	w12, w10, #0x1
   37888:	cmp	w12, #0x1e
   3788c:	b.hi	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   37890:	lsl	x11, x11, #3
   37894:	ldr	w8, [x8, x11]
   37898:	tbnz	w8, #31, 378d0 <aarch64_ins_addr_offset@@Base+0x118>
   3789c:	add	w11, w8, w10
   378a0:	cmp	w11, #0x21
   378a4:	b.ge	378d0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   378a8:	mov	w11, #0xffffffff            	// #-1
   378ac:	lsl	w10, w11, w10
   378b0:	mvn	w10, w10
   378b4:	and	w10, w10, #0x1
   378b8:	lsl	w8, w10, w8
   378bc:	orr	w8, w8, w9
   378c0:	str	w8, [x2]
   378c4:	mov	w0, #0x1                   	// #1
   378c8:	ldp	x29, x30, [sp], #16
   378cc:	ret
   378d0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   378d4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   378d8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   378dc:	add	x0, x0, #0x553
   378e0:	add	x1, x1, #0x5b0
   378e4:	add	x3, x3, #0x5cc
   378e8:	mov	w2, #0x16a                 	// #362
   378ec:	bl	35b90 <__assert_fail@plt>
   378f0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   378f4:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   378f8:	adrp	x3, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   378fc:	add	x0, x0, #0xeda
   37900:	add	x1, x1, #0x8df
   37904:	add	x3, x3, #0xf0c
   37908:	mov	w2, #0x2a2                 	// #674
   3790c:	bl	35b90 <__assert_fail@plt>

0000000000037910 <aarch64_ins_addr_simm@@Base>:
   37910:	stp	x29, x30, [sp, #-64]!
   37914:	stp	x24, x23, [sp, #16]
   37918:	stp	x22, x21, [sp, #32]
   3791c:	stp	x20, x19, [sp, #48]
   37920:	adrp	x23, 96000 <aarch64_operands@@Base+0x16c38>
   37924:	ldr	x23, [x23, #3944]
   37928:	mov	x29, sp
   3792c:	ldr	w8, [x23, #116]
   37930:	sub	w9, w8, #0x1
   37934:	cmp	w9, #0x1e
   37938:	b.hi	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   3793c:	ldr	w9, [x23, #112]
   37940:	tbnz	w9, #31, 37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>
   37944:	add	w10, w9, w8
   37948:	cmp	w10, #0x21
   3794c:	b.ge	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37950:	ldr	w10, [x1, #16]
   37954:	mov	w11, #0xffffffff            	// #-1
   37958:	ldr	w12, [x2]
   3795c:	lsl	w8, w11, w8
   37960:	bic	w8, w10, w8
   37964:	lsl	w8, w8, w9
   37968:	orr	w8, w12, w8
   3796c:	str	w8, [x2]
   37970:	ldr	w8, [x0, #20]
   37974:	mov	x20, x0
   37978:	ldr	w24, [x1, #20]
   3797c:	ldrb	w0, [x1, #4]
   37980:	mov	x21, x3
   37984:	mov	x19, x2
   37988:	mov	x22, x1
   3798c:	cmp	w8, #0x2c
   37990:	b.eq	3799c <aarch64_ins_addr_simm@@Base+0x8c>  // b.none
   37994:	cmp	w0, #0x19
   37998:	b.ne	379d0 <aarch64_ins_addr_simm@@Base+0xc0>  // b.any
   3799c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   379a0:	and	w8, w0, #0xff
   379a4:	cmp	w8, #0x11
   379a8:	b.cs	37b00 <aarch64_ins_addr_simm@@Base+0x1f0>  // b.hs, b.nlast
   379ac:	sub	w8, w8, #0x1
   379b0:	mov	w9, #0x808b                	// #32907
   379b4:	lsr	x9, x9, x8
   379b8:	tbz	w9, #0, 37b20 <aarch64_ins_addr_simm@@Base+0x210>
   379bc:	adrp	x9, 54000 <xexit@@Base+0x84c>
   379c0:	add	x9, x9, #0xaec
   379c4:	ldrb	w9, [x9, x8]
   379c8:	ldr	w8, [x20, #20]
   379cc:	asr	w24, w24, w9
   379d0:	add	x9, x23, w8, uxtw #3
   379d4:	ldr	w9, [x9, #4]
   379d8:	sub	w10, w9, #0x1
   379dc:	cmp	w10, #0x1e
   379e0:	b.hi	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   379e4:	mov	w8, w8
   379e8:	lsl	x8, x8, #3
   379ec:	ldr	w8, [x23, x8]
   379f0:	tbnz	w8, #31, 37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>
   379f4:	add	w10, w8, w9
   379f8:	cmp	w10, #0x21
   379fc:	b.ge	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37a00:	mov	w10, #0xffffffff            	// #-1
   37a04:	ldr	w11, [x19]
   37a08:	lsl	w9, w10, w9
   37a0c:	bic	w9, w24, w9
   37a10:	lsl	w8, w9, w8
   37a14:	orr	w8, w11, w8
   37a18:	str	w8, [x19]
   37a1c:	ldrb	w9, [x22, #28]
   37a20:	tbz	w9, #1, 37aa8 <aarch64_ins_addr_simm@@Base+0x198>
   37a24:	ldr	x10, [x21, #8]
   37a28:	ldr	w10, [x10, #16]
   37a2c:	cmp	w10, #0x3e
   37a30:	b.hi	37a48 <aarch64_ins_addr_simm@@Base+0x138>  // b.pmore
   37a34:	mov	w11, #0x1                   	// #1
   37a38:	lsl	x10, x11, x10
   37a3c:	mov	x11, #0x6c00000000000000    	// #7782220156096217088
   37a40:	tst	x10, x11
   37a44:	b.ne	37ae0 <aarch64_ins_addr_simm@@Base+0x1d0>  // b.any
   37a48:	ubfx	w10, w9, #2, #1
   37a4c:	ubfx	w9, w9, #3, #1
   37a50:	cmp	w10, w9
   37a54:	b.eq	37b40 <aarch64_ins_addr_simm@@Base+0x230>  // b.none
   37a58:	cbz	w10, 37aa8 <aarch64_ins_addr_simm@@Base+0x198>
   37a5c:	ldr	w10, [x20, #24]
   37a60:	add	x9, x23, x10, lsl #3
   37a64:	ldr	w9, [x9, #4]
   37a68:	sub	w11, w9, #0x1
   37a6c:	cmp	w11, #0x1e
   37a70:	b.hi	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   37a74:	lsl	x10, x10, #3
   37a78:	ldr	w10, [x23, x10]
   37a7c:	tbnz	w10, #31, 37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>
   37a80:	add	w11, w10, w9
   37a84:	cmp	w11, #0x21
   37a88:	b.ge	37ac0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37a8c:	mov	w11, #0xffffffff            	// #-1
   37a90:	lsl	w9, w11, w9
   37a94:	mvn	w9, w9
   37a98:	and	w9, w9, #0x1
   37a9c:	lsl	w9, w9, w10
   37aa0:	orr	w8, w9, w8
   37aa4:	str	w8, [x19]
   37aa8:	ldp	x20, x19, [sp, #48]
   37aac:	ldp	x22, x21, [sp, #32]
   37ab0:	ldp	x24, x23, [sp, #16]
   37ab4:	mov	w0, #0x1                   	// #1
   37ab8:	ldp	x29, x30, [sp], #64
   37abc:	ret
   37ac0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37ac4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37ac8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37acc:	add	x0, x0, #0x553
   37ad0:	add	x1, x1, #0x5b0
   37ad4:	add	x3, x3, #0x5cc
   37ad8:	mov	w2, #0x16a                 	// #362
   37adc:	bl	35b90 <__assert_fail@plt>
   37ae0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37ae4:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37ae8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37aec:	add	x0, x0, #0xfa3
   37af0:	add	x1, x1, #0x8df
   37af4:	add	x3, x3, #0x43
   37af8:	mov	w2, #0x2c1                 	// #705
   37afc:	bl	35b90 <__assert_fail@plt>
   37b00:	adrp	x0, 58000 <fields@@Base+0x1e84>
   37b04:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37b08:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37b0c:	add	x0, x0, #0x5dc
   37b10:	add	x1, x1, #0x5b0
   37b14:	add	x3, x3, #0x6f3
   37b18:	mov	w2, #0x200                 	// #512
   37b1c:	bl	35b90 <__assert_fail@plt>
   37b20:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37b24:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37b28:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37b2c:	add	x0, x0, #0x718
   37b30:	add	x1, x1, #0x5b0
   37b34:	add	x3, x3, #0x6f3
   37b38:	mov	w2, #0x203                 	// #515
   37b3c:	bl	35b90 <__assert_fail@plt>
   37b40:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37b44:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37b48:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37b4c:	add	x0, x0, #0xd8
   37b50:	add	x1, x1, #0x8df
   37b54:	add	x3, x3, #0x43
   37b58:	mov	w2, #0x2c2                 	// #706
   37b5c:	bl	35b90 <__assert_fail@plt>

0000000000037b60 <aarch64_ins_addr_simm10@@Base>:
   37b60:	stp	x29, x30, [sp, #-16]!
   37b64:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   37b68:	ldr	w10, [x0, #20]
   37b6c:	ldr	x8, [x8, #3944]
   37b70:	mov	x29, sp
   37b74:	add	x9, x8, x10, lsl #3
   37b78:	ldr	w9, [x9, #4]
   37b7c:	sub	w11, w9, #0x1
   37b80:	cmp	w11, #0x1e
   37b84:	b.hi	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37b88:	lsl	x10, x10, #3
   37b8c:	ldr	w10, [x8, x10]
   37b90:	tbnz	w10, #31, 37cc8 <aarch64_ins_addr_simm10@@Base+0x168>
   37b94:	add	w11, w10, w9
   37b98:	cmp	w11, #0x21
   37b9c:	b.ge	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37ba0:	ldr	w11, [x1, #16]
   37ba4:	mov	w12, #0xffffffff            	// #-1
   37ba8:	ldr	w13, [x2]
   37bac:	lsl	w9, w12, w9
   37bb0:	bic	w9, w11, w9
   37bb4:	lsl	w9, w9, w10
   37bb8:	orr	w10, w13, w9
   37bbc:	str	w10, [x2]
   37bc0:	ldr	w9, [x0, #24]
   37bc4:	add	x11, x8, x9, lsl #3
   37bc8:	ldr	w11, [x11, #4]
   37bcc:	sub	w12, w11, #0x1
   37bd0:	cmp	w12, #0x1e
   37bd4:	b.hi	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37bd8:	lsl	x9, x9, #3
   37bdc:	ldr	w12, [x8, x9]
   37be0:	tbnz	w12, #31, 37cc8 <aarch64_ins_addr_simm10@@Base+0x168>
   37be4:	add	w9, w12, w11
   37be8:	cmp	w9, #0x21
   37bec:	b.ge	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37bf0:	ldr	w9, [x1, #20]
   37bf4:	mov	w13, #0xffffffff            	// #-1
   37bf8:	lsl	w11, w13, w11
   37bfc:	asr	w14, w9, #12
   37c00:	bic	w11, w14, w11
   37c04:	lsl	w11, w11, w12
   37c08:	orr	w10, w11, w10
   37c0c:	str	w10, [x2]
   37c10:	ldr	w12, [x0, #28]
   37c14:	add	x11, x8, x12, lsl #3
   37c18:	ldr	w11, [x11, #4]
   37c1c:	sub	w13, w11, #0x1
   37c20:	cmp	w13, #0x1e
   37c24:	b.hi	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37c28:	lsl	x12, x12, #3
   37c2c:	ldr	w12, [x8, x12]
   37c30:	tbnz	w12, #31, 37cc8 <aarch64_ins_addr_simm10@@Base+0x168>
   37c34:	add	w13, w12, w11
   37c38:	cmp	w13, #0x21
   37c3c:	b.ge	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37c40:	mov	w13, #0xffffffff            	// #-1
   37c44:	asr	w9, w9, #3
   37c48:	lsl	w11, w13, w11
   37c4c:	bic	w9, w9, w11
   37c50:	lsl	w9, w9, w12
   37c54:	orr	w9, w9, w10
   37c58:	str	w9, [x2]
   37c5c:	ldrb	w10, [x1, #28]
   37c60:	tbz	w10, #1, 37cbc <aarch64_ins_addr_simm10@@Base+0x15c>
   37c64:	and	w10, w10, #0xc
   37c68:	cmp	w10, #0x4
   37c6c:	b.ne	37ce8 <aarch64_ins_addr_simm10@@Base+0x188>  // b.any
   37c70:	ldr	w11, [x0, #32]
   37c74:	add	x10, x8, x11, lsl #3
   37c78:	ldr	w10, [x10, #4]
   37c7c:	sub	w12, w10, #0x1
   37c80:	cmp	w12, #0x1e
   37c84:	b.hi	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37c88:	lsl	x11, x11, #3
   37c8c:	ldr	w8, [x8, x11]
   37c90:	tbnz	w8, #31, 37cc8 <aarch64_ins_addr_simm10@@Base+0x168>
   37c94:	add	w11, w8, w10
   37c98:	cmp	w11, #0x21
   37c9c:	b.ge	37cc8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37ca0:	mov	w11, #0xffffffff            	// #-1
   37ca4:	lsl	w10, w11, w10
   37ca8:	mvn	w10, w10
   37cac:	and	w10, w10, #0x1
   37cb0:	lsl	w8, w10, w8
   37cb4:	orr	w8, w8, w9
   37cb8:	str	w8, [x2]
   37cbc:	mov	w0, #0x1                   	// #1
   37cc0:	ldp	x29, x30, [sp], #16
   37cc4:	ret
   37cc8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37ccc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37cd0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37cd4:	add	x0, x0, #0x553
   37cd8:	add	x1, x1, #0x5b0
   37cdc:	add	x3, x3, #0x5cc
   37ce0:	mov	w2, #0x16a                 	// #362
   37ce4:	bl	35b90 <__assert_fail@plt>
   37ce8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37cec:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   37cf0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37cf4:	add	x0, x0, #0xeda
   37cf8:	add	x1, x1, #0x8df
   37cfc:	add	x3, x3, #0x100
   37d00:	mov	w2, #0x2dd                 	// #733
   37d04:	bl	35b90 <__assert_fail@plt>

0000000000037d08 <aarch64_ins_addr_uimm12@@Base>:
   37d08:	stp	x29, x30, [sp, #-48]!
   37d0c:	stp	x20, x19, [sp, #32]
   37d10:	ldrb	w8, [x1, #4]
   37d14:	str	x21, [sp, #16]
   37d18:	mov	x21, x0
   37d1c:	mov	x29, sp
   37d20:	mov	w0, w8
   37d24:	mov	x19, x2
   37d28:	mov	x20, x1
   37d2c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   37d30:	and	w8, w0, #0xff
   37d34:	cmp	w8, #0x11
   37d38:	b.cs	37e34 <aarch64_ins_addr_uimm12@@Base+0x12c>  // b.hs, b.nlast
   37d3c:	sub	w8, w8, #0x1
   37d40:	mov	w9, #0x808b                	// #32907
   37d44:	lsr	x9, x9, x8
   37d48:	tbz	w9, #0, 37e54 <aarch64_ins_addr_uimm12@@Base+0x14c>
   37d4c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   37d50:	ldr	w11, [x21, #20]
   37d54:	ldr	x9, [x9, #3944]
   37d58:	add	x10, x9, x11, lsl #3
   37d5c:	ldr	w10, [x10, #4]
   37d60:	sub	w12, w10, #0x1
   37d64:	cmp	w12, #0x1e
   37d68:	b.hi	37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.pmore
   37d6c:	lsl	x11, x11, #3
   37d70:	ldr	w11, [x9, x11]
   37d74:	tbnz	w11, #31, 37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>
   37d78:	add	w12, w11, w10
   37d7c:	cmp	w12, #0x21
   37d80:	b.ge	37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.tcont
   37d84:	ldr	w12, [x20, #16]
   37d88:	mov	w13, #0xffffffff            	// #-1
   37d8c:	ldr	w14, [x19]
   37d90:	lsl	w10, w13, w10
   37d94:	bic	w10, w12, w10
   37d98:	lsl	w10, w10, w11
   37d9c:	orr	w10, w14, w10
   37da0:	str	w10, [x19]
   37da4:	ldr	w12, [x21, #24]
   37da8:	add	x11, x9, x12, lsl #3
   37dac:	ldr	w11, [x11, #4]
   37db0:	sub	w13, w11, #0x1
   37db4:	cmp	w13, #0x1e
   37db8:	b.hi	37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.pmore
   37dbc:	lsl	x12, x12, #3
   37dc0:	ldr	w9, [x9, x12]
   37dc4:	tbnz	w9, #31, 37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>
   37dc8:	add	w12, w9, w11
   37dcc:	cmp	w12, #0x21
   37dd0:	b.ge	37e14 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.tcont
   37dd4:	adrp	x12, 54000 <xexit@@Base+0x84c>
   37dd8:	add	x12, x12, #0xaec
   37ddc:	ldr	w13, [x20, #20]
   37de0:	ldrb	w8, [x12, x8]
   37de4:	mov	w12, #0xffffffff            	// #-1
   37de8:	lsl	w11, w12, w11
   37dec:	ldr	x21, [sp, #16]
   37df0:	asr	w8, w13, w8
   37df4:	bic	w8, w8, w11
   37df8:	lsl	w8, w8, w9
   37dfc:	orr	w8, w8, w10
   37e00:	str	w8, [x19]
   37e04:	ldp	x20, x19, [sp, #32]
   37e08:	mov	w0, #0x1                   	// #1
   37e0c:	ldp	x29, x30, [sp], #48
   37e10:	ret
   37e14:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37e18:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37e1c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37e20:	add	x0, x0, #0x553
   37e24:	add	x1, x1, #0x5b0
   37e28:	add	x3, x3, #0x5cc
   37e2c:	mov	w2, #0x16a                 	// #362
   37e30:	bl	35b90 <__assert_fail@plt>
   37e34:	adrp	x0, 58000 <fields@@Base+0x1e84>
   37e38:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37e3c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37e40:	add	x0, x0, #0x5dc
   37e44:	add	x1, x1, #0x5b0
   37e48:	add	x3, x3, #0x6f3
   37e4c:	mov	w2, #0x200                 	// #512
   37e50:	bl	35b90 <__assert_fail@plt>
   37e54:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37e58:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37e5c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37e60:	add	x0, x0, #0x718
   37e64:	add	x1, x1, #0x5b0
   37e68:	add	x3, x3, #0x6f3
   37e6c:	mov	w2, #0x203                 	// #515
   37e70:	bl	35b90 <__assert_fail@plt>

0000000000037e74 <aarch64_ins_simd_addr_post@@Base>:
   37e74:	stp	x29, x30, [sp, #-16]!
   37e78:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   37e7c:	ldr	x9, [x9, #3944]
   37e80:	mov	x29, sp
   37e84:	ldr	w8, [x9, #116]
   37e88:	sub	w10, w8, #0x1
   37e8c:	cmp	w10, #0x1e
   37e90:	b.hi	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   37e94:	ldr	w10, [x9, #112]
   37e98:	tbnz	w10, #31, 37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>
   37e9c:	add	w11, w10, w8
   37ea0:	cmp	w11, #0x21
   37ea4:	b.ge	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   37ea8:	ldr	w11, [x1, #16]
   37eac:	mov	w12, #0xffffffff            	// #-1
   37eb0:	ldr	w13, [x2]
   37eb4:	lsl	w8, w12, w8
   37eb8:	bic	w8, w11, w8
   37ebc:	lsl	w8, w8, w10
   37ec0:	orr	w8, w13, w8
   37ec4:	str	w8, [x2]
   37ec8:	ldr	w10, [x1, #24]
   37ecc:	cbz	w10, 37f08 <aarch64_ins_simd_addr_post@@Base+0x94>
   37ed0:	ldr	w10, [x9, #228]
   37ed4:	sub	w11, w10, #0x1
   37ed8:	cmp	w11, #0x1e
   37edc:	b.hi	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   37ee0:	ldr	w9, [x9, #224]
   37ee4:	tbnz	w9, #31, 37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>
   37ee8:	add	w11, w9, w10
   37eec:	cmp	w11, #0x21
   37ef0:	b.ge	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   37ef4:	ldr	w11, [x1, #20]
   37ef8:	mov	w12, #0xffffffff            	// #-1
   37efc:	lsl	w10, w12, w10
   37f00:	bic	w10, w11, w10
   37f04:	b	37f3c <aarch64_ins_simd_addr_post@@Base+0xc8>
   37f08:	ldr	w10, [x9, #228]
   37f0c:	sub	w11, w10, #0x1
   37f10:	cmp	w11, #0x1e
   37f14:	b.hi	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   37f18:	ldr	w9, [x9, #224]
   37f1c:	tbnz	w9, #31, 37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>
   37f20:	add	w11, w9, w10
   37f24:	cmp	w11, #0x21
   37f28:	b.ge	37f54 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   37f2c:	mov	w11, #0xffffffff            	// #-1
   37f30:	lsl	w10, w11, w10
   37f34:	mvn	w10, w10
   37f38:	and	w10, w10, #0x1f
   37f3c:	lsl	w9, w10, w9
   37f40:	orr	w8, w9, w8
   37f44:	mov	w0, #0x1                   	// #1
   37f48:	str	w8, [x2]
   37f4c:	ldp	x29, x30, [sp], #16
   37f50:	ret
   37f54:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37f58:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37f5c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37f60:	add	x0, x0, #0x553
   37f64:	add	x1, x1, #0x5b0
   37f68:	add	x3, x3, #0x5cc
   37f6c:	mov	w2, #0x16a                 	// #362
   37f70:	bl	35b90 <__assert_fail@plt>

0000000000037f74 <aarch64_ins_cond@@Base>:
   37f74:	stp	x29, x30, [sp, #-16]!
   37f78:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   37f7c:	ldr	x9, [x9, #3944]
   37f80:	mov	x29, sp
   37f84:	ldr	w8, [x9, #188]
   37f88:	sub	w10, w8, #0x1
   37f8c:	cmp	w10, #0x1e
   37f90:	b.hi	37fd8 <aarch64_ins_cond@@Base+0x64>  // b.pmore
   37f94:	ldr	w9, [x9, #184]
   37f98:	tbnz	w9, #31, 37fd8 <aarch64_ins_cond@@Base+0x64>
   37f9c:	add	w10, w9, w8
   37fa0:	cmp	w10, #0x21
   37fa4:	b.ge	37fd8 <aarch64_ins_cond@@Base+0x64>  // b.tcont
   37fa8:	ldr	x10, [x1, #16]
   37fac:	mov	w11, #0xffffffff            	// #-1
   37fb0:	ldr	w12, [x2]
   37fb4:	lsl	w8, w11, w8
   37fb8:	ldr	w10, [x10, #32]
   37fbc:	mov	w0, #0x1                   	// #1
   37fc0:	bic	w8, w10, w8
   37fc4:	lsl	w8, w8, w9
   37fc8:	orr	w8, w12, w8
   37fcc:	str	w8, [x2]
   37fd0:	ldp	x29, x30, [sp], #16
   37fd4:	ret
   37fd8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   37fdc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   37fe0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   37fe4:	add	x0, x0, #0x553
   37fe8:	add	x1, x1, #0x5b0
   37fec:	add	x3, x3, #0x5cc
   37ff0:	mov	w2, #0x16a                 	// #362
   37ff4:	bl	35b90 <__assert_fail@plt>

0000000000037ff8 <aarch64_ins_sysreg@@Base>:
   37ff8:	sub	sp, sp, #0x40
   37ffc:	stp	x29, x30, [sp, #16]
   38000:	stp	x22, x21, [sp, #32]
   38004:	stp	x20, x19, [sp, #48]
   38008:	ldr	x8, [x3, #8]
   3800c:	mov	x20, x3
   38010:	mov	x19, x2
   38014:	mov	x22, x1
   38018:	ldr	w9, [x8, #16]
   3801c:	add	x29, sp, #0x10
   38020:	cmp	w9, #0x46
   38024:	b.ne	380a8 <aarch64_ins_sysreg@@Base+0xb0>  // b.any
   38028:	ldr	x9, [x8, #120]
   3802c:	ldr	w8, [x22, #20]
   38030:	mov	w10, #0x20000000            	// #536870912
   38034:	mov	x21, x4
   38038:	and	x9, x9, #0x60000000
   3803c:	cmp	x9, x10
   38040:	b.ne	38064 <aarch64_ins_sysreg@@Base+0x6c>  // b.any
   38044:	tbz	w8, #4, 38064 <aarch64_ins_sysreg@@Base+0x6c>
   38048:	mov	w8, #0x2                   	// #2
   3804c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   38050:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38054:	str	w8, [x21]
   38058:	add	x0, x0, #0x7f0
   3805c:	add	x1, x1, #0x197
   38060:	b	3808c <aarch64_ins_sysreg@@Base+0x94>
   38064:	mov	w10, #0x40000000            	// #1073741824
   38068:	cmp	x9, x10
   3806c:	b.ne	380a8 <aarch64_ins_sysreg@@Base+0xb0>  // b.any
   38070:	tbz	w8, #3, 380a8 <aarch64_ins_sysreg@@Base+0xb0>
   38074:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   38078:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3807c:	mov	w8, #0x2                   	// #2
   38080:	add	x0, x0, #0x7f0
   38084:	add	x1, x1, #0x1be
   38088:	str	w8, [x21]
   3808c:	mov	w2, #0x5                   	// #5
   38090:	bl	35ab0 <dcgettext@plt>
   38094:	str	x0, [x21, #8]
   38098:	ldr	w8, [x22, #8]
   3809c:	mov	w9, #0x1                   	// #1
   380a0:	str	w9, [x21, #28]
   380a4:	str	w8, [x21, #4]
   380a8:	ldr	x8, [x20, #8]
   380ac:	ldr	w1, [x22, #16]
   380b0:	mov	w3, #0x5                   	// #5
   380b4:	mov	w4, #0x11                  	// #17
   380b8:	ldr	w2, [x8, #12]
   380bc:	mov	w8, #0x15                  	// #21
   380c0:	mov	w5, #0x12                  	// #18
   380c4:	mov	w6, #0x13                  	// #19
   380c8:	mov	w7, #0x14                  	// #20
   380cc:	mov	x0, x19
   380d0:	str	w8, [sp]
   380d4:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   380d8:	ldp	x20, x19, [sp, #48]
   380dc:	ldp	x22, x21, [sp, #32]
   380e0:	ldp	x29, x30, [sp, #16]
   380e4:	mov	w0, #0x1                   	// #1
   380e8:	add	sp, sp, #0x40
   380ec:	ret

00000000000380f0 <aarch64_ins_pstatefield@@Base>:
   380f0:	stp	x29, x30, [sp, #-16]!
   380f4:	ldr	x8, [x3, #8]
   380f8:	ldr	w1, [x1, #16]
   380fc:	mov	x0, x2
   38100:	mov	w3, #0x2                   	// #2
   38104:	ldr	w8, [x8, #12]
   38108:	mov	w4, #0x11                  	// #17
   3810c:	mov	w5, #0x14                  	// #20
   38110:	mov	x29, sp
   38114:	mov	w2, w8
   38118:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   3811c:	mov	w0, #0x1                   	// #1
   38120:	ldp	x29, x30, [sp], #16
   38124:	ret

0000000000038128 <aarch64_ins_sysins_op@@Base>:
   38128:	stp	x29, x30, [sp, #-16]!
   3812c:	ldr	x8, [x1, #16]
   38130:	ldr	x9, [x3, #8]
   38134:	mov	x0, x2
   38138:	mov	w3, #0x4                   	// #4
   3813c:	ldr	w1, [x8, #8]
   38140:	ldr	w8, [x9, #12]
   38144:	mov	w4, #0x11                  	// #17
   38148:	mov	w5, #0x12                  	// #18
   3814c:	mov	w6, #0x13                  	// #19
   38150:	mov	w7, #0x14                  	// #20
   38154:	mov	w2, w8
   38158:	mov	x29, sp
   3815c:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   38160:	mov	w0, #0x1                   	// #1
   38164:	ldp	x29, x30, [sp], #16
   38168:	ret

000000000003816c <aarch64_ins_barrier@@Base>:
   3816c:	stp	x29, x30, [sp, #-16]!
   38170:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   38174:	ldr	x9, [x9, #3944]
   38178:	mov	x29, sp
   3817c:	ldr	w8, [x9, #148]
   38180:	sub	w10, w8, #0x1
   38184:	cmp	w10, #0x1e
   38188:	b.hi	381d0 <aarch64_ins_barrier@@Base+0x64>  // b.pmore
   3818c:	ldr	w9, [x9, #144]
   38190:	tbnz	w9, #31, 381d0 <aarch64_ins_barrier@@Base+0x64>
   38194:	add	w10, w9, w8
   38198:	cmp	w10, #0x21
   3819c:	b.ge	381d0 <aarch64_ins_barrier@@Base+0x64>  // b.tcont
   381a0:	ldr	x10, [x1, #16]
   381a4:	mov	w11, #0xffffffff            	// #-1
   381a8:	ldr	w12, [x2]
   381ac:	lsl	w8, w11, w8
   381b0:	ldr	w10, [x10, #8]
   381b4:	mov	w0, #0x1                   	// #1
   381b8:	bic	w8, w10, w8
   381bc:	lsl	w8, w8, w9
   381c0:	orr	w8, w12, w8
   381c4:	str	w8, [x2]
   381c8:	ldp	x29, x30, [sp], #16
   381cc:	ret
   381d0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   381d4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   381d8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   381dc:	add	x0, x0, #0x553
   381e0:	add	x1, x1, #0x5b0
   381e4:	add	x3, x3, #0x5cc
   381e8:	mov	w2, #0x16a                 	// #362
   381ec:	bl	35b90 <__assert_fail@plt>

00000000000381f0 <aarch64_ins_prfop@@Base>:
   381f0:	stp	x29, x30, [sp, #-16]!
   381f4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   381f8:	ldr	x9, [x9, #3944]
   381fc:	mov	x29, sp
   38200:	ldr	w8, [x9, #100]
   38204:	sub	w10, w8, #0x1
   38208:	cmp	w10, #0x1e
   3820c:	b.hi	38254 <aarch64_ins_prfop@@Base+0x64>  // b.pmore
   38210:	ldr	w9, [x9, #96]
   38214:	tbnz	w9, #31, 38254 <aarch64_ins_prfop@@Base+0x64>
   38218:	add	w10, w9, w8
   3821c:	cmp	w10, #0x21
   38220:	b.ge	38254 <aarch64_ins_prfop@@Base+0x64>  // b.tcont
   38224:	ldr	x10, [x1, #16]
   38228:	mov	w11, #0xffffffff            	// #-1
   3822c:	ldr	w12, [x2]
   38230:	lsl	w8, w11, w8
   38234:	ldr	w10, [x10, #8]
   38238:	mov	w0, #0x1                   	// #1
   3823c:	bic	w8, w10, w8
   38240:	lsl	w8, w8, w9
   38244:	orr	w8, w12, w8
   38248:	str	w8, [x2]
   3824c:	ldp	x29, x30, [sp], #16
   38250:	ret
   38254:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38258:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3825c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38260:	add	x0, x0, #0x553
   38264:	add	x1, x1, #0x5b0
   38268:	add	x3, x3, #0x5cc
   3826c:	mov	w2, #0x16a                 	// #362
   38270:	bl	35b90 <__assert_fail@plt>

0000000000038274 <aarch64_ins_hint@@Base>:
   38274:	stp	x29, x30, [sp, #-16]!
   38278:	ldr	x8, [x1, #16]
   3827c:	mov	x0, x2
   38280:	mov	w3, #0x2                   	// #2
   38284:	mov	w4, #0x11                  	// #17
   38288:	ldr	w1, [x8, #8]
   3828c:	mov	w5, #0x12                  	// #18
   38290:	mov	w2, wzr
   38294:	mov	x29, sp
   38298:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   3829c:	mov	w0, #0x1                   	// #1
   382a0:	ldp	x29, x30, [sp], #16
   382a4:	ret

00000000000382a8 <aarch64_ins_reg_extended@@Base>:
   382a8:	stp	x29, x30, [sp, #-48]!
   382ac:	str	x21, [sp, #16]
   382b0:	stp	x20, x19, [sp, #32]
   382b4:	adrp	x21, 96000 <aarch64_operands@@Base+0x16c38>
   382b8:	ldr	x21, [x21, #3944]
   382bc:	mov	x29, sp
   382c0:	ldr	w8, [x21, #228]
   382c4:	sub	w9, w8, #0x1
   382c8:	cmp	w9, #0x1e
   382cc:	b.hi	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   382d0:	ldr	w9, [x21, #224]
   382d4:	tbnz	w9, #31, 383c0 <aarch64_ins_reg_extended@@Base+0x118>
   382d8:	add	w10, w9, w8
   382dc:	cmp	w10, #0x21
   382e0:	b.ge	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   382e4:	ldr	w10, [x1, #16]
   382e8:	mov	w11, #0xffffffff            	// #-1
   382ec:	ldr	w12, [x2]
   382f0:	lsl	w8, w11, w8
   382f4:	bic	w8, w10, w8
   382f8:	lsl	w8, w8, w9
   382fc:	orr	w8, w12, w8
   38300:	str	w8, [x2]
   38304:	ldr	w0, [x1, #32]
   38308:	mov	x19, x2
   3830c:	mov	x20, x1
   38310:	cmp	w0, #0x5
   38314:	b.ne	38328 <aarch64_ins_reg_extended@@Base+0x80>  // b.any
   38318:	ldrb	w8, [x20, #4]
   3831c:	cmp	w8, #0x1
   38320:	mov	w8, #0x8                   	// #8
   38324:	cinc	w0, w8, ne  // ne = any
   38328:	bl	35510 <aarch64_get_operand_modifier_value@plt>
   3832c:	ldr	w8, [x21, #244]
   38330:	sub	w9, w8, #0x1
   38334:	cmp	w9, #0x1e
   38338:	b.hi	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   3833c:	ldr	w9, [x21, #240]
   38340:	tbnz	w9, #31, 383c0 <aarch64_ins_reg_extended@@Base+0x118>
   38344:	add	w10, w9, w8
   38348:	cmp	w10, #0x21
   3834c:	b.ge	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   38350:	ldr	w10, [x21, #180]
   38354:	mov	w11, #0xffffffff            	// #-1
   38358:	ldr	w12, [x19]
   3835c:	lsl	w8, w11, w8
   38360:	bic	w8, w0, w8
   38364:	lsl	w8, w8, w9
   38368:	sub	w9, w10, #0x1
   3836c:	orr	w8, w12, w8
   38370:	cmp	w9, #0x1e
   38374:	str	w8, [x19]
   38378:	b.hi	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   3837c:	ldr	w9, [x21, #176]
   38380:	tbnz	w9, #31, 383c0 <aarch64_ins_reg_extended@@Base+0x118>
   38384:	add	w11, w9, w10
   38388:	cmp	w11, #0x21
   3838c:	b.ge	383c0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   38390:	ldr	w11, [x20, #40]
   38394:	mov	w12, #0xffffffff            	// #-1
   38398:	lsl	w10, w12, w10
   3839c:	ldr	x21, [sp, #16]
   383a0:	bic	w10, w11, w10
   383a4:	lsl	w9, w10, w9
   383a8:	orr	w8, w9, w8
   383ac:	str	w8, [x19]
   383b0:	ldp	x20, x19, [sp, #32]
   383b4:	mov	w0, #0x1                   	// #1
   383b8:	ldp	x29, x30, [sp], #48
   383bc:	ret
   383c0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   383c4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   383c8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   383cc:	add	x0, x0, #0x553
   383d0:	add	x1, x1, #0x5b0
   383d4:	add	x3, x3, #0x5cc
   383d8:	mov	w2, #0x16a                 	// #362
   383dc:	bl	35b90 <__assert_fail@plt>

00000000000383e0 <aarch64_ins_reg_shifted@@Base>:
   383e0:	stp	x29, x30, [sp, #-48]!
   383e4:	str	x21, [sp, #16]
   383e8:	stp	x20, x19, [sp, #32]
   383ec:	adrp	x21, 96000 <aarch64_operands@@Base+0x16c38>
   383f0:	ldr	x21, [x21, #3944]
   383f4:	mov	x29, sp
   383f8:	ldr	w8, [x21, #228]
   383fc:	sub	w9, w8, #0x1
   38400:	cmp	w9, #0x1e
   38404:	b.hi	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   38408:	ldr	w9, [x21, #224]
   3840c:	tbnz	w9, #31, 384e0 <aarch64_ins_reg_shifted@@Base+0x100>
   38410:	add	w10, w9, w8
   38414:	cmp	w10, #0x21
   38418:	b.ge	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   3841c:	ldr	w10, [x1, #16]
   38420:	mov	w11, #0xffffffff            	// #-1
   38424:	ldr	w12, [x2]
   38428:	lsl	w8, w11, w8
   3842c:	bic	w8, w10, w8
   38430:	lsl	w8, w8, w9
   38434:	orr	w8, w12, w8
   38438:	str	w8, [x2]
   3843c:	ldr	w0, [x1, #32]
   38440:	mov	x19, x2
   38444:	mov	x20, x1
   38448:	bl	35510 <aarch64_get_operand_modifier_value@plt>
   3844c:	ldr	w8, [x21, #284]
   38450:	sub	w9, w8, #0x1
   38454:	cmp	w9, #0x1e
   38458:	b.hi	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   3845c:	ldr	w9, [x21, #280]
   38460:	tbnz	w9, #31, 384e0 <aarch64_ins_reg_shifted@@Base+0x100>
   38464:	add	w10, w9, w8
   38468:	cmp	w10, #0x21
   3846c:	b.ge	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   38470:	ldr	w10, [x21, #308]
   38474:	mov	w11, #0xffffffff            	// #-1
   38478:	ldr	w12, [x19]
   3847c:	lsl	w8, w11, w8
   38480:	bic	w8, w0, w8
   38484:	lsl	w8, w8, w9
   38488:	sub	w9, w10, #0x1
   3848c:	orr	w8, w12, w8
   38490:	cmp	w9, #0x1e
   38494:	str	w8, [x19]
   38498:	b.hi	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   3849c:	ldr	w9, [x21, #304]
   384a0:	tbnz	w9, #31, 384e0 <aarch64_ins_reg_shifted@@Base+0x100>
   384a4:	add	w11, w9, w10
   384a8:	cmp	w11, #0x21
   384ac:	b.ge	384e0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   384b0:	ldr	w11, [x20, #40]
   384b4:	mov	w12, #0xffffffff            	// #-1
   384b8:	lsl	w10, w12, w10
   384bc:	ldr	x21, [sp, #16]
   384c0:	bic	w10, w11, w10
   384c4:	lsl	w9, w10, w9
   384c8:	orr	w8, w9, w8
   384cc:	str	w8, [x19]
   384d0:	ldp	x20, x19, [sp, #32]
   384d4:	mov	w0, #0x1                   	// #1
   384d8:	ldp	x29, x30, [sp], #48
   384dc:	ret
   384e0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   384e4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   384e8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   384ec:	add	x0, x0, #0x553
   384f0:	add	x1, x1, #0x5b0
   384f4:	add	x3, x3, #0x5cc
   384f8:	mov	w2, #0x16a                 	// #362
   384fc:	bl	35b90 <__assert_fail@plt>

0000000000038500 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   38500:	stp	x29, x30, [sp, #-16]!
   38504:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38508:	ldr	w10, [x0, #20]
   3850c:	ldr	x8, [x8, #3944]
   38510:	mov	x29, sp
   38514:	add	x9, x8, x10, lsl #3
   38518:	ldr	w9, [x9, #4]
   3851c:	sub	w11, w9, #0x1
   38520:	cmp	w11, #0x1e
   38524:	b.hi	385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.pmore
   38528:	lsl	x10, x10, #3
   3852c:	ldr	w11, [x8, x10]
   38530:	tbnz	w11, #31, 385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>
   38534:	add	w10, w11, w9
   38538:	cmp	w10, #0x21
   3853c:	b.ge	385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.tcont
   38540:	ldr	w13, [x1, #16]
   38544:	ldr	w12, [x8, #780]
   38548:	mov	w14, #0xffffffff            	// #-1
   3854c:	ldr	w15, [x2]
   38550:	ldr	w10, [x0, #16]
   38554:	lsl	w9, w14, w9
   38558:	bic	w9, w13, w9
   3855c:	sub	w13, w12, #0x1
   38560:	lsl	w9, w9, w11
   38564:	orr	w9, w15, w9
   38568:	cmp	w13, #0x1e
   3856c:	str	w9, [x2]
   38570:	b.hi	385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.pmore
   38574:	ldr	w8, [x8, #776]
   38578:	tbnz	w8, #31, 385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>
   3857c:	add	w11, w8, w12
   38580:	cmp	w11, #0x21
   38584:	b.ge	385bc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.tcont
   38588:	ldr	w11, [x1, #20]
   3858c:	ubfx	w10, w10, #5, #3
   38590:	mov	w13, #0xffffffff            	// #-1
   38594:	add	w10, w10, #0x1
   38598:	lsl	w12, w13, w12
   3859c:	sdiv	w10, w11, w10
   385a0:	bic	w10, w10, w12
   385a4:	lsl	w8, w10, w8
   385a8:	orr	w8, w8, w9
   385ac:	mov	w0, #0x1                   	// #1
   385b0:	str	w8, [x2]
   385b4:	ldp	x29, x30, [sp], #16
   385b8:	ret
   385bc:	adrp	x0, 54000 <xexit@@Base+0x84c>
   385c0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   385c4:	adrp	x3, 54000 <xexit@@Base+0x84c>
   385c8:	add	x0, x0, #0x553
   385cc:	add	x1, x1, #0x5b0
   385d0:	add	x3, x3, #0x5cc
   385d4:	mov	w2, #0x16a                 	// #362
   385d8:	bl	35b90 <__assert_fail@plt>

00000000000385dc <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   385dc:	stp	x29, x30, [sp, #-16]!
   385e0:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   385e4:	ldr	w10, [x0, #20]
   385e8:	ldr	x8, [x8, #3944]
   385ec:	mov	x29, sp
   385f0:	add	x9, x8, x10, lsl #3
   385f4:	ldr	w9, [x9, #4]
   385f8:	sub	w11, w9, #0x1
   385fc:	cmp	w11, #0x1e
   38600:	b.hi	38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.pmore
   38604:	lsl	x10, x10, #3
   38608:	ldr	w11, [x8, x10]
   3860c:	tbnz	w11, #31, 38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>
   38610:	add	w10, w11, w9
   38614:	cmp	w10, #0x21
   38618:	b.ge	38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.tcont
   3861c:	ldr	w13, [x1, #16]
   38620:	ldr	w12, [x8, #804]
   38624:	mov	w14, #0xffffffff            	// #-1
   38628:	ldr	w15, [x2]
   3862c:	ldr	w10, [x0, #16]
   38630:	lsl	w9, w14, w9
   38634:	bic	w9, w13, w9
   38638:	sub	w13, w12, #0x1
   3863c:	lsl	w9, w9, w11
   38640:	orr	w9, w15, w9
   38644:	cmp	w13, #0x1e
   38648:	str	w9, [x2]
   3864c:	b.hi	38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.pmore
   38650:	ldr	w8, [x8, #800]
   38654:	tbnz	w8, #31, 38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>
   38658:	add	w11, w8, w12
   3865c:	cmp	w11, #0x21
   38660:	b.ge	38698 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.tcont
   38664:	ldr	w11, [x1, #20]
   38668:	ubfx	w10, w10, #5, #3
   3866c:	mov	w13, #0xffffffff            	// #-1
   38670:	add	w10, w10, #0x1
   38674:	lsl	w12, w13, w12
   38678:	sdiv	w10, w11, w10
   3867c:	bic	w10, w10, w12
   38680:	lsl	w8, w10, w8
   38684:	orr	w8, w8, w9
   38688:	mov	w0, #0x1                   	// #1
   3868c:	str	w8, [x2]
   38690:	ldp	x29, x30, [sp], #16
   38694:	ret
   38698:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3869c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   386a0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   386a4:	add	x0, x0, #0x553
   386a8:	add	x1, x1, #0x5b0
   386ac:	add	x3, x3, #0x5cc
   386b0:	mov	w2, #0x16a                 	// #362
   386b4:	bl	35b90 <__assert_fail@plt>

00000000000386b8 <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   386b8:	stp	x29, x30, [sp, #-16]!
   386bc:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   386c0:	ldr	w9, [x0, #20]
   386c4:	ldr	x10, [x10, #3944]
   386c8:	mov	x29, sp
   386cc:	add	x8, x10, x9, lsl #3
   386d0:	ldr	w8, [x8, #4]
   386d4:	sub	w11, w8, #0x1
   386d8:	cmp	w11, #0x1e
   386dc:	b.hi	38750 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>  // b.pmore
   386e0:	lsl	x9, x9, #3
   386e4:	ldr	w9, [x10, x9]
   386e8:	tbnz	w9, #31, 38750 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>
   386ec:	add	w10, w9, w8
   386f0:	cmp	w10, #0x21
   386f4:	b.ge	38750 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>  // b.tcont
   386f8:	ldr	w11, [x1, #16]
   386fc:	mov	w12, #0xffffffff            	// #-1
   38700:	ldr	w13, [x2]
   38704:	lsl	w8, w12, w8
   38708:	bic	w8, w11, w8
   3870c:	lsl	w8, w8, w9
   38710:	ldr	w10, [x0, #16]
   38714:	orr	w8, w13, w8
   38718:	str	w8, [x2]
   3871c:	ldr	w8, [x1, #20]
   38720:	ubfx	w9, w10, #5, #3
   38724:	add	w9, w9, #0x1
   38728:	mov	w3, #0x2                   	// #2
   3872c:	sdiv	w1, w8, w9
   38730:	mov	w4, #0x16                  	// #22
   38734:	mov	w5, #0x64                  	// #100
   38738:	mov	x0, x2
   3873c:	mov	w2, wzr
   38740:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   38744:	mov	w0, #0x1                   	// #1
   38748:	ldp	x29, x30, [sp], #16
   3874c:	ret
   38750:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38754:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38758:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3875c:	add	x0, x0, #0x553
   38760:	add	x1, x1, #0x5b0
   38764:	add	x3, x3, #0x5cc
   38768:	mov	w2, #0x16a                 	// #362
   3876c:	bl	35b90 <__assert_fail@plt>

0000000000038770 <aarch64_ins_sve_addr_ri_s4@@Base>:
   38770:	stp	x29, x30, [sp, #-16]!
   38774:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38778:	ldr	w10, [x0, #20]
   3877c:	ldr	x8, [x8, #3944]
   38780:	mov	x29, sp
   38784:	add	x9, x8, x10, lsl #3
   38788:	ldr	w9, [x9, #4]
   3878c:	sub	w11, w9, #0x1
   38790:	cmp	w11, #0x1e
   38794:	b.hi	38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.pmore
   38798:	lsl	x10, x10, #3
   3879c:	ldr	w12, [x8, x10]
   387a0:	tbnz	w12, #31, 38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>
   387a4:	add	w10, w12, w9
   387a8:	cmp	w10, #0x21
   387ac:	b.ge	38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.tcont
   387b0:	ldr	w13, [x1, #16]
   387b4:	ldr	w11, [x8, #780]
   387b8:	mov	w14, #0xffffffff            	// #-1
   387bc:	ldr	w15, [x2]
   387c0:	ldr	w10, [x0, #16]
   387c4:	lsl	w9, w14, w9
   387c8:	bic	w9, w13, w9
   387cc:	sub	w13, w11, #0x1
   387d0:	lsl	w9, w9, w12
   387d4:	orr	w9, w15, w9
   387d8:	cmp	w13, #0x1e
   387dc:	str	w9, [x2]
   387e0:	b.hi	38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.pmore
   387e4:	ldr	w8, [x8, #776]
   387e8:	tbnz	w8, #31, 38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>
   387ec:	add	w12, w8, w11
   387f0:	cmp	w12, #0x21
   387f4:	b.ge	38830 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.tcont
   387f8:	ldr	w13, [x1, #20]
   387fc:	ubfx	w10, w10, #5, #3
   38800:	mov	w12, #0x1                   	// #1
   38804:	mov	w14, #0xffffffff            	// #-1
   38808:	lsl	w10, w12, w10
   3880c:	lsl	w11, w14, w11
   38810:	sdiv	w10, w13, w10
   38814:	bic	w10, w10, w11
   38818:	lsl	w8, w10, w8
   3881c:	orr	w8, w8, w9
   38820:	mov	w0, #0x1                   	// #1
   38824:	str	w8, [x2]
   38828:	ldp	x29, x30, [sp], #16
   3882c:	ret
   38830:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38834:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38838:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3883c:	add	x0, x0, #0x553
   38840:	add	x1, x1, #0x5b0
   38844:	add	x3, x3, #0x5cc
   38848:	mov	w2, #0x16a                 	// #362
   3884c:	bl	35b90 <__assert_fail@plt>

0000000000038850 <aarch64_ins_sve_addr_ri_u6@@Base>:
   38850:	stp	x29, x30, [sp, #-16]!
   38854:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38858:	ldr	w10, [x0, #20]
   3885c:	ldr	x8, [x8, #3944]
   38860:	mov	x29, sp
   38864:	add	x9, x8, x10, lsl #3
   38868:	ldr	w9, [x9, #4]
   3886c:	sub	w11, w9, #0x1
   38870:	cmp	w11, #0x1e
   38874:	b.hi	38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.pmore
   38878:	lsl	x10, x10, #3
   3887c:	ldr	w12, [x8, x10]
   38880:	tbnz	w12, #31, 38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>
   38884:	add	w10, w12, w9
   38888:	cmp	w10, #0x21
   3888c:	b.ge	38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.tcont
   38890:	ldr	w13, [x1, #16]
   38894:	ldr	w11, [x8, #804]
   38898:	mov	w14, #0xffffffff            	// #-1
   3889c:	ldr	w15, [x2]
   388a0:	ldr	w10, [x0, #16]
   388a4:	lsl	w9, w14, w9
   388a8:	bic	w9, w13, w9
   388ac:	sub	w13, w11, #0x1
   388b0:	lsl	w9, w9, w12
   388b4:	orr	w9, w15, w9
   388b8:	cmp	w13, #0x1e
   388bc:	str	w9, [x2]
   388c0:	b.hi	38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.pmore
   388c4:	ldr	w8, [x8, #800]
   388c8:	tbnz	w8, #31, 38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>
   388cc:	add	w12, w8, w11
   388d0:	cmp	w12, #0x21
   388d4:	b.ge	38910 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.tcont
   388d8:	ldr	w13, [x1, #20]
   388dc:	ubfx	w10, w10, #5, #3
   388e0:	mov	w12, #0x1                   	// #1
   388e4:	mov	w14, #0xffffffff            	// #-1
   388e8:	lsl	w10, w12, w10
   388ec:	lsl	w11, w14, w11
   388f0:	sdiv	w10, w13, w10
   388f4:	bic	w10, w10, w11
   388f8:	lsl	w8, w10, w8
   388fc:	orr	w8, w8, w9
   38900:	mov	w0, #0x1                   	// #1
   38904:	str	w8, [x2]
   38908:	ldp	x29, x30, [sp], #16
   3890c:	ret
   38910:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38914:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38918:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3891c:	add	x0, x0, #0x553
   38920:	add	x1, x1, #0x5b0
   38924:	add	x3, x3, #0x5cc
   38928:	mov	w2, #0x16a                 	// #362
   3892c:	bl	35b90 <__assert_fail@plt>

0000000000038930 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   38930:	stp	x29, x30, [sp, #-16]!
   38934:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38938:	ldr	w10, [x0, #20]
   3893c:	ldr	x8, [x8, #3944]
   38940:	mov	x29, sp
   38944:	add	x9, x8, x10, lsl #3
   38948:	ldr	w9, [x9, #4]
   3894c:	sub	w11, w9, #0x1
   38950:	cmp	w11, #0x1e
   38954:	b.hi	389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.pmore
   38958:	lsl	x10, x10, #3
   3895c:	ldr	w10, [x8, x10]
   38960:	tbnz	w10, #31, 389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>
   38964:	add	w11, w10, w9
   38968:	cmp	w11, #0x21
   3896c:	b.ge	389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.tcont
   38970:	ldr	w11, [x1, #16]
   38974:	mov	w12, #0xffffffff            	// #-1
   38978:	ldr	w13, [x2]
   3897c:	lsl	w9, w12, w9
   38980:	bic	w9, w11, w9
   38984:	lsl	w9, w9, w10
   38988:	orr	w9, w13, w9
   3898c:	str	w9, [x2]
   38990:	ldr	w11, [x0, #24]
   38994:	add	x10, x8, x11, lsl #3
   38998:	ldr	w10, [x10, #4]
   3899c:	sub	w12, w10, #0x1
   389a0:	cmp	w12, #0x1e
   389a4:	b.hi	389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.pmore
   389a8:	lsl	x11, x11, #3
   389ac:	ldr	w8, [x8, x11]
   389b0:	tbnz	w8, #31, 389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>
   389b4:	add	w11, w8, w10
   389b8:	cmp	w11, #0x21
   389bc:	b.ge	389e8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.tcont
   389c0:	ldr	w11, [x1, #20]
   389c4:	mov	w12, #0xffffffff            	// #-1
   389c8:	lsl	w10, w12, w10
   389cc:	mov	w0, #0x1                   	// #1
   389d0:	bic	w10, w11, w10
   389d4:	lsl	w8, w10, w8
   389d8:	orr	w8, w8, w9
   389dc:	str	w8, [x2]
   389e0:	ldp	x29, x30, [sp], #16
   389e4:	ret
   389e8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   389ec:	adrp	x1, 54000 <xexit@@Base+0x84c>
   389f0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   389f4:	add	x0, x0, #0x553
   389f8:	add	x1, x1, #0x5b0
   389fc:	add	x3, x3, #0x5cc
   38a00:	mov	w2, #0x16a                 	// #362
   38a04:	bl	35b90 <__assert_fail@plt>

0000000000038a08 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   38a08:	stp	x29, x30, [sp, #-16]!
   38a0c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38a10:	ldr	w10, [x0, #20]
   38a14:	ldr	x8, [x8, #3944]
   38a18:	mov	x29, sp
   38a1c:	add	x9, x8, x10, lsl #3
   38a20:	ldr	w9, [x9, #4]
   38a24:	sub	w11, w9, #0x1
   38a28:	cmp	w11, #0x1e
   38a2c:	b.hi	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38a30:	lsl	x10, x10, #3
   38a34:	ldr	w10, [x8, x10]
   38a38:	tbnz	w10, #31, 38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38a3c:	add	w11, w10, w9
   38a40:	cmp	w11, #0x21
   38a44:	b.ge	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38a48:	ldr	w11, [x1, #16]
   38a4c:	mov	w12, #0xffffffff            	// #-1
   38a50:	ldr	w13, [x2]
   38a54:	lsl	w9, w12, w9
   38a58:	bic	w9, w11, w9
   38a5c:	lsl	w9, w9, w10
   38a60:	orr	w9, w13, w9
   38a64:	str	w9, [x2]
   38a68:	ldr	w11, [x0, #24]
   38a6c:	add	x10, x8, x11, lsl #3
   38a70:	ldr	w10, [x10, #4]
   38a74:	sub	w12, w10, #0x1
   38a78:	cmp	w12, #0x1e
   38a7c:	b.hi	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38a80:	lsl	x11, x11, #3
   38a84:	ldr	w11, [x8, x11]
   38a88:	tbnz	w11, #31, 38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38a8c:	add	w12, w11, w10
   38a90:	cmp	w12, #0x21
   38a94:	b.ge	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38a98:	ldr	w12, [x1, #20]
   38a9c:	mov	w13, #0xffffffff            	// #-1
   38aa0:	lsl	w10, w13, w10
   38aa4:	bic	w10, w12, w10
   38aa8:	lsl	w10, w10, w11
   38aac:	orr	w9, w10, w9
   38ab0:	str	w9, [x2]
   38ab4:	ldr	w11, [x0, #28]
   38ab8:	ldr	w12, [x1, #32]
   38abc:	add	x10, x8, x11, lsl #3
   38ac0:	ldr	w10, [x10, #4]
   38ac4:	cmp	w12, #0x8
   38ac8:	sub	w12, w10, #0x1
   38acc:	b.ne	38af4 <aarch64_ins_sve_addr_rz_xtw@@Base+0xec>  // b.any
   38ad0:	cmp	w12, #0x1e
   38ad4:	b.hi	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38ad8:	lsl	x11, x11, #3
   38adc:	ldr	w8, [x8, x11]
   38ae0:	tbnz	w8, #31, 38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38ae4:	add	w8, w8, w10
   38ae8:	cmp	w8, #0x21
   38aec:	b.lt	38b2c <aarch64_ins_sve_addr_rz_xtw@@Base+0x124>  // b.tstop
   38af0:	b	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38af4:	cmp	w12, #0x1e
   38af8:	b.hi	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38afc:	lsl	x11, x11, #3
   38b00:	ldr	w8, [x8, x11]
   38b04:	tbnz	w8, #31, 38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38b08:	add	w11, w8, w10
   38b0c:	cmp	w11, #0x21
   38b10:	b.ge	38b3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38b14:	mov	w11, #0xffffffff            	// #-1
   38b18:	lsl	w10, w11, w10
   38b1c:	mvn	w10, w10
   38b20:	and	w10, w10, #0x1
   38b24:	lsl	w8, w10, w8
   38b28:	orr	w9, w8, w9
   38b2c:	mov	w0, #0x1                   	// #1
   38b30:	str	w9, [x2]
   38b34:	ldp	x29, x30, [sp], #16
   38b38:	ret
   38b3c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38b40:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38b44:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38b48:	add	x0, x0, #0x553
   38b4c:	add	x1, x1, #0x5b0
   38b50:	add	x3, x3, #0x5cc
   38b54:	mov	w2, #0x16a                 	// #362
   38b58:	bl	35b90 <__assert_fail@plt>

0000000000038b5c <aarch64_ins_sve_addr_zi_u5@@Base>:
   38b5c:	stp	x29, x30, [sp, #-16]!
   38b60:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38b64:	ldr	w10, [x0, #20]
   38b68:	ldr	x8, [x8, #3944]
   38b6c:	mov	x29, sp
   38b70:	add	x9, x8, x10, lsl #3
   38b74:	ldr	w9, [x9, #4]
   38b78:	sub	w11, w9, #0x1
   38b7c:	cmp	w11, #0x1e
   38b80:	b.hi	38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.pmore
   38b84:	lsl	x10, x10, #3
   38b88:	ldr	w12, [x8, x10]
   38b8c:	tbnz	w12, #31, 38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>
   38b90:	add	w10, w12, w9
   38b94:	cmp	w10, #0x21
   38b98:	b.ge	38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.tcont
   38b9c:	ldr	w13, [x1, #16]
   38ba0:	ldr	w11, [x8, #348]
   38ba4:	mov	w14, #0xffffffff            	// #-1
   38ba8:	ldr	w15, [x2]
   38bac:	ldr	w10, [x0, #16]
   38bb0:	lsl	w9, w14, w9
   38bb4:	bic	w9, w13, w9
   38bb8:	sub	w13, w11, #0x1
   38bbc:	lsl	w9, w9, w12
   38bc0:	orr	w9, w15, w9
   38bc4:	cmp	w13, #0x1e
   38bc8:	str	w9, [x2]
   38bcc:	b.hi	38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.pmore
   38bd0:	ldr	w8, [x8, #344]
   38bd4:	tbnz	w8, #31, 38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>
   38bd8:	add	w12, w8, w11
   38bdc:	cmp	w12, #0x21
   38be0:	b.ge	38c1c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.tcont
   38be4:	ldr	w13, [x1, #20]
   38be8:	ubfx	w10, w10, #5, #3
   38bec:	mov	w12, #0x1                   	// #1
   38bf0:	mov	w14, #0xffffffff            	// #-1
   38bf4:	lsl	w10, w12, w10
   38bf8:	lsl	w11, w14, w11
   38bfc:	sdiv	w10, w13, w10
   38c00:	bic	w10, w10, w11
   38c04:	lsl	w8, w10, w8
   38c08:	orr	w8, w8, w9
   38c0c:	mov	w0, #0x1                   	// #1
   38c10:	str	w8, [x2]
   38c14:	ldp	x29, x30, [sp], #16
   38c18:	ret
   38c1c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38c20:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38c24:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38c28:	add	x0, x0, #0x553
   38c2c:	add	x1, x1, #0x5b0
   38c30:	add	x3, x3, #0x5cc
   38c34:	mov	w2, #0x16a                 	// #362
   38c38:	bl	35b90 <__assert_fail@plt>

0000000000038c3c <aarch64_ins_sve_addr_zz_lsl@@Base>:
   38c3c:	stp	x29, x30, [sp, #-16]!
   38c40:	mov	x29, sp
   38c44:	bl	38c54 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38c48:	mov	w0, #0x1                   	// #1
   38c4c:	ldp	x29, x30, [sp], #16
   38c50:	ret
   38c54:	stp	x29, x30, [sp, #-16]!
   38c58:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   38c5c:	ldr	w10, [x0, #20]
   38c60:	ldr	x8, [x8, #3944]
   38c64:	mov	x29, sp
   38c68:	add	x9, x8, x10, lsl #3
   38c6c:	ldr	w9, [x9, #4]
   38c70:	sub	w11, w9, #0x1
   38c74:	cmp	w11, #0x1e
   38c78:	b.hi	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38c7c:	lsl	x10, x10, #3
   38c80:	ldr	w10, [x8, x10]
   38c84:	tbnz	w10, #31, 38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38c88:	add	w11, w10, w9
   38c8c:	cmp	w11, #0x21
   38c90:	b.ge	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38c94:	ldr	w11, [x1, #16]
   38c98:	mov	w12, #0xffffffff            	// #-1
   38c9c:	ldr	w13, [x2]
   38ca0:	lsl	w9, w12, w9
   38ca4:	bic	w9, w11, w9
   38ca8:	lsl	w9, w9, w10
   38cac:	orr	w9, w13, w9
   38cb0:	str	w9, [x2]
   38cb4:	ldr	w11, [x0, #24]
   38cb8:	add	x10, x8, x11, lsl #3
   38cbc:	ldr	w10, [x10, #4]
   38cc0:	sub	w12, w10, #0x1
   38cc4:	cmp	w12, #0x1e
   38cc8:	b.hi	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38ccc:	lsl	x11, x11, #3
   38cd0:	ldr	w11, [x8, x11]
   38cd4:	tbnz	w11, #31, 38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38cd8:	add	w12, w11, w10
   38cdc:	cmp	w12, #0x21
   38ce0:	b.ge	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38ce4:	ldr	w13, [x1, #20]
   38ce8:	ldr	w12, [x8, #852]
   38cec:	mov	w14, #0xffffffff            	// #-1
   38cf0:	lsl	w10, w14, w10
   38cf4:	bic	w10, w13, w10
   38cf8:	sub	w13, w12, #0x1
   38cfc:	lsl	w10, w10, w11
   38d00:	orr	w9, w10, w9
   38d04:	cmp	w13, #0x1e
   38d08:	str	w9, [x2]
   38d0c:	b.hi	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38d10:	ldr	w8, [x8, #848]
   38d14:	tbnz	w8, #31, 38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38d18:	add	w10, w8, w12
   38d1c:	cmp	w10, #0x21
   38d20:	b.ge	38d48 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38d24:	ldr	w10, [x1, #40]
   38d28:	mov	w11, #0xffffffff            	// #-1
   38d2c:	lsl	w11, w11, w12
   38d30:	bic	w10, w10, w11
   38d34:	lsl	w8, w10, w8
   38d38:	orr	w8, w8, w9
   38d3c:	str	w8, [x2]
   38d40:	ldp	x29, x30, [sp], #16
   38d44:	ret
   38d48:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38d4c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38d50:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38d54:	add	x0, x0, #0x553
   38d58:	add	x1, x1, #0x5b0
   38d5c:	add	x3, x3, #0x5cc
   38d60:	mov	w2, #0x16a                 	// #362
   38d64:	bl	35b90 <__assert_fail@plt>

0000000000038d68 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   38d68:	stp	x29, x30, [sp, #-16]!
   38d6c:	mov	x29, sp
   38d70:	bl	38c54 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38d74:	mov	w0, #0x1                   	// #1
   38d78:	ldp	x29, x30, [sp], #16
   38d7c:	ret

0000000000038d80 <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   38d80:	stp	x29, x30, [sp, #-16]!
   38d84:	mov	x29, sp
   38d88:	bl	38c54 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38d8c:	mov	w0, #0x1                   	// #1
   38d90:	ldp	x29, x30, [sp], #16
   38d94:	ret

0000000000038d98 <aarch64_ins_sve_aimm@@Base>:
   38d98:	stp	x29, x30, [sp, #-16]!
   38d9c:	ldr	x10, [x1, #40]
   38da0:	ldr	x9, [x1, #16]
   38da4:	mov	x8, x2
   38da8:	mov	x29, sp
   38dac:	cmp	x10, #0x8
   38db0:	b.ne	38dc0 <aarch64_ins_sve_aimm@@Base+0x28>  // b.any
   38db4:	mov	w2, #0x100                 	// #256
   38db8:	bfxil	w2, w9, #0, #8
   38dbc:	b	38de8 <aarch64_ins_sve_aimm@@Base+0x50>
   38dc0:	cbz	x9, 38de4 <aarch64_ins_sve_aimm@@Base+0x4c>
   38dc4:	and	x10, x9, #0xff
   38dc8:	cbnz	x10, 38de4 <aarch64_ins_sve_aimm@@Base+0x4c>
   38dcc:	add	x10, x9, #0xff
   38dd0:	cmp	x9, #0x0
   38dd4:	csel	x9, x10, x9, lt  // lt = tstop
   38dd8:	mov	w2, #0x100                 	// #256
   38ddc:	bfxil	w2, w9, #8, #8
   38de0:	b	38de8 <aarch64_ins_sve_aimm@@Base+0x50>
   38de4:	and	w2, w9, #0xff
   38de8:	mov	x1, x8
   38dec:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   38df0:	mov	w0, #0x1                   	// #1
   38df4:	ldp	x29, x30, [sp], #16
   38df8:	ret

0000000000038dfc <aarch64_ins_sve_asimm@@Base>:
   38dfc:	stp	x29, x30, [sp, #-16]!
   38e00:	mov	x29, sp
   38e04:	bl	359f0 <aarch64_ins_sve_aimm@plt>
   38e08:	mov	w0, #0x1                   	// #1
   38e0c:	ldp	x29, x30, [sp], #16
   38e10:	ret

0000000000038e14 <aarch64_ins_sve_index@@Base>:
   38e14:	stp	x29, x30, [sp, #-48]!
   38e18:	stp	x20, x19, [sp, #32]
   38e1c:	ldrb	w8, [x1, #4]
   38e20:	str	x21, [sp, #16]
   38e24:	mov	x21, x0
   38e28:	mov	x29, sp
   38e2c:	mov	w0, w8
   38e30:	mov	x19, x2
   38e34:	mov	x20, x1
   38e38:	bl	35760 <aarch64_get_qualifier_esize@plt>
   38e3c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   38e40:	ldr	w9, [x21, #20]
   38e44:	ldr	x10, [x10, #3944]
   38e48:	add	x8, x10, x9, lsl #3
   38e4c:	ldr	w8, [x8, #4]
   38e50:	sub	w11, w8, #0x1
   38e54:	cmp	w11, #0x1e
   38e58:	b.hi	38ed4 <aarch64_ins_sve_index@@Base+0xc0>  // b.pmore
   38e5c:	lsl	x9, x9, #3
   38e60:	ldr	w9, [x10, x9]
   38e64:	tbnz	w9, #31, 38ed4 <aarch64_ins_sve_index@@Base+0xc0>
   38e68:	add	w10, w9, w8
   38e6c:	cmp	w10, #0x21
   38e70:	b.ge	38ed4 <aarch64_ins_sve_index@@Base+0xc0>  // b.tcont
   38e74:	ldr	w10, [x20, #16]
   38e78:	mov	w11, #0xffffffff            	// #-1
   38e7c:	ldr	w12, [x19]
   38e80:	lsl	w8, w11, w8
   38e84:	bic	w8, w10, w8
   38e88:	lsl	w8, w8, w9
   38e8c:	orr	w8, w12, w8
   38e90:	str	w8, [x19]
   38e94:	ldr	w8, [x20, #24]
   38e98:	mov	w9, #0x1                   	// #1
   38e9c:	mov	w3, #0x2                   	// #2
   38ea0:	mov	w4, #0x2b                  	// #43
   38ea4:	bfi	w9, w8, #1, #31
   38ea8:	and	w8, w0, #0xff
   38eac:	mul	w1, w9, w8
   38eb0:	mov	w5, #0x74                  	// #116
   38eb4:	mov	x0, x19
   38eb8:	mov	w2, wzr
   38ebc:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   38ec0:	ldp	x20, x19, [sp, #32]
   38ec4:	ldr	x21, [sp, #16]
   38ec8:	mov	w0, #0x1                   	// #1
   38ecc:	ldp	x29, x30, [sp], #48
   38ed0:	ret
   38ed4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38ed8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38edc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38ee0:	add	x0, x0, #0x553
   38ee4:	add	x1, x1, #0x5b0
   38ee8:	add	x3, x3, #0x5cc
   38eec:	mov	w2, #0x16a                 	// #362
   38ef0:	bl	35b90 <__assert_fail@plt>

0000000000038ef4 <aarch64_ins_sve_limm_mov@@Base>:
   38ef4:	stp	x29, x30, [sp, #-16]!
   38ef8:	ldr	x8, [x3, #8]
   38efc:	mov	x29, sp
   38f00:	ldr	w8, [x8, #20]
   38f04:	cmp	w8, #0x2a
   38f08:	cset	w4, eq  // eq = none
   38f0c:	bl	373d0 <aarch64_ins_limm@@Base+0x28>
   38f10:	mov	w0, #0x1                   	// #1
   38f14:	ldp	x29, x30, [sp], #16
   38f18:	ret

0000000000038f1c <aarch64_ins_sve_quad_index@@Base>:
   38f1c:	stp	x29, x30, [sp, #-16]!
   38f20:	ldr	w8, [x0, #16]
   38f24:	ldr	w9, [x1, #16]
   38f28:	mov	x29, sp
   38f2c:	ubfx	x10, x8, #5, #3
   38f30:	lsr	w11, w9, w10
   38f34:	cbnz	w11, 38f5c <aarch64_ins_sve_quad_index@@Base+0x40>
   38f38:	ldr	w11, [x1, #24]
   38f3c:	mov	x8, x2
   38f40:	mov	x1, x8
   38f44:	lsl	w10, w11, w10
   38f48:	add	w2, w9, w10
   38f4c:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   38f50:	mov	w0, #0x1                   	// #1
   38f54:	ldp	x29, x30, [sp], #16
   38f58:	ret
   38f5c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38f60:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   38f64:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38f68:	add	x0, x0, #0x1e6
   38f6c:	add	x1, x1, #0x8df
   38f70:	add	x3, x3, #0x20d
   38f74:	mov	w2, #0x4a2                 	// #1186
   38f78:	bl	35b90 <__assert_fail@plt>

0000000000038f7c <aarch64_ins_sve_reglist@@Base>:
   38f7c:	stp	x29, x30, [sp, #-16]!
   38f80:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   38f84:	ldr	w9, [x0, #20]
   38f88:	ldr	x10, [x10, #3944]
   38f8c:	mov	x29, sp
   38f90:	add	x8, x10, x9, lsl #3
   38f94:	ldr	w8, [x8, #4]
   38f98:	sub	w11, w8, #0x1
   38f9c:	cmp	w11, #0x1e
   38fa0:	b.hi	38fec <aarch64_ins_sve_reglist@@Base+0x70>  // b.pmore
   38fa4:	lsl	x9, x9, #3
   38fa8:	ldr	w9, [x10, x9]
   38fac:	tbnz	w9, #31, 38fec <aarch64_ins_sve_reglist@@Base+0x70>
   38fb0:	add	w10, w9, w8
   38fb4:	cmp	w10, #0x21
   38fb8:	b.ge	38fec <aarch64_ins_sve_reglist@@Base+0x70>  // b.tcont
   38fbc:	ldrh	w10, [x1, #16]
   38fc0:	mov	w11, #0xffffffff            	// #-1
   38fc4:	ldr	w12, [x2]
   38fc8:	lsl	w8, w11, w8
   38fcc:	and	w10, w10, #0x1f
   38fd0:	bic	w8, w10, w8
   38fd4:	lsl	w8, w8, w9
   38fd8:	orr	w8, w12, w8
   38fdc:	mov	w0, #0x1                   	// #1
   38fe0:	str	w8, [x2]
   38fe4:	ldp	x29, x30, [sp], #16
   38fe8:	ret
   38fec:	adrp	x0, 54000 <xexit@@Base+0x84c>
   38ff0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   38ff4:	adrp	x3, 54000 <xexit@@Base+0x84c>
   38ff8:	add	x0, x0, #0x553
   38ffc:	add	x1, x1, #0x5b0
   39000:	add	x3, x3, #0x5cc
   39004:	mov	w2, #0x16a                 	// #362
   39008:	bl	35b90 <__assert_fail@plt>

000000000003900c <aarch64_ins_sve_scale@@Base>:
   3900c:	stp	x29, x30, [sp, #-32]!
   39010:	stp	x20, x19, [sp, #16]
   39014:	mov	x19, x2
   39018:	ldr	w2, [x1, #16]
   3901c:	mov	x20, x1
   39020:	mov	x1, x19
   39024:	mov	x29, sp
   39028:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   3902c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39030:	ldr	x9, [x9, #3944]
   39034:	ldr	w8, [x9, #780]
   39038:	sub	w10, w8, #0x1
   3903c:	cmp	w10, #0x1e
   39040:	b.hi	3908c <aarch64_ins_sve_scale@@Base+0x80>  // b.pmore
   39044:	ldr	w9, [x9, #776]
   39048:	tbnz	w9, #31, 3908c <aarch64_ins_sve_scale@@Base+0x80>
   3904c:	add	w10, w9, w8
   39050:	cmp	w10, #0x21
   39054:	b.ge	3908c <aarch64_ins_sve_scale@@Base+0x80>  // b.tcont
   39058:	ldr	w10, [x20, #40]
   3905c:	mov	w11, #0xffffffff            	// #-1
   39060:	ldr	w12, [x19]
   39064:	lsl	w8, w11, w8
   39068:	sub	w10, w10, #0x1
   3906c:	bic	w8, w10, w8
   39070:	lsl	w8, w8, w9
   39074:	orr	w8, w12, w8
   39078:	str	w8, [x19]
   3907c:	ldp	x20, x19, [sp, #16]
   39080:	mov	w0, #0x1                   	// #1
   39084:	ldp	x29, x30, [sp], #32
   39088:	ret
   3908c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   39090:	adrp	x1, 54000 <xexit@@Base+0x84c>
   39094:	adrp	x3, 54000 <xexit@@Base+0x84c>
   39098:	add	x0, x0, #0x553
   3909c:	add	x1, x1, #0x5b0
   390a0:	add	x3, x3, #0x5cc
   390a4:	mov	w2, #0x16a                 	// #362
   390a8:	bl	35b90 <__assert_fail@plt>

00000000000390ac <aarch64_ins_sve_shlimm@@Base>:
   390ac:	stp	x29, x30, [sp, #-48]!
   390b0:	stp	x20, x19, [sp, #32]
   390b4:	ldr	w8, [x1, #8]
   390b8:	str	x21, [sp, #16]
   390bc:	mov	x29, sp
   390c0:	cmp	w8, #0x0
   390c4:	b.le	39110 <aarch64_ins_sve_shlimm@@Base+0x64>
   390c8:	sub	w8, w8, #0x1
   390cc:	mov	w9, #0x38                  	// #56
   390d0:	smaddl	x8, w8, w9, x3
   390d4:	mov	x21, x0
   390d8:	ldrb	w0, [x8, #28]
   390dc:	mov	x19, x2
   390e0:	mov	x20, x1
   390e4:	bl	35760 <aarch64_get_qualifier_esize@plt>
   390e8:	ldr	w8, [x20, #16]
   390ec:	mov	x1, x19
   390f0:	add	w2, w8, w0, uxtb #3
   390f4:	mov	x0, x21
   390f8:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   390fc:	ldp	x20, x19, [sp, #32]
   39100:	ldr	x21, [sp, #16]
   39104:	mov	w0, #0x1                   	// #1
   39108:	ldp	x29, x30, [sp], #48
   3910c:	ret
   39110:	adrp	x0, 54000 <xexit@@Base+0x84c>
   39114:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   39118:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3911c:	add	x0, x0, #0x2a7
   39120:	add	x1, x1, #0x8df
   39124:	add	x3, x3, #0x2b5
   39128:	mov	w2, #0x4cc                 	// #1228
   3912c:	bl	35b90 <__assert_fail@plt>

0000000000039130 <aarch64_ins_sve_shrimm@@Base>:
   39130:	stp	x29, x30, [sp, #-48]!
   39134:	stp	x20, x19, [sp, #32]
   39138:	ldr	w8, [x0, #16]
   3913c:	ldr	w9, [x1, #8]
   39140:	str	x21, [sp, #16]
   39144:	mov	x29, sp
   39148:	ubfx	w8, w8, #5, #3
   3914c:	subs	w8, w9, w8
   39150:	b.lt	391a0 <aarch64_ins_sve_shrimm@@Base+0x70>  // b.tstop
   39154:	mov	w9, #0x38                  	// #56
   39158:	umaddl	x8, w8, w9, x3
   3915c:	mov	x19, x0
   39160:	ldrb	w0, [x8, #28]
   39164:	mov	x20, x1
   39168:	mov	x21, x2
   3916c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   39170:	ldr	w8, [x20, #16]
   39174:	and	w9, w0, #0xff
   39178:	lsl	w9, w9, #4
   3917c:	mov	x0, x19
   39180:	sub	w2, w9, w8
   39184:	mov	x1, x21
   39188:	bl	36d24 <aarch64_ins_imm@@Base+0x40>
   3918c:	ldp	x20, x19, [sp, #32]
   39190:	ldr	x21, [sp, #16]
   39194:	mov	w0, #0x1                   	// #1
   39198:	ldp	x29, x30, [sp], #48
   3919c:	ret
   391a0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   391a4:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   391a8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   391ac:	add	x0, x0, #0x34b
   391b0:	add	x1, x1, #0x8df
   391b4:	add	x3, x3, #0x36c
   391b8:	mov	w2, #0x4de                 	// #1246
   391bc:	bl	35b90 <__assert_fail@plt>

00000000000391c0 <aarch64_ins_sve_float_half_one@@Base>:
   391c0:	stp	x29, x30, [sp, #-16]!
   391c4:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   391c8:	ldr	w9, [x0, #20]
   391cc:	ldr	x11, [x1, #16]
   391d0:	ldr	x10, [x10, #3944]
   391d4:	mov	w12, #0x3f000000            	// #1056964608
   391d8:	mov	x29, sp
   391dc:	cmp	x11, x12
   391e0:	add	x8, x10, x9, lsl #3
   391e4:	ldr	w8, [x8, #4]
   391e8:	sub	w11, w8, #0x1
   391ec:	b.ne	39214 <aarch64_ins_sve_float_half_one@@Base+0x54>  // b.any
   391f0:	cmp	w11, #0x1e
   391f4:	b.hi	39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.pmore
   391f8:	lsl	x9, x9, #3
   391fc:	ldr	w9, [x10, x9]
   39200:	tbnz	w9, #31, 39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>
   39204:	add	w8, w9, w8
   39208:	cmp	w8, #0x21
   3920c:	b.lt	39254 <aarch64_ins_sve_float_half_one@@Base+0x94>  // b.tstop
   39210:	b	39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>
   39214:	cmp	w11, #0x1e
   39218:	b.hi	39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.pmore
   3921c:	lsl	x9, x9, #3
   39220:	ldr	w9, [x10, x9]
   39224:	tbnz	w9, #31, 39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>
   39228:	add	w10, w9, w8
   3922c:	cmp	w10, #0x21
   39230:	b.ge	39260 <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.tcont
   39234:	mov	w10, #0xffffffff            	// #-1
   39238:	lsl	w8, w10, w8
   3923c:	ldr	w10, [x2]
   39240:	mvn	w8, w8
   39244:	and	w8, w8, #0x1
   39248:	lsl	w8, w8, w9
   3924c:	orr	w8, w10, w8
   39250:	str	w8, [x2]
   39254:	mov	w0, #0x1                   	// #1
   39258:	ldp	x29, x30, [sp], #16
   3925c:	ret
   39260:	adrp	x0, 54000 <xexit@@Base+0x84c>
   39264:	adrp	x1, 54000 <xexit@@Base+0x84c>
   39268:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3926c:	add	x0, x0, #0x553
   39270:	add	x1, x1, #0x5b0
   39274:	add	x3, x3, #0x5cc
   39278:	mov	w2, #0x16a                 	// #362
   3927c:	bl	35b90 <__assert_fail@plt>

0000000000039280 <aarch64_ins_sve_float_half_two@@Base>:
   39280:	stp	x29, x30, [sp, #-16]!
   39284:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39288:	ldr	w9, [x0, #20]
   3928c:	ldr	x11, [x1, #16]
   39290:	ldr	x10, [x10, #3944]
   39294:	mov	w12, #0x3f000000            	// #1056964608
   39298:	mov	x29, sp
   3929c:	cmp	x11, x12
   392a0:	add	x8, x10, x9, lsl #3
   392a4:	ldr	w8, [x8, #4]
   392a8:	sub	w11, w8, #0x1
   392ac:	b.ne	392d4 <aarch64_ins_sve_float_half_two@@Base+0x54>  // b.any
   392b0:	cmp	w11, #0x1e
   392b4:	b.hi	39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.pmore
   392b8:	lsl	x9, x9, #3
   392bc:	ldr	w9, [x10, x9]
   392c0:	tbnz	w9, #31, 39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>
   392c4:	add	w8, w9, w8
   392c8:	cmp	w8, #0x21
   392cc:	b.lt	39314 <aarch64_ins_sve_float_half_two@@Base+0x94>  // b.tstop
   392d0:	b	39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>
   392d4:	cmp	w11, #0x1e
   392d8:	b.hi	39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.pmore
   392dc:	lsl	x9, x9, #3
   392e0:	ldr	w9, [x10, x9]
   392e4:	tbnz	w9, #31, 39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>
   392e8:	add	w10, w9, w8
   392ec:	cmp	w10, #0x21
   392f0:	b.ge	39320 <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.tcont
   392f4:	mov	w10, #0xffffffff            	// #-1
   392f8:	lsl	w8, w10, w8
   392fc:	ldr	w10, [x2]
   39300:	mvn	w8, w8
   39304:	and	w8, w8, #0x1
   39308:	lsl	w8, w8, w9
   3930c:	orr	w8, w10, w8
   39310:	str	w8, [x2]
   39314:	mov	w0, #0x1                   	// #1
   39318:	ldp	x29, x30, [sp], #16
   3931c:	ret
   39320:	adrp	x0, 54000 <xexit@@Base+0x84c>
   39324:	adrp	x1, 54000 <xexit@@Base+0x84c>
   39328:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3932c:	add	x0, x0, #0x553
   39330:	add	x1, x1, #0x5b0
   39334:	add	x3, x3, #0x5cc
   39338:	mov	w2, #0x16a                 	// #362
   3933c:	bl	35b90 <__assert_fail@plt>

0000000000039340 <aarch64_ins_sve_float_zero_one@@Base>:
   39340:	stp	x29, x30, [sp, #-16]!
   39344:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39348:	ldr	w9, [x0, #20]
   3934c:	ldr	x12, [x1, #16]
   39350:	ldr	x10, [x10, #3944]
   39354:	mov	x29, sp
   39358:	add	x8, x10, x9, lsl #3
   3935c:	ldr	w8, [x8, #4]
   39360:	sub	w11, w8, #0x1
   39364:	cmp	w11, #0x1e
   39368:	cbz	x12, 393ac <aarch64_ins_sve_float_zero_one@@Base+0x6c>
   3936c:	b.hi	393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.pmore
   39370:	lsl	x9, x9, #3
   39374:	ldr	w9, [x10, x9]
   39378:	tbnz	w9, #31, 393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>
   3937c:	add	w10, w9, w8
   39380:	cmp	w10, #0x21
   39384:	b.ge	393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.tcont
   39388:	mov	w10, #0xffffffff            	// #-1
   3938c:	lsl	w8, w10, w8
   39390:	ldr	w10, [x2]
   39394:	mvn	w8, w8
   39398:	and	w8, w8, #0x1
   3939c:	lsl	w8, w8, w9
   393a0:	orr	w8, w10, w8
   393a4:	str	w8, [x2]
   393a8:	b	393c8 <aarch64_ins_sve_float_zero_one@@Base+0x88>
   393ac:	b.hi	393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.pmore
   393b0:	lsl	x9, x9, #3
   393b4:	ldr	w9, [x10, x9]
   393b8:	tbnz	w9, #31, 393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>
   393bc:	add	w8, w9, w8
   393c0:	cmp	w8, #0x21
   393c4:	b.ge	393d4 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.tcont
   393c8:	mov	w0, #0x1                   	// #1
   393cc:	ldp	x29, x30, [sp], #16
   393d0:	ret
   393d4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   393d8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   393dc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   393e0:	add	x0, x0, #0x553
   393e4:	add	x1, x1, #0x5b0
   393e8:	add	x3, x3, #0x5cc
   393ec:	mov	w2, #0x16a                 	// #362
   393f0:	bl	35b90 <__assert_fail@plt>

00000000000393f4 <aarch64_opcode_encode@@Base>:
   393f4:	sub	sp, sp, #0x1d0
   393f8:	stp	x22, x21, [sp, #432]
   393fc:	stp	x20, x19, [sp, #448]
   39400:	mov	x19, x2
   39404:	mov	x22, x0
   39408:	mov	x0, sp
   3940c:	mov	w2, #0x168                 	// #360
   39410:	stp	x29, x30, [sp, #368]
   39414:	stp	x28, x27, [sp, #384]
   39418:	stp	x26, x25, [sp, #400]
   3941c:	stp	x24, x23, [sp, #416]
   39420:	add	x29, sp, #0x170
   39424:	mov	x20, x5
   39428:	mov	x21, x4
   3942c:	mov	x23, x3
   39430:	bl	35140 <memcpy@plt>
   39434:	ldr	x8, [sp, #8]
   39438:	cbz	x8, 39444 <aarch64_opcode_encode@@Base+0x50>
   3943c:	cmp	x8, x22
   39440:	b.ne	3a534 <aarch64_opcode_encode@@Base+0x1140>  // b.any
   39444:	cbnz	x8, 3944c <aarch64_opcode_encode@@Base+0x58>
   39448:	str	x22, [sp, #8]
   3944c:	mov	x0, sp
   39450:	mov	x1, x21
   39454:	bl	355c0 <aarch64_match_operands_constraint@plt>
   39458:	cbz	w0, 3a258 <aarch64_opcode_encode@@Base+0xe64>
   3945c:	ldr	w8, [x22, #8]
   39460:	mov	x0, x22
   39464:	str	w8, [sp]
   39468:	bl	35260 <aarch64_num_of_operands@plt>
   3946c:	cbz	w0, 3a24c <aarch64_opcode_encode@@Base+0xe58>
   39470:	mov	x10, sp
   39474:	mov	x8, xzr
   39478:	mov	x24, sp
   3947c:	add	x9, x22, #0x20
   39480:	add	x10, x10, #0x20
   39484:	ldr	w11, [x9, x8, lsl #2]
   39488:	ldur	w12, [x10, #-8]
   3948c:	cmp	w11, w12
   39490:	b.ne	3a4f4 <aarch64_opcode_encode@@Base+0x1100>  // b.any
   39494:	str	w8, [x10]
   39498:	cbz	x23, 394a4 <aarch64_opcode_encode@@Base+0xb0>
   3949c:	ldurb	w11, [x10, #-4]
   394a0:	strb	w11, [x23]
   394a4:	add	x8, x8, #0x1
   394a8:	cmp	x8, #0x6
   394ac:	add	x10, x10, #0x38
   394b0:	b.ne	39484 <aarch64_opcode_encode@@Base+0x90>  // b.any
   394b4:	mov	x0, x22
   394b8:	bl	353e0 <aarch64_find_real_opcode@plt>
   394bc:	cbz	x0, 394e8 <aarch64_opcode_encode@@Base+0xf4>
   394c0:	ldrb	w8, [x22, #122]
   394c4:	tbz	w8, #4, 394e8 <aarch64_opcode_encode@@Base+0xf4>
   394c8:	ldr	x8, [sp, #8]
   394cc:	mov	x23, x0
   394d0:	ldrb	w9, [x8, #122]
   394d4:	tbnz	w9, #4, 395d8 <aarch64_opcode_encode@@Base+0x1e4>
   394d8:	mov	x0, sp
   394dc:	mov	x1, x23
   394e0:	bl	354f0 <aarch64_replace_opcode@plt>
   394e4:	mov	x22, x23
   394e8:	adrp	x27, 96000 <aarch64_operands@@Base+0x16c38>
   394ec:	ldr	x27, [x27, #4032]
   394f0:	mov	x23, xzr
   394f4:	add	x24, x22, #0x20
   394f8:	mov	x25, sp
   394fc:	mov	w26, #0x30                  	// #48
   39500:	ldr	w8, [x24]
   39504:	cbz	w8, 3954c <aarch64_opcode_encode@@Base+0x158>
   39508:	add	x9, x25, x23
   3950c:	ldrb	w10, [x9, #72]
   39510:	tbnz	w10, #0, 3953c <aarch64_opcode_encode@@Base+0x148>
   39514:	madd	x10, x8, x26, x27
   39518:	ldrb	w10, [x10, #16]
   3951c:	tbz	w10, #0, 3953c <aarch64_opcode_encode@@Base+0x148>
   39520:	add	x1, x9, #0x18
   39524:	madd	x0, x8, x26, x27
   39528:	mov	x2, sp
   3952c:	mov	x3, sp
   39530:	mov	x4, x21
   39534:	bl	35a50 <aarch64_insert_operand@plt>
   39538:	cbz	w0, 3a258 <aarch64_opcode_encode@@Base+0xe64>
   3953c:	add	x23, x23, #0x38
   39540:	cmp	x23, #0x150
   39544:	add	x24, x24, #0x4
   39548:	b.ne	39500 <aarch64_opcode_encode@@Base+0x10c>  // b.any
   3954c:	ldr	w8, [x22, #120]
   39550:	mov	w9, #0xff0                 	// #4080
   39554:	movk	w9, #0x8c0, lsl #16
   39558:	tst	w8, w9
   3955c:	b.eq	39fa8 <aarch64_opcode_encode@@Base+0xbb4>  // b.none
   39560:	ldr	x23, [sp, #8]
   39564:	ldr	x8, [x23, #120]
   39568:	tbz	w8, #4, 395bc <aarch64_opcode_encode@@Base+0x1c8>
   3956c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39570:	ldr	x10, [x10, #3944]
   39574:	ldr	w9, [x10, #12]
   39578:	sub	w11, w9, #0x1
   3957c:	cmp	w11, #0x1e
   39580:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39584:	ldr	w10, [x10, #8]
   39588:	tbnz	w10, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   3958c:	add	w11, w10, w9
   39590:	cmp	w11, #0x21
   39594:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39598:	ldr	x11, [sp, #16]
   3959c:	mov	w12, #0xffffffff            	// #-1
   395a0:	ldr	w13, [sp]
   395a4:	lsl	w9, w12, w9
   395a8:	ldr	w11, [x11, #32]
   395ac:	bic	w9, w11, w9
   395b0:	lsl	w9, w9, w10
   395b4:	orr	w9, w13, w9
   395b8:	str	w9, [sp]
   395bc:	tbz	w8, #5, 396e0 <aarch64_opcode_encode@@Base+0x2ec>
   395c0:	ldr	w0, [x23, #32]
   395c4:	bl	357f0 <aarch64_get_operand_class@plt>
   395c8:	cmp	w0, #0x1
   395cc:	b.ne	39610 <aarch64_opcode_encode@@Base+0x21c>  // b.any
   395d0:	mov	x8, xzr
   395d4:	b	39624 <aarch64_opcode_encode@@Base+0x230>
   395d8:	ldr	w8, [x8, #20]
   395dc:	sub	w9, w8, #0x23
   395e0:	cmp	w9, #0x21
   395e4:	b.hi	394d8 <aarch64_opcode_encode@@Base+0xe4>  // b.pmore
   395e8:	adrp	x10, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   395ec:	add	x10, x10, #0x848
   395f0:	adr	x11, 394d8 <aarch64_opcode_encode@@Base+0xe4>
   395f4:	ldrh	w12, [x10, x9, lsl #1]
   395f8:	add	x11, x11, x12, lsl #2
   395fc:	br	x11
   39600:	ldrb	w8, [sp, #84]
   39604:	str	xzr, [sp, #152]
   39608:	strb	w8, [sp, #140]
   3960c:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   39610:	ldr	w0, [x23, #36]
   39614:	bl	357f0 <aarch64_get_operand_class@plt>
   39618:	cmp	w0, #0x1
   3961c:	b.ne	3a574 <aarch64_opcode_encode@@Base+0x1180>  // b.any
   39620:	mov	w8, #0x1                   	// #1
   39624:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39628:	ldr	x9, [x9, #3944]
   3962c:	mov	w10, #0x38                  	// #56
   39630:	mov	x11, sp
   39634:	madd	x10, x8, x10, x11
   39638:	ldrb	w11, [x10, #28]
   3963c:	ldr	w8, [x9, #476]
   39640:	cmp	w11, #0x2
   39644:	sub	w13, w8, #0x1
   39648:	cset	w10, eq  // eq = none
   3964c:	cmp	w11, #0x4
   39650:	cset	w12, eq  // eq = none
   39654:	cmp	w13, #0x1e
   39658:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3965c:	ldr	w11, [x9, #472]
   39660:	tbnz	w11, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39664:	add	w13, w11, w8
   39668:	cmp	w13, #0x21
   3966c:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39670:	orr	w10, w10, w12
   39674:	mov	w12, #0xffffffff            	// #-1
   39678:	ldr	w13, [sp]
   3967c:	lsl	w8, w12, w8
   39680:	bic	w8, w10, w8
   39684:	ldr	x23, [sp, #8]
   39688:	lsl	w8, w8, w11
   3968c:	orr	w11, w13, w8
   39690:	str	w11, [sp]
   39694:	ldr	x8, [x23, #120]
   39698:	tbz	w8, #23, 396e0 <aarch64_opcode_encode@@Base+0x2ec>
   3969c:	ldr	w12, [x9, #452]
   396a0:	sub	w13, w12, #0x1
   396a4:	cmp	w13, #0x1e
   396a8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   396ac:	ldr	w9, [x9, #448]
   396b0:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   396b4:	add	w13, w9, w12
   396b8:	cmp	w13, #0x21
   396bc:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   396c0:	ldr	w13, [x23, #12]
   396c4:	mov	w14, #0xffffffff            	// #-1
   396c8:	lsl	w12, w14, w12
   396cc:	bic	w10, w10, w12
   396d0:	lsl	w9, w10, w9
   396d4:	bic	w9, w9, w13
   396d8:	orr	w9, w9, w11
   396dc:	str	w9, [sp]
   396e0:	tbz	w8, #27, 39784 <aarch64_opcode_encode@@Base+0x390>
   396e4:	ldr	w0, [x23, #32]
   396e8:	bl	357f0 <aarch64_get_operand_class@plt>
   396ec:	cmp	w0, #0x1
   396f0:	b.ne	396fc <aarch64_opcode_encode@@Base+0x308>  // b.any
   396f4:	mov	x8, xzr
   396f8:	b	39710 <aarch64_opcode_encode@@Base+0x31c>
   396fc:	ldr	w0, [x23, #36]
   39700:	bl	357f0 <aarch64_get_operand_class@plt>
   39704:	cmp	w0, #0x1
   39708:	b.ne	3a574 <aarch64_opcode_encode@@Base+0x1180>  // b.any
   3970c:	mov	w8, #0x1                   	// #1
   39710:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39714:	ldr	x9, [x9, #3944]
   39718:	mov	w10, #0x38                  	// #56
   3971c:	mov	x11, sp
   39720:	madd	x10, x8, x10, x11
   39724:	ldrb	w11, [x10, #28]
   39728:	ldr	w8, [x9, #484]
   3972c:	cmp	w11, #0x2
   39730:	sub	w12, w8, #0x1
   39734:	cset	w10, eq  // eq = none
   39738:	cmp	w11, #0x4
   3973c:	cset	w11, eq  // eq = none
   39740:	cmp	w12, #0x1e
   39744:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39748:	ldr	w9, [x9, #480]
   3974c:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39750:	add	w12, w9, w8
   39754:	cmp	w12, #0x21
   39758:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   3975c:	orr	w10, w10, w11
   39760:	mov	w11, #0xffffffff            	// #-1
   39764:	ldr	w12, [sp]
   39768:	lsl	w8, w11, w8
   3976c:	bic	w8, w10, w8
   39770:	ldr	x23, [sp, #8]
   39774:	lsl	w8, w8, w9
   39778:	orr	w8, w12, w8
   3977c:	str	w8, [sp]
   39780:	ldr	x8, [x23, #120]
   39784:	tbz	w8, #6, 39864 <aarch64_opcode_encode@@Base+0x470>
   39788:	mov	x0, x23
   3978c:	bl	35880 <aarch64_select_operand_for_sizeq_field_coding@plt>
   39790:	mov	w8, #0x38                  	// #56
   39794:	mov	x9, sp
   39798:	smaddl	x8, w0, w8, x9
   3979c:	ldrb	w0, [x8, #28]
   397a0:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   397a4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   397a8:	ldr	x8, [x8, #3944]
   397ac:	ldr	w9, [x8, #92]
   397b0:	sub	w10, w9, #0x1
   397b4:	cmp	w10, #0x1e
   397b8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   397bc:	ldr	w11, [x8, #88]
   397c0:	tbnz	w11, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   397c4:	add	w10, w11, w9
   397c8:	cmp	w10, #0x21
   397cc:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   397d0:	ldr	x23, [sp, #8]
   397d4:	mov	w10, #0xffffffff            	// #-1
   397d8:	lsl	w9, w10, w9
   397dc:	and	w12, w0, #0x1
   397e0:	ldr	w10, [x23, #12]
   397e4:	ldr	w13, [sp]
   397e8:	bic	w9, w12, w9
   397ec:	lsl	w9, w9, w11
   397f0:	bic	w9, w9, w10
   397f4:	orr	w9, w13, w9
   397f8:	str	w9, [sp]
   397fc:	ldr	w11, [x23, #16]
   39800:	sub	w11, w11, #0x12
   39804:	cmp	w11, #0x4
   39808:	mov	w11, #0x8                   	// #8
   3980c:	cinc	x12, x11, cc  // cc = lo, ul, last
   39810:	add	x11, x8, x12, lsl #3
   39814:	ldr	w11, [x11, #4]
   39818:	sub	w13, w11, #0x1
   3981c:	cmp	w13, #0x1e
   39820:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39824:	lsl	x12, x12, #3
   39828:	ldr	w8, [x8, x12]
   3982c:	tbnz	w8, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39830:	add	w12, w8, w11
   39834:	cmp	w12, #0x21
   39838:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   3983c:	mov	w13, #0xffffffff            	// #-1
   39840:	ubfx	w12, w0, #1, #2
   39844:	lsl	w11, w13, w11
   39848:	bic	w11, w12, w11
   3984c:	mvn	w10, w10
   39850:	lsl	w8, w11, w8
   39854:	and	w8, w8, w10
   39858:	orr	w8, w8, w9
   3985c:	str	w8, [sp]
   39860:	ldr	x8, [x23, #120]
   39864:	tbz	w8, #7, 39910 <aarch64_opcode_encode@@Base+0x51c>
   39868:	ldr	w0, [x23, #36]
   3986c:	bl	357f0 <aarch64_get_operand_class@plt>
   39870:	cmp	w0, #0x3
   39874:	b.ne	39880 <aarch64_opcode_encode@@Base+0x48c>  // b.any
   39878:	mov	w8, #0x1                   	// #1
   3987c:	b	39894 <aarch64_opcode_encode@@Base+0x4a0>
   39880:	ldr	w0, [x23, #32]
   39884:	bl	357f0 <aarch64_get_operand_class@plt>
   39888:	cmp	w0, #0x3
   3988c:	b.ne	3a674 <aarch64_opcode_encode@@Base+0x1280>  // b.any
   39890:	mov	x8, xzr
   39894:	mov	w9, #0x38                  	// #56
   39898:	mov	x10, sp
   3989c:	madd	x8, x8, x9, x10
   398a0:	ldrb	w8, [x8, #28]
   398a4:	sub	w9, w8, #0x6
   398a8:	cmp	w9, #0x3
   398ac:	b.cs	3a594 <aarch64_opcode_encode@@Base+0x11a0>  // b.hs, b.nlast
   398b0:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   398b4:	ldr	x10, [x10, #3944]
   398b8:	ldr	w8, [x10, #292]
   398bc:	sub	w11, w8, #0x1
   398c0:	cmp	w11, #0x1e
   398c4:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   398c8:	ldr	w10, [x10, #288]
   398cc:	tbnz	w10, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   398d0:	add	w11, w10, w8
   398d4:	cmp	w11, #0x21
   398d8:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   398dc:	adrp	x11, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   398e0:	sxtb	x9, w9
   398e4:	add	x11, x11, #0x8b8
   398e8:	ldr	w9, [x11, x9, lsl #2]
   398ec:	mov	w11, #0xffffffff            	// #-1
   398f0:	ldr	w12, [sp]
   398f4:	lsl	w8, w11, w8
   398f8:	bic	w8, w9, w8
   398fc:	ldr	x23, [sp, #8]
   39900:	lsl	w8, w8, w10
   39904:	orr	w8, w12, w8
   39908:	str	w8, [sp]
   3990c:	ldr	x8, [x23, #120]
   39910:	tbz	w8, #8, 399f4 <aarch64_opcode_encode@@Base+0x600>
   39914:	ldr	w0, [x23, #32]
   39918:	bl	357f0 <aarch64_get_operand_class@plt>
   3991c:	cmp	w0, #0x6
   39920:	b.ne	39934 <aarch64_opcode_encode@@Base+0x540>  // b.any
   39924:	ldrb	w0, [x23, #56]
   39928:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3992c:	and	w24, w0, #0xff
   39930:	b	39938 <aarch64_opcode_encode@@Base+0x544>
   39934:	mov	w24, wzr
   39938:	ldr	w0, [x23, #36]
   3993c:	bl	357f0 <aarch64_get_operand_class@plt>
   39940:	cmp	w0, #0x6
   39944:	b.ne	39958 <aarch64_opcode_encode@@Base+0x564>  // b.any
   39948:	ldrb	w0, [x23, #57]
   3994c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   39950:	and	w8, w0, #0xff
   39954:	b	3995c <aarch64_opcode_encode@@Base+0x568>
   39958:	mov	w8, wzr
   3995c:	cmp	w8, w24
   39960:	b.ne	39968 <aarch64_opcode_encode@@Base+0x574>  // b.any
   39964:	cbz	w8, 3a5b4 <aarch64_opcode_encode@@Base+0x11c0>
   39968:	cmp	w24, #0x0
   3996c:	cset	w10, eq  // eq = none
   39970:	cmp	w24, w8, lsl #1
   39974:	cset	w8, eq  // eq = none
   39978:	mov	w9, #0x38                  	// #56
   3997c:	orr	w8, w10, w8
   39980:	mov	x10, sp
   39984:	umaddl	x8, w8, w9, x10
   39988:	ldrb	w0, [x8, #28]
   3998c:	sub	w8, w0, #0x5
   39990:	cmp	w8, #0x5
   39994:	b.cs	3a5d4 <aarch64_opcode_encode@@Base+0x11e0>  // b.hs, b.nlast
   39998:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3999c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   399a0:	ldr	x9, [x9, #3944]
   399a4:	ldr	w8, [x9, #68]
   399a8:	sub	w10, w8, #0x1
   399ac:	cmp	w10, #0x1e
   399b0:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   399b4:	ldr	w9, [x9, #64]
   399b8:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   399bc:	add	w10, w9, w8
   399c0:	cmp	w10, #0x21
   399c4:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   399c8:	ldr	x23, [sp, #8]
   399cc:	mov	w10, #0xffffffff            	// #-1
   399d0:	lsl	w8, w10, w8
   399d4:	ldr	w10, [sp]
   399d8:	ldr	w11, [x23, #12]
   399dc:	bic	w8, w0, w8
   399e0:	lsl	w8, w8, w9
   399e4:	bic	w8, w8, w11
   399e8:	orr	w8, w10, w8
   399ec:	str	w8, [sp]
   399f0:	ldr	x8, [x23, #120]
   399f4:	tbz	w8, #9, 39adc <aarch64_opcode_encode@@Base+0x6e8>
   399f8:	ldr	w0, [x23, #32]
   399fc:	ldrb	w24, [sp, #28]
   39a00:	bl	357f0 <aarch64_get_operand_class@plt>
   39a04:	sub	w8, w24, #0xd
   39a08:	cmp	w8, #0x8
   39a0c:	b.hi	3a554 <aarch64_opcode_encode@@Base+0x1160>  // b.pmore
   39a10:	cmp	w0, #0x4
   39a14:	b.ne	3a554 <aarch64_opcode_encode@@Base+0x1160>  // b.any
   39a18:	mov	w0, w24
   39a1c:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   39a20:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   39a24:	ldr	x8, [x8, #3944]
   39a28:	ldr	w9, [x8, #92]
   39a2c:	sub	w10, w9, #0x1
   39a30:	cmp	w10, #0x1e
   39a34:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39a38:	ldr	w11, [x8, #88]
   39a3c:	tbnz	w11, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39a40:	add	w10, w11, w9
   39a44:	cmp	w10, #0x21
   39a48:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39a4c:	ldr	x23, [sp, #8]
   39a50:	mov	w13, #0xffffffff            	// #-1
   39a54:	and	w12, w0, #0x1
   39a58:	ldr	w14, [sp]
   39a5c:	ldr	w10, [x23, #12]
   39a60:	lsl	w9, w13, w9
   39a64:	bic	w9, w12, w9
   39a68:	lsl	w9, w9, w11
   39a6c:	bic	w9, w9, w10
   39a70:	orr	w9, w14, w9
   39a74:	cmp	w0, #0x8
   39a78:	str	w9, [sp]
   39a7c:	b.cs	3a5f4 <aarch64_opcode_encode@@Base+0x1200>  // b.hs, b.nlast
   39a80:	ldr	w12, [x8, #348]
   39a84:	asr	w11, w0, #1
   39a88:	cmp	w11, w12
   39a8c:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39a90:	cmp	w11, #0x1e
   39a94:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39a98:	ldr	w8, [x8, #344]
   39a9c:	tbnz	w8, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39aa0:	add	w12, w11, #0x1
   39aa4:	add	w13, w8, w12
   39aa8:	cmp	w13, #0x21
   39aac:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39ab0:	mov	w13, #0x1                   	// #1
   39ab4:	mov	w14, #0xffffffff            	// #-1
   39ab8:	lsl	w11, w13, w11
   39abc:	lsl	w12, w14, w12
   39ac0:	bic	w11, w11, w12
   39ac4:	mvn	w10, w10
   39ac8:	lsl	w8, w11, w8
   39acc:	and	w8, w8, w10
   39ad0:	orr	w8, w8, w9
   39ad4:	str	w8, [sp]
   39ad8:	ldr	x8, [x23, #120]
   39adc:	tbz	w8, #10, 39b7c <aarch64_opcode_encode@@Base+0x788>
   39ae0:	add	x0, x23, #0x20
   39ae4:	mov	w1, #0x4                   	// #4
   39ae8:	bl	351f0 <aarch64_operand_index@plt>
   39aec:	cmn	w0, #0x1
   39af0:	csel	w23, wzr, w0, eq  // eq = none
   39af4:	cmp	w23, #0x2
   39af8:	b.cs	3a614 <aarch64_opcode_encode@@Base+0x1220>  // b.hs, b.nlast
   39afc:	ldr	x8, [sp, #8]
   39b00:	add	x8, x8, w23, uxtw #2
   39b04:	ldr	w0, [x8, #32]
   39b08:	bl	357f0 <aarch64_get_operand_class@plt>
   39b0c:	cmp	w0, #0x1
   39b10:	b.ne	3a634 <aarch64_opcode_encode@@Base+0x1240>  // b.any
   39b14:	mov	w8, w23
   39b18:	mov	w9, #0x38                  	// #56
   39b1c:	mov	x10, sp
   39b20:	madd	x8, x8, x9, x10
   39b24:	ldrb	w0, [x8, #28]
   39b28:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   39b2c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39b30:	ldr	x9, [x9, #3944]
   39b34:	ldr	w8, [x9, #92]
   39b38:	sub	w10, w8, #0x1
   39b3c:	cmp	w10, #0x1e
   39b40:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39b44:	ldr	w9, [x9, #88]
   39b48:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39b4c:	add	w10, w9, w8
   39b50:	cmp	w10, #0x21
   39b54:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39b58:	mov	w10, #0xffffffff            	// #-1
   39b5c:	ldr	w11, [sp]
   39b60:	lsl	w8, w10, w8
   39b64:	bic	w8, w0, w8
   39b68:	ldr	x23, [sp, #8]
   39b6c:	lsl	w8, w8, w9
   39b70:	orr	w8, w11, w8
   39b74:	str	w8, [sp]
   39b78:	ldr	x8, [x23, #120]
   39b7c:	tbz	w8, #11, 39c08 <aarch64_opcode_encode@@Base+0x814>
   39b80:	ldr	w0, [x23, #32]
   39b84:	bl	357f0 <aarch64_get_operand_class@plt>
   39b88:	cmp	w0, #0x1
   39b8c:	b.ne	3a654 <aarch64_opcode_encode@@Base+0x1260>  // b.any
   39b90:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   39b94:	ldr	x8, [x8, #3944]
   39b98:	ldr	w9, [x8, #268]
   39b9c:	cmp	w9, #0x1
   39ba0:	b.lt	39bb0 <aarch64_opcode_encode@@Base+0x7bc>  // b.tstop
   39ba4:	ldr	w24, [x8, #264]
   39ba8:	mov	w23, #0x1                   	// #1
   39bac:	b	39bb8 <aarch64_opcode_encode@@Base+0x7c4>
   39bb0:	mov	w23, wzr
   39bb4:	mov	w24, wzr
   39bb8:	ldrb	w0, [sp, #28]
   39bbc:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   39bc0:	sub	w8, w23, #0x1
   39bc4:	cmp	w8, #0x1e
   39bc8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39bcc:	tbnz	w24, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39bd0:	add	w8, w24, w23
   39bd4:	cmp	w8, #0x21
   39bd8:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39bdc:	mov	w8, #0x1                   	// #1
   39be0:	mov	w9, #0xffffffff            	// #-1
   39be4:	ldr	w10, [sp]
   39be8:	sub	w8, w8, w0
   39bec:	lsl	w9, w9, w23
   39bf0:	bic	w8, w8, w9
   39bf4:	ldr	x23, [sp, #8]
   39bf8:	lsl	w8, w8, w24
   39bfc:	orr	w8, w10, w8
   39c00:	str	w8, [sp]
   39c04:	ldr	x8, [x23, #120]
   39c08:	tbz	w8, #22, 39fa8 <aarch64_opcode_encode@@Base+0xbb4>
   39c0c:	ldr	w8, [x23, #20]
   39c10:	sub	w8, w8, #0x3a
   39c14:	cmp	w8, #0x15
   39c18:	b.hi	39fa8 <aarch64_opcode_encode@@Base+0xbb4>  // b.pmore
   39c1c:	adrp	x9, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   39c20:	add	x9, x9, #0x88c
   39c24:	adr	x10, 39c34 <aarch64_opcode_encode@@Base+0x840>
   39c28:	ldrb	w11, [x9, x8]
   39c2c:	add	x10, x10, x11, lsl #2
   39c30:	br	x10
   39c34:	mov	x8, sp
   39c38:	add	x8, x8, #0x54
   39c3c:	b	39c48 <aarch64_opcode_encode@@Base+0x854>
   39c40:	mov	x8, sp
   39c44:	add	x8, x8, #0x1c
   39c48:	ldrb	w8, [x8]
   39c4c:	cmp	w8, #0x13
   39c50:	b.eq	39c5c <aarch64_opcode_encode@@Base+0x868>  // b.none
   39c54:	cmp	w8, #0x15
   39c58:	b.ne	3a694 <aarch64_opcode_encode@@Base+0x12a0>  // b.any
   39c5c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39c60:	ldr	x9, [x9, #3944]
   39c64:	cmp	w8, #0x13
   39c68:	cset	w8, ne  // ne = any
   39c6c:	ldr	w10, [x9, #68]
   39c70:	cmp	w10, #0x1
   39c74:	b.lt	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tstop
   39c78:	ldr	w9, [x9, #64]
   39c7c:	cmp	w9, #0x20
   39c80:	b.cs	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.hs, b.nlast
   39c84:	ldr	w10, [sp]
   39c88:	lsl	w8, w8, w9
   39c8c:	orr	w8, w10, w8
   39c90:	b	39fa4 <aarch64_opcode_encode@@Base+0xbb0>
   39c94:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   39c98:	ldr	x8, [x8, #3944]
   39c9c:	ldr	w10, [x8, #612]
   39ca0:	sub	w9, w10, #0x1
   39ca4:	cmp	w9, #0x1e
   39ca8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39cac:	ldr	w9, [x8, #608]
   39cb0:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39cb4:	add	w11, w9, w10
   39cb8:	cmp	w11, #0x21
   39cbc:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39cc0:	ldr	w12, [sp]
   39cc4:	ldr	w11, [x8, #616]
   39cc8:	ldr	w13, [x8, #620]
   39ccc:	mov	w15, #0xffffffff            	// #-1
   39cd0:	mov	w14, #0xffffffff            	// #-1
   39cd4:	lsl	w15, w15, w10
   39cd8:	ldr	w10, [x8, #596]
   39cdc:	lsl	w13, w14, w13
   39ce0:	lsr	w11, w12, w11
   39ce4:	bic	w11, w11, w13
   39ce8:	bic	w14, w11, w15
   39cec:	sub	w13, w10, #0x1
   39cf0:	lsl	w9, w14, w9
   39cf4:	orr	w9, w9, w12
   39cf8:	cmp	w13, #0x1e
   39cfc:	str	w9, [sp]
   39d00:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39d04:	ldr	w8, [x8, #592]
   39d08:	tbnz	w8, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39d0c:	add	w12, w8, w10
   39d10:	cmp	w12, #0x21
   39d14:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39d18:	mov	w12, #0xffffffff            	// #-1
   39d1c:	lsl	w10, w12, w10
   39d20:	bic	w10, w11, w10
   39d24:	lsl	w8, w10, w8
   39d28:	orr	w8, w8, w9
   39d2c:	b	39fa4 <aarch64_opcode_encode@@Base+0xbb0>
   39d30:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39d34:	ldr	x10, [x10, #3944]
   39d38:	ldr	w8, [x10, #612]
   39d3c:	sub	w9, w8, #0x1
   39d40:	cmp	w9, #0x1e
   39d44:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39d48:	ldr	w9, [x10, #608]
   39d4c:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39d50:	add	w11, w9, w8
   39d54:	cmp	w11, #0x21
   39d58:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39d5c:	ldr	w11, [sp]
   39d60:	ldr	w12, [x10, #616]
   39d64:	ldr	w10, [x10, #620]
   39d68:	b	39f80 <aarch64_opcode_encode@@Base+0xb8c>
   39d6c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39d70:	ldr	x10, [x10, #3944]
   39d74:	ldr	w8, [x10, #612]
   39d78:	sub	w9, w8, #0x1
   39d7c:	cmp	w9, #0x1e
   39d80:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39d84:	ldr	w9, [x10, #608]
   39d88:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39d8c:	add	w11, w9, w8
   39d90:	cmp	w11, #0x21
   39d94:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39d98:	ldr	w11, [sp]
   39d9c:	ldr	w12, [x10, #592]
   39da0:	ldr	w10, [x10, #596]
   39da4:	b	39f80 <aarch64_opcode_encode@@Base+0xb8c>
   39da8:	ldr	x8, [sp, #152]
   39dac:	ldr	x9, [sp, #208]
   39db0:	add	x8, x8, x9
   39db4:	sub	x8, x8, #0x1
   39db8:	b	3a4ec <aarch64_opcode_encode@@Base+0x10f8>
   39dbc:	ldur	q0, [x24, #136]
   39dc0:	ldr	x8, [sp, #184]
   39dc4:	str	q0, [sp, #192]
   39dc8:	ldur	q0, [x24, #152]
   39dcc:	str	q0, [sp, #208]
   39dd0:	ldur	q0, [x24, #168]
   39dd4:	str	x8, [sp, #240]
   39dd8:	mov	w8, #0x3                   	// #3
   39ddc:	str	w8, [sp, #200]
   39de0:	str	q0, [sp, #224]
   39de4:	ldr	q0, [sp, #80]
   39de8:	stur	q0, [x24, #136]
   39dec:	ldr	q0, [sp, #96]
   39df0:	stur	q0, [x24, #152]
   39df4:	ldr	q0, [sp, #112]
   39df8:	stur	q0, [x24, #168]
   39dfc:	ldr	x8, [sp, #128]
   39e00:	ldr	x0, [sp, #208]
   39e04:	str	x8, [sp, #184]
   39e08:	mov	w8, #0x2                   	// #2
   39e0c:	str	w8, [sp, #144]
   39e10:	b	3a2f4 <aarch64_opcode_encode@@Base+0xf00>
   39e14:	ldrb	w10, [sp, #140]
   39e18:	ldr	x8, [sp, #152]
   39e1c:	ldr	x9, [sp, #208]
   39e20:	mov	w11, #0x3f                  	// #63
   39e24:	mov	w12, #0x1f                  	// #31
   39e28:	cmp	w10, #0x1d
   39e2c:	neg	x8, x8
   39e30:	sub	x9, x9, #0x1
   39e34:	csel	x10, x12, x11, eq  // eq = none
   39e38:	b	3a3cc <aarch64_opcode_encode@@Base+0xfd8>
   39e3c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39e40:	ldr	x10, [x10, #3944]
   39e44:	ldr	w8, [x10, #708]
   39e48:	sub	w9, w8, #0x1
   39e4c:	cmp	w9, #0x1e
   39e50:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39e54:	ldr	w9, [x10, #704]
   39e58:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39e5c:	add	w11, w9, w8
   39e60:	cmp	w11, #0x21
   39e64:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39e68:	ldr	w11, [sp]
   39e6c:	ldr	w12, [x10, #712]
   39e70:	ldr	w10, [x10, #716]
   39e74:	b	39f80 <aarch64_opcode_encode@@Base+0xb8c>
   39e78:	ldrb	w8, [sp, #28]
   39e7c:	cmp	w8, #0x7
   39e80:	b.ne	3a6b4 <aarch64_opcode_encode@@Base+0x12c0>  // b.any
   39e84:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   39e88:	ldr	x8, [x8, #3944]
   39e8c:	ldr	w9, [x8, #68]
   39e90:	cmp	w9, #0x1
   39e94:	b.lt	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tstop
   39e98:	ldr	w8, [x8, #64]
   39e9c:	cmp	w8, #0x20
   39ea0:	b.cs	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.hs, b.nlast
   39ea4:	ldr	w9, [sp]
   39ea8:	mov	w10, #0x1                   	// #1
   39eac:	lsl	w8, w10, w8
   39eb0:	b	39f14 <aarch64_opcode_encode@@Base+0xb20>
   39eb4:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39eb8:	ldr	x10, [x10, #3944]
   39ebc:	ldr	w8, [x10, #612]
   39ec0:	sub	w9, w8, #0x1
   39ec4:	cmp	w9, #0x1e
   39ec8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39ecc:	ldr	w9, [x10, #608]
   39ed0:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39ed4:	add	w11, w9, w8
   39ed8:	cmp	w11, #0x21
   39edc:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39ee0:	ldr	w11, [sp]
   39ee4:	ldr	w12, [x10, #568]
   39ee8:	ldr	w10, [x10, #572]
   39eec:	b	39f80 <aarch64_opcode_encode@@Base+0xb8c>
   39ef0:	ldrb	w8, [sp, #28]
   39ef4:	sub	w8, w8, #0x6
   39ef8:	cmp	w8, #0x3
   39efc:	b.cs	3a6d4 <aarch64_opcode_encode@@Base+0x12e0>  // b.hs, b.nlast
   39f00:	adrp	x9, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   39f04:	sxtb	x8, w8
   39f08:	add	x9, x9, #0x8c4
   39f0c:	ldr	w8, [x9, x8, lsl #2]
   39f10:	ldr	w9, [sp]
   39f14:	orr	w8, w9, w8
   39f18:	b	39fa4 <aarch64_opcode_encode@@Base+0xbb0>
   39f1c:	mov	x0, sp
   39f20:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   39f24:	mov	w8, #0x1                   	// #1
   39f28:	lsl	w1, w8, w0
   39f2c:	mov	x0, sp
   39f30:	mov	w3, #0x2                   	// #2
   39f34:	mov	w4, #0x2b                  	// #43
   39f38:	mov	w5, #0x74                  	// #116
   39f3c:	mov	w2, wzr
   39f40:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   39f44:	b	39fa8 <aarch64_opcode_encode@@Base+0xbb4>
   39f48:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   39f4c:	ldr	x10, [x10, #3944]
   39f50:	ldr	w8, [x10, #708]
   39f54:	sub	w9, w8, #0x1
   39f58:	cmp	w9, #0x1e
   39f5c:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39f60:	ldr	w9, [x10, #704]
   39f64:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   39f68:	add	w11, w9, w8
   39f6c:	cmp	w11, #0x21
   39f70:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   39f74:	ldr	w11, [sp]
   39f78:	ldr	w12, [x10, #688]
   39f7c:	ldr	w10, [x10, #692]
   39f80:	mov	w13, #0xffffffff            	// #-1
   39f84:	mov	w14, #0xffffffff            	// #-1
   39f88:	lsr	w12, w11, w12
   39f8c:	lsl	w10, w13, w10
   39f90:	bic	w10, w12, w10
   39f94:	lsl	w8, w14, w8
   39f98:	bic	w8, w10, w8
   39f9c:	lsl	w8, w8, w9
   39fa0:	orr	w8, w8, w11
   39fa4:	str	w8, [sp]
   39fa8:	ldr	x8, [sp, #8]
   39fac:	ldr	w8, [x8, #16]
   39fb0:	sub	w8, w8, #0x47
   39fb4:	cmp	w8, #0x12
   39fb8:	b.hi	3a1ec <aarch64_opcode_encode@@Base+0xdf8>  // b.pmore
   39fbc:	adrp	x9, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   39fc0:	add	x9, x9, #0x8a2
   39fc4:	adr	x10, 39fd4 <aarch64_opcode_encode@@Base+0xbe0>
   39fc8:	ldrb	w11, [x9, x8]
   39fcc:	add	x10, x10, x11, lsl #2
   39fd0:	br	x10
   39fd4:	mov	x0, sp
   39fd8:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   39fdc:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   39fe0:	ldr	x9, [x9, #3944]
   39fe4:	ldr	w8, [x9, #68]
   39fe8:	sub	w10, w8, #0x1
   39fec:	cmp	w10, #0x1e
   39ff0:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   39ff4:	ldr	w9, [x9, #64]
   39ff8:	tbz	w9, #31, 3a19c <aarch64_opcode_encode@@Base+0xda8>
   39ffc:	b	3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a000:	mov	x0, sp
   3a004:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a008:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a00c:	ldr	x9, [x9, #3944]
   3a010:	ldr	w8, [x9, #900]
   3a014:	sub	w10, w8, #0x1
   3a018:	cmp	w10, #0x1e
   3a01c:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a020:	ldr	w9, [x9, #896]
   3a024:	tbz	w9, #31, 3a19c <aarch64_opcode_encode@@Base+0xda8>
   3a028:	b	3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a02c:	mov	x0, sp
   3a030:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a034:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3a038:	ldr	x10, [x10, #3944]
   3a03c:	add	w9, w0, #0x1
   3a040:	cmp	w9, #0x2
   3a044:	mov	w9, #0x3                   	// #3
   3a048:	ldr	w8, [x10, #68]
   3a04c:	csinc	w9, w9, w0, eq  // eq = none
   3a050:	sub	w11, w8, #0x1
   3a054:	cmp	w11, #0x1e
   3a058:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a05c:	ldr	w10, [x10, #64]
   3a060:	tbnz	w10, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a064:	add	w11, w10, w8
   3a068:	cmp	w11, #0x21
   3a06c:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   3a070:	mov	w11, #0xffffffff            	// #-1
   3a074:	ldr	w12, [sp]
   3a078:	lsl	w8, w11, w8
   3a07c:	bic	w8, w9, w8
   3a080:	lsl	w8, w8, w10
   3a084:	b	3a150 <aarch64_opcode_encode@@Base+0xd5c>
   3a088:	mov	x0, sp
   3a08c:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a090:	mov	w8, #0x1                   	// #1
   3a094:	lsl	w1, w8, w0
   3a098:	mov	x0, sp
   3a09c:	mov	w3, #0x2                   	// #2
   3a0a0:	mov	w4, #0x76                  	// #118
   3a0a4:	mov	w5, #0x70                  	// #112
   3a0a8:	b	3a1e4 <aarch64_opcode_encode@@Base+0xdf0>
   3a0ac:	mov	x0, sp
   3a0b0:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a0b4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a0b8:	ldr	x9, [x9, #3944]
   3a0bc:	ldr	w8, [x9, #68]
   3a0c0:	sub	w10, w8, #0x1
   3a0c4:	cmp	w10, #0x1e
   3a0c8:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a0cc:	ldr	w9, [x9, #64]
   3a0d0:	tbz	w9, #31, 3a12c <aarch64_opcode_encode@@Base+0xd38>
   3a0d4:	b	3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a0d8:	mov	x0, sp
   3a0dc:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a0e0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a0e4:	ldr	x9, [x9, #3944]
   3a0e8:	ldr	w8, [x9, #540]
   3a0ec:	sub	w10, w8, #0x1
   3a0f0:	cmp	w10, #0x1e
   3a0f4:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a0f8:	ldr	w9, [x9, #536]
   3a0fc:	tbz	w9, #31, 3a19c <aarch64_opcode_encode@@Base+0xda8>
   3a100:	b	3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a104:	mov	x0, sp
   3a108:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a10c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a110:	ldr	x9, [x9, #3944]
   3a114:	ldr	w8, [x9, #908]
   3a118:	sub	w10, w8, #0x1
   3a11c:	cmp	w10, #0x1e
   3a120:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a124:	ldr	w9, [x9, #904]
   3a128:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a12c:	add	w10, w9, w8
   3a130:	cmp	w10, #0x21
   3a134:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   3a138:	mov	w11, #0xffffffff            	// #-1
   3a13c:	ldr	w12, [sp]
   3a140:	add	w10, w0, #0x1
   3a144:	lsl	w8, w11, w8
   3a148:	bic	w8, w10, w8
   3a14c:	lsl	w8, w8, w9
   3a150:	orr	w8, w12, w8
   3a154:	b	3a1c0 <aarch64_opcode_encode@@Base+0xdcc>
   3a158:	mov	x0, sp
   3a15c:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a160:	mov	w1, w0
   3a164:	mov	x0, sp
   3a168:	mov	w3, #0x2                   	// #2
   3a16c:	mov	w4, #0x44                  	// #68
   3a170:	b	3a1e0 <aarch64_opcode_encode@@Base+0xdec>
   3a174:	mov	x0, sp
   3a178:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a17c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a180:	ldr	x9, [x9, #3944]
   3a184:	ldr	w8, [x9, #916]
   3a188:	sub	w10, w8, #0x1
   3a18c:	cmp	w10, #0x1e
   3a190:	b.hi	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.pmore
   3a194:	ldr	w9, [x9, #912]
   3a198:	tbnz	w9, #31, 3a514 <aarch64_opcode_encode@@Base+0x1120>
   3a19c:	add	w10, w9, w8
   3a1a0:	cmp	w10, #0x21
   3a1a4:	b.ge	3a514 <aarch64_opcode_encode@@Base+0x1120>  // b.tcont
   3a1a8:	mov	w10, #0xffffffff            	// #-1
   3a1ac:	ldr	w11, [sp]
   3a1b0:	lsl	w8, w10, w8
   3a1b4:	bic	w8, w0, w8
   3a1b8:	lsl	w8, w8, w9
   3a1bc:	orr	w8, w11, w8
   3a1c0:	str	w8, [sp]
   3a1c4:	b	3a1ec <aarch64_opcode_encode@@Base+0xdf8>
   3a1c8:	mov	x0, sp
   3a1cc:	bl	3a718 <aarch64_opcode_encode@@Base+0x1324>
   3a1d0:	mov	w1, w0
   3a1d4:	mov	x0, sp
   3a1d8:	mov	w3, #0x2                   	// #2
   3a1dc:	mov	w4, #0x45                  	// #69
   3a1e0:	mov	w5, #0x8                   	// #8
   3a1e4:	mov	w2, wzr
   3a1e8:	bl	36568 <aarch64_ins_reglane@@Base+0x388>
   3a1ec:	ldr	x8, [x22, #136]
   3a1f0:	cbz	x8, 3a21c <aarch64_opcode_encode@@Base+0xe28>
   3a1f4:	ldr	w1, [x19]
   3a1f8:	mov	x0, sp
   3a1fc:	mov	w3, #0x1                   	// #1
   3a200:	mov	x2, xzr
   3a204:	mov	x4, x21
   3a208:	mov	x5, x20
   3a20c:	blr	x8
   3a210:	sub	w8, w0, #0x1
   3a214:	cmp	w8, #0x3
   3a218:	b.cc	3a244 <aarch64_opcode_encode@@Base+0xe50>  // b.lo, b.ul, b.last
   3a21c:	ldr	w1, [x19]
   3a220:	mov	x0, sp
   3a224:	mov	w3, #0x1                   	// #1
   3a228:	mov	x2, xzr
   3a22c:	mov	x4, x21
   3a230:	mov	x5, x20
   3a234:	bl	35340 <verify_constraints@plt>
   3a238:	sub	w8, w0, #0x1
   3a23c:	cmp	w8, #0x3
   3a240:	b.cs	3a24c <aarch64_opcode_encode@@Base+0xe58>  // b.hs, b.nlast
   3a244:	mov	w0, wzr
   3a248:	b	3a258 <aarch64_opcode_encode@@Base+0xe64>
   3a24c:	ldr	w8, [sp]
   3a250:	mov	w0, #0x1                   	// #1
   3a254:	str	w8, [x19]
   3a258:	ldp	x20, x19, [sp, #448]
   3a25c:	ldp	x22, x21, [sp, #432]
   3a260:	ldp	x24, x23, [sp, #416]
   3a264:	ldp	x26, x25, [sp, #400]
   3a268:	ldp	x28, x27, [sp, #384]
   3a26c:	ldp	x29, x30, [sp, #368]
   3a270:	add	sp, sp, #0x1d0
   3a274:	ret
   3a278:	ldp	q0, q1, [sp, #80]
   3a27c:	ldr	q2, [sp, #112]
   3a280:	ldr	x8, [sp, #128]
   3a284:	mov	w9, #0x3                   	// #3
   3a288:	stp	q0, q1, [sp, #192]
   3a28c:	ldur	q0, [sp, #24]
   3a290:	str	q2, [sp, #224]
   3a294:	str	x8, [sp, #240]
   3a298:	str	w9, [sp, #200]
   3a29c:	stur	q0, [x24, #136]
   3a2a0:	ldur	q0, [sp, #40]
   3a2a4:	mov	w9, #0x2                   	// #2
   3a2a8:	stur	q0, [x24, #152]
   3a2ac:	ldur	q0, [sp, #56]
   3a2b0:	stur	q0, [x24, #168]
   3a2b4:	ldr	x8, [sp, #72]
   3a2b8:	ldr	x10, [sp, #72]
   3a2bc:	ldur	q0, [sp, #24]
   3a2c0:	ldur	q1, [sp, #40]
   3a2c4:	ldur	q2, [sp, #56]
   3a2c8:	ldr	x0, [sp, #208]
   3a2cc:	str	x8, [sp, #184]
   3a2d0:	mov	w8, #0x1                   	// #1
   3a2d4:	str	x10, [sp, #128]
   3a2d8:	mov	w10, #0x1f                  	// #31
   3a2dc:	stp	q0, q1, [sp, #80]
   3a2e0:	str	w8, [sp, #88]
   3a2e4:	str	q2, [sp, #112]
   3a2e8:	str	w10, [sp, #96]
   3a2ec:	str	w9, [sp, #144]
   3a2f0:	str	w10, [sp, #152]
   3a2f4:	bl	35940 <get_inverted_cond@plt>
   3a2f8:	str	x0, [sp, #208]
   3a2fc:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a300:	cmp	w8, #0x25
   3a304:	b.eq	3a43c <aarch64_opcode_encode@@Base+0x1048>  // b.none
   3a308:	cmp	w8, #0x24
   3a30c:	b.ne	3a6d8 <aarch64_opcode_encode@@Base+0x12e4>  // b.any
   3a310:	ldr	x22, [sp, #96]
   3a314:	b	3a444 <aarch64_opcode_encode@@Base+0x1050>
   3a318:	ldrb	w8, [sp, #140]
   3a31c:	mov	w9, #0x3f                  	// #63
   3a320:	cmp	w8, #0x1d
   3a324:	mov	w8, #0x1f                  	// #31
   3a328:	csel	x8, x8, x9, eq  // eq = none
   3a32c:	b	3a4ec <aarch64_opcode_encode@@Base+0x10f8>
   3a330:	ldur	q0, [x24, #136]
   3a334:	ldr	x8, [sp, #184]
   3a338:	ldr	q1, [sp, #80]
   3a33c:	mov	w9, #0x3                   	// #3
   3a340:	str	q0, [sp, #192]
   3a344:	ldur	q0, [x24, #152]
   3a348:	mov	w11, #0x1f                  	// #31
   3a34c:	str	q0, [sp, #208]
   3a350:	ldur	q0, [x24, #168]
   3a354:	str	x8, [sp, #240]
   3a358:	str	w9, [sp, #200]
   3a35c:	mov	w8, #0x2                   	// #2
   3a360:	str	q0, [sp, #224]
   3a364:	stur	q1, [x24, #136]
   3a368:	ldr	q0, [sp, #96]
   3a36c:	mov	w9, #0x1                   	// #1
   3a370:	stur	q0, [x24, #152]
   3a374:	ldr	q0, [sp, #112]
   3a378:	stur	q0, [x24, #168]
   3a37c:	str	w8, [sp, #144]
   3a380:	ldr	x8, [sp, #72]
   3a384:	ldr	x10, [sp, #128]
   3a388:	ldur	q0, [sp, #24]
   3a38c:	ldur	q1, [sp, #40]
   3a390:	str	x8, [sp, #128]
   3a394:	ldrb	w8, [sp, #140]
   3a398:	ldur	q2, [sp, #56]
   3a39c:	stp	q0, q1, [sp, #80]
   3a3a0:	str	w9, [sp, #88]
   3a3a4:	cmp	w8, #0x1d
   3a3a8:	ldr	x8, [sp, #152]
   3a3ac:	ldr	x9, [sp, #208]
   3a3b0:	str	x10, [sp, #184]
   3a3b4:	mov	w10, #0x3f                  	// #63
   3a3b8:	str	q2, [sp, #112]
   3a3bc:	str	w11, [sp, #96]
   3a3c0:	neg	x8, x8
   3a3c4:	sub	x9, x9, #0x1
   3a3c8:	csel	x10, x11, x10, eq  // eq = none
   3a3cc:	and	x8, x10, x8
   3a3d0:	str	x8, [sp, #152]
   3a3d4:	str	x9, [sp, #208]
   3a3d8:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a3dc:	ldr	q0, [sp, #80]
   3a3e0:	mov	w8, #0x2                   	// #2
   3a3e4:	mov	w9, #0x1f                  	// #31
   3a3e8:	stur	q0, [x24, #136]
   3a3ec:	ldr	q0, [sp, #96]
   3a3f0:	stur	q0, [x24, #152]
   3a3f4:	ldr	q0, [sp, #112]
   3a3f8:	stur	q0, [x24, #168]
   3a3fc:	ldrb	w11, [sp, #128]
   3a400:	ldr	x10, [sp, #128]
   3a404:	str	w8, [sp, #144]
   3a408:	str	w9, [sp, #96]
   3a40c:	and	w8, w11, #0xfe
   3a410:	str	x10, [sp, #184]
   3a414:	strb	w8, [sp, #128]
   3a418:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a41c:	ldrb	w9, [sp, #140]
   3a420:	ldr	x8, [sp, #152]
   3a424:	cmp	w9, #0x1d
   3a428:	neg	x9, x8
   3a42c:	b.ne	3a4dc <aarch64_opcode_encode@@Base+0x10e8>  // b.any
   3a430:	and	x9, x9, #0x1f
   3a434:	mov	w10, #0x1f                  	// #31
   3a438:	b	3a4e4 <aarch64_opcode_encode@@Base+0x10f0>
   3a43c:	ldr	x8, [sp, #96]
   3a440:	mvn	x22, x8
   3a444:	ldrb	w8, [sp, #28]
   3a448:	mov	w9, #0x46                  	// #70
   3a44c:	sub	x2, x29, #0x4
   3a450:	mov	x0, x22
   3a454:	cmp	w8, #0x1
   3a458:	cset	w1, eq  // eq = none
   3a45c:	str	w9, [sp, #80]
   3a460:	bl	35b10 <aarch64_wide_constant_p@plt>
   3a464:	cbz	w0, 3a6f8 <aarch64_opcode_encode@@Base+0x1304>
   3a468:	ldur	w8, [x29, #-4]
   3a46c:	mov	w9, #0x5                   	// #5
   3a470:	str	w9, [sp, #112]
   3a474:	lsr	x9, x22, x8
   3a478:	and	x9, x9, #0xffff
   3a47c:	str	x9, [sp, #96]
   3a480:	str	x8, [sp, #120]
   3a484:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a488:	ldur	q0, [x24, #136]
   3a48c:	ldr	x8, [sp, #184]
   3a490:	str	q0, [sp, #192]
   3a494:	ldur	q0, [x24, #152]
   3a498:	str	q0, [sp, #208]
   3a49c:	ldur	q0, [x24, #168]
   3a4a0:	str	x8, [sp, #240]
   3a4a4:	mov	w8, #0x3                   	// #3
   3a4a8:	str	w8, [sp, #200]
   3a4ac:	str	q0, [sp, #224]
   3a4b0:	ldr	q0, [sp, #80]
   3a4b4:	stur	q0, [x24, #136]
   3a4b8:	ldr	q0, [sp, #96]
   3a4bc:	mov	w9, #0x2                   	// #2
   3a4c0:	stur	q0, [x24, #152]
   3a4c4:	ldr	q0, [sp, #112]
   3a4c8:	stur	q0, [x24, #168]
   3a4cc:	ldr	x8, [sp, #128]
   3a4d0:	str	w9, [sp, #144]
   3a4d4:	str	x8, [sp, #184]
   3a4d8:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a4dc:	and	x9, x9, #0x3f
   3a4e0:	mov	w10, #0x3f                  	// #63
   3a4e4:	sub	x8, x10, x8
   3a4e8:	str	x9, [sp, #152]
   3a4ec:	str	x8, [sp, #208]
   3a4f0:	b	394d8 <aarch64_opcode_encode@@Base+0xe4>
   3a4f4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a4f8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a4fc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a500:	add	x0, x0, #0x4d8
   3a504:	add	x1, x1, #0x8df
   3a508:	add	x3, x3, #0x431
   3a50c:	mov	w2, #0x7e5                 	// #2021
   3a510:	bl	35b90 <__assert_fail@plt>
   3a514:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a518:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a51c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a520:	add	x0, x0, #0x553
   3a524:	add	x1, x1, #0x5b0
   3a528:	add	x3, x3, #0x5cc
   3a52c:	mov	w2, #0x16a                 	// #362
   3a530:	bl	35b90 <__assert_fail@plt>
   3a534:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a538:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a53c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a540:	add	x0, x0, #0x402
   3a544:	add	x1, x1, #0x8df
   3a548:	add	x3, x3, #0x431
   3a54c:	mov	w2, #0x7cb                 	// #1995
   3a550:	bl	35b90 <__assert_fail@plt>
   3a554:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a558:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a55c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a560:	add	x0, x0, #0x7de
   3a564:	add	x1, x1, #0x8df
   3a568:	add	x3, x3, #0x767
   3a56c:	mov	w2, #0x614                 	// #1556
   3a570:	bl	35b90 <__assert_fail@plt>
   3a574:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a578:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a57c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a580:	add	x0, x0, #0x5dc
   3a584:	add	x1, x1, #0x5b0
   3a588:	add	x3, x3, #0x953
   3a58c:	mov	w2, #0x1ab                 	// #427
   3a590:	bl	35b90 <__assert_fail@plt>
   3a594:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a598:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a59c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a5a0:	add	x0, x0, #0x5dc
   3a5a4:	add	x1, x1, #0x8df
   3a5a8:	add	x3, x3, #0x767
   3a5ac:	mov	w2, #0x5fb                 	// #1531
   3a5b0:	bl	35b90 <__assert_fail@plt>
   3a5b4:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a5b8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a5bc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a5c0:	add	x0, x0, #0x5dc
   3a5c4:	add	x1, x1, #0x5b0
   3a5c8:	add	x3, x3, #0x9d5
   3a5cc:	mov	w2, #0x1d4                 	// #468
   3a5d0:	bl	35b90 <__assert_fail@plt>
   3a5d4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a5d8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a5dc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a5e0:	add	x0, x0, #0x797
   3a5e4:	add	x1, x1, #0x8df
   3a5e8:	add	x3, x3, #0x767
   3a5ec:	mov	w2, #0x605                 	// #1541
   3a5f0:	bl	35b90 <__assert_fail@plt>
   3a5f4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a5f8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a5fc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a600:	add	x0, x0, #0x87f
   3a604:	add	x1, x1, #0x8df
   3a608:	add	x3, x3, #0x767
   3a60c:	mov	w2, #0x622                 	// #1570
   3a610:	bl	35b90 <__assert_fail@plt>
   3a614:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a618:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a61c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a620:	add	x0, x0, #0x894
   3a624:	add	x1, x1, #0x8df
   3a628:	add	x3, x3, #0x767
   3a62c:	mov	w2, #0x630                 	// #1584
   3a630:	bl	35b90 <__assert_fail@plt>
   3a634:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a638:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a63c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a640:	add	x0, x0, #0x8a9
   3a644:	add	x1, x1, #0x8df
   3a648:	add	x3, x3, #0x767
   3a64c:	mov	w2, #0x632                 	// #1586
   3a650:	bl	35b90 <__assert_fail@plt>
   3a654:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a658:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a65c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a660:	add	x0, x0, #0x8ff
   3a664:	add	x1, x1, #0x8df
   3a668:	add	x3, x3, #0x767
   3a66c:	mov	w2, #0x63d                 	// #1597
   3a670:	bl	35b90 <__assert_fail@plt>
   3a674:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a678:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a67c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a680:	add	x0, x0, #0x5dc
   3a684:	add	x1, x1, #0x5b0
   3a688:	add	x3, x3, #0x992
   3a68c:	mov	w2, #0x1c0                 	// #448
   3a690:	bl	35b90 <__assert_fail@plt>
   3a694:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a698:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a69c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a6a0:	add	x0, x0, #0xa44
   3a6a4:	add	x1, x1, #0x8df
   3a6a8:	add	x3, x3, #0xa1d
   3a6ac:	mov	w2, #0x531                 	// #1329
   3a6b0:	bl	35b90 <__assert_fail@plt>
   3a6b4:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a6b8:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a6bc:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a6c0:	add	x0, x0, #0xa8d
   3a6c4:	add	x1, x1, #0x8df
   3a6c8:	add	x3, x3, #0xac1
   3a6cc:	mov	w2, #0x53f                 	// #1343
   3a6d0:	bl	35b90 <__assert_fail@plt>
   3a6d4:	bl	35750 <abort@plt>
   3a6d8:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a6dc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a6e0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a6e4:	add	x0, x0, #0x5dc
   3a6e8:	add	x1, x1, #0x8df
   3a6ec:	add	x3, x3, #0x73a
   3a6f0:	mov	w2, #0x758                 	// #1880
   3a6f4:	bl	35b90 <__assert_fail@plt>
   3a6f8:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3a6fc:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3a700:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a704:	add	x0, x0, #0x5dc
   3a708:	add	x1, x1, #0x8df
   3a70c:	add	x3, x3, #0x73a
   3a710:	mov	w2, #0x75e                 	// #1886
   3a714:	bl	35b90 <__assert_fail@plt>
   3a718:	stp	x29, x30, [sp, #-32]!
   3a71c:	str	x19, [sp, #16]
   3a720:	mov	x19, x0
   3a724:	ldr	x0, [x0, #8]
   3a728:	mov	x29, sp
   3a72c:	bl	35260 <aarch64_num_of_operands@plt>
   3a730:	mov	w8, w0
   3a734:	mov	x0, xzr
   3a738:	mov	w8, w8
   3a73c:	add	x9, x19, #0x1c
   3a740:	mov	w10, #0x6                   	// #6
   3a744:	cmp	w8, #0x1
   3a748:	b.lt	3a784 <aarch64_opcode_encode@@Base+0x1390>  // b.tstop
   3a74c:	ldr	x12, [x19, #8]
   3a750:	mov	x11, xzr
   3a754:	mov	x13, x9
   3a758:	madd	x12, x0, x10, x12
   3a75c:	add	x12, x12, #0x38
   3a760:	ldrb	w14, [x12, x11]
   3a764:	ldrb	w15, [x13]
   3a768:	cmp	w14, w15
   3a76c:	b.ne	3a788 <aarch64_opcode_encode@@Base+0x1394>  // b.any
   3a770:	add	x11, x11, #0x1
   3a774:	cmp	x8, x11
   3a778:	add	x13, x13, #0x38
   3a77c:	b.ne	3a760 <aarch64_opcode_encode@@Base+0x136c>  // b.any
   3a780:	b	3a7a0 <aarch64_opcode_encode@@Base+0x13ac>
   3a784:	mov	w11, wzr
   3a788:	cmp	w11, w8
   3a78c:	b.eq	3a7a0 <aarch64_opcode_encode@@Base+0x13ac>  // b.none
   3a790:	add	x0, x0, #0x1
   3a794:	cmp	x0, #0xa
   3a798:	b.ne	3a744 <aarch64_opcode_encode@@Base+0x1350>  // b.any
   3a79c:	bl	35750 <abort@plt>
   3a7a0:	ldr	x19, [sp, #16]
   3a7a4:	ldp	x29, x30, [sp], #32
   3a7a8:	ret

000000000003a7ac <extract_fields@@Base>:
   3a7ac:	sub	sp, sp, #0xe0
   3a7b0:	stp	x29, x30, [sp, #208]
   3a7b4:	add	x29, sp, #0xd0
   3a7b8:	mov	x9, #0xffffffffffffffd0    	// #-48
   3a7bc:	mov	x10, sp
   3a7c0:	movk	x9, #0xff80, lsl #32
   3a7c4:	sub	x11, x29, #0x50
   3a7c8:	add	x10, x10, #0x80
   3a7cc:	add	x12, x29, #0x10
   3a7d0:	mov	w8, #0xffffffd0            	// #-48
   3a7d4:	add	x11, x11, #0x30
   3a7d8:	stp	x10, x9, [x29, #-16]
   3a7dc:	mov	w10, #0xffffffd0            	// #-48
   3a7e0:	stp	x2, x3, [x29, #-80]
   3a7e4:	stp	x4, x5, [x29, #-64]
   3a7e8:	stp	x6, x7, [x29, #-48]
   3a7ec:	stp	q1, q2, [sp, #16]
   3a7f0:	stp	q3, q4, [sp, #48]
   3a7f4:	str	q0, [sp]
   3a7f8:	stp	q5, q6, [sp, #80]
   3a7fc:	str	q7, [sp, #112]
   3a800:	stp	x12, x11, [x29, #-32]
   3a804:	tbz	w8, #31, 3a828 <extract_fields@@Base+0x7c>
   3a808:	add	w10, w8, #0x8
   3a80c:	cmn	w8, #0x8
   3a810:	stur	w10, [x29, #-8]
   3a814:	b.gt	3a828 <extract_fields@@Base+0x7c>
   3a818:	ldur	x8, [x29, #-24]
   3a81c:	mov	x9, #0xffffffffffffffd0    	// #-48
   3a820:	add	x8, x8, x9
   3a824:	b	3a834 <extract_fields@@Base+0x88>
   3a828:	ldur	x8, [x29, #-32]
   3a82c:	add	x9, x8, #0x8
   3a830:	stur	x9, [x29, #-32]
   3a834:	ldr	w9, [x8]
   3a838:	cmp	w9, #0x5
   3a83c:	b.hi	3a8c8 <extract_fields@@Base+0x11c>  // b.pmore
   3a840:	mov	w8, wzr
   3a844:	cbz	w9, 3a8b8 <extract_fields@@Base+0x10c>
   3a848:	adrp	x13, 96000 <aarch64_operands@@Base+0x16c38>
   3a84c:	ldur	x11, [x29, #-24]
   3a850:	ldr	x13, [x13, #3944]
   3a854:	bic	w12, w0, w1
   3a858:	mov	w14, #0xffffffff            	// #-1
   3a85c:	sub	w9, w9, #0x1
   3a860:	tbnz	w10, #31, 3a86c <extract_fields@@Base+0xc0>
   3a864:	mov	w15, w10
   3a868:	b	3a884 <extract_fields@@Base+0xd8>
   3a86c:	add	w15, w10, #0x8
   3a870:	cmn	w10, #0x8
   3a874:	stur	w15, [x29, #-8]
   3a878:	b.gt	3a884 <extract_fields@@Base+0xd8>
   3a87c:	add	x10, x11, w10, sxtw
   3a880:	b	3a890 <extract_fields@@Base+0xe4>
   3a884:	ldur	x10, [x29, #-32]
   3a888:	add	x16, x10, #0x8
   3a88c:	stur	x16, [x29, #-32]
   3a890:	ldr	w10, [x10]
   3a894:	add	x10, x13, x10, lsl #3
   3a898:	ldp	w10, w16, [x10]
   3a89c:	lsl	w8, w8, w16
   3a8a0:	lsr	w10, w12, w10
   3a8a4:	lsl	w16, w14, w16
   3a8a8:	bic	w10, w10, w16
   3a8ac:	orr	w8, w10, w8
   3a8b0:	mov	w10, w15
   3a8b4:	cbnz	w9, 3a85c <extract_fields@@Base+0xb0>
   3a8b8:	ldp	x29, x30, [sp, #208]
   3a8bc:	mov	w0, w8
   3a8c0:	add	sp, sp, #0xe0
   3a8c4:	ret
   3a8c8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a8cc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a8d0:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a8d4:	add	x0, x0, #0x506
   3a8d8:	add	x1, x1, #0xc70
   3a8dc:	add	x3, x3, #0xc8c
   3a8e0:	mov	w2, #0x94                  	// #148
   3a8e4:	bl	35b90 <__assert_fail@plt>

000000000003a8e8 <aarch64_ext_regno@@Base>:
   3a8e8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a8ec:	ldr	w8, [x0, #20]
   3a8f0:	ldr	x9, [x9, #3944]
   3a8f4:	mov	w10, #0xffffffff            	// #-1
   3a8f8:	mov	w0, #0x1                   	// #1
   3a8fc:	add	x8, x9, x8, lsl #3
   3a900:	ldp	w9, w8, [x8]
   3a904:	lsr	w9, w2, w9
   3a908:	lsl	w8, w10, w8
   3a90c:	bic	w8, w9, w8
   3a910:	str	w8, [x1, #16]
   3a914:	ret

000000000003a918 <aarch64_ext_regno_pair@@Base>:
   3a918:	stp	x29, x30, [sp, #-16]!
   3a91c:	ldr	w8, [x1, #8]
   3a920:	mov	x29, sp
   3a924:	orr	w9, w8, #0x2
   3a928:	cmp	w9, #0x3
   3a92c:	b.ne	3a954 <aarch64_ext_regno_pair@@Base+0x3c>  // b.any
   3a930:	sub	w8, w8, #0x1
   3a934:	mov	w9, #0x38                  	// #56
   3a938:	smaddl	x8, w8, w9, x3
   3a93c:	ldr	w8, [x8, #40]
   3a940:	mov	w0, #0x1                   	// #1
   3a944:	add	w8, w8, #0x1
   3a948:	str	w8, [x1, #16]
   3a94c:	ldp	x29, x30, [sp], #16
   3a950:	ret
   3a954:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a958:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3a95c:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3a960:	add	x0, x0, #0xcc9
   3a964:	add	x1, x1, #0xc70
   3a968:	add	x3, x3, #0xce9
   3a96c:	mov	w2, #0x10f                 	// #271
   3a970:	bl	35b90 <__assert_fail@plt>

000000000003a974 <aarch64_ext_regrt_sysins@@Base>:
   3a974:	stp	x29, x30, [sp, #-32]!
   3a978:	stp	x20, x19, [sp, #16]
   3a97c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3a980:	ldr	w8, [x0, #20]
   3a984:	ldr	x9, [x9, #3944]
   3a988:	ldr	w10, [x1, #8]
   3a98c:	mov	w11, #0xffffffff            	// #-1
   3a990:	mov	x29, sp
   3a994:	add	x8, x9, x8, lsl #3
   3a998:	ldp	w9, w8, [x8]
   3a99c:	cmp	w10, #0x1
   3a9a0:	lsr	w9, w2, w9
   3a9a4:	lsl	w8, w11, w8
   3a9a8:	bic	w8, w9, w8
   3a9ac:	str	w8, [x1, #16]
   3a9b0:	b.ne	3a9f8 <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3a9b4:	ldr	w0, [x3, #24]
   3a9b8:	mov	x20, x3
   3a9bc:	mov	x19, x1
   3a9c0:	bl	357f0 <aarch64_get_operand_class@plt>
   3a9c4:	cmp	w0, #0xc
   3a9c8:	b.ne	3a9f8 <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3a9cc:	ldr	x0, [x20, #40]
   3a9d0:	bl	35ad0 <aarch64_sys_ins_reg_has_xt@plt>
   3a9d4:	ldrb	w8, [x19, #48]
   3a9d8:	ubfiz	w9, w0, #1, #1
   3a9dc:	mov	w0, #0x1                   	// #1
   3a9e0:	and	w8, w8, #0xfffffffd
   3a9e4:	orr	w8, w9, w8
   3a9e8:	strb	w8, [x19, #48]
   3a9ec:	ldp	x20, x19, [sp, #16]
   3a9f0:	ldp	x29, x30, [sp], #32
   3a9f4:	ret
   3a9f8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3a9fc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3aa00:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3aa04:	add	x0, x0, #0xd7d
   3aa08:	add	x1, x1, #0xc70
   3aa0c:	add	x3, x3, #0xde1
   3aa10:	mov	w2, #0x11e                 	// #286
   3aa14:	bl	35b90 <__assert_fail@plt>

000000000003aa18 <aarch64_ext_reglane@@Base>:
   3aa18:	stp	x29, x30, [sp, #-48]!
   3aa1c:	stp	x22, x21, [sp, #16]
   3aa20:	stp	x20, x19, [sp, #32]
   3aa24:	adrp	x22, 96000 <aarch64_operands@@Base+0x16c38>
   3aa28:	ldr	x8, [x3, #8]
   3aa2c:	ldr	w9, [x0, #20]
   3aa30:	ldr	x22, [x22, #3944]
   3aa34:	mov	x21, x3
   3aa38:	ldr	w8, [x8, #12]
   3aa3c:	mov	w20, w2
   3aa40:	add	x9, x22, x9, lsl #3
   3aa44:	ldp	w10, w9, [x9]
   3aa48:	bic	w8, w2, w8
   3aa4c:	mov	x19, x1
   3aa50:	mov	x29, sp
   3aa54:	lsr	w8, w8, w10
   3aa58:	mov	w10, #0xffffffff            	// #-1
   3aa5c:	lsl	w9, w10, w9
   3aa60:	bic	w8, w8, w9
   3aa64:	str	w8, [x1, #16]
   3aa68:	ldr	x8, [x3, #8]
   3aa6c:	ldr	w9, [x8, #16]
   3aa70:	cmp	w9, #0x5a
   3aa74:	b.gt	3ab10 <aarch64_ext_reglane@@Base+0xf8>
   3aa78:	cmp	w9, #0xa
   3aa7c:	b.eq	3aa88 <aarch64_ext_reglane@@Base+0x70>  // b.none
   3aa80:	cmp	w9, #0x17
   3aa84:	b.ne	3abd4 <aarch64_ext_reglane@@Base+0x1bc>  // b.any
   3aa88:	ldr	w9, [x19]
   3aa8c:	cmp	w9, #0x20
   3aa90:	b.ne	3ab6c <aarch64_ext_reglane@@Base+0x154>  // b.any
   3aa94:	ldr	w8, [x8, #32]
   3aa98:	cmp	w8, #0x1f
   3aa9c:	b.ne	3ab6c <aarch64_ext_reglane@@Base+0x154>  // b.any
   3aaa0:	ldr	w8, [x19, #8]
   3aaa4:	cmp	w8, #0x1
   3aaa8:	b.ne	3ad0c <aarch64_ext_reglane@@Base+0x2f4>  // b.any
   3aaac:	mov	w1, #0x1                   	// #1
   3aab0:	mov	x0, x21
   3aab4:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3aab8:	strb	w0, [x19, #4]
   3aabc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3aac0:	and	w8, w0, #0xff
   3aac4:	cmp	w8, #0x11
   3aac8:	b.cs	3ad2c <aarch64_ext_reglane@@Base+0x314>  // b.hs, b.nlast
   3aacc:	sub	w8, w8, #0x1
   3aad0:	mov	w9, #0x808b                	// #32907
   3aad4:	lsr	x9, x9, x8
   3aad8:	tbz	w9, #0, 3ad4c <aarch64_ext_reglane@@Base+0x334>
   3aadc:	ldr	w9, [x22, #320]
   3aae0:	ldr	w11, [x22, #324]
   3aae4:	adrp	x13, 54000 <xexit@@Base+0x84c>
   3aae8:	add	x13, x13, #0xb30
   3aaec:	mov	w10, w20
   3aaf0:	mov	w12, #0xffffffff            	// #-1
   3aaf4:	ldrb	w8, [x13, x8]
   3aaf8:	lsr	x9, x10, x9
   3aafc:	lsl	w10, w12, w11
   3ab00:	mvn	w10, w10
   3ab04:	and	x9, x9, x10
   3ab08:	lsr	x8, x9, x8
   3ab0c:	b	3ac60 <aarch64_ext_reglane@@Base+0x248>
   3ab10:	cmp	w9, #0x5b
   3ab14:	b.eq	3ac40 <aarch64_ext_reglane@@Base+0x228>  // b.none
   3ab18:	cmp	w9, #0x5d
   3ab1c:	b.ne	3abd4 <aarch64_ext_reglane@@Base+0x1bc>  // b.any
   3ab20:	ldr	w1, [x19, #8]
   3ab24:	mov	x0, x21
   3ab28:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3ab2c:	and	w8, w0, #0xfe
   3ab30:	cmp	w8, #0xa
   3ab34:	strb	w0, [x19, #4]
   3ab38:	b.ne	3acd8 <aarch64_ext_reglane@@Base+0x2c0>  // b.any
   3ab3c:	mov	w2, #0x2                   	// #2
   3ab40:	mov	w3, #0x3d                  	// #61
   3ab44:	mov	w4, #0x3e                  	// #62
   3ab48:	mov	w0, w20
   3ab4c:	mov	w1, wzr
   3ab50:	bl	35480 <extract_fields@plt>
   3ab54:	ldr	w8, [x19, #16]
   3ab58:	mov	w9, w0
   3ab5c:	str	x9, [x19, #24]
   3ab60:	and	w8, w8, #0x1f
   3ab64:	str	w8, [x19, #16]
   3ab68:	b	3ac64 <aarch64_ext_reglane@@Base+0x24c>
   3ab6c:	ldr	w9, [x22, #344]
   3ab70:	ldr	w10, [x22, #348]
   3ab74:	mov	w8, #0xffffffff            	// #-1
   3ab78:	lsr	w9, w20, w9
   3ab7c:	lsl	w10, w8, w10
   3ab80:	bic	w21, w9, w10
   3ab84:	mov	w9, w21
   3ab88:	add	w22, w8, #0x1
   3ab8c:	cmp	w8, #0x2
   3ab90:	lsr	w21, w21, #1
   3ab94:	b.gt	3aba0 <aarch64_ext_reglane@@Base+0x188>
   3ab98:	mov	w8, w22
   3ab9c:	tbz	w9, #0, 3ab84 <aarch64_ext_reglane@@Base+0x16c>
   3aba0:	sub	w8, w22, #0x1
   3aba4:	cmp	w8, #0x2
   3aba8:	b.gt	3acd8 <aarch64_ext_reglane@@Base+0x2c0>
   3abac:	cmp	w22, #0x4
   3abb0:	b.hi	3acec <aarch64_ext_reglane@@Base+0x2d4>  // b.pmore
   3abb4:	add	w20, w8, #0x6
   3abb8:	mov	w0, w20
   3abbc:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3abc0:	cmp	w0, w22
   3abc4:	b.ne	3acec <aarch64_ext_reglane@@Base+0x2d4>  // b.any
   3abc8:	strb	w20, [x19, #4]
   3abcc:	str	x21, [x19, #24]
   3abd0:	b	3ac64 <aarch64_ext_reglane@@Base+0x24c>
   3abd4:	ldr	w1, [x19, #8]
   3abd8:	mov	x0, x21
   3abdc:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3abe0:	and	w8, w0, #0xff
   3abe4:	cmp	w8, #0x8
   3abe8:	strb	w0, [x19, #4]
   3abec:	b.eq	3ac8c <aarch64_ext_reglane@@Base+0x274>  // b.none
   3abf0:	cmp	w8, #0x7
   3abf4:	b.eq	3ac6c <aarch64_ext_reglane@@Base+0x254>  // b.none
   3abf8:	cmp	w8, #0x6
   3abfc:	b.ne	3acd8 <aarch64_ext_reglane@@Base+0x2c0>  // b.any
   3ac00:	ldr	w8, [x19]
   3ac04:	cmp	w8, #0x22
   3ac08:	b.ne	3ac6c <aarch64_ext_reglane@@Base+0x254>  // b.any
   3ac0c:	mov	w2, #0x3                   	// #3
   3ac10:	mov	w3, #0x3d                  	// #61
   3ac14:	mov	w4, #0x3e                  	// #62
   3ac18:	mov	w5, #0x3f                  	// #63
   3ac1c:	mov	w0, w20
   3ac20:	mov	w1, wzr
   3ac24:	bl	35480 <extract_fields@plt>
   3ac28:	ldr	w9, [x19, #16]
   3ac2c:	mov	w8, w0
   3ac30:	str	x8, [x19, #24]
   3ac34:	and	w9, w9, #0xf
   3ac38:	str	w9, [x19, #16]
   3ac3c:	b	3acb0 <aarch64_ext_reglane@@Base+0x298>
   3ac40:	ldr	w9, [x22, #996]
   3ac44:	ldr	w8, [x22, #992]
   3ac48:	mov	w11, #0xffffffff            	// #-1
   3ac4c:	mov	w10, w20
   3ac50:	lsl	w9, w11, w9
   3ac54:	lsr	x8, x10, x8
   3ac58:	mvn	w9, w9
   3ac5c:	and	x8, x8, x9
   3ac60:	str	x8, [x19, #24]
   3ac64:	mov	w0, #0x1                   	// #1
   3ac68:	b	3acdc <aarch64_ext_reglane@@Base+0x2c4>
   3ac6c:	mov	w2, #0x2                   	// #2
   3ac70:	mov	w3, #0x3d                  	// #61
   3ac74:	mov	w4, #0x3e                  	// #62
   3ac78:	mov	w0, w20
   3ac7c:	mov	w1, wzr
   3ac80:	bl	35480 <extract_fields@plt>
   3ac84:	mov	w8, w0
   3ac88:	b	3acac <aarch64_ext_reglane@@Base+0x294>
   3ac8c:	ldr	w9, [x22, #492]
   3ac90:	ldr	w8, [x22, #488]
   3ac94:	mov	w11, #0xffffffff            	// #-1
   3ac98:	mov	w10, w20
   3ac9c:	lsl	w9, w11, w9
   3aca0:	lsr	x8, x10, x8
   3aca4:	mvn	w9, w9
   3aca8:	and	x8, x8, x9
   3acac:	str	x8, [x19, #24]
   3acb0:	ldr	x9, [x21, #8]
   3acb4:	ldr	w9, [x9, #20]
   3acb8:	cmp	w9, #0x50
   3acbc:	b.ne	3ac64 <aarch64_ext_reglane@@Base+0x24c>  // b.any
   3acc0:	ldrb	w9, [x19, #4]
   3acc4:	cmp	w9, #0x6
   3acc8:	b.eq	3ac64 <aarch64_ext_reglane@@Base+0x24c>  // b.none
   3accc:	tbnz	w8, #0, 3acd8 <aarch64_ext_reglane@@Base+0x2c0>
   3acd0:	lsr	x8, x8, #1
   3acd4:	b	3ac60 <aarch64_ext_reglane@@Base+0x248>
   3acd8:	mov	w0, wzr
   3acdc:	ldp	x20, x19, [sp, #32]
   3ace0:	ldp	x22, x21, [sp, #16]
   3ace4:	ldp	x29, x30, [sp], #48
   3ace8:	ret
   3acec:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3acf0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3acf4:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3acf8:	add	x0, x0, #0x683
   3acfc:	add	x1, x1, #0xc70
   3ad00:	add	x3, x3, #0x6cd
   3ad04:	mov	w2, #0xe6                  	// #230
   3ad08:	bl	35b90 <__assert_fail@plt>
   3ad0c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3ad10:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ad14:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3ad18:	add	x0, x0, #0x8d0
   3ad1c:	add	x1, x1, #0xc70
   3ad20:	add	x3, x3, #0xe77
   3ad24:	mov	w2, #0x13b                 	// #315
   3ad28:	bl	35b90 <__assert_fail@plt>
   3ad2c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3ad30:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ad34:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3ad38:	add	x0, x0, #0x5dc
   3ad3c:	add	x1, x1, #0x5b0
   3ad40:	add	x3, x3, #0x6f3
   3ad44:	mov	w2, #0x200                 	// #512
   3ad48:	bl	35b90 <__assert_fail@plt>
   3ad4c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3ad50:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ad54:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3ad58:	add	x0, x0, #0x718
   3ad5c:	add	x1, x1, #0x5b0
   3ad60:	add	x3, x3, #0x6f3
   3ad64:	mov	w2, #0x203                 	// #515
   3ad68:	bl	35b90 <__assert_fail@plt>
   3ad6c:	sub	sp, sp, #0x30
   3ad70:	mov	w8, #0x38                  	// #56
   3ad74:	stp	x29, x30, [sp, #16]
   3ad78:	stp	x20, x19, [sp, #32]
   3ad7c:	smaddl	x8, w1, w8, x0
   3ad80:	ldrb	w8, [x8, #28]
   3ad84:	add	x29, sp, #0x10
   3ad88:	cbnz	w8, 3adc4 <aarch64_ext_reglane@@Base+0x3ac>
   3ad8c:	ldr	x8, [x0, #8]
   3ad90:	mov	w19, w1
   3ad94:	add	x3, sp, #0x8
   3ad98:	mov	w2, w19
   3ad9c:	add	x1, x8, #0x38
   3ada0:	add	x20, sp, #0x8
   3ada4:	bl	35450 <aarch64_find_best_match@plt>
   3ada8:	cbz	w0, 3adb4 <aarch64_ext_reglane@@Base+0x39c>
   3adac:	sxtw	x8, w19
   3adb0:	ldrb	w0, [x20, x8]
   3adb4:	ldp	x20, x19, [sp, #32]
   3adb8:	ldp	x29, x30, [sp, #16]
   3adbc:	add	sp, sp, #0x30
   3adc0:	ret
   3adc4:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3adc8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3adcc:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3add0:	add	x0, x0, #0x604
   3add4:	add	x1, x1, #0xc70
   3add8:	add	x3, x3, #0x638
   3addc:	mov	w2, #0xf4                  	// #244
   3ade0:	bl	35b90 <__assert_fail@plt>

000000000003ade4 <aarch64_ext_reglist@@Base>:
   3ade4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3ade8:	ldr	w8, [x0, #20]
   3adec:	ldr	x9, [x9, #3944]
   3adf0:	mov	w11, #0xffffffff            	// #-1
   3adf4:	mov	w0, #0x1                   	// #1
   3adf8:	ldp	w10, w12, [x9, #216]
   3adfc:	add	x8, x9, x8, lsl #3
   3ae00:	lsr	w9, w2, w10
   3ae04:	ldp	w10, w8, [x8]
   3ae08:	lsl	w12, w11, w12
   3ae0c:	bic	w9, w9, w12
   3ae10:	ldrb	w12, [x1, #17]
   3ae14:	lsr	w10, w2, w10
   3ae18:	lsl	w8, w11, w8
   3ae1c:	lsl	w9, w9, #5
   3ae20:	bic	w8, w10, w8
   3ae24:	add	w9, w9, #0x20
   3ae28:	and	w8, w8, #0x1f
   3ae2c:	and	w9, w9, #0xe0
   3ae30:	bfi	w8, w12, #8, #8
   3ae34:	orr	w8, w9, w8
   3ae38:	strh	w8, [x1, #16]
   3ae3c:	ret

000000000003ae40 <aarch64_ext_ldst_reglist@@Base>:
   3ae40:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3ae44:	ldr	x8, [x8, #3944]
   3ae48:	ldr	x10, [x3, #8]
   3ae4c:	mov	w13, w2
   3ae50:	ldp	w9, w11, [x8, #96]
   3ae54:	ldp	w12, w8, [x8, #192]
   3ae58:	ldr	x10, [x10, #120]
   3ae5c:	lsr	w9, w2, w9
   3ae60:	lsr	x12, x13, x12
   3ae64:	mov	w13, #0xffffffff            	// #-1
   3ae68:	lsl	w11, w13, w11
   3ae6c:	lsl	w13, w13, w8
   3ae70:	ldrh	w8, [x1, #16]
   3ae74:	bic	w9, w9, w11
   3ae78:	mvn	w11, w13
   3ae7c:	bfxil	w8, w9, #0, #5
   3ae80:	and	x9, x12, x11
   3ae84:	cmp	w9, #0xa
   3ae88:	strh	w8, [x1, #16]
   3ae8c:	b.hi	3aebc <aarch64_ext_ldst_reglist@@Base+0x7c>  // b.pmore
   3ae90:	adrp	x11, 54000 <xexit@@Base+0x84c>
   3ae94:	mov	w12, #0xc                   	// #12
   3ae98:	add	x11, x11, #0xbd0
   3ae9c:	madd	x12, x9, x12, x11
   3aea0:	ldr	w12, [x12, #8]
   3aea4:	ubfx	w10, w10, #24, #3
   3aea8:	cmp	w10, w12
   3aeac:	b.ne	3aebc <aarch64_ext_ldst_reglist@@Base+0x7c>  // b.any
   3aeb0:	mov	w10, #0x5dd                 	// #1501
   3aeb4:	lsr	x10, x10, x9
   3aeb8:	tbnz	w10, #0, 3aec4 <aarch64_ext_ldst_reglist@@Base+0x84>
   3aebc:	mov	w0, wzr
   3aec0:	ret
   3aec4:	mov	w10, #0xc                   	// #12
   3aec8:	madd	x9, x9, x10, x11
   3aecc:	ldrh	w9, [x9, #4]
   3aed0:	and	w8, w8, #0xffffff1f
   3aed4:	mov	w0, #0x1                   	// #1
   3aed8:	ubfiz	w9, w9, #5, #3
   3aedc:	orr	w8, w9, w8
   3aee0:	strh	w8, [x1, #16]
   3aee4:	ret

000000000003aee8 <aarch64_ext_ldst_reglist_r@@Base>:
   3aee8:	stp	x29, x30, [sp, #-16]!
   3aeec:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3aef0:	ldr	x9, [x9, #3944]
   3aef4:	ldrh	w8, [x1, #16]
   3aef8:	mov	w10, #0xffffffff            	// #-1
   3aefc:	mov	x29, sp
   3af00:	ldp	w11, w12, [x9, #96]
   3af04:	lsr	w11, w2, w11
   3af08:	lsl	w12, w10, w12
   3af0c:	bic	w11, w11, w12
   3af10:	bfxil	w8, w11, #0, #5
   3af14:	strh	w8, [x1, #16]
   3af18:	ldr	x11, [x3, #8]
   3af1c:	ldrb	w11, [x11, #123]
   3af20:	and	w11, w11, #0x7
   3af24:	sub	w12, w11, #0x1
   3af28:	and	w12, w12, #0xffff
   3af2c:	cmp	w12, #0x4
   3af30:	mov	w12, w8
   3af34:	bfi	w12, w11, #5, #3
   3af38:	strh	w12, [x1, #16]
   3af3c:	b.cs	3af78 <aarch64_ext_ldst_reglist_r@@Base+0x90>  // b.hs, b.nlast
   3af40:	ldp	w12, w9, [x9, #248]
   3af44:	lsr	w12, w2, w12
   3af48:	lsl	w9, w10, w9
   3af4c:	bic	w9, w12, w9
   3af50:	cmp	w9, #0x1
   3af54:	b.ne	3af6c <aarch64_ext_ldst_reglist_r@@Base+0x84>  // b.any
   3af58:	cmp	w11, #0x1
   3af5c:	b.ne	3af6c <aarch64_ext_ldst_reglist_r@@Base+0x84>  // b.any
   3af60:	and	w8, w8, #0xffffff1f
   3af64:	orr	w8, w8, #0x40
   3af68:	strh	w8, [x1, #16]
   3af6c:	mov	w0, #0x1                   	// #1
   3af70:	ldp	x29, x30, [sp], #16
   3af74:	ret
   3af78:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3af7c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3af80:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3af84:	add	x0, x0, #0xf08
   3af88:	add	x1, x1, #0xc70
   3af8c:	add	x3, x3, #0xf43
   3af90:	mov	w2, #0x1e5                 	// #485
   3af94:	bl	35b90 <__assert_fail@plt>

000000000003af98 <aarch64_ext_ldst_elemlist@@Base>:
   3af98:	stp	x29, x30, [sp, #-64]!
   3af9c:	str	x23, [sp, #16]
   3afa0:	stp	x22, x21, [sp, #32]
   3afa4:	stp	x20, x19, [sp, #48]
   3afa8:	adrp	x22, 96000 <aarch64_operands@@Base+0x16c38>
   3afac:	ldr	x22, [x22, #3944]
   3afb0:	ldrh	w11, [x1, #16]
   3afb4:	mov	w8, #0xffffffff            	// #-1
   3afb8:	mov	x20, x3
   3afbc:	ldp	w9, w10, [x22, #96]
   3afc0:	ldr	w12, [x22, #212]
   3afc4:	mov	w21, w2
   3afc8:	mov	x19, x1
   3afcc:	lsr	w9, w2, w9
   3afd0:	lsl	w10, w8, w10
   3afd4:	bic	w9, w9, w10
   3afd8:	bfxil	w11, w9, #0, #5
   3afdc:	cmp	w12, #0x3
   3afe0:	mov	x29, sp
   3afe4:	strh	w11, [x1, #16]
   3afe8:	b.ge	3aff8 <aarch64_ext_ldst_elemlist@@Base+0x60>  // b.tcont
   3afec:	mov	w9, wzr
   3aff0:	mov	w10, wzr
   3aff4:	b	3b004 <aarch64_ext_ldst_elemlist@@Base+0x6c>
   3aff8:	ldr	w9, [x22, #208]
   3affc:	add	w10, w9, #0x1
   3b000:	mov	w9, #0x2                   	// #2
   3b004:	lsr	w10, w21, w10
   3b008:	lsl	w8, w8, w9
   3b00c:	mov	w2, #0x3                   	// #3
   3b010:	mov	w3, #0xb                   	// #11
   3b014:	mov	w4, #0x1f                  	// #31
   3b018:	mov	w5, #0x9                   	// #9
   3b01c:	mov	w0, w21
   3b020:	mov	w1, wzr
   3b024:	bic	w23, w10, w8
   3b028:	bl	35480 <extract_fields@plt>
   3b02c:	cmp	w23, #0x2
   3b030:	b.eq	3b064 <aarch64_ext_ldst_elemlist@@Base+0xcc>  // b.none
   3b034:	cmp	w23, #0x1
   3b038:	b.eq	3b050 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.none
   3b03c:	mov	w8, wzr
   3b040:	cbnz	w23, 3b0d8 <aarch64_ext_ldst_elemlist@@Base+0x140>
   3b044:	mov	w8, #0x5                   	// #5
   3b048:	strb	w8, [x19, #4]
   3b04c:	b	3b078 <aarch64_ext_ldst_elemlist@@Base+0xe0>
   3b050:	tbnz	w0, #0, 3b0d4 <aarch64_ext_ldst_elemlist@@Base+0x13c>
   3b054:	mov	w8, #0x6                   	// #6
   3b058:	strb	w8, [x19, #4]
   3b05c:	lsr	w0, w0, #1
   3b060:	b	3b078 <aarch64_ext_ldst_elemlist@@Base+0xe0>
   3b064:	tbnz	w0, #1, 3b0d4 <aarch64_ext_ldst_elemlist@@Base+0x13c>
   3b068:	tbnz	w0, #0, 3b0bc <aarch64_ext_ldst_elemlist@@Base+0x124>
   3b06c:	mov	w8, #0x7                   	// #7
   3b070:	strb	w8, [x19, #4]
   3b074:	lsr	w0, w0, #2
   3b078:	ldrh	w8, [x19, #16]
   3b07c:	mov	w9, w0
   3b080:	str	x9, [x19, #24]
   3b084:	and	w8, w8, #0xfffffe1f
   3b088:	orr	w8, w8, #0x100
   3b08c:	strh	w8, [x19, #16]
   3b090:	ldr	x9, [x20, #8]
   3b094:	ldrb	w9, [x9, #123]
   3b098:	and	w9, w9, #0x7
   3b09c:	bfi	w8, w9, #5, #3
   3b0a0:	sub	w9, w9, #0x1
   3b0a4:	and	w9, w9, #0xffff
   3b0a8:	cmp	w9, #0x4
   3b0ac:	strh	w8, [x19, #16]
   3b0b0:	b.cs	3b0fc <aarch64_ext_ldst_elemlist@@Base+0x164>  // b.hs, b.nlast
   3b0b4:	mov	w8, #0x1                   	// #1
   3b0b8:	b	3b0d8 <aarch64_ext_ldst_elemlist@@Base+0x140>
   3b0bc:	ldp	w8, w9, [x22, #248]
   3b0c0:	mov	w10, #0xffffffff            	// #-1
   3b0c4:	lsr	w8, w21, w8
   3b0c8:	lsl	w9, w10, w9
   3b0cc:	bics	wzr, w8, w9
   3b0d0:	b.eq	3b0f0 <aarch64_ext_ldst_elemlist@@Base+0x158>  // b.none
   3b0d4:	mov	w8, wzr
   3b0d8:	ldp	x20, x19, [sp, #48]
   3b0dc:	ldp	x22, x21, [sp, #32]
   3b0e0:	ldr	x23, [sp, #16]
   3b0e4:	mov	w0, w8
   3b0e8:	ldp	x29, x30, [sp], #64
   3b0ec:	ret
   3b0f0:	mov	w8, #0x8                   	// #8
   3b0f4:	lsr	w0, w0, #3
   3b0f8:	b	3b048 <aarch64_ext_ldst_elemlist@@Base+0xb0>
   3b0fc:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3b100:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b104:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3b108:	add	x0, x0, #0xf08
   3b10c:	add	x1, x1, #0xc70
   3b110:	add	x3, x3, #0xfdb
   3b114:	mov	w2, #0x22d                 	// #557
   3b118:	bl	35b90 <__assert_fail@plt>

000000000003b11c <aarch64_ext_advsimd_imm_shift@@Base>:
   3b11c:	stp	x29, x30, [sp, #-80]!
   3b120:	str	x25, [sp, #16]
   3b124:	stp	x24, x23, [sp, #32]
   3b128:	stp	x22, x21, [sp, #48]
   3b12c:	stp	x20, x19, [sp, #64]
   3b130:	adrp	x23, 96000 <aarch64_operands@@Base+0x16c38>
   3b134:	ldr	x23, [x23, #3944]
   3b138:	mov	w10, #0xffffffff            	// #-1
   3b13c:	mov	x29, sp
   3b140:	ldr	w8, [x23, #432]
   3b144:	ldr	w9, [x23, #436]
   3b148:	lsr	w8, w2, w8
   3b14c:	lsl	w9, w10, w9
   3b150:	bics	w25, w8, w9
   3b154:	b.eq	3b22c <aarch64_ext_advsimd_imm_shift@@Base+0x110>  // b.none
   3b158:	ldr	x8, [x3, #8]
   3b15c:	mov	w21, w2
   3b160:	mov	x19, x1
   3b164:	mov	w2, #0x2                   	// #2
   3b168:	ldr	w24, [x8, #16]
   3b16c:	mov	w3, #0x36                  	// #54
   3b170:	mov	w4, #0x35                  	// #53
   3b174:	mov	w0, w21
   3b178:	mov	w1, wzr
   3b17c:	bl	35480 <extract_fields@plt>
   3b180:	mov	w20, w0
   3b184:	mov	w22, #0x4                   	// #4
   3b188:	mov	w8, #0x8                   	// #8
   3b18c:	subs	w22, w22, #0x1
   3b190:	sub	w8, w8, #0x2
   3b194:	b.cc	3b1a4 <aarch64_ext_advsimd_imm_shift@@Base+0x88>  // b.lo, b.ul, b.last
   3b198:	mov	w9, w25
   3b19c:	lsl	w25, w25, #1
   3b1a0:	tbz	w9, #3, 3b18c <aarch64_ext_advsimd_imm_shift@@Base+0x70>
   3b1a4:	cmp	w24, #0x1a
   3b1a8:	b.eq	3b1b4 <aarch64_ext_advsimd_imm_shift@@Base+0x98>  // b.none
   3b1ac:	cmp	w24, #0xe
   3b1b0:	b.ne	3b29c <aarch64_ext_advsimd_imm_shift@@Base+0x180>  // b.any
   3b1b4:	ldr	w9, [x19]
   3b1b8:	sub	w9, w9, #0x2b
   3b1bc:	cmp	w9, #0x2
   3b1c0:	b.cs	3b29c <aarch64_ext_advsimd_imm_shift@@Base+0x180>  // b.hs, b.nlast
   3b1c4:	cmp	w24, #0xe
   3b1c8:	b.ne	3b234 <aarch64_ext_advsimd_imm_shift@@Base+0x118>  // b.any
   3b1cc:	ldp	w9, w10, [x23, #88]
   3b1d0:	mov	w11, #0xffffffff            	// #-1
   3b1d4:	lsr	w9, w21, w9
   3b1d8:	lsl	w10, w11, w10
   3b1dc:	bic	w9, w9, w10
   3b1e0:	orr	w23, w9, w8
   3b1e4:	cmp	w23, #0x8
   3b1e8:	b.hi	3b20c <aarch64_ext_advsimd_imm_shift@@Base+0xf0>  // b.pmore
   3b1ec:	add	w8, w23, #0xd
   3b1f0:	add	w9, w23, #0xe
   3b1f4:	cmp	w8, #0xe
   3b1f8:	csel	w21, w9, w8, hi  // hi = pmore
   3b1fc:	mov	w0, w21
   3b200:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3b204:	cmp	w0, w23
   3b208:	b.eq	3b254 <aarch64_ext_advsimd_imm_shift@@Base+0x138>  // b.none
   3b20c:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3b210:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b214:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b218:	add	x0, x0, #0x715
   3b21c:	add	x1, x1, #0xc70
   3b220:	add	x3, x3, #0x75f
   3b224:	mov	w2, #0xdb                  	// #219
   3b228:	bl	35b90 <__assert_fail@plt>
   3b22c:	mov	w0, wzr
   3b230:	b	3b284 <aarch64_ext_advsimd_imm_shift@@Base+0x168>
   3b234:	cmp	w22, #0x4
   3b238:	b.hi	3b2bc <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>  // b.pmore
   3b23c:	add	w8, w22, #0x1
   3b240:	add	w21, w8, #0x4
   3b244:	mov	w0, w21
   3b248:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3b24c:	cmp	w0, w22
   3b250:	b.ne	3b2bc <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>  // b.any
   3b254:	ldr	w8, [x19]
   3b258:	mov	w9, #0x10                  	// #16
   3b25c:	mov	w10, #0x8                   	// #8
   3b260:	lsl	w9, w9, w22
   3b264:	lsl	w10, w10, w22
   3b268:	cmp	w8, #0x2c
   3b26c:	csel	w8, w20, w10, eq  // eq = none
   3b270:	csel	w9, w9, w20, eq  // eq = none
   3b274:	sub	w8, w9, w8
   3b278:	mov	w0, #0x1                   	// #1
   3b27c:	strb	w21, [x19, #4]
   3b280:	str	x8, [x19, #16]
   3b284:	ldp	x20, x19, [sp, #64]
   3b288:	ldp	x22, x21, [sp, #48]
   3b28c:	ldp	x24, x23, [sp, #32]
   3b290:	ldr	x25, [sp, #16]
   3b294:	ldp	x29, x30, [sp], #80
   3b298:	ret
   3b29c:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3b2a0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b2a4:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b2a8:	add	x0, x0, #0x72
   3b2ac:	add	x1, x1, #0xc70
   3b2b0:	add	x3, x3, #0xed
   3b2b4:	mov	w2, #0x24b                 	// #587
   3b2b8:	bl	35b90 <__assert_fail@plt>
   3b2bc:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3b2c0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b2c4:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b2c8:	add	x0, x0, #0x683
   3b2cc:	add	x1, x1, #0xc70
   3b2d0:	add	x3, x3, #0x6cd
   3b2d4:	mov	w2, #0xe6                  	// #230
   3b2d8:	bl	35b90 <__assert_fail@plt>

000000000003b2dc <aarch64_ext_shll_imm@@Base>:
   3b2dc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b2e0:	ldr	x8, [x8, #3944]
   3b2e4:	mov	w10, #0xffffffff            	// #-1
   3b2e8:	ldp	w9, w8, [x8, #64]
   3b2ec:	lsr	w9, w2, w9
   3b2f0:	lsl	w8, w10, w8
   3b2f4:	bic	w8, w9, w8
   3b2f8:	cmp	w8, #0x2
   3b2fc:	b.hi	3b318 <aarch64_ext_shll_imm@@Base+0x3c>  // b.pmore
   3b300:	adrp	x9, 54000 <xexit@@Base+0x84c>
   3b304:	add	x9, x9, #0xc58
   3b308:	ldr	x8, [x9, w8, sxtw #3]
   3b30c:	mov	w0, #0x1                   	// #1
   3b310:	str	x8, [x1, #16]
   3b314:	ret
   3b318:	mov	w0, wzr
   3b31c:	ret

000000000003b320 <aarch64_ext_imm@@Base>:
   3b320:	stp	x29, x30, [sp, #-16]!
   3b324:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b328:	ldr	x8, [x8, #3944]
   3b32c:	mov	x9, xzr
   3b330:	mov	w10, wzr
   3b334:	add	x11, x0, #0x14
   3b338:	mov	w12, #0xffffffff            	// #-1
   3b33c:	mov	x29, sp
   3b340:	ldr	w13, [x11, x9]
   3b344:	cbz	w13, 3b370 <aarch64_ext_imm@@Base+0x50>
   3b348:	add	x13, x8, x13, lsl #3
   3b34c:	ldp	w13, w14, [x13]
   3b350:	add	x9, x9, #0x4
   3b354:	cmp	x9, #0x10
   3b358:	lsl	w10, w10, w14
   3b35c:	lsr	w13, w2, w13
   3b360:	lsl	w14, w12, w14
   3b364:	bic	w13, w13, w14
   3b368:	orr	w10, w13, w10
   3b36c:	b.ne	3b340 <aarch64_ext_imm@@Base+0x20>  // b.any
   3b370:	ldr	w9, [x0, #16]
   3b374:	mov	w10, w10
   3b378:	tbz	w9, #2, 3b3c8 <aarch64_ext_imm@@Base+0xa8>
   3b37c:	ldr	w13, [x0, #20]
   3b380:	cbz	w13, 3b400 <aarch64_ext_imm@@Base+0xe0>
   3b384:	mov	w11, wzr
   3b388:	add	x12, x0, #0x18
   3b38c:	add	x13, x8, w13, uxtw #3
   3b390:	ldr	w14, [x13, #4]
   3b394:	ldr	w13, [x12], #4
   3b398:	add	w11, w14, w11
   3b39c:	cbnz	w13, 3b38c <aarch64_ext_imm@@Base+0x6c>
   3b3a0:	sub	w8, w11, #0x1
   3b3a4:	cmp	w8, #0x1f
   3b3a8:	b.cs	3b400 <aarch64_ext_imm@@Base+0xe0>  // b.hs, b.nlast
   3b3ac:	mov	w11, #0x1                   	// #1
   3b3b0:	lsl	x8, x11, x8
   3b3b4:	lsl	w11, w8, #1
   3b3b8:	sub	w11, w11, #0x1
   3b3bc:	and	x10, x11, x10
   3b3c0:	eor	x10, x10, x8
   3b3c4:	sub	x10, x10, x8
   3b3c8:	tbnz	w9, #3, 3b3dc <aarch64_ext_imm@@Base+0xbc>
   3b3cc:	lsl	x8, x10, #4
   3b3d0:	tst	w9, #0x200
   3b3d4:	csel	x8, x10, x8, eq  // eq = none
   3b3d8:	b	3b3e0 <aarch64_ext_imm@@Base+0xc0>
   3b3dc:	lsl	x8, x10, #2
   3b3e0:	ldr	w9, [x1]
   3b3e4:	lsl	x10, x8, #12
   3b3e8:	mov	w0, #0x1                   	// #1
   3b3ec:	cmp	w9, #0x4e
   3b3f0:	csel	x8, x10, x8, eq  // eq = none
   3b3f4:	str	x8, [x1, #16]
   3b3f8:	ldp	x29, x30, [sp], #16
   3b3fc:	ret
   3b400:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3b404:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b408:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b40c:	add	x0, x0, #0x7df
   3b410:	add	x1, x1, #0x5b0
   3b414:	add	x3, x3, #0x7f7
   3b418:	mov	w2, #0x12e                 	// #302
   3b41c:	bl	35b90 <__assert_fail@plt>

000000000003b420 <aarch64_ext_imm_half@@Base>:
   3b420:	stp	x29, x30, [sp, #-32]!
   3b424:	stp	x20, x19, [sp, #16]
   3b428:	mov	x29, sp
   3b42c:	mov	w19, w2
   3b430:	mov	x20, x1
   3b434:	bl	35800 <aarch64_ext_imm@plt>
   3b438:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3b43c:	ldr	x9, [x9, #3944]
   3b440:	mov	w8, #0x5                   	// #5
   3b444:	mov	w11, #0xffffffff            	// #-1
   3b448:	str	w8, [x20, #32]
   3b44c:	ldr	w10, [x9, #256]
   3b450:	ldr	w9, [x9, #260]
   3b454:	mov	w0, #0x1                   	// #1
   3b458:	lsr	w8, w19, w10
   3b45c:	lsl	w9, w11, w9
   3b460:	bic	w8, w8, w9
   3b464:	lsl	w8, w8, #4
   3b468:	str	x8, [x20, #40]
   3b46c:	ldp	x20, x19, [sp, #16]
   3b470:	ldp	x29, x30, [sp], #32
   3b474:	ret

000000000003b478 <aarch64_ext_advsimd_imm_modified@@Base>:
   3b478:	stp	x29, x30, [sp, #-64]!
   3b47c:	stp	x22, x21, [sp, #32]
   3b480:	stp	x20, x19, [sp, #48]
   3b484:	ldr	w8, [x1, #8]
   3b488:	str	x23, [sp, #16]
   3b48c:	mov	x29, sp
   3b490:	cmp	w8, #0x1
   3b494:	b.ne	3b6b4 <aarch64_ext_advsimd_imm_modified@@Base+0x23c>  // b.any
   3b498:	ldr	w8, [x1]
   3b49c:	ldrb	w21, [x3, #28]
   3b4a0:	mov	x22, x3
   3b4a4:	mov	x19, x1
   3b4a8:	mov	w20, w2
   3b4ac:	cmp	w8, #0x2f
   3b4b0:	b.ne	3b4c0 <aarch64_ext_advsimd_imm_modified@@Base+0x48>  // b.any
   3b4b4:	ldrb	w8, [x19, #24]
   3b4b8:	orr	w8, w8, #0x1
   3b4bc:	strb	w8, [x19, #24]
   3b4c0:	mov	w2, #0x2                   	// #2
   3b4c4:	mov	w3, #0x4                   	// #4
   3b4c8:	mov	w4, #0x3                   	// #3
   3b4cc:	mov	w0, w20
   3b4d0:	mov	w1, wzr
   3b4d4:	bl	35480 <extract_fields@plt>
   3b4d8:	ldrb	w8, [x19, #24]
   3b4dc:	mov	w23, w0
   3b4e0:	tbnz	w8, #0, 3b564 <aarch64_ext_advsimd_imm_modified@@Base+0xec>
   3b4e4:	mov	w0, w21
   3b4e8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3b4ec:	and	w8, w0, #0xff
   3b4f0:	cmp	w8, #0x8
   3b4f4:	b.ne	3b564 <aarch64_ext_advsimd_imm_modified@@Base+0xec>  // b.any
   3b4f8:	adrp	x9, 54000 <xexit@@Base+0x84c>
   3b4fc:	adrp	x10, 54000 <xexit@@Base+0x84c>
   3b500:	ldr	d3, [x9, #2832]
   3b504:	ldr	q4, [x10, #2848]
   3b508:	mov	w9, #0x2                   	// #2
   3b50c:	dup	v1.2s, w23
   3b510:	movi	v0.2d, #0x0
   3b514:	mov	w8, #0x8                   	// #8
   3b518:	movi	v2.2s, #0x1
   3b51c:	movi	v5.2d, #0xff
   3b520:	dup	v6.2d, x9
   3b524:	movi	v7.2s, #0x2
   3b528:	ushl	v16.2s, v2.2s, v3.2s
   3b52c:	and	v16.8b, v16.8b, v1.8b
   3b530:	shl	v17.2d, v4.2d, #3
   3b534:	cmeq	v16.2s, v16.2s, #0
   3b538:	ushl	v17.2d, v5.2d, v17.2d
   3b53c:	sxtl	v16.2d, v16.2s
   3b540:	bic	v16.16b, v17.16b, v16.16b
   3b544:	add	v4.2d, v4.2d, v6.2d
   3b548:	subs	x8, x8, #0x2
   3b54c:	orr	v0.16b, v16.16b, v0.16b
   3b550:	add	v3.2s, v3.2s, v7.2s
   3b554:	b.ne	3b528 <aarch64_ext_advsimd_imm_modified@@Base+0xb0>  // b.any
   3b558:	dup	v1.2d, v0.d[1]
   3b55c:	orr	v0.16b, v0.16b, v1.16b
   3b560:	fmov	x23, d0
   3b564:	ldr	w1, [x19, #8]
   3b568:	mov	x0, x22
   3b56c:	str	x23, [x19, #16]
   3b570:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3b574:	and	w8, w0, #0xff
   3b578:	cmp	w8, #0x22
   3b57c:	strb	w0, [x19, #4]
   3b580:	b.eq	3b5e8 <aarch64_ext_advsimd_imm_modified@@Base+0x170>  // b.none
   3b584:	cmp	w8, #0x21
   3b588:	b.eq	3b598 <aarch64_ext_advsimd_imm_modified@@Base+0x120>  // b.none
   3b58c:	cbnz	w8, 3b694 <aarch64_ext_advsimd_imm_modified@@Base+0x21c>
   3b590:	str	wzr, [x19, #32]
   3b594:	b	3b66c <aarch64_ext_advsimd_imm_modified@@Base+0x1f4>
   3b598:	mov	w8, #0x5                   	// #5
   3b59c:	mov	w0, w21
   3b5a0:	str	w8, [x19, #32]
   3b5a4:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3b5a8:	and	w8, w0, #0xff
   3b5ac:	cmp	w8, #0x1
   3b5b0:	b.eq	3b64c <aarch64_ext_advsimd_imm_modified@@Base+0x1d4>  // b.none
   3b5b4:	cmp	w8, #0x2
   3b5b8:	b.eq	3b638 <aarch64_ext_advsimd_imm_modified@@Base+0x1c0>  // b.none
   3b5bc:	cmp	w8, #0x4
   3b5c0:	b.ne	3b6d4 <aarch64_ext_advsimd_imm_modified@@Base+0x25c>  // b.any
   3b5c4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b5c8:	ldr	x8, [x8, #3944]
   3b5cc:	ldr	w9, [x8, #204]
   3b5d0:	cmp	w9, #0x3
   3b5d4:	b.lt	3b64c <aarch64_ext_advsimd_imm_modified@@Base+0x1d4>  // b.tstop
   3b5d8:	ldr	w8, [x8, #200]
   3b5dc:	add	w9, w8, #0x1
   3b5e0:	mov	w8, #0x2                   	// #2
   3b5e4:	b	3b654 <aarch64_ext_advsimd_imm_modified@@Base+0x1dc>
   3b5e8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b5ec:	ldr	x8, [x8, #3944]
   3b5f0:	mov	w10, #0x1                   	// #1
   3b5f4:	str	w10, [x19, #32]
   3b5f8:	ldr	w9, [x8, #204]
   3b5fc:	cmp	w9, #0x1
   3b600:	b.lt	3b610 <aarch64_ext_advsimd_imm_modified@@Base+0x198>  // b.tstop
   3b604:	ldr	w9, [x8, #200]
   3b608:	mov	w8, #0x1                   	// #1
   3b60c:	b	3b618 <aarch64_ext_advsimd_imm_modified@@Base+0x1a0>
   3b610:	mov	w8, wzr
   3b614:	mov	w9, wzr
   3b618:	mov	w10, #0xffffffff            	// #-1
   3b61c:	lsr	w9, w20, w9
   3b620:	lsl	w8, w10, w8
   3b624:	mov	w11, #0x10                  	// #16
   3b628:	bics	wzr, w9, w8
   3b62c:	mov	w8, #0x8                   	// #8
   3b630:	csel	x8, x8, x11, eq  // eq = none
   3b634:	b	3b668 <aarch64_ext_advsimd_imm_modified@@Base+0x1f0>
   3b638:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b63c:	ldr	x8, [x8, #3944]
   3b640:	ldr	w9, [x8, #204]
   3b644:	cmp	w9, #0x2
   3b648:	b.ge	3b684 <aarch64_ext_advsimd_imm_modified@@Base+0x20c>  // b.tcont
   3b64c:	mov	w8, wzr
   3b650:	mov	w9, wzr
   3b654:	mov	w10, #0xffffffff            	// #-1
   3b658:	lsr	w9, w20, w9
   3b65c:	lsl	w8, w10, w8
   3b660:	bic	w8, w9, w8
   3b664:	lsl	w8, w8, #3
   3b668:	str	x8, [x19, #40]
   3b66c:	ldp	x20, x19, [sp, #48]
   3b670:	ldp	x22, x21, [sp, #32]
   3b674:	ldr	x23, [sp, #16]
   3b678:	mov	w0, #0x1                   	// #1
   3b67c:	ldp	x29, x30, [sp], #64
   3b680:	ret
   3b684:	ldr	w8, [x8, #200]
   3b688:	add	w9, w8, #0x1
   3b68c:	mov	w8, #0x1                   	// #1
   3b690:	b	3b654 <aarch64_ext_advsimd_imm_modified@@Base+0x1dc>
   3b694:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3b698:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b69c:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b6a0:	add	x0, x0, #0x5dc
   3b6a4:	add	x1, x1, #0xc70
   3b6a8:	add	x3, x3, #0x188
   3b6ac:	mov	w2, #0x2f1                 	// #753
   3b6b0:	bl	35b90 <__assert_fail@plt>
   3b6b4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3b6b8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b6bc:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b6c0:	add	x0, x0, #0x8d0
   3b6c4:	add	x1, x1, #0xc70
   3b6c8:	add	x3, x3, #0x188
   3b6cc:	mov	w2, #0x2bf                 	// #703
   3b6d0:	bl	35b90 <__assert_fail@plt>
   3b6d4:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3b6d8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b6dc:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b6e0:	add	x0, x0, #0x5dc
   3b6e4:	add	x1, x1, #0xc70
   3b6e8:	add	x3, x3, #0x188
   3b6ec:	mov	w2, #0x2e5                 	// #741
   3b6f0:	bl	35b90 <__assert_fail@plt>

000000000003b6f4 <aarch64_ext_fpimm@@Base>:
   3b6f4:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   3b6f8:	ldr	x11, [x11, #3944]
   3b6fc:	mov	x9, xzr
   3b700:	mov	w8, wzr
   3b704:	add	x10, x0, #0x14
   3b708:	mov	w12, #0xffffffff            	// #-1
   3b70c:	ldr	w13, [x10, x9]
   3b710:	cbz	w13, 3b73c <aarch64_ext_fpimm@@Base+0x48>
   3b714:	add	x13, x11, x13, lsl #3
   3b718:	ldp	w13, w14, [x13]
   3b71c:	add	x9, x9, #0x4
   3b720:	cmp	x9, #0x10
   3b724:	lsl	w8, w8, w14
   3b728:	lsr	w13, w2, w13
   3b72c:	lsl	w14, w12, w14
   3b730:	bic	w13, w13, w14
   3b734:	orr	w8, w13, w8
   3b738:	b.ne	3b70c <aarch64_ext_fpimm@@Base+0x18>  // b.any
   3b73c:	ldrb	w9, [x1, #24]
   3b740:	mov	w8, w8
   3b744:	str	x8, [x1, #16]
   3b748:	mov	w0, #0x1                   	// #1
   3b74c:	orr	w8, w9, #0x1
   3b750:	strb	w8, [x1, #24]
   3b754:	ret

000000000003b758 <aarch64_ext_imm_rotate1@@Base>:
   3b758:	stp	x29, x30, [sp, #-16]!
   3b75c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3b760:	ldr	w8, [x0, #20]
   3b764:	ldr	x9, [x9, #3944]
   3b768:	mov	w11, #0xffffffff            	// #-1
   3b76c:	mov	w10, w2
   3b770:	mov	x29, sp
   3b774:	add	x8, x9, x8, lsl #3
   3b778:	ldp	w9, w8, [x8]
   3b77c:	lsl	w8, w11, w8
   3b780:	lsr	x9, x10, x9
   3b784:	mvn	w8, w8
   3b788:	and	x8, x9, x8
   3b78c:	cmp	w8, #0x2
   3b790:	b.cs	3b7b0 <aarch64_ext_imm_rotate1@@Base+0x58>  // b.hs, b.nlast
   3b794:	mov	w9, #0xb4                  	// #180
   3b798:	mul	x8, x8, x9
   3b79c:	add	x8, x8, #0x5a
   3b7a0:	mov	w0, #0x1                   	// #1
   3b7a4:	str	x8, [x1, #16]
   3b7a8:	ldp	x29, x30, [sp], #16
   3b7ac:	ret
   3b7b0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3b7b4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b7b8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b7bc:	add	x0, x0, #0xcfd
   3b7c0:	add	x1, x1, #0xc70
   3b7c4:	add	x3, x3, #0x226
   3b7c8:	mov	w2, #0x30c                 	// #780
   3b7cc:	bl	35b90 <__assert_fail@plt>

000000000003b7d0 <aarch64_ext_imm_rotate2@@Base>:
   3b7d0:	stp	x29, x30, [sp, #-16]!
   3b7d4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3b7d8:	ldr	w8, [x0, #20]
   3b7dc:	ldr	x9, [x9, #3944]
   3b7e0:	mov	w11, #0xffffffff            	// #-1
   3b7e4:	mov	w10, w2
   3b7e8:	mov	x29, sp
   3b7ec:	add	x8, x9, x8, lsl #3
   3b7f0:	ldp	w9, w8, [x8]
   3b7f4:	lsl	w8, w11, w8
   3b7f8:	lsr	x9, x10, x9
   3b7fc:	mvn	w8, w8
   3b800:	and	x8, x9, x8
   3b804:	cmp	w8, #0x4
   3b808:	b.cs	3b824 <aarch64_ext_imm_rotate2@@Base+0x54>  // b.hs, b.nlast
   3b80c:	mov	w9, #0x5a                  	// #90
   3b810:	mul	x8, x8, x9
   3b814:	mov	w0, #0x1                   	// #1
   3b818:	str	x8, [x1, #16]
   3b81c:	ldp	x29, x30, [sp], #16
   3b820:	ret
   3b824:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3b828:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3b82c:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3b830:	add	x0, x0, #0xd9d
   3b834:	add	x1, x1, #0xc70
   3b838:	add	x3, x3, #0x2bb
   3b83c:	mov	w2, #0x319                 	// #793
   3b840:	bl	35b90 <__assert_fail@plt>

000000000003b844 <aarch64_ext_fbits@@Base>:
   3b844:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b848:	ldr	x8, [x8, #3944]
   3b84c:	mov	w10, #0xffffffff            	// #-1
   3b850:	mov	w11, #0x40                  	// #64
   3b854:	mov	w0, #0x1                   	// #1
   3b858:	ldr	w9, [x8, #528]
   3b85c:	ldr	w8, [x8, #532]
   3b860:	lsr	w9, w2, w9
   3b864:	lsl	w8, w10, w8
   3b868:	bic	w8, w9, w8
   3b86c:	sub	w8, w11, w8
   3b870:	str	x8, [x1, #16]
   3b874:	ret

000000000003b878 <aarch64_ext_aimm@@Base>:
   3b878:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3b87c:	ldr	x8, [x8, #3944]
   3b880:	mov	w9, #0xffffffff            	// #-1
   3b884:	mov	w12, #0x5                   	// #5
   3b888:	str	w12, [x1, #32]
   3b88c:	ldr	w10, [x8, #280]
   3b890:	ldr	w11, [x8, #284]
   3b894:	lsr	w10, w2, w10
   3b898:	lsl	w11, w9, w11
   3b89c:	bic	w10, w10, w11
   3b8a0:	cmp	w10, #0x1
   3b8a4:	b.ls	3b8b0 <aarch64_ext_aimm@@Base+0x38>  // b.plast
   3b8a8:	mov	w0, wzr
   3b8ac:	ret
   3b8b0:	ldr	w11, [x8, #376]
   3b8b4:	ldr	w8, [x8, #380]
   3b8b8:	cmp	w10, #0x0
   3b8bc:	mov	w10, #0xc                   	// #12
   3b8c0:	mov	w12, w2
   3b8c4:	csel	x10, xzr, x10, eq  // eq = none
   3b8c8:	lsl	w8, w9, w8
   3b8cc:	str	x10, [x1, #40]
   3b8d0:	lsr	x10, x12, x11
   3b8d4:	mvn	w8, w8
   3b8d8:	and	x8, x10, x8
   3b8dc:	mov	w0, #0x1                   	// #1
   3b8e0:	str	x8, [x1, #16]
   3b8e4:	ret

000000000003b8e8 <aarch64_ext_limm@@Base>:
   3b8e8:	stp	x29, x30, [sp, #-32]!
   3b8ec:	stp	x20, x19, [sp, #16]
   3b8f0:	mov	x20, x3
   3b8f4:	ldp	w3, w4, [x0, #20]
   3b8f8:	ldr	w5, [x0, #28]
   3b8fc:	mov	w8, w2
   3b900:	mov	x19, x1
   3b904:	mov	w2, #0x3                   	// #3
   3b908:	mov	w0, w8
   3b90c:	mov	w1, wzr
   3b910:	mov	x29, sp
   3b914:	bl	35480 <extract_fields@plt>
   3b918:	ldrb	w8, [x20, #28]
   3b91c:	mov	w20, w0
   3b920:	mov	w0, w8
   3b924:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3b928:	and	w11, w20, #0x3f
   3b92c:	ubfx	w9, w20, #6, #6
   3b930:	tbnz	w20, #12, 3b964 <aarch64_ext_limm@@Base+0x7c>
   3b934:	cmp	w11, #0x3d
   3b938:	b.hi	3ba80 <aarch64_ext_limm@@Base+0x198>  // b.pmore
   3b93c:	adrp	x8, 54000 <xexit@@Base+0x84c>
   3b940:	add	x8, x8, #0xb40
   3b944:	adr	x10, 3b958 <aarch64_ext_limm@@Base+0x70>
   3b948:	ldrb	w12, [x8, x11]
   3b94c:	add	x10, x10, x12, lsl #2
   3b950:	mov	w8, #0x20                  	// #32
   3b954:	br	x10
   3b958:	and	w11, w20, #0xf
   3b95c:	mov	w8, #0x10                  	// #16
   3b960:	b	3b990 <aarch64_ext_limm@@Base+0xa8>
   3b964:	mov	w8, #0x40                  	// #64
   3b968:	mov	x12, #0xffffffffffffffff    	// #-1
   3b96c:	b	3b9a4 <aarch64_ext_limm@@Base+0xbc>
   3b970:	and	w11, w20, #0x7
   3b974:	mov	w8, #0x8                   	// #8
   3b978:	b	3b990 <aarch64_ext_limm@@Base+0xa8>
   3b97c:	and	w11, w20, #0x3
   3b980:	mov	w8, #0x4                   	// #4
   3b984:	b	3b990 <aarch64_ext_limm@@Base+0xa8>
   3b988:	and	w11, w20, #0x1
   3b98c:	mov	w8, #0x2                   	// #2
   3b990:	mov	x10, #0xffffffffffffffff    	// #-1
   3b994:	sub	w13, w8, #0x1
   3b998:	lsl	x10, x10, x8
   3b99c:	mvn	x12, x10
   3b9a0:	and	w9, w13, w9
   3b9a4:	and	w10, w0, #0xff
   3b9a8:	cmp	w8, w10, lsl #3
   3b9ac:	mov	w0, wzr
   3b9b0:	b.hi	3ba74 <aarch64_ext_limm@@Base+0x18c>  // b.pmore
   3b9b4:	sub	w13, w8, #0x1
   3b9b8:	cmp	w11, w13
   3b9bc:	b.eq	3ba74 <aarch64_ext_limm@@Base+0x18c>  // b.none
   3b9c0:	add	w11, w11, #0x1
   3b9c4:	mov	x13, #0xffffffffffffffff    	// #-1
   3b9c8:	lsl	x11, x13, x11
   3b9cc:	mvn	x11, x11
   3b9d0:	cbz	w9, 3b9e8 <aarch64_ext_limm@@Base+0x100>
   3b9d4:	sub	w13, w8, w9
   3b9d8:	lsl	x13, x11, x13
   3b9dc:	and	x12, x13, x12
   3b9e0:	lsr	x9, x11, x9
   3b9e4:	orr	x11, x12, x9
   3b9e8:	cmp	w8, #0xf
   3b9ec:	b.gt	3ba0c <aarch64_ext_limm@@Base+0x124>
   3b9f0:	cmp	w8, #0x2
   3b9f4:	b.eq	3ba44 <aarch64_ext_limm@@Base+0x15c>  // b.none
   3b9f8:	cmp	w8, #0x4
   3b9fc:	b.eq	3ba48 <aarch64_ext_limm@@Base+0x160>  // b.none
   3ba00:	cmp	w8, #0x8
   3ba04:	b.eq	3ba4c <aarch64_ext_limm@@Base+0x164>  // b.none
   3ba08:	b	3ba24 <aarch64_ext_limm@@Base+0x13c>
   3ba0c:	cmp	w8, #0x10
   3ba10:	b.eq	3ba50 <aarch64_ext_limm@@Base+0x168>  // b.none
   3ba14:	cmp	w8, #0x20
   3ba18:	b.eq	3ba54 <aarch64_ext_limm@@Base+0x16c>  // b.none
   3ba1c:	cmp	w8, #0x40
   3ba20:	b.eq	3ba58 <aarch64_ext_limm@@Base+0x170>  // b.none
   3ba24:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3ba28:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ba2c:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3ba30:	add	x0, x0, #0x5dc
   3ba34:	add	x1, x1, #0xc70
   3ba38:	add	x3, x3, #0x836
   3ba3c:	mov	w2, #0x37f                 	// #895
   3ba40:	bl	35b90 <__assert_fail@plt>
   3ba44:	orr	x11, x11, x11, lsl #2
   3ba48:	orr	x11, x11, x11, lsl #4
   3ba4c:	orr	x11, x11, x11, lsl #8
   3ba50:	orr	x11, x11, x11, lsl #16
   3ba54:	orr	x11, x11, x11, lsl #32
   3ba58:	lsl	w8, w10, #2
   3ba5c:	mov	x9, #0xffffffffffffffff    	// #-1
   3ba60:	lsl	x9, x9, x8
   3ba64:	lsl	x8, x9, x8
   3ba68:	bic	x8, x11, x8
   3ba6c:	mov	w0, #0x1                   	// #1
   3ba70:	str	x8, [x19, #16]
   3ba74:	ldp	x20, x19, [sp, #16]
   3ba78:	ldp	x29, x30, [sp], #32
   3ba7c:	ret
   3ba80:	mov	w0, wzr
   3ba84:	b	3ba74 <aarch64_ext_limm@@Base+0x18c>

000000000003ba88 <aarch64_ext_inv_limm@@Base>:
   3ba88:	stp	x29, x30, [sp, #-32]!
   3ba8c:	str	x19, [sp, #16]
   3ba90:	mov	x29, sp
   3ba94:	mov	x19, x1
   3ba98:	bl	35500 <aarch64_ext_limm@plt>
   3ba9c:	cbz	w0, 3bab0 <aarch64_ext_inv_limm@@Base+0x28>
   3baa0:	ldr	x8, [x19, #16]
   3baa4:	mov	w0, #0x1                   	// #1
   3baa8:	mvn	x8, x8
   3baac:	str	x8, [x19, #16]
   3bab0:	ldr	x19, [sp, #16]
   3bab4:	ldp	x29, x30, [sp], #32
   3bab8:	ret

000000000003babc <aarch64_ext_ft@@Base>:
   3babc:	stp	x29, x30, [sp, #-48]!
   3bac0:	str	x21, [sp, #16]
   3bac4:	stp	x20, x19, [sp, #32]
   3bac8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3bacc:	ldr	x8, [x8, #3944]
   3bad0:	mov	w9, #0xffffffff            	// #-1
   3bad4:	mov	w0, w2
   3bad8:	mov	x19, x1
   3badc:	ldp	w10, w11, [x8, #96]
   3bae0:	mov	x29, sp
   3bae4:	lsr	w10, w2, w10
   3bae8:	lsl	w11, w9, w11
   3baec:	bic	w10, w10, w11
   3baf0:	str	w10, [x1, #16]
   3baf4:	ldr	x10, [x3, #8]
   3baf8:	ldr	w10, [x10, #16]
   3bafc:	sub	w10, w10, #0x3d
   3bb00:	cmp	w10, #0x3
   3bb04:	b.hi	3bb30 <aarch64_ext_ft@@Base+0x74>  // b.pmore
   3bb08:	ldr	w10, [x8, #296]
   3bb0c:	ldr	w8, [x8, #300]
   3bb10:	lsr	w10, w0, w10
   3bb14:	lsl	w8, w9, w8
   3bb18:	bic	w8, w10, w8
   3bb1c:	cmp	w8, #0x2
   3bb20:	b.hi	3bb74 <aarch64_ext_ft@@Base+0xb8>  // b.pmore
   3bb24:	add	w8, w8, #0x7
   3bb28:	strb	w8, [x19, #4]
   3bb2c:	b	3bb6c <aarch64_ext_ft@@Base+0xb0>
   3bb30:	mov	w2, #0x2                   	// #2
   3bb34:	mov	w3, #0x22                  	// #34
   3bb38:	mov	w4, #0x25                  	// #37
   3bb3c:	mov	w1, wzr
   3bb40:	bl	35480 <extract_fields@plt>
   3bb44:	mov	w20, w0
   3bb48:	cmp	w0, #0x4
   3bb4c:	mov	w0, wzr
   3bb50:	b.hi	3bb78 <aarch64_ext_ft@@Base+0xbc>  // b.pmore
   3bb54:	add	w21, w20, #0x5
   3bb58:	mov	w0, w21
   3bb5c:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3bb60:	cmp	w0, w20
   3bb64:	b.ne	3bb88 <aarch64_ext_ft@@Base+0xcc>  // b.any
   3bb68:	strb	w21, [x19, #4]
   3bb6c:	mov	w0, #0x1                   	// #1
   3bb70:	b	3bb78 <aarch64_ext_ft@@Base+0xbc>
   3bb74:	mov	w0, wzr
   3bb78:	ldp	x20, x19, [sp, #32]
   3bb7c:	ldr	x21, [sp, #16]
   3bb80:	ldp	x29, x30, [sp], #48
   3bb84:	ret
   3bb88:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3bb8c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3bb90:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3bb94:	add	x0, x0, #0x683
   3bb98:	add	x1, x1, #0xc70
   3bb9c:	add	x3, x3, #0x6cd
   3bba0:	mov	w2, #0xe6                  	// #230
   3bba4:	bl	35b90 <__assert_fail@plt>

000000000003bba8 <aarch64_ext_addr_simple@@Base>:
   3bba8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3bbac:	ldr	x8, [x8, #3944]
   3bbb0:	mov	w10, #0xffffffff            	// #-1
   3bbb4:	mov	w0, #0x1                   	// #1
   3bbb8:	ldp	w9, w8, [x8, #112]
   3bbbc:	lsr	w9, w2, w9
   3bbc0:	lsl	w8, w10, w8
   3bbc4:	bic	w8, w9, w8
   3bbc8:	str	w8, [x1, #16]
   3bbcc:	ret

000000000003bbd0 <aarch64_ext_addr_offset@@Base>:
   3bbd0:	stp	x29, x30, [sp, #-64]!
   3bbd4:	stp	x22, x21, [sp, #32]
   3bbd8:	stp	x20, x19, [sp, #48]
   3bbdc:	mov	x19, x1
   3bbe0:	ldr	w1, [x1, #8]
   3bbe4:	mov	x21, x0
   3bbe8:	mov	x0, x3
   3bbec:	str	x23, [sp, #16]
   3bbf0:	mov	x29, sp
   3bbf4:	mov	w20, w2
   3bbf8:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3bbfc:	strb	w0, [x19, #4]
   3bc00:	adrp	x22, 96000 <aarch64_operands@@Base+0x16c38>
   3bc04:	ldr	w8, [x21, #20]
   3bc08:	ldr	x22, [x22, #3944]
   3bc0c:	mov	w23, #0xffffffff            	// #-1
   3bc10:	mov	w2, #0x1                   	// #1
   3bc14:	mov	w0, w20
   3bc18:	add	x8, x22, x8, lsl #3
   3bc1c:	ldp	w9, w8, [x8]
   3bc20:	mov	w1, wzr
   3bc24:	lsr	w9, w20, w9
   3bc28:	lsl	w8, w23, w8
   3bc2c:	bic	w8, w9, w8
   3bc30:	str	w8, [x19, #16]
   3bc34:	ldr	w3, [x21, #24]
   3bc38:	bl	35480 <extract_fields@plt>
   3bc3c:	sbfx	w8, w0, #0, #9
   3bc40:	str	w8, [x19, #20]
   3bc44:	ldr	w8, [x21, #28]
   3bc48:	add	x8, x22, x8, lsl #3
   3bc4c:	ldp	w9, w8, [x8]
   3bc50:	lsr	w9, w20, w9
   3bc54:	lsl	w8, w23, w8
   3bc58:	bic	w8, w9, w8
   3bc5c:	cmp	w8, #0x1
   3bc60:	b.ne	3bc70 <aarch64_ext_addr_offset@@Base+0xa0>  // b.any
   3bc64:	ldrb	w8, [x19, #28]
   3bc68:	orr	w8, w8, #0x6
   3bc6c:	strb	w8, [x19, #28]
   3bc70:	ldp	x20, x19, [sp, #48]
   3bc74:	ldp	x22, x21, [sp, #32]
   3bc78:	ldr	x23, [sp, #16]
   3bc7c:	mov	w0, #0x1                   	// #1
   3bc80:	ldp	x29, x30, [sp], #64
   3bc84:	ret

000000000003bc88 <aarch64_ext_addr_regoff@@Base>:
   3bc88:	stp	x29, x30, [sp, #-64]!
   3bc8c:	str	x23, [sp, #16]
   3bc90:	stp	x22, x21, [sp, #32]
   3bc94:	stp	x20, x19, [sp, #48]
   3bc98:	adrp	x22, 96000 <aarch64_operands@@Base+0x16c38>
   3bc9c:	ldr	x22, [x22, #3944]
   3bca0:	mov	w23, #0xffffffff            	// #-1
   3bca4:	mov	x19, x1
   3bca8:	mov	x29, sp
   3bcac:	ldp	w8, w9, [x22, #112]
   3bcb0:	ldp	w10, w11, [x22, #224]
   3bcb4:	mov	x20, x3
   3bcb8:	mov	w21, w2
   3bcbc:	lsr	w8, w2, w8
   3bcc0:	lsl	w9, w23, w9
   3bcc4:	lsr	w10, w2, w10
   3bcc8:	lsl	w11, w23, w11
   3bccc:	bic	w8, w8, w9
   3bcd0:	bic	w9, w10, w11
   3bcd4:	ldp	w10, w11, [x22, #240]
   3bcd8:	stp	w8, w9, [x1, #16]
   3bcdc:	mov	w1, #0x1                   	// #1
   3bce0:	lsr	w8, w2, w10
   3bce4:	lsl	w9, w23, w11
   3bce8:	bic	w0, w8, w9
   3bcec:	bl	35c60 <aarch64_get_operand_modifier_from_value@plt>
   3bcf0:	ldp	w8, w9, [x22, #248]
   3bcf4:	cmp	w0, #0x9
   3bcf8:	mov	w10, #0x5                   	// #5
   3bcfc:	csel	w10, w10, w0, eq  // eq = none
   3bd00:	lsr	w8, w21, w8
   3bd04:	lsl	w9, w23, w9
   3bd08:	bics	wzr, w8, w9
   3bd0c:	str	w10, [x19, #32]
   3bd10:	b.eq	3bd64 <aarch64_ext_addr_regoff@@Base+0xdc>  // b.none
   3bd14:	ldr	w1, [x19, #8]
   3bd18:	mov	x0, x20
   3bd1c:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3bd20:	strb	w0, [x19, #4]
   3bd24:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3bd28:	and	w8, w0, #0xff
   3bd2c:	cmp	w8, #0x11
   3bd30:	b.cs	3bd8c <aarch64_ext_addr_regoff@@Base+0x104>  // b.hs, b.nlast
   3bd34:	sub	w8, w8, #0x1
   3bd38:	mov	w9, #0x808b                	// #32907
   3bd3c:	lsr	x9, x9, x8
   3bd40:	tbz	w9, #0, 3bdac <aarch64_ext_addr_regoff@@Base+0x124>
   3bd44:	adrp	x9, 54000 <xexit@@Base+0x84c>
   3bd48:	add	x9, x9, #0xb30
   3bd4c:	ldrb	w10, [x19, #36]
   3bd50:	ldrb	w8, [x9, x8]
   3bd54:	orr	w9, w10, #0x2
   3bd58:	str	x8, [x19, #40]
   3bd5c:	strb	w9, [x19, #36]
   3bd60:	b	3bd74 <aarch64_ext_addr_regoff@@Base+0xec>
   3bd64:	ldrb	w8, [x19, #36]
   3bd68:	str	xzr, [x19, #40]
   3bd6c:	and	w8, w8, #0xfffffffd
   3bd70:	strb	w8, [x19, #36]
   3bd74:	ldp	x20, x19, [sp, #48]
   3bd78:	ldp	x22, x21, [sp, #32]
   3bd7c:	ldr	x23, [sp, #16]
   3bd80:	mov	w0, #0x1                   	// #1
   3bd84:	ldp	x29, x30, [sp], #64
   3bd88:	ret
   3bd8c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3bd90:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3bd94:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3bd98:	add	x0, x0, #0x5dc
   3bd9c:	add	x1, x1, #0x5b0
   3bda0:	add	x3, x3, #0x6f3
   3bda4:	mov	w2, #0x200                 	// #512
   3bda8:	bl	35b90 <__assert_fail@plt>
   3bdac:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3bdb0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3bdb4:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3bdb8:	add	x0, x0, #0x718
   3bdbc:	add	x1, x1, #0x5b0
   3bdc0:	add	x3, x3, #0x6f3
   3bdc4:	mov	w2, #0x203                 	// #515
   3bdc8:	bl	35b90 <__assert_fail@plt>

000000000003bdcc <aarch64_ext_addr_simm@@Base>:
   3bdcc:	stp	x29, x30, [sp, #-64]!
   3bdd0:	stp	x22, x21, [sp, #32]
   3bdd4:	stp	x20, x19, [sp, #48]
   3bdd8:	mov	x19, x1
   3bddc:	ldr	w1, [x1, #8]
   3bde0:	mov	x21, x0
   3bde4:	mov	x0, x3
   3bde8:	str	x23, [sp, #16]
   3bdec:	mov	x29, sp
   3bdf0:	mov	x22, x3
   3bdf4:	mov	w20, w2
   3bdf8:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3bdfc:	adrp	x23, 96000 <aarch64_operands@@Base+0x16c38>
   3be00:	ldr	x23, [x23, #3944]
   3be04:	mov	w8, #0xffffffff            	// #-1
   3be08:	strb	w0, [x19, #4]
   3be0c:	ldp	w9, w10, [x23, #112]
   3be10:	lsr	w9, w20, w9
   3be14:	lsl	w10, w8, w10
   3be18:	bic	w9, w9, w10
   3be1c:	str	w9, [x19, #16]
   3be20:	ldr	w11, [x21, #20]
   3be24:	add	x9, x23, x11, lsl #3
   3be28:	ldr	w10, [x9, #4]
   3be2c:	sub	w9, w10, #0x1
   3be30:	cmp	w9, #0x20
   3be34:	b.cs	3bf28 <aarch64_ext_addr_simm@@Base+0x15c>  // b.hs, b.nlast
   3be38:	lsl	x11, x11, #3
   3be3c:	lsl	w8, w8, w10
   3be40:	ldr	w10, [x23, x11]
   3be44:	mov	w11, #0x1                   	// #1
   3be48:	mov	w12, w20
   3be4c:	lsl	x9, x11, x9
   3be50:	lsr	x10, x12, x10
   3be54:	lsl	w12, w9, #1
   3be58:	sub	w12, w12, #0x1
   3be5c:	bic	w8, w10, w8
   3be60:	and	w8, w12, w8
   3be64:	and	w11, w0, #0xff
   3be68:	eor	w8, w8, w9
   3be6c:	sub	w8, w8, w9
   3be70:	cmp	w11, #0x19
   3be74:	str	w8, [x19, #20]
   3be78:	b.eq	3be88 <aarch64_ext_addr_simm@@Base+0xbc>  // b.none
   3be7c:	ldr	w8, [x21, #20]
   3be80:	cmp	w8, #0x2c
   3be84:	b.ne	3be9c <aarch64_ext_addr_simm@@Base+0xd0>  // b.any
   3be88:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3be8c:	ldr	w8, [x19, #20]
   3be90:	and	w9, w0, #0xff
   3be94:	mul	w8, w8, w9
   3be98:	str	w8, [x19, #20]
   3be9c:	ldr	x8, [x22, #8]
   3bea0:	ldr	w8, [x8, #16]
   3bea4:	cmp	w8, #0x3e
   3bea8:	b.hi	3bee4 <aarch64_ext_addr_simm@@Base+0x118>  // b.pmore
   3beac:	mov	w9, #0x1                   	// #1
   3beb0:	lsl	x8, x9, x8
   3beb4:	mov	x9, #0x6c00000000000000    	// #7782220156096217088
   3beb8:	tst	x8, x9
   3bebc:	b.eq	3bee4 <aarch64_ext_addr_simm@@Base+0x118>  // b.none
   3bec0:	ldrb	w8, [x19, #28]
   3bec4:	and	w8, w8, #0xfffffffd
   3bec8:	strb	w8, [x19, #28]
   3becc:	ldp	x20, x19, [sp, #48]
   3bed0:	ldp	x22, x21, [sp, #32]
   3bed4:	ldr	x23, [sp, #16]
   3bed8:	mov	w0, #0x1                   	// #1
   3bedc:	ldp	x29, x30, [sp], #64
   3bee0:	ret
   3bee4:	ldrb	w8, [x19, #28]
   3bee8:	mov	w11, #0xffffffff            	// #-1
   3beec:	orr	w9, w8, #0x2
   3bef0:	strb	w9, [x19, #28]
   3bef4:	ldr	w9, [x21, #24]
   3bef8:	add	x9, x23, x9, lsl #3
   3befc:	ldp	w10, w9, [x9]
   3bf00:	lsr	w10, w20, w10
   3bf04:	lsl	w9, w11, w9
   3bf08:	bic	w9, w10, w9
   3bf0c:	cmp	w9, #0x1
   3bf10:	b.ne	3bf1c <aarch64_ext_addr_simm@@Base+0x150>  // b.any
   3bf14:	orr	w8, w8, #0x6
   3bf18:	b	3bec8 <aarch64_ext_addr_simm@@Base+0xfc>
   3bf1c:	mov	w9, #0xa                   	// #10
   3bf20:	orr	w8, w8, w9
   3bf24:	b	3bec8 <aarch64_ext_addr_simm@@Base+0xfc>
   3bf28:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3bf2c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3bf30:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3bf34:	add	x0, x0, #0x7a7
   3bf38:	add	x1, x1, #0xc70
   3bf3c:	add	x3, x3, #0x7ae
   3bf40:	mov	w2, #0xba                  	// #186
   3bf44:	bl	35b90 <__assert_fail@plt>

000000000003bf48 <aarch64_ext_addr_uimm12@@Base>:
   3bf48:	stp	x29, x30, [sp, #-48]!
   3bf4c:	stp	x20, x19, [sp, #32]
   3bf50:	mov	x19, x1
   3bf54:	ldr	w1, [x1, #8]
   3bf58:	str	x21, [sp, #16]
   3bf5c:	mov	x21, x0
   3bf60:	mov	x0, x3
   3bf64:	mov	x29, sp
   3bf68:	mov	w20, w2
   3bf6c:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3bf70:	strb	w0, [x19, #4]
   3bf74:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3bf78:	and	w8, w0, #0xff
   3bf7c:	cmp	w8, #0x11
   3bf80:	b.cs	3bffc <aarch64_ext_addr_uimm12@@Base+0xb4>  // b.hs, b.nlast
   3bf84:	sub	w8, w8, #0x1
   3bf88:	mov	w9, #0x808b                	// #32907
   3bf8c:	lsr	x9, x9, x8
   3bf90:	tbz	w9, #0, 3c01c <aarch64_ext_addr_uimm12@@Base+0xd4>
   3bf94:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3bf98:	ldr	w9, [x21, #20]
   3bf9c:	ldr	x10, [x10, #3944]
   3bfa0:	mov	w12, #0xffffffff            	// #-1
   3bfa4:	mov	w0, #0x1                   	// #1
   3bfa8:	add	x9, x10, x9, lsl #3
   3bfac:	ldp	w11, w9, [x9]
   3bfb0:	lsr	w11, w20, w11
   3bfb4:	lsl	w9, w12, w9
   3bfb8:	bic	w9, w11, w9
   3bfbc:	str	w9, [x19, #16]
   3bfc0:	ldr	w9, [x21, #24]
   3bfc4:	adrp	x11, 54000 <xexit@@Base+0x84c>
   3bfc8:	add	x11, x11, #0xb30
   3bfcc:	ldrb	w8, [x11, x8]
   3bfd0:	add	x9, x10, x9, lsl #3
   3bfd4:	ldp	w10, w9, [x9]
   3bfd8:	ldr	x21, [sp, #16]
   3bfdc:	lsr	w10, w20, w10
   3bfe0:	lsl	w9, w12, w9
   3bfe4:	bic	w9, w10, w9
   3bfe8:	lsl	w8, w9, w8
   3bfec:	str	w8, [x19, #20]
   3bff0:	ldp	x20, x19, [sp, #32]
   3bff4:	ldp	x29, x30, [sp], #48
   3bff8:	ret
   3bffc:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3c000:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3c004:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3c008:	add	x0, x0, #0x5dc
   3c00c:	add	x1, x1, #0x5b0
   3c010:	add	x3, x3, #0x6f3
   3c014:	mov	w2, #0x200                 	// #512
   3c018:	bl	35b90 <__assert_fail@plt>
   3c01c:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3c020:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3c024:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3c028:	add	x0, x0, #0x718
   3c02c:	add	x1, x1, #0x5b0
   3c030:	add	x3, x3, #0x6f3
   3c034:	mov	w2, #0x203                 	// #515
   3c038:	bl	35b90 <__assert_fail@plt>

000000000003c03c <aarch64_ext_addr_simm10@@Base>:
   3c03c:	stp	x29, x30, [sp, #-64]!
   3c040:	stp	x22, x21, [sp, #32]
   3c044:	stp	x20, x19, [sp, #48]
   3c048:	mov	x19, x1
   3c04c:	ldr	w1, [x1, #8]
   3c050:	mov	x21, x0
   3c054:	mov	x0, x3
   3c058:	str	x23, [sp, #16]
   3c05c:	mov	x29, sp
   3c060:	mov	w20, w2
   3c064:	bl	3ad6c <aarch64_ext_reglane@@Base+0x354>
   3c068:	strb	w0, [x19, #4]
   3c06c:	adrp	x22, 96000 <aarch64_operands@@Base+0x16c38>
   3c070:	ldr	w8, [x21, #20]
   3c074:	ldr	x22, [x22, #3944]
   3c078:	mov	w23, #0xffffffff            	// #-1
   3c07c:	mov	w2, #0x2                   	// #2
   3c080:	mov	w0, w20
   3c084:	add	x8, x22, x8, lsl #3
   3c088:	ldp	w9, w8, [x8]
   3c08c:	mov	w1, wzr
   3c090:	lsr	w9, w20, w9
   3c094:	lsl	w8, w23, w8
   3c098:	bic	w8, w9, w8
   3c09c:	str	w8, [x19, #16]
   3c0a0:	ldp	w3, w4, [x21, #24]
   3c0a4:	bl	35480 <extract_fields@plt>
   3c0a8:	sbfiz	w8, w0, #3, #10
   3c0ac:	str	w8, [x19, #20]
   3c0b0:	ldr	w8, [x21, #32]
   3c0b4:	add	x8, x22, x8, lsl #3
   3c0b8:	ldp	w9, w8, [x8]
   3c0bc:	lsr	w9, w20, w9
   3c0c0:	lsl	w8, w23, w8
   3c0c4:	bic	w8, w9, w8
   3c0c8:	cmp	w8, #0x1
   3c0cc:	b.ne	3c0dc <aarch64_ext_addr_simm10@@Base+0xa0>  // b.any
   3c0d0:	ldrb	w8, [x19, #28]
   3c0d4:	orr	w8, w8, #0x6
   3c0d8:	strb	w8, [x19, #28]
   3c0dc:	ldp	x20, x19, [sp, #48]
   3c0e0:	ldp	x22, x21, [sp, #32]
   3c0e4:	ldr	x23, [sp, #16]
   3c0e8:	mov	w0, #0x1                   	// #1
   3c0ec:	ldp	x29, x30, [sp], #64
   3c0f0:	ret

000000000003c0f4 <aarch64_ext_simd_addr_post@@Base>:
   3c0f4:	stp	x29, x30, [sp, #-48]!
   3c0f8:	str	x21, [sp, #16]
   3c0fc:	stp	x20, x19, [sp, #32]
   3c100:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3c104:	ldr	x8, [x3, #8]
   3c108:	ldr	x9, [x9, #3944]
   3c10c:	mov	w13, #0xffffffff            	// #-1
   3c110:	mov	x19, x1
   3c114:	ldr	x8, [x8, #120]
   3c118:	ldp	w10, w12, [x9, #112]
   3c11c:	ldp	w11, w9, [x9, #224]
   3c120:	mov	x29, sp
   3c124:	lsr	w10, w2, w10
   3c128:	lsr	w11, w2, w11
   3c12c:	lsl	w9, w13, w9
   3c130:	lsl	w12, w13, w12
   3c134:	bic	w9, w11, w9
   3c138:	bic	w10, w10, w12
   3c13c:	cmp	w9, #0x1f
   3c140:	stp	w10, w9, [x1, #16]
   3c144:	b.ne	3c174 <aarch64_ext_simd_addr_post@@Base+0x80>  // b.any
   3c148:	ldr	x9, [x3, #8]
   3c14c:	mov	x20, x3
   3c150:	ldr	w9, [x9, #32]
   3c154:	cmp	w9, #0x25
   3c158:	b.ne	3c180 <aarch64_ext_simd_addr_post@@Base+0x8c>  // b.any
   3c15c:	and	x8, x8, #0x7000000
   3c160:	mov	w9, #0x1000000             	// #16777216
   3c164:	cmp	x8, x9
   3c168:	b.ne	3c1b0 <aarch64_ext_simd_addr_post@@Base+0xbc>  // b.any
   3c16c:	mov	w21, #0x1                   	// #1
   3c170:	b	3c1b8 <aarch64_ext_simd_addr_post@@Base+0xc4>
   3c174:	mov	w8, #0x1                   	// #1
   3c178:	str	w8, [x19, #24]
   3c17c:	b	3c1cc <aarch64_ext_simd_addr_post@@Base+0xd8>
   3c180:	ldrh	w8, [x20, #40]
   3c184:	ldrb	w0, [x20, #28]
   3c188:	ubfx	w21, w8, #5, #3
   3c18c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3c190:	ldrb	w8, [x20, #28]
   3c194:	and	w9, w0, #0xff
   3c198:	mul	w20, w21, w9
   3c19c:	mov	w0, w8
   3c1a0:	bl	359c0 <aarch64_get_qualifier_nelem@plt>
   3c1a4:	and	w8, w0, #0xff
   3c1a8:	mul	w8, w20, w8
   3c1ac:	b	3c1c8 <aarch64_ext_simd_addr_post@@Base+0xd4>
   3c1b0:	ldrh	w8, [x20, #40]
   3c1b4:	ubfx	w21, w8, #5, #3
   3c1b8:	ldrb	w0, [x20, #28]
   3c1bc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3c1c0:	and	w8, w0, #0xff
   3c1c4:	mul	w8, w21, w8
   3c1c8:	str	w8, [x19, #20]
   3c1cc:	ldrb	w8, [x19, #28]
   3c1d0:	ldr	x21, [sp, #16]
   3c1d4:	mov	w0, #0x1                   	// #1
   3c1d8:	orr	w8, w8, #0x2
   3c1dc:	strb	w8, [x19, #28]
   3c1e0:	ldp	x20, x19, [sp, #32]
   3c1e4:	ldp	x29, x30, [sp], #48
   3c1e8:	ret

000000000003c1ec <aarch64_ext_cond@@Base>:
   3c1ec:	stp	x29, x30, [sp, #-32]!
   3c1f0:	str	x19, [sp, #16]
   3c1f4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c1f8:	ldr	x8, [x8, #3944]
   3c1fc:	mov	w10, #0xffffffff            	// #-1
   3c200:	mov	x29, sp
   3c204:	mov	x19, x1
   3c208:	ldp	w9, w8, [x8, #184]
   3c20c:	lsr	w9, w2, w9
   3c210:	lsl	w8, w10, w8
   3c214:	bic	w0, w9, w8
   3c218:	bl	35400 <get_cond_from_value@plt>
   3c21c:	mov	x8, x0
   3c220:	str	x8, [x19, #16]
   3c224:	ldr	x19, [sp, #16]
   3c228:	mov	w0, #0x1                   	// #1
   3c22c:	ldp	x29, x30, [sp], #32
   3c230:	ret

000000000003c234 <aarch64_ext_sysreg@@Base>:
   3c234:	stp	x29, x30, [sp, #-32]!
   3c238:	stp	x20, x19, [sp, #16]
   3c23c:	mov	x20, x3
   3c240:	mov	w0, w2
   3c244:	mov	x19, x1
   3c248:	mov	w2, #0x5                   	// #5
   3c24c:	mov	w3, #0x15                  	// #21
   3c250:	mov	w4, #0x14                  	// #20
   3c254:	mov	w5, #0x13                  	// #19
   3c258:	mov	w6, #0x12                  	// #18
   3c25c:	mov	w7, #0x11                  	// #17
   3c260:	mov	w1, wzr
   3c264:	mov	x29, sp
   3c268:	bl	35480 <extract_fields@plt>
   3c26c:	stp	w0, wzr, [x19, #16]
   3c270:	ldr	x8, [x20, #8]
   3c274:	ldr	w9, [x8, #16]
   3c278:	cmp	w9, #0x46
   3c27c:	b.ne	3c2b0 <aarch64_ext_sysreg@@Base+0x7c>  // b.any
   3c280:	ldr	x8, [x8, #120]
   3c284:	mov	w9, #0x40000000            	// #1073741824
   3c288:	and	x8, x8, #0x60000000
   3c28c:	cmp	x8, x9
   3c290:	b.eq	3c2a8 <aarch64_ext_sysreg@@Base+0x74>  // b.none
   3c294:	mov	w9, #0x20000000            	// #536870912
   3c298:	cmp	x8, x9
   3c29c:	b.ne	3c2b0 <aarch64_ext_sysreg@@Base+0x7c>  // b.any
   3c2a0:	mov	w8, #0x8                   	// #8
   3c2a4:	b	3c2ac <aarch64_ext_sysreg@@Base+0x78>
   3c2a8:	mov	w8, #0x10                  	// #16
   3c2ac:	str	w8, [x19, #20]
   3c2b0:	ldp	x20, x19, [sp, #16]
   3c2b4:	mov	w0, #0x1                   	// #1
   3c2b8:	ldp	x29, x30, [sp], #32
   3c2bc:	ret

000000000003c2c0 <aarch64_ext_pstatefield@@Base>:
   3c2c0:	stp	x29, x30, [sp, #-32]!
   3c2c4:	str	x19, [sp, #16]
   3c2c8:	mov	w0, w2
   3c2cc:	mov	x19, x1
   3c2d0:	mov	w2, #0x2                   	// #2
   3c2d4:	mov	w3, #0x14                  	// #20
   3c2d8:	mov	w4, #0x11                  	// #17
   3c2dc:	mov	w1, wzr
   3c2e0:	mov	x29, sp
   3c2e4:	bl	35480 <extract_fields@plt>
   3c2e8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c2ec:	ldr	x8, [x8, #3832]
   3c2f0:	str	w0, [x19, #16]
   3c2f4:	ldr	x9, [x8]
   3c2f8:	cbz	x9, 3c314 <aarch64_ext_pstatefield@@Base+0x54>
   3c2fc:	add	x8, x8, #0x10
   3c300:	ldur	w9, [x8, #-8]
   3c304:	cmp	w9, w0
   3c308:	b.eq	3c31c <aarch64_ext_pstatefield@@Base+0x5c>  // b.none
   3c30c:	ldr	x9, [x8], #16
   3c310:	cbnz	x9, 3c300 <aarch64_ext_pstatefield@@Base+0x40>
   3c314:	mov	w0, wzr
   3c318:	b	3c320 <aarch64_ext_pstatefield@@Base+0x60>
   3c31c:	mov	w0, #0x1                   	// #1
   3c320:	ldr	x19, [sp, #16]
   3c324:	ldp	x29, x30, [sp], #32
   3c328:	ret

000000000003c32c <aarch64_ext_sysins_op@@Base>:
   3c32c:	stp	x29, x30, [sp, #-32]!
   3c330:	str	x19, [sp, #16]
   3c334:	mov	w0, w2
   3c338:	mov	x19, x1
   3c33c:	mov	w2, #0x5                   	// #5
   3c340:	mov	w3, #0x15                  	// #21
   3c344:	mov	w4, #0x14                  	// #20
   3c348:	mov	w5, #0x13                  	// #19
   3c34c:	mov	w6, #0x12                  	// #18
   3c350:	mov	w7, #0x11                  	// #17
   3c354:	mov	w1, wzr
   3c358:	mov	x29, sp
   3c35c:	bl	35480 <extract_fields@plt>
   3c360:	ldr	w8, [x19]
   3c364:	sub	w8, w8, #0x61
   3c368:	cmp	w8, #0x4
   3c36c:	b.hi	3c408 <aarch64_ext_sysins_op@@Base+0xdc>  // b.pmore
   3c370:	adrp	x9, 54000 <xexit@@Base+0x84c>
   3c374:	add	x9, x9, #0xb7e
   3c378:	adr	x10, 3c390 <aarch64_ext_sysins_op@@Base+0x64>
   3c37c:	ldrb	w11, [x9, x8]
   3c380:	add	x10, x10, x11, lsl #2
   3c384:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c388:	ldr	x8, [x8, #3992]
   3c38c:	br	x10
   3c390:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c394:	ldr	x8, [x8, #3920]
   3c398:	b	3c3c0 <aarch64_ext_sysins_op@@Base+0x94>
   3c39c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c3a0:	ldr	x8, [x8, #4064]
   3c3a4:	and	w0, w0, #0xfffffff8
   3c3a8:	b	3c3c0 <aarch64_ext_sysins_op@@Base+0x94>
   3c3ac:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c3b0:	ldr	x8, [x8, #3888]
   3c3b4:	b	3c3c0 <aarch64_ext_sysins_op@@Base+0x94>
   3c3b8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c3bc:	ldr	x8, [x8, #3896]
   3c3c0:	ldr	x9, [x8]
   3c3c4:	cbz	x9, 3c3f8 <aarch64_ext_sysins_op@@Base+0xcc>
   3c3c8:	ldr	w9, [x8, #8]
   3c3cc:	cmp	w9, w0
   3c3d0:	b.eq	3c3ec <aarch64_ext_sysins_op@@Base+0xc0>  // b.none
   3c3d4:	ldr	x9, [x8, #16]
   3c3d8:	cbz	x9, 3c3f8 <aarch64_ext_sysins_op@@Base+0xcc>
   3c3dc:	ldr	w9, [x8, #24]
   3c3e0:	add	x8, x8, #0x10
   3c3e4:	cmp	w9, w0
   3c3e8:	b.ne	3c3d4 <aarch64_ext_sysins_op@@Base+0xa8>  // b.any
   3c3ec:	mov	w0, #0x1                   	// #1
   3c3f0:	str	x8, [x19, #16]
   3c3f4:	b	3c3fc <aarch64_ext_sysins_op@@Base+0xd0>
   3c3f8:	mov	w0, wzr
   3c3fc:	ldr	x19, [sp, #16]
   3c400:	ldp	x29, x30, [sp], #32
   3c404:	ret
   3c408:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3c40c:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3c410:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3c414:	add	x0, x0, #0x5dc
   3c418:	add	x1, x1, #0xc70
   3c41c:	add	x3, x3, #0x350
   3c420:	mov	w2, #0x4e6                 	// #1254
   3c424:	bl	35b90 <__assert_fail@plt>

000000000003c428 <aarch64_ext_barrier@@Base>:
   3c428:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c42c:	ldr	x8, [x8, #3944]
   3c430:	adrp	x12, 96000 <aarch64_operands@@Base+0x16c38>
   3c434:	mov	w11, #0xffffffff            	// #-1
   3c438:	ldr	x12, [x12, #4040]
   3c43c:	ldp	w10, w8, [x8, #144]
   3c440:	mov	w9, w2
   3c444:	mov	w0, #0x1                   	// #1
   3c448:	lsl	w8, w11, w8
   3c44c:	lsr	x9, x9, x10
   3c450:	mvn	w8, w8
   3c454:	and	x8, x9, x8
   3c458:	add	x8, x12, x8, lsl #4
   3c45c:	str	x8, [x1, #16]
   3c460:	ret

000000000003c464 <aarch64_ext_prfop@@Base>:
   3c464:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c468:	ldr	x8, [x8, #3944]
   3c46c:	adrp	x12, 96000 <aarch64_operands@@Base+0x16c38>
   3c470:	mov	w11, #0xffffffff            	// #-1
   3c474:	ldr	x12, [x12, #3960]
   3c478:	ldp	w10, w8, [x8, #96]
   3c47c:	mov	w9, w2
   3c480:	mov	w0, #0x1                   	// #1
   3c484:	lsl	w8, w11, w8
   3c488:	lsr	x9, x9, x10
   3c48c:	mvn	w8, w8
   3c490:	and	x8, x9, x8
   3c494:	add	x8, x12, x8, lsl #4
   3c498:	str	x8, [x1, #16]
   3c49c:	ret

000000000003c4a0 <aarch64_ext_hint@@Base>:
   3c4a0:	stp	x29, x30, [sp, #-32]!
   3c4a4:	str	x19, [sp, #16]
   3c4a8:	mov	w0, w2
   3c4ac:	mov	x19, x1
   3c4b0:	mov	w2, #0x2                   	// #2
   3c4b4:	mov	w3, #0x12                  	// #18
   3c4b8:	mov	w4, #0x11                  	// #17
   3c4bc:	mov	w1, wzr
   3c4c0:	mov	x29, sp
   3c4c4:	bl	35480 <extract_fields@plt>
   3c4c8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c4cc:	ldr	x8, [x8, #4016]
   3c4d0:	ldr	x9, [x8]
   3c4d4:	cbz	x9, 3c510 <aarch64_ext_hint@@Base+0x70>
   3c4d8:	ldrb	w9, [x8, #8]
   3c4dc:	cmp	w0, w9
   3c4e0:	b.eq	3c504 <aarch64_ext_hint@@Base+0x64>  // b.none
   3c4e4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c4e8:	ldr	x8, [x8, #4016]
   3c4ec:	ldr	x9, [x8, #16]
   3c4f0:	cbz	x9, 3c510 <aarch64_ext_hint@@Base+0x70>
   3c4f4:	ldrb	w9, [x8, #24]
   3c4f8:	add	x8, x8, #0x10
   3c4fc:	cmp	w0, w9
   3c500:	b.ne	3c4ec <aarch64_ext_hint@@Base+0x4c>  // b.any
   3c504:	mov	w0, #0x1                   	// #1
   3c508:	str	x8, [x19, #16]
   3c50c:	b	3c514 <aarch64_ext_hint@@Base+0x74>
   3c510:	mov	w0, wzr
   3c514:	ldr	x19, [sp, #16]
   3c518:	ldp	x29, x30, [sp], #32
   3c51c:	ret

000000000003c520 <aarch64_ext_reg_extended@@Base>:
   3c520:	stp	x29, x30, [sp, #-64]!
   3c524:	stp	x24, x23, [sp, #16]
   3c528:	stp	x22, x21, [sp, #32]
   3c52c:	stp	x20, x19, [sp, #48]
   3c530:	adrp	x23, 96000 <aarch64_operands@@Base+0x16c38>
   3c534:	ldr	x23, [x23, #3944]
   3c538:	mov	w24, #0xffffffff            	// #-1
   3c53c:	mov	x19, x1
   3c540:	mov	x29, sp
   3c544:	ldp	w8, w9, [x23, #224]
   3c548:	ldp	w10, w11, [x23, #240]
   3c54c:	mov	x20, x3
   3c550:	mov	w21, w2
   3c554:	lsr	w8, w2, w8
   3c558:	lsl	w9, w24, w9
   3c55c:	bic	w8, w8, w9
   3c560:	str	w8, [x1, #16]
   3c564:	lsr	w8, w2, w10
   3c568:	lsl	w9, w24, w11
   3c56c:	bic	w0, w8, w9
   3c570:	mov	w1, #0x1                   	// #1
   3c574:	mov	w22, #0x1                   	// #1
   3c578:	bl	35c60 <aarch64_get_operand_modifier_from_value@plt>
   3c57c:	ldp	w8, w9, [x23, #176]
   3c580:	ldrb	w10, [x19, #36]
   3c584:	mov	w11, w21
   3c588:	str	w0, [x19, #32]
   3c58c:	lsl	w9, w24, w9
   3c590:	lsr	x8, x11, x8
   3c594:	mvn	w9, w9
   3c598:	orr	w10, w10, #0x1
   3c59c:	and	x8, x8, x9
   3c5a0:	str	x8, [x19, #40]
   3c5a4:	strb	w10, [x19, #36]
   3c5a8:	ldrb	w8, [x20, #28]
   3c5ac:	cbz	w8, 3c5ec <aarch64_ext_reg_extended@@Base+0xcc>
   3c5b0:	strb	w22, [x19, #4]
   3c5b4:	ldrb	w8, [x20, #28]
   3c5b8:	cmp	w8, #0x2
   3c5bc:	b.ne	3c5d4 <aarch64_ext_reg_extended@@Base+0xb4>  // b.any
   3c5c0:	orr	w8, w0, #0x4
   3c5c4:	cmp	w8, #0xd
   3c5c8:	b.ne	3c5d4 <aarch64_ext_reg_extended@@Base+0xb4>  // b.any
   3c5cc:	mov	w8, #0x2                   	// #2
   3c5d0:	strb	w8, [x19, #4]
   3c5d4:	ldp	x20, x19, [sp, #48]
   3c5d8:	ldp	x22, x21, [sp, #32]
   3c5dc:	ldp	x24, x23, [sp, #16]
   3c5e0:	mov	w0, #0x1                   	// #1
   3c5e4:	ldp	x29, x30, [sp], #64
   3c5e8:	ret
   3c5ec:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3c5f0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3c5f4:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3c5f8:	add	x0, x0, #0x3dd
   3c5fc:	add	x1, x1, #0xc70
   3c600:	add	x3, x3, #0x411
   3c604:	mov	w2, #0x547                 	// #1351
   3c608:	bl	35b90 <__assert_fail@plt>

000000000003c60c <aarch64_ext_reg_shifted@@Base>:
   3c60c:	stp	x29, x30, [sp, #-64]!
   3c610:	str	x23, [sp, #16]
   3c614:	stp	x22, x21, [sp, #32]
   3c618:	stp	x20, x19, [sp, #48]
   3c61c:	adrp	x23, 96000 <aarch64_operands@@Base+0x16c38>
   3c620:	ldr	x23, [x23, #3944]
   3c624:	mov	w22, #0xffffffff            	// #-1
   3c628:	mov	x19, x1
   3c62c:	mov	x29, sp
   3c630:	ldp	w8, w9, [x23, #224]
   3c634:	ldr	w10, [x23, #280]
   3c638:	ldr	w11, [x23, #284]
   3c63c:	mov	x21, x3
   3c640:	lsr	w8, w2, w8
   3c644:	lsl	w9, w22, w9
   3c648:	bic	w8, w8, w9
   3c64c:	str	w8, [x1, #16]
   3c650:	lsr	w8, w2, w10
   3c654:	lsl	w9, w22, w11
   3c658:	bic	w0, w8, w9
   3c65c:	mov	w1, wzr
   3c660:	mov	w20, w2
   3c664:	bl	35c60 <aarch64_get_operand_modifier_from_value@plt>
   3c668:	cmp	w0, #0x2
   3c66c:	str	w0, [x19, #32]
   3c670:	b.ne	3c684 <aarch64_ext_reg_shifted@@Base+0x78>  // b.any
   3c674:	ldr	x8, [x21, #8]
   3c678:	ldr	w8, [x8, #16]
   3c67c:	cmp	w8, #0x42
   3c680:	b.ne	3c6b8 <aarch64_ext_reg_shifted@@Base+0xac>  // b.any
   3c684:	ldr	w9, [x23, #308]
   3c688:	ldr	w8, [x23, #304]
   3c68c:	ldrb	w10, [x19, #36]
   3c690:	mov	w11, w20
   3c694:	lsl	w9, w22, w9
   3c698:	lsr	x8, x11, x8
   3c69c:	mvn	w9, w9
   3c6a0:	orr	w10, w10, #0x1
   3c6a4:	and	x8, x8, x9
   3c6a8:	mov	w0, #0x1                   	// #1
   3c6ac:	strb	w10, [x19, #36]
   3c6b0:	str	x8, [x19, #40]
   3c6b4:	b	3c6bc <aarch64_ext_reg_shifted@@Base+0xb0>
   3c6b8:	mov	w0, wzr
   3c6bc:	ldp	x20, x19, [sp, #48]
   3c6c0:	ldp	x22, x21, [sp, #32]
   3c6c4:	ldr	x23, [sp, #16]
   3c6c8:	ldp	x29, x30, [sp], #64
   3c6cc:	ret

000000000003c6d0 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   3c6d0:	stp	x29, x30, [sp, #-16]!
   3c6d4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c6d8:	ldr	x8, [x8, #3944]
   3c6dc:	mov	w10, #0xffffffff            	// #-1
   3c6e0:	mov	x29, sp
   3c6e4:	ldr	w9, [x8, #776]
   3c6e8:	ldr	w8, [x8, #780]
   3c6ec:	lsr	w9, w2, w9
   3c6f0:	lsl	w8, w10, w8
   3c6f4:	bic	w8, w9, w8
   3c6f8:	add	w8, w8, #0x8
   3c6fc:	and	w8, w8, #0xf
   3c700:	sub	w8, w8, #0x8
   3c704:	sxtw	x3, w8
   3c708:	bl	3c718 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x48>
   3c70c:	mov	w0, #0x1                   	// #1
   3c710:	ldp	x29, x30, [sp], #16
   3c714:	ret
   3c718:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3c71c:	ldr	w8, [x0, #20]
   3c720:	ldr	x9, [x9, #3944]
   3c724:	mov	w10, #0xffffffff            	// #-1
   3c728:	add	x8, x9, x8, lsl #3
   3c72c:	ldp	w9, w8, [x8]
   3c730:	lsr	w9, w2, w9
   3c734:	lsl	w8, w10, w8
   3c738:	bic	w8, w9, w8
   3c73c:	str	w8, [x1, #16]
   3c740:	ldr	w8, [x0, #16]
   3c744:	ldrb	w10, [x1, #28]
   3c748:	ubfx	w8, w8, #5, #3
   3c74c:	and	w9, w10, #0xfffffff9
   3c750:	add	w8, w8, #0x1
   3c754:	orr	w9, w9, #0x4
   3c758:	mul	w8, w8, w3
   3c75c:	stp	w8, wzr, [x1, #20]
   3c760:	strb	w9, [x1, #28]
   3c764:	cbz	x3, 3c770 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0xa0>
   3c768:	mov	w9, #0xf                   	// #15
   3c76c:	str	w9, [x1, #32]
   3c770:	ldrb	w10, [x1, #36]
   3c774:	mov	w9, #0x1                   	// #1
   3c778:	cmp	w8, #0x0
   3c77c:	str	x9, [x1, #40]
   3c780:	cset	w8, ne  // ne = any
   3c784:	and	w9, w10, #0xfc
   3c788:	orr	w8, w9, w8
   3c78c:	strb	w8, [x1, #36]
   3c790:	ret

000000000003c794 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   3c794:	stp	x29, x30, [sp, #-16]!
   3c798:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c79c:	ldr	x8, [x8, #3944]
   3c7a0:	mov	w10, #0xffffffff            	// #-1
   3c7a4:	mov	x29, sp
   3c7a8:	ldr	w9, [x8, #800]
   3c7ac:	ldr	w8, [x8, #804]
   3c7b0:	lsr	w9, w2, w9
   3c7b4:	lsl	w8, w10, w8
   3c7b8:	bic	w8, w9, w8
   3c7bc:	add	w8, w8, #0x20
   3c7c0:	and	w8, w8, #0x3f
   3c7c4:	sub	w8, w8, #0x20
   3c7c8:	sxtw	x3, w8
   3c7cc:	bl	3c718 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x48>
   3c7d0:	mov	w0, #0x1                   	// #1
   3c7d4:	ldp	x29, x30, [sp], #16
   3c7d8:	ret

000000000003c7dc <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   3c7dc:	stp	x29, x30, [sp, #-48]!
   3c7e0:	stp	x20, x19, [sp, #32]
   3c7e4:	mov	w19, w2
   3c7e8:	str	x21, [sp, #16]
   3c7ec:	mov	x20, x1
   3c7f0:	mov	x21, x0
   3c7f4:	mov	w2, #0x2                   	// #2
   3c7f8:	mov	w3, #0x64                  	// #100
   3c7fc:	mov	w4, #0x16                  	// #22
   3c800:	mov	w0, w19
   3c804:	mov	w1, wzr
   3c808:	mov	x29, sp
   3c80c:	bl	35480 <extract_fields@plt>
   3c810:	add	w8, w0, #0x100
   3c814:	and	w8, w8, #0x1ff
   3c818:	sub	w8, w8, #0x100
   3c81c:	sxtw	x3, w8
   3c820:	mov	x0, x21
   3c824:	mov	x1, x20
   3c828:	mov	w2, w19
   3c82c:	bl	3c718 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x48>
   3c830:	ldp	x20, x19, [sp, #32]
   3c834:	ldr	x21, [sp, #16]
   3c838:	mov	w0, #0x1                   	// #1
   3c83c:	ldp	x29, x30, [sp], #48
   3c840:	ret

000000000003c844 <aarch64_ext_sve_addr_ri_s4@@Base>:
   3c844:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c848:	ldr	x8, [x8, #3944]
   3c84c:	ldr	w9, [x0, #20]
   3c850:	mov	w10, w2
   3c854:	ldr	w11, [x8, #776]
   3c858:	ldr	w12, [x8, #780]
   3c85c:	add	x8, x8, x9, lsl #3
   3c860:	mov	w9, #0xffffffff            	// #-1
   3c864:	lsr	x10, x10, x11
   3c868:	ldp	w11, w8, [x8]
   3c86c:	lsl	w12, w9, w12
   3c870:	bic	w10, w10, w12
   3c874:	ldrb	w12, [x1, #28]
   3c878:	lsr	w11, w2, w11
   3c87c:	lsl	w8, w9, w8
   3c880:	bic	w8, w11, w8
   3c884:	str	w8, [x1, #16]
   3c888:	ldr	w8, [x0, #16]
   3c88c:	ldrb	w9, [x1, #36]
   3c890:	and	w10, w10, #0xf
   3c894:	mov	x11, #0xfffffff800000000    	// #-34359738368
   3c898:	eor	w10, w10, #0x8
   3c89c:	add	x10, x11, x10, lsl #32
   3c8a0:	and	w12, w12, #0xfffffff9
   3c8a4:	lsr	x10, x10, #32
   3c8a8:	ubfx	w8, w8, #5, #3
   3c8ac:	and	w9, w9, #0xfc
   3c8b0:	orr	w12, w12, #0x4
   3c8b4:	lsl	w8, w10, w8
   3c8b8:	mov	w0, #0x1                   	// #1
   3c8bc:	strb	w12, [x1, #28]
   3c8c0:	stp	w8, wzr, [x1, #20]
   3c8c4:	strb	w9, [x1, #36]
   3c8c8:	ret

000000000003c8cc <aarch64_ext_sve_addr_ri_u6@@Base>:
   3c8cc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c8d0:	ldr	x8, [x8, #3944]
   3c8d4:	ldr	w9, [x0, #20]
   3c8d8:	mov	w10, #0xffffffff            	// #-1
   3c8dc:	ldrb	w11, [x1, #28]
   3c8e0:	ldr	w12, [x8, #800]
   3c8e4:	add	x9, x8, x9, lsl #3
   3c8e8:	ldp	w13, w9, [x9]
   3c8ec:	ldr	w8, [x8, #804]
   3c8f0:	ldrb	w14, [x1, #36]
   3c8f4:	lsr	w12, w2, w12
   3c8f8:	lsr	w13, w2, w13
   3c8fc:	lsl	w9, w10, w9
   3c900:	bic	w9, w13, w9
   3c904:	str	w9, [x1, #16]
   3c908:	ldr	w9, [x0, #16]
   3c90c:	lsl	w8, w10, w8
   3c910:	and	w10, w11, #0xfffffff9
   3c914:	bic	w8, w12, w8
   3c918:	ubfx	w9, w9, #5, #3
   3c91c:	and	w11, w14, #0xfc
   3c920:	orr	w10, w10, #0x4
   3c924:	lsl	w8, w8, w9
   3c928:	mov	w0, #0x1                   	// #1
   3c92c:	strb	w10, [x1, #28]
   3c930:	stp	w8, wzr, [x1, #20]
   3c934:	strb	w11, [x1, #36]
   3c938:	ret

000000000003c93c <aarch64_ext_sve_addr_rr_lsl@@Base>:
   3c93c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3c940:	ldr	w9, [x0, #24]
   3c944:	ldr	x8, [x8, #3944]
   3c948:	add	x9, x8, x9, lsl #3
   3c94c:	ldp	w10, w11, [x9]
   3c950:	mov	w9, #0xffffffff            	// #-1
   3c954:	lsr	w10, w2, w10
   3c958:	lsl	w11, w9, w11
   3c95c:	bic	w10, w10, w11
   3c960:	cmp	w10, #0x1f
   3c964:	b.ne	3c970 <aarch64_ext_sve_addr_rr_lsl@@Base+0x34>  // b.any
   3c968:	ldrb	w11, [x0, #17]
   3c96c:	tbnz	w11, #0, 3c9dc <aarch64_ext_sve_addr_rr_lsl@@Base+0xa0>
   3c970:	ldr	w11, [x0, #20]
   3c974:	ldrb	w12, [x1, #28]
   3c978:	mov	w13, #0x5                   	// #5
   3c97c:	str	w13, [x1, #32]
   3c980:	add	x8, x8, x11, lsl #3
   3c984:	and	w11, w12, #0xfffffff9
   3c988:	orr	w11, w11, #0x4
   3c98c:	ldr	w12, [x8]
   3c990:	strb	w11, [x1, #28]
   3c994:	ldr	w11, [x8, #4]
   3c998:	mov	w8, #0x1                   	// #1
   3c99c:	lsr	w12, w2, w12
   3c9a0:	stp	w10, w8, [x1, #20]
   3c9a4:	lsl	w9, w9, w11
   3c9a8:	bic	w9, w12, w9
   3c9ac:	str	w9, [x1, #16]
   3c9b0:	ldr	w9, [x0, #16]
   3c9b4:	ldrb	w10, [x1, #36]
   3c9b8:	ubfx	x9, x9, #5, #3
   3c9bc:	cmp	w9, #0x0
   3c9c0:	str	x9, [x1, #40]
   3c9c4:	cset	w9, ne  // ne = any
   3c9c8:	and	w10, w10, #0xfc
   3c9cc:	orr	w10, w10, w9
   3c9d0:	bfi	w10, w9, #1, #1
   3c9d4:	strb	w10, [x1, #36]
   3c9d8:	b	3c9e0 <aarch64_ext_sve_addr_rr_lsl@@Base+0xa4>
   3c9dc:	mov	w8, wzr
   3c9e0:	mov	w0, w8
   3c9e4:	ret

000000000003c9e8 <aarch64_ext_sve_addr_rz_xtw@@Base>:
   3c9e8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3c9ec:	ldr	w8, [x0, #20]
   3c9f0:	ldr	x9, [x9, #3944]
   3c9f4:	mov	w11, #0xffffffff            	// #-1
   3c9f8:	ldrb	w12, [x1, #28]
   3c9fc:	add	x8, x9, x8, lsl #3
   3ca00:	ldp	w10, w8, [x8]
   3ca04:	lsr	w10, w2, w10
   3ca08:	lsl	w8, w11, w8
   3ca0c:	bic	w8, w10, w8
   3ca10:	str	w8, [x1, #16]
   3ca14:	ldr	w8, [x0, #24]
   3ca18:	and	w10, w12, #0xfffffff9
   3ca1c:	orr	w10, w10, #0x4
   3ca20:	strb	w10, [x1, #28]
   3ca24:	add	x8, x9, x8, lsl #3
   3ca28:	ldp	w12, w8, [x8]
   3ca2c:	lsr	w10, w2, w12
   3ca30:	lsl	w8, w11, w8
   3ca34:	bic	w8, w10, w8
   3ca38:	mov	w10, #0x1                   	// #1
   3ca3c:	stp	w8, w10, [x1, #20]
   3ca40:	ldr	w8, [x0, #28]
   3ca44:	mov	w10, #0xc                   	// #12
   3ca48:	mov	w12, #0x8                   	// #8
   3ca4c:	add	x8, x9, x8, lsl #3
   3ca50:	ldp	w9, w8, [x8]
   3ca54:	lsr	w9, w2, w9
   3ca58:	lsl	w8, w11, w8
   3ca5c:	bics	wzr, w9, w8
   3ca60:	csel	w8, w12, w10, eq  // eq = none
   3ca64:	str	w8, [x1, #32]
   3ca68:	ldr	w8, [x0, #16]
   3ca6c:	ldrb	w11, [x1, #36]
   3ca70:	mov	w0, #0x1                   	// #1
   3ca74:	ubfx	x8, x8, #5, #3
   3ca78:	cmp	w8, #0x0
   3ca7c:	and	w9, w11, #0xfc
   3ca80:	str	x8, [x1, #40]
   3ca84:	cset	w8, ne  // ne = any
   3ca88:	bfi	w9, w8, #1, #1
   3ca8c:	orr	w8, w9, #0x1
   3ca90:	strb	w8, [x1, #36]
   3ca94:	ret

000000000003ca98 <aarch64_ext_sve_addr_zi_u5@@Base>:
   3ca98:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3ca9c:	ldr	x8, [x8, #3944]
   3caa0:	ldr	w9, [x0, #20]
   3caa4:	mov	w10, #0xffffffff            	// #-1
   3caa8:	ldrb	w11, [x1, #28]
   3caac:	ldr	w12, [x8, #344]
   3cab0:	add	x9, x8, x9, lsl #3
   3cab4:	ldp	w13, w9, [x9]
   3cab8:	ldr	w8, [x8, #348]
   3cabc:	ldrb	w14, [x1, #36]
   3cac0:	lsr	w12, w2, w12
   3cac4:	lsr	w13, w2, w13
   3cac8:	lsl	w9, w10, w9
   3cacc:	bic	w9, w13, w9
   3cad0:	str	w9, [x1, #16]
   3cad4:	ldr	w9, [x0, #16]
   3cad8:	lsl	w8, w10, w8
   3cadc:	and	w10, w11, #0xfffffff9
   3cae0:	bic	w8, w12, w8
   3cae4:	ubfx	w9, w9, #5, #3
   3cae8:	and	w11, w14, #0xfc
   3caec:	orr	w10, w10, #0x4
   3caf0:	lsl	w8, w8, w9
   3caf4:	mov	w0, #0x1                   	// #1
   3caf8:	strb	w10, [x1, #28]
   3cafc:	stp	w8, wzr, [x1, #20]
   3cb00:	strb	w11, [x1, #36]
   3cb04:	ret

000000000003cb08 <aarch64_ext_sve_addr_zz_lsl@@Base>:
   3cb08:	stp	x29, x30, [sp, #-16]!
   3cb0c:	mov	w3, #0x5                   	// #5
   3cb10:	mov	x29, sp
   3cb14:	bl	3cb24 <aarch64_ext_sve_addr_zz_lsl@@Base+0x1c>
   3cb18:	mov	w0, #0x1                   	// #1
   3cb1c:	ldp	x29, x30, [sp], #16
   3cb20:	ret
   3cb24:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3cb28:	ldr	w9, [x0, #20]
   3cb2c:	ldr	x8, [x8, #3944]
   3cb30:	mov	w10, #0xffffffff            	// #-1
   3cb34:	mov	w12, w2
   3cb38:	ldrb	w14, [x1, #36]
   3cb3c:	ldr	w15, [x8, #852]
   3cb40:	ldr	w13, [x8, #848]
   3cb44:	add	x9, x8, x9, lsl #3
   3cb48:	cmp	w3, #0x5
   3cb4c:	lsl	w15, w10, w15
   3cb50:	lsr	x12, x12, x13
   3cb54:	mvn	w15, w15
   3cb58:	and	x12, x12, x15
   3cb5c:	ldp	w15, w9, [x9]
   3cb60:	cset	w13, ne  // ne = any
   3cb64:	cmp	w12, #0x0
   3cb68:	and	w14, w14, #0xfc
   3cb6c:	lsr	w15, w2, w15
   3cb70:	lsl	w9, w10, w9
   3cb74:	bic	w9, w15, w9
   3cb78:	cset	w15, ne  // ne = any
   3cb7c:	ldrb	w11, [x1, #28]
   3cb80:	orr	w13, w13, w15
   3cb84:	bfi	w14, w15, #1, #1
   3cb88:	str	w9, [x1, #16]
   3cb8c:	orr	w9, w14, w13
   3cb90:	ldr	w13, [x0, #24]
   3cb94:	and	w11, w11, #0xfffffff9
   3cb98:	orr	w11, w11, #0x4
   3cb9c:	strb	w11, [x1, #28]
   3cba0:	add	x8, x8, x13, lsl #3
   3cba4:	ldp	w11, w8, [x8]
   3cba8:	mov	w13, #0x1                   	// #1
   3cbac:	str	w3, [x1, #32]
   3cbb0:	str	x12, [x1, #40]
   3cbb4:	lsr	w11, w2, w11
   3cbb8:	lsl	w8, w10, w8
   3cbbc:	bic	w8, w11, w8
   3cbc0:	stp	w8, w13, [x1, #20]
   3cbc4:	strb	w9, [x1, #36]
   3cbc8:	ret

000000000003cbcc <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   3cbcc:	stp	x29, x30, [sp, #-16]!
   3cbd0:	mov	w3, #0xc                   	// #12
   3cbd4:	mov	x29, sp
   3cbd8:	bl	3cb24 <aarch64_ext_sve_addr_zz_lsl@@Base+0x1c>
   3cbdc:	mov	w0, #0x1                   	// #1
   3cbe0:	ldp	x29, x30, [sp], #16
   3cbe4:	ret

000000000003cbe8 <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   3cbe8:	stp	x29, x30, [sp, #-16]!
   3cbec:	mov	w3, #0x8                   	// #8
   3cbf0:	mov	x29, sp
   3cbf4:	bl	3cb24 <aarch64_ext_sve_addr_zz_lsl@@Base+0x1c>
   3cbf8:	mov	w0, #0x1                   	// #1
   3cbfc:	ldp	x29, x30, [sp], #16
   3cc00:	ret

000000000003cc04 <aarch64_ext_sve_aimm@@Base>:
   3cc04:	stp	x29, x30, [sp, #-32]!
   3cc08:	str	x19, [sp, #16]
   3cc0c:	mov	x29, sp
   3cc10:	mov	x19, x1
   3cc14:	bl	35800 <aarch64_ext_imm@plt>
   3cc18:	ldrb	w1, [x19, #16]
   3cc1c:	mov	x0, x19
   3cc20:	bl	3cc34 <aarch64_ext_sve_aimm@@Base+0x30>
   3cc24:	ldr	x19, [sp, #16]
   3cc28:	mov	w0, #0x1                   	// #1
   3cc2c:	ldp	x29, x30, [sp], #32
   3cc30:	ret
   3cc34:	ldrb	w9, [x0, #17]
   3cc38:	mov	w10, #0x5                   	// #5
   3cc3c:	str	w10, [x0, #32]
   3cc40:	str	xzr, [x0, #40]
   3cc44:	tbnz	w9, #0, 3cc50 <aarch64_ext_sve_aimm@@Base+0x4c>
   3cc48:	mov	x8, xzr
   3cc4c:	b	3cc68 <aarch64_ext_sve_aimm@@Base+0x64>
   3cc50:	cbz	x1, 3cc60 <aarch64_ext_sve_aimm@@Base+0x5c>
   3cc54:	mov	x8, xzr
   3cc58:	lsl	x1, x1, #8
   3cc5c:	b	3cc68 <aarch64_ext_sve_aimm@@Base+0x64>
   3cc60:	mov	w8, #0x8                   	// #8
   3cc64:	str	x8, [x0, #40]
   3cc68:	ldrb	w9, [x0, #36]
   3cc6c:	cmp	x8, #0x0
   3cc70:	cset	w10, ne  // ne = any
   3cc74:	str	x1, [x0, #16]
   3cc78:	and	w9, w9, #0xfc
   3cc7c:	orr	w8, w9, w8, lsr #3
   3cc80:	bfi	w8, w10, #1, #1
   3cc84:	strb	w8, [x0, #36]
   3cc88:	ret

000000000003cc8c <aarch64_ext_sve_asimm@@Base>:
   3cc8c:	stp	x29, x30, [sp, #-32]!
   3cc90:	str	x19, [sp, #16]
   3cc94:	mov	x29, sp
   3cc98:	mov	x19, x1
   3cc9c:	bl	35800 <aarch64_ext_imm@plt>
   3cca0:	ldrsb	x1, [x19, #16]
   3cca4:	mov	x0, x19
   3cca8:	bl	3cc34 <aarch64_ext_sve_aimm@@Base+0x30>
   3ccac:	ldr	x19, [sp, #16]
   3ccb0:	mov	w0, #0x1                   	// #1
   3ccb4:	ldp	x29, x30, [sp], #32
   3ccb8:	ret

000000000003ccbc <aarch64_ext_sve_float_half_one@@Base>:
   3ccbc:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3ccc0:	ldr	w8, [x0, #20]
   3ccc4:	ldr	x9, [x9, #3944]
   3ccc8:	mov	w10, #0xffffffff            	// #-1
   3cccc:	mov	w0, #0x1                   	// #1
   3ccd0:	add	x8, x9, x8, lsl #3
   3ccd4:	ldp	w9, w8, [x8]
   3ccd8:	lsl	w8, w10, w8
   3ccdc:	ldrb	w10, [x1, #24]
   3cce0:	lsr	w9, w2, w9
   3cce4:	bics	wzr, w9, w8
   3cce8:	mov	w8, #0x3f800000            	// #1065353216
   3ccec:	mov	w9, #0x3f000000            	// #1056964608
   3ccf0:	orr	w10, w10, #0x1
   3ccf4:	csel	x8, x9, x8, eq  // eq = none
   3ccf8:	str	x8, [x1, #16]
   3ccfc:	strb	w10, [x1, #24]
   3cd00:	ret

000000000003cd04 <aarch64_ext_sve_float_half_two@@Base>:
   3cd04:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3cd08:	ldr	w8, [x0, #20]
   3cd0c:	ldr	x9, [x9, #3944]
   3cd10:	mov	w10, #0xffffffff            	// #-1
   3cd14:	mov	w0, #0x1                   	// #1
   3cd18:	add	x8, x9, x8, lsl #3
   3cd1c:	ldp	w9, w8, [x8]
   3cd20:	lsl	w8, w10, w8
   3cd24:	ldrb	w10, [x1, #24]
   3cd28:	lsr	w9, w2, w9
   3cd2c:	bics	wzr, w9, w8
   3cd30:	mov	w8, #0x40000000            	// #1073741824
   3cd34:	mov	w9, #0x3f000000            	// #1056964608
   3cd38:	orr	w10, w10, #0x1
   3cd3c:	csel	x8, x9, x8, eq  // eq = none
   3cd40:	str	x8, [x1, #16]
   3cd44:	strb	w10, [x1, #24]
   3cd48:	ret

000000000003cd4c <aarch64_ext_sve_float_zero_one@@Base>:
   3cd4c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3cd50:	ldr	w8, [x0, #20]
   3cd54:	ldr	x9, [x9, #3944]
   3cd58:	ldrb	w11, [x1, #24]
   3cd5c:	mov	w10, #0xffffffff            	// #-1
   3cd60:	mov	w0, #0x1                   	// #1
   3cd64:	add	x8, x9, x8, lsl #3
   3cd68:	ldp	w9, w8, [x8]
   3cd6c:	lsr	w9, w2, w9
   3cd70:	lsl	w8, w10, w8
   3cd74:	bics	wzr, w9, w8
   3cd78:	mov	w8, #0x3f800000            	// #1065353216
   3cd7c:	orr	w9, w11, #0x1
   3cd80:	csel	x8, xzr, x8, eq  // eq = none
   3cd84:	str	x8, [x1, #16]
   3cd88:	strb	w9, [x1, #24]
   3cd8c:	ret

000000000003cd90 <aarch64_ext_sve_index@@Base>:
   3cd90:	stp	x29, x30, [sp, #-32]!
   3cd94:	str	x19, [sp, #16]
   3cd98:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3cd9c:	ldr	w9, [x0, #20]
   3cda0:	ldr	x10, [x10, #3944]
   3cda4:	mov	w11, #0xffffffff            	// #-1
   3cda8:	mov	w8, w2
   3cdac:	mov	x19, x1
   3cdb0:	add	x9, x10, x9, lsl #3
   3cdb4:	ldp	w10, w9, [x9]
   3cdb8:	mov	w3, #0x74                  	// #116
   3cdbc:	mov	w4, #0x2b                  	// #43
   3cdc0:	mov	w0, w8
   3cdc4:	lsr	w10, w2, w10
   3cdc8:	lsl	w9, w11, w9
   3cdcc:	bic	w9, w10, w9
   3cdd0:	str	w9, [x1, #16]
   3cdd4:	mov	w2, #0x2                   	// #2
   3cdd8:	mov	w1, wzr
   3cddc:	mov	x29, sp
   3cde0:	bl	35480 <extract_fields@plt>
   3cde4:	tst	w0, #0x1f
   3cde8:	b.eq	3ce10 <aarch64_ext_sve_index@@Base+0x80>  // b.none
   3cdec:	cmp	w0, #0x0
   3cdf0:	cinc	w9, w0, lt  // lt = tstop
   3cdf4:	mov	w8, w0
   3cdf8:	asr	w0, w9, #1
   3cdfc:	tbz	w8, #0, 3cdec <aarch64_ext_sve_index@@Base+0x5c>
   3ce00:	sxtw	x8, w0
   3ce04:	mov	w0, #0x1                   	// #1
   3ce08:	str	x8, [x19, #24]
   3ce0c:	b	3ce14 <aarch64_ext_sve_index@@Base+0x84>
   3ce10:	mov	w0, wzr
   3ce14:	ldr	x19, [sp, #16]
   3ce18:	ldp	x29, x30, [sp], #32
   3ce1c:	ret

000000000003ce20 <aarch64_ext_sve_limm_mov@@Base>:
   3ce20:	stp	x29, x30, [sp, #-64]!
   3ce24:	stp	x22, x21, [sp, #32]
   3ce28:	stp	x20, x19, [sp, #48]
   3ce2c:	ldrb	w8, [x3, #28]
   3ce30:	str	x23, [sp, #16]
   3ce34:	mov	x23, x0
   3ce38:	mov	x29, sp
   3ce3c:	mov	w0, w8
   3ce40:	mov	x21, x3
   3ce44:	mov	w22, w2
   3ce48:	mov	x19, x1
   3ce4c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3ce50:	mov	w20, w0
   3ce54:	mov	x0, x23
   3ce58:	mov	x1, x19
   3ce5c:	mov	w2, w22
   3ce60:	mov	x3, x21
   3ce64:	bl	35500 <aarch64_ext_limm@plt>
   3ce68:	cbz	w0, 3ce80 <aarch64_ext_sve_limm_mov@@Base+0x60>
   3ce6c:	ldr	x0, [x19, #16]
   3ce70:	and	w1, w20, #0xff
   3ce74:	bl	35620 <aarch64_sve_dupm_mov_immediate_p@plt>
   3ce78:	cmp	w0, #0x0
   3ce7c:	cset	w0, ne  // ne = any
   3ce80:	ldp	x20, x19, [sp, #48]
   3ce84:	ldp	x22, x21, [sp, #32]
   3ce88:	ldr	x23, [sp, #16]
   3ce8c:	ldp	x29, x30, [sp], #64
   3ce90:	ret

000000000003ce94 <aarch64_ext_sve_quad_index@@Base>:
   3ce94:	ldr	w9, [x0, #16]
   3ce98:	adrp	x12, 96000 <aarch64_operands@@Base+0x16c38>
   3ce9c:	ldr	x12, [x12, #3944]
   3cea0:	mov	x10, xzr
   3cea4:	mov	w8, wzr
   3cea8:	add	x11, x0, #0x14
   3ceac:	ubfx	x9, x9, #5, #3
   3ceb0:	mov	w13, #0xffffffff            	// #-1
   3ceb4:	ldr	w14, [x11, x10]
   3ceb8:	cbz	w14, 3cee4 <aarch64_ext_sve_quad_index@@Base+0x50>
   3cebc:	add	x14, x12, x14, lsl #3
   3cec0:	ldp	w14, w15, [x14]
   3cec4:	add	x10, x10, #0x4
   3cec8:	cmp	x10, #0x10
   3cecc:	lsl	w8, w8, w15
   3ced0:	lsr	w14, w2, w14
   3ced4:	lsl	w15, w13, w15
   3ced8:	bic	w14, w14, w15
   3cedc:	orr	w8, w14, w8
   3cee0:	b.ne	3ceb4 <aarch64_ext_sve_quad_index@@Base+0x20>  // b.any
   3cee4:	mov	w10, #0xffffffff            	// #-1
   3cee8:	mov	w11, w8
   3ceec:	lsl	w10, w10, w9
   3cef0:	lsr	x9, x11, x9
   3cef4:	bic	w8, w8, w10
   3cef8:	mov	w0, #0x1                   	// #1
   3cefc:	str	w8, [x1, #16]
   3cf00:	str	x9, [x1, #24]
   3cf04:	ret

000000000003cf08 <aarch64_ext_sve_reglist@@Base>:
   3cf08:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3cf0c:	ldr	w8, [x0, #20]
   3cf10:	ldr	x9, [x9, #3944]
   3cf14:	ldrh	w10, [x1, #16]
   3cf18:	mov	w11, #0xffffffff            	// #-1
   3cf1c:	mov	w0, #0x1                   	// #1
   3cf20:	add	x8, x9, x8, lsl #3
   3cf24:	ldp	w9, w8, [x8]
   3cf28:	lsr	w9, w2, w9
   3cf2c:	lsl	w8, w11, w8
   3cf30:	bic	w8, w9, w8
   3cf34:	bfxil	w10, w8, #0, #5
   3cf38:	strh	w10, [x1, #16]
   3cf3c:	ldr	x8, [x3, #8]
   3cf40:	and	w9, w10, #0xffffff1f
   3cf44:	ldr	w8, [x8, #120]
   3cf48:	lsr	w8, w8, #19
   3cf4c:	and	w8, w8, #0xe0
   3cf50:	orr	w8, w9, w8
   3cf54:	strh	w8, [x1, #16]
   3cf58:	ret

000000000003cf5c <aarch64_ext_sve_scale@@Base>:
   3cf5c:	stp	x29, x30, [sp, #-32]!
   3cf60:	stp	x20, x19, [sp, #16]
   3cf64:	mov	x29, sp
   3cf68:	mov	w19, w2
   3cf6c:	mov	x20, x1
   3cf70:	bl	35800 <aarch64_ext_imm@plt>
   3cf74:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3cf78:	ldr	x8, [x8, #3944]
   3cf7c:	mov	w9, #0xe                   	// #14
   3cf80:	str	w9, [x20, #32]
   3cf84:	ldrb	w9, [x20, #36]
   3cf88:	ldr	w10, [x8, #776]
   3cf8c:	ldr	w8, [x8, #780]
   3cf90:	mov	w11, #0xffffffff            	// #-1
   3cf94:	and	w9, w9, #0xfc
   3cf98:	lsr	w10, w19, w10
   3cf9c:	lsl	w8, w11, w8
   3cfa0:	bics	wzr, w10, w8
   3cfa4:	bic	w11, w10, w8
   3cfa8:	cset	w10, ne  // ne = any
   3cfac:	add	w8, w11, #0x1
   3cfb0:	orr	w9, w9, w10
   3cfb4:	sxtw	x8, w8
   3cfb8:	bfi	w9, w10, #1, #1
   3cfbc:	str	x8, [x20, #40]
   3cfc0:	strb	w9, [x20, #36]
   3cfc4:	ldp	x20, x19, [sp, #16]
   3cfc8:	mov	w0, #0x1                   	// #1
   3cfcc:	ldp	x29, x30, [sp], #32
   3cfd0:	ret

000000000003cfd4 <aarch64_ext_sve_shlimm@@Base>:
   3cfd4:	stp	x29, x30, [sp, #-32]!
   3cfd8:	str	x19, [sp, #16]
   3cfdc:	mov	x29, sp
   3cfe0:	mov	x19, x1
   3cfe4:	bl	35800 <aarch64_ext_imm@plt>
   3cfe8:	ldr	x8, [x19, #16]
   3cfec:	cbz	x8, 3d018 <aarch64_ext_sve_shlimm@@Base+0x44>
   3cff0:	mov	x10, x8
   3cff4:	mov	x9, x10
   3cff8:	neg	x10, x10
   3cffc:	and	x10, x9, x10
   3d000:	subs	x10, x9, x10
   3d004:	b.ne	3cff4 <aarch64_ext_sve_shlimm@@Base+0x20>  // b.any
   3d008:	sub	x8, x8, x9
   3d00c:	mov	w0, #0x1                   	// #1
   3d010:	str	x8, [x19, #16]
   3d014:	b	3d01c <aarch64_ext_sve_shlimm@@Base+0x48>
   3d018:	mov	w0, wzr
   3d01c:	ldr	x19, [sp, #16]
   3d020:	ldp	x29, x30, [sp], #32
   3d024:	ret

000000000003d028 <aarch64_ext_sve_shrimm@@Base>:
   3d028:	stp	x29, x30, [sp, #-32]!
   3d02c:	str	x19, [sp, #16]
   3d030:	mov	x29, sp
   3d034:	mov	x19, x1
   3d038:	bl	35800 <aarch64_ext_imm@plt>
   3d03c:	ldr	x8, [x19, #16]
   3d040:	cbz	x8, 3d070 <aarch64_ext_sve_shrimm@@Base+0x48>
   3d044:	mov	x10, x8
   3d048:	mov	x9, x10
   3d04c:	neg	x10, x10
   3d050:	and	x10, x9, x10
   3d054:	subs	x10, x9, x10
   3d058:	b.ne	3d048 <aarch64_ext_sve_shrimm@@Base+0x20>  // b.any
   3d05c:	lsl	x9, x9, #1
   3d060:	sub	x8, x9, x8
   3d064:	mov	w0, #0x1                   	// #1
   3d068:	str	x8, [x19, #16]
   3d06c:	b	3d074 <aarch64_ext_sve_shrimm@@Base+0x4c>
   3d070:	mov	w0, wzr
   3d074:	ldr	x19, [sp, #16]
   3d078:	ldp	x29, x30, [sp], #32
   3d07c:	ret

000000000003d080 <aarch64_decode_insn@@Base>:
   3d080:	stp	x29, x30, [sp, #-64]!
   3d084:	str	x23, [sp, #16]
   3d088:	stp	x22, x21, [sp, #32]
   3d08c:	stp	x20, x19, [sp, #48]
   3d090:	mov	x29, sp
   3d094:	mov	x19, x3
   3d098:	mov	w20, w2
   3d09c:	mov	x21, x1
   3d0a0:	mov	w22, w0
   3d0a4:	bl	35690 <aarch64_opcode_lookup@plt>
   3d0a8:	cbz	x0, 3d0e0 <aarch64_decode_insn@@Base+0x60>
   3d0ac:	mov	x23, x0
   3d0b0:	mov	x0, x23
   3d0b4:	mov	w1, w22
   3d0b8:	mov	x2, x21
   3d0bc:	mov	w3, w20
   3d0c0:	mov	x4, x19
   3d0c4:	bl	3d100 <aarch64_decode_insn@@Base+0x80>
   3d0c8:	cmp	w0, #0x1
   3d0cc:	b.eq	3d0e8 <aarch64_decode_insn@@Base+0x68>  // b.none
   3d0d0:	mov	x0, x23
   3d0d4:	bl	35c10 <aarch64_find_next_opcode@plt>
   3d0d8:	mov	x23, x0
   3d0dc:	cbnz	x0, 3d0b0 <aarch64_decode_insn@@Base+0x30>
   3d0e0:	mov	w0, #0x1                   	// #1
   3d0e4:	b	3d0ec <aarch64_decode_insn@@Base+0x6c>
   3d0e8:	mov	w0, wzr
   3d0ec:	ldp	x20, x19, [sp, #48]
   3d0f0:	ldp	x22, x21, [sp, #32]
   3d0f4:	ldr	x23, [sp, #16]
   3d0f8:	ldp	x29, x30, [sp], #64
   3d0fc:	ret
   3d100:	sub	sp, sp, #0x1d0
   3d104:	stp	x29, x30, [sp, #368]
   3d108:	stp	x28, x27, [sp, #384]
   3d10c:	stp	x26, x25, [sp, #400]
   3d110:	stp	x24, x23, [sp, #416]
   3d114:	stp	x22, x21, [sp, #432]
   3d118:	stp	x20, x19, [sp, #448]
   3d11c:	add	x29, sp, #0x170
   3d120:	cbz	x0, 3e2f0 <aarch64_decode_insn@@Base+0x1270>
   3d124:	mov	x19, x2
   3d128:	cbz	x2, 3e2f0 <aarch64_decode_insn@@Base+0x1270>
   3d12c:	mov	w22, w1
   3d130:	mov	x23, x0
   3d134:	mov	w2, #0x168                 	// #360
   3d138:	mov	x0, x19
   3d13c:	mov	w1, wzr
   3d140:	mov	x20, x4
   3d144:	mov	w21, w3
   3d148:	bl	35550 <memset@plt>
   3d14c:	ldp	w8, w9, [x23, #8]
   3d150:	mov	w0, wzr
   3d154:	eor	w8, w8, w22
   3d158:	tst	w8, w9
   3d15c:	b.ne	3dda0 <aarch64_decode_insn@@Base+0xd20>  // b.any
   3d160:	mov	x8, xzr
   3d164:	add	x9, x19, #0x20
   3d168:	str	x23, [x19, #8]
   3d16c:	str	w22, [x19]
   3d170:	add	x10, x23, x8, lsl #2
   3d174:	ldr	w10, [x10, #32]
   3d178:	cbz	w10, 3d190 <aarch64_decode_insn@@Base+0x110>
   3d17c:	stur	w10, [x9, #-8]
   3d180:	str	w8, [x9], #56
   3d184:	add	x8, x8, #0x1
   3d188:	cmp	x8, #0x6
   3d18c:	b.ne	3d170 <aarch64_decode_insn@@Base+0xf0>  // b.any
   3d190:	ldr	x8, [x23, #120]
   3d194:	mov	w9, #0xff0                 	// #4080
   3d198:	movk	w9, #0x8c0, lsl #16
   3d19c:	mov	x25, x23
   3d1a0:	tst	x8, x9
   3d1a4:	b.eq	3da40 <aarch64_decode_insn@@Base+0x9c0>  // b.none
   3d1a8:	mov	x24, x23
   3d1ac:	tbz	w8, #4, 3d1dc <aarch64_decode_insn@@Base+0x15c>
   3d1b0:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3d1b4:	ldr	x8, [x8, #3944]
   3d1b8:	mov	w10, #0xffffffff            	// #-1
   3d1bc:	ldp	w9, w8, [x8, #8]
   3d1c0:	lsr	w9, w22, w9
   3d1c4:	lsl	w8, w10, w8
   3d1c8:	bic	w0, w9, w8
   3d1cc:	bl	35400 <get_cond_from_value@plt>
   3d1d0:	ldr	x24, [x19, #8]
   3d1d4:	str	x0, [x19, #16]
   3d1d8:	ldr	x8, [x24, #120]
   3d1dc:	tbz	w8, #5, 3d288 <aarch64_decode_insn@@Base+0x208>
   3d1e0:	ldr	w0, [x24, #32]
   3d1e4:	bl	357f0 <aarch64_get_operand_class@plt>
   3d1e8:	cmp	w0, #0x1
   3d1ec:	b.ne	3d1f8 <aarch64_decode_insn@@Base+0x178>  // b.any
   3d1f0:	mov	x27, xzr
   3d1f4:	b	3d20c <aarch64_decode_insn@@Base+0x18c>
   3d1f8:	ldr	w0, [x24, #36]
   3d1fc:	bl	357f0 <aarch64_get_operand_class@plt>
   3d200:	cmp	w0, #0x1
   3d204:	b.ne	3e370 <aarch64_decode_insn@@Base+0x12f0>  // b.any
   3d208:	mov	w27, #0x1                   	// #1
   3d20c:	adrp	x25, 96000 <aarch64_operands@@Base+0x16c38>
   3d210:	ldr	w8, [x19]
   3d214:	ldr	x25, [x25, #3944]
   3d218:	mov	w11, #0xffffffff            	// #-1
   3d21c:	ldr	w9, [x25, #472]
   3d220:	ldr	w10, [x25, #476]
   3d224:	lsr	w8, w8, w9
   3d228:	lsl	w9, w11, w10
   3d22c:	bic	w26, w8, w9
   3d230:	cmp	w26, #0x1
   3d234:	b.hi	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.pmore
   3d238:	add	w24, w26, #0x1
   3d23c:	mov	w0, w24
   3d240:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d244:	cmp	w0, w26
   3d248:	b.ne	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.any
   3d24c:	mov	w8, #0x38                  	// #56
   3d250:	madd	x8, x27, x8, x19
   3d254:	strb	w24, [x8, #28]
   3d258:	ldr	x24, [x19, #8]
   3d25c:	ldr	x8, [x24, #120]
   3d260:	tbz	w8, #23, 3d288 <aarch64_decode_insn@@Base+0x208>
   3d264:	ldr	w9, [x19]
   3d268:	ldr	w10, [x25, #448]
   3d26c:	ldr	w11, [x25, #452]
   3d270:	mov	w12, #0xffffffff            	// #-1
   3d274:	lsr	w9, w9, w10
   3d278:	lsl	w10, w12, w11
   3d27c:	bic	w9, w9, w10
   3d280:	cmp	w9, w26
   3d284:	b.ne	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.any
   3d288:	tbz	w8, #27, 3d30c <aarch64_decode_insn@@Base+0x28c>
   3d28c:	ldr	w0, [x24, #32]
   3d290:	bl	357f0 <aarch64_get_operand_class@plt>
   3d294:	cmp	w0, #0x1
   3d298:	b.ne	3d2a4 <aarch64_decode_insn@@Base+0x224>  // b.any
   3d29c:	mov	x25, xzr
   3d2a0:	b	3d2b8 <aarch64_decode_insn@@Base+0x238>
   3d2a4:	ldr	w0, [x24, #36]
   3d2a8:	bl	357f0 <aarch64_get_operand_class@plt>
   3d2ac:	cmp	w0, #0x1
   3d2b0:	b.ne	3e370 <aarch64_decode_insn@@Base+0x12f0>  // b.any
   3d2b4:	mov	w25, #0x1                   	// #1
   3d2b8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d2bc:	ldr	w8, [x19]
   3d2c0:	ldr	x9, [x9, #3944]
   3d2c4:	mov	w11, #0xffffffff            	// #-1
   3d2c8:	ldr	w10, [x9, #480]
   3d2cc:	ldr	w9, [x9, #484]
   3d2d0:	lsr	w8, w8, w10
   3d2d4:	lsl	w9, w11, w9
   3d2d8:	bic	w26, w8, w9
   3d2dc:	cmp	w26, #0x1
   3d2e0:	b.hi	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.pmore
   3d2e4:	add	w24, w26, #0x1
   3d2e8:	mov	w0, w24
   3d2ec:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d2f0:	cmp	w0, w26
   3d2f4:	b.ne	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.any
   3d2f8:	mov	w8, #0x38                  	// #56
   3d2fc:	madd	x8, x25, x8, x19
   3d300:	strb	w24, [x8, #28]
   3d304:	ldr	x24, [x19, #8]
   3d308:	ldr	x8, [x24, #120]
   3d30c:	tbnz	w8, #6, 3d32c <aarch64_decode_insn@@Base+0x2ac>
   3d310:	tbz	w8, #7, 3d494 <aarch64_decode_insn@@Base+0x414>
   3d314:	ldr	w0, [x24, #36]
   3d318:	bl	357f0 <aarch64_get_operand_class@plt>
   3d31c:	cmp	w0, #0x3
   3d320:	b.ne	3d428 <aarch64_decode_insn@@Base+0x3a8>  // b.any
   3d324:	mov	w8, #0x1                   	// #1
   3d328:	b	3d43c <aarch64_decode_insn@@Base+0x3bc>
   3d32c:	ldp	w1, w8, [x24, #12]
   3d330:	ldr	w0, [x19]
   3d334:	mov	w2, #0x2                   	// #2
   3d338:	mov	w4, #0xb                   	// #11
   3d33c:	sub	w8, w8, #0x12
   3d340:	cmp	w8, #0x4
   3d344:	mov	w8, #0x8                   	// #8
   3d348:	cinc	w25, w8, cc  // cc = lo, ul, last
   3d34c:	mov	w3, w25
   3d350:	bl	35480 <extract_fields@plt>
   3d354:	ldr	x8, [x19, #8]
   3d358:	mov	w24, w0
   3d35c:	mov	w2, #0x2                   	// #2
   3d360:	mov	w4, #0xb                   	// #11
   3d364:	ldr	w8, [x8, #12]
   3d368:	mov	w1, wzr
   3d36c:	mov	w3, w25
   3d370:	mvn	w0, w8
   3d374:	bl	35480 <extract_fields@plt>
   3d378:	ldr	x8, [x19, #8]
   3d37c:	mov	w25, w0
   3d380:	mov	x0, x8
   3d384:	bl	35880 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3d388:	cmp	w25, #0x7
   3d38c:	mov	w26, w0
   3d390:	b.ne	3d3c4 <aarch64_decode_insn@@Base+0x344>  // b.any
   3d394:	cmp	w24, #0x8
   3d398:	b.hi	3e330 <aarch64_decode_insn@@Base+0x12b0>  // b.pmore
   3d39c:	add	w8, w24, #0xd
   3d3a0:	add	w9, w24, #0xe
   3d3a4:	cmp	w8, #0xe
   3d3a8:	csel	w25, w9, w8, hi  // hi = pmore
   3d3ac:	mov	w0, w25
   3d3b0:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d3b4:	cmp	w0, w24
   3d3b8:	b.ne	3e330 <aarch64_decode_insn@@Base+0x12b0>  // b.any
   3d3bc:	sxtw	x27, w26
   3d3c0:	b	3d410 <aarch64_decode_insn@@Base+0x390>
   3d3c4:	ldr	x9, [x19, #8]
   3d3c8:	mov	x8, xzr
   3d3cc:	sxtw	x27, w26
   3d3d0:	mov	x10, sp
   3d3d4:	add	x9, x9, w26, sxtw
   3d3d8:	add	x9, x9, #0x38
   3d3dc:	ldrb	w11, [x9, x8]
   3d3e0:	str	w11, [x10]
   3d3e4:	cbz	w11, 3d3f8 <aarch64_decode_insn@@Base+0x378>
   3d3e8:	add	x8, x8, #0x6
   3d3ec:	cmp	x8, #0x3c
   3d3f0:	add	x10, x10, #0x4
   3d3f4:	b.ne	3d3dc <aarch64_decode_insn@@Base+0x35c>  // b.any
   3d3f8:	mov	x1, sp
   3d3fc:	mov	w0, w24
   3d400:	mov	w2, w25
   3d404:	bl	3ef14 <print_aarch64_disassembler_options@@Base+0xe0>
   3d408:	cbz	w0, 3da34 <aarch64_decode_insn@@Base+0x9b4>
   3d40c:	mov	w25, w0
   3d410:	mov	w8, #0x38                  	// #56
   3d414:	madd	x8, x27, x8, x19
   3d418:	strb	w25, [x8, #28]
   3d41c:	mov	w8, #0x1                   	// #1
   3d420:	cbnz	w8, 3da3c <aarch64_decode_insn@@Base+0x9bc>
   3d424:	b	3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3d428:	ldr	w0, [x24, #32]
   3d42c:	bl	357f0 <aarch64_get_operand_class@plt>
   3d430:	cmp	w0, #0x3
   3d434:	b.ne	3e3f0 <aarch64_decode_insn@@Base+0x1370>  // b.any
   3d438:	mov	x8, xzr
   3d43c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3d440:	ldr	w9, [x19]
   3d444:	ldr	x10, [x10, #3944]
   3d448:	mov	w12, #0xffffffff            	// #-1
   3d44c:	ldr	w11, [x10, #288]
   3d450:	ldr	w10, [x10, #292]
   3d454:	lsr	w9, w9, w11
   3d458:	lsl	w10, w12, w10
   3d45c:	bics	w9, w9, w10
   3d460:	b.eq	3d484 <aarch64_decode_insn@@Base+0x404>  // b.none
   3d464:	cmp	w9, #0x3
   3d468:	b.eq	3d47c <aarch64_decode_insn@@Base+0x3fc>  // b.none
   3d46c:	cmp	w9, #0x1
   3d470:	b.ne	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.any
   3d474:	mov	w9, #0x8                   	// #8
   3d478:	b	3d488 <aarch64_decode_insn@@Base+0x408>
   3d47c:	mov	w9, #0x6                   	// #6
   3d480:	b	3d488 <aarch64_decode_insn@@Base+0x408>
   3d484:	mov	w9, #0x7                   	// #7
   3d488:	mov	w10, #0x38                  	// #56
   3d48c:	madd	x8, x8, x10, x19
   3d490:	strb	w9, [x8, #28]
   3d494:	ldr	x25, [x19, #8]
   3d498:	ldr	x8, [x25, #120]
   3d49c:	tbz	w8, #8, 3d5d4 <aarch64_decode_insn@@Base+0x554>
   3d4a0:	ldr	w0, [x25, #32]
   3d4a4:	bl	357f0 <aarch64_get_operand_class@plt>
   3d4a8:	cmp	w0, #0x6
   3d4ac:	b.ne	3d4c0 <aarch64_decode_insn@@Base+0x440>  // b.any
   3d4b0:	ldrb	w0, [x25, #56]
   3d4b4:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3d4b8:	and	w24, w0, #0xff
   3d4bc:	b	3d4c4 <aarch64_decode_insn@@Base+0x444>
   3d4c0:	mov	w24, wzr
   3d4c4:	ldr	w0, [x25, #36]
   3d4c8:	bl	357f0 <aarch64_get_operand_class@plt>
   3d4cc:	cmp	w0, #0x6
   3d4d0:	b.ne	3d4e4 <aarch64_decode_insn@@Base+0x464>  // b.any
   3d4d4:	ldrb	w0, [x25, #57]
   3d4d8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3d4dc:	and	w8, w0, #0xff
   3d4e0:	b	3d4e8 <aarch64_decode_insn@@Base+0x468>
   3d4e4:	mov	w8, wzr
   3d4e8:	cmp	w8, w24
   3d4ec:	b.ne	3d4f4 <aarch64_decode_insn@@Base+0x474>  // b.any
   3d4f0:	cbz	w8, 3e390 <aarch64_decode_insn@@Base+0x1310>
   3d4f4:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   3d4f8:	ldr	w10, [x19]
   3d4fc:	ldr	x9, [x19, #8]
   3d500:	ldr	x11, [x11, #3944]
   3d504:	cmp	w24, #0x0
   3d508:	cset	w12, eq  // eq = none
   3d50c:	cmp	w24, w8, lsl #1
   3d510:	ldp	w8, w11, [x11, #64]
   3d514:	ldr	w14, [x9, #12]
   3d518:	cset	w13, eq  // eq = none
   3d51c:	orr	w26, w12, w13
   3d520:	mov	w12, #0xffffffff            	// #-1
   3d524:	lsl	w11, w12, w11
   3d528:	mvn	w12, w14
   3d52c:	bic	w10, w10, w14
   3d530:	lsr	w10, w10, w8
   3d534:	lsr	w8, w12, w8
   3d538:	bic	w2, w8, w11
   3d53c:	cmp	w2, #0x3
   3d540:	bic	w24, w10, w11
   3d544:	b.ne	3d584 <aarch64_decode_insn@@Base+0x504>  // b.any
   3d548:	cmp	w24, #0x4
   3d54c:	b.hi	3d564 <aarch64_decode_insn@@Base+0x4e4>  // b.pmore
   3d550:	add	w25, w24, #0x5
   3d554:	mov	w0, w25
   3d558:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d55c:	cmp	w0, w24
   3d560:	b.eq	3d5c0 <aarch64_decode_insn@@Base+0x540>  // b.none
   3d564:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3d568:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3d56c:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3d570:	add	x0, x0, #0x683
   3d574:	add	x1, x1, #0xc70
   3d578:	add	x3, x3, #0x6cd
   3d57c:	mov	w2, #0xe6                  	// #230
   3d580:	bl	35b90 <__assert_fail@plt>
   3d584:	add	x9, x26, x9
   3d588:	mov	x8, xzr
   3d58c:	add	x9, x9, #0x38
   3d590:	mov	x10, sp
   3d594:	ldrb	w11, [x9, x8]
   3d598:	str	w11, [x10]
   3d59c:	cbz	w11, 3d5b0 <aarch64_decode_insn@@Base+0x530>
   3d5a0:	add	x8, x8, #0x6
   3d5a4:	cmp	x8, #0x3c
   3d5a8:	add	x10, x10, #0x4
   3d5ac:	b.ne	3d594 <aarch64_decode_insn@@Base+0x514>  // b.any
   3d5b0:	mov	x1, sp
   3d5b4:	mov	w0, w24
   3d5b8:	bl	3ef14 <print_aarch64_disassembler_options@@Base+0xe0>
   3d5bc:	mov	w25, w0
   3d5c0:	mov	w8, #0x38                  	// #56
   3d5c4:	madd	x8, x26, x8, x19
   3d5c8:	strb	w25, [x8, #28]
   3d5cc:	ldr	x25, [x19, #8]
   3d5d0:	ldr	x8, [x25, #120]
   3d5d4:	tbz	w8, #9, 3d694 <aarch64_decode_insn@@Base+0x614>
   3d5d8:	ldr	w0, [x25, #32]
   3d5dc:	bl	357f0 <aarch64_get_operand_class@plt>
   3d5e0:	cmp	w0, #0x4
   3d5e4:	b.ne	3e3b0 <aarch64_decode_insn@@Base+0x1330>  // b.any
   3d5e8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d5ec:	ldr	w8, [x19]
   3d5f0:	ldr	x9, [x9, #3944]
   3d5f4:	mov	w10, #0xffffffff            	// #-1
   3d5f8:	ldr	w11, [x9, #344]
   3d5fc:	ldr	w12, [x9, #348]
   3d600:	lsr	w11, w8, w11
   3d604:	lsl	w12, w10, w12
   3d608:	bic	w12, w11, w12
   3d60c:	tbnz	w12, #0, 3d63c <aarch64_decode_insn@@Base+0x5bc>
   3d610:	mov	w11, #0xffffffff            	// #-1
   3d614:	cmp	w11, #0x2
   3d618:	b.eq	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.none
   3d61c:	mov	w13, w12
   3d620:	lsr	w12, w12, #1
   3d624:	add	w11, w11, #0x1
   3d628:	tbz	w13, #1, 3d614 <aarch64_decode_insn@@Base+0x594>
   3d62c:	cmp	w11, #0x2
   3d630:	b.hi	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.pmore
   3d634:	add	w11, w11, #0x1
   3d638:	b	3d640 <aarch64_decode_insn@@Base+0x5c0>
   3d63c:	mov	w11, wzr
   3d640:	ldr	x12, [x19, #8]
   3d644:	ldp	w13, w9, [x9, #88]
   3d648:	ldr	w12, [x12, #12]
   3d64c:	lsl	w9, w10, w9
   3d650:	bic	w8, w8, w12
   3d654:	lsr	w8, w8, w13
   3d658:	bic	w8, w8, w9
   3d65c:	orr	w25, w8, w11, lsl #1
   3d660:	cmp	w25, #0x8
   3d664:	b.hi	3e330 <aarch64_decode_insn@@Base+0x12b0>  // b.pmore
   3d668:	add	w8, w25, #0xd
   3d66c:	add	w9, w25, #0xe
   3d670:	cmp	w8, #0xe
   3d674:	csel	w24, w9, w8, hi  // hi = pmore
   3d678:	mov	w0, w24
   3d67c:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d680:	cmp	w0, w25
   3d684:	b.ne	3e330 <aarch64_decode_insn@@Base+0x12b0>  // b.any
   3d688:	ldr	x25, [x19, #8]
   3d68c:	strb	w24, [x19, #28]
   3d690:	ldr	x8, [x25, #120]
   3d694:	tbz	w8, #10, 3d740 <aarch64_decode_insn@@Base+0x6c0>
   3d698:	add	x0, x25, #0x20
   3d69c:	mov	w1, #0x4                   	// #4
   3d6a0:	bl	351f0 <aarch64_operand_index@plt>
   3d6a4:	cmn	w0, #0x1
   3d6a8:	b.eq	3d6d8 <aarch64_decode_insn@@Base+0x658>  // b.none
   3d6ac:	mov	w24, w0
   3d6b0:	cmp	w0, #0x2
   3d6b4:	b.cc	3d6f0 <aarch64_decode_insn@@Base+0x670>  // b.lo, b.ul, b.last
   3d6b8:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3d6bc:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3d6c0:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3d6c4:	add	x0, x0, #0x894
   3d6c8:	add	x1, x1, #0xc70
   3d6cc:	add	x3, x3, #0x951
   3d6d0:	mov	w2, #0x8a7                 	// #2215
   3d6d4:	bl	35b90 <__assert_fail@plt>
   3d6d8:	ldr	x8, [x19, #8]
   3d6dc:	ldr	w0, [x8, #32]
   3d6e0:	bl	357f0 <aarch64_get_operand_class@plt>
   3d6e4:	cmp	w0, #0x1
   3d6e8:	b.ne	3e450 <aarch64_decode_insn@@Base+0x13d0>  // b.any
   3d6ec:	mov	w24, wzr
   3d6f0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d6f4:	ldr	w8, [x19]
   3d6f8:	ldr	x9, [x9, #3944]
   3d6fc:	mov	w11, #0xffffffff            	// #-1
   3d700:	ldp	w10, w9, [x9, #88]
   3d704:	lsr	w8, w8, w10
   3d708:	lsl	w9, w11, w9
   3d70c:	bic	w26, w8, w9
   3d710:	cmp	w26, #0x1
   3d714:	b.hi	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.pmore
   3d718:	add	w25, w26, #0x1
   3d71c:	mov	w0, w25
   3d720:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3d724:	cmp	w0, w26
   3d728:	b.ne	3e310 <aarch64_decode_insn@@Base+0x1290>  // b.any
   3d72c:	mov	w8, #0x38                  	// #56
   3d730:	umaddl	x8, w24, w8, x19
   3d734:	strb	w25, [x8, #28]
   3d738:	ldr	x25, [x19, #8]
   3d73c:	ldr	x8, [x25, #120]
   3d740:	tbz	w8, #11, 3d7a4 <aarch64_decode_insn@@Base+0x724>
   3d744:	ldr	w0, [x25, #32]
   3d748:	bl	357f0 <aarch64_get_operand_class@plt>
   3d74c:	cmp	w0, #0x1
   3d750:	b.ne	3e3d0 <aarch64_decode_insn@@Base+0x1350>  // b.any
   3d754:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3d758:	ldr	x8, [x8, #3944]
   3d75c:	ldr	w9, [x8, #268]
   3d760:	cmp	w9, #0x1
   3d764:	b.lt	3d774 <aarch64_decode_insn@@Base+0x6f4>  // b.tstop
   3d768:	ldr	w8, [x8, #264]
   3d76c:	mov	w9, #0x1                   	// #1
   3d770:	b	3d77c <aarch64_decode_insn@@Base+0x6fc>
   3d774:	mov	w9, wzr
   3d778:	mov	w8, wzr
   3d77c:	ldr	w10, [x19]
   3d780:	mov	w11, #0xffffffff            	// #-1
   3d784:	ldr	x25, [x19, #8]
   3d788:	lsl	w9, w11, w9
   3d78c:	lsr	w8, w10, w8
   3d790:	bics	wzr, w8, w9
   3d794:	mov	w8, #0x1                   	// #1
   3d798:	cinc	w8, w8, eq  // eq = none
   3d79c:	strb	w8, [x19, #28]
   3d7a0:	ldr	x8, [x25, #120]
   3d7a4:	tbz	w8, #22, 3da40 <aarch64_decode_insn@@Base+0x9c0>
   3d7a8:	ldr	w9, [x25, #20]
   3d7ac:	mov	w8, wzr
   3d7b0:	sub	w10, w9, #0x3a
   3d7b4:	cmp	w10, #0x15
   3d7b8:	b.hi	3da38 <aarch64_decode_insn@@Base+0x9b8>  // b.pmore
   3d7bc:	adrp	x11, 54000 <xexit@@Base+0x84c>
   3d7c0:	add	x11, x11, #0xb83
   3d7c4:	adr	x12, 3d7d4 <aarch64_decode_insn@@Base+0x754>
   3d7c8:	ldrb	w13, [x11, x10]
   3d7cc:	add	x12, x12, x13, lsl #2
   3d7d0:	br	x12
   3d7d4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3d7d8:	ldr	x8, [x8, #3944]
   3d7dc:	ldr	w10, [x8, #68]
   3d7e0:	cmp	w10, #0x1
   3d7e4:	b.lt	3d890 <aarch64_decode_insn@@Base+0x810>  // b.tstop
   3d7e8:	ldr	w8, [x8, #64]
   3d7ec:	mov	w10, #0x1                   	// #1
   3d7f0:	b	3d898 <aarch64_decode_insn@@Base+0x818>
   3d7f4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d7f8:	ldr	w8, [x19]
   3d7fc:	ldr	x9, [x9, #3944]
   3d800:	mov	w10, #0xffffffff            	// #-1
   3d804:	ldr	w11, [x9, #616]
   3d808:	ldr	w12, [x9, #620]
   3d80c:	b	3d8f0 <aarch64_decode_insn@@Base+0x870>
   3d810:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d814:	ldr	w8, [x19]
   3d818:	ldr	x9, [x9, #3944]
   3d81c:	mov	w10, #0xffffffff            	// #-1
   3d820:	ldr	w11, [x9, #608]
   3d824:	ldr	w12, [x9, #612]
   3d828:	ldr	w13, [x9, #592]
   3d82c:	ldr	w9, [x9, #596]
   3d830:	b	3d9e4 <aarch64_decode_insn@@Base+0x964>
   3d834:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d838:	ldr	w8, [x19]
   3d83c:	ldr	x9, [x9, #3944]
   3d840:	mov	w10, #0xffffffff            	// #-1
   3d844:	ldr	w11, [x9, #616]
   3d848:	ldr	w12, [x9, #620]
   3d84c:	ldr	w13, [x9, #608]
   3d850:	ldr	w14, [x9, #612]
   3d854:	lsr	w11, w8, w11
   3d858:	lsl	w12, w10, w12
   3d85c:	lsr	w13, w8, w13
   3d860:	lsl	w14, w10, w14
   3d864:	bic	w11, w11, w12
   3d868:	bic	w12, w13, w14
   3d86c:	cmp	w11, w12
   3d870:	b.ne	3da34 <aarch64_decode_insn@@Base+0x9b4>  // b.any
   3d874:	ldr	w12, [x9, #592]
   3d878:	ldr	w9, [x9, #596]
   3d87c:	lsr	w8, w8, w12
   3d880:	lsl	w9, w10, w9
   3d884:	bic	w8, w8, w9
   3d888:	cmp	w11, w8
   3d88c:	b	3da00 <aarch64_decode_insn@@Base+0x980>
   3d890:	mov	w10, wzr
   3d894:	mov	w8, wzr
   3d898:	ldr	w11, [x19]
   3d89c:	mov	w12, #0xffffffff            	// #-1
   3d8a0:	lsl	w10, w12, w10
   3d8a4:	mov	w13, #0x15                  	// #21
   3d8a8:	lsr	w8, w11, w8
   3d8ac:	mov	w14, #0x13                  	// #19
   3d8b0:	sub	w15, w9, #0x3d
   3d8b4:	bics	wzr, w8, w10
   3d8b8:	csel	w8, w14, w13, eq  // eq = none
   3d8bc:	cmp	w15, #0x2
   3d8c0:	b.cc	3e14c <aarch64_decode_insn@@Base+0x10cc>  // b.lo, b.ul, b.last
   3d8c4:	sub	w9, w9, #0x3b
   3d8c8:	cmp	w9, #0x1
   3d8cc:	b.hi	3e490 <aarch64_decode_insn@@Base+0x1410>  // b.pmore
   3d8d0:	strb	w8, [x19, #84]
   3d8d4:	b	3d41c <aarch64_decode_insn@@Base+0x39c>
   3d8d8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d8dc:	ldr	w8, [x19]
   3d8e0:	ldr	x9, [x9, #3944]
   3d8e4:	mov	w10, #0xffffffff            	// #-1
   3d8e8:	ldr	w11, [x9, #568]
   3d8ec:	ldr	w12, [x9, #572]
   3d8f0:	ldr	w13, [x9, #608]
   3d8f4:	ldr	w9, [x9, #612]
   3d8f8:	b	3d9e4 <aarch64_decode_insn@@Base+0x964>
   3d8fc:	ldr	w0, [x19]
   3d900:	mov	w2, #0x2                   	// #2
   3d904:	mov	w3, #0x74                  	// #116
   3d908:	mov	w4, #0x2b                  	// #43
   3d90c:	mov	w1, wzr
   3d910:	bl	35480 <extract_fields@plt>
   3d914:	cmp	w0, #0x0
   3d918:	sub	w8, w0, #0x1
   3d91c:	cset	w9, ne  // ne = any
   3d920:	tst	w0, w8
   3d924:	cset	w8, ne  // ne = any
   3d928:	b	3d97c <aarch64_decode_insn@@Base+0x8fc>
   3d92c:	ldr	w8, [x19]
   3d930:	ubfx	w8, w8, #15, #2
   3d934:	cbz	w8, 3da2c <aarch64_decode_insn@@Base+0x9ac>
   3d938:	cmp	w8, #0x3
   3d93c:	b.eq	3e148 <aarch64_decode_insn@@Base+0x10c8>  // b.none
   3d940:	cmp	w8, #0x1
   3d944:	b.ne	3da34 <aarch64_decode_insn@@Base+0x9b4>  // b.any
   3d948:	mov	w8, #0x8                   	// #8
   3d94c:	b	3e14c <aarch64_decode_insn@@Base+0x10cc>
   3d950:	ldr	w0, [x19]
   3d954:	mov	w2, #0x2                   	// #2
   3d958:	mov	w3, #0x74                  	// #116
   3d95c:	mov	w4, #0x2b                  	// #43
   3d960:	mov	w1, wzr
   3d964:	bl	35480 <extract_fields@plt>
   3d968:	sub	w8, w0, #0x1
   3d96c:	cmp	w8, #0x10
   3d970:	cset	w9, cc  // cc = lo, ul, last
   3d974:	tst	w0, w8
   3d978:	cset	w8, eq  // eq = none
   3d97c:	and	w8, w9, w8
   3d980:	cbnz	w8, 3da3c <aarch64_decode_insn@@Base+0x9bc>
   3d984:	b	3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3d988:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d98c:	ldr	w8, [x19]
   3d990:	ldr	x9, [x9, #3944]
   3d994:	mov	w10, #0xffffffff            	// #-1
   3d998:	ldr	w11, [x9, #688]
   3d99c:	ldr	w12, [x9, #692]
   3d9a0:	b	3d9dc <aarch64_decode_insn@@Base+0x95c>
   3d9a4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3d9a8:	ldr	x8, [x8, #3944]
   3d9ac:	ldr	w9, [x8, #68]
   3d9b0:	cmp	w9, #0x1
   3d9b4:	b.lt	3da0c <aarch64_decode_insn@@Base+0x98c>  // b.tstop
   3d9b8:	ldr	w9, [x8, #64]
   3d9bc:	mov	w8, #0x1                   	// #1
   3d9c0:	b	3da14 <aarch64_decode_insn@@Base+0x994>
   3d9c4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3d9c8:	ldr	w8, [x19]
   3d9cc:	ldr	x9, [x9, #3944]
   3d9d0:	mov	w10, #0xffffffff            	// #-1
   3d9d4:	ldr	w11, [x9, #712]
   3d9d8:	ldr	w12, [x9, #716]
   3d9dc:	ldr	w13, [x9, #704]
   3d9e0:	ldr	w9, [x9, #708]
   3d9e4:	lsr	w11, w8, w11
   3d9e8:	lsl	w12, w10, w12
   3d9ec:	lsr	w8, w8, w13
   3d9f0:	lsl	w9, w10, w9
   3d9f4:	bic	w10, w11, w12
   3d9f8:	bic	w8, w8, w9
   3d9fc:	cmp	w10, w8
   3da00:	cset	w8, eq  // eq = none
   3da04:	cbnz	w8, 3da3c <aarch64_decode_insn@@Base+0x9bc>
   3da08:	b	3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3da0c:	mov	w8, wzr
   3da10:	mov	w9, wzr
   3da14:	ldr	w10, [x19]
   3da18:	mov	w11, #0xffffffff            	// #-1
   3da1c:	lsl	w8, w11, w8
   3da20:	lsr	w9, w10, w9
   3da24:	bics	wzr, w9, w8
   3da28:	b.eq	3da34 <aarch64_decode_insn@@Base+0x9b4>  // b.none
   3da2c:	mov	w8, #0x7                   	// #7
   3da30:	b	3e14c <aarch64_decode_insn@@Base+0x10cc>
   3da34:	mov	w8, wzr
   3da38:	cbz	w8, 3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3da3c:	ldr	x25, [x19, #8]
   3da40:	ldr	w8, [x25, #16]
   3da44:	sub	w9, w8, #0x47
   3da48:	cmp	w9, #0x12
   3da4c:	b.hi	3dc98 <aarch64_decode_insn@@Base+0xc18>  // b.pmore
   3da50:	adrp	x10, 54000 <xexit@@Base+0x84c>
   3da54:	add	x10, x10, #0xb99
   3da58:	adr	x11, 3da70 <aarch64_decode_insn@@Base+0x9f0>
   3da5c:	ldrb	w12, [x10, x9]
   3da60:	add	x11, x11, x12, lsl #2
   3da64:	mov	w8, wzr
   3da68:	mov	w4, #0x76                  	// #118
   3da6c:	br	x11
   3da70:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3da74:	ldr	w8, [x19]
   3da78:	ldr	x9, [x9, #3944]
   3da7c:	ldr	w10, [x9, #896]
   3da80:	ldr	w9, [x9, #900]
   3da84:	b	3dc5c <aarch64_decode_insn@@Base+0xbdc>
   3da88:	ldr	w0, [x19]
   3da8c:	mov	w2, #0x2                   	// #2
   3da90:	mov	w3, #0x70                  	// #112
   3da94:	mov	w4, #0x76                  	// #118
   3da98:	mov	w1, wzr
   3da9c:	bl	35480 <extract_fields@plt>
   3daa0:	cbz	w0, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3daa4:	cmp	w0, #0x1
   3daa8:	mov	w8, wzr
   3daac:	b.eq	3dc6c <aarch64_decode_insn@@Base+0xbec>  // b.none
   3dab0:	mov	w8, wzr
   3dab4:	asr	w0, w0, #1
   3dab8:	cmp	w0, #0x1
   3dabc:	add	w8, w8, #0x1
   3dac0:	b.ne	3dab4 <aarch64_decode_insn@@Base+0xa34>  // b.any
   3dac4:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dac8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3dacc:	ldr	w8, [x19]
   3dad0:	ldr	x9, [x9, #3944]
   3dad4:	ldr	w10, [x9, #912]
   3dad8:	ldr	w9, [x9, #916]
   3dadc:	b	3dc5c <aarch64_decode_insn@@Base+0xbdc>
   3dae0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3dae4:	ldr	w8, [x19]
   3dae8:	ldr	x9, [x9, #3944]
   3daec:	ldr	w10, [x9, #904]
   3daf0:	ldr	w9, [x9, #908]
   3daf4:	b	3dd58 <aarch64_decode_insn@@Base+0xcd8>
   3daf8:	ldr	w0, [x19]
   3dafc:	mov	w2, #0x2                   	// #2
   3db00:	mov	w3, #0x8                   	// #8
   3db04:	mov	w4, #0x45                  	// #69
   3db08:	b	3dbf8 <aarch64_decode_insn@@Base+0xb78>
   3db0c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3db10:	ldr	w8, [x19]
   3db14:	ldr	x9, [x9, #3944]
   3db18:	ldp	w10, w9, [x9, #64]
   3db1c:	b	3dc5c <aarch64_decode_insn@@Base+0xbdc>
   3db20:	ldr	w0, [x19]
   3db24:	mov	w2, #0x2                   	// #2
   3db28:	mov	w3, #0x74                  	// #116
   3db2c:	mov	w4, #0x2b                  	// #43
   3db30:	mov	w1, wzr
   3db34:	bl	35480 <extract_fields@plt>
   3db38:	tst	w0, #0x1f
   3db3c:	b.eq	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.none
   3db40:	tbnz	w0, #0, 3dba0 <aarch64_decode_insn@@Base+0xb20>
   3db44:	mov	w8, wzr
   3db48:	mov	w9, w0
   3db4c:	asr	w0, w0, #1
   3db50:	add	w8, w8, #0x1
   3db54:	tbz	w9, #1, 3db48 <aarch64_decode_insn@@Base+0xac8>
   3db58:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3db5c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3db60:	ldr	w8, [x19]
   3db64:	ldr	x9, [x9, #3944]
   3db68:	mov	w11, #0xffffffff            	// #-1
   3db6c:	ldp	w10, w9, [x9, #64]
   3db70:	lsr	w8, w8, w10
   3db74:	lsl	w9, w11, w9
   3db78:	bic	w8, w8, w9
   3db7c:	ubfx	w8, w8, #1, #1
   3db80:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3db84:	ldr	w8, [x19]
   3db88:	mov	w9, #0x400                 	// #1024
   3db8c:	movk	w9, #0x2, lsl #16
   3db90:	orr	w10, w9, #0x200
   3db94:	and	w10, w8, w10
   3db98:	cmp	w10, #0x600
   3db9c:	b.ne	3e114 <aarch64_decode_insn@@Base+0x1094>  // b.any
   3dba0:	mov	w8, wzr
   3dba4:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dba8:	mov	w4, #0x75                  	// #117
   3dbac:	ldr	w0, [x19]
   3dbb0:	mov	w2, #0x2                   	// #2
   3dbb4:	mov	w3, #0x74                  	// #116
   3dbb8:	mov	w1, wzr
   3dbbc:	bl	35480 <extract_fields@plt>
   3dbc0:	cbz	w0, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dbc4:	cmp	w0, #0x1
   3dbc8:	mov	w8, wzr
   3dbcc:	b.eq	3dc6c <aarch64_decode_insn@@Base+0xbec>  // b.none
   3dbd0:	mov	w8, wzr
   3dbd4:	asr	w0, w0, #1
   3dbd8:	cmp	w0, #0x1
   3dbdc:	add	w8, w8, #0x1
   3dbe0:	b.ne	3dbd4 <aarch64_decode_insn@@Base+0xb54>  // b.any
   3dbe4:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dbe8:	ldr	w0, [x19]
   3dbec:	mov	w2, #0x2                   	// #2
   3dbf0:	mov	w3, #0x8                   	// #8
   3dbf4:	mov	w4, #0x44                  	// #68
   3dbf8:	mov	w1, wzr
   3dbfc:	bl	35480 <extract_fields@plt>
   3dc00:	mov	w8, w0
   3dc04:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dc08:	ldr	w0, [x19]
   3dc0c:	mov	w2, #0x2                   	// #2
   3dc10:	mov	w3, #0x74                  	// #116
   3dc14:	mov	w4, #0x76                  	// #118
   3dc18:	mov	w1, wzr
   3dc1c:	bl	35480 <extract_fields@plt>
   3dc20:	cbz	w0, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dc24:	cmp	w0, #0x1
   3dc28:	mov	w8, wzr
   3dc2c:	b.eq	3dc6c <aarch64_decode_insn@@Base+0xbec>  // b.none
   3dc30:	mov	w8, wzr
   3dc34:	asr	w0, w0, #1
   3dc38:	cmp	w0, #0x1
   3dc3c:	add	w8, w8, #0x1
   3dc40:	b.ne	3dc34 <aarch64_decode_insn@@Base+0xbb4>  // b.any
   3dc44:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dc48:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3dc4c:	ldr	w8, [x19]
   3dc50:	ldr	x9, [x9, #3944]
   3dc54:	ldr	w10, [x9, #536]
   3dc58:	ldr	w9, [x9, #540]
   3dc5c:	mov	w11, #0xffffffff            	// #-1
   3dc60:	lsr	w8, w8, w10
   3dc64:	lsl	w9, w11, w9
   3dc68:	bic	w8, w8, w9
   3dc6c:	ldr	x11, [x19, #8]
   3dc70:	mov	w12, #0x6                   	// #6
   3dc74:	mov	x9, xzr
   3dc78:	add	x10, x19, #0x1c
   3dc7c:	smaddl	x8, w8, w12, x11
   3dc80:	add	x8, x8, #0x38
   3dc84:	ldrb	w11, [x8, x9]
   3dc88:	add	x9, x9, #0x1
   3dc8c:	cmp	x9, #0x6
   3dc90:	strb	w11, [x10], #56
   3dc94:	b.ne	3dc84 <aarch64_decode_insn@@Base+0xc04>  // b.any
   3dc98:	adrp	x27, 96000 <aarch64_operands@@Base+0x16c38>
   3dc9c:	ldr	x27, [x27, #4032]
   3dca0:	add	x24, x23, #0x20
   3dca4:	mov	w25, #0x18                  	// #24
   3dca8:	mov	w26, #0x30                  	// #48
   3dcac:	ldr	w8, [x24]
   3dcb0:	cbz	w8, 3dcec <aarch64_decode_insn@@Base+0xc6c>
   3dcb4:	madd	x9, x8, x26, x27
   3dcb8:	ldrb	w9, [x9, #16]
   3dcbc:	tbz	w9, #1, 3dcdc <aarch64_decode_insn@@Base+0xc5c>
   3dcc0:	madd	x0, x8, x26, x27
   3dcc4:	add	x1, x19, x25
   3dcc8:	mov	w2, w22
   3dccc:	mov	x3, x19
   3dcd0:	mov	x4, x20
   3dcd4:	bl	356e0 <aarch64_extract_operand@plt>
   3dcd8:	cbz	w0, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dcdc:	add	x25, x25, #0x38
   3dce0:	cmp	x25, #0x168
   3dce4:	add	x24, x24, #0x4
   3dce8:	b.ne	3dcac <aarch64_decode_insn@@Base+0xc2c>  // b.any
   3dcec:	ldr	x8, [x23, #136]
   3dcf0:	cbz	x8, 3dd1c <aarch64_decode_insn@@Base+0xc9c>
   3dcf4:	mov	x0, x19
   3dcf8:	mov	w1, w22
   3dcfc:	mov	x2, xzr
   3dd00:	mov	w3, wzr
   3dd04:	mov	x4, x20
   3dd08:	mov	x5, xzr
   3dd0c:	blr	x8
   3dd10:	mov	w8, w0
   3dd14:	mov	w0, wzr
   3dd18:	cbnz	w8, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dd1c:	mov	x0, x19
   3dd20:	mov	x1, xzr
   3dd24:	bl	355c0 <aarch64_match_operands_constraint@plt>
   3dd28:	cmp	w0, #0x1
   3dd2c:	b.ne	3dd9c <aarch64_decode_insn@@Base+0xd1c>  // b.any
   3dd30:	cbnz	w21, 3dd40 <aarch64_decode_insn@@Base+0xcc0>
   3dd34:	ldr	x22, [x19, #8]
   3dd38:	ldrb	w8, [x22, #120]
   3dd3c:	tbnz	w8, #1, 3de04 <aarch64_decode_insn@@Base+0xd84>
   3dd40:	mov	w0, #0x1                   	// #1
   3dd44:	b	3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dd48:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3dd4c:	ldr	w8, [x19]
   3dd50:	ldr	x9, [x9, #3944]
   3dd54:	ldp	w10, w9, [x9, #64]
   3dd58:	mov	w11, #0xffffffff            	// #-1
   3dd5c:	lsr	w8, w8, w10
   3dd60:	lsl	w9, w11, w9
   3dd64:	bic	w8, w8, w9
   3dd68:	subs	w8, w8, #0x1
   3dd6c:	b.ge	3dc6c <aarch64_decode_insn@@Base+0xbec>  // b.tcont
   3dd70:	b	3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3dd74:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3dd78:	ldr	w8, [x19]
   3dd7c:	ldr	x9, [x9, #3944]
   3dd80:	mov	w11, #0xffffffff            	// #-1
   3dd84:	ldp	w10, w9, [x9, #64]
   3dd88:	lsr	w8, w8, w10
   3dd8c:	lsl	w9, w11, w9
   3dd90:	bic	w8, w8, w9
   3dd94:	cmp	w8, #0x2
   3dd98:	b.le	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3dd9c:	mov	w0, wzr
   3dda0:	ldp	x20, x19, [sp, #448]
   3dda4:	ldp	x22, x21, [sp, #432]
   3dda8:	ldp	x24, x23, [sp, #416]
   3ddac:	ldp	x26, x25, [sp, #400]
   3ddb0:	ldp	x28, x27, [sp, #384]
   3ddb4:	ldp	x29, x30, [sp, #368]
   3ddb8:	add	sp, sp, #0x1d0
   3ddbc:	ret
   3ddc0:	ldr	w0, [x19]
   3ddc4:	mov	w2, #0x2                   	// #2
   3ddc8:	mov	w3, #0x70                  	// #112
   3ddcc:	mov	w4, #0x76                  	// #118
   3ddd0:	mov	w1, wzr
   3ddd4:	bl	35480 <extract_fields@plt>
   3ddd8:	cbz	w0, 3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dddc:	cmp	w0, #0x1
   3dde0:	mov	w8, wzr
   3dde4:	b.eq	3dc6c <aarch64_decode_insn@@Base+0xbec>  // b.none
   3dde8:	mov	w8, wzr
   3ddec:	tbnz	w0, #0, 3dd9c <aarch64_decode_insn@@Base+0xd1c>
   3ddf0:	asr	w0, w0, #1
   3ddf4:	cmp	w0, #0x1
   3ddf8:	add	w8, w8, #0x1
   3ddfc:	b.ne	3ddec <aarch64_decode_insn@@Base+0xd6c>  // b.any
   3de00:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3de04:	mov	x0, x22
   3de08:	bl	35c50 <aarch64_find_alias_opcode@plt>
   3de0c:	cbz	x0, 3e470 <aarch64_decode_insn@@Base+0x13f0>
   3de10:	mov	x8, sp
   3de14:	adrp	x28, 54000 <xexit@@Base+0x84c>
   3de18:	mov	x21, x0
   3de1c:	add	x28, x28, #0xbac
   3de20:	add	x26, x8, #0x50
   3de24:	add	x25, x8, #0x88
   3de28:	mov	w27, #0x1f                  	// #31
   3de2c:	ldr	x8, [x21, #120]
   3de30:	tbnz	w8, #0, 3de3c <aarch64_decode_insn@@Base+0xdbc>
   3de34:	ldrb	w9, [x22, #120]
   3de38:	tbz	w9, #1, 3e350 <aarch64_decode_insn@@Base+0x12d0>
   3de3c:	tbnz	w8, #21, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3de40:	ldr	w8, [x19]
   3de44:	ldp	w10, w9, [x21, #8]
   3de48:	and	w8, w9, w8
   3de4c:	cmp	w8, w10
   3de50:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3de54:	mov	x0, x21
   3de58:	bl	35260 <aarch64_num_of_operands@plt>
   3de5c:	cbnz	w0, 3de70 <aarch64_decode_insn@@Base+0xdf0>
   3de60:	ldr	w8, [x21, #8]
   3de64:	ldr	w9, [x19]
   3de68:	cmp	w8, w9
   3de6c:	b.eq	3e138 <aarch64_decode_insn@@Base+0x10b8>  // b.none
   3de70:	ldrb	w8, [x21, #122]
   3de74:	tbnz	w8, #4, 3dec0 <aarch64_decode_insn@@Base+0xe40>
   3de78:	mov	x0, sp
   3de7c:	mov	w2, #0x168                 	// #360
   3de80:	mov	w1, wzr
   3de84:	bl	35550 <memset@plt>
   3de88:	ldr	w1, [x19]
   3de8c:	mov	x2, sp
   3de90:	mov	w3, #0x1                   	// #1
   3de94:	mov	x0, x21
   3de98:	mov	x4, x20
   3de9c:	bl	3d100 <aarch64_decode_insn@@Base+0x80>
   3dea0:	cmp	w0, #0x1
   3dea4:	b.eq	3e2dc <aarch64_decode_insn@@Base+0x125c>  // b.none
   3dea8:	mov	x0, x21
   3deac:	bl	35bb0 <aarch64_find_next_alias_opcode@plt>
   3deb0:	mov	x21, x0
   3deb4:	mov	w0, #0x1                   	// #1
   3deb8:	cbnz	x21, 3de2c <aarch64_decode_insn@@Base+0xdac>
   3debc:	b	3dda0 <aarch64_decode_insn@@Base+0xd20>
   3dec0:	mov	x0, sp
   3dec4:	mov	w2, #0x168                 	// #360
   3dec8:	mov	x1, x19
   3decc:	bl	35140 <memcpy@plt>
   3ded0:	ldr	w8, [x21, #20]
   3ded4:	sub	w8, w8, #0x23
   3ded8:	cmp	w8, #0x21
   3dedc:	b.hi	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.pmore
   3dee0:	adr	x9, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3dee4:	ldrb	w10, [x28, x8]
   3dee8:	add	x9, x9, x10, lsl #2
   3deec:	br	x9
   3def0:	ldr	x8, [sp, #152]
   3def4:	cbnz	x8, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3def8:	b	3e2bc <aarch64_decode_insn@@Base+0x123c>
   3defc:	ldr	x8, [sp, #152]
   3df00:	ldr	x9, [sp, #208]
   3df04:	subs	x8, x9, x8
   3df08:	b.lt	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.tstop
   3df0c:	b	3e188 <aarch64_decode_insn@@Base+0x1108>
   3df10:	ldr	w8, [sp, #96]
   3df14:	ldr	w9, [sp, #152]
   3df18:	cmp	w8, w9
   3df1c:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3df20:	ldr	x0, [sp, #208]
   3df24:	ldr	w8, [x0, #32]
   3df28:	mvn	w8, w8
   3df2c:	tst	w8, #0xe
   3df30:	b.eq	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.none
   3df34:	b	3e1a4 <aarch64_decode_insn@@Base+0x1124>
   3df38:	ldr	x8, [sp, #152]
   3df3c:	ldr	x9, [sp, #208]
   3df40:	cmp	x9, x8
   3df44:	b.ge	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.tcont
   3df48:	b	3e154 <aarch64_decode_insn@@Base+0x10d4>
   3df4c:	ldr	w8, [sp, #96]
   3df50:	cmp	w8, #0x1f
   3df54:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3df58:	ldr	w8, [sp, #152]
   3df5c:	cmp	w8, #0x1f
   3df60:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3df64:	ldr	x0, [sp, #208]
   3df68:	ldr	w8, [x0, #32]
   3df6c:	mvn	w8, w8
   3df70:	tst	w8, #0xe
   3df74:	b.eq	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.none
   3df78:	b	3e290 <aarch64_decode_insn@@Base+0x1210>
   3df7c:	ldr	x8, [sp, #96]
   3df80:	ldr	x9, [sp, #120]
   3df84:	cbnz	x8, 3df8c <aarch64_decode_insn@@Base+0xf0c>
   3df88:	cbnz	x9, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3df8c:	ldr	x10, [sp, #8]
   3df90:	mov	w11, #0x48                  	// #72
   3df94:	str	w11, [sp, #80]
   3df98:	str	wzr, [sp, #112]
   3df9c:	ldr	w10, [x10, #20]
   3dfa0:	lsl	x23, x8, x9
   3dfa4:	cmp	w10, #0x20
   3dfa8:	b.ne	3e198 <aarch64_decode_insn@@Base+0x1118>  // b.any
   3dfac:	ldrb	w8, [sp, #28]
   3dfb0:	mvn	x23, x23
   3dfb4:	mov	x0, x23
   3dfb8:	mov	x2, xzr
   3dfbc:	cmp	w8, #0x1
   3dfc0:	cset	w1, eq  // eq = none
   3dfc4:	bl	35b10 <aarch64_wide_constant_p@plt>
   3dfc8:	cbnz	w0, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3dfcc:	b	3e198 <aarch64_decode_insn@@Base+0x1118>
   3dfd0:	ldrb	w8, [sp, #140]
   3dfd4:	ldr	x9, [sp, #208]
   3dfd8:	cmp	w8, #0x1d
   3dfdc:	mov	w8, #0x3f                  	// #63
   3dfe0:	csel	x8, x27, x8, eq  // eq = none
   3dfe4:	cmp	x9, x8
   3dfe8:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3dfec:	b	3e1cc <aarch64_decode_insn@@Base+0x114c>
   3dff0:	ldr	w8, [sp, #96]
   3dff4:	cmp	w8, #0x1f
   3dff8:	b.ne	3e410 <aarch64_decode_insn@@Base+0x1390>  // b.any
   3dffc:	ldr	x9, [sp, #152]
   3e000:	ldr	x8, [sp, #208]
   3e004:	cmp	x8, x9
   3e008:	b.ge	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.tcont
   3e00c:	b	3e1d4 <aarch64_decode_insn@@Base+0x1154>
   3e010:	ldr	w8, [sp, #96]
   3e014:	cmp	w8, #0x1f
   3e018:	b.ne	3e430 <aarch64_decode_insn@@Base+0x13b0>  // b.any
   3e01c:	ldr	x8, [x25, #48]
   3e020:	ldp	q1, q0, [x25, #16]
   3e024:	ldr	q2, [x25]
   3e028:	str	x8, [x26, #48]
   3e02c:	stp	q1, q0, [x26, #16]
   3e030:	str	q2, [x26]
   3e034:	ldrb	w8, [sp, #28]
   3e038:	ldr	w9, [sp, #40]
   3e03c:	cmp	w8, #0x1
   3e040:	mov	w8, #0x1                   	// #1
   3e044:	cset	w23, eq  // eq = none
   3e048:	cmp	w9, #0x1f
   3e04c:	str	w8, [sp, #88]
   3e050:	mov	w8, #0x48                  	// #72
   3e054:	str	w8, [sp, #80]
   3e058:	b.eq	3e2bc <aarch64_decode_insn@@Base+0x123c>  // b.none
   3e05c:	ldr	x24, [sp, #96]
   3e060:	mov	w1, w23
   3e064:	mov	x2, xzr
   3e068:	mov	x0, x24
   3e06c:	bl	35b10 <aarch64_wide_constant_p@plt>
   3e070:	cbnz	w0, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3e074:	mvn	x0, x24
   3e078:	mov	w1, w23
   3e07c:	mov	x2, xzr
   3e080:	bl	35b10 <aarch64_wide_constant_p@plt>
   3e084:	cbnz	w0, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3e088:	b	3e2bc <aarch64_decode_insn@@Base+0x123c>
   3e08c:	ldrb	w8, [sp, #140]
   3e090:	ldr	x11, [sp, #152]
   3e094:	ldr	x10, [sp, #208]
   3e098:	cmp	w8, #0x1d
   3e09c:	mov	w8, #0x3f                  	// #63
   3e0a0:	csel	x8, x27, x8, eq  // eq = none
   3e0a4:	cmp	x11, #0x0
   3e0a8:	add	x12, x10, #0x1
   3e0ac:	cset	w9, eq  // eq = none
   3e0b0:	subs	x8, x8, x10
   3e0b4:	cset	w10, eq  // eq = none
   3e0b8:	cmp	x11, x12
   3e0bc:	b.eq	3e284 <aarch64_decode_insn@@Base+0x1204>  // b.none
   3e0c0:	and	w9, w9, w10
   3e0c4:	cbz	w9, 3dea8 <aarch64_decode_insn@@Base+0xe28>
   3e0c8:	b	3e284 <aarch64_decode_insn@@Base+0x1204>
   3e0cc:	ldr	w8, [sp, #96]
   3e0d0:	ldr	w9, [sp, #152]
   3e0d4:	cmp	w8, w9
   3e0d8:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3e0dc:	b	3e2bc <aarch64_decode_insn@@Base+0x123c>
   3e0e0:	ldr	w8, [sp, #96]
   3e0e4:	ldr	w9, [sp, #152]
   3e0e8:	cmp	w8, w9
   3e0ec:	b.ne	3dea8 <aarch64_decode_insn@@Base+0xe28>  // b.any
   3e0f0:	ldp	q2, q0, [sp, #208]
   3e0f4:	ldr	x8, [sp, #240]
   3e0f8:	ldr	q1, [sp, #192]
   3e0fc:	mov	w9, #0x2                   	// #2
   3e100:	stp	q2, q0, [x25, #16]
   3e104:	str	x8, [x25, #48]
   3e108:	str	q1, [x25]
   3e10c:	str	w9, [sp, #144]
   3e110:	b	3e1cc <aarch64_decode_insn@@Base+0x114c>
   3e114:	and	w9, w8, w9
   3e118:	cmp	w9, #0x400
   3e11c:	b.ne	3e128 <aarch64_decode_insn@@Base+0x10a8>  // b.any
   3e120:	mov	w8, #0x1                   	// #1
   3e124:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3e128:	tst	w8, #0x20000
   3e12c:	mov	w8, #0x2                   	// #2
   3e130:	cinc	w8, w8, ne  // ne = any
   3e134:	b	3dc6c <aarch64_decode_insn@@Base+0xbec>
   3e138:	mov	x0, x19
   3e13c:	mov	x1, x21
   3e140:	bl	354f0 <aarch64_replace_opcode@plt>
   3e144:	b	3dd40 <aarch64_decode_insn@@Base+0xcc0>
   3e148:	mov	w8, #0x6                   	// #6
   3e14c:	strb	w8, [x19, #28]
   3e150:	b	3d41c <aarch64_decode_insn@@Base+0x39c>
   3e154:	ldrb	w10, [sp, #140]
   3e158:	mov	w11, #0x40                  	// #64
   3e15c:	mov	w12, #0x20                  	// #32
   3e160:	ldr	x0, [sp, #8]
   3e164:	cmp	w10, #0x1d
   3e168:	csel	x10, x12, x11, eq  // eq = none
   3e16c:	sub	x8, x10, x8
   3e170:	sub	x10, x10, #0x1
   3e174:	add	x9, x9, #0x1
   3e178:	and	x8, x8, x10
   3e17c:	str	x8, [sp, #152]
   3e180:	str	x9, [sp, #208]
   3e184:	b	3e25c <aarch64_decode_insn@@Base+0x11dc>
   3e188:	ldr	x0, [sp, #8]
   3e18c:	add	x8, x8, #0x1
   3e190:	str	x8, [sp, #208]
   3e194:	b	3e25c <aarch64_decode_insn@@Base+0x11dc>
   3e198:	str	x23, [sp, #96]
   3e19c:	str	xzr, [sp, #120]
   3e1a0:	b	3e2c0 <aarch64_decode_insn@@Base+0x1240>
   3e1a4:	ldp	q2, q0, [sp, #208]
   3e1a8:	ldr	x8, [sp, #240]
   3e1ac:	ldr	q1, [sp, #192]
   3e1b0:	mov	w9, #0x2                   	// #2
   3e1b4:	stp	q2, q0, [x25, #16]
   3e1b8:	str	x8, [x25, #48]
   3e1bc:	str	q1, [x25]
   3e1c0:	str	w9, [sp, #144]
   3e1c4:	bl	35940 <get_inverted_cond@plt>
   3e1c8:	str	x0, [sp, #152]
   3e1cc:	str	wzr, [sp, #192]
   3e1d0:	b	3e2c0 <aarch64_decode_insn@@Base+0x1240>
   3e1d4:	ldrb	w10, [sp, #140]
   3e1d8:	ldp	q2, q0, [x25, #16]
   3e1dc:	ldr	q1, [x25]
   3e1e0:	mov	w11, #0x40                  	// #64
   3e1e4:	cmp	w10, #0x1d
   3e1e8:	ldr	x10, [x25, #48]
   3e1ec:	stp	q2, q0, [x26, #16]
   3e1f0:	str	q1, [x26]
   3e1f4:	mov	w12, #0x1                   	// #1
   3e1f8:	str	x10, [x26, #48]
   3e1fc:	mov	w10, #0x20                  	// #32
   3e200:	csel	x10, x10, x11, eq  // eq = none
   3e204:	ldp	q0, q1, [sp, #192]
   3e208:	ldr	x11, [sp, #240]
   3e20c:	ldr	q2, [sp, #224]
   3e210:	str	w12, [sp, #88]
   3e214:	str	q0, [x25]
   3e218:	str	x11, [x25, #48]
   3e21c:	stp	q1, q2, [x25, #16]
   3e220:	ldr	x0, [sp, #8]
   3e224:	sub	x9, x10, x9
   3e228:	sub	x10, x10, #0x1
   3e22c:	mov	w12, #0x2                   	// #2
   3e230:	and	x9, x9, x10
   3e234:	add	x8, x8, #0x1
   3e238:	str	w12, [sp, #144]
   3e23c:	str	wzr, [sp, #192]
   3e240:	str	x9, [sp, #96]
   3e244:	str	x8, [sp, #152]
   3e248:	bl	35260 <aarch64_num_of_operands@plt>
   3e24c:	cmp	w0, #0x2
   3e250:	b.lt	3e4d0 <aarch64_decode_insn@@Base+0x1450>  // b.tstop
   3e254:	ldr	x0, [sp, #8]
   3e258:	strb	wzr, [sp, #84]
   3e25c:	bl	35260 <aarch64_num_of_operands@plt>
   3e260:	cmp	w0, #0x3
   3e264:	b.lt	3e4d0 <aarch64_decode_insn@@Base+0x1450>  // b.tstop
   3e268:	ldr	x0, [sp, #8]
   3e26c:	strb	wzr, [sp, #140]
   3e270:	bl	35260 <aarch64_num_of_operands@plt>
   3e274:	cmp	w0, #0x3
   3e278:	b.le	3e4d0 <aarch64_decode_insn@@Base+0x1450>
   3e27c:	strb	wzr, [sp, #196]
   3e280:	b	3e2c0 <aarch64_decode_insn@@Base+0x1240>
   3e284:	str	wzr, [sp, #192]
   3e288:	str	x8, [sp, #152]
   3e28c:	b	3e2c0 <aarch64_decode_insn@@Base+0x1240>
   3e290:	ldp	q2, q0, [sp, #208]
   3e294:	ldr	x8, [sp, #240]
   3e298:	ldr	q1, [sp, #192]
   3e29c:	mov	w9, #0x1                   	// #1
   3e2a0:	stp	q2, q0, [x26, #16]
   3e2a4:	str	x8, [x26, #48]
   3e2a8:	str	q1, [x26]
   3e2ac:	str	w9, [sp, #88]
   3e2b0:	bl	35940 <get_inverted_cond@plt>
   3e2b4:	str	x0, [sp, #96]
   3e2b8:	str	wzr, [sp, #192]
   3e2bc:	str	wzr, [sp, #136]
   3e2c0:	mov	x0, sp
   3e2c4:	mov	x1, x21
   3e2c8:	bl	354f0 <aarch64_replace_opcode@plt>
   3e2cc:	mov	x0, sp
   3e2d0:	mov	x1, xzr
   3e2d4:	bl	355c0 <aarch64_match_operands_constraint@plt>
   3e2d8:	cbz	w0, 3e4b0 <aarch64_decode_insn@@Base+0x1430>
   3e2dc:	mov	x1, sp
   3e2e0:	mov	w2, #0x168                 	// #360
   3e2e4:	mov	x0, x19
   3e2e8:	bl	35140 <memcpy@plt>
   3e2ec:	b	3dd40 <aarch64_decode_insn@@Base+0xcc0>
   3e2f0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e2f4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e2f8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e2fc:	add	x0, x0, #0x871
   3e300:	add	x1, x1, #0xc70
   3e304:	add	x3, x3, #0x880
   3e308:	mov	w2, #0xb4b                 	// #2891
   3e30c:	bl	35b90 <__assert_fail@plt>
   3e310:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e314:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e318:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e31c:	add	x0, x0, #0x979
   3e320:	add	x1, x1, #0xc70
   3e324:	add	x3, x3, #0x9c3
   3e328:	mov	w2, #0xc9                  	// #201
   3e32c:	bl	35b90 <__assert_fail@plt>
   3e330:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e334:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e338:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e33c:	add	x0, x0, #0x715
   3e340:	add	x1, x1, #0xc70
   3e344:	add	x3, x3, #0x75f
   3e348:	mov	w2, #0xdb                  	// #219
   3e34c:	bl	35b90 <__assert_fail@plt>
   3e350:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e354:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e358:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e35c:	add	x0, x0, #0xa8f
   3e360:	add	x1, x1, #0xc70
   3e364:	add	x3, x3, #0xa37
   3e368:	mov	w2, #0xa6b                 	// #2667
   3e36c:	bl	35b90 <__assert_fail@plt>
   3e370:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3e374:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e378:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3e37c:	add	x0, x0, #0x5dc
   3e380:	add	x1, x1, #0x5b0
   3e384:	add	x3, x3, #0x953
   3e388:	mov	w2, #0x1ab                 	// #427
   3e38c:	bl	35b90 <__assert_fail@plt>
   3e390:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3e394:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e398:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3e39c:	add	x0, x0, #0x5dc
   3e3a0:	add	x1, x1, #0x5b0
   3e3a4:	add	x3, x3, #0x9d5
   3e3a8:	mov	w2, #0x1d4                 	// #468
   3e3ac:	bl	35b90 <__assert_fail@plt>
   3e3b0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e3b4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e3b8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e3bc:	add	x0, x0, #0x8fc
   3e3c0:	add	x1, x1, #0xc70
   3e3c4:	add	x3, x3, #0x951
   3e3c8:	mov	w2, #0x885                 	// #2181
   3e3cc:	bl	35b90 <__assert_fail@plt>
   3e3d0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3e3d4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e3d8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e3dc:	add	x0, x0, #0x8ff
   3e3e0:	add	x1, x1, #0xc70
   3e3e4:	add	x3, x3, #0x951
   3e3e8:	mov	w2, #0x8b0                 	// #2224
   3e3ec:	bl	35b90 <__assert_fail@plt>
   3e3f0:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3e3f4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e3f8:	adrp	x3, 54000 <xexit@@Base+0x84c>
   3e3fc:	add	x0, x0, #0x5dc
   3e400:	add	x1, x1, #0x5b0
   3e404:	add	x3, x3, #0x992
   3e408:	mov	w2, #0x1c0                 	// #448
   3e40c:	bl	35b90 <__assert_fail@plt>
   3e410:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e414:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e418:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e41c:	add	x0, x0, #0xb5d
   3e420:	add	x1, x1, #0xc70
   3e424:	add	x3, x3, #0xb81
   3e428:	mov	w2, #0x941                 	// #2369
   3e42c:	bl	35b90 <__assert_fail@plt>
   3e430:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e434:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e438:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e43c:	add	x0, x0, #0xb5d
   3e440:	add	x1, x1, #0xc70
   3e444:	add	x3, x3, #0xba8
   3e448:	mov	w2, #0x9d0                 	// #2512
   3e44c:	bl	35b90 <__assert_fail@plt>
   3e450:	adrp	x0, 54000 <xexit@@Base+0x84c>
   3e454:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e458:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e45c:	add	x0, x0, #0x8ff
   3e460:	add	x1, x1, #0xc70
   3e464:	add	x3, x3, #0x951
   3e468:	mov	w2, #0x8a4                 	// #2212
   3e46c:	bl	35b90 <__assert_fail@plt>
   3e470:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e474:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e478:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e47c:	add	x0, x0, #0xa31
   3e480:	add	x1, x1, #0xc70
   3e484:	add	x3, x3, #0xa37
   3e488:	mov	w2, #0xa58                 	// #2648
   3e48c:	bl	35b90 <__assert_fail@plt>
   3e490:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3e494:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e498:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e49c:	add	x0, x0, #0x5dc
   3e4a0:	add	x1, x1, #0xc70
   3e4a4:	add	x3, x3, #0xa0b
   3e4a8:	mov	w2, #0x7cb                 	// #1995
   3e4ac:	bl	35b90 <__assert_fail@plt>
   3e4b0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e4b4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e4b8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e4bc:	add	x0, x0, #0xac3
   3e4c0:	add	x1, x1, #0xc70
   3e4c4:	add	x3, x3, #0xa37
   3e4c8:	mov	w2, #0xa8c                 	// #2700
   3e4cc:	bl	35b90 <__assert_fail@plt>
   3e4d0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3e4d4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3e4d8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3e4dc:	add	x0, x0, #0xaf3
   3e4e0:	add	x1, x1, #0x5b0
   3e4e4:	add	x3, x3, #0xb2b
   3e4e8:	mov	w2, #0x148                 	// #328
   3e4ec:	bl	35b90 <__assert_fail@plt>

000000000003e4f0 <aarch64_symbol_is_valid@@Base>:
   3e4f0:	cbz	x0, 3e52c <aarch64_symbol_is_valid@@Base+0x3c>
   3e4f4:	ldr	x8, [x0, #8]
   3e4f8:	cbz	x8, 3e530 <aarch64_symbol_is_valid@@Base+0x40>
   3e4fc:	ldrb	w9, [x8]
   3e500:	cmp	w9, #0x24
   3e504:	b.ne	3e538 <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3e508:	ldrb	w9, [x8, #1]
   3e50c:	cmp	w9, #0x78
   3e510:	b.eq	3e51c <aarch64_symbol_is_valid@@Base+0x2c>  // b.none
   3e514:	cmp	w9, #0x64
   3e518:	b.ne	3e538 <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3e51c:	ldrb	w8, [x8, #2]
   3e520:	cbz	w8, 3e530 <aarch64_symbol_is_valid@@Base+0x40>
   3e524:	cmp	w8, #0x2e
   3e528:	cset	w0, ne  // ne = any
   3e52c:	ret
   3e530:	mov	w0, wzr
   3e534:	ret
   3e538:	mov	w0, #0x1                   	// #1
   3e53c:	ret

000000000003e540 <print_insn_aarch64@@Base>:
   3e540:	sub	sp, sp, #0xa0
   3e544:	stp	x29, x30, [sp, #64]
   3e548:	stp	x28, x27, [sp, #80]
   3e54c:	stp	x26, x25, [sp, #96]
   3e550:	stp	x24, x23, [sp, #112]
   3e554:	stp	x22, x21, [sp, #128]
   3e558:	stp	x20, x19, [sp, #144]
   3e55c:	ldr	x20, [x1, #224]
   3e560:	mov	x19, x1
   3e564:	mov	x28, x0
   3e568:	add	x29, sp, #0x40
   3e56c:	cbz	x20, 3e67c <print_insn_aarch64@@Base+0x13c>
   3e570:	adrp	x21, 55000 <xexit@@Base+0x184c>
   3e574:	adrp	x22, 55000 <xexit@@Base+0x184c>
   3e578:	adrp	x23, 55000 <xexit@@Base+0x184c>
   3e57c:	adrp	x25, 55000 <xexit@@Base+0x184c>
   3e580:	str	x28, [sp, #8]
   3e584:	add	x21, x21, #0xbd7
   3e588:	adrp	x28, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3e58c:	mov	w26, #0x1                   	// #1
   3e590:	add	x22, x22, #0xbda
   3e594:	add	x23, x23, #0xbe2
   3e598:	adrp	x27, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3e59c:	add	x25, x25, #0xbe5
   3e5a0:	ldrb	w8, [x20]
   3e5a4:	cmp	w8, #0x2c
   3e5a8:	b.eq	3e63c <print_insn_aarch64@@Base+0xfc>  // b.none
   3e5ac:	mov	x24, x20
   3e5b0:	cbz	w8, 3e674 <print_insn_aarch64@@Base+0x134>
   3e5b4:	ldrb	w8, [x24, #1]!
   3e5b8:	cmp	w8, #0x2c
   3e5bc:	b.eq	3e5c4 <print_insn_aarch64@@Base+0x84>  // b.none
   3e5c0:	cbnz	w8, 3e5b4 <print_insn_aarch64@@Base+0x74>
   3e5c4:	mov	w2, #0xa                   	// #10
   3e5c8:	mov	x0, x20
   3e5cc:	mov	x1, x21
   3e5d0:	bl	35520 <strncmp@plt>
   3e5d4:	cbz	w0, 3e644 <print_insn_aarch64@@Base+0x104>
   3e5d8:	mov	w2, #0x7                   	// #7
   3e5dc:	mov	x0, x20
   3e5e0:	mov	x1, x22
   3e5e4:	bl	35520 <strncmp@plt>
   3e5e8:	cbz	w0, 3e650 <print_insn_aarch64@@Base+0x110>
   3e5ec:	mov	w2, #0x8                   	// #8
   3e5f0:	mov	x0, x20
   3e5f4:	mov	x1, x23
   3e5f8:	bl	35520 <strncmp@plt>
   3e5fc:	cbz	w0, 3e65c <print_insn_aarch64@@Base+0x11c>
   3e600:	mov	w2, #0x5                   	// #5
   3e604:	mov	x0, x20
   3e608:	mov	x1, x25
   3e60c:	bl	35520 <strncmp@plt>
   3e610:	cbz	w0, 3e668 <print_insn_aarch64@@Base+0x128>
   3e614:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3e618:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3e61c:	mov	w2, #0x5                   	// #5
   3e620:	add	x0, x0, #0x7f0
   3e624:	add	x1, x1, #0xbeb
   3e628:	bl	35ab0 <dcgettext@plt>
   3e62c:	mov	x1, x20
   3e630:	bl	35ae0 <_bfd_error_handler@plt>
   3e634:	mov	x20, x24
   3e638:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e63c:	add	x20, x20, #0x1
   3e640:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e644:	strb	w26, [x28, #1616]
   3e648:	mov	x20, x24
   3e64c:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e650:	strb	wzr, [x28, #1616]
   3e654:	mov	x20, x24
   3e658:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e65c:	strb	wzr, [x27, #1620]
   3e660:	mov	x20, x24
   3e664:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e668:	strb	w26, [x27, #1620]
   3e66c:	mov	x20, x24
   3e670:	b	3e5a0 <print_insn_aarch64@@Base+0x60>
   3e674:	ldr	x28, [sp, #8]
   3e678:	str	xzr, [x19, #224]
   3e67c:	mov	w8, #0x1                   	// #1
   3e680:	mov	x22, x19
   3e684:	str	w8, [x22, #44]!
   3e688:	str	w8, [sp, #20]
   3e68c:	ldur	x8, [x22, #4]
   3e690:	cbz	x8, 3e6a4 <print_insn_aarch64@@Base+0x164>
   3e694:	ldrb	w8, [x8, #32]
   3e698:	tbnz	w8, #4, 3e6a4 <print_insn_aarch64@@Base+0x164>
   3e69c:	mov	w10, #0x1                   	// #1
   3e6a0:	b	3e6ac <print_insn_aarch64@@Base+0x16c>
   3e6a4:	mov	w10, wzr
   3e6a8:	str	wzr, [sp, #20]
   3e6ac:	ldr	w9, [x19, #84]
   3e6b0:	cbz	w9, 3e708 <print_insn_aarch64@@Base+0x1c8>
   3e6b4:	ldr	x8, [x19, #72]
   3e6b8:	ldr	x11, [x8]
   3e6bc:	ldrb	w12, [x11, #26]
   3e6c0:	tbnz	w12, #5, 3e708 <print_insn_aarch64@@Base+0x1c8>
   3e6c4:	ldr	x11, [x11]
   3e6c8:	ldr	x11, [x11, #8]
   3e6cc:	ldr	w11, [x11, #8]
   3e6d0:	cmp	w11, #0x5
   3e6d4:	b.ne	3e708 <print_insn_aarch64@@Base+0x1c8>  // b.any
   3e6d8:	adrp	x24, 97000 <aarch64_ext_sysins_op@@Base+0x5acd4>
   3e6dc:	adrp	x23, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3e6e0:	cbz	x28, 3e72c <print_insn_aarch64@@Base+0x1ec>
   3e6e4:	ldr	w11, [x19, #80]
   3e6e8:	ldr	w10, [x24, #1464]
   3e6ec:	add	w11, w11, #0x1
   3e6f0:	tbnz	w10, #31, 3e744 <print_insn_aarch64@@Base+0x204>
   3e6f4:	ldr	x12, [x19, #240]
   3e6f8:	ldr	x13, [x23, #1608]
   3e6fc:	cmp	x12, x13
   3e700:	cset	w26, eq  // eq = none
   3e704:	b	3e748 <print_insn_aarch64@@Base+0x208>
   3e708:	cbz	w10, 3e8f4 <print_insn_aarch64@@Base+0x3b4>
   3e70c:	mov	w21, #0x4                   	// #4
   3e710:	ldrb	w8, [x19, #91]
   3e714:	tbnz	w8, #6, 3e8f4 <print_insn_aarch64@@Base+0x3b4>
   3e718:	adrp	x20, 3e000 <aarch64_decode_insn@@Base+0xf80>
   3e71c:	str	w21, [x19, #172]
   3e720:	add	x22, x19, #0x28
   3e724:	add	x20, x20, #0xa1c
   3e728:	b	3e904 <print_insn_aarch64@@Base+0x3c4>
   3e72c:	mov	w10, #0xffffffff            	// #-1
   3e730:	str	w10, [x24, #1464]
   3e734:	ldr	w11, [x19, #80]
   3e738:	mov	w26, wzr
   3e73c:	add	w11, w11, #0x1
   3e740:	b	3e748 <print_insn_aarch64@@Base+0x208>
   3e744:	mov	w26, wzr
   3e748:	cmp	w11, w10
   3e74c:	cset	w12, ge  // ge = tcont
   3e750:	tst	w12, w26
   3e754:	csel	w21, w10, w11, ne  // ne = any
   3e758:	cmp	w21, w9
   3e75c:	b.ge	3e788 <print_insn_aarch64@@Base+0x248>  // b.tcont
   3e760:	ldr	x8, [x8, w21, sxtw #3]
   3e764:	ldr	x9, [x8, #32]
   3e768:	ldr	x8, [x8, #16]
   3e76c:	ldr	x9, [x9, #40]
   3e770:	add	x8, x8, x9
   3e774:	cmp	x8, x28
   3e778:	b.ls	3e790 <print_insn_aarch64@@Base+0x250>  // b.plast
   3e77c:	mov	w25, #0xffffffff            	// #-1
   3e780:	mov	w8, #0x1                   	// #1
   3e784:	b	3e7f8 <print_insn_aarch64@@Base+0x2b8>
   3e788:	mov	w25, #0xffffffff            	// #-1
   3e78c:	b	3e7fc <print_insn_aarch64@@Base+0x2bc>
   3e790:	sxtw	x8, w21
   3e794:	mov	w20, wzr
   3e798:	add	x27, x8, #0x1
   3e79c:	mov	w25, #0xffffffff            	// #-1
   3e7a0:	add	x2, sp, #0x14
   3e7a4:	mov	x0, x19
   3e7a8:	mov	w1, w21
   3e7ac:	bl	3e990 <print_insn_aarch64@@Base+0x450>
   3e7b0:	ldrsw	x8, [x19, #84]
   3e7b4:	cmp	w0, #0x0
   3e7b8:	csinc	w20, w20, wzr, eq  // eq = none
   3e7bc:	csel	w25, w25, w21, eq  // eq = none
   3e7c0:	cmp	x27, x8
   3e7c4:	b.ge	3e7f0 <print_insn_aarch64@@Base+0x2b0>  // b.tcont
   3e7c8:	ldr	x8, [x19, #72]
   3e7cc:	add	w21, w21, #0x1
   3e7d0:	ldr	x8, [x8, x27, lsl #3]
   3e7d4:	add	x27, x27, #0x1
   3e7d8:	ldr	x9, [x8, #32]
   3e7dc:	ldr	x8, [x8, #16]
   3e7e0:	ldr	x9, [x9, #40]
   3e7e4:	add	x8, x8, x9
   3e7e8:	cmp	x8, x28
   3e7ec:	b.ls	3e7a0 <print_insn_aarch64@@Base+0x260>  // b.plast
   3e7f0:	cmp	w20, #0x0
   3e7f4:	cset	w8, eq  // eq = none
   3e7f8:	cbz	w8, 3e878 <print_insn_aarch64@@Base+0x338>
   3e7fc:	ldr	w9, [x19, #80]
   3e800:	ldr	w10, [x24, #1464]
   3e804:	ldr	x8, [x19, #48]
   3e808:	cmp	w9, w10
   3e80c:	cset	w11, ge  // ge = tcont
   3e810:	tst	w26, w11
   3e814:	csel	w21, w10, w9, ne  // ne = any
   3e818:	cbz	x8, 3e828 <print_insn_aarch64@@Base+0x2e8>
   3e81c:	ldr	x20, [x8, #40]
   3e820:	tbz	w21, #31, 3e830 <print_insn_aarch64@@Base+0x2f0>
   3e824:	b	3e878 <print_insn_aarch64@@Base+0x338>
   3e828:	mov	x20, xzr
   3e82c:	tbnz	w21, #31, 3e878 <print_insn_aarch64@@Base+0x338>
   3e830:	ldr	x8, [x19, #72]
   3e834:	ldr	x8, [x8, w21, uxtw #3]
   3e838:	ldr	x9, [x8, #32]
   3e83c:	ldr	x8, [x8, #16]
   3e840:	ldr	x9, [x9, #40]
   3e844:	add	x8, x8, x9
   3e848:	cmp	x8, x20
   3e84c:	b.cc	3e878 <print_insn_aarch64@@Base+0x338>  // b.lo, b.ul, b.last
   3e850:	add	x2, sp, #0x14
   3e854:	mov	x0, x19
   3e858:	mov	w1, w21
   3e85c:	bl	3e990 <print_insn_aarch64@@Base+0x450>
   3e860:	cbnz	w0, 3e874 <print_insn_aarch64@@Base+0x334>
   3e864:	cmp	w21, #0x0
   3e868:	sub	w21, w21, #0x1
   3e86c:	b.gt	3e830 <print_insn_aarch64@@Base+0x2f0>
   3e870:	b	3e878 <print_insn_aarch64@@Base+0x338>
   3e874:	mov	w25, w21
   3e878:	str	w25, [x24, #1464]
   3e87c:	ldr	w8, [sp, #20]
   3e880:	ldr	x9, [x19, #240]
   3e884:	cmp	w8, #0x1
   3e888:	str	x9, [x23, #1608]
   3e88c:	b.ne	3e8f4 <print_insn_aarch64@@Base+0x3b4>  // b.any
   3e890:	ldrsw	x9, [x19, #84]
   3e894:	and	w8, w28, #0x3
   3e898:	mov	w10, #0x4                   	// #4
   3e89c:	sub	w8, w10, w8
   3e8a0:	sxtw	x10, w25
   3e8a4:	add	x10, x10, #0x1
   3e8a8:	cmp	x10, x9
   3e8ac:	b.ge	3e8dc <print_insn_aarch64@@Base+0x39c>  // b.tcont
   3e8b0:	ldr	x11, [x19, #72]
   3e8b4:	ldr	x11, [x11, x10, lsl #3]
   3e8b8:	add	x10, x10, #0x1
   3e8bc:	ldr	x12, [x11, #32]
   3e8c0:	ldr	x11, [x11, #16]
   3e8c4:	ldr	x12, [x12, #40]
   3e8c8:	add	x11, x11, x12
   3e8cc:	subs	x11, x11, x28
   3e8d0:	b.ls	3e8a8 <print_insn_aarch64@@Base+0x368>  // b.plast
   3e8d4:	cmp	x11, x8
   3e8d8:	csel	w8, w11, w8, cc  // cc = lo, ul, last
   3e8dc:	tst	x28, #0x1
   3e8e0:	mov	w9, #0x1                   	// #1
   3e8e4:	cinc	w9, w9, eq  // eq = none
   3e8e8:	cmp	w8, #0x3
   3e8ec:	csel	w21, w9, w8, eq  // eq = none
   3e8f0:	b	3e710 <print_insn_aarch64@@Base+0x1d0>
   3e8f4:	adrp	x20, 3e000 <aarch64_decode_insn@@Base+0xf80>
   3e8f8:	mov	w21, #0x4                   	// #4
   3e8fc:	add	x20, x20, #0xa80
   3e900:	str	w21, [x19, #172]
   3e904:	ldr	w8, [x22]
   3e908:	ldr	x9, [x19, #104]
   3e90c:	sub	x1, x29, #0x4
   3e910:	mov	x0, x28
   3e914:	mov	w2, w21
   3e918:	mov	x3, x19
   3e91c:	str	w8, [x19, #176]
   3e920:	blr	x9
   3e924:	cbz	w0, 3e940 <print_insn_aarch64@@Base+0x400>
   3e928:	ldr	x8, [x19, #112]
   3e92c:	mov	x1, x28
   3e930:	mov	x2, x19
   3e934:	blr	x8
   3e938:	mov	w21, #0xffffffff            	// #-1
   3e93c:	b	3e96c <print_insn_aarch64@@Base+0x42c>
   3e940:	ldr	w8, [x19, #176]
   3e944:	lsl	w1, w21, #3
   3e948:	sub	x0, x29, #0x4
   3e94c:	cmp	w8, #0x0
   3e950:	cset	w2, eq  // eq = none
   3e954:	bl	35610 <bfd_get_bits@plt>
   3e958:	mov	x1, x0
   3e95c:	add	x3, sp, #0x18
   3e960:	mov	x0, x28
   3e964:	mov	x2, x19
   3e968:	blr	x20
   3e96c:	mov	w0, w21
   3e970:	ldp	x20, x19, [sp, #144]
   3e974:	ldp	x22, x21, [sp, #128]
   3e978:	ldp	x24, x23, [sp, #112]
   3e97c:	ldp	x26, x25, [sp, #96]
   3e980:	ldp	x28, x27, [sp, #80]
   3e984:	ldp	x29, x30, [sp, #64]
   3e988:	add	sp, sp, #0xa0
   3e98c:	ret
   3e990:	ldr	x9, [x0, #48]
   3e994:	ldr	x8, [x0, #72]
   3e998:	sxtw	x10, w1
   3e99c:	cbz	x9, 3e9b0 <print_insn_aarch64@@Base+0x470>
   3e9a0:	ldr	x11, [x8, x10, lsl #3]
   3e9a4:	ldr	x11, [x11, #32]
   3e9a8:	cmp	x9, x11
   3e9ac:	b.ne	3ea14 <print_insn_aarch64@@Base+0x4d4>  // b.any
   3e9b0:	ldr	x8, [x8, x10, lsl #3]
   3e9b4:	ldrb	w9, [x8, #72]
   3e9b8:	and	w9, w9, #0xf
   3e9bc:	cmp	w9, #0x2
   3e9c0:	b.ne	3e9d0 <print_insn_aarch64@@Base+0x490>  // b.any
   3e9c4:	str	wzr, [x2]
   3e9c8:	mov	w0, #0x1                   	// #1
   3e9cc:	ret
   3e9d0:	ldr	x9, [x8, #8]
   3e9d4:	ldrb	w8, [x9]
   3e9d8:	cmp	w8, #0x24
   3e9dc:	b.ne	3ea14 <print_insn_aarch64@@Base+0x4d4>  // b.any
   3e9e0:	ldrb	w8, [x9, #1]
   3e9e4:	cmp	w8, #0x78
   3e9e8:	b.eq	3e9f4 <print_insn_aarch64@@Base+0x4b4>  // b.none
   3e9ec:	cmp	w8, #0x64
   3e9f0:	b.ne	3ea14 <print_insn_aarch64@@Base+0x4d4>  // b.any
   3e9f4:	ldrb	w9, [x9, #2]
   3e9f8:	cmp	w9, #0x2e
   3e9fc:	b.eq	3ea04 <print_insn_aarch64@@Base+0x4c4>  // b.none
   3ea00:	cbnz	w9, 3ea14 <print_insn_aarch64@@Base+0x4d4>
   3ea04:	cmp	w8, #0x78
   3ea08:	cset	w8, ne  // ne = any
   3ea0c:	str	w8, [x2]
   3ea10:	b	3e9c8 <print_insn_aarch64@@Base+0x488>
   3ea14:	mov	w0, wzr
   3ea18:	ret
   3ea1c:	stp	x29, x30, [sp, #-16]!
   3ea20:	ldr	w9, [x2, #172]
   3ea24:	mov	w8, w1
   3ea28:	mov	x29, sp
   3ea2c:	cmp	w9, #0x4
   3ea30:	b.eq	3ea64 <print_insn_aarch64@@Base+0x524>  // b.none
   3ea34:	cmp	w9, #0x2
   3ea38:	b.eq	3ea54 <print_insn_aarch64@@Base+0x514>  // b.none
   3ea3c:	cmp	w9, #0x1
   3ea40:	b.ne	3ea7c <print_insn_aarch64@@Base+0x53c>  // b.any
   3ea44:	ldp	x3, x0, [x2]
   3ea48:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ea4c:	add	x1, x1, #0xc10
   3ea50:	b	3ea70 <print_insn_aarch64@@Base+0x530>
   3ea54:	ldp	x3, x0, [x2]
   3ea58:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ea5c:	add	x1, x1, #0xc1d
   3ea60:	b	3ea70 <print_insn_aarch64@@Base+0x530>
   3ea64:	ldp	x3, x0, [x2]
   3ea68:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ea6c:	add	x1, x1, #0xc2b
   3ea70:	mov	w2, w8
   3ea74:	ldp	x29, x30, [sp], #16
   3ea78:	br	x3
   3ea7c:	bl	35750 <abort@plt>
   3ea80:	stp	x29, x30, [sp, #-96]!
   3ea84:	stp	x28, x27, [sp, #16]
   3ea88:	stp	x26, x25, [sp, #32]
   3ea8c:	stp	x24, x23, [sp, #48]
   3ea90:	stp	x22, x21, [sp, #64]
   3ea94:	stp	x20, x19, [sp, #80]
   3ea98:	mov	x29, sp
   3ea9c:	sub	sp, sp, #0x210
   3eaa0:	mov	x23, x2
   3eaa4:	mov	w8, #0x1                   	// #1
   3eaa8:	str	xzr, [x23, #208]!
   3eaac:	sturh	w8, [x23, #-12]
   3eab0:	ldur	w8, [x23, #-120]
   3eab4:	sturb	wzr, [x23, #-10]
   3eab8:	str	xzr, [x23, #8]
   3eabc:	adrp	x9, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3eac0:	mov	x19, x2
   3eac4:	ldrb	w2, [x9, #1616]
   3eac8:	mov	w21, w1
   3eacc:	cmp	w8, #0x0
   3ead0:	csel	x22, xzr, x0, lt  // lt = tstop
   3ead4:	add	x1, sp, #0x10
   3ead8:	mov	w0, w21
   3eadc:	mov	x20, x3
   3eae0:	bl	353d0 <aarch64_decode_insn@plt>
   3eae4:	and	w8, w21, #0x7fe00000
   3eae8:	cmp	w8, #0x200, lsl #12
   3eaec:	b.ne	3eafc <print_insn_aarch64@@Base+0x5bc>  // b.any
   3eaf0:	cbz	w0, 3edd0 <print_insn_aarch64@@Base+0x890>
   3eaf4:	mov	w0, #0x3                   	// #3
   3eaf8:	b	3eb08 <print_insn_aarch64@@Base+0x5c8>
   3eafc:	sub	w8, w0, #0x1
   3eb00:	cmp	w8, #0x3
   3eb04:	b.cs	3eb50 <print_insn_aarch64@@Base+0x610>  // b.hs, b.nlast
   3eb08:	adrp	x10, 7c000 <_sch_toupper@@Base+0x10454>
   3eb0c:	ldp	x9, x8, [x19]
   3eb10:	add	x10, x10, #0x328
   3eb14:	ldr	x3, [x10, w0, uxtw #3]
   3eb18:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3eb1c:	add	x1, x1, #0xcc6
   3eb20:	mov	x0, x8
   3eb24:	mov	w2, w21
   3eb28:	str	wzr, [x19, #200]
   3eb2c:	blr	x9
   3eb30:	add	sp, sp, #0x210
   3eb34:	ldp	x20, x19, [sp, #80]
   3eb38:	ldp	x22, x21, [sp, #64]
   3eb3c:	ldp	x24, x23, [sp, #48]
   3eb40:	ldp	x26, x25, [sp, #32]
   3eb44:	ldp	x28, x27, [sp, #16]
   3eb48:	ldp	x29, x30, [sp], #96
   3eb4c:	ret
   3eb50:	cbnz	w0, 3edf0 <print_insn_aarch64@@Base+0x8b0>
   3eb54:	ldr	x8, [sp, #24]
   3eb58:	ldr	w9, [x8, #16]
   3eb5c:	cmp	w9, #0x5a
   3eb60:	b.ne	3eb78 <print_insn_aarch64@@Base+0x638>  // b.any
   3eb64:	ldr	x9, [sp, #112]
   3eb68:	cmp	x9, #0x1f
   3eb6c:	b.gt	3eb78 <print_insn_aarch64@@Base+0x638>
   3eb70:	mov	w9, #0x1                   	// #1
   3eb74:	strb	w9, [sp, #44]
   3eb78:	ldrb	w9, [x8, #120]
   3eb7c:	str	x20, [sp, #8]
   3eb80:	tbnz	w9, #4, 3eb9c <print_insn_aarch64@@Base+0x65c>
   3eb84:	ldp	x9, x0, [x19]
   3eb88:	ldr	x2, [x8]
   3eb8c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   3eb90:	add	x1, x1, #0xbe9
   3eb94:	blr	x9
   3eb98:	b	3ebc4 <print_insn_aarch64@@Base+0x684>
   3eb9c:	sub	x0, x29, #0x94
   3eba0:	add	x1, sp, #0x10
   3eba4:	bl	3ef74 <print_aarch64_disassembler_options@@Base+0x140>
   3eba8:	ldr	x8, [sp, #32]
   3ebac:	ldp	x9, x0, [x19]
   3ebb0:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ebb4:	add	x1, x1, #0xdb9
   3ebb8:	ldr	x3, [x8]
   3ebbc:	sub	x2, x29, #0x94
   3ebc0:	blr	x9
   3ebc4:	ldr	x25, [sp, #24]
   3ebc8:	add	x8, sp, #0x10
   3ebcc:	add	x20, x8, #0x18
   3ebd0:	mov	x24, xzr
   3ebd4:	mov	w27, wzr
   3ebd8:	mov	x26, x20
   3ebdc:	stur	xzr, [x29, #-16]
   3ebe0:	add	x8, x25, x24, lsl #2
   3ebe4:	ldr	w8, [x8, #32]
   3ebe8:	cbz	w8, 3ec98 <print_insn_aarch64@@Base+0x758>
   3ebec:	ldr	w8, [x26]
   3ebf0:	cbz	w8, 3ec98 <print_insn_aarch64@@Base+0x758>
   3ebf4:	sub	x0, x29, #0x94
   3ebf8:	sub	x6, x29, #0x14
   3ebfc:	mov	w1, #0x80                  	// #128
   3ec00:	sub	x8, x29, #0x10
   3ec04:	mov	x2, x22
   3ec08:	mov	x3, x25
   3ec0c:	mov	x4, x20
   3ec10:	mov	w5, w24
   3ec14:	mov	x7, x23
   3ec18:	str	x8, [sp]
   3ec1c:	bl	354a0 <aarch64_print_operand@plt>
   3ec20:	ldurb	w8, [x29, #-148]
   3ec24:	cbz	w8, 3ec58 <print_insn_aarch64@@Base+0x718>
   3ec28:	ldp	x8, x0, [x19]
   3ec2c:	adrp	x9, 67000 <fields@@Base+0x10e84>
   3ec30:	adrp	x10, 55000 <xexit@@Base+0x184c>
   3ec34:	cmp	w27, #0x0
   3ec38:	add	x9, x9, #0x31b
   3ec3c:	add	x10, x10, #0xda6
   3ec40:	adrp	x1, 66000 <fields@@Base+0xfe84>
   3ec44:	csel	x2, x10, x9, eq  // eq = none
   3ec48:	add	x1, x1, #0xbe9
   3ec4c:	add	w28, w27, #0x1
   3ec50:	blr	x8
   3ec54:	mov	w27, w28
   3ec58:	ldur	w8, [x29, #-20]
   3ec5c:	cbz	w8, 3ec74 <print_insn_aarch64@@Base+0x734>
   3ec60:	ldr	x8, [x19, #120]
   3ec64:	ldr	x0, [x19, #208]
   3ec68:	mov	x1, x19
   3ec6c:	blr	x8
   3ec70:	b	3ec88 <print_insn_aarch64@@Base+0x748>
   3ec74:	ldp	x8, x0, [x19]
   3ec78:	adrp	x1, 66000 <fields@@Base+0xfe84>
   3ec7c:	sub	x2, x29, #0x94
   3ec80:	add	x1, x1, #0xbe9
   3ec84:	blr	x8
   3ec88:	add	x24, x24, #0x1
   3ec8c:	cmp	x24, #0x6
   3ec90:	add	x26, x26, #0x38
   3ec94:	b.ne	3ebe0 <print_insn_aarch64@@Base+0x6a0>  // b.any
   3ec98:	ldur	x2, [x29, #-16]
   3ec9c:	mov	w20, wzr
   3eca0:	adrp	x24, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3eca4:	cbz	x2, 3ecc4 <print_insn_aarch64@@Base+0x784>
   3eca8:	ldrb	w8, [x24, #1620]
   3ecac:	cbz	w8, 3ecc4 <print_insn_aarch64@@Base+0x784>
   3ecb0:	ldp	x8, x0, [x19]
   3ecb4:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ecb8:	add	x1, x1, #0xda8
   3ecbc:	blr	x8
   3ecc0:	mov	w20, #0x1                   	// #1
   3ecc4:	ldr	x8, [sp, #24]
   3ecc8:	ldrb	w8, [x8, #120]
   3eccc:	tbz	w8, #4, 3ed28 <print_insn_aarch64@@Base+0x7e8>
   3ecd0:	sub	x0, x29, #0x94
   3ecd4:	add	x1, sp, #0x10
   3ecd8:	bl	3ef74 <print_aarch64_disassembler_options@@Base+0x140>
   3ecdc:	adrp	x26, 55000 <xexit@@Base+0x184c>
   3ece0:	adrp	x27, 55000 <xexit@@Base+0x184c>
   3ece4:	adrp	x23, 55000 <xexit@@Base+0x184c>
   3ece8:	mov	w25, #0x8                   	// #8
   3ecec:	add	x26, x26, #0xdc4
   3ecf0:	add	x27, x27, #0xdbf
   3ecf4:	add	x23, x23, #0xdb6
   3ecf8:	ldr	x8, [sp, #32]
   3ecfc:	ldr	x4, [x8, x25]
   3ed00:	cbz	x4, 3ed28 <print_insn_aarch64@@Base+0x7e8>
   3ed04:	ldp	x8, x0, [x19]
   3ed08:	cmp	x25, #0x8
   3ed0c:	csel	x2, x27, x26, eq  // eq = none
   3ed10:	sub	x3, x29, #0x94
   3ed14:	mov	x1, x23
   3ed18:	blr	x8
   3ed1c:	add	x25, x25, #0x8
   3ed20:	cmp	x25, #0x20
   3ed24:	b.ne	3ecf8 <print_insn_aarch64@@Base+0x7b8>  // b.any
   3ed28:	cbnz	w20, 3eb30 <print_insn_aarch64@@Base+0x5f0>
   3ed2c:	ldr	x4, [sp, #8]
   3ed30:	adrp	x5, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3ed34:	add	x5, x5, #0x658
   3ed38:	add	x0, sp, #0x10
   3ed3c:	mov	w1, w21
   3ed40:	mov	x2, x22
   3ed44:	mov	w3, wzr
   3ed48:	bl	35340 <verify_constraints@plt>
   3ed4c:	cmp	w0, #0x4
   3ed50:	b.eq	3ed80 <print_insn_aarch64@@Base+0x840>  // b.none
   3ed54:	sub	w8, w0, #0x1
   3ed58:	cmp	w8, #0x2
   3ed5c:	b.hi	3eb30 <print_insn_aarch64@@Base+0x5f0>  // b.pmore
   3ed60:	adrp	x0, 58000 <fields@@Base+0x1e84>
   3ed64:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ed68:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3ed6c:	add	x0, x0, #0x5dc
   3ed70:	add	x1, x1, #0xc70
   3ed74:	add	x3, x3, #0xcd8
   3ed78:	mov	w2, #0xc79                 	// #3193
   3ed7c:	bl	35b90 <__assert_fail@plt>
   3ed80:	ldrb	w8, [x24, #1620]
   3ed84:	cmp	w8, #0x1
   3ed88:	b.ne	3eb30 <print_insn_aarch64@@Base+0x5f0>  // b.any
   3ed8c:	ldr	x20, [sp, #8]
   3ed90:	ldr	w8, [x20, #28]
   3ed94:	cbz	w8, 3edf4 <print_insn_aarch64@@Base+0x8b4>
   3ed98:	ldr	x2, [x20, #8]
   3ed9c:	cbz	x2, 3ee14 <print_insn_aarch64@@Base+0x8d4>
   3eda0:	ldp	x8, x0, [x19]
   3eda4:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3eda8:	add	x1, x1, #0xda8
   3edac:	blr	x8
   3edb0:	ldr	w8, [x20, #4]
   3edb4:	tbnz	w8, #31, 3eb30 <print_insn_aarch64@@Base+0x5f0>
   3edb8:	ldp	x9, x0, [x19]
   3edbc:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3edc0:	add	w2, w8, #0x1
   3edc4:	add	x1, x1, #0xe34
   3edc8:	blr	x9
   3edcc:	b	3eb30 <print_insn_aarch64@@Base+0x5f0>
   3edd0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3edd4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3edd8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3eddc:	add	x0, x0, #0xc54
   3ede0:	add	x1, x1, #0xc70
   3ede4:	add	x3, x3, #0xc62
   3ede8:	mov	w2, #0xca8                 	// #3240
   3edec:	bl	35b90 <__assert_fail@plt>
   3edf0:	bl	35750 <abort@plt>
   3edf4:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3edf8:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3edfc:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3ee00:	add	x0, x0, #0xdc6
   3ee04:	add	x1, x1, #0xc70
   3ee08:	add	x3, x3, #0xdd8
   3ee0c:	mov	w2, #0xc52                 	// #3154
   3ee10:	bl	35b90 <__assert_fail@plt>
   3ee14:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3ee18:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3ee1c:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3ee20:	add	x0, x0, #0xe26
   3ee24:	add	x1, x1, #0xc70
   3ee28:	add	x3, x3, #0xdd8
   3ee2c:	mov	w2, #0xc53                 	// #3155
   3ee30:	bl	35b90 <__assert_fail@plt>

000000000003ee34 <print_aarch64_disassembler_options@@Base>:
   3ee34:	stp	x29, x30, [sp, #-32]!
   3ee38:	stp	x20, x19, [sp, #16]
   3ee3c:	adrp	x20, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3ee40:	add	x20, x20, #0x7f0
   3ee44:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ee48:	mov	x19, x0
   3ee4c:	add	x1, x1, #0x4a1
   3ee50:	mov	w2, #0x5                   	// #5
   3ee54:	mov	x0, x20
   3ee58:	mov	x29, sp
   3ee5c:	bl	35ab0 <dcgettext@plt>
   3ee60:	mov	x1, x0
   3ee64:	mov	x0, x19
   3ee68:	bl	35c30 <fprintf@plt>
   3ee6c:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ee70:	add	x1, x1, #0x532
   3ee74:	mov	w2, #0x5                   	// #5
   3ee78:	mov	x0, x20
   3ee7c:	bl	35ab0 <dcgettext@plt>
   3ee80:	mov	x1, x0
   3ee84:	mov	x0, x19
   3ee88:	bl	35c30 <fprintf@plt>
   3ee8c:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3ee90:	add	x1, x1, #0x56a
   3ee94:	mov	w2, #0x5                   	// #5
   3ee98:	mov	x0, x20
   3ee9c:	bl	35ab0 <dcgettext@plt>
   3eea0:	mov	x1, x0
   3eea4:	mov	x0, x19
   3eea8:	bl	35c30 <fprintf@plt>
   3eeac:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3eeb0:	add	x1, x1, #0x59f
   3eeb4:	mov	w2, #0x5                   	// #5
   3eeb8:	mov	x0, x20
   3eebc:	bl	35ab0 <dcgettext@plt>
   3eec0:	mov	x1, x0
   3eec4:	mov	x0, x19
   3eec8:	bl	35c30 <fprintf@plt>
   3eecc:	adrp	x1, 55000 <xexit@@Base+0x184c>
   3eed0:	add	x1, x1, #0x5d3
   3eed4:	mov	w2, #0x5                   	// #5
   3eed8:	mov	x0, x20
   3eedc:	bl	35ab0 <dcgettext@plt>
   3eee0:	mov	x1, x0
   3eee4:	mov	x0, x19
   3eee8:	bl	35c30 <fprintf@plt>
   3eeec:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3eef0:	add	x1, x1, #0x82f
   3eef4:	mov	w2, #0x5                   	// #5
   3eef8:	mov	x0, x20
   3eefc:	bl	35ab0 <dcgettext@plt>
   3ef00:	mov	x1, x0
   3ef04:	mov	x0, x19
   3ef08:	ldp	x20, x19, [sp, #16]
   3ef0c:	ldp	x29, x30, [sp], #32
   3ef10:	b	35c30 <fprintf@plt>
   3ef14:	stp	x29, x30, [sp, #-48]!
   3ef18:	stp	x22, x21, [sp, #16]
   3ef1c:	stp	x20, x19, [sp, #32]
   3ef20:	mov	w20, w2
   3ef24:	mov	x19, x1
   3ef28:	mov	w21, w0
   3ef2c:	mov	x22, xzr
   3ef30:	mov	x29, sp
   3ef34:	ldr	w0, [x19, x22]
   3ef38:	cbz	w0, 3ef64 <print_aarch64_disassembler_options@@Base+0x130>
   3ef3c:	bl	354c0 <aarch64_get_qualifier_standard_value@plt>
   3ef40:	eor	w8, w0, w21
   3ef44:	tst	w8, w20
   3ef48:	b.eq	3ef60 <print_aarch64_disassembler_options@@Base+0x12c>  // b.none
   3ef4c:	add	x22, x22, #0x4
   3ef50:	cmp	x22, #0x28
   3ef54:	b.ne	3ef34 <print_aarch64_disassembler_options@@Base+0x100>  // b.any
   3ef58:	mov	w0, wzr
   3ef5c:	b	3ef64 <print_aarch64_disassembler_options@@Base+0x130>
   3ef60:	ldr	w0, [x19, x22]
   3ef64:	ldp	x20, x19, [sp, #32]
   3ef68:	ldp	x22, x21, [sp, #16]
   3ef6c:	ldp	x29, x30, [sp], #48
   3ef70:	ret
   3ef74:	stp	x29, x30, [sp, #-48]!
   3ef78:	stp	x20, x19, [sp, #32]
   3ef7c:	ldr	x8, [x1, #8]
   3ef80:	str	x21, [sp, #16]
   3ef84:	mov	x21, x1
   3ef88:	mov	x19, x0
   3ef8c:	ldr	x20, [x8]
   3ef90:	mov	w1, #0x2e                  	// #46
   3ef94:	mov	x29, sp
   3ef98:	mov	x0, x20
   3ef9c:	bl	35910 <strchr@plt>
   3efa0:	cbz	x0, 3efdc <print_aarch64_disassembler_options@@Base+0x1a8>
   3efa4:	ldr	x8, [x21, #16]
   3efa8:	cbz	x8, 3efdc <print_aarch64_disassembler_options@@Base+0x1a8>
   3efac:	sub	x21, x0, x20
   3efb0:	cmp	x21, #0x8
   3efb4:	b.cs	3effc <print_aarch64_disassembler_options@@Base+0x1c8>  // b.hs, b.nlast
   3efb8:	mov	x0, x19
   3efbc:	mov	x1, x20
   3efc0:	mov	x2, x21
   3efc4:	bl	35b50 <strncpy@plt>
   3efc8:	strb	wzr, [x19, x21]
   3efcc:	ldp	x20, x19, [sp, #32]
   3efd0:	ldr	x21, [sp, #16]
   3efd4:	ldp	x29, x30, [sp], #48
   3efd8:	ret
   3efdc:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3efe0:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3efe4:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3efe8:	add	x0, x0, #0xd57
   3efec:	add	x1, x1, #0xc70
   3eff0:	add	x3, x3, #0xd69
   3eff4:	mov	w2, #0xc19                 	// #3097
   3eff8:	bl	35b90 <__assert_fail@plt>
   3effc:	adrp	x0, 55000 <xexit@@Base+0x184c>
   3f000:	adrp	x1, 54000 <xexit@@Base+0x84c>
   3f004:	adrp	x3, 55000 <xexit@@Base+0x184c>
   3f008:	add	x0, x0, #0xd9e
   3f00c:	add	x1, x1, #0xc70
   3f010:	add	x3, x3, #0xd69
   3f014:	mov	w2, #0xc1b                 	// #3099
   3f018:	bl	35b90 <__assert_fail@plt>

000000000003f01c <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   3f01c:	stp	x29, x30, [sp, #-32]!
   3f020:	stp	x20, x19, [sp, #16]
   3f024:	mov	x19, x0
   3f028:	ldrb	w0, [x0, #56]
   3f02c:	mov	x29, sp
   3f030:	sub	w8, w0, #0xd
   3f034:	cmp	w8, #0x9
   3f038:	b.hi	3f09c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x80>  // b.pmore
   3f03c:	ldrb	w8, [x19, #57]
   3f040:	cmp	w0, w8
   3f044:	b.ne	3f0c8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xac>  // b.any
   3f048:	ldrb	w8, [x19, #58]
   3f04c:	sub	w8, w8, #0xd
   3f050:	cmp	w8, #0x9
   3f054:	b.hi	3f0c8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xac>  // b.pmore
   3f058:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f05c:	ldrb	w8, [x19, #57]
   3f060:	and	w20, w0, #0xff
   3f064:	mov	w0, w8
   3f068:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f06c:	cmp	w20, w0, uxtb
   3f070:	b.ne	3f0c8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xac>  // b.any
   3f074:	ldrb	w0, [x19, #56]
   3f078:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f07c:	ldrb	w8, [x19, #58]
   3f080:	and	w20, w0, #0xff
   3f084:	mov	w0, w8
   3f088:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f08c:	cmp	w20, w0, uxtb
   3f090:	b.ne	3f0c8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xac>  // b.any
   3f094:	mov	w8, #0x1                   	// #1
   3f098:	b	3f188 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   3f09c:	sub	w8, w0, #0x5
   3f0a0:	cmp	w8, #0x4
   3f0a4:	b.hi	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.pmore
   3f0a8:	ldrb	w8, [x19, #57]
   3f0ac:	sub	w8, w8, #0xd
   3f0b0:	cmp	w8, #0x9
   3f0b4:	b.hi	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.pmore
   3f0b8:	ldrb	w8, [x19, #58]
   3f0bc:	cbnz	w8, 3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>
   3f0c0:	mov	w8, #0x4                   	// #4
   3f0c4:	b	3f188 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   3f0c8:	ldrb	w8, [x19, #57]
   3f0cc:	sub	w8, w8, #0xd
   3f0d0:	cmp	w8, #0x9
   3f0d4:	b.hi	3f110 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xf4>  // b.pmore
   3f0d8:	ldrb	w0, [x19, #56]
   3f0dc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f0e0:	tst	w0, #0xff
   3f0e4:	b.eq	3f110 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xf4>  // b.none
   3f0e8:	ldrb	w0, [x19, #56]
   3f0ec:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f0f0:	ldrb	w8, [x19, #57]
   3f0f4:	and	w20, w0, #0xff
   3f0f8:	mov	w0, w8
   3f0fc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f100:	cmp	w20, w0, uxtb #1
   3f104:	b.ne	3f110 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xf4>  // b.any
   3f108:	mov	w8, #0x2                   	// #2
   3f10c:	b	3f188 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   3f110:	ldrb	w0, [x19, #56]
   3f114:	ldrb	w8, [x19, #57]
   3f118:	cmp	w0, w8
   3f11c:	b.ne	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.any
   3f120:	ldrb	w8, [x19, #58]
   3f124:	sub	w8, w8, #0xd
   3f128:	cmp	w8, #0x9
   3f12c:	b.hi	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.pmore
   3f130:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f134:	tst	w0, #0xff
   3f138:	b.eq	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.none
   3f13c:	ldrb	w0, [x19, #56]
   3f140:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f144:	ldrb	w8, [x19, #58]
   3f148:	and	w20, w0, #0xff
   3f14c:	mov	w0, w8
   3f150:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f154:	cmp	w20, w0, uxtb #1
   3f158:	b.ne	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.any
   3f15c:	ldrb	w0, [x19, #56]
   3f160:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f164:	ldrb	w8, [x19, #57]
   3f168:	and	w19, w0, #0xff
   3f16c:	mov	w0, w8
   3f170:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3f174:	cmp	w19, w0, uxtb
   3f178:	b.ne	3f184 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x168>  // b.any
   3f17c:	mov	w8, #0x3                   	// #3
   3f180:	b	3f188 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   3f184:	mov	x8, xzr
   3f188:	adrp	x9, 56000 <xexit@@Base+0x284c>
   3f18c:	add	x9, x9, #0x176
   3f190:	ldrb	w0, [x9, x8]
   3f194:	ldp	x20, x19, [sp, #16]
   3f198:	ldp	x29, x30, [sp], #32
   3f19c:	ret

000000000003f1a0 <aarch64_get_operand_class@@Base>:
   3f1a0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f1a4:	ldr	x9, [x9, #4032]
   3f1a8:	mov	w8, #0x30                  	// #48
   3f1ac:	umull	x8, w0, w8
   3f1b0:	ldr	w0, [x9, x8]
   3f1b4:	ret

000000000003f1b8 <aarch64_get_operand_name@@Base>:
   3f1b8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3f1bc:	ldr	x8, [x8, #4032]
   3f1c0:	mov	w9, #0x30                  	// #48
   3f1c4:	umaddl	x8, w0, w9, x8
   3f1c8:	ldr	x0, [x8, #8]
   3f1cc:	ret

000000000003f1d0 <aarch64_get_operand_desc@@Base>:
   3f1d0:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3f1d4:	ldr	x8, [x8, #4032]
   3f1d8:	mov	w9, #0x30                  	// #48
   3f1dc:	umaddl	x8, w0, w9, x8
   3f1e0:	ldr	x0, [x8, #40]
   3f1e4:	ret

000000000003f1e8 <get_cond_from_value@@Base>:
   3f1e8:	cmp	w0, #0x10
   3f1ec:	b.cs	3f204 <get_cond_from_value@@Base+0x1c>  // b.hs, b.nlast
   3f1f0:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3f1f4:	ldr	x8, [x8, #4000]
   3f1f8:	mov	w9, #0x28                  	// #40
   3f1fc:	umaddl	x0, w0, w9, x8
   3f200:	ret
   3f204:	stp	x29, x30, [sp, #-16]!
   3f208:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f20c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f210:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f214:	add	x0, x0, #0x82b
   3f218:	add	x1, x1, #0x836
   3f21c:	add	x3, x3, #0x852
   3f220:	mov	w2, #0x178                 	// #376
   3f224:	mov	x29, sp
   3f228:	bl	35b90 <__assert_fail@plt>

000000000003f22c <get_inverted_cond@@Base>:
   3f22c:	ldr	w8, [x0, #32]
   3f230:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   3f234:	ldr	x10, [x10, #4000]
   3f238:	mov	w9, #0x28                  	// #40
   3f23c:	eor	x8, x8, #0x1
   3f240:	madd	x0, x8, x9, x10
   3f244:	ret

000000000003f248 <aarch64_get_operand_modifier@@Base>:
   3f248:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3f24c:	ldr	x8, [x8, #3904]
   3f250:	sub	x8, x0, x8
   3f254:	lsr	x0, x8, #4
   3f258:	ret

000000000003f25c <aarch64_get_operand_modifier_value@@Base>:
   3f25c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   3f260:	ldr	x8, [x8, #3904]
   3f264:	add	x8, x8, w0, uxtw #4
   3f268:	ldr	w0, [x8, #8]
   3f26c:	ret

000000000003f270 <aarch64_get_operand_modifier_from_value@@Base>:
   3f270:	mov	w9, #0x5                   	// #5
   3f274:	add	w8, w0, #0x6
   3f278:	sub	w9, w9, w0
   3f27c:	cmp	w1, #0x1
   3f280:	csel	w0, w8, w9, eq  // eq = none
   3f284:	ret

000000000003f288 <aarch64_extend_operator_p@@Base>:
   3f288:	sub	w8, w0, #0x6
   3f28c:	cmp	w8, #0x8
   3f290:	cset	w0, cc  // cc = lo, ul, last
   3f294:	ret

000000000003f298 <aarch64_stack_pointer_p@@Base>:
   3f298:	ldr	w8, [x0]
   3f29c:	mov	w9, #0x30                  	// #48
   3f2a0:	mul	x10, x8, x9
   3f2a4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f2a8:	ldr	x9, [x9, #4032]
   3f2ac:	ldr	w10, [x9, x10]
   3f2b0:	cmp	w10, #0x1
   3f2b4:	b.ne	3f2c8 <aarch64_stack_pointer_p@@Base+0x30>  // b.any
   3f2b8:	mov	w10, #0x30                  	// #48
   3f2bc:	madd	x8, x8, x10, x9
   3f2c0:	ldrb	w8, [x8, #16]
   3f2c4:	tbnz	w8, #4, 3f2d0 <aarch64_stack_pointer_p@@Base+0x38>
   3f2c8:	mov	w0, wzr
   3f2cc:	ret
   3f2d0:	ldr	w8, [x0, #16]
   3f2d4:	cmp	w8, #0x1f
   3f2d8:	cset	w0, eq  // eq = none
   3f2dc:	ret

000000000003f2e0 <aarch64_zero_register_p@@Base>:
   3f2e0:	ldr	w8, [x0]
   3f2e4:	mov	w9, #0x30                  	// #48
   3f2e8:	mul	x10, x8, x9
   3f2ec:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f2f0:	ldr	x9, [x9, #4032]
   3f2f4:	ldr	w10, [x9, x10]
   3f2f8:	cmp	w10, #0x1
   3f2fc:	b.ne	3f320 <aarch64_zero_register_p@@Base+0x40>  // b.any
   3f300:	mov	w10, #0x30                  	// #48
   3f304:	madd	x8, x8, x10, x9
   3f308:	ldrb	w8, [x8, #16]
   3f30c:	tbnz	w8, #4, 3f320 <aarch64_zero_register_p@@Base+0x40>
   3f310:	ldr	w8, [x0, #16]
   3f314:	cmp	w8, #0x1f
   3f318:	cset	w0, eq  // eq = none
   3f31c:	ret
   3f320:	mov	w0, wzr
   3f324:	ret

000000000003f328 <aarch64_get_expected_qualifier@@Base>:
   3f328:	stp	x29, x30, [sp, #-16]!
   3f32c:	tst	w2, #0xff
   3f330:	sxtw	x9, w3
   3f334:	mov	x29, sp
   3f338:	b.eq	3f378 <aarch64_get_expected_qualifier@@Base+0x50>  // b.none
   3f33c:	mov	x8, xzr
   3f340:	add	x9, x0, x9
   3f344:	mov	w10, #0xffffffff            	// #-1
   3f348:	ldrb	w11, [x9]
   3f34c:	cmp	w11, w2, uxtb
   3f350:	b.ne	3f360 <aarch64_get_expected_qualifier@@Base+0x38>  // b.any
   3f354:	cmn	w10, #0x1
   3f358:	b.ne	3f394 <aarch64_get_expected_qualifier@@Base+0x6c>  // b.any
   3f35c:	mov	w10, w8
   3f360:	add	x8, x8, #0x1
   3f364:	cmp	x8, #0xa
   3f368:	add	x9, x9, #0x6
   3f36c:	b.ne	3f348 <aarch64_get_expected_qualifier@@Base+0x20>  // b.any
   3f370:	sxtw	x8, w10
   3f374:	b	3f384 <aarch64_get_expected_qualifier@@Base+0x5c>
   3f378:	ldrb	w8, [x0, x9]
   3f37c:	cbnz	w8, 3f3a0 <aarch64_get_expected_qualifier@@Base+0x78>
   3f380:	mov	x8, xzr
   3f384:	mov	w9, #0x6                   	// #6
   3f388:	madd	x8, x8, x9, x0
   3f38c:	ldrb	w0, [x8, w1, sxtw]
   3f390:	b	3f398 <aarch64_get_expected_qualifier@@Base+0x70>
   3f394:	mov	w0, wzr
   3f398:	ldp	x29, x30, [sp], #16
   3f39c:	ret
   3f3a0:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f3a4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f3a8:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f3ac:	add	x0, x0, #0x950
   3f3b0:	add	x1, x1, #0x836
   3f3b4:	add	x3, x3, #0x97c
   3f3b8:	mov	w2, #0x28f                 	// #655
   3f3bc:	bl	35b90 <__assert_fail@plt>

000000000003f3c0 <aarch64_get_qualifier_name@@Base>:
   3f3c0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f3c4:	ldr	x9, [x9, #3776]
   3f3c8:	and	x8, x0, #0xff
   3f3cc:	add	x8, x9, x8, lsl #5
   3f3d0:	ldr	x0, [x8, #16]
   3f3d4:	ret

000000000003f3d8 <aarch64_get_qualifier_esize@@Base>:
   3f3d8:	stp	x29, x30, [sp, #-16]!
   3f3dc:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f3e0:	ldr	x9, [x9, #3776]
   3f3e4:	and	x8, x0, #0xff
   3f3e8:	mov	x29, sp
   3f3ec:	add	x10, x9, x8, lsl #5
   3f3f0:	ldr	w10, [x10, #24]
   3f3f4:	cmp	w10, #0x1
   3f3f8:	b.ne	3f40c <aarch64_get_qualifier_esize@@Base+0x34>  // b.any
   3f3fc:	lsl	x8, x8, #5
   3f400:	ldr	w0, [x9, x8]
   3f404:	ldp	x29, x30, [sp], #16
   3f408:	ret
   3f40c:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f410:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f414:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f418:	add	x0, x0, #0xa5f
   3f41c:	add	x1, x1, #0x836
   3f420:	add	x3, x3, #0xa8f
   3f424:	mov	w2, #0x30e                 	// #782
   3f428:	bl	35b90 <__assert_fail@plt>

000000000003f42c <aarch64_get_qualifier_nelem@@Base>:
   3f42c:	stp	x29, x30, [sp, #-16]!
   3f430:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f434:	ldr	x9, [x9, #3776]
   3f438:	and	x8, x0, #0xff
   3f43c:	mov	x29, sp
   3f440:	add	x8, x9, x8, lsl #5
   3f444:	ldr	w9, [x8, #24]
   3f448:	cmp	w9, #0x1
   3f44c:	b.ne	3f45c <aarch64_get_qualifier_nelem@@Base+0x30>  // b.any
   3f450:	ldr	w0, [x8, #4]
   3f454:	ldp	x29, x30, [sp], #16
   3f458:	ret
   3f45c:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f460:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f464:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f468:	add	x0, x0, #0xa5f
   3f46c:	add	x1, x1, #0x836
   3f470:	add	x3, x3, #0xad3
   3f474:	mov	w2, #0x315                 	// #789
   3f478:	bl	35b90 <__assert_fail@plt>

000000000003f47c <aarch64_get_qualifier_standard_value@@Base>:
   3f47c:	stp	x29, x30, [sp, #-16]!
   3f480:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3f484:	ldr	x9, [x9, #3776]
   3f488:	and	x8, x0, #0xff
   3f48c:	mov	x29, sp
   3f490:	add	x8, x9, x8, lsl #5
   3f494:	ldr	w9, [x8, #24]
   3f498:	cmp	w9, #0x1
   3f49c:	b.ne	3f4ac <aarch64_get_qualifier_standard_value@@Base+0x30>  // b.any
   3f4a0:	ldr	w0, [x8, #8]
   3f4a4:	ldp	x29, x30, [sp], #16
   3f4a8:	ret
   3f4ac:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f4b0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f4b4:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f4b8:	add	x0, x0, #0xa5f
   3f4bc:	add	x1, x1, #0x836
   3f4c0:	add	x3, x3, #0xb17
   3f4c4:	mov	w2, #0x31c                 	// #796
   3f4c8:	bl	35b90 <__assert_fail@plt>

000000000003f4cc <aarch64_is_destructive_by_operands@@Base>:
   3f4cc:	ldr	w8, [x0, #32]
   3f4d0:	cbz	w8, 3f4f4 <aarch64_is_destructive_by_operands@@Base+0x28>
   3f4d4:	add	x9, x0, #0x24
   3f4d8:	ldr	w10, [x9]
   3f4dc:	cbz	w10, 3f4f4 <aarch64_is_destructive_by_operands@@Base+0x28>
   3f4e0:	cmp	w10, w8
   3f4e4:	add	x9, x9, #0x4
   3f4e8:	b.ne	3f4d8 <aarch64_is_destructive_by_operands@@Base+0xc>  // b.any
   3f4ec:	mov	w0, #0x1                   	// #1
   3f4f0:	ret
   3f4f4:	mov	w0, wzr
   3f4f8:	ret

000000000003f4fc <aarch64_num_of_operands@@Base>:
   3f4fc:	stp	x29, x30, [sp, #-16]!
   3f500:	add	x8, x0, #0x20
   3f504:	mov	w0, #0xffffffff            	// #-1
   3f508:	mov	x29, sp
   3f50c:	ldr	w9, [x8], #4
   3f510:	add	w0, w0, #0x1
   3f514:	cbnz	w9, 3f50c <aarch64_num_of_operands@@Base+0x10>
   3f518:	cmp	w0, #0x7
   3f51c:	b.cs	3f528 <aarch64_num_of_operands@@Base+0x2c>  // b.hs, b.nlast
   3f520:	ldp	x29, x30, [sp], #16
   3f524:	ret
   3f528:	adrp	x0, 56000 <xexit@@Base+0x284c>
   3f52c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3f530:	adrp	x3, 56000 <xexit@@Base+0x284c>
   3f534:	add	x0, x0, #0xb63
   3f538:	add	x1, x1, #0x836
   3f53c:	add	x3, x3, #0xb87
   3f540:	mov	w2, #0x372                 	// #882
   3f544:	bl	35b90 <__assert_fail@plt>

000000000003f548 <aarch64_find_best_match@@Base>:
   3f548:	stp	x29, x30, [sp, #-48]!
   3f54c:	stp	x22, x21, [sp, #16]
   3f550:	stp	x20, x19, [sp, #32]
   3f554:	mov	x22, x0
   3f558:	ldr	x0, [x0, #8]
   3f55c:	mov	x29, sp
   3f560:	mov	x19, x3
   3f564:	mov	w21, w2
   3f568:	mov	x20, x1
   3f56c:	bl	35260 <aarch64_num_of_operands@plt>
   3f570:	cbz	w0, 3f714 <aarch64_find_best_match@@Base+0x1cc>
   3f574:	cmp	w0, w21
   3f578:	mov	w9, #0xffffffff            	// #-1
   3f57c:	sub	w8, w0, #0x1
   3f580:	ccmp	w21, w9, #0x4, gt
   3f584:	adrp	x16, 96000 <aarch64_operands@@Base+0x16c38>
   3f588:	csel	w8, w21, w8, gt
   3f58c:	cmp	w0, #0x0
   3f590:	ldr	x16, [x16, #4032]
   3f594:	cset	w9, gt
   3f598:	cmp	w8, #0x0
   3f59c:	adrp	x13, 55000 <xexit@@Base+0x184c>
   3f5a0:	cset	w15, ge  // ge = tcont
   3f5a4:	mov	w10, wzr
   3f5a8:	sxtw	x11, w0
   3f5ac:	add	x12, x22, #0x18
   3f5b0:	add	x13, x13, #0xe48
   3f5b4:	mov	w14, #0x30                  	// #48
   3f5b8:	sxtw	x8, w8
   3f5bc:	and	w15, w9, w15
   3f5c0:	mov	x9, x20
   3f5c4:	mov	x17, xzr
   3f5c8:	ldrb	w18, [x9, x17]
   3f5cc:	cbnz	w18, 3f5e0 <aarch64_find_best_match@@Base+0x98>
   3f5d0:	add	x17, x17, #0x1
   3f5d4:	cmp	x17, #0x6
   3f5d8:	b.ne	3f5c8 <aarch64_find_best_match@@Base+0x80>  // b.any
   3f5dc:	b	3f6bc <aarch64_find_best_match@@Base+0x174>
   3f5e0:	cbz	w15, 3f6c8 <aarch64_find_best_match@@Base+0x180>
   3f5e4:	mov	x17, xzr
   3f5e8:	mov	x18, x12
   3f5ec:	ldrb	w1, [x18, #4]
   3f5f0:	cbz	w1, 3f684 <aarch64_find_best_match@@Base+0x13c>
   3f5f4:	ldrb	w0, [x9, x17]
   3f5f8:	cmp	w0, w1
   3f5fc:	b.eq	3f684 <aarch64_find_best_match@@Base+0x13c>  // b.none
   3f600:	sub	w1, w1, #0x1
   3f604:	cmp	w1, #0x3
   3f608:	b.hi	3f6a4 <aarch64_find_best_match@@Base+0x15c>  // b.pmore
   3f60c:	adr	x2, 3f61c <aarch64_find_best_match@@Base+0xd4>
   3f610:	ldrb	w3, [x13, x1]
   3f614:	add	x2, x2, x3, lsl #2
   3f618:	br	x2
   3f61c:	cmp	w0, #0x3
   3f620:	b.eq	3f630 <aarch64_find_best_match@@Base+0xe8>  // b.none
   3f624:	b	3f6a4 <aarch64_find_best_match@@Base+0x15c>
   3f628:	cmp	w0, #0x4
   3f62c:	b.ne	3f6a4 <aarch64_find_best_match@@Base+0x15c>  // b.any
   3f630:	ldr	w0, [x18]
   3f634:	mul	x1, x0, x14
   3f638:	ldr	w1, [x16, x1]
   3f63c:	cmp	w1, #0x1
   3f640:	b.ne	3f6a4 <aarch64_find_best_match@@Base+0x15c>  // b.any
   3f644:	madd	x0, x0, x14, x16
   3f648:	ldrb	w0, [x0, #16]
   3f64c:	tbz	w0, #4, 3f6a4 <aarch64_find_best_match@@Base+0x15c>
   3f650:	ldr	w0, [x18, #16]
   3f654:	cmp	w0, #0x1f
   3f658:	b.eq	3f684 <aarch64_find_best_match@@Base+0x13c>  // b.none
   3f65c:	b	3f6a4 <aarch64_find_best_match@@Base+0x15c>
   3f660:	cmp	w0, #0x1
   3f664:	b.eq	3f674 <aarch64_find_best_match@@Base+0x12c>  // b.none
   3f668:	b	3f6a4 <aarch64_find_best_match@@Base+0x15c>
   3f66c:	cmp	w0, #0x2
   3f670:	b.ne	3f6a4 <aarch64_find_best_match@@Base+0x15c>  // b.any
   3f674:	ldr	w0, [x18]
   3f678:	madd	x0, x0, x14, x16
   3f67c:	ldrb	w0, [x0, #16]
   3f680:	tbz	w0, #4, 3f6a4 <aarch64_find_best_match@@Base+0x15c>
   3f684:	add	x0, x17, #0x1
   3f688:	cmp	x0, x11
   3f68c:	b.ge	3f6cc <aarch64_find_best_match@@Base+0x184>  // b.tcont
   3f690:	cmp	x17, x8
   3f694:	add	x18, x18, #0x38
   3f698:	mov	x17, x0
   3f69c:	b.lt	3f5ec <aarch64_find_best_match@@Base+0xa4>  // b.tstop
   3f6a0:	b	3f6cc <aarch64_find_best_match@@Base+0x184>
   3f6a4:	add	w10, w10, #0x1
   3f6a8:	mov	w0, wzr
   3f6ac:	cmp	w10, #0xa
   3f6b0:	add	x9, x9, #0x6
   3f6b4:	b.ne	3f5c4 <aarch64_find_best_match@@Base+0x7c>  // b.any
   3f6b8:	b	3f718 <aarch64_find_best_match@@Base+0x1d0>
   3f6bc:	cbz	w10, 3f6cc <aarch64_find_best_match@@Base+0x184>
   3f6c0:	mov	w0, wzr
   3f6c4:	b	3f718 <aarch64_find_best_match@@Base+0x1d0>
   3f6c8:	mov	x9, x20
   3f6cc:	tbnz	w8, #31, 3f6f8 <aarch64_find_best_match@@Base+0x1b0>
   3f6d0:	add	w10, w8, #0x1
   3f6d4:	mov	x11, x10
   3f6d8:	mov	x12, x19
   3f6dc:	ldrb	w13, [x9], #1
   3f6e0:	subs	x11, x11, #0x1
   3f6e4:	strb	w13, [x12], #1
   3f6e8:	b.ne	3f6dc <aarch64_find_best_match@@Base+0x194>  // b.any
   3f6ec:	cmp	w8, #0x4
   3f6f0:	b.ls	3f6fc <aarch64_find_best_match@@Base+0x1b4>  // b.plast
   3f6f4:	b	3f714 <aarch64_find_best_match@@Base+0x1cc>
   3f6f8:	mov	w10, wzr
   3f6fc:	mov	w8, #0x5                   	// #5
   3f700:	sub	w8, w8, w10
   3f704:	add	x0, x19, w10, uxtw
   3f708:	add	x2, x8, #0x1
   3f70c:	mov	w1, wzr
   3f710:	bl	35550 <memset@plt>
   3f714:	mov	w0, #0x1                   	// #1
   3f718:	ldp	x20, x19, [sp, #32]
   3f71c:	ldp	x22, x21, [sp, #16]
   3f720:	ldp	x29, x30, [sp], #48
   3f724:	ret

000000000003f728 <aarch64_wide_constant_p@@Base>:
   3f728:	cbz	w1, 3f740 <aarch64_wide_constant_p@@Base+0x18>
   3f72c:	lsr	x8, x0, #32
   3f730:	add	w8, w8, #0x1
   3f734:	cmp	w8, #0x1
   3f738:	b.hi	3f780 <aarch64_wide_constant_p@@Base+0x58>  // b.pmore
   3f73c:	and	x0, x0, #0xffffffff
   3f740:	cmp	x0, #0x10, lsl #12
   3f744:	b.cs	3f750 <aarch64_wide_constant_p@@Base+0x28>  // b.hs, b.nlast
   3f748:	mov	w8, wzr
   3f74c:	b	3f79c <aarch64_wide_constant_p@@Base+0x74>
   3f750:	tst	x0, #0xffffffff0000ffff
   3f754:	b.ne	3f760 <aarch64_wide_constant_p@@Base+0x38>  // b.any
   3f758:	mov	w8, #0x10                  	// #16
   3f75c:	b	3f79c <aarch64_wide_constant_p@@Base+0x74>
   3f760:	and	x8, x0, #0xffff00000000
   3f764:	cbnz	w1, 3f788 <aarch64_wide_constant_p@@Base+0x60>
   3f768:	cmp	x8, x0
   3f76c:	b.eq	3f788 <aarch64_wide_constant_p@@Base+0x60>  // b.none
   3f770:	tst	x0, #0xffffffffffff
   3f774:	b.ne	3f780 <aarch64_wide_constant_p@@Base+0x58>  // b.any
   3f778:	mov	w8, #0x30                  	// #48
   3f77c:	b	3f79c <aarch64_wide_constant_p@@Base+0x74>
   3f780:	mov	w0, wzr
   3f784:	ret
   3f788:	cmp	x8, x0
   3f78c:	mov	w0, wzr
   3f790:	b.ne	3f7a8 <aarch64_wide_constant_p@@Base+0x80>  // b.any
   3f794:	cbnz	w1, 3f7a8 <aarch64_wide_constant_p@@Base+0x80>
   3f798:	mov	w8, #0x20                  	// #32
   3f79c:	cbz	x2, 3f7a4 <aarch64_wide_constant_p@@Base+0x7c>
   3f7a0:	str	w8, [x2]
   3f7a4:	mov	w0, #0x1                   	// #1
   3f7a8:	ret

000000000003f7ac <aarch64_logical_immediate_p@@Base>:
   3f7ac:	sub	sp, sp, #0x70
   3f7b0:	stp	x22, x21, [sp, #80]
   3f7b4:	adrp	x22, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3f7b8:	ldrb	w8, [x22, #1656]
   3f7bc:	stp	x20, x19, [sp, #96]
   3f7c0:	mov	x19, x2
   3f7c4:	mov	w20, w1
   3f7c8:	mov	x21, x0
   3f7cc:	stp	x29, x30, [sp, #16]
   3f7d0:	stp	x28, x27, [sp, #32]
   3f7d4:	stp	x26, x25, [sp, #48]
   3f7d8:	stp	x24, x23, [sp, #64]
   3f7dc:	add	x29, sp, #0x10
   3f7e0:	tbnz	w8, #0, 3f954 <aarch64_logical_immediate_p@@Base+0x1a8>
   3f7e4:	adrp	x10, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3f7e8:	adrp	x11, 55000 <xexit@@Base+0x184c>
   3f7ec:	mov	w5, wzr
   3f7f0:	mov	w8, #0x1                   	// #1
   3f7f4:	mov	x9, #0xfffffffffffffffe    	// #-2
   3f7f8:	add	x10, x10, #0x680
   3f7fc:	add	x11, x11, #0xe4c
   3f800:	mov	x12, #0xffffffffffffffff    	// #-1
   3f804:	mov	w13, #0x5                   	// #5
   3f808:	mov	w14, #0xffffffff            	// #-1
   3f80c:	mov	w15, #0x1                   	// #1
   3f810:	cmp	w15, #0x6
   3f814:	lsl	w16, w8, w15
   3f818:	b.ne	3f834 <aarch64_logical_immediate_p@@Base+0x88>  // b.any
   3f81c:	mov	w3, wzr
   3f820:	mov	x17, #0xffffffffffffffff    	// #-1
   3f824:	mov	w0, #0x1000                	// #4096
   3f828:	mov	w1, #0x3f                  	// #63
   3f82c:	mov	w18, #0x40                  	// #64
   3f830:	b	3f860 <aarch64_logical_immediate_p@@Base+0xb4>
   3f834:	subs	w1, w16, #0x1
   3f838:	add	w2, w15, #0x1
   3f83c:	b.eq	3f91c <aarch64_logical_immediate_p@@Base+0x170>  // b.none
   3f840:	sub	w3, w13, w15
   3f844:	lsl	w3, w14, w3
   3f848:	lsl	x17, x12, x16
   3f84c:	mvn	w3, w3
   3f850:	mov	w0, wzr
   3f854:	mov	w18, w16
   3f858:	mvn	x17, x17
   3f85c:	lsl	w3, w3, w2
   3f860:	mov	x2, xzr
   3f864:	orr	w0, w3, w0
   3f868:	mov	w1, w1
   3f86c:	mov	w4, w5
   3f870:	lsl	x7, x9, x2
   3f874:	add	x23, x10, w4, sxtw #4
   3f878:	mov	w6, wzr
   3f87c:	mov	x3, xzr
   3f880:	orr	w5, w0, w2
   3f884:	add	x2, x2, #0x1
   3f888:	mvn	x7, x7
   3f88c:	add	x23, x23, #0x8
   3f890:	mov	w24, w16
   3f894:	mov	x25, x7
   3f898:	cbz	x3, 3f8ac <aarch64_logical_immediate_p@@Base+0x100>
   3f89c:	lsl	x26, x7, x24
   3f8a0:	lsr	x25, x7, x3
   3f8a4:	and	x26, x26, x17
   3f8a8:	orr	x25, x26, x25
   3f8ac:	sub	w26, w15, #0x1
   3f8b0:	cmp	w26, #0x5
   3f8b4:	b.hi	3f9fc <aarch64_logical_immediate_p@@Base+0x250>  // b.pmore
   3f8b8:	adr	x27, 3f8c8 <aarch64_logical_immediate_p@@Base+0x11c>
   3f8bc:	ldrb	w28, [x11, x26]
   3f8c0:	add	x27, x27, x28, lsl #2
   3f8c4:	br	x27
   3f8c8:	orr	x25, x25, x25, lsl #2
   3f8cc:	orr	x25, x25, x25, lsl #4
   3f8d0:	orr	x25, x25, x25, lsl #8
   3f8d4:	orr	x25, x25, x25, lsl #16
   3f8d8:	orr	x25, x25, x25, lsl #32
   3f8dc:	stur	x25, [x23, #-8]
   3f8e0:	orr	w25, w5, w6
   3f8e4:	add	x3, x3, #0x1
   3f8e8:	add	w6, w6, #0x40
   3f8ec:	sub	w24, w24, #0x1
   3f8f0:	str	w25, [x23], #16
   3f8f4:	cmp	x3, x18
   3f8f8:	b.cc	3f894 <aarch64_logical_immediate_p@@Base+0xe8>  // b.lo, b.ul, b.last
   3f8fc:	cmp	x2, x1
   3f900:	add	w5, w4, w3
   3f904:	b.ne	3f86c <aarch64_logical_immediate_p@@Base+0xc0>  // b.any
   3f908:	add	w5, w4, w3
   3f90c:	add	w15, w15, #0x1
   3f910:	cmp	w15, #0x7
   3f914:	b.ne	3f810 <aarch64_logical_immediate_p@@Base+0x64>  // b.any
   3f918:	b	3f924 <aarch64_logical_immediate_p@@Base+0x178>
   3f91c:	mov	w15, w2
   3f920:	b	3f910 <aarch64_logical_immediate_p@@Base+0x164>
   3f924:	mov	w8, #0x14d6                	// #5334
   3f928:	cmp	w5, w8
   3f92c:	b.ne	3fa00 <aarch64_logical_immediate_p@@Base+0x254>  // b.any
   3f930:	adrp	x0, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3f934:	adrp	x3, 3f000 <print_aarch64_disassembler_options@@Base+0x1cc>
   3f938:	add	x0, x0, #0x680
   3f93c:	add	x3, x3, #0xa20
   3f940:	mov	w1, #0x14d6                	// #5334
   3f944:	mov	w2, #0x10                  	// #16
   3f948:	bl	35360 <qsort@plt>
   3f94c:	mov	w8, #0x1                   	// #1
   3f950:	strb	w8, [x22, #1656]
   3f954:	lsl	w8, w20, #2
   3f958:	mov	x9, #0xffffffffffffffff    	// #-1
   3f95c:	lsl	x9, x9, x8
   3f960:	lsl	x9, x9, x8
   3f964:	bic	x8, x21, x9
   3f968:	cmp	x8, x21
   3f96c:	b.eq	3f984 <aarch64_logical_immediate_p@@Base+0x1d8>  // b.none
   3f970:	orr	x9, x9, x21
   3f974:	cmp	x9, x21
   3f978:	b.eq	3f984 <aarch64_logical_immediate_p@@Base+0x1d8>  // b.none
   3f97c:	mov	w0, wzr
   3f980:	b	3f9dc <aarch64_logical_immediate_p@@Base+0x230>
   3f984:	cmp	w20, #0x7
   3f988:	b.gt	3f9a4 <aarch64_logical_immediate_p@@Base+0x1f8>
   3f98c:	lsl	w9, w20, #3
   3f990:	lsl	x10, x8, x9
   3f994:	cmp	w9, #0x20
   3f998:	lsl	w9, w9, #1
   3f99c:	orr	x8, x10, x8
   3f9a0:	b.lt	3f990 <aarch64_logical_immediate_p@@Base+0x1e4>  // b.tstop
   3f9a4:	adrp	x1, ed000 <aarch64_opcode_table@@Base+0x555c0>
   3f9a8:	adrp	x4, 3f000 <print_aarch64_disassembler_options@@Base+0x1cc>
   3f9ac:	add	x1, x1, #0x680
   3f9b0:	add	x4, x4, #0xa20
   3f9b4:	mov	x0, sp
   3f9b8:	mov	w2, #0x14d6                	// #5334
   3f9bc:	mov	w3, #0x10                  	// #16
   3f9c0:	str	x8, [sp]
   3f9c4:	bl	35660 <bsearch@plt>
   3f9c8:	cbz	x0, 3f9dc <aarch64_logical_immediate_p@@Base+0x230>
   3f9cc:	cbz	x19, 3f9d8 <aarch64_logical_immediate_p@@Base+0x22c>
   3f9d0:	ldr	w8, [x0, #8]
   3f9d4:	str	w8, [x19]
   3f9d8:	mov	w0, #0x1                   	// #1
   3f9dc:	ldp	x20, x19, [sp, #96]
   3f9e0:	ldp	x22, x21, [sp, #80]
   3f9e4:	ldp	x24, x23, [sp, #64]
   3f9e8:	ldp	x26, x25, [sp, #48]
   3f9ec:	ldp	x28, x27, [sp, #32]
   3f9f0:	ldp	x29, x30, [sp, #16]
   3f9f4:	add	sp, sp, #0x70
   3f9f8:	ret
   3f9fc:	bl	35750 <abort@plt>
   3fa00:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   3fa04:	adrp	x1, 56000 <xexit@@Base+0x284c>
   3fa08:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   3fa0c:	add	x0, x0, #0x1bb
   3fa10:	add	x1, x1, #0x836
   3fa14:	add	x3, x3, #0x1d3
   3fa18:	mov	w2, #0x4c9                 	// #1225
   3fa1c:	bl	35b90 <__assert_fail@plt>
   3fa20:	ldr	x8, [x0]
   3fa24:	ldr	x9, [x1]
   3fa28:	cmp	x8, x9
   3fa2c:	cset	w8, hi  // hi = pmore
   3fa30:	csinv	w0, w8, wzr, cs  // cs = hs, nlast
   3fa34:	ret

000000000003fa38 <aarch64_shrink_expanded_imm8@@Base>:
   3fa38:	mov	x8, x0
   3fa3c:	mov	x9, xzr
   3fa40:	mov	x10, xzr
   3fa44:	mov	w0, wzr
   3fa48:	mov	w11, #0x1                   	// #1
   3fa4c:	lsr	x12, x8, x9
   3fa50:	ands	w12, w12, #0xff
   3fa54:	b.eq	3fa68 <aarch64_shrink_expanded_imm8@@Base+0x30>  // b.none
   3fa58:	cmp	w12, #0xff
   3fa5c:	b.ne	3fa7c <aarch64_shrink_expanded_imm8@@Base+0x44>  // b.any
   3fa60:	lsl	w12, w11, w10
   3fa64:	orr	w0, w0, w12
   3fa68:	add	x10, x10, #0x1
   3fa6c:	cmp	x10, #0x8
   3fa70:	add	x9, x9, #0x8
   3fa74:	b.ne	3fa4c <aarch64_shrink_expanded_imm8@@Base+0x14>  // b.any
   3fa78:	ret
   3fa7c:	mov	w0, #0xffffffff            	// #-1
   3fa80:	ret

000000000003fa84 <aarch64_match_operands_constraint@@Base>:
   3fa84:	stp	x29, x30, [sp, #-64]!
   3fa88:	stp	x22, x21, [sp, #32]
   3fa8c:	stp	x20, x19, [sp, #48]
   3fa90:	ldr	x9, [x0, #8]
   3fa94:	mov	x20, x0
   3fa98:	mov	x19, x1
   3fa9c:	str	x23, [sp, #16]
   3faa0:	ldrb	w8, [x9, #132]
   3faa4:	mov	x29, sp
   3faa8:	cbz	w8, 3fac4 <aarch64_match_operands_constraint@@Base+0x40>
   3faac:	mov	w10, #0x38                  	// #56
   3fab0:	umaddl	x10, w8, w10, x20
   3fab4:	ldr	w11, [x20, #40]
   3fab8:	ldr	w10, [x10, #40]
   3fabc:	cmp	w11, w10
   3fac0:	b.ne	3fbc4 <aarch64_match_operands_constraint@@Base+0x140>  // b.any
   3fac4:	add	x1, x9, #0x38
   3fac8:	add	x3, x29, #0x18
   3facc:	mov	w2, #0xffffffff            	// #-1
   3fad0:	mov	x0, x20
   3fad4:	bl	35450 <aarch64_find_best_match@plt>
   3fad8:	cbz	w0, 3fba8 <aarch64_match_operands_constraint@@Base+0x124>
   3fadc:	ldr	x0, [x20, #8]
   3fae0:	ldrb	w8, [x0, #123]
   3fae4:	tbz	w8, #4, 3fb20 <aarch64_match_operands_constraint@@Base+0x9c>
   3fae8:	bl	35260 <aarch64_num_of_operands@plt>
   3faec:	cmp	w0, #0x1
   3faf0:	b.lt	3fb20 <aarch64_match_operands_constraint@@Base+0x9c>  // b.tstop
   3faf4:	mov	w8, w0
   3faf8:	add	x9, x20, #0x1c
   3fafc:	add	x10, x29, #0x18
   3fb00:	ldrb	w11, [x9]
   3fb04:	ldrb	w12, [x10]
   3fb08:	cmp	w11, w12
   3fb0c:	b.ne	3fba8 <aarch64_match_operands_constraint@@Base+0x124>  // b.any
   3fb10:	subs	x8, x8, #0x1
   3fb14:	add	x10, x10, #0x1
   3fb18:	add	x9, x9, #0x38
   3fb1c:	b.ne	3fb00 <aarch64_match_operands_constraint@@Base+0x7c>  // b.any
   3fb20:	ldr	x3, [x20, #8]
   3fb24:	mov	x8, xzr
   3fb28:	add	x9, x20, #0x1c
   3fb2c:	add	x10, x29, #0x18
   3fb30:	add	x11, x3, x8, lsl #2
   3fb34:	ldr	w11, [x11, #32]
   3fb38:	cbz	w11, 3fb50 <aarch64_match_operands_constraint@@Base+0xcc>
   3fb3c:	ldrb	w11, [x10, x8]
   3fb40:	add	x8, x8, #0x1
   3fb44:	cmp	x8, #0x6
   3fb48:	strb	w11, [x9], #56
   3fb4c:	b.ne	3fb30 <aarch64_match_operands_constraint@@Base+0xac>  // b.any
   3fb50:	ldr	w2, [x3, #32]
   3fb54:	cbz	w2, 3fba0 <aarch64_match_operands_constraint@@Base+0x11c>
   3fb58:	mov	x22, xzr
   3fb5c:	add	x21, x20, #0x18
   3fb60:	add	x23, x20, #0x48
   3fb64:	ldrb	w8, [x23]
   3fb68:	tbnz	w8, #0, 3fb80 <aarch64_match_operands_constraint@@Base+0xfc>
   3fb6c:	mov	x0, x21
   3fb70:	mov	w1, w22
   3fb74:	mov	x4, x19
   3fb78:	bl	3fbf4 <aarch64_match_operands_constraint@@Base+0x170>
   3fb7c:	cbz	w0, 3fbe0 <aarch64_match_operands_constraint@@Base+0x15c>
   3fb80:	cmp	x22, #0x5
   3fb84:	b.eq	3fba0 <aarch64_match_operands_constraint@@Base+0x11c>  // b.none
   3fb88:	ldr	x3, [x20, #8]
   3fb8c:	add	x23, x23, #0x38
   3fb90:	add	x8, x3, x22, lsl #2
   3fb94:	ldr	w2, [x8, #36]
   3fb98:	add	x22, x22, #0x1
   3fb9c:	cbnz	w2, 3fb64 <aarch64_match_operands_constraint@@Base+0xe0>
   3fba0:	mov	w0, #0x1                   	// #1
   3fba4:	b	3fbe0 <aarch64_match_operands_constraint@@Base+0x15c>
   3fba8:	cbz	x19, 3fbdc <aarch64_match_operands_constraint@@Base+0x158>
   3fbac:	adrp	x8, 56000 <xexit@@Base+0x284c>
   3fbb0:	ldr	d0, [x8, #1736]
   3fbb4:	mov	w0, wzr
   3fbb8:	str	xzr, [x19, #8]
   3fbbc:	str	d0, [x19]
   3fbc0:	b	3fbe0 <aarch64_match_operands_constraint@@Base+0x15c>
   3fbc4:	cbz	x19, 3fbdc <aarch64_match_operands_constraint@@Base+0x158>
   3fbc8:	mov	w9, #0x5                   	// #5
   3fbcc:	mov	w0, wzr
   3fbd0:	stp	w9, w8, [x19]
   3fbd4:	str	xzr, [x19, #8]
   3fbd8:	b	3fbe0 <aarch64_match_operands_constraint@@Base+0x15c>
   3fbdc:	mov	w0, wzr
   3fbe0:	ldp	x20, x19, [sp, #48]
   3fbe4:	ldp	x22, x21, [sp, #32]
   3fbe8:	ldr	x23, [sp, #16]
   3fbec:	ldp	x29, x30, [sp], #64
   3fbf0:	ret
   3fbf4:	sub	sp, sp, #0x70
   3fbf8:	mov	w8, #0x38                  	// #56
   3fbfc:	stp	x29, x30, [sp, #16]
   3fc00:	stp	x28, x27, [sp, #32]
   3fc04:	stp	x26, x25, [sp, #48]
   3fc08:	stp	x24, x23, [sp, #64]
   3fc0c:	stp	x22, x21, [sp, #80]
   3fc10:	stp	x20, x19, [sp, #96]
   3fc14:	add	x9, x3, w1, sxtw #2
   3fc18:	smaddl	x8, w1, w8, x0
   3fc1c:	ldr	w10, [x9, #32]
   3fc20:	ldr	w9, [x8]
   3fc24:	add	x29, sp, #0x10
   3fc28:	cmp	w10, w9
   3fc2c:	b.ne	41ba0 <aarch64_match_operands_constraint@@Base+0x211c>  // b.any
   3fc30:	mov	w25, w2
   3fc34:	cmp	w9, w2
   3fc38:	b.ne	41ba0 <aarch64_match_operands_constraint@@Base+0x211c>  // b.any
   3fc3c:	adrp	x17, 96000 <aarch64_operands@@Base+0x16c38>
   3fc40:	ldr	x17, [x17, #4032]
   3fc44:	mov	w9, #0x30                  	// #48
   3fc48:	umull	x9, w25, w9
   3fc4c:	mov	w21, #0x1                   	// #1
   3fc50:	ldr	w9, [x17, x9]
   3fc54:	sub	w9, w9, #0x1
   3fc58:	cmp	w9, #0xc
   3fc5c:	b.hi	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.pmore
   3fc60:	ldrb	w23, [x8, #4]
   3fc64:	adrp	x8, 55000 <xexit@@Base+0x184c>
   3fc68:	add	x8, x8, #0xe52
   3fc6c:	mov	w20, w1
   3fc70:	adr	x10, 3fc90 <aarch64_match_operands_constraint@@Base+0x20c>
   3fc74:	ldrh	w11, [x8, x9, lsl #1]
   3fc78:	add	x10, x10, x11, lsl #2
   3fc7c:	mov	x24, x3
   3fc80:	mov	x22, x0
   3fc84:	sxtw	x26, w20
   3fc88:	mov	w28, w25
   3fc8c:	br	x10
   3fc90:	cmp	w25, #0x9
   3fc94:	b.eq	40450 <aarch64_match_operands_constraint@@Base+0x9cc>  // b.none
   3fc98:	cmp	w25, #0xd
   3fc9c:	b.ne	406b4 <aarch64_match_operands_constraint@@Base+0xc30>  // b.any
   3fca0:	orr	w8, w20, #0x2
   3fca4:	cmp	w8, #0x3
   3fca8:	b.ne	41ca0 <aarch64_match_operands_constraint@@Base+0x221c>  // b.any
   3fcac:	sub	x19, x26, #0x1
   3fcb0:	mov	w8, #0x38                  	// #56
   3fcb4:	madd	x8, x19, x8, x22
   3fcb8:	ldr	w8, [x8, #16]
   3fcbc:	tbnz	w8, #0, 405d4 <aarch64_match_operands_constraint@@Base+0xb50>
   3fcc0:	mov	w9, #0x38                  	// #56
   3fcc4:	madd	x9, x26, x9, x22
   3fcc8:	ldr	w9, [x9, #16]
   3fccc:	add	w8, w8, #0x1
   3fcd0:	cmp	w9, w8
   3fcd4:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   3fcd8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3fcdc:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   3fce0:	add	x0, x0, #0x7f0
   3fce4:	add	x1, x1, #0x2ee
   3fce8:	b	40344 <aarch64_match_operands_constraint@@Base+0x8c0>
   3fcec:	ldr	w8, [x24, #20]
   3fcf0:	mov	x27, x4
   3fcf4:	cmp	w8, #0x50
   3fcf8:	b.ne	40214 <aarch64_match_operands_constraint@@Base+0x790>  // b.any
   3fcfc:	ldrb	w0, [x22, #4]
   3fd00:	bl	359c0 <aarch64_get_qualifier_nelem@plt>
   3fd04:	ldrb	w8, [x22, #4]
   3fd08:	and	w19, w0, #0xff
   3fd0c:	mov	w0, w8
   3fd10:	bl	35760 <aarch64_get_qualifier_esize@plt>
   3fd14:	and	w8, w0, #0xff
   3fd18:	mul	w8, w8, w19
   3fd1c:	lsr	w19, w8, #1
   3fd20:	b	40218 <aarch64_match_operands_constraint@@Base+0x794>
   3fd24:	mov	w8, #0x38                  	// #56
   3fd28:	madd	x8, x26, x8, x22
   3fd2c:	ldr	w8, [x8, #16]
   3fd30:	cmp	w8, #0x8
   3fd34:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   3fd38:	mov	w8, #0x30                  	// #48
   3fd3c:	madd	x8, x28, x8, x17
   3fd40:	ldr	w9, [x8, #20]
   3fd44:	cbz	w9, 41bc0 <aarch64_match_operands_constraint@@Base+0x213c>
   3fd48:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   3fd4c:	ldr	x11, [x11, #3944]
   3fd50:	mov	w10, #0x30                  	// #48
   3fd54:	madd	x10, x28, x10, x17
   3fd58:	mov	w8, wzr
   3fd5c:	add	x10, x10, #0x18
   3fd60:	add	x9, x11, w9, uxtw #3
   3fd64:	ldr	w12, [x9, #4]
   3fd68:	ldr	w9, [x10], #4
   3fd6c:	add	w8, w12, w8
   3fd70:	cbnz	w9, 3fd60 <aarch64_match_operands_constraint@@Base+0x2dc>
   3fd74:	sub	w9, w8, #0x1
   3fd78:	cmp	w9, #0x1f
   3fd7c:	b.cs	41bc0 <aarch64_match_operands_constraint@@Base+0x213c>  // b.hs, b.nlast
   3fd80:	cmp	w8, #0x3
   3fd84:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   3fd88:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3fd8c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   3fd90:	add	x0, x0, #0x7f0
   3fd94:	add	x1, x1, #0x3f1
   3fd98:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   3fd9c:	sub	w8, w20, #0x1
   3fda0:	cmp	w8, #0x2
   3fda4:	b.cs	41be0 <aarch64_match_operands_constraint@@Base+0x215c>  // b.hs, b.nlast
   3fda8:	cmp	w25, #0xf
   3fdac:	b.eq	40498 <aarch64_match_operands_constraint@@Base+0xa14>  // b.none
   3fdb0:	cmp	w25, #0xe
   3fdb4:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   3fdb8:	mov	w8, #0x38                  	// #56
   3fdbc:	madd	x8, x26, x8, x22
   3fdc0:	ldr	w8, [x8, #32]
   3fdc4:	sub	w9, w8, #0x5
   3fdc8:	cmp	w9, #0x9
   3fdcc:	b.cs	4060c <aarch64_match_operands_constraint@@Base+0xb88>  // b.hs, b.nlast
   3fdd0:	ldr	w9, [x22]
   3fdd4:	mov	w10, #0x30                  	// #48
   3fdd8:	mul	x10, x9, x10
   3fddc:	ldr	w10, [x17, x10]
   3fde0:	cmp	w10, #0x1
   3fde4:	b.ne	3fe04 <aarch64_match_operands_constraint@@Base+0x380>  // b.any
   3fde8:	mov	w10, #0x30                  	// #48
   3fdec:	madd	x9, x9, x10, x17
   3fdf0:	ldrb	w9, [x9, #16]
   3fdf4:	tbz	w9, #4, 3fe04 <aarch64_match_operands_constraint@@Base+0x380>
   3fdf8:	ldr	w9, [x22, #16]
   3fdfc:	cmp	w9, #0x1f
   3fe00:	b.eq	408a4 <aarch64_match_operands_constraint@@Base+0xe20>  // b.none
   3fe04:	cmp	w20, #0x2
   3fe08:	b.ne	3fe40 <aarch64_match_operands_constraint@@Base+0x3bc>  // b.any
   3fe0c:	ldr	w9, [x22, #56]
   3fe10:	mov	w10, #0x30                  	// #48
   3fe14:	mul	x10, x9, x10
   3fe18:	ldr	w10, [x17, x10]
   3fe1c:	cmp	w10, #0x1
   3fe20:	b.ne	3fe40 <aarch64_match_operands_constraint@@Base+0x3bc>  // b.any
   3fe24:	mov	w10, #0x30                  	// #48
   3fe28:	madd	x9, x9, x10, x17
   3fe2c:	ldrb	w9, [x9, #16]
   3fe30:	tbz	w9, #4, 3fe40 <aarch64_match_operands_constraint@@Base+0x3bc>
   3fe34:	ldr	w9, [x22, #72]
   3fe38:	cmp	w9, #0x1f
   3fe3c:	b.eq	408a4 <aarch64_match_operands_constraint@@Base+0xe20>  // b.none
   3fe40:	mov	w9, #0x38                  	// #56
   3fe44:	madd	x9, x26, x9, x22
   3fe48:	ldrb	w9, [x9, #36]
   3fe4c:	tbnz	w9, #0, 40888 <aarch64_match_operands_constraint@@Base+0xe04>
   3fe50:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3fe54:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   3fe58:	add	x0, x0, #0x7f0
   3fe5c:	add	x1, x1, #0x969
   3fe60:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   3fe64:	ldr	w8, [x24, #16]
   3fe68:	cmp	w8, #0x3f
   3fe6c:	b.hi	407b8 <aarch64_match_operands_constraint@@Base+0xd34>  // b.pmore
   3fe70:	mov	w9, #0x1                   	// #1
   3fe74:	lsl	x9, x9, x8
   3fe78:	mov	x10, #0x6d00000000000000    	// #7854277750134145024
   3fe7c:	tst	x9, x10
   3fe80:	b.ne	40324 <aarch64_match_operands_constraint@@Base+0x8a0>  // b.any
   3fe84:	mov	w9, #0x1                   	// #1
   3fe88:	mov	x10, #0x280000              	// #2621440
   3fe8c:	lsl	x9, x9, x8
   3fe90:	movk	x10, #0x8040, lsl #48
   3fe94:	tst	x9, x10
   3fe98:	b.eq	4071c <aarch64_match_operands_constraint@@Base+0xc98>  // b.none
   3fe9c:	mov	w8, #0x38                  	// #56
   3fea0:	madd	x8, x26, x8, x22
   3fea4:	ldrb	w8, [x8, #28]
   3fea8:	tbnz	w8, #1, 407c8 <aarch64_match_operands_constraint@@Base+0xd44>
   3feac:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3feb0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   3feb4:	add	x0, x0, #0x7f0
   3feb8:	add	x1, x1, #0x41d
   3febc:	b	40344 <aarch64_match_operands_constraint@@Base+0x8c0>
   3fec0:	str	x20, [sp, #8]
   3fec4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   3fec8:	ldr	x9, [x9, #3776]
   3fecc:	mov	w8, #0x38                  	// #56
   3fed0:	madd	x13, x26, x8, x22
   3fed4:	ldr	x19, [x13, #16]!
   3fed8:	add	x8, x9, x23, lsl #5
   3fedc:	ldr	w8, [x8, #24]
   3fee0:	cmp	w8, #0x2
   3fee4:	b.ne	3ff30 <aarch64_match_operands_constraint@@Base+0x4ac>  // b.any
   3fee8:	mov	w0, w23
   3feec:	mov	x20, x4
   3fef0:	mov	x27, x26
   3fef4:	mov	x26, x13
   3fef8:	bl	44454 <aarch64_sve_dupm_mov_immediate_p@@Base+0x198>
   3fefc:	mov	w21, w0
   3ff00:	mov	w0, w23
   3ff04:	bl	444a8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x1ec>
   3ff08:	adrp	x17, 96000 <aarch64_operands@@Base+0x16c38>
   3ff0c:	ldr	x17, [x17, #4032]
   3ff10:	cmp	x19, w21, sxtw
   3ff14:	b.lt	404c4 <aarch64_match_operands_constraint@@Base+0xa40>  // b.tstop
   3ff18:	sxtw	x8, w0
   3ff1c:	mov	x13, x26
   3ff20:	mov	x26, x27
   3ff24:	mov	x4, x20
   3ff28:	cmp	x19, x8
   3ff2c:	b.gt	404c4 <aarch64_match_operands_constraint@@Base+0xa40>
   3ff30:	sub	w8, w25, #0x94
   3ff34:	cmp	w8, #0x3a
   3ff38:	mov	w21, #0x1                   	// #1
   3ff3c:	b.hi	403a4 <aarch64_match_operands_constraint@@Base+0x920>  // b.pmore
   3ff40:	adrp	x9, 55000 <xexit@@Base+0x184c>
   3ff44:	add	x9, x9, #0xeae
   3ff48:	adr	x10, 3ff60 <aarch64_match_operands_constraint@@Base+0x4dc>
   3ff4c:	ldrh	w11, [x9, x8, lsl #1]
   3ff50:	add	x10, x10, x11, lsl #2
   3ff54:	ldr	x20, [sp, #8]
   3ff58:	mov	x23, xzr
   3ff5c:	br	x10
   3ff60:	mov	w8, #0x30                  	// #48
   3ff64:	madd	x8, x28, x8, x17
   3ff68:	ldr	w9, [x8, #20]
   3ff6c:	cbz	w9, 41bc0 <aarch64_match_operands_constraint@@Base+0x213c>
   3ff70:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   3ff74:	ldr	x11, [x11, #3944]
   3ff78:	mov	w10, #0x30                  	// #48
   3ff7c:	madd	x10, x28, x10, x17
   3ff80:	mov	w8, wzr
   3ff84:	add	x10, x10, #0x18
   3ff88:	add	x9, x11, w9, uxtw #3
   3ff8c:	ldr	w12, [x9, #4]
   3ff90:	ldr	w9, [x10], #4
   3ff94:	add	w8, w12, w8
   3ff98:	cbnz	w9, 3ff88 <aarch64_match_operands_constraint@@Base+0x504>
   3ff9c:	sub	w8, w8, #0x1
   3ffa0:	cmp	w8, #0x1f
   3ffa4:	b.cs	41bc0 <aarch64_match_operands_constraint@@Base+0x213c>  // b.hs, b.nlast
   3ffa8:	ldr	x9, [x13]
   3ffac:	mov	w21, #0x1                   	// #1
   3ffb0:	lsl	x10, x21, x8
   3ffb4:	cmp	x10, x9
   3ffb8:	b.le	3ffc8 <aarch64_match_operands_constraint@@Base+0x544>
   3ffbc:	neg	x10, x10
   3ffc0:	cmp	x9, x10
   3ffc4:	b.ge	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.tcont
   3ffc8:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   3ffcc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   3ffd0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   3ffd4:	lsl	w8, w21, w8
   3ffd8:	add	x0, x0, #0x7f0
   3ffdc:	add	x1, x1, #0xad8
   3ffe0:	mov	w2, #0x5                   	// #5
   3ffe4:	sub	w19, w8, #0x1
   3ffe8:	neg	w22, w8
   3ffec:	mov	x23, x20
   3fff0:	mov	x20, x4
   3fff4:	bl	35ab0 <dcgettext@plt>
   3fff8:	mov	w8, #0x6                   	// #6
   3fffc:	mov	w21, wzr
   40000:	str	x0, [x20, #8]
   40004:	stp	w8, w23, [x20]
   40008:	stp	w22, w19, [x20, #16]
   4000c:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40010:	cmp	w25, #0x26
   40014:	b.ne	402f4 <aarch64_match_operands_constraint@@Base+0x870>  // b.any
   40018:	mov	w0, w23
   4001c:	mov	x21, x4
   40020:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40024:	mov	w8, #0x38                  	// #56
   40028:	madd	x8, x26, x8, x22
   4002c:	ldr	x8, [x8, #24]
   40030:	and	w9, w0, #0xff
   40034:	mov	w10, #0x10                  	// #16
   40038:	udiv	w9, w10, w9
   4003c:	sub	w19, w9, #0x1
   40040:	tbnz	x8, #63, 40518 <aarch64_match_operands_constraint@@Base+0xa94>
   40044:	sxtw	x9, w19
   40048:	cmp	x8, x9
   4004c:	b.gt	40518 <aarch64_match_operands_constraint@@Base+0xa94>
   40050:	ldrb	w8, [x24, #123]
   40054:	mov	x4, x21
   40058:	and	w8, w8, #0x7
   4005c:	b	40364 <aarch64_match_operands_constraint@@Base+0x8e0>
   40060:	sub	w8, w25, #0xc4
   40064:	cmp	w8, #0x9
   40068:	mov	w21, #0x1                   	// #1
   4006c:	b.hi	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.pmore
   40070:	adrp	x9, 55000 <xexit@@Base+0x184c>
   40074:	add	x9, x9, #0xfae
   40078:	adr	x10, 40088 <aarch64_match_operands_constraint@@Base+0x604>
   4007c:	ldrh	w11, [x9, x8, lsl #1]
   40080:	add	x10, x10, x11, lsl #2
   40084:	br	x10
   40088:	mov	w8, #0x30                  	// #48
   4008c:	madd	x8, x28, x8, x17
   40090:	ldr	w9, [x8, #20]
   40094:	cbz	w9, 41bc0 <aarch64_match_operands_constraint@@Base+0x213c>
   40098:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   4009c:	ldr	x11, [x11, #3944]
   400a0:	mov	w10, #0x30                  	// #48
   400a4:	madd	x10, x28, x10, x17
   400a8:	mov	w8, wzr
   400ac:	add	x10, x10, #0x18
   400b0:	add	x9, x11, w9, uxtw #3
   400b4:	ldr	w12, [x9, #4]
   400b8:	ldr	w9, [x10], #4
   400bc:	add	w8, w12, w8
   400c0:	cbnz	w9, 400b0 <aarch64_match_operands_constraint@@Base+0x62c>
   400c4:	sub	w9, w8, #0x1
   400c8:	cmp	w9, #0x1f
   400cc:	b.cs	41bc0 <aarch64_match_operands_constraint@@Base+0x213c>  // b.hs, b.nlast
   400d0:	mov	w9, #0x30                  	// #48
   400d4:	mov	w10, #0x38                  	// #56
   400d8:	madd	x9, x28, x9, x17
   400dc:	ldr	w9, [x9, #16]
   400e0:	madd	x10, x26, x10, x22
   400e4:	ldr	w10, [x10, #16]
   400e8:	ubfx	w9, w9, #5, #3
   400ec:	lsr	w10, w10, w9
   400f0:	cbz	w10, 40570 <aarch64_match_operands_constraint@@Base+0xaec>
   400f4:	sub	w8, w9, #0x3
   400f8:	cmp	w8, #0x2
   400fc:	b.cs	41c80 <aarch64_match_operands_constraint@@Base+0x21fc>  // b.hs, b.nlast
   40100:	adrp	x8, 5a000 <fields@@Base+0x3e84>
   40104:	adrp	x10, 5a000 <fields@@Base+0x3e84>
   40108:	add	x8, x8, #0x3cc
   4010c:	add	x10, x10, #0x3bc
   40110:	cmp	w9, #0x4
   40114:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40118:	csel	x1, x10, x8, eq  // eq = none
   4011c:	add	x0, x0, #0x7f0
   40120:	mov	w2, #0x5                   	// #5
   40124:	mov	x19, x4
   40128:	bl	35ab0 <dcgettext@plt>
   4012c:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40130:	mov	w8, #0x9                   	// #9
   40134:	mov	w21, wzr
   40138:	stp	w8, w20, [x19]
   4013c:	str	x0, [x19, #8]
   40140:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40144:	cmp	w25, #0x4d
   40148:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   4014c:	mov	w21, #0x1                   	// #1
   40150:	cbz	x4, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40154:	mov	w8, #0x38                  	// #56
   40158:	madd	x8, x26, x8, x22
   4015c:	ldr	x8, [x8, #16]
   40160:	ldr	w8, [x8, #32]
   40164:	and	w8, w8, #0xe
   40168:	cmp	w8, #0xe
   4016c:	b.ne	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.any
   40170:	mov	w8, #0x2                   	// #2
   40174:	str	xzr, [x4, #8]
   40178:	stp	w8, w20, [x4]
   4017c:	b	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40180:	cmp	w25, #0x60
   40184:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   40188:	cbnz	w20, 41c00 <aarch64_match_operands_constraint@@Base+0x217c>
   4018c:	ldr	w8, [x22, #56]
   40190:	cmp	w8, #0x3b
   40194:	b.ne	41c00 <aarch64_match_operands_constraint@@Base+0x217c>  // b.any
   40198:	mov	w8, #0x38                  	// #56
   4019c:	madd	x8, x26, x8, x22
   401a0:	ldr	w8, [x8, #16]
   401a4:	mov	w21, #0x1                   	// #1
   401a8:	cmp	w8, #0x1a
   401ac:	b.hi	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.pmore
   401b0:	mov	w10, #0x18                  	// #24
   401b4:	lsl	w9, w21, w8
   401b8:	movk	w10, #0x600, lsl #16
   401bc:	tst	w9, w10
   401c0:	b.eq	40740 <aarch64_match_operands_constraint@@Base+0xcbc>  // b.none
   401c4:	ldr	x8, [x22, #72]
   401c8:	cmp	x8, #0x2
   401cc:	b.lt	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.tstop
   401d0:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   401d4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   401d8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   401dc:	add	x0, x0, #0x7f0
   401e0:	add	x1, x1, #0xad8
   401e4:	mov	w2, #0x5                   	// #5
   401e8:	mov	x19, x4
   401ec:	bl	35ab0 <dcgettext@plt>
   401f0:	adrp	x8, 56000 <xexit@@Base+0x284c>
   401f4:	adrp	x9, 54000 <xexit@@Base+0x84c>
   401f8:	ldr	d0, [x8, #1760]
   401fc:	ldr	d1, [x9, #2832]
   40200:	mov	w21, wzr
   40204:	str	x0, [x19, #8]
   40208:	str	d0, [x19]
   4020c:	str	d1, [x19, #16]
   40210:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40214:	mov	w19, #0x10                  	// #16
   40218:	mov	w0, w23
   4021c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40220:	mov	w21, w0
   40224:	mov	w0, w23
   40228:	bl	359c0 <aarch64_get_qualifier_nelem@plt>
   4022c:	and	w8, w0, #0xff
   40230:	cmp	w8, #0x1
   40234:	b.ne	41c20 <aarch64_match_operands_constraint@@Base+0x219c>  // b.any
   40238:	mov	w8, #0x38                  	// #56
   4023c:	madd	x8, x26, x8, x22
   40240:	ldr	x8, [x8, #24]
   40244:	and	w9, w21, #0xff
   40248:	udiv	w9, w19, w9
   4024c:	sub	w19, w9, #0x1
   40250:	cmp	x8, w19, sxtw
   40254:	b.gt	402c0 <aarch64_match_operands_constraint@@Base+0x83c>
   40258:	tbnz	x8, #63, 402c0 <aarch64_match_operands_constraint@@Base+0x83c>
   4025c:	cmp	w25, #0x22
   40260:	mov	w21, #0x1                   	// #1
   40264:	b.ne	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.any
   40268:	cmp	w23, #0x6
   4026c:	b.ne	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.any
   40270:	mov	w8, #0x38                  	// #56
   40274:	madd	x8, x26, x8, x22
   40278:	ldr	w8, [x8, #16]
   4027c:	cmp	w8, #0x10
   40280:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   40284:	cbz	x27, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40288:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4028c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40290:	add	x0, x0, #0x7f0
   40294:	add	x1, x1, #0xaf3
   40298:	mov	w2, #0x5                   	// #5
   4029c:	bl	35ab0 <dcgettext@plt>
   402a0:	adrp	x9, 56000 <xexit@@Base+0x284c>
   402a4:	ldr	d0, [x9, #1752]
   402a8:	mov	w8, #0x6                   	// #6
   402ac:	mov	w21, wzr
   402b0:	stp	w8, w20, [x27]
   402b4:	str	x0, [x27, #8]
   402b8:	str	d0, [x27, #16]
   402bc:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   402c0:	cbz	x27, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   402c4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   402c8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   402cc:	add	x0, x0, #0x7f0
   402d0:	add	x1, x1, #0xa2b
   402d4:	mov	w2, #0x5                   	// #5
   402d8:	bl	35ab0 <dcgettext@plt>
   402dc:	mov	w8, #0x6                   	// #6
   402e0:	mov	w21, wzr
   402e4:	str	x0, [x27, #8]
   402e8:	stp	w8, w20, [x27]
   402ec:	stp	wzr, w19, [x27, #16]
   402f0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   402f4:	ldrb	w8, [x24, #123]
   402f8:	cmp	w25, #0x25
   402fc:	and	w8, w8, #0x7
   40300:	b.eq	40364 <aarch64_match_operands_constraint@@Base+0x8e0>  // b.none
   40304:	cmp	w25, #0x24
   40308:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   4030c:	sub	w9, w8, #0x1
   40310:	cmp	w9, #0x4
   40314:	b.cs	41d00 <aarch64_match_operands_constraint@@Base+0x227c>  // b.hs, b.nlast
   40318:	cmp	w8, #0x1
   4031c:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   40320:	b	40370 <aarch64_match_operands_constraint@@Base+0x8ec>
   40324:	mov	w8, #0x38                  	// #56
   40328:	madd	x8, x26, x8, x22
   4032c:	ldrb	w8, [x8, #28]
   40330:	tbz	w8, #1, 407c8 <aarch64_match_operands_constraint@@Base+0xd44>
   40334:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40338:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4033c:	add	x0, x0, #0x7f0
   40340:	add	x1, x1, #0x400
   40344:	mov	w2, #0x5                   	// #5
   40348:	mov	x19, x4
   4034c:	bl	35ab0 <dcgettext@plt>
   40350:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40354:	mov	x9, x19
   40358:	mov	w21, wzr
   4035c:	mov	w8, #0x2                   	// #2
   40360:	b	40710 <aarch64_match_operands_constraint@@Base+0xc8c>
   40364:	sub	w9, w8, #0x1
   40368:	cmp	w9, #0x4
   4036c:	b.cs	41c60 <aarch64_match_operands_constraint@@Base+0x21dc>  // b.hs, b.nlast
   40370:	mov	w9, #0x38                  	// #56
   40374:	madd	x9, x26, x9, x22
   40378:	ldrh	w9, [x9, #16]
   4037c:	ubfx	w9, w9, #5, #3
   40380:	cmp	w8, w9
   40384:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   40388:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   4038c:	mov	w9, #0x8                   	// #8
   40390:	mov	w21, wzr
   40394:	str	xzr, [x4, #8]
   40398:	stp	w9, w20, [x4]
   4039c:	str	w8, [x4, #16]
   403a0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   403a4:	ldr	x20, [sp, #8]
   403a8:	sub	w8, w25, #0x2b
   403ac:	cmp	w8, #0x20
   403b0:	b.hi	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.pmore
   403b4:	adrp	x9, 55000 <xexit@@Base+0x184c>
   403b8:	add	x9, x9, #0xe6c
   403bc:	adr	x10, 3ff60 <aarch64_match_operands_constraint@@Base+0x4dc>
   403c0:	ldrh	w11, [x9, x8, lsl #1]
   403c4:	add	x10, x10, x11, lsl #2
   403c8:	br	x10
   403cc:	mov	w8, #0x30                  	// #48
   403d0:	madd	x8, x28, x8, x17
   403d4:	ldr	w9, [x8, #20]
   403d8:	cbz	w9, 41bc0 <aarch64_match_operands_constraint@@Base+0x213c>
   403dc:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   403e0:	ldr	x11, [x11, #3944]
   403e4:	mov	w10, #0x30                  	// #48
   403e8:	madd	x10, x28, x10, x17
   403ec:	mov	w8, wzr
   403f0:	add	x10, x10, #0x18
   403f4:	add	x9, x11, w9, uxtw #3
   403f8:	ldr	w12, [x9, #4]
   403fc:	ldr	w9, [x10], #4
   40400:	add	w8, w12, w8
   40404:	cbnz	w9, 403f4 <aarch64_match_operands_constraint@@Base+0x970>
   40408:	sub	w9, w8, #0x1
   4040c:	cmp	w9, #0x1f
   40410:	b.cs	41bc0 <aarch64_match_operands_constraint@@Base+0x213c>  // b.hs, b.nlast
   40414:	ldr	x9, [x13]
   40418:	tbnz	x9, #63, 4042c <aarch64_match_operands_constraint@@Base+0x9a8>
   4041c:	mov	w21, #0x1                   	// #1
   40420:	lsl	x10, x21, x8
   40424:	cmp	x10, x9
   40428:	b.gt	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4042c:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40430:	mov	w9, #0xffffffff            	// #-1
   40434:	lsl	w8, w9, w8
   40438:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4043c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40440:	mvn	w19, w8
   40444:	add	x0, x0, #0x7f0
   40448:	add	x1, x1, #0xad8
   4044c:	b	405ac <aarch64_match_operands_constraint@@Base+0xb28>
   40450:	cmp	w20, #0x1
   40454:	b.ne	41c40 <aarch64_match_operands_constraint@@Base+0x21bc>  // b.any
   40458:	ldr	w8, [x22]
   4045c:	mov	w9, #0x30                  	// #48
   40460:	mul	x8, x8, x9
   40464:	ldr	w8, [x17, x8]
   40468:	cmp	w8, #0xc
   4046c:	b.ne	41c40 <aarch64_match_operands_constraint@@Base+0x21bc>  // b.any
   40470:	ldr	x8, [x22, #16]
   40474:	ldrb	w9, [x22, #104]
   40478:	ldr	w8, [x8, #12]
   4047c:	tbnz	w9, #1, 40674 <aarch64_match_operands_constraint@@Base+0xbf0>
   40480:	tbz	w8, #2, 406b4 <aarch64_match_operands_constraint@@Base+0xc30>
   40484:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40488:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4048c:	add	x0, x0, #0x7f0
   40490:	add	x1, x1, #0x373
   40494:	b	40688 <aarch64_match_operands_constraint@@Base+0xc04>
   40498:	mov	w8, #0x38                  	// #56
   4049c:	madd	x8, x26, x8, x22
   404a0:	ldr	w8, [x8, #32]
   404a4:	sub	w9, w8, #0x2
   404a8:	cmp	w9, #0x4
   404ac:	b.cc	40620 <aarch64_match_operands_constraint@@Base+0xb9c>  // b.lo, b.ul, b.last
   404b0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   404b4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   404b8:	add	x0, x0, #0x7f0
   404bc:	add	x1, x1, #0x9f8
   404c0:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   404c4:	mov	w0, w23
   404c8:	bl	44454 <aarch64_sve_dupm_mov_immediate_p@@Base+0x198>
   404cc:	mov	w22, w0
   404d0:	mov	w0, w23
   404d4:	bl	444a8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x1ec>
   404d8:	cbz	x20, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   404dc:	mov	w23, w0
   404e0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   404e4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   404e8:	add	x0, x0, #0x7f0
   404ec:	add	x1, x1, #0xad8
   404f0:	mov	w2, #0x5                   	// #5
   404f4:	bl	35ab0 <dcgettext@plt>
   404f8:	mov	w8, #0x6                   	// #6
   404fc:	str	w8, [x20]
   40500:	ldr	x8, [sp, #8]
   40504:	mov	w21, wzr
   40508:	str	x0, [x20, #8]
   4050c:	stp	w22, w23, [x20, #16]
   40510:	str	w8, [x20, #4]
   40514:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40518:	cbz	x21, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4051c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40520:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40524:	add	x0, x0, #0x7f0
   40528:	add	x1, x1, #0xa2b
   4052c:	mov	w2, #0x5                   	// #5
   40530:	mov	x22, x20
   40534:	mov	x20, x21
   40538:	b	405b8 <aarch64_match_operands_constraint@@Base+0xb34>
   4053c:	mov	w8, #0x38                  	// #56
   40540:	madd	x8, x26, x8, x22
   40544:	ldrh	w8, [x8, #16]
   40548:	ldrb	w9, [x24, #123]
   4054c:	ubfx	w8, w8, #5, #3
   40550:	and	w9, w9, #0x7
   40554:	cmp	w9, w8
   40558:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   4055c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40560:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40564:	add	x0, x0, #0x7f0
   40568:	add	x1, x1, #0x3db
   4056c:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40570:	sub	w9, w8, w9
   40574:	mov	w8, #0x38                  	// #56
   40578:	madd	x8, x26, x8, x22
   4057c:	ldr	x8, [x8, #24]
   40580:	mov	w10, #0xffffffff            	// #-1
   40584:	lsl	w9, w10, w9
   40588:	mvn	w19, w9
   4058c:	cmp	x8, w19, sxtw
   40590:	b.gt	40598 <aarch64_match_operands_constraint@@Base+0xb14>
   40594:	tbz	x8, #63, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40598:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   4059c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   405a0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   405a4:	add	x0, x0, #0x7f0
   405a8:	add	x1, x1, #0xa2b
   405ac:	mov	w2, #0x5                   	// #5
   405b0:	mov	x22, x20
   405b4:	mov	x20, x4
   405b8:	bl	35ab0 <dcgettext@plt>
   405bc:	mov	w8, #0x6                   	// #6
   405c0:	mov	w21, wzr
   405c4:	str	x0, [x20, #8]
   405c8:	stp	w8, w22, [x20]
   405cc:	stp	wzr, w19, [x20, #16]
   405d0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   405d4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   405d8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   405dc:	add	x0, x0, #0x7f0
   405e0:	add	x1, x1, #0x2cc
   405e4:	mov	w2, #0x5                   	// #5
   405e8:	mov	x20, x4
   405ec:	bl	35ab0 <dcgettext@plt>
   405f0:	cbz	x20, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   405f4:	mov	w8, #0x2                   	// #2
   405f8:	mov	x9, x20
   405fc:	mov	w21, wzr
   40600:	stp	w8, w19, [x20]
   40604:	str	x0, [x20, #8]
   40608:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4060c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40610:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40614:	add	x0, x0, #0x7f0
   40618:	add	x1, x1, #0x950
   4061c:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40620:	mov	x21, x4
   40624:	cmp	w8, #0x2
   40628:	b.ne	40638 <aarch64_match_operands_constraint@@Base+0xbb4>  // b.any
   4062c:	ldr	w8, [x24, #16]
   40630:	cmp	w8, #0x42
   40634:	b.ne	40910 <aarch64_match_operands_constraint@@Base+0xe8c>  // b.any
   40638:	mov	w8, #0x38                  	// #56
   4063c:	madd	x8, x26, x8, x22
   40640:	ldr	x8, [x8, #40]
   40644:	cmp	w23, #0x1
   40648:	mov	w9, #0x3f                  	// #63
   4064c:	mov	w10, #0x1f                  	// #31
   40650:	csel	w19, w10, w9, eq  // eq = none
   40654:	cmp	x8, x19
   40658:	b.ls	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.plast
   4065c:	cbz	x21, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40660:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40664:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40668:	add	x0, x0, #0x7f0
   4066c:	add	x1, x1, #0x4b6
   40670:	b	4052c <aarch64_match_operands_constraint@@Base+0xaa8>
   40674:	tbnz	w8, #2, 406b4 <aarch64_match_operands_constraint@@Base+0xc30>
   40678:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4067c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40680:	add	x0, x0, #0x7f0
   40684:	add	x1, x1, #0x35f
   40688:	mov	w2, #0x5                   	// #5
   4068c:	mov	x19, x4
   40690:	bl	35ab0 <dcgettext@plt>
   40694:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40698:	adrp	x8, 56000 <xexit@@Base+0x284c>
   4069c:	ldr	d0, [x8, #1792]
   406a0:	mov	x9, x19
   406a4:	mov	w21, wzr
   406a8:	str	x0, [x19, #8]
   406ac:	str	d0, [x19]
   406b0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   406b4:	sub	w8, w23, #0x3
   406b8:	cmp	w8, #0x1
   406bc:	b.hi	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.pmore
   406c0:	mov	w8, #0x30                  	// #48
   406c4:	madd	x8, x28, x8, x17
   406c8:	ldrb	w8, [x8, #16]
   406cc:	tbz	w8, #4, 406e4 <aarch64_match_operands_constraint@@Base+0xc60>
   406d0:	mov	w8, #0x38                  	// #56
   406d4:	madd	x8, x26, x8, x22
   406d8:	ldr	w8, [x8, #16]
   406dc:	cmp	w8, #0x1f
   406e0:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   406e4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   406e8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   406ec:	add	x0, x0, #0x7f0
   406f0:	add	x1, x1, #0x384
   406f4:	mov	w2, #0x5                   	// #5
   406f8:	mov	x19, x4
   406fc:	bl	35ab0 <dcgettext@plt>
   40700:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40704:	mov	x9, x19
   40708:	mov	w21, wzr
   4070c:	mov	w8, #0x9                   	// #9
   40710:	stp	w8, w20, [x9]
   40714:	str	x0, [x9, #8]
   40718:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4071c:	cmp	x8, #0x37
   40720:	b.ne	407b8 <aarch64_match_operands_constraint@@Base+0xd34>  // b.any
   40724:	mov	w8, #0x38                  	// #56
   40728:	madd	x8, x26, x8, x22
   4072c:	ldrb	w8, [x8, #28]
   40730:	and	w9, w8, #0x6
   40734:	cmp	w9, #0x2
   40738:	b.eq	40334 <aarch64_match_operands_constraint@@Base+0x8b0>  // b.none
   4073c:	b	407c8 <aarch64_match_operands_constraint@@Base+0xd44>
   40740:	cmp	w8, #0x5
   40744:	b.eq	401c4 <aarch64_match_operands_constraint@@Base+0x740>  // b.none
   40748:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4074c:	mov	w0, w23
   40750:	mov	x24, x20
   40754:	mov	x20, x4
   40758:	bl	35760 <aarch64_get_qualifier_esize@plt>
   4075c:	mov	w8, #0x38                  	// #56
   40760:	madd	x8, x26, x8, x22
   40764:	ldr	x8, [x8, #24]
   40768:	and	w9, w0, #0xff
   4076c:	mov	w10, #0x40                  	// #64
   40770:	udiv	w9, w10, w9
   40774:	sub	w19, w9, #0x1
   40778:	tbnz	x8, #63, 40788 <aarch64_match_operands_constraint@@Base+0xd04>
   4077c:	sxtw	x9, w19
   40780:	cmp	x8, x9
   40784:	b.le	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40788:	cbz	x20, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   4078c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40790:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40794:	add	x0, x0, #0x7f0
   40798:	add	x1, x1, #0xa2b
   4079c:	mov	w2, #0x5                   	// #5
   407a0:	bl	35ab0 <dcgettext@plt>
   407a4:	mov	w21, wzr
   407a8:	mov	w8, #0x6                   	// #6
   407ac:	str	x0, [x20, #8]
   407b0:	stp	w8, w24, [x20]
   407b4:	b	405cc <aarch64_match_operands_constraint@@Base+0xb48>
   407b8:	mov	w8, #0x38                  	// #56
   407bc:	madd	x8, x26, x8, x22
   407c0:	ldrb	w8, [x8, #28]
   407c4:	tbnz	w8, #1, 41d60 <aarch64_match_operands_constraint@@Base+0x22dc>
   407c8:	sub	w11, w25, #0x4f
   407cc:	cmp	w11, #0x44
   407d0:	mov	w21, #0x1                   	// #1
   407d4:	b.hi	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.pmore
   407d8:	adrp	x14, 55000 <xexit@@Base+0x184c>
   407dc:	add	x14, x14, #0xf24
   407e0:	adr	x15, 4080c <aarch64_match_operands_constraint@@Base+0xd88>
   407e4:	ldrh	w16, [x14, x11, lsl #1]
   407e8:	add	x15, x15, x16, lsl #2
   407ec:	mov	w12, wzr
   407f0:	mov	w9, #0x20                  	// #32
   407f4:	mov	w13, #0x3f                  	// #63
   407f8:	mov	w10, #0xfffffff8            	// #-8
   407fc:	mov	x25, x4
   40800:	mov	x14, x4
   40804:	mov	w11, #0x7                   	// #7
   40808:	br	x15
   4080c:	mov	w9, #0x1100                	// #4352
   40810:	mov	w10, #0x38                  	// #56
   40814:	madd	x10, x26, x10, x22
   40818:	ldr	w11, [x10, #24]
   4081c:	cbz	w11, 41cc0 <aarch64_match_operands_constraint@@Base+0x223c>
   40820:	tbz	w8, #2, 41ce0 <aarch64_match_operands_constraint@@Base+0x225c>
   40824:	mov	w8, #0x30                  	// #48
   40828:	madd	x8, x28, x8, x17
   4082c:	ldr	w8, [x8, #16]
   40830:	tbz	w8, #8, 40858 <aarch64_match_operands_constraint@@Base+0xdd4>
   40834:	add	x10, x10, #0x10
   40838:	ldr	w10, [x10, #4]
   4083c:	cmp	w10, #0x1f
   40840:	b.ne	40858 <aarch64_match_operands_constraint@@Base+0xdd4>  // b.any
   40844:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40848:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4084c:	add	x0, x0, #0x7f0
   40850:	add	x1, x1, #0x592
   40854:	b	413b4 <aarch64_match_operands_constraint@@Base+0x1930>
   40858:	mov	w10, #0x38                  	// #56
   4085c:	madd	x10, x26, x10, x22
   40860:	ldr	w10, [x10, #32]
   40864:	lsr	w9, w9, w10
   40868:	tbz	w9, #0, 413a4 <aarch64_match_operands_constraint@@Base+0x1920>
   4086c:	mov	w9, #0x38                  	// #56
   40870:	madd	x9, x26, x9, x22
   40874:	ldr	x9, [x9, #40]
   40878:	ubfx	x8, x8, #5, #3
   4087c:	cmp	x9, x8
   40880:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   40884:	b	413a4 <aarch64_match_operands_constraint@@Base+0x1920>
   40888:	cmp	w8, #0x5
   4088c:	b.ne	408a4 <aarch64_match_operands_constraint@@Base+0xe20>  // b.any
   40890:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40894:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40898:	add	x0, x0, #0x7f0
   4089c:	add	x1, x1, #0x981
   408a0:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   408a4:	cmp	w8, #0x5
   408a8:	b.eq	408bc <aarch64_match_operands_constraint@@Base+0xe38>  // b.none
   408ac:	mov	w9, #0x38                  	// #56
   408b0:	madd	x9, x26, x9, x22
   408b4:	ldrb	w9, [x9, #36]
   408b8:	tbz	w9, #0, 41d80 <aarch64_match_operands_constraint@@Base+0x22fc>
   408bc:	mov	w9, #0x38                  	// #56
   408c0:	madd	x9, x26, x9, x22
   408c4:	ldr	x9, [x9, #40]
   408c8:	cmp	x9, #0x5
   408cc:	b.cc	40a7c <aarch64_match_operands_constraint@@Base+0xff8>  // b.lo, b.ul, b.last
   408d0:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   408d4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   408d8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   408dc:	add	x0, x0, #0x7f0
   408e0:	add	x1, x1, #0x4b6
   408e4:	mov	w2, #0x5                   	// #5
   408e8:	mov	x19, x4
   408ec:	bl	35ab0 <dcgettext@plt>
   408f0:	adrp	x9, 56000 <xexit@@Base+0x284c>
   408f4:	ldr	d0, [x9, #1744]
   408f8:	mov	w21, wzr
   408fc:	mov	w8, #0x6                   	// #6
   40900:	stp	w8, w20, [x19]
   40904:	str	x0, [x19, #8]
   40908:	str	d0, [x19, #16]
   4090c:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40910:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40914:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40918:	add	x0, x0, #0x7f0
   4091c:	add	x1, x1, #0xa10
   40920:	mov	w2, #0x5                   	// #5
   40924:	bl	35ab0 <dcgettext@plt>
   40928:	cbz	x21, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4092c:	mov	x9, x21
   40930:	b	40708 <aarch64_match_operands_constraint@@Base+0xc84>
   40934:	mov	w8, #0x38                  	// #56
   40938:	madd	x8, x26, x8, x22
   4093c:	ldurb	w0, [x8, #-52]
   40940:	mov	x20, x4
   40944:	b	40f70 <aarch64_match_operands_constraint@@Base+0x14ec>
   40948:	cmp	w25, #0xb2
   4094c:	mov	w21, #0x1                   	// #1
   40950:	cinc	w8, w21, eq  // eq = none
   40954:	sub	w8, w20, w8
   40958:	mov	w9, #0x38                  	// #56
   4095c:	umaddl	x8, w8, w9, x22
   40960:	ldrb	w0, [x8, #4]
   40964:	mov	x19, x4
   40968:	mov	x22, x13
   4096c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40970:	ldr	x8, [x22]
   40974:	mov	x9, x19
   40978:	ubfiz	w19, w0, #3, #8
   4097c:	cmp	x8, #0x1
   40980:	b.lt	4098c <aarch64_match_operands_constraint@@Base+0xf08>  // b.tstop
   40984:	cmp	x8, x19
   40988:	b.le	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4098c:	cbz	x9, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40990:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40994:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40998:	add	x0, x0, #0x7f0
   4099c:	add	x1, x1, #0xad8
   409a0:	mov	w2, #0x5                   	// #5
   409a4:	mov	x22, x20
   409a8:	mov	x20, x9
   409ac:	bl	35ab0 <dcgettext@plt>
   409b0:	mov	w8, #0x6                   	// #6
   409b4:	mov	w21, wzr
   409b8:	str	x0, [x20, #8]
   409bc:	mov	w9, #0x1                   	// #1
   409c0:	b	410f8 <aarch64_match_operands_constraint@@Base+0x1674>
   409c4:	ldr	x8, [x13]
   409c8:	mov	w21, #0x1                   	// #1
   409cc:	cmp	x8, #0x5a
   409d0:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   409d4:	cmp	x8, #0x10e
   409d8:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   409dc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   409e0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   409e4:	add	x0, x0, #0x7f0
   409e8:	add	x1, x1, #0x70a
   409ec:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   409f0:	ldr	x8, [x13]
   409f4:	mov	w21, #0x1                   	// #1
   409f8:	cmp	x8, #0xb3
   409fc:	b.gt	40b24 <aarch64_match_operands_constraint@@Base+0x10a0>
   40a00:	cbz	x8, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40a04:	cmp	x8, #0x5a
   40a08:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40a0c:	b	40b34 <aarch64_match_operands_constraint@@Base+0x10b0>
   40a10:	mov	w8, #0x38                  	// #56
   40a14:	madd	x8, x26, x8, x22
   40a18:	ldrb	w8, [x8, #24]
   40a1c:	tbnz	w8, #0, 40b48 <aarch64_match_operands_constraint@@Base+0x10c4>
   40a20:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40a24:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40a28:	add	x0, x0, #0x7f0
   40a2c:	add	x1, x1, #0x77a
   40a30:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40a34:	mov	w8, #0x38                  	// #56
   40a38:	mov	w9, #0x30                  	// #48
   40a3c:	madd	x8, x26, x8, x22
   40a40:	madd	x9, x28, x9, x17
   40a44:	ldrb	w9, [x9, #16]
   40a48:	ldr	x8, [x8, #16]
   40a4c:	tbz	w9, #3, 41684 <aarch64_match_operands_constraint@@Base+0x1c00>
   40a50:	tst	x8, #0x3
   40a54:	b.eq	41680 <aarch64_match_operands_constraint@@Base+0x1bfc>  // b.none
   40a58:	mov	w21, wzr
   40a5c:	cbz	x14, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40a60:	mov	w8, #0x7                   	// #7
   40a64:	str	xzr, [x14, #8]
   40a68:	mov	w9, #0x4                   	// #4
   40a6c:	b	41858 <aarch64_match_operands_constraint@@Base+0x1dd4>
   40a70:	mov	w12, wzr
   40a74:	mov	w13, #0x1f                  	// #31
   40a78:	b	40bc0 <aarch64_match_operands_constraint@@Base+0x113c>
   40a7c:	cmp	w23, #0x2
   40a80:	b.ne	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.any
   40a84:	cmp	w8, #0xd
   40a88:	b.hi	40aa0 <aarch64_match_operands_constraint@@Base+0x101c>  // b.pmore
   40a8c:	mov	w21, #0x1                   	// #1
   40a90:	lsl	w8, w21, w8
   40a94:	mov	w9, #0x2220                	// #8736
   40a98:	tst	w8, w9
   40a9c:	b.ne	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.any
   40aa0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40aa4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40aa8:	add	x0, x0, #0x7f0
   40aac:	add	x1, x1, #0x9e4
   40ab0:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40ab4:	ldrb	w0, [x22, #4]
   40ab8:	mov	x19, x4
   40abc:	mov	x21, x13
   40ac0:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40ac4:	ldr	w8, [x24, #20]
   40ac8:	ldr	x9, [x21]
   40acc:	and	w1, w0, #0xff
   40ad0:	cmp	w8, #0x2a
   40ad4:	cinv	x0, x9, eq  // eq = none
   40ad8:	b	40cfc <aarch64_match_operands_constraint@@Base+0x1278>
   40adc:	ldr	x8, [x13]
   40ae0:	cbz	x8, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40ae4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40ae8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40aec:	add	x0, x0, #0x7f0
   40af0:	add	x1, x1, #0x6ca
   40af4:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40af8:	cbz	w23, 415e0 <aarch64_match_operands_constraint@@Base+0x1b5c>
   40afc:	cmp	w23, #0x22
   40b00:	b.eq	415b8 <aarch64_match_operands_constraint@@Base+0x1b34>  // b.none
   40b04:	cmp	w23, #0x21
   40b08:	b.ne	41e60 <aarch64_match_operands_constraint@@Base+0x23dc>  // b.any
   40b0c:	mov	w8, #0x38                  	// #56
   40b10:	madd	x8, x26, x8, x22
   40b14:	ldr	w8, [x8, #32]
   40b18:	cmp	w8, #0x5
   40b1c:	b.ne	415cc <aarch64_match_operands_constraint@@Base+0x1b48>  // b.any
   40b20:	b	41604 <aarch64_match_operands_constraint@@Base+0x1b80>
   40b24:	cmp	x8, #0xb4
   40b28:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40b2c:	cmp	x8, #0x10e
   40b30:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40b34:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40b38:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40b3c:	add	x0, x0, #0x7f0
   40b40:	add	x1, x1, #0x6e2
   40b44:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40b48:	ldr	x8, [x13]
   40b4c:	cmp	x8, #0x100
   40b50:	b.cc	41160 <aarch64_match_operands_constraint@@Base+0x16dc>  // b.lo, b.ul, b.last
   40b54:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40b58:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40b5c:	add	x0, x0, #0x7f0
   40b60:	add	x1, x1, #0x4e1
   40b64:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40b68:	mov	w8, #0x38                  	// #56
   40b6c:	madd	x8, x26, x8, x22
   40b70:	ldr	w8, [x8, #20]
   40b74:	add	w8, w8, #0x100
   40b78:	cmp	w8, #0x200
   40b7c:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   40b80:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40b84:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40b88:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   40b8c:	add	x0, x0, #0x7f0
   40b90:	add	x1, x1, #0x681
   40b94:	mov	w2, #0x5                   	// #5
   40b98:	mov	x19, x14
   40b9c:	bl	35ab0 <dcgettext@plt>
   40ba0:	mov	w8, #0x6                   	// #6
   40ba4:	movi	d0, #0xffffffff00
   40ba8:	mov	w21, wzr
   40bac:	str	x0, [x19, #8]
   40bb0:	stp	w8, w20, [x19]
   40bb4:	b	40908 <aarch64_match_operands_constraint@@Base+0xe84>
   40bb8:	mov	w12, #0xfffffff8            	// #-8
   40bbc:	mov	w13, #0x7                   	// #7
   40bc0:	mov	w9, #0x38                  	// #56
   40bc4:	madd	x9, x26, x9, x22
   40bc8:	ldr	w10, [x9, #24]
   40bcc:	cbnz	w10, 41d20 <aarch64_match_operands_constraint@@Base+0x229c>
   40bd0:	tbz	w8, #2, 41d40 <aarch64_match_operands_constraint@@Base+0x22bc>
   40bd4:	mov	w8, #0x38                  	// #56
   40bd8:	madd	x8, x26, x8, x22
   40bdc:	ldrb	w8, [x8, #36]
   40be0:	tst	w8, #0x3
   40be4:	b.ne	413a4 <aarch64_match_operands_constraint@@Base+0x1920>  // b.any
   40be8:	mov	w8, #0x30                  	// #48
   40bec:	madd	x8, x28, x8, x17
   40bf0:	ldr	w8, [x8, #16]
   40bf4:	add	x9, x9, #0x10
   40bf8:	ldrsw	x9, [x9, #4]
   40bfc:	ubfx	x8, x8, #5, #3
   40c00:	lsl	w19, w12, w8
   40c04:	cmp	w19, w9
   40c08:	lsl	x22, x13, x8
   40c0c:	b.gt	412b8 <aarch64_match_operands_constraint@@Base+0x1834>
   40c10:	cmp	x22, x9
   40c14:	b.lt	412b8 <aarch64_match_operands_constraint@@Base+0x1834>  // b.tstop
   40c18:	mov	w10, #0x1                   	// #1
   40c1c:	lsl	w8, w10, w8
   40c20:	mov	w10, w8
   40c24:	sub	x10, x10, #0x1
   40c28:	tst	x10, x9
   40c2c:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   40c30:	mov	w21, wzr
   40c34:	cbz	x14, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40c38:	mov	w9, #0x7                   	// #7
   40c3c:	str	xzr, [x14, #8]
   40c40:	stp	w9, w20, [x14]
   40c44:	str	w8, [x14, #16]
   40c48:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40c4c:	mov	w8, #0x38                  	// #56
   40c50:	madd	x8, x26, x8, x22
   40c54:	ldrb	w8, [x8, #24]
   40c58:	tbz	w8, #0, 41ea0 <aarch64_match_operands_constraint@@Base+0x241c>
   40c5c:	ldr	x8, [x13]
   40c60:	mov	w9, #0x3f800000            	// #1065353216
   40c64:	orr	x8, x8, #0x800000
   40c68:	cmp	x8, x9
   40c6c:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   40c70:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40c74:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40c78:	add	x0, x0, #0x7f0
   40c7c:	add	x1, x1, #0x834
   40c80:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40c84:	mov	x23, #0xffffffffffffff80    	// #-128
   40c88:	mov	w8, #0x38                  	// #56
   40c8c:	madd	x8, x26, x8, x22
   40c90:	ldr	w8, [x8, #32]
   40c94:	cmp	w8, #0x5
   40c98:	b.ne	41e40 <aarch64_match_operands_constraint@@Base+0x23bc>  // b.any
   40c9c:	ldrb	w0, [x22, #4]
   40ca0:	mov	x21, x13
   40ca4:	mov	x19, x4
   40ca8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40cac:	mov	w9, #0x38                  	// #56
   40cb0:	madd	x9, x26, x9, x22
   40cb4:	ldr	x8, [x21]
   40cb8:	ldr	x9, [x9, #40]
   40cbc:	and	w10, w0, #0xff
   40cc0:	cmp	w10, #0x1
   40cc4:	b.ne	40de4 <aarch64_match_operands_constraint@@Base+0x1360>  // b.any
   40cc8:	cbz	w9, 41980 <aarch64_match_operands_constraint@@Base+0x1efc>
   40ccc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40cd0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40cd4:	add	x0, x0, #0x7f0
   40cd8:	add	x1, x1, #0x79c
   40cdc:	b	40e60 <aarch64_match_operands_constraint@@Base+0x13dc>
   40ce0:	ldrb	w0, [x22, #4]
   40ce4:	mov	x19, x4
   40ce8:	mov	x21, x13
   40cec:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40cf0:	ldr	x8, [x21]
   40cf4:	and	w1, w0, #0xff
   40cf8:	mvn	x0, x8
   40cfc:	mov	x2, xzr
   40d00:	bl	354e0 <aarch64_logical_immediate_p@plt>
   40d04:	cbnz	w0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40d08:	b	40e50 <aarch64_match_operands_constraint@@Base+0x13cc>
   40d0c:	mov	w8, #0x38                  	// #56
   40d10:	madd	x8, x26, x8, x22
   40d14:	ldr	w8, [x8, #32]
   40d18:	cmp	w8, #0xe
   40d1c:	b.ne	41ec0 <aarch64_match_operands_constraint@@Base+0x243c>  // b.any
   40d20:	mov	w8, #0x38                  	// #56
   40d24:	madd	x8, x26, x8, x22
   40d28:	ldr	x8, [x8, #40]
   40d2c:	sub	x8, x8, #0x1
   40d30:	cmp	x8, #0x10
   40d34:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   40d38:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40d3c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40d40:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40d44:	add	x0, x0, #0x7f0
   40d48:	add	x1, x1, #0xae8
   40d4c:	mov	w2, #0x5                   	// #5
   40d50:	mov	x19, x4
   40d54:	bl	35ab0 <dcgettext@plt>
   40d58:	adrp	x9, 56000 <xexit@@Base+0x284c>
   40d5c:	ldr	d0, [x9, #1768]
   40d60:	b	408f8 <aarch64_match_operands_constraint@@Base+0xe74>
   40d64:	mov	w8, #0x38                  	// #56
   40d68:	madd	x8, x26, x8, x22
   40d6c:	ldrb	w8, [x8, #24]
   40d70:	tbz	w8, #0, 41ee0 <aarch64_match_operands_constraint@@Base+0x245c>
   40d74:	ldr	x8, [x13]
   40d78:	mov	w21, #0x1                   	// #1
   40d7c:	cbz	x8, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   40d80:	mov	w9, #0x3f800000            	// #1065353216
   40d84:	cmp	x8, x9
   40d88:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40d8c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40d90:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40d94:	add	x0, x0, #0x7f0
   40d98:	add	x1, x1, #0x884
   40d9c:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40da0:	mov	w8, #0x38                  	// #56
   40da4:	madd	x8, x26, x8, x22
   40da8:	ldrb	w8, [x8, #24]
   40dac:	tbz	w8, #0, 41f00 <aarch64_match_operands_constraint@@Base+0x247c>
   40db0:	ldr	x8, [x13]
   40db4:	mov	w9, #0x3f000000            	// #1056964608
   40db8:	mov	w21, #0x1                   	// #1
   40dbc:	cmp	x8, x9
   40dc0:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40dc4:	mov	w9, #0x40000000            	// #1073741824
   40dc8:	cmp	x8, x9
   40dcc:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   40dd0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40dd4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40dd8:	add	x0, x0, #0x7f0
   40ddc:	add	x1, x1, #0x85c
   40de0:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   40de4:	tst	w9, #0xfffffff7
   40de8:	b.eq	41784 <aarch64_match_operands_constraint@@Base+0x1d00>  // b.none
   40dec:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40df0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40df4:	add	x0, x0, #0x7f0
   40df8:	add	x1, x1, #0x7c8
   40dfc:	b	40e60 <aarch64_match_operands_constraint@@Base+0x13dc>
   40e00:	ldrb	w0, [x22, #4]
   40e04:	mov	x19, x4
   40e08:	mov	x21, x13
   40e0c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40e10:	ldr	x22, [x21]
   40e14:	and	w21, w0, #0xff
   40e18:	mov	w1, w21
   40e1c:	mov	x2, xzr
   40e20:	mov	x0, x22
   40e24:	bl	354e0 <aarch64_logical_immediate_p@plt>
   40e28:	cbz	w0, 40e50 <aarch64_match_operands_constraint@@Base+0x13cc>
   40e2c:	mov	x0, x22
   40e30:	mov	w1, w21
   40e34:	bl	35620 <aarch64_sve_dupm_mov_immediate_p@plt>
   40e38:	cbnz	w0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40e3c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40e40:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40e44:	add	x0, x0, #0x7f0
   40e48:	add	x1, x1, #0x8ac
   40e4c:	b	40e60 <aarch64_match_operands_constraint@@Base+0x13dc>
   40e50:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40e54:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40e58:	add	x0, x0, #0x7f0
   40e5c:	add	x1, x1, #0x4e1
   40e60:	mov	w2, #0x5                   	// #5
   40e64:	b	40128 <aarch64_match_operands_constraint@@Base+0x6a4>
   40e68:	cmp	w20, #0x1
   40e6c:	b.ne	41e80 <aarch64_match_operands_constraint@@Base+0x23fc>  // b.any
   40e70:	ldr	w8, [x22]
   40e74:	cmp	w8, #0x1
   40e78:	b.ne	41e80 <aarch64_match_operands_constraint@@Base+0x23fc>  // b.any
   40e7c:	mov	w8, #0x38                  	// #56
   40e80:	madd	x8, x26, x8, x22
   40e84:	ldr	w8, [x8, #32]
   40e88:	mov	x19, x4
   40e8c:	cmp	w8, #0x5
   40e90:	b.ne	416fc <aarch64_match_operands_constraint@@Base+0x1c78>  // b.any
   40e94:	ldrb	w0, [x22, #4]
   40e98:	mov	x21, x13
   40e9c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40ea0:	mov	w8, #0x38                  	// #56
   40ea4:	madd	x8, x26, x8, x22
   40ea8:	ldr	x8, [x8, #40]
   40eac:	tst	x8, #0xf
   40eb0:	b.eq	41934 <aarch64_match_operands_constraint@@Base+0x1eb0>  // b.none
   40eb4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40eb8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40ebc:	add	x0, x0, #0x7f0
   40ec0:	add	x1, x1, #0x62a
   40ec4:	b	418d8 <aarch64_match_operands_constraint@@Base+0x1e54>
   40ec8:	mov	w8, #0x38                  	// #56
   40ecc:	madd	x8, x26, x8, x22
   40ed0:	ldr	w8, [x8, #32]
   40ed4:	cmp	w8, #0x5
   40ed8:	b.ne	415cc <aarch64_match_operands_constraint@@Base+0x1b48>  // b.any
   40edc:	mov	w8, #0x38                  	// #56
   40ee0:	madd	x8, x26, x8, x22
   40ee4:	ldr	x8, [x8, #40]
   40ee8:	cbz	x8, 40ef4 <aarch64_match_operands_constraint@@Base+0x1470>
   40eec:	cmp	x8, #0xc
   40ef0:	b.ne	41964 <aarch64_match_operands_constraint@@Base+0x1ee0>  // b.any
   40ef4:	ldr	x8, [x13]
   40ef8:	cmp	x8, #0x1, lsl #12
   40efc:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   40f00:	b	40b54 <aarch64_match_operands_constraint@@Base+0x10d0>
   40f04:	mov	w0, w23
   40f08:	mov	x20, x4
   40f0c:	mov	x19, x13
   40f10:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40f14:	ldr	x8, [x19]
   40f18:	ubfiz	w19, w0, #3, #8
   40f1c:	cmp	x8, #0x1
   40f20:	b.lt	40f2c <aarch64_match_operands_constraint@@Base+0x14a8>  // b.tstop
   40f24:	cmp	x8, x19
   40f28:	b.le	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40f2c:	cbz	x20, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40f30:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40f34:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40f38:	add	x0, x0, #0x7f0
   40f3c:	add	x1, x1, #0xad8
   40f40:	mov	w2, #0x5                   	// #5
   40f44:	bl	35ab0 <dcgettext@plt>
   40f48:	mov	w8, #0x6                   	// #6
   40f4c:	str	w8, [x20]
   40f50:	ldr	x8, [sp, #8]
   40f54:	mov	w21, wzr
   40f58:	mov	w9, #0x1                   	// #1
   40f5c:	str	x0, [x20, #8]
   40f60:	str	w8, [x20, #4]
   40f64:	b	410fc <aarch64_match_operands_constraint@@Base+0x1678>
   40f68:	mov	x20, x4
   40f6c:	mov	w0, w23
   40f70:	mov	x19, x13
   40f74:	bl	35760 <aarch64_get_qualifier_esize@plt>
   40f78:	ldr	x8, [x19]
   40f7c:	and	w9, w0, #0xff
   40f80:	lsl	w9, w9, #3
   40f84:	sub	w19, w9, #0x1
   40f88:	tbnz	x8, #63, 40f98 <aarch64_match_operands_constraint@@Base+0x1514>
   40f8c:	sxtw	x9, w19
   40f90:	cmp	x8, x9
   40f94:	b.le	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   40f98:	cbz	x20, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40f9c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40fa0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40fa4:	add	x0, x0, #0x7f0
   40fa8:	add	x1, x1, #0xad8
   40fac:	mov	w2, #0x5                   	// #5
   40fb0:	bl	35ab0 <dcgettext@plt>
   40fb4:	mov	w8, #0x6                   	// #6
   40fb8:	str	x0, [x20, #8]
   40fbc:	str	w8, [x20]
   40fc0:	ldr	x8, [sp, #8]
   40fc4:	mov	w21, wzr
   40fc8:	str	w8, [x20, #4]
   40fcc:	b	405cc <aarch64_match_operands_constraint@@Base+0xb48>
   40fd0:	ldr	x8, [x13]
   40fd4:	cmp	x8, #0x3f1
   40fd8:	b.cc	41710 <aarch64_match_operands_constraint@@Base+0x1c8c>  // b.lo, b.ul, b.last
   40fdc:	cbz	x4, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   40fe0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   40fe4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   40fe8:	add	x0, x0, #0x7f0
   40fec:	add	x1, x1, #0xad8
   40ff0:	mov	w2, #0x5                   	// #5
   40ff4:	mov	x19, x4
   40ff8:	bl	35ab0 <dcgettext@plt>
   40ffc:	adrp	x9, 56000 <xexit@@Base+0x284c>
   41000:	ldr	d0, [x9, #1816]
   41004:	b	408f8 <aarch64_match_operands_constraint@@Base+0xe74>
   41008:	cmp	w20, #0x2
   4100c:	b.ne	41f20 <aarch64_match_operands_constraint@@Base+0x249c>  // b.any
   41010:	ldrb	w0, [x22, #60]
   41014:	mov	x21, x13
   41018:	mov	x19, x4
   4101c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   41020:	ldr	x8, [x21]
   41024:	lsl	w9, w0, #3
   41028:	and	x9, x9, #0xf8
   4102c:	cmp	x8, x9
   41030:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   41034:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41038:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4103c:	add	x0, x0, #0x7f0
   41040:	add	x1, x1, #0x4ae
   41044:	mov	w2, #0x5                   	// #5
   41048:	bl	35ab0 <dcgettext@plt>
   4104c:	mov	w21, wzr
   41050:	cbz	x19, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41054:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41058:	ldr	d0, [x8, #1808]
   4105c:	b	418f0 <aarch64_match_operands_constraint@@Base+0x1e6c>
   41060:	cmp	w20, #0x2
   41064:	b.lt	41de0 <aarch64_match_operands_constraint@@Base+0x235c>  // b.tstop
   41068:	sub	x21, x26, #0x1
   4106c:	mov	w8, #0x38                  	// #56
   41070:	mul	x8, x21, x8
   41074:	ldr	w8, [x22, x8]
   41078:	cmp	w8, #0x37
   4107c:	b.ne	41de0 <aarch64_match_operands_constraint@@Base+0x235c>  // b.any
   41080:	ldr	w8, [x22]
   41084:	cmp	w8, #0x1
   41088:	b.ne	41de0 <aarch64_match_operands_constraint@@Base+0x235c>  // b.any
   4108c:	mov	w0, w23
   41090:	mov	x24, x13
   41094:	mov	x19, x4
   41098:	bl	444a8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x1ec>
   4109c:	mov	w8, #0x38                  	// #56
   410a0:	madd	x8, x21, x8, x22
   410a4:	ldr	x9, [x24]
   410a8:	ldr	x8, [x8, #16]
   410ac:	add	x10, x8, x9
   410b0:	and	w9, w0, #0xff
   410b4:	cmp	x10, x9
   410b8:	b.le	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   410bc:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   410c0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   410c4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   410c8:	mov	x10, x19
   410cc:	add	x0, x0, #0x7f0
   410d0:	add	x1, x1, #0xad8
   410d4:	mov	w2, #0x5                   	// #5
   410d8:	sub	w19, w9, w8
   410dc:	mov	x22, x20
   410e0:	mov	x20, x10
   410e4:	bl	35ab0 <dcgettext@plt>
   410e8:	mov	w8, #0x6                   	// #6
   410ec:	mov	w9, #0x1                   	// #1
   410f0:	mov	w21, wzr
   410f4:	str	x0, [x20, #8]
   410f8:	stp	w8, w22, [x20]
   410fc:	stp	w9, w19, [x20, #16]
   41100:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41104:	ldrb	w0, [x22, #4]
   41108:	mov	x21, x13
   4110c:	mov	x19, x4
   41110:	bl	35760 <aarch64_get_qualifier_esize@plt>
   41114:	cmp	w20, #0x1
   41118:	b.ne	41f40 <aarch64_match_operands_constraint@@Base+0x24bc>  // b.any
   4111c:	ldr	w9, [x24, #20]
   41120:	mov	w8, w0
   41124:	ldr	x0, [x21]
   41128:	and	w1, w8, #0xff
   4112c:	cmp	w9, #0x23
   41130:	b.eq	418bc <aarch64_match_operands_constraint@@Base+0x1e38>  // b.none
   41134:	cmp	w9, #0x24
   41138:	b.eq	41148 <aarch64_match_operands_constraint@@Base+0x16c4>  // b.none
   4113c:	cmp	w9, #0x25
   41140:	b.ne	41f60 <aarch64_match_operands_constraint@@Base+0x24dc>  // b.any
   41144:	mvn	x0, x0
   41148:	cmp	w1, #0x4
   4114c:	cset	w1, eq  // eq = none
   41150:	mov	x2, xzr
   41154:	bl	35b10 <aarch64_wide_constant_p@plt>
   41158:	cbnz	w0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   4115c:	b	418c8 <aarch64_match_operands_constraint@@Base+0x1e44>
   41160:	mov	w8, #0x38                  	// #56
   41164:	madd	x8, x26, x8, x22
   41168:	ldr	w8, [x8, #32]
   4116c:	cbnz	w8, 415cc <aarch64_match_operands_constraint@@Base+0x1b48>
   41170:	b	41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41174:	mov	w9, #0x1000                	// #4096
   41178:	b	41368 <aarch64_match_operands_constraint@@Base+0x18e4>
   4117c:	mov	w10, #0xffffff00            	// #-256
   41180:	mov	w11, #0xff                  	// #255
   41184:	b	41218 <aarch64_match_operands_constraint@@Base+0x1794>
   41188:	mov	w8, #0x38                  	// #56
   4118c:	madd	x8, x26, x8, x22
   41190:	ldr	w8, [x8, #20]
   41194:	mov	w10, #0x1ff1                	// #8177
   41198:	add	w9, w8, #0x1, lsl #12
   4119c:	cmp	w9, w10
   411a0:	b.cc	414f4 <aarch64_match_operands_constraint@@Base+0x1a70>  // b.lo, b.ul, b.last
   411a4:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   411a8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   411ac:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   411b0:	add	x0, x0, #0x7f0
   411b4:	add	x1, x1, #0x681
   411b8:	mov	w2, #0x5                   	// #5
   411bc:	mov	x19, x14
   411c0:	bl	35ab0 <dcgettext@plt>
   411c4:	adrp	x9, 56000 <xexit@@Base+0x284c>
   411c8:	ldr	d0, [x9, #1824]
   411cc:	b	408f8 <aarch64_match_operands_constraint@@Base+0xe74>
   411d0:	mov	w8, #0x38                  	// #56
   411d4:	mov	w0, w23
   411d8:	madd	x19, x26, x8, x22
   411dc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   411e0:	ldrsw	x9, [x19, #20]
   411e4:	and	w8, w0, #0xff
   411e8:	lsl	w10, w8, #12
   411ec:	sub	w19, w10, w0, uxtb
   411f0:	tbnz	w9, #31, 41808 <aarch64_match_operands_constraint@@Base+0x1d84>
   411f4:	cmp	x19, x9
   411f8:	b.lt	41808 <aarch64_match_operands_constraint@@Base+0x1d84>  // b.tstop
   411fc:	sdiv	x10, x9, x8
   41200:	msub	x9, x10, x8, x9
   41204:	cbz	x9, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41208:	cbnz	x25, 41498 <aarch64_match_operands_constraint@@Base+0x1a14>
   4120c:	b	41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41210:	mov	w10, #0xffffffe0            	// #-32
   41214:	mov	w11, #0x1f                  	// #31
   41218:	mov	w9, #0x38                  	// #56
   4121c:	madd	x9, x26, x9, x22
   41220:	ldr	w12, [x9, #24]
   41224:	cbnz	w12, 41da0 <aarch64_match_operands_constraint@@Base+0x231c>
   41228:	tbz	w8, #2, 41dc0 <aarch64_match_operands_constraint@@Base+0x233c>
   4122c:	add	x8, x9, #0x10
   41230:	mov	w9, #0x38                  	// #56
   41234:	madd	x9, x26, x9, x22
   41238:	ldrsw	x8, [x8, #4]
   4123c:	ldrb	w9, [x9, #36]
   41240:	cbz	w8, 4124c <aarch64_match_operands_constraint@@Base+0x17c8>
   41244:	tbnz	w9, #0, 41250 <aarch64_match_operands_constraint@@Base+0x17cc>
   41248:	b	413a4 <aarch64_match_operands_constraint@@Base+0x1920>
   4124c:	tbz	w9, #0, 41264 <aarch64_match_operands_constraint@@Base+0x17e0>
   41250:	mov	w9, #0x38                  	// #56
   41254:	madd	x9, x26, x9, x22
   41258:	ldr	w9, [x9, #32]
   4125c:	cmp	w9, #0xf
   41260:	b.ne	413a4 <aarch64_match_operands_constraint@@Base+0x1920>  // b.any
   41264:	mov	w9, #0x30                  	// #48
   41268:	madd	x9, x28, x9, x17
   4126c:	ldr	w9, [x9, #16]
   41270:	ubfx	x9, x9, #5, #3
   41274:	add	x9, x9, #0x1
   41278:	mul	w19, w9, w10
   4127c:	cmp	w19, w8
   41280:	mul	x22, x9, x11
   41284:	b.gt	412b8 <aarch64_match_operands_constraint@@Base+0x1834>
   41288:	cmp	x22, x8
   4128c:	b.lt	412b8 <aarch64_match_operands_constraint@@Base+0x1834>  // b.tstop
   41290:	sdiv	x10, x8, x9
   41294:	msub	x8, x10, x9, x8
   41298:	cbz	x8, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   4129c:	mov	w21, wzr
   412a0:	cbz	x14, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   412a4:	mov	w8, #0x7                   	// #7
   412a8:	str	xzr, [x14, #8]
   412ac:	stp	w8, w20, [x14]
   412b0:	str	w9, [x14, #16]
   412b4:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   412b8:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   412bc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   412c0:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   412c4:	add	x0, x0, #0x7f0
   412c8:	add	x1, x1, #0x681
   412cc:	mov	w2, #0x5                   	// #5
   412d0:	mov	x23, x20
   412d4:	mov	x20, x14
   412d8:	bl	35ab0 <dcgettext@plt>
   412dc:	mov	w8, #0x6                   	// #6
   412e0:	mov	w21, wzr
   412e4:	str	x0, [x20, #8]
   412e8:	stp	w8, w23, [x20]
   412ec:	stp	w19, w22, [x20, #16]
   412f0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   412f4:	mov	w8, #0x38                  	// #56
   412f8:	madd	x8, x26, x8, x22
   412fc:	ldr	w8, [x8, #20]
   41300:	mov	w10, #0x1ff9                	// #8185
   41304:	add	w9, w8, #0x1, lsl #12
   41308:	cmp	w9, w10
   4130c:	b.cc	4183c <aarch64_match_operands_constraint@@Base+0x1db8>  // b.lo, b.ul, b.last
   41310:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41314:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41318:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   4131c:	add	x0, x0, #0x7f0
   41320:	add	x1, x1, #0x681
   41324:	mov	w2, #0x5                   	// #5
   41328:	mov	x19, x14
   4132c:	bl	35ab0 <dcgettext@plt>
   41330:	adrp	x9, 56000 <xexit@@Base+0x284c>
   41334:	ldr	d0, [x9, #1840]
   41338:	b	408f8 <aarch64_match_operands_constraint@@Base+0xe74>
   4133c:	mov	w0, w23
   41340:	bl	35760 <aarch64_get_qualifier_esize@plt>
   41344:	mov	w8, #0x38                  	// #56
   41348:	madd	x8, x26, x8, x22
   4134c:	ldr	w8, [x8, #20]
   41350:	cmp	w8, #0xff
   41354:	b.ls	41864 <aarch64_match_operands_constraint@@Base+0x1de0>  // b.plast
   41358:	cmn	w8, #0x101
   4135c:	b.hi	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.pmore
   41360:	b	41874 <aarch64_match_operands_constraint@@Base+0x1df0>
   41364:	mov	w9, #0x100                 	// #256
   41368:	mov	w10, #0x38                  	// #56
   4136c:	madd	x10, x26, x10, x22
   41370:	ldr	w10, [x10, #24]
   41374:	cbz	w10, 41e00 <aarch64_match_operands_constraint@@Base+0x237c>
   41378:	tbz	w8, #2, 41e20 <aarch64_match_operands_constraint@@Base+0x239c>
   4137c:	mov	w8, #0x38                  	// #56
   41380:	madd	x8, x26, x8, x22
   41384:	ldr	w8, [x8, #32]
   41388:	lsr	w8, w9, w8
   4138c:	tbz	w8, #0, 413a4 <aarch64_match_operands_constraint@@Base+0x1920>
   41390:	mov	w8, #0x38                  	// #56
   41394:	madd	x8, x26, x8, x22
   41398:	ldr	x8, [x8, #40]
   4139c:	cmp	x8, #0x4
   413a0:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   413a4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   413a8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   413ac:	add	x0, x0, #0x7f0
   413b0:	add	x1, x1, #0x524
   413b4:	mov	w2, #0x5                   	// #5
   413b8:	bl	35ab0 <dcgettext@plt>
   413bc:	cbz	x25, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   413c0:	mov	w8, #0x9                   	// #9
   413c4:	mov	w21, wzr
   413c8:	stp	w8, w20, [x25]
   413cc:	str	x0, [x25, #8]
   413d0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   413d4:	mov	w0, w23
   413d8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   413dc:	mov	w8, #0x38                  	// #56
   413e0:	madd	x8, x26, x8, x22
   413e4:	ldr	x8, [x8, #40]
   413e8:	cbz	x8, 4141c <aarch64_match_operands_constraint@@Base+0x1998>
   413ec:	and	w9, w0, #0xff
   413f0:	cmp	w9, #0x11
   413f4:	b.cs	42040 <aarch64_match_operands_constraint@@Base+0x25bc>  // b.hs, b.nlast
   413f8:	sub	w9, w9, #0x1
   413fc:	mov	w10, #0x808b                	// #32907
   41400:	lsr	x10, x10, x9
   41404:	tbz	w10, #0, 42060 <aarch64_match_operands_constraint@@Base+0x25dc>
   41408:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   4140c:	add	x10, x10, #0x6a
   41410:	ldrb	w9, [x10, x9]
   41414:	cmp	x8, x9
   41418:	b.ne	41920 <aarch64_match_operands_constraint@@Base+0x1e9c>  // b.any
   4141c:	mov	w8, #0x38                  	// #56
   41420:	madd	x8, x26, x8, x22
   41424:	ldr	w8, [x8, #32]
   41428:	sub	w8, w8, #0x5
   4142c:	cmp	w8, #0x9
   41430:	b.cs	41440 <aarch64_match_operands_constraint@@Base+0x19bc>  // b.hs, b.nlast
   41434:	mov	w9, #0x189                 	// #393
   41438:	lsr	w8, w9, w8
   4143c:	tbnz	w8, #0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41440:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41444:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41448:	add	x0, x0, #0x7f0
   4144c:	add	x1, x1, #0x4c3
   41450:	b	413b4 <aarch64_match_operands_constraint@@Base+0x1930>
   41454:	mov	w0, w23
   41458:	bl	35760 <aarch64_get_qualifier_esize@plt>
   4145c:	mov	w8, #0x38                  	// #56
   41460:	madd	x8, x26, x8, x22
   41464:	ldrsw	x9, [x8, #20]
   41468:	and	w8, w0, #0xff
   4146c:	neg	w19, w8, lsl #6
   41470:	lsl	w10, w8, #6
   41474:	cmp	w19, w9
   41478:	sub	w22, w10, w0, uxtb
   4147c:	b.gt	41888 <aarch64_match_operands_constraint@@Base+0x1e04>
   41480:	cmp	x22, x9
   41484:	b.lt	41888 <aarch64_match_operands_constraint@@Base+0x1e04>  // b.tstop
   41488:	sdiv	x10, x9, x8
   4148c:	msub	x9, x10, x8, x9
   41490:	cbz	x9, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41494:	cbz	x25, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41498:	mov	w9, #0x7                   	// #7
   4149c:	mov	w21, wzr
   414a0:	str	xzr, [x25, #8]
   414a4:	stp	w9, w20, [x25]
   414a8:	str	w8, [x25, #16]
   414ac:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   414b0:	mov	w8, #0x38                  	// #56
   414b4:	madd	x8, x26, x8, x22
   414b8:	ldr	w8, [x8, #20]
   414bc:	add	w9, w8, #0x400
   414c0:	cmp	w9, #0x7f1
   414c4:	b.cc	414f4 <aarch64_match_operands_constraint@@Base+0x1a70>  // b.lo, b.ul, b.last
   414c8:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   414cc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   414d0:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   414d4:	add	x0, x0, #0x7f0
   414d8:	add	x1, x1, #0x681
   414dc:	mov	w2, #0x5                   	// #5
   414e0:	mov	x19, x14
   414e4:	bl	35ab0 <dcgettext@plt>
   414e8:	adrp	x9, 56000 <xexit@@Base+0x284c>
   414ec:	ldr	d0, [x9, #1832]
   414f0:	b	408f8 <aarch64_match_operands_constraint@@Base+0xe74>
   414f4:	tst	w8, #0xf
   414f8:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   414fc:	cbz	x14, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41500:	mov	w21, wzr
   41504:	mov	w8, #0x7                   	// #7
   41508:	str	xzr, [x14, #8]
   4150c:	mov	w9, #0x10                  	// #16
   41510:	b	41858 <aarch64_match_operands_constraint@@Base+0x1dd4>
   41514:	cmp	w20, #0x1
   41518:	b.ne	41fa0 <aarch64_match_operands_constraint@@Base+0x251c>  // b.any
   4151c:	mov	w8, #0x38                  	// #56
   41520:	madd	x8, x26, x8, x22
   41524:	ldr	w9, [x8, #24]
   41528:	add	x19, x8, #0x10
   4152c:	cbz	w9, 418f8 <aarch64_match_operands_constraint@@Base+0x1e74>
   41530:	ldr	w8, [x19, #4]
   41534:	cmp	w8, #0x1f
   41538:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   4153c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41540:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41544:	add	x0, x0, #0x7f0
   41548:	add	x1, x1, #0x478
   4154c:	b	41af4 <aarch64_match_operands_constraint@@Base+0x2070>
   41550:	mov	w9, #0x38                  	// #56
   41554:	madd	x9, x26, x9, x22
   41558:	ldr	w9, [x9, #24]
   4155c:	cbz	w9, 41fc0 <aarch64_match_operands_constraint@@Base+0x253c>
   41560:	tbz	w8, #2, 41fe0 <aarch64_match_operands_constraint@@Base+0x255c>
   41564:	mov	w8, #0x30                  	// #48
   41568:	madd	x8, x28, x8, x17
   4156c:	ldrb	w8, [x8, #17]
   41570:	tbnz	w8, #0, 42000 <aarch64_match_operands_constraint@@Base+0x257c>
   41574:	mov	w8, #0x38                  	// #56
   41578:	madd	x8, x26, x8, x22
   4157c:	ldr	w8, [x8, #32]
   41580:	cmp	w8, #0x5
   41584:	b.ne	42020 <aarch64_match_operands_constraint@@Base+0x259c>  // b.any
   41588:	mov	w8, #0x38                  	// #56
   4158c:	madd	x8, x26, x8, x22
   41590:	ldrb	w8, [x8, #36]
   41594:	tbz	w8, #0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41598:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   4159c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   415a0:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   415a4:	add	x0, x0, #0x56e
   415a8:	add	x1, x1, #0x836
   415ac:	add	x3, x3, #0x22e
   415b0:	mov	w2, #0x77a                 	// #1914
   415b4:	bl	35b90 <__assert_fail@plt>
   415b8:	mov	w8, #0x38                  	// #56
   415bc:	madd	x8, x26, x8, x22
   415c0:	ldr	w8, [x8, #32]
   415c4:	cmp	w8, #0x1
   415c8:	b.eq	41604 <aarch64_match_operands_constraint@@Base+0x1b80>  // b.none
   415cc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   415d0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   415d4:	add	x0, x0, #0x7f0
   415d8:	add	x1, x1, #0x5c9
   415dc:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   415e0:	mov	w8, #0x38                  	// #56
   415e4:	madd	x8, x26, x8, x22
   415e8:	ldr	w8, [x8, #32]
   415ec:	cbz	w8, 41604 <aarch64_match_operands_constraint@@Base+0x1b80>
   415f0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   415f4:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   415f8:	add	x0, x0, #0x7f0
   415fc:	add	x1, x1, #0x72a
   41600:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   41604:	cmp	w20, #0x1
   41608:	b.ne	41f80 <aarch64_match_operands_constraint@@Base+0x24fc>  // b.any
   4160c:	ldrb	w0, [x22, #4]
   41610:	mov	x19, x13
   41614:	mov	x23, x4
   41618:	bl	35760 <aarch64_get_qualifier_esize@plt>
   4161c:	ldr	x8, [x19]
   41620:	and	w9, w0, #0xff
   41624:	cmp	w9, #0x8
   41628:	b.ne	41738 <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.any
   4162c:	mov	x10, xzr
   41630:	mov	x11, xzr
   41634:	mov	w9, wzr
   41638:	mov	w12, #0x1                   	// #1
   4163c:	lsr	x13, x8, x10
   41640:	ands	w13, w13, #0xff
   41644:	b.eq	41658 <aarch64_match_operands_constraint@@Base+0x1bd4>  // b.none
   41648:	cmp	w13, #0xff
   4164c:	b.ne	4166c <aarch64_match_operands_constraint@@Base+0x1be8>  // b.any
   41650:	lsl	w13, w12, w11
   41654:	orr	w9, w13, w9
   41658:	add	x11, x11, #0x1
   4165c:	cmp	x11, #0x8
   41660:	add	x10, x10, #0x8
   41664:	b.ne	4163c <aarch64_match_operands_constraint@@Base+0x1bb8>  // b.any
   41668:	tbz	w9, #31, 41790 <aarch64_match_operands_constraint@@Base+0x1d0c>
   4166c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41670:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41674:	add	x0, x0, #0x7f0
   41678:	add	x1, x1, #0x741
   4167c:	b	41a94 <aarch64_match_operands_constraint@@Base+0x2010>
   41680:	asr	x8, x8, #2
   41684:	mov	w9, #0x30                  	// #48
   41688:	madd	x9, x28, x9, x17
   4168c:	ldr	w10, [x9, #20]
   41690:	cbz	w10, 41bc0 <aarch64_match_operands_constraint@@Base+0x213c>
   41694:	adrp	x12, 96000 <aarch64_operands@@Base+0x16c38>
   41698:	ldr	x12, [x12, #3944]
   4169c:	mov	w11, #0x30                  	// #48
   416a0:	madd	x11, x28, x11, x17
   416a4:	mov	w9, wzr
   416a8:	add	x11, x11, #0x18
   416ac:	add	x10, x12, w10, uxtw #3
   416b0:	ldr	w13, [x10, #4]
   416b4:	ldr	w10, [x11], #4
   416b8:	add	w9, w13, w9
   416bc:	cbnz	w10, 416ac <aarch64_match_operands_constraint@@Base+0x1c28>
   416c0:	sub	w9, w9, #0x1
   416c4:	cmp	w9, #0x1f
   416c8:	b.cs	41bc0 <aarch64_match_operands_constraint@@Base+0x213c>  // b.hs, b.nlast
   416cc:	mov	w21, #0x1                   	// #1
   416d0:	lsl	x9, x21, x9
   416d4:	cmp	x9, x8
   416d8:	b.le	416e8 <aarch64_match_operands_constraint@@Base+0x1c64>
   416dc:	neg	x9, x9
   416e0:	cmp	x8, x9
   416e4:	b.ge	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.tcont
   416e8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   416ec:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   416f0:	add	x0, x0, #0x7f0
   416f4:	add	x1, x1, #0x4e1
   416f8:	b	413b4 <aarch64_match_operands_constraint@@Base+0x1930>
   416fc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41700:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41704:	add	x0, x0, #0x7f0
   41708:	add	x1, x1, #0x5c9
   4170c:	b	418d8 <aarch64_match_operands_constraint@@Base+0x1e54>
   41710:	tst	x8, #0xf
   41714:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   41718:	mov	w21, wzr
   4171c:	cbz	x4, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41720:	mov	w8, #0x7                   	// #7
   41724:	mov	w9, #0x10                  	// #16
   41728:	str	xzr, [x4, #8]
   4172c:	stp	w8, w20, [x4]
   41730:	str	w9, [x4, #16]
   41734:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41738:	add	x8, x8, #0x80
   4173c:	cmp	x8, #0x180
   41740:	b.cc	41790 <aarch64_match_operands_constraint@@Base+0x1d0c>  // b.lo, b.ul, b.last
   41744:	cbz	x23, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41748:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4174c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41750:	add	x0, x0, #0x7f0
   41754:	add	x1, x1, #0xad8
   41758:	mov	w2, #0x5                   	// #5
   4175c:	bl	35ab0 <dcgettext@plt>
   41760:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41764:	adrp	x9, 56000 <xexit@@Base+0x284c>
   41768:	ldr	d0, [x8, #1776]
   4176c:	ldr	d1, [x9, #1784]
   41770:	mov	w21, wzr
   41774:	str	x0, [x23, #8]
   41778:	str	d0, [x23]
   4177c:	str	d1, [x23, #16]
   41780:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41784:	cbz	w9, 41978 <aarch64_match_operands_constraint@@Base+0x1ef4>
   41788:	and	x9, x9, #0xffffffff
   4178c:	b	41984 <aarch64_match_operands_constraint@@Base+0x1f00>
   41790:	mov	w8, #0x38                  	// #56
   41794:	madd	x8, x26, x8, x22
   41798:	ldr	w8, [x8, #32]
   4179c:	cbz	w8, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   417a0:	cmp	w8, #0x1
   417a4:	b.eq	41a48 <aarch64_match_operands_constraint@@Base+0x1fc4>  // b.none
   417a8:	cmp	w8, #0x5
   417ac:	b.ne	41a84 <aarch64_match_operands_constraint@@Base+0x2000>  // b.any
   417b0:	ldrb	w0, [x22, #4]
   417b4:	bl	35760 <aarch64_get_qualifier_esize@plt>
   417b8:	mov	w8, #0x38                  	// #56
   417bc:	madd	x8, x26, x8, x22
   417c0:	ldr	x8, [x8, #40]
   417c4:	and	w9, w0, #0xff
   417c8:	lsl	w9, w9, #3
   417cc:	sub	w19, w9, #0x8
   417d0:	tbnz	x8, #63, 41b30 <aarch64_match_operands_constraint@@Base+0x20ac>
   417d4:	sxtw	x9, w19
   417d8:	cmp	x8, x9
   417dc:	b.gt	41b30 <aarch64_match_operands_constraint@@Base+0x20ac>
   417e0:	tst	x8, #0x7
   417e4:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   417e8:	mov	w21, wzr
   417ec:	cbz	x23, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   417f0:	adrp	x8, 56000 <xexit@@Base+0x284c>
   417f4:	ldr	d0, [x8, #1800]
   417f8:	mov	w8, #0x8                   	// #8
   417fc:	str	xzr, [x23, #8]
   41800:	str	w8, [x23, #16]
   41804:	b	41ab0 <aarch64_match_operands_constraint@@Base+0x202c>
   41808:	cbz	x25, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   4180c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41810:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   41814:	add	x0, x0, #0x7f0
   41818:	add	x1, x1, #0x681
   4181c:	mov	w2, #0x5                   	// #5
   41820:	bl	35ab0 <dcgettext@plt>
   41824:	mov	w8, #0x6                   	// #6
   41828:	mov	w21, wzr
   4182c:	str	x0, [x25, #8]
   41830:	stp	w8, w20, [x25]
   41834:	stp	wzr, w19, [x25, #16]
   41838:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4183c:	tst	w8, #0x7
   41840:	b.eq	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.none
   41844:	mov	w21, wzr
   41848:	cbz	x14, 41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   4184c:	mov	w8, #0x7                   	// #7
   41850:	mov	w9, #0x8                   	// #8
   41854:	str	xzr, [x14, #8]
   41858:	stp	w8, w20, [x14]
   4185c:	str	w9, [x14, #16]
   41860:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41864:	and	x9, x0, #0xff
   41868:	udiv	x10, x8, x9
   4186c:	msub	x8, x10, x9, x8
   41870:	cbnz	x8, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   41874:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41878:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4187c:	add	x0, x0, #0x7f0
   41880:	add	x1, x1, #0x452
   41884:	b	413b4 <aarch64_match_operands_constraint@@Base+0x1930>
   41888:	cbz	x25, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   4188c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41890:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   41894:	add	x0, x0, #0x7f0
   41898:	add	x1, x1, #0x681
   4189c:	mov	w2, #0x5                   	// #5
   418a0:	bl	35ab0 <dcgettext@plt>
   418a4:	mov	w8, #0x6                   	// #6
   418a8:	mov	w21, wzr
   418ac:	str	x0, [x25, #8]
   418b0:	stp	w8, w20, [x25]
   418b4:	stp	w19, w22, [x25, #16]
   418b8:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   418bc:	mov	x2, xzr
   418c0:	bl	354e0 <aarch64_logical_immediate_p@plt>
   418c4:	cbnz	w0, 41adc <aarch64_match_operands_constraint@@Base+0x2058>
   418c8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   418cc:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   418d0:	add	x0, x0, #0x7f0
   418d4:	add	x1, x1, #0x4e1
   418d8:	mov	w2, #0x5                   	// #5
   418dc:	bl	35ab0 <dcgettext@plt>
   418e0:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   418e4:	adrp	x8, 56000 <xexit@@Base+0x284c>
   418e8:	ldr	d0, [x8, #1792]
   418ec:	mov	w21, wzr
   418f0:	str	d0, [x19]
   418f4:	b	4013c <aarch64_match_operands_constraint@@Base+0x6b8>
   418f8:	ldr	w8, [x24, #32]
   418fc:	cmp	w8, #0x25
   41900:	b.ne	419ec <aarch64_match_operands_constraint@@Base+0x1f68>  // b.any
   41904:	ldr	x8, [x24, #120]
   41908:	mov	w9, #0x1000000             	// #16777216
   4190c:	and	x8, x8, #0x7000000
   41910:	cmp	x8, x9
   41914:	b.ne	41ab8 <aarch64_match_operands_constraint@@Base+0x2034>  // b.any
   41918:	mov	w20, #0x1                   	// #1
   4191c:	b	41ac0 <aarch64_match_operands_constraint@@Base+0x203c>
   41920:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41924:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41928:	add	x0, x0, #0x7f0
   4192c:	add	x1, x1, #0x4ae
   41930:	b	413b4 <aarch64_match_operands_constraint@@Base+0x1930>
   41934:	and	w9, w0, #0xff
   41938:	lsl	w9, w9, #3
   4193c:	sub	w20, w9, #0x10
   41940:	tbnz	x8, #63, 41a14 <aarch64_match_operands_constraint@@Base+0x1f90>
   41944:	sxtw	x9, w20
   41948:	cmp	x8, x9
   4194c:	b.gt	41a14 <aarch64_match_operands_constraint@@Base+0x1f90>
   41950:	ldr	x8, [x21]
   41954:	tbnz	x8, #63, 41b8c <aarch64_match_operands_constraint@@Base+0x2108>
   41958:	cmp	x8, #0x10, lsl #12
   4195c:	b.lt	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.tstop
   41960:	b	418c8 <aarch64_match_operands_constraint@@Base+0x1e44>
   41964:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41968:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4196c:	add	x0, x0, #0x7f0
   41970:	add	x1, x1, #0x5e0
   41974:	b	406f4 <aarch64_match_operands_constraint@@Base+0xc70>
   41978:	tst	x8, #0xff
   4197c:	b.eq	41b18 <aarch64_match_operands_constraint@@Base+0x2094>  // b.none
   41980:	mov	x9, xzr
   41984:	and	x10, x0, #0xff
   41988:	lsl	x10, x10, #2
   4198c:	mov	x11, #0xffffffffffffffff    	// #-1
   41990:	lsl	x11, x11, x10
   41994:	lsl	x10, x11, x10
   41998:	mvn	x10, x10
   4199c:	lsr	x9, x10, x9
   419a0:	bics	xzr, x8, x9
   419a4:	b.eq	419b4 <aarch64_match_operands_constraint@@Base+0x1f30>  // b.none
   419a8:	orn	x10, x8, x9
   419ac:	cmp	x10, x8
   419b0:	b.ne	419d8 <aarch64_match_operands_constraint@@Base+0x1f54>  // b.any
   419b4:	sub	x8, x8, x23
   419b8:	and	x8, x9, x8
   419bc:	cmp	x8, #0x100
   419c0:	b.cc	41adc <aarch64_match_operands_constraint@@Base+0x2058>  // b.lo, b.ul, b.last
   419c4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   419c8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   419cc:	add	x0, x0, #0x7f0
   419d0:	add	x1, x1, #0x807
   419d4:	b	40e60 <aarch64_match_operands_constraint@@Base+0x13dc>
   419d8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   419dc:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   419e0:	add	x0, x0, #0x7f0
   419e4:	add	x1, x1, #0x7e4
   419e8:	b	40e60 <aarch64_match_operands_constraint@@Base+0x13dc>
   419ec:	ldrh	w8, [x22, #16]
   419f0:	ldrb	w0, [x22, #4]
   419f4:	ubfx	w20, w8, #5, #3
   419f8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   419fc:	ldrb	w8, [x22, #4]
   41a00:	and	w9, w0, #0xff
   41a04:	mul	w20, w20, w9
   41a08:	mov	w0, w8
   41a0c:	bl	359c0 <aarch64_get_qualifier_nelem@plt>
   41a10:	b	41ac8 <aarch64_match_operands_constraint@@Base+0x2044>
   41a14:	cbz	x19, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41a18:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41a1c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41a20:	add	x0, x0, #0x7f0
   41a24:	add	x1, x1, #0x4b6
   41a28:	mov	w2, #0x5                   	// #5
   41a2c:	bl	35ab0 <dcgettext@plt>
   41a30:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41a34:	ldr	d0, [x8, #1776]
   41a38:	mov	w21, wzr
   41a3c:	str	x0, [x19, #8]
   41a40:	stp	wzr, w20, [x19, #16]
   41a44:	b	406ac <aarch64_match_operands_constraint@@Base+0xc28>
   41a48:	mov	w8, #0x38                  	// #56
   41a4c:	madd	x8, x26, x8, x22
   41a50:	ldr	x8, [x8, #40]
   41a54:	mov	w21, #0x1                   	// #1
   41a58:	cmp	x8, #0x8
   41a5c:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   41a60:	cmp	x8, #0x10
   41a64:	b.eq	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>  // b.none
   41a68:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41a6c:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41a70:	add	x0, x0, #0x7f0
   41a74:	add	x1, x1, #0x75d
   41a78:	mov	w2, #0x5                   	// #5
   41a7c:	mov	x19, x23
   41a80:	b	41a98 <aarch64_match_operands_constraint@@Base+0x2014>
   41a84:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41a88:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41a8c:	add	x0, x0, #0x7f0
   41a90:	add	x1, x1, #0x5c9
   41a94:	mov	w2, #0x5                   	// #5
   41a98:	bl	35ab0 <dcgettext@plt>
   41a9c:	cbz	x23, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41aa0:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41aa4:	ldr	d0, [x8, #1792]
   41aa8:	mov	w21, wzr
   41aac:	str	x0, [x23, #8]
   41ab0:	str	d0, [x23]
   41ab4:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41ab8:	ldrh	w8, [x22, #16]
   41abc:	ubfx	w20, w8, #5, #3
   41ac0:	ldrb	w0, [x22, #4]
   41ac4:	bl	35760 <aarch64_get_qualifier_esize@plt>
   41ac8:	ldr	w8, [x19, #4]
   41acc:	and	w9, w0, #0xff
   41ad0:	mul	w9, w20, w9
   41ad4:	cmp	w9, w8
   41ad8:	b.ne	41ae4 <aarch64_match_operands_constraint@@Base+0x2060>  // b.any
   41adc:	mov	w21, #0x1                   	// #1
   41ae0:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41ae4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41ae8:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41aec:	add	x0, x0, #0x7f0
   41af0:	add	x1, x1, #0x490
   41af4:	mov	w2, #0x5                   	// #5
   41af8:	bl	35ab0 <dcgettext@plt>
   41afc:	cbz	x25, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41b00:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41b04:	ldr	d0, [x8, #1792]
   41b08:	mov	w21, wzr
   41b0c:	str	x0, [x25, #8]
   41b10:	str	d0, [x25]
   41b14:	b	41b68 <aarch64_match_operands_constraint@@Base+0x20e4>
   41b18:	add	x9, x8, #0xff
   41b1c:	cmp	x8, #0x0
   41b20:	csel	x8, x9, x8, lt  // lt = tstop
   41b24:	asr	x8, x8, #8
   41b28:	mov	w9, #0x8                   	// #8
   41b2c:	b	41984 <aarch64_match_operands_constraint@@Base+0x1f00>
   41b30:	cbz	x23, 41b64 <aarch64_match_operands_constraint@@Base+0x20e0>
   41b34:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41b38:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41b3c:	add	x0, x0, #0x7f0
   41b40:	add	x1, x1, #0x4b6
   41b44:	mov	w2, #0x5                   	// #5
   41b48:	bl	35ab0 <dcgettext@plt>
   41b4c:	adrp	x8, 56000 <xexit@@Base+0x284c>
   41b50:	ldr	d0, [x8, #1776]
   41b54:	mov	w21, wzr
   41b58:	str	x0, [x23, #8]
   41b5c:	stp	wzr, w19, [x23, #16]
   41b60:	b	41ab0 <aarch64_match_operands_constraint@@Base+0x202c>
   41b64:	mov	w21, wzr
   41b68:	mov	w0, w21
   41b6c:	ldp	x20, x19, [sp, #96]
   41b70:	ldp	x22, x21, [sp, #80]
   41b74:	ldp	x24, x23, [sp, #64]
   41b78:	ldp	x26, x25, [sp, #48]
   41b7c:	ldp	x28, x27, [sp, #32]
   41b80:	ldp	x29, x30, [sp, #16]
   41b84:	add	sp, sp, #0x70
   41b88:	ret
   41b8c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   41b90:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   41b94:	add	x0, x0, #0x7f0
   41b98:	add	x1, x1, #0x650
   41b9c:	b	418d8 <aarch64_match_operands_constraint@@Base+0x1e54>
   41ba0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ba4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ba8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41bac:	add	x0, x0, #0x1f4
   41bb0:	add	x1, x1, #0x836
   41bb4:	add	x3, x3, #0x22e
   41bb8:	mov	w2, #0x5b3                 	// #1459
   41bbc:	bl	35b90 <__assert_fail@plt>
   41bc0:	adrp	x0, 55000 <xexit@@Base+0x184c>
   41bc4:	adrp	x1, 54000 <xexit@@Base+0x84c>
   41bc8:	adrp	x3, 55000 <xexit@@Base+0x184c>
   41bcc:	add	x0, x0, #0x7df
   41bd0:	add	x1, x1, #0x5b0
   41bd4:	add	x3, x3, #0x7f7
   41bd8:	mov	w2, #0x12e                 	// #302
   41bdc:	bl	35b90 <__assert_fail@plt>
   41be0:	adrp	x0, 56000 <xexit@@Base+0x284c>
   41be4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41be8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41bec:	add	x0, x0, #0xd35
   41bf0:	add	x1, x1, #0x836
   41bf4:	add	x3, x3, #0x22e
   41bf8:	mov	w2, #0xa47                 	// #2631
   41bfc:	bl	35b90 <__assert_fail@plt>
   41c00:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41c04:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41c08:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41c0c:	add	x0, x0, #0x8f3
   41c10:	add	x1, x1, #0x836
   41c14:	add	x3, x3, #0x22e
   41c18:	mov	w2, #0xa06                 	// #2566
   41c1c:	bl	35b90 <__assert_fail@plt>
   41c20:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41c24:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41c28:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41c2c:	add	x0, x0, #0x923
   41c30:	add	x1, x1, #0x836
   41c34:	add	x3, x3, #0x22e
   41c38:	mov	w2, #0xa2e                 	// #2606
   41c3c:	bl	35b90 <__assert_fail@plt>
   41c40:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41c44:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41c48:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41c4c:	add	x0, x0, #0x30a
   41c50:	add	x1, x1, #0x836
   41c54:	add	x3, x3, #0x22e
   41c58:	mov	w2, #0x5cf                 	// #1487
   41c5c:	bl	35b90 <__assert_fail@plt>
   41c60:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41c64:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41c68:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41c6c:	add	x0, x0, #0x5b4
   41c70:	add	x1, x1, #0x836
   41c74:	add	x3, x3, #0x22e
   41c78:	mov	w2, #0x7ea                 	// #2026
   41c7c:	bl	35b90 <__assert_fail@plt>
   41c80:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41c84:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41c88:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41c8c:	add	x0, x0, #0x3a4
   41c90:	add	x1, x1, #0x836
   41c94:	add	x3, x3, #0x22e
   41c98:	mov	w2, #0x5fa                 	// #1530
   41c9c:	bl	35b90 <__assert_fail@plt>
   41ca0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ca4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ca8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41cac:	add	x0, x0, #0x2b7
   41cb0:	add	x1, x1, #0x836
   41cb4:	add	x3, x3, #0x22e
   41cb8:	mov	w2, #0x5bb                 	// #1467
   41cbc:	bl	35b90 <__assert_fail@plt>
   41cc0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41cc4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41cc8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41ccc:	add	x0, x0, #0x4f9
   41cd0:	add	x1, x1, #0x836
   41cd4:	add	x3, x3, #0x22e
   41cd8:	mov	w2, #0x78c                 	// #1932
   41cdc:	bl	35b90 <__assert_fail@plt>
   41ce0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ce4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ce8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41cec:	add	x0, x0, #0x512
   41cf0:	add	x1, x1, #0x836
   41cf4:	add	x3, x3, #0x22e
   41cf8:	mov	w2, #0x78d                 	// #1933
   41cfc:	bl	35b90 <__assert_fail@plt>
   41d00:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41d04:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41d08:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41d0c:	add	x0, x0, #0x5b4
   41d10:	add	x1, x1, #0x836
   41d14:	add	x3, x3, #0x22e
   41d18:	mov	w2, #0x7df                 	// #2015
   41d1c:	bl	35b90 <__assert_fail@plt>
   41d20:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41d24:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41d28:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41d2c:	add	x0, x0, #0x4f8
   41d30:	add	x1, x1, #0x836
   41d34:	add	x3, x3, #0x22e
   41d38:	mov	w2, #0x753                 	// #1875
   41d3c:	bl	35b90 <__assert_fail@plt>
   41d40:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41d44:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41d48:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41d4c:	add	x0, x0, #0x512
   41d50:	add	x1, x1, #0x836
   41d54:	add	x3, x3, #0x22e
   41d58:	mov	w2, #0x754                 	// #1876
   41d5c:	bl	35b90 <__assert_fail@plt>
   41d60:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41d64:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41d68:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41d6c:	add	x0, x0, #0x438
   41d70:	add	x1, x1, #0x836
   41d74:	add	x3, x3, #0x22e
   41d78:	mov	w2, #0x658                 	// #1624
   41d7c:	bl	35b90 <__assert_fail@plt>
   41d80:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41d84:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41d88:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41d8c:	add	x0, x0, #0x99c
   41d90:	add	x1, x1, #0x836
   41d94:	add	x3, x3, #0x22e
   41d98:	mov	w2, #0xa67                 	// #2663
   41d9c:	bl	35b90 <__assert_fail@plt>
   41da0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41da4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41da8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41dac:	add	x0, x0, #0x4f8
   41db0:	add	x1, x1, #0x836
   41db4:	add	x3, x3, #0x22e
   41db8:	mov	w2, #0x728                 	// #1832
   41dbc:	bl	35b90 <__assert_fail@plt>
   41dc0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41dc4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41dc8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41dcc:	add	x0, x0, #0x512
   41dd0:	add	x1, x1, #0x836
   41dd4:	add	x3, x3, #0x22e
   41dd8:	mov	w2, #0x729                 	// #1833
   41ddc:	bl	35b90 <__assert_fail@plt>
   41de0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41de4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41de8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41dec:	add	x0, x0, #0x675
   41df0:	add	x1, x1, #0x836
   41df4:	add	x3, x3, #0x22e
   41df8:	mov	w2, #0x899                 	// #2201
   41dfc:	bl	35b90 <__assert_fail@plt>
   41e00:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41e04:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41e08:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41e0c:	add	x0, x0, #0x4f9
   41e10:	add	x1, x1, #0x836
   41e14:	add	x3, x3, #0x22e
   41e18:	mov	w2, #0x7b5                 	// #1973
   41e1c:	bl	35b90 <__assert_fail@plt>
   41e20:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41e24:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41e28:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41e2c:	add	x0, x0, #0x512
   41e30:	add	x1, x1, #0x836
   41e34:	add	x3, x3, #0x22e
   41e38:	mov	w2, #0x7b6                 	// #1974
   41e3c:	bl	35b90 <__assert_fail@plt>
   41e40:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41e44:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41e48:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41e4c:	add	x0, x0, #0x9be
   41e50:	add	x1, x1, #0x836
   41e54:	add	x3, x3, #0x22e
   41e58:	mov	w2, #0x96d                 	// #2413
   41e5c:	bl	35b90 <__assert_fail@plt>
   41e60:	adrp	x0, 58000 <fields@@Base+0x1e84>
   41e64:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41e68:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41e6c:	add	x0, x0, #0x5dc
   41e70:	add	x1, x1, #0x836
   41e74:	add	x3, x3, #0x22e
   41e78:	mov	w2, #0x913                 	// #2323
   41e7c:	bl	35b90 <__assert_fail@plt>
   41e80:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41e84:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41e88:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41e8c:	add	x0, x0, #0x5fd
   41e90:	add	x1, x1, #0x836
   41e94:	add	x3, x3, #0x22e
   41e98:	mov	w2, #0x81e                 	// #2078
   41e9c:	bl	35b90 <__assert_fail@plt>
   41ea0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ea4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ea8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41eac:	add	x0, x0, #0x824
   41eb0:	add	x1, x1, #0x836
   41eb4:	add	x3, x3, #0x22e
   41eb8:	mov	w2, #0x99f                 	// #2463
   41ebc:	bl	35b90 <__assert_fail@plt>
   41ec0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ec4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ec8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41ecc:	add	x0, x0, #0x8cd
   41ed0:	add	x1, x1, #0x836
   41ed4:	add	x3, x3, #0x22e
   41ed8:	mov	w2, #0x9dd                 	// #2525
   41edc:	bl	35b90 <__assert_fail@plt>
   41ee0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41ee4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41ee8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41eec:	add	x0, x0, #0x824
   41ef0:	add	x1, x1, #0x836
   41ef4:	add	x3, x3, #0x22e
   41ef8:	mov	w2, #0x9b3                 	// #2483
   41efc:	bl	35b90 <__assert_fail@plt>
   41f00:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41f04:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41f08:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41f0c:	add	x0, x0, #0x824
   41f10:	add	x1, x1, #0x836
   41f14:	add	x3, x3, #0x22e
   41f18:	mov	w2, #0x9a9                 	// #2473
   41f1c:	bl	35b90 <__assert_fail@plt>
   41f20:	adrp	x0, 56000 <xexit@@Base+0x284c>
   41f24:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41f28:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41f2c:	add	x0, x0, #0xd41
   41f30:	add	x1, x1, #0x836
   41f34:	add	x3, x3, #0x22e
   41f38:	mov	w2, #0x8d8                 	// #2264
   41f3c:	bl	35b90 <__assert_fail@plt>
   41f40:	adrp	x0, 54000 <xexit@@Base+0x84c>
   41f44:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41f48:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41f4c:	add	x0, x0, #0x8a0
   41f50:	add	x1, x1, #0x836
   41f54:	add	x3, x3, #0x22e
   41f58:	mov	w2, #0x844                 	// #2116
   41f5c:	bl	35b90 <__assert_fail@plt>
   41f60:	adrp	x0, 58000 <fields@@Base+0x1e84>
   41f64:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41f68:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41f6c:	add	x0, x0, #0x5dc
   41f70:	add	x1, x1, #0x836
   41f74:	add	x3, x3, #0x22e
   41f78:	mov	w2, #0x85b                 	// #2139
   41f7c:	bl	35b90 <__assert_fail@plt>
   41f80:	adrp	x0, 54000 <xexit@@Base+0x84c>
   41f84:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41f88:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41f8c:	add	x0, x0, #0x8a0
   41f90:	add	x1, x1, #0x836
   41f94:	add	x3, x3, #0x22e
   41f98:	mov	w2, #0x917                 	// #2327
   41f9c:	bl	35b90 <__assert_fail@plt>
   41fa0:	adrp	x0, 54000 <xexit@@Base+0x84c>
   41fa4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41fa8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41fac:	add	x0, x0, #0x8a0
   41fb0:	add	x1, x1, #0x836
   41fb4:	add	x3, x3, #0x22e
   41fb8:	mov	w2, #0x6b3                 	// #1715
   41fbc:	bl	35b90 <__assert_fail@plt>
   41fc0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41fc4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41fc8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41fcc:	add	x0, x0, #0x4f9
   41fd0:	add	x1, x1, #0x836
   41fd4:	add	x3, x3, #0x22e
   41fd8:	mov	w2, #0x776                 	// #1910
   41fdc:	bl	35b90 <__assert_fail@plt>
   41fe0:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   41fe4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   41fe8:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   41fec:	add	x0, x0, #0x512
   41ff0:	add	x1, x1, #0x836
   41ff4:	add	x3, x3, #0x22e
   41ff8:	mov	w2, #0x777                 	// #1911
   41ffc:	bl	35b90 <__assert_fail@plt>
   42000:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   42004:	adrp	x1, 56000 <xexit@@Base+0x284c>
   42008:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   4200c:	add	x0, x0, #0x53c
   42010:	add	x1, x1, #0x836
   42014:	add	x3, x3, #0x22e
   42018:	mov	w2, #0x778                 	// #1912
   4201c:	bl	35b90 <__assert_fail@plt>
   42020:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   42024:	adrp	x1, 56000 <xexit@@Base+0x284c>
   42028:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   4202c:	add	x0, x0, #0x9be
   42030:	add	x1, x1, #0x836
   42034:	add	x3, x3, #0x22e
   42038:	mov	w2, #0x779                 	// #1913
   4203c:	bl	35b90 <__assert_fail@plt>
   42040:	adrp	x0, 58000 <fields@@Base+0x1e84>
   42044:	adrp	x1, 54000 <xexit@@Base+0x84c>
   42048:	adrp	x3, 54000 <xexit@@Base+0x84c>
   4204c:	add	x0, x0, #0x5dc
   42050:	add	x1, x1, #0x5b0
   42054:	add	x3, x3, #0x6f3
   42058:	mov	w2, #0x200                 	// #512
   4205c:	bl	35b90 <__assert_fail@plt>
   42060:	adrp	x0, 54000 <xexit@@Base+0x84c>
   42064:	adrp	x1, 54000 <xexit@@Base+0x84c>
   42068:	adrp	x3, 54000 <xexit@@Base+0x84c>
   4206c:	add	x0, x0, #0x718
   42070:	add	x1, x1, #0x5b0
   42074:	add	x3, x3, #0x6f3
   42078:	mov	w2, #0x203                 	// #515
   4207c:	bl	35b90 <__assert_fail@plt>

0000000000042080 <aarch64_replace_opcode@@Base>:
   42080:	mov	x8, x0
   42084:	ldr	x0, [x0, #8]
   42088:	mov	x9, xzr
   4208c:	str	x1, [x8, #8]
   42090:	add	x10, x1, #0x20
   42094:	add	x8, x8, #0x18
   42098:	ldr	w11, [x10, x9]
   4209c:	str	w11, [x8]
   420a0:	ldr	w11, [x10, x9]
   420a4:	cbz	w11, 420b8 <aarch64_replace_opcode@@Base+0x38>
   420a8:	add	x9, x9, #0x4
   420ac:	cmp	x9, #0x18
   420b0:	add	x8, x8, #0x38
   420b4:	b.ne	42098 <aarch64_replace_opcode@@Base+0x18>  // b.any
   420b8:	ret

00000000000420bc <aarch64_operand_index@@Base>:
   420bc:	mov	x8, x0
   420c0:	mov	x0, xzr
   420c4:	ldr	w9, [x8, x0, lsl #2]
   420c8:	cmp	w9, w1
   420cc:	b.eq	420e4 <aarch64_operand_index@@Base+0x28>  // b.none
   420d0:	cbz	w9, 420e0 <aarch64_operand_index@@Base+0x24>
   420d4:	add	x0, x0, #0x1
   420d8:	cmp	x0, #0x6
   420dc:	b.ne	420c4 <aarch64_operand_index@@Base+0x8>  // b.any
   420e0:	mov	w0, #0xffffffff            	// #-1
   420e4:	ret

00000000000420e8 <aarch64_print_operand@@Base>:
   420e8:	stp	x29, x30, [sp, #-96]!
   420ec:	stp	x28, x27, [sp, #16]
   420f0:	stp	x26, x25, [sp, #32]
   420f4:	stp	x24, x23, [sp, #48]
   420f8:	stp	x22, x21, [sp, #64]
   420fc:	stp	x20, x19, [sp, #80]
   42100:	mov	x29, sp
   42104:	ldr	x26, [x29, #96]
   42108:	mov	w9, #0x38                  	// #56
   4210c:	mov	x21, x4
   42110:	mov	x8, x2
   42114:	mov	x19, x1
   42118:	mov	x20, x0
   4211c:	smaddl	x2, w5, w9, x4
   42120:	strb	wzr, [x0]
   42124:	cbz	x6, 4212c <aarch64_print_operand@@Base+0x44>
   42128:	str	wzr, [x6]
   4212c:	ldr	w9, [x2]
   42130:	sub	w10, w9, #0x1
   42134:	cmp	w10, #0xce
   42138:	b.hi	43034 <aarch64_print_operand@@Base+0xf4c>  // b.pmore
   4213c:	adrp	x11, 55000 <xexit@@Base+0x184c>
   42140:	add	x11, x11, #0xfc2
   42144:	adr	x12, 42158 <aarch64_print_operand@@Base+0x70>
   42148:	ldrh	w13, [x11, x10, lsl #1]
   4214c:	add	x12, x12, x13, lsl #2
   42150:	sxtw	x25, w5
   42154:	br	x12
   42158:	mov	w8, #0x38                  	// #56
   4215c:	madd	x8, x25, x8, x21
   42160:	ldr	x3, [x8, #16]
   42164:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42168:	add	x2, x2, #0xe30
   4216c:	b	425e4 <aarch64_print_operand@@Base+0x4fc>
   42170:	mov	w8, #0x38                  	// #56
   42174:	madd	x8, x25, x8, x21
   42178:	ldrsw	x8, [x8, #16]
   4217c:	adrp	x9, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42180:	add	x9, x9, #0xdc8
   42184:	add	x8, x9, x8, lsl #3
   42188:	ldr	x3, [x8, #256]
   4218c:	mov	x0, x20
   42190:	mov	x1, x19
   42194:	ldp	x20, x19, [sp, #80]
   42198:	ldp	x22, x21, [sp, #64]
   4219c:	ldp	x24, x23, [sp, #48]
   421a0:	ldp	x26, x25, [sp, #32]
   421a4:	ldp	x28, x27, [sp, #16]
   421a8:	ldp	x29, x30, [sp], #96
   421ac:	b	434d0 <aarch64_print_operand@@Base+0x13e8>
   421b0:	mov	w8, #0x38                  	// #56
   421b4:	madd	x8, x25, x8, x21
   421b8:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   421bc:	ldrb	w9, [x8, #4]
   421c0:	ldr	x10, [x10, #3776]
   421c4:	ldr	w4, [x8, #16]
   421c8:	adrp	x2, 5e000 <fields@@Base+0x7e84>
   421cc:	add	x2, x2, #0x41c
   421d0:	add	x9, x10, x9, lsl #5
   421d4:	ldr	x3, [x9, #16]
   421d8:	mov	x0, x20
   421dc:	mov	x1, x19
   421e0:	ldp	x20, x19, [sp, #80]
   421e4:	ldp	x22, x21, [sp, #64]
   421e8:	ldp	x24, x23, [sp, #48]
   421ec:	ldp	x26, x25, [sp, #32]
   421f0:	ldp	x28, x27, [sp, #16]
   421f4:	ldp	x29, x30, [sp], #96
   421f8:	b	35470 <snprintf@plt>
   421fc:	mov	w8, #0x38                  	// #56
   42200:	madd	x9, x25, x8, x21
   42204:	ldrb	w8, [x9, #4]
   42208:	sub	w10, w8, #0x7
   4220c:	cmp	w10, #0x2
   42210:	b.cs	43058 <aarch64_print_operand@@Base+0xf70>  // b.hs, b.nlast
   42214:	add	x9, x9, #0x10
   42218:	cmp	w8, #0x8
   4221c:	adrp	x8, 7f000 <aarch64_sys_regs_sr@@Base+0x258>
   42220:	ldpsw	x9, x10, [x9]
   42224:	add	x8, x8, #0x1c8
   42228:	cset	w11, eq  // eq = none
   4222c:	add	x8, x8, x11, lsl #8
   42230:	adrp	x11, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42234:	add	x11, x11, #0xdc8
   42238:	add	x9, x11, x9, lsl #3
   4223c:	ldr	x3, [x9, #256]
   42240:	ldr	x4, [x8, x10, lsl #3]
   42244:	b	429c4 <aarch64_print_operand@@Base+0x8dc>
   42248:	mov	w8, #0x38                  	// #56
   4224c:	madd	x8, x25, x8, x21
   42250:	ldr	w9, [x8, #32]
   42254:	sub	w9, w9, #0x5
   42258:	cmp	w9, #0x8
   4225c:	b.hi	43054 <aarch64_print_operand@@Base+0xf6c>  // b.pmore
   42260:	ldrsw	x8, [x8, #16]
   42264:	adrp	x10, 56000 <xexit@@Base+0x284c>
   42268:	add	x10, x10, #0x160
   4226c:	adr	x11, 4227c <aarch64_print_operand@@Base+0x194>
   42270:	ldrh	w12, [x10, x9, lsl #1]
   42274:	add	x11, x11, x12, lsl #2
   42278:	br	x11
   4227c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   42280:	ldr	x9, [x9, #3776]
   42284:	ldr	w10, [x9, #88]
   42288:	cmp	w10, #0x1
   4228c:	b.ne	43098 <aarch64_print_operand@@Base+0xfb0>  // b.any
   42290:	add	x9, x9, #0x40
   42294:	b	42474 <aarch64_print_operand@@Base+0x38c>
   42298:	cmp	w9, #0x9
   4229c:	b.ne	424ac <aarch64_print_operand@@Base+0x3c4>  // b.any
   422a0:	mov	w8, #0x38                  	// #56
   422a4:	madd	x8, x25, x8, x21
   422a8:	ldrb	w8, [x8, #48]
   422ac:	tbnz	w8, #1, 424d8 <aarch64_print_operand@@Base+0x3f0>
   422b0:	b	42ef8 <aarch64_print_operand@@Base+0xe10>
   422b4:	mov	w8, #0x38                  	// #56
   422b8:	madd	x8, x25, x8, x21
   422bc:	ldrb	w8, [x8, #4]
   422c0:	sub	w9, w8, #0x17
   422c4:	cmp	w9, #0x2
   422c8:	b.cs	42614 <aarch64_print_operand@@Base+0x52c>  // b.hs, b.nlast
   422cc:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   422d0:	ldr	x10, [x10, #3776]
   422d4:	mov	w9, #0x38                  	// #56
   422d8:	madd	x9, x25, x9, x21
   422dc:	ldr	w3, [x9, #16]
   422e0:	add	x8, x10, x8, lsl #5
   422e4:	ldr	x4, [x8, #16]
   422e8:	adrp	x2, 56000 <xexit@@Base+0x284c>
   422ec:	add	x2, x2, #0xd7d
   422f0:	b	42594 <aarch64_print_operand@@Base+0x4ac>
   422f4:	mov	w8, #0x38                  	// #56
   422f8:	madd	x9, x25, x8, x21
   422fc:	ldrb	w8, [x9, #4]
   42300:	ldr	w3, [x9, #16]
   42304:	cbz	x8, 4275c <aarch64_print_operand@@Base+0x674>
   42308:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   4230c:	ldr	x9, [x9, #3776]
   42310:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42314:	add	x2, x2, #0xd8f
   42318:	add	x8, x9, x8, lsl #5
   4231c:	b	42590 <aarch64_print_operand@@Base+0x4a8>
   42320:	ldr	x8, [x3, #120]
   42324:	mov	w9, #0x38                  	// #56
   42328:	madd	x9, x25, x9, x21
   4232c:	ldr	x3, [x9, #16]
   42330:	ubfx	x9, x8, #12, #3
   42334:	add	w10, w5, #0x1
   42338:	cmp	x9, x10
   4233c:	b.ne	4234c <aarch64_print_operand@@Base+0x264>  // b.any
   42340:	ubfx	x8, x8, #15, #5
   42344:	cmp	x3, x8
   42348:	b.eq	42ef8 <aarch64_print_operand@@Base+0xe10>  // b.none
   4234c:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42350:	add	x2, x2, #0xe73
   42354:	mov	x0, x20
   42358:	mov	x1, x19
   4235c:	b	42a88 <aarch64_print_operand@@Base+0x9a0>
   42360:	mov	w8, #0x38                  	// #56
   42364:	madd	x8, x25, x8, x21
   42368:	ldr	x8, [x8, #16]
   4236c:	ldr	x3, [x8]
   42370:	b	42520 <aarch64_print_operand@@Base+0x438>
   42374:	mov	w8, #0x38                  	// #56
   42378:	madd	x8, x25, x8, x21
   4237c:	ldr	x4, [x8, #40]
   42380:	ldr	x3, [x8, #16]
   42384:	cbz	x4, 425dc <aarch64_print_operand@@Base+0x4f4>
   42388:	adrp	x2, 56000 <xexit@@Base+0x284c>
   4238c:	add	x2, x2, #0xe35
   42390:	b	43010 <aarch64_print_operand@@Base+0xf28>
   42394:	mov	w8, #0x38                  	// #56
   42398:	madd	x8, x25, x8, x21
   4239c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   423a0:	ldrb	w9, [x8, #4]
   423a4:	ldr	x10, [x10, #3776]
   423a8:	ldr	w3, [x8, #16]
   423ac:	ldr	x5, [x8, #24]
   423b0:	adrp	x2, 56000 <xexit@@Base+0x284c>
   423b4:	add	x9, x10, x9, lsl #5
   423b8:	ldr	x4, [x9, #16]
   423bc:	add	x2, x2, #0xd96
   423c0:	b	42438 <aarch64_print_operand@@Base+0x350>
   423c4:	mov	w8, #0x38                  	// #56
   423c8:	madd	x8, x25, x8, x21
   423cc:	ldrb	w0, [x8, #4]
   423d0:	sub	w8, w0, #0x1
   423d4:	cmp	w8, #0x4
   423d8:	b.cs	430d8 <aarch64_print_operand@@Base+0xff0>  // b.hs, b.nlast
   423dc:	mov	w8, #0x38                  	// #56
   423e0:	madd	x8, x25, x8, x21
   423e4:	ldrsw	x21, [x8, #16]
   423e8:	bl	35760 <aarch64_get_qualifier_esize@plt>
   423ec:	and	w8, w0, #0xff
   423f0:	cmp	w8, #0x4
   423f4:	adrp	x9, 7e000 <aarch64_sys_regs@@Base+0x1438>
   423f8:	cset	w8, ne  // ne = any
   423fc:	add	x9, x9, #0xdc8
   42400:	add	x8, x9, x8, lsl #8
   42404:	ldr	x3, [x8, x21, lsl #3]
   42408:	b	42520 <aarch64_print_operand@@Base+0x438>
   4240c:	mov	w8, #0x38                  	// #56
   42410:	madd	x8, x25, x8, x21
   42414:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   42418:	ldrb	w9, [x8, #4]
   4241c:	ldr	x10, [x10, #3776]
   42420:	ldr	w3, [x8, #16]
   42424:	ldr	x5, [x8, #24]
   42428:	adrp	x2, 56000 <xexit@@Base+0x284c>
   4242c:	add	x9, x10, x9, lsl #5
   42430:	ldr	x4, [x9, #16]
   42434:	add	x2, x2, #0xd64
   42438:	mov	x0, x20
   4243c:	mov	x1, x19
   42440:	ldp	x20, x19, [sp, #80]
   42444:	ldp	x22, x21, [sp, #64]
   42448:	ldp	x24, x23, [sp, #48]
   4244c:	ldp	x26, x25, [sp, #32]
   42450:	ldp	x28, x27, [sp, #16]
   42454:	ldp	x29, x30, [sp], #96
   42458:	b	35470 <snprintf@plt>
   4245c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   42460:	ldr	x9, [x9, #3776]
   42464:	ldr	w10, [x9, #56]
   42468:	cmp	w10, #0x1
   4246c:	b.ne	43098 <aarch64_print_operand@@Base+0xfb0>  // b.any
   42470:	add	x9, x9, #0x20
   42474:	adrp	x10, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42478:	add	x10, x10, #0xdc8
   4247c:	ldrb	w9, [x9]
   42480:	mov	w11, #0x38                  	// #56
   42484:	add	x8, x10, x8, lsl #3
   42488:	ldr	x3, [x8, #256]
   4248c:	madd	x8, x25, x11, x21
   42490:	ldrsw	x8, [x8, #20]
   42494:	cmp	w9, #0x4
   42498:	cset	w9, ne  // ne = any
   4249c:	add	x9, x10, x9, lsl #8
   424a0:	add	x8, x9, x8, lsl #3
   424a4:	ldr	x4, [x8, #512]
   424a8:	b	429c4 <aarch64_print_operand@@Base+0x8dc>
   424ac:	ldr	x8, [x3, #120]
   424b0:	add	w10, w5, #0x1
   424b4:	ubfx	x9, x8, #12, #3
   424b8:	cmp	x9, x10
   424bc:	b.ne	424d8 <aarch64_print_operand@@Base+0x3f0>  // b.any
   424c0:	mov	w9, #0x38                  	// #56
   424c4:	madd	x9, x25, x9, x21
   424c8:	ldr	w9, [x9, #16]
   424cc:	ubfx	w8, w8, #15, #5
   424d0:	cmp	w9, w8
   424d4:	b.eq	42ef8 <aarch64_print_operand@@Base+0xe10>  // b.none
   424d8:	mov	w8, #0x38                  	// #56
   424dc:	madd	x8, x25, x8, x21
   424e0:	ldrb	w0, [x8, #4]
   424e4:	sub	w8, w0, #0x1
   424e8:	cmp	w8, #0x2
   424ec:	b.cs	430b8 <aarch64_print_operand@@Base+0xfd0>  // b.hs, b.nlast
   424f0:	mov	w8, #0x38                  	// #56
   424f4:	madd	x8, x25, x8, x21
   424f8:	ldrsw	x21, [x8, #16]
   424fc:	bl	35760 <aarch64_get_qualifier_esize@plt>
   42500:	and	w8, w0, #0xff
   42504:	cmp	w8, #0x4
   42508:	adrp	x9, 7e000 <aarch64_sys_regs@@Base+0x1438>
   4250c:	cset	w8, ne  // ne = any
   42510:	add	x9, x9, #0xdc8
   42514:	add	x8, x9, x8, lsl #8
   42518:	add	x8, x8, x21, lsl #3
   4251c:	ldr	x3, [x8, #512]
   42520:	adrp	x2, 66000 <fields@@Base+0xfe84>
   42524:	add	x2, x2, #0xbe9
   42528:	b	425e4 <aarch64_print_operand@@Base+0x4fc>
   4252c:	mov	w8, #0x38                  	// #56
   42530:	madd	x8, x25, x8, x21
   42534:	ldrb	w8, [x8, #4]
   42538:	sub	w9, w8, #0x7
   4253c:	cmp	w9, #0x2
   42540:	b.cs	43058 <aarch64_print_operand@@Base+0xf70>  // b.hs, b.nlast
   42544:	mov	w9, #0x38                  	// #56
   42548:	madd	x9, x25, x9, x21
   4254c:	ldrsw	x9, [x9, #16]
   42550:	cmp	w8, #0x8
   42554:	adrp	x10, 7f000 <aarch64_sys_regs_sr@@Base+0x258>
   42558:	cset	w8, eq  // eq = none
   4255c:	add	x10, x10, #0x1c8
   42560:	add	x8, x10, x8, lsl #8
   42564:	ldr	x3, [x8, x9, lsl #3]
   42568:	b	4218c <aarch64_print_operand@@Base+0xa4>
   4256c:	mov	w8, #0x38                  	// #56
   42570:	madd	x8, x25, x8, x21
   42574:	ldrb	w9, [x8, #4]
   42578:	ldr	w3, [x8, #16]
   4257c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42580:	ldr	x8, [x8, #3776]
   42584:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42588:	add	x2, x2, #0xd5d
   4258c:	add	x8, x8, x9, lsl #5
   42590:	ldr	x4, [x8, #16]
   42594:	mov	x0, x20
   42598:	mov	x1, x19
   4259c:	ldp	x20, x19, [sp, #80]
   425a0:	ldp	x22, x21, [sp, #64]
   425a4:	ldp	x24, x23, [sp, #48]
   425a8:	ldp	x26, x25, [sp, #32]
   425ac:	ldp	x28, x27, [sp, #16]
   425b0:	ldp	x29, x30, [sp], #96
   425b4:	b	35470 <snprintf@plt>
   425b8:	mov	w9, #0x38                  	// #56
   425bc:	madd	x9, x25, x9, x21
   425c0:	ldr	x9, [x9, #16]
   425c4:	cbz	x6, 425d0 <aarch64_print_operand@@Base+0x4e8>
   425c8:	mov	w10, #0x1                   	// #1
   425cc:	str	w10, [x6]
   425d0:	add	x3, x9, x8
   425d4:	cbz	x7, 425dc <aarch64_print_operand@@Base+0x4f4>
   425d8:	str	x3, [x7]
   425dc:	adrp	x2, 56000 <xexit@@Base+0x284c>
   425e0:	add	x2, x2, #0xe46
   425e4:	mov	x0, x20
   425e8:	mov	x1, x19
   425ec:	ldp	x20, x19, [sp, #80]
   425f0:	ldp	x22, x21, [sp, #64]
   425f4:	ldp	x24, x23, [sp, #48]
   425f8:	ldp	x26, x25, [sp, #32]
   425fc:	ldp	x28, x27, [sp, #16]
   42600:	ldp	x29, x30, [sp], #96
   42604:	b	35470 <snprintf@plt>
   42608:	adrp	x3, 68000 <fields@@Base+0x11e84>
   4260c:	add	x3, x3, #0x9a0
   42610:	b	428a4 <aarch64_print_operand@@Base+0x7bc>
   42614:	cbnz	w8, 427b4 <aarch64_print_operand@@Base+0x6cc>
   42618:	mov	w8, #0x38                  	// #56
   4261c:	madd	x8, x25, x8, x21
   42620:	ldr	w3, [x8, #16]
   42624:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42628:	add	x2, x2, #0xd79
   4262c:	b	42a80 <aarch64_print_operand@@Base+0x998>
   42630:	mov	w8, #0x38                  	// #56
   42634:	madd	x8, x25, x8, x21
   42638:	ldrsw	x10, [x8, #16]!
   4263c:	adrp	x11, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42640:	add	x11, x11, #0xdc8
   42644:	cmp	w9, #0x5e
   42648:	add	x10, x11, x10, lsl #3
   4264c:	ldr	x3, [x10, #256]
   42650:	b.ne	42a54 <aarch64_print_operand@@Base+0x96c>  // b.any
   42654:	mov	w9, #0x38                  	// #56
   42658:	madd	x9, x25, x9, x21
   4265c:	ldr	w9, [x9, #24]
   42660:	ldr	w4, [x8, #4]
   42664:	cbz	w9, 42ea4 <aarch64_print_operand@@Base+0xdbc>
   42668:	adrp	x2, 56000 <xexit@@Base+0x284c>
   4266c:	add	x2, x2, #0xe86
   42670:	b	421d8 <aarch64_print_operand@@Base+0xf0>
   42674:	ldrb	w0, [x21, #4]
   42678:	bl	35760 <aarch64_get_qualifier_esize@plt>
   4267c:	and	w8, w0, #0xff
   42680:	cmp	w8, #0x8
   42684:	b.eq	42dc0 <aarch64_print_operand@@Base+0xcd8>  // b.none
   42688:	cmp	w8, #0x4
   4268c:	b.eq	42698 <aarch64_print_operand@@Base+0x5b0>  // b.none
   42690:	cmp	w8, #0x2
   42694:	b.ne	430f8 <aarch64_print_operand@@Base+0x1010>  // b.any
   42698:	mov	w8, #0x38                  	// #56
   4269c:	madd	x8, x25, x8, x21
   426a0:	ldr	w8, [x8, #16]
   426a4:	adrp	x2, 56000 <xexit@@Base+0x284c>
   426a8:	add	x2, x2, #0xe6c
   426ac:	lsl	w9, w8, #24
   426b0:	and	w10, w8, #0x7f
   426b4:	and	w9, w9, #0x80000000
   426b8:	ubfx	w8, w8, #6, #1
   426bc:	bfi	w9, w10, #19, #7
   426c0:	bfi	w9, w8, #30, #1
   426c4:	bfi	w9, w8, #26, #1
   426c8:	bfi	w9, w8, #28, #1
   426cc:	bfi	w9, w8, #29, #1
   426d0:	orr	w8, w9, w8, lsl #27
   426d4:	eor	w8, w8, #0x40000000
   426d8:	fmov	s0, w8
   426dc:	b	426f4 <aarch64_print_operand@@Base+0x60c>
   426e0:	mov	w8, #0x38                  	// #56
   426e4:	madd	x8, x25, x8, x21
   426e8:	ldr	s0, [x8, #16]
   426ec:	adrp	x2, 56000 <xexit@@Base+0x284c>
   426f0:	add	x2, x2, #0xda7
   426f4:	fcvt	d0, s0
   426f8:	mov	x0, x20
   426fc:	mov	x1, x19
   42700:	ldp	x20, x19, [sp, #80]
   42704:	ldp	x22, x21, [sp, #64]
   42708:	ldp	x24, x23, [sp, #48]
   4270c:	ldp	x26, x25, [sp, #32]
   42710:	ldp	x28, x27, [sp, #16]
   42714:	ldp	x29, x30, [sp], #96
   42718:	b	35470 <snprintf@plt>
   4271c:	mov	w8, #0x38                  	// #56
   42720:	madd	x9, x25, x8, x21
   42724:	ldrb	w8, [x9, #4]
   42728:	sub	w10, w8, #0x7
   4272c:	cmp	w10, #0x2
   42730:	b.cs	43058 <aarch64_print_operand@@Base+0xf70>  // b.hs, b.nlast
   42734:	add	x9, x9, #0x10
   42738:	ldpsw	x10, x9, [x9]
   4273c:	cmp	w8, #0x8
   42740:	adrp	x8, 7f000 <aarch64_sys_regs_sr@@Base+0x258>
   42744:	add	x8, x8, #0x1c8
   42748:	cset	w11, eq  // eq = none
   4274c:	add	x8, x8, x11, lsl #8
   42750:	ldr	x3, [x8, x10, lsl #3]
   42754:	ldr	x4, [x8, x9, lsl #3]
   42758:	b	429c4 <aarch64_print_operand@@Base+0x8dc>
   4275c:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42760:	add	x2, x2, #0xd8b
   42764:	b	42a80 <aarch64_print_operand@@Base+0x998>
   42768:	mov	w8, #0x38                  	// #56
   4276c:	madd	x9, x25, x8, x21
   42770:	ldr	x5, [x9, #40]
   42774:	ldr	w8, [x9, #32]
   42778:	ldr	x3, [x9, #16]
   4277c:	cmp	x5, #0x0
   42780:	cset	w10, eq  // eq = none
   42784:	cmp	x8, #0x5
   42788:	cset	w9, eq  // eq = none
   4278c:	and	w9, w10, w9
   42790:	tbnz	w9, #0, 425dc <aarch64_print_operand@@Base+0x4f4>
   42794:	cbz	w8, 425dc <aarch64_print_operand@@Base+0x4f4>
   42798:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   4279c:	ldr	x9, [x9, #3904]
   427a0:	lsl	x8, x8, #4
   427a4:	adrp	x2, 56000 <xexit@@Base+0x284c>
   427a8:	add	x2, x2, #0xe4d
   427ac:	ldr	x4, [x9, x8]
   427b0:	b	42fe4 <aarch64_print_operand@@Base+0xefc>
   427b4:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   427b8:	ldr	x10, [x10, #3776]
   427bc:	mov	w9, #0x38                  	// #56
   427c0:	madd	x9, x25, x9, x21
   427c4:	ldr	w3, [x9, #16]
   427c8:	add	x8, x10, x8, lsl #5
   427cc:	ldr	x4, [x8, #16]
   427d0:	adrp	x2, 56000 <xexit@@Base+0x284c>
   427d4:	add	x2, x2, #0xd84
   427d8:	b	42594 <aarch64_print_operand@@Base+0x4ac>
   427dc:	mov	w8, #0x38                  	// #56
   427e0:	madd	x8, x25, x8, x21
   427e4:	ldr	x3, [x8, #16]
   427e8:	adrp	x2, 56000 <xexit@@Base+0x284c>
   427ec:	add	x2, x2, #0xda2
   427f0:	b	425e4 <aarch64_print_operand@@Base+0x4fc>
   427f4:	mov	w8, #0x38                  	// #56
   427f8:	madd	x8, x25, x8, x21
   427fc:	ldr	w3, [x8, #16]
   42800:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42804:	add	x2, x2, #0xd70
   42808:	b	42a80 <aarch64_print_operand@@Base+0x998>
   4280c:	mov	w8, #0x38                  	// #56
   42810:	madd	x24, x25, x8, x21
   42814:	ldr	x8, [x24, #16]!
   42818:	adrp	x2, 66000 <fields@@Base+0xfe84>
   4281c:	add	x2, x2, #0xbe9
   42820:	mov	x0, x20
   42824:	ldr	x3, [x8]
   42828:	mov	x1, x19
   4282c:	bl	35470 <snprintf@plt>
   42830:	adrp	x21, 56000 <xexit@@Base+0x284c>
   42834:	adrp	x22, 66000 <fields@@Base+0xfe84>
   42838:	mov	w25, #0x8                   	// #8
   4283c:	add	x21, x21, #0xe79
   42840:	add	x22, x22, #0x511
   42844:	ldr	x26, [x24]
   42848:	ldr	x23, [x26, x25]
   4284c:	cbz	x23, 42ef8 <aarch64_print_operand@@Base+0xe10>
   42850:	mov	x0, x20
   42854:	bl	35190 <strlen@plt>
   42858:	mov	x8, x0
   4285c:	add	x0, x20, x0
   42860:	cmp	x25, #0x8
   42864:	sub	x1, x19, x8
   42868:	b.ne	42880 <aarch64_print_operand@@Base+0x798>  // b.any
   4286c:	ldr	x3, [x26]
   42870:	mov	x2, x21
   42874:	mov	x4, x23
   42878:	bl	35470 <snprintf@plt>
   4287c:	b	4288c <aarch64_print_operand@@Base+0x7a4>
   42880:	mov	x2, x22
   42884:	mov	x3, x23
   42888:	bl	35470 <snprintf@plt>
   4288c:	add	x25, x25, #0x8
   42890:	cmp	x25, #0x20
   42894:	b.ne	42844 <aarch64_print_operand@@Base+0x75c>  // b.any
   42898:	b	42ef8 <aarch64_print_operand@@Base+0xe10>
   4289c:	adrp	x3, 58000 <fields@@Base+0x1e84>
   428a0:	add	x3, x3, #0x993
   428a4:	mov	x0, x20
   428a8:	mov	x1, x19
   428ac:	ldp	x20, x19, [sp, #80]
   428b0:	ldp	x22, x21, [sp, #64]
   428b4:	ldp	x24, x23, [sp, #48]
   428b8:	ldp	x26, x25, [sp, #32]
   428bc:	ldp	x28, x27, [sp, #16]
   428c0:	ldp	x29, x30, [sp], #96
   428c4:	b	431d8 <aarch64_print_operand@@Base+0x10f0>
   428c8:	mov	w8, #0x38                  	// #56
   428cc:	madd	x8, x25, x8, x21
   428d0:	ldr	x8, [x8, #16]
   428d4:	ldrb	w9, [x8, #9]
   428d8:	tbz	w9, #0, 4236c <aarch64_print_operand@@Base+0x284>
   428dc:	b	42ef8 <aarch64_print_operand@@Base+0xe10>
   428e0:	mov	w8, #0x38                  	// #56
   428e4:	madd	x8, x25, x8, x21
   428e8:	ldr	x4, [x8, #40]
   428ec:	ldr	x3, [x8, #16]
   428f0:	cbz	x4, 42164 <aarch64_print_operand@@Base+0x7c>
   428f4:	adrp	x2, 56000 <xexit@@Base+0x284c>
   428f8:	add	x2, x2, #0xe5d
   428fc:	b	43010 <aarch64_print_operand@@Base+0xf28>
   42900:	ldr	x8, [x3, #120]
   42904:	mov	w9, #0x38                  	// #56
   42908:	madd	x9, x25, x9, x21
   4290c:	ldr	x3, [x9, #16]
   42910:	ubfx	x9, x8, #12, #3
   42914:	add	w10, w5, #0x1
   42918:	cmp	x9, x10
   4291c:	b.ne	4292c <aarch64_print_operand@@Base+0x844>  // b.any
   42920:	ubfx	x8, x8, #15, #5
   42924:	cmp	x3, x8
   42928:	b.eq	42ef8 <aarch64_print_operand@@Base+0xe10>  // b.none
   4292c:	cmp	x3, #0x20
   42930:	b.cs	431b8 <aarch64_print_operand@@Base+0x10d0>  // b.hs, b.nlast
   42934:	sub	x8, x3, #0xe
   42938:	cmp	x8, #0xf
   4293c:	b.cc	42164 <aarch64_print_operand@@Base+0x7c>  // b.lo, b.ul, b.last
   42940:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42944:	ldr	x8, [x8, #3792]
   42948:	b	42974 <aarch64_print_operand@@Base+0x88c>
   4294c:	mov	w8, #0x38                  	// #56
   42950:	madd	x8, x25, x8, x21
   42954:	ldr	x3, [x8, #16]
   42958:	cmp	x3, #0x10
   4295c:	b.cs	43118 <aarch64_print_operand@@Base+0x1030>  // b.hs, b.nlast
   42960:	mov	w8, #0x3f3f                	// #16191
   42964:	lsr	x8, x8, x3
   42968:	tbz	w8, #0, 42164 <aarch64_print_operand@@Base+0x7c>
   4296c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42970:	ldr	x8, [x8, #4056]
   42974:	ldr	x3, [x8, x3, lsl #3]
   42978:	b	42520 <aarch64_print_operand@@Base+0x438>
   4297c:	mov	w8, #0x38                  	// #56
   42980:	madd	x9, x25, x8, x21
   42984:	ldrb	w8, [x9, #4]
   42988:	sub	w10, w8, #0x7
   4298c:	cmp	w10, #0x2
   42990:	b.cs	43058 <aarch64_print_operand@@Base+0xf70>  // b.hs, b.nlast
   42994:	add	x9, x9, #0x10
   42998:	cmp	w8, #0x8
   4299c:	adrp	x8, 7f000 <aarch64_sys_regs_sr@@Base+0x258>
   429a0:	ldpsw	x11, x9, [x9]
   429a4:	add	x8, x8, #0x1c8
   429a8:	cset	w10, eq  // eq = none
   429ac:	add	x8, x8, x10, lsl #8
   429b0:	adrp	x10, 7e000 <aarch64_sys_regs@@Base+0x1438>
   429b4:	add	x10, x10, #0xdc8
   429b8:	ldr	x3, [x8, x11, lsl #3]
   429bc:	add	x8, x10, x9, lsl #3
   429c0:	ldr	x4, [x8, #768]
   429c4:	mov	x0, x20
   429c8:	mov	x1, x19
   429cc:	ldp	x20, x19, [sp, #80]
   429d0:	ldp	x22, x21, [sp, #64]
   429d4:	ldp	x24, x23, [sp, #48]
   429d8:	ldp	x26, x25, [sp, #32]
   429dc:	ldp	x28, x27, [sp, #16]
   429e0:	ldp	x29, x30, [sp], #96
   429e4:	b	433e4 <aarch64_print_operand@@Base+0x12fc>
   429e8:	mov	w9, #0x38                  	// #56
   429ec:	madd	x9, x25, x9, x21
   429f0:	ldr	x9, [x9, #16]
   429f4:	ldr	x8, [x3, #120]
   429f8:	ldr	w3, [x9, #8]
   429fc:	ubfx	x10, x8, #12, #3
   42a00:	add	w9, w5, #0x1
   42a04:	cmp	x10, x9
   42a08:	b.ne	42a18 <aarch64_print_operand@@Base+0x930>  // b.any
   42a0c:	ubfx	w8, w8, #15, #5
   42a10:	cmp	w3, w8
   42a14:	b.eq	42ef8 <aarch64_print_operand@@Base+0xe10>  // b.none
   42a18:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42a1c:	add	x2, x2, #0xe73
   42a20:	b	42a80 <aarch64_print_operand@@Base+0x998>
   42a24:	mov	w8, #0x38                  	// #56
   42a28:	madd	x8, x25, x8, x21
   42a2c:	ldp	w9, w4, [x8, #16]
   42a30:	adrp	x10, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42a34:	sxtw	x9, w9
   42a38:	add	x10, x10, #0xdc8
   42a3c:	add	x8, x10, x9, lsl #3
   42a40:	ldr	x3, [x8, #256]
   42a44:	cbz	w4, 42a54 <aarch64_print_operand@@Base+0x96c>
   42a48:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42a4c:	add	x2, x2, #0xe9f
   42a50:	b	421d8 <aarch64_print_operand@@Base+0xf0>
   42a54:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42a58:	add	x2, x2, #0xe9a
   42a5c:	b	425e4 <aarch64_print_operand@@Base+0x4fc>
   42a60:	mov	w8, #0x38                  	// #56
   42a64:	madd	x8, x25, x8, x21
   42a68:	ldr	x8, [x8, #16]
   42a6c:	ldr	x3, [x8]
   42a70:	cbnz	x3, 42520 <aarch64_print_operand@@Base+0x438>
   42a74:	ldr	w3, [x8, #8]
   42a78:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42a7c:	add	x2, x2, #0xf1b
   42a80:	mov	x0, x20
   42a84:	mov	x1, x19
   42a88:	ldp	x20, x19, [sp, #80]
   42a8c:	ldp	x22, x21, [sp, #64]
   42a90:	ldp	x24, x23, [sp, #48]
   42a94:	ldp	x26, x25, [sp, #32]
   42a98:	ldp	x28, x27, [sp, #16]
   42a9c:	ldp	x29, x30, [sp], #96
   42aa0:	b	35470 <snprintf@plt>
   42aa4:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   42aa8:	ldr	x9, [x9, #3968]
   42aac:	mov	w8, #0x38                  	// #56
   42ab0:	adrp	x24, 56000 <xexit@@Base+0x284c>
   42ab4:	adrp	x22, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   42ab8:	madd	x8, x25, x8, x21
   42abc:	mov	x27, xzr
   42ac0:	mov	x3, xzr
   42ac4:	add	x24, x24, #0xf23
   42ac8:	add	x22, x22, #0x7f0
   42acc:	add	x28, x9, #0x10
   42ad0:	add	x23, x8, #0x10
   42ad4:	ldur	w8, [x28, #-8]
   42ad8:	ldr	w9, [x23]
   42adc:	cmp	w8, w9
   42ae0:	b.ne	42b54 <aarch64_print_operand@@Base+0xa6c>  // b.any
   42ae4:	ldur	w8, [x28, #-4]
   42ae8:	ldr	w9, [x23, #4]
   42aec:	orr	x13, x27, #0x1
   42af0:	and	w10, w9, w8
   42af4:	cmp	w10, w9
   42af8:	cset	w11, eq  // eq = none
   42afc:	cmp	x3, #0x0
   42b00:	cset	w12, eq  // eq = none
   42b04:	cmp	x13, #0x1b
   42b08:	b.eq	42b54 <aarch64_print_operand@@Base+0xa6c>  // b.none
   42b0c:	orr	w11, w12, w11
   42b10:	cbz	w11, 42b54 <aarch64_print_operand@@Base+0xa6c>
   42b14:	cmp	w10, w9
   42b18:	b.eq	42f54 <aarch64_print_operand@@Base+0xe6c>  // b.none
   42b1c:	tbnz	w8, #4, 42b38 <aarch64_print_operand@@Base+0xa50>
   42b20:	tbz	w8, #3, 42b50 <aarch64_print_operand@@Base+0xa68>
   42b24:	adrp	x1, 56000 <xexit@@Base+0x284c>
   42b28:	mov	w2, #0x5                   	// #5
   42b2c:	mov	x0, x22
   42b30:	add	x1, x1, #0xecc
   42b34:	b	42b48 <aarch64_print_operand@@Base+0xa60>
   42b38:	adrp	x1, 56000 <xexit@@Base+0x284c>
   42b3c:	mov	w2, #0x5                   	// #5
   42b40:	mov	x0, x22
   42b44:	add	x1, x1, #0xea9
   42b48:	bl	35ab0 <dcgettext@plt>
   42b4c:	str	x0, [x26]
   42b50:	mov	x3, x24
   42b54:	ldr	x24, [x28], #16
   42b58:	add	x27, x27, #0x1
   42b5c:	cmp	x27, #0x195
   42b60:	b.ne	42ad4 <aarch64_print_operand@@Base+0x9ec>  // b.any
   42b64:	cbnz	x3, 42520 <aarch64_print_operand@@Base+0x438>
   42b68:	mov	w8, #0x38                  	// #56
   42b6c:	madd	x8, x25, x8, x21
   42b70:	ldr	w8, [x8, #16]
   42b74:	mov	x0, x20
   42b78:	mov	x1, x19
   42b7c:	ldp	x20, x19, [sp, #80]
   42b80:	ldp	x22, x21, [sp, #64]
   42b84:	ldp	x24, x23, [sp, #48]
   42b88:	ldp	x26, x25, [sp, #32]
   42b8c:	ldp	x28, x27, [sp, #16]
   42b90:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42b94:	ubfx	w3, w8, #14, #2
   42b98:	ubfx	w4, w8, #11, #3
   42b9c:	ubfx	w5, w8, #7, #4
   42ba0:	ubfx	w6, w8, #3, #4
   42ba4:	and	w7, w8, #0x7
   42ba8:	add	x2, x2, #0xeec
   42bac:	ldp	x29, x30, [sp], #96
   42bb0:	b	35470 <snprintf@plt>
   42bb4:	mov	w8, #0x38                  	// #56
   42bb8:	madd	x8, x25, x8, x21
   42bbc:	ldr	w9, [x8, #16]
   42bc0:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42bc4:	ldr	x8, [x8, #3832]
   42bc8:	cmp	w9, #0x5
   42bcc:	b.eq	4236c <aarch64_print_operand@@Base+0x284>  // b.none
   42bd0:	mov	x11, xzr
   42bd4:	add	x10, x11, #0x10
   42bd8:	cmp	w10, #0x80
   42bdc:	b.eq	43078 <aarch64_print_operand@@Base+0xf90>  // b.none
   42be0:	add	x11, x8, x11
   42be4:	ldr	w11, [x11, #24]
   42be8:	cmp	w11, w9
   42bec:	mov	x11, x10
   42bf0:	b.ne	42bd4 <aarch64_print_operand@@Base+0xaec>  // b.any
   42bf4:	add	x8, x8, x10
   42bf8:	b	4236c <aarch64_print_operand@@Base+0x284>
   42bfc:	ldrb	w0, [x21, #4]
   42c00:	bl	35760 <aarch64_get_qualifier_esize@plt>
   42c04:	and	w8, w0, #0xff
   42c08:	cmp	w8, #0x8
   42c0c:	b.eq	42eb0 <aarch64_print_operand@@Base+0xdc8>  // b.none
   42c10:	cmp	w8, #0x4
   42c14:	b.ne	43138 <aarch64_print_operand@@Base+0x1050>  // b.any
   42c18:	mov	w8, #0x38                  	// #56
   42c1c:	madd	x8, x25, x8, x21
   42c20:	ldr	w3, [x8, #16]
   42c24:	mov	x0, x20
   42c28:	mov	x1, x19
   42c2c:	ldp	x20, x19, [sp, #80]
   42c30:	ldp	x22, x21, [sp, #64]
   42c34:	ldp	x24, x23, [sp, #48]
   42c38:	ldp	x26, x25, [sp, #32]
   42c3c:	ldp	x28, x27, [sp, #16]
   42c40:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42c44:	add	x2, x2, #0xe13
   42c48:	mov	w4, w3
   42c4c:	ldp	x29, x30, [sp], #96
   42c50:	b	35470 <snprintf@plt>
   42c54:	mov	w8, #0x38                  	// #56
   42c58:	madd	x8, x25, x8, x21
   42c5c:	ldrb	w0, [x8, #4]
   42c60:	sub	w8, w0, #0x1
   42c64:	cmp	w8, #0x2
   42c68:	b.cs	43158 <aarch64_print_operand@@Base+0x1070>  // b.hs, b.nlast
   42c6c:	mov	w8, #0x38                  	// #56
   42c70:	madd	x22, x25, x8, x21
   42c74:	ldr	x8, [x22, #40]!
   42c78:	sub	x23, x22, #0x8
   42c7c:	cbnz	x8, 42c8c <aarch64_print_operand@@Base+0xba4>
   42c80:	ldr	w8, [x23]
   42c84:	cmp	w8, #0x5
   42c88:	b.eq	424f0 <aarch64_print_operand@@Base+0x408>  // b.none
   42c8c:	mov	w8, #0x38                  	// #56
   42c90:	madd	x8, x25, x8, x21
   42c94:	ldrsw	x21, [x8, #16]
   42c98:	bl	35760 <aarch64_get_qualifier_esize@plt>
   42c9c:	and	w8, w0, #0xff
   42ca0:	adrp	x9, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42ca4:	cmp	w8, #0x4
   42ca8:	add	x9, x9, #0xdc8
   42cac:	cset	w8, ne  // ne = any
   42cb0:	ldr	w10, [x23]
   42cb4:	add	x8, x9, x8, lsl #8
   42cb8:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   42cbc:	ldr	x9, [x9, #3904]
   42cc0:	add	x8, x8, x21, lsl #3
   42cc4:	lsl	x10, x10, #4
   42cc8:	ldr	x3, [x8, #512]
   42ccc:	ldr	x4, [x9, x10]
   42cd0:	ldr	x5, [x22]
   42cd4:	b	42fdc <aarch64_print_operand@@Base+0xef4>
   42cd8:	sub	w8, w5, #0x1
   42cdc:	cmp	w8, #0x2
   42ce0:	b.cs	43178 <aarch64_print_operand@@Base+0x1090>  // b.hs, b.nlast
   42ce4:	ldr	w9, [x21]
   42ce8:	mov	w8, #0x30                  	// #48
   42cec:	mov	w10, #0x38                  	// #56
   42cf0:	madd	x10, x25, x10, x21
   42cf4:	mul	x11, x9, x8
   42cf8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42cfc:	ldr	x8, [x8, #4032]
   42d00:	ldr	w22, [x10, #32]
   42d04:	ldr	w11, [x8, x11]
   42d08:	cmp	w11, #0x1
   42d0c:	b.ne	42d2c <aarch64_print_operand@@Base+0xc44>  // b.any
   42d10:	mov	w10, #0x30                  	// #48
   42d14:	madd	x9, x9, x10, x8
   42d18:	ldrb	w9, [x9, #16]
   42d1c:	tbz	w9, #4, 42d2c <aarch64_print_operand@@Base+0xc44>
   42d20:	ldr	w9, [x21, #16]
   42d24:	cmp	w9, #0x1f
   42d28:	b.eq	42d68 <aarch64_print_operand@@Base+0xc80>  // b.none
   42d2c:	cmp	w5, #0x2
   42d30:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42d34:	ldr	w9, [x21, #56]
   42d38:	mov	w10, #0x30                  	// #48
   42d3c:	mul	x10, x9, x10
   42d40:	ldr	w10, [x8, x10]
   42d44:	cmp	w10, #0x1
   42d48:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42d4c:	mov	w10, #0x30                  	// #48
   42d50:	madd	x8, x9, x10, x8
   42d54:	ldrb	w8, [x8, #16]
   42d58:	tbz	w8, #4, 42f88 <aarch64_print_operand@@Base+0xea0>
   42d5c:	ldr	w8, [x21, #72]
   42d60:	cmp	w8, #0x1f
   42d64:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42d68:	mov	w8, #0x38                  	// #56
   42d6c:	madd	x8, x25, x8, x21
   42d70:	ldrb	w0, [x8, #4]
   42d74:	cmp	w0, #0x1
   42d78:	b.ne	42f64 <aarch64_print_operand@@Base+0xe7c>  // b.any
   42d7c:	cmp	w22, #0x8
   42d80:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42d84:	ldrb	w8, [x21, #4]
   42d88:	cmp	w8, #0x1
   42d8c:	b.eq	42f74 <aarch64_print_operand@@Base+0xe8c>  // b.none
   42d90:	b	42f88 <aarch64_print_operand@@Base+0xea0>
   42d94:	mov	x0, x20
   42d98:	mov	x1, x19
   42d9c:	ldp	x20, x19, [sp, #80]
   42da0:	ldp	x22, x21, [sp, #64]
   42da4:	ldp	x24, x23, [sp, #48]
   42da8:	ldp	x26, x25, [sp, #32]
   42dac:	ldp	x28, x27, [sp, #16]
   42db0:	adrp	x2, 5f000 <fields@@Base+0x8e84>
   42db4:	add	x2, x2, #0xd87
   42db8:	ldp	x29, x30, [sp], #96
   42dbc:	b	35470 <snprintf@plt>
   42dc0:	mov	w8, #0x38                  	// #56
   42dc4:	madd	x8, x25, x8, x21
   42dc8:	ldr	w8, [x8, #16]
   42dcc:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42dd0:	add	x2, x2, #0xe6c
   42dd4:	lsl	w9, w8, #24
   42dd8:	and	w10, w8, #0x7f
   42ddc:	and	w9, w9, #0x80000000
   42de0:	ubfx	w8, w8, #6, #1
   42de4:	bfi	w9, w10, #16, #7
   42de8:	bfi	w9, w8, #26, #1
   42dec:	bfi	w9, w8, #28, #1
   42df0:	bfi	w9, w8, #29, #1
   42df4:	bfi	w9, w8, #27, #1
   42df8:	orr	w9, w9, w8, lsl #30
   42dfc:	orr	w9, w9, w8, lsl #25
   42e00:	orr	w9, w9, w8, lsl #24
   42e04:	orr	w8, w9, w8, lsl #23
   42e08:	eor	w8, w8, #0x40000000
   42e0c:	lsl	x8, x8, #32
   42e10:	fmov	d0, x8
   42e14:	b	426f8 <aarch64_print_operand@@Base+0x610>
   42e18:	ldr	x8, [x3, #120]
   42e1c:	add	w10, w5, #0x1
   42e20:	ubfx	x9, x8, #12, #3
   42e24:	cmp	x9, x10
   42e28:	b.ne	42e54 <aarch64_print_operand@@Base+0xd6c>  // b.any
   42e2c:	mov	w9, #0x38                  	// #56
   42e30:	madd	x9, x25, x9, x21
   42e34:	ldrb	w9, [x9, #36]
   42e38:	tbnz	w9, #0, 42e54 <aarch64_print_operand@@Base+0xd6c>
   42e3c:	mov	w9, #0x38                  	// #56
   42e40:	madd	x9, x25, x9, x21
   42e44:	ldr	x9, [x9, #16]
   42e48:	ubfx	x8, x8, #15, #5
   42e4c:	cmp	x9, x8
   42e50:	b.eq	42ef8 <aarch64_print_operand@@Base+0xe10>  // b.none
   42e54:	mov	w8, #0x38                  	// #56
   42e58:	madd	x8, x25, x8, x21
   42e5c:	ldr	x3, [x8, #16]
   42e60:	cmp	x3, #0x20
   42e64:	b.cs	43198 <aarch64_print_operand@@Base+0x10b0>  // b.hs, b.nlast
   42e68:	sub	x8, x3, #0xe
   42e6c:	cmp	x8, #0xf
   42e70:	b.cc	42ed4 <aarch64_print_operand@@Base+0xdec>  // b.lo, b.ul, b.last
   42e74:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   42e78:	ldr	x8, [x8, #3792]
   42e7c:	adrp	x2, 66000 <fields@@Base+0xfe84>
   42e80:	add	x2, x2, #0xbe9
   42e84:	ldr	x3, [x8, x3, lsl #3]
   42e88:	b	42edc <aarch64_print_operand@@Base+0xdf4>
   42e8c:	mov	w9, #0x38                  	// #56
   42e90:	madd	x9, x25, x9, x21
   42e94:	ldr	x9, [x9, #16]
   42e98:	and	x8, x8, #0xfffffffffffff000
   42e9c:	cbnz	x6, 425c8 <aarch64_print_operand@@Base+0x4e0>
   42ea0:	b	425d0 <aarch64_print_operand@@Base+0x4e8>
   42ea4:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42ea8:	add	x2, x2, #0xe90
   42eac:	b	421d8 <aarch64_print_operand@@Base+0xf0>
   42eb0:	mov	w8, #0x38                  	// #56
   42eb4:	madd	x8, x25, x8, x21
   42eb8:	ldr	x3, [x8, #16]
   42ebc:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42ec0:	add	x2, x2, #0xe23
   42ec4:	mov	x0, x20
   42ec8:	mov	x1, x19
   42ecc:	mov	x4, x3
   42ed0:	b	43018 <aarch64_print_operand@@Base+0xf30>
   42ed4:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42ed8:	add	x2, x2, #0xe30
   42edc:	mov	x0, x20
   42ee0:	mov	x1, x19
   42ee4:	bl	35470 <snprintf@plt>
   42ee8:	mov	w8, #0x38                  	// #56
   42eec:	madd	x8, x25, x8, x21
   42ef0:	ldrb	w8, [x8, #36]
   42ef4:	tbnz	w8, #0, 42f14 <aarch64_print_operand@@Base+0xe2c>
   42ef8:	ldp	x20, x19, [sp, #80]
   42efc:	ldp	x22, x21, [sp, #64]
   42f00:	ldp	x24, x23, [sp, #48]
   42f04:	ldp	x26, x25, [sp, #32]
   42f08:	ldp	x28, x27, [sp, #16]
   42f0c:	ldp	x29, x30, [sp], #96
   42f10:	ret
   42f14:	mov	x0, x20
   42f18:	bl	35190 <strlen@plt>
   42f1c:	mov	w8, #0x38                  	// #56
   42f20:	madd	x8, x25, x8, x21
   42f24:	ldr	w9, [x8, #32]
   42f28:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   42f2c:	ldr	x10, [x10, #3904]
   42f30:	ldr	x4, [x8, #40]
   42f34:	lsl	x9, x9, #4
   42f38:	add	x8, x20, x0
   42f3c:	ldr	x3, [x10, x9]
   42f40:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42f44:	sub	x1, x19, x0
   42f48:	add	x2, x2, #0xd4c
   42f4c:	mov	x0, x8
   42f50:	b	43018 <aarch64_print_operand@@Base+0xf30>
   42f54:	cbz	x26, 42f5c <aarch64_print_operand@@Base+0xe74>
   42f58:	str	xzr, [x26]
   42f5c:	mov	x3, x24
   42f60:	b	42520 <aarch64_print_operand@@Base+0x438>
   42f64:	cmp	w22, #0x9
   42f68:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42f6c:	cmp	w0, #0x2
   42f70:	b.ne	42f88 <aarch64_print_operand@@Base+0xea0>  // b.any
   42f74:	mov	w8, #0x38                  	// #56
   42f78:	madd	x8, x25, x8, x21
   42f7c:	ldr	x8, [x8, #40]
   42f80:	cbz	x8, 424f0 <aarch64_print_operand@@Base+0x408>
   42f84:	mov	w22, #0x5                   	// #5
   42f88:	mov	w8, #0x38                  	// #56
   42f8c:	madd	x21, x25, x8, x21
   42f90:	ldr	x23, [x21, #40]!
   42f94:	ldurb	w0, [x21, #-36]
   42f98:	ldursw	x24, [x21, #-24]
   42f9c:	bl	35760 <aarch64_get_qualifier_esize@plt>
   42fa0:	and	w8, w0, #0xff
   42fa4:	adrp	x11, 96000 <aarch64_operands@@Base+0x16c38>
   42fa8:	adrp	x9, 7e000 <aarch64_sys_regs@@Base+0x1438>
   42fac:	mov	w10, w22
   42fb0:	ldr	x11, [x11, #3904]
   42fb4:	cmp	w8, #0x4
   42fb8:	add	x9, x9, #0xdc8
   42fbc:	lsl	x8, x10, #4
   42fc0:	cset	w10, ne  // ne = any
   42fc4:	add	x9, x9, x10, lsl #8
   42fc8:	add	x9, x9, x24, lsl #3
   42fcc:	ldr	x3, [x9, #512]
   42fd0:	ldr	x4, [x11, x8]
   42fd4:	cbz	x23, 43008 <aarch64_print_operand@@Base+0xf20>
   42fd8:	ldr	x5, [x21]
   42fdc:	adrp	x2, 56000 <xexit@@Base+0x284c>
   42fe0:	add	x2, x2, #0xd4a
   42fe4:	mov	x0, x20
   42fe8:	mov	x1, x19
   42fec:	ldp	x20, x19, [sp, #80]
   42ff0:	ldp	x22, x21, [sp, #64]
   42ff4:	ldp	x24, x23, [sp, #48]
   42ff8:	ldp	x26, x25, [sp, #32]
   42ffc:	ldp	x28, x27, [sp, #16]
   43000:	ldp	x29, x30, [sp], #96
   43004:	b	35470 <snprintf@plt>
   43008:	adrp	x2, 56000 <xexit@@Base+0x284c>
   4300c:	add	x2, x2, #0xd56
   43010:	mov	x0, x20
   43014:	mov	x1, x19
   43018:	ldp	x20, x19, [sp, #80]
   4301c:	ldp	x22, x21, [sp, #64]
   43020:	ldp	x24, x23, [sp, #48]
   43024:	ldp	x26, x25, [sp, #32]
   43028:	ldp	x28, x27, [sp, #16]
   4302c:	ldp	x29, x30, [sp], #96
   43030:	b	35470 <snprintf@plt>
   43034:	adrp	x0, 58000 <fields@@Base+0x1e84>
   43038:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4303c:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43040:	add	x0, x0, #0x5dc
   43044:	add	x1, x1, #0x836
   43048:	add	x3, x3, #0xc0a
   4304c:	mov	w2, #0xebb                 	// #3771
   43050:	bl	35b90 <__assert_fail@plt>
   43054:	bl	35750 <abort@plt>
   43058:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   4305c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43060:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   43064:	add	x0, x0, #0xd09
   43068:	add	x1, x1, #0x836
   4306c:	add	x3, x3, #0xd50
   43070:	mov	w2, #0xb6e                 	// #2926
   43074:	bl	35b90 <__assert_fail@plt>
   43078:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4307c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43080:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43084:	add	x0, x0, #0xefe
   43088:	add	x1, x1, #0x836
   4308c:	add	x3, x3, #0xc0a
   43090:	mov	w2, #0xe95                 	// #3733
   43094:	bl	35b90 <__assert_fail@plt>
   43098:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4309c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   430a0:	adrp	x3, 56000 <xexit@@Base+0x284c>
   430a4:	add	x0, x0, #0xa5f
   430a8:	add	x1, x1, #0x836
   430ac:	add	x3, x3, #0xa8f
   430b0:	mov	w2, #0x30e                 	// #782
   430b4:	bl	35b90 <__assert_fail@plt>
   430b8:	adrp	x0, 56000 <xexit@@Base+0x284c>
   430bc:	adrp	x1, 56000 <xexit@@Base+0x284c>
   430c0:	adrp	x3, 56000 <xexit@@Base+0x284c>
   430c4:	add	x0, x0, #0xbbb
   430c8:	add	x1, x1, #0x836
   430cc:	add	x3, x3, #0xc0a
   430d0:	mov	w2, #0xc6e                 	// #3182
   430d4:	bl	35b90 <__assert_fail@plt>
   430d8:	adrp	x0, 56000 <xexit@@Base+0x284c>
   430dc:	adrp	x1, 56000 <xexit@@Base+0x284c>
   430e0:	adrp	x3, 56000 <xexit@@Base+0x284c>
   430e4:	add	x0, x0, #0xc91
   430e8:	add	x1, x1, #0x836
   430ec:	add	x3, x3, #0xc0a
   430f0:	mov	w2, #0xc7b                 	// #3195
   430f4:	bl	35b90 <__assert_fail@plt>
   430f8:	adrp	x0, 58000 <fields@@Base+0x1e84>
   430fc:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43100:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43104:	add	x0, x0, #0x5dc
   43108:	add	x1, x1, #0x836
   4310c:	add	x3, x3, #0xc0a
   43110:	mov	w2, #0xdbd                 	// #3517
   43114:	bl	35b90 <__assert_fail@plt>
   43118:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4311c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43120:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43124:	add	x0, x0, #0xde1
   43128:	add	x1, x1, #0x836
   4312c:	add	x3, x3, #0xc0a
   43130:	mov	w2, #0xd66                 	// #3430
   43134:	bl	35b90 <__assert_fail@plt>
   43138:	adrp	x0, 58000 <fields@@Base+0x1e84>
   4313c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43140:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43144:	add	x0, x0, #0x5dc
   43148:	add	x1, x1, #0x836
   4314c:	add	x3, x3, #0xc0a
   43150:	mov	w2, #0xd7a                 	// #3450
   43154:	bl	35b90 <__assert_fail@plt>
   43158:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4315c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43160:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43164:	add	x0, x0, #0xbbb
   43168:	add	x1, x1, #0x836
   4316c:	add	x3, x3, #0xc0a
   43170:	mov	w2, #0xca2                 	// #3234
   43174:	bl	35b90 <__assert_fail@plt>
   43178:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4317c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43180:	adrp	x3, 56000 <xexit@@Base+0x284c>
   43184:	add	x0, x0, #0xd35
   43188:	add	x1, x1, #0x836
   4318c:	add	x3, x3, #0xc0a
   43190:	mov	w2, #0xc82                 	// #3202
   43194:	bl	35b90 <__assert_fail@plt>
   43198:	adrp	x0, 56000 <xexit@@Base+0x284c>
   4319c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   431a0:	adrp	x3, 56000 <xexit@@Base+0x284c>
   431a4:	add	x0, x0, #0xdad
   431a8:	add	x1, x1, #0x836
   431ac:	add	x3, x3, #0xc0a
   431b0:	mov	w2, #0xd56                 	// #3414
   431b4:	bl	35b90 <__assert_fail@plt>
   431b8:	adrp	x0, 56000 <xexit@@Base+0x284c>
   431bc:	adrp	x1, 56000 <xexit@@Base+0x284c>
   431c0:	adrp	x3, 56000 <xexit@@Base+0x284c>
   431c4:	add	x0, x0, #0xdad
   431c8:	add	x1, x1, #0x836
   431cc:	add	x3, x3, #0xc0a
   431d0:	mov	w2, #0xd49                 	// #3401
   431d4:	bl	35b90 <__assert_fail@plt>
   431d8:	sub	sp, sp, #0xa0
   431dc:	stp	x29, x30, [sp, #80]
   431e0:	stp	x26, x25, [sp, #96]
   431e4:	stp	x24, x23, [sp, #112]
   431e8:	stp	x22, x21, [sp, #128]
   431ec:	stp	x20, x19, [sp, #144]
   431f0:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   431f4:	ldrb	w8, [x2, #4]
   431f8:	ldrh	w25, [x2, #16]
   431fc:	ldr	x9, [x9, #3776]
   43200:	mov	x19, x3
   43204:	mov	x21, x1
   43208:	mov	x22, x0
   4320c:	add	x8, x9, x8, lsl #5
   43210:	ldr	x20, [x8, #16]
   43214:	add	x29, sp, #0x50
   43218:	tbnz	w25, #8, 43228 <aarch64_print_operand@@Base+0x1140>
   4321c:	ldr	w8, [x2]
   43220:	cmp	w8, #0x26
   43224:	b.eq	433a4 <aarch64_print_operand@@Base+0x12bc>  // b.none
   43228:	ubfx	w26, w25, #5, #3
   4322c:	sub	w24, w26, #0x1
   43230:	and	w8, w24, #0xffff
   43234:	cmp	w8, #0x4
   43238:	b.cs	433c4 <aarch64_print_operand@@Base+0x12dc>  // b.hs, b.nlast
   4323c:	and	w23, w25, #0x1f
   43240:	tbnz	w25, #8, 4324c <aarch64_print_operand@@Base+0x1164>
   43244:	sturb	wzr, [x29, #-8]
   43248:	b	4328c <aarch64_print_operand@@Base+0x11a4>
   4324c:	ldr	x8, [x2, #24]
   43250:	mov	x9, #0xd70b                	// #55051
   43254:	movk	x9, #0x70a3, lsl #16
   43258:	movk	x9, #0xa3d, lsl #32
   4325c:	movk	x9, #0xa3d7, lsl #48
   43260:	smulh	x9, x8, x9
   43264:	add	x9, x9, x8
   43268:	asr	x10, x9, #6
   4326c:	add	x9, x10, x9, lsr #63
   43270:	mov	w10, #0x64                  	// #100
   43274:	adrp	x2, 56000 <xexit@@Base+0x284c>
   43278:	msub	x3, x9, x10, x8
   4327c:	add	x2, x2, #0xd6a
   43280:	sub	x0, x29, #0x8
   43284:	mov	w1, #0x8                   	// #8
   43288:	bl	35470 <snprintf@plt>
   4328c:	cmp	w26, #0x3
   43290:	b.cc	432f4 <aarch64_print_operand@@Base+0x120c>  // b.lo, b.ul, b.last
   43294:	add	w8, w25, w26
   43298:	sub	w8, w8, #0x1
   4329c:	and	w7, w8, #0x1f
   432a0:	cmp	w7, w23
   432a4:	b.ls	432f4 <aarch64_print_operand@@Base+0x120c>  // b.plast
   432a8:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   432ac:	sub	x8, x29, #0x8
   432b0:	add	x2, x2, #0xc84
   432b4:	str	x8, [sp, #8]
   432b8:	str	x20, [sp]
   432bc:	mov	x0, x22
   432c0:	mov	x1, x21
   432c4:	mov	x3, x19
   432c8:	mov	w4, w23
   432cc:	mov	x5, x20
   432d0:	mov	x6, x19
   432d4:	bl	35470 <snprintf@plt>
   432d8:	ldp	x20, x19, [sp, #144]
   432dc:	ldp	x22, x21, [sp, #128]
   432e0:	ldp	x24, x23, [sp, #112]
   432e4:	ldp	x26, x25, [sp, #96]
   432e8:	ldp	x29, x30, [sp, #80]
   432ec:	add	sp, sp, #0xa0
   432f0:	ret
   432f4:	cmp	w24, #0x3
   432f8:	b.hi	432d8 <aarch64_print_operand@@Base+0x11f0>  // b.pmore
   432fc:	adrp	x10, 56000 <xexit@@Base+0x284c>
   43300:	add	w8, w23, #0x1
   43304:	add	x10, x10, #0x172
   43308:	add	w9, w23, #0x2
   4330c:	and	w7, w8, #0x1f
   43310:	adr	x11, 43324 <aarch64_print_operand@@Base+0x123c>
   43314:	ldrb	w8, [x10, x24]
   43318:	add	x11, x11, x8, lsl #2
   4331c:	and	w8, w9, #0x1f
   43320:	br	x11
   43324:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43328:	add	x2, x2, #0xc98
   4332c:	sub	x6, x29, #0x8
   43330:	mov	x0, x22
   43334:	mov	x1, x21
   43338:	mov	x3, x19
   4333c:	mov	w4, w23
   43340:	mov	x5, x20
   43344:	bl	35470 <snprintf@plt>
   43348:	b	432d8 <aarch64_print_operand@@Base+0x11f0>
   4334c:	sub	x9, x29, #0x8
   43350:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43354:	str	w8, [sp, #16]
   43358:	add	x2, x2, #0xcb9
   4335c:	stp	x20, x9, [sp, #24]
   43360:	str	x19, [sp, #8]
   43364:	b	432b8 <aarch64_print_operand@@Base+0x11d0>
   43368:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   4336c:	sub	x8, x29, #0x8
   43370:	add	x2, x2, #0xca4
   43374:	b	432b4 <aarch64_print_operand@@Base+0x11cc>
   43378:	add	w9, w23, #0x3
   4337c:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43380:	and	w9, w9, #0x1f
   43384:	sub	x10, x29, #0x8
   43388:	add	x2, x2, #0xcd7
   4338c:	stp	x20, x19, [sp, #24]
   43390:	str	w8, [sp, #16]
   43394:	stp	x20, x19, [sp]
   43398:	stp	x20, x10, [sp, #48]
   4339c:	str	w9, [sp, #40]
   433a0:	b	432bc <aarch64_print_operand@@Base+0x11d4>
   433a4:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   433a8:	adrp	x1, 56000 <xexit@@Base+0x284c>
   433ac:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   433b0:	add	x0, x0, #0xbd9
   433b4:	add	x1, x1, #0x836
   433b8:	add	x3, x3, #0xc13
   433bc:	mov	w2, #0xbbf                 	// #3007
   433c0:	bl	35b90 <__assert_fail@plt>
   433c4:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   433c8:	adrp	x1, 56000 <xexit@@Base+0x284c>
   433cc:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   433d0:	add	x0, x0, #0xc65
   433d4:	add	x1, x1, #0x836
   433d8:	add	x3, x3, #0xc13
   433dc:	mov	w2, #0xbc0                 	// #3008
   433e0:	bl	35b90 <__assert_fail@plt>
   433e4:	sub	sp, sp, #0x40
   433e8:	stp	x29, x30, [sp, #16]
   433ec:	stp	x22, x21, [sp, #32]
   433f0:	stp	x20, x19, [sp, #48]
   433f4:	ldr	w8, [x2, #32]
   433f8:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   433fc:	ldr	x10, [x10, #3904]
   43400:	mov	x20, x3
   43404:	lsl	x11, x8, #4
   43408:	ldr	x9, [x2, #40]
   4340c:	ldr	x3, [x10, x11]
   43410:	mov	x19, x4
   43414:	mov	x21, x1
   43418:	mov	x22, x0
   4341c:	add	x29, sp, #0x10
   43420:	cbz	x9, 43494 <aarch64_print_operand@@Base+0x13ac>
   43424:	mov	x8, #0xd70b                	// #55051
   43428:	movk	x8, #0x70a3, lsl #16
   4342c:	movk	x8, #0xa3d, lsl #32
   43430:	movk	x8, #0xa3d7, lsl #48
   43434:	smulh	x8, x9, x8
   43438:	add	x8, x8, x9
   4343c:	asr	x10, x8, #6
   43440:	add	x8, x10, x8, lsr #63
   43444:	mov	w10, #0x64                  	// #100
   43448:	adrp	x2, 56000 <xexit@@Base+0x284c>
   4344c:	msub	x4, x8, x10, x9
   43450:	add	x2, x2, #0xd4c
   43454:	mov	x0, sp
   43458:	mov	w1, #0x10                  	// #16
   4345c:	bl	35470 <snprintf@plt>
   43460:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43464:	add	x2, x2, #0xcfe
   43468:	mov	x5, sp
   4346c:	mov	x0, x22
   43470:	mov	x1, x21
   43474:	mov	x3, x20
   43478:	mov	x4, x19
   4347c:	bl	35470 <snprintf@plt>
   43480:	ldp	x20, x19, [sp, #48]
   43484:	ldp	x22, x21, [sp, #32]
   43488:	ldp	x29, x30, [sp, #16]
   4348c:	add	sp, sp, #0x40
   43490:	ret
   43494:	ldrb	w10, [x2, #4]
   43498:	cmp	w10, #0x5
   4349c:	b.ne	434a8 <aarch64_print_operand@@Base+0x13c0>  // b.any
   434a0:	ldrb	w10, [x2, #36]
   434a4:	tbnz	w10, #1, 43424 <aarch64_print_operand@@Base+0x133c>
   434a8:	cmp	w8, #0x5
   434ac:	b.ne	434b8 <aarch64_print_operand@@Base+0x13d0>  // b.any
   434b0:	strb	wzr, [sp]
   434b4:	b	43460 <aarch64_print_operand@@Base+0x1378>
   434b8:	adrp	x2, 66000 <fields@@Base+0xfe84>
   434bc:	add	x2, x2, #0x511
   434c0:	mov	x0, sp
   434c4:	mov	w1, #0x10                  	// #16
   434c8:	bl	35470 <snprintf@plt>
   434cc:	b	43460 <aarch64_print_operand@@Base+0x1378>
   434d0:	stp	x29, x30, [sp, #-16]!
   434d4:	ldrb	w8, [x2, #28]
   434d8:	mov	x29, sp
   434dc:	tbnz	w8, #1, 434fc <aarch64_print_operand@@Base+0x1414>
   434e0:	ldrb	w8, [x2, #36]
   434e4:	tbnz	w8, #0, 43510 <aarch64_print_operand@@Base+0x1428>
   434e8:	ldr	w4, [x2, #20]
   434ec:	cbz	w4, 4355c <aarch64_print_operand@@Base+0x1474>
   434f0:	adrp	x2, 56000 <xexit@@Base+0x284c>
   434f4:	add	x2, x2, #0xe9f
   434f8:	b	43554 <aarch64_print_operand@@Base+0x146c>
   434fc:	tbnz	w8, #2, 4352c <aarch64_print_operand@@Base+0x1444>
   43500:	ldr	w4, [x2, #20]
   43504:	adrp	x2, 56000 <xexit@@Base+0x284c>
   43508:	add	x2, x2, #0xe90
   4350c:	b	43554 <aarch64_print_operand@@Base+0x146c>
   43510:	ldr	w8, [x2, #32]
   43514:	cmp	w8, #0xf
   43518:	b.ne	4356c <aarch64_print_operand@@Base+0x1484>  // b.any
   4351c:	ldr	w4, [x2, #20]
   43520:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43524:	add	x2, x2, #0xf94
   43528:	b	43554 <aarch64_print_operand@@Base+0x146c>
   4352c:	ldr	w8, [x2]
   43530:	ldr	w4, [x2, #20]
   43534:	cmp	w8, #0x58
   43538:	b.ne	4354c <aarch64_print_operand@@Base+0x1464>  // b.any
   4353c:	cbnz	w4, 4354c <aarch64_print_operand@@Base+0x1464>
   43540:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43544:	add	x2, x2, #0xefd
   43548:	b	43564 <aarch64_print_operand@@Base+0x147c>
   4354c:	adrp	x2, 5a000 <fields@@Base+0x3e84>
   43550:	add	x2, x2, #0xf03
   43554:	ldp	x29, x30, [sp], #16
   43558:	b	35470 <snprintf@plt>
   4355c:	adrp	x2, 56000 <xexit@@Base+0x284c>
   43560:	add	x2, x2, #0xe9a
   43564:	ldp	x29, x30, [sp], #16
   43568:	b	35470 <snprintf@plt>
   4356c:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   43570:	adrp	x1, 56000 <xexit@@Base+0x284c>
   43574:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   43578:	add	x0, x0, #0xf0e
   4357c:	add	x1, x1, #0x836
   43580:	add	x3, x3, #0xf37
   43584:	mov	w2, #0xc05                 	// #3077
   43588:	bl	35b90 <__assert_fail@plt>

000000000004358c <aarch64_sys_reg_deprecated_p@@Base>:
   4358c:	ldr	w8, [x0, #12]
   43590:	and	w0, w8, #0x1
   43594:	ret

0000000000043598 <aarch64_sys_reg_supported_p@@Base>:
   43598:	ldrb	w8, [x1, #12]
   4359c:	tbnz	w8, #1, 435a8 <aarch64_sys_reg_supported_p@@Base+0x10>
   435a0:	mov	w0, #0x1                   	// #1
   435a4:	ret
   435a8:	ldr	w8, [x1, #8]
   435ac:	tbnz	w0, #21, 435bc <aarch64_sys_reg_supported_p@@Base+0x24>
   435b0:	mov	w9, #0xc213                	// #49683
   435b4:	cmp	w8, w9
   435b8:	b.eq	43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>  // b.none
   435bc:	mov	w9, #0xffff3979            	// #-50823
   435c0:	add	w9, w8, w9
   435c4:	ror	w9, w9, #11
   435c8:	sub	w10, w9, #0x3
   435cc:	cmp	w10, #0x4
   435d0:	b.cc	435d8 <aarch64_sys_reg_supported_p@@Base+0x40>  // b.lo, b.ul, b.last
   435d4:	cbnz	w9, 435dc <aarch64_sys_reg_supported_p@@Base+0x44>
   435d8:	tbz	x0, #45, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   435dc:	tbnz	x0, #46, 435ec <aarch64_sys_reg_supported_p@@Base+0x54>
   435e0:	mov	w9, #0xc01c                	// #49180
   435e4:	cmp	w8, w9
   435e8:	b.eq	43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>  // b.none
   435ec:	tbnz	x0, #47, 435fc <aarch64_sys_reg_supported_p@@Base+0x64>
   435f0:	mov	w9, #0xda16                	// #55830
   435f4:	cmp	w8, w9
   435f8:	b.eq	43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>  // b.none
   435fc:	mov	w9, #0xeaff                	// #60159
   43600:	cmp	w8, w9
   43604:	b.gt	4365c <aarch64_sys_reg_supported_p@@Base+0xc4>
   43608:	mov	w9, #0xe8ff                	// #59647
   4360c:	cmp	w8, w9
   43610:	b.le	436a8 <aarch64_sys_reg_supported_p@@Base+0x110>
   43614:	mov	w9, #0xffff1700            	// #-59648
   43618:	add	w9, w8, w9
   4361c:	cmp	w9, #0x3
   43620:	b.cc	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.lo, b.ul, b.last
   43624:	mov	w9, #0xffff1578            	// #-60040
   43628:	add	w9, w8, w9
   4362c:	cmp	w9, #0x8
   43630:	b.hi	43648 <aarch64_sys_reg_supported_p@@Base+0xb0>  // b.pmore
   43634:	mov	w10, #0x1                   	// #1
   43638:	lsl	w9, w10, w9
   4363c:	mov	w10, #0x103                 	// #259
   43640:	tst	w9, w10
   43644:	b.ne	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.any
   43648:	mov	w9, #0xffff1600            	// #-59904
   4364c:	add	w9, w8, w9
   43650:	cmp	w9, #0x2
   43654:	b.cc	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.lo, b.ul, b.last
   43658:	b	437f4 <aarch64_sys_reg_supported_p@@Base+0x25c>
   4365c:	mov	w9, #0xedff                	// #60927
   43660:	cmp	w8, w9
   43664:	b.le	436d8 <aarch64_sys_reg_supported_p@@Base+0x140>
   43668:	mov	w9, #0xffff10f8            	// #-61192
   4366c:	add	w9, w8, w9
   43670:	cmp	w9, #0x12
   43674:	b.hi	43694 <aarch64_sys_reg_supported_p@@Base+0xfc>  // b.pmore
   43678:	mov	w10, #0x1                   	// #1
   4367c:	mov	w11, #0x700                 	// #1792
   43680:	lsl	w10, w10, w9
   43684:	movk	w11, #0x7, lsl #16
   43688:	tst	w10, w11
   4368c:	b.ne	43724 <aarch64_sys_reg_supported_p@@Base+0x18c>  // b.any
   43690:	cbz	w9, 436fc <aarch64_sys_reg_supported_p@@Base+0x164>
   43694:	mov	w9, #0xee00                	// #60928
   43698:	cmp	w8, w9
   4369c:	b.eq	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   436a0:	mov	w9, #0xee81                	// #61057
   436a4:	b	436f4 <aarch64_sys_reg_supported_p@@Base+0x15c>
   436a8:	mov	w9, #0xe717                	// #59159
   436ac:	cmp	w8, w9
   436b0:	b.le	437d8 <aarch64_sys_reg_supported_p@@Base+0x240>
   436b4:	mov	w9, #0xffff18e8            	// #-59160
   436b8:	add	w9, w8, w9
   436bc:	cmp	w9, #0x3
   436c0:	b.cc	437f0 <aarch64_sys_reg_supported_p@@Base+0x258>  // b.lo, b.ul, b.last
   436c4:	mov	w9, #0xe880                	// #59520
   436c8:	cmp	w8, w9
   436cc:	b.eq	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   436d0:	mov	w9, #0xe882                	// #59522
   436d4:	b	436f4 <aarch64_sys_reg_supported_p@@Base+0x15c>
   436d8:	mov	w9, #0xeb00                	// #60160
   436dc:	cmp	w8, w9
   436e0:	b.eq	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   436e4:	mov	w9, #0xed10                	// #60688
   436e8:	cmp	w8, w9
   436ec:	b.eq	436fc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   436f0:	mov	w9, #0xed18                	// #60696
   436f4:	cmp	w8, w9
   436f8:	b.ne	437f4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.any
   436fc:	tbz	w0, #24, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43700:	mov	w9, #0xffff10f0            	// #-61200
   43704:	add	w9, w8, w9
   43708:	cmp	w9, #0xa
   4370c:	b.hi	437f4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.pmore
   43710:	mov	w10, #0x1                   	// #1
   43714:	lsl	w9, w10, w9
   43718:	mov	w10, #0x707                 	// #1799
   4371c:	tst	w9, w10
   43720:	b.eq	437f4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.none
   43724:	tbz	w0, #24, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43728:	mov	w9, #0xc4c7                	// #50375
   4372c:	cmp	w8, w9
   43730:	b.gt	43760 <aarch64_sys_reg_supported_p@@Base+0x1c8>
   43734:	mov	w9, #0xc107                	// #49415
   43738:	cmp	w8, w9
   4373c:	b.gt	4381c <aarch64_sys_reg_supported_p@@Base+0x284>
   43740:	mov	w9, #0xc007                	// #49159
   43744:	cmp	w8, w9
   43748:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   4374c:	mov	w9, #0xc024                	// #49188
   43750:	cmp	w8, w9
   43754:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   43758:	mov	w9, #0xc090                	// #49296
   4375c:	b	43984 <aarch64_sys_reg_supported_p@@Base+0x3ec>
   43760:	mov	w9, #0xc608                	// #50696
   43764:	cmp	w8, w9
   43768:	b.gt	43864 <aarch64_sys_reg_supported_p@@Base+0x2cc>
   4376c:	mov	w9, #0xffff3b38            	// #-50376
   43770:	add	w9, w8, w9
   43774:	cmp	w9, #0xf
   43778:	b.hi	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.pmore
   4377c:	mov	w10, #0x1                   	// #1
   43780:	lsl	w9, w10, w9
   43784:	mov	w10, #0x8bfd                	// #35837
   43788:	tst	w9, w10
   4378c:	b.eq	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.none
   43790:	tbz	w0, #27, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43794:	mov	w9, #0xc107                	// #49415
   43798:	cmp	w8, w9
   4379c:	b.le	43740 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   437a0:	mov	w9, #0xe08f                	// #57487
   437a4:	cmp	w8, w9
   437a8:	b.gt	43968 <aarch64_sys_reg_supported_p@@Base+0x3d0>
   437ac:	mov	w9, #0xffff3ef8            	// #-49416
   437b0:	add	w9, w8, w9
   437b4:	cmp	w9, #0x11
   437b8:	b.hi	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.pmore
   437bc:	mov	w10, #0x1                   	// #1
   437c0:	lsl	w9, w10, w9
   437c4:	mov	w10, #0xf0f                 	// #3855
   437c8:	movk	w10, #0x3, lsl #16
   437cc:	tst	w9, w10
   437d0:	b.ne	438a8 <aarch64_sys_reg_supported_p@@Base+0x310>  // b.any
   437d4:	b	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>
   437d8:	mov	w9, #0xe101                	// #57601
   437dc:	cmp	w8, w9
   437e0:	b.eq	437f0 <aarch64_sys_reg_supported_p@@Base+0x258>  // b.none
   437e4:	mov	w9, #0xe681                	// #59009
   437e8:	cmp	w8, w9
   437ec:	b.ne	437f4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.any
   437f0:	tbz	w0, #24, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   437f4:	mov	w9, #0xc03a                	// #49210
   437f8:	mov	w10, #0xc214                	// #49684
   437fc:	cmp	w8, w9
   43800:	cset	w9, eq  // eq = none
   43804:	cmp	w8, w10
   43808:	cset	w10, eq  // eq = none
   4380c:	tbnz	w0, #5, 43728 <aarch64_sys_reg_supported_p@@Base+0x190>
   43810:	orr	w9, w9, w10
   43814:	tbnz	w9, #0, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43818:	b	43728 <aarch64_sys_reg_supported_p@@Base+0x190>
   4381c:	mov	w9, #0xffff3ef8            	// #-49416
   43820:	add	w9, w8, w9
   43824:	cmp	w9, #0x11
   43828:	b.ls	43890 <aarch64_sys_reg_supported_p@@Base+0x2f8>  // b.plast
   4382c:	mov	w9, #0xffff3d68            	// #-49816
   43830:	add	w9, w8, w9
   43834:	cmp	w9, #0x11
   43838:	b.hi	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.pmore
   4383c:	mov	w10, #0x1                   	// #1
   43840:	lsl	w9, w10, w9
   43844:	mov	w10, #0xf0f                 	// #3855
   43848:	movk	w10, #0x3, lsl #16
   4384c:	tst	w9, w10
   43850:	b.eq	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.none
   43854:	tbz	w0, #26, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43858:	tst	x0, #0x800
   4385c:	cset	w9, eq  // eq = none
   43860:	b	439a8 <aarch64_sys_reg_supported_p@@Base+0x410>
   43864:	mov	w9, #0xe608                	// #58888
   43868:	cmp	w8, w9
   4386c:	b.gt	438d4 <aarch64_sys_reg_supported_p@@Base+0x33c>
   43870:	mov	w9, #0xe292                	// #58002
   43874:	cmp	w8, w9
   43878:	b.gt	438f4 <aarch64_sys_reg_supported_p@@Base+0x35c>
   4387c:	mov	w9, #0xc609                	// #50697
   43880:	cmp	w8, w9
   43884:	b.eq	43910 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   43888:	mov	w9, #0xe090                	// #57488
   4388c:	b	43984 <aarch64_sys_reg_supported_p@@Base+0x3ec>
   43890:	mov	w10, #0x1                   	// #1
   43894:	lsl	w9, w10, w9
   43898:	mov	w10, #0xf0f                 	// #3855
   4389c:	movk	w10, #0x3, lsl #16
   438a0:	tst	w9, w10
   438a4:	b.eq	4382c <aarch64_sys_reg_supported_p@@Base+0x294>  // b.none
   438a8:	tbz	w0, #6, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   438ac:	mov	w9, #0xe08f                	// #57487
   438b0:	cmp	w8, w9
   438b4:	b.le	43740 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   438b8:	mov	w9, #0xe090                	// #57488
   438bc:	cmp	w8, w9
   438c0:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   438c4:	mov	w9, #0xf090                	// #61584
   438c8:	cmp	w8, w9
   438cc:	b.ne	438ec <aarch64_sys_reg_supported_p@@Base+0x354>  // b.any
   438d0:	b	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>
   438d4:	mov	w9, #0xecc7                	// #60615
   438d8:	cmp	w8, w9
   438dc:	b.gt	43958 <aarch64_sys_reg_supported_p@@Base+0x3c0>
   438e0:	mov	w9, #0xe609                	// #58889
   438e4:	cmp	w8, w9
   438e8:	b.eq	43910 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   438ec:	mov	w9, #0xe890                	// #59536
   438f0:	b	43984 <aarch64_sys_reg_supported_p@@Base+0x3ec>
   438f4:	mov	w9, #0xe293                	// #58003
   438f8:	cmp	w8, w9
   438fc:	b.eq	43910 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   43900:	mov	w9, #0xe4c8                	// #58568
   43904:	cmp	w8, w9
   43908:	b.eq	43790 <aarch64_sys_reg_supported_p@@Base+0x1f8>  // b.none
   4390c:	b	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>
   43910:	tbz	w0, #26, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43914:	mov	w9, #0xc4c7                	// #50375
   43918:	cmp	w8, w9
   4391c:	b.le	43b08 <aarch64_sys_reg_supported_p@@Base+0x570>
   43920:	mov	w9, #0xe08f                	// #57487
   43924:	cmp	w8, w9
   43928:	b.le	4376c <aarch64_sys_reg_supported_p@@Base+0x1d4>
   4392c:	mov	w9, #0xe88f                	// #59535
   43930:	cmp	w8, w9
   43934:	b.le	43b60 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   43938:	mov	w9, #0xe890                	// #59536
   4393c:	cmp	w8, w9
   43940:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   43944:	mov	w9, #0xf090                	// #61584
   43948:	cmp	w8, w9
   4394c:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   43950:	mov	w9, #0xecc8                	// #60616
   43954:	b	43904 <aarch64_sys_reg_supported_p@@Base+0x36c>
   43958:	mov	w9, #0xecc8                	// #60616
   4395c:	cmp	w8, w9
   43960:	b.ne	43980 <aarch64_sys_reg_supported_p@@Base+0x3e8>  // b.any
   43964:	b	43790 <aarch64_sys_reg_supported_p@@Base+0x1f8>
   43968:	mov	w9, #0xe090                	// #57488
   4396c:	cmp	w8, w9
   43970:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   43974:	mov	w9, #0xe890                	// #59536
   43978:	cmp	w8, w9
   4397c:	b.eq	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>  // b.none
   43980:	mov	w9, #0xf090                	// #61584
   43984:	cmp	w8, w9
   43988:	b.ne	43990 <aarch64_sys_reg_supported_p@@Base+0x3f8>  // b.any
   4398c:	tbz	w0, #28, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43990:	tst	x0, #0x800
   43994:	cset	w9, eq  // eq = none
   43998:	tbnz	w0, #11, 439a8 <aarch64_sys_reg_supported_p@@Base+0x410>
   4399c:	mov	w10, #0xda15                	// #55829
   439a0:	cmp	w8, w10
   439a4:	b.eq	43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>  // b.none
   439a8:	mov	w10, #0xffff18e0            	// #-59168
   439ac:	add	w10, w8, w10
   439b0:	cmp	w10, #0xa
   439b4:	b.hi	439cc <aarch64_sys_reg_supported_p@@Base+0x434>  // b.pmore
   439b8:	mov	w11, #0x1                   	// #1
   439bc:	lsl	w10, w11, w10
   439c0:	mov	w11, #0x707                 	// #1799
   439c4:	tst	w10, w11
   439c8:	b.ne	43a00 <aarch64_sys_reg_supported_p@@Base+0x468>  // b.any
   439cc:	mov	w10, #0xffff1ef0            	// #-57616
   439d0:	add	w10, w8, w10
   439d4:	cmp	w10, #0x22
   439d8:	b.hi	439f4 <aarch64_sys_reg_supported_p@@Base+0x45c>  // b.pmore
   439dc:	mov	w11, #0x1                   	// #1
   439e0:	lsl	x10, x11, x10
   439e4:	mov	x11, #0x1                   	// #1
   439e8:	movk	x11, #0x5, lsl #32
   439ec:	tst	x10, x11
   439f0:	b.ne	43a00 <aarch64_sys_reg_supported_p@@Base+0x468>  // b.any
   439f4:	mov	w10, #0xe099                	// #57497
   439f8:	cmp	w8, w10
   439fc:	b.ne	43a04 <aarch64_sys_reg_supported_p@@Base+0x46c>  // b.any
   43a00:	tbnz	w9, #0, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43a04:	mov	w10, #0xffff9bfe            	// #-25602
   43a08:	add	w10, w8, w10
   43a0c:	cmp	w10, #0x33
   43a10:	b.ls	43a90 <aarch64_sys_reg_supported_p@@Base+0x4f8>  // b.plast
   43a14:	mov	w10, #0xffffbbf8            	// #-17416
   43a18:	add	w10, w8, w10
   43a1c:	cmp	w10, #0x2f
   43a20:	b.hi	43a3c <aarch64_sys_reg_supported_p@@Base+0x4a4>  // b.pmore
   43a24:	mov	w11, #0x1                   	// #1
   43a28:	lsl	x10, x11, x10
   43a2c:	mov	x11, #0xaaaf                	// #43695
   43a30:	movk	x11, #0xaaaa, lsl #32
   43a34:	tst	x10, x11
   43a38:	b.ne	43ab0 <aarch64_sys_reg_supported_p@@Base+0x518>  // b.any
   43a3c:	mov	w10, #0xffff8bf8            	// #-29704
   43a40:	add	w10, w8, w10
   43a44:	cmp	w10, #0x2d
   43a48:	b.hi	43a64 <aarch64_sys_reg_supported_p@@Base+0x4cc>  // b.pmore
   43a4c:	mov	w11, #0x1                   	// #1
   43a50:	lsl	x10, x11, x10
   43a54:	mov	x11, #0x23                  	// #35
   43a58:	movk	x11, #0x2200, lsl #32
   43a5c:	tst	x10, x11
   43a60:	b.ne	43ab0 <aarch64_sys_reg_supported_p@@Base+0x518>  // b.any
   43a64:	mov	w10, #0xffff8bef            	// #-29713
   43a68:	add	w10, w8, w10
   43a6c:	ror	w10, w10, #2
   43a70:	cmp	w10, #0x7
   43a74:	b.hi	43ab4 <aarch64_sys_reg_supported_p@@Base+0x51c>  // b.pmore
   43a78:	mov	w11, #0x1                   	// #1
   43a7c:	lsl	w10, w11, w10
   43a80:	mov	w11, #0xc3                  	// #195
   43a84:	tst	w10, w11
   43a88:	b.ne	43ab0 <aarch64_sys_reg_supported_p@@Base+0x518>  // b.any
   43a8c:	b	43ab4 <aarch64_sys_reg_supported_p@@Base+0x51c>
   43a90:	mov	w11, #0x1                   	// #1
   43a94:	lsl	x10, x11, x10
   43a98:	mov	x11, #0x9cd1                	// #40145
   43a9c:	movk	x11, #0x4008, lsl #16
   43aa0:	movk	x11, #0x88b7, lsl #32
   43aa4:	movk	x11, #0x8, lsl #48
   43aa8:	tst	x10, x11
   43aac:	b.eq	43a14 <aarch64_sys_reg_supported_p@@Base+0x47c>  // b.none
   43ab0:	tbnz	w9, #0, 43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>
   43ab4:	mov	x9, #0x82000000000         	// #8933531975680
   43ab8:	bics	xzr, x9, x0
   43abc:	b.eq	43ad0 <aarch64_sys_reg_supported_p@@Base+0x538>  // b.none
   43ac0:	and	w9, w8, #0xfffffffe
   43ac4:	mov	w10, #0xd920                	// #55584
   43ac8:	cmp	w9, w10
   43acc:	b.eq	43b58 <aarch64_sys_reg_supported_p@@Base+0x5c0>  // b.none
   43ad0:	mov	w9, #0xc803                	// #51203
   43ad4:	cmp	w8, w9
   43ad8:	b.le	43b18 <aarch64_sys_reg_supported_p@@Base+0x580>
   43adc:	mov	w9, #0xe2af                	// #58031
   43ae0:	cmp	w8, w9
   43ae4:	b.le	43b3c <aarch64_sys_reg_supported_p@@Base+0x5a4>
   43ae8:	mov	w9, #0xe2b0                	// #58032
   43aec:	cmp	w8, w9
   43af0:	b.eq	43b54 <aarch64_sys_reg_supported_p@@Base+0x5bc>  // b.none
   43af4:	mov	w9, #0xf2b0                	// #62128
   43af8:	cmp	w8, w9
   43afc:	b.eq	43b54 <aarch64_sys_reg_supported_p@@Base+0x5bc>  // b.none
   43b00:	mov	w9, #0xeab0                	// #60080
   43b04:	b	43b4c <aarch64_sys_reg_supported_p@@Base+0x5b4>
   43b08:	mov	w9, #0xc107                	// #49415
   43b0c:	cmp	w8, w9
   43b10:	b.gt	437ac <aarch64_sys_reg_supported_p@@Base+0x214>
   43b14:	b	43740 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   43b18:	mov	w9, #0xffff3f7b            	// #-49285
   43b1c:	add	w9, w8, w9
   43b20:	cmp	w9, #0x2
   43b24:	b.cc	43b54 <aarch64_sys_reg_supported_p@@Base+0x5bc>  // b.lo, b.ul, b.last
   43b28:	mov	w9, #0xffff3d50            	// #-49840
   43b2c:	add	w8, w8, w9
   43b30:	cmp	w8, #0x2
   43b34:	b.cc	43b54 <aarch64_sys_reg_supported_p@@Base+0x5bc>  // b.lo, b.ul, b.last
   43b38:	b	435a0 <aarch64_sys_reg_supported_p@@Base+0x8>
   43b3c:	mov	w9, #0xc804                	// #51204
   43b40:	cmp	w8, w9
   43b44:	b.eq	43b54 <aarch64_sys_reg_supported_p@@Base+0x5bc>  // b.none
   43b48:	mov	w9, #0xda17                	// #55831
   43b4c:	cmp	w8, w9
   43b50:	b.ne	435a0 <aarch64_sys_reg_supported_p@@Base+0x8>  // b.any
   43b54:	tbnz	x0, #48, 435a0 <aarch64_sys_reg_supported_p@@Base+0x8>
   43b58:	mov	w0, wzr
   43b5c:	ret
   43b60:	mov	w9, #0xe090                	// #57488
   43b64:	cmp	w8, w9
   43b68:	b.ne	43900 <aarch64_sys_reg_supported_p@@Base+0x368>  // b.any
   43b6c:	b	4398c <aarch64_sys_reg_supported_p@@Base+0x3f4>

0000000000043b70 <aarch64_pstatefield_supported_p@@Base>:
   43b70:	ldrb	w8, [x1, #12]
   43b74:	tbnz	w8, #1, 43b80 <aarch64_pstatefield_supported_p@@Base+0x10>
   43b78:	mov	w0, #0x1                   	// #1
   43b7c:	ret
   43b80:	ldr	w8, [x1, #8]
   43b84:	tbnz	w0, #21, 43b90 <aarch64_pstatefield_supported_p@@Base+0x20>
   43b88:	cmp	w8, #0x4
   43b8c:	b.eq	43bb4 <aarch64_pstatefield_supported_p@@Base+0x44>  // b.none
   43b90:	tbnz	w0, #5, 43b9c <aarch64_pstatefield_supported_p@@Base+0x2c>
   43b94:	cmp	w8, #0x3
   43b98:	b.eq	43bb4 <aarch64_pstatefield_supported_p@@Base+0x44>  // b.none
   43b9c:	tbnz	x0, #47, 43ba8 <aarch64_pstatefield_supported_p@@Base+0x38>
   43ba0:	cmp	w8, #0x19
   43ba4:	b.eq	43bb4 <aarch64_pstatefield_supported_p@@Base+0x44>  // b.none
   43ba8:	tbnz	w0, #11, 43bbc <aarch64_pstatefield_supported_p@@Base+0x4c>
   43bac:	cmp	w8, #0x1a
   43bb0:	b.ne	43bbc <aarch64_pstatefield_supported_p@@Base+0x4c>  // b.any
   43bb4:	mov	w0, wzr
   43bb8:	ret
   43bbc:	cmp	w8, #0x1c
   43bc0:	cset	w8, ne  // ne = any
   43bc4:	ubfx	x9, x0, #48, #1
   43bc8:	orr	w0, w9, w8
   43bcc:	ret

0000000000043bd0 <aarch64_sys_ins_reg_has_xt@@Base>:
   43bd0:	ldr	w8, [x0, #12]
   43bd4:	ubfx	w0, w8, #2, #1
   43bd8:	ret

0000000000043bdc <aarch64_sys_ins_reg_supported_p@@Base>:
   43bdc:	ldrb	w8, [x1, #12]
   43be0:	tbnz	w8, #1, 43bec <aarch64_sys_ins_reg_supported_p@@Base+0x10>
   43be4:	mov	w0, #0x1                   	// #1
   43be8:	ret
   43bec:	ldr	w8, [x1, #8]
   43bf0:	tbnz	w0, #5, 43c00 <aarch64_sys_ins_reg_supported_p@@Base+0x24>
   43bf4:	mov	w9, #0x5be1                	// #23521
   43bf8:	cmp	w8, w9
   43bfc:	b.eq	43cac <aarch64_sys_ins_reg_supported_p@@Base+0xd0>  // b.none
   43c00:	tbnz	x0, #42, 43c10 <aarch64_sys_ins_reg_supported_p@@Base+0x34>
   43c04:	mov	w9, #0x5be9                	// #23529
   43c08:	cmp	w8, w9
   43c0c:	b.eq	43cac <aarch64_sys_ins_reg_supported_p@@Base+0xd0>  // b.none
   43c10:	mov	w9, #0x5bd2                	// #23506
   43c14:	cmp	w8, w9
   43c18:	b.gt	43c68 <aarch64_sys_ins_reg_supported_p@@Base+0x8c>
   43c1c:	mov	w9, #0xffffbc4d            	// #-17331
   43c20:	add	w9, w8, w9
   43c24:	cmp	w9, #0x4
   43c28:	b.cc	43c94 <aarch64_sys_ins_reg_supported_p@@Base+0xb8>  // b.lo, b.ul, b.last
   43c2c:	mov	w9, #0xffffbc2c            	// #-17364
   43c30:	add	w9, w8, w9
   43c34:	cmp	w9, #0x22
   43c38:	b.hi	43c54 <aarch64_sys_ins_reg_supported_p@@Base+0x78>  // b.pmore
   43c3c:	mov	w10, #0x1                   	// #1
   43c40:	lsl	x9, x10, x9
   43c44:	mov	x10, #0x5                   	// #5
   43c48:	movk	x10, #0x5, lsl #32
   43c4c:	tst	x9, x10
   43c50:	b.ne	43c94 <aarch64_sys_ins_reg_supported_p@@Base+0xb8>  // b.any
   43c54:	mov	w9, #0xffffa45d            	// #-23459
   43c58:	add	w9, w8, w9
   43c5c:	cmp	w9, #0x2
   43c60:	b.cc	43c94 <aarch64_sys_ins_reg_supported_p@@Base+0xb8>  // b.lo, b.ul, b.last
   43c64:	b	43c98 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>
   43c68:	mov	w9, #0xffffa42d            	// #-23507
   43c6c:	add	w9, w8, w9
   43c70:	cmp	w9, #0x22
   43c74:	b.hi	43c98 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>  // b.pmore
   43c78:	mov	w10, #0x1                   	// #1
   43c7c:	lsl	x9, x10, x9
   43c80:	mov	x10, #0x5                   	// #5
   43c84:	movk	x10, #0x505, lsl #16
   43c88:	movk	x10, #0x5, lsl #32
   43c8c:	tst	x9, x10
   43c90:	b.eq	43c98 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>  // b.none
   43c94:	tbz	x0, #48, 43cac <aarch64_sys_ins_reg_supported_p@@Base+0xd0>
   43c98:	tbnz	w0, #5, 43cb4 <aarch64_sys_ins_reg_supported_p@@Base+0xd8>
   43c9c:	and	w9, w8, #0xfffffffe
   43ca0:	mov	w10, #0x43c8                	// #17352
   43ca4:	cmp	w9, w10
   43ca8:	b.ne	43cb4 <aarch64_sys_ins_reg_supported_p@@Base+0xd8>  // b.any
   43cac:	mov	w0, wzr
   43cb0:	ret
   43cb4:	mov	w9, #0x5b98                	// #23448
   43cb8:	cmp	w8, w9
   43cbc:	cset	w8, ne  // ne = any
   43cc0:	ubfx	x9, x0, #41, #1
   43cc4:	orr	w0, w9, w8
   43cc8:	ret

0000000000043ccc <init_insn_sequence@@Base>:
   43ccc:	stp	x29, x30, [sp, #-32]!
   43cd0:	stp	x20, x19, [sp, #16]
   43cd4:	mov	x20, x0
   43cd8:	ldr	x0, [x1]
   43cdc:	mov	x19, x1
   43ce0:	mov	x29, sp
   43ce4:	str	wzr, [x1, #24]
   43ce8:	str	wzr, [x1, #8]
   43cec:	cbz	x0, 43cf4 <init_insn_sequence@@Base+0x28>
   43cf0:	bl	35860 <free@plt>
   43cf4:	str	xzr, [x19]
   43cf8:	cbz	x20, 43d20 <init_insn_sequence@@Base+0x54>
   43cfc:	mov	w0, #0x168                 	// #360
   43d00:	bl	35560 <xmalloc@plt>
   43d04:	mov	w2, #0x168                 	// #360
   43d08:	mov	x1, x20
   43d0c:	str	x0, [x19]
   43d10:	bl	35140 <memcpy@plt>
   43d14:	ldr	x8, [x20, #8]
   43d18:	ldr	w8, [x8, #128]
   43d1c:	and	w20, w8, #0x1
   43d20:	ldr	x0, [x19, #16]
   43d24:	cbz	x0, 43d2c <init_insn_sequence@@Base+0x60>
   43d28:	bl	35860 <free@plt>
   43d2c:	str	xzr, [x19, #16]
   43d30:	cbz	w20, 43d5c <init_insn_sequence@@Base+0x90>
   43d34:	mov	w8, #0x168                 	// #360
   43d38:	mul	w20, w20, w8
   43d3c:	mov	x0, x20
   43d40:	bl	35560 <xmalloc@plt>
   43d44:	str	x0, [x19, #16]
   43d48:	mov	x2, x20
   43d4c:	ldp	x20, x19, [sp, #16]
   43d50:	mov	w1, wzr
   43d54:	ldp	x29, x30, [sp], #32
   43d58:	b	35550 <memset@plt>
   43d5c:	ldp	x20, x19, [sp, #16]
   43d60:	ldp	x29, x30, [sp], #32
   43d64:	ret

0000000000043d68 <verify_constraints@@Base>:
   43d68:	sub	sp, sp, #0x80
   43d6c:	stp	x29, x30, [sp, #32]
   43d70:	stp	x28, x27, [sp, #48]
   43d74:	stp	x26, x25, [sp, #64]
   43d78:	stp	x24, x23, [sp, #80]
   43d7c:	stp	x22, x21, [sp, #96]
   43d80:	stp	x20, x19, [sp, #112]
   43d84:	add	x29, sp, #0x20
   43d88:	cbz	x0, 4421c <verify_constraints@@Base+0x4b4>
   43d8c:	ldr	x22, [x0, #8]
   43d90:	mov	x20, x0
   43d94:	cbz	x22, 4423c <verify_constraints@@Base+0x4d4>
   43d98:	ldr	w9, [x22, #128]
   43d9c:	mov	x19, x5
   43da0:	mov	x21, x4
   43da4:	cbz	w9, 43db4 <verify_constraints@@Base+0x4c>
   43da8:	cbz	x19, 4425c <verify_constraints@@Base+0x4f4>
   43dac:	ldr	x8, [x19]
   43db0:	b	43dbc <verify_constraints@@Base+0x54>
   43db4:	ldr	x8, [x19]
   43db8:	cbz	x8, 43e18 <verify_constraints@@Base+0xb0>
   43dbc:	ldr	w10, [x22, #120]
   43dc0:	tbnz	w10, #31, 43e20 <verify_constraints@@Base+0xb8>
   43dc4:	cbz	x8, 43e18 <verify_constraints@@Base+0xb0>
   43dc8:	cbnz	x2, 43e60 <verify_constraints@@Base+0xf8>
   43dcc:	cbnz	w3, 43e60 <verify_constraints@@Base+0xf8>
   43dd0:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   43dd4:	adrp	x1, 58000 <fields@@Base+0x1e84>
   43dd8:	mov	w8, #0x2                   	// #2
   43ddc:	add	x0, x0, #0x7f0
   43de0:	add	x1, x1, #0x528
   43de4:	mov	w2, #0x5                   	// #5
   43de8:	str	w8, [x21]
   43dec:	bl	35ab0 <dcgettext@plt>
   43df0:	str	x0, [x21, #8]
   43df4:	mov	w8, #0xffffffff            	// #-1
   43df8:	mov	w9, #0x1                   	// #1
   43dfc:	mov	x0, xzr
   43e00:	mov	x1, x19
   43e04:	str	w8, [x21, #4]
   43e08:	str	w9, [x21, #28]
   43e0c:	bl	35900 <init_insn_sequence@plt>
   43e10:	mov	w22, #0x4                   	// #4
   43e14:	b	43f30 <verify_constraints@@Base+0x1c8>
   43e18:	mov	w22, wzr
   43e1c:	b	43f30 <verify_constraints@@Base+0x1c8>
   43e20:	cbz	x8, 43e74 <verify_constraints@@Base+0x10c>
   43e24:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   43e28:	adrp	x1, 58000 <fields@@Base+0x1e84>
   43e2c:	mov	w8, #0x2                   	// #2
   43e30:	add	x0, x0, #0x7f0
   43e34:	add	x1, x1, #0x4e2
   43e38:	mov	w2, #0x5                   	// #5
   43e3c:	str	w8, [x21]
   43e40:	bl	35ab0 <dcgettext@plt>
   43e44:	mov	w8, #0xffffffff            	// #-1
   43e48:	mov	w9, #0x1                   	// #1
   43e4c:	mov	w22, #0x4                   	// #4
   43e50:	str	x0, [x21, #8]
   43e54:	str	w8, [x21, #4]
   43e58:	str	w9, [x21, #28]
   43e5c:	b	43e78 <verify_constraints@@Base+0x110>
   43e60:	ldr	x10, [x8, #8]
   43e64:	ldrb	w10, [x10, #128]
   43e68:	tbnz	w10, #0, 43e80 <verify_constraints@@Base+0x118>
   43e6c:	mov	w22, wzr
   43e70:	b	43ef4 <verify_constraints@@Base+0x18c>
   43e74:	mov	w22, wzr
   43e78:	mov	x0, x20
   43e7c:	b	43f28 <verify_constraints@@Base+0x1c0>
   43e80:	ldr	x10, [x22, #24]
   43e84:	cbz	x10, 43ebc <verify_constraints@@Base+0x154>
   43e88:	ldr	w10, [x10]
   43e8c:	mov	w11, #0x10                  	// #16
   43e90:	movk	w11, #0x1000, lsl #16
   43e94:	tst	w10, w11
   43e98:	b.eq	43ebc <verify_constraints@@Base+0x154>  // b.none
   43e9c:	tbnz	w9, #0, 43f54 <verify_constraints@@Base+0x1ec>
   43ea0:	mov	w8, #0x2                   	// #2
   43ea4:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   43ea8:	adrp	x1, 58000 <fields@@Base+0x1e84>
   43eac:	str	w8, [x21]
   43eb0:	add	x0, x0, #0x7f0
   43eb4:	add	x1, x1, #0x578
   43eb8:	b	43ed4 <verify_constraints@@Base+0x16c>
   43ebc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   43ec0:	adrp	x1, 58000 <fields@@Base+0x1e84>
   43ec4:	mov	w8, #0x2                   	// #2
   43ec8:	add	x0, x0, #0x7f0
   43ecc:	add	x1, x1, #0x54f
   43ed0:	str	w8, [x21]
   43ed4:	mov	w2, #0x5                   	// #5
   43ed8:	bl	35ab0 <dcgettext@plt>
   43edc:	mov	w8, #0xffffffff            	// #-1
   43ee0:	mov	w9, #0x1                   	// #1
   43ee4:	str	x0, [x21, #8]
   43ee8:	str	w8, [x21, #4]
   43eec:	str	w9, [x21, #28]
   43ef0:	mov	w22, #0x4                   	// #4
   43ef4:	ldrsw	x8, [x19, #24]
   43ef8:	ldr	x9, [x19, #16]
   43efc:	mov	w2, #0x168                 	// #360
   43f00:	mov	x1, x20
   43f04:	add	w10, w8, #0x1
   43f08:	add	x0, x9, x8, lsl #3
   43f0c:	str	w10, [x19, #24]
   43f10:	bl	35140 <memcpy@plt>
   43f14:	ldr	w8, [x19, #24]
   43f18:	ldr	w9, [x19, #8]
   43f1c:	cmp	w8, w9
   43f20:	b.lt	43f30 <verify_constraints@@Base+0x1c8>  // b.tstop
   43f24:	mov	x0, xzr
   43f28:	mov	x1, x19
   43f2c:	bl	35900 <init_insn_sequence@plt>
   43f30:	mov	w0, w22
   43f34:	ldp	x20, x19, [sp, #112]
   43f38:	ldp	x22, x21, [sp, #96]
   43f3c:	ldp	x24, x23, [sp, #80]
   43f40:	ldp	x26, x25, [sp, #64]
   43f44:	ldp	x28, x27, [sp, #48]
   43f48:	ldp	x29, x30, [sp, #32]
   43f4c:	add	sp, sp, #0x80
   43f50:	ret
   43f54:	ldr	w9, [x8, #24]
   43f58:	cmp	w9, #0xc1
   43f5c:	b.ne	4429c <verify_constraints@@Base+0x534>  // b.any
   43f60:	ldrb	w10, [x8, #28]
   43f64:	ldr	w9, [x8, #80]
   43f68:	str	w10, [sp]
   43f6c:	ldr	w10, [x8, #40]
   43f70:	cmp	w9, #0xa4
   43f74:	stur	w10, [x29, #-8]
   43f78:	b.ne	43f90 <verify_constraints@@Base+0x228>  // b.any
   43f7c:	ldr	w8, [x8, #96]
   43f80:	str	w8, [sp, #4]
   43f84:	mov	w8, #0x1                   	// #1
   43f88:	str	w8, [sp, #8]
   43f8c:	b	43f94 <verify_constraints@@Base+0x22c>
   43f90:	stp	wzr, wzr, [sp, #4]
   43f94:	mov	x0, x22
   43f98:	bl	35260 <aarch64_num_of_operands@plt>
   43f9c:	cmp	w0, #0x1
   43fa0:	b.lt	4427c <verify_constraints@@Base+0x514>  // b.tstop
   43fa4:	mov	x25, xzr
   43fa8:	mov	w28, wzr
   43fac:	mov	w24, wzr
   43fb0:	mov	w26, w0
   43fb4:	add	x23, x20, #0x28
   43fb8:	mov	w8, #0xffffffff            	// #-1
   43fbc:	mov	w27, #0x1                   	// #1
   43fc0:	stp	wzr, wzr, [sp, #12]
   43fc4:	stur	wzr, [x29, #-4]
   43fc8:	stur	w8, [x29, #-12]
   43fcc:	ldur	w9, [x23, #-16]
   43fd0:	ldurb	w0, [x23, #-12]
   43fd4:	ldr	w8, [x23]
   43fd8:	sub	w10, w9, #0xa3
   43fdc:	cmp	w10, #0x29
   43fe0:	b.hi	44014 <verify_constraints@@Base+0x2ac>  // b.pmore
   43fe4:	lsl	x11, x27, x10
   43fe8:	tst	x11, #0xff
   43fec:	b.eq	44000 <verify_constraints@@Base+0x298>  // b.none
   43ff0:	mov	w9, w25
   43ff4:	stur	w25, [x29, #-12]
   43ff8:	stp	w8, w0, [sp, #12]
   43ffc:	b	44054 <verify_constraints@@Base+0x2ec>
   44000:	mov	x11, #0xcc000000            	// #3422552064
   44004:	lsl	x10, x27, x10
   44008:	movk	x11, #0x241, lsl #32
   4400c:	tst	x10, x11
   44010:	b.ne	4402c <verify_constraints@@Base+0x2c4>  // b.any
   44014:	cmp	w9, #0x1c
   44018:	b.hi	44054 <verify_constraints@@Base+0x2ec>  // b.pmore
   4401c:	lsl	w9, w27, w9
   44020:	mov	w10, #0x1b800000            	// #461373440
   44024:	tst	w9, w10
   44028:	b.eq	44054 <verify_constraints@@Base+0x2ec>  // b.none
   4402c:	ldur	w9, [x29, #-8]
   44030:	cmp	w8, w9
   44034:	ldur	w8, [x29, #-4]
   44038:	cinc	w28, w28, eq  // eq = none
   4403c:	csel	w8, w25, w8, eq  // eq = none
   44040:	stur	w8, [x29, #-4]
   44044:	bl	35760 <aarch64_get_qualifier_esize@plt>
   44048:	and	w8, w0, #0xff
   4404c:	cmp	w8, w24, uxtb
   44050:	csel	w24, w0, w24, hi  // hi = pmore
   44054:	add	x25, x25, #0x1
   44058:	cmp	x26, x25
   4405c:	add	x23, x23, #0x38
   44060:	b.ne	43fcc <verify_constraints@@Base+0x264>  // b.any
   44064:	tst	w24, #0xff
   44068:	b.eq	4427c <verify_constraints@@Base+0x514>  // b.none
   4406c:	ldrb	w25, [x20, #28]
   44070:	ldrb	w8, [x22, #128]
   44074:	ldr	w23, [x20, #40]
   44078:	tbnz	w8, #1, 44088 <verify_constraints@@Base+0x320>
   4407c:	mov	w0, w25
   44080:	bl	35760 <aarch64_get_qualifier_esize@plt>
   44084:	mov	w24, w0
   44088:	ldr	w8, [sp, #8]
   4408c:	cbz	w8, 440b8 <verify_constraints@@Base+0x350>
   44090:	ldur	w8, [x29, #-12]
   44094:	tbnz	w8, #31, 44128 <verify_constraints@@Base+0x3c0>
   44098:	ldr	w8, [sp, #16]
   4409c:	and	w8, w8, #0xff
   440a0:	cmp	w8, #0x18
   440a4:	b.ne	44144 <verify_constraints@@Base+0x3dc>  // b.any
   440a8:	ldr	w8, [sp, #4]
   440ac:	ldr	w9, [sp, #12]
   440b0:	cmp	w8, w9
   440b4:	b.ne	441a8 <verify_constraints@@Base+0x440>  // b.any
   440b8:	ldr	w8, [x22, #32]
   440bc:	cbz	w8, 440e0 <verify_constraints@@Base+0x378>
   440c0:	add	x9, x22, #0x24
   440c4:	ldr	w10, [x9]
   440c8:	cbz	w10, 440e0 <verify_constraints@@Base+0x378>
   440cc:	cmp	w10, w8
   440d0:	add	x9, x9, #0x4
   440d4:	b.ne	440c4 <verify_constraints@@Base+0x35c>  // b.any
   440d8:	mov	w8, #0x2                   	// #2
   440dc:	b	440e4 <verify_constraints@@Base+0x37c>
   440e0:	mov	w8, #0x1                   	// #1
   440e4:	cbz	w28, 44160 <verify_constraints@@Base+0x3f8>
   440e8:	ldur	w9, [x29, #-8]
   440ec:	cmp	w9, w23
   440f0:	b.ne	4417c <verify_constraints@@Base+0x414>  // b.any
   440f4:	cmp	w28, w8
   440f8:	b.le	441e0 <verify_constraints@@Base+0x478>
   440fc:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44100:	adrp	x1, 58000 <fields@@Base+0x1e84>
   44104:	mov	w8, #0x2                   	// #2
   44108:	add	x0, x0, #0x7f0
   4410c:	add	x1, x1, #0x701
   44110:	mov	w2, #0x5                   	// #5
   44114:	str	w8, [x21]
   44118:	bl	35ab0 <dcgettext@plt>
   4411c:	ldur	w8, [x29, #-4]
   44120:	str	x0, [x21, #8]
   44124:	b	441d0 <verify_constraints@@Base+0x468>
   44128:	mov	w8, #0x2                   	// #2
   4412c:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44130:	adrp	x1, 58000 <fields@@Base+0x1e84>
   44134:	str	w8, [x21]
   44138:	add	x0, x0, #0x7f0
   4413c:	add	x1, x1, #0x5de
   44140:	b	43ed4 <verify_constraints@@Base+0x16c>
   44144:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44148:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4414c:	mov	w8, #0x2                   	// #2
   44150:	add	x0, x0, #0x7f0
   44154:	add	x1, x1, #0x60e
   44158:	str	w8, [x21]
   4415c:	b	441c0 <verify_constraints@@Base+0x458>
   44160:	mov	w8, #0x2                   	// #2
   44164:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44168:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4416c:	str	w8, [x21]
   44170:	add	x0, x0, #0x7f0
   44174:	add	x1, x1, #0x680
   44178:	b	44194 <verify_constraints@@Base+0x42c>
   4417c:	mov	w8, #0x2                   	// #2
   44180:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44184:	adrp	x1, 58000 <fields@@Base+0x1e84>
   44188:	str	w8, [x21]
   4418c:	add	x0, x0, #0x7f0
   44190:	add	x1, x1, #0x6c7
   44194:	mov	w2, #0x5                   	// #5
   44198:	bl	35ab0 <dcgettext@plt>
   4419c:	str	x0, [x21, #8]
   441a0:	str	wzr, [x21, #4]
   441a4:	b	441d4 <verify_constraints@@Base+0x46c>
   441a8:	mov	w8, #0x2                   	// #2
   441ac:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   441b0:	adrp	x1, 58000 <fields@@Base+0x1e84>
   441b4:	str	w8, [x21]
   441b8:	add	x0, x0, #0x7f0
   441bc:	add	x1, x1, #0x644
   441c0:	mov	w2, #0x5                   	// #5
   441c4:	bl	35ab0 <dcgettext@plt>
   441c8:	str	x0, [x21, #8]
   441cc:	ldur	w8, [x29, #-12]
   441d0:	str	w8, [x21, #4]
   441d4:	mov	w8, #0x1                   	// #1
   441d8:	str	w8, [x21, #28]
   441dc:	b	43ef0 <verify_constraints@@Base+0x188>
   441e0:	ldr	w0, [sp]
   441e4:	mov	w22, wzr
   441e8:	cbz	w0, 43ef4 <verify_constraints@@Base+0x18c>
   441ec:	cbz	w25, 43ef4 <verify_constraints@@Base+0x18c>
   441f0:	bl	35760 <aarch64_get_qualifier_esize@plt>
   441f4:	and	w8, w24, #0xff
   441f8:	cmp	w8, w0, uxtb
   441fc:	b.eq	43e6c <verify_constraints@@Base+0x104>  // b.none
   44200:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   44204:	adrp	x1, 58000 <fields@@Base+0x1e84>
   44208:	mov	w8, #0x2                   	// #2
   4420c:	add	x0, x0, #0x7f0
   44210:	add	x1, x1, #0x736
   44214:	str	w8, [x21]
   44218:	b	44194 <verify_constraints@@Base+0x42c>
   4421c:	adrp	x0, 55000 <xexit@@Base+0x184c>
   44220:	adrp	x1, 56000 <xexit@@Base+0x284c>
   44224:	adrp	x3, 58000 <fields@@Base+0x1e84>
   44228:	add	x0, x0, #0x87b
   4422c:	add	x1, x1, #0x836
   44230:	add	x3, x3, #0x42c
   44234:	mov	w2, #0x12ff                	// #4863
   44238:	bl	35b90 <__assert_fail@plt>
   4423c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   44240:	adrp	x1, 56000 <xexit@@Base+0x284c>
   44244:	adrp	x3, 58000 <fields@@Base+0x1e84>
   44248:	add	x0, x0, #0x4c7
   4424c:	add	x1, x1, #0x836
   44250:	add	x3, x3, #0x42c
   44254:	mov	w2, #0x1300                	// #4864
   44258:	bl	35b90 <__assert_fail@plt>
   4425c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   44260:	adrp	x1, 56000 <xexit@@Base+0x284c>
   44264:	adrp	x3, 58000 <fields@@Base+0x1e84>
   44268:	add	x0, x0, #0x4d4
   4426c:	add	x1, x1, #0x836
   44270:	add	x3, x3, #0x42c
   44274:	mov	w2, #0x1306                	// #4870
   44278:	bl	35b90 <__assert_fail@plt>
   4427c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   44280:	adrp	x1, 56000 <xexit@@Base+0x284c>
   44284:	adrp	x3, 58000 <fields@@Base+0x1e84>
   44288:	add	x0, x0, #0x5cb
   4428c:	add	x1, x1, #0x836
   44290:	add	x3, x3, #0x42c
   44294:	mov	w2, #0x138b                	// #5003
   44298:	bl	35b90 <__assert_fail@plt>
   4429c:	adrp	x0, 58000 <fields@@Base+0x1e84>
   442a0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   442a4:	adrp	x3, 58000 <fields@@Base+0x1e84>
   442a8:	add	x0, x0, #0x5a6
   442ac:	add	x1, x1, #0x836
   442b0:	add	x3, x3, #0x42c
   442b4:	mov	w2, #0x1352                	// #4946
   442b8:	bl	35b90 <__assert_fail@plt>

00000000000442bc <aarch64_sve_dupm_mov_immediate_p@@Base>:
   442bc:	lsl	w8, w1, #2
   442c0:	mov	x9, #0xffffffffffffffff    	// #-1
   442c4:	lsl	x9, x9, x8
   442c8:	lsl	x8, x9, x8
   442cc:	tst	x8, x0
   442d0:	b.eq	442e8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   442d4:	orr	x8, x8, x0
   442d8:	cmp	x8, x0
   442dc:	b.eq	442e8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   442e0:	mov	w0, wzr
   442e4:	ret
   442e8:	cmp	w1, #0x5
   442ec:	b.ge	44304 <aarch64_sve_dupm_mov_immediate_p@@Base+0x48>  // b.tcont
   442f0:	cmp	w1, #0x3
   442f4:	b.ge	44310 <aarch64_sve_dupm_mov_immediate_p@@Base+0x54>  // b.tcont
   442f8:	cmp	w1, #0x1
   442fc:	b.eq	442e0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x24>  // b.none
   44300:	b	44324 <aarch64_sve_dupm_mov_immediate_p@@Base+0x68>
   44304:	lsr	x8, x0, #32
   44308:	cmp	w0, w8
   4430c:	b.ne	44334 <aarch64_sve_dupm_mov_immediate_p@@Base+0x78>  // b.any
   44310:	eor	w8, w0, w0, lsr #16
   44314:	tst	x8, #0xffff
   44318:	b.eq	44324 <aarch64_sve_dupm_mov_immediate_p@@Base+0x68>  // b.none
   4431c:	sxtw	x0, w0
   44320:	b	44334 <aarch64_sve_dupm_mov_immediate_p@@Base+0x78>
   44324:	eor	w8, w0, w0, lsr #8
   44328:	tst	x8, #0xff
   4432c:	b.eq	442e0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x24>  // b.none
   44330:	sxth	x0, w0
   44334:	add	x8, x0, #0xff
   44338:	cmp	x0, #0x0
   4433c:	csel	x8, x8, x0, lt  // lt = tstop
   44340:	asr	x8, x8, #8
   44344:	tst	x0, #0xff
   44348:	csel	x8, x8, x0, eq  // eq = none
   4434c:	cmp	x8, w8, sxtb
   44350:	cset	w0, ne  // ne = any
   44354:	ret
   44358:	stp	x29, x30, [sp, #-16]!
   4435c:	ldr	x9, [x0, #8]
   44360:	mov	x29, sp
   44364:	cbz	x9, 443ac <aarch64_sve_dupm_mov_immediate_p@@Base+0xf0>
   44368:	ldr	w9, [x9, #40]
   4436c:	cmp	w9, #0x21
   44370:	b.ne	443cc <aarch64_sve_dupm_mov_immediate_p@@Base+0x110>  // b.any
   44374:	mov	x8, x0
   44378:	mov	w0, w1
   4437c:	cbz	w3, 44384 <aarch64_sve_dupm_mov_immediate_p@@Base+0xc8>
   44380:	ldr	w0, [x8]
   44384:	cbz	w0, 443ec <aarch64_sve_dupm_mov_immediate_p@@Base+0x130>
   44388:	mov	w2, #0x2                   	// #2
   4438c:	mov	w3, #0x7d                  	// #125
   44390:	mov	w4, #0x3e                  	// #62
   44394:	mov	w1, wzr
   44398:	bl	35480 <extract_fields@plt>
   4439c:	cmp	w0, #0x3
   443a0:	cset	w0, eq  // eq = none
   443a4:	ldp	x29, x30, [sp], #16
   443a8:	ret
   443ac:	adrp	x0, 58000 <fields@@Base+0x1e84>
   443b0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   443b4:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   443b8:	add	x0, x0, #0x4c7
   443bc:	add	x1, x1, #0x836
   443c0:	add	x3, x3, #0xfa6
   443c4:	mov	w2, #0x12b7                	// #4791
   443c8:	bl	35b90 <__assert_fail@plt>
   443cc:	adrp	x0, 5b000 <fields@@Base+0x4e84>
   443d0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   443d4:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   443d8:	add	x0, x0, #0x3d
   443dc:	add	x1, x1, #0x836
   443e0:	add	x3, x3, #0xfa6
   443e4:	mov	w2, #0x12b8                	// #4792
   443e8:	bl	35b90 <__assert_fail@plt>
   443ec:	adrp	x0, 55000 <xexit@@Base+0x184c>
   443f0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   443f4:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   443f8:	add	x0, x0, #0x9bd
   443fc:	add	x1, x1, #0x836
   44400:	add	x3, x3, #0xfa6
   44404:	mov	w2, #0x12ba                	// #4794
   44408:	bl	35b90 <__assert_fail@plt>
   4440c:	and	w8, w1, #0x1f
   44410:	ubfx	w9, w1, #10, #5
   44414:	tbz	w1, #23, 44444 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>
   44418:	ubfx	w12, w1, #5, #5
   4441c:	cmp	w8, w12
   44420:	cset	w10, ne  // ne = any
   44424:	cmp	w9, w12
   44428:	cset	w11, ne  // ne = any
   4442c:	cmp	w12, #0x1f
   44430:	b.eq	44444 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>  // b.none
   44434:	and	w10, w11, w10
   44438:	cbnz	w10, 44444 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>
   4443c:	mov	w0, #0x1                   	// #1
   44440:	ret
   44444:	cmp	w8, w9
   44448:	cset	w8, eq  // eq = none
   4444c:	and	w0, w8, w1, lsr #22
   44450:	ret
   44454:	stp	x29, x30, [sp, #-16]!
   44458:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   4445c:	ldr	x9, [x9, #3776]
   44460:	and	x8, x0, #0xff
   44464:	mov	x29, sp
   44468:	add	x10, x9, x8, lsl #5
   4446c:	ldr	w10, [x10, #24]
   44470:	cmp	w10, #0x2
   44474:	b.ne	44488 <aarch64_sve_dupm_mov_immediate_p@@Base+0x1cc>  // b.any
   44478:	lsl	x8, x8, #5
   4447c:	ldr	w0, [x9, x8]
   44480:	ldp	x29, x30, [sp], #16
   44484:	ret
   44488:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   4448c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   44490:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   44494:	add	x0, x0, #0xa42
   44498:	add	x1, x1, #0x836
   4449c:	add	x3, x3, #0xa7c
   444a0:	mov	w2, #0x323                 	// #803
   444a4:	bl	35b90 <__assert_fail@plt>
   444a8:	stp	x29, x30, [sp, #-16]!
   444ac:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   444b0:	ldr	x9, [x9, #3776]
   444b4:	and	x8, x0, #0xff
   444b8:	mov	x29, sp
   444bc:	add	x8, x9, x8, lsl #5
   444c0:	ldr	w9, [x8, #24]
   444c4:	cmp	w9, #0x2
   444c8:	b.ne	444d8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x21c>  // b.any
   444cc:	ldr	w0, [x8, #4]
   444d0:	ldp	x29, x30, [sp], #16
   444d4:	ret
   444d8:	adrp	x0, 5a000 <fields@@Base+0x3e84>
   444dc:	adrp	x1, 56000 <xexit@@Base+0x284c>
   444e0:	adrp	x3, 5a000 <fields@@Base+0x3e84>
   444e4:	add	x0, x0, #0xa42
   444e8:	add	x1, x1, #0x836
   444ec:	add	x3, x3, #0xaaa
   444f0:	mov	w2, #0x32a                 	// #810
   444f4:	bl	35b90 <__assert_fail@plt>

00000000000444f8 <aarch64_find_real_opcode@@Base>:
   444f8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   444fc:	ldr	x8, [x8, #3848]
   44500:	mov	w10, #0x8e39                	// #36409
   44504:	movk	w10, #0x38e3, lsl #16
   44508:	sub	x9, x0, x8
   4450c:	lsr	x9, x9, #4
   44510:	mul	w9, w9, w10
   44514:	cmp	w9, #0x3dd
   44518:	mov	x0, xzr
   4451c:	b.le	44554 <aarch64_find_real_opcode@@Base+0x5c>
   44520:	cmp	w9, #0x71b
   44524:	b.gt	44620 <aarch64_find_real_opcode@@Base+0x128>
   44528:	sub	w10, w9, #0x3de
   4452c:	cmp	w10, #0x1b1
   44530:	b.hi	44698 <aarch64_find_real_opcode@@Base+0x1a0>  // b.pmore
   44534:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   44538:	add	x9, x9, #0x176
   4453c:	adr	x11, 4454c <aarch64_find_real_opcode@@Base+0x54>
   44540:	ldrh	w12, [x9, x10, lsl #1]
   44544:	add	x11, x11, x12, lsl #2
   44548:	br	x11
   4454c:	mov	w9, #0x4a9                 	// #1193
   44550:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44554:	cmp	w9, #0x269
   44558:	b.le	44594 <aarch64_find_real_opcode@@Base+0x9c>
   4455c:	sub	w10, w9, #0x26a
   44560:	cmp	w10, #0x34
   44564:	b.ls	445cc <aarch64_find_real_opcode@@Base+0xd4>  // b.plast
   44568:	sub	w10, w9, #0x2c9
   4456c:	cmp	w10, #0x2d
   44570:	b.hi	447b4 <aarch64_find_real_opcode@@Base+0x2bc>  // b.pmore
   44574:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   44578:	add	x9, x9, #0x11a
   4457c:	adr	x11, 4458c <aarch64_find_real_opcode@@Base+0x94>
   44580:	ldrh	w12, [x9, x10, lsl #1]
   44584:	add	x11, x11, x12, lsl #2
   44588:	br	x11
   4458c:	mov	w9, #0x2c9                 	// #713
   44590:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44594:	cmp	w9, #0x97
   44598:	b.gt	445ec <aarch64_find_real_opcode@@Base+0xf4>
   4459c:	sub	w9, w9, #0x2
   445a0:	cmp	w9, #0x1a
   445a4:	b.hi	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.pmore
   445a8:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   445ac:	add	x10, x10, #0x7a
   445b0:	adr	x11, 445c4 <aarch64_find_real_opcode@@Base+0xcc>
   445b4:	ldrh	w12, [x10, x9, lsl #1]
   445b8:	add	x11, x11, x12, lsl #2
   445bc:	mov	w9, #0x2                   	// #2
   445c0:	br	x11
   445c4:	mov	w9, #0x1a                  	// #26
   445c8:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   445cc:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   445d0:	add	x9, x9, #0xb0
   445d4:	adr	x11, 445e4 <aarch64_find_real_opcode@@Base+0xec>
   445d8:	ldrh	w12, [x9, x10, lsl #1]
   445dc:	add	x11, x11, x12, lsl #2
   445e0:	br	x11
   445e4:	mov	w9, #0x26a                 	// #618
   445e8:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   445ec:	cmp	w9, #0x183
   445f0:	b.gt	4464c <aarch64_find_real_opcode@@Base+0x154>
   445f4:	sub	w10, w9, #0x98
   445f8:	cmp	w10, #0x5
   445fc:	b.hi	446cc <aarch64_find_real_opcode@@Base+0x1d4>  // b.pmore
   44600:	mov	w9, #0x1                   	// #1
   44604:	lsl	w9, w9, w10
   44608:	tst	w9, #0x3
   4460c:	b.ne	44868 <aarch64_find_real_opcode@@Base+0x370>  // b.any
   44610:	tst	w9, #0xc
   44614:	b.eq	44870 <aarch64_find_real_opcode@@Base+0x378>  // b.none
   44618:	mov	w9, #0x9a                  	// #154
   4461c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44620:	sub	w10, w9, #0x7f1
   44624:	cmp	w10, #0xc
   44628:	b.hi	44744 <aarch64_find_real_opcode@@Base+0x24c>  // b.pmore
   4462c:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   44630:	add	x9, x9, #0x4df
   44634:	adr	x11, 44644 <aarch64_find_real_opcode@@Base+0x14c>
   44638:	ldrb	w12, [x9, x10]
   4463c:	add	x11, x11, x12, lsl #2
   44640:	br	x11
   44644:	mov	w9, #0x503                 	// #1283
   44648:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4464c:	sub	w10, w9, #0x186
   44650:	cmp	w10, #0x19
   44654:	b.hi	446ec <aarch64_find_real_opcode@@Base+0x1f4>  // b.pmore
   44658:	mov	w11, #0x1                   	// #1
   4465c:	lsl	w11, w11, w10
   44660:	tst	w11, #0x3
   44664:	b.ne	44878 <aarch64_find_real_opcode@@Base+0x380>  // b.any
   44668:	tst	w11, #0xc00000
   4466c:	b.ne	44880 <aarch64_find_real_opcode@@Base+0x388>  // b.any
   44670:	mov	w11, #0x1                   	// #1
   44674:	lsl	w10, w11, w10
   44678:	tst	w10, #0x3000000
   4467c:	b.eq	446ec <aarch64_find_real_opcode@@Base+0x1f4>  // b.none
   44680:	mov	w9, #0x19e                 	// #414
   44684:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44688:	mov	w9, #0x4c0                 	// #1216
   4468c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44690:	mov	w9, #0x275                 	// #629
   44694:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44698:	sub	w9, w9, #0x6da
   4469c:	cmp	w9, #0x4
   446a0:	b.hi	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.pmore
   446a4:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   446a8:	add	x10, x10, #0x4da
   446ac:	adr	x11, 446bc <aarch64_find_real_opcode@@Base+0x1c4>
   446b0:	ldrb	w12, [x10, x9]
   446b4:	add	x11, x11, x12, lsl #2
   446b8:	br	x11
   446bc:	mov	w9, #0x6da                 	// #1754
   446c0:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   446c4:	mov	w9, #0x271                 	// #625
   446c8:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   446cc:	sub	w10, w9, #0xf2
   446d0:	cmp	w10, #0x2
   446d4:	b.cc	44888 <aarch64_find_real_opcode@@Base+0x390>  // b.lo, b.ul, b.last
   446d8:	sub	w9, w9, #0x13d
   446dc:	cmp	w9, #0x2
   446e0:	b.cs	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.hs, b.nlast
   446e4:	mov	w9, #0x13d                 	// #317
   446e8:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   446ec:	sub	w10, w9, #0x184
   446f0:	cmp	w10, #0x2
   446f4:	b.cc	44890 <aarch64_find_real_opcode@@Base+0x398>  // b.lo, b.ul, b.last
   446f8:	sub	w9, w9, #0x217
   446fc:	cmp	w9, #0x2
   44700:	b.cs	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.hs, b.nlast
   44704:	mov	w9, #0x217                 	// #535
   44708:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4470c:	mov	w9, #0x557                 	// #1367
   44710:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44714:	mov	w9, #0x549                 	// #1353
   44718:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4471c:	mov	w9, #0x297                 	// #663
   44720:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44724:	mov	w9, #0x29a                 	// #666
   44728:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4472c:	mov	w9, #0x3e7                 	// #999
   44730:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44734:	mov	w9, #0x4ba                 	// #1210
   44738:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4473c:	mov	w9, #0x556                 	// #1366
   44740:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44744:	cmp	w9, #0x71c
   44748:	b.eq	447ac <aarch64_find_real_opcode@@Base+0x2b4>  // b.none
   4474c:	cmp	w9, #0x71d
   44750:	b.ne	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.any
   44754:	mov	w9, #0x71d                 	// #1821
   44758:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4475c:	mov	w9, #0x529                 	// #1321
   44760:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44764:	mov	w9, #0x52e                 	// #1326
   44768:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4476c:	mov	w9, #0x531                 	// #1329
   44770:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44774:	mov	w9, #0x52c                 	// #1324
   44778:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4477c:	mov	w9, #0x55a                 	// #1370
   44780:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44784:	mov	w9, #0x562                 	// #1378
   44788:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4478c:	mov	w9, #0x563                 	// #1379
   44790:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44794:	mov	w9, #0x570                 	// #1392
   44798:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   4479c:	mov	w9, #0x572                 	// #1394
   447a0:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447a4:	mov	w9, #0x6db                 	// #1755
   447a8:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447ac:	mov	w9, #0x71c                 	// #1820
   447b0:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447b4:	sub	w9, w9, #0x2b0
   447b8:	cmp	w9, #0x2
   447bc:	b.cs	44ab4 <aarch64_find_real_opcode@@Base+0x5bc>  // b.hs, b.nlast
   447c0:	mov	w9, #0x2b0                 	// #688
   447c4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447c8:	mov	w9, #0x2cb                 	// #715
   447cc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447d0:	mov	w9, #0x2cd                 	// #717
   447d4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447d8:	mov	w9, #0x2cf                 	// #719
   447dc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447e0:	mov	w9, #0x2d2                 	// #722
   447e4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447e8:	mov	w9, #0x2df                 	// #735
   447ec:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447f0:	mov	w9, #0x2e1                 	// #737
   447f4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   447f8:	mov	w9, #0x2e3                 	// #739
   447fc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44800:	mov	w9, #0x2e5                 	// #741
   44804:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44808:	mov	w9, #0x2e8                 	// #744
   4480c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44810:	mov	w9, #0x2ea                 	// #746
   44814:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44818:	mov	w9, #0x2f5                 	// #757
   4481c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44820:	mov	w9, #0x4                   	// #4
   44824:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44828:	mov	w9, #0x7                   	// #7
   4482c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44830:	mov	w9, #0xa                   	// #10
   44834:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44838:	mov	w9, #0xc                   	// #12
   4483c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44840:	mov	w9, #0xe                   	// #14
   44844:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44848:	mov	w9, #0x11                  	// #17
   4484c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44850:	mov	w9, #0x16                  	// #22
   44854:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44858:	mov	w9, #0x18                  	// #24
   4485c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44860:	mov	w9, #0x29d                 	// #669
   44864:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44868:	mov	w9, #0x98                  	// #152
   4486c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44870:	mov	w9, #0x9c                  	// #156
   44874:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44878:	mov	w9, #0x186                 	// #390
   4487c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44880:	mov	w9, #0x19c                 	// #412
   44884:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44888:	mov	w9, #0xf2                  	// #242
   4488c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44890:	mov	w9, #0x184                 	// #388
   44894:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44898:	mov	w9, #0x3de                 	// #990
   4489c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448a0:	mov	w9, #0x3e0                 	// #992
   448a4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448a8:	mov	w9, #0x3e3                 	// #995
   448ac:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448b0:	mov	w9, #0x3ea                 	// #1002
   448b4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448b8:	mov	w9, #0x3ee                 	// #1006
   448bc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448c0:	mov	w9, #0x40d                 	// #1037
   448c4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448c8:	mov	w9, #0x40e                 	// #1038
   448cc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448d0:	mov	w9, #0x40f                 	// #1039
   448d4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448d8:	mov	w9, #0x411                 	// #1041
   448dc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448e0:	mov	w9, #0x414                 	// #1044
   448e4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448e8:	mov	w9, #0x417                 	// #1047
   448ec:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448f0:	mov	w9, #0x419                 	// #1049
   448f4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   448f8:	mov	w9, #0x41a                 	// #1050
   448fc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44900:	mov	w9, #0x41b                 	// #1051
   44904:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44908:	mov	w9, #0x41d                 	// #1053
   4490c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44910:	mov	w9, #0x420                 	// #1056
   44914:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44918:	mov	w9, #0x423                 	// #1059
   4491c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44920:	mov	w9, #0x425                 	// #1061
   44924:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44928:	mov	w9, #0x426                 	// #1062
   4492c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44930:	mov	w9, #0x427                 	// #1063
   44934:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44938:	mov	w9, #0x429                 	// #1065
   4493c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44940:	mov	w9, #0x42c                 	// #1068
   44944:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44948:	mov	w9, #0x42f                 	// #1071
   4494c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44950:	mov	w9, #0x431                 	// #1073
   44954:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44958:	mov	w9, #0x432                 	// #1074
   4495c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44960:	mov	w9, #0x433                 	// #1075
   44964:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44968:	mov	w9, #0x435                 	// #1077
   4496c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44970:	mov	w9, #0x438                 	// #1080
   44974:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44978:	mov	w9, #0x43b                 	// #1083
   4497c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44980:	mov	w9, #0x43d                 	// #1085
   44984:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44988:	mov	w9, #0x43e                 	// #1086
   4498c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44990:	mov	w9, #0x43f                 	// #1087
   44994:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44998:	mov	w9, #0x441                 	// #1089
   4499c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449a0:	mov	w9, #0x444                 	// #1092
   449a4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449a8:	mov	w9, #0x447                 	// #1095
   449ac:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449b0:	mov	w9, #0x449                 	// #1097
   449b4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449b8:	mov	w9, #0x44a                 	// #1098
   449bc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449c0:	mov	w9, #0x44b                 	// #1099
   449c4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449c8:	mov	w9, #0x44d                 	// #1101
   449cc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449d0:	mov	w9, #0x450                 	// #1104
   449d4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449d8:	mov	w9, #0x453                 	// #1107
   449dc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449e0:	mov	w9, #0x455                 	// #1109
   449e4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449e8:	mov	w9, #0x456                 	// #1110
   449ec:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449f0:	mov	w9, #0x457                 	// #1111
   449f4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   449f8:	mov	w9, #0x459                 	// #1113
   449fc:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a00:	mov	w9, #0x45c                 	// #1116
   44a04:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a08:	mov	w9, #0x45f                 	// #1119
   44a0c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a10:	mov	w9, #0x461                 	// #1121
   44a14:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a18:	mov	w9, #0x462                 	// #1122
   44a1c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a20:	mov	w9, #0x463                 	// #1123
   44a24:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a28:	mov	w9, #0x465                 	// #1125
   44a2c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a30:	mov	w9, #0x468                 	// #1128
   44a34:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a38:	mov	w9, #0x46b                 	// #1131
   44a3c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a40:	mov	w9, #0x49d                 	// #1181
   44a44:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a48:	mov	w9, #0x49f                 	// #1183
   44a4c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a50:	mov	w9, #0x58f                 	// #1423
   44a54:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a58:	mov	w9, #0x578                 	// #1400
   44a5c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a60:	mov	w9, #0x555                 	// #1365
   44a64:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a68:	mov	w9, #0x558                 	// #1368
   44a6c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a70:	mov	w9, #0x547                 	// #1351
   44a74:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a78:	mov	w9, #0x548                 	// #1352
   44a7c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a80:	mov	w9, #0x505                 	// #1285
   44a84:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a88:	mov	w9, #0x506                 	// #1286
   44a8c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a90:	mov	w9, #0x55c                 	// #1372
   44a94:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44a98:	mov	w9, #0x55d                 	// #1373
   44a9c:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44aa0:	mov	w9, #0x6dd                 	// #1757
   44aa4:	b	44aac <aarch64_find_real_opcode@@Base+0x5b4>
   44aa8:	mov	w9, #0x6de                 	// #1758
   44aac:	mov	w10, #0x90                  	// #144
   44ab0:	madd	x0, x9, x10, x8
   44ab4:	ret

0000000000044ab8 <aarch64_insert_operand@@Base>:
   44ab8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   44abc:	ldr	x8, [x8, #4032]
   44ac0:	mov	w9, #0xaaab                	// #43691
   44ac4:	movk	w9, #0xaaaa, lsl #16
   44ac8:	sub	x8, x0, x8
   44acc:	lsr	x8, x8, #4
   44ad0:	mul	w8, w8, w9
   44ad4:	sub	w8, w8, #0x1
   44ad8:	cmp	w8, #0xce
   44adc:	b.hi	44bdc <aarch64_insert_operand@@Base+0x124>  // b.pmore
   44ae0:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   44ae4:	add	x9, x9, #0x4ec
   44ae8:	adr	x10, 44af8 <aarch64_insert_operand@@Base+0x40>
   44aec:	ldrb	w11, [x9, x8]
   44af0:	add	x10, x10, x11, lsl #2
   44af4:	br	x10
   44af8:	b	352f0 <aarch64_ins_regno@plt>
   44afc:	b	358b0 <aarch64_ins_imm@plt>
   44b00:	b	35220 <aarch64_ins_sve_addr_rr_lsl@plt>
   44b04:	b	351a0 <aarch64_ins_sve_addr_rz_xtw@plt>
   44b08:	b	35420 <aarch64_ins_sysins_op@plt>
   44b0c:	b	35770 <aarch64_ins_reglane@plt>
   44b10:	b	35160 <aarch64_ins_sve_quad_index@plt>
   44b14:	b	353f0 <aarch64_ins_addr_simm@plt>
   44b18:	b	352e0 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   44b1c:	b	353b0 <aarch64_ins_sve_addr_ri_u6@plt>
   44b20:	b	35af0 <aarch64_ins_sve_addr_zi_u5@plt>
   44b24:	b	35790 <aarch64_ins_imm_rotate2@plt>
   44b28:	b	351d0 <aarch64_ins_imm_rotate1@plt>
   44b2c:	b	35b00 <aarch64_ins_sve_shlimm@plt>
   44b30:	b	35630 <aarch64_ins_advsimd_imm_modified@plt>
   44b34:	b	358e0 <aarch64_ins_sve_shrimm@plt>
   44b38:	b	35590 <aarch64_ins_fpimm@plt>
   44b3c:	b	35490 <aarch64_ins_limm@plt>
   44b40:	b	35170 <aarch64_ins_cond@plt>
   44b44:	b	35930 <aarch64_ins_barrier@plt>
   44b48:	b	35710 <aarch64_ins_hint@plt>
   44b4c:	b	357e0 <aarch64_ins_addr_simple@plt>
   44b50:	b	356f0 <aarch64_ins_sve_addr_ri_s4@plt>
   44b54:	b	351c0 <aarch64_ins_sve_reglist@plt>
   44b58:	b	359b0 <aarch64_ins_advsimd_imm_shift@plt>
   44b5c:	b	35700 <aarch64_ins_prfop@plt>
   44b60:	b	35380 <aarch64_ins_sve_addr_zz_lsl@plt>
   44b64:	b	35650 <aarch64_ins_sve_addr_zz_sxtw@plt>
   44b68:	b	35120 <aarch64_ins_sve_float_zero_one@plt>
   44b6c:	b	35230 <aarch64_ins_sve_scale@plt>
   44b70:	b	35530 <aarch64_ins_reg_shifted@plt>
   44b74:	b	35430 <aarch64_ins_ft@plt>
   44b78:	b	35b70 <aarch64_ins_ldst_reglist@plt>
   44b7c:	b	35310 <aarch64_ins_aimm@plt>
   44b80:	b	357c0 <aarch64_ins_imm_half@plt>
   44b84:	b	35980 <aarch64_ins_addr_regoff@plt>
   44b88:	b	358c0 <aarch64_ins_addr_offset@plt>
   44b8c:	b	35130 <aarch64_ins_simd_addr_post@plt>
   44b90:	b	35570 <aarch64_ins_sysreg@plt>
   44b94:	b	35330 <aarch64_ins_pstatefield@plt>
   44b98:	b	35a10 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   44b9c:	b	35bf0 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   44ba0:	b	355d0 <aarch64_ins_sve_limm_mov@plt>
   44ba4:	b	353c0 <aarch64_ins_sve_index@plt>
   44ba8:	b	35a80 <aarch64_ins_reg_extended@plt>
   44bac:	b	356d0 <aarch64_ins_reglist@plt>
   44bb0:	b	35640 <aarch64_ins_ldst_reglist_r@plt>
   44bb4:	b	358f0 <aarch64_ins_ldst_elemlist@plt>
   44bb8:	b	357b0 <aarch64_ins_fbits@plt>
   44bbc:	b	352a0 <aarch64_ins_addr_simm10@plt>
   44bc0:	b	35810 <aarch64_ins_addr_uimm12@plt>
   44bc4:	b	35780 <aarch64_ins_sve_addr_zz_uxtw@plt>
   44bc8:	b	35730 <aarch64_ins_sve_float_half_two@plt>
   44bcc:	b	359f0 <aarch64_ins_sve_aimm@plt>
   44bd0:	b	35a60 <aarch64_ins_sve_asimm@plt>
   44bd4:	b	35ba0 <aarch64_ins_sve_float_half_one@plt>
   44bd8:	b	35850 <aarch64_ins_inv_limm@plt>
   44bdc:	stp	x29, x30, [sp, #-16]!
   44be0:	adrp	x0, 58000 <fields@@Base+0x1e84>
   44be4:	adrp	x1, 5b000 <fields@@Base+0x4e84>
   44be8:	adrp	x3, 5b000 <fields@@Base+0x4e84>
   44bec:	add	x0, x0, #0x5dc
   44bf0:	add	x1, x1, #0x5bb
   44bf4:	add	x3, x3, #0x5d9
   44bf8:	mov	w2, #0x35f                 	// #863
   44bfc:	mov	x29, sp
   44c00:	bl	35b90 <__assert_fail@plt>

0000000000044c04 <aarch64_opcode_lookup@@Base>:
   44c04:	stp	x29, x30, [sp, #-16]!
   44c08:	mov	x29, sp
   44c0c:	bl	44c28 <aarch64_opcode_lookup@@Base+0x24>
   44c10:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   44c14:	ldr	x8, [x8, #3848]
   44c18:	mov	w9, #0x90                  	// #144
   44c1c:	smaddl	x0, w0, w9, x8
   44c20:	ldp	x29, x30, [sp], #16
   44c24:	ret
   44c28:	tbnz	w0, #26, 44c44 <aarch64_opcode_lookup@@Base+0x40>
   44c2c:	tbnz	w0, #25, 44c8c <aarch64_opcode_lookup@@Base+0x88>
   44c30:	tbnz	w0, #27, 44cd0 <aarch64_opcode_lookup@@Base+0xcc>
   44c34:	tbnz	w0, #24, 44d58 <aarch64_opcode_lookup@@Base+0x154>
   44c38:	cmp	w0, #0x0
   44c3c:	mov	w8, #0x4a2                 	// #1186
   44c40:	b	44d0c <aarch64_opcode_lookup@@Base+0x108>
   44c44:	tbnz	w0, #27, 44cac <aarch64_opcode_lookup@@Base+0xa8>
   44c48:	tbnz	w0, #28, 44cfc <aarch64_opcode_lookup@@Base+0xf8>
   44c4c:	tbnz	w0, #24, 44d6c <aarch64_opcode_lookup@@Base+0x168>
   44c50:	tbnz	w0, #29, 44e30 <aarch64_opcode_lookup@@Base+0x22c>
   44c54:	tbnz	w0, #13, 44fc0 <aarch64_opcode_lookup@@Base+0x3bc>
   44c58:	tbnz	w0, #14, 45214 <aarch64_opcode_lookup@@Base+0x610>
   44c5c:	tbnz	w0, #15, 45544 <aarch64_opcode_lookup@@Base+0x940>
   44c60:	tbnz	w0, #21, 45a18 <aarch64_opcode_lookup@@Base+0xe14>
   44c64:	tbnz	w0, #30, 46150 <aarch64_opcode_lookup@@Base+0x154c>
   44c68:	tbnz	w0, #31, 47144 <aarch64_opcode_lookup@@Base+0x2540>
   44c6c:	tbnz	w0, #16, 4758c <aarch64_opcode_lookup@@Base+0x2988>
   44c70:	tbnz	w0, #17, 48110 <aarch64_opcode_lookup@@Base+0x350c>
   44c74:	tbnz	w0, #18, 48aec <aarch64_opcode_lookup@@Base+0x3ee8>
   44c78:	tst	w0, #0x100000
   44c7c:	tbnz	w0, #19, 49338 <aarch64_opcode_lookup@@Base+0x4734>
   44c80:	mov	w8, #0x6d1                 	// #1745
   44c84:	mov	w9, #0x4fc                 	// #1276
   44c88:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44c8c:	tbnz	w0, #24, 44d14 <aarch64_opcode_lookup@@Base+0x110>
   44c90:	tbnz	w0, #27, 44d94 <aarch64_opcode_lookup@@Base+0x190>
   44c94:	tbnz	w0, #23, 44e58 <aarch64_opcode_lookup@@Base+0x254>
   44c98:	tst	w0, #0x40000000
   44c9c:	tbnz	w0, #29, 44ff0 <aarch64_opcode_lookup@@Base+0x3ec>
   44ca0:	mov	w8, #0x3e2                 	// #994
   44ca4:	mov	w9, #0x3de                 	// #990
   44ca8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44cac:	tbnz	w0, #25, 44d30 <aarch64_opcode_lookup@@Base+0x12c>
   44cb0:	tbnz	w0, #28, 44db0 <aarch64_opcode_lookup@@Base+0x1ac>
   44cb4:	tbnz	w0, #22, 44e6c <aarch64_opcode_lookup@@Base+0x268>
   44cb8:	tbnz	w0, #23, 44ffc <aarch64_opcode_lookup@@Base+0x3f8>
   44cbc:	tbnz	w0, #24, 4522c <aarch64_opcode_lookup@@Base+0x628>
   44cc0:	tst	w0, #0x20000000
   44cc4:	mov	w8, #0x3cc                 	// #972
   44cc8:	mov	w9, #0x1b8                 	// #440
   44ccc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44cd0:	tbnz	w0, #28, 44dc0 <aarch64_opcode_lookup@@Base+0x1bc>
   44cd4:	tbnz	w0, #22, 44e84 <aarch64_opcode_lookup@@Base+0x280>
   44cd8:	tbnz	w0, #23, 45010 <aarch64_opcode_lookup@@Base+0x40c>
   44cdc:	tbnz	w0, #29, 45244 <aarch64_opcode_lookup@@Base+0x640>
   44ce0:	tbnz	w0, #15, 45568 <aarch64_opcode_lookup@@Base+0x964>
   44ce4:	tbnz	w0, #21, 45a38 <aarch64_opcode_lookup@@Base+0xe34>
   44ce8:	tbnz	w0, #31, 46864 <aarch64_opcode_lookup@@Base+0x1c60>
   44cec:	tst	w0, #0x40000000
   44cf0:	mov	w8, #0x3ae                 	// #942
   44cf4:	mov	w9, #0x3a8                 	// #936
   44cf8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44cfc:	tbnz	w0, #29, 44dd4 <aarch64_opcode_lookup@@Base+0x1d0>
   44d00:	tbnz	w0, #30, 44ea8 <aarch64_opcode_lookup@@Base+0x2a4>
   44d04:	cmp	w0, #0x0
   44d08:	mov	w8, #0x27c                 	// #636
   44d0c:	cinc	w0, w8, lt  // lt = tstop
   44d10:	ret
   44d14:	tbnz	w0, #27, 44de8 <aarch64_opcode_lookup@@Base+0x1e4>
   44d18:	tbnz	w0, #23, 44ec0 <aarch64_opcode_lookup@@Base+0x2bc>
   44d1c:	tbnz	w0, #29, 4502c <aarch64_opcode_lookup@@Base+0x428>
   44d20:	tst	w0, #0x40000000
   44d24:	mov	w8, #0x275                 	// #629
   44d28:	mov	w9, #0x26a                 	// #618
   44d2c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44d30:	tbnz	w0, #24, 44e04 <aarch64_opcode_lookup@@Base+0x200>
   44d34:	tbnz	w0, #21, 44ec8 <aarch64_opcode_lookup@@Base+0x2c4>
   44d38:	tbnz	w0, #28, 45034 <aarch64_opcode_lookup@@Base+0x430>
   44d3c:	tbnz	w0, #29, 45254 <aarch64_opcode_lookup@@Base+0x650>
   44d40:	tbnz	w0, #31, 459ac <aarch64_opcode_lookup@@Base+0xda8>
   44d44:	tbnz	w0, #10, 459d0 <aarch64_opcode_lookup@@Base+0xdcc>
   44d48:	tbnz	w0, #11, 460c8 <aarch64_opcode_lookup@@Base+0x14c4>
   44d4c:	tst	w0, #0x1000
   44d50:	mov	w8, #0x1a4                 	// #420
   44d54:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   44d58:	tst	w0, #0x40000000
   44d5c:	tbnz	w0, #29, 44ef8 <aarch64_opcode_lookup@@Base+0x2f4>
   44d60:	mov	w8, #0x10                  	// #16
   44d64:	mov	w9, #0xc                   	// #12
   44d68:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44d6c:	tbnz	w0, #29, 44f04 <aarch64_opcode_lookup@@Base+0x300>
   44d70:	tbnz	w0, #30, 45050 <aarch64_opcode_lookup@@Base+0x44c>
   44d74:	tbnz	w0, #31, 45500 <aarch64_opcode_lookup@@Base+0x8fc>
   44d78:	tbnz	w0, #21, 45528 <aarch64_opcode_lookup@@Base+0x924>
   44d7c:	tbnz	w0, #20, 459e8 <aarch64_opcode_lookup@@Base+0xde4>
   44d80:	tst	w0, #0x800000
   44d84:	tbnz	w0, #22, 460dc <aarch64_opcode_lookup@@Base+0x14d8>
   44d88:	mov	w8, #0x503                 	// #1283
   44d8c:	mov	w9, #0x6db                 	// #1755
   44d90:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44d94:	tbnz	w0, #21, 44f2c <aarch64_opcode_lookup@@Base+0x328>
   44d98:	tbnz	w0, #28, 4507c <aarch64_opcode_lookup@@Base+0x478>
   44d9c:	tst	w0, #0x40000000
   44da0:	tbnz	w0, #29, 45260 <aarch64_opcode_lookup@@Base+0x65c>
   44da4:	mov	w8, #0x3ec                 	// #1004
   44da8:	mov	w9, #0x3e5                 	// #997
   44dac:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44db0:	tbnz	w0, #24, 44f40 <aarch64_opcode_lookup@@Base+0x33c>
   44db4:	tbnz	w0, #29, 4509c <aarch64_opcode_lookup@@Base+0x498>
   44db8:	mov	w0, #0x3db                 	// #987
   44dbc:	ret
   44dc0:	tbnz	w0, #24, 44f4c <aarch64_opcode_lookup@@Base+0x348>
   44dc4:	tbnz	w0, #29, 450b0 <aarch64_opcode_lookup@@Base+0x4ac>
   44dc8:	tbnz	w0, #31, 4551c <aarch64_opcode_lookup@@Base+0x918>
   44dcc:	mov	w0, #0x3da                 	// #986
   44dd0:	ret
   44dd4:	tst	w0, #0x2000000
   44dd8:	tbnz	w0, #24, 44f78 <aarch64_opcode_lookup@@Base+0x374>
   44ddc:	mov	w8, #0x4d4                 	// #1236
   44de0:	mov	w9, #0x28f                 	// #655
   44de4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44de8:	tbnz	w0, #21, 44f84 <aarch64_opcode_lookup@@Base+0x380>
   44dec:	tbnz	w0, #28, 450d8 <aarch64_opcode_lookup@@Base+0x4d4>
   44df0:	tst	w0, #0x40000000
   44df4:	tbnz	w0, #29, 4526c <aarch64_opcode_lookup@@Base+0x668>
   44df8:	mov	w8, #0x18                  	// #24
   44dfc:	mov	w9, #0x15                  	// #21
   44e00:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44e04:	tbnz	w0, #15, 44fa0 <aarch64_opcode_lookup@@Base+0x39c>
   44e08:	tbnz	w0, #28, 450e8 <aarch64_opcode_lookup@@Base+0x4e4>
   44e0c:	tbnz	w0, #10, 45278 <aarch64_opcode_lookup@@Base+0x674>
   44e10:	tbnz	w0, #12, 45580 <aarch64_opcode_lookup@@Base+0x97c>
   44e14:	tbnz	w0, #13, 45a48 <aarch64_opcode_lookup@@Base+0xe44>
   44e18:	tbnz	w0, #14, 4616c <aarch64_opcode_lookup@@Base+0x1568>
   44e1c:	tbnz	w0, #29, 46bdc <aarch64_opcode_lookup@@Base+0x1fd8>
   44e20:	tst	w0, #0x40000000
   44e24:	mov	w8, #0x942                 	// #2370
   44e28:	mov	w9, #0x93e                 	// #2366
   44e2c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   44e30:	tbnz	w0, #21, 45100 <aarch64_opcode_lookup@@Base+0x4fc>
   44e34:	tbnz	w0, #15, 4528c <aarch64_opcode_lookup@@Base+0x688>
   44e38:	tbnz	w0, #30, 45598 <aarch64_opcode_lookup@@Base+0x994>
   44e3c:	tbnz	w0, #13, 45a5c <aarch64_opcode_lookup@@Base+0xe58>
   44e40:	tbnz	w0, #14, 46180 <aarch64_opcode_lookup@@Base+0x157c>
   44e44:	tbnz	w0, #31, 47154 <aarch64_opcode_lookup@@Base+0x2550>
   44e48:	tst	w0, #0x10
   44e4c:	mov	w8, #0x52e                 	// #1326
   44e50:	mov	w9, #0x531                 	// #1329
   44e54:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44e58:	tbnz	w0, #29, 4511c <aarch64_opcode_lookup@@Base+0x518>
   44e5c:	tst	w0, #0x40000000
   44e60:	mov	w8, #0x49f                 	// #1183
   44e64:	mov	w9, #0x49d                 	// #1181
   44e68:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44e6c:	tbnz	w0, #23, 45124 <aarch64_opcode_lookup@@Base+0x520>
   44e70:	tbnz	w0, #24, 452a8 <aarch64_opcode_lookup@@Base+0x6a4>
   44e74:	tst	w0, #0x20000000
   44e78:	mov	w8, #0x3cd                 	// #973
   44e7c:	mov	w9, #0x1bc                 	// #444
   44e80:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44e84:	tbnz	w0, #23, 45138 <aarch64_opcode_lookup@@Base+0x534>
   44e88:	tbnz	w0, #29, 452c0 <aarch64_opcode_lookup@@Base+0x6bc>
   44e8c:	tbnz	w0, #15, 455a4 <aarch64_opcode_lookup@@Base+0x9a0>
   44e90:	tbnz	w0, #21, 45a74 <aarch64_opcode_lookup@@Base+0xe70>
   44e94:	tbnz	w0, #31, 4686c <aarch64_opcode_lookup@@Base+0x1c68>
   44e98:	tst	w0, #0x40000000
   44e9c:	mov	w8, #0x3b0                 	// #944
   44ea0:	mov	w9, #0x3aa                 	// #938
   44ea4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44ea8:	tbnz	w0, #24, 45154 <aarch64_opcode_lookup@@Base+0x550>
   44eac:	tbnz	w0, #4, 452d0 <aarch64_opcode_lookup@@Base+0x6cc>
   44eb0:	tbnz	w0, #25, 455bc <aarch64_opcode_lookup@@Base+0x9b8>
   44eb4:	tbnz	w0, #31, 46020 <aarch64_opcode_lookup@@Base+0x141c>
   44eb8:	mov	w0, #0x291                 	// #657
   44ebc:	ret
   44ec0:	mov	w0, #0x2f5                 	// #757
   44ec4:	ret
   44ec8:	tbnz	w0, #28, 45164 <aarch64_opcode_lookup@@Base+0x560>
   44ecc:	tbnz	w0, #15, 452ec <aarch64_opcode_lookup@@Base+0x6e8>
   44ed0:	tbnz	w0, #29, 455d4 <aarch64_opcode_lookup@@Base+0x9d0>
   44ed4:	tbnz	w0, #31, 46034 <aarch64_opcode_lookup@@Base+0x1430>
   44ed8:	tbnz	w0, #10, 460e8 <aarch64_opcode_lookup@@Base+0x14e4>
   44edc:	tbnz	w0, #11, 46a54 <aarch64_opcode_lookup@@Base+0x1e50>
   44ee0:	tst	w0, #0x40000000
   44ee4:	tbnz	w0, #12, 475a0 <aarch64_opcode_lookup@@Base+0x299c>
   44ee8:	tbnz	w0, #13, 48120 <aarch64_opcode_lookup@@Base+0x351c>
   44eec:	tbnz	w0, #14, 48afc <aarch64_opcode_lookup@@Base+0x3ef8>
   44ef0:	mov	w8, #0x2c                  	// #44
   44ef4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   44ef8:	mov	w8, #0x11                  	// #17
   44efc:	mov	w9, #0xe                   	// #14
   44f00:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44f04:	tbnz	w0, #15, 45198 <aarch64_opcode_lookup@@Base+0x594>
   44f08:	tbnz	w0, #14, 45310 <aarch64_opcode_lookup@@Base+0x70c>
   44f0c:	tbnz	w0, #13, 455f4 <aarch64_opcode_lookup@@Base+0x9f0>
   44f10:	tbnz	w0, #30, 45a84 <aarch64_opcode_lookup@@Base+0xe80>
   44f14:	tbnz	w0, #21, 46194 <aarch64_opcode_lookup@@Base+0x1590>
   44f18:	tbnz	w0, #31, 47164 <aarch64_opcode_lookup@@Base+0x2560>
   44f1c:	tst	w0, #0x10
   44f20:	mov	w8, #0x52d                 	// #1325
   44f24:	mov	w9, #0x52a                 	// #1322
   44f28:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44f2c:	tst	w0, #0x40000000
   44f30:	tbnz	w0, #29, 451b8 <aarch64_opcode_lookup@@Base+0x5b4>
   44f34:	mov	w8, #0x3ed                 	// #1005
   44f38:	mov	w9, #0x3e6                 	// #998
   44f3c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44f40:	tst	w0, #0x400000
   44f44:	mov	w8, #0x37b                 	// #891
   44f48:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   44f4c:	tbnz	w0, #23, 451c4 <aarch64_opcode_lookup@@Base+0x5c0>
   44f50:	tbnz	w0, #22, 4533c <aarch64_opcode_lookup@@Base+0x738>
   44f54:	tbnz	w0, #29, 45610 <aarch64_opcode_lookup@@Base+0xa0c>
   44f58:	tbnz	w0, #10, 45a9c <aarch64_opcode_lookup@@Base+0xe98>
   44f5c:	tbnz	w0, #11, 461b0 <aarch64_opcode_lookup@@Base+0x15ac>
   44f60:	tbnz	w0, #21, 46be4 <aarch64_opcode_lookup@@Base+0x1fe0>
   44f64:	cmp	w0, #0x0
   44f68:	tbnz	w0, #30, 47958 <aarch64_opcode_lookup@@Base+0x2d54>
   44f6c:	mov	w8, #0x951                 	// #2385
   44f70:	mov	w9, #0x949                 	// #2377
   44f74:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   44f78:	mov	w8, #0x4d5                 	// #1237
   44f7c:	mov	w9, #0x290                 	// #656
   44f80:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44f84:	tbnz	w0, #23, 451ec <aarch64_opcode_lookup@@Base+0x5e8>
   44f88:	tbnz	w0, #28, 45360 <aarch64_opcode_lookup@@Base+0x75c>
   44f8c:	tst	w0, #0x40000000
   44f90:	tbnz	w0, #29, 45624 <aarch64_opcode_lookup@@Base+0xa20>
   44f94:	mov	w8, #0x9                   	// #9
   44f98:	mov	w9, #0x6                   	// #6
   44f9c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44fa0:	tbnz	w0, #28, 451fc <aarch64_opcode_lookup@@Base+0x5f8>
   44fa4:	tbnz	w0, #10, 45370 <aarch64_opcode_lookup@@Base+0x76c>
   44fa8:	tbnz	w0, #12, 45630 <aarch64_opcode_lookup@@Base+0xa2c>
   44fac:	tbnz	w0, #13, 45aa4 <aarch64_opcode_lookup@@Base+0xea0>
   44fb0:	tbnz	w0, #14, 461b8 <aarch64_opcode_lookup@@Base+0x15b4>
   44fb4:	tbnz	w0, #29, 46bec <aarch64_opcode_lookup@@Base+0x1fe8>
   44fb8:	mov	w0, #0x6a                  	// #106
   44fbc:	ret
   44fc0:	tbnz	w0, #14, 4538c <aarch64_opcode_lookup@@Base+0x788>
   44fc4:	tbnz	w0, #15, 4564c <aarch64_opcode_lookup@@Base+0xa48>
   44fc8:	tbnz	w0, #21, 45ab8 <aarch64_opcode_lookup@@Base+0xeb4>
   44fcc:	tbnz	w0, #30, 461c4 <aarch64_opcode_lookup@@Base+0x15c0>
   44fd0:	tbnz	w0, #31, 47174 <aarch64_opcode_lookup@@Base+0x2570>
   44fd4:	tbnz	w0, #17, 475b0 <aarch64_opcode_lookup@@Base+0x29ac>
   44fd8:	tbnz	w0, #19, 4812c <aarch64_opcode_lookup@@Base+0x3528>
   44fdc:	tbnz	w0, #20, 48b04 <aarch64_opcode_lookup@@Base+0x3f00>
   44fe0:	tst	w0, #0x10000
   44fe4:	mov	w8, #0x7a7                 	// #1959
   44fe8:	mov	w9, #0x70f                 	// #1807
   44fec:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44ff0:	mov	w8, #0x3e3                 	// #995
   44ff4:	mov	w9, #0x3e0                 	// #992
   44ff8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   44ffc:	tbnz	w0, #29, 453a4 <aarch64_opcode_lookup@@Base+0x7a0>
   45000:	tbnz	w0, #21, 45674 <aarch64_opcode_lookup@@Base+0xa70>
   45004:	tbnz	w0, #24, 45adc <aarch64_opcode_lookup@@Base+0xed8>
   45008:	mov	w0, #0x1c0                 	// #448
   4500c:	ret
   45010:	tbnz	w0, #29, 453ac <aarch64_opcode_lookup@@Base+0x7a8>
   45014:	tbnz	w0, #15, 45680 <aarch64_opcode_lookup@@Base+0xa7c>
   45018:	tbnz	w0, #21, 45ae8 <aarch64_opcode_lookup@@Base+0xee4>
   4501c:	cmp	w0, #0x0
   45020:	mov	w8, #0x3c7                 	// #967
   45024:	cinc	w0, w8, ge  // ge = tcont
   45028:	ret
   4502c:	mov	w0, #0x271                 	// #625
   45030:	ret
   45034:	tbnz	w0, #29, 453bc <aarch64_opcode_lookup@@Base+0x7b8>
   45038:	tbnz	w0, #30, 45698 <aarch64_opcode_lookup@@Base+0xa94>
   4503c:	tst	w0, #0x20000
   45040:	tbnz	w0, #16, 45af8 <aarch64_opcode_lookup@@Base+0xef4>
   45044:	mov	w8, #0x2f7                 	// #759
   45048:	mov	w9, #0x2fb                 	// #763
   4504c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45050:	tbnz	w0, #13, 453d0 <aarch64_opcode_lookup@@Base+0x7cc>
   45054:	tbnz	w0, #14, 456b4 <aarch64_opcode_lookup@@Base+0xab0>
   45058:	tbnz	w0, #15, 45b04 <aarch64_opcode_lookup@@Base+0xf00>
   4505c:	tbnz	w0, #21, 461d8 <aarch64_opcode_lookup@@Base+0x15d4>
   45060:	tbnz	w0, #31, 47184 <aarch64_opcode_lookup@@Base+0x2580>
   45064:	tst	w0, #0x1000
   45068:	tbnz	w0, #10, 475c4 <aarch64_opcode_lookup@@Base+0x29c0>
   4506c:	tbnz	w0, #11, 48140 <aarch64_opcode_lookup@@Base+0x353c>
   45070:	mov	w8, #0x8b9                 	// #2233
   45074:	mov	w9, #0x84e                 	// #2126
   45078:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4507c:	tbnz	w0, #10, 453f4 <aarch64_opcode_lookup@@Base+0x7f0>
   45080:	tbnz	w0, #11, 456d8 <aarch64_opcode_lookup@@Base+0xad4>
   45084:	tbnz	w0, #22, 45b24 <aarch64_opcode_lookup@@Base+0xf20>
   45088:	tbnz	w0, #23, 461f4 <aarch64_opcode_lookup@@Base+0x15f0>
   4508c:	and	w8, w0, #0x40000000
   45090:	tbnz	w0, #29, 46bfc <aarch64_opcode_lookup@@Base+0x1ff8>
   45094:	lsr	w0, w8, #29
   45098:	ret
   4509c:	tbnz	w0, #10, 45408 <aarch64_opcode_lookup@@Base+0x804>
   450a0:	tst	w0, #0x400000
   450a4:	tbnz	w0, #11, 456e8 <aarch64_opcode_lookup@@Base+0xae4>
   450a8:	mov	w8, #0x39c                 	// #924
   450ac:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   450b0:	tbnz	w0, #10, 45414 <aarch64_opcode_lookup@@Base+0x810>
   450b4:	tbnz	w0, #11, 456f0 <aarch64_opcode_lookup@@Base+0xaec>
   450b8:	tbnz	w0, #21, 45b34 <aarch64_opcode_lookup@@Base+0xf30>
   450bc:	tbnz	w0, #23, 46204 <aarch64_opcode_lookup@@Base+0x1600>
   450c0:	tbnz	w0, #22, 46c0c <aarch64_opcode_lookup@@Base+0x2008>
   450c4:	tbnz	w0, #31, 47e6c <aarch64_opcode_lookup@@Base+0x3268>
   450c8:	tst	w0, #0x40000000
   450cc:	mov	w8, #0x39e                 	// #926
   450d0:	mov	w9, #0x399                 	// #921
   450d4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   450d8:	tbnz	w0, #15, 45434 <aarch64_opcode_lookup@@Base+0x830>
   450dc:	tbnz	w0, #22, 45710 <aarch64_opcode_lookup@@Base+0xb0c>
   450e0:	mov	w0, #0x2df                 	// #735
   450e4:	ret
   450e8:	tbnz	w0, #29, 4543c <aarch64_opcode_lookup@@Base+0x838>
   450ec:	tbnz	w0, #30, 45720 <aarch64_opcode_lookup@@Base+0xb1c>
   450f0:	tst	w0, #0x200000
   450f4:	mov	w8, #0x35d                 	// #861
   450f8:	mov	w9, #0x359                 	// #857
   450fc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45100:	tbnz	w0, #13, 45454 <aarch64_opcode_lookup@@Base+0x850>
   45104:	tbnz	w0, #30, 45738 <aarch64_opcode_lookup@@Base+0xb34>
   45108:	tbnz	w0, #31, 4603c <aarch64_opcode_lookup@@Base+0x1438>
   4510c:	tst	w0, #0x10
   45110:	mov	w8, #0x530                 	// #1328
   45114:	mov	w9, #0x533                 	// #1331
   45118:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4511c:	mov	w0, #0x4a1                 	// #1185
   45120:	ret
   45124:	tbnz	w0, #29, 4546c <aarch64_opcode_lookup@@Base+0x868>
   45128:	tbnz	w0, #21, 45754 <aarch64_opcode_lookup@@Base+0xb50>
   4512c:	tbnz	w0, #24, 45b5c <aarch64_opcode_lookup@@Base+0xf58>
   45130:	mov	w0, #0x1c4                 	// #452
   45134:	ret
   45138:	tbnz	w0, #29, 45474 <aarch64_opcode_lookup@@Base+0x870>
   4513c:	tbnz	w0, #15, 45760 <aarch64_opcode_lookup@@Base+0xb5c>
   45140:	tbnz	w0, #21, 45b68 <aarch64_opcode_lookup@@Base+0xf64>
   45144:	tbnz	w0, #31, 46874 <aarch64_opcode_lookup@@Base+0x1c70>
   45148:	tst	w0, #0x40000000
   4514c:	mov	w8, #0x3c5                 	// #965
   45150:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45154:	tbnz	w0, #21, 45484 <aarch64_opcode_lookup@@Base+0x880>
   45158:	tbnz	w0, #25, 45778 <aarch64_opcode_lookup@@Base+0xb74>
   4515c:	mov	w0, #0x32a                 	// #810
   45160:	ret
   45164:	tbnz	w0, #10, 45490 <aarch64_opcode_lookup@@Base+0x88c>
   45168:	tbnz	w0, #11, 45784 <aarch64_opcode_lookup@@Base+0xb80>
   4516c:	tbnz	w0, #12, 45b7c <aarch64_opcode_lookup@@Base+0xf78>
   45170:	tbnz	w0, #13, 46218 <aarch64_opcode_lookup@@Base+0x1614>
   45174:	tbnz	w0, #14, 46c20 <aarch64_opcode_lookup@@Base+0x201c>
   45178:	tbnz	w0, #16, 47964 <aarch64_opcode_lookup@@Base+0x2d60>
   4517c:	tbnz	w0, #17, 4866c <aarch64_opcode_lookup@@Base+0x3a68>
   45180:	tbnz	w0, #18, 48fc0 <aarch64_opcode_lookup@@Base+0x43bc>
   45184:	tst	w0, #0x100000
   45188:	tbnz	w0, #19, 496ac <aarch64_opcode_lookup@@Base+0x4aa8>
   4518c:	mov	w8, #0x313                 	// #787
   45190:	mov	w9, #0x2ff                 	// #767
   45194:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45198:	tbnz	w0, #21, 454ac <aarch64_opcode_lookup@@Base+0x8a8>
   4519c:	tbnz	w0, #30, 457a4 <aarch64_opcode_lookup@@Base+0xba0>
   451a0:	tbnz	w0, #14, 45b88 <aarch64_opcode_lookup@@Base+0xf84>
   451a4:	tbnz	w0, #13, 4622c <aarch64_opcode_lookup@@Base+0x1628>
   451a8:	tst	w0, #0x10
   451ac:	mov	w8, #0x53e                 	// #1342
   451b0:	mov	w9, #0x527                 	// #1319
   451b4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   451b8:	mov	w8, #0x3f0                 	// #1008
   451bc:	mov	w9, #0x3ea                 	// #1002
   451c0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   451c4:	tbnz	w0, #29, 454d4 <aarch64_opcode_lookup@@Base+0x8d0>
   451c8:	tbnz	w0, #10, 457d0 <aarch64_opcode_lookup@@Base+0xbcc>
   451cc:	tbnz	w0, #11, 45ba0 <aarch64_opcode_lookup@@Base+0xf9c>
   451d0:	tbnz	w0, #21, 46244 <aarch64_opcode_lookup@@Base+0x1640>
   451d4:	tbnz	w0, #22, 46c40 <aarch64_opcode_lookup@@Base+0x203c>
   451d8:	tbnz	w0, #30, 47980 <aarch64_opcode_lookup@@Base+0x2d7c>
   451dc:	cmp	w0, #0x0
   451e0:	mov	w8, #0x953                 	// #2387
   451e4:	mov	w9, #0x94c                 	// #2380
   451e8:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   451ec:	tst	w0, #0x8000
   451f0:	mov	w8, #0x2ea                 	// #746
   451f4:	mov	w9, #0x2e8                 	// #744
   451f8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   451fc:	tbnz	w0, #29, 454e8 <aarch64_opcode_lookup@@Base+0x8e4>
   45200:	tbnz	w0, #30, 457dc <aarch64_opcode_lookup@@Base+0xbd8>
   45204:	tst	w0, #0x200000
   45208:	mov	w8, #0x35f                 	// #863
   4520c:	mov	w9, #0x35b                 	// #859
   45210:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45214:	tbnz	w0, #15, 457ec <aarch64_opcode_lookup@@Base+0xbe8>
   45218:	tbnz	w0, #21, 45bac <aarch64_opcode_lookup@@Base+0xfa8>
   4521c:	tbnz	w0, #30, 46250 <aarch64_opcode_lookup@@Base+0x164c>
   45220:	tbnz	w0, #31, 4718c <aarch64_opcode_lookup@@Base+0x2588>
   45224:	mov	w0, #0x6cb                 	// #1739
   45228:	ret
   4522c:	tbnz	w0, #29, 45800 <aarch64_opcode_lookup@@Base+0xbfc>
   45230:	tst	w0, #0x200000
   45234:	tbnz	w0, #13, 45bc8 <aarch64_opcode_lookup@@Base+0xfc4>
   45238:	mov	w8, #0x1ca                 	// #458
   4523c:	mov	w9, #0x1c8                 	// #456
   45240:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45244:	tst	w0, #0x40000000
   45248:	mov	w8, #0x3d3                 	// #979
   4524c:	mov	w9, #0x3ca                 	// #970
   45250:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45254:	tbnz	w0, #10, 45808 <aarch64_opcode_lookup@@Base+0xc04>
   45258:	mov	w0, #0x84                  	// #132
   4525c:	ret
   45260:	mov	w8, #0x3ee                 	// #1006
   45264:	mov	w9, #0x3e7                 	// #999
   45268:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4526c:	mov	w8, #0x1a                  	// #26
   45270:	mov	w9, #0x16                  	// #22
   45274:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45278:	tst	w0, #0x20000000
   4527c:	tbnz	w0, #12, 45818 <aarch64_opcode_lookup@@Base+0xc14>
   45280:	mov	w8, #0x8d                  	// #141
   45284:	mov	w9, #0x85                  	// #133
   45288:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4528c:	tbnz	w0, #13, 45824 <aarch64_opcode_lookup@@Base+0xc20>
   45290:	tbnz	w0, #30, 45bd4 <aarch64_opcode_lookup@@Base+0xfd0>
   45294:	tbnz	w0, #14, 4626c <aarch64_opcode_lookup@@Base+0x1668>
   45298:	tst	w0, #0x10
   4529c:	mov	w8, #0x52c                 	// #1324
   452a0:	mov	w9, #0x529                 	// #1321
   452a4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   452a8:	tbnz	w0, #29, 45840 <aarch64_opcode_lookup@@Base+0xc3c>
   452ac:	tst	w0, #0x200000
   452b0:	tbnz	w0, #13, 45bf0 <aarch64_opcode_lookup@@Base+0xfec>
   452b4:	mov	w8, #0x1d0                 	// #464
   452b8:	mov	w9, #0x1cc                 	// #460
   452bc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   452c0:	tst	w0, #0x40000000
   452c4:	mov	w8, #0x3d2                 	// #978
   452c8:	mov	w9, #0x3cb                 	// #971
   452cc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   452d0:	tbnz	w0, #10, 45848 <aarch64_opcode_lookup@@Base+0xc44>
   452d4:	tbnz	w0, #21, 45bfc <aarch64_opcode_lookup@@Base+0xff8>
   452d8:	tbnz	w0, #22, 46280 <aarch64_opcode_lookup@@Base+0x167c>
   452dc:	tst	w0, #0x800000
   452e0:	mov	w8, #0x28d                 	// #653
   452e4:	mov	w9, #0x287                 	// #647
   452e8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   452ec:	tbnz	w0, #10, 45860 <aarch64_opcode_lookup@@Base+0xc5c>
   452f0:	tbnz	w0, #11, 45c04 <aarch64_opcode_lookup@@Base+0x1000>
   452f4:	tbnz	w0, #12, 46288 <aarch64_opcode_lookup@@Base+0x1684>
   452f8:	tbnz	w0, #13, 46c50 <aarch64_opcode_lookup@@Base+0x204c>
   452fc:	tbnz	w0, #14, 47988 <aarch64_opcode_lookup@@Base+0x2d84>
   45300:	tbnz	w0, #29, 48678 <aarch64_opcode_lookup@@Base+0x3a74>
   45304:	tbnz	w0, #30, 48fc8 <aarch64_opcode_lookup@@Base+0x43c4>
   45308:	mov	w0, #0x3c                  	// #60
   4530c:	ret
   45310:	tbnz	w0, #30, 45884 <aarch64_opcode_lookup@@Base+0xc80>
   45314:	tbnz	w0, #21, 45c24 <aarch64_opcode_lookup@@Base+0x1020>
   45318:	tbnz	w0, #22, 4629c <aarch64_opcode_lookup@@Base+0x1698>
   4531c:	tbnz	w0, #23, 46c64 <aarch64_opcode_lookup@@Base+0x2060>
   45320:	tbnz	w0, #31, 47e74 <aarch64_opcode_lookup@@Base+0x3270>
   45324:	tbnz	w0, #9, 4814c <aarch64_opcode_lookup@@Base+0x3548>
   45328:	tbnz	w0, #20, 48b0c <aarch64_opcode_lookup@@Base+0x3f08>
   4532c:	tst	w0, #0x10
   45330:	mov	w8, #0x511                 	// #1297
   45334:	mov	w9, #0x505                 	// #1285
   45338:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4533c:	tbnz	w0, #29, 458a0 <aarch64_opcode_lookup@@Base+0xc9c>
   45340:	tbnz	w0, #10, 45c3c <aarch64_opcode_lookup@@Base+0x1038>
   45344:	tbnz	w0, #11, 462b8 <aarch64_opcode_lookup@@Base+0x16b4>
   45348:	tbnz	w0, #21, 46c80 <aarch64_opcode_lookup@@Base+0x207c>
   4534c:	cmp	w0, #0x0
   45350:	tbnz	w0, #30, 47998 <aarch64_opcode_lookup@@Base+0x2d94>
   45354:	mov	w8, #0x952                 	// #2386
   45358:	mov	w9, #0x94a                 	// #2378
   4535c:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45360:	tst	w0, #0x8000
   45364:	mov	w8, #0x2e5                 	// #741
   45368:	mov	w9, #0x2e3                 	// #739
   4536c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45370:	tbnz	w0, #11, 458b4 <aarch64_opcode_lookup@@Base+0xcb0>
   45374:	tbnz	w0, #14, 45c44 <aarch64_opcode_lookup@@Base+0x1040>
   45378:	tst	w0, #0x20000000
   4537c:	tbnz	w0, #12, 462c0 <aarch64_opcode_lookup@@Base+0x16bc>
   45380:	mov	w8, #0x8f                  	// #143
   45384:	mov	w9, #0x87                  	// #135
   45388:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4538c:	tbnz	w0, #15, 458c8 <aarch64_opcode_lookup@@Base+0xcc4>
   45390:	tbnz	w0, #21, 45c58 <aarch64_opcode_lookup@@Base+0x1054>
   45394:	tbnz	w0, #30, 462cc <aarch64_opcode_lookup@@Base+0x16c8>
   45398:	tbnz	w0, #31, 4719c <aarch64_opcode_lookup@@Base+0x2598>
   4539c:	mov	w0, #0x6cc                 	// #1740
   453a0:	ret
   453a4:	mov	w0, #0x3d6                 	// #982
   453a8:	ret
   453ac:	tst	w0, #0x40000000
   453b0:	mov	w8, #0x3d9                 	// #985
   453b4:	mov	w9, #0x3d4                 	// #980
   453b8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   453bc:	tbnz	w0, #11, 458dc <aarch64_opcode_lookup@@Base+0xcd8>
   453c0:	tbnz	w0, #12, 45c78 <aarch64_opcode_lookup@@Base+0x1074>
   453c4:	tbnz	w0, #13, 462e8 <aarch64_opcode_lookup@@Base+0x16e4>
   453c8:	mov	w0, #0x24c                 	// #588
   453cc:	ret
   453d0:	tbnz	w0, #14, 458e8 <aarch64_opcode_lookup@@Base+0xce4>
   453d4:	tbnz	w0, #15, 45c80 <aarch64_opcode_lookup@@Base+0x107c>
   453d8:	tbnz	w0, #21, 462f8 <aarch64_opcode_lookup@@Base+0x16f4>
   453dc:	tbnz	w0, #31, 471ac <aarch64_opcode_lookup@@Base+0x25a8>
   453e0:	tst	w0, #0x800
   453e4:	tbnz	w0, #10, 475d4 <aarch64_opcode_lookup@@Base+0x29d0>
   453e8:	mov	w8, #0x8ce                 	// #2254
   453ec:	mov	w9, #0x84b                 	// #2123
   453f0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   453f4:	tbnz	w0, #11, 4590c <aarch64_opcode_lookup@@Base+0xd08>
   453f8:	tbnz	w0, #22, 45ca0 <aarch64_opcode_lookup@@Base+0x109c>
   453fc:	tbnz	w0, #23, 46314 <aarch64_opcode_lookup@@Base+0x1710>
   45400:	mov	w0, #0x946                 	// #2374
   45404:	ret
   45408:	tst	w0, #0x400000
   4540c:	mov	w8, #0x368                 	// #872
   45410:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45414:	tbnz	w0, #21, 45924 <aarch64_opcode_lookup@@Base+0xd20>
   45418:	tbnz	w0, #23, 45cbc <aarch64_opcode_lookup@@Base+0x10b8>
   4541c:	tbnz	w0, #22, 46324 <aarch64_opcode_lookup@@Base+0x1720>
   45420:	tbnz	w0, #31, 471b4 <aarch64_opcode_lookup@@Base+0x25b0>
   45424:	tst	w0, #0x40000000
   45428:	mov	w8, #0x36a                 	// #874
   4542c:	mov	w9, #0x365                 	// #869
   45430:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45434:	mov	w0, #0x2e1                 	// #737
   45438:	ret
   4543c:	tst	w0, #0x4000
   45440:	tbnz	w0, #12, 45930 <aarch64_opcode_lookup@@Base+0xd2c>
   45444:	tbnz	w0, #13, 45cd0 <aarch64_opcode_lookup@@Base+0x10cc>
   45448:	mov	w8, #0x25e                 	// #606
   4544c:	mov	w9, #0x25a                 	// #602
   45450:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45454:	tbnz	w0, #30, 45940 <aarch64_opcode_lookup@@Base+0xd3c>
   45458:	tbnz	w0, #31, 4604c <aarch64_opcode_lookup@@Base+0x1448>
   4545c:	tst	w0, #0x10
   45460:	mov	w8, #0x539                 	// #1337
   45464:	mov	w9, #0x537                 	// #1335
   45468:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4546c:	mov	w0, #0x3d7                 	// #983
   45470:	ret
   45474:	tst	w0, #0x40000000
   45478:	mov	w8, #0x3d8                 	// #984
   4547c:	mov	w9, #0x3d5                 	// #981
   45480:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45484:	tbnz	w0, #25, 45954 <aarch64_opcode_lookup@@Base+0xd50>
   45488:	mov	w0, #0x4a4                 	// #1188
   4548c:	ret
   45490:	tbnz	w0, #11, 45960 <aarch64_opcode_lookup@@Base+0xd5c>
   45494:	tbnz	w0, #29, 45cdc <aarch64_opcode_lookup@@Base+0x10d8>
   45498:	tbnz	w0, #30, 46338 <aarch64_opcode_lookup@@Base+0x1734>
   4549c:	tst	w0, #0x10
   454a0:	mov	w8, #0x320                 	// #800
   454a4:	mov	w9, #0x31e                 	// #798
   454a8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   454ac:	tbnz	w0, #30, 45970 <aarch64_opcode_lookup@@Base+0xd6c>
   454b0:	tbnz	w0, #14, 45cf4 <aarch64_opcode_lookup@@Base+0x10f0>
   454b4:	tbnz	w0, #20, 46350 <aarch64_opcode_lookup@@Base+0x174c>
   454b8:	tbnz	w0, #31, 471bc <aarch64_opcode_lookup@@Base+0x25b8>
   454bc:	tbnz	w0, #16, 475e0 <aarch64_opcode_lookup@@Base+0x29dc>
   454c0:	tbnz	w0, #17, 4815c <aarch64_opcode_lookup@@Base+0x3558>
   454c4:	tbnz	w0, #18, 48b1c <aarch64_opcode_lookup@@Base+0x3f18>
   454c8:	tbnz	w0, #19, 49344 <aarch64_opcode_lookup@@Base+0x4740>
   454cc:	mov	w0, #0x544                 	// #1348
   454d0:	ret
   454d4:	cmp	w0, #0x0
   454d8:	tbnz	w0, #30, 45988 <aarch64_opcode_lookup@@Base+0xd84>
   454dc:	mov	w8, #0x382                 	// #898
   454e0:	mov	w9, #0x37a                 	// #890
   454e4:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   454e8:	tbnz	w0, #10, 45994 <aarch64_opcode_lookup@@Base+0xd90>
   454ec:	tbnz	w0, #13, 45d18 <aarch64_opcode_lookup@@Base+0x1114>
   454f0:	tbnz	w0, #14, 46364 <aarch64_opcode_lookup@@Base+0x1760>
   454f4:	tst	w0, #0x800000
   454f8:	mov	w8, #0x1b4                 	// #436
   454fc:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   45500:	tbnz	w0, #13, 459c0 <aarch64_opcode_lookup@@Base+0xdbc>
   45504:	tbnz	w0, #14, 46060 <aarch64_opcode_lookup@@Base+0x145c>
   45508:	tbnz	w0, #15, 4687c <aarch64_opcode_lookup@@Base+0x1c78>
   4550c:	tst	w0, #0x400000
   45510:	mov	w8, #0x6e8                 	// #1768
   45514:	mov	w9, #0x6bc                 	// #1724
   45518:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4551c:	tst	w0, #0x40000000
   45520:	mov	w8, #0x3dc                 	// #988
   45524:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45528:	tbnz	w0, #14, 459f8 <aarch64_opcode_lookup@@Base+0xdf4>
   4552c:	tbnz	w0, #13, 46104 <aarch64_opcode_lookup@@Base+0x1500>
   45530:	tbnz	w0, #15, 46a68 <aarch64_opcode_lookup@@Base+0x1e64>
   45534:	tbnz	w0, #22, 475fc <aarch64_opcode_lookup@@Base+0x29f8>
   45538:	tbnz	w0, #23, 48170 <aarch64_opcode_lookup@@Base+0x356c>
   4553c:	mov	w0, #0x55f                 	// #1375
   45540:	ret
   45544:	tbnz	w0, #31, 46074 <aarch64_opcode_lookup@@Base+0x1470>
   45548:	tbnz	w0, #21, 46120 <aarch64_opcode_lookup@@Base+0x151c>
   4554c:	tbnz	w0, #16, 46a84 <aarch64_opcode_lookup@@Base+0x1e80>
   45550:	tbnz	w0, #17, 47604 <aarch64_opcode_lookup@@Base+0x2a00>
   45554:	tbnz	w0, #18, 48180 <aarch64_opcode_lookup@@Base+0x357c>
   45558:	tbnz	w0, #19, 48b30 <aarch64_opcode_lookup@@Base+0x3f2c>
   4555c:	tbnz	w0, #20, 4935c <aarch64_opcode_lookup@@Base+0x4758>
   45560:	mov	w0, #0x50c                 	// #1292
   45564:	ret
   45568:	tbnz	w0, #21, 45d20 <aarch64_opcode_lookup@@Base+0x111c>
   4556c:	tbnz	w0, #31, 4688c <aarch64_opcode_lookup@@Base+0x1c88>
   45570:	tst	w0, #0x40000000
   45574:	mov	w8, #0x3af                 	// #943
   45578:	mov	w9, #0x3a9                 	// #937
   4557c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45580:	tbnz	w0, #29, 45d30 <aarch64_opcode_lookup@@Base+0x112c>
   45584:	tbnz	w0, #13, 4636c <aarch64_opcode_lookup@@Base+0x1768>
   45588:	tst	w0, #0x800000
   4558c:	tbnz	w0, #14, 46c88 <aarch64_opcode_lookup@@Base+0x2084>
   45590:	mov	w8, #0x71                  	// #113
   45594:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   45598:	tbnz	w0, #31, 46088 <aarch64_opcode_lookup@@Base+0x1484>
   4559c:	mov	w0, #0x56a                 	// #1386
   455a0:	ret
   455a4:	tbnz	w0, #21, 45d38 <aarch64_opcode_lookup@@Base+0x1134>
   455a8:	tbnz	w0, #31, 46894 <aarch64_opcode_lookup@@Base+0x1c90>
   455ac:	tst	w0, #0x40000000
   455b0:	mov	w8, #0x3b1                 	// #945
   455b4:	mov	w9, #0x3ab                 	// #939
   455b8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   455bc:	tbnz	w0, #21, 45d48 <aarch64_opcode_lookup@@Base+0x1144>
   455c0:	tbnz	w0, #22, 4637c <aarch64_opcode_lookup@@Base+0x1778>
   455c4:	tst	w0, #0x800000
   455c8:	mov	w8, #0x281                 	// #641
   455cc:	mov	w9, #0x27e                 	// #638
   455d0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   455d4:	tbnz	w0, #10, 45d58 <aarch64_opcode_lookup@@Base+0x1154>
   455d8:	tbnz	w0, #11, 46384 <aarch64_opcode_lookup@@Base+0x1780>
   455dc:	tst	w0, #0x40000000
   455e0:	tbnz	w0, #12, 46c90 <aarch64_opcode_lookup@@Base+0x208c>
   455e4:	tbnz	w0, #13, 479a4 <aarch64_opcode_lookup@@Base+0x2da0>
   455e8:	tbnz	w0, #14, 48684 <aarch64_opcode_lookup@@Base+0x3a80>
   455ec:	mov	w8, #0x4c                  	// #76
   455f0:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   455f4:	tbnz	w0, #21, 45d74 <aarch64_opcode_lookup@@Base+0x1170>
   455f8:	tbnz	w0, #30, 46398 <aarch64_opcode_lookup@@Base+0x1794>
   455fc:	tbnz	w0, #31, 471d0 <aarch64_opcode_lookup@@Base+0x25cc>
   45600:	tst	w0, #0x10
   45604:	mov	w8, #0x535                 	// #1333
   45608:	mov	w9, #0x53b                 	// #1339
   4560c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45610:	tbnz	w0, #31, 46098 <aarch64_opcode_lookup@@Base+0x1494>
   45614:	tst	w0, #0x40000000
   45618:	mov	w8, #0x37d                 	// #893
   4561c:	mov	w9, #0x378                 	// #888
   45620:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45624:	mov	w8, #0xa                   	// #10
   45628:	mov	w9, #0x7                   	// #7
   4562c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45630:	tbnz	w0, #13, 45d90 <aarch64_opcode_lookup@@Base+0x118c>
   45634:	tbnz	w0, #14, 463b8 <aarch64_opcode_lookup@@Base+0x17b4>
   45638:	tst	w0, #0x20000000
   4563c:	tbnz	w0, #23, 46ca0 <aarch64_opcode_lookup@@Base+0x209c>
   45640:	mov	w8, #0x80                  	// #128
   45644:	mov	w9, #0x76                  	// #118
   45648:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4564c:	tbnz	w0, #30, 45da0 <aarch64_opcode_lookup@@Base+0x119c>
   45650:	tbnz	w0, #31, 4689c <aarch64_opcode_lookup@@Base+0x1c98>
   45654:	tbnz	w0, #21, 46a9c <aarch64_opcode_lookup@@Base+0x1e98>
   45658:	tbnz	w0, #16, 4761c <aarch64_opcode_lookup@@Base+0x2a18>
   4565c:	tst	w0, #0x80000
   45660:	tbnz	w0, #17, 48190 <aarch64_opcode_lookup@@Base+0x358c>
   45664:	tbnz	w0, #18, 48b3c <aarch64_opcode_lookup@@Base+0x3f38>
   45668:	mov	w8, #0x523                 	// #1315
   4566c:	mov	w9, #0x79e                 	// #1950
   45670:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45674:	tst	w0, #0x2000
   45678:	mov	w8, #0x1d6                 	// #470
   4567c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45680:	tbnz	w0, #21, 45dc4 <aarch64_opcode_lookup@@Base+0x11c0>
   45684:	tbnz	w0, #31, 468b4 <aarch64_opcode_lookup@@Base+0x1cb0>
   45688:	tst	w0, #0x40000000
   4568c:	mov	w8, #0x3b2                 	// #946
   45690:	mov	w9, #0x3ac                 	// #940
   45694:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45698:	tbnz	w0, #10, 45dd8 <aarch64_opcode_lookup@@Base+0x11d4>
   4569c:	tbnz	w0, #12, 463c8 <aarch64_opcode_lookup@@Base+0x17c4>
   456a0:	tst	w0, #0x4000
   456a4:	tbnz	w0, #13, 46cac <aarch64_opcode_lookup@@Base+0x20a8>
   456a8:	mov	w8, #0x2aa                 	// #682
   456ac:	mov	w9, #0x2a6                 	// #678
   456b0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   456b4:	tbnz	w0, #15, 45dec <aarch64_opcode_lookup@@Base+0x11e8>
   456b8:	tbnz	w0, #21, 463dc <aarch64_opcode_lookup@@Base+0x17d8>
   456bc:	tbnz	w0, #31, 471e0 <aarch64_opcode_lookup@@Base+0x25dc>
   456c0:	tst	w0, #0x1000
   456c4:	tbnz	w0, #10, 47634 <aarch64_opcode_lookup@@Base+0x2a30>
   456c8:	tbnz	w0, #11, 481a0 <aarch64_opcode_lookup@@Base+0x359c>
   456cc:	mov	w8, #0x8bd                 	// #2237
   456d0:	mov	w9, #0x851                 	// #2129
   456d4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   456d8:	tbnz	w0, #22, 45e08 <aarch64_opcode_lookup@@Base+0x1204>
   456dc:	tst	w0, #0x4000
   456e0:	mov	w8, #0x947                 	// #2375
   456e4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   456e8:	mov	w8, #0x387                 	// #903
   456ec:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   456f0:	tbnz	w0, #21, 45e18 <aarch64_opcode_lookup@@Base+0x1214>
   456f4:	tbnz	w0, #23, 463fc <aarch64_opcode_lookup@@Base+0x17f8>
   456f8:	tbnz	w0, #22, 46cb8 <aarch64_opcode_lookup@@Base+0x20b4>
   456fc:	tbnz	w0, #31, 47e84 <aarch64_opcode_lookup@@Base+0x3280>
   45700:	tst	w0, #0x40000000
   45704:	mov	w8, #0x393                 	// #915
   45708:	mov	w9, #0x390                 	// #912
   4570c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45710:	tst	w0, #0x800000
   45714:	mov	w8, #0x2ec                 	// #748
   45718:	mov	w9, #0x2e7                 	// #743
   4571c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45720:	tbnz	w0, #10, 45e34 <aarch64_opcode_lookup@@Base+0x1230>
   45724:	tbnz	w0, #13, 46410 <aarch64_opcode_lookup@@Base+0x180c>
   45728:	tst	w0, #0x800000
   4572c:	tbnz	w0, #14, 46ccc <aarch64_opcode_lookup@@Base+0x20c8>
   45730:	mov	w8, #0x1ae                 	// #430
   45734:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   45738:	tbnz	w0, #15, 45e48 <aarch64_opcode_lookup@@Base+0x1244>
   4573c:	tbnz	w0, #14, 4641c <aarch64_opcode_lookup@@Base+0x1818>
   45740:	tbnz	w0, #12, 46cd4 <aarch64_opcode_lookup@@Base+0x20d0>
   45744:	tbnz	w0, #10, 479b0 <aarch64_opcode_lookup@@Base+0x2dac>
   45748:	tbnz	w0, #23, 4868c <aarch64_opcode_lookup@@Base+0x3a88>
   4574c:	mov	w0, #0x59f                 	// #1439
   45750:	ret
   45754:	tst	w0, #0x2000
   45758:	mov	w8, #0x1dc                 	// #476
   4575c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45760:	tbnz	w0, #21, 45e60 <aarch64_opcode_lookup@@Base+0x125c>
   45764:	tbnz	w0, #31, 468bc <aarch64_opcode_lookup@@Base+0x1cb8>
   45768:	tst	w0, #0x40000000
   4576c:	mov	w8, #0x3b3                 	// #947
   45770:	mov	w9, #0x3ad                 	// #941
   45774:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45778:	tst	w0, #0x400
   4577c:	mov	w8, #0x283                 	// #643
   45780:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45784:	tbnz	w0, #12, 45e74 <aarch64_opcode_lookup@@Base+0x1270>
   45788:	tbnz	w0, #13, 4642c <aarch64_opcode_lookup@@Base+0x1828>
   4578c:	tbnz	w0, #14, 46ce0 <aarch64_opcode_lookup@@Base+0x20dc>
   45790:	tbnz	w0, #15, 479bc <aarch64_opcode_lookup@@Base+0x2db8>
   45794:	tst	w0, #0x40000000
   45798:	mov	w8, #0x2a3                 	// #675
   4579c:	mov	w9, #0x347                 	// #839
   457a0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   457a4:	tbnz	w0, #13, 45e90 <aarch64_opcode_lookup@@Base+0x128c>
   457a8:	tbnz	w0, #31, 468c4 <aarch64_opcode_lookup@@Base+0x1cc0>
   457ac:	tbnz	w0, #14, 46ab0 <aarch64_opcode_lookup@@Base+0x1eac>
   457b0:	tbnz	w0, #19, 47644 <aarch64_opcode_lookup@@Base+0x2a40>
   457b4:	tbnz	w0, #20, 481ac <aarch64_opcode_lookup@@Base+0x35a8>
   457b8:	tst	w0, #0x40000
   457bc:	tbnz	w0, #16, 48b48 <aarch64_opcode_lookup@@Base+0x3f44>
   457c0:	tbnz	w0, #17, 4936c <aarch64_opcode_lookup@@Base+0x4768>
   457c4:	mov	w8, #0x594                 	// #1428
   457c8:	mov	w9, #0x565                 	// #1381
   457cc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   457d0:	tst	w0, #0x400000
   457d4:	mov	w8, #0x376                 	// #886
   457d8:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   457dc:	tbnz	w0, #10, 45eb8 <aarch64_opcode_lookup@@Base+0x12b4>
   457e0:	tbnz	w0, #12, 46448 <aarch64_opcode_lookup@@Base+0x1844>
   457e4:	mov	w0, #0x1ac                 	// #428
   457e8:	ret
   457ec:	tbnz	w0, #30, 45ecc <aarch64_opcode_lookup@@Base+0x12c8>
   457f0:	tbnz	w0, #31, 468d8 <aarch64_opcode_lookup@@Base+0x1cd4>
   457f4:	tbnz	w0, #21, 46ac0 <aarch64_opcode_lookup@@Base+0x1ebc>
   457f8:	mov	w0, #0x6ca                 	// #1738
   457fc:	ret
   45800:	mov	w0, #0x3d0                 	// #976
   45804:	ret
   45808:	tbnz	w0, #15, 45ee4 <aarch64_opcode_lookup@@Base+0x12e0>
   4580c:	tbnz	w0, #22, 4645c <aarch64_opcode_lookup@@Base+0x1858>
   45810:	mov	w0, #0x9c                  	// #156
   45814:	ret
   45818:	mov	w8, #0x8e                  	// #142
   4581c:	mov	w9, #0x86                  	// #134
   45820:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45824:	tbnz	w0, #14, 45f00 <aarch64_opcode_lookup@@Base+0x12fc>
   45828:	tbnz	w0, #30, 46478 <aarch64_opcode_lookup@@Base+0x1874>
   4582c:	tbnz	w0, #31, 471f0 <aarch64_opcode_lookup@@Base+0x25ec>
   45830:	tst	w0, #0x10
   45834:	mov	w8, #0x53d                 	// #1341
   45838:	mov	w9, #0x526                 	// #1318
   4583c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45840:	mov	w0, #0x3d1                 	// #977
   45844:	ret
   45848:	tbnz	w0, #21, 45f18 <aarch64_opcode_lookup@@Base+0x1314>
   4584c:	tbnz	w0, #22, 46490 <aarch64_opcode_lookup@@Base+0x188c>
   45850:	tst	w0, #0x800000
   45854:	mov	w8, #0x28e                 	// #654
   45858:	mov	w9, #0x288                 	// #648
   4585c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45860:	tbnz	w0, #11, 45f20 <aarch64_opcode_lookup@@Base+0x131c>
   45864:	tbnz	w0, #12, 46498 <aarch64_opcode_lookup@@Base+0x1894>
   45868:	tbnz	w0, #13, 46cf8 <aarch64_opcode_lookup@@Base+0x20f4>
   4586c:	tbnz	w0, #14, 479d0 <aarch64_opcode_lookup@@Base+0x2dcc>
   45870:	tbnz	w0, #29, 48698 <aarch64_opcode_lookup@@Base+0x3a94>
   45874:	cmp	w0, #0x0
   45878:	mov	w8, #0x926                 	// #2342
   4587c:	mov	w9, #0x11b                 	// #283
   45880:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45884:	tbnz	w0, #13, 45f40 <aarch64_opcode_lookup@@Base+0x133c>
   45888:	tbnz	w0, #31, 468f0 <aarch64_opcode_lookup@@Base+0x1cec>
   4588c:	tbnz	w0, #21, 46ad8 <aarch64_opcode_lookup@@Base+0x1ed4>
   45890:	tst	w0, #0x10
   45894:	mov	w8, #0x572                 	// #1394
   45898:	mov	w9, #0x570                 	// #1392
   4589c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   458a0:	tbnz	w0, #31, 460a0 <aarch64_opcode_lookup@@Base+0x149c>
   458a4:	tst	w0, #0x40000000
   458a8:	mov	w8, #0x37e                 	// #894
   458ac:	mov	w9, #0x379                 	// #889
   458b0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   458b4:	tbnz	w0, #12, 45f58 <aarch64_opcode_lookup@@Base+0x1354>
   458b8:	tst	w0, #0x40000000
   458bc:	tbnz	w0, #29, 464b0 <aarch64_opcode_lookup@@Base+0x18ac>
   458c0:	mov	w8, #0x17e                 	// #382
   458c4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   458c8:	tbnz	w0, #30, 45f6c <aarch64_opcode_lookup@@Base+0x1368>
   458cc:	tbnz	w0, #31, 468fc <aarch64_opcode_lookup@@Base+0x1cf8>
   458d0:	tbnz	w0, #21, 46ae0 <aarch64_opcode_lookup@@Base+0x1edc>
   458d4:	mov	w0, #0x6cf                 	// #1743
   458d8:	ret
   458dc:	tbnz	w0, #13, 45f84 <aarch64_opcode_lookup@@Base+0x1380>
   458e0:	mov	w0, #0x24d                 	// #589
   458e4:	ret
   458e8:	tbnz	w0, #15, 45f94 <aarch64_opcode_lookup@@Base+0x1390>
   458ec:	tbnz	w0, #21, 464b8 <aarch64_opcode_lookup@@Base+0x18b4>
   458f0:	tbnz	w0, #31, 47208 <aarch64_opcode_lookup@@Base+0x2604>
   458f4:	tbnz	w0, #10, 47660 <aarch64_opcode_lookup@@Base+0x2a5c>
   458f8:	tbnz	w0, #11, 481b4 <aarch64_opcode_lookup@@Base+0x35b0>
   458fc:	tst	w0, #0x1000
   45900:	mov	w8, #0x86c                 	// #2156
   45904:	mov	w9, #0x888                 	// #2184
   45908:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4590c:	tbnz	w0, #12, 45fb4 <aarch64_opcode_lookup@@Base+0x13b0>
   45910:	tbnz	w0, #13, 464d4 <aarch64_opcode_lookup@@Base+0x18d0>
   45914:	tbnz	w0, #14, 46d0c <aarch64_opcode_lookup@@Base+0x2108>
   45918:	tbnz	w0, #30, 479ec <aarch64_opcode_lookup@@Base+0x2de8>
   4591c:	mov	w0, #0x2c8                 	// #712
   45920:	ret
   45924:	tst	w0, #0x800000
   45928:	mov	w8, #0x3a6                 	// #934
   4592c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45930:	tbnz	w0, #13, 45fc8 <aarch64_opcode_lookup@@Base+0x13c4>
   45934:	mov	w8, #0x25f                 	// #607
   45938:	mov	w9, #0x25b                 	// #603
   4593c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45940:	tbnz	w0, #14, 45fd4 <aarch64_opcode_lookup@@Base+0x13d0>
   45944:	tbnz	w0, #15, 464e4 <aarch64_opcode_lookup@@Base+0x18e0>
   45948:	tbnz	w0, #23, 46d14 <aarch64_opcode_lookup@@Base+0x2110>
   4594c:	mov	w0, #0x5aa                 	// #1450
   45950:	ret
   45954:	tst	w0, #0x400
   45958:	mov	w8, #0x285                 	// #645
   4595c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45960:	tbnz	w0, #29, 45fe8 <aarch64_opcode_lookup@@Base+0x13e4>
   45964:	tbnz	w0, #30, 464fc <aarch64_opcode_lookup@@Base+0x18f8>
   45968:	mov	w0, #0x363                 	// #867
   4596c:	ret
   45970:	tbnz	w0, #13, 46004 <aarch64_opcode_lookup@@Base+0x1400>
   45974:	tbnz	w0, #31, 46914 <aarch64_opcode_lookup@@Base+0x1d10>
   45978:	tst	w0, #0x4000
   4597c:	mov	w8, #0x5af                 	// #1455
   45980:	mov	w9, #0x591                 	// #1425
   45984:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45988:	mov	w8, #0x383                 	// #899
   4598c:	mov	w9, #0x37f                 	// #895
   45990:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45994:	tbnz	w0, #11, 46014 <aarch64_opcode_lookup@@Base+0x1410>
   45998:	tbnz	w0, #12, 46518 <aarch64_opcode_lookup@@Base+0x1914>
   4599c:	tst	w0, #0x2000
   459a0:	mov	w8, #0x266                 	// #614
   459a4:	mov	w9, #0x262                 	// #610
   459a8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   459ac:	tbnz	w0, #22, 460a8 <aarch64_opcode_lookup@@Base+0x14a4>
   459b0:	tst	w0, #0x800000
   459b4:	mov	w8, #0x92b                 	// #2347
   459b8:	mov	w9, #0x929                 	// #2345
   459bc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   459c0:	tbnz	w0, #14, 460b4 <aarch64_opcode_lookup@@Base+0x14b0>
   459c4:	tbnz	w0, #15, 46928 <aarch64_opcode_lookup@@Base+0x1d24>
   459c8:	mov	w0, #0x6f6                 	// #1782
   459cc:	ret
   459d0:	tbnz	w0, #11, 46134 <aarch64_opcode_lookup@@Base+0x1530>
   459d4:	tbnz	w0, #12, 46b04 <aarch64_opcode_lookup@@Base+0x1f00>
   459d8:	tbnz	w0, #13, 47674 <aarch64_opcode_lookup@@Base+0x2a70>
   459dc:	tbnz	w0, #22, 481c8 <aarch64_opcode_lookup@@Base+0x35c4>
   459e0:	mov	w0, #0x95                  	// #149
   459e4:	ret
   459e8:	tst	w0, #0x8000
   459ec:	mov	w8, #0x578                 	// #1400
   459f0:	mov	w9, #0x549                 	// #1353
   459f4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   459f8:	tbnz	w0, #15, 46148 <aarch64_opcode_lookup@@Base+0x1544>
   459fc:	tbnz	w0, #10, 46b1c <aarch64_opcode_lookup@@Base+0x1f18>
   45a00:	tbnz	w0, #11, 47684 <aarch64_opcode_lookup@@Base+0x2a80>
   45a04:	tbnz	w0, #12, 481d8 <aarch64_opcode_lookup@@Base+0x35d4>
   45a08:	tbnz	w0, #13, 48b58 <aarch64_opcode_lookup@@Base+0x3f54>
   45a0c:	tbnz	w0, #20, 49378 <aarch64_opcode_lookup@@Base+0x4774>
   45a10:	mov	w0, #0x7ed                 	// #2029
   45a14:	ret
   45a18:	tbnz	w0, #30, 46520 <aarch64_opcode_lookup@@Base+0x191c>
   45a1c:	tbnz	w0, #31, 47218 <aarch64_opcode_lookup@@Base+0x2614>
   45a20:	tbnz	w0, #10, 47690 <aarch64_opcode_lookup@@Base+0x2a8c>
   45a24:	tbnz	w0, #11, 481e4 <aarch64_opcode_lookup@@Base+0x35e0>
   45a28:	tst	w0, #0x1000
   45a2c:	mov	w8, #0x727                 	// #1831
   45a30:	mov	w9, #0x4fa                 	// #1274
   45a34:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45a38:	cmp	w0, #0x0
   45a3c:	mov	w8, #0x3b6                 	// #950
   45a40:	mov	w9, #0x3fd                 	// #1021
   45a44:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45a48:	tst	w0, #0x40000000
   45a4c:	tbnz	w0, #14, 4653c <aarch64_opcode_lookup@@Base+0x1938>
   45a50:	tbnz	w0, #29, 46d20 <aarch64_opcode_lookup@@Base+0x211c>
   45a54:	mov	w8, #0x62                  	// #98
   45a58:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45a5c:	tbnz	w0, #14, 4654c <aarch64_opcode_lookup@@Base+0x1948>
   45a60:	tbnz	w0, #31, 47228 <aarch64_opcode_lookup@@Base+0x2624>
   45a64:	tst	w0, #0x10
   45a68:	mov	w8, #0x53c                 	// #1340
   45a6c:	mov	w9, #0x525                 	// #1317
   45a70:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45a74:	cmp	w0, #0x0
   45a78:	mov	w8, #0x3ba                 	// #954
   45a7c:	mov	w9, #0x3fe                 	// #1022
   45a80:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45a84:	tbnz	w0, #31, 46934 <aarch64_opcode_lookup@@Base+0x1d30>
   45a88:	tbnz	w0, #21, 46b30 <aarch64_opcode_lookup@@Base+0x1f2c>
   45a8c:	tbnz	w0, #10, 476a4 <aarch64_opcode_lookup@@Base+0x2aa0>
   45a90:	tbnz	w0, #11, 481ec <aarch64_opcode_lookup@@Base+0x35e8>
   45a94:	mov	w0, #0x564                 	// #1380
   45a98:	ret
   45a9c:	mov	w0, #0x374                 	// #884
   45aa0:	ret
   45aa4:	tbnz	w0, #14, 46560 <aarch64_opcode_lookup@@Base+0x195c>
   45aa8:	tst	w0, #0x40000000
   45aac:	tbnz	w0, #29, 46d28 <aarch64_opcode_lookup@@Base+0x2124>
   45ab0:	mov	w8, #0x6b                  	// #107
   45ab4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45ab8:	tbnz	w0, #30, 4656c <aarch64_opcode_lookup@@Base+0x1968>
   45abc:	tbnz	w0, #31, 47238 <aarch64_opcode_lookup@@Base+0x2634>
   45ac0:	tbnz	w0, #10, 476b0 <aarch64_opcode_lookup@@Base+0x2aac>
   45ac4:	tbnz	w0, #11, 481fc <aarch64_opcode_lookup@@Base+0x35f8>
   45ac8:	tst	w0, #0x800000
   45acc:	tbnz	w0, #22, 48b60 <aarch64_opcode_lookup@@Base+0x3f5c>
   45ad0:	mov	w8, #0x559                 	// #1369
   45ad4:	mov	w9, #0x502                 	// #1282
   45ad8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45adc:	tst	w0, #0x2000
   45ae0:	mov	w8, #0x1d4                 	// #468
   45ae4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45ae8:	tbnz	w0, #31, 4693c <aarch64_opcode_lookup@@Base+0x1d38>
   45aec:	tst	w0, #0x40000000
   45af0:	mov	w8, #0x3f1                 	// #1009
   45af4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45af8:	mov	w8, #0x2f9                 	// #761
   45afc:	mov	w9, #0x2fd                 	// #765
   45b00:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45b04:	tbnz	w0, #21, 46578 <aarch64_opcode_lookup@@Base+0x1974>
   45b08:	tbnz	w0, #31, 47248 <aarch64_opcode_lookup@@Base+0x2644>
   45b0c:	tbnz	w0, #10, 476bc <aarch64_opcode_lookup@@Base+0x2ab8>
   45b10:	tbnz	w0, #11, 4820c <aarch64_opcode_lookup@@Base+0x3608>
   45b14:	tst	w0, #0x1000
   45b18:	mov	w8, #0x80f                 	// #2063
   45b1c:	mov	w9, #0x84f                 	// #2127
   45b20:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45b24:	tbnz	w0, #23, 4658c <aarch64_opcode_lookup@@Base+0x1988>
   45b28:	tst	w0, #0x40000000
   45b2c:	mov	w8, #0x294                 	// #660
   45b30:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45b34:	tbnz	w0, #12, 465a8 <aarch64_opcode_lookup@@Base+0x19a4>
   45b38:	tbnz	w0, #13, 46d30 <aarch64_opcode_lookup@@Base+0x212c>
   45b3c:	tbnz	w0, #14, 479fc <aarch64_opcode_lookup@@Base+0x2df8>
   45b40:	tbnz	w0, #15, 486a0 <aarch64_opcode_lookup@@Base+0x3a9c>
   45b44:	tbnz	w0, #22, 48fd8 <aarch64_opcode_lookup@@Base+0x43d4>
   45b48:	tbnz	w0, #23, 496b8 <aarch64_opcode_lookup@@Base+0x4ab4>
   45b4c:	tbnz	w0, #31, 49a88 <aarch64_opcode_lookup@@Base+0x4e84>
   45b50:	tst	w0, #0x40000000
   45b54:	mov	w8, #0x40d                 	// #1037
   45b58:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45b5c:	tst	w0, #0x2000
   45b60:	mov	w8, #0x1d8                 	// #472
   45b64:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45b68:	tbnz	w0, #31, 46944 <aarch64_opcode_lookup@@Base+0x1d40>
   45b6c:	tst	w0, #0x40000000
   45b70:	mov	w8, #0x3f7                 	// #1015
   45b74:	mov	w9, #0x3f4                 	// #1012
   45b78:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45b7c:	tbnz	w0, #30, 465c8 <aarch64_opcode_lookup@@Base+0x19c4>
   45b80:	mov	w0, #0x361                 	// #865
   45b84:	ret
   45b88:	tbnz	w0, #31, 4694c <aarch64_opcode_lookup@@Base+0x1d48>
   45b8c:	tbnz	w0, #4, 46b38 <aarch64_opcode_lookup@@Base+0x1f34>
   45b90:	tbnz	w0, #20, 476cc <aarch64_opcode_lookup@@Base+0x2ac8>
   45b94:	tst	w0, #0x400000
   45b98:	mov	w8, #0x519                 	// #1305
   45b9c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45ba0:	tst	w0, #0x400000
   45ba4:	mov	w8, #0x372                 	// #882
   45ba8:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45bac:	tbnz	w0, #30, 465dc <aarch64_opcode_lookup@@Base+0x19d8>
   45bb0:	tbnz	w0, #31, 47258 <aarch64_opcode_lookup@@Base+0x2654>
   45bb4:	tbnz	w0, #11, 476dc <aarch64_opcode_lookup@@Base+0x2ad8>
   45bb8:	tbnz	w0, #12, 48218 <aarch64_opcode_lookup@@Base+0x3614>
   45bbc:	tst	w0, #0x400
   45bc0:	mov	w8, #0x5d3                 	// #1491
   45bc4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45bc8:	mov	w8, #0x1cb                 	// #459
   45bcc:	mov	w9, #0x1c9                 	// #457
   45bd0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45bd4:	tbnz	w0, #31, 46964 <aarch64_opcode_lookup@@Base+0x1d60>
   45bd8:	tbnz	w0, #17, 46b44 <aarch64_opcode_lookup@@Base+0x1f40>
   45bdc:	tbnz	w0, #18, 476ec <aarch64_opcode_lookup@@Base+0x2ae8>
   45be0:	tst	w0, #0x100000
   45be4:	mov	w8, #0x812                 	// #2066
   45be8:	mov	w9, #0x569                 	// #1385
   45bec:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45bf0:	mov	w8, #0x1d1                 	// #465
   45bf4:	mov	w9, #0x1cd                 	// #461
   45bf8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45bfc:	mov	w0, #0x289                 	// #649
   45c00:	ret
   45c04:	tbnz	w0, #12, 465e8 <aarch64_opcode_lookup@@Base+0x19e4>
   45c08:	tbnz	w0, #13, 46d4c <aarch64_opcode_lookup@@Base+0x2148>
   45c0c:	tbnz	w0, #14, 47a18 <aarch64_opcode_lookup@@Base+0x2e14>
   45c10:	tbnz	w0, #29, 486b8 <aarch64_opcode_lookup@@Base+0x3ab4>
   45c14:	tbnz	w0, #31, 49328 <aarch64_opcode_lookup@@Base+0x4724>
   45c18:	tbnz	w0, #16, 4938c <aarch64_opcode_lookup@@Base+0x4788>
   45c1c:	mov	w0, #0xaa                  	// #170
   45c20:	ret
   45c24:	tst	w0, #0x800000
   45c28:	tbnz	w0, #13, 46604 <aarch64_opcode_lookup@@Base+0x1a00>
   45c2c:	tbnz	w0, #22, 46d60 <aarch64_opcode_lookup@@Base+0x215c>
   45c30:	mov	w8, #0x618                 	// #1560
   45c34:	mov	w9, #0x624                 	// #1572
   45c38:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45c3c:	mov	w0, #0x375                 	// #885
   45c40:	ret
   45c44:	tbnz	w0, #13, 46614 <aarch64_opcode_lookup@@Base+0x1a10>
   45c48:	tst	w0, #0x20000000
   45c4c:	mov	w8, #0x91                  	// #145
   45c50:	mov	w9, #0x89                  	// #137
   45c54:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45c58:	tbnz	w0, #30, 46628 <aarch64_opcode_lookup@@Base+0x1a24>
   45c5c:	tbnz	w0, #31, 47268 <aarch64_opcode_lookup@@Base+0x2664>
   45c60:	tbnz	w0, #10, 476fc <aarch64_opcode_lookup@@Base+0x2af8>
   45c64:	tbnz	w0, #11, 4822c <aarch64_opcode_lookup@@Base+0x3628>
   45c68:	tst	w0, #0x1000
   45c6c:	mov	w8, #0x885                 	// #2181
   45c70:	mov	w9, #0x83c                 	// #2108
   45c74:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45c78:	mov	w0, #0x241                 	// #577
   45c7c:	ret
   45c80:	tbnz	w0, #21, 46634 <aarch64_opcode_lookup@@Base+0x1a30>
   45c84:	tbnz	w0, #31, 47278 <aarch64_opcode_lookup@@Base+0x2674>
   45c88:	tbnz	w0, #10, 47710 <aarch64_opcode_lookup@@Base+0x2b0c>
   45c8c:	tst	w0, #0x1000
   45c90:	tbnz	w0, #11, 48234 <aarch64_opcode_lookup@@Base+0x3630>
   45c94:	mov	w8, #0x91f                 	// #2335
   45c98:	mov	w9, #0x8b6                 	// #2230
   45c9c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45ca0:	tbnz	w0, #12, 46648 <aarch64_opcode_lookup@@Base+0x1a44>
   45ca4:	tbnz	w0, #13, 46d6c <aarch64_opcode_lookup@@Base+0x2168>
   45ca8:	tbnz	w0, #14, 47a30 <aarch64_opcode_lookup@@Base+0x2e2c>
   45cac:	tst	w0, #0x10000
   45cb0:	mov	w8, #0x2b6                 	// #694
   45cb4:	mov	w9, #0x2ae                 	// #686
   45cb8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45cbc:	tbnz	w0, #30, 4665c <aarch64_opcode_lookup@@Base+0x1a58>
   45cc0:	cmp	w0, #0x0
   45cc4:	mov	w8, #0x36f                 	// #879
   45cc8:	mov	w9, #0x367                 	// #871
   45ccc:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45cd0:	mov	w8, #0x260                 	// #608
   45cd4:	mov	w9, #0x25c                 	// #604
   45cd8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45cdc:	tbnz	w0, #12, 46664 <aarch64_opcode_lookup@@Base+0x1a60>
   45ce0:	tbnz	w0, #13, 46d7c <aarch64_opcode_lookup@@Base+0x2178>
   45ce4:	tst	w0, #0x4000
   45ce8:	mov	w8, #0x248                 	// #584
   45cec:	mov	w9, #0x24a                 	// #586
   45cf0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45cf4:	tbnz	w0, #31, 46978 <aarch64_opcode_lookup@@Base+0x1d74>
   45cf8:	tbnz	w0, #16, 46b54 <aarch64_opcode_lookup@@Base+0x1f50>
   45cfc:	tbnz	w0, #17, 47724 <aarch64_opcode_lookup@@Base+0x2b20>
   45d00:	tbnz	w0, #18, 48240 <aarch64_opcode_lookup@@Base+0x363c>
   45d04:	tst	w0, #0x100000
   45d08:	tbnz	w0, #19, 48b6c <aarch64_opcode_lookup@@Base+0x3f68>
   45d0c:	mov	w8, #0x6d0                 	// #1744
   45d10:	mov	w9, #0x4fb                 	// #1275
   45d14:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45d18:	mov	w0, #0x1b7                 	// #439
   45d1c:	ret
   45d20:	cmp	w0, #0x0
   45d24:	mov	w8, #0x3b7                 	// #951
   45d28:	mov	w9, #0x3ff                 	// #1023
   45d2c:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45d30:	mov	w0, #0x83                  	// #131
   45d34:	ret
   45d38:	cmp	w0, #0x0
   45d3c:	mov	w8, #0x3bb                 	// #955
   45d40:	mov	w9, #0x400                 	// #1024
   45d44:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45d48:	tst	w0, #0x800000
   45d4c:	mov	w8, #0x282                 	// #642
   45d50:	mov	w9, #0x27f                 	// #639
   45d54:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45d58:	tbnz	w0, #11, 46678 <aarch64_opcode_lookup@@Base+0x1a74>
   45d5c:	tst	w0, #0x4000
   45d60:	tbnz	w0, #12, 46d8c <aarch64_opcode_lookup@@Base+0x2188>
   45d64:	tbnz	w0, #13, 47a40 <aarch64_opcode_lookup@@Base+0x2e3c>
   45d68:	mov	w8, #0x147                 	// #327
   45d6c:	mov	w9, #0x140                 	// #320
   45d70:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45d74:	tbnz	w0, #30, 46690 <aarch64_opcode_lookup@@Base+0x1a8c>
   45d78:	tbnz	w0, #31, 47280 <aarch64_opcode_lookup@@Base+0x267c>
   45d7c:	tst	w0, #0x1000
   45d80:	tbnz	w0, #4, 47734 <aarch64_opcode_lookup@@Base+0x2b30>
   45d84:	mov	w8, #0x913                 	// #2323
   45d88:	mov	w9, #0x54a                 	// #1354
   45d8c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45d90:	tbnz	w0, #14, 46698 <aarch64_opcode_lookup@@Base+0x1a94>
   45d94:	tst	w0, #0x40000000
   45d98:	mov	w8, #0x6d                  	// #109
   45d9c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45da0:	tbnz	w0, #21, 466b0 <aarch64_opcode_lookup@@Base+0x1aac>
   45da4:	tbnz	w0, #31, 4728c <aarch64_opcode_lookup@@Base+0x2688>
   45da8:	tbnz	w0, #16, 47740 <aarch64_opcode_lookup@@Base+0x2b3c>
   45dac:	tbnz	w0, #17, 48248 <aarch64_opcode_lookup@@Base+0x3644>
   45db0:	tbnz	w0, #18, 48b78 <aarch64_opcode_lookup@@Base+0x3f74>
   45db4:	tst	w0, #0x80000
   45db8:	mov	w8, #0x871                 	// #2161
   45dbc:	mov	w9, #0x8fb                 	// #2299
   45dc0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45dc4:	tbnz	w0, #31, 46990 <aarch64_opcode_lookup@@Base+0x1d8c>
   45dc8:	tst	w0, #0x40000000
   45dcc:	mov	w8, #0x3f8                 	// #1016
   45dd0:	mov	w9, #0x3f5                 	// #1013
   45dd4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45dd8:	tbnz	w0, #11, 466c0 <aarch64_opcode_lookup@@Base+0x1abc>
   45ddc:	tst	w0, #0x2000
   45de0:	mov	w8, #0x22c                 	// #556
   45de4:	mov	w9, #0x217                 	// #535
   45de8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45dec:	tbnz	w0, #21, 466cc <aarch64_opcode_lookup@@Base+0x1ac8>
   45df0:	tbnz	w0, #31, 4729c <aarch64_opcode_lookup@@Base+0x2698>
   45df4:	tbnz	w0, #11, 4775c <aarch64_opcode_lookup@@Base+0x2b58>
   45df8:	tbnz	w0, #10, 48250 <aarch64_opcode_lookup@@Base+0x364c>
   45dfc:	tbnz	w0, #12, 48b88 <aarch64_opcode_lookup@@Base+0x3f84>
   45e00:	mov	w0, #0x849                 	// #2121
   45e04:	ret
   45e08:	tbnz	w0, #23, 466e0 <aarch64_opcode_lookup@@Base+0x1adc>
   45e0c:	tst	w0, #0x40000000
   45e10:	mov	w8, #0x292                 	// #658
   45e14:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45e18:	tbnz	w0, #23, 466f8 <aarch64_opcode_lookup@@Base+0x1af4>
   45e1c:	tbnz	w0, #22, 46d9c <aarch64_opcode_lookup@@Base+0x2198>
   45e20:	tbnz	w0, #31, 47e8c <aarch64_opcode_lookup@@Base+0x3288>
   45e24:	tst	w0, #0x40000000
   45e28:	mov	w8, #0x389                 	// #905
   45e2c:	mov	w9, #0x384                 	// #900
   45e30:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45e34:	tbnz	w0, #12, 46710 <aarch64_opcode_lookup@@Base+0x1b0c>
   45e38:	tst	w0, #0x2000
   45e3c:	mov	w8, #0x250                 	// #592
   45e40:	mov	w9, #0x24e                 	// #590
   45e44:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45e48:	tbnz	w0, #22, 46724 <aarch64_opcode_lookup@@Base+0x1b20>
   45e4c:	tbnz	w0, #31, 472b0 <aarch64_opcode_lookup@@Base+0x26ac>
   45e50:	tst	w0, #0x400
   45e54:	mov	w8, #0x821                 	// #2081
   45e58:	mov	w9, #0x81f                 	// #2079
   45e5c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45e60:	tbnz	w0, #31, 46998 <aarch64_opcode_lookup@@Base+0x1d94>
   45e64:	tst	w0, #0x40000000
   45e68:	mov	w8, #0x3f9                 	// #1017
   45e6c:	mov	w9, #0x3f6                 	// #1014
   45e70:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45e74:	tbnz	w0, #13, 46730 <aarch64_opcode_lookup@@Base+0x1b2c>
   45e78:	tbnz	w0, #14, 46db0 <aarch64_opcode_lookup@@Base+0x21ac>
   45e7c:	tbnz	w0, #15, 47a4c <aarch64_opcode_lookup@@Base+0x2e48>
   45e80:	tst	w0, #0x40000000
   45e84:	mov	w8, #0x2a4                 	// #676
   45e88:	mov	w9, #0x349                 	// #841
   45e8c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45e90:	tbnz	w0, #14, 4674c <aarch64_opcode_lookup@@Base+0x1b48>
   45e94:	tbnz	w0, #31, 472b8 <aarch64_opcode_lookup@@Base+0x26b4>
   45e98:	tbnz	w0, #16, 4776c <aarch64_opcode_lookup@@Base+0x2b68>
   45e9c:	tbnz	w0, #19, 4825c <aarch64_opcode_lookup@@Base+0x3658>
   45ea0:	tbnz	w0, #17, 48b98 <aarch64_opcode_lookup@@Base+0x3f94>
   45ea4:	tbnz	w0, #18, 493a0 <aarch64_opcode_lookup@@Base+0x479c>
   45ea8:	tst	w0, #0x100000
   45eac:	mov	w8, #0x713                 	// #1811
   45eb0:	mov	w9, #0x5b9                 	// #1465
   45eb4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45eb8:	tbnz	w0, #11, 46758 <aarch64_opcode_lookup@@Base+0x1b54>
   45ebc:	tst	w0, #0x1000
   45ec0:	mov	w8, #0x254                 	// #596
   45ec4:	mov	w9, #0x256                 	// #598
   45ec8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45ecc:	tbnz	w0, #21, 46768 <aarch64_opcode_lookup@@Base+0x1b64>
   45ed0:	tst	w0, #0x800000
   45ed4:	tbnz	w0, #22, 46dbc <aarch64_opcode_lookup@@Base+0x21b8>
   45ed8:	mov	w8, #0x82c                 	// #2092
   45edc:	mov	w9, #0x829                 	// #2089
   45ee0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45ee4:	tbnz	w0, #13, 46778 <aarch64_opcode_lookup@@Base+0x1b74>
   45ee8:	tbnz	w0, #14, 46dc8 <aarch64_opcode_lookup@@Base+0x21c4>
   45eec:	tbnz	w0, #11, 47a5c <aarch64_opcode_lookup@@Base+0x2e58>
   45ef0:	tst	w0, #0x1000
   45ef4:	mov	w8, #0x921                 	// #2337
   45ef8:	mov	w9, #0x172                 	// #370
   45efc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45f00:	tbnz	w0, #30, 4678c <aarch64_opcode_lookup@@Base+0x1b88>
   45f04:	tbnz	w0, #31, 472cc <aarch64_opcode_lookup@@Base+0x26c8>
   45f08:	tst	w0, #0x10
   45f0c:	mov	w8, #0x538                 	// #1336
   45f10:	mov	w9, #0x536                 	// #1334
   45f14:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45f18:	mov	w0, #0x28a                 	// #650
   45f1c:	ret
   45f20:	tbnz	w0, #12, 4679c <aarch64_opcode_lookup@@Base+0x1b98>
   45f24:	tbnz	w0, #13, 46dd0 <aarch64_opcode_lookup@@Base+0x21cc>
   45f28:	tbnz	w0, #14, 47a64 <aarch64_opcode_lookup@@Base+0x2e60>
   45f2c:	tbnz	w0, #29, 486c4 <aarch64_opcode_lookup@@Base+0x3ac0>
   45f30:	cmp	w0, #0x0
   45f34:	mov	w8, #0x92a                 	// #2346
   45f38:	mov	w9, #0x11c                 	// #284
   45f3c:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   45f40:	tbnz	w0, #21, 467b4 <aarch64_opcode_lookup@@Base+0x1bb0>
   45f44:	tbnz	w0, #31, 472e0 <aarch64_opcode_lookup@@Base+0x26dc>
   45f48:	tst	w0, #0x10
   45f4c:	mov	w8, #0x576                 	// #1398
   45f50:	mov	w9, #0x56e                 	// #1390
   45f54:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45f58:	tbnz	w0, #13, 467c0 <aarch64_opcode_lookup@@Base+0x1bbc>
   45f5c:	tst	w0, #0x40000000
   45f60:	tbnz	w0, #29, 46de4 <aarch64_opcode_lookup@@Base+0x21e0>
   45f64:	mov	w8, #0x182                 	// #386
   45f68:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   45f6c:	tbnz	w0, #21, 467d0 <aarch64_opcode_lookup@@Base+0x1bcc>
   45f70:	tst	w0, #0x800000
   45f74:	tbnz	w0, #22, 46dec <aarch64_opcode_lookup@@Base+0x21e8>
   45f78:	mov	w8, #0x6f7                 	// #1783
   45f7c:	mov	w9, #0x6e9                 	// #1769
   45f80:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45f84:	tst	w0, #0x800000
   45f88:	mov	w8, #0x245                 	// #581
   45f8c:	mov	w9, #0x23f                 	// #575
   45f90:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45f94:	tbnz	w0, #21, 467ec <aarch64_opcode_lookup@@Base+0x1be8>
   45f98:	tbnz	w0, #31, 472f4 <aarch64_opcode_lookup@@Base+0x26f0>
   45f9c:	tst	w0, #0x1000
   45fa0:	tbnz	w0, #10, 47788 <aarch64_opcode_lookup@@Base+0x2b84>
   45fa4:	tbnz	w0, #11, 48278 <aarch64_opcode_lookup@@Base+0x3674>
   45fa8:	mov	w8, #0x8b1                 	// #2225
   45fac:	mov	w9, #0x8b8                 	// #2232
   45fb0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45fb4:	tbnz	w0, #13, 46814 <aarch64_opcode_lookup@@Base+0x1c10>
   45fb8:	tst	w0, #0x4000
   45fbc:	mov	w8, #0x2de                 	// #734
   45fc0:	mov	w9, #0x2bc                 	// #700
   45fc4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   45fc8:	mov	w8, #0x261                 	// #609
   45fcc:	mov	w9, #0x25d                 	// #605
   45fd0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   45fd4:	tbnz	w0, #15, 4681c <aarch64_opcode_lookup@@Base+0x1c18>
   45fd8:	tbnz	w0, #22, 46df8 <aarch64_opcode_lookup@@Base+0x21f4>
   45fdc:	tbnz	w0, #23, 47a74 <aarch64_opcode_lookup@@Base+0x2e70>
   45fe0:	mov	w0, #0x775                 	// #1909
   45fe4:	ret
   45fe8:	tbnz	w0, #12, 46838 <aarch64_opcode_lookup@@Base+0x1c34>
   45fec:	tbnz	w0, #13, 46e08 <aarch64_opcode_lookup@@Base+0x2204>
   45ff0:	tbnz	w0, #14, 47a88 <aarch64_opcode_lookup@@Base+0x2e84>
   45ff4:	tst	w0, #0x8000
   45ff8:	mov	w8, #0x24b                 	// #587
   45ffc:	mov	w9, #0x237                 	// #567
   46000:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46004:	tbnz	w0, #14, 46848 <aarch64_opcode_lookup@@Base+0x1c44>
   46008:	tbnz	w0, #31, 47308 <aarch64_opcode_lookup@@Base+0x2704>
   4600c:	mov	w0, #0x5a6                 	// #1446
   46010:	ret
   46014:	tbnz	w0, #12, 46854 <aarch64_opcode_lookup@@Base+0x1c50>
   46018:	mov	w0, #0x263                 	// #611
   4601c:	ret
   46020:	tbnz	w0, #0, 469a0 <aarch64_opcode_lookup@@Base+0x1d9c>
   46024:	tbnz	w0, #1, 4731c <aarch64_opcode_lookup@@Base+0x2718>
   46028:	tbnz	w0, #21, 47e94 <aarch64_opcode_lookup@@Base+0x3290>
   4602c:	mov	w0, #0x2f1                 	// #753
   46030:	ret
   46034:	mov	w0, #0x92c                 	// #2348
   46038:	ret
   4603c:	tbnz	w0, #14, 469b4 <aarch64_opcode_lookup@@Base+0x1db0>
   46040:	tst	w0, #0x800000
   46044:	mov	w8, #0x95f                 	// #2399
   46048:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   4604c:	tbnz	w0, #14, 469cc <aarch64_opcode_lookup@@Base+0x1dc8>
   46050:	tbnz	w0, #15, 4732c <aarch64_opcode_lookup@@Base+0x2728>
   46054:	tst	w0, #0x800000
   46058:	mov	w8, #0x963                 	// #2403
   4605c:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   46060:	tbnz	w0, #15, 469e4 <aarch64_opcode_lookup@@Base+0x1de0>
   46064:	tbnz	w0, #23, 47344 <aarch64_opcode_lookup@@Base+0x2740>
   46068:	tst	w0, #0x200000
   4606c:	mov	w8, #0x634                 	// #1588
   46070:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   46074:	tbnz	w0, #22, 469fc <aarch64_opcode_lookup@@Base+0x1df8>
   46078:	tbnz	w0, #21, 47354 <aarch64_opcode_lookup@@Base+0x2750>
   4607c:	tst	w0, #0x800000
   46080:	mov	w8, #0x82d                 	// #2093
   46084:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   46088:	tbnz	w0, #13, 46a0c <aarch64_opcode_lookup@@Base+0x1e08>
   4608c:	tbnz	w0, #22, 47368 <aarch64_opcode_lookup@@Base+0x2764>
   46090:	mov	w0, #0x747                 	// #1863
   46094:	ret
   46098:	mov	w0, #0x380                 	// #896
   4609c:	ret
   460a0:	mov	w0, #0x381                 	// #897
   460a4:	ret
   460a8:	tbnz	w0, #15, 46a24 <aarch64_opcode_lookup@@Base+0x1e20>
   460ac:	mov	w0, #0x92d                 	// #2349
   460b0:	ret
   460b4:	tbnz	w0, #15, 46a3c <aarch64_opcode_lookup@@Base+0x1e38>
   460b8:	tbnz	w0, #23, 47378 <aarch64_opcode_lookup@@Base+0x2774>
   460bc:	tst	w0, #0x200000
   460c0:	mov	w8, #0x698                 	// #1688
   460c4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   460c8:	tbnz	w0, #12, 46b68 <aarch64_opcode_lookup@@Base+0x1f64>
   460cc:	tst	w0, #0x4000
   460d0:	mov	w8, #0x10a                 	// #266
   460d4:	mov	w9, #0x107                 	// #263
   460d8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   460dc:	mov	w8, #0x558                 	// #1368
   460e0:	mov	w9, #0x55a                 	// #1370
   460e4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   460e8:	tbnz	w0, #11, 46b7c <aarch64_opcode_lookup@@Base+0x1f78>
   460ec:	tst	w0, #0x4000
   460f0:	tbnz	w0, #12, 47798 <aarch64_opcode_lookup@@Base+0x2b94>
   460f4:	tbnz	w0, #13, 48284 <aarch64_opcode_lookup@@Base+0x3680>
   460f8:	mov	w8, #0x113                 	// #275
   460fc:	mov	w9, #0x10c                 	// #268
   46100:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46104:	tbnz	w0, #15, 46b94 <aarch64_opcode_lookup@@Base+0x1f90>
   46108:	tbnz	w0, #10, 477a8 <aarch64_opcode_lookup@@Base+0x2ba4>
   4610c:	tbnz	w0, #11, 48290 <aarch64_opcode_lookup@@Base+0x368c>
   46110:	tst	w0, #0x1000
   46114:	mov	w8, #0x7a1                 	// #1953
   46118:	mov	w9, #0x556                 	// #1366
   4611c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46120:	tbnz	w0, #10, 46bac <aarch64_opcode_lookup@@Base+0x1fa8>
   46124:	tbnz	w0, #12, 477b0 <aarch64_opcode_lookup@@Base+0x2bac>
   46128:	tbnz	w0, #30, 4829c <aarch64_opcode_lookup@@Base+0x3698>
   4612c:	mov	w0, #0x508                 	// #1288
   46130:	ret
   46134:	tbnz	w0, #12, 46bc4 <aarch64_opcode_lookup@@Base+0x1fc0>
   46138:	tbnz	w0, #13, 477bc <aarch64_opcode_lookup@@Base+0x2bb8>
   4613c:	tbnz	w0, #22, 482a8 <aarch64_opcode_lookup@@Base+0x36a4>
   46140:	mov	w0, #0x96                  	// #150
   46144:	ret
   46148:	mov	w0, #0x71c                 	// #1820
   4614c:	ret
   46150:	tbnz	w0, #31, 47380 <aarch64_opcode_lookup@@Base+0x277c>
   46154:	tbnz	w0, #12, 477cc <aarch64_opcode_lookup@@Base+0x2bc8>
   46158:	tst	w0, #0x800
   4615c:	tbnz	w0, #10, 482b8 <aarch64_opcode_lookup@@Base+0x36b4>
   46160:	mov	w8, #0x877                 	// #2167
   46164:	mov	w9, #0x719                 	// #1817
   46168:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4616c:	tbnz	w0, #29, 46e14 <aarch64_opcode_lookup@@Base+0x2210>
   46170:	tst	w0, #0x40000000
   46174:	mov	w8, #0x943                 	// #2371
   46178:	mov	w9, #0x93f                 	// #2367
   4617c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46180:	tbnz	w0, #31, 47390 <aarch64_opcode_lookup@@Base+0x278c>
   46184:	tst	w0, #0x10
   46188:	mov	w8, #0x52b                 	// #1323
   4618c:	mov	w9, #0x528                 	// #1320
   46190:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46194:	tbnz	w0, #31, 473a4 <aarch64_opcode_lookup@@Base+0x27a0>
   46198:	tst	w0, #0x1000
   4619c:	tbnz	w0, #4, 477d4 <aarch64_opcode_lookup@@Base+0x2bd0>
   461a0:	tbnz	w0, #10, 482c4 <aarch64_opcode_lookup@@Base+0x36c0>
   461a4:	tbnz	w0, #11, 48bac <aarch64_opcode_lookup@@Base+0x3fa8>
   461a8:	mov	w8, #0x90a                 	// #2314
   461ac:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   461b0:	mov	w0, #0x370                 	// #880
   461b4:	ret
   461b8:	tbnz	w0, #29, 46e1c <aarch64_opcode_lookup@@Base+0x2218>
   461bc:	mov	w0, #0x6f                  	// #111
   461c0:	ret
   461c4:	tbnz	w0, #31, 473b0 <aarch64_opcode_lookup@@Base+0x27ac>
   461c8:	tst	w0, #0x1000
   461cc:	mov	w8, #0x88f                 	// #2191
   461d0:	mov	w9, #0x80b                 	// #2059
   461d4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   461d8:	tbnz	w0, #31, 473c0 <aarch64_opcode_lookup@@Base+0x27bc>
   461dc:	tst	w0, #0x1000
   461e0:	tbnz	w0, #10, 477e4 <aarch64_opcode_lookup@@Base+0x2be0>
   461e4:	tbnz	w0, #11, 482d0 <aarch64_opcode_lookup@@Base+0x36cc>
   461e8:	mov	w8, #0x856                 	// #2134
   461ec:	mov	w9, #0x8a8                 	// #2216
   461f0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   461f4:	tst	w0, #0x40000000
   461f8:	mov	w8, #0x29a                 	// #666
   461fc:	mov	w9, #0x296                 	// #662
   46200:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46204:	cmp	w0, #0x0
   46208:	tbnz	w0, #30, 46e2c <aarch64_opcode_lookup@@Base+0x2228>
   4620c:	mov	w8, #0x3a3                 	// #931
   46210:	mov	w9, #0x39b                 	// #923
   46214:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   46218:	tst	w0, #0x10
   4621c:	tbnz	w0, #3, 46e38 <aarch64_opcode_lookup@@Base+0x2234>
   46220:	mov	w8, #0x324                 	// #804
   46224:	mov	w9, #0x322                 	// #802
   46228:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4622c:	tst	w0, #0x800000
   46230:	tbnz	w0, #20, 46e44 <aarch64_opcode_lookup@@Base+0x2240>
   46234:	tbnz	w0, #22, 47a90 <aarch64_opcode_lookup@@Base+0x2e8c>
   46238:	mov	w8, #0x61d                 	// #1565
   4623c:	mov	w9, #0x62a                 	// #1578
   46240:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46244:	tst	w0, #0x400000
   46248:	mov	w8, #0x3c1                 	// #961
   4624c:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   46250:	tbnz	w0, #31, 473c8 <aarch64_opcode_lookup@@Base+0x27c4>
   46254:	tst	w0, #0x1000
   46258:	tbnz	w0, #10, 477f4 <aarch64_opcode_lookup@@Base+0x2bf0>
   4625c:	tbnz	w0, #11, 482dc <aarch64_opcode_lookup@@Base+0x36d8>
   46260:	mov	w8, #0x865                 	// #2149
   46264:	mov	w9, #0x85f                 	// #2143
   46268:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4626c:	tbnz	w0, #31, 473d8 <aarch64_opcode_lookup@@Base+0x27d4>
   46270:	tst	w0, #0x10
   46274:	mov	w8, #0x52f                 	// #1327
   46278:	mov	w9, #0x532                 	// #1330
   4627c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46280:	mov	w0, #0x28b                 	// #651
   46284:	ret
   46288:	tbnz	w0, #13, 46e54 <aarch64_opcode_lookup@@Base+0x2250>
   4628c:	tst	w0, #0x40000000
   46290:	tbnz	w0, #14, 47a9c <aarch64_opcode_lookup@@Base+0x2e98>
   46294:	mov	w8, #0x3e                  	// #62
   46298:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   4629c:	tbnz	w0, #23, 46e60 <aarch64_opcode_lookup@@Base+0x225c>
   462a0:	tbnz	w0, #31, 47ea4 <aarch64_opcode_lookup@@Base+0x32a0>
   462a4:	tbnz	w0, #4, 482e8 <aarch64_opcode_lookup@@Base+0x36e4>
   462a8:	tbnz	w0, #9, 48bb4 <aarch64_opcode_lookup@@Base+0x3fb0>
   462ac:	tbnz	w0, #20, 493ac <aarch64_opcode_lookup@@Base+0x47a8>
   462b0:	mov	w0, #0x506                 	// #1286
   462b4:	ret
   462b8:	mov	w0, #0x371                 	// #881
   462bc:	ret
   462c0:	mov	w8, #0x90                  	// #144
   462c4:	mov	w9, #0x88                  	// #136
   462c8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   462cc:	tbnz	w0, #31, 473ec <aarch64_opcode_lookup@@Base+0x27e8>
   462d0:	tbnz	w0, #10, 47804 <aarch64_opcode_lookup@@Base+0x2c00>
   462d4:	tst	w0, #0x1000
   462d8:	tbnz	w0, #11, 482f0 <aarch64_opcode_lookup@@Base+0x36ec>
   462dc:	mov	w8, #0x893                 	// #2195
   462e0:	mov	w9, #0x876                 	// #2166
   462e4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   462e8:	tst	w0, #0x800000
   462ec:	mov	w8, #0x243                 	// #579
   462f0:	mov	w9, #0x23d                 	// #573
   462f4:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   462f8:	tbnz	w0, #31, 473fc <aarch64_opcode_lookup@@Base+0x27f8>
   462fc:	tst	w0, #0x1000
   46300:	tbnz	w0, #10, 47818 <aarch64_opcode_lookup@@Base+0x2c14>
   46304:	tbnz	w0, #11, 482fc <aarch64_opcode_lookup@@Base+0x36f8>
   46308:	mov	w8, #0x8f5                 	// #2293
   4630c:	mov	w9, #0x8a6                 	// #2214
   46310:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46314:	tst	w0, #0x40000000
   46318:	mov	w8, #0x29d                 	// #669
   4631c:	mov	w9, #0x297                 	// #663
   46320:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46324:	tbnz	w0, #31, 47404 <aarch64_opcode_lookup@@Base+0x2800>
   46328:	tst	w0, #0x40000000
   4632c:	mov	w8, #0x36b                 	// #875
   46330:	mov	w9, #0x366                 	// #870
   46334:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46338:	tbnz	w0, #12, 46e7c <aarch64_opcode_lookup@@Base+0x2278>
   4633c:	tbnz	w0, #13, 47aa4 <aarch64_opcode_lookup@@Base+0x2ea0>
   46340:	tst	w0, #0x4000
   46344:	mov	w8, #0x233                 	// #563
   46348:	mov	w9, #0x235                 	// #565
   4634c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46350:	tst	w0, #0x800000
   46354:	tbnz	w0, #22, 46e88 <aarch64_opcode_lookup@@Base+0x2284>
   46358:	mov	w8, #0x6ad                 	// #1709
   4635c:	mov	w9, #0x6b0                 	// #1712
   46360:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46364:	mov	w0, #0x1b6                 	// #438
   46368:	ret
   4636c:	tst	w0, #0x40000000
   46370:	tbnz	w0, #14, 46e94 <aarch64_opcode_lookup@@Base+0x2290>
   46374:	mov	w8, #0x64                  	// #100
   46378:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   4637c:	mov	w0, #0x280                 	// #640
   46380:	ret
   46384:	tbnz	w0, #12, 46e9c <aarch64_opcode_lookup@@Base+0x2298>
   46388:	tbnz	w0, #13, 47aac <aarch64_opcode_lookup@@Base+0x2ea8>
   4638c:	tbnz	w0, #14, 486cc <aarch64_opcode_lookup@@Base+0x3ac8>
   46390:	mov	w0, #0xd5                  	// #213
   46394:	ret
   46398:	tbnz	w0, #31, 4740c <aarch64_opcode_lookup@@Base+0x2808>
   4639c:	tbnz	w0, #16, 47828 <aarch64_opcode_lookup@@Base+0x2c24>
   463a0:	tbnz	w0, #17, 48308 <aarch64_opcode_lookup@@Base+0x3704>
   463a4:	tbnz	w0, #18, 48bbc <aarch64_opcode_lookup@@Base+0x3fb8>
   463a8:	tbnz	w0, #19, 493bc <aarch64_opcode_lookup@@Base+0x47b8>
   463ac:	tbnz	w0, #20, 4993c <aarch64_opcode_lookup@@Base+0x4d38>
   463b0:	mov	w0, #0x568                 	// #1384
   463b4:	ret
   463b8:	tst	w0, #0x20000000
   463bc:	mov	w8, #0x81                  	// #129
   463c0:	mov	w9, #0x70                  	// #112
   463c4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   463c8:	tbnz	w0, #13, 46eb0 <aarch64_opcode_lookup@@Base+0x22ac>
   463cc:	tst	w0, #0x4000
   463d0:	mov	w8, #0x2ab                 	// #683
   463d4:	mov	w9, #0x2a7                 	// #679
   463d8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   463dc:	tbnz	w0, #23, 46eb8 <aarch64_opcode_lookup@@Base+0x22b4>
   463e0:	tbnz	w0, #31, 47eb4 <aarch64_opcode_lookup@@Base+0x32b0>
   463e4:	tbnz	w0, #10, 48314 <aarch64_opcode_lookup@@Base+0x3710>
   463e8:	tbnz	w0, #11, 48bc4 <aarch64_opcode_lookup@@Base+0x3fc0>
   463ec:	tst	w0, #0x1000
   463f0:	mov	w8, #0x8ae                 	// #2222
   463f4:	mov	w9, #0x8ac                 	// #2220
   463f8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   463fc:	tbnz	w0, #30, 46ec0 <aarch64_opcode_lookup@@Base+0x22bc>
   46400:	cmp	w0, #0x0
   46404:	mov	w8, #0x398                 	// #920
   46408:	mov	w9, #0x392                 	// #914
   4640c:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   46410:	tst	w0, #0x4000
   46414:	mov	w8, #0x1a9                 	// #425
   46418:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   4641c:	tbnz	w0, #22, 46ec8 <aarch64_opcode_lookup@@Base+0x22c4>
   46420:	tbnz	w0, #23, 47abc <aarch64_opcode_lookup@@Base+0x2eb8>
   46424:	mov	w0, #0x74a                 	// #1866
   46428:	ret
   4642c:	tbnz	w0, #14, 46edc <aarch64_opcode_lookup@@Base+0x22d8>
   46430:	tbnz	w0, #15, 47ad0 <aarch64_opcode_lookup@@Base+0x2ecc>
   46434:	tbnz	w0, #29, 486d8 <aarch64_opcode_lookup@@Base+0x3ad4>
   46438:	tst	w0, #0x40000000
   4643c:	mov	w8, #0x2a5                 	// #677
   46440:	mov	w9, #0x34b                 	// #843
   46444:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46448:	tbnz	w0, #13, 46ef0 <aarch64_opcode_lookup@@Base+0x22ec>
   4644c:	tbnz	w0, #14, 47adc <aarch64_opcode_lookup@@Base+0x2ed8>
   46450:	tst	w0, #0x800000
   46454:	mov	w8, #0x1b2                 	// #434
   46458:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   4645c:	tbnz	w0, #11, 46ef8 <aarch64_opcode_lookup@@Base+0x22f4>
   46460:	tst	w0, #0x800000
   46464:	tbnz	w0, #12, 47ae4 <aarch64_opcode_lookup@@Base+0x2ee0>
   46468:	tbnz	w0, #13, 486e0 <aarch64_opcode_lookup@@Base+0x3adc>
   4646c:	mov	w8, #0x167                 	// #359
   46470:	mov	w9, #0x157                 	// #343
   46474:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46478:	tbnz	w0, #22, 46f0c <aarch64_opcode_lookup@@Base+0x2308>
   4647c:	tbnz	w0, #23, 47af4 <aarch64_opcode_lookup@@Base+0x2ef0>
   46480:	cmp	w0, #0x0
   46484:	mov	w8, #0x749                 	// #1865
   46488:	mov	w9, #0x818                 	// #2072
   4648c:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   46490:	mov	w0, #0x28c                 	// #652
   46494:	ret
   46498:	tbnz	w0, #13, 46f18 <aarch64_opcode_lookup@@Base+0x2314>
   4649c:	tbnz	w0, #14, 47b0c <aarch64_opcode_lookup@@Base+0x2f08>
   464a0:	tst	w0, #0x20000000
   464a4:	mov	w8, #0x151                 	// #337
   464a8:	mov	w9, #0x11d                 	// #285
   464ac:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   464b0:	mov	w8, #0x196                 	// #406
   464b4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   464b8:	tbnz	w0, #31, 47420 <aarch64_opcode_lookup@@Base+0x281c>
   464bc:	tst	w0, #0x1000
   464c0:	tbnz	w0, #10, 4783c <aarch64_opcode_lookup@@Base+0x2c38>
   464c4:	tbnz	w0, #11, 48328 <aarch64_opcode_lookup@@Base+0x3724>
   464c8:	mov	w8, #0x8c6                 	// #2246
   464cc:	mov	w9, #0x800                 	// #2048
   464d0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   464d4:	tst	w0, #0x40000000
   464d8:	mov	w8, #0x2c0                 	// #704
   464dc:	mov	w9, #0x2cf                 	// #719
   464e0:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   464e4:	tbnz	w0, #22, 46f2c <aarch64_opcode_lookup@@Base+0x2328>
   464e8:	tbnz	w0, #31, 47ebc <aarch64_opcode_lookup@@Base+0x32b8>
   464ec:	tst	w0, #0x400
   464f0:	mov	w8, #0x825                 	// #2085
   464f4:	mov	w9, #0x823                 	// #2083
   464f8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   464fc:	tbnz	w0, #12, 46f3c <aarch64_opcode_lookup@@Base+0x2338>
   46500:	tbnz	w0, #13, 47b20 <aarch64_opcode_lookup@@Base+0x2f1c>
   46504:	tbnz	w0, #14, 486ec <aarch64_opcode_lookup@@Base+0x3ae8>
   46508:	tst	w0, #0x8000
   4650c:	mov	w8, #0x236                 	// #566
   46510:	mov	w9, #0x224                 	// #548
   46514:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46518:	mov	w0, #0x264                 	// #612
   4651c:	ret
   46520:	tbnz	w0, #23, 46f50 <aarch64_opcode_lookup@@Base+0x234c>
   46524:	tbnz	w0, #31, 47ec4 <aarch64_opcode_lookup@@Base+0x32c0>
   46528:	tst	w0, #0x800
   4652c:	tbnz	w0, #10, 48334 <aarch64_opcode_lookup@@Base+0x3730>
   46530:	mov	w8, #0x833                 	// #2099
   46534:	mov	w9, #0x890                 	// #2192
   46538:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4653c:	tbnz	w0, #29, 46f6c <aarch64_opcode_lookup@@Base+0x2368>
   46540:	mov	w8, #0x66                  	// #102
   46544:	cinc	w0, w8, ne  // ne = any
   46548:	ret
   4654c:	tbnz	w0, #31, 47430 <aarch64_opcode_lookup@@Base+0x282c>
   46550:	tst	w0, #0x10
   46554:	mov	w8, #0x534                 	// #1332
   46558:	mov	w9, #0x53a                 	// #1338
   4655c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46560:	tst	w0, #0x20000000
   46564:	mov	w8, #0x923                 	// #2339
   46568:	b	466a8 <aarch64_opcode_lookup@@Base+0x1aa4>
   4656c:	tbnz	w0, #23, 46f74 <aarch64_opcode_lookup@@Base+0x2370>
   46570:	mov	w0, #0x6f3                 	// #1779
   46574:	ret
   46578:	tbnz	w0, #31, 47444 <aarch64_opcode_lookup@@Base+0x2840>
   4657c:	tst	w0, #0x10
   46580:	mov	w8, #0x83e                 	// #2110
   46584:	mov	w9, #0x832                 	// #2098
   46588:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4658c:	tbnz	w0, #12, 46f8c <aarch64_opcode_lookup@@Base+0x2388>
   46590:	tbnz	w0, #13, 47b28 <aarch64_opcode_lookup@@Base+0x2f24>
   46594:	tbnz	w0, #14, 486f4 <aarch64_opcode_lookup@@Base+0x3af0>
   46598:	tbnz	w0, #29, 48ff0 <aarch64_opcode_lookup@@Base+0x43ec>
   4659c:	tbnz	w0, #30, 496cc <aarch64_opcode_lookup@@Base+0x4ac8>
   465a0:	mov	w0, #0x2d1                 	// #721
   465a4:	ret
   465a8:	tbnz	w0, #13, 46fa0 <aarch64_opcode_lookup@@Base+0x239c>
   465ac:	tbnz	w0, #14, 47b38 <aarch64_opcode_lookup@@Base+0x2f34>
   465b0:	tbnz	w0, #22, 48704 <aarch64_opcode_lookup@@Base+0x3b00>
   465b4:	tbnz	w0, #23, 48ff8 <aarch64_opcode_lookup@@Base+0x43f4>
   465b8:	tbnz	w0, #31, 49874 <aarch64_opcode_lookup@@Base+0x4c70>
   465bc:	tst	w0, #0x40000000
   465c0:	mov	w8, #0x419                 	// #1049
   465c4:	b	46544 <aarch64_opcode_lookup@@Base+0x1940>
   465c8:	tbnz	w0, #13, 46fbc <aarch64_opcode_lookup@@Base+0x23b8>
   465cc:	tst	w0, #0x4000
   465d0:	mov	w8, #0x1a8                 	// #424
   465d4:	mov	w9, #0x1a6                 	// #422
   465d8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   465dc:	tbnz	w0, #23, 46fc4 <aarch64_opcode_lookup@@Base+0x23c0>
   465e0:	mov	w0, #0x6fa                 	// #1786
   465e4:	ret
   465e8:	tbnz	w0, #13, 46fd4 <aarch64_opcode_lookup@@Base+0x23d0>
   465ec:	tbnz	w0, #14, 47b50 <aarch64_opcode_lookup@@Base+0x2f4c>
   465f0:	tbnz	w0, #16, 4871c <aarch64_opcode_lookup@@Base+0x3b18>
   465f4:	tst	w0, #0x20000000
   465f8:	mov	w8, #0xdc                  	// #220
   465fc:	mov	w9, #0xab                  	// #171
   46600:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46604:	tbnz	w0, #22, 46fec <aarch64_opcode_lookup@@Base+0x23e8>
   46608:	mov	w8, #0x67d                 	// #1661
   4660c:	mov	w9, #0x689                 	// #1673
   46610:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46614:	tst	w0, #0x20000000
   46618:	tbnz	w0, #12, 46ff8 <aarch64_opcode_lookup@@Base+0x23f4>
   4661c:	mov	w8, #0x92                  	// #146
   46620:	mov	w9, #0x8a                  	// #138
   46624:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46628:	tbnz	w0, #23, 47004 <aarch64_opcode_lookup@@Base+0x2400>
   4662c:	mov	w0, #0x6ec                 	// #1772
   46630:	ret
   46634:	tbnz	w0, #22, 47018 <aarch64_opcode_lookup@@Base+0x2414>
   46638:	cmp	w0, #0x0
   4663c:	mov	w8, #0x697                 	// #1687
   46640:	mov	w9, #0x827                 	// #2087
   46644:	b	46708 <aarch64_opcode_lookup@@Base+0x1b04>
   46648:	tbnz	w0, #13, 47020 <aarch64_opcode_lookup@@Base+0x241c>
   4664c:	tbnz	w0, #14, 47b68 <aarch64_opcode_lookup@@Base+0x2f64>
   46650:	tbnz	w0, #30, 48734 <aarch64_opcode_lookup@@Base+0x3b30>
   46654:	mov	w0, #0x2d5                 	// #725
   46658:	ret
   4665c:	mov	w0, #0x36c                 	// #876
   46660:	ret
   46664:	tst	w0, #0x8000
   46668:	tbnz	w0, #13, 47028 <aarch64_opcode_lookup@@Base+0x2424>
   4666c:	mov	w8, #0x240                 	// #576
   46670:	mov	w9, #0x249                 	// #585
   46674:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46678:	tbnz	w0, #12, 47034 <aarch64_opcode_lookup@@Base+0x2430>
   4667c:	tst	w0, #0x4000
   46680:	tbnz	w0, #13, 47b70 <aarch64_opcode_lookup@@Base+0x2f6c>
   46684:	mov	w8, #0x148                 	// #328
   46688:	mov	w9, #0x141                 	// #321
   4668c:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46690:	mov	w0, #0x5a2                 	// #1442
   46694:	ret
   46698:	tbnz	w0, #29, 47050 <aarch64_opcode_lookup@@Base+0x244c>
   4669c:	tbnz	w0, #22, 47b7c <aarch64_opcode_lookup@@Base+0x2f78>
   466a0:	tst	w0, #0x800000
   466a4:	mov	w8, #0x971                 	// #2417
   466a8:	cinc	w0, w8, eq  // eq = none
   466ac:	ret
   466b0:	tbnz	w0, #22, 47058 <aarch64_opcode_lookup@@Base+0x2454>
   466b4:	tbnz	w0, #23, 47b88 <aarch64_opcode_lookup@@Base+0x2f84>
   466b8:	mov	w0, #0x684                 	// #1668
   466bc:	ret
   466c0:	tbnz	w0, #13, 47064 <aarch64_opcode_lookup@@Base+0x2460>
   466c4:	mov	w0, #0x22a                 	// #554
   466c8:	ret
   466cc:	tbnz	w0, #23, 47074 <aarch64_opcode_lookup@@Base+0x2470>
   466d0:	tst	w0, #0x400000
   466d4:	mov	w8, #0x63b                 	// #1595
   466d8:	mov	w9, #0x63f                 	// #1599
   466dc:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   466e0:	tbnz	w0, #12, 47080 <aarch64_opcode_lookup@@Base+0x247c>
   466e4:	tbnz	w0, #13, 47ba0 <aarch64_opcode_lookup@@Base+0x2f9c>
   466e8:	tbnz	w0, #14, 48744 <aarch64_opcode_lookup@@Base+0x3b40>
   466ec:	tbnz	w0, #30, 4900c <aarch64_opcode_lookup@@Base+0x4408>
   466f0:	mov	w0, #0x2c7                 	// #711
   466f4:	ret
   466f8:	cmp	w0, #0x0
   466fc:	tbnz	w0, #30, 47094 <aarch64_opcode_lookup@@Base+0x2490>
   46700:	mov	w8, #0x38e                 	// #910
   46704:	mov	w9, #0x386                 	// #902
   46708:	csel	w0, w9, w8, ge  // ge = tcont
   4670c:	ret
   46710:	tst	w0, #0x4000
   46714:	tbnz	w0, #13, 470a0 <aarch64_opcode_lookup@@Base+0x249c>
   46718:	mov	w8, #0x252                 	// #594
   4671c:	mov	w9, #0x24f                 	// #591
   46720:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46724:	tbnz	w0, #23, 470ac <aarch64_opcode_lookup@@Base+0x24a8>
   46728:	mov	w0, #0x973                 	// #2419
   4672c:	ret
   46730:	tbnz	w0, #14, 470bc <aarch64_opcode_lookup@@Base+0x24b8>
   46734:	tbnz	w0, #15, 47bb0 <aarch64_opcode_lookup@@Base+0x2fac>
   46738:	tbnz	w0, #29, 4874c <aarch64_opcode_lookup@@Base+0x3b48>
   4673c:	tst	w0, #0x40000000
   46740:	mov	w8, #0x1e0                 	// #480
   46744:	mov	w9, #0x34d                 	// #845
   46748:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4674c:	tbnz	w0, #31, 47454 <aarch64_opcode_lookup@@Base+0x2850>
   46750:	mov	w0, #0x563                 	// #1379
   46754:	ret
   46758:	tst	w0, #0x2000
   4675c:	mov	w8, #0x258                 	// #600
   46760:	mov	w9, #0x255                 	// #597
   46764:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46768:	tbnz	w0, #22, 470d4 <aarch64_opcode_lookup@@Base+0x24d0>
   4676c:	tbnz	w0, #23, 47bc4 <aarch64_opcode_lookup@@Base+0x2fc0>
   46770:	mov	w0, #0x5e8                 	// #1512
   46774:	ret
   46778:	tbnz	w0, #11, 470e0 <aarch64_opcode_lookup@@Base+0x24dc>
   4677c:	tst	w0, #0x4000
   46780:	mov	w8, #0x175                 	// #373
   46784:	mov	w9, #0x96e                 	// #2414
   46788:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   4678c:	tbnz	w0, #20, 470ec <aarch64_opcode_lookup@@Base+0x24e8>
   46790:	tbnz	w0, #22, 47bdc <aarch64_opcode_lookup@@Base+0x2fd8>
   46794:	mov	w0, #0x74e                 	// #1870
   46798:	ret
   4679c:	tbnz	w0, #13, 47100 <aarch64_opcode_lookup@@Base+0x24fc>
   467a0:	tst	w0, #0x20000000
   467a4:	tbnz	w0, #14, 47bec <aarch64_opcode_lookup@@Base+0x2fe8>
   467a8:	mov	w8, #0x152                 	// #338
   467ac:	mov	w9, #0x11e                 	// #286
   467b0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   467b4:	tbnz	w0, #31, 47460 <aarch64_opcode_lookup@@Base+0x285c>
   467b8:	mov	w0, #0x5b1                 	// #1457
   467bc:	ret
   467c0:	tst	w0, #0x20000000
   467c4:	mov	w8, #0x1a2                 	// #418
   467c8:	mov	w9, #0x8c                  	// #140
   467cc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   467d0:	tbnz	w0, #23, 4710c <aarch64_opcode_lookup@@Base+0x2508>
   467d4:	tbnz	w0, #31, 47ecc <aarch64_opcode_lookup@@Base+0x32c8>
   467d8:	tbnz	w0, #10, 48340 <aarch64_opcode_lookup@@Base+0x373c>
   467dc:	tst	w0, #0x800
   467e0:	mov	w8, #0x839                 	// #2105
   467e4:	mov	w9, #0x882                 	// #2178
   467e8:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   467ec:	tbnz	w0, #22, 47124 <aarch64_opcode_lookup@@Base+0x2520>
   467f0:	tbnz	w0, #23, 47bf8 <aarch64_opcode_lookup@@Base+0x2ff4>
   467f4:	tbnz	w0, #31, 48a14 <aarch64_opcode_lookup@@Base+0x3e10>
   467f8:	tbnz	w0, #10, 48bcc <aarch64_opcode_lookup@@Base+0x3fc8>
   467fc:	tbnz	w0, #12, 493c4 <aarch64_opcode_lookup@@Base+0x47c0>
   46800:	tbnz	w0, #16, 4994c <aarch64_opcode_lookup@@Base+0x4d48>
   46804:	tst	w0, #0x20000
   46808:	mov	w8, #0x918                 	// #2328
   4680c:	mov	w9, #0x91a                 	// #2330
   46810:	b	46830 <aarch64_opcode_lookup@@Base+0x1c2c>
   46814:	mov	w0, #0x2c4                 	// #708
   46818:	ret
   4681c:	tbnz	w0, #22, 47134 <aarch64_opcode_lookup@@Base+0x2530>
   46820:	tbnz	w0, #23, 47c00 <aarch64_opcode_lookup@@Base+0x2ffc>
   46824:	tst	w0, #0x100000
   46828:	mov	w8, #0x776                 	// #1910
   4682c:	mov	w9, #0x74f                 	// #1871
   46830:	csel	w0, w9, w8, eq  // eq = none
   46834:	ret
   46838:	tst	w0, #0x2000
   4683c:	mov	w8, #0x247                 	// #583
   46840:	mov	w9, #0x23a                 	// #570
   46844:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46848:	tbnz	w0, #31, 47474 <aarch64_opcode_lookup@@Base+0x2870>
   4684c:	mov	w0, #0x5b2                 	// #1458
   46850:	ret
   46854:	tst	w0, #0x2000
   46858:	mov	w8, #0x268                 	// #616
   4685c:	mov	w9, #0x265                 	// #613
   46860:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46864:	mov	w0, #0x3b4                 	// #948
   46868:	ret
   4686c:	mov	w0, #0x3b8                 	// #952
   46870:	ret
   46874:	mov	w0, #0x3c4                 	// #964
   46878:	ret
   4687c:	tst	w0, #0x800000
   46880:	mov	w8, #0x60e                 	// #1550
   46884:	mov	w9, #0x611                 	// #1553
   46888:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4688c:	mov	w0, #0x3b5                 	// #949
   46890:	ret
   46894:	mov	w0, #0x3b9                 	// #953
   46898:	ret
   4689c:	tbnz	w0, #22, 47488 <aarch64_opcode_lookup@@Base+0x2884>
   468a0:	tst	w0, #0x800000
   468a4:	tbnz	w0, #21, 47edc <aarch64_opcode_lookup@@Base+0x32d8>
   468a8:	mov	w8, #0x82b                 	// #2091
   468ac:	mov	w9, #0x828                 	// #2088
   468b0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   468b4:	mov	w0, #0x3bc                 	// #956
   468b8:	ret
   468bc:	mov	w0, #0x3bd                 	// #957
   468c0:	ret
   468c4:	tbnz	w0, #22, 47498 <aarch64_opcode_lookup@@Base+0x2894>
   468c8:	tst	w0, #0x800000
   468cc:	mov	w8, #0x754                 	// #1876
   468d0:	mov	w9, #0x769                 	// #1897
   468d4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   468d8:	tbnz	w0, #22, 474a0 <aarch64_opcode_lookup@@Base+0x289c>
   468dc:	tst	w0, #0x800000
   468e0:	tbnz	w0, #21, 47ee8 <aarch64_opcode_lookup@@Base+0x32e4>
   468e4:	mov	w8, #0x6f2                 	// #1778
   468e8:	mov	w9, #0x6e3                 	// #1763
   468ec:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   468f0:	tbnz	w0, #22, 474b0 <aarch64_opcode_lookup@@Base+0x28ac>
   468f4:	mov	w0, #0x796                 	// #1942
   468f8:	ret
   468fc:	tbnz	w0, #22, 474bc <aarch64_opcode_lookup@@Base+0x28b8>
   46900:	tst	w0, #0x800000
   46904:	tbnz	w0, #21, 47ef4 <aarch64_opcode_lookup@@Base+0x32f0>
   46908:	mov	w8, #0x6f5                 	// #1781
   4690c:	mov	w9, #0x6e7                 	// #1767
   46910:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46914:	tbnz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x28c8>
   46918:	tst	w0, #0x800000
   4691c:	mov	w8, #0x756                 	// #1878
   46920:	mov	w9, #0x76b                 	// #1899
   46924:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46928:	tbnz	w0, #22, 474d4 <aarch64_opcode_lookup@@Base+0x28d0>
   4692c:	mov	w0, #0x830                 	// #2096
   46930:	ret
   46934:	mov	w0, #0x795                 	// #1941
   46938:	ret
   4693c:	mov	w0, #0x3f3                 	// #1011
   46940:	ret
   46944:	mov	w0, #0x3fa                 	// #1018
   46948:	ret
   4694c:	tst	w0, #0x800000
   46950:	tbnz	w0, #13, 474e4 <aarch64_opcode_lookup@@Base+0x28e0>
   46954:	tbnz	w0, #22, 47f00 <aarch64_opcode_lookup@@Base+0x32fc>
   46958:	mov	w8, #0x6b6                 	// #1718
   4695c:	mov	w9, #0x6ba                 	// #1722
   46960:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46964:	tst	w0, #0x800000
   46968:	tbnz	w0, #22, 474f4 <aarch64_opcode_lookup@@Base+0x28f0>
   4696c:	mov	w8, #0x75b                 	// #1883
   46970:	mov	w9, #0x748                 	// #1864
   46974:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46978:	tst	w0, #0x800000
   4697c:	tbnz	w0, #13, 47500 <aarch64_opcode_lookup@@Base+0x28fc>
   46980:	tbnz	w0, #22, 47f0c <aarch64_opcode_lookup@@Base+0x3308>
   46984:	mov	w8, #0x642                 	// #1602
   46988:	mov	w9, #0x646                 	// #1606
   4698c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46990:	mov	w0, #0x3fb                 	// #1019
   46994:	ret
   46998:	mov	w0, #0x3fc                 	// #1020
   4699c:	ret
   469a0:	tst	w0, #0x200000
   469a4:	tbnz	w0, #1, 47510 <aarch64_opcode_lookup@@Base+0x290c>
   469a8:	mov	w8, #0x2f2                 	// #754
   469ac:	mov	w9, #0x2ed                 	// #749
   469b0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   469b4:	tst	w0, #0x800000
   469b8:	tbnz	w0, #15, 4751c <aarch64_opcode_lookup@@Base+0x2918>
   469bc:	tbnz	w0, #22, 47f18 <aarch64_opcode_lookup@@Base+0x3314>
   469c0:	mov	w8, #0x5f2                 	// #1522
   469c4:	mov	w9, #0x5de                 	// #1502
   469c8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   469cc:	tst	w0, #0x800000
   469d0:	tbnz	w0, #15, 4752c <aarch64_opcode_lookup@@Base+0x2928>
   469d4:	tbnz	w0, #22, 47f24 <aarch64_opcode_lookup@@Base+0x3320>
   469d8:	mov	w8, #0x66e                 	// #1646
   469dc:	mov	w9, #0x65b                 	// #1627
   469e0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   469e4:	tbnz	w0, #22, 4753c <aarch64_opcode_lookup@@Base+0x2938>
   469e8:	tbnz	w0, #21, 47f30 <aarch64_opcode_lookup@@Base+0x332c>
   469ec:	tst	w0, #0x800000
   469f0:	mov	w8, #0x6eb                 	// #1771
   469f4:	mov	w9, #0x6f9                 	// #1785
   469f8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   469fc:	tbnz	w0, #23, 4754c <aarch64_opcode_lookup@@Base+0x2948>
   46a00:	tbnz	w0, #30, 47f38 <aarch64_opcode_lookup@@Base+0x3334>
   46a04:	mov	w0, #0x5fe                 	// #1534
   46a08:	ret
   46a0c:	tst	w0, #0x800000
   46a10:	tbnz	w0, #14, 47558 <aarch64_opcode_lookup@@Base+0x2954>
   46a14:	tbnz	w0, #22, 47f48 <aarch64_opcode_lookup@@Base+0x3344>
   46a18:	mov	w8, #0x8c3                 	// #2243
   46a1c:	mov	w9, #0x8c0                 	// #2240
   46a20:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46a24:	tbnz	w0, #10, 47568 <aarch64_opcode_lookup@@Base+0x2964>
   46a28:	tbnz	w0, #11, 47f54 <aarch64_opcode_lookup@@Base+0x3350>
   46a2c:	tst	w0, #0x800000
   46a30:	mov	w8, #0x927                 	// #2343
   46a34:	mov	w9, #0x92e                 	// #2350
   46a38:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46a3c:	tbnz	w0, #22, 4757c <aarch64_opcode_lookup@@Base+0x2978>
   46a40:	tbnz	w0, #21, 47f5c <aarch64_opcode_lookup@@Base+0x3358>
   46a44:	tst	w0, #0x800000
   46a48:	mov	w8, #0x6ee                 	// #1774
   46a4c:	mov	w9, #0x6fc                 	// #1788
   46a50:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46a54:	tbnz	w0, #12, 4784c <aarch64_opcode_lookup@@Base+0x2c48>
   46a58:	tbnz	w0, #13, 48348 <aarch64_opcode_lookup@@Base+0x3744>
   46a5c:	tbnz	w0, #14, 48be0 <aarch64_opcode_lookup@@Base+0x3fdc>
   46a60:	mov	w0, #0xa2                  	// #162
   46a64:	ret
   46a68:	tbnz	w0, #16, 4785c <aarch64_opcode_lookup@@Base+0x2c58>
   46a6c:	tbnz	w0, #17, 48358 <aarch64_opcode_lookup@@Base+0x3754>
   46a70:	tst	w0, #0x80000
   46a74:	tbnz	w0, #18, 48bf4 <aarch64_opcode_lookup@@Base+0x3ff0>
   46a78:	mov	w8, #0x51d                 	// #1309
   46a7c:	mov	w9, #0x547                 	// #1351
   46a80:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46a84:	tbnz	w0, #17, 47874 <aarch64_opcode_lookup@@Base+0x2c70>
   46a88:	tbnz	w0, #18, 4836c <aarch64_opcode_lookup@@Base+0x3768>
   46a8c:	tbnz	w0, #19, 48c00 <aarch64_opcode_lookup@@Base+0x3ffc>
   46a90:	tbnz	w0, #20, 493cc <aarch64_opcode_lookup@@Base+0x47c8>
   46a94:	mov	w0, #0x6c8                 	// #1736
   46a98:	ret
   46a9c:	tbnz	w0, #12, 47890 <aarch64_opcode_lookup@@Base+0x2c8c>
   46aa0:	tbnz	w0, #23, 48380 <aarch64_opcode_lookup@@Base+0x377c>
   46aa4:	tst	w0, #0x400000
   46aa8:	mov	w8, #0x4ff                 	// #1279
   46aac:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46ab0:	tst	w0, #0x10
   46ab4:	mov	w8, #0x562                 	// #1378
   46ab8:	mov	w9, #0x577                 	// #1399
   46abc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46ac0:	tbnz	w0, #10, 478a4 <aarch64_opcode_lookup@@Base+0x2ca0>
   46ac4:	tbnz	w0, #11, 48388 <aarch64_opcode_lookup@@Base+0x3784>
   46ac8:	tbnz	w0, #20, 48c0c <aarch64_opcode_lookup@@Base+0x4008>
   46acc:	tbnz	w0, #22, 493dc <aarch64_opcode_lookup@@Base+0x47d8>
   46ad0:	mov	w0, #0x742                 	// #1858
   46ad4:	ret
   46ad8:	mov	w0, #0x5b0                 	// #1456
   46adc:	ret
   46ae0:	tst	w0, #0x800000
   46ae4:	tbnz	w0, #10, 478b8 <aarch64_opcode_lookup@@Base+0x2cb4>
   46ae8:	tbnz	w0, #11, 48394 <aarch64_opcode_lookup@@Base+0x3790>
   46aec:	tbnz	w0, #12, 48c18 <aarch64_opcode_lookup@@Base+0x4014>
   46af0:	tbnz	w0, #20, 493ec <aarch64_opcode_lookup@@Base+0x47e8>
   46af4:	tbnz	w0, #22, 49954 <aarch64_opcode_lookup@@Base+0x4d50>
   46af8:	mov	w8, #0x545                 	// #1349
   46afc:	mov	w9, #0x541                 	// #1345
   46b00:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46b04:	tbnz	w0, #13, 478d0 <aarch64_opcode_lookup@@Base+0x2ccc>
   46b08:	tbnz	w0, #15, 483a8 <aarch64_opcode_lookup@@Base+0x37a4>
   46b0c:	tst	w0, #0x800000
   46b10:	mov	w8, #0x138                 	// #312
   46b14:	mov	w9, #0x128                 	// #296
   46b18:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46b1c:	tbnz	w0, #11, 478e0 <aarch64_opcode_lookup@@Base+0x2cdc>
   46b20:	tst	w0, #0x2000
   46b24:	tbnz	w0, #12, 483b0 <aarch64_opcode_lookup@@Base+0x37ac>
   46b28:	mov	w8, #0x7ef                 	// #2031
   46b2c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46b30:	mov	w0, #0x59e                 	// #1438
   46b34:	ret
   46b38:	tst	w0, #0x400000
   46b3c:	mov	w8, #0x51b                 	// #1307
   46b40:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46b44:	tst	w0, #0x10000
   46b48:	mov	w8, #0x81d                 	// #2077
   46b4c:	mov	w9, #0x81b                 	// #2075
   46b50:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46b54:	tbnz	w0, #17, 478ec <aarch64_opcode_lookup@@Base+0x2ce8>
   46b58:	tbnz	w0, #18, 483b8 <aarch64_opcode_lookup@@Base+0x37b4>
   46b5c:	tbnz	w0, #19, 48c2c <aarch64_opcode_lookup@@Base+0x4028>
   46b60:	mov	w0, #0x798                 	// #1944
   46b64:	ret
   46b68:	tst	w0, #0x4000
   46b6c:	tbnz	w0, #13, 47900 <aarch64_opcode_lookup@@Base+0x2cfc>
   46b70:	mov	w8, #0x109                 	// #265
   46b74:	mov	w9, #0x106                 	// #262
   46b78:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46b7c:	tbnz	w0, #12, 4790c <aarch64_opcode_lookup@@Base+0x2d08>
   46b80:	tst	w0, #0x4000
   46b84:	tbnz	w0, #13, 483c0 <aarch64_opcode_lookup@@Base+0x37bc>
   46b88:	mov	w8, #0x114                 	// #276
   46b8c:	mov	w9, #0x10d                 	// #269
   46b90:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46b94:	tbnz	w0, #16, 47928 <aarch64_opcode_lookup@@Base+0x2d24>
   46b98:	tbnz	w0, #19, 483cc <aarch64_opcode_lookup@@Base+0x37c8>
   46b9c:	tst	w0, #0x100000
   46ba0:	mov	w8, #0x51f                 	// #1311
   46ba4:	mov	w9, #0x5d8                 	// #1496
   46ba8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46bac:	tbnz	w0, #12, 47938 <aarch64_opcode_lookup@@Base+0x2d34>
   46bb0:	tbnz	w0, #30, 483d4 <aarch64_opcode_lookup@@Base+0x37d0>
   46bb4:	tst	w0, #0x800
   46bb8:	mov	w8, #0x6be                 	// #1726
   46bbc:	mov	w9, #0x6c4                 	// #1732
   46bc0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46bc4:	tbnz	w0, #13, 4794c <aarch64_opcode_lookup@@Base+0x2d48>
   46bc8:	tbnz	w0, #15, 483e0 <aarch64_opcode_lookup@@Base+0x37dc>
   46bcc:	tst	w0, #0x400000
   46bd0:	mov	w8, #0x12a                 	// #298
   46bd4:	mov	w9, #0x9a                  	// #154
   46bd8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46bdc:	mov	w0, #0x77                  	// #119
   46be0:	ret
   46be4:	mov	w0, #0x3c3                 	// #963
   46be8:	ret
   46bec:	tst	w0, #0x40000000
   46bf0:	mov	w8, #0x944                 	// #2372
   46bf4:	mov	w9, #0x940                 	// #2368
   46bf8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46bfc:	cmp	w8, #0x0
   46c00:	mov	w8, #0x4                   	// #4
   46c04:	csinc	w0, w8, wzr, ne  // ne = any
   46c08:	ret
   46c0c:	tbnz	w0, #31, 47f64 <aarch64_opcode_lookup@@Base+0x3360>
   46c10:	tst	w0, #0x40000000
   46c14:	mov	w8, #0x39f                 	// #927
   46c18:	mov	w9, #0x39a                 	// #922
   46c1c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46c20:	tbnz	w0, #17, 47c0c <aarch64_opcode_lookup@@Base+0x3008>
   46c24:	tbnz	w0, #15, 48754 <aarch64_opcode_lookup@@Base+0x3b50>
   46c28:	tbnz	w0, #16, 49020 <aarch64_opcode_lookup@@Base+0x441c>
   46c2c:	tbnz	w0, #18, 496dc <aarch64_opcode_lookup@@Base+0x4ad8>
   46c30:	tst	w0, #0x80000
   46c34:	mov	w8, #0x32c                 	// #812
   46c38:	mov	w9, #0x330                 	// #816
   46c3c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46c40:	tst	w0, #0x40000000
   46c44:	mov	w8, #0x94f                 	// #2383
   46c48:	mov	w9, #0x94b                 	// #2379
   46c4c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46c50:	tst	w0, #0x40000000
   46c54:	tbnz	w0, #14, 47c18 <aarch64_opcode_lookup@@Base+0x3014>
   46c58:	tbnz	w0, #29, 4876c <aarch64_opcode_lookup@@Base+0x3b68>
   46c5c:	mov	w8, #0x40                  	// #64
   46c60:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46c64:	tbnz	w0, #31, 47f6c <aarch64_opcode_lookup@@Base+0x3368>
   46c68:	tbnz	w0, #9, 483e8 <aarch64_opcode_lookup@@Base+0x37e4>
   46c6c:	tbnz	w0, #20, 48c3c <aarch64_opcode_lookup@@Base+0x4038>
   46c70:	tst	w0, #0x10
   46c74:	mov	w8, #0x6d8                 	// #1752
   46c78:	mov	w9, #0x6dd                 	// #1757
   46c7c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46c80:	mov	w0, #0x3a5                 	// #933
   46c84:	ret
   46c88:	mov	w8, #0x73                  	// #115
   46c8c:	b	47d20 <aarch64_opcode_lookup@@Base+0x311c>
   46c90:	tbnz	w0, #13, 47c28 <aarch64_opcode_lookup@@Base+0x3024>
   46c94:	tbnz	w0, #14, 48774 <aarch64_opcode_lookup@@Base+0x3b70>
   46c98:	mov	w8, #0x4e                  	// #78
   46c9c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46ca0:	mov	w8, #0x7f                  	// #127
   46ca4:	mov	w9, #0x75                  	// #117
   46ca8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46cac:	mov	w8, #0x2ac                 	// #684
   46cb0:	mov	w9, #0x2a8                 	// #680
   46cb4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46cb8:	tbnz	w0, #31, 47f7c <aarch64_opcode_lookup@@Base+0x3378>
   46cbc:	tst	w0, #0x40000000
   46cc0:	mov	w8, #0x394                 	// #916
   46cc4:	mov	w9, #0x391                 	// #913
   46cc8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46ccc:	mov	w8, #0x1b0                 	// #432
   46cd0:	b	47d20 <aarch64_opcode_lookup@@Base+0x311c>
   46cd4:	tst	w0, #0x400000
   46cd8:	mov	w8, #0x56b                 	// #1387
   46cdc:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46ce0:	tbnz	w0, #15, 47c34 <aarch64_opcode_lookup@@Base+0x3030>
   46ce4:	tbnz	w0, #29, 4877c <aarch64_opcode_lookup@@Base+0x3b78>
   46ce8:	tst	w0, #0x40000000
   46cec:	mov	w8, #0x1e6                 	// #486
   46cf0:	mov	w9, #0x34f                 	// #847
   46cf4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46cf8:	tbnz	w0, #14, 47c50 <aarch64_opcode_lookup@@Base+0x304c>
   46cfc:	tst	w0, #0x20000000
   46d00:	mov	w8, #0x153                 	// #339
   46d04:	mov	w9, #0x11f                 	// #287
   46d08:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46d0c:	mov	w0, #0x2da                 	// #730
   46d10:	ret
   46d14:	tst	w0, #0x400000
   46d18:	mov	w8, #0x5ab                 	// #1451
   46d1c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46d20:	mov	w8, #0x78                  	// #120
   46d24:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46d28:	mov	w8, #0x7d                  	// #125
   46d2c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46d30:	tbnz	w0, #14, 47c64 <aarch64_opcode_lookup@@Base+0x3060>
   46d34:	tbnz	w0, #22, 48784 <aarch64_opcode_lookup@@Base+0x3b80>
   46d38:	tbnz	w0, #23, 49034 <aarch64_opcode_lookup@@Base+0x4430>
   46d3c:	tbnz	w0, #31, 4987c <aarch64_opcode_lookup@@Base+0x4c78>
   46d40:	tst	w0, #0x40000000
   46d44:	mov	w8, #0x425                 	// #1061
   46d48:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46d4c:	tbnz	w0, #14, 47c7c <aarch64_opcode_lookup@@Base+0x3078>
   46d50:	tbnz	w0, #16, 4879c <aarch64_opcode_lookup@@Base+0x3b98>
   46d54:	tbnz	w0, #20, 49048 <aarch64_opcode_lookup@@Base+0x4444>
   46d58:	mov	w0, #0xac                  	// #172
   46d5c:	ret
   46d60:	mov	w8, #0x5e9                 	// #1513
   46d64:	mov	w9, #0x637                 	// #1591
   46d68:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46d6c:	tst	w0, #0x40000000
   46d70:	mov	w8, #0x2be                 	// #702
   46d74:	mov	w9, #0x2cb                 	// #715
   46d78:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46d7c:	tst	w0, #0x800000
   46d80:	mov	w8, #0x242                 	// #578
   46d84:	mov	w9, #0x23c                 	// #572
   46d88:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46d8c:	tbnz	w0, #13, 47c8c <aarch64_opcode_lookup@@Base+0x3088>
   46d90:	mov	w8, #0x149                 	// #329
   46d94:	mov	w9, #0x142                 	// #322
   46d98:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46d9c:	tbnz	w0, #31, 47f84 <aarch64_opcode_lookup@@Base+0x3380>
   46da0:	tst	w0, #0x40000000
   46da4:	mov	w8, #0x38a                 	// #906
   46da8:	mov	w9, #0x385                 	// #901
   46dac:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46db0:	tbnz	w0, #15, 47c98 <aarch64_opcode_lookup@@Base+0x3094>
   46db4:	mov	w0, #0x351                 	// #849
   46db8:	ret
   46dbc:	mov	w8, #0x5f7                 	// #1527
   46dc0:	mov	w9, #0x5e2                 	// #1506
   46dc4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46dc8:	mov	w0, #0x174                 	// #372
   46dcc:	ret
   46dd0:	tbnz	w0, #14, 47cb4 <aarch64_opcode_lookup@@Base+0x30b0>
   46dd4:	tst	w0, #0x20000000
   46dd8:	mov	w8, #0x154                 	// #340
   46ddc:	mov	w9, #0x120                 	// #288
   46de0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46de4:	mov	w8, #0x19a                 	// #410
   46de8:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46dec:	mov	w8, #0x676                 	// #1654
   46df0:	mov	w9, #0x662                 	// #1634
   46df4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46df8:	tst	w0, #0x800000
   46dfc:	mov	w8, #0x789                 	// #1929
   46e00:	mov	w9, #0x785                 	// #1925
   46e04:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46e08:	tbnz	w0, #14, 47ccc <aarch64_opcode_lookup@@Base+0x30c8>
   46e0c:	mov	w0, #0x238                 	// #568
   46e10:	ret
   46e14:	mov	w0, #0x7a                  	// #122
   46e18:	ret
   46e1c:	tst	w0, #0x40000000
   46e20:	mov	w8, #0x945                 	// #2373
   46e24:	mov	w9, #0x941                 	// #2369
   46e28:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46e2c:	mov	w8, #0x3a4                 	// #932
   46e30:	mov	w9, #0x3a0                 	// #928
   46e34:	b	479e4 <aarch64_opcode_lookup@@Base+0x2de0>
   46e38:	mov	w8, #0x328                 	// #808
   46e3c:	mov	w9, #0x326                 	// #806
   46e40:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46e44:	tbnz	w0, #22, 47cdc <aarch64_opcode_lookup@@Base+0x30d8>
   46e48:	mov	w8, #0x6ac                 	// #1708
   46e4c:	mov	w9, #0x6af                 	// #1711
   46e50:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46e54:	tst	w0, #0x40000000
   46e58:	mov	w8, #0x42                  	// #66
   46e5c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46e60:	tbnz	w0, #31, 47f8c <aarch64_opcode_lookup@@Base+0x3388>
   46e64:	tbnz	w0, #4, 483f8 <aarch64_opcode_lookup@@Base+0x37f4>
   46e68:	tbnz	w0, #9, 48c44 <aarch64_opcode_lookup@@Base+0x4040>
   46e6c:	tst	w0, #0x100000
   46e70:	mov	w8, #0x516                 	// #1302
   46e74:	mov	w9, #0x6de                 	// #1758
   46e78:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46e7c:	tbnz	w0, #13, 47ce8 <aarch64_opcode_lookup@@Base+0x30e4>
   46e80:	mov	w0, #0x234                 	// #564
   46e84:	ret
   46e88:	mov	w8, #0x6a8                 	// #1704
   46e8c:	mov	w9, #0x6b3                 	// #1715
   46e90:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46e94:	mov	w8, #0x68                  	// #104
   46e98:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46e9c:	tbnz	w0, #13, 47cf8 <aarch64_opcode_lookup@@Base+0x30f4>
   46ea0:	tst	w0, #0x400000
   46ea4:	mov	w8, #0xf4                  	// #244
   46ea8:	mov	w9, #0xf2                  	// #242
   46eac:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46eb0:	mov	w0, #0x2a9                 	// #681
   46eb4:	ret
   46eb8:	mov	w0, #0x5eb                 	// #1515
   46ebc:	ret
   46ec0:	mov	w0, #0x395                 	// #917
   46ec4:	ret
   46ec8:	tbnz	w0, #23, 47d14 <aarch64_opcode_lookup@@Base+0x3110>
   46ecc:	cmp	w0, #0x0
   46ed0:	mov	w8, #0x74d                 	// #1869
   46ed4:	mov	w9, #0x974                 	// #2420
   46ed8:	b	479e4 <aarch64_opcode_lookup@@Base+0x2de0>
   46edc:	tbnz	w0, #15, 47d28 <aarch64_opcode_lookup@@Base+0x3124>
   46ee0:	tst	w0, #0x20000000
   46ee4:	mov	w8, #0x204                 	// #516
   46ee8:	mov	w9, #0x353                 	// #851
   46eec:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46ef0:	mov	w0, #0x1ab                 	// #427
   46ef4:	ret
   46ef8:	tbnz	w0, #12, 47d38 <aarch64_opcode_lookup@@Base+0x3134>
   46efc:	tst	w0, #0x800000
   46f00:	mov	w8, #0x16d                 	// #365
   46f04:	mov	w9, #0x15f                 	// #351
   46f08:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46f0c:	tbnz	w0, #23, 47d48 <aarch64_opcode_lookup@@Base+0x3144>
   46f10:	mov	w0, #0x750                 	// #1872
   46f14:	ret
   46f18:	tbnz	w0, #14, 47d5c <aarch64_opcode_lookup@@Base+0x3158>
   46f1c:	tst	w0, #0x20000000
   46f20:	mov	w8, #0x155                 	// #341
   46f24:	mov	w9, #0x121                 	// #289
   46f28:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46f2c:	tst	w0, #0x800000
   46f30:	mov	w8, #0x767                 	// #1895
   46f34:	mov	w9, #0x752                 	// #1874
   46f38:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46f3c:	tbnz	w0, #13, 47d70 <aarch64_opcode_lookup@@Base+0x316c>
   46f40:	tst	w0, #0x8000
   46f44:	mov	w8, #0x229                 	// #553
   46f48:	mov	w9, #0x227                 	// #551
   46f4c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46f50:	tbnz	w0, #31, 47f9c <aarch64_opcode_lookup@@Base+0x3398>
   46f54:	tbnz	w0, #10, 48408 <aarch64_opcode_lookup@@Base+0x3804>
   46f58:	tbnz	w0, #11, 48c4c <aarch64_opcode_lookup@@Base+0x4048>
   46f5c:	tst	w0, #0x400000
   46f60:	tbnz	w0, #12, 493fc <aarch64_opcode_lookup@@Base+0x47f8>
   46f64:	mov	w8, #0x71a                 	// #1818
   46f68:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46f6c:	mov	w8, #0x7b                  	// #123
   46f70:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46f74:	tbnz	w0, #31, 47fa4 <aarch64_opcode_lookup@@Base+0x33a0>
   46f78:	tst	w0, #0x400000
   46f7c:	tbnz	w0, #10, 4841c <aarch64_opcode_lookup@@Base+0x3818>
   46f80:	tbnz	w0, #12, 48c5c <aarch64_opcode_lookup@@Base+0x4058>
   46f84:	mov	w8, #0x874                 	// #2164
   46f88:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46f8c:	tbnz	w0, #13, 47d7c <aarch64_opcode_lookup@@Base+0x3178>
   46f90:	tbnz	w0, #14, 487b8 <aarch64_opcode_lookup@@Base+0x3bb4>
   46f94:	tbnz	w0, #30, 49058 <aarch64_opcode_lookup@@Base+0x4454>
   46f98:	mov	w0, #0x2d4                 	// #724
   46f9c:	ret
   46fa0:	tbnz	w0, #14, 47d8c <aarch64_opcode_lookup@@Base+0x3188>
   46fa4:	tbnz	w0, #22, 487c0 <aarch64_opcode_lookup@@Base+0x3bbc>
   46fa8:	tbnz	w0, #23, 49068 <aarch64_opcode_lookup@@Base+0x4464>
   46fac:	tbnz	w0, #31, 49884 <aarch64_opcode_lookup@@Base+0x4c80>
   46fb0:	tst	w0, #0x40000000
   46fb4:	mov	w8, #0x431                 	// #1073
   46fb8:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   46fbc:	mov	w0, #0x1a7                 	// #423
   46fc0:	ret
   46fc4:	tbnz	w0, #31, 47fac <aarch64_opcode_lookup@@Base+0x33a8>
   46fc8:	tst	w0, #0x400000
   46fcc:	mov	w8, #0x809                 	// #2057
   46fd0:	b	47d20 <aarch64_opcode_lookup@@Base+0x311c>
   46fd4:	tbnz	w0, #14, 47da4 <aarch64_opcode_lookup@@Base+0x31a0>
   46fd8:	tbnz	w0, #16, 487d8 <aarch64_opcode_lookup@@Base+0x3bd4>
   46fdc:	tst	w0, #0x20000000
   46fe0:	mov	w8, #0xdd                  	// #221
   46fe4:	mov	w9, #0xad                  	// #173
   46fe8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   46fec:	mov	w8, #0x665                 	// #1637
   46ff0:	mov	w9, #0x69c                 	// #1692
   46ff4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   46ff8:	mov	w8, #0x94                  	// #148
   46ffc:	mov	w9, #0x8b                  	// #139
   47000:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47004:	tbnz	w0, #31, 47fb4 <aarch64_opcode_lookup@@Base+0x33b0>
   47008:	tst	w0, #0x400000
   4700c:	tbnz	w0, #12, 48428 <aarch64_opcode_lookup@@Base+0x3824>
   47010:	mov	w8, #0x80c                 	// #2060
   47014:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47018:	mov	w0, #0x696                 	// #1686
   4701c:	ret
   47020:	mov	w0, #0x2c2                 	// #706
   47024:	ret
   47028:	mov	w8, #0x23b                 	// #571
   4702c:	mov	w9, #0x246                 	// #582
   47030:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47034:	tbnz	w0, #13, 47dc0 <aarch64_opcode_lookup@@Base+0x31bc>
   47038:	tbnz	w0, #14, 487f4 <aarch64_opcode_lookup@@Base+0x3bf0>
   4703c:	tst	w0, #0x800000
   47040:	tbnz	w0, #22, 4907c <aarch64_opcode_lookup@@Base+0x4478>
   47044:	mov	w8, #0x170                 	// #368
   47048:	mov	w9, #0x164                 	// #356
   4704c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47050:	mov	w0, #0x82                  	// #130
   47054:	ret
   47058:	tbnz	w0, #23, 47dd0 <aarch64_opcode_lookup@@Base+0x31cc>
   4705c:	mov	w0, #0x6f4                 	// #1780
   47060:	ret
   47064:	tst	w0, #0x800000
   47068:	mov	w8, #0x230                 	// #560
   4706c:	mov	w9, #0x22e                 	// #558
   47070:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47074:	tbnz	w0, #31, 47fbc <aarch64_opcode_lookup@@Base+0x33b8>
   47078:	mov	w0, #0x826                 	// #2086
   4707c:	ret
   47080:	tbnz	w0, #13, 47de8 <aarch64_opcode_lookup@@Base+0x31e4>
   47084:	tst	w0, #0x4000
   47088:	mov	w8, #0x2dd                 	// #733
   4708c:	mov	w9, #0x2bb                 	// #699
   47090:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47094:	mov	w8, #0x38f                 	// #911
   47098:	mov	w9, #0x38b                 	// #907
   4709c:	b	479e4 <aarch64_opcode_lookup@@Base+0x2de0>
   470a0:	mov	w8, #0x253                 	// #595
   470a4:	mov	w9, #0x251                 	// #593
   470a8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   470ac:	tbnz	w0, #31, 47fcc <aarch64_opcode_lookup@@Base+0x33c8>
   470b0:	tst	w0, #0x400
   470b4:	mov	w8, #0x978                 	// #2424
   470b8:	b	47d20 <aarch64_opcode_lookup@@Base+0x311c>
   470bc:	tbnz	w0, #15, 47df0 <aarch64_opcode_lookup@@Base+0x31ec>
   470c0:	tbnz	w0, #29, 487fc <aarch64_opcode_lookup@@Base+0x3bf8>
   470c4:	tst	w0, #0x40000000
   470c8:	mov	w8, #0x1e1                 	// #481
   470cc:	mov	w9, #0x355                 	// #853
   470d0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   470d4:	tbnz	w0, #23, 47e08 <aarch64_opcode_lookup@@Base+0x3204>
   470d8:	mov	w0, #0x6fb                 	// #1787
   470dc:	ret
   470e0:	tbnz	w0, #12, 47e20 <aarch64_opcode_lookup@@Base+0x321c>
   470e4:	mov	w0, #0x97e                 	// #2430
   470e8:	ret
   470ec:	tst	w0, #0x800000
   470f0:	tbnz	w0, #22, 47e2c <aarch64_opcode_lookup@@Base+0x3228>
   470f4:	mov	w8, #0x792                 	// #1938
   470f8:	mov	w9, #0x78e                 	// #1934
   470fc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47100:	tbnz	w0, #14, 47e38 <aarch64_opcode_lookup@@Base+0x3234>
   47104:	mov	w0, #0x122                 	// #290
   47108:	ret
   4710c:	tbnz	w0, #22, 47e4c <aarch64_opcode_lookup@@Base+0x3248>
   47110:	tbnz	w0, #31, 48a1c <aarch64_opcode_lookup@@Base+0x3e18>
   47114:	tbnz	w0, #10, 48c64 <aarch64_opcode_lookup@@Base+0x4060>
   47118:	tbnz	w0, #12, 49404 <aarch64_opcode_lookup@@Base+0x4800>
   4711c:	mov	w0, #0x886                 	// #2182
   47120:	ret
   47124:	tst	w0, #0x800000
   47128:	mov	w8, #0x66a                 	// #1642
   4712c:	mov	w9, #0x6a1                 	// #1697
   47130:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47134:	tbnz	w0, #23, 47e60 <aarch64_opcode_lookup@@Base+0x325c>
   47138:	tbnz	w0, #31, 48a24 <aarch64_opcode_lookup@@Base+0x3e20>
   4713c:	mov	w0, #0x975                 	// #2421
   47140:	ret
   47144:	tst	w0, #0x800000
   47148:	mov	w8, #0x621                 	// #1569
   4714c:	mov	w9, #0x616                 	// #1558
   47150:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47154:	tst	w0, #0x800000
   47158:	mov	w8, #0x60b                 	// #1547
   4715c:	mov	w9, #0x607                 	// #1543
   47160:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47164:	tst	w0, #0x800000
   47168:	mov	w8, #0x609                 	// #1545
   4716c:	mov	w9, #0x60d                 	// #1549
   47170:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47174:	tst	w0, #0x800000
   47178:	mov	w8, #0x685                 	// #1669
   4717c:	mov	w9, #0x67a                 	// #1658
   47180:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47184:	mov	w0, #0x62e                 	// #1582
   47188:	ret
   4718c:	tst	w0, #0x800000
   47190:	mov	w8, #0x5f0                 	// #1520
   47194:	mov	w9, #0x5dc                 	// #1500
   47198:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4719c:	tst	w0, #0x800000
   471a0:	mov	w8, #0x66c                 	// #1644
   471a4:	mov	w9, #0x658                 	// #1624
   471a8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   471ac:	mov	w0, #0x693                 	// #1683
   471b0:	ret
   471b4:	mov	w0, #0x36d                 	// #877
   471b8:	ret
   471bc:	tst	w0, #0x800000
   471c0:	tbnz	w0, #22, 47fd4 <aarch64_opcode_lookup@@Base+0x33d0>
   471c4:	mov	w8, #0x61e                 	// #1566
   471c8:	mov	w9, #0x62b                 	// #1579
   471cc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   471d0:	tst	w0, #0x800000
   471d4:	mov	w8, #0x608                 	// #1544
   471d8:	mov	w9, #0x60c                 	// #1548
   471dc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   471e0:	tst	w0, #0x800000
   471e4:	mov	w8, #0x5ea                 	// #1514
   471e8:	mov	w9, #0x638                 	// #1592
   471ec:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   471f0:	tst	w0, #0x800000
   471f4:	tbnz	w0, #20, 47fe0 <aarch64_opcode_lookup@@Base+0x33dc>
   471f8:	tbnz	w0, #22, 48a34 <aarch64_opcode_lookup@@Base+0x3e30>
   471fc:	mov	w8, #0x632                 	// #1586
   47200:	mov	w9, #0x5e4                 	// #1508
   47204:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47208:	tst	w0, #0x800000
   4720c:	mov	w8, #0x667                 	// #1639
   47210:	mov	w9, #0x69e                 	// #1694
   47214:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47218:	tst	w0, #0x800000
   4721c:	mov	w8, #0x622                 	// #1570
   47220:	mov	w9, #0x6e4                 	// #1764
   47224:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47228:	tst	w0, #0x800000
   4722c:	mov	w8, #0x60a                 	// #1546
   47230:	mov	w9, #0x606                 	// #1542
   47234:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47238:	tst	w0, #0x800000
   4723c:	mov	w8, #0x686                 	// #1670
   47240:	mov	w9, #0x6f1                 	// #1777
   47244:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47248:	tst	w0, #0x400000
   4724c:	mov	w8, #0x630                 	// #1584
   47250:	mov	w9, #0x82f                 	// #2095
   47254:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47258:	tst	w0, #0x800000
   4725c:	mov	w8, #0x5f1                 	// #1521
   47260:	mov	w9, #0x6f8                 	// #1784
   47264:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47268:	tst	w0, #0x800000
   4726c:	mov	w8, #0x66d                 	// #1645
   47270:	mov	w9, #0x6ea                 	// #1770
   47274:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47278:	mov	w0, #0x695                 	// #1685
   4727c:	ret
   47280:	tst	w0, #0x800000
   47284:	mov	w8, #0x965                 	// #2405
   47288:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   4728c:	tst	w0, #0x800000
   47290:	mov	w8, #0x68d                 	// #1677
   47294:	mov	w9, #0x682                 	// #1666
   47298:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4729c:	tst	w0, #0x800000
   472a0:	tbnz	w0, #22, 47ff0 <aarch64_opcode_lookup@@Base+0x33ec>
   472a4:	mov	w8, #0x82a                 	// #2090
   472a8:	mov	w9, #0x831                 	// #2097
   472ac:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   472b0:	mov	w0, #0x75e                 	// #1886
   472b4:	ret
   472b8:	tst	w0, #0x800000
   472bc:	tbnz	w0, #22, 47ffc <aarch64_opcode_lookup@@Base+0x33f8>
   472c0:	mov	w8, #0x755                 	// #1877
   472c4:	mov	w9, #0x76a                 	// #1898
   472c8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   472cc:	tst	w0, #0x800000
   472d0:	tbnz	w0, #22, 48008 <aarch64_opcode_lookup@@Base+0x3404>
   472d4:	mov	w8, #0x6b9                 	// #1721
   472d8:	mov	w9, #0x6b5                 	// #1717
   472dc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   472e0:	tst	w0, #0x800000
   472e4:	tbnz	w0, #22, 48014 <aarch64_opcode_lookup@@Base+0x3410>
   472e8:	mov	w8, #0x78f                 	// #1935
   472ec:	mov	w9, #0x793                 	// #1939
   472f0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   472f4:	tst	w0, #0x800000
   472f8:	tbnz	w0, #22, 48020 <aarch64_opcode_lookup@@Base+0x341c>
   472fc:	mov	w8, #0x6f0                 	// #1776
   47300:	mov	w9, #0x6fe                 	// #1790
   47304:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47308:	tbnz	w0, #22, 4802c <aarch64_opcode_lookup@@Base+0x3428>
   4730c:	tst	w0, #0x800000
   47310:	mov	w8, #0x757                 	// #1879
   47314:	mov	w9, #0x76c                 	// #1900
   47318:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4731c:	tst	w0, #0x200000
   47320:	mov	w8, #0x2f3                 	// #755
   47324:	mov	w9, #0x2ee                 	// #750
   47328:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4732c:	tst	w0, #0x800000
   47330:	tbnz	w0, #20, 48034 <aarch64_opcode_lookup@@Base+0x3430>
   47334:	tbnz	w0, #22, 48a40 <aarch64_opcode_lookup@@Base+0x3e3c>
   47338:	mov	w8, #0x5fa                 	// #1530
   4733c:	mov	w9, #0x5e5                 	// #1509
   47340:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47344:	tst	w0, #0x400000
   47348:	mov	w8, #0x6fd                 	// #1789
   4734c:	mov	w9, #0x6bd                 	// #1725
   47350:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47354:	tst	w0, #0x40000000
   47358:	tbnz	w0, #23, 48044 <aarch64_opcode_lookup@@Base+0x3440>
   4735c:	mov	w8, #0x620                 	// #1568
   47360:	mov	w9, #0x61c                 	// #1564
   47364:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47368:	tst	w0, #0x800000
   4736c:	mov	w8, #0x760                 	// #1888
   47370:	mov	w9, #0x74b                 	// #1867
   47374:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47378:	mov	w0, #0x6ef                 	// #1775
   4737c:	ret
   47380:	tst	w0, #0x800000
   47384:	mov	w8, #0x625                 	// #1573
   47388:	mov	w9, #0x61a                 	// #1562
   4738c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47390:	tst	w0, #0x800000
   47394:	tbnz	w0, #22, 48050 <aarch64_opcode_lookup@@Base+0x344c>
   47398:	mov	w8, #0x62d                 	// #1581
   4739c:	mov	w9, #0x5dd                 	// #1501
   473a0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   473a4:	tst	w0, #0x800000
   473a8:	mov	w8, #0x961                 	// #2401
   473ac:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   473b0:	tst	w0, #0x800000
   473b4:	mov	w8, #0x68b                 	// #1675
   473b8:	mov	w9, #0x681                 	// #1665
   473bc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   473c0:	mov	w0, #0x62f                 	// #1583
   473c4:	ret
   473c8:	tst	w0, #0x800000
   473cc:	mov	w8, #0x5f5                 	// #1525
   473d0:	mov	w9, #0x5e1                 	// #1505
   473d4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   473d8:	tst	w0, #0x800000
   473dc:	tbnz	w0, #22, 4805c <aarch64_opcode_lookup@@Base+0x3458>
   473e0:	mov	w8, #0x6b8                 	// #1720
   473e4:	mov	w9, #0x6b4                 	// #1716
   473e8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   473ec:	tst	w0, #0x800000
   473f0:	mov	w8, #0x674                 	// #1652
   473f4:	mov	w9, #0x661                 	// #1633
   473f8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   473fc:	mov	w0, #0x694                 	// #1684
   47400:	ret
   47404:	mov	w0, #0x36e                 	// #878
   47408:	ret
   4740c:	tbnz	w0, #22, 48068 <aarch64_opcode_lookup@@Base+0x3464>
   47410:	tst	w0, #0x800000
   47414:	mov	w8, #0x8c1                 	// #2241
   47418:	mov	w9, #0x8c5                 	// #2245
   4741c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47420:	tst	w0, #0x800000
   47424:	mov	w8, #0x668                 	// #1640
   47428:	mov	w9, #0x69f                 	// #1695
   4742c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47430:	tst	w0, #0x800000
   47434:	tbnz	w0, #22, 48070 <aarch64_opcode_lookup@@Base+0x346c>
   47438:	mov	w8, #0x691                 	// #1681
   4743c:	mov	w9, #0x659                 	// #1625
   47440:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47444:	tst	w0, #0x400000
   47448:	mov	w8, #0x631                 	// #1585
   4744c:	mov	w9, #0x633                 	// #1587
   47450:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47454:	tbnz	w0, #20, 4807c <aarch64_opcode_lookup@@Base+0x3478>
   47458:	mov	w0, #0x772                 	// #1906
   4745c:	ret
   47460:	tst	w0, #0x800000
   47464:	tbnz	w0, #22, 48090 <aarch64_opcode_lookup@@Base+0x348c>
   47468:	mov	w8, #0x777                 	// #1911
   4746c:	mov	w9, #0x77b                 	// #1915
   47470:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47474:	tbnz	w0, #20, 4809c <aarch64_opcode_lookup@@Base+0x3498>
   47478:	tst	w0, #0x800000
   4747c:	mov	w8, #0x75a                 	// #1882
   47480:	mov	w9, #0x774                 	// #1908
   47484:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47488:	tst	w0, #0x800000
   4748c:	mov	w8, #0x603                 	// #1539
   47490:	mov	w9, #0x5ff                 	// #1535
   47494:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47498:	mov	w0, #0x76e                 	// #1902
   4749c:	ret
   474a0:	tst	w0, #0x800000
   474a4:	mov	w8, #0x604                 	// #1540
   474a8:	mov	w9, #0x600                 	// #1536
   474ac:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   474b0:	tbnz	w0, #21, 480b0 <aarch64_opcode_lookup@@Base+0x34ac>
   474b4:	mov	w0, #0x76d                 	// #1901
   474b8:	ret
   474bc:	tst	w0, #0x800000
   474c0:	mov	w8, #0x605                 	// #1541
   474c4:	mov	w9, #0x601                 	// #1537
   474c8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   474cc:	mov	w0, #0x770                 	// #1904
   474d0:	ret
   474d4:	tst	w0, #0x800000
   474d8:	mov	w8, #0x60f                 	// #1551
   474dc:	mov	w9, #0x612                 	// #1554
   474e0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   474e4:	tbnz	w0, #22, 480c0 <aarch64_opcode_lookup@@Base+0x34bc>
   474e8:	mov	w8, #0x6b7                 	// #1719
   474ec:	mov	w9, #0x6bb                 	// #1723
   474f0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   474f4:	mov	w8, #0x761                 	// #1889
   474f8:	mov	w9, #0x74c                 	// #1868
   474fc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47500:	tbnz	w0, #22, 480cc <aarch64_opcode_lookup@@Base+0x34c8>
   47504:	mov	w8, #0x643                 	// #1603
   47508:	mov	w9, #0x647                 	// #1607
   4750c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47510:	mov	w8, #0x2f4                 	// #756
   47514:	mov	w9, #0x2ef                 	// #751
   47518:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4751c:	tbnz	w0, #22, 480d8 <aarch64_opcode_lookup@@Base+0x34d4>
   47520:	mov	w8, #0x644                 	// #1604
   47524:	mov	w9, #0x640                 	// #1600
   47528:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4752c:	tbnz	w0, #22, 480e4 <aarch64_opcode_lookup@@Base+0x34e0>
   47530:	mov	w8, #0x645                 	// #1605
   47534:	mov	w9, #0x641                 	// #1601
   47538:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4753c:	tst	w0, #0x800000
   47540:	mov	w8, #0x610                 	// #1552
   47544:	mov	w9, #0x614                 	// #1556
   47548:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4754c:	tbnz	w0, #30, 480f0 <aarch64_opcode_lookup@@Base+0x34ec>
   47550:	mov	w0, #0x613                 	// #1555
   47554:	ret
   47558:	tbnz	w0, #22, 480fc <aarch64_opcode_lookup@@Base+0x34f8>
   4755c:	mov	w8, #0x791                 	// #1937
   47560:	mov	w9, #0x78d                 	// #1933
   47564:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47568:	tbnz	w0, #11, 48108 <aarch64_opcode_lookup@@Base+0x3504>
   4756c:	tst	w0, #0x800000
   47570:	mov	w8, #0x934                 	// #2356
   47574:	mov	w9, #0x92f                 	// #2351
   47578:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4757c:	tst	w0, #0x800000
   47580:	mov	w8, #0x602                 	// #1538
   47584:	mov	w9, #0x615                 	// #1557
   47588:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4758c:	tbnz	w0, #17, 48430 <aarch64_opcode_lookup@@Base+0x382c>
   47590:	tbnz	w0, #18, 48c74 <aarch64_opcode_lookup@@Base+0x4070>
   47594:	tbnz	w0, #19, 49414 <aarch64_opcode_lookup@@Base+0x4810>
   47598:	mov	w0, #0x799                 	// #1945
   4759c:	ret
   475a0:	tbnz	w0, #13, 48448 <aarch64_opcode_lookup@@Base+0x3844>
   475a4:	tbnz	w0, #14, 48c84 <aarch64_opcode_lookup@@Base+0x4080>
   475a8:	mov	w8, #0x2e                  	// #46
   475ac:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   475b0:	tbnz	w0, #16, 48454 <aarch64_opcode_lookup@@Base+0x3850>
   475b4:	tst	w0, #0x100000
   475b8:	mov	w8, #0x507                 	// #1287
   475bc:	mov	w9, #0x724                 	// #1828
   475c0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   475c4:	tbnz	w0, #11, 4845c <aarch64_opcode_lookup@@Base+0x3858>
   475c8:	mov	w8, #0x8bb                 	// #2235
   475cc:	mov	w9, #0x850                 	// #2128
   475d0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   475d4:	mov	w8, #0x8cf                 	// #2255
   475d8:	mov	w9, #0x84c                 	// #2124
   475dc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   475e0:	tbnz	w0, #10, 48468 <aarch64_opcode_lookup@@Base+0x3864>
   475e4:	tbnz	w0, #11, 48c8c <aarch64_opcode_lookup@@Base+0x4088>
   475e8:	tbnz	w0, #17, 49424 <aarch64_opcode_lookup@@Base+0x4820>
   475ec:	tst	w0, #0x40000
   475f0:	mov	w8, #0x551                 	// #1361
   475f4:	mov	w9, #0x7d3                 	// #2003
   475f8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   475fc:	mov	w0, #0x811                 	// #2065
   47600:	ret
   47604:	tbnz	w0, #18, 48478 <aarch64_opcode_lookup@@Base+0x3874>
   47608:	tst	w0, #0x100000
   4760c:	tbnz	w0, #19, 48ca0 <aarch64_opcode_lookup@@Base+0x409c>
   47610:	mov	w8, #0x858                 	// #2136
   47614:	mov	w9, #0x8b2                 	// #2226
   47618:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4761c:	tbnz	w0, #17, 48490 <aarch64_opcode_lookup@@Base+0x388c>
   47620:	tst	w0, #0x80000
   47624:	tbnz	w0, #18, 48cac <aarch64_opcode_lookup@@Base+0x40a8>
   47628:	mov	w8, #0x524                 	// #1316
   4762c:	mov	w9, #0x7dd                 	// #2013
   47630:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47634:	tbnz	w0, #11, 484a4 <aarch64_opcode_lookup@@Base+0x38a0>
   47638:	mov	w8, #0x8be                 	// #2238
   4763c:	mov	w9, #0x852                 	// #2130
   47640:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47644:	tbnz	w0, #16, 484b0 <aarch64_opcode_lookup@@Base+0x38ac>
   47648:	tbnz	w0, #17, 48cb8 <aarch64_opcode_lookup@@Base+0x40b4>
   4764c:	tst	w0, #0x100000
   47650:	tbnz	w0, #18, 4942c <aarch64_opcode_lookup@@Base+0x4828>
   47654:	mov	w8, #0x566                 	// #1382
   47658:	mov	w9, #0x560                 	// #1376
   4765c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47660:	tbnz	w0, #11, 484c8 <aarch64_opcode_lookup@@Base+0x38c4>
   47664:	tst	w0, #0x1000
   47668:	mov	w8, #0x86f                 	// #2159
   4766c:	mov	w9, #0x88b                 	// #2187
   47670:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47674:	tst	w0, #0x8000
   47678:	mov	w8, #0x96d                 	// #2413
   4767c:	mov	w9, #0x12c                 	// #300
   47680:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47684:	tst	w0, #0x2000
   47688:	mov	w8, #0x7e0                 	// #2016
   4768c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47690:	tbnz	w0, #11, 484dc <aarch64_opcode_lookup@@Base+0x38d8>
   47694:	tst	w0, #0x1000
   47698:	mov	w8, #0x7bb                 	// #1979
   4769c:	mov	w9, #0x797                 	// #1943
   476a0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   476a4:	tbnz	w0, #11, 484e4 <aarch64_opcode_lookup@@Base+0x38e0>
   476a8:	mov	w0, #0x5c1                 	// #1473
   476ac:	ret
   476b0:	tbnz	w0, #11, 484f4 <aarch64_opcode_lookup@@Base+0x38f0>
   476b4:	mov	w0, #0x914                 	// #2324
   476b8:	ret
   476bc:	tst	w0, #0x800
   476c0:	mov	w8, #0x8bc                 	// #2236
   476c4:	mov	w9, #0x810                 	// #2064
   476c8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   476cc:	tbnz	w0, #16, 48508 <aarch64_opcode_lookup@@Base+0x3904>
   476d0:	tbnz	w0, #19, 48ccc <aarch64_opcode_lookup@@Base+0x40c8>
   476d4:	mov	w0, #0x6ff                 	// #1791
   476d8:	ret
   476dc:	tst	w0, #0x400
   476e0:	mov	w8, #0x5d2                 	// #1490
   476e4:	mov	w9, #0x5d5                 	// #1493
   476e8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   476ec:	tst	w0, #0x10000
   476f0:	mov	w8, #0x81c                 	// #2076
   476f4:	mov	w9, #0x81a                 	// #2074
   476f8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   476fc:	tbnz	w0, #11, 4851c <aarch64_opcode_lookup@@Base+0x3918>
   47700:	tst	w0, #0x1000
   47704:	mov	w8, #0x89b                 	// #2203
   47708:	mov	w9, #0x83f                 	// #2111
   4770c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47710:	tbnz	w0, #11, 48524 <aarch64_opcode_lookup@@Base+0x3920>
   47714:	tst	w0, #0x1000
   47718:	mov	w8, #0x91e                 	// #2334
   4771c:	mov	w9, #0x8b7                 	// #2231
   47720:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47724:	tst	w0, #0x40000
   47728:	mov	w8, #0x746                 	// #1862
   4772c:	mov	w9, #0x722                 	// #1826
   47730:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47734:	mov	w8, #0x912                 	// #2322
   47738:	mov	w9, #0x54b                 	// #1355
   4773c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47740:	tbnz	w0, #17, 4852c <aarch64_opcode_lookup@@Base+0x3928>
   47744:	tbnz	w0, #18, 48ce4 <aarch64_opcode_lookup@@Base+0x40e0>
   47748:	tbnz	w0, #19, 49438 <aarch64_opcode_lookup@@Base+0x4834>
   4774c:	tst	w0, #0x100000
   47750:	mov	w8, #0x802                 	// #2050
   47754:	mov	w9, #0x900                 	// #2304
   47758:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4775c:	tbnz	w0, #12, 48534 <aarch64_opcode_lookup@@Base+0x3930>
   47760:	tst	w0, #0x400
   47764:	mov	w8, #0x8cc                 	// #2252
   47768:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   4776c:	tbnz	w0, #17, 48544 <aarch64_opcode_lookup@@Base+0x3940>
   47770:	tbnz	w0, #18, 48cf4 <aarch64_opcode_lookup@@Base+0x40f0>
   47774:	tbnz	w0, #19, 49440 <aarch64_opcode_lookup@@Base+0x483c>
   47778:	tst	w0, #0x100000
   4777c:	mov	w8, #0x7ab                 	// #1963
   47780:	mov	w9, #0x5ba                 	// #1466
   47784:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47788:	tbnz	w0, #11, 4855c <aarch64_opcode_lookup@@Base+0x3958>
   4778c:	mov	w8, #0x85a                 	// #2138
   47790:	mov	w9, #0x905                 	// #2309
   47794:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47798:	tbnz	w0, #13, 48568 <aarch64_opcode_lookup@@Base+0x3964>
   4779c:	mov	w8, #0x115                 	// #277
   477a0:	mov	w9, #0x10e                 	// #270
   477a4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   477a8:	mov	w0, #0x8ca                 	// #2250
   477ac:	ret
   477b0:	tbnz	w0, #30, 48574 <aarch64_opcode_lookup@@Base+0x3970>
   477b4:	mov	w0, #0x509                 	// #1289
   477b8:	ret
   477bc:	tst	w0, #0x8000
   477c0:	mov	w8, #0x96f                 	// #2415
   477c4:	mov	w9, #0x97                  	// #151
   477c8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   477cc:	mov	w0, #0x808                 	// #2056
   477d0:	ret
   477d4:	tbnz	w0, #10, 48580 <aarch64_opcode_lookup@@Base+0x397c>
   477d8:	tbnz	w0, #11, 48d04 <aarch64_opcode_lookup@@Base+0x4100>
   477dc:	mov	w8, #0x90c                 	// #2316
   477e0:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   477e4:	tbnz	w0, #11, 4858c <aarch64_opcode_lookup@@Base+0x3988>
   477e8:	mov	w8, #0x857                 	// #2135
   477ec:	mov	w9, #0x8a9                 	// #2217
   477f0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   477f4:	tbnz	w0, #11, 48598 <aarch64_opcode_lookup@@Base+0x3994>
   477f8:	mov	w8, #0x868                 	// #2152
   477fc:	mov	w9, #0x862                 	// #2146
   47800:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47804:	tbnz	w0, #11, 485a4 <aarch64_opcode_lookup@@Base+0x39a0>
   47808:	tst	w0, #0x1000
   4780c:	mov	w8, #0x897                 	// #2199
   47810:	mov	w9, #0x87a                 	// #2170
   47814:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47818:	tbnz	w0, #11, 485ac <aarch64_opcode_lookup@@Base+0x39a8>
   4781c:	mov	w8, #0x8f6                 	// #2294
   47820:	mov	w9, #0x8a7                 	// #2215
   47824:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47828:	tbnz	w0, #17, 485b8 <aarch64_opcode_lookup@@Base+0x39b4>
   4782c:	tbnz	w0, #18, 48d0c <aarch64_opcode_lookup@@Base+0x4108>
   47830:	tst	w0, #0x10
   47834:	mov	w8, #0x573                 	// #1395
   47838:	b	47d20 <aarch64_opcode_lookup@@Base+0x311c>
   4783c:	tbnz	w0, #11, 485c4 <aarch64_opcode_lookup@@Base+0x39c0>
   47840:	mov	w8, #0x8c7                 	// #2247
   47844:	mov	w9, #0x801                 	// #2049
   47848:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4784c:	tbnz	w0, #13, 485d0 <aarch64_opcode_lookup@@Base+0x39cc>
   47850:	tbnz	w0, #14, 48d14 <aarch64_opcode_lookup@@Base+0x4110>
   47854:	mov	w0, #0xa3                  	// #163
   47858:	ret
   4785c:	tbnz	w0, #17, 485e4 <aarch64_opcode_lookup@@Base+0x39e0>
   47860:	tst	w0, #0x80000
   47864:	tbnz	w0, #18, 48d24 <aarch64_opcode_lookup@@Base+0x4120>
   47868:	mov	w8, #0x520                 	// #1312
   4786c:	mov	w9, #0x546                 	// #1350
   47870:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47874:	tbnz	w0, #18, 485f8 <aarch64_opcode_lookup@@Base+0x39f4>
   47878:	tbnz	w0, #19, 48d30 <aarch64_opcode_lookup@@Base+0x412c>
   4787c:	tst	w0, #0x40000000
   47880:	tbnz	w0, #20, 49454 <aarch64_opcode_lookup@@Base+0x4850>
   47884:	mov	w8, #0x8fd                 	// #2301
   47888:	mov	w9, #0x6c2                 	// #1730
   4788c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47890:	tbnz	w0, #10, 48610 <aarch64_opcode_lookup@@Base+0x3a0c>
   47894:	tst	w0, #0x800
   47898:	mov	w8, #0x590                 	// #1424
   4789c:	mov	w9, #0x5c8                 	// #1480
   478a0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   478a4:	tbnz	w0, #11, 48618 <aarch64_opcode_lookup@@Base+0x3a14>
   478a8:	tbnz	w0, #20, 48d3c <aarch64_opcode_lookup@@Base+0x4138>
   478ac:	tbnz	w0, #22, 49460 <aarch64_opcode_lookup@@Base+0x485c>
   478b0:	mov	w0, #0x7d6                 	// #2006
   478b4:	ret
   478b8:	tbnz	w0, #11, 48624 <aarch64_opcode_lookup@@Base+0x3a20>
   478bc:	tbnz	w0, #12, 48d48 <aarch64_opcode_lookup@@Base+0x4144>
   478c0:	tbnz	w0, #22, 49470 <aarch64_opcode_lookup@@Base+0x486c>
   478c4:	mov	w8, #0x554                 	// #1364
   478c8:	mov	w9, #0x54c                 	// #1356
   478cc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   478d0:	tst	w0, #0x800000
   478d4:	mov	w8, #0x13a                 	// #314
   478d8:	mov	w9, #0x12e                 	// #302
   478dc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   478e0:	tst	w0, #0x2000
   478e4:	mov	w8, #0x7e2                 	// #2018
   478e8:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   478ec:	tbnz	w0, #18, 48638 <aarch64_opcode_lookup@@Base+0x3a34>
   478f0:	tst	w0, #0x80000
   478f4:	mov	w8, #0x7b7                 	// #1975
   478f8:	mov	w9, #0x79a                 	// #1946
   478fc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47900:	mov	w8, #0x10b                 	// #267
   47904:	mov	w9, #0x108                 	// #264
   47908:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4790c:	tbnz	w0, #13, 48640 <aarch64_opcode_lookup@@Base+0x3a3c>
   47910:	tbnz	w0, #14, 48d5c <aarch64_opcode_lookup@@Base+0x4158>
   47914:	tst	w0, #0x800000
   47918:	tbnz	w0, #22, 4947c <aarch64_opcode_lookup@@Base+0x4878>
   4791c:	mov	w8, #0x13d                 	// #317
   47920:	mov	w9, #0x131                 	// #305
   47924:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47928:	tst	w0, #0x100000
   4792c:	mov	w8, #0x522                 	// #1314
   47930:	mov	w9, #0x5da                 	// #1498
   47934:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47938:	tbnz	w0, #30, 48650 <aarch64_opcode_lookup@@Base+0x3a4c>
   4793c:	tst	w0, #0x800
   47940:	mov	w8, #0x6bf                 	// #1727
   47944:	mov	w9, #0x6c5                 	// #1733
   47948:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   4794c:	tbnz	w0, #22, 4865c <aarch64_opcode_lookup@@Base+0x3a58>
   47950:	mov	w0, #0x98                  	// #152
   47954:	ret
   47958:	mov	w8, #0x954                 	// #2388
   4795c:	mov	w9, #0x94d                 	// #2381
   47960:	b	479e4 <aarch64_opcode_lookup@@Base+0x2de0>
   47964:	tbnz	w0, #17, 48804 <aarch64_opcode_lookup@@Base+0x3c00>
   47968:	tbnz	w0, #18, 49088 <aarch64_opcode_lookup@@Base+0x4484>
   4796c:	tst	w0, #0x100000
   47970:	tbnz	w0, #19, 496e4 <aarch64_opcode_lookup@@Base+0x4ae0>
   47974:	mov	w8, #0x315                 	// #789
   47978:	mov	w9, #0x301                 	// #769
   4797c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47980:	mov	w0, #0x950                 	// #2384
   47984:	ret
   47988:	tbnz	w0, #29, 48810 <aarch64_opcode_lookup@@Base+0x3c0c>
   4798c:	tbnz	w0, #30, 49090 <aarch64_opcode_lookup@@Base+0x448c>
   47990:	mov	w0, #0x44                  	// #68
   47994:	ret
   47998:	mov	w8, #0x955                 	// #2389
   4799c:	mov	w9, #0x94e                 	// #2382
   479a0:	b	479e4 <aarch64_opcode_lookup@@Base+0x2de0>
   479a4:	tbnz	w0, #14, 4881c <aarch64_opcode_lookup@@Base+0x3c18>
   479a8:	mov	w8, #0x50                  	// #80
   479ac:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   479b0:	tbnz	w0, #23, 48824 <aarch64_opcode_lookup@@Base+0x3c20>
   479b4:	mov	w0, #0x5a3                 	// #1443
   479b8:	ret
   479bc:	tbnz	w0, #29, 48830 <aarch64_opcode_lookup@@Base+0x3c2c>
   479c0:	tst	w0, #0x40000000
   479c4:	mov	w8, #0x1e2                 	// #482
   479c8:	mov	w9, #0x357                 	// #855
   479cc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   479d0:	tbnz	w0, #23, 48838 <aarch64_opcode_lookup@@Base+0x3c34>
   479d4:	tbnz	w0, #29, 490a4 <aarch64_opcode_lookup@@Base+0x44a0>
   479d8:	cmp	w0, #0x0
   479dc:	mov	w8, #0x933                 	// #2355
   479e0:	mov	w9, #0x123                 	// #291
   479e4:	csel	w0, w9, w8, ge  // ge = tcont
   479e8:	ret
   479ec:	tst	w0, #0x10000
   479f0:	mov	w8, #0x2b8                 	// #696
   479f4:	mov	w9, #0x2b0                 	// #688
   479f8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   479fc:	tbnz	w0, #15, 48848 <aarch64_opcode_lookup@@Base+0x3c44>
   47a00:	tbnz	w0, #22, 490ac <aarch64_opcode_lookup@@Base+0x44a8>
   47a04:	tbnz	w0, #23, 496f0 <aarch64_opcode_lookup@@Base+0x4aec>
   47a08:	tbnz	w0, #31, 49a90 <aarch64_opcode_lookup@@Base+0x4e8c>
   47a0c:	tst	w0, #0x40000000
   47a10:	mov	w8, #0x43d                 	// #1085
   47a14:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47a18:	tbnz	w0, #23, 48858 <aarch64_opcode_lookup@@Base+0x3c54>
   47a1c:	tbnz	w0, #29, 490c4 <aarch64_opcode_lookup@@Base+0x44c0>
   47a20:	tbnz	w0, #31, 4988c <aarch64_opcode_lookup@@Base+0x4c88>
   47a24:	tbnz	w0, #16, 4995c <aarch64_opcode_lookup@@Base+0x4d58>
   47a28:	mov	w0, #0x25                  	// #37
   47a2c:	ret
   47a30:	tst	w0, #0x40000000
   47a34:	mov	w8, #0x2c6                 	// #710
   47a38:	mov	w9, #0x2d8                 	// #728
   47a3c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47a40:	mov	w8, #0x14b                 	// #331
   47a44:	mov	w9, #0x143                 	// #323
   47a48:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47a4c:	tst	w0, #0x20000000
   47a50:	mov	w8, #0x200                 	// #512
   47a54:	mov	w9, #0x1e3                 	// #483
   47a58:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47a5c:	mov	w0, #0x173                 	// #371
   47a60:	ret
   47a64:	tbnz	w0, #23, 48874 <aarch64_opcode_lookup@@Base+0x3c70>
   47a68:	tbnz	w0, #29, 490d0 <aarch64_opcode_lookup@@Base+0x44cc>
   47a6c:	mov	w0, #0x125                 	// #293
   47a70:	ret
   47a74:	tbnz	w0, #31, 48a4c <aarch64_opcode_lookup@@Base+0x3e48>
   47a78:	tst	w0, #0x400
   47a7c:	mov	w8, #0x824                 	// #2084
   47a80:	mov	w9, #0x822                 	// #2082
   47a84:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47a88:	mov	w0, #0x239                 	// #569
   47a8c:	ret
   47a90:	mov	w8, #0x61f                 	// #1567
   47a94:	mov	w9, #0x63d                 	// #1597
   47a98:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47a9c:	mov	w8, #0x46                  	// #70
   47aa0:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47aa4:	mov	w0, #0x22b                 	// #555
   47aa8:	ret
   47aac:	tbnz	w0, #14, 48880 <aarch64_opcode_lookup@@Base+0x3c7c>
   47ab0:	tbnz	w0, #16, 490e0 <aarch64_opcode_lookup@@Base+0x44dc>
   47ab4:	mov	w0, #0xd6                  	// #214
   47ab8:	ret
   47abc:	tbnz	w0, #31, 48a54 <aarch64_opcode_lookup@@Base+0x3e50>
   47ac0:	tst	w0, #0x400
   47ac4:	mov	w8, #0x820                 	// #2080
   47ac8:	mov	w9, #0x81e                 	// #2078
   47acc:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47ad0:	tbnz	w0, #16, 4888c <aarch64_opcode_lookup@@Base+0x3c88>
   47ad4:	mov	w0, #0x1e4                 	// #484
   47ad8:	ret
   47adc:	mov	w0, #0x1ad                 	// #429
   47ae0:	ret
   47ae4:	tbnz	w0, #13, 488a4 <aarch64_opcode_lookup@@Base+0x3ca0>
   47ae8:	mov	w8, #0x169                 	// #361
   47aec:	mov	w9, #0x159                 	// #345
   47af0:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47af4:	tbnz	w0, #31, 48a5c <aarch64_opcode_lookup@@Base+0x3e58>
   47af8:	tbnz	w0, #16, 48d64 <aarch64_opcode_lookup@@Base+0x4160>
   47afc:	tst	w0, #0x20000
   47b00:	mov	w8, #0x977                 	// #2423
   47b04:	mov	w9, #0x815                 	// #2069
   47b08:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47b0c:	tst	w0, #0x20000000
   47b10:	tbnz	w0, #23, 488b0 <aarch64_opcode_lookup@@Base+0x3cac>
   47b14:	mov	w8, #0x158                 	// #344
   47b18:	mov	w9, #0x127                 	// #295
   47b1c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47b20:	mov	w0, #0x225                 	// #549
   47b24:	ret
   47b28:	tst	w0, #0x40000000
   47b2c:	mov	w8, #0x2bd                 	// #701
   47b30:	mov	w9, #0x2c9                 	// #713
   47b34:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47b38:	tbnz	w0, #22, 488bc <aarch64_opcode_lookup@@Base+0x3cb8>
   47b3c:	tbnz	w0, #23, 490ec <aarch64_opcode_lookup@@Base+0x44e8>
   47b40:	tbnz	w0, #31, 49894 <aarch64_opcode_lookup@@Base+0x4c90>
   47b44:	tst	w0, #0x40000000
   47b48:	mov	w8, #0x449                 	// #1097
   47b4c:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47b50:	tst	w0, #0x20000000
   47b54:	tbnz	w0, #16, 488d4 <aarch64_opcode_lookup@@Base+0x3cd0>
   47b58:	tbnz	w0, #19, 49100 <aarch64_opcode_lookup@@Base+0x44fc>
   47b5c:	mov	w8, #0xf7                  	// #247
   47b60:	mov	w9, #0xc4                  	// #196
   47b64:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47b68:	mov	w0, #0x2dc                 	// #732
   47b6c:	ret
   47b70:	mov	w8, #0x14c                 	// #332
   47b74:	mov	w9, #0x144                 	// #324
   47b78:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47b7c:	tbnz	w0, #23, 488e8 <aarch64_opcode_lookup@@Base+0x3ce4>
   47b80:	mov	w0, #0x97d                 	// #2429
   47b84:	ret
   47b88:	tbnz	w0, #31, 48a64 <aarch64_opcode_lookup@@Base+0x3e60>
   47b8c:	tst	w0, #0x1000
   47b90:	tbnz	w0, #10, 48d6c <aarch64_opcode_lookup@@Base+0x4168>
   47b94:	mov	w8, #0x8e0                 	// #2272
   47b98:	mov	w9, #0x863                 	// #2147
   47b9c:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47ba0:	tst	w0, #0x40000000
   47ba4:	mov	w8, #0x2bf                 	// #703
   47ba8:	mov	w9, #0x2cd                 	// #717
   47bac:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47bb0:	tbnz	w0, #16, 488f4 <aarch64_opcode_lookup@@Base+0x3cf0>
   47bb4:	tst	w0, #0x20000000
   47bb8:	mov	w8, #0x201                 	// #513
   47bbc:	mov	w9, #0x1e5                 	// #485
   47bc0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47bc4:	tbnz	w0, #31, 48a6c <aarch64_opcode_lookup@@Base+0x3e68>
   47bc8:	tst	w0, #0x1000
   47bcc:	tbnz	w0, #10, 48d78 <aarch64_opcode_lookup@@Base+0x4174>
   47bd0:	mov	w8, #0x8e7                 	// #2279
   47bd4:	mov	w9, #0x86a                 	// #2154
   47bd8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47bdc:	tst	w0, #0x800000
   47be0:	mov	w8, #0x766                 	// #1894
   47be4:	mov	w9, #0x751                 	// #1873
   47be8:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47bec:	mov	w8, #0x15a                 	// #346
   47bf0:	mov	w9, #0x129                 	// #297
   47bf4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47bf8:	mov	w0, #0x66b                 	// #1643
   47bfc:	ret
   47c00:	tbnz	w0, #31, 48a74 <aarch64_opcode_lookup@@Base+0x3e70>
   47c04:	mov	w0, #0x95d                 	// #2397
   47c08:	ret
   47c0c:	tbnz	w0, #18, 48910 <aarch64_opcode_lookup@@Base+0x3d0c>
   47c10:	mov	w0, #0x338                 	// #824
   47c14:	ret
   47c18:	tbnz	w0, #22, 48924 <aarch64_opcode_lookup@@Base+0x3d20>
   47c1c:	mov	w8, #0x4a                  	// #74
   47c20:	mov	w9, #0x48                  	// #72
   47c24:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47c28:	tbnz	w0, #14, 48930 <aarch64_opcode_lookup@@Base+0x3d2c>
   47c2c:	mov	w8, #0x52                  	// #82
   47c30:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47c34:	tbnz	w0, #16, 48938 <aarch64_opcode_lookup@@Base+0x3d34>
   47c38:	tbnz	w0, #19, 4910c <aarch64_opcode_lookup@@Base+0x4508>
   47c3c:	tbnz	w0, #20, 49704 <aarch64_opcode_lookup@@Base+0x4b00>
   47c40:	tst	w0, #0x20000000
   47c44:	mov	w8, #0x20d                 	// #525
   47c48:	mov	w9, #0x1ef                 	// #495
   47c4c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47c50:	tbnz	w0, #23, 4894c <aarch64_opcode_lookup@@Base+0x3d48>
   47c54:	tst	w0, #0x20000000
   47c58:	mov	w8, #0x15c                 	// #348
   47c5c:	mov	w9, #0x12b                 	// #299
   47c60:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47c64:	tbnz	w0, #22, 48954 <aarch64_opcode_lookup@@Base+0x3d50>
   47c68:	tbnz	w0, #23, 4911c <aarch64_opcode_lookup@@Base+0x4518>
   47c6c:	tbnz	w0, #31, 4989c <aarch64_opcode_lookup@@Base+0x4c98>
   47c70:	tst	w0, #0x40000000
   47c74:	mov	w8, #0x455                 	// #1109
   47c78:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47c7c:	tbnz	w0, #16, 4896c <aarch64_opcode_lookup@@Base+0x3d68>
   47c80:	tst	w0, #0x80000
   47c84:	mov	w8, #0xc6                  	// #198
   47c88:	b	47d30 <aarch64_opcode_lookup@@Base+0x312c>
   47c8c:	mov	w8, #0x14d                 	// #333
   47c90:	mov	w9, #0x145                 	// #325
   47c94:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47c98:	tbnz	w0, #16, 48978 <aarch64_opcode_lookup@@Base+0x3d74>
   47c9c:	tbnz	w0, #19, 49130 <aarch64_opcode_lookup@@Base+0x452c>
   47ca0:	tst	w0, #0x20000000
   47ca4:	tbnz	w0, #20, 49714 <aarch64_opcode_lookup@@Base+0x4b10>
   47ca8:	mov	w8, #0x20f                 	// #527
   47cac:	mov	w9, #0x1f1                 	// #497
   47cb0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47cb4:	tbnz	w0, #23, 48990 <aarch64_opcode_lookup@@Base+0x3d8c>
   47cb8:	tbnz	w0, #29, 49140 <aarch64_opcode_lookup@@Base+0x453c>
   47cbc:	tst	w0, #0x40000000
   47cc0:	mov	w8, #0x93a                 	// #2362
   47cc4:	mov	w9, #0x936                 	// #2358
   47cc8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47ccc:	tst	w0, #0x800000
   47cd0:	mov	w8, #0x244                 	// #580
   47cd4:	mov	w9, #0x23e                 	// #574
   47cd8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47cdc:	mov	w8, #0x6ae                 	// #1710
   47ce0:	mov	w9, #0x6b2                 	// #1714
   47ce4:	b	47d0c <aarch64_opcode_lookup@@Base+0x3108>
   47ce8:	tst	w0, #0x8000
   47cec:	mov	w8, #0x228                 	// #552
   47cf0:	mov	w9, #0x231                 	// #561
   47cf4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47cf8:	tbnz	w0, #14, 489a4 <aarch64_opcode_lookup@@Base+0x3da0>
   47cfc:	tbnz	w0, #16, 49148 <aarch64_opcode_lookup@@Base+0x4544>
   47d00:	tst	w0, #0x100000
   47d04:	mov	w8, #0x21                  	// #33
   47d08:	mov	w9, #0xd7                  	// #215
   47d0c:	csel	w0, w9, w8, eq  // eq = none
   47d10:	ret
   47d14:	tbnz	w0, #31, 48a84 <aarch64_opcode_lookup@@Base+0x3e80>
   47d18:	tst	w0, #0x400
   47d1c:	mov	w8, #0x97a                 	// #2426
   47d20:	cinc	w0, w8, eq  // eq = none
   47d24:	ret
   47d28:	tst	w0, #0x80000
   47d2c:	mov	w8, #0x1f3                 	// #499
   47d30:	cinc	w0, w8, ne  // ne = any
   47d34:	ret
   47d38:	tst	w0, #0x2000
   47d3c:	mov	w8, #0x163                 	// #355
   47d40:	mov	w9, #0x15b                 	// #347
   47d44:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47d48:	tbnz	w0, #31, 48a8c <aarch64_opcode_lookup@@Base+0x3e88>
   47d4c:	tst	w0, #0x10000
   47d50:	mov	w8, #0x814                 	// #2068
   47d54:	mov	w9, #0x816                 	// #2070
   47d58:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47d5c:	tst	w0, #0x20000000
   47d60:	tbnz	w0, #23, 489ac <aarch64_opcode_lookup@@Base+0x3da8>
   47d64:	mov	w8, #0x160                 	// #352
   47d68:	mov	w9, #0x12d                 	// #301
   47d6c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47d70:	tbnz	w0, #14, 489b8 <aarch64_opcode_lookup@@Base+0x3db4>
   47d74:	mov	w0, #0x232                 	// #562
   47d78:	ret
   47d7c:	tst	w0, #0x40000000
   47d80:	mov	w8, #0x2c1                 	// #705
   47d84:	mov	w9, #0x2d6                 	// #726
   47d88:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47d8c:	tbnz	w0, #22, 489c8 <aarch64_opcode_lookup@@Base+0x3dc4>
   47d90:	tbnz	w0, #23, 49154 <aarch64_opcode_lookup@@Base+0x4550>
   47d94:	tbnz	w0, #31, 498a4 <aarch64_opcode_lookup@@Base+0x4ca0>
   47d98:	tst	w0, #0x40000000
   47d9c:	mov	w8, #0x461                 	// #1121
   47da0:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   47da4:	tbnz	w0, #16, 489e0 <aarch64_opcode_lookup@@Base+0x3ddc>
   47da8:	tbnz	w0, #19, 49168 <aarch64_opcode_lookup@@Base+0x4564>
   47dac:	tbnz	w0, #20, 4971c <aarch64_opcode_lookup@@Base+0x4b18>
   47db0:	tst	w0, #0x20000000
   47db4:	mov	w8, #0xf9                  	// #249
   47db8:	mov	w9, #0xc8                  	// #200
   47dbc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47dc0:	tst	w0, #0x4000
   47dc4:	mov	w8, #0x14e                 	// #334
   47dc8:	mov	w9, #0x146                 	// #326
   47dcc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47dd0:	tbnz	w0, #31, 48a94 <aarch64_opcode_lookup@@Base+0x3e90>
   47dd4:	tst	w0, #0x1000
   47dd8:	tbnz	w0, #10, 48d84 <aarch64_opcode_lookup@@Base+0x4180>
   47ddc:	mov	w8, #0x8e1                 	// #2273
   47de0:	mov	w9, #0x864                 	// #2148
   47de4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47de8:	mov	w0, #0x2c3                 	// #707
   47dec:	ret
   47df0:	tbnz	w0, #16, 489f4 <aarch64_opcode_lookup@@Base+0x3df0>
   47df4:	tst	w0, #0x20000000
   47df8:	tbnz	w0, #23, 49178 <aarch64_opcode_lookup@@Base+0x4574>
   47dfc:	mov	w8, #0x21e                 	// #542
   47e00:	cinc	w0, w8, eq  // eq = none
   47e04:	ret
   47e08:	tbnz	w0, #31, 48a9c <aarch64_opcode_lookup@@Base+0x3e98>
   47e0c:	tst	w0, #0x1000
   47e10:	tbnz	w0, #10, 48d90 <aarch64_opcode_lookup@@Base+0x418c>
   47e14:	mov	w8, #0x8e8                 	// #2280
   47e18:	mov	w9, #0x86b                 	// #2155
   47e1c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47e20:	tbnz	w0, #23, 48a00 <aarch64_opcode_lookup@@Base+0x3dfc>
   47e24:	mov	w0, #0x97c                 	// #2428
   47e28:	ret
   47e2c:	mov	w8, #0x782                 	// #1922
   47e30:	mov	w9, #0x77e                 	// #1918
   47e34:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47e38:	tbnz	w0, #23, 48a0c <aarch64_opcode_lookup@@Base+0x3e08>
   47e3c:	tst	w0, #0x20000000
   47e40:	mov	w8, #0x162                 	// #354
   47e44:	mov	w9, #0x12f                 	// #303
   47e48:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   47e4c:	tbnz	w0, #31, 48aa4 <aarch64_opcode_lookup@@Base+0x3ea0>
   47e50:	tbnz	w0, #10, 48d9c <aarch64_opcode_lookup@@Base+0x4198>
   47e54:	tbnz	w0, #12, 49488 <aarch64_opcode_lookup@@Base+0x4884>
   47e58:	mov	w0, #0x887                 	// #2183
   47e5c:	ret
   47e60:	tbnz	w0, #31, 48aac <aarch64_opcode_lookup@@Base+0x3ea8>
   47e64:	mov	w0, #0x95e                 	// #2398
   47e68:	ret
   47e6c:	mov	w0, #0x3a1                 	// #929
   47e70:	ret
   47e74:	tst	w0, #0x2000
   47e78:	mov	w8, #0x687                 	// #1671
   47e7c:	mov	w9, #0x623                 	// #1571
   47e80:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47e84:	mov	w0, #0x396                 	// #918
   47e88:	ret
   47e8c:	mov	w0, #0x38c                 	// #908
   47e90:	ret
   47e94:	tst	w0, #0x400000
   47e98:	mov	w8, #0x4a7                 	// #1191
   47e9c:	mov	w9, #0x2f0                 	// #752
   47ea0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47ea4:	tst	w0, #0x2000
   47ea8:	mov	w8, #0x69a                 	// #1690
   47eac:	mov	w9, #0x636                 	// #1590
   47eb0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47eb4:	mov	w0, #0x639                 	// #1593
   47eb8:	ret
   47ebc:	mov	w0, #0x75f                 	// #1887
   47ec0:	ret
   47ec4:	mov	w0, #0x6e5                 	// #1765
   47ec8:	ret
   47ecc:	tst	w0, #0x400000
   47ed0:	mov	w8, #0x6ed                 	// #1773
   47ed4:	mov	w9, #0x664                 	// #1636
   47ed8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47edc:	mov	w8, #0x68f                 	// #1679
   47ee0:	mov	w9, #0x683                 	// #1667
   47ee4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47ee8:	mov	w8, #0x5f9                 	// #1529
   47eec:	mov	w9, #0x5e3                 	// #1507
   47ef0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47ef4:	mov	w8, #0x678                 	// #1656
   47ef8:	mov	w9, #0x663                 	// #1635
   47efc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f00:	mov	w8, #0x64a                 	// #1610
   47f04:	mov	w9, #0x64e                 	// #1614
   47f08:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f0c:	mov	w8, #0x652                 	// #1618
   47f10:	mov	w9, #0x656                 	// #1622
   47f14:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f18:	mov	w8, #0x5f4                 	// #1524
   47f1c:	mov	w9, #0x5e0                 	// #1504
   47f20:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f24:	mov	w8, #0x672                 	// #1650
   47f28:	mov	w9, #0x65f                 	// #1631
   47f2c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f30:	mov	w0, #0x63c                 	// #1596
   47f34:	ret
   47f38:	tst	w0, #0x200000
   47f3c:	mov	w8, #0x6e6                 	// #1766
   47f40:	mov	w9, #0x61b                 	// #1563
   47f44:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f48:	mov	w8, #0x8c2                 	// #2242
   47f4c:	mov	w9, #0x8bf                 	// #2239
   47f50:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f54:	mov	w0, #0x930                 	// #2352
   47f58:	ret
   47f5c:	mov	w0, #0x6a2                 	// #1698
   47f60:	ret
   47f64:	mov	w0, #0x3a2                 	// #930
   47f68:	ret
   47f6c:	tst	w0, #0x2000
   47f70:	mov	w8, #0x67b                 	// #1659
   47f74:	mov	w9, #0x617                 	// #1559
   47f78:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f7c:	mov	w0, #0x397                 	// #919
   47f80:	ret
   47f84:	mov	w0, #0x38d                 	// #909
   47f88:	ret
   47f8c:	tst	w0, #0x2000
   47f90:	mov	w8, #0x67f                 	// #1663
   47f94:	mov	w9, #0x619                 	// #1561
   47f98:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47f9c:	mov	w0, #0x626                 	// #1574
   47fa0:	ret
   47fa4:	mov	w0, #0x68c                 	// #1676
   47fa8:	ret
   47fac:	mov	w0, #0x5f6                 	// #1526
   47fb0:	ret
   47fb4:	mov	w0, #0x675                 	// #1653
   47fb8:	ret
   47fbc:	tst	w0, #0x400000
   47fc0:	mov	w8, #0x5ed                 	// #1517
   47fc4:	mov	w9, #0x5ef                 	// #1519
   47fc8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47fcc:	mov	w0, #0x763                 	// #1891
   47fd0:	ret
   47fd4:	mov	w8, #0x5ee                 	// #1518
   47fd8:	mov	w9, #0x63e                 	// #1598
   47fdc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47fe0:	tbnz	w0, #22, 48abc <aarch64_opcode_lookup@@Base+0x3eb8>
   47fe4:	mov	w8, #0x6b1                 	// #1713
   47fe8:	mov	w9, #0x6a4                 	// #1700
   47fec:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47ff0:	mov	w8, #0x5ec                 	// #1516
   47ff4:	mov	w9, #0x63a                 	// #1594
   47ff8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   47ffc:	mov	w8, #0x759                 	// #1881
   48000:	mov	w9, #0x771                 	// #1905
   48004:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48008:	mov	w8, #0x64d                 	// #1613
   4800c:	mov	w9, #0x649                 	// #1609
   48010:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48014:	mov	w8, #0x77f                 	// #1919
   48018:	mov	w9, #0x783                 	// #1923
   4801c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48020:	mov	w8, #0x669                 	// #1641
   48024:	mov	w9, #0x6a0                 	// #1696
   48028:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4802c:	mov	w0, #0x773                 	// #1907
   48030:	ret
   48034:	tbnz	w0, #22, 48ac8 <aarch64_opcode_lookup@@Base+0x3ec4>
   48038:	mov	w8, #0x6a9                 	// #1705
   4803c:	mov	w9, #0x6a5                 	// #1701
   48040:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48044:	mov	w8, #0x62c                 	// #1580
   48048:	mov	w9, #0x629                 	// #1577
   4804c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48050:	mov	w8, #0x5f3                 	// #1523
   48054:	mov	w9, #0x5df                 	// #1503
   48058:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4805c:	mov	w8, #0x64c                 	// #1612
   48060:	mov	w9, #0x648                 	// #1608
   48064:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48068:	mov	w0, #0x8c4                 	// #2244
   4806c:	ret
   48070:	mov	w8, #0x670                 	// #1648
   48074:	mov	w9, #0x65d                 	// #1629
   48078:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4807c:	tst	w0, #0x800000
   48080:	tbnz	w0, #22, 48ad4 <aarch64_opcode_lookup@@Base+0x3ed0>
   48084:	mov	w8, #0x790                 	// #1936
   48088:	mov	w9, #0x794                 	// #1940
   4808c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48090:	mov	w8, #0x787                 	// #1927
   48094:	mov	w9, #0x78b                 	// #1931
   48098:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4809c:	tst	w0, #0x800000
   480a0:	tbnz	w0, #22, 48ae0 <aarch64_opcode_lookup@@Base+0x3edc>
   480a4:	mov	w8, #0x778                 	// #1912
   480a8:	mov	w9, #0x77c                 	// #1916
   480ac:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480b0:	tst	w0, #0x800000
   480b4:	mov	w8, #0x758                 	// #1880
   480b8:	mov	w9, #0x76f                 	// #1903
   480bc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480c0:	mov	w8, #0x64b                 	// #1611
   480c4:	mov	w9, #0x64f                 	// #1615
   480c8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480cc:	mov	w8, #0x653                 	// #1619
   480d0:	mov	w9, #0x657                 	// #1623
   480d4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480d8:	mov	w8, #0x654                 	// #1620
   480dc:	mov	w9, #0x650                 	// #1616
   480e0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480e4:	mov	w8, #0x655                 	// #1621
   480e8:	mov	w9, #0x651                 	// #1617
   480ec:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   480f0:	tst	w0, #0x200000
   480f4:	mov	w8, #0x627                 	// #1575
   480f8:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   480fc:	mov	w8, #0x781                 	// #1921
   48100:	mov	w9, #0x77d                 	// #1917
   48104:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48108:	mov	w0, #0x931                 	// #2353
   4810c:	ret
   48110:	tbnz	w0, #18, 48dac <aarch64_opcode_lookup@@Base+0x41a8>
   48114:	tbnz	w0, #19, 49498 <aarch64_opcode_lookup@@Base+0x4894>
   48118:	mov	w0, #0x725                 	// #1829
   4811c:	ret
   48120:	tbnz	w0, #14, 48db4 <aarch64_opcode_lookup@@Base+0x41b0>
   48124:	mov	w8, #0x30                  	// #48
   48128:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4812c:	tst	w0, #0x100000
   48130:	tbnz	w0, #16, 48dc0 <aarch64_opcode_lookup@@Base+0x41bc>
   48134:	mov	w8, #0x6df                 	// #1759
   48138:	mov	w9, #0x721                 	// #1825
   4813c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48140:	mov	w8, #0x906                 	// #2310
   48144:	mov	w9, #0x8d1                 	// #2257
   48148:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4814c:	tst	w0, #0x10
   48150:	mov	w8, #0x71d                 	// #1821
   48154:	mov	w9, #0x55c                 	// #1372
   48158:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4815c:	tbnz	w0, #10, 48dd0 <aarch64_opcode_lookup@@Base+0x41cc>
   48160:	tst	w0, #0x800
   48164:	mov	w8, #0x733                 	// #1843
   48168:	mov	w9, #0x731                 	// #1841
   4816c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48170:	tbnz	w0, #10, 48dd8 <aarch64_opcode_lookup@@Base+0x41d4>
   48174:	tbnz	w0, #11, 494a8 <aarch64_opcode_lookup@@Base+0x48a4>
   48178:	mov	w0, #0x967                 	// #2407
   4817c:	ret
   48180:	tbnz	w0, #19, 48de4 <aarch64_opcode_lookup@@Base+0x41e0>
   48184:	tbnz	w0, #20, 494b8 <aarch64_opcode_lookup@@Base+0x48b4>
   48188:	mov	w0, #0x50d                 	// #1293
   4818c:	ret
   48190:	tbnz	w0, #18, 48df8 <aarch64_opcode_lookup@@Base+0x41f4>
   48194:	mov	w8, #0x540                 	// #1344
   48198:	mov	w9, #0x79f                 	// #1951
   4819c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   481a0:	mov	w8, #0x908                 	// #2312
   481a4:	mov	w9, #0x8d3                 	// #2259
   481a8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   481ac:	mov	w0, #0x5c6                 	// #1478
   481b0:	ret
   481b4:	tbnz	w0, #12, 48e04 <aarch64_opcode_lookup@@Base+0x4200>
   481b8:	tst	w0, #0x400000
   481bc:	mov	w8, #0x840                 	// #2112
   481c0:	mov	w9, #0x91b                 	// #2331
   481c4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   481c8:	tst	w0, #0x800000
   481cc:	mov	w8, #0x134                 	// #308
   481d0:	mov	w9, #0x124                 	// #292
   481d4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   481d8:	tst	w0, #0x2000
   481dc:	mov	w8, #0x7a2                 	// #1954
   481e0:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   481e4:	mov	w0, #0x745                 	// #1861
   481e8:	ret
   481ec:	tst	w0, #0x1000
   481f0:	mov	w8, #0x5b4                 	// #1460
   481f4:	mov	w9, #0x5a7                 	// #1447
   481f8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   481fc:	tst	w0, #0x400000
   48200:	mov	w8, #0x803                 	// #2051
   48204:	mov	w9, #0x80e                 	// #2062
   48208:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4820c:	tbnz	w0, #12, 48e0c <aarch64_opcode_lookup@@Base+0x4208>
   48210:	mov	w0, #0x8ba                 	// #2234
   48214:	ret
   48218:	tbnz	w0, #22, 48e20 <aarch64_opcode_lookup@@Base+0x421c>
   4821c:	tst	w0, #0x800000
   48220:	mov	w8, #0x708                 	// #1800
   48224:	mov	w9, #0x4fe                 	// #1278
   48228:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4822c:	mov	w0, #0x869                 	// #2153
   48230:	ret
   48234:	mov	w8, #0x920                 	// #2336
   48238:	mov	w9, #0x902                 	// #2306
   4823c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48240:	mov	w0, #0x728                 	// #1832
   48244:	ret
   48248:	mov	w0, #0x85c                 	// #2140
   4824c:	ret
   48250:	tbnz	w0, #12, 48e28 <aarch64_opcode_lookup@@Base+0x4224>
   48254:	mov	w0, #0x84a                 	// #2122
   48258:	ret
   4825c:	tbnz	w0, #20, 48e38 <aarch64_opcode_lookup@@Base+0x4234>
   48260:	tbnz	w0, #17, 494c8 <aarch64_opcode_lookup@@Base+0x48c4>
   48264:	tbnz	w0, #18, 49968 <aarch64_opcode_lookup@@Base+0x4d64>
   48268:	tst	w0, #0x400000
   4826c:	mov	w8, #0x57b                 	// #1403
   48270:	mov	w9, #0x579                 	// #1401
   48274:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48278:	mov	w8, #0x848                 	// #2120
   4827c:	mov	w9, #0x8b5                 	// #2229
   48280:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48284:	mov	w8, #0x117                 	// #279
   48288:	mov	w9, #0x10f                 	// #271
   4828c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48290:	tbnz	w0, #12, 48e4c <aarch64_opcode_lookup@@Base+0x4248>
   48294:	mov	w0, #0x8c9                 	// #2249
   48298:	ret
   4829c:	tst	w0, #0x400000
   482a0:	mov	w8, #0x85d                 	// #2141
   482a4:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   482a8:	tst	w0, #0x800000
   482ac:	mov	w8, #0x136                 	// #310
   482b0:	mov	w9, #0x126                 	// #294
   482b4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   482b8:	mov	w8, #0x87e                 	// #2174
   482bc:	mov	w9, #0x7b1                 	// #1969
   482c0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   482c4:	tbnz	w0, #11, 48e6c <aarch64_opcode_lookup@@Base+0x4268>
   482c8:	mov	w8, #0x7ea                 	// #2026
   482cc:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   482d0:	mov	w8, #0x844                 	// #2116
   482d4:	mov	w9, #0x8a0                 	// #2208
   482d8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   482dc:	mov	w8, #0x8e2                 	// #2274
   482e0:	mov	w9, #0x8dc                 	// #2268
   482e4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   482e8:	mov	w0, #0x512                 	// #1298
   482ec:	ret
   482f0:	mov	w8, #0x95a                 	// #2394
   482f4:	mov	w9, #0x87d                 	// #2173
   482f8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   482fc:	mov	w8, #0x8f0                 	// #2288
   48300:	mov	w9, #0x89e                 	// #2206
   48304:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48308:	tbnz	w0, #18, 48e74 <aarch64_opcode_lookup@@Base+0x4270>
   4830c:	mov	w0, #0x56d                 	// #1389
   48310:	ret
   48314:	tbnz	w0, #11, 48e84 <aarch64_opcode_lookup@@Base+0x4280>
   48318:	tst	w0, #0x1000
   4831c:	mov	w8, #0x8af                 	// #2223
   48320:	mov	w9, #0x8ad                 	// #2221
   48324:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48328:	mov	w8, #0x846                 	// #2118
   4832c:	mov	w9, #0x842                 	// #2114
   48330:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48334:	mov	w8, #0x836                 	// #2102
   48338:	mov	w9, #0x894                 	// #2196
   4833c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48340:	mov	w0, #0x898                 	// #2200
   48344:	ret
   48348:	tbnz	w0, #14, 48e8c <aarch64_opcode_lookup@@Base+0x4288>
   4834c:	tbnz	w0, #16, 494dc <aarch64_opcode_lookup@@Base+0x48d8>
   48350:	mov	w0, #0xa4                  	// #164
   48354:	ret
   48358:	tbnz	w0, #18, 48ea0 <aarch64_opcode_lookup@@Base+0x429c>
   4835c:	tst	w0, #0x80000
   48360:	mov	w8, #0x51e                 	// #1310
   48364:	mov	w9, #0x5d9                 	// #1497
   48368:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4836c:	tbnz	w0, #19, 48ea8 <aarch64_opcode_lookup@@Base+0x42a4>
   48370:	tst	w0, #0x40000000
   48374:	mov	w8, #0x8fc                 	// #2300
   48378:	mov	w9, #0x6c9                 	// #1737
   4837c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48380:	mov	w0, #0x501                 	// #1281
   48384:	ret
   48388:	tbnz	w0, #22, 48ebc <aarch64_opcode_lookup@@Base+0x42b8>
   4838c:	mov	w0, #0x734                 	// #1844
   48390:	ret
   48394:	tbnz	w0, #20, 48ecc <aarch64_opcode_lookup@@Base+0x42c8>
   48398:	tbnz	w0, #22, 494e8 <aarch64_opcode_lookup@@Base+0x48e4>
   4839c:	mov	w8, #0x736                 	// #1846
   483a0:	mov	w9, #0x72a                 	// #1834
   483a4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   483a8:	mov	w0, #0x922                 	// #2338
   483ac:	ret
   483b0:	mov	w8, #0x7a4                 	// #1956
   483b4:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   483b8:	mov	w0, #0x7bc                 	// #1980
   483bc:	ret
   483c0:	mov	w8, #0x118                 	// #280
   483c4:	mov	w9, #0x110                 	// #272
   483c8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   483cc:	mov	w0, #0x548                 	// #1352
   483d0:	ret
   483d4:	tst	w0, #0x400000
   483d8:	mov	w8, #0x860                 	// #2144
   483dc:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   483e0:	mov	w0, #0x970                 	// #2416
   483e4:	ret
   483e8:	tst	w0, #0x10
   483ec:	mov	w8, #0x6d2                 	// #1746
   483f0:	mov	w9, #0x6d5                 	// #1749
   483f4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   483f8:	tst	w0, #0x200
   483fc:	mov	w8, #0x6d3                 	// #1747
   48400:	mov	w9, #0x6d9                 	// #1753
   48404:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48408:	tbnz	w0, #11, 48edc <aarch64_opcode_lookup@@Base+0x42d8>
   4840c:	tst	w0, #0x400000
   48410:	tbnz	w0, #12, 494f4 <aarch64_opcode_lookup@@Base+0x48f0>
   48414:	mov	w8, #0x7b2                 	// #1970
   48418:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4841c:	tbnz	w0, #12, 48eec <aarch64_opcode_lookup@@Base+0x42e8>
   48420:	mov	w8, #0x878                 	// #2168
   48424:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48428:	mov	w8, #0x88d                 	// #2189
   4842c:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48430:	tbnz	w0, #18, 48ef4 <aarch64_opcode_lookup@@Base+0x42f0>
   48434:	tst	w0, #0x100000
   48438:	tbnz	w0, #19, 494fc <aarch64_opcode_lookup@@Base+0x48f8>
   4843c:	mov	w8, #0x7ba                 	// #1978
   48440:	mov	w9, #0x79b                 	// #1947
   48444:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48448:	tbnz	w0, #14, 48efc <aarch64_opcode_lookup@@Base+0x42f8>
   4844c:	mov	w8, #0x32                  	// #50
   48450:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48454:	mov	w0, #0x7b9                 	// #1977
   48458:	ret
   4845c:	mov	w8, #0x907                 	// #2311
   48460:	mov	w9, #0x8d2                 	// #2258
   48464:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48468:	tst	w0, #0x20000
   4846c:	mov	w8, #0x7c7                 	// #1991
   48470:	mov	w9, #0x7d5                 	// #2005
   48474:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48478:	tbnz	w0, #19, 48f04 <aarch64_opcode_lookup@@Base+0x4300>
   4847c:	tbnz	w0, #20, 49508 <aarch64_opcode_lookup@@Base+0x4904>
   48480:	tst	w0, #0x40000000
   48484:	mov	w8, #0x8b3                 	// #2227
   48488:	mov	w9, #0x8a2                 	// #2210
   4848c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48490:	tbnz	w0, #18, 48f14 <aarch64_opcode_lookup@@Base+0x4310>
   48494:	tst	w0, #0x80000
   48498:	mov	w8, #0x53f                 	// #1343
   4849c:	mov	w9, #0x7de                 	// #2014
   484a0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   484a4:	mov	w8, #0x909                 	// #2313
   484a8:	mov	w9, #0x8d4                 	// #2260
   484ac:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   484b0:	tbnz	w0, #17, 48f1c <aarch64_opcode_lookup@@Base+0x4318>
   484b4:	tst	w0, #0x100000
   484b8:	tbnz	w0, #18, 49510 <aarch64_opcode_lookup@@Base+0x490c>
   484bc:	mov	w8, #0x5c3                 	// #1475
   484c0:	mov	w9, #0x5bf                 	// #1471
   484c4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   484c8:	tbnz	w0, #12, 48f2c <aarch64_opcode_lookup@@Base+0x4328>
   484cc:	tst	w0, #0x400000
   484d0:	mov	w8, #0x841                 	// #2113
   484d4:	mov	w9, #0x91c                 	// #2332
   484d8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   484dc:	mov	w0, #0x7d9                 	// #2009
   484e0:	ret
   484e4:	tst	w0, #0x1000
   484e8:	mov	w8, #0x5be                 	// #1470
   484ec:	mov	w9, #0x5c7                 	// #1479
   484f0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   484f4:	tst	w0, #0x800000
   484f8:	tbnz	w0, #22, 48f34 <aarch64_opcode_lookup@@Base+0x4330>
   484fc:	mov	w8, #0x806                 	// #2054
   48500:	mov	w9, #0x804                 	// #2052
   48504:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48508:	tbnz	w0, #10, 48f40 <aarch64_opcode_lookup@@Base+0x433c>
   4850c:	tst	w0, #0x1000
   48510:	mov	w8, #0x705                 	// #1797
   48514:	mov	w9, #0x701                 	// #1793
   48518:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4851c:	mov	w0, #0x8e6                 	// #2278
   48520:	ret
   48524:	mov	w0, #0x903                 	// #2307
   48528:	ret
   4852c:	mov	w0, #0x8d9                 	// #2265
   48530:	ret
   48534:	tst	w0, #0x10000
   48538:	mov	w8, #0x873                 	// #2163
   4853c:	mov	w9, #0x807                 	// #2055
   48540:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48544:	tbnz	w0, #18, 48f48 <aarch64_opcode_lookup@@Base+0x4344>
   48548:	tst	w0, #0x100000
   4854c:	tbnz	w0, #19, 4951c <aarch64_opcode_lookup@@Base+0x4918>
   48550:	mov	w8, #0x7a8                 	// #1960
   48554:	mov	w9, #0x5bc                 	// #1468
   48558:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4855c:	mov	w8, #0x8cb                 	// #2251
   48560:	mov	w9, #0x901                 	// #2305
   48564:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48568:	mov	w8, #0x119                 	// #281
   4856c:	mov	w9, #0x111                 	// #273
   48570:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48574:	tst	w0, #0x400000
   48578:	mov	w8, #0x8da                 	// #2266
   4857c:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48580:	tbnz	w0, #11, 48f58 <aarch64_opcode_lookup@@Base+0x4354>
   48584:	mov	w8, #0x7e4                 	// #2020
   48588:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4858c:	mov	w8, #0x845                 	// #2117
   48590:	mov	w9, #0x8a1                 	// #2209
   48594:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48598:	mov	w8, #0x8e5                 	// #2277
   4859c:	mov	w9, #0x8df                 	// #2271
   485a0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   485a4:	mov	w0, #0x881                 	// #2177
   485a8:	ret
   485ac:	mov	w8, #0x8f1                 	// #2289
   485b0:	mov	w9, #0x89f                 	// #2207
   485b4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   485b8:	tbnz	w0, #18, 48f60 <aarch64_opcode_lookup@@Base+0x435c>
   485bc:	mov	w0, #0x575                 	// #1397
   485c0:	ret
   485c4:	mov	w8, #0x847                 	// #2119
   485c8:	mov	w9, #0x843                 	// #2115
   485cc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   485d0:	tbnz	w0, #14, 48f70 <aarch64_opcode_lookup@@Base+0x436c>
   485d4:	tst	w0, #0x100000
   485d8:	mov	w8, #0x1d                  	// #29
   485dc:	mov	w9, #0xa5                  	// #165
   485e0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   485e4:	tbnz	w0, #18, 48f84 <aarch64_opcode_lookup@@Base+0x4380>
   485e8:	tst	w0, #0x80000
   485ec:	mov	w8, #0x521                 	// #1313
   485f0:	mov	w9, #0x5db                 	// #1499
   485f4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   485f8:	tbnz	w0, #19, 48f8c <aarch64_opcode_lookup@@Base+0x4388>
   485fc:	tst	w0, #0x40000000
   48600:	tbnz	w0, #20, 49528 <aarch64_opcode_lookup@@Base+0x4924>
   48604:	mov	w8, #0x8fe                 	// #2302
   48608:	mov	w9, #0x8f2                 	// #2290
   4860c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48610:	mov	w0, #0x6cd                 	// #1741
   48614:	ret
   48618:	tbnz	w0, #22, 48fa0 <aarch64_opcode_lookup@@Base+0x439c>
   4861c:	mov	w0, #0x7c8                 	// #1992
   48620:	ret
   48624:	tbnz	w0, #20, 48fb0 <aarch64_opcode_lookup@@Base+0x43ac>
   48628:	tbnz	w0, #22, 49534 <aarch64_opcode_lookup@@Base+0x4930>
   4862c:	mov	w8, #0x7c9                 	// #1993
   48630:	mov	w9, #0x7bd                 	// #1981
   48634:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48638:	mov	w0, #0x7da                 	// #2010
   4863c:	ret
   48640:	tst	w0, #0x4000
   48644:	mov	w8, #0x11a                 	// #282
   48648:	mov	w9, #0x112                 	// #274
   4864c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48650:	tst	w0, #0x400000
   48654:	mov	w8, #0x8dd                 	// #2269
   48658:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4865c:	tst	w0, #0x800000
   48660:	mov	w8, #0x13c                 	// #316
   48664:	mov	w9, #0x130                 	// #304
   48668:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4866c:	tbnz	w0, #18, 49184 <aarch64_opcode_lookup@@Base+0x4580>
   48670:	mov	w0, #0x303                 	// #771
   48674:	ret
   48678:	tst	w0, #0x40000000
   4867c:	mov	w8, #0x5c                  	// #92
   48680:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48684:	mov	w8, #0x54                  	// #84
   48688:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4868c:	tst	w0, #0x400000
   48690:	mov	w8, #0x5a0                 	// #1440
   48694:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48698:	mov	w0, #0x14f                 	// #335
   4869c:	ret
   486a0:	tbnz	w0, #22, 49190 <aarch64_opcode_lookup@@Base+0x458c>
   486a4:	tbnz	w0, #23, 4972c <aarch64_opcode_lookup@@Base+0x4b28>
   486a8:	tbnz	w0, #31, 49a98 <aarch64_opcode_lookup@@Base+0x4e94>
   486ac:	tst	w0, #0x40000000
   486b0:	mov	w8, #0x401                 	// #1025
   486b4:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   486b8:	tbnz	w0, #16, 491a8 <aarch64_opcode_lookup@@Base+0x45a4>
   486bc:	mov	w0, #0xdb                  	// #219
   486c0:	ret
   486c4:	mov	w0, #0x150                 	// #336
   486c8:	ret
   486cc:	tbnz	w0, #16, 491b4 <aarch64_opcode_lookup@@Base+0x45b0>
   486d0:	mov	w0, #0xd8                  	// #216
   486d4:	ret
   486d8:	mov	w0, #0x202                 	// #514
   486dc:	ret
   486e0:	mov	w8, #0x16b                 	// #363
   486e4:	mov	w9, #0x15d                 	// #349
   486e8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   486ec:	mov	w0, #0x226                 	// #550
   486f0:	ret
   486f4:	tst	w0, #0x40000000
   486f8:	mov	w8, #0x2c5                 	// #709
   486fc:	mov	w9, #0x2d7                 	// #727
   48700:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48704:	tbnz	w0, #23, 491c0 <aarch64_opcode_lookup@@Base+0x45bc>
   48708:	tbnz	w0, #31, 498ac <aarch64_opcode_lookup@@Base+0x4ca8>
   4870c:	tst	w0, #0x40000000
   48710:	mov	w8, #0x420                 	// #1056
   48714:	mov	w9, #0x41d                 	// #1053
   48718:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4871c:	tst	w0, #0x20000000
   48720:	tbnz	w0, #19, 491d4 <aarch64_opcode_lookup@@Base+0x45d0>
   48724:	tbnz	w0, #23, 49740 <aarch64_opcode_lookup@@Base+0x4b3c>
   48728:	mov	w8, #0xe8                  	// #232
   4872c:	mov	w9, #0xb8                  	// #184
   48730:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48734:	tst	w0, #0x10000
   48738:	mov	w8, #0x2ba                 	// #698
   4873c:	mov	w9, #0x2b3                 	// #691
   48740:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48744:	mov	w0, #0x2d9                 	// #729
   48748:	ret
   4874c:	mov	w0, #0x1fd                 	// #509
   48750:	ret
   48754:	tbnz	w0, #16, 491e4 <aarch64_opcode_lookup@@Base+0x45e0>
   48758:	tbnz	w0, #18, 4974c <aarch64_opcode_lookup@@Base+0x4b48>
   4875c:	tst	w0, #0x80000
   48760:	mov	w8, #0x32d                 	// #813
   48764:	mov	w9, #0x332                 	// #818
   48768:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4876c:	mov	w8, #0x5e                  	// #94
   48770:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48774:	mov	w8, #0x56                  	// #86
   48778:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4877c:	mov	w0, #0x203                 	// #515
   48780:	ret
   48784:	tbnz	w0, #23, 491f8 <aarch64_opcode_lookup@@Base+0x45f4>
   48788:	tbnz	w0, #31, 498b4 <aarch64_opcode_lookup@@Base+0x4cb0>
   4878c:	tst	w0, #0x40000000
   48790:	mov	w8, #0x42c                 	// #1068
   48794:	mov	w9, #0x429                 	// #1065
   48798:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4879c:	tbnz	w0, #19, 4920c <aarch64_opcode_lookup@@Base+0x4608>
   487a0:	tbnz	w0, #20, 49754 <aarch64_opcode_lookup@@Base+0x4b50>
   487a4:	tst	w0, #0x20000000
   487a8:	tbnz	w0, #23, 49a48 <aarch64_opcode_lookup@@Base+0x4e44>
   487ac:	mov	w8, #0xea                  	// #234
   487b0:	mov	w9, #0xba                  	// #186
   487b4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   487b8:	mov	w0, #0x2db                 	// #731
   487bc:	ret
   487c0:	tbnz	w0, #23, 49220 <aarch64_opcode_lookup@@Base+0x461c>
   487c4:	tbnz	w0, #31, 498bc <aarch64_opcode_lookup@@Base+0x4cb8>
   487c8:	tst	w0, #0x40000000
   487cc:	mov	w8, #0x438                 	// #1080
   487d0:	mov	w9, #0x435                 	// #1077
   487d4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   487d8:	tbnz	w0, #19, 49234 <aarch64_opcode_lookup@@Base+0x4630>
   487dc:	tbnz	w0, #20, 49764 <aarch64_opcode_lookup@@Base+0x4b60>
   487e0:	tst	w0, #0x20000000
   487e4:	tbnz	w0, #23, 49a54 <aarch64_opcode_lookup@@Base+0x4e50>
   487e8:	mov	w8, #0xec                  	// #236
   487ec:	mov	w9, #0xbc                  	// #188
   487f0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   487f4:	mov	w0, #0x14a                 	// #330
   487f8:	ret
   487fc:	mov	w0, #0x1fe                 	// #510
   48800:	ret
   48804:	tbnz	w0, #18, 49248 <aarch64_opcode_lookup@@Base+0x4644>
   48808:	mov	w0, #0x305                 	// #773
   4880c:	ret
   48810:	tst	w0, #0x40000000
   48814:	mov	w8, #0x60                  	// #96
   48818:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   4881c:	mov	w8, #0x58                  	// #88
   48820:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48824:	tst	w0, #0x400000
   48828:	mov	w8, #0x5a4                 	// #1444
   4882c:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48830:	mov	w0, #0x1ff                 	// #511
   48834:	ret
   48838:	tst	w0, #0x20000000
   4883c:	mov	w8, #0x166                 	// #358
   48840:	mov	w9, #0x133                 	// #307
   48844:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48848:	tbnz	w0, #31, 49330 <aarch64_opcode_lookup@@Base+0x472c>
   4884c:	tst	w0, #0x40000000
   48850:	mov	w8, #0x3be                 	// #958
   48854:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48858:	tbnz	w0, #16, 49258 <aarch64_opcode_lookup@@Base+0x4654>
   4885c:	tbnz	w0, #19, 4976c <aarch64_opcode_lookup@@Base+0x4b68>
   48860:	tst	w0, #0x20000000
   48864:	tbnz	w0, #20, 49a60 <aarch64_opcode_lookup@@Base+0x4e5c>
   48868:	mov	w8, #0xf5                  	// #245
   4886c:	mov	w9, #0xc2                  	// #194
   48870:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48874:	tbnz	w0, #29, 49268 <aarch64_opcode_lookup@@Base+0x4664>
   48878:	mov	w0, #0x135                 	// #309
   4887c:	ret
   48880:	tbnz	w0, #16, 49278 <aarch64_opcode_lookup@@Base+0x4674>
   48884:	mov	w0, #0xd9                  	// #217
   48888:	ret
   4888c:	tst	w0, #0x20000000
   48890:	tbnz	w0, #19, 49284 <aarch64_opcode_lookup@@Base+0x4680>
   48894:	tbnz	w0, #23, 4977c <aarch64_opcode_lookup@@Base+0x4b78>
   48898:	mov	w8, #0x205                 	// #517
   4889c:	mov	w9, #0x1e7                 	// #487
   488a0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   488a4:	mov	w8, #0x16f                 	// #367
   488a8:	mov	w9, #0x161                 	// #353
   488ac:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   488b0:	mov	w8, #0x168                 	// #360
   488b4:	mov	w9, #0x137                 	// #311
   488b8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   488bc:	tbnz	w0, #23, 49294 <aarch64_opcode_lookup@@Base+0x4690>
   488c0:	tbnz	w0, #31, 498c4 <aarch64_opcode_lookup@@Base+0x4cc0>
   488c4:	tst	w0, #0x40000000
   488c8:	mov	w8, #0x450                 	// #1104
   488cc:	mov	w9, #0x44d                 	// #1101
   488d0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   488d4:	tbnz	w0, #19, 492a8 <aarch64_opcode_lookup@@Base+0x46a4>
   488d8:	tbnz	w0, #23, 49788 <aarch64_opcode_lookup@@Base+0x4b84>
   488dc:	mov	w8, #0xf0                  	// #240
   488e0:	mov	w9, #0xc0                  	// #192
   488e4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   488e8:	tst	w0, #0x40000000
   488ec:	mov	w8, #0x984                 	// #2436
   488f0:	b	4917c <aarch64_opcode_lookup@@Base+0x4578>
   488f4:	tbnz	w0, #19, 492b8 <aarch64_opcode_lookup@@Base+0x46b4>
   488f8:	tbnz	w0, #20, 49794 <aarch64_opcode_lookup@@Base+0x4b90>
   488fc:	tst	w0, #0x20000000
   48900:	tbnz	w0, #23, 49a68 <aarch64_opcode_lookup@@Base+0x4e64>
   48904:	mov	w8, #0x207                 	// #519
   48908:	mov	w9, #0x1e9                 	// #489
   4890c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48910:	tbnz	w0, #15, 492cc <aarch64_opcode_lookup@@Base+0x46c8>
   48914:	tst	w0, #0x10000
   48918:	mov	w8, #0x343                 	// #835
   4891c:	mov	w9, #0x341                 	// #833
   48920:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48924:	mov	w8, #0x4b                  	// #75
   48928:	mov	w9, #0x49                  	// #73
   4892c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48930:	mov	w8, #0x5a                  	// #90
   48934:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48938:	tst	w0, #0x20000000
   4893c:	tbnz	w0, #19, 492d4 <aarch64_opcode_lookup@@Base+0x46d0>
   48940:	mov	w8, #0x209                 	// #521
   48944:	mov	w9, #0x1eb                 	// #491
   48948:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4894c:	mov	w0, #0x16a                 	// #362
   48950:	ret
   48954:	tbnz	w0, #23, 492e0 <aarch64_opcode_lookup@@Base+0x46dc>
   48958:	tbnz	w0, #31, 498cc <aarch64_opcode_lookup@@Base+0x4cc8>
   4895c:	tst	w0, #0x40000000
   48960:	mov	w8, #0x45c                 	// #1116
   48964:	mov	w9, #0x459                 	// #1113
   48968:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   4896c:	tst	w0, #0x20000000
   48970:	mov	w8, #0x9e                  	// #158
   48974:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48978:	tst	w0, #0x20000000
   4897c:	tbnz	w0, #19, 492f4 <aarch64_opcode_lookup@@Base+0x46f0>
   48980:	tbnz	w0, #23, 4979c <aarch64_opcode_lookup@@Base+0x4b98>
   48984:	mov	w8, #0x20b                 	// #523
   48988:	mov	w9, #0x1ed                 	// #493
   4898c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48990:	tbnz	w0, #29, 49304 <aarch64_opcode_lookup@@Base+0x4700>
   48994:	tst	w0, #0x40000000
   48998:	mov	w8, #0x93b                 	// #2363
   4899c:	mov	w9, #0x937                 	// #2359
   489a0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   489a4:	mov	w0, #0xda                  	// #218
   489a8:	ret
   489ac:	mov	w8, #0x16e                 	// #366
   489b0:	mov	w9, #0x139                 	// #313
   489b4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   489b8:	tst	w0, #0x800000
   489bc:	mov	w8, #0x22f                 	// #559
   489c0:	mov	w9, #0x22d                 	// #557
   489c4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   489c8:	tbnz	w0, #23, 4930c <aarch64_opcode_lookup@@Base+0x4708>
   489cc:	tbnz	w0, #31, 498d4 <aarch64_opcode_lookup@@Base+0x4cd0>
   489d0:	tst	w0, #0x40000000
   489d4:	mov	w8, #0x468                 	// #1128
   489d8:	mov	w9, #0x465                 	// #1125
   489dc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   489e0:	tbnz	w0, #19, 49320 <aarch64_opcode_lookup@@Base+0x471c>
   489e4:	tbnz	w0, #23, 497a8 <aarch64_opcode_lookup@@Base+0x4ba4>
   489e8:	tst	w0, #0x20000000
   489ec:	mov	w8, #0xa0                  	// #160
   489f0:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   489f4:	tst	w0, #0x80000
   489f8:	mov	w8, #0x1fb                 	// #507
   489fc:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48a00:	tst	w0, #0x40000000
   48a04:	mov	w8, #0x982                 	// #2434
   48a08:	b	4917c <aarch64_opcode_lookup@@Base+0x4578>
   48a0c:	mov	w0, #0x13b                 	// #315
   48a10:	ret
   48a14:	mov	w0, #0x6a3                 	// #1699
   48a18:	ret
   48a1c:	mov	w0, #0x679                 	// #1657
   48a20:	ret
   48a24:	tst	w0, #0x100000
   48a28:	mov	w8, #0x786                 	// #1926
   48a2c:	mov	w9, #0x753                 	// #1875
   48a30:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48a34:	mov	w8, #0x5fb                 	// #1531
   48a38:	mov	w9, #0x5e6                 	// #1510
   48a3c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48a40:	mov	w8, #0x5fc                 	// #1532
   48a44:	mov	w9, #0x5e7                 	// #1511
   48a48:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48a4c:	mov	w0, #0x779                 	// #1913
   48a50:	ret
   48a54:	mov	w0, #0x75d                 	// #1885
   48a58:	ret
   48a5c:	mov	w0, #0x75c                 	// #1884
   48a60:	ret
   48a64:	mov	w0, #0x690                 	// #1680
   48a68:	ret
   48a6c:	mov	w0, #0x5fd                 	// #1533
   48a70:	ret
   48a74:	tst	w0, #0x100000
   48a78:	mov	w8, #0x77a                 	// #1914
   48a7c:	mov	w9, #0x764                 	// #1892
   48a80:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48a84:	mov	w0, #0x762                 	// #1890
   48a88:	ret
   48a8c:	mov	w0, #0x765                 	// #1893
   48a90:	ret
   48a94:	mov	w0, #0x68e                 	// #1678
   48a98:	ret
   48a9c:	mov	w0, #0x5f8                 	// #1528
   48aa0:	ret
   48aa4:	mov	w0, #0x677                 	// #1655
   48aa8:	ret
   48aac:	tst	w0, #0x100000
   48ab0:	mov	w8, #0x78a                 	// #1930
   48ab4:	mov	w9, #0x768                 	// #1896
   48ab8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48abc:	mov	w8, #0x6aa                 	// #1706
   48ac0:	mov	w9, #0x6a6                 	// #1702
   48ac4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ac8:	mov	w8, #0x6ab                 	// #1707
   48acc:	mov	w9, #0x6a7                 	// #1703
   48ad0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ad4:	mov	w8, #0x780                 	// #1920
   48ad8:	mov	w9, #0x784                 	// #1924
   48adc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ae0:	mov	w8, #0x788                 	// #1928
   48ae4:	mov	w9, #0x78c                 	// #1932
   48ae8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48aec:	tst	w0, #0x80000
   48af0:	mov	w8, #0x70e                 	// #1806
   48af4:	mov	w9, #0x717                 	// #1815
   48af8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48afc:	mov	w8, #0x34                  	// #52
   48b00:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48b04:	mov	w0, #0x6ce                 	// #1742
   48b08:	ret
   48b0c:	tst	w0, #0x80000
   48b10:	mov	w8, #0x517                 	// #1303
   48b14:	mov	w9, #0x513                 	// #1299
   48b18:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b1c:	tbnz	w0, #11, 49540 <aarch64_opcode_lookup@@Base+0x493c>
   48b20:	tst	w0, #0x1000
   48b24:	mov	w8, #0x71e                 	// #1822
   48b28:	mov	w9, #0x5ce                 	// #1486
   48b2c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b30:	tbnz	w0, #20, 49548 <aarch64_opcode_lookup@@Base+0x4944>
   48b34:	mov	w0, #0x8a3                 	// #2211
   48b38:	ret
   48b3c:	mov	w8, #0x561                 	// #1377
   48b40:	mov	w9, #0x7a0                 	// #1952
   48b44:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b48:	tbnz	w0, #17, 49558 <aarch64_opcode_lookup@@Base+0x4954>
   48b4c:	mov	w8, #0x59a                 	// #1434
   48b50:	mov	w9, #0x5c2                 	// #1474
   48b54:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b58:	mov	w0, #0x7ee                 	// #2030
   48b5c:	ret
   48b60:	mov	w8, #0x50f                 	// #1295
   48b64:	mov	w9, #0x6da                 	// #1754
   48b68:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b6c:	mov	w8, #0x557                 	// #1367
   48b70:	mov	w9, #0x71f                 	// #1823
   48b74:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b78:	tst	w0, #0x100000
   48b7c:	mov	w8, #0x85b                 	// #2139
   48b80:	mov	w9, #0x84d                 	// #2125
   48b84:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b88:	tst	w0, #0x800000
   48b8c:	mov	w8, #0x853                 	// #2131
   48b90:	mov	w9, #0x7fe                 	// #2046
   48b94:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48b98:	tbnz	w0, #18, 49564 <aarch64_opcode_lookup@@Base+0x4960>
   48b9c:	tst	w0, #0x100000
   48ba0:	mov	w8, #0x710                 	// #1808
   48ba4:	mov	w9, #0x5b8                 	// #1464
   48ba8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48bac:	mov	w8, #0x910                 	// #2320
   48bb0:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48bb4:	mov	w0, #0x55d                 	// #1373
   48bb8:	ret
   48bbc:	mov	w0, #0x596                 	// #1430
   48bc0:	ret
   48bc4:	mov	w0, #0x8f9                 	// #2297
   48bc8:	ret
   48bcc:	tbnz	w0, #12, 49570 <aarch64_opcode_lookup@@Base+0x496c>
   48bd0:	tst	w0, #0x20000
   48bd4:	mov	w8, #0x917                 	// #2327
   48bd8:	mov	w9, #0x919                 	// #2329
   48bdc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48be0:	tbnz	w0, #16, 49578 <aarch64_opcode_lookup@@Base+0x4974>
   48be4:	tst	w0, #0x80000
   48be8:	mov	w8, #0x29f                 	// #671
   48bec:	mov	w9, #0xa6                  	// #166
   48bf0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48bf4:	mov	w8, #0x726                 	// #1830
   48bf8:	mov	w9, #0x70b                 	// #1803
   48bfc:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48c00:	tbnz	w0, #20, 49584 <aarch64_opcode_lookup@@Base+0x4980>
   48c04:	mov	w0, #0x8f3                 	// #2291
   48c08:	ret
   48c0c:	tbnz	w0, #22, 49594 <aarch64_opcode_lookup@@Base+0x4990>
   48c10:	mov	w0, #0x5d0                 	// #1488
   48c14:	ret
   48c18:	tbnz	w0, #20, 495a4 <aarch64_opcode_lookup@@Base+0x49a0>
   48c1c:	tbnz	w0, #22, 49970 <aarch64_opcode_lookup@@Base+0x4d6c>
   48c20:	mov	w8, #0x744                 	// #1860
   48c24:	mov	w9, #0x738                 	// #1848
   48c28:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48c2c:	tst	w0, #0x100000
   48c30:	mov	w8, #0x58f                 	// #1423
   48c34:	mov	w9, #0x7b4                 	// #1972
   48c38:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48c3c:	mov	w0, #0x515                 	// #1301
   48c40:	ret
   48c44:	mov	w0, #0x6d6                 	// #1750
   48c48:	ret
   48c4c:	tbnz	w0, #12, 495b4 <aarch64_opcode_lookup@@Base+0x49b0>
   48c50:	tst	w0, #0x400000
   48c54:	mov	w8, #0x834                 	// #2100
   48c58:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48c5c:	mov	w8, #0x87b                 	// #2171
   48c60:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48c64:	tst	w0, #0x1000
   48c68:	mov	w8, #0x899                 	// #2201
   48c6c:	mov	w9, #0x889                 	// #2185
   48c70:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48c74:	tst	w0, #0x80000
   48c78:	mov	w8, #0x7a6                 	// #1958
   48c7c:	mov	w9, #0x7af                 	// #1967
   48c80:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48c84:	mov	w8, #0x36                  	// #54
   48c88:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48c8c:	tbnz	w0, #17, 495bc <aarch64_opcode_lookup@@Base+0x49b8>
   48c90:	tst	w0, #0x40000
   48c94:	mov	w8, #0x552                 	// #1362
   48c98:	mov	w9, #0x7d4                 	// #2004
   48c9c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ca0:	mov	w8, #0x8aa                 	// #2218
   48ca4:	mov	w9, #0x89c                 	// #2204
   48ca8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48cac:	mov	w8, #0x5ae                 	// #1454
   48cb0:	mov	w9, #0x7df                 	// #2015
   48cb4:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48cb8:	tbnz	w0, #18, 495c4 <aarch64_opcode_lookup@@Base+0x49c0>
   48cbc:	tst	w0, #0x100000
   48cc0:	mov	w8, #0x5a9                 	// #1449
   48cc4:	mov	w9, #0x5ad                 	// #1453
   48cc8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ccc:	tbnz	w0, #10, 495cc <aarch64_opcode_lookup@@Base+0x49c8>
   48cd0:	tbnz	w0, #12, 4997c <aarch64_opcode_lookup@@Base+0x4d78>
   48cd4:	tst	w0, #0x2000
   48cd8:	mov	w8, #0x700                 	// #1792
   48cdc:	mov	w9, #0x6e1                 	// #1761
   48ce0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48ce4:	tst	w0, #0x100000
   48ce8:	mov	w8, #0x8d8                 	// #2264
   48cec:	mov	w9, #0x8d0                 	// #2256
   48cf0:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48cf4:	tbnz	w0, #19, 495d4 <aarch64_opcode_lookup@@Base+0x49d0>
   48cf8:	tbnz	w0, #22, 49988 <aarch64_opcode_lookup@@Base+0x4d84>
   48cfc:	mov	w0, #0x7aa                 	// #1962
   48d00:	ret
   48d04:	mov	w8, #0x90e                 	// #2318
   48d08:	b	48db8 <aarch64_opcode_lookup@@Base+0x41b4>
   48d0c:	mov	w0, #0x59c                 	// #1436
   48d10:	ret
   48d14:	tst	w0, #0x80000
   48d18:	mov	w8, #0x2a0                 	// #672
   48d1c:	mov	w9, #0xa7                  	// #167
   48d20:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d24:	mov	w8, #0x870                 	// #2160
   48d28:	mov	w9, #0x70c                 	// #1804
   48d2c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d30:	tbnz	w0, #20, 495e0 <aarch64_opcode_lookup@@Base+0x49dc>
   48d34:	mov	w0, #0x8ee                 	// #2286
   48d38:	ret
   48d3c:	tbnz	w0, #22, 495f0 <aarch64_opcode_lookup@@Base+0x49ec>
   48d40:	mov	w0, #0x553                 	// #1363
   48d44:	ret
   48d48:	tbnz	w0, #20, 49600 <aarch64_opcode_lookup@@Base+0x49fc>
   48d4c:	tbnz	w0, #22, 49998 <aarch64_opcode_lookup@@Base+0x4d94>
   48d50:	mov	w8, #0x7d7                 	// #2007
   48d54:	mov	w9, #0x7cb                 	// #1995
   48d58:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d5c:	mov	w0, #0x116                 	// #278
   48d60:	ret
   48d64:	mov	w0, #0x813                 	// #2067
   48d68:	ret
   48d6c:	mov	w8, #0x8e3                 	// #2275
   48d70:	mov	w9, #0x866                 	// #2150
   48d74:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d78:	mov	w8, #0x8ea                 	// #2282
   48d7c:	mov	w9, #0x86d                 	// #2157
   48d80:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d84:	mov	w8, #0x8e4                 	// #2276
   48d88:	mov	w9, #0x867                 	// #2151
   48d8c:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d90:	mov	w8, #0x8eb                 	// #2283
   48d94:	mov	w9, #0x86e                 	// #2158
   48d98:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48d9c:	tst	w0, #0x1000
   48da0:	mov	w8, #0x89a                 	// #2202
   48da4:	mov	w9, #0x88a                 	// #2186
   48da8:	b	48dc8 <aarch64_opcode_lookup@@Base+0x41c4>
   48dac:	mov	w0, #0x718                 	// #1816
   48db0:	ret
   48db4:	mov	w8, #0x38                  	// #56
   48db8:	cinc	w0, w8, ne  // ne = any
   48dbc:	ret
   48dc0:	mov	w8, #0x55e                 	// #1374
   48dc4:	mov	w9, #0x7b6                 	// #1974
   48dc8:	csel	w0, w9, w8, eq  // eq = none
   48dcc:	ret
   48dd0:	mov	w0, #0x732                 	// #1842
   48dd4:	ret
   48dd8:	tbnz	w0, #11, 49610 <aarch64_opcode_lookup@@Base+0x4a0c>
   48ddc:	mov	w0, #0x968                 	// #2408
   48de0:	ret
   48de4:	tbnz	w0, #20, 49620 <aarch64_opcode_lookup@@Base+0x4a1c>
   48de8:	tst	w0, #0x40000000
   48dec:	mov	w8, #0x8a4                 	// #2212
   48df0:	mov	w9, #0x8b4                 	// #2228
   48df4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48df8:	mov	w8, #0x6d7                 	// #1751
   48dfc:	mov	w9, #0x4f9                 	// #1273
   48e00:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e04:	mov	w0, #0x8e9                 	// #2281
   48e08:	ret
   48e0c:	tbnz	w0, #22, 49628 <aarch64_opcode_lookup@@Base+0x4a24>
   48e10:	tst	w0, #0x800000
   48e14:	mov	w8, #0x959                 	// #2393
   48e18:	mov	w9, #0x957                 	// #2391
   48e1c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e20:	mov	w0, #0x4fd                 	// #1277
   48e24:	ret
   48e28:	tst	w0, #0x800000
   48e2c:	mov	w8, #0x854                 	// #2132
   48e30:	mov	w9, #0x7ff                 	// #2047
   48e34:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e38:	tbnz	w0, #22, 49630 <aarch64_opcode_lookup@@Base+0x4a2c>
   48e3c:	tst	w0, #0x800000
   48e40:	mov	w8, #0x582                 	// #1410
   48e44:	mov	w9, #0x819                 	// #2073
   48e48:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e4c:	tbnz	w0, #16, 49640 <aarch64_opcode_lookup@@Base+0x4a3c>
   48e50:	tbnz	w0, #17, 499a4 <aarch64_opcode_lookup@@Base+0x4da0>
   48e54:	tbnz	w0, #18, 49ae8 <aarch64_opcode_lookup@@Base+0x4ee4>
   48e58:	tbnz	w0, #19, 49b44 <aarch64_opcode_lookup@@Base+0x4f40>
   48e5c:	tst	w0, #0x100000
   48e60:	mov	w8, #0x79d                 	// #1949
   48e64:	mov	w9, #0x555                 	// #1365
   48e68:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e6c:	mov	w8, #0x7e6                 	// #2022
   48e70:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   48e74:	tst	w0, #0x80000
   48e78:	mov	w8, #0x5b3                 	// #1459
   48e7c:	mov	w9, #0x597                 	// #1431
   48e80:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48e84:	mov	w0, #0x8fa                 	// #2298
   48e88:	ret
   48e8c:	tbnz	w0, #16, 49650 <aarch64_opcode_lookup@@Base+0x4a4c>
   48e90:	tst	w0, #0x80000
   48e94:	mov	w8, #0x2a1                 	// #673
   48e98:	mov	w9, #0xa8                  	// #168
   48e9c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48ea0:	mov	w0, #0x70d                 	// #1805
   48ea4:	ret
   48ea8:	tbnz	w0, #20, 49660 <aarch64_opcode_lookup@@Base+0x4a5c>
   48eac:	tst	w0, #0x40000000
   48eb0:	mov	w8, #0x8f4                 	// #2292
   48eb4:	mov	w9, #0x8ff                 	// #2303
   48eb8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48ebc:	tst	w0, #0x800000
   48ec0:	mov	w8, #0x72b                 	// #1835
   48ec4:	mov	w9, #0x72e                 	// #1838
   48ec8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48ecc:	tbnz	w0, #22, 49668 <aarch64_opcode_lookup@@Base+0x4a64>
   48ed0:	mov	w8, #0x735                 	// #1845
   48ed4:	mov	w9, #0x729                 	// #1833
   48ed8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48edc:	tbnz	w0, #12, 49674 <aarch64_opcode_lookup@@Base+0x4a70>
   48ee0:	tst	w0, #0x400000
   48ee4:	mov	w8, #0x837                 	// #2103
   48ee8:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   48eec:	mov	w8, #0x87f                 	// #2175
   48ef0:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   48ef4:	mov	w0, #0x7b0                 	// #1968
   48ef8:	ret
   48efc:	mov	w8, #0x3a                  	// #58
   48f00:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   48f04:	tst	w0, #0x100000
   48f08:	mov	w8, #0x8ab                 	// #2219
   48f0c:	mov	w9, #0x89d                 	// #2205
   48f10:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48f14:	mov	w0, #0x6d4                 	// #1748
   48f18:	ret
   48f1c:	tst	w0, #0x40000
   48f20:	mov	w8, #0x599                 	// #1433
   48f24:	mov	w9, #0x5c5                 	// #1477
   48f28:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48f2c:	mov	w0, #0x8ec                 	// #2284
   48f30:	ret
   48f34:	mov	w8, #0x83d                 	// #2109
   48f38:	mov	w9, #0x805                 	// #2053
   48f3c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48f40:	mov	w0, #0x6e2                 	// #1762
   48f44:	ret
   48f48:	tbnz	w0, #19, 4967c <aarch64_opcode_lookup@@Base+0x4a78>
   48f4c:	tbnz	w0, #20, 499ac <aarch64_opcode_lookup@@Base+0x4da8>
   48f50:	mov	w0, #0x5b7                 	// #1463
   48f54:	ret
   48f58:	mov	w8, #0x7e8                 	// #2024
   48f5c:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   48f60:	tst	w0, #0x80000
   48f64:	mov	w8, #0x5bd                 	// #1469
   48f68:	mov	w9, #0x59d                 	// #1437
   48f6c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48f70:	tbnz	w0, #16, 4968c <aarch64_opcode_lookup@@Base+0x4a88>
   48f74:	tst	w0, #0x80000
   48f78:	mov	w8, #0x2a2                 	// #674
   48f7c:	mov	w9, #0xa9                  	// #169
   48f80:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48f84:	mov	w0, #0x704                 	// #1796
   48f88:	ret
   48f8c:	tbnz	w0, #20, 49698 <aarch64_opcode_lookup@@Base+0x4a94>
   48f90:	tst	w0, #0x40000000
   48f94:	mov	w8, #0x8ef                 	// #2287
   48f98:	mov	w9, #0x8a5                 	// #2213
   48f9c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48fa0:	tst	w0, #0x800000
   48fa4:	mov	w8, #0x7bf                 	// #1983
   48fa8:	mov	w9, #0x7c2                 	// #1986
   48fac:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48fb0:	tbnz	w0, #22, 496a0 <aarch64_opcode_lookup@@Base+0x4a9c>
   48fb4:	mov	w8, #0x7ca                 	// #1994
   48fb8:	mov	w9, #0x7be                 	// #1982
   48fbc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48fc0:	mov	w0, #0x307                 	// #775
   48fc4:	ret
   48fc8:	cmp	w0, #0x0
   48fcc:	mov	w8, #0x925                 	// #2341
   48fd0:	mov	w9, #0x3d                  	// #61
   48fd4:	b	4909c <aarch64_opcode_lookup@@Base+0x4498>
   48fd8:	tbnz	w0, #23, 497b0 <aarch64_opcode_lookup@@Base+0x4bac>
   48fdc:	tbnz	w0, #31, 49aa0 <aarch64_opcode_lookup@@Base+0x4e9c>
   48fe0:	tst	w0, #0x40000000
   48fe4:	mov	w8, #0x414                 	// #1044
   48fe8:	mov	w9, #0x411                 	// #1041
   48fec:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   48ff0:	mov	w0, #0x2d2                 	// #722
   48ff4:	ret
   48ff8:	tbnz	w0, #31, 498dc <aarch64_opcode_lookup@@Base+0x4cd8>
   48ffc:	tst	w0, #0x40000000
   49000:	mov	w8, #0x41f                 	// #1055
   49004:	mov	w9, #0x41c                 	// #1052
   49008:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4900c:	tbnz	w0, #16, 497c4 <aarch64_opcode_lookup@@Base+0x4bc0>
   49010:	cmp	w0, #0x0
   49014:	mov	w8, #0x2b4                 	// #692
   49018:	mov	w9, #0x2af                 	// #687
   4901c:	b	4909c <aarch64_opcode_lookup@@Base+0x4498>
   49020:	tbnz	w0, #18, 497cc <aarch64_opcode_lookup@@Base+0x4bc8>
   49024:	tst	w0, #0x80000
   49028:	mov	w8, #0x32e                 	// #814
   4902c:	mov	w9, #0x334                 	// #820
   49030:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49034:	tbnz	w0, #31, 498e4 <aarch64_opcode_lookup@@Base+0x4ce0>
   49038:	tst	w0, #0x40000000
   4903c:	mov	w8, #0x42b                 	// #1067
   49040:	mov	w9, #0x428                 	// #1064
   49044:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49048:	tst	w0, #0x20000000
   4904c:	mov	w8, #0x22                  	// #34
   49050:	mov	w9, #0x1e                  	// #30
   49054:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49058:	tst	w0, #0x10000
   4905c:	mov	w8, #0x2b9                 	// #697
   49060:	mov	w9, #0x2b2                 	// #690
   49064:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49068:	tbnz	w0, #31, 498ec <aarch64_opcode_lookup@@Base+0x4ce8>
   4906c:	tst	w0, #0x40000000
   49070:	mov	w8, #0x437                 	// #1079
   49074:	mov	w9, #0x434                 	// #1076
   49078:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4907c:	mov	w8, #0x171                 	// #369
   49080:	mov	w9, #0x165                 	// #357
   49084:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49088:	mov	w0, #0x309                 	// #777
   4908c:	ret
   49090:	cmp	w0, #0x0
   49094:	mov	w8, #0x932                 	// #2354
   49098:	mov	w9, #0x45                  	// #69
   4909c:	csel	w0, w9, w8, ge  // ge = tcont
   490a0:	ret
   490a4:	mov	w0, #0x156                 	// #342
   490a8:	ret
   490ac:	tbnz	w0, #23, 497d4 <aarch64_opcode_lookup@@Base+0x4bd0>
   490b0:	tbnz	w0, #31, 49aa8 <aarch64_opcode_lookup@@Base+0x4ea4>
   490b4:	tst	w0, #0x40000000
   490b8:	mov	w8, #0x444                 	// #1092
   490bc:	mov	w9, #0x441                 	// #1089
   490c0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   490c4:	tbnz	w0, #16, 497e8 <aarch64_opcode_lookup@@Base+0x4be4>
   490c8:	mov	w0, #0x24                  	// #36
   490cc:	ret
   490d0:	tst	w0, #0x40000000
   490d4:	mov	w8, #0x93c                 	// #2364
   490d8:	mov	w9, #0x938                 	// #2360
   490dc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   490e0:	tst	w0, #0x40000000
   490e4:	mov	w8, #0xde                  	// #222
   490e8:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   490ec:	tbnz	w0, #31, 498f4 <aarch64_opcode_lookup@@Base+0x4cf0>
   490f0:	tst	w0, #0x40000000
   490f4:	mov	w8, #0x44f                 	// #1103
   490f8:	mov	w9, #0x44c                 	// #1100
   490fc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49100:	mov	w8, #0xf8                  	// #248
   49104:	mov	w9, #0xc5                  	// #197
   49108:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4910c:	tst	w0, #0x20000000
   49110:	mov	w8, #0x20e                 	// #526
   49114:	mov	w9, #0x1f0                 	// #496
   49118:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4911c:	tbnz	w0, #31, 498fc <aarch64_opcode_lookup@@Base+0x4cf8>
   49120:	tst	w0, #0x40000000
   49124:	mov	w8, #0x45b                 	// #1115
   49128:	mov	w9, #0x458                 	// #1112
   4912c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49130:	tst	w0, #0x20000000
   49134:	mov	w8, #0x210                 	// #528
   49138:	mov	w9, #0x1f2                 	// #498
   4913c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49140:	mov	w0, #0x15e                 	// #350
   49144:	ret
   49148:	tst	w0, #0x40000000
   4914c:	mov	w8, #0xe0                  	// #224
   49150:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49154:	tbnz	w0, #31, 49904 <aarch64_opcode_lookup@@Base+0x4d00>
   49158:	tst	w0, #0x40000000
   4915c:	mov	w8, #0x467                 	// #1127
   49160:	mov	w9, #0x464                 	// #1124
   49164:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49168:	tst	w0, #0x20000000
   4916c:	mov	w8, #0xfa                  	// #250
   49170:	mov	w9, #0xc9                  	// #201
   49174:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49178:	mov	w8, #0x222                 	// #546
   4917c:	cinc	w0, w8, eq  // eq = none
   49180:	ret
   49184:	tbnz	w0, #19, 497f4 <aarch64_opcode_lookup@@Base+0x4bf0>
   49188:	mov	w0, #0x30b                 	// #779
   4918c:	ret
   49190:	tbnz	w0, #23, 49804 <aarch64_opcode_lookup@@Base+0x4c00>
   49194:	tbnz	w0, #31, 49ab0 <aarch64_opcode_lookup@@Base+0x4eac>
   49198:	tst	w0, #0x40000000
   4919c:	mov	w8, #0x408                 	// #1032
   491a0:	mov	w9, #0x405                 	// #1029
   491a4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   491a8:	tst	w0, #0x80000
   491ac:	mov	w8, #0xe6                  	// #230
   491b0:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   491b4:	tst	w0, #0x40000000
   491b8:	mov	w8, #0xe2                  	// #226
   491bc:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   491c0:	tbnz	w0, #31, 4990c <aarch64_opcode_lookup@@Base+0x4d08>
   491c4:	tst	w0, #0x40000000
   491c8:	mov	w8, #0x421                 	// #1057
   491cc:	mov	w9, #0x41e                 	// #1054
   491d0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   491d4:	tbnz	w0, #23, 49818 <aarch64_opcode_lookup@@Base+0x4c14>
   491d8:	mov	w8, #0xe9                  	// #233
   491dc:	mov	w9, #0xb9                  	// #185
   491e0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   491e4:	tbnz	w0, #18, 49824 <aarch64_opcode_lookup@@Base+0x4c20>
   491e8:	tst	w0, #0x80000
   491ec:	mov	w8, #0x32f                 	// #815
   491f0:	mov	w9, #0x336                 	// #822
   491f4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   491f8:	tbnz	w0, #31, 49914 <aarch64_opcode_lookup@@Base+0x4d10>
   491fc:	tst	w0, #0x40000000
   49200:	mov	w8, #0x42d                 	// #1069
   49204:	mov	w9, #0x42a                 	// #1066
   49208:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4920c:	tst	w0, #0x20000000
   49210:	tbnz	w0, #23, 4982c <aarch64_opcode_lookup@@Base+0x4c28>
   49214:	mov	w8, #0xeb                  	// #235
   49218:	mov	w9, #0xbb                  	// #187
   4921c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49220:	tbnz	w0, #31, 4991c <aarch64_opcode_lookup@@Base+0x4d18>
   49224:	tst	w0, #0x40000000
   49228:	mov	w8, #0x439                 	// #1081
   4922c:	mov	w9, #0x436                 	// #1078
   49230:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49234:	tst	w0, #0x20000000
   49238:	tbnz	w0, #23, 49838 <aarch64_opcode_lookup@@Base+0x4c34>
   4923c:	mov	w8, #0xed                  	// #237
   49240:	mov	w9, #0xbd                  	// #189
   49244:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49248:	tst	w0, #0x80000
   4924c:	mov	w8, #0x31c                 	// #796
   49250:	mov	w9, #0x30d                 	// #781
   49254:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49258:	tst	w0, #0x20000000
   4925c:	mov	w8, #0x101                 	// #257
   49260:	mov	w9, #0xd2                  	// #210
   49264:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49268:	tst	w0, #0x40000000
   4926c:	mov	w8, #0x93d                 	// #2365
   49270:	mov	w9, #0x939                 	// #2361
   49274:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49278:	tst	w0, #0x40000000
   4927c:	mov	w8, #0xe4                  	// #228
   49280:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49284:	tbnz	w0, #23, 49844 <aarch64_opcode_lookup@@Base+0x4c40>
   49288:	mov	w8, #0x206                 	// #518
   4928c:	mov	w9, #0x1e8                 	// #488
   49290:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49294:	tbnz	w0, #31, 49924 <aarch64_opcode_lookup@@Base+0x4d20>
   49298:	tst	w0, #0x40000000
   4929c:	mov	w8, #0x451                 	// #1105
   492a0:	mov	w9, #0x44e                 	// #1102
   492a4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   492a8:	tbnz	w0, #23, 49850 <aarch64_opcode_lookup@@Base+0x4c4c>
   492ac:	mov	w8, #0xf1                  	// #241
   492b0:	mov	w9, #0xc1                  	// #193
   492b4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   492b8:	tst	w0, #0x20000000
   492bc:	tbnz	w0, #23, 4985c <aarch64_opcode_lookup@@Base+0x4c58>
   492c0:	mov	w8, #0x208                 	// #520
   492c4:	mov	w9, #0x1ea                 	// #490
   492c8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   492cc:	mov	w0, #0x345                 	// #837
   492d0:	ret
   492d4:	mov	w8, #0x20a                 	// #522
   492d8:	mov	w9, #0x1ec                 	// #492
   492dc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   492e0:	tbnz	w0, #31, 4992c <aarch64_opcode_lookup@@Base+0x4d28>
   492e4:	tst	w0, #0x40000000
   492e8:	mov	w8, #0x45d                 	// #1117
   492ec:	mov	w9, #0x45a                 	// #1114
   492f0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   492f4:	tbnz	w0, #23, 49868 <aarch64_opcode_lookup@@Base+0x4c64>
   492f8:	mov	w8, #0x20c                 	// #524
   492fc:	mov	w9, #0x1ee                 	// #494
   49300:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49304:	mov	w0, #0x16c                 	// #364
   49308:	ret
   4930c:	tbnz	w0, #31, 49934 <aarch64_opcode_lookup@@Base+0x4d30>
   49310:	tst	w0, #0x40000000
   49314:	mov	w8, #0x469                 	// #1129
   49318:	mov	w9, #0x466                 	// #1126
   4931c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49320:	mov	w0, #0x105                 	// #261
   49324:	ret
   49328:	mov	w0, #0x928                 	// #2344
   4932c:	ret
   49330:	mov	w0, #0x3c0                 	// #960
   49334:	ret
   49338:	mov	w8, #0x6dc                 	// #1756
   4933c:	mov	w9, #0x720                 	// #1824
   49340:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49344:	tbnz	w0, #10, 499bc <aarch64_opcode_lookup@@Base+0x4db8>
   49348:	tbnz	w0, #11, 49af8 <aarch64_opcode_lookup@@Base+0x4ef4>
   4934c:	tst	w0, #0x1000
   49350:	mov	w8, #0x7ec                 	// #2028
   49354:	mov	w9, #0x73f                 	// #1855
   49358:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4935c:	tst	w0, #0x40000000
   49360:	mov	w8, #0x855                 	// #2133
   49364:	mov	w9, #0x50a                 	// #1290
   49368:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4936c:	mov	w8, #0x592                 	// #1426
   49370:	mov	w9, #0x5a8                 	// #1448
   49374:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49378:	tbnz	w0, #16, 499c4 <aarch64_opcode_lookup@@Base+0x4dc0>
   4937c:	tst	w0, #0x40000
   49380:	mov	w8, #0x709                 	// #1801
   49384:	mov	w9, #0x703                 	// #1795
   49388:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4938c:	tst	w0, #0x800000
   49390:	tbnz	w0, #19, 499cc <aarch64_opcode_lookup@@Base+0x4dc8>
   49394:	mov	w8, #0xca                  	// #202
   49398:	mov	w9, #0xb6                  	// #182
   4939c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   493a0:	tbnz	w0, #20, 499d8 <aarch64_opcode_lookup@@Base+0x4dd4>
   493a4:	mov	w0, #0x5b6                 	// #1462
   493a8:	ret
   493ac:	tst	w0, #0x80000
   493b0:	mov	w8, #0x518                 	// #1304
   493b4:	mov	w9, #0x514                 	// #1300
   493b8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   493bc:	mov	w0, #0x567                 	// #1383
   493c0:	ret
   493c4:	mov	w0, #0x916                 	// #2326
   493c8:	ret
   493cc:	tst	w0, #0x40000000
   493d0:	mov	w8, #0x8d5                 	// #2261
   493d4:	mov	w9, #0x6c6                 	// #1734
   493d8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   493dc:	tst	w0, #0x800000
   493e0:	mov	w8, #0x739                 	// #1849
   493e4:	mov	w9, #0x73c                 	// #1852
   493e8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   493ec:	tbnz	w0, #22, 499e4 <aarch64_opcode_lookup@@Base+0x4de0>
   493f0:	mov	w8, #0x5d1                 	// #1489
   493f4:	mov	w9, #0x5c9                 	// #1481
   493f8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   493fc:	mov	w8, #0x891                 	// #2193
   49400:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49404:	tst	w0, #0x800
   49408:	mov	w8, #0x83a                 	// #2106
   4940c:	mov	w9, #0x883                 	// #2179
   49410:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49414:	tst	w0, #0x100000
   49418:	mov	w8, #0x55b                 	// #1371
   4941c:	mov	w9, #0x7b5                 	// #1973
   49420:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49424:	mov	w0, #0x7c5                 	// #1989
   49428:	ret
   4942c:	mov	w8, #0x595                 	// #1429
   49430:	mov	w9, #0x58e                 	// #1422
   49434:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49438:	mov	w0, #0x88c                 	// #2188
   4943c:	ret
   49440:	tbnz	w0, #20, 499f0 <aarch64_opcode_lookup@@Base+0x4dec>
   49444:	tst	w0, #0x400000
   49448:	mov	w8, #0x57c                 	// #1404
   4944c:	mov	w9, #0x57a                 	// #1402
   49450:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49454:	mov	w8, #0x8d6                 	// #2262
   49458:	mov	w9, #0x6c0                 	// #1728
   4945c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49460:	tst	w0, #0x800000
   49464:	mov	w8, #0x7cd                 	// #1997
   49468:	mov	w9, #0x7d0                 	// #2000
   4946c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49470:	mov	w8, #0x54e                 	// #1358
   49474:	mov	w9, #0x550                 	// #1360
   49478:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4947c:	mov	w8, #0x13f                 	// #319
   49480:	mov	w9, #0x132                 	// #306
   49484:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49488:	tst	w0, #0x800
   4948c:	mov	w8, #0x83b                 	// #2107
   49490:	mov	w9, #0x884                 	// #2180
   49494:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49498:	tst	w0, #0x100000
   4949c:	mov	w8, #0x504                 	// #1284
   494a0:	mov	w9, #0x723                 	// #1827
   494a4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   494a8:	tst	w0, #0x1000
   494ac:	mov	w8, #0x96b                 	// #2411
   494b0:	mov	w9, #0x969                 	// #2409
   494b4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   494b8:	tst	w0, #0x40000000
   494bc:	mov	w8, #0x8b0                 	// #2224
   494c0:	mov	w9, #0x50e                 	// #1294
   494c4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   494c8:	tbnz	w0, #22, 499f8 <aarch64_opcode_lookup@@Base+0x4df4>
   494cc:	tst	w0, #0x800000
   494d0:	mov	w8, #0x976                 	// #2422
   494d4:	mov	w9, #0x817                 	// #2071
   494d8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   494dc:	tst	w0, #0x40000000
   494e0:	mov	w8, #0xae                  	// #174
   494e4:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   494e8:	mov	w8, #0x72d                 	// #1837
   494ec:	mov	w9, #0x730                 	// #1840
   494f0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   494f4:	mov	w8, #0x895                 	// #2197
   494f8:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   494fc:	mov	w8, #0x510                 	// #1296
   49500:	mov	w9, #0x7b8                 	// #1976
   49504:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49508:	mov	w0, #0x859                 	// #2137
   4950c:	ret
   49510:	mov	w8, #0x59b                 	// #1435
   49514:	mov	w9, #0x58d                 	// #1421
   49518:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4951c:	mov	w8, #0x586                 	// #1414
   49520:	mov	w9, #0x57e                 	// #1406
   49524:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49528:	mov	w8, #0x8d7                 	// #2263
   4952c:	mov	w9, #0x6c3                 	// #1731
   49530:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49534:	mov	w8, #0x7c0                 	// #1984
   49538:	mov	w9, #0x7c3                 	// #1987
   4953c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49540:	mov	w0, #0x5cf                 	// #1487
   49544:	ret
   49548:	tst	w0, #0x40000000
   4954c:	mov	w8, #0x872                 	// #2162
   49550:	mov	w9, #0x50b                 	// #1291
   49554:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49558:	mov	w8, #0x598                 	// #1432
   4955c:	mov	w9, #0x5c4                 	// #1476
   49560:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49564:	tbnz	w0, #20, 49a00 <aarch64_opcode_lookup@@Base+0x4dfc>
   49568:	mov	w0, #0x5bb                 	// #1467
   4956c:	ret
   49570:	mov	w0, #0x91d                 	// #2333
   49574:	ret
   49578:	tst	w0, #0x40000000
   4957c:	mov	w8, #0xb0                  	// #176
   49580:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49584:	tst	w0, #0x40000000
   49588:	mov	w8, #0x8ed                 	// #2285
   4958c:	mov	w9, #0x6c7                 	// #1735
   49590:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49594:	tst	w0, #0x800000
   49598:	mov	w8, #0x5ca                 	// #1482
   4959c:	mov	w9, #0x5cc                 	// #1484
   495a0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   495a4:	tbnz	w0, #22, 49a10 <aarch64_opcode_lookup@@Base+0x4e0c>
   495a8:	mov	w8, #0x743                 	// #1859
   495ac:	mov	w9, #0x737                 	// #1847
   495b0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   495b4:	mov	w0, #0x95b                 	// #2395
   495b8:	ret
   495bc:	mov	w0, #0x7c6                 	// #1990
   495c0:	ret
   495c4:	mov	w0, #0x593                 	// #1427
   495c8:	ret
   495cc:	mov	w0, #0x6e0                 	// #1760
   495d0:	ret
   495d4:	tbnz	w0, #20, 49a1c <aarch64_opcode_lookup@@Base+0x4e18>
   495d8:	mov	w0, #0x5c0                 	// #1472
   495dc:	ret
   495e0:	tst	w0, #0x40000000
   495e4:	mov	w8, #0x8f7                 	// #2295
   495e8:	mov	w9, #0x6c1                 	// #1729
   495ec:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   495f0:	tst	w0, #0x800000
   495f4:	mov	w8, #0x54d                 	// #1357
   495f8:	mov	w9, #0x54f                 	// #1359
   495fc:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49600:	tbnz	w0, #22, 49a28 <aarch64_opcode_lookup@@Base+0x4e24>
   49604:	mov	w8, #0x7d8                 	// #2008
   49608:	mov	w9, #0x7cc                 	// #1996
   4960c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49610:	tst	w0, #0x1000
   49614:	mov	w8, #0x96c                 	// #2412
   49618:	mov	w9, #0x96a                 	// #2410
   4961c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49620:	mov	w0, #0x8c8                 	// #2248
   49624:	ret
   49628:	mov	w0, #0x958                 	// #2392
   4962c:	ret
   49630:	tbnz	w0, #17, 49a34 <aarch64_opcode_lookup@@Base+0x4e30>
   49634:	tbnz	w0, #18, 49b00 <aarch64_opcode_lookup@@Base+0x4efc>
   49638:	mov	w0, #0x583                 	// #1411
   4963c:	ret
   49640:	tst	w0, #0x20000
   49644:	mov	w8, #0x7db                 	// #2011
   49648:	mov	w9, #0x79c                 	// #1948
   4964c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49650:	tst	w0, #0x40000000
   49654:	tbnz	w0, #23, 49a40 <aarch64_opcode_lookup@@Base+0x4e3c>
   49658:	mov	w8, #0xb2                  	// #178
   4965c:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49660:	mov	w0, #0x904                 	// #2308
   49664:	ret
   49668:	mov	w8, #0x72c                 	// #1836
   4966c:	mov	w9, #0x72f                 	// #1839
   49670:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49674:	mov	w0, #0x95c                 	// #2396
   49678:	ret
   4967c:	tst	w0, #0x800000
   49680:	mov	w8, #0x58c                 	// #1420
   49684:	mov	w9, #0x588                 	// #1416
   49688:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4968c:	tst	w0, #0x40000000
   49690:	mov	w8, #0xb4                  	// #180
   49694:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49698:	mov	w0, #0x8f8                 	// #2296
   4969c:	ret
   496a0:	mov	w8, #0x7c1                 	// #1985
   496a4:	mov	w9, #0x7c4                 	// #1988
   496a8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   496ac:	mov	w8, #0x317                 	// #791
   496b0:	mov	w9, #0x30f                 	// #783
   496b4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   496b8:	tbnz	w0, #31, 49ab8 <aarch64_opcode_lookup@@Base+0x4eb4>
   496bc:	tst	w0, #0x40000000
   496c0:	mov	w8, #0x413                 	// #1043
   496c4:	mov	w9, #0x410                 	// #1040
   496c8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   496cc:	tst	w0, #0x10000
   496d0:	mov	w8, #0x2b5                 	// #693
   496d4:	mov	w9, #0x2ad                 	// #685
   496d8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   496dc:	mov	w0, #0x339                 	// #825
   496e0:	ret
   496e4:	mov	w8, #0x319                 	// #793
   496e8:	mov	w9, #0x311                 	// #785
   496ec:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   496f0:	tbnz	w0, #31, 49ac0 <aarch64_opcode_lookup@@Base+0x4ebc>
   496f4:	tst	w0, #0x40000000
   496f8:	mov	w8, #0x443                 	// #1091
   496fc:	mov	w9, #0x440                 	// #1088
   49700:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49704:	tst	w0, #0x20000000
   49708:	tbnz	w0, #23, 49a74 <aarch64_opcode_lookup@@Base+0x4e70>
   4970c:	mov	w8, #0x21a                 	// #538
   49710:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   49714:	mov	w8, #0x21c                 	// #540
   49718:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   4971c:	tst	w0, #0x20000000
   49720:	tbnz	w0, #23, 49a7c <aarch64_opcode_lookup@@Base+0x4e78>
   49724:	mov	w8, #0x26                  	// #38
   49728:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   4972c:	tbnz	w0, #31, 49ac8 <aarch64_opcode_lookup@@Base+0x4ec4>
   49730:	tst	w0, #0x40000000
   49734:	mov	w8, #0x407                 	// #1031
   49738:	mov	w9, #0x404                 	// #1028
   4973c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49740:	mov	w8, #0xfb                  	// #251
   49744:	mov	w9, #0xcc                  	// #204
   49748:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4974c:	mov	w0, #0x33b                 	// #827
   49750:	ret
   49754:	tst	w0, #0x20000000
   49758:	mov	w8, #0x23                  	// #35
   4975c:	mov	w9, #0x1f                  	// #31
   49760:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49764:	mov	w0, #0x20                  	// #32
   49768:	ret
   4976c:	tst	w0, #0x20000000
   49770:	mov	w8, #0xf6                  	// #246
   49774:	mov	w9, #0xc3                  	// #195
   49778:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4977c:	mov	w8, #0x211                 	// #529
   49780:	mov	w9, #0x1f5                 	// #501
   49784:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49788:	mov	w8, #0x102                 	// #258
   4978c:	mov	w9, #0xd3                  	// #211
   49790:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49794:	mov	w0, #0x219                 	// #537
   49798:	ret
   4979c:	mov	w8, #0x215                 	// #533
   497a0:	mov	w9, #0x1f9                 	// #505
   497a4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   497a8:	mov	w0, #0x104                 	// #260
   497ac:	ret
   497b0:	tbnz	w0, #31, 49ad0 <aarch64_opcode_lookup@@Base+0x4ecc>
   497b4:	tst	w0, #0x40000000
   497b8:	mov	w8, #0x415                 	// #1045
   497bc:	mov	w9, #0x412                 	// #1042
   497c0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   497c4:	mov	w0, #0x2b7                 	// #695
   497c8:	ret
   497cc:	mov	w0, #0x33d                 	// #829
   497d0:	ret
   497d4:	tbnz	w0, #31, 49ad8 <aarch64_opcode_lookup@@Base+0x4ed4>
   497d8:	tst	w0, #0x40000000
   497dc:	mov	w8, #0x445                 	// #1093
   497e0:	mov	w9, #0x442                 	// #1090
   497e4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   497e8:	tst	w0, #0x80000
   497ec:	mov	w8, #0xee                  	// #238
   497f0:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   497f4:	tst	w0, #0x100000
   497f8:	mov	w8, #0x31d                 	// #797
   497fc:	mov	w9, #0x31b                 	// #795
   49800:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49804:	tbnz	w0, #31, 49ae0 <aarch64_opcode_lookup@@Base+0x4edc>
   49808:	tst	w0, #0x40000000
   4980c:	mov	w8, #0x409                 	// #1033
   49810:	mov	w9, #0x406                 	// #1030
   49814:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49818:	mov	w8, #0xfc                  	// #252
   4981c:	mov	w9, #0xcd                  	// #205
   49820:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49824:	mov	w0, #0x33f                 	// #831
   49828:	ret
   4982c:	mov	w8, #0xfe                  	// #254
   49830:	mov	w9, #0xcf                  	// #207
   49834:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49838:	mov	w8, #0x100                 	// #256
   4983c:	mov	w9, #0xd1                  	// #209
   49840:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49844:	mov	w8, #0x212                 	// #530
   49848:	mov	w9, #0x1f6                 	// #502
   4984c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49850:	mov	w8, #0x103                 	// #259
   49854:	mov	w9, #0xd4                  	// #212
   49858:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4985c:	mov	w8, #0x214                 	// #532
   49860:	mov	w9, #0x1f8                 	// #504
   49864:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49868:	mov	w8, #0x216                 	// #534
   4986c:	mov	w9, #0x1fa                 	// #506
   49870:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49874:	mov	w0, #0x41b                 	// #1051
   49878:	ret
   4987c:	mov	w0, #0x427                 	// #1063
   49880:	ret
   49884:	mov	w0, #0x433                 	// #1075
   49888:	ret
   4988c:	mov	w0, #0x935                 	// #2357
   49890:	ret
   49894:	mov	w0, #0x44b                 	// #1099
   49898:	ret
   4989c:	mov	w0, #0x457                 	// #1111
   498a0:	ret
   498a4:	mov	w0, #0x463                 	// #1123
   498a8:	ret
   498ac:	mov	w0, #0x423                 	// #1059
   498b0:	ret
   498b4:	mov	w0, #0x42f                 	// #1071
   498b8:	ret
   498bc:	mov	w0, #0x43b                 	// #1083
   498c0:	ret
   498c4:	mov	w0, #0x453                 	// #1107
   498c8:	ret
   498cc:	mov	w0, #0x45f                 	// #1119
   498d0:	ret
   498d4:	mov	w0, #0x46b                 	// #1131
   498d8:	ret
   498dc:	mov	w0, #0x422                 	// #1058
   498e0:	ret
   498e4:	mov	w0, #0x42e                 	// #1070
   498e8:	ret
   498ec:	mov	w0, #0x43a                 	// #1082
   498f0:	ret
   498f4:	mov	w0, #0x452                 	// #1106
   498f8:	ret
   498fc:	mov	w0, #0x45e                 	// #1118
   49900:	ret
   49904:	mov	w0, #0x46a                 	// #1130
   49908:	ret
   4990c:	mov	w0, #0x424                 	// #1060
   49910:	ret
   49914:	mov	w0, #0x430                 	// #1072
   49918:	ret
   4991c:	mov	w0, #0x43c                 	// #1084
   49920:	ret
   49924:	mov	w0, #0x454                 	// #1108
   49928:	ret
   4992c:	mov	w0, #0x460                 	// #1120
   49930:	ret
   49934:	mov	w0, #0x46c                 	// #1132
   49938:	ret
   4993c:	tst	w0, #0x10
   49940:	mov	w8, #0x571                 	// #1393
   49944:	mov	w9, #0x56f                 	// #1391
   49948:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4994c:	mov	w0, #0x915                 	// #2325
   49950:	ret
   49954:	mov	w8, #0x542                 	// #1346
   49958:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   4995c:	tst	w0, #0x80000
   49960:	mov	w8, #0xbe                  	// #190
   49964:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49968:	mov	w0, #0x5b5                 	// #1461
   4996c:	ret
   49970:	mov	w8, #0x73b                 	// #1851
   49974:	mov	w9, #0x73e                 	// #1854
   49978:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   4997c:	tst	w0, #0x400000
   49980:	mov	w8, #0x706                 	// #1798
   49984:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49988:	tst	w0, #0x800000
   4998c:	mov	w8, #0x7ad                 	// #1965
   49990:	mov	w9, #0x7a9                 	// #1961
   49994:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49998:	mov	w8, #0x7ce                 	// #1998
   4999c:	mov	w9, #0x7d1                 	// #2001
   499a0:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   499a4:	mov	w0, #0x7dc                 	// #2012
   499a8:	ret
   499ac:	tst	w0, #0x800000
   499b0:	mov	w8, #0x7ae                 	// #1966
   499b4:	mov	w9, #0x7ac                 	// #1964
   499b8:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   499bc:	mov	w0, #0x740                 	// #1856
   499c0:	ret
   499c4:	mov	w0, #0x702                 	// #1794
   499c8:	ret
   499cc:	mov	w8, #0xcb                  	// #203
   499d0:	mov	w9, #0xb7                  	// #183
   499d4:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   499d8:	tbnz	w0, #22, 49b10 <aarch64_opcode_lookup@@Base+0x4f0c>
   499dc:	mov	w0, #0x712                 	// #1810
   499e0:	ret
   499e4:	mov	w8, #0x5cb                 	// #1483
   499e8:	mov	w9, #0x5cd                 	// #1485
   499ec:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   499f0:	mov	w0, #0x58a                 	// #1418
   499f4:	ret
   499f8:	mov	w0, #0x57d                 	// #1405
   499fc:	ret
   49a00:	tst	w0, #0x800000
   49a04:	mov	w8, #0x716                 	// #1814
   49a08:	mov	w9, #0x714                 	// #1812
   49a0c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a10:	mov	w8, #0x73a                 	// #1850
   49a14:	mov	w9, #0x73d                 	// #1853
   49a18:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a1c:	tbnz	w0, #22, 49b20 <aarch64_opcode_lookup@@Base+0x4f1c>
   49a20:	mov	w0, #0x589                 	// #1417
   49a24:	ret
   49a28:	mov	w8, #0x7cf                 	// #1999
   49a2c:	mov	w9, #0x7d2                 	// #2002
   49a30:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a34:	tbnz	w0, #18, 49b30 <aarch64_opcode_lookup@@Base+0x4f2c>
   49a38:	mov	w0, #0x57f                 	// #1407
   49a3c:	ret
   49a40:	mov	w8, #0x97f                 	// #2431
   49a44:	b	49af0 <aarch64_opcode_lookup@@Base+0x4eec>
   49a48:	mov	w8, #0xfd                  	// #253
   49a4c:	mov	w9, #0xce                  	// #206
   49a50:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a54:	mov	w8, #0xff                  	// #255
   49a58:	mov	w9, #0xd0                  	// #208
   49a5c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a60:	mov	w8, #0x28                  	// #40
   49a64:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   49a68:	mov	w8, #0x213                 	// #531
   49a6c:	mov	w9, #0x1f7                 	// #503
   49a70:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49a74:	mov	w8, #0x220                 	// #544
   49a78:	b	49a80 <aarch64_opcode_lookup@@Base+0x4e7c>
   49a7c:	mov	w8, #0x2a                  	// #42
   49a80:	cinc	w0, w8, eq  // eq = none
   49a84:	ret
   49a88:	mov	w0, #0x40f                 	// #1039
   49a8c:	ret
   49a90:	mov	w0, #0x43f                 	// #1087
   49a94:	ret
   49a98:	mov	w0, #0x403                 	// #1027
   49a9c:	ret
   49aa0:	mov	w0, #0x417                 	// #1047
   49aa4:	ret
   49aa8:	mov	w0, #0x447                 	// #1095
   49aac:	ret
   49ab0:	mov	w0, #0x40b                 	// #1035
   49ab4:	ret
   49ab8:	mov	w0, #0x416                 	// #1046
   49abc:	ret
   49ac0:	mov	w0, #0x446                 	// #1094
   49ac4:	ret
   49ac8:	mov	w0, #0x40a                 	// #1034
   49acc:	ret
   49ad0:	mov	w0, #0x418                 	// #1048
   49ad4:	ret
   49ad8:	mov	w0, #0x448                 	// #1096
   49adc:	ret
   49ae0:	mov	w0, #0x40c                 	// #1036
   49ae4:	ret
   49ae8:	tst	w0, #0x100000
   49aec:	mov	w8, #0x5d6                 	// #1494
   49af0:	cinc	w0, w8, ne  // ne = any
   49af4:	ret
   49af8:	mov	w0, #0x741                 	// #1857
   49afc:	ret
   49b00:	tst	w0, #0x800000
   49b04:	mov	w8, #0x584                 	// #1412
   49b08:	mov	w9, #0x580                 	// #1408
   49b0c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49b10:	tst	w0, #0x800000
   49b14:	mov	w8, #0x715                 	// #1813
   49b18:	mov	w9, #0x711                 	// #1809
   49b1c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49b20:	tst	w0, #0x800000
   49b24:	mov	w8, #0x58b                 	// #1419
   49b28:	mov	w9, #0x587                 	// #1415
   49b2c:	b	49b3c <aarch64_opcode_lookup@@Base+0x4f38>
   49b30:	tst	w0, #0x800000
   49b34:	mov	w8, #0x585                 	// #1413
   49b38:	mov	w9, #0x581                 	// #1409
   49b3c:	csel	w0, w9, w8, eq  // eq = none
   49b40:	ret
   49b44:	mov	w0, #0x70a                 	// #1802
   49b48:	ret

0000000000049b4c <aarch64_find_next_opcode@@Base>:
   49b4c:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   49b50:	ldr	x8, [x8, #3848]
   49b54:	mov	w10, #0x8e39                	// #36409
   49b58:	movk	w10, #0x38e3, lsl #16
   49b5c:	sub	x9, x0, x8
   49b60:	lsr	x9, x9, #4
   49b64:	mul	w9, w9, w10
   49b68:	cmp	w9, #0x2f6
   49b6c:	mov	x0, xzr
   49b70:	b.le	49ba8 <aarch64_find_next_opcode@@Base+0x5c>
   49b74:	cmp	w9, #0x3ca
   49b78:	b.gt	49be4 <aarch64_find_next_opcode@@Base+0x98>
   49b7c:	sub	w10, w9, #0x2f7
   49b80:	cmp	w10, #0x6c
   49b84:	b.hi	49d34 <aarch64_find_next_opcode@@Base+0x1e8>  // b.pmore
   49b88:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   49b8c:	add	x9, x9, #0x75e
   49b90:	adr	x11, 49ba0 <aarch64_find_next_opcode@@Base+0x54>
   49b94:	ldrh	w12, [x9, x10, lsl #1]
   49b98:	add	x11, x11, x12, lsl #2
   49b9c:	br	x11
   49ba0:	mov	w9, #0x2f8                 	// #760
   49ba4:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ba8:	cmp	w9, #0x175
   49bac:	b.le	49c54 <aarch64_find_next_opcode@@Base+0x108>
   49bb0:	cmp	w9, #0x255
   49bb4:	b.gt	49d14 <aarch64_find_next_opcode@@Base+0x1c8>
   49bb8:	sub	w9, w9, #0x176
   49bbc:	cmp	w9, #0x67
   49bc0:	b.hi	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.pmore
   49bc4:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   49bc8:	add	x10, x10, #0x68e
   49bcc:	adr	x11, 49bdc <aarch64_find_next_opcode@@Base+0x90>
   49bd0:	ldrh	w12, [x10, x9, lsl #1]
   49bd4:	add	x11, x11, x12, lsl #2
   49bd8:	br	x11
   49bdc:	mov	w9, #0x178                 	// #376
   49be0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49be4:	cmp	w9, #0x658
   49be8:	b.le	49c28 <aarch64_find_next_opcode@@Base+0xdc>
   49bec:	cmp	w9, #0x67a
   49bf0:	b.gt	49c80 <aarch64_find_next_opcode@@Base+0x134>
   49bf4:	cmp	w9, #0x664
   49bf8:	b.gt	49cd4 <aarch64_find_next_opcode@@Base+0x188>
   49bfc:	sub	w9, w9, #0x659
   49c00:	cmp	w9, #0x6
   49c04:	b.hi	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.pmore
   49c08:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   49c0c:	add	x10, x10, #0x868
   49c10:	adr	x11, 49c20 <aarch64_find_next_opcode@@Base+0xd4>
   49c14:	ldrh	w12, [x10, x9, lsl #1]
   49c18:	add	x11, x11, x12, lsl #2
   49c1c:	br	x11
   49c20:	mov	w9, #0x65a                 	// #1626
   49c24:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49c28:	sub	w10, w9, #0x4b9
   49c2c:	cmp	w10, #0x11
   49c30:	b.hi	49ca8 <aarch64_find_next_opcode@@Base+0x15c>  // b.pmore
   49c34:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   49c38:	add	x9, x9, #0x844
   49c3c:	adr	x11, 49c4c <aarch64_find_next_opcode@@Base+0x100>
   49c40:	ldrh	w12, [x9, x10, lsl #1]
   49c44:	add	x11, x11, x12, lsl #2
   49c48:	br	x11
   49c4c:	mov	w9, #0x4ba                 	// #1210
   49c50:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49c54:	sub	w10, w9, #0x85
   49c58:	cmp	w10, #0xe
   49c5c:	b.hi	49d4c <aarch64_find_next_opcode@@Base+0x200>  // b.pmore
   49c60:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   49c64:	add	x9, x9, #0x670
   49c68:	adr	x11, 49c78 <aarch64_find_next_opcode@@Base+0x12c>
   49c6c:	ldrh	w12, [x9, x10, lsl #1]
   49c70:	add	x11, x11, x12, lsl #2
   49c74:	br	x11
   49c78:	mov	w9, #0x176                 	// #374
   49c7c:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49c80:	cmp	w9, #0x688
   49c84:	b.gt	49cf4 <aarch64_find_next_opcode@@Base+0x1a8>
   49c88:	cmp	w9, #0x67e
   49c8c:	b.gt	49d64 <aarch64_find_next_opcode@@Base+0x218>
   49c90:	cmp	w9, #0x67b
   49c94:	b.eq	49e1c <aarch64_find_next_opcode@@Base+0x2d0>  // b.none
   49c98:	cmp	w9, #0x67d
   49c9c:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49ca0:	mov	w9, #0x67e                 	// #1662
   49ca4:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ca8:	sub	w10, w9, #0x4a4
   49cac:	cmp	w10, #0x5
   49cb0:	b.hi	49e24 <aarch64_find_next_opcode@@Base+0x2d8>  // b.pmore
   49cb4:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   49cb8:	add	x9, x9, #0x838
   49cbc:	adr	x11, 49ccc <aarch64_find_next_opcode@@Base+0x180>
   49cc0:	ldrh	w12, [x9, x10, lsl #1]
   49cc4:	add	x11, x11, x12, lsl #2
   49cc8:	br	x11
   49ccc:	mov	w9, #0x4a6                 	// #1190
   49cd0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49cd4:	cmp	w9, #0x66f
   49cd8:	b.gt	49d7c <aarch64_find_next_opcode@@Base+0x230>
   49cdc:	cmp	w9, #0x665
   49ce0:	b.eq	49e54 <aarch64_find_next_opcode@@Base+0x308>  // b.none
   49ce4:	cmp	w9, #0x66e
   49ce8:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49cec:	mov	w9, #0x66f                 	// #1647
   49cf0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49cf4:	cmp	w9, #0x699
   49cf8:	b.gt	49d94 <aarch64_find_next_opcode@@Base+0x248>
   49cfc:	cmp	w9, #0x689
   49d00:	b.eq	49e5c <aarch64_find_next_opcode@@Base+0x310>  // b.none
   49d04:	cmp	w9, #0x691
   49d08:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d0c:	mov	w9, #0x692                 	// #1682
   49d10:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d14:	cmp	w9, #0x265
   49d18:	b.gt	49dac <aarch64_find_next_opcode@@Base+0x260>
   49d1c:	cmp	w9, #0x256
   49d20:	b.eq	4a1bc <aarch64_find_next_opcode@@Base+0x670>  // b.none
   49d24:	cmp	w9, #0x258
   49d28:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d2c:	mov	w9, #0x259                 	// #601
   49d30:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d34:	cmp	w9, #0x3c8
   49d38:	b.eq	4a1c4 <aarch64_find_next_opcode@@Base+0x678>  // b.none
   49d3c:	cmp	w9, #0x3ca
   49d40:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d44:	mov	w9, #0x3ce                 	// #974
   49d48:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d4c:	cmp	w9, #0xc
   49d50:	b.eq	4a1cc <aarch64_find_next_opcode@@Base+0x680>  // b.none
   49d54:	cmp	w9, #0x10
   49d58:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d5c:	mov	w9, #0x14                  	// #20
   49d60:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d64:	cmp	w9, #0x67f
   49d68:	b.eq	49e64 <aarch64_find_next_opcode@@Base+0x318>  // b.none
   49d6c:	cmp	w9, #0x687
   49d70:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d74:	mov	w9, #0x688                 	// #1672
   49d78:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d7c:	cmp	w9, #0x670
   49d80:	b.eq	49e6c <aarch64_find_next_opcode@@Base+0x320>  // b.none
   49d84:	cmp	w9, #0x672
   49d88:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49d8c:	mov	w9, #0x673                 	// #1651
   49d90:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49d94:	cmp	w9, #0x69a
   49d98:	b.eq	49e74 <aarch64_find_next_opcode@@Base+0x328>  // b.none
   49d9c:	cmp	w9, #0x69c
   49da0:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49da4:	mov	w9, #0x69d                 	// #1693
   49da8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dac:	cmp	w9, #0x266
   49db0:	b.eq	4a1d4 <aarch64_find_next_opcode@@Base+0x688>  // b.none
   49db4:	cmp	w9, #0x268
   49db8:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49dbc:	mov	w9, #0x269                 	// #617
   49dc0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dc4:	mov	w9, #0x65c                 	// #1628
   49dc8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dcc:	mov	w9, #0x65e                 	// #1630
   49dd0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dd4:	mov	w9, #0x660                 	// #1632
   49dd8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ddc:	mov	w9, #0x4bd                 	// #1213
   49de0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49de4:	mov	w9, #0x4be                 	// #1214
   49de8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dec:	mov	w9, #0x4bf                 	// #1215
   49df0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49df4:	mov	w9, #0x4c0                 	// #1216
   49df8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49dfc:	mov	w9, #0x4c8                 	// #1224
   49e00:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e04:	mov	w9, #0x4c9                 	// #1225
   49e08:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e0c:	mov	w9, #0x956                 	// #2390
   49e10:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e14:	mov	w9, #0x4cb                 	// #1227
   49e18:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e1c:	mov	w9, #0x67c                 	// #1660
   49e20:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e24:	cmp	w9, #0x3cb
   49e28:	b.ne	4a1e0 <aarch64_find_next_opcode@@Base+0x694>  // b.any
   49e2c:	mov	w9, #0x3cf                 	// #975
   49e30:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e34:	mov	w9, #0x4a8                 	// #1192
   49e38:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e3c:	mov	w9, #0x4ca                 	// #1226
   49e40:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e44:	mov	w9, #0x4a9                 	// #1193
   49e48:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e4c:	mov	w9, #0x4b9                 	// #1209
   49e50:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e54:	mov	w9, #0x666                 	// #1638
   49e58:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e5c:	mov	w9, #0x68a                 	// #1674
   49e60:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e64:	mov	w9, #0x680                 	// #1664
   49e68:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e6c:	mov	w9, #0x671                 	// #1649
   49e70:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e74:	mov	w9, #0x69b                 	// #1691
   49e78:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e7c:	mov	w9, #0x2fa                 	// #762
   49e80:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e84:	mov	w9, #0x2fc                 	// #764
   49e88:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e8c:	mov	w9, #0x2fe                 	// #766
   49e90:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e94:	mov	w9, #0x300                 	// #768
   49e98:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49e9c:	mov	w9, #0x302                 	// #770
   49ea0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ea4:	mov	w9, #0x304                 	// #772
   49ea8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49eac:	mov	w9, #0x306                 	// #774
   49eb0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49eb4:	mov	w9, #0x308                 	// #776
   49eb8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ebc:	mov	w9, #0x30a                 	// #778
   49ec0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ec4:	mov	w9, #0x30c                 	// #780
   49ec8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ecc:	mov	w9, #0x30e                 	// #782
   49ed0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ed4:	mov	w9, #0x310                 	// #784
   49ed8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49edc:	mov	w9, #0x312                 	// #786
   49ee0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ee4:	mov	w9, #0x314                 	// #788
   49ee8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49eec:	mov	w9, #0x316                 	// #790
   49ef0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ef4:	mov	w9, #0x318                 	// #792
   49ef8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49efc:	mov	w9, #0x31a                 	// #794
   49f00:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f04:	mov	w9, #0x31f                 	// #799
   49f08:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f0c:	mov	w9, #0x321                 	// #801
   49f10:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f14:	mov	w9, #0x323                 	// #803
   49f18:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f1c:	mov	w9, #0x325                 	// #805
   49f20:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f24:	mov	w9, #0x327                 	// #807
   49f28:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f2c:	mov	w9, #0x329                 	// #809
   49f30:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f34:	mov	w9, #0x32b                 	// #811
   49f38:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f3c:	mov	w9, #0x4a5                 	// #1189
   49f40:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f44:	mov	w9, #0x331                 	// #817
   49f48:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f4c:	mov	w9, #0x333                 	// #819
   49f50:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f54:	mov	w9, #0x335                 	// #821
   49f58:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f5c:	mov	w9, #0x337                 	// #823
   49f60:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f64:	mov	w9, #0x981                 	// #2433
   49f68:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f6c:	mov	w9, #0x33a                 	// #826
   49f70:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f74:	mov	w9, #0x33c                 	// #828
   49f78:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f7c:	mov	w9, #0x33e                 	// #830
   49f80:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f84:	mov	w9, #0x340                 	// #832
   49f88:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f8c:	mov	w9, #0x342                 	// #834
   49f90:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f94:	mov	w9, #0x344                 	// #836
   49f98:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49f9c:	mov	w9, #0x346                 	// #838
   49fa0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fa4:	mov	w9, #0x348                 	// #840
   49fa8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fac:	mov	w9, #0x34a                 	// #842
   49fb0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fb4:	mov	w9, #0x34c                 	// #844
   49fb8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fbc:	mov	w9, #0x34e                 	// #846
   49fc0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fc4:	mov	w9, #0x350                 	// #848
   49fc8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fcc:	mov	w9, #0x352                 	// #850
   49fd0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fd4:	mov	w9, #0x354                 	// #852
   49fd8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fdc:	mov	w9, #0x356                 	// #854
   49fe0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fe4:	mov	w9, #0x358                 	// #856
   49fe8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49fec:	mov	w9, #0x35a                 	// #858
   49ff0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ff4:	mov	w9, #0x35c                 	// #860
   49ff8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   49ffc:	mov	w9, #0x35e                 	// #862
   4a000:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a004:	mov	w9, #0x360                 	// #864
   4a008:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a00c:	mov	w9, #0x362                 	// #866
   4a010:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a014:	mov	w9, #0x364                 	// #868
   4a018:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a01c:	mov	w9, #0x179                 	// #377
   4a020:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a024:	mov	w9, #0x17a                 	// #378
   4a028:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a02c:	mov	w9, #0x17b                 	// #379
   4a030:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a034:	mov	w9, #0x17d                 	// #381
   4a038:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a03c:	mov	w9, #0x184                 	// #388
   4a040:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a044:	mov	w9, #0x181                 	// #385
   4a048:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a04c:	mov	w9, #0x186                 	// #390
   4a050:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a054:	mov	w9, #0x189                 	// #393
   4a058:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a05c:	mov	w9, #0x18b                 	// #395
   4a060:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a064:	mov	w9, #0x18e                 	// #398
   4a068:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a06c:	mov	w9, #0x18f                 	// #399
   4a070:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a074:	mov	w9, #0x190                 	// #400
   4a078:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a07c:	mov	w9, #0x191                 	// #401
   4a080:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a084:	mov	w9, #0x192                 	// #402
   4a088:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a08c:	mov	w9, #0x193                 	// #403
   4a090:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a094:	mov	w9, #0x195                 	// #405
   4a098:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a09c:	mov	w9, #0x19c                 	// #412
   4a0a0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0a4:	mov	w9, #0x199                 	// #409
   4a0a8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0ac:	mov	w9, #0x19e                 	// #414
   4a0b0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0b4:	mov	w9, #0x1a1                 	// #417
   4a0b8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0bc:	mov	w9, #0x1a3                 	// #419
   4a0c0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0c4:	mov	w9, #0x1b9                 	// #441
   4a0c8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0cc:	mov	w9, #0x1ba                 	// #442
   4a0d0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0d4:	mov	w9, #0x1bb                 	// #443
   4a0d8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0dc:	mov	w9, #0x1bd                 	// #445
   4a0e0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0e4:	mov	w9, #0x1be                 	// #446
   4a0e8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0ec:	mov	w9, #0x1bf                 	// #447
   4a0f0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0f4:	mov	w9, #0x1c1                 	// #449
   4a0f8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a0fc:	mov	w9, #0x1c2                 	// #450
   4a100:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a104:	mov	w9, #0x1c3                 	// #451
   4a108:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a10c:	mov	w9, #0x1c5                 	// #453
   4a110:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a114:	mov	w9, #0x1c6                 	// #454
   4a118:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a11c:	mov	w9, #0x1c7                 	// #455
   4a120:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a124:	mov	w9, #0x1ce                 	// #462
   4a128:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a12c:	mov	w9, #0x1cf                 	// #463
   4a130:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a134:	mov	w9, #0x1d2                 	// #466
   4a138:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a13c:	mov	w9, #0x1d3                 	// #467
   4a140:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a144:	mov	w9, #0x1da                 	// #474
   4a148:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a14c:	mov	w9, #0x1db                 	// #475
   4a150:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a154:	mov	w9, #0x1de                 	// #478
   4a158:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a15c:	mov	w9, #0x1df                 	// #479
   4a160:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a164:	mov	w9, #0x177                 	// #375
   4a168:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a16c:	mov	w9, #0x17c                 	// #380
   4a170:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a174:	mov	w9, #0x180                 	// #384
   4a178:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a17c:	mov	w9, #0x188                 	// #392
   4a180:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a184:	mov	w9, #0x18a                 	// #394
   4a188:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a18c:	mov	w9, #0x18c                 	// #396
   4a190:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a194:	mov	w9, #0x18d                 	// #397
   4a198:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a19c:	mov	w9, #0x194                 	// #404
   4a1a0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1a4:	mov	w9, #0x198                 	// #408
   4a1a8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1ac:	mov	w9, #0x93                  	// #147
   4a1b0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1b4:	mov	w9, #0x1a0                 	// #416
   4a1b8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1bc:	mov	w9, #0x257                 	// #599
   4a1c0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1c4:	mov	w9, #0x3c9                 	// #969
   4a1c8:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1cc:	mov	w9, #0x13                  	// #19
   4a1d0:	b	4a1d8 <aarch64_find_next_opcode@@Base+0x68c>
   4a1d4:	mov	w9, #0x267                 	// #615
   4a1d8:	mov	w10, #0x90                  	// #144
   4a1dc:	madd	x0, x9, x10, x8
   4a1e0:	ret

000000000004a1e4 <aarch64_find_alias_opcode@@Base>:
   4a1e4:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   4a1e8:	ldr	x8, [x8, #3848]
   4a1ec:	mov	w10, #0x8e39                	// #36409
   4a1f0:	movk	w10, #0x38e3, lsl #16
   4a1f4:	sub	x9, x0, x8
   4a1f8:	lsr	x9, x9, #4
   4a1fc:	mul	w9, w9, w10
   4a200:	cmp	w9, #0x40c
   4a204:	mov	x0, xzr
   4a208:	b.le	4a240 <aarch64_find_alias_opcode@@Base+0x5c>
   4a20c:	cmp	w9, #0x4a8
   4a210:	b.gt	4a280 <aarch64_find_alias_opcode@@Base+0x9c>
   4a214:	sub	w10, w9, #0x40d
   4a218:	cmp	w10, #0x5e
   4a21c:	b.hi	4a4e0 <aarch64_find_alias_opcode@@Base+0x2fc>  // b.pmore
   4a220:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a224:	add	x9, x9, #0x8e8
   4a228:	adr	x11, 4a238 <aarch64_find_alias_opcode@@Base+0x54>
   4a22c:	ldrh	w12, [x9, x10, lsl #1]
   4a230:	add	x11, x11, x12, lsl #2
   4a234:	br	x11
   4a238:	mov	w9, #0x46d                 	// #1133
   4a23c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a240:	cmp	w9, #0x296
   4a244:	b.gt	4a2bc <aarch64_find_alias_opcode@@Base+0xd8>
   4a248:	cmp	w9, #0x9b
   4a24c:	b.gt	4a2f8 <aarch64_find_alias_opcode@@Base+0x114>
   4a250:	sub	w10, w9, #0x2
   4a254:	cmp	w10, #0x18
   4a258:	b.hi	4a4f8 <aarch64_find_alias_opcode@@Base+0x314>  // b.pmore
   4a25c:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a260:	add	x9, x9, #0x876
   4a264:	adr	x11, 4a278 <aarch64_find_alias_opcode@@Base+0x94>
   4a268:	ldrh	w12, [x9, x10, lsl #1]
   4a26c:	add	x11, x11, x12, lsl #2
   4a270:	mov	w9, #0x3                   	// #3
   4a274:	br	x11
   4a278:	mov	w9, #0x5                   	// #5
   4a27c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a280:	cmp	w9, #0x546
   4a284:	b.le	4a328 <aarch64_find_alias_opcode@@Base+0x144>
   4a288:	cmp	w9, #0x571
   4a28c:	b.gt	4a350 <aarch64_find_alias_opcode@@Base+0x16c>
   4a290:	sub	w10, w9, #0x547
   4a294:	cmp	w10, #0x1c
   4a298:	b.hi	4a768 <aarch64_find_alias_opcode@@Base+0x584>  // b.pmore
   4a29c:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a2a0:	add	x9, x9, #0x9b8
   4a2a4:	adr	x11, 4a2b4 <aarch64_find_alias_opcode@@Base+0xd0>
   4a2a8:	ldrh	w12, [x9, x10, lsl #1]
   4a2ac:	add	x11, x11, x12, lsl #2
   4a2b0:	br	x11
   4a2b4:	mov	w9, #0x4ef                 	// #1263
   4a2b8:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a2bc:	cmp	w9, #0x2de
   4a2c0:	b.le	4a384 <aarch64_find_alias_opcode@@Base+0x1a0>
   4a2c4:	cmp	w9, #0x3dd
   4a2c8:	b.le	4a3b8 <aarch64_find_alias_opcode@@Base+0x1d4>
   4a2cc:	sub	w10, w9, #0x3de
   4a2d0:	cmp	w10, #0x9
   4a2d4:	b.hi	4a4b0 <aarch64_find_alias_opcode@@Base+0x2cc>  // b.pmore
   4a2d8:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a2dc:	add	x9, x9, #0x8d4
   4a2e0:	adr	x11, 4a2f0 <aarch64_find_alias_opcode@@Base+0x10c>
   4a2e4:	ldrh	w12, [x9, x10, lsl #1]
   4a2e8:	add	x11, x11, x12, lsl #2
   4a2ec:	br	x11
   4a2f0:	mov	w9, #0x3df                 	// #991
   4a2f4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a2f8:	cmp	w9, #0x19b
   4a2fc:	b.le	4a410 <aarch64_find_alias_opcode@@Base+0x22c>
   4a300:	cmp	w9, #0x269
   4a304:	b.gt	4a478 <aarch64_find_alias_opcode@@Base+0x294>
   4a308:	cmp	w9, #0x19c
   4a30c:	b.eq	4a7d0 <aarch64_find_alias_opcode@@Base+0x5ec>  // b.none
   4a310:	cmp	w9, #0x19e
   4a314:	b.eq	4a7d8 <aarch64_find_alias_opcode@@Base+0x5f4>  // b.none
   4a318:	cmp	w9, #0x217
   4a31c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a320:	mov	w9, #0x218                 	// #536
   4a324:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a328:	cmp	w9, #0x504
   4a32c:	b.gt	4a3e4 <aarch64_find_alias_opcode@@Base+0x200>
   4a330:	cmp	w9, #0x4bf
   4a334:	b.gt	4a498 <aarch64_find_alias_opcode@@Base+0x2b4>
   4a338:	cmp	w9, #0x4a9
   4a33c:	b.eq	4a540 <aarch64_find_alias_opcode@@Base+0x35c>  // b.none
   4a340:	cmp	w9, #0x4ba
   4a344:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a348:	mov	w9, #0x4bc                 	// #1212
   4a34c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a350:	cmp	w9, #0x6d9
   4a354:	b.le	4a458 <aarch64_find_alias_opcode@@Base+0x274>
   4a358:	sub	w10, w9, #0x6da
   4a35c:	cmp	w10, #0x4
   4a360:	b.hi	4a4c8 <aarch64_find_alias_opcode@@Base+0x2e4>  // b.pmore
   4a364:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a368:	add	x9, x9, #0x9f2
   4a36c:	adr	x11, 4a37c <aarch64_find_alias_opcode@@Base+0x198>
   4a370:	ldrh	w12, [x9, x10, lsl #1]
   4a374:	add	x11, x11, x12, lsl #2
   4a378:	br	x11
   4a37c:	mov	w9, #0x4e8                 	// #1256
   4a380:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a384:	cmp	w9, #0x2af
   4a388:	b.le	4a438 <aarch64_find_alias_opcode@@Base+0x254>
   4a38c:	sub	w10, w9, #0x2c9
   4a390:	cmp	w10, #0x9
   4a394:	b.hi	4a810 <aarch64_find_alias_opcode@@Base+0x62c>  // b.pmore
   4a398:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a39c:	add	x9, x9, #0x8a8
   4a3a0:	adr	x11, 4a3b0 <aarch64_find_alias_opcode@@Base+0x1cc>
   4a3a4:	ldrh	w12, [x9, x10, lsl #1]
   4a3a8:	add	x11, x11, x12, lsl #2
   4a3ac:	br	x11
   4a3b0:	mov	w9, #0x2ca                 	// #714
   4a3b4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a3b8:	sub	w10, w9, #0x2df
   4a3bc:	cmp	w10, #0xb
   4a3c0:	b.hi	4a840 <aarch64_find_alias_opcode@@Base+0x65c>  // b.pmore
   4a3c4:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a3c8:	add	x9, x9, #0x8bc
   4a3cc:	adr	x11, 4a3dc <aarch64_find_alias_opcode@@Base+0x1f8>
   4a3d0:	ldrh	w12, [x9, x10, lsl #1]
   4a3d4:	add	x11, x11, x12, lsl #2
   4a3d8:	br	x11
   4a3dc:	mov	w9, #0x2e0                 	// #736
   4a3e0:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a3e4:	sub	w10, w9, #0x529
   4a3e8:	cmp	w10, #0x8
   4a3ec:	b.hi	4a528 <aarch64_find_alias_opcode@@Base+0x344>  // b.pmore
   4a3f0:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a3f4:	add	x9, x9, #0x9a6
   4a3f8:	adr	x11, 4a408 <aarch64_find_alias_opcode@@Base+0x224>
   4a3fc:	ldrh	w12, [x9, x10, lsl #1]
   4a400:	add	x11, x11, x12, lsl #2
   4a404:	br	x11
   4a408:	mov	w9, #0x7f2                 	// #2034
   4a40c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a410:	cmp	w9, #0x13c
   4a414:	b.le	4a510 <aarch64_find_alias_opcode@@Base+0x32c>
   4a418:	cmp	w9, #0x13d
   4a41c:	b.eq	4a7e0 <aarch64_find_alias_opcode@@Base+0x5fc>  // b.none
   4a420:	cmp	w9, #0x184
   4a424:	b.eq	4a7e8 <aarch64_find_alias_opcode@@Base+0x604>  // b.none
   4a428:	cmp	w9, #0x186
   4a42c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a430:	mov	w9, #0x187                 	// #391
   4a434:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a438:	cmp	w9, #0x297
   4a43c:	b.eq	4a548 <aarch64_find_alias_opcode@@Base+0x364>  // b.none
   4a440:	cmp	w9, #0x29a
   4a444:	b.eq	4a550 <aarch64_find_alias_opcode@@Base+0x36c>  // b.none
   4a448:	cmp	w9, #0x29d
   4a44c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a450:	mov	w9, #0x29e                 	// #670
   4a454:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a458:	cmp	w9, #0x572
   4a45c:	b.eq	4a590 <aarch64_find_alias_opcode@@Base+0x3ac>  // b.none
   4a460:	cmp	w9, #0x578
   4a464:	b.eq	4a598 <aarch64_find_alias_opcode@@Base+0x3b4>  // b.none
   4a468:	cmp	w9, #0x58f
   4a46c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a470:	mov	w9, #0x4e6                 	// #1254
   4a474:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a478:	cmp	w9, #0x26a
   4a47c:	b.eq	4a7f0 <aarch64_find_alias_opcode@@Base+0x60c>  // b.none
   4a480:	cmp	w9, #0x271
   4a484:	b.eq	4a7f8 <aarch64_find_alias_opcode@@Base+0x614>  // b.none
   4a488:	cmp	w9, #0x275
   4a48c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a490:	mov	w9, #0x279                 	// #633
   4a494:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a498:	cmp	w9, #0x4c0
   4a49c:	b.eq	4a558 <aarch64_find_alias_opcode@@Base+0x374>  // b.none
   4a4a0:	cmp	w9, #0x503
   4a4a4:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a4a8:	mov	w9, #0x7f1                 	// #2033
   4a4ac:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a4b0:	cmp	w9, #0x3ea
   4a4b4:	b.eq	4a5a0 <aarch64_find_alias_opcode@@Base+0x3bc>  // b.none
   4a4b8:	cmp	w9, #0x3ee
   4a4bc:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a4c0:	mov	w9, #0x3ef                 	// #1007
   4a4c4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a4c8:	cmp	w9, #0x71c
   4a4cc:	b.eq	4a5a8 <aarch64_find_alias_opcode@@Base+0x3c4>  // b.none
   4a4d0:	cmp	w9, #0x71d
   4a4d4:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a4d8:	mov	w9, #0x4f3                 	// #1267
   4a4dc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a4e0:	cmp	w9, #0x49d
   4a4e4:	b.eq	4a890 <aarch64_find_alias_opcode@@Base+0x6ac>  // b.none
   4a4e8:	cmp	w9, #0x49f
   4a4ec:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a4f0:	mov	w9, #0x4a0                 	// #1184
   4a4f4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a4f8:	cmp	w9, #0x98
   4a4fc:	b.eq	4a800 <aarch64_find_alias_opcode@@Base+0x61c>  // b.none
   4a500:	cmp	w9, #0x9a
   4a504:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a508:	mov	w9, #0x9b                  	// #155
   4a50c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a510:	cmp	w9, #0x9c
   4a514:	b.eq	4a808 <aarch64_find_alias_opcode@@Base+0x624>  // b.none
   4a518:	cmp	w9, #0xf2
   4a51c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a520:	mov	w9, #0xf3                  	// #243
   4a524:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a528:	cmp	w9, #0x505
   4a52c:	b.eq	4a898 <aarch64_find_alias_opcode@@Base+0x6b4>  // b.none
   4a530:	cmp	w9, #0x506
   4a534:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a538:	mov	w9, #0x4f6                 	// #1270
   4a53c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a540:	mov	w9, #0x4d3                 	// #1235
   4a544:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a548:	mov	w9, #0x299                 	// #665
   4a54c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a550:	mov	w9, #0x29c                 	// #668
   4a554:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a558:	mov	w9, #0x4c7                 	// #1223
   4a55c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a560:	mov	w9, #0x3e1                 	// #993
   4a564:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a568:	mov	w9, #0x3e4                 	// #996
   4a56c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a570:	mov	w9, #0x3e9                 	// #1001
   4a574:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a578:	mov	w9, #0x7fd                 	// #2045
   4a57c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a580:	mov	w9, #0x4eb                 	// #1259
   4a584:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a588:	mov	w9, #0x4f5                 	// #1269
   4a58c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a590:	mov	w9, #0x7fa                 	// #2042
   4a594:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a598:	mov	w9, #0x4e7                 	// #1255
   4a59c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5a0:	mov	w9, #0x3eb                 	// #1003
   4a5a4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5a8:	mov	w9, #0x4f0                 	// #1264
   4a5ac:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5b0:	mov	w9, #0x46e                 	// #1134
   4a5b4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5b8:	mov	w9, #0x46f                 	// #1135
   4a5bc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5c0:	mov	w9, #0x470                 	// #1136
   4a5c4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5c8:	mov	w9, #0x471                 	// #1137
   4a5cc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5d0:	mov	w9, #0x472                 	// #1138
   4a5d4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5d8:	mov	w9, #0x473                 	// #1139
   4a5dc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5e0:	mov	w9, #0x474                 	// #1140
   4a5e4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5e8:	mov	w9, #0x475                 	// #1141
   4a5ec:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5f0:	mov	w9, #0x476                 	// #1142
   4a5f4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a5f8:	mov	w9, #0x477                 	// #1143
   4a5fc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a600:	mov	w9, #0x478                 	// #1144
   4a604:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a608:	mov	w9, #0x479                 	// #1145
   4a60c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a610:	mov	w9, #0x47a                 	// #1146
   4a614:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a618:	mov	w9, #0x47b                 	// #1147
   4a61c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a620:	mov	w9, #0x47c                 	// #1148
   4a624:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a628:	mov	w9, #0x47d                 	// #1149
   4a62c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a630:	mov	w9, #0x47e                 	// #1150
   4a634:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a638:	mov	w9, #0x47f                 	// #1151
   4a63c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a640:	mov	w9, #0x480                 	// #1152
   4a644:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a648:	mov	w9, #0x481                 	// #1153
   4a64c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a650:	mov	w9, #0x482                 	// #1154
   4a654:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a658:	mov	w9, #0x483                 	// #1155
   4a65c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a660:	mov	w9, #0x484                 	// #1156
   4a664:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a668:	mov	w9, #0x485                 	// #1157
   4a66c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a670:	mov	w9, #0x486                 	// #1158
   4a674:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a678:	mov	w9, #0x487                 	// #1159
   4a67c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a680:	mov	w9, #0x488                 	// #1160
   4a684:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a688:	mov	w9, #0x489                 	// #1161
   4a68c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a690:	mov	w9, #0x48a                 	// #1162
   4a694:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a698:	mov	w9, #0x48b                 	// #1163
   4a69c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6a0:	mov	w9, #0x48c                 	// #1164
   4a6a4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6a8:	mov	w9, #0x48d                 	// #1165
   4a6ac:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6b0:	mov	w9, #0x48e                 	// #1166
   4a6b4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6b8:	mov	w9, #0x48f                 	// #1167
   4a6bc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6c0:	mov	w9, #0x490                 	// #1168
   4a6c4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6c8:	mov	w9, #0x491                 	// #1169
   4a6cc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6d0:	mov	w9, #0x492                 	// #1170
   4a6d4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6d8:	mov	w9, #0x493                 	// #1171
   4a6dc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6e0:	mov	w9, #0x494                 	// #1172
   4a6e4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6e8:	mov	w9, #0x495                 	// #1173
   4a6ec:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6f0:	mov	w9, #0x496                 	// #1174
   4a6f4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a6f8:	mov	w9, #0x497                 	// #1175
   4a6fc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a700:	mov	w9, #0x498                 	// #1176
   4a704:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a708:	mov	w9, #0x499                 	// #1177
   4a70c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a710:	mov	w9, #0x49a                 	// #1178
   4a714:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a718:	mov	w9, #0x49b                 	// #1179
   4a71c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a720:	mov	w9, #0x49c                 	// #1180
   4a724:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a728:	mov	w9, #0x8                   	// #8
   4a72c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a730:	mov	w9, #0xb                   	// #11
   4a734:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a738:	mov	w9, #0xd                   	// #13
   4a73c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a740:	mov	w9, #0xf                   	// #15
   4a744:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a748:	mov	w9, #0x12                  	// #18
   4a74c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a750:	mov	w9, #0x17                  	// #23
   4a754:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a758:	mov	w9, #0x19                  	// #25
   4a75c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a760:	mov	w9, #0x1b                  	// #27
   4a764:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a768:	cmp	w9, #0x570
   4a76c:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a770:	mov	w9, #0x7f9                 	// #2041
   4a774:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a778:	mov	w9, #0x4f1                 	// #1265
   4a77c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a780:	mov	w9, #0x7fc                 	// #2044
   4a784:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a788:	mov	w9, #0x4ea                 	// #1258
   4a78c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a790:	mov	w9, #0x4ec                 	// #1260
   4a794:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a798:	mov	w9, #0x7fb                 	// #2043
   4a79c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7a0:	mov	w9, #0x4ed                 	// #1261
   4a7a4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7a8:	mov	w9, #0x7f6                 	// #2038
   4a7ac:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7b0:	mov	w9, #0x4f7                 	// #1271
   4a7b4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7b8:	mov	w9, #0x4f8                 	// #1272
   4a7bc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7c0:	mov	w9, #0x7f7                 	// #2039
   4a7c4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7c8:	mov	w9, #0x7f8                 	// #2040
   4a7cc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7d0:	mov	w9, #0x19d                 	// #413
   4a7d4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7d8:	mov	w9, #0x19f                 	// #415
   4a7dc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7e0:	mov	w9, #0x13e                 	// #318
   4a7e4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7e8:	mov	w9, #0x185                 	// #389
   4a7ec:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7f0:	mov	w9, #0x26f                 	// #623
   4a7f4:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a7f8:	mov	w9, #0x273                 	// #627
   4a7fc:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a800:	mov	w9, #0x99                  	// #153
   4a804:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a808:	mov	w9, #0x9d                  	// #157
   4a80c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a810:	cmp	w9, #0x2b0
   4a814:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a818:	mov	w9, #0x2b0                 	// #688
   4a81c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a820:	mov	w9, #0x2cc                 	// #716
   4a824:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a828:	mov	w9, #0x2ce                 	// #718
   4a82c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a830:	mov	w9, #0x2d0                 	// #720
   4a834:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a838:	mov	w9, #0x2d3                 	// #723
   4a83c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a840:	cmp	w9, #0x2f5
   4a844:	b.ne	4a8a4 <aarch64_find_alias_opcode@@Base+0x6c0>  // b.any
   4a848:	mov	w9, #0x2f6                 	// #758
   4a84c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a850:	mov	w9, #0x2e2                 	// #738
   4a854:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a858:	mov	w9, #0x2e4                 	// #740
   4a85c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a860:	mov	w9, #0x2e6                 	// #742
   4a864:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a868:	mov	w9, #0x2e9                 	// #745
   4a86c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a870:	mov	w9, #0x2eb                 	// #747
   4a874:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a878:	mov	w9, #0x7f5                 	// #2037
   4a87c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a880:	mov	w9, #0x7f3                 	// #2035
   4a884:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a888:	mov	w9, #0x7f4                 	// #2036
   4a88c:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a890:	mov	w9, #0x49e                 	// #1182
   4a894:	b	4a89c <aarch64_find_alias_opcode@@Base+0x6b8>
   4a898:	mov	w9, #0x4f2                 	// #1266
   4a89c:	mov	w10, #0x90                  	// #144
   4a8a0:	madd	x0, x9, x10, x8
   4a8a4:	ret

000000000004a8a8 <aarch64_find_next_alias_opcode@@Base>:
   4a8a8:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   4a8ac:	ldr	x8, [x8, #3848]
   4a8b0:	mov	w10, #0x8e39                	// #36409
   4a8b4:	movk	w10, #0x38e3, lsl #16
   4a8b8:	sub	x9, x0, x8
   4a8bc:	lsr	x9, x9, #4
   4a8c0:	mul	w9, w9, w10
   4a8c4:	cmp	w9, #0x3de
   4a8c8:	mov	x0, xzr
   4a8cc:	b.le	4a8fc <aarch64_find_next_alias_opcode@@Base+0x54>
   4a8d0:	sub	w10, w9, #0x46d
   4a8d4:	cmp	w10, #0x8b
   4a8d8:	b.hi	4a97c <aarch64_find_next_alias_opcode@@Base+0xd4>  // b.pmore
   4a8dc:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a8e0:	add	x9, x9, #0xaae
   4a8e4:	adr	x11, 4a8f4 <aarch64_find_next_alias_opcode@@Base+0x4c>
   4a8e8:	ldrh	w12, [x9, x10, lsl #1]
   4a8ec:	add	x11, x11, x12, lsl #2
   4a8f0:	br	x11
   4a8f4:	mov	w9, #0x40d                 	// #1037
   4a8f8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4a8fc:	cmp	w9, #0x26a
   4a900:	b.le	4a944 <aarch64_find_next_alias_opcode@@Base+0x9c>
   4a904:	cmp	w9, #0x2c9
   4a908:	b.le	4a9a8 <aarch64_find_next_alias_opcode@@Base+0x100>
   4a90c:	sub	w10, w9, #0x2e0
   4a910:	cmp	w10, #0xb
   4a914:	b.ls	4aa04 <aarch64_find_next_alias_opcode@@Base+0x15c>  // b.plast
   4a918:	sub	w10, w9, #0x2ca
   4a91c:	cmp	w10, #0x9
   4a920:	b.hi	4aad4 <aarch64_find_next_alias_opcode@@Base+0x22c>  // b.pmore
   4a924:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a928:	add	x9, x9, #0xa60
   4a92c:	adr	x11, 4a93c <aarch64_find_next_alias_opcode@@Base+0x94>
   4a930:	ldrh	w12, [x9, x10, lsl #1]
   4a934:	add	x11, x11, x12, lsl #2
   4a938:	br	x11
   4a93c:	mov	w9, #0x2c9                 	// #713
   4a940:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4a944:	cmp	w9, #0x98
   4a948:	b.gt	4a9d4 <aarch64_find_next_alias_opcode@@Base+0x12c>
   4a94c:	sub	w9, w9, #0x3
   4a950:	cmp	w9, #0x19
   4a954:	b.hi	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.pmore
   4a958:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   4a95c:	add	x10, x10, #0x9fc
   4a960:	adr	x11, 4a974 <aarch64_find_next_alias_opcode@@Base+0xcc>
   4a964:	ldrh	w12, [x10, x9, lsl #1]
   4a968:	add	x11, x11, x12, lsl #2
   4a96c:	mov	w9, #0x2                   	// #2
   4a970:	br	x11
   4a974:	mov	w9, #0x4                   	// #4
   4a978:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4a97c:	sub	w10, w9, #0x7f1
   4a980:	cmp	w10, #0xc
   4a984:	b.hi	4aa24 <aarch64_find_next_alias_opcode@@Base+0x17c>  // b.pmore
   4a988:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a98c:	add	x9, x9, #0xbc6
   4a990:	adr	x11, 4a9a0 <aarch64_find_next_alias_opcode@@Base+0xf8>
   4a994:	ldrh	w12, [x9, x10, lsl #1]
   4a998:	add	x11, x11, x12, lsl #2
   4a99c:	br	x11
   4a9a0:	mov	w9, #0x503                 	// #1283
   4a9a4:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4a9a8:	sub	w10, w9, #0x26b
   4a9ac:	cmp	w10, #0x10
   4a9b0:	b.hi	4aa78 <aarch64_find_next_alias_opcode@@Base+0x1d0>  // b.pmore
   4a9b4:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4a9b8:	add	x9, x9, #0xa30
   4a9bc:	adr	x11, 4a9cc <aarch64_find_next_alias_opcode@@Base+0x124>
   4a9c0:	ldrh	w12, [x9, x10, lsl #1]
   4a9c4:	add	x11, x11, x12, lsl #2
   4a9c8:	br	x11
   4a9cc:	mov	w9, #0x26a                 	// #618
   4a9d0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4a9d4:	cmp	w9, #0x184
   4a9d8:	b.gt	4aa50 <aarch64_find_next_alias_opcode@@Base+0x1a8>
   4a9dc:	cmp	w9, #0x9c
   4a9e0:	b.le	4aaa4 <aarch64_find_next_alias_opcode@@Base+0x1fc>
   4a9e4:	cmp	w9, #0x9d
   4a9e8:	b.eq	4ab74 <aarch64_find_next_alias_opcode@@Base+0x2cc>  // b.none
   4a9ec:	cmp	w9, #0xf3
   4a9f0:	b.eq	4ab7c <aarch64_find_next_alias_opcode@@Base+0x2d4>  // b.none
   4a9f4:	cmp	w9, #0x13e
   4a9f8:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4a9fc:	mov	w9, #0x13d                 	// #317
   4aa00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aa04:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4aa08:	add	x9, x9, #0xa74
   4aa0c:	adr	x11, 4aa1c <aarch64_find_next_alias_opcode@@Base+0x174>
   4aa10:	ldrh	w12, [x9, x10, lsl #1]
   4aa14:	add	x11, x11, x12, lsl #2
   4aa18:	br	x11
   4aa1c:	mov	w9, #0x2df                 	// #735
   4aa20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aa24:	sub	w9, w9, #0x3df
   4aa28:	cmp	w9, #0x10
   4aa2c:	b.hi	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.pmore
   4aa30:	adrp	x10, 5b000 <fields@@Base+0x4e84>
   4aa34:	add	x10, x10, #0xa8c
   4aa38:	adr	x11, 4aa48 <aarch64_find_next_alias_opcode@@Base+0x1a0>
   4aa3c:	ldrh	w12, [x10, x9, lsl #1]
   4aa40:	add	x11, x11, x12, lsl #2
   4aa44:	br	x11
   4aa48:	mov	w9, #0x3de                 	// #990
   4aa4c:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aa50:	cmp	w9, #0x19c
   4aa54:	b.le	4aabc <aarch64_find_next_alias_opcode@@Base+0x214>
   4aa58:	cmp	w9, #0x19d
   4aa5c:	b.eq	4ab84 <aarch64_find_next_alias_opcode@@Base+0x2dc>  // b.none
   4aa60:	cmp	w9, #0x19f
   4aa64:	b.eq	4ab8c <aarch64_find_next_alias_opcode@@Base+0x2e4>  // b.none
   4aa68:	cmp	w9, #0x218
   4aa6c:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4aa70:	mov	w9, #0x217                 	// #535
   4aa74:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aa78:	sub	w10, w9, #0x298
   4aa7c:	cmp	w10, #0x6
   4aa80:	b.hi	4afc4 <aarch64_find_next_alias_opcode@@Base+0x71c>  // b.pmore
   4aa84:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4aa88:	add	x9, x9, #0xa52
   4aa8c:	adr	x11, 4aa9c <aarch64_find_next_alias_opcode@@Base+0x1f4>
   4aa90:	ldrh	w12, [x9, x10, lsl #1]
   4aa94:	add	x11, x11, x12, lsl #2
   4aa98:	br	x11
   4aa9c:	mov	w9, #0x297                 	// #663
   4aaa0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aaa4:	cmp	w9, #0x99
   4aaa8:	b.eq	4ab94 <aarch64_find_next_alias_opcode@@Base+0x2ec>  // b.none
   4aaac:	cmp	w9, #0x9b
   4aab0:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4aab4:	mov	w9, #0x9a                  	// #154
   4aab8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aabc:	cmp	w9, #0x185
   4aac0:	b.eq	4ab9c <aarch64_find_next_alias_opcode@@Base+0x2f4>  // b.none
   4aac4:	cmp	w9, #0x187
   4aac8:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4aacc:	mov	w9, #0x186                 	// #390
   4aad0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aad4:	cmp	w9, #0x2f6
   4aad8:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4aadc:	mov	w9, #0x2f5                 	// #757
   4aae0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aae4:	mov	w9, #0x2e1                 	// #737
   4aae8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aaec:	mov	w9, #0x2e3                 	// #739
   4aaf0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aaf4:	mov	w9, #0x2e5                 	// #741
   4aaf8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aafc:	mov	w9, #0x2e8                 	// #744
   4ab00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab04:	mov	w9, #0x2ea                 	// #746
   4ab08:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab0c:	mov	w9, #0x2cb                 	// #715
   4ab10:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab14:	mov	w9, #0x2cd                 	// #717
   4ab18:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab1c:	mov	w9, #0x2cf                 	// #719
   4ab20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab24:	mov	w9, #0x2d2                 	// #722
   4ab28:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab2c:	mov	w9, #0x7                   	// #7
   4ab30:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab34:	mov	w9, #0xa                   	// #10
   4ab38:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab3c:	mov	w9, #0xc                   	// #12
   4ab40:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab44:	mov	w9, #0xe                   	// #14
   4ab48:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab4c:	mov	w9, #0x11                  	// #17
   4ab50:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab54:	mov	w9, #0x16                  	// #22
   4ab58:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab5c:	mov	w9, #0x18                  	// #24
   4ab60:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab64:	mov	w9, #0x1c                  	// #28
   4ab68:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab6c:	mov	w9, #0x1a                  	// #26
   4ab70:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab74:	mov	w9, #0x9c                  	// #156
   4ab78:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab7c:	mov	w9, #0xf2                  	// #242
   4ab80:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab84:	mov	w9, #0x19c                 	// #412
   4ab88:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab8c:	mov	w9, #0x19e                 	// #414
   4ab90:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab94:	mov	w9, #0x98                  	// #152
   4ab98:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ab9c:	mov	w9, #0x184                 	// #388
   4aba0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aba4:	mov	w9, #0x3e0                 	// #992
   4aba8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abac:	mov	w9, #0x3e3                 	// #995
   4abb0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abb4:	mov	w9, #0x3e7                 	// #999
   4abb8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abbc:	mov	w9, #0x3e8                 	// #1000
   4abc0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abc4:	mov	w9, #0x3ea                 	// #1002
   4abc8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abcc:	mov	w9, #0x3ee                 	// #1006
   4abd0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abd4:	mov	w9, #0x40e                 	// #1038
   4abd8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abdc:	mov	w9, #0x40f                 	// #1039
   4abe0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abe4:	mov	w9, #0x411                 	// #1041
   4abe8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abec:	mov	w9, #0x414                 	// #1044
   4abf0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abf4:	mov	w9, #0x417                 	// #1047
   4abf8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4abfc:	mov	w9, #0x419                 	// #1049
   4ac00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac04:	mov	w9, #0x41a                 	// #1050
   4ac08:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac0c:	mov	w9, #0x41b                 	// #1051
   4ac10:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac14:	mov	w9, #0x41d                 	// #1053
   4ac18:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac1c:	mov	w9, #0x420                 	// #1056
   4ac20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac24:	mov	w9, #0x423                 	// #1059
   4ac28:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac2c:	mov	w9, #0x425                 	// #1061
   4ac30:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac34:	mov	w9, #0x426                 	// #1062
   4ac38:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac3c:	mov	w9, #0x427                 	// #1063
   4ac40:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac44:	mov	w9, #0x429                 	// #1065
   4ac48:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac4c:	mov	w9, #0x42c                 	// #1068
   4ac50:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac54:	mov	w9, #0x42f                 	// #1071
   4ac58:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac5c:	mov	w9, #0x431                 	// #1073
   4ac60:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac64:	mov	w9, #0x432                 	// #1074
   4ac68:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac6c:	mov	w9, #0x433                 	// #1075
   4ac70:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac74:	mov	w9, #0x435                 	// #1077
   4ac78:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac7c:	mov	w9, #0x438                 	// #1080
   4ac80:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac84:	mov	w9, #0x43b                 	// #1083
   4ac88:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac8c:	mov	w9, #0x43d                 	// #1085
   4ac90:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac94:	mov	w9, #0x43e                 	// #1086
   4ac98:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ac9c:	mov	w9, #0x43f                 	// #1087
   4aca0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aca4:	mov	w9, #0x441                 	// #1089
   4aca8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acac:	mov	w9, #0x444                 	// #1092
   4acb0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acb4:	mov	w9, #0x447                 	// #1095
   4acb8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acbc:	mov	w9, #0x449                 	// #1097
   4acc0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acc4:	mov	w9, #0x44a                 	// #1098
   4acc8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4accc:	mov	w9, #0x44b                 	// #1099
   4acd0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acd4:	mov	w9, #0x44d                 	// #1101
   4acd8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acdc:	mov	w9, #0x450                 	// #1104
   4ace0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ace4:	mov	w9, #0x453                 	// #1107
   4ace8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acec:	mov	w9, #0x455                 	// #1109
   4acf0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acf4:	mov	w9, #0x456                 	// #1110
   4acf8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4acfc:	mov	w9, #0x457                 	// #1111
   4ad00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad04:	mov	w9, #0x459                 	// #1113
   4ad08:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad0c:	mov	w9, #0x45c                 	// #1116
   4ad10:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad14:	mov	w9, #0x45f                 	// #1119
   4ad18:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad1c:	mov	w9, #0x461                 	// #1121
   4ad20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad24:	mov	w9, #0x462                 	// #1122
   4ad28:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad2c:	mov	w9, #0x463                 	// #1123
   4ad30:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad34:	mov	w9, #0x465                 	// #1125
   4ad38:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad3c:	mov	w9, #0x468                 	// #1128
   4ad40:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad44:	mov	w9, #0x46b                 	// #1131
   4ad48:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad4c:	mov	w9, #0x49d                 	// #1181
   4ad50:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad54:	mov	w9, #0x49f                 	// #1183
   4ad58:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad5c:	mov	w9, #0x4a9                 	// #1193
   4ad60:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad64:	mov	w9, #0x4aa                 	// #1194
   4ad68:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad6c:	mov	w9, #0x4ab                 	// #1195
   4ad70:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad74:	mov	w9, #0x4ac                 	// #1196
   4ad78:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad7c:	mov	w9, #0x4ad                 	// #1197
   4ad80:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad84:	mov	w9, #0x4ae                 	// #1198
   4ad88:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad8c:	mov	w9, #0x4af                 	// #1199
   4ad90:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad94:	mov	w9, #0x4b0                 	// #1200
   4ad98:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ad9c:	mov	w9, #0x4b1                 	// #1201
   4ada0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ada4:	mov	w9, #0x4b2                 	// #1202
   4ada8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adac:	mov	w9, #0x4b3                 	// #1203
   4adb0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adb4:	mov	w9, #0x4b4                 	// #1204
   4adb8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adbc:	mov	w9, #0x4b5                 	// #1205
   4adc0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adc4:	mov	w9, #0x4b6                 	// #1206
   4adc8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adcc:	mov	w9, #0x4b7                 	// #1207
   4add0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4add4:	mov	w9, #0x4ba                 	// #1210
   4add8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4addc:	mov	w9, #0x4bb                 	// #1211
   4ade0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ade4:	mov	w9, #0x4c0                 	// #1216
   4ade8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adec:	mov	w9, #0x4c1                 	// #1217
   4adf0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adf4:	mov	w9, #0x4c2                 	// #1218
   4adf8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4adfc:	mov	w9, #0x4c3                 	// #1219
   4ae00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae04:	mov	w9, #0x4c4                 	// #1220
   4ae08:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae0c:	mov	w9, #0x4c5                 	// #1221
   4ae10:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae14:	mov	w9, #0x4c6                 	// #1222
   4ae18:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae1c:	mov	w9, #0x4b8                 	// #1208
   4ae20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae24:	mov	w9, #0x4cc                 	// #1228
   4ae28:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae2c:	mov	w9, #0x4cd                 	// #1229
   4ae30:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae34:	mov	w9, #0x4ce                 	// #1230
   4ae38:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae3c:	mov	w9, #0x4cf                 	// #1231
   4ae40:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae44:	mov	w9, #0x4d0                 	// #1232
   4ae48:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae4c:	mov	w9, #0x4d1                 	// #1233
   4ae50:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae54:	mov	w9, #0x4d2                 	// #1234
   4ae58:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae5c:	mov	w9, #0x58f                 	// #1423
   4ae60:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae64:	mov	w9, #0x578                 	// #1400
   4ae68:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae6c:	mov	w9, #0x6da                 	// #1754
   4ae70:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae74:	mov	w9, #0x556                 	// #1366
   4ae78:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae7c:	mov	w9, #0x555                 	// #1365
   4ae80:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae84:	mov	w9, #0x6dd                 	// #1757
   4ae88:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae8c:	mov	w9, #0x4e9                 	// #1257
   4ae90:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae94:	mov	w9, #0x558                 	// #1368
   4ae98:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4ae9c:	mov	w9, #0x557                 	// #1367
   4aea0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aea4:	mov	w9, #0x547                 	// #1351
   4aea8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aeac:	mov	w9, #0x71c                 	// #1820
   4aeb0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aeb4:	mov	w9, #0x548                 	// #1352
   4aeb8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aebc:	mov	w9, #0x505                 	// #1285
   4aec0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aec4:	mov	w9, #0x71d                 	// #1821
   4aec8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aecc:	mov	w9, #0x549                 	// #1353
   4aed0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aed4:	mov	w9, #0x6de                 	// #1758
   4aed8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aedc:	mov	w9, #0x506                 	// #1286
   4aee0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aee4:	mov	w9, #0x55c                 	// #1372
   4aee8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aeec:	mov	w9, #0x55d                 	// #1373
   4aef0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aef4:	mov	w9, #0x529                 	// #1321
   4aef8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4aefc:	mov	w9, #0x52e                 	// #1326
   4af00:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af04:	mov	w9, #0x531                 	// #1329
   4af08:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af0c:	mov	w9, #0x52c                 	// #1324
   4af10:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af14:	mov	w9, #0x55a                 	// #1370
   4af18:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af1c:	mov	w9, #0x562                 	// #1378
   4af20:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af24:	mov	w9, #0x563                 	// #1379
   4af28:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af2c:	mov	w9, #0x570                 	// #1392
   4af30:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af34:	mov	w9, #0x572                 	// #1394
   4af38:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af3c:	mov	w9, #0x4ee                 	// #1262
   4af40:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af44:	mov	w9, #0x4f4                 	// #1268
   4af48:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af4c:	mov	w9, #0x6db                 	// #1755
   4af50:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af54:	mov	w9, #0x26b                 	// #619
   4af58:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af5c:	mov	w9, #0x270                 	// #624
   4af60:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af64:	mov	w9, #0x26d                 	// #621
   4af68:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af6c:	mov	w9, #0x26e                 	// #622
   4af70:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af74:	mov	w9, #0x26c                 	// #620
   4af78:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af7c:	mov	w9, #0x271                 	// #625
   4af80:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af84:	mov	w9, #0x274                 	// #628
   4af88:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af8c:	mov	w9, #0x272                 	// #626
   4af90:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af94:	mov	w9, #0x275                 	// #629
   4af98:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4af9c:	mov	w9, #0x276                 	// #630
   4afa0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afa4:	mov	w9, #0x27b                 	// #635
   4afa8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afac:	mov	w9, #0x278                 	// #632
   4afb0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afb4:	mov	w9, #0x277                 	// #631
   4afb8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afbc:	mov	w9, #0x27a                 	// #634
   4afc0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afc4:	cmp	w9, #0x2b0
   4afc8:	b.ne	4aff8 <aarch64_find_next_alias_opcode@@Base+0x750>  // b.any
   4afcc:	mov	w9, #0x2b1                 	// #689
   4afd0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afd4:	mov	w9, #0x298                 	// #664
   4afd8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afdc:	mov	w9, #0x29a                 	// #666
   4afe0:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afe4:	mov	w9, #0x29b                 	// #667
   4afe8:	b	4aff0 <aarch64_find_next_alias_opcode@@Base+0x748>
   4afec:	mov	w9, #0x29d                 	// #669
   4aff0:	mov	w10, #0x90                  	// #144
   4aff4:	madd	x0, x9, x10, x8
   4aff8:	ret

000000000004affc <aarch64_extract_operand@@Base>:
   4affc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   4b000:	ldr	x8, [x8, #4032]
   4b004:	mov	w9, #0xaaab                	// #43691
   4b008:	movk	w9, #0xaaaa, lsl #16
   4b00c:	sub	x8, x0, x8
   4b010:	lsr	x8, x8, #4
   4b014:	mul	w8, w8, w9
   4b018:	sub	w8, w8, #0x1
   4b01c:	cmp	w8, #0xce
   4b020:	b.hi	4b12c <aarch64_extract_operand@@Base+0x130>  // b.pmore
   4b024:	adrp	x9, 5b000 <fields@@Base+0x4e84>
   4b028:	add	x9, x9, #0xbe0
   4b02c:	adr	x10, 4b03c <aarch64_extract_operand@@Base+0x40>
   4b030:	ldrb	w11, [x9, x8]
   4b034:	add	x10, x10, x11, lsl #2
   4b038:	br	x10
   4b03c:	b	35990 <aarch64_ext_regno@plt>
   4b040:	b	35800 <aarch64_ext_imm@plt>
   4b044:	b	359d0 <aarch64_ext_sve_addr_rr_lsl@plt>
   4b048:	b	35b20 <aarch64_ext_sve_addr_rz_xtw@plt>
   4b04c:	b	353a0 <aarch64_ext_reglane@plt>
   4b050:	b	35390 <aarch64_ext_addr_simm@plt>
   4b054:	b	355b0 <aarch64_ext_sve_quad_index@plt>
   4b058:	b	35110 <aarch64_ext_sysins_op@plt>
   4b05c:	b	35c20 <aarch64_ext_sve_addr_ri_u6@plt>
   4b060:	b	35180 <aarch64_ext_sve_addr_zi_u5@plt>
   4b064:	b	35540 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   4b068:	b	356b0 <aarch64_ext_imm_rotate2@plt>
   4b06c:	b	35bc0 <aarch64_ext_imm_rotate1@plt>
   4b070:	b	35270 <aarch64_ext_sve_shrimm@plt>
   4b074:	b	35280 <aarch64_ext_sve_shlimm@plt>
   4b078:	b	35bd0 <aarch64_ext_advsimd_imm_modified@plt>
   4b07c:	b	35c40 <aarch64_ext_cond@plt>
   4b080:	b	35970 <aarch64_ext_addr_simple@plt>
   4b084:	b	356c0 <aarch64_ext_hint@plt>
   4b088:	b	35460 <aarch64_ext_fpimm@plt>
   4b08c:	b	35500 <aarch64_ext_limm@plt>
   4b090:	b	35aa0 <aarch64_ext_barrier@plt>
   4b094:	b	359e0 <aarch64_ext_sve_addr_ri_s4@plt>
   4b098:	b	355a0 <aarch64_ext_sve_reglist@plt>
   4b09c:	b	358d0 <aarch64_ext_advsimd_imm_shift@plt>
   4b0a0:	b	35440 <aarch64_ext_addr_offset@plt>
   4b0a4:	b	351b0 <aarch64_ext_sysreg@plt>
   4b0a8:	b	356a0 <aarch64_ext_sve_index@plt>
   4b0ac:	b	35a30 <aarch64_ext_imm_half@plt>
   4b0b0:	b	35210 <aarch64_ext_fbits@plt>
   4b0b4:	b	35890 <aarch64_ext_addr_regoff@plt>
   4b0b8:	b	35410 <aarch64_ext_addr_simm10@plt>
   4b0bc:	b	35290 <aarch64_ext_addr_uimm12@plt>
   4b0c0:	b	35c00 <aarch64_ext_simd_addr_post@plt>
   4b0c4:	b	35370 <aarch64_ext_sve_addr_zz_sxtw@plt>
   4b0c8:	b	357d0 <aarch64_ext_sve_aimm@plt>
   4b0cc:	b	355e0 <aarch64_ext_inv_limm@plt>
   4b0d0:	b	35b80 <aarch64_ext_sve_limm_mov@plt>
   4b0d4:	b	35a00 <aarch64_ext_sve_scale@plt>
   4b0d8:	b	35200 <aarch64_ext_regrt_sysins@plt>
   4b0dc:	b	35b30 <aarch64_ext_regno_pair@plt>
   4b0e0:	b	354b0 <aarch64_ext_reg_extended@plt>
   4b0e4:	b	35b60 <aarch64_ext_reg_shifted@plt>
   4b0e8:	b	35b40 <aarch64_ext_ft@plt>
   4b0ec:	b	35820 <aarch64_ext_reglist@plt>
   4b0f0:	b	35670 <aarch64_ext_ldst_reglist@plt>
   4b0f4:	b	35240 <aarch64_ext_ldst_reglist_r@plt>
   4b0f8:	b	357a0 <aarch64_ext_ldst_elemlist@plt>
   4b0fc:	b	35840 <aarch64_ext_shll_imm@plt>
   4b100:	b	352b0 <aarch64_ext_aimm@plt>
   4b104:	b	35950 <aarch64_ext_prfop@plt>
   4b108:	b	35a90 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   4b10c:	b	35740 <aarch64_ext_sve_addr_zz_lsl@plt>
   4b110:	b	358a0 <aarch64_ext_sve_addr_zz_uxtw@plt>
   4b114:	b	352d0 <aarch64_ext_sve_asimm@plt>
   4b118:	b	35ac0 <aarch64_ext_sve_float_half_one@plt>
   4b11c:	b	35870 <aarch64_ext_sve_float_zero_one@plt>
   4b120:	b	35be0 <aarch64_ext_pstatefield@plt>
   4b124:	b	35350 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   4b128:	b	355f0 <aarch64_ext_sve_float_half_two@plt>
   4b12c:	stp	x29, x30, [sp, #-16]!
   4b130:	adrp	x0, 58000 <fields@@Base+0x1e84>
   4b134:	adrp	x1, 5b000 <fields@@Base+0x4e84>
   4b138:	adrp	x3, 5b000 <fields@@Base+0x4e84>
   4b13c:	add	x0, x0, #0x5dc
   4b140:	add	x1, x1, #0xcaf
   4b144:	add	x3, x3, #0xccd
   4b148:	mov	w2, #0x5dcb                	// #24011
   4b14c:	mov	x29, sp
   4b150:	bl	35b90 <__assert_fail@plt>

000000000004b154 <aarch64_get_opcode@@Base>:
   4b154:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b158:	add	x8, x8, #0x6d4
   4b15c:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   4b160:	ldr	w8, [x8, w0, uxtw #2]
   4b164:	ldr	x10, [x10, #3848]
   4b168:	mov	w9, #0x90                  	// #144
   4b16c:	madd	x0, x8, x9, x10
   4b170:	ret

000000000004b174 <arm_symbol_is_valid@@Base>:
   4b174:	stp	x29, x30, [sp, #-16]!
   4b178:	mov	x29, sp
   4b17c:	cbz	x0, 4b1b4 <arm_symbol_is_valid@@Base+0x40>
   4b180:	ldr	x0, [x0, #8]
   4b184:	cbz	x0, 4b1b4 <arm_symbol_is_valid@@Base+0x40>
   4b188:	ldrb	w8, [x0]
   4b18c:	cmp	w8, #0x24
   4b190:	b.ne	4b19c <arm_symbol_is_valid@@Base+0x28>  // b.any
   4b194:	mov	w0, wzr
   4b198:	b	4b1b4 <arm_symbol_is_valid@@Base+0x40>
   4b19c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4b1a0:	add	x1, x1, #0x320
   4b1a4:	mov	w2, #0xa                   	// #10
   4b1a8:	bl	35520 <strncmp@plt>
   4b1ac:	cmp	w0, #0x0
   4b1b0:	cset	w0, ne  // ne = any
   4b1b4:	ldp	x29, x30, [sp], #16
   4b1b8:	ret

000000000004b1bc <print_insn_big_arm@@Base>:
   4b1bc:	ldr	w8, [x1, #24]
   4b1c0:	cmp	w8, #0x5
   4b1c4:	b.ne	4b1e8 <print_insn_big_arm@@Base+0x2c>  // b.any
   4b1c8:	ldr	x8, [x1, #48]
   4b1cc:	cbz	x8, 4b1e8 <print_insn_big_arm@@Base+0x2c>
   4b1d0:	ldr	x8, [x8, #240]
   4b1d4:	ldr	x8, [x8, #248]
   4b1d8:	ldrb	w8, [x8, #50]
   4b1dc:	tbz	w8, #7, 4b1e8 <print_insn_big_arm@@Base+0x2c>
   4b1e0:	mov	w8, #0x1                   	// #1
   4b1e4:	str	w8, [x1, #44]
   4b1e8:	mov	w2, wzr
   4b1ec:	b	4b1f0 <print_insn_big_arm@@Base+0x34>
   4b1f0:	sub	sp, sp, #0x90
   4b1f4:	stp	x29, x30, [sp, #48]
   4b1f8:	stp	x28, x27, [sp, #64]
   4b1fc:	stp	x26, x25, [sp, #80]
   4b200:	stp	x24, x23, [sp, #96]
   4b204:	stp	x22, x21, [sp, #112]
   4b208:	stp	x20, x19, [sp, #128]
   4b20c:	ldr	x22, [x1, #224]
   4b210:	mov	w21, w2
   4b214:	mov	x19, x1
   4b218:	mov	x26, x0
   4b21c:	add	x29, sp, #0x30
   4b220:	strh	wzr, [x1, #196]
   4b224:	strb	wzr, [x1, #198]
   4b228:	str	wzr, [x1, #200]
   4b22c:	stp	xzr, xzr, [x1, #208]
   4b230:	cbz	x22, 4b344 <print_insn_big_arm@@Base+0x188>
   4b234:	str	x26, [sp, #24]
   4b238:	adrp	x23, 5e000 <fields@@Base+0x7e84>
   4b23c:	adrp	x25, 81000 <aarch64_operands@@Base+0x1c38>
   4b240:	adrp	x24, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4b244:	adrp	x26, 5e000 <fields@@Base+0x7e84>
   4b248:	adrp	x27, 5e000 <fields@@Base+0x7e84>
   4b24c:	adrp	x28, 55000 <xexit@@Base+0x184c>
   4b250:	add	x23, x23, #0x393
   4b254:	add	x25, x25, #0xaf8
   4b258:	add	x24, x24, #0x7f0
   4b25c:	add	x26, x26, #0x3c4
   4b260:	add	x27, x27, #0x3c1
   4b264:	add	x28, x28, #0xbeb
   4b268:	str	w21, [sp, #20]
   4b26c:	mov	w2, #0xa                   	// #10
   4b270:	mov	x0, x22
   4b274:	mov	x1, x23
   4b278:	bl	35520 <strncmp@plt>
   4b27c:	cbz	w0, 4b2b8 <print_insn_big_arm@@Base+0xfc>
   4b280:	mov	w2, #0xb                   	// #11
   4b284:	mov	x0, x22
   4b288:	mov	x1, x26
   4b28c:	bl	35520 <strncmp@plt>
   4b290:	cbz	w0, 4b300 <print_insn_big_arm@@Base+0x144>
   4b294:	mov	w2, #0xe                   	// #14
   4b298:	mov	x0, x22
   4b29c:	mov	x1, x27
   4b2a0:	bl	35520 <strncmp@plt>
   4b2a4:	cbz	w0, 4b31c <print_insn_big_arm@@Base+0x160>
   4b2a8:	mov	w2, #0x5                   	// #5
   4b2ac:	mov	x0, x24
   4b2b0:	mov	x1, x28
   4b2b4:	b	4b2f0 <print_insn_big_arm@@Base+0x134>
   4b2b8:	mov	x20, xzr
   4b2bc:	mov	x21, x25
   4b2c0:	ldr	x1, [x21]
   4b2c4:	mov	x0, x22
   4b2c8:	bl	35a40 <disassembler_options_cmp@plt>
   4b2cc:	cbz	w0, 4b310 <print_insn_big_arm@@Base+0x154>
   4b2d0:	add	x20, x20, #0x1
   4b2d4:	cmp	x20, #0x8
   4b2d8:	add	x21, x21, #0x90
   4b2dc:	b.ne	4b2c0 <print_insn_big_arm@@Base+0x104>  // b.any
   4b2e0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4b2e4:	mov	w2, #0x5                   	// #5
   4b2e8:	mov	x0, x24
   4b2ec:	add	x1, x1, #0x39e
   4b2f0:	bl	35ab0 <dcgettext@plt>
   4b2f4:	mov	x1, x22
   4b2f8:	bl	35ae0 <_bfd_error_handler@plt>
   4b2fc:	b	4b324 <print_insn_big_arm@@Base+0x168>
   4b300:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b304:	mov	w9, #0x1                   	// #1
   4b308:	strb	w9, [x8, #1056]
   4b30c:	b	4b324 <print_insn_big_arm@@Base+0x168>
   4b310:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4b314:	str	w20, [x8, #1584]
   4b318:	b	4b324 <print_insn_big_arm@@Base+0x168>
   4b31c:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b320:	strb	wzr, [x8, #1056]
   4b324:	mov	w1, #0x2c                  	// #44
   4b328:	mov	x0, x22
   4b32c:	bl	35910 <strchr@plt>
   4b330:	add	x22, x0, #0x1
   4b334:	cbnz	x0, 4b26c <print_insn_big_arm@@Base+0xb0>
   4b338:	ldr	x26, [sp, #24]
   4b33c:	ldr	w21, [sp, #20]
   4b340:	str	xzr, [x19, #224]
   4b344:	ldr	x20, [x19, #96]
   4b348:	cbnz	x20, 4b384 <print_insn_big_arm@@Base+0x1c8>
   4b34c:	ldrb	w8, [x19, #91]
   4b350:	tbnz	w8, #5, 4b4d0 <print_insn_big_arm@@Base+0x314>
   4b354:	str	xzr, [x19, #32]
   4b358:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b35c:	ldr	q0, [x8, #2448]
   4b360:	adrp	x20, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b364:	add	x20, x20, #0x3f0
   4b368:	mov	x8, #0xffffffffffffffff    	// #-1
   4b36c:	mov	w9, #0xffffffff            	// #-1
   4b370:	str	q0, [x20]
   4b374:	str	x8, [x20, #16]
   4b378:	str	w9, [x20, #28]
   4b37c:	stp	xzr, xzr, [x20, #32]
   4b380:	str	x20, [x19, #96]
   4b384:	ldr	w8, [x19, #44]
   4b388:	ldr	w9, [x19, #84]
   4b38c:	cmp	w8, #0x1
   4b390:	cset	w22, eq  // eq = none
   4b394:	cmp	w21, #0x0
   4b398:	cset	w23, ne  // ne = any
   4b39c:	cbz	w9, 4b464 <print_insn_big_arm@@Base+0x2a8>
   4b3a0:	ldr	x8, [x19, #72]
   4b3a4:	ldr	x8, [x8]
   4b3a8:	ldrb	w9, [x8, #26]
   4b3ac:	tbnz	w9, #5, 4b454 <print_insn_big_arm@@Base+0x298>
   4b3b0:	ldr	x8, [x8]
   4b3b4:	ldr	x8, [x8, #8]
   4b3b8:	ldr	w8, [x8, #8]
   4b3bc:	cmp	w8, #0x5
   4b3c0:	b.ne	4b454 <print_insn_big_arm@@Base+0x298>  // b.any
   4b3c4:	sub	x2, x29, #0x10
   4b3c8:	mov	x0, x26
   4b3cc:	mov	x1, x19
   4b3d0:	stur	wzr, [x29, #-16]
   4b3d4:	bl	4bc20 <print_arm_disassembler_options@@Base+0xe8>
   4b3d8:	ldr	w8, [x20, #24]
   4b3dc:	mov	w24, #0x4                   	// #4
   4b3e0:	cmp	w8, #0x1
   4b3e4:	cset	w9, eq  // eq = none
   4b3e8:	cmp	w8, #0x2
   4b3ec:	cset	w8, eq  // eq = none
   4b3f0:	b.ne	4b470 <print_insn_big_arm@@Base+0x2b4>  // b.any
   4b3f4:	ldr	w11, [x20, #28]
   4b3f8:	ldrsw	x10, [x19, #84]
   4b3fc:	and	w13, w26, #0x3
   4b400:	sub	w24, w24, w13
   4b404:	add	w12, w11, #0x1
   4b408:	cmp	w12, w10
   4b40c:	b.ge	4b960 <print_insn_big_arm@@Base+0x7a4>  // b.tcont
   4b410:	ldr	x11, [x19, #72]
   4b414:	sxtw	x12, w12
   4b418:	ldr	x13, [x11, x12, lsl #3]
   4b41c:	ldr	x14, [x13, #32]
   4b420:	ldr	x13, [x13, #16]
   4b424:	ldr	x15, [x14, #40]
   4b428:	add	x13, x13, x15
   4b42c:	subs	x13, x13, x26
   4b430:	b.ls	4b444 <print_insn_big_arm@@Base+0x288>  // b.plast
   4b434:	ldr	x15, [x19, #48]
   4b438:	cbz	x15, 4b958 <print_insn_big_arm@@Base+0x79c>
   4b43c:	cmp	x15, x14
   4b440:	b.eq	4b958 <print_insn_big_arm@@Base+0x79c>  // b.none
   4b444:	add	x12, x12, #0x1
   4b448:	cmp	x12, x10
   4b44c:	b.lt	4b418 <print_insn_big_arm@@Base+0x25c>  // b.tstop
   4b450:	b	4b960 <print_insn_big_arm@@Base+0x7a4>
   4b454:	mov	w0, wzr
   4b458:	mov	w8, wzr
   4b45c:	mov	w9, wzr
   4b460:	b	4b46c <print_insn_big_arm@@Base+0x2b0>
   4b464:	mov	w0, wzr
   4b468:	mov	w8, wzr
   4b46c:	mov	w24, #0x4                   	// #4
   4b470:	ldr	x10, [x19, #56]
   4b474:	orr	w25, w23, w22
   4b478:	cbz	x10, 4b54c <print_insn_big_arm@@Base+0x390>
   4b47c:	ldr	x10, [x10]
   4b480:	ldrb	w11, [x10, #26]
   4b484:	tbnz	w11, #5, 4b54c <print_insn_big_arm@@Base+0x390>
   4b488:	ldr	x11, [x10]
   4b48c:	ldr	x11, [x11, #8]
   4b490:	ldr	w11, [x11, #8]
   4b494:	cmp	w11, #0x2
   4b498:	b.ne	4b508 <print_insn_big_arm@@Base+0x34c>  // b.any
   4b49c:	ldr	x9, [x10, #48]
   4b4a0:	ldrb	w9, [x9, #40]
   4b4a4:	sub	w10, w9, #0x82
   4b4a8:	cmp	w10, #0x15
   4b4ac:	b.hi	4b4c8 <print_insn_big_arm@@Base+0x30c>  // b.pmore
   4b4b0:	mov	w9, #0x1                   	// #1
   4b4b4:	mov	w11, #0x13                  	// #19
   4b4b8:	lsl	w10, w9, w10
   4b4bc:	movk	w11, #0x30, lsl #16
   4b4c0:	tst	w10, w11
   4b4c4:	b.ne	4b54c <print_insn_big_arm@@Base+0x390>  // b.any
   4b4c8:	mov	w9, wzr
   4b4cc:	b	4b54c <print_insn_big_arm@@Base+0x390>
   4b4d0:	ldr	x8, [x19, #32]
   4b4d4:	cmp	x8, #0x1b
   4b4d8:	b.hi	4ba74 <print_insn_big_arm@@Base+0x8b8>  // b.pmore
   4b4dc:	adrp	x9, 5d000 <fields@@Base+0x6e84>
   4b4e0:	ldr	q0, [x9, #2080]
   4b4e4:	adrp	x9, 5d000 <fields@@Base+0x6e84>
   4b4e8:	add	x9, x9, #0x9b0
   4b4ec:	adr	x10, 4b358 <print_insn_big_arm@@Base+0x19c>
   4b4f0:	ldrh	w11, [x9, x8, lsl #1]
   4b4f4:	add	x10, x10, x11, lsl #2
   4b4f8:	br	x10
   4b4fc:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b500:	ldr	q0, [x8, #2320]
   4b504:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b508:	cbnz	w0, 4b53c <print_insn_big_arm@@Base+0x380>
   4b50c:	cmp	w11, #0x5
   4b510:	b.ne	4b53c <print_insn_big_arm@@Base+0x380>  // b.any
   4b514:	ldrb	w9, [x10, #74]
   4b518:	ldrb	w10, [x10, #72]
   4b51c:	mov	w11, #0xf                   	// #15
   4b520:	and	w9, w9, #0x3
   4b524:	cmp	w9, #0x1
   4b528:	cset	w9, eq  // eq = none
   4b52c:	bics	wzr, w11, w10
   4b530:	cset	w10, eq  // eq = none
   4b534:	orr	w9, w10, w9
   4b538:	b	4b54c <print_insn_big_arm@@Base+0x390>
   4b53c:	cmp	w11, #0x11
   4b540:	b.ne	4b54c <print_insn_big_arm@@Base+0x390>  // b.any
   4b544:	ldrh	w9, [x10, #50]
   4b548:	and	w9, w9, #0x8
   4b54c:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b550:	ldrb	w10, [x10, #1056]
   4b554:	cmp	w10, #0x0
   4b558:	csinc	w20, w9, wzr, eq  // eq = none
   4b55c:	cbz	w8, 4b5d8 <print_insn_big_arm@@Base+0x41c>
   4b560:	ldrb	w8, [x19, #91]
   4b564:	cmp	w21, #0x0
   4b568:	cset	w9, ne  // ne = any
   4b56c:	str	w9, [x19, #176]
   4b570:	mov	w9, #0x4                   	// #4
   4b574:	str	w9, [x19, #168]
   4b578:	tbnz	w8, #6, 4b5e4 <print_insn_big_arm@@Base+0x428>
   4b57c:	ldr	x8, [x19, #104]
   4b580:	sub	x1, x29, #0xc
   4b584:	mov	x0, x26
   4b588:	mov	w2, w24
   4b58c:	mov	x3, x19
   4b590:	mov	w23, w24
   4b594:	str	w24, [x19, #172]
   4b598:	blr	x8
   4b59c:	cbz	w21, 4b6e4 <print_insn_big_arm@@Base+0x528>
   4b5a0:	subs	w9, w24, #0x1
   4b5a4:	b.mi	4b710 <print_insn_big_arm@@Base+0x554>  // b.first
   4b5a8:	sub	x10, x29, #0xc
   4b5ac:	mov	x8, xzr
   4b5b0:	mov	x21, xzr
   4b5b4:	add	x9, x10, w9, uxtw
   4b5b8:	ldrb	w10, [x9, x8]
   4b5bc:	sub	x8, x8, #0x1
   4b5c0:	add	w11, w23, w8
   4b5c4:	cmp	w11, #0x0
   4b5c8:	bfi	x10, x21, #8, #56
   4b5cc:	mov	x21, x10
   4b5d0:	b.gt	4b5b8 <print_insn_big_arm@@Base+0x3fc>
   4b5d4:	b	4b714 <print_insn_big_arm@@Base+0x558>
   4b5d8:	mov	w8, #0x4                   	// #4
   4b5dc:	str	w25, [x19, #176]
   4b5e0:	str	w8, [x19, #168]
   4b5e4:	cbz	w20, 4b638 <print_insn_big_arm@@Base+0x47c>
   4b5e8:	ldr	x8, [x19, #104]
   4b5ec:	mov	w23, #0x2                   	// #2
   4b5f0:	sub	x1, x29, #0xc
   4b5f4:	mov	w2, #0x2                   	// #2
   4b5f8:	mov	x0, x26
   4b5fc:	mov	x3, x19
   4b600:	str	w23, [x19, #172]
   4b604:	blr	x8
   4b608:	ldurb	w8, [x29, #-11]
   4b60c:	ldurb	w9, [x29, #-12]
   4b610:	cmp	w25, #0x0
   4b614:	csel	w10, w8, w9, ne  // ne = any
   4b618:	csel	w8, w9, w8, ne  // ne = any
   4b61c:	and	x21, x8, #0xff
   4b620:	and	x8, x10, #0xff
   4b624:	bfi	x21, x8, #8, #8
   4b628:	cbz	w0, 4b674 <print_insn_big_arm@@Base+0x4b8>
   4b62c:	adrp	x10, 4c000 <print_arm_disassembler_options@@Base+0x4c8>
   4b630:	add	x10, x10, #0xc90
   4b634:	b	4b794 <print_insn_big_arm@@Base+0x5d8>
   4b638:	ldr	x8, [x19, #104]
   4b63c:	mov	w9, #0x4                   	// #4
   4b640:	sub	x1, x29, #0xc
   4b644:	mov	w2, #0x4                   	// #4
   4b648:	mov	x0, x26
   4b64c:	mov	x3, x19
   4b650:	str	w9, [x19, #172]
   4b654:	blr	x8
   4b658:	cbz	w25, 4b6c4 <print_insn_big_arm@@Base+0x508>
   4b65c:	ldur	w21, [x29, #-12]
   4b660:	adrp	x10, 4b000 <aarch64_extract_operand@@Base+0x4>
   4b664:	add	x10, x10, #0xf28
   4b668:	mov	w23, #0x4                   	// #4
   4b66c:	cbnz	w0, 4b8fc <print_insn_big_arm@@Base+0x740>
   4b670:	b	4b720 <print_insn_big_arm@@Base+0x564>
   4b674:	lsl	x8, x8, #8
   4b678:	and	w8, w8, #0xf800
   4b67c:	mov	w9, #0xe800                	// #59392
   4b680:	cmp	w8, w9
   4b684:	b.eq	4b69c <print_insn_big_arm@@Base+0x4e0>  // b.none
   4b688:	mov	w9, #0xf800                	// #63488
   4b68c:	cmp	w8, w9
   4b690:	b.eq	4b69c <print_insn_big_arm@@Base+0x4e0>  // b.none
   4b694:	cmp	w8, #0xf, lsl #12
   4b698:	b.ne	4b784 <print_insn_big_arm@@Base+0x5c8>  // b.any
   4b69c:	ldr	x8, [x19, #104]
   4b6a0:	add	x0, x26, #0x2
   4b6a4:	sub	x1, x29, #0xc
   4b6a8:	mov	w2, #0x2                   	// #2
   4b6ac:	mov	x3, x19
   4b6b0:	blr	x8
   4b6b4:	cbz	w25, 4b760 <print_insn_big_arm@@Base+0x5a4>
   4b6b8:	ldurb	w8, [x29, #-12]
   4b6bc:	ldurb	w9, [x29, #-11]
   4b6c0:	b	4b768 <print_insn_big_arm@@Base+0x5ac>
   4b6c4:	ldur	w8, [x29, #-12]
   4b6c8:	adrp	x10, 4b000 <aarch64_extract_operand@@Base+0x4>
   4b6cc:	add	x10, x10, #0xf28
   4b6d0:	mov	w23, #0x4                   	// #4
   4b6d4:	lsl	x8, x8, #32
   4b6d8:	rev	x21, x8
   4b6dc:	cbnz	w0, 4b8fc <print_insn_big_arm@@Base+0x740>
   4b6e0:	b	4b720 <print_insn_big_arm@@Base+0x564>
   4b6e4:	cmp	w24, #0x0
   4b6e8:	b.le	4b710 <print_insn_big_arm@@Base+0x554>
   4b6ec:	mov	x21, xzr
   4b6f0:	sub	x8, x29, #0xc
   4b6f4:	mov	x9, x23
   4b6f8:	ldrb	w10, [x8], #1
   4b6fc:	subs	x9, x9, #0x1
   4b700:	bfi	x10, x21, #8, #56
   4b704:	mov	x21, x10
   4b708:	b.ne	4b6f8 <print_insn_big_arm@@Base+0x53c>  // b.any
   4b70c:	b	4b714 <print_insn_big_arm@@Base+0x558>
   4b710:	mov	x21, xzr
   4b714:	adrp	x10, 4b000 <aarch64_extract_operand@@Base+0x4>
   4b718:	add	x10, x10, #0xecc
   4b71c:	cbnz	w0, 4b8fc <print_insn_big_arm@@Base+0x740>
   4b720:	ldr	w8, [x19, #88]
   4b724:	mov	x1, x19
   4b728:	mov	x2, x21
   4b72c:	cmp	w8, #0x0
   4b730:	csel	x0, xzr, x26, lt  // lt = tstop
   4b734:	blr	x10
   4b738:	cbz	w20, 4b910 <print_insn_big_arm@@Base+0x754>
   4b73c:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b740:	adrp	x9, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b744:	ldr	w8, [x8, #1076]
   4b748:	ldr	x10, [x9, #1064]
   4b74c:	adrp	x11, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b750:	str	w8, [x11, #1072]
   4b754:	add	x8, x10, w23, uxtw
   4b758:	str	x8, [x9, #1064]
   4b75c:	b	4b910 <print_insn_big_arm@@Base+0x754>
   4b760:	ldurb	w8, [x29, #-11]
   4b764:	ldurb	w9, [x29, #-12]
   4b768:	bfi	x8, x21, #16, #16
   4b76c:	bfi	x8, x9, #8, #8
   4b770:	adrp	x10, 4d000 <print_arm_disassembler_options@@Base+0x14c8>
   4b774:	add	x10, x10, #0x3f8
   4b778:	mov	w23, #0x4                   	// #4
   4b77c:	mov	x21, x8
   4b780:	b	4b794 <print_insn_big_arm@@Base+0x5d8>
   4b784:	adrp	x10, 4c000 <print_arm_disassembler_options@@Base+0x4c8>
   4b788:	mov	w0, wzr
   4b78c:	add	x10, x10, #0xc90
   4b790:	mov	w23, #0x2                   	// #2
   4b794:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b798:	ldr	x9, [x8, #1064]
   4b79c:	cmp	x9, x26
   4b7a0:	b.eq	4b8d8 <print_insn_big_arm@@Base+0x71c>  // b.none
   4b7a4:	stp	w0, w20, [sp, #16]
   4b7a8:	mov	w28, wzr
   4b7ac:	mov	w27, wzr
   4b7b0:	str	x26, [x8, #1064]
   4b7b4:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b7b8:	mov	w20, #0x1                   	// #1
   4b7bc:	mov	x24, x26
   4b7c0:	str	x10, [sp, #8]
   4b7c4:	str	wzr, [x8, #1072]
   4b7c8:	str	x26, [sp, #24]
   4b7cc:	cbz	x24, 4b8a8 <print_insn_big_arm@@Base+0x6ec>
   4b7d0:	ldr	x8, [x19, #128]
   4b7d4:	mov	x0, x24
   4b7d8:	mov	x1, x19
   4b7dc:	blr	x8
   4b7e0:	cbnz	w0, 4b8a8 <print_insn_big_arm@@Base+0x6ec>
   4b7e4:	ldr	x8, [x19, #104]
   4b7e8:	sub	x24, x24, #0x2
   4b7ec:	sub	x1, x29, #0x4
   4b7f0:	mov	w2, #0x2                   	// #2
   4b7f4:	mov	x0, x24
   4b7f8:	mov	x3, x19
   4b7fc:	blr	x8
   4b800:	cbnz	w0, 4b8cc <print_insn_big_arm@@Base+0x710>
   4b804:	ldurb	w8, [x29, #-3]
   4b808:	ldurb	w9, [x29, #-4]
   4b80c:	cmp	w25, #0x0
   4b810:	csel	w26, w8, w9, ne  // ne = any
   4b814:	csel	w9, w9, w8, ne  // ne = any
   4b818:	and	w8, w26, #0xff
   4b81c:	cbz	w27, 4b830 <print_insn_big_arm@@Base+0x674>
   4b820:	cmp	w8, #0xe7
   4b824:	b.hi	4b830 <print_insn_big_arm@@Base+0x674>  // b.pmore
   4b828:	tbnz	w20, #0, 4b8b0 <print_insn_big_arm@@Base+0x6f4>
   4b82c:	mov	w27, wzr
   4b830:	cmp	w8, #0xbf
   4b834:	b.ne	4b884 <print_insn_big_arm@@Base+0x6c8>  // b.any
   4b838:	and	w22, w9, #0xff
   4b83c:	and	w9, w22, #0xf
   4b840:	cbz	w9, 4b884 <print_insn_big_arm@@Base+0x6c8>
   4b844:	sub	x2, x29, #0x8
   4b848:	mov	x0, x24
   4b84c:	mov	x1, x19
   4b850:	bfi	w22, w8, #8, #8
   4b854:	stur	wzr, [x29, #-8]
   4b858:	bl	4bc20 <print_arm_disassembler_options@@Base+0xe8>
   4b85c:	ldur	w8, [x29, #-8]
   4b860:	cmp	w0, #0x0
   4b864:	cset	w10, eq  // eq = none
   4b868:	asr	w9, w20, #1
   4b86c:	cmp	w8, #0x1
   4b870:	cset	w8, eq  // eq = none
   4b874:	orr	w8, w10, w8
   4b878:	cmp	w8, #0x0
   4b87c:	csel	w28, w9, w28, ne  // ne = any
   4b880:	csel	w27, w22, w27, ne  // ne = any
   4b884:	and	w8, w26, #0xff
   4b888:	add	w9, w20, #0x2
   4b88c:	orr	w9, w9, #0x1
   4b890:	cmp	w8, #0xe7
   4b894:	csinc	w20, w9, w20, ls  // ls = plast
   4b898:	cmp	w20, #0x8
   4b89c:	b.lt	4b7cc <print_insn_big_arm@@Base+0x610>  // b.tstop
   4b8a0:	cbnz	w27, 4b7cc <print_insn_big_arm@@Base+0x610>
   4b8a4:	b	4b8cc <print_insn_big_arm@@Base+0x710>
   4b8a8:	tbz	w20, #0, 4b8cc <print_insn_big_arm@@Base+0x710>
   4b8ac:	cbz	w27, 4b8cc <print_insn_big_arm@@Base+0x710>
   4b8b0:	and	w8, w27, #0xe0
   4b8b4:	lsl	w9, w27, w28
   4b8b8:	bfxil	w8, w9, #0, #5
   4b8bc:	tst	w9, #0xf
   4b8c0:	csel	w8, wzr, w8, eq  // eq = none
   4b8c4:	adrp	x9, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b8c8:	str	w8, [x9, #1072]
   4b8cc:	ldr	x26, [sp, #24]
   4b8d0:	ldp	w0, w20, [sp, #16]
   4b8d4:	ldr	x10, [sp, #8]
   4b8d8:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b8dc:	ldr	w8, [x8, #1072]
   4b8e0:	cbz	w8, 4b8f8 <print_insn_big_arm@@Base+0x73c>
   4b8e4:	and	w9, w8, #0xf
   4b8e8:	cmp	w9, #0x8
   4b8ec:	b.ne	4b934 <print_insn_big_arm@@Base+0x778>  // b.any
   4b8f0:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b8f4:	str	wzr, [x8, #1076]
   4b8f8:	cbz	w0, 4b720 <print_insn_big_arm@@Base+0x564>
   4b8fc:	ldr	x8, [x19, #112]
   4b900:	mov	x1, x26
   4b904:	mov	x2, x19
   4b908:	blr	x8
   4b90c:	mov	w23, #0xffffffff            	// #-1
   4b910:	mov	w0, w23
   4b914:	ldp	x20, x19, [sp, #128]
   4b918:	ldp	x22, x21, [sp, #112]
   4b91c:	ldp	x24, x23, [sp, #96]
   4b920:	ldp	x26, x25, [sp, #80]
   4b924:	ldp	x28, x27, [sp, #64]
   4b928:	ldp	x29, x30, [sp, #48]
   4b92c:	add	sp, sp, #0x90
   4b930:	ret
   4b934:	and	w8, w8, #0xe0
   4b938:	bfi	w8, w9, #1, #4
   4b93c:	adrp	x9, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b940:	str	w8, [x9, #1076]
   4b944:	cbnz	w0, 4b8fc <print_insn_big_arm@@Base+0x740>
   4b948:	b	4b720 <print_insn_big_arm@@Base+0x564>
   4b94c:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b950:	ldr	q0, [x8, #2336]
   4b954:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b958:	cmp	x13, x24
   4b95c:	csel	w24, w13, w24, cc  // cc = lo, ul, last
   4b960:	cmp	w24, #0x3
   4b964:	b.ne	4b470 <print_insn_big_arm@@Base+0x2b4>  // b.any
   4b968:	tst	x26, #0x1
   4b96c:	mov	w10, #0x1                   	// #1
   4b970:	cinc	w24, w10, eq  // eq = none
   4b974:	b	4b470 <print_insn_big_arm@@Base+0x2b4>
   4b978:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b97c:	ldr	q0, [x8, #2096]
   4b980:	mov	w8, #0x1                   	// #1
   4b984:	adrp	x9, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4b988:	strb	w8, [x9, #1056]
   4b98c:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b990:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b994:	ldr	q0, [x8, #2304]
   4b998:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b99c:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9a0:	ldr	q0, [x8, #2272]
   4b9a4:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9a8:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9ac:	ldr	q0, [x8, #2432]
   4b9b0:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9b4:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9b8:	ldr	q0, [x8, #2400]
   4b9bc:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9c0:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9c4:	ldr	q0, [x8, #2352]
   4b9c8:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9cc:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9d0:	ldr	q0, [x8, #2288]
   4b9d4:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9d8:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9dc:	ldr	q0, [x8, #2144]
   4b9e0:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9e4:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9e8:	ldr	q0, [x8, #2128]
   4b9ec:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9f0:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4b9f4:	ldr	q0, [x8, #2416]
   4b9f8:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4b9fc:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba00:	ldr	q0, [x8, #2384]
   4ba04:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba08:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba0c:	ldr	q0, [x8, #2368]
   4ba10:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba14:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba18:	ldr	q0, [x8, #2256]
   4ba1c:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba20:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba24:	ldr	q0, [x8, #2240]
   4ba28:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba2c:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba30:	ldr	q0, [x8, #2208]
   4ba34:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba38:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba3c:	ldr	q0, [x8, #2192]
   4ba40:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba44:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba48:	ldr	q0, [x8, #2176]
   4ba4c:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba50:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba54:	ldr	q0, [x8, #2224]
   4ba58:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba5c:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba60:	ldr	q0, [x8, #2160]
   4ba64:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba68:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4ba6c:	ldr	q0, [x8, #2112]
   4ba70:	b	4b360 <print_insn_big_arm@@Base+0x1a4>
   4ba74:	bl	35750 <abort@plt>

000000000004ba78 <print_insn_little_arm@@Base>:
   4ba78:	mov	w2, #0x1                   	// #1
   4ba7c:	b	4b1f0 <print_insn_big_arm@@Base+0x34>

000000000004ba80 <disassembler_options_arm@@Base>:
   4ba80:	stp	x29, x30, [sp, #-64]!
   4ba84:	stp	x22, x21, [sp, #32]
   4ba88:	adrp	x21, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4ba8c:	ldr	x0, [x21, #992]
   4ba90:	str	x23, [sp, #16]
   4ba94:	stp	x20, x19, [sp, #48]
   4ba98:	mov	x29, sp
   4ba9c:	cbnz	x0, 4bb24 <disassembler_options_arm@@Base+0xa4>
   4baa0:	mov	w0, #0x20                  	// #32
   4baa4:	bl	35560 <xmalloc@plt>
   4baa8:	mov	x19, x0
   4baac:	str	x0, [x21, #992]
   4bab0:	str	xzr, [x0, #24]
   4bab4:	mov	w0, #0x48                  	// #72
   4bab8:	bl	35560 <xmalloc@plt>
   4babc:	str	x0, [x19]
   4bac0:	mov	w0, #0x48                  	// #72
   4bac4:	bl	35560 <xmalloc@plt>
   4bac8:	adrp	x23, 81000 <aarch64_operands@@Base+0x1c38>
   4bacc:	adrp	x20, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4bad0:	mov	x22, xzr
   4bad4:	add	x23, x23, #0xb00
   4bad8:	add	x20, x20, #0x7f0
   4badc:	stp	x0, xzr, [x19, #8]
   4bae0:	ldur	x8, [x23, #-8]
   4bae4:	ldr	x9, [x19]
   4bae8:	mov	w2, #0x5                   	// #5
   4baec:	mov	x0, x20
   4baf0:	str	x8, [x9, x22]
   4baf4:	ldr	x1, [x23], #144
   4baf8:	bl	35ab0 <dcgettext@plt>
   4bafc:	ldr	x8, [x19, #8]
   4bb00:	str	x0, [x8, x22]
   4bb04:	add	x22, x22, #0x8
   4bb08:	cmp	x22, #0x40
   4bb0c:	b.ne	4bae0 <disassembler_options_arm@@Base+0x60>  // b.any
   4bb10:	ldr	x8, [x19]
   4bb14:	str	xzr, [x8, #64]
   4bb18:	ldr	x8, [x19, #8]
   4bb1c:	str	xzr, [x8, #64]
   4bb20:	ldr	x0, [x21, #992]
   4bb24:	ldp	x20, x19, [sp, #48]
   4bb28:	ldp	x22, x21, [sp, #32]
   4bb2c:	ldr	x23, [sp, #16]
   4bb30:	ldp	x29, x30, [sp], #64
   4bb34:	ret

000000000004bb38 <print_arm_disassembler_options@@Base>:
   4bb38:	stp	x29, x30, [sp, #-80]!
   4bb3c:	stp	x20, x19, [sp, #64]
   4bb40:	mov	x19, x0
   4bb44:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4bb48:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4bb4c:	add	x0, x0, #0x7f0
   4bb50:	add	x1, x1, #0x32b
   4bb54:	mov	w2, #0x5                   	// #5
   4bb58:	stp	x26, x25, [sp, #16]
   4bb5c:	stp	x24, x23, [sp, #32]
   4bb60:	stp	x22, x21, [sp, #48]
   4bb64:	mov	x29, sp
   4bb68:	bl	35ab0 <dcgettext@plt>
   4bb6c:	mov	x1, x0
   4bb70:	mov	x0, x19
   4bb74:	bl	35c30 <fprintf@plt>
   4bb78:	adrp	x24, 81000 <aarch64_operands@@Base+0x1c38>
   4bb7c:	mov	x21, xzr
   4bb80:	mov	w20, wzr
   4bb84:	add	x24, x24, #0xaf8
   4bb88:	ldr	x0, [x24, x21]
   4bb8c:	bl	35190 <strlen@plt>
   4bb90:	cmp	w20, w0
   4bb94:	add	x21, x21, #0x90
   4bb98:	csel	w20, w0, w20, cc  // cc = lo, ul, last
   4bb9c:	cmp	x21, #0x480
   4bba0:	b.ne	4bb88 <print_arm_disassembler_options@@Base+0x50>  // b.any
   4bba4:	add	w26, w20, #0x1
   4bba8:	adrp	x20, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4bbac:	adrp	x21, 5e000 <fields@@Base+0x7e84>
   4bbb0:	mov	x25, xzr
   4bbb4:	add	x20, x20, #0x7f0
   4bbb8:	add	x21, x21, #0x387
   4bbbc:	add	x23, x24, x25
   4bbc0:	ldr	x22, [x23]
   4bbc4:	mov	x0, x22
   4bbc8:	bl	35190 <strlen@plt>
   4bbcc:	ldr	x1, [x23, #8]
   4bbd0:	sub	w23, w26, w0
   4bbd4:	mov	w2, #0x5                   	// #5
   4bbd8:	mov	x0, x20
   4bbdc:	bl	35ab0 <dcgettext@plt>
   4bbe0:	mov	x5, x0
   4bbe4:	mov	w4, #0x20                  	// #32
   4bbe8:	mov	x0, x19
   4bbec:	mov	x1, x21
   4bbf0:	mov	x2, x22
   4bbf4:	mov	w3, w23
   4bbf8:	bl	35c30 <fprintf@plt>
   4bbfc:	add	x25, x25, #0x90
   4bc00:	cmp	x25, #0x480
   4bc04:	b.ne	4bbbc <print_arm_disassembler_options@@Base+0x84>  // b.any
   4bc08:	ldp	x20, x19, [sp, #64]
   4bc0c:	ldp	x22, x21, [sp, #48]
   4bc10:	ldp	x24, x23, [sp, #32]
   4bc14:	ldp	x26, x25, [sp, #16]
   4bc18:	ldp	x29, x30, [sp], #80
   4bc1c:	ret
   4bc20:	sub	sp, sp, #0x70
   4bc24:	stp	x29, x30, [sp, #16]
   4bc28:	add	x29, sp, #0x10
   4bc2c:	mov	w8, #0x2                   	// #2
   4bc30:	stp	x28, x27, [sp, #32]
   4bc34:	stp	x26, x25, [sp, #48]
   4bc38:	stp	x24, x23, [sp, #64]
   4bc3c:	stp	x22, x21, [sp, #80]
   4bc40:	stp	x20, x19, [sp, #96]
   4bc44:	stur	w8, [x29, #-4]
   4bc48:	ldr	x8, [x1, #48]
   4bc4c:	mov	x19, x2
   4bc50:	mov	x20, x1
   4bc54:	mov	x21, x0
   4bc58:	cbz	x8, 4bc64 <print_arm_disassembler_options@@Base+0x12c>
   4bc5c:	ldrb	w8, [x8, #32]
   4bc60:	tbz	w8, #4, 4bc68 <print_arm_disassembler_options@@Base+0x130>
   4bc64:	stur	wzr, [x29, #-4]
   4bc68:	ldr	x24, [x20, #96]
   4bc6c:	cbz	x24, 4bcd0 <print_arm_disassembler_options@@Base+0x198>
   4bc70:	ldr	x8, [x20, #72]
   4bc74:	ldr	x9, [x8]
   4bc78:	ldrb	w10, [x9, #26]
   4bc7c:	tbnz	w10, #5, 4bcd0 <print_arm_disassembler_options@@Base+0x198>
   4bc80:	ldr	x9, [x9]
   4bc84:	ldr	x9, [x9, #8]
   4bc88:	ldr	w9, [x9, #8]
   4bc8c:	cmp	w9, #0x5
   4bc90:	b.ne	4bcd0 <print_arm_disassembler_options@@Base+0x198>  // b.any
   4bc94:	ldr	w9, [x20, #84]
   4bc98:	cbz	w9, 4bcf8 <print_arm_disassembler_options@@Base+0x1c0>
   4bc9c:	ldr	x10, [x24, #40]
   4bca0:	cmp	x10, x21
   4bca4:	b.cs	4bd00 <print_arm_disassembler_options@@Base+0x1c8>  // b.hs, b.nlast
   4bca8:	mov	x25, x24
   4bcac:	ldr	w10, [x25, #28]!
   4bcb0:	ldr	w11, [x20, #80]
   4bcb4:	add	w11, w11, #0x1
   4bcb8:	tbnz	w10, #31, 4bd1c <print_arm_disassembler_options@@Base+0x1e4>
   4bcbc:	ldr	x12, [x20, #240]
   4bcc0:	ldr	x13, [x24, #32]
   4bcc4:	cmp	x12, x13
   4bcc8:	cset	w26, eq  // eq = none
   4bccc:	b	4bd20 <print_arm_disassembler_options@@Base+0x1e8>
   4bcd0:	mov	w22, wzr
   4bcd4:	mov	w0, w22
   4bcd8:	ldp	x20, x19, [sp, #96]
   4bcdc:	ldp	x22, x21, [sp, #80]
   4bce0:	ldp	x24, x23, [sp, #64]
   4bce4:	ldp	x26, x25, [sp, #48]
   4bce8:	ldp	x28, x27, [sp, #32]
   4bcec:	ldp	x29, x30, [sp, #16]
   4bcf0:	add	sp, sp, #0x70
   4bcf4:	ret
   4bcf8:	mov	w21, #0xffffffff            	// #-1
   4bcfc:	b	4be48 <print_arm_disassembler_options@@Base+0x310>
   4bd00:	mov	w10, #0xffffffff            	// #-1
   4bd04:	mov	x25, x24
   4bd08:	str	w10, [x25, #28]!
   4bd0c:	ldr	w11, [x20, #80]
   4bd10:	mov	w26, wzr
   4bd14:	add	w11, w11, #0x1
   4bd18:	b	4bd20 <print_arm_disassembler_options@@Base+0x1e8>
   4bd1c:	mov	w26, wzr
   4bd20:	cmp	w11, w10
   4bd24:	cset	w12, ge  // ge = tcont
   4bd28:	tst	w12, w26
   4bd2c:	csel	w23, w10, w11, ne  // ne = any
   4bd30:	cmp	w23, w9
   4bd34:	b.ge	4bd60 <print_arm_disassembler_options@@Base+0x228>  // b.tcont
   4bd38:	ldr	x8, [x8, w23, sxtw #3]
   4bd3c:	ldr	x9, [x8, #32]
   4bd40:	ldr	x8, [x8, #16]
   4bd44:	ldr	x9, [x9, #40]
   4bd48:	add	x8, x8, x9
   4bd4c:	cmp	x8, x21
   4bd50:	b.ls	4bd68 <print_arm_disassembler_options@@Base+0x230>  // b.plast
   4bd54:	mov	w22, wzr
   4bd58:	mov	w27, #0xffffffff            	// #-1
   4bd5c:	b	4bdc8 <print_arm_disassembler_options@@Base+0x290>
   4bd60:	mov	w27, #0xffffffff            	// #-1
   4bd64:	b	4bdd0 <print_arm_disassembler_options@@Base+0x298>
   4bd68:	sxtw	x8, w23
   4bd6c:	mov	w22, wzr
   4bd70:	add	x28, x8, #0x1
   4bd74:	mov	w27, #0xffffffff            	// #-1
   4bd78:	sub	x2, x29, #0x4
   4bd7c:	mov	x0, x20
   4bd80:	mov	w1, w23
   4bd84:	bl	505d0 <print_arm_disassembler_options@@Base+0x4a98>
   4bd88:	ldrsw	x8, [x20, #84]
   4bd8c:	cmp	w0, #0x0
   4bd90:	csel	w27, w27, w23, eq  // eq = none
   4bd94:	csinc	w22, w22, wzr, eq  // eq = none
   4bd98:	cmp	x28, x8
   4bd9c:	b.ge	4bdc8 <print_arm_disassembler_options@@Base+0x290>  // b.tcont
   4bda0:	ldr	x8, [x20, #72]
   4bda4:	add	w23, w23, #0x1
   4bda8:	ldr	x8, [x8, x28, lsl #3]
   4bdac:	add	x28, x28, #0x1
   4bdb0:	ldr	x9, [x8, #32]
   4bdb4:	ldr	x8, [x8, #16]
   4bdb8:	ldr	x9, [x9, #40]
   4bdbc:	add	x8, x8, x9
   4bdc0:	cmp	x8, x21
   4bdc4:	b.ls	4bd78 <print_arm_disassembler_options@@Base+0x240>  // b.plast
   4bdc8:	mov	w21, w27
   4bdcc:	cbnz	w22, 4beac <print_arm_disassembler_options@@Base+0x374>
   4bdd0:	ldr	w9, [x20, #80]
   4bdd4:	ldr	w10, [x25]
   4bdd8:	ldr	x8, [x20, #48]
   4bddc:	cmp	w9, w10
   4bde0:	cset	w11, ge  // ge = tcont
   4bde4:	tst	w26, w11
   4bde8:	csel	w21, w10, w9, ne  // ne = any
   4bdec:	cbz	x8, 4bdfc <print_arm_disassembler_options@@Base+0x2c4>
   4bdf0:	ldr	x22, [x8, #40]
   4bdf4:	tbz	w21, #31, 4be04 <print_arm_disassembler_options@@Base+0x2cc>
   4bdf8:	b	4be44 <print_arm_disassembler_options@@Base+0x30c>
   4bdfc:	mov	x22, xzr
   4be00:	tbnz	w21, #31, 4be44 <print_arm_disassembler_options@@Base+0x30c>
   4be04:	ldr	x8, [x20, #72]
   4be08:	ldr	x8, [x8, w21, uxtw #3]
   4be0c:	ldr	x9, [x8, #32]
   4be10:	ldr	x8, [x8, #16]
   4be14:	ldr	x9, [x9, #40]
   4be18:	add	x8, x8, x9
   4be1c:	cmp	x8, x22
   4be20:	b.cc	4be44 <print_arm_disassembler_options@@Base+0x30c>  // b.lo, b.ul, b.last
   4be24:	sub	x2, x29, #0x4
   4be28:	mov	x0, x20
   4be2c:	mov	w1, w21
   4be30:	bl	505d0 <print_arm_disassembler_options@@Base+0x4a98>
   4be34:	cbnz	w0, 4bec4 <print_arm_disassembler_options@@Base+0x38c>
   4be38:	cmp	w21, #0x0
   4be3c:	sub	w21, w21, #0x1
   4be40:	b.gt	4be04 <print_arm_disassembler_options@@Base+0x2cc>
   4be44:	mov	w21, w27
   4be48:	ldr	w8, [x20, #80]
   4be4c:	tbnz	w8, #31, 4bea8 <print_arm_disassembler_options@@Base+0x370>
   4be50:	ldr	x10, [x20, #48]
   4be54:	ldr	x9, [x20, #72]
   4be58:	cbz	x10, 4be70 <print_arm_disassembler_options@@Base+0x338>
   4be5c:	ldr	x9, [x9, x8, lsl #3]
   4be60:	ldr	x11, [x9, #32]
   4be64:	cmp	x10, x11
   4be68:	b.ne	4bea8 <print_arm_disassembler_options@@Base+0x370>  // b.any
   4be6c:	b	4be74 <print_arm_disassembler_options@@Base+0x33c>
   4be70:	ldr	x9, [x9, x8, lsl #3]
   4be74:	ldrb	w10, [x9, #72]
   4be78:	mov	w11, #0x8                   	// #8
   4be7c:	bfxil	w11, w10, #0, #3
   4be80:	cmp	w11, #0xa
   4be84:	b.ne	4bea8 <print_arm_disassembler_options@@Base+0x370>  // b.any
   4be88:	ldrb	w9, [x9, #74]
   4be8c:	mov	w22, #0x1                   	// #1
   4be90:	mov	w21, w8
   4be94:	and	w9, w9, #0x3
   4be98:	cmp	w9, #0x1
   4be9c:	cset	w9, eq  // eq = none
   4bea0:	stur	w9, [x29, #-4]
   4bea4:	b	4beac <print_arm_disassembler_options@@Base+0x374>
   4bea8:	mov	w22, wzr
   4beac:	ldur	w8, [x29, #-4]
   4beb0:	stp	w8, w21, [x24, #24]
   4beb4:	ldr	x9, [x20, #240]
   4beb8:	str	x9, [x24, #32]
   4bebc:	str	w8, [x19]
   4bec0:	b	4bcd4 <print_arm_disassembler_options@@Base+0x19c>
   4bec4:	mov	w22, #0x1                   	// #1
   4bec8:	b	4beac <print_arm_disassembler_options@@Base+0x374>
   4becc:	stp	x29, x30, [sp, #-16]!
   4bed0:	ldr	w8, [x1, #172]
   4bed4:	mov	x29, sp
   4bed8:	cmp	w8, #0x4
   4bedc:	b.eq	4bf10 <print_arm_disassembler_options@@Base+0x3d8>  // b.none
   4bee0:	cmp	w8, #0x2
   4bee4:	b.eq	4bf00 <print_arm_disassembler_options@@Base+0x3c8>  // b.none
   4bee8:	cmp	w8, #0x1
   4beec:	b.ne	4bf24 <print_arm_disassembler_options@@Base+0x3ec>  // b.any
   4bef0:	ldp	x3, x0, [x1]
   4bef4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4bef8:	add	x1, x1, #0x3d0
   4befc:	b	4bf1c <print_arm_disassembler_options@@Base+0x3e4>
   4bf00:	ldp	x3, x0, [x1]
   4bf04:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4bf08:	add	x1, x1, #0x3de
   4bf0c:	b	4bf1c <print_arm_disassembler_options@@Base+0x3e4>
   4bf10:	ldp	x3, x0, [x1]
   4bf14:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4bf18:	add	x1, x1, #0x3ed
   4bf1c:	ldp	x29, x30, [sp], #16
   4bf20:	br	x3
   4bf24:	bl	35750 <abort@plt>
   4bf28:	sub	sp, sp, #0x1b0
   4bf2c:	stp	x29, x30, [sp, #336]
   4bf30:	stp	x28, x27, [sp, #352]
   4bf34:	stp	x26, x25, [sp, #368]
   4bf38:	stp	x24, x23, [sp, #384]
   4bf3c:	stp	x22, x21, [sp, #400]
   4bf40:	stp	x20, x19, [sp, #416]
   4bf44:	mov	x21, x1
   4bf48:	ldp	x1, x19, [x1]
   4bf4c:	ldr	x28, [x21, #96]
   4bf50:	add	x29, sp, #0x150
   4bf54:	mov	x20, x2
   4bf58:	mov	x22, x0
   4bf5c:	adrp	x0, 85000 <aarch64_operands@@Base+0x5c38>
   4bf60:	stur	x1, [x29, #-32]
   4bf64:	add	x0, x0, #0xfc0
   4bf68:	mov	x1, x22
   4bf6c:	mov	x2, x21
   4bf70:	mov	x3, x20
   4bf74:	mov	w4, wzr
   4bf78:	bl	51bac <print_arm_disassembler_options@@Base+0x6074>
   4bf7c:	cbnz	w0, 4bfb4 <print_arm_disassembler_options@@Base+0x47c>
   4bf80:	mov	x0, x21
   4bf84:	mov	x1, x20
   4bf88:	mov	w2, wzr
   4bf8c:	bl	5065c <print_arm_disassembler_options@@Base+0x4b24>
   4bf90:	cbnz	w0, 4bfb4 <print_arm_disassembler_options@@Base+0x47c>
   4bf94:	adrp	x0, 8f000 <aarch64_operands@@Base+0xfc38>
   4bf98:	add	x0, x0, #0x338
   4bf9c:	mov	x1, x22
   4bfa0:	mov	x2, x21
   4bfa4:	mov	x3, x20
   4bfa8:	mov	w4, wzr
   4bfac:	bl	51bac <print_arm_disassembler_options@@Base+0x6074>
   4bfb0:	cbz	w0, 4bfd4 <print_arm_disassembler_options@@Base+0x49c>
   4bfb4:	ldp	x20, x19, [sp, #416]
   4bfb8:	ldp	x22, x21, [sp, #400]
   4bfbc:	ldp	x24, x23, [sp, #384]
   4bfc0:	ldp	x26, x25, [sp, #368]
   4bfc4:	ldp	x28, x27, [sp, #352]
   4bfc8:	ldp	x29, x30, [sp, #336]
   4bfcc:	add	sp, sp, #0x1b0
   4bfd0:	ret
   4bfd4:	adrp	x9, 81000 <aarch64_operands@@Base+0x1c38>
   4bfd8:	adrp	x23, 64000 <fields@@Base+0xde84>
   4bfdc:	and	x8, x20, #0xf0000000
   4bfe0:	add	x9, x9, #0xf78
   4bfe4:	add	x23, x23, #0xbc5
   4bfe8:	mov	w10, #0xf0000000            	// #-268435456
   4bfec:	ldp	x12, x11, [x9, #24]
   4bff0:	and	x13, x11, x20
   4bff4:	cmp	x13, x12
   4bff8:	b.ne	4c044 <print_arm_disassembler_options@@Base+0x50c>  // b.any
   4bffc:	ldr	x12, [x9]
   4c000:	ldr	x13, [x28]
   4c004:	tst	x13, x12
   4c008:	b.ne	4c02c <print_arm_disassembler_options@@Base+0x4f4>  // b.any
   4c00c:	ldr	x12, [x9, #8]
   4c010:	ldr	x13, [x28, #8]
   4c014:	tst	x13, x12
   4c018:	b.ne	4c02c <print_arm_disassembler_options@@Base+0x4f4>  // b.any
   4c01c:	ldr	x12, [x9, #16]
   4c020:	ldr	x13, [x28, #16]
   4c024:	tst	x13, x12
   4c028:	b.eq	4c044 <print_arm_disassembler_options@@Base+0x50c>  // b.none
   4c02c:	cmp	x8, x10
   4c030:	b.ne	4c084 <print_arm_disassembler_options@@Base+0x54c>  // b.any
   4c034:	and	x12, x11, #0xf0000000
   4c038:	cmp	x12, x10
   4c03c:	b.eq	4c084 <print_arm_disassembler_options@@Base+0x54c>  // b.none
   4c040:	cbz	x11, 4c084 <print_arm_disassembler_options@@Base+0x54c>
   4c044:	ldr	x23, [x9, #88]
   4c048:	add	x9, x9, #0x30
   4c04c:	cbnz	x23, 4bfec <print_arm_disassembler_options@@Base+0x4b4>
   4c050:	mov	x0, x19
   4c054:	mov	w2, w20
   4c058:	ldur	x3, [x29, #-32]
   4c05c:	ldp	x20, x19, [sp, #416]
   4c060:	ldp	x22, x21, [sp, #400]
   4c064:	ldp	x24, x23, [sp, #384]
   4c068:	ldp	x26, x25, [sp, #368]
   4c06c:	ldp	x28, x27, [sp, #352]
   4c070:	ldp	x29, x30, [sp, #336]
   4c074:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c078:	add	x1, x1, #0x497
   4c07c:	add	sp, sp, #0x1b0
   4c080:	br	x3
   4c084:	lsr	x8, x20, #4
   4c088:	mov	w10, #0x4f                  	// #79
   4c08c:	and	x11, x20, #0xfffffff
   4c090:	stur	xzr, [x29, #-48]
   4c094:	stur	wzr, [x29, #-36]
   4c098:	and	x25, x20, #0xf
   4c09c:	str	x11, [sp, #120]
   4c0a0:	and	x11, x20, #0xf0
   4c0a4:	and	x10, x10, x20, lsr #16
   4c0a8:	and	x7, x8, #0x30
   4c0ac:	stur	x11, [x29, #-136]
   4c0b0:	and	w11, w20, #0xf
   4c0b4:	cmp	x25, #0xf
   4c0b8:	orr	x10, x10, x7
   4c0bc:	str	w11, [sp, #108]
   4c0c0:	mov	w12, #0x53                  	// #83
   4c0c4:	mov	w14, #0x43                  	// #67
   4c0c8:	stur	x10, [x29, #-96]
   4c0cc:	cset	w10, eq  // eq = none
   4c0d0:	tst	x20, #0x400000
   4c0d4:	ubfx	x0, x20, #16, #4
   4c0d8:	csel	w12, w14, w12, eq  // eq = none
   4c0dc:	mov	w15, #0xa                   	// #10
   4c0e0:	mov	w18, #0x8                   	// #8
   4c0e4:	adrp	x16, 65000 <fields@@Base+0xee84>
   4c0e8:	adrp	x13, 55000 <xexit@@Base+0x184c>
   4c0ec:	stur	x0, [x29, #-72]
   4c0f0:	stur	x25, [x29, #-112]
   4c0f4:	and	x25, x8, #0xf0
   4c0f8:	str	w12, [sp, #68]
   4c0fc:	cset	w12, eq  // eq = none
   4c100:	tst	x20, #0x1000000
   4c104:	sbfx	x17, x20, #23, #1
   4c108:	add	x16, x16, #0x722
   4c10c:	add	x13, x13, #0xda7
   4c110:	ubfx	x5, x20, #21, #1
   4c114:	csel	x14, x18, x15, eq  // eq = none
   4c118:	bfxil	x25, x20, #0, #4
   4c11c:	tst	x20, #0x200000
   4c120:	and	w10, w10, w12
   4c124:	and	w30, w20, #0xff
   4c128:	and	x17, x17, #0x3fffffffff000000
   4c12c:	csel	x12, x13, x16, eq  // eq = none
   4c130:	cmp	w25, #0x0
   4c134:	orr	w10, w5, w10
   4c138:	adrp	x4, 5e000 <fields@@Base+0x7e84>
   4c13c:	lsl	w15, w30, #2
   4c140:	bfxil	x17, x20, #0, #24
   4c144:	str	x12, [sp, #112]
   4c148:	add	x12, x14, x22
   4c14c:	str	w10, [sp, #12]
   4c150:	cset	w10, ne  // ne = any
   4c154:	tst	x20, #0x800000
   4c158:	mov	w11, #0x2000200             	// #33554944
   4c15c:	add	x4, x4, #0x39c
   4c160:	add	x12, x12, x17, lsl #2
   4c164:	cneg	x14, x15, eq  // eq = none
   4c168:	mov	w0, #0x1200000             	// #18874368
   4c16c:	mov	w6, #0xa00000              	// #10485760
   4c170:	stur	x12, [x29, #-144]
   4c174:	cset	w12, eq  // eq = none
   4c178:	str	x14, [sp, #96]
   4c17c:	csel	x13, x4, x13, eq  // eq = none
   4c180:	cneg	x14, x25, eq  // eq = none
   4c184:	cmp	x25, #0x0
   4c188:	and	x15, x8, #0xf000
   4c18c:	and	x16, x8, #0xfff0
   4c190:	and	x8, x20, x11
   4c194:	and	x18, x20, x6
   4c198:	stur	x13, [x29, #-88]
   4c19c:	stur	x25, [x29, #-120]
   4c1a0:	cset	w13, ne  // ne = any
   4c1a4:	str	x8, [sp, #168]
   4c1a8:	and	x8, x20, x0
   4c1ac:	cmp	x18, #0x800, lsl #12
   4c1b0:	str	x8, [sp, #160]
   4c1b4:	orr	w8, w12, w13
   4c1b8:	str	w8, [sp, #64]
   4c1bc:	cset	w8, ne  // ne = any
   4c1c0:	lsl	x1, x20, #40
   4c1c4:	add	x2, x22, #0x8
   4c1c8:	orr	w8, w8, w10
   4c1cc:	mov	w3, #0x4f0000              	// #5177344
   4c1d0:	str	w8, [sp, #16]
   4c1d4:	add	x8, x2, x1, asr #38
   4c1d8:	lsr	x9, x20, #7
   4c1dc:	str	x8, [sp, #152]
   4c1e0:	and	x8, x20, x3
   4c1e4:	stur	x8, [x29, #-80]
   4c1e8:	ubfx	w8, w9, #1, #4
   4c1ec:	bfxil	x15, x20, #0, #12
   4c1f0:	bfxil	x16, x20, #0, #4
   4c1f4:	neg	w8, w8, lsl #1
   4c1f8:	stp	x16, x15, [x29, #-160]
   4c1fc:	str	w8, [sp, #20]
   4c200:	add	x8, x2, x14
   4c204:	str	x8, [sp, #56]
   4c208:	and	x8, x20, #0xf000
   4c20c:	str	x8, [sp, #144]
   4c210:	ubfx	x8, x20, #28, #4
   4c214:	str	x8, [sp, #136]
   4c218:	ubfx	x8, x20, #12, #4
   4c21c:	str	x8, [sp, #24]
   4c220:	orr	x8, x20, #0x1000000
   4c224:	str	x8, [sp, #128]
   4c228:	mov	w8, #0x10                  	// #16
   4c22c:	ubfx	x24, x20, #16, #5
   4c230:	ubfx	x27, x20, #7, #5
   4c234:	str	x14, [sp, #88]
   4c238:	stur	x8, [x29, #-56]
   4c23c:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   4c240:	add	x8, x8, #0x9e8
   4c244:	str	x24, [sp, #40]
   4c248:	stur	x27, [x29, #-128]
   4c24c:	sub	x27, x24, x27
   4c250:	and	w10, w9, #0x1e
   4c254:	mov	x24, x8
   4c258:	add	x8, x27, #0x1
   4c25c:	str	x8, [sp, #80]
   4c260:	ror	w8, w30, w10
   4c264:	mov	w26, #0x1                   	// #1
   4c268:	stur	x30, [x29, #-104]
   4c26c:	str	x8, [sp, #48]
   4c270:	mov	w8, #0x10                  	// #16
   4c274:	str	w10, [sp, #36]
   4c278:	stur	x8, [x29, #-64]
   4c27c:	ldrb	w2, [x23]
   4c280:	cmp	w2, #0x25
   4c284:	b.eq	4c2a4 <print_arm_disassembler_options@@Base+0x76c>  // b.none
   4c288:	cbz	w2, 4cc44 <print_arm_disassembler_options@@Base+0x110c>
   4c28c:	adrp	x1, 65000 <fields@@Base+0xee84>
   4c290:	mov	x0, x19
   4c294:	add	x1, x1, #0x1b9
   4c298:	ldur	x3, [x29, #-32]
   4c29c:	blr	x3
   4c2a0:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c2a4:	ldrb	w9, [x23, #1]!
   4c2a8:	sub	w8, w9, #0x30
   4c2ac:	cmp	w8, #0x44
   4c2b0:	b.hi	4c434 <print_arm_disassembler_options@@Base+0x8fc>  // b.pmore
   4c2b4:	adr	x9, 4c2c8 <print_arm_disassembler_options@@Base+0x790>
   4c2b8:	ldrh	w10, [x24, x8, lsl #1]
   4c2bc:	add	x9, x9, x10, lsl #2
   4c2c0:	mov	w25, wzr
   4c2c4:	br	x9
   4c2c8:	sub	x2, x29, #0x18
   4c2cc:	sub	x3, x29, #0xc
   4c2d0:	mov	x0, x23
   4c2d4:	mov	x1, x20
   4c2d8:	bl	51ac4 <print_arm_disassembler_options@@Base+0x5f8c>
   4c2dc:	ldrb	w9, [x0]
   4c2e0:	mov	x23, x0
   4c2e4:	cmp	w9, #0x5f
   4c2e8:	b.gt	4c328 <print_arm_disassembler_options@@Base+0x7f0>
   4c2ec:	sub	w8, w9, #0x52
   4c2f0:	cmp	w8, #0x6
   4c2f4:	b.hi	4c3ec <print_arm_disassembler_options@@Base+0x8b4>  // b.pmore
   4c2f8:	adrp	x12, 5d000 <fields@@Base+0x6e84>
   4c2fc:	add	x12, x12, #0xa72
   4c300:	adr	x10, 4c310 <print_arm_disassembler_options@@Base+0x7d8>
   4c304:	ldrh	w11, [x12, x8, lsl #1]
   4c308:	add	x10, x10, x11, lsl #2
   4c30c:	br	x10
   4c310:	ldur	x8, [x29, #-24]
   4c314:	ldur	w9, [x29, #-36]
   4c318:	cmp	x8, #0xf
   4c31c:	csinc	w9, w9, wzr, ne  // ne = any
   4c320:	stur	w9, [x29, #-36]
   4c324:	b	4c354 <print_arm_disassembler_options@@Base+0x81c>
   4c328:	cmp	w9, #0x63
   4c32c:	b.le	4c418 <print_arm_disassembler_options@@Base+0x8e0>
   4c330:	cmp	w9, #0x64
   4c334:	b.eq	4c7e8 <print_arm_disassembler_options@@Base+0xcb0>  // b.none
   4c338:	cmp	w9, #0x72
   4c33c:	b.ne	4c7f0 <print_arm_disassembler_options@@Base+0xcb8>  // b.any
   4c340:	ldur	x8, [x29, #-24]
   4c344:	cmp	w9, #0x54
   4c348:	b.ne	4c354 <print_arm_disassembler_options@@Base+0x81c>  // b.any
   4c34c:	add	x8, x8, #0x1
   4c350:	stur	x8, [x29, #-24]
   4c354:	mov	x9, x23
   4c358:	ldrb	w10, [x9, #1]!
   4c35c:	ldp	x12, x15, [x29, #-64]
   4c360:	adrp	x14, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4c364:	adrp	x16, 81000 <aarch64_operands@@Base+0x1c38>
   4c368:	add	x16, x16, #0xaf8
   4c36c:	cmp	x12, x8
   4c370:	cset	w11, eq  // eq = none
   4c374:	cmp	w10, #0x75
   4c378:	csel	x9, x9, x23, eq  // eq = none
   4c37c:	csel	x12, x8, x12, eq  // eq = none
   4c380:	stur	x12, [x29, #-64]
   4c384:	mov	x12, x9
   4c388:	ldrb	w13, [x12, #1]!
   4c38c:	ldr	w14, [x14, #1584]
   4c390:	cset	w10, eq  // eq = none
   4c394:	cmp	x15, x8
   4c398:	and	w10, w10, w11
   4c39c:	cset	w11, eq  // eq = none
   4c3a0:	cmp	w13, #0x55
   4c3a4:	mov	w13, #0x90                  	// #144
   4c3a8:	madd	x13, x14, x13, x16
   4c3ac:	csel	x23, x12, x9, eq  // eq = none
   4c3b0:	cset	w9, eq  // eq = none
   4c3b4:	add	x12, x13, x8, lsl #3
   4c3b8:	csel	x15, x8, x15, eq  // eq = none
   4c3bc:	ldur	w8, [x29, #-36]
   4c3c0:	and	w9, w11, w9
   4c3c4:	ldr	x2, [x12, #16]
   4c3c8:	orr	w9, w10, w9
   4c3cc:	cmp	w9, #0x0
   4c3d0:	csinc	w8, w8, wzr, eq  // eq = none
   4c3d4:	stur	x15, [x29, #-56]
   4c3d8:	stur	w8, [x29, #-36]
   4c3dc:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4c3e0:	mov	x0, x19
   4c3e4:	add	x1, x1, #0xbe9
   4c3e8:	b	4c8a4 <print_arm_disassembler_options@@Base+0xd6c>
   4c3ec:	cmp	w9, #0x27
   4c3f0:	b.ne	4c83c <print_arm_disassembler_options@@Base+0xd04>  // b.any
   4c3f4:	ldur	w8, [x29, #-12]
   4c3f8:	ldur	x9, [x29, #-24]
   4c3fc:	mov	x10, #0xffffffffffffffff    	// #-1
   4c400:	add	x23, x23, #0x1
   4c404:	lsl	x8, x10, x8
   4c408:	mvn	x8, x8
   4c40c:	cmp	x9, x8
   4c410:	b.ne	4cc00 <print_arm_disassembler_options@@Base+0x10c8>  // b.any
   4c414:	b	4c42c <print_arm_disassembler_options@@Base+0x8f4>
   4c418:	cmp	w9, #0x60
   4c41c:	b.ne	4c884 <print_arm_disassembler_options@@Base+0xd4c>  // b.any
   4c420:	ldur	x8, [x29, #-24]
   4c424:	add	x23, x23, #0x1
   4c428:	cbnz	x8, 4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c42c:	ldrb	w2, [x23]
   4c430:	b	4c28c <print_arm_disassembler_options@@Base+0x754>
   4c434:	cmp	w9, #0x25
   4c438:	b.ne	4cc8c <print_arm_disassembler_options@@Base+0x1154>  // b.any
   4c43c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c440:	mov	x0, x19
   4c444:	add	x1, x1, #0x3fb
   4c448:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4c44c:	ldr	x8, [x21, #120]
   4c450:	ldur	x24, [x29, #-144]
   4c454:	b	4c4f4 <print_arm_disassembler_options@@Base+0x9bc>
   4c458:	mov	x0, x19
   4c45c:	tbnz	x27, #63, 4c9d4 <print_arm_disassembler_options@@Base+0xe9c>
   4c460:	ldur	x2, [x29, #-128]
   4c464:	ldr	x3, [sp, #80]
   4c468:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c46c:	add	x1, x1, #0x470
   4c470:	b	4c9e4 <print_arm_disassembler_options@@Base+0xeac>
   4c474:	mov	w25, #0x1                   	// #1
   4c478:	ldur	x8, [x29, #-80]
   4c47c:	cmp	x8, #0x4f0, lsl #12
   4c480:	b.ne	4c5e8 <print_arm_disassembler_options@@Base+0xab0>  // b.any
   4c484:	tbnz	w20, #24, 4c8b0 <print_arm_disassembler_options@@Base+0xd78>
   4c488:	ldur	x2, [x29, #-88]
   4c48c:	ldur	x4, [x29, #-32]
   4c490:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c494:	mov	x0, x19
   4c498:	add	x1, x1, #0x415
   4c49c:	ldur	x3, [x29, #-120]
   4c4a0:	blr	x4
   4c4a4:	ldur	w8, [x29, #-36]
   4c4a8:	cmp	w25, #0x0
   4c4ac:	csinc	w8, w8, wzr, ne  // ne = any
   4c4b0:	b	4caec <print_arm_disassembler_options@@Base+0xfb4>
   4c4b4:	ldur	x8, [x29, #-136]
   4c4b8:	cmp	x8, #0x60
   4c4bc:	b.ne	4c8d8 <print_arm_disassembler_options@@Base+0xda0>  // b.any
   4c4c0:	ldur	x8, [x29, #-112]
   4c4c4:	mov	x0, x19
   4c4c8:	cmp	x8, #0xf
   4c4cc:	b.ne	4ca4c <print_arm_disassembler_options@@Base+0xf14>  // b.any
   4c4d0:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4c4d4:	add	x1, x1, #0x90b
   4c4d8:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4c4dc:	mov	x0, x22
   4c4e0:	mov	x1, x21
   4c4e4:	mov	x2, x20
   4c4e8:	b	4c79c <print_arm_disassembler_options@@Base+0xc64>
   4c4ec:	ldr	x8, [x21, #120]
   4c4f0:	ldr	x24, [sp, #152]
   4c4f4:	mov	x0, x24
   4c4f8:	mov	x1, x21
   4c4fc:	blr	x8
   4c500:	mov	w8, #0x2                   	// #2
   4c504:	strb	w26, [x21, #196]
   4c508:	str	w8, [x21, #200]
   4c50c:	str	x24, [x21, #208]
   4c510:	b	4c900 <print_arm_disassembler_options@@Base+0xdc8>
   4c514:	str	x27, [sp, #72]
   4c518:	ldur	x2, [x29, #-32]
   4c51c:	ldur	w24, [x29, #-36]
   4c520:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c524:	mov	x0, x19
   4c528:	add	x1, x1, #0x429
   4c52c:	blr	x2
   4c530:	mov	x25, xzr
   4c534:	mov	w27, wzr
   4c538:	lsl	w8, w26, w25
   4c53c:	sxtw	x8, w8
   4c540:	tst	x8, x20
   4c544:	b.eq	4c59c <print_arm_disassembler_options@@Base+0xa64>  // b.none
   4c548:	ldur	x3, [x29, #-32]
   4c54c:	cbz	w27, 4c568 <print_arm_disassembler_options@@Base+0xa30>
   4c550:	ldur	x2, [x29, #-32]
   4c554:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4c558:	mov	x0, x19
   4c55c:	add	x1, x1, #0x31b
   4c560:	blr	x2
   4c564:	ldur	x3, [x29, #-32]
   4c568:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4c56c:	ldr	w8, [x8, #1584]
   4c570:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4c574:	mov	w9, #0x90                  	// #144
   4c578:	add	x10, x10, #0xaf8
   4c57c:	madd	x8, x8, x9, x10
   4c580:	add	x8, x8, x25, lsl #3
   4c584:	ldr	x2, [x8, #16]
   4c588:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4c58c:	mov	x0, x19
   4c590:	add	x1, x1, #0xbe9
   4c594:	blr	x3
   4c598:	mov	w27, #0x1                   	// #1
   4c59c:	add	x25, x25, #0x1
   4c5a0:	cmp	x25, #0x10
   4c5a4:	b.ne	4c538 <print_arm_disassembler_options@@Base+0xa00>  // b.any
   4c5a8:	ldur	x2, [x29, #-32]
   4c5ac:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c5b0:	mov	x0, x19
   4c5b4:	add	x1, x1, #0x4ec
   4c5b8:	blr	x2
   4c5bc:	cmp	w27, #0x0
   4c5c0:	csinc	w24, w24, wzr, ne  // ne = any
   4c5c4:	stur	w24, [x29, #-36]
   4c5c8:	ldr	x27, [sp, #72]
   4c5cc:	b	4c900 <print_arm_disassembler_options@@Base+0xdc8>
   4c5d0:	tbnz	w20, #25, 4c90c <print_arm_disassembler_options@@Base+0xdd4>
   4c5d4:	ldur	x1, [x29, #-32]
   4c5d8:	mov	w3, #0x1                   	// #1
   4c5dc:	mov	x0, x20
   4c5e0:	mov	x2, x19
   4c5e4:	b	4c7b8 <print_arm_disassembler_options@@Base+0xc80>
   4c5e8:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4c5ec:	ldr	w8, [x8, #1584]
   4c5f0:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4c5f4:	mov	w9, #0x90                  	// #144
   4c5f8:	add	x10, x10, #0xaf8
   4c5fc:	madd	x8, x8, x9, x10
   4c600:	ldur	x9, [x29, #-72]
   4c604:	ldur	x3, [x29, #-32]
   4c608:	adrp	x1, 61000 <fields@@Base+0xae84>
   4c60c:	mov	x0, x19
   4c610:	add	x8, x8, x9, lsl #3
   4c614:	ldr	x2, [x8, #16]
   4c618:	add	x1, x1, #0x777
   4c61c:	blr	x3
   4c620:	tbnz	w20, #24, 4c944 <print_arm_disassembler_options@@Base+0xe0c>
   4c624:	tbz	w20, #22, 4ca5c <print_arm_disassembler_options@@Base+0xf24>
   4c628:	ldur	x2, [x29, #-88]
   4c62c:	ldur	x4, [x29, #-32]
   4c630:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c634:	mov	x0, x19
   4c638:	add	x1, x1, #0x418
   4c63c:	ldur	x3, [x29, #-120]
   4c640:	blr	x4
   4c644:	ldr	x8, [sp, #88]
   4c648:	stur	x8, [x29, #-48]
   4c64c:	cbz	w25, 4cab8 <print_arm_disassembler_options@@Base+0xf80>
   4c650:	ldr	x8, [sp, #88]
   4c654:	b	4cc3c <print_arm_disassembler_options@@Base+0x1104>
   4c658:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4c65c:	ldr	w8, [x8, #1584]
   4c660:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4c664:	mov	w9, #0x90                  	// #144
   4c668:	add	x10, x10, #0xaf8
   4c66c:	madd	x8, x8, x9, x10
   4c670:	ldur	x9, [x29, #-72]
   4c674:	ldur	x3, [x29, #-32]
   4c678:	adrp	x1, 61000 <fields@@Base+0xae84>
   4c67c:	mov	x0, x19
   4c680:	add	x8, x8, x9, lsl #3
   4c684:	ldr	x2, [x8, #16]
   4c688:	add	x1, x1, #0x777
   4c68c:	blr	x3
   4c690:	tbnz	w20, #24, 4c97c <print_arm_disassembler_options@@Base+0xe44>
   4c694:	ldur	x2, [x29, #-32]
   4c698:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c69c:	mov	x0, x19
   4c6a0:	add	x1, x1, #0x4be
   4c6a4:	blr	x2
   4c6a8:	tbnz	w20, #21, 4cacc <print_arm_disassembler_options@@Base+0xf94>
   4c6ac:	ldur	x24, [x29, #-104]
   4c6b0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c6b4:	mov	x0, x19
   4c6b8:	add	x1, x1, #0x43c
   4c6bc:	b	4c73c <print_arm_disassembler_options@@Base+0xc04>
   4c6c0:	ldr	x8, [sp, #168]
   4c6c4:	cmp	x8, #0x200
   4c6c8:	b.ne	4c9a8 <print_arm_disassembler_options@@Base+0xe70>  // b.any
   4c6cc:	ldur	x24, [x29, #-96]
   4c6d0:	mov	w0, w24
   4c6d4:	bl	518ac <print_arm_disassembler_options@@Base+0x5d74>
   4c6d8:	cbnz	x0, 4c8e8 <print_arm_disassembler_options@@Base+0xdb0>
   4c6dc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c6e0:	mov	x0, x19
   4c6e4:	add	x1, x1, #0x443
   4c6e8:	mov	x2, x24
   4c6ec:	b	4c8f8 <print_arm_disassembler_options@@Base+0xdc0>
   4c6f0:	ldur	x24, [x29, #-152]
   4c6f4:	ldur	x3, [x29, #-32]
   4c6f8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c6fc:	mov	x0, x19
   4c700:	add	x1, x1, #0x476
   4c704:	mov	x2, x24
   4c708:	blr	x3
   4c70c:	b	4c748 <print_arm_disassembler_options@@Base+0xc10>
   4c710:	ldr	x8, [sp, #136]
   4c714:	cmp	x8, #0xe
   4c718:	b.eq	4cc00 <print_arm_disassembler_options@@Base+0x10c8>  // b.none
   4c71c:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4c720:	add	x9, x9, #0xf38
   4c724:	ldr	x2, [x9, x8, lsl #3]
   4c728:	b	4c3dc <print_arm_disassembler_options@@Base+0x8a4>
   4c72c:	ldur	x24, [x29, #-160]
   4c730:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4c734:	mov	x0, x19
   4c738:	add	x1, x1, #0x3d4
   4c73c:	ldur	x3, [x29, #-32]
   4c740:	mov	w2, w24
   4c744:	blr	x3
   4c748:	stur	x24, [x29, #-48]
   4c74c:	b	4c900 <print_arm_disassembler_options@@Base+0xdc8>
   4c750:	ldr	x8, [sp, #144]
   4c754:	cmp	x8, #0xf, lsl #12
   4c758:	b.ne	4cc00 <print_arm_disassembler_options@@Base+0x10c8>  // b.any
   4c75c:	ldrb	w8, [x28, #1]
   4c760:	tbnz	w8, #4, 4cae8 <print_arm_disassembler_options@@Base+0xfb0>
   4c764:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4c768:	mov	x0, x19
   4c76c:	add	x1, x1, #0xe58
   4c770:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4c774:	ldr	x8, [sp, #160]
   4c778:	cmp	x8, #0x200, lsl #12
   4c77c:	b.ne	4cc00 <print_arm_disassembler_options@@Base+0x10c8>  // b.any
   4c780:	adrp	x1, 5b000 <fields@@Base+0x4e84>
   4c784:	mov	x0, x19
   4c788:	add	x1, x1, #0xf57
   4c78c:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4c790:	ldr	x2, [sp, #128]
   4c794:	mov	x0, x22
   4c798:	mov	x1, x21
   4c79c:	bl	5144c <print_arm_disassembler_options@@Base+0x5914>
   4c7a0:	stur	x0, [x29, #-48]
   4c7a4:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c7a8:	ldur	x1, [x29, #-32]
   4c7ac:	mov	x0, x20
   4c7b0:	mov	x2, x19
   4c7b4:	mov	w3, wzr
   4c7b8:	bl	516f8 <print_arm_disassembler_options@@Base+0x5bc0>
   4c7bc:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c7c0:	ldur	x8, [x29, #-24]
   4c7c4:	add	x2, x8, #0x1
   4c7c8:	b	4c894 <print_arm_disassembler_options@@Base+0xd5c>
   4c7cc:	ldur	x8, [x29, #-24]
   4c7d0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c7d4:	mov	x0, x19
   4c7d8:	add	x1, x1, #0x46a
   4c7dc:	stur	x8, [x29, #-48]
   4c7e0:	and	x2, x8, #0xf
   4c7e4:	b	4c8a4 <print_arm_disassembler_options@@Base+0xd6c>
   4c7e8:	ldur	x2, [x29, #-24]
   4c7ec:	b	4c894 <print_arm_disassembler_options@@Base+0xd5c>
   4c7f0:	cmp	w9, #0x78
   4c7f4:	b.ne	4cc8c <print_arm_disassembler_options@@Base+0x1154>  // b.any
   4c7f8:	ldp	x3, x2, [x29, #-32]
   4c7fc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c800:	mov	x0, x19
   4c804:	add	x1, x1, #0x3f3
   4c808:	blr	x3
   4c80c:	ldr	x8, [sp, #120]
   4c810:	mov	w9, #0x1                   	// #1
   4c814:	movk	w9, #0xff0, lsl #16
   4c818:	cmp	x8, x9
   4c81c:	b.eq	4c9f0 <print_arm_disassembler_options@@Base+0xeb8>  // b.none
   4c820:	mov	w9, #0xff00000             	// #267386880
   4c824:	cmp	x8, x9
   4c828:	b.ne	4cc00 <print_arm_disassembler_options@@Base+0x10c8>  // b.any
   4c82c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c830:	mov	x0, x19
   4c834:	add	x1, x1, #0x457
   4c838:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4c83c:	cmp	w9, #0x3f
   4c840:	b.ne	4cc8c <print_arm_disassembler_options@@Base+0x1154>  // b.any
   4c844:	ldur	w8, [x29, #-12]
   4c848:	ldur	w9, [x29, #-24]
   4c84c:	mov	w25, #0x1                   	// #1
   4c850:	ldur	x3, [x29, #-32]
   4c854:	lsl	w8, w25, w8
   4c858:	sub	w8, w8, w9
   4c85c:	ldrb	w2, [x23, w8, sxtw]
   4c860:	adrp	x1, 65000 <fields@@Base+0xee84>
   4c864:	mov	x0, x19
   4c868:	add	x1, x1, #0x1b9
   4c86c:	blr	x3
   4c870:	ldur	w8, [x29, #-12]
   4c874:	mov	w26, #0x1                   	// #1
   4c878:	lsl	w8, w25, w8
   4c87c:	add	x23, x23, w8, sxtw
   4c880:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c884:	cmp	w9, #0x62
   4c888:	b.ne	4cc8c <print_arm_disassembler_options@@Base+0x1154>  // b.any
   4c88c:	ldur	x8, [x29, #-24]
   4c890:	lsl	x2, x8, #3
   4c894:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4c898:	mov	x0, x19
   4c89c:	add	x1, x1, #0xc2b
   4c8a0:	stur	x2, [x29, #-48]
   4c8a4:	ldur	x3, [x29, #-32]
   4c8a8:	blr	x3
   4c8ac:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c8b0:	ldur	x4, [x29, #-32]
   4c8b4:	ldr	w8, [sp, #64]
   4c8b8:	cbz	w8, 4caf4 <print_arm_disassembler_options@@Base+0xfbc>
   4c8bc:	ldur	x2, [x29, #-88]
   4c8c0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c8c4:	mov	x0, x19
   4c8c8:	add	x1, x1, #0x3fe
   4c8cc:	ldur	x3, [x29, #-120]
   4c8d0:	blr	x4
   4c8d4:	b	4cb04 <print_arm_disassembler_options@@Base+0xfcc>
   4c8d8:	ldr	w24, [sp, #108]
   4c8dc:	mov	w0, w24
   4c8e0:	bl	51a9c <print_arm_disassembler_options@@Base+0x5f64>
   4c8e4:	cbz	x0, 4cc08 <print_arm_disassembler_options@@Base+0x10d0>
   4c8e8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4c8ec:	mov	x2, x0
   4c8f0:	mov	x0, x19
   4c8f4:	add	x1, x1, #0xbe9
   4c8f8:	ldur	x3, [x29, #-32]
   4c8fc:	blr	x3
   4c900:	adrp	x24, 5d000 <fields@@Base+0x6e84>
   4c904:	add	x24, x24, #0x9e8
   4c908:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c90c:	ldr	x25, [sp, #48]
   4c910:	mov	w8, wzr
   4c914:	mov	w9, #0xfffffffe            	// #-2
   4c918:	add	w9, w9, #0x2
   4c91c:	and	w10, w8, #0x1e
   4c920:	lsl	w11, w25, w9
   4c924:	lsr	w10, w25, w10
   4c928:	orr	w10, w10, w11
   4c92c:	cmp	w10, #0x100
   4c930:	b.cc	4ca00 <print_arm_disassembler_options@@Base+0xec8>  // b.lo, b.ul, b.last
   4c934:	cmp	w9, #0x1e
   4c938:	sub	w8, w8, #0x2
   4c93c:	b.cc	4c918 <print_arm_disassembler_options@@Base+0xde0>  // b.lo, b.ul, b.last
   4c940:	b	4ca28 <print_arm_disassembler_options@@Base+0xef0>
   4c944:	ldur	x9, [x29, #-112]
   4c948:	tbz	w20, #22, 4cb18 <print_arm_disassembler_options@@Base+0xfe0>
   4c94c:	ldr	w8, [sp, #16]
   4c950:	cbz	w8, 4c970 <print_arm_disassembler_options@@Base+0xe38>
   4c954:	ldur	x2, [x29, #-88]
   4c958:	ldur	x4, [x29, #-32]
   4c95c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c960:	mov	x0, x19
   4c964:	add	x1, x1, #0x419
   4c968:	ldur	x3, [x29, #-120]
   4c96c:	blr	x4
   4c970:	ldr	x8, [sp, #88]
   4c974:	stur	x8, [x29, #-48]
   4c978:	b	4cb90 <print_arm_disassembler_options@@Base+0x1058>
   4c97c:	ldur	x8, [x29, #-104]
   4c980:	cbz	w8, 4cc24 <print_arm_disassembler_options@@Base+0x10ec>
   4c984:	ldr	x24, [sp, #96]
   4c988:	ldr	x3, [sp, #112]
   4c98c:	ldur	x4, [x29, #-32]
   4c990:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c994:	mov	x0, x19
   4c998:	add	x1, x1, #0x433
   4c99c:	mov	w2, w24
   4c9a0:	blr	x4
   4c9a4:	b	4c748 <print_arm_disassembler_options@@Base+0xc10>
   4c9a8:	ldr	w2, [sp, #68]
   4c9ac:	ldur	x3, [x29, #-32]
   4c9b0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c9b4:	mov	x0, x19
   4c9b8:	add	x1, x1, #0x450
   4c9bc:	blr	x3
   4c9c0:	tbnz	w20, #19, 4cba4 <print_arm_disassembler_options@@Base+0x106c>
   4c9c4:	tbnz	w20, #18, 4cbbc <print_arm_disassembler_options@@Base+0x1084>
   4c9c8:	tbnz	w20, #17, 4cbd4 <print_arm_disassembler_options@@Base+0x109c>
   4c9cc:	tbz	w20, #16, 4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c9d0:	b	4cbec <print_arm_disassembler_options@@Base+0x10b4>
   4c9d4:	ldur	x2, [x29, #-128]
   4c9d8:	ldr	x3, [sp, #40]
   4c9dc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c9e0:	add	x1, x1, #0x47b
   4c9e4:	ldur	x4, [x29, #-32]
   4c9e8:	blr	x4
   4c9ec:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4c9f0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4c9f4:	mov	x0, x19
   4c9f8:	add	x1, x1, #0x45e
   4c9fc:	b	4cbf8 <print_arm_disassembler_options@@Base+0x10c0>
   4ca00:	ldr	w9, [sp, #20]
   4ca04:	cmp	w9, w8
   4ca08:	b.ne	4ca28 <print_arm_disassembler_options@@Base+0xef0>  // b.any
   4ca0c:	ldur	x3, [x29, #-32]
   4ca10:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4ca14:	mov	x0, x19
   4ca18:	add	x1, x1, #0xe96
   4ca1c:	mov	w2, w25
   4ca20:	blr	x3
   4ca24:	b	4ca44 <print_arm_disassembler_options@@Base+0xf0c>
   4ca28:	ldr	w3, [sp, #36]
   4ca2c:	ldur	x4, [x29, #-32]
   4ca30:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ca34:	mov	x0, x19
   4ca38:	add	x1, x1, #0x42b
   4ca3c:	ldur	x2, [x29, #-104]
   4ca40:	blr	x4
   4ca44:	stur	x25, [x29, #-48]
   4ca48:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4ca4c:	ldr	w2, [sp, #108]
   4ca50:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4ca54:	add	x1, x1, #0xe96
   4ca58:	b	4c298 <print_arm_disassembler_options@@Base+0x760>
   4ca5c:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4ca60:	ldr	w8, [x8, #1584]
   4ca64:	ldur	x24, [x29, #-112]
   4ca68:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4ca6c:	mov	w9, #0x90                  	// #144
   4ca70:	add	x10, x10, #0xaf8
   4ca74:	madd	x8, x8, x9, x10
   4ca78:	add	x8, x8, x24, lsl #3
   4ca7c:	ldr	x3, [x8, #16]
   4ca80:	ldur	x2, [x29, #-88]
   4ca84:	ldur	x4, [x29, #-32]
   4ca88:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ca8c:	mov	x0, x19
   4ca90:	add	x1, x1, #0x421
   4ca94:	blr	x4
   4ca98:	cbnz	w25, 4c900 <print_arm_disassembler_options@@Base+0xdc8>
   4ca9c:	ldr	x8, [sp, #24]
   4caa0:	cmp	x24, x8
   4caa4:	ldur	w8, [x29, #-36]
   4caa8:	adrp	x24, 5d000 <fields@@Base+0x6e84>
   4caac:	add	x24, x24, #0x9e8
   4cab0:	csinc	w8, w8, wzr, ne  // ne = any
   4cab4:	stur	w8, [x29, #-36]
   4cab8:	ldr	w8, [sp, #12]
   4cabc:	cmp	w8, #0x0
   4cac0:	ldur	w8, [x29, #-36]
   4cac4:	csinc	w8, w8, wzr, eq  // eq = none
   4cac8:	b	4caec <print_arm_disassembler_options@@Base+0xfb4>
   4cacc:	ldur	x8, [x29, #-104]
   4cad0:	cbz	w8, 4cc38 <print_arm_disassembler_options@@Base+0x1100>
   4cad4:	ldr	x24, [sp, #96]
   4cad8:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4cadc:	mov	x0, x19
   4cae0:	add	x1, x1, #0xe94
   4cae4:	b	4c73c <print_arm_disassembler_options@@Base+0xc04>
   4cae8:	mov	w8, #0x1                   	// #1
   4caec:	stur	w8, [x29, #-36]
   4caf0:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4caf4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4caf8:	mov	x0, x19
   4cafc:	add	x1, x1, #0x40d
   4cb00:	blr	x4
   4cb04:	ldr	x8, [x21, #120]
   4cb08:	ldr	x0, [sp, #56]
   4cb0c:	mov	x1, x21
   4cb10:	blr	x8
   4cb14:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4cb18:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4cb1c:	ldr	w8, [x8, #1584]
   4cb20:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   4cb24:	mov	w10, #0x90                  	// #144
   4cb28:	add	x11, x11, #0xaf8
   4cb2c:	madd	x8, x8, x10, x11
   4cb30:	add	x8, x8, x9, lsl #3
   4cb34:	ldr	x3, [x8, #16]
   4cb38:	str	x27, [sp, #72]
   4cb3c:	and	x8, x20, #0x200000
   4cb40:	ldur	w27, [x29, #-36]
   4cb44:	str	x8, [sp]
   4cb48:	ldur	x2, [x29, #-88]
   4cb4c:	ldur	x4, [x29, #-32]
   4cb50:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4cb54:	mov	x0, x19
   4cb58:	add	x1, x1, #0x422
   4cb5c:	mov	x24, x9
   4cb60:	blr	x4
   4cb64:	ldr	x8, [sp, #24]
   4cb68:	ldr	x9, [sp]
   4cb6c:	cmp	x24, x8
   4cb70:	csinc	w8, w27, wzr, ne  // ne = any
   4cb74:	cmp	w25, #0x0
   4cb78:	ccmp	x9, #0x0, #0x4, eq  // eq = none
   4cb7c:	csel	w27, w27, w8, eq  // eq = none
   4cb80:	stur	w27, [x29, #-36]
   4cb84:	ldr	x27, [sp, #72]
   4cb88:	adrp	x24, 5d000 <fields@@Base+0x6e84>
   4cb8c:	add	x24, x24, #0x9e8
   4cb90:	ldr	x2, [sp, #112]
   4cb94:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4cb98:	mov	x0, x19
   4cb9c:	add	x1, x1, #0x438
   4cba0:	b	4c8a4 <print_arm_disassembler_options@@Base+0xd6c>
   4cba4:	ldur	x2, [x29, #-32]
   4cba8:	adrp	x1, 65000 <fields@@Base+0xee84>
   4cbac:	mov	x0, x19
   4cbb0:	add	x1, x1, #0x20c
   4cbb4:	blr	x2
   4cbb8:	tbz	w20, #18, 4c9c8 <print_arm_disassembler_options@@Base+0xe90>
   4cbbc:	ldur	x2, [x29, #-32]
   4cbc0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4cbc4:	mov	x0, x19
   4cbc8:	add	x1, x1, #0xbea
   4cbcc:	blr	x2
   4cbd0:	tbz	w20, #17, 4c9cc <print_arm_disassembler_options@@Base+0xe94>
   4cbd4:	ldur	x2, [x29, #-32]
   4cbd8:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   4cbdc:	mov	x0, x19
   4cbe0:	add	x1, x1, #0x3a2
   4cbe4:	blr	x2
   4cbe8:	tbz	w20, #16, 4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4cbec:	adrp	x1, 65000 <fields@@Base+0xee84>
   4cbf0:	mov	x0, x19
   4cbf4:	add	x1, x1, #0x1ba
   4cbf8:	ldur	x2, [x29, #-32]
   4cbfc:	blr	x2
   4cc00:	add	x23, x23, #0x1
   4cc04:	b	4c27c <print_arm_disassembler_options@@Base+0x744>
   4cc08:	ldur	x3, [x29, #-32]
   4cc0c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4cc10:	mov	x0, x19
   4cc14:	add	x1, x1, #0xe96
   4cc18:	mov	w2, w24
   4cc1c:	blr	x3
   4cc20:	b	4c900 <print_arm_disassembler_options@@Base+0xdc8>
   4cc24:	ldur	x2, [x29, #-32]
   4cc28:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4cc2c:	mov	x0, x19
   4cc30:	add	x1, x1, #0x4be
   4cc34:	blr	x2
   4cc38:	ldr	x8, [sp, #96]
   4cc3c:	stur	x8, [x29, #-48]
   4cc40:	b	4cc00 <print_arm_disassembler_options@@Base+0x10c8>
   4cc44:	ldur	x9, [x29, #-48]
   4cc48:	add	x8, x9, #0x10
   4cc4c:	cmp	x8, #0x31
   4cc50:	b.cc	4cc6c <print_arm_disassembler_options@@Base+0x1134>  // b.lo, b.ul, b.last
   4cc54:	ldur	x3, [x29, #-32]
   4cc58:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4cc5c:	and	x2, x9, #0xffffffff
   4cc60:	add	x1, x1, #0x48e
   4cc64:	mov	x0, x19
   4cc68:	blr	x3
   4cc6c:	ldur	w8, [x29, #-36]
   4cc70:	cbz	w8, 4bfb4 <print_arm_disassembler_options@@Base+0x47c>
   4cc74:	ldur	x2, [x29, #-32]
   4cc78:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4cc7c:	add	x1, x1, #0xa86
   4cc80:	mov	x0, x19
   4cc84:	blr	x2
   4cc88:	b	4bfb4 <print_arm_disassembler_options@@Base+0x47c>
   4cc8c:	bl	35750 <abort@plt>
   4cc90:	sub	sp, sp, #0xd0
   4cc94:	stp	x29, x30, [sp, #112]
   4cc98:	stp	x28, x27, [sp, #128]
   4cc9c:	stp	x26, x25, [sp, #144]
   4cca0:	stp	x24, x23, [sp, #160]
   4cca4:	stp	x22, x21, [sp, #176]
   4cca8:	stp	x20, x19, [sp, #192]
   4ccac:	ldp	x3, x19, [x1]
   4ccb0:	mov	w8, #0xff87                	// #65415
   4ccb4:	and	x8, x2, x8
   4ccb8:	mov	w9, #0x4784                	// #18308
   4ccbc:	add	x29, sp, #0x70
   4ccc0:	mov	x20, x2
   4ccc4:	cmp	x8, x9
   4ccc8:	stur	x1, [x29, #-24]
   4cccc:	b.ne	4ccdc <print_arm_disassembler_options@@Base+0x11a4>  // b.any
   4ccd0:	adrp	x27, 66000 <fields@@Base+0xfe84>
   4ccd4:	add	x27, x27, #0xc51
   4ccd8:	b	4cd00 <print_arm_disassembler_options@@Base+0x11c8>
   4ccdc:	adrp	x8, 8f000 <aarch64_operands@@Base+0xfc38>
   4cce0:	add	x8, x8, #0x718
   4cce4:	ldr	x27, [x8, #8]
   4cce8:	cbz	x27, 4d3c4 <print_arm_disassembler_options@@Base+0x188c>
   4ccec:	ldrh	w9, [x8, #2]
   4ccf0:	ldrh	w10, [x8], #40
   4ccf4:	and	x9, x9, x20
   4ccf8:	cmp	x9, x10
   4ccfc:	b.ne	4cce4 <print_arm_disassembler_options@@Base+0x11ac>  // b.any
   4cd00:	ubfx	x16, x20, #3, #4
   4cd04:	mov	w9, #0x1f                  	// #31
   4cd08:	stur	x16, [x29, #-40]
   4cd0c:	and	w16, w20, #0xff
   4cd10:	ubfx	x8, x20, #6, #5
   4cd14:	mov	w10, #0x20                  	// #32
   4cd18:	stur	w16, [x29, #-44]
   4cd1c:	and	w16, w20, #0x7
   4cd20:	tst	x9, x20, lsr #6
   4cd24:	lsr	x11, x20, #2
   4cd28:	ubfx	x14, x20, #8, #1
   4cd2c:	stur	w16, [x29, #-48]
   4cd30:	ubfx	x16, x20, #4, #4
   4cd34:	csel	x8, x10, x8, eq  // eq = none
   4cd38:	stur	xzr, [x29, #-16]
   4cd3c:	add	x15, x0, #0x4
   4cd40:	lsr	x12, x20, #3
   4cd44:	stur	x14, [x29, #-32]
   4cd48:	stp	x8, x16, [sp, #48]
   4cd4c:	and	x8, x11, #0x3e
   4cd50:	and	x9, x12, #0x40
   4cd54:	add	x8, x15, x8
   4cd58:	ubfx	x13, x20, #8, #3
   4cd5c:	mov	w22, #0x1                   	// #1
   4cd60:	lsr	x14, x20, #4
   4cd64:	add	x8, x8, x9
   4cd68:	str	x8, [sp, #40]
   4cd6c:	lsl	w8, w22, w13
   4cd70:	and	x9, x14, #0x8
   4cd74:	adrp	x25, 66000 <fields@@Base+0xfe84>
   4cd78:	adrp	x23, 5b000 <fields@@Base+0x4e84>
   4cd7c:	and	x8, x8, x20
   4cd80:	bfxil	x9, x20, #0, #3
   4cd84:	mov	w24, #0xa                   	// #10
   4cd88:	add	x25, x25, #0xbe9
   4cd8c:	add	x23, x23, #0xf57
   4cd90:	stp	x8, x9, [sp, #24]
   4cd94:	and	x8, x15, #0xfffffffffffffffc
   4cd98:	stp	x8, x15, [sp, #8]
   4cd9c:	stur	x3, [x29, #-8]
   4cda0:	ldrb	w2, [x27]
   4cda4:	cmp	w2, #0x25
   4cda8:	b.eq	4cdd0 <print_arm_disassembler_options@@Base+0x1298>  // b.none
   4cdac:	cbz	w2, 4d368 <print_arm_disassembler_options@@Base+0x1830>
   4cdb0:	ldur	x3, [x29, #-8]
   4cdb4:	adrp	x1, 65000 <fields@@Base+0xee84>
   4cdb8:	mov	x0, x19
   4cdbc:	add	x1, x1, #0x1b9
   4cdc0:	blr	x3
   4cdc4:	ldur	x3, [x29, #-8]
   4cdc8:	mov	x28, x27
   4cdcc:	b	4d298 <print_arm_disassembler_options@@Base+0x1760>
   4cdd0:	mov	x28, x27
   4cdd4:	ldrb	w9, [x28, #1]!
   4cdd8:	cmp	w9, #0x72
   4cddc:	b.gt	4cf60 <print_arm_disassembler_options@@Base+0x1428>
   4cde0:	sub	w8, w9, #0x30
   4cde4:	cmp	w8, #0x33
   4cde8:	b.hi	4d028 <print_arm_disassembler_options@@Base+0x14f0>  // b.pmore
   4cdec:	adrp	x12, 5d000 <fields@@Base+0x6e84>
   4cdf0:	add	x12, x12, #0xa80
   4cdf4:	adr	x10, 4ce10 <print_arm_disassembler_options@@Base+0x12d8>
   4cdf8:	ldrh	w11, [x12, x8, lsl #1]
   4cdfc:	add	x10, x10, x11, lsl #2
   4ce00:	mov	w0, wzr
   4ce04:	mov	w26, wzr
   4ce08:	mov	w21, wzr
   4ce0c:	br	x10
   4ce10:	ldrb	w9, [x27, #2]!
   4ce14:	sub	w10, w9, #0x30
   4ce18:	cmp	w10, #0x9
   4ce1c:	b.hi	4ce44 <print_arm_disassembler_options@@Base+0x130c>  // b.pmore
   4ce20:	ldrb	w10, [x27, #1]!
   4ce24:	mul	w8, w8, w24
   4ce28:	add	w8, w8, w9, uxtb
   4ce2c:	sub	w8, w8, #0x30
   4ce30:	sub	w9, w10, #0x30
   4ce34:	cmp	w9, #0xa
   4ce38:	mov	w9, w10
   4ce3c:	b.cc	4ce20 <print_arm_disassembler_options@@Base+0x12e8>  // b.lo, b.ul, b.last
   4ce40:	b	4ce48 <print_arm_disassembler_options@@Base+0x1310>
   4ce44:	mov	w10, w9
   4ce48:	cmp	w10, #0x27
   4ce4c:	b.eq	4cf30 <print_arm_disassembler_options@@Base+0x13f8>  // b.none
   4ce50:	cmp	w10, #0x3f
   4ce54:	b.eq	4cf14 <print_arm_disassembler_options@@Base+0x13dc>  // b.none
   4ce58:	cmp	w10, #0x2d
   4ce5c:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4ce60:	ldrb	w9, [x27, #1]!
   4ce64:	sub	w10, w9, #0x30
   4ce68:	cmp	w10, #0x9
   4ce6c:	b.hi	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.pmore
   4ce70:	mov	w10, wzr
   4ce74:	mov	x28, x27
   4ce78:	mul	w10, w10, w24
   4ce7c:	add	w10, w10, w9, uxtb
   4ce80:	ldrb	w9, [x28, #1]!
   4ce84:	sub	w10, w10, #0x30
   4ce88:	sub	w11, w9, #0x30
   4ce8c:	cmp	w11, #0xa
   4ce90:	b.cc	4ce78 <print_arm_disassembler_options@@Base+0x1340>  // b.lo, b.ul, b.last
   4ce94:	cbz	w10, 4d3f4 <print_arm_disassembler_options@@Base+0x18bc>
   4ce98:	asr	x11, x20, x8
   4ce9c:	sub	w8, w10, w8
   4cea0:	mov	w12, #0x2                   	// #2
   4cea4:	lsl	w8, w12, w8
   4cea8:	sub	w8, w8, #0x1
   4ceac:	sxtw	x8, w8
   4ceb0:	cmp	w9, #0x62
   4ceb4:	and	x27, x11, x8
   4ceb8:	b.gt	4cf7c <print_arm_disassembler_options@@Base+0x1444>
   4cebc:	cmp	w9, #0x56
   4cec0:	b.gt	4d2a0 <print_arm_disassembler_options@@Base+0x1768>
   4cec4:	cmp	w9, #0x42
   4cec8:	b.ne	4d2cc <print_arm_disassembler_options@@Base+0x1794>  // b.any
   4cecc:	lsl	w8, w22, w10
   4ced0:	sxtw	x9, w8
   4ced4:	ldur	x21, [x29, #-24]
   4ced8:	eor	x9, x27, x9
   4cedc:	sub	x8, x9, w8, sxtw
   4cee0:	ldr	x9, [sp, #16]
   4cee4:	ldr	x10, [x21, #120]
   4cee8:	mov	x1, x21
   4ceec:	add	x27, x9, x8, lsl #1
   4cef0:	mov	x0, x27
   4cef4:	blr	x10
   4cef8:	ldur	x3, [x29, #-8]
   4cefc:	mov	w8, #0x2                   	// #2
   4cf00:	stur	xzr, [x29, #-16]
   4cf04:	strb	w22, [x21, #196]
   4cf08:	str	w8, [x21, #200]
   4cf0c:	str	x27, [x21, #208]
   4cf10:	b	4d298 <print_arm_disassembler_options@@Base+0x1760>
   4cf14:	lsl	w8, w22, w8
   4cf18:	sxtw	x8, w8
   4cf1c:	tst	x8, x20
   4cf20:	add	x28, x27, #0x2
   4cf24:	b.eq	4cf44 <print_arm_disassembler_options@@Base+0x140c>  // b.none
   4cf28:	ldrb	w2, [x27, #1]
   4cf2c:	b	4cf48 <print_arm_disassembler_options@@Base+0x1410>
   4cf30:	lsl	w8, w22, w8
   4cf34:	sxtw	x8, w8
   4cf38:	tst	x8, x20
   4cf3c:	add	x28, x27, #0x1
   4cf40:	b.eq	4d298 <print_arm_disassembler_options@@Base+0x1760>  // b.none
   4cf44:	ldrb	w2, [x28]
   4cf48:	ldur	x3, [x29, #-8]
   4cf4c:	adrp	x1, 65000 <fields@@Base+0xee84>
   4cf50:	mov	x0, x19
   4cf54:	add	x1, x1, #0x1b9
   4cf58:	blr	x3
   4cf5c:	b	4d294 <print_arm_disassembler_options@@Base+0x175c>
   4cf60:	cmp	w9, #0x73
   4cf64:	b.ne	4d004 <print_arm_disassembler_options@@Base+0x14cc>  // b.any
   4cf68:	ldr	x2, [sp, #48]
   4cf6c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4cf70:	mov	x0, x19
   4cf74:	add	x1, x1, #0xc2a
   4cf78:	b	4d28c <print_arm_disassembler_options@@Base+0x1754>
   4cf7c:	cmp	w9, #0x71
   4cf80:	b.gt	4d2b0 <print_arm_disassembler_options@@Base+0x1778>
   4cf84:	cmp	w9, #0x63
   4cf88:	b.ne	4d2ec <print_arm_disassembler_options@@Base+0x17b4>  // b.any
   4cf8c:	adrp	x8, 85000 <aarch64_operands@@Base+0x5c38>
   4cf90:	add	x8, x8, #0xf38
   4cf94:	ldr	x2, [x8, x27, lsl #3]
   4cf98:	b	4d284 <print_arm_disassembler_options@@Base+0x174c>
   4cf9c:	ldur	w8, [x29, #-44]
   4cfa0:	adrp	x9, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4cfa4:	adrp	x27, 65000 <fields@@Base+0xee84>
   4cfa8:	add	x27, x27, #0xf5
   4cfac:	str	w8, [x9, #1076]
   4cfb0:	ldur	w8, [x29, #-48]
   4cfb4:	cbz	w8, 4cfe4 <print_arm_disassembler_options@@Base+0x14ac>
   4cfb8:	mov	w21, w20
   4cfbc:	ldur	x2, [x29, #-8]
   4cfc0:	eor	w8, w20, w21, lsl #1
   4cfc4:	tst	x8, #0x10
   4cfc8:	csel	x1, x23, x27, eq  // eq = none
   4cfcc:	mov	x0, x19
   4cfd0:	lsl	w26, w21, #1
   4cfd4:	blr	x2
   4cfd8:	tst	w21, #0x3
   4cfdc:	mov	w21, w26
   4cfe0:	b.ne	4cfbc <print_arm_disassembler_options@@Base+0x1484>  // b.any
   4cfe4:	ldr	x8, [sp, #56]
   4cfe8:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4cfec:	add	x9, x9, #0xf38
   4cff0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4cff4:	ldr	x2, [x9, x8, lsl #3]
   4cff8:	mov	x0, x19
   4cffc:	add	x1, x1, #0xbe8
   4d000:	b	4d28c <print_arm_disassembler_options@@Base+0x1754>
   4d004:	cmp	w9, #0x78
   4d008:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d00c:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4d010:	ldr	w8, [x8, #1076]
   4d014:	cbz	w8, 4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d018:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d01c:	mov	x0, x19
   4d020:	add	x1, x1, #0xbec
   4d024:	b	4d1a0 <print_arm_disassembler_options@@Base+0x1668>
   4d028:	cmp	w9, #0x25
   4d02c:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d030:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4d034:	mov	x0, x19
   4d038:	add	x1, x1, #0x3fb
   4d03c:	b	4d1a0 <print_arm_disassembler_options@@Base+0x1668>
   4d040:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4d044:	ldr	w8, [x8, #1072]
   4d048:	cbnz	w8, 4d1fc <print_arm_disassembler_options@@Base+0x16c4>
   4d04c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d050:	mov	x0, x19
   4d054:	add	x1, x1, #0xbea
   4d058:	b	4d1a0 <print_arm_disassembler_options@@Base+0x1668>
   4d05c:	ldur	x8, [x29, #-32]
   4d060:	mov	w0, w8
   4d064:	cmp	w9, #0x4f
   4d068:	cset	w8, eq  // eq = none
   4d06c:	and	w26, w8, w20, lsr #8
   4d070:	mov	w21, w0
   4d074:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4d078:	mov	x0, x19
   4d07c:	add	x1, x1, #0x429
   4d080:	blr	x3
   4d084:	mov	x27, xzr
   4d088:	mov	w8, wzr
   4d08c:	lsl	w9, w22, w27
   4d090:	sxtw	x9, w9
   4d094:	tst	x9, x20
   4d098:	b.eq	4d0ec <print_arm_disassembler_options@@Base+0x15b4>  // b.none
   4d09c:	ldur	x3, [x29, #-8]
   4d0a0:	cbz	w8, 4d0bc <print_arm_disassembler_options@@Base+0x1584>
   4d0a4:	ldur	x2, [x29, #-8]
   4d0a8:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4d0ac:	mov	x0, x19
   4d0b0:	add	x1, x1, #0x31b
   4d0b4:	blr	x2
   4d0b8:	ldur	x3, [x29, #-8]
   4d0bc:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d0c0:	ldr	w8, [x8, #1584]
   4d0c4:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d0c8:	mov	w9, #0x90                  	// #144
   4d0cc:	add	x10, x10, #0xaf8
   4d0d0:	madd	x8, x8, x9, x10
   4d0d4:	add	x8, x8, x27, lsl #3
   4d0d8:	ldr	x2, [x8, #16]
   4d0dc:	mov	x0, x19
   4d0e0:	mov	x1, x25
   4d0e4:	blr	x3
   4d0e8:	mov	w8, #0x1                   	// #1
   4d0ec:	add	x27, x27, #0x1
   4d0f0:	cmp	x27, #0x8
   4d0f4:	b.ne	4d08c <print_arm_disassembler_options@@Base+0x1554>  // b.any
   4d0f8:	cbz	w21, 4d148 <print_arm_disassembler_options@@Base+0x1610>
   4d0fc:	ldur	x3, [x29, #-8]
   4d100:	cbz	w8, 4d11c <print_arm_disassembler_options@@Base+0x15e4>
   4d104:	ldur	x2, [x29, #-8]
   4d108:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4d10c:	mov	x0, x19
   4d110:	add	x1, x1, #0x31b
   4d114:	blr	x2
   4d118:	ldur	x3, [x29, #-8]
   4d11c:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d120:	ldr	w8, [x8, #1584]
   4d124:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d128:	mov	w9, #0x90                  	// #144
   4d12c:	add	x10, x10, #0xaf8
   4d130:	madd	x8, x8, x9, x10
   4d134:	ldr	x2, [x8, #128]
   4d138:	mov	x0, x19
   4d13c:	mov	x1, x25
   4d140:	blr	x3
   4d144:	mov	w8, #0x1                   	// #1
   4d148:	cbz	w26, 4d194 <print_arm_disassembler_options@@Base+0x165c>
   4d14c:	ldur	x3, [x29, #-8]
   4d150:	cbz	w8, 4d16c <print_arm_disassembler_options@@Base+0x1634>
   4d154:	ldur	x2, [x29, #-8]
   4d158:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4d15c:	mov	x0, x19
   4d160:	add	x1, x1, #0x31b
   4d164:	blr	x2
   4d168:	ldur	x3, [x29, #-8]
   4d16c:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d170:	ldr	w8, [x8, #1584]
   4d174:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d178:	mov	w9, #0x90                  	// #144
   4d17c:	add	x10, x10, #0xaf8
   4d180:	madd	x8, x8, x9, x10
   4d184:	ldr	x2, [x8, #136]
   4d188:	mov	x0, x19
   4d18c:	mov	x1, x25
   4d190:	blr	x3
   4d194:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4d198:	mov	x0, x19
   4d19c:	add	x1, x1, #0x4ec
   4d1a0:	ldur	x2, [x29, #-8]
   4d1a4:	blr	x2
   4d1a8:	b	4d294 <print_arm_disassembler_options@@Base+0x175c>
   4d1ac:	ldr	x8, [sp, #24]
   4d1b0:	cbnz	x8, 4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d1b4:	adrp	x1, 65000 <fields@@Base+0xee84>
   4d1b8:	mov	x0, x19
   4d1bc:	add	x1, x1, #0x722
   4d1c0:	b	4d1a0 <print_arm_disassembler_options@@Base+0x1668>
   4d1c4:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4d1c8:	ldr	w8, [x8, #1072]
   4d1cc:	cbz	w8, 4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d1d0:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4d1d4:	ubfx	x8, x8, #4, #4
   4d1d8:	add	x9, x9, #0xf38
   4d1dc:	ldr	x2, [x9, x8, lsl #3]
   4d1e0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d1e4:	mov	x0, x19
   4d1e8:	add	x1, x1, #0xc11
   4d1ec:	b	4d28c <print_arm_disassembler_options@@Base+0x1754>
   4d1f0:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4d1f4:	ldr	w8, [x8, #1072]
   4d1f8:	cbz	w8, 4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d1fc:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4d200:	ubfx	x8, x8, #4, #4
   4d204:	add	x9, x9, #0xf38
   4d208:	ldr	x2, [x9, x8, lsl #3]
   4d20c:	b	4d284 <print_arm_disassembler_options@@Base+0x174c>
   4d210:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d214:	ldr	w8, [x8, #1584]
   4d218:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d21c:	mov	w9, #0x90                  	// #144
   4d220:	add	x10, x10, #0xaf8
   4d224:	madd	x8, x8, x9, x10
   4d228:	ldr	x9, [sp, #32]
   4d22c:	b	4d27c <print_arm_disassembler_options@@Base+0x1744>
   4d230:	ldur	x21, [x29, #-24]
   4d234:	ldr	x26, [sp, #40]
   4d238:	ldr	x8, [x21, #120]
   4d23c:	mov	x0, x26
   4d240:	mov	x1, x21
   4d244:	blr	x8
   4d248:	ldur	x3, [x29, #-8]
   4d24c:	mov	w8, #0x2                   	// #2
   4d250:	strb	w22, [x21, #196]
   4d254:	str	w8, [x21, #200]
   4d258:	str	x26, [x21, #208]
   4d25c:	b	4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d260:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d264:	ldr	w8, [x8, #1584]
   4d268:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d26c:	mov	w9, #0x90                  	// #144
   4d270:	add	x10, x10, #0xaf8
   4d274:	madd	x8, x8, x9, x10
   4d278:	ldur	x9, [x29, #-40]
   4d27c:	add	x8, x8, x9, lsl #3
   4d280:	ldr	x2, [x8, #16]
   4d284:	mov	x0, x19
   4d288:	mov	x1, x25
   4d28c:	ldur	x3, [x29, #-8]
   4d290:	blr	x3
   4d294:	ldur	x3, [x29, #-8]
   4d298:	add	x27, x28, #0x1
   4d29c:	b	4cda0 <print_arm_disassembler_options@@Base+0x1268>
   4d2a0:	cmp	w9, #0x57
   4d2a4:	b.ne	4d318 <print_arm_disassembler_options@@Base+0x17e0>  // b.any
   4d2a8:	lsl	x2, x27, #2
   4d2ac:	b	4d2d8 <print_arm_disassembler_options@@Base+0x17a0>
   4d2b0:	cmp	w9, #0x78
   4d2b4:	b.ne	4d340 <print_arm_disassembler_options@@Base+0x1808>  // b.any
   4d2b8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4d2bc:	mov	x0, x19
   4d2c0:	add	x1, x1, #0x3e5
   4d2c4:	mov	x2, x27
   4d2c8:	b	4d28c <print_arm_disassembler_options@@Base+0x1754>
   4d2cc:	cmp	w9, #0x48
   4d2d0:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d2d4:	lsl	x2, x27, #1
   4d2d8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d2dc:	mov	x0, x19
   4d2e0:	add	x1, x1, #0xc2b
   4d2e4:	stur	x2, [x29, #-16]
   4d2e8:	b	4d28c <print_arm_disassembler_options@@Base+0x1754>
   4d2ec:	cmp	w9, #0x64
   4d2f0:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d2f4:	ldur	x3, [x29, #-8]
   4d2f8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d2fc:	mov	x0, x19
   4d300:	add	x1, x1, #0xc2b
   4d304:	mov	x2, x27
   4d308:	blr	x3
   4d30c:	ldur	x3, [x29, #-8]
   4d310:	stur	x27, [x29, #-16]
   4d314:	b	4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d318:	cmp	w9, #0x61
   4d31c:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d320:	ldur	x1, [x29, #-24]
   4d324:	ldr	x9, [sp, #8]
   4d328:	ldr	x8, [x1, #120]
   4d32c:	add	x0, x9, x27, lsl #2
   4d330:	blr	x8
   4d334:	ldur	x3, [x29, #-8]
   4d338:	stur	xzr, [x29, #-16]
   4d33c:	b	4d298 <print_arm_disassembler_options@@Base+0x1760>
   4d340:	cmp	w9, #0x72
   4d344:	b.ne	4d3f4 <print_arm_disassembler_options@@Base+0x18bc>  // b.any
   4d348:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4d34c:	ldr	w8, [x8, #1584]
   4d350:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4d354:	mov	w9, #0x90                  	// #144
   4d358:	add	x10, x10, #0xaf8
   4d35c:	madd	x8, x8, x9, x10
   4d360:	add	x8, x8, x27, lsl #3
   4d364:	b	4d280 <print_arm_disassembler_options@@Base+0x1748>
   4d368:	ldur	x2, [x29, #-16]
   4d36c:	add	x8, x2, #0x10
   4d370:	cmp	x8, #0x31
   4d374:	b.cc	4d3a4 <print_arm_disassembler_options@@Base+0x186c>  // b.lo, b.ul, b.last
   4d378:	mov	x0, x19
   4d37c:	ldp	x20, x19, [sp, #192]
   4d380:	ldp	x22, x21, [sp, #176]
   4d384:	ldp	x24, x23, [sp, #160]
   4d388:	ldp	x26, x25, [sp, #144]
   4d38c:	ldp	x28, x27, [sp, #128]
   4d390:	ldp	x29, x30, [sp, #112]
   4d394:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4d398:	add	x1, x1, #0x48e
   4d39c:	add	sp, sp, #0xd0
   4d3a0:	br	x3
   4d3a4:	ldp	x20, x19, [sp, #192]
   4d3a8:	ldp	x22, x21, [sp, #176]
   4d3ac:	ldp	x24, x23, [sp, #160]
   4d3b0:	ldp	x26, x25, [sp, #144]
   4d3b4:	ldp	x28, x27, [sp, #128]
   4d3b8:	ldp	x29, x30, [sp, #112]
   4d3bc:	add	sp, sp, #0xd0
   4d3c0:	ret
   4d3c4:	mov	x0, x19
   4d3c8:	mov	w2, w20
   4d3cc:	ldp	x20, x19, [sp, #192]
   4d3d0:	ldp	x22, x21, [sp, #176]
   4d3d4:	ldp	x24, x23, [sp, #160]
   4d3d8:	ldp	x26, x25, [sp, #144]
   4d3dc:	ldp	x28, x27, [sp, #128]
   4d3e0:	ldp	x29, x30, [sp, #112]
   4d3e4:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4d3e8:	add	x1, x1, #0xc2f
   4d3ec:	add	sp, sp, #0xd0
   4d3f0:	br	x3
   4d3f4:	bl	35750 <abort@plt>
   4d3f8:	stp	x29, x30, [sp, #-96]!
   4d3fc:	stp	x28, x27, [sp, #16]
   4d400:	stp	x26, x25, [sp, #32]
   4d404:	stp	x24, x23, [sp, #48]
   4d408:	stp	x22, x21, [sp, #64]
   4d40c:	stp	x20, x19, [sp, #80]
   4d410:	mov	x29, sp
   4d414:	sub	sp, sp, #0x1f0
   4d418:	ldr	x8, [x1, #96]
   4d41c:	mov	x25, x1
   4d420:	ldp	x1, x28, [x1]
   4d424:	mov	x19, x2
   4d428:	ldr	x9, [x8, #8]
   4d42c:	mov	x26, x0
   4d430:	tbz	w9, #15, 4d450 <print_arm_disassembler_options@@Base+0x1918>
   4d434:	mov	x10, #0xffffffffffcfffff    	// #-3145729
   4d438:	cmp	x9, x10
   4d43c:	mov	w21, #0x1                   	// #1
   4d440:	b.ne	4d454 <print_arm_disassembler_options@@Base+0x191c>  // b.any
   4d444:	ldr	x8, [x8]
   4d448:	cmn	x8, #0x1
   4d44c:	b.ne	4d454 <print_arm_disassembler_options@@Base+0x191c>  // b.any
   4d450:	mov	w21, wzr
   4d454:	adrp	x0, 85000 <aarch64_operands@@Base+0x5c38>
   4d458:	stur	x1, [x29, #-48]
   4d45c:	add	x0, x0, #0xfc0
   4d460:	mov	w4, #0x1                   	// #1
   4d464:	mov	x1, x26
   4d468:	mov	x2, x25
   4d46c:	mov	x3, x19
   4d470:	bl	51bac <print_arm_disassembler_options@@Base+0x6074>
   4d474:	cbz	w0, 4d498 <print_arm_disassembler_options@@Base+0x1960>
   4d478:	add	sp, sp, #0x1f0
   4d47c:	ldp	x20, x19, [sp, #80]
   4d480:	ldp	x22, x21, [sp, #64]
   4d484:	ldp	x24, x23, [sp, #48]
   4d488:	ldp	x26, x25, [sp, #32]
   4d48c:	ldp	x28, x27, [sp, #16]
   4d490:	ldp	x29, x30, [sp], #96
   4d494:	ret
   4d498:	cbz	w21, 4dcf8 <print_arm_disassembler_options@@Base+0x21c0>
   4d49c:	and	x8, x19, #0xf
   4d4a0:	and	x16, x8, x19, lsr #16
   4d4a4:	ubfx	x22, x19, #16, #4
   4d4a8:	cmp	x16, #0xf
   4d4ac:	mov	w13, #0x900                 	// #2304
   4d4b0:	cset	w7, eq  // eq = none
   4d4b4:	cmp	x22, x8
   4d4b8:	mvn	w9, w19
   4d4bc:	lsr	x11, x19, #19
   4d4c0:	and	x1, x19, x13
   4d4c4:	cset	w13, eq  // eq = none
   4d4c8:	cmp	x8, #0xd
   4d4cc:	ubfx	x17, x19, #19, #2
   4d4d0:	and	x21, x11, #0x8
   4d4d4:	cset	w11, ne  // ne = any
   4d4d8:	cset	w4, eq  // eq = none
   4d4dc:	tst	x9, #0xe00
   4d4e0:	str	x17, [sp, #248]
   4d4e4:	sub	x17, x17, #0x1
   4d4e8:	cset	w5, eq  // eq = none
   4d4ec:	tst	x19, #0x380000
   4d4f0:	and	x6, x19, #0xe
   4d4f4:	stur	w11, [x29, #-192]
   4d4f8:	cset	w11, eq  // eq = none
   4d4fc:	cmp	x17, #0x2
   4d500:	lsr	x0, x19, #4
   4d504:	stur	w11, [x29, #-96]
   4d508:	cset	w11, cc  // cc = lo, ul, last
   4d50c:	cmp	x6, #0xe
   4d510:	and	x23, x19, #0x700000
   4d514:	stur	x0, [x29, #-160]
   4d518:	str	w11, [sp, #192]
   4d51c:	cset	w11, eq  // eq = none
   4d520:	tst	x9, #0x600000
   4d524:	and	x3, x19, #0xc0000
   4d528:	str	x6, [sp, #136]
   4d52c:	stur	w11, [x29, #-200]
   4d530:	cset	w11, eq  // eq = none
   4d534:	cmp	x23, #0x700, lsl #12
   4d538:	and	x12, x19, #0xf00
   4d53c:	str	w11, [sp, #184]
   4d540:	cset	w11, eq  // eq = none
   4d544:	cmp	x3, #0xc0, lsl #12
   4d548:	mov	w14, #0xd00                 	// #3328
   4d54c:	and	x2, x0, #0x8
   4d550:	cset	w0, eq  // eq = none
   4d554:	cmp	x12, #0xe00
   4d558:	mov	w15, #0x1001                	// #4097
   4d55c:	and	x14, x19, x14
   4d560:	str	x23, [sp, #240]
   4d564:	stur	w11, [x29, #-136]
   4d568:	cset	w11, ne  // ne = any
   4d56c:	cset	w12, eq  // eq = none
   4d570:	cmp	x1, #0x100
   4d574:	lsr	x30, x19, #8
   4d578:	and	x18, x19, x15
   4d57c:	cset	w15, eq  // eq = none
   4d580:	cmp	x14, #0x900
   4d584:	cset	w14, eq  // eq = none
   4d588:	tst	x9, #0xc00
   4d58c:	mvn	w9, w30
   4d590:	orr	w12, w12, w15
   4d594:	mov	w10, #0x1200000             	// #18874368
   4d598:	and	w9, w9, #0x1
   4d59c:	str	w12, [sp, #168]
   4d5a0:	cset	w12, eq  // eq = none
   4d5a4:	and	x20, x19, #0x180
   4d5a8:	tst	x19, x10
   4d5ac:	orr	w9, w9, w12
   4d5b0:	str	x3, [sp, #56]
   4d5b4:	str	w14, [sp, #176]
   4d5b8:	stur	w9, [x29, #-208]
   4d5bc:	cset	w9, eq  // eq = none
   4d5c0:	cmp	x20, #0x180
   4d5c4:	bfxil	x21, x19, #13, #3
   4d5c8:	stur	w9, [x29, #-176]
   4d5cc:	cset	w9, eq  // eq = none
   4d5d0:	cmp	x18, #0x1
   4d5d4:	str	x20, [sp, #24]
   4d5d8:	stur	x9, [x29, #-80]
   4d5dc:	cset	w9, eq  // eq = none
   4d5e0:	cmp	x21, #0x0
   4d5e4:	bfxil	x2, x19, #17, #3
   4d5e8:	cset	w3, eq  // eq = none
   4d5ec:	tst	x19, #0x100000
   4d5f0:	cset	w12, eq  // eq = none
   4d5f4:	cmp	x21, x2
   4d5f8:	cset	w16, ne  // ne = any
   4d5fc:	tst	x19, #0x10000000
   4d600:	and	x20, x19, #0x300000
   4d604:	stur	x18, [x29, #-240]
   4d608:	cset	w18, eq  // eq = none
   4d60c:	cmp	x20, #0x200, lsl #12
   4d610:	cset	w15, eq  // eq = none
   4d614:	cset	w6, ne  // ne = any
   4d618:	cmp	x22, #0xd
   4d61c:	stur	w9, [x29, #-216]
   4d620:	cset	w9, eq  // eq = none
   4d624:	cmp	x8, #0xf
   4d628:	cset	w14, eq  // eq = none
   4d62c:	cmp	x22, #0xf
   4d630:	cset	w17, eq  // eq = none
   4d634:	orr	w14, w14, w17
   4d638:	cset	w17, ne  // ne = any
   4d63c:	and	w17, w13, w17
   4d640:	cmp	x21, #0x4
   4d644:	orr	w17, w7, w17
   4d648:	orr	w9, w4, w9
   4d64c:	cset	w7, hi  // hi = pmore
   4d650:	cmp	x21, #0x6
   4d654:	stur	x22, [x29, #-104]
   4d658:	cset	w22, hi  // hi = pmore
   4d65c:	cmp	x20, #0x300, lsl #12
   4d660:	orr	w24, w9, w14
   4d664:	mov	w14, #0x11                  	// #17
   4d668:	mov	w27, #0x3                   	// #3
   4d66c:	csel	w23, w27, w14, eq  // eq = none
   4d670:	cset	w14, eq  // eq = none
   4d674:	cmp	w9, #0x0
   4d678:	ubfx	x9, x19, #21, #1
   4d67c:	orr	w7, w9, w7
   4d680:	orr	w9, w9, w22
   4d684:	stur	x20, [x29, #-184]
   4d688:	stp	w9, w7, [sp, #48]
   4d68c:	orr	w9, w13, w24
   4d690:	str	w9, [sp, #232]
   4d694:	mov	w9, #0x2                   	// #2
   4d698:	cinc	w9, w9, eq  // eq = none
   4d69c:	cmp	w24, #0x0
   4d6a0:	mov	w13, #0x9                   	// #9
   4d6a4:	csel	w9, w9, w13, ne  // ne = any
   4d6a8:	str	w9, [sp, #224]
   4d6ac:	lsr	x9, x19, #2
   4d6b0:	and	x13, x9, #0x8
   4d6b4:	and	x9, x19, #0xf0000
   4d6b8:	bfxil	x13, x19, #1, #3
   4d6bc:	cmp	x9, #0xf0, lsl #12
   4d6c0:	mov	w7, #0x8                   	// #8
   4d6c4:	csel	w7, w27, w7, eq  // eq = none
   4d6c8:	cset	w20, eq  // eq = none
   4d6cc:	cmp	x21, x13
   4d6d0:	orr	w13, w18, w16
   4d6d4:	str	w7, [sp, #104]
   4d6d8:	stur	x21, [x29, #-72]
   4d6dc:	str	w13, [sp, #12]
   4d6e0:	cset	w13, ne  // ne = any
   4d6e4:	and	w16, w13, w16
   4d6e8:	orr	w13, w12, w13
   4d6ec:	orr	w12, w12, w16
   4d6f0:	str	w12, [sp, #88]
   4d6f4:	orr	w12, w18, w16
   4d6f8:	str	w12, [sp, #128]
   4d6fc:	orr	w12, w6, w16
   4d700:	str	w12, [sp, #84]
   4d704:	mov	w12, #0x7                   	// #7
   4d708:	csel	w16, w12, w27, eq  // eq = none
   4d70c:	str	w13, [sp, #96]
   4d710:	cset	w13, eq  // eq = none
   4d714:	str	w16, [sp, #208]
   4d718:	and	w16, w19, #0x1
   4d71c:	tst	x19, #0x1
   4d720:	orr	w18, w16, w13
   4d724:	cinc	w12, w12, ne  // ne = any
   4d728:	cmp	w18, #0x0
   4d72c:	csel	w12, w12, w27, ne  // ne = any
   4d730:	str	w12, [sp, #80]
   4d734:	tst	x19, #0x200000
   4d738:	mov	w12, #0x4                   	// #4
   4d73c:	mov	w6, #0x6                   	// #6
   4d740:	csel	w12, w6, w12, ne  // ne = any
   4d744:	and	x10, x19, x10
   4d748:	str	w12, [sp, #44]
   4d74c:	stur	x10, [x29, #-224]
   4d750:	lsr	x10, x19, #3
   4d754:	and	x7, x10, #0x8
   4d758:	mov	w10, #0x1020                	// #4128
   4d75c:	and	x10, x19, x10
   4d760:	str	x10, [sp, #120]
   4d764:	lsr	x10, x19, #1
   4d768:	lsr	x12, x19, #17
   4d76c:	stur	x12, [x29, #-168]
   4d770:	eor	w10, w10, w12
   4d774:	and	x12, x30, #0xe
   4d778:	orr	x12, x12, #0x1
   4d77c:	stur	x12, [x29, #-128]
   4d780:	and	x12, x10, #0x7
   4d784:	ubfx	x10, x19, #5, #1
   4d788:	stur	x30, [x29, #-144]
   4d78c:	str	x10, [sp, #32]
   4d790:	and	w10, w11, w10
   4d794:	str	w10, [sp, #160]
   4d798:	orr	w10, w4, w17
   4d79c:	stur	w10, [x29, #-232]
   4d7a0:	orr	w10, w20, w16
   4d7a4:	str	w10, [sp, #76]
   4d7a8:	and	w10, w15, w13
   4d7ac:	str	w10, [sp, #112]
   4d7b0:	orr	w10, w20, w13
   4d7b4:	str	w10, [sp, #200]
   4d7b8:	orr	w10, w20, w18
   4d7bc:	str	w10, [sp, #64]
   4d7c0:	mov	w10, #0x5                   	// #5
   4d7c4:	cinc	w10, w10, ne  // ne = any
   4d7c8:	str	w10, [sp, #40]
   4d7cc:	ldr	x10, [x25, #8]
   4d7d0:	and	x11, x19, #0x10000000
   4d7d4:	adrp	x24, 67000 <fields@@Base+0x10e84>
   4d7d8:	adrp	x18, 93000 <aarch64_operands@@Base+0x13c38>
   4d7dc:	stur	x10, [x29, #-120]
   4d7e0:	ldr	x10, [x25]
   4d7e4:	adrp	x6, 5d000 <fields@@Base+0x6e84>
   4d7e8:	adrp	x15, 5d000 <fields@@Base+0x6e84>
   4d7ec:	bfxil	x7, x19, #1, #3
   4d7f0:	stur	x10, [x29, #-112]
   4d7f4:	and	x10, x19, #0x380000
   4d7f8:	str	x10, [sp, #16]
   4d7fc:	and	x10, x19, #0x70000
   4d800:	str	x10, [sp, #152]
   4d804:	ubfx	x10, x19, #13, #3
   4d808:	str	x10, [sp, #144]
   4d80c:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4d810:	ldr	w16, [x10, #1072]
   4d814:	str	x11, [sp, #216]
   4d818:	lsr	x11, x19, #12
   4d81c:	stur	x11, [x29, #-152]
   4d820:	ubfx	x13, x19, #12, #4
   4d824:	ubfx	x11, x19, #18, #2
   4d828:	add	x24, x24, #0x3ac
   4d82c:	add	x18, x18, #0x308
   4d830:	add	x6, x6, #0xbc4
   4d834:	add	x15, x15, #0xae8
   4d838:	stur	x11, [x29, #-88]
   4d83c:	ldp	x11, x10, [x18, #-72]
   4d840:	and	x10, x10, x19
   4d844:	cmp	x10, x11
   4d848:	b.ne	4dc84 <print_arm_disassembler_options@@Base+0x214c>  // b.any
   4d84c:	ldur	w10, [x18, #-80]
   4d850:	cmp	w10, #0xdb
   4d854:	b.hi	4d984 <print_arm_disassembler_options@@Base+0x1e4c>  // b.pmore
   4d858:	adr	x17, 4d86c <print_arm_disassembler_options@@Base+0x1d34>
   4d85c:	ldrb	w11, [x15, x10]
   4d860:	add	x17, x17, x11, lsl #2
   4d864:	mov	w11, w3
   4d868:	br	x17
   4d86c:	mov	w11, w14
   4d870:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d874:	mov	w11, w0
   4d878:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d87c:	mov	w11, w5
   4d880:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d884:	ldur	w11, [x29, #-96]
   4d888:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d88c:	mov	w11, w14
   4d890:	ldur	x17, [x29, #-72]
   4d894:	cbnz	x17, 4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d898:	b	4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d89c:	ldur	w11, [x29, #-136]
   4d8a0:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d8a4:	ldur	x11, [x29, #-80]
   4d8a8:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d8ac:	ldur	w11, [x29, #-176]
   4d8b0:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d8b4:	ldur	x11, [x29, #-184]
   4d8b8:	cmp	x11, #0x300, lsl #12
   4d8bc:	ldur	w11, [x29, #-200]
   4d8c0:	b.ne	4d980 <print_arm_disassembler_options@@Base+0x1e48>  // b.any
   4d8c4:	b	4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d8c8:	ldur	x11, [x29, #-104]
   4d8cc:	cmp	x8, x11
   4d8d0:	cset	w11, ne  // ne = any
   4d8d4:	cmp	w10, #0xda
   4d8d8:	cset	w17, ne  // ne = any
   4d8dc:	orr	w11, w11, w17
   4d8e0:	ldur	w17, [x29, #-192]
   4d8e4:	and	w11, w11, w17
   4d8e8:	tbnz	w11, #0, 4d984 <print_arm_disassembler_options@@Base+0x1e4c>
   4d8ec:	b	4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d8f0:	ldur	x17, [x29, #-224]
   4d8f4:	ldur	x11, [x29, #-80]
   4d8f8:	cbnz	x17, 4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d8fc:	b	4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d900:	ldur	w11, [x29, #-208]
   4d904:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d908:	ldur	w11, [x29, #-232]
   4d90c:	tbz	w11, #0, 4d984 <print_arm_disassembler_options@@Base+0x1e4c>
   4d910:	b	4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d914:	ldr	w11, [sp, #160]
   4d918:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d91c:	mov	w11, w20
   4d920:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d924:	ldr	x11, [sp, #248]
   4d928:	cbz	x11, 4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d92c:	ldr	x11, [sp, #248]
   4d930:	cmp	x11, #0x3
   4d934:	b.eq	4dc84 <print_arm_disassembler_options@@Base+0x214c>  // b.none
   4d938:	b	4d984 <print_arm_disassembler_options@@Base+0x1e4c>
   4d93c:	mov	w11, w4
   4d940:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d944:	ldur	w11, [x29, #-216]
   4d948:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d94c:	ldr	w11, [sp, #184]
   4d950:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d954:	mov	w11, w4
   4d958:	b	4d890 <print_arm_disassembler_options@@Base+0x1d58>
   4d95c:	ldr	w11, [sp, #192]
   4d960:	ldr	x17, [sp, #152]
   4d964:	cbnz	x17, 4d984 <print_arm_disassembler_options@@Base+0x1e4c>
   4d968:	b	4d980 <print_arm_disassembler_options@@Base+0x1e48>
   4d96c:	ldur	w11, [x29, #-216]
   4d970:	b	4d890 <print_arm_disassembler_options@@Base+0x1d58>
   4d974:	ldr	w11, [sp, #176]
   4d978:	ldr	w17, [sp, #168]
   4d97c:	tbnz	w17, #0, 4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d980:	cbnz	w11, 4dc84 <print_arm_disassembler_options@@Base+0x214c>
   4d984:	cbz	w16, 4d994 <print_arm_disassembler_options@@Base+0x1e5c>
   4d988:	sub	w11, w10, #0xc2
   4d98c:	cmp	w11, #0x11
   4d990:	b.cs	4d9cc <print_arm_disassembler_options@@Base+0x1e94>  // b.hs, b.nlast
   4d994:	sub	w11, w10, #0x2
   4d998:	mov	w22, wzr
   4d99c:	cmp	w11, #0xcf
   4d9a0:	mov	w21, #0xc                   	// #12
   4d9a4:	b.hi	4dbf0 <print_arm_disassembler_options@@Base+0x20b8>  // b.pmore
   4d9a8:	adr	x17, 4d9b8 <print_arm_disassembler_options@@Base+0x1e80>
   4d9ac:	ldrb	w27, [x6, x11]
   4d9b0:	add	x17, x17, x27, lsl #2
   4d9b4:	br	x17
   4d9b8:	cmp	x8, #0xd
   4d9bc:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4d9c0:	cmp	x8, #0xf
   4d9c4:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4d9c8:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4d9cc:	sub	w11, w10, #0x3c
   4d9d0:	mov	w21, wzr
   4d9d4:	cmp	w11, #0x5
   4d9d8:	mov	w22, #0x1                   	// #1
   4d9dc:	b.hi	4dbf0 <print_arm_disassembler_options@@Base+0x20b8>  // b.pmore
   4d9e0:	mov	w17, #0x1                   	// #1
   4d9e4:	lsl	w11, w17, w11
   4d9e8:	mov	w17, #0x39                  	// #57
   4d9ec:	tst	w11, w17
   4d9f0:	b.ne	4d994 <print_arm_disassembler_options@@Base+0x1e5c>  // b.any
   4d9f4:	b	4dbf0 <print_arm_disassembler_options@@Base+0x20b8>
   4d9f8:	cmp	x13, #0xd
   4d9fc:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4da00:	cmp	x13, #0xf
   4da04:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4da08:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da0c:	ldur	x11, [x29, #-128]
   4da10:	cmp	x11, #0xd
   4da14:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4da18:	cmp	x11, #0xf
   4da1c:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4da20:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da24:	cmp	x8, #0xd
   4da28:	b.ne	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>  // b.any
   4da2c:	b	4dbb4 <print_arm_disassembler_options@@Base+0x207c>
   4da30:	ldur	x11, [x29, #-104]
   4da34:	cmp	x11, #0xf
   4da38:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4da3c:	cmp	x11, #0xd
   4da40:	b.ne	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>  // b.any
   4da44:	tbz	w19, #21, 4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da48:	mov	w21, #0x6                   	// #6
   4da4c:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4da50:	ldr	w21, [sp, #224]
   4da54:	ldr	w11, [sp, #232]
   4da58:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4da5c:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da60:	ldr	x11, [sp, #240]
   4da64:	cmp	x11, #0x600, lsl #12
   4da68:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4da6c:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da70:	cmp	x9, #0xf0, lsl #12
   4da74:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4da78:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da7c:	ldr	w21, [sp, #208]
   4da80:	ldr	w11, [sp, #200]
   4da84:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4da88:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da8c:	ldr	w11, [sp, #112]
   4da90:	tbnz	w11, #0, 4db28 <print_arm_disassembler_options@@Base+0x1ff0>
   4da94:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4da98:	ldr	w11, [sp, #128]
   4da9c:	tbnz	w11, #0, 4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4daa0:	b	4dcf0 <print_arm_disassembler_options@@Base+0x21b8>
   4daa4:	ldr	x11, [sp, #120]
   4daa8:	cmp	x11, #0x20
   4daac:	b.ne	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>  // b.any
   4dab0:	mov	w21, #0x1                   	// #1
   4dab4:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dab8:	ldur	x11, [x29, #-104]
   4dabc:	cmp	x11, #0xf
   4dac0:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4dac4:	cmp	x11, #0xd
   4dac8:	b.ne	4dbc0 <print_arm_disassembler_options@@Base+0x2088>  // b.any
   4dacc:	ldr	w21, [sp, #40]
   4dad0:	ldr	w11, [sp, #48]
   4dad4:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dad8:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4dadc:	ldur	x11, [x29, #-104]
   4dae0:	cmp	x11, #0xf
   4dae4:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4dae8:	cmp	x11, #0xd
   4daec:	b.ne	4dbd4 <print_arm_disassembler_options@@Base+0x209c>  // b.any
   4daf0:	ldr	w21, [sp, #44]
   4daf4:	ldr	w11, [sp, #52]
   4daf8:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dafc:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4db00:	ldur	x11, [x29, #-72]
   4db04:	cmp	x11, x2
   4db08:	b.eq	4db4c <print_arm_disassembler_options@@Base+0x2014>  // b.none
   4db0c:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4db10:	ldr	x11, [sp, #136]
   4db14:	cmp	x11, #0xc
   4db18:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4db1c:	b	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>
   4db20:	ldr	w11, [sp, #84]
   4db24:	tbnz	w11, #0, 4ecf8 <print_arm_disassembler_options@@Base+0x31c0>
   4db28:	mov	w21, #0xb                   	// #11
   4db2c:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4db30:	ldr	w21, [sp, #104]
   4db34:	ldr	w11, [sp, #76]
   4db38:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4db3c:	b	4ef70 <print_arm_disassembler_options@@Base+0x3438>
   4db40:	ldur	x11, [x29, #-72]
   4db44:	cmp	x11, x7
   4db48:	b.ne	4efd0 <print_arm_disassembler_options@@Base+0x3498>  // b.any
   4db4c:	mov	w21, #0x7                   	// #7
   4db50:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4db54:	cmp	x13, #0xd
   4db58:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4db5c:	cmp	x13, #0xf
   4db60:	b.eq	4dbac <print_arm_disassembler_options@@Base+0x2074>  // b.none
   4db64:	b	4effc <print_arm_disassembler_options@@Base+0x34c4>
   4db68:	ldr	w21, [sp, #80]
   4db6c:	ldr	w11, [sp, #64]
   4db70:	tbnz	w11, #0, 4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4db74:	b	4ef94 <print_arm_disassembler_options@@Base+0x345c>
   4db78:	cmp	x9, #0xd0, lsl #12
   4db7c:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4db80:	b	4ecf8 <print_arm_disassembler_options@@Base+0x31c0>
   4db84:	ldr	w11, [sp, #96]
   4db88:	tbz	w11, #0, 4dcf0 <print_arm_disassembler_options@@Base+0x21b8>
   4db8c:	b	4ecf8 <print_arm_disassembler_options@@Base+0x31c0>
   4db90:	ldr	w11, [sp, #88]
   4db94:	tbz	w11, #0, 4dcf0 <print_arm_disassembler_options@@Base+0x21b8>
   4db98:	b	4ecf8 <print_arm_disassembler_options@@Base+0x31c0>
   4db9c:	cmp	x8, #0xd
   4dba0:	b.eq	4dbb4 <print_arm_disassembler_options@@Base+0x207c>  // b.none
   4dba4:	cmp	x8, #0xf
   4dba8:	b.ne	4dce8 <print_arm_disassembler_options@@Base+0x21b0>  // b.any
   4dbac:	mov	w21, #0x3                   	// #3
   4dbb0:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dbb4:	mov	w21, #0x2                   	// #2
   4dbb8:	mov	w22, #0x1                   	// #1
   4dbbc:	b	4dbf0 <print_arm_disassembler_options@@Base+0x20b8>
   4dbc0:	ldur	x11, [x29, #-72]
   4dbc4:	cmp	x11, #0x6
   4dbc8:	b.ls	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>  // b.plast
   4dbcc:	mov	w21, #0x5                   	// #5
   4dbd0:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dbd4:	ldur	x11, [x29, #-72]
   4dbd8:	cmp	x11, #0x4
   4dbdc:	b.ls	4dbe8 <print_arm_disassembler_options@@Base+0x20b0>  // b.plast
   4dbe0:	mov	w21, #0x4                   	// #4
   4dbe4:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dbe8:	mov	w22, wzr
   4dbec:	mov	w21, #0xc                   	// #12
   4dbf0:	mov	w11, wzr
   4dbf4:	cmp	w10, #0x64
   4dbf8:	mov	w27, #0x11                  	// #17
   4dbfc:	stp	w21, w22, [x29, #-60]
   4dc00:	b.le	4dc28 <print_arm_disassembler_options@@Base+0x20f0>
   4dc04:	sub	w17, w10, #0x65
   4dc08:	cmp	w17, #0x37
   4dc0c:	b.hi	4dc4c <print_arm_disassembler_options@@Base+0x2114>  // b.pmore
   4dc10:	adrp	x30, 5d000 <fields@@Base+0x6e84>
   4dc14:	add	x30, x30, #0xd0a
   4dc18:	adr	x21, 4dc70 <print_arm_disassembler_options@@Base+0x2138>
   4dc1c:	ldrh	w22, [x30, x17, lsl #1]
   4dc20:	add	x21, x21, x22, lsl #2
   4dc24:	br	x21
   4dc28:	sub	w17, w10, #0x11
   4dc2c:	cmp	w17, #0x3a
   4dc30:	b.hi	4dcc4 <print_arm_disassembler_options@@Base+0x218c>  // b.pmore
   4dc34:	adrp	x30, 5d000 <fields@@Base+0x6e84>
   4dc38:	add	x30, x30, #0xc94
   4dc3c:	adr	x22, 4dc70 <print_arm_disassembler_options@@Base+0x2138>
   4dc40:	ldrh	w21, [x30, x17, lsl #1]
   4dc44:	add	x22, x22, x21, lsl #2
   4dc48:	br	x22
   4dc4c:	sub	w17, w10, #0xb1
   4dc50:	cmp	w17, #0x10
   4dc54:	b.hi	4dc78 <print_arm_disassembler_options@@Base+0x2140>  // b.pmore
   4dc58:	adrp	x30, 5d000 <fields@@Base+0x6e84>
   4dc5c:	add	x30, x30, #0xd7a
   4dc60:	adr	x21, 4dc70 <print_arm_disassembler_options@@Base+0x2138>
   4dc64:	ldrh	w22, [x30, x17, lsl #1]
   4dc68:	add	x21, x21, x22, lsl #2
   4dc6c:	br	x21
   4dc70:	mov	w27, w23
   4dc74:	mov	w11, w14
   4dc78:	cmp	w10, #0x45
   4dc7c:	b.ne	4ed08 <print_arm_disassembler_options@@Base+0x31d0>  // b.any
   4dc80:	cbnz	x12, 4ed08 <print_arm_disassembler_options@@Base+0x31d0>
   4dc84:	ldr	x24, [x18], #56
   4dc88:	cbnz	x24, 4d83c <print_arm_disassembler_options@@Base+0x1d04>
   4dc8c:	b	4dd0c <print_arm_disassembler_options@@Base+0x21d4>
   4dc90:	ldur	x11, [x29, #-88]
   4dc94:	cmp	x11, #0x3
   4dc98:	b.eq	4dcac <print_arm_disassembler_options@@Base+0x2174>  // b.none
   4dc9c:	cbnz	x11, 4dcb8 <print_arm_disassembler_options@@Base+0x2180>
   4dca0:	mov	w27, #0x1                   	// #1
   4dca4:	mov	w11, #0x1                   	// #1
   4dca8:	b	4dc78 <print_arm_disassembler_options@@Base+0x2140>
   4dcac:	mov	w11, #0x1                   	// #1
   4dcb0:	mov	w27, #0x3                   	// #3
   4dcb4:	b	4dc78 <print_arm_disassembler_options@@Base+0x2140>
   4dcb8:	mov	w11, wzr
   4dcbc:	mov	w27, #0x11                  	// #17
   4dcc0:	b	4dc78 <print_arm_disassembler_options@@Base+0x2140>
   4dcc4:	sub	w17, w10, #0x53
   4dcc8:	cmp	w17, #0x8
   4dccc:	b.hi	4dc78 <print_arm_disassembler_options@@Base+0x2140>  // b.pmore
   4dcd0:	mov	w21, #0x1                   	// #1
   4dcd4:	lsl	w17, w21, w17
   4dcd8:	mov	w21, #0x107                 	// #263
   4dcdc:	tst	w17, w21
   4dce0:	b.eq	4dc78 <print_arm_disassembler_options@@Base+0x2140>  // b.none
   4dce4:	b	4ec94 <print_arm_disassembler_options@@Base+0x315c>
   4dce8:	ldr	w11, [sp, #12]
   4dcec:	tbnz	w11, #0, 4ecf8 <print_arm_disassembler_options@@Base+0x31c0>
   4dcf0:	mov	w21, #0xa                   	// #10
   4dcf4:	b	4dbb8 <print_arm_disassembler_options@@Base+0x2080>
   4dcf8:	mov	w2, #0x1                   	// #1
   4dcfc:	mov	x0, x25
   4dd00:	mov	x1, x19
   4dd04:	bl	5065c <print_arm_disassembler_options@@Base+0x4b24>
   4dd08:	cbnz	w0, 4d478 <print_arm_disassembler_options@@Base+0x1940>
   4dd0c:	adrp	x0, 8f000 <aarch64_operands@@Base+0xfc38>
   4dd10:	add	x0, x0, #0x338
   4dd14:	mov	w4, #0x1                   	// #1
   4dd18:	mov	x1, x26
   4dd1c:	mov	x2, x25
   4dd20:	mov	x3, x19
   4dd24:	bl	51bac <print_arm_disassembler_options@@Base+0x6074>
   4dd28:	cbnz	w0, 4d478 <print_arm_disassembler_options@@Base+0x1940>
   4dd2c:	mov	w8, #0xe001                	// #57345
   4dd30:	movk	w8, #0xf00f, lsl #16
   4dd34:	cmp	w19, w8
   4dd38:	b.ne	4dd4c <print_arm_disassembler_options@@Base+0x2214>  // b.any
   4dd3c:	adrp	x21, 69000 <fields@@Base+0x12e84>
   4dd40:	stur	x25, [x29, #-56]
   4dd44:	add	x21, x21, #0xbb7
   4dd48:	b	4dd74 <print_arm_disassembler_options@@Base+0x223c>
   4dd4c:	adrp	x8, 90000 <aarch64_operands@@Base+0x10c38>
   4dd50:	add	x8, x8, #0x518
   4dd54:	ldr	x21, [x8]
   4dd58:	cbz	x21, 4ec04 <print_arm_disassembler_options@@Base+0x30cc>
   4dd5c:	ldp	x10, x9, [x8, #-16]
   4dd60:	add	x8, x8, #0x30
   4dd64:	and	x9, x9, x19
   4dd68:	cmp	x9, x10
   4dd6c:	b.ne	4dd54 <print_arm_disassembler_options@@Base+0x221c>  // b.any
   4dd70:	stur	x25, [x29, #-56]
   4dd74:	ubfx	w1, w19, #26, #1
   4dd78:	ubfx	w2, w19, #13, #1
   4dd7c:	ubfx	w3, w19, #11, #1
   4dd80:	lsr	x16, x19, #10
   4dd84:	eor	w2, w2, w1
   4dd88:	eor	w3, w3, w1
   4dd8c:	lsl	w1, w1, #24
   4dd90:	tst	x19, #0xff
   4dd94:	ubfx	x7, x19, #6, #2
   4dd98:	lsr	x22, x19, #6
   4dd9c:	bfi	w1, w2, #23, #1
   4dda0:	and	w2, w16, #0x1c
   4dda4:	orr	w24, w7, w2
   4dda8:	and	w7, w22, #0x100000
   4ddac:	cset	w22, ne  // ne = any
   4ddb0:	tst	x19, #0x20
   4ddb4:	lsr	w30, w19, #11
   4ddb8:	and	x20, x19, #0xff0
   4ddbc:	lsl	w25, w19, #12
   4ddc0:	bfi	w1, w3, #22, #1
   4ddc4:	cset	w3, eq  // eq = none
   4ddc8:	lsr	x10, x19, #4
   4ddcc:	and	x23, x19, #0x30
   4ddd0:	lsr	w9, w19, #13
   4ddd4:	bfi	w7, w30, #19, #1
   4ddd8:	bfxil	x20, x19, #16, #4
   4dddc:	and	x25, x25, #0xf000
   4dde0:	and	w3, w22, w3
   4dde4:	lsr	x27, x19, #14
   4dde8:	lsr	x2, x19, #15
   4ddec:	orr	x20, x20, x25
   4ddf0:	stur	w3, [x29, #-128]
   4ddf4:	mov	x3, x23
   4ddf8:	bfi	w7, w9, #18, #1
   4ddfc:	and	x9, x10, #0x700
   4de00:	stur	x20, [x29, #-120]
   4de04:	and	x20, x27, #0x40
   4de08:	bfxil	x23, x19, #8, #4
   4de0c:	bfxil	x3, x19, #16, #4
   4de10:	and	x2, x2, #0x800
   4de14:	bfxil	x9, x19, #0, #8
   4de18:	lsr	x11, x19, #1
   4de1c:	and	x25, x10, #0x1000
   4de20:	orr	x22, x23, x20
   4de24:	orr	x20, x3, x20
   4de28:	and	x3, x10, #0x7f000
   4de2c:	orr	x27, x9, x2
   4de30:	and	x9, x10, #0x1f000
   4de34:	and	x16, x16, #0x2
   4de38:	bfi	x25, x11, #2, #10
   4de3c:	bfi	x3, x11, #2, #10
   4de40:	bfi	x9, x11, #2, #10
   4de44:	orr	x2, x25, x16
   4de48:	orr	x3, x3, x16
   4de4c:	orr	x9, x9, x16
   4de50:	bfi	x16, x11, #2, #10
   4de54:	and	w11, w10, #0x3f000
   4de58:	orr	w11, w7, w11
   4de5c:	and	x7, x10, #0x3ff000
   4de60:	bfi	x7, x19, #1, #11
   4de64:	eor	w1, w1, #0x1c00000
   4de68:	orr	x1, x7, x1
   4de6c:	mov	w7, #0x80                  	// #128
   4de70:	ubfiz	x0, x19, #1, #11
   4de74:	str	x22, [sp, #120]
   4de78:	ubfx	x22, x27, #7, #25
   4de7c:	bfxil	w7, w27, #0, #7
   4de80:	orr	w11, w11, w0
   4de84:	ror	w0, w7, w22
   4de88:	str	w0, [sp, #88]
   4de8c:	mov	x0, #0xffffffffffff0004    	// #-65532
   4de90:	add	x1, x26, x1
   4de94:	movk	x0, #0xff00, lsl #16
   4de98:	mov	w13, #0xfffffffd            	// #-3
   4de9c:	add	x1, x1, x0
   4dea0:	mov	w14, #0x1000                	// #4096
   4dea4:	tst	x19, #0x1000
   4dea8:	and	x13, x1, x13
   4deac:	csel	x13, x13, x1, eq  // eq = none
   4deb0:	tst	x14, x19, lsr #4
   4deb4:	orr	x14, x2, #0xffffffffffffe000
   4deb8:	mov	w15, #0x4                   	// #4
   4debc:	mov	w17, #0x2                   	// #2
   4dec0:	csel	x14, x2, x14, eq  // eq = none
   4dec4:	tst	x19, #0x20000
   4dec8:	csel	w15, w17, w15, eq  // eq = none
   4decc:	orr	x17, x3, #0xfffffffffff80000
   4ded0:	tst	x19, #0x400000
   4ded4:	mov	w18, #0x43                  	// #67
   4ded8:	csel	x17, x3, x17, eq  // eq = none
   4dedc:	tst	x19, #0x100000
   4dee0:	mov	w3, #0x53                  	// #83
   4dee4:	csel	w18, w18, w3, eq  // eq = none
   4dee8:	mov	x6, xzr
   4deec:	and	w5, w19, #0x1f
   4def0:	ubfx	x23, x19, #22, #10
   4def4:	stur	x13, [x29, #-144]
   4def8:	str	w18, [sp, #128]
   4defc:	orr	x18, x9, #0xfffffffffffe0000
   4df00:	add	w2, w5, #0x1
   4df04:	csel	x9, x9, x18, eq  // eq = none
   4df08:	and	w5, w23, #0x1e
   4df0c:	mov	x23, x6
   4df10:	adrp	x18, 59000 <fields@@Base+0x2e84>
   4df14:	adrp	x6, 54000 <xexit@@Base+0x84c>
   4df18:	tst	x19, #0x1000000
   4df1c:	add	x18, x18, #0xa14
   4df20:	add	x6, x6, #0x5ca
   4df24:	mov	w4, wzr
   4df28:	and	w0, w19, #0xfff
   4df2c:	csel	x18, x6, x18, eq  // eq = none
   4df30:	adrp	x7, 59000 <fields@@Base+0x2e84>
   4df34:	adrp	x22, 66000 <fields@@Base+0xfe84>
   4df38:	str	x18, [sp, #112]
   4df3c:	sub	w18, w4, w0
   4df40:	add	x8, x26, #0x4
   4df44:	add	x7, x7, #0xa0e
   4df48:	add	x22, x22, #0xa6a
   4df4c:	sxtw	x18, w18
   4df50:	lsl	x11, x11, #43
   4df54:	str	x18, [sp, #104]
   4df58:	csel	x18, x22, x7, eq  // eq = none
   4df5c:	add	x11, x8, x11, asr #43
   4df60:	str	x0, [sp, #200]
   4df64:	str	x18, [sp, #96]
   4df68:	stur	x11, [x29, #-184]
   4df6c:	add	x11, x8, x14
   4df70:	and	x3, x8, #0xfffffffffffffffc
   4df74:	sub	x18, x8, x16
   4df78:	add	x16, x8, x16
   4df7c:	stur	x11, [x29, #-192]
   4df80:	add	x11, x8, x17
   4df84:	tst	w19, #0xff
   4df88:	add	x8, x8, x9
   4df8c:	mov	w13, #0x2d                  	// #45
   4df90:	mov	w1, #0x2b                  	// #43
   4df94:	stp	x8, x11, [x29, #-208]
   4df98:	cset	w8, eq  // eq = none
   4df9c:	tst	x19, #0x800000
   4dfa0:	and	x10, x10, #0xf000
   4dfa4:	csel	w9, w1, w13, ne  // ne = any
   4dfa8:	stp	x16, x18, [x29, #-176]
   4dfac:	str	w9, [sp, #192]
   4dfb0:	orr	x9, x27, x10
   4dfb4:	stur	x9, [x29, #-216]
   4dfb8:	bfxil	x10, x19, #0, #12
   4dfbc:	lsl	w9, w27, #24
   4dfc0:	stur	x10, [x29, #-88]
   4dfc4:	and	w10, w27, #0xff
   4dfc8:	mov	w11, w9
   4dfcc:	bfi	w9, w10, #8, #8
   4dfd0:	bfxil	w11, w27, #0, #8
   4dfd4:	str	w9, [sp, #84]
   4dfd8:	mov	w9, w10
   4dfdc:	bfi	w11, w10, #16, #8
   4dfe0:	bfi	w9, w10, #16, #8
   4dfe4:	bfi	w11, w10, #8, #8
   4dfe8:	stp	w9, w11, [sp, #76]
   4dfec:	add	w9, w5, w15
   4dff0:	and	w8, w8, w19, lsr #23
   4dff4:	lsl	w12, w19, #2
   4dff8:	str	w10, [sp, #224]
   4dffc:	stur	w5, [x29, #-160]
   4e000:	stur	w9, [x29, #-224]
   4e004:	str	w8, [sp, #184]
   4e008:	and	w8, w19, #0xff
   4e00c:	and	x12, x12, #0x3fc
   4e010:	str	x8, [sp, #208]
   4e014:	lsl	w8, w8, #2
   4e018:	cneg	x9, x12, eq  // eq = none
   4e01c:	str	w8, [sp, #176]
   4e020:	cneg	w8, w8, eq  // eq = none
   4e024:	str	x8, [sp, #168]
   4e028:	add	x8, x9, x3
   4e02c:	cmp	w24, #0x0
   4e030:	str	x8, [sp, #160]
   4e034:	mov	w8, #0x20                  	// #32
   4e038:	csel	w8, w8, w24, eq  // eq = none
   4e03c:	str	w8, [sp, #152]
   4e040:	and	x8, x19, #0xf0000
   4e044:	str	x3, [sp, #136]
   4e048:	stur	x8, [x29, #-232]
   4e04c:	and	x8, x19, #0xff
   4e050:	stur	x8, [x29, #-104]
   4e054:	ubfx	x8, x19, #16, #4
   4e058:	stur	x8, [x29, #-80]
   4e05c:	and	x8, x19, #0xf0
   4e060:	stur	x8, [x29, #-240]
   4e064:	and	x8, x19, #0xf
   4e068:	ubfx	w9, w19, #21, #2
   4e06c:	stur	x8, [x29, #-112]
   4e070:	str	x9, [sp, #248]
   4e074:	ubfx	x9, x19, #8, #4
   4e078:	str	x9, [sp, #144]
   4e07c:	sub	w9, w4, w19, uxtb
   4e080:	ubfx	x8, x19, #4, #2
   4e084:	str	x9, [sp, #64]
   4e088:	ubfx	w9, w19, #4, #2
   4e08c:	str	w9, [sp, #56]
   4e090:	stur	x8, [x29, #-96]
   4e094:	lsl	w8, w8, #3
   4e098:	str	w8, [sp, #216]
   4e09c:	sub	w8, w2, w24
   4e0a0:	and	w25, w19, #0xf
   4e0a4:	stur	w2, [x29, #-152]
   4e0a8:	str	w8, [sp, #240]
   4e0ac:	stur	x27, [x29, #-136]
   4e0b0:	ubfx	x8, x27, #8, #24
   4e0b4:	mov	w26, w4
   4e0b8:	adrp	x27, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4e0bc:	str	x8, [sp, #232]
   4e0c0:	stur	w4, [x29, #-60]
   4e0c4:	stur	w25, [x29, #-72]
   4e0c8:	ldrb	w2, [x21]
   4e0cc:	cmp	w2, #0x25
   4e0d0:	b.eq	4e0f4 <print_arm_disassembler_options@@Base+0x25bc>  // b.none
   4e0d4:	cbz	w2, 4ebc0 <print_arm_disassembler_options@@Base+0x3088>
   4e0d8:	adrp	x1, 65000 <fields@@Base+0xee84>
   4e0dc:	mov	x0, x28
   4e0e0:	add	x1, x1, #0x1b9
   4e0e4:	ldur	x3, [x29, #-48]
   4e0e8:	blr	x3
   4e0ec:	add	x21, x21, #0x1
   4e0f0:	b	4e0c8 <print_arm_disassembler_options@@Base+0x2590>
   4e0f4:	ldrb	w8, [x21, #1]!
   4e0f8:	sub	w8, w8, #0x25
   4e0fc:	cmp	w8, #0x53
   4e100:	b.hi	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.pmore
   4e104:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   4e108:	add	x11, x11, #0xa4
   4e10c:	adr	x9, 4e11c <print_arm_disassembler_options@@Base+0x25e4>
   4e110:	ldrh	w10, [x11, x8, lsl #1]
   4e114:	add	x9, x9, x10, lsl #2
   4e118:	br	x9
   4e11c:	sub	x2, x29, #0x18
   4e120:	sub	x3, x29, #0x28
   4e124:	mov	x0, x21
   4e128:	mov	x1, x19
   4e12c:	bl	51ac4 <print_arm_disassembler_options@@Base+0x5f8c>
   4e130:	ldrb	w8, [x0]
   4e134:	mov	x21, x0
   4e138:	cmp	w8, #0x5f
   4e13c:	b.gt	4e1ac <print_arm_disassembler_options@@Base+0x2674>
   4e140:	cmp	w8, #0x51
   4e144:	b.gt	4e1d0 <print_arm_disassembler_options@@Base+0x2698>
   4e148:	cmp	w8, #0x27
   4e14c:	b.eq	4e6fc <print_arm_disassembler_options@@Base+0x2bc4>  // b.none
   4e150:	cmp	w8, #0x3f
   4e154:	b.ne	4e764 <print_arm_disassembler_options@@Base+0x2c2c>  // b.any
   4e158:	ldur	w8, [x29, #-40]
   4e15c:	ldur	w9, [x29, #-24]
   4e160:	mov	w22, #0x1                   	// #1
   4e164:	ldur	x3, [x29, #-48]
   4e168:	lsl	w8, w22, w8
   4e16c:	sub	w8, w8, w9
   4e170:	ldrb	w2, [x21, w8, sxtw]
   4e174:	adrp	x1, 65000 <fields@@Base+0xee84>
   4e178:	add	x1, x1, #0x1b9
   4e17c:	mov	x0, x28
   4e180:	mov	x25, x20
   4e184:	mov	w20, w24
   4e188:	mov	x24, x23
   4e18c:	blr	x3
   4e190:	ldur	w8, [x29, #-40]
   4e194:	mov	w24, w20
   4e198:	mov	x20, x25
   4e19c:	ldur	w25, [x29, #-72]
   4e1a0:	lsl	w8, w22, w8
   4e1a4:	add	x21, x21, w8, sxtw
   4e1a8:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e1ac:	cmp	w8, #0x71
   4e1b0:	b.gt	4e1f8 <print_arm_disassembler_options@@Base+0x26c0>
   4e1b4:	cmp	w8, #0x60
   4e1b8:	b.eq	4e720 <print_arm_disassembler_options@@Base+0x2be8>  // b.none
   4e1bc:	cmp	w8, #0x63
   4e1c0:	b.ne	4e778 <print_arm_disassembler_options@@Base+0x2c40>  // b.any
   4e1c4:	ldur	x8, [x29, #-24]
   4e1c8:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4e1cc:	b	4e294 <print_arm_disassembler_options@@Base+0x275c>
   4e1d0:	cmp	w8, #0x52
   4e1d4:	b.eq	4e73c <print_arm_disassembler_options@@Base+0x2c04>  // b.none
   4e1d8:	cmp	w8, #0x53
   4e1dc:	b.ne	4e788 <print_arm_disassembler_options@@Base+0x2c50>  // b.any
   4e1e0:	ldur	x8, [x29, #-24]
   4e1e4:	ldur	w9, [x29, #-60]
   4e1e8:	cmp	x8, #0xd
   4e1ec:	csinc	w9, w9, wzr, ne  // ne = any
   4e1f0:	stur	w9, [x29, #-60]
   4e1f4:	b	4e740 <print_arm_disassembler_options@@Base+0x2c08>
   4e1f8:	cmp	w8, #0x78
   4e1fc:	b.eq	4e754 <print_arm_disassembler_options@@Base+0x2c1c>  // b.none
   4e200:	cmp	w8, #0x73
   4e204:	b.ne	4e7ac <print_arm_disassembler_options@@Base+0x2c74>  // b.any
   4e208:	ldur	x8, [x29, #-24]
   4e20c:	cmp	x8, #0x3
   4e210:	b.hi	4e944 <print_arm_disassembler_options@@Base+0x2e0c>  // b.pmore
   4e214:	adrp	x9, 93000 <aarch64_operands@@Base+0x13c38>
   4e218:	add	x9, x9, #0x280
   4e21c:	b	4e298 <print_arm_disassembler_options@@Base+0x2760>
   4e220:	ldur	x23, [x29, #-88]
   4e224:	b	4e574 <print_arm_disassembler_options@@Base+0x2a3c>
   4e228:	str	w26, [sp, #52]
   4e22c:	mov	x22, x23
   4e230:	mov	w23, w24
   4e234:	mov	x24, x20
   4e238:	ldur	x20, [x29, #-56]
   4e23c:	ldur	x25, [x29, #-184]
   4e240:	mov	x26, x27
   4e244:	ldr	x8, [x20, #120]
   4e248:	mov	x0, x25
   4e24c:	mov	x1, x20
   4e250:	blr	x8
   4e254:	str	x25, [x20, #208]
   4e258:	ldr	w26, [sp, #52]
   4e25c:	ldur	w25, [x29, #-72]
   4e260:	mov	w8, #0x1                   	// #1
   4e264:	mov	w9, #0x2                   	// #2
   4e268:	strb	w8, [x20, #196]
   4e26c:	str	w9, [x20, #200]
   4e270:	mov	x20, x24
   4e274:	mov	w24, w23
   4e278:	mov	x23, x22
   4e27c:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e280:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4e284:	ldr	w8, [x8, #1072]
   4e288:	cbz	w8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e28c:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4e290:	ubfx	x8, x8, #4, #4
   4e294:	add	x9, x9, #0xf38
   4e298:	ldr	x2, [x9, x8, lsl #3]
   4e29c:	b	4e8e8 <print_arm_disassembler_options@@Base+0x2db0>
   4e2a0:	ldur	x8, [x29, #-240]
   4e2a4:	cmp	x8, #0x60
   4e2a8:	b.ne	4e7d8 <print_arm_disassembler_options@@Base+0x2ca0>  // b.any
   4e2ac:	ldur	x8, [x29, #-112]
   4e2b0:	cmp	x8, #0xf
   4e2b4:	b.ne	4e7e4 <print_arm_disassembler_options@@Base+0x2cac>  // b.any
   4e2b8:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4e2bc:	add	x1, x1, #0x90b
   4e2c0:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e2c4:	ldr	w8, [x27, #1584]
   4e2c8:	ldur	x25, [x29, #-80]
   4e2cc:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4e2d0:	mov	w9, #0x90                  	// #144
   4e2d4:	add	x10, x10, #0xaf8
   4e2d8:	madd	x8, x8, x9, x10
   4e2dc:	add	x8, x8, x25, lsl #3
   4e2e0:	ldr	x2, [x8, #16]
   4e2e4:	ldur	x3, [x29, #-48]
   4e2e8:	adrp	x1, 61000 <fields@@Base+0xae84>
   4e2ec:	add	x1, x1, #0x777
   4e2f0:	mov	x0, x28
   4e2f4:	blr	x3
   4e2f8:	tbnz	w19, #23, 4e7f8 <print_arm_disassembler_options@@Base+0x2cc0>
   4e2fc:	cmp	w25, #0xf
   4e300:	b.ne	4e97c <print_arm_disassembler_options@@Base+0x2e44>  // b.any
   4e304:	ldr	x27, [sp, #104]
   4e308:	mov	w22, wzr
   4e30c:	b	4e808 <print_arm_disassembler_options@@Base+0x2cd0>
   4e310:	ldur	x1, [x29, #-56]
   4e314:	ldur	x0, [x29, #-192]
   4e318:	ldr	x8, [x1, #120]
   4e31c:	blr	x8
   4e320:	ldur	x2, [x29, #-48]
   4e324:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e328:	add	x1, x1, #0x31b
   4e32c:	mov	x0, x28
   4e330:	blr	x2
   4e334:	ldur	w2, [x29, #-224]
   4e338:	b	4e454 <print_arm_disassembler_options@@Base+0x291c>
   4e33c:	mov	w22, w26
   4e340:	mov	x26, x27
   4e344:	mov	x27, x23
   4e348:	mov	w23, w24
   4e34c:	mov	x24, x20
   4e350:	ldur	x20, [x29, #-56]
   4e354:	ldur	x25, [x29, #-144]
   4e358:	ldr	x8, [x20, #120]
   4e35c:	mov	x0, x25
   4e360:	mov	x1, x20
   4e364:	blr	x8
   4e368:	str	x25, [x20, #208]
   4e36c:	ldur	w25, [x29, #-72]
   4e370:	mov	w8, #0x1                   	// #1
   4e374:	mov	w9, #0x2                   	// #2
   4e378:	strb	w8, [x20, #196]
   4e37c:	str	w9, [x20, #200]
   4e380:	mov	x20, x24
   4e384:	mov	w24, w23
   4e388:	mov	x23, x27
   4e38c:	mov	x27, x26
   4e390:	mov	w26, w22
   4e394:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e398:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e39c:	add	x1, x1, #0x3fb
   4e3a0:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e3a4:	ldr	x11, [sp, #248]
   4e3a8:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   4e3ac:	add	x8, x8, #0x14c
   4e3b0:	adr	x9, 4e3c0 <print_arm_disassembler_options@@Base+0x2888>
   4e3b4:	ldrh	w10, [x8, x11, lsl #1]
   4e3b8:	add	x9, x9, x10, lsl #2
   4e3bc:	br	x9
   4e3c0:	ldr	x1, [sp, #96]
   4e3c4:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e3c8:	ldr	w3, [sp, #240]
   4e3cc:	b	4e59c <print_arm_disassembler_options@@Base+0x2a64>
   4e3d0:	ldur	x1, [x29, #-56]
   4e3d4:	ldur	x0, [x29, #-176]
   4e3d8:	b	4e5c0 <print_arm_disassembler_options@@Base+0x2a88>
   4e3dc:	ldur	x8, [x29, #-96]
   4e3e0:	cbz	w8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e3e4:	ldr	w2, [sp, #216]
   4e3e8:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e3ec:	add	x1, x1, #0x2f9
   4e3f0:	b	4ea70 <print_arm_disassembler_options@@Base+0x2f38>
   4e3f4:	ldur	x8, [x29, #-104]
   4e3f8:	cbz	x8, 4e950 <print_arm_disassembler_options@@Base+0x2e18>
   4e3fc:	tbz	w19, #5, 4e564 <print_arm_disassembler_options@@Base+0x2a2c>
   4e400:	mov	x25, x20
   4e404:	ldr	x20, [sp, #120]
   4e408:	mov	w0, w20
   4e40c:	bl	518ac <print_arm_disassembler_options@@Base+0x5d74>
   4e410:	cbz	x0, 4eb30 <print_arm_disassembler_options@@Base+0x2ff8>
   4e414:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e418:	mov	x2, x0
   4e41c:	add	x1, x1, #0xbe9
   4e420:	mov	x0, x28
   4e424:	b	4eb40 <print_arm_disassembler_options@@Base+0x3008>
   4e428:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4e42c:	ldr	w8, [x8, #1072]
   4e430:	cbz	w8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e434:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4e438:	ubfx	x8, x8, #4, #4
   4e43c:	add	x9, x9, #0xf38
   4e440:	ldr	x2, [x9, x8, lsl #3]
   4e444:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e448:	add	x1, x1, #0xc11
   4e44c:	b	4e8f0 <print_arm_disassembler_options@@Base+0x2db8>
   4e450:	ldur	w2, [x29, #-160]
   4e454:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   4e458:	add	x1, x1, #0x3a1
   4e45c:	b	4ea70 <print_arm_disassembler_options@@Base+0x2f38>
   4e460:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4e464:	ldr	w8, [x8, #1076]
   4e468:	cbz	w8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e46c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e470:	add	x1, x1, #0xbec
   4e474:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e478:	ldur	x23, [x29, #-120]
   4e47c:	b	4e574 <print_arm_disassembler_options@@Base+0x2a3c>
   4e480:	ldur	x8, [x29, #-232]
   4e484:	cmp	x8, #0xf0, lsl #12
   4e488:	b.ne	4e0ec <print_arm_disassembler_options@@Base+0x25b4>  // b.any
   4e48c:	ldur	x2, [x29, #-48]
   4e490:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e494:	add	x1, x1, #0x411
   4e498:	mov	x0, x28
   4e49c:	blr	x2
   4e4a0:	ldur	x1, [x29, #-56]
   4e4a4:	ldr	x0, [sp, #160]
   4e4a8:	b	4e5c0 <print_arm_disassembler_options@@Base+0x2a88>
   4e4ac:	ldur	x23, [x29, #-136]
   4e4b0:	b	4e574 <print_arm_disassembler_options@@Base+0x2a3c>
   4e4b4:	ldur	x1, [x29, #-56]
   4e4b8:	ldur	x0, [x29, #-208]
   4e4bc:	b	4e5c0 <print_arm_disassembler_options@@Base+0x2a88>
   4e4c0:	ldur	x1, [x29, #-56]
   4e4c4:	ldur	x0, [x29, #-200]
   4e4c8:	b	4e5c0 <print_arm_disassembler_options@@Base+0x2a88>
   4e4cc:	ldr	w8, [x27, #1584]
   4e4d0:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4e4d4:	mov	w9, #0x90                  	// #144
   4e4d8:	add	x10, x10, #0xaf8
   4e4dc:	madd	x8, x8, x9, x10
   4e4e0:	ldur	x9, [x29, #-80]
   4e4e4:	ldur	x3, [x29, #-48]
   4e4e8:	adrp	x1, 61000 <fields@@Base+0xae84>
   4e4ec:	add	x1, x1, #0x777
   4e4f0:	add	x8, x8, x9, lsl #3
   4e4f4:	ldr	x2, [x8, #16]
   4e4f8:	mov	x0, x28
   4e4fc:	blr	x3
   4e500:	tbnz	w19, #24, 4e88c <print_arm_disassembler_options@@Base+0x2d54>
   4e504:	ldur	x2, [x29, #-48]
   4e508:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e50c:	add	x1, x1, #0x31a
   4e510:	mov	x0, x28
   4e514:	blr	x2
   4e518:	tbnz	w19, #21, 4ea34 <print_arm_disassembler_options@@Base+0x2efc>
   4e51c:	ldr	x23, [sp, #208]
   4e520:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e524:	add	x1, x1, #0x31e
   4e528:	b	4e57c <print_arm_disassembler_options@@Base+0x2a44>
   4e52c:	ldr	x11, [sp, #232]
   4e530:	cmp	w11, #0x3
   4e534:	b.hi	4eaa0 <print_arm_disassembler_options@@Base+0x2f68>  // b.pmore
   4e538:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   4e53c:	add	x8, x8, #0x168
   4e540:	adr	x9, 4e554 <print_arm_disassembler_options@@Base+0x2a1c>
   4e544:	ldrh	w10, [x8, x11, lsl #1]
   4e548:	add	x9, x9, x10, lsl #2
   4e54c:	ldr	w22, [sp, #224]
   4e550:	br	x9
   4e554:	ldr	w22, [sp, #76]
   4e558:	b	4eaa4 <print_arm_disassembler_options@@Base+0x2f6c>
   4e55c:	ldur	w8, [x29, #-128]
   4e560:	tbz	w8, #0, 4e8d8 <print_arm_disassembler_options@@Base+0x2da0>
   4e564:	ldur	x0, [x29, #-104]
   4e568:	bl	52d94 <print_arm_disassembler_options@@Base+0x725c>
   4e56c:	b	4e8e4 <print_arm_disassembler_options@@Base+0x2dac>
   4e570:	ldur	x23, [x29, #-216]
   4e574:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e578:	add	x1, x1, #0x336
   4e57c:	mov	x0, x28
   4e580:	mov	w2, w23
   4e584:	b	4e0e4 <print_arm_disassembler_options@@Base+0x25ac>
   4e588:	tbz	w19, #21, 4e6ec <print_arm_disassembler_options@@Base+0x2bb4>
   4e58c:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e590:	add	x1, x1, #0x2ef
   4e594:	b	4ea84 <print_arm_disassembler_options@@Base+0x2f4c>
   4e598:	ldur	w3, [x29, #-152]
   4e59c:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e5a0:	add	x1, x1, #0x331
   4e5a4:	mov	x0, x28
   4e5a8:	mov	w2, w24
   4e5ac:	ldur	x4, [x29, #-48]
   4e5b0:	blr	x4
   4e5b4:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e5b8:	ldur	x1, [x29, #-56]
   4e5bc:	ldur	x0, [x29, #-168]
   4e5c0:	ldr	x8, [x1, #120]
   4e5c4:	blr	x8
   4e5c8:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e5cc:	mov	w26, #0x1                   	// #1
   4e5d0:	ldur	x2, [x29, #-48]
   4e5d4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e5d8:	add	x1, x1, #0x429
   4e5dc:	mov	x0, x28
   4e5e0:	mov	x25, x20
   4e5e4:	mov	w20, w24
   4e5e8:	mov	x24, x23
   4e5ec:	blr	x2
   4e5f0:	mov	x22, xzr
   4e5f4:	mov	w8, wzr
   4e5f8:	mov	w9, #0x1                   	// #1
   4e5fc:	lsl	w9, w9, w22
   4e600:	sxtw	x9, w9
   4e604:	tst	x9, x19
   4e608:	b.eq	4e68c <print_arm_disassembler_options@@Base+0x2b54>  // b.none
   4e60c:	cbz	w8, 4e624 <print_arm_disassembler_options@@Base+0x2aec>
   4e610:	ldur	x2, [x29, #-48]
   4e614:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e618:	add	x1, x1, #0x31b
   4e61c:	mov	x0, x28
   4e620:	blr	x2
   4e624:	cbz	w26, 4e640 <print_arm_disassembler_options@@Base+0x2b08>
   4e628:	cmp	x22, #0xd
   4e62c:	b.ne	4e640 <print_arm_disassembler_options@@Base+0x2b08>  // b.any
   4e630:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e634:	add	x1, x1, #0x323
   4e638:	mov	w8, #0xd                   	// #13
   4e63c:	b	4e660 <print_arm_disassembler_options@@Base+0x2b28>
   4e640:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e644:	add	x1, x1, #0xbe9
   4e648:	cbz	w26, 4e65c <print_arm_disassembler_options@@Base+0x2b24>
   4e64c:	cmp	x22, #0xf
   4e650:	mov	x8, x22
   4e654:	b.ne	4e660 <print_arm_disassembler_options@@Base+0x2b28>  // b.any
   4e658:	b	4e900 <print_arm_disassembler_options@@Base+0x2dc8>
   4e65c:	mov	x8, x22
   4e660:	ldr	w9, [x27, #1584]
   4e664:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   4e668:	mov	w10, #0x90                  	// #144
   4e66c:	add	x11, x11, #0xaf8
   4e670:	madd	x9, x9, x10, x11
   4e674:	add	x8, x9, x8, lsl #3
   4e678:	ldr	x2, [x8, #16]
   4e67c:	ldur	x3, [x29, #-48]
   4e680:	mov	x0, x28
   4e684:	blr	x3
   4e688:	mov	w8, #0x1                   	// #1
   4e68c:	add	x22, x22, #0x1
   4e690:	cmp	x22, #0x10
   4e694:	b.ne	4e5f8 <print_arm_disassembler_options@@Base+0x2ac0>  // b.any
   4e698:	b	4e91c <print_arm_disassembler_options@@Base+0x2de4>
   4e69c:	ldr	w8, [x27, #1584]
   4e6a0:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4e6a4:	mov	w9, #0x90                  	// #144
   4e6a8:	add	x10, x10, #0xaf8
   4e6ac:	madd	x8, x8, x9, x10
   4e6b0:	ldur	x9, [x29, #-112]
   4e6b4:	ldur	x3, [x29, #-48]
   4e6b8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e6bc:	add	x1, x1, #0xbe9
   4e6c0:	add	x8, x8, x9, lsl #3
   4e6c4:	ldr	x2, [x8, #16]
   4e6c8:	mov	x0, x28
   4e6cc:	blr	x3
   4e6d0:	ldur	x11, [x29, #-96]
   4e6d4:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   4e6d8:	add	x8, x8, #0x164
   4e6dc:	adr	x9, 4e6ec <print_arm_disassembler_options@@Base+0x2bb4>
   4e6e0:	ldrb	w10, [x8, x11]
   4e6e4:	add	x9, x9, x10, lsl #2
   4e6e8:	br	x9
   4e6ec:	cbz	w24, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e6f0:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e6f4:	add	x1, x1, #0x2db
   4e6f8:	b	4ea84 <print_arm_disassembler_options@@Base+0x2f4c>
   4e6fc:	ldur	w8, [x29, #-40]
   4e700:	ldur	x9, [x29, #-24]
   4e704:	mov	x10, #0xffffffffffffffff    	// #-1
   4e708:	add	x21, x21, #0x1
   4e70c:	lsl	x8, x10, x8
   4e710:	mvn	x8, x8
   4e714:	cmp	x9, x8
   4e718:	b.ne	4e0ec <print_arm_disassembler_options@@Base+0x25b4>  // b.any
   4e71c:	b	4e72c <print_arm_disassembler_options@@Base+0x2bf4>
   4e720:	ldur	x8, [x29, #-24]
   4e724:	add	x21, x21, #0x1
   4e728:	cbnz	x8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e72c:	ldrb	w2, [x21]
   4e730:	adrp	x1, 65000 <fields@@Base+0xee84>
   4e734:	add	x1, x1, #0x1b9
   4e738:	b	4ea70 <print_arm_disassembler_options@@Base+0x2f38>
   4e73c:	ldur	x8, [x29, #-24]
   4e740:	ldur	w9, [x29, #-60]
   4e744:	cmp	x8, #0xf
   4e748:	csinc	w9, w9, wzr, ne  // ne = any
   4e74c:	stur	w9, [x29, #-60]
   4e750:	b	4e7b8 <print_arm_disassembler_options@@Base+0x2c80>
   4e754:	ldur	w2, [x29, #-24]
   4e758:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e75c:	add	x1, x1, #0x491
   4e760:	b	4e8f0 <print_arm_disassembler_options@@Base+0x2db8>
   4e764:	cmp	w8, #0x44
   4e768:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4e76c:	ldur	x8, [x29, #-24]
   4e770:	add	x23, x8, #0x1
   4e774:	b	4e798 <print_arm_disassembler_options@@Base+0x2c60>
   4e778:	cmp	w8, #0x64
   4e77c:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4e780:	ldur	x23, [x29, #-24]
   4e784:	b	4e798 <print_arm_disassembler_options@@Base+0x2c60>
   4e788:	cmp	w8, #0x57
   4e78c:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4e790:	ldur	x8, [x29, #-24]
   4e794:	lsl	x23, x8, #2
   4e798:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e79c:	add	x1, x1, #0x477
   4e7a0:	mov	x0, x28
   4e7a4:	mov	x2, x23
   4e7a8:	b	4e8f4 <print_arm_disassembler_options@@Base+0x2dbc>
   4e7ac:	cmp	w8, #0x72
   4e7b0:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4e7b4:	ldur	x8, [x29, #-24]
   4e7b8:	ldr	w9, [x27, #1584]
   4e7bc:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   4e7c0:	mov	w10, #0x90                  	// #144
   4e7c4:	add	x11, x11, #0xaf8
   4e7c8:	madd	x9, x9, x10, x11
   4e7cc:	add	x8, x9, x8, lsl #3
   4e7d0:	ldr	x2, [x8, #16]
   4e7d4:	b	4e8e8 <print_arm_disassembler_options@@Base+0x2db0>
   4e7d8:	mov	w0, w25
   4e7dc:	bl	51a9c <print_arm_disassembler_options@@Base+0x5f64>
   4e7e0:	cbnz	x0, 4e8e4 <print_arm_disassembler_options@@Base+0x2dac>
   4e7e4:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4e7e8:	add	x1, x1, #0xe96
   4e7ec:	mov	x0, x28
   4e7f0:	mov	w2, w25
   4e7f4:	b	4e0e4 <print_arm_disassembler_options@@Base+0x25ac>
   4e7f8:	ldr	x27, [sp, #200]
   4e7fc:	cmp	w25, #0xf
   4e800:	mov	w22, wzr
   4e804:	csel	x23, x23, x27, eq  // eq = none
   4e808:	ldur	x2, [x29, #-48]
   4e80c:	cbz	x27, 4e82c <print_arm_disassembler_options@@Base+0x2cf4>
   4e810:	ldur	x3, [x29, #-48]
   4e814:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4e818:	add	x1, x1, #0xe94
   4e81c:	mov	x0, x28
   4e820:	mov	w2, w27
   4e824:	blr	x3
   4e828:	ldur	x2, [x29, #-48]
   4e82c:	adrp	x8, 5a000 <fields@@Base+0x3e84>
   4e830:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   4e834:	add	x8, x8, #0xf0b
   4e838:	add	x9, x9, #0x4be
   4e83c:	cmp	w22, #0x0
   4e840:	csel	x1, x9, x8, eq  // eq = none
   4e844:	mov	x0, x28
   4e848:	blr	x2
   4e84c:	ldur	x8, [x29, #-80]
   4e850:	ldur	w25, [x29, #-72]
   4e854:	cmp	w8, #0xf
   4e858:	b.ne	4e884 <print_arm_disassembler_options@@Base+0x2d4c>  // b.any
   4e85c:	ldur	x2, [x29, #-48]
   4e860:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e864:	add	x1, x1, #0x411
   4e868:	mov	x0, x28
   4e86c:	blr	x2
   4e870:	ldur	x1, [x29, #-56]
   4e874:	ldr	x9, [sp, #136]
   4e878:	ldr	x8, [x1, #120]
   4e87c:	add	x0, x27, x9
   4e880:	blr	x8
   4e884:	adrp	x27, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4e888:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e88c:	ldr	w8, [sp, #184]
   4e890:	tbnz	w8, #0, 4e8b4 <print_arm_disassembler_options@@Base+0x2d7c>
   4e894:	ldr	w2, [sp, #192]
   4e898:	ldr	w3, [sp, #176]
   4e89c:	ldur	x4, [x29, #-48]
   4e8a0:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e8a4:	add	x1, x1, #0x312
   4e8a8:	mov	x0, x28
   4e8ac:	blr	x4
   4e8b0:	ldr	x23, [sp, #168]
   4e8b4:	ldur	x2, [x29, #-48]
   4e8b8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e8bc:	add	x1, x1, #0x4be
   4e8c0:	mov	x0, x28
   4e8c4:	blr	x2
   4e8c8:	tbz	w19, #21, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e8cc:	adrp	x1, 65000 <fields@@Base+0xee84>
   4e8d0:	add	x1, x1, #0x722
   4e8d4:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e8d8:	mov	w0, w20
   4e8dc:	bl	518ac <print_arm_disassembler_options@@Base+0x5d74>
   4e8e0:	cbz	x0, 4eb1c <print_arm_disassembler_options@@Base+0x2fe4>
   4e8e4:	mov	x2, x0
   4e8e8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e8ec:	add	x1, x1, #0xbe9
   4e8f0:	mov	x0, x28
   4e8f4:	ldur	x3, [x29, #-48]
   4e8f8:	blr	x3
   4e8fc:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e900:	ldur	x3, [x29, #-48]
   4e904:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e908:	adrp	x2, 6b000 <fields@@Base+0x14e84>
   4e90c:	add	x1, x1, #0xbe9
   4e910:	add	x2, x2, #0x3ab
   4e914:	mov	x0, x28
   4e918:	blr	x3
   4e91c:	ldur	x2, [x29, #-48]
   4e920:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e924:	add	x1, x1, #0x4ec
   4e928:	mov	x0, x28
   4e92c:	blr	x2
   4e930:	mov	x23, x24
   4e934:	mov	w24, w20
   4e938:	mov	x20, x25
   4e93c:	ldur	w25, [x29, #-72]
   4e940:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e944:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e948:	add	x1, x1, #0x33a
   4e94c:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4e950:	ldr	w2, [sp, #128]
   4e954:	ldur	x3, [x29, #-48]
   4e958:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4e95c:	add	x1, x1, #0x450
   4e960:	mov	x0, x28
   4e964:	blr	x3
   4e968:	tbnz	w19, #11, 4eac8 <print_arm_disassembler_options@@Base+0x2f90>
   4e96c:	tbnz	w19, #10, 4eae0 <print_arm_disassembler_options@@Base+0x2fa8>
   4e970:	tbnz	w19, #9, 4eaf8 <print_arm_disassembler_options@@Base+0x2fc0>
   4e974:	tbz	w19, #8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4e978:	b	4eb10 <print_arm_disassembler_options@@Base+0x2fd8>
   4e97c:	ldr	x8, [sp, #144]
   4e980:	cmp	w8, #0xf
   4e984:	b.hi	4eb64 <print_arm_disassembler_options@@Base+0x302c>  // b.pmore
   4e988:	ldr	x11, [sp, #144]
   4e98c:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   4e990:	add	x8, x8, #0x154
   4e994:	mov	w22, wzr
   4e998:	adr	x9, 4e808 <print_arm_disassembler_options@@Base+0x2cd0>
   4e99c:	ldrb	w10, [x8, x11]
   4e9a0:	add	x9, x9, x10, lsl #2
   4e9a4:	ldr	x27, [sp, #208]
   4e9a8:	mov	w2, w27
   4e9ac:	br	x9
   4e9b0:	adrp	x27, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4e9b4:	ldr	w8, [x27, #1584]
   4e9b8:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4e9bc:	mov	w9, #0x90                  	// #144
   4e9c0:	add	x10, x10, #0xaf8
   4e9c4:	madd	x8, x8, x9, x10
   4e9c8:	ldur	x9, [x29, #-112]
   4e9cc:	ldur	x3, [x29, #-48]
   4e9d0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4e9d4:	add	x1, x1, #0x511
   4e9d8:	add	x8, x8, x9, lsl #3
   4e9dc:	ldr	x2, [x8, #16]
   4e9e0:	mov	x0, x28
   4e9e4:	blr	x3
   4e9e8:	ldr	w2, [sp, #56]
   4e9ec:	cbz	w2, 4ea04 <print_arm_disassembler_options@@Base+0x2ecc>
   4e9f0:	ldur	x3, [x29, #-48]
   4e9f4:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4e9f8:	add	x1, x1, #0x2db
   4e9fc:	mov	x0, x28
   4ea00:	blr	x3
   4ea04:	ldur	x2, [x29, #-48]
   4ea08:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ea0c:	add	x1, x1, #0x4be
   4ea10:	mov	x0, x28
   4ea14:	blr	x2
   4ea18:	b	4e93c <print_arm_disassembler_options@@Base+0x2e04>
   4ea1c:	tbz	w19, #24, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4ea20:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ea24:	add	x1, x1, #0x5f5
   4ea28:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4ea2c:	ldr	x1, [sp, #112]
   4ea30:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4ea34:	ldr	w2, [sp, #192]
   4ea38:	ldr	w3, [sp, #176]
   4ea3c:	ldur	x4, [x29, #-48]
   4ea40:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4ea44:	add	x1, x1, #0x314
   4ea48:	mov	x0, x28
   4ea4c:	blr	x4
   4ea50:	ldr	x23, [sp, #168]
   4ea54:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4ea58:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4ea5c:	add	x1, x1, #0x2ef
   4ea60:	b	4ea6c <print_arm_disassembler_options@@Base+0x2f34>
   4ea64:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4ea68:	add	x1, x1, #0x2e5
   4ea6c:	ldr	w2, [sp, #152]
   4ea70:	mov	x0, x28
   4ea74:	b	4e0e4 <print_arm_disassembler_options@@Base+0x25ac>
   4ea78:	cbz	w24, 4eb4c <print_arm_disassembler_options@@Base+0x3014>
   4ea7c:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4ea80:	add	x1, x1, #0x2f9
   4ea84:	mov	x0, x28
   4ea88:	mov	w2, w24
   4ea8c:	b	4e0e4 <print_arm_disassembler_options@@Base+0x25ac>
   4ea90:	ldr	w22, [sp, #84]
   4ea94:	b	4eaa4 <print_arm_disassembler_options@@Base+0x2f6c>
   4ea98:	ldr	w22, [sp, #80]
   4ea9c:	b	4eaa4 <print_arm_disassembler_options@@Base+0x2f6c>
   4eaa0:	ldr	w22, [sp, #88]
   4eaa4:	ldur	x3, [x29, #-48]
   4eaa8:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4eaac:	add	x1, x1, #0x336
   4eab0:	mov	x0, x28
   4eab4:	mov	w2, w22
   4eab8:	blr	x3
   4eabc:	mov	w8, w22
   4eac0:	mov	x23, x8
   4eac4:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4eac8:	ldur	x2, [x29, #-48]
   4eacc:	adrp	x1, 65000 <fields@@Base+0xee84>
   4ead0:	add	x1, x1, #0x20c
   4ead4:	mov	x0, x28
   4ead8:	blr	x2
   4eadc:	tbz	w19, #10, 4e970 <print_arm_disassembler_options@@Base+0x2e38>
   4eae0:	ldur	x2, [x29, #-48]
   4eae4:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4eae8:	add	x1, x1, #0xbea
   4eaec:	mov	x0, x28
   4eaf0:	blr	x2
   4eaf4:	tbz	w19, #9, 4e974 <print_arm_disassembler_options@@Base+0x2e3c>
   4eaf8:	ldur	x2, [x29, #-48]
   4eafc:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   4eb00:	add	x1, x1, #0x3a2
   4eb04:	mov	x0, x28
   4eb08:	blr	x2
   4eb0c:	tbz	w19, #8, 4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4eb10:	adrp	x1, 65000 <fields@@Base+0xee84>
   4eb14:	add	x1, x1, #0x1ba
   4eb18:	b	4eb54 <print_arm_disassembler_options@@Base+0x301c>
   4eb1c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4eb20:	add	x1, x1, #0x443
   4eb24:	mov	x0, x28
   4eb28:	mov	x2, x20
   4eb2c:	b	4e8f4 <print_arm_disassembler_options@@Base+0x2dbc>
   4eb30:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4eb34:	add	x1, x1, #0x443
   4eb38:	mov	x0, x28
   4eb3c:	mov	x2, x20
   4eb40:	ldur	x3, [x29, #-48]
   4eb44:	blr	x3
   4eb48:	b	4e938 <print_arm_disassembler_options@@Base+0x2e00>
   4eb4c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4eb50:	add	x1, x1, #0xaa9
   4eb54:	mov	x0, x28
   4eb58:	ldur	x2, [x29, #-48]
   4eb5c:	blr	x2
   4eb60:	b	4e0ec <print_arm_disassembler_options@@Base+0x25b4>
   4eb64:	ldur	x2, [x29, #-48]
   4eb68:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4eb6c:	add	x1, x1, #0x303
   4eb70:	mov	x0, x28
   4eb74:	blr	x2
   4eb78:	b	4eba0 <print_arm_disassembler_options@@Base+0x3068>
   4eb7c:	mov	w22, #0x1                   	// #1
   4eb80:	b	4ebac <print_arm_disassembler_options@@Base+0x3074>
   4eb84:	ldr	x8, [sp, #64]
   4eb88:	mov	w2, w8
   4eb8c:	ldur	x3, [x29, #-48]
   4eb90:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4eb94:	add	x1, x1, #0xe93
   4eb98:	mov	x0, x28
   4eb9c:	blr	x3
   4eba0:	ldur	w25, [x29, #-72]
   4eba4:	b	4e884 <print_arm_disassembler_options@@Base+0x2d4c>
   4eba8:	mov	w22, wzr
   4ebac:	ldr	x27, [sp, #64]
   4ebb0:	b	4e808 <print_arm_disassembler_options@@Base+0x2cd0>
   4ebb4:	ldr	x27, [sp, #208]
   4ebb8:	mov	w22, #0x1                   	// #1
   4ebbc:	b	4e808 <print_arm_disassembler_options@@Base+0x2cd0>
   4ebc0:	add	x8, x23, #0x10
   4ebc4:	cmp	x8, #0x31
   4ebc8:	b.cc	4ebe4 <print_arm_disassembler_options@@Base+0x30ac>  // b.lo, b.ul, b.last
   4ebcc:	ldur	x3, [x29, #-48]
   4ebd0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ebd4:	add	x1, x1, #0x48e
   4ebd8:	mov	x0, x28
   4ebdc:	mov	x2, x23
   4ebe0:	blr	x3
   4ebe4:	ldur	w8, [x29, #-60]
   4ebe8:	cbz	w8, 4d478 <print_arm_disassembler_options@@Base+0x1940>
   4ebec:	ldur	x2, [x29, #-48]
   4ebf0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4ebf4:	add	x1, x1, #0xa86
   4ebf8:	mov	x0, x28
   4ebfc:	blr	x2
   4ec00:	b	4d478 <print_arm_disassembler_options@@Base+0x1940>
   4ec04:	ldur	x3, [x29, #-48]
   4ec08:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4ec0c:	add	x1, x1, #0x497
   4ec10:	mov	x0, x28
   4ec14:	mov	w2, w19
   4ec18:	add	sp, sp, #0x1f0
   4ec1c:	ldp	x20, x19, [sp, #80]
   4ec20:	ldp	x22, x21, [sp, #64]
   4ec24:	ldp	x24, x23, [sp, #48]
   4ec28:	ldp	x26, x25, [sp, #32]
   4ec2c:	ldp	x28, x27, [sp, #16]
   4ec30:	ldp	x29, x30, [sp], #96
   4ec34:	br	x3
   4ec38:	ldr	x10, [sp, #16]
   4ec3c:	ldur	x11, [x29, #-184]
   4ec40:	tst	x19, #0x200000
   4ec44:	cset	w9, eq  // eq = none
   4ec48:	cmp	x10, #0x80, lsl #12
   4ec4c:	cset	w10, ne  // ne = any
   4ec50:	cmp	x11, #0x100, lsl #12
   4ec54:	cset	w11, ne  // ne = any
   4ec58:	sub	x20, x18, #0x50
   4ec5c:	and	w10, w11, w10
   4ec60:	b	4ec7c <print_arm_disassembler_options@@Base+0x3144>
   4ec64:	tst	x19, #0x100000
   4ec68:	and	x9, x19, #0x180000
   4ec6c:	cset	w10, eq  // eq = none
   4ec70:	cmp	x9, #0x80, lsl #12
   4ec74:	sub	x20, x18, #0x50
   4ec78:	cset	w9, ne  // ne = any
   4ec7c:	and	w11, w9, w10
   4ec80:	tst	w9, w10
   4ec84:	mov	w9, #0x11                  	// #17
   4ec88:	stur	x11, [x29, #-80]
   4ec8c:	csel	w9, wzr, w9, ne  // ne = any
   4ec90:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ec94:	mov	w9, #0x10001000            	// #268439552
   4ec98:	and	x11, x19, x9
   4ec9c:	cmp	x11, x9
   4eca0:	mov	w10, #0x10                  	// #16
   4eca4:	cset	w9, eq  // eq = none
   4eca8:	sub	x20, x18, #0x50
   4ecac:	stur	x9, [x29, #-80]
   4ecb0:	cinc	w9, w10, ne  // ne = any
   4ecb4:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ecb8:	sub	x20, x18, #0x50
   4ecbc:	tst	x19, #0x100
   4ecc0:	mov	w9, #0x11                  	// #17
   4ecc4:	mov	w10, #0x4                   	// #4
   4ecc8:	ubfx	x11, x19, #8, #1
   4eccc:	b	4edb4 <print_arm_disassembler_options@@Base+0x327c>
   4ecd0:	ldr	x9, [sp, #56]
   4ecd4:	sub	x20, x18, #0x50
   4ecd8:	mov	w10, #0x2                   	// #2
   4ecdc:	cmp	x9, #0x80, lsl #12
   4ece0:	mov	w9, #0x11                  	// #17
   4ece4:	cset	w11, eq  // eq = none
   4ece8:	b	4ef00 <print_arm_disassembler_options@@Base+0x33c8>
   4ecec:	sub	x20, x18, #0x50
   4ecf0:	tst	x19, #0x180000
   4ecf4:	b	4ee98 <print_arm_disassembler_options@@Base+0x3360>
   4ecf8:	mov	w9, #0xc                   	// #12
   4ecfc:	mov	w11, wzr
   4ed00:	stp	w9, wzr, [x29, #-60]
   4ed04:	mov	w27, #0x11                  	// #17
   4ed08:	sub	x20, x18, #0x50
   4ed0c:	mov	w9, w11
   4ed10:	stur	w27, [x29, #-128]
   4ed14:	stur	x9, [x29, #-80]
   4ed18:	b	4f030 <print_arm_disassembler_options@@Base+0x34f8>
   4ed1c:	ldr	x9, [sp, #24]
   4ed20:	sub	x20, x18, #0x50
   4ed24:	cmp	x9, #0x100
   4ed28:	mov	w9, #0x6                   	// #6
   4ed2c:	b	4eef8 <print_arm_disassembler_options@@Base+0x33c0>
   4ed30:	sub	x20, x18, #0x50
   4ed34:	tbnz	w19, #5, 4ef08 <print_arm_disassembler_options@@Base+0x33d0>
   4ed38:	ubfx	w9, w19, #22, #1
   4ed3c:	stur	x9, [x29, #-80]
   4ed40:	mov	w9, #0x11                  	// #17
   4ed44:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ed48:	sub	x20, x18, #0x50
   4ed4c:	ubfx	x9, x19, #21, #2
   4ed50:	ubfx	x10, x19, #5, #2
   4ed54:	tbz	w19, #23, 4ef10 <print_arm_disassembler_options@@Base+0x33d8>
   4ed58:	cbnz	x10, 4ef10 <print_arm_disassembler_options@@Base+0x33d8>
   4ed5c:	cmp	x9, #0x2
   4ed60:	mov	w9, #0x11                  	// #17
   4ed64:	mov	w10, #0xe                   	// #14
   4ed68:	cset	w11, cc  // cc = lo, ul, last
   4ed6c:	stur	x11, [x29, #-80]
   4ed70:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   4ed74:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ed78:	ldr	x9, [sp, #24]
   4ed7c:	sub	x20, x18, #0x50
   4ed80:	cmp	x9, #0x100
   4ed84:	b.eq	4eda0 <print_arm_disassembler_options@@Base+0x3268>  // b.none
   4ed88:	mov	w9, #0x6                   	// #6
   4ed8c:	b	4efac <print_arm_disassembler_options@@Base+0x3474>
   4ed90:	ldr	x9, [sp, #24]
   4ed94:	sub	x20, x18, #0x50
   4ed98:	cmp	x9, #0x180
   4ed9c:	b.ne	4ef3c <print_arm_disassembler_options@@Base+0x3404>  // b.any
   4eda0:	ldr	x11, [sp, #216]
   4eda4:	mov	w9, #0x11                  	// #17
   4eda8:	mov	w10, #0xa                   	// #10
   4edac:	cmp	x11, #0x0
   4edb0:	lsr	x11, x11, #28
   4edb4:	csel	w9, w10, w9, eq  // eq = none
   4edb8:	stur	w9, [x29, #-128]
   4edbc:	eor	w9, w11, #0x1
   4edc0:	b	4ed14 <print_arm_disassembler_options@@Base+0x31dc>
   4edc4:	sub	x20, x18, #0x50
   4edc8:	mov	w11, #0x11                  	// #17
   4edcc:	tbnz	w19, #5, 4ef44 <print_arm_disassembler_options@@Base+0x340c>
   4edd0:	mov	w9, #0x500                 	// #1280
   4edd4:	cmp	x1, #0x100
   4edd8:	and	x9, x19, x9
   4eddc:	cset	w10, eq  // eq = none
   4ede0:	cmp	x9, #0x100
   4ede4:	cset	w9, eq  // eq = none
   4ede8:	orr	w9, w10, w9
   4edec:	stur	x9, [x29, #-80]
   4edf0:	cmp	w9, #0x0
   4edf4:	mov	w9, #0xf                   	// #15
   4edf8:	csel	w11, w9, w11, ne  // ne = any
   4edfc:	stur	w11, [x29, #-128]
   4ee00:	b	4f030 <print_arm_disassembler_options@@Base+0x34f8>
   4ee04:	ubfx	x9, x19, #7, #2
   4ee08:	cmp	x9, #0x3
   4ee0c:	sub	x20, x18, #0x50
   4ee10:	b.eq	4efac <print_arm_disassembler_options@@Base+0x3474>  // b.none
   4ee14:	ldur	x28, [x29, #-72]
   4ee18:	ldp	x23, x22, [x29, #-120]
   4ee1c:	ldr	x10, [sp, #216]
   4ee20:	ldp	x15, x16, [x29, #-152]
   4ee24:	cbnz	x10, 50568 <print_arm_disassembler_options@@Base+0x4a30>
   4ee28:	cmp	x9, #0x1
   4ee2c:	b.ne	50568 <print_arm_disassembler_options@@Base+0x4a30>  // b.any
   4ee30:	mov	w9, #0x9                   	// #9
   4ee34:	b	4ee58 <print_arm_disassembler_options@@Base+0x3320>
   4ee38:	ubfx	x9, x19, #7, #2
   4ee3c:	sub	x20, x18, #0x50
   4ee40:	cbz	x9, 5054c <print_arm_disassembler_options@@Base+0x4a14>
   4ee44:	ldur	x28, [x29, #-72]
   4ee48:	ldp	x23, x22, [x29, #-120]
   4ee4c:	ldp	x15, x16, [x29, #-152]
   4ee50:	cmp	x9, #0x3
   4ee54:	b.ne	5055c <print_arm_disassembler_options@@Base+0x4a24>  // b.any
   4ee58:	stur	w9, [x29, #-128]
   4ee5c:	mov	w9, #0x1                   	// #1
   4ee60:	stur	x9, [x29, #-80]
   4ee64:	b	4f03c <print_arm_disassembler_options@@Base+0x3504>
   4ee68:	sub	x20, x18, #0x50
   4ee6c:	tbnz	w19, #21, 4ef54 <print_arm_disassembler_options@@Base+0x341c>
   4ee70:	mov	w9, #0xb                   	// #11
   4ee74:	b	4efac <print_arm_disassembler_options@@Base+0x3474>
   4ee78:	ldr	x9, [sp, #24]
   4ee7c:	sub	x20, x18, #0x50
   4ee80:	cmp	x9, #0x180
   4ee84:	mov	w9, #0x7                   	// #7
   4ee88:	b	4eef8 <print_arm_disassembler_options@@Base+0x33c0>
   4ee8c:	ldr	x9, [sp, #24]
   4ee90:	sub	x20, x18, #0x50
   4ee94:	cmp	x9, #0x0
   4ee98:	mov	w9, #0x11                  	// #17
   4ee9c:	cset	w10, eq  // eq = none
   4eea0:	stur	x10, [x29, #-80]
   4eea4:	csinc	w9, w9, wzr, ne  // ne = any
   4eea8:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4eeac:	mov	w9, #0x60                  	// #96
   4eeb0:	movk	w9, #0x40, lsl #16
   4eeb4:	and	x9, x19, x9
   4eeb8:	sub	x20, x18, #0x50
   4eebc:	mov	w10, #0x11                  	// #17
   4eec0:	mov	w11, #0xd                   	// #13
   4eec4:	cmp	x9, #0x40
   4eec8:	b	4f020 <print_arm_disassembler_options@@Base+0x34e8>
   4eecc:	ubfx	x9, x19, #19, #1
   4eed0:	sub	x20, x18, #0x50
   4eed4:	stur	x9, [x29, #-80]
   4eed8:	tst	x19, #0x80000
   4eedc:	mov	w9, #0x2                   	// #2
   4eee0:	mov	w10, #0x11                  	// #17
   4eee4:	b	4ef8c <print_arm_disassembler_options@@Base+0x3454>
   4eee8:	ldr	x9, [sp, #56]
   4eeec:	sub	x20, x18, #0x50
   4eef0:	cmp	x9, #0x0
   4eef4:	mov	w9, #0x5                   	// #5
   4eef8:	mov	w10, #0x11                  	// #17
   4eefc:	cset	w11, ne  // ne = any
   4ef00:	stur	x11, [x29, #-80]
   4ef04:	b	4ef8c <print_arm_disassembler_options@@Base+0x3454>
   4ef08:	mov	w9, #0x11                  	// #17
   4ef0c:	b	4efac <print_arm_disassembler_options@@Base+0x3474>
   4ef10:	cmp	x10, #0x2
   4ef14:	cset	w11, eq  // eq = none
   4ef18:	cmp	x9, #0x2
   4ef1c:	cset	w9, cc  // cc = lo, ul, last
   4ef20:	mov	w10, #0x11                  	// #17
   4ef24:	and	w12, w11, w9
   4ef28:	tst	w11, w9
   4ef2c:	mov	w9, #0xd                   	// #13
   4ef30:	stur	x12, [x29, #-80]
   4ef34:	csel	w9, w9, w10, ne  // ne = any
   4ef38:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ef3c:	mov	w9, #0x7                   	// #7
   4ef40:	b	4efac <print_arm_disassembler_options@@Base+0x3474>
   4ef44:	mov	w9, #0x11                  	// #17
   4ef48:	stur	w9, [x29, #-128]
   4ef4c:	stur	xzr, [x29, #-80]
   4ef50:	b	4f030 <print_arm_disassembler_options@@Base+0x34f8>
   4ef54:	mov	w9, #0x200                 	// #512
   4ef58:	movk	w9, #0x30, lsl #16
   4ef5c:	and	x9, x19, x9
   4ef60:	mov	w10, #0x11                  	// #17
   4ef64:	mov	w11, #0xc                   	// #12
   4ef68:	cmp	x9, #0x200, lsl #12
   4ef6c:	b	4f020 <print_arm_disassembler_options@@Base+0x34e8>
   4ef70:	mov	w9, #0xc                   	// #12
   4ef74:	stp	w9, wzr, [x29, #-60]
   4ef78:	ldr	x9, [sp, #24]
   4ef7c:	sub	x20, x18, #0x50
   4ef80:	mov	w10, #0x3                   	// #3
   4ef84:	cmp	x9, #0x180
   4ef88:	mov	w9, #0x11                  	// #17
   4ef8c:	csel	w9, w10, w9, eq  // eq = none
   4ef90:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   4ef94:	mov	w9, #0xc                   	// #12
   4ef98:	stp	w9, wzr, [x29, #-60]
   4ef9c:	ubfx	x9, x19, #7, #2
   4efa0:	cmp	x9, #0x3
   4efa4:	sub	x20, x18, #0x50
   4efa8:	b.ne	4efb8 <print_arm_disassembler_options@@Base+0x3480>  // b.any
   4efac:	stur	w9, [x29, #-128]
   4efb0:	mov	w9, #0x1                   	// #1
   4efb4:	b	4ed14 <print_arm_disassembler_options@@Base+0x31dc>
   4efb8:	ldr	x10, [sp, #216]
   4efbc:	mov	w11, #0x8                   	// #8
   4efc0:	orr	x9, x9, x10
   4efc4:	mov	w10, #0x11                  	// #17
   4efc8:	cmp	x9, #0x0
   4efcc:	b	4f020 <print_arm_disassembler_options@@Base+0x34e8>
   4efd0:	mov	w9, #0xc                   	// #12
   4efd4:	stp	w9, wzr, [x29, #-60]
   4efd8:	ldr	x9, [sp, #56]
   4efdc:	mov	w10, #0x3                   	// #3
   4efe0:	sub	x20, x18, #0x50
   4efe4:	cmp	x9, #0xc0, lsl #12
   4efe8:	mov	w9, #0x11                  	// #17
   4efec:	csel	w9, w10, w9, eq  // eq = none
   4eff0:	stur	w9, [x29, #-128]
   4eff4:	mov	w9, w0
   4eff8:	b	4ed14 <print_arm_disassembler_options@@Base+0x31dc>
   4effc:	mov	w9, #0xc                   	// #12
   4f000:	stp	w9, wzr, [x29, #-60]
   4f004:	lsr	x9, x19, #21
   4f008:	and	x9, x9, #0x2
   4f00c:	bfxil	x9, x19, #5, #1
   4f010:	sub	x20, x18, #0x50
   4f014:	mov	w10, #0x11                  	// #17
   4f018:	mov	w11, #0x3                   	// #3
   4f01c:	cmp	x9, #0x3
   4f020:	cset	w9, eq  // eq = none
   4f024:	stur	x9, [x29, #-80]
   4f028:	csel	w9, w11, w10, eq  // eq = none
   4f02c:	stur	w9, [x29, #-128]
   4f030:	ldur	x28, [x29, #-72]
   4f034:	ldp	x23, x22, [x29, #-120]
   4f038:	ldp	x15, x16, [x29, #-152]
   4f03c:	lsr	x12, x19, #21
   4f040:	mov	w13, #0x3                   	// #3
   4f044:	and	x15, x15, #0x70
   4f048:	lsr	x2, x19, #10
   4f04c:	ubfx	x4, x19, #6, #2
   4f050:	tst	x13, x19, lsr #5
   4f054:	and	x12, x12, #0x80
   4f058:	orr	x13, x15, x8
   4f05c:	and	w8, w2, #0x1c
   4f060:	orr	w8, w4, w8
   4f064:	orr	x4, x13, x12
   4f068:	mov	w17, #0x3c000000            	// #1006632960
   4f06c:	mov	w0, #0x40000000            	// #1073741824
   4f070:	add	x1, x28, #0x1
   4f074:	cset	w7, eq  // eq = none
   4f078:	tst	w4, #0x40
   4f07c:	stur	x1, [x29, #-224]
   4f080:	mov	w1, #0x60                  	// #96
   4f084:	mov	w3, #0x30                  	// #48
   4f088:	mov	w26, #0x40                  	// #64
   4f08c:	csel	x17, x0, x17, eq  // eq = none
   4f090:	tst	x19, #0x80
   4f094:	movk	w1, #0x40, lsl #16
   4f098:	mov	w21, #0x20                  	// #32
   4f09c:	adrp	x5, 55000 <xexit@@Base+0x184c>
   4f0a0:	adrp	x27, 5e000 <fields@@Base+0x7e84>
   4f0a4:	csel	w0, w26, w3, eq  // eq = none
   4f0a8:	cmp	w8, #0x0
   4f0ac:	lsr	x9, x19, #16
   4f0b0:	add	x5, x5, #0xda7
   4f0b4:	add	x27, x27, #0x39c
   4f0b8:	sub	x15, x1, #0x40
   4f0bc:	csel	w8, w21, w8, eq  // eq = none
   4f0c0:	tst	x19, #0x800000
   4f0c4:	stur	x9, [x29, #-216]
   4f0c8:	lsr	x9, x19, #5
   4f0cc:	stur	w8, [x29, #-176]
   4f0d0:	csel	x8, x27, x5, eq  // eq = none
   4f0d4:	tst	x19, x15
   4f0d8:	ubfx	x6, x9, #1, #1
   4f0dc:	mov	w26, #0x1                   	// #1
   4f0e0:	cset	w15, ne  // ne = any
   4f0e4:	tst	x19, #0x20
   4f0e8:	ubfx	x10, x19, #5, #2
   4f0ec:	lsr	x11, x19, #15
   4f0f0:	stur	w0, [x29, #-152]
   4f0f4:	stur	x8, [x29, #-192]
   4f0f8:	csel	x8, x6, xzr, ne  // ne = any
   4f0fc:	cinc	x0, x26, ne  // ne = any
   4f100:	tst	x19, #0x400000
   4f104:	csel	x8, x10, x8, ne  // ne = any
   4f108:	mov	w10, #0x4                   	// #4
   4f10c:	and	x11, x11, #0x2
   4f110:	csel	x10, x10, x0, ne  // ne = any
   4f114:	bfxil	x11, x19, #21, #1
   4f118:	and	w14, w16, #0xf
   4f11c:	add	x0, x28, #0x2
   4f120:	madd	x8, x10, x11, x8
   4f124:	stur	xzr, [x29, #-96]
   4f128:	stur	w14, [x29, #-144]
   4f12c:	str	x0, [sp, #184]
   4f130:	stur	x8, [x29, #-200]
   4f134:	add	x8, x28, #0x3
   4f138:	str	x8, [sp, #176]
   4f13c:	ldp	x8, x10, [x29, #-168]
   4f140:	lsl	w14, w16, #3
   4f144:	mov	w16, #0x100                 	// #256
   4f148:	and	x11, x14, #0x8
   4f14c:	and	x3, x10, #0x2
   4f150:	lsl	x10, x12, #24
   4f154:	and	x8, x8, #0x6
   4f158:	bfi	x10, x13, #19, #7
   4f15c:	mov	w13, #0x2                   	// #2
   4f160:	lsl	x12, x16, x11
   4f164:	add	x11, x11, #0x8
   4f168:	lsr	x18, x19, #6
   4f16c:	lsl	x11, x4, x11
   4f170:	sub	x12, x12, #0x1
   4f174:	orr	x10, x10, x17
   4f178:	bfxil	x8, x19, #7, #1
   4f17c:	and	x16, x9, #0x2
   4f180:	bfxil	x13, x19, #7, #1
   4f184:	orr	x11, x11, x12
   4f188:	lsl	w12, w19, #1
   4f18c:	str	x10, [sp, #96]
   4f190:	and	x10, x18, #0x8
   4f194:	and	x14, x19, x1
   4f198:	bfxil	x3, x19, #7, #1
   4f19c:	str	x13, [sp, #208]
   4f1a0:	bfxil	x16, x19, #4, #1
   4f1a4:	orr	w13, w15, w7
   4f1a8:	sub	x8, x8, #0x2
   4f1ac:	str	x11, [sp, #136]
   4f1b0:	and	x11, x18, #0x18
   4f1b4:	str	x14, [sp, #232]
   4f1b8:	and	x9, x12, #0x2
   4f1bc:	and	x12, x2, #0x4
   4f1c0:	stur	x16, [x29, #-168]
   4f1c4:	stur	w13, [x29, #-160]
   4f1c8:	orr	x13, x3, #0x4
   4f1cc:	str	x8, [sp, #160]
   4f1d0:	lsl	x8, x4, x10
   4f1d4:	str	x13, [sp, #128]
   4f1d8:	bfxil	x9, x19, #7, #1
   4f1dc:	orr	x13, x3, x12
   4f1e0:	str	x8, [sp, #224]
   4f1e4:	lsl	x8, x4, x11
   4f1e8:	str	x13, [sp, #120]
   4f1ec:	stur	x8, [x29, #-208]
   4f1f0:	orr	x8, x9, x12
   4f1f4:	str	x8, [sp, #112]
   4f1f8:	orr	x8, x9, #0x4
   4f1fc:	lsr	x0, x19, #7
   4f200:	str	x8, [sp, #104]
   4f204:	ubfx	x8, x19, #7, #1
   4f208:	and	x14, x0, #0x4
   4f20c:	str	x8, [sp, #200]
   4f210:	ubfx	x8, x19, #7, #2
   4f214:	bfxil	x14, x19, #27, #2
   4f218:	str	x8, [sp, #152]
   4f21c:	ubfx	x8, x19, #8, #2
   4f220:	and	x30, x19, #0x7f
   4f224:	bfxil	x14, x19, #8, #1
   4f228:	str	x8, [sp, #240]
   4f22c:	ubfx	x8, x19, #16, #3
   4f230:	str	x14, [sp, #168]
   4f234:	stur	x8, [x29, #-136]
   4f238:	lsl	x8, x30, #3
   4f23c:	str	x8, [sp, #192]
   4f240:	lsl	x8, x30, #2
   4f244:	mov	x27, x4
   4f248:	ubfx	x21, x19, #7, #3
   4f24c:	stur	x8, [x29, #-232]
   4f250:	lsl	x8, x30, #1
   4f254:	stur	x30, [x29, #-48]
   4f258:	str	x8, [sp, #248]
   4f25c:	ldrb	w2, [x24]
   4f260:	cmp	w2, #0x25
   4f264:	b.eq	4f280 <print_arm_disassembler_options@@Base+0x3748>  // b.none
   4f268:	cbz	w2, 50114 <print_arm_disassembler_options@@Base+0x45dc>
   4f26c:	adrp	x1, 65000 <fields@@Base+0xee84>
   4f270:	mov	x0, x23
   4f274:	add	x1, x1, #0x1b9
   4f278:	blr	x22
   4f27c:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f280:	ldrb	w8, [x24, #1]!
   4f284:	mov	w13, #0xff                  	// #255
   4f288:	sub	w9, w8, #0x54
   4f28c:	cmp	w9, #0x23
   4f290:	b.hi	4f2c0 <print_arm_disassembler_options@@Base+0x3788>  // b.pmore
   4f294:	adrp	x11, 5d000 <fields@@Base+0x6e84>
   4f298:	add	x11, x11, #0xdda
   4f29c:	adr	x8, 4f2ac <print_arm_disassembler_options@@Base+0x3774>
   4f2a0:	ldrh	w10, [x11, x9, lsl #1]
   4f2a4:	add	x8, x8, x10, lsl #2
   4f2a8:	br	x8
   4f2ac:	mov	x0, x23
   4f2b0:	tbnz	w19, #12, 4f974 <print_arm_disassembler_options@@Base+0x3e3c>
   4f2b4:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4f2b8:	add	x1, x1, #0xa6a
   4f2bc:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f2c0:	sub	w9, w8, #0x30
   4f2c4:	cmp	w9, #0x1e
   4f2c8:	b.hi	4f394 <print_arm_disassembler_options@@Base+0x385c>  // b.pmore
   4f2cc:	adrp	x12, 5d000 <fields@@Base+0x6e84>
   4f2d0:	add	x12, x12, #0xd9c
   4f2d4:	adr	x8, 4f2e4 <print_arm_disassembler_options@@Base+0x37ac>
   4f2d8:	ldrh	w10, [x12, x9, lsl #1]
   4f2dc:	add	x8, x8, x10, lsl #2
   4f2e0:	br	x8
   4f2e4:	sub	x2, x29, #0x28
   4f2e8:	sub	x3, x29, #0x1c
   4f2ec:	mov	x0, x24
   4f2f0:	mov	x1, x19
   4f2f4:	bl	51ac4 <print_arm_disassembler_options@@Base+0x5f8c>
   4f2f8:	ldrb	w8, [x0]
   4f2fc:	mov	x24, x0
   4f300:	cmp	w8, #0x59
   4f304:	b.le	4f334 <print_arm_disassembler_options@@Base+0x37fc>
   4f308:	sub	w9, w8, #0x63
   4f30c:	cmp	w9, #0x15
   4f310:	b.hi	4f684 <print_arm_disassembler_options@@Base+0x3b4c>  // b.pmore
   4f314:	adrp	x11, 5d000 <fields@@Base+0x6e84>
   4f318:	add	x11, x11, #0xe34
   4f31c:	adr	x8, 4f32c <print_arm_disassembler_options@@Base+0x37f4>
   4f320:	ldrh	w10, [x11, x9, lsl #1]
   4f324:	add	x8, x8, x10, lsl #2
   4f328:	br	x8
   4f32c:	ldur	x8, [x29, #-40]
   4f330:	b	4f598 <print_arm_disassembler_options@@Base+0x3a60>
   4f334:	sub	w9, w8, #0x41
   4f338:	cmp	w9, #0x8
   4f33c:	b.hi	4f374 <print_arm_disassembler_options@@Base+0x383c>  // b.pmore
   4f340:	adrp	x11, 5d000 <fields@@Base+0x6e84>
   4f344:	add	x11, x11, #0xe22
   4f348:	adr	x8, 4f358 <print_arm_disassembler_options@@Base+0x3820>
   4f34c:	ldrh	w10, [x11, x9, lsl #1]
   4f350:	add	x8, x8, x10, lsl #2
   4f354:	br	x8
   4f358:	ldur	x8, [x29, #-40]
   4f35c:	cmp	x8, #0x1
   4f360:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4f364:	adrp	x1, 6a000 <fields@@Base+0x13e84>
   4f368:	mov	x0, x23
   4f36c:	add	x1, x1, #0xbf9
   4f370:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f374:	cmp	w8, #0x51
   4f378:	b.ne	4f61c <print_arm_disassembler_options@@Base+0x3ae4>  // b.any
   4f37c:	ldur	x2, [x29, #-40]
   4f380:	tbnz	w2, #3, 4fa34 <print_arm_disassembler_options@@Base+0x3efc>
   4f384:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f388:	mov	x0, x23
   4f38c:	add	x1, x1, #0x5a2
   4f390:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4f394:	cmp	w8, #0x25
   4f398:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4f39c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f3a0:	mov	x0, x23
   4f3a4:	add	x1, x1, #0x3fb
   4f3a8:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f3ac:	ldr	w8, [x20]
   4f3b0:	sub	w9, w8, #0x36
   4f3b4:	cmp	w9, #0x3
   4f3b8:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f3bc:	ldp	x8, x0, [x25]
   4f3c0:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f3c4:	add	x12, x12, #0x1e
   4f3c8:	adr	x10, 4f3d8 <print_arm_disassembler_options@@Base+0x38a0>
   4f3cc:	ldrh	w11, [x12, x9, lsl #1]
   4f3d0:	add	x10, x10, x11, lsl #2
   4f3d4:	br	x10
   4f3d8:	ldr	x11, [sp, #168]
   4f3dc:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f3e0:	add	x12, x12, #0x32
   4f3e4:	adr	x9, 4fb64 <print_arm_disassembler_options@@Base+0x402c>
   4f3e8:	ldrb	w10, [x12, x11]
   4f3ec:	add	x9, x9, x10, lsl #2
   4f3f0:	br	x9
   4f3f4:	ldr	w8, [x20]
   4f3f8:	cmp	w8, #0x41
   4f3fc:	b.ne	4f8d0 <print_arm_disassembler_options@@Base+0x3d98>  // b.any
   4f400:	tbnz	w19, #23, 4f8e8 <print_arm_disassembler_options@@Base+0x3db0>
   4f404:	ldr	x8, [sp, #232]
   4f408:	cbnz	x8, 4f8d8 <print_arm_disassembler_options@@Base+0x3da0>
   4f40c:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f410:	ldr	w8, [x20]
   4f414:	sub	w9, w8, #0x1
   4f418:	cmp	w9, #0xf
   4f41c:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f420:	ldp	x8, x0, [x25]
   4f424:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f428:	add	x12, x12, #0x4e
   4f42c:	adr	x10, 4f43c <print_arm_disassembler_options@@Base+0x3904>
   4f430:	ldrh	w11, [x12, x9, lsl #1]
   4f434:	add	x10, x10, x11, lsl #2
   4f438:	br	x10
   4f43c:	ldr	x9, [sp, #200]
   4f440:	b	4fcd0 <print_arm_disassembler_options@@Base+0x4198>
   4f444:	mov	x8, x25
   4f448:	ldur	w3, [x29, #-144]
   4f44c:	ldr	x25, [x25, #8]
   4f450:	ldr	x23, [x8]
   4f454:	mov	x22, x8
   4f458:	cmp	w3, #0x8
   4f45c:	b.cs	4f8f8 <print_arm_disassembler_options@@Base+0x3dc0>  // b.hs, b.nlast
   4f460:	ldur	x28, [x29, #-208]
   4f464:	mov	w8, wzr
   4f468:	mov	x2, xzr
   4f46c:	mov	w9, #0x3                   	// #3
   4f470:	b	4f910 <print_arm_disassembler_options@@Base+0x3dd8>
   4f474:	ldp	x8, x0, [x25]
   4f478:	ldur	w9, [x29, #-160]
   4f47c:	tbz	w9, #0, 4f968 <print_arm_disassembler_options@@Base+0x3e30>
   4f480:	ldur	x2, [x29, #-200]
   4f484:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f488:	add	x1, x1, #0x477
   4f48c:	b	4fce4 <print_arm_disassembler_options@@Base+0x41ac>
   4f490:	ldur	w2, [x29, #-152]
   4f494:	b	4f4d4 <print_arm_disassembler_options@@Base+0x399c>
   4f498:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   4f49c:	add	x8, x8, #0x5d0
   4f4a0:	ldr	x2, [x8, x28, lsl #3]
   4f4a4:	b	4f9b0 <print_arm_disassembler_options@@Base+0x3e78>
   4f4a8:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4f4ac:	ldr	w9, [x8, #1088]
   4f4b0:	ldp	x8, x0, [x25]
   4f4b4:	cmp	w9, #0x2
   4f4b8:	b.eq	4f9f8 <print_arm_disassembler_options@@Base+0x3ec0>  // b.none
   4f4bc:	cmp	w9, #0x1
   4f4c0:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4f4c4:	adrp	x1, 5b000 <fields@@Base+0x4e84>
   4f4c8:	add	x1, x1, #0xf57
   4f4cc:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4f4d0:	ldur	w2, [x29, #-176]
   4f4d4:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4f4d8:	mov	x0, x23
   4f4dc:	add	x1, x1, #0x336
   4f4e0:	b	4f278 <print_arm_disassembler_options@@Base+0x3740>
   4f4e4:	tbnz	w19, #23, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f4e8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f4ec:	mov	x0, x23
   4f4f0:	add	x1, x1, #0x39c
   4f4f4:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f4f8:	ldr	w8, [x20]
   4f4fc:	sub	w9, w8, #0x20
   4f500:	cmp	w9, #0x9
   4f504:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f508:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f50c:	add	x12, x12, #0x6e
   4f510:	ldp	x8, x0, [x25]
   4f514:	adr	x10, 4f530 <print_arm_disassembler_options@@Base+0x39f8>
   4f518:	ldrh	w11, [x12, x9, lsl #1]
   4f51c:	add	x10, x10, x11, lsl #2
   4f520:	ldur	x9, [x29, #-136]
   4f524:	ldur	x4, [x29, #-48]
   4f528:	ldur	x11, [x29, #-104]
   4f52c:	br	x10
   4f530:	ldur	x9, [x29, #-136]
   4f534:	ldr	x4, [sp, #248]
   4f538:	b	4fb88 <print_arm_disassembler_options@@Base+0x4050>
   4f53c:	ldr	w9, [x20]
   4f540:	ldp	x8, x0, [x25]
   4f544:	cmp	w9, #0x3a
   4f548:	b.eq	4fa04 <print_arm_disassembler_options@@Base+0x3ecc>  // b.none
   4f54c:	cmp	w9, #0x39
   4f550:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4f554:	ldr	x11, [sp, #240]
   4f558:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f55c:	add	x12, x12, #0x4a
   4f560:	adr	x9, 4fa28 <print_arm_disassembler_options@@Base+0x3ef0>
   4f564:	ldrb	w10, [x12, x11]
   4f568:	add	x9, x9, x10, lsl #2
   4f56c:	br	x9
   4f570:	tbz	w19, #0, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f574:	ldur	x2, [x29, #-168]
   4f578:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4f57c:	mov	x0, x23
   4f580:	add	x1, x1, #0x347
   4f584:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4f588:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   4f58c:	ldr	w8, [x8, #1072]
   4f590:	cbz	w8, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f594:	ubfx	x8, x8, #4, #4
   4f598:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4f59c:	add	x9, x9, #0xf38
   4f5a0:	ldr	x2, [x9, x8, lsl #3]
   4f5a4:	b	4f9b0 <print_arm_disassembler_options@@Base+0x3e78>
   4f5a8:	tbz	w19, #12, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f5ac:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   4f5b0:	mov	x0, x23
   4f5b4:	add	x1, x1, #0x3a2
   4f5b8:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f5bc:	ldr	w8, [x20]
   4f5c0:	sub	w9, w8, #0x1c
   4f5c4:	cmp	w9, #0x3
   4f5c8:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f5cc:	ldp	x8, x0, [x25]
   4f5d0:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4f5d4:	add	x12, x12, #0x1a
   4f5d8:	adr	x10, 4f5e8 <print_arm_disassembler_options@@Base+0x3ab0>
   4f5dc:	ldrb	w11, [x12, x9]
   4f5e0:	add	x10, x10, x11, lsl #2
   4f5e4:	br	x10
   4f5e8:	cmp	x28, #0x6
   4f5ec:	b.hi	4f9e8 <print_arm_disassembler_options@@Base+0x3eb0>  // b.pmore
   4f5f0:	ldur	x3, [x29, #-224]
   4f5f4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f5f8:	add	x1, x1, #0x802
   4f5fc:	mov	x2, x28
   4f600:	blr	x8
   4f604:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f608:	tbz	w19, #21, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f60c:	adrp	x1, 65000 <fields@@Base+0xee84>
   4f610:	mov	x0, x23
   4f614:	add	x1, x1, #0x722
   4f618:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f61c:	cmp	w8, #0x53
   4f620:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4f624:	ldur	x8, [x29, #-40]
   4f628:	orr	x9, x8, #0x2
   4f62c:	cmp	x9, #0xf
   4f630:	b.ne	4f990 <print_arm_disassembler_options@@Base+0x3e58>  // b.any
   4f634:	b	4f984 <print_arm_disassembler_options@@Base+0x3e4c>
   4f638:	ldur	x8, [x29, #-40]
   4f63c:	cmp	x8, #0x1
   4f640:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4f644:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f648:	mov	x0, x23
   4f64c:	add	x1, x1, #0xf9e
   4f650:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f654:	ldur	x8, [x29, #-40]
   4f658:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   4f65c:	add	x9, x9, #0xf38
   4f660:	eor	x8, x8, #0x1
   4f664:	ldr	x2, [x9, x8, lsl #3]
   4f668:	stur	x8, [x29, #-40]
   4f66c:	b	4f9b0 <print_arm_disassembler_options@@Base+0x3e78>
   4f670:	ldur	x2, [x29, #-40]
   4f674:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4f678:	mov	x0, x23
   4f67c:	add	x1, x1, #0x3a7
   4f680:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4f684:	cmp	w8, #0x5a
   4f688:	b.ne	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.any
   4f68c:	ldur	x8, [x29, #-40]
   4f690:	cmp	x8, #0xd
   4f694:	b.eq	4f984 <print_arm_disassembler_options@@Base+0x3e4c>  // b.none
   4f698:	cmp	x8, #0xf
   4f69c:	b.ne	4f990 <print_arm_disassembler_options@@Base+0x3e58>  // b.any
   4f6a0:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4f6a4:	mov	x0, x23
   4f6a8:	add	x1, x1, #0xbd2
   4f6ac:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f6b0:	ldur	x8, [x29, #-40]
   4f6b4:	cmp	x8, #0x3
   4f6b8:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f6bc:	adrp	x11, 5d000 <fields@@Base+0x6e84>
   4f6c0:	add	x11, x11, #0xe64
   4f6c4:	adr	x9, 4f6d4 <print_arm_disassembler_options@@Base+0x3b9c>
   4f6c8:	ldrh	w10, [x11, x8, lsl #1]
   4f6cc:	add	x9, x9, x10, lsl #2
   4f6d0:	br	x9
   4f6d4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f6d8:	mov	x0, x23
   4f6dc:	add	x1, x1, #0xa53
   4f6e0:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f6e4:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4f6e8:	ldr	w8, [x8, #1584]
   4f6ec:	ldur	x9, [x29, #-40]
   4f6f0:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4f6f4:	add	x10, x10, #0xaf8
   4f6f8:	mov	w11, #0x90                  	// #144
   4f6fc:	madd	x8, x8, x11, x10
   4f700:	add	x8, x8, x9, lsl #3
   4f704:	b	4f9ac <print_arm_disassembler_options@@Base+0x3e74>
   4f708:	ldr	w8, [x20]
   4f70c:	sub	w9, w8, #0x77
   4f710:	cmp	w9, #0x12
   4f714:	b.hi	4fe6c <print_arm_disassembler_options@@Base+0x4334>  // b.pmore
   4f718:	mov	w11, #0xa383                	// #41859
   4f71c:	lsl	w10, w26, w9
   4f720:	movk	w11, #0x7, lsl #16
   4f724:	tst	w10, w11
   4f728:	b.eq	4fdf4 <print_arm_disassembler_options@@Base+0x42bc>  // b.none
   4f72c:	mov	x10, x25
   4f730:	mov	x26, x28
   4f734:	mov	x28, x20
   4f738:	mov	x20, x10
   4f73c:	ldr	x23, [x10]
   4f740:	mov	w10, #0x2203                	// #8707
   4f744:	ldur	x12, [x29, #-216]
   4f748:	ldr	x25, [x25, #8]
   4f74c:	cmp	w9, #0x12
   4f750:	movk	w10, #0x2, lsl #16
   4f754:	lsr	w10, w10, w9
   4f758:	cset	w11, cc  // cc = lo, ul, last
   4f75c:	cmp	w8, #0x84
   4f760:	mov	w8, #0x3f                  	// #63
   4f764:	mov	w9, #0x1f                  	// #31
   4f768:	csel	w8, w9, w8, eq  // eq = none
   4f76c:	and	w9, w8, w12
   4f770:	and	w8, w10, w11
   4f774:	tbnz	w9, #5, 4fadc <print_arm_disassembler_options@@Base+0x3fa4>
   4f778:	tbnz	w12, #4, 4fcec <print_arm_disassembler_options@@Base+0x41b4>
   4f77c:	tbnz	w12, #3, 4fe44 <print_arm_disassembler_options@@Base+0x430c>
   4f780:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f784:	mov	x0, x25
   4f788:	add	x1, x1, #0x885
   4f78c:	blr	x23
   4f790:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f794:	mov	x0, x25
   4f798:	add	x1, x1, #0x8ac
   4f79c:	blr	x23
   4f7a0:	mov	w2, wzr
   4f7a4:	b	4fd00 <print_arm_disassembler_options@@Base+0x41c8>
   4f7a8:	adrp	x9, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4f7ac:	ldur	w8, [x29, #-40]
   4f7b0:	ldr	w9, [x9, #1584]
   4f7b4:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4f7b8:	add	x10, x10, #0xaf8
   4f7bc:	mov	w11, #0x90                  	// #144
   4f7c0:	lsl	w8, w8, #1
   4f7c4:	madd	x9, x9, x11, x10
   4f7c8:	add	x8, x9, w8, uxtw #3
   4f7cc:	b	4f9ac <print_arm_disassembler_options@@Base+0x3e74>
   4f7d0:	ldursw	x10, [x29, #-28]
   4f7d4:	ldur	x9, [x29, #-40]
   4f7d8:	ldp	x8, x0, [x25]
   4f7dc:	cmp	x10, #0x2
   4f7e0:	b.eq	4fc00 <print_arm_disassembler_options@@Base+0x40c8>  // b.none
   4f7e4:	cmp	x10, #0x1
   4f7e8:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4f7ec:	cmp	x9, #0x1
   4f7f0:	b.eq	4fd90 <print_arm_disassembler_options@@Base+0x4258>  // b.none
   4f7f4:	cbz	x9, 4fd84 <print_arm_disassembler_options@@Base+0x424c>
   4f7f8:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f7fc:	ldur	w8, [x29, #-40]
   4f800:	adrp	x9, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4f804:	ldr	w9, [x9, #1584]
   4f808:	mov	w10, #0x8                   	// #8
   4f80c:	lsl	w8, w8, #1
   4f810:	lsr	x8, x8, #1
   4f814:	bfi	x10, x8, #4, #31
   4f818:	adrp	x8, 81000 <aarch64_operands@@Base+0x1c38>
   4f81c:	add	x8, x8, #0xaf8
   4f820:	mov	w11, #0x90                  	// #144
   4f824:	madd	x8, x9, x11, x8
   4f828:	add	x8, x8, x10
   4f82c:	b	4f9ac <print_arm_disassembler_options@@Base+0x3e74>
   4f830:	ldr	w8, [x20]
   4f834:	sub	w10, w8, #0x1
   4f838:	cmp	w10, #0xc0
   4f83c:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4f840:	ldur	x9, [x29, #-40]
   4f844:	ldp	x8, x0, [x25]
   4f848:	adrp	x13, 5d000 <fields@@Base+0x6e84>
   4f84c:	add	x13, x13, #0xe74
   4f850:	adr	x11, 4f860 <print_arm_disassembler_options@@Base+0x3d28>
   4f854:	ldrh	w12, [x13, x10, lsl #1]
   4f858:	add	x11, x11, x12, lsl #2
   4f85c:	br	x11
   4f860:	cmp	x9, #0x3
   4f864:	b.hi	4fc2c <print_arm_disassembler_options@@Base+0x40f4>  // b.pmore
   4f868:	adrp	x10, 93000 <aarch64_operands@@Base+0x13c38>
   4f86c:	add	x10, x10, #0x280
   4f870:	b	4fcd8 <print_arm_disassembler_options@@Base+0x41a0>
   4f874:	ldur	x2, [x29, #-40]
   4f878:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4f87c:	mov	x0, x23
   4f880:	add	x1, x1, #0x3f3
   4f884:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4f888:	ldur	x8, [x29, #-40]
   4f88c:	mov	w9, #0x40                  	// #64
   4f890:	sub	x2, x9, x8
   4f894:	b	4faec <print_arm_disassembler_options@@Base+0x3fb4>
   4f898:	ldr	w8, [x20]
   4f89c:	ldur	x2, [x29, #-48]
   4f8a0:	sub	w8, w8, #0x2e
   4f8a4:	cmp	w8, #0x7
   4f8a8:	b.hi	4faec <print_arm_disassembler_options@@Base+0x3fb4>  // b.pmore
   4f8ac:	adrp	x11, 5d000 <fields@@Base+0x6e84>
   4f8b0:	add	x11, x11, #0xe6c
   4f8b4:	adr	x9, 4f8c8 <print_arm_disassembler_options@@Base+0x3d90>
   4f8b8:	ldrb	w10, [x11, x8]
   4f8bc:	add	x9, x9, x10, lsl #2
   4f8c0:	ldur	x2, [x29, #-48]
   4f8c4:	br	x9
   4f8c8:	ldur	x2, [x29, #-232]
   4f8cc:	b	4faec <print_arm_disassembler_options@@Base+0x3fb4>
   4f8d0:	ldr	x8, [sp, #216]
   4f8d4:	cbnz	x8, 4f8e8 <print_arm_disassembler_options@@Base+0x3db0>
   4f8d8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4f8dc:	mov	x0, x23
   4f8e0:	add	x1, x1, #0xbea
   4f8e4:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f8e8:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4f8ec:	mov	x0, x23
   4f8f0:	add	x1, x1, #0x338
   4f8f4:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4f8f8:	cmp	w3, #0xc
   4f8fc:	b.cs	4fa44 <print_arm_disassembler_options@@Base+0x3f0c>  // b.hs, b.nlast
   4f900:	ldr	x28, [sp, #224]
   4f904:	mov	w8, wzr
   4f908:	mov	x2, xzr
   4f90c:	mov	w9, #0x1                   	// #1
   4f910:	ldr	w10, [x20]
   4f914:	sub	w11, w10, #0x3d
   4f918:	cmp	w11, #0xa
   4f91c:	mov	w10, wzr
   4f920:	b.hi	4f938 <print_arm_disassembler_options@@Base+0x3e00>  // b.pmore
   4f924:	lsl	w11, w26, w11
   4f928:	mov	w12, #0x4a1                 	// #1185
   4f92c:	tst	w11, w12
   4f930:	b.eq	4f938 <print_arm_disassembler_options@@Base+0x3e00>  // b.none
   4f934:	mov	w10, #0x1                   	// #1
   4f938:	cmp	w9, #0x7
   4f93c:	b.hi	50584 <print_arm_disassembler_options@@Base+0x4a4c>  // b.pmore
   4f940:	adrp	x13, 5e000 <fields@@Base+0x7e84>
   4f944:	add	x13, x13, #0xa
   4f948:	adr	x11, 4f958 <print_arm_disassembler_options@@Base+0x3e20>
   4f94c:	ldrh	w12, [x13, x9, lsl #1]
   4f950:	add	x11, x11, x12, lsl #2
   4f954:	br	x11
   4f958:	adrp	x1, 61000 <fields@@Base+0xae84>
   4f95c:	mov	x0, x25
   4f960:	add	x1, x1, #0x7cd
   4f964:	b	4fa80 <print_arm_disassembler_options@@Base+0x3f48>
   4f968:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f96c:	add	x1, x1, #0x859
   4f970:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4f974:	adrp	x1, 5b000 <fields@@Base+0x4e84>
   4f978:	add	x1, x1, #0xf57
   4f97c:	blr	x22
   4f980:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f984:	mov	w8, #0x1                   	// #1
   4f988:	stur	w8, [x29, #-56]
   4f98c:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f990:	adrp	x9, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4f994:	ldr	w9, [x9, #1584]
   4f998:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   4f99c:	add	x10, x10, #0xaf8
   4f9a0:	mov	w11, #0x90                  	// #144
   4f9a4:	madd	x9, x9, x11, x10
   4f9a8:	add	x8, x9, x8, lsl #3
   4f9ac:	ldr	x2, [x8, #16]
   4f9b0:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4f9b4:	mov	x0, x23
   4f9b8:	add	x1, x1, #0xbe9
   4f9bc:	blr	x22
   4f9c0:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f9c4:	cmp	x28, #0x4
   4f9c8:	b.hi	4f9e8 <print_arm_disassembler_options@@Base+0x3eb0>  // b.pmore
   4f9cc:	ldur	x3, [x29, #-224]
   4f9d0:	ldp	x5, x4, [sp, #176]
   4f9d4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f9d8:	add	x1, x1, #0x822
   4f9dc:	mov	x2, x28
   4f9e0:	blr	x8
   4f9e4:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4f9e8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4f9ec:	add	x1, x1, #0x80f
   4f9f0:	mov	x2, x28
   4f9f4:	b	4fce4 <print_arm_disassembler_options@@Base+0x41ac>
   4f9f8:	adrp	x1, 65000 <fields@@Base+0xee84>
   4f9fc:	add	x1, x1, #0xf5
   4fa00:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fa04:	mov	x12, x21
   4fa08:	cmp	x21, #0x7
   4fa0c:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4fa10:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   4fa14:	add	x11, x11, #0x3a
   4fa18:	adr	x9, 4fa28 <print_arm_disassembler_options@@Base+0x3ef0>
   4fa1c:	ldrh	w10, [x11, x12, lsl #1]
   4fa20:	add	x9, x9, x10, lsl #2
   4fa24:	br	x9
   4fa28:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fa2c:	add	x1, x1, #0xc93
   4fa30:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fa34:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4fa38:	mov	x0, x23
   4fa3c:	add	x1, x1, #0x58d
   4fa40:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4fa44:	cmp	w3, #0xe
   4fa48:	b.cs	4fc5c <print_arm_disassembler_options@@Base+0x4124>  // b.hs, b.nlast
   4fa4c:	ldr	x28, [sp, #136]
   4fa50:	b	4f464 <print_arm_disassembler_options@@Base+0x392c>
   4fa54:	adrp	x1, 61000 <fields@@Base+0xae84>
   4fa58:	mov	x0, x25
   4fa5c:	add	x1, x1, #0x80a
   4fa60:	b	4fa84 <print_arm_disassembler_options@@Base+0x3f4c>
   4fa64:	adrp	x8, 69000 <fields@@Base+0x12e84>
   4fa68:	adrp	x9, 61000 <fields@@Base+0xae84>
   4fa6c:	cmp	w10, #0x0
   4fa70:	add	x8, x8, #0x83b
   4fa74:	add	x9, x9, #0x7dc
   4fa78:	csel	x1, x9, x8, eq  // eq = none
   4fa7c:	mov	x0, x25
   4fa80:	mov	x2, x28
   4fa84:	mov	x3, x28
   4fa88:	blr	x23
   4fa8c:	ldur	x28, [x29, #-72]
   4fa90:	mov	x25, x22
   4fa94:	ldp	x23, x22, [x29, #-120]
   4fa98:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fa9c:	cbz	w8, 4fd54 <print_arm_disassembler_options@@Base+0x421c>
   4faa0:	stur	w28, [x29, #-12]
   4faa4:	adrp	x0, 96000 <aarch64_operands@@Base+0x16c38>
   4faa8:	ldr	x0, [x0, #3864]
   4faac:	sub	x1, x29, #0xc
   4fab0:	sub	x2, x29, #0x18
   4fab4:	bl	359a0 <floatformat_to_double@plt>
   4fab8:	ldur	d0, [x29, #-24]
   4fabc:	adrp	x1, 61000 <fields@@Base+0xae84>
   4fac0:	mov	x0, x25
   4fac4:	add	x1, x1, #0x7eb
   4fac8:	mov	x2, x28
   4facc:	blr	x23
   4fad0:	b	4fa8c <print_arm_disassembler_options@@Base+0x3f54>
   4fad4:	ldr	x9, [sp, #208]
   4fad8:	b	4fcd0 <print_arm_disassembler_options@@Base+0x4198>
   4fadc:	sub	w10, w9, #0x20
   4fae0:	mov	w11, #0x40                  	// #64
   4fae4:	b	4fcf4 <print_arm_disassembler_options@@Base+0x41bc>
   4fae8:	ldr	x2, [sp, #192]
   4faec:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   4faf0:	mov	x0, x23
   4faf4:	add	x1, x1, #0x477
   4faf8:	b	4f9bc <print_arm_disassembler_options@@Base+0x3e84>
   4fafc:	ldr	x9, [sp, #216]
   4fb00:	cbnz	x9, 4fd48 <print_arm_disassembler_options@@Base+0x4210>
   4fb04:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fb08:	add	x1, x1, #0x7f2
   4fb0c:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fb10:	ldr	x11, [sp, #160]
   4fb14:	cmp	x11, #0x3
   4fb18:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4fb1c:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4fb20:	add	x12, x12, #0x26
   4fb24:	adr	x9, 4fd9c <print_arm_disassembler_options@@Base+0x4264>
   4fb28:	ldrb	w10, [x12, x11]
   4fb2c:	add	x9, x9, x10, lsl #2
   4fb30:	br	x9
   4fb34:	ldur	x9, [x29, #-88]
   4fb38:	cmp	x9, #0x2
   4fb3c:	b.eq	4fdb4 <print_arm_disassembler_options@@Base+0x427c>  // b.none
   4fb40:	cmp	x9, #0x1
   4fb44:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4fb48:	ldr	x11, [sp, #152]
   4fb4c:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4fb50:	add	x12, x12, #0x2e
   4fb54:	adr	x9, 4fb64 <print_arm_disassembler_options@@Base+0x402c>
   4fb58:	ldrb	w10, [x12, x11]
   4fb5c:	add	x9, x9, x10, lsl #2
   4fb60:	br	x9
   4fb64:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fb68:	add	x1, x1, #0x7b2
   4fb6c:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fb70:	ldur	x4, [x29, #-232]
   4fb74:	b	4fb84 <print_arm_disassembler_options@@Base+0x404c>
   4fb78:	ldur	x4, [x29, #-48]
   4fb7c:	b	4fb84 <print_arm_disassembler_options@@Base+0x404c>
   4fb80:	ldr	x4, [sp, #248]
   4fb84:	mov	x9, x11
   4fb88:	tbnz	w19, #24, 4fbbc <print_arm_disassembler_options@@Base+0x4084>
   4fb8c:	tbz	w19, #21, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fb90:	adrp	x10, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4fb94:	ldr	w10, [x10, #1584]
   4fb98:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   4fb9c:	add	x11, x11, #0xaf8
   4fba0:	mov	w12, #0x90                  	// #144
   4fba4:	madd	x10, x10, x12, x11
   4fba8:	add	x9, x10, x9, lsl #3
   4fbac:	ldr	x2, [x9, #16]
   4fbb0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fbb4:	add	x1, x1, #0x785
   4fbb8:	b	4fbf4 <print_arm_disassembler_options@@Base+0x40bc>
   4fbbc:	adrp	x10, ed000 <aarch64_opcode_table@@Base+0x555c0>
   4fbc0:	ldr	w10, [x10, #1584]
   4fbc4:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   4fbc8:	add	x11, x11, #0xaf8
   4fbcc:	mov	w12, #0x90                  	// #144
   4fbd0:	madd	x10, x10, x12, x11
   4fbd4:	add	x9, x10, x9, lsl #3
   4fbd8:	ldr	x2, [x9, #16]
   4fbdc:	tbnz	w19, #21, 4fbec <print_arm_disassembler_options@@Base+0x40b4>
   4fbe0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fbe4:	add	x1, x1, #0x76a
   4fbe8:	b	4fbf4 <print_arm_disassembler_options@@Base+0x40bc>
   4fbec:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fbf0:	add	x1, x1, #0x777
   4fbf4:	ldur	x3, [x29, #-192]
   4fbf8:	blr	x8
   4fbfc:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fc00:	cmp	x9, #0x3
   4fc04:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4fc08:	adrp	x12, 5d000 <fields@@Base+0x6e84>
   4fc0c:	add	x12, x12, #0xe60
   4fc10:	adr	x10, 4fc20 <print_arm_disassembler_options@@Base+0x40e8>
   4fc14:	ldrb	w11, [x12, x9]
   4fc18:	add	x10, x10, x11, lsl #2
   4fc1c:	br	x10
   4fc20:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4fc24:	add	x1, x1, #0x5dc
   4fc28:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fc2c:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4fc30:	add	x1, x1, #0x33a
   4fc34:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fc38:	adrp	x1, 6a000 <fields@@Base+0x13e84>
   4fc3c:	add	x1, x1, #0xbf9
   4fc40:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fc44:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4fc48:	add	x1, x1, #0xe58
   4fc4c:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fc50:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4fc54:	add	x1, x1, #0x9b8
   4fc58:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fc5c:	mov	x11, x27
   4fc60:	b.ne	4fe24 <print_arm_disassembler_options@@Base+0x42ec>  // b.any
   4fc64:	ldr	x8, [sp, #32]
   4fc68:	cbz	w8, 4fed8 <print_arm_disassembler_options@@Base+0x43a0>
   4fc6c:	mov	x28, xzr
   4fc70:	mov	x2, xzr
   4fc74:	mov	w8, #0x7                   	// #7
   4fc78:	lsr	w9, w11, w8
   4fc7c:	tst	w9, #0x1
   4fc80:	csel	x9, xzr, x13, eq  // eq = none
   4fc84:	mov	x10, x9
   4fc88:	cmp	w8, #0x4
   4fc8c:	sub	w8, w8, #0x1
   4fc90:	bfi	x9, x2, #8, #56
   4fc94:	bfi	x10, x28, #8, #56
   4fc98:	csel	x2, x2, x9, cc  // cc = lo, ul, last
   4fc9c:	csel	x28, x10, x28, cc  // cc = lo, ul, last
   4fca0:	cmn	w8, #0x1
   4fca4:	b.ne	4fc78 <print_arm_disassembler_options@@Base+0x4140>  // b.any
   4fca8:	mov	w8, wzr
   4fcac:	mov	w9, #0x7                   	// #7
   4fcb0:	b	4f910 <print_arm_disassembler_options@@Base+0x3dd8>
   4fcb4:	ldr	x9, [sp, #112]
   4fcb8:	b	4fcd0 <print_arm_disassembler_options@@Base+0x4198>
   4fcbc:	ldr	x9, [sp, #120]
   4fcc0:	b	4fcd0 <print_arm_disassembler_options@@Base+0x4198>
   4fcc4:	ldr	x9, [sp, #128]
   4fcc8:	b	4fcd0 <print_arm_disassembler_options@@Base+0x4198>
   4fccc:	ldr	x9, [sp, #104]
   4fcd0:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   4fcd4:	add	x10, x10, #0x650
   4fcd8:	ldr	x2, [x10, x9, lsl #3]
   4fcdc:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4fce0:	add	x1, x1, #0xbe9
   4fce4:	blr	x8
   4fce8:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fcec:	sub	w10, w9, #0x10
   4fcf0:	mov	w11, #0x20                  	// #32
   4fcf4:	sub	w9, w11, w9
   4fcf8:	cmp	w8, #0x0
   4fcfc:	csel	w2, w10, w9, ne  // ne = any
   4fd00:	adrp	x1, 67000 <fields@@Base+0x10e84>
   4fd04:	mov	x0, x25
   4fd08:	add	x1, x1, #0x337
   4fd0c:	blr	x23
   4fd10:	ldp	x23, x22, [x29, #-120]
   4fd14:	mov	x25, x20
   4fd18:	mov	x20, x28
   4fd1c:	mov	x28, x26
   4fd20:	mov	w26, #0x1                   	// #1
   4fd24:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fd28:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4fd2c:	mov	x0, x23
   4fd30:	add	x1, x1, #0x9c2
   4fd34:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4fd38:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   4fd3c:	mov	x0, x23
   4fd40:	add	x1, x1, #0x99e
   4fd44:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4fd48:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fd4c:	add	x1, x1, #0x7fa
   4fd50:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fd54:	adrp	x8, 61000 <fields@@Base+0xae84>
   4fd58:	adrp	x9, 69000 <fields@@Base+0x12e84>
   4fd5c:	cmp	w10, #0x0
   4fd60:	add	x8, x8, #0x7fb
   4fd64:	add	x9, x9, #0x84a
   4fd68:	csel	x1, x9, x8, ne  // ne = any
   4fd6c:	mov	w8, #0xffffffff            	// #-1
   4fd70:	ccmp	w28, w8, #0x0, eq  // eq = none
   4fd74:	orr	x8, x28, #0xffffffff00000000
   4fd78:	csel	x2, x28, x8, gt
   4fd7c:	mov	x0, x25
   4fd80:	b	4fa84 <print_arm_disassembler_options@@Base+0x3f4c>
   4fd84:	adrp	x1, 61000 <fields@@Base+0xae84>
   4fd88:	add	x1, x1, #0xff
   4fd8c:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fd90:	adrp	x1, 5a000 <fields@@Base+0x3e84>
   4fd94:	add	x1, x1, #0x706
   4fd98:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fd9c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fda0:	add	x1, x1, #0x7ba
   4fda4:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fda8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fdac:	add	x1, x1, #0x7ca
   4fdb0:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fdb4:	ldr	x11, [sp, #152]
   4fdb8:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   4fdbc:	add	x12, x12, #0x2a
   4fdc0:	adr	x9, 4fdd0 <print_arm_disassembler_options@@Base+0x4298>
   4fdc4:	ldrb	w10, [x12, x11]
   4fdc8:	add	x9, x9, x10, lsl #2
   4fdcc:	br	x9
   4fdd0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fdd4:	add	x1, x1, #0x7d2
   4fdd8:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fddc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fde0:	add	x1, x1, #0x7da
   4fde4:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fde8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fdec:	add	x1, x1, #0x7ea
   4fdf0:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fdf4:	cmp	w9, #0xe
   4fdf8:	b.ne	4fe6c <print_arm_disassembler_options@@Base+0x4334>  // b.any
   4fdfc:	ldur	x8, [x29, #-40]
   4fe00:	cmp	x8, #0x10
   4fe04:	b.eq	4ff2c <print_arm_disassembler_options@@Base+0x43f4>  // b.none
   4fe08:	cmp	x8, #0x1
   4fe0c:	b.eq	4ff68 <print_arm_disassembler_options@@Base+0x4430>  // b.none
   4fe10:	cbnz	x8, 50588 <print_arm_disassembler_options@@Base+0x4a50>
   4fe14:	adrp	x1, 55000 <xexit@@Base+0x184c>
   4fe18:	mov	x0, x23
   4fe1c:	add	x1, x1, #0xda4
   4fe20:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4fe24:	ldr	x4, [sp, #32]
   4fe28:	cbz	w4, 4fee8 <print_arm_disassembler_options@@Base+0x43b0>
   4fe2c:	adrp	x1, 61000 <fields@@Base+0xae84>
   4fe30:	mov	x0, x25
   4fe34:	add	x1, x1, #0x7af
   4fe38:	mov	w2, w11
   4fe3c:	blr	x23
   4fe40:	b	4fa90 <print_arm_disassembler_options@@Base+0x3f58>
   4fe44:	mov	w11, #0x10                  	// #16
   4fe48:	sub	w10, w9, #0x8
   4fe4c:	sub	w9, w11, w9
   4fe50:	b	4fcf8 <print_arm_disassembler_options@@Base+0x41c0>
   4fe54:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   4fe58:	add	x1, x1, #0x3a2
   4fe5c:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fe60:	adrp	x1, 58000 <fields@@Base+0x1e84>
   4fe64:	add	x1, x1, #0x993
   4fe68:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fe6c:	ldur	x2, [x29, #-40]
   4fe70:	cmp	w8, #0x83
   4fe74:	b.ne	4fe88 <print_arm_disassembler_options@@Base+0x4350>  // b.any
   4fe78:	cbnz	x2, 4fe88 <print_arm_disassembler_options@@Base+0x4350>
   4fe7c:	mov	w8, #0x20                  	// #32
   4fe80:	mov	w2, #0x20                  	// #32
   4fe84:	stur	x8, [x29, #-40]
   4fe88:	adrp	x1, 66000 <fields@@Base+0xfe84>
   4fe8c:	mov	x0, x23
   4fe90:	add	x1, x1, #0xc2b
   4fe94:	blr	x22
   4fe98:	ldur	x8, [x29, #-40]
   4fe9c:	stur	x8, [x29, #-96]
   4fea0:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fea4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fea8:	add	x1, x1, #0x7c2
   4feac:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4feb0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4feb4:	add	x1, x1, #0x7e2
   4feb8:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4febc:	cmp	x9, #0x1
   4fec0:	b.eq	5008c <print_arm_disassembler_options@@Base+0x4554>  // b.none
   4fec4:	cbz	x9, 50098 <print_arm_disassembler_options@@Base+0x4560>
   4fec8:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4fecc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4fed0:	add	x1, x1, #0x881
   4fed4:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   4fed8:	mov	w9, wzr
   4fedc:	mov	x2, xzr
   4fee0:	mov	x28, x11
   4fee4:	b	4f910 <print_arm_disassembler_options@@Base+0x3dd8>
   4fee8:	ldr	x28, [sp, #96]
   4feec:	mov	x2, xzr
   4fef0:	mov	w8, #0x1                   	// #1
   4fef4:	b	4f46c <print_arm_disassembler_options@@Base+0x3934>
   4fef8:	sub	x10, x9, #0x4
   4fefc:	cmp	x10, #0x4
   4ff00:	b.cc	5008c <print_arm_disassembler_options@@Base+0x4554>  // b.lo, b.ul, b.last
   4ff04:	sub	x10, x9, #0x2
   4ff08:	cmp	x10, #0x2
   4ff0c:	b.cc	50098 <print_arm_disassembler_options@@Base+0x4560>  // b.lo, b.ul, b.last
   4ff10:	b	50064 <print_arm_disassembler_options@@Base+0x452c>
   4ff14:	sub	x10, x9, #0x2
   4ff18:	cmp	x10, #0x2
   4ff1c:	b.cc	5008c <print_arm_disassembler_options@@Base+0x4554>  // b.lo, b.ul, b.last
   4ff20:	cmp	x9, #0x1
   4ff24:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   4ff28:	b	50098 <print_arm_disassembler_options@@Base+0x4560>
   4ff2c:	str	x20, [sp, #88]
   4ff30:	mov	x20, x25
   4ff34:	ldr	x25, [x25, #8]
   4ff38:	ldr	x26, [x20]
   4ff3c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4ff40:	add	x1, x1, #0x885
   4ff44:	mov	x0, x25
   4ff48:	blr	x26
   4ff4c:	mov	x0, x25
   4ff50:	mov	x25, x20
   4ff54:	ldr	x20, [sp, #88]
   4ff58:	adrp	x1, 69000 <fields@@Base+0x12e84>
   4ff5c:	add	x1, x1, #0x8ac
   4ff60:	blr	x26
   4ff64:	b	4fd20 <print_arm_disassembler_options@@Base+0x41e8>
   4ff68:	adrp	x1, 56000 <xexit@@Base+0x284c>
   4ff6c:	mov	x0, x23
   4ff70:	add	x1, x1, #0x833
   4ff74:	b	4f97c <print_arm_disassembler_options@@Base+0x3e44>
   4ff78:	cmp	x9, #0xb
   4ff7c:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4ff80:	lsl	x10, x26, x9
   4ff84:	mov	w11, #0xaa                  	// #170
   4ff88:	tst	x10, x11
   4ff8c:	b.ne	5008c <print_arm_disassembler_options@@Base+0x4554>  // b.any
   4ff90:	lsl	x9, x26, x9
   4ff94:	mov	w10, #0xa00                 	// #2560
   4ff98:	tst	x9, x10
   4ff9c:	b.ne	50098 <print_arm_disassembler_options@@Base+0x4560>  // b.any
   4ffa0:	b	500a4 <print_arm_disassembler_options@@Base+0x456c>
   4ffa4:	cmp	x9, #0xf
   4ffa8:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4ffac:	lsl	x10, x26, x9
   4ffb0:	tst	x10, #0xff00
   4ffb4:	b.ne	5006c <print_arm_disassembler_options@@Base+0x4534>  // b.any
   4ffb8:	lsl	x10, x26, x9
   4ffbc:	mov	w11, #0xaa                  	// #170
   4ffc0:	tst	x10, x11
   4ffc4:	b.ne	50098 <print_arm_disassembler_options@@Base+0x4560>  // b.any
   4ffc8:	lsl	x9, x26, x9
   4ffcc:	mov	w10, #0x11                  	// #17
   4ffd0:	tst	x9, x10
   4ffd4:	b.eq	50050 <print_arm_disassembler_options@@Base+0x4518>  // b.none
   4ffd8:	adrp	x1, 55000 <xexit@@Base+0x184c>
   4ffdc:	add	x1, x1, #0x7f4
   4ffe0:	b	5004c <print_arm_disassembler_options@@Base+0x4514>
   4ffe4:	cmp	x9, #0xb
   4ffe8:	b.le	500d0 <print_arm_disassembler_options@@Base+0x4598>
   4ffec:	sub	x9, x9, #0xc
   4fff0:	cmp	x9, #0x12
   4fff4:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   4fff8:	adrp	x12, 5d000 <fields@@Base+0x6e84>
   4fffc:	add	x12, x12, #0xff6
   50000:	adr	x10, 50010 <print_arm_disassembler_options@@Base+0x44d8>
   50004:	ldrb	w11, [x12, x9]
   50008:	add	x10, x10, x11, lsl #2
   5000c:	br	x10
   50010:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50014:	add	x1, x1, #0x86f
   50018:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   5001c:	cmp	x9, #0xd
   50020:	b.hi	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.pmore
   50024:	lsl	x10, x26, x9
   50028:	mov	w11, #0x3055                	// #12373
   5002c:	tst	x10, x11
   50030:	b.ne	5008c <print_arm_disassembler_options@@Base+0x4554>  // b.any
   50034:	lsl	x9, x26, x9
   50038:	mov	w10, #0x500                 	// #1280
   5003c:	tst	x9, x10
   50040:	b.eq	50050 <print_arm_disassembler_options@@Base+0x4518>  // b.none
   50044:	adrp	x1, 56000 <xexit@@Base+0x284c>
   50048:	add	x1, x1, #0x833
   5004c:	blr	x8
   50050:	ldur	x28, [x29, #-72]
   50054:	ldp	x23, x22, [x29, #-120]
   50058:	b	4fd20 <print_arm_disassembler_options@@Base+0x41e8>
   5005c:	cmp	x9, #0x2
   50060:	b.eq	50098 <print_arm_disassembler_options@@Base+0x4560>  // b.none
   50064:	cmp	x9, #0x1
   50068:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   5006c:	adrp	x1, 55000 <xexit@@Base+0x184c>
   50070:	add	x1, x1, #0xda4
   50074:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   50078:	cmp	x9, #0x2
   5007c:	b.eq	5006c <print_arm_disassembler_options@@Base+0x4534>  // b.none
   50080:	cmp	x9, #0x1
   50084:	b.eq	50098 <print_arm_disassembler_options@@Base+0x4560>  // b.none
   50088:	cbnz	x9, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   5008c:	adrp	x1, 55000 <xexit@@Base+0x184c>
   50090:	add	x1, x1, #0x7f4
   50094:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   50098:	adrp	x1, 56000 <xexit@@Base+0x284c>
   5009c:	add	x1, x1, #0x833
   500a0:	blr	x8
   500a4:	add	x24, x24, #0x1
   500a8:	b	4f25c <print_arm_disassembler_options@@Base+0x3724>
   500ac:	cmp	x9, #0x1
   500b0:	b.eq	500c4 <print_arm_disassembler_options@@Base+0x458c>  // b.none
   500b4:	cbnz	x9, 500a4 <print_arm_disassembler_options@@Base+0x456c>
   500b8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   500bc:	add	x1, x1, #0x87a
   500c0:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   500c4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   500c8:	add	x1, x1, #0x87d
   500cc:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   500d0:	cbz	x9, 500e4 <print_arm_disassembler_options@@Base+0x45ac>
   500d4:	cmp	x9, #0x4
   500d8:	b.eq	500e4 <print_arm_disassembler_options@@Base+0x45ac>  // b.none
   500dc:	cmp	x9, #0x8
   500e0:	b.ne	500a4 <print_arm_disassembler_options@@Base+0x456c>  // b.any
   500e4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   500e8:	add	x1, x1, #0x86b
   500ec:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   500f0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   500f4:	add	x1, x1, #0x873
   500f8:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   500fc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50100:	add	x1, x1, #0x876
   50104:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   50108:	adrp	x1, 69000 <fields@@Base+0x12e84>
   5010c:	add	x1, x1, #0x7de
   50110:	b	500a0 <print_arm_disassembler_options@@Base+0x4568>
   50114:	ldur	x2, [x29, #-96]
   50118:	add	x8, x2, #0x10
   5011c:	cmp	x8, #0x31
   50120:	b.cc	50134 <print_arm_disassembler_options@@Base+0x45fc>  // b.lo, b.ul, b.last
   50124:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50128:	add	x1, x1, #0x48e
   5012c:	mov	x0, x23
   50130:	blr	x22
   50134:	ldur	w8, [x29, #-56]
   50138:	ldur	w21, [x29, #-128]
   5013c:	cbz	w8, 50210 <print_arm_disassembler_options@@Base+0x46d8>
   50140:	ldp	x23, x22, [x25]
   50144:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50148:	adrp	x2, 66000 <fields@@Base+0xfe84>
   5014c:	add	x1, x1, #0xa10
   50150:	add	x2, x2, #0xa86
   50154:	mov	x0, x22
   50158:	blr	x23
   5015c:	ldur	w8, [x29, #-60]
   50160:	cmp	w8, #0xb
   50164:	b.hi	50210 <print_arm_disassembler_options@@Base+0x46d8>  // b.pmore
   50168:	ldur	w8, [x29, #-60]
   5016c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   50170:	add	x9, x9, #0x82
   50174:	mov	w8, w8
   50178:	adr	x10, 50188 <print_arm_disassembler_options@@Base+0x4650>
   5017c:	ldrb	w11, [x9, x8]
   50180:	add	x10, x10, x11, lsl #2
   50184:	br	x10
   50188:	adrp	x1, 69000 <fields@@Base+0x12e84>
   5018c:	add	x1, x1, #0xb49
   50190:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   50194:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50198:	add	x1, x1, #0xa75
   5019c:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501a0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501a4:	add	x1, x1, #0xb14
   501a8:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501ac:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501b0:	add	x1, x1, #0xa55
   501b4:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501b8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501bc:	add	x1, x1, #0xa65
   501c0:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501c4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501c8:	add	x1, x1, #0xac3
   501cc:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501d0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501d4:	add	x1, x1, #0xa15
   501d8:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501dc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501e0:	add	x1, x1, #0xa31
   501e4:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501e8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501ec:	add	x1, x1, #0xa8f
   501f0:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   501f4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   501f8:	add	x1, x1, #0xaa9
   501fc:	b	50208 <print_arm_disassembler_options@@Base+0x46d0>
   50200:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50204:	add	x1, x1, #0xaff
   50208:	mov	x0, x22
   5020c:	blr	x23
   50210:	ldur	x8, [x29, #-80]
   50214:	cbz	w8, 50320 <print_arm_disassembler_options@@Base+0x47e8>
   50218:	ldp	x20, x22, [x25]
   5021c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50220:	add	x1, x1, #0x885
   50224:	mov	x0, x22
   50228:	blr	x20
   5022c:	cmp	w21, #0x10
   50230:	b.hi	50320 <print_arm_disassembler_options@@Base+0x47e8>  // b.pmore
   50234:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   50238:	mov	w8, w21
   5023c:	add	x9, x9, #0x8e
   50240:	adr	x10, 50250 <print_arm_disassembler_options@@Base+0x4718>
   50244:	ldrb	w11, [x9, x8]
   50248:	add	x10, x10, x11, lsl #2
   5024c:	br	x10
   50250:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50254:	add	x1, x1, #0x89f
   50258:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   5025c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50260:	add	x1, x1, #0x9f1
   50264:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50268:	adrp	x1, 69000 <fields@@Base+0x12e84>
   5026c:	add	x1, x1, #0x9ab
   50270:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50274:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50278:	add	x1, x1, #0x977
   5027c:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50280:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50284:	add	x1, x1, #0x8df
   50288:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   5028c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50290:	add	x1, x1, #0x942
   50294:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50298:	adrp	x1, 69000 <fields@@Base+0x12e84>
   5029c:	add	x1, x1, #0x96b
   502a0:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502a4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502a8:	add	x1, x1, #0x8bd
   502ac:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502b0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502b4:	add	x1, x1, #0x8cd
   502b8:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502bc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502c0:	add	x1, x1, #0x9d2
   502c4:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502c8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502cc:	add	x1, x1, #0x8ac
   502d0:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502d4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502d8:	add	x1, x1, #0x911
   502dc:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502e0:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502e4:	add	x1, x1, #0x8e9
   502e8:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502ec:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502f0:	add	x1, x1, #0x8fd
   502f4:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   502f8:	adrp	x1, 69000 <fields@@Base+0x12e84>
   502fc:	add	x1, x1, #0x925
   50300:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50304:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50308:	add	x1, x1, #0x95e
   5030c:	b	50318 <print_arm_disassembler_options@@Base+0x47e0>
   50310:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50314:	add	x1, x1, #0x984
   50318:	mov	x0, x22
   5031c:	blr	x20
   50320:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50324:	ldrb	w9, [x8, #1080]
   50328:	mov	w10, #0xe000                	// #57344
   5032c:	movk	w10, #0x40, lsl #16
   50330:	tst	x19, x10
   50334:	b.eq	50490 <print_arm_disassembler_options@@Base+0x4958>  // b.none
   50338:	tbnz	w9, #0, 50490 <print_arm_disassembler_options@@Base+0x4958>
   5033c:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50340:	ldr	w10, [x10, #1072]
   50344:	cbnz	w10, 50490 <print_arm_disassembler_options@@Base+0x4958>
   50348:	mov	w10, #0xf50                 	// #3920
   5034c:	movk	w10, #0xefb1, lsl #16
   50350:	mov	w11, #0xf00                 	// #3840
   50354:	movk	w11, #0xee31, lsl #16
   50358:	and	x12, x19, x10
   5035c:	orr	x13, x11, #0x40
   50360:	cmp	x12, x11
   50364:	ldur	x11, [x29, #-240]
   50368:	cset	w10, eq  // eq = none
   5036c:	cmp	x11, #0x1
   50370:	cset	w11, ne  // ne = any
   50374:	cmp	x12, x13
   50378:	b.eq	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.none
   5037c:	and	w10, w11, w10
   50380:	tbnz	w10, #0, 503f4 <print_arm_disassembler_options@@Base+0x48bc>
   50384:	mov	w10, #0x1f51                	// #8017
   50388:	movk	w10, #0xff81, lsl #16
   5038c:	mov	w12, #0xf00                 	// #3840
   50390:	and	w11, w19, w10
   50394:	movk	w12, #0xfe01, lsl #16
   50398:	cmp	w11, w12
   5039c:	b.eq	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.none
   503a0:	mov	w12, #0xf01                 	// #3841
   503a4:	movk	w12, #0xfe01, lsl #16
   503a8:	cmp	w11, w12
   503ac:	b.ne	503bc <print_arm_disassembler_options@@Base+0x4884>  // b.any
   503b0:	ldur	x11, [x29, #-184]
   503b4:	cmp	x11, #0x300, lsl #12
   503b8:	b.ne	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.any
   503bc:	mov	w12, #0x1f50                	// #8016
   503c0:	mov	w11, #0x1f00                	// #7936
   503c4:	movk	w12, #0xff81, lsl #16
   503c8:	movk	w11, #0xfe01, lsl #16
   503cc:	and	x12, x19, x12
   503d0:	cmp	x12, x11
   503d4:	b.eq	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.none
   503d8:	add	w10, w10, #0x1f
   503dc:	and	w10, w19, w10
   503e0:	mov	w13, #0xf60                 	// #3936
   503e4:	orr	w10, w10, #0x20
   503e8:	movk	w13, #0xfe01, lsl #16
   503ec:	cmp	w10, w13
   503f0:	b.ne	50468 <print_arm_disassembler_options@@Base+0x4930>  // b.any
   503f4:	mov	w9, #0x1                   	// #1
   503f8:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   503fc:	adrp	x11, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50400:	cmp	x28, #0x8
   50404:	strb	w9, [x8, #1080]
   50408:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   5040c:	str	w9, [x8, #1088]
   50410:	str	x28, [x10, #1096]
   50414:	str	xzr, [x11, #1104]
   50418:	b.eq	50444 <print_arm_disassembler_options@@Base+0x490c>  // b.none
   5041c:	cbz	x28, 505a8 <print_arm_disassembler_options@@Base+0x4a70>
   50420:	ldr	x8, [sp, #144]
   50424:	cmp	x8, #0x4
   50428:	b.ne	50434 <print_arm_disassembler_options@@Base+0x48fc>  // b.any
   5042c:	mov	w9, #0x2                   	// #2
   50430:	b	50444 <print_arm_disassembler_options@@Base+0x490c>
   50434:	and	x8, x19, #0x6000
   50438:	cmp	x8, #0x4, lsl #12
   5043c:	b.ne	50450 <print_arm_disassembler_options@@Base+0x4918>  // b.any
   50440:	mov	w9, #0x3                   	// #3
   50444:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50448:	str	x9, [x8, #1112]
   5044c:	b	4d478 <print_arm_disassembler_options@@Base+0x1940>
   50450:	lsr	x8, x19, #11
   50454:	and	x9, x8, #0x4
   50458:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   5045c:	str	x9, [x10, #1112]
   50460:	tbnz	w8, #2, 4d478 <print_arm_disassembler_options@@Base+0x1940>
   50464:	b	505b0 <print_arm_disassembler_options@@Base+0x4a78>
   50468:	add	x10, x11, #0x40
   5046c:	cmp	x12, x10
   50470:	b.eq	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.none
   50474:	mov	w10, #0x1fff                	// #8191
   50478:	movk	w10, #0xffbf, lsl #16
   5047c:	mov	w11, #0xf4d                 	// #3917
   50480:	and	x10, x19, x10
   50484:	movk	w11, #0xfe31, lsl #16
   50488:	cmp	x10, x11
   5048c:	b.eq	503f4 <print_arm_disassembler_options@@Base+0x48bc>  // b.none
   50490:	cbz	w9, 4d478 <print_arm_disassembler_options@@Base+0x1940>
   50494:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50498:	ldr	x9, [x10, #1104]
   5049c:	adrp	x11, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   504a0:	ldr	x12, [x11, #1112]
   504a4:	add	x13, x9, #0x1
   504a8:	str	x13, [x10, #1104]
   504ac:	cmp	x13, x12
   504b0:	b.ne	504d4 <print_arm_disassembler_options@@Base+0x499c>  // b.any
   504b4:	strb	wzr, [x8, #1080]
   504b8:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   504bc:	str	wzr, [x8, #1088]
   504c0:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   504c4:	str	xzr, [x10, #1104]
   504c8:	str	xzr, [x8, #1096]
   504cc:	str	xzr, [x11, #1112]
   504d0:	b	4d478 <print_arm_disassembler_options@@Base+0x1940>
   504d4:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   504d8:	ldr	x8, [x8, #1096]
   504dc:	cmp	x9, #0x3
   504e0:	b.hi	50518 <print_arm_disassembler_options@@Base+0x49e0>  // b.pmore
   504e4:	adrp	x10, 5e000 <fields@@Base+0x7e84>
   504e8:	add	x10, x10, #0x9f
   504ec:	adr	x11, 50500 <print_arm_disassembler_options@@Base+0x49c8>
   504f0:	ldrb	w12, [x10, x9]
   504f4:	add	x11, x11, x12, lsl #2
   504f8:	mov	w10, wzr
   504fc:	br	x11
   50500:	mov	w9, #0x8                   	// #8
   50504:	b	5051c <print_arm_disassembler_options@@Base+0x49e4>
   50508:	mov	w9, #0x4                   	// #4
   5050c:	b	5051c <print_arm_disassembler_options@@Base+0x49e4>
   50510:	mov	w9, #0x2                   	// #2
   50514:	b	5051c <print_arm_disassembler_options@@Base+0x49e4>
   50518:	mov	x9, xzr
   5051c:	adrp	x10, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50520:	ldr	w10, [x10, #1088]
   50524:	tst	x9, x8
   50528:	b.eq	50540 <print_arm_disassembler_options@@Base+0x4a08>  // b.none
   5052c:	cmp	w10, #0x2
   50530:	cset	w8, eq  // eq = none
   50534:	cmp	w10, #0x1
   50538:	mov	w9, #0x2                   	// #2
   5053c:	csel	w10, w9, w8, eq  // eq = none
   50540:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50544:	str	w10, [x8, #1088]
   50548:	b	4d478 <print_arm_disassembler_options@@Base+0x1940>
   5054c:	mov	w9, #0x1                   	// #1
   50550:	stur	x9, [x29, #-80]
   50554:	mov	w9, #0x1                   	// #1
   50558:	b	4f02c <print_arm_disassembler_options@@Base+0x34f4>
   5055c:	mov	w9, #0x11                  	// #17
   50560:	stur	xzr, [x29, #-80]
   50564:	b	5057c <print_arm_disassembler_options@@Base+0x4a44>
   50568:	cmp	x9, #0x0
   5056c:	mov	w9, #0x11                  	// #17
   50570:	cset	w10, eq  // eq = none
   50574:	csinc	w9, w9, wzr, ne  // ne = any
   50578:	stur	x10, [x29, #-80]
   5057c:	stur	w9, [x29, #-128]
   50580:	b	4f03c <print_arm_disassembler_options@@Base+0x3504>
   50584:	bl	35750 <abort@plt>
   50588:	adrp	x0, 58000 <fields@@Base+0x1e84>
   5058c:	adrp	x1, 67000 <fields@@Base+0x10e84>
   50590:	adrp	x3, 67000 <fields@@Base+0x10e84>
   50594:	add	x0, x0, #0x5dc
   50598:	add	x1, x1, #0x353
   5059c:	add	x3, x3, #0x36b
   505a0:	mov	w2, #0x2570                	// #9584
   505a4:	bl	35b90 <__assert_fail@plt>
   505a8:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   505ac:	str	xzr, [x8, #1112]
   505b0:	adrp	x0, 69000 <fields@@Base+0x12e84>
   505b4:	adrp	x1, 67000 <fields@@Base+0x10e84>
   505b8:	adrp	x3, 69000 <fields@@Base+0x12e84>
   505bc:	add	x0, x0, #0xb73
   505c0:	add	x1, x1, #0x353
   505c4:	add	x3, x3, #0xb96
   505c8:	mov	w2, #0x148f                	// #5263
   505cc:	bl	35b90 <__assert_fail@plt>
   505d0:	ldr	x8, [x0, #72]
   505d4:	ldr	x9, [x0, #48]
   505d8:	ldr	x8, [x8, w1, sxtw #3]
   505dc:	cbz	x9, 505ec <print_arm_disassembler_options@@Base+0x4ab4>
   505e0:	ldr	x10, [x8, #32]
   505e4:	cmp	x9, x10
   505e8:	b.ne	50654 <print_arm_disassembler_options@@Base+0x4b1c>  // b.any
   505ec:	ldr	x9, [x8, #8]
   505f0:	ldrb	w8, [x9]
   505f4:	cmp	w8, #0x24
   505f8:	b.ne	50654 <print_arm_disassembler_options@@Base+0x4b1c>  // b.any
   505fc:	ldrb	w8, [x9, #1]
   50600:	mov	w0, wzr
   50604:	sub	w10, w8, #0x61
   50608:	cmp	w10, #0x13
   5060c:	b.hi	50650 <print_arm_disassembler_options@@Base+0x4b18>  // b.pmore
   50610:	mov	w11, #0x1                   	// #1
   50614:	lsl	w10, w11, w10
   50618:	mov	w11, #0x9                   	// #9
   5061c:	movk	w11, #0x8, lsl #16
   50620:	tst	w10, w11
   50624:	b.eq	50650 <print_arm_disassembler_options@@Base+0x4b18>  // b.none
   50628:	ldrb	w9, [x9, #2]
   5062c:	cmp	w9, #0x2e
   50630:	b.eq	50638 <print_arm_disassembler_options@@Base+0x4b00>  // b.none
   50634:	cbnz	w9, 50654 <print_arm_disassembler_options@@Base+0x4b1c>
   50638:	cmp	w8, #0x74
   5063c:	mov	w0, #0x1                   	// #1
   50640:	cinc	w9, w0, ne  // ne = any
   50644:	cmp	w8, #0x61
   50648:	csel	w8, wzr, w9, eq  // eq = none
   5064c:	str	w8, [x2]
   50650:	ret
   50654:	mov	w0, wzr
   50658:	ret
   5065c:	sub	sp, sp, #0x170
   50660:	stp	x29, x30, [sp, #272]
   50664:	stp	x28, x27, [sp, #288]
   50668:	stp	x26, x25, [sp, #304]
   5066c:	stp	x24, x23, [sp, #320]
   50670:	stp	x22, x21, [sp, #336]
   50674:	stp	x20, x19, [sp, #352]
   50678:	ldp	x28, x8, [x0]
   5067c:	add	x29, sp, #0x110
   50680:	stur	x8, [x29, #-40]
   50684:	cbz	w2, 50704 <print_arm_disassembler_options@@Base+0x4bcc>
   50688:	mvn	w8, w1
   5068c:	mov	w9, #0xef000000            	// #-285212672
   50690:	tst	x8, x9
   50694:	b.ne	506b4 <print_arm_disassembler_options@@Base+0x4b7c>  // b.any
   50698:	tst	x1, #0x10000000
   5069c:	mov	w8, #0xf3000000            	// #-218103808
   506a0:	mov	w9, #0xf2000000            	// #-234881024
   506a4:	csel	x8, x9, x8, eq  // eq = none
   506a8:	bfxil	x8, x1, #0, #24
   506ac:	mov	x1, x8
   506b0:	b	50704 <print_arm_disassembler_options@@Base+0x4bcc>
   506b4:	and	w8, w1, #0xff000000
   506b8:	mov	w9, #0xfe000000            	// #-33554432
   506bc:	cmp	w8, w9
   506c0:	b.eq	50704 <print_arm_disassembler_options@@Base+0x4bcc>  // b.none
   506c4:	mov	w9, #0xfc000000            	// #-67108864
   506c8:	cmp	w8, w9
   506cc:	b.eq	50704 <print_arm_disassembler_options@@Base+0x4bcc>  // b.none
   506d0:	mov	w9, #0xf9000000            	// #-117440512
   506d4:	cmp	w8, w9
   506d8:	b.ne	506e8 <print_arm_disassembler_options@@Base+0x4bb0>  // b.any
   506dc:	mov	w8, #0xd000000             	// #218103808
   506e0:	eor	x1, x1, x8
   506e4:	b	50704 <print_arm_disassembler_options@@Base+0x4bcc>
   506e8:	mov	w8, #0xf5f                 	// #3935
   506ec:	movk	w8, #0xff91, lsl #16
   506f0:	mov	w9, #0xb10                 	// #2832
   506f4:	and	x8, x1, x8
   506f8:	movk	w9, #0xee80, lsl #16
   506fc:	cmp	x8, x9
   50700:	b.ne	51424 <print_arm_disassembler_options@@Base+0x58ec>  // b.any
   50704:	mov	w8, #0x850                 	// #2128
   50708:	movk	w8, #0xffb0, lsl #16
   5070c:	mov	w9, #0x840                 	// #2112
   50710:	and	x8, x1, x8
   50714:	movk	w9, #0xf2b0, lsl #16
   50718:	cmp	x8, x9
   5071c:	stur	w2, [x29, #-80]
   50720:	b.ne	50734 <print_arm_disassembler_options@@Base+0x4bfc>  // b.any
   50724:	adrp	x22, 61000 <fields@@Base+0xae84>
   50728:	stur	x28, [x29, #-112]
   5072c:	add	x22, x22, #0x843
   50730:	b	5075c <print_arm_disassembler_options@@Base+0x4c24>
   50734:	adrp	x8, 8b000 <aarch64_operands@@Base+0xbc38>
   50738:	add	x8, x8, #0xa90
   5073c:	ldr	x22, [x8]
   50740:	cbz	x22, 51424 <print_arm_disassembler_options@@Base+0x58ec>
   50744:	ldp	x10, x9, [x8, #-16]
   50748:	add	x8, x8, #0x30
   5074c:	and	x9, x9, x1
   50750:	cmp	x9, x10
   50754:	b.ne	5073c <print_arm_disassembler_options@@Base+0x4c04>  // b.any
   50758:	stur	x28, [x29, #-112]
   5075c:	lsr	x10, x1, #17
   50760:	lsr	x11, x1, #12
   50764:	and	x4, x10, #0x80
   50768:	and	x10, x11, #0x70
   5076c:	bfxil	x10, x1, #0, #4
   50770:	orr	x24, x10, x4
   50774:	lsr	x19, x1, #8
   50778:	mov	w9, #0x3c000000            	// #1006632960
   5077c:	mov	w12, #0x40000000            	// #1073741824
   50780:	tst	w24, #0x40
   50784:	ubfx	x16, x1, #1, #31
   50788:	ubfx	x18, x1, #18, #14
   5078c:	csel	x9, x12, x9, eq  // eq = none
   50790:	tst	w19, #0x3
   50794:	ubfx	x30, x1, #5, #1
   50798:	ubfx	x17, x1, #12, #4
   5079c:	and	w11, w16, #0x10
   507a0:	and	w16, w18, #0x10
   507a4:	cset	w12, eq  // eq = none
   507a8:	ubfx	x25, x1, #8, #2
   507ac:	mov	w0, #0x2                   	// #2
   507b0:	orr	w28, w17, w16
   507b4:	cset	w17, ne  // ne = any
   507b8:	tst	w30, w12
   507bc:	ubfx	x13, x1, #6, #2
   507c0:	csinc	w26, w0, w25, ne  // ne = any
   507c4:	cmp	w25, #0x3
   507c8:	ubfx	w15, w1, #10, #2
   507cc:	mov	w3, #0x3                   	// #3
   507d0:	mov	w7, #0x1                   	// #1
   507d4:	mov	x21, x1
   507d8:	cset	w0, eq  // eq = none
   507dc:	cmp	w13, #0x1
   507e0:	lsr	x8, x1, #4
   507e4:	lsl	w18, w7, w15
   507e8:	cset	w5, hi  // hi = pmore
   507ec:	tst	w3, w21, lsr #10
   507f0:	cset	w3, eq  // eq = none
   507f4:	cset	w6, ne  // ne = any
   507f8:	tst	w18, w8
   507fc:	cinc	w7, w7, ne  // ne = any
   50800:	tst	w17, w6
   50804:	ubfx	x27, x1, #4, #2
   50808:	csinc	w17, w7, wzr, ne  // ne = any
   5080c:	tst	w8, #0x1
   50810:	and	x14, x1, #0xf
   50814:	str	w17, [sp, #124]
   50818:	cset	w17, eq  // eq = none
   5081c:	cmp	w27, #0x3
   50820:	ubfx	x2, x1, #4, #4
   50824:	orr	w11, w11, w14
   50828:	sub	w14, w18, #0x1
   5082c:	cset	w7, ne  // ne = any
   50830:	tst	w8, #0x3
   50834:	and	w16, w14, w2
   50838:	cset	w20, eq  // eq = none
   5083c:	tst	w8, #0x2
   50840:	cset	w23, eq  // eq = none
   50844:	cmp	w16, w14
   50848:	cset	w16, eq  // eq = none
   5084c:	tst	w14, w2
   50850:	add	w14, w15, #0x1
   50854:	lsr	w14, w2, w14
   50858:	str	w14, [sp, #120]
   5085c:	and	w14, w18, w8
   50860:	str	w14, [sp, #84]
   50864:	mov	w14, #0x10                  	// #16
   50868:	lsl	w14, w14, w15
   5086c:	sbfx	x18, x1, #4, #1
   50870:	mov	w1, #0x20                  	// #32
   50874:	lsl	w2, w1, w15
   50878:	and	w14, w18, w14
   5087c:	and	w2, w18, w2
   50880:	str	w14, [sp, #80]
   50884:	ubfx	w14, w21, #20, #2
   50888:	mov	w18, #0x4                   	// #4
   5088c:	lsl	w18, w18, w14
   50890:	sub	w18, w18, #0x1
   50894:	and	w18, w18, w11
   50898:	lsr	w11, w11, w14
   5089c:	add	w14, w25, #0x1
   508a0:	str	w14, [sp, #116]
   508a4:	lsl	w14, w14, #3
   508a8:	lsl	w13, w14, w13
   508ac:	lsr	x14, x21, #5
   508b0:	stur	w18, [x29, #-124]
   508b4:	and	x14, x14, #0x8
   508b8:	mov	w18, #0x100                 	// #256
   508bc:	lsl	x18, x18, x14
   508c0:	add	x14, x14, #0x8
   508c4:	sub	x18, x18, #0x1
   508c8:	lsl	x14, x24, x14
   508cc:	orr	x14, x14, x18
   508d0:	str	x14, [sp, #72]
   508d4:	lsl	x14, x4, #24
   508d8:	bfi	x14, x10, #19, #7
   508dc:	orr	x9, x14, x9
   508e0:	str	x9, [sp, #8]
   508e4:	and	w9, w0, w5
   508e8:	lsr	w9, w13, w9
   508ec:	str	w9, [sp, #100]
   508f0:	cset	w9, eq  // eq = none
   508f4:	cmp	w15, #0x2
   508f8:	lsl	w13, w27, #6
   508fc:	csel	w13, w2, w13, ne  // ne = any
   50900:	str	w13, [sp, #68]
   50904:	lsr	x13, x21, #6
   50908:	orr	w8, w19, w13
   5090c:	cset	w14, ne  // ne = any
   50910:	tst	x8, #0x3
   50914:	adrp	x18, 61000 <fields@@Base+0xae84>
   50918:	adrp	x8, 61000 <fields@@Base+0xae84>
   5091c:	ccmp	w25, #0x2, #0x4, ne  // ne = any
   50920:	add	x18, x18, #0x77b
   50924:	add	x8, x8, #0x79e
   50928:	csel	x8, x8, x18, eq  // eq = none
   5092c:	str	x8, [sp, #88]
   50930:	tst	w6, w16
   50934:	orr	w8, w16, w9
   50938:	orr	w9, w14, w20
   5093c:	orr	w16, w14, w23
   50940:	orr	w14, w14, w7
   50944:	stp	w14, w16, [sp, #60]
   50948:	orr	w8, w8, w3
   5094c:	and	w9, w17, w9
   50950:	mov	w16, #0x8                   	// #8
   50954:	str	w9, [sp, #56]
   50958:	ubfx	x9, x21, #3, #29
   5095c:	lsl	w15, w16, w15
   50960:	lsl	w16, w1, w27
   50964:	eor	w8, w8, #0x1
   50968:	and	w9, w9, #0x10
   5096c:	str	w16, [sp, #108]
   50970:	ubfx	x16, x21, #16, #4
   50974:	str	w8, [sp, #40]
   50978:	csel	w8, w15, wzr, ne  // ne = any
   5097c:	and	x14, x13, #0x8
   50980:	stur	x27, [x29, #-120]
   50984:	mov	x27, x21
   50988:	stur	x16, [x29, #-56]
   5098c:	orr	w16, w16, w9
   50990:	lsl	w9, w10, #3
   50994:	str	w8, [sp, #36]
   50998:	ubfx	x8, x21, #8, #4
   5099c:	and	x13, x13, #0x18
   509a0:	str	w9, [sp, #4]
   509a4:	lsl	x9, x24, x14
   509a8:	stp	x8, x25, [x29, #-104]
   509ac:	and	w8, w27, #0xf
   509b0:	str	x9, [sp, #48]
   509b4:	lsl	x9, x24, x13
   509b8:	stur	x8, [x29, #-64]
   509bc:	add	w8, w25, w16
   509c0:	str	x9, [sp, #136]
   509c4:	lsr	w9, w11, #2
   509c8:	str	w8, [sp, #104]
   509cc:	stur	w28, [x29, #-76]
   509d0:	sub	w8, w28, #0x1
   509d4:	ldur	x25, [x29, #-112]
   509d8:	ldur	x28, [x29, #-40]
   509dc:	str	w9, [sp, #132]
   509e0:	and	w9, w30, w12
   509e4:	stp	x24, x30, [sp, #16]
   509e8:	eor	w9, w9, #0x1
   509ec:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   509f0:	adrp	x11, 55000 <xexit@@Base+0x184c>
   509f4:	adrp	x24, 55000 <xexit@@Base+0x184c>
   509f8:	adrp	x21, 61000 <fields@@Base+0xae84>
   509fc:	adrp	x23, 61000 <fields@@Base+0xae84>
   50a00:	adrp	x19, 61000 <fields@@Base+0xae84>
   50a04:	add	w9, w30, w9
   50a08:	add	x20, x20, #0x170
   50a0c:	add	x11, x11, #0xdc4
   50a10:	add	x24, x24, #0xda7
   50a14:	add	x21, x21, #0x766
   50a18:	add	x23, x23, #0x780
   50a1c:	add	x19, x19, #0x78a
   50a20:	stur	w26, [x29, #-28]
   50a24:	str	w8, [sp, #32]
   50a28:	add	w8, w8, w26
   50a2c:	mov	w26, #0xff                  	// #255
   50a30:	stur	wzr, [x29, #-44]
   50a34:	stur	xzr, [x29, #-88]
   50a38:	str	w9, [sp, #128]
   50a3c:	stur	w16, [x29, #-128]
   50a40:	str	w8, [sp, #44]
   50a44:	stur	x27, [x29, #-72]
   50a48:	ldrb	w2, [x22]
   50a4c:	cmp	w2, #0x25
   50a50:	b.eq	50a6c <print_arm_disassembler_options@@Base+0x4f34>  // b.none
   50a54:	cbz	w2, 513e4 <print_arm_disassembler_options@@Base+0x58ac>
   50a58:	adrp	x1, 65000 <fields@@Base+0xee84>
   50a5c:	mov	x0, x28
   50a60:	add	x1, x1, #0x1b9
   50a64:	blr	x25
   50a68:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   50a6c:	ldrb	w8, [x22, #1]!
   50a70:	sub	w9, w8, #0x25
   50a74:	cmp	w9, #0x21
   50a78:	b.hi	50b3c <print_arm_disassembler_options@@Base+0x5004>  // b.pmore
   50a7c:	adr	x8, 50a8c <print_arm_disassembler_options@@Base+0x4f54>
   50a80:	ldrh	w10, [x20, x9, lsl #1]
   50a84:	add	x8, x8, x10, lsl #2
   50a88:	br	x8
   50a8c:	sub	x2, x29, #0x18
   50a90:	sub	x3, x29, #0xc
   50a94:	mov	x0, x22
   50a98:	mov	x1, x27
   50a9c:	bl	51ac4 <print_arm_disassembler_options@@Base+0x5f8c>
   50aa0:	ldrb	w8, [x0]
   50aa4:	mov	x22, x0
   50aa8:	cmp	w8, #0x52
   50aac:	b.le	50ae0 <print_arm_disassembler_options@@Base+0x4fa8>
   50ab0:	cmp	w8, #0x5f
   50ab4:	b.le	50b18 <print_arm_disassembler_options@@Base+0x4fe0>
   50ab8:	cmp	w8, #0x64
   50abc:	b.gt	50b60 <print_arm_disassembler_options@@Base+0x5028>
   50ac0:	cmp	w8, #0x60
   50ac4:	b.ne	50df4 <print_arm_disassembler_options@@Base+0x52bc>  // b.any
   50ac8:	ldur	x8, [x29, #-24]
   50acc:	adrp	x11, 55000 <xexit@@Base+0x184c>
   50ad0:	add	x22, x22, #0x1
   50ad4:	add	x11, x11, #0xdc4
   50ad8:	cbnz	x8, 51350 <print_arm_disassembler_options@@Base+0x5818>
   50adc:	b	50bb4 <print_arm_disassembler_options@@Base+0x507c>
   50ae0:	cmp	w8, #0x43
   50ae4:	b.le	50b8c <print_arm_disassembler_options@@Base+0x5054>
   50ae8:	cmp	w8, #0x44
   50aec:	b.eq	50b04 <print_arm_disassembler_options@@Base+0x4fcc>  // b.none
   50af0:	cmp	w8, #0x51
   50af4:	b.eq	50bbc <print_arm_disassembler_options@@Base+0x5084>  // b.none
   50af8:	cmp	w8, #0x52
   50afc:	b.ne	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.any
   50b00:	tbnz	w27, #6, 50bbc <print_arm_disassembler_options@@Base+0x5084>
   50b04:	ldur	x2, [x29, #-24]
   50b08:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50b0c:	mov	x0, x28
   50b10:	add	x1, x1, #0x588
   50b14:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50b18:	sub	w8, w8, #0x53
   50b1c:	cmp	w8, #0x3
   50b20:	b.cs	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.hs, b.nlast
   50b24:	ldrb	w9, [x22, #1]!
   50b28:	sub	w10, w9, #0x30
   50b2c:	cmp	w10, #0xa
   50b30:	b.cs	50bd8 <print_arm_disassembler_options@@Base+0x50a0>  // b.hs, b.nlast
   50b34:	mov	w11, #0xffffffd0            	// #-48
   50b38:	b	50be8 <print_arm_disassembler_options@@Base+0x50b0>
   50b3c:	cmp	w8, #0x75
   50b40:	b.eq	50cac <print_arm_disassembler_options@@Base+0x5174>  // b.none
   50b44:	cmp	w8, #0x63
   50b48:	b.ne	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.any
   50b4c:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50b50:	ldr	w8, [x8, #1072]
   50b54:	ldur	w10, [x29, #-80]
   50b58:	cbnz	w10, 50cd0 <print_arm_disassembler_options@@Base+0x5198>
   50b5c:	b	51350 <print_arm_disassembler_options@@Base+0x5818>
   50b60:	cmp	w8, #0x65
   50b64:	b.ne	50e14 <print_arm_disassembler_options@@Base+0x52dc>  // b.any
   50b68:	ldur	w8, [x29, #-12]
   50b6c:	ldur	x9, [x29, #-24]
   50b70:	mov	w10, #0x1                   	// #1
   50b74:	adrp	x1, 66000 <fields@@Base+0xfe84>
   50b78:	lsl	x8, x10, x8
   50b7c:	sub	x2, x8, x9
   50b80:	mov	x0, x28
   50b84:	add	x1, x1, #0xc2b
   50b88:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50b8c:	cmp	w8, #0x27
   50b90:	b.ne	50e50 <print_arm_disassembler_options@@Base+0x5318>  // b.any
   50b94:	ldur	w8, [x29, #-12]
   50b98:	ldur	x9, [x29, #-24]
   50b9c:	mov	x10, #0xffffffffffffffff    	// #-1
   50ba0:	add	x22, x22, #0x1
   50ba4:	lsl	x8, x10, x8
   50ba8:	mvn	x8, x8
   50bac:	cmp	x9, x8
   50bb0:	b.ne	51348 <print_arm_disassembler_options@@Base+0x5810>  // b.any
   50bb4:	ldrb	w2, [x22]
   50bb8:	b	50a58 <print_arm_disassembler_options@@Base+0x4f20>
   50bbc:	ldur	x8, [x29, #-24]
   50bc0:	mov	x0, x28
   50bc4:	lsr	x2, x8, #1
   50bc8:	tbnz	w8, #0, 50e98 <print_arm_disassembler_options@@Base+0x5360>
   50bcc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50bd0:	add	x1, x1, #0x5a2
   50bd4:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50bd8:	sub	w10, w9, #0x61
   50bdc:	cmp	w10, #0x6
   50be0:	b.cs	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.hs, b.nlast
   50be4:	mov	w11, #0xffffffa9            	// #-87
   50be8:	ldur	x10, [x29, #-24]
   50bec:	add	w9, w11, w9
   50bf0:	asr	w11, w9, #2
   50bf4:	cmp	x10, x11
   50bf8:	mov	w11, #0x8                   	// #8
   50bfc:	lsl	w8, w11, w8
   50c00:	b.cc	50c10 <print_arm_disassembler_options@@Base+0x50d8>  // b.lo, b.ul, b.last
   50c04:	and	w9, w9, #0x3
   50c08:	cmp	x10, x9
   50c0c:	b.ls	50ea4 <print_arm_disassembler_options@@Base+0x536c>  // b.plast
   50c10:	adrp	x1, 61000 <fields@@Base+0xae84>
   50c14:	lsl	w2, w8, w10
   50c18:	mov	x0, x28
   50c1c:	add	x1, x1, #0x830
   50c20:	b	50a64 <print_arm_disassembler_options@@Base+0x4f2c>
   50c24:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50c28:	mov	x0, x28
   50c2c:	add	x1, x1, #0x3fb
   50c30:	b	51310 <print_arm_disassembler_options@@Base+0x57d8>
   50c34:	ldur	x9, [x29, #-104]
   50c38:	adrp	x8, 5d000 <fields@@Base+0x6e84>
   50c3c:	add	x8, x8, #0x9a0
   50c40:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50c44:	ldrb	w8, [x8, x9]
   50c48:	mov	x0, x28
   50c4c:	add	x1, x1, #0x429
   50c50:	and	w26, w8, #0xf
   50c54:	lsr	w20, w8, #4
   50c58:	blr	x25
   50c5c:	cbz	w20, 50f00 <print_arm_disassembler_options@@Base+0x53c8>
   50c60:	mov	x23, x24
   50c64:	adrp	x24, 55000 <xexit@@Base+0x184c>
   50c68:	add	x24, x24, #0xdc4
   50c6c:	mov	x19, x25
   50c70:	cbz	w26, 5125c <print_arm_disassembler_options@@Base+0x5724>
   50c74:	add	w25, w20, #0x1
   50c78:	ldur	w20, [x29, #-76]
   50c7c:	mov	w27, wzr
   50c80:	cmp	w27, #0x0
   50c84:	csel	x2, x23, x24, eq  // eq = none
   50c88:	mov	x0, x28
   50c8c:	mov	x1, x21
   50c90:	mov	w3, w20
   50c94:	blr	x19
   50c98:	add	w27, w27, #0x1
   50c9c:	cmp	w26, w27
   50ca0:	add	w20, w20, w25
   50ca4:	b.ne	50c80 <print_arm_disassembler_options@@Base+0x5148>  // b.any
   50ca8:	b	5125c <print_arm_disassembler_options@@Base+0x5724>
   50cac:	adrp	x8, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   50cb0:	ldr	w8, [x8, #1072]
   50cb4:	ldur	w10, [x29, #-80]
   50cb8:	ldur	w9, [x29, #-44]
   50cbc:	cmp	w8, #0x0
   50cc0:	ccmp	w10, #0x0, #0x4, ne  // ne = any
   50cc4:	csinc	w9, w9, wzr, eq  // eq = none
   50cc8:	stur	w9, [x29, #-44]
   50ccc:	cbz	w10, 51350 <print_arm_disassembler_options@@Base+0x5818>
   50cd0:	cbz	w8, 51350 <print_arm_disassembler_options@@Base+0x5818>
   50cd4:	adrp	x9, 85000 <aarch64_operands@@Base+0x5c38>
   50cd8:	ubfx	w8, w8, #4, #4
   50cdc:	add	x9, x9, #0xf38
   50ce0:	ldr	x2, [x9, w8, uxtw #3]
   50ce4:	b	50e40 <print_arm_disassembler_options@@Base+0x5308>
   50ce8:	ldur	x10, [x29, #-96]
   50cec:	adrp	x12, 5e000 <fields@@Base+0x7e84>
   50cf0:	add	x12, x12, #0x1b4
   50cf4:	adr	x8, 50d04 <print_arm_disassembler_options@@Base+0x51cc>
   50cf8:	ldrb	w9, [x12, x10]
   50cfc:	add	x8, x8, x9, lsl #2
   50d00:	br	x8
   50d04:	ldr	w8, [sp, #84]
   50d08:	mov	w0, wzr
   50d0c:	cbnz	w8, 51428 <print_arm_disassembler_options@@Base+0x58f0>
   50d10:	ldp	w9, w8, [sp, #36]
   50d14:	tbz	w8, #0, 50f78 <print_arm_disassembler_options@@Base+0x5440>
   50d18:	b	51428 <print_arm_disassembler_options@@Base+0x58f0>
   50d1c:	ldur	w2, [x29, #-124]
   50d20:	ldr	w3, [sp, #132]
   50d24:	adrp	x1, 61000 <fields@@Base+0xae84>
   50d28:	mov	x0, x28
   50d2c:	add	x1, x1, #0x782
   50d30:	b	50f40 <print_arm_disassembler_options@@Base+0x5408>
   50d34:	ldur	x8, [x29, #-96]
   50d38:	cbz	w8, 50f20 <print_arm_disassembler_options@@Base+0x53e8>
   50d3c:	ldr	w3, [sp, #104]
   50d40:	mov	x0, x28
   50d44:	cmp	w3, #0x20
   50d48:	b.cc	50f34 <print_arm_disassembler_options@@Base+0x53fc>  // b.lo, b.ul, b.last
   50d4c:	adrp	x1, 61000 <fields@@Base+0xae84>
   50d50:	add	x1, x1, #0x818
   50d54:	b	50f3c <print_arm_disassembler_options@@Base+0x5404>
   50d58:	ldur	x23, [x29, #-64]
   50d5c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50d60:	mov	x0, x28
   50d64:	add	x1, x1, #0x429
   50d68:	blr	x25
   50d6c:	ldr	w24, [sp, #128]
   50d70:	cmp	w24, #0x2
   50d74:	b.cc	50eb8 <print_arm_disassembler_options@@Base+0x5380>  // b.lo, b.ul, b.last
   50d78:	ldur	w20, [x29, #-76]
   50d7c:	adrp	x21, 55000 <xexit@@Base+0x184c>
   50d80:	adrp	x27, 55000 <xexit@@Base+0x184c>
   50d84:	mov	x26, x19
   50d88:	mov	x19, x25
   50d8c:	mov	w25, wzr
   50d90:	add	x21, x21, #0xdc4
   50d94:	add	x27, x27, #0xda7
   50d98:	cmp	w25, #0x0
   50d9c:	csel	x2, x27, x21, eq  // eq = none
   50da0:	mov	x0, x28
   50da4:	mov	x1, x26
   50da8:	mov	w3, w20
   50dac:	blr	x19
   50db0:	ldur	w8, [x29, #-28]
   50db4:	add	w25, w25, #0x1
   50db8:	add	w20, w20, w24
   50dbc:	cmp	w8, w25
   50dc0:	b.ne	50d98 <print_arm_disassembler_options@@Base+0x5260>  // b.any
   50dc4:	b	510e4 <print_arm_disassembler_options@@Base+0x55ac>
   50dc8:	ldur	x8, [x29, #-104]
   50dcc:	ldr	x3, [sp, #136]
   50dd0:	cmp	w8, #0x8
   50dd4:	b.cs	50edc <print_arm_disassembler_options@@Base+0x53a4>  // b.hs, b.nlast
   50dd8:	orr	x8, x3, #0xffffffff00000000
   50ddc:	cmp	w3, #0x0
   50de0:	adrp	x1, 61000 <fields@@Base+0xae84>
   50de4:	csel	x2, x8, x3, lt  // lt = tstop
   50de8:	mov	x0, x28
   50dec:	add	x1, x1, #0x7fb
   50df0:	b	50ef8 <print_arm_disassembler_options@@Base+0x53c0>
   50df4:	cmp	w8, #0x64
   50df8:	b.ne	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.any
   50dfc:	ldur	x2, [x29, #-24]
   50e00:	adrp	x1, 66000 <fields@@Base+0xfe84>
   50e04:	mov	x0, x28
   50e08:	add	x1, x1, #0xc2b
   50e0c:	stur	x2, [x29, #-88]
   50e10:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50e14:	cmp	w8, #0x72
   50e18:	b.ne	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.any
   50e1c:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   50e20:	ldr	w8, [x8, #1584]
   50e24:	ldur	x9, [x29, #-24]
   50e28:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   50e2c:	mov	w10, #0x90                  	// #144
   50e30:	add	x11, x11, #0xaf8
   50e34:	madd	x8, x8, x10, x11
   50e38:	add	x8, x8, x9, lsl #3
   50e3c:	ldr	x2, [x8, #16]
   50e40:	adrp	x1, 66000 <fields@@Base+0xfe84>
   50e44:	mov	x0, x28
   50e48:	add	x1, x1, #0xbe9
   50e4c:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50e50:	cmp	w8, #0x3f
   50e54:	b.ne	51448 <print_arm_disassembler_options@@Base+0x5910>  // b.any
   50e58:	ldur	w8, [x29, #-12]
   50e5c:	ldur	w9, [x29, #-24]
   50e60:	mov	w20, #0x1                   	// #1
   50e64:	adrp	x1, 65000 <fields@@Base+0xee84>
   50e68:	lsl	w8, w20, w8
   50e6c:	sub	w8, w8, w9
   50e70:	ldrb	w2, [x22, w8, sxtw]
   50e74:	mov	x0, x28
   50e78:	add	x1, x1, #0x1b9
   50e7c:	blr	x25
   50e80:	ldur	w8, [x29, #-12]
   50e84:	lsl	w8, w20, w8
   50e88:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   50e8c:	add	x20, x20, #0x170
   50e90:	add	x22, x22, w8, sxtw
   50e94:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   50e98:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50e9c:	add	x1, x1, #0x58d
   50ea0:	b	51344 <print_arm_disassembler_options@@Base+0x580c>
   50ea4:	adrp	x1, 69000 <fields@@Base+0x12e84>
   50ea8:	lsl	w2, w8, w10
   50eac:	mov	x0, x28
   50eb0:	add	x1, x1, #0x3d4
   50eb4:	b	50a64 <print_arm_disassembler_options@@Base+0x4f2c>
   50eb8:	ldur	w8, [x29, #-28]
   50ebc:	mov	x0, x28
   50ec0:	cmp	w8, #0x1
   50ec4:	b.ne	510cc <print_arm_disassembler_options@@Base+0x5594>  // b.any
   50ec8:	ldur	w2, [x29, #-76]
   50ecc:	adrp	x1, 61000 <fields@@Base+0xae84>
   50ed0:	add	x1, x1, #0x798
   50ed4:	blr	x25
   50ed8:	b	510e0 <print_arm_disassembler_options@@Base+0x55a8>
   50edc:	cmp	w8, #0xc
   50ee0:	b.cs	511d4 <print_arm_disassembler_options@@Base+0x569c>  // b.hs, b.nlast
   50ee4:	ldr	x2, [sp, #48]
   50ee8:	adrp	x1, 61000 <fields@@Base+0xae84>
   50eec:	mov	x0, x28
   50ef0:	add	x1, x1, #0x7dc
   50ef4:	mov	x3, x2
   50ef8:	blr	x25
   50efc:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   50f00:	cmp	w26, #0x1
   50f04:	b.ne	5123c <print_arm_disassembler_options@@Base+0x5704>  // b.any
   50f08:	ldur	w2, [x29, #-76]
   50f0c:	adrp	x1, 61000 <fields@@Base+0xae84>
   50f10:	mov	x0, x28
   50f14:	add	x1, x1, #0x770
   50f18:	blr	x25
   50f1c:	b	51258 <print_arm_disassembler_options@@Base+0x5720>
   50f20:	ldur	w2, [x29, #-128]
   50f24:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50f28:	mov	x0, x28
   50f2c:	add	x1, x1, #0x4cf
   50f30:	b	50a64 <print_arm_disassembler_options@@Base+0x4f2c>
   50f34:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50f38:	add	x1, x1, #0x4ee
   50f3c:	ldur	w2, [x29, #-128]
   50f40:	blr	x25
   50f44:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   50f48:	ldr	w9, [sp, #80]
   50f4c:	ldr	w8, [sp, #64]
   50f50:	tbnz	w8, #0, 50f78 <print_arm_disassembler_options@@Base+0x5440>
   50f54:	b	51424 <print_arm_disassembler_options@@Base+0x58ec>
   50f58:	ldr	w8, [sp, #56]
   50f5c:	mov	w9, wzr
   50f60:	mov	w0, wzr
   50f64:	tbnz	w8, #0, 50f78 <print_arm_disassembler_options@@Base+0x5440>
   50f68:	b	51428 <print_arm_disassembler_options@@Base+0x58f0>
   50f6c:	ldr	w9, [sp, #68]
   50f70:	ldr	w8, [sp, #60]
   50f74:	tbz	w8, #0, 51424 <print_arm_disassembler_options@@Base+0x58ec>
   50f78:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   50f7c:	mov	x0, x28
   50f80:	add	x1, x1, #0x429
   50f84:	str	w9, [sp, #112]
   50f88:	stur	x22, [x29, #-112]
   50f8c:	mov	x21, x11
   50f90:	blr	x25
   50f94:	ldur	w26, [x29, #-76]
   50f98:	mov	x20, x24
   50f9c:	mov	x19, x25
   50fa0:	ldp	w25, w24, [sp, #120]
   50fa4:	mov	x22, x28
   50fa8:	mov	x28, x23
   50fac:	ldr	w23, [sp, #116]
   50fb0:	mov	w27, wzr
   50fb4:	cmp	w27, #0x0
   50fb8:	csel	x2, x20, x21, eq  // eq = none
   50fbc:	mov	x0, x22
   50fc0:	mov	x1, x28
   50fc4:	mov	w3, w26
   50fc8:	mov	w4, w25
   50fcc:	blr	x19
   50fd0:	add	w27, w27, #0x1
   50fd4:	cmp	w23, w27
   50fd8:	add	w26, w26, w24
   50fdc:	b.ne	50fb4 <print_arm_disassembler_options@@Base+0x547c>  // b.any
   50fe0:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   50fe4:	ldr	w8, [x8, #1584]
   50fe8:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   50fec:	mov	w9, #0x90                  	// #144
   50ff0:	add	x10, x10, #0xaf8
   50ff4:	madd	x8, x8, x9, x10
   50ff8:	ldur	x9, [x29, #-56]
   50ffc:	adrp	x1, 61000 <fields@@Base+0xae84>
   51000:	mov	x0, x22
   51004:	add	x1, x1, #0x774
   51008:	add	x8, x8, x9, lsl #3
   5100c:	ldr	x2, [x8, #16]
   51010:	blr	x19
   51014:	ldr	w2, [sp, #112]
   51018:	mov	x25, x19
   5101c:	cbz	w2, 51030 <print_arm_disassembler_options@@Base+0x54f8>
   51020:	adrp	x1, 61000 <fields@@Base+0xae84>
   51024:	mov	x0, x22
   51028:	add	x1, x1, #0x77b
   5102c:	blr	x25
   51030:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   51034:	mov	x0, x22
   51038:	add	x1, x1, #0x4be
   5103c:	blr	x25
   51040:	ldp	x27, x11, [x29, #-72]
   51044:	adrp	x24, 55000 <xexit@@Base+0x184c>
   51048:	adrp	x21, 61000 <fields@@Base+0xae84>
   5104c:	adrp	x23, 61000 <fields@@Base+0xae84>
   51050:	adrp	x19, 61000 <fields@@Base+0xae84>
   51054:	cmp	w11, #0xf
   51058:	add	x24, x24, #0xda7
   5105c:	add	x21, x21, #0x766
   51060:	add	x23, x23, #0x780
   51064:	add	x19, x19, #0x78a
   51068:	mov	w26, #0xff                  	// #255
   5106c:	b.eq	5108c <print_arm_disassembler_options@@Base+0x5554>  // b.none
   51070:	ldur	x22, [x29, #-112]
   51074:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   51078:	cmp	w11, #0xd
   5107c:	add	x20, x20, #0x170
   51080:	b.ne	510a4 <print_arm_disassembler_options@@Base+0x556c>  // b.any
   51084:	ldur	x28, [x29, #-40]
   51088:	b	51304 <print_arm_disassembler_options@@Base+0x57cc>
   5108c:	ldur	x28, [x29, #-40]
   51090:	ldur	x22, [x29, #-112]
   51094:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   51098:	adrp	x11, 55000 <xexit@@Base+0x184c>
   5109c:	add	x20, x20, #0x170
   510a0:	b	5134c <print_arm_disassembler_options@@Base+0x5814>
   510a4:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   510a8:	ldr	w8, [x8, #1584]
   510ac:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   510b0:	mov	w9, #0x90                  	// #144
   510b4:	add	x10, x10, #0xaf8
   510b8:	madd	x8, x8, x9, x10
   510bc:	add	x8, x8, x11, lsl #3
   510c0:	ldr	x2, [x8, #16]
   510c4:	ldur	x28, [x29, #-40]
   510c8:	b	51338 <print_arm_disassembler_options@@Base+0x5800>
   510cc:	ldur	w2, [x29, #-76]
   510d0:	ldr	w3, [sp, #44]
   510d4:	adrp	x1, 61000 <fields@@Base+0xae84>
   510d8:	add	x1, x1, #0x792
   510dc:	blr	x25
   510e0:	mov	x19, x25
   510e4:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   510e8:	ldr	w8, [x8, #1584]
   510ec:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   510f0:	mov	w9, #0x90                  	// #144
   510f4:	add	x10, x10, #0xaf8
   510f8:	madd	x8, x8, x9, x10
   510fc:	ldur	x9, [x29, #-56]
   51100:	adrp	x1, 61000 <fields@@Base+0xae84>
   51104:	mov	x0, x28
   51108:	add	x1, x1, #0x774
   5110c:	add	x8, x8, x9, lsl #3
   51110:	ldr	x2, [x8, #16]
   51114:	blr	x19
   51118:	ldur	x27, [x29, #-72]
   5111c:	mov	x25, x19
   51120:	mov	w26, #0xff                  	// #255
   51124:	tbz	w27, #4, 51138 <print_arm_disassembler_options@@Base+0x5600>
   51128:	ldr	x1, [sp, #88]
   5112c:	ldr	w2, [sp, #100]
   51130:	mov	x0, x28
   51134:	blr	x25
   51138:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   5113c:	mov	x0, x28
   51140:	add	x1, x1, #0x4be
   51144:	blr	x25
   51148:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   5114c:	adrp	x24, 55000 <xexit@@Base+0x184c>
   51150:	adrp	x19, 61000 <fields@@Base+0xae84>
   51154:	cmp	w23, #0xf
   51158:	add	x20, x20, #0x170
   5115c:	add	x24, x24, #0xda7
   51160:	add	x19, x19, #0x78a
   51164:	b.eq	511b4 <print_arm_disassembler_options@@Base+0x567c>  // b.none
   51168:	cmp	w23, #0xd
   5116c:	b.ne	51184 <print_arm_disassembler_options@@Base+0x564c>  // b.any
   51170:	adrp	x1, 65000 <fields@@Base+0xee84>
   51174:	mov	x0, x28
   51178:	add	x1, x1, #0x722
   5117c:	blr	x25
   51180:	b	511b4 <print_arm_disassembler_options@@Base+0x567c>
   51184:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   51188:	ldr	w8, [x8, #1584]
   5118c:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   51190:	mov	w9, #0x90                  	// #144
   51194:	add	x10, x10, #0xaf8
   51198:	madd	x8, x8, x9, x10
   5119c:	add	x8, x8, x23, lsl #3
   511a0:	ldr	x2, [x8, #16]
   511a4:	adrp	x1, 66000 <fields@@Base+0xfe84>
   511a8:	mov	x0, x28
   511ac:	add	x1, x1, #0x511
   511b0:	blr	x25
   511b4:	ldur	x28, [x29, #-40]
   511b8:	adrp	x11, 55000 <xexit@@Base+0x184c>
   511bc:	adrp	x21, 61000 <fields@@Base+0xae84>
   511c0:	adrp	x23, 61000 <fields@@Base+0xae84>
   511c4:	add	x11, x11, #0xdc4
   511c8:	add	x21, x21, #0x766
   511cc:	add	x23, x23, #0x780
   511d0:	b	51350 <print_arm_disassembler_options@@Base+0x5818>
   511d4:	ldr	x3, [sp, #72]
   511d8:	cmp	w8, #0xe
   511dc:	b.cc	50dd8 <print_arm_disassembler_options@@Base+0x52a0>  // b.lo, b.ul, b.last
   511e0:	b.ne	51358 <print_arm_disassembler_options@@Base+0x5820>  // b.any
   511e4:	ldp	x9, x8, [sp, #16]
   511e8:	cbz	w8, 5137c <print_arm_disassembler_options@@Base+0x5844>
   511ec:	mov	x2, xzr
   511f0:	mov	x3, xzr
   511f4:	mov	w8, #0x7                   	// #7
   511f8:	mov	x11, x9
   511fc:	lsr	w9, w11, w8
   51200:	tst	w9, #0x1
   51204:	csel	x9, xzr, x26, eq  // eq = none
   51208:	mov	x10, x9
   5120c:	cmp	w8, #0x4
   51210:	sub	w8, w8, #0x1
   51214:	bfi	x9, x2, #8, #56
   51218:	bfi	x10, x3, #8, #56
   5121c:	csel	x2, x2, x9, cc  // cc = lo, ul, last
   51220:	csel	x3, x10, x3, cc  // cc = lo, ul, last
   51224:	cmn	w8, #0x1
   51228:	b.ne	511fc <print_arm_disassembler_options@@Base+0x56c4>  // b.any
   5122c:	adrp	x1, 61000 <fields@@Base+0xae84>
   51230:	mov	x0, x28
   51234:	add	x1, x1, #0x80a
   51238:	b	50ef8 <print_arm_disassembler_options@@Base+0x53c0>
   5123c:	ldr	w8, [sp, #32]
   51240:	ldur	w2, [x29, #-76]
   51244:	adrp	x1, 61000 <fields@@Base+0xae84>
   51248:	mov	x0, x28
   5124c:	add	w3, w8, w26
   51250:	add	x1, x1, #0x76c
   51254:	blr	x25
   51258:	mov	x19, x25
   5125c:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   51260:	ldr	w8, [x8, #1584]
   51264:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   51268:	mov	w9, #0x90                  	// #144
   5126c:	add	x10, x10, #0xaf8
   51270:	madd	x8, x8, x9, x10
   51274:	ldur	x9, [x29, #-56]
   51278:	adrp	x1, 61000 <fields@@Base+0xae84>
   5127c:	mov	x0, x28
   51280:	add	x1, x1, #0x774
   51284:	add	x8, x8, x9, lsl #3
   51288:	ldr	x2, [x8, #16]
   5128c:	blr	x19
   51290:	ldur	x8, [x29, #-120]
   51294:	ldur	x28, [x29, #-40]
   51298:	adrp	x23, 61000 <fields@@Base+0xae84>
   5129c:	add	x23, x23, #0x780
   512a0:	mov	x25, x19
   512a4:	cbz	w8, 512bc <print_arm_disassembler_options@@Base+0x5784>
   512a8:	ldr	w2, [sp, #108]
   512ac:	adrp	x1, 61000 <fields@@Base+0xae84>
   512b0:	mov	x0, x28
   512b4:	add	x1, x1, #0x77b
   512b8:	blr	x25
   512bc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   512c0:	mov	x0, x28
   512c4:	add	x1, x1, #0x4be
   512c8:	blr	x25
   512cc:	ldp	x27, x11, [x29, #-72]
   512d0:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   512d4:	adrp	x24, 55000 <xexit@@Base+0x184c>
   512d8:	adrp	x21, 61000 <fields@@Base+0xae84>
   512dc:	adrp	x19, 61000 <fields@@Base+0xae84>
   512e0:	cmp	w11, #0xf
   512e4:	add	x20, x20, #0x170
   512e8:	add	x24, x24, #0xda7
   512ec:	add	x21, x21, #0x766
   512f0:	add	x19, x19, #0x78a
   512f4:	mov	w26, #0xff                  	// #255
   512f8:	b.eq	51348 <print_arm_disassembler_options@@Base+0x5810>  // b.none
   512fc:	cmp	w11, #0xd
   51300:	b.ne	51318 <print_arm_disassembler_options@@Base+0x57e0>  // b.any
   51304:	adrp	x1, 65000 <fields@@Base+0xee84>
   51308:	mov	x0, x28
   5130c:	add	x1, x1, #0x722
   51310:	blr	x25
   51314:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   51318:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   5131c:	ldr	w8, [x8, #1584]
   51320:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   51324:	mov	w9, #0x90                  	// #144
   51328:	add	x10, x10, #0xaf8
   5132c:	madd	x8, x8, x9, x10
   51330:	add	x8, x8, x11, lsl #3
   51334:	ldr	x2, [x8, #16]
   51338:	adrp	x1, 66000 <fields@@Base+0xfe84>
   5133c:	mov	x0, x28
   51340:	add	x1, x1, #0x511
   51344:	blr	x25
   51348:	adrp	x11, 55000 <xexit@@Base+0x184c>
   5134c:	add	x11, x11, #0xdc4
   51350:	add	x22, x22, #0x1
   51354:	b	50a48 <print_arm_disassembler_options@@Base+0x4f10>
   51358:	ldr	x4, [sp, #24]
   5135c:	cbz	w4, 51394 <print_arm_disassembler_options@@Base+0x585c>
   51360:	adrp	x1, 61000 <fields@@Base+0xae84>
   51364:	mov	x0, x28
   51368:	add	x1, x1, #0x7af
   5136c:	ldr	x2, [sp, #16]
   51370:	mov	w3, w8
   51374:	blr	x25
   51378:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   5137c:	adrp	x1, 61000 <fields@@Base+0xae84>
   51380:	mov	x0, x28
   51384:	add	x1, x1, #0x7cd
   51388:	mov	x2, x9
   5138c:	mov	x3, x9
   51390:	b	50ef8 <print_arm_disassembler_options@@Base+0x53c0>
   51394:	ldr	x20, [sp, #8]
   51398:	ldr	w9, [sp, #4]
   5139c:	sturh	wzr, [x29, #-12]
   513a0:	adrp	x0, 96000 <aarch64_operands@@Base+0x16c38>
   513a4:	lsr	x8, x20, #24
   513a8:	sturb	w9, [x29, #-10]
   513ac:	sturb	w8, [x29, #-9]
   513b0:	ldr	x0, [x0, #3864]
   513b4:	sub	x1, x29, #0xc
   513b8:	sub	x2, x29, #0x18
   513bc:	bl	359a0 <floatformat_to_double@plt>
   513c0:	ldur	d0, [x29, #-24]
   513c4:	adrp	x1, 61000 <fields@@Base+0xae84>
   513c8:	mov	x0, x28
   513cc:	add	x1, x1, #0x7eb
   513d0:	mov	x2, x20
   513d4:	adrp	x20, 5e000 <fields@@Base+0x7e84>
   513d8:	add	x20, x20, #0x170
   513dc:	blr	x25
   513e0:	b	51348 <print_arm_disassembler_options@@Base+0x5810>
   513e4:	ldur	x2, [x29, #-88]
   513e8:	add	x8, x2, #0x10
   513ec:	cmp	x8, #0x31
   513f0:	b.cc	51404 <print_arm_disassembler_options@@Base+0x58cc>  // b.lo, b.ul, b.last
   513f4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   513f8:	add	x1, x1, #0x48e
   513fc:	mov	x0, x28
   51400:	blr	x25
   51404:	ldur	w8, [x29, #-44]
   51408:	cbz	w8, 5141c <print_arm_disassembler_options@@Base+0x58e4>
   5140c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51410:	add	x1, x1, #0xa86
   51414:	mov	x0, x28
   51418:	blr	x25
   5141c:	mov	w0, #0x1                   	// #1
   51420:	b	51428 <print_arm_disassembler_options@@Base+0x58f0>
   51424:	mov	w0, wzr
   51428:	ldp	x20, x19, [sp, #352]
   5142c:	ldp	x22, x21, [sp, #336]
   51430:	ldp	x24, x23, [sp, #320]
   51434:	ldp	x26, x25, [sp, #304]
   51438:	ldp	x28, x27, [sp, #288]
   5143c:	ldp	x29, x30, [sp, #272]
   51440:	add	sp, sp, #0x170
   51444:	ret
   51448:	bl	35750 <abort@plt>
   5144c:	stp	x29, x30, [sp, #-64]!
   51450:	stp	x24, x23, [sp, #16]
   51454:	stp	x22, x21, [sp, #32]
   51458:	stp	x20, x19, [sp, #48]
   5145c:	ldp	x19, x20, [x1]
   51460:	mov	w8, #0x20f0000             	// #34537472
   51464:	and	x8, x2, x8
   51468:	mov	x21, x2
   5146c:	cmp	x8, #0xf0, lsl #12
   51470:	mov	x29, sp
   51474:	b.ne	514cc <print_arm_disassembler_options@@Base+0x5994>  // b.any
   51478:	mov	x22, x1
   5147c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51480:	mov	x23, x0
   51484:	add	x1, x1, #0xa99
   51488:	mov	x0, x20
   5148c:	and	x24, x21, #0xfff
   51490:	blr	x19
   51494:	tbnz	w21, #24, 51540 <print_arm_disassembler_options@@Base+0x5a08>
   51498:	adrp	x8, 55000 <xexit@@Base+0x184c>
   5149c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   514a0:	add	x8, x8, #0xda7
   514a4:	add	x9, x9, #0x39c
   514a8:	tst	x21, #0x800000
   514ac:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   514b0:	csel	x2, x9, x8, eq  // eq = none
   514b4:	add	x1, x1, #0x418
   514b8:	mov	x0, x20
   514bc:	mov	w3, w24
   514c0:	blr	x19
   514c4:	add	x21, x23, #0x8
   514c8:	b	515bc <print_arm_disassembler_options@@Base+0x5a84>
   514cc:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   514d0:	ldr	w8, [x8, #1584]
   514d4:	adrp	x11, 81000 <aarch64_operands@@Base+0x1c38>
   514d8:	mov	w10, #0x90                  	// #144
   514dc:	add	x11, x11, #0xaf8
   514e0:	ubfx	x9, x21, #16, #4
   514e4:	madd	x8, x8, x10, x11
   514e8:	add	x8, x8, x9, lsl #3
   514ec:	ldr	x2, [x8, #16]
   514f0:	adrp	x1, 61000 <fields@@Base+0xae84>
   514f4:	add	x1, x1, #0x777
   514f8:	mov	x0, x20
   514fc:	blr	x19
   51500:	tbnz	w21, #24, 515e4 <print_arm_disassembler_options@@Base+0x5aac>
   51504:	tbnz	w21, #25, 51638 <print_arm_disassembler_options@@Base+0x5b00>
   51508:	adrp	x8, 55000 <xexit@@Base+0x184c>
   5150c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   51510:	and	x22, x21, #0xfff
   51514:	add	x8, x8, #0xda7
   51518:	add	x9, x9, #0x39c
   5151c:	tst	x21, #0x800000
   51520:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   51524:	csel	x2, x9, x8, eq  // eq = none
   51528:	add	x1, x1, #0x418
   5152c:	mov	x0, x20
   51530:	mov	w3, w22
   51534:	and	x23, x21, #0x800000
   51538:	blr	x19
   5153c:	b	516dc <print_arm_disassembler_options@@Base+0x5ba4>
   51540:	mov	w8, #0xfff                 	// #4095
   51544:	movk	w8, #0x80, lsl #16
   51548:	and	x8, x21, x8
   5154c:	cmp	x8, #0x800, lsl #12
   51550:	b.ne	51558 <print_arm_disassembler_options@@Base+0x5a20>  // b.any
   51554:	tbz	w21, #21, 51584 <print_arm_disassembler_options@@Base+0x5a4c>
   51558:	adrp	x8, 55000 <xexit@@Base+0x184c>
   5155c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   51560:	add	x8, x8, #0xda7
   51564:	add	x9, x9, #0x39c
   51568:	tst	x21, #0x800000
   5156c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   51570:	csel	x2, x9, x8, eq  // eq = none
   51574:	add	x1, x1, #0x419
   51578:	mov	x0, x20
   5157c:	mov	w3, w24
   51580:	blr	x19
   51584:	tst	x21, #0x800000
   51588:	adrp	x8, 55000 <xexit@@Base+0x184c>
   5158c:	adrp	x9, 65000 <fields@@Base+0xee84>
   51590:	add	x8, x8, #0xda7
   51594:	add	x9, x9, #0x722
   51598:	cneg	x10, x24, eq  // eq = none
   5159c:	tst	x21, #0x200000
   515a0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   515a4:	add	x10, x23, x10
   515a8:	csel	x2, x9, x8, ne  // ne = any
   515ac:	add	x1, x1, #0x438
   515b0:	mov	x0, x20
   515b4:	add	x21, x10, #0x8
   515b8:	blr	x19
   515bc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   515c0:	add	x1, x1, #0x411
   515c4:	mov	x0, x20
   515c8:	blr	x19
   515cc:	ldr	x8, [x22, #120]
   515d0:	mov	x0, x21
   515d4:	mov	x1, x22
   515d8:	blr	x8
   515dc:	mov	x0, xzr
   515e0:	b	516e4 <print_arm_disassembler_options@@Base+0x5bac>
   515e4:	adrp	x24, 55000 <xexit@@Base+0x184c>
   515e8:	add	x24, x24, #0xda7
   515ec:	tbnz	w21, #25, 51680 <print_arm_disassembler_options@@Base+0x5b48>
   515f0:	mov	w8, #0xfff                 	// #4095
   515f4:	movk	w8, #0x80, lsl #16
   515f8:	orr	x8, x8, #0x200000
   515fc:	and	x8, x21, x8
   51600:	cmp	x8, #0x800, lsl #12
   51604:	and	x23, x21, #0x800000
   51608:	b.eq	516b8 <print_arm_disassembler_options@@Base+0x5b80>  // b.none
   5160c:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   51610:	and	x22, x21, #0xfff
   51614:	add	x8, x8, #0x39c
   51618:	cmp	x23, #0x0
   5161c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   51620:	csel	x2, x8, x24, eq  // eq = none
   51624:	add	x1, x1, #0x419
   51628:	mov	x0, x20
   5162c:	mov	w3, w22
   51630:	blr	x19
   51634:	b	516bc <print_arm_disassembler_options@@Base+0x5b84>
   51638:	adrp	x8, 55000 <xexit@@Base+0x184c>
   5163c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   51640:	add	x8, x8, #0xda7
   51644:	add	x9, x9, #0x39c
   51648:	tst	x21, #0x800000
   5164c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51650:	csel	x2, x9, x8, eq  // eq = none
   51654:	add	x1, x1, #0xa9d
   51658:	mov	x0, x20
   5165c:	and	x23, x21, #0x800000
   51660:	blr	x19
   51664:	mov	w3, #0x1                   	// #1
   51668:	mov	x0, x21
   5166c:	mov	x1, x19
   51670:	mov	x2, x20
   51674:	bl	516f8 <print_arm_disassembler_options@@Base+0x5bc0>
   51678:	mov	x22, xzr
   5167c:	b	516dc <print_arm_disassembler_options@@Base+0x5ba4>
   51680:	adrp	x8, 5e000 <fields@@Base+0x7e84>
   51684:	add	x8, x8, #0x39c
   51688:	tst	x21, #0x800000
   5168c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51690:	csel	x2, x8, x24, eq  // eq = none
   51694:	add	x1, x1, #0x511
   51698:	mov	x0, x20
   5169c:	and	x23, x21, #0x800000
   516a0:	blr	x19
   516a4:	mov	w3, #0x1                   	// #1
   516a8:	mov	x0, x21
   516ac:	mov	x1, x19
   516b0:	mov	x2, x20
   516b4:	bl	516f8 <print_arm_disassembler_options@@Base+0x5bc0>
   516b8:	mov	x22, xzr
   516bc:	adrp	x8, 65000 <fields@@Base+0xee84>
   516c0:	add	x8, x8, #0x722
   516c4:	tst	x21, #0x200000
   516c8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   516cc:	csel	x2, x24, x8, eq  // eq = none
   516d0:	add	x1, x1, #0x438
   516d4:	mov	x0, x20
   516d8:	blr	x19
   516dc:	cmp	x23, #0x0
   516e0:	cneg	x0, x22, eq  // eq = none
   516e4:	ldp	x20, x19, [sp, #48]
   516e8:	ldp	x22, x21, [sp, #32]
   516ec:	ldp	x24, x23, [sp, #16]
   516f0:	ldp	x29, x30, [sp], #64
   516f4:	ret
   516f8:	stp	x29, x30, [sp, #-64]!
   516fc:	str	x23, [sp, #16]
   51700:	stp	x22, x21, [sp, #32]
   51704:	stp	x20, x19, [sp, #48]
   51708:	adrp	x23, ed000 <aarch64_opcode_table@@Base+0x555c0>
   5170c:	ldr	w8, [x23, #1584]
   51710:	adrp	x22, 81000 <aarch64_operands@@Base+0x1c38>
   51714:	mov	w10, #0x90                  	// #144
   51718:	add	x22, x22, #0xaf8
   5171c:	and	x9, x0, #0xf
   51720:	madd	x8, x8, x10, x22
   51724:	add	x8, x8, x9, lsl #3
   51728:	mov	x19, x2
   5172c:	ldr	x2, [x8, #16]
   51730:	mov	w20, w3
   51734:	mov	x3, x1
   51738:	adrp	x1, 66000 <fields@@Base+0xfe84>
   5173c:	mov	x29, sp
   51740:	mov	x21, x0
   51744:	add	x1, x1, #0xbe9
   51748:	mov	x0, x19
   5174c:	str	x3, [x29, #24]
   51750:	blr	x3
   51754:	tst	x21, #0xff0
   51758:	b.eq	517a0 <print_arm_disassembler_options@@Base+0x5c68>  // b.none
   5175c:	tbnz	w21, #4, 517b4 <print_arm_disassembler_options@@Base+0x5c7c>
   51760:	ubfx	w3, w21, #7, #5
   51764:	ubfx	w8, w21, #5, #2
   51768:	cbz	w3, 51814 <print_arm_disassembler_options@@Base+0x5cdc>
   5176c:	cbz	w20, 51884 <print_arm_disassembler_options@@Base+0x5d4c>
   51770:	adrp	x9, 8f000 <aarch64_operands@@Base+0xfc38>
   51774:	add	x9, x9, #0x6b8
   51778:	ldr	x2, [x9, w8, uxtw #3]
   5177c:	mov	x0, x19
   51780:	ldr	x4, [x29, #24]
   51784:	ldp	x20, x19, [sp, #48]
   51788:	ldp	x22, x21, [sp, #32]
   5178c:	ldr	x23, [sp, #16]
   51790:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51794:	add	x1, x1, #0xaaf
   51798:	ldp	x29, x30, [sp], #64
   5179c:	br	x4
   517a0:	ldp	x20, x19, [sp, #48]
   517a4:	ldp	x22, x21, [sp, #32]
   517a8:	ldr	x23, [sp, #16]
   517ac:	ldp	x29, x30, [sp], #64
   517b0:	ret
   517b4:	tbnz	w21, #7, 51808 <print_arm_disassembler_options@@Base+0x5cd0>
   517b8:	cbz	w20, 51840 <print_arm_disassembler_options@@Base+0x5d08>
   517bc:	ldr	w10, [x23, #1584]
   517c0:	adrp	x9, 8f000 <aarch64_operands@@Base+0xfc38>
   517c4:	ubfx	x8, x21, #5, #2
   517c8:	add	x9, x9, #0x6b8
   517cc:	ldr	x2, [x9, x8, lsl #3]
   517d0:	mov	w9, #0x90                  	// #144
   517d4:	ubfx	x8, x21, #8, #4
   517d8:	madd	x9, x10, x9, x22
   517dc:	add	x8, x9, x8, lsl #3
   517e0:	ldr	x3, [x8, #16]
   517e4:	mov	x0, x19
   517e8:	ldr	x4, [x29, #24]
   517ec:	ldp	x20, x19, [sp, #48]
   517f0:	ldp	x22, x21, [sp, #32]
   517f4:	ldr	x23, [sp, #16]
   517f8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   517fc:	add	x1, x1, #0xad5
   51800:	ldp	x29, x30, [sp], #64
   51804:	br	x4
   51808:	adrp	x1, 66000 <fields@@Base+0xfe84>
   5180c:	add	x1, x1, #0xab8
   51810:	b	51824 <print_arm_disassembler_options@@Base+0x5cec>
   51814:	cmp	w8, #0x3
   51818:	b.ne	5187c <print_arm_disassembler_options@@Base+0x5d44>  // b.any
   5181c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51820:	add	x1, x1, #0xaa9
   51824:	mov	x0, x19
   51828:	ldr	x2, [x29, #24]
   5182c:	ldp	x20, x19, [sp, #48]
   51830:	ldp	x22, x21, [sp, #32]
   51834:	ldr	x23, [sp, #16]
   51838:	ldp	x29, x30, [sp], #64
   5183c:	br	x2
   51840:	ldr	w8, [x23, #1584]
   51844:	mov	w10, #0x90                  	// #144
   51848:	ubfx	x9, x21, #8, #4
   5184c:	mov	x0, x19
   51850:	madd	x8, x8, x10, x22
   51854:	add	x8, x8, x9, lsl #3
   51858:	ldr	x2, [x8, #16]
   5185c:	ldr	x3, [x29, #24]
   51860:	ldp	x20, x19, [sp, #48]
   51864:	ldp	x22, x21, [sp, #32]
   51868:	ldr	x23, [sp, #16]
   5186c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   51870:	add	x1, x1, #0x511
   51874:	ldp	x29, x30, [sp], #64
   51878:	br	x3
   5187c:	mov	w3, #0x20                  	// #32
   51880:	cbnz	w20, 51770 <print_arm_disassembler_options@@Base+0x5c38>
   51884:	mov	x0, x19
   51888:	mov	w2, w3
   5188c:	ldr	x3, [x29, #24]
   51890:	ldp	x20, x19, [sp, #48]
   51894:	ldp	x22, x21, [sp, #32]
   51898:	ldr	x23, [sp, #16]
   5189c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   518a0:	add	x1, x1, #0xe94
   518a4:	ldp	x29, x30, [sp], #64
   518a8:	br	x3
   518ac:	sub	w8, w0, #0xf
   518b0:	cmp	w8, #0x40
   518b4:	b.hi	518e4 <print_arm_disassembler_options@@Base+0x5dac>  // b.pmore
   518b8:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   518bc:	add	x9, x9, #0x1b8
   518c0:	adr	x10, 518d8 <print_arm_disassembler_options@@Base+0x5da0>
   518c4:	ldrb	w11, [x9, x8]
   518c8:	add	x10, x10, x11, lsl #2
   518cc:	adrp	x0, 66000 <fields@@Base+0xfe84>
   518d0:	add	x0, x0, #0xadd
   518d4:	br	x10
   518d8:	adrp	x0, 66000 <fields@@Base+0xfe84>
   518dc:	add	x0, x0, #0xae2
   518e0:	ret
   518e4:	sub	w8, w0, #0x6e
   518e8:	cmp	w8, #0x10
   518ec:	b.hi	51a4c <print_arm_disassembler_options@@Base+0x5f14>  // b.pmore
   518f0:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   518f4:	add	x9, x9, #0x1f9
   518f8:	adr	x10, 51908 <print_arm_disassembler_options@@Base+0x5dd0>
   518fc:	ldrb	w11, [x9, x8]
   51900:	add	x10, x10, x11, lsl #2
   51904:	br	x10
   51908:	adrp	x0, 66000 <fields@@Base+0xfe84>
   5190c:	add	x0, x0, #0xba4
   51910:	ret
   51914:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51918:	add	x0, x0, #0xae9
   5191c:	ret
   51920:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51924:	add	x0, x0, #0xaf0
   51928:	ret
   5192c:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51930:	add	x0, x0, #0xaf8
   51934:	ret
   51938:	adrp	x0, 66000 <fields@@Base+0xfe84>
   5193c:	add	x0, x0, #0xb00
   51940:	ret
   51944:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51948:	add	x0, x0, #0xb08
   5194c:	ret
   51950:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51954:	add	x0, x0, #0xb0f
   51958:	ret
   5195c:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51960:	add	x0, x0, #0xb16
   51964:	ret
   51968:	adrp	x0, 66000 <fields@@Base+0xfe84>
   5196c:	add	x0, x0, #0xb1d
   51970:	ret
   51974:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51978:	add	x0, x0, #0xb24
   5197c:	ret
   51980:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51984:	add	x0, x0, #0xb2c
   51988:	ret
   5198c:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51990:	add	x0, x0, #0xb34
   51994:	ret
   51998:	adrp	x0, 66000 <fields@@Base+0xfe84>
   5199c:	add	x0, x0, #0xb3c
   519a0:	ret
   519a4:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519a8:	add	x0, x0, #0xb43
   519ac:	ret
   519b0:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519b4:	add	x0, x0, #0xb4a
   519b8:	ret
   519bc:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519c0:	add	x0, x0, #0xb51
   519c4:	ret
   519c8:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519cc:	add	x0, x0, #0xb58
   519d0:	ret
   519d4:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519d8:	add	x0, x0, #0xb5f
   519dc:	ret
   519e0:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519e4:	add	x0, x0, #0xb66
   519e8:	ret
   519ec:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519f0:	add	x0, x0, #0xb6d
   519f4:	ret
   519f8:	adrp	x0, 66000 <fields@@Base+0xfe84>
   519fc:	add	x0, x0, #0xb74
   51a00:	ret
   51a04:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a08:	add	x0, x0, #0xb7b
   51a0c:	ret
   51a10:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a14:	add	x0, x0, #0xb82
   51a18:	ret
   51a1c:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a20:	add	x0, x0, #0xb89
   51a24:	ret
   51a28:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a2c:	add	x0, x0, #0xb90
   51a30:	ret
   51a34:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a38:	add	x0, x0, #0xb98
   51a3c:	ret
   51a40:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a44:	add	x0, x0, #0xb9f
   51a48:	ret
   51a4c:	mov	x0, xzr
   51a50:	ret
   51a54:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a58:	add	x0, x0, #0xbad
   51a5c:	ret
   51a60:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a64:	add	x0, x0, #0xbb6
   51a68:	ret
   51a6c:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a70:	add	x0, x0, #0xbbf
   51a74:	ret
   51a78:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a7c:	add	x0, x0, #0xbc8
   51a80:	ret
   51a84:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a88:	add	x0, x0, #0xbd1
   51a8c:	ret
   51a90:	adrp	x0, 66000 <fields@@Base+0xfe84>
   51a94:	add	x0, x0, #0xbda
   51a98:	ret
   51a9c:	and	x8, x0, #0xf
   51aa0:	sub	x8, x8, #0x1
   51aa4:	cmp	w8, #0xe
   51aa8:	b.hi	51abc <print_arm_disassembler_options@@Base+0x5f84>  // b.pmore
   51aac:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   51ab0:	add	x9, x9, #0x690
   51ab4:	ldr	x0, [x9, x8, lsl #3]
   51ab8:	ret
   51abc:	mov	x0, xzr
   51ac0:	ret
   51ac4:	stp	x29, x30, [sp, #-16]!
   51ac8:	mov	x8, x0
   51acc:	mov	x10, xzr
   51ad0:	mov	w9, wzr
   51ad4:	mov	w11, #0xa                   	// #10
   51ad8:	mov	w12, #0x2                   	// #2
   51adc:	mov	x29, sp
   51ae0:	ldrb	w13, [x8]
   51ae4:	sub	w14, w13, #0x30
   51ae8:	cmp	w14, #0x9
   51aec:	b.hi	51b14 <print_arm_disassembler_options@@Base+0x5fdc>  // b.pmore
   51af0:	mov	w14, wzr
   51af4:	mul	w14, w14, w11
   51af8:	add	w14, w14, w13, uxtb
   51afc:	ldrb	w13, [x8, #1]!
   51b00:	sub	w14, w14, #0x30
   51b04:	sub	w15, w13, #0x30
   51b08:	cmp	w15, #0xa
   51b0c:	b.cc	51af4 <print_arm_disassembler_options@@Base+0x5fbc>  // b.lo, b.ul, b.last
   51b10:	b	51b18 <print_arm_disassembler_options@@Base+0x5fe0>
   51b14:	mov	w14, wzr
   51b18:	cmp	w13, #0x2d
   51b1c:	b.ne	51b58 <print_arm_disassembler_options@@Base+0x6020>  // b.any
   51b20:	ldrb	w13, [x8, #1]!
   51b24:	sub	w15, w13, #0x30
   51b28:	cmp	w15, #0x9
   51b2c:	mov	x0, x8
   51b30:	mov	w15, wzr
   51b34:	b.hi	51b60 <print_arm_disassembler_options@@Base+0x6028>  // b.pmore
   51b38:	mul	w8, w15, w11
   51b3c:	add	w8, w8, w13, uxtb
   51b40:	ldrb	w13, [x0, #1]!
   51b44:	sub	w15, w13, #0x30
   51b48:	cmp	w15, #0xa
   51b4c:	sub	w15, w8, #0x30
   51b50:	b.cc	51b38 <print_arm_disassembler_options@@Base+0x6000>  // b.lo, b.ul, b.last
   51b54:	b	51b60 <print_arm_disassembler_options@@Base+0x6028>
   51b58:	mov	w15, w14
   51b5c:	mov	x0, x8
   51b60:	subs	w8, w15, w14
   51b64:	b.mi	51ba8 <print_arm_disassembler_options@@Base+0x6070>  // b.first
   51b68:	lsl	x15, x12, x8
   51b6c:	lsr	x14, x1, x14
   51b70:	cmp	w13, #0x2c
   51b74:	sub	x13, x15, #0x1
   51b78:	and	x13, x13, x14
   51b7c:	add	w8, w9, w8
   51b80:	lsl	x13, x13, x9
   51b84:	add	w9, w8, #0x1
   51b88:	orr	x10, x13, x10
   51b8c:	add	x8, x0, #0x1
   51b90:	b.eq	51ae0 <print_arm_disassembler_options@@Base+0x5fa8>  // b.none
   51b94:	str	x10, [x2]
   51b98:	cbz	x3, 51ba0 <print_arm_disassembler_options@@Base+0x6068>
   51b9c:	str	w9, [x3]
   51ba0:	ldp	x29, x30, [sp], #16
   51ba4:	ret
   51ba8:	bl	35750 <abort@plt>
   51bac:	sub	sp, sp, #0x1a0
   51bb0:	stp	x29, x30, [sp, #320]
   51bb4:	stp	x28, x27, [sp, #336]
   51bb8:	stp	x26, x25, [sp, #352]
   51bbc:	stp	x24, x23, [sp, #368]
   51bc0:	stp	x22, x21, [sp, #384]
   51bc4:	stp	x20, x19, [sp, #400]
   51bc8:	add	x29, sp, #0x140
   51bcc:	ldp	x24, x19, [x2]
   51bd0:	stur	xzr, [x29, #-16]
   51bd4:	ldr	x23, [x0, #48]
   51bd8:	cbz	x23, 51ed0 <print_arm_disassembler_options@@Base+0x6398>
   51bdc:	mov	x20, x3
   51be0:	stp	x2, x1, [x29, #-48]
   51be4:	ldr	x9, [x2, #96]
   51be8:	ubfx	w8, w20, #8, #4
   51bec:	sub	w5, w8, #0x9
   51bf0:	adrp	x13, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   51bf4:	mov	w17, #0x1200000             	// #18874368
   51bf8:	cmp	w5, #0x3
   51bfc:	ldr	w2, [x13, #1072]
   51c00:	and	x13, x3, x17
   51c04:	cset	w17, cc  // cc = lo, ul, last
   51c08:	stur	w17, [x29, #-56]
   51c0c:	ldr	x17, [x9, #16]
   51c10:	ubfx	x16, x3, #28, #4
   51c14:	and	x10, x3, #0xf0000000
   51c18:	mov	w11, #0xf0000000            	// #-268435456
   51c1c:	stur	x17, [x29, #-32]
   51c20:	cmp	w16, #0xe
   51c24:	ldp	x28, x17, [x9]
   51c28:	mov	w1, #0x10                  	// #16
   51c2c:	ccmp	x10, x11, #0x4, ne  // ne = any
   51c30:	mov	w14, #0xf7f                 	// #3967
   51c34:	mov	w15, #0xf                   	// #15
   51c38:	csel	w3, w1, w16, eq  // eq = none
   51c3c:	cmp	w2, #0x0
   51c40:	ubfx	w16, w2, #4, #4
   51c44:	mov	w12, #0x1                   	// #1
   51c48:	movk	w14, #0xec10, lsl #16
   51c4c:	movk	w15, #0xe00, lsl #16
   51c50:	mov	x6, #0xffffffffffcfffff    	// #-3145729
   51c54:	mov	w7, #0xc100                	// #49408
   51c58:	mov	w26, #0xfdffffff            	// #-33554433
   51c5c:	csel	w30, w1, w16, eq  // eq = none
   51c60:	ldr	x25, [x0, #8]
   51c64:	cbnz	x25, 51c78 <print_arm_disassembler_options@@Base+0x6140>
   51c68:	ldr	x16, [x0, #16]
   51c6c:	cbnz	x16, 51c78 <print_arm_disassembler_options@@Base+0x6140>
   51c70:	ldr	x16, [x0, #24]
   51c74:	cbz	x16, 51e58 <print_arm_disassembler_options@@Base+0x6320>
   51c78:	ldp	x2, x16, [x0, #32]
   51c7c:	orr	x1, x16, #0xf0000000
   51c80:	stur	x2, [x29, #-16]
   51c84:	cbz	w4, 51c98 <print_arm_disassembler_options@@Base+0x6160>
   51c88:	orr	x16, x2, #0xe0000000
   51c8c:	stur	x16, [x29, #-16]
   51c90:	mov	w22, w30
   51c94:	b	51ca8 <print_arm_disassembler_options@@Base+0x6170>
   51c98:	cmp	x10, x11
   51c9c:	csel	x1, x1, x16, eq  // eq = none
   51ca0:	mov	x16, x2
   51ca4:	mov	w22, w3
   51ca8:	ldr	w27, [x0]
   51cac:	cmp	w4, #0x0
   51cb0:	cset	w18, ne  // ne = any
   51cb4:	cmp	w27, #0x1
   51cb8:	cset	w21, ne  // ne = any
   51cbc:	cmp	w27, #0x2
   51cc0:	cset	w27, eq  // eq = none
   51cc4:	orr	w21, w18, w21
   51cc8:	and	w18, w18, w27
   51ccc:	eor	w18, w18, w21
   51cd0:	cmp	w18, #0x1
   51cd4:	b.ne	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.any
   51cd8:	and	x18, x1, x20
   51cdc:	cmp	x18, x16
   51ce0:	b.ne	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.any
   51ce4:	tst	x25, x28
   51ce8:	b.ne	51d08 <print_arm_disassembler_options@@Base+0x61d0>  // b.any
   51cec:	ldr	x16, [x0, #16]
   51cf0:	tst	x16, x17
   51cf4:	b.ne	51d08 <print_arm_disassembler_options@@Base+0x61d0>  // b.any
   51cf8:	ldr	x16, [x0, #24]
   51cfc:	ldur	x18, [x29, #-32]
   51d00:	tst	x16, x18
   51d04:	b.eq	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.none
   51d08:	cmp	x2, x14
   51d0c:	mov	w25, wzr
   51d10:	b.gt	51d44 <print_arm_disassembler_options@@Base+0x620c>
   51d14:	cmp	x2, x15
   51d18:	b.gt	51d70 <print_arm_disassembler_options@@Base+0x6238>
   51d1c:	mov	w16, #0xc000000             	// #201326592
   51d20:	cmp	x2, x16
   51d24:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51d28:	mov	w16, #0xc100000             	// #202375168
   51d2c:	cmp	x2, x16
   51d30:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51d34:	mov	w16, #0xe000000             	// #234881024
   51d38:	cmp	x2, x16
   51d3c:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51d40:	b	51ee4 <print_arm_disassembler_options@@Base+0x63ac>
   51d44:	cmp	x2, x26
   51d48:	b.gt	51da8 <print_arm_disassembler_options@@Base+0x6270>
   51d4c:	mov	w16, #0xf80                 	// #3968
   51d50:	movk	w16, #0xec10, lsl #16
   51d54:	cmp	x2, x16
   51d58:	b.eq	51da0 <print_arm_disassembler_options@@Base+0x6268>  // b.none
   51d5c:	mov	w16, #0xfc000000            	// #-67108864
   51d60:	cmp	x2, x16
   51d64:	b.eq	51dd4 <print_arm_disassembler_options@@Base+0x629c>  // b.none
   51d68:	mov	w16, #0xfc100000            	// #-66060288
   51d6c:	b	51dcc <print_arm_disassembler_options@@Base+0x6294>
   51d70:	mov	w16, #0x10                  	// #16
   51d74:	movk	w16, #0xe00, lsl #16
   51d78:	cmp	x2, x16
   51d7c:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51d80:	mov	w16, #0x10                  	// #16
   51d84:	movk	w16, #0xe10, lsl #16
   51d88:	cmp	x2, x16
   51d8c:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51d90:	mov	w16, #0xf80                 	// #3968
   51d94:	movk	w16, #0xec00, lsl #16
   51d98:	cmp	x2, x16
   51d9c:	b.ne	51ee4 <print_arm_disassembler_options@@Base+0x63ac>  // b.any
   51da0:	cbz	x13, 51e48 <print_arm_disassembler_options@@Base+0x6310>
   51da4:	b	51ee0 <print_arm_disassembler_options@@Base+0x63a8>
   51da8:	mov	w16, #0xfe000000            	// #-33554432
   51dac:	cmp	x2, x16
   51db0:	b.eq	51e08 <print_arm_disassembler_options@@Base+0x62d0>  // b.none
   51db4:	mov	w16, #0x10                  	// #16
   51db8:	movk	w16, #0xfe10, lsl #16
   51dbc:	cmp	x2, x16
   51dc0:	b.eq	51dd4 <print_arm_disassembler_options@@Base+0x629c>  // b.none
   51dc4:	mov	w16, #0x10                  	// #16
   51dc8:	movk	w16, #0xfe00, lsl #16
   51dcc:	cmp	x2, x16
   51dd0:	b.ne	51ee4 <print_arm_disassembler_options@@Base+0x63ac>  // b.any
   51dd4:	cmp	x17, x6
   51dd8:	cset	w16, eq  // eq = none
   51ddc:	cmn	x28, #0x1
   51de0:	cset	w1, eq  // eq = none
   51de4:	tbz	w17, #15, 51ed8 <print_arm_disassembler_options@@Base+0x63a0>
   51de8:	and	w16, w16, w1
   51dec:	tbnz	w16, #0, 51ed8 <print_arm_disassembler_options@@Base+0x63a0>
   51df0:	cmp	w8, #0xf
   51df4:	b.hi	51ed8 <print_arm_disassembler_options@@Base+0x63a0>  // b.pmore
   51df8:	lsl	w16, w12, w8
   51dfc:	tst	w16, w7
   51e00:	b.ne	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.any
   51e04:	b	51ed8 <print_arm_disassembler_options@@Base+0x63a0>
   51e08:	cmp	w5, #0x3
   51e0c:	b.cc	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.lo, b.ul, b.last
   51e10:	cmp	x17, x6
   51e14:	cset	w16, eq  // eq = none
   51e18:	cmn	x28, #0x1
   51e1c:	mov	w25, wzr
   51e20:	cset	w1, eq  // eq = none
   51e24:	tbz	w17, #15, 51ee4 <print_arm_disassembler_options@@Base+0x63ac>
   51e28:	and	w16, w16, w1
   51e2c:	tbnz	w16, #0, 51ee4 <print_arm_disassembler_options@@Base+0x63ac>
   51e30:	cmp	w8, #0xf
   51e34:	mov	w25, wzr
   51e38:	b.hi	51ee4 <print_arm_disassembler_options@@Base+0x63ac>  // b.pmore
   51e3c:	lsl	w16, w12, w8
   51e40:	tst	w16, w7
   51e44:	b.eq	51ee4 <print_arm_disassembler_options@@Base+0x63ac>  // b.none
   51e48:	ldr	x23, [x0, #104]
   51e4c:	add	x0, x0, #0x38
   51e50:	cbnz	x23, 51c60 <print_arm_disassembler_options@@Base+0x6128>
   51e54:	b	51ed0 <print_arm_disassembler_options@@Base+0x6398>
   51e58:	ldr	x16, [x0, #32]
   51e5c:	cmp	x16, #0x3
   51e60:	b.eq	51ec8 <print_arm_disassembler_options@@Base+0x6390>  // b.none
   51e64:	cmp	x16, #0x2
   51e68:	b.eq	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.none
   51e6c:	cmp	x16, #0x1
   51e70:	b.ne	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.any
   51e74:	ldur	x16, [x29, #-48]
   51e78:	ldr	x16, [x16, #32]
   51e7c:	cmp	x16, #0xd
   51e80:	b.hi	51e94 <print_arm_disassembler_options@@Base+0x635c>  // b.pmore
   51e84:	lsl	x16, x12, x16
   51e88:	mov	w18, #0x3400                	// #13312
   51e8c:	tst	x16, x18
   51e90:	b.ne	51e48 <print_arm_disassembler_options@@Base+0x6310>  // b.any
   51e94:	add	x16, x0, #0x38
   51e98:	mov	x0, x16
   51e9c:	ldr	x16, [x16, #8]
   51ea0:	cbnz	x16, 51eb4 <print_arm_disassembler_options@@Base+0x637c>
   51ea4:	ldr	x16, [x0, #16]
   51ea8:	cbnz	x16, 51eb4 <print_arm_disassembler_options@@Base+0x637c>
   51eac:	ldr	x16, [x0, #24]
   51eb0:	cbz	x16, 51e48 <print_arm_disassembler_options@@Base+0x6310>
   51eb4:	ldr	x16, [x0, #32]
   51eb8:	cmp	x16, #0x2
   51ebc:	add	x16, x0, #0x38
   51ec0:	b.ne	51e98 <print_arm_disassembler_options@@Base+0x6360>  // b.any
   51ec4:	b	51e48 <print_arm_disassembler_options@@Base+0x6310>
   51ec8:	ldr	x28, [x9]
   51ecc:	b	51e48 <print_arm_disassembler_options@@Base+0x6310>
   51ed0:	mov	w0, wzr
   51ed4:	b	52d70 <print_arm_disassembler_options@@Base+0x7238>
   51ed8:	ldur	w25, [x29, #-56]
   51edc:	b	51ee4 <print_arm_disassembler_options@@Base+0x63ac>
   51ee0:	mov	w25, wzr
   51ee4:	lsr	x10, x20, #4
   51ee8:	and	x10, x10, #0x10
   51eec:	ubfx	x13, x20, #22, #1
   51ef0:	bfxil	x10, x20, #0, #4
   51ef4:	mov	w2, #0x20                  	// #32
   51ef8:	ubfx	w12, w20, #12, #4
   51efc:	mov	w30, w13
   51f00:	cmp	x10, #0x0
   51f04:	and	x1, x20, #0xf
   51f08:	mov	w11, #0x4                   	// #4
   51f0c:	mov	w3, #0x64                  	// #100
   51f10:	mov	w4, #0x73                  	// #115
   51f14:	bfi	w30, w12, #1, #4
   51f18:	bfi	w12, w13, #4, #1
   51f1c:	csel	x10, x2, x10, eq  // eq = none
   51f20:	tst	x20, #0x100
   51f24:	mov	w14, #0xf                   	// #15
   51f28:	mov	w15, #0x1f                  	// #31
   51f2c:	stp	x10, x1, [x29, #-136]
   51f30:	csinc	w10, w11, wzr, ne  // ne = any
   51f34:	csel	w11, w30, w12, eq  // eq = none
   51f38:	csel	w12, w4, w3, eq  // eq = none
   51f3c:	mov	w16, #0x2b                  	// #43
   51f40:	mov	w5, #0x2d                  	// #45
   51f44:	adrp	x7, 55000 <xexit@@Base+0x184c>
   51f48:	adrp	x21, 5e000 <fields@@Base+0x7e84>
   51f4c:	str	w12, [sp, #72]
   51f50:	csel	w12, w15, w14, eq  // eq = none
   51f54:	tst	x20, #0x800000
   51f58:	and	w6, w20, #0xff
   51f5c:	add	x7, x7, #0xda7
   51f60:	add	x21, x21, #0x39c
   51f64:	str	w12, [sp, #12]
   51f68:	csel	w12, w5, w16, eq  // eq = none
   51f6c:	adrp	x26, 65000 <fields@@Base+0xee84>
   51f70:	str	w12, [sp, #92]
   51f74:	mul	w10, w10, w6
   51f78:	csel	x12, x21, x7, eq  // eq = none
   51f7c:	add	x26, x26, #0x722
   51f80:	and	w18, w20, #0xf
   51f84:	lsr	x17, x20, #1
   51f88:	ubfx	w27, w20, #5, #1
   51f8c:	stp	x12, x10, [sp, #56]
   51f90:	cneg	x10, x10, eq  // eq = none
   51f94:	tst	x20, #0x200000
   51f98:	bfi	w27, w18, #1, #4
   51f9c:	and	w18, w17, #0x70
   51fa0:	stur	x10, [x29, #-144]
   51fa4:	csel	x10, x7, x26, eq  // eq = none
   51fa8:	mov	w28, #0x10                  	// #16
   51fac:	orr	w13, w18, w1
   51fb0:	str	x10, [sp, #96]
   51fb4:	tst	x20, #0x80
   51fb8:	mov	w10, #0x10                  	// #16
   51fbc:	orr	w18, w13, #0xffffff80
   51fc0:	stur	x10, [x29, #-72]
   51fc4:	csel	x10, x28, x2, eq  // eq = none
   51fc8:	tst	w13, #0x40
   51fcc:	mov	w0, #0x1200000             	// #18874368
   51fd0:	str	x10, [sp, #48]
   51fd4:	csel	w10, w13, w18, eq  // eq = none
   51fd8:	cmp	w22, #0x10
   51fdc:	lsr	x9, x20, #22
   51fe0:	stur	w10, [x29, #-148]
   51fe4:	cset	w10, ne  // ne = any
   51fe8:	tst	x20, x0
   51fec:	cset	w12, eq  // eq = none
   51ff0:	cmp	w8, #0x9
   51ff4:	and	w13, w9, #0x6
   51ff8:	ubfx	x16, x20, #16, #4
   51ffc:	ubfx	w9, w20, #7, #1
   52000:	cset	w8, eq  // eq = none
   52004:	bfi	w9, w16, #1, #4
   52008:	and	w8, w8, w10
   5200c:	str	w9, [sp, #20]
   52010:	mov	w9, #0x8000                	// #32768
   52014:	stur	w8, [x29, #-76]
   52018:	lsr	x8, x20, #16
   5201c:	movk	w9, #0x40, lsl #16
   52020:	and	x14, x8, #0xf0
   52024:	mov	w8, #0x100                 	// #256
   52028:	and	x9, x20, x9
   5202c:	ldur	x10, [x29, #-40]
   52030:	movk	w8, #0x40, lsl #16
   52034:	stur	x9, [x29, #-88]
   52038:	mov	w9, #0x80                  	// #128
   5203c:	and	x8, x20, x8
   52040:	movk	w9, #0x8, lsl #16
   52044:	str	x8, [sp, #152]
   52048:	ubfx	x8, x20, #18, #14
   5204c:	and	x9, x20, x9
   52050:	and	w15, w8, #0x10
   52054:	ubfx	x8, x20, #3, #29
   52058:	str	x9, [sp, #144]
   5205c:	lsr	x9, x20, #19
   52060:	and	x10, x10, #0xfffffffffffffffc
   52064:	and	w8, w8, #0x10
   52068:	and	x18, x9, #0x8
   5206c:	ubfx	x9, x20, #8, #1
   52070:	str	x10, [sp, #32]
   52074:	asr	x10, x20, x9
   52078:	orr	w8, w16, w8
   5207c:	str	w8, [sp, #16]
   52080:	and	w8, w10, #0x7f
   52084:	str	w8, [sp, #140]
   52088:	add	w8, w8, w11
   5208c:	eor	w9, w9, #0x1
   52090:	sub	w8, w8, #0x1
   52094:	str	w8, [sp, #8]
   52098:	asr	w8, w8, w9
   5209c:	str	w8, [sp, #4]
   520a0:	mov	w8, #0x1                   	// #1
   520a4:	cinc	x8, x8, ne  // ne = any
   520a8:	cmp	x16, #0xf
   520ac:	stur	x8, [x29, #-96]
   520b0:	cset	w8, eq  // eq = none
   520b4:	orr	w8, w12, w8
   520b8:	stur	w8, [x29, #-100]
   520bc:	ubfx	x8, x20, #4, #4
   520c0:	str	x8, [sp, #128]
   520c4:	and	x8, x20, #0x800000
   520c8:	stur	x8, [x29, #-56]
   520cc:	and	x8, x20, #0x100
   520d0:	str	x8, [sp, #120]
   520d4:	and	x8, x20, #0x60
   520d8:	bfxil	w15, w20, #12, #4
   520dc:	str	x8, [sp, #112]
   520e0:	ubfx	x8, x20, #1, #6
   520e4:	str	w27, [sp, #88]
   520e8:	and	w17, w17, #0x10
   520ec:	bfxil	w13, w20, #21, #1
   520f0:	adrp	x27, 5e000 <fields@@Base+0x7e84>
   520f4:	adrp	x28, 5e000 <fields@@Base+0x7e84>
   520f8:	str	x8, [sp, #104]
   520fc:	add	w8, w8, w15
   52100:	bfxil	x14, x20, #0, #4
   52104:	bfxil	w17, w20, #0, #4
   52108:	bfxil	x18, x20, #13, #3
   5210c:	add	x27, x27, #0x20a
   52110:	add	x28, x28, #0x2aa
   52114:	orr	w9, w13, #0x2
   52118:	str	w8, [sp, #28]
   5211c:	sub	w8, w8, #0x1
   52120:	stur	xzr, [x29, #-32]
   52124:	str	w30, [sp, #84]
   52128:	stur	w6, [x29, #-108]
   5212c:	str	x14, [sp, #160]
   52130:	str	w17, [sp, #80]
   52134:	stur	x18, [x29, #-120]
   52138:	str	w11, [sp, #76]
   5213c:	stur	x16, [x29, #-40]
   52140:	stur	w12, [x29, #-60]
   52144:	stur	w13, [x29, #-152]
   52148:	str	w9, [sp, #44]
   5214c:	stur	w15, [x29, #-104]
   52150:	str	w8, [sp, #24]
   52154:	ldrb	w2, [x23]
   52158:	cmp	w2, #0x25
   5215c:	b.eq	5217c <print_arm_disassembler_options@@Base+0x6644>  // b.none
   52160:	cbz	w2, 52d34 <print_arm_disassembler_options@@Base+0x71fc>
   52164:	adrp	x1, 65000 <fields@@Base+0xee84>
   52168:	mov	x0, x19
   5216c:	add	x1, x1, #0x1b9
   52170:	blr	x24
   52174:	mov	x26, x23
   52178:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   5217c:	mov	x26, x23
   52180:	ldrb	w21, [x26, #1]!
   52184:	sub	w8, w21, #0x30
   52188:	cmp	w8, #0x4a
   5218c:	b.hi	52380 <print_arm_disassembler_options@@Base+0x6848>  // b.pmore
   52190:	adr	x9, 521a0 <print_arm_disassembler_options@@Base+0x6668>
   52194:	ldrh	w10, [x27, x8, lsl #1]
   52198:	add	x9, x9, x10, lsl #2
   5219c:	br	x9
   521a0:	sub	x2, x29, #0x10
   521a4:	sub	x3, x29, #0x14
   521a8:	mov	x0, x26
   521ac:	mov	x1, x20
   521b0:	bl	51ac4 <print_arm_disassembler_options@@Base+0x5f8c>
   521b4:	ldrb	w8, [x0]
   521b8:	mov	x26, x0
   521bc:	cmp	w8, #0x5f
   521c0:	b.le	52200 <print_arm_disassembler_options@@Base+0x66c8>
   521c4:	cmp	w8, #0x71
   521c8:	b.gt	52334 <print_arm_disassembler_options@@Base+0x67fc>
   521cc:	sub	w8, w8, #0x60
   521d0:	cmp	w8, #0xb
   521d4:	b.hi	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.pmore
   521d8:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   521dc:	add	x11, x11, #0x2bc
   521e0:	adr	x9, 521f0 <print_arm_disassembler_options@@Base+0x66b8>
   521e4:	ldrh	w10, [x11, x8, lsl #1]
   521e8:	add	x9, x9, x10, lsl #2
   521ec:	br	x9
   521f0:	ldur	x8, [x29, #-16]
   521f4:	add	x26, x26, #0x1
   521f8:	cbnz	x8, 52d2c <print_arm_disassembler_options@@Base+0x71f4>
   521fc:	b	52724 <print_arm_disassembler_options@@Base+0x6bec>
   52200:	mov	w12, #0x9680                	// #38528
   52204:	cmp	w8, #0x50
   52208:	movk	w12, #0x98, lsl #16
   5220c:	b.gt	52360 <print_arm_disassembler_options@@Base+0x6828>
   52210:	sub	w9, w8, #0x3f
   52214:	cmp	w9, #0x8
   52218:	b.hi	526fc <print_arm_disassembler_options@@Base+0x6bc4>  // b.pmore
   5221c:	adr	x8, 5222c <print_arm_disassembler_options@@Base+0x66f4>
   52220:	ldrh	w10, [x28, x9, lsl #1]
   52224:	add	x8, x8, x10, lsl #2
   52228:	br	x8
   5222c:	ldp	w8, w9, [x29, #-20]
   52230:	mov	w21, #0x1                   	// #1
   52234:	adrp	x1, 65000 <fields@@Base+0xee84>
   52238:	mov	x0, x19
   5223c:	lsl	w8, w21, w8
   52240:	sub	w8, w8, w9
   52244:	ldrb	w2, [x26, w8, sxtw]
   52248:	add	x1, x1, #0x1b9
   5224c:	blr	x24
   52250:	ldur	w8, [x29, #-20]
   52254:	lsl	w8, w21, w8
   52258:	add	x26, x26, w8, sxtw
   5225c:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52260:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   52264:	ldr	w8, [x8, #1584]
   52268:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   5226c:	mov	w9, #0x90                  	// #144
   52270:	add	x10, x10, #0xaf8
   52274:	madd	x8, x8, x9, x10
   52278:	ldur	x9, [x29, #-40]
   5227c:	cmp	w21, #0x4b
   52280:	adrp	x1, 61000 <fields@@Base+0xae84>
   52284:	mov	x0, x19
   52288:	add	x8, x8, x9, lsl #3
   5228c:	ldr	x2, [x8, #16]
   52290:	mov	w8, #0xff                  	// #255
   52294:	mov	w9, #0x7f                  	// #127
   52298:	csel	x8, x9, x8, eq  // eq = none
   5229c:	add	x1, x1, #0x777
   522a0:	mov	x23, x27
   522a4:	and	x21, x8, x20
   522a8:	blr	x24
   522ac:	ldur	x9, [x29, #-56]
   522b0:	ldur	x8, [x29, #-96]
   522b4:	cmp	x9, #0x0
   522b8:	ldur	w9, [x29, #-60]
   522bc:	lsl	x8, x21, x8
   522c0:	cneg	x8, x8, eq  // eq = none
   522c4:	cmp	w9, #0x0
   522c8:	ldur	w9, [x29, #-100]
   522cc:	csel	x27, x21, x8, ne  // ne = any
   522d0:	ldur	x21, [x29, #-32]
   522d4:	cmp	w9, #0x0
   522d8:	csel	x21, x21, x8, ne  // ne = any
   522dc:	tbz	w20, #24, 52628 <print_arm_disassembler_options@@Base+0x6af0>
   522e0:	cbz	x27, 52a98 <print_arm_disassembler_options@@Base+0x6f60>
   522e4:	ldr	x3, [sp, #96]
   522e8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   522ec:	mov	x0, x19
   522f0:	add	x1, x1, #0x433
   522f4:	mov	w2, w27
   522f8:	blr	x24
   522fc:	b	52bf0 <print_arm_disassembler_options@@Base+0x70b8>
   52300:	ldrb	w8, [x23, #2]!
   52304:	sub	w8, w8, #0x30
   52308:	cmp	w8, #0x4
   5230c:	b.hi	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.pmore
   52310:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   52314:	add	x11, x11, #0x2a0
   52318:	adr	x9, 52328 <print_arm_disassembler_options@@Base+0x67f0>
   5231c:	ldrh	w10, [x11, x8, lsl #1]
   52320:	add	x9, x9, x10, lsl #2
   52324:	br	x9
   52328:	ldr	w8, [sp, #88]
   5232c:	ldr	w9, [sp, #80]
   52330:	b	529e0 <print_arm_disassembler_options@@Base+0x6ea8>
   52334:	cmp	w8, #0x78
   52338:	b.eq	52748 <print_arm_disassembler_options@@Base+0x6c10>  // b.none
   5233c:	cmp	w8, #0x77
   52340:	b.ne	5275c <print_arm_disassembler_options@@Base+0x6c24>  // b.any
   52344:	ldur	w9, [x29, #-20]
   52348:	ldur	x8, [x29, #-16]
   5234c:	cmp	w9, #0x2
   52350:	b.ne	52b10 <print_arm_disassembler_options@@Base+0x6fd8>  // b.any
   52354:	adrp	x9, 8b000 <aarch64_operands@@Base+0xbc38>
   52358:	add	x9, x9, #0x898
   5235c:	b	52b18 <print_arm_disassembler_options@@Base+0x6fe0>
   52360:	cmp	w8, #0x51
   52364:	b.eq	527d8 <print_arm_disassembler_options@@Base+0x6ca0>  // b.none
   52368:	cmp	w8, #0x52
   5236c:	b.ne	527b8 <print_arm_disassembler_options@@Base+0x6c80>  // b.any
   52370:	ldur	x8, [x29, #-16]
   52374:	cmp	x8, #0xf
   52378:	csinc	w25, w25, wzr, ne  // ne = any
   5237c:	b	52768 <print_arm_disassembler_options@@Base+0x6c30>
   52380:	cmp	w21, #0x25
   52384:	b.ne	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.any
   52388:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   5238c:	mov	x0, x19
   52390:	add	x1, x1, #0x3fb
   52394:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52398:	ldur	x8, [x29, #-88]
   5239c:	mov	x0, x19
   523a0:	cmp	x8, #0x400, lsl #12
   523a4:	b.eq	52b40 <print_arm_disassembler_options@@Base+0x7008>  // b.none
   523a8:	cmp	x8, #0x8, lsl #12
   523ac:	b.eq	52b4c <print_arm_disassembler_options@@Base+0x7014>  // b.none
   523b0:	cbnz	x8, 52b58 <print_arm_disassembler_options@@Base+0x7020>
   523b4:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   523b8:	add	x1, x1, #0x99e
   523bc:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   523c0:	ldr	x8, [sp, #152]
   523c4:	cmp	x8, #0x400, lsl #12
   523c8:	b.ge	528e8 <print_arm_disassembler_options@@Base+0x6db0>  // b.tcont
   523cc:	mov	x0, x19
   523d0:	cbnz	x8, 52b64 <print_arm_disassembler_options@@Base+0x702c>
   523d4:	adrp	x1, 66000 <fields@@Base+0xfe84>
   523d8:	add	x1, x1, #0xa6a
   523dc:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   523e0:	ldr	x8, [sp, #144]
   523e4:	cmp	x8, #0x80, lsl #12
   523e8:	b.eq	5290c <print_arm_disassembler_options@@Base+0x6dd4>  // b.none
   523ec:	cmp	x8, #0x80
   523f0:	b.eq	528fc <print_arm_disassembler_options@@Base+0x6dc4>  // b.none
   523f4:	cbz	x8, 52584 <print_arm_disassembler_options@@Base+0x6a4c>
   523f8:	adrp	x0, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   523fc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52400:	mov	w2, #0x5                   	// #5
   52404:	add	x0, x0, #0x7f0
   52408:	add	x1, x1, #0x574
   5240c:	bl	35ab0 <dcgettext@plt>
   52410:	mov	x1, x0
   52414:	mov	x0, x19
   52418:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   5241c:	ldr	x8, [sp, #112]
   52420:	cbz	x8, 52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52424:	cmp	x8, #0x40
   52428:	b.eq	52b70 <print_arm_disassembler_options@@Base+0x7038>  // b.none
   5242c:	cmp	x8, #0x20
   52430:	b.eq	5291c <print_arm_disassembler_options@@Base+0x6de4>  // b.none
   52434:	adrp	x1, 58000 <fields@@Base+0x1e84>
   52438:	mov	x0, x19
   5243c:	add	x1, x1, #0x993
   52440:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52444:	ldr	x2, [sp, #160]
   52448:	adrp	x1, 69000 <fields@@Base+0x12e84>
   5244c:	mov	x0, x19
   52450:	add	x1, x1, #0x3d4
   52454:	stur	x2, [x29, #-16]
   52458:	b	529ac <print_arm_disassembler_options@@Base+0x6e74>
   5245c:	ldur	x2, [x29, #-136]
   52460:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52464:	mov	x0, x19
   52468:	add	x1, x1, #0xc2b
   5246c:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   52470:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   52474:	ldr	w8, [x8, #1584]
   52478:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   5247c:	mov	w9, #0x90                  	// #144
   52480:	add	x10, x10, #0xaf8
   52484:	madd	x8, x8, x9, x10
   52488:	ldur	x9, [x29, #-40]
   5248c:	adrp	x1, 61000 <fields@@Base+0xae84>
   52490:	mov	x0, x19
   52494:	add	x1, x1, #0x777
   52498:	add	x8, x8, x9, lsl #3
   5249c:	ldr	x2, [x8, #16]
   524a0:	blr	x24
   524a4:	ldr	x8, [sp, #120]
   524a8:	ldur	x9, [x29, #-144]
   524ac:	mov	x0, x19
   524b0:	cmp	x8, #0x0
   524b4:	ldur	x8, [x29, #-32]
   524b8:	csel	x8, x9, x8, ne  // ne = any
   524bc:	ldur	w9, [x29, #-108]
   524c0:	stur	x8, [x29, #-32]
   524c4:	cbz	w9, 52ab0 <print_arm_disassembler_options@@Base+0x6f78>
   524c8:	tbnz	w20, #24, 52af8 <print_arm_disassembler_options@@Base+0x6fc0>
   524cc:	ldp	x2, x3, [sp, #56]
   524d0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   524d4:	add	x1, x1, #0x418
   524d8:	blr	x24
   524dc:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   524e0:	ldr	x8, [sp, #104]
   524e4:	cmp	w8, #0x1
   524e8:	b.ne	5292c <print_arm_disassembler_options@@Base+0x6df4>  // b.any
   524ec:	ldur	w2, [x29, #-104]
   524f0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   524f4:	mov	x0, x19
   524f8:	add	x1, x1, #0x4cf
   524fc:	b	529ac <print_arm_disassembler_options@@Base+0x6e74>
   52500:	ldr	w8, [sp, #140]
   52504:	cmp	w8, #0x1
   52508:	b.eq	52abc <print_arm_disassembler_options@@Base+0x6f84>  // b.none
   5250c:	cbnz	w8, 52ad0 <print_arm_disassembler_options@@Base+0x6f98>
   52510:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52514:	mov	x0, x19
   52518:	add	x1, x1, #0x4f8
   5251c:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52520:	ldur	w2, [x29, #-148]
   52524:	adrp	x1, 69000 <fields@@Base+0x12e84>
   52528:	mov	x0, x19
   5252c:	add	x1, x1, #0x3d4
   52530:	b	529ac <print_arm_disassembler_options@@Base+0x6e74>
   52534:	ldur	x8, [x29, #-120]
   52538:	sub	x8, x8, #0x1
   5253c:	cmp	x8, #0xe
   52540:	b.hi	52c64 <print_arm_disassembler_options@@Base+0x712c>  // b.pmore
   52544:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   52548:	add	x11, x11, #0x2dc
   5254c:	adr	x9, 5255c <print_arm_disassembler_options@@Base+0x6a24>
   52550:	ldrh	w10, [x11, x8, lsl #1]
   52554:	add	x9, x9, x10, lsl #2
   52558:	br	x9
   5255c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52560:	mov	x0, x19
   52564:	add	x1, x1, #0x539
   52568:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   5256c:	ldur	x8, [x29, #-88]
   52570:	cmp	x8, #0x400, lsl #12
   52574:	b.eq	5290c <print_arm_disassembler_options@@Base+0x6dd4>  // b.none
   52578:	cmp	x8, #0x8, lsl #12
   5257c:	b.eq	528fc <print_arm_disassembler_options@@Base+0x6dc4>  // b.none
   52580:	cbnz	x8, 5291c <print_arm_disassembler_options@@Base+0x6de4>
   52584:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52588:	mov	x0, x19
   5258c:	add	x1, x1, #0xbea
   52590:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52594:	adrp	x8, ed000 <aarch64_opcode_table@@Base+0x555c0>
   52598:	ldr	w8, [x8, #1584]
   5259c:	adrp	x10, 81000 <aarch64_operands@@Base+0x1c38>
   525a0:	mov	w9, #0x90                  	// #144
   525a4:	add	x10, x10, #0xaf8
   525a8:	madd	x8, x8, x9, x10
   525ac:	ldur	x9, [x29, #-128]
   525b0:	add	x8, x8, #0x10
   525b4:	ldr	x4, [x8, x9, lsl #3]
   525b8:	ldur	x9, [x29, #-40]
   525bc:	ldr	x2, [x8, x9, lsl #3]
   525c0:	ldur	w9, [x29, #-152]
   525c4:	sub	w8, w9, #0x4
   525c8:	cmp	w8, #0x4
   525cc:	b.cs	52970 <print_arm_disassembler_options@@Base+0x6e38>  // b.hs, b.nlast
   525d0:	ldr	w3, [sp, #92]
   525d4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   525d8:	mov	x0, x19
   525dc:	add	x1, x1, #0x625
   525e0:	blr	x24
   525e4:	ldr	x2, [sp, #128]
   525e8:	cbz	w2, 525fc <print_arm_disassembler_options@@Base+0x6ac4>
   525ec:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   525f0:	mov	x0, x19
   525f4:	add	x1, x1, #0x61b
   525f8:	blr	x24
   525fc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52600:	mov	x0, x19
   52604:	add	x1, x1, #0x4be
   52608:	blr	x24
   5260c:	ldr	w8, [sp, #44]
   52610:	cmp	w8, #0x7
   52614:	b.ne	52d2c <print_arm_disassembler_options@@Base+0x71f4>  // b.any
   52618:	adrp	x1, 65000 <fields@@Base+0xee84>
   5261c:	mov	x0, x19
   52620:	add	x1, x1, #0x722
   52624:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52628:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   5262c:	mov	x0, x19
   52630:	add	x1, x1, #0x4be
   52634:	blr	x24
   52638:	tbnz	w20, #21, 52948 <print_arm_disassembler_options@@Base+0x6e10>
   5263c:	ldur	x8, [x29, #-56]
   52640:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   52644:	add	x9, x9, #0x39c
   52648:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   5264c:	orr	x8, x27, x8
   52650:	cmp	x8, #0x0
   52654:	adrp	x8, 55000 <xexit@@Base+0x184c>
   52658:	add	x8, x8, #0xda7
   5265c:	csel	x2, x9, x8, eq  // eq = none
   52660:	mov	x0, x19
   52664:	add	x1, x1, #0x4c6
   52668:	mov	w3, w27
   5266c:	blr	x24
   52670:	mov	x21, x27
   52674:	b	52bf0 <print_arm_disassembler_options@@Base+0x70b8>
   52678:	cmp	w22, #0x10
   5267c:	csinc	w25, w25, wzr, eq  // eq = none
   52680:	ldur	w8, [x29, #-76]
   52684:	cmp	w8, #0x0
   52688:	csinc	w25, w25, wzr, eq  // eq = none
   5268c:	adrp	x8, 85000 <aarch64_operands@@Base+0x5c38>
   52690:	add	x8, x8, #0xf38
   52694:	ldr	x2, [x8, x22, lsl #3]
   52698:	b	52b1c <print_arm_disassembler_options@@Base+0x6fe4>
   5269c:	ldur	x8, [x29, #-16]
   526a0:	cmp	x8, #0x3
   526a4:	b.hi	52cec <print_arm_disassembler_options@@Base+0x71b4>  // b.pmore
   526a8:	adrp	x11, 5e000 <fields@@Base+0x7e84>
   526ac:	add	x11, x11, #0x2d4
   526b0:	adr	x9, 526c0 <print_arm_disassembler_options@@Base+0x6b88>
   526b4:	ldrh	w10, [x11, x8, lsl #1]
   526b8:	add	x9, x9, x10, lsl #2
   526bc:	br	x9
   526c0:	adrp	x1, 59000 <fields@@Base+0x2e84>
   526c4:	mov	x0, x19
   526c8:	add	x1, x1, #0x81b
   526cc:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   526d0:	ldur	x2, [x29, #-16]
   526d4:	cmp	x2, #0x8
   526d8:	b.cc	52b30 <print_arm_disassembler_options@@Base+0x6ff8>  // b.lo, b.ul, b.last
   526dc:	adrp	x9, 8b000 <aarch64_operands@@Base+0xbc38>
   526e0:	and	x8, x2, #0x7
   526e4:	add	x9, x9, #0x858
   526e8:	ldr	x2, [x9, x8, lsl #3]
   526ec:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   526f0:	mov	x0, x19
   526f4:	add	x1, x1, #0x5ec
   526f8:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   526fc:	cmp	w8, #0x27
   52700:	b.ne	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.any
   52704:	ldur	w8, [x29, #-20]
   52708:	ldur	x9, [x29, #-16]
   5270c:	mov	x10, #0xffffffffffffffff    	// #-1
   52710:	add	x26, x26, #0x1
   52714:	lsl	x8, x10, x8
   52718:	mvn	x8, x8
   5271c:	cmp	x9, x8
   52720:	b.ne	52d2c <print_arm_disassembler_options@@Base+0x71f4>  // b.any
   52724:	ldrb	w2, [x26]
   52728:	adrp	x1, 65000 <fields@@Base+0xee84>
   5272c:	mov	x0, x19
   52730:	add	x1, x1, #0x1b9
   52734:	b	529ac <print_arm_disassembler_options@@Base+0x6e74>
   52738:	ldur	x8, [x29, #-16]
   5273c:	adrp	x9, 8b000 <aarch64_operands@@Base+0xbc38>
   52740:	add	x9, x9, #0x9b8
   52744:	b	52b18 <print_arm_disassembler_options@@Base+0x6fe0>
   52748:	ldur	w2, [x29, #-16]
   5274c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52750:	mov	x0, x19
   52754:	add	x1, x1, #0x491
   52758:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   5275c:	cmp	w8, #0x72
   52760:	b.ne	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.any
   52764:	ldur	x8, [x29, #-16]
   52768:	mov	x9, x26
   5276c:	ldrb	w10, [x9, #1]!
   52770:	ldur	x12, [x29, #-72]
   52774:	adrp	x11, ed000 <aarch64_opcode_table@@Base+0x555c0>
   52778:	ldr	w11, [x11, #1584]
   5277c:	mov	w13, #0x75                  	// #117
   52780:	cmp	x12, x8
   52784:	adrp	x14, 81000 <aarch64_operands@@Base+0x1c38>
   52788:	ccmp	w10, w13, #0x0, eq  // eq = none
   5278c:	mov	w13, #0x90                  	// #144
   52790:	add	x14, x14, #0xaf8
   52794:	madd	x11, x11, x13, x14
   52798:	add	x11, x11, x8, lsl #3
   5279c:	ldr	x2, [x11, #16]
   527a0:	csinc	w25, w25, wzr, ne  // ne = any
   527a4:	cmp	w10, #0x75
   527a8:	csel	x12, x8, x12, eq  // eq = none
   527ac:	csel	x26, x9, x26, eq  // eq = none
   527b0:	stur	x12, [x29, #-72]
   527b4:	b	52b1c <print_arm_disassembler_options@@Base+0x6fe4>
   527b8:	cmp	w8, #0x56
   527bc:	b.ne	52d90 <print_arm_disassembler_options@@Base+0x7258>  // b.any
   527c0:	tbnz	w20, #6, 527d8 <print_arm_disassembler_options@@Base+0x6ca0>
   527c4:	ldur	x2, [x29, #-16]
   527c8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   527cc:	mov	x0, x19
   527d0:	add	x1, x1, #0x588
   527d4:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   527d8:	ldur	x8, [x29, #-16]
   527dc:	mov	x0, x19
   527e0:	lsr	x2, x8, #1
   527e4:	tbnz	w8, #0, 52964 <print_arm_disassembler_options@@Base+0x6e2c>
   527e8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   527ec:	add	x1, x1, #0x5a2
   527f0:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   527f4:	ldur	x2, [x29, #-16]
   527f8:	adrp	x1, 66000 <fields@@Base+0xfe84>
   527fc:	mov	x0, x19
   52800:	add	x1, x1, #0xc2b
   52804:	blr	x24
   52808:	ldur	x8, [x29, #-16]
   5280c:	stur	x8, [x29, #-32]
   52810:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52814:	ldur	x8, [x29, #-16]
   52818:	adrp	x9, 8b000 <aarch64_operands@@Base+0xbc38>
   5281c:	add	x9, x9, #0x938
   52820:	b	52b18 <print_arm_disassembler_options@@Base+0x6fe0>
   52824:	ldur	x8, [x29, #-16]
   52828:	ldr	x9, [sp, #48]
   5282c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52830:	mov	x0, x19
   52834:	add	x1, x1, #0xc2b
   52838:	sub	x2, x9, x8
   5283c:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   52840:	ldur	x2, [x29, #-16]
   52844:	mov	w11, #0x3e000000            	// #1040187392
   52848:	mov	w13, #0x40000000            	// #1073741824
   5284c:	mov	w8, #0x10                  	// #16
   52850:	and	x9, x2, #0x80
   52854:	tst	x2, #0x40
   52858:	lsl	w10, w9, #24
   5285c:	csel	w11, w13, w11, eq  // eq = none
   52860:	bfi	w10, w2, #19, #6
   52864:	orr	w3, w10, w11
   52868:	ubfx	w10, w3, #23, #8
   5286c:	mov	w11, #0x312d                	// #12589
   52870:	sub	w10, w10, #0x7c
   52874:	movk	w11, #0x1, lsl #16
   52878:	lsl	w10, w11, w10
   5287c:	bfxil	w8, w2, #0, #4
   52880:	mul	w8, w10, w8
   52884:	mov	w10, #0x6139                	// #24889
   52888:	movk	w10, #0x68c2, lsl #16
   5288c:	mul	w10, w8, w10
   52890:	ror	w10, w10, #6
   52894:	mov	w11, #0x10c6                	// #4294
   52898:	cmp	w10, w11
   5289c:	udiv	w5, w8, w12
   528a0:	b.ls	52b98 <print_arm_disassembler_options@@Base+0x7060>  // b.plast
   528a4:	cmp	x9, #0x0
   528a8:	mov	w9, #0x7e91                	// #32401
   528ac:	movk	w9, #0x3afb, lsl #16
   528b0:	mov	w10, #0x20                  	// #32
   528b4:	mov	w11, #0x2d                  	// #45
   528b8:	mul	w9, w8, w9
   528bc:	csel	w4, w10, w11, eq  // eq = none
   528c0:	mov	w10, #0x8db8                	// #36280
   528c4:	ror	w9, w9, #4
   528c8:	movk	w10, #0x6, lsl #16
   528cc:	cmp	w9, w10
   528d0:	msub	w6, w5, w12, w8
   528d4:	b.ls	52cc8 <print_arm_disassembler_options@@Base+0x7190>  // b.plast
   528d8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   528dc:	mov	x0, x19
   528e0:	add	x1, x1, #0x5d5
   528e4:	b	52ce4 <print_arm_disassembler_options@@Base+0x71ac>
   528e8:	b.ne	528fc <print_arm_disassembler_options@@Base+0x6dc4>  // b.any
   528ec:	adrp	x1, 54000 <xexit@@Base+0x84c>
   528f0:	mov	x0, x19
   528f4:	add	x1, x1, #0x5ca
   528f8:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   528fc:	adrp	x1, 69000 <fields@@Base+0x12e84>
   52900:	mov	x0, x19
   52904:	add	x1, x1, #0x3d5
   52908:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   5290c:	adrp	x1, 65000 <fields@@Base+0xee84>
   52910:	mov	x0, x19
   52914:	add	x1, x1, #0xf5
   52918:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   5291c:	adrp	x1, 58000 <fields@@Base+0x1e84>
   52920:	mov	x0, x19
   52924:	add	x1, x1, #0xe58
   52928:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   5292c:	ldr	w8, [sp, #28]
   52930:	mov	x0, x19
   52934:	cmp	w8, #0x21
   52938:	b.cc	52b80 <print_arm_disassembler_options@@Base+0x7048>  // b.lo, b.ul, b.last
   5293c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52940:	add	x1, x1, #0x4d5
   52944:	b	52b88 <print_arm_disassembler_options@@Base+0x7050>
   52948:	cbz	x27, 52bc8 <print_arm_disassembler_options@@Base+0x7090>
   5294c:	adrp	x1, 56000 <xexit@@Base+0x284c>
   52950:	mov	x0, x19
   52954:	add	x1, x1, #0xe94
   52958:	mov	w2, w27
   5295c:	blr	x24
   52960:	b	52bf0 <print_arm_disassembler_options@@Base+0x70b8>
   52964:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52968:	add	x1, x1, #0x58d
   5296c:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   52970:	ldr	x21, [sp, #128]
   52974:	cmp	w9, #0x3
   52978:	b.eq	52984 <print_arm_disassembler_options@@Base+0x6e4c>  // b.none
   5297c:	cmp	w9, #0x1
   52980:	b.ne	52cb8 <print_arm_disassembler_options@@Base+0x7180>  // b.any
   52984:	ldr	w3, [sp, #92]
   52988:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   5298c:	mov	x0, x19
   52990:	add	x1, x1, #0x610
   52994:	blr	x24
   52998:	cbz	w21, 52d2c <print_arm_disassembler_options@@Base+0x71f4>
   5299c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   529a0:	mov	x0, x19
   529a4:	add	x1, x1, #0x61b
   529a8:	mov	w2, w21
   529ac:	blr	x24
   529b0:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   529b4:	mov	x28, x27
   529b8:	b	529d0 <print_arm_disassembler_options@@Base+0x6e98>
   529bc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   529c0:	mov	x0, x19
   529c4:	add	x1, x1, #0x429
   529c8:	mov	x28, x27
   529cc:	blr	x24
   529d0:	ldr	w8, [sp, #84]
   529d4:	ldur	w9, [x29, #-104]
   529d8:	b	529e4 <print_arm_disassembler_options@@Base+0x6eac>
   529dc:	ldp	w9, w8, [sp, #16]
   529e0:	mov	x28, x27
   529e4:	cmp	w21, #0x79
   529e8:	csel	w26, w8, w9, eq  // eq = none
   529ec:	cmp	w21, #0x79
   529f0:	mov	w8, #0x64                  	// #100
   529f4:	mov	w9, #0x73                  	// #115
   529f8:	csel	w27, w9, w8, eq  // eq = none
   529fc:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52a00:	mov	x0, x19
   52a04:	add	x1, x1, #0x600
   52a08:	mov	w2, w27
   52a0c:	mov	w3, w26
   52a10:	blr	x24
   52a14:	ldrb	w8, [x23]
   52a18:	cmp	w8, #0x34
   52a1c:	b.eq	52a6c <print_arm_disassembler_options@@Base+0x6f34>  // b.none
   52a20:	cmp	w8, #0x33
   52a24:	b.ne	52a84 <print_arm_disassembler_options@@Base+0x6f4c>  // b.any
   52a28:	ldur	w9, [x29, #-108]
   52a2c:	cmp	w21, #0x79
   52a30:	cset	w8, ne  // ne = any
   52a34:	lsr	w8, w9, w8
   52a38:	subs	w8, w8, #0x1
   52a3c:	b.eq	52a58 <print_arm_disassembler_options@@Base+0x6f20>  // b.none
   52a40:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52a44:	add	w3, w26, w8
   52a48:	mov	x0, x19
   52a4c:	add	x1, x1, #0x5f8
   52a50:	mov	w2, w27
   52a54:	blr	x24
   52a58:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52a5c:	mov	x0, x19
   52a60:	add	x1, x1, #0x4ec
   52a64:	blr	x24
   52a68:	b	52a84 <print_arm_disassembler_options@@Base+0x6f4c>
   52a6c:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52a70:	add	w3, w26, #0x1
   52a74:	mov	x0, x19
   52a78:	add	x1, x1, #0x5fe
   52a7c:	mov	w2, w27
   52a80:	blr	x24
   52a84:	mov	x27, x28
   52a88:	adrp	x28, 5e000 <fields@@Base+0x7e84>
   52a8c:	mov	x26, x23
   52a90:	add	x28, x28, #0x2aa
   52a94:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52a98:	ldur	x8, [x29, #-56]
   52a9c:	cbnz	x8, 52be0 <print_arm_disassembler_options@@Base+0x70a8>
   52aa0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52aa4:	mov	x0, x19
   52aa8:	add	x1, x1, #0x4b9
   52aac:	b	52bec <print_arm_disassembler_options@@Base+0x70b4>
   52ab0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52ab4:	add	x1, x1, #0x4be
   52ab8:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52abc:	ldp	w2, w3, [sp, #72]
   52ac0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52ac4:	mov	x0, x19
   52ac8:	add	x1, x1, #0x4fe
   52acc:	b	52b90 <print_arm_disassembler_options@@Base+0x7058>
   52ad0:	ldp	w5, w8, [sp, #8]
   52ad4:	mov	x0, x19
   52ad8:	cmp	w5, w8
   52adc:	b.le	52c3c <print_arm_disassembler_options@@Base+0x7104>
   52ae0:	ldp	w2, w3, [sp, #72]
   52ae4:	ldr	w4, [sp, #4]
   52ae8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52aec:	add	x1, x1, #0x50a
   52af0:	blr	x24
   52af4:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52af8:	ldp	x2, x3, [sp, #56]
   52afc:	ldr	x4, [sp, #96]
   52b00:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52b04:	add	x1, x1, #0x605
   52b08:	blr	x24
   52b0c:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52b10:	adrp	x9, 8b000 <aarch64_operands@@Base+0xbc38>
   52b14:	add	x9, x9, #0x8b8
   52b18:	ldr	x2, [x9, x8, lsl #3]
   52b1c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52b20:	mov	x0, x19
   52b24:	add	x1, x1, #0xbe9
   52b28:	blr	x24
   52b2c:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52b30:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52b34:	mov	x0, x19
   52b38:	add	x1, x1, #0x5f0
   52b3c:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   52b40:	adrp	x1, 53000 <print_arm_disassembler_options@@Base+0x74c8>
   52b44:	add	x1, x1, #0x9c2
   52b48:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52b4c:	adrp	x1, 69000 <fields@@Base+0x12e84>
   52b50:	add	x1, x1, #0xa53
   52b54:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52b58:	adrp	x1, 54000 <xexit@@Base+0x84c>
   52b5c:	add	x1, x1, #0x892
   52b60:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52b64:	adrp	x1, 69000 <fields@@Base+0x12e84>
   52b68:	add	x1, x1, #0x325
   52b6c:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52b70:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52b74:	mov	x0, x19
   52b78:	add	x1, x1, #0x9b8
   52b7c:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52b80:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52b84:	add	x1, x1, #0x4ee
   52b88:	ldur	w2, [x29, #-104]
   52b8c:	ldr	w3, [sp, #24]
   52b90:	blr	x24
   52b94:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52b98:	cmp	x9, #0x0
   52b9c:	mov	w9, #0x20                  	// #32
   52ba0:	mov	w10, #0x2d                  	// #45
   52ba4:	csel	w4, w9, w10, eq  // eq = none
   52ba8:	mov	w9, #0x4240                	// #16960
   52bac:	msub	w8, w5, w12, w8
   52bb0:	movk	w9, #0xf, lsl #16
   52bb4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52bb8:	udiv	w6, w8, w9
   52bbc:	mov	x0, x19
   52bc0:	add	x1, x1, #0x5a7
   52bc4:	b	52ce4 <print_arm_disassembler_options@@Base+0x71ac>
   52bc8:	ldur	x8, [x29, #-56]
   52bcc:	cbnz	x8, 52bf0 <print_arm_disassembler_options@@Base+0x70b8>
   52bd0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52bd4:	mov	x0, x19
   52bd8:	add	x1, x1, #0x4c0
   52bdc:	b	52bec <print_arm_disassembler_options@@Base+0x70b4>
   52be0:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52be4:	mov	x0, x19
   52be8:	add	x1, x1, #0x4be
   52bec:	blr	x24
   52bf0:	ldur	x8, [x29, #-40]
   52bf4:	stur	x21, [x29, #-32]
   52bf8:	cmp	x8, #0xf
   52bfc:	b.ne	52c34 <print_arm_disassembler_options@@Base+0x70fc>  // b.any
   52c00:	ldur	w8, [x29, #-60]
   52c04:	tbnz	w8, #0, 52c34 <print_arm_disassembler_options@@Base+0x70fc>
   52c08:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c0c:	mov	x0, x19
   52c10:	add	x1, x1, #0x411
   52c14:	blr	x24
   52c18:	ldur	x1, [x29, #-48]
   52c1c:	ldr	x10, [sp, #32]
   52c20:	ldrsw	x8, [x1, #172]
   52c24:	ldr	x9, [x1, #120]
   52c28:	add	x10, x10, x27
   52c2c:	add	x0, x10, x8, lsl #1
   52c30:	blr	x9
   52c34:	mov	x27, x23
   52c38:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52c3c:	ldp	w2, w3, [sp, #72]
   52c40:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c44:	add	x1, x1, #0x528
   52c48:	mov	w4, w2
   52c4c:	blr	x24
   52c50:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52c54:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c58:	mov	x0, x19
   52c5c:	add	x1, x1, #0x53f
   52c60:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52c64:	ldur	x2, [x29, #-120]
   52c68:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c6c:	mov	x0, x19
   52c70:	add	x1, x1, #0x562
   52c74:	b	52b28 <print_arm_disassembler_options@@Base+0x6ff0>
   52c78:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c7c:	mov	x0, x19
   52c80:	add	x1, x1, #0x54c
   52c84:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52c88:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c8c:	mov	x0, x19
   52c90:	add	x1, x1, #0x550
   52c94:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52c98:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52c9c:	mov	x0, x19
   52ca0:	add	x1, x1, #0x553
   52ca4:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52ca8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52cac:	mov	x0, x19
   52cb0:	add	x1, x1, #0x55b
   52cb4:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52cb8:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52cbc:	mov	x0, x19
   52cc0:	add	x1, x1, #0x62f
   52cc4:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52cc8:	mov	w8, #0x1759                	// #5977
   52ccc:	movk	w8, #0xd1b7, lsl #16
   52cd0:	umull	x8, w6, w8
   52cd4:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52cd8:	lsr	x6, x8, #45
   52cdc:	mov	x0, x19
   52ce0:	add	x1, x1, #0x5be
   52ce4:	blr	x24
   52ce8:	b	52d2c <print_arm_disassembler_options@@Base+0x71f4>
   52cec:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52cf0:	mov	x0, x19
   52cf4:	add	x1, x1, #0x5f5
   52cf8:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52cfc:	adrp	x1, 59000 <fields@@Base+0x2e84>
   52d00:	mov	x0, x19
   52d04:	add	x1, x1, #0x837
   52d08:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52d0c:	adrp	x1, 5c000 <fields@@Base+0x5e84>
   52d10:	mov	x0, x19
   52d14:	add	x1, x1, #0x4dd
   52d18:	b	52d28 <print_arm_disassembler_options@@Base+0x71f0>
   52d1c:	adrp	x1, 59000 <fields@@Base+0x2e84>
   52d20:	mov	x0, x19
   52d24:	add	x1, x1, #0x84b
   52d28:	blr	x24
   52d2c:	add	x23, x26, #0x1
   52d30:	b	52154 <print_arm_disassembler_options@@Base+0x661c>
   52d34:	ldur	x9, [x29, #-32]
   52d38:	add	x8, x9, #0x10
   52d3c:	cmp	x8, #0x31
   52d40:	b.cc	52d58 <print_arm_disassembler_options@@Base+0x7220>  // b.lo, b.ul, b.last
   52d44:	adrp	x1, 5e000 <fields@@Base+0x7e84>
   52d48:	and	x2, x9, #0xffffffff
   52d4c:	add	x1, x1, #0x48e
   52d50:	mov	x0, x19
   52d54:	blr	x24
   52d58:	cbz	w25, 52d6c <print_arm_disassembler_options@@Base+0x7234>
   52d5c:	adrp	x1, 66000 <fields@@Base+0xfe84>
   52d60:	add	x1, x1, #0xa86
   52d64:	mov	x0, x19
   52d68:	blr	x24
   52d6c:	mov	w0, #0x1                   	// #1
   52d70:	ldp	x20, x19, [sp, #400]
   52d74:	ldp	x22, x21, [sp, #384]
   52d78:	ldp	x24, x23, [sp, #368]
   52d7c:	ldp	x26, x25, [sp, #352]
   52d80:	ldp	x28, x27, [sp, #336]
   52d84:	ldp	x29, x30, [sp, #320]
   52d88:	add	sp, sp, #0x1a0
   52d8c:	ret
   52d90:	bl	35750 <abort@plt>
   52d94:	cmp	w0, #0x14
   52d98:	b.hi	52dcc <print_arm_disassembler_options@@Base+0x7294>  // b.pmore
   52d9c:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   52da0:	mov	w8, w0
   52da4:	add	x9, x9, #0x2fa
   52da8:	adr	x10, 52dc0 <print_arm_disassembler_options@@Base+0x7288>
   52dac:	ldrb	w11, [x9, x8]
   52db0:	add	x10, x10, x11, lsl #2
   52db4:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52db8:	add	x0, x0, #0x3ab
   52dbc:	br	x10
   52dc0:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52dc4:	add	x0, x0, #0x3a4
   52dc8:	ret
   52dcc:	sub	w8, w0, #0x88
   52dd0:	cmp	w8, #0x10
   52dd4:	b.hi	52ec8 <print_arm_disassembler_options@@Base+0x7390>  // b.pmore
   52dd8:	adrp	x9, 5e000 <fields@@Base+0x7e84>
   52ddc:	add	x9, x9, #0x30f
   52de0:	adr	x10, 52df0 <print_arm_disassembler_options@@Base+0x72b8>
   52de4:	ldrb	w11, [x9, x8]
   52de8:	add	x10, x10, x11, lsl #2
   52dec:	br	x10
   52df0:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52df4:	add	x0, x0, #0x3ff
   52df8:	ret
   52dfc:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e00:	add	x0, x0, #0x3aa
   52e04:	ret
   52e08:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e0c:	add	x0, x0, #0x3ac
   52e10:	ret
   52e14:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e18:	add	x0, x0, #0x3b0
   52e1c:	ret
   52e20:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e24:	add	x0, x0, #0x3b6
   52e28:	ret
   52e2c:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e30:	add	x0, x0, #0x3b5
   52e34:	ret
   52e38:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e3c:	add	x0, x0, #0x3bb
   52e40:	ret
   52e44:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e48:	add	x0, x0, #0x3bf
   52e4c:	ret
   52e50:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e54:	add	x0, x0, #0x3c3
   52e58:	ret
   52e5c:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e60:	add	x0, x0, #0x3ca
   52e64:	ret
   52e68:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e6c:	add	x0, x0, #0x3d1
   52e70:	ret
   52e74:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e78:	add	x0, x0, #0x3d9
   52e7c:	ret
   52e80:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e84:	add	x0, x0, #0x3e1
   52e88:	ret
   52e8c:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e90:	add	x0, x0, #0x3ed
   52e94:	ret
   52e98:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52e9c:	add	x0, x0, #0x3f7
   52ea0:	ret
   52ea4:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ea8:	add	x0, x0, #0x406
   52eac:	ret
   52eb0:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52eb4:	add	x0, x0, #0x40d
   52eb8:	ret
   52ebc:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ec0:	add	x0, x0, #0x417
   52ec4:	ret
   52ec8:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ecc:	add	x0, x0, #0x44f
   52ed0:	ret
   52ed4:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ed8:	add	x0, x0, #0x421
   52edc:	ret
   52ee0:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ee4:	add	x0, x0, #0x42c
   52ee8:	ret
   52eec:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52ef0:	add	x0, x0, #0x437
   52ef4:	ret
   52ef8:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52efc:	add	x0, x0, #0x444
   52f00:	ret
   52f04:	adrp	x0, 6b000 <fields@@Base+0x14e84>
   52f08:	add	x0, x0, #0x400
   52f0c:	ret
   52f10:	mov	w0, #0x1                   	// #1
   52f14:	ret
   52f18:	stp	x29, x30, [sp, #-48]!
   52f1c:	stp	x22, x21, [sp, #16]
   52f20:	stp	x20, x19, [sp, #32]
   52f24:	ldp	w20, w21, [x0]
   52f28:	ldp	w3, w4, [x0, #12]
   52f2c:	mov	x19, x0
   52f30:	mov	x22, x1
   52f34:	mov	x0, x1
   52f38:	mov	w1, w20
   52f3c:	mov	w2, w21
   52f40:	mov	x29, sp
   52f44:	bl	532a0 <floatformat_to_double@@Base+0x158>
   52f48:	ldr	w3, [x19, #28]
   52f4c:	mov	x19, x0
   52f50:	mov	w4, #0x1                   	// #1
   52f54:	mov	x0, x22
   52f58:	mov	w1, w20
   52f5c:	mov	w2, w21
   52f60:	bl	532a0 <floatformat_to_double@@Base+0x158>
   52f64:	cmp	x19, #0x0
   52f68:	ldp	x20, x19, [sp, #32]
   52f6c:	ldp	x22, x21, [sp, #16]
   52f70:	cset	w8, ne  // ne = any
   52f74:	cmp	x0, #0x0
   52f78:	cset	w9, eq  // eq = none
   52f7c:	eor	w0, w8, w9
   52f80:	ldp	x29, x30, [sp], #48
   52f84:	ret
   52f88:	stp	x29, x30, [sp, #-96]!
   52f8c:	stp	x28, x27, [sp, #16]
   52f90:	stp	x26, x25, [sp, #32]
   52f94:	stp	x24, x23, [sp, #48]
   52f98:	stp	x22, x21, [sp, #64]
   52f9c:	stp	x20, x19, [sp, #80]
   52fa0:	ldr	x19, [x0, #56]
   52fa4:	mov	x22, x1
   52fa8:	mov	x0, x1
   52fac:	mov	x29, sp
   52fb0:	ldp	w20, w21, [x19]
   52fb4:	ldp	w24, w26, [x19, #12]
   52fb8:	mov	w1, w20
   52fbc:	mov	w2, w21
   52fc0:	mov	w3, w24
   52fc4:	mov	w4, w26
   52fc8:	bl	532a0 <floatformat_to_double@@Base+0x158>
   52fcc:	add	x23, x22, #0x8
   52fd0:	mov	x25, x0
   52fd4:	mov	x0, x23
   52fd8:	mov	w1, w20
   52fdc:	mov	w2, w21
   52fe0:	mov	w3, w24
   52fe4:	mov	w4, w26
   52fe8:	bl	532a0 <floatformat_to_double@@Base+0x158>
   52fec:	ldr	w8, [x19, #24]
   52ff0:	mov	x24, x0
   52ff4:	cmp	x25, x8
   52ff8:	b.ne	53010 <print_arm_disassembler_options@@Base+0x74d8>  // b.any
   52ffc:	mov	x0, x19
   53000:	mov	x1, x22
   53004:	bl	53320 <floatformat_to_double@@Base+0x1d8>
   53008:	cbnz	w0, 53020 <print_arm_disassembler_options@@Base+0x74e8>
   5300c:	b	53028 <print_arm_disassembler_options@@Base+0x74f0>
   53010:	cbz	x25, 53028 <print_arm_disassembler_options@@Base+0x74f0>
   53014:	sub	x25, x25, #0x35
   53018:	cmp	x24, x25
   5301c:	b.ge	53044 <print_arm_disassembler_options@@Base+0x750c>  // b.tcont
   53020:	mov	w0, #0x1                   	// #1
   53024:	b	53078 <print_arm_disassembler_options@@Base+0x7540>
   53028:	cbnz	x24, 53074 <print_arm_disassembler_options@@Base+0x753c>
   5302c:	mov	x0, x19
   53030:	mov	x1, x23
   53034:	bl	53320 <floatformat_to_double@@Base+0x1d8>
   53038:	cmp	w0, #0x0
   5303c:	cset	w0, eq  // eq = none
   53040:	b	53078 <print_arm_disassembler_options@@Base+0x7540>
   53044:	b.le	5304c <print_arm_disassembler_options@@Base+0x7514>
   53048:	cbnz	x24, 53074 <print_arm_disassembler_options@@Base+0x753c>
   5304c:	cbz	x24, 53094 <print_arm_disassembler_options@@Base+0x755c>
   53050:	ldp	w8, w9, [x19, #28]
   53054:	mov	w4, #0x1                   	// #1
   53058:	mov	x0, x22
   5305c:	mov	w1, w20
   53060:	add	w8, w8, w9
   53064:	sub	w3, w8, #0x1
   53068:	mov	w2, w21
   5306c:	bl	532a0 <floatformat_to_double@@Base+0x158>
   53070:	cbz	x0, 5302c <print_arm_disassembler_options@@Base+0x74f4>
   53074:	mov	w0, wzr
   53078:	ldp	x20, x19, [sp, #80]
   5307c:	ldp	x22, x21, [sp, #64]
   53080:	ldp	x24, x23, [sp, #48]
   53084:	ldp	x26, x25, [sp, #32]
   53088:	ldp	x28, x27, [sp, #16]
   5308c:	ldp	x29, x30, [sp], #96
   53090:	ret
   53094:	ldr	w24, [x19, #32]
   53098:	cbz	w24, 53020 <print_arm_disassembler_options@@Base+0x74e8>
   5309c:	ldr	w27, [x19, #28]
   530a0:	mov	w26, wzr
   530a4:	mov	w28, #0xffffffff            	// #-1
   530a8:	add	w3, w27, w26
   530ac:	mov	w4, #0x1                   	// #1
   530b0:	mov	x0, x23
   530b4:	mov	w1, w20
   530b8:	mov	w2, w21
   530bc:	bl	532a0 <floatformat_to_double@@Base+0x158>
   530c0:	cbz	x0, 530d4 <print_arm_disassembler_options@@Base+0x759c>
   530c4:	cmn	w28, #0x1
   530c8:	mov	w8, w26
   530cc:	b.eq	530d8 <print_arm_disassembler_options@@Base+0x75a0>  // b.none
   530d0:	b	530f8 <print_arm_disassembler_options@@Base+0x75c0>
   530d4:	mov	w8, w28
   530d8:	add	w26, w26, #0x1
   530dc:	cmp	w26, w24
   530e0:	mov	w28, w8
   530e4:	b.cc	530a8 <print_arm_disassembler_options@@Base+0x7570>  // b.lo, b.ul, b.last
   530e8:	cmn	w8, #0x1
   530ec:	b.eq	53020 <print_arm_disassembler_options@@Base+0x74e8>  // b.none
   530f0:	mov	w26, #0xffffffff            	// #-1
   530f4:	b	530fc <print_arm_disassembler_options@@Base+0x75c4>
   530f8:	mov	w8, w28
   530fc:	neg	w8, w8
   53100:	cmp	x25, w8, sxtw
   53104:	b.gt	53020 <print_arm_disassembler_options@@Base+0x74e8>
   53108:	sxtw	x8, w8
   5310c:	cmp	x25, x8
   53110:	mov	w0, wzr
   53114:	b.lt	53078 <print_arm_disassembler_options@@Base+0x7540>  // b.tstop
   53118:	cmn	w26, #0x1
   5311c:	b.ne	53078 <print_arm_disassembler_options@@Base+0x7540>  // b.any
   53120:	ldr	w8, [x19, #28]
   53124:	mov	w4, #0x1                   	// #1
   53128:	mov	x0, x22
   5312c:	mov	w1, w20
   53130:	add	w8, w24, w8
   53134:	sub	w3, w8, #0x1
   53138:	mov	w2, w21
   5313c:	bl	532a0 <floatformat_to_double@@Base+0x158>
   53140:	cmp	x0, #0x0
   53144:	b	5303c <print_arm_disassembler_options@@Base+0x7504>

0000000000053148 <floatformat_to_double@@Base>:
   53148:	str	d8, [sp, #-96]!
   5314c:	stp	x29, x30, [sp, #16]
   53150:	stp	x26, x25, [sp, #32]
   53154:	stp	x24, x23, [sp, #48]
   53158:	stp	x22, x21, [sp, #64]
   5315c:	stp	x20, x19, [sp, #80]
   53160:	ldp	w22, w23, [x0]
   53164:	ldp	w3, w4, [x0, #12]
   53168:	mov	x19, x2
   5316c:	mov	x21, x0
   53170:	mov	x20, x1
   53174:	mov	x0, x1
   53178:	mov	w1, w22
   5317c:	mov	w2, w23
   53180:	mov	x29, sp
   53184:	bl	532a0 <floatformat_to_double@@Base+0x158>
   53188:	ldr	w8, [x21, #24]
   5318c:	cmp	x0, x8
   53190:	b.ne	531d0 <floatformat_to_double@@Base+0x88>  // b.any
   53194:	mov	x0, x21
   53198:	mov	x1, x20
   5319c:	bl	53320 <floatformat_to_double@@Base+0x1d8>
   531a0:	ldr	w3, [x21, #8]
   531a4:	mov	x8, #0x7ff8000000000000    	// #9221120237041090560
   531a8:	mov	x9, #0x7ff0000000000000    	// #9218868437227405312
   531ac:	cmp	w0, #0x0
   531b0:	fmov	d0, x8
   531b4:	fmov	d1, x9
   531b8:	fcsel	d8, d1, d0, eq  // eq = none
   531bc:	mov	w4, #0x1                   	// #1
   531c0:	mov	x0, x20
   531c4:	mov	w1, w22
   531c8:	mov	w2, w23
   531cc:	b	53270 <floatformat_to_double@@Base+0x128>
   531d0:	ldp	w22, w25, [x21, #28]
   531d4:	ldrsw	x8, [x21, #20]
   531d8:	cbz	x0, 53200 <floatformat_to_double@@Base+0xb8>
   531dc:	ldr	w9, [x21, #36]
   531e0:	sub	x23, x0, x8
   531e4:	cmp	w9, #0x1
   531e8:	b.ne	5320c <floatformat_to_double@@Base+0xc4>  // b.any
   531ec:	fmov	d0, #1.000000000000000000e+00
   531f0:	mov	w0, w23
   531f4:	bl	352c0 <ldexp@plt>
   531f8:	mov	v8.16b, v0.16b
   531fc:	b	53214 <floatformat_to_double@@Base+0xcc>
   53200:	mov	w9, #0x1                   	// #1
   53204:	sub	x23, x9, x8
   53208:	b	53210 <floatformat_to_double@@Base+0xc8>
   5320c:	add	x23, x23, #0x1
   53210:	fmov	d8, xzr
   53214:	cmp	w25, #0x1
   53218:	b.lt	53260 <floatformat_to_double@@Base+0x118>  // b.tstop
   5321c:	mov	w26, #0x20                  	// #32
   53220:	ldp	w1, w2, [x21]
   53224:	cmp	w25, #0x20
   53228:	csel	w24, w25, w26, lt  // lt = tstop
   5322c:	mov	x0, x20
   53230:	mov	w3, w22
   53234:	mov	w4, w24
   53238:	bl	532a0 <floatformat_to_double@@Base+0x158>
   5323c:	sub	x23, x23, x24
   53240:	ucvtf	d0, x0
   53244:	mov	w0, w23
   53248:	bl	352c0 <ldexp@plt>
   5324c:	sub	w25, w25, w24
   53250:	fadd	d8, d8, d0
   53254:	cmp	w25, #0x0
   53258:	add	w22, w24, w22
   5325c:	b.gt	53220 <floatformat_to_double@@Base+0xd8>
   53260:	ldp	w1, w2, [x21]
   53264:	ldr	w3, [x21, #8]
   53268:	mov	w4, #0x1                   	// #1
   5326c:	mov	x0, x20
   53270:	bl	532a0 <floatformat_to_double@@Base+0x158>
   53274:	fneg	d0, d8
   53278:	cmp	x0, #0x0
   5327c:	fcsel	d0, d8, d0, eq  // eq = none
   53280:	str	d0, [x19]
   53284:	ldp	x20, x19, [sp, #80]
   53288:	ldp	x22, x21, [sp, #64]
   5328c:	ldp	x24, x23, [sp, #48]
   53290:	ldp	x26, x25, [sp, #32]
   53294:	ldp	x29, x30, [sp, #16]
   53298:	ldr	d8, [sp], #96
   5329c:	ret
   532a0:	add	w11, w4, w3
   532a4:	cmp	w1, #0x0
   532a8:	mov	w12, #0x1                   	// #1
   532ac:	sub	w13, w2, w11
   532b0:	sub	w14, w11, #0x1
   532b4:	cneg	w11, w12, ne  // ne = any
   532b8:	csel	w12, w13, w14, eq  // eq = none
   532bc:	and	w13, w13, #0x7
   532c0:	add	w14, w13, w4
   532c4:	mov	w10, #0x8                   	// #8
   532c8:	cmp	w14, #0x8
   532cc:	mov	x8, x0
   532d0:	mov	w9, wzr
   532d4:	mov	x0, xzr
   532d8:	lsr	w12, w12, #3
   532dc:	csel	w15, w14, w10, cc  // cc = lo, ul, last
   532e0:	mov	w14, #0xffffffff            	// #-1
   532e4:	ldrb	w16, [x8, w12, uxtw]
   532e8:	sub	w15, w15, w13
   532ec:	lsl	w17, w14, w15
   532f0:	sub	w4, w4, w15
   532f4:	lsr	w13, w16, w13
   532f8:	bic	w13, w13, w17
   532fc:	cmp	w4, #0x8
   53300:	lsl	w13, w13, w9
   53304:	add	w12, w12, w11
   53308:	add	w9, w9, w15
   5330c:	orr	x0, x0, x13
   53310:	csel	w15, w4, w10, cc  // cc = lo, ul, last
   53314:	mov	w13, wzr
   53318:	cbnz	w4, 532e4 <floatformat_to_double@@Base+0x19c>
   5331c:	ret
   53320:	stp	x29, x30, [sp, #-80]!
   53324:	stp	x24, x23, [sp, #32]
   53328:	stp	x22, x21, [sp, #48]
   5332c:	stp	x20, x19, [sp, #64]
   53330:	ldr	w24, [x0, #32]
   53334:	str	x25, [sp, #16]
   53338:	mov	x29, sp
   5333c:	cmp	w24, #0x1
   53340:	b.lt	53388 <floatformat_to_double@@Base+0x240>  // b.tstop
   53344:	ldr	w20, [x0, #28]
   53348:	ldp	w21, w22, [x0]
   5334c:	mov	x19, x1
   53350:	mov	w25, #0x20                  	// #32
   53354:	cmp	w24, #0x20
   53358:	csel	w23, w24, w25, lt  // lt = tstop
   5335c:	mov	x0, x19
   53360:	mov	w1, w21
   53364:	mov	w2, w22
   53368:	mov	w3, w20
   5336c:	mov	w4, w23
   53370:	bl	532a0 <floatformat_to_double@@Base+0x158>
   53374:	cbnz	x0, 53390 <floatformat_to_double@@Base+0x248>
   53378:	sub	w24, w24, w23
   5337c:	cmp	w24, #0x0
   53380:	add	w20, w23, w20
   53384:	b.gt	53354 <floatformat_to_double@@Base+0x20c>
   53388:	mov	w0, wzr
   5338c:	b	53394 <floatformat_to_double@@Base+0x24c>
   53390:	mov	w0, #0x1                   	// #1
   53394:	ldp	x20, x19, [sp, #64]
   53398:	ldp	x22, x21, [sp, #48]
   5339c:	ldp	x24, x23, [sp, #32]
   533a0:	ldr	x25, [sp, #16]
   533a4:	ldp	x29, x30, [sp], #80
   533a8:	ret

00000000000533ac <floatformat_from_double@@Base>:
   533ac:	sub	sp, sp, #0x70
   533b0:	stp	x29, x30, [sp, #24]
   533b4:	stp	x26, x25, [sp, #48]
   533b8:	stp	x24, x23, [sp, #64]
   533bc:	stp	x22, x21, [sp, #80]
   533c0:	stp	x20, x19, [sp, #96]
   533c4:	ldr	w8, [x0, #4]
   533c8:	str	d8, [sp, #16]
   533cc:	ldr	d8, [x1]
   533d0:	mov	x19, x2
   533d4:	mov	x20, x0
   533d8:	lsr	x2, x8, #3
   533dc:	mov	x0, x19
   533e0:	mov	w1, wzr
   533e4:	str	x27, [sp, #40]
   533e8:	add	x29, sp, #0x10
   533ec:	bl	35550 <memset@plt>
   533f0:	fcmp	d8, #0.0
   533f4:	b.pl	53414 <floatformat_from_double@@Base+0x68>  // b.nfrst
   533f8:	ldp	w1, w2, [x20]
   533fc:	ldr	w3, [x20, #8]
   53400:	mov	w4, #0x1                   	// #1
   53404:	mov	w5, #0x1                   	// #1
   53408:	mov	x0, x19
   5340c:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   53410:	fneg	d8, d8
   53414:	fcmp	d8, #0.0
   53418:	b.eq	53444 <floatformat_from_double@@Base+0x98>  // b.none
   5341c:	fcmp	d8, d8
   53420:	b.vs	53580 <floatformat_from_double@@Base+0x1d4>
   53424:	fadd	d0, d8, d8
   53428:	fcmp	d0, d8
   5342c:	b.ne	53468 <floatformat_from_double@@Base+0xbc>  // b.any
   53430:	ldp	w1, w2, [x20]
   53434:	ldp	w3, w4, [x20, #12]
   53438:	ldr	w5, [x20, #24]
   5343c:	mov	x0, x19
   53440:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   53444:	ldp	x20, x19, [sp, #96]
   53448:	ldp	x22, x21, [sp, #80]
   5344c:	ldp	x24, x23, [sp, #64]
   53450:	ldp	x26, x25, [sp, #48]
   53454:	ldr	x27, [sp, #40]
   53458:	ldp	x29, x30, [sp, #24]
   5345c:	ldr	d8, [sp, #16]
   53460:	add	sp, sp, #0x70
   53464:	ret
   53468:	sub	x0, x29, #0x4
   5346c:	mov	v0.16b, v8.16b
   53470:	bl	35920 <frexp@plt>
   53474:	ldursw	x23, [x29, #-4]
   53478:	ldp	w4, w8, [x20, #16]
   5347c:	ldp	w1, w2, [x20]
   53480:	ldr	w3, [x20, #12]
   53484:	sxtw	x8, w8
   53488:	add	x8, x8, x23
   5348c:	cmp	w8, #0x2
   53490:	mov	v8.16b, v0.16b
   53494:	b.lt	534a8 <floatformat_from_double@@Base+0xfc>  // b.tstop
   53498:	sub	x5, x8, #0x1
   5349c:	mov	x0, x19
   534a0:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   534a4:	b	534cc <floatformat_from_double@@Base+0x120>
   534a8:	mov	x0, x19
   534ac:	mov	x5, xzr
   534b0:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   534b4:	ldr	w8, [x20, #20]
   534b8:	mov	v0.16b, v8.16b
   534bc:	add	w8, w23, w8
   534c0:	sub	w0, w8, #0x1
   534c4:	bl	352c0 <ldexp@plt>
   534c8:	mov	v8.16b, v0.16b
   534cc:	ldr	w8, [x20, #32]
   534d0:	cmp	w8, #0x1
   534d4:	b.lt	53444 <floatformat_from_double@@Base+0x98>  // b.tstop
   534d8:	ldr	w21, [x20, #28]
   534dc:	mov	w24, #0x20                  	// #32
   534e0:	mov	x25, #0x41f0000000000000    	// #4751297606875873280
   534e4:	mov	w26, w8
   534e8:	cmp	w26, #0x20
   534ec:	csel	w9, w26, w24, lt  // lt = tstop
   534f0:	cmp	w26, w8
   534f4:	fcvtzu	x27, d8, #32
   534f8:	b.ne	53524 <floatformat_from_double@@Base+0x178>  // b.any
   534fc:	ldr	w8, [x20, #36]
   53500:	cmp	w8, #0x1
   53504:	b.ne	53524 <floatformat_from_double@@Base+0x178>  // b.any
   53508:	ldr	w8, [x20, #20]
   5350c:	add	w8, w8, w23
   53510:	cmp	w8, #0x2
   53514:	b.lt	53524 <floatformat_from_double@@Base+0x178>  // b.tstop
   53518:	and	x5, x27, #0x7fffffff
   5351c:	sub	w22, w9, #0x1
   53520:	b	53544 <floatformat_from_double@@Base+0x198>
   53524:	cmp	w9, #0x1f
   53528:	b.hi	5353c <floatformat_from_double@@Base+0x190>  // b.pmore
   5352c:	sub	w8, w24, w9
   53530:	lsr	x5, x27, x8
   53534:	mov	w22, w26
   53538:	b	53544 <floatformat_from_double@@Base+0x198>
   5353c:	mov	w22, #0x20                  	// #32
   53540:	mov	x5, x27
   53544:	ldp	w1, w2, [x20]
   53548:	mov	x0, x19
   5354c:	mov	w3, w21
   53550:	mov	w4, w22
   53554:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   53558:	sub	w26, w26, w22
   5355c:	cmp	w26, #0x1
   53560:	b.lt	53444 <floatformat_from_double@@Base+0x98>  // b.tstop
   53564:	ldr	w8, [x20, #32]
   53568:	fmov	d0, x25
   5356c:	fmul	d0, d8, d0
   53570:	ucvtf	d1, x27
   53574:	fsub	d8, d0, d1
   53578:	add	w21, w22, w21
   5357c:	b	534e8 <floatformat_from_double@@Base+0x13c>
   53580:	ldp	w1, w2, [x20]
   53584:	ldp	w3, w4, [x20, #12]
   53588:	ldr	w5, [x20, #24]
   5358c:	mov	x0, x19
   53590:	bl	535a8 <floatformat_from_double@@Base+0x1fc>
   53594:	ldp	w1, w2, [x20]
   53598:	ldr	w3, [x20, #28]
   5359c:	mov	w4, #0x20                  	// #32
   535a0:	mov	w5, #0x1                   	// #1
   535a4:	b	5343c <floatformat_from_double@@Base+0x90>
   535a8:	add	w9, w4, w3
   535ac:	cmp	w1, #0x0
   535b0:	mov	w10, #0x1                   	// #1
   535b4:	sub	w11, w2, w9
   535b8:	sub	w12, w9, #0x1
   535bc:	cneg	w9, w10, ne  // ne = any
   535c0:	csel	w10, w11, w12, eq  // eq = none
   535c4:	and	w12, w11, #0x7
   535c8:	add	w11, w12, w4
   535cc:	mov	w8, #0x8                   	// #8
   535d0:	cmp	w11, #0x8
   535d4:	lsr	w10, w10, #3
   535d8:	csel	w13, w11, w8, cc  // cc = lo, ul, last
   535dc:	mov	w11, #0xffffffff            	// #-1
   535e0:	sub	w13, w13, w12
   535e4:	ldrb	w14, [x0, w10, uxtw]
   535e8:	lsl	x15, x5, x12
   535ec:	lsr	x5, x5, x13
   535f0:	sub	w4, w4, w13
   535f4:	lsl	w13, w11, w13
   535f8:	mvn	w13, w13
   535fc:	lsl	w12, w13, w12
   53600:	bic	w13, w14, w12
   53604:	and	w12, w15, w12
   53608:	cmp	w4, #0x8
   5360c:	orr	w12, w12, w13
   53610:	strb	w12, [x0, w10, uxtw]
   53614:	add	w10, w10, w9
   53618:	csel	w13, w4, w8, cc  // cc = lo, ul, last
   5361c:	mov	w12, wzr
   53620:	cbnz	w4, 535e0 <floatformat_from_double@@Base+0x234>
   53624:	ret

0000000000053628 <floatformat_is_valid@@Base>:
   53628:	ldr	x2, [x0, #48]
   5362c:	br	x2

0000000000053630 <xmalloc_set_program_name@@Base>:
   53630:	stp	x29, x30, [sp, #-32]!
   53634:	str	x19, [sp, #16]
   53638:	adrp	x19, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   5363c:	ldr	x8, [x19, #1120]
   53640:	adrp	x9, ed000 <aarch64_opcode_table@@Base+0x555c0>
   53644:	mov	x29, sp
   53648:	str	x0, [x9, #1592]
   5364c:	cbnz	x8, 5365c <xmalloc_set_program_name@@Base+0x2c>
   53650:	mov	x0, xzr
   53654:	bl	35250 <sbrk@plt>
   53658:	str	x0, [x19, #1120]
   5365c:	ldr	x19, [sp, #16]
   53660:	ldp	x29, x30, [sp], #32
   53664:	ret

0000000000053668 <xmalloc_failed@@Base>:
   53668:	stp	x29, x30, [sp, #-48]!
   5366c:	stp	x20, x19, [sp, #32]
   53670:	adrp	x20, 102000 <aarch64_opcode_table@@Base+0x6a5c0>
   53674:	str	x21, [sp, #16]
   53678:	ldr	x21, [x20, #1120]
   5367c:	mov	x19, x0
   53680:	mov	x0, xzr
   53684:	mov	x29, sp
   53688:	bl	35250 <sbrk@plt>
   5368c:	adrp	x9, 96000 <aarch64_operands@@Base+0x16c38>
   53690:	ldr	x8, [x20, #1120]
   53694:	ldr	x9, [x9, #4008]
   53698:	adrp	x10, ed000 <aarch64_opcode_table@@Base+0x555c0>
   5369c:	ldr	x2, [x10, #1592]
   536a0:	adrp	x10, 96000 <aarch64_operands@@Base+0x16c38>
   536a4:	cmp	x21, #0x0
   536a8:	ldr	x10, [x10, #3840]
   536ac:	csel	x8, x9, x8, eq  // eq = none
   536b0:	sub	x5, x0, x8
   536b4:	ldrb	w8, [x2]
   536b8:	ldr	x0, [x10]
   536bc:	adrp	x9, 69000 <fields@@Base+0x12e84>
   536c0:	adrp	x10, 55000 <xexit@@Base+0x184c>
   536c4:	add	x9, x9, #0x89c
   536c8:	add	x10, x10, #0xda7
   536cc:	cmp	w8, #0x0
   536d0:	adrp	x1, 6b000 <fields@@Base+0x14e84>
   536d4:	csel	x3, x10, x9, eq  // eq = none
   536d8:	add	x1, x1, #0xcac
   536dc:	mov	x4, x19
   536e0:	bl	35c30 <fprintf@plt>
   536e4:	mov	w0, #0x1                   	// #1
   536e8:	bl	35a20 <xexit@plt>

00000000000536ec <xmalloc@@Base>:
   536ec:	stp	x29, x30, [sp, #-32]!
   536f0:	cmp	x0, #0x0
   536f4:	str	x19, [sp, #16]
   536f8:	csinc	x19, x0, xzr, ne  // ne = any
   536fc:	mov	x0, x19
   53700:	mov	x29, sp
   53704:	bl	354d0 <malloc@plt>
   53708:	cbz	x0, 53718 <xmalloc@@Base+0x2c>
   5370c:	ldr	x19, [sp, #16]
   53710:	ldp	x29, x30, [sp], #32
   53714:	ret
   53718:	mov	x0, x19
   5371c:	bl	35a70 <xmalloc_failed@plt>

0000000000053720 <xcalloc@@Base>:
   53720:	stp	x29, x30, [sp, #-32]!
   53724:	cmp	x0, #0x0
   53728:	cset	w8, eq  // eq = none
   5372c:	cmp	x1, #0x0
   53730:	cset	w9, eq  // eq = none
   53734:	orr	w8, w8, w9
   53738:	cmp	w8, #0x0
   5373c:	stp	x20, x19, [sp, #16]
   53740:	csinc	x19, x1, xzr, eq  // eq = none
   53744:	csinc	x20, x0, xzr, eq  // eq = none
   53748:	mov	x0, x20
   5374c:	mov	x1, x19
   53750:	mov	x29, sp
   53754:	bl	35600 <calloc@plt>
   53758:	cbz	x0, 53768 <xcalloc@@Base+0x48>
   5375c:	ldp	x20, x19, [sp, #16]
   53760:	ldp	x29, x30, [sp], #32
   53764:	ret
   53768:	mul	x0, x20, x19
   5376c:	bl	35a70 <xmalloc_failed@plt>

0000000000053770 <xrealloc@@Base>:
   53770:	stp	x29, x30, [sp, #-32]!
   53774:	cmp	x1, #0x0
   53778:	str	x19, [sp, #16]
   5377c:	csinc	x19, x1, xzr, ne  // ne = any
   53780:	mov	x29, sp
   53784:	cbz	x0, 537a0 <xrealloc@@Base+0x30>
   53788:	mov	x1, x19
   5378c:	bl	35680 <realloc@plt>
   53790:	cbz	x0, 537ac <xrealloc@@Base+0x3c>
   53794:	ldr	x19, [sp, #16]
   53798:	ldp	x29, x30, [sp], #32
   5379c:	ret
   537a0:	mov	x0, x19
   537a4:	bl	354d0 <malloc@plt>
   537a8:	cbnz	x0, 53794 <xrealloc@@Base+0x24>
   537ac:	mov	x0, x19
   537b0:	bl	35a70 <xmalloc_failed@plt>

00000000000537b4 <xexit@@Base>:
   537b4:	stp	x29, x30, [sp, #-32]!
   537b8:	str	x19, [sp, #16]
   537bc:	adrp	x8, 96000 <aarch64_operands@@Base+0x16c38>
   537c0:	ldr	x8, [x8, #3984]
   537c4:	mov	w19, w0
   537c8:	mov	x29, sp
   537cc:	ldr	x8, [x8]
   537d0:	cbz	x8, 537d8 <xexit@@Base+0x24>
   537d4:	blr	x8
   537d8:	mov	w0, w19
   537dc:	bl	351e0 <exit@plt>

Disassembly of section .fini:

00000000000537e0 <.fini>:
   537e0:	stp	x29, x30, [sp, #-16]!
   537e4:	mov	x29, sp
   537e8:	ldp	x29, x30, [sp], #16
   537ec:	ret
