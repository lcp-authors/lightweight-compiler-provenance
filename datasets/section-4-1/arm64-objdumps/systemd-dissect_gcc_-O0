
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-dissect_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401170 <_init>:
  401170:	stp	x29, x30, [sp, #-16]!
  401174:	mov	x29, sp
  401178:	bl	401430 <call_weak_fn>
  40117c:	ldp	x29, x30, [sp], #16
  401180:	ret

Disassembly of section .plt:

0000000000401190 <.plt>:
  401190:	stp	x16, x30, [sp, #-16]!
  401194:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401198:	ldr	x17, [x16, #3792]
  40119c:	add	x16, x16, #0xed0
  4011a0:	br	x17
  4011a4:	nop
  4011a8:	nop
  4011ac:	nop

00000000004011b0 <root_hash_load@plt>:
  4011b0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4011b4:	ldr	x17, [x16, #3800]
  4011b8:	add	x16, x16, #0xed8
  4011bc:	br	x17

00000000004011c0 <architecture_to_string@plt>:
  4011c0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4011c4:	ldr	x17, [x16, #3808]
  4011c8:	add	x16, x16, #0xee0
  4011cc:	br	x17

00000000004011d0 <__libc_start_main@plt>:
  4011d0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4011d4:	ldr	x17, [x16, #3816]
  4011d8:	add	x16, x16, #0xee8
  4011dc:	br	x17

00000000004011e0 <__gmon_start__@plt>:
  4011e0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4011e4:	ldr	x17, [x16, #3824]
  4011e8:	add	x16, x16, #0xef0
  4011ec:	br	x17

00000000004011f0 <polkit_agent_close@plt>:
  4011f0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4011f4:	ldr	x17, [x16, #3832]
  4011f8:	add	x16, x16, #0xef8
  4011fc:	br	x17

0000000000401200 <log_parse_environment_realm@plt>:
  401200:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401204:	ldr	x17, [x16, #3840]
  401208:	add	x16, x16, #0xf00
  40120c:	br	x17

0000000000401210 <putchar@plt>:
  401210:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401214:	ldr	x17, [x16, #3848]
  401218:	add	x16, x16, #0xf08
  40121c:	br	x17

0000000000401220 <loop_device_unref@plt>:
  401220:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401224:	ldr	x17, [x16, #3856]
  401228:	add	x16, x16, #0xf10
  40122c:	br	x17

0000000000401230 <loop_device_relinquish@plt>:
  401230:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401234:	ldr	x17, [x16, #3864]
  401238:	add	x16, x16, #0xf18
  40123c:	br	x17

0000000000401240 <loop_device_make_by_path@plt>:
  401240:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401244:	ldr	x17, [x16, #3872]
  401248:	add	x16, x16, #0xf20
  40124c:	br	x17

0000000000401250 <log_assert_failed_realm@plt>:
  401250:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401254:	ldr	x17, [x16, #3880]
  401258:	add	x16, x16, #0xf28
  40125c:	br	x17

0000000000401260 <getopt_long@plt>:
  401260:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401264:	ldr	x17, [x16, #3888]
  401268:	add	x16, x16, #0xf30
  40126c:	br	x17

0000000000401270 <dissected_image_decrypt_interactively@plt>:
  401270:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401274:	ldr	x17, [x16, #3896]
  401278:	add	x16, x16, #0xf38
  40127c:	br	x17

0000000000401280 <log_assert_failed_unreachable_realm@plt>:
  401280:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401284:	ldr	x17, [x16, #3904]
  401288:	add	x16, x16, #0xf40
  40128c:	br	x17

0000000000401290 <abort@plt>:
  401290:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401294:	ldr	x17, [x16, #3912]
  401298:	add	x16, x16, #0xf48
  40129c:	br	x17

00000000004012a0 <decrypted_image_unref@plt>:
  4012a0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012a4:	ldr	x17, [x16, #3920]
  4012a8:	add	x16, x16, #0xf50
  4012ac:	br	x17

00000000004012b0 <dissected_image_acquire_metadata@plt>:
  4012b0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012b4:	ldr	x17, [x16, #3928]
  4012b8:	add	x16, x16, #0xf58
  4012bc:	br	x17

00000000004012c0 <__stack_chk_fail@plt>:
  4012c0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012c4:	ldr	x17, [x16, #3936]
  4012c8:	add	x16, x16, #0xf60
  4012cc:	br	x17

00000000004012d0 <ask_password_agent_close@plt>:
  4012d0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012d4:	ldr	x17, [x16, #3944]
  4012d8:	add	x16, x16, #0xf68
  4012dc:	br	x17

00000000004012e0 <version@plt>:
  4012e0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012e4:	ldr	x17, [x16, #3952]
  4012e8:	add	x16, x16, #0xf70
  4012ec:	br	x17

00000000004012f0 <pager_close@plt>:
  4012f0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4012f4:	ldr	x17, [x16, #3960]
  4012f8:	add	x16, x16, #0xf78
  4012fc:	br	x17

0000000000401300 <log_internal_realm@plt>:
  401300:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401304:	ldr	x17, [x16, #3968]
  401308:	add	x16, x16, #0xf80
  40130c:	br	x17

0000000000401310 <unhexmem_full@plt>:
  401310:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401314:	ldr	x17, [x16, #3976]
  401318:	add	x16, x16, #0xf88
  40131c:	br	x17

0000000000401320 <strcmp@plt>:
  401320:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401324:	ldr	x17, [x16, #3984]
  401328:	add	x16, x16, #0xf90
  40132c:	br	x17

0000000000401330 <dissected_image_mount@plt>:
  401330:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401334:	ldr	x17, [x16, #3992]
  401338:	add	x16, x16, #0xf98
  40133c:	br	x17

0000000000401340 <dissected_image_unref@plt>:
  401340:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401344:	ldr	x17, [x16, #4000]
  401348:	add	x16, x16, #0xfa0
  40134c:	br	x17

0000000000401350 <partition_designator_to_string@plt>:
  401350:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401354:	ldr	x17, [x16, #4008]
  401358:	add	x16, x16, #0xfa8
  40135c:	br	x17

0000000000401360 <free@plt>:
  401360:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401364:	ldr	x17, [x16, #4016]
  401368:	add	x16, x16, #0xfb0
  40136c:	br	x17

0000000000401370 <mac_selinux_finish@plt>:
  401370:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401374:	ldr	x17, [x16, #4024]
  401378:	add	x16, x16, #0xfb8
  40137c:	br	x17

0000000000401380 <printf@plt>:
  401380:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401384:	ldr	x17, [x16, #4032]
  401388:	add	x16, x16, #0xfc0
  40138c:	br	x17

0000000000401390 <strlen@plt>:
  401390:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  401394:	ldr	x17, [x16, #4040]
  401398:	add	x16, x16, #0xfc8
  40139c:	br	x17

00000000004013a0 <decrypted_image_relinquish@plt>:
  4013a0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4013a4:	ldr	x17, [x16, #4048]
  4013a8:	add	x16, x16, #0xfd0
  4013ac:	br	x17

00000000004013b0 <log_open@plt>:
  4013b0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4013b4:	ldr	x17, [x16, #4056]
  4013b8:	add	x16, x16, #0xfd8
  4013bc:	br	x17

00000000004013c0 <dissect_image_and_warn@plt>:
  4013c0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4013c4:	ldr	x17, [x16, #4064]
  4013c8:	add	x16, x16, #0xfe0
  4013cc:	br	x17

00000000004013d0 <log_get_max_level_realm@plt>:
  4013d0:	adrp	x16, 413000 <__FRAME_END__+0xf920>
  4013d4:	ldr	x17, [x16, #4072]
  4013d8:	add	x16, x16, #0xfe8
  4013dc:	br	x17

Disassembly of section .text:

00000000004013e0 <_start>:
  4013e0:	mov	x29, #0x0                   	// #0
  4013e4:	mov	x30, #0x0                   	// #0
  4013e8:	mov	x5, x0
  4013ec:	ldr	x1, [sp]
  4013f0:	add	x2, sp, #0x8
  4013f4:	mov	x6, sp
  4013f8:	movz	x0, #0x0, lsl #48
  4013fc:	movk	x0, #0x0, lsl #32
  401400:	movk	x0, #0x40, lsl #16
  401404:	movk	x0, #0x2ba8
  401408:	movz	x3, #0x0, lsl #48
  40140c:	movk	x3, #0x0, lsl #32
  401410:	movk	x3, #0x40, lsl #16
  401414:	movk	x3, #0x2bf8
  401418:	movz	x4, #0x0, lsl #48
  40141c:	movk	x4, #0x0, lsl #32
  401420:	movk	x4, #0x40, lsl #16
  401424:	movk	x4, #0x2c78
  401428:	bl	4011d0 <__libc_start_main@plt>
  40142c:	bl	401290 <abort@plt>

0000000000401430 <call_weak_fn>:
  401430:	adrp	x0, 413000 <__FRAME_END__+0xf920>
  401434:	ldr	x0, [x0, #4088]
  401438:	cbz	x0, 401440 <call_weak_fn+0x10>
  40143c:	b	4011e0 <__gmon_start__@plt>
  401440:	ret

0000000000401444 <deregister_tm_clones>:
  401444:	stp	x29, x30, [sp, #-32]!
  401448:	mov	x29, sp
  40144c:	adrp	x0, 414000 <arg_flags>
  401450:	add	x0, x0, #0x8
  401454:	str	x0, [sp, #24]
  401458:	ldr	x0, [sp, #24]
  40145c:	str	x0, [sp, #24]
  401460:	ldr	x1, [sp, #24]
  401464:	adrp	x0, 414000 <arg_flags>
  401468:	add	x0, x0, #0x8
  40146c:	cmp	x1, x0
  401470:	b.eq	4014ac <deregister_tm_clones+0x68>  // b.none
  401474:	adrp	x0, 402000 <parse_argv+0x75c>
  401478:	add	x0, x0, #0xc90
  40147c:	ldr	x0, [x0]
  401480:	str	x0, [sp, #16]
  401484:	ldr	x0, [sp, #16]
  401488:	str	x0, [sp, #16]
  40148c:	ldr	x0, [sp, #16]
  401490:	cmp	x0, #0x0
  401494:	b.eq	4014b0 <deregister_tm_clones+0x6c>  // b.none
  401498:	ldr	x1, [sp, #16]
  40149c:	adrp	x0, 414000 <arg_flags>
  4014a0:	add	x0, x0, #0x8
  4014a4:	blr	x1
  4014a8:	b	4014b0 <deregister_tm_clones+0x6c>
  4014ac:	nop
  4014b0:	ldp	x29, x30, [sp], #32
  4014b4:	ret

00000000004014b8 <register_tm_clones>:
  4014b8:	stp	x29, x30, [sp, #-48]!
  4014bc:	mov	x29, sp
  4014c0:	adrp	x0, 414000 <arg_flags>
  4014c4:	add	x0, x0, #0x8
  4014c8:	str	x0, [sp, #40]
  4014cc:	ldr	x0, [sp, #40]
  4014d0:	str	x0, [sp, #40]
  4014d4:	ldr	x1, [sp, #40]
  4014d8:	adrp	x0, 414000 <arg_flags>
  4014dc:	add	x0, x0, #0x8
  4014e0:	sub	x0, x1, x0
  4014e4:	asr	x0, x0, #3
  4014e8:	lsr	x1, x0, #63
  4014ec:	add	x0, x1, x0
  4014f0:	asr	x0, x0, #1
  4014f4:	str	x0, [sp, #32]
  4014f8:	ldr	x0, [sp, #32]
  4014fc:	cmp	x0, #0x0
  401500:	b.eq	401540 <register_tm_clones+0x88>  // b.none
  401504:	adrp	x0, 402000 <parse_argv+0x75c>
  401508:	add	x0, x0, #0xc98
  40150c:	ldr	x0, [x0]
  401510:	str	x0, [sp, #24]
  401514:	ldr	x0, [sp, #24]
  401518:	str	x0, [sp, #24]
  40151c:	ldr	x0, [sp, #24]
  401520:	cmp	x0, #0x0
  401524:	b.eq	401544 <register_tm_clones+0x8c>  // b.none
  401528:	ldr	x2, [sp, #24]
  40152c:	ldr	x1, [sp, #32]
  401530:	adrp	x0, 414000 <arg_flags>
  401534:	add	x0, x0, #0x8
  401538:	blr	x2
  40153c:	b	401544 <register_tm_clones+0x8c>
  401540:	nop
  401544:	ldp	x29, x30, [sp], #48
  401548:	ret

000000000040154c <__do_global_dtors_aux>:
  40154c:	stp	x29, x30, [sp, #-16]!
  401550:	mov	x29, sp
  401554:	adrp	x0, 414000 <arg_flags>
  401558:	add	x0, x0, #0x28
  40155c:	ldrb	w0, [x0]
  401560:	and	x0, x0, #0xff
  401564:	cmp	x0, #0x0
  401568:	b.ne	401584 <__do_global_dtors_aux+0x38>  // b.any
  40156c:	bl	401444 <deregister_tm_clones>
  401570:	adrp	x0, 414000 <arg_flags>
  401574:	add	x0, x0, #0x28
  401578:	mov	w1, #0x1                   	// #1
  40157c:	strb	w1, [x0]
  401580:	b	401588 <__do_global_dtors_aux+0x3c>
  401584:	nop
  401588:	ldp	x29, x30, [sp], #16
  40158c:	ret

0000000000401590 <frame_dummy>:
  401590:	stp	x29, x30, [sp, #-16]!
  401594:	mov	x29, sp
  401598:	bl	4014b8 <register_tm_clones>
  40159c:	nop
  4015a0:	ldp	x29, x30, [sp], #16
  4015a4:	ret

00000000004015a8 <ALIGN_TO>:
  4015a8:	sub	sp, sp, #0x10
  4015ac:	str	x0, [sp, #8]
  4015b0:	str	x1, [sp]
  4015b4:	ldr	x1, [sp, #8]
  4015b8:	ldr	x0, [sp]
  4015bc:	add	x0, x1, x0
  4015c0:	sub	x1, x0, #0x1
  4015c4:	ldr	x0, [sp]
  4015c8:	neg	x0, x0
  4015cc:	and	x0, x1, x0
  4015d0:	add	sp, sp, #0x10
  4015d4:	ret

00000000004015d8 <save_argc_argv>:
  4015d8:	sub	sp, sp, #0x10
  4015dc:	str	w0, [sp, #12]
  4015e0:	str	x1, [sp]
  4015e4:	adrp	x0, 414000 <arg_flags>
  4015e8:	add	x0, x0, #0x1c
  4015ec:	ldr	w1, [sp, #12]
  4015f0:	str	w1, [x0]
  4015f4:	adrp	x0, 414000 <arg_flags>
  4015f8:	add	x0, x0, #0x8
  4015fc:	ldr	x1, [sp]
  401600:	str	x1, [x0]
  401604:	nop
  401608:	add	sp, sp, #0x10
  40160c:	ret

0000000000401610 <sd_id128_is_null>:
  401610:	sub	sp, sp, #0x10
  401614:	stp	x0, x1, [sp]
  401618:	ldr	x0, [sp]
  40161c:	cmp	x0, #0x0
  401620:	b.ne	401638 <sd_id128_is_null+0x28>  // b.any
  401624:	ldr	x0, [sp, #8]
  401628:	cmp	x0, #0x0
  40162c:	b.ne	401638 <sd_id128_is_null+0x28>  // b.any
  401630:	mov	w0, #0x1                   	// #1
  401634:	b	40163c <sd_id128_is_null+0x2c>
  401638:	mov	w0, #0x0                   	// #0
  40163c:	add	sp, sp, #0x10
  401640:	ret

0000000000401644 <PARTITION_VERITY_OF>:
  401644:	sub	sp, sp, #0x10
  401648:	str	w0, [sp, #12]
  40164c:	ldr	w0, [sp, #12]
  401650:	cmp	w0, #0x0
  401654:	b.ne	401660 <PARTITION_VERITY_OF+0x1c>  // b.any
  401658:	mov	w0, #0x7                   	// #7
  40165c:	b	401678 <PARTITION_VERITY_OF+0x34>
  401660:	ldr	w0, [sp, #12]
  401664:	cmp	w0, #0x1
  401668:	b.ne	401674 <PARTITION_VERITY_OF+0x30>  // b.any
  40166c:	mov	w0, #0x8                   	// #8
  401670:	b	401678 <PARTITION_VERITY_OF+0x34>
  401674:	mov	w0, #0xffffffff            	// #-1
  401678:	add	sp, sp, #0x10
  40167c:	ret

0000000000401680 <dissected_image_unrefp>:
  401680:	stp	x29, x30, [sp, #-32]!
  401684:	mov	x29, sp
  401688:	str	x0, [sp, #24]
  40168c:	ldr	x0, [sp, #24]
  401690:	ldr	x0, [x0]
  401694:	cmp	x0, #0x0
  401698:	b.eq	4016a8 <dissected_image_unrefp+0x28>  // b.none
  40169c:	ldr	x0, [sp, #24]
  4016a0:	ldr	x0, [x0]
  4016a4:	bl	401340 <dissected_image_unref@plt>
  4016a8:	nop
  4016ac:	ldp	x29, x30, [sp], #32
  4016b0:	ret

00000000004016b4 <decrypted_image_unrefp>:
  4016b4:	stp	x29, x30, [sp, #-32]!
  4016b8:	mov	x29, sp
  4016bc:	str	x0, [sp, #24]
  4016c0:	ldr	x0, [sp, #24]
  4016c4:	ldr	x0, [x0]
  4016c8:	cmp	x0, #0x0
  4016cc:	b.eq	4016dc <decrypted_image_unrefp+0x28>  // b.none
  4016d0:	ldr	x0, [sp, #24]
  4016d4:	ldr	x0, [x0]
  4016d8:	bl	4012a0 <decrypted_image_unref@plt>
  4016dc:	nop
  4016e0:	ldp	x29, x30, [sp], #32
  4016e4:	ret

00000000004016e8 <unhexmem>:
  4016e8:	stp	x29, x30, [sp, #-48]!
  4016ec:	mov	x29, sp
  4016f0:	str	x0, [sp, #40]
  4016f4:	str	x1, [sp, #32]
  4016f8:	str	x2, [sp, #24]
  4016fc:	str	x3, [sp, #16]
  401700:	ldr	x4, [sp, #16]
  401704:	ldr	x3, [sp, #24]
  401708:	mov	w2, #0x0                   	// #0
  40170c:	ldr	x1, [sp, #32]
  401710:	ldr	x0, [sp, #40]
  401714:	bl	401310 <unhexmem_full@plt>
  401718:	ldp	x29, x30, [sp], #48
  40171c:	ret

0000000000401720 <loop_device_unrefp>:
  401720:	stp	x29, x30, [sp, #-32]!
  401724:	mov	x29, sp
  401728:	str	x0, [sp, #24]
  40172c:	ldr	x0, [sp, #24]
  401730:	ldr	x0, [x0]
  401734:	cmp	x0, #0x0
  401738:	b.eq	401748 <loop_device_unrefp+0x28>  // b.none
  40173c:	ldr	x0, [sp, #24]
  401740:	ldr	x0, [x0]
  401744:	bl	401220 <loop_device_unref@plt>
  401748:	nop
  40174c:	ldp	x29, x30, [sp], #32
  401750:	ret

0000000000401754 <freep>:
  401754:	stp	x29, x30, [sp, #-32]!
  401758:	mov	x29, sp
  40175c:	str	x0, [sp, #24]
  401760:	ldr	x0, [sp, #24]
  401764:	ldr	x0, [x0]
  401768:	bl	401360 <free@plt>
  40176c:	nop
  401770:	ldp	x29, x30, [sp], #32
  401774:	ret

0000000000401778 <static_destruct>:
  401778:	stp	x29, x30, [sp, #-32]!
  40177c:	mov	x29, sp
  401780:	adrp	x0, 403000 <_fini+0x384>
  401784:	add	x0, x0, #0x228
  401788:	ldr	x0, [x0]
  40178c:	cmp	x0, #0x0
  401790:	b.eq	4017f4 <static_destruct+0x7c>  // b.none
  401794:	adrp	x0, 403000 <_fini+0x384>
  401798:	add	x0, x0, #0x228
  40179c:	ldr	x0, [x0]
  4017a0:	mov	x1, #0x8                   	// #8
  4017a4:	bl	4015a8 <ALIGN_TO>
  4017a8:	str	x0, [sp, #24]
  4017ac:	b	4017d8 <static_destruct+0x60>
  4017b0:	ldr	x0, [sp, #24]
  4017b4:	ldr	x1, [x0, #8]
  4017b8:	ldr	x0, [sp, #24]
  4017bc:	ldr	x0, [x0]
  4017c0:	blr	x1
  4017c4:	ldr	x0, [sp, #24]
  4017c8:	add	x0, x0, #0x10
  4017cc:	mov	x1, #0x8                   	// #8
  4017d0:	bl	4015a8 <ALIGN_TO>
  4017d4:	str	x0, [sp, #24]
  4017d8:	ldr	x1, [sp, #24]
  4017dc:	adrp	x0, 403000 <_fini+0x384>
  4017e0:	add	x0, x0, #0x230
  4017e4:	ldr	x0, [x0]
  4017e8:	cmp	x1, x0
  4017ec:	b.cc	4017b0 <static_destruct+0x38>  // b.lo, b.ul, b.last
  4017f0:	b	4017f8 <static_destruct+0x80>
  4017f4:	nop
  4017f8:	ldp	x29, x30, [sp], #32
  4017fc:	ret

0000000000401800 <strv_isempty>:
  401800:	sub	sp, sp, #0x10
  401804:	str	x0, [sp, #8]
  401808:	ldr	x0, [sp, #8]
  40180c:	cmp	x0, #0x0
  401810:	b.eq	401824 <strv_isempty+0x24>  // b.none
  401814:	ldr	x0, [sp, #8]
  401818:	ldr	x0, [x0]
  40181c:	cmp	x0, #0x0
  401820:	b.ne	40182c <strv_isempty+0x2c>  // b.any
  401824:	mov	w0, #0x1                   	// #1
  401828:	b	401830 <strv_isempty+0x30>
  40182c:	mov	w0, #0x0                   	// #0
  401830:	and	w0, w0, #0x1
  401834:	and	w0, w0, #0xff
  401838:	add	sp, sp, #0x10
  40183c:	ret

0000000000401840 <__unique_prefix_static_destructor_wrapper0>:
  401840:	stp	x29, x30, [sp, #-48]!
  401844:	mov	x29, sp
  401848:	str	x0, [sp, #24]
  40184c:	ldr	x0, [sp, #24]
  401850:	str	x0, [sp, #40]
  401854:	ldr	x0, [sp, #40]
  401858:	bl	401754 <freep>
  40185c:	nop
  401860:	ldp	x29, x30, [sp], #48
  401864:	ret

0000000000401868 <help>:
  401868:	stp	x29, x30, [sp, #-16]!
  40186c:	mov	x29, sp
  401870:	adrp	x0, 414000 <arg_flags>
  401874:	add	x0, x0, #0x10
  401878:	ldr	x1, [x0]
  40187c:	adrp	x0, 414000 <arg_flags>
  401880:	add	x0, x0, #0x10
  401884:	ldr	x0, [x0]
  401888:	mov	x2, x0
  40188c:	adrp	x0, 402000 <parse_argv+0x75c>
  401890:	add	x0, x0, #0xca0
  401894:	bl	401380 <printf@plt>
  401898:	nop
  40189c:	ldp	x29, x30, [sp], #16
  4018a0:	ret

00000000004018a4 <parse_argv>:
  4018a4:	stp	x29, x30, [sp, #-144]!
  4018a8:	mov	x29, sp
  4018ac:	str	x19, [sp, #16]
  4018b0:	str	w0, [sp, #44]
  4018b4:	str	x1, [sp, #32]
  4018b8:	adrp	x0, 413000 <__FRAME_END__+0xf920>
  4018bc:	add	x0, x0, #0xc88
  4018c0:	ldr	x1, [x0]
  4018c4:	str	x1, [sp, #136]
  4018c8:	mov	x1, #0x0                   	// #0
  4018cc:	ldr	w0, [sp, #44]
  4018d0:	lsr	w0, w0, #31
  4018d4:	and	w0, w0, #0xff
  4018d8:	and	x0, x0, #0xff
  4018dc:	cmp	x0, #0x0
  4018e0:	b.eq	40190c <parse_argv+0x68>  // b.none
  4018e4:	adrp	x0, 402000 <parse_argv+0x75c>
  4018e8:	add	x1, x0, #0xe3b
  4018ec:	adrp	x0, 403000 <_fini+0x384>
  4018f0:	add	x4, x0, #0x238
  4018f4:	mov	w3, #0x40                  	// #64
  4018f8:	mov	x2, x1
  4018fc:	adrp	x0, 402000 <parse_argv+0x75c>
  401900:	add	x1, x0, #0xe58
  401904:	mov	w0, #0x0                   	// #0
  401908:	bl	401250 <log_assert_failed_realm@plt>
  40190c:	ldr	x0, [sp, #32]
  401910:	cmp	x0, #0x0
  401914:	cset	w0, eq  // eq = none
  401918:	and	w0, w0, #0xff
  40191c:	and	x0, x0, #0xff
  401920:	cmp	x0, #0x0
  401924:	b.eq	401d90 <parse_argv+0x4ec>  // b.none
  401928:	adrp	x0, 402000 <parse_argv+0x75c>
  40192c:	add	x1, x0, #0xe3b
  401930:	adrp	x0, 403000 <_fini+0x384>
  401934:	add	x4, x0, #0x238
  401938:	mov	w3, #0x41                  	// #65
  40193c:	mov	x2, x1
  401940:	adrp	x0, 402000 <parse_argv+0x75c>
  401944:	add	x1, x0, #0xe68
  401948:	mov	w0, #0x0                   	// #0
  40194c:	bl	401250 <log_assert_failed_realm@plt>
  401950:	ldr	w0, [sp, #52]
  401954:	cmp	w0, #0x102
  401958:	b.eq	401ba8 <parse_argv+0x304>  // b.none
  40195c:	ldr	w0, [sp, #52]
  401960:	cmp	w0, #0x102
  401964:	b.gt	401d68 <parse_argv+0x4c4>
  401968:	ldr	w0, [sp, #52]
  40196c:	cmp	w0, #0x101
  401970:	b.eq	401a28 <parse_argv+0x184>  // b.none
  401974:	ldr	w0, [sp, #52]
  401978:	cmp	w0, #0x101
  40197c:	b.gt	401d68 <parse_argv+0x4c4>
  401980:	ldr	w0, [sp, #52]
  401984:	cmp	w0, #0x100
  401988:	b.eq	4019ec <parse_argv+0x148>  // b.none
  40198c:	ldr	w0, [sp, #52]
  401990:	cmp	w0, #0x100
  401994:	b.gt	401d68 <parse_argv+0x4c4>
  401998:	ldr	w0, [sp, #52]
  40199c:	cmp	w0, #0x72
  4019a0:	b.eq	401a08 <parse_argv+0x164>  // b.none
  4019a4:	ldr	w0, [sp, #52]
  4019a8:	cmp	w0, #0x72
  4019ac:	b.gt	401d68 <parse_argv+0x4c4>
  4019b0:	ldr	w0, [sp, #52]
  4019b4:	cmp	w0, #0x6d
  4019b8:	b.eq	4019f4 <parse_argv+0x150>  // b.none
  4019bc:	ldr	w0, [sp, #52]
  4019c0:	cmp	w0, #0x6d
  4019c4:	b.gt	401d68 <parse_argv+0x4c4>
  4019c8:	ldr	w0, [sp, #52]
  4019cc:	cmp	w0, #0x3f
  4019d0:	b.eq	401d60 <parse_argv+0x4bc>  // b.none
  4019d4:	ldr	w0, [sp, #52]
  4019d8:	cmp	w0, #0x68
  4019dc:	b.ne	401d68 <parse_argv+0x4c4>  // b.any
  4019e0:	bl	401868 <help>
  4019e4:	mov	w0, #0x0                   	// #0
  4019e8:	b	402008 <parse_argv+0x764>
  4019ec:	bl	4012e0 <version@plt>
  4019f0:	b	402008 <parse_argv+0x764>
  4019f4:	adrp	x0, 414000 <arg_flags>
  4019f8:	add	x0, x0, #0x2c
  4019fc:	mov	w1, #0x1                   	// #1
  401a00:	str	w1, [x0]
  401a04:	b	401d90 <parse_argv+0x4ec>
  401a08:	adrp	x0, 414000 <arg_flags>
  401a0c:	add	x0, x0, #0x0
  401a10:	ldr	w0, [x0]
  401a14:	orr	w1, w0, #0x1
  401a18:	adrp	x0, 414000 <arg_flags>
  401a1c:	add	x0, x0, #0x0
  401a20:	str	w1, [x0]
  401a24:	b	401d90 <parse_argv+0x4ec>
  401a28:	adrp	x0, 414000 <arg_flags>
  401a2c:	add	x0, x0, #0x20
  401a30:	ldr	x2, [x0]
  401a34:	adrp	x0, 402000 <parse_argv+0x75c>
  401a38:	add	x1, x0, #0xe70
  401a3c:	mov	x0, x2
  401a40:	bl	401320 <strcmp@plt>
  401a44:	cmp	w0, #0x0
  401a48:	b.ne	401a54 <parse_argv+0x1b0>  // b.any
  401a4c:	str	wzr, [sp, #48]
  401a50:	b	401b80 <parse_argv+0x2dc>
  401a54:	adrp	x0, 414000 <arg_flags>
  401a58:	add	x0, x0, #0x20
  401a5c:	ldr	x2, [x0]
  401a60:	adrp	x0, 402000 <parse_argv+0x75c>
  401a64:	add	x1, x0, #0xe80
  401a68:	mov	x0, x2
  401a6c:	bl	401320 <strcmp@plt>
  401a70:	cmp	w0, #0x0
  401a74:	b.ne	401a84 <parse_argv+0x1e0>  // b.any
  401a78:	mov	w0, #0x2                   	// #2
  401a7c:	str	w0, [sp, #48]
  401a80:	b	401b80 <parse_argv+0x2dc>
  401a84:	adrp	x0, 414000 <arg_flags>
  401a88:	add	x0, x0, #0x20
  401a8c:	ldr	x2, [x0]
  401a90:	adrp	x0, 402000 <parse_argv+0x75c>
  401a94:	add	x1, x0, #0xe88
  401a98:	mov	x0, x2
  401a9c:	bl	401320 <strcmp@plt>
  401aa0:	cmp	w0, #0x0
  401aa4:	b.ne	401ab4 <parse_argv+0x210>  // b.any
  401aa8:	mov	w0, #0x6                   	// #6
  401aac:	str	w0, [sp, #48]
  401ab0:	b	401b80 <parse_argv+0x2dc>
  401ab4:	adrp	x0, 414000 <arg_flags>
  401ab8:	add	x0, x0, #0x20
  401abc:	ldr	x2, [x0]
  401ac0:	adrp	x0, 402000 <parse_argv+0x75c>
  401ac4:	add	x1, x0, #0xe90
  401ac8:	mov	x0, x2
  401acc:	bl	401320 <strcmp@plt>
  401ad0:	cmp	w0, #0x0
  401ad4:	b.ne	401ae4 <parse_argv+0x240>  // b.any
  401ad8:	mov	w0, #0xe                   	// #14
  401adc:	str	w0, [sp, #48]
  401ae0:	b	401b80 <parse_argv+0x2dc>
  401ae4:	mov	w0, #0x3                   	// #3
  401ae8:	str	w0, [sp, #108]
  401aec:	mov	w0, #0x16                  	// #22
  401af0:	movk	w0, #0x4000, lsl #16
  401af4:	str	w0, [sp, #112]
  401af8:	str	wzr, [sp, #116]
  401afc:	ldr	w0, [sp, #116]
  401b00:	bl	4013d0 <log_get_max_level_realm@plt>
  401b04:	mov	w1, w0
  401b08:	ldr	w0, [sp, #108]
  401b0c:	and	w0, w0, #0x7
  401b10:	cmp	w1, w0
  401b14:	b.lt	401b68 <parse_argv+0x2c4>  // b.tstop
  401b18:	ldr	w0, [sp, #116]
  401b1c:	lsl	w1, w0, #10
  401b20:	ldr	w0, [sp, #108]
  401b24:	orr	w7, w1, w0
  401b28:	adrp	x0, 402000 <parse_argv+0x75c>
  401b2c:	add	x1, x0, #0xe3b
  401b30:	adrp	x0, 414000 <arg_flags>
  401b34:	add	x0, x0, #0x20
  401b38:	ldr	x0, [x0]
  401b3c:	mov	x6, x0
  401b40:	adrp	x0, 402000 <parse_argv+0x75c>
  401b44:	add	x5, x0, #0xe98
  401b48:	adrp	x0, 403000 <_fini+0x384>
  401b4c:	add	x4, x0, #0x248
  401b50:	mov	w3, #0x62                  	// #98
  401b54:	mov	x2, x1
  401b58:	ldr	w1, [sp, #112]
  401b5c:	mov	w0, w7
  401b60:	bl	401300 <log_internal_realm@plt>
  401b64:	b	402008 <parse_argv+0x764>
  401b68:	ldr	w0, [sp, #112]
  401b6c:	cmp	w0, #0x0
  401b70:	cneg	w0, w0, lt  // lt = tstop
  401b74:	and	w0, w0, #0xff
  401b78:	neg	w0, w0
  401b7c:	b	402008 <parse_argv+0x764>
  401b80:	adrp	x0, 414000 <arg_flags>
  401b84:	add	x0, x0, #0x0
  401b88:	ldr	w0, [x0]
  401b8c:	and	w1, w0, #0xfffffff1
  401b90:	ldr	w0, [sp, #48]
  401b94:	orr	w1, w1, w0
  401b98:	adrp	x0, 414000 <arg_flags>
  401b9c:	add	x0, x0, #0x0
  401ba0:	str	w1, [x0]
  401ba4:	b	401d90 <parse_argv+0x4ec>
  401ba8:	adrp	x0, 414000 <arg_flags>
  401bac:	add	x0, x0, #0x20
  401bb0:	ldr	x19, [x0]
  401bb4:	adrp	x0, 414000 <arg_flags>
  401bb8:	add	x0, x0, #0x20
  401bbc:	ldr	x0, [x0]
  401bc0:	bl	401390 <strlen@plt>
  401bc4:	mov	x4, x0
  401bc8:	add	x1, sp, #0x80
  401bcc:	add	x0, sp, #0x78
  401bd0:	mov	x3, x1
  401bd4:	mov	x2, x0
  401bd8:	mov	x1, x4
  401bdc:	mov	x0, x19
  401be0:	bl	4016e8 <unhexmem>
  401be4:	str	w0, [sp, #80]
  401be8:	ldr	w0, [sp, #80]
  401bec:	cmp	w0, #0x0
  401bf0:	b.ge	401c8c <parse_argv+0x3e8>  // b.tcont
  401bf4:	mov	w0, #0x3                   	// #3
  401bf8:	str	w0, [sp, #96]
  401bfc:	ldr	w0, [sp, #80]
  401c00:	str	w0, [sp, #100]
  401c04:	str	wzr, [sp, #104]
  401c08:	ldr	w0, [sp, #104]
  401c0c:	bl	4013d0 <log_get_max_level_realm@plt>
  401c10:	mov	w1, w0
  401c14:	ldr	w0, [sp, #96]
  401c18:	and	w0, w0, #0x7
  401c1c:	cmp	w1, w0
  401c20:	b.lt	401c74 <parse_argv+0x3d0>  // b.tstop
  401c24:	ldr	w0, [sp, #104]
  401c28:	lsl	w1, w0, #10
  401c2c:	ldr	w0, [sp, #96]
  401c30:	orr	w7, w1, w0
  401c34:	adrp	x0, 402000 <parse_argv+0x75c>
  401c38:	add	x1, x0, #0xe3b
  401c3c:	adrp	x0, 414000 <arg_flags>
  401c40:	add	x0, x0, #0x20
  401c44:	ldr	x0, [x0]
  401c48:	mov	x6, x0
  401c4c:	adrp	x0, 402000 <parse_argv+0x75c>
  401c50:	add	x5, x0, #0xec0
  401c54:	adrp	x0, 403000 <_fini+0x384>
  401c58:	add	x4, x0, #0x248
  401c5c:	mov	w3, #0x70                  	// #112
  401c60:	mov	x2, x1
  401c64:	ldr	w1, [sp, #100]
  401c68:	mov	w0, w7
  401c6c:	bl	401300 <log_internal_realm@plt>
  401c70:	b	402008 <parse_argv+0x764>
  401c74:	ldr	w0, [sp, #100]
  401c78:	cmp	w0, #0x0
  401c7c:	cneg	w0, w0, lt  // lt = tstop
  401c80:	and	w0, w0, #0xff
  401c84:	neg	w0, w0
  401c88:	b	402008 <parse_argv+0x764>
  401c8c:	ldr	x0, [sp, #128]
  401c90:	cmp	x0, #0xf
  401c94:	b.hi	401d2c <parse_argv+0x488>  // b.pmore
  401c98:	mov	w0, #0x3                   	// #3
  401c9c:	str	w0, [sp, #84]
  401ca0:	str	wzr, [sp, #88]
  401ca4:	str	wzr, [sp, #92]
  401ca8:	ldr	w0, [sp, #92]
  401cac:	bl	4013d0 <log_get_max_level_realm@plt>
  401cb0:	mov	w1, w0
  401cb4:	ldr	w0, [sp, #84]
  401cb8:	and	w0, w0, #0x7
  401cbc:	cmp	w1, w0
  401cc0:	b.lt	401d14 <parse_argv+0x470>  // b.tstop
  401cc4:	ldr	w0, [sp, #92]
  401cc8:	lsl	w1, w0, #10
  401ccc:	ldr	w0, [sp, #84]
  401cd0:	orr	w7, w1, w0
  401cd4:	adrp	x0, 402000 <parse_argv+0x75c>
  401cd8:	add	x1, x0, #0xe3b
  401cdc:	adrp	x0, 414000 <arg_flags>
  401ce0:	add	x0, x0, #0x20
  401ce4:	ldr	x0, [x0]
  401ce8:	mov	x6, x0
  401cec:	adrp	x0, 402000 <parse_argv+0x75c>
  401cf0:	add	x5, x0, #0xee8
  401cf4:	adrp	x0, 403000 <_fini+0x384>
  401cf8:	add	x4, x0, #0x248
  401cfc:	mov	w3, #0x72                  	// #114
  401d00:	mov	x2, x1
  401d04:	ldr	w1, [sp, #88]
  401d08:	mov	w0, w7
  401d0c:	bl	401300 <log_internal_realm@plt>
  401d10:	b	401d1c <parse_argv+0x478>
  401d14:	ldr	w0, [sp, #88]
  401d18:	cmp	w0, #0x0
  401d1c:	ldr	x0, [sp, #120]
  401d20:	bl	401360 <free@plt>
  401d24:	mov	w0, #0xffffffea            	// #-22
  401d28:	b	402008 <parse_argv+0x764>
  401d2c:	adrp	x0, 414000 <arg_flags>
  401d30:	add	x0, x0, #0x40
  401d34:	ldr	x0, [x0]
  401d38:	bl	401360 <free@plt>
  401d3c:	ldr	x1, [sp, #120]
  401d40:	adrp	x0, 414000 <arg_flags>
  401d44:	add	x0, x0, #0x40
  401d48:	str	x1, [x0]
  401d4c:	ldr	x1, [sp, #128]
  401d50:	adrp	x0, 414000 <arg_flags>
  401d54:	add	x0, x0, #0x48
  401d58:	str	x1, [x0]
  401d5c:	b	401d90 <parse_argv+0x4ec>
  401d60:	mov	w0, #0xffffffea            	// #-22
  401d64:	b	402008 <parse_argv+0x764>
  401d68:	adrp	x0, 402000 <parse_argv+0x75c>
  401d6c:	add	x1, x0, #0xe3b
  401d70:	adrp	x0, 403000 <_fini+0x384>
  401d74:	add	x4, x0, #0x238
  401d78:	mov	w3, #0x81                  	// #129
  401d7c:	mov	x2, x1
  401d80:	adrp	x0, 402000 <parse_argv+0x75c>
  401d84:	add	x1, x0, #0xf18
  401d88:	mov	w0, #0x0                   	// #0
  401d8c:	bl	401280 <log_assert_failed_unreachable_realm@plt>
  401d90:	mov	x4, #0x0                   	// #0
  401d94:	adrp	x0, 403000 <_fini+0x384>
  401d98:	add	x3, x0, #0x258
  401d9c:	adrp	x0, 402000 <parse_argv+0x75c>
  401da0:	add	x2, x0, #0xf30
  401da4:	ldr	x1, [sp, #32]
  401da8:	ldr	w0, [sp, #44]
  401dac:	bl	401260 <getopt_long@plt>
  401db0:	str	w0, [sp, #52]
  401db4:	ldr	w0, [sp, #52]
  401db8:	cmp	w0, #0x0
  401dbc:	b.ge	401950 <parse_argv+0xac>  // b.tcont
  401dc0:	adrp	x0, 414000 <arg_flags>
  401dc4:	add	x0, x0, #0x2c
  401dc8:	ldr	w0, [x0]
  401dcc:	cmp	w0, #0x0
  401dd0:	b.eq	401de0 <parse_argv+0x53c>  // b.none
  401dd4:	cmp	w0, #0x1
  401dd8:	b.eq	401ed4 <parse_argv+0x630>  // b.none
  401ddc:	b	401fdc <parse_argv+0x738>
  401de0:	adrp	x0, 414000 <arg_flags>
  401de4:	add	x0, x0, #0x18
  401de8:	ldr	w0, [x0]
  401dec:	add	w0, w0, #0x1
  401df0:	ldr	w1, [sp, #44]
  401df4:	cmp	w1, w0
  401df8:	b.eq	401e88 <parse_argv+0x5e4>  // b.none
  401dfc:	mov	w0, #0x3                   	// #3
  401e00:	str	w0, [sp, #68]
  401e04:	mov	w0, #0x16                  	// #22
  401e08:	movk	w0, #0x4000, lsl #16
  401e0c:	str	w0, [sp, #72]
  401e10:	str	wzr, [sp, #76]
  401e14:	ldr	w0, [sp, #76]
  401e18:	bl	4013d0 <log_get_max_level_realm@plt>
  401e1c:	mov	w1, w0
  401e20:	ldr	w0, [sp, #68]
  401e24:	and	w0, w0, #0x7
  401e28:	cmp	w1, w0
  401e2c:	b.lt	401e70 <parse_argv+0x5cc>  // b.tstop
  401e30:	ldr	w0, [sp, #76]
  401e34:	lsl	w1, w0, #10
  401e38:	ldr	w0, [sp, #68]
  401e3c:	orr	w6, w1, w0
  401e40:	adrp	x0, 402000 <parse_argv+0x75c>
  401e44:	add	x1, x0, #0xe3b
  401e48:	adrp	x0, 402000 <parse_argv+0x75c>
  401e4c:	add	x5, x0, #0xf38
  401e50:	adrp	x0, 403000 <_fini+0x384>
  401e54:	add	x4, x0, #0x248
  401e58:	mov	w3, #0x8a                  	// #138
  401e5c:	mov	x2, x1
  401e60:	ldr	w1, [sp, #72]
  401e64:	mov	w0, w6
  401e68:	bl	401300 <log_internal_realm@plt>
  401e6c:	b	402008 <parse_argv+0x764>
  401e70:	ldr	w0, [sp, #72]
  401e74:	cmp	w0, #0x0
  401e78:	cneg	w0, w0, lt  // lt = tstop
  401e7c:	and	w0, w0, #0xff
  401e80:	neg	w0, w0
  401e84:	b	402008 <parse_argv+0x764>
  401e88:	adrp	x0, 414000 <arg_flags>
  401e8c:	add	x0, x0, #0x18
  401e90:	ldr	w0, [x0]
  401e94:	sxtw	x0, w0
  401e98:	lsl	x0, x0, #3
  401e9c:	ldr	x1, [sp, #32]
  401ea0:	add	x0, x1, x0
  401ea4:	ldr	x1, [x0]
  401ea8:	adrp	x0, 414000 <arg_flags>
  401eac:	add	x0, x0, #0x30
  401eb0:	str	x1, [x0]
  401eb4:	adrp	x0, 414000 <arg_flags>
  401eb8:	add	x0, x0, #0x0
  401ebc:	ldr	w0, [x0]
  401ec0:	orr	w1, w0, #0x1
  401ec4:	adrp	x0, 414000 <arg_flags>
  401ec8:	add	x0, x0, #0x0
  401ecc:	str	w1, [x0]
  401ed0:	b	402004 <parse_argv+0x760>
  401ed4:	adrp	x0, 414000 <arg_flags>
  401ed8:	add	x0, x0, #0x18
  401edc:	ldr	w0, [x0]
  401ee0:	add	w0, w0, #0x2
  401ee4:	ldr	w1, [sp, #44]
  401ee8:	cmp	w1, w0
  401eec:	b.eq	401f7c <parse_argv+0x6d8>  // b.none
  401ef0:	mov	w0, #0x3                   	// #3
  401ef4:	str	w0, [sp, #56]
  401ef8:	mov	w0, #0x16                  	// #22
  401efc:	movk	w0, #0x4000, lsl #16
  401f00:	str	w0, [sp, #60]
  401f04:	str	wzr, [sp, #64]
  401f08:	ldr	w0, [sp, #64]
  401f0c:	bl	4013d0 <log_get_max_level_realm@plt>
  401f10:	mov	w1, w0
  401f14:	ldr	w0, [sp, #56]
  401f18:	and	w0, w0, #0x7
  401f1c:	cmp	w1, w0
  401f20:	b.lt	401f64 <parse_argv+0x6c0>  // b.tstop
  401f24:	ldr	w0, [sp, #64]
  401f28:	lsl	w1, w0, #10
  401f2c:	ldr	w0, [sp, #56]
  401f30:	orr	w6, w1, w0
  401f34:	adrp	x0, 402000 <parse_argv+0x75c>
  401f38:	add	x1, x0, #0xe3b
  401f3c:	adrp	x0, 402000 <parse_argv+0x75c>
  401f40:	add	x5, x0, #0xf60
  401f44:	adrp	x0, 403000 <_fini+0x384>
  401f48:	add	x4, x0, #0x248
  401f4c:	mov	w3, #0x93                  	// #147
  401f50:	mov	x2, x1
  401f54:	ldr	w1, [sp, #60]
  401f58:	mov	w0, w6
  401f5c:	bl	401300 <log_internal_realm@plt>
  401f60:	b	402008 <parse_argv+0x764>
  401f64:	ldr	w0, [sp, #60]
  401f68:	cmp	w0, #0x0
  401f6c:	cneg	w0, w0, lt  // lt = tstop
  401f70:	and	w0, w0, #0xff
  401f74:	neg	w0, w0
  401f78:	b	402008 <parse_argv+0x764>
  401f7c:	adrp	x0, 414000 <arg_flags>
  401f80:	add	x0, x0, #0x18
  401f84:	ldr	w0, [x0]
  401f88:	sxtw	x0, w0
  401f8c:	lsl	x0, x0, #3
  401f90:	ldr	x1, [sp, #32]
  401f94:	add	x0, x1, x0
  401f98:	ldr	x1, [x0]
  401f9c:	adrp	x0, 414000 <arg_flags>
  401fa0:	add	x0, x0, #0x30
  401fa4:	str	x1, [x0]
  401fa8:	adrp	x0, 414000 <arg_flags>
  401fac:	add	x0, x0, #0x18
  401fb0:	ldr	w0, [x0]
  401fb4:	sxtw	x0, w0
  401fb8:	add	x0, x0, #0x1
  401fbc:	lsl	x0, x0, #3
  401fc0:	ldr	x1, [sp, #32]
  401fc4:	add	x0, x1, x0
  401fc8:	ldr	x1, [x0]
  401fcc:	adrp	x0, 414000 <arg_flags>
  401fd0:	add	x0, x0, #0x38
  401fd4:	str	x1, [x0]
  401fd8:	b	402004 <parse_argv+0x760>
  401fdc:	adrp	x0, 402000 <parse_argv+0x75c>
  401fe0:	add	x1, x0, #0xe3b
  401fe4:	adrp	x0, 403000 <_fini+0x384>
  401fe8:	add	x4, x0, #0x238
  401fec:	mov	w3, #0x9b                  	// #155
  401ff0:	mov	x2, x1
  401ff4:	adrp	x0, 402000 <parse_argv+0x75c>
  401ff8:	add	x1, x0, #0xfa0
  401ffc:	mov	w0, #0x0                   	// #0
  402000:	bl	401280 <log_assert_failed_unreachable_realm@plt>
  402004:	mov	w0, #0x1                   	// #1
  402008:	mov	w1, w0
  40200c:	adrp	x0, 413000 <__FRAME_END__+0xf920>
  402010:	add	x0, x0, #0xc88
  402014:	ldr	x2, [sp, #136]
  402018:	ldr	x0, [x0]
  40201c:	eor	x0, x2, x0
  402020:	cmp	x0, #0x0
  402024:	b.eq	40202c <parse_argv+0x788>  // b.none
  402028:	bl	4012c0 <__stack_chk_fail@plt>
  40202c:	mov	w0, w1
  402030:	ldr	x19, [sp, #16]
  402034:	ldp	x29, x30, [sp], #144
  402038:	ret

000000000040203c <run>:
  40203c:	sub	sp, sp, #0x110
  402040:	stp	x29, x30, [sp, #80]
  402044:	add	x29, sp, #0x50
  402048:	str	x19, [sp, #96]
  40204c:	str	w0, [sp, #124]
  402050:	str	x1, [sp, #112]
  402054:	adrp	x0, 413000 <__FRAME_END__+0xf920>
  402058:	add	x0, x0, #0xc88
  40205c:	ldr	x1, [x0]
  402060:	str	x1, [sp, #264]
  402064:	mov	x1, #0x0                   	// #0
  402068:	str	xzr, [sp, #200]
  40206c:	str	xzr, [sp, #208]
  402070:	str	xzr, [sp, #216]
  402074:	mov	w0, #0x0                   	// #0
  402078:	bl	401200 <log_parse_environment_realm@plt>
  40207c:	bl	4013b0 <log_open@plt>
  402080:	ldr	x1, [sp, #112]
  402084:	ldr	w0, [sp, #124]
  402088:	bl	4018a4 <parse_argv>
  40208c:	str	w0, [sp, #132]
  402090:	ldr	w0, [sp, #132]
  402094:	cmp	w0, #0x0
  402098:	b.gt	4020a4 <run+0x68>
  40209c:	ldr	w19, [sp, #132]
  4020a0:	b	402b58 <run+0xb1c>
  4020a4:	adrp	x0, 414000 <arg_flags>
  4020a8:	add	x0, x0, #0x30
  4020ac:	ldr	x3, [x0]
  4020b0:	adrp	x0, 414000 <arg_flags>
  4020b4:	add	x0, x0, #0x0
  4020b8:	ldr	w0, [x0]
  4020bc:	and	w0, w0, #0x1
  4020c0:	cmp	w0, #0x0
  4020c4:	b.eq	4020d0 <run+0x94>  // b.none
  4020c8:	mov	w0, #0x0                   	// #0
  4020cc:	b	4020d4 <run+0x98>
  4020d0:	mov	w0, #0x2                   	// #2
  4020d4:	add	x1, sp, #0xc8
  4020d8:	mov	x2, x1
  4020dc:	mov	w1, w0
  4020e0:	mov	x0, x3
  4020e4:	bl	401240 <loop_device_make_by_path@plt>
  4020e8:	str	w0, [sp, #132]
  4020ec:	ldr	w0, [sp, #132]
  4020f0:	cmp	w0, #0x0
  4020f4:	b.ge	402184 <run+0x148>  // b.tcont
  4020f8:	mov	w0, #0x3                   	// #3
  4020fc:	str	w0, [sp, #188]
  402100:	ldr	w0, [sp, #132]
  402104:	str	w0, [sp, #192]
  402108:	str	wzr, [sp, #196]
  40210c:	ldr	w0, [sp, #196]
  402110:	bl	4013d0 <log_get_max_level_realm@plt>
  402114:	mov	w1, w0
  402118:	ldr	w0, [sp, #188]
  40211c:	and	w0, w0, #0x7
  402120:	cmp	w1, w0
  402124:	b.lt	40216c <run+0x130>  // b.tstop
  402128:	ldr	w0, [sp, #196]
  40212c:	lsl	w1, w0, #10
  402130:	ldr	w0, [sp, #188]
  402134:	orr	w6, w1, w0
  402138:	adrp	x0, 402000 <parse_argv+0x75c>
  40213c:	add	x1, x0, #0xe3b
  402140:	adrp	x0, 402000 <parse_argv+0x75c>
  402144:	add	x5, x0, #0xfb0
  402148:	adrp	x0, 403000 <_fini+0x384>
  40214c:	add	x4, x0, #0x338
  402150:	mov	w3, #0xb0                  	// #176
  402154:	mov	x2, x1
  402158:	ldr	w1, [sp, #192]
  40215c:	mov	w0, w6
  402160:	bl	401300 <log_internal_realm@plt>
  402164:	mov	w19, w0
  402168:	b	402b58 <run+0xb1c>
  40216c:	ldr	w0, [sp, #192]
  402170:	cmp	w0, #0x0
  402174:	cneg	w0, w0, lt  // lt = tstop
  402178:	and	w0, w0, #0xff
  40217c:	neg	w19, w0
  402180:	b	402b58 <run+0xb1c>
  402184:	adrp	x0, 414000 <arg_flags>
  402188:	add	x0, x0, #0x40
  40218c:	ldr	x0, [x0]
  402190:	cmp	x0, #0x0
  402194:	b.ne	402268 <run+0x22c>  // b.any
  402198:	adrp	x0, 414000 <arg_flags>
  40219c:	add	x0, x0, #0x30
  4021a0:	ldr	x3, [x0]
  4021a4:	adrp	x0, 414000 <arg_flags>
  4021a8:	add	x2, x0, #0x48
  4021ac:	adrp	x0, 414000 <arg_flags>
  4021b0:	add	x1, x0, #0x40
  4021b4:	mov	x0, x3
  4021b8:	bl	4011b0 <root_hash_load@plt>
  4021bc:	str	w0, [sp, #132]
  4021c0:	ldr	w0, [sp, #132]
  4021c4:	cmp	w0, #0x0
  4021c8:	b.ge	402268 <run+0x22c>  // b.tcont
  4021cc:	mov	w0, #0x3                   	// #3
  4021d0:	str	w0, [sp, #136]
  4021d4:	ldr	w0, [sp, #132]
  4021d8:	str	w0, [sp, #140]
  4021dc:	str	wzr, [sp, #144]
  4021e0:	ldr	w0, [sp, #144]
  4021e4:	bl	4013d0 <log_get_max_level_realm@plt>
  4021e8:	mov	w1, w0
  4021ec:	ldr	w0, [sp, #136]
  4021f0:	and	w0, w0, #0x7
  4021f4:	cmp	w1, w0
  4021f8:	b.lt	402250 <run+0x214>  // b.tstop
  4021fc:	ldr	w0, [sp, #144]
  402200:	lsl	w1, w0, #10
  402204:	ldr	w0, [sp, #136]
  402208:	orr	w7, w1, w0
  40220c:	adrp	x0, 402000 <parse_argv+0x75c>
  402210:	add	x1, x0, #0xe3b
  402214:	adrp	x0, 414000 <arg_flags>
  402218:	add	x0, x0, #0x30
  40221c:	ldr	x0, [x0]
  402220:	mov	x6, x0
  402224:	adrp	x0, 402000 <parse_argv+0x75c>
  402228:	add	x5, x0, #0xfd8
  40222c:	adrp	x0, 403000 <_fini+0x384>
  402230:	add	x4, x0, #0x338
  402234:	mov	w3, #0xb5                  	// #181
  402238:	mov	x2, x1
  40223c:	ldr	w1, [sp, #140]
  402240:	mov	w0, w7
  402244:	bl	401300 <log_internal_realm@plt>
  402248:	mov	w19, w0
  40224c:	b	402b58 <run+0xb1c>
  402250:	ldr	w0, [sp, #140]
  402254:	cmp	w0, #0x0
  402258:	cneg	w0, w0, lt  // lt = tstop
  40225c:	and	w0, w0, #0xff
  402260:	neg	w19, w0
  402264:	b	402b58 <run+0xb1c>
  402268:	ldr	x0, [sp, #200]
  40226c:	ldr	w6, [x0]
  402270:	adrp	x0, 414000 <arg_flags>
  402274:	add	x0, x0, #0x30
  402278:	ldr	x1, [x0]
  40227c:	adrp	x0, 414000 <arg_flags>
  402280:	add	x0, x0, #0x40
  402284:	ldr	x2, [x0]
  402288:	adrp	x0, 414000 <arg_flags>
  40228c:	add	x0, x0, #0x48
  402290:	ldr	x3, [x0]
  402294:	adrp	x0, 414000 <arg_flags>
  402298:	add	x0, x0, #0x0
  40229c:	ldr	w0, [x0]
  4022a0:	add	x4, sp, #0xd8
  4022a4:	mov	x5, x4
  4022a8:	mov	w4, w0
  4022ac:	mov	w0, w6
  4022b0:	bl	4013c0 <dissect_image_and_warn@plt>
  4022b4:	str	w0, [sp, #132]
  4022b8:	ldr	w0, [sp, #132]
  4022bc:	cmp	w0, #0x0
  4022c0:	b.ge	4022cc <run+0x290>  // b.tcont
  4022c4:	ldr	w19, [sp, #132]
  4022c8:	b	402b58 <run+0xb1c>
  4022cc:	adrp	x0, 414000 <arg_flags>
  4022d0:	add	x0, x0, #0x2c
  4022d4:	ldr	w0, [x0]
  4022d8:	cmp	w0, #0x0
  4022dc:	b.eq	4022ec <run+0x2b0>  // b.none
  4022e0:	cmp	w0, #0x1
  4022e4:	b.eq	402944 <run+0x908>  // b.none
  4022e8:	b	402b28 <run+0xaec>
  4022ec:	str	wzr, [sp, #128]
  4022f0:	b	4025b0 <run+0x574>
  4022f4:	ldr	x0, [sp, #216]
  4022f8:	add	x1, x0, #0x8
  4022fc:	ldr	w0, [sp, #128]
  402300:	lsl	x0, x0, #6
  402304:	add	x0, x1, x0
  402308:	str	x0, [sp, #256]
  40230c:	ldr	x0, [sp, #256]
  402310:	ldrb	w0, [x0]
  402314:	ubfx	x0, x0, #0, #1
  402318:	and	w0, w0, #0xff
  40231c:	eor	w0, w0, #0x1
  402320:	and	w0, w0, #0xff
  402324:	cmp	w0, #0x0
  402328:	b.ne	4025a0 <run+0x564>  // b.any
  40232c:	ldr	x0, [sp, #256]
  402330:	ldrb	w0, [x0]
  402334:	and	w0, w0, #0x2
  402338:	and	w0, w0, #0xff
  40233c:	cmp	w0, #0x0
  402340:	b.eq	402350 <run+0x314>  // b.none
  402344:	adrp	x0, 403000 <_fini+0x384>
  402348:	add	x19, x0, #0x8
  40234c:	b	402358 <run+0x31c>
  402350:	adrp	x0, 403000 <_fini+0x384>
  402354:	add	x19, x0, #0x18
  402358:	ldr	w0, [sp, #128]
  40235c:	bl	401350 <partition_designator_to_string@plt>
  402360:	mov	x2, x0
  402364:	mov	x1, x19
  402368:	adrp	x0, 403000 <_fini+0x384>
  40236c:	add	x0, x0, #0x28
  402370:	bl	401380 <printf@plt>
  402374:	ldr	x0, [sp, #256]
  402378:	ldp	x0, x1, [x0, #16]
  40237c:	bl	401610 <sd_id128_is_null>
  402380:	cmp	w0, #0x0
  402384:	b.ne	402490 <run+0x454>  // b.any
  402388:	ldr	x0, [sp, #256]
  40238c:	ldrb	w0, [x0, #16]
  402390:	mov	w9, w0
  402394:	ldr	x0, [sp, #256]
  402398:	ldrb	w0, [x0, #17]
  40239c:	mov	w10, w0
  4023a0:	ldr	x0, [sp, #256]
  4023a4:	ldrb	w0, [x0, #18]
  4023a8:	mov	w11, w0
  4023ac:	ldr	x0, [sp, #256]
  4023b0:	ldrb	w0, [x0, #19]
  4023b4:	mov	w12, w0
  4023b8:	ldr	x0, [sp, #256]
  4023bc:	ldrb	w0, [x0, #20]
  4023c0:	mov	w13, w0
  4023c4:	ldr	x0, [sp, #256]
  4023c8:	ldrb	w0, [x0, #21]
  4023cc:	mov	w14, w0
  4023d0:	ldr	x0, [sp, #256]
  4023d4:	ldrb	w0, [x0, #22]
  4023d8:	mov	w15, w0
  4023dc:	ldr	x0, [sp, #256]
  4023e0:	ldrb	w0, [x0, #23]
  4023e4:	mov	w1, w0
  4023e8:	ldr	x0, [sp, #256]
  4023ec:	ldrb	w0, [x0, #24]
  4023f0:	mov	w2, w0
  4023f4:	ldr	x0, [sp, #256]
  4023f8:	ldrb	w0, [x0, #25]
  4023fc:	mov	w3, w0
  402400:	ldr	x0, [sp, #256]
  402404:	ldrb	w0, [x0, #26]
  402408:	mov	w4, w0
  40240c:	ldr	x0, [sp, #256]
  402410:	ldrb	w0, [x0, #27]
  402414:	mov	w5, w0
  402418:	ldr	x0, [sp, #256]
  40241c:	ldrb	w0, [x0, #28]
  402420:	mov	w6, w0
  402424:	ldr	x0, [sp, #256]
  402428:	ldrb	w0, [x0, #29]
  40242c:	mov	w7, w0
  402430:	ldr	x0, [sp, #256]
  402434:	ldrb	w0, [x0, #30]
  402438:	mov	w8, w0
  40243c:	ldr	x0, [sp, #256]
  402440:	ldrb	w0, [x0, #31]
  402444:	str	w0, [sp, #64]
  402448:	str	w8, [sp, #56]
  40244c:	str	w7, [sp, #48]
  402450:	str	w6, [sp, #40]
  402454:	str	w5, [sp, #32]
  402458:	str	w4, [sp, #24]
  40245c:	str	w3, [sp, #16]
  402460:	str	w2, [sp, #8]
  402464:	str	w1, [sp]
  402468:	mov	w7, w15
  40246c:	mov	w6, w14
  402470:	mov	w5, w13
  402474:	mov	w4, w12
  402478:	mov	w3, w11
  40247c:	mov	w2, w10
  402480:	mov	w1, w9
  402484:	adrp	x0, 403000 <_fini+0x384>
  402488:	add	x0, x0, #0x40
  40248c:	bl	401380 <printf@plt>
  402490:	ldr	x0, [sp, #256]
  402494:	ldr	x0, [x0, #32]
  402498:	cmp	x0, #0x0
  40249c:	b.eq	4024b8 <run+0x47c>  // b.none
  4024a0:	ldr	x0, [sp, #256]
  4024a4:	ldr	x0, [x0, #32]
  4024a8:	mov	x1, x0
  4024ac:	adrp	x0, 403000 <_fini+0x384>
  4024b0:	add	x0, x0, #0x90
  4024b4:	bl	401380 <printf@plt>
  4024b8:	ldr	x0, [sp, #256]
  4024bc:	ldr	w0, [x0, #8]
  4024c0:	cmn	w0, #0x1
  4024c4:	b.eq	4024e4 <run+0x4a8>  // b.none
  4024c8:	ldr	x0, [sp, #256]
  4024cc:	ldr	w0, [x0, #8]
  4024d0:	bl	4011c0 <architecture_to_string@plt>
  4024d4:	mov	x1, x0
  4024d8:	adrp	x0, 403000 <_fini+0x384>
  4024dc:	add	x0, x0, #0xa0
  4024e0:	bl	401380 <printf@plt>
  4024e4:	ldr	w0, [sp, #128]
  4024e8:	bl	401644 <PARTITION_VERITY_OF>
  4024ec:	str	w0, [sp, #184]
  4024f0:	ldr	w0, [sp, #184]
  4024f4:	cmp	w0, #0x0
  4024f8:	b.lt	402544 <run+0x508>  // b.tstop
  4024fc:	ldr	x1, [sp, #216]
  402500:	ldrsw	x0, [sp, #184]
  402504:	lsl	x0, x0, #6
  402508:	add	x0, x1, x0
  40250c:	ldrb	w0, [x0, #8]
  402510:	ubfx	x0, x0, #0, #1
  402514:	and	w0, w0, #0xff
  402518:	cmp	w0, #0x0
  40251c:	b.eq	40252c <run+0x4f0>  // b.none
  402520:	adrp	x0, 403000 <_fini+0x384>
  402524:	add	x0, x0, #0xa8
  402528:	b	402534 <run+0x4f8>
  40252c:	adrp	x0, 403000 <_fini+0x384>
  402530:	add	x0, x0, #0xb0
  402534:	mov	x1, x0
  402538:	adrp	x0, 403000 <_fini+0x384>
  40253c:	add	x0, x0, #0xb8
  402540:	bl	401380 <printf@plt>
  402544:	ldr	x0, [sp, #256]
  402548:	ldr	w0, [x0, #4]
  40254c:	cmp	w0, #0x0
  402550:	b.lt	40256c <run+0x530>  // b.tstop
  402554:	ldr	x0, [sp, #256]
  402558:	ldr	w0, [x0, #4]
  40255c:	mov	w1, w0
  402560:	adrp	x0, 403000 <_fini+0x384>
  402564:	add	x0, x0, #0xc8
  402568:	bl	401380 <printf@plt>
  40256c:	ldr	x0, [sp, #256]
  402570:	ldr	x0, [x0, #40]
  402574:	cmp	x0, #0x0
  402578:	b.eq	402594 <run+0x558>  // b.none
  40257c:	ldr	x0, [sp, #256]
  402580:	ldr	x0, [x0, #40]
  402584:	mov	x1, x0
  402588:	adrp	x0, 403000 <_fini+0x384>
  40258c:	add	x0, x0, #0xe0
  402590:	bl	401380 <printf@plt>
  402594:	mov	w0, #0xa                   	// #10
  402598:	bl	401210 <putchar@plt>
  40259c:	b	4025a4 <run+0x568>
  4025a0:	nop
  4025a4:	ldr	w0, [sp, #128]
  4025a8:	add	w0, w0, #0x1
  4025ac:	str	w0, [sp, #128]
  4025b0:	ldr	w0, [sp, #128]
  4025b4:	cmp	w0, #0x8
  4025b8:	b.ls	4022f4 <run+0x2b8>  // b.plast
  4025bc:	ldr	x0, [sp, #216]
  4025c0:	bl	4012b0 <dissected_image_acquire_metadata@plt>
  4025c4:	str	w0, [sp, #132]
  4025c8:	ldr	w0, [sp, #132]
  4025cc:	cmp	w0, #0x0
  4025d0:	b.ge	402660 <run+0x624>  // b.tcont
  4025d4:	mov	w0, #0x3                   	// #3
  4025d8:	str	w0, [sp, #172]
  4025dc:	ldr	w0, [sp, #132]
  4025e0:	str	w0, [sp, #176]
  4025e4:	str	wzr, [sp, #180]
  4025e8:	ldr	w0, [sp, #180]
  4025ec:	bl	4013d0 <log_get_max_level_realm@plt>
  4025f0:	mov	w1, w0
  4025f4:	ldr	w0, [sp, #172]
  4025f8:	and	w0, w0, #0x7
  4025fc:	cmp	w1, w0
  402600:	b.lt	402648 <run+0x60c>  // b.tstop
  402604:	ldr	w0, [sp, #180]
  402608:	lsl	w1, w0, #10
  40260c:	ldr	w0, [sp, #172]
  402610:	orr	w6, w1, w0
  402614:	adrp	x0, 402000 <parse_argv+0x75c>
  402618:	add	x1, x0, #0xe3b
  40261c:	adrp	x0, 403000 <_fini+0x384>
  402620:	add	x5, x0, #0xe8
  402624:	adrp	x0, 403000 <_fini+0x384>
  402628:	add	x4, x0, #0x338
  40262c:	mov	w3, #0xe4                  	// #228
  402630:	mov	x2, x1
  402634:	ldr	w1, [sp, #176]
  402638:	mov	w0, w6
  40263c:	bl	401300 <log_internal_realm@plt>
  402640:	mov	w19, w0
  402644:	b	402b58 <run+0xb1c>
  402648:	ldr	w0, [sp, #176]
  40264c:	cmp	w0, #0x0
  402650:	cneg	w0, w0, lt  // lt = tstop
  402654:	and	w0, w0, #0xff
  402658:	neg	w19, w0
  40265c:	b	402b58 <run+0xb1c>
  402660:	ldr	x0, [sp, #216]
  402664:	ldr	x0, [x0, #584]
  402668:	cmp	x0, #0x0
  40266c:	b.eq	402688 <run+0x64c>  // b.none
  402670:	ldr	x0, [sp, #216]
  402674:	ldr	x0, [x0, #584]
  402678:	mov	x1, x0
  40267c:	adrp	x0, 403000 <_fini+0x384>
  402680:	add	x0, x0, #0x110
  402684:	bl	401380 <printf@plt>
  402688:	ldr	x0, [sp, #216]
  40268c:	add	x0, x0, #0x200
  402690:	ldp	x0, x1, [x0, #80]
  402694:	bl	401610 <sd_id128_is_null>
  402698:	cmp	w0, #0x0
  40269c:	b.ne	4027a8 <run+0x76c>  // b.any
  4026a0:	ldr	x0, [sp, #216]
  4026a4:	ldrb	w0, [x0, #592]
  4026a8:	mov	w9, w0
  4026ac:	ldr	x0, [sp, #216]
  4026b0:	ldrb	w0, [x0, #593]
  4026b4:	mov	w10, w0
  4026b8:	ldr	x0, [sp, #216]
  4026bc:	ldrb	w0, [x0, #594]
  4026c0:	mov	w11, w0
  4026c4:	ldr	x0, [sp, #216]
  4026c8:	ldrb	w0, [x0, #595]
  4026cc:	mov	w12, w0
  4026d0:	ldr	x0, [sp, #216]
  4026d4:	ldrb	w0, [x0, #596]
  4026d8:	mov	w13, w0
  4026dc:	ldr	x0, [sp, #216]
  4026e0:	ldrb	w0, [x0, #597]
  4026e4:	mov	w14, w0
  4026e8:	ldr	x0, [sp, #216]
  4026ec:	ldrb	w0, [x0, #598]
  4026f0:	mov	w15, w0
  4026f4:	ldr	x0, [sp, #216]
  4026f8:	ldrb	w0, [x0, #599]
  4026fc:	mov	w1, w0
  402700:	ldr	x0, [sp, #216]
  402704:	ldrb	w0, [x0, #600]
  402708:	mov	w2, w0
  40270c:	ldr	x0, [sp, #216]
  402710:	ldrb	w0, [x0, #601]
  402714:	mov	w3, w0
  402718:	ldr	x0, [sp, #216]
  40271c:	ldrb	w0, [x0, #602]
  402720:	mov	w4, w0
  402724:	ldr	x0, [sp, #216]
  402728:	ldrb	w0, [x0, #603]
  40272c:	mov	w5, w0
  402730:	ldr	x0, [sp, #216]
  402734:	ldrb	w0, [x0, #604]
  402738:	mov	w6, w0
  40273c:	ldr	x0, [sp, #216]
  402740:	ldrb	w0, [x0, #605]
  402744:	mov	w7, w0
  402748:	ldr	x0, [sp, #216]
  40274c:	ldrb	w0, [x0, #606]
  402750:	mov	w8, w0
  402754:	ldr	x0, [sp, #216]
  402758:	ldrb	w0, [x0, #607]
  40275c:	str	w0, [sp, #64]
  402760:	str	w8, [sp, #56]
  402764:	str	w7, [sp, #48]
  402768:	str	w6, [sp, #40]
  40276c:	str	w5, [sp, #32]
  402770:	str	w4, [sp, #24]
  402774:	str	w3, [sp, #16]
  402778:	str	w2, [sp, #8]
  40277c:	str	w1, [sp]
  402780:	mov	w7, w15
  402784:	mov	w6, w14
  402788:	mov	w5, w13
  40278c:	mov	w4, w12
  402790:	mov	w3, w11
  402794:	mov	w2, w10
  402798:	mov	w1, w9
  40279c:	adrp	x0, 403000 <_fini+0x384>
  4027a0:	add	x0, x0, #0x120
  4027a4:	bl	401380 <printf@plt>
  4027a8:	ldr	x0, [sp, #216]
  4027ac:	ldr	x0, [x0, #608]
  4027b0:	bl	401800 <strv_isempty>
  4027b4:	and	w0, w0, #0xff
  4027b8:	eor	w0, w0, #0x1
  4027bc:	and	w0, w0, #0xff
  4027c0:	cmp	w0, #0x0
  4027c4:	b.eq	402874 <run+0x838>  // b.none
  4027c8:	ldr	x0, [sp, #216]
  4027cc:	ldr	x0, [x0, #608]
  4027d0:	str	x0, [sp, #224]
  4027d4:	ldr	x0, [sp, #224]
  4027d8:	add	x0, x0, #0x8
  4027dc:	str	x0, [sp, #232]
  4027e0:	b	402848 <run+0x80c>
  4027e4:	ldr	x0, [sp, #216]
  4027e8:	ldr	x0, [x0, #608]
  4027ec:	ldr	x1, [sp, #224]
  4027f0:	cmp	x1, x0
  4027f4:	b.ne	402804 <run+0x7c8>  // b.any
  4027f8:	adrp	x0, 403000 <_fini+0x384>
  4027fc:	add	x0, x0, #0x170
  402800:	b	40280c <run+0x7d0>
  402804:	adrp	x0, 403000 <_fini+0x384>
  402808:	add	x0, x0, #0x180
  40280c:	ldr	x1, [sp, #224]
  402810:	ldr	x2, [x1]
  402814:	ldr	x1, [sp, #232]
  402818:	ldr	x1, [x1]
  40281c:	mov	x3, x1
  402820:	mov	x1, x0
  402824:	adrp	x0, 403000 <_fini+0x384>
  402828:	add	x0, x0, #0x190
  40282c:	bl	401380 <printf@plt>
  402830:	ldr	x0, [sp, #224]
  402834:	add	x0, x0, #0x10
  402838:	str	x0, [sp, #224]
  40283c:	ldr	x0, [sp, #224]
  402840:	add	x0, x0, #0x8
  402844:	str	x0, [sp, #232]
  402848:	ldr	x0, [sp, #224]
  40284c:	cmp	x0, #0x0
  402850:	b.eq	402874 <run+0x838>  // b.none
  402854:	ldr	x0, [sp, #224]
  402858:	ldr	x0, [x0]
  40285c:	cmp	x0, #0x0
  402860:	b.eq	402874 <run+0x838>  // b.none
  402864:	ldr	x0, [sp, #232]
  402868:	ldr	x0, [x0]
  40286c:	cmp	x0, #0x0
  402870:	b.ne	4027e4 <run+0x7a8>  // b.any
  402874:	ldr	x0, [sp, #216]
  402878:	ldr	x0, [x0, #616]
  40287c:	bl	401800 <strv_isempty>
  402880:	and	w0, w0, #0xff
  402884:	eor	w0, w0, #0x1
  402888:	and	w0, w0, #0xff
  40288c:	cmp	w0, #0x0
  402890:	b.eq	402b50 <run+0xb14>  // b.none
  402894:	ldr	x0, [sp, #216]
  402898:	ldr	x0, [x0, #616]
  40289c:	str	x0, [sp, #240]
  4028a0:	ldr	x0, [sp, #240]
  4028a4:	add	x0, x0, #0x8
  4028a8:	str	x0, [sp, #248]
  4028ac:	b	402914 <run+0x8d8>
  4028b0:	ldr	x0, [sp, #216]
  4028b4:	ldr	x0, [x0, #616]
  4028b8:	ldr	x1, [sp, #240]
  4028bc:	cmp	x1, x0
  4028c0:	b.ne	4028d0 <run+0x894>  // b.any
  4028c4:	adrp	x0, 403000 <_fini+0x384>
  4028c8:	add	x0, x0, #0x1a0
  4028cc:	b	4028d8 <run+0x89c>
  4028d0:	adrp	x0, 403000 <_fini+0x384>
  4028d4:	add	x0, x0, #0x180
  4028d8:	ldr	x1, [sp, #240]
  4028dc:	ldr	x2, [x1]
  4028e0:	ldr	x1, [sp, #248]
  4028e4:	ldr	x1, [x1]
  4028e8:	mov	x3, x1
  4028ec:	mov	x1, x0
  4028f0:	adrp	x0, 403000 <_fini+0x384>
  4028f4:	add	x0, x0, #0x190
  4028f8:	bl	401380 <printf@plt>
  4028fc:	ldr	x0, [sp, #240]
  402900:	add	x0, x0, #0x10
  402904:	str	x0, [sp, #240]
  402908:	ldr	x0, [sp, #240]
  40290c:	add	x0, x0, #0x8
  402910:	str	x0, [sp, #248]
  402914:	ldr	x0, [sp, #240]
  402918:	cmp	x0, #0x0
  40291c:	b.eq	402b50 <run+0xb14>  // b.none
  402920:	ldr	x0, [sp, #240]
  402924:	ldr	x0, [x0]
  402928:	cmp	x0, #0x0
  40292c:	b.eq	402b50 <run+0xb14>  // b.none
  402930:	ldr	x0, [sp, #248]
  402934:	ldr	x0, [x0]
  402938:	cmp	x0, #0x0
  40293c:	b.ne	4028b0 <run+0x874>  // b.any
  402940:	b	402b50 <run+0xb14>
  402944:	ldr	x6, [sp, #216]
  402948:	adrp	x0, 414000 <arg_flags>
  40294c:	add	x0, x0, #0x40
  402950:	ldr	x1, [x0]
  402954:	adrp	x0, 414000 <arg_flags>
  402958:	add	x0, x0, #0x48
  40295c:	ldr	x2, [x0]
  402960:	adrp	x0, 414000 <arg_flags>
  402964:	add	x0, x0, #0x0
  402968:	ldr	w0, [x0]
  40296c:	add	x3, sp, #0xd0
  402970:	mov	x5, x3
  402974:	mov	w4, w0
  402978:	mov	x3, x2
  40297c:	mov	x2, x1
  402980:	mov	x1, #0x0                   	// #0
  402984:	mov	x0, x6
  402988:	bl	401270 <dissected_image_decrypt_interactively@plt>
  40298c:	str	w0, [sp, #132]
  402990:	ldr	w0, [sp, #132]
  402994:	cmp	w0, #0x0
  402998:	b.ge	4029a4 <run+0x968>  // b.tcont
  40299c:	ldr	w19, [sp, #132]
  4029a0:	b	402b58 <run+0xb1c>
  4029a4:	ldr	x4, [sp, #216]
  4029a8:	adrp	x0, 414000 <arg_flags>
  4029ac:	add	x0, x0, #0x38
  4029b0:	ldr	x1, [x0]
  4029b4:	adrp	x0, 414000 <arg_flags>
  4029b8:	add	x0, x0, #0x0
  4029bc:	ldr	w0, [x0]
  4029c0:	mov	w3, w0
  4029c4:	mov	w2, #0xffffffff            	// #-1
  4029c8:	mov	x0, x4
  4029cc:	bl	401330 <dissected_image_mount@plt>
  4029d0:	str	w0, [sp, #132]
  4029d4:	ldr	w0, [sp, #132]
  4029d8:	cmp	w0, #0x0
  4029dc:	b.ge	402a6c <run+0xa30>  // b.tcont
  4029e0:	mov	w0, #0x3                   	// #3
  4029e4:	str	w0, [sp, #160]
  4029e8:	ldr	w0, [sp, #132]
  4029ec:	str	w0, [sp, #164]
  4029f0:	str	wzr, [sp, #168]
  4029f4:	ldr	w0, [sp, #168]
  4029f8:	bl	4013d0 <log_get_max_level_realm@plt>
  4029fc:	mov	w1, w0
  402a00:	ldr	w0, [sp, #160]
  402a04:	and	w0, w0, #0x7
  402a08:	cmp	w1, w0
  402a0c:	b.lt	402a54 <run+0xa18>  // b.tstop
  402a10:	ldr	w0, [sp, #168]
  402a14:	lsl	w1, w0, #10
  402a18:	ldr	w0, [sp, #160]
  402a1c:	orr	w6, w1, w0
  402a20:	adrp	x0, 402000 <parse_argv+0x75c>
  402a24:	add	x1, x0, #0xe3b
  402a28:	adrp	x0, 403000 <_fini+0x384>
  402a2c:	add	x5, x0, #0x1b0
  402a30:	adrp	x0, 403000 <_fini+0x384>
  402a34:	add	x4, x0, #0x338
  402a38:	mov	w3, #0x108                 	// #264
  402a3c:	mov	x2, x1
  402a40:	ldr	w1, [sp, #164]
  402a44:	mov	w0, w6
  402a48:	bl	401300 <log_internal_realm@plt>
  402a4c:	mov	w19, w0
  402a50:	b	402b58 <run+0xb1c>
  402a54:	ldr	w0, [sp, #164]
  402a58:	cmp	w0, #0x0
  402a5c:	cneg	w0, w0, lt  // lt = tstop
  402a60:	and	w0, w0, #0xff
  402a64:	neg	w19, w0
  402a68:	b	402b58 <run+0xb1c>
  402a6c:	ldr	x0, [sp, #208]
  402a70:	cmp	x0, #0x0
  402a74:	b.eq	402b1c <run+0xae0>  // b.none
  402a78:	ldr	x0, [sp, #208]
  402a7c:	bl	4013a0 <decrypted_image_relinquish@plt>
  402a80:	str	w0, [sp, #132]
  402a84:	ldr	w0, [sp, #132]
  402a88:	cmp	w0, #0x0
  402a8c:	b.ge	402b1c <run+0xae0>  // b.tcont
  402a90:	mov	w0, #0x3                   	// #3
  402a94:	str	w0, [sp, #148]
  402a98:	ldr	w0, [sp, #132]
  402a9c:	str	w0, [sp, #152]
  402aa0:	str	wzr, [sp, #156]
  402aa4:	ldr	w0, [sp, #156]
  402aa8:	bl	4013d0 <log_get_max_level_realm@plt>
  402aac:	mov	w1, w0
  402ab0:	ldr	w0, [sp, #148]
  402ab4:	and	w0, w0, #0x7
  402ab8:	cmp	w1, w0
  402abc:	b.lt	402b04 <run+0xac8>  // b.tstop
  402ac0:	ldr	w0, [sp, #156]
  402ac4:	lsl	w1, w0, #10
  402ac8:	ldr	w0, [sp, #148]
  402acc:	orr	w6, w1, w0
  402ad0:	adrp	x0, 402000 <parse_argv+0x75c>
  402ad4:	add	x1, x0, #0xe3b
  402ad8:	adrp	x0, 403000 <_fini+0x384>
  402adc:	add	x5, x0, #0x1d0
  402ae0:	adrp	x0, 403000 <_fini+0x384>
  402ae4:	add	x4, x0, #0x338
  402ae8:	mov	w3, #0x10d                 	// #269
  402aec:	mov	x2, x1
  402af0:	ldr	w1, [sp, #152]
  402af4:	mov	w0, w6
  402af8:	bl	401300 <log_internal_realm@plt>
  402afc:	mov	w19, w0
  402b00:	b	402b58 <run+0xb1c>
  402b04:	ldr	w0, [sp, #152]
  402b08:	cmp	w0, #0x0
  402b0c:	cneg	w0, w0, lt  // lt = tstop
  402b10:	and	w0, w0, #0xff
  402b14:	neg	w19, w0
  402b18:	b	402b58 <run+0xb1c>
  402b1c:	ldr	x0, [sp, #200]
  402b20:	bl	401230 <loop_device_relinquish@plt>
  402b24:	b	402b54 <run+0xb18>
  402b28:	adrp	x0, 402000 <parse_argv+0x75c>
  402b2c:	add	x1, x0, #0xe3b
  402b30:	adrp	x0, 403000 <_fini+0x384>
  402b34:	add	x4, x0, #0x340
  402b38:	mov	w3, #0x114                 	// #276
  402b3c:	mov	x2, x1
  402b40:	adrp	x0, 402000 <parse_argv+0x75c>
  402b44:	add	x1, x0, #0xfa0
  402b48:	mov	w0, #0x0                   	// #0
  402b4c:	bl	401280 <log_assert_failed_unreachable_realm@plt>
  402b50:	nop
  402b54:	mov	w19, #0x0                   	// #0
  402b58:	add	x0, sp, #0xd8
  402b5c:	bl	401680 <dissected_image_unrefp>
  402b60:	add	x0, sp, #0xd0
  402b64:	bl	4016b4 <decrypted_image_unrefp>
  402b68:	add	x0, sp, #0xc8
  402b6c:	bl	401720 <loop_device_unrefp>
  402b70:	mov	w1, w19
  402b74:	adrp	x0, 413000 <__FRAME_END__+0xf920>
  402b78:	add	x0, x0, #0xc88
  402b7c:	ldr	x2, [sp, #264]
  402b80:	ldr	x0, [x0]
  402b84:	eor	x0, x2, x0
  402b88:	cmp	x0, #0x0
  402b8c:	b.eq	402b94 <run+0xb58>  // b.none
  402b90:	bl	4012c0 <__stack_chk_fail@plt>
  402b94:	mov	w0, w1
  402b98:	ldr	x19, [sp, #96]
  402b9c:	ldp	x29, x30, [sp, #80]
  402ba0:	add	sp, sp, #0x110
  402ba4:	ret

0000000000402ba8 <main>:
  402ba8:	stp	x29, x30, [sp, #-48]!
  402bac:	mov	x29, sp
  402bb0:	str	w0, [sp, #28]
  402bb4:	str	x1, [sp, #16]
  402bb8:	ldr	x1, [sp, #16]
  402bbc:	ldr	w0, [sp, #28]
  402bc0:	bl	4015d8 <save_argc_argv>
  402bc4:	ldr	x1, [sp, #16]
  402bc8:	ldr	w0, [sp, #28]
  402bcc:	bl	40203c <run>
  402bd0:	str	w0, [sp, #44]
  402bd4:	bl	4012d0 <ask_password_agent_close@plt>
  402bd8:	bl	4011f0 <polkit_agent_close@plt>
  402bdc:	bl	4012f0 <pager_close@plt>
  402be0:	bl	401370 <mac_selinux_finish@plt>
  402be4:	bl	401778 <static_destruct>
  402be8:	ldr	w0, [sp, #44]
  402bec:	lsr	w0, w0, #31
  402bf0:	ldp	x29, x30, [sp], #48
  402bf4:	ret

0000000000402bf8 <__libc_csu_init>:
  402bf8:	stp	x29, x30, [sp, #-64]!
  402bfc:	mov	x29, sp
  402c00:	stp	x19, x20, [sp, #16]
  402c04:	adrp	x20, 413000 <__FRAME_END__+0xf920>
  402c08:	add	x20, x20, #0xc80
  402c0c:	stp	x21, x22, [sp, #32]
  402c10:	adrp	x21, 413000 <__FRAME_END__+0xf920>
  402c14:	add	x21, x21, #0xc78
  402c18:	sub	x20, x20, x21
  402c1c:	mov	w22, w0
  402c20:	stp	x23, x24, [sp, #48]
  402c24:	mov	x23, x1
  402c28:	mov	x24, x2
  402c2c:	bl	401170 <_init>
  402c30:	cmp	xzr, x20, asr #3
  402c34:	b.eq	402c60 <__libc_csu_init+0x68>  // b.none
  402c38:	asr	x20, x20, #3
  402c3c:	mov	x19, #0x0                   	// #0
  402c40:	ldr	x3, [x21, x19, lsl #3]
  402c44:	mov	x2, x24
  402c48:	add	x19, x19, #0x1
  402c4c:	mov	x1, x23
  402c50:	mov	w0, w22
  402c54:	blr	x3
  402c58:	cmp	x20, x19
  402c5c:	b.ne	402c40 <__libc_csu_init+0x48>  // b.any
  402c60:	ldp	x19, x20, [sp, #16]
  402c64:	ldp	x21, x22, [sp, #32]
  402c68:	ldp	x23, x24, [sp, #48]
  402c6c:	ldp	x29, x30, [sp], #64
  402c70:	ret
  402c74:	nop

0000000000402c78 <__libc_csu_fini>:
  402c78:	ret

Disassembly of section .fini:

0000000000402c7c <_fini>:
  402c7c:	stp	x29, x30, [sp, #-16]!
  402c80:	mov	x29, sp
  402c84:	ldp	x29, x30, [sp], #16
  402c88:	ret
