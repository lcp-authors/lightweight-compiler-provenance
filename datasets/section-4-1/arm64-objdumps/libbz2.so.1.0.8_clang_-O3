
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_clang_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000013d0 <.init>:
    13d0:	stp	x29, x30, [sp, #-16]!
    13d4:	mov	x29, sp
    13d8:	bl	1630 <ferror@plt+0x10>
    13dc:	ldp	x29, x30, [sp], #16
    13e0:	ret

Disassembly of section .plt:

00000000000013f0 <memcpy@plt-0x20>:
    13f0:	stp	x16, x30, [sp, #-16]!
    13f4:	adrp	x16, 1f000 <BZ2_bzerror@@Base+0x10cec>
    13f8:	ldr	x17, [x16, #4088]
    13fc:	add	x16, x16, #0xff8
    1400:	br	x17
    1404:	nop
    1408:	nop
    140c:	nop

0000000000001410 <memcpy@plt>:
    1410:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1414:	ldr	x17, [x16]
    1418:	add	x16, x16, #0x0
    141c:	br	x17

0000000000001420 <strlen@plt>:
    1420:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1424:	ldr	x17, [x16, #8]
    1428:	add	x16, x16, #0x8
    142c:	br	x17

0000000000001430 <BZ2_hbMakeCodeLengths@plt>:
    1430:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1434:	ldr	x17, [x16, #16]
    1438:	add	x16, x16, #0x10
    143c:	br	x17

0000000000001440 <exit@plt>:
    1440:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1444:	ldr	x17, [x16, #24]
    1448:	add	x16, x16, #0x18
    144c:	br	x17

0000000000001450 <__cxa_finalize@plt>:
    1450:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1454:	ldr	x17, [x16, #32]
    1458:	add	x16, x16, #0x20
    145c:	br	x17

0000000000001460 <fputc@plt>:
    1460:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1464:	ldr	x17, [x16, #40]
    1468:	add	x16, x16, #0x28
    146c:	br	x17

0000000000001470 <fclose@plt>:
    1470:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1474:	ldr	x17, [x16, #48]
    1478:	add	x16, x16, #0x30
    147c:	br	x17

0000000000001480 <malloc@plt>:
    1480:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1484:	ldr	x17, [x16, #56]
    1488:	add	x16, x16, #0x38
    148c:	br	x17

0000000000001490 <fgetc@plt>:
    1490:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1494:	ldr	x17, [x16, #64]
    1498:	add	x16, x16, #0x40
    149c:	br	x17

00000000000014a0 <memset@plt>:
    14a0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14a4:	ldr	x17, [x16, #72]
    14a8:	add	x16, x16, #0x48
    14ac:	br	x17

00000000000014b0 <fdopen@plt>:
    14b0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14b4:	ldr	x17, [x16, #80]
    14b8:	add	x16, x16, #0x50
    14bc:	br	x17

00000000000014c0 <BZ2_bzCompressInit@plt>:
    14c0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14c4:	ldr	x17, [x16, #88]
    14c8:	add	x16, x16, #0x58
    14cc:	br	x17

00000000000014d0 <BZ2_hbCreateDecodeTables@plt>:
    14d0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14d4:	ldr	x17, [x16, #96]
    14d8:	add	x16, x16, #0x60
    14dc:	br	x17

00000000000014e0 <__gmon_start__@plt>:
    14e0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #104]
    14e8:	add	x16, x16, #0x68
    14ec:	br	x17

00000000000014f0 <BZ2_decompress@plt>:
    14f0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #112]
    14f8:	add	x16, x16, #0x70
    14fc:	br	x17

0000000000001500 <BZ2_bzWrite@plt>:
    1500:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1504:	ldr	x17, [x16, #120]
    1508:	add	x16, x16, #0x78
    150c:	br	x17

0000000000001510 <__ctype_b_loc@plt>:
    1510:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1514:	ldr	x17, [x16, #128]
    1518:	add	x16, x16, #0x80
    151c:	br	x17

0000000000001520 <BZ2_compressBlock@plt>:
    1520:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1524:	ldr	x17, [x16, #136]
    1528:	add	x16, x16, #0x88
    152c:	br	x17

0000000000001530 <fread@plt>:
    1530:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1534:	ldr	x17, [x16, #144]
    1538:	add	x16, x16, #0x90
    153c:	br	x17

0000000000001540 <free@plt>:
    1540:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1544:	ldr	x17, [x16, #152]
    1548:	add	x16, x16, #0x98
    154c:	br	x17

0000000000001550 <ungetc@plt>:
    1550:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1554:	ldr	x17, [x16, #160]
    1558:	add	x16, x16, #0xa0
    155c:	br	x17

0000000000001560 <BZ2_bzDecompress@plt>:
    1560:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1564:	ldr	x17, [x16, #168]
    1568:	add	x16, x16, #0xa8
    156c:	br	x17

0000000000001570 <BZ2_blockSort@plt>:
    1570:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1574:	ldr	x17, [x16, #176]
    1578:	add	x16, x16, #0xb0
    157c:	br	x17

0000000000001580 <BZ2_bzWriteClose64@plt>:
    1580:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1584:	ldr	x17, [x16, #184]
    1588:	add	x16, x16, #0xb8
    158c:	br	x17

0000000000001590 <BZ2_indexIntoF@plt>:
    1590:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1594:	ldr	x17, [x16, #192]
    1598:	add	x16, x16, #0xc0
    159c:	br	x17

00000000000015a0 <BZ2_hbAssignCodes@plt>:
    15a0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #200]
    15a8:	add	x16, x16, #0xc8
    15ac:	br	x17

00000000000015b0 <fwrite@plt>:
    15b0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #208]
    15b8:	add	x16, x16, #0xd0
    15bc:	br	x17

00000000000015c0 <fflush@plt>:
    15c0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #216]
    15c8:	add	x16, x16, #0xd8
    15cc:	br	x17

00000000000015d0 <fopen64@plt>:
    15d0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #224]
    15d8:	add	x16, x16, #0xe0
    15dc:	br	x17

00000000000015e0 <BZ2_bzReadOpen@plt>:
    15e0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #232]
    15e8:	add	x16, x16, #0xe8
    15ec:	br	x17

00000000000015f0 <BZ2_bzRead@plt>:
    15f0:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #240]
    15f8:	add	x16, x16, #0xf0
    15fc:	br	x17

0000000000001600 <BZ2_bz__AssertH__fail@plt>:
    1600:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1604:	ldr	x17, [x16, #248]
    1608:	add	x16, x16, #0xf8
    160c:	br	x17

0000000000001610 <fprintf@plt>:
    1610:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1614:	ldr	x17, [x16, #256]
    1618:	add	x16, x16, #0x100
    161c:	br	x17

0000000000001620 <ferror@plt>:
    1620:	adrp	x16, 20000 <memcpy@GLIBC_2.17>
    1624:	ldr	x17, [x16, #264]
    1628:	add	x16, x16, #0x108
    162c:	br	x17

Disassembly of section .text:

0000000000001630 <BZ2_blockSort@@Base-0xd4>:
    1630:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10cec>
    1634:	ldr	x0, [x0, #4056]
    1638:	cbz	x0, 1640 <ferror@plt+0x20>
    163c:	b	14e0 <__gmon_start__@plt>
    1640:	ret
    1644:	nop
    1648:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11cec>
    164c:	add	x0, x0, #0xd18
    1650:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x11cec>
    1654:	add	x1, x1, #0xd18
    1658:	cmp	x1, x0
    165c:	b.eq	1674 <ferror@plt+0x54>  // b.none
    1660:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x10cec>
    1664:	ldr	x1, [x1, #4000]
    1668:	cbz	x1, 1674 <ferror@plt+0x54>
    166c:	mov	x16, x1
    1670:	br	x16
    1674:	ret
    1678:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11cec>
    167c:	add	x0, x0, #0xd18
    1680:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x11cec>
    1684:	add	x1, x1, #0xd18
    1688:	sub	x1, x1, x0
    168c:	lsr	x2, x1, #63
    1690:	add	x1, x2, x1, asr #3
    1694:	cmp	xzr, x1, asr #1
    1698:	asr	x1, x1, #1
    169c:	b.eq	16b4 <ferror@plt+0x94>  // b.none
    16a0:	adrp	x2, 1f000 <BZ2_bzerror@@Base+0x10cec>
    16a4:	ldr	x2, [x2, #4064]
    16a8:	cbz	x2, 16b4 <ferror@plt+0x94>
    16ac:	mov	x16, x2
    16b0:	br	x16
    16b4:	ret
    16b8:	stp	x29, x30, [sp, #-32]!
    16bc:	mov	x29, sp
    16c0:	str	x19, [sp, #16]
    16c4:	adrp	x19, 20000 <BZ2_bzerror@@Base+0x11cec>
    16c8:	ldrb	w0, [x19, #3352]
    16cc:	cbnz	w0, 16f4 <ferror@plt+0xd4>
    16d0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10cec>
    16d4:	ldr	x0, [x0, #4008]
    16d8:	cbz	x0, 16e8 <ferror@plt+0xc8>
    16dc:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11cec>
    16e0:	ldr	x0, [x0, #272]
    16e4:	bl	1450 <__cxa_finalize@plt>
    16e8:	bl	1648 <ferror@plt+0x28>
    16ec:	mov	w0, #0x1                   	// #1
    16f0:	strb	w0, [x19, #3352]
    16f4:	ldr	x19, [sp, #16]
    16f8:	ldp	x29, x30, [sp], #32
    16fc:	ret
    1700:	b	1678 <ferror@plt+0x58>

0000000000001704 <BZ2_blockSort@@Base>:
    1704:	str	d10, [sp, #-128]!
    1708:	stp	d9, d8, [sp, #16]
    170c:	stp	x29, x30, [sp, #32]
    1710:	stp	x28, x27, [sp, #48]
    1714:	stp	x26, x25, [sp, #64]
    1718:	stp	x24, x23, [sp, #80]
    171c:	stp	x22, x21, [sp, #96]
    1720:	stp	x20, x19, [sp, #112]
    1724:	mov	x29, sp
    1728:	sub	sp, sp, #0x1, lsl #12
    172c:	sub	sp, sp, #0x2c0
    1730:	ldrsw	x9, [x0, #108]
    1734:	ldr	x21, [x0, #56]
    1738:	ldr	x22, [x0, #40]
    173c:	ldr	w23, [x0, #656]
    1740:	mov	w8, #0x2710                	// #10000
    1744:	mov	x20, x0
    1748:	cmp	w9, w8
    174c:	and	x25, x9, #0xffffffff
    1750:	b.lt	2eb0 <BZ2_blockSort@@Base+0x17ac>  // b.tstop
    1754:	stp	x20, x9, [sp, #16]
    1758:	ldr	w8, [x20, #88]
    175c:	add	w9, w25, #0x22
    1760:	add	w10, w25, #0x23
    1764:	tst	w9, #0x1
    1768:	csel	w9, w9, w10, eq  // eq = none
    176c:	cmp	w8, #0x1
    1770:	ldr	x24, [x20, #64]
    1774:	csinc	w8, w8, wzr, gt
    1778:	mov	w11, #0x64                  	// #100
    177c:	cmp	w8, #0x64
    1780:	mov	w10, #0x5556                	// #21846
    1784:	csel	w8, w8, w11, lt  // lt = tstop
    1788:	movk	w10, #0x5555, lsl #16
    178c:	sxtw	x20, w9
    1790:	sub	w8, w8, #0x1
    1794:	add	x9, x24, x20
    1798:	smull	x8, w8, w10
    179c:	str	x9, [x29, #8]
    17a0:	lsr	x9, x8, #63
    17a4:	lsr	x8, x8, #32
    17a8:	add	w8, w8, w9
    17ac:	cmp	w23, #0x4
    17b0:	mul	w8, w8, w25
    17b4:	str	w23, [sp, #92]
    17b8:	str	w8, [sp, #12]
    17bc:	str	w8, [sp, #252]
    17c0:	b.ge	2f2c <BZ2_blockSort@@Base+0x1828>  // b.tcont
    17c4:	mov	w2, #0x40004               	// #262148
    17c8:	mov	x0, x22
    17cc:	mov	w1, wzr
    17d0:	add	x19, sp, #0x900
    17d4:	bl	14a0 <memset@plt>
    17d8:	ldrb	w10, [x24]
    17dc:	ldr	x23, [x29, #8]
    17e0:	sub	w12, w25, #0x4
    17e4:	sub	w13, w25, #0x3
    17e8:	sub	w14, w25, #0x2
    17ec:	sub	w9, w25, #0x1
    17f0:	add	x15, x20, w12, sxtw #1
    17f4:	add	x16, x20, w13, sxtw #1
    17f8:	add	x17, x20, w14, sxtw #1
    17fc:	mov	x8, xzr
    1800:	str	w9, [sp, #44]
    1804:	sub	w9, w25, #0x1
    1808:	add	x11, x24, w12, sxtw
    180c:	add	x12, x24, w13, sxtw
    1810:	add	x13, x24, w14, sxtw
    1814:	add	x14, x24, x15
    1818:	add	x15, x24, x16
    181c:	lsl	w10, w10, #8
    1820:	add	x16, x24, x17
    1824:	add	w17, w9, w8
    1828:	strh	wzr, [x23, w17, uxtw #1]
    182c:	ldrb	w17, [x24, x17]
    1830:	lsl	x0, x8, #1
    1834:	lsl	w17, w17, #8
    1838:	orr	w10, w17, w10, asr #8
    183c:	sbfiz	x17, x10, #2, #32
    1840:	ldr	w18, [x22, x17]
    1844:	add	w18, w18, #0x1
    1848:	str	w18, [x22, x17]
    184c:	strh	wzr, [x16, x0]
    1850:	ldrb	w17, [x13, x8]
    1854:	lsl	w17, w17, #8
    1858:	orr	w10, w17, w10, asr #8
    185c:	sbfiz	x17, x10, #2, #32
    1860:	ldr	w18, [x22, x17]
    1864:	add	w18, w18, #0x1
    1868:	str	w18, [x22, x17]
    186c:	strh	wzr, [x15, x0]
    1870:	ldrb	w17, [x12, x8]
    1874:	lsl	w17, w17, #8
    1878:	orr	w10, w17, w10, asr #8
    187c:	sbfiz	x17, x10, #2, #32
    1880:	ldr	w18, [x22, x17]
    1884:	add	w18, w18, #0x1
    1888:	str	w18, [x22, x17]
    188c:	strh	wzr, [x14, x0]
    1890:	ldrb	w17, [x11, x8]
    1894:	sub	x8, x8, #0x4
    1898:	add	w0, w25, w8
    189c:	add	w0, w0, #0x3
    18a0:	lsl	w17, w17, #8
    18a4:	orr	w10, w17, w10, asr #8
    18a8:	sbfiz	x17, x10, #2, #32
    18ac:	ldr	w18, [x22, x17]
    18b0:	cmp	w0, #0x6
    18b4:	add	w18, w18, #0x1
    18b8:	str	w18, [x22, x17]
    18bc:	b.gt	1824 <BZ2_blockSort@@Base+0x120>
    18c0:	ldr	x13, [sp, #24]
    18c4:	add	w9, w25, w8
    18c8:	add	w9, w9, #0x3
    18cc:	cmp	w9, #0x4
    18d0:	b.lt	1910 <BZ2_blockSort@@Base+0x20c>  // b.tstop
    18d4:	sub	w9, w13, #0x1
    18d8:	add	x8, x9, x8
    18dc:	and	x8, x8, #0xffffffff
    18e0:	add	x9, x24, x20
    18e4:	strh	wzr, [x9, x8, lsl #1]
    18e8:	ldrb	w11, [x24, x8]
    18ec:	cmp	x8, #0x0
    18f0:	sub	x8, x8, #0x1
    18f4:	lsl	w11, w11, #8
    18f8:	orr	w10, w11, w10, asr #8
    18fc:	sbfiz	x11, x10, #2, #32
    1900:	ldr	w12, [x22, x11]
    1904:	add	w12, w12, #0x1
    1908:	str	w12, [x22, x11]
    190c:	b.gt	18e4 <BZ2_blockSort@@Base+0x1e0>
    1910:	ldrb	w8, [x24]
    1914:	add	x9, x13, #0x1
    1918:	ldr	w10, [sp, #92]
    191c:	mov	x11, x23
    1920:	strb	w8, [x24, x13]
    1924:	strh	wzr, [x23, x13, lsl #1]
    1928:	ldrb	w8, [x24, #1]
    192c:	cmp	w10, #0x3
    1930:	strb	w8, [x24, x9]
    1934:	strh	wzr, [x23, x9, lsl #1]
    1938:	ldrb	w8, [x24, #2]
    193c:	add	x9, x13, #0x2
    1940:	strb	w8, [x24, x9]
    1944:	strh	wzr, [x23, x9, lsl #1]
    1948:	ldrb	w8, [x24, #3]
    194c:	add	x9, x13, #0x3
    1950:	strb	w8, [x24, x9]
    1954:	strh	wzr, [x23, x9, lsl #1]
    1958:	ldrb	w8, [x24, #4]
    195c:	add	x9, x13, #0x4
    1960:	strb	w8, [x24, x9]
    1964:	strh	wzr, [x23, x9, lsl #1]
    1968:	ldrb	w8, [x24, #5]
    196c:	add	x9, x13, #0x5
    1970:	strb	w8, [x24, x9]
    1974:	strh	wzr, [x23, x9, lsl #1]
    1978:	ldrb	w8, [x24, #6]
    197c:	add	x9, x13, #0x6
    1980:	strb	w8, [x24, x9]
    1984:	strh	wzr, [x23, x9, lsl #1]
    1988:	ldrb	w8, [x24, #7]
    198c:	add	x9, x13, #0x7
    1990:	strb	w8, [x24, x9]
    1994:	strh	wzr, [x23, x9, lsl #1]
    1998:	ldrb	w8, [x24, #8]
    199c:	add	x9, x13, #0x8
    19a0:	strb	w8, [x24, x9]
    19a4:	strh	wzr, [x23, x9, lsl #1]
    19a8:	ldrb	w8, [x24, #9]
    19ac:	add	x9, x13, #0x9
    19b0:	strb	w8, [x24, x9]
    19b4:	strh	wzr, [x23, x9, lsl #1]
    19b8:	ldrb	w8, [x24, #10]
    19bc:	add	x9, x13, #0xa
    19c0:	strb	w8, [x24, x9]
    19c4:	strh	wzr, [x23, x9, lsl #1]
    19c8:	ldrb	w8, [x24, #11]
    19cc:	add	x9, x13, #0xb
    19d0:	strb	w8, [x24, x9]
    19d4:	strh	wzr, [x23, x9, lsl #1]
    19d8:	ldrb	w8, [x24, #12]
    19dc:	add	x9, x13, #0xc
    19e0:	strb	w8, [x24, x9]
    19e4:	strh	wzr, [x23, x9, lsl #1]
    19e8:	ldrb	w8, [x24, #13]
    19ec:	add	x9, x13, #0xd
    19f0:	strb	w8, [x24, x9]
    19f4:	strh	wzr, [x23, x9, lsl #1]
    19f8:	ldrb	w8, [x24, #14]
    19fc:	add	x9, x13, #0xe
    1a00:	strb	w8, [x24, x9]
    1a04:	strh	wzr, [x23, x9, lsl #1]
    1a08:	ldrb	w8, [x24, #15]
    1a0c:	add	x9, x13, #0xf
    1a10:	strb	w8, [x24, x9]
    1a14:	strh	wzr, [x23, x9, lsl #1]
    1a18:	ldrb	w8, [x24, #16]
    1a1c:	add	x9, x13, #0x10
    1a20:	strb	w8, [x24, x9]
    1a24:	strh	wzr, [x23, x9, lsl #1]
    1a28:	ldrb	w8, [x24, #17]
    1a2c:	add	x9, x13, #0x11
    1a30:	strb	w8, [x24, x9]
    1a34:	strh	wzr, [x23, x9, lsl #1]
    1a38:	ldrb	w8, [x24, #18]
    1a3c:	add	x9, x13, #0x12
    1a40:	strb	w8, [x24, x9]
    1a44:	strh	wzr, [x23, x9, lsl #1]
    1a48:	ldrb	w8, [x24, #19]
    1a4c:	add	x9, x13, #0x13
    1a50:	strb	w8, [x24, x9]
    1a54:	strh	wzr, [x23, x9, lsl #1]
    1a58:	ldrb	w8, [x24, #20]
    1a5c:	add	x9, x13, #0x14
    1a60:	strb	w8, [x24, x9]
    1a64:	strh	wzr, [x23, x9, lsl #1]
    1a68:	ldrb	w8, [x24, #21]
    1a6c:	add	x9, x13, #0x15
    1a70:	strb	w8, [x24, x9]
    1a74:	strh	wzr, [x23, x9, lsl #1]
    1a78:	ldrb	w8, [x24, #22]
    1a7c:	add	x9, x13, #0x16
    1a80:	strb	w8, [x24, x9]
    1a84:	strh	wzr, [x23, x9, lsl #1]
    1a88:	ldrb	w8, [x24, #23]
    1a8c:	add	x9, x13, #0x17
    1a90:	strb	w8, [x24, x9]
    1a94:	strh	wzr, [x23, x9, lsl #1]
    1a98:	ldrb	w8, [x24, #24]
    1a9c:	add	x9, x13, #0x18
    1aa0:	strb	w8, [x24, x9]
    1aa4:	strh	wzr, [x23, x9, lsl #1]
    1aa8:	ldrb	w8, [x24, #25]
    1aac:	add	x9, x13, #0x19
    1ab0:	strb	w8, [x24, x9]
    1ab4:	strh	wzr, [x23, x9, lsl #1]
    1ab8:	ldrb	w8, [x24, #26]
    1abc:	add	x9, x13, #0x1a
    1ac0:	strb	w8, [x24, x9]
    1ac4:	strh	wzr, [x23, x9, lsl #1]
    1ac8:	ldrb	w8, [x24, #27]
    1acc:	add	x9, x13, #0x1b
    1ad0:	strb	w8, [x24, x9]
    1ad4:	strh	wzr, [x23, x9, lsl #1]
    1ad8:	ldrb	w8, [x24, #28]
    1adc:	add	x9, x13, #0x1c
    1ae0:	strb	w8, [x24, x9]
    1ae4:	strh	wzr, [x23, x9, lsl #1]
    1ae8:	ldrb	w8, [x24, #29]
    1aec:	add	x9, x13, #0x1d
    1af0:	strb	w8, [x24, x9]
    1af4:	strh	wzr, [x23, x9, lsl #1]
    1af8:	ldrb	w8, [x24, #30]
    1afc:	add	x9, x13, #0x1e
    1b00:	strb	w8, [x24, x9]
    1b04:	strh	wzr, [x23, x9, lsl #1]
    1b08:	ldrb	w8, [x24, #31]
    1b0c:	add	x9, x13, #0x1f
    1b10:	strb	w8, [x24, x9]
    1b14:	strh	wzr, [x23, x9, lsl #1]
    1b18:	ldrb	w8, [x24, #32]
    1b1c:	add	x9, x13, #0x20
    1b20:	strb	w8, [x24, x9]
    1b24:	strh	wzr, [x23, x9, lsl #1]
    1b28:	ldrb	w8, [x24, #33]
    1b2c:	add	x9, x13, #0x21
    1b30:	strb	w8, [x24, x9]
    1b34:	strh	wzr, [x23, x9, lsl #1]
    1b38:	b.gt	2f50 <BZ2_blockSort@@Base+0x184c>
    1b3c:	mov	x8, x22
    1b40:	ldr	w9, [x8], #4
    1b44:	mov	x10, xzr
    1b48:	ldr	w11, [x8, x10]
    1b4c:	add	w9, w11, w9
    1b50:	str	w9, [x8, x10]
    1b54:	add	x10, x10, #0x4
    1b58:	cmp	x10, #0x40, lsl #12
    1b5c:	b.ne	1b48 <BZ2_blockSort@@Base+0x444>  // b.any
    1b60:	ldrb	w9, [x24]
    1b64:	sub	w10, w13, #0x1
    1b68:	sub	w11, w25, #0x4
    1b6c:	sub	w12, w25, #0x3
    1b70:	sub	w13, w25, #0x2
    1b74:	mov	x8, xzr
    1b78:	add	x14, x24, w11, sxtw
    1b7c:	add	x15, x24, w12, sxtw
    1b80:	lsl	w9, w9, #8
    1b84:	add	x16, x24, w13, sxtw
    1b88:	add	x17, x10, x8
    1b8c:	ldrb	w18, [x24, w17, uxtw]
    1b90:	ubfx	w9, w9, #8, #8
    1b94:	bfi	w9, w18, #8, #8
    1b98:	lsl	x9, x9, #2
    1b9c:	ldr	w0, [x22, x9]
    1ba0:	sub	w0, w0, #0x1
    1ba4:	str	w0, [x22, x9]
    1ba8:	str	w17, [x21, w0, sxtw #2]
    1bac:	ldrb	w17, [x16, x8]
    1bb0:	lsl	x9, x18, #2
    1bb4:	add	w0, w13, w8
    1bb8:	bfi	x9, x17, #10, #8
    1bbc:	ldr	w18, [x22, x9]
    1bc0:	lsl	x17, x17, #2
    1bc4:	sub	w18, w18, #0x1
    1bc8:	str	w18, [x22, x9]
    1bcc:	str	w0, [x21, w18, sxtw #2]
    1bd0:	ldrb	w9, [x15, x8]
    1bd4:	add	w0, w12, w8
    1bd8:	bfi	x17, x9, #10, #8
    1bdc:	ldr	w18, [x22, x17]
    1be0:	sub	w18, w18, #0x1
    1be4:	str	w18, [x22, x17]
    1be8:	str	w0, [x21, w18, sxtw #2]
    1bec:	ldrb	w17, [x14, x8]
    1bf0:	add	w18, w11, w8
    1bf4:	sub	x8, x8, #0x4
    1bf8:	add	w1, w25, w8
    1bfc:	bfi	w9, w17, #8, #24
    1c00:	and	x17, x9, #0xffff
    1c04:	lsl	x17, x17, #2
    1c08:	ldr	w0, [x22, x17]
    1c0c:	add	w1, w1, #0x3
    1c10:	cmp	w1, #0x6
    1c14:	sub	w0, w0, #0x1
    1c18:	str	w0, [x22, x17]
    1c1c:	str	w18, [x21, w0, sxtw #2]
    1c20:	b.gt	1b88 <BZ2_blockSort@@Base+0x484>
    1c24:	add	w10, w25, w8
    1c28:	add	w10, w10, #0x3
    1c2c:	cmp	w10, #0x4
    1c30:	b.lt	1c74 <BZ2_blockSort@@Base+0x570>  // b.tstop
    1c34:	sub	w10, w25, #0x1
    1c38:	add	x8, x10, x8
    1c3c:	and	x10, x8, #0xffffffff
    1c40:	ldrb	w11, [x24, x10]
    1c44:	ubfx	w9, w9, #8, #8
    1c48:	cmp	x10, #0x0
    1c4c:	sub	x10, x10, #0x1
    1c50:	bfi	w9, w11, #8, #24
    1c54:	and	x11, x9, #0xffff
    1c58:	lsl	x11, x11, #2
    1c5c:	ldr	w12, [x22, x11]
    1c60:	sub	w12, w12, #0x1
    1c64:	str	w12, [x22, x11]
    1c68:	str	w8, [x21, w12, sxtw #2]
    1c6c:	sub	w8, w8, #0x1
    1c70:	b.gt	1c40 <BZ2_blockSort@@Base+0x53c>
    1c74:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1c78:	ldr	q1, [x9, #1184]
    1c7c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1c80:	ldr	q2, [x9, #1200]
    1c84:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1c88:	ldr	q3, [x9, #1216]
    1c8c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1c90:	ldr	q4, [x9, #1232]
    1c94:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1c98:	ldr	q5, [x9, #1248]
    1c9c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ca0:	ldr	q6, [x9, #1264]
    1ca4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ca8:	ldr	q7, [x9, #1280]
    1cac:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cb0:	ldr	q16, [x9, #1296]
    1cb4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cb8:	ldr	q17, [x9, #1312]
    1cbc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cc0:	ldr	q18, [x9, #1328]
    1cc4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cc8:	ldr	q19, [x9, #1344]
    1ccc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cd0:	ldr	q20, [x9, #1360]
    1cd4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cd8:	ldr	q21, [x9, #1376]
    1cdc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ce0:	ldr	q22, [x9, #1392]
    1ce4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ce8:	ldr	q23, [x9, #1408]
    1cec:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cf0:	ldr	q24, [x9, #1424]
    1cf4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1cf8:	ldr	q25, [x9, #1440]
    1cfc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d00:	ldr	q26, [x9, #1456]
    1d04:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d08:	ldr	q27, [x9, #1472]
    1d0c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d10:	ldr	q28, [x9, #1488]
    1d14:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d18:	ldr	q29, [x9, #1504]
    1d1c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d20:	ldr	q30, [x9, #1520]
    1d24:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d28:	ldr	q31, [x9, #1536]
    1d2c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d30:	ldr	q8, [x9, #1552]
    1d34:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d38:	ldr	q9, [x9, #1568]
    1d3c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d40:	movi	v0.2d, #0x0
    1d44:	ldr	q10, [x9, #1584]
    1d48:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d4c:	stp	q0, q0, [x19, #224]
    1d50:	stp	q0, q0, [x19, #192]
    1d54:	stp	q0, q0, [x19, #160]
    1d58:	stp	q0, q0, [x19, #128]
    1d5c:	stp	q0, q0, [x19, #96]
    1d60:	stp	q0, q0, [x19, #64]
    1d64:	stp	q0, q0, [x19, #32]
    1d68:	stp	q0, q0, [x19]
    1d6c:	ldr	q0, [x9, #1600]
    1d70:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d74:	stp	q1, q2, [x19, #256]
    1d78:	ldr	q1, [x9, #1616]
    1d7c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d80:	ldr	q2, [x9, #1632]
    1d84:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d88:	stp	q3, q4, [x19, #288]
    1d8c:	ldr	q3, [x9, #1648]
    1d90:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d94:	ldr	q4, [x9, #1664]
    1d98:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1d9c:	stp	q5, q6, [x19, #320]
    1da0:	ldr	q5, [x9, #1680]
    1da4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1da8:	ldr	q6, [x9, #1696]
    1dac:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1db0:	stp	q7, q16, [x19, #352]
    1db4:	ldr	q7, [x9, #1712]
    1db8:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1dbc:	ldr	q16, [x9, #1728]
    1dc0:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1dc4:	stp	q17, q18, [x19, #384]
    1dc8:	ldr	q17, [x9, #1744]
    1dcc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1dd0:	ldr	q18, [x9, #1760]
    1dd4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1dd8:	stp	q19, q20, [x19, #416]
    1ddc:	ldr	q19, [x9, #1776]
    1de0:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1de4:	ldr	q20, [x9, #1792]
    1de8:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1dec:	stp	q21, q22, [x19, #448]
    1df0:	ldr	q21, [x9, #1808]
    1df4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1df8:	stp	q0, q1, [x19, #672]
    1dfc:	ldr	q0, [x9, #1824]
    1e00:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e04:	ldr	q1, [x9, #1840]
    1e08:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e0c:	stp	q2, q3, [x19, #704]
    1e10:	ldr	q2, [x9, #1856]
    1e14:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e18:	ldr	q3, [x9, #1872]
    1e1c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e20:	stp	q4, q5, [x19, #736]
    1e24:	ldr	q4, [x9, #1888]
    1e28:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e2c:	ldr	q5, [x9, #1904]
    1e30:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e34:	stp	q6, q7, [x19, #768]
    1e38:	ldr	q6, [x9, #1920]
    1e3c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e40:	stp	q0, q1, [x19, #896]
    1e44:	ldr	q0, [x9, #1936]
    1e48:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e4c:	ldr	q1, [x9, #1952]
    1e50:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e54:	stp	q2, q3, [x19, #928]
    1e58:	ldr	q2, [x9, #1968]
    1e5c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e60:	stp	q6, q0, [x19, #992]
    1e64:	ldr	q0, [x9, #1984]
    1e68:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e6c:	str	q1, [x19, #1024]
    1e70:	ldr	q1, [x9, #2000]
    1e74:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e78:	str	q2, [x19, #1040]
    1e7c:	ldr	q2, [x9, #2016]
    1e80:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e84:	str	q0, [x19, #1056]
    1e88:	ldr	q0, [x9, #2032]
    1e8c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e90:	str	q1, [x19, #1072]
    1e94:	ldr	q1, [x9, #2048]
    1e98:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1e9c:	str	q2, [x19, #1088]
    1ea0:	ldr	q2, [x9, #2064]
    1ea4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ea8:	str	q0, [x19, #1104]
    1eac:	ldr	q0, [x9, #2080]
    1eb0:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1eb4:	str	q1, [x19, #1120]
    1eb8:	ldr	q1, [x9, #2096]
    1ebc:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ec0:	str	q2, [x19, #1136]
    1ec4:	ldr	q2, [x9, #2112]
    1ec8:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ecc:	str	q0, [x19, #1152]
    1ed0:	ldr	q0, [x9, #2128]
    1ed4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ed8:	str	q1, [x19, #1168]
    1edc:	ldr	q1, [x9, #2144]
    1ee0:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ee4:	str	q2, [x19, #1184]
    1ee8:	ldr	q2, [x9, #2160]
    1eec:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1ef0:	str	q0, [x19, #1200]
    1ef4:	ldr	q0, [x9, #2176]
    1ef8:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    1efc:	str	q1, [x19, #1216]
    1f00:	ldr	q1, [x9, #2192]
    1f04:	mov	x8, xzr
    1f08:	mov	w9, #0x79                  	// #121
    1f0c:	add	x10, sp, #0xa00
    1f10:	stp	q23, q24, [x19, #480]
    1f14:	stp	q25, q26, [x19, #512]
    1f18:	stp	q27, q28, [x19, #544]
    1f1c:	stp	q29, q30, [x19, #576]
    1f20:	stp	q31, q8, [x19, #608]
    1f24:	stp	q9, q10, [x19, #640]
    1f28:	stp	q16, q17, [x19, #800]
    1f2c:	stp	q18, q19, [x19, #832]
    1f30:	stp	q20, q21, [x19, #864]
    1f34:	stp	q4, q5, [x19, #960]
    1f38:	str	q2, [x19, #1232]
    1f3c:	str	q0, [x19, #1248]
    1f40:	str	q1, [x19, #1264]
    1f44:	b	1f60 <BZ2_blockSort@@Base+0x85c>
    1f48:	add	x12, x12, #0x79
    1f4c:	cmp	x9, #0xff
    1f50:	add	x9, x9, #0x1
    1f54:	add	x8, x8, #0x1
    1f58:	str	w11, [x10, x12, lsl #2]
    1f5c:	b.cs	1fb8 <BZ2_blockSort@@Base+0x8b4>  // b.hs, b.nlast
    1f60:	ldr	w11, [x10, x9, lsl #2]
    1f64:	lsl	w12, w11, #8
    1f68:	add	w13, w12, #0x100
    1f6c:	ldr	w13, [x22, w13, sxtw #2]
    1f70:	ldr	w12, [x22, w12, sxtw #2]
    1f74:	sub	w13, w13, w12
    1f78:	mov	x12, x8
    1f7c:	ldr	w14, [x10, x12, lsl #2]
    1f80:	lsl	w15, w14, #8
    1f84:	add	w16, w15, #0x100
    1f88:	ldr	w16, [x22, w16, sxtw #2]
    1f8c:	ldr	w15, [x22, w15, sxtw #2]
    1f90:	sub	w15, w16, w15
    1f94:	cmp	w15, w13
    1f98:	b.ls	1f48 <BZ2_blockSort@@Base+0x844>  // b.plast
    1f9c:	add	x15, x10, x12, lsl #2
    1fa0:	sub	x12, x12, #0x79
    1fa4:	add	w16, w12, #0xf2
    1fa8:	cmp	w16, #0xf2
    1fac:	str	w14, [x15, #484]
    1fb0:	b.ge	1f7c <BZ2_blockSort@@Base+0x878>  // b.tcont
    1fb4:	b	1f48 <BZ2_blockSort@@Base+0x844>
    1fb8:	mov	x8, xzr
    1fbc:	mov	w9, #0x28                  	// #40
    1fc0:	add	x10, sp, #0xa00
    1fc4:	b	1fe0 <BZ2_blockSort@@Base+0x8dc>
    1fc8:	add	x12, x12, #0x28
    1fcc:	cmp	x9, #0xff
    1fd0:	add	x9, x9, #0x1
    1fd4:	add	x8, x8, #0x1
    1fd8:	str	w11, [x10, x12, lsl #2]
    1fdc:	b.cs	2038 <BZ2_blockSort@@Base+0x934>  // b.hs, b.nlast
    1fe0:	ldr	w11, [x10, x9, lsl #2]
    1fe4:	lsl	w12, w11, #8
    1fe8:	add	w13, w12, #0x100
    1fec:	ldr	w13, [x22, w13, sxtw #2]
    1ff0:	ldr	w12, [x22, w12, sxtw #2]
    1ff4:	sub	w13, w13, w12
    1ff8:	mov	x12, x8
    1ffc:	ldr	w14, [x10, x12, lsl #2]
    2000:	lsl	w15, w14, #8
    2004:	add	w16, w15, #0x100
    2008:	ldr	w16, [x22, w16, sxtw #2]
    200c:	ldr	w15, [x22, w15, sxtw #2]
    2010:	sub	w15, w16, w15
    2014:	cmp	w15, w13
    2018:	b.ls	1fc8 <BZ2_blockSort@@Base+0x8c4>  // b.plast
    201c:	add	x15, x10, x12, lsl #2
    2020:	sub	x12, x12, #0x28
    2024:	add	w16, w12, #0x50
    2028:	cmp	w16, #0x50
    202c:	str	w14, [x15, #160]
    2030:	b.ge	1ffc <BZ2_blockSort@@Base+0x8f8>  // b.tcont
    2034:	b	1fc8 <BZ2_blockSort@@Base+0x8c4>
    2038:	mov	x8, xzr
    203c:	mov	w9, #0xd                   	// #13
    2040:	add	x10, sp, #0xa00
    2044:	b	2060 <BZ2_blockSort@@Base+0x95c>
    2048:	add	x12, x12, #0xd
    204c:	cmp	x9, #0xff
    2050:	add	x9, x9, #0x1
    2054:	add	x8, x8, #0x1
    2058:	str	w11, [x10, x12, lsl #2]
    205c:	b.cs	20b8 <BZ2_blockSort@@Base+0x9b4>  // b.hs, b.nlast
    2060:	ldr	w11, [x10, x9, lsl #2]
    2064:	lsl	w12, w11, #8
    2068:	add	w13, w12, #0x100
    206c:	ldr	w13, [x22, w13, sxtw #2]
    2070:	ldr	w12, [x22, w12, sxtw #2]
    2074:	sub	w13, w13, w12
    2078:	mov	x12, x8
    207c:	ldr	w14, [x10, x12, lsl #2]
    2080:	lsl	w15, w14, #8
    2084:	add	w16, w15, #0x100
    2088:	ldr	w16, [x22, w16, sxtw #2]
    208c:	ldr	w15, [x22, w15, sxtw #2]
    2090:	sub	w15, w16, w15
    2094:	cmp	w15, w13
    2098:	b.ls	2048 <BZ2_blockSort@@Base+0x944>  // b.plast
    209c:	add	x15, x10, x12, lsl #2
    20a0:	sub	x12, x12, #0xd
    20a4:	add	w16, w12, #0x1a
    20a8:	cmp	w16, #0x1a
    20ac:	str	w14, [x15, #52]
    20b0:	b.ge	207c <BZ2_blockSort@@Base+0x978>  // b.tcont
    20b4:	b	2048 <BZ2_blockSort@@Base+0x944>
    20b8:	mov	x8, xzr
    20bc:	mov	w9, #0x4                   	// #4
    20c0:	add	x10, sp, #0xa00
    20c4:	b	20e0 <BZ2_blockSort@@Base+0x9dc>
    20c8:	add	x12, x12, #0x4
    20cc:	cmp	x9, #0xff
    20d0:	add	x9, x9, #0x1
    20d4:	add	x8, x8, #0x1
    20d8:	str	w11, [x10, x12, lsl #2]
    20dc:	b.cs	2138 <BZ2_blockSort@@Base+0xa34>  // b.hs, b.nlast
    20e0:	ldr	w11, [x10, x9, lsl #2]
    20e4:	lsl	w12, w11, #8
    20e8:	add	w13, w12, #0x100
    20ec:	ldr	w13, [x22, w13, sxtw #2]
    20f0:	ldr	w12, [x22, w12, sxtw #2]
    20f4:	sub	w13, w13, w12
    20f8:	mov	x12, x8
    20fc:	ldr	w14, [x10, x12, lsl #2]
    2100:	lsl	w15, w14, #8
    2104:	add	w16, w15, #0x100
    2108:	ldr	w16, [x22, w16, sxtw #2]
    210c:	ldr	w15, [x22, w15, sxtw #2]
    2110:	sub	w15, w16, w15
    2114:	cmp	w15, w13
    2118:	b.ls	20c8 <BZ2_blockSort@@Base+0x9c4>  // b.plast
    211c:	add	x15, x10, x12, lsl #2
    2120:	sub	x12, x12, #0x4
    2124:	add	w16, w12, #0x8
    2128:	cmp	w16, #0x8
    212c:	str	w14, [x15, #16]
    2130:	b.ge	20fc <BZ2_blockSort@@Base+0x9f8>  // b.tcont
    2134:	b	20c8 <BZ2_blockSort@@Base+0x9c4>
    2138:	mov	x8, xzr
    213c:	mov	w9, #0x1                   	// #1
    2140:	add	x10, sp, #0xa00
    2144:	b	2160 <BZ2_blockSort@@Base+0xa5c>
    2148:	add	x12, x12, #0x1
    214c:	cmp	x9, #0xff
    2150:	add	x9, x9, #0x1
    2154:	add	x8, x8, #0x1
    2158:	str	w11, [x10, x12, lsl #2]
    215c:	b.cs	21b8 <BZ2_blockSort@@Base+0xab4>  // b.hs, b.nlast
    2160:	ldr	w11, [x10, x9, lsl #2]
    2164:	lsl	w12, w11, #8
    2168:	add	w13, w12, #0x100
    216c:	ldr	w13, [x22, w13, sxtw #2]
    2170:	ldr	w12, [x22, w12, sxtw #2]
    2174:	sub	w13, w13, w12
    2178:	mov	x12, x8
    217c:	ldr	w14, [x10, x12, lsl #2]
    2180:	lsl	w15, w14, #8
    2184:	add	w16, w15, #0x100
    2188:	ldr	w16, [x22, w16, sxtw #2]
    218c:	ldr	w15, [x22, w15, sxtw #2]
    2190:	sub	w15, w16, w15
    2194:	cmp	w15, w13
    2198:	b.ls	2148 <BZ2_blockSort@@Base+0xa44>  // b.plast
    219c:	add	x15, x10, x12, lsl #2
    21a0:	sub	x12, x12, #0x1
    21a4:	add	w16, w12, #0x2
    21a8:	cmp	w16, #0x2
    21ac:	str	w14, [x15, #4]
    21b0:	b.ge	217c <BZ2_blockSort@@Base+0xa78>  // b.tcont
    21b4:	b	2148 <BZ2_blockSort@@Base+0xa44>
    21b8:	add	x9, x21, #0x4
    21bc:	str	x9, [sp, #96]
    21c0:	add	x9, x21, #0x8
    21c4:	str	x9, [sp, #72]
    21c8:	add	x9, x21, #0x10
    21cc:	str	x9, [sp, #64]
    21d0:	add	x9, x21, #0x14
    21d4:	str	x9, [sp, #48]
    21d8:	add	x9, x22, #0x4
    21dc:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    21e0:	mov	x8, xzr
    21e4:	str	x9, [sp, #56]
    21e8:	sub	x9, x21, #0x4
    21ec:	add	x20, sp, #0x900
    21f0:	add	x26, sp, #0x500
    21f4:	add	x27, sp, #0x100
    21f8:	mov	w28, #0xfffe                	// #65534
    21fc:	add	x10, x10, #0x9e8
    2200:	str	wzr, [sp, #108]
    2204:	str	x9, [sp, #32]
    2208:	str	x22, [sp, #112]
    220c:	b	2228 <BZ2_blockSort@@Base+0xb24>
    2210:	ldr	x8, [sp, #80]
    2214:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    2218:	add	x10, x10, #0x9e8
    221c:	add	x8, x8, #0x1
    2220:	cmp	x8, #0x100
    2224:	b.eq	2e84 <BZ2_blockSort@@Base+0x1780>  // b.none
    2228:	add	x9, sp, #0xa00
    222c:	ldr	w19, [x9, x8, lsl #2]
    2230:	str	x8, [sp, #80]
    2234:	mov	x9, xzr
    2238:	mov	x11, xzr
    223c:	sxtw	x8, w19
    2240:	str	x8, [sp, #160]
    2244:	lsl	w8, w19, #8
    2248:	sxtw	x8, w8
    224c:	str	x8, [sp, #168]
    2250:	str	x19, [sp, #144]
    2254:	b	22b8 <BZ2_blockSort@@Base+0xbb4>
    2258:	ldr	x22, [sp, #112]
    225c:	ldr	x19, [sp, #144]
    2260:	ldr	x11, [sp, #192]
    2264:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    2268:	add	x20, sp, #0x900
    226c:	add	x26, sp, #0x500
    2270:	add	x27, sp, #0x100
    2274:	mov	w28, #0xfffe                	// #65534
    2278:	add	x10, x10, #0x9e8
    227c:	tbnz	w8, #31, 2e90 <BZ2_blockSort@@Base+0x178c>
    2280:	ldr	w9, [sp, #108]
    2284:	ldr	w12, [sp, #132]
    2288:	ldr	w8, [x22, x11, lsl #2]
    228c:	sub	w9, w9, w12
    2290:	ldr	w12, [sp, #128]
    2294:	add	w9, w9, w12
    2298:	add	w9, w9, #0x1
    229c:	str	w9, [sp, #108]
    22a0:	ldr	x9, [sp, #136]
    22a4:	orr	w8, w8, #0x200000
    22a8:	str	w8, [x22, x11, lsl #2]
    22ac:	add	x9, x9, #0x1
    22b0:	cmp	x9, #0x100
    22b4:	b.eq	2c6c <BZ2_blockSort@@Base+0x1568>  // b.none
    22b8:	cmp	x9, x19
    22bc:	b.eq	22ac <BZ2_blockSort@@Base+0xba8>  // b.none
    22c0:	ldr	x8, [sp, #168]
    22c4:	add	x11, x9, x8
    22c8:	ldr	w8, [x22, x11, lsl #2]
    22cc:	tbnz	w8, #21, 22a4 <BZ2_blockSort@@Base+0xba0>
    22d0:	str	x9, [sp, #136]
    22d4:	add	x9, x22, x11, lsl #2
    22d8:	ldr	w9, [x9, #4]
    22dc:	and	w12, w8, #0xffdfffff
    22e0:	and	w9, w9, #0xffdfffff
    22e4:	sub	w9, w9, #0x1
    22e8:	stp	w9, w12, [sp, #128]
    22ec:	subs	w9, w9, w12
    22f0:	b.le	22a0 <BZ2_blockSort@@Base+0xb9c>
    22f4:	ldr	w8, [sp, #92]
    22f8:	str	x11, [sp, #192]
    22fc:	cmp	w8, #0x4
    2300:	b.ge	2c34 <BZ2_blockSort@@Base+0x1530>  // b.tcont
    2304:	ldr	w8, [sp, #132]
    2308:	str	w8, [sp, #4384]
    230c:	ldr	w8, [sp, #128]
    2310:	str	w8, [sp, #3984]
    2314:	mov	w8, #0x2                   	// #2
    2318:	str	w8, [sp, #3584]
    231c:	mov	w8, #0x1                   	// #1
    2320:	sxtw	x20, w8
    2324:	sub	x26, x20, #0x1
    2328:	cmp	w8, #0x62
    232c:	lsl	x23, x26, #2
    2330:	b.ge	24ec <BZ2_blockSort@@Base+0xde8>  // b.tcont
    2334:	add	x8, sp, #0x1, lsl #12
    2338:	add	x8, x8, #0x120
    233c:	ldr	w1, [x8, x23]
    2340:	add	x8, sp, #0xf90
    2344:	ldr	w19, [x8, x23]
    2348:	add	x8, sp, #0xe00
    234c:	ldr	w27, [x8, x23]
    2350:	sub	w28, w19, w1
    2354:	cmp	w28, #0x14
    2358:	b.lt	26e0 <BZ2_blockSort@@Base+0xfdc>  // b.tstop
    235c:	cmp	w27, #0xe
    2360:	b.gt	26e0 <BZ2_blockSort@@Base+0xfdc>
    2364:	add	w8, w19, w1
    2368:	sxtw	x12, w1
    236c:	sxtw	x13, w19
    2370:	sbfx	x14, x8, #1, #31
    2374:	ldr	w8, [x21, x12, lsl #2]
    2378:	ldr	w9, [x21, x13, lsl #2]
    237c:	ldr	w10, [x21, x14, lsl #2]
    2380:	add	w8, w8, w27
    2384:	add	w9, w9, w27
    2388:	ldrb	w8, [x24, w8, uxtw]
    238c:	ldrb	w9, [x24, w9, uxtw]
    2390:	add	w10, w10, w27
    2394:	ldrb	w10, [x24, w10, uxtw]
    2398:	cmp	w8, w9
    239c:	csel	w11, w8, w9, hi  // hi = pmore
    23a0:	csel	w8, w9, w8, hi  // hi = pmore
    23a4:	cmp	w8, w10
    23a8:	csel	w8, w8, w10, hi  // hi = pmore
    23ac:	cmp	w11, w10
    23b0:	csel	w15, w8, w11, hi  // hi = pmore
    23b4:	mov	w10, w19
    23b8:	mov	w8, w1
    23bc:	mov	w11, w19
    23c0:	mov	w9, w1
    23c4:	cmp	w9, w11
    23c8:	b.gt	2434 <BZ2_blockSort@@Base+0xd30>
    23cc:	sxtw	x16, w11
    23d0:	sxtw	x8, w8
    23d4:	sxtw	x17, w9
    23d8:	ldr	w9, [x21, x17, lsl #2]
    23dc:	add	w18, w9, w27
    23e0:	ldrb	w18, [x24, w18, uxtw]
    23e4:	subs	w18, w18, w15
    23e8:	b.eq	2408 <BZ2_blockSort@@Base+0xd04>  // b.none
    23ec:	cmp	w18, #0x0
    23f0:	b.gt	2430 <BZ2_blockSort@@Base+0xd2c>
    23f4:	add	x9, x17, #0x1
    23f8:	cmp	x17, x16
    23fc:	mov	x17, x9
    2400:	b.lt	23d8 <BZ2_blockSort@@Base+0xcd4>  // b.tstop
    2404:	b	2434 <BZ2_blockSort@@Base+0xd30>
    2408:	lsl	x18, x8, #2
    240c:	ldr	w0, [x21, x18]
    2410:	add	x8, x8, #0x1
    2414:	cmp	w11, w17
    2418:	str	w0, [x21, x17, lsl #2]
    241c:	str	w9, [x21, x18]
    2420:	add	w9, w17, #0x1
    2424:	b.gt	23d4 <BZ2_blockSort@@Base+0xcd0>
    2428:	add	w9, w17, #0x1
    242c:	b	2434 <BZ2_blockSort@@Base+0xd30>
    2430:	mov	w9, w17
    2434:	cmp	w9, w11
    2438:	b.gt	24c0 <BZ2_blockSort@@Base+0xdbc>
    243c:	sxtw	x16, w9
    2440:	sxtw	x10, w10
    2444:	sxtw	x17, w11
    2448:	ldr	w11, [x21, x17, lsl #2]
    244c:	add	w18, w11, w27
    2450:	ldrb	w18, [x24, w18, uxtw]
    2454:	subs	w18, w18, w15
    2458:	b.eq	2474 <BZ2_blockSort@@Base+0xd70>  // b.none
    245c:	tbnz	w18, #31, 249c <BZ2_blockSort@@Base+0xd98>
    2460:	sub	x11, x17, #0x1
    2464:	cmp	x17, x16
    2468:	mov	x17, x11
    246c:	b.gt	2448 <BZ2_blockSort@@Base+0xd44>
    2470:	b	24c0 <BZ2_blockSort@@Base+0xdbc>
    2474:	lsl	x18, x10, #2
    2478:	ldr	w0, [x21, x18]
    247c:	sub	x10, x10, #0x1
    2480:	cmp	w9, w17
    2484:	str	w0, [x21, x17, lsl #2]
    2488:	str	w11, [x21, x18]
    248c:	sub	w11, w17, #0x1
    2490:	b.ge	24c0 <BZ2_blockSort@@Base+0xdbc>  // b.tcont
    2494:	sxtw	x17, w11
    2498:	b	2448 <BZ2_blockSort@@Base+0xd44>
    249c:	lsl	x16, x16, #2
    24a0:	ldr	w18, [x21, x16]
    24a4:	add	w9, w9, #0x1
    24a8:	str	w11, [x21, x16]
    24ac:	sub	w11, w17, #0x1
    24b0:	str	w18, [x21, x17, lsl #2]
    24b4:	cmp	w9, w11
    24b8:	b.le	23cc <BZ2_blockSort@@Base+0xcc8>
    24bc:	b	2434 <BZ2_blockSort@@Base+0xd30>
    24c0:	cmp	w10, w8
    24c4:	b.ge	2948 <BZ2_blockSort@@Base+0x1244>  // b.tcont
    24c8:	add	w8, w27, #0x1
    24cc:	cmp	w27, #0xd
    24d0:	add	x9, sp, #0xe00
    24d4:	mov	w27, w8
    24d8:	str	w8, [x9, x26, lsl #2]
    24dc:	b.le	2374 <BZ2_blockSort@@Base+0xc70>
    24e0:	str	x26, [sp, #200]
    24e4:	mov	w27, w8
    24e8:	b	26c8 <BZ2_blockSort@@Base+0xfc4>
    24ec:	mov	w0, #0x3e9                 	// #1001
    24f0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    24f4:	add	x8, sp, #0x1, lsl #12
    24f8:	add	x8, x8, #0x120
    24fc:	ldr	w1, [x8, x23]
    2500:	add	x8, sp, #0xf90
    2504:	ldr	w19, [x8, x23]
    2508:	add	x8, sp, #0xe00
    250c:	ldr	w27, [x8, x23]
    2510:	str	x26, [sp, #200]
    2514:	sub	w28, w19, w1
    2518:	cmp	w28, #0x14
    251c:	b.lt	26c8 <BZ2_blockSort@@Base+0xfc4>  // b.tstop
    2520:	cmp	w27, #0xe
    2524:	b.gt	26c8 <BZ2_blockSort@@Base+0xfc4>
    2528:	sxtw	x8, w1
    252c:	str	x8, [sp, #240]
    2530:	sxtw	x8, w19
    2534:	str	x8, [sp, #232]
    2538:	add	w8, w19, w1
    253c:	sbfx	x26, x8, #1, #31
    2540:	stp	x23, x20, [sp, #216]
    2544:	ldp	x9, x8, [sp, #232]
    2548:	ldr	w10, [x21, x26, lsl #2]
    254c:	ldr	w8, [x21, x8, lsl #2]
    2550:	ldr	w9, [x21, x9, lsl #2]
    2554:	add	w10, w10, w27
    2558:	ldrb	w10, [x24, w10, uxtw]
    255c:	add	w8, w8, w27
    2560:	add	w9, w9, w27
    2564:	ldrb	w8, [x24, w8, uxtw]
    2568:	ldrb	w9, [x24, w9, uxtw]
    256c:	cmp	w8, w9
    2570:	csel	w11, w8, w9, hi  // hi = pmore
    2574:	csel	w8, w9, w8, hi  // hi = pmore
    2578:	cmp	w8, w10
    257c:	csel	w8, w8, w10, hi  // hi = pmore
    2580:	cmp	w11, w10
    2584:	csel	w12, w8, w11, hi  // hi = pmore
    2588:	mov	w10, w19
    258c:	mov	w8, w1
    2590:	mov	w11, w19
    2594:	mov	w9, w1
    2598:	cmp	w9, w11
    259c:	b.gt	2608 <BZ2_blockSort@@Base+0xf04>
    25a0:	sxtw	x13, w11
    25a4:	sxtw	x8, w8
    25a8:	sxtw	x14, w9
    25ac:	ldr	w9, [x21, x14, lsl #2]
    25b0:	add	w15, w9, w27
    25b4:	ldrb	w15, [x24, w15, uxtw]
    25b8:	subs	w15, w15, w12
    25bc:	b.eq	25dc <BZ2_blockSort@@Base+0xed8>  // b.none
    25c0:	cmp	w15, #0x0
    25c4:	b.gt	2604 <BZ2_blockSort@@Base+0xf00>
    25c8:	add	x9, x14, #0x1
    25cc:	cmp	x14, x13
    25d0:	mov	x14, x9
    25d4:	b.lt	25ac <BZ2_blockSort@@Base+0xea8>  // b.tstop
    25d8:	b	2608 <BZ2_blockSort@@Base+0xf04>
    25dc:	lsl	x15, x8, #2
    25e0:	ldr	w16, [x21, x15]
    25e4:	add	x8, x8, #0x1
    25e8:	cmp	w11, w14
    25ec:	str	w16, [x21, x14, lsl #2]
    25f0:	str	w9, [x21, x15]
    25f4:	add	w9, w14, #0x1
    25f8:	b.gt	25a8 <BZ2_blockSort@@Base+0xea4>
    25fc:	add	w9, w14, #0x1
    2600:	b	2608 <BZ2_blockSort@@Base+0xf04>
    2604:	mov	w9, w14
    2608:	cmp	w9, w11
    260c:	b.gt	2690 <BZ2_blockSort@@Base+0xf8c>
    2610:	sxtw	x13, w9
    2614:	sxtw	x10, w10
    2618:	sxtw	x14, w11
    261c:	ldr	w11, [x21, x14, lsl #2]
    2620:	add	w15, w11, w27
    2624:	ldrb	w15, [x24, w15, uxtw]
    2628:	subs	w15, w15, w12
    262c:	b.eq	2648 <BZ2_blockSort@@Base+0xf44>  // b.none
    2630:	tbnz	w15, #31, 266c <BZ2_blockSort@@Base+0xf68>
    2634:	sub	x11, x14, #0x1
    2638:	cmp	x14, x13
    263c:	mov	x14, x11
    2640:	b.gt	261c <BZ2_blockSort@@Base+0xf18>
    2644:	b	2690 <BZ2_blockSort@@Base+0xf8c>
    2648:	lsl	x15, x10, #2
    264c:	ldr	w16, [x21, x15]
    2650:	sub	x10, x10, #0x1
    2654:	cmp	w9, w14
    2658:	str	w16, [x21, x14, lsl #2]
    265c:	str	w11, [x21, x15]
    2660:	sub	w11, w14, #0x1
    2664:	b.lt	2618 <BZ2_blockSort@@Base+0xf14>  // b.tstop
    2668:	b	2690 <BZ2_blockSort@@Base+0xf8c>
    266c:	lsl	x13, x13, #2
    2670:	ldr	w15, [x21, x13]
    2674:	add	w9, w9, #0x1
    2678:	str	w11, [x21, x13]
    267c:	sub	w11, w14, #0x1
    2680:	str	w15, [x21, x14, lsl #2]
    2684:	cmp	w9, w11
    2688:	b.le	25a0 <BZ2_blockSort@@Base+0xe9c>
    268c:	b	2608 <BZ2_blockSort@@Base+0xf04>
    2690:	cmp	w10, w8
    2694:	b.ge	2944 <BZ2_blockSort@@Base+0x1240>  // b.tcont
    2698:	ldr	x9, [sp, #200]
    269c:	add	w20, w27, #0x1
    26a0:	add	x8, sp, #0xe00
    26a4:	mov	w0, #0x3e9                 	// #1001
    26a8:	str	w20, [x8, x9, lsl #2]
    26ac:	mov	x23, x1
    26b0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    26b4:	mov	x1, x23
    26b8:	cmp	w27, #0xd
    26bc:	mov	w27, w20
    26c0:	b.le	2544 <BZ2_blockSort@@Base+0xe40>
    26c4:	mov	w27, w20
    26c8:	ldr	x11, [sp, #192]
    26cc:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    26d0:	add	x10, x10, #0x9e8
    26d4:	cmp	w28, #0x1
    26d8:	b.ge	26ec <BZ2_blockSort@@Base+0xfe8>  // b.tcont
    26dc:	b	2708 <BZ2_blockSort@@Base+0x1004>
    26e0:	str	x26, [sp, #200]
    26e4:	cmp	w28, #0x1
    26e8:	b.lt	2708 <BZ2_blockSort@@Base+0x1004>  // b.tstop
    26ec:	mov	x8, xzr
    26f0:	ldr	w9, [x10, x8, lsl #2]
    26f4:	add	x8, x8, #0x1
    26f8:	cmp	w9, w28
    26fc:	b.le	26f0 <BZ2_blockSort@@Base+0xfec>
    2700:	cmp	w8, #0x1
    2704:	b.ne	2734 <BZ2_blockSort@@Base+0x1030>  // b.any
    2708:	ldr	w8, [sp, #252]
    270c:	ldr	x19, [sp, #144]
    2710:	add	x20, sp, #0x900
    2714:	add	x26, sp, #0x500
    2718:	add	x27, sp, #0x100
    271c:	mov	w28, #0xfffe                	// #65534
    2720:	tbnz	w8, #31, 227c <BZ2_blockSort@@Base+0xb78>
    2724:	ldr	x8, [sp, #200]
    2728:	cmp	w8, #0x0
    272c:	b.gt	2320 <BZ2_blockSort@@Base+0xc1c>
    2730:	b	2c2c <BZ2_blockSort@@Base+0x1528>
    2734:	sxtw	x9, w19
    2738:	sub	x8, x8, #0x1
    273c:	str	x9, [sp, #240]
    2740:	add	w9, w1, #0x1
    2744:	str	w9, [sp, #156]
    2748:	and	x8, x8, #0xffffffff
    274c:	add	w9, w1, #0x2
    2750:	str	w9, [sp, #152]
    2754:	str	x1, [sp, #120]
    2758:	b	2778 <BZ2_blockSort@@Base+0x1074>
    275c:	ldr	x8, [sp, #176]
    2760:	ldp	x22, x1, [sp, #112]
    2764:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    2768:	add	x10, x10, #0x9e8
    276c:	cmp	x8, #0x1
    2770:	ldp	x8, x11, [sp, #184]
    2774:	b.le	2708 <BZ2_blockSort@@Base+0x1004>
    2778:	str	x8, [sp, #176]
    277c:	sub	x8, x8, #0x1
    2780:	ldr	w28, [x10, x8, lsl #2]
    2784:	str	x8, [sp, #184]
    2788:	str	w1, [sp, #232]
    278c:	add	w8, w28, w1
    2790:	sxtw	x23, w8
    2794:	ldr	w8, [sp, #152]
    2798:	mov	x20, x23
    279c:	str	w8, [sp, #216]
    27a0:	ldr	w8, [sp, #156]
    27a4:	str	w8, [sp, #224]
    27a8:	mov	w8, w1
    27ac:	b	27f0 <BZ2_blockSort@@Base+0x10ec>
    27b0:	add	w8, w28, w22
    27b4:	sxtw	x22, w8
    27b8:	ldr	w9, [sp, #232]
    27bc:	ldr	w8, [sp, #212]
    27c0:	add	x20, x20, #0x3
    27c4:	add	w9, w9, #0x3
    27c8:	str	w9, [sp, #232]
    27cc:	ldr	w9, [sp, #224]
    27d0:	str	w8, [x21, x22, lsl #2]
    27d4:	ldr	w8, [sp, #252]
    27d8:	add	w9, w9, #0x3
    27dc:	str	w9, [sp, #224]
    27e0:	ldr	w9, [sp, #216]
    27e4:	add	w9, w9, #0x3
    27e8:	str	w9, [sp, #216]
    27ec:	tbnz	w8, #31, 2258 <BZ2_blockSort@@Base+0xb54>
    27f0:	ldr	x8, [sp, #240]
    27f4:	cmp	x20, x8
    27f8:	b.gt	275c <BZ2_blockSort@@Base+0x1058>
    27fc:	ldr	w8, [x21, x20, lsl #2]
    2800:	ldr	w26, [sp, #232]
    2804:	add	w19, w8, w27
    2808:	str	w8, [sp, #212]
    280c:	ldr	w8, [x21, w26, sxtw #2]
    2810:	ldr	x3, [x29, #8]
    2814:	add	x5, sp, #0xfc
    2818:	mov	w1, w19
    281c:	add	w0, w8, w27
    2820:	mov	x2, x24
    2824:	mov	w4, w25
    2828:	sxtw	x22, w26
    282c:	bl	3a18 <BZ2_blockSort@@Base+0x2314>
    2830:	tst	w0, #0xff
    2834:	b.eq	2854 <BZ2_blockSort@@Base+0x1150>  // b.none
    2838:	ldr	w8, [x21, x22, lsl #2]
    283c:	add	w9, w28, w26
    2840:	cmp	w22, w23
    2844:	sub	w26, w22, w28
    2848:	str	w8, [x21, w9, sxtw #2]
    284c:	b.ge	280c <BZ2_blockSort@@Base+0x1108>  // b.tcont
    2850:	b	285c <BZ2_blockSort@@Base+0x1158>
    2854:	add	w8, w28, w22
    2858:	sxtw	x22, w8
    285c:	ldr	x8, [sp, #240]
    2860:	cmp	x20, x8
    2864:	ldr	w8, [sp, #212]
    2868:	str	w8, [x21, x22, lsl #2]
    286c:	b.ge	275c <BZ2_blockSort@@Base+0x1058>  // b.tcont
    2870:	add	x8, x20, #0x1
    2874:	ldr	w8, [x21, x8, lsl #2]
    2878:	ldr	w26, [sp, #224]
    287c:	add	w19, w8, w27
    2880:	str	w8, [sp, #212]
    2884:	ldr	w8, [x21, w26, sxtw #2]
    2888:	ldr	x3, [x29, #8]
    288c:	add	x5, sp, #0xfc
    2890:	mov	w1, w19
    2894:	add	w0, w8, w27
    2898:	mov	x2, x24
    289c:	mov	w4, w25
    28a0:	sxtw	x22, w26
    28a4:	bl	3a18 <BZ2_blockSort@@Base+0x2314>
    28a8:	tst	w0, #0xff
    28ac:	b.eq	28cc <BZ2_blockSort@@Base+0x11c8>  // b.none
    28b0:	ldr	w8, [x21, x22, lsl #2]
    28b4:	add	w9, w28, w26
    28b8:	cmp	w22, w23
    28bc:	sub	w26, w22, w28
    28c0:	str	w8, [x21, w9, sxtw #2]
    28c4:	b.ge	2884 <BZ2_blockSort@@Base+0x1180>  // b.tcont
    28c8:	b	28d4 <BZ2_blockSort@@Base+0x11d0>
    28cc:	add	w8, w28, w22
    28d0:	sxtw	x22, w8
    28d4:	ldr	x9, [sp, #240]
    28d8:	add	x8, x20, #0x2
    28dc:	cmp	x8, x9
    28e0:	ldr	w9, [sp, #212]
    28e4:	str	w9, [x21, x22, lsl #2]
    28e8:	b.gt	275c <BZ2_blockSort@@Base+0x1058>
    28ec:	ldr	w8, [x21, x8, lsl #2]
    28f0:	ldr	w26, [sp, #216]
    28f4:	add	w19, w8, w27
    28f8:	str	w8, [sp, #212]
    28fc:	ldr	w8, [x21, w26, sxtw #2]
    2900:	ldr	x3, [x29, #8]
    2904:	add	x5, sp, #0xfc
    2908:	mov	w1, w19
    290c:	add	w0, w8, w27
    2910:	mov	x2, x24
    2914:	mov	w4, w25
    2918:	sxtw	x22, w26
    291c:	bl	3a18 <BZ2_blockSort@@Base+0x2314>
    2920:	tst	w0, #0xff
    2924:	b.eq	27b0 <BZ2_blockSort@@Base+0x10ac>  // b.none
    2928:	ldr	w8, [x21, x22, lsl #2]
    292c:	add	w9, w28, w26
    2930:	cmp	w22, w23
    2934:	sub	w26, w22, w28
    2938:	str	w8, [x21, w9, sxtw #2]
    293c:	b.ge	28fc <BZ2_blockSort@@Base+0x11f8>  // b.tcont
    2940:	b	27b8 <BZ2_blockSort@@Base+0x10b4>
    2944:	ldp	x23, x20, [sp, #216]
    2948:	sub	w16, w8, w1
    294c:	sub	w17, w9, w8
    2950:	cmp	w16, w17
    2954:	csel	w12, w16, w17, lt  // lt = tstop
    2958:	cmp	w12, #0x1
    295c:	mov	w28, #0xfffe                	// #65534
    2960:	b.lt	2a48 <BZ2_blockSort@@Base+0x1344>  // b.tstop
    2964:	cmp	w16, w17
    2968:	csel	w14, w16, w17, lt  // lt = tstop
    296c:	cmp	w14, #0x1
    2970:	csinc	w14, w14, wzr, lt  // lt = tstop
    2974:	sub	w13, w9, w12
    2978:	sub	w15, w12, w14
    297c:	sxtw	x13, w13
    2980:	cmp	w15, #0x7
    2984:	sxtw	x14, w1
    2988:	b.cc	2a20 <BZ2_blockSort@@Base+0x131c>  // b.lo, b.ul, b.last
    298c:	cmp	w16, w17
    2990:	csel	w16, w16, w17, lt  // lt = tstop
    2994:	cmp	w16, #0x1
    2998:	ldr	x0, [sp, #96]
    299c:	csinc	w16, w16, wzr, lt  // lt = tstop
    29a0:	sub	w16, w12, w16
    29a4:	add	x17, x13, x16
    29a8:	add	x18, x21, x14, lsl #2
    29ac:	add	x17, x0, x17, lsl #2
    29b0:	cmp	x18, x17
    29b4:	b.cs	29d0 <BZ2_blockSort@@Base+0x12cc>  // b.hs, b.nlast
    29b8:	ldr	x17, [sp, #96]
    29bc:	add	x16, x14, x16
    29c0:	add	x16, x17, x16, lsl #2
    29c4:	add	x17, x21, x13, lsl #2
    29c8:	cmp	x17, x16
    29cc:	b.cc	2a20 <BZ2_blockSort@@Base+0x131c>  // b.lo, b.ul, b.last
    29d0:	ldr	x0, [sp, #64]
    29d4:	add	x15, x15, #0x1
    29d8:	and	x17, x15, #0x1fffffff8
    29dc:	add	x16, x17, x14
    29e0:	add	x18, x0, x13, lsl #2
    29e4:	add	x13, x17, x13
    29e8:	sub	w12, w12, w17
    29ec:	add	x14, x0, x14, lsl #2
    29f0:	mov	x0, x17
    29f4:	ldp	q0, q3, [x14, #-16]
    29f8:	ldp	q1, q2, [x18, #-16]
    29fc:	subs	x0, x0, #0x8
    2a00:	stp	q1, q2, [x14, #-16]
    2a04:	stp	q0, q3, [x18, #-16]
    2a08:	add	x18, x18, #0x20
    2a0c:	add	x14, x14, #0x20
    2a10:	b.ne	29f4 <BZ2_blockSort@@Base+0x12f0>  // b.any
    2a14:	cmp	x15, x17
    2a18:	mov	x14, x16
    2a1c:	b.eq	2a48 <BZ2_blockSort@@Base+0x1344>  // b.none
    2a20:	add	x14, x21, x14, lsl #2
    2a24:	add	x13, x21, x13, lsl #2
    2a28:	add	w12, w12, #0x1
    2a2c:	ldr	w15, [x13]
    2a30:	ldr	w16, [x14]
    2a34:	sub	w12, w12, #0x1
    2a38:	cmp	w12, #0x1
    2a3c:	str	w15, [x14], #4
    2a40:	str	w16, [x13], #4
    2a44:	b.gt	2a2c <BZ2_blockSort@@Base+0x1328>
    2a48:	sub	w15, w19, w10
    2a4c:	sub	w10, w10, w11
    2a50:	cmp	w15, w10
    2a54:	csel	w11, w15, w10, lt  // lt = tstop
    2a58:	cmp	w11, #0x1
    2a5c:	b.lt	2b4c <BZ2_blockSort@@Base+0x1448>  // b.tstop
    2a60:	cmp	w15, w10
    2a64:	csel	w13, w15, w10, lt  // lt = tstop
    2a68:	cmp	w13, #0x1
    2a6c:	csinc	w13, w13, wzr, lt  // lt = tstop
    2a70:	sub	w12, w19, w11
    2a74:	sub	w14, w11, w13
    2a78:	sxtw	x12, w12
    2a7c:	cmp	w14, #0x7
    2a80:	sxtw	x13, w9
    2a84:	b.cc	2b20 <BZ2_blockSort@@Base+0x141c>  // b.lo, b.ul, b.last
    2a88:	cmp	w15, w10
    2a8c:	csel	w15, w15, w10, lt  // lt = tstop
    2a90:	cmp	w15, #0x1
    2a94:	ldr	x18, [sp, #72]
    2a98:	csinc	w15, w15, wzr, lt  // lt = tstop
    2a9c:	sub	w15, w11, w15
    2aa0:	add	x17, x12, x15
    2aa4:	add	x16, x21, x13, lsl #2
    2aa8:	add	x17, x18, x17, lsl #2
    2aac:	cmp	x16, x17
    2ab0:	b.cs	2acc <BZ2_blockSort@@Base+0x13c8>  // b.hs, b.nlast
    2ab4:	ldr	x16, [sp, #96]
    2ab8:	add	x15, x13, x15
    2abc:	add	x15, x16, x15, lsl #2
    2ac0:	add	x16, x16, x12, lsl #2
    2ac4:	cmp	x16, x15
    2ac8:	b.cc	2b20 <BZ2_blockSort@@Base+0x141c>  // b.lo, b.ul, b.last
    2acc:	ldr	x15, [sp, #48]
    2ad0:	ldr	x18, [sp, #64]
    2ad4:	add	x14, x14, #0x1
    2ad8:	and	x16, x14, #0x1fffffff8
    2adc:	add	x17, x15, x12, lsl #2
    2ae0:	add	x15, x16, x13
    2ae4:	add	x12, x16, x12
    2ae8:	sub	w11, w11, w16
    2aec:	add	x13, x18, x13, lsl #2
    2af0:	mov	x18, x16
    2af4:	ldp	q0, q3, [x13, #-16]
    2af8:	ldp	q1, q2, [x17, #-16]
    2afc:	subs	x18, x18, #0x8
    2b00:	stp	q1, q2, [x13, #-16]
    2b04:	stp	q0, q3, [x17, #-16]
    2b08:	add	x17, x17, #0x20
    2b0c:	add	x13, x13, #0x20
    2b10:	b.ne	2af4 <BZ2_blockSort@@Base+0x13f0>  // b.any
    2b14:	cmp	x14, x16
    2b18:	mov	x13, x15
    2b1c:	b.eq	2b4c <BZ2_blockSort@@Base+0x1448>  // b.none
    2b20:	ldr	x14, [sp, #96]
    2b24:	add	x13, x21, x13, lsl #2
    2b28:	add	w11, w11, #0x1
    2b2c:	add	x12, x14, x12, lsl #2
    2b30:	ldr	w14, [x12]
    2b34:	ldr	w15, [x13]
    2b38:	sub	w11, w11, #0x1
    2b3c:	cmp	w11, #0x1
    2b40:	str	w14, [x13], #4
    2b44:	str	w15, [x12], #4
    2b48:	b.gt	2b30 <BZ2_blockSort@@Base+0x142c>
    2b4c:	sub	w8, w1, w8
    2b50:	sub	w10, w19, w10
    2b54:	add	w8, w8, w9
    2b58:	add	w9, w10, #0x1
    2b5c:	sub	w11, w8, #0x1
    2b60:	sub	w9, w19, w9
    2b64:	sub	w13, w11, w1
    2b68:	cmp	w13, w9
    2b6c:	csinc	w9, w1, w10, lt  // lt = tstop
    2b70:	csel	w14, w11, w19, lt  // lt = tstop
    2b74:	sub	w12, w10, w8
    2b78:	sub	w15, w14, w9
    2b7c:	csinc	w13, w1, w10, ge  // ge = tcont
    2b80:	csel	w11, w19, w11, lt  // lt = tstop
    2b84:	cmp	w15, w12
    2b88:	csel	w12, w8, w9, lt  // lt = tstop
    2b8c:	csel	w15, w14, w10, lt  // lt = tstop
    2b90:	csel	w10, w10, w14, lt  // lt = tstop
    2b94:	sub	w16, w11, w13
    2b98:	csel	w8, w9, w8, lt  // lt = tstop
    2b9c:	sub	w9, w10, w12
    2ba0:	cinc	w14, w27, ge  // ge = tcont
    2ba4:	cinc	w17, w27, lt  // lt = tstop
    2ba8:	cmp	w16, w9
    2bac:	add	x0, sp, #0x1, lsl #12
    2bb0:	csel	w16, w13, w12, lt  // lt = tstop
    2bb4:	csel	w12, w12, w13, lt  // lt = tstop
    2bb8:	add	x0, x0, #0x120
    2bbc:	csel	w13, w11, w10, lt  // lt = tstop
    2bc0:	csel	w10, w10, w11, lt  // lt = tstop
    2bc4:	str	w12, [x0, x23]
    2bc8:	add	x12, sp, #0xf90
    2bcc:	lsl	x9, x20, #2
    2bd0:	csel	w11, w27, w17, lt  // lt = tstop
    2bd4:	csel	w17, w17, w27, lt  // lt = tstop
    2bd8:	str	w10, [x12, x23]
    2bdc:	add	x10, sp, #0xe00
    2be0:	str	w17, [x10, x23]
    2be4:	str	w11, [x10, x9]
    2be8:	ldr	x19, [sp, #144]
    2bec:	ldr	x11, [sp, #192]
    2bf0:	add	x18, x9, #0x4
    2bf4:	str	w16, [x0, x9]
    2bf8:	str	w8, [x0, x18]
    2bfc:	str	w14, [x10, x18]
    2c00:	add	w8, w20, #0x2
    2c04:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    2c08:	str	w13, [x12, x9]
    2c0c:	str	w15, [x12, x18]
    2c10:	str	x8, [sp, #200]
    2c14:	add	x20, sp, #0x900
    2c18:	add	x26, sp, #0x500
    2c1c:	add	x27, sp, #0x100
    2c20:	add	x10, x10, #0x9e8
    2c24:	cmp	w8, #0x0
    2c28:	b.gt	2320 <BZ2_blockSort@@Base+0xc1c>
    2c2c:	ldr	w8, [sp, #252]
    2c30:	b	227c <BZ2_blockSort@@Base+0xb78>
    2c34:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2c38:	ldr	x8, [x8, #4016]
    2c3c:	ldr	w4, [sp, #108]
    2c40:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    2c44:	add	w5, w9, #0x1
    2c48:	ldr	x0, [x8]
    2c4c:	add	x1, x1, #0x98b
    2c50:	mov	w2, w19
    2c54:	ldr	x3, [sp, #136]
    2c58:	bl	1610 <fprintf@plt>
    2c5c:	ldr	x11, [sp, #192]
    2c60:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    2c64:	add	x10, x10, #0x9e8
    2c68:	b	2304 <BZ2_blockSort@@Base+0xc00>
    2c6c:	ldr	x8, [sp, #160]
    2c70:	ldrb	w8, [x20, x8]
    2c74:	cbz	w8, 2c80 <BZ2_blockSort@@Base+0x157c>
    2c78:	mov	w0, #0x3ee                 	// #1006
    2c7c:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2c80:	ldr	x9, [sp, #56]
    2c84:	ldr	x10, [sp, #160]
    2c88:	mov	x8, xzr
    2c8c:	add	x9, x9, x10, lsl #2
    2c90:	ldur	w10, [x9, #-4]
    2c94:	and	w10, w10, #0xffdfffff
    2c98:	str	w10, [x26, x8]
    2c9c:	ldr	w10, [x9]
    2ca0:	add	x9, x9, #0x400
    2ca4:	and	w10, w10, #0xffdfffff
    2ca8:	sub	w10, w10, #0x1
    2cac:	str	w10, [x27, x8]
    2cb0:	add	x8, x8, #0x4
    2cb4:	cmp	x8, #0x400
    2cb8:	b.ne	2c90 <BZ2_blockSort@@Base+0x158c>  // b.any
    2cbc:	ldr	x8, [sp, #168]
    2cc0:	ldrsw	x9, [x22, x8, lsl #2]
    2cc4:	ldr	x8, [sp, #160]
    2cc8:	and	x9, x9, #0xffffffffffdfffff
    2ccc:	ldr	w8, [x26, x8, lsl #2]
    2cd0:	cmp	w9, w8
    2cd4:	b.lt	2d44 <BZ2_blockSort@@Base+0x1640>  // b.tstop
    2cd8:	ldr	x9, [sp, #168]
    2cdc:	add	w19, w9, #0x100
    2ce0:	ldr	x9, [sp, #160]
    2ce4:	ldr	w10, [x22, w19, sxtw #2]
    2ce8:	ldr	w9, [x27, x9, lsl #2]
    2cec:	and	w10, w10, #0xffdfffff
    2cf0:	sub	w10, w10, #0x1
    2cf4:	cmp	w10, w9
    2cf8:	b.le	2d80 <BZ2_blockSort@@Base+0x167c>
    2cfc:	ldr	w11, [x21, w10, sxtw #2]
    2d00:	sub	w11, w11, #0x1
    2d04:	and	w12, w25, w11, asr #31
    2d08:	add	w11, w12, w11
    2d0c:	ldrb	w12, [x24, w11, sxtw]
    2d10:	ldrb	w13, [x20, x12]
    2d14:	cbnz	w13, 2cf0 <BZ2_blockSort@@Base+0x15ec>
    2d18:	lsl	x9, x12, #2
    2d1c:	ldrsw	x12, [x27, x9]
    2d20:	sub	w13, w12, #0x1
    2d24:	str	w13, [x27, x9]
    2d28:	ldr	x9, [sp, #160]
    2d2c:	str	w11, [x21, x12, lsl #2]
    2d30:	ldr	w9, [x27, x9, lsl #2]
    2d34:	b	2cf0 <BZ2_blockSort@@Base+0x15ec>
    2d38:	add	x9, x9, #0x1
    2d3c:	cmp	x9, w8, sxtw
    2d40:	b.ge	2cd8 <BZ2_blockSort@@Base+0x15d4>  // b.tcont
    2d44:	ldr	w10, [x21, x9, lsl #2]
    2d48:	sub	w10, w10, #0x1
    2d4c:	and	w11, w25, w10, asr #31
    2d50:	add	w10, w11, w10
    2d54:	ldrb	w11, [x24, w10, sxtw]
    2d58:	ldrb	w12, [x20, x11]
    2d5c:	cbnz	w12, 2d38 <BZ2_blockSort@@Base+0x1634>
    2d60:	lsl	x8, x11, #2
    2d64:	ldrsw	x11, [x26, x8]
    2d68:	add	w12, w11, #0x1
    2d6c:	str	w12, [x26, x8]
    2d70:	ldr	x8, [sp, #160]
    2d74:	str	w10, [x21, x11, lsl #2]
    2d78:	ldr	w8, [x26, x8, lsl #2]
    2d7c:	b	2d38 <BZ2_blockSort@@Base+0x1634>
    2d80:	sub	w10, w8, #0x1
    2d84:	cmp	w10, w9
    2d88:	b.eq	2da4 <BZ2_blockSort@@Base+0x16a0>  // b.none
    2d8c:	cbnz	w8, 2d9c <BZ2_blockSort@@Base+0x1698>
    2d90:	ldr	w8, [sp, #44]
    2d94:	cmp	w9, w8
    2d98:	b.eq	2da4 <BZ2_blockSort@@Base+0x16a0>  // b.none
    2d9c:	mov	w0, #0x3ef                 	// #1007
    2da0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2da4:	ldr	x10, [sp, #160]
    2da8:	mov	x9, xzr
    2dac:	sxtw	x8, w19
    2db0:	add	x10, x22, x10, lsl #2
    2db4:	add	x11, x10, x9
    2db8:	ldr	w12, [x11]
    2dbc:	ldr	w13, [x11, #1024]
    2dc0:	add	x9, x9, #0x800
    2dc4:	cmp	x9, #0x40, lsl #12
    2dc8:	orr	w12, w12, #0x200000
    2dcc:	orr	w13, w13, #0x200000
    2dd0:	str	w12, [x11]
    2dd4:	str	w13, [x11, #1024]
    2dd8:	b.ne	2db4 <BZ2_blockSort@@Base+0x16b0>  // b.any
    2ddc:	ldr	x9, [sp, #80]
    2de0:	ldr	x10, [sp, #160]
    2de4:	ldr	x23, [x29, #8]
    2de8:	cmp	x9, #0xfe
    2dec:	mov	w9, #0x1                   	// #1
    2df0:	strb	w9, [x20, x10]
    2df4:	b.hi	2210 <BZ2_blockSort@@Base+0xb0c>  // b.pmore
    2df8:	ldr	x9, [sp, #168]
    2dfc:	ldr	w8, [x22, x8, lsl #2]
    2e00:	ldrsw	x9, [x22, x9, lsl #2]
    2e04:	and	w8, w8, #0xffdfffff
    2e08:	and	x10, x9, #0xffffffffffdfffff
    2e0c:	sub	w11, w8, w10
    2e10:	mov	w8, #0xffffffff            	// #-1
    2e14:	add	w8, w8, #0x1
    2e18:	asr	w9, w11, w8
    2e1c:	cmp	w9, w28
    2e20:	b.gt	2e14 <BZ2_blockSort@@Base+0x1710>
    2e24:	subs	w9, w11, #0x1
    2e28:	b.lt	2e6c <BZ2_blockSort@@Base+0x1768>  // b.tstop
    2e2c:	ldr	x12, [sp, #32]
    2e30:	mov	w11, w11
    2e34:	add	x10, x12, x10, lsl #2
    2e38:	b	2e48 <BZ2_blockSort@@Base+0x1744>
    2e3c:	add	x12, x11, #0x1
    2e40:	cmp	x12, #0x1
    2e44:	b.le	2e6c <BZ2_blockSort@@Base+0x1768>
    2e48:	ldrsw	x12, [x10, x11, lsl #2]
    2e4c:	sub	x11, x11, #0x1
    2e50:	lsr	w13, w11, w8
    2e54:	cmp	w12, #0x21
    2e58:	strh	w13, [x23, x12, lsl #1]
    2e5c:	b.gt	2e3c <BZ2_blockSort@@Base+0x1738>
    2e60:	add	w12, w12, w25
    2e64:	strh	w13, [x23, w12, sxtw #1]
    2e68:	b	2e3c <BZ2_blockSort@@Base+0x1738>
    2e6c:	asr	w8, w9, w8
    2e70:	cmp	w8, #0x10, lsl #12
    2e74:	b.lt	2210 <BZ2_blockSort@@Base+0xb0c>  // b.tstop
    2e78:	mov	w0, #0x3ea                 	// #1002
    2e7c:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2e80:	b	2210 <BZ2_blockSort@@Base+0xb0c>
    2e84:	ldr	w8, [sp, #92]
    2e88:	cmp	w8, #0x3
    2e8c:	b.gt	2f9c <BZ2_blockSort@@Base+0x1898>
    2e90:	ldr	w23, [sp, #92]
    2e94:	cmp	w23, #0x3
    2e98:	b.ge	2fcc <BZ2_blockSort@@Base+0x18c8>  // b.tcont
    2e9c:	ldr	w19, [sp, #252]
    2ea0:	ldr	x20, [sp, #16]
    2ea4:	tbz	w19, #31, 2ec4 <BZ2_blockSort@@Base+0x17c0>
    2ea8:	cmp	w23, #0x2
    2eac:	b.ge	2f78 <BZ2_blockSort@@Base+0x1874>  // b.tcont
    2eb0:	ldp	x0, x1, [x20, #24]
    2eb4:	mov	x2, x22
    2eb8:	mov	w3, w25
    2ebc:	mov	w4, w23
    2ec0:	bl	3018 <BZ2_blockSort@@Base+0x1914>
    2ec4:	ldrsw	x8, [x20, #108]
    2ec8:	mov	w9, #0xffffffff            	// #-1
    2ecc:	str	w9, [x20, #48]
    2ed0:	cmp	w8, #0x1
    2ed4:	b.lt	2ef0 <BZ2_blockSort@@Base+0x17ec>  // b.tstop
    2ed8:	mov	x9, xzr
    2edc:	ldr	w10, [x21, x9, lsl #2]
    2ee0:	cbz	w10, 2efc <BZ2_blockSort@@Base+0x17f8>
    2ee4:	add	x9, x9, #0x1
    2ee8:	cmp	x9, x8
    2eec:	b.lt	2edc <BZ2_blockSort@@Base+0x17d8>  // b.tstop
    2ef0:	mov	w0, #0x3eb                 	// #1003
    2ef4:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2ef8:	b	2f00 <BZ2_blockSort@@Base+0x17fc>
    2efc:	str	w9, [x20, #48]
    2f00:	add	sp, sp, #0x1, lsl #12
    2f04:	add	sp, sp, #0x2c0
    2f08:	ldp	x20, x19, [sp, #112]
    2f0c:	ldp	x22, x21, [sp, #96]
    2f10:	ldp	x24, x23, [sp, #80]
    2f14:	ldp	x26, x25, [sp, #64]
    2f18:	ldp	x28, x27, [sp, #48]
    2f1c:	ldp	x29, x30, [sp, #32]
    2f20:	ldp	d9, d8, [sp, #16]
    2f24:	ldr	d10, [sp], #128
    2f28:	ret
    2f2c:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2f30:	ldr	x8, [x8, #4016]
    2f34:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    2f38:	add	x0, x0, #0x969
    2f3c:	mov	w1, #0x21                  	// #33
    2f40:	ldr	x3, [x8]
    2f44:	mov	w2, #0x1                   	// #1
    2f48:	bl	15b0 <fwrite@plt>
    2f4c:	b	17c4 <BZ2_blockSort@@Base+0xc0>
    2f50:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2f54:	ldr	x8, [x8, #4016]
    2f58:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    2f5c:	add	x0, x0, #0x8fc
    2f60:	mov	w1, #0x1b                  	// #27
    2f64:	ldr	x3, [x8]
    2f68:	mov	w2, #0x1                   	// #1
    2f6c:	bl	15b0 <fwrite@plt>
    2f70:	ldr	x13, [sp, #24]
    2f74:	b	1b3c <BZ2_blockSort@@Base+0x438>
    2f78:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2f7c:	ldr	x8, [x8, #4016]
    2f80:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    2f84:	add	x0, x0, #0x8c6
    2f88:	mov	w1, #0x35                  	// #53
    2f8c:	ldr	x3, [x8]
    2f90:	mov	w2, #0x1                   	// #1
    2f94:	bl	15b0 <fwrite@plt>
    2f98:	b	2eb0 <BZ2_blockSort@@Base+0x17ac>
    2f9c:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2fa0:	ldr	x8, [x8, #4016]
    2fa4:	ldr	w3, [sp, #108]
    2fa8:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    2fac:	add	x1, x1, #0x9bb
    2fb0:	ldr	x0, [x8]
    2fb4:	sub	w4, w25, w3
    2fb8:	ldr	x2, [sp, #24]
    2fbc:	bl	1610 <fprintf@plt>
    2fc0:	ldr	w23, [sp, #92]
    2fc4:	cmp	w23, #0x3
    2fc8:	b.lt	2e9c <BZ2_blockSort@@Base+0x1798>  // b.tstop
    2fcc:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    2fd0:	ldr	w19, [sp, #252]
    2fd4:	ldr	x8, [x8, #4016]
    2fd8:	ldr	w9, [sp, #12]
    2fdc:	cmp	w25, #0x0
    2fe0:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    2fe4:	ldr	x0, [x8]
    2fe8:	csinc	w8, w25, wzr, ne  // ne = any
    2fec:	sub	w2, w9, w19
    2ff0:	scvtf	s0, w2
    2ff4:	scvtf	s1, w8
    2ff8:	fdiv	s0, s0, s1
    2ffc:	fcvt	d0, s0
    3000:	add	x1, x1, #0x8a0
    3004:	ldr	x3, [sp, #24]
    3008:	bl	1610 <fprintf@plt>
    300c:	ldr	x20, [sp, #16]
    3010:	tbz	w19, #31, 2ec4 <BZ2_blockSort@@Base+0x17c0>
    3014:	b	2ea8 <BZ2_blockSort@@Base+0x17a4>
    3018:	stp	x29, x30, [sp, #-96]!
    301c:	stp	x28, x27, [sp, #16]
    3020:	stp	x26, x25, [sp, #32]
    3024:	stp	x24, x23, [sp, #48]
    3028:	stp	x22, x21, [sp, #64]
    302c:	stp	x20, x19, [sp, #80]
    3030:	mov	x29, sp
    3034:	sub	sp, sp, #0xb60
    3038:	mov	w25, w4
    303c:	mov	w21, w3
    3040:	mov	x23, x2
    3044:	mov	x19, x1
    3048:	mov	x20, x0
    304c:	cmp	w4, #0x4
    3050:	b.ge	39c8 <BZ2_blockSort@@Base+0x22c4>  // b.tcont
    3054:	add	x0, sp, #0x434
    3058:	mov	w2, #0x404                 	// #1028
    305c:	mov	w1, wzr
    3060:	mov	w28, w21
    3064:	mov	w22, w21
    3068:	add	x21, sp, #0x434
    306c:	bl	14a0 <memset@plt>
    3070:	cmp	w22, #0x1
    3074:	str	w22, [sp, #32]
    3078:	b.lt	30a8 <BZ2_blockSort@@Base+0x19a4>  // b.tstop
    307c:	mov	x8, x28
    3080:	mov	x9, x19
    3084:	ldrb	w10, [x9], #1
    3088:	subs	x8, x8, #0x1
    308c:	lsl	x10, x10, #2
    3090:	ldr	w11, [x21, x10]
    3094:	add	w11, w11, #0x1
    3098:	str	w11, [x21, x10]
    309c:	b.ne	3084 <BZ2_blockSort@@Base+0x1980>  // b.any
    30a0:	ldr	w22, [sp, #1076]
    30a4:	b	30ac <BZ2_blockSort@@Base+0x19a8>
    30a8:	mov	w22, wzr
    30ac:	add	x0, sp, #0x34
    30b0:	add	x1, sp, #0x434
    30b4:	mov	w2, #0x400                 	// #1024
    30b8:	bl	1410 <memcpy@plt>
    30bc:	mov	x8, xzr
    30c0:	add	x9, x21, #0x4
    30c4:	ldr	w10, [x9, x8]
    30c8:	add	w22, w10, w22
    30cc:	str	w22, [x9, x8]
    30d0:	add	x8, x8, #0x4
    30d4:	cmp	x8, #0x400
    30d8:	b.ne	30c4 <BZ2_blockSort@@Base+0x19c0>  // b.any
    30dc:	ldr	w21, [sp, #32]
    30e0:	cmp	w21, #0x1
    30e4:	b.lt	3114 <BZ2_blockSort@@Base+0x1a10>  // b.tstop
    30e8:	mov	x8, xzr
    30ec:	add	x9, sp, #0x434
    30f0:	ldrb	w10, [x19, x8]
    30f4:	lsl	x10, x10, #2
    30f8:	ldrsw	x11, [x9, x10]
    30fc:	sub	x11, x11, #0x1
    3100:	str	w11, [x9, x10]
    3104:	str	w8, [x20, x11, lsl #2]
    3108:	add	x8, x8, #0x1
    310c:	cmp	x28, x8
    3110:	b.ne	30f0 <BZ2_blockSort@@Base+0x19ec>  // b.any
    3114:	cmn	w21, #0x3f
    3118:	b.lt	3148 <BZ2_blockSort@@Base+0x1a44>  // b.tstop
    311c:	add	w8, w21, #0x1f
    3120:	cmp	w21, #0x0
    3124:	csel	w8, w8, w21, lt  // lt = tstop
    3128:	asr	w8, w8, #5
    312c:	cmn	w21, #0x20
    3130:	csinc	w8, wzr, w8, le
    3134:	lsl	x8, x8, #2
    3138:	add	x2, x8, #0x4
    313c:	mov	x0, x23
    3140:	mov	w1, wzr
    3144:	bl	14a0 <memset@plt>
    3148:	mov	x8, xzr
    314c:	add	x9, sp, #0x434
    3150:	mov	w10, #0x1                   	// #1
    3154:	ldr	w11, [x9, x8]
    3158:	add	x8, x8, #0x4
    315c:	cmp	x8, #0x400
    3160:	asr	w12, w11, #5
    3164:	sbfiz	x12, x12, #2, #32
    3168:	ldr	w13, [x23, x12]
    316c:	lsl	w11, w10, w11
    3170:	orr	w11, w11, w13
    3174:	str	w11, [x23, x12]
    3178:	b.ne	3154 <BZ2_blockSort@@Base+0x1a50>  // b.any
    317c:	mov	w8, wzr
    3180:	mov	w9, #0x1                   	// #1
    3184:	add	w10, w21, w8
    3188:	asr	w11, w10, #5
    318c:	sbfiz	x11, x11, #2, #32
    3190:	ldr	w12, [x23, x11]
    3194:	lsl	w13, w9, w10
    3198:	add	w10, w10, #0x1
    319c:	add	w8, w8, #0x2
    31a0:	orr	w12, w12, w13
    31a4:	asr	w13, w10, #5
    31a8:	sbfiz	x13, x13, #2, #32
    31ac:	str	w12, [x23, x11]
    31b0:	ldr	w11, [x23, x13]
    31b4:	lsl	w10, w9, w10
    31b8:	cmp	w8, #0x40
    31bc:	bic	w10, w11, w10
    31c0:	str	w10, [x23, x13]
    31c4:	b.ne	3184 <BZ2_blockSort@@Base+0x1a80>  // b.any
    31c8:	add	x8, x20, #0x4
    31cc:	str	x8, [sp, #24]
    31d0:	add	x8, x20, #0x8
    31d4:	str	x8, [sp, #16]
    31d8:	add	x8, x20, #0x10
    31dc:	str	x8, [sp, #8]
    31e0:	add	x8, x20, #0x14
    31e4:	mov	w24, #0x1                   	// #1
    31e8:	add	x4, sp, #0x9c8
    31ec:	add	x5, sp, #0x838
    31f0:	mov	w22, #0x1                   	// #1
    31f4:	str	x8, [sp]
    31f8:	str	w25, [sp, #36]
    31fc:	cmp	w25, #0x4
    3200:	b.ge	38dc <BZ2_blockSort@@Base+0x21d8>  // b.tcont
    3204:	cmp	w21, #0x1
    3208:	b.lt	3248 <BZ2_blockSort@@Base+0x1b44>  // b.tstop
    320c:	mov	x8, xzr
    3210:	mov	w9, wzr
    3214:	ubfx	x10, x8, #5, #27
    3218:	ldr	w10, [x23, x10, lsl #2]
    321c:	ldr	w11, [x20, x8, lsl #2]
    3220:	lsr	w10, w10, w8
    3224:	sub	w11, w11, w22
    3228:	tst	w10, #0x1
    322c:	and	w12, w28, w11, asr #31
    3230:	csel	w9, w9, w8, eq  // eq = none
    3234:	add	x8, x8, #0x1
    3238:	add	w10, w12, w11
    323c:	cmp	x28, x8
    3240:	str	w9, [x19, w10, sxtw #2]
    3244:	b.ne	3214 <BZ2_blockSort@@Base+0x1b10>  // b.any
    3248:	stp	w22, wzr, [sp, #44]
    324c:	mov	w22, #0xffffffff            	// #-1
    3250:	add	w27, w22, #0x1
    3254:	asr	w9, w27, #5
    3258:	ldr	w9, [x23, w9, sxtw #2]
    325c:	lsl	w10, w24, w27
    3260:	mov	w8, w22
    3264:	tst	w27, #0x1f
    3268:	and	w9, w10, w9
    326c:	b.eq	3278 <BZ2_blockSort@@Base+0x1b74>  // b.none
    3270:	mov	w22, w27
    3274:	cbnz	w9, 3250 <BZ2_blockSort@@Base+0x1b4c>
    3278:	cbz	w9, 32b0 <BZ2_blockSort@@Base+0x1bac>
    327c:	sub	w9, w8, #0x1f
    3280:	add	w9, w9, #0x20
    3284:	asr	w10, w9, #5
    3288:	ldr	w10, [x23, w10, sxtw #2]
    328c:	mov	w27, w8
    3290:	add	w8, w8, #0x20
    3294:	cmn	w10, #0x1
    3298:	b.eq	3280 <BZ2_blockSort@@Base+0x1b7c>  // b.none
    329c:	add	w27, w27, #0x1
    32a0:	asr	w8, w27, #5
    32a4:	ldr	w8, [x23, w8, sxtw #2]
    32a8:	lsr	w8, w8, w27
    32ac:	tbnz	w8, #0, 329c <BZ2_blockSort@@Base+0x1b98>
    32b0:	cmp	w27, w21
    32b4:	b.gt	38b4 <BZ2_blockSort@@Base+0x21b0>
    32b8:	sub	w25, w27, #0x1
    32bc:	sub	w11, w27, #0x20
    32c0:	mov	w13, w25
    32c4:	mov	w10, w27
    32c8:	asr	w8, w10, #5
    32cc:	ldr	w12, [x23, w8, sxtw #2]
    32d0:	mov	w8, w11
    32d4:	lsl	w11, w24, w10
    32d8:	mov	w9, w13
    32dc:	tst	w10, #0x1f
    32e0:	and	w12, w11, w12
    32e4:	add	w10, w10, #0x1
    32e8:	b.eq	32f8 <BZ2_blockSort@@Base+0x1bf4>  // b.none
    32ec:	add	w11, w8, #0x1
    32f0:	add	w13, w9, #0x1
    32f4:	cbz	w12, 32c8 <BZ2_blockSort@@Base+0x1bc4>
    32f8:	cbz	w12, 3304 <BZ2_blockSort@@Base+0x1c00>
    32fc:	sub	w26, w10, #0x1
    3300:	b	3330 <BZ2_blockSort@@Base+0x1c2c>
    3304:	add	w8, w8, #0x20
    3308:	asr	w10, w8, #5
    330c:	ldr	w10, [x23, w10, sxtw #2]
    3310:	mov	w26, w9
    3314:	add	w9, w9, #0x20
    3318:	cbz	w10, 3304 <BZ2_blockSort@@Base+0x1c00>
    331c:	add	w26, w26, #0x1
    3320:	asr	w8, w26, #5
    3324:	ldr	w8, [x23, w8, sxtw #2]
    3328:	lsr	w8, w8, w26
    332c:	tbz	w8, #0, 331c <BZ2_blockSort@@Base+0x1c18>
    3330:	cmp	w26, w21
    3334:	b.gt	38b4 <BZ2_blockSort@@Base+0x21b0>
    3338:	cmp	w26, w27
    333c:	sub	w22, w26, #0x1
    3340:	b.le	3250 <BZ2_blockSort@@Base+0x1b4c>
    3344:	ldr	w8, [sp, #48]
    3348:	str	wzr, [sp, #40]
    334c:	str	w25, [sp, #2504]
    3350:	str	w22, [sp, #2104]
    3354:	sub	w8, w8, w27
    3358:	add	w8, w8, w22
    335c:	add	w8, w8, #0x2
    3360:	str	w8, [sp, #48]
    3364:	mov	w8, #0x1                   	// #1
    3368:	mov	w8, w8
    336c:	b	3378 <BZ2_blockSort@@Base+0x1c74>
    3370:	cmp	x21, #0x1
    3374:	b.le	385c <BZ2_blockSort@@Base+0x2158>
    3378:	mov	x21, x8
    337c:	cmp	x8, #0x63
    3380:	b.lt	3394 <BZ2_blockSort@@Base+0x1c90>  // b.tstop
    3384:	mov	w0, #0x3ec                 	// #1004
    3388:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    338c:	add	x5, sp, #0x838
    3390:	add	x4, sp, #0x9c8
    3394:	sub	x8, x21, #0x1
    3398:	lsl	x9, x8, #2
    339c:	ldr	w10, [x4, x9]
    33a0:	ldr	w9, [x5, x9]
    33a4:	sxtw	x12, w10
    33a8:	sub	w11, w9, w10
    33ac:	cmp	w11, #0x9
    33b0:	b.gt	34b4 <BZ2_blockSort@@Base+0x1db0>
    33b4:	cmp	w9, w10
    33b8:	b.eq	3370 <BZ2_blockSort@@Base+0x1c6c>  // b.none
    33bc:	cmp	w11, #0x4
    33c0:	sxtw	x11, w9
    33c4:	b.lt	33d4 <BZ2_blockSort@@Base+0x1cd0>  // b.tstop
    33c8:	sub	w13, w9, #0x4
    33cc:	cmp	w13, w10
    33d0:	b.ge	344c <BZ2_blockSort@@Base+0x1d48>  // b.tcont
    33d4:	cmp	w9, w10
    33d8:	b.le	3370 <BZ2_blockSort@@Base+0x1c6c>
    33dc:	add	x10, x20, x11, lsl #2
    33e0:	mov	x15, x11
    33e4:	b	3400 <BZ2_blockSort@@Base+0x1cfc>
    33e8:	sub	w16, w15, #0x1
    33ec:	cmp	x13, x12
    33f0:	sub	x10, x10, #0x4
    33f4:	mov	x15, x13
    33f8:	str	w14, [x20, w16, sxtw #2]
    33fc:	b.le	3370 <BZ2_blockSort@@Base+0x1c6c>
    3400:	sub	x13, x15, #0x1
    3404:	ldrsw	x14, [x20, x13, lsl #2]
    3408:	cmp	w15, w9
    340c:	mov	w16, w13
    3410:	b.gt	33ec <BZ2_blockSort@@Base+0x1ce8>
    3414:	ldr	w16, [x19, x14, lsl #2]
    3418:	mov	x17, x10
    341c:	ldr	w18, [x17]
    3420:	ldr	w0, [x19, x18, lsl #2]
    3424:	cmp	w16, w0
    3428:	b.ls	33e8 <BZ2_blockSort@@Base+0x1ce4>  // b.plast
    342c:	stur	w18, [x17, #-4]
    3430:	add	x18, x15, #0x1
    3434:	cmp	x15, x11
    3438:	add	x17, x17, #0x4
    343c:	mov	x15, x18
    3440:	b.lt	341c <BZ2_blockSort@@Base+0x1d18>  // b.tstop
    3444:	mov	w15, w18
    3448:	b	33e8 <BZ2_blockSort@@Base+0x1ce4>
    344c:	sxtw	x13, w13
    3450:	mov	w14, w9
    3454:	b	3470 <BZ2_blockSort@@Base+0x1d6c>
    3458:	mov	w16, w13
    345c:	cmp	x13, x12
    3460:	sub	x13, x13, #0x1
    3464:	sub	w14, w14, #0x1
    3468:	str	w15, [x20, w16, sxtw #2]
    346c:	b.le	33d4 <BZ2_blockSort@@Base+0x1cd0>
    3470:	ldrsw	x15, [x20, x13, lsl #2]
    3474:	add	x16, x13, #0x4
    3478:	cmp	x16, x11
    347c:	b.gt	3458 <BZ2_blockSort@@Base+0x1d54>
    3480:	ldr	w17, [x19, x15, lsl #2]
    3484:	sxtw	x18, w14
    3488:	mov	w16, w13
    348c:	ldr	w0, [x20, x18, lsl #2]
    3490:	ldr	w1, [x19, x0, lsl #2]
    3494:	cmp	w17, w1
    3498:	b.ls	345c <BZ2_blockSort@@Base+0x1d58>  // b.plast
    349c:	add	x18, x18, #0x4
    34a0:	str	w0, [x20, w16, sxtw #2]
    34a4:	cmp	x18, x11
    34a8:	add	w16, w16, #0x4
    34ac:	b.le	348c <BZ2_blockSort@@Base+0x1d88>
    34b0:	b	345c <BZ2_blockSort@@Base+0x1d58>
    34b4:	ldr	w14, [sp, #40]
    34b8:	mov	w11, #0x1dc5                	// #7621
    34bc:	orr	w13, wzr, #0x1
    34c0:	madd	w11, w14, w11, w13
    34c4:	and	w13, w11, #0x7fff
    34c8:	mov	w11, #0xaaab                	// #43691
    34cc:	movk	w11, #0xaaaa, lsl #16
    34d0:	umull	x11, w13, w11
    34d4:	lsr	x11, x11, #33
    34d8:	add	w11, w11, w11, lsl #1
    34dc:	str	w13, [sp, #40]
    34e0:	subs	w13, w13, w11
    34e4:	mov	w11, w10
    34e8:	b.eq	3504 <BZ2_blockSort@@Base+0x1e00>  // b.none
    34ec:	cmp	w13, #0x1
    34f0:	b.ne	3500 <BZ2_blockSort@@Base+0x1dfc>  // b.any
    34f4:	add	w11, w9, w10
    34f8:	asr	w11, w11, #1
    34fc:	b	3504 <BZ2_blockSort@@Base+0x1e00>
    3500:	mov	w11, w9
    3504:	ldr	w11, [x20, w11, sxtw #2]
    3508:	mov	w14, w9
    350c:	mov	w15, w9
    3510:	mov	w13, w10
    3514:	ldr	w16, [x19, x11, lsl #2]
    3518:	mov	w11, w10
    351c:	cmp	w13, w15
    3520:	b.gt	3588 <BZ2_blockSort@@Base+0x1e84>
    3524:	sxtw	x17, w15
    3528:	sxtw	x11, w11
    352c:	sxtw	x18, w13
    3530:	ldr	w13, [x20, x18, lsl #2]
    3534:	ldr	w0, [x19, x13, lsl #2]
    3538:	subs	w0, w0, w16
    353c:	b.eq	355c <BZ2_blockSort@@Base+0x1e58>  // b.none
    3540:	cmp	w0, #0x0
    3544:	b.gt	3584 <BZ2_blockSort@@Base+0x1e80>
    3548:	add	x13, x18, #0x1
    354c:	cmp	x18, x17
    3550:	mov	x18, x13
    3554:	b.lt	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.tstop
    3558:	b	3588 <BZ2_blockSort@@Base+0x1e84>
    355c:	lsl	x0, x11, #2
    3560:	ldr	w1, [x20, x0]
    3564:	add	x11, x11, #0x1
    3568:	cmp	w15, w18
    356c:	str	w1, [x20, x18, lsl #2]
    3570:	str	w13, [x20, x0]
    3574:	add	w13, w18, #0x1
    3578:	b.gt	352c <BZ2_blockSort@@Base+0x1e28>
    357c:	add	w13, w18, #0x1
    3580:	b	3588 <BZ2_blockSort@@Base+0x1e84>
    3584:	mov	w13, w18
    3588:	cmp	w13, w15
    358c:	b.gt	360c <BZ2_blockSort@@Base+0x1f08>
    3590:	sxtw	x17, w13
    3594:	sxtw	x14, w14
    3598:	sxtw	x18, w15
    359c:	ldr	w15, [x20, x18, lsl #2]
    35a0:	ldr	w0, [x19, x15, lsl #2]
    35a4:	subs	w0, w0, w16
    35a8:	b.eq	35c4 <BZ2_blockSort@@Base+0x1ec0>  // b.none
    35ac:	tbnz	w0, #31, 35e8 <BZ2_blockSort@@Base+0x1ee4>
    35b0:	sub	x15, x18, #0x1
    35b4:	cmp	x18, x17
    35b8:	mov	x18, x15
    35bc:	b.gt	359c <BZ2_blockSort@@Base+0x1e98>
    35c0:	b	360c <BZ2_blockSort@@Base+0x1f08>
    35c4:	lsl	x0, x14, #2
    35c8:	ldr	w1, [x20, x0]
    35cc:	sub	x14, x14, #0x1
    35d0:	cmp	w13, w18
    35d4:	str	w1, [x20, x18, lsl #2]
    35d8:	str	w15, [x20, x0]
    35dc:	sub	w15, w18, #0x1
    35e0:	b.lt	3598 <BZ2_blockSort@@Base+0x1e94>  // b.tstop
    35e4:	b	360c <BZ2_blockSort@@Base+0x1f08>
    35e8:	lsl	x17, x17, #2
    35ec:	ldr	w0, [x20, x17]
    35f0:	add	w13, w13, #0x1
    35f4:	str	w15, [x20, x17]
    35f8:	sub	w15, w18, #0x1
    35fc:	str	w0, [x20, x18, lsl #2]
    3600:	cmp	w13, w15
    3604:	b.le	3524 <BZ2_blockSort@@Base+0x1e20>
    3608:	b	3588 <BZ2_blockSort@@Base+0x1e84>
    360c:	cmp	w14, w11
    3610:	b.lt	3854 <BZ2_blockSort@@Base+0x2150>  // b.tstop
    3614:	sub	w0, w11, w10
    3618:	sub	w1, w13, w11
    361c:	cmp	w0, w1
    3620:	csel	w16, w0, w1, lt  // lt = tstop
    3624:	cmp	w16, #0x1
    3628:	b.lt	370c <BZ2_blockSort@@Base+0x2008>  // b.tstop
    362c:	cmp	w0, w1
    3630:	csel	w18, w0, w1, lt  // lt = tstop
    3634:	cmp	w18, #0x1
    3638:	csinc	w18, w18, wzr, lt  // lt = tstop
    363c:	sub	w17, w13, w16
    3640:	sub	w18, w16, w18
    3644:	cmp	w18, #0x7
    3648:	sxtw	x17, w17
    364c:	b.cc	36e4 <BZ2_blockSort@@Base+0x1fe0>  // b.lo, b.ul, b.last
    3650:	cmp	w0, w1
    3654:	csel	w0, w0, w1, lt  // lt = tstop
    3658:	cmp	w0, #0x1
    365c:	ldr	x3, [sp, #24]
    3660:	csinc	w0, w0, wzr, lt  // lt = tstop
    3664:	sub	w0, w16, w0
    3668:	add	x1, x17, x0
    366c:	add	x2, x20, x12, lsl #2
    3670:	add	x1, x3, x1, lsl #2
    3674:	cmp	x2, x1
    3678:	b.cs	3694 <BZ2_blockSort@@Base+0x1f90>  // b.hs, b.nlast
    367c:	ldr	x1, [sp, #24]
    3680:	add	x0, x12, x0
    3684:	add	x0, x1, x0, lsl #2
    3688:	add	x1, x20, x17, lsl #2
    368c:	cmp	x1, x0
    3690:	b.cc	36e4 <BZ2_blockSort@@Base+0x1fe0>  // b.lo, b.ul, b.last
    3694:	ldr	x3, [sp, #8]
    3698:	add	x18, x18, #0x1
    369c:	and	x1, x18, #0x1fffffff8
    36a0:	add	x0, x1, x12
    36a4:	add	x2, x3, x17, lsl #2
    36a8:	add	x17, x1, x17
    36ac:	sub	w16, w16, w1
    36b0:	add	x12, x3, x12, lsl #2
    36b4:	mov	x3, x1
    36b8:	ldp	q0, q3, [x12, #-16]
    36bc:	ldp	q1, q2, [x2, #-16]
    36c0:	subs	x3, x3, #0x8
    36c4:	stp	q1, q2, [x12, #-16]
    36c8:	stp	q0, q3, [x2, #-16]
    36cc:	add	x2, x2, #0x20
    36d0:	add	x12, x12, #0x20
    36d4:	b.ne	36b8 <BZ2_blockSort@@Base+0x1fb4>  // b.any
    36d8:	cmp	x18, x1
    36dc:	mov	x12, x0
    36e0:	b.eq	370c <BZ2_blockSort@@Base+0x2008>  // b.none
    36e4:	add	x12, x20, x12, lsl #2
    36e8:	add	x17, x20, x17, lsl #2
    36ec:	add	w16, w16, #0x1
    36f0:	ldr	w18, [x17]
    36f4:	ldr	w0, [x12]
    36f8:	sub	w16, w16, #0x1
    36fc:	cmp	w16, #0x1
    3700:	str	w18, [x12], #4
    3704:	str	w0, [x17], #4
    3708:	b.gt	36f0 <BZ2_blockSort@@Base+0x1fec>
    370c:	sub	w18, w9, w14
    3710:	sub	w12, w14, w15
    3714:	cmp	w18, w12
    3718:	csel	w14, w18, w12, lt  // lt = tstop
    371c:	cmp	w14, #0x1
    3720:	b.lt	380c <BZ2_blockSort@@Base+0x2108>  // b.tstop
    3724:	cmp	w12, w18
    3728:	csel	w16, w12, w18, lt  // lt = tstop
    372c:	cmp	w16, #0x1
    3730:	csinc	w16, w16, wzr, lt  // lt = tstop
    3734:	sub	w15, w9, w14
    3738:	sub	w17, w14, w16
    373c:	sxtw	x15, w15
    3740:	cmp	w17, #0x7
    3744:	sxtw	x16, w13
    3748:	b.cc	37e0 <BZ2_blockSort@@Base+0x20dc>  // b.lo, b.ul, b.last
    374c:	cmp	w12, w18
    3750:	csel	w18, w12, w18, lt  // lt = tstop
    3754:	cmp	w18, #0x1
    3758:	ldr	x2, [sp, #16]
    375c:	csinc	w18, w18, wzr, lt  // lt = tstop
    3760:	sub	w18, w14, w18
    3764:	add	x1, x15, x18
    3768:	add	x0, x20, x16, lsl #2
    376c:	add	x1, x2, x1, lsl #2
    3770:	cmp	x0, x1
    3774:	b.cs	3790 <BZ2_blockSort@@Base+0x208c>  // b.hs, b.nlast
    3778:	ldr	x0, [sp, #24]
    377c:	add	x18, x16, x18
    3780:	add	x18, x0, x18, lsl #2
    3784:	add	x0, x0, x15, lsl #2
    3788:	cmp	x0, x18
    378c:	b.cc	37e0 <BZ2_blockSort@@Base+0x20dc>  // b.lo, b.ul, b.last
    3790:	ldp	x18, x2, [sp]
    3794:	add	x17, x17, #0x1
    3798:	and	x0, x17, #0x1fffffff8
    379c:	sub	w14, w14, w0
    37a0:	add	x1, x18, x15, lsl #2
    37a4:	add	x18, x0, x16
    37a8:	add	x15, x0, x15
    37ac:	add	x16, x2, x16, lsl #2
    37b0:	mov	x2, x0
    37b4:	ldp	q0, q3, [x16, #-16]
    37b8:	ldp	q1, q2, [x1, #-16]
    37bc:	subs	x2, x2, #0x8
    37c0:	stp	q1, q2, [x16, #-16]
    37c4:	stp	q0, q3, [x1, #-16]
    37c8:	add	x1, x1, #0x20
    37cc:	add	x16, x16, #0x20
    37d0:	b.ne	37b4 <BZ2_blockSort@@Base+0x20b0>  // b.any
    37d4:	cmp	x17, x0
    37d8:	mov	x16, x18
    37dc:	b.eq	380c <BZ2_blockSort@@Base+0x2108>  // b.none
    37e0:	ldr	x17, [sp, #24]
    37e4:	add	x16, x20, x16, lsl #2
    37e8:	add	w14, w14, #0x1
    37ec:	add	x15, x17, x15, lsl #2
    37f0:	ldr	w17, [x15]
    37f4:	ldr	w18, [x16]
    37f8:	sub	w14, w14, #0x1
    37fc:	cmp	w14, #0x1
    3800:	str	w17, [x16], #4
    3804:	str	w18, [x15], #4
    3808:	b.gt	37f0 <BZ2_blockSort@@Base+0x20ec>
    380c:	mvn	w11, w11
    3810:	sub	w12, w9, w12
    3814:	add	w14, w10, w11
    3818:	add	w11, w12, #0x1
    381c:	add	w12, w14, w13
    3820:	sub	w13, w12, w10
    3824:	sub	w14, w9, w11
    3828:	cmp	w13, w14
    382c:	b.le	3838 <BZ2_blockSort@@Base+0x2134>
    3830:	str	w12, [x5, x8, lsl #2]
    3834:	b	3844 <BZ2_blockSort@@Base+0x2140>
    3838:	str	w11, [x4, x8, lsl #2]
    383c:	mov	w11, w10
    3840:	mov	w9, w12
    3844:	sbfiz	x8, x21, #2, #32
    3848:	str	w11, [x4, x8]
    384c:	str	w9, [x5, x8]
    3850:	add	w8, w21, #0x1
    3854:	cmp	w8, #0x0
    3858:	b.gt	3368 <BZ2_blockSort@@Base+0x1c64>
    385c:	ldr	w21, [sp, #32]
    3860:	cmp	w27, w26
    3864:	b.gt	3250 <BZ2_blockSort@@Base+0x1b4c>
    3868:	sxtw	x8, w25
    386c:	sxtw	x9, w26
    3870:	mov	w10, #0xffffffff            	// #-1
    3874:	b	3884 <BZ2_blockSort@@Base+0x2180>
    3878:	add	x8, x8, #0x1
    387c:	cmp	x8, x9
    3880:	b.ge	3250 <BZ2_blockSort@@Base+0x1b4c>  // b.tcont
    3884:	ldr	w11, [x20, x8, lsl #2]
    3888:	ldr	w11, [x19, x11, lsl #2]
    388c:	cmp	w10, w11
    3890:	b.eq	3878 <BZ2_blockSort@@Base+0x2174>  // b.none
    3894:	asr	w10, w8, #5
    3898:	sbfiz	x10, x10, #2, #32
    389c:	ldr	w12, [x23, x10]
    38a0:	lsl	w13, w24, w8
    38a4:	orr	w12, w12, w13
    38a8:	str	w12, [x23, x10]
    38ac:	mov	w10, w11
    38b0:	b	3878 <BZ2_blockSort@@Base+0x2174>
    38b4:	ldr	w25, [sp, #36]
    38b8:	ldr	w26, [sp, #48]
    38bc:	cmp	w25, #0x4
    38c0:	b.ge	390c <BZ2_blockSort@@Base+0x2208>  // b.tcont
    38c4:	ldr	w22, [sp, #44]
    38c8:	lsl	w22, w22, #1
    38cc:	cmp	w22, w21
    38d0:	b.gt	3940 <BZ2_blockSort@@Base+0x223c>
    38d4:	cbnz	w26, 31fc <BZ2_blockSort@@Base+0x1af8>
    38d8:	b	3940 <BZ2_blockSort@@Base+0x223c>
    38dc:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    38e0:	ldr	x8, [x8, #4016]
    38e4:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    38e8:	add	x1, x1, #0x918
    38ec:	mov	w2, w22
    38f0:	ldr	x0, [x8]
    38f4:	bl	1610 <fprintf@plt>
    38f8:	add	x5, sp, #0x838
    38fc:	add	x4, sp, #0x9c8
    3900:	cmp	w21, #0x1
    3904:	b.ge	320c <BZ2_blockSort@@Base+0x1b08>  // b.tcont
    3908:	b	3248 <BZ2_blockSort@@Base+0x1b44>
    390c:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    3910:	ldr	x8, [x8, #4016]
    3914:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    3918:	add	x1, x1, #0x92f
    391c:	mov	w2, w26
    3920:	ldr	x0, [x8]
    3924:	bl	1610 <fprintf@plt>
    3928:	add	x5, sp, #0x838
    392c:	add	x4, sp, #0x9c8
    3930:	ldr	w22, [sp, #44]
    3934:	lsl	w22, w22, #1
    3938:	cmp	w22, w21
    393c:	b.le	38d4 <BZ2_blockSort@@Base+0x21d0>
    3940:	cmp	w25, #0x4
    3944:	b.ge	39ec <BZ2_blockSort@@Base+0x22e8>  // b.tcont
    3948:	cmp	w21, #0x1
    394c:	b.lt	39a8 <BZ2_blockSort@@Base+0x22a4>  // b.tstop
    3950:	mov	x8, xzr
    3954:	mov	x11, xzr
    3958:	add	x9, sp, #0x34
    395c:	sxtw	x11, w11
    3960:	sub	w10, w11, #0x1
    3964:	ldr	w12, [x9, x11, lsl #2]
    3968:	add	x11, x11, #0x1
    396c:	add	w10, w10, #0x1
    3970:	cbz	w12, 3964 <BZ2_blockSort@@Base+0x2260>
    3974:	add	x13, x9, x11, lsl #2
    3978:	sub	w12, w12, #0x1
    397c:	stur	w12, [x13, #-4]
    3980:	ldr	w12, [x20, x8, lsl #2]
    3984:	add	x8, x8, #0x1
    3988:	sub	x11, x11, #0x1
    398c:	cmp	x8, x28
    3990:	strb	w11, [x19, x12]
    3994:	b.ne	395c <BZ2_blockSort@@Base+0x2258>  // b.any
    3998:	cmp	w10, #0x100
    399c:	b.lt	39a8 <BZ2_blockSort@@Base+0x22a4>  // b.tstop
    39a0:	mov	w0, #0x3ed                 	// #1005
    39a4:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    39a8:	add	sp, sp, #0xb60
    39ac:	ldp	x20, x19, [sp, #80]
    39b0:	ldp	x22, x21, [sp, #64]
    39b4:	ldp	x24, x23, [sp, #48]
    39b8:	ldp	x26, x25, [sp, #32]
    39bc:	ldp	x28, x27, [sp, #16]
    39c0:	ldp	x29, x30, [sp], #96
    39c4:	ret
    39c8:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    39cc:	ldr	x8, [x8, #4016]
    39d0:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    39d4:	add	x0, x0, #0x8fc
    39d8:	mov	w1, #0x1b                  	// #27
    39dc:	ldr	x3, [x8]
    39e0:	mov	w2, #0x1                   	// #1
    39e4:	bl	15b0 <fwrite@plt>
    39e8:	b	3054 <BZ2_blockSort@@Base+0x1950>
    39ec:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    39f0:	ldr	x8, [x8, #4016]
    39f4:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    39f8:	add	x0, x0, #0x947
    39fc:	mov	w1, #0x21                  	// #33
    3a00:	ldr	x3, [x8]
    3a04:	mov	w2, #0x1                   	// #1
    3a08:	bl	15b0 <fwrite@plt>
    3a0c:	cmp	w21, #0x1
    3a10:	b.ge	3950 <BZ2_blockSort@@Base+0x224c>  // b.tcont
    3a14:	b	39a8 <BZ2_blockSort@@Base+0x22a4>
    3a18:	ldrb	w8, [x2, w0, uxtw]
    3a1c:	ldrb	w9, [x2, w1, uxtw]
    3a20:	cmp	w8, w9
    3a24:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3a28:	add	w8, w0, #0x1
    3a2c:	add	w9, w1, #0x1
    3a30:	ldrb	w8, [x2, w8, uxtw]
    3a34:	ldrb	w9, [x2, w9, uxtw]
    3a38:	cmp	w8, w9
    3a3c:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3a40:	add	w8, w0, #0x2
    3a44:	add	w9, w1, #0x2
    3a48:	ldrb	w8, [x2, w8, uxtw]
    3a4c:	ldrb	w9, [x2, w9, uxtw]
    3a50:	cmp	w8, w9
    3a54:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3a58:	add	w8, w0, #0x3
    3a5c:	add	w9, w1, #0x3
    3a60:	ldrb	w8, [x2, w8, uxtw]
    3a64:	ldrb	w9, [x2, w9, uxtw]
    3a68:	cmp	w8, w9
    3a6c:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3a70:	add	w8, w0, #0x4
    3a74:	add	w9, w1, #0x4
    3a78:	ldrb	w8, [x2, w8, uxtw]
    3a7c:	ldrb	w9, [x2, w9, uxtw]
    3a80:	cmp	w8, w9
    3a84:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3a88:	add	w8, w0, #0x5
    3a8c:	add	w9, w1, #0x5
    3a90:	ldrb	w8, [x2, w8, uxtw]
    3a94:	ldrb	w9, [x2, w9, uxtw]
    3a98:	cmp	w8, w9
    3a9c:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3aa0:	add	w8, w0, #0x6
    3aa4:	add	w9, w1, #0x6
    3aa8:	ldrb	w8, [x2, w8, uxtw]
    3aac:	ldrb	w9, [x2, w9, uxtw]
    3ab0:	cmp	w8, w9
    3ab4:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3ab8:	add	w8, w0, #0x7
    3abc:	add	w9, w1, #0x7
    3ac0:	ldrb	w8, [x2, w8, uxtw]
    3ac4:	ldrb	w9, [x2, w9, uxtw]
    3ac8:	cmp	w8, w9
    3acc:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3ad0:	add	w8, w0, #0x8
    3ad4:	add	w9, w1, #0x8
    3ad8:	ldrb	w8, [x2, w8, uxtw]
    3adc:	ldrb	w9, [x2, w9, uxtw]
    3ae0:	cmp	w8, w9
    3ae4:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3ae8:	add	w8, w0, #0x9
    3aec:	add	w9, w1, #0x9
    3af0:	ldrb	w8, [x2, w8, uxtw]
    3af4:	ldrb	w9, [x2, w9, uxtw]
    3af8:	cmp	w8, w9
    3afc:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b00:	add	w8, w0, #0xa
    3b04:	add	w9, w1, #0xa
    3b08:	ldrb	w8, [x2, w8, uxtw]
    3b0c:	ldrb	w9, [x2, w9, uxtw]
    3b10:	cmp	w8, w9
    3b14:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b18:	add	w8, w0, #0xb
    3b1c:	add	w9, w1, #0xb
    3b20:	ldrb	w8, [x2, w8, uxtw]
    3b24:	ldrb	w9, [x2, w9, uxtw]
    3b28:	cmp	w8, w9
    3b2c:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b30:	add	w9, w0, #0xc
    3b34:	add	w10, w1, #0xc
    3b38:	add	w8, w4, #0x10
    3b3c:	mov	w9, w9
    3b40:	mov	w10, w10
    3b44:	ldrb	w11, [x2, x9]
    3b48:	ldrb	w12, [x2, x10]
    3b4c:	cmp	w11, w12
    3b50:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b54:	ldrh	w11, [x3, x9, lsl #1]
    3b58:	ldrh	w12, [x3, x10, lsl #1]
    3b5c:	cmp	w11, w12
    3b60:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b64:	add	w11, w9, #0x1
    3b68:	add	w12, w10, #0x1
    3b6c:	ldrb	w13, [x2, x11]
    3b70:	ldrb	w14, [x2, x12]
    3b74:	cmp	w13, w14
    3b78:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b7c:	ldrh	w11, [x3, x11, lsl #1]
    3b80:	ldrh	w12, [x3, x12, lsl #1]
    3b84:	cmp	w11, w12
    3b88:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3b8c:	add	w11, w9, #0x2
    3b90:	add	w12, w10, #0x2
    3b94:	ldrb	w13, [x2, x11]
    3b98:	ldrb	w14, [x2, x12]
    3b9c:	cmp	w13, w14
    3ba0:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3ba4:	ldrh	w11, [x3, x11, lsl #1]
    3ba8:	ldrh	w12, [x3, x12, lsl #1]
    3bac:	cmp	w11, w12
    3bb0:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3bb4:	add	w11, w9, #0x3
    3bb8:	add	w12, w10, #0x3
    3bbc:	ldrb	w13, [x2, x11]
    3bc0:	ldrb	w14, [x2, x12]
    3bc4:	cmp	w13, w14
    3bc8:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3bcc:	ldrh	w11, [x3, x11, lsl #1]
    3bd0:	ldrh	w12, [x3, x12, lsl #1]
    3bd4:	cmp	w11, w12
    3bd8:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3bdc:	add	w11, w9, #0x4
    3be0:	add	w12, w10, #0x4
    3be4:	ldrb	w13, [x2, x11]
    3be8:	ldrb	w14, [x2, x12]
    3bec:	cmp	w13, w14
    3bf0:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3bf4:	ldrh	w11, [x3, x11, lsl #1]
    3bf8:	ldrh	w12, [x3, x12, lsl #1]
    3bfc:	cmp	w11, w12
    3c00:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c04:	add	w11, w9, #0x5
    3c08:	add	w12, w10, #0x5
    3c0c:	ldrb	w13, [x2, x11]
    3c10:	ldrb	w14, [x2, x12]
    3c14:	cmp	w13, w14
    3c18:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c1c:	ldrh	w11, [x3, x11, lsl #1]
    3c20:	ldrh	w12, [x3, x12, lsl #1]
    3c24:	cmp	w11, w12
    3c28:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c2c:	add	w11, w9, #0x6
    3c30:	add	w12, w10, #0x6
    3c34:	ldrb	w13, [x2, x11]
    3c38:	ldrb	w14, [x2, x12]
    3c3c:	cmp	w13, w14
    3c40:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c44:	ldrh	w11, [x3, x11, lsl #1]
    3c48:	ldrh	w12, [x3, x12, lsl #1]
    3c4c:	cmp	w11, w12
    3c50:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c54:	add	w11, w9, #0x7
    3c58:	add	w12, w10, #0x7
    3c5c:	ldrb	w13, [x2, x11]
    3c60:	ldrb	w14, [x2, x12]
    3c64:	cmp	w13, w14
    3c68:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c6c:	ldrh	w11, [x3, x11, lsl #1]
    3c70:	ldrh	w12, [x3, x12, lsl #1]
    3c74:	cmp	w11, w12
    3c78:	b.ne	3cbc <BZ2_blockSort@@Base+0x25b8>  // b.any
    3c7c:	add	w9, w9, #0x8
    3c80:	ldr	w11, [x5]
    3c84:	add	w10, w10, #0x8
    3c88:	cmp	w9, w4
    3c8c:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    3c90:	cmp	w10, w4
    3c94:	sub	w8, w8, #0x8
    3c98:	sub	w9, w9, w12
    3c9c:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    3ca0:	mov	w0, wzr
    3ca4:	sub	w10, w10, w12
    3ca8:	sub	w11, w11, #0x1
    3cac:	cmp	w8, #0x7
    3cb0:	str	w11, [x5]
    3cb4:	b.gt	3b3c <BZ2_blockSort@@Base+0x2438>
    3cb8:	ret
    3cbc:	cset	w0, hi  // hi = pmore
    3cc0:	ret

0000000000003cc4 <BZ2_hbMakeCodeLengths@@Base>:
    3cc4:	stp	x29, x30, [sp, #-96]!
    3cc8:	stp	x28, x27, [sp, #16]
    3ccc:	stp	x26, x25, [sp, #32]
    3cd0:	stp	x24, x23, [sp, #48]
    3cd4:	stp	x22, x21, [sp, #64]
    3cd8:	stp	x20, x19, [sp, #80]
    3cdc:	mov	x29, sp
    3ce0:	sub	sp, sp, #0x1, lsl #12
    3ce4:	sub	sp, sp, #0x460
    3ce8:	mov	w19, w3
    3cec:	mov	w20, w2
    3cf0:	cmp	w2, #0x1
    3cf4:	mov	x21, x0
    3cf8:	b.lt	3d84 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.tstop
    3cfc:	cmp	w20, #0x3
    3d00:	mov	w8, w20
    3d04:	b.hi	3d10 <BZ2_hbMakeCodeLengths@@Base+0x4c>  // b.pmore
    3d08:	mov	x9, xzr
    3d0c:	b	3d4c <BZ2_hbMakeCodeLengths@@Base+0x88>
    3d10:	and	x9, x8, #0xfffffffc
    3d14:	add	x10, sp, #0x838
    3d18:	add	x10, x10, #0x4
    3d1c:	movi	v0.4s, #0x1, lsl #8
    3d20:	mov	x11, x9
    3d24:	mov	x12, x1
    3d28:	ldr	q1, [x12], #16
    3d2c:	subs	x11, x11, #0x4
    3d30:	cmeq	v2.4s, v1.4s, #0
    3d34:	shl	v1.4s, v1.4s, #8
    3d38:	bsl	v2.16b, v0.16b, v1.16b
    3d3c:	str	q2, [x10], #16
    3d40:	b.ne	3d28 <BZ2_hbMakeCodeLengths@@Base+0x64>  // b.any
    3d44:	cmp	x9, x8
    3d48:	b.eq	3d84 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.none
    3d4c:	lsl	x10, x9, #2
    3d50:	add	x11, sp, #0x838
    3d54:	sub	x8, x8, x9
    3d58:	add	x9, x1, x10
    3d5c:	add	x10, x10, x11
    3d60:	add	x10, x10, #0x4
    3d64:	mov	w11, #0x100                 	// #256
    3d68:	ldr	w12, [x9], #4
    3d6c:	lsl	w13, w12, #8
    3d70:	cmp	w12, #0x0
    3d74:	csel	w12, w11, w13, eq  // eq = none
    3d78:	subs	x8, x8, #0x1
    3d7c:	str	w12, [x10], #4
    3d80:	b.ne	3d68 <BZ2_hbMakeCodeLengths@@Base+0xa4>  // b.any
    3d84:	mov	w8, #0xfffffffe            	// #-2
    3d88:	cmp	w20, #0x1
    3d8c:	str	wzr, [sp, #4168]
    3d90:	str	wzr, [sp, #2104]
    3d94:	str	w8, [sp, #40]
    3d98:	b.lt	4170 <BZ2_hbMakeCodeLengths@@Base+0x4ac>  // b.tstop
    3d9c:	add	w24, w20, #0x1
    3da0:	add	x26, sp, #0x838
    3da4:	sub	x22, x24, #0x1
    3da8:	add	x10, x26, #0x4
    3dac:	str	x10, [sp, #16]
    3db0:	and	x10, x22, #0xfffffffffffffffc
    3db4:	sxtw	x9, w20
    3db8:	add	x23, sp, #0x1, lsl #12
    3dbc:	stp	x9, x10, [sp, #24]
    3dc0:	orr	x10, x10, #0x1
    3dc4:	mov	x8, xzr
    3dc8:	mov	w25, w20
    3dcc:	mov	w9, #0x1                   	// #1
    3dd0:	add	x27, sp, #0x28
    3dd4:	mov	w28, #0xffffffff            	// #-1
    3dd8:	add	x23, x23, #0x48
    3ddc:	str	x10, [sp, #8]
    3de0:	b	3e04 <BZ2_hbMakeCodeLengths@@Base+0x140>
    3de4:	mov	w9, #0xfffffffe            	// #-2
    3de8:	mov	x8, xzr
    3dec:	str	w9, [sp, #40]
    3df0:	cmp	w20, #0x1
    3df4:	mov	w9, #0x1                   	// #1
    3df8:	str	wzr, [sp, #4168]
    3dfc:	str	wzr, [sp, #2104]
    3e00:	b.lt	4170 <BZ2_hbMakeCodeLengths@@Base+0x4ac>  // b.tstop
    3e04:	add	x8, x8, #0x1
    3e08:	add	x10, x23, x8, lsl #2
    3e0c:	str	w9, [x10]
    3e10:	ubfx	x12, x8, #1, #31
    3e14:	ldrsw	x13, [x23, w12, uxtw #2]
    3e18:	lsl	x14, x9, #2
    3e1c:	ldr	w11, [x26, x14]
    3e20:	str	w28, [x27, x14]
    3e24:	ldr	w15, [x26, x13, lsl #2]
    3e28:	cmp	w11, w15
    3e2c:	b.ge	3e50 <BZ2_hbMakeCodeLengths@@Base+0x18c>  // b.tcont
    3e30:	str	w13, [x10]
    3e34:	asr	w14, w12, #1
    3e38:	ldrsw	x13, [x23, w14, sxtw #2]
    3e3c:	ldr	w10, [x26, x13, lsl #2]
    3e40:	cmp	w11, w10
    3e44:	add	x10, x23, w12, sxtw #2
    3e48:	mov	w12, w14
    3e4c:	b.lt	3e30 <BZ2_hbMakeCodeLengths@@Base+0x16c>  // b.tstop
    3e50:	str	w9, [x10]
    3e54:	cmp	x8, x25
    3e58:	add	x9, x9, #0x1
    3e5c:	b.ne	3e04 <BZ2_hbMakeCodeLengths@@Base+0x140>  // b.any
    3e60:	cmp	w20, #0x104
    3e64:	b.cs	3e78 <BZ2_hbMakeCodeLengths@@Base+0x1b4>  // b.hs, b.nlast
    3e68:	cmp	w20, #0x2
    3e6c:	mov	w8, w20
    3e70:	b.ge	3e8c <BZ2_hbMakeCodeLengths@@Base+0x1c8>  // b.tcont
    3e74:	b	407c <BZ2_hbMakeCodeLengths@@Base+0x3b8>
    3e78:	mov	w0, #0x7d1                 	// #2001
    3e7c:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    3e80:	cmp	w20, #0x2
    3e84:	mov	w8, w20
    3e88:	b.lt	407c <BZ2_hbMakeCodeLengths@@Base+0x3b8>  // b.tstop
    3e8c:	ldr	x8, [sp, #24]
    3e90:	mov	x9, x25
    3e94:	b	3ea8 <BZ2_hbMakeCodeLengths@@Base+0x1e4>
    3e98:	cmp	x9, #0x2
    3e9c:	mov	x9, x10
    3ea0:	str	w8, [x12]
    3ea4:	b.le	407c <BZ2_hbMakeCodeLengths@@Base+0x3b8>
    3ea8:	ldr	w12, [x23, x9, lsl #2]
    3eac:	ldrsw	x11, [sp, #4172]
    3eb0:	cmp	x9, #0x3
    3eb4:	sub	x10, x9, #0x1
    3eb8:	str	w12, [sp, #4172]
    3ebc:	b.lt	3f3c <BZ2_hbMakeCodeLengths@@Base+0x278>  // b.tstop
    3ec0:	sxtw	x13, w12
    3ec4:	ldr	w13, [x26, x13, lsl #2]
    3ec8:	mov	w14, #0x1                   	// #1
    3ecc:	mov	w16, #0x2                   	// #2
    3ed0:	sxtw	x17, w16
    3ed4:	cmp	x10, x17
    3ed8:	b.le	3f10 <BZ2_hbMakeCodeLengths@@Base+0x24c>
    3edc:	orr	x15, x17, #0x1
    3ee0:	ldrsw	x18, [x23, x15, lsl #2]
    3ee4:	ldrsw	x17, [x23, x17, lsl #2]
    3ee8:	ldr	w18, [x26, x18, lsl #2]
    3eec:	ldr	w17, [x26, x17, lsl #2]
    3ef0:	cmp	w18, w17
    3ef4:	csel	w15, w15, w16, lt  // lt = tstop
    3ef8:	sxtw	x17, w15
    3efc:	ldrsw	x17, [x23, x17, lsl #2]
    3f00:	ldr	w16, [x26, x17, lsl #2]
    3f04:	cmp	w13, w16
    3f08:	b.ge	3f24 <BZ2_hbMakeCodeLengths@@Base+0x260>  // b.tcont
    3f0c:	b	3f44 <BZ2_hbMakeCodeLengths@@Base+0x280>
    3f10:	mov	w15, w16
    3f14:	ldrsw	x17, [x23, x17, lsl #2]
    3f18:	ldr	w16, [x26, x17, lsl #2]
    3f1c:	cmp	w13, w16
    3f20:	b.lt	3f44 <BZ2_hbMakeCodeLengths@@Base+0x280>  // b.tstop
    3f24:	lsl	w16, w15, #1
    3f28:	cmp	x9, w16, sxtw
    3f2c:	str	w17, [x23, w14, sxtw #2]
    3f30:	mov	w14, w15
    3f34:	b.gt	3ed0 <BZ2_hbMakeCodeLengths@@Base+0x20c>
    3f38:	b	3f48 <BZ2_hbMakeCodeLengths@@Base+0x284>
    3f3c:	mov	w15, #0x1                   	// #1
    3f40:	b	3f48 <BZ2_hbMakeCodeLengths@@Base+0x284>
    3f44:	mov	w15, w14
    3f48:	str	w12, [x23, w15, sxtw #2]
    3f4c:	add	x12, x23, x10, lsl #2
    3f50:	ldr	w14, [x12]
    3f54:	ldrsw	x13, [sp, #4172]
    3f58:	cmp	x9, #0x3
    3f5c:	str	w14, [sp, #4172]
    3f60:	b.gt	3f6c <BZ2_hbMakeCodeLengths@@Base+0x2a8>
    3f64:	mov	w18, #0x1                   	// #1
    3f68:	b	3ff0 <BZ2_hbMakeCodeLengths@@Base+0x32c>
    3f6c:	sxtw	x15, w14
    3f70:	ldr	w15, [x26, x15, lsl #2]
    3f74:	sub	x16, x9, #0x2
    3f78:	mov	w17, #0x1                   	// #1
    3f7c:	mov	w0, #0x2                   	// #2
    3f80:	sxtw	x1, w0
    3f84:	cmp	x16, x1
    3f88:	b.le	3fc0 <BZ2_hbMakeCodeLengths@@Base+0x2fc>
    3f8c:	orr	x18, x1, #0x1
    3f90:	ldrsw	x2, [x23, x18, lsl #2]
    3f94:	ldrsw	x1, [x23, x1, lsl #2]
    3f98:	ldr	w2, [x26, x2, lsl #2]
    3f9c:	ldr	w1, [x26, x1, lsl #2]
    3fa0:	cmp	w2, w1
    3fa4:	csel	w18, w18, w0, lt  // lt = tstop
    3fa8:	sxtw	x1, w18
    3fac:	ldrsw	x1, [x23, x1, lsl #2]
    3fb0:	ldr	w0, [x26, x1, lsl #2]
    3fb4:	cmp	w15, w0
    3fb8:	b.ge	3fd4 <BZ2_hbMakeCodeLengths@@Base+0x310>  // b.tcont
    3fbc:	b	3fec <BZ2_hbMakeCodeLengths@@Base+0x328>
    3fc0:	mov	w18, w0
    3fc4:	ldrsw	x1, [x23, x1, lsl #2]
    3fc8:	ldr	w0, [x26, x1, lsl #2]
    3fcc:	cmp	w15, w0
    3fd0:	b.lt	3fec <BZ2_hbMakeCodeLengths@@Base+0x328>  // b.tstop
    3fd4:	lsl	w0, w18, #1
    3fd8:	cmp	x16, w0, sxtw
    3fdc:	str	w1, [x23, w17, sxtw #2]
    3fe0:	mov	w17, w18
    3fe4:	b.ge	3f80 <BZ2_hbMakeCodeLengths@@Base+0x2bc>  // b.tcont
    3fe8:	b	3ff0 <BZ2_hbMakeCodeLengths@@Base+0x32c>
    3fec:	mov	w18, w17
    3ff0:	lsl	x15, x13, #2
    3ff4:	lsl	x16, x11, #2
    3ff8:	ldr	w13, [x26, x16]
    3ffc:	ldr	w17, [x26, x15]
    4000:	str	w14, [x23, w18, sxtw #2]
    4004:	add	x8, x8, #0x1
    4008:	and	w14, w13, #0xffffff00
    400c:	and	w18, w17, #0xffffff00
    4010:	and	w13, w13, #0xff
    4014:	and	w17, w17, #0xff
    4018:	asr	w11, w10, #1
    401c:	str	w8, [x23, x10, lsl #2]
    4020:	cmp	w13, w17
    4024:	add	w18, w18, w14
    4028:	ldrsw	x14, [x23, w11, sxtw #2]
    402c:	csel	w13, w13, w17, hi  // hi = pmore
    4030:	add	w13, w13, #0x1
    4034:	orr	w13, w13, w18
    4038:	lsl	x17, x8, #2
    403c:	str	w13, [x26, x17]
    4040:	ldr	w18, [x26, x14, lsl #2]
    4044:	str	w8, [x27, x15]
    4048:	str	w8, [x27, x16]
    404c:	str	w28, [x27, x17]
    4050:	cmp	w13, w18
    4054:	b.ge	3e98 <BZ2_hbMakeCodeLengths@@Base+0x1d4>  // b.tcont
    4058:	str	w14, [x12]
    405c:	asr	w15, w11, #1
    4060:	ldrsw	x14, [x23, w15, sxtw #2]
    4064:	ldr	w12, [x26, x14, lsl #2]
    4068:	cmp	w13, w12
    406c:	add	x12, x23, w11, sxtw #2
    4070:	mov	w11, w15
    4074:	b.lt	4058 <BZ2_hbMakeCodeLengths@@Base+0x394>  // b.tstop
    4078:	b	3e98 <BZ2_hbMakeCodeLengths@@Base+0x1d4>
    407c:	cmp	w8, #0x204
    4080:	b.lt	408c <BZ2_hbMakeCodeLengths@@Base+0x3c8>  // b.tstop
    4084:	mov	w0, #0x7d2                 	// #2002
    4088:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    408c:	cmp	w20, #0x1
    4090:	movi	v2.4s, #0x1, lsl #8
    4094:	b.lt	4170 <BZ2_hbMakeCodeLengths@@Base+0x4ac>  // b.tstop
    4098:	mov	w8, wzr
    409c:	mov	w9, #0x1                   	// #1
    40a0:	mov	w10, #0xffffffff            	// #-1
    40a4:	mov	w11, w9
    40a8:	ldr	w11, [x27, w11, sxtw #2]
    40ac:	add	w10, w10, #0x1
    40b0:	tbz	w11, #31, 40a8 <BZ2_hbMakeCodeLengths@@Base+0x3e4>
    40b4:	add	x11, x9, x21
    40b8:	cmp	w10, w19
    40bc:	add	x9, x9, #0x1
    40c0:	csinc	w8, w8, wzr, le
    40c4:	cmp	x9, x24
    40c8:	sturb	w10, [x11, #-1]
    40cc:	b.ne	40a0 <BZ2_hbMakeCodeLengths@@Base+0x3dc>  // b.any
    40d0:	tst	w8, #0xff
    40d4:	b.eq	4170 <BZ2_hbMakeCodeLengths@@Base+0x4ac>  // b.none
    40d8:	cmp	w20, #0x1
    40dc:	b.lt	4160 <BZ2_hbMakeCodeLengths@@Base+0x49c>  // b.tstop
    40e0:	cmp	x22, #0x4
    40e4:	b.cs	40f0 <BZ2_hbMakeCodeLengths@@Base+0x42c>  // b.hs, b.nlast
    40e8:	mov	w9, #0x1                   	// #1
    40ec:	b	412c <BZ2_hbMakeCodeLengths@@Base+0x468>
    40f0:	ldr	x8, [sp, #32]
    40f4:	ldr	x9, [sp, #16]
    40f8:	ldr	q0, [x9]
    40fc:	subs	x8, x8, #0x4
    4100:	sshr	v1.4s, v0.4s, #8
    4104:	usra	v1.4s, v0.4s, #31
    4108:	shl	v0.4s, v1.4s, #7
    410c:	bic	v0.4s, #0xff
    4110:	add	v0.4s, v0.4s, v2.4s
    4114:	str	q0, [x9], #16
    4118:	b.ne	40f8 <BZ2_hbMakeCodeLengths@@Base+0x434>  // b.any
    411c:	ldr	x8, [sp, #32]
    4120:	ldr	x9, [sp, #8]
    4124:	cmp	x22, x8
    4128:	b.eq	3de4 <BZ2_hbMakeCodeLengths@@Base+0x120>  // b.none
    412c:	add	x8, x26, x9, lsl #2
    4130:	sub	x9, x24, x9
    4134:	ldr	w10, [x8]
    4138:	asr	w10, w10, #8
    413c:	cmp	w10, #0x0
    4140:	cinc	w10, w10, lt  // lt = tstop
    4144:	lsl	w10, w10, #7
    4148:	and	w10, w10, #0xffffff00
    414c:	add	w10, w10, #0x100
    4150:	subs	x9, x9, #0x1
    4154:	str	w10, [x8], #4
    4158:	b.ne	4134 <BZ2_hbMakeCodeLengths@@Base+0x470>  // b.any
    415c:	b	3de4 <BZ2_hbMakeCodeLengths@@Base+0x120>
    4160:	mov	w8, #0xfffffffe            	// #-2
    4164:	str	wzr, [sp, #4168]
    4168:	str	wzr, [sp, #2104]
    416c:	str	w8, [sp, #40]
    4170:	add	sp, sp, #0x1, lsl #12
    4174:	add	sp, sp, #0x460
    4178:	ldp	x20, x19, [sp, #80]
    417c:	ldp	x22, x21, [sp, #64]
    4180:	ldp	x24, x23, [sp, #48]
    4184:	ldp	x26, x25, [sp, #32]
    4188:	ldp	x28, x27, [sp, #16]
    418c:	ldp	x29, x30, [sp], #96
    4190:	ret

0000000000004194 <BZ2_hbAssignCodes@@Base>:
    4194:	cmp	w2, w3
    4198:	b.gt	41f8 <BZ2_hbAssignCodes@@Base+0x64>
    419c:	cmp	w4, #0x1
    41a0:	b.lt	41f8 <BZ2_hbAssignCodes@@Base+0x64>  // b.tstop
    41a4:	mov	w8, wzr
    41a8:	mov	w9, w4
    41ac:	b	41c0 <BZ2_hbAssignCodes@@Base+0x2c>
    41b0:	cmp	w2, w3
    41b4:	add	w2, w2, #0x1
    41b8:	lsl	w8, w8, #1
    41bc:	b.ge	41f8 <BZ2_hbAssignCodes@@Base+0x64>  // b.tcont
    41c0:	mov	x10, x9
    41c4:	mov	x11, x0
    41c8:	mov	x12, x1
    41cc:	b	41e0 <BZ2_hbAssignCodes@@Base+0x4c>
    41d0:	add	x12, x12, #0x1
    41d4:	subs	x10, x10, #0x1
    41d8:	add	x11, x11, #0x4
    41dc:	b.eq	41b0 <BZ2_hbAssignCodes@@Base+0x1c>  // b.none
    41e0:	ldrb	w13, [x12]
    41e4:	cmp	w2, w13
    41e8:	b.ne	41d0 <BZ2_hbAssignCodes@@Base+0x3c>  // b.any
    41ec:	str	w8, [x11]
    41f0:	add	w8, w8, #0x1
    41f4:	b	41d0 <BZ2_hbAssignCodes@@Base+0x3c>
    41f8:	ret

00000000000041fc <BZ2_hbCreateDecodeTables@@Base>:
    41fc:	str	x25, [sp, #-64]!
    4200:	stp	x24, x23, [sp, #16]
    4204:	stp	x22, x21, [sp, #32]
    4208:	stp	x20, x19, [sp, #48]
    420c:	cmp	w4, w5
    4210:	b.le	4280 <BZ2_hbCreateDecodeTables@@Base+0x84>
    4214:	movi	v0.2d, #0x0
    4218:	cmp	w6, #0x1
    421c:	stur	q0, [x1, #76]
    4220:	stp	q0, q0, [x1, #48]
    4224:	stp	q0, q0, [x1, #16]
    4228:	str	q0, [x1]
    422c:	b.lt	42d0 <BZ2_hbCreateDecodeTables@@Base+0xd4>  // b.tstop
    4230:	mov	w8, w6
    4234:	ldrb	w9, [x3], #1
    4238:	subs	x8, x8, #0x1
    423c:	add	x9, x1, x9, lsl #2
    4240:	ldr	w10, [x9, #4]
    4244:	add	w10, w10, #0x1
    4248:	str	w10, [x9, #4]
    424c:	b.ne	4234 <BZ2_hbCreateDecodeTables@@Base+0x38>  // b.any
    4250:	ldp	w22, w25, [x1, #4]
    4254:	ldp	w23, w24, [x1, #12]
    4258:	ldp	w20, w21, [x1, #20]
    425c:	ldp	w7, w19, [x1, #28]
    4260:	ldp	w3, w6, [x1, #36]
    4264:	ldp	w18, w2, [x1, #44]
    4268:	ldp	w16, w17, [x1, #52]
    426c:	ldp	w14, w15, [x1, #60]
    4270:	ldp	w12, w13, [x1, #68]
    4274:	ldp	w10, w11, [x1, #76]
    4278:	ldp	w8, w9, [x1, #84]
    427c:	b	4398 <BZ2_hbCreateDecodeTables@@Base+0x19c>
    4280:	cmp	w6, #0x0
    4284:	b.le	432c <BZ2_hbCreateDecodeTables@@Base+0x130>
    4288:	mov	w8, wzr
    428c:	mov	w9, w6
    4290:	mov	w10, w4
    4294:	b	42a4 <BZ2_hbCreateDecodeTables@@Base+0xa8>
    4298:	cmp	w10, w5
    429c:	add	w10, w10, #0x1
    42a0:	b.ge	4214 <BZ2_hbCreateDecodeTables@@Base+0x18>  // b.tcont
    42a4:	mov	x11, xzr
    42a8:	b	42b8 <BZ2_hbCreateDecodeTables@@Base+0xbc>
    42ac:	add	x11, x11, #0x1
    42b0:	cmp	x9, x11
    42b4:	b.eq	4298 <BZ2_hbCreateDecodeTables@@Base+0x9c>  // b.none
    42b8:	ldrb	w12, [x3, x11]
    42bc:	cmp	w10, w12
    42c0:	b.ne	42ac <BZ2_hbCreateDecodeTables@@Base+0xb0>  // b.any
    42c4:	str	w11, [x2, w8, sxtw #2]
    42c8:	add	w8, w8, #0x1
    42cc:	b	42ac <BZ2_hbCreateDecodeTables@@Base+0xb0>
    42d0:	mov	w9, wzr
    42d4:	mov	w8, wzr
    42d8:	mov	w11, wzr
    42dc:	mov	w10, wzr
    42e0:	mov	w13, wzr
    42e4:	mov	w12, wzr
    42e8:	mov	w15, wzr
    42ec:	mov	w14, wzr
    42f0:	mov	w17, wzr
    42f4:	mov	w16, wzr
    42f8:	mov	w2, wzr
    42fc:	mov	w18, wzr
    4300:	mov	w6, wzr
    4304:	mov	w3, wzr
    4308:	mov	w19, wzr
    430c:	mov	w7, wzr
    4310:	mov	w21, wzr
    4314:	mov	w20, wzr
    4318:	mov	w24, wzr
    431c:	mov	w23, wzr
    4320:	mov	w25, wzr
    4324:	mov	w22, wzr
    4328:	b	4398 <BZ2_hbCreateDecodeTables@@Base+0x19c>
    432c:	movi	v0.2d, #0x0
    4330:	mov	w9, wzr
    4334:	mov	w8, wzr
    4338:	mov	w11, wzr
    433c:	mov	w10, wzr
    4340:	mov	w13, wzr
    4344:	mov	w12, wzr
    4348:	mov	w15, wzr
    434c:	mov	w14, wzr
    4350:	mov	w17, wzr
    4354:	mov	w16, wzr
    4358:	mov	w2, wzr
    435c:	mov	w18, wzr
    4360:	mov	w6, wzr
    4364:	mov	w3, wzr
    4368:	mov	w19, wzr
    436c:	mov	w7, wzr
    4370:	mov	w21, wzr
    4374:	mov	w20, wzr
    4378:	mov	w24, wzr
    437c:	mov	w23, wzr
    4380:	mov	w25, wzr
    4384:	mov	w22, wzr
    4388:	stur	q0, [x1, #76]
    438c:	stp	q0, q0, [x1, #48]
    4390:	stp	q0, q0, [x1, #16]
    4394:	str	q0, [x1]
    4398:	add	w25, w25, w22
    439c:	stp	w22, w25, [x1, #4]
    43a0:	add	w22, w23, w25
    43a4:	add	w23, w24, w22
    43a8:	add	w20, w20, w23
    43ac:	add	w21, w21, w20
    43b0:	add	w7, w7, w21
    43b4:	add	w19, w19, w7
    43b8:	add	w3, w3, w19
    43bc:	add	w6, w6, w3
    43c0:	add	w18, w18, w6
    43c4:	add	w2, w2, w18
    43c8:	add	w16, w16, w2
    43cc:	add	w17, w17, w16
    43d0:	add	w14, w14, w17
    43d4:	add	w15, w15, w14
    43d8:	add	w12, w12, w15
    43dc:	add	w13, w13, w12
    43e0:	add	w10, w10, w13
    43e4:	add	w11, w11, w10
    43e8:	add	w8, w8, w11
    43ec:	movi	v0.2d, #0x0
    43f0:	cmp	w4, w5
    43f4:	add	w9, w9, w8
    43f8:	stp	w22, w23, [x1, #12]
    43fc:	stp	w20, w21, [x1, #20]
    4400:	stp	w7, w19, [x1, #28]
    4404:	stp	w3, w6, [x1, #36]
    4408:	stp	w18, w2, [x1, #44]
    440c:	stp	w16, w17, [x1, #52]
    4410:	stp	w14, w15, [x1, #60]
    4414:	stp	w12, w13, [x1, #68]
    4418:	stp	w10, w11, [x1, #76]
    441c:	stp	w8, w9, [x1, #84]
    4420:	stur	q0, [x0, #76]
    4424:	stp	q0, q0, [x0, #48]
    4428:	stp	q0, q0, [x0, #16]
    442c:	str	q0, [x0]
    4430:	b.gt	446c <BZ2_hbCreateDecodeTables@@Base+0x270>
    4434:	mov	w8, wzr
    4438:	sxtw	x10, w4
    443c:	sxtw	x9, w5
    4440:	lsl	x11, x10, #2
    4444:	add	x12, x1, x11
    4448:	ldp	w12, w13, [x12]
    444c:	cmp	x10, x9
    4450:	add	x10, x10, #0x1
    4454:	sub	w12, w13, w12
    4458:	add	w8, w12, w8
    445c:	sub	w12, w8, #0x1
    4460:	lsl	w8, w8, #1
    4464:	str	w12, [x0, x11]
    4468:	b.lt	4440 <BZ2_hbCreateDecodeTables@@Base+0x244>  // b.tstop
    446c:	cmp	w4, w5
    4470:	b.ge	4544 <BZ2_hbCreateDecodeTables@@Base+0x348>  // b.tcont
    4474:	sxtw	x8, w4
    4478:	sxtw	x9, w5
    447c:	sub	x10, x9, x8
    4480:	cmp	x10, #0x7
    4484:	b.ls	4510 <BZ2_hbCreateDecodeTables@@Base+0x314>  // b.plast
    4488:	lsl	x13, x8, #2
    448c:	lsl	x11, x9, #2
    4490:	add	x12, x13, x1
    4494:	add	x14, x12, #0x4
    4498:	add	x15, x0, x11
    449c:	cmp	x14, x15
    44a0:	b.cs	44b8 <BZ2_hbCreateDecodeTables@@Base+0x2bc>  // b.hs, b.nlast
    44a4:	add	x11, x11, x1
    44a8:	add	x11, x11, #0x4
    44ac:	add	x14, x0, x13
    44b0:	cmp	x14, x11
    44b4:	b.cc	4510 <BZ2_hbCreateDecodeTables@@Base+0x314>  // b.lo, b.ul, b.last
    44b8:	and	x11, x10, #0xfffffffffffffff8
    44bc:	add	x13, x13, x0
    44c0:	add	x12, x12, #0x14
    44c4:	add	x8, x11, x8
    44c8:	add	x13, x13, #0x10
    44cc:	movi	v0.4s, #0x2
    44d0:	mov	x14, x11
    44d4:	ldp	q1, q2, [x13, #-16]
    44d8:	ldp	q3, q4, [x12, #-16]
    44dc:	subs	x14, x14, #0x8
    44e0:	add	x13, x13, #0x20
    44e4:	shl	v1.4s, v1.4s, #1
    44e8:	shl	v2.4s, v2.4s, #1
    44ec:	sub	v1.4s, v1.4s, v3.4s
    44f0:	sub	v2.4s, v2.4s, v4.4s
    44f4:	add	v1.4s, v1.4s, v0.4s
    44f8:	add	v2.4s, v2.4s, v0.4s
    44fc:	stp	q1, q2, [x12, #-16]
    4500:	add	x12, x12, #0x20
    4504:	b.ne	44d4 <BZ2_hbCreateDecodeTables@@Base+0x2d8>  // b.any
    4508:	cmp	x10, x11
    450c:	b.eq	4544 <BZ2_hbCreateDecodeTables@@Base+0x348>  // b.none
    4510:	lsl	x10, x8, #2
    4514:	sub	x8, x9, x8
    4518:	add	x9, x0, x10
    451c:	add	x10, x10, x1
    4520:	add	x10, x10, #0x4
    4524:	ldr	w11, [x9], #4
    4528:	ldr	w12, [x10]
    452c:	subs	x8, x8, #0x1
    4530:	lsl	w11, w11, #1
    4534:	sub	w11, w11, w12
    4538:	add	w11, w11, #0x2
    453c:	str	w11, [x10], #4
    4540:	b.ne	4524 <BZ2_hbCreateDecodeTables@@Base+0x328>  // b.any
    4544:	ldp	x20, x19, [sp, #48]
    4548:	ldp	x22, x21, [sp, #32]
    454c:	ldp	x24, x23, [sp, #16]
    4550:	ldr	x25, [sp], #64
    4554:	ret

0000000000004558 <BZ2_bsInitWrite@@Base>:
    4558:	movi	v0.2d, #0x0
    455c:	str	d0, [x0, #640]
    4560:	ret

0000000000004564 <BZ2_compressBlock@@Base>:
    4564:	sub	sp, sp, #0x150
    4568:	stp	x29, x30, [sp, #256]
    456c:	stp	x28, x25, [sp, #272]
    4570:	stp	x24, x23, [sp, #288]
    4574:	stp	x22, x21, [sp, #304]
    4578:	stp	x20, x19, [sp, #320]
    457c:	add	x29, sp, #0x100
    4580:	ldr	w5, [x0, #108]
    4584:	mov	x19, x0
    4588:	mov	w20, w1
    458c:	cmp	w5, #0x1
    4590:	b.lt	45d4 <BZ2_compressBlock@@Base+0x70>  // b.tstop
    4594:	ldr	w8, [x19, #648]
    4598:	ldr	w9, [x19, #652]
    459c:	ldr	w2, [x19, #660]
    45a0:	mvn	w3, w8
    45a4:	eon	w4, w8, w9, ror #31
    45a8:	cmp	w2, #0x2
    45ac:	str	w3, [x19, #648]
    45b0:	str	w4, [x19, #652]
    45b4:	b.lt	45bc <BZ2_compressBlock@@Base+0x58>  // b.tstop
    45b8:	str	wzr, [x19, #116]
    45bc:	ldr	w8, [x19, #656]
    45c0:	cmp	w8, #0x2
    45c4:	b.ge	4fc8 <BZ2_compressBlock@@Base+0xa64>  // b.tcont
    45c8:	mov	x0, x19
    45cc:	bl	1570 <BZ2_blockSort@plt>
    45d0:	ldr	w5, [x19, #108]
    45d4:	ldr	x8, [x19, #32]
    45d8:	ldr	w9, [x19, #660]
    45dc:	add	x8, x8, w5, sxtw
    45e0:	cmp	w9, #0x1
    45e4:	str	x8, [x19, #80]
    45e8:	b.ne	4744 <BZ2_compressBlock@@Base+0x1e0>  // b.any
    45ec:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    45f0:	ldr	d0, [x9, #2592]
    45f4:	ldrsw	x9, [x19, #116]
    45f8:	mov	w10, #0x42                  	// #66
    45fc:	str	d0, [x19, #640]
    4600:	strb	w10, [x8, x9]
    4604:	ldr	w8, [x19, #116]
    4608:	ldr	w10, [x19, #640]
    460c:	ldr	w9, [x19, #644]
    4610:	add	w8, w8, #0x1
    4614:	lsl	w10, w10, #8
    4618:	sub	w11, w9, #0x8
    461c:	cmp	w9, #0x10
    4620:	str	w8, [x19, #116]
    4624:	str	w10, [x19, #640]
    4628:	str	w11, [x19, #644]
    462c:	b.lt	4668 <BZ2_compressBlock@@Base+0x104>  // b.tstop
    4630:	ldr	x9, [x19, #80]
    4634:	lsr	w10, w10, #24
    4638:	strb	w10, [x9, w8, sxtw]
    463c:	ldr	w8, [x19, #116]
    4640:	ldr	w10, [x19, #640]
    4644:	ldr	w9, [x19, #644]
    4648:	add	w8, w8, #0x1
    464c:	lsl	w10, w10, #8
    4650:	sub	w11, w9, #0x8
    4654:	cmp	w9, #0xf
    4658:	str	w8, [x19, #116]
    465c:	str	w10, [x19, #640]
    4660:	str	w11, [x19, #644]
    4664:	b.gt	4630 <BZ2_compressBlock@@Base+0xcc>
    4668:	neg	w11, w9
    466c:	mov	w12, #0x5a                  	// #90
    4670:	lsl	w11, w12, w11
    4674:	cmp	w9, #0x8
    4678:	orr	w11, w11, w10
    467c:	str	w11, [x19, #640]
    4680:	str	w9, [x19, #644]
    4684:	b.lt	46c0 <BZ2_compressBlock@@Base+0x15c>  // b.tstop
    4688:	ldr	x9, [x19, #80]
    468c:	lsr	w10, w11, #24
    4690:	strb	w10, [x9, w8, sxtw]
    4694:	ldr	w8, [x19, #116]
    4698:	ldr	w9, [x19, #640]
    469c:	ldr	w10, [x19, #644]
    46a0:	add	w8, w8, #0x1
    46a4:	lsl	w11, w9, #8
    46a8:	sub	w9, w10, #0x8
    46ac:	cmp	w10, #0xf
    46b0:	str	w8, [x19, #116]
    46b4:	str	w11, [x19, #640]
    46b8:	str	w9, [x19, #644]
    46bc:	b.gt	4688 <BZ2_compressBlock@@Base+0x124>
    46c0:	ldr	w14, [x19, #664]
    46c4:	mov	w10, #0x18                  	// #24
    46c8:	mov	w12, #0x68                  	// #104
    46cc:	sub	w15, w10, w9
    46d0:	lsl	w12, w12, w15
    46d4:	orr	w12, w12, w11
    46d8:	add	w11, w14, #0x30
    46dc:	add	w13, w9, #0x8
    46e0:	and	w11, w11, #0xff
    46e4:	str	w13, [x19, #644]
    46e8:	str	w12, [x19, #640]
    46ec:	tbnz	w9, #31, 4728 <BZ2_compressBlock@@Base+0x1c4>
    46f0:	ldr	x9, [x19, #80]
    46f4:	lsr	w12, w12, #24
    46f8:	strb	w12, [x9, w8, sxtw]
    46fc:	ldr	w8, [x19, #116]
    4700:	ldr	w9, [x19, #640]
    4704:	ldr	w14, [x19, #644]
    4708:	add	w8, w8, #0x1
    470c:	lsl	w12, w9, #8
    4710:	sub	w13, w14, #0x8
    4714:	cmp	w14, #0xf
    4718:	str	w8, [x19, #116]
    471c:	str	w12, [x19, #640]
    4720:	str	w13, [x19, #644]
    4724:	b.gt	46f0 <BZ2_compressBlock@@Base+0x18c>
    4728:	ldr	w5, [x19, #108]
    472c:	sub	w8, w10, w13
    4730:	lsl	w8, w11, w8
    4734:	add	w9, w13, #0x8
    4738:	orr	w8, w8, w12
    473c:	str	w8, [x19, #640]
    4740:	str	w9, [x19, #644]
    4744:	cmp	w5, #0x1
    4748:	b.lt	4cfc <BZ2_compressBlock@@Base+0x798>  // b.tstop
    474c:	ldr	w10, [x19, #644]
    4750:	cmp	w10, #0x7
    4754:	b.le	479c <BZ2_compressBlock@@Base+0x238>
    4758:	ldr	w9, [x19, #640]
    475c:	ldr	w8, [x19, #116]
    4760:	ldr	x10, [x19, #80]
    4764:	lsr	w9, w9, #24
    4768:	strb	w9, [x10, w8, sxtw]
    476c:	ldr	w8, [x19, #116]
    4770:	ldr	w9, [x19, #640]
    4774:	ldr	w11, [x19, #644]
    4778:	add	w8, w8, #0x1
    477c:	lsl	w9, w9, #8
    4780:	sub	w10, w11, #0x8
    4784:	cmp	w11, #0xf
    4788:	str	w8, [x19, #116]
    478c:	str	w9, [x19, #640]
    4790:	str	w10, [x19, #644]
    4794:	b.gt	4760 <BZ2_compressBlock@@Base+0x1fc>
    4798:	b	47a0 <BZ2_compressBlock@@Base+0x23c>
    479c:	ldr	w9, [x19, #640]
    47a0:	mov	w8, #0x18                  	// #24
    47a4:	mov	w12, #0x31                  	// #49
    47a8:	sub	w13, w8, w10
    47ac:	lsl	w12, w12, w13
    47b0:	add	w11, w10, #0x8
    47b4:	orr	w9, w12, w9
    47b8:	str	w9, [x19, #640]
    47bc:	str	w11, [x19, #644]
    47c0:	tbnz	w10, #31, 4800 <BZ2_compressBlock@@Base+0x29c>
    47c4:	ldr	w10, [x19, #116]
    47c8:	ldr	x11, [x19, #80]
    47cc:	lsr	w9, w9, #24
    47d0:	strb	w9, [x11, w10, sxtw]
    47d4:	ldr	w9, [x19, #116]
    47d8:	ldr	w11, [x19, #640]
    47dc:	ldr	w12, [x19, #644]
    47e0:	add	w10, w9, #0x1
    47e4:	lsl	w9, w11, #8
    47e8:	sub	w11, w12, #0x8
    47ec:	cmp	w12, #0xf
    47f0:	str	w10, [x19, #116]
    47f4:	str	w9, [x19, #640]
    47f8:	str	w11, [x19, #644]
    47fc:	b.gt	47c8 <BZ2_compressBlock@@Base+0x264>
    4800:	sub	w8, w8, w11
    4804:	mov	w12, #0x41                  	// #65
    4808:	lsl	w8, w12, w8
    480c:	add	w10, w11, #0x8
    4810:	orr	w9, w8, w9
    4814:	str	w9, [x19, #640]
    4818:	str	w10, [x19, #644]
    481c:	tbnz	w11, #31, 485c <BZ2_compressBlock@@Base+0x2f8>
    4820:	ldr	w8, [x19, #116]
    4824:	ldr	x10, [x19, #80]
    4828:	lsr	w9, w9, #24
    482c:	strb	w9, [x10, w8, sxtw]
    4830:	ldr	w8, [x19, #116]
    4834:	ldr	w9, [x19, #640]
    4838:	ldr	w11, [x19, #644]
    483c:	add	w8, w8, #0x1
    4840:	lsl	w9, w9, #8
    4844:	sub	w10, w11, #0x8
    4848:	cmp	w11, #0xf
    484c:	str	w8, [x19, #116]
    4850:	str	w9, [x19, #640]
    4854:	str	w10, [x19, #644]
    4858:	b.gt	4824 <BZ2_compressBlock@@Base+0x2c0>
    485c:	mov	w8, #0x18                  	// #24
    4860:	mov	w12, #0x59                  	// #89
    4864:	sub	w13, w8, w10
    4868:	lsl	w12, w12, w13
    486c:	add	w11, w10, #0x8
    4870:	orr	w9, w12, w9
    4874:	str	w9, [x19, #640]
    4878:	str	w11, [x19, #644]
    487c:	tbnz	w10, #31, 48bc <BZ2_compressBlock@@Base+0x358>
    4880:	ldr	w10, [x19, #116]
    4884:	ldr	x11, [x19, #80]
    4888:	lsr	w9, w9, #24
    488c:	strb	w9, [x11, w10, sxtw]
    4890:	ldr	w9, [x19, #116]
    4894:	ldr	w11, [x19, #640]
    4898:	ldr	w12, [x19, #644]
    489c:	add	w10, w9, #0x1
    48a0:	lsl	w9, w11, #8
    48a4:	sub	w11, w12, #0x8
    48a8:	cmp	w12, #0xf
    48ac:	str	w10, [x19, #116]
    48b0:	str	w9, [x19, #640]
    48b4:	str	w11, [x19, #644]
    48b8:	b.gt	4884 <BZ2_compressBlock@@Base+0x320>
    48bc:	sub	w8, w8, w11
    48c0:	mov	w12, #0x26                  	// #38
    48c4:	lsl	w8, w12, w8
    48c8:	add	w10, w11, #0x8
    48cc:	orr	w9, w8, w9
    48d0:	str	w9, [x19, #640]
    48d4:	str	w10, [x19, #644]
    48d8:	tbnz	w11, #31, 4918 <BZ2_compressBlock@@Base+0x3b4>
    48dc:	ldr	w8, [x19, #116]
    48e0:	ldr	x10, [x19, #80]
    48e4:	lsr	w9, w9, #24
    48e8:	strb	w9, [x10, w8, sxtw]
    48ec:	ldr	w8, [x19, #116]
    48f0:	ldr	w9, [x19, #640]
    48f4:	ldr	w11, [x19, #644]
    48f8:	add	w8, w8, #0x1
    48fc:	lsl	w9, w9, #8
    4900:	sub	w10, w11, #0x8
    4904:	cmp	w11, #0xf
    4908:	str	w8, [x19, #116]
    490c:	str	w9, [x19, #640]
    4910:	str	w10, [x19, #644]
    4914:	b.gt	48e0 <BZ2_compressBlock@@Base+0x37c>
    4918:	mov	w8, #0x18                  	// #24
    491c:	mov	w12, #0x53                  	// #83
    4920:	sub	w13, w8, w10
    4924:	lsl	w12, w12, w13
    4928:	add	w11, w10, #0x8
    492c:	orr	w9, w12, w9
    4930:	str	w9, [x19, #640]
    4934:	str	w11, [x19, #644]
    4938:	tbnz	w10, #31, 4978 <BZ2_compressBlock@@Base+0x414>
    493c:	ldr	w10, [x19, #116]
    4940:	ldr	x11, [x19, #80]
    4944:	lsr	w9, w9, #24
    4948:	strb	w9, [x11, w10, sxtw]
    494c:	ldr	w9, [x19, #116]
    4950:	ldr	w11, [x19, #640]
    4954:	ldr	w12, [x19, #644]
    4958:	add	w10, w9, #0x1
    495c:	lsl	w9, w11, #8
    4960:	sub	w11, w12, #0x8
    4964:	cmp	w12, #0xf
    4968:	str	w10, [x19, #116]
    496c:	str	w9, [x19, #640]
    4970:	str	w11, [x19, #644]
    4974:	b.gt	4940 <BZ2_compressBlock@@Base+0x3dc>
    4978:	ldr	w1, [x19, #648]
    497c:	sub	w8, w8, w11
    4980:	mov	w10, #0x59                  	// #89
    4984:	lsl	w8, w10, w8
    4988:	add	w11, w11, #0x8
    498c:	orr	w8, w8, w9
    4990:	mov	x0, x19
    4994:	str	w8, [x19, #640]
    4998:	str	w11, [x19, #644]
    499c:	bl	5010 <BZ2_compressBlock@@Base+0xaac>
    49a0:	ldr	w10, [x19, #644]
    49a4:	cmp	w10, #0x7
    49a8:	b.le	49f0 <BZ2_compressBlock@@Base+0x48c>
    49ac:	ldr	w8, [x19, #640]
    49b0:	ldr	w9, [x19, #116]
    49b4:	ldr	x10, [x19, #80]
    49b8:	lsr	w8, w8, #24
    49bc:	strb	w8, [x10, w9, sxtw]
    49c0:	ldr	w8, [x19, #116]
    49c4:	ldr	w10, [x19, #640]
    49c8:	ldr	w11, [x19, #644]
    49cc:	add	w9, w8, #0x1
    49d0:	lsl	w8, w10, #8
    49d4:	sub	w10, w11, #0x8
    49d8:	cmp	w11, #0xf
    49dc:	str	w9, [x19, #116]
    49e0:	str	w8, [x19, #640]
    49e4:	str	w10, [x19, #644]
    49e8:	b.gt	49b4 <BZ2_compressBlock@@Base+0x450>
    49ec:	b	49f4 <BZ2_compressBlock@@Base+0x490>
    49f0:	ldr	w8, [x19, #640]
    49f4:	ldr	w9, [x19, #48]
    49f8:	add	w11, w10, #0x1
    49fc:	cmp	w10, #0x7
    4a00:	str	w8, [x19, #640]
    4a04:	str	w11, [x19, #644]
    4a08:	b.lt	4a48 <BZ2_compressBlock@@Base+0x4e4>  // b.tstop
    4a0c:	ldr	w10, [x19, #116]
    4a10:	ldr	x11, [x19, #80]
    4a14:	lsr	w8, w8, #24
    4a18:	strb	w8, [x11, w10, sxtw]
    4a1c:	ldr	w8, [x19, #116]
    4a20:	ldr	w11, [x19, #640]
    4a24:	ldr	w12, [x19, #644]
    4a28:	add	w10, w8, #0x1
    4a2c:	lsl	w8, w11, #8
    4a30:	sub	w11, w12, #0x8
    4a34:	cmp	w12, #0xf
    4a38:	str	w10, [x19, #116]
    4a3c:	str	w8, [x19, #640]
    4a40:	str	w11, [x19, #644]
    4a44:	b.gt	4a10 <BZ2_compressBlock@@Base+0x4ac>
    4a48:	mov	w12, #0x8                   	// #8
    4a4c:	ldp	x23, x24, [x19, #56]
    4a50:	ldr	x21, [x19, #72]
    4a54:	add	w13, w11, #0x18
    4a58:	sub	w11, w12, w11
    4a5c:	lsl	w9, w9, w11
    4a60:	mov	w25, wzr
    4a64:	mov	x10, xzr
    4a68:	orr	w8, w9, w8
    4a6c:	str	w13, [x19, #644]
    4a70:	str	w8, [x19, #640]
    4a74:	str	wzr, [x19, #124]
    4a78:	b	4a88 <BZ2_compressBlock@@Base+0x524>
    4a7c:	add	x10, x10, #0x1
    4a80:	cmp	x10, #0x100
    4a84:	b.eq	4aa4 <BZ2_compressBlock@@Base+0x540>  // b.none
    4a88:	add	x8, x19, x10
    4a8c:	ldrb	w9, [x8, #128]
    4a90:	cbz	w9, 4a7c <BZ2_compressBlock@@Base+0x518>
    4a94:	strb	w25, [x8, #384]
    4a98:	add	w25, w25, #0x1
    4a9c:	str	w25, [x19, #124]
    4aa0:	b	4a7c <BZ2_compressBlock@@Base+0x518>
    4aa4:	cmn	w25, #0x1
    4aa8:	add	w22, w25, #0x1
    4aac:	b.lt	4b28 <BZ2_compressBlock@@Base+0x5c4>  // b.tstop
    4ab0:	mov	w8, w22
    4ab4:	lsl	x8, x8, #2
    4ab8:	add	x0, x19, #0x2a0
    4abc:	add	x2, x8, #0x4
    4ac0:	mov	w1, wzr
    4ac4:	bl	14a0 <memset@plt>
    4ac8:	cmp	w25, #0x1
    4acc:	b.lt	4b28 <BZ2_compressBlock@@Base+0x5c4>  // b.tstop
    4ad0:	cmp	w25, #0xf
    4ad4:	mov	w8, w25
    4ad8:	b.hi	4ae4 <BZ2_compressBlock@@Base+0x580>  // b.pmore
    4adc:	mov	x9, xzr
    4ae0:	b	4b14 <BZ2_compressBlock@@Base+0x5b0>
    4ae4:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    4ae8:	ldr	q0, [x9, #2608]
    4aec:	and	x9, x8, #0xfffffff0
    4af0:	mov	x10, sp
    4af4:	movi	v1.16b, #0x10
    4af8:	mov	x11, x9
    4afc:	str	q0, [x10], #16
    4b00:	subs	x11, x11, #0x10
    4b04:	add	v0.16b, v0.16b, v1.16b
    4b08:	b.ne	4afc <BZ2_compressBlock@@Base+0x598>  // b.any
    4b0c:	cmp	x9, x8
    4b10:	b.eq	4b28 <BZ2_compressBlock@@Base+0x5c4>  // b.none
    4b14:	mov	x10, sp
    4b18:	strb	w9, [x10, x9]
    4b1c:	add	x9, x9, #0x1
    4b20:	cmp	x8, x9
    4b24:	b.ne	4b18 <BZ2_compressBlock@@Base+0x5b4>  // b.any
    4b28:	ldr	w15, [x19, #108]
    4b2c:	cmp	w15, #0x1
    4b30:	b.lt	4cd4 <BZ2_compressBlock@@Base+0x770>  // b.tstop
    4b34:	mov	x10, sp
    4b38:	mov	x9, xzr
    4b3c:	mov	w13, wzr
    4b40:	mov	w8, wzr
    4b44:	orr	x11, x10, #0x1
    4b48:	mov	w12, #0x1                   	// #1
    4b4c:	b	4b88 <BZ2_compressBlock@@Base+0x624>
    4b50:	strb	w14, [sp]
    4b54:	sub	w14, w15, w10
    4b58:	sxtw	x14, w14
    4b5c:	add	x14, x14, #0x1
    4b60:	strh	w14, [x21, w8, sxtw #1]
    4b64:	add	x14, x19, x14, lsl #2
    4b68:	ldr	w15, [x14, #672]
    4b6c:	add	w8, w8, #0x1
    4b70:	add	w15, w15, #0x1
    4b74:	str	w15, [x14, #672]
    4b78:	ldr	w15, [x19, #108]
    4b7c:	add	x9, x9, #0x1
    4b80:	cmp	x9, w15, sxtw
    4b84:	b.ge	4c68 <BZ2_compressBlock@@Base+0x704>  // b.tcont
    4b88:	ldr	w14, [x23, x9, lsl #2]
    4b8c:	sub	w14, w14, #0x1
    4b90:	and	w16, w15, w14, asr #31
    4b94:	add	w14, w16, w14
    4b98:	ldrb	w14, [x24, w14, sxtw]
    4b9c:	ldrb	w16, [sp]
    4ba0:	add	x14, x19, x14
    4ba4:	ldrb	w14, [x14, #384]
    4ba8:	cmp	w16, w14
    4bac:	b.ne	4bc4 <BZ2_compressBlock@@Base+0x660>  // b.any
    4bb0:	add	w13, w13, #0x1
    4bb4:	add	x9, x9, #0x1
    4bb8:	cmp	x9, w15, sxtw
    4bbc:	b.lt	4b88 <BZ2_compressBlock@@Base+0x624>  // b.tstop
    4bc0:	b	4c68 <BZ2_compressBlock@@Base+0x704>
    4bc4:	subs	w15, w13, #0x1
    4bc8:	b.lt	4c38 <BZ2_compressBlock@@Base+0x6d4>  // b.tstop
    4bcc:	add	w16, w8, #0x1
    4bd0:	add	x13, x21, w8, sxtw #1
    4bd4:	mov	w8, w16
    4bd8:	tbnz	w15, #0, 4bf8 <BZ2_compressBlock@@Base+0x694>
    4bdc:	strh	wzr, [x13]
    4be0:	ldr	w16, [x19, #672]
    4be4:	add	w16, w16, #0x1
    4be8:	str	w16, [x19, #672]
    4bec:	subs	w16, w15, #0x2
    4bf0:	b.ge	4c10 <BZ2_compressBlock@@Base+0x6ac>  // b.tcont
    4bf4:	b	4c30 <BZ2_compressBlock@@Base+0x6cc>
    4bf8:	strh	w12, [x13]
    4bfc:	ldr	w16, [x19, #676]
    4c00:	add	w16, w16, #0x1
    4c04:	str	w16, [x19, #676]
    4c08:	subs	w16, w15, #0x2
    4c0c:	b.lt	4c30 <BZ2_compressBlock@@Base+0x6cc>  // b.tstop
    4c10:	sub	w15, w15, #0x1
    4c14:	cmp	w16, #0x0
    4c18:	csel	w15, w15, w16, lt  // lt = tstop
    4c1c:	add	w8, w8, #0x1
    4c20:	asr	w15, w15, #1
    4c24:	add	x13, x13, #0x2
    4c28:	tbnz	w15, #0, 4bf8 <BZ2_compressBlock@@Base+0x694>
    4c2c:	b	4bdc <BZ2_compressBlock@@Base+0x678>
    4c30:	ldrb	w16, [sp]
    4c34:	mov	w13, wzr
    4c38:	ldrb	w17, [sp, #1]
    4c3c:	mov	x15, x11
    4c40:	strb	w16, [sp, #1]
    4c44:	cmp	w14, w17
    4c48:	b.eq	4b50 <BZ2_compressBlock@@Base+0x5ec>  // b.none
    4c4c:	mov	x15, x11
    4c50:	ldrb	w16, [x15, #1]!
    4c54:	cmp	w14, w16
    4c58:	strb	w17, [x15]
    4c5c:	mov	w17, w16
    4c60:	b.ne	4c50 <BZ2_compressBlock@@Base+0x6ec>  // b.any
    4c64:	b	4b50 <BZ2_compressBlock@@Base+0x5ec>
    4c68:	subs	w9, w13, #0x1
    4c6c:	b.lt	4cd8 <BZ2_compressBlock@@Base+0x774>  // b.tstop
    4c70:	add	x10, x21, w8, sxtw #1
    4c74:	add	w8, w8, #0x1
    4c78:	mov	w11, #0x1                   	// #1
    4c7c:	tbnz	w9, #0, 4c9c <BZ2_compressBlock@@Base+0x738>
    4c80:	strh	wzr, [x10]
    4c84:	ldr	w12, [x19, #672]
    4c88:	add	w12, w12, #0x1
    4c8c:	str	w12, [x19, #672]
    4c90:	subs	w12, w9, #0x2
    4c94:	b.ge	4cb4 <BZ2_compressBlock@@Base+0x750>  // b.tcont
    4c98:	b	4cd8 <BZ2_compressBlock@@Base+0x774>
    4c9c:	strh	w11, [x10]
    4ca0:	ldr	w12, [x19, #676]
    4ca4:	add	w12, w12, #0x1
    4ca8:	str	w12, [x19, #676]
    4cac:	subs	w12, w9, #0x2
    4cb0:	b.lt	4cd8 <BZ2_compressBlock@@Base+0x774>  // b.tstop
    4cb4:	sub	w9, w9, #0x1
    4cb8:	cmp	w12, #0x0
    4cbc:	csel	w9, w9, w12, lt  // lt = tstop
    4cc0:	add	w8, w8, #0x1
    4cc4:	asr	w9, w9, #1
    4cc8:	add	x10, x10, #0x2
    4ccc:	tbnz	w9, #0, 4c9c <BZ2_compressBlock@@Base+0x738>
    4cd0:	b	4c80 <BZ2_compressBlock@@Base+0x71c>
    4cd4:	mov	w8, wzr
    4cd8:	strh	w22, [x21, w8, sxtw #1]
    4cdc:	add	x9, x19, w22, sxtw #2
    4ce0:	ldr	w10, [x9, #672]
    4ce4:	add	w8, w8, #0x1
    4ce8:	mov	x0, x19
    4cec:	add	w10, w10, #0x1
    4cf0:	str	w10, [x9, #672]
    4cf4:	str	w8, [x19, #668]
    4cf8:	bl	51a0 <BZ2_compressBlock@@Base+0xc3c>
    4cfc:	tst	w20, #0xff
    4d00:	b.eq	4fac <BZ2_compressBlock@@Base+0xa48>  // b.none
    4d04:	ldr	w10, [x19, #644]
    4d08:	cmp	w10, #0x7
    4d0c:	b.le	4d54 <BZ2_compressBlock@@Base+0x7f0>
    4d10:	ldr	w9, [x19, #640]
    4d14:	ldr	w8, [x19, #116]
    4d18:	ldr	x10, [x19, #80]
    4d1c:	lsr	w9, w9, #24
    4d20:	strb	w9, [x10, w8, sxtw]
    4d24:	ldr	w8, [x19, #116]
    4d28:	ldr	w9, [x19, #640]
    4d2c:	ldr	w11, [x19, #644]
    4d30:	add	w8, w8, #0x1
    4d34:	lsl	w9, w9, #8
    4d38:	sub	w10, w11, #0x8
    4d3c:	cmp	w11, #0xf
    4d40:	str	w8, [x19, #116]
    4d44:	str	w9, [x19, #640]
    4d48:	str	w10, [x19, #644]
    4d4c:	b.gt	4d18 <BZ2_compressBlock@@Base+0x7b4>
    4d50:	b	4d58 <BZ2_compressBlock@@Base+0x7f4>
    4d54:	ldr	w9, [x19, #640]
    4d58:	mov	w8, #0x18                  	// #24
    4d5c:	mov	w12, #0x17                  	// #23
    4d60:	sub	w13, w8, w10
    4d64:	lsl	w12, w12, w13
    4d68:	add	w11, w10, #0x8
    4d6c:	orr	w9, w12, w9
    4d70:	str	w9, [x19, #640]
    4d74:	str	w11, [x19, #644]
    4d78:	tbnz	w10, #31, 4db8 <BZ2_compressBlock@@Base+0x854>
    4d7c:	ldr	w10, [x19, #116]
    4d80:	ldr	x11, [x19, #80]
    4d84:	lsr	w9, w9, #24
    4d88:	strb	w9, [x11, w10, sxtw]
    4d8c:	ldr	w9, [x19, #116]
    4d90:	ldr	w11, [x19, #640]
    4d94:	ldr	w12, [x19, #644]
    4d98:	add	w10, w9, #0x1
    4d9c:	lsl	w9, w11, #8
    4da0:	sub	w11, w12, #0x8
    4da4:	cmp	w12, #0xf
    4da8:	str	w10, [x19, #116]
    4dac:	str	w9, [x19, #640]
    4db0:	str	w11, [x19, #644]
    4db4:	b.gt	4d80 <BZ2_compressBlock@@Base+0x81c>
    4db8:	sub	w8, w8, w11
    4dbc:	mov	w12, #0x72                  	// #114
    4dc0:	lsl	w8, w12, w8
    4dc4:	add	w10, w11, #0x8
    4dc8:	orr	w9, w8, w9
    4dcc:	str	w9, [x19, #640]
    4dd0:	str	w10, [x19, #644]
    4dd4:	tbnz	w11, #31, 4e14 <BZ2_compressBlock@@Base+0x8b0>
    4dd8:	ldr	w8, [x19, #116]
    4ddc:	ldr	x10, [x19, #80]
    4de0:	lsr	w9, w9, #24
    4de4:	strb	w9, [x10, w8, sxtw]
    4de8:	ldr	w8, [x19, #116]
    4dec:	ldr	w9, [x19, #640]
    4df0:	ldr	w11, [x19, #644]
    4df4:	add	w8, w8, #0x1
    4df8:	lsl	w9, w9, #8
    4dfc:	sub	w10, w11, #0x8
    4e00:	cmp	w11, #0xf
    4e04:	str	w8, [x19, #116]
    4e08:	str	w9, [x19, #640]
    4e0c:	str	w10, [x19, #644]
    4e10:	b.gt	4ddc <BZ2_compressBlock@@Base+0x878>
    4e14:	mov	w8, #0x18                  	// #24
    4e18:	mov	w12, #0x45                  	// #69
    4e1c:	sub	w13, w8, w10
    4e20:	lsl	w12, w12, w13
    4e24:	add	w11, w10, #0x8
    4e28:	orr	w9, w12, w9
    4e2c:	str	w9, [x19, #640]
    4e30:	str	w11, [x19, #644]
    4e34:	tbnz	w10, #31, 4e74 <BZ2_compressBlock@@Base+0x910>
    4e38:	ldr	w10, [x19, #116]
    4e3c:	ldr	x11, [x19, #80]
    4e40:	lsr	w9, w9, #24
    4e44:	strb	w9, [x11, w10, sxtw]
    4e48:	ldr	w9, [x19, #116]
    4e4c:	ldr	w11, [x19, #640]
    4e50:	ldr	w12, [x19, #644]
    4e54:	add	w10, w9, #0x1
    4e58:	lsl	w9, w11, #8
    4e5c:	sub	w11, w12, #0x8
    4e60:	cmp	w12, #0xf
    4e64:	str	w10, [x19, #116]
    4e68:	str	w9, [x19, #640]
    4e6c:	str	w11, [x19, #644]
    4e70:	b.gt	4e3c <BZ2_compressBlock@@Base+0x8d8>
    4e74:	sub	w8, w8, w11
    4e78:	mov	w12, #0x38                  	// #56
    4e7c:	lsl	w8, w12, w8
    4e80:	add	w10, w11, #0x8
    4e84:	orr	w9, w8, w9
    4e88:	str	w9, [x19, #640]
    4e8c:	str	w10, [x19, #644]
    4e90:	tbnz	w11, #31, 4ed0 <BZ2_compressBlock@@Base+0x96c>
    4e94:	ldr	w8, [x19, #116]
    4e98:	ldr	x10, [x19, #80]
    4e9c:	lsr	w9, w9, #24
    4ea0:	strb	w9, [x10, w8, sxtw]
    4ea4:	ldr	w8, [x19, #116]
    4ea8:	ldr	w9, [x19, #640]
    4eac:	ldr	w11, [x19, #644]
    4eb0:	add	w8, w8, #0x1
    4eb4:	lsl	w9, w9, #8
    4eb8:	sub	w10, w11, #0x8
    4ebc:	cmp	w11, #0xf
    4ec0:	str	w8, [x19, #116]
    4ec4:	str	w9, [x19, #640]
    4ec8:	str	w10, [x19, #644]
    4ecc:	b.gt	4e98 <BZ2_compressBlock@@Base+0x934>
    4ed0:	mov	w8, #0x18                  	// #24
    4ed4:	mov	w12, #0x50                  	// #80
    4ed8:	sub	w13, w8, w10
    4edc:	lsl	w12, w12, w13
    4ee0:	add	w11, w10, #0x8
    4ee4:	orr	w9, w12, w9
    4ee8:	str	w9, [x19, #640]
    4eec:	str	w11, [x19, #644]
    4ef0:	tbnz	w10, #31, 4f30 <BZ2_compressBlock@@Base+0x9cc>
    4ef4:	ldr	w10, [x19, #116]
    4ef8:	ldr	x11, [x19, #80]
    4efc:	lsr	w9, w9, #24
    4f00:	strb	w9, [x11, w10, sxtw]
    4f04:	ldr	w9, [x19, #116]
    4f08:	ldr	w11, [x19, #640]
    4f0c:	ldr	w12, [x19, #644]
    4f10:	add	w10, w9, #0x1
    4f14:	lsl	w9, w11, #8
    4f18:	sub	w11, w12, #0x8
    4f1c:	cmp	w12, #0xf
    4f20:	str	w10, [x19, #116]
    4f24:	str	w9, [x19, #640]
    4f28:	str	w11, [x19, #644]
    4f2c:	b.gt	4ef8 <BZ2_compressBlock@@Base+0x994>
    4f30:	ldr	w1, [x19, #652]
    4f34:	sub	w8, w8, w11
    4f38:	mov	w10, #0x90                  	// #144
    4f3c:	lsl	w8, w10, w8
    4f40:	add	w11, w11, #0x8
    4f44:	orr	w8, w8, w9
    4f48:	mov	x0, x19
    4f4c:	str	w8, [x19, #640]
    4f50:	str	w11, [x19, #644]
    4f54:	bl	5010 <BZ2_compressBlock@@Base+0xaac>
    4f58:	ldr	w8, [x19, #656]
    4f5c:	cmp	w8, #0x1
    4f60:	b.gt	4fe4 <BZ2_compressBlock@@Base+0xa80>
    4f64:	ldr	w8, [x19, #644]
    4f68:	cmp	w8, #0x1
    4f6c:	b.lt	4fac <BZ2_compressBlock@@Base+0xa48>  // b.tstop
    4f70:	ldr	w8, [x19, #640]
    4f74:	ldr	w9, [x19, #116]
    4f78:	ldr	x10, [x19, #80]
    4f7c:	lsr	w8, w8, #24
    4f80:	strb	w8, [x10, w9, sxtw]
    4f84:	ldr	w8, [x19, #116]
    4f88:	ldr	w10, [x19, #640]
    4f8c:	ldr	w11, [x19, #644]
    4f90:	add	w9, w8, #0x1
    4f94:	lsl	w8, w10, #8
    4f98:	subs	w10, w11, #0x8
    4f9c:	str	w9, [x19, #116]
    4fa0:	str	w8, [x19, #640]
    4fa4:	str	w10, [x19, #644]
    4fa8:	b.gt	4f78 <BZ2_compressBlock@@Base+0xa14>
    4fac:	ldp	x20, x19, [sp, #320]
    4fb0:	ldp	x22, x21, [sp, #304]
    4fb4:	ldp	x24, x23, [sp, #288]
    4fb8:	ldp	x28, x25, [sp, #272]
    4fbc:	ldp	x29, x30, [sp, #256]
    4fc0:	add	sp, sp, #0x150
    4fc4:	ret
    4fc8:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    4fcc:	ldr	x8, [x8, #4016]
    4fd0:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    4fd4:	add	x1, x1, #0xa60
    4fd8:	ldr	x0, [x8]
    4fdc:	bl	1610 <fprintf@plt>
    4fe0:	b	45c8 <BZ2_compressBlock@@Base+0x64>
    4fe4:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    4fe8:	ldr	x8, [x8, #4016]
    4fec:	ldr	w2, [x19, #652]
    4ff0:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    4ff4:	add	x1, x1, #0xa9e
    4ff8:	ldr	x0, [x8]
    4ffc:	bl	1610 <fprintf@plt>
    5000:	ldr	w8, [x19, #644]
    5004:	cmp	w8, #0x1
    5008:	b.ge	4f70 <BZ2_compressBlock@@Base+0xa0c>  // b.tcont
    500c:	b	4fac <BZ2_compressBlock@@Base+0xa48>
    5010:	ldr	w11, [x0, #644]
    5014:	lsr	w8, w1, #24
    5018:	cmp	w11, #0x7
    501c:	b.le	5064 <BZ2_compressBlock@@Base+0xb00>
    5020:	ldr	w10, [x0, #640]
    5024:	ldr	w9, [x0, #116]
    5028:	ldr	x11, [x0, #80]
    502c:	lsr	w10, w10, #24
    5030:	strb	w10, [x11, w9, sxtw]
    5034:	ldr	w9, [x0, #116]
    5038:	ldr	w10, [x0, #640]
    503c:	ldr	w12, [x0, #644]
    5040:	add	w9, w9, #0x1
    5044:	lsl	w10, w10, #8
    5048:	sub	w11, w12, #0x8
    504c:	cmp	w12, #0xf
    5050:	str	w9, [x0, #116]
    5054:	str	w10, [x0, #640]
    5058:	str	w11, [x0, #644]
    505c:	b.gt	5028 <BZ2_compressBlock@@Base+0xac4>
    5060:	b	5068 <BZ2_compressBlock@@Base+0xb04>
    5064:	ldr	w10, [x0, #640]
    5068:	mov	w9, #0x18                  	// #24
    506c:	sub	w13, w9, w11
    5070:	lsl	w8, w8, w13
    5074:	add	w12, w11, #0x8
    5078:	orr	w10, w8, w10
    507c:	ubfx	w8, w1, #16, #8
    5080:	str	w12, [x0, #644]
    5084:	str	w10, [x0, #640]
    5088:	tbnz	w11, #31, 50c8 <BZ2_compressBlock@@Base+0xb64>
    508c:	ldr	w11, [x0, #116]
    5090:	ldr	x12, [x0, #80]
    5094:	lsr	w10, w10, #24
    5098:	strb	w10, [x12, w11, sxtw]
    509c:	ldr	w10, [x0, #116]
    50a0:	ldr	w12, [x0, #640]
    50a4:	ldr	w13, [x0, #644]
    50a8:	add	w11, w10, #0x1
    50ac:	lsl	w10, w12, #8
    50b0:	sub	w12, w13, #0x8
    50b4:	cmp	w13, #0xf
    50b8:	str	w11, [x0, #116]
    50bc:	str	w10, [x0, #640]
    50c0:	str	w12, [x0, #644]
    50c4:	b.gt	5090 <BZ2_compressBlock@@Base+0xb2c>
    50c8:	sub	w9, w9, w12
    50cc:	lsl	w8, w8, w9
    50d0:	add	w11, w12, #0x8
    50d4:	orr	w10, w8, w10
    50d8:	ubfx	w9, w1, #8, #8
    50dc:	str	w11, [x0, #644]
    50e0:	str	w10, [x0, #640]
    50e4:	tbnz	w12, #31, 5124 <BZ2_compressBlock@@Base+0xbc0>
    50e8:	ldr	w8, [x0, #116]
    50ec:	ldr	x11, [x0, #80]
    50f0:	lsr	w10, w10, #24
    50f4:	strb	w10, [x11, w8, sxtw]
    50f8:	ldr	w8, [x0, #116]
    50fc:	ldr	w10, [x0, #640]
    5100:	ldr	w12, [x0, #644]
    5104:	add	w8, w8, #0x1
    5108:	lsl	w10, w10, #8
    510c:	sub	w11, w12, #0x8
    5110:	cmp	w12, #0xf
    5114:	str	w8, [x0, #116]
    5118:	str	w10, [x0, #640]
    511c:	str	w11, [x0, #644]
    5120:	b.gt	50ec <BZ2_compressBlock@@Base+0xb88>
    5124:	mov	w8, #0x18                  	// #24
    5128:	sub	w13, w8, w11
    512c:	lsl	w9, w9, w13
    5130:	add	w12, w11, #0x8
    5134:	orr	w10, w9, w10
    5138:	and	w9, w1, #0xff
    513c:	str	w12, [x0, #644]
    5140:	str	w10, [x0, #640]
    5144:	tbnz	w11, #31, 5184 <BZ2_compressBlock@@Base+0xc20>
    5148:	ldr	w11, [x0, #116]
    514c:	ldr	x12, [x0, #80]
    5150:	lsr	w10, w10, #24
    5154:	strb	w10, [x12, w11, sxtw]
    5158:	ldr	w10, [x0, #116]
    515c:	ldr	w12, [x0, #640]
    5160:	ldr	w13, [x0, #644]
    5164:	add	w11, w10, #0x1
    5168:	lsl	w10, w12, #8
    516c:	sub	w12, w13, #0x8
    5170:	cmp	w13, #0xf
    5174:	str	w11, [x0, #116]
    5178:	str	w10, [x0, #640]
    517c:	str	w12, [x0, #644]
    5180:	b.gt	514c <BZ2_compressBlock@@Base+0xbe8>
    5184:	sub	w8, w8, w12
    5188:	lsl	w8, w9, w8
    518c:	add	w11, w12, #0x8
    5190:	orr	w8, w8, w10
    5194:	str	w8, [x0, #640]
    5198:	str	w11, [x0, #644]
    519c:	ret
    51a0:	sub	sp, sp, #0x130
    51a4:	str	d8, [sp, #192]
    51a8:	stp	x29, x30, [sp, #208]
    51ac:	stp	x28, x27, [sp, #224]
    51b0:	stp	x26, x25, [sp, #240]
    51b4:	stp	x24, x23, [sp, #256]
    51b8:	stp	x22, x21, [sp, #272]
    51bc:	stp	x20, x19, [sp, #288]
    51c0:	add	x29, sp, #0xc0
    51c4:	ldr	w8, [x0, #656]
    51c8:	ldr	x9, [x0, #72]
    51cc:	str	x0, [x29, #8]
    51d0:	cmp	w8, #0x3
    51d4:	str	x9, [sp, #88]
    51d8:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    51dc:	ldr	x8, [x8, #4016]
    51e0:	b.ge	85f0 <BZ2_compressBlock@@Base+0x408c>  // b.tcont
    51e4:	ldr	x8, [x29, #8]
    51e8:	ldrsw	x19, [x8, #124]
    51ec:	cmn	w19, #0x1
    51f0:	add	w22, w19, #0x2
    51f4:	b.ge	5218 <BZ2_compressBlock@@Base+0xcb4>  // b.tcont
    51f8:	ldr	x8, [x29, #8]
    51fc:	ldr	w28, [x8, #668]
    5200:	cmp	w28, #0x0
    5204:	b.le	52ac <BZ2_compressBlock@@Base+0xd48>
    5208:	cmp	w28, #0xc8
    520c:	b.ge	52c4 <BZ2_compressBlock@@Base+0xd60>  // b.tcont
    5210:	mov	w8, #0x2                   	// #2
    5214:	b	52f0 <BZ2_compressBlock@@Base+0xd8c>
    5218:	ldr	x20, [x29, #8]
    521c:	cmp	w22, #0x1
    5220:	mov	w8, #0x934c                	// #37708
    5224:	csinc	w21, w22, wzr, gt
    5228:	add	x0, x20, x8
    522c:	mov	w1, #0xf                   	// #15
    5230:	mov	x2, x21
    5234:	bl	14a0 <memset@plt>
    5238:	mov	w8, #0x944e                	// #37966
    523c:	add	x0, x20, x8
    5240:	mov	w1, #0xf                   	// #15
    5244:	mov	x2, x21
    5248:	bl	14a0 <memset@plt>
    524c:	mov	w8, #0x9550                	// #38224
    5250:	add	x0, x20, x8
    5254:	mov	w1, #0xf                   	// #15
    5258:	mov	x2, x21
    525c:	bl	14a0 <memset@plt>
    5260:	mov	w8, #0x9652                	// #38482
    5264:	add	x0, x20, x8
    5268:	mov	w1, #0xf                   	// #15
    526c:	mov	x2, x21
    5270:	bl	14a0 <memset@plt>
    5274:	mov	w8, #0x9754                	// #38740
    5278:	add	x0, x20, x8
    527c:	mov	w1, #0xf                   	// #15
    5280:	mov	x2, x21
    5284:	bl	14a0 <memset@plt>
    5288:	mov	w8, #0x9856                	// #38998
    528c:	add	x0, x20, x8
    5290:	mov	w1, #0xf                   	// #15
    5294:	mov	x2, x21
    5298:	bl	14a0 <memset@plt>
    529c:	ldr	x8, [x29, #8]
    52a0:	ldr	w28, [x8, #668]
    52a4:	cmp	w28, #0x0
    52a8:	b.gt	5208 <BZ2_compressBlock@@Base+0xca4>
    52ac:	mov	w0, #0xbb9                 	// #3001
    52b0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    52b4:	ldr	x8, [x29, #8]
    52b8:	ldr	w28, [x8, #668]
    52bc:	cmp	w28, #0xc8
    52c0:	b.lt	5210 <BZ2_compressBlock@@Base+0xcac>  // b.tstop
    52c4:	cmp	w28, #0x258
    52c8:	b.ge	52d4 <BZ2_compressBlock@@Base+0xd70>  // b.tcont
    52cc:	mov	w8, #0x3                   	// #3
    52d0:	b	52f0 <BZ2_compressBlock@@Base+0xd8c>
    52d4:	cmp	w28, #0x4b0
    52d8:	b.ge	52e4 <BZ2_compressBlock@@Base+0xd80>  // b.tcont
    52dc:	mov	w8, #0x4                   	// #4
    52e0:	b	52f0 <BZ2_compressBlock@@Base+0xd8c>
    52e4:	cmp	w28, #0x960
    52e8:	mov	w8, #0x5                   	// #5
    52ec:	cinc	w8, w8, ge  // ge = tcont
    52f0:	ldr	x12, [x29, #8]
    52f4:	mov	w9, #0x102                 	// #258
    52f8:	mov	w20, w8
    52fc:	adrp	x11, e000 <BZ2_bzopen@@Base+0x1d4>
    5300:	umaddl	x8, w8, w9, x12
    5304:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    5308:	sxtw	x13, w22
    530c:	ldr	q16, [x11, #2624]
    5310:	ldr	q17, [x9, #2640]
    5314:	mov	w10, #0x924a                	// #37450
    5318:	cmp	x13, #0x1
    531c:	csinc	x14, x13, xzr, gt
    5320:	add	x26, x8, x10
    5324:	mov	w8, #0x4                   	// #4
    5328:	mov	w24, wzr
    532c:	stp	x22, x13, [sp, #48]
    5330:	add	x27, x12, #0x2a4
    5334:	mov	w21, #0xf                   	// #15
    5338:	movi	v8.4h, #0xf
    533c:	and	x15, x14, #0x7ffffffffffffffc
    5340:	dup	v18.2d, x8
    5344:	mov	x22, x20
    5348:	stur	q16, [x29, #-80]
    534c:	str	q17, [sp, #96]
    5350:	str	x14, [sp, #80]
    5354:	str	x15, [sp, #64]
    5358:	str	q18, [sp, #32]
    535c:	b	5378 <BZ2_compressBlock@@Base+0xe14>
    5360:	add	w24, w25, #0x1
    5364:	sub	w28, w28, w23
    5368:	cmp	x22, #0x1
    536c:	sub	x26, x26, #0x102
    5370:	mov	x22, x8
    5374:	b.le	551c <BZ2_compressBlock@@Base+0xfb8>
    5378:	sdiv	w8, w28, w22
    537c:	mov	w23, wzr
    5380:	cmp	w8, #0x1
    5384:	sub	w25, w24, #0x1
    5388:	b.lt	53bc <BZ2_compressBlock@@Base+0xe58>  // b.tstop
    538c:	cmp	w25, w19
    5390:	b.gt	53bc <BZ2_compressBlock@@Base+0xe58>
    5394:	mov	w23, wzr
    5398:	sxtw	x9, w25
    539c:	ldr	w10, [x27, x9, lsl #2]
    53a0:	add	x25, x9, #0x1
    53a4:	add	w23, w10, w23
    53a8:	cmp	w23, w8
    53ac:	b.ge	53bc <BZ2_compressBlock@@Base+0xe58>  // b.tcont
    53b0:	cmp	x9, x19
    53b4:	mov	x9, x25
    53b8:	b.lt	539c <BZ2_compressBlock@@Base+0xe38>  // b.tstop
    53bc:	cmp	w25, w24
    53c0:	b.le	53f0 <BZ2_compressBlock@@Base+0xe8c>
    53c4:	cmp	x22, x20
    53c8:	b.eq	53f0 <BZ2_compressBlock@@Base+0xe8c>  // b.none
    53cc:	cmp	x22, #0x1
    53d0:	b.eq	53f0 <BZ2_compressBlock@@Base+0xe8c>  // b.none
    53d4:	sub	w8, w20, w22
    53d8:	tbz	w8, #0, 53f0 <BZ2_compressBlock@@Base+0xe8c>
    53dc:	ldr	x8, [x29, #8]
    53e0:	add	x8, x8, w25, sxtw #2
    53e4:	ldr	w8, [x8, #672]
    53e8:	sub	w25, w25, #0x1
    53ec:	sub	w23, w23, w8
    53f0:	ldr	x8, [x29, #8]
    53f4:	ldr	w8, [x8, #656]
    53f8:	cmp	w8, #0x3
    53fc:	b.ge	54a8 <BZ2_compressBlock@@Base+0xf44>  // b.tcont
    5400:	cmn	w19, #0x1
    5404:	sub	x8, x22, #0x1
    5408:	b.lt	5360 <BZ2_compressBlock@@Base+0xdfc>  // b.tstop
    540c:	sxtw	x9, w25
    5410:	cmp	x14, #0x4
    5414:	sxtw	x10, w24
    5418:	b.cs	5424 <BZ2_compressBlock@@Base+0xec0>  // b.hs, b.nlast
    541c:	mov	x11, xzr
    5420:	b	5488 <BZ2_compressBlock@@Base+0xf24>
    5424:	dup	v0.2d, x10
    5428:	dup	v1.2d, x9
    542c:	mov	x11, x15
    5430:	mov	x12, x26
    5434:	mov	v2.16b, v17.16b
    5438:	mov	v3.16b, v16.16b
    543c:	cmgt	v4.2d, v0.2d, v2.2d
    5440:	cmgt	v6.2d, v2.2d, v1.2d
    5444:	cmgt	v5.2d, v0.2d, v3.2d
    5448:	cmgt	v7.2d, v3.2d, v1.2d
    544c:	orr	v4.16b, v4.16b, v6.16b
    5450:	orr	v5.16b, v5.16b, v7.16b
    5454:	xtn	v4.2s, v4.2d
    5458:	xtn2	v4.4s, v5.2d
    545c:	xtn	v4.4h, v4.4s
    5460:	and	v4.8b, v4.8b, v8.8b
    5464:	xtn	v4.8b, v4.8h
    5468:	add	v3.2d, v3.2d, v18.2d
    546c:	subs	x11, x11, #0x4
    5470:	st1	{v4.s}[0], [x12], #4
    5474:	add	v2.2d, v2.2d, v18.2d
    5478:	b.ne	543c <BZ2_compressBlock@@Base+0xed8>  // b.any
    547c:	cmp	x14, x15
    5480:	mov	x11, x15
    5484:	b.eq	5360 <BZ2_compressBlock@@Base+0xdfc>  // b.none
    5488:	cmp	x11, x9
    548c:	ccmp	x11, x10, #0x8, le
    5490:	csel	w12, w21, wzr, lt  // lt = tstop
    5494:	strb	w12, [x26, x11]
    5498:	add	x11, x11, #0x1
    549c:	cmp	x11, x13
    54a0:	b.lt	5488 <BZ2_compressBlock@@Base+0xf24>  // b.tstop
    54a4:	b	5360 <BZ2_compressBlock@@Base+0xdfc>
    54a8:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    54ac:	ldr	x8, [x8, #4016]
    54b0:	scvtf	s1, w23
    54b4:	fcvt	d1, s1
    54b8:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    54bc:	ldr	x0, [x8]
    54c0:	ldr	x8, [x29, #8]
    54c4:	add	x1, x1, #0xb02
    54c8:	mov	w2, w22
    54cc:	mov	w3, w24
    54d0:	ldr	s0, [x8, #668]
    54d4:	mov	x8, #0x4059000000000000    	// #4636737291354636288
    54d8:	fmov	d2, x8
    54dc:	fmul	d1, d1, d2
    54e0:	scvtf	s0, s0
    54e4:	fcvt	d0, s0
    54e8:	fdiv	d0, d1, d0
    54ec:	mov	w4, w25
    54f0:	mov	w5, w23
    54f4:	bl	1610 <fprintf@plt>
    54f8:	ldr	q18, [sp, #32]
    54fc:	ldp	x13, x15, [sp, #56]
    5500:	ldr	x14, [sp, #80]
    5504:	ldr	q17, [sp, #96]
    5508:	ldur	q16, [x29, #-80]
    550c:	cmn	w19, #0x1
    5510:	sub	x8, x22, #0x1
    5514:	b.lt	5360 <BZ2_compressBlock@@Base+0xdfc>  // b.tstop
    5518:	b	540c <BZ2_compressBlock@@Base+0xea8>
    551c:	ldr	x11, [x29, #8]
    5520:	mov	w9, #0xc9b8                	// #51640
    5524:	lsl	x8, x20, #2
    5528:	cmp	w20, #0x6
    552c:	add	x25, x11, x9
    5530:	ldr	x9, [sp, #48]
    5534:	str	x8, [sp, #16]
    5538:	lsl	x8, x20, #1
    553c:	stp	x20, x8, [sp, #72]
    5540:	mov	w8, #0x934c                	// #37708
    5544:	cset	w10, ne  // ne = any
    5548:	cmn	w19, #0x1
    554c:	add	x22, x11, x8
    5550:	cset	w8, lt  // lt = tstop
    5554:	cmp	w9, #0x1
    5558:	mov	w21, #0xb188                	// #45448
    555c:	csinc	w9, w9, wzr, gt
    5560:	adrp	x28, e000 <BZ2_bzopen@@Base+0x1d4>
    5564:	sub	x23, x29, #0x14
    5568:	add	x12, x11, x21
    556c:	orr	w8, w8, w10
    5570:	lsl	x27, x9, #2
    5574:	add	x28, x28, #0xb66
    5578:	str	wzr, [sp, #64]
    557c:	stp	x19, x12, [sp, #24]
    5580:	str	w8, [sp, #12]
    5584:	str	x27, [sp]
    5588:	ldr	x2, [sp, #16]
    558c:	sub	x0, x29, #0x2c
    5590:	mov	w1, wzr
    5594:	bl	14a0 <memset@plt>
    5598:	cmn	w19, #0x1
    559c:	b.lt	55c4 <BZ2_compressBlock@@Base+0x1060>  // b.tstop
    55a0:	ldr	x26, [sp, #32]
    55a4:	mov	x19, x20
    55a8:	mov	x0, x26
    55ac:	mov	w1, wzr
    55b0:	mov	x2, x27
    55b4:	bl	14a0 <memset@plt>
    55b8:	subs	x19, x19, #0x1
    55bc:	add	x26, x26, #0x408
    55c0:	b.ne	55a8 <BZ2_compressBlock@@Base+0x1044>  // b.any
    55c4:	ldr	x14, [sp, #56]
    55c8:	ldr	w8, [sp, #12]
    55cc:	tbnz	w8, #0, 5620 <BZ2_compressBlock@@Base+0x10bc>
    55d0:	mov	x8, xzr
    55d4:	mov	x9, xzr
    55d8:	add	x10, x22, x9
    55dc:	ldrb	w11, [x10, #258]
    55e0:	ldrb	w12, [x10]
    55e4:	add	x13, x22, x8
    55e8:	add	x9, x9, #0x1
    55ec:	cmp	x9, x14
    55f0:	bfi	w12, w11, #16, #8
    55f4:	str	w12, [x13, #13932]
    55f8:	ldrb	w11, [x10, #774]
    55fc:	ldrb	w12, [x10, #516]
    5600:	add	x8, x8, #0x10
    5604:	bfi	w12, w11, #16, #8
    5608:	str	w12, [x13, #13936]
    560c:	ldrb	w11, [x10, #1290]
    5610:	ldrb	w10, [x10, #1032]
    5614:	bfi	w10, w11, #16, #8
    5618:	str	w10, [x13, #13940]
    561c:	b.lt	55d8 <BZ2_compressBlock@@Base+0x1074>  // b.tstop
    5620:	ldr	x8, [x29, #8]
    5624:	ldr	w19, [x8, #668]
    5628:	cmp	w19, #0x1
    562c:	b.lt	6148 <BZ2_compressBlock@@Base+0x1be4>  // b.tstop
    5630:	mov	x24, xzr
    5634:	mov	w28, wzr
    5638:	mov	w1, wzr
    563c:	b	5a48 <BZ2_compressBlock@@Base+0x14e4>
    5640:	add	x10, x18, x26, lsl #1
    5644:	ldrh	w12, [x10]
    5648:	mov	w9, #0x408                 	// #1032
    564c:	madd	x9, x11, x9, x17
    5650:	add	x9, x9, x21
    5654:	lsl	x11, x12, #2
    5658:	ldr	w12, [x9, x11]
    565c:	add	w12, w12, #0x1
    5660:	str	w12, [x9, x11]
    5664:	ldrh	w11, [x10, #2]
    5668:	lsl	x11, x11, #2
    566c:	ldr	w12, [x9, x11]
    5670:	add	w12, w12, #0x1
    5674:	str	w12, [x9, x11]
    5678:	ldrh	w11, [x10, #4]
    567c:	lsl	x11, x11, #2
    5680:	ldr	w12, [x9, x11]
    5684:	add	w12, w12, #0x1
    5688:	str	w12, [x9, x11]
    568c:	ldrh	w11, [x10, #6]
    5690:	lsl	x11, x11, #2
    5694:	ldr	w12, [x9, x11]
    5698:	add	w12, w12, #0x1
    569c:	str	w12, [x9, x11]
    56a0:	ldrh	w11, [x10, #8]
    56a4:	lsl	x11, x11, #2
    56a8:	ldr	w12, [x9, x11]
    56ac:	add	w12, w12, #0x1
    56b0:	str	w12, [x9, x11]
    56b4:	ldrh	w11, [x10, #10]
    56b8:	lsl	x11, x11, #2
    56bc:	ldr	w12, [x9, x11]
    56c0:	add	w12, w12, #0x1
    56c4:	str	w12, [x9, x11]
    56c8:	ldrh	w11, [x10, #12]
    56cc:	lsl	x11, x11, #2
    56d0:	ldr	w12, [x9, x11]
    56d4:	add	w12, w12, #0x1
    56d8:	str	w12, [x9, x11]
    56dc:	ldrh	w11, [x10, #14]
    56e0:	lsl	x11, x11, #2
    56e4:	ldr	w12, [x9, x11]
    56e8:	add	w12, w12, #0x1
    56ec:	str	w12, [x9, x11]
    56f0:	ldrh	w11, [x10, #16]
    56f4:	lsl	x11, x11, #2
    56f8:	ldr	w12, [x9, x11]
    56fc:	add	w12, w12, #0x1
    5700:	str	w12, [x9, x11]
    5704:	ldrh	w11, [x10, #18]
    5708:	lsl	x11, x11, #2
    570c:	ldr	w12, [x9, x11]
    5710:	add	w12, w12, #0x1
    5714:	str	w12, [x9, x11]
    5718:	ldrh	w11, [x10, #20]
    571c:	lsl	x11, x11, #2
    5720:	ldr	w12, [x9, x11]
    5724:	add	w12, w12, #0x1
    5728:	str	w12, [x9, x11]
    572c:	ldrh	w11, [x10, #22]
    5730:	lsl	x11, x11, #2
    5734:	ldr	w12, [x9, x11]
    5738:	add	w12, w12, #0x1
    573c:	str	w12, [x9, x11]
    5740:	ldrh	w11, [x10, #24]
    5744:	lsl	x11, x11, #2
    5748:	ldr	w12, [x9, x11]
    574c:	add	w12, w12, #0x1
    5750:	str	w12, [x9, x11]
    5754:	ldrh	w11, [x10, #26]
    5758:	lsl	x11, x11, #2
    575c:	ldr	w12, [x9, x11]
    5760:	add	w12, w12, #0x1
    5764:	str	w12, [x9, x11]
    5768:	ldrh	w11, [x10, #28]
    576c:	lsl	x11, x11, #2
    5770:	ldr	w12, [x9, x11]
    5774:	add	w12, w12, #0x1
    5778:	str	w12, [x9, x11]
    577c:	ldrh	w11, [x10, #30]
    5780:	lsl	x11, x11, #2
    5784:	ldr	w12, [x9, x11]
    5788:	add	w12, w12, #0x1
    578c:	str	w12, [x9, x11]
    5790:	ldrh	w11, [x10, #32]
    5794:	lsl	x11, x11, #2
    5798:	ldr	w12, [x9, x11]
    579c:	add	w12, w12, #0x1
    57a0:	str	w12, [x9, x11]
    57a4:	ldrh	w11, [x10, #34]
    57a8:	lsl	x11, x11, #2
    57ac:	ldr	w12, [x9, x11]
    57b0:	add	w12, w12, #0x1
    57b4:	str	w12, [x9, x11]
    57b8:	ldrh	w11, [x10, #36]
    57bc:	lsl	x11, x11, #2
    57c0:	ldr	w12, [x9, x11]
    57c4:	add	w12, w12, #0x1
    57c8:	str	w12, [x9, x11]
    57cc:	ldrh	w11, [x10, #38]
    57d0:	lsl	x11, x11, #2
    57d4:	ldr	w12, [x9, x11]
    57d8:	add	w12, w12, #0x1
    57dc:	str	w12, [x9, x11]
    57e0:	ldrh	w11, [x10, #40]
    57e4:	lsl	x11, x11, #2
    57e8:	ldr	w12, [x9, x11]
    57ec:	add	w12, w12, #0x1
    57f0:	str	w12, [x9, x11]
    57f4:	ldrh	w11, [x10, #42]
    57f8:	lsl	x11, x11, #2
    57fc:	ldr	w12, [x9, x11]
    5800:	add	w12, w12, #0x1
    5804:	str	w12, [x9, x11]
    5808:	ldrh	w11, [x10, #44]
    580c:	lsl	x11, x11, #2
    5810:	ldr	w12, [x9, x11]
    5814:	add	w12, w12, #0x1
    5818:	str	w12, [x9, x11]
    581c:	ldrh	w11, [x10, #46]
    5820:	lsl	x11, x11, #2
    5824:	ldr	w12, [x9, x11]
    5828:	add	w12, w12, #0x1
    582c:	str	w12, [x9, x11]
    5830:	ldrh	w11, [x10, #48]
    5834:	lsl	x11, x11, #2
    5838:	ldr	w12, [x9, x11]
    583c:	add	w12, w12, #0x1
    5840:	str	w12, [x9, x11]
    5844:	ldrh	w11, [x10, #50]
    5848:	lsl	x11, x11, #2
    584c:	ldr	w12, [x9, x11]
    5850:	add	w12, w12, #0x1
    5854:	str	w12, [x9, x11]
    5858:	ldrh	w11, [x10, #52]
    585c:	lsl	x11, x11, #2
    5860:	ldr	w12, [x9, x11]
    5864:	add	w12, w12, #0x1
    5868:	str	w12, [x9, x11]
    586c:	ldrh	w11, [x10, #54]
    5870:	lsl	x11, x11, #2
    5874:	ldr	w12, [x9, x11]
    5878:	add	w12, w12, #0x1
    587c:	str	w12, [x9, x11]
    5880:	ldrh	w11, [x10, #56]
    5884:	lsl	x11, x11, #2
    5888:	ldr	w12, [x9, x11]
    588c:	add	w12, w12, #0x1
    5890:	str	w12, [x9, x11]
    5894:	ldrh	w11, [x10, #58]
    5898:	lsl	x11, x11, #2
    589c:	ldr	w12, [x9, x11]
    58a0:	add	w12, w12, #0x1
    58a4:	str	w12, [x9, x11]
    58a8:	ldrh	w11, [x10, #60]
    58ac:	lsl	x11, x11, #2
    58b0:	ldr	w12, [x9, x11]
    58b4:	add	w12, w12, #0x1
    58b8:	str	w12, [x9, x11]
    58bc:	ldrh	w11, [x10, #62]
    58c0:	lsl	x11, x11, #2
    58c4:	ldr	w12, [x9, x11]
    58c8:	add	w12, w12, #0x1
    58cc:	str	w12, [x9, x11]
    58d0:	ldrh	w11, [x10, #64]
    58d4:	lsl	x11, x11, #2
    58d8:	ldr	w12, [x9, x11]
    58dc:	add	w12, w12, #0x1
    58e0:	str	w12, [x9, x11]
    58e4:	ldrh	w11, [x10, #66]
    58e8:	lsl	x11, x11, #2
    58ec:	ldr	w12, [x9, x11]
    58f0:	add	w12, w12, #0x1
    58f4:	str	w12, [x9, x11]
    58f8:	ldrh	w11, [x10, #68]
    58fc:	lsl	x11, x11, #2
    5900:	ldr	w12, [x9, x11]
    5904:	add	w12, w12, #0x1
    5908:	str	w12, [x9, x11]
    590c:	ldrh	w11, [x10, #70]
    5910:	lsl	x11, x11, #2
    5914:	ldr	w12, [x9, x11]
    5918:	add	w12, w12, #0x1
    591c:	str	w12, [x9, x11]
    5920:	ldrh	w11, [x10, #72]
    5924:	lsl	x11, x11, #2
    5928:	ldr	w12, [x9, x11]
    592c:	add	w12, w12, #0x1
    5930:	str	w12, [x9, x11]
    5934:	ldrh	w11, [x10, #74]
    5938:	lsl	x11, x11, #2
    593c:	ldr	w12, [x9, x11]
    5940:	add	w12, w12, #0x1
    5944:	str	w12, [x9, x11]
    5948:	ldrh	w11, [x10, #76]
    594c:	lsl	x11, x11, #2
    5950:	ldr	w12, [x9, x11]
    5954:	add	w12, w12, #0x1
    5958:	str	w12, [x9, x11]
    595c:	ldrh	w11, [x10, #78]
    5960:	lsl	x11, x11, #2
    5964:	ldr	w12, [x9, x11]
    5968:	add	w12, w12, #0x1
    596c:	str	w12, [x9, x11]
    5970:	ldrh	w11, [x10, #80]
    5974:	lsl	x11, x11, #2
    5978:	ldr	w12, [x9, x11]
    597c:	add	w12, w12, #0x1
    5980:	str	w12, [x9, x11]
    5984:	ldrh	w11, [x10, #82]
    5988:	lsl	x11, x11, #2
    598c:	ldr	w12, [x9, x11]
    5990:	add	w12, w12, #0x1
    5994:	str	w12, [x9, x11]
    5998:	ldrh	w11, [x10, #84]
    599c:	lsl	x11, x11, #2
    59a0:	ldr	w12, [x9, x11]
    59a4:	add	w12, w12, #0x1
    59a8:	str	w12, [x9, x11]
    59ac:	ldrh	w11, [x10, #86]
    59b0:	lsl	x11, x11, #2
    59b4:	ldr	w12, [x9, x11]
    59b8:	add	w12, w12, #0x1
    59bc:	str	w12, [x9, x11]
    59c0:	ldrh	w11, [x10, #88]
    59c4:	lsl	x11, x11, #2
    59c8:	ldr	w12, [x9, x11]
    59cc:	add	w12, w12, #0x1
    59d0:	str	w12, [x9, x11]
    59d4:	ldrh	w11, [x10, #90]
    59d8:	lsl	x11, x11, #2
    59dc:	ldr	w12, [x9, x11]
    59e0:	add	w12, w12, #0x1
    59e4:	str	w12, [x9, x11]
    59e8:	ldrh	w11, [x10, #92]
    59ec:	lsl	x11, x11, #2
    59f0:	ldr	w12, [x9, x11]
    59f4:	add	w12, w12, #0x1
    59f8:	str	w12, [x9, x11]
    59fc:	ldrh	w11, [x10, #94]
    5a00:	lsl	x11, x11, #2
    5a04:	ldr	w12, [x9, x11]
    5a08:	add	w12, w12, #0x1
    5a0c:	str	w12, [x9, x11]
    5a10:	ldrh	w10, [x10, #96]
    5a14:	lsl	x10, x10, #2
    5a18:	ldr	w11, [x9, x10]
    5a1c:	add	w11, w11, #0x1
    5a20:	str	w11, [x9, x10]
    5a24:	ldrh	w10, [x18, w0, sxtw #1]
    5a28:	lsl	x10, x10, #2
    5a2c:	ldr	w11, [x9, x10]
    5a30:	add	w11, w11, #0x1
    5a34:	str	w11, [x9, x10]
    5a38:	ldr	w19, [x17, #668]
    5a3c:	add	w28, w8, #0x1
    5a40:	cmp	w28, w19
    5a44:	b.ge	612c <BZ2_compressBlock@@Base+0x1bc8>  // b.tcont
    5a48:	ldr	x2, [sp, #80]
    5a4c:	str	w1, [sp, #96]
    5a50:	cmp	w20, #0x6
    5a54:	sxtw	x26, w28
    5a58:	sub	x0, x29, #0x14
    5a5c:	mov	w1, wzr
    5a60:	stur	x24, [x29, #-80]
    5a64:	cset	w24, eq  // eq = none
    5a68:	add	x20, x26, #0x31
    5a6c:	sub	w27, w19, #0x1
    5a70:	bl	14a0 <memset@plt>
    5a74:	mov	x0, x20
    5a78:	cmp	w0, w19
    5a7c:	csel	w8, w0, w27, lt  // lt = tstop
    5a80:	sub	w9, w8, w28
    5a84:	cmp	w9, #0x31
    5a88:	cset	w9, eq  // eq = none
    5a8c:	and	w9, w24, w9
    5a90:	tbz	w9, #0, 6040 <BZ2_compressBlock@@Base+0x1adc>
    5a94:	ldr	x18, [sp, #88]
    5a98:	ldur	x24, [x29, #-80]
    5a9c:	ldr	w1, [sp, #96]
    5aa0:	ldr	x20, [sp, #72]
    5aa4:	add	x10, x18, x26, lsl #1
    5aa8:	ldrh	w11, [x10]
    5aac:	ldrh	w12, [x10, #2]
    5ab0:	ldrh	w15, [x10, #4]
    5ab4:	add	x11, x25, x11, lsl #4
    5ab8:	add	x12, x25, x12, lsl #4
    5abc:	ldp	w13, w17, [x12]
    5ac0:	ldp	w14, w16, [x11]
    5ac4:	ldr	w11, [x11, #8]
    5ac8:	ldr	w12, [x12, #8]
    5acc:	add	x15, x25, x15, lsl #4
    5ad0:	add	w13, w13, w14
    5ad4:	ldrh	w14, [x10, #6]
    5ad8:	add	w16, w17, w16
    5adc:	add	w11, w12, w11
    5ae0:	ldp	w17, w12, [x15]
    5ae4:	ldr	w15, [x15, #8]
    5ae8:	add	x14, x25, x14, lsl #4
    5aec:	add	w13, w13, w17
    5af0:	ldrh	w17, [x10, #8]
    5af4:	add	w12, w16, w12
    5af8:	add	w11, w11, w15
    5afc:	ldp	w15, w16, [x14]
    5b00:	ldr	w14, [x14, #8]
    5b04:	add	x17, x25, x17, lsl #4
    5b08:	add	w13, w13, w15
    5b0c:	add	w12, w12, w16
    5b10:	ldrh	w16, [x10, #10]
    5b14:	add	w11, w11, w14
    5b18:	ldp	w15, w14, [x17]
    5b1c:	ldr	w17, [x17, #8]
    5b20:	add	x16, x25, x16, lsl #4
    5b24:	add	w13, w13, w15
    5b28:	ldrh	w15, [x10, #12]
    5b2c:	add	w12, w12, w14
    5b30:	add	w11, w11, w17
    5b34:	ldp	w14, w17, [x16]
    5b38:	ldr	w16, [x16, #8]
    5b3c:	add	x15, x25, x15, lsl #4
    5b40:	add	w13, w13, w14
    5b44:	ldrh	w14, [x10, #14]
    5b48:	add	w12, w12, w17
    5b4c:	add	w11, w11, w16
    5b50:	ldp	w16, w17, [x15]
    5b54:	ldr	w15, [x15, #8]
    5b58:	add	x14, x25, x14, lsl #4
    5b5c:	add	w12, w12, w17
    5b60:	ldrh	w17, [x10, #16]
    5b64:	add	w13, w13, w16
    5b68:	add	w11, w11, w15
    5b6c:	ldp	w16, w15, [x14]
    5b70:	ldr	w14, [x14, #8]
    5b74:	add	x17, x25, x17, lsl #4
    5b78:	add	w13, w13, w16
    5b7c:	ldrh	w16, [x10, #18]
    5b80:	add	w12, w12, w15
    5b84:	add	w11, w11, w14
    5b88:	ldp	w15, w14, [x17]
    5b8c:	ldr	w17, [x17, #8]
    5b90:	add	x16, x25, x16, lsl #4
    5b94:	add	w13, w13, w15
    5b98:	ldrh	w15, [x10, #20]
    5b9c:	add	w12, w12, w14
    5ba0:	add	w11, w11, w17
    5ba4:	ldp	w14, w17, [x16]
    5ba8:	ldr	w16, [x16, #8]
    5bac:	add	x15, x25, x15, lsl #4
    5bb0:	add	w13, w13, w14
    5bb4:	add	w12, w12, w17
    5bb8:	ldrh	w17, [x10, #22]
    5bbc:	add	w11, w11, w16
    5bc0:	ldp	w14, w16, [x15]
    5bc4:	ldr	w15, [x15, #8]
    5bc8:	add	x17, x25, x17, lsl #4
    5bcc:	add	w13, w13, w14
    5bd0:	ldrh	w14, [x10, #24]
    5bd4:	add	w12, w12, w16
    5bd8:	add	w11, w11, w15
    5bdc:	ldp	w16, w15, [x17]
    5be0:	ldr	w17, [x17, #8]
    5be4:	add	x14, x25, x14, lsl #4
    5be8:	add	w13, w13, w16
    5bec:	ldrh	w16, [x10, #26]
    5bf0:	add	w12, w12, w15
    5bf4:	add	w11, w11, w17
    5bf8:	ldp	w15, w17, [x14]
    5bfc:	ldr	w14, [x14, #8]
    5c00:	add	x16, x25, x16, lsl #4
    5c04:	add	w12, w12, w17
    5c08:	ldrh	w17, [x10, #28]
    5c0c:	add	w13, w13, w15
    5c10:	add	w11, w11, w14
    5c14:	ldp	w15, w14, [x16]
    5c18:	ldr	w16, [x16, #8]
    5c1c:	add	x17, x25, x17, lsl #4
    5c20:	add	w13, w13, w15
    5c24:	ldrh	w15, [x10, #30]
    5c28:	add	w12, w12, w14
    5c2c:	add	w11, w11, w16
    5c30:	ldp	w14, w16, [x17]
    5c34:	ldr	w17, [x17, #8]
    5c38:	add	x15, x25, x15, lsl #4
    5c3c:	add	w13, w13, w14
    5c40:	ldrh	w14, [x10, #32]
    5c44:	add	w12, w12, w16
    5c48:	add	w11, w11, w17
    5c4c:	ldp	w16, w17, [x15]
    5c50:	ldr	w15, [x15, #8]
    5c54:	add	x14, x25, x14, lsl #4
    5c58:	add	w13, w13, w16
    5c5c:	add	w12, w12, w17
    5c60:	ldrh	w17, [x10, #34]
    5c64:	add	w11, w11, w15
    5c68:	ldp	w16, w15, [x14]
    5c6c:	ldr	w14, [x14, #8]
    5c70:	add	x17, x25, x17, lsl #4
    5c74:	add	w13, w13, w16
    5c78:	ldrh	w16, [x10, #36]
    5c7c:	add	w12, w12, w15
    5c80:	add	w11, w11, w14
    5c84:	ldp	w15, w14, [x17]
    5c88:	ldr	w17, [x17, #8]
    5c8c:	add	x16, x25, x16, lsl #4
    5c90:	add	w13, w13, w15
    5c94:	ldrh	w15, [x10, #38]
    5c98:	add	w12, w12, w14
    5c9c:	add	w11, w11, w17
    5ca0:	ldp	w14, w17, [x16]
    5ca4:	ldr	w16, [x16, #8]
    5ca8:	add	x15, x25, x15, lsl #4
    5cac:	add	w12, w12, w17
    5cb0:	ldrh	w17, [x10, #40]
    5cb4:	add	w13, w13, w14
    5cb8:	add	w11, w11, w16
    5cbc:	ldp	w14, w16, [x15]
    5cc0:	ldr	w15, [x15, #8]
    5cc4:	add	x17, x25, x17, lsl #4
    5cc8:	add	w13, w13, w14
    5ccc:	ldrh	w14, [x10, #42]
    5cd0:	add	w12, w12, w16
    5cd4:	add	w11, w11, w15
    5cd8:	ldp	w16, w15, [x17]
    5cdc:	ldr	w17, [x17, #8]
    5ce0:	add	x14, x25, x14, lsl #4
    5ce4:	add	w13, w13, w16
    5ce8:	ldrh	w16, [x10, #44]
    5cec:	add	w12, w12, w15
    5cf0:	add	w11, w11, w17
    5cf4:	ldp	w15, w17, [x14]
    5cf8:	ldr	w14, [x14, #8]
    5cfc:	add	x16, x25, x16, lsl #4
    5d00:	add	w13, w13, w15
    5d04:	add	w12, w12, w17
    5d08:	ldrh	w17, [x10, #46]
    5d0c:	add	w11, w11, w14
    5d10:	ldp	w15, w14, [x16]
    5d14:	ldr	w16, [x16, #8]
    5d18:	add	x17, x25, x17, lsl #4
    5d1c:	add	w13, w13, w15
    5d20:	ldrh	w15, [x10, #48]
    5d24:	add	w12, w12, w14
    5d28:	add	w11, w11, w16
    5d2c:	ldp	w14, w16, [x17]
    5d30:	ldr	w17, [x17, #8]
    5d34:	add	x15, x25, x15, lsl #4
    5d38:	add	w13, w13, w14
    5d3c:	ldrh	w14, [x10, #50]
    5d40:	add	w12, w12, w16
    5d44:	add	w11, w11, w17
    5d48:	ldp	w16, w17, [x15]
    5d4c:	ldr	w15, [x15, #8]
    5d50:	add	x14, x25, x14, lsl #4
    5d54:	add	w12, w12, w17
    5d58:	ldrh	w17, [x10, #52]
    5d5c:	add	w13, w13, w16
    5d60:	add	w11, w11, w15
    5d64:	ldp	w16, w15, [x14]
    5d68:	ldr	w14, [x14, #8]
    5d6c:	add	x17, x25, x17, lsl #4
    5d70:	add	w13, w13, w16
    5d74:	ldrh	w16, [x10, #54]
    5d78:	add	w12, w12, w15
    5d7c:	add	w11, w11, w14
    5d80:	ldp	w15, w14, [x17]
    5d84:	ldr	w17, [x17, #8]
    5d88:	add	x16, x25, x16, lsl #4
    5d8c:	add	w13, w13, w15
    5d90:	ldrh	w15, [x10, #56]
    5d94:	add	w12, w12, w14
    5d98:	add	w11, w11, w17
    5d9c:	ldp	w14, w17, [x16]
    5da0:	ldr	w16, [x16, #8]
    5da4:	add	x15, x25, x15, lsl #4
    5da8:	add	w13, w13, w14
    5dac:	add	w12, w12, w17
    5db0:	ldrh	w17, [x10, #58]
    5db4:	add	w11, w11, w16
    5db8:	ldp	w14, w16, [x15]
    5dbc:	ldr	w15, [x15, #8]
    5dc0:	add	x17, x25, x17, lsl #4
    5dc4:	add	w13, w13, w14
    5dc8:	ldrh	w14, [x10, #60]
    5dcc:	add	w12, w12, w16
    5dd0:	add	w11, w11, w15
    5dd4:	ldp	w16, w15, [x17]
    5dd8:	ldr	w17, [x17, #8]
    5ddc:	add	x14, x25, x14, lsl #4
    5de0:	add	w13, w13, w16
    5de4:	ldrh	w16, [x10, #62]
    5de8:	add	w12, w12, w15
    5dec:	add	w11, w11, w17
    5df0:	ldp	w15, w17, [x14]
    5df4:	ldr	w14, [x14, #8]
    5df8:	add	x16, x25, x16, lsl #4
    5dfc:	add	w12, w12, w17
    5e00:	ldrh	w17, [x10, #64]
    5e04:	add	w13, w13, w15
    5e08:	add	w11, w11, w14
    5e0c:	ldp	w15, w14, [x16]
    5e10:	ldr	w16, [x16, #8]
    5e14:	add	x17, x25, x17, lsl #4
    5e18:	add	w13, w13, w15
    5e1c:	ldrh	w15, [x10, #66]
    5e20:	add	w12, w12, w14
    5e24:	add	w11, w11, w16
    5e28:	ldp	w14, w16, [x17]
    5e2c:	ldr	w17, [x17, #8]
    5e30:	add	x15, x25, x15, lsl #4
    5e34:	add	w13, w13, w14
    5e38:	ldrh	w14, [x10, #68]
    5e3c:	add	w12, w12, w16
    5e40:	add	w11, w11, w17
    5e44:	ldp	w16, w17, [x15]
    5e48:	ldr	w15, [x15, #8]
    5e4c:	add	x14, x25, x14, lsl #4
    5e50:	add	w13, w13, w16
    5e54:	add	w12, w12, w17
    5e58:	ldrh	w17, [x10, #70]
    5e5c:	add	w11, w11, w15
    5e60:	ldp	w16, w15, [x14]
    5e64:	ldr	w14, [x14, #8]
    5e68:	add	x17, x25, x17, lsl #4
    5e6c:	add	w13, w13, w16
    5e70:	ldrh	w16, [x10, #72]
    5e74:	add	w12, w12, w15
    5e78:	add	w11, w11, w14
    5e7c:	ldp	w15, w14, [x17]
    5e80:	ldr	w17, [x17, #8]
    5e84:	add	x16, x25, x16, lsl #4
    5e88:	add	w13, w13, w15
    5e8c:	ldrh	w15, [x10, #74]
    5e90:	add	w12, w12, w14
    5e94:	add	w11, w11, w17
    5e98:	ldp	w14, w17, [x16]
    5e9c:	ldr	w16, [x16, #8]
    5ea0:	add	x15, x25, x15, lsl #4
    5ea4:	add	w12, w12, w17
    5ea8:	ldrh	w17, [x10, #76]
    5eac:	add	w13, w13, w14
    5eb0:	add	w11, w11, w16
    5eb4:	ldp	w14, w16, [x15]
    5eb8:	ldr	w15, [x15, #8]
    5ebc:	add	x17, x25, x17, lsl #4
    5ec0:	add	w13, w13, w14
    5ec4:	ldrh	w14, [x10, #78]
    5ec8:	add	w12, w12, w16
    5ecc:	add	w11, w11, w15
    5ed0:	ldp	w16, w15, [x17]
    5ed4:	ldr	w17, [x17, #8]
    5ed8:	add	x14, x25, x14, lsl #4
    5edc:	add	w13, w13, w16
    5ee0:	ldrh	w16, [x10, #80]
    5ee4:	add	w12, w12, w15
    5ee8:	add	w11, w11, w17
    5eec:	ldp	w15, w17, [x14]
    5ef0:	ldr	w14, [x14, #8]
    5ef4:	add	x16, x25, x16, lsl #4
    5ef8:	add	w13, w13, w15
    5efc:	add	w12, w12, w17
    5f00:	ldrh	w17, [x10, #82]
    5f04:	add	w11, w11, w14
    5f08:	ldp	w15, w14, [x16]
    5f0c:	ldr	w16, [x16, #8]
    5f10:	add	x17, x25, x17, lsl #4
    5f14:	add	w13, w13, w15
    5f18:	ldrh	w15, [x10, #84]
    5f1c:	add	w12, w12, w14
    5f20:	add	w11, w11, w16
    5f24:	ldp	w14, w16, [x17]
    5f28:	ldr	w17, [x17, #8]
    5f2c:	add	x15, x25, x15, lsl #4
    5f30:	add	w13, w13, w14
    5f34:	ldrh	w14, [x10, #86]
    5f38:	add	w12, w12, w16
    5f3c:	add	w11, w11, w17
    5f40:	ldp	w16, w17, [x15]
    5f44:	ldr	w15, [x15, #8]
    5f48:	add	x14, x25, x14, lsl #4
    5f4c:	add	w12, w12, w17
    5f50:	ldrh	w17, [x10, #88]
    5f54:	add	w13, w13, w16
    5f58:	add	w11, w11, w15
    5f5c:	ldp	w16, w15, [x14]
    5f60:	ldr	w14, [x14, #8]
    5f64:	add	x17, x25, x17, lsl #4
    5f68:	add	w13, w13, w16
    5f6c:	ldrh	w16, [x10, #90]
    5f70:	add	w12, w12, w15
    5f74:	add	w11, w11, w14
    5f78:	ldp	w15, w14, [x17]
    5f7c:	ldr	w17, [x17, #8]
    5f80:	add	x16, x25, x16, lsl #4
    5f84:	add	w13, w13, w15
    5f88:	ldrh	w15, [x10, #92]
    5f8c:	add	w12, w12, w14
    5f90:	add	w11, w11, w17
    5f94:	ldp	w14, w17, [x16]
    5f98:	ldr	w16, [x16, #8]
    5f9c:	add	x15, x25, x15, lsl #4
    5fa0:	add	w13, w13, w14
    5fa4:	add	w11, w11, w16
    5fa8:	ldp	w14, w16, [x15]
    5fac:	add	w12, w12, w17
    5fb0:	ldrh	w17, [x10, #94]
    5fb4:	ldrh	w10, [x10, #96]
    5fb8:	add	w13, w13, w14
    5fbc:	ldr	w14, [x15, #8]
    5fc0:	add	x15, x25, x17, lsl #4
    5fc4:	add	w12, w12, w16
    5fc8:	add	x10, x25, x10, lsl #4
    5fcc:	add	w11, w11, w14
    5fd0:	ldp	w16, w14, [x15]
    5fd4:	ldr	w15, [x15, #8]
    5fd8:	ldr	x17, [x29, #8]
    5fdc:	add	w13, w13, w16
    5fe0:	ldrh	w16, [x18, x0, lsl #1]
    5fe4:	add	w12, w12, w14
    5fe8:	add	w11, w11, w15
    5fec:	ldp	w14, w15, [x10]
    5ff0:	add	x16, x25, x16, lsl #4
    5ff4:	ldr	w10, [x10, #8]
    5ff8:	add	w13, w13, w14
    5ffc:	add	w12, w12, w15
    6000:	ldp	w14, w15, [x16]
    6004:	ldr	w16, [x16, #8]
    6008:	add	w10, w11, w10
    600c:	add	w11, w13, w14
    6010:	add	w12, w12, w15
    6014:	add	w10, w10, w16
    6018:	sturh	w11, [x29, #-20]
    601c:	lsr	w11, w11, #16
    6020:	sturh	w12, [x29, #-16]
    6024:	lsr	w12, w12, #16
    6028:	sturh	w10, [x29, #-12]
    602c:	lsr	w10, w10, #16
    6030:	sturh	w11, [x29, #-18]
    6034:	sturh	w12, [x29, #-14]
    6038:	sturh	w10, [x29, #-10]
    603c:	b	609c <BZ2_compressBlock@@Base+0x1b38>
    6040:	ldr	x17, [x29, #8]
    6044:	ldr	x18, [sp, #88]
    6048:	ldur	x24, [x29, #-80]
    604c:	ldr	w1, [sp, #96]
    6050:	ldr	x20, [sp, #72]
    6054:	cmp	w8, w26
    6058:	b.lt	609c <BZ2_compressBlock@@Base+0x1b38>  // b.tstop
    605c:	sxtw	x10, w8
    6060:	mov	x11, x26
    6064:	ldrh	w12, [x18, x11, lsl #1]
    6068:	sub	x13, x29, #0x14
    606c:	mov	x14, x20
    6070:	add	x12, x22, x12
    6074:	ldrb	w15, [x12]
    6078:	ldrh	w16, [x13]
    607c:	subs	x14, x14, #0x1
    6080:	add	x12, x12, #0x102
    6084:	add	w15, w16, w15
    6088:	strh	w15, [x13], #2
    608c:	b.ne	6074 <BZ2_compressBlock@@Base+0x1b10>  // b.any
    6090:	cmp	x11, x10
    6094:	add	x11, x11, #0x1
    6098:	b.lt	6064 <BZ2_compressBlock@@Base+0x1b00>  // b.tstop
    609c:	mov	w11, #0xc9ff                	// #51711
    60a0:	mov	x12, xzr
    60a4:	movk	w11, #0x3b9a, lsl #16
    60a8:	mov	w10, #0xffffffff            	// #-1
    60ac:	ldrh	w13, [x23, x12, lsl #1]
    60b0:	cmp	w11, w13
    60b4:	csel	w10, w12, w10, gt
    60b8:	add	x12, x12, #0x1
    60bc:	csel	w11, w13, w11, gt
    60c0:	cmp	x20, x12
    60c4:	b.ne	60ac <BZ2_compressBlock@@Base+0x1b48>  // b.any
    60c8:	sbfiz	x12, x10, #2, #32
    60cc:	sub	x15, x29, #0x2c
    60d0:	ldr	w13, [x15, x12]
    60d4:	add	w1, w11, w1
    60d8:	sxtw	x11, w10
    60dc:	add	x14, x17, x24
    60e0:	add	w13, w13, #0x1
    60e4:	add	x24, x24, #0x1
    60e8:	str	w13, [x15, x12]
    60ec:	strb	w10, [x14, #1704]
    60f0:	tbnz	w9, #0, 5640 <BZ2_compressBlock@@Base+0x10dc>
    60f4:	cmp	w8, w26
    60f8:	mov	w13, #0x408                 	// #1032
    60fc:	b.lt	5a38 <BZ2_compressBlock@@Base+0x14d4>  // b.tstop
    6100:	sxtw	x9, w8
    6104:	ldrh	w10, [x18, x26, lsl #1]
    6108:	madd	x12, x11, x13, x17
    610c:	cmp	x26, x9
    6110:	add	x26, x26, #0x1
    6114:	add	x10, x12, x10, lsl #2
    6118:	ldr	w12, [x10, x21]
    611c:	add	w12, w12, #0x1
    6120:	str	w12, [x10, x21]
    6124:	b.lt	6104 <BZ2_compressBlock@@Base+0x1ba0>  // b.tstop
    6128:	b	5a38 <BZ2_compressBlock@@Base+0x14d4>
    612c:	adrp	x28, e000 <BZ2_bzopen@@Base+0x1d4>
    6130:	add	x28, x28, #0xb66
    6134:	ldr	x8, [x29, #8]
    6138:	ldr	w8, [x8, #656]
    613c:	cmp	w8, #0x3
    6140:	b.lt	6160 <BZ2_compressBlock@@Base+0x1bfc>  // b.tstop
    6144:	b	61bc <BZ2_compressBlock@@Base+0x1c58>
    6148:	mov	w24, wzr
    614c:	mov	w1, wzr
    6150:	ldr	x8, [x29, #8]
    6154:	ldr	w8, [x8, #656]
    6158:	cmp	w8, #0x3
    615c:	b.ge	61bc <BZ2_compressBlock@@Base+0x1c58>  // b.tcont
    6160:	ldr	x26, [sp, #32]
    6164:	ldr	x28, [sp, #48]
    6168:	mov	x19, x20
    616c:	mov	x27, x22
    6170:	mov	w3, #0x11                  	// #17
    6174:	mov	x0, x27
    6178:	mov	x1, x26
    617c:	mov	w2, w28
    6180:	bl	1430 <BZ2_hbMakeCodeLengths@plt>
    6184:	add	x27, x27, #0x102
    6188:	subs	x19, x19, #0x1
    618c:	add	x26, x26, #0x408
    6190:	b.ne	6170 <BZ2_compressBlock@@Base+0x1c0c>  // b.any
    6194:	ldr	w8, [sp, #64]
    6198:	ldr	x19, [sp, #24]
    619c:	ldr	x27, [sp]
    61a0:	adrp	x28, e000 <BZ2_bzopen@@Base+0x1d4>
    61a4:	add	w8, w8, #0x1
    61a8:	cmp	w8, #0x4
    61ac:	add	x28, x28, #0xb66
    61b0:	str	w8, [sp, #64]
    61b4:	b.ne	5588 <BZ2_compressBlock@@Base+0x1024>  // b.any
    61b8:	b	6228 <BZ2_compressBlock@@Base+0x1cc4>
    61bc:	mov	x27, x24
    61c0:	adrp	x24, 1f000 <BZ2_bzerror@@Base+0x10cec>
    61c4:	ldr	x24, [x24, #4016]
    61c8:	ldr	w8, [sp, #64]
    61cc:	cmp	w1, #0x0
    61d0:	ldr	x0, [x24]
    61d4:	add	w2, w8, #0x1
    61d8:	add	w8, w1, #0x7
    61dc:	csel	w8, w8, w1, lt  // lt = tstop
    61e0:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    61e4:	asr	w3, w8, #3
    61e8:	add	x1, x1, #0xb3d
    61ec:	bl	1610 <fprintf@plt>
    61f0:	ldr	x1, [x24]
    61f4:	sub	x19, x29, #0x2c
    61f8:	mov	x26, x20
    61fc:	ldr	w2, [x19], #4
    6200:	mov	x0, x1
    6204:	mov	x1, x28
    6208:	bl	1610 <fprintf@plt>
    620c:	ldr	x1, [x24]
    6210:	subs	x26, x26, #0x1
    6214:	b.ne	61fc <BZ2_compressBlock@@Base+0x1c98>  // b.any
    6218:	mov	w0, #0xa                   	// #10
    621c:	bl	1460 <fputc@plt>
    6220:	mov	x24, x27
    6224:	b	6160 <BZ2_compressBlock@@Base+0x1bfc>
    6228:	mov	w8, #0x4653                	// #18003
    622c:	cmp	w24, w8
    6230:	b.lt	623c <BZ2_compressBlock@@Base+0x1cd8>  // b.tstop
    6234:	mov	w0, #0xbbb                 	// #3003
    6238:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    623c:	mov	x8, xzr
    6240:	sub	x9, x29, #0x3c
    6244:	strb	w8, [x9, x8]
    6248:	add	x8, x8, #0x1
    624c:	cmp	x20, x8
    6250:	b.ne	6244 <BZ2_compressBlock@@Base+0x1ce0>  // b.any
    6254:	ldr	x17, [sp, #56]
    6258:	cmp	w24, #0x1
    625c:	b.lt	62d8 <BZ2_compressBlock@@Base+0x1d74>  // b.tstop
    6260:	ldurb	w11, [x29, #-60]
    6264:	sub	x10, x29, #0x3c
    6268:	mov	x8, xzr
    626c:	mov	w9, w24
    6270:	orr	x10, x10, #0x1
    6274:	mov	w12, #0x4cfa                	// #19706
    6278:	b	6290 <BZ2_compressBlock@@Base+0x1d2c>
    627c:	mov	w15, wzr
    6280:	add	x8, x8, #0x1
    6284:	cmp	x8, x9
    6288:	strb	w15, [x13, x12]
    628c:	b.eq	62d4 <BZ2_compressBlock@@Base+0x1d70>  // b.none
    6290:	ldr	x13, [x29, #8]
    6294:	add	x13, x13, x8
    6298:	ldrb	w14, [x13, #1704]
    629c:	cmp	w14, w11, uxtb
    62a0:	b.eq	627c <BZ2_compressBlock@@Base+0x1d18>  // b.none
    62a4:	mov	x15, xzr
    62a8:	ldrb	w16, [x10, x15]
    62ac:	strb	w11, [x10, x15]
    62b0:	add	x15, x15, #0x1
    62b4:	cmp	w14, w16
    62b8:	mov	w11, w16
    62bc:	b.ne	62a8 <BZ2_compressBlock@@Base+0x1d44>  // b.any
    62c0:	mov	w11, w14
    62c4:	add	x8, x8, #0x1
    62c8:	cmp	x8, x9
    62cc:	strb	w15, [x13, x12]
    62d0:	b.ne	6290 <BZ2_compressBlock@@Base+0x1d2c>  // b.any
    62d4:	sturb	w11, [x29, #-60]
    62d8:	cmn	w19, #0x2
    62dc:	stur	x24, [x29, #-80]
    62e0:	b.le	641c <BZ2_compressBlock@@Base+0x1eb8>
    62e4:	ldr	x9, [x29, #8]
    62e8:	cmp	x17, #0x1
    62ec:	mov	w8, #0x934d                	// #37709
    62f0:	mov	w19, #0x934c                	// #37708
    62f4:	csinc	x27, x17, xzr, gt
    62f8:	mov	x23, xzr
    62fc:	mov	w28, #0x408                 	// #1032
    6300:	add	x24, x9, x8
    6304:	add	x25, x9, x19
    6308:	and	x26, x27, #0x7ffffffffffffffe
    630c:	b	6358 <BZ2_compressBlock@@Base+0x1df4>
    6310:	cmp	w22, #0x0
    6314:	b.le	6410 <BZ2_compressBlock@@Base+0x1eac>
    6318:	ldr	x9, [x29, #8]
    631c:	mov	w10, #0x102                 	// #258
    6320:	mov	w2, w22
    6324:	mov	w3, w21
    6328:	madd	x8, x23, x28, x9
    632c:	madd	x9, x23, x10, x9
    6330:	mov	w10, #0x9958                	// #39256
    6334:	add	x0, x8, x10
    6338:	add	x1, x9, x19
    633c:	ldr	x4, [sp, #48]
    6340:	bl	15a0 <BZ2_hbAssignCodes@plt>
    6344:	add	x23, x23, #0x1
    6348:	add	x24, x24, #0x102
    634c:	cmp	x23, x20
    6350:	add	x25, x25, #0x102
    6354:	b.eq	6460 <BZ2_compressBlock@@Base+0x1efc>  // b.none
    6358:	cmp	x27, #0x2
    635c:	b.cs	6374 <BZ2_compressBlock@@Base+0x1e10>  // b.hs, b.nlast
    6360:	ldr	x10, [sp, #56]
    6364:	mov	x8, xzr
    6368:	mov	w21, wzr
    636c:	mov	w22, #0x20                  	// #32
    6370:	b	63dc <BZ2_compressBlock@@Base+0x1e78>
    6374:	mov	w9, wzr
    6378:	mov	w10, wzr
    637c:	mov	w8, #0x20                  	// #32
    6380:	mov	x12, x26
    6384:	mov	x13, x24
    6388:	mov	w11, #0x20                  	// #32
    638c:	ldurb	w14, [x13, #-1]
    6390:	ldrb	w15, [x13], #2
    6394:	cmp	w9, w14
    6398:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    639c:	cmp	w10, w15
    63a0:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    63a4:	cmp	w8, w14
    63a8:	csel	w8, w14, w8, gt
    63ac:	cmp	w11, w15
    63b0:	csel	w11, w15, w11, gt
    63b4:	subs	x12, x12, #0x2
    63b8:	b.ne	638c <BZ2_compressBlock@@Base+0x1e28>  // b.any
    63bc:	cmp	w9, w10
    63c0:	csel	w21, w9, w10, hi  // hi = pmore
    63c4:	ldr	x10, [sp, #56]
    63c8:	cmp	w8, w11
    63cc:	csel	w22, w8, w11, lt  // lt = tstop
    63d0:	cmp	x27, x26
    63d4:	mov	x8, x26
    63d8:	b.eq	63fc <BZ2_compressBlock@@Base+0x1e98>  // b.none
    63dc:	ldrb	w9, [x25, x8]
    63e0:	add	x8, x8, #0x1
    63e4:	cmp	w21, w9
    63e8:	csel	w21, w9, w21, cc  // cc = lo, ul, last
    63ec:	cmp	w22, w9
    63f0:	csel	w22, w9, w22, gt
    63f4:	cmp	x8, x10
    63f8:	b.lt	63dc <BZ2_compressBlock@@Base+0x1e78>  // b.tstop
    63fc:	cmp	w21, #0x11
    6400:	b.le	6310 <BZ2_compressBlock@@Base+0x1dac>
    6404:	mov	w0, #0xbbc                 	// #3004
    6408:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    640c:	b	6310 <BZ2_compressBlock@@Base+0x1dac>
    6410:	mov	w0, #0xbbd                 	// #3005
    6414:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    6418:	b	6318 <BZ2_compressBlock@@Base+0x1db4>
    641c:	ldr	x10, [x29, #8]
    6420:	ldr	x23, [sp, #48]
    6424:	mov	w8, #0x9958                	// #39256
    6428:	mov	w9, #0x934c                	// #37708
    642c:	add	x21, x10, x8
    6430:	add	x22, x10, x9
    6434:	mov	x19, x20
    6438:	mov	w2, #0x20                  	// #32
    643c:	mov	x0, x21
    6440:	mov	x1, x22
    6444:	mov	w3, wzr
    6448:	mov	w4, w23
    644c:	bl	15a0 <BZ2_hbAssignCodes@plt>
    6450:	add	x21, x21, #0x408
    6454:	subs	x19, x19, #0x1
    6458:	add	x22, x22, #0x102
    645c:	b.ne	6438 <BZ2_compressBlock@@Base+0x1ed4>  // b.any
    6460:	ldr	x9, [x29, #8]
    6464:	mov	x8, xzr
    6468:	sub	x10, x29, #0x3c
    646c:	add	x9, x9, #0x8f
    6470:	strb	wzr, [x10, x8]
    6474:	ldurb	w11, [x9, #-15]
    6478:	cmp	w11, #0x0
    647c:	cset	w12, ne  // ne = any
    6480:	strb	w12, [x10, x8]
    6484:	ldurb	w12, [x9, #-14]
    6488:	orr	w11, w11, w12
    648c:	tst	w11, #0xff
    6490:	cset	w12, ne  // ne = any
    6494:	strb	w12, [x10, x8]
    6498:	ldurb	w12, [x9, #-13]
    649c:	orr	w11, w11, w12
    64a0:	tst	w11, #0xff
    64a4:	cset	w12, ne  // ne = any
    64a8:	strb	w12, [x10, x8]
    64ac:	ldurb	w12, [x9, #-12]
    64b0:	orr	w11, w11, w12
    64b4:	tst	w11, #0xff
    64b8:	cset	w12, ne  // ne = any
    64bc:	strb	w12, [x10, x8]
    64c0:	ldurb	w12, [x9, #-11]
    64c4:	orr	w11, w11, w12
    64c8:	tst	w11, #0xff
    64cc:	cset	w12, ne  // ne = any
    64d0:	strb	w12, [x10, x8]
    64d4:	ldurb	w12, [x9, #-10]
    64d8:	orr	w11, w11, w12
    64dc:	tst	w11, #0xff
    64e0:	cset	w12, ne  // ne = any
    64e4:	strb	w12, [x10, x8]
    64e8:	ldurb	w12, [x9, #-9]
    64ec:	orr	w11, w11, w12
    64f0:	tst	w11, #0xff
    64f4:	cset	w12, ne  // ne = any
    64f8:	strb	w12, [x10, x8]
    64fc:	ldurb	w12, [x9, #-8]
    6500:	orr	w11, w11, w12
    6504:	tst	w11, #0xff
    6508:	cset	w12, ne  // ne = any
    650c:	strb	w12, [x10, x8]
    6510:	ldurb	w12, [x9, #-7]
    6514:	orr	w11, w11, w12
    6518:	tst	w11, #0xff
    651c:	cset	w12, ne  // ne = any
    6520:	strb	w12, [x10, x8]
    6524:	ldurb	w12, [x9, #-6]
    6528:	orr	w11, w11, w12
    652c:	tst	w11, #0xff
    6530:	cset	w12, ne  // ne = any
    6534:	strb	w12, [x10, x8]
    6538:	ldurb	w12, [x9, #-5]
    653c:	orr	w11, w11, w12
    6540:	tst	w11, #0xff
    6544:	cset	w12, ne  // ne = any
    6548:	strb	w12, [x10, x8]
    654c:	ldurb	w12, [x9, #-4]
    6550:	orr	w11, w11, w12
    6554:	tst	w11, #0xff
    6558:	cset	w12, ne  // ne = any
    655c:	strb	w12, [x10, x8]
    6560:	ldurb	w12, [x9, #-3]
    6564:	orr	w11, w11, w12
    6568:	tst	w11, #0xff
    656c:	cset	w12, ne  // ne = any
    6570:	strb	w12, [x10, x8]
    6574:	ldurb	w12, [x9, #-2]
    6578:	orr	w11, w11, w12
    657c:	tst	w11, #0xff
    6580:	cset	w12, ne  // ne = any
    6584:	strb	w12, [x10, x8]
    6588:	ldurb	w12, [x9, #-1]
    658c:	orr	w11, w11, w12
    6590:	tst	w11, #0xff
    6594:	cset	w12, ne  // ne = any
    6598:	strb	w12, [x10, x8]
    659c:	ldrb	w12, [x9], #16
    65a0:	orr	w11, w11, w12
    65a4:	tst	w11, #0xff
    65a8:	cset	w11, ne  // ne = any
    65ac:	strb	w11, [x10, x8]
    65b0:	add	x8, x8, #0x1
    65b4:	cmp	x8, #0x10
    65b8:	b.ne	6470 <BZ2_compressBlock@@Base+0x1f0c>  // b.any
    65bc:	ldr	x21, [x29, #8]
    65c0:	adrp	x19, 1f000 <BZ2_bzerror@@Base+0x10cec>
    65c4:	mov	x12, xzr
    65c8:	sub	x13, x29, #0x3c
    65cc:	ldr	w8, [x21, #116]!
    65d0:	mov	w14, #0x80000000            	// #-2147483648
    65d4:	ldr	w10, [x21, #528]
    65d8:	ldr	w11, [x21, #524]
    65dc:	ldr	x19, [x19, #4016]
    65e0:	add	x22, x21, #0x210
    65e4:	add	x24, x21, #0x20c
    65e8:	sub	x25, x21, #0x24
    65ec:	mov	w9, w8
    65f0:	b	6614 <BZ2_compressBlock@@Base+0x20b0>
    65f4:	lsr	w15, w14, w10
    65f8:	orr	w11, w15, w11
    65fc:	add	x12, x12, #0x1
    6600:	add	w10, w10, #0x1
    6604:	cmp	x12, #0x10
    6608:	str	w11, [x24]
    660c:	str	w10, [x22]
    6610:	b.eq	66a4 <BZ2_compressBlock@@Base+0x2140>  // b.none
    6614:	ldrb	w15, [x13, x12]
    6618:	cbz	w15, 6660 <BZ2_compressBlock@@Base+0x20fc>
    661c:	cmp	w10, #0x8
    6620:	b.lt	65f4 <BZ2_compressBlock@@Base+0x2090>  // b.tstop
    6624:	ldr	x10, [x25]
    6628:	lsr	w11, w11, #24
    662c:	strb	w11, [x10, w9, sxtw]
    6630:	ldr	w9, [x21]
    6634:	add	w9, w9, #0x1
    6638:	str	w9, [x21]
    663c:	ldr	w10, [x24]
    6640:	lsl	w11, w10, #8
    6644:	str	w11, [x24]
    6648:	ldr	w15, [x22]
    664c:	sub	w10, w15, #0x8
    6650:	cmp	w15, #0xf
    6654:	str	w10, [x22]
    6658:	b.gt	6624 <BZ2_compressBlock@@Base+0x20c0>
    665c:	b	65f4 <BZ2_compressBlock@@Base+0x2090>
    6660:	cmp	w10, #0x8
    6664:	b.lt	65fc <BZ2_compressBlock@@Base+0x2098>  // b.tstop
    6668:	ldr	x10, [x25]
    666c:	lsr	w11, w11, #24
    6670:	strb	w11, [x10, w9, sxtw]
    6674:	ldr	w9, [x21]
    6678:	add	w9, w9, #0x1
    667c:	str	w9, [x21]
    6680:	ldr	w10, [x24]
    6684:	lsl	w11, w10, #8
    6688:	str	w11, [x24]
    668c:	ldr	w15, [x22]
    6690:	sub	w10, w15, #0x8
    6694:	cmp	w15, #0xf
    6698:	str	w10, [x22]
    669c:	b.gt	6668 <BZ2_compressBlock@@Base+0x2104>
    66a0:	b	65fc <BZ2_compressBlock@@Base+0x2098>
    66a4:	ldr	x6, [sp, #56]
    66a8:	ldr	x18, [x29, #8]
    66ac:	mov	x12, xzr
    66b0:	sub	x13, x29, #0x3c
    66b4:	mov	w14, #0x80000000            	// #-2147483648
    66b8:	b	66c8 <BZ2_compressBlock@@Base+0x2164>
    66bc:	add	x12, x12, #0x1
    66c0:	cmp	x12, #0x10
    66c4:	b.eq	6794 <BZ2_compressBlock@@Base+0x2230>  // b.none
    66c8:	ldrb	w15, [x13, x12]
    66cc:	cbz	w15, 66bc <BZ2_compressBlock@@Base+0x2158>
    66d0:	mov	x15, xzr
    66d4:	lsl	x16, x12, #4
    66d8:	b	66fc <BZ2_compressBlock@@Base+0x2198>
    66dc:	lsr	w17, w14, w10
    66e0:	orr	w11, w17, w11
    66e4:	add	x15, x15, #0x1
    66e8:	add	w10, w10, #0x1
    66ec:	cmp	x15, #0x10
    66f0:	str	w11, [x24]
    66f4:	str	w10, [x22]
    66f8:	b.eq	66bc <BZ2_compressBlock@@Base+0x2158>  // b.none
    66fc:	add	x17, x15, x16
    6700:	add	x17, x18, x17
    6704:	ldrb	w17, [x17, #128]
    6708:	cbz	w17, 6750 <BZ2_compressBlock@@Base+0x21ec>
    670c:	cmp	w10, #0x8
    6710:	b.lt	66dc <BZ2_compressBlock@@Base+0x2178>  // b.tstop
    6714:	ldr	x10, [x25]
    6718:	lsr	w11, w11, #24
    671c:	strb	w11, [x10, w9, sxtw]
    6720:	ldr	w9, [x21]
    6724:	add	w9, w9, #0x1
    6728:	str	w9, [x21]
    672c:	ldr	w10, [x24]
    6730:	lsl	w11, w10, #8
    6734:	str	w11, [x24]
    6738:	ldr	w17, [x22]
    673c:	sub	w10, w17, #0x8
    6740:	cmp	w17, #0xf
    6744:	str	w10, [x22]
    6748:	b.gt	6714 <BZ2_compressBlock@@Base+0x21b0>
    674c:	b	66dc <BZ2_compressBlock@@Base+0x2178>
    6750:	cmp	w10, #0x8
    6754:	b.lt	66e4 <BZ2_compressBlock@@Base+0x2180>  // b.tstop
    6758:	ldr	x10, [x25]
    675c:	lsr	w11, w11, #24
    6760:	strb	w11, [x10, w9, sxtw]
    6764:	ldr	w9, [x21]
    6768:	add	w9, w9, #0x1
    676c:	str	w9, [x21]
    6770:	ldr	w10, [x24]
    6774:	lsl	w11, w10, #8
    6778:	str	w11, [x24]
    677c:	ldr	w17, [x22]
    6780:	sub	w10, w17, #0x8
    6784:	cmp	w17, #0xf
    6788:	str	w10, [x22]
    678c:	b.gt	6758 <BZ2_compressBlock@@Base+0x21f4>
    6790:	b	66e4 <BZ2_compressBlock@@Base+0x2180>
    6794:	ldr	x11, [x29, #8]
    6798:	ldr	w11, [x11, #656]
    679c:	cmp	w11, #0x3
    67a0:	b.ge	8614 <BZ2_compressBlock@@Base+0x40b0>  // b.tcont
    67a4:	ldr	w11, [x24]
    67a8:	mov	w8, w9
    67ac:	cmp	w10, #0x8
    67b0:	b.lt	67ec <BZ2_compressBlock@@Base+0x2288>  // b.tstop
    67b4:	ldr	x10, [x25]
    67b8:	lsr	w11, w11, #24
    67bc:	strb	w11, [x10, w8, sxtw]
    67c0:	ldr	w8, [x21]
    67c4:	add	w8, w8, #0x1
    67c8:	str	w8, [x21]
    67cc:	ldr	w10, [x24]
    67d0:	lsl	w11, w10, #8
    67d4:	str	w11, [x24]
    67d8:	ldr	w12, [x22]
    67dc:	sub	w10, w12, #0x8
    67e0:	cmp	w12, #0xf
    67e4:	str	w10, [x22]
    67e8:	b.gt	67b4 <BZ2_compressBlock@@Base+0x2250>
    67ec:	mov	w13, #0x1d                  	// #29
    67f0:	add	w12, w10, #0x3
    67f4:	cmp	w10, #0x5
    67f8:	sub	w10, w13, w10
    67fc:	lsl	w10, w20, w10
    6800:	orr	w10, w10, w11
    6804:	str	w10, [x24]
    6808:	str	w12, [x22]
    680c:	b.lt	6848 <BZ2_compressBlock@@Base+0x22e4>  // b.tstop
    6810:	ldr	x11, [x25]
    6814:	lsr	w10, w10, #24
    6818:	strb	w10, [x11, w8, sxtw]
    681c:	ldr	w8, [x21]
    6820:	add	w8, w8, #0x1
    6824:	str	w8, [x21]
    6828:	ldr	w10, [x24]
    682c:	lsl	w10, w10, #8
    6830:	str	w10, [x24]
    6834:	ldr	w11, [x22]
    6838:	sub	w12, w11, #0x8
    683c:	cmp	w11, #0xf
    6840:	str	w12, [x22]
    6844:	b.gt	6810 <BZ2_compressBlock@@Base+0x22ac>
    6848:	ldur	x14, [x29, #-80]
    684c:	mov	w13, #0x11                  	// #17
    6850:	add	w11, w12, #0xf
    6854:	sub	w12, w13, w12
    6858:	lsl	w12, w14, w12
    685c:	cmp	w14, #0x1
    6860:	orr	w10, w12, w10
    6864:	str	w10, [x24]
    6868:	str	w11, [x22]
    686c:	b.lt	6974 <BZ2_compressBlock@@Base+0x2410>  // b.tstop
    6870:	mov	x12, xzr
    6874:	mov	w13, w14
    6878:	mov	w14, #0x4cfa                	// #19706
    687c:	mov	w15, #0x80000000            	// #-2147483648
    6880:	b	689c <BZ2_compressBlock@@Base+0x2338>
    6884:	add	x12, x12, #0x1
    6888:	add	w11, w18, #0x1
    688c:	cmp	x12, x13
    6890:	str	w10, [x24]
    6894:	str	w11, [x22]
    6898:	b.eq	6974 <BZ2_compressBlock@@Base+0x2410>  // b.none
    689c:	ldr	x16, [x29, #8]
    68a0:	cmp	w11, #0x7
    68a4:	cset	w0, gt
    68a8:	add	x16, x16, x12
    68ac:	add	x16, x16, x14
    68b0:	ldrb	w17, [x16]
    68b4:	cbz	w17, 6930 <BZ2_compressBlock@@Base+0x23cc>
    68b8:	mov	w17, wzr
    68bc:	b	68f0 <BZ2_compressBlock@@Base+0x238c>
    68c0:	lsr	w0, w15, w11
    68c4:	add	w18, w11, #0x1
    68c8:	orr	w10, w0, w10
    68cc:	str	w10, [x24]
    68d0:	str	w18, [x22]
    68d4:	ldrb	w1, [x16]
    68d8:	add	w17, w17, #0x1
    68dc:	cmp	w11, #0x6
    68e0:	cset	w0, gt
    68e4:	cmp	w17, w1
    68e8:	mov	w11, w18
    68ec:	b.cs	6934 <BZ2_compressBlock@@Base+0x23d0>  // b.hs, b.nlast
    68f0:	tbz	w0, #0, 68c0 <BZ2_compressBlock@@Base+0x235c>
    68f4:	ldr	x11, [x25]
    68f8:	lsr	w10, w10, #24
    68fc:	strb	w10, [x11, w8, sxtw]
    6900:	ldr	w8, [x21]
    6904:	add	w8, w8, #0x1
    6908:	str	w8, [x21]
    690c:	ldr	w10, [x24]
    6910:	lsl	w10, w10, #8
    6914:	str	w10, [x24]
    6918:	ldr	w18, [x22]
    691c:	sub	w11, w18, #0x8
    6920:	cmp	w18, #0xf
    6924:	str	w11, [x22]
    6928:	b.gt	68f4 <BZ2_compressBlock@@Base+0x2390>
    692c:	b	68c0 <BZ2_compressBlock@@Base+0x235c>
    6930:	mov	w18, w11
    6934:	cbz	w0, 6884 <BZ2_compressBlock@@Base+0x2320>
    6938:	ldr	x11, [x25]
    693c:	lsr	w10, w10, #24
    6940:	strb	w10, [x11, w8, sxtw]
    6944:	ldr	w8, [x21]
    6948:	add	w8, w8, #0x1
    694c:	str	w8, [x21]
    6950:	ldr	w10, [x24]
    6954:	lsl	w10, w10, #8
    6958:	str	w10, [x24]
    695c:	ldr	w11, [x22]
    6960:	sub	w18, w11, #0x8
    6964:	cmp	w11, #0xf
    6968:	str	w18, [x22]
    696c:	b.gt	6938 <BZ2_compressBlock@@Base+0x23d4>
    6970:	b	6884 <BZ2_compressBlock@@Base+0x2320>
    6974:	ldr	x12, [x29, #8]
    6978:	ldr	w12, [x12, #656]
    697c:	cmp	w12, #0x3
    6980:	b.ge	8648 <BZ2_compressBlock@@Base+0x40e4>  // b.tcont
    6984:	ldr	x5, [sp, #24]
    6988:	mov	x9, xzr
    698c:	mov	w12, #0x102                 	// #258
    6990:	mov	w13, #0x934c                	// #37708
    6994:	mov	w14, #0x1b                  	// #27
    6998:	mov	w15, #0x1e                  	// #30
    699c:	mov	w16, #0x2                   	// #2
    69a0:	mov	w17, #0x3                   	// #3
    69a4:	mov	w26, w8
    69a8:	b	69b8 <BZ2_compressBlock@@Base+0x2454>
    69ac:	add	x9, x9, #0x1
    69b0:	cmp	x9, x20
    69b4:	b.eq	6b8c <BZ2_compressBlock@@Base+0x2628>  // b.none
    69b8:	ldr	x18, [x29, #8]
    69bc:	cmp	w11, #0x8
    69c0:	madd	x18, x9, x12, x18
    69c4:	ldrb	w18, [x18, x13]
    69c8:	b.lt	6a04 <BZ2_compressBlock@@Base+0x24a0>  // b.tstop
    69cc:	ldr	x11, [x25]
    69d0:	lsr	w10, w10, #24
    69d4:	strb	w10, [x11, w26, sxtw]
    69d8:	ldr	w10, [x21]
    69dc:	add	w26, w10, #0x1
    69e0:	str	w26, [x21]
    69e4:	ldr	w10, [x24]
    69e8:	lsl	w10, w10, #8
    69ec:	str	w10, [x24]
    69f0:	ldr	w0, [x22]
    69f4:	sub	w11, w0, #0x8
    69f8:	cmp	w0, #0xf
    69fc:	str	w11, [x22]
    6a00:	b.gt	69cc <BZ2_compressBlock@@Base+0x2468>
    6a04:	sub	w0, w14, w11
    6a08:	lsl	w0, w18, w0
    6a0c:	add	w11, w11, #0x5
    6a10:	cmn	w5, #0x1
    6a14:	orr	w10, w0, w10
    6a18:	str	w10, [x24]
    6a1c:	str	w11, [x22]
    6a20:	b.lt	69ac <BZ2_compressBlock@@Base+0x2448>  // b.tstop
    6a24:	mov	x0, xzr
    6a28:	b	6a44 <BZ2_compressBlock@@Base+0x24e0>
    6a2c:	add	x0, x0, #0x1
    6a30:	add	w11, w11, #0x1
    6a34:	cmp	x0, x6
    6a38:	str	w10, [x24]
    6a3c:	str	w11, [x22]
    6a40:	b.ge	69ac <BZ2_compressBlock@@Base+0x2448>  // b.tcont
    6a44:	ldr	x1, [x29, #8]
    6a48:	madd	x1, x9, x12, x1
    6a4c:	add	x1, x1, x0
    6a50:	add	x1, x1, x13
    6a54:	ldrb	w2, [x1]
    6a58:	b	6a7c <BZ2_compressBlock@@Base+0x2518>
    6a5c:	sub	w2, w15, w11
    6a60:	lsl	w2, w16, w2
    6a64:	add	w11, w11, #0x2
    6a68:	orr	w10, w2, w10
    6a6c:	str	w10, [x24]
    6a70:	str	w11, [x22]
    6a74:	ldrb	w2, [x1]
    6a78:	add	w18, w18, #0x1
    6a7c:	cmp	w18, w2
    6a80:	b.ge	6ac8 <BZ2_compressBlock@@Base+0x2564>  // b.tcont
    6a84:	cmp	w11, #0x8
    6a88:	b.lt	6a5c <BZ2_compressBlock@@Base+0x24f8>  // b.tstop
    6a8c:	ldr	x11, [x25]
    6a90:	lsr	w10, w10, #24
    6a94:	strb	w10, [x11, w26, sxtw]
    6a98:	ldr	w10, [x21]
    6a9c:	add	w26, w10, #0x1
    6aa0:	str	w26, [x21]
    6aa4:	ldr	w10, [x24]
    6aa8:	lsl	w10, w10, #8
    6aac:	str	w10, [x24]
    6ab0:	ldr	w2, [x22]
    6ab4:	sub	w11, w2, #0x8
    6ab8:	cmp	w2, #0xf
    6abc:	str	w11, [x22]
    6ac0:	b.gt	6a8c <BZ2_compressBlock@@Base+0x2528>
    6ac4:	b	6a5c <BZ2_compressBlock@@Base+0x24f8>
    6ac8:	cmp	w11, #0x7
    6acc:	cset	w3, gt
    6ad0:	cmp	w18, w2
    6ad4:	b.gt	6b4c <BZ2_compressBlock@@Base+0x25e8>
    6ad8:	cbz	w3, 6a2c <BZ2_compressBlock@@Base+0x24c8>
    6adc:	ldr	x11, [x25]
    6ae0:	lsr	w10, w10, #24
    6ae4:	strb	w10, [x11, w26, sxtw]
    6ae8:	ldr	w10, [x21]
    6aec:	add	w26, w10, #0x1
    6af0:	str	w26, [x21]
    6af4:	ldr	w10, [x24]
    6af8:	lsl	w10, w10, #8
    6afc:	str	w10, [x24]
    6b00:	ldr	w1, [x22]
    6b04:	sub	w11, w1, #0x8
    6b08:	cmp	w1, #0xf
    6b0c:	str	w11, [x22]
    6b10:	b.gt	6adc <BZ2_compressBlock@@Base+0x2578>
    6b14:	b	6a2c <BZ2_compressBlock@@Base+0x24c8>
    6b18:	sub	w2, w15, w11
    6b1c:	lsl	w2, w17, w2
    6b20:	add	w4, w11, #0x2
    6b24:	orr	w10, w2, w10
    6b28:	str	w10, [x24]
    6b2c:	str	w4, [x22]
    6b30:	ldrb	w2, [x1]
    6b34:	cmp	w11, #0x5
    6b38:	sub	w18, w18, #0x1
    6b3c:	cset	w3, gt
    6b40:	cmp	w18, w2
    6b44:	mov	w11, w4
    6b48:	b.le	6ad8 <BZ2_compressBlock@@Base+0x2574>
    6b4c:	tbz	w3, #0, 6b18 <BZ2_compressBlock@@Base+0x25b4>
    6b50:	ldr	x11, [x25]
    6b54:	lsr	w10, w10, #24
    6b58:	strb	w10, [x11, w26, sxtw]
    6b5c:	ldr	w10, [x21]
    6b60:	add	w26, w10, #0x1
    6b64:	str	w26, [x21]
    6b68:	ldr	w10, [x24]
    6b6c:	lsl	w10, w10, #8
    6b70:	str	w10, [x24]
    6b74:	ldr	w2, [x22]
    6b78:	sub	w11, w2, #0x8
    6b7c:	cmp	w2, #0xf
    6b80:	str	w11, [x22]
    6b84:	b.gt	6b50 <BZ2_compressBlock@@Base+0x25ec>
    6b88:	b	6b18 <BZ2_compressBlock@@Base+0x25b4>
    6b8c:	ldr	x9, [x29, #8]
    6b90:	ldr	w9, [x9, #656]
    6b94:	cmp	w9, #0x3
    6b98:	b.ge	8670 <BZ2_compressBlock@@Base+0x410c>  // b.tcont
    6b9c:	ldr	x8, [x29, #8]
    6ba0:	ldr	x16, [sp, #88]
    6ba4:	ldr	w8, [x8, #668]
    6ba8:	cmp	w8, #0x1
    6bac:	b.lt	85a4 <BZ2_compressBlock@@Base+0x4040>  // b.tstop
    6bb0:	mov	x17, xzr
    6bb4:	mov	w9, wzr
    6bb8:	mov	w18, #0x102                 	// #258
    6bbc:	mov	w0, #0x934c                	// #37708
    6bc0:	mov	w1, #0x408                 	// #1032
    6bc4:	mov	w2, #0x9958                	// #39256
    6bc8:	b	6bfc <BZ2_compressBlock@@Base+0x2698>
    6bcc:	add	w10, w11, w10
    6bd0:	neg	w11, w10
    6bd4:	lsl	w8, w8, w11
    6bd8:	orr	w8, w8, w9
    6bdc:	str	w8, [x24]
    6be0:	str	w10, [x22]
    6be4:	ldr	x8, [x29, #8]
    6be8:	add	w9, w28, #0x1
    6bec:	add	x17, x17, #0x1
    6bf0:	ldr	w8, [x8, #668]
    6bf4:	cmp	w9, w8
    6bf8:	b.ge	85a8 <BZ2_compressBlock@@Base+0x4044>  // b.tcont
    6bfc:	sxtw	x27, w9
    6c00:	ldr	x9, [x29, #8]
    6c04:	add	x4, x27, #0x31
    6c08:	sub	w10, w8, #0x1
    6c0c:	cmp	w4, w8
    6c10:	add	x19, x9, x17
    6c14:	ldrb	w9, [x19, #1704]
    6c18:	csel	w28, w4, w10, lt  // lt = tstop
    6c1c:	cmp	w20, w9
    6c20:	b.hi	6c54 <BZ2_compressBlock@@Base+0x26f0>  // b.pmore
    6c24:	mov	w0, #0xbbe                 	// #3006
    6c28:	mov	x23, x17
    6c2c:	str	x27, [sp, #96]
    6c30:	mov	x27, x4
    6c34:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    6c38:	mov	x4, x27
    6c3c:	ldp	x16, x27, [sp, #88]
    6c40:	mov	w2, #0x9958                	// #39256
    6c44:	mov	w1, #0x408                 	// #1032
    6c48:	mov	w0, #0x934c                	// #37708
    6c4c:	mov	w18, #0x102                 	// #258
    6c50:	mov	x17, x23
    6c54:	cmp	w20, #0x6
    6c58:	add	x8, x19, #0x6a8
    6c5c:	b.ne	84fc <BZ2_compressBlock@@Base+0x3f98>  // b.any
    6c60:	sub	w9, w28, w27
    6c64:	cmp	w9, #0x31
    6c68:	b.ne	84fc <BZ2_compressBlock@@Base+0x3f98>  // b.any
    6c6c:	ldrb	w8, [x8]
    6c70:	ldr	x13, [x29, #8]
    6c74:	ldrh	w9, [x16, x27, lsl #1]
    6c78:	madd	x10, x8, x18, x13
    6c7c:	madd	x11, x8, x1, x13
    6c80:	ldr	w12, [x13, #644]
    6c84:	add	x10, x10, x9
    6c88:	add	x11, x11, x9, lsl #2
    6c8c:	ldrb	w9, [x10, x0]
    6c90:	ldr	w10, [x11, x2]
    6c94:	ldr	w11, [x13, #640]
    6c98:	cmp	w12, #0x8
    6c9c:	b.lt	6cdc <BZ2_compressBlock@@Base+0x2778>  // b.tstop
    6ca0:	ldr	w13, [x21]
    6ca4:	ldr	x12, [x25]
    6ca8:	lsr	w11, w11, #24
    6cac:	strb	w11, [x12, w13, sxtw]
    6cb0:	ldr	w11, [x21]
    6cb4:	add	w13, w11, #0x1
    6cb8:	str	w13, [x21]
    6cbc:	ldr	w11, [x24]
    6cc0:	lsl	w11, w11, #8
    6cc4:	str	w11, [x24]
    6cc8:	ldr	w14, [x22]
    6ccc:	sub	w12, w14, #0x8
    6cd0:	cmp	w14, #0xf
    6cd4:	str	w12, [x22]
    6cd8:	b.gt	6ca4 <BZ2_compressBlock@@Base+0x2740>
    6cdc:	add	w13, w12, w9
    6ce0:	ldr	x14, [x29, #8]
    6ce4:	neg	w12, w13
    6ce8:	lsl	w10, w10, w12
    6cec:	orr	w10, w10, w11
    6cf0:	add	x9, x16, x27, lsl #1
    6cf4:	str	w13, [x14, #644]
    6cf8:	str	w10, [x14, #640]
    6cfc:	ldrh	w11, [x9, #2]
    6d00:	madd	x12, x8, x18, x14
    6d04:	madd	x14, x8, x1, x14
    6d08:	cmp	w13, #0x8
    6d0c:	add	x12, x12, x11
    6d10:	add	x11, x14, x11, lsl #2
    6d14:	ldrb	w12, [x12, x0]
    6d18:	ldr	w11, [x11, x2]
    6d1c:	b.lt	6d5c <BZ2_compressBlock@@Base+0x27f8>  // b.tstop
    6d20:	ldr	w14, [x21]
    6d24:	ldr	x13, [x25]
    6d28:	lsr	w10, w10, #24
    6d2c:	strb	w10, [x13, w14, sxtw]
    6d30:	ldr	w10, [x21]
    6d34:	add	w14, w10, #0x1
    6d38:	str	w14, [x21]
    6d3c:	ldr	w10, [x24]
    6d40:	lsl	w10, w10, #8
    6d44:	str	w10, [x24]
    6d48:	ldr	w15, [x22]
    6d4c:	sub	w13, w15, #0x8
    6d50:	cmp	w15, #0xf
    6d54:	str	w13, [x22]
    6d58:	b.gt	6d24 <BZ2_compressBlock@@Base+0x27c0>
    6d5c:	add	w12, w13, w12
    6d60:	ldr	x14, [x29, #8]
    6d64:	neg	w13, w12
    6d68:	lsl	w11, w11, w13
    6d6c:	orr	w10, w11, w10
    6d70:	str	w12, [x14, #644]
    6d74:	str	w10, [x14, #640]
    6d78:	ldrh	w9, [x9, #4]
    6d7c:	madd	x11, x8, x18, x14
    6d80:	madd	x13, x8, x1, x14
    6d84:	cmp	w12, #0x8
    6d88:	add	x11, x11, x9
    6d8c:	add	x13, x13, x9, lsl #2
    6d90:	ldrb	w9, [x11, x0]
    6d94:	ldr	w11, [x13, x2]
    6d98:	b.lt	6dd8 <BZ2_compressBlock@@Base+0x2874>  // b.tstop
    6d9c:	ldr	w13, [x21]
    6da0:	ldr	x12, [x25]
    6da4:	lsr	w10, w10, #24
    6da8:	strb	w10, [x12, w13, sxtw]
    6dac:	ldr	w10, [x21]
    6db0:	add	w13, w10, #0x1
    6db4:	str	w13, [x21]
    6db8:	ldr	w10, [x24]
    6dbc:	lsl	w10, w10, #8
    6dc0:	str	w10, [x24]
    6dc4:	ldr	w14, [x22]
    6dc8:	sub	w12, w14, #0x8
    6dcc:	cmp	w14, #0xf
    6dd0:	str	w12, [x22]
    6dd4:	b.gt	6da0 <BZ2_compressBlock@@Base+0x283c>
    6dd8:	add	w13, w12, w9
    6ddc:	ldr	x14, [x29, #8]
    6de0:	neg	w12, w13
    6de4:	lsl	w11, w11, w12
    6de8:	orr	w10, w11, w10
    6dec:	add	x9, x16, x27, lsl #1
    6df0:	str	w13, [x14, #644]
    6df4:	str	w10, [x14, #640]
    6df8:	ldrh	w11, [x9, #6]
    6dfc:	madd	x12, x8, x18, x14
    6e00:	madd	x14, x8, x1, x14
    6e04:	cmp	w13, #0x8
    6e08:	add	x12, x12, x11
    6e0c:	add	x11, x14, x11, lsl #2
    6e10:	ldrb	w12, [x12, x0]
    6e14:	ldr	w11, [x11, x2]
    6e18:	b.lt	6e58 <BZ2_compressBlock@@Base+0x28f4>  // b.tstop
    6e1c:	ldr	w14, [x21]
    6e20:	ldr	x13, [x25]
    6e24:	lsr	w10, w10, #24
    6e28:	strb	w10, [x13, w14, sxtw]
    6e2c:	ldr	w10, [x21]
    6e30:	add	w14, w10, #0x1
    6e34:	str	w14, [x21]
    6e38:	ldr	w10, [x24]
    6e3c:	lsl	w10, w10, #8
    6e40:	str	w10, [x24]
    6e44:	ldr	w15, [x22]
    6e48:	sub	w13, w15, #0x8
    6e4c:	cmp	w15, #0xf
    6e50:	str	w13, [x22]
    6e54:	b.gt	6e20 <BZ2_compressBlock@@Base+0x28bc>
    6e58:	add	w12, w13, w12
    6e5c:	ldr	x14, [x29, #8]
    6e60:	neg	w13, w12
    6e64:	lsl	w11, w11, w13
    6e68:	orr	w10, w11, w10
    6e6c:	str	w12, [x14, #644]
    6e70:	str	w10, [x14, #640]
    6e74:	ldrh	w9, [x9, #8]
    6e78:	madd	x11, x8, x18, x14
    6e7c:	madd	x13, x8, x1, x14
    6e80:	cmp	w12, #0x8
    6e84:	add	x11, x11, x9
    6e88:	add	x13, x13, x9, lsl #2
    6e8c:	ldrb	w9, [x11, x0]
    6e90:	ldr	w11, [x13, x2]
    6e94:	b.lt	6ed4 <BZ2_compressBlock@@Base+0x2970>  // b.tstop
    6e98:	ldr	w13, [x21]
    6e9c:	ldr	x12, [x25]
    6ea0:	lsr	w10, w10, #24
    6ea4:	strb	w10, [x12, w13, sxtw]
    6ea8:	ldr	w10, [x21]
    6eac:	add	w13, w10, #0x1
    6eb0:	str	w13, [x21]
    6eb4:	ldr	w10, [x24]
    6eb8:	lsl	w10, w10, #8
    6ebc:	str	w10, [x24]
    6ec0:	ldr	w14, [x22]
    6ec4:	sub	w12, w14, #0x8
    6ec8:	cmp	w14, #0xf
    6ecc:	str	w12, [x22]
    6ed0:	b.gt	6e9c <BZ2_compressBlock@@Base+0x2938>
    6ed4:	add	w13, w12, w9
    6ed8:	ldr	x14, [x29, #8]
    6edc:	neg	w12, w13
    6ee0:	lsl	w11, w11, w12
    6ee4:	orr	w10, w11, w10
    6ee8:	add	x9, x16, x27, lsl #1
    6eec:	str	w13, [x14, #644]
    6ef0:	str	w10, [x14, #640]
    6ef4:	ldrh	w11, [x9, #10]
    6ef8:	madd	x12, x8, x18, x14
    6efc:	madd	x14, x8, x1, x14
    6f00:	cmp	w13, #0x8
    6f04:	add	x12, x12, x11
    6f08:	add	x11, x14, x11, lsl #2
    6f0c:	ldrb	w12, [x12, x0]
    6f10:	ldr	w11, [x11, x2]
    6f14:	b.lt	6f54 <BZ2_compressBlock@@Base+0x29f0>  // b.tstop
    6f18:	ldr	w14, [x21]
    6f1c:	ldr	x13, [x25]
    6f20:	lsr	w10, w10, #24
    6f24:	strb	w10, [x13, w14, sxtw]
    6f28:	ldr	w10, [x21]
    6f2c:	add	w14, w10, #0x1
    6f30:	str	w14, [x21]
    6f34:	ldr	w10, [x24]
    6f38:	lsl	w10, w10, #8
    6f3c:	str	w10, [x24]
    6f40:	ldr	w15, [x22]
    6f44:	sub	w13, w15, #0x8
    6f48:	cmp	w15, #0xf
    6f4c:	str	w13, [x22]
    6f50:	b.gt	6f1c <BZ2_compressBlock@@Base+0x29b8>
    6f54:	add	w12, w13, w12
    6f58:	ldr	x14, [x29, #8]
    6f5c:	neg	w13, w12
    6f60:	lsl	w11, w11, w13
    6f64:	orr	w10, w11, w10
    6f68:	str	w12, [x14, #644]
    6f6c:	str	w10, [x14, #640]
    6f70:	ldrh	w9, [x9, #12]
    6f74:	madd	x11, x8, x18, x14
    6f78:	madd	x13, x8, x1, x14
    6f7c:	cmp	w12, #0x8
    6f80:	add	x11, x11, x9
    6f84:	add	x13, x13, x9, lsl #2
    6f88:	ldrb	w9, [x11, x0]
    6f8c:	ldr	w11, [x13, x2]
    6f90:	b.lt	6fd0 <BZ2_compressBlock@@Base+0x2a6c>  // b.tstop
    6f94:	ldr	w13, [x21]
    6f98:	ldr	x12, [x25]
    6f9c:	lsr	w10, w10, #24
    6fa0:	strb	w10, [x12, w13, sxtw]
    6fa4:	ldr	w10, [x21]
    6fa8:	add	w13, w10, #0x1
    6fac:	str	w13, [x21]
    6fb0:	ldr	w10, [x24]
    6fb4:	lsl	w10, w10, #8
    6fb8:	str	w10, [x24]
    6fbc:	ldr	w14, [x22]
    6fc0:	sub	w12, w14, #0x8
    6fc4:	cmp	w14, #0xf
    6fc8:	str	w12, [x22]
    6fcc:	b.gt	6f98 <BZ2_compressBlock@@Base+0x2a34>
    6fd0:	add	w13, w12, w9
    6fd4:	ldr	x14, [x29, #8]
    6fd8:	neg	w12, w13
    6fdc:	lsl	w11, w11, w12
    6fe0:	orr	w10, w11, w10
    6fe4:	add	x9, x16, x27, lsl #1
    6fe8:	str	w13, [x14, #644]
    6fec:	str	w10, [x14, #640]
    6ff0:	ldrh	w11, [x9, #14]
    6ff4:	madd	x12, x8, x18, x14
    6ff8:	madd	x14, x8, x1, x14
    6ffc:	cmp	w13, #0x8
    7000:	add	x12, x12, x11
    7004:	add	x11, x14, x11, lsl #2
    7008:	ldrb	w12, [x12, x0]
    700c:	ldr	w11, [x11, x2]
    7010:	b.lt	7050 <BZ2_compressBlock@@Base+0x2aec>  // b.tstop
    7014:	ldr	w14, [x21]
    7018:	ldr	x13, [x25]
    701c:	lsr	w10, w10, #24
    7020:	strb	w10, [x13, w14, sxtw]
    7024:	ldr	w10, [x21]
    7028:	add	w14, w10, #0x1
    702c:	str	w14, [x21]
    7030:	ldr	w10, [x24]
    7034:	lsl	w10, w10, #8
    7038:	str	w10, [x24]
    703c:	ldr	w15, [x22]
    7040:	sub	w13, w15, #0x8
    7044:	cmp	w15, #0xf
    7048:	str	w13, [x22]
    704c:	b.gt	7018 <BZ2_compressBlock@@Base+0x2ab4>
    7050:	add	w12, w13, w12
    7054:	ldr	x14, [x29, #8]
    7058:	neg	w13, w12
    705c:	lsl	w11, w11, w13
    7060:	orr	w10, w11, w10
    7064:	str	w12, [x14, #644]
    7068:	str	w10, [x14, #640]
    706c:	ldrh	w9, [x9, #16]
    7070:	madd	x11, x8, x18, x14
    7074:	madd	x13, x8, x1, x14
    7078:	cmp	w12, #0x8
    707c:	add	x11, x11, x9
    7080:	add	x13, x13, x9, lsl #2
    7084:	ldrb	w9, [x11, x0]
    7088:	ldr	w11, [x13, x2]
    708c:	b.lt	70cc <BZ2_compressBlock@@Base+0x2b68>  // b.tstop
    7090:	ldr	w13, [x21]
    7094:	ldr	x12, [x25]
    7098:	lsr	w10, w10, #24
    709c:	strb	w10, [x12, w13, sxtw]
    70a0:	ldr	w10, [x21]
    70a4:	add	w13, w10, #0x1
    70a8:	str	w13, [x21]
    70ac:	ldr	w10, [x24]
    70b0:	lsl	w10, w10, #8
    70b4:	str	w10, [x24]
    70b8:	ldr	w14, [x22]
    70bc:	sub	w12, w14, #0x8
    70c0:	cmp	w14, #0xf
    70c4:	str	w12, [x22]
    70c8:	b.gt	7094 <BZ2_compressBlock@@Base+0x2b30>
    70cc:	add	w13, w12, w9
    70d0:	ldr	x14, [x29, #8]
    70d4:	neg	w12, w13
    70d8:	lsl	w11, w11, w12
    70dc:	orr	w10, w11, w10
    70e0:	add	x9, x16, x27, lsl #1
    70e4:	str	w13, [x14, #644]
    70e8:	str	w10, [x14, #640]
    70ec:	ldrh	w11, [x9, #18]
    70f0:	madd	x12, x8, x18, x14
    70f4:	madd	x14, x8, x1, x14
    70f8:	cmp	w13, #0x8
    70fc:	add	x12, x12, x11
    7100:	add	x11, x14, x11, lsl #2
    7104:	ldrb	w12, [x12, x0]
    7108:	ldr	w11, [x11, x2]
    710c:	b.lt	714c <BZ2_compressBlock@@Base+0x2be8>  // b.tstop
    7110:	ldr	w14, [x21]
    7114:	ldr	x13, [x25]
    7118:	lsr	w10, w10, #24
    711c:	strb	w10, [x13, w14, sxtw]
    7120:	ldr	w10, [x21]
    7124:	add	w14, w10, #0x1
    7128:	str	w14, [x21]
    712c:	ldr	w10, [x24]
    7130:	lsl	w10, w10, #8
    7134:	str	w10, [x24]
    7138:	ldr	w15, [x22]
    713c:	sub	w13, w15, #0x8
    7140:	cmp	w15, #0xf
    7144:	str	w13, [x22]
    7148:	b.gt	7114 <BZ2_compressBlock@@Base+0x2bb0>
    714c:	add	w12, w13, w12
    7150:	ldr	x14, [x29, #8]
    7154:	neg	w13, w12
    7158:	lsl	w11, w11, w13
    715c:	orr	w10, w11, w10
    7160:	str	w12, [x14, #644]
    7164:	str	w10, [x14, #640]
    7168:	ldrh	w9, [x9, #20]
    716c:	madd	x11, x8, x18, x14
    7170:	madd	x13, x8, x1, x14
    7174:	cmp	w12, #0x8
    7178:	add	x11, x11, x9
    717c:	add	x13, x13, x9, lsl #2
    7180:	ldrb	w9, [x11, x0]
    7184:	ldr	w11, [x13, x2]
    7188:	b.lt	71c8 <BZ2_compressBlock@@Base+0x2c64>  // b.tstop
    718c:	ldr	w13, [x21]
    7190:	ldr	x12, [x25]
    7194:	lsr	w10, w10, #24
    7198:	strb	w10, [x12, w13, sxtw]
    719c:	ldr	w10, [x21]
    71a0:	add	w13, w10, #0x1
    71a4:	str	w13, [x21]
    71a8:	ldr	w10, [x24]
    71ac:	lsl	w10, w10, #8
    71b0:	str	w10, [x24]
    71b4:	ldr	w14, [x22]
    71b8:	sub	w12, w14, #0x8
    71bc:	cmp	w14, #0xf
    71c0:	str	w12, [x22]
    71c4:	b.gt	7190 <BZ2_compressBlock@@Base+0x2c2c>
    71c8:	add	w13, w12, w9
    71cc:	ldr	x14, [x29, #8]
    71d0:	neg	w12, w13
    71d4:	lsl	w11, w11, w12
    71d8:	orr	w10, w11, w10
    71dc:	add	x9, x16, x27, lsl #1
    71e0:	str	w13, [x14, #644]
    71e4:	str	w10, [x14, #640]
    71e8:	ldrh	w11, [x9, #22]
    71ec:	madd	x12, x8, x18, x14
    71f0:	madd	x14, x8, x1, x14
    71f4:	cmp	w13, #0x8
    71f8:	add	x12, x12, x11
    71fc:	add	x11, x14, x11, lsl #2
    7200:	ldrb	w12, [x12, x0]
    7204:	ldr	w11, [x11, x2]
    7208:	b.lt	7248 <BZ2_compressBlock@@Base+0x2ce4>  // b.tstop
    720c:	ldr	w14, [x21]
    7210:	ldr	x13, [x25]
    7214:	lsr	w10, w10, #24
    7218:	strb	w10, [x13, w14, sxtw]
    721c:	ldr	w10, [x21]
    7220:	add	w14, w10, #0x1
    7224:	str	w14, [x21]
    7228:	ldr	w10, [x24]
    722c:	lsl	w10, w10, #8
    7230:	str	w10, [x24]
    7234:	ldr	w15, [x22]
    7238:	sub	w13, w15, #0x8
    723c:	cmp	w15, #0xf
    7240:	str	w13, [x22]
    7244:	b.gt	7210 <BZ2_compressBlock@@Base+0x2cac>
    7248:	add	w12, w13, w12
    724c:	ldr	x14, [x29, #8]
    7250:	neg	w13, w12
    7254:	lsl	w11, w11, w13
    7258:	orr	w10, w11, w10
    725c:	str	w12, [x14, #644]
    7260:	str	w10, [x14, #640]
    7264:	ldrh	w9, [x9, #24]
    7268:	madd	x11, x8, x18, x14
    726c:	madd	x13, x8, x1, x14
    7270:	cmp	w12, #0x8
    7274:	add	x11, x11, x9
    7278:	add	x13, x13, x9, lsl #2
    727c:	ldrb	w9, [x11, x0]
    7280:	ldr	w11, [x13, x2]
    7284:	b.lt	72c4 <BZ2_compressBlock@@Base+0x2d60>  // b.tstop
    7288:	ldr	w13, [x21]
    728c:	ldr	x12, [x25]
    7290:	lsr	w10, w10, #24
    7294:	strb	w10, [x12, w13, sxtw]
    7298:	ldr	w10, [x21]
    729c:	add	w13, w10, #0x1
    72a0:	str	w13, [x21]
    72a4:	ldr	w10, [x24]
    72a8:	lsl	w10, w10, #8
    72ac:	str	w10, [x24]
    72b0:	ldr	w14, [x22]
    72b4:	sub	w12, w14, #0x8
    72b8:	cmp	w14, #0xf
    72bc:	str	w12, [x22]
    72c0:	b.gt	728c <BZ2_compressBlock@@Base+0x2d28>
    72c4:	add	w13, w12, w9
    72c8:	ldr	x14, [x29, #8]
    72cc:	neg	w12, w13
    72d0:	lsl	w11, w11, w12
    72d4:	orr	w10, w11, w10
    72d8:	add	x9, x16, x27, lsl #1
    72dc:	str	w13, [x14, #644]
    72e0:	str	w10, [x14, #640]
    72e4:	ldrh	w11, [x9, #26]
    72e8:	madd	x12, x8, x18, x14
    72ec:	madd	x14, x8, x1, x14
    72f0:	cmp	w13, #0x8
    72f4:	add	x12, x12, x11
    72f8:	add	x11, x14, x11, lsl #2
    72fc:	ldrb	w12, [x12, x0]
    7300:	ldr	w11, [x11, x2]
    7304:	b.lt	7344 <BZ2_compressBlock@@Base+0x2de0>  // b.tstop
    7308:	ldr	w14, [x21]
    730c:	ldr	x13, [x25]
    7310:	lsr	w10, w10, #24
    7314:	strb	w10, [x13, w14, sxtw]
    7318:	ldr	w10, [x21]
    731c:	add	w14, w10, #0x1
    7320:	str	w14, [x21]
    7324:	ldr	w10, [x24]
    7328:	lsl	w10, w10, #8
    732c:	str	w10, [x24]
    7330:	ldr	w15, [x22]
    7334:	sub	w13, w15, #0x8
    7338:	cmp	w15, #0xf
    733c:	str	w13, [x22]
    7340:	b.gt	730c <BZ2_compressBlock@@Base+0x2da8>
    7344:	add	w12, w13, w12
    7348:	ldr	x14, [x29, #8]
    734c:	neg	w13, w12
    7350:	lsl	w11, w11, w13
    7354:	orr	w10, w11, w10
    7358:	str	w12, [x14, #644]
    735c:	str	w10, [x14, #640]
    7360:	ldrh	w9, [x9, #28]
    7364:	madd	x11, x8, x18, x14
    7368:	madd	x13, x8, x1, x14
    736c:	cmp	w12, #0x8
    7370:	add	x11, x11, x9
    7374:	add	x13, x13, x9, lsl #2
    7378:	ldrb	w9, [x11, x0]
    737c:	ldr	w11, [x13, x2]
    7380:	b.lt	73c0 <BZ2_compressBlock@@Base+0x2e5c>  // b.tstop
    7384:	ldr	w13, [x21]
    7388:	ldr	x12, [x25]
    738c:	lsr	w10, w10, #24
    7390:	strb	w10, [x12, w13, sxtw]
    7394:	ldr	w10, [x21]
    7398:	add	w13, w10, #0x1
    739c:	str	w13, [x21]
    73a0:	ldr	w10, [x24]
    73a4:	lsl	w10, w10, #8
    73a8:	str	w10, [x24]
    73ac:	ldr	w14, [x22]
    73b0:	sub	w12, w14, #0x8
    73b4:	cmp	w14, #0xf
    73b8:	str	w12, [x22]
    73bc:	b.gt	7388 <BZ2_compressBlock@@Base+0x2e24>
    73c0:	add	w13, w12, w9
    73c4:	ldr	x14, [x29, #8]
    73c8:	neg	w12, w13
    73cc:	lsl	w11, w11, w12
    73d0:	orr	w10, w11, w10
    73d4:	add	x9, x16, x27, lsl #1
    73d8:	str	w13, [x14, #644]
    73dc:	str	w10, [x14, #640]
    73e0:	ldrh	w11, [x9, #30]
    73e4:	madd	x12, x8, x18, x14
    73e8:	madd	x14, x8, x1, x14
    73ec:	cmp	w13, #0x8
    73f0:	add	x12, x12, x11
    73f4:	add	x11, x14, x11, lsl #2
    73f8:	ldrb	w12, [x12, x0]
    73fc:	ldr	w11, [x11, x2]
    7400:	b.lt	7440 <BZ2_compressBlock@@Base+0x2edc>  // b.tstop
    7404:	ldr	w14, [x21]
    7408:	ldr	x13, [x25]
    740c:	lsr	w10, w10, #24
    7410:	strb	w10, [x13, w14, sxtw]
    7414:	ldr	w10, [x21]
    7418:	add	w14, w10, #0x1
    741c:	str	w14, [x21]
    7420:	ldr	w10, [x24]
    7424:	lsl	w10, w10, #8
    7428:	str	w10, [x24]
    742c:	ldr	w15, [x22]
    7430:	sub	w13, w15, #0x8
    7434:	cmp	w15, #0xf
    7438:	str	w13, [x22]
    743c:	b.gt	7408 <BZ2_compressBlock@@Base+0x2ea4>
    7440:	add	w12, w13, w12
    7444:	ldr	x14, [x29, #8]
    7448:	neg	w13, w12
    744c:	lsl	w11, w11, w13
    7450:	orr	w10, w11, w10
    7454:	str	w12, [x14, #644]
    7458:	str	w10, [x14, #640]
    745c:	ldrh	w9, [x9, #32]
    7460:	madd	x11, x8, x18, x14
    7464:	madd	x13, x8, x1, x14
    7468:	cmp	w12, #0x8
    746c:	add	x11, x11, x9
    7470:	add	x13, x13, x9, lsl #2
    7474:	ldrb	w9, [x11, x0]
    7478:	ldr	w11, [x13, x2]
    747c:	b.lt	74bc <BZ2_compressBlock@@Base+0x2f58>  // b.tstop
    7480:	ldr	w13, [x21]
    7484:	ldr	x12, [x25]
    7488:	lsr	w10, w10, #24
    748c:	strb	w10, [x12, w13, sxtw]
    7490:	ldr	w10, [x21]
    7494:	add	w13, w10, #0x1
    7498:	str	w13, [x21]
    749c:	ldr	w10, [x24]
    74a0:	lsl	w10, w10, #8
    74a4:	str	w10, [x24]
    74a8:	ldr	w14, [x22]
    74ac:	sub	w12, w14, #0x8
    74b0:	cmp	w14, #0xf
    74b4:	str	w12, [x22]
    74b8:	b.gt	7484 <BZ2_compressBlock@@Base+0x2f20>
    74bc:	add	w13, w12, w9
    74c0:	ldr	x14, [x29, #8]
    74c4:	neg	w12, w13
    74c8:	lsl	w11, w11, w12
    74cc:	orr	w10, w11, w10
    74d0:	add	x9, x16, x27, lsl #1
    74d4:	str	w13, [x14, #644]
    74d8:	str	w10, [x14, #640]
    74dc:	ldrh	w11, [x9, #34]
    74e0:	madd	x12, x8, x18, x14
    74e4:	madd	x14, x8, x1, x14
    74e8:	cmp	w13, #0x8
    74ec:	add	x12, x12, x11
    74f0:	add	x11, x14, x11, lsl #2
    74f4:	ldrb	w12, [x12, x0]
    74f8:	ldr	w11, [x11, x2]
    74fc:	b.lt	753c <BZ2_compressBlock@@Base+0x2fd8>  // b.tstop
    7500:	ldr	w14, [x21]
    7504:	ldr	x13, [x25]
    7508:	lsr	w10, w10, #24
    750c:	strb	w10, [x13, w14, sxtw]
    7510:	ldr	w10, [x21]
    7514:	add	w14, w10, #0x1
    7518:	str	w14, [x21]
    751c:	ldr	w10, [x24]
    7520:	lsl	w10, w10, #8
    7524:	str	w10, [x24]
    7528:	ldr	w15, [x22]
    752c:	sub	w13, w15, #0x8
    7530:	cmp	w15, #0xf
    7534:	str	w13, [x22]
    7538:	b.gt	7504 <BZ2_compressBlock@@Base+0x2fa0>
    753c:	add	w12, w13, w12
    7540:	ldr	x14, [x29, #8]
    7544:	neg	w13, w12
    7548:	lsl	w11, w11, w13
    754c:	orr	w10, w11, w10
    7550:	str	w12, [x14, #644]
    7554:	str	w10, [x14, #640]
    7558:	ldrh	w9, [x9, #36]
    755c:	madd	x11, x8, x18, x14
    7560:	madd	x13, x8, x1, x14
    7564:	cmp	w12, #0x8
    7568:	add	x11, x11, x9
    756c:	add	x13, x13, x9, lsl #2
    7570:	ldrb	w9, [x11, x0]
    7574:	ldr	w11, [x13, x2]
    7578:	b.lt	75b8 <BZ2_compressBlock@@Base+0x3054>  // b.tstop
    757c:	ldr	w13, [x21]
    7580:	ldr	x12, [x25]
    7584:	lsr	w10, w10, #24
    7588:	strb	w10, [x12, w13, sxtw]
    758c:	ldr	w10, [x21]
    7590:	add	w13, w10, #0x1
    7594:	str	w13, [x21]
    7598:	ldr	w10, [x24]
    759c:	lsl	w10, w10, #8
    75a0:	str	w10, [x24]
    75a4:	ldr	w14, [x22]
    75a8:	sub	w12, w14, #0x8
    75ac:	cmp	w14, #0xf
    75b0:	str	w12, [x22]
    75b4:	b.gt	7580 <BZ2_compressBlock@@Base+0x301c>
    75b8:	add	w13, w12, w9
    75bc:	ldr	x14, [x29, #8]
    75c0:	neg	w12, w13
    75c4:	lsl	w11, w11, w12
    75c8:	orr	w10, w11, w10
    75cc:	add	x9, x16, x27, lsl #1
    75d0:	str	w13, [x14, #644]
    75d4:	str	w10, [x14, #640]
    75d8:	ldrh	w11, [x9, #38]
    75dc:	madd	x12, x8, x18, x14
    75e0:	madd	x14, x8, x1, x14
    75e4:	cmp	w13, #0x8
    75e8:	add	x12, x12, x11
    75ec:	add	x11, x14, x11, lsl #2
    75f0:	ldrb	w12, [x12, x0]
    75f4:	ldr	w11, [x11, x2]
    75f8:	b.lt	7638 <BZ2_compressBlock@@Base+0x30d4>  // b.tstop
    75fc:	ldr	w14, [x21]
    7600:	ldr	x13, [x25]
    7604:	lsr	w10, w10, #24
    7608:	strb	w10, [x13, w14, sxtw]
    760c:	ldr	w10, [x21]
    7610:	add	w14, w10, #0x1
    7614:	str	w14, [x21]
    7618:	ldr	w10, [x24]
    761c:	lsl	w10, w10, #8
    7620:	str	w10, [x24]
    7624:	ldr	w15, [x22]
    7628:	sub	w13, w15, #0x8
    762c:	cmp	w15, #0xf
    7630:	str	w13, [x22]
    7634:	b.gt	7600 <BZ2_compressBlock@@Base+0x309c>
    7638:	add	w12, w13, w12
    763c:	ldr	x14, [x29, #8]
    7640:	neg	w13, w12
    7644:	lsl	w11, w11, w13
    7648:	orr	w10, w11, w10
    764c:	str	w12, [x14, #644]
    7650:	str	w10, [x14, #640]
    7654:	ldrh	w9, [x9, #40]
    7658:	madd	x11, x8, x18, x14
    765c:	madd	x13, x8, x1, x14
    7660:	cmp	w12, #0x8
    7664:	add	x11, x11, x9
    7668:	add	x13, x13, x9, lsl #2
    766c:	ldrb	w9, [x11, x0]
    7670:	ldr	w11, [x13, x2]
    7674:	b.lt	76b4 <BZ2_compressBlock@@Base+0x3150>  // b.tstop
    7678:	ldr	w13, [x21]
    767c:	ldr	x12, [x25]
    7680:	lsr	w10, w10, #24
    7684:	strb	w10, [x12, w13, sxtw]
    7688:	ldr	w10, [x21]
    768c:	add	w13, w10, #0x1
    7690:	str	w13, [x21]
    7694:	ldr	w10, [x24]
    7698:	lsl	w10, w10, #8
    769c:	str	w10, [x24]
    76a0:	ldr	w14, [x22]
    76a4:	sub	w12, w14, #0x8
    76a8:	cmp	w14, #0xf
    76ac:	str	w12, [x22]
    76b0:	b.gt	767c <BZ2_compressBlock@@Base+0x3118>
    76b4:	add	w13, w12, w9
    76b8:	ldr	x14, [x29, #8]
    76bc:	neg	w12, w13
    76c0:	lsl	w11, w11, w12
    76c4:	orr	w10, w11, w10
    76c8:	add	x9, x16, x27, lsl #1
    76cc:	str	w13, [x14, #644]
    76d0:	str	w10, [x14, #640]
    76d4:	ldrh	w11, [x9, #42]
    76d8:	madd	x12, x8, x18, x14
    76dc:	madd	x14, x8, x1, x14
    76e0:	cmp	w13, #0x8
    76e4:	add	x12, x12, x11
    76e8:	add	x11, x14, x11, lsl #2
    76ec:	ldrb	w12, [x12, x0]
    76f0:	ldr	w11, [x11, x2]
    76f4:	b.lt	7734 <BZ2_compressBlock@@Base+0x31d0>  // b.tstop
    76f8:	ldr	w14, [x21]
    76fc:	ldr	x13, [x25]
    7700:	lsr	w10, w10, #24
    7704:	strb	w10, [x13, w14, sxtw]
    7708:	ldr	w10, [x21]
    770c:	add	w14, w10, #0x1
    7710:	str	w14, [x21]
    7714:	ldr	w10, [x24]
    7718:	lsl	w10, w10, #8
    771c:	str	w10, [x24]
    7720:	ldr	w15, [x22]
    7724:	sub	w13, w15, #0x8
    7728:	cmp	w15, #0xf
    772c:	str	w13, [x22]
    7730:	b.gt	76fc <BZ2_compressBlock@@Base+0x3198>
    7734:	add	w12, w13, w12
    7738:	ldr	x14, [x29, #8]
    773c:	neg	w13, w12
    7740:	lsl	w11, w11, w13
    7744:	orr	w10, w11, w10
    7748:	str	w12, [x14, #644]
    774c:	str	w10, [x14, #640]
    7750:	ldrh	w9, [x9, #44]
    7754:	madd	x11, x8, x18, x14
    7758:	madd	x13, x8, x1, x14
    775c:	cmp	w12, #0x8
    7760:	add	x11, x11, x9
    7764:	add	x13, x13, x9, lsl #2
    7768:	ldrb	w9, [x11, x0]
    776c:	ldr	w11, [x13, x2]
    7770:	b.lt	77b0 <BZ2_compressBlock@@Base+0x324c>  // b.tstop
    7774:	ldr	w13, [x21]
    7778:	ldr	x12, [x25]
    777c:	lsr	w10, w10, #24
    7780:	strb	w10, [x12, w13, sxtw]
    7784:	ldr	w10, [x21]
    7788:	add	w13, w10, #0x1
    778c:	str	w13, [x21]
    7790:	ldr	w10, [x24]
    7794:	lsl	w10, w10, #8
    7798:	str	w10, [x24]
    779c:	ldr	w14, [x22]
    77a0:	sub	w12, w14, #0x8
    77a4:	cmp	w14, #0xf
    77a8:	str	w12, [x22]
    77ac:	b.gt	7778 <BZ2_compressBlock@@Base+0x3214>
    77b0:	add	w13, w12, w9
    77b4:	ldr	x14, [x29, #8]
    77b8:	neg	w12, w13
    77bc:	lsl	w11, w11, w12
    77c0:	orr	w10, w11, w10
    77c4:	add	x9, x16, x27, lsl #1
    77c8:	str	w13, [x14, #644]
    77cc:	str	w10, [x14, #640]
    77d0:	ldrh	w11, [x9, #46]
    77d4:	madd	x12, x8, x18, x14
    77d8:	madd	x14, x8, x1, x14
    77dc:	cmp	w13, #0x8
    77e0:	add	x12, x12, x11
    77e4:	add	x11, x14, x11, lsl #2
    77e8:	ldrb	w12, [x12, x0]
    77ec:	ldr	w11, [x11, x2]
    77f0:	b.lt	7830 <BZ2_compressBlock@@Base+0x32cc>  // b.tstop
    77f4:	ldr	w14, [x21]
    77f8:	ldr	x13, [x25]
    77fc:	lsr	w10, w10, #24
    7800:	strb	w10, [x13, w14, sxtw]
    7804:	ldr	w10, [x21]
    7808:	add	w14, w10, #0x1
    780c:	str	w14, [x21]
    7810:	ldr	w10, [x24]
    7814:	lsl	w10, w10, #8
    7818:	str	w10, [x24]
    781c:	ldr	w15, [x22]
    7820:	sub	w13, w15, #0x8
    7824:	cmp	w15, #0xf
    7828:	str	w13, [x22]
    782c:	b.gt	77f8 <BZ2_compressBlock@@Base+0x3294>
    7830:	add	w12, w13, w12
    7834:	ldr	x14, [x29, #8]
    7838:	neg	w13, w12
    783c:	lsl	w11, w11, w13
    7840:	orr	w10, w11, w10
    7844:	str	w12, [x14, #644]
    7848:	str	w10, [x14, #640]
    784c:	ldrh	w9, [x9, #48]
    7850:	madd	x11, x8, x18, x14
    7854:	madd	x13, x8, x1, x14
    7858:	cmp	w12, #0x8
    785c:	add	x11, x11, x9
    7860:	add	x13, x13, x9, lsl #2
    7864:	ldrb	w9, [x11, x0]
    7868:	ldr	w11, [x13, x2]
    786c:	b.lt	78ac <BZ2_compressBlock@@Base+0x3348>  // b.tstop
    7870:	ldr	w13, [x21]
    7874:	ldr	x12, [x25]
    7878:	lsr	w10, w10, #24
    787c:	strb	w10, [x12, w13, sxtw]
    7880:	ldr	w10, [x21]
    7884:	add	w13, w10, #0x1
    7888:	str	w13, [x21]
    788c:	ldr	w10, [x24]
    7890:	lsl	w10, w10, #8
    7894:	str	w10, [x24]
    7898:	ldr	w14, [x22]
    789c:	sub	w12, w14, #0x8
    78a0:	cmp	w14, #0xf
    78a4:	str	w12, [x22]
    78a8:	b.gt	7874 <BZ2_compressBlock@@Base+0x3310>
    78ac:	add	w13, w12, w9
    78b0:	ldr	x14, [x29, #8]
    78b4:	neg	w12, w13
    78b8:	lsl	w11, w11, w12
    78bc:	orr	w10, w11, w10
    78c0:	add	x9, x16, x27, lsl #1
    78c4:	str	w13, [x14, #644]
    78c8:	str	w10, [x14, #640]
    78cc:	ldrh	w11, [x9, #50]
    78d0:	madd	x12, x8, x18, x14
    78d4:	madd	x14, x8, x1, x14
    78d8:	cmp	w13, #0x8
    78dc:	add	x12, x12, x11
    78e0:	add	x11, x14, x11, lsl #2
    78e4:	ldrb	w12, [x12, x0]
    78e8:	ldr	w11, [x11, x2]
    78ec:	b.lt	792c <BZ2_compressBlock@@Base+0x33c8>  // b.tstop
    78f0:	ldr	w14, [x21]
    78f4:	ldr	x13, [x25]
    78f8:	lsr	w10, w10, #24
    78fc:	strb	w10, [x13, w14, sxtw]
    7900:	ldr	w10, [x21]
    7904:	add	w14, w10, #0x1
    7908:	str	w14, [x21]
    790c:	ldr	w10, [x24]
    7910:	lsl	w10, w10, #8
    7914:	str	w10, [x24]
    7918:	ldr	w15, [x22]
    791c:	sub	w13, w15, #0x8
    7920:	cmp	w15, #0xf
    7924:	str	w13, [x22]
    7928:	b.gt	78f4 <BZ2_compressBlock@@Base+0x3390>
    792c:	add	w12, w13, w12
    7930:	ldr	x14, [x29, #8]
    7934:	neg	w13, w12
    7938:	lsl	w11, w11, w13
    793c:	orr	w10, w11, w10
    7940:	str	w12, [x14, #644]
    7944:	str	w10, [x14, #640]
    7948:	ldrh	w9, [x9, #52]
    794c:	madd	x11, x8, x18, x14
    7950:	madd	x13, x8, x1, x14
    7954:	cmp	w12, #0x8
    7958:	add	x11, x11, x9
    795c:	add	x13, x13, x9, lsl #2
    7960:	ldrb	w9, [x11, x0]
    7964:	ldr	w11, [x13, x2]
    7968:	b.lt	79a8 <BZ2_compressBlock@@Base+0x3444>  // b.tstop
    796c:	ldr	w13, [x21]
    7970:	ldr	x12, [x25]
    7974:	lsr	w10, w10, #24
    7978:	strb	w10, [x12, w13, sxtw]
    797c:	ldr	w10, [x21]
    7980:	add	w13, w10, #0x1
    7984:	str	w13, [x21]
    7988:	ldr	w10, [x24]
    798c:	lsl	w10, w10, #8
    7990:	str	w10, [x24]
    7994:	ldr	w14, [x22]
    7998:	sub	w12, w14, #0x8
    799c:	cmp	w14, #0xf
    79a0:	str	w12, [x22]
    79a4:	b.gt	7970 <BZ2_compressBlock@@Base+0x340c>
    79a8:	add	w13, w12, w9
    79ac:	ldr	x14, [x29, #8]
    79b0:	neg	w12, w13
    79b4:	lsl	w11, w11, w12
    79b8:	orr	w10, w11, w10
    79bc:	add	x9, x16, x27, lsl #1
    79c0:	str	w13, [x14, #644]
    79c4:	str	w10, [x14, #640]
    79c8:	ldrh	w11, [x9, #54]
    79cc:	madd	x12, x8, x18, x14
    79d0:	madd	x14, x8, x1, x14
    79d4:	cmp	w13, #0x8
    79d8:	add	x12, x12, x11
    79dc:	add	x11, x14, x11, lsl #2
    79e0:	ldrb	w12, [x12, x0]
    79e4:	ldr	w11, [x11, x2]
    79e8:	b.lt	7a28 <BZ2_compressBlock@@Base+0x34c4>  // b.tstop
    79ec:	ldr	w14, [x21]
    79f0:	ldr	x13, [x25]
    79f4:	lsr	w10, w10, #24
    79f8:	strb	w10, [x13, w14, sxtw]
    79fc:	ldr	w10, [x21]
    7a00:	add	w14, w10, #0x1
    7a04:	str	w14, [x21]
    7a08:	ldr	w10, [x24]
    7a0c:	lsl	w10, w10, #8
    7a10:	str	w10, [x24]
    7a14:	ldr	w15, [x22]
    7a18:	sub	w13, w15, #0x8
    7a1c:	cmp	w15, #0xf
    7a20:	str	w13, [x22]
    7a24:	b.gt	79f0 <BZ2_compressBlock@@Base+0x348c>
    7a28:	add	w12, w13, w12
    7a2c:	ldr	x14, [x29, #8]
    7a30:	neg	w13, w12
    7a34:	lsl	w11, w11, w13
    7a38:	orr	w10, w11, w10
    7a3c:	str	w12, [x14, #644]
    7a40:	str	w10, [x14, #640]
    7a44:	ldrh	w9, [x9, #56]
    7a48:	madd	x11, x8, x18, x14
    7a4c:	madd	x13, x8, x1, x14
    7a50:	cmp	w12, #0x8
    7a54:	add	x11, x11, x9
    7a58:	add	x13, x13, x9, lsl #2
    7a5c:	ldrb	w9, [x11, x0]
    7a60:	ldr	w11, [x13, x2]
    7a64:	b.lt	7aa4 <BZ2_compressBlock@@Base+0x3540>  // b.tstop
    7a68:	ldr	w13, [x21]
    7a6c:	ldr	x12, [x25]
    7a70:	lsr	w10, w10, #24
    7a74:	strb	w10, [x12, w13, sxtw]
    7a78:	ldr	w10, [x21]
    7a7c:	add	w13, w10, #0x1
    7a80:	str	w13, [x21]
    7a84:	ldr	w10, [x24]
    7a88:	lsl	w10, w10, #8
    7a8c:	str	w10, [x24]
    7a90:	ldr	w14, [x22]
    7a94:	sub	w12, w14, #0x8
    7a98:	cmp	w14, #0xf
    7a9c:	str	w12, [x22]
    7aa0:	b.gt	7a6c <BZ2_compressBlock@@Base+0x3508>
    7aa4:	add	w13, w12, w9
    7aa8:	ldr	x14, [x29, #8]
    7aac:	neg	w12, w13
    7ab0:	lsl	w11, w11, w12
    7ab4:	orr	w10, w11, w10
    7ab8:	add	x9, x16, x27, lsl #1
    7abc:	str	w13, [x14, #644]
    7ac0:	str	w10, [x14, #640]
    7ac4:	ldrh	w11, [x9, #58]
    7ac8:	madd	x12, x8, x18, x14
    7acc:	madd	x14, x8, x1, x14
    7ad0:	cmp	w13, #0x8
    7ad4:	add	x12, x12, x11
    7ad8:	add	x11, x14, x11, lsl #2
    7adc:	ldrb	w12, [x12, x0]
    7ae0:	ldr	w11, [x11, x2]
    7ae4:	b.lt	7b24 <BZ2_compressBlock@@Base+0x35c0>  // b.tstop
    7ae8:	ldr	w14, [x21]
    7aec:	ldr	x13, [x25]
    7af0:	lsr	w10, w10, #24
    7af4:	strb	w10, [x13, w14, sxtw]
    7af8:	ldr	w10, [x21]
    7afc:	add	w14, w10, #0x1
    7b00:	str	w14, [x21]
    7b04:	ldr	w10, [x24]
    7b08:	lsl	w10, w10, #8
    7b0c:	str	w10, [x24]
    7b10:	ldr	w15, [x22]
    7b14:	sub	w13, w15, #0x8
    7b18:	cmp	w15, #0xf
    7b1c:	str	w13, [x22]
    7b20:	b.gt	7aec <BZ2_compressBlock@@Base+0x3588>
    7b24:	add	w12, w13, w12
    7b28:	ldr	x14, [x29, #8]
    7b2c:	neg	w13, w12
    7b30:	lsl	w11, w11, w13
    7b34:	orr	w10, w11, w10
    7b38:	str	w12, [x14, #644]
    7b3c:	str	w10, [x14, #640]
    7b40:	ldrh	w9, [x9, #60]
    7b44:	madd	x11, x8, x18, x14
    7b48:	madd	x13, x8, x1, x14
    7b4c:	cmp	w12, #0x8
    7b50:	add	x11, x11, x9
    7b54:	add	x13, x13, x9, lsl #2
    7b58:	ldrb	w9, [x11, x0]
    7b5c:	ldr	w11, [x13, x2]
    7b60:	b.lt	7ba0 <BZ2_compressBlock@@Base+0x363c>  // b.tstop
    7b64:	ldr	w13, [x21]
    7b68:	ldr	x12, [x25]
    7b6c:	lsr	w10, w10, #24
    7b70:	strb	w10, [x12, w13, sxtw]
    7b74:	ldr	w10, [x21]
    7b78:	add	w13, w10, #0x1
    7b7c:	str	w13, [x21]
    7b80:	ldr	w10, [x24]
    7b84:	lsl	w10, w10, #8
    7b88:	str	w10, [x24]
    7b8c:	ldr	w14, [x22]
    7b90:	sub	w12, w14, #0x8
    7b94:	cmp	w14, #0xf
    7b98:	str	w12, [x22]
    7b9c:	b.gt	7b68 <BZ2_compressBlock@@Base+0x3604>
    7ba0:	add	w13, w12, w9
    7ba4:	ldr	x14, [x29, #8]
    7ba8:	neg	w12, w13
    7bac:	lsl	w11, w11, w12
    7bb0:	orr	w10, w11, w10
    7bb4:	add	x9, x16, x27, lsl #1
    7bb8:	str	w13, [x14, #644]
    7bbc:	str	w10, [x14, #640]
    7bc0:	ldrh	w11, [x9, #62]
    7bc4:	madd	x12, x8, x18, x14
    7bc8:	madd	x14, x8, x1, x14
    7bcc:	cmp	w13, #0x8
    7bd0:	add	x12, x12, x11
    7bd4:	add	x11, x14, x11, lsl #2
    7bd8:	ldrb	w12, [x12, x0]
    7bdc:	ldr	w11, [x11, x2]
    7be0:	b.lt	7c20 <BZ2_compressBlock@@Base+0x36bc>  // b.tstop
    7be4:	ldr	w14, [x21]
    7be8:	ldr	x13, [x25]
    7bec:	lsr	w10, w10, #24
    7bf0:	strb	w10, [x13, w14, sxtw]
    7bf4:	ldr	w10, [x21]
    7bf8:	add	w14, w10, #0x1
    7bfc:	str	w14, [x21]
    7c00:	ldr	w10, [x24]
    7c04:	lsl	w10, w10, #8
    7c08:	str	w10, [x24]
    7c0c:	ldr	w15, [x22]
    7c10:	sub	w13, w15, #0x8
    7c14:	cmp	w15, #0xf
    7c18:	str	w13, [x22]
    7c1c:	b.gt	7be8 <BZ2_compressBlock@@Base+0x3684>
    7c20:	add	w12, w13, w12
    7c24:	ldr	x14, [x29, #8]
    7c28:	neg	w13, w12
    7c2c:	lsl	w11, w11, w13
    7c30:	orr	w10, w11, w10
    7c34:	str	w12, [x14, #644]
    7c38:	str	w10, [x14, #640]
    7c3c:	ldrh	w9, [x9, #64]
    7c40:	madd	x11, x8, x18, x14
    7c44:	madd	x13, x8, x1, x14
    7c48:	cmp	w12, #0x8
    7c4c:	add	x11, x11, x9
    7c50:	add	x13, x13, x9, lsl #2
    7c54:	ldrb	w9, [x11, x0]
    7c58:	ldr	w11, [x13, x2]
    7c5c:	b.lt	7c9c <BZ2_compressBlock@@Base+0x3738>  // b.tstop
    7c60:	ldr	w13, [x21]
    7c64:	ldr	x12, [x25]
    7c68:	lsr	w10, w10, #24
    7c6c:	strb	w10, [x12, w13, sxtw]
    7c70:	ldr	w10, [x21]
    7c74:	add	w13, w10, #0x1
    7c78:	str	w13, [x21]
    7c7c:	ldr	w10, [x24]
    7c80:	lsl	w10, w10, #8
    7c84:	str	w10, [x24]
    7c88:	ldr	w14, [x22]
    7c8c:	sub	w12, w14, #0x8
    7c90:	cmp	w14, #0xf
    7c94:	str	w12, [x22]
    7c98:	b.gt	7c64 <BZ2_compressBlock@@Base+0x3700>
    7c9c:	add	w13, w12, w9
    7ca0:	ldr	x14, [x29, #8]
    7ca4:	neg	w12, w13
    7ca8:	lsl	w11, w11, w12
    7cac:	orr	w10, w11, w10
    7cb0:	add	x9, x16, x27, lsl #1
    7cb4:	str	w13, [x14, #644]
    7cb8:	str	w10, [x14, #640]
    7cbc:	ldrh	w11, [x9, #66]
    7cc0:	madd	x12, x8, x18, x14
    7cc4:	madd	x14, x8, x1, x14
    7cc8:	cmp	w13, #0x8
    7ccc:	add	x12, x12, x11
    7cd0:	add	x11, x14, x11, lsl #2
    7cd4:	ldrb	w12, [x12, x0]
    7cd8:	ldr	w11, [x11, x2]
    7cdc:	b.lt	7d1c <BZ2_compressBlock@@Base+0x37b8>  // b.tstop
    7ce0:	ldr	w14, [x21]
    7ce4:	ldr	x13, [x25]
    7ce8:	lsr	w10, w10, #24
    7cec:	strb	w10, [x13, w14, sxtw]
    7cf0:	ldr	w10, [x21]
    7cf4:	add	w14, w10, #0x1
    7cf8:	str	w14, [x21]
    7cfc:	ldr	w10, [x24]
    7d00:	lsl	w10, w10, #8
    7d04:	str	w10, [x24]
    7d08:	ldr	w15, [x22]
    7d0c:	sub	w13, w15, #0x8
    7d10:	cmp	w15, #0xf
    7d14:	str	w13, [x22]
    7d18:	b.gt	7ce4 <BZ2_compressBlock@@Base+0x3780>
    7d1c:	add	w12, w13, w12
    7d20:	ldr	x14, [x29, #8]
    7d24:	neg	w13, w12
    7d28:	lsl	w11, w11, w13
    7d2c:	orr	w10, w11, w10
    7d30:	str	w12, [x14, #644]
    7d34:	str	w10, [x14, #640]
    7d38:	ldrh	w9, [x9, #68]
    7d3c:	madd	x11, x8, x18, x14
    7d40:	madd	x13, x8, x1, x14
    7d44:	cmp	w12, #0x8
    7d48:	add	x11, x11, x9
    7d4c:	add	x13, x13, x9, lsl #2
    7d50:	ldrb	w9, [x11, x0]
    7d54:	ldr	w11, [x13, x2]
    7d58:	b.lt	7d98 <BZ2_compressBlock@@Base+0x3834>  // b.tstop
    7d5c:	ldr	w13, [x21]
    7d60:	ldr	x12, [x25]
    7d64:	lsr	w10, w10, #24
    7d68:	strb	w10, [x12, w13, sxtw]
    7d6c:	ldr	w10, [x21]
    7d70:	add	w13, w10, #0x1
    7d74:	str	w13, [x21]
    7d78:	ldr	w10, [x24]
    7d7c:	lsl	w10, w10, #8
    7d80:	str	w10, [x24]
    7d84:	ldr	w14, [x22]
    7d88:	sub	w12, w14, #0x8
    7d8c:	cmp	w14, #0xf
    7d90:	str	w12, [x22]
    7d94:	b.gt	7d60 <BZ2_compressBlock@@Base+0x37fc>
    7d98:	add	w13, w12, w9
    7d9c:	ldr	x14, [x29, #8]
    7da0:	neg	w12, w13
    7da4:	lsl	w11, w11, w12
    7da8:	orr	w10, w11, w10
    7dac:	add	x9, x16, x27, lsl #1
    7db0:	str	w13, [x14, #644]
    7db4:	str	w10, [x14, #640]
    7db8:	ldrh	w11, [x9, #70]
    7dbc:	madd	x12, x8, x18, x14
    7dc0:	madd	x14, x8, x1, x14
    7dc4:	cmp	w13, #0x8
    7dc8:	add	x12, x12, x11
    7dcc:	add	x11, x14, x11, lsl #2
    7dd0:	ldrb	w12, [x12, x0]
    7dd4:	ldr	w11, [x11, x2]
    7dd8:	b.lt	7e18 <BZ2_compressBlock@@Base+0x38b4>  // b.tstop
    7ddc:	ldr	w14, [x21]
    7de0:	ldr	x13, [x25]
    7de4:	lsr	w10, w10, #24
    7de8:	strb	w10, [x13, w14, sxtw]
    7dec:	ldr	w10, [x21]
    7df0:	add	w14, w10, #0x1
    7df4:	str	w14, [x21]
    7df8:	ldr	w10, [x24]
    7dfc:	lsl	w10, w10, #8
    7e00:	str	w10, [x24]
    7e04:	ldr	w15, [x22]
    7e08:	sub	w13, w15, #0x8
    7e0c:	cmp	w15, #0xf
    7e10:	str	w13, [x22]
    7e14:	b.gt	7de0 <BZ2_compressBlock@@Base+0x387c>
    7e18:	add	w12, w13, w12
    7e1c:	ldr	x14, [x29, #8]
    7e20:	neg	w13, w12
    7e24:	lsl	w11, w11, w13
    7e28:	orr	w10, w11, w10
    7e2c:	str	w12, [x14, #644]
    7e30:	str	w10, [x14, #640]
    7e34:	ldrh	w9, [x9, #72]
    7e38:	madd	x11, x8, x18, x14
    7e3c:	madd	x13, x8, x1, x14
    7e40:	cmp	w12, #0x8
    7e44:	add	x11, x11, x9
    7e48:	add	x13, x13, x9, lsl #2
    7e4c:	ldrb	w9, [x11, x0]
    7e50:	ldr	w11, [x13, x2]
    7e54:	b.lt	7e94 <BZ2_compressBlock@@Base+0x3930>  // b.tstop
    7e58:	ldr	w13, [x21]
    7e5c:	ldr	x12, [x25]
    7e60:	lsr	w10, w10, #24
    7e64:	strb	w10, [x12, w13, sxtw]
    7e68:	ldr	w10, [x21]
    7e6c:	add	w13, w10, #0x1
    7e70:	str	w13, [x21]
    7e74:	ldr	w10, [x24]
    7e78:	lsl	w10, w10, #8
    7e7c:	str	w10, [x24]
    7e80:	ldr	w14, [x22]
    7e84:	sub	w12, w14, #0x8
    7e88:	cmp	w14, #0xf
    7e8c:	str	w12, [x22]
    7e90:	b.gt	7e5c <BZ2_compressBlock@@Base+0x38f8>
    7e94:	add	w13, w12, w9
    7e98:	ldr	x14, [x29, #8]
    7e9c:	neg	w12, w13
    7ea0:	lsl	w11, w11, w12
    7ea4:	orr	w10, w11, w10
    7ea8:	add	x9, x16, x27, lsl #1
    7eac:	str	w13, [x14, #644]
    7eb0:	str	w10, [x14, #640]
    7eb4:	ldrh	w11, [x9, #74]
    7eb8:	madd	x12, x8, x18, x14
    7ebc:	madd	x14, x8, x1, x14
    7ec0:	cmp	w13, #0x8
    7ec4:	add	x12, x12, x11
    7ec8:	add	x11, x14, x11, lsl #2
    7ecc:	ldrb	w12, [x12, x0]
    7ed0:	ldr	w11, [x11, x2]
    7ed4:	b.lt	7f14 <BZ2_compressBlock@@Base+0x39b0>  // b.tstop
    7ed8:	ldr	w14, [x21]
    7edc:	ldr	x13, [x25]
    7ee0:	lsr	w10, w10, #24
    7ee4:	strb	w10, [x13, w14, sxtw]
    7ee8:	ldr	w10, [x21]
    7eec:	add	w14, w10, #0x1
    7ef0:	str	w14, [x21]
    7ef4:	ldr	w10, [x24]
    7ef8:	lsl	w10, w10, #8
    7efc:	str	w10, [x24]
    7f00:	ldr	w15, [x22]
    7f04:	sub	w13, w15, #0x8
    7f08:	cmp	w15, #0xf
    7f0c:	str	w13, [x22]
    7f10:	b.gt	7edc <BZ2_compressBlock@@Base+0x3978>
    7f14:	add	w12, w13, w12
    7f18:	ldr	x14, [x29, #8]
    7f1c:	neg	w13, w12
    7f20:	lsl	w11, w11, w13
    7f24:	orr	w10, w11, w10
    7f28:	str	w12, [x14, #644]
    7f2c:	str	w10, [x14, #640]
    7f30:	ldrh	w9, [x9, #76]
    7f34:	madd	x11, x8, x18, x14
    7f38:	madd	x13, x8, x1, x14
    7f3c:	cmp	w12, #0x8
    7f40:	add	x11, x11, x9
    7f44:	add	x13, x13, x9, lsl #2
    7f48:	ldrb	w9, [x11, x0]
    7f4c:	ldr	w11, [x13, x2]
    7f50:	b.lt	7f90 <BZ2_compressBlock@@Base+0x3a2c>  // b.tstop
    7f54:	ldr	w13, [x21]
    7f58:	ldr	x12, [x25]
    7f5c:	lsr	w10, w10, #24
    7f60:	strb	w10, [x12, w13, sxtw]
    7f64:	ldr	w10, [x21]
    7f68:	add	w13, w10, #0x1
    7f6c:	str	w13, [x21]
    7f70:	ldr	w10, [x24]
    7f74:	lsl	w10, w10, #8
    7f78:	str	w10, [x24]
    7f7c:	ldr	w14, [x22]
    7f80:	sub	w12, w14, #0x8
    7f84:	cmp	w14, #0xf
    7f88:	str	w12, [x22]
    7f8c:	b.gt	7f58 <BZ2_compressBlock@@Base+0x39f4>
    7f90:	add	w13, w12, w9
    7f94:	ldr	x14, [x29, #8]
    7f98:	neg	w12, w13
    7f9c:	lsl	w11, w11, w12
    7fa0:	orr	w10, w11, w10
    7fa4:	add	x9, x16, x27, lsl #1
    7fa8:	str	w13, [x14, #644]
    7fac:	str	w10, [x14, #640]
    7fb0:	ldrh	w11, [x9, #78]
    7fb4:	madd	x12, x8, x18, x14
    7fb8:	madd	x14, x8, x1, x14
    7fbc:	cmp	w13, #0x8
    7fc0:	add	x12, x12, x11
    7fc4:	add	x11, x14, x11, lsl #2
    7fc8:	ldrb	w12, [x12, x0]
    7fcc:	ldr	w11, [x11, x2]
    7fd0:	b.lt	8010 <BZ2_compressBlock@@Base+0x3aac>  // b.tstop
    7fd4:	ldr	w14, [x21]
    7fd8:	ldr	x13, [x25]
    7fdc:	lsr	w10, w10, #24
    7fe0:	strb	w10, [x13, w14, sxtw]
    7fe4:	ldr	w10, [x21]
    7fe8:	add	w14, w10, #0x1
    7fec:	str	w14, [x21]
    7ff0:	ldr	w10, [x24]
    7ff4:	lsl	w10, w10, #8
    7ff8:	str	w10, [x24]
    7ffc:	ldr	w15, [x22]
    8000:	sub	w13, w15, #0x8
    8004:	cmp	w15, #0xf
    8008:	str	w13, [x22]
    800c:	b.gt	7fd8 <BZ2_compressBlock@@Base+0x3a74>
    8010:	add	w12, w13, w12
    8014:	ldr	x14, [x29, #8]
    8018:	neg	w13, w12
    801c:	lsl	w11, w11, w13
    8020:	orr	w10, w11, w10
    8024:	str	w12, [x14, #644]
    8028:	str	w10, [x14, #640]
    802c:	ldrh	w9, [x9, #80]
    8030:	madd	x11, x8, x18, x14
    8034:	madd	x13, x8, x1, x14
    8038:	cmp	w12, #0x8
    803c:	add	x11, x11, x9
    8040:	add	x13, x13, x9, lsl #2
    8044:	ldrb	w9, [x11, x0]
    8048:	ldr	w11, [x13, x2]
    804c:	b.lt	808c <BZ2_compressBlock@@Base+0x3b28>  // b.tstop
    8050:	ldr	w13, [x21]
    8054:	ldr	x12, [x25]
    8058:	lsr	w10, w10, #24
    805c:	strb	w10, [x12, w13, sxtw]
    8060:	ldr	w10, [x21]
    8064:	add	w13, w10, #0x1
    8068:	str	w13, [x21]
    806c:	ldr	w10, [x24]
    8070:	lsl	w10, w10, #8
    8074:	str	w10, [x24]
    8078:	ldr	w14, [x22]
    807c:	sub	w12, w14, #0x8
    8080:	cmp	w14, #0xf
    8084:	str	w12, [x22]
    8088:	b.gt	8054 <BZ2_compressBlock@@Base+0x3af0>
    808c:	add	w13, w12, w9
    8090:	ldr	x14, [x29, #8]
    8094:	neg	w12, w13
    8098:	lsl	w11, w11, w12
    809c:	orr	w10, w11, w10
    80a0:	add	x9, x16, x27, lsl #1
    80a4:	str	w13, [x14, #644]
    80a8:	str	w10, [x14, #640]
    80ac:	ldrh	w11, [x9, #82]
    80b0:	madd	x12, x8, x18, x14
    80b4:	madd	x14, x8, x1, x14
    80b8:	cmp	w13, #0x8
    80bc:	add	x12, x12, x11
    80c0:	add	x11, x14, x11, lsl #2
    80c4:	ldrb	w12, [x12, x0]
    80c8:	ldr	w11, [x11, x2]
    80cc:	b.lt	810c <BZ2_compressBlock@@Base+0x3ba8>  // b.tstop
    80d0:	ldr	w14, [x21]
    80d4:	ldr	x13, [x25]
    80d8:	lsr	w10, w10, #24
    80dc:	strb	w10, [x13, w14, sxtw]
    80e0:	ldr	w10, [x21]
    80e4:	add	w14, w10, #0x1
    80e8:	str	w14, [x21]
    80ec:	ldr	w10, [x24]
    80f0:	lsl	w10, w10, #8
    80f4:	str	w10, [x24]
    80f8:	ldr	w15, [x22]
    80fc:	sub	w13, w15, #0x8
    8100:	cmp	w15, #0xf
    8104:	str	w13, [x22]
    8108:	b.gt	80d4 <BZ2_compressBlock@@Base+0x3b70>
    810c:	add	w12, w13, w12
    8110:	ldr	x14, [x29, #8]
    8114:	neg	w13, w12
    8118:	lsl	w11, w11, w13
    811c:	orr	w10, w11, w10
    8120:	str	w12, [x14, #644]
    8124:	str	w10, [x14, #640]
    8128:	ldrh	w9, [x9, #84]
    812c:	madd	x11, x8, x18, x14
    8130:	madd	x13, x8, x1, x14
    8134:	cmp	w12, #0x8
    8138:	add	x11, x11, x9
    813c:	add	x13, x13, x9, lsl #2
    8140:	ldrb	w9, [x11, x0]
    8144:	ldr	w11, [x13, x2]
    8148:	b.lt	8188 <BZ2_compressBlock@@Base+0x3c24>  // b.tstop
    814c:	ldr	w13, [x21]
    8150:	ldr	x12, [x25]
    8154:	lsr	w10, w10, #24
    8158:	strb	w10, [x12, w13, sxtw]
    815c:	ldr	w10, [x21]
    8160:	add	w13, w10, #0x1
    8164:	str	w13, [x21]
    8168:	ldr	w10, [x24]
    816c:	lsl	w10, w10, #8
    8170:	str	w10, [x24]
    8174:	ldr	w14, [x22]
    8178:	sub	w12, w14, #0x8
    817c:	cmp	w14, #0xf
    8180:	str	w12, [x22]
    8184:	b.gt	8150 <BZ2_compressBlock@@Base+0x3bec>
    8188:	add	w13, w12, w9
    818c:	ldr	x14, [x29, #8]
    8190:	neg	w12, w13
    8194:	lsl	w11, w11, w12
    8198:	orr	w10, w11, w10
    819c:	add	x9, x16, x27, lsl #1
    81a0:	str	w13, [x14, #644]
    81a4:	str	w10, [x14, #640]
    81a8:	ldrh	w11, [x9, #86]
    81ac:	madd	x12, x8, x18, x14
    81b0:	madd	x14, x8, x1, x14
    81b4:	cmp	w13, #0x8
    81b8:	add	x12, x12, x11
    81bc:	add	x11, x14, x11, lsl #2
    81c0:	ldrb	w12, [x12, x0]
    81c4:	ldr	w11, [x11, x2]
    81c8:	b.lt	8208 <BZ2_compressBlock@@Base+0x3ca4>  // b.tstop
    81cc:	ldr	w14, [x21]
    81d0:	ldr	x13, [x25]
    81d4:	lsr	w10, w10, #24
    81d8:	strb	w10, [x13, w14, sxtw]
    81dc:	ldr	w10, [x21]
    81e0:	add	w14, w10, #0x1
    81e4:	str	w14, [x21]
    81e8:	ldr	w10, [x24]
    81ec:	lsl	w10, w10, #8
    81f0:	str	w10, [x24]
    81f4:	ldr	w15, [x22]
    81f8:	sub	w13, w15, #0x8
    81fc:	cmp	w15, #0xf
    8200:	str	w13, [x22]
    8204:	b.gt	81d0 <BZ2_compressBlock@@Base+0x3c6c>
    8208:	add	w12, w13, w12
    820c:	ldr	x14, [x29, #8]
    8210:	neg	w13, w12
    8214:	lsl	w11, w11, w13
    8218:	orr	w10, w11, w10
    821c:	str	w12, [x14, #644]
    8220:	str	w10, [x14, #640]
    8224:	ldrh	w9, [x9, #88]
    8228:	madd	x11, x8, x18, x14
    822c:	madd	x13, x8, x1, x14
    8230:	cmp	w12, #0x8
    8234:	add	x11, x11, x9
    8238:	add	x13, x13, x9, lsl #2
    823c:	ldrb	w9, [x11, x0]
    8240:	ldr	w11, [x13, x2]
    8244:	b.lt	8284 <BZ2_compressBlock@@Base+0x3d20>  // b.tstop
    8248:	ldr	w13, [x21]
    824c:	ldr	x12, [x25]
    8250:	lsr	w10, w10, #24
    8254:	strb	w10, [x12, w13, sxtw]
    8258:	ldr	w10, [x21]
    825c:	add	w13, w10, #0x1
    8260:	str	w13, [x21]
    8264:	ldr	w10, [x24]
    8268:	lsl	w10, w10, #8
    826c:	str	w10, [x24]
    8270:	ldr	w14, [x22]
    8274:	sub	w12, w14, #0x8
    8278:	cmp	w14, #0xf
    827c:	str	w12, [x22]
    8280:	b.gt	824c <BZ2_compressBlock@@Base+0x3ce8>
    8284:	add	w13, w12, w9
    8288:	ldr	x14, [x29, #8]
    828c:	neg	w12, w13
    8290:	lsl	w11, w11, w12
    8294:	orr	w10, w11, w10
    8298:	add	x9, x16, x27, lsl #1
    829c:	str	w13, [x14, #644]
    82a0:	str	w10, [x14, #640]
    82a4:	ldrh	w11, [x9, #90]
    82a8:	madd	x12, x8, x18, x14
    82ac:	madd	x14, x8, x1, x14
    82b0:	cmp	w13, #0x8
    82b4:	add	x12, x12, x11
    82b8:	add	x11, x14, x11, lsl #2
    82bc:	ldrb	w12, [x12, x0]
    82c0:	ldr	w11, [x11, x2]
    82c4:	b.lt	8304 <BZ2_compressBlock@@Base+0x3da0>  // b.tstop
    82c8:	ldr	w14, [x21]
    82cc:	ldr	x13, [x25]
    82d0:	lsr	w10, w10, #24
    82d4:	strb	w10, [x13, w14, sxtw]
    82d8:	ldr	w10, [x21]
    82dc:	add	w14, w10, #0x1
    82e0:	str	w14, [x21]
    82e4:	ldr	w10, [x24]
    82e8:	lsl	w10, w10, #8
    82ec:	str	w10, [x24]
    82f0:	ldr	w15, [x22]
    82f4:	sub	w13, w15, #0x8
    82f8:	cmp	w15, #0xf
    82fc:	str	w13, [x22]
    8300:	b.gt	82cc <BZ2_compressBlock@@Base+0x3d68>
    8304:	add	w12, w13, w12
    8308:	ldr	x14, [x29, #8]
    830c:	neg	w13, w12
    8310:	lsl	w11, w11, w13
    8314:	orr	w10, w11, w10
    8318:	str	w12, [x14, #644]
    831c:	str	w10, [x14, #640]
    8320:	ldrh	w9, [x9, #92]
    8324:	madd	x11, x8, x18, x14
    8328:	madd	x13, x8, x1, x14
    832c:	cmp	w12, #0x8
    8330:	add	x11, x11, x9
    8334:	add	x13, x13, x9, lsl #2
    8338:	ldrb	w9, [x11, x0]
    833c:	ldr	w11, [x13, x2]
    8340:	b.lt	8380 <BZ2_compressBlock@@Base+0x3e1c>  // b.tstop
    8344:	ldr	w13, [x21]
    8348:	ldr	x12, [x25]
    834c:	lsr	w10, w10, #24
    8350:	strb	w10, [x12, w13, sxtw]
    8354:	ldr	w10, [x21]
    8358:	add	w13, w10, #0x1
    835c:	str	w13, [x21]
    8360:	ldr	w10, [x24]
    8364:	lsl	w10, w10, #8
    8368:	str	w10, [x24]
    836c:	ldr	w14, [x22]
    8370:	sub	w12, w14, #0x8
    8374:	cmp	w14, #0xf
    8378:	str	w12, [x22]
    837c:	b.gt	8348 <BZ2_compressBlock@@Base+0x3de4>
    8380:	add	w13, w12, w9
    8384:	ldr	x14, [x29, #8]
    8388:	neg	w12, w13
    838c:	lsl	w11, w11, w12
    8390:	orr	w10, w11, w10
    8394:	add	x9, x16, x27, lsl #1
    8398:	str	w13, [x14, #644]
    839c:	str	w10, [x14, #640]
    83a0:	ldrh	w11, [x9, #94]
    83a4:	madd	x12, x8, x18, x14
    83a8:	madd	x14, x8, x1, x14
    83ac:	cmp	w13, #0x8
    83b0:	add	x12, x12, x11
    83b4:	add	x11, x14, x11, lsl #2
    83b8:	ldrb	w12, [x12, x0]
    83bc:	ldr	w11, [x11, x2]
    83c0:	b.lt	8400 <BZ2_compressBlock@@Base+0x3e9c>  // b.tstop
    83c4:	ldr	w14, [x21]
    83c8:	ldr	x13, [x25]
    83cc:	lsr	w10, w10, #24
    83d0:	strb	w10, [x13, w14, sxtw]
    83d4:	ldr	w10, [x21]
    83d8:	add	w14, w10, #0x1
    83dc:	str	w14, [x21]
    83e0:	ldr	w10, [x24]
    83e4:	lsl	w10, w10, #8
    83e8:	str	w10, [x24]
    83ec:	ldr	w15, [x22]
    83f0:	sub	w13, w15, #0x8
    83f4:	cmp	w15, #0xf
    83f8:	str	w13, [x22]
    83fc:	b.gt	83c8 <BZ2_compressBlock@@Base+0x3e64>
    8400:	add	w12, w13, w12
    8404:	ldr	x14, [x29, #8]
    8408:	neg	w13, w12
    840c:	lsl	w11, w11, w13
    8410:	orr	w10, w11, w10
    8414:	str	w12, [x14, #644]
    8418:	str	w10, [x14, #640]
    841c:	ldrh	w9, [x9, #96]
    8420:	madd	x11, x8, x18, x14
    8424:	madd	x13, x8, x1, x14
    8428:	cmp	w12, #0x8
    842c:	add	x11, x11, x9
    8430:	add	x9, x13, x9, lsl #2
    8434:	ldrb	w11, [x11, x0]
    8438:	ldr	w9, [x9, x2]
    843c:	b.lt	847c <BZ2_compressBlock@@Base+0x3f18>  // b.tstop
    8440:	ldr	w13, [x21]
    8444:	ldr	x12, [x25]
    8448:	lsr	w10, w10, #24
    844c:	strb	w10, [x12, w13, sxtw]
    8450:	ldr	w10, [x21]
    8454:	add	w13, w10, #0x1
    8458:	str	w13, [x21]
    845c:	ldr	w10, [x24]
    8460:	lsl	w10, w10, #8
    8464:	str	w10, [x24]
    8468:	ldr	w14, [x22]
    846c:	sub	w12, w14, #0x8
    8470:	cmp	w14, #0xf
    8474:	str	w12, [x22]
    8478:	b.gt	8444 <BZ2_compressBlock@@Base+0x3ee0>
    847c:	add	w11, w12, w11
    8480:	ldr	x13, [x29, #8]
    8484:	neg	w12, w11
    8488:	lsl	w9, w9, w12
    848c:	orr	w9, w9, w10
    8490:	str	w11, [x13, #644]
    8494:	str	w9, [x13, #640]
    8498:	ldrh	w10, [x16, x4, lsl #1]
    849c:	madd	x12, x8, x18, x13
    84a0:	madd	x8, x8, x1, x13
    84a4:	cmp	w11, #0x8
    84a8:	add	x12, x12, x10
    84ac:	add	x8, x8, x10, lsl #2
    84b0:	ldrb	w10, [x12, x0]
    84b4:	ldr	w8, [x8, x2]
    84b8:	b.lt	6bcc <BZ2_compressBlock@@Base+0x2668>  // b.tstop
    84bc:	ldr	w12, [x21]
    84c0:	ldr	x11, [x25]
    84c4:	lsr	w9, w9, #24
    84c8:	strb	w9, [x11, w12, sxtw]
    84cc:	ldr	w9, [x21]
    84d0:	add	w12, w9, #0x1
    84d4:	str	w12, [x21]
    84d8:	ldr	w9, [x24]
    84dc:	lsl	w9, w9, #8
    84e0:	str	w9, [x24]
    84e4:	ldr	w13, [x22]
    84e8:	sub	w11, w13, #0x8
    84ec:	cmp	w13, #0xf
    84f0:	str	w11, [x22]
    84f4:	b.gt	84c0 <BZ2_compressBlock@@Base+0x3f5c>
    84f8:	b	6bcc <BZ2_compressBlock@@Base+0x2668>
    84fc:	cmp	w28, w27
    8500:	b.lt	6be4 <BZ2_compressBlock@@Base+0x2680>  // b.tstop
    8504:	ldr	w11, [x22]
    8508:	ldr	w10, [x24]
    850c:	sxtw	x9, w28
    8510:	b	8538 <BZ2_compressBlock@@Base+0x3fd4>
    8514:	add	w11, w11, w13
    8518:	neg	w13, w11
    851c:	lsl	w12, w12, w13
    8520:	cmp	x27, x9
    8524:	add	x27, x27, #0x1
    8528:	orr	w10, w12, w10
    852c:	str	w10, [x24]
    8530:	str	w11, [x22]
    8534:	b.ge	6be4 <BZ2_compressBlock@@Base+0x2680>  // b.tcont
    8538:	ldrb	w12, [x8]
    853c:	ldr	x15, [x29, #8]
    8540:	ldrh	w13, [x16, x27, lsl #1]
    8544:	cmp	w11, #0x8
    8548:	madd	x14, x12, x18, x15
    854c:	madd	x12, x12, x1, x15
    8550:	add	x14, x14, x13
    8554:	add	x12, x12, x13, lsl #2
    8558:	ldrb	w13, [x14, x0]
    855c:	ldr	w12, [x12, x2]
    8560:	b.lt	8514 <BZ2_compressBlock@@Base+0x3fb0>  // b.tstop
    8564:	ldr	w14, [x21]
    8568:	ldr	x11, [x25]
    856c:	lsr	w10, w10, #24
    8570:	strb	w10, [x11, w14, sxtw]
    8574:	ldr	w10, [x21]
    8578:	add	w14, w10, #0x1
    857c:	str	w14, [x21]
    8580:	ldr	w10, [x24]
    8584:	lsl	w10, w10, #8
    8588:	str	w10, [x24]
    858c:	ldr	w15, [x22]
    8590:	sub	w11, w15, #0x8
    8594:	cmp	w15, #0xf
    8598:	str	w11, [x22]
    859c:	b.gt	8568 <BZ2_compressBlock@@Base+0x4004>
    85a0:	b	8514 <BZ2_compressBlock@@Base+0x3fb0>
    85a4:	mov	w17, wzr
    85a8:	ldur	x23, [x29, #-80]
    85ac:	cmp	w17, w23
    85b0:	b.eq	85bc <BZ2_compressBlock@@Base+0x4058>  // b.none
    85b4:	mov	w0, #0xbbf                 	// #3007
    85b8:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    85bc:	ldr	x8, [x29, #8]
    85c0:	ldr	w8, [x8, #656]
    85c4:	cmp	w8, #0x3
    85c8:	b.ge	8694 <BZ2_compressBlock@@Base+0x4130>  // b.tcont
    85cc:	ldp	x20, x19, [sp, #288]
    85d0:	ldp	x22, x21, [sp, #272]
    85d4:	ldp	x24, x23, [sp, #256]
    85d8:	ldp	x26, x25, [sp, #240]
    85dc:	ldp	x28, x27, [sp, #224]
    85e0:	ldp	x29, x30, [sp, #208]
    85e4:	ldr	d8, [sp, #192]
    85e8:	add	sp, sp, #0x130
    85ec:	ret
    85f0:	ldr	x0, [x8]
    85f4:	ldr	x8, [x29, #8]
    85f8:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    85fc:	add	x1, x1, #0xac2
    8600:	ldr	w2, [x8, #108]
    8604:	ldr	w3, [x8, #668]
    8608:	ldr	w4, [x8, #124]
    860c:	bl	1610 <fprintf@plt>
    8610:	b	51e4 <BZ2_compressBlock@@Base+0xc80>
    8614:	ldr	x0, [x19]
    8618:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    861c:	sub	w2, w9, w8
    8620:	add	x1, x1, #0xb6a
    8624:	bl	1610 <fprintf@plt>
    8628:	ldr	x6, [sp, #56]
    862c:	ldr	w9, [x21]
    8630:	ldr	w10, [x22]
    8634:	ldr	w11, [x24]
    8638:	mov	w8, w9
    863c:	cmp	w10, #0x8
    8640:	b.ge	67b4 <BZ2_compressBlock@@Base+0x2250>  // b.tcont
    8644:	b	67ec <BZ2_compressBlock@@Base+0x2288>
    8648:	ldr	x0, [x19]
    864c:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    8650:	sub	w2, w8, w9
    8654:	add	x1, x1, #0xb84
    8658:	bl	1610 <fprintf@plt>
    865c:	ldr	x6, [sp, #56]
    8660:	ldr	w8, [x21]
    8664:	ldr	w11, [x22]
    8668:	ldr	w10, [x24]
    866c:	b	6984 <BZ2_compressBlock@@Base+0x2420>
    8670:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    8674:	ldr	x9, [x9, #4016]
    8678:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    867c:	sub	w2, w26, w8
    8680:	add	x1, x1, #0xb93
    8684:	ldr	x0, [x9]
    8688:	bl	1610 <fprintf@plt>
    868c:	ldr	w26, [x21]
    8690:	b	6b9c <BZ2_compressBlock@@Base+0x2638>
    8694:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    8698:	ldr	w8, [x21]
    869c:	ldr	x9, [x9, #4016]
    86a0:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    86a4:	add	x1, x1, #0xba5
    86a8:	sub	w2, w8, w26
    86ac:	ldr	x0, [x9]
    86b0:	bl	1610 <fprintf@plt>
    86b4:	b	85cc <BZ2_compressBlock@@Base+0x4068>

00000000000086b8 <BZ2_decompress@@Base>:
    86b8:	sub	sp, sp, #0xf0
    86bc:	stp	x29, x30, [sp, #144]
    86c0:	stp	x28, x27, [sp, #160]
    86c4:	stp	x26, x25, [sp, #176]
    86c8:	stp	x24, x23, [sp, #192]
    86cc:	stp	x22, x21, [sp, #208]
    86d0:	stp	x20, x19, [sp, #224]
    86d4:	add	x29, sp, #0x90
    86d8:	ldr	w8, [x0, #8]
    86dc:	ldr	x22, [x0]
    86e0:	mov	w9, #0xfa24                	// #64036
    86e4:	mov	x21, x0
    86e8:	subs	w8, w8, #0xa
    86ec:	add	x25, x0, x9
    86f0:	b.ne	87b8 <BZ2_decompress@@Base+0x100>  // b.any
    86f4:	mov	x28, xzr
    86f8:	mov	x23, xzr
    86fc:	mov	x26, xzr
    8700:	mov	w24, wzr
    8704:	mov	w15, wzr
    8708:	mov	w14, wzr
    870c:	mov	w20, wzr
    8710:	mov	w17, wzr
    8714:	mov	w4, wzr
    8718:	mov	w3, wzr
    871c:	mov	w5, wzr
    8720:	mov	w7, wzr
    8724:	mov	w6, wzr
    8728:	mov	w1, wzr
    872c:	mov	w30, wzr
    8730:	mov	w16, wzr
    8734:	mov	w27, wzr
    8738:	mov	w2, wzr
    873c:	mov	w18, wzr
    8740:	mov	w19, wzr
    8744:	movi	v0.2d, #0x0
    8748:	stur	xzr, [x29, #-36]
    874c:	stur	wzr, [x29, #-20]
    8750:	stur	xzr, [x29, #-16]
    8754:	stur	q0, [x25, #92]
    8758:	stp	q0, q0, [x25, #64]
    875c:	stp	q0, q0, [x25, #32]
    8760:	stp	q0, q0, [x25]
    8764:	cmp	w8, #0x28
    8768:	b.hi	8808 <BZ2_decompress@@Base+0x150>  // b.pmore
    876c:	adrp	x10, e000 <BZ2_bzopen@@Base+0x1d4>
    8770:	add	x10, x10, #0xbb8
    8774:	adr	x9, 8784 <BZ2_decompress@@Base+0xcc>
    8778:	ldrh	w11, [x10, x8, lsl #1]
    877c:	add	x9, x9, x11, lsl #2
    8780:	br	x9
    8784:	ldr	w8, [x21, #36]
    8788:	mov	w9, #0xa                   	// #10
    878c:	str	w9, [x21, #8]
    8790:	cmp	w8, #0x8
    8794:	b.lt	9200 <BZ2_decompress@@Base+0xb48>  // b.tstop
    8798:	ldr	w9, [x21, #32]
    879c:	sub	w8, w8, #0x8
    87a0:	lsr	w9, w9, w8
    87a4:	and	w9, w9, #0xff
    87a8:	cmp	w9, #0x42
    87ac:	str	w8, [x21, #36]
    87b0:	b.eq	88b0 <BZ2_decompress@@Base+0x1f8>  // b.none
    87b4:	b	8948 <BZ2_decompress@@Base+0x290>
    87b8:	ldp	w9, w19, [x25]
    87bc:	ldr	w24, [x25, #80]
    87c0:	ldur	x26, [x25, #84]
    87c4:	ldur	x23, [x25, #92]
    87c8:	stur	x9, [x29, #-16]
    87cc:	ldp	w9, w30, [x25, #24]
    87d0:	ldp	w18, w2, [x25, #8]
    87d4:	ldp	w27, w16, [x25, #16]
    87d8:	ldur	x28, [x25, #100]
    87dc:	stur	w9, [x29, #-32]
    87e0:	ldp	w1, w9, [x25, #32]
    87e4:	stur	w9, [x29, #-20]
    87e8:	ldp	w4, w9, [x25, #56]
    87ec:	ldp	w6, w7, [x25, #40]
    87f0:	ldp	w5, w3, [x25, #48]
    87f4:	stur	w9, [x29, #-36]
    87f8:	ldp	w17, w20, [x25, #64]
    87fc:	ldp	w14, w15, [x25, #72]
    8800:	cmp	w8, #0x28
    8804:	b.ls	876c <BZ2_decompress@@Base+0xb4>  // b.plast
    8808:	mov	w0, #0xfa1                 	// #4001
    880c:	str	w3, [sp, #68]
    8810:	stur	w4, [x29, #-52]
    8814:	stur	w19, [x29, #-44]
    8818:	str	w20, [sp, #64]
    881c:	stp	x26, x23, [sp, #40]
    8820:	str	x28, [sp, #72]
    8824:	str	w24, [sp, #56]
    8828:	stur	w14, [x29, #-48]
    882c:	stur	x15, [x29, #-64]
    8830:	mov	w19, w16
    8834:	mov	w20, w5
    8838:	mov	x23, x17
    883c:	mov	x26, x6
    8840:	mov	x21, x7
    8844:	mov	x28, x30
    8848:	mov	w24, w18
    884c:	mov	w22, w1
    8850:	stur	w27, [x29, #-40]
    8854:	mov	w27, w2
    8858:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    885c:	mov	w0, #0xfa2                 	// #4002
    8860:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    8864:	mov	w2, w27
    8868:	mov	w18, w24
    886c:	mov	x30, x28
    8870:	mov	x6, x26
    8874:	mov	x17, x23
    8878:	mov	w5, w20
    887c:	mov	w16, w19
    8880:	ldur	x15, [x29, #-64]
    8884:	ldp	w4, w14, [x29, #-52]
    8888:	ldr	w24, [sp, #56]
    888c:	ldr	x28, [sp, #72]
    8890:	ldp	x26, x23, [sp, #40]
    8894:	ldp	w20, w3, [sp, #64]
    8898:	ldp	w19, w27, [x29, #-44]
    889c:	mov	w1, w22
    88a0:	mov	x7, x21
    88a4:	mov	w0, wzr
    88a8:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    88ac:	ldr	w8, [x21, #36]
    88b0:	mov	w9, #0xb                   	// #11
    88b4:	cmp	w8, #0x8
    88b8:	str	w9, [x21, #8]
    88bc:	b.lt	9074 <BZ2_decompress@@Base+0x9bc>  // b.tstop
    88c0:	ldr	w9, [x21, #32]
    88c4:	sub	w8, w8, #0x8
    88c8:	lsr	w9, w9, w8
    88cc:	and	w9, w9, #0xff
    88d0:	cmp	w9, #0x5a
    88d4:	str	w8, [x21, #36]
    88d8:	b.eq	88e4 <BZ2_decompress@@Base+0x22c>  // b.none
    88dc:	b	8948 <BZ2_decompress@@Base+0x290>
    88e0:	ldr	w8, [x21, #36]
    88e4:	mov	w9, #0xc                   	// #12
    88e8:	cmp	w8, #0x8
    88ec:	str	w9, [x21, #8]
    88f0:	b.lt	9018 <BZ2_decompress@@Base+0x960>  // b.tstop
    88f4:	ldr	w9, [x21, #32]
    88f8:	sub	w8, w8, #0x8
    88fc:	lsr	w9, w9, w8
    8900:	and	w9, w9, #0xff
    8904:	cmp	w9, #0x68
    8908:	str	w8, [x21, #36]
    890c:	b.eq	8918 <BZ2_decompress@@Base+0x260>  // b.none
    8910:	b	8948 <BZ2_decompress@@Base+0x290>
    8914:	ldr	w8, [x21, #36]
    8918:	mov	w9, #0xd                   	// #13
    891c:	cmp	w8, #0x8
    8920:	str	w9, [x21, #8]
    8924:	b.lt	8fbc <BZ2_decompress@@Base+0x904>  // b.tstop
    8928:	ldr	w9, [x21, #32]
    892c:	sub	w10, w8, #0x8
    8930:	lsr	w8, w9, w10
    8934:	and	w8, w8, #0xff
    8938:	sub	w9, w8, #0x31
    893c:	cmp	w9, #0x8
    8940:	stp	w10, w8, [x21, #36]
    8944:	b.ls	9134 <BZ2_decompress@@Base+0xa7c>  // b.plast
    8948:	mov	w0, #0xfffffffb            	// #-5
    894c:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    8950:	ldr	w8, [x21, #36]
    8954:	b	92dc <BZ2_decompress@@Base+0xc24>
    8958:	ldr	w8, [x21, #36]
    895c:	b	9308 <BZ2_decompress@@Base+0xc50>
    8960:	ldr	w8, [x21, #36]
    8964:	b	9334 <BZ2_decompress@@Base+0xc7c>
    8968:	ldr	w8, [x21, #36]
    896c:	b	9360 <BZ2_decompress@@Base+0xca8>
    8970:	ldr	w8, [x21, #36]
    8974:	b	938c <BZ2_decompress@@Base+0xcd4>
    8978:	ldr	w8, [x21, #36]
    897c:	mov	w9, #0x15                  	// #21
    8980:	cmp	w8, #0x8
    8984:	str	w9, [x21, #8]
    8988:	b.ge	9420 <BZ2_decompress@@Base+0xd68>  // b.tcont
    898c:	ldr	x10, [x21]
    8990:	ldr	w9, [x10, #8]
    8994:	sub	w11, w9, #0x1
    8998:	b	89a8 <BZ2_decompress@@Base+0x2f0>
    899c:	cmp	w8, #0x8
    89a0:	sub	w11, w11, #0x1
    89a4:	b.pl	9424 <BZ2_decompress@@Base+0xd6c>  // b.nfrst
    89a8:	cmn	w11, #0x1
    89ac:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    89b0:	ldr	x12, [x10]
    89b4:	ldr	w13, [x21, #32]
    89b8:	add	w8, w8, #0x8
    89bc:	ldrb	w9, [x12], #1
    89c0:	bfi	w9, w13, #8, #24
    89c4:	stp	w9, w8, [x21, #32]
    89c8:	ldr	w13, [x10, #12]
    89cc:	str	x12, [x10]
    89d0:	adds	w12, w13, #0x1
    89d4:	stp	w11, w12, [x10, #8]
    89d8:	b.cc	899c <BZ2_decompress@@Base+0x2e4>  // b.lo, b.ul, b.last
    89dc:	ldr	w12, [x10, #16]
    89e0:	add	w12, w12, #0x1
    89e4:	str	w12, [x10, #16]
    89e8:	b	899c <BZ2_decompress@@Base+0x2e4>
    89ec:	ldr	w8, [x21, #36]
    89f0:	mov	w9, #0x16                  	// #22
    89f4:	cmp	w8, #0x8
    89f8:	str	w9, [x21, #8]
    89fc:	b.ge	944c <BZ2_decompress@@Base+0xd94>  // b.tcont
    8a00:	ldr	x10, [x21]
    8a04:	ldr	w9, [x10, #8]
    8a08:	sub	w11, w9, #0x1
    8a0c:	b	8a1c <BZ2_decompress@@Base+0x364>
    8a10:	cmp	w8, #0x8
    8a14:	sub	w11, w11, #0x1
    8a18:	b.pl	9450 <BZ2_decompress@@Base+0xd98>  // b.nfrst
    8a1c:	cmn	w11, #0x1
    8a20:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8a24:	ldr	x12, [x10]
    8a28:	ldr	w13, [x21, #32]
    8a2c:	add	w8, w8, #0x8
    8a30:	ldrb	w9, [x12], #1
    8a34:	bfi	w9, w13, #8, #24
    8a38:	stp	w9, w8, [x21, #32]
    8a3c:	ldr	w13, [x10, #12]
    8a40:	str	x12, [x10]
    8a44:	adds	w12, w13, #0x1
    8a48:	stp	w11, w12, [x10, #8]
    8a4c:	b.cc	8a10 <BZ2_decompress@@Base+0x358>  // b.lo, b.ul, b.last
    8a50:	ldr	w12, [x10, #16]
    8a54:	add	w12, w12, #0x1
    8a58:	str	w12, [x10, #16]
    8a5c:	b	8a10 <BZ2_decompress@@Base+0x358>
    8a60:	ldr	w8, [x21, #36]
    8a64:	mov	w9, #0x17                  	// #23
    8a68:	cmp	w8, #0x8
    8a6c:	str	w9, [x21, #8]
    8a70:	b.ge	9478 <BZ2_decompress@@Base+0xdc0>  // b.tcont
    8a74:	ldr	x10, [x21]
    8a78:	ldr	w9, [x10, #8]
    8a7c:	sub	w11, w9, #0x1
    8a80:	b	8a90 <BZ2_decompress@@Base+0x3d8>
    8a84:	cmp	w8, #0x8
    8a88:	sub	w11, w11, #0x1
    8a8c:	b.pl	947c <BZ2_decompress@@Base+0xdc4>  // b.nfrst
    8a90:	cmn	w11, #0x1
    8a94:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8a98:	ldr	x12, [x10]
    8a9c:	ldr	w13, [x21, #32]
    8aa0:	add	w8, w8, #0x8
    8aa4:	ldrb	w9, [x12], #1
    8aa8:	bfi	w9, w13, #8, #24
    8aac:	stp	w9, w8, [x21, #32]
    8ab0:	ldr	w13, [x10, #12]
    8ab4:	str	x12, [x10]
    8ab8:	adds	w12, w13, #0x1
    8abc:	stp	w11, w12, [x10, #8]
    8ac0:	b.cc	8a84 <BZ2_decompress@@Base+0x3cc>  // b.lo, b.ul, b.last
    8ac4:	ldr	w12, [x10, #16]
    8ac8:	add	w12, w12, #0x1
    8acc:	str	w12, [x10, #16]
    8ad0:	b	8a84 <BZ2_decompress@@Base+0x3cc>
    8ad4:	ldr	w8, [x21, #36]
    8ad8:	b	9494 <BZ2_decompress@@Base+0xddc>
    8adc:	ldr	w8, [x21, #36]
    8ae0:	mov	w9, #0x19                  	// #25
    8ae4:	cmp	w8, #0x8
    8ae8:	str	w9, [x21, #8]
    8aec:	b.ge	94d0 <BZ2_decompress@@Base+0xe18>  // b.tcont
    8af0:	ldr	x10, [x21]
    8af4:	ldr	w9, [x10, #8]
    8af8:	sub	w11, w9, #0x1
    8afc:	b	8b0c <BZ2_decompress@@Base+0x454>
    8b00:	cmp	w8, #0x8
    8b04:	sub	w11, w11, #0x1
    8b08:	b.pl	94d4 <BZ2_decompress@@Base+0xe1c>  // b.nfrst
    8b0c:	cmn	w11, #0x1
    8b10:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8b14:	ldr	x12, [x10]
    8b18:	ldr	w13, [x21, #32]
    8b1c:	add	w8, w8, #0x8
    8b20:	ldrb	w9, [x12], #1
    8b24:	bfi	w9, w13, #8, #24
    8b28:	stp	w9, w8, [x21, #32]
    8b2c:	ldr	w13, [x10, #12]
    8b30:	str	x12, [x10]
    8b34:	adds	w12, w13, #0x1
    8b38:	stp	w11, w12, [x10, #8]
    8b3c:	b.cc	8b00 <BZ2_decompress@@Base+0x448>  // b.lo, b.ul, b.last
    8b40:	ldr	w12, [x10, #16]
    8b44:	add	w12, w12, #0x1
    8b48:	str	w12, [x10, #16]
    8b4c:	b	8b00 <BZ2_decompress@@Base+0x448>
    8b50:	ldr	w8, [x21, #36]
    8b54:	mov	w9, #0x1a                  	// #26
    8b58:	cmp	w8, #0x8
    8b5c:	str	w9, [x21, #8]
    8b60:	b.ge	94fc <BZ2_decompress@@Base+0xe44>  // b.tcont
    8b64:	ldr	x10, [x21]
    8b68:	ldr	w9, [x10, #8]
    8b6c:	sub	w11, w9, #0x1
    8b70:	b	8b80 <BZ2_decompress@@Base+0x4c8>
    8b74:	cmp	w8, #0x8
    8b78:	sub	w11, w11, #0x1
    8b7c:	b.pl	9500 <BZ2_decompress@@Base+0xe48>  // b.nfrst
    8b80:	cmn	w11, #0x1
    8b84:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8b88:	ldr	x12, [x10]
    8b8c:	ldr	w13, [x21, #32]
    8b90:	add	w8, w8, #0x8
    8b94:	ldrb	w9, [x12], #1
    8b98:	bfi	w9, w13, #8, #24
    8b9c:	stp	w9, w8, [x21, #32]
    8ba0:	ldr	w13, [x10, #12]
    8ba4:	str	x12, [x10]
    8ba8:	adds	w12, w13, #0x1
    8bac:	stp	w11, w12, [x10, #8]
    8bb0:	b.cc	8b74 <BZ2_decompress@@Base+0x4bc>  // b.lo, b.ul, b.last
    8bb4:	ldr	w12, [x10, #16]
    8bb8:	add	w12, w12, #0x1
    8bbc:	str	w12, [x10, #16]
    8bc0:	b	8b74 <BZ2_decompress@@Base+0x4bc>
    8bc4:	ldr	w8, [x21, #36]
    8bc8:	mov	w9, #0x1b                  	// #27
    8bcc:	cmp	w8, #0x8
    8bd0:	str	w9, [x21, #8]
    8bd4:	b.ge	9528 <BZ2_decompress@@Base+0xe70>  // b.tcont
    8bd8:	ldr	x9, [x21]
    8bdc:	ldr	w10, [x9, #8]
    8be0:	sub	w11, w10, #0x1
    8be4:	b	8bf4 <BZ2_decompress@@Base+0x53c>
    8be8:	cmp	w8, #0x8
    8bec:	sub	w11, w11, #0x1
    8bf0:	b.pl	952c <BZ2_decompress@@Base+0xe74>  // b.nfrst
    8bf4:	cmn	w11, #0x1
    8bf8:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8bfc:	ldr	x12, [x9]
    8c00:	ldr	w13, [x21, #32]
    8c04:	add	w8, w8, #0x8
    8c08:	ldrb	w10, [x12], #1
    8c0c:	bfi	w10, w13, #8, #24
    8c10:	stp	w10, w8, [x21, #32]
    8c14:	ldr	w13, [x9, #12]
    8c18:	str	x12, [x9]
    8c1c:	adds	w12, w13, #0x1
    8c20:	stp	w11, w12, [x9, #8]
    8c24:	b.cc	8be8 <BZ2_decompress@@Base+0x530>  // b.lo, b.ul, b.last
    8c28:	ldr	w12, [x9, #16]
    8c2c:	add	w12, w12, #0x1
    8c30:	str	w12, [x9, #16]
    8c34:	b	8be8 <BZ2_decompress@@Base+0x530>
    8c38:	ldr	w8, [x21, #36]
    8c3c:	mov	w9, #0x1f                  	// #31
    8c40:	cmp	w8, #0xf
    8c44:	str	w9, [x21, #8]
    8c48:	b.lt	90d0 <BZ2_decompress@@Base+0xa18>  // b.tstop
    8c4c:	ldr	w10, [x21, #32]
    8c50:	sub	w8, w8, #0xf
    8c54:	lsr	w10, w10, w8
    8c58:	mov	w9, wzr
    8c5c:	ands	w16, w10, #0x7fff
    8c60:	str	w8, [x21, #36]
    8c64:	b.ne	a094 <BZ2_decompress@@Base+0x19dc>  // b.any
    8c68:	mov	w0, #0xfffffffc            	// #-4
    8c6c:	mov	w16, w9
    8c70:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    8c74:	ldr	w8, [x21, #36]
    8c78:	b	a7e8 <BZ2_decompress@@Base+0x2130>
    8c7c:	ldr	w8, [x21, #36]
    8c80:	b	9d5c <BZ2_decompress@@Base+0x16a4>
    8c84:	ldr	w8, [x21, #36]
    8c88:	mov	w9, #0x27                  	// #39
    8c8c:	cmp	w8, #0x1
    8c90:	str	w9, [x21, #8]
    8c94:	b.ge	9e08 <BZ2_decompress@@Base+0x1750>  // b.tcont
    8c98:	ldr	x9, [x21]
    8c9c:	ldr	w10, [x9, #8]
    8ca0:	sub	w11, w10, #0x1
    8ca4:	b	8cb8 <BZ2_decompress@@Base+0x600>
    8ca8:	sub	w12, w8, #0x8
    8cac:	cmn	w12, #0x8
    8cb0:	sub	w11, w11, #0x1
    8cb4:	b.gt	9e0c <BZ2_decompress@@Base+0x1754>
    8cb8:	cmn	w11, #0x1
    8cbc:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8cc0:	ldr	x12, [x9]
    8cc4:	ldr	w13, [x21, #32]
    8cc8:	add	w8, w8, #0x8
    8ccc:	ldrb	w10, [x12], #1
    8cd0:	bfi	w10, w13, #8, #24
    8cd4:	stp	w10, w8, [x21, #32]
    8cd8:	ldr	w13, [x9, #12]
    8cdc:	str	x12, [x9]
    8ce0:	adds	w12, w13, #0x1
    8ce4:	stp	w11, w12, [x9, #8]
    8ce8:	b.cc	8ca8 <BZ2_decompress@@Base+0x5f0>  // b.lo, b.ul, b.last
    8cec:	ldr	w12, [x9, #16]
    8cf0:	add	w12, w12, #0x1
    8cf4:	str	w12, [x9, #16]
    8cf8:	b	8ca8 <BZ2_decompress@@Base+0x5f0>
    8cfc:	ldr	w8, [x21, #36]
    8d00:	mov	w9, #0x29                  	// #41
    8d04:	cmp	w8, #0x1
    8d08:	str	w9, [x21, #8]
    8d0c:	b.ge	9e28 <BZ2_decompress@@Base+0x1770>  // b.tcont
    8d10:	ldr	x9, [x21]
    8d14:	ldr	w10, [x9, #8]
    8d18:	sub	w11, w10, #0x1
    8d1c:	b	8d30 <BZ2_decompress@@Base+0x678>
    8d20:	sub	w12, w8, #0x8
    8d24:	cmn	w12, #0x8
    8d28:	sub	w11, w11, #0x1
    8d2c:	b.gt	9e2c <BZ2_decompress@@Base+0x1774>
    8d30:	cmn	w11, #0x1
    8d34:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8d38:	ldr	x12, [x9]
    8d3c:	ldr	w13, [x21, #32]
    8d40:	add	w8, w8, #0x8
    8d44:	ldrb	w10, [x12], #1
    8d48:	bfi	w10, w13, #8, #24
    8d4c:	stp	w10, w8, [x21, #32]
    8d50:	ldr	w13, [x9, #12]
    8d54:	str	x12, [x9]
    8d58:	adds	w12, w13, #0x1
    8d5c:	stp	w11, w12, [x9, #8]
    8d60:	b.cc	8d20 <BZ2_decompress@@Base+0x668>  // b.lo, b.ul, b.last
    8d64:	ldr	w12, [x9, #16]
    8d68:	add	w12, w12, #0x1
    8d6c:	str	w12, [x9, #16]
    8d70:	b	8d20 <BZ2_decompress@@Base+0x668>
    8d74:	ldr	w8, [x21, #36]
    8d78:	b	9570 <BZ2_decompress@@Base+0xeb8>
    8d7c:	ldr	w8, [x21, #36]
    8d80:	b	959c <BZ2_decompress@@Base+0xee4>
    8d84:	ldr	w8, [x21, #36]
    8d88:	b	95c8 <BZ2_decompress@@Base+0xf10>
    8d8c:	ldr	w8, [x21, #36]
    8d90:	b	95f4 <BZ2_decompress@@Base+0xf3c>
    8d94:	ldr	w8, [x21, #36]
    8d98:	b	9620 <BZ2_decompress@@Base+0xf68>
    8d9c:	ldr	w8, [x21, #36]
    8da0:	mov	w9, #0x2f                  	// #47
    8da4:	cmp	w8, #0x8
    8da8:	str	w9, [x21, #8]
    8dac:	b.lt	9660 <BZ2_decompress@@Base+0xfa8>  // b.tstop
    8db0:	ldr	w9, [x21, #32]
    8db4:	ldr	w10, [x21, #3180]
    8db8:	sub	w8, w8, #0x8
    8dbc:	lsr	w9, w9, w8
    8dc0:	str	w8, [x21, #36]
    8dc4:	bfi	w9, w10, #8, #24
    8dc8:	str	w9, [x21, #3180]
    8dcc:	mov	w9, #0x30                  	// #48
    8dd0:	cmp	w8, #0x8
    8dd4:	str	w9, [x21, #8]
    8dd8:	b.lt	8e74 <BZ2_decompress@@Base+0x7bc>  // b.tstop
    8ddc:	ldr	w9, [x21, #32]
    8de0:	ldr	w10, [x21, #3180]
    8de4:	sub	w8, w8, #0x8
    8de8:	lsr	w9, w9, w8
    8dec:	str	w8, [x21, #36]
    8df0:	bfi	w9, w10, #8, #24
    8df4:	str	w9, [x21, #3180]
    8df8:	mov	w9, #0x31                  	// #49
    8dfc:	cmp	w8, #0x8
    8e00:	str	w9, [x21, #8]
    8e04:	b.lt	8ee8 <BZ2_decompress@@Base+0x830>  // b.tstop
    8e08:	ldr	w9, [x21, #32]
    8e0c:	ldr	w10, [x21, #3180]
    8e10:	sub	w8, w8, #0x8
    8e14:	lsr	w9, w9, w8
    8e18:	str	w8, [x21, #36]
    8e1c:	bfi	w9, w10, #8, #24
    8e20:	str	w9, [x21, #3180]
    8e24:	mov	w9, #0x32                  	// #50
    8e28:	cmp	w8, #0x8
    8e2c:	str	w9, [x21, #8]
    8e30:	b.lt	8f5c <BZ2_decompress@@Base+0x8a4>  // b.tstop
    8e34:	ldr	w9, [x21, #32]
    8e38:	ldr	w10, [x21, #3180]
    8e3c:	sub	w8, w8, #0x8
    8e40:	lsr	w9, w9, w8
    8e44:	mov	w11, #0x1                   	// #1
    8e48:	bfi	w9, w10, #8, #24
    8e4c:	str	w8, [x21, #36]
    8e50:	str	w11, [x21, #8]
    8e54:	str	w9, [x21, #3180]
    8e58:	mov	w0, #0x4                   	// #4
    8e5c:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    8e60:	ldr	w8, [x21, #36]
    8e64:	mov	w9, #0x30                  	// #48
    8e68:	cmp	w8, #0x8
    8e6c:	str	w9, [x21, #8]
    8e70:	b.ge	8ddc <BZ2_decompress@@Base+0x724>  // b.tcont
    8e74:	ldr	x10, [x21]
    8e78:	ldr	w9, [x10, #8]
    8e7c:	sub	w11, w9, #0x1
    8e80:	b	8e90 <BZ2_decompress@@Base+0x7d8>
    8e84:	cmp	w8, #0x8
    8e88:	sub	w11, w11, #0x1
    8e8c:	b.pl	8de0 <BZ2_decompress@@Base+0x728>  // b.nfrst
    8e90:	cmn	w11, #0x1
    8e94:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8e98:	ldr	x12, [x10]
    8e9c:	ldr	w13, [x21, #32]
    8ea0:	add	w8, w8, #0x8
    8ea4:	ldrb	w9, [x12], #1
    8ea8:	bfi	w9, w13, #8, #24
    8eac:	stp	w9, w8, [x21, #32]
    8eb0:	ldr	w13, [x10, #12]
    8eb4:	str	x12, [x10]
    8eb8:	adds	w12, w13, #0x1
    8ebc:	stp	w11, w12, [x10, #8]
    8ec0:	b.cc	8e84 <BZ2_decompress@@Base+0x7cc>  // b.lo, b.ul, b.last
    8ec4:	ldr	w12, [x10, #16]
    8ec8:	add	w12, w12, #0x1
    8ecc:	str	w12, [x10, #16]
    8ed0:	b	8e84 <BZ2_decompress@@Base+0x7cc>
    8ed4:	ldr	w8, [x21, #36]
    8ed8:	mov	w9, #0x31                  	// #49
    8edc:	cmp	w8, #0x8
    8ee0:	str	w9, [x21, #8]
    8ee4:	b.ge	8e08 <BZ2_decompress@@Base+0x750>  // b.tcont
    8ee8:	ldr	x10, [x21]
    8eec:	ldr	w9, [x10, #8]
    8ef0:	sub	w11, w9, #0x1
    8ef4:	b	8f04 <BZ2_decompress@@Base+0x84c>
    8ef8:	cmp	w8, #0x8
    8efc:	sub	w11, w11, #0x1
    8f00:	b.pl	8e0c <BZ2_decompress@@Base+0x754>  // b.nfrst
    8f04:	cmn	w11, #0x1
    8f08:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8f0c:	ldr	x12, [x10]
    8f10:	ldr	w13, [x21, #32]
    8f14:	add	w8, w8, #0x8
    8f18:	ldrb	w9, [x12], #1
    8f1c:	bfi	w9, w13, #8, #24
    8f20:	stp	w9, w8, [x21, #32]
    8f24:	ldr	w13, [x10, #12]
    8f28:	str	x12, [x10]
    8f2c:	adds	w12, w13, #0x1
    8f30:	stp	w11, w12, [x10, #8]
    8f34:	b.cc	8ef8 <BZ2_decompress@@Base+0x840>  // b.lo, b.ul, b.last
    8f38:	ldr	w12, [x10, #16]
    8f3c:	add	w12, w12, #0x1
    8f40:	str	w12, [x10, #16]
    8f44:	b	8ef8 <BZ2_decompress@@Base+0x840>
    8f48:	ldr	w8, [x21, #36]
    8f4c:	mov	w9, #0x32                  	// #50
    8f50:	cmp	w8, #0x8
    8f54:	str	w9, [x21, #8]
    8f58:	b.ge	8e34 <BZ2_decompress@@Base+0x77c>  // b.tcont
    8f5c:	ldr	x10, [x21]
    8f60:	ldr	w9, [x10, #8]
    8f64:	sub	w11, w9, #0x1
    8f68:	b	8f78 <BZ2_decompress@@Base+0x8c0>
    8f6c:	cmp	w8, #0x8
    8f70:	sub	w11, w11, #0x1
    8f74:	b.pl	8e38 <BZ2_decompress@@Base+0x780>  // b.nfrst
    8f78:	cmn	w11, #0x1
    8f7c:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8f80:	ldr	x12, [x10]
    8f84:	ldr	w13, [x21, #32]
    8f88:	add	w8, w8, #0x8
    8f8c:	ldrb	w9, [x12], #1
    8f90:	bfi	w9, w13, #8, #24
    8f94:	stp	w9, w8, [x21, #32]
    8f98:	ldr	w13, [x10, #12]
    8f9c:	str	x12, [x10]
    8fa0:	adds	w12, w13, #0x1
    8fa4:	stp	w11, w12, [x10, #8]
    8fa8:	b.cc	8f6c <BZ2_decompress@@Base+0x8b4>  // b.lo, b.ul, b.last
    8fac:	ldr	w12, [x10, #16]
    8fb0:	add	w12, w12, #0x1
    8fb4:	str	w12, [x10, #16]
    8fb8:	b	8f6c <BZ2_decompress@@Base+0x8b4>
    8fbc:	ldr	w9, [x22, #8]
    8fc0:	sub	w10, w9, #0x1
    8fc4:	b	8fd4 <BZ2_decompress@@Base+0x91c>
    8fc8:	cmp	w8, #0x8
    8fcc:	sub	w10, w10, #0x1
    8fd0:	b.pl	892c <BZ2_decompress@@Base+0x274>  // b.nfrst
    8fd4:	cmn	w10, #0x1
    8fd8:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    8fdc:	ldr	x11, [x22]
    8fe0:	ldr	w12, [x21, #32]
    8fe4:	add	w8, w8, #0x8
    8fe8:	ldrb	w9, [x11], #1
    8fec:	bfi	w9, w12, #8, #24
    8ff0:	stp	w9, w8, [x21, #32]
    8ff4:	ldr	w12, [x22, #12]
    8ff8:	str	x11, [x22]
    8ffc:	adds	w11, w12, #0x1
    9000:	stp	w10, w11, [x22, #8]
    9004:	b.cc	8fc8 <BZ2_decompress@@Base+0x910>  // b.lo, b.ul, b.last
    9008:	ldr	w11, [x22, #16]
    900c:	add	w11, w11, #0x1
    9010:	str	w11, [x22, #16]
    9014:	b	8fc8 <BZ2_decompress@@Base+0x910>
    9018:	ldr	w9, [x22, #8]
    901c:	sub	w10, w9, #0x1
    9020:	b	9030 <BZ2_decompress@@Base+0x978>
    9024:	cmp	w8, #0x8
    9028:	sub	w10, w10, #0x1
    902c:	b.pl	88f8 <BZ2_decompress@@Base+0x240>  // b.nfrst
    9030:	cmn	w10, #0x1
    9034:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9038:	ldr	x11, [x22]
    903c:	ldr	w12, [x21, #32]
    9040:	add	w8, w8, #0x8
    9044:	ldrb	w9, [x11], #1
    9048:	bfi	w9, w12, #8, #24
    904c:	stp	w9, w8, [x21, #32]
    9050:	ldr	w12, [x22, #12]
    9054:	str	x11, [x22]
    9058:	adds	w11, w12, #0x1
    905c:	stp	w10, w11, [x22, #8]
    9060:	b.cc	9024 <BZ2_decompress@@Base+0x96c>  // b.lo, b.ul, b.last
    9064:	ldr	w11, [x22, #16]
    9068:	add	w11, w11, #0x1
    906c:	str	w11, [x22, #16]
    9070:	b	9024 <BZ2_decompress@@Base+0x96c>
    9074:	ldr	w9, [x22, #8]
    9078:	sub	w10, w9, #0x1
    907c:	b	908c <BZ2_decompress@@Base+0x9d4>
    9080:	cmp	w8, #0x8
    9084:	sub	w10, w10, #0x1
    9088:	b.pl	88c4 <BZ2_decompress@@Base+0x20c>  // b.nfrst
    908c:	cmn	w10, #0x1
    9090:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9094:	ldr	x11, [x22]
    9098:	ldr	w12, [x21, #32]
    909c:	add	w8, w8, #0x8
    90a0:	ldrb	w9, [x11], #1
    90a4:	bfi	w9, w12, #8, #24
    90a8:	stp	w9, w8, [x21, #32]
    90ac:	ldr	w12, [x22, #12]
    90b0:	str	x11, [x22]
    90b4:	adds	w11, w12, #0x1
    90b8:	stp	w10, w11, [x22, #8]
    90bc:	b.cc	9080 <BZ2_decompress@@Base+0x9c8>  // b.lo, b.ul, b.last
    90c0:	ldr	w11, [x22, #16]
    90c4:	add	w11, w11, #0x1
    90c8:	str	w11, [x22, #16]
    90cc:	b	9080 <BZ2_decompress@@Base+0x9c8>
    90d0:	ldr	x9, [x21]
    90d4:	ldr	w10, [x9, #8]
    90d8:	sub	w11, w10, #0x1
    90dc:	b	90f0 <BZ2_decompress@@Base+0xa38>
    90e0:	sub	w12, w8, #0x8
    90e4:	cmp	w12, #0x6
    90e8:	sub	w11, w11, #0x1
    90ec:	b.gt	8c50 <BZ2_decompress@@Base+0x598>
    90f0:	cmn	w11, #0x1
    90f4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    90f8:	ldr	x12, [x9]
    90fc:	ldr	w13, [x21, #32]
    9100:	add	w8, w8, #0x8
    9104:	ldrb	w10, [x12], #1
    9108:	bfi	w10, w13, #8, #24
    910c:	stp	w10, w8, [x21, #32]
    9110:	ldr	w13, [x9, #12]
    9114:	str	x12, [x9]
    9118:	adds	w12, w13, #0x1
    911c:	stp	w11, w12, [x9, #8]
    9120:	b.cc	90e0 <BZ2_decompress@@Base+0xa28>  // b.lo, b.ul, b.last
    9124:	ldr	w12, [x9, #16]
    9128:	add	w12, w12, #0x1
    912c:	str	w12, [x9, #16]
    9130:	b	90e0 <BZ2_decompress@@Base+0xa28>
    9134:	sub	w9, w8, #0x30
    9138:	stp	w5, w18, [sp, #36]
    913c:	stp	x7, x6, [sp, #48]
    9140:	stp	w4, w14, [x29, #-52]
    9144:	str	w9, [x21, #40]
    9148:	ldrb	w10, [x21, #44]
    914c:	ldr	x8, [x22, #56]
    9150:	ldr	x0, [x22, #72]
    9154:	str	x28, [sp, #72]
    9158:	mov	w28, w3
    915c:	stur	w2, [x29, #-44]
    9160:	str	w1, [sp, #16]
    9164:	str	x30, [sp, #8]
    9168:	str	x17, [sp, #24]
    916c:	str	w16, [sp, #32]
    9170:	stur	x15, [x29, #-64]
    9174:	stur	w27, [x29, #-40]
    9178:	cbz	w10, 925c <BZ2_decompress@@Base+0xba4>
    917c:	mov	w10, #0xd40                 	// #3392
    9180:	movk	w10, #0x3, lsl #16
    9184:	mul	w1, w9, w10
    9188:	mov	w2, #0x1                   	// #1
    918c:	blr	x8
    9190:	ldr	w8, [x21, #40]
    9194:	str	x0, [x21, #3160]
    9198:	ldr	x9, [x22, #56]
    919c:	ldr	x0, [x22, #72]
    91a0:	mov	w10, #0x86a0                	// #34464
    91a4:	movk	w10, #0x1, lsl #16
    91a8:	mul	w8, w8, w10
    91ac:	asr	w1, w8, #1
    91b0:	mov	w2, #0x1                   	// #1
    91b4:	blr	x9
    91b8:	mov	x8, x0
    91bc:	str	x0, [x21, #3168]
    91c0:	mov	w0, #0xfffffffd            	// #-3
    91c4:	cbz	x8, 9ba4 <BZ2_decompress@@Base+0x14ec>
    91c8:	ldr	x8, [x21, #3160]
    91cc:	mov	w3, w28
    91d0:	ldp	w2, w27, [x29, #-44]
    91d4:	ldp	w4, w14, [x29, #-52]
    91d8:	ldur	x15, [x29, #-64]
    91dc:	ldr	x28, [sp, #72]
    91e0:	ldp	w16, w5, [sp, #32]
    91e4:	ldr	x17, [sp, #24]
    91e8:	ldp	x7, x6, [sp, #48]
    91ec:	ldr	x30, [sp, #8]
    91f0:	ldr	w18, [sp, #40]
    91f4:	ldr	w1, [sp, #16]
    91f8:	cbnz	x8, 92a4 <BZ2_decompress@@Base+0xbec>
    91fc:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    9200:	ldr	w9, [x22, #8]
    9204:	sub	w10, w9, #0x1
    9208:	b	9218 <BZ2_decompress@@Base+0xb60>
    920c:	cmp	w8, #0x8
    9210:	sub	w10, w10, #0x1
    9214:	b.pl	879c <BZ2_decompress@@Base+0xe4>  // b.nfrst
    9218:	cmn	w10, #0x1
    921c:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9220:	ldr	x11, [x22]
    9224:	ldr	w12, [x21, #32]
    9228:	add	w8, w8, #0x8
    922c:	ldrb	w9, [x11], #1
    9230:	bfi	w9, w12, #8, #24
    9234:	stp	w9, w8, [x21, #32]
    9238:	ldr	w12, [x22, #12]
    923c:	str	x11, [x22]
    9240:	adds	w11, w12, #0x1
    9244:	stp	w10, w11, [x22, #8]
    9248:	b.cc	920c <BZ2_decompress@@Base+0xb54>  // b.lo, b.ul, b.last
    924c:	ldr	w11, [x22, #16]
    9250:	add	w11, w11, #0x1
    9254:	str	w11, [x22, #16]
    9258:	b	920c <BZ2_decompress@@Base+0xb54>
    925c:	mov	w10, #0x1a80                	// #6784
    9260:	movk	w10, #0x6, lsl #16
    9264:	mul	w1, w9, w10
    9268:	mov	w2, #0x1                   	// #1
    926c:	blr	x8
    9270:	str	x0, [x21, #3152]
    9274:	mov	w3, w28
    9278:	ldp	w2, w27, [x29, #-44]
    927c:	ldp	w4, w14, [x29, #-52]
    9280:	ldur	x15, [x29, #-64]
    9284:	ldr	x28, [sp, #72]
    9288:	ldp	w16, w5, [sp, #32]
    928c:	ldr	x17, [sp, #24]
    9290:	ldp	x7, x6, [sp, #48]
    9294:	ldr	x30, [sp, #8]
    9298:	ldr	w18, [sp, #40]
    929c:	ldr	w1, [sp, #16]
    92a0:	cbz	x0, 9bd4 <BZ2_decompress@@Base+0x151c>
    92a4:	ldr	w8, [x21, #36]
    92a8:	mov	w9, #0xe                   	// #14
    92ac:	str	w9, [x21, #8]
    92b0:	cmp	w8, #0x8
    92b4:	b.lt	9b44 <BZ2_decompress@@Base+0x148c>  // b.tstop
    92b8:	ldr	w10, [x21, #32]
    92bc:	sub	w8, w8, #0x8
    92c0:	lsr	w9, w10, w8
    92c4:	and	w9, w9, #0xff
    92c8:	cmp	w9, #0x17
    92cc:	str	w8, [x21, #36]
    92d0:	b.eq	9570 <BZ2_decompress@@Base+0xeb8>  // b.none
    92d4:	cmp	w9, #0x31
    92d8:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    92dc:	mov	w9, #0xf                   	// #15
    92e0:	cmp	w8, #0x8
    92e4:	str	w9, [x21, #8]
    92e8:	b.lt	9a84 <BZ2_decompress@@Base+0x13cc>  // b.tstop
    92ec:	ldr	w10, [x21, #32]
    92f0:	sub	w8, w8, #0x8
    92f4:	lsr	w9, w10, w8
    92f8:	and	w9, w9, #0xff
    92fc:	cmp	w9, #0x41
    9300:	str	w8, [x21, #36]
    9304:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    9308:	mov	w9, #0x10                  	// #16
    930c:	cmp	w8, #0x8
    9310:	str	w9, [x21, #8]
    9314:	b.lt	99c4 <BZ2_decompress@@Base+0x130c>  // b.tstop
    9318:	ldr	w10, [x21, #32]
    931c:	sub	w8, w8, #0x8
    9320:	lsr	w9, w10, w8
    9324:	and	w9, w9, #0xff
    9328:	cmp	w9, #0x59
    932c:	str	w8, [x21, #36]
    9330:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    9334:	mov	w9, #0x11                  	// #17
    9338:	cmp	w8, #0x8
    933c:	str	w9, [x21, #8]
    9340:	b.lt	9904 <BZ2_decompress@@Base+0x124c>  // b.tstop
    9344:	ldr	w10, [x21, #32]
    9348:	sub	w8, w8, #0x8
    934c:	lsr	w9, w10, w8
    9350:	and	w9, w9, #0xff
    9354:	cmp	w9, #0x26
    9358:	str	w8, [x21, #36]
    935c:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    9360:	mov	w9, #0x12                  	// #18
    9364:	cmp	w8, #0x8
    9368:	str	w9, [x21, #8]
    936c:	b.lt	9844 <BZ2_decompress@@Base+0x118c>  // b.tstop
    9370:	ldr	w10, [x21, #32]
    9374:	sub	w8, w8, #0x8
    9378:	lsr	w9, w10, w8
    937c:	and	w9, w9, #0xff
    9380:	cmp	w9, #0x53
    9384:	str	w8, [x21, #36]
    9388:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    938c:	mov	w9, #0x13                  	// #19
    9390:	cmp	w8, #0x8
    9394:	str	w9, [x21, #8]
    9398:	b.lt	9784 <BZ2_decompress@@Base+0x10cc>  // b.tstop
    939c:	ldr	w10, [x21, #32]
    93a0:	sub	w8, w8, #0x8
    93a4:	lsr	w9, w10, w8
    93a8:	and	w9, w9, #0xff
    93ac:	cmp	w9, #0x59
    93b0:	str	w8, [x21, #36]
    93b4:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    93b8:	ldp	w8, w9, [x21, #48]
    93bc:	mov	w22, w27
    93c0:	mov	w27, w2
    93c4:	add	w2, w8, #0x1
    93c8:	cmp	w9, #0x2
    93cc:	str	w2, [x21, #48]
    93d0:	b.ge	9bdc <BZ2_decompress@@Base+0x1524>  // b.tcont
    93d4:	mov	w2, w27
    93d8:	mov	w27, w22
    93dc:	str	wzr, [x21, #3176]
    93e0:	ldr	w8, [x21, #36]
    93e4:	mov	w9, #0x14                  	// #20
    93e8:	str	w9, [x21, #8]
    93ec:	cmp	w8, #0x8
    93f0:	b.lt	9724 <BZ2_decompress@@Base+0x106c>  // b.tstop
    93f4:	ldr	w9, [x21, #32]
    93f8:	ldr	w10, [x21, #3176]
    93fc:	sub	w8, w8, #0x8
    9400:	lsr	w9, w9, w8
    9404:	str	w8, [x21, #36]
    9408:	bfi	w9, w10, #8, #24
    940c:	str	w9, [x21, #3176]
    9410:	mov	w9, #0x15                  	// #21
    9414:	cmp	w8, #0x8
    9418:	str	w9, [x21, #8]
    941c:	b.lt	898c <BZ2_decompress@@Base+0x2d4>  // b.tstop
    9420:	ldr	w9, [x21, #32]
    9424:	ldr	w10, [x21, #3176]
    9428:	sub	w8, w8, #0x8
    942c:	lsr	w9, w9, w8
    9430:	str	w8, [x21, #36]
    9434:	bfi	w9, w10, #8, #24
    9438:	str	w9, [x21, #3176]
    943c:	mov	w9, #0x16                  	// #22
    9440:	cmp	w8, #0x8
    9444:	str	w9, [x21, #8]
    9448:	b.lt	8a00 <BZ2_decompress@@Base+0x348>  // b.tstop
    944c:	ldr	w9, [x21, #32]
    9450:	ldr	w10, [x21, #3176]
    9454:	sub	w8, w8, #0x8
    9458:	lsr	w9, w9, w8
    945c:	str	w8, [x21, #36]
    9460:	bfi	w9, w10, #8, #24
    9464:	str	w9, [x21, #3176]
    9468:	mov	w9, #0x17                  	// #23
    946c:	cmp	w8, #0x8
    9470:	str	w9, [x21, #8]
    9474:	b.lt	8a74 <BZ2_decompress@@Base+0x3bc>  // b.tstop
    9478:	ldr	w9, [x21, #32]
    947c:	ldr	w10, [x21, #3176]
    9480:	sub	w8, w8, #0x8
    9484:	lsr	w9, w9, w8
    9488:	str	w8, [x21, #36]
    948c:	bfi	w9, w10, #8, #24
    9490:	str	w9, [x21, #3176]
    9494:	mov	w9, #0x18                  	// #24
    9498:	cmp	w8, #0x1
    949c:	str	w9, [x21, #8]
    94a0:	b.lt	96c0 <BZ2_decompress@@Base+0x1008>  // b.tstop
    94a4:	ldr	w10, [x21, #32]
    94a8:	sub	w8, w8, #0x1
    94ac:	lsr	w9, w10, w8
    94b0:	and	w9, w9, #0x1
    94b4:	str	w8, [x21, #36]
    94b8:	strb	w9, [x21, #20]
    94bc:	str	wzr, [x21, #56]
    94c0:	mov	w9, #0x19                  	// #25
    94c4:	cmp	w8, #0x8
    94c8:	str	w9, [x21, #8]
    94cc:	b.lt	8af0 <BZ2_decompress@@Base+0x438>  // b.tstop
    94d0:	ldr	w9, [x21, #32]
    94d4:	ldr	w10, [x21, #56]
    94d8:	sub	w8, w8, #0x8
    94dc:	lsr	w9, w9, w8
    94e0:	str	w8, [x21, #36]
    94e4:	bfi	w9, w10, #8, #24
    94e8:	str	w9, [x21, #56]
    94ec:	mov	w9, #0x1a                  	// #26
    94f0:	cmp	w8, #0x8
    94f4:	str	w9, [x21, #8]
    94f8:	b.lt	8b64 <BZ2_decompress@@Base+0x4ac>  // b.tstop
    94fc:	ldr	w9, [x21, #32]
    9500:	ldr	w10, [x21, #56]
    9504:	sub	w8, w8, #0x8
    9508:	lsr	w9, w9, w8
    950c:	str	w8, [x21, #36]
    9510:	bfi	w9, w10, #8, #24
    9514:	str	w9, [x21, #56]
    9518:	mov	w9, #0x1b                  	// #27
    951c:	cmp	w8, #0x8
    9520:	str	w9, [x21, #8]
    9524:	b.lt	8bd8 <BZ2_decompress@@Base+0x520>  // b.tstop
    9528:	ldr	w10, [x21, #32]
    952c:	ldr	w9, [x21, #56]
    9530:	sub	w11, w8, #0x8
    9534:	lsr	w8, w10, w11
    9538:	str	w11, [x21, #36]
    953c:	bfi	w8, w9, #8, #24
    9540:	str	w8, [x21, #56]
    9544:	tbnz	w8, #31, 9e54 <BZ2_decompress@@Base+0x179c>
    9548:	ldr	w9, [x21, #40]
    954c:	mov	w10, #0x86a0                	// #34464
    9550:	movk	w10, #0x1, lsl #16
    9554:	mul	w9, w9, w10
    9558:	mov	w10, #0xa                   	// #10
    955c:	orr	w9, w9, w10
    9560:	cmp	w8, w9
    9564:	b.gt	9e54 <BZ2_decompress@@Base+0x179c>
    9568:	mov	w8, wzr
    956c:	b	9c78 <BZ2_decompress@@Base+0x15c0>
    9570:	mov	w9, #0x2a                  	// #42
    9574:	cmp	w8, #0x8
    9578:	str	w9, [x21, #8]
    957c:	b.lt	9ae4 <BZ2_decompress@@Base+0x142c>  // b.tstop
    9580:	ldr	w10, [x21, #32]
    9584:	sub	w8, w8, #0x8
    9588:	lsr	w9, w10, w8
    958c:	and	w9, w9, #0xff
    9590:	cmp	w9, #0x72
    9594:	str	w8, [x21, #36]
    9598:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    959c:	mov	w9, #0x2b                  	// #43
    95a0:	cmp	w8, #0x8
    95a4:	str	w9, [x21, #8]
    95a8:	b.lt	9a24 <BZ2_decompress@@Base+0x136c>  // b.tstop
    95ac:	ldr	w10, [x21, #32]
    95b0:	sub	w8, w8, #0x8
    95b4:	lsr	w9, w10, w8
    95b8:	and	w9, w9, #0xff
    95bc:	cmp	w9, #0x45
    95c0:	str	w8, [x21, #36]
    95c4:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    95c8:	mov	w9, #0x2c                  	// #44
    95cc:	cmp	w8, #0x8
    95d0:	str	w9, [x21, #8]
    95d4:	b.lt	9964 <BZ2_decompress@@Base+0x12ac>  // b.tstop
    95d8:	ldr	w10, [x21, #32]
    95dc:	sub	w8, w8, #0x8
    95e0:	lsr	w9, w10, w8
    95e4:	and	w9, w9, #0xff
    95e8:	cmp	w9, #0x38
    95ec:	str	w8, [x21, #36]
    95f0:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    95f4:	mov	w9, #0x2d                  	// #45
    95f8:	cmp	w8, #0x8
    95fc:	str	w9, [x21, #8]
    9600:	b.lt	98a4 <BZ2_decompress@@Base+0x11ec>  // b.tstop
    9604:	ldr	w10, [x21, #32]
    9608:	sub	w8, w8, #0x8
    960c:	lsr	w9, w10, w8
    9610:	and	w9, w9, #0xff
    9614:	cmp	w9, #0x50
    9618:	str	w8, [x21, #36]
    961c:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    9620:	mov	w9, #0x2e                  	// #46
    9624:	cmp	w8, #0x8
    9628:	str	w9, [x21, #8]
    962c:	b.lt	97e4 <BZ2_decompress@@Base+0x112c>  // b.tstop
    9630:	ldr	w10, [x21, #32]
    9634:	sub	w8, w8, #0x8
    9638:	lsr	w9, w10, w8
    963c:	and	w9, w9, #0xff
    9640:	cmp	w9, #0x90
    9644:	str	w8, [x21, #36]
    9648:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    964c:	str	wzr, [x21, #3180]
    9650:	mov	w9, #0x2f                  	// #47
    9654:	cmp	w8, #0x8
    9658:	str	w9, [x21, #8]
    965c:	b.ge	8db0 <BZ2_decompress@@Base+0x6f8>  // b.tcont
    9660:	ldr	x10, [x21]
    9664:	ldr	w9, [x10, #8]
    9668:	sub	w11, w9, #0x1
    966c:	b	967c <BZ2_decompress@@Base+0xfc4>
    9670:	cmp	w8, #0x8
    9674:	sub	w11, w11, #0x1
    9678:	b.pl	8db4 <BZ2_decompress@@Base+0x6fc>  // b.nfrst
    967c:	cmn	w11, #0x1
    9680:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9684:	ldr	x12, [x10]
    9688:	ldr	w13, [x21, #32]
    968c:	add	w8, w8, #0x8
    9690:	ldrb	w9, [x12], #1
    9694:	bfi	w9, w13, #8, #24
    9698:	stp	w9, w8, [x21, #32]
    969c:	ldr	w13, [x10, #12]
    96a0:	str	x12, [x10]
    96a4:	adds	w12, w13, #0x1
    96a8:	stp	w11, w12, [x10, #8]
    96ac:	b.cc	9670 <BZ2_decompress@@Base+0xfb8>  // b.lo, b.ul, b.last
    96b0:	ldr	w12, [x10, #16]
    96b4:	add	w12, w12, #0x1
    96b8:	str	w12, [x10, #16]
    96bc:	b	9670 <BZ2_decompress@@Base+0xfb8>
    96c0:	ldr	x9, [x21]
    96c4:	ldr	w10, [x9, #8]
    96c8:	sub	w11, w10, #0x1
    96cc:	b	96e0 <BZ2_decompress@@Base+0x1028>
    96d0:	sub	w12, w8, #0x8
    96d4:	cmn	w12, #0x8
    96d8:	sub	w11, w11, #0x1
    96dc:	b.gt	94a8 <BZ2_decompress@@Base+0xdf0>
    96e0:	cmn	w11, #0x1
    96e4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    96e8:	ldr	x12, [x9]
    96ec:	ldr	w13, [x21, #32]
    96f0:	add	w8, w8, #0x8
    96f4:	ldrb	w10, [x12], #1
    96f8:	bfi	w10, w13, #8, #24
    96fc:	stp	w10, w8, [x21, #32]
    9700:	ldr	w13, [x9, #12]
    9704:	str	x12, [x9]
    9708:	adds	w12, w13, #0x1
    970c:	stp	w11, w12, [x9, #8]
    9710:	b.cc	96d0 <BZ2_decompress@@Base+0x1018>  // b.lo, b.ul, b.last
    9714:	ldr	w12, [x9, #16]
    9718:	add	w12, w12, #0x1
    971c:	str	w12, [x9, #16]
    9720:	b	96d0 <BZ2_decompress@@Base+0x1018>
    9724:	ldr	x10, [x21]
    9728:	ldr	w9, [x10, #8]
    972c:	sub	w11, w9, #0x1
    9730:	b	9740 <BZ2_decompress@@Base+0x1088>
    9734:	cmp	w8, #0x8
    9738:	sub	w11, w11, #0x1
    973c:	b.pl	93f8 <BZ2_decompress@@Base+0xd40>  // b.nfrst
    9740:	cmn	w11, #0x1
    9744:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9748:	ldr	x12, [x10]
    974c:	ldr	w13, [x21, #32]
    9750:	add	w8, w8, #0x8
    9754:	ldrb	w9, [x12], #1
    9758:	bfi	w9, w13, #8, #24
    975c:	stp	w9, w8, [x21, #32]
    9760:	ldr	w13, [x10, #12]
    9764:	str	x12, [x10]
    9768:	adds	w12, w13, #0x1
    976c:	stp	w11, w12, [x10, #8]
    9770:	b.cc	9734 <BZ2_decompress@@Base+0x107c>  // b.lo, b.ul, b.last
    9774:	ldr	w12, [x10, #16]
    9778:	add	w12, w12, #0x1
    977c:	str	w12, [x10, #16]
    9780:	b	9734 <BZ2_decompress@@Base+0x107c>
    9784:	ldr	x9, [x21]
    9788:	ldr	w10, [x9, #8]
    978c:	sub	w11, w10, #0x1
    9790:	b	97a0 <BZ2_decompress@@Base+0x10e8>
    9794:	cmp	w8, #0x8
    9798:	sub	w11, w11, #0x1
    979c:	b.pl	93a0 <BZ2_decompress@@Base+0xce8>  // b.nfrst
    97a0:	cmn	w11, #0x1
    97a4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    97a8:	ldr	x12, [x9]
    97ac:	ldr	w13, [x21, #32]
    97b0:	add	w8, w8, #0x8
    97b4:	ldrb	w10, [x12], #1
    97b8:	bfi	w10, w13, #8, #24
    97bc:	stp	w10, w8, [x21, #32]
    97c0:	ldr	w13, [x9, #12]
    97c4:	str	x12, [x9]
    97c8:	adds	w12, w13, #0x1
    97cc:	stp	w11, w12, [x9, #8]
    97d0:	b.cc	9794 <BZ2_decompress@@Base+0x10dc>  // b.lo, b.ul, b.last
    97d4:	ldr	w12, [x9, #16]
    97d8:	add	w12, w12, #0x1
    97dc:	str	w12, [x9, #16]
    97e0:	b	9794 <BZ2_decompress@@Base+0x10dc>
    97e4:	ldr	x9, [x21]
    97e8:	ldr	w10, [x9, #8]
    97ec:	sub	w11, w10, #0x1
    97f0:	b	9800 <BZ2_decompress@@Base+0x1148>
    97f4:	cmp	w8, #0x8
    97f8:	sub	w11, w11, #0x1
    97fc:	b.pl	9634 <BZ2_decompress@@Base+0xf7c>  // b.nfrst
    9800:	cmn	w11, #0x1
    9804:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9808:	ldr	x12, [x9]
    980c:	ldr	w13, [x21, #32]
    9810:	add	w8, w8, #0x8
    9814:	ldrb	w10, [x12], #1
    9818:	bfi	w10, w13, #8, #24
    981c:	stp	w10, w8, [x21, #32]
    9820:	ldr	w13, [x9, #12]
    9824:	str	x12, [x9]
    9828:	adds	w12, w13, #0x1
    982c:	stp	w11, w12, [x9, #8]
    9830:	b.cc	97f4 <BZ2_decompress@@Base+0x113c>  // b.lo, b.ul, b.last
    9834:	ldr	w12, [x9, #16]
    9838:	add	w12, w12, #0x1
    983c:	str	w12, [x9, #16]
    9840:	b	97f4 <BZ2_decompress@@Base+0x113c>
    9844:	ldr	x9, [x21]
    9848:	ldr	w10, [x9, #8]
    984c:	sub	w11, w10, #0x1
    9850:	b	9860 <BZ2_decompress@@Base+0x11a8>
    9854:	cmp	w8, #0x8
    9858:	sub	w11, w11, #0x1
    985c:	b.pl	9374 <BZ2_decompress@@Base+0xcbc>  // b.nfrst
    9860:	cmn	w11, #0x1
    9864:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9868:	ldr	x12, [x9]
    986c:	ldr	w13, [x21, #32]
    9870:	add	w8, w8, #0x8
    9874:	ldrb	w10, [x12], #1
    9878:	bfi	w10, w13, #8, #24
    987c:	stp	w10, w8, [x21, #32]
    9880:	ldr	w13, [x9, #12]
    9884:	str	x12, [x9]
    9888:	adds	w12, w13, #0x1
    988c:	stp	w11, w12, [x9, #8]
    9890:	b.cc	9854 <BZ2_decompress@@Base+0x119c>  // b.lo, b.ul, b.last
    9894:	ldr	w12, [x9, #16]
    9898:	add	w12, w12, #0x1
    989c:	str	w12, [x9, #16]
    98a0:	b	9854 <BZ2_decompress@@Base+0x119c>
    98a4:	ldr	x9, [x21]
    98a8:	ldr	w10, [x9, #8]
    98ac:	sub	w11, w10, #0x1
    98b0:	b	98c0 <BZ2_decompress@@Base+0x1208>
    98b4:	cmp	w8, #0x8
    98b8:	sub	w11, w11, #0x1
    98bc:	b.pl	9608 <BZ2_decompress@@Base+0xf50>  // b.nfrst
    98c0:	cmn	w11, #0x1
    98c4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    98c8:	ldr	x12, [x9]
    98cc:	ldr	w13, [x21, #32]
    98d0:	add	w8, w8, #0x8
    98d4:	ldrb	w10, [x12], #1
    98d8:	bfi	w10, w13, #8, #24
    98dc:	stp	w10, w8, [x21, #32]
    98e0:	ldr	w13, [x9, #12]
    98e4:	str	x12, [x9]
    98e8:	adds	w12, w13, #0x1
    98ec:	stp	w11, w12, [x9, #8]
    98f0:	b.cc	98b4 <BZ2_decompress@@Base+0x11fc>  // b.lo, b.ul, b.last
    98f4:	ldr	w12, [x9, #16]
    98f8:	add	w12, w12, #0x1
    98fc:	str	w12, [x9, #16]
    9900:	b	98b4 <BZ2_decompress@@Base+0x11fc>
    9904:	ldr	x9, [x21]
    9908:	ldr	w10, [x9, #8]
    990c:	sub	w11, w10, #0x1
    9910:	b	9920 <BZ2_decompress@@Base+0x1268>
    9914:	cmp	w8, #0x8
    9918:	sub	w11, w11, #0x1
    991c:	b.pl	9348 <BZ2_decompress@@Base+0xc90>  // b.nfrst
    9920:	cmn	w11, #0x1
    9924:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9928:	ldr	x12, [x9]
    992c:	ldr	w13, [x21, #32]
    9930:	add	w8, w8, #0x8
    9934:	ldrb	w10, [x12], #1
    9938:	bfi	w10, w13, #8, #24
    993c:	stp	w10, w8, [x21, #32]
    9940:	ldr	w13, [x9, #12]
    9944:	str	x12, [x9]
    9948:	adds	w12, w13, #0x1
    994c:	stp	w11, w12, [x9, #8]
    9950:	b.cc	9914 <BZ2_decompress@@Base+0x125c>  // b.lo, b.ul, b.last
    9954:	ldr	w12, [x9, #16]
    9958:	add	w12, w12, #0x1
    995c:	str	w12, [x9, #16]
    9960:	b	9914 <BZ2_decompress@@Base+0x125c>
    9964:	ldr	x9, [x21]
    9968:	ldr	w10, [x9, #8]
    996c:	sub	w11, w10, #0x1
    9970:	b	9980 <BZ2_decompress@@Base+0x12c8>
    9974:	cmp	w8, #0x8
    9978:	sub	w11, w11, #0x1
    997c:	b.pl	95dc <BZ2_decompress@@Base+0xf24>  // b.nfrst
    9980:	cmn	w11, #0x1
    9984:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9988:	ldr	x12, [x9]
    998c:	ldr	w13, [x21, #32]
    9990:	add	w8, w8, #0x8
    9994:	ldrb	w10, [x12], #1
    9998:	bfi	w10, w13, #8, #24
    999c:	stp	w10, w8, [x21, #32]
    99a0:	ldr	w13, [x9, #12]
    99a4:	str	x12, [x9]
    99a8:	adds	w12, w13, #0x1
    99ac:	stp	w11, w12, [x9, #8]
    99b0:	b.cc	9974 <BZ2_decompress@@Base+0x12bc>  // b.lo, b.ul, b.last
    99b4:	ldr	w12, [x9, #16]
    99b8:	add	w12, w12, #0x1
    99bc:	str	w12, [x9, #16]
    99c0:	b	9974 <BZ2_decompress@@Base+0x12bc>
    99c4:	ldr	x9, [x21]
    99c8:	ldr	w10, [x9, #8]
    99cc:	sub	w11, w10, #0x1
    99d0:	b	99e0 <BZ2_decompress@@Base+0x1328>
    99d4:	cmp	w8, #0x8
    99d8:	sub	w11, w11, #0x1
    99dc:	b.pl	931c <BZ2_decompress@@Base+0xc64>  // b.nfrst
    99e0:	cmn	w11, #0x1
    99e4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    99e8:	ldr	x12, [x9]
    99ec:	ldr	w13, [x21, #32]
    99f0:	add	w8, w8, #0x8
    99f4:	ldrb	w10, [x12], #1
    99f8:	bfi	w10, w13, #8, #24
    99fc:	stp	w10, w8, [x21, #32]
    9a00:	ldr	w13, [x9, #12]
    9a04:	str	x12, [x9]
    9a08:	adds	w12, w13, #0x1
    9a0c:	stp	w11, w12, [x9, #8]
    9a10:	b.cc	99d4 <BZ2_decompress@@Base+0x131c>  // b.lo, b.ul, b.last
    9a14:	ldr	w12, [x9, #16]
    9a18:	add	w12, w12, #0x1
    9a1c:	str	w12, [x9, #16]
    9a20:	b	99d4 <BZ2_decompress@@Base+0x131c>
    9a24:	ldr	x9, [x21]
    9a28:	ldr	w10, [x9, #8]
    9a2c:	sub	w11, w10, #0x1
    9a30:	b	9a40 <BZ2_decompress@@Base+0x1388>
    9a34:	cmp	w8, #0x8
    9a38:	sub	w11, w11, #0x1
    9a3c:	b.pl	95b0 <BZ2_decompress@@Base+0xef8>  // b.nfrst
    9a40:	cmn	w11, #0x1
    9a44:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9a48:	ldr	x12, [x9]
    9a4c:	ldr	w13, [x21, #32]
    9a50:	add	w8, w8, #0x8
    9a54:	ldrb	w10, [x12], #1
    9a58:	bfi	w10, w13, #8, #24
    9a5c:	stp	w10, w8, [x21, #32]
    9a60:	ldr	w13, [x9, #12]
    9a64:	str	x12, [x9]
    9a68:	adds	w12, w13, #0x1
    9a6c:	stp	w11, w12, [x9, #8]
    9a70:	b.cc	9a34 <BZ2_decompress@@Base+0x137c>  // b.lo, b.ul, b.last
    9a74:	ldr	w12, [x9, #16]
    9a78:	add	w12, w12, #0x1
    9a7c:	str	w12, [x9, #16]
    9a80:	b	9a34 <BZ2_decompress@@Base+0x137c>
    9a84:	ldr	x9, [x21]
    9a88:	ldr	w10, [x9, #8]
    9a8c:	sub	w11, w10, #0x1
    9a90:	b	9aa0 <BZ2_decompress@@Base+0x13e8>
    9a94:	cmp	w8, #0x8
    9a98:	sub	w11, w11, #0x1
    9a9c:	b.pl	92f0 <BZ2_decompress@@Base+0xc38>  // b.nfrst
    9aa0:	cmn	w11, #0x1
    9aa4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9aa8:	ldr	x12, [x9]
    9aac:	ldr	w13, [x21, #32]
    9ab0:	add	w8, w8, #0x8
    9ab4:	ldrb	w10, [x12], #1
    9ab8:	bfi	w10, w13, #8, #24
    9abc:	stp	w10, w8, [x21, #32]
    9ac0:	ldr	w13, [x9, #12]
    9ac4:	str	x12, [x9]
    9ac8:	adds	w12, w13, #0x1
    9acc:	stp	w11, w12, [x9, #8]
    9ad0:	b.cc	9a94 <BZ2_decompress@@Base+0x13dc>  // b.lo, b.ul, b.last
    9ad4:	ldr	w12, [x9, #16]
    9ad8:	add	w12, w12, #0x1
    9adc:	str	w12, [x9, #16]
    9ae0:	b	9a94 <BZ2_decompress@@Base+0x13dc>
    9ae4:	ldr	x9, [x21]
    9ae8:	ldr	w10, [x9, #8]
    9aec:	sub	w11, w10, #0x1
    9af0:	b	9b00 <BZ2_decompress@@Base+0x1448>
    9af4:	cmp	w8, #0x8
    9af8:	sub	w11, w11, #0x1
    9afc:	b.pl	9584 <BZ2_decompress@@Base+0xecc>  // b.nfrst
    9b00:	cmn	w11, #0x1
    9b04:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9b08:	ldr	x12, [x9]
    9b0c:	ldr	w13, [x21, #32]
    9b10:	add	w8, w8, #0x8
    9b14:	ldrb	w10, [x12], #1
    9b18:	bfi	w10, w13, #8, #24
    9b1c:	stp	w10, w8, [x21, #32]
    9b20:	ldr	w13, [x9, #12]
    9b24:	str	x12, [x9]
    9b28:	adds	w12, w13, #0x1
    9b2c:	stp	w11, w12, [x9, #8]
    9b30:	b.cc	9af4 <BZ2_decompress@@Base+0x143c>  // b.lo, b.ul, b.last
    9b34:	ldr	w12, [x9, #16]
    9b38:	add	w12, w12, #0x1
    9b3c:	str	w12, [x9, #16]
    9b40:	b	9af4 <BZ2_decompress@@Base+0x143c>
    9b44:	ldr	x9, [x21]
    9b48:	ldr	w10, [x9, #8]
    9b4c:	sub	w11, w10, #0x1
    9b50:	b	9b60 <BZ2_decompress@@Base+0x14a8>
    9b54:	cmp	w8, #0x8
    9b58:	sub	w11, w11, #0x1
    9b5c:	b.pl	92bc <BZ2_decompress@@Base+0xc04>  // b.nfrst
    9b60:	cmn	w11, #0x1
    9b64:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9b68:	ldr	x12, [x9]
    9b6c:	ldr	w13, [x21, #32]
    9b70:	add	w8, w8, #0x8
    9b74:	ldrb	w10, [x12], #1
    9b78:	bfi	w10, w13, #8, #24
    9b7c:	stp	w10, w8, [x21, #32]
    9b80:	ldr	w13, [x9, #12]
    9b84:	str	x12, [x9]
    9b88:	adds	w12, w13, #0x1
    9b8c:	stp	w11, w12, [x9, #8]
    9b90:	b.cc	9b54 <BZ2_decompress@@Base+0x149c>  // b.lo, b.ul, b.last
    9b94:	ldr	w12, [x9, #16]
    9b98:	add	w12, w12, #0x1
    9b9c:	str	w12, [x9, #16]
    9ba0:	b	9b54 <BZ2_decompress@@Base+0x149c>
    9ba4:	mov	w3, w28
    9ba8:	ldp	w2, w27, [x29, #-44]
    9bac:	ldp	w4, w14, [x29, #-52]
    9bb0:	ldur	x15, [x29, #-64]
    9bb4:	ldr	x28, [sp, #72]
    9bb8:	ldp	w16, w5, [sp, #32]
    9bbc:	ldr	x17, [sp, #24]
    9bc0:	ldp	x7, x6, [sp, #48]
    9bc4:	ldr	x30, [sp, #8]
    9bc8:	ldr	w18, [sp, #40]
    9bcc:	ldr	w1, [sp, #16]
    9bd0:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    9bd4:	mov	w0, #0xfffffffd            	// #-3
    9bd8:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    9bdc:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    9be0:	ldr	x8, [x8, #4016]
    9be4:	str	w1, [sp, #16]
    9be8:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    9bec:	add	x1, x1, #0xc0a
    9bf0:	ldr	x0, [x8]
    9bf4:	str	w3, [sp, #68]
    9bf8:	stur	w4, [x29, #-52]
    9bfc:	stur	w19, [x29, #-44]
    9c00:	str	w20, [sp, #64]
    9c04:	stp	x26, x23, [sp, #40]
    9c08:	str	x28, [sp, #72]
    9c0c:	str	w24, [sp, #56]
    9c10:	stur	w14, [x29, #-48]
    9c14:	stur	x15, [x29, #-64]
    9c18:	mov	w19, w16
    9c1c:	str	w5, [sp, #36]
    9c20:	mov	x23, x17
    9c24:	mov	x26, x6
    9c28:	mov	x28, x7
    9c2c:	mov	x24, x30
    9c30:	mov	w20, w18
    9c34:	bl	1610 <fprintf@plt>
    9c38:	ldr	w1, [sp, #16]
    9c3c:	mov	w18, w20
    9c40:	mov	x30, x24
    9c44:	mov	x7, x28
    9c48:	mov	x6, x26
    9c4c:	mov	x17, x23
    9c50:	ldr	w5, [sp, #36]
    9c54:	mov	w16, w19
    9c58:	ldur	x15, [x29, #-64]
    9c5c:	ldp	w14, w19, [x29, #-48]
    9c60:	ldr	w24, [sp, #56]
    9c64:	ldr	x28, [sp, #72]
    9c68:	ldp	x26, x23, [sp, #40]
    9c6c:	ldp	w20, w3, [sp, #64]
    9c70:	ldur	w4, [x29, #-52]
    9c74:	b	93d4 <BZ2_decompress@@Base+0xd1c>
    9c78:	cmp	w8, #0x10
    9c7c:	stur	x8, [x29, #-16]
    9c80:	b.ge	9d28 <BZ2_decompress@@Base+0x1670>  // b.tcont
    9c84:	ldr	w8, [x21, #36]
    9c88:	mov	w9, #0x1c                  	// #28
    9c8c:	str	w9, [x21, #8]
    9c90:	cmp	w8, #0x1
    9c94:	b.lt	9cc4 <BZ2_decompress@@Base+0x160c>  // b.tstop
    9c98:	ldr	w9, [x21, #32]
    9c9c:	ldur	x11, [x29, #-16]
    9ca0:	sub	w8, w8, #0x1
    9ca4:	str	w8, [x21, #36]
    9ca8:	lsr	w8, w9, w8
    9cac:	add	x10, x21, w11, sxtw
    9cb0:	and	w8, w8, #0x1
    9cb4:	strb	w8, [x10, #3452]
    9cb8:	mov	x8, x11
    9cbc:	add	w8, w8, #0x1
    9cc0:	b	9c78 <BZ2_decompress@@Base+0x15c0>
    9cc4:	ldr	x10, [x21]
    9cc8:	ldr	w9, [x10, #8]
    9ccc:	sub	w11, w9, #0x1
    9cd0:	b	9ce4 <BZ2_decompress@@Base+0x162c>
    9cd4:	sub	w12, w8, #0x8
    9cd8:	cmn	w12, #0x8
    9cdc:	sub	w11, w11, #0x1
    9ce0:	b.gt	9c9c <BZ2_decompress@@Base+0x15e4>
    9ce4:	cmn	w11, #0x1
    9ce8:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9cec:	ldr	x12, [x10]
    9cf0:	ldr	w13, [x21, #32]
    9cf4:	add	w8, w8, #0x8
    9cf8:	ldrb	w9, [x12], #1
    9cfc:	bfi	w9, w13, #8, #24
    9d00:	stp	w9, w8, [x21, #32]
    9d04:	ldr	w13, [x10, #12]
    9d08:	str	x12, [x10]
    9d0c:	adds	w12, w13, #0x1
    9d10:	stp	w11, w12, [x10, #8]
    9d14:	b.cc	9cd4 <BZ2_decompress@@Base+0x161c>  // b.lo, b.ul, b.last
    9d18:	ldr	w12, [x10, #16]
    9d1c:	add	w12, w12, #0x1
    9d20:	str	w12, [x10, #16]
    9d24:	b	9cd4 <BZ2_decompress@@Base+0x161c>
    9d28:	mov	w9, wzr
    9d2c:	add	x8, x21, #0xc7c
    9d30:	movi	v0.2d, #0x0
    9d34:	stp	q0, q0, [x8, #224]
    9d38:	stp	q0, q0, [x8, #192]
    9d3c:	stp	q0, q0, [x8, #160]
    9d40:	stp	q0, q0, [x8, #128]
    9d44:	stp	q0, q0, [x8, #96]
    9d48:	stp	q0, q0, [x8, #64]
    9d4c:	stp	q0, q0, [x8, #32]
    9d50:	stp	q0, q0, [x8]
    9d54:	mov	x8, x9
    9d58:	b	9ec8 <BZ2_decompress@@Base+0x1810>
    9d5c:	mov	w9, #0x25                  	// #37
    9d60:	cmp	w8, #0x1
    9d64:	str	w9, [x21, #8]
    9d68:	b.lt	9da4 <BZ2_decompress@@Base+0x16ec>  // b.tstop
    9d6c:	ldr	w10, [x21, #32]
    9d70:	sub	w8, w8, #0x1
    9d74:	lsr	w9, w10, w8
    9d78:	and	w14, w9, #0x1
    9d7c:	bfi	w9, w20, #1, #31
    9d80:	str	w8, [x21, #36]
    9d84:	mov	w20, w9
    9d88:	cmp	w17, #0x14
    9d8c:	b.gt	9e54 <BZ2_decompress@@Base+0x179c>
    9d90:	ldr	w9, [x26, w17, sxtw #2]
    9d94:	cmp	w20, w9
    9d98:	b.le	a8e4 <BZ2_decompress@@Base+0x222c>
    9d9c:	add	w17, w17, #0x1
    9da0:	b	9d5c <BZ2_decompress@@Base+0x16a4>
    9da4:	ldr	x9, [x21]
    9da8:	ldr	w10, [x9, #8]
    9dac:	sub	w11, w10, #0x1
    9db0:	b	9dc4 <BZ2_decompress@@Base+0x170c>
    9db4:	sub	w12, w8, #0x8
    9db8:	cmn	w12, #0x8
    9dbc:	sub	w11, w11, #0x1
    9dc0:	b.gt	9d70 <BZ2_decompress@@Base+0x16b8>
    9dc4:	cmn	w11, #0x1
    9dc8:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9dcc:	ldr	x12, [x9]
    9dd0:	ldr	w13, [x21, #32]
    9dd4:	add	w8, w8, #0x8
    9dd8:	ldrb	w10, [x12], #1
    9ddc:	bfi	w10, w13, #8, #24
    9de0:	stp	w10, w8, [x21, #32]
    9de4:	ldr	w13, [x9, #12]
    9de8:	str	x12, [x9]
    9dec:	adds	w12, w13, #0x1
    9df0:	stp	w11, w12, [x9, #8]
    9df4:	b.cc	9db4 <BZ2_decompress@@Base+0x16fc>  // b.lo, b.ul, b.last
    9df8:	ldr	w12, [x9, #16]
    9dfc:	add	w12, w12, #0x1
    9e00:	str	w12, [x9, #16]
    9e04:	b	9db4 <BZ2_decompress@@Base+0x16fc>
    9e08:	ldr	w10, [x21, #32]
    9e0c:	sub	w8, w8, #0x1
    9e10:	lsr	w9, w10, w8
    9e14:	and	w14, w9, #0x1
    9e18:	bfi	w9, w20, #1, #31
    9e1c:	str	w8, [x21, #36]
    9e20:	mov	w20, w9
    9e24:	b	ae14 <BZ2_decompress@@Base+0x275c>
    9e28:	ldr	w10, [x21, #32]
    9e2c:	sub	w8, w8, #0x1
    9e30:	lsr	w9, w10, w8
    9e34:	and	w14, w9, #0x1
    9e38:	bfi	w9, w20, #1, #31
    9e3c:	str	w8, [x21, #36]
    9e40:	mov	w20, w9
    9e44:	b	acd0 <BZ2_decompress@@Base+0x2618>
    9e48:	mov	w0, wzr
    9e4c:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    9e50:	mov	w1, wzr
    9e54:	mov	w0, #0xfffffffc            	// #-4
    9e58:	ldur	w8, [x29, #-36]
    9e5c:	ldur	x9, [x29, #-16]
    9e60:	stp	w18, w2, [x25, #8]
    9e64:	stp	w27, w16, [x25, #16]
    9e68:	str	w24, [x25, #80]
    9e6c:	stp	w9, w19, [x25]
    9e70:	ldur	w9, [x29, #-32]
    9e74:	stur	x26, [x25, #84]
    9e78:	stur	x23, [x25, #92]
    9e7c:	stur	x28, [x25, #100]
    9e80:	stp	w9, w30, [x25, #24]
    9e84:	ldur	w9, [x29, #-20]
    9e88:	stp	w6, w7, [x25, #40]
    9e8c:	stp	w5, w3, [x25, #48]
    9e90:	stp	w4, w8, [x25, #56]
    9e94:	stp	w1, w9, [x25, #32]
    9e98:	stp	w17, w20, [x25, #64]
    9e9c:	stp	w14, w15, [x25, #72]
    9ea0:	ldp	x20, x19, [sp, #224]
    9ea4:	ldp	x22, x21, [sp, #208]
    9ea8:	ldp	x24, x23, [sp, #192]
    9eac:	ldp	x26, x25, [sp, #176]
    9eb0:	ldp	x28, x27, [sp, #160]
    9eb4:	ldp	x29, x30, [sp, #144]
    9eb8:	add	sp, sp, #0xf0
    9ebc:	ret
    9ec0:	ldur	x8, [x29, #-16]
    9ec4:	add	w8, w8, #0x1
    9ec8:	cmp	w8, #0xf
    9ecc:	stur	x8, [x29, #-16]
    9ed0:	b.gt	9ef0 <BZ2_decompress@@Base+0x1838>
    9ed4:	add	x8, x21, w8, sxtw
    9ed8:	ldrb	w8, [x8, #3452]
    9edc:	cbz	w8, 9ec0 <BZ2_decompress@@Base+0x1808>
    9ee0:	mov	w19, wzr
    9ee4:	cmp	w19, #0xf
    9ee8:	b.gt	9ec0 <BZ2_decompress@@Base+0x1808>
    9eec:	b	9fe4 <BZ2_decompress@@Base+0x192c>
    9ef0:	mov	w9, wzr
    9ef4:	mov	x8, xzr
    9ef8:	add	x10, x21, #0xc7c
    9efc:	str	wzr, [x21, #3192]
    9f00:	b	9f10 <BZ2_decompress@@Base+0x1858>
    9f04:	add	x8, x8, #0x1
    9f08:	cmp	x8, #0x100
    9f0c:	b.eq	9f30 <BZ2_decompress@@Base+0x1878>  // b.none
    9f10:	ldrb	w11, [x10, x8]
    9f14:	cbz	w11, 9f04 <BZ2_decompress@@Base+0x184c>
    9f18:	add	x9, x21, w9, sxtw
    9f1c:	strb	w8, [x9, #3468]
    9f20:	ldr	w9, [x21, #3192]
    9f24:	add	w9, w9, #0x1
    9f28:	str	w9, [x21, #3192]
    9f2c:	b	9f04 <BZ2_decompress@@Base+0x184c>
    9f30:	cbz	w9, 9e54 <BZ2_decompress@@Base+0x179c>
    9f34:	add	w2, w9, #0x2
    9f38:	ldr	w8, [x21, #36]
    9f3c:	mov	w9, #0x1e                  	// #30
    9f40:	str	w9, [x21, #8]
    9f44:	cmp	w8, #0x3
    9f48:	b.lt	9f80 <BZ2_decompress@@Base+0x18c8>  // b.tstop
    9f4c:	ldr	w10, [x21, #32]
    9f50:	sub	w8, w8, #0x3
    9f54:	lsr	w9, w10, w8
    9f58:	and	w27, w9, #0x7
    9f5c:	cmp	w27, #0x7
    9f60:	str	w8, [x21, #36]
    9f64:	b.hi	8c3c <BZ2_decompress@@Base+0x584>  // b.pmore
    9f68:	mov	w9, #0x1                   	// #1
    9f6c:	lsl	w9, w9, w27
    9f70:	mov	w10, #0x83                  	// #131
    9f74:	tst	w9, w10
    9f78:	b.ne	9e54 <BZ2_decompress@@Base+0x179c>  // b.any
    9f7c:	b	8c3c <BZ2_decompress@@Base+0x584>
    9f80:	ldr	x9, [x21]
    9f84:	ldr	w10, [x9, #8]
    9f88:	sub	w11, w10, #0x1
    9f8c:	b	9fa0 <BZ2_decompress@@Base+0x18e8>
    9f90:	sub	w12, w8, #0x8
    9f94:	cmn	w12, #0x6
    9f98:	sub	w11, w11, #0x1
    9f9c:	b.gt	9f50 <BZ2_decompress@@Base+0x1898>
    9fa0:	cmn	w11, #0x1
    9fa4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    9fa8:	ldr	x12, [x9]
    9fac:	ldr	w13, [x21, #32]
    9fb0:	add	w8, w8, #0x8
    9fb4:	ldrb	w10, [x12], #1
    9fb8:	bfi	w10, w13, #8, #24
    9fbc:	stp	w10, w8, [x21, #32]
    9fc0:	ldr	w13, [x9, #12]
    9fc4:	str	x12, [x9]
    9fc8:	adds	w12, w13, #0x1
    9fcc:	stp	w11, w12, [x9, #8]
    9fd0:	b.cc	9f90 <BZ2_decompress@@Base+0x18d8>  // b.lo, b.ul, b.last
    9fd4:	ldr	w12, [x9, #16]
    9fd8:	add	w12, w12, #0x1
    9fdc:	str	w12, [x9, #16]
    9fe0:	b	9f90 <BZ2_decompress@@Base+0x18d8>
    9fe4:	ldr	w8, [x21, #36]
    9fe8:	mov	w9, #0x1d                  	// #29
    9fec:	str	w9, [x21, #8]
    9ff0:	cmp	w8, #0x1
    9ff4:	b.lt	a030 <BZ2_decompress@@Base+0x1978>  // b.tstop
    9ff8:	ldr	w10, [x21, #32]
    9ffc:	sub	w8, w8, #0x1
    a000:	lsr	w9, w10, w8
    a004:	str	w8, [x21, #36]
    a008:	tbz	w9, #0, a020 <BZ2_decompress@@Base+0x1968>
    a00c:	ldur	x8, [x29, #-16]
    a010:	mov	w9, #0x1                   	// #1
    a014:	add	w8, w19, w8, lsl #4
    a018:	add	x8, x21, w8, sxtw
    a01c:	strb	w9, [x8, #3196]
    a020:	add	w19, w19, #0x1
    a024:	cmp	w19, #0xf
    a028:	b.gt	9ec0 <BZ2_decompress@@Base+0x1808>
    a02c:	b	9fe4 <BZ2_decompress@@Base+0x192c>
    a030:	ldr	x9, [x21]
    a034:	ldr	w10, [x9, #8]
    a038:	sub	w11, w10, #0x1
    a03c:	b	a050 <BZ2_decompress@@Base+0x1998>
    a040:	sub	w12, w8, #0x8
    a044:	cmn	w12, #0x8
    a048:	sub	w11, w11, #0x1
    a04c:	b.gt	9ffc <BZ2_decompress@@Base+0x1944>
    a050:	cmn	w11, #0x1
    a054:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    a058:	ldr	x12, [x9]
    a05c:	ldr	w13, [x21, #32]
    a060:	add	w8, w8, #0x8
    a064:	ldrb	w10, [x12], #1
    a068:	bfi	w10, w13, #8, #24
    a06c:	stp	w10, w8, [x21, #32]
    a070:	ldr	w13, [x9, #12]
    a074:	str	x12, [x9]
    a078:	adds	w12, w13, #0x1
    a07c:	stp	w11, w12, [x9, #8]
    a080:	b.cc	a040 <BZ2_decompress@@Base+0x1988>  // b.lo, b.ul, b.last
    a084:	ldr	w12, [x9, #16]
    a088:	add	w12, w12, #0x1
    a08c:	str	w12, [x9, #16]
    a090:	b	a040 <BZ2_decompress@@Base+0x1988>
    a094:	cmp	w9, w16
    a098:	b.ge	a1a0 <BZ2_decompress@@Base+0x1ae8>  // b.tcont
    a09c:	mov	w19, wzr
    a0a0:	mov	w8, w9
    a0a4:	stur	x8, [x29, #-16]
    a0a8:	mov	w8, #0x20                  	// #32
    a0ac:	mov	w0, #0xfffffffc            	// #-4
    a0b0:	ldr	w9, [x21, #36]
    a0b4:	str	w8, [x21, #8]
    a0b8:	cmp	w9, #0x1
    a0bc:	b.lt	a0d8 <BZ2_decompress@@Base+0x1a20>  // b.tstop
    a0c0:	ldr	w11, [x21, #32]
    a0c4:	sub	w9, w9, #0x1
    a0c8:	lsr	w10, w11, w9
    a0cc:	str	w9, [x21, #36]
    a0d0:	tbnz	w10, #0, a154 <BZ2_decompress@@Base+0x1a9c>
    a0d4:	b	a170 <BZ2_decompress@@Base+0x1ab8>
    a0d8:	ldr	x10, [x21]
    a0dc:	mov	w22, w14
    a0e0:	ldr	w11, [x10, #8]
    a0e4:	sub	w12, w11, #0x1
    a0e8:	b	a0fc <BZ2_decompress@@Base+0x1a44>
    a0ec:	sub	w13, w9, #0x8
    a0f0:	cmn	w13, #0x8
    a0f4:	sub	w12, w12, #0x1
    a0f8:	b.gt	a140 <BZ2_decompress@@Base+0x1a88>
    a0fc:	cmn	w12, #0x1
    a100:	b.eq	a164 <BZ2_decompress@@Base+0x1aac>  // b.none
    a104:	ldr	x13, [x10]
    a108:	ldr	w14, [x21, #32]
    a10c:	add	w9, w9, #0x8
    a110:	ldrb	w11, [x13], #1
    a114:	bfi	w11, w14, #8, #24
    a118:	stp	w11, w9, [x21, #32]
    a11c:	ldr	w14, [x10, #12]
    a120:	str	x13, [x10]
    a124:	adds	w13, w14, #0x1
    a128:	stp	w12, w13, [x10, #8]
    a12c:	b.cc	a0ec <BZ2_decompress@@Base+0x1a34>  // b.lo, b.ul, b.last
    a130:	ldr	w13, [x10, #16]
    a134:	add	w13, w13, #0x1
    a138:	str	w13, [x10, #16]
    a13c:	b	a0ec <BZ2_decompress@@Base+0x1a34>
    a140:	mov	w14, w22
    a144:	sub	w9, w9, #0x1
    a148:	lsr	w10, w11, w9
    a14c:	str	w9, [x21, #36]
    a150:	tbz	w10, #0, a170 <BZ2_decompress@@Base+0x1ab8>
    a154:	add	w19, w19, #0x1
    a158:	cmp	w19, w27
    a15c:	b.lt	a0b0 <BZ2_decompress@@Base+0x19f8>  // b.tstop
    a160:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    a164:	mov	w0, wzr
    a168:	mov	w14, w22
    a16c:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    a170:	ldur	x9, [x29, #-16]
    a174:	mov	w8, #0x4651                	// #18001
    a178:	cmp	w9, w8
    a17c:	mov	x8, x9
    a180:	b.gt	a198 <BZ2_decompress@@Base+0x1ae0>
    a184:	ldur	x8, [x29, #-16]
    a188:	mov	w9, #0x651e                	// #25886
    a18c:	add	x8, x21, w8, sxtw
    a190:	strb	w19, [x8, x9]
    a194:	ldur	x8, [x29, #-16]
    a198:	add	w9, w8, #0x1
    a19c:	b	a094 <BZ2_decompress@@Base+0x19dc>
    a1a0:	mov	w8, #0x4652                	// #18002
    a1a4:	cmp	w16, w8
    a1a8:	csel	w8, w16, w8, lt  // lt = tstop
    a1ac:	subs	w10, w27, #0x1
    a1b0:	b.lt	a1d8 <BZ2_decompress@@Base+0x1b20>  // b.tstop
    a1b4:	cmp	w27, #0x1f
    a1b8:	b.hi	a284 <BZ2_decompress@@Base+0x1bcc>  // b.pmore
    a1bc:	mov	w9, wzr
    a1c0:	sub	x10, x29, #0x8
    a1c4:	and	x11, x9, #0xff
    a1c8:	strb	w9, [x10, x11]
    a1cc:	add	w9, w9, #0x1
    a1d0:	cmp	w27, w9, uxtb
    a1d4:	b.gt	a1c4 <BZ2_decompress@@Base+0x1b0c>
    a1d8:	cmp	w16, #0x1
    a1dc:	b.lt	a274 <BZ2_decompress@@Base+0x1bbc>  // b.tstop
    a1e0:	stp	w14, w2, [x29, #-48]
    a1e4:	mov	w2, w1
    a1e8:	mov	x1, x17
    a1ec:	mov	x0, x15
    a1f0:	mov	x15, xzr
    a1f4:	mov	x22, x8
    a1f8:	sxtw	x9, w8
    a1fc:	mov	w10, #0x651e                	// #25886
    a200:	sub	x11, x29, #0x8
    a204:	mov	w12, #0x1ecc                	// #7884
    a208:	b	a224 <BZ2_decompress@@Base+0x1b6c>
    a20c:	mov	x15, x8
    a210:	add	x15, x8, #0x1
    a214:	cmp	x15, x9
    a218:	sturb	w14, [x29, #-8]
    a21c:	strb	w14, [x13, x12]
    a220:	b.ge	a258 <BZ2_decompress@@Base+0x1ba0>  // b.tcont
    a224:	add	x13, x21, x15
    a228:	mov	x8, x15
    a22c:	ldrb	w15, [x13, x10]
    a230:	ldrb	w14, [x11, x15]
    a234:	cbz	x15, a20c <BZ2_decompress@@Base+0x1b54>
    a238:	add	x16, x11, x15
    a23c:	ldurb	w17, [x16, #-1]
    a240:	and	w18, w15, #0xff
    a244:	sub	x15, x15, #0x1
    a248:	cmp	w18, #0x1
    a24c:	strb	w17, [x16]
    a250:	b.ne	a238 <BZ2_decompress@@Base+0x1b80>  // b.any
    a254:	b	a20c <BZ2_decompress@@Base+0x1b54>
    a258:	mov	x17, x1
    a25c:	mov	w1, w2
    a260:	ldp	w14, w2, [x29, #-48]
    a264:	stur	x15, [x29, #-16]
    a268:	mov	x15, x0
    a26c:	mov	x8, x22
    a270:	b	a278 <BZ2_decompress@@Base+0x1bc0>
    a274:	stur	xzr, [x29, #-16]
    a278:	mov	w18, wzr
    a27c:	mov	w16, w8
    a280:	b	a2e4 <BZ2_decompress@@Base+0x1c2c>
    a284:	neg	w9, w27
    a288:	tst	w9, #0xff
    a28c:	mov	w9, wzr
    a290:	b.eq	a1c0 <BZ2_decompress@@Base+0x1b08>  // b.none
    a294:	cmp	w10, #0xff
    a298:	b.hi	a1c0 <BZ2_decompress@@Base+0x1b08>  // b.pmore
    a29c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    a2a0:	ldr	q0, [x9, #2608]
    a2a4:	mov	w10, wzr
    a2a8:	and	w9, w27, #0xffffffe0
    a2ac:	movi	v1.16b, #0x10
    a2b0:	sub	x11, x29, #0x8
    a2b4:	movi	v2.16b, #0x20
    a2b8:	and	x12, x10, #0xe0
    a2bc:	add	v3.16b, v0.16b, v1.16b
    a2c0:	add	w10, w10, #0x20
    a2c4:	add	x12, x11, x12
    a2c8:	cmp	w9, w10
    a2cc:	stp	q0, q3, [x12]
    a2d0:	add	v0.16b, v0.16b, v2.16b
    a2d4:	b.ne	a2b8 <BZ2_decompress@@Base+0x1c00>  // b.any
    a2d8:	cmp	w27, w9
    a2dc:	b.ne	a1c0 <BZ2_decompress@@Base+0x1b08>  // b.any
    a2e0:	b	a1d8 <BZ2_decompress@@Base+0x1b20>
    a2e4:	cmp	w18, w27
    a2e8:	b.ge	a390 <BZ2_decompress@@Base+0x1cd8>  // b.tcont
    a2ec:	ldr	w8, [x21, #36]
    a2f0:	mov	w9, #0x21                  	// #33
    a2f4:	str	w9, [x21, #8]
    a2f8:	cmp	w8, #0x5
    a2fc:	b.lt	a32c <BZ2_decompress@@Base+0x1c74>  // b.tstop
    a300:	ldr	w10, [x21, #32]
    a304:	sub	w8, w8, #0x5
    a308:	mov	w11, wzr
    a30c:	lsr	w9, w10, w8
    a310:	and	w4, w9, #0x1f
    a314:	str	w8, [x21, #36]
    a318:	mov	x8, x11
    a31c:	cmp	w8, w2
    a320:	b.ge	a7dc <BZ2_decompress@@Base+0x2124>  // b.tcont
    a324:	stur	x8, [x29, #-16]
    a328:	b	a780 <BZ2_decompress@@Base+0x20c8>
    a32c:	ldr	x9, [x21]
    a330:	ldr	w10, [x9, #8]
    a334:	sub	w11, w10, #0x1
    a338:	b	a34c <BZ2_decompress@@Base+0x1c94>
    a33c:	sub	w12, w8, #0x8
    a340:	cmn	w12, #0x4
    a344:	sub	w11, w11, #0x1
    a348:	b.gt	a304 <BZ2_decompress@@Base+0x1c4c>
    a34c:	cmn	w11, #0x1
    a350:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    a354:	ldr	x12, [x9]
    a358:	ldr	w13, [x21, #32]
    a35c:	add	w8, w8, #0x8
    a360:	ldrb	w10, [x12], #1
    a364:	bfi	w10, w13, #8, #24
    a368:	stp	w10, w8, [x21, #32]
    a36c:	ldr	w13, [x9, #12]
    a370:	str	x12, [x9]
    a374:	adds	w12, w13, #0x1
    a378:	stp	w11, w12, [x9, #8]
    a37c:	b.cc	a33c <BZ2_decompress@@Base+0x1c84>  // b.lo, b.ul, b.last
    a380:	ldr	w12, [x9, #16]
    a384:	add	w12, w12, #0x1
    a388:	str	w12, [x9, #16]
    a38c:	b	a33c <BZ2_decompress@@Base+0x1c84>
    a390:	mov	w8, #0x1ecc                	// #7884
    a394:	cmp	w27, #0x1
    a398:	add	x8, x21, x8
    a39c:	stur	w2, [x29, #-44]
    a3a0:	str	w3, [sp, #68]
    a3a4:	stp	w4, w14, [x29, #-52]
    a3a8:	stur	x15, [x29, #-64]
    a3ac:	str	w20, [sp, #64]
    a3b0:	stp	w16, w5, [sp, #32]
    a3b4:	stp	x8, x17, [sp, #16]
    a3b8:	b.lt	a514 <BZ2_decompress@@Base+0x1e5c>  // b.tstop
    a3bc:	str	x28, [sp, #72]
    a3c0:	cmp	w2, #0x0
    a3c4:	mov	w28, w27
    a3c8:	str	x23, [sp, #48]
    a3cc:	str	w24, [sp, #56]
    a3d0:	stur	w27, [x29, #-40]
    a3d4:	b.le	a51c <BZ2_decompress@@Base+0x1e64>
    a3d8:	mov	w9, w2
    a3dc:	mov	w8, #0xab71                	// #43889
    a3e0:	mov	w10, #0xab70                	// #43888
    a3e4:	mov	x22, xzr
    a3e8:	stur	x9, [x29, #-16]
    a3ec:	and	x9, x9, #0xfffffffe
    a3f0:	add	x23, x21, x8
    a3f4:	add	x24, x21, x10
    a3f8:	stur	x9, [x29, #-32]
    a3fc:	b	a468 <BZ2_decompress@@Base+0x1db0>
    a400:	mov	w8, #0x408                 	// #1032
    a404:	madd	x8, x22, x8, x21
    a408:	mov	w10, #0xb17c                	// #45436
    a40c:	ldur	w27, [x29, #-44]
    a410:	add	x0, x8, x10
    a414:	mov	w10, #0xc9ac                	// #51628
    a418:	mov	w9, #0x102                 	// #258
    a41c:	add	x1, x8, x10
    a420:	mov	w10, #0xe1dc                	// #57820
    a424:	madd	x9, x22, x9, x21
    a428:	add	x2, x8, x10
    a42c:	mov	w8, #0xab70                	// #43888
    a430:	add	x3, x9, x8
    a434:	mov	w4, w20
    a438:	mov	w6, w27
    a43c:	bl	14d0 <BZ2_hbCreateDecodeTables@plt>
    a440:	mov	w2, w27
    a444:	ldur	w27, [x29, #-40]
    a448:	add	x8, x21, x22, lsl #2
    a44c:	add	x22, x22, #0x1
    a450:	add	x23, x23, #0x102
    a454:	mov	w9, #0xfa0c                	// #64012
    a458:	cmp	x22, x28
    a45c:	add	x24, x24, #0x102
    a460:	str	w20, [x8, x9]
    a464:	b.eq	a588 <BZ2_decompress@@Base+0x1ed0>  // b.none
    a468:	cmp	w2, #0x2
    a46c:	b.cs	a480 <BZ2_decompress@@Base+0x1dc8>  // b.hs, b.nlast
    a470:	mov	x9, xzr
    a474:	mov	w5, wzr
    a478:	mov	w20, #0x20                  	// #32
    a47c:	b	a4e8 <BZ2_decompress@@Base+0x1e30>
    a480:	ldur	x12, [x29, #-32]
    a484:	mov	w9, wzr
    a488:	mov	w10, wzr
    a48c:	mov	w8, #0x20                  	// #32
    a490:	mov	x13, x23
    a494:	mov	w11, #0x20                  	// #32
    a498:	ldurb	w14, [x13, #-1]
    a49c:	ldrb	w15, [x13], #2
    a4a0:	cmp	w9, w14
    a4a4:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    a4a8:	cmp	w10, w15
    a4ac:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    a4b0:	cmp	w8, w14
    a4b4:	csel	w8, w14, w8, gt
    a4b8:	cmp	w11, w15
    a4bc:	csel	w11, w15, w11, gt
    a4c0:	subs	x12, x12, #0x2
    a4c4:	b.ne	a498 <BZ2_decompress@@Base+0x1de0>  // b.any
    a4c8:	cmp	w9, w10
    a4cc:	csel	w5, w9, w10, hi  // hi = pmore
    a4d0:	cmp	w8, w11
    a4d4:	csel	w20, w8, w11, lt  // lt = tstop
    a4d8:	ldur	x8, [x29, #-16]
    a4dc:	ldur	x9, [x29, #-32]
    a4e0:	cmp	x9, x8
    a4e4:	b.eq	a400 <BZ2_decompress@@Base+0x1d48>  // b.none
    a4e8:	ldur	x10, [x29, #-16]
    a4ec:	add	x8, x24, x9
    a4f0:	sub	x9, x10, x9
    a4f4:	ldrb	w10, [x8], #1
    a4f8:	cmp	w5, w10
    a4fc:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    a500:	cmp	w20, w10
    a504:	csel	w20, w10, w20, gt
    a508:	subs	x9, x9, #0x1
    a50c:	b.ne	a4f4 <BZ2_decompress@@Base+0x1e3c>  // b.any
    a510:	b	a400 <BZ2_decompress@@Base+0x1d48>
    a514:	str	wzr, [sp, #40]
    a518:	b	a598 <BZ2_decompress@@Base+0x1ee0>
    a51c:	mov	w8, #0xfa0c                	// #64012
    a520:	mov	w9, #0xab70                	// #43888
    a524:	mov	w10, #0xe1dc                	// #57820
    a528:	mov	w11, #0xc9ac                	// #51628
    a52c:	mov	w12, #0xb17c                	// #45436
    a530:	add	x27, x21, x8
    a534:	add	x20, x21, x9
    a538:	add	x22, x21, x10
    a53c:	add	x23, x21, x11
    a540:	add	x24, x21, x12
    a544:	ldur	w6, [x29, #-44]
    a548:	mov	w4, #0x20                  	// #32
    a54c:	mov	x0, x24
    a550:	mov	x1, x23
    a554:	mov	x2, x22
    a558:	mov	x3, x20
    a55c:	mov	w5, wzr
    a560:	bl	14d0 <BZ2_hbCreateDecodeTables@plt>
    a564:	mov	w8, #0x20                  	// #32
    a568:	str	w8, [x27], #4
    a56c:	add	x20, x20, #0x102
    a570:	add	x22, x22, #0x408
    a574:	add	x23, x23, #0x408
    a578:	subs	x28, x28, #0x1
    a57c:	add	x24, x24, #0x408
    a580:	b.ne	a544 <BZ2_decompress@@Base+0x1e8c>  // b.any
    a584:	ldur	w27, [x29, #-40]
    a588:	ldr	w24, [sp, #56]
    a58c:	ldr	x28, [sp, #72]
    a590:	ldr	x23, [sp, #48]
    a594:	str	w27, [sp, #40]
    a598:	ldr	w20, [x21, #3192]
    a59c:	ldr	w22, [x21, #40]
    a5a0:	add	x0, x21, #0x44
    a5a4:	mov	w2, #0x400                 	// #1024
    a5a8:	mov	w1, wzr
    a5ac:	bl	14a0 <memset@plt>
    a5b0:	adrp	x13, e000 <BZ2_bzopen@@Base+0x1d4>
    a5b4:	ldr	d0, [x13, #2992]
    a5b8:	mov	w11, #0x86a0                	// #34464
    a5bc:	add	w10, w20, #0x1
    a5c0:	movk	w11, #0x1, lsl #16
    a5c4:	mov	w12, #0x1ec8                	// #7880
    a5c8:	mov	x8, xzr
    a5cc:	mov	x9, xzr
    a5d0:	stur	w10, [x29, #-32]
    a5d4:	mov	w10, #0xd                   	// #13
    a5d8:	mul	w6, w22, w11
    a5dc:	add	x11, x21, x12
    a5e0:	mov	w12, #0xb                   	// #11
    a5e4:	mov	w13, #0xa                   	// #10
    a5e8:	mov	w14, #0x9                   	// #9
    a5ec:	sub	w15, w9, #0x10
    a5f0:	add	x16, x11, x9
    a5f4:	orr	w17, w15, #0xf
    a5f8:	sturb	w17, [x16, #-61]
    a5fc:	orr	w17, w15, #0xe
    a600:	sturb	w17, [x16, #-62]
    a604:	orr	w17, w15, w10
    a608:	sturb	w17, [x16, #-63]
    a60c:	orr	w17, w15, #0xc
    a610:	sturb	w17, [x16, #-64]
    a614:	orr	w17, w15, w12
    a618:	sturb	w17, [x16, #-65]
    a61c:	orr	w17, w15, w13
    a620:	dup	v1.8b, w15
    a624:	sturb	w17, [x16, #-66]
    a628:	add	w17, w9, #0xff0
    a62c:	sub	x9, x9, #0x10
    a630:	sturb	w15, [x16, #-76]
    a634:	orr	w15, w15, w14
    a638:	orr	v1.8b, v1.8b, v0.8b
    a63c:	cmn	x9, #0x100
    a640:	sturb	w15, [x16, #-67]
    a644:	stur	d1, [x16, #-75]
    a648:	str	w17, [x11, x8]
    a64c:	sub	x8, x8, #0x4
    a650:	b.ne	a5ec <BZ2_decompress@@Base+0x1f34>  // b.any
    a654:	ldp	w16, w5, [sp, #32]
    a658:	ldp	w20, w3, [sp, #64]
    a65c:	ldur	w4, [x29, #-52]
    a660:	mov	w7, wzr
    a664:	cmp	w16, #0x1
    a668:	b.lt	a758 <BZ2_decompress@@Base+0x20a0>  // b.tstop
    a66c:	ldr	x8, [sp, #16]
    a670:	ldr	w18, [sp, #40]
    a674:	ldp	w14, w2, [x29, #-48]
    a678:	mov	w9, #0x408                 	// #1032
    a67c:	ldrb	w15, [x8]
    a680:	mov	w8, #0xfa0c                	// #64012
    a684:	mov	w10, #0xc9ac                	// #51628
    a688:	mov	w11, #0xe1dc                	// #57820
    a68c:	add	x12, x21, w15, uxtw #2
    a690:	ldr	w24, [x12, x8]
    a694:	umaddl	x9, w15, w9, x21
    a698:	mov	w8, #0xb17c                	// #45436
    a69c:	mov	w30, wzr
    a6a0:	add	x23, x9, x10
    a6a4:	add	x28, x9, x11
    a6a8:	add	x26, x9, x8
    a6ac:	mov	w8, #0x100                 	// #256
    a6b0:	mov	w1, #0x31                  	// #49
    a6b4:	mov	w17, w24
    a6b8:	stur	x8, [x29, #-16]
    a6bc:	ldr	w8, [x21, #36]
    a6c0:	mov	w9, #0x24                  	// #36
    a6c4:	str	w9, [x21, #8]
    a6c8:	cmp	w8, w17
    a6cc:	b.ge	a730 <BZ2_decompress@@Base+0x2078>  // b.tcont
    a6d0:	ldr	x9, [x21]
    a6d4:	ldr	w10, [x9, #8]
    a6d8:	sub	w11, w10, #0x1
    a6dc:	b	a6ec <BZ2_decompress@@Base+0x2034>
    a6e0:	cmp	w8, w17
    a6e4:	sub	w11, w11, #0x1
    a6e8:	b.ge	a734 <BZ2_decompress@@Base+0x207c>  // b.tcont
    a6ec:	cmn	w11, #0x1
    a6f0:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    a6f4:	ldr	x12, [x9]
    a6f8:	ldr	w13, [x21, #32]
    a6fc:	add	w8, w8, #0x8
    a700:	ldrb	w10, [x12], #1
    a704:	bfi	w10, w13, #8, #24
    a708:	stp	w10, w8, [x21, #32]
    a70c:	ldr	w13, [x9, #12]
    a710:	str	x12, [x9]
    a714:	adds	w12, w13, #0x1
    a718:	stp	w11, w12, [x9, #8]
    a71c:	b.cc	a6e0 <BZ2_decompress@@Base+0x2028>  // b.lo, b.ul, b.last
    a720:	ldr	w12, [x9, #16]
    a724:	add	w12, w12, #0x1
    a728:	str	w12, [x9, #16]
    a72c:	b	a6e0 <BZ2_decompress@@Base+0x2028>
    a730:	ldr	w10, [x21, #32]
    a734:	sub	w8, w8, w17
    a738:	mov	w9, #0xffffffff            	// #-1
    a73c:	lsr	w10, w10, w8
    a740:	lsl	w9, w9, w17
    a744:	bic	w20, w10, w9
    a748:	str	w8, [x21, #36]
    a74c:	cmp	w17, #0x14
    a750:	b.le	9d90 <BZ2_decompress@@Base+0x16d8>
    a754:	b	9e54 <BZ2_decompress@@Base+0x179c>
    a758:	ldur	x15, [x29, #-64]
    a75c:	ldr	x17, [sp, #24]
    a760:	ldr	w18, [sp, #40]
    a764:	ldp	w14, w2, [x29, #-48]
    a768:	mov	w8, #0x100                 	// #256
    a76c:	mov	w1, wzr
    a770:	mov	w30, wzr
    a774:	mov	w0, #0xfffffffc            	// #-4
    a778:	stur	x8, [x29, #-16]
    a77c:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    a780:	sub	w8, w4, #0x1
    a784:	cmp	w8, #0x13
    a788:	b.hi	9e54 <BZ2_decompress@@Base+0x179c>  // b.pmore
    a78c:	ldr	w8, [x21, #36]
    a790:	mov	w9, #0x22                  	// #34
    a794:	str	w9, [x21, #8]
    a798:	cmp	w8, #0x1
    a79c:	b.lt	a81c <BZ2_decompress@@Base+0x2164>  // b.tstop
    a7a0:	ldr	w10, [x21, #32]
    a7a4:	sub	w8, w8, #0x1
    a7a8:	lsr	w9, w10, w8
    a7ac:	str	w8, [x21, #36]
    a7b0:	tbnz	w9, #0, a7e8 <BZ2_decompress@@Base+0x2130>
    a7b4:	ldur	x10, [x29, #-16]
    a7b8:	mov	w8, #0x102                 	// #258
    a7bc:	smaddl	x8, w18, w8, x21
    a7c0:	mov	w9, #0xab70                	// #43888
    a7c4:	add	x8, x8, w10, sxtw
    a7c8:	strb	w4, [x8, x9]
    a7cc:	mov	x8, x10
    a7d0:	add	w8, w8, #0x1
    a7d4:	cmp	w8, w2
    a7d8:	b.lt	a324 <BZ2_decompress@@Base+0x1c6c>  // b.tstop
    a7dc:	stur	x8, [x29, #-16]
    a7e0:	add	w18, w18, #0x1
    a7e4:	b	a2e4 <BZ2_decompress@@Base+0x1c2c>
    a7e8:	mov	w9, #0x23                  	// #35
    a7ec:	cmp	w8, #0x1
    a7f0:	str	w9, [x21, #8]
    a7f4:	b.lt	a880 <BZ2_decompress@@Base+0x21c8>  // b.tstop
    a7f8:	ldr	w10, [x21, #32]
    a7fc:	sub	w8, w8, #0x1
    a800:	str	w8, [x21, #36]
    a804:	lsr	w8, w10, w8
    a808:	tst	w8, #0x1
    a80c:	mov	w8, #0x1                   	// #1
    a810:	cneg	w8, w8, ne  // ne = any
    a814:	add	w4, w8, w4
    a818:	b	a780 <BZ2_decompress@@Base+0x20c8>
    a81c:	ldr	x9, [x21]
    a820:	ldr	w10, [x9, #8]
    a824:	sub	w11, w10, #0x1
    a828:	b	a83c <BZ2_decompress@@Base+0x2184>
    a82c:	sub	w12, w8, #0x8
    a830:	cmn	w12, #0x8
    a834:	sub	w11, w11, #0x1
    a838:	b.gt	a7a4 <BZ2_decompress@@Base+0x20ec>
    a83c:	cmn	w11, #0x1
    a840:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    a844:	ldr	x12, [x9]
    a848:	ldr	w13, [x21, #32]
    a84c:	add	w8, w8, #0x8
    a850:	ldrb	w10, [x12], #1
    a854:	bfi	w10, w13, #8, #24
    a858:	stp	w10, w8, [x21, #32]
    a85c:	ldr	w13, [x9, #12]
    a860:	str	x12, [x9]
    a864:	adds	w12, w13, #0x1
    a868:	stp	w11, w12, [x9, #8]
    a86c:	b.cc	a82c <BZ2_decompress@@Base+0x2174>  // b.lo, b.ul, b.last
    a870:	ldr	w12, [x9, #16]
    a874:	add	w12, w12, #0x1
    a878:	str	w12, [x9, #16]
    a87c:	b	a82c <BZ2_decompress@@Base+0x2174>
    a880:	ldr	x9, [x21]
    a884:	ldr	w10, [x9, #8]
    a888:	sub	w11, w10, #0x1
    a88c:	b	a8a0 <BZ2_decompress@@Base+0x21e8>
    a890:	sub	w12, w8, #0x8
    a894:	cmn	w12, #0x8
    a898:	sub	w11, w11, #0x1
    a89c:	b.gt	a7fc <BZ2_decompress@@Base+0x2144>
    a8a0:	cmn	w11, #0x1
    a8a4:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    a8a8:	ldr	x12, [x9]
    a8ac:	ldr	w13, [x21, #32]
    a8b0:	add	w8, w8, #0x8
    a8b4:	ldrb	w10, [x12], #1
    a8b8:	bfi	w10, w13, #8, #24
    a8bc:	stp	w10, w8, [x21, #32]
    a8c0:	ldr	w13, [x9, #12]
    a8c4:	str	x12, [x9]
    a8c8:	adds	w12, w13, #0x1
    a8cc:	stp	w11, w12, [x9, #8]
    a8d0:	b.cc	a890 <BZ2_decompress@@Base+0x21d8>  // b.lo, b.ul, b.last
    a8d4:	ldr	w12, [x9, #16]
    a8d8:	add	w12, w12, #0x1
    a8dc:	str	w12, [x9, #16]
    a8e0:	b	a890 <BZ2_decompress@@Base+0x21d8>
    a8e4:	sxtw	x8, w17
    a8e8:	ldr	w8, [x23, x8, lsl #2]
    a8ec:	sub	w8, w20, w8
    a8f0:	cmp	w8, #0x101
    a8f4:	b.hi	9e54 <BZ2_decompress@@Base+0x179c>  // b.pmore
    a8f8:	ldr	w9, [x28, w8, uxtw #2]
    a8fc:	ldur	w8, [x29, #-32]
    a900:	cmp	w9, w8
    a904:	b.eq	aefc <BZ2_decompress@@Base+0x2844>  // b.none
    a908:	subs	w11, w9, #0x1
    a90c:	b.hi	a91c <BZ2_decompress@@Base+0x2264>  // b.pmore
    a910:	mov	w5, #0xffffffff            	// #-1
    a914:	mov	w3, #0x1                   	// #1
    a918:	b	acfc <BZ2_decompress@@Base+0x2644>
    a91c:	cmp	w7, w6
    a920:	stur	w9, [x29, #-20]
    a924:	b.ge	9e54 <BZ2_decompress@@Base+0x179c>  // b.tcont
    a928:	cmp	w11, #0xf
    a92c:	b.hi	a9b4 <BZ2_decompress@@Base+0x22fc>  // b.pmore
    a930:	ldrsw	x9, [x21, #7820]
    a934:	mov	w0, w14
    a938:	cmp	w11, #0x4
    a93c:	add	w8, w9, w11
    a940:	add	x8, x21, x8
    a944:	ldrb	w8, [x8, #3724]
    a948:	b.cc	a984 <BZ2_decompress@@Base+0x22cc>  // b.lo, b.ul, b.last
    a94c:	ldur	w10, [x29, #-20]
    a950:	add	w11, w9, w10
    a954:	add	x12, x21, #0xe8c
    a958:	sub	w13, w11, #0x4
    a95c:	sub	w11, w11, #0x5
    a960:	ldr	w14, [x12, w11, sxtw]
    a964:	sub	w11, w10, #0x4
    a968:	sub	w10, w10, #0x5
    a96c:	cmp	w10, #0x3
    a970:	mov	w10, w11
    a974:	str	w14, [x12, w13, sxtw]
    a978:	b.hi	a950 <BZ2_decompress@@Base+0x2298>  // b.pmore
    a97c:	subs	w11, w11, #0x1
    a980:	b.eq	a9a8 <BZ2_decompress@@Base+0x22f0>  // b.none
    a984:	neg	w10, w11
    a988:	add	w11, w11, w9
    a98c:	sub	w12, w11, #0x1
    a990:	add	x13, x21, #0xe8c
    a994:	ldrb	w14, [x13, w12, uxtw]
    a998:	adds	w10, w10, #0x1
    a99c:	strb	w14, [x13, w11, uxtw]
    a9a0:	mov	w11, w12
    a9a4:	b.cc	a98c <BZ2_decompress@@Base+0x22d4>  // b.lo, b.ul, b.last
    a9a8:	add	x9, x21, x9
    a9ac:	strb	w8, [x9, #3724]
    a9b0:	b	aba0 <BZ2_decompress@@Base+0x24e8>
    a9b4:	lsr	w10, w11, #4
    a9b8:	add	x9, x21, w10, uxtw #2
    a9bc:	ldr	w13, [x9, #7820]
    a9c0:	ands	w8, w11, #0xf
    a9c4:	mov	w11, #0x1e8c                	// #7820
    a9c8:	add	x11, x9, x11
    a9cc:	add	w8, w13, w8
    a9d0:	sxtw	x12, w8
    a9d4:	add	x8, x21, x12
    a9d8:	ldrb	w8, [x8, #3724]
    a9dc:	b.eq	aa14 <BZ2_decompress@@Base+0x235c>  // b.none
    a9e0:	mov	w0, w14
    a9e4:	add	x13, x21, x12
    a9e8:	ldrb	w14, [x13, #3723]
    a9ec:	sub	x12, x12, #0x1
    a9f0:	strb	w14, [x13, #3724]
    a9f4:	ldrsw	x13, [x11]
    a9f8:	cmp	x12, x13
    a9fc:	b.gt	a9e4 <BZ2_decompress@@Base+0x232c>
    aa00:	add	w12, w13, #0x1
    aa04:	mov	w14, w0
    aa08:	str	w12, [x11]
    aa0c:	cbnz	w10, aa1c <BZ2_decompress@@Base+0x2364>
    aa10:	b	aa54 <BZ2_decompress@@Base+0x239c>
    aa14:	add	w12, w13, #0x1
    aa18:	str	w12, [x11]
    aa1c:	mov	w11, #0x1e8c                	// #7820
    aa20:	add	x10, x10, #0x1
    aa24:	add	x9, x9, x11
    aa28:	ldrsw	x11, [x9]
    aa2c:	add	x13, x21, #0xe8c
    aa30:	sub	x10, x10, #0x1
    aa34:	cmp	x10, #0x1
    aa38:	sub	x11, x11, #0x1
    aa3c:	str	w11, [x9], #-4
    aa40:	ldrsw	x12, [x9]
    aa44:	add	x12, x12, x13
    aa48:	ldrb	w12, [x12, #15]
    aa4c:	strb	w12, [x13, x11]
    aa50:	b.gt	aa28 <BZ2_decompress@@Base+0x2370>
    aa54:	ldrsw	x9, [x21, #7820]
    aa58:	sub	x9, x9, #0x1
    aa5c:	str	w9, [x21, #7820]
    aa60:	add	x9, x21, x9
    aa64:	strb	w8, [x9, #3724]
    aa68:	ldr	w9, [x21, #7820]
    aa6c:	cbnz	w9, aba4 <BZ2_decompress@@Base+0x24ec>
    aa70:	mov	w10, #0x1ec8                	// #7880
    aa74:	mov	w11, #0x1e83                	// #7811
    aa78:	mov	w0, w14
    aa7c:	mov	x9, xzr
    aa80:	add	x10, x21, x10
    aa84:	add	x11, x21, x11
    aa88:	ldrsw	x12, [x10]
    aa8c:	add	x13, x21, #0xe8c
    aa90:	add	x12, x12, x13
    aa94:	ldrb	w14, [x12, #15]
    aa98:	add	x12, x11, x9
    aa9c:	strb	w14, [x12, #8]
    aaa0:	ldrsw	x14, [x10]
    aaa4:	add	x14, x14, x13
    aaa8:	ldrb	w14, [x14, #14]
    aaac:	strb	w14, [x12, #7]
    aab0:	ldrsw	x14, [x10]
    aab4:	add	x14, x14, x13
    aab8:	ldrb	w14, [x14, #13]
    aabc:	strb	w14, [x12, #6]
    aac0:	ldrsw	x14, [x10]
    aac4:	add	x14, x14, x13
    aac8:	ldrb	w14, [x14, #12]
    aacc:	strb	w14, [x12, #5]
    aad0:	ldrsw	x14, [x10]
    aad4:	add	x14, x14, x13
    aad8:	ldrb	w14, [x14, #11]
    aadc:	strb	w14, [x12, #4]
    aae0:	ldrsw	x14, [x10]
    aae4:	add	x14, x14, x13
    aae8:	ldrb	w14, [x14, #10]
    aaec:	strb	w14, [x12, #3]
    aaf0:	ldrsw	x14, [x10]
    aaf4:	add	x14, x14, x13
    aaf8:	ldrb	w14, [x14, #9]
    aafc:	strb	w14, [x12, #2]
    ab00:	ldrsw	x14, [x10]
    ab04:	add	x14, x14, x13
    ab08:	ldrb	w14, [x14, #8]
    ab0c:	strb	w14, [x12, #1]
    ab10:	ldrsw	x14, [x10]
    ab14:	add	x14, x14, x13
    ab18:	ldrb	w14, [x14, #7]
    ab1c:	strb	w14, [x12]
    ab20:	ldrsw	x14, [x10]
    ab24:	add	x14, x14, x13
    ab28:	ldrb	w14, [x14, #6]
    ab2c:	sturb	w14, [x12, #-1]
    ab30:	ldrsw	x14, [x10]
    ab34:	add	x14, x14, x13
    ab38:	ldrb	w14, [x14, #5]
    ab3c:	sturb	w14, [x12, #-2]
    ab40:	ldrsw	x14, [x10]
    ab44:	add	x14, x14, x13
    ab48:	ldrb	w14, [x14, #4]
    ab4c:	sturb	w14, [x12, #-3]
    ab50:	ldrsw	x14, [x10]
    ab54:	add	x14, x14, x13
    ab58:	ldrb	w14, [x14, #3]
    ab5c:	sturb	w14, [x12, #-4]
    ab60:	ldrsw	x14, [x10]
    ab64:	add	x14, x14, x13
    ab68:	ldrb	w14, [x14, #2]
    ab6c:	sturb	w14, [x12, #-5]
    ab70:	ldrsw	x14, [x10]
    ab74:	add	x14, x14, x13
    ab78:	ldrb	w14, [x14, #1]
    ab7c:	sturb	w14, [x12, #-6]
    ab80:	ldrsw	x14, [x10]
    ab84:	ldrb	w13, [x13, x14]
    ab88:	add	w14, w9, #0xff0
    ab8c:	sub	x9, x9, #0x10
    ab90:	cmn	x9, #0x100
    ab94:	sturb	w13, [x12, #-7]
    ab98:	str	w14, [x10], #-4
    ab9c:	b.ne	aa88 <BZ2_decompress@@Base+0x23d0>  // b.any
    aba0:	mov	w14, w0
    aba4:	add	x8, x21, x8
    aba8:	ldrb	w9, [x8, #3468]
    abac:	add	x9, x21, x9, lsl #2
    abb0:	ldr	w10, [x9, #68]
    abb4:	add	w10, w10, #0x1
    abb8:	str	w10, [x9, #68]
    abbc:	ldrb	w9, [x21, #44]
    abc0:	ldrb	w8, [x8, #3468]
    abc4:	cbz	w9, abdc <BZ2_decompress@@Base+0x2524>
    abc8:	ldr	x9, [x21, #3160]
    abcc:	strh	w8, [x9, w7, sxtw #1]
    abd0:	add	w7, w7, #0x1
    abd4:	cbnz	w1, ac38 <BZ2_decompress@@Base+0x2580>
    abd8:	b	abec <BZ2_decompress@@Base+0x2534>
    abdc:	ldr	x9, [x21, #3152]
    abe0:	str	w8, [x9, w7, sxtw #2]
    abe4:	add	w7, w7, #0x1
    abe8:	cbnz	w1, ac38 <BZ2_decompress@@Base+0x2580>
    abec:	sxtw	x8, w30
    abf0:	add	x30, x8, #0x1
    abf4:	cmp	w30, w16
    abf8:	b.ge	9e50 <BZ2_decompress@@Base+0x1798>  // b.tcont
    abfc:	add	x8, x21, x30
    ac00:	mov	w9, #0x1ecc                	// #7884
    ac04:	ldrb	w15, [x8, x9]
    ac08:	mov	w10, #0xfa0c                	// #64012
    ac0c:	mov	w8, #0x408                 	// #1032
    ac10:	mov	w9, #0xb17c                	// #45436
    ac14:	add	x12, x21, x15, lsl #2
    ac18:	ldr	w24, [x12, x10]
    ac1c:	madd	x8, x15, x8, x21
    ac20:	mov	w11, #0xe1dc                	// #57820
    ac24:	add	x26, x8, x9
    ac28:	mov	w9, #0xc9ac                	// #51628
    ac2c:	add	x28, x8, x11
    ac30:	add	x23, x8, x9
    ac34:	mov	w1, #0x32                  	// #50
    ac38:	sub	w1, w1, #0x1
    ac3c:	mov	w17, w24
    ac40:	ldr	w8, [x21, #36]
    ac44:	mov	w9, #0x28                  	// #40
    ac48:	str	w9, [x21, #8]
    ac4c:	cmp	w8, w17
    ac50:	b.ge	acb4 <BZ2_decompress@@Base+0x25fc>  // b.tcont
    ac54:	ldr	x9, [x21]
    ac58:	ldr	w10, [x9, #8]
    ac5c:	sub	w11, w10, #0x1
    ac60:	b	ac70 <BZ2_decompress@@Base+0x25b8>
    ac64:	cmp	w8, w17
    ac68:	sub	w11, w11, #0x1
    ac6c:	b.ge	acb8 <BZ2_decompress@@Base+0x2600>  // b.tcont
    ac70:	cmn	w11, #0x1
    ac74:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    ac78:	ldr	x12, [x9]
    ac7c:	ldr	w13, [x21, #32]
    ac80:	add	w8, w8, #0x8
    ac84:	ldrb	w10, [x12], #1
    ac88:	bfi	w10, w13, #8, #24
    ac8c:	stp	w10, w8, [x21, #32]
    ac90:	ldr	w13, [x9, #12]
    ac94:	str	x12, [x9]
    ac98:	adds	w12, w13, #0x1
    ac9c:	stp	w11, w12, [x9, #8]
    aca0:	b.cc	ac64 <BZ2_decompress@@Base+0x25ac>  // b.lo, b.ul, b.last
    aca4:	ldr	w12, [x9, #16]
    aca8:	add	w12, w12, #0x1
    acac:	str	w12, [x9, #16]
    acb0:	b	ac64 <BZ2_decompress@@Base+0x25ac>
    acb4:	ldr	w10, [x21, #32]
    acb8:	sub	w8, w8, w17
    acbc:	mov	w9, #0xffffffff            	// #-1
    acc0:	lsr	w10, w10, w8
    acc4:	lsl	w9, w9, w17
    acc8:	bic	w20, w10, w9
    accc:	str	w8, [x21, #36]
    acd0:	cmp	w17, #0x14
    acd4:	b.gt	9e54 <BZ2_decompress@@Base+0x179c>
    acd8:	ldr	w9, [x26, w17, sxtw #2]
    acdc:	cmp	w20, w9
    ace0:	b.le	a8e4 <BZ2_decompress@@Base+0x222c>
    ace4:	add	w17, w17, #0x1
    ace8:	mov	w9, #0x29                  	// #41
    acec:	cmp	w8, #0x1
    acf0:	str	w9, [x21, #8]
    acf4:	b.ge	9e28 <BZ2_decompress@@Base+0x1770>  // b.tcont
    acf8:	b	8d10 <BZ2_decompress@@Base+0x658>
    acfc:	cmp	w3, #0x200, lsl #12
    ad00:	stur	w9, [x29, #-20]
    ad04:	b.ge	9e54 <BZ2_decompress@@Base+0x179c>  // b.tcont
    ad08:	cmp	w9, #0x1
    ad0c:	b.eq	ad24 <BZ2_decompress@@Base+0x266c>  // b.none
    ad10:	cbnz	w9, ad18 <BZ2_decompress@@Base+0x2660>
    ad14:	add	w5, w5, w3
    ad18:	lsl	w3, w3, #1
    ad1c:	cbnz	w1, ad7c <BZ2_decompress@@Base+0x26c4>
    ad20:	b	ad30 <BZ2_decompress@@Base+0x2678>
    ad24:	add	w5, w5, w3, lsl #1
    ad28:	lsl	w3, w3, #1
    ad2c:	cbnz	w1, ad7c <BZ2_decompress@@Base+0x26c4>
    ad30:	sxtw	x8, w30
    ad34:	add	x30, x8, #0x1
    ad38:	cmp	w30, w16
    ad3c:	b.ge	9e50 <BZ2_decompress@@Base+0x1798>  // b.tcont
    ad40:	add	x8, x21, x30
    ad44:	mov	w9, #0x1ecc                	// #7884
    ad48:	ldrb	w15, [x8, x9]
    ad4c:	mov	w10, #0xfa0c                	// #64012
    ad50:	mov	w8, #0x408                 	// #1032
    ad54:	mov	w9, #0xb17c                	// #45436
    ad58:	add	x12, x21, x15, lsl #2
    ad5c:	ldr	w24, [x12, x10]
    ad60:	madd	x8, x15, x8, x21
    ad64:	mov	w11, #0xe1dc                	// #57820
    ad68:	add	x26, x8, x9
    ad6c:	mov	w9, #0xc9ac                	// #51628
    ad70:	add	x28, x8, x11
    ad74:	add	x23, x8, x9
    ad78:	mov	w1, #0x32                  	// #50
    ad7c:	sub	w1, w1, #0x1
    ad80:	mov	w17, w24
    ad84:	ldr	w8, [x21, #36]
    ad88:	mov	w9, #0x26                  	// #38
    ad8c:	str	w9, [x21, #8]
    ad90:	cmp	w8, w17
    ad94:	b.ge	adf8 <BZ2_decompress@@Base+0x2740>  // b.tcont
    ad98:	ldr	x9, [x21]
    ad9c:	ldr	w10, [x9, #8]
    ada0:	sub	w11, w10, #0x1
    ada4:	b	adb4 <BZ2_decompress@@Base+0x26fc>
    ada8:	cmp	w8, w17
    adac:	sub	w11, w11, #0x1
    adb0:	b.ge	adfc <BZ2_decompress@@Base+0x2744>  // b.tcont
    adb4:	cmn	w11, #0x1
    adb8:	b.eq	9e48 <BZ2_decompress@@Base+0x1790>  // b.none
    adbc:	ldr	x12, [x9]
    adc0:	ldr	w13, [x21, #32]
    adc4:	add	w8, w8, #0x8
    adc8:	ldrb	w10, [x12], #1
    adcc:	bfi	w10, w13, #8, #24
    add0:	stp	w10, w8, [x21, #32]
    add4:	ldr	w13, [x9, #12]
    add8:	str	x12, [x9]
    addc:	adds	w12, w13, #0x1
    ade0:	stp	w11, w12, [x9, #8]
    ade4:	b.cc	ada8 <BZ2_decompress@@Base+0x26f0>  // b.lo, b.ul, b.last
    ade8:	ldr	w12, [x9, #16]
    adec:	add	w12, w12, #0x1
    adf0:	str	w12, [x9, #16]
    adf4:	b	ada8 <BZ2_decompress@@Base+0x26f0>
    adf8:	ldr	w10, [x21, #32]
    adfc:	sub	w8, w8, w17
    ae00:	mov	w9, #0xffffffff            	// #-1
    ae04:	lsr	w10, w10, w8
    ae08:	lsl	w9, w9, w17
    ae0c:	bic	w20, w10, w9
    ae10:	str	w8, [x21, #36]
    ae14:	cmp	w17, #0x14
    ae18:	b.gt	9e54 <BZ2_decompress@@Base+0x179c>
    ae1c:	ldr	w9, [x26, w17, sxtw #2]
    ae20:	cmp	w20, w9
    ae24:	b.le	ae40 <BZ2_decompress@@Base+0x2788>
    ae28:	add	w17, w17, #0x1
    ae2c:	mov	w9, #0x27                  	// #39
    ae30:	cmp	w8, #0x1
    ae34:	str	w9, [x21, #8]
    ae38:	b.ge	9e08 <BZ2_decompress@@Base+0x1750>  // b.tcont
    ae3c:	b	8c98 <BZ2_decompress@@Base+0x5e0>
    ae40:	sxtw	x8, w17
    ae44:	ldr	w8, [x23, x8, lsl #2]
    ae48:	sub	w8, w20, w8
    ae4c:	cmp	w8, #0x101
    ae50:	b.hi	9e54 <BZ2_decompress@@Base+0x179c>  // b.pmore
    ae54:	ldr	w9, [x28, w8, uxtw #2]
    ae58:	cmp	w9, #0x2
    ae5c:	b.cc	acfc <BZ2_decompress@@Base+0x2644>  // b.lo, b.ul, b.last
    ae60:	ldrsw	x8, [x21, #7820]
    ae64:	stur	w9, [x29, #-20]
    ae68:	add	x8, x21, x8
    ae6c:	ldrb	w8, [x8, #3724]
    ae70:	add	x8, x21, x8
    ae74:	ldrb	w9, [x8, #3468]
    ae78:	add	w8, w5, #0x1
    ae7c:	add	x10, x21, x9, lsl #2
    ae80:	ldr	w11, [x10, #68]
    ae84:	add	w11, w11, w8
    ae88:	str	w11, [x10, #68]
    ae8c:	ldrb	w10, [x21, #44]
    ae90:	cbz	w10, aec0 <BZ2_decompress@@Base+0x2808>
    ae94:	tbnz	w5, #31, aee8 <BZ2_decompress@@Base+0x2830>
    ae98:	sxtw	x7, w7
    ae9c:	sxtw	x10, w6
    aea0:	cmp	x7, x10
    aea4:	b.ge	b080 <BZ2_decompress@@Base+0x29c8>  // b.tcont
    aea8:	ldr	x11, [x21, #3160]
    aeac:	subs	w8, w8, #0x1
    aeb0:	strh	w9, [x11, x7, lsl #1]
    aeb4:	add	x7, x7, #0x1
    aeb8:	b.gt	aea0 <BZ2_decompress@@Base+0x27e8>
    aebc:	b	aee8 <BZ2_decompress@@Base+0x2830>
    aec0:	tbnz	w5, #31, aee8 <BZ2_decompress@@Base+0x2830>
    aec4:	sxtw	x7, w7
    aec8:	sxtw	x10, w6
    aecc:	cmp	x7, x10
    aed0:	b.ge	b080 <BZ2_decompress@@Base+0x29c8>  // b.tcont
    aed4:	ldr	x11, [x21, #3152]
    aed8:	subs	w8, w8, #0x1
    aedc:	str	w9, [x11, x7, lsl #2]
    aee0:	add	x7, x7, #0x1
    aee4:	b.gt	aecc <BZ2_decompress@@Base+0x2814>
    aee8:	ldur	w9, [x29, #-20]
    aeec:	mov	w5, w8
    aef0:	ldur	w8, [x29, #-32]
    aef4:	cmp	w9, w8
    aef8:	b.ne	a908 <BZ2_decompress@@Base+0x2250>  // b.any
    aefc:	ldr	w8, [x21, #56]
    af00:	mov	w0, #0xfffffffc            	// #-4
    af04:	stur	w9, [x29, #-20]
    af08:	tbnz	w8, #31, b08c <BZ2_decompress@@Base+0x29d4>
    af0c:	cmp	w8, w7
    af10:	b.ge	b08c <BZ2_decompress@@Base+0x29d4>  // b.tcont
    af14:	mov	x9, xzr
    af18:	add	x8, x21, #0x44
    af1c:	stur	x9, [x29, #-16]
    af20:	ldr	w9, [x8, x9, lsl #2]
    af24:	tbnz	w9, #31, b0f0 <BZ2_decompress@@Base+0x2a38>
    af28:	cmp	w9, w7
    af2c:	b.gt	b0f0 <BZ2_decompress@@Base+0x2a38>
    af30:	ldur	x9, [x29, #-16]
    af34:	add	x9, x9, #0x1
    af38:	cmp	x9, #0x100
    af3c:	b.ne	af1c <BZ2_decompress@@Base+0x2864>  // b.any
    af40:	mov	w22, w1
    af44:	mov	x8, xzr
    af48:	add	x1, x21, #0x448
    af4c:	str	wzr, [x21, #1096]
    af50:	add	x9, x21, x8
    af54:	ldur	q0, [x9, #68]
    af58:	add	x8, x8, #0x10
    af5c:	add	x9, x9, #0x44c
    af60:	cmp	x8, #0x400
    af64:	str	q0, [x9]
    af68:	b.ne	af50 <BZ2_decompress@@Base+0x2898>  // b.any
    af6c:	ldr	w9, [x21, #1096]
    af70:	mov	x8, xzr
    af74:	add	x10, x21, #0x44c
    af78:	ldr	w11, [x10, x8]
    af7c:	add	w9, w11, w9
    af80:	str	w9, [x10, x8]
    af84:	add	x8, x8, #0x4
    af88:	cmp	x8, #0x400
    af8c:	b.ne	af78 <BZ2_decompress@@Base+0x28c0>  // b.any
    af90:	mov	x9, xzr
    af94:	add	x8, x21, #0x448
    af98:	stur	x9, [x29, #-16]
    af9c:	ldr	w9, [x8, x9, lsl #2]
    afa0:	tbnz	w9, #31, b108 <BZ2_decompress@@Base+0x2a50>
    afa4:	cmp	w9, w7
    afa8:	b.gt	b108 <BZ2_decompress@@Base+0x2a50>
    afac:	ldur	x9, [x29, #-16]
    afb0:	add	x9, x9, #0x1
    afb4:	cmp	x9, #0x101
    afb8:	b.ne	af98 <BZ2_decompress@@Base+0x28e0>  // b.any
    afbc:	ldr	w10, [x21, #1096]
    afc0:	mov	x8, xzr
    afc4:	add	x9, x21, #0x44c
    afc8:	ldr	w11, [x9, x8, lsl #2]
    afcc:	cmp	w10, w11
    afd0:	b.gt	b100 <BZ2_decompress@@Base+0x2a48>
    afd4:	add	x8, x8, #0x1
    afd8:	cmp	x8, #0x100
    afdc:	mov	w10, w11
    afe0:	b.ne	afc8 <BZ2_decompress@@Base+0x2910>  // b.any
    afe4:	ldr	w8, [x21, #52]
    afe8:	mov	w9, #0xffffffff            	// #-1
    afec:	str	w9, [x21, #3184]
    aff0:	mov	w9, #0x2                   	// #2
    aff4:	cmp	w8, #0x2
    aff8:	str	x28, [sp, #72]
    affc:	stur	w14, [x29, #-48]
    b000:	str	wzr, [x21, #16]
    b004:	strb	wzr, [x21, #12]
    b008:	str	w9, [x21, #8]
    b00c:	str	x17, [sp, #24]
    b010:	str	w18, [sp, #40]
    b014:	b.ge	b2f4 <BZ2_decompress@@Base+0x2c3c>  // b.tcont
    b018:	ldur	w28, [x29, #-20]
    b01c:	ldrb	w8, [x21, #44]
    b020:	cbz	w8, b368 <BZ2_decompress@@Base+0x2cb0>
    b024:	str	w20, [sp, #64]
    b028:	mov	w20, w2
    b02c:	mov	w8, #0x448                 	// #1096
    b030:	str	x30, [sp, #8]
    b034:	str	x6, [sp, #56]
    b038:	stp	w16, w5, [sp, #32]
    b03c:	stur	x15, [x29, #-64]
    b040:	stur	w4, [x29, #-52]
    b044:	str	w3, [sp, #68]
    b048:	add	x9, x21, x8
    b04c:	ldr	q0, [x9]
    b050:	add	x8, x8, #0x10
    b054:	add	x9, x9, #0x404
    b058:	cmp	x8, #0x848
    b05c:	str	q0, [x9]
    b060:	b.ne	b048 <BZ2_decompress@@Base+0x2990>  // b.any
    b064:	ldr	w8, [x21, #2120]
    b068:	cmp	w7, #0x0
    b06c:	str	w8, [x21, #3148]
    b070:	b.le	b11c <BZ2_decompress@@Base+0x2a64>
    b074:	mov	x8, xzr
    b078:	mov	w9, w7
    b07c:	b	b0b8 <BZ2_decompress@@Base+0x2a00>
    b080:	mov	w0, #0xfffffffc            	// #-4
    b084:	mov	w5, w8
    b088:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    b08c:	stur	w9, [x29, #-32]
    b090:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    b094:	asr	w14, w14, #16
    b098:	bfi	w13, w14, #4, #28
    b09c:	strb	w13, [x11, x12]
    b0a0:	ldr	w11, [x10]
    b0a4:	add	x8, x8, #0x1
    b0a8:	cmp	x9, x8
    b0ac:	add	w11, w11, #0x1
    b0b0:	str	w11, [x10]
    b0b4:	b.eq	b11c <BZ2_decompress@@Base+0x2a64>  // b.none
    b0b8:	ldr	x10, [x21, #3160]
    b0bc:	lsl	x11, x8, #1
    b0c0:	ldrb	w12, [x10, x11]
    b0c4:	add	x15, x21, x12, lsl #2
    b0c8:	ldr	w14, [x15, #2124]
    b0cc:	ubfx	x12, x8, #1, #31
    b0d0:	strh	w14, [x10, x11]
    b0d4:	ldr	x11, [x21, #3168]
    b0d8:	add	x10, x15, #0x84c
    b0dc:	ldrb	w13, [x11, x12]
    b0e0:	tbnz	w8, #0, b094 <BZ2_decompress@@Base+0x29dc>
    b0e4:	and	w13, w13, #0xf0
    b0e8:	orr	w13, w13, w14, asr #16
    b0ec:	b	b09c <BZ2_decompress@@Base+0x29e4>
    b0f0:	ldur	w8, [x29, #-20]
    b0f4:	mov	w0, #0xfffffffc            	// #-4
    b0f8:	stur	w8, [x29, #-32]
    b0fc:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    b100:	add	w8, w8, #0x1
    b104:	stur	x8, [x29, #-16]
    b108:	ldur	w8, [x29, #-20]
    b10c:	mov	w0, #0xfffffffc            	// #-4
    b110:	mov	w1, w22
    b114:	stur	w8, [x29, #-32]
    b118:	b	9e58 <BZ2_decompress@@Base+0x17a0>
    b11c:	ldrsw	x9, [x21, #56]
    b120:	ldr	x8, [x21, #3168]
    b124:	ldr	x10, [x21, #3160]
    b128:	str	x7, [sp, #48]
    b12c:	asr	w11, w9, #1
    b130:	ldrb	w11, [x8, w11, sxtw]
    b134:	ldrh	w19, [x10, x9, lsl #1]
    b138:	ubfiz	w12, w9, #2, #1
    b13c:	lsr	w11, w11, w12
    b140:	bfi	w19, w11, #16, #4
    b144:	mov	w14, w19
    b148:	sbfx	x11, x14, #1, #31
    b14c:	sbfiz	x12, x14, #1, #32
    b150:	ldrb	w13, [x8, x11]
    b154:	ldrh	w19, [x10, x12]
    b158:	strh	w9, [x10, x12]
    b15c:	ldrb	w10, [x8, x11]
    b160:	ubfiz	w12, w14, #2, #1
    b164:	lsr	w12, w13, w12
    b168:	bfi	w19, w12, #16, #4
    b16c:	stur	x14, [x29, #-16]
    b170:	tbnz	w14, #0, b180 <BZ2_decompress@@Base+0x2ac8>
    b174:	and	w10, w10, #0xf0
    b178:	orr	w10, w10, w9, asr #16
    b17c:	b	b188 <BZ2_decompress@@Base+0x2ad0>
    b180:	asr	w9, w9, #16
    b184:	bfi	w10, w9, #4, #28
    b188:	strb	w10, [x8, x11]
    b18c:	ldr	w8, [x21, #56]
    b190:	ldur	x11, [x29, #-16]
    b194:	cmp	w11, w8
    b198:	b.eq	b1ac <BZ2_decompress@@Base+0x2af4>  // b.none
    b19c:	ldr	x10, [x21, #3160]
    b1a0:	ldr	x8, [x21, #3168]
    b1a4:	mov	w9, w11
    b1a8:	b	b144 <BZ2_decompress@@Base+0x2a8c>
    b1ac:	ldrb	w9, [x21, #20]
    b1b0:	mov	w8, #0x86a0                	// #34464
    b1b4:	movk	w8, #0x1, lsl #16
    b1b8:	str	w11, [x21, #60]
    b1bc:	str	wzr, [x21, #1092]
    b1c0:	cbz	w9, b264 <BZ2_decompress@@Base+0x2bac>
    b1c4:	ldr	w9, [x21, #40]
    b1c8:	str	xzr, [x21, #24]
    b1cc:	mul	w8, w9, w8
    b1d0:	cmp	w11, w8
    b1d4:	b.cs	b2ec <BZ2_decompress@@Base+0x2c34>  // b.hs, b.nlast
    b1d8:	ldur	x0, [x29, #-16]
    b1dc:	bl	1590 <BZ2_indexIntoF@plt>
    b1e0:	ldr	w9, [x21, #60]
    b1e4:	ldr	x10, [x21, #3168]
    b1e8:	str	w0, [x21, #64]
    b1ec:	ldr	x11, [x21, #3160]
    b1f0:	lsr	x12, x9, #1
    b1f4:	ldrb	w10, [x10, x12]
    b1f8:	ldr	w12, [x21, #1092]
    b1fc:	ldrh	w11, [x11, x9, lsl #1]
    b200:	ubfiz	w9, w9, #2, #1
    b204:	lsr	w10, w10, w9
    b208:	ldr	w9, [x21, #24]
    b20c:	mov	w8, w0
    b210:	add	w12, w12, #0x1
    b214:	bfi	w11, w10, #16, #4
    b218:	str	w11, [x21, #60]
    b21c:	str	w12, [x21, #1092]
    b220:	cbnz	w9, b244 <BZ2_decompress@@Base+0x2b8c>
    b224:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    b228:	ldrsw	x10, [x21, #28]
    b22c:	ldr	x9, [x9, #4048]
    b230:	add	w11, w10, #0x1
    b234:	ldr	w9, [x9, x10, lsl #2]
    b238:	cmp	w11, #0x200
    b23c:	csinc	w10, wzr, w10, eq  // eq = none
    b240:	stp	w9, w10, [x21, #24]
    b244:	sub	w9, w9, #0x1
    b248:	cmp	w9, #0x1
    b24c:	str	w9, [x21, #24]
    b250:	cset	w9, eq  // eq = none
    b254:	mov	w0, wzr
    b258:	eor	w8, w8, w9
    b25c:	str	w8, [x21, #64]
    b260:	b	b2bc <BZ2_decompress@@Base+0x2c04>
    b264:	ldr	w9, [x21, #40]
    b268:	mul	w8, w9, w8
    b26c:	cmp	w11, w8
    b270:	b.cs	b2ec <BZ2_decompress@@Base+0x2c34>  // b.hs, b.nlast
    b274:	ldur	x0, [x29, #-16]
    b278:	bl	1590 <BZ2_indexIntoF@plt>
    b27c:	ldr	w9, [x21, #60]
    b280:	mov	w8, w0
    b284:	ldr	x10, [x21, #3168]
    b288:	str	w8, [x21, #64]
    b28c:	ldr	x8, [x21, #3160]
    b290:	lsr	x11, x9, #1
    b294:	ldrb	w10, [x10, x11]
    b298:	ldr	w11, [x21, #1092]
    b29c:	ldrh	w8, [x8, x9, lsl #1]
    b2a0:	ubfiz	w9, w9, #2, #1
    b2a4:	lsr	w9, w10, w9
    b2a8:	add	w10, w11, #0x1
    b2ac:	bfi	w8, w9, #16, #4
    b2b0:	mov	w0, wzr
    b2b4:	str	w8, [x21, #60]
    b2b8:	str	w10, [x21, #1092]
    b2bc:	stur	w28, [x29, #-32]
    b2c0:	mov	w2, w20
    b2c4:	ldur	w8, [x29, #-36]
    b2c8:	ldp	w20, w3, [sp, #64]
    b2cc:	ldp	w4, w14, [x29, #-52]
    b2d0:	ldur	x15, [x29, #-64]
    b2d4:	ldr	x28, [sp, #72]
    b2d8:	ldp	w16, w5, [sp, #32]
    b2dc:	ldr	x17, [sp, #24]
    b2e0:	ldp	x7, x6, [sp, #48]
    b2e4:	ldr	x30, [sp, #8]
    b2e8:	b	b4a4 <BZ2_decompress@@Base+0x2dec>
    b2ec:	mov	w0, #0x1                   	// #1
    b2f0:	b	9ea0 <BZ2_decompress@@Base+0x17e8>
    b2f4:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    b2f8:	ldr	x8, [x8, #4016]
    b2fc:	stp	w20, w3, [sp, #64]
    b300:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    b304:	add	x0, x0, #0xc1e
    b308:	ldr	x3, [x8]
    b30c:	stur	x1, [x29, #-16]
    b310:	mov	w1, #0x6                   	// #6
    b314:	stp	w2, w27, [x29, #-44]
    b318:	mov	w2, #0x1                   	// #1
    b31c:	stur	w4, [x29, #-52]
    b320:	mov	x27, x15
    b324:	mov	w28, w16
    b328:	mov	w20, w5
    b32c:	stp	x7, x6, [sp, #48]
    b330:	str	x30, [sp, #8]
    b334:	bl	15b0 <fwrite@plt>
    b338:	ldr	x30, [sp, #8]
    b33c:	ldp	x7, x6, [sp, #48]
    b340:	mov	w5, w20
    b344:	mov	x15, x27
    b348:	ldp	w2, w27, [x29, #-44]
    b34c:	ldur	w4, [x29, #-52]
    b350:	ldp	w20, w3, [sp, #64]
    b354:	ldur	x1, [x29, #-16]
    b358:	mov	w16, w28
    b35c:	ldur	w28, [x29, #-20]
    b360:	ldrb	w8, [x21, #44]
    b364:	cbnz	w8, b024 <BZ2_decompress@@Base+0x296c>
    b368:	mov	x17, x15
    b36c:	ldur	w15, [x29, #-36]
    b370:	ldr	x8, [x21, #3152]
    b374:	mov	w18, w16
    b378:	mov	w16, w2
    b37c:	mov	x1, x7
    b380:	cmp	w7, #0x1
    b384:	b.lt	b3d8 <BZ2_decompress@@Base+0x2d20>  // b.tstop
    b388:	mov	w10, w1
    b38c:	mov	x9, xzr
    b390:	lsl	x10, x10, #8
    b394:	mov	x11, x8
    b398:	ldrb	w12, [x11], #4
    b39c:	add	x12, x21, x12, lsl #2
    b3a0:	ldrsw	x13, [x12, #1096]
    b3a4:	lsl	x13, x13, #2
    b3a8:	ldr	w14, [x8, x13]
    b3ac:	orr	w14, w14, w9
    b3b0:	str	w14, [x8, x13]
    b3b4:	ldr	w13, [x12, #1096]
    b3b8:	add	x9, x9, #0x100
    b3bc:	cmp	x10, x9
    b3c0:	add	w13, w13, #0x1
    b3c4:	str	w13, [x12, #1096]
    b3c8:	b.ne	b398 <BZ2_decompress@@Base+0x2ce0>  // b.any
    b3cc:	mov	w9, w1
    b3d0:	stur	x9, [x29, #-16]
    b3d4:	b	b3dc <BZ2_decompress@@Base+0x2d24>
    b3d8:	stur	xzr, [x29, #-16]
    b3dc:	ldrsw	x9, [x21, #56]
    b3e0:	ldrb	w11, [x21, #20]
    b3e4:	mov	w10, #0x86a0                	// #34464
    b3e8:	movk	w10, #0x1, lsl #16
    b3ec:	ldr	w9, [x8, x9, lsl #2]
    b3f0:	str	wzr, [x21, #1092]
    b3f4:	lsr	x9, x9, #8
    b3f8:	str	w9, [x21, #60]
    b3fc:	cbz	w11, b454 <BZ2_decompress@@Base+0x2d9c>
    b400:	ldr	w11, [x21, #40]
    b404:	mov	w0, #0x1                   	// #1
    b408:	str	xzr, [x21, #24]
    b40c:	mul	w10, w11, w10
    b410:	cmp	w9, w10
    b414:	b.cs	9ea0 <BZ2_decompress@@Base+0x17e8>  // b.hs, b.nlast
    b418:	ldr	w8, [x8, x9, lsl #2]
    b41c:	str	w0, [x21, #1092]
    b420:	lsr	w9, w8, #8
    b424:	str	w9, [x21, #60]
    b428:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    b42c:	ldr	x9, [x9, #4048]
    b430:	and	w8, w8, #0xff
    b434:	ldr	w9, [x9]
    b438:	sub	w9, w9, #0x1
    b43c:	cmp	w9, #0x1
    b440:	stp	w9, w0, [x21, #24]
    b444:	cset	w9, eq  // eq = none
    b448:	eor	w8, w8, w9
    b44c:	str	w8, [x21, #64]
    b450:	b	b47c <BZ2_decompress@@Base+0x2dc4>
    b454:	ldr	w11, [x21, #40]
    b458:	mov	w0, #0x1                   	// #1
    b45c:	mul	w10, w11, w10
    b460:	cmp	w9, w10
    b464:	b.cs	9ea0 <BZ2_decompress@@Base+0x17e8>  // b.hs, b.nlast
    b468:	ldr	w8, [x8, w9, uxtw #2]
    b46c:	str	w0, [x21, #1092]
    b470:	and	w9, w8, #0xff
    b474:	lsr	w8, w8, #8
    b478:	stp	w8, w9, [x21, #60]
    b47c:	stur	w28, [x29, #-32]
    b480:	mov	w8, w15
    b484:	mov	x15, x17
    b488:	ldur	w14, [x29, #-48]
    b48c:	ldr	x28, [sp, #72]
    b490:	ldr	x17, [sp, #24]
    b494:	mov	w0, wzr
    b498:	mov	w2, w16
    b49c:	mov	w16, w18
    b4a0:	mov	x7, x1
    b4a4:	ldr	w18, [sp, #40]
    b4a8:	mov	w1, w22
    b4ac:	b	9e5c <BZ2_decompress@@Base+0x17a4>

000000000000b4b0 <BZ2_bz__AssertH__fail@@Base>:
    b4b0:	stp	x29, x30, [sp, #-32]!
    b4b4:	stp	x20, x19, [sp, #16]
    b4b8:	mov	x29, sp
    b4bc:	adrp	x20, 1f000 <BZ2_bzerror@@Base+0x10cec>
    b4c0:	ldr	x20, [x20, #4016]
    b4c4:	mov	w19, w0
    b4c8:	adrp	x1, e000 <BZ2_bzopen@@Base+0x1d4>
    b4cc:	adrp	x3, f000 <BZ2_bzerror@@Base+0xcec>
    b4d0:	ldr	x8, [x20]
    b4d4:	add	x1, x1, #0xc38
    b4d8:	add	x3, x3, #0x23f
    b4dc:	mov	w2, w19
    b4e0:	mov	x0, x8
    b4e4:	bl	1610 <fprintf@plt>
    b4e8:	cmp	w19, #0x3ef
    b4ec:	b.ne	b508 <BZ2_bz__AssertH__fail@@Base+0x58>  // b.any
    b4f0:	ldr	x3, [x20]
    b4f4:	adrp	x0, e000 <BZ2_bzopen@@Base+0x1d4>
    b4f8:	add	x0, x0, #0xdd5
    b4fc:	mov	w1, #0x420                 	// #1056
    b500:	mov	w2, #0x1                   	// #1
    b504:	bl	15b0 <fwrite@plt>
    b508:	mov	w0, #0x3                   	// #3
    b50c:	bl	1440 <exit@plt>

000000000000b510 <BZ2_bzlibVersion@@Base>:
    b510:	adrp	x0, f000 <BZ2_bzerror@@Base+0xcec>
    b514:	add	x0, x0, #0x23f
    b518:	ret

000000000000b51c <BZ2_bzCompressInit@@Base>:
    b51c:	stp	x29, x30, [sp, #-64]!
    b520:	stp	x24, x23, [sp, #16]
    b524:	stp	x22, x21, [sp, #32]
    b528:	stp	x20, x19, [sp, #48]
    b52c:	mov	x29, sp
    b530:	mov	x19, x0
    b534:	cmp	w3, #0xfa
    b538:	mov	w0, #0xfffffffe            	// #-2
    b53c:	b.hi	b6e8 <BZ2_bzCompressInit@@Base+0x1cc>  // b.pmore
    b540:	cbz	x19, b6e8 <BZ2_bzCompressInit@@Base+0x1cc>
    b544:	sub	w8, w1, #0x1
    b548:	mov	w21, w1
    b54c:	cmp	w8, #0x8
    b550:	b.hi	b6e8 <BZ2_bzCompressInit@@Base+0x1cc>  // b.pmore
    b554:	ldr	x8, [x19, #56]
    b558:	cmp	w3, #0x0
    b55c:	mov	w9, #0x1e                  	// #30
    b560:	mov	w22, w2
    b564:	csel	w24, w9, w3, eq  // eq = none
    b568:	cbz	x8, b698 <BZ2_bzCompressInit@@Base+0x17c>
    b56c:	ldr	x9, [x19, #64]
    b570:	cbnz	x9, b580 <BZ2_bzCompressInit@@Base+0x64>
    b574:	adrp	x9, b000 <BZ2_decompress@@Base+0x2948>
    b578:	add	x9, x9, #0x708
    b57c:	str	x9, [x19, #64]
    b580:	ldr	x0, [x19, #72]
    b584:	mov	w1, #0xd9d8                	// #55768
    b588:	mov	w2, #0x1                   	// #1
    b58c:	blr	x8
    b590:	cbz	x0, b6e4 <BZ2_bzCompressInit@@Base+0x1c8>
    b594:	str	x19, [x0]
    b598:	stp	xzr, xzr, [x0, #32]
    b59c:	str	xzr, [x0, #24]
    b5a0:	mov	x20, x0
    b5a4:	ldr	x8, [x19, #56]
    b5a8:	ldr	x0, [x19, #72]
    b5ac:	mov	w9, #0x1a80                	// #6784
    b5b0:	movk	w9, #0x6, lsl #16
    b5b4:	mul	w23, w21, w9
    b5b8:	mov	w2, #0x1                   	// #1
    b5bc:	mov	w1, w23
    b5c0:	blr	x8
    b5c4:	str	x0, [x20, #24]
    b5c8:	ldr	x8, [x19, #56]
    b5cc:	ldr	x0, [x19, #72]
    b5d0:	add	w1, w23, #0x88
    b5d4:	mov	w2, #0x1                   	// #1
    b5d8:	blr	x8
    b5dc:	str	x0, [x20, #32]
    b5e0:	ldr	x8, [x19, #56]
    b5e4:	ldr	x0, [x19, #72]
    b5e8:	mov	w1, #0x40004               	// #262148
    b5ec:	mov	w2, #0x1                   	// #1
    b5f0:	blr	x8
    b5f4:	ldr	x1, [x20, #24]
    b5f8:	str	x0, [x20, #40]
    b5fc:	cbz	x1, b6b8 <BZ2_bzCompressInit@@Base+0x19c>
    b600:	cbz	x0, b6b0 <BZ2_bzCompressInit@@Base+0x194>
    b604:	ldr	x8, [x20, #32]
    b608:	cbz	x8, b6b0 <BZ2_bzCompressInit@@Base+0x194>
    b60c:	mov	w9, #0x86a0                	// #34464
    b610:	movk	w9, #0x1, lsl #16
    b614:	movi	v0.2s, #0x2
    b618:	mul	w9, w21, w9
    b61c:	stp	x1, x8, [x20, #56]
    b620:	movi	v1.2d, #0x0
    b624:	adrp	x8, e000 <BZ2_bzopen@@Base+0x1d4>
    b628:	str	d0, [x20, #8]
    b62c:	movi	d0, #0xffffffff
    b630:	sub	w9, w9, #0x13
    b634:	str	w22, [x20, #656]
    b638:	str	w21, [x20, #664]
    b63c:	str	w24, [x20, #88]
    b640:	stp	x1, xzr, [x20, #72]
    b644:	str	w9, [x20, #112]
    b648:	str	x20, [x19, #48]
    b64c:	stur	d1, [x19, #12]
    b650:	stur	d1, [x19, #36]
    b654:	str	d0, [x20, #648]
    b658:	ldr	d0, [x8, #3112]
    b65c:	mov	w0, wzr
    b660:	mov	w10, #0x1                   	// #1
    b664:	str	wzr, [x20, #108]
    b668:	stur	d1, [x20, #116]
    b66c:	stp	q1, q1, [x20, #128]
    b670:	stp	q1, q1, [x20, #160]
    b674:	stp	q1, q1, [x20, #192]
    b678:	stp	q1, q1, [x20, #224]
    b67c:	stp	q1, q1, [x20, #256]
    b680:	stp	q1, q1, [x20, #288]
    b684:	stp	q1, q1, [x20, #320]
    b688:	stp	q1, q1, [x20, #352]
    b68c:	stur	d0, [x20, #92]
    b690:	str	w10, [x20, #660]
    b694:	b	b6e8 <BZ2_bzCompressInit@@Base+0x1cc>
    b698:	adrp	x8, b000 <BZ2_decompress@@Base+0x2948>
    b69c:	add	x8, x8, #0x6fc
    b6a0:	str	x8, [x19, #56]
    b6a4:	ldr	x9, [x19, #64]
    b6a8:	cbnz	x9, b580 <BZ2_bzCompressInit@@Base+0x64>
    b6ac:	b	b574 <BZ2_bzCompressInit@@Base+0x58>
    b6b0:	ldp	x8, x0, [x19, #64]
    b6b4:	blr	x8
    b6b8:	ldr	x1, [x20, #32]
    b6bc:	cbz	x1, b6c8 <BZ2_bzCompressInit@@Base+0x1ac>
    b6c0:	ldp	x8, x0, [x19, #64]
    b6c4:	blr	x8
    b6c8:	ldr	x1, [x20, #40]
    b6cc:	cbz	x1, b6d8 <BZ2_bzCompressInit@@Base+0x1bc>
    b6d0:	ldp	x8, x0, [x19, #64]
    b6d4:	blr	x8
    b6d8:	ldp	x8, x0, [x19, #64]
    b6dc:	mov	x1, x20
    b6e0:	blr	x8
    b6e4:	mov	w0, #0xfffffffd            	// #-3
    b6e8:	ldp	x20, x19, [sp, #48]
    b6ec:	ldp	x22, x21, [sp, #32]
    b6f0:	ldp	x24, x23, [sp, #16]
    b6f4:	ldp	x29, x30, [sp], #64
    b6f8:	ret
    b6fc:	mul	w8, w2, w1
    b700:	sxtw	x0, w8
    b704:	b	1480 <malloc@plt>
    b708:	cbz	x1, b714 <BZ2_bzCompressInit@@Base+0x1f8>
    b70c:	mov	x0, x1
    b710:	b	1540 <free@plt>
    b714:	ret

000000000000b718 <BZ2_bzCompress@@Base>:
    b718:	stp	x29, x30, [sp, #-32]!
    b71c:	str	x19, [sp, #16]
    b720:	mov	x29, sp
    b724:	cbz	x0, b880 <BZ2_bzCompress@@Base+0x168>
    b728:	ldr	x19, [x0, #48]
    b72c:	cbz	x19, b880 <BZ2_bzCompress@@Base+0x168>
    b730:	ldr	x8, [x19]
    b734:	cmp	x8, x0
    b738:	b.eq	b750 <BZ2_bzCompress@@Base+0x38>  // b.none
    b73c:	mov	w8, #0xfffffffe            	// #-2
    b740:	ldr	x19, [sp, #16]
    b744:	mov	w0, w8
    b748:	ldp	x29, x30, [sp], #32
    b74c:	ret
    b750:	cbz	w1, b78c <BZ2_bzCompress@@Base+0x74>
    b754:	cmp	w1, #0x1
    b758:	b.eq	b7d8 <BZ2_bzCompress@@Base+0xc0>  // b.none
    b75c:	cmp	w1, #0x2
    b760:	b.ne	b854 <BZ2_bzCompress@@Base+0x13c>  // b.any
    b764:	ldr	w8, [x19, #8]
    b768:	cmp	w8, #0x2
    b76c:	b.ne	b7fc <BZ2_bzCompress@@Base+0xe4>  // b.any
    b770:	ldr	w9, [x0, #8]
    b774:	mov	w8, #0x4                   	// #4
    b778:	str	w8, [x19, #8]
    b77c:	str	w9, [x19, #16]
    b780:	cmp	w8, #0x2
    b784:	b.eq	b770 <BZ2_bzCompress@@Base+0x58>  // b.none
    b788:	b	b7fc <BZ2_bzCompress@@Base+0xe4>
    b78c:	ldr	w8, [x19, #8]
    b790:	sub	w8, w8, #0x1
    b794:	cmp	w8, #0x3
    b798:	b.hi	b894 <BZ2_bzCompress@@Base+0x17c>  // b.pmore
    b79c:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    b7a0:	add	x9, x9, #0xc30
    b7a4:	adr	x10, b740 <BZ2_bzCompress@@Base+0x28>
    b7a8:	ldrb	w11, [x9, x8]
    b7ac:	add	x10, x10, x11, lsl #2
    b7b0:	mov	w8, #0xffffffff            	// #-1
    b7b4:	br	x10
    b7b8:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    b7bc:	tst	w0, #0xff
    b7c0:	mov	w8, #0xfffffffe            	// #-2
    b7c4:	cinv	w8, w8, ne  // ne = any
    b7c8:	ldr	x19, [sp, #16]
    b7cc:	mov	w0, w8
    b7d0:	ldp	x29, x30, [sp], #32
    b7d4:	ret
    b7d8:	ldr	w8, [x19, #8]
    b7dc:	cmp	w8, #0x2
    b7e0:	b.ne	b7fc <BZ2_bzCompress@@Base+0xe4>  // b.any
    b7e4:	ldr	w9, [x0, #8]
    b7e8:	mov	w8, #0x3                   	// #3
    b7ec:	str	w8, [x19, #8]
    b7f0:	str	w9, [x19, #16]
    b7f4:	cmp	w8, #0x2
    b7f8:	b.eq	b7e4 <BZ2_bzCompress@@Base+0xcc>  // b.none
    b7fc:	cmp	w8, #0x1
    b800:	b.eq	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.none
    b804:	cmp	w8, #0x3
    b808:	b.eq	b8a8 <BZ2_bzCompress@@Base+0x190>  // b.none
    b80c:	cmp	w8, #0x4
    b810:	b.ne	b894 <BZ2_bzCompress@@Base+0x17c>  // b.any
    b814:	cmp	w1, #0x2
    b818:	b.ne	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.any
    b81c:	ldr	w8, [x19, #16]
    b820:	ldr	w9, [x0, #8]
    b824:	cmp	w8, w9
    b828:	b.ne	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.any
    b82c:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    b830:	tst	w0, #0xff
    b834:	b.eq	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.none
    b838:	ldr	w8, [x19, #16]
    b83c:	cbz	w8, b934 <BZ2_bzCompress@@Base+0x21c>
    b840:	mov	w8, #0x3                   	// #3
    b844:	ldr	x19, [sp, #16]
    b848:	mov	w0, w8
    b84c:	ldp	x29, x30, [sp], #32
    b850:	ret
    b854:	ldr	w8, [x19, #8]
    b858:	sub	w8, w8, #0x1
    b85c:	cmp	w8, #0x3
    b860:	b.hi	b894 <BZ2_bzCompress@@Base+0x17c>  // b.pmore
    b864:	adrp	x9, e000 <BZ2_bzopen@@Base+0x1d4>
    b868:	add	x9, x9, #0xc34
    b86c:	adr	x10, b740 <BZ2_bzCompress@@Base+0x28>
    b870:	ldrb	w11, [x9, x8]
    b874:	add	x10, x10, x11, lsl #2
    b878:	mov	w8, #0xffffffff            	// #-1
    b87c:	br	x10
    b880:	mov	w8, #0xfffffffe            	// #-2
    b884:	ldr	x19, [sp, #16]
    b888:	mov	w0, w8
    b88c:	ldp	x29, x30, [sp], #32
    b890:	ret
    b894:	mov	w8, wzr
    b898:	ldr	x19, [sp, #16]
    b89c:	mov	w0, w8
    b8a0:	ldp	x29, x30, [sp], #32
    b8a4:	ret
    b8a8:	cmp	w1, #0x1
    b8ac:	b.ne	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.any
    b8b0:	ldr	w8, [x19, #16]
    b8b4:	ldr	w9, [x0, #8]
    b8b8:	cmp	w8, w9
    b8bc:	b.ne	b8e0 <BZ2_bzCompress@@Base+0x1c8>  // b.any
    b8c0:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    b8c4:	ldr	w8, [x19, #16]
    b8c8:	cbz	w8, b8f4 <BZ2_bzCompress@@Base+0x1dc>
    b8cc:	mov	w8, #0x2                   	// #2
    b8d0:	ldr	x19, [sp, #16]
    b8d4:	mov	w0, w8
    b8d8:	ldp	x29, x30, [sp], #32
    b8dc:	ret
    b8e0:	mov	w8, #0xffffffff            	// #-1
    b8e4:	ldr	x19, [sp, #16]
    b8e8:	mov	w0, w8
    b8ec:	ldp	x29, x30, [sp], #32
    b8f0:	ret
    b8f4:	ldr	w8, [x19, #92]
    b8f8:	cmp	w8, #0xff
    b8fc:	b.hi	b90c <BZ2_bzCompress@@Base+0x1f4>  // b.pmore
    b900:	ldr	w8, [x19, #96]
    b904:	cmp	w8, #0x0
    b908:	b.gt	b8cc <BZ2_bzCompress@@Base+0x1b4>
    b90c:	ldp	w9, w8, [x19, #116]
    b910:	cmp	w8, w9
    b914:	mov	w8, #0x2                   	// #2
    b918:	b.lt	b740 <BZ2_bzCompress@@Base+0x28>  // b.tstop
    b91c:	str	w8, [x19, #8]
    b920:	mov	w8, #0x1                   	// #1
    b924:	ldr	x19, [sp, #16]
    b928:	mov	w0, w8
    b92c:	ldp	x29, x30, [sp], #32
    b930:	ret
    b934:	ldr	w8, [x19, #92]
    b938:	cmp	w8, #0xff
    b93c:	b.hi	b94c <BZ2_bzCompress@@Base+0x234>  // b.pmore
    b940:	ldr	w8, [x19, #96]
    b944:	cmp	w8, #0x0
    b948:	b.gt	b840 <BZ2_bzCompress@@Base+0x128>
    b94c:	ldp	w9, w8, [x19, #116]
    b950:	cmp	w8, w9
    b954:	b.lt	b840 <BZ2_bzCompress@@Base+0x128>  // b.tstop
    b958:	mov	w8, #0x1                   	// #1
    b95c:	str	w8, [x19, #8]
    b960:	mov	w8, #0x4                   	// #4
    b964:	ldr	x19, [sp, #16]
    b968:	mov	w0, w8
    b96c:	ldp	x29, x30, [sp], #32
    b970:	ret
    b974:	str	d8, [sp, #-96]!
    b978:	stp	x29, x30, [sp, #8]
    b97c:	str	x27, [sp, #24]
    b980:	stp	x26, x25, [sp, #32]
    b984:	stp	x24, x23, [sp, #48]
    b988:	stp	x22, x21, [sp, #64]
    b98c:	stp	x20, x19, [sp, #80]
    b990:	mov	x29, sp
    b994:	ldr	x19, [x0, #48]
    b998:	adrp	x23, 1f000 <BZ2_bzerror@@Base+0x10cec>
    b99c:	adrp	x8, e000 <BZ2_bzopen@@Base+0x1d4>
    b9a0:	ldr	x23, [x23, #4024]
    b9a4:	ldr	d8, [x8, #3112]
    b9a8:	mov	w20, wzr
    b9ac:	mov	w21, wzr
    b9b0:	mov	w22, #0x1                   	// #1
    b9b4:	mov	w24, #0xffffffff            	// #-1
    b9b8:	add	x25, x19, #0x80
    b9bc:	mov	w26, #0x2                   	// #2
    b9c0:	b	b9d0 <BZ2_bzCompress@@Base+0x2b8>
    b9c4:	ldr	x8, [x19]
    b9c8:	ldr	w8, [x8, #8]
    b9cc:	cbz	w8, bd8c <BZ2_bzCompress@@Base+0x674>
    b9d0:	ldr	w8, [x19, #12]
    b9d4:	cmp	w8, #0x2
    b9d8:	b.eq	bb1c <BZ2_bzCompress@@Base+0x404>  // b.none
    b9dc:	cmp	w8, #0x1
    b9e0:	b.ne	b9d4 <BZ2_bzCompress@@Base+0x2bc>  // b.any
    b9e4:	ldr	x9, [x19]
    b9e8:	ldr	w8, [x19, #120]
    b9ec:	ldr	w10, [x9, #32]
    b9f0:	cbz	w10, ba74 <BZ2_bzCompress@@Base+0x35c>
    b9f4:	ldr	w10, [x19, #116]
    b9f8:	cmp	w8, w10
    b9fc:	b.ge	ba74 <BZ2_bzCompress@@Base+0x35c>  // b.tcont
    ba00:	ldr	x9, [x9, #24]
    ba04:	ldr	x10, [x19, #80]
    ba08:	ldrb	w8, [x10, w8, sxtw]
    ba0c:	strb	w8, [x9]
    ba10:	ldr	w8, [x19, #120]
    ba14:	ldr	x10, [x19]
    ba18:	add	w8, w8, #0x1
    ba1c:	str	w8, [x19, #120]
    ba20:	ldp	w9, w13, [x10, #32]
    ba24:	ldr	x12, [x10, #24]
    ba28:	sub	w11, w9, #0x1
    ba2c:	add	x9, x12, #0x1
    ba30:	adds	w12, w13, #0x1
    ba34:	stp	w11, w12, [x10, #32]
    ba38:	str	x9, [x10, #24]
    ba3c:	b.cc	ba4c <BZ2_bzCompress@@Base+0x334>  // b.lo, b.ul, b.last
    ba40:	ldr	w12, [x10, #40]
    ba44:	add	w12, w12, #0x1
    ba48:	str	w12, [x10, #40]
    ba4c:	cbz	w11, ba5c <BZ2_bzCompress@@Base+0x344>
    ba50:	ldr	w10, [x19, #116]
    ba54:	cmp	w8, w10
    ba58:	b.lt	ba04 <BZ2_bzCompress@@Base+0x2ec>  // b.tstop
    ba5c:	mov	w9, #0x1                   	// #1
    ba60:	ldr	w10, [x19, #116]
    ba64:	orr	w20, w9, w20
    ba68:	cmp	w8, w10
    ba6c:	b.ge	ba88 <BZ2_bzCompress@@Base+0x370>  // b.tcont
    ba70:	b	bd8c <BZ2_bzCompress@@Base+0x674>
    ba74:	mov	w9, wzr
    ba78:	ldr	w10, [x19, #116]
    ba7c:	orr	w20, w9, w20
    ba80:	cmp	w8, w10
    ba84:	b.lt	bd8c <BZ2_bzCompress@@Base+0x674>  // b.tstop
    ba88:	ldr	w10, [x19, #8]
    ba8c:	cmp	w10, #0x4
    ba90:	b.ne	bab4 <BZ2_bzCompress@@Base+0x39c>  // b.any
    ba94:	ldr	w8, [x19, #16]
    ba98:	cbnz	w8, bab4 <BZ2_bzCompress@@Base+0x39c>
    ba9c:	ldr	w8, [x19, #92]
    baa0:	cmp	w8, #0xff
    baa4:	b.hi	bd8c <BZ2_bzCompress@@Base+0x674>  // b.pmore
    baa8:	ldr	w8, [x19, #96]
    baac:	cmp	w8, #0x1
    bab0:	b.lt	bd8c <BZ2_bzCompress@@Base+0x674>  // b.tstop
    bab4:	movi	v0.2d, #0x0
    bab8:	str	wzr, [x19, #108]
    babc:	stp	wzr, wzr, [x19, #116]
    bac0:	str	w24, [x19, #648]
    bac4:	stp	q0, q0, [x25, #224]
    bac8:	stp	q0, q0, [x25, #192]
    bacc:	stp	q0, q0, [x25, #160]
    bad0:	stp	q0, q0, [x25, #128]
    bad4:	stp	q0, q0, [x25, #96]
    bad8:	stp	q0, q0, [x25, #64]
    badc:	stp	q0, q0, [x25, #32]
    bae0:	stp	q0, q0, [x25]
    bae4:	ldr	w8, [x19, #660]
    bae8:	cmp	w10, #0x3
    baec:	str	w26, [x19, #12]
    baf0:	add	w8, w8, #0x1
    baf4:	str	w8, [x19, #660]
    baf8:	b.ne	bb20 <BZ2_bzCompress@@Base+0x408>  // b.any
    bafc:	ldr	w8, [x19, #16]
    bb00:	cbnz	w8, bb1c <BZ2_bzCompress@@Base+0x404>
    bb04:	ldr	w8, [x19, #92]
    bb08:	cmp	w8, #0xff
    bb0c:	b.hi	bd8c <BZ2_bzCompress@@Base+0x674>  // b.pmore
    bb10:	ldr	w8, [x19, #96]
    bb14:	cmp	w8, #0x0
    bb18:	b.le	bd8c <BZ2_bzCompress@@Base+0x674>
    bb1c:	ldr	w10, [x19, #8]
    bb20:	ldp	w8, w9, [x19, #108]
    bb24:	cmp	w10, #0x2
    bb28:	b.ne	bc10 <BZ2_bzCompress@@Base+0x4f8>  // b.any
    bb2c:	cmp	w8, w9
    bb30:	b.ge	bd14 <BZ2_bzCompress@@Base+0x5fc>  // b.tcont
    bb34:	ldr	x10, [x19]
    bb38:	ldr	w11, [x10, #8]
    bb3c:	cbz	w11, bd14 <BZ2_bzCompress@@Base+0x5fc>
    bb40:	ldr	x12, [x10]
    bb44:	ldr	w11, [x19, #92]
    bb48:	ldrb	w27, [x12]
    bb4c:	ldr	w9, [x19, #96]
    bb50:	cmp	w11, w27
    bb54:	b.ne	bb6c <BZ2_bzCompress@@Base+0x454>  // b.any
    bb58:	cmp	w9, #0xff
    bb5c:	b.eq	bbb0 <BZ2_bzCompress@@Base+0x498>  // b.none
    bb60:	add	w8, w9, #0x1
    bb64:	str	w8, [x19, #96]
    bb68:	b	bbc4 <BZ2_bzCompress@@Base+0x4ac>
    bb6c:	cmp	w9, #0x1
    bb70:	b.ne	bbb0 <BZ2_bzCompress@@Base+0x498>  // b.any
    bb74:	ldr	w9, [x19, #648]
    bb78:	and	w10, w11, #0xff
    bb7c:	add	x12, x19, w11, uxtw
    bb80:	eor	w10, w10, w9, lsr #24
    bb84:	ldr	w10, [x23, w10, uxtw #2]
    bb88:	eor	w9, w10, w9, lsl #8
    bb8c:	str	w9, [x19, #648]
    bb90:	strb	w22, [x12, #128]
    bb94:	ldr	x9, [x19, #64]
    bb98:	strb	w11, [x9, w8, sxtw]
    bb9c:	ldr	w8, [x19, #108]
    bba0:	str	w27, [x19, #92]
    bba4:	add	w8, w8, #0x1
    bba8:	str	w8, [x19, #108]
    bbac:	b	bbc4 <BZ2_bzCompress@@Base+0x4ac>
    bbb0:	cmp	w11, #0xff
    bbb4:	b.hi	bbc0 <BZ2_bzCompress@@Base+0x4a8>  // b.pmore
    bbb8:	mov	x0, x19
    bbbc:	bl	e334 <BZ2_bzerror@@Base+0x20>
    bbc0:	stp	w27, w22, [x19, #92]
    bbc4:	ldr	x8, [x19]
    bbc8:	ldr	x9, [x8]
    bbcc:	ldp	w10, w11, [x8, #8]
    bbd0:	add	x12, x9, #0x1
    bbd4:	sub	w13, w10, #0x1
    bbd8:	adds	w9, w11, #0x1
    bbdc:	str	x12, [x8]
    bbe0:	stp	w13, w9, [x8, #8]
    bbe4:	b.cc	bbf4 <BZ2_bzCompress@@Base+0x4dc>  // b.lo, b.ul, b.last
    bbe8:	ldr	w9, [x8, #16]
    bbec:	add	w9, w9, #0x1
    bbf0:	str	w9, [x8, #16]
    bbf4:	ldp	w8, w9, [x19, #108]
    bbf8:	mov	w10, #0x1                   	// #1
    bbfc:	cmp	w8, w9
    bc00:	b.ge	bd00 <BZ2_bzCompress@@Base+0x5e8>  // b.tcont
    bc04:	mov	w11, w27
    bc08:	cbnz	w13, bb48 <BZ2_bzCompress@@Base+0x430>
    bc0c:	b	bd00 <BZ2_bzCompress@@Base+0x5e8>
    bc10:	cmp	w8, w9
    bc14:	b.ge	bd2c <BZ2_bzCompress@@Base+0x614>  // b.tcont
    bc18:	ldr	x11, [x19]
    bc1c:	ldr	w10, [x11, #8]
    bc20:	cbz	w10, bd00 <BZ2_bzCompress@@Base+0x5e8>
    bc24:	ldr	w10, [x19, #16]
    bc28:	cbz	w10, bd00 <BZ2_bzCompress@@Base+0x5e8>
    bc2c:	ldr	x9, [x11]
    bc30:	ldrb	w27, [x9]
    bc34:	ldp	w9, w10, [x19, #92]
    bc38:	cmp	w9, w27
    bc3c:	b.ne	bc54 <BZ2_bzCompress@@Base+0x53c>  // b.any
    bc40:	cmp	w10, #0xff
    bc44:	b.eq	bc98 <BZ2_bzCompress@@Base+0x580>  // b.none
    bc48:	add	w8, w10, #0x1
    bc4c:	str	w8, [x19, #96]
    bc50:	b	bcac <BZ2_bzCompress@@Base+0x594>
    bc54:	cmp	w10, #0x1
    bc58:	b.ne	bc98 <BZ2_bzCompress@@Base+0x580>  // b.any
    bc5c:	ldr	w10, [x19, #648]
    bc60:	and	w11, w9, #0xff
    bc64:	add	x12, x19, x9
    bc68:	eor	w11, w11, w10, lsr #24
    bc6c:	ldr	w11, [x23, w11, uxtw #2]
    bc70:	eor	w10, w11, w10, lsl #8
    bc74:	str	w10, [x19, #648]
    bc78:	strb	w22, [x12, #128]
    bc7c:	ldr	x10, [x19, #64]
    bc80:	strb	w9, [x10, w8, sxtw]
    bc84:	ldr	w8, [x19, #108]
    bc88:	str	w27, [x19, #92]
    bc8c:	add	w8, w8, #0x1
    bc90:	str	w8, [x19, #108]
    bc94:	b	bcac <BZ2_bzCompress@@Base+0x594>
    bc98:	cmp	w9, #0xff
    bc9c:	b.hi	bca8 <BZ2_bzCompress@@Base+0x590>  // b.pmore
    bca0:	mov	x0, x19
    bca4:	bl	e334 <BZ2_bzerror@@Base+0x20>
    bca8:	stp	w27, w22, [x19, #92]
    bcac:	ldr	x11, [x19]
    bcb0:	ldr	x8, [x11]
    bcb4:	ldp	w9, w10, [x11, #8]
    bcb8:	add	x8, x8, #0x1
    bcbc:	sub	w12, w9, #0x1
    bcc0:	adds	w9, w10, #0x1
    bcc4:	str	x8, [x11]
    bcc8:	stp	w12, w9, [x11, #8]
    bccc:	b.cc	bcdc <BZ2_bzCompress@@Base+0x5c4>  // b.lo, b.ul, b.last
    bcd0:	ldr	w8, [x11, #16]
    bcd4:	add	w8, w8, #0x1
    bcd8:	str	w8, [x11, #16]
    bcdc:	ldr	w10, [x19, #16]
    bce0:	ldp	w8, w9, [x19, #108]
    bce4:	sub	w13, w10, #0x1
    bce8:	cmp	w8, w9
    bcec:	mov	w10, #0x1                   	// #1
    bcf0:	str	w13, [x19, #16]
    bcf4:	b.ge	bd00 <BZ2_bzCompress@@Base+0x5e8>  // b.tcont
    bcf8:	cbz	w12, bd00 <BZ2_bzCompress@@Base+0x5e8>
    bcfc:	cbnz	w13, bc2c <BZ2_bzCompress@@Base+0x514>
    bd00:	ldr	w11, [x19, #8]
    bd04:	orr	w21, w10, w21
    bd08:	cmp	w11, #0x2
    bd0c:	b.eq	bd48 <BZ2_bzCompress@@Base+0x630>  // b.none
    bd10:	b	bd40 <BZ2_bzCompress@@Base+0x628>
    bd14:	mov	w10, wzr
    bd18:	ldr	w11, [x19, #8]
    bd1c:	orr	w21, w10, w21
    bd20:	cmp	w11, #0x2
    bd24:	b.ne	bd40 <BZ2_bzCompress@@Base+0x628>  // b.any
    bd28:	b	bd48 <BZ2_bzCompress@@Base+0x630>
    bd2c:	mov	w10, wzr
    bd30:	ldr	w11, [x19, #8]
    bd34:	orr	w21, w10, w21
    bd38:	cmp	w11, #0x2
    bd3c:	b.eq	bd48 <BZ2_bzCompress@@Base+0x630>  // b.none
    bd40:	ldr	w10, [x19, #16]
    bd44:	cbz	w10, bd58 <BZ2_bzCompress@@Base+0x640>
    bd48:	cmp	w8, w9
    bd4c:	b.lt	b9c4 <BZ2_bzCompress@@Base+0x2ac>  // b.tstop
    bd50:	mov	w1, wzr
    bd54:	b	bd7c <BZ2_bzCompress@@Base+0x664>
    bd58:	ldr	w8, [x19, #92]
    bd5c:	cmp	w8, #0xff
    bd60:	b.hi	bd70 <BZ2_bzCompress@@Base+0x658>  // b.pmore
    bd64:	mov	x0, x19
    bd68:	bl	e334 <BZ2_bzerror@@Base+0x20>
    bd6c:	ldr	w11, [x19, #8]
    bd70:	cmp	w11, #0x4
    bd74:	cset	w1, eq  // eq = none
    bd78:	stur	d8, [x19, #92]
    bd7c:	mov	x0, x19
    bd80:	bl	1520 <BZ2_compressBlock@plt>
    bd84:	str	w22, [x19, #12]
    bd88:	b	b9d0 <BZ2_bzCompress@@Base+0x2b8>
    bd8c:	orr	w8, w21, w20
    bd90:	ldp	x20, x19, [sp, #80]
    bd94:	ldp	x22, x21, [sp, #64]
    bd98:	ldp	x24, x23, [sp, #48]
    bd9c:	ldp	x26, x25, [sp, #32]
    bda0:	ldr	x27, [sp, #24]
    bda4:	ldp	x29, x30, [sp, #8]
    bda8:	tst	w8, #0xff
    bdac:	cset	w0, ne  // ne = any
    bdb0:	ldr	d8, [sp], #96
    bdb4:	ret

000000000000bdb8 <BZ2_bzCompressEnd@@Base>:
    bdb8:	stp	x29, x30, [sp, #-32]!
    bdbc:	stp	x20, x19, [sp, #16]
    bdc0:	mov	x29, sp
    bdc4:	cbz	x0, bde0 <BZ2_bzCompressEnd@@Base+0x28>
    bdc8:	ldr	x20, [x0, #48]
    bdcc:	mov	x19, x0
    bdd0:	cbz	x20, bde0 <BZ2_bzCompressEnd@@Base+0x28>
    bdd4:	ldr	x8, [x20]
    bdd8:	cmp	x8, x19
    bddc:	b.eq	bdf0 <BZ2_bzCompressEnd@@Base+0x38>  // b.none
    bde0:	mov	w0, #0xfffffffe            	// #-2
    bde4:	ldp	x20, x19, [sp, #16]
    bde8:	ldp	x29, x30, [sp], #32
    bdec:	ret
    bdf0:	ldr	x1, [x20, #24]
    bdf4:	cbz	x1, be00 <BZ2_bzCompressEnd@@Base+0x48>
    bdf8:	ldp	x8, x0, [x19, #64]
    bdfc:	blr	x8
    be00:	ldr	x1, [x20, #32]
    be04:	cbz	x1, be10 <BZ2_bzCompressEnd@@Base+0x58>
    be08:	ldp	x8, x0, [x19, #64]
    be0c:	blr	x8
    be10:	ldr	x1, [x20, #40]
    be14:	cbz	x1, be20 <BZ2_bzCompressEnd@@Base+0x68>
    be18:	ldp	x8, x0, [x19, #64]
    be1c:	blr	x8
    be20:	ldp	x8, x0, [x19, #64]
    be24:	ldr	x1, [x19, #48]
    be28:	blr	x8
    be2c:	mov	w0, wzr
    be30:	str	xzr, [x19, #48]
    be34:	ldp	x20, x19, [sp, #16]
    be38:	ldp	x29, x30, [sp], #32
    be3c:	ret

000000000000be40 <BZ2_bzDecompressInit@@Base>:
    be40:	stp	x29, x30, [sp, #-48]!
    be44:	str	x21, [sp, #16]
    be48:	stp	x20, x19, [sp, #32]
    be4c:	mov	x29, sp
    be50:	mov	x21, x0
    be54:	cmp	w1, #0x4
    be58:	mov	w0, #0xfffffffe            	// #-2
    be5c:	b.hi	bed8 <BZ2_bzDecompressInit@@Base+0x98>  // b.pmore
    be60:	cbz	x21, bed8 <BZ2_bzDecompressInit@@Base+0x98>
    be64:	mov	w20, w2
    be68:	cmp	w2, #0x1
    be6c:	b.hi	bed8 <BZ2_bzDecompressInit@@Base+0x98>  // b.pmore
    be70:	ldr	x8, [x21, #56]
    be74:	mov	w19, w1
    be78:	cbz	x8, bee8 <BZ2_bzDecompressInit@@Base+0xa8>
    be7c:	ldr	x9, [x21, #64]
    be80:	cbz	x9, befc <BZ2_bzDecompressInit@@Base+0xbc>
    be84:	ldr	x0, [x21, #72]
    be88:	mov	w1, #0xfa90                	// #64144
    be8c:	mov	w2, #0x1                   	// #1
    be90:	blr	x8
    be94:	cbz	x0, bf0c <BZ2_bzDecompressInit@@Base+0xcc>
    be98:	mov	x8, x0
    be9c:	mov	w0, wzr
    bea0:	mov	w9, #0xa                   	// #10
    bea4:	movi	v0.2d, #0x0
    bea8:	str	x21, [x8]
    beac:	str	x8, [x21, #48]
    beb0:	str	w9, [x8, #8]
    beb4:	str	wzr, [x8, #3188]
    beb8:	str	d0, [x8, #32]
    bebc:	stur	d0, [x21, #12]
    bec0:	stur	d0, [x21, #36]
    bec4:	strb	w20, [x8, #44]
    bec8:	str	xzr, [x8, #3152]
    becc:	str	xzr, [x8, #3168]
    bed0:	str	xzr, [x8, #3160]
    bed4:	stp	wzr, w19, [x8, #48]
    bed8:	ldp	x20, x19, [sp, #32]
    bedc:	ldr	x21, [sp, #16]
    bee0:	ldp	x29, x30, [sp], #48
    bee4:	ret
    bee8:	adrp	x8, b000 <BZ2_decompress@@Base+0x2948>
    beec:	add	x8, x8, #0x6fc
    bef0:	str	x8, [x21, #56]
    bef4:	ldr	x9, [x21, #64]
    bef8:	cbnz	x9, be84 <BZ2_bzDecompressInit@@Base+0x44>
    befc:	adrp	x9, b000 <BZ2_decompress@@Base+0x2948>
    bf00:	add	x9, x9, #0x708
    bf04:	str	x9, [x21, #64]
    bf08:	b	be84 <BZ2_bzDecompressInit@@Base+0x44>
    bf0c:	mov	w0, #0xfffffffd            	// #-3
    bf10:	ldp	x20, x19, [sp, #32]
    bf14:	ldr	x21, [sp, #16]
    bf18:	ldp	x29, x30, [sp], #48
    bf1c:	ret

000000000000bf20 <BZ2_indexIntoF@@Base>:
    bf20:	mov	w8, w0
    bf24:	mov	w0, wzr
    bf28:	mov	w9, #0x100                 	// #256
    bf2c:	add	w10, w0, w9
    bf30:	asr	w10, w10, #1
    bf34:	ldr	w11, [x1, w10, sxtw #2]
    bf38:	cmp	w11, w8
    bf3c:	csel	w9, w10, w9, gt
    bf40:	csel	w0, w0, w10, gt
    bf44:	sub	w10, w9, w0
    bf48:	cmp	w10, #0x1
    bf4c:	b.ne	bf2c <BZ2_indexIntoF@@Base+0xc>  // b.any
    bf50:	ret

000000000000bf54 <BZ2_bzDecompress@@Base>:
    bf54:	stp	x29, x30, [sp, #-96]!
    bf58:	stp	x28, x27, [sp, #16]
    bf5c:	stp	x26, x25, [sp, #32]
    bf60:	stp	x24, x23, [sp, #48]
    bf64:	stp	x22, x21, [sp, #64]
    bf68:	stp	x20, x19, [sp, #80]
    bf6c:	mov	x29, sp
    bf70:	cbz	x0, bf88 <BZ2_bzDecompress@@Base+0x34>
    bf74:	ldr	x19, [x0, #48]
    bf78:	cbz	x19, bf88 <BZ2_bzDecompress@@Base+0x34>
    bf7c:	ldr	x8, [x19]
    bf80:	cmp	x8, x0
    bf84:	b.eq	bfa8 <BZ2_bzDecompress@@Base+0x54>  // b.none
    bf88:	mov	w0, #0xfffffffe            	// #-2
    bf8c:	ldp	x20, x19, [sp, #80]
    bf90:	ldp	x22, x21, [sp, #64]
    bf94:	ldp	x24, x23, [sp, #48]
    bf98:	ldp	x26, x25, [sp, #32]
    bf9c:	ldp	x28, x27, [sp, #16]
    bfa0:	ldp	x29, x30, [sp], #96
    bfa4:	ret
    bfa8:	adrp	x23, 1f000 <BZ2_bzerror@@Base+0x10cec>
    bfac:	adrp	x25, 1f000 <BZ2_bzerror@@Base+0x10cec>
    bfb0:	adrp	x21, 1f000 <BZ2_bzerror@@Base+0x10cec>
    bfb4:	ldr	w8, [x19, #8]
    bfb8:	ldr	x23, [x23, #4024]
    bfbc:	ldr	x25, [x25, #4048]
    bfc0:	ldr	x21, [x21, #4016]
    bfc4:	mov	w9, #0xfa50                	// #64080
    bfc8:	mov	w22, #0x86a0                	// #34464
    bfcc:	movk	w22, #0x1, lsl #16
    bfd0:	mov	w24, #0x1                   	// #1
    bfd4:	mov	w26, #0x2                   	// #2
    bfd8:	mov	w27, #0x3                   	// #3
    bfdc:	add	x28, x19, x9
    bfe0:	mov	w20, #0xe                   	// #14
    bfe4:	cmp	w8, #0x1
    bfe8:	b.eq	cd2c <BZ2_bzDecompress@@Base+0xdd8>  // b.none
    bfec:	cmp	w8, #0x2
    bff0:	b.eq	c020 <BZ2_bzDecompress@@Base+0xcc>  // b.none
    bff4:	cmp	w8, #0xa
    bff8:	b.lt	bfe4 <BZ2_bzDecompress@@Base+0x90>  // b.tstop
    bffc:	mov	x0, x19
    c000:	bl	14f0 <BZ2_decompress@plt>
    c004:	cmp	w0, #0x4
    c008:	b.eq	cd3c <BZ2_bzDecompress@@Base+0xde8>  // b.none
    c00c:	ldr	w8, [x19, #8]
    c010:	cmp	w8, #0x2
    c014:	mov	w8, #0x2                   	// #2
    c018:	b.eq	bfe4 <BZ2_bzDecompress@@Base+0x90>  // b.none
    c01c:	b	bf8c <BZ2_bzDecompress@@Base+0x38>
    c020:	ldrb	w8, [x19, #44]
    c024:	ldrb	w9, [x19, #20]
    c028:	cbz	w8, c468 <BZ2_bzDecompress@@Base+0x514>
    c02c:	ldr	x8, [x19]
    c030:	ldr	w10, [x8, #32]
    c034:	cbz	w9, c730 <BZ2_bzDecompress@@Base+0x7dc>
    c038:	cbz	w10, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c03c:	ldr	w13, [x19, #16]
    c040:	b	c054 <BZ2_bzDecompress@@Base+0x100>
    c044:	str	w16, [x19, #64]
    c048:	mov	w13, #0x1                   	// #1
    c04c:	ldr	w9, [x8, #32]
    c050:	cbz	w9, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c054:	cbnz	w13, c2a0 <BZ2_bzDecompress@@Base+0x34c>
    c058:	ldr	w13, [x28]
    c05c:	ldr	w9, [x19, #1092]
    c060:	add	w10, w13, #0x1
    c064:	cmp	w9, w10
    c068:	b.eq	cc64 <BZ2_bzDecompress@@Base+0xd10>  // b.none
    c06c:	b.gt	cd34 <BZ2_bzDecompress@@Base+0xde0>
    c070:	ldr	w10, [x19, #40]
    c074:	ldp	w15, w14, [x19, #60]
    c078:	str	w24, [x19, #16]
    c07c:	mul	w12, w10, w22
    c080:	cmp	w15, w12
    c084:	strb	w14, [x19, #12]
    c088:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c08c:	mov	w16, wzr
    c090:	mov	w10, #0x100                 	// #256
    c094:	add	w11, w16, w10
    c098:	asr	w11, w11, #1
    c09c:	add	x17, x19, w11, sxtw #2
    c0a0:	ldr	w17, [x17, #1096]
    c0a4:	cmp	w17, w15
    c0a8:	csel	w10, w11, w10, gt
    c0ac:	csel	w16, w16, w11, gt
    c0b0:	sub	w11, w10, w16
    c0b4:	cmp	w11, #0x1
    c0b8:	b.ne	c094 <BZ2_bzDecompress@@Base+0x140>  // b.any
    c0bc:	ldr	x11, [x19, #3168]
    c0c0:	ldr	x10, [x19, #3160]
    c0c4:	lsr	x17, x15, #1
    c0c8:	ldrb	w18, [x11, x17]
    c0cc:	lsl	w17, w15, #2
    c0d0:	and	x0, x17, #0x4
    c0d4:	ldrh	w17, [x10, x15, lsl #1]
    c0d8:	lsr	x18, x18, x0
    c0dc:	ldr	w15, [x19, #24]
    c0e0:	lsl	w18, w18, #16
    c0e4:	and	x18, x18, #0xf0000
    c0e8:	orr	x1, x18, x17
    c0ec:	str	w1, [x19, #60]
    c0f0:	cbnz	w15, c10c <BZ2_bzDecompress@@Base+0x1b8>
    c0f4:	ldrsw	x18, [x19, #28]
    c0f8:	ldr	w15, [x25, x18, lsl #2]
    c0fc:	add	w0, w18, #0x1
    c100:	cmp	w0, #0x200
    c104:	csinc	w18, wzr, w18, eq  // eq = none
    c108:	stp	w15, w18, [x19, #24]
    c10c:	sub	w18, w15, #0x1
    c110:	add	w15, w9, #0x1
    c114:	cmp	w9, w13
    c118:	str	w18, [x19, #24]
    c11c:	str	w15, [x19, #1092]
    c120:	b.eq	c048 <BZ2_bzDecompress@@Base+0xf4>  // b.none
    c124:	cmp	w18, #0x1
    c128:	cset	w0, eq  // eq = none
    c12c:	and	w16, w16, #0xff
    c130:	eor	w16, w16, w0
    c134:	cmp	w16, w14
    c138:	b.ne	c044 <BZ2_bzDecompress@@Base+0xf0>  // b.any
    c13c:	cmp	w1, w12
    c140:	str	w26, [x19, #16]
    c144:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c148:	mov	w0, wzr
    c14c:	mov	w16, #0x100                 	// #256
    c150:	add	w2, w0, w16
    c154:	asr	w2, w2, #1
    c158:	add	x3, x19, w2, sxtw #2
    c15c:	ldr	w3, [x3, #1096]
    c160:	cmp	w3, w1
    c164:	csel	w16, w2, w16, gt
    c168:	csel	w0, w0, w2, gt
    c16c:	sub	w2, w16, w0
    c170:	cmp	w2, #0x1
    c174:	b.ne	c150 <BZ2_bzDecompress@@Base+0x1fc>  // b.any
    c178:	lsr	x16, x1, #1
    c17c:	ldrb	w2, [x11, x16]
    c180:	lsl	w17, w17, #2
    c184:	ldrh	w16, [x10, x1, lsl #1]
    c188:	and	x17, x17, #0x4
    c18c:	lsr	x17, x2, x17
    c190:	lsl	w17, w17, #16
    c194:	and	x17, x17, #0xf0000
    c198:	orr	x1, x17, x16
    c19c:	str	w1, [x19, #60]
    c1a0:	cbnz	w18, c1bc <BZ2_bzDecompress@@Base+0x268>
    c1a4:	ldrsw	x17, [x19, #28]
    c1a8:	ldr	w18, [x25, x17, lsl #2]
    c1ac:	add	w2, w17, #0x1
    c1b0:	cmp	w2, #0x200
    c1b4:	csinc	w17, wzr, w17, eq  // eq = none
    c1b8:	stp	w18, w17, [x19, #24]
    c1bc:	sub	w18, w18, #0x1
    c1c0:	add	w17, w9, #0x2
    c1c4:	cmp	w15, w13
    c1c8:	str	w18, [x19, #24]
    c1cc:	str	w17, [x19, #1092]
    c1d0:	b.ne	c1dc <BZ2_bzDecompress@@Base+0x288>  // b.any
    c1d4:	mov	w13, #0x2                   	// #2
    c1d8:	b	c04c <BZ2_bzDecompress@@Base+0xf8>
    c1dc:	cmp	w18, #0x1
    c1e0:	cset	w15, eq  // eq = none
    c1e4:	and	w0, w0, #0xff
    c1e8:	eor	w15, w0, w15
    c1ec:	cmp	w15, w14
    c1f0:	b.ne	c294 <BZ2_bzDecompress@@Base+0x340>  // b.any
    c1f4:	cmp	w1, w12
    c1f8:	str	w27, [x19, #16]
    c1fc:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c200:	mov	w0, wzr
    c204:	mov	w15, #0x100                 	// #256
    c208:	add	w2, w0, w15
    c20c:	asr	w2, w2, #1
    c210:	add	x3, x19, w2, sxtw #2
    c214:	ldr	w3, [x3, #1096]
    c218:	cmp	w3, w1
    c21c:	csel	w15, w2, w15, gt
    c220:	csel	w0, w0, w2, gt
    c224:	sub	w2, w15, w0
    c228:	cmp	w2, #0x1
    c22c:	b.ne	c208 <BZ2_bzDecompress@@Base+0x2b4>  // b.any
    c230:	lsr	x15, x1, #1
    c234:	ldrb	w2, [x11, x15]
    c238:	lsl	w16, w16, #2
    c23c:	ldrh	w15, [x10, x1, lsl #1]
    c240:	and	x16, x16, #0x4
    c244:	lsr	x16, x2, x16
    c248:	lsl	w16, w16, #16
    c24c:	and	x16, x16, #0xf0000
    c250:	orr	x1, x16, x15
    c254:	str	w1, [x19, #60]
    c258:	cbnz	w18, c274 <BZ2_bzDecompress@@Base+0x320>
    c25c:	ldrsw	x16, [x19, #28]
    c260:	ldr	w18, [x25, x16, lsl #2]
    c264:	add	w2, w16, #0x1
    c268:	cmp	w2, #0x200
    c26c:	csinc	w16, wzr, w16, eq  // eq = none
    c270:	stp	w18, w16, [x19, #24]
    c274:	sub	w16, w18, #0x1
    c278:	add	w18, w9, #0x3
    c27c:	cmp	w17, w13
    c280:	str	w16, [x19, #24]
    c284:	str	w18, [x19, #1092]
    c288:	b.ne	c308 <BZ2_bzDecompress@@Base+0x3b4>  // b.any
    c28c:	mov	w13, #0x3                   	// #3
    c290:	b	c04c <BZ2_bzDecompress@@Base+0xf8>
    c294:	str	w15, [x19, #64]
    c298:	mov	w13, #0x2                   	// #2
    c29c:	b	c04c <BZ2_bzDecompress@@Base+0xf8>
    c2a0:	ldrb	w9, [x19, #12]
    c2a4:	ldr	x8, [x8, #24]
    c2a8:	strb	w9, [x8]
    c2ac:	ldr	w9, [x19, #3184]
    c2b0:	ldrb	w8, [x19, #12]
    c2b4:	ldr	w10, [x19, #16]
    c2b8:	eor	w8, w8, w9, lsr #24
    c2bc:	ldr	w11, [x23, w8, uxtw #2]
    c2c0:	ldr	x8, [x19]
    c2c4:	sub	w13, w10, #0x1
    c2c8:	str	w13, [x19, #16]
    c2cc:	eor	w9, w11, w9, lsl #8
    c2d0:	str	w9, [x19, #3184]
    c2d4:	ldr	x9, [x8, #24]
    c2d8:	ldp	w10, w11, [x8, #32]
    c2dc:	add	x9, x9, #0x1
    c2e0:	str	x9, [x8, #24]
    c2e4:	sub	w9, w10, #0x1
    c2e8:	adds	w10, w11, #0x1
    c2ec:	stp	w9, w10, [x8, #32]
    c2f0:	b.cc	c300 <BZ2_bzDecompress@@Base+0x3ac>  // b.lo, b.ul, b.last
    c2f4:	ldr	w10, [x8, #40]
    c2f8:	add	w10, w10, #0x1
    c2fc:	str	w10, [x8, #40]
    c300:	cbnz	w9, c054 <BZ2_bzDecompress@@Base+0x100>
    c304:	b	cc64 <BZ2_bzDecompress@@Base+0xd10>
    c308:	cmp	w16, #0x1
    c30c:	cset	w13, eq  // eq = none
    c310:	and	w17, w0, #0xff
    c314:	eor	w13, w17, w13
    c318:	cmp	w13, w14
    c31c:	b.ne	c45c <BZ2_bzDecompress@@Base+0x508>  // b.any
    c320:	cmp	w1, w12
    c324:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c328:	mov	w13, wzr
    c32c:	mov	w14, #0x100                 	// #256
    c330:	add	w17, w13, w14
    c334:	asr	w17, w17, #1
    c338:	add	x18, x19, w17, sxtw #2
    c33c:	ldr	w18, [x18, #1096]
    c340:	cmp	w18, w1
    c344:	csel	w14, w17, w14, gt
    c348:	csel	w13, w13, w17, gt
    c34c:	sub	w17, w14, w13
    c350:	cmp	w17, #0x1
    c354:	b.ne	c330 <BZ2_bzDecompress@@Base+0x3dc>  // b.any
    c358:	lsr	x14, x1, #1
    c35c:	ldrb	w17, [x11, x14]
    c360:	lsl	w15, w15, #2
    c364:	ldrh	w14, [x10, x1, lsl #1]
    c368:	and	x15, x15, #0x4
    c36c:	lsr	x15, x17, x15
    c370:	lsl	w15, w15, #16
    c374:	and	x15, x15, #0xf0000
    c378:	orr	x15, x15, x14
    c37c:	str	w15, [x19, #60]
    c380:	cbnz	w16, c39c <BZ2_bzDecompress@@Base+0x448>
    c384:	ldrsw	x17, [x19, #28]
    c388:	ldr	w16, [x25, x17, lsl #2]
    c38c:	add	w18, w17, #0x1
    c390:	cmp	w18, #0x200
    c394:	csinc	w17, wzr, w17, eq  // eq = none
    c398:	stp	w16, w17, [x19, #24]
    c39c:	sub	w16, w16, #0x1
    c3a0:	add	w17, w9, #0x4
    c3a4:	cmp	w16, #0x1
    c3a8:	and	w13, w13, #0xff
    c3ac:	str	w17, [x19, #1092]
    c3b0:	cset	w17, eq  // eq = none
    c3b4:	eor	w13, w13, w17
    c3b8:	add	w13, w13, #0x4
    c3bc:	cmp	w15, w12
    c3c0:	str	w16, [x19, #24]
    c3c4:	str	w13, [x19, #16]
    c3c8:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c3cc:	mov	w12, wzr
    c3d0:	mov	w17, #0x100                 	// #256
    c3d4:	add	w18, w12, w17
    c3d8:	asr	w18, w18, #1
    c3dc:	add	x0, x19, w18, sxtw #2
    c3e0:	ldr	w0, [x0, #1096]
    c3e4:	cmp	w0, w15
    c3e8:	csel	w17, w18, w17, gt
    c3ec:	csel	w12, w12, w18, gt
    c3f0:	sub	w18, w17, w12
    c3f4:	cmp	w18, #0x1
    c3f8:	b.ne	c3d4 <BZ2_bzDecompress@@Base+0x480>  // b.any
    c3fc:	str	w12, [x19, #64]
    c400:	lsr	x17, x15, #1
    c404:	ldrb	w11, [x11, x17]
    c408:	ldrh	w10, [x10, x15, lsl #1]
    c40c:	ubfiz	w14, w14, #2, #1
    c410:	lsr	w11, w11, w14
    c414:	bfi	w10, w11, #16, #4
    c418:	str	w10, [x19, #60]
    c41c:	cbnz	w16, c438 <BZ2_bzDecompress@@Base+0x4e4>
    c420:	ldrsw	x10, [x19, #28]
    c424:	ldr	w16, [x25, x10, lsl #2]
    c428:	add	w11, w10, #0x1
    c42c:	cmp	w11, #0x200
    c430:	csinc	w10, wzr, w10, eq  // eq = none
    c434:	stp	w16, w10, [x19, #24]
    c438:	sub	w10, w16, #0x1
    c43c:	cmp	w10, #0x1
    c440:	str	w10, [x19, #24]
    c444:	cset	w10, eq  // eq = none
    c448:	add	w9, w9, #0x5
    c44c:	eor	w10, w12, w10
    c450:	str	w10, [x19, #64]
    c454:	str	w9, [x19, #1092]
    c458:	b	c04c <BZ2_bzDecompress@@Base+0xf8>
    c45c:	str	w13, [x19, #64]
    c460:	mov	w13, #0x3                   	// #3
    c464:	b	c04c <BZ2_bzDecompress@@Base+0xf8>
    c468:	cbz	w9, ca68 <BZ2_bzDecompress@@Base+0xb14>
    c46c:	ldr	x8, [x19]
    c470:	ldr	w9, [x8, #32]
    c474:	cbz	w9, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c478:	ldr	w12, [x19, #16]
    c47c:	b	c490 <BZ2_bzDecompress@@Base+0x53c>
    c480:	str	w17, [x19, #64]
    c484:	mov	w12, #0x1                   	// #1
    c488:	ldr	w9, [x8, #32]
    c48c:	cbz	w9, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c490:	cbnz	w12, c5f4 <BZ2_bzDecompress@@Base+0x6a0>
    c494:	ldr	w12, [x28]
    c498:	ldr	w9, [x19, #1092]
    c49c:	add	w10, w12, #0x1
    c4a0:	cmp	w9, w10
    c4a4:	b.eq	cc64 <BZ2_bzDecompress@@Base+0xd10>  // b.none
    c4a8:	b.gt	cd34 <BZ2_bzDecompress@@Base+0xde0>
    c4ac:	ldr	w10, [x19, #40]
    c4b0:	ldp	w14, w13, [x19, #60]
    c4b4:	str	w24, [x19, #16]
    c4b8:	mul	w11, w10, w22
    c4bc:	cmp	w14, w11
    c4c0:	strb	w13, [x19, #12]
    c4c4:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c4c8:	ldr	x10, [x19, #3152]
    c4cc:	ldr	w17, [x10, x14, lsl #2]
    c4d0:	ldr	w14, [x19, #24]
    c4d4:	lsr	x16, x17, #8
    c4d8:	str	w16, [x19, #60]
    c4dc:	cbnz	w14, c4f8 <BZ2_bzDecompress@@Base+0x5a4>
    c4e0:	ldrsw	x15, [x19, #28]
    c4e4:	ldr	w14, [x25, x15, lsl #2]
    c4e8:	add	w18, w15, #0x1
    c4ec:	cmp	w18, #0x200
    c4f0:	csinc	w15, wzr, w15, eq  // eq = none
    c4f4:	stp	w14, w15, [x19, #24]
    c4f8:	sub	w15, w14, #0x1
    c4fc:	add	w14, w9, #0x1
    c500:	cmp	w9, w12
    c504:	str	w15, [x19, #24]
    c508:	str	w14, [x19, #1092]
    c50c:	b.eq	c484 <BZ2_bzDecompress@@Base+0x530>  // b.none
    c510:	cmp	w15, #0x1
    c514:	cset	w18, eq  // eq = none
    c518:	and	w17, w17, #0xff
    c51c:	eor	w17, w17, w18
    c520:	cmp	w17, w13
    c524:	b.ne	c480 <BZ2_bzDecompress@@Base+0x52c>  // b.any
    c528:	cmp	w16, w11
    c52c:	str	w26, [x19, #16]
    c530:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c534:	ldr	w18, [x10, x16, lsl #2]
    c538:	lsr	x16, x18, #8
    c53c:	str	w16, [x19, #60]
    c540:	cbnz	w15, c55c <BZ2_bzDecompress@@Base+0x608>
    c544:	ldrsw	x17, [x19, #28]
    c548:	ldr	w15, [x25, x17, lsl #2]
    c54c:	add	w0, w17, #0x1
    c550:	cmp	w0, #0x200
    c554:	csinc	w17, wzr, w17, eq  // eq = none
    c558:	stp	w15, w17, [x19, #24]
    c55c:	sub	w17, w15, #0x1
    c560:	add	w15, w9, #0x2
    c564:	cmp	w14, w12
    c568:	str	w17, [x19, #24]
    c56c:	str	w15, [x19, #1092]
    c570:	b.ne	c57c <BZ2_bzDecompress@@Base+0x628>  // b.any
    c574:	mov	w12, #0x2                   	// #2
    c578:	b	c488 <BZ2_bzDecompress@@Base+0x534>
    c57c:	cmp	w17, #0x1
    c580:	cset	w14, eq  // eq = none
    c584:	and	w18, w18, #0xff
    c588:	eor	w14, w18, w14
    c58c:	cmp	w14, w13
    c590:	b.ne	c5e8 <BZ2_bzDecompress@@Base+0x694>  // b.any
    c594:	cmp	w16, w11
    c598:	str	w27, [x19, #16]
    c59c:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c5a0:	ldr	w18, [x10, x16, lsl #2]
    c5a4:	lsr	x14, x18, #8
    c5a8:	str	w14, [x19, #60]
    c5ac:	cbnz	w17, c5c8 <BZ2_bzDecompress@@Base+0x674>
    c5b0:	ldrsw	x16, [x19, #28]
    c5b4:	ldr	w17, [x25, x16, lsl #2]
    c5b8:	add	w0, w16, #0x1
    c5bc:	cmp	w0, #0x200
    c5c0:	csinc	w16, wzr, w16, eq  // eq = none
    c5c4:	stp	w17, w16, [x19, #24]
    c5c8:	sub	w16, w17, #0x1
    c5cc:	add	w17, w9, #0x3
    c5d0:	cmp	w15, w12
    c5d4:	str	w16, [x19, #24]
    c5d8:	str	w17, [x19, #1092]
    c5dc:	b.ne	c65c <BZ2_bzDecompress@@Base+0x708>  // b.any
    c5e0:	mov	w12, #0x3                   	// #3
    c5e4:	b	c488 <BZ2_bzDecompress@@Base+0x534>
    c5e8:	str	w14, [x19, #64]
    c5ec:	mov	w12, #0x2                   	// #2
    c5f0:	b	c488 <BZ2_bzDecompress@@Base+0x534>
    c5f4:	ldrb	w9, [x19, #12]
    c5f8:	ldr	x8, [x8, #24]
    c5fc:	strb	w9, [x8]
    c600:	ldr	w9, [x19, #3184]
    c604:	ldrb	w8, [x19, #12]
    c608:	ldr	w10, [x19, #16]
    c60c:	eor	w8, w8, w9, lsr #24
    c610:	ldr	w11, [x23, w8, uxtw #2]
    c614:	ldr	x8, [x19]
    c618:	sub	w12, w10, #0x1
    c61c:	str	w12, [x19, #16]
    c620:	eor	w9, w11, w9, lsl #8
    c624:	str	w9, [x19, #3184]
    c628:	ldr	x9, [x8, #24]
    c62c:	ldp	w10, w11, [x8, #32]
    c630:	add	x9, x9, #0x1
    c634:	str	x9, [x8, #24]
    c638:	sub	w9, w10, #0x1
    c63c:	adds	w10, w11, #0x1
    c640:	stp	w9, w10, [x8, #32]
    c644:	b.cc	c654 <BZ2_bzDecompress@@Base+0x700>  // b.lo, b.ul, b.last
    c648:	ldr	w10, [x8, #40]
    c64c:	add	w10, w10, #0x1
    c650:	str	w10, [x8, #40]
    c654:	cbnz	w9, c490 <BZ2_bzDecompress@@Base+0x53c>
    c658:	b	cc64 <BZ2_bzDecompress@@Base+0xd10>
    c65c:	cmp	w16, #0x1
    c660:	cset	w12, eq  // eq = none
    c664:	and	w15, w18, #0xff
    c668:	eor	w12, w15, w12
    c66c:	cmp	w12, w13
    c670:	b.ne	c724 <BZ2_bzDecompress@@Base+0x7d0>  // b.any
    c674:	cmp	w14, w11
    c678:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c67c:	ldr	w12, [x10, x14, lsl #2]
    c680:	lsr	x13, x12, #8
    c684:	str	w13, [x19, #60]
    c688:	cbnz	w16, c6a4 <BZ2_bzDecompress@@Base+0x750>
    c68c:	ldrsw	x14, [x19, #28]
    c690:	ldr	w16, [x25, x14, lsl #2]
    c694:	add	w15, w14, #0x1
    c698:	cmp	w15, #0x200
    c69c:	csinc	w14, wzr, w14, eq  // eq = none
    c6a0:	stp	w16, w14, [x19, #24]
    c6a4:	sub	w14, w16, #0x1
    c6a8:	add	w15, w9, #0x4
    c6ac:	cmp	w14, #0x1
    c6b0:	and	w12, w12, #0xff
    c6b4:	str	w15, [x19, #1092]
    c6b8:	cset	w15, eq  // eq = none
    c6bc:	eor	w12, w12, w15
    c6c0:	add	w12, w12, #0x4
    c6c4:	cmp	w13, w11
    c6c8:	str	w14, [x19, #24]
    c6cc:	str	w12, [x19, #16]
    c6d0:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c6d4:	ldr	w11, [x10, x13, lsl #2]
    c6d8:	and	w10, w11, #0xff
    c6dc:	lsr	w11, w11, #8
    c6e0:	stp	w11, w10, [x19, #60]
    c6e4:	cbnz	w14, c700 <BZ2_bzDecompress@@Base+0x7ac>
    c6e8:	ldrsw	x11, [x19, #28]
    c6ec:	ldr	w14, [x25, x11, lsl #2]
    c6f0:	add	w13, w11, #0x1
    c6f4:	cmp	w13, #0x200
    c6f8:	csinc	w11, wzr, w11, eq  // eq = none
    c6fc:	stp	w14, w11, [x19, #24]
    c700:	sub	w11, w14, #0x1
    c704:	cmp	w11, #0x1
    c708:	str	w11, [x19, #24]
    c70c:	cset	w11, eq  // eq = none
    c710:	add	w9, w9, #0x5
    c714:	eor	w10, w10, w11
    c718:	str	w10, [x19, #64]
    c71c:	str	w9, [x19, #1092]
    c720:	b	c488 <BZ2_bzDecompress@@Base+0x534>
    c724:	str	w12, [x19, #64]
    c728:	mov	w12, #0x3                   	// #3
    c72c:	b	c488 <BZ2_bzDecompress@@Base+0x534>
    c730:	cbz	w10, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c734:	ldr	w13, [x19, #16]
    c738:	b	c74c <BZ2_bzDecompress@@Base+0x7f8>
    c73c:	str	w16, [x19, #64]
    c740:	mov	w13, #0x1                   	// #1
    c744:	ldr	w9, [x8, #32]
    c748:	cbz	w9, cc64 <BZ2_bzDecompress@@Base+0xd10>
    c74c:	cbnz	w13, c910 <BZ2_bzDecompress@@Base+0x9bc>
    c750:	ldr	w13, [x28]
    c754:	ldr	w9, [x19, #1092]
    c758:	add	w10, w13, #0x1
    c75c:	cmp	w9, w10
    c760:	b.eq	cc64 <BZ2_bzDecompress@@Base+0xd10>  // b.none
    c764:	b.gt	cd34 <BZ2_bzDecompress@@Base+0xde0>
    c768:	ldr	w10, [x19, #40]
    c76c:	ldp	w17, w14, [x19, #60]
    c770:	str	w24, [x19, #16]
    c774:	mul	w12, w10, w22
    c778:	cmp	w17, w12
    c77c:	strb	w14, [x19, #12]
    c780:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c784:	mov	w16, wzr
    c788:	mov	w10, #0x100                 	// #256
    c78c:	add	w11, w16, w10
    c790:	asr	w11, w11, #1
    c794:	add	x15, x19, w11, sxtw #2
    c798:	ldr	w15, [x15, #1096]
    c79c:	cmp	w15, w17
    c7a0:	csel	w10, w11, w10, gt
    c7a4:	csel	w16, w16, w11, gt
    c7a8:	sub	w11, w10, w16
    c7ac:	cmp	w11, #0x1
    c7b0:	b.ne	c78c <BZ2_bzDecompress@@Base+0x838>  // b.any
    c7b4:	ldr	x11, [x19, #3168]
    c7b8:	ldr	x10, [x19, #3160]
    c7bc:	lsr	x18, x17, #1
    c7c0:	lsl	w0, w17, #2
    c7c4:	ldrb	w18, [x11, x18]
    c7c8:	and	x0, x0, #0x4
    c7cc:	ldrh	w17, [x10, x17, lsl #1]
    c7d0:	add	w15, w9, #0x1
    c7d4:	lsr	x18, x18, x0
    c7d8:	lsl	w18, w18, #16
    c7dc:	and	x18, x18, #0xf0000
    c7e0:	cmp	w9, w13
    c7e4:	orr	x0, x18, x17
    c7e8:	str	w0, [x19, #60]
    c7ec:	str	w15, [x19, #1092]
    c7f0:	b.eq	c740 <BZ2_bzDecompress@@Base+0x7ec>  // b.none
    c7f4:	and	w16, w16, #0xff
    c7f8:	cmp	w16, w14
    c7fc:	b.ne	c73c <BZ2_bzDecompress@@Base+0x7e8>  // b.any
    c800:	cmp	w0, w12
    c804:	str	w26, [x19, #16]
    c808:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c80c:	mov	w18, wzr
    c810:	mov	w16, #0x100                 	// #256
    c814:	add	w1, w18, w16
    c818:	asr	w1, w1, #1
    c81c:	add	x2, x19, w1, sxtw #2
    c820:	ldr	w2, [x2, #1096]
    c824:	cmp	w2, w0
    c828:	csel	w16, w1, w16, gt
    c82c:	csel	w18, w18, w1, gt
    c830:	sub	w1, w16, w18
    c834:	cmp	w1, #0x1
    c838:	b.ne	c814 <BZ2_bzDecompress@@Base+0x8c0>  // b.any
    c83c:	ldrh	w16, [x10, x0, lsl #1]
    c840:	lsr	x0, x0, #1
    c844:	ldrb	w0, [x11, x0]
    c848:	lsl	w1, w17, #2
    c84c:	cmp	w15, w13
    c850:	and	x15, x1, #0x4
    c854:	lsr	x15, x0, x15
    c858:	lsl	w15, w15, #16
    c85c:	and	x15, x15, #0xf0000
    c860:	add	w17, w9, #0x2
    c864:	orr	x0, x15, x16
    c868:	str	w0, [x19, #60]
    c86c:	str	w17, [x19, #1092]
    c870:	b.ne	c87c <BZ2_bzDecompress@@Base+0x928>  // b.any
    c874:	mov	w13, #0x2                   	// #2
    c878:	b	c744 <BZ2_bzDecompress@@Base+0x7f0>
    c87c:	and	w15, w18, #0xff
    c880:	cmp	w15, w14
    c884:	b.ne	c904 <BZ2_bzDecompress@@Base+0x9b0>  // b.any
    c888:	cmp	w0, w12
    c88c:	str	w27, [x19, #16]
    c890:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c894:	mov	w18, wzr
    c898:	mov	w15, #0x100                 	// #256
    c89c:	add	w1, w18, w15
    c8a0:	asr	w1, w1, #1
    c8a4:	add	x2, x19, w1, sxtw #2
    c8a8:	ldr	w2, [x2, #1096]
    c8ac:	cmp	w2, w0
    c8b0:	csel	w15, w1, w15, gt
    c8b4:	csel	w18, w18, w1, gt
    c8b8:	sub	w1, w15, w18
    c8bc:	cmp	w1, #0x1
    c8c0:	b.ne	c89c <BZ2_bzDecompress@@Base+0x948>  // b.any
    c8c4:	ldrh	w15, [x10, x0, lsl #1]
    c8c8:	lsr	x0, x0, #1
    c8cc:	ldrb	w0, [x11, x0]
    c8d0:	lsl	w16, w16, #2
    c8d4:	cmp	w17, w13
    c8d8:	and	x13, x16, #0x4
    c8dc:	lsr	x13, x0, x13
    c8e0:	lsl	w13, w13, #16
    c8e4:	and	x13, x13, #0xf0000
    c8e8:	add	w1, w9, #0x3
    c8ec:	orr	x16, x13, x15
    c8f0:	str	w16, [x19, #60]
    c8f4:	str	w1, [x19, #1092]
    c8f8:	b.ne	c978 <BZ2_bzDecompress@@Base+0xa24>  // b.any
    c8fc:	mov	w13, #0x3                   	// #3
    c900:	b	c744 <BZ2_bzDecompress@@Base+0x7f0>
    c904:	str	w15, [x19, #64]
    c908:	mov	w13, #0x2                   	// #2
    c90c:	b	c744 <BZ2_bzDecompress@@Base+0x7f0>
    c910:	ldrb	w9, [x19, #12]
    c914:	ldr	x8, [x8, #24]
    c918:	strb	w9, [x8]
    c91c:	ldr	w9, [x19, #3184]
    c920:	ldrb	w8, [x19, #12]
    c924:	ldr	w10, [x19, #16]
    c928:	eor	w8, w8, w9, lsr #24
    c92c:	ldr	w11, [x23, w8, uxtw #2]
    c930:	ldr	x8, [x19]
    c934:	sub	w13, w10, #0x1
    c938:	str	w13, [x19, #16]
    c93c:	eor	w9, w11, w9, lsl #8
    c940:	str	w9, [x19, #3184]
    c944:	ldr	x9, [x8, #24]
    c948:	ldp	w10, w11, [x8, #32]
    c94c:	add	x9, x9, #0x1
    c950:	str	x9, [x8, #24]
    c954:	sub	w9, w10, #0x1
    c958:	adds	w10, w11, #0x1
    c95c:	stp	w9, w10, [x8, #32]
    c960:	b.cc	c970 <BZ2_bzDecompress@@Base+0xa1c>  // b.lo, b.ul, b.last
    c964:	ldr	w10, [x8, #40]
    c968:	add	w10, w10, #0x1
    c96c:	str	w10, [x8, #40]
    c970:	cbnz	w9, c74c <BZ2_bzDecompress@@Base+0x7f8>
    c974:	b	cc64 <BZ2_bzDecompress@@Base+0xd10>
    c978:	and	w13, w18, #0xff
    c97c:	cmp	w13, w14
    c980:	b.ne	ca5c <BZ2_bzDecompress@@Base+0xb08>  // b.any
    c984:	cmp	w16, w12
    c988:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    c98c:	mov	w13, wzr
    c990:	mov	w14, #0x100                 	// #256
    c994:	add	w17, w13, w14
    c998:	asr	w17, w17, #1
    c99c:	add	x18, x19, w17, sxtw #2
    c9a0:	ldr	w18, [x18, #1096]
    c9a4:	cmp	w18, w16
    c9a8:	csel	w14, w17, w14, gt
    c9ac:	csel	w13, w13, w17, gt
    c9b0:	sub	w17, w14, w13
    c9b4:	cmp	w17, #0x1
    c9b8:	b.ne	c994 <BZ2_bzDecompress@@Base+0xa40>  // b.any
    c9bc:	ldrh	w14, [x10, x16, lsl #1]
    c9c0:	lsr	x16, x16, #1
    c9c4:	ldrb	w16, [x11, x16]
    c9c8:	lsl	w15, w15, #2
    c9cc:	and	x15, x15, #0x4
    c9d0:	and	w13, w13, #0xff
    c9d4:	lsr	x15, x16, x15
    c9d8:	lsl	w15, w15, #16
    c9dc:	and	x15, x15, #0xf0000
    c9e0:	orr	x15, x15, x14
    c9e4:	add	w17, w9, #0x4
    c9e8:	add	w13, w13, #0x4
    c9ec:	cmp	w15, w12
    c9f0:	str	w17, [x19, #1092]
    c9f4:	str	w15, [x19, #60]
    c9f8:	str	w13, [x19, #16]
    c9fc:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    ca00:	mov	w12, wzr
    ca04:	mov	w16, #0x100                 	// #256
    ca08:	add	w17, w12, w16
    ca0c:	asr	w17, w17, #1
    ca10:	add	x18, x19, w17, sxtw #2
    ca14:	ldr	w18, [x18, #1096]
    ca18:	cmp	w18, w15
    ca1c:	csel	w16, w17, w16, gt
    ca20:	csel	w12, w12, w17, gt
    ca24:	sub	w17, w16, w12
    ca28:	cmp	w17, #0x1
    ca2c:	b.ne	ca08 <BZ2_bzDecompress@@Base+0xab4>  // b.any
    ca30:	str	w12, [x19, #64]
    ca34:	lsr	x12, x15, #1
    ca38:	ldrb	w11, [x11, x12]
    ca3c:	ldrh	w10, [x10, x15, lsl #1]
    ca40:	ubfiz	w12, w14, #2, #1
    ca44:	add	w9, w9, #0x5
    ca48:	lsr	w11, w11, w12
    ca4c:	bfi	w10, w11, #16, #4
    ca50:	str	w10, [x19, #60]
    ca54:	str	w9, [x19, #1092]
    ca58:	b	c744 <BZ2_bzDecompress@@Base+0x7f0>
    ca5c:	str	w13, [x19, #64]
    ca60:	mov	w13, #0x3                   	// #3
    ca64:	b	c744 <BZ2_bzDecompress@@Base+0x7f0>
    ca68:	ldr	x10, [x19]
    ca6c:	ldr	w15, [x28]
    ca70:	ldr	w12, [x19, #40]
    ca74:	ldr	w8, [x19, #3184]
    ca78:	ldr	w11, [x10, #32]
    ca7c:	ldrb	w17, [x19, #12]
    ca80:	ldr	w1, [x19, #16]
    ca84:	ldr	w0, [x19, #1092]
    ca88:	ldr	x9, [x19, #3152]
    ca8c:	ldp	w13, w18, [x19, #60]
    ca90:	ldr	x10, [x10, #24]
    ca94:	add	w14, w15, #0x1
    ca98:	mul	w16, w12, w22
    ca9c:	mov	w12, w11
    caa0:	cmp	w1, #0x1
    caa4:	b.lt	cb0c <BZ2_bzDecompress@@Base+0xbb8>  // b.tstop
    caa8:	cbz	w12, cc20 <BZ2_bzDecompress@@Base+0xccc>
    caac:	mov	w5, w1
    cab0:	mov	x2, xzr
    cab4:	and	w3, w17, #0xff
    cab8:	mov	w4, w12
    cabc:	sub	x5, x5, #0x1
    cac0:	cmp	w5, w2
    cac4:	b.eq	cae8 <BZ2_bzDecompress@@Base+0xb94>  // b.none
    cac8:	strb	w17, [x10, x2]
    cacc:	eor	w6, w3, w8, lsr #24
    cad0:	ldr	w6, [x23, w6, uxtw #2]
    cad4:	add	x2, x2, #0x1
    cad8:	cmp	w4, w2
    cadc:	eor	w8, w6, w8, lsl #8
    cae0:	b.ne	cac0 <BZ2_bzDecompress@@Base+0xb6c>  // b.any
    cae4:	b	cc14 <BZ2_bzDecompress@@Base+0xcc0>
    cae8:	sub	w12, w12, w2
    caec:	add	x10, x10, x2
    caf0:	cbz	w12, cd14 <BZ2_bzDecompress@@Base+0xdc0>
    caf4:	and	w1, w17, #0xff
    caf8:	strb	w17, [x10], #1
    cafc:	eor	w1, w1, w8, lsr #24
    cb00:	ldr	w1, [x23, w1, uxtw #2]
    cb04:	sub	w12, w12, #0x1
    cb08:	eor	w8, w1, w8, lsl #8
    cb0c:	mov	w3, w0
    cb10:	mov	w2, w18
    cb14:	cmp	w0, w14
    cb18:	b.gt	cd34 <BZ2_bzDecompress@@Base+0xde0>
    cb1c:	b.eq	cd1c <BZ2_bzDecompress@@Base+0xdc8>  // b.none
    cb20:	cmp	w13, w16
    cb24:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    cb28:	ldr	w17, [x9, w13, uxtw #2]
    cb2c:	add	w0, w3, #0x1
    cb30:	and	w18, w17, #0xff
    cb34:	lsr	x13, x17, #8
    cb38:	cmp	w18, w2
    cb3c:	b.ne	cb4c <BZ2_bzDecompress@@Base+0xbf8>  // b.any
    cb40:	cmp	w3, w15
    cb44:	b.ne	cb54 <BZ2_bzDecompress@@Base+0xc00>  // b.any
    cb48:	mov	w18, w2
    cb4c:	mov	w17, w2
    cb50:	b	caf0 <BZ2_bzDecompress@@Base+0xb9c>
    cb54:	cmp	w13, w16
    cb58:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    cb5c:	ldr	w5, [x9, x13, lsl #2]
    cb60:	add	w4, w3, #0x2
    cb64:	cmp	w4, w14
    cb68:	mov	w1, #0x2                   	// #2
    cb6c:	lsr	x13, x5, #8
    cb70:	mov	w0, w14
    cb74:	mov	w18, w2
    cb78:	mov	w17, w2
    cb7c:	b.eq	caa0 <BZ2_bzDecompress@@Base+0xb4c>  // b.none
    cb80:	and	w18, w5, #0xff
    cb84:	cmp	w18, w2
    cb88:	mov	w1, #0x2                   	// #2
    cb8c:	mov	w0, w4
    cb90:	mov	w17, w2
    cb94:	b.ne	caa0 <BZ2_bzDecompress@@Base+0xb4c>  // b.any
    cb98:	cmp	w13, w16
    cb9c:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    cba0:	ldr	w5, [x9, x13, lsl #2]
    cba4:	add	w4, w3, #0x3
    cba8:	cmp	w4, w14
    cbac:	mov	w1, #0x3                   	// #3
    cbb0:	lsr	x13, x5, #8
    cbb4:	mov	w0, w14
    cbb8:	mov	w18, w2
    cbbc:	mov	w17, w2
    cbc0:	b.eq	caa0 <BZ2_bzDecompress@@Base+0xb4c>  // b.none
    cbc4:	and	w18, w5, #0xff
    cbc8:	cmp	w18, w2
    cbcc:	mov	w1, #0x3                   	// #3
    cbd0:	mov	w0, w4
    cbd4:	mov	w17, w2
    cbd8:	b.ne	caa0 <BZ2_bzDecompress@@Base+0xb4c>  // b.any
    cbdc:	cmp	w13, w16
    cbe0:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    cbe4:	ldr	w13, [x9, x13, lsl #2]
    cbe8:	lsr	x17, x13, #8
    cbec:	cmp	w17, w16
    cbf0:	b.cs	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.hs, b.nlast
    cbf4:	ldr	w17, [x9, x17, lsl #2]
    cbf8:	and	w13, w13, #0xff
    cbfc:	add	w1, w13, #0x4
    cc00:	add	w0, w3, #0x5
    cc04:	and	w18, w17, #0xff
    cc08:	lsr	w13, w17, #8
    cc0c:	mov	w17, w2
    cc10:	b	caa0 <BZ2_bzDecompress@@Base+0xb4c>
    cc14:	mov	w12, wzr
    cc18:	add	x10, x10, x2
    cc1c:	sub	w1, w1, w2
    cc20:	ldr	x14, [x19]
    cc24:	sub	w11, w11, w12
    cc28:	ldr	w15, [x14, #36]
    cc2c:	adds	w11, w15, w11
    cc30:	str	w11, [x14, #36]
    cc34:	b.cc	cc44 <BZ2_bzDecompress@@Base+0xcf0>  // b.lo, b.ul, b.last
    cc38:	ldr	w11, [x14, #40]
    cc3c:	add	w11, w11, #0x1
    cc40:	str	w11, [x14, #40]
    cc44:	str	w8, [x19, #3184]
    cc48:	strb	w17, [x19, #12]
    cc4c:	str	w1, [x19, #16]
    cc50:	str	w0, [x19, #1092]
    cc54:	str	x9, [x19, #3152]
    cc58:	stp	w13, w18, [x19, #60]
    cc5c:	str	x10, [x14, #24]
    cc60:	str	w12, [x14, #32]
    cc64:	ldr	w8, [x28]
    cc68:	ldr	w9, [x19, #1092]
    cc6c:	add	w8, w8, #0x1
    cc70:	cmp	w9, w8
    cc74:	b.ne	cd60 <BZ2_bzDecompress@@Base+0xe0c>  // b.any
    cc78:	ldr	w8, [x19, #16]
    cc7c:	cbnz	w8, cd60 <BZ2_bzDecompress@@Base+0xe0c>
    cc80:	ldr	w9, [x19, #3184]
    cc84:	ldr	w8, [x19, #52]
    cc88:	mvn	w3, w9
    cc8c:	cmp	w8, #0x2
    cc90:	str	w3, [x19, #3184]
    cc94:	b.gt	ccd4 <BZ2_bzDecompress@@Base+0xd80>
    cc98:	cmp	w8, #0x2
    cc9c:	b.ge	ccf4 <BZ2_bzDecompress@@Base+0xda0>  // b.tcont
    cca0:	ldr	w8, [x19, #3184]
    cca4:	ldr	w9, [x19, #3176]
    cca8:	cmp	w8, w9
    ccac:	b.ne	cd34 <BZ2_bzDecompress@@Base+0xde0>  // b.any
    ccb0:	ldr	w9, [x19, #3188]
    ccb4:	str	w20, [x19, #8]
    ccb8:	eor	w8, w8, w9, ror #31
    ccbc:	str	w8, [x19, #3188]
    ccc0:	mov	x0, x19
    ccc4:	bl	14f0 <BZ2_decompress@plt>
    ccc8:	cmp	w0, #0x4
    cccc:	b.ne	c00c <BZ2_bzDecompress@@Base+0xb8>  // b.any
    ccd0:	b	cd3c <BZ2_bzDecompress@@Base+0xde8>
    ccd4:	ldr	x0, [x21]
    ccd8:	ldr	w2, [x19, #3176]
    ccdc:	adrp	x1, f000 <BZ2_bzerror@@Base+0xcec>
    cce0:	add	x1, x1, #0x1f6
    cce4:	bl	1610 <fprintf@plt>
    cce8:	ldr	w8, [x19, #52]
    ccec:	cmp	w8, #0x2
    ccf0:	b.lt	cca0 <BZ2_bzDecompress@@Base+0xd4c>  // b.tstop
    ccf4:	ldr	x1, [x21]
    ccf8:	mov	w0, #0x5d                  	// #93
    ccfc:	bl	1460 <fputc@plt>
    cd00:	ldr	w8, [x19, #3184]
    cd04:	ldr	w9, [x19, #3176]
    cd08:	cmp	w8, w9
    cd0c:	b.eq	ccb0 <BZ2_bzDecompress@@Base+0xd5c>  // b.none
    cd10:	b	cd34 <BZ2_bzDecompress@@Base+0xde0>
    cd14:	mov	w1, #0x1                   	// #1
    cd18:	b	cc20 <BZ2_bzDecompress@@Base+0xccc>
    cd1c:	mov	w1, wzr
    cd20:	mov	w0, w14
    cd24:	mov	w18, w2
    cd28:	b	cc20 <BZ2_bzDecompress@@Base+0xccc>
    cd2c:	mov	w0, #0xffffffff            	// #-1
    cd30:	b	bf8c <BZ2_bzDecompress@@Base+0x38>
    cd34:	mov	w0, #0xfffffffc            	// #-4
    cd38:	b	bf8c <BZ2_bzDecompress@@Base+0x38>
    cd3c:	ldr	w8, [x19, #52]
    cd40:	cmp	w8, #0x3
    cd44:	b.ge	cd68 <BZ2_bzDecompress@@Base+0xe14>  // b.tcont
    cd48:	ldr	w8, [x19, #3188]
    cd4c:	ldr	w9, [x19, #3180]
    cd50:	cmp	w8, w9
    cd54:	mov	w8, #0x4                   	// #4
    cd58:	cneg	w0, w8, ne  // ne = any
    cd5c:	b	bf8c <BZ2_bzDecompress@@Base+0x38>
    cd60:	mov	w0, wzr
    cd64:	b	bf8c <BZ2_bzDecompress@@Base+0x38>
    cd68:	ldr	x0, [x21]
    cd6c:	ldr	w2, [x19, #3180]
    cd70:	ldr	w3, [x19, #3188]
    cd74:	adrp	x1, f000 <BZ2_bzerror@@Base+0xcec>
    cd78:	add	x1, x1, #0x208
    cd7c:	bl	1610 <fprintf@plt>
    cd80:	b	cd48 <BZ2_bzDecompress@@Base+0xdf4>

000000000000cd84 <BZ2_bzDecompressEnd@@Base>:
    cd84:	stp	x29, x30, [sp, #-32]!
    cd88:	stp	x20, x19, [sp, #16]
    cd8c:	mov	x29, sp
    cd90:	cbz	x0, cdac <BZ2_bzDecompressEnd@@Base+0x28>
    cd94:	ldr	x20, [x0, #48]
    cd98:	mov	x19, x0
    cd9c:	cbz	x20, cdac <BZ2_bzDecompressEnd@@Base+0x28>
    cda0:	ldr	x8, [x20]
    cda4:	cmp	x8, x19
    cda8:	b.eq	cdbc <BZ2_bzDecompressEnd@@Base+0x38>  // b.none
    cdac:	mov	w0, #0xfffffffe            	// #-2
    cdb0:	ldp	x20, x19, [sp, #16]
    cdb4:	ldp	x29, x30, [sp], #32
    cdb8:	ret
    cdbc:	ldr	x1, [x20, #3152]
    cdc0:	cbz	x1, cdcc <BZ2_bzDecompressEnd@@Base+0x48>
    cdc4:	ldp	x8, x0, [x19, #64]
    cdc8:	blr	x8
    cdcc:	ldr	x1, [x20, #3160]
    cdd0:	cbz	x1, cddc <BZ2_bzDecompressEnd@@Base+0x58>
    cdd4:	ldp	x8, x0, [x19, #64]
    cdd8:	blr	x8
    cddc:	ldr	x1, [x20, #3168]
    cde0:	cbz	x1, cdec <BZ2_bzDecompressEnd@@Base+0x68>
    cde4:	ldp	x8, x0, [x19, #64]
    cde8:	blr	x8
    cdec:	ldp	x8, x0, [x19, #64]
    cdf0:	ldr	x1, [x19, #48]
    cdf4:	blr	x8
    cdf8:	mov	w0, wzr
    cdfc:	str	xzr, [x19, #48]
    ce00:	ldp	x20, x19, [sp, #16]
    ce04:	ldp	x29, x30, [sp], #32
    ce08:	ret

000000000000ce0c <BZ2_bzWriteOpen@@Base>:
    ce0c:	stp	x29, x30, [sp, #-80]!
    ce10:	str	x25, [sp, #16]
    ce14:	stp	x24, x23, [sp, #32]
    ce18:	stp	x22, x21, [sp, #48]
    ce1c:	stp	x20, x19, [sp, #64]
    ce20:	mov	x29, sp
    ce24:	mov	w23, w4
    ce28:	mov	w21, w3
    ce2c:	mov	w22, w2
    ce30:	mov	x24, x1
    ce34:	mov	x19, x0
    ce38:	cbz	x0, ce40 <BZ2_bzWriteOpen@@Base+0x34>
    ce3c:	str	wzr, [x19]
    ce40:	cmp	w21, #0x4
    ce44:	b.hi	ce7c <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    ce48:	cmp	w23, #0xfa
    ce4c:	b.hi	ce7c <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    ce50:	cbz	x24, ce7c <BZ2_bzWriteOpen@@Base+0x70>
    ce54:	sub	w8, w22, #0x1
    ce58:	cmp	w8, #0x9
    ce5c:	b.cs	ce7c <BZ2_bzWriteOpen@@Base+0x70>  // b.hs, b.nlast
    ce60:	mov	x0, x24
    ce64:	bl	1620 <ferror@plt>
    ce68:	cbz	w0, cea8 <BZ2_bzWriteOpen@@Base+0x9c>
    ce6c:	mov	x20, xzr
    ce70:	cbz	x19, ce8c <BZ2_bzWriteOpen@@Base+0x80>
    ce74:	mov	w8, #0xfffffffa            	// #-6
    ce78:	b	ce88 <BZ2_bzWriteOpen@@Base+0x7c>
    ce7c:	mov	x20, xzr
    ce80:	cbz	x19, ce8c <BZ2_bzWriteOpen@@Base+0x80>
    ce84:	mov	w8, #0xfffffffe            	// #-2
    ce88:	str	w8, [x19]
    ce8c:	mov	x0, x20
    ce90:	ldp	x20, x19, [sp, #64]
    ce94:	ldp	x22, x21, [sp, #48]
    ce98:	ldp	x24, x23, [sp, #32]
    ce9c:	ldr	x25, [sp, #16]
    cea0:	ldp	x29, x30, [sp], #80
    cea4:	ret
    cea8:	mov	w0, #0x13f0                	// #5104
    ceac:	bl	1480 <malloc@plt>
    ceb0:	cbz	x0, cf28 <BZ2_bzWriteOpen@@Base+0x11c>
    ceb4:	mov	w8, #0x1394                	// #5012
    ceb8:	mov	x20, x0
    cebc:	add	x25, x0, x8
    cec0:	cbz	x19, cec8 <BZ2_bzWriteOpen@@Base+0xbc>
    cec4:	str	wzr, [x19]
    cec8:	mov	w8, #0x1398                	// #5016
    cecc:	cmp	w23, #0x0
    ced0:	mov	w9, #0x1e                  	// #30
    ced4:	str	wzr, [x20, #5096]
    ced8:	strb	wzr, [x25, #88]
    cedc:	str	x24, [x20]
    cee0:	mov	w24, #0x1                   	// #1
    cee4:	movi	v0.2d, #0x0
    cee8:	add	x0, x20, x8
    ceec:	csel	w3, w9, w23, eq  // eq = none
    cef0:	mov	w1, w22
    cef4:	mov	w2, w21
    cef8:	str	wzr, [x20, #5008]
    cefc:	strb	w24, [x25]
    cf00:	str	xzr, [x20, #5088]
    cf04:	str	q0, [x20, #5072]
    cf08:	bl	14c0 <BZ2_bzCompressInit@plt>
    cf0c:	cbz	w0, cf38 <BZ2_bzWriteOpen@@Base+0x12c>
    cf10:	cbz	x19, cf18 <BZ2_bzWriteOpen@@Base+0x10c>
    cf14:	str	w0, [x19]
    cf18:	mov	x0, x20
    cf1c:	bl	1540 <free@plt>
    cf20:	mov	x20, xzr
    cf24:	b	ce8c <BZ2_bzWriteOpen@@Base+0x80>
    cf28:	mov	x20, xzr
    cf2c:	cbz	x19, ce8c <BZ2_bzWriteOpen@@Base+0x80>
    cf30:	mov	w8, #0xfffffffd            	// #-3
    cf34:	b	ce88 <BZ2_bzWriteOpen@@Base+0x7c>
    cf38:	str	wzr, [x20, #5024]
    cf3c:	strb	w24, [x25, #88]
    cf40:	b	ce8c <BZ2_bzWriteOpen@@Base+0x80>

000000000000cf44 <BZ2_bzWrite@@Base>:
    cf44:	stp	x29, x30, [sp, #-64]!
    cf48:	stp	x24, x23, [sp, #16]
    cf4c:	stp	x22, x21, [sp, #32]
    cf50:	stp	x20, x19, [sp, #48]
    cf54:	mov	x29, sp
    cf58:	mov	w22, w3
    cf5c:	mov	x21, x2
    cf60:	mov	x19, x1
    cf64:	mov	x20, x0
    cf68:	cbz	x0, cf70 <BZ2_bzWrite@@Base+0x2c>
    cf6c:	str	wzr, [x20]
    cf70:	cbz	x19, cfac <BZ2_bzWrite@@Base+0x68>
    cf74:	str	wzr, [x19, #5096]
    cf78:	cbz	x21, cfac <BZ2_bzWrite@@Base+0x68>
    cf7c:	tbnz	w22, #31, cfac <BZ2_bzWrite@@Base+0x68>
    cf80:	mov	w8, #0x1394                	// #5012
    cf84:	ldrb	w8, [x19, x8]
    cf88:	cbz	w8, cfc4 <BZ2_bzWrite@@Base+0x80>
    cf8c:	ldr	x0, [x19]
    cf90:	bl	1620 <ferror@plt>
    cf94:	cbz	w0, cfec <BZ2_bzWrite@@Base+0xa8>
    cf98:	cbz	x20, cfa4 <BZ2_bzWrite@@Base+0x60>
    cf9c:	mov	w8, #0xfffffffa            	// #-6
    cfa0:	str	w8, [x20]
    cfa4:	mov	w8, #0xfffffffa            	// #-6
    cfa8:	b	cfd4 <BZ2_bzWrite@@Base+0x90>
    cfac:	cbz	x20, cfb8 <BZ2_bzWrite@@Base+0x74>
    cfb0:	mov	w8, #0xfffffffe            	// #-2
    cfb4:	str	w8, [x20]
    cfb8:	cbz	x19, cfd8 <BZ2_bzWrite@@Base+0x94>
    cfbc:	mov	w8, #0xfffffffe            	// #-2
    cfc0:	b	cfd4 <BZ2_bzWrite@@Base+0x90>
    cfc4:	cbz	x20, cfd0 <BZ2_bzWrite@@Base+0x8c>
    cfc8:	mov	w8, #0xffffffff            	// #-1
    cfcc:	str	w8, [x20]
    cfd0:	mov	w8, #0xffffffff            	// #-1
    cfd4:	str	w8, [x19, #5096]
    cfd8:	ldp	x20, x19, [sp, #48]
    cfdc:	ldp	x22, x21, [sp, #32]
    cfe0:	ldp	x24, x23, [sp, #16]
    cfe4:	ldp	x29, x30, [sp], #64
    cfe8:	ret
    cfec:	cbz	w22, d08c <BZ2_bzWrite@@Base+0x148>
    cff0:	mov	w8, #0x1398                	// #5016
    cff4:	str	w22, [x19, #5024]
    cff8:	str	x21, [x19, #5016]
    cffc:	add	x21, x19, #0x8
    d000:	add	x22, x19, x8
    d004:	mov	w24, #0x1388                	// #5000
    d008:	b	d014 <BZ2_bzWrite@@Base+0xd0>
    d00c:	ldr	w8, [x19, #5024]
    d010:	cbz	w8, d08c <BZ2_bzWrite@@Base+0x148>
    d014:	ldr	x8, [x19, #5064]
    d018:	str	w24, [x19, #5048]
    d01c:	str	x21, [x19, #5040]
    d020:	cbz	x8, d09c <BZ2_bzWrite@@Base+0x158>
    d024:	ldr	x9, [x8]
    d028:	cmp	x9, x22
    d02c:	b.ne	d09c <BZ2_bzWrite@@Base+0x158>  // b.any
    d030:	ldr	w9, [x8, #8]
    d034:	cmp	w9, #0x2
    d038:	b.ne	d0a4 <BZ2_bzWrite@@Base+0x160>  // b.any
    d03c:	mov	x0, x22
    d040:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    d044:	tst	w0, #0xff
    d048:	b.eq	d09c <BZ2_bzWrite@@Base+0x158>  // b.none
    d04c:	ldrsw	x8, [x19, #5048]
    d050:	ubfx	x9, x8, #3, #29
    d054:	cmp	w9, #0x270
    d058:	b.hi	d00c <BZ2_bzWrite@@Base+0xc8>  // b.pmore
    d05c:	ldr	x3, [x19]
    d060:	sub	x23, x24, x8
    d064:	mov	w1, #0x1                   	// #1
    d068:	mov	x0, x21
    d06c:	mov	x2, x23
    d070:	bl	15b0 <fwrite@plt>
    d074:	cmp	w23, w0
    d078:	b.ne	cf98 <BZ2_bzWrite@@Base+0x54>  // b.any
    d07c:	ldr	x0, [x19]
    d080:	bl	1620 <ferror@plt>
    d084:	cbz	w0, d00c <BZ2_bzWrite@@Base+0xc8>
    d088:	b	cf98 <BZ2_bzWrite@@Base+0x54>
    d08c:	cbz	x20, d094 <BZ2_bzWrite@@Base+0x150>
    d090:	str	wzr, [x20]
    d094:	str	wzr, [x19, #5096]
    d098:	b	cfd8 <BZ2_bzWrite@@Base+0x94>
    d09c:	mov	w8, #0xfffffffe            	// #-2
    d0a0:	b	d0c8 <BZ2_bzWrite@@Base+0x184>
    d0a4:	cmp	w9, #0x4
    d0a8:	mov	w8, wzr
    d0ac:	b.hi	d0c8 <BZ2_bzWrite@@Base+0x184>  // b.pmore
    d0b0:	mov	w10, #0x1                   	// #1
    d0b4:	lsl	w9, w10, w9
    d0b8:	mov	w10, #0x1a                  	// #26
    d0bc:	tst	w9, w10
    d0c0:	b.eq	d0c8 <BZ2_bzWrite@@Base+0x184>  // b.none
    d0c4:	mov	w8, #0xffffffff            	// #-1
    d0c8:	cbz	x20, cfd4 <BZ2_bzWrite@@Base+0x90>
    d0cc:	str	w8, [x20]
    d0d0:	b	cfd4 <BZ2_bzWrite@@Base+0x90>

000000000000d0d4 <BZ2_bzWriteClose@@Base>:
    d0d4:	mov	x5, x4
    d0d8:	mov	x4, xzr
    d0dc:	mov	x6, xzr
    d0e0:	b	1580 <BZ2_bzWriteClose64@plt>

000000000000d0e4 <BZ2_bzWriteClose64@@Base>:
    d0e4:	sub	sp, sp, #0x70
    d0e8:	stp	x29, x30, [sp, #16]
    d0ec:	stp	x28, x27, [sp, #32]
    d0f0:	stp	x26, x25, [sp, #48]
    d0f4:	stp	x24, x23, [sp, #64]
    d0f8:	stp	x22, x21, [sp, #80]
    d0fc:	stp	x20, x19, [sp, #96]
    d100:	add	x29, sp, #0x10
    d104:	mov	x20, x0
    d108:	cbz	x1, d154 <BZ2_bzWriteClose64@@Base+0x70>
    d10c:	mov	w8, #0x1394                	// #5012
    d110:	ldrb	w8, [x1, x8]
    d114:	mov	x19, x1
    d118:	cbz	w8, d160 <BZ2_bzWriteClose64@@Base+0x7c>
    d11c:	ldr	x25, [x19]
    d120:	mov	x21, x6
    d124:	mov	x22, x5
    d128:	mov	x23, x4
    d12c:	mov	x0, x25
    d130:	mov	x24, x3
    d134:	mov	w26, w2
    d138:	bl	1620 <ferror@plt>
    d13c:	cbz	w0, d194 <BZ2_bzWriteClose64@@Base+0xb0>
    d140:	cbz	x20, d14c <BZ2_bzWriteClose64@@Base+0x68>
    d144:	mov	w8, #0xfffffffa            	// #-6
    d148:	str	w8, [x20]
    d14c:	mov	w8, #0xfffffffa            	// #-6
    d150:	b	d170 <BZ2_bzWriteClose64@@Base+0x8c>
    d154:	cbz	x20, d174 <BZ2_bzWriteClose64@@Base+0x90>
    d158:	str	wzr, [x20]
    d15c:	b	d174 <BZ2_bzWriteClose64@@Base+0x90>
    d160:	cbz	x20, d16c <BZ2_bzWriteClose64@@Base+0x88>
    d164:	mov	w8, #0xffffffff            	// #-1
    d168:	str	w8, [x20]
    d16c:	mov	w8, #0xffffffff            	// #-1
    d170:	str	w8, [x19, #5096]
    d174:	ldp	x20, x19, [sp, #96]
    d178:	ldp	x22, x21, [sp, #80]
    d17c:	ldp	x24, x23, [sp, #64]
    d180:	ldp	x26, x25, [sp, #48]
    d184:	ldp	x28, x27, [sp, #32]
    d188:	ldp	x29, x30, [sp, #16]
    d18c:	add	sp, sp, #0x70
    d190:	ret
    d194:	cbz	x24, d19c <BZ2_bzWriteClose64@@Base+0xb8>
    d198:	str	wzr, [x24]
    d19c:	cbz	x23, d1a4 <BZ2_bzWriteClose64@@Base+0xc0>
    d1a0:	str	wzr, [x23]
    d1a4:	cbz	x22, d1ac <BZ2_bzWriteClose64@@Base+0xc8>
    d1a8:	str	wzr, [x22]
    d1ac:	cbz	x21, d1b4 <BZ2_bzWriteClose64@@Base+0xd0>
    d1b0:	str	wzr, [x21]
    d1b4:	cbz	w26, d280 <BZ2_bzWriteClose64@@Base+0x19c>
    d1b8:	cbz	x24, d1c4 <BZ2_bzWriteClose64@@Base+0xe0>
    d1bc:	ldr	w8, [x19, #5028]
    d1c0:	str	w8, [x24]
    d1c4:	cbz	x23, d1d0 <BZ2_bzWriteClose64@@Base+0xec>
    d1c8:	ldr	w8, [x19, #5032]
    d1cc:	str	w8, [x23]
    d1d0:	cbz	x22, d1dc <BZ2_bzWriteClose64@@Base+0xf8>
    d1d4:	ldr	w8, [x19, #5052]
    d1d8:	str	w8, [x22]
    d1dc:	cbz	x21, d1e8 <BZ2_bzWriteClose64@@Base+0x104>
    d1e0:	ldr	w8, [x19, #5056]
    d1e4:	str	w8, [x21]
    d1e8:	cbz	x20, d1f0 <BZ2_bzWriteClose64@@Base+0x10c>
    d1ec:	str	wzr, [x20]
    d1f0:	ldr	x20, [x19, #5064]
    d1f4:	str	wzr, [x19, #5096]
    d1f8:	cbz	x20, d25c <BZ2_bzWriteClose64@@Base+0x178>
    d1fc:	ldr	x8, [x20]
    d200:	mov	w9, #0x1398                	// #5016
    d204:	add	x9, x19, x9
    d208:	cmp	x8, x9
    d20c:	b.ne	d25c <BZ2_bzWriteClose64@@Base+0x178>  // b.any
    d210:	ldr	x1, [x20, #24]
    d214:	cbz	x1, d224 <BZ2_bzWriteClose64@@Base+0x140>
    d218:	ldr	x8, [x19, #5080]
    d21c:	ldr	x0, [x19, #5088]
    d220:	blr	x8
    d224:	ldr	x1, [x20, #32]
    d228:	cbz	x1, d238 <BZ2_bzWriteClose64@@Base+0x154>
    d22c:	ldr	x8, [x19, #5080]
    d230:	ldr	x0, [x19, #5088]
    d234:	blr	x8
    d238:	ldr	x1, [x20, #40]
    d23c:	cbz	x1, d24c <BZ2_bzWriteClose64@@Base+0x168>
    d240:	ldr	x8, [x19, #5080]
    d244:	ldr	x0, [x19, #5088]
    d248:	blr	x8
    d24c:	ldr	x8, [x19, #5080]
    d250:	ldr	x0, [x19, #5088]
    d254:	ldr	x1, [x19, #5064]
    d258:	blr	x8
    d25c:	mov	x0, x19
    d260:	ldp	x20, x19, [sp, #96]
    d264:	ldp	x22, x21, [sp, #80]
    d268:	ldp	x24, x23, [sp, #64]
    d26c:	ldp	x26, x25, [sp, #48]
    d270:	ldp	x28, x27, [sp, #32]
    d274:	ldp	x29, x30, [sp, #16]
    d278:	add	sp, sp, #0x70
    d27c:	b	1540 <free@plt>
    d280:	ldr	w8, [x19, #5096]
    d284:	cbz	w8, d2ac <BZ2_bzWriteClose64@@Base+0x1c8>
    d288:	mov	x0, x25
    d28c:	bl	1620 <ferror@plt>
    d290:	cbnz	w0, d1b8 <BZ2_bzWriteClose64@@Base+0xd4>
    d294:	mov	x0, x25
    d298:	bl	15c0 <fflush@plt>
    d29c:	ldr	x0, [x19]
    d2a0:	bl	1620 <ferror@plt>
    d2a4:	cbnz	w0, d140 <BZ2_bzWriteClose64@@Base+0x5c>
    d2a8:	b	d1b8 <BZ2_bzWriteClose64@@Base+0xd4>
    d2ac:	mov	w8, #0x1398                	// #5016
    d2b0:	add	x25, x19, #0x8
    d2b4:	mov	w28, #0x1388                	// #5000
    d2b8:	add	x26, x19, x8
    d2bc:	ldr	x27, [x19, #5064]
    d2c0:	str	w28, [x19, #5048]
    d2c4:	str	x25, [x19, #5040]
    d2c8:	cbz	x27, d3d8 <BZ2_bzWriteClose64@@Base+0x2f4>
    d2cc:	ldr	x8, [x27]
    d2d0:	cmp	x8, x26
    d2d4:	b.ne	d3d8 <BZ2_bzWriteClose64@@Base+0x2f4>  // b.any
    d2d8:	ldr	w8, [x27, #8]
    d2dc:	cmp	w8, #0x2
    d2e0:	b.ne	d2fc <BZ2_bzWriteClose64@@Base+0x218>  // b.any
    d2e4:	ldr	w9, [x19, #5024]
    d2e8:	mov	w8, #0x4                   	// #4
    d2ec:	str	w8, [x27, #8]
    d2f0:	str	w9, [x27, #16]
    d2f4:	cmp	w8, #0x2
    d2f8:	b.eq	d2e4 <BZ2_bzWriteClose64@@Base+0x200>  // b.none
    d2fc:	cmp	w8, #0x1
    d300:	b.eq	d3c8 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    d304:	cmp	w8, #0x3
    d308:	b.eq	d3c8 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    d30c:	cmp	w8, #0x4
    d310:	b.ne	d3d0 <BZ2_bzWriteClose64@@Base+0x2ec>  // b.any
    d314:	ldr	w8, [x27, #16]
    d318:	ldr	w9, [x19, #5024]
    d31c:	cmp	w8, w9
    d320:	b.ne	d3c8 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.any
    d324:	mov	x0, x26
    d328:	mov	w28, #0x1                   	// #1
    d32c:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    d330:	tst	w0, #0xff
    d334:	b.eq	d3c8 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    d338:	ldr	w8, [x27, #16]
    d33c:	cbz	w8, d398 <BZ2_bzWriteClose64@@Base+0x2b4>
    d340:	mov	w27, #0x3                   	// #3
    d344:	ldrsw	x8, [x19, #5048]
    d348:	mov	w28, #0x1388                	// #5000
    d34c:	ubfx	x9, x8, #3, #29
    d350:	cmp	w9, #0x270
    d354:	b.hi	d38c <BZ2_bzWriteClose64@@Base+0x2a8>  // b.pmore
    d358:	ldr	x3, [x19]
    d35c:	stur	w27, [x29, #-4]
    d360:	sub	x27, x28, x8
    d364:	mov	w1, #0x1                   	// #1
    d368:	mov	x0, x25
    d36c:	mov	x2, x27
    d370:	bl	15b0 <fwrite@plt>
    d374:	cmp	w27, w0
    d378:	ldur	w27, [x29, #-4]
    d37c:	b.ne	d140 <BZ2_bzWriteClose64@@Base+0x5c>  // b.any
    d380:	ldr	x0, [x19]
    d384:	bl	1620 <ferror@plt>
    d388:	cbnz	w0, d140 <BZ2_bzWriteClose64@@Base+0x5c>
    d38c:	cmp	w27, #0x4
    d390:	b.ne	d2bc <BZ2_bzWriteClose64@@Base+0x1d8>  // b.any
    d394:	b	d3e8 <BZ2_bzWriteClose64@@Base+0x304>
    d398:	ldr	w8, [x27, #92]
    d39c:	cmp	w8, #0xff
    d3a0:	b.hi	d3b0 <BZ2_bzWriteClose64@@Base+0x2cc>  // b.pmore
    d3a4:	ldr	w8, [x27, #96]
    d3a8:	cmp	w8, #0x0
    d3ac:	b.gt	d340 <BZ2_bzWriteClose64@@Base+0x25c>
    d3b0:	ldp	w9, w8, [x27, #116]
    d3b4:	cmp	w8, w9
    d3b8:	b.lt	d340 <BZ2_bzWriteClose64@@Base+0x25c>  // b.tstop
    d3bc:	str	w28, [x27, #8]
    d3c0:	mov	w27, #0x4                   	// #4
    d3c4:	b	d344 <BZ2_bzWriteClose64@@Base+0x260>
    d3c8:	mov	w8, #0xffffffff            	// #-1
    d3cc:	b	d3dc <BZ2_bzWriteClose64@@Base+0x2f8>
    d3d0:	mov	w8, wzr
    d3d4:	b	d3dc <BZ2_bzWriteClose64@@Base+0x2f8>
    d3d8:	mov	w8, #0xfffffffe            	// #-2
    d3dc:	cbz	x20, d170 <BZ2_bzWriteClose64@@Base+0x8c>
    d3e0:	str	w8, [x20]
    d3e4:	b	d170 <BZ2_bzWriteClose64@@Base+0x8c>
    d3e8:	ldr	x25, [x19]
    d3ec:	mov	x0, x25
    d3f0:	bl	1620 <ferror@plt>
    d3f4:	cbnz	w0, d1b8 <BZ2_bzWriteClose64@@Base+0xd4>
    d3f8:	b	d294 <BZ2_bzWriteClose64@@Base+0x1b0>

000000000000d3fc <BZ2_bzReadOpen@@Base>:
    d3fc:	stp	x29, x30, [sp, #-80]!
    d400:	stp	x26, x25, [sp, #16]
    d404:	stp	x24, x23, [sp, #32]
    d408:	stp	x22, x21, [sp, #48]
    d40c:	stp	x20, x19, [sp, #64]
    d410:	mov	x29, sp
    d414:	mov	w24, w5
    d418:	mov	x23, x4
    d41c:	mov	w21, w3
    d420:	mov	w19, w2
    d424:	mov	x25, x1
    d428:	mov	x22, x0
    d42c:	cbz	x0, d434 <BZ2_bzReadOpen@@Base+0x38>
    d430:	str	wzr, [x22]
    d434:	cbz	x25, d460 <BZ2_bzReadOpen@@Base+0x64>
    d438:	cmp	w19, #0x4
    d43c:	b.hi	d460 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    d440:	cmp	w21, #0x1
    d444:	b.hi	d460 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    d448:	cbnz	x23, d450 <BZ2_bzReadOpen@@Base+0x54>
    d44c:	cbnz	w24, d460 <BZ2_bzReadOpen@@Base+0x64>
    d450:	cbz	x23, d48c <BZ2_bzReadOpen@@Base+0x90>
    d454:	mov	w8, #0x1389                	// #5001
    d458:	cmp	w24, w8
    d45c:	b.cc	d48c <BZ2_bzReadOpen@@Base+0x90>  // b.lo, b.ul, b.last
    d460:	mov	x20, xzr
    d464:	cbz	x22, d470 <BZ2_bzReadOpen@@Base+0x74>
    d468:	mov	w8, #0xfffffffe            	// #-2
    d46c:	str	w8, [x22]
    d470:	mov	x0, x20
    d474:	ldp	x20, x19, [sp, #64]
    d478:	ldp	x22, x21, [sp, #48]
    d47c:	ldp	x24, x23, [sp, #32]
    d480:	ldp	x26, x25, [sp, #16]
    d484:	ldp	x29, x30, [sp], #80
    d488:	ret
    d48c:	mov	x0, x25
    d490:	bl	1620 <ferror@plt>
    d494:	cbz	w0, d4a8 <BZ2_bzReadOpen@@Base+0xac>
    d498:	mov	x20, xzr
    d49c:	cbz	x22, d470 <BZ2_bzReadOpen@@Base+0x74>
    d4a0:	mov	w8, #0xfffffffa            	// #-6
    d4a4:	b	d46c <BZ2_bzReadOpen@@Base+0x70>
    d4a8:	mov	w0, #0x13f0                	// #5104
    d4ac:	bl	1480 <malloc@plt>
    d4b0:	cbz	x0, d5bc <BZ2_bzReadOpen@@Base+0x1c0>
    d4b4:	mov	w8, #0x1394                	// #5012
    d4b8:	mov	x20, x0
    d4bc:	add	x26, x0, x8
    d4c0:	cbz	x22, d4c8 <BZ2_bzReadOpen@@Base+0xcc>
    d4c4:	str	wzr, [x22]
    d4c8:	mov	w8, #0x13d0                	// #5072
    d4cc:	movi	v0.2d, #0x0
    d4d0:	cmp	w24, #0x1
    d4d4:	add	x8, x20, x8
    d4d8:	str	wzr, [x20, #5096]
    d4dc:	strb	wzr, [x26, #88]
    d4e0:	str	x25, [x20]
    d4e4:	str	wzr, [x20, #5008]
    d4e8:	strb	wzr, [x26]
    d4ec:	str	xzr, [x20, #5088]
    d4f0:	str	q0, [x20, #5072]
    d4f4:	b.lt	d52c <BZ2_bzReadOpen@@Base+0x130>  // b.tstop
    d4f8:	mov	w11, wzr
    d4fc:	add	x9, x20, #0x8
    d500:	add	w10, w24, #0x1
    d504:	ldrb	w12, [x23], #1
    d508:	sub	w10, w10, #0x1
    d50c:	cmp	w10, #0x1
    d510:	strb	w12, [x9, w11, sxtw]
    d514:	ldr	w11, [x20, #5008]
    d518:	add	w11, w11, #0x1
    d51c:	str	w11, [x20, #5008]
    d520:	b.gt	d504 <BZ2_bzReadOpen@@Base+0x108>
    d524:	ldr	x9, [x8]
    d528:	cbnz	x9, d538 <BZ2_bzReadOpen@@Base+0x13c>
    d52c:	adrp	x9, b000 <BZ2_decompress@@Base+0x2948>
    d530:	add	x9, x9, #0x6fc
    d534:	str	x9, [x8]
    d538:	ldr	x8, [x20, #5080]
    d53c:	cbnz	x8, d54c <BZ2_bzReadOpen@@Base+0x150>
    d540:	adrp	x8, b000 <BZ2_decompress@@Base+0x2948>
    d544:	add	x8, x8, #0x708
    d548:	str	x8, [x20, #5080]
    d54c:	ldr	x0, [x20, #5088]
    d550:	mov	w1, #0xfa90                	// #64144
    d554:	mov	w2, #0x1                   	// #1
    d558:	mov	w23, #0x1                   	// #1
    d55c:	blr	x9
    d560:	cbz	x0, d5cc <BZ2_bzReadOpen@@Base+0x1d0>
    d564:	mov	w8, #0x1398                	// #5016
    d568:	add	x8, x20, x8
    d56c:	str	x8, [x0]
    d570:	mov	w8, #0xa                   	// #10
    d574:	movi	v0.2d, #0x0
    d578:	str	x0, [x20, #5064]
    d57c:	str	w8, [x0, #8]
    d580:	str	d0, [x0, #32]
    d584:	str	wzr, [x0, #3188]
    d588:	str	d0, [x26, #16]
    d58c:	str	d0, [x26, #40]
    d590:	strb	w21, [x0, #44]
    d594:	str	xzr, [x0, #3152]
    d598:	str	xzr, [x0, #3168]
    d59c:	str	xzr, [x0, #3160]
    d5a0:	stp	wzr, w19, [x0, #48]
    d5a4:	ldr	w8, [x20, #5008]
    d5a8:	add	x9, x20, #0x8
    d5ac:	str	x9, [x20, #5016]
    d5b0:	str	w8, [x20, #5024]
    d5b4:	strb	w23, [x26, #88]
    d5b8:	b	d470 <BZ2_bzReadOpen@@Base+0x74>
    d5bc:	mov	x20, xzr
    d5c0:	cbz	x22, d470 <BZ2_bzReadOpen@@Base+0x74>
    d5c4:	mov	w8, #0xfffffffd            	// #-3
    d5c8:	b	d46c <BZ2_bzReadOpen@@Base+0x70>
    d5cc:	cbz	x22, d5d8 <BZ2_bzReadOpen@@Base+0x1dc>
    d5d0:	mov	w8, #0xfffffffd            	// #-3
    d5d4:	str	w8, [x22]
    d5d8:	mov	x0, x20
    d5dc:	bl	1540 <free@plt>
    d5e0:	mov	x20, xzr
    d5e4:	b	d470 <BZ2_bzReadOpen@@Base+0x74>

000000000000d5e8 <BZ2_bzReadClose@@Base>:
    d5e8:	stp	x29, x30, [sp, #-32]!
    d5ec:	stp	x20, x19, [sp, #16]
    d5f0:	mov	x29, sp
    d5f4:	mov	x19, x1
    d5f8:	cbz	x0, d600 <BZ2_bzReadClose@@Base+0x18>
    d5fc:	str	wzr, [x0]
    d600:	cbz	x19, d638 <BZ2_bzReadClose@@Base+0x50>
    d604:	mov	w8, #0x1394                	// #5012
    d608:	add	x8, x19, x8
    d60c:	str	wzr, [x19, #5096]
    d610:	ldrb	w9, [x8]
    d614:	cbz	w9, d64c <BZ2_bzReadClose@@Base+0x64>
    d618:	cbz	x0, d624 <BZ2_bzReadClose@@Base+0x3c>
    d61c:	mov	w8, #0xffffffff            	// #-1
    d620:	str	w8, [x0]
    d624:	mov	w8, #0xffffffff            	// #-1
    d628:	str	w8, [x19, #5096]
    d62c:	ldp	x20, x19, [sp, #16]
    d630:	ldp	x29, x30, [sp], #32
    d634:	ret
    d638:	cbz	x0, d62c <BZ2_bzReadClose@@Base+0x44>
    d63c:	str	wzr, [x0]
    d640:	ldp	x20, x19, [sp, #16]
    d644:	ldp	x29, x30, [sp], #32
    d648:	ret
    d64c:	ldrb	w8, [x8, #88]
    d650:	cbz	w8, d670 <BZ2_bzReadClose@@Base+0x88>
    d654:	ldr	x20, [x19, #5064]
    d658:	cbz	x20, d670 <BZ2_bzReadClose@@Base+0x88>
    d65c:	ldr	x8, [x20]
    d660:	mov	w9, #0x1398                	// #5016
    d664:	add	x9, x19, x9
    d668:	cmp	x8, x9
    d66c:	b.eq	d680 <BZ2_bzReadClose@@Base+0x98>  // b.none
    d670:	mov	x0, x19
    d674:	ldp	x20, x19, [sp, #16]
    d678:	ldp	x29, x30, [sp], #32
    d67c:	b	1540 <free@plt>
    d680:	ldr	x1, [x20, #3152]
    d684:	cbz	x1, d694 <BZ2_bzReadClose@@Base+0xac>
    d688:	ldr	x8, [x19, #5080]
    d68c:	ldr	x0, [x19, #5088]
    d690:	blr	x8
    d694:	ldr	x1, [x20, #3160]
    d698:	cbz	x1, d6a8 <BZ2_bzReadClose@@Base+0xc0>
    d69c:	ldr	x8, [x19, #5080]
    d6a0:	ldr	x0, [x19, #5088]
    d6a4:	blr	x8
    d6a8:	ldr	x1, [x20, #3168]
    d6ac:	cbz	x1, d6bc <BZ2_bzReadClose@@Base+0xd4>
    d6b0:	ldr	x8, [x19, #5080]
    d6b4:	ldr	x0, [x19, #5088]
    d6b8:	blr	x8
    d6bc:	ldr	x8, [x19, #5080]
    d6c0:	ldr	x0, [x19, #5088]
    d6c4:	ldr	x1, [x19, #5064]
    d6c8:	blr	x8
    d6cc:	mov	x0, x19
    d6d0:	ldp	x20, x19, [sp, #16]
    d6d4:	ldp	x29, x30, [sp], #32
    d6d8:	b	1540 <free@plt>

000000000000d6dc <BZ2_bzRead@@Base>:
    d6dc:	stp	x29, x30, [sp, #-64]!
    d6e0:	stp	x24, x23, [sp, #16]
    d6e4:	stp	x22, x21, [sp, #32]
    d6e8:	stp	x20, x19, [sp, #48]
    d6ec:	mov	x29, sp
    d6f0:	mov	w20, w3
    d6f4:	mov	x19, x1
    d6f8:	mov	x21, x0
    d6fc:	cbz	x0, d704 <BZ2_bzRead@@Base+0x28>
    d700:	str	wzr, [x21]
    d704:	cbz	x19, d738 <BZ2_bzRead@@Base+0x5c>
    d708:	str	wzr, [x19, #5096]
    d70c:	cbz	x2, d738 <BZ2_bzRead@@Base+0x5c>
    d710:	tbnz	w20, #31, d738 <BZ2_bzRead@@Base+0x5c>
    d714:	mov	w8, #0x1394                	// #5012
    d718:	ldrb	w8, [x19, x8]
    d71c:	cbz	w8, d76c <BZ2_bzRead@@Base+0x90>
    d720:	cbz	x21, d72c <BZ2_bzRead@@Base+0x50>
    d724:	mov	w8, #0xffffffff            	// #-1
    d728:	str	w8, [x21]
    d72c:	mov	w20, wzr
    d730:	mov	w8, #0xffffffff            	// #-1
    d734:	b	d750 <BZ2_bzRead@@Base+0x74>
    d738:	cbz	x21, d744 <BZ2_bzRead@@Base+0x68>
    d73c:	mov	w8, #0xfffffffe            	// #-2
    d740:	str	w8, [x21]
    d744:	mov	w20, wzr
    d748:	cbz	x19, d754 <BZ2_bzRead@@Base+0x78>
    d74c:	mov	w8, #0xfffffffe            	// #-2
    d750:	str	w8, [x19, #5096]
    d754:	mov	w0, w20
    d758:	ldp	x20, x19, [sp, #48]
    d75c:	ldp	x22, x21, [sp, #32]
    d760:	ldp	x24, x23, [sp, #16]
    d764:	ldp	x29, x30, [sp], #64
    d768:	ret
    d76c:	cbz	w20, d858 <BZ2_bzRead@@Base+0x17c>
    d770:	mov	w8, #0x1398                	// #5016
    d774:	add	x22, x19, x8
    d778:	add	x23, x19, #0x8
    d77c:	str	w20, [x19, #5048]
    d780:	str	x2, [x19, #5040]
    d784:	b	d798 <BZ2_bzRead@@Base+0xbc>
    d788:	cmp	w0, #0x4
    d78c:	b.eq	d8a8 <BZ2_bzRead@@Base+0x1cc>  // b.none
    d790:	ldr	w8, [x19, #5048]
    d794:	cbz	w8, d898 <BZ2_bzRead@@Base+0x1bc>
    d798:	ldr	x24, [x19]
    d79c:	mov	x0, x24
    d7a0:	bl	1620 <ferror@plt>
    d7a4:	cbnz	w0, d86c <BZ2_bzRead@@Base+0x190>
    d7a8:	ldr	w8, [x19, #5024]
    d7ac:	cbnz	w8, d7fc <BZ2_bzRead@@Base+0x120>
    d7b0:	mov	x0, x24
    d7b4:	bl	1490 <fgetc@plt>
    d7b8:	cmn	w0, #0x1
    d7bc:	b.eq	d7fc <BZ2_bzRead@@Base+0x120>  // b.none
    d7c0:	mov	x1, x24
    d7c4:	bl	1550 <ungetc@plt>
    d7c8:	ldr	x3, [x19]
    d7cc:	mov	w1, #0x1                   	// #1
    d7d0:	mov	w2, #0x1388                	// #5000
    d7d4:	mov	x0, x23
    d7d8:	bl	1530 <fread@plt>
    d7dc:	ldr	x8, [x19]
    d7e0:	mov	x24, x0
    d7e4:	mov	x0, x8
    d7e8:	bl	1620 <ferror@plt>
    d7ec:	cbnz	w0, d86c <BZ2_bzRead@@Base+0x190>
    d7f0:	str	w24, [x19, #5008]
    d7f4:	str	w24, [x19, #5024]
    d7f8:	str	x23, [x19, #5016]
    d7fc:	mov	x0, x22
    d800:	bl	1560 <BZ2_bzDecompress@plt>
    d804:	tst	w0, #0xfffffffb
    d808:	b.ne	d884 <BZ2_bzRead@@Base+0x1a8>  // b.any
    d80c:	cbnz	w0, d788 <BZ2_bzRead@@Base+0xac>
    d810:	ldr	x24, [x19]
    d814:	mov	x0, x24
    d818:	bl	1490 <fgetc@plt>
    d81c:	cmn	w0, #0x1
    d820:	b.eq	d830 <BZ2_bzRead@@Base+0x154>  // b.none
    d824:	mov	x1, x24
    d828:	bl	1550 <ungetc@plt>
    d82c:	b	d790 <BZ2_bzRead@@Base+0xb4>
    d830:	ldr	w8, [x19, #5024]
    d834:	cbnz	w8, d790 <BZ2_bzRead@@Base+0xb4>
    d838:	ldr	w8, [x19, #5048]
    d83c:	cbz	w8, d898 <BZ2_bzRead@@Base+0x1bc>
    d840:	cbz	x21, d84c <BZ2_bzRead@@Base+0x170>
    d844:	mov	w8, #0xfffffff9            	// #-7
    d848:	str	w8, [x21]
    d84c:	mov	w20, wzr
    d850:	mov	w8, #0xfffffff9            	// #-7
    d854:	b	d750 <BZ2_bzRead@@Base+0x74>
    d858:	cbz	x21, d860 <BZ2_bzRead@@Base+0x184>
    d85c:	str	wzr, [x21]
    d860:	mov	w20, wzr
    d864:	str	wzr, [x19, #5096]
    d868:	b	d754 <BZ2_bzRead@@Base+0x78>
    d86c:	cbz	x21, d878 <BZ2_bzRead@@Base+0x19c>
    d870:	mov	w8, #0xfffffffa            	// #-6
    d874:	str	w8, [x21]
    d878:	mov	w20, wzr
    d87c:	mov	w8, #0xfffffffa            	// #-6
    d880:	b	d750 <BZ2_bzRead@@Base+0x74>
    d884:	cbz	x21, d88c <BZ2_bzRead@@Base+0x1b0>
    d888:	str	w0, [x21]
    d88c:	mov	w20, wzr
    d890:	str	w0, [x19, #5096]
    d894:	b	d754 <BZ2_bzRead@@Base+0x78>
    d898:	cbz	x21, d8a0 <BZ2_bzRead@@Base+0x1c4>
    d89c:	str	wzr, [x21]
    d8a0:	str	wzr, [x19, #5096]
    d8a4:	b	d754 <BZ2_bzRead@@Base+0x78>
    d8a8:	cbz	x21, d8b4 <BZ2_bzRead@@Base+0x1d8>
    d8ac:	mov	w8, #0x4                   	// #4
    d8b0:	str	w8, [x21]
    d8b4:	ldr	w8, [x19, #5048]
    d8b8:	mov	w9, #0x4                   	// #4
    d8bc:	str	w9, [x19, #5096]
    d8c0:	sub	w20, w20, w8
    d8c4:	b	d754 <BZ2_bzRead@@Base+0x78>

000000000000d8c8 <BZ2_bzReadGetUnused@@Base>:
    d8c8:	cbz	x1, d900 <BZ2_bzReadGetUnused@@Base+0x38>
    d8cc:	ldr	w8, [x1, #5096]
    d8d0:	cmp	w8, #0x4
    d8d4:	b.ne	d910 <BZ2_bzReadGetUnused@@Base+0x48>  // b.any
    d8d8:	cbz	x2, d928 <BZ2_bzReadGetUnused@@Base+0x60>
    d8dc:	cbz	x3, d928 <BZ2_bzReadGetUnused@@Base+0x60>
    d8e0:	cbz	x0, d8e8 <BZ2_bzReadGetUnused@@Base+0x20>
    d8e4:	str	wzr, [x0]
    d8e8:	ldr	w8, [x1, #5024]
    d8ec:	str	wzr, [x1, #5096]
    d8f0:	str	w8, [x3]
    d8f4:	ldr	x8, [x1, #5016]
    d8f8:	str	x8, [x2]
    d8fc:	ret
    d900:	cbz	x0, d8fc <BZ2_bzReadGetUnused@@Base+0x34>
    d904:	mov	w8, #0xfffffffe            	// #-2
    d908:	str	w8, [x0]
    d90c:	ret
    d910:	cbz	x0, d91c <BZ2_bzReadGetUnused@@Base+0x54>
    d914:	mov	w8, #0xffffffff            	// #-1
    d918:	str	w8, [x0]
    d91c:	mov	w8, #0xffffffff            	// #-1
    d920:	str	w8, [x1, #5096]
    d924:	ret
    d928:	cbz	x0, d934 <BZ2_bzReadGetUnused@@Base+0x6c>
    d92c:	mov	w8, #0xfffffffe            	// #-2
    d930:	str	w8, [x0]
    d934:	mov	w8, #0xfffffffe            	// #-2
    d938:	str	w8, [x1, #5096]
    d93c:	ret

000000000000d940 <BZ2_bzBuffToBuffCompress@@Base>:
    d940:	sub	sp, sp, #0x90
    d944:	stp	x29, x30, [sp, #80]
    d948:	str	x23, [sp, #96]
    d94c:	stp	x22, x21, [sp, #112]
    d950:	stp	x20, x19, [sp, #128]
    d954:	add	x29, sp, #0x50
    d958:	cmp	w6, #0xfa
    d95c:	mov	w19, #0xfffffffe            	// #-2
    d960:	b.hi	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    d964:	cmp	w5, #0x4
    d968:	b.hi	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    d96c:	mov	x23, x0
    d970:	cbz	x0, d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    d974:	mov	x20, x1
    d978:	cbz	x1, d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    d97c:	mov	x22, x2
    d980:	cbz	x2, d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    d984:	sub	w8, w4, #0x1
    d988:	cmp	w8, #0x8
    d98c:	b.hi	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    d990:	cmp	w6, #0x0
    d994:	mov	w8, #0x1e                  	// #30
    d998:	mov	w21, w3
    d99c:	csel	w3, w8, w6, eq  // eq = none
    d9a0:	mov	x0, sp
    d9a4:	mov	w1, w4
    d9a8:	mov	w2, w5
    d9ac:	stp	xzr, xzr, [sp, #56]
    d9b0:	str	xzr, [sp, #72]
    d9b4:	bl	14c0 <BZ2_bzCompressInit@plt>
    d9b8:	mov	w19, w0
    d9bc:	cbz	w0, d9dc <BZ2_bzBuffToBuffCompress@@Base+0x9c>
    d9c0:	mov	w0, w19
    d9c4:	ldp	x20, x19, [sp, #128]
    d9c8:	ldp	x22, x21, [sp, #112]
    d9cc:	ldr	x23, [sp, #96]
    d9d0:	ldp	x29, x30, [sp, #80]
    d9d4:	add	sp, sp, #0x90
    d9d8:	ret
    d9dc:	str	x22, [sp]
    d9e0:	str	x23, [sp, #24]
    d9e4:	str	w21, [sp, #8]
    d9e8:	ldr	w8, [x20]
    d9ec:	ldr	x22, [sp, #48]
    d9f0:	str	w8, [sp, #32]
    d9f4:	cbz	x22, da10 <BZ2_bzBuffToBuffCompress@@Base+0xd0>
    d9f8:	ldr	x8, [x22]
    d9fc:	mov	x23, sp
    da00:	cmp	x8, x23
    da04:	b.eq	da18 <BZ2_bzBuffToBuffCompress@@Base+0xd8>  // b.none
    da08:	mov	w19, #0xfffffffe            	// #-2
    da0c:	b	daa0 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    da10:	mov	w19, #0xfffffffe            	// #-2
    da14:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    da18:	ldr	w8, [x22, #8]
    da1c:	cmp	w8, #0x2
    da20:	b.ne	da38 <BZ2_bzBuffToBuffCompress@@Base+0xf8>  // b.any
    da24:	mov	w8, #0x4                   	// #4
    da28:	str	w21, [x22, #16]
    da2c:	str	w8, [x22, #8]
    da30:	cmp	w8, #0x2
    da34:	b.eq	da24 <BZ2_bzBuffToBuffCompress@@Base+0xe4>  // b.none
    da38:	cmp	w8, #0x1
    da3c:	b.eq	da94 <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.none
    da40:	cmp	w8, #0x3
    da44:	b.eq	da94 <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.none
    da48:	cmp	w8, #0x4
    da4c:	b.ne	da9c <BZ2_bzBuffToBuffCompress@@Base+0x15c>  // b.any
    da50:	ldr	w8, [x22, #16]
    da54:	cmp	w8, w21
    da58:	b.ne	da94 <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.any
    da5c:	mov	x0, sp
    da60:	bl	b974 <BZ2_bzCompress@@Base+0x25c>
    da64:	tst	w0, #0xff
    da68:	b.eq	daf0 <BZ2_bzBuffToBuffCompress@@Base+0x1b0>  // b.none
    da6c:	ldr	w8, [x22, #16]
    da70:	cbz	w8, db00 <BZ2_bzBuffToBuffCompress@@Base+0x1c0>
    da74:	ldr	x19, [sp, #48]
    da78:	cbz	x19, da8c <BZ2_bzBuffToBuffCompress@@Base+0x14c>
    da7c:	ldr	x8, [x19]
    da80:	mov	x9, sp
    da84:	cmp	x8, x9
    da88:	b.eq	db5c <BZ2_bzBuffToBuffCompress@@Base+0x21c>  // b.none
    da8c:	mov	w19, #0xfffffff8            	// #-8
    da90:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    da94:	mov	w19, #0xffffffff            	// #-1
    da98:	b	daa0 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    da9c:	mov	w19, wzr
    daa0:	ldr	x8, [x22]
    daa4:	cmp	x8, x23
    daa8:	b.ne	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.any
    daac:	ldr	x1, [x22, #24]
    dab0:	cbz	x1, dabc <BZ2_bzBuffToBuffCompress@@Base+0x17c>
    dab4:	ldp	x8, x0, [sp, #64]
    dab8:	blr	x8
    dabc:	ldr	x1, [x22, #32]
    dac0:	cbz	x1, dacc <BZ2_bzBuffToBuffCompress@@Base+0x18c>
    dac4:	ldp	x8, x0, [sp, #64]
    dac8:	blr	x8
    dacc:	ldr	x1, [x22, #40]
    dad0:	cbz	x1, dadc <BZ2_bzBuffToBuffCompress@@Base+0x19c>
    dad4:	ldp	x8, x0, [sp, #64]
    dad8:	blr	x8
    dadc:	ldp	x8, x0, [sp, #64]
    dae0:	ldr	x1, [sp, #48]
    dae4:	blr	x8
    dae8:	str	xzr, [sp, #48]
    daec:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    daf0:	ldr	x22, [sp, #48]
    daf4:	mov	w19, #0xffffffff            	// #-1
    daf8:	cbnz	x22, daa0 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    dafc:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    db00:	ldr	w8, [x22, #92]
    db04:	cmp	w8, #0xff
    db08:	b.hi	db18 <BZ2_bzBuffToBuffCompress@@Base+0x1d8>  // b.pmore
    db0c:	ldr	w8, [x22, #96]
    db10:	cmp	w8, #0x0
    db14:	b.gt	da74 <BZ2_bzBuffToBuffCompress@@Base+0x134>
    db18:	ldp	w9, w8, [x22, #116]
    db1c:	cmp	w8, w9
    db20:	b.lt	da74 <BZ2_bzBuffToBuffCompress@@Base+0x134>  // b.tstop
    db24:	mov	w8, #0x1                   	// #1
    db28:	str	w8, [x22, #8]
    db2c:	ldr	w8, [sp, #32]
    db30:	ldr	w9, [x20]
    db34:	sub	w8, w9, w8
    db38:	str	w8, [x20]
    db3c:	ldr	x19, [sp, #48]
    db40:	cbz	x19, d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    db44:	ldr	x8, [x19]
    db48:	mov	x9, sp
    db4c:	cmp	x8, x9
    db50:	b.eq	dba4 <BZ2_bzBuffToBuffCompress@@Base+0x264>  // b.none
    db54:	mov	w19, wzr
    db58:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    db5c:	ldr	x1, [x19, #24]
    db60:	cbz	x1, db6c <BZ2_bzBuffToBuffCompress@@Base+0x22c>
    db64:	ldp	x8, x0, [sp, #64]
    db68:	blr	x8
    db6c:	ldr	x1, [x19, #32]
    db70:	cbz	x1, db7c <BZ2_bzBuffToBuffCompress@@Base+0x23c>
    db74:	ldp	x8, x0, [sp, #64]
    db78:	blr	x8
    db7c:	ldr	x1, [x19, #40]
    db80:	cbz	x1, db8c <BZ2_bzBuffToBuffCompress@@Base+0x24c>
    db84:	ldp	x8, x0, [sp, #64]
    db88:	blr	x8
    db8c:	ldp	x8, x0, [sp, #64]
    db90:	ldr	x1, [sp, #48]
    db94:	blr	x8
    db98:	str	xzr, [sp, #48]
    db9c:	mov	w19, #0xfffffff8            	// #-8
    dba0:	b	d9c0 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    dba4:	ldr	x1, [x19, #24]
    dba8:	cbz	x1, dbb4 <BZ2_bzBuffToBuffCompress@@Base+0x274>
    dbac:	ldp	x8, x0, [sp, #64]
    dbb0:	blr	x8
    dbb4:	ldr	x1, [x19, #32]
    dbb8:	cbz	x1, dbc4 <BZ2_bzBuffToBuffCompress@@Base+0x284>
    dbbc:	ldp	x8, x0, [sp, #64]
    dbc0:	blr	x8
    dbc4:	ldr	x1, [x19, #40]
    dbc8:	cbz	x1, dbd4 <BZ2_bzBuffToBuffCompress@@Base+0x294>
    dbcc:	ldp	x8, x0, [sp, #64]
    dbd0:	blr	x8
    dbd4:	ldp	x8, x0, [sp, #64]
    dbd8:	ldr	x1, [sp, #48]
    dbdc:	blr	x8
    dbe0:	mov	w19, wzr
    dbe4:	b	dae8 <BZ2_bzBuffToBuffCompress@@Base+0x1a8>

000000000000dbe8 <BZ2_bzBuffToBuffDecompress@@Base>:
    dbe8:	sub	sp, sp, #0xa0
    dbec:	stp	x29, x30, [sp, #80]
    dbf0:	str	x25, [sp, #96]
    dbf4:	stp	x24, x23, [sp, #112]
    dbf8:	stp	x22, x21, [sp, #128]
    dbfc:	stp	x20, x19, [sp, #144]
    dc00:	add	x29, sp, #0x50
    dc04:	mov	w19, #0xfffffffe            	// #-2
    dc08:	cbz	x0, de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dc0c:	mov	x20, x1
    dc10:	cbz	x1, de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dc14:	mov	x23, x2
    dc18:	cbz	x2, de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dc1c:	mov	w25, w4
    dc20:	cmp	w4, #0x1
    dc24:	mov	w19, #0xfffffffe            	// #-2
    dc28:	b.hi	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.pmore
    dc2c:	mov	w22, w5
    dc30:	cmp	w5, #0x4
    dc34:	b.hi	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.pmore
    dc38:	adrp	x8, b000 <BZ2_decompress@@Base+0x2948>
    dc3c:	adrp	x9, b000 <BZ2_decompress@@Base+0x2948>
    dc40:	mov	x24, x0
    dc44:	add	x8, x8, #0x6fc
    dc48:	add	x9, x9, #0x708
    dc4c:	mov	w0, #0xfa90                	// #64144
    dc50:	mov	w21, w3
    dc54:	str	x8, [sp, #56]
    dc58:	stp	x9, xzr, [sp, #64]
    dc5c:	bl	1480 <malloc@plt>
    dc60:	cbz	x0, dcfc <BZ2_bzBuffToBuffDecompress@@Base+0x114>
    dc64:	mov	x8, sp
    dc68:	mov	w9, #0xa                   	// #10
    dc6c:	movi	v0.2d, #0x0
    dc70:	str	x0, [sp, #48]
    dc74:	strb	w25, [x0, #44]
    dc78:	str	wzr, [x0, #3188]
    dc7c:	str	xzr, [x0, #3152]
    dc80:	str	xzr, [x0, #3168]
    dc84:	str	xzr, [x0, #3160]
    dc88:	stp	wzr, w22, [x0, #48]
    dc8c:	str	x23, [sp]
    dc90:	str	x24, [sp, #24]
    dc94:	str	x8, [x0]
    dc98:	str	w9, [x0, #8]
    dc9c:	str	d0, [x0, #32]
    dca0:	stur	d0, [sp, #12]
    dca4:	stur	d0, [sp, #36]
    dca8:	str	w21, [sp, #8]
    dcac:	ldr	w8, [x20]
    dcb0:	mov	x0, sp
    dcb4:	str	w8, [sp, #32]
    dcb8:	bl	1560 <BZ2_bzDecompress@plt>
    dcbc:	cbz	w0, dd04 <BZ2_bzBuffToBuffDecompress@@Base+0x11c>
    dcc0:	mov	w19, w0
    dcc4:	cmp	w0, #0x4
    dcc8:	b.ne	dd70 <BZ2_bzBuffToBuffDecompress@@Base+0x188>  // b.any
    dccc:	ldr	w8, [sp, #32]
    dcd0:	ldr	w9, [x20]
    dcd4:	sub	w8, w9, w8
    dcd8:	str	w8, [x20]
    dcdc:	ldr	x19, [sp, #48]
    dce0:	cbz	x19, de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dce4:	ldr	x8, [x19]
    dce8:	mov	x9, sp
    dcec:	cmp	x8, x9
    dcf0:	b.eq	ddc8 <BZ2_bzBuffToBuffDecompress@@Base+0x1e0>  // b.none
    dcf4:	mov	w19, wzr
    dcf8:	b	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dcfc:	mov	w19, #0xfffffffd            	// #-3
    dd00:	b	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dd04:	ldr	x20, [sp, #48]
    dd08:	ldr	w19, [sp, #32]
    dd0c:	cbz	x20, dd60 <BZ2_bzBuffToBuffDecompress@@Base+0x178>
    dd10:	ldr	x8, [x20]
    dd14:	mov	x9, sp
    dd18:	cmp	x8, x9
    dd1c:	b.ne	dd60 <BZ2_bzBuffToBuffDecompress@@Base+0x178>  // b.any
    dd20:	ldr	x1, [x20, #3152]
    dd24:	cbz	x1, dd30 <BZ2_bzBuffToBuffDecompress@@Base+0x148>
    dd28:	ldp	x8, x0, [sp, #64]
    dd2c:	blr	x8
    dd30:	ldr	x1, [x20, #3160]
    dd34:	cbz	x1, dd40 <BZ2_bzBuffToBuffDecompress@@Base+0x158>
    dd38:	ldp	x8, x0, [sp, #64]
    dd3c:	blr	x8
    dd40:	ldr	x1, [x20, #3168]
    dd44:	cbz	x1, dd50 <BZ2_bzBuffToBuffDecompress@@Base+0x168>
    dd48:	ldp	x8, x0, [sp, #64]
    dd4c:	blr	x8
    dd50:	ldp	x8, x0, [sp, #64]
    dd54:	ldr	x1, [sp, #48]
    dd58:	blr	x8
    dd5c:	str	xzr, [sp, #48]
    dd60:	cmp	w19, #0x0
    dd64:	mov	w8, #0xfffffff8            	// #-8
    dd68:	cinc	w19, w8, ne  // ne = any
    dd6c:	b	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dd70:	ldr	x20, [sp, #48]
    dd74:	cbz	x20, de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    dd78:	ldr	x8, [x20]
    dd7c:	mov	x9, sp
    dd80:	cmp	x8, x9
    dd84:	b.ne	de0c <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.any
    dd88:	ldr	x1, [x20, #3152]
    dd8c:	cbz	x1, dd98 <BZ2_bzBuffToBuffDecompress@@Base+0x1b0>
    dd90:	ldp	x8, x0, [sp, #64]
    dd94:	blr	x8
    dd98:	ldr	x1, [x20, #3160]
    dd9c:	cbz	x1, dda8 <BZ2_bzBuffToBuffDecompress@@Base+0x1c0>
    dda0:	ldp	x8, x0, [sp, #64]
    dda4:	blr	x8
    dda8:	ldr	x1, [x20, #3168]
    ddac:	cbz	x1, ddb8 <BZ2_bzBuffToBuffDecompress@@Base+0x1d0>
    ddb0:	ldp	x8, x0, [sp, #64]
    ddb4:	blr	x8
    ddb8:	ldp	x8, x0, [sp, #64]
    ddbc:	ldr	x1, [sp, #48]
    ddc0:	blr	x8
    ddc4:	b	de08 <BZ2_bzBuffToBuffDecompress@@Base+0x220>
    ddc8:	ldr	x1, [x19, #3152]
    ddcc:	cbz	x1, ddd8 <BZ2_bzBuffToBuffDecompress@@Base+0x1f0>
    ddd0:	ldp	x8, x0, [sp, #64]
    ddd4:	blr	x8
    ddd8:	ldr	x1, [x19, #3160]
    dddc:	cbz	x1, dde8 <BZ2_bzBuffToBuffDecompress@@Base+0x200>
    dde0:	ldp	x8, x0, [sp, #64]
    dde4:	blr	x8
    dde8:	ldr	x1, [x19, #3168]
    ddec:	cbz	x1, ddf8 <BZ2_bzBuffToBuffDecompress@@Base+0x210>
    ddf0:	ldp	x8, x0, [sp, #64]
    ddf4:	blr	x8
    ddf8:	ldp	x8, x0, [sp, #64]
    ddfc:	ldr	x1, [sp, #48]
    de00:	blr	x8
    de04:	mov	w19, wzr
    de08:	str	xzr, [sp, #48]
    de0c:	mov	w0, w19
    de10:	ldp	x20, x19, [sp, #144]
    de14:	ldp	x22, x21, [sp, #128]
    de18:	ldp	x24, x23, [sp, #112]
    de1c:	ldr	x25, [sp, #96]
    de20:	ldp	x29, x30, [sp, #80]
    de24:	add	sp, sp, #0xa0
    de28:	ret

000000000000de2c <BZ2_bzopen@@Base>:
    de2c:	mov	x2, x1
    de30:	mov	w1, #0xffffffff            	// #-1
    de34:	mov	w3, wzr
    de38:	b	de3c <BZ2_bzopen@@Base+0x10>
    de3c:	stp	x29, x30, [sp, #-96]!
    de40:	str	x28, [sp, #16]
    de44:	stp	x26, x25, [sp, #32]
    de48:	stp	x24, x23, [sp, #48]
    de4c:	stp	x22, x21, [sp, #64]
    de50:	stp	x20, x19, [sp, #80]
    de54:	mov	x29, sp
    de58:	sub	sp, sp, #0x1, lsl #12
    de5c:	sub	sp, sp, #0x3a0
    de60:	strh	wzr, [sp, #16]
    de64:	str	xzr, [sp, #8]
    de68:	cbz	x2, e020 <BZ2_bzopen@@Base+0x1f4>
    de6c:	mov	w22, w3
    de70:	mov	x23, x2
    de74:	mov	w21, w1
    de78:	mov	x20, x0
    de7c:	mov	w25, wzr
    de80:	mov	w19, wzr
    de84:	mov	w24, #0x9                   	// #9
    de88:	b	de94 <BZ2_bzopen@@Base+0x68>
    de8c:	mov	w19, #0x1                   	// #1
    de90:	add	x23, x23, #0x1
    de94:	ldrb	w26, [x23]
    de98:	cmp	w26, #0x72
    de9c:	b.le	debc <BZ2_bzopen@@Base+0x90>
    dea0:	cmp	w26, #0x73
    dea4:	b.eq	de8c <BZ2_bzopen@@Base+0x60>  // b.none
    dea8:	cmp	w26, #0x77
    deac:	b.ne	ded0 <BZ2_bzopen@@Base+0xa4>  // b.any
    deb0:	mov	w25, #0x1                   	// #1
    deb4:	add	x23, x23, #0x1
    deb8:	b	de94 <BZ2_bzopen@@Base+0x68>
    debc:	b.ne	decc <BZ2_bzopen@@Base+0xa0>  // b.any
    dec0:	mov	w25, wzr
    dec4:	add	x23, x23, #0x1
    dec8:	b	de94 <BZ2_bzopen@@Base+0x68>
    decc:	cbz	w26, def0 <BZ2_bzopen@@Base+0xc4>
    ded0:	bl	1510 <__ctype_b_loc@plt>
    ded4:	ldr	x8, [x0]
    ded8:	sub	w9, w26, #0x30
    dedc:	add	x23, x23, #0x1
    dee0:	ldrh	w8, [x8, w26, uxtw #1]
    dee4:	tst	w8, #0x800
    dee8:	csel	w24, w24, w9, eq  // eq = none
    deec:	b	de94 <BZ2_bzopen@@Base+0x68>
    def0:	add	x0, sp, #0x8
    def4:	add	x23, sp, #0x8
    def8:	bl	1420 <strlen@plt>
    defc:	cmp	w25, #0x0
    df00:	mov	w8, #0x72                  	// #114
    df04:	mov	w9, #0x77                  	// #119
    df08:	csel	w8, w9, w8, ne  // ne = any
    df0c:	strh	w8, [x23, x0]
    df10:	add	x0, sp, #0x8
    df14:	bl	1420 <strlen@plt>
    df18:	mov	w8, #0x62                  	// #98
    df1c:	strh	w8, [x23, x0]
    df20:	cbz	w22, df3c <BZ2_bzopen@@Base+0x110>
    df24:	add	x1, sp, #0x8
    df28:	mov	w0, w21
    df2c:	bl	14b0 <fdopen@plt>
    df30:	mov	x20, x0
    df34:	cbnz	x20, df80 <BZ2_bzopen@@Base+0x154>
    df38:	b	e020 <BZ2_bzopen@@Base+0x1f4>
    df3c:	cbz	x20, df60 <BZ2_bzopen@@Base+0x134>
    df40:	ldrb	w8, [x20]
    df44:	cbz	w8, df60 <BZ2_bzopen@@Base+0x134>
    df48:	add	x1, sp, #0x8
    df4c:	mov	x0, x20
    df50:	bl	15d0 <fopen64@plt>
    df54:	mov	x20, x0
    df58:	cbnz	x20, df80 <BZ2_bzopen@@Base+0x154>
    df5c:	b	e020 <BZ2_bzopen@@Base+0x1f4>
    df60:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    df64:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    df68:	ldr	x8, [x8, #4032]
    df6c:	ldr	x9, [x9, #4040]
    df70:	cmp	w25, #0x0
    df74:	csel	x8, x8, x9, ne  // ne = any
    df78:	ldr	x20, [x8]
    df7c:	cbz	x20, e020 <BZ2_bzopen@@Base+0x1f4>
    df80:	cbz	w25, dfb0 <BZ2_bzopen@@Base+0x184>
    df84:	cmp	w24, #0x1
    df88:	csinc	w8, w24, wzr, gt
    df8c:	cmp	w8, #0x9
    df90:	mov	w9, #0x9                   	// #9
    df94:	csel	w21, w8, w9, lt  // lt = tstop
    df98:	sub	w8, w21, #0x1
    df9c:	cmp	w8, #0x9
    dfa0:	str	wzr, [x29, #28]
    dfa4:	b.cc	dfd8 <BZ2_bzopen@@Base+0x1ac>  // b.lo, b.ul, b.last
    dfa8:	mov	w8, #0xfffffffe            	// #-2
    dfac:	b	dfe8 <BZ2_bzopen@@Base+0x1bc>
    dfb0:	add	x0, x29, #0x1c
    dfb4:	add	x4, sp, #0x18
    dfb8:	mov	x1, x20
    dfbc:	mov	w2, wzr
    dfc0:	mov	w3, w19
    dfc4:	mov	w5, wzr
    dfc8:	bl	15e0 <BZ2_bzReadOpen@plt>
    dfcc:	mov	x19, x0
    dfd0:	cbnz	x0, e024 <BZ2_bzopen@@Base+0x1f8>
    dfd4:	b	dfec <BZ2_bzopen@@Base+0x1c0>
    dfd8:	mov	x0, x20
    dfdc:	bl	1620 <ferror@plt>
    dfe0:	cbz	w0, e04c <BZ2_bzopen@@Base+0x220>
    dfe4:	mov	w8, #0xfffffffa            	// #-6
    dfe8:	str	w8, [x29, #28]
    dfec:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    dff0:	ldr	x8, [x8, #4040]
    dff4:	mov	x19, xzr
    dff8:	ldr	x8, [x8]
    dffc:	cmp	x20, x8
    e000:	b.eq	e024 <BZ2_bzopen@@Base+0x1f8>  // b.none
    e004:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    e008:	ldr	x8, [x8, #4032]
    e00c:	ldr	x8, [x8]
    e010:	cmp	x20, x8
    e014:	b.eq	e024 <BZ2_bzopen@@Base+0x1f8>  // b.none
    e018:	mov	x0, x20
    e01c:	bl	1470 <fclose@plt>
    e020:	mov	x19, xzr
    e024:	mov	x0, x19
    e028:	add	sp, sp, #0x1, lsl #12
    e02c:	add	sp, sp, #0x3a0
    e030:	ldp	x20, x19, [sp, #80]
    e034:	ldp	x22, x21, [sp, #64]
    e038:	ldp	x24, x23, [sp, #48]
    e03c:	ldp	x26, x25, [sp, #32]
    e040:	ldr	x28, [sp, #16]
    e044:	ldp	x29, x30, [sp], #96
    e048:	ret
    e04c:	mov	w0, #0x13f0                	// #5104
    e050:	bl	1480 <malloc@plt>
    e054:	cbz	x0, e0b8 <BZ2_bzopen@@Base+0x28c>
    e058:	mov	w8, #0x1394                	// #5012
    e05c:	mov	w9, #0x1398                	// #5016
    e060:	mov	x19, x0
    e064:	str	wzr, [x0, #5096]
    e068:	mov	w22, #0x1                   	// #1
    e06c:	movi	v0.2d, #0x0
    e070:	add	x23, x0, x8
    e074:	add	x0, x0, x9
    e078:	mov	w3, #0x1e                  	// #30
    e07c:	mov	w1, w21
    e080:	mov	w2, wzr
    e084:	str	wzr, [x29, #28]
    e088:	strb	wzr, [x23, #88]
    e08c:	str	wzr, [x19, #5008]
    e090:	str	x20, [x19]
    e094:	strb	w22, [x23]
    e098:	str	xzr, [x19, #5088]
    e09c:	str	q0, [x19, #5072]
    e0a0:	bl	14c0 <BZ2_bzCompressInit@plt>
    e0a4:	cbz	w0, e0c0 <BZ2_bzopen@@Base+0x294>
    e0a8:	str	w0, [x29, #28]
    e0ac:	mov	x0, x19
    e0b0:	bl	1540 <free@plt>
    e0b4:	b	dfec <BZ2_bzopen@@Base+0x1c0>
    e0b8:	mov	w8, #0xfffffffd            	// #-3
    e0bc:	b	dfe8 <BZ2_bzopen@@Base+0x1bc>
    e0c0:	str	wzr, [x19, #5024]
    e0c4:	strb	w22, [x23, #88]
    e0c8:	b	e024 <BZ2_bzopen@@Base+0x1f8>

000000000000e0cc <BZ2_bzdopen@@Base>:
    e0cc:	mov	x2, x1
    e0d0:	mov	w3, #0x1                   	// #1
    e0d4:	mov	w1, w0
    e0d8:	mov	x0, xzr
    e0dc:	b	de3c <BZ2_bzopen@@Base+0x10>

000000000000e0e0 <BZ2_bzread@@Base>:
    e0e0:	sub	sp, sp, #0x20
    e0e4:	stp	x29, x30, [sp, #16]
    e0e8:	add	x29, sp, #0x10
    e0ec:	ldr	w9, [x0, #5096]
    e0f0:	cmp	w9, #0x4
    e0f4:	b.ne	e108 <BZ2_bzread@@Base+0x28>  // b.any
    e0f8:	mov	w0, wzr
    e0fc:	ldp	x29, x30, [sp, #16]
    e100:	add	sp, sp, #0x20
    e104:	ret
    e108:	mov	x8, x0
    e10c:	mov	w3, w2
    e110:	mov	x2, x1
    e114:	sub	x0, x29, #0x4
    e118:	mov	x1, x8
    e11c:	bl	15f0 <BZ2_bzRead@plt>
    e120:	ldur	w8, [x29, #-4]
    e124:	tst	w8, #0xfffffffb
    e128:	csinv	w0, w0, wzr, eq  // eq = none
    e12c:	ldp	x29, x30, [sp, #16]
    e130:	add	sp, sp, #0x20
    e134:	ret

000000000000e138 <BZ2_bzwrite@@Base>:
    e138:	stp	x29, x30, [sp, #-32]!
    e13c:	str	x19, [sp, #16]
    e140:	mov	x29, sp
    e144:	mov	w19, w2
    e148:	mov	x2, x1
    e14c:	mov	x1, x0
    e150:	add	x0, x29, #0x1c
    e154:	mov	w3, w19
    e158:	bl	1500 <BZ2_bzWrite@plt>
    e15c:	ldr	w8, [x29, #28]
    e160:	cmp	w8, #0x0
    e164:	csinv	w0, w19, wzr, eq  // eq = none
    e168:	ldr	x19, [sp, #16]
    e16c:	ldp	x29, x30, [sp], #32
    e170:	ret

000000000000e174 <BZ2_bzflush@@Base>:
    e174:	mov	w0, wzr
    e178:	ret

000000000000e17c <BZ2_bzclose@@Base>:
    e17c:	stp	x29, x30, [sp, #-48]!
    e180:	str	x21, [sp, #16]
    e184:	stp	x20, x19, [sp, #32]
    e188:	mov	x29, sp
    e18c:	cbz	x0, e2d0 <BZ2_bzclose@@Base+0x154>
    e190:	mov	w8, #0x1394                	// #5012
    e194:	add	x21, x0, x8
    e198:	ldrb	w8, [x21]
    e19c:	ldr	x19, [x0]
    e1a0:	mov	x20, x0
    e1a4:	cbz	w8, e1f0 <BZ2_bzclose@@Base+0x74>
    e1a8:	add	x0, x29, #0x1c
    e1ac:	mov	x1, x20
    e1b0:	mov	w2, wzr
    e1b4:	mov	x3, xzr
    e1b8:	mov	x4, xzr
    e1bc:	mov	x5, xzr
    e1c0:	mov	x6, xzr
    e1c4:	bl	1580 <BZ2_bzWriteClose64@plt>
    e1c8:	ldr	w8, [x29, #28]
    e1cc:	cbz	w8, e2a0 <BZ2_bzclose@@Base+0x124>
    e1d0:	ldrb	w8, [x21]
    e1d4:	cbz	w8, e26c <BZ2_bzclose@@Base+0xf0>
    e1d8:	ldr	x0, [x20]
    e1dc:	bl	1620 <ferror@plt>
    e1e0:	cbz	w0, e278 <BZ2_bzclose@@Base+0xfc>
    e1e4:	mov	w8, #0xfffffffa            	// #-6
    e1e8:	str	w8, [x20, #5096]
    e1ec:	b	e2a0 <BZ2_bzclose@@Base+0x124>
    e1f0:	str	wzr, [x29, #28]
    e1f4:	str	wzr, [x20, #5096]
    e1f8:	ldrb	w8, [x21, #88]
    e1fc:	cbz	w8, e298 <BZ2_bzclose@@Base+0x11c>
    e200:	ldr	x21, [x20, #5064]
    e204:	cbz	x21, e298 <BZ2_bzclose@@Base+0x11c>
    e208:	ldr	x8, [x21]
    e20c:	mov	w9, #0x1398                	// #5016
    e210:	add	x9, x20, x9
    e214:	cmp	x8, x9
    e218:	b.ne	e298 <BZ2_bzclose@@Base+0x11c>  // b.any
    e21c:	ldr	x1, [x21, #3152]
    e220:	cbz	x1, e230 <BZ2_bzclose@@Base+0xb4>
    e224:	ldr	x8, [x20, #5080]
    e228:	ldr	x0, [x20, #5088]
    e22c:	blr	x8
    e230:	ldr	x1, [x21, #3160]
    e234:	cbz	x1, e244 <BZ2_bzclose@@Base+0xc8>
    e238:	ldr	x8, [x20, #5080]
    e23c:	ldr	x0, [x20, #5088]
    e240:	blr	x8
    e244:	ldr	x1, [x21, #3168]
    e248:	cbz	x1, e258 <BZ2_bzclose@@Base+0xdc>
    e24c:	ldr	x8, [x20, #5080]
    e250:	ldr	x0, [x20, #5088]
    e254:	blr	x8
    e258:	ldr	x8, [x20, #5080]
    e25c:	ldr	x0, [x20, #5088]
    e260:	ldr	x1, [x20, #5064]
    e264:	blr	x8
    e268:	b	e298 <BZ2_bzclose@@Base+0x11c>
    e26c:	mov	w8, #0xffffffff            	// #-1
    e270:	str	w8, [x20, #5096]
    e274:	b	e2a0 <BZ2_bzclose@@Base+0x124>
    e278:	ldr	x21, [x20, #5064]
    e27c:	str	wzr, [x20, #5096]
    e280:	cbz	x21, e298 <BZ2_bzclose@@Base+0x11c>
    e284:	ldr	x8, [x21]
    e288:	mov	w9, #0x1398                	// #5016
    e28c:	add	x9, x20, x9
    e290:	cmp	x8, x9
    e294:	b.eq	e2e0 <BZ2_bzclose@@Base+0x164>  // b.none
    e298:	mov	x0, x20
    e29c:	bl	1540 <free@plt>
    e2a0:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    e2a4:	ldr	x8, [x8, #4040]
    e2a8:	ldr	x8, [x8]
    e2ac:	cmp	x19, x8
    e2b0:	b.eq	e2d0 <BZ2_bzclose@@Base+0x154>  // b.none
    e2b4:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x10cec>
    e2b8:	ldr	x8, [x8, #4032]
    e2bc:	ldr	x8, [x8]
    e2c0:	cmp	x19, x8
    e2c4:	b.eq	e2d0 <BZ2_bzclose@@Base+0x154>  // b.none
    e2c8:	mov	x0, x19
    e2cc:	bl	1470 <fclose@plt>
    e2d0:	ldp	x20, x19, [sp, #32]
    e2d4:	ldr	x21, [sp, #16]
    e2d8:	ldp	x29, x30, [sp], #48
    e2dc:	ret
    e2e0:	ldr	x1, [x21, #24]
    e2e4:	cbz	x1, e2f4 <BZ2_bzclose@@Base+0x178>
    e2e8:	ldr	x8, [x20, #5080]
    e2ec:	ldr	x0, [x20, #5088]
    e2f0:	blr	x8
    e2f4:	ldr	x1, [x21, #32]
    e2f8:	cbz	x1, e308 <BZ2_bzclose@@Base+0x18c>
    e2fc:	ldr	x8, [x20, #5080]
    e300:	ldr	x0, [x20, #5088]
    e304:	blr	x8
    e308:	ldr	x1, [x21, #40]
    e30c:	cbnz	x1, e24c <BZ2_bzclose@@Base+0xd0>
    e310:	b	e258 <BZ2_bzclose@@Base+0xdc>

000000000000e314 <BZ2_bzerror@@Base>:
    e314:	ldr	w8, [x0, #5096]
    e318:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x10cec>
    e31c:	add	x9, x9, #0xd38
    e320:	and	w8, w8, w8, asr #31
    e324:	sub	x9, x9, w8, sxtw #3
    e328:	ldr	x0, [x9]
    e32c:	str	w8, [x1]
    e330:	ret
    e334:	ldp	w8, w9, [x0, #92]
    e338:	sxtw	x9, w9
    e33c:	cmp	w9, #0x1
    e340:	b.lt	e374 <BZ2_bzerror@@Base+0x60>  // b.tstop
    e344:	adrp	x13, 1f000 <BZ2_bzerror@@Base+0x10cec>
    e348:	ldr	w11, [x0, #648]
    e34c:	ldr	x13, [x13, #4024]
    e350:	mov	w10, wzr
    e354:	and	w12, w8, #0xff
    e358:	eor	w14, w12, w11, lsr #24
    e35c:	ldr	w14, [x13, w14, uxtw #2]
    e360:	add	w10, w10, #0x1
    e364:	cmp	w10, w9
    e368:	eor	w11, w14, w11, lsl #8
    e36c:	str	w11, [x0, #648]
    e370:	b.lt	e358 <BZ2_bzerror@@Base+0x44>  // b.tstop
    e374:	add	x10, x0, x8
    e378:	mov	w11, #0x1                   	// #1
    e37c:	cmp	w9, #0x3
    e380:	strb	w11, [x10, #128]
    e384:	b.eq	e3a4 <BZ2_bzerror@@Base+0x90>  // b.none
    e388:	cmp	w9, #0x2
    e38c:	b.eq	e3e0 <BZ2_bzerror@@Base+0xcc>  // b.none
    e390:	cmp	w9, #0x1
    e394:	b.ne	e408 <BZ2_bzerror@@Base+0xf4>  // b.any
    e398:	ldr	w10, [x0, #108]!
    e39c:	sub	x9, x0, #0x2c
    e3a0:	b	e474 <BZ2_bzerror@@Base+0x160>
    e3a4:	ldr	x9, [x0, #64]!
    e3a8:	mov	x11, x0
    e3ac:	ldrsw	x10, [x11, #44]!
    e3b0:	strb	w8, [x9, x10]
    e3b4:	ldrsw	x9, [x11]
    e3b8:	add	x9, x9, #0x1
    e3bc:	str	w9, [x11]
    e3c0:	ldr	x10, [x0]
    e3c4:	strb	w8, [x10, x9]
    e3c8:	ldr	w9, [x11]
    e3cc:	add	w10, w9, #0x1
    e3d0:	str	w10, [x11]
    e3d4:	mov	x9, x0
    e3d8:	mov	x0, x11
    e3dc:	b	e474 <BZ2_bzerror@@Base+0x160>
    e3e0:	ldr	x9, [x0, #64]!
    e3e4:	mov	x11, x0
    e3e8:	ldrsw	x10, [x11, #44]!
    e3ec:	strb	w8, [x9, x10]
    e3f0:	ldr	w10, [x11]
    e3f4:	mov	x9, x0
    e3f8:	mov	x0, x11
    e3fc:	add	w10, w10, #0x1
    e400:	str	w10, [x11]
    e404:	b	e474 <BZ2_bzerror@@Base+0x160>
    e408:	add	x9, x9, x0
    e40c:	mov	w10, #0x1                   	// #1
    e410:	strb	w10, [x9, #124]
    e414:	ldrsw	x10, [x0, #108]!
    e418:	mov	x9, x0
    e41c:	ldr	x11, [x9, #-44]!
    e420:	strb	w8, [x11, x10]
    e424:	ldrsw	x10, [x0]
    e428:	add	x10, x10, #0x1
    e42c:	str	w10, [x0]
    e430:	ldr	x11, [x9]
    e434:	strb	w8, [x11, x10]
    e438:	ldrsw	x10, [x0]
    e43c:	add	x10, x10, #0x1
    e440:	str	w10, [x0]
    e444:	ldr	x11, [x9]
    e448:	strb	w8, [x11, x10]
    e44c:	ldrsw	x10, [x0]
    e450:	add	x10, x10, #0x1
    e454:	str	w10, [x0]
    e458:	ldr	x11, [x9]
    e45c:	strb	w8, [x11, x10]
    e460:	ldr	w8, [x0]
    e464:	ldurb	w11, [x0, #-12]
    e468:	add	w10, w8, #0x1
    e46c:	sub	w8, w11, #0x4
    e470:	str	w10, [x0]
    e474:	ldr	x9, [x9]
    e478:	strb	w8, [x9, w10, sxtw]
    e47c:	ldr	w8, [x0]
    e480:	add	w8, w8, #0x1
    e484:	str	w8, [x0]
    e488:	ret

Disassembly of section .fini:

000000000000e48c <.fini>:
    e48c:	stp	x29, x30, [sp, #-16]!
    e490:	mov	x29, sp
    e494:	ldp	x29, x30, [sp], #16
    e498:	ret
