
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003088 <.init>:
    3088:	stp	x29, x30, [sp, #-16]!
    308c:	mov	x29, sp
    3090:	bl	35a0 <pthread_cond_timedwait@plt+0x10>
    3094:	ldp	x29, x30, [sp], #16
    3098:	ret

Disassembly of section .plt:

00000000000030a0 <memcpy@plt-0x20>:
    30a0:	stp	x16, x30, [sp, #-16]!
    30a4:	adrp	x16, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    30a8:	ldr	x17, [x16, #4088]
    30ac:	add	x16, x16, #0xff8
    30b0:	br	x17
    30b4:	nop
    30b8:	nop
    30bc:	nop

00000000000030c0 <memcpy@plt>:
    30c0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16]
    30c8:	add	x16, x16, #0x0
    30cc:	br	x17

00000000000030d0 <lzma_index_iter_rewind@plt>:
    30d0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #8]
    30d8:	add	x16, x16, #0x8
    30dc:	br	x17

00000000000030e0 <memmove@plt>:
    30e0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #16]
    30e8:	add	x16, x16, #0x10
    30ec:	br	x17

00000000000030f0 <pthread_sigmask@plt>:
    30f0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #24]
    30f8:	add	x16, x16, #0x18
    30fc:	br	x17

0000000000003100 <lzma_block_buffer_encode@plt>:
    3100:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #32]
    3108:	add	x16, x16, #0x20
    310c:	br	x17

0000000000003110 <lzma_check_is_supported@plt>:
    3110:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #40]
    3118:	add	x16, x16, #0x28
    311c:	br	x17

0000000000003120 <lzma_filter_flags_size@plt>:
    3120:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #48]
    3128:	add	x16, x16, #0x30
    312c:	br	x17

0000000000003130 <lzma_index_buffer_encode@plt>:
    3130:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #56]
    3138:	add	x16, x16, #0x38
    313c:	br	x17

0000000000003140 <lzma_stream_flags_compare@plt>:
    3140:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #64]
    3148:	add	x16, x16, #0x40
    314c:	br	x17

0000000000003150 <lzma_block_buffer_bound@plt>:
    3150:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #72]
    3158:	add	x16, x16, #0x48
    315c:	br	x17

0000000000003160 <lzma_index_hash_decode@plt>:
    3160:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #80]
    3168:	add	x16, x16, #0x50
    316c:	br	x17

0000000000003170 <__cxa_finalize@plt>:
    3170:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #88]
    3178:	add	x16, x16, #0x58
    317c:	br	x17

0000000000003180 <clock_gettime@plt>:
    3180:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #96]
    3188:	add	x16, x16, #0x60
    318c:	br	x17

0000000000003190 <lzma_block_header_size@plt>:
    3190:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #104]
    3198:	add	x16, x16, #0x68
    319c:	br	x17

00000000000031a0 <sigfillset@plt>:
    31a0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #112]
    31a8:	add	x16, x16, #0x70
    31ac:	br	x17

00000000000031b0 <lzma_index_memusage@plt>:
    31b0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #120]
    31b8:	add	x16, x16, #0x78
    31bc:	br	x17

00000000000031c0 <lzma_block_unpadded_size@plt>:
    31c0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #128]
    31c8:	add	x16, x16, #0x80
    31cc:	br	x17

00000000000031d0 <malloc@plt>:
    31d0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #136]
    31d8:	add	x16, x16, #0x88
    31dc:	br	x17

00000000000031e0 <lzma_index_hash_append@plt>:
    31e0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #144]
    31e8:	add	x16, x16, #0x90
    31ec:	br	x17

00000000000031f0 <lzma_crc32@plt>:
    31f0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #152]
    31f8:	add	x16, x16, #0x98
    31fc:	br	x17

0000000000003200 <lzma_index_checks@plt>:
    3200:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #160]
    3208:	add	x16, x16, #0xa0
    320c:	br	x17

0000000000003210 <pthread_condattr_destroy@plt>:
    3210:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #168]
    3218:	add	x16, x16, #0xa8
    321c:	br	x17

0000000000003220 <lzma_stream_buffer_encode@plt>:
    3220:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #176]
    3228:	add	x16, x16, #0xb0
    322c:	br	x17

0000000000003230 <pthread_cond_signal@plt>:
    3230:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #184]
    3238:	add	x16, x16, #0xb8
    323c:	br	x17

0000000000003240 <lzma_stream_footer_encode@plt>:
    3240:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #192]
    3248:	add	x16, x16, #0xc0
    324c:	br	x17

0000000000003250 <lzma_raw_encoder_memusage@plt>:
    3250:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #200]
    3258:	add	x16, x16, #0xc8
    325c:	br	x17

0000000000003260 <memset@plt>:
    3260:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #208]
    3268:	add	x16, x16, #0xd0
    326c:	br	x17

0000000000003270 <lzma_filters_copy@plt>:
    3270:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #216]
    3278:	add	x16, x16, #0xd8
    327c:	br	x17

0000000000003280 <lzma_properties_decode@plt>:
    3280:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #224]
    3288:	add	x16, x16, #0xe0
    328c:	br	x17

0000000000003290 <calloc@plt>:
    3290:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #232]
    3298:	add	x16, x16, #0xe8
    329c:	br	x17

00000000000032a0 <lzma_check_size@plt>:
    32a0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #240]
    32a8:	add	x16, x16, #0xf0
    32ac:	br	x17

00000000000032b0 <lzma_index_hash_init@plt>:
    32b0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #248]
    32b8:	add	x16, x16, #0xf8
    32bc:	br	x17

00000000000032c0 <lzma_crc64@plt>:
    32c0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #256]
    32c8:	add	x16, x16, #0x100
    32cc:	br	x17

00000000000032d0 <pthread_mutex_init@plt>:
    32d0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #264]
    32d8:	add	x16, x16, #0x108
    32dc:	br	x17

00000000000032e0 <pthread_create@plt>:
    32e0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #272]
    32e8:	add	x16, x16, #0x110
    32ec:	br	x17

00000000000032f0 <__gmon_start__@plt>:
    32f0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #280]
    32f8:	add	x16, x16, #0x118
    32fc:	br	x17

0000000000003300 <pthread_join@plt>:
    3300:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #288]
    3308:	add	x16, x16, #0x120
    330c:	br	x17

0000000000003310 <lzma_raw_decoder_memusage@plt>:
    3310:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #296]
    3318:	add	x16, x16, #0x128
    331c:	br	x17

0000000000003320 <sched_getaffinity@plt>:
    3320:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #304]
    3328:	add	x16, x16, #0x130
    332c:	br	x17

0000000000003330 <lzma_index_append@plt>:
    3330:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #312]
    3338:	add	x16, x16, #0x138
    333c:	br	x17

0000000000003340 <lzma_index_hash_end@plt>:
    3340:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #320]
    3348:	add	x16, x16, #0x140
    334c:	br	x17

0000000000003350 <lzma_end@plt>:
    3350:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #328]
    3358:	add	x16, x16, #0x148
    335c:	br	x17

0000000000003360 <memcmp@plt>:
    3360:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #336]
    3368:	add	x16, x16, #0x150
    336c:	br	x17

0000000000003370 <lzma_block_header_decode@plt>:
    3370:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #344]
    3378:	add	x16, x16, #0x158
    337c:	br	x17

0000000000003380 <lzma_filter_flags_encode@plt>:
    3380:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #352]
    3388:	add	x16, x16, #0x160
    338c:	br	x17

0000000000003390 <lzma_index_file_size@plt>:
    3390:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #360]
    3398:	add	x16, x16, #0x168
    339c:	br	x17

00000000000033a0 <lzma_properties_size@plt>:
    33a0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #368]
    33a8:	add	x16, x16, #0x170
    33ac:	br	x17

00000000000033b0 <free@plt>:
    33b0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #376]
    33b8:	add	x16, x16, #0x178
    33bc:	br	x17

00000000000033c0 <lzma_stream_header_encode@plt>:
    33c0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #384]
    33c8:	add	x16, x16, #0x180
    33cc:	br	x17

00000000000033d0 <pthread_cond_wait@plt>:
    33d0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #392]
    33d8:	add	x16, x16, #0x188
    33dc:	br	x17

00000000000033e0 <lzma_index_init@plt>:
    33e0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #400]
    33e8:	add	x16, x16, #0x190
    33ec:	br	x17

00000000000033f0 <lzma_vli_decode@plt>:
    33f0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #408]
    33f8:	add	x16, x16, #0x198
    33fc:	br	x17

0000000000003400 <pthread_condattr_init@plt>:
    3400:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #416]
    3408:	add	x16, x16, #0x1a0
    340c:	br	x17

0000000000003410 <lzma_index_end@plt>:
    3410:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #424]
    3418:	add	x16, x16, #0x1a8
    341c:	br	x17

0000000000003420 <__sched_cpucount@plt>:
    3420:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #432]
    3428:	add	x16, x16, #0x1b0
    342c:	br	x17

0000000000003430 <lzma_properties_encode@plt>:
    3430:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #440]
    3438:	add	x16, x16, #0x1b8
    343c:	br	x17

0000000000003440 <pthread_mutex_destroy@plt>:
    3440:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #448]
    3448:	add	x16, x16, #0x1c0
    344c:	br	x17

0000000000003450 <pthread_cond_init@plt>:
    3450:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #456]
    3458:	add	x16, x16, #0x1c8
    345c:	br	x17

0000000000003460 <lzma_stream_footer_decode@plt>:
    3460:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #464]
    3468:	add	x16, x16, #0x1d0
    346c:	br	x17

0000000000003470 <lzma_lzma_preset@plt>:
    3470:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #472]
    3478:	add	x16, x16, #0x1d8
    347c:	br	x17

0000000000003480 <lzma_vli_encode@plt>:
    3480:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #480]
    3488:	add	x16, x16, #0x1e0
    348c:	br	x17

0000000000003490 <lzma_index_iter_next@plt>:
    3490:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #488]
    3498:	add	x16, x16, #0x1e8
    349c:	br	x17

00000000000034a0 <sysconf@plt>:
    34a0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #496]
    34a8:	add	x16, x16, #0x1f0
    34ac:	br	x17

00000000000034b0 <lzma_vli_size@plt>:
    34b0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #504]
    34b8:	add	x16, x16, #0x1f8
    34bc:	br	x17

00000000000034c0 <pthread_condattr_setclock@plt>:
    34c0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #512]
    34c8:	add	x16, x16, #0x200
    34cc:	br	x17

00000000000034d0 <lzma_stream_encoder@plt>:
    34d0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #520]
    34d8:	add	x16, x16, #0x208
    34dc:	br	x17

00000000000034e0 <lzma_index_iter_init@plt>:
    34e0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #528]
    34e8:	add	x16, x16, #0x210
    34ec:	br	x17

00000000000034f0 <lzma_block_uncomp_encode@plt>:
    34f0:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #536]
    34f8:	add	x16, x16, #0x218
    34fc:	br	x17

0000000000003500 <lzma_index_hash_size@plt>:
    3500:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #544]
    3508:	add	x16, x16, #0x220
    350c:	br	x17

0000000000003510 <lzma_index_block_count@plt>:
    3510:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #552]
    3518:	add	x16, x16, #0x228
    351c:	br	x17

0000000000003520 <lzma_stream_header_decode@plt>:
    3520:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3524:	ldr	x17, [x16, #560]
    3528:	add	x16, x16, #0x230
    352c:	br	x17

0000000000003530 <lzma_filter_flags_decode@plt>:
    3530:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3534:	ldr	x17, [x16, #568]
    3538:	add	x16, x16, #0x238
    353c:	br	x17

0000000000003540 <lzma_index_size@plt>:
    3540:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3544:	ldr	x17, [x16, #576]
    3548:	add	x16, x16, #0x240
    354c:	br	x17

0000000000003550 <pthread_cond_destroy@plt>:
    3550:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3554:	ldr	x17, [x16, #584]
    3558:	add	x16, x16, #0x248
    355c:	br	x17

0000000000003560 <pthread_mutex_lock@plt>:
    3560:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3564:	ldr	x17, [x16, #592]
    3568:	add	x16, x16, #0x250
    356c:	br	x17

0000000000003570 <lzma_block_header_encode@plt>:
    3570:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3574:	ldr	x17, [x16, #600]
    3578:	add	x16, x16, #0x258
    357c:	br	x17

0000000000003580 <pthread_mutex_unlock@plt>:
    3580:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3584:	ldr	x17, [x16, #608]
    3588:	add	x16, x16, #0x260
    358c:	br	x17

0000000000003590 <pthread_cond_timedwait@plt>:
    3590:	adrp	x16, 39000 <memcpy@GLIBC_2.17>
    3594:	ldr	x17, [x16, #616]
    3598:	add	x16, x16, #0x268
    359c:	br	x17

Disassembly of section .text:

00000000000035a0 <lzma_version_number@@XZ_5.0-0x168>:
    35a0:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    35a4:	ldr	x0, [x0, #3960]
    35a8:	cbz	x0, 35b0 <pthread_cond_timedwait@plt+0x20>
    35ac:	b	32f0 <__gmon_start__@plt>
    35b0:	ret
    35b4:	nop
    35b8:	adrp	x0, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    35bc:	add	x0, x0, #0x278
    35c0:	adrp	x1, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    35c4:	add	x1, x1, #0x278
    35c8:	cmp	x1, x0
    35cc:	b.eq	35e4 <pthread_cond_timedwait@plt+0x54>  // b.none
    35d0:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    35d4:	ldr	x1, [x1, #3888]
    35d8:	cbz	x1, 35e4 <pthread_cond_timedwait@plt+0x54>
    35dc:	mov	x16, x1
    35e0:	br	x16
    35e4:	ret
    35e8:	adrp	x0, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    35ec:	add	x0, x0, #0x278
    35f0:	adrp	x1, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    35f4:	add	x1, x1, #0x278
    35f8:	sub	x1, x1, x0
    35fc:	lsr	x2, x1, #63
    3600:	add	x1, x2, x1, asr #3
    3604:	cmp	xzr, x1, asr #1
    3608:	asr	x1, x1, #1
    360c:	b.eq	3624 <pthread_cond_timedwait@plt+0x94>  // b.none
    3610:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    3614:	ldr	x2, [x2, #4032]
    3618:	cbz	x2, 3624 <pthread_cond_timedwait@plt+0x94>
    361c:	mov	x16, x2
    3620:	br	x16
    3624:	ret
    3628:	stp	x29, x30, [sp, #-32]!
    362c:	mov	x29, sp
    3630:	str	x19, [sp, #16]
    3634:	adrp	x19, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    3638:	ldrb	w0, [x19, #632]
    363c:	cbnz	w0, 3664 <pthread_cond_timedwait@plt+0xd4>
    3640:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    3644:	ldr	x0, [x0, #3904]
    3648:	cbz	x0, 3658 <pthread_cond_timedwait@plt+0xc8>
    364c:	adrp	x0, 39000 <lzma_mode_is_supported@@XZ_5.0+0x23c08>
    3650:	ldr	x0, [x0, #624]
    3654:	bl	3170 <__cxa_finalize@plt>
    3658:	bl	35b8 <pthread_cond_timedwait@plt+0x28>
    365c:	mov	w0, #0x1                   	// #1
    3660:	strb	w0, [x19, #632]
    3664:	ldr	x19, [sp, #16]
    3668:	ldp	x29, x30, [sp], #32
    366c:	ret
    3670:	b	35e8 <pthread_cond_timedwait@plt+0x58>
    3674:	nop
    3678:	stp	x29, x30, [sp, #-32]!
    367c:	mov	w0, #0x1e                  	// #30
    3680:	mov	x29, sp
    3684:	str	x19, [sp, #16]
    3688:	bl	34a0 <sysconf@plt>
    368c:	mov	x19, x0
    3690:	mov	w0, #0x55                  	// #85
    3694:	bl	34a0 <sysconf@plt>
    3698:	cmn	x19, #0x1
    369c:	ccmn	x0, #0x1, #0x4, ne  // ne = any
    36a0:	mul	x0, x19, x0
    36a4:	ldr	x19, [sp, #16]
    36a8:	csel	x0, x0, xzr, ne  // ne = any
    36ac:	ldp	x29, x30, [sp], #32
    36b0:	ret
    36b4:	nop
    36b8:	stp	x29, x30, [sp, #-160]!
    36bc:	mov	x1, #0x80                  	// #128
    36c0:	mov	w0, #0x0                   	// #0
    36c4:	mov	x29, sp
    36c8:	str	x19, [sp, #16]
    36cc:	add	x19, sp, #0x20
    36d0:	mov	x2, x19
    36d4:	bl	3320 <sched_getaffinity@plt>
    36d8:	mov	w1, w0
    36dc:	mov	w0, #0x0                   	// #0
    36e0:	cbz	w1, 36f0 <pthread_cond_timedwait@plt+0x160>
    36e4:	ldr	x19, [sp, #16]
    36e8:	ldp	x29, x30, [sp], #160
    36ec:	ret
    36f0:	mov	x1, x19
    36f4:	mov	x0, #0x80                  	// #128
    36f8:	bl	3420 <__sched_cpucount@plt>
    36fc:	ldr	x19, [sp, #16]
    3700:	ldp	x29, x30, [sp], #160
    3704:	ret

0000000000003708 <lzma_version_number@@XZ_5.0>:
    3708:	mov	w0, #0x3eca                	// #16074
    370c:	movk	w0, #0x2fb, lsl #16
    3710:	ret
    3714:	nop

0000000000003718 <lzma_version_string@@XZ_5.0>:
    3718:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    371c:	add	x0, x0, #0x140
    3720:	ret
    3724:	nop
    3728:	cmp	x0, #0x0
    372c:	mov	x3, x1
    3730:	mov	x1, #0x1                   	// #1
    3734:	csel	x2, x0, x1, ne  // ne = any
    3738:	cbz	x3, 3750 <lzma_version_string@@XZ_5.0+0x38>
    373c:	ldr	x4, [x3]
    3740:	cbz	x4, 3750 <lzma_version_string@@XZ_5.0+0x38>
    3744:	ldr	x0, [x3, #16]
    3748:	mov	x16, x4
    374c:	br	x16
    3750:	mov	x0, x2
    3754:	b	31d0 <malloc@plt>
    3758:	stp	x29, x30, [sp, #-32]!
    375c:	cmp	x0, #0x0
    3760:	mov	x2, x1
    3764:	mov	x29, sp
    3768:	stp	x19, x20, [sp, #16]
    376c:	mov	x1, #0x1                   	// #1
    3770:	csel	x19, x0, x1, ne  // ne = any
    3774:	cbz	x2, 37b0 <lzma_version_string@@XZ_5.0+0x98>
    3778:	ldr	x3, [x2]
    377c:	cbz	x3, 37b0 <lzma_version_string@@XZ_5.0+0x98>
    3780:	ldr	x0, [x2, #16]
    3784:	mov	x2, x19
    3788:	blr	x3
    378c:	mov	x20, x0
    3790:	cbz	x0, 37a0 <lzma_version_string@@XZ_5.0+0x88>
    3794:	mov	x2, x19
    3798:	mov	w1, #0x0                   	// #0
    379c:	bl	3260 <memset@plt>
    37a0:	mov	x0, x20
    37a4:	ldp	x19, x20, [sp, #16]
    37a8:	ldp	x29, x30, [sp], #32
    37ac:	ret
    37b0:	mov	x1, x19
    37b4:	mov	x0, #0x1                   	// #1
    37b8:	ldp	x19, x20, [sp, #16]
    37bc:	ldp	x29, x30, [sp], #32
    37c0:	b	3290 <calloc@plt>
    37c4:	nop
    37c8:	mov	x2, x1
    37cc:	mov	x1, x0
    37d0:	cbz	x2, 37e8 <lzma_version_string@@XZ_5.0+0xd0>
    37d4:	ldr	x3, [x2, #8]
    37d8:	cbz	x3, 37e8 <lzma_version_string@@XZ_5.0+0xd0>
    37dc:	ldr	x0, [x2, #16]
    37e0:	mov	x16, x3
    37e4:	br	x16
    37e8:	mov	x0, x1
    37ec:	b	33b0 <free@plt>
    37f0:	stp	x29, x30, [sp, #-64]!
    37f4:	mov	x29, sp
    37f8:	stp	x19, x20, [sp, #16]
    37fc:	stp	x21, x22, [sp, #32]
    3800:	mov	x22, x4
    3804:	ldr	x20, [x4]
    3808:	str	x23, [sp, #48]
    380c:	ldr	x21, [x1]
    3810:	sub	x19, x5, x20
    3814:	mov	x23, x1
    3818:	sub	x2, x2, x21
    381c:	add	x1, x0, x21
    3820:	cmp	x2, x19
    3824:	add	x0, x3, x20
    3828:	csel	x19, x2, x19, ls  // ls = plast
    382c:	mov	x2, x19
    3830:	add	x20, x20, x19
    3834:	bl	30c0 <memcpy@plt>
    3838:	add	x21, x21, x19
    383c:	mov	x0, x19
    3840:	str	x20, [x22]
    3844:	ldp	x19, x20, [sp, #16]
    3848:	str	x21, [x23]
    384c:	ldp	x21, x22, [sp, #32]
    3850:	ldr	x23, [sp, #48]
    3854:	ldp	x29, x30, [sp], #64
    3858:	ret
    385c:	nop
    3860:	stp	x29, x30, [sp, #-48]!
    3864:	mov	x29, sp
    3868:	stp	x19, x20, [sp, #16]
    386c:	mov	x19, x0
    3870:	mov	x20, x2
    3874:	ldr	x0, [x0, #16]
    3878:	ldr	x3, [x2, #8]
    387c:	str	x21, [sp, #32]
    3880:	cmp	x0, #0x0
    3884:	mov	x21, x1
    3888:	ccmp	x3, x0, #0x4, ne  // ne = any
    388c:	b.ne	38bc <lzma_version_string@@XZ_5.0+0x1a4>  // b.any
    3890:	ldr	x0, [x20]
    3894:	stp	x0, x3, [x19, #8]
    3898:	cbz	x3, 38f4 <lzma_version_string@@XZ_5.0+0x1dc>
    389c:	mov	x2, x20
    38a0:	mov	x1, x21
    38a4:	mov	x0, x19
    38a8:	mov	x16, x3
    38ac:	ldp	x19, x20, [sp, #16]
    38b0:	ldr	x21, [sp, #32]
    38b4:	ldp	x29, x30, [sp], #48
    38b8:	br	x16
    38bc:	ldr	x2, [x19, #32]
    38c0:	ldr	x3, [x19]
    38c4:	cbz	x2, 3908 <lzma_version_string@@XZ_5.0+0x1f0>
    38c8:	mov	x0, x3
    38cc:	blr	x2
    38d0:	movi	v0.4s, #0x0
    38d4:	str	xzr, [x19]
    38d8:	stur	q0, [x19, #24]
    38dc:	stur	q0, [x19, #40]
    38e0:	stur	q0, [x19, #56]
    38e4:	ldr	x3, [x20, #8]
    38e8:	ldr	x0, [x20]
    38ec:	stp	x0, x3, [x19, #8]
    38f0:	cbnz	x3, 389c <lzma_version_string@@XZ_5.0+0x184>
    38f4:	mov	w0, #0x0                   	// #0
    38f8:	ldp	x19, x20, [sp, #16]
    38fc:	ldr	x21, [sp, #32]
    3900:	ldp	x29, x30, [sp], #48
    3904:	ret
    3908:	cbz	x1, 3924 <lzma_version_string@@XZ_5.0+0x20c>
    390c:	ldr	x2, [x1, #8]
    3910:	cbz	x2, 3924 <lzma_version_string@@XZ_5.0+0x20c>
    3914:	ldr	x0, [x21, #16]
    3918:	mov	x1, x3
    391c:	blr	x2
    3920:	b	38d0 <lzma_version_string@@XZ_5.0+0x1b8>
    3924:	mov	x0, x3
    3928:	bl	33b0 <free@plt>
    392c:	b	38d0 <lzma_version_string@@XZ_5.0+0x1b8>
    3930:	mov	x4, x0
    3934:	mov	x3, x2
    3938:	ldr	x0, [x2]
    393c:	ldr	x2, [x4, #8]
    3940:	cmp	x0, x2
    3944:	b.ne	3964 <lzma_version_string@@XZ_5.0+0x24c>  // b.any
    3948:	cmn	x0, #0x1
    394c:	b.eq	396c <lzma_version_string@@XZ_5.0+0x254>  // b.none
    3950:	ldr	x0, [x4]
    3954:	mov	x2, #0x0                   	// #0
    3958:	ldr	x4, [x4, #64]
    395c:	mov	x16, x4
    3960:	br	x16
    3964:	mov	w0, #0xb                   	// #11
    3968:	ret
    396c:	mov	w0, #0x0                   	// #0
    3970:	ret
    3974:	nop
    3978:	stp	x29, x30, [sp, #-32]!
    397c:	mov	x29, sp
    3980:	ldr	x2, [x0, #16]
    3984:	str	x19, [sp, #16]
    3988:	mov	x19, x0
    398c:	cbz	x2, 39c4 <lzma_version_string@@XZ_5.0+0x2ac>
    3990:	ldr	x2, [x0, #32]
    3994:	ldr	x3, [x0]
    3998:	cbz	x2, 39d0 <lzma_version_string@@XZ_5.0+0x2b8>
    399c:	mov	x0, x3
    39a0:	blr	x2
    39a4:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    39a8:	str	xzr, [x19]
    39ac:	movi	v0.4s, #0x0
    39b0:	ldr	q1, [x0, #336]
    39b4:	stur	q0, [x19, #24]
    39b8:	stur	q1, [x19, #8]
    39bc:	stur	q0, [x19, #40]
    39c0:	stur	q0, [x19, #56]
    39c4:	ldr	x19, [sp, #16]
    39c8:	ldp	x29, x30, [sp], #32
    39cc:	ret
    39d0:	mov	x0, x1
    39d4:	cbz	x1, 39f0 <lzma_version_string@@XZ_5.0+0x2d8>
    39d8:	ldr	x2, [x1, #8]
    39dc:	cbz	x2, 39f0 <lzma_version_string@@XZ_5.0+0x2d8>
    39e0:	ldr	x0, [x0, #16]
    39e4:	mov	x1, x3
    39e8:	blr	x2
    39ec:	b	39a4 <lzma_version_string@@XZ_5.0+0x28c>
    39f0:	mov	x0, x3
    39f4:	bl	33b0 <free@plt>
    39f8:	b	39a4 <lzma_version_string@@XZ_5.0+0x28c>
    39fc:	nop
    3a00:	cbz	x0, 3aa8 <lzma_version_string@@XZ_5.0+0x390>
    3a04:	stp	x29, x30, [sp, #-32]!
    3a08:	mov	x29, sp
    3a0c:	ldr	x1, [x0, #56]
    3a10:	str	x19, [sp, #16]
    3a14:	mov	x19, x0
    3a18:	cbz	x1, 3a48 <lzma_version_string@@XZ_5.0+0x330>
    3a1c:	str	wzr, [x1, #88]
    3a20:	mov	w0, #0x0                   	// #0
    3a24:	strb	wzr, [x1, #92]
    3a28:	ldr	x1, [x19, #56]
    3a2c:	str	wzr, [x1, #72]
    3a30:	strb	wzr, [x1, #93]
    3a34:	str	xzr, [x19, #16]
    3a38:	str	xzr, [x19, #40]
    3a3c:	ldr	x19, [sp, #16]
    3a40:	ldp	x29, x30, [sp], #32
    3a44:	ret
    3a48:	ldr	x0, [x0, #48]
    3a4c:	cbz	x0, 3a98 <lzma_version_string@@XZ_5.0+0x380>
    3a50:	ldr	x3, [x0]
    3a54:	cbz	x3, 3a98 <lzma_version_string@@XZ_5.0+0x380>
    3a58:	ldr	x0, [x0, #16]
    3a5c:	mov	x1, #0x1                   	// #1
    3a60:	mov	x2, #0x60                  	// #96
    3a64:	blr	x3
    3a68:	mov	x1, x0
    3a6c:	str	x1, [x19, #56]
    3a70:	cbz	x1, 3ab0 <lzma_version_string@@XZ_5.0+0x398>
    3a74:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    3a78:	str	xzr, [x1]
    3a7c:	movi	v0.4s, #0x0
    3a80:	ldr	q1, [x0, #336]
    3a84:	stur	q0, [x1, #24]
    3a88:	stur	q1, [x1, #8]
    3a8c:	stur	q0, [x1, #40]
    3a90:	stur	q0, [x1, #56]
    3a94:	b	3a1c <lzma_version_string@@XZ_5.0+0x304>
    3a98:	mov	x0, #0x60                  	// #96
    3a9c:	bl	31d0 <malloc@plt>
    3aa0:	mov	x1, x0
    3aa4:	b	3a6c <lzma_version_string@@XZ_5.0+0x354>
    3aa8:	mov	w0, #0xb                   	// #11
    3aac:	ret
    3ab0:	mov	w0, #0x5                   	// #5
    3ab4:	b	3a3c <lzma_version_string@@XZ_5.0+0x324>

0000000000003ab8 <lzma_code@@XZ_5.0>:
    3ab8:	sub	sp, sp, #0x40
    3abc:	mov	w3, w1
    3ac0:	stp	x29, x30, [sp, #16]
    3ac4:	add	x29, sp, #0x10
    3ac8:	ldr	x2, [x0]
    3acc:	str	x19, [sp, #32]
    3ad0:	mov	x19, x0
    3ad4:	cbz	x2, 3c30 <lzma_code@@XZ_5.0+0x178>
    3ad8:	ldr	x5, [x19, #24]
    3adc:	cbz	x5, 3c44 <lzma_code@@XZ_5.0+0x18c>
    3ae0:	ldr	x6, [x19, #56]
    3ae4:	cbz	x6, 3c54 <lzma_code@@XZ_5.0+0x19c>
    3ae8:	ldr	x8, [x6, #24]
    3aec:	mov	w0, #0xb                   	// #11
    3af0:	cmp	x8, #0x0
    3af4:	ccmp	w3, #0x4, #0x2, ne  // ne = any
    3af8:	b.hi	3c20 <lzma_code@@XZ_5.0+0x168>  // b.pmore
    3afc:	add	x1, x6, w3, uxtw
    3b00:	ldrb	w1, [x1, #88]
    3b04:	cbz	w1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b08:	ldr	x1, [x19, #64]
    3b0c:	mov	w0, #0x8                   	// #8
    3b10:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b14:	ldr	x1, [x19, #72]
    3b18:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b1c:	ldr	x1, [x19, #80]
    3b20:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b24:	ldr	x1, [x19, #88]
    3b28:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b2c:	ldr	x1, [x19, #96]
    3b30:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b34:	ldr	x1, [x19, #104]
    3b38:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b3c:	ldr	x1, [x19, #112]
    3b40:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b44:	ldr	x1, [x19, #120]
    3b48:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b4c:	ldr	x1, [x19, #128]
    3b50:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3b54:	ldr	w0, [x6, #72]
    3b58:	cmp	w0, #0x3
    3b5c:	b.eq	3cd0 <lzma_code@@XZ_5.0+0x218>  // b.none
    3b60:	b.hi	3c8c <lzma_code@@XZ_5.0+0x1d4>  // b.pmore
    3b64:	cmp	w0, #0x1
    3b68:	b.eq	3cc0 <lzma_code@@XZ_5.0+0x208>  // b.none
    3b6c:	cmp	w0, #0x2
    3b70:	b.ne	3c5c <lzma_code@@XZ_5.0+0x1a4>  // b.any
    3b74:	cmp	w3, #0x2
    3b78:	mov	w0, #0xb                   	// #11
    3b7c:	b.ne	3c20 <lzma_code@@XZ_5.0+0x168>  // b.any
    3b80:	ldr	x4, [x19, #8]
    3b84:	ldr	x1, [x6, #80]
    3b88:	cmp	x1, x4
    3b8c:	b.ne	3c20 <lzma_code@@XZ_5.0+0x168>  // b.any
    3b90:	ldr	x0, [x6]
    3b94:	stp	xzr, xzr, [sp, #48]
    3b98:	add	x6, sp, #0x38
    3b9c:	ldr	x7, [x19, #32]
    3ba0:	ldr	x1, [x19, #48]
    3ba4:	str	w3, [sp]
    3ba8:	add	x3, sp, #0x30
    3bac:	blr	x8
    3bb0:	cmp	w0, #0x4
    3bb4:	ldp	x8, x1, [x19]
    3bb8:	ldp	x7, x6, [x19, #16]
    3bbc:	ldp	x5, x4, [x19, #32]
    3bc0:	ldp	x2, x3, [sp, #48]
    3bc4:	ldr	x9, [x19, #56]
    3bc8:	sub	x1, x1, x2
    3bcc:	add	x8, x8, x2
    3bd0:	add	x7, x7, x2
    3bd4:	add	x6, x6, x3
    3bd8:	sub	x5, x5, x3
    3bdc:	add	x4, x4, x3
    3be0:	stp	x8, x1, [x19]
    3be4:	stp	x7, x6, [x19, #16]
    3be8:	stp	x5, x4, [x19, #32]
    3bec:	str	x1, [x9, #80]
    3bf0:	b.hi	3ca4 <lzma_code@@XZ_5.0+0x1ec>  // b.pmore
    3bf4:	cmp	w0, #0x1
    3bf8:	b.hi	3c1c <lzma_code@@XZ_5.0+0x164>  // b.pmore
    3bfc:	cbz	w0, 3cfc <lzma_code@@XZ_5.0+0x244>
    3c00:	ldr	w2, [x9, #72]
    3c04:	mov	w1, #0x5                   	// #5
    3c08:	sub	w3, w2, #0x1
    3c0c:	cmp	w3, #0x1
    3c10:	ccmp	w2, #0x4, #0x4, hi  // hi = pmore
    3c14:	csel	w1, wzr, w1, eq  // eq = none
    3c18:	str	w1, [x9, #72]
    3c1c:	strb	wzr, [x9, #93]
    3c20:	ldp	x29, x30, [sp, #16]
    3c24:	ldr	x19, [sp, #32]
    3c28:	add	sp, sp, #0x40
    3c2c:	ret
    3c30:	ldr	x1, [x19, #8]
    3c34:	mov	w0, #0xb                   	// #11
    3c38:	cbnz	x1, 3c20 <lzma_code@@XZ_5.0+0x168>
    3c3c:	ldr	x5, [x19, #24]
    3c40:	cbnz	x5, 3ae0 <lzma_code@@XZ_5.0+0x28>
    3c44:	ldr	x1, [x19, #32]
    3c48:	mov	w0, #0xb                   	// #11
    3c4c:	cbz	x1, 3ae0 <lzma_code@@XZ_5.0+0x28>
    3c50:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3c54:	mov	w0, #0xb                   	// #11
    3c58:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3c5c:	cbnz	w0, 3c54 <lzma_code@@XZ_5.0+0x19c>
    3c60:	cmp	w3, #0x3
    3c64:	ldr	x4, [x19, #8]
    3c68:	b.eq	3c84 <lzma_code@@XZ_5.0+0x1cc>  // b.none
    3c6c:	cmp	w3, #0x4
    3c70:	b.eq	3c84 <lzma_code@@XZ_5.0+0x1cc>  // b.none
    3c74:	cmp	w3, #0x1
    3c78:	b.eq	3d18 <lzma_code@@XZ_5.0+0x260>  // b.none
    3c7c:	cmp	w3, #0x2
    3c80:	b.ne	3b90 <lzma_code@@XZ_5.0+0xd8>  // b.any
    3c84:	str	w3, [x6, #72]
    3c88:	b	3b90 <lzma_code@@XZ_5.0+0xd8>
    3c8c:	cmp	w0, #0x4
    3c90:	b.eq	3ce0 <lzma_code@@XZ_5.0+0x228>  // b.none
    3c94:	cmp	w0, #0x5
    3c98:	mov	w0, #0xb                   	// #11
    3c9c:	csinc	w0, w0, wzr, ne  // ne = any
    3ca0:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3ca4:	cmp	w0, #0x6
    3ca8:	b.eq	3c1c <lzma_code@@XZ_5.0+0x164>  // b.none
    3cac:	cmp	w0, #0x20
    3cb0:	b.ne	3cf0 <lzma_code@@XZ_5.0+0x238>  // b.any
    3cb4:	mov	w0, #0x0                   	// #0
    3cb8:	strb	wzr, [x9, #93]
    3cbc:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3cc0:	cmp	w3, #0x1
    3cc4:	mov	w0, #0xb                   	// #11
    3cc8:	b.eq	3b80 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3ccc:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3cd0:	cmp	w3, #0x3
    3cd4:	mov	w0, #0xb                   	// #11
    3cd8:	b.eq	3b80 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3cdc:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3ce0:	cmp	w3, #0x4
    3ce4:	mov	w0, #0xb                   	// #11
    3ce8:	b.eq	3b80 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3cec:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3cf0:	mov	w1, #0x6                   	// #6
    3cf4:	str	w1, [x9, #72]
    3cf8:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3cfc:	orr	x2, x2, x3
    3d00:	cbnz	x2, 3c1c <lzma_code@@XZ_5.0+0x164>
    3d04:	ldrb	w1, [x9, #93]
    3d08:	cbnz	w1, 3d24 <lzma_code@@XZ_5.0+0x26c>
    3d0c:	mov	w1, #0x1                   	// #1
    3d10:	strb	w1, [x9, #93]
    3d14:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3d18:	mov	w0, #0x1                   	// #1
    3d1c:	str	w0, [x6, #72]
    3d20:	b	3b90 <lzma_code@@XZ_5.0+0xd8>
    3d24:	mov	w0, #0xa                   	// #10
    3d28:	b	3c20 <lzma_code@@XZ_5.0+0x168>
    3d2c:	nop

0000000000003d30 <lzma_end@@XZ_5.0>:
    3d30:	cbz	x0, 3db8 <lzma_end@@XZ_5.0+0x88>
    3d34:	stp	x29, x30, [sp, #-32]!
    3d38:	mov	x29, sp
    3d3c:	stp	x19, x20, [sp, #16]
    3d40:	mov	x19, x0
    3d44:	ldr	x20, [x0, #56]
    3d48:	cbz	x20, 3dac <lzma_end@@XZ_5.0+0x7c>
    3d4c:	ldr	x1, [x0, #48]
    3d50:	ldr	x0, [x20, #16]
    3d54:	cbz	x0, 3d90 <lzma_end@@XZ_5.0+0x60>
    3d58:	ldr	x2, [x20, #32]
    3d5c:	ldr	x3, [x20]
    3d60:	cbz	x2, 3dcc <lzma_end@@XZ_5.0+0x9c>
    3d64:	mov	x0, x3
    3d68:	blr	x2
    3d6c:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    3d70:	str	xzr, [x20]
    3d74:	movi	v0.4s, #0x0
    3d78:	ldr	q1, [x0, #336]
    3d7c:	stur	q0, [x20, #24]
    3d80:	stur	q1, [x20, #8]
    3d84:	stur	q0, [x20, #40]
    3d88:	stur	q0, [x20, #56]
    3d8c:	ldp	x1, x20, [x19, #48]
    3d90:	cbz	x1, 3dbc <lzma_end@@XZ_5.0+0x8c>
    3d94:	ldr	x2, [x1, #8]
    3d98:	cbz	x2, 3dbc <lzma_end@@XZ_5.0+0x8c>
    3d9c:	ldr	x0, [x1, #16]
    3da0:	mov	x1, x20
    3da4:	blr	x2
    3da8:	str	xzr, [x19, #56]
    3dac:	ldp	x19, x20, [sp, #16]
    3db0:	ldp	x29, x30, [sp], #32
    3db4:	ret
    3db8:	ret
    3dbc:	mov	x0, x20
    3dc0:	bl	33b0 <free@plt>
    3dc4:	str	xzr, [x19, #56]
    3dc8:	b	3dac <lzma_end@@XZ_5.0+0x7c>
    3dcc:	cbz	x1, 3de8 <lzma_end@@XZ_5.0+0xb8>
    3dd0:	ldr	x2, [x1, #8]
    3dd4:	cbz	x2, 3de8 <lzma_end@@XZ_5.0+0xb8>
    3dd8:	ldr	x0, [x1, #16]
    3ddc:	mov	x1, x3
    3de0:	blr	x2
    3de4:	b	3d6c <lzma_end@@XZ_5.0+0x3c>
    3de8:	mov	x0, x3
    3dec:	bl	33b0 <free@plt>
    3df0:	b	3d6c <lzma_end@@XZ_5.0+0x3c>
    3df4:	nop

0000000000003df8 <lzma_get_progress@@XZ_5.2>:
    3df8:	ldr	x6, [x0, #56]
    3dfc:	mov	x4, x1
    3e00:	ldr	x5, [x6, #40]
    3e04:	cbz	x5, 3e14 <lzma_get_progress@@XZ_5.2+0x1c>
    3e08:	ldr	x0, [x6]
    3e0c:	mov	x16, x5
    3e10:	br	x16
    3e14:	ldr	x1, [x0, #16]
    3e18:	str	x1, [x4]
    3e1c:	ldr	x0, [x0, #40]
    3e20:	str	x0, [x2]
    3e24:	ret

0000000000003e28 <lzma_get_check@@XZ_5.0>:
    3e28:	ldr	x0, [x0, #56]
    3e2c:	ldr	x1, [x0, #48]
    3e30:	cbz	x1, 3e40 <lzma_get_check@@XZ_5.0+0x18>
    3e34:	ldr	x0, [x0]
    3e38:	mov	x16, x1
    3e3c:	br	x16
    3e40:	mov	w0, #0x0                   	// #0
    3e44:	ret

0000000000003e48 <lzma_memusage@@XZ_5.0>:
    3e48:	cbz	x0, 3e94 <lzma_memusage@@XZ_5.0+0x4c>
    3e4c:	ldr	x0, [x0, #56]
    3e50:	cbz	x0, 3e94 <lzma_memusage@@XZ_5.0+0x4c>
    3e54:	ldr	x4, [x0, #56]
    3e58:	cbz	x4, 3e94 <lzma_memusage@@XZ_5.0+0x4c>
    3e5c:	stp	x29, x30, [sp, #-32]!
    3e60:	mov	x3, #0x0                   	// #0
    3e64:	mov	x29, sp
    3e68:	ldr	x0, [x0]
    3e6c:	add	x2, sp, #0x18
    3e70:	add	x1, sp, #0x10
    3e74:	blr	x4
    3e78:	cbnz	w0, 3e88 <lzma_memusage@@XZ_5.0+0x40>
    3e7c:	ldr	x0, [sp, #16]
    3e80:	ldp	x29, x30, [sp], #32
    3e84:	ret
    3e88:	mov	x0, #0x0                   	// #0
    3e8c:	ldp	x29, x30, [sp], #32
    3e90:	ret
    3e94:	mov	x0, #0x0                   	// #0
    3e98:	ret
    3e9c:	nop

0000000000003ea0 <lzma_memlimit_get@@XZ_5.0>:
    3ea0:	cbz	x0, 3eec <lzma_memlimit_get@@XZ_5.0+0x4c>
    3ea4:	ldr	x0, [x0, #56]
    3ea8:	cbz	x0, 3eec <lzma_memlimit_get@@XZ_5.0+0x4c>
    3eac:	ldr	x4, [x0, #56]
    3eb0:	cbz	x4, 3eec <lzma_memlimit_get@@XZ_5.0+0x4c>
    3eb4:	stp	x29, x30, [sp, #-32]!
    3eb8:	mov	x3, #0x0                   	// #0
    3ebc:	mov	x29, sp
    3ec0:	ldr	x0, [x0]
    3ec4:	add	x2, sp, #0x10
    3ec8:	add	x1, sp, #0x18
    3ecc:	blr	x4
    3ed0:	cbnz	w0, 3ee0 <lzma_memlimit_get@@XZ_5.0+0x40>
    3ed4:	ldr	x0, [sp, #16]
    3ed8:	ldp	x29, x30, [sp], #32
    3edc:	ret
    3ee0:	mov	x0, #0x0                   	// #0
    3ee4:	ldp	x29, x30, [sp], #32
    3ee8:	ret
    3eec:	mov	x0, #0x0                   	// #0
    3ef0:	ret
    3ef4:	nop

0000000000003ef8 <lzma_memlimit_set@@XZ_5.0>:
    3ef8:	cbz	x0, 3f34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3efc:	ldr	x0, [x0, #56]
    3f00:	cbz	x0, 3f34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3f04:	ldr	x4, [x0, #56]
    3f08:	cbz	x4, 3f34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3f0c:	stp	x29, x30, [sp, #-32]!
    3f10:	cmp	x1, #0x0
    3f14:	csinc	x3, x1, xzr, ne  // ne = any
    3f18:	mov	x29, sp
    3f1c:	ldr	x0, [x0]
    3f20:	add	x2, sp, #0x10
    3f24:	add	x1, sp, #0x18
    3f28:	blr	x4
    3f2c:	ldp	x29, x30, [sp], #32
    3f30:	ret
    3f34:	mov	w0, #0xb                   	// #11
    3f38:	ret
    3f3c:	nop

0000000000003f40 <lzma_block_unpadded_size@@XZ_5.0>:
    3f40:	cbz	x0, 3fe4 <lzma_block_unpadded_size@@XZ_5.0+0xa4>
    3f44:	mov	x1, x0
    3f48:	mov	x0, #0x0                   	// #0
    3f4c:	ldr	w2, [x1]
    3f50:	cmp	w2, #0x1
    3f54:	b.hi	3f80 <lzma_block_unpadded_size@@XZ_5.0+0x40>  // b.pmore
    3f58:	stp	x29, x30, [sp, #-32]!
    3f5c:	mov	x29, sp
    3f60:	str	x19, [sp, #16]
    3f64:	ldr	w19, [x1, #4]
    3f68:	sub	w2, w19, #0x8
    3f6c:	cmp	w2, #0x3f8
    3f70:	b.ls	3f84 <lzma_block_unpadded_size@@XZ_5.0+0x44>  // b.plast
    3f74:	ldr	x19, [sp, #16]
    3f78:	ldp	x29, x30, [sp], #32
    3f7c:	ret
    3f80:	ret
    3f84:	tst	x19, #0x3
    3f88:	b.ne	3f74 <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.any
    3f8c:	ldr	x0, [x1, #16]
    3f90:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    3f94:	mov	x3, #0x7ffffffffffffffe    	// #9223372036854775806
    3f98:	cmp	x0, #0x0
    3f9c:	add	x2, x0, x2
    3fa0:	ccmp	x2, x3, #0x0, ne  // ne = any
    3fa4:	b.hi	3fb0 <lzma_block_unpadded_size@@XZ_5.0+0x70>  // b.pmore
    3fa8:	mov	x0, #0x0                   	// #0
    3fac:	b	3f74 <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3fb0:	ldr	w1, [x1, #8]
    3fb4:	cmp	w1, #0xf
    3fb8:	b.hi	3fa8 <lzma_block_unpadded_size@@XZ_5.0+0x68>  // b.pmore
    3fbc:	cmn	x0, #0x1
    3fc0:	b.eq	3f74 <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.none
    3fc4:	add	x19, x0, w19, uxtw
    3fc8:	mov	w0, w1
    3fcc:	bl	32a0 <lzma_check_size@plt>
    3fd0:	add	x0, x19, w0, uxtw
    3fd4:	mov	x1, #0x7ffffffffffffffc    	// #9223372036854775804
    3fd8:	cmp	x0, x1
    3fdc:	csel	x0, x0, xzr, ls  // ls = plast
    3fe0:	b	3f74 <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3fe4:	mov	x0, #0x0                   	// #0
    3fe8:	ret
    3fec:	nop

0000000000003ff0 <lzma_block_compressed_size@@XZ_5.0>:
    3ff0:	stp	x29, x30, [sp, #-32]!
    3ff4:	mov	x29, sp
    3ff8:	stp	x19, x20, [sp, #16]
    3ffc:	mov	x19, x1
    4000:	mov	x20, x0
    4004:	bl	31c0 <lzma_block_unpadded_size@plt>
    4008:	cbz	x0, 4054 <lzma_block_compressed_size@@XZ_5.0+0x64>
    400c:	ldr	w0, [x20, #8]
    4010:	bl	32a0 <lzma_check_size@plt>
    4014:	mov	w1, w0
    4018:	ldr	w2, [x20, #4]
    401c:	mov	w0, #0x9                   	// #9
    4020:	add	w1, w1, w2
    4024:	cmp	x1, x19
    4028:	b.cs	4048 <lzma_block_compressed_size@@XZ_5.0+0x58>  // b.hs, b.nlast
    402c:	ldr	x2, [x20, #16]
    4030:	sub	x19, x19, x1
    4034:	cmp	x2, x19
    4038:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    403c:	b.ne	4048 <lzma_block_compressed_size@@XZ_5.0+0x58>  // b.any
    4040:	mov	w0, #0x0                   	// #0
    4044:	str	x19, [x20, #16]
    4048:	ldp	x19, x20, [sp, #16]
    404c:	ldp	x29, x30, [sp], #32
    4050:	ret
    4054:	mov	w0, #0xb                   	// #11
    4058:	ldp	x19, x20, [sp, #16]
    405c:	ldp	x29, x30, [sp], #32
    4060:	ret
    4064:	nop

0000000000004068 <lzma_block_total_size@@XZ_5.0>:
    4068:	stp	x29, x30, [sp, #-16]!
    406c:	mov	x29, sp
    4070:	bl	31c0 <lzma_block_unpadded_size@plt>
    4074:	add	x1, x0, #0x3
    4078:	cmn	x0, #0x1
    407c:	and	x1, x1, #0xfffffffffffffffc
    4080:	csel	x0, x1, x0, ne  // ne = any
    4084:	ldp	x29, x30, [sp], #16
    4088:	ret
    408c:	nop
    4090:	stp	x29, x30, [sp, #-32]!
    4094:	mov	x29, sp
    4098:	stp	x19, x20, [sp, #16]
    409c:	add	x20, x0, #0x50
    40a0:	mov	x19, x0
    40a4:	mov	x0, x20
    40a8:	bl	3470 <lzma_lzma_preset@plt>
    40ac:	tst	w0, #0xff
    40b0:	b.ne	40d4 <lzma_block_total_size@@XZ_5.0+0x6c>  // b.any
    40b4:	mov	x2, #0x21                  	// #33
    40b8:	mov	x1, #0xffffffffffffffff    	// #-1
    40bc:	stp	x2, x20, [x19]
    40c0:	mov	w0, #0x0                   	// #0
    40c4:	str	x1, [x19, #16]
    40c8:	ldp	x19, x20, [sp, #16]
    40cc:	ldp	x29, x30, [sp], #32
    40d0:	ret
    40d4:	mov	w0, #0x1                   	// #1
    40d8:	ldp	x19, x20, [sp, #16]
    40dc:	ldp	x29, x30, [sp], #32
    40e0:	ret
    40e4:	nop

00000000000040e8 <lzma_filters_copy@@XZ_5.0>:
    40e8:	stp	x29, x30, [sp, #-64]!
    40ec:	cmp	x0, #0x0
    40f0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    40f4:	mov	x29, sp
    40f8:	str	x23, [sp, #48]
    40fc:	mov	w23, #0xb                   	// #11
    4100:	b.eq	41c4 <lzma_filters_copy@@XZ_5.0+0xdc>  // b.none
    4104:	stp	x21, x22, [sp, #32]
    4108:	mov	x21, x0
    410c:	ldr	x0, [x0]
    4110:	stp	x19, x20, [sp, #16]
    4114:	mov	x20, x1
    4118:	cmn	x0, #0x1
    411c:	b.eq	43d8 <lzma_filters_copy@@XZ_5.0+0x2f0>  // b.none
    4120:	ldr	x1, [x21, #8]
    4124:	str	x0, [x20]
    4128:	mov	x22, x2
    412c:	cbnz	x1, 41d4 <lzma_filters_copy@@XZ_5.0+0xec>
    4130:	str	xzr, [x20, #8]
    4134:	ldr	x0, [x21, #16]
    4138:	cmn	x0, #0x1
    413c:	b.eq	44c4 <lzma_filters_copy@@XZ_5.0+0x3dc>  // b.none
    4140:	ldr	x1, [x21, #24]
    4144:	str	x0, [x20, #16]
    4148:	cbnz	x1, 424c <lzma_filters_copy@@XZ_5.0+0x164>
    414c:	str	xzr, [x20, #24]
    4150:	ldr	x0, [x21, #32]
    4154:	cmn	x0, #0x1
    4158:	b.eq	44f0 <lzma_filters_copy@@XZ_5.0+0x408>  // b.none
    415c:	ldr	x1, [x21, #40]
    4160:	str	x0, [x20, #32]
    4164:	cbnz	x1, 42b8 <lzma_filters_copy@@XZ_5.0+0x1d0>
    4168:	str	xzr, [x20, #40]
    416c:	ldr	x0, [x21, #48]
    4170:	cmn	x0, #0x1
    4174:	b.eq	43d0 <lzma_filters_copy@@XZ_5.0+0x2e8>  // b.none
    4178:	ldr	x1, [x21, #56]
    417c:	str	x0, [x20, #48]
    4180:	cbnz	x1, 4334 <lzma_filters_copy@@XZ_5.0+0x24c>
    4184:	str	xzr, [x20, #56]
    4188:	ldr	x0, [x21, #64]
    418c:	mov	w23, #0x8                   	// #8
    4190:	mov	x19, #0x3                   	// #3
    4194:	cmn	x0, #0x1
    4198:	b.eq	4498 <lzma_filters_copy@@XZ_5.0+0x3b0>  // b.none
    419c:	add	x19, x20, x19, lsl #4
    41a0:	ldr	x0, [x19, #8]
    41a4:	mov	x1, x22
    41a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    41ac:	str	xzr, [x19, #8]
    41b0:	cmp	x19, x20
    41b4:	sub	x19, x19, #0x10
    41b8:	b.ne	41a0 <lzma_filters_copy@@XZ_5.0+0xb8>  // b.any
    41bc:	ldp	x19, x20, [sp, #16]
    41c0:	ldp	x21, x22, [sp, #32]
    41c4:	mov	w0, w23
    41c8:	ldr	x23, [sp, #48]
    41cc:	ldp	x29, x30, [sp], #64
    41d0:	ret
    41d4:	ldr	x0, [x21]
    41d8:	mov	x1, #0x1                   	// #1
    41dc:	movk	x1, #0x4000, lsl #48
    41e0:	cmp	x0, x1
    41e4:	b.eq	44ac <lzma_filters_copy@@XZ_5.0+0x3c4>  // b.none
    41e8:	cmp	x0, #0x21
    41ec:	b.eq	44b4 <lzma_filters_copy@@XZ_5.0+0x3cc>  // b.none
    41f0:	cmp	x0, #0x4
    41f4:	b.eq	44bc <lzma_filters_copy@@XZ_5.0+0x3d4>  // b.none
    41f8:	cmp	x0, #0x5
    41fc:	b.eq	44d8 <lzma_filters_copy@@XZ_5.0+0x3f0>  // b.none
    4200:	cmp	x0, #0x6
    4204:	b.eq	44e8 <lzma_filters_copy@@XZ_5.0+0x400>  // b.none
    4208:	cmp	x0, #0x7
    420c:	b.eq	441c <lzma_filters_copy@@XZ_5.0+0x334>  // b.none
    4210:	cmp	x0, #0x8
    4214:	b.eq	450c <lzma_filters_copy@@XZ_5.0+0x424>  // b.none
    4218:	cmp	x0, #0x9
    421c:	b.eq	452c <lzma_filters_copy@@XZ_5.0+0x444>  // b.none
    4220:	cmp	x0, #0x3
    4224:	b.eq	454c <lzma_filters_copy@@XZ_5.0+0x464>  // b.none
    4228:	cmn	x0, #0x1
    422c:	mov	w23, #0x8                   	// #8
    4230:	b.eq	455c <lzma_filters_copy@@XZ_5.0+0x474>  // b.none
    4234:	mov	w0, w23
    4238:	ldp	x19, x20, [sp, #16]
    423c:	ldp	x21, x22, [sp, #32]
    4240:	ldr	x23, [sp, #48]
    4244:	ldp	x29, x30, [sp], #64
    4248:	ret
    424c:	ldr	x0, [x21, #16]
    4250:	mov	x1, #0x1                   	// #1
    4254:	movk	x1, #0x4000, lsl #48
    4258:	cmp	x0, x1
    425c:	b.eq	44d0 <lzma_filters_copy@@XZ_5.0+0x3e8>  // b.none
    4260:	cmp	x0, #0x21
    4264:	b.eq	44e0 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    4268:	cmp	x0, #0x4
    426c:	b.eq	44fc <lzma_filters_copy@@XZ_5.0+0x414>  // b.none
    4270:	cmp	x0, #0x5
    4274:	b.eq	4458 <lzma_filters_copy@@XZ_5.0+0x370>  // b.none
    4278:	cmp	x0, #0x6
    427c:	b.eq	4514 <lzma_filters_copy@@XZ_5.0+0x42c>  // b.none
    4280:	cmp	x0, #0x7
    4284:	b.eq	4524 <lzma_filters_copy@@XZ_5.0+0x43c>  // b.none
    4288:	cmp	x0, #0x8
    428c:	b.eq	4554 <lzma_filters_copy@@XZ_5.0+0x46c>  // b.none
    4290:	cmp	x0, #0x9
    4294:	b.eq	4574 <lzma_filters_copy@@XZ_5.0+0x48c>  // b.none
    4298:	cmp	x0, #0x3
    429c:	b.eq	4584 <lzma_filters_copy@@XZ_5.0+0x49c>  // b.none
    42a0:	cmn	x0, #0x1
    42a4:	mov	x19, #0x1                   	// #1
    42a8:	b.eq	44a4 <lzma_filters_copy@@XZ_5.0+0x3bc>  // b.none
    42ac:	sub	x19, x19, #0x1
    42b0:	mov	w23, #0x8                   	// #8
    42b4:	b	419c <lzma_filters_copy@@XZ_5.0+0xb4>
    42b8:	ldr	x0, [x21, #32]
    42bc:	mov	x1, #0x1                   	// #1
    42c0:	movk	x1, #0x4000, lsl #48
    42c4:	cmp	x0, x1
    42c8:	b.eq	43f0 <lzma_filters_copy@@XZ_5.0+0x308>  // b.none
    42cc:	cmp	x0, #0x21
    42d0:	b.eq	4504 <lzma_filters_copy@@XZ_5.0+0x41c>  // b.none
    42d4:	cmp	x0, #0x4
    42d8:	b.eq	451c <lzma_filters_copy@@XZ_5.0+0x434>  // b.none
    42dc:	cmp	x0, #0x5
    42e0:	b.eq	4544 <lzma_filters_copy@@XZ_5.0+0x45c>  // b.none
    42e4:	cmp	x0, #0x6
    42e8:	b.eq	4564 <lzma_filters_copy@@XZ_5.0+0x47c>  // b.none
    42ec:	cmp	x0, #0x7
    42f0:	b.eq	456c <lzma_filters_copy@@XZ_5.0+0x484>  // b.none
    42f4:	cmp	x0, #0x8
    42f8:	b.eq	458c <lzma_filters_copy@@XZ_5.0+0x4a4>  // b.none
    42fc:	cmp	x0, #0x9
    4300:	b.eq	45a4 <lzma_filters_copy@@XZ_5.0+0x4bc>  // b.none
    4304:	cmp	x0, #0x3
    4308:	b.eq	45ac <lzma_filters_copy@@XZ_5.0+0x4c4>  // b.none
    430c:	cmn	x0, #0x1
    4310:	mov	x19, #0x2                   	// #2
    4314:	b.ne	42ac <lzma_filters_copy@@XZ_5.0+0x1c4>  // b.any
    4318:	mov	x0, #0x9                   	// #9
    431c:	add	x0, x0, x0, lsl #1
    4320:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    4324:	add	x1, x1, #0x160
    4328:	add	x0, x1, x0, lsl #3
    432c:	ldr	x19, [x0, #8]
    4330:	b	43f8 <lzma_filters_copy@@XZ_5.0+0x310>
    4334:	ldr	x0, [x21, #48]
    4338:	mov	x1, #0x1                   	// #1
    433c:	movk	x1, #0x4000, lsl #48
    4340:	cmp	x0, x1
    4344:	b.eq	453c <lzma_filters_copy@@XZ_5.0+0x454>  // b.none
    4348:	cmp	x0, #0x21
    434c:	b.eq	4534 <lzma_filters_copy@@XZ_5.0+0x44c>  // b.none
    4350:	cmp	x0, #0x4
    4354:	b.eq	457c <lzma_filters_copy@@XZ_5.0+0x494>  // b.none
    4358:	cmp	x0, #0x5
    435c:	b.eq	4594 <lzma_filters_copy@@XZ_5.0+0x4ac>  // b.none
    4360:	cmp	x0, #0x6
    4364:	b.eq	459c <lzma_filters_copy@@XZ_5.0+0x4b4>  // b.none
    4368:	cmp	x0, #0x7
    436c:	b.eq	45b4 <lzma_filters_copy@@XZ_5.0+0x4cc>  // b.none
    4370:	cmp	x0, #0x8
    4374:	b.eq	45bc <lzma_filters_copy@@XZ_5.0+0x4d4>  // b.none
    4378:	cmp	x0, #0x9
    437c:	b.eq	45c4 <lzma_filters_copy@@XZ_5.0+0x4dc>  // b.none
    4380:	cmp	x0, #0x3
    4384:	b.eq	45cc <lzma_filters_copy@@XZ_5.0+0x4e4>  // b.none
    4388:	cmn	x0, #0x1
    438c:	mov	x19, #0x3                   	// #3
    4390:	b.ne	42ac <lzma_filters_copy@@XZ_5.0+0x1c4>  // b.any
    4394:	mov	x0, #0x9                   	// #9
    4398:	add	x0, x0, x0, lsl #1
    439c:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    43a0:	add	x1, x1, #0x160
    43a4:	add	x0, x1, x0, lsl #3
    43a8:	ldr	x19, [x0, #8]
    43ac:	mov	x1, x22
    43b0:	mov	x0, x19
    43b4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    43b8:	str	x0, [x20, #56]
    43bc:	cbz	x0, 45d4 <lzma_filters_copy@@XZ_5.0+0x4ec>
    43c0:	ldr	x1, [x21, #56]
    43c4:	mov	x2, x19
    43c8:	bl	30c0 <memcpy@plt>
    43cc:	b	4188 <lzma_filters_copy@@XZ_5.0+0xa0>
    43d0:	mov	x0, #0x30                  	// #48
    43d4:	add	x20, x20, x0
    43d8:	mov	x0, #0xffffffffffffffff    	// #-1
    43dc:	mov	w23, #0x0                   	// #0
    43e0:	ldp	x21, x22, [sp, #32]
    43e4:	stp	x0, xzr, [x20]
    43e8:	ldp	x19, x20, [sp, #16]
    43ec:	b	41c4 <lzma_filters_copy@@XZ_5.0+0xdc>
    43f0:	mov	x19, #0x70                  	// #112
    43f4:	nop
    43f8:	mov	x1, x22
    43fc:	mov	x0, x19
    4400:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    4404:	str	x0, [x20, #40]
    4408:	cbz	x0, 45f0 <lzma_filters_copy@@XZ_5.0+0x508>
    440c:	ldr	x1, [x21, #40]
    4410:	mov	x2, x19
    4414:	bl	30c0 <memcpy@plt>
    4418:	b	416c <lzma_filters_copy@@XZ_5.0+0x84>
    441c:	mov	x0, #0x5                   	// #5
    4420:	add	x0, x0, x0, lsl #1
    4424:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    4428:	add	x1, x1, #0x160
    442c:	add	x0, x1, x0, lsl #3
    4430:	ldr	x19, [x0, #8]
    4434:	mov	x1, x22
    4438:	mov	x0, x19
    443c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    4440:	str	x0, [x20, #8]
    4444:	cbz	x0, 45fc <lzma_filters_copy@@XZ_5.0+0x514>
    4448:	ldr	x1, [x21, #8]
    444c:	mov	x2, x19
    4450:	bl	30c0 <memcpy@plt>
    4454:	b	4134 <lzma_filters_copy@@XZ_5.0+0x4c>
    4458:	mov	x0, #0x3                   	// #3
    445c:	nop
    4460:	add	x0, x0, x0, lsl #1
    4464:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    4468:	add	x1, x1, #0x160
    446c:	add	x0, x1, x0, lsl #3
    4470:	ldr	x19, [x0, #8]
    4474:	mov	x1, x22
    4478:	mov	x0, x19
    447c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    4480:	str	x0, [x20, #24]
    4484:	cbz	x0, 45e4 <lzma_filters_copy@@XZ_5.0+0x4fc>
    4488:	ldr	x1, [x21, #24]
    448c:	mov	x2, x19
    4490:	bl	30c0 <memcpy@plt>
    4494:	b	4150 <lzma_filters_copy@@XZ_5.0+0x68>
    4498:	mov	x0, #0x40                  	// #64
    449c:	add	x20, x20, x0
    44a0:	b	43d8 <lzma_filters_copy@@XZ_5.0+0x2f0>
    44a4:	mov	x0, #0x9                   	// #9
    44a8:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    44ac:	mov	x19, #0x70                  	// #112
    44b0:	b	4434 <lzma_filters_copy@@XZ_5.0+0x34c>
    44b4:	mov	x0, #0x1                   	// #1
    44b8:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    44bc:	mov	x0, #0x2                   	// #2
    44c0:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    44c4:	mov	x0, #0x10                  	// #16
    44c8:	add	x20, x20, x0
    44cc:	b	43d8 <lzma_filters_copy@@XZ_5.0+0x2f0>
    44d0:	mov	x19, #0x70                  	// #112
    44d4:	b	4474 <lzma_filters_copy@@XZ_5.0+0x38c>
    44d8:	mov	x0, #0x3                   	// #3
    44dc:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    44e0:	mov	x0, #0x1                   	// #1
    44e4:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    44e8:	mov	x0, #0x4                   	// #4
    44ec:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    44f0:	mov	x0, #0x20                  	// #32
    44f4:	add	x20, x20, x0
    44f8:	b	43d8 <lzma_filters_copy@@XZ_5.0+0x2f0>
    44fc:	mov	x0, #0x2                   	// #2
    4500:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    4504:	mov	x0, #0x1                   	// #1
    4508:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    450c:	mov	x0, #0x6                   	// #6
    4510:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    4514:	mov	x0, #0x4                   	// #4
    4518:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    451c:	mov	x0, #0x2                   	// #2
    4520:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    4524:	mov	x0, #0x5                   	// #5
    4528:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    452c:	mov	x0, #0x7                   	// #7
    4530:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    4534:	mov	x0, #0x1                   	// #1
    4538:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    453c:	mov	x19, #0x70                  	// #112
    4540:	b	43ac <lzma_filters_copy@@XZ_5.0+0x2c4>
    4544:	mov	x0, #0x3                   	// #3
    4548:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    454c:	mov	x0, #0x8                   	// #8
    4550:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    4554:	mov	x0, #0x6                   	// #6
    4558:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    455c:	mov	x0, #0x9                   	// #9
    4560:	b	4420 <lzma_filters_copy@@XZ_5.0+0x338>
    4564:	mov	x0, #0x4                   	// #4
    4568:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    456c:	mov	x0, #0x5                   	// #5
    4570:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    4574:	mov	x0, #0x7                   	// #7
    4578:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    457c:	mov	x0, #0x2                   	// #2
    4580:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    4584:	mov	x0, #0x8                   	// #8
    4588:	b	4460 <lzma_filters_copy@@XZ_5.0+0x378>
    458c:	mov	x0, #0x6                   	// #6
    4590:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    4594:	mov	x0, #0x3                   	// #3
    4598:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    459c:	mov	x0, #0x4                   	// #4
    45a0:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    45a4:	mov	x0, #0x7                   	// #7
    45a8:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    45ac:	mov	x0, #0x8                   	// #8
    45b0:	b	431c <lzma_filters_copy@@XZ_5.0+0x234>
    45b4:	mov	x0, #0x5                   	// #5
    45b8:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    45bc:	mov	x0, #0x6                   	// #6
    45c0:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    45c4:	mov	x0, #0x7                   	// #7
    45c8:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    45cc:	mov	x0, #0x8                   	// #8
    45d0:	b	4398 <lzma_filters_copy@@XZ_5.0+0x2b0>
    45d4:	mov	x19, #0x3                   	// #3
    45d8:	mov	w23, #0x5                   	// #5
    45dc:	sub	x19, x19, #0x1
    45e0:	b	419c <lzma_filters_copy@@XZ_5.0+0xb4>
    45e4:	mov	x19, #0x1                   	// #1
    45e8:	mov	w23, #0x5                   	// #5
    45ec:	b	45dc <lzma_filters_copy@@XZ_5.0+0x4f4>
    45f0:	mov	x19, #0x2                   	// #2
    45f4:	mov	w23, #0x5                   	// #5
    45f8:	b	45dc <lzma_filters_copy@@XZ_5.0+0x4f4>
    45fc:	mov	w23, #0x5                   	// #5
    4600:	ldp	x19, x20, [sp, #16]
    4604:	ldp	x21, x22, [sp, #32]
    4608:	b	41c4 <lzma_filters_copy@@XZ_5.0+0xdc>
    460c:	nop
    4610:	stp	x29, x30, [sp, #-224]!
    4614:	mov	x29, sp
    4618:	stp	x19, x20, [sp, #16]
    461c:	cbz	x2, 46f0 <lzma_filters_copy@@XZ_5.0+0x608>
    4620:	stp	x23, x24, [sp, #48]
    4624:	mov	x23, x0
    4628:	mov	x19, x2
    462c:	ldr	x0, [x2]
    4630:	cmn	x0, #0x1
    4634:	b.eq	46d8 <lzma_filters_copy@@XZ_5.0+0x5f0>  // b.none
    4638:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    463c:	mov	x6, #0x1                   	// #1
    4640:	mov	x24, x1
    4644:	and	w4, w4, #0xff
    4648:	add	x2, x0, #0x160
    464c:	mov	x5, #0x0                   	// #0
    4650:	movk	x6, #0x4000, lsl #48
    4654:	stp	x21, x22, [sp, #32]
    4658:	mov	x22, x3
    465c:	mov	x21, #0x0                   	// #0
    4660:	mov	w3, #0x1                   	// #1
    4664:	lsl	x1, x21, #4
    4668:	ldr	x0, [x19, x1]
    466c:	cmp	x0, x6
    4670:	b.eq	4704 <lzma_filters_copy@@XZ_5.0+0x61c>  // b.none
    4674:	cmp	x0, #0x21
    4678:	b.eq	4744 <lzma_filters_copy@@XZ_5.0+0x65c>  // b.none
    467c:	cmp	x0, #0x4
    4680:	b.eq	474c <lzma_filters_copy@@XZ_5.0+0x664>  // b.none
    4684:	cmp	x0, #0x5
    4688:	b.eq	4754 <lzma_filters_copy@@XZ_5.0+0x66c>  // b.none
    468c:	cmp	x0, #0x6
    4690:	b.eq	475c <lzma_filters_copy@@XZ_5.0+0x674>  // b.none
    4694:	cmp	x0, #0x7
    4698:	b.eq	4764 <lzma_filters_copy@@XZ_5.0+0x67c>  // b.none
    469c:	cmp	x0, #0x8
    46a0:	b.eq	476c <lzma_filters_copy@@XZ_5.0+0x684>  // b.none
    46a4:	cmp	x0, #0x9
    46a8:	b.eq	4774 <lzma_filters_copy@@XZ_5.0+0x68c>  // b.none
    46ac:	cmp	x0, #0x3
    46b0:	b.eq	477c <lzma_filters_copy@@XZ_5.0+0x694>  // b.none
    46b4:	cmn	x0, #0x1
    46b8:	b.eq	4784 <lzma_filters_copy@@XZ_5.0+0x69c>  // b.none
    46bc:	ldp	x21, x22, [sp, #32]
    46c0:	mov	w19, #0x8                   	// #8
    46c4:	ldp	x23, x24, [sp, #48]
    46c8:	mov	w0, w19
    46cc:	ldp	x19, x20, [sp, #16]
    46d0:	ldp	x29, x30, [sp], #224
    46d4:	ret
    46d8:	mov	w19, #0xb                   	// #11
    46dc:	mov	w0, w19
    46e0:	ldp	x19, x20, [sp, #16]
    46e4:	ldp	x23, x24, [sp, #48]
    46e8:	ldp	x29, x30, [sp], #224
    46ec:	ret
    46f0:	mov	w19, #0xb                   	// #11
    46f4:	mov	w0, w19
    46f8:	ldp	x19, x20, [sp, #16]
    46fc:	ldp	x29, x30, [sp], #224
    4700:	ret
    4704:	mov	x0, #0x0                   	// #0
    4708:	cbz	w3, 46bc <lzma_filters_copy@@XZ_5.0+0x5d4>
    470c:	add	x0, x0, x0, lsl #1
    4710:	add	x1, x1, #0x10
    4714:	stp	x25, x26, [sp, #64]
    4718:	add	x25, x21, #0x1
    471c:	add	x0, x2, x0, lsl #3
    4720:	ldr	x3, [x19, x1]
    4724:	ldrb	w1, [x0, #18]
    4728:	cmn	x3, #0x1
    472c:	ldrb	w3, [x0, #16]
    4730:	add	x5, x5, x1
    4734:	b.eq	478c <lzma_filters_copy@@XZ_5.0+0x6a4>  // b.none
    4738:	mov	x21, x25
    473c:	ldp	x25, x26, [sp, #64]
    4740:	b	4664 <lzma_filters_copy@@XZ_5.0+0x57c>
    4744:	mov	x0, #0x1                   	// #1
    4748:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    474c:	mov	x0, #0x2                   	// #2
    4750:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    4754:	mov	x0, #0x3                   	// #3
    4758:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    475c:	mov	x0, #0x4                   	// #4
    4760:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    4764:	mov	x0, #0x5                   	// #5
    4768:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    476c:	mov	x0, #0x6                   	// #6
    4770:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    4774:	mov	x0, #0x7                   	// #7
    4778:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    477c:	mov	x0, #0x8                   	// #8
    4780:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    4784:	mov	x0, #0x9                   	// #9
    4788:	b	4708 <lzma_filters_copy@@XZ_5.0+0x620>
    478c:	ldrb	w0, [x0, #17]
    4790:	cmp	x25, #0x4
    4794:	ccmp	x5, #0x3, #0x2, ls  // ls = plast
    4798:	str	x27, [sp, #80]
    479c:	eor	w1, w0, #0x1
    47a0:	cset	w0, hi  // hi = pmore
    47a4:	orr	w0, w0, w1
    47a8:	tst	w0, #0xff
    47ac:	b.ne	4854 <lzma_filters_copy@@XZ_5.0+0x76c>  // b.any
    47b0:	cbz	w4, 4860 <lzma_filters_copy@@XZ_5.0+0x778>
    47b4:	add	x20, x21, x21, lsl #1
    47b8:	add	x26, sp, #0x68
    47bc:	mov	x27, #0x0                   	// #0
    47c0:	add	x20, x26, x20, lsl #3
    47c4:	nop
    47c8:	ldr	x0, [x19]
    47cc:	blr	x22
    47d0:	cbz	x0, 4854 <lzma_filters_copy@@XZ_5.0+0x76c>
    47d4:	ldr	x0, [x0, #8]
    47d8:	add	x1, x27, #0x1
    47dc:	cmp	x21, x27
    47e0:	mov	x27, x1
    47e4:	cbz	x0, 4854 <lzma_filters_copy@@XZ_5.0+0x76c>
    47e8:	ldr	x1, [x19]
    47ec:	stp	x1, x0, [x20]
    47f0:	add	x19, x19, #0x10
    47f4:	ldur	x1, [x19, #-8]
    47f8:	str	x1, [x20, #16]
    47fc:	sub	x20, x20, #0x18
    4800:	b.ne	47c8 <lzma_filters_copy@@XZ_5.0+0x6e0>  // b.any
    4804:	add	x25, x25, x25, lsl #1
    4808:	add	x3, sp, #0x70
    480c:	mov	x4, #0xffffffffffffffff    	// #-1
    4810:	mov	x2, x26
    4814:	lsl	x25, x25, #3
    4818:	mov	x1, x24
    481c:	mov	x0, x23
    4820:	str	xzr, [x3, x25]
    4824:	str	x4, [x26, x25]
    4828:	bl	3860 <lzma_version_string@@XZ_5.0+0x148>
    482c:	mov	w19, w0
    4830:	cbnz	w0, 48b0 <lzma_filters_copy@@XZ_5.0+0x7c8>
    4834:	mov	w0, w19
    4838:	ldp	x19, x20, [sp, #16]
    483c:	ldp	x21, x22, [sp, #32]
    4840:	ldp	x23, x24, [sp, #48]
    4844:	ldp	x25, x26, [sp, #64]
    4848:	ldr	x27, [sp, #80]
    484c:	ldp	x29, x30, [sp], #224
    4850:	ret
    4854:	ldp	x25, x26, [sp, #64]
    4858:	ldr	x27, [sp, #80]
    485c:	b	46bc <lzma_filters_copy@@XZ_5.0+0x5d4>
    4860:	add	x26, sp, #0x68
    4864:	mov	x27, #0x0                   	// #0
    4868:	mov	x20, x26
    486c:	nop
    4870:	ldr	x0, [x19]
    4874:	blr	x22
    4878:	cbz	x0, 4854 <lzma_filters_copy@@XZ_5.0+0x76c>
    487c:	ldr	x0, [x0, #8]
    4880:	add	x1, x27, #0x1
    4884:	cmp	x21, x27
    4888:	mov	x27, x1
    488c:	cbz	x0, 4854 <lzma_filters_copy@@XZ_5.0+0x76c>
    4890:	ldr	x1, [x19]
    4894:	stp	x1, x0, [x20]
    4898:	add	x19, x19, #0x10
    489c:	ldur	x1, [x19, #-8]
    48a0:	str	x1, [x20, #16]
    48a4:	add	x20, x20, #0x18
    48a8:	b.ne	4870 <lzma_filters_copy@@XZ_5.0+0x788>  // b.any
    48ac:	b	4804 <lzma_filters_copy@@XZ_5.0+0x71c>
    48b0:	mov	x1, x24
    48b4:	mov	x0, x23
    48b8:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    48bc:	ldp	x21, x22, [sp, #32]
    48c0:	ldp	x23, x24, [sp, #48]
    48c4:	ldp	x25, x26, [sp, #64]
    48c8:	ldr	x27, [sp, #80]
    48cc:	b	46c8 <lzma_filters_copy@@XZ_5.0+0x5e0>
    48d0:	cbz	x1, 4974 <lzma_filters_copy@@XZ_5.0+0x88c>
    48d4:	stp	x29, x30, [sp, #-48]!
    48d8:	mov	x29, sp
    48dc:	str	x21, [sp, #32]
    48e0:	mov	x21, x0
    48e4:	ldr	x0, [x1]
    48e8:	cmn	x0, #0x1
    48ec:	b.eq	4964 <lzma_filters_copy@@XZ_5.0+0x87c>  // b.none
    48f0:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    48f4:	mov	x7, #0x1                   	// #1
    48f8:	add	x4, x0, #0x160
    48fc:	mov	x3, #0x0                   	// #0
    4900:	mov	w5, #0x1                   	// #1
    4904:	mov	x6, #0x0                   	// #0
    4908:	movk	x7, #0x4000, lsl #48
    490c:	lsl	x2, x3, #4
    4910:	ldr	x0, [x1, x2]
    4914:	cmp	x0, x7
    4918:	b.eq	497c <lzma_filters_copy@@XZ_5.0+0x894>  // b.none
    491c:	cmp	x0, #0x21
    4920:	b.eq	4a34 <lzma_filters_copy@@XZ_5.0+0x94c>  // b.none
    4924:	cmp	x0, #0x4
    4928:	b.eq	4a3c <lzma_filters_copy@@XZ_5.0+0x954>  // b.none
    492c:	cmp	x0, #0x5
    4930:	b.eq	4a44 <lzma_filters_copy@@XZ_5.0+0x95c>  // b.none
    4934:	cmp	x0, #0x6
    4938:	b.eq	4a4c <lzma_filters_copy@@XZ_5.0+0x964>  // b.none
    493c:	cmp	x0, #0x7
    4940:	b.eq	4a64 <lzma_filters_copy@@XZ_5.0+0x97c>  // b.none
    4944:	cmp	x0, #0x8
    4948:	b.eq	4a6c <lzma_filters_copy@@XZ_5.0+0x984>  // b.none
    494c:	cmp	x0, #0x9
    4950:	b.eq	4a74 <lzma_filters_copy@@XZ_5.0+0x98c>  // b.none
    4954:	cmp	x0, #0x3
    4958:	b.eq	4a7c <lzma_filters_copy@@XZ_5.0+0x994>  // b.none
    495c:	cmn	x0, #0x1
    4960:	b.eq	4a54 <lzma_filters_copy@@XZ_5.0+0x96c>  // b.none
    4964:	mov	x0, #0xffffffffffffffff    	// #-1
    4968:	ldr	x21, [sp, #32]
    496c:	ldp	x29, x30, [sp], #48
    4970:	ret
    4974:	mov	x0, #0xffffffffffffffff    	// #-1
    4978:	ret
    497c:	mov	x0, #0x0                   	// #0
    4980:	cbz	w5, 4964 <lzma_filters_copy@@XZ_5.0+0x87c>
    4984:	add	x0, x0, x0, lsl #1
    4988:	add	x2, x2, #0x10
    498c:	add	x3, x3, #0x1
    4990:	add	x0, x4, x0, lsl #3
    4994:	ldr	x5, [x1, x2]
    4998:	ldrb	w2, [x0, #18]
    499c:	cmn	x5, #0x1
    49a0:	ldrb	w5, [x0, #16]
    49a4:	add	x6, x6, x2
    49a8:	b.ne	490c <lzma_filters_copy@@XZ_5.0+0x824>  // b.any
    49ac:	ldrb	w0, [x0, #17]
    49b0:	cmp	x6, #0x3
    49b4:	ccmp	x3, #0x4, #0x2, ls  // ls = plast
    49b8:	eor	w2, w0, #0x1
    49bc:	cset	w0, hi  // hi = pmore
    49c0:	orr	w0, w0, w2
    49c4:	tst	w0, #0xff
    49c8:	b.ne	4964 <lzma_filters_copy@@XZ_5.0+0x87c>  // b.any
    49cc:	stp	x19, x20, [sp, #16]
    49d0:	mov	x19, x1
    49d4:	mov	x20, #0x0                   	// #0
    49d8:	b	49fc <lzma_filters_copy@@XZ_5.0+0x914>
    49dc:	ldr	x0, [x19, #8]
    49e0:	blr	x1
    49e4:	add	x20, x20, x0
    49e8:	cmn	x0, #0x1
    49ec:	b.eq	4a5c <lzma_filters_copy@@XZ_5.0+0x974>  // b.none
    49f0:	ldr	x0, [x19, #16]!
    49f4:	cmn	x0, #0x1
    49f8:	b.eq	4a20 <lzma_filters_copy@@XZ_5.0+0x938>  // b.none
    49fc:	ldr	x0, [x19]
    4a00:	blr	x21
    4a04:	cbz	x0, 4a5c <lzma_filters_copy@@XZ_5.0+0x974>
    4a08:	ldr	x1, [x0, #16]
    4a0c:	cbnz	x1, 49dc <lzma_filters_copy@@XZ_5.0+0x8f4>
    4a10:	ldr	x0, [x19, #16]!
    4a14:	add	x20, x20, #0x400
    4a18:	cmn	x0, #0x1
    4a1c:	b.ne	49fc <lzma_filters_copy@@XZ_5.0+0x914>  // b.any
    4a20:	add	x0, x20, #0x8, lsl #12
    4a24:	ldp	x19, x20, [sp, #16]
    4a28:	ldr	x21, [sp, #32]
    4a2c:	ldp	x29, x30, [sp], #48
    4a30:	ret
    4a34:	mov	x0, #0x1                   	// #1
    4a38:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a3c:	mov	x0, #0x2                   	// #2
    4a40:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a44:	mov	x0, #0x3                   	// #3
    4a48:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a4c:	mov	x0, #0x4                   	// #4
    4a50:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a54:	mov	x0, #0x9                   	// #9
    4a58:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a5c:	ldp	x19, x20, [sp, #16]
    4a60:	b	4964 <lzma_filters_copy@@XZ_5.0+0x87c>
    4a64:	mov	x0, #0x5                   	// #5
    4a68:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a6c:	mov	x0, #0x6                   	// #6
    4a70:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a74:	mov	x0, #0x7                   	// #7
    4a78:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a7c:	mov	x0, #0x8                   	// #8
    4a80:	b	4980 <lzma_filters_copy@@XZ_5.0+0x898>
    4a84:	nop

0000000000004a88 <lzma_physmem@@XZ_5.0>:
    4a88:	b	3678 <pthread_cond_timedwait@plt+0xe8>
    4a8c:	nop
    4a90:	stp	x29, x30, [sp, #-48]!
    4a94:	mov	x29, sp
    4a98:	stp	x19, x20, [sp, #16]
    4a9c:	mov	x19, x0
    4aa0:	mov	x20, x2
    4aa4:	ldr	x0, [x0, #24]
    4aa8:	str	x21, [sp, #32]
    4aac:	mov	x21, x1
    4ab0:	cbz	x0, 4ab8 <lzma_physmem@@XZ_5.0+0x30>
    4ab4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4ab8:	ldr	x0, [x19, #32]
    4abc:	cbz	x0, 4acc <lzma_physmem@@XZ_5.0+0x44>
    4ac0:	mov	x2, x20
    4ac4:	mov	x1, x21
    4ac8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4acc:	mov	x1, x21
    4ad0:	mov	x0, x19
    4ad4:	mov	x16, x20
    4ad8:	ldp	x19, x20, [sp, #16]
    4adc:	ldr	x21, [sp, #32]
    4ae0:	ldp	x29, x30, [sp], #48
    4ae4:	br	x16
    4ae8:	ldr	w2, [x0, #24]
    4aec:	ldr	x4, [x0]
    4af0:	add	w2, w2, #0x1
    4af4:	ldr	x3, [x0, #16]
    4af8:	stp	x3, xzr, [x1, #16]
    4afc:	str	xzr, [x1, #32]
    4b00:	str	w2, [x0, #24]
    4b04:	cbz	x4, 4b7c <lzma_physmem@@XZ_5.0+0xf4>
    4b08:	clz	w4, w2
    4b0c:	str	x1, [x3, #32]
    4b10:	eor	w4, w4, #0x1f
    4b14:	str	x1, [x0, #16]
    4b18:	mov	w1, #0x1                   	// #1
    4b1c:	lsl	w4, w1, w4
    4b20:	cmp	w2, w4
    4b24:	b.eq	4b70 <lzma_physmem@@XZ_5.0+0xe8>  // b.none
    4b28:	rbit	w1, w2
    4b2c:	clz	w1, w1
    4b30:	add	w1, w1, #0x2
    4b34:	nop
    4b38:	mov	x2, x3
    4b3c:	subs	w1, w1, #0x1
    4b40:	ldr	x3, [x3, #16]
    4b44:	b.ne	4b38 <lzma_physmem@@XZ_5.0+0xb0>  // b.any
    4b48:	ldr	x1, [x2, #32]
    4b4c:	cbz	x3, 4b74 <lzma_physmem@@XZ_5.0+0xec>
    4b50:	str	x1, [x3, #32]
    4b54:	ldr	x0, [x1, #24]
    4b58:	str	x3, [x1, #16]
    4b5c:	str	x0, [x2, #32]
    4b60:	cbz	x0, 4b68 <lzma_physmem@@XZ_5.0+0xe0>
    4b64:	str	x2, [x0, #16]
    4b68:	str	x2, [x1, #24]
    4b6c:	str	x1, [x2, #16]
    4b70:	ret
    4b74:	str	x1, [x0]
    4b78:	b	4b54 <lzma_physmem@@XZ_5.0+0xcc>
    4b7c:	dup	v0.2d, x1
    4b80:	str	x1, [x0, #16]
    4b84:	str	q0, [x0]
    4b88:	ret
    4b8c:	nop
    4b90:	stp	x29, x30, [sp, #-80]!
    4b94:	mov	x29, sp
    4b98:	stp	x19, x20, [sp, #16]
    4b9c:	mov	x19, x0
    4ba0:	stp	x23, x24, [sp, #48]
    4ba4:	ldp	x20, x23, [x0, #264]
    4ba8:	stp	x21, x22, [sp, #32]
    4bac:	ldr	x21, [x0, #280]
    4bb0:	ldr	x22, [x20, #72]
    4bb4:	str	x25, [sp, #64]
    4bb8:	cbz	x23, 4d4c <lzma_physmem@@XZ_5.0+0x2c4>
    4bbc:	ldr	x0, [x0, #256]
    4bc0:	ldr	x0, [x0, #16]
    4bc4:	cmp	x0, x20
    4bc8:	b.eq	4cd4 <lzma_physmem@@XZ_5.0+0x24c>  // b.none
    4bcc:	str	xzr, [x19, #288]
    4bd0:	ldr	w0, [x20, #40]
    4bd4:	mov	x1, #0x0                   	// #0
    4bd8:	ldr	w2, [x20, #104]
    4bdc:	ldp	x25, x24, [x20]
    4be0:	str	x0, [x19, #32]
    4be4:	ldr	x0, [x20, #88]
    4be8:	stp	x0, x24, [x19, #40]
    4bec:	cmn	w2, #0x1
    4bf0:	str	x25, [x19, #56]
    4bf4:	b.eq	4bfc <lzma_physmem@@XZ_5.0+0x174>  // b.none
    4bf8:	add	x1, x20, #0x68
    4bfc:	ldr	x2, [x20, #160]
    4c00:	str	x1, [x19]
    4c04:	str	x2, [x19, #80]
    4c08:	cbz	x22, 4d2c <lzma_physmem@@XZ_5.0+0x2a4>
    4c0c:	bl	34b0 <lzma_vli_size@plt>
    4c10:	add	w0, w0, #0x1
    4c14:	ldr	x2, [x22, #56]
    4c18:	ldr	x1, [x20, #96]
    4c1c:	add	x3, x22, x2, lsl #4
    4c20:	add	x1, x1, #0x7
    4c24:	add	x1, x1, x0
    4c28:	ldr	x0, [x3, #72]
    4c2c:	and	x1, x1, #0xfffffffffffffffc
    4c30:	add	x0, x0, #0x3
    4c34:	and	x0, x0, #0xfffffffffffffffc
    4c38:	add	x0, x0, #0x18
    4c3c:	add	x0, x0, x1
    4c40:	str	x0, [x19, #64]
    4c44:	ldr	x0, [x3, #64]
    4c48:	str	x0, [x19, #72]
    4c4c:	cbz	x23, 4cb4 <lzma_physmem@@XZ_5.0+0x22c>
    4c50:	ldr	x0, [x23, #40]
    4c54:	ldr	x1, [x20, #48]
    4c58:	add	x0, x21, x0
    4c5c:	str	x0, [x19, #144]
    4c60:	add	x0, x1, x0
    4c64:	str	x0, [x19, #120]
    4c68:	cbz	x21, 4ccc <lzma_physmem@@XZ_5.0+0x244>
    4c6c:	lsl	x21, x21, #4
    4c70:	add	x1, x23, x21
    4c74:	ldp	x3, x0, [x1, #48]
    4c78:	add	x0, x0, #0x3
    4c7c:	and	x1, x0, #0xfffffffffffffffc
    4c80:	add	x21, x23, x21
    4c84:	add	x4, x1, #0xc
    4c88:	add	x25, x3, x25
    4c8c:	add	x24, x4, x24
    4c90:	ldp	x2, x0, [x21, #64]
    4c94:	stp	x24, x25, [x19, #128]
    4c98:	stp	x4, x3, [x19, #152]
    4c9c:	sub	x0, x0, x1
    4ca0:	sub	x2, x2, x3
    4ca4:	add	x1, x0, #0x3
    4ca8:	stp	x2, x0, [x19, #168]
    4cac:	and	x1, x1, #0xfffffffffffffffc
    4cb0:	str	x1, [x19, #184]
    4cb4:	ldp	x19, x20, [sp, #16]
    4cb8:	ldp	x21, x22, [sp, #32]
    4cbc:	ldp	x23, x24, [sp, #48]
    4cc0:	ldr	x25, [sp, #64]
    4cc4:	ldp	x29, x30, [sp], #80
    4cc8:	ret
    4ccc:	ldp	x3, x1, [x23]
    4cd0:	b	4c80 <lzma_physmem@@XZ_5.0+0x1f8>
    4cd4:	cmp	x23, x22
    4cd8:	b.ne	4bcc <lzma_physmem@@XZ_5.0+0x144>  // b.any
    4cdc:	ldr	x0, [x20, #64]
    4ce0:	cmp	x0, x23
    4ce4:	b.eq	4d58 <lzma_physmem@@XZ_5.0+0x2d0>  // b.none
    4ce8:	ldr	x1, [x23, #16]
    4cec:	mov	x0, #0x1                   	// #1
    4cf0:	str	x1, [x19, #272]
    4cf4:	str	x0, [x19, #288]
    4cf8:	ldr	w0, [x20, #40]
    4cfc:	ldr	w1, [x20, #104]
    4d00:	ldp	x25, x24, [x20]
    4d04:	str	x0, [x19, #32]
    4d08:	ldr	x0, [x20, #88]
    4d0c:	stp	x0, x24, [x19, #40]
    4d10:	cmn	w1, #0x1
    4d14:	str	x25, [x19, #56]
    4d18:	b.ne	4bf8 <lzma_physmem@@XZ_5.0+0x170>  // b.any
    4d1c:	ldr	x1, [x20, #160]
    4d20:	str	xzr, [x19]
    4d24:	str	x1, [x19, #80]
    4d28:	b	4c0c <lzma_physmem@@XZ_5.0+0x184>
    4d2c:	mov	x0, #0x0                   	// #0
    4d30:	bl	34b0 <lzma_vli_size@plt>
    4d34:	add	w0, w0, #0x1
    4d38:	add	x0, x0, #0x7
    4d3c:	and	x0, x0, #0xfffffffffffffffc
    4d40:	add	x0, x0, #0x18
    4d44:	stp	x0, xzr, [x19, #64]
    4d48:	b	4c4c <lzma_physmem@@XZ_5.0+0x1c4>
    4d4c:	mov	x0, #0x2                   	// #2
    4d50:	str	x0, [x19, #288]
    4d54:	b	4bd0 <lzma_physmem@@XZ_5.0+0x148>
    4d58:	mov	x0, #0x2                   	// #2
    4d5c:	str	xzr, [x19, #272]
    4d60:	str	x0, [x19, #288]
    4d64:	b	4cf8 <lzma_physmem@@XZ_5.0+0x270>
    4d68:	stp	x29, x30, [sp, #-48]!
    4d6c:	mov	x29, sp
    4d70:	stp	x21, x22, [sp, #32]
    4d74:	mov	x22, x0
    4d78:	mov	x21, x1
    4d7c:	stp	x19, x20, [sp, #16]
    4d80:	mov	w20, #0x1                   	// #1
    4d84:	mov	x19, x21
    4d88:	ldp	x1, x21, [x21, #24]
    4d8c:	cbz	x1, 4d98 <lzma_physmem@@XZ_5.0+0x310>
    4d90:	mov	x0, x22
    4d94:	bl	4d68 <lzma_physmem@@XZ_5.0+0x2e0>
    4d98:	ldr	q0, [x22]
    4d9c:	ldr	q1, [x19]
    4da0:	ldr	x5, [x22, #32]
    4da4:	add	v0.2d, v0.2d, v1.2d
    4da8:	ldr	w4, [x22, #24]
    4dac:	ldr	w1, [x19, #40]
    4db0:	ldr	w2, [x5, #24]
    4db4:	add	w1, w1, w4
    4db8:	ldr	x4, [x5]
    4dbc:	str	q0, [x19]
    4dc0:	add	w2, w2, #0x1
    4dc4:	ldr	x3, [x22, #16]
    4dc8:	ldr	x0, [x19, #48]
    4dcc:	add	x0, x0, x3
    4dd0:	ldr	x3, [x5, #16]
    4dd4:	stp	x3, xzr, [x19, #16]
    4dd8:	str	xzr, [x19, #32]
    4ddc:	str	w1, [x19, #40]
    4de0:	str	x0, [x19, #48]
    4de4:	str	w2, [x5, #24]
    4de8:	cbz	x4, 4e64 <lzma_physmem@@XZ_5.0+0x3dc>
    4dec:	clz	w4, w2
    4df0:	str	x19, [x3, #32]
    4df4:	eor	w4, w4, #0x1f
    4df8:	str	x19, [x5, #16]
    4dfc:	lsl	w4, w20, w4
    4e00:	cmp	w2, w4
    4e04:	b.eq	4e50 <lzma_physmem@@XZ_5.0+0x3c8>  // b.none
    4e08:	rbit	w2, w2
    4e0c:	clz	w2, w2
    4e10:	add	w2, w2, #0x2
    4e14:	nop
    4e18:	mov	x0, x3
    4e1c:	subs	w2, w2, #0x1
    4e20:	ldr	x3, [x3, #16]
    4e24:	b.ne	4e18 <lzma_physmem@@XZ_5.0+0x390>  // b.any
    4e28:	ldr	x1, [x0, #32]
    4e2c:	cbz	x3, 4e78 <lzma_physmem@@XZ_5.0+0x3f0>
    4e30:	str	x1, [x3, #32]
    4e34:	ldr	x2, [x1, #24]
    4e38:	str	x3, [x1, #16]
    4e3c:	str	x2, [x0, #32]
    4e40:	cbz	x2, 4e48 <lzma_physmem@@XZ_5.0+0x3c0>
    4e44:	str	x0, [x2, #16]
    4e48:	str	x0, [x1, #24]
    4e4c:	str	x1, [x0, #16]
    4e50:	cbnz	x21, 4d84 <lzma_physmem@@XZ_5.0+0x2fc>
    4e54:	ldp	x19, x20, [sp, #16]
    4e58:	ldp	x21, x22, [sp, #32]
    4e5c:	ldp	x29, x30, [sp], #48
    4e60:	ret
    4e64:	dup	v0.2d, x19
    4e68:	str	x19, [x5, #16]
    4e6c:	str	q0, [x5]
    4e70:	cbnz	x21, 4d84 <lzma_physmem@@XZ_5.0+0x2fc>
    4e74:	b	4e54 <lzma_physmem@@XZ_5.0+0x3cc>
    4e78:	str	x1, [x5]
    4e7c:	b	4e34 <lzma_physmem@@XZ_5.0+0x3ac>
    4e80:	stp	x29, x30, [sp, #-80]!
    4e84:	mov	x29, sp
    4e88:	stp	x21, x22, [sp, #32]
    4e8c:	ldr	x21, [x0, #56]
    4e90:	stp	x19, x20, [sp, #16]
    4e94:	mov	x20, x0
    4e98:	mov	x19, x1
    4e9c:	cbz	x21, 5990 <lzma_physmem@@XZ_5.0+0xf08>
    4ea0:	ldr	x22, [x21, #24]
    4ea4:	stp	x23, x24, [sp, #48]
    4ea8:	stp	x25, x26, [sp, #64]
    4eac:	cbz	x22, 5410 <lzma_physmem@@XZ_5.0+0x988>
    4eb0:	ldr	x23, [x22, #24]
    4eb4:	cbz	x23, 5158 <lzma_physmem@@XZ_5.0+0x6d0>
    4eb8:	ldr	x24, [x23, #24]
    4ebc:	cbz	x24, 5000 <lzma_physmem@@XZ_5.0+0x578>
    4ec0:	ldr	x25, [x24, #24]
    4ec4:	cbz	x25, 4f58 <lzma_physmem@@XZ_5.0+0x4d0>
    4ec8:	ldr	x26, [x25, #24]
    4ecc:	cbz	x26, 4f08 <lzma_physmem@@XZ_5.0+0x480>
    4ed0:	ldr	x0, [x26, #24]
    4ed4:	cbz	x0, 4ee4 <lzma_physmem@@XZ_5.0+0x45c>
    4ed8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4edc:	ldr	x2, [x2, #3984]
    4ee0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4ee4:	ldr	x0, [x26, #32]
    4ee8:	cbz	x0, 4efc <lzma_physmem@@XZ_5.0+0x474>
    4eec:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4ef0:	mov	x1, x19
    4ef4:	ldr	x2, [x2, #3984]
    4ef8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4efc:	mov	x0, x26
    4f00:	mov	x1, x19
    4f04:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4f08:	ldr	x26, [x25, #32]
    4f0c:	cbz	x26, 4f4c <lzma_physmem@@XZ_5.0+0x4c4>
    4f10:	ldr	x0, [x26, #24]
    4f14:	cbz	x0, 4f28 <lzma_physmem@@XZ_5.0+0x4a0>
    4f18:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4f1c:	mov	x1, x19
    4f20:	ldr	x2, [x2, #3984]
    4f24:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4f28:	ldr	x0, [x26, #32]
    4f2c:	cbz	x0, 4f40 <lzma_physmem@@XZ_5.0+0x4b8>
    4f30:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4f34:	mov	x1, x19
    4f38:	ldr	x2, [x2, #3984]
    4f3c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4f40:	mov	x0, x26
    4f44:	mov	x1, x19
    4f48:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4f4c:	mov	x0, x25
    4f50:	mov	x1, x19
    4f54:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4f58:	ldr	x25, [x24, #32]
    4f5c:	cbz	x25, 4ff4 <lzma_physmem@@XZ_5.0+0x56c>
    4f60:	ldr	x26, [x25, #24]
    4f64:	cbz	x26, 4fa4 <lzma_physmem@@XZ_5.0+0x51c>
    4f68:	ldr	x0, [x26, #24]
    4f6c:	cbz	x0, 4f80 <lzma_physmem@@XZ_5.0+0x4f8>
    4f70:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4f74:	mov	x1, x19
    4f78:	ldr	x2, [x2, #3984]
    4f7c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4f80:	ldr	x0, [x26, #32]
    4f84:	cbz	x0, 4f98 <lzma_physmem@@XZ_5.0+0x510>
    4f88:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4f8c:	mov	x1, x19
    4f90:	ldr	x2, [x2, #3984]
    4f94:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4f98:	mov	x0, x26
    4f9c:	mov	x1, x19
    4fa0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4fa4:	ldr	x26, [x25, #32]
    4fa8:	cbz	x26, 4fe8 <lzma_physmem@@XZ_5.0+0x560>
    4fac:	ldr	x0, [x26, #24]
    4fb0:	cbz	x0, 4fc4 <lzma_physmem@@XZ_5.0+0x53c>
    4fb4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4fb8:	mov	x1, x19
    4fbc:	ldr	x2, [x2, #3984]
    4fc0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4fc4:	ldr	x0, [x26, #32]
    4fc8:	cbz	x0, 4fdc <lzma_physmem@@XZ_5.0+0x554>
    4fcc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    4fd0:	mov	x1, x19
    4fd4:	ldr	x2, [x2, #3984]
    4fd8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    4fdc:	mov	x0, x26
    4fe0:	mov	x1, x19
    4fe4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4fe8:	mov	x0, x25
    4fec:	mov	x1, x19
    4ff0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    4ff4:	mov	x0, x24
    4ff8:	mov	x1, x19
    4ffc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5000:	ldr	x24, [x23, #32]
    5004:	cbz	x24, 514c <lzma_physmem@@XZ_5.0+0x6c4>
    5008:	ldr	x25, [x24, #24]
    500c:	cbz	x25, 50a4 <lzma_physmem@@XZ_5.0+0x61c>
    5010:	ldr	x26, [x25, #24]
    5014:	cbz	x26, 5054 <lzma_physmem@@XZ_5.0+0x5cc>
    5018:	ldr	x0, [x26, #24]
    501c:	cbz	x0, 5030 <lzma_physmem@@XZ_5.0+0x5a8>
    5020:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5024:	mov	x1, x19
    5028:	ldr	x2, [x2, #3984]
    502c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5030:	ldr	x0, [x26, #32]
    5034:	cbz	x0, 5048 <lzma_physmem@@XZ_5.0+0x5c0>
    5038:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    503c:	mov	x1, x19
    5040:	ldr	x2, [x2, #3984]
    5044:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5048:	mov	x0, x26
    504c:	mov	x1, x19
    5050:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5054:	ldr	x26, [x25, #32]
    5058:	cbz	x26, 5098 <lzma_physmem@@XZ_5.0+0x610>
    505c:	ldr	x0, [x26, #24]
    5060:	cbz	x0, 5074 <lzma_physmem@@XZ_5.0+0x5ec>
    5064:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5068:	mov	x1, x19
    506c:	ldr	x2, [x2, #3984]
    5070:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5074:	ldr	x0, [x26, #32]
    5078:	cbz	x0, 508c <lzma_physmem@@XZ_5.0+0x604>
    507c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5080:	mov	x1, x19
    5084:	ldr	x2, [x2, #3984]
    5088:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    508c:	mov	x0, x26
    5090:	mov	x1, x19
    5094:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5098:	mov	x0, x25
    509c:	mov	x1, x19
    50a0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    50a4:	ldr	x25, [x24, #32]
    50a8:	cbz	x25, 5140 <lzma_physmem@@XZ_5.0+0x6b8>
    50ac:	ldr	x26, [x25, #24]
    50b0:	cbz	x26, 50f0 <lzma_physmem@@XZ_5.0+0x668>
    50b4:	ldr	x0, [x26, #24]
    50b8:	cbz	x0, 50cc <lzma_physmem@@XZ_5.0+0x644>
    50bc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    50c0:	mov	x1, x19
    50c4:	ldr	x2, [x2, #3984]
    50c8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    50cc:	ldr	x0, [x26, #32]
    50d0:	cbz	x0, 50e4 <lzma_physmem@@XZ_5.0+0x65c>
    50d4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    50d8:	mov	x1, x19
    50dc:	ldr	x2, [x2, #3984]
    50e0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    50e4:	mov	x0, x26
    50e8:	mov	x1, x19
    50ec:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    50f0:	ldr	x26, [x25, #32]
    50f4:	cbz	x26, 5134 <lzma_physmem@@XZ_5.0+0x6ac>
    50f8:	ldr	x0, [x26, #24]
    50fc:	cbz	x0, 5110 <lzma_physmem@@XZ_5.0+0x688>
    5100:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5104:	mov	x1, x19
    5108:	ldr	x2, [x2, #3984]
    510c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5110:	ldr	x0, [x26, #32]
    5114:	cbz	x0, 5128 <lzma_physmem@@XZ_5.0+0x6a0>
    5118:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    511c:	mov	x1, x19
    5120:	ldr	x2, [x2, #3984]
    5124:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5128:	mov	x0, x26
    512c:	mov	x1, x19
    5130:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5134:	mov	x0, x25
    5138:	mov	x1, x19
    513c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5140:	mov	x0, x24
    5144:	mov	x1, x19
    5148:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    514c:	mov	x0, x23
    5150:	mov	x1, x19
    5154:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5158:	ldr	x23, [x22, #32]
    515c:	cbz	x23, 5404 <lzma_physmem@@XZ_5.0+0x97c>
    5160:	ldr	x24, [x23, #24]
    5164:	cbz	x24, 52ac <lzma_physmem@@XZ_5.0+0x824>
    5168:	ldr	x25, [x24, #24]
    516c:	cbz	x25, 5204 <lzma_physmem@@XZ_5.0+0x77c>
    5170:	ldr	x26, [x25, #24]
    5174:	cbz	x26, 51b4 <lzma_physmem@@XZ_5.0+0x72c>
    5178:	ldr	x0, [x26, #24]
    517c:	cbz	x0, 5190 <lzma_physmem@@XZ_5.0+0x708>
    5180:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5184:	mov	x1, x19
    5188:	ldr	x2, [x2, #3984]
    518c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5190:	ldr	x0, [x26, #32]
    5194:	cbz	x0, 51a8 <lzma_physmem@@XZ_5.0+0x720>
    5198:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    519c:	mov	x1, x19
    51a0:	ldr	x2, [x2, #3984]
    51a4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    51a8:	mov	x0, x26
    51ac:	mov	x1, x19
    51b0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    51b4:	ldr	x26, [x25, #32]
    51b8:	cbz	x26, 51f8 <lzma_physmem@@XZ_5.0+0x770>
    51bc:	ldr	x0, [x26, #24]
    51c0:	cbz	x0, 51d4 <lzma_physmem@@XZ_5.0+0x74c>
    51c4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    51c8:	mov	x1, x19
    51cc:	ldr	x2, [x2, #3984]
    51d0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    51d4:	ldr	x0, [x26, #32]
    51d8:	cbz	x0, 51ec <lzma_physmem@@XZ_5.0+0x764>
    51dc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    51e0:	mov	x1, x19
    51e4:	ldr	x2, [x2, #3984]
    51e8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    51ec:	mov	x0, x26
    51f0:	mov	x1, x19
    51f4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    51f8:	mov	x0, x25
    51fc:	mov	x1, x19
    5200:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5204:	ldr	x25, [x24, #32]
    5208:	cbz	x25, 52a0 <lzma_physmem@@XZ_5.0+0x818>
    520c:	ldr	x26, [x25, #24]
    5210:	cbz	x26, 5250 <lzma_physmem@@XZ_5.0+0x7c8>
    5214:	ldr	x0, [x26, #24]
    5218:	cbz	x0, 522c <lzma_physmem@@XZ_5.0+0x7a4>
    521c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5220:	mov	x1, x19
    5224:	ldr	x2, [x2, #3984]
    5228:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    522c:	ldr	x0, [x26, #32]
    5230:	cbz	x0, 5244 <lzma_physmem@@XZ_5.0+0x7bc>
    5234:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5238:	mov	x1, x19
    523c:	ldr	x2, [x2, #3984]
    5240:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5244:	mov	x0, x26
    5248:	mov	x1, x19
    524c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5250:	ldr	x26, [x25, #32]
    5254:	cbz	x26, 5294 <lzma_physmem@@XZ_5.0+0x80c>
    5258:	ldr	x0, [x26, #24]
    525c:	cbz	x0, 5270 <lzma_physmem@@XZ_5.0+0x7e8>
    5260:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5264:	mov	x1, x19
    5268:	ldr	x2, [x2, #3984]
    526c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5270:	ldr	x0, [x26, #32]
    5274:	cbz	x0, 5288 <lzma_physmem@@XZ_5.0+0x800>
    5278:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    527c:	mov	x1, x19
    5280:	ldr	x2, [x2, #3984]
    5284:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5288:	mov	x0, x26
    528c:	mov	x1, x19
    5290:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5294:	mov	x0, x25
    5298:	mov	x1, x19
    529c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    52a0:	mov	x0, x24
    52a4:	mov	x1, x19
    52a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    52ac:	ldr	x24, [x23, #32]
    52b0:	cbz	x24, 53f8 <lzma_physmem@@XZ_5.0+0x970>
    52b4:	ldr	x25, [x24, #24]
    52b8:	cbz	x25, 5350 <lzma_physmem@@XZ_5.0+0x8c8>
    52bc:	ldr	x26, [x25, #24]
    52c0:	cbz	x26, 5300 <lzma_physmem@@XZ_5.0+0x878>
    52c4:	ldr	x0, [x26, #24]
    52c8:	cbz	x0, 52dc <lzma_physmem@@XZ_5.0+0x854>
    52cc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    52d0:	mov	x1, x19
    52d4:	ldr	x2, [x2, #3984]
    52d8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    52dc:	ldr	x0, [x26, #32]
    52e0:	cbz	x0, 52f4 <lzma_physmem@@XZ_5.0+0x86c>
    52e4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    52e8:	mov	x1, x19
    52ec:	ldr	x2, [x2, #3984]
    52f0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    52f4:	mov	x0, x26
    52f8:	mov	x1, x19
    52fc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5300:	ldr	x26, [x25, #32]
    5304:	cbz	x26, 5344 <lzma_physmem@@XZ_5.0+0x8bc>
    5308:	ldr	x0, [x26, #24]
    530c:	cbz	x0, 5320 <lzma_physmem@@XZ_5.0+0x898>
    5310:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5314:	mov	x1, x19
    5318:	ldr	x2, [x2, #3984]
    531c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5320:	ldr	x0, [x26, #32]
    5324:	cbz	x0, 5338 <lzma_physmem@@XZ_5.0+0x8b0>
    5328:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    532c:	mov	x1, x19
    5330:	ldr	x2, [x2, #3984]
    5334:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5338:	mov	x0, x26
    533c:	mov	x1, x19
    5340:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5344:	mov	x0, x25
    5348:	mov	x1, x19
    534c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5350:	ldr	x25, [x24, #32]
    5354:	cbz	x25, 53ec <lzma_physmem@@XZ_5.0+0x964>
    5358:	ldr	x26, [x25, #24]
    535c:	cbz	x26, 539c <lzma_physmem@@XZ_5.0+0x914>
    5360:	ldr	x0, [x26, #24]
    5364:	cbz	x0, 5378 <lzma_physmem@@XZ_5.0+0x8f0>
    5368:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    536c:	mov	x1, x19
    5370:	ldr	x2, [x2, #3984]
    5374:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5378:	ldr	x0, [x26, #32]
    537c:	cbz	x0, 5390 <lzma_physmem@@XZ_5.0+0x908>
    5380:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5384:	mov	x1, x19
    5388:	ldr	x2, [x2, #3984]
    538c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5390:	mov	x0, x26
    5394:	mov	x1, x19
    5398:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    539c:	ldr	x26, [x25, #32]
    53a0:	cbz	x26, 53e0 <lzma_physmem@@XZ_5.0+0x958>
    53a4:	ldr	x0, [x26, #24]
    53a8:	cbz	x0, 53bc <lzma_physmem@@XZ_5.0+0x934>
    53ac:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    53b0:	mov	x1, x19
    53b4:	ldr	x2, [x2, #3984]
    53b8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    53bc:	ldr	x0, [x26, #32]
    53c0:	cbz	x0, 53d4 <lzma_physmem@@XZ_5.0+0x94c>
    53c4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    53c8:	mov	x1, x19
    53cc:	ldr	x2, [x2, #3984]
    53d0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    53d4:	mov	x0, x26
    53d8:	mov	x1, x19
    53dc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    53e0:	mov	x1, x19
    53e4:	mov	x0, x25
    53e8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    53ec:	mov	x0, x24
    53f0:	mov	x1, x19
    53f4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    53f8:	mov	x0, x23
    53fc:	mov	x1, x19
    5400:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5404:	mov	x0, x22
    5408:	mov	x1, x19
    540c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5410:	ldr	x22, [x21, #32]
    5414:	cbz	x22, 597c <lzma_physmem@@XZ_5.0+0xef4>
    5418:	ldr	x23, [x22, #24]
    541c:	cbz	x23, 56c4 <lzma_physmem@@XZ_5.0+0xc3c>
    5420:	ldr	x24, [x23, #24]
    5424:	cbz	x24, 556c <lzma_physmem@@XZ_5.0+0xae4>
    5428:	ldr	x25, [x24, #24]
    542c:	cbz	x25, 54c4 <lzma_physmem@@XZ_5.0+0xa3c>
    5430:	ldr	x26, [x25, #24]
    5434:	cbz	x26, 5474 <lzma_physmem@@XZ_5.0+0x9ec>
    5438:	ldr	x0, [x26, #24]
    543c:	cbz	x0, 5450 <lzma_physmem@@XZ_5.0+0x9c8>
    5440:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5444:	mov	x1, x19
    5448:	ldr	x2, [x2, #3984]
    544c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5450:	ldr	x0, [x26, #32]
    5454:	cbz	x0, 5468 <lzma_physmem@@XZ_5.0+0x9e0>
    5458:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    545c:	mov	x1, x19
    5460:	ldr	x2, [x2, #3984]
    5464:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5468:	mov	x0, x26
    546c:	mov	x1, x19
    5470:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5474:	ldr	x26, [x25, #32]
    5478:	cbz	x26, 54b8 <lzma_physmem@@XZ_5.0+0xa30>
    547c:	ldr	x0, [x26, #24]
    5480:	cbz	x0, 5494 <lzma_physmem@@XZ_5.0+0xa0c>
    5484:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5488:	mov	x1, x19
    548c:	ldr	x2, [x2, #3984]
    5490:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5494:	ldr	x0, [x26, #32]
    5498:	cbz	x0, 54ac <lzma_physmem@@XZ_5.0+0xa24>
    549c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    54a0:	mov	x1, x19
    54a4:	ldr	x2, [x2, #3984]
    54a8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    54ac:	mov	x0, x26
    54b0:	mov	x1, x19
    54b4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    54b8:	mov	x0, x25
    54bc:	mov	x1, x19
    54c0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    54c4:	ldr	x25, [x24, #32]
    54c8:	cbz	x25, 5560 <lzma_physmem@@XZ_5.0+0xad8>
    54cc:	ldr	x26, [x25, #24]
    54d0:	cbz	x26, 5510 <lzma_physmem@@XZ_5.0+0xa88>
    54d4:	ldr	x0, [x26, #24]
    54d8:	cbz	x0, 54ec <lzma_physmem@@XZ_5.0+0xa64>
    54dc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    54e0:	mov	x1, x19
    54e4:	ldr	x2, [x2, #3984]
    54e8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    54ec:	ldr	x0, [x26, #32]
    54f0:	cbz	x0, 5504 <lzma_physmem@@XZ_5.0+0xa7c>
    54f4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    54f8:	mov	x1, x19
    54fc:	ldr	x2, [x2, #3984]
    5500:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5504:	mov	x0, x26
    5508:	mov	x1, x19
    550c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5510:	ldr	x26, [x25, #32]
    5514:	cbz	x26, 5554 <lzma_physmem@@XZ_5.0+0xacc>
    5518:	ldr	x0, [x26, #24]
    551c:	cbz	x0, 5530 <lzma_physmem@@XZ_5.0+0xaa8>
    5520:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5524:	mov	x1, x19
    5528:	ldr	x2, [x2, #3984]
    552c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5530:	ldr	x0, [x26, #32]
    5534:	cbz	x0, 5548 <lzma_physmem@@XZ_5.0+0xac0>
    5538:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    553c:	mov	x1, x19
    5540:	ldr	x2, [x2, #3984]
    5544:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5548:	mov	x0, x26
    554c:	mov	x1, x19
    5550:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5554:	mov	x0, x25
    5558:	mov	x1, x19
    555c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5560:	mov	x0, x24
    5564:	mov	x1, x19
    5568:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    556c:	ldr	x24, [x23, #32]
    5570:	cbz	x24, 56b8 <lzma_physmem@@XZ_5.0+0xc30>
    5574:	ldr	x25, [x24, #24]
    5578:	cbz	x25, 5610 <lzma_physmem@@XZ_5.0+0xb88>
    557c:	ldr	x26, [x25, #24]
    5580:	cbz	x26, 55c0 <lzma_physmem@@XZ_5.0+0xb38>
    5584:	ldr	x0, [x26, #24]
    5588:	cbz	x0, 559c <lzma_physmem@@XZ_5.0+0xb14>
    558c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5590:	mov	x1, x19
    5594:	ldr	x2, [x2, #3984]
    5598:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    559c:	ldr	x0, [x26, #32]
    55a0:	cbz	x0, 55b4 <lzma_physmem@@XZ_5.0+0xb2c>
    55a4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    55a8:	mov	x1, x19
    55ac:	ldr	x2, [x2, #3984]
    55b0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    55b4:	mov	x0, x26
    55b8:	mov	x1, x19
    55bc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    55c0:	ldr	x26, [x25, #32]
    55c4:	cbz	x26, 5604 <lzma_physmem@@XZ_5.0+0xb7c>
    55c8:	ldr	x0, [x26, #24]
    55cc:	cbz	x0, 55e0 <lzma_physmem@@XZ_5.0+0xb58>
    55d0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    55d4:	mov	x1, x19
    55d8:	ldr	x2, [x2, #3984]
    55dc:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    55e0:	ldr	x0, [x26, #32]
    55e4:	cbz	x0, 55f8 <lzma_physmem@@XZ_5.0+0xb70>
    55e8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    55ec:	mov	x1, x19
    55f0:	ldr	x2, [x2, #3984]
    55f4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    55f8:	mov	x0, x26
    55fc:	mov	x1, x19
    5600:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5604:	mov	x0, x25
    5608:	mov	x1, x19
    560c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5610:	ldr	x25, [x24, #32]
    5614:	cbz	x25, 56ac <lzma_physmem@@XZ_5.0+0xc24>
    5618:	ldr	x26, [x25, #24]
    561c:	cbz	x26, 565c <lzma_physmem@@XZ_5.0+0xbd4>
    5620:	ldr	x0, [x26, #24]
    5624:	cbz	x0, 5638 <lzma_physmem@@XZ_5.0+0xbb0>
    5628:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    562c:	mov	x1, x19
    5630:	ldr	x2, [x2, #3984]
    5634:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5638:	ldr	x0, [x26, #32]
    563c:	cbz	x0, 5650 <lzma_physmem@@XZ_5.0+0xbc8>
    5640:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5644:	mov	x1, x19
    5648:	ldr	x2, [x2, #3984]
    564c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5650:	mov	x0, x26
    5654:	mov	x1, x19
    5658:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    565c:	ldr	x26, [x25, #32]
    5660:	cbz	x26, 56a0 <lzma_physmem@@XZ_5.0+0xc18>
    5664:	ldr	x0, [x26, #24]
    5668:	cbz	x0, 567c <lzma_physmem@@XZ_5.0+0xbf4>
    566c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5670:	mov	x1, x19
    5674:	ldr	x2, [x2, #3984]
    5678:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    567c:	ldr	x0, [x26, #32]
    5680:	cbz	x0, 5694 <lzma_physmem@@XZ_5.0+0xc0c>
    5684:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5688:	mov	x1, x19
    568c:	ldr	x2, [x2, #3984]
    5690:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5694:	mov	x0, x26
    5698:	mov	x1, x19
    569c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    56a0:	mov	x0, x25
    56a4:	mov	x1, x19
    56a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    56ac:	mov	x0, x24
    56b0:	mov	x1, x19
    56b4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    56b8:	mov	x0, x23
    56bc:	mov	x1, x19
    56c0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    56c4:	ldr	x23, [x22, #32]
    56c8:	cbz	x23, 5970 <lzma_physmem@@XZ_5.0+0xee8>
    56cc:	ldr	x24, [x23, #24]
    56d0:	cbz	x24, 5818 <lzma_physmem@@XZ_5.0+0xd90>
    56d4:	ldr	x25, [x24, #24]
    56d8:	cbz	x25, 5770 <lzma_physmem@@XZ_5.0+0xce8>
    56dc:	ldr	x26, [x25, #24]
    56e0:	cbz	x26, 5720 <lzma_physmem@@XZ_5.0+0xc98>
    56e4:	ldr	x0, [x26, #24]
    56e8:	cbz	x0, 56fc <lzma_physmem@@XZ_5.0+0xc74>
    56ec:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    56f0:	mov	x1, x19
    56f4:	ldr	x2, [x2, #3984]
    56f8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    56fc:	ldr	x0, [x26, #32]
    5700:	cbz	x0, 5714 <lzma_physmem@@XZ_5.0+0xc8c>
    5704:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5708:	mov	x1, x19
    570c:	ldr	x2, [x2, #3984]
    5710:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5714:	mov	x0, x26
    5718:	mov	x1, x19
    571c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5720:	ldr	x26, [x25, #32]
    5724:	cbz	x26, 5764 <lzma_physmem@@XZ_5.0+0xcdc>
    5728:	ldr	x0, [x26, #24]
    572c:	cbz	x0, 5740 <lzma_physmem@@XZ_5.0+0xcb8>
    5730:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5734:	mov	x1, x19
    5738:	ldr	x2, [x2, #3984]
    573c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5740:	ldr	x0, [x26, #32]
    5744:	cbz	x0, 5758 <lzma_physmem@@XZ_5.0+0xcd0>
    5748:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    574c:	mov	x1, x19
    5750:	ldr	x2, [x2, #3984]
    5754:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5758:	mov	x0, x26
    575c:	mov	x1, x19
    5760:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5764:	mov	x0, x25
    5768:	mov	x1, x19
    576c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5770:	ldr	x25, [x24, #32]
    5774:	cbz	x25, 580c <lzma_physmem@@XZ_5.0+0xd84>
    5778:	ldr	x26, [x25, #24]
    577c:	cbz	x26, 57bc <lzma_physmem@@XZ_5.0+0xd34>
    5780:	ldr	x0, [x26, #24]
    5784:	cbz	x0, 5798 <lzma_physmem@@XZ_5.0+0xd10>
    5788:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    578c:	mov	x1, x19
    5790:	ldr	x2, [x2, #3984]
    5794:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5798:	ldr	x0, [x26, #32]
    579c:	cbz	x0, 57b0 <lzma_physmem@@XZ_5.0+0xd28>
    57a0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    57a4:	mov	x1, x19
    57a8:	ldr	x2, [x2, #3984]
    57ac:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    57b0:	mov	x0, x26
    57b4:	mov	x1, x19
    57b8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    57bc:	ldr	x26, [x25, #32]
    57c0:	cbz	x26, 5800 <lzma_physmem@@XZ_5.0+0xd78>
    57c4:	ldr	x0, [x26, #24]
    57c8:	cbz	x0, 57dc <lzma_physmem@@XZ_5.0+0xd54>
    57cc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    57d0:	mov	x1, x19
    57d4:	ldr	x2, [x2, #3984]
    57d8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    57dc:	ldr	x0, [x26, #32]
    57e0:	cbz	x0, 57f4 <lzma_physmem@@XZ_5.0+0xd6c>
    57e4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    57e8:	mov	x1, x19
    57ec:	ldr	x2, [x2, #3984]
    57f0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    57f4:	mov	x0, x26
    57f8:	mov	x1, x19
    57fc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5800:	mov	x0, x25
    5804:	mov	x1, x19
    5808:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    580c:	mov	x0, x24
    5810:	mov	x1, x19
    5814:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5818:	ldr	x24, [x23, #32]
    581c:	cbz	x24, 5964 <lzma_physmem@@XZ_5.0+0xedc>
    5820:	ldr	x25, [x24, #24]
    5824:	cbz	x25, 58bc <lzma_physmem@@XZ_5.0+0xe34>
    5828:	ldr	x26, [x25, #24]
    582c:	cbz	x26, 586c <lzma_physmem@@XZ_5.0+0xde4>
    5830:	ldr	x0, [x26, #24]
    5834:	cbz	x0, 5848 <lzma_physmem@@XZ_5.0+0xdc0>
    5838:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    583c:	mov	x1, x19
    5840:	ldr	x2, [x2, #3984]
    5844:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5848:	ldr	x0, [x26, #32]
    584c:	cbz	x0, 5860 <lzma_physmem@@XZ_5.0+0xdd8>
    5850:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5854:	mov	x1, x19
    5858:	ldr	x2, [x2, #3984]
    585c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5860:	mov	x0, x26
    5864:	mov	x1, x19
    5868:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    586c:	ldr	x26, [x25, #32]
    5870:	cbz	x26, 58b0 <lzma_physmem@@XZ_5.0+0xe28>
    5874:	ldr	x0, [x26, #24]
    5878:	cbz	x0, 588c <lzma_physmem@@XZ_5.0+0xe04>
    587c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5880:	mov	x1, x19
    5884:	ldr	x2, [x2, #3984]
    5888:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    588c:	ldr	x0, [x26, #32]
    5890:	cbz	x0, 58a4 <lzma_physmem@@XZ_5.0+0xe1c>
    5894:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5898:	mov	x1, x19
    589c:	ldr	x2, [x2, #3984]
    58a0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    58a4:	mov	x0, x26
    58a8:	mov	x1, x19
    58ac:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    58b0:	mov	x0, x25
    58b4:	mov	x1, x19
    58b8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    58bc:	ldr	x25, [x24, #32]
    58c0:	cbz	x25, 5958 <lzma_physmem@@XZ_5.0+0xed0>
    58c4:	ldr	x26, [x25, #24]
    58c8:	cbz	x26, 5908 <lzma_physmem@@XZ_5.0+0xe80>
    58cc:	ldr	x0, [x26, #24]
    58d0:	cbz	x0, 58e4 <lzma_physmem@@XZ_5.0+0xe5c>
    58d4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    58d8:	mov	x1, x19
    58dc:	ldr	x2, [x2, #3984]
    58e0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    58e4:	ldr	x0, [x26, #32]
    58e8:	cbz	x0, 58fc <lzma_physmem@@XZ_5.0+0xe74>
    58ec:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    58f0:	mov	x1, x19
    58f4:	ldr	x2, [x2, #3984]
    58f8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    58fc:	mov	x0, x26
    5900:	mov	x1, x19
    5904:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5908:	ldr	x26, [x25, #32]
    590c:	cbz	x26, 594c <lzma_physmem@@XZ_5.0+0xec4>
    5910:	ldr	x0, [x26, #24]
    5914:	cbz	x0, 5928 <lzma_physmem@@XZ_5.0+0xea0>
    5918:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    591c:	mov	x1, x19
    5920:	ldr	x2, [x2, #3984]
    5924:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5928:	ldr	x0, [x26, #32]
    592c:	cbz	x0, 5940 <lzma_physmem@@XZ_5.0+0xeb8>
    5930:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5934:	mov	x1, x19
    5938:	ldr	x2, [x2, #3984]
    593c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5940:	mov	x0, x26
    5944:	mov	x1, x19
    5948:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    594c:	mov	x0, x25
    5950:	mov	x1, x19
    5954:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5958:	mov	x0, x24
    595c:	mov	x1, x19
    5960:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5964:	mov	x0, x23
    5968:	mov	x1, x19
    596c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5970:	mov	x0, x22
    5974:	mov	x1, x19
    5978:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    597c:	mov	x0, x21
    5980:	mov	x1, x19
    5984:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5988:	ldp	x23, x24, [sp, #48]
    598c:	ldp	x25, x26, [sp, #64]
    5990:	mov	x1, x19
    5994:	mov	x0, x20
    5998:	ldp	x19, x20, [sp, #16]
    599c:	ldp	x21, x22, [sp, #32]
    59a0:	ldp	x29, x30, [sp], #80
    59a4:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    59a8:	stp	x29, x30, [sp, #-80]!
    59ac:	mov	x29, sp
    59b0:	stp	x19, x20, [sp, #16]
    59b4:	mov	x20, x0
    59b8:	mov	x19, x1
    59bc:	ldr	x0, [x0, #24]
    59c0:	stp	x21, x22, [sp, #32]
    59c4:	cbz	x0, 59cc <lzma_physmem@@XZ_5.0+0xf44>
    59c8:	bl	59a8 <lzma_physmem@@XZ_5.0+0xf20>
    59cc:	ldr	x0, [x20, #32]
    59d0:	cbz	x0, 59dc <lzma_physmem@@XZ_5.0+0xf54>
    59d4:	mov	x1, x19
    59d8:	bl	59a8 <lzma_physmem@@XZ_5.0+0xf20>
    59dc:	ldr	x21, [x20, #56]
    59e0:	cbz	x21, 64d8 <lzma_physmem@@XZ_5.0+0x1a50>
    59e4:	ldr	x22, [x21, #24]
    59e8:	stp	x23, x24, [sp, #48]
    59ec:	stp	x25, x26, [sp, #64]
    59f0:	cbz	x22, 5f58 <lzma_physmem@@XZ_5.0+0x14d0>
    59f4:	ldr	x23, [x22, #24]
    59f8:	cbz	x23, 5ca0 <lzma_physmem@@XZ_5.0+0x1218>
    59fc:	ldr	x24, [x23, #24]
    5a00:	cbz	x24, 5b48 <lzma_physmem@@XZ_5.0+0x10c0>
    5a04:	ldr	x25, [x24, #24]
    5a08:	cbz	x25, 5aa0 <lzma_physmem@@XZ_5.0+0x1018>
    5a0c:	ldr	x26, [x25, #24]
    5a10:	cbz	x26, 5a50 <lzma_physmem@@XZ_5.0+0xfc8>
    5a14:	ldr	x0, [x26, #24]
    5a18:	cbz	x0, 5a2c <lzma_physmem@@XZ_5.0+0xfa4>
    5a1c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5a20:	mov	x1, x19
    5a24:	ldr	x2, [x2, #3984]
    5a28:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5a2c:	ldr	x0, [x26, #32]
    5a30:	cbz	x0, 5a44 <lzma_physmem@@XZ_5.0+0xfbc>
    5a34:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5a38:	mov	x1, x19
    5a3c:	ldr	x2, [x2, #3984]
    5a40:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5a44:	mov	x0, x26
    5a48:	mov	x1, x19
    5a4c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5a50:	ldr	x26, [x25, #32]
    5a54:	cbz	x26, 5a94 <lzma_physmem@@XZ_5.0+0x100c>
    5a58:	ldr	x0, [x26, #24]
    5a5c:	cbz	x0, 5a70 <lzma_physmem@@XZ_5.0+0xfe8>
    5a60:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5a64:	mov	x1, x19
    5a68:	ldr	x2, [x2, #3984]
    5a6c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5a70:	ldr	x0, [x26, #32]
    5a74:	cbz	x0, 5a88 <lzma_physmem@@XZ_5.0+0x1000>
    5a78:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5a7c:	mov	x1, x19
    5a80:	ldr	x2, [x2, #3984]
    5a84:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5a88:	mov	x0, x26
    5a8c:	mov	x1, x19
    5a90:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5a94:	mov	x0, x25
    5a98:	mov	x1, x19
    5a9c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5aa0:	ldr	x25, [x24, #32]
    5aa4:	cbz	x25, 5b3c <lzma_physmem@@XZ_5.0+0x10b4>
    5aa8:	ldr	x26, [x25, #24]
    5aac:	cbz	x26, 5aec <lzma_physmem@@XZ_5.0+0x1064>
    5ab0:	ldr	x0, [x26, #24]
    5ab4:	cbz	x0, 5ac8 <lzma_physmem@@XZ_5.0+0x1040>
    5ab8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5abc:	mov	x1, x19
    5ac0:	ldr	x2, [x2, #3984]
    5ac4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5ac8:	ldr	x0, [x26, #32]
    5acc:	cbz	x0, 5ae0 <lzma_physmem@@XZ_5.0+0x1058>
    5ad0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5ad4:	mov	x1, x19
    5ad8:	ldr	x2, [x2, #3984]
    5adc:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5ae0:	mov	x0, x26
    5ae4:	mov	x1, x19
    5ae8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5aec:	ldr	x26, [x25, #32]
    5af0:	cbz	x26, 5b30 <lzma_physmem@@XZ_5.0+0x10a8>
    5af4:	ldr	x0, [x26, #24]
    5af8:	cbz	x0, 5b0c <lzma_physmem@@XZ_5.0+0x1084>
    5afc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5b00:	mov	x1, x19
    5b04:	ldr	x2, [x2, #3984]
    5b08:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5b0c:	ldr	x0, [x26, #32]
    5b10:	cbz	x0, 5b24 <lzma_physmem@@XZ_5.0+0x109c>
    5b14:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5b18:	mov	x1, x19
    5b1c:	ldr	x2, [x2, #3984]
    5b20:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5b24:	mov	x0, x26
    5b28:	mov	x1, x19
    5b2c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5b30:	mov	x0, x25
    5b34:	mov	x1, x19
    5b38:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5b3c:	mov	x0, x24
    5b40:	mov	x1, x19
    5b44:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5b48:	ldr	x24, [x23, #32]
    5b4c:	cbz	x24, 5c94 <lzma_physmem@@XZ_5.0+0x120c>
    5b50:	ldr	x25, [x24, #24]
    5b54:	cbz	x25, 5bec <lzma_physmem@@XZ_5.0+0x1164>
    5b58:	ldr	x26, [x25, #24]
    5b5c:	cbz	x26, 5b9c <lzma_physmem@@XZ_5.0+0x1114>
    5b60:	ldr	x0, [x26, #24]
    5b64:	cbz	x0, 5b78 <lzma_physmem@@XZ_5.0+0x10f0>
    5b68:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5b6c:	mov	x1, x19
    5b70:	ldr	x2, [x2, #3984]
    5b74:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5b78:	ldr	x0, [x26, #32]
    5b7c:	cbz	x0, 5b90 <lzma_physmem@@XZ_5.0+0x1108>
    5b80:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5b84:	mov	x1, x19
    5b88:	ldr	x2, [x2, #3984]
    5b8c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5b90:	mov	x0, x26
    5b94:	mov	x1, x19
    5b98:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5b9c:	ldr	x26, [x25, #32]
    5ba0:	cbz	x26, 5be0 <lzma_physmem@@XZ_5.0+0x1158>
    5ba4:	ldr	x0, [x26, #24]
    5ba8:	cbz	x0, 5bbc <lzma_physmem@@XZ_5.0+0x1134>
    5bac:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5bb0:	mov	x1, x19
    5bb4:	ldr	x2, [x2, #3984]
    5bb8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5bbc:	ldr	x0, [x26, #32]
    5bc0:	cbz	x0, 5bd4 <lzma_physmem@@XZ_5.0+0x114c>
    5bc4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5bc8:	mov	x1, x19
    5bcc:	ldr	x2, [x2, #3984]
    5bd0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5bd4:	mov	x0, x26
    5bd8:	mov	x1, x19
    5bdc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5be0:	mov	x0, x25
    5be4:	mov	x1, x19
    5be8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5bec:	ldr	x25, [x24, #32]
    5bf0:	cbz	x25, 5c88 <lzma_physmem@@XZ_5.0+0x1200>
    5bf4:	ldr	x26, [x25, #24]
    5bf8:	cbz	x26, 5c38 <lzma_physmem@@XZ_5.0+0x11b0>
    5bfc:	ldr	x0, [x26, #24]
    5c00:	cbz	x0, 5c14 <lzma_physmem@@XZ_5.0+0x118c>
    5c04:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5c08:	mov	x1, x19
    5c0c:	ldr	x2, [x2, #3984]
    5c10:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5c14:	ldr	x0, [x26, #32]
    5c18:	cbz	x0, 5c2c <lzma_physmem@@XZ_5.0+0x11a4>
    5c1c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5c20:	mov	x1, x19
    5c24:	ldr	x2, [x2, #3984]
    5c28:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5c2c:	mov	x0, x26
    5c30:	mov	x1, x19
    5c34:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5c38:	ldr	x26, [x25, #32]
    5c3c:	cbz	x26, 5c7c <lzma_physmem@@XZ_5.0+0x11f4>
    5c40:	ldr	x0, [x26, #24]
    5c44:	cbz	x0, 5c58 <lzma_physmem@@XZ_5.0+0x11d0>
    5c48:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5c4c:	mov	x1, x19
    5c50:	ldr	x2, [x2, #3984]
    5c54:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5c58:	ldr	x0, [x26, #32]
    5c5c:	cbz	x0, 5c70 <lzma_physmem@@XZ_5.0+0x11e8>
    5c60:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5c64:	mov	x1, x19
    5c68:	ldr	x2, [x2, #3984]
    5c6c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5c70:	mov	x0, x26
    5c74:	mov	x1, x19
    5c78:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5c7c:	mov	x0, x25
    5c80:	mov	x1, x19
    5c84:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5c88:	mov	x0, x24
    5c8c:	mov	x1, x19
    5c90:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5c94:	mov	x0, x23
    5c98:	mov	x1, x19
    5c9c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5ca0:	ldr	x23, [x22, #32]
    5ca4:	cbz	x23, 5f4c <lzma_physmem@@XZ_5.0+0x14c4>
    5ca8:	ldr	x24, [x23, #24]
    5cac:	cbz	x24, 5df4 <lzma_physmem@@XZ_5.0+0x136c>
    5cb0:	ldr	x25, [x24, #24]
    5cb4:	cbz	x25, 5d4c <lzma_physmem@@XZ_5.0+0x12c4>
    5cb8:	ldr	x26, [x25, #24]
    5cbc:	cbz	x26, 5cfc <lzma_physmem@@XZ_5.0+0x1274>
    5cc0:	ldr	x0, [x26, #24]
    5cc4:	cbz	x0, 5cd8 <lzma_physmem@@XZ_5.0+0x1250>
    5cc8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5ccc:	mov	x1, x19
    5cd0:	ldr	x2, [x2, #3984]
    5cd4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5cd8:	ldr	x0, [x26, #32]
    5cdc:	cbz	x0, 5cf0 <lzma_physmem@@XZ_5.0+0x1268>
    5ce0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5ce4:	mov	x1, x19
    5ce8:	ldr	x2, [x2, #3984]
    5cec:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5cf0:	mov	x0, x26
    5cf4:	mov	x1, x19
    5cf8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5cfc:	ldr	x26, [x25, #32]
    5d00:	cbz	x26, 5d40 <lzma_physmem@@XZ_5.0+0x12b8>
    5d04:	ldr	x0, [x26, #24]
    5d08:	cbz	x0, 5d1c <lzma_physmem@@XZ_5.0+0x1294>
    5d0c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5d10:	mov	x1, x19
    5d14:	ldr	x2, [x2, #3984]
    5d18:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5d1c:	ldr	x0, [x26, #32]
    5d20:	cbz	x0, 5d34 <lzma_physmem@@XZ_5.0+0x12ac>
    5d24:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5d28:	mov	x1, x19
    5d2c:	ldr	x2, [x2, #3984]
    5d30:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5d34:	mov	x0, x26
    5d38:	mov	x1, x19
    5d3c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5d40:	mov	x0, x25
    5d44:	mov	x1, x19
    5d48:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5d4c:	ldr	x25, [x24, #32]
    5d50:	cbz	x25, 5de8 <lzma_physmem@@XZ_5.0+0x1360>
    5d54:	ldr	x26, [x25, #24]
    5d58:	cbz	x26, 5d98 <lzma_physmem@@XZ_5.0+0x1310>
    5d5c:	ldr	x0, [x26, #24]
    5d60:	cbz	x0, 5d74 <lzma_physmem@@XZ_5.0+0x12ec>
    5d64:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5d68:	mov	x1, x19
    5d6c:	ldr	x2, [x2, #3984]
    5d70:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5d74:	ldr	x0, [x26, #32]
    5d78:	cbz	x0, 5d8c <lzma_physmem@@XZ_5.0+0x1304>
    5d7c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5d80:	mov	x1, x19
    5d84:	ldr	x2, [x2, #3984]
    5d88:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5d8c:	mov	x0, x26
    5d90:	mov	x1, x19
    5d94:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5d98:	ldr	x26, [x25, #32]
    5d9c:	cbz	x26, 5ddc <lzma_physmem@@XZ_5.0+0x1354>
    5da0:	ldr	x0, [x26, #24]
    5da4:	cbz	x0, 5db8 <lzma_physmem@@XZ_5.0+0x1330>
    5da8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5dac:	mov	x1, x19
    5db0:	ldr	x2, [x2, #3984]
    5db4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5db8:	ldr	x0, [x26, #32]
    5dbc:	cbz	x0, 5dd0 <lzma_physmem@@XZ_5.0+0x1348>
    5dc0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5dc4:	mov	x1, x19
    5dc8:	ldr	x2, [x2, #3984]
    5dcc:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5dd0:	mov	x0, x26
    5dd4:	mov	x1, x19
    5dd8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5ddc:	mov	x0, x25
    5de0:	mov	x1, x19
    5de4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5de8:	mov	x0, x24
    5dec:	mov	x1, x19
    5df0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5df4:	ldr	x24, [x23, #32]
    5df8:	cbz	x24, 5f40 <lzma_physmem@@XZ_5.0+0x14b8>
    5dfc:	ldr	x25, [x24, #24]
    5e00:	cbz	x25, 5e98 <lzma_physmem@@XZ_5.0+0x1410>
    5e04:	ldr	x26, [x25, #24]
    5e08:	cbz	x26, 5e48 <lzma_physmem@@XZ_5.0+0x13c0>
    5e0c:	ldr	x0, [x26, #24]
    5e10:	cbz	x0, 5e24 <lzma_physmem@@XZ_5.0+0x139c>
    5e14:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5e18:	mov	x1, x19
    5e1c:	ldr	x2, [x2, #3984]
    5e20:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5e24:	ldr	x0, [x26, #32]
    5e28:	cbz	x0, 5e3c <lzma_physmem@@XZ_5.0+0x13b4>
    5e2c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5e30:	mov	x1, x19
    5e34:	ldr	x2, [x2, #3984]
    5e38:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5e3c:	mov	x0, x26
    5e40:	mov	x1, x19
    5e44:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5e48:	ldr	x26, [x25, #32]
    5e4c:	cbz	x26, 5e8c <lzma_physmem@@XZ_5.0+0x1404>
    5e50:	ldr	x0, [x26, #24]
    5e54:	cbz	x0, 5e68 <lzma_physmem@@XZ_5.0+0x13e0>
    5e58:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5e5c:	mov	x1, x19
    5e60:	ldr	x2, [x2, #3984]
    5e64:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5e68:	ldr	x0, [x26, #32]
    5e6c:	cbz	x0, 5e80 <lzma_physmem@@XZ_5.0+0x13f8>
    5e70:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5e74:	mov	x1, x19
    5e78:	ldr	x2, [x2, #3984]
    5e7c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5e80:	mov	x0, x26
    5e84:	mov	x1, x19
    5e88:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5e8c:	mov	x0, x25
    5e90:	mov	x1, x19
    5e94:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5e98:	ldr	x25, [x24, #32]
    5e9c:	cbz	x25, 5f34 <lzma_physmem@@XZ_5.0+0x14ac>
    5ea0:	ldr	x26, [x25, #24]
    5ea4:	cbz	x26, 5ee4 <lzma_physmem@@XZ_5.0+0x145c>
    5ea8:	ldr	x0, [x26, #24]
    5eac:	cbz	x0, 5ec0 <lzma_physmem@@XZ_5.0+0x1438>
    5eb0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5eb4:	mov	x1, x19
    5eb8:	ldr	x2, [x2, #3984]
    5ebc:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5ec0:	ldr	x0, [x26, #32]
    5ec4:	cbz	x0, 5ed8 <lzma_physmem@@XZ_5.0+0x1450>
    5ec8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5ecc:	mov	x1, x19
    5ed0:	ldr	x2, [x2, #3984]
    5ed4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5ed8:	mov	x0, x26
    5edc:	mov	x1, x19
    5ee0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5ee4:	ldr	x26, [x25, #32]
    5ee8:	cbz	x26, 5f28 <lzma_physmem@@XZ_5.0+0x14a0>
    5eec:	ldr	x0, [x26, #24]
    5ef0:	cbz	x0, 5f04 <lzma_physmem@@XZ_5.0+0x147c>
    5ef4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5ef8:	mov	x1, x19
    5efc:	ldr	x2, [x2, #3984]
    5f00:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5f04:	ldr	x0, [x26, #32]
    5f08:	cbz	x0, 5f1c <lzma_physmem@@XZ_5.0+0x1494>
    5f0c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5f10:	mov	x1, x19
    5f14:	ldr	x2, [x2, #3984]
    5f18:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5f1c:	mov	x0, x26
    5f20:	mov	x1, x19
    5f24:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5f28:	mov	x0, x25
    5f2c:	mov	x1, x19
    5f30:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5f34:	mov	x0, x24
    5f38:	mov	x1, x19
    5f3c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5f40:	mov	x0, x23
    5f44:	mov	x1, x19
    5f48:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5f4c:	mov	x0, x22
    5f50:	mov	x1, x19
    5f54:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5f58:	ldr	x22, [x21, #32]
    5f5c:	cbz	x22, 64c4 <lzma_physmem@@XZ_5.0+0x1a3c>
    5f60:	ldr	x23, [x22, #24]
    5f64:	cbz	x23, 620c <lzma_physmem@@XZ_5.0+0x1784>
    5f68:	ldr	x24, [x23, #24]
    5f6c:	cbz	x24, 60b4 <lzma_physmem@@XZ_5.0+0x162c>
    5f70:	ldr	x25, [x24, #24]
    5f74:	cbz	x25, 600c <lzma_physmem@@XZ_5.0+0x1584>
    5f78:	ldr	x26, [x25, #24]
    5f7c:	cbz	x26, 5fbc <lzma_physmem@@XZ_5.0+0x1534>
    5f80:	ldr	x0, [x26, #24]
    5f84:	cbz	x0, 5f98 <lzma_physmem@@XZ_5.0+0x1510>
    5f88:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5f8c:	mov	x1, x19
    5f90:	ldr	x2, [x2, #3984]
    5f94:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5f98:	ldr	x0, [x26, #32]
    5f9c:	cbz	x0, 5fb0 <lzma_physmem@@XZ_5.0+0x1528>
    5fa0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5fa4:	mov	x1, x19
    5fa8:	ldr	x2, [x2, #3984]
    5fac:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5fb0:	mov	x0, x26
    5fb4:	mov	x1, x19
    5fb8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    5fbc:	ldr	x26, [x25, #32]
    5fc0:	cbz	x26, 6000 <lzma_physmem@@XZ_5.0+0x1578>
    5fc4:	ldr	x0, [x26, #24]
    5fc8:	cbz	x0, 5fdc <lzma_physmem@@XZ_5.0+0x1554>
    5fcc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5fd0:	mov	x1, x19
    5fd4:	ldr	x2, [x2, #3984]
    5fd8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5fdc:	ldr	x0, [x26, #32]
    5fe0:	cbz	x0, 5ff4 <lzma_physmem@@XZ_5.0+0x156c>
    5fe4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    5fe8:	mov	x1, x19
    5fec:	ldr	x2, [x2, #3984]
    5ff0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    5ff4:	mov	x0, x26
    5ff8:	mov	x1, x19
    5ffc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6000:	mov	x0, x25
    6004:	mov	x1, x19
    6008:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    600c:	ldr	x25, [x24, #32]
    6010:	cbz	x25, 60a8 <lzma_physmem@@XZ_5.0+0x1620>
    6014:	ldr	x26, [x25, #24]
    6018:	cbz	x26, 6058 <lzma_physmem@@XZ_5.0+0x15d0>
    601c:	ldr	x0, [x26, #24]
    6020:	cbz	x0, 6034 <lzma_physmem@@XZ_5.0+0x15ac>
    6024:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6028:	mov	x1, x19
    602c:	ldr	x2, [x2, #3984]
    6030:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6034:	ldr	x0, [x26, #32]
    6038:	cbz	x0, 604c <lzma_physmem@@XZ_5.0+0x15c4>
    603c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6040:	mov	x1, x19
    6044:	ldr	x2, [x2, #3984]
    6048:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    604c:	mov	x0, x26
    6050:	mov	x1, x19
    6054:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6058:	ldr	x26, [x25, #32]
    605c:	cbz	x26, 609c <lzma_physmem@@XZ_5.0+0x1614>
    6060:	ldr	x0, [x26, #24]
    6064:	cbz	x0, 6078 <lzma_physmem@@XZ_5.0+0x15f0>
    6068:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    606c:	mov	x1, x19
    6070:	ldr	x2, [x2, #3984]
    6074:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6078:	ldr	x0, [x26, #32]
    607c:	cbz	x0, 6090 <lzma_physmem@@XZ_5.0+0x1608>
    6080:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6084:	mov	x1, x19
    6088:	ldr	x2, [x2, #3984]
    608c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6090:	mov	x0, x26
    6094:	mov	x1, x19
    6098:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    609c:	mov	x0, x25
    60a0:	mov	x1, x19
    60a4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    60a8:	mov	x0, x24
    60ac:	mov	x1, x19
    60b0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    60b4:	ldr	x24, [x23, #32]
    60b8:	cbz	x24, 6200 <lzma_physmem@@XZ_5.0+0x1778>
    60bc:	ldr	x25, [x24, #24]
    60c0:	cbz	x25, 6158 <lzma_physmem@@XZ_5.0+0x16d0>
    60c4:	ldr	x26, [x25, #24]
    60c8:	cbz	x26, 6108 <lzma_physmem@@XZ_5.0+0x1680>
    60cc:	ldr	x0, [x26, #24]
    60d0:	cbz	x0, 60e4 <lzma_physmem@@XZ_5.0+0x165c>
    60d4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    60d8:	mov	x1, x19
    60dc:	ldr	x2, [x2, #3984]
    60e0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    60e4:	ldr	x0, [x26, #32]
    60e8:	cbz	x0, 60fc <lzma_physmem@@XZ_5.0+0x1674>
    60ec:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    60f0:	mov	x1, x19
    60f4:	ldr	x2, [x2, #3984]
    60f8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    60fc:	mov	x0, x26
    6100:	mov	x1, x19
    6104:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6108:	ldr	x26, [x25, #32]
    610c:	cbz	x26, 614c <lzma_physmem@@XZ_5.0+0x16c4>
    6110:	ldr	x0, [x26, #24]
    6114:	cbz	x0, 6128 <lzma_physmem@@XZ_5.0+0x16a0>
    6118:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    611c:	mov	x1, x19
    6120:	ldr	x2, [x2, #3984]
    6124:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6128:	ldr	x0, [x26, #32]
    612c:	cbz	x0, 6140 <lzma_physmem@@XZ_5.0+0x16b8>
    6130:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6134:	mov	x1, x19
    6138:	ldr	x2, [x2, #3984]
    613c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6140:	mov	x0, x26
    6144:	mov	x1, x19
    6148:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    614c:	mov	x0, x25
    6150:	mov	x1, x19
    6154:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6158:	ldr	x25, [x24, #32]
    615c:	cbz	x25, 61f4 <lzma_physmem@@XZ_5.0+0x176c>
    6160:	ldr	x26, [x25, #24]
    6164:	cbz	x26, 61a4 <lzma_physmem@@XZ_5.0+0x171c>
    6168:	ldr	x0, [x26, #24]
    616c:	cbz	x0, 6180 <lzma_physmem@@XZ_5.0+0x16f8>
    6170:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6174:	mov	x1, x19
    6178:	ldr	x2, [x2, #3984]
    617c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6180:	ldr	x0, [x26, #32]
    6184:	cbz	x0, 6198 <lzma_physmem@@XZ_5.0+0x1710>
    6188:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    618c:	mov	x1, x19
    6190:	ldr	x2, [x2, #3984]
    6194:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6198:	mov	x0, x26
    619c:	mov	x1, x19
    61a0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    61a4:	ldr	x26, [x25, #32]
    61a8:	cbz	x26, 61e8 <lzma_physmem@@XZ_5.0+0x1760>
    61ac:	ldr	x0, [x26, #24]
    61b0:	cbz	x0, 61c4 <lzma_physmem@@XZ_5.0+0x173c>
    61b4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    61b8:	mov	x1, x19
    61bc:	ldr	x2, [x2, #3984]
    61c0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    61c4:	ldr	x0, [x26, #32]
    61c8:	cbz	x0, 61dc <lzma_physmem@@XZ_5.0+0x1754>
    61cc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    61d0:	mov	x1, x19
    61d4:	ldr	x2, [x2, #3984]
    61d8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    61dc:	mov	x0, x26
    61e0:	mov	x1, x19
    61e4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    61e8:	mov	x0, x25
    61ec:	mov	x1, x19
    61f0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    61f4:	mov	x0, x24
    61f8:	mov	x1, x19
    61fc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6200:	mov	x0, x23
    6204:	mov	x1, x19
    6208:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    620c:	ldr	x23, [x22, #32]
    6210:	cbz	x23, 64b8 <lzma_physmem@@XZ_5.0+0x1a30>
    6214:	ldr	x24, [x23, #24]
    6218:	cbz	x24, 6360 <lzma_physmem@@XZ_5.0+0x18d8>
    621c:	ldr	x25, [x24, #24]
    6220:	cbz	x25, 62b8 <lzma_physmem@@XZ_5.0+0x1830>
    6224:	ldr	x26, [x25, #24]
    6228:	cbz	x26, 6268 <lzma_physmem@@XZ_5.0+0x17e0>
    622c:	ldr	x0, [x26, #24]
    6230:	cbz	x0, 6244 <lzma_physmem@@XZ_5.0+0x17bc>
    6234:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6238:	mov	x1, x19
    623c:	ldr	x2, [x2, #3984]
    6240:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6244:	ldr	x0, [x26, #32]
    6248:	cbz	x0, 625c <lzma_physmem@@XZ_5.0+0x17d4>
    624c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6250:	mov	x1, x19
    6254:	ldr	x2, [x2, #3984]
    6258:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    625c:	mov	x0, x26
    6260:	mov	x1, x19
    6264:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6268:	ldr	x26, [x25, #32]
    626c:	cbz	x26, 62ac <lzma_physmem@@XZ_5.0+0x1824>
    6270:	ldr	x0, [x26, #24]
    6274:	cbz	x0, 6288 <lzma_physmem@@XZ_5.0+0x1800>
    6278:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    627c:	mov	x1, x19
    6280:	ldr	x2, [x2, #3984]
    6284:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6288:	ldr	x0, [x26, #32]
    628c:	cbz	x0, 62a0 <lzma_physmem@@XZ_5.0+0x1818>
    6290:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6294:	mov	x1, x19
    6298:	ldr	x2, [x2, #3984]
    629c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    62a0:	mov	x0, x26
    62a4:	mov	x1, x19
    62a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    62ac:	mov	x0, x25
    62b0:	mov	x1, x19
    62b4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    62b8:	ldr	x25, [x24, #32]
    62bc:	cbz	x25, 6354 <lzma_physmem@@XZ_5.0+0x18cc>
    62c0:	ldr	x26, [x25, #24]
    62c4:	cbz	x26, 6304 <lzma_physmem@@XZ_5.0+0x187c>
    62c8:	ldr	x0, [x26, #24]
    62cc:	cbz	x0, 62e0 <lzma_physmem@@XZ_5.0+0x1858>
    62d0:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    62d4:	mov	x1, x19
    62d8:	ldr	x2, [x2, #3984]
    62dc:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    62e0:	ldr	x0, [x26, #32]
    62e4:	cbz	x0, 62f8 <lzma_physmem@@XZ_5.0+0x1870>
    62e8:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    62ec:	mov	x1, x19
    62f0:	ldr	x2, [x2, #3984]
    62f4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    62f8:	mov	x0, x26
    62fc:	mov	x1, x19
    6300:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6304:	ldr	x26, [x25, #32]
    6308:	cbz	x26, 6348 <lzma_physmem@@XZ_5.0+0x18c0>
    630c:	ldr	x0, [x26, #24]
    6310:	cbz	x0, 6324 <lzma_physmem@@XZ_5.0+0x189c>
    6314:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6318:	mov	x1, x19
    631c:	ldr	x2, [x2, #3984]
    6320:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6324:	ldr	x0, [x26, #32]
    6328:	cbz	x0, 633c <lzma_physmem@@XZ_5.0+0x18b4>
    632c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6330:	mov	x1, x19
    6334:	ldr	x2, [x2, #3984]
    6338:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    633c:	mov	x0, x26
    6340:	mov	x1, x19
    6344:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6348:	mov	x0, x25
    634c:	mov	x1, x19
    6350:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6354:	mov	x0, x24
    6358:	mov	x1, x19
    635c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6360:	ldr	x24, [x23, #32]
    6364:	cbz	x24, 64ac <lzma_physmem@@XZ_5.0+0x1a24>
    6368:	ldr	x25, [x24, #24]
    636c:	cbz	x25, 6404 <lzma_physmem@@XZ_5.0+0x197c>
    6370:	ldr	x26, [x25, #24]
    6374:	cbz	x26, 63b4 <lzma_physmem@@XZ_5.0+0x192c>
    6378:	ldr	x0, [x26, #24]
    637c:	cbz	x0, 6390 <lzma_physmem@@XZ_5.0+0x1908>
    6380:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6384:	mov	x1, x19
    6388:	ldr	x2, [x2, #3984]
    638c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6390:	ldr	x0, [x26, #32]
    6394:	cbz	x0, 63a8 <lzma_physmem@@XZ_5.0+0x1920>
    6398:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    639c:	mov	x1, x19
    63a0:	ldr	x2, [x2, #3984]
    63a4:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    63a8:	mov	x0, x26
    63ac:	mov	x1, x19
    63b0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    63b4:	ldr	x26, [x25, #32]
    63b8:	cbz	x26, 63f8 <lzma_physmem@@XZ_5.0+0x1970>
    63bc:	ldr	x0, [x26, #24]
    63c0:	cbz	x0, 63d4 <lzma_physmem@@XZ_5.0+0x194c>
    63c4:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    63c8:	mov	x1, x19
    63cc:	ldr	x2, [x2, #3984]
    63d0:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    63d4:	ldr	x0, [x26, #32]
    63d8:	cbz	x0, 63ec <lzma_physmem@@XZ_5.0+0x1964>
    63dc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    63e0:	mov	x1, x19
    63e4:	ldr	x2, [x2, #3984]
    63e8:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    63ec:	mov	x0, x26
    63f0:	mov	x1, x19
    63f4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    63f8:	mov	x0, x25
    63fc:	mov	x1, x19
    6400:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6404:	ldr	x25, [x24, #32]
    6408:	cbz	x25, 64a0 <lzma_physmem@@XZ_5.0+0x1a18>
    640c:	ldr	x26, [x25, #24]
    6410:	cbz	x26, 6450 <lzma_physmem@@XZ_5.0+0x19c8>
    6414:	ldr	x0, [x26, #24]
    6418:	cbz	x0, 642c <lzma_physmem@@XZ_5.0+0x19a4>
    641c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6420:	mov	x1, x19
    6424:	ldr	x2, [x2, #3984]
    6428:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    642c:	ldr	x0, [x26, #32]
    6430:	cbz	x0, 6444 <lzma_physmem@@XZ_5.0+0x19bc>
    6434:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6438:	mov	x1, x19
    643c:	ldr	x2, [x2, #3984]
    6440:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6444:	mov	x0, x26
    6448:	mov	x1, x19
    644c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6450:	ldr	x26, [x25, #32]
    6454:	cbz	x26, 6494 <lzma_physmem@@XZ_5.0+0x1a0c>
    6458:	ldr	x0, [x26, #24]
    645c:	cbz	x0, 6470 <lzma_physmem@@XZ_5.0+0x19e8>
    6460:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    6464:	mov	x1, x19
    6468:	ldr	x2, [x2, #3984]
    646c:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6470:	ldr	x0, [x26, #32]
    6474:	cbz	x0, 6488 <lzma_physmem@@XZ_5.0+0x1a00>
    6478:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    647c:	mov	x1, x19
    6480:	ldr	x2, [x2, #3984]
    6484:	bl	4a90 <lzma_physmem@@XZ_5.0+0x8>
    6488:	mov	x0, x26
    648c:	mov	x1, x19
    6490:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6494:	mov	x0, x25
    6498:	mov	x1, x19
    649c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    64a0:	mov	x0, x24
    64a4:	mov	x1, x19
    64a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    64ac:	mov	x0, x23
    64b0:	mov	x1, x19
    64b4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    64b8:	mov	x0, x22
    64bc:	mov	x1, x19
    64c0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    64c4:	mov	x0, x21
    64c8:	mov	x1, x19
    64cc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    64d0:	ldp	x23, x24, [sp, #48]
    64d4:	ldp	x25, x26, [sp, #64]
    64d8:	mov	x1, x19
    64dc:	mov	x0, x20
    64e0:	ldp	x19, x20, [sp, #16]
    64e4:	ldp	x21, x22, [sp, #32]
    64e8:	ldp	x29, x30, [sp], #80
    64ec:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>

00000000000064f0 <lzma_index_init@@XZ_5.0>:
    64f0:	stp	x29, x30, [sp, #-32]!
    64f4:	mov	x29, sp
    64f8:	stp	x19, x20, [sp, #16]
    64fc:	mov	x20, x0
    6500:	mov	x1, x20
    6504:	mov	x0, #0x50                  	// #80
    6508:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    650c:	mov	x19, x0
    6510:	cbz	x0, 658c <lzma_index_init@@XZ_5.0+0x9c>
    6514:	movi	v0.4s, #0x0
    6518:	mov	x2, #0x200                 	// #512
    651c:	str	xzr, [x19, #16]
    6520:	mov	x1, x20
    6524:	str	wzr, [x19, #24]
    6528:	mov	x0, #0xa8                  	// #168
    652c:	str	x2, [x19, #64]
    6530:	str	wzr, [x19, #72]
    6534:	str	q0, [x19]
    6538:	stp	q0, q0, [x19, #32]
    653c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6540:	mov	x2, x0
    6544:	movi	v0.4s, #0x0
    6548:	cbz	x0, 659c <lzma_index_init@@XZ_5.0+0xac>
    654c:	mov	x3, x0
    6550:	mov	w0, #0x1                   	// #1
    6554:	str	xzr, [x2, #32]
    6558:	mov	w4, #0xffffffff            	// #-1
    655c:	str	w0, [x2, #40]
    6560:	mov	x1, x2
    6564:	str	xzr, [x2, #48]
    6568:	mov	x0, x19
    656c:	stp	q0, q0, [x2]
    6570:	str	q0, [x3, #56]!
    6574:	str	xzr, [x3, #16]
    6578:	str	wzr, [x3, #24]
    657c:	str	w4, [x2, #104]
    6580:	str	xzr, [x2, #160]
    6584:	stur	q0, [x2, #88]
    6588:	bl	4ae8 <lzma_physmem@@XZ_5.0+0x60>
    658c:	mov	x0, x19
    6590:	ldp	x19, x20, [sp, #16]
    6594:	ldp	x29, x30, [sp], #32
    6598:	ret
    659c:	mov	x0, x19
    65a0:	mov	x1, x20
    65a4:	mov	x19, #0x0                   	// #0
    65a8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    65ac:	b	658c <lzma_index_init@@XZ_5.0+0x9c>

00000000000065b0 <lzma_index_end@@XZ_5.0>:
    65b0:	cbz	x0, 65e8 <lzma_index_end@@XZ_5.0+0x38>
    65b4:	stp	x29, x30, [sp, #-32]!
    65b8:	mov	x29, sp
    65bc:	stp	x19, x20, [sp, #16]
    65c0:	mov	x19, x0
    65c4:	mov	x20, x1
    65c8:	ldr	x0, [x0]
    65cc:	cbz	x0, 65d4 <lzma_index_end@@XZ_5.0+0x24>
    65d0:	bl	59a8 <lzma_physmem@@XZ_5.0+0xf20>
    65d4:	mov	x1, x20
    65d8:	mov	x0, x19
    65dc:	ldp	x19, x20, [sp, #16]
    65e0:	ldp	x29, x30, [sp], #32
    65e4:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    65e8:	ret
    65ec:	nop
    65f0:	mov	x2, #0xffffffffffffffc     	// #1152921504606846972
    65f4:	cmp	x1, x2
    65f8:	mov	x2, #0xfffffffffffffffb    	// #-5
    65fc:	movk	x2, #0xfff, lsl #48
    6600:	csel	x1, x1, x2, cc  // cc = lo, ul, last
    6604:	str	x1, [x0, #64]
    6608:	ret
    660c:	nop

0000000000006610 <lzma_index_memusage@@XZ_5.0>:
    6610:	sub	x3, x0, #0x1
    6614:	mov	x2, x0
    6618:	mov	x0, #0xfffffffe            	// #4294967294
    661c:	cmp	x3, x0
    6620:	b.hi	6680 <lzma_index_memusage@@XZ_5.0+0x70>  // b.pmore
    6624:	mov	x3, #0x800                 	// #2048
    6628:	mov	x0, #0xffffffffffffffff    	// #-1
    662c:	movk	x3, #0xfd, lsl #16
    6630:	movk	x3, #0x8e55, lsl #32
    6634:	movk	x3, #0xfd0, lsl #48
    6638:	cmp	x1, x3
    663c:	b.hi	667c <lzma_index_memusage@@XZ_5.0+0x6c>  // b.pmore
    6640:	add	x1, x1, #0x1ff
    6644:	add	x3, x2, x2, lsl #3
    6648:	mov	x4, #0xffffffffffffff8f    	// #-113
    664c:	lsr	x1, x1, #9
    6650:	add	x2, x2, x3, lsl #2
    6654:	add	x3, x1, x1, lsl #6
    6658:	lsl	x2, x2, #3
    665c:	sub	x4, x4, x2
    6660:	add	x2, x2, #0x70
    6664:	lsl	x3, x3, #2
    6668:	sub	x1, x3, x1
    666c:	lsl	x1, x1, #5
    6670:	cmp	x4, x1
    6674:	add	x2, x2, x1
    6678:	csel	x0, x2, x0, cs  // cs = hs, nlast
    667c:	ret
    6680:	mov	x0, #0xffffffffffffffff    	// #-1
    6684:	ret

0000000000006688 <lzma_index_memused@@XZ_5.0>:
    6688:	mov	x1, x0
    668c:	ldr	w0, [x0, #24]
    6690:	ldr	x1, [x1, #48]
    6694:	b	31b0 <lzma_index_memusage@plt>

0000000000006698 <lzma_index_block_count@@XZ_5.0>:
    6698:	ldr	x0, [x0, #48]
    669c:	ret

00000000000066a0 <lzma_index_stream_count@@XZ_5.0>:
    66a0:	ldr	w0, [x0, #24]
    66a4:	ret

00000000000066a8 <lzma_index_size@@XZ_5.0>:
    66a8:	stp	x29, x30, [sp, #-32]!
    66ac:	mov	x29, sp
    66b0:	str	x19, [sp, #16]
    66b4:	mov	x19, x0
    66b8:	ldr	x0, [x0, #48]
    66bc:	bl	34b0 <lzma_vli_size@plt>
    66c0:	add	w0, w0, #0x1
    66c4:	ldr	x1, [x19, #56]
    66c8:	ldr	x19, [sp, #16]
    66cc:	add	x1, x1, #0x7
    66d0:	add	x0, x1, x0
    66d4:	and	x0, x0, #0xfffffffffffffffc
    66d8:	ldp	x29, x30, [sp], #32
    66dc:	ret

00000000000066e0 <lzma_index_total_size@@XZ_5.0>:
    66e0:	ldr	x0, [x0, #40]
    66e4:	ret

00000000000066e8 <lzma_index_stream_size@@XZ_5.0>:
    66e8:	stp	x29, x30, [sp, #-32]!
    66ec:	mov	x29, sp
    66f0:	str	x19, [sp, #16]
    66f4:	mov	x19, x0
    66f8:	ldr	x0, [x0, #48]
    66fc:	bl	34b0 <lzma_vli_size@plt>
    6700:	add	w2, w0, #0x1
    6704:	ldr	x1, [x19, #56]
    6708:	ldr	x0, [x19, #40]
    670c:	add	x1, x1, #0x7
    6710:	add	x1, x1, x2
    6714:	and	x1, x1, #0xfffffffffffffffc
    6718:	add	x0, x0, #0x18
    671c:	add	x0, x1, x0
    6720:	ldr	x19, [sp, #16]
    6724:	ldp	x29, x30, [sp], #32
    6728:	ret
    672c:	nop

0000000000006730 <lzma_index_file_size@@XZ_5.0>:
    6730:	stp	x29, x30, [sp, #-32]!
    6734:	mov	x1, #0x18                  	// #24
    6738:	mov	x29, sp
    673c:	ldr	x3, [x0, #16]
    6740:	stp	x19, x20, [sp, #16]
    6744:	ldr	x0, [x3, #72]
    6748:	ldr	x2, [x3, #8]
    674c:	cbz	x0, 6768 <lzma_index_file_size@@XZ_5.0+0x38>
    6750:	ldr	x1, [x0, #56]
    6754:	add	x0, x0, x1, lsl #4
    6758:	ldr	x1, [x0, #72]
    675c:	add	x1, x1, #0x3
    6760:	and	x1, x1, #0xfffffffffffffffc
    6764:	add	x1, x1, #0x18
    6768:	ldr	x4, [x3, #160]
    676c:	ldp	x0, x20, [x3, #88]
    6770:	add	x2, x2, x4
    6774:	adds	x19, x2, x1
    6778:	b.mi	67a4 <lzma_index_file_size@@XZ_5.0+0x74>  // b.first
    677c:	bl	34b0 <lzma_vli_size@plt>
    6780:	add	x20, x20, #0x7
    6784:	add	w0, w0, #0x1
    6788:	add	x0, x0, x20
    678c:	and	x0, x0, #0xfffffffffffffffc
    6790:	adds	x0, x0, x19
    6794:	csinv	x0, x0, xzr, pl  // pl = nfrst
    6798:	ldp	x19, x20, [sp, #16]
    679c:	ldp	x29, x30, [sp], #32
    67a0:	ret
    67a4:	mov	x0, #0xffffffffffffffff    	// #-1
    67a8:	ldp	x19, x20, [sp, #16]
    67ac:	ldp	x29, x30, [sp], #32
    67b0:	ret
    67b4:	nop

00000000000067b8 <lzma_index_uncompressed_size@@XZ_5.0>:
    67b8:	ldr	x0, [x0, #32]
    67bc:	ret

00000000000067c0 <lzma_index_checks@@XZ_5.0>:
    67c0:	ldr	x1, [x0, #16]
    67c4:	ldr	w0, [x0, #72]
    67c8:	ldr	w2, [x1, #104]
    67cc:	cmn	w2, #0x1
    67d0:	b.eq	67e4 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    67d4:	ldr	w2, [x1, #120]
    67d8:	mov	w1, #0x1                   	// #1
    67dc:	lsl	w1, w1, w2
    67e0:	orr	w0, w0, w1
    67e4:	ret
    67e8:	stp	x29, x30, [sp, #-32]!
    67ec:	mov	x29, sp
    67f0:	str	x19, [sp, #16]
    67f4:	mov	x19, x0
    67f8:	ldr	x0, [x0, #48]
    67fc:	bl	34b0 <lzma_vli_size@plt>
    6800:	mvn	w0, w0
    6804:	ldr	x1, [x19, #56]
    6808:	ldr	x19, [sp, #16]
    680c:	sub	w0, w0, w1
    6810:	and	w0, w0, #0x3
    6814:	ldp	x29, x30, [sp], #32
    6818:	ret
    681c:	nop

0000000000006820 <lzma_index_stream_flags@@XZ_5.0>:
    6820:	cmp	x0, #0x0
    6824:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    6828:	b.eq	6880 <lzma_index_stream_flags@@XZ_5.0+0x60>  // b.none
    682c:	stp	x29, x30, [sp, #-32]!
    6830:	mov	x29, sp
    6834:	stp	x19, x20, [sp, #16]
    6838:	mov	x20, x0
    683c:	mov	x19, x1
    6840:	mov	x0, x1
    6844:	bl	3140 <lzma_stream_flags_compare@plt>
    6848:	cbnz	w0, 6874 <lzma_index_stream_flags@@XZ_5.0+0x54>
    684c:	ldr	x2, [x20, #16]
    6850:	ldp	x4, x5, [x19]
    6854:	add	x1, x2, #0x68
    6858:	stp	x4, x5, [x2, #104]
    685c:	ldp	x2, x3, [x19, #16]
    6860:	stp	x2, x3, [x1, #16]
    6864:	ldp	x2, x3, [x19, #32]
    6868:	stp	x2, x3, [x1, #32]
    686c:	ldr	x2, [x19, #48]
    6870:	str	x2, [x1, #48]
    6874:	ldp	x19, x20, [sp, #16]
    6878:	ldp	x29, x30, [sp], #32
    687c:	ret
    6880:	mov	w0, #0xb                   	// #11
    6884:	ret

0000000000006888 <lzma_index_stream_padding@@XZ_5.0>:
    6888:	cmp	x0, #0x0
    688c:	ccmp	x1, #0x0, #0x1, ne  // ne = any
    6890:	b.lt	68e8 <lzma_index_stream_padding@@XZ_5.0+0x60>  // b.tstop
    6894:	stp	x29, x30, [sp, #-48]!
    6898:	tst	x1, #0x3
    689c:	mov	x29, sp
    68a0:	stp	x19, x20, [sp, #16]
    68a4:	mov	x19, x1
    68a8:	mov	w1, #0xb                   	// #11
    68ac:	b.ne	68d8 <lzma_index_stream_padding@@XZ_5.0+0x50>  // b.any
    68b0:	ldr	x20, [x0, #16]
    68b4:	str	x21, [sp, #32]
    68b8:	ldr	x21, [x20, #160]
    68bc:	str	xzr, [x20, #160]
    68c0:	bl	3390 <lzma_index_file_size@plt>
    68c4:	cmn	x0, x19
    68c8:	b.mi	68f4 <lzma_index_stream_padding@@XZ_5.0+0x6c>  // b.first
    68cc:	mov	w1, #0x0                   	// #0
    68d0:	ldr	x21, [sp, #32]
    68d4:	str	x19, [x20, #160]
    68d8:	mov	w0, w1
    68dc:	ldp	x19, x20, [sp, #16]
    68e0:	ldp	x29, x30, [sp], #48
    68e4:	ret
    68e8:	mov	w1, #0xb                   	// #11
    68ec:	mov	w0, w1
    68f0:	ret
    68f4:	mov	w1, #0x9                   	// #9
    68f8:	str	x21, [x20, #160]
    68fc:	ldr	x21, [sp, #32]
    6900:	b	68d8 <lzma_index_stream_padding@@XZ_5.0+0x50>
    6904:	nop

0000000000006908 <lzma_index_append@@XZ_5.0>:
    6908:	stp	x29, x30, [sp, #-128]!
    690c:	cmp	x0, #0x0
    6910:	mov	x29, sp
    6914:	stp	x19, x20, [sp, #16]
    6918:	mov	x19, x0
    691c:	mov	x0, #0xfffffffffffffff7    	// #-9
    6920:	str	x1, [sp, #104]
    6924:	movk	x0, #0x7fff, lsl #48
    6928:	mov	x20, x2
    692c:	sub	x2, x2, #0x5
    6930:	ccmp	x2, x0, #0x2, ne  // ne = any
    6934:	mov	w0, #0xb                   	// #11
    6938:	b.hi	6afc <lzma_index_append@@XZ_5.0+0x1f4>  // b.pmore
    693c:	stp	x21, x22, [sp, #32]
    6940:	mov	w0, #0xb                   	// #11
    6944:	mov	x21, x3
    6948:	tbnz	x3, #63, 6b40 <lzma_index_append@@XZ_5.0+0x238>
    694c:	ldr	x22, [x19, #16]
    6950:	stp	x23, x24, [sp, #48]
    6954:	stp	x25, x26, [sp, #64]
    6958:	ldr	x24, [x22, #72]
    695c:	stp	x27, x28, [sp, #80]
    6960:	cbz	x24, 6b08 <lzma_index_append@@XZ_5.0+0x200>
    6964:	ldr	x0, [x24, #56]
    6968:	add	x0, x24, x0, lsl #4
    696c:	ldr	x23, [x0, #72]
    6970:	ldr	x0, [x0, #64]
    6974:	add	x23, x23, #0x3
    6978:	str	x0, [sp, #96]
    697c:	and	x0, x23, #0xfffffffffffffffc
    6980:	add	x25, x20, x0
    6984:	str	x0, [sp, #120]
    6988:	mov	x0, x20
    698c:	bl	34b0 <lzma_vli_size@plt>
    6990:	mov	w26, w0
    6994:	mov	x0, x21
    6998:	bl	34b0 <lzma_vli_size@plt>
    699c:	add	w26, w26, w0
    69a0:	ldp	x5, x27, [x22, #88]
    69a4:	add	x2, x25, #0x3
    69a8:	ldr	x28, [x22, #8]
    69ac:	and	x2, x2, #0xfffffffffffffffc
    69b0:	ldr	x3, [x22, #160]
    69b4:	add	x2, x2, #0x18
    69b8:	add	x23, x5, #0x1
    69bc:	add	x28, x28, x3
    69c0:	adds	x28, x2, x28
    69c4:	add	x2, x27, #0x7
    69c8:	str	x2, [sp, #112]
    69cc:	b.mi	6b20 <lzma_index_append@@XZ_5.0+0x218>  // b.first
    69d0:	mov	x0, x23
    69d4:	bl	34b0 <lzma_vli_size@plt>
    69d8:	ldr	x2, [sp, #112]
    69dc:	add	w0, w0, #0x1
    69e0:	add	x0, x0, x26
    69e4:	add	x0, x0, x2
    69e8:	and	x0, x0, #0xfffffffffffffffc
    69ec:	cmn	x0, x28
    69f0:	b.mi	6b20 <lzma_index_append@@XZ_5.0+0x218>  // b.first
    69f4:	ldp	x28, x6, [x19, #48]
    69f8:	str	x6, [sp, #112]
    69fc:	add	x28, x28, #0x1
    6a00:	mov	x0, x28
    6a04:	bl	34b0 <lzma_vli_size@plt>
    6a08:	ldr	x6, [sp, #112]
    6a0c:	add	w2, w0, #0x1
    6a10:	add	x2, x2, x26
    6a14:	mov	x3, #0x400000000           	// #17179869184
    6a18:	add	x7, x6, #0x7
    6a1c:	mov	w0, #0x9                   	// #9
    6a20:	add	x2, x2, x7
    6a24:	and	x2, x2, #0xfffffffffffffffc
    6a28:	cmp	x2, x3
    6a2c:	b.hi	6b50 <lzma_index_append@@XZ_5.0+0x248>  // b.pmore
    6a30:	cbz	x24, 6a44 <lzma_index_append@@XZ_5.0+0x13c>
    6a34:	ldp	x2, x0, [x24, #48]
    6a38:	add	x0, x0, #0x1
    6a3c:	cmp	x0, x2
    6a40:	b.cc	6b18 <lzma_index_append@@XZ_5.0+0x210>  // b.lo, b.ul, b.last
    6a44:	ldr	x0, [x19, #64]
    6a48:	ldr	x1, [sp, #104]
    6a4c:	add	x0, x0, #0x4
    6a50:	lsl	x0, x0, #4
    6a54:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6a58:	mov	x24, x0
    6a5c:	cbz	x0, 6b6c <lzma_index_append@@XZ_5.0+0x264>
    6a60:	ldr	x2, [x22, #88]
    6a64:	mov	x1, x0
    6a68:	ldr	x5, [x19, #64]
    6a6c:	add	x2, x2, #0x1
    6a70:	ldr	x0, [sp, #96]
    6a74:	str	x0, [x24]
    6a78:	ldr	x0, [sp, #120]
    6a7c:	mov	x3, #0x200                 	// #512
    6a80:	str	x0, [x24, #8]
    6a84:	add	x0, x22, #0x38
    6a88:	stp	x2, x5, [x24, #40]
    6a8c:	str	xzr, [x24, #56]
    6a90:	str	x3, [x19, #64]
    6a94:	bl	4ae8 <lzma_physmem@@XZ_5.0+0x60>
    6a98:	ldp	x28, x6, [x19, #48]
    6a9c:	ldp	x5, x27, [x22, #88]
    6aa0:	ldr	x0, [x24, #56]
    6aa4:	add	x28, x28, #0x1
    6aa8:	add	x23, x5, #0x1
    6aac:	add	x1, x24, x0, lsl #4
    6ab0:	add	x20, x20, #0x3
    6ab4:	ldr	x0, [sp, #96]
    6ab8:	add	x27, x26, x27
    6abc:	ldr	x3, [x19, #32]
    6ac0:	add	x24, x0, x21
    6ac4:	ldr	x0, [x19, #40]
    6ac8:	stp	x24, x25, [x1, #64]
    6acc:	add	x26, x26, x6
    6ad0:	add	x21, x3, x21
    6ad4:	and	x20, x20, #0xfffffffffffffffc
    6ad8:	stp	x23, x27, [x22, #88]
    6adc:	add	x20, x0, x20
    6ae0:	mov	w0, #0x0                   	// #0
    6ae4:	ldp	x23, x24, [sp, #48]
    6ae8:	stp	x21, x20, [x19, #32]
    6aec:	stp	x28, x26, [x19, #48]
    6af0:	ldp	x21, x22, [sp, #32]
    6af4:	ldp	x25, x26, [sp, #64]
    6af8:	ldp	x27, x28, [sp, #80]
    6afc:	ldp	x19, x20, [sp, #16]
    6b00:	ldp	x29, x30, [sp], #128
    6b04:	ret
    6b08:	mov	x25, x20
    6b0c:	str	xzr, [sp, #96]
    6b10:	str	xzr, [sp, #120]
    6b14:	b	6988 <lzma_index_append@@XZ_5.0+0x80>
    6b18:	str	x0, [x24, #56]
    6b1c:	b	6aac <lzma_index_append@@XZ_5.0+0x1a4>
    6b20:	mov	w0, #0x9                   	// #9
    6b24:	ldp	x19, x20, [sp, #16]
    6b28:	ldp	x21, x22, [sp, #32]
    6b2c:	ldp	x23, x24, [sp, #48]
    6b30:	ldp	x25, x26, [sp, #64]
    6b34:	ldp	x27, x28, [sp, #80]
    6b38:	ldp	x29, x30, [sp], #128
    6b3c:	ret
    6b40:	ldp	x19, x20, [sp, #16]
    6b44:	ldp	x21, x22, [sp, #32]
    6b48:	ldp	x29, x30, [sp], #128
    6b4c:	ret
    6b50:	ldp	x19, x20, [sp, #16]
    6b54:	ldp	x21, x22, [sp, #32]
    6b58:	ldp	x23, x24, [sp, #48]
    6b5c:	ldp	x25, x26, [sp, #64]
    6b60:	ldp	x27, x28, [sp, #80]
    6b64:	ldp	x29, x30, [sp], #128
    6b68:	ret
    6b6c:	mov	w0, #0x5                   	// #5
    6b70:	ldp	x21, x22, [sp, #32]
    6b74:	ldp	x23, x24, [sp, #48]
    6b78:	ldp	x25, x26, [sp, #64]
    6b7c:	ldp	x27, x28, [sp, #80]
    6b80:	b	6afc <lzma_index_append@@XZ_5.0+0x1f4>
    6b84:	nop

0000000000006b88 <lzma_index_cat@@XZ_5.0>:
    6b88:	stp	x29, x30, [sp, #-128]!
    6b8c:	mov	x29, sp
    6b90:	stp	x19, x20, [sp, #16]
    6b94:	mov	x19, x0
    6b98:	stp	x21, x22, [sp, #32]
    6b9c:	mov	x22, x2
    6ba0:	stp	x25, x26, [sp, #64]
    6ba4:	mov	x25, x1
    6ba8:	bl	3390 <lzma_index_file_size@plt>
    6bac:	mov	x20, x0
    6bb0:	mov	x0, x25
    6bb4:	bl	3390 <lzma_index_file_size@plt>
    6bb8:	cmn	x0, x20
    6bbc:	b.mi	6d40 <lzma_index_cat@@XZ_5.0+0x1b8>  // b.first
    6bc0:	stp	x23, x24, [sp, #48]
    6bc4:	ldr	x0, [x25, #32]
    6bc8:	ldr	x23, [x19, #32]
    6bcc:	cmn	x23, x0
    6bd0:	b.mi	6d70 <lzma_index_cat@@XZ_5.0+0x1e8>  // b.first
    6bd4:	ldr	x24, [x19, #48]
    6bd8:	mov	x0, x24
    6bdc:	bl	34b0 <lzma_vli_size@plt>
    6be0:	add	w21, w0, #0x1
    6be4:	ldr	x0, [x25, #48]
    6be8:	bl	34b0 <lzma_vli_size@plt>
    6bec:	add	w3, w0, #0x1
    6bf0:	ldr	x2, [x25, #56]
    6bf4:	add	x3, x3, x21
    6bf8:	ldr	x4, [x19, #56]
    6bfc:	add	x2, x2, #0xb
    6c00:	add	x3, x3, x2
    6c04:	mov	x1, #0x400000000           	// #17179869184
    6c08:	add	x3, x3, x4
    6c0c:	mov	w0, #0x9                   	// #9
    6c10:	and	x3, x3, #0xfffffffffffffffc
    6c14:	cmp	x3, x1
    6c18:	b.hi	6d58 <lzma_index_cat@@XZ_5.0+0x1d0>  // b.pmore
    6c1c:	ldr	x26, [x19, #16]
    6c20:	ldr	x21, [x26, #72]
    6c24:	cbz	x21, 6c38 <lzma_index_cat@@XZ_5.0+0xb0>
    6c28:	ldp	x1, x0, [x21, #48]
    6c2c:	add	x2, x0, #0x1
    6c30:	cmp	x2, x1
    6c34:	b.cc	6cac <lzma_index_cat@@XZ_5.0+0x124>  // b.lo, b.ul, b.last
    6c38:	ldr	w2, [x19, #24]
    6c3c:	add	x0, sp, #0x58
    6c40:	ldr	x1, [x25]
    6c44:	stp	x23, x20, [sp, #88]
    6c48:	str	x24, [sp, #104]
    6c4c:	str	w2, [sp, #112]
    6c50:	str	x19, [sp, #120]
    6c54:	bl	4d68 <lzma_physmem@@XZ_5.0+0x2e0>
    6c58:	ldp	q1, q0, [x19, #32]
    6c5c:	mov	x0, x19
    6c60:	ldp	q3, q2, [x25, #32]
    6c64:	add	v1.2d, v1.2d, v3.2d
    6c68:	add	v0.2d, v0.2d, v2.2d
    6c6c:	stp	q1, q0, [x19, #32]
    6c70:	bl	3200 <lzma_index_checks@plt>
    6c74:	ldr	w2, [x25, #72]
    6c78:	mov	w3, w0
    6c7c:	mov	x1, x22
    6c80:	orr	w2, w2, w3
    6c84:	str	w2, [x19, #72]
    6c88:	mov	x0, x25
    6c8c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6c90:	ldp	x23, x24, [sp, #48]
    6c94:	mov	w0, #0x0                   	// #0
    6c98:	ldp	x19, x20, [sp, #16]
    6c9c:	ldp	x21, x22, [sp, #32]
    6ca0:	ldp	x25, x26, [sp, #64]
    6ca4:	ldp	x29, x30, [sp], #128
    6ca8:	ret
    6cac:	add	x0, x0, #0x5
    6cb0:	mov	x1, x22
    6cb4:	lsl	x0, x0, #4
    6cb8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6cbc:	mov	x23, x0
    6cc0:	cbz	x0, 6da0 <lzma_index_cat@@XZ_5.0+0x218>
    6cc4:	ldp	x0, x1, [x21]
    6cc8:	stp	x0, x1, [x23]
    6ccc:	ldp	x2, x3, [x21, #16]
    6cd0:	stp	x2, x3, [x23, #16]
    6cd4:	add	x1, x21, #0x40
    6cd8:	ldr	x2, [x21, #32]
    6cdc:	str	x2, [x23, #32]
    6ce0:	add	x0, x23, #0x40
    6ce4:	ldr	x2, [x21, #56]
    6ce8:	str	x2, [x23, #56]
    6cec:	add	x2, x2, #0x1
    6cf0:	str	x2, [x23, #48]
    6cf4:	ldr	x3, [x21, #40]
    6cf8:	str	x3, [x23, #40]
    6cfc:	lsl	x2, x2, #4
    6d00:	bl	30c0 <memcpy@plt>
    6d04:	ldr	x0, [x21, #16]
    6d08:	cbz	x0, 6d10 <lzma_index_cat@@XZ_5.0+0x188>
    6d0c:	str	x23, [x0, #32]
    6d10:	ldr	x0, [x26, #64]
    6d14:	cmp	x0, x21
    6d18:	b.eq	6d8c <lzma_index_cat@@XZ_5.0+0x204>  // b.none
    6d1c:	ldr	x0, [x26, #72]
    6d20:	cmp	x21, x0
    6d24:	b.eq	6d98 <lzma_index_cat@@XZ_5.0+0x210>  // b.none
    6d28:	mov	x0, x21
    6d2c:	mov	x1, x22
    6d30:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    6d34:	ldr	x23, [x19, #32]
    6d38:	ldr	x24, [x19, #48]
    6d3c:	b	6c38 <lzma_index_cat@@XZ_5.0+0xb0>
    6d40:	mov	w0, #0x9                   	// #9
    6d44:	ldp	x19, x20, [sp, #16]
    6d48:	ldp	x21, x22, [sp, #32]
    6d4c:	ldp	x25, x26, [sp, #64]
    6d50:	ldp	x29, x30, [sp], #128
    6d54:	ret
    6d58:	ldp	x19, x20, [sp, #16]
    6d5c:	ldp	x21, x22, [sp, #32]
    6d60:	ldp	x23, x24, [sp, #48]
    6d64:	ldp	x25, x26, [sp, #64]
    6d68:	ldp	x29, x30, [sp], #128
    6d6c:	ret
    6d70:	mov	w0, #0x9                   	// #9
    6d74:	ldp	x19, x20, [sp, #16]
    6d78:	ldp	x21, x22, [sp, #32]
    6d7c:	ldp	x23, x24, [sp, #48]
    6d80:	ldp	x25, x26, [sp, #64]
    6d84:	ldp	x29, x30, [sp], #128
    6d88:	ret
    6d8c:	dup	v0.2d, x23
    6d90:	stur	q0, [x26, #56]
    6d94:	b	6d1c <lzma_index_cat@@XZ_5.0+0x194>
    6d98:	str	x23, [x26, #72]
    6d9c:	b	6d28 <lzma_index_cat@@XZ_5.0+0x1a0>
    6da0:	mov	w0, #0x5                   	// #5
    6da4:	ldp	x23, x24, [sp, #48]
    6da8:	b	6c98 <lzma_index_cat@@XZ_5.0+0x110>
    6dac:	nop

0000000000006db0 <lzma_index_dup@@XZ_5.0>:
    6db0:	stp	x29, x30, [sp, #-112]!
    6db4:	mov	x29, sp
    6db8:	stp	x19, x20, [sp, #16]
    6dbc:	mov	x19, x0
    6dc0:	mov	x0, #0x50                  	// #80
    6dc4:	stp	x23, x24, [sp, #48]
    6dc8:	stp	x25, x26, [sp, #64]
    6dcc:	mov	x25, x1
    6dd0:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6dd4:	mov	x24, x0
    6dd8:	cbz	x0, 6fa0 <lzma_index_dup@@XZ_5.0+0x1f0>
    6ddc:	ldr	x20, [x19, #8]
    6de0:	str	xzr, [x0, #16]
    6de4:	ldp	q2, q1, [x19, #32]
    6de8:	str	wzr, [x0, #24]
    6dec:	movi	v0.4s, #0x0
    6df0:	mov	x1, #0x200                 	// #512
    6df4:	mov	x26, #0xffffffffffffffc     	// #1152921504606846972
    6df8:	stp	q2, q1, [x0, #32]
    6dfc:	ldr	x0, [x20, #88]
    6e00:	str	x1, [x24, #64]
    6e04:	str	wzr, [x24, #72]
    6e08:	str	q0, [x24]
    6e0c:	cmp	x0, x26
    6e10:	b.cs	6f90 <lzma_index_dup@@XZ_5.0+0x1e0>  // b.hs, b.nlast
    6e14:	stp	x21, x22, [sp, #32]
    6e18:	stp	x27, x28, [sp, #80]
    6e1c:	str	q0, [sp, #96]
    6e20:	ldr	w27, [x20, #40]
    6e24:	mov	x1, x25
    6e28:	mov	x0, #0xa8                  	// #168
    6e2c:	ldp	x21, x19, [x20]
    6e30:	ldr	x22, [x20, #48]
    6e34:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6e38:	mov	x28, x0
    6e3c:	cbz	x0, 6f88 <lzma_index_dup@@XZ_5.0+0x1d8>
    6e40:	ldr	q0, [sp, #96]
    6e44:	mov	x23, x0
    6e48:	stp	x21, x19, [x0]
    6e4c:	mov	w2, #0xffffffff            	// #-1
    6e50:	str	xzr, [x0, #32]
    6e54:	str	w27, [x0, #40]
    6e58:	str	x22, [x0, #48]
    6e5c:	str	q0, [x0, #16]
    6e60:	str	q0, [x23, #56]!
    6e64:	ldr	x0, [x20, #64]
    6e68:	str	xzr, [x23, #16]
    6e6c:	str	wzr, [x23, #24]
    6e70:	str	xzr, [x28, #160]
    6e74:	stur	q0, [x28, #88]
    6e78:	ldur	q0, [x20, #88]
    6e7c:	str	w2, [x28, #104]
    6e80:	ldr	x2, [x20, #88]
    6e84:	stur	q0, [x28, #88]
    6e88:	ldp	x4, x5, [x20, #104]
    6e8c:	stp	x4, x5, [x28, #104]
    6e90:	ldp	x4, x5, [x20, #120]
    6e94:	stp	x4, x5, [x28, #120]
    6e98:	ldp	x4, x5, [x20, #136]
    6e9c:	stp	x4, x5, [x28, #136]
    6ea0:	ldr	x1, [x20, #152]
    6ea4:	str	x1, [x28, #152]
    6ea8:	ldr	x1, [x20, #160]
    6eac:	str	x1, [x28, #160]
    6eb0:	cbz	x0, 6f5c <lzma_index_dup@@XZ_5.0+0x1ac>
    6eb4:	add	x0, x2, #0x4
    6eb8:	mov	x1, x25
    6ebc:	lsl	x0, x0, #4
    6ec0:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    6ec4:	mov	x22, x0
    6ec8:	cbz	x0, 6ff0 <lzma_index_dup@@XZ_5.0+0x240>
    6ecc:	ldr	q0, [sp, #96]
    6ed0:	add	x21, x0, #0x40
    6ed4:	ldr	x19, [x20, #64]
    6ed8:	mov	x1, #0x1                   	// #1
    6edc:	str	q0, [x0]
    6ee0:	mov	x27, #0x0                   	// #0
    6ee4:	ldr	x0, [x20, #88]
    6ee8:	stp	x1, x0, [x22, #40]
    6eec:	sub	x1, x0, #0x1
    6ef0:	str	x1, [x22, #56]
    6ef4:	nop
    6ef8:	ldr	x2, [x19, #56]
    6efc:	add	x1, x19, #0x40
    6f00:	add	x0, x21, x27, lsl #4
    6f04:	add	x2, x2, #0x1
    6f08:	lsl	x2, x2, #4
    6f0c:	bl	30c0 <memcpy@plt>
    6f10:	ldr	x1, [x19, #32]
    6f14:	ldr	x2, [x19, #56]
    6f18:	add	x2, x2, #0x1
    6f1c:	add	x27, x27, x2
    6f20:	cbz	x1, 6f44 <lzma_index_dup@@XZ_5.0+0x194>
    6f24:	nop
    6f28:	mov	x19, x1
    6f2c:	ldr	x1, [x1, #24]
    6f30:	cbnz	x1, 6f28 <lzma_index_dup@@XZ_5.0+0x178>
    6f34:	b	6ef8 <lzma_index_dup@@XZ_5.0+0x148>
    6f38:	ldr	x0, [x19, #32]
    6f3c:	cmp	x1, x0
    6f40:	b.ne	6ef8 <lzma_index_dup@@XZ_5.0+0x148>  // b.any
    6f44:	mov	x1, x19
    6f48:	ldr	x19, [x19, #16]
    6f4c:	cbnz	x19, 6f38 <lzma_index_dup@@XZ_5.0+0x188>
    6f50:	mov	x1, x22
    6f54:	mov	x0, x23
    6f58:	bl	4ae8 <lzma_physmem@@XZ_5.0+0x60>
    6f5c:	mov	x0, x24
    6f60:	mov	x1, x28
    6f64:	bl	4ae8 <lzma_physmem@@XZ_5.0+0x60>
    6f68:	ldr	x0, [x20, #32]
    6f6c:	cbz	x0, 6fc4 <lzma_index_dup@@XZ_5.0+0x214>
    6f70:	mov	x20, x0
    6f74:	ldr	x0, [x0, #24]
    6f78:	cbnz	x0, 6f70 <lzma_index_dup@@XZ_5.0+0x1c0>
    6f7c:	ldr	x0, [x20, #88]
    6f80:	cmp	x0, x26
    6f84:	b.cc	6e20 <lzma_index_dup@@XZ_5.0+0x70>  // b.lo, b.ul, b.last
    6f88:	ldp	x21, x22, [sp, #32]
    6f8c:	ldp	x27, x28, [sp, #80]
    6f90:	mov	x0, x24
    6f94:	mov	x1, x25
    6f98:	mov	x24, #0x0                   	// #0
    6f9c:	bl	3410 <lzma_index_end@plt>
    6fa0:	mov	x0, x24
    6fa4:	ldp	x19, x20, [sp, #16]
    6fa8:	ldp	x23, x24, [sp, #48]
    6fac:	ldp	x25, x26, [sp, #64]
    6fb0:	ldp	x29, x30, [sp], #112
    6fb4:	ret
    6fb8:	ldr	x1, [x20, #32]
    6fbc:	cmp	x0, x1
    6fc0:	b.ne	6f7c <lzma_index_dup@@XZ_5.0+0x1cc>  // b.any
    6fc4:	mov	x0, x20
    6fc8:	ldr	x20, [x20, #16]
    6fcc:	cbnz	x20, 6fb8 <lzma_index_dup@@XZ_5.0+0x208>
    6fd0:	mov	x0, x24
    6fd4:	ldp	x19, x20, [sp, #16]
    6fd8:	ldp	x21, x22, [sp, #32]
    6fdc:	ldp	x23, x24, [sp, #48]
    6fe0:	ldp	x25, x26, [sp, #64]
    6fe4:	ldp	x27, x28, [sp, #80]
    6fe8:	ldp	x29, x30, [sp], #112
    6fec:	ret
    6ff0:	mov	x0, x28
    6ff4:	mov	x1, x25
    6ff8:	bl	4e80 <lzma_physmem@@XZ_5.0+0x3f8>
    6ffc:	ldp	x21, x22, [sp, #32]
    7000:	ldp	x27, x28, [sp, #80]
    7004:	b	6f90 <lzma_index_dup@@XZ_5.0+0x1e0>

0000000000007008 <lzma_index_iter_rewind@@XZ_5.0>:
    7008:	movi	v0.4s, #0x0
    700c:	add	x0, x0, #0x200
    7010:	stur	q0, [x0, #-248]
    7014:	stur	q0, [x0, #-232]
    7018:	ret
    701c:	nop

0000000000007020 <lzma_index_iter_init@@XZ_5.0>:
    7020:	str	x1, [x0, #256]
    7024:	b	30d0 <lzma_index_iter_rewind@plt>

0000000000007028 <lzma_index_iter_next@@XZ_5.0>:
    7028:	cmp	w1, #0x3
    702c:	b.hi	7154 <lzma_index_iter_next@@XZ_5.0+0x12c>  // b.pmore
    7030:	cmp	w1, #0x1
    7034:	mov	x3, #0x0                   	// #0
    7038:	ldp	x7, x2, [x0, #256]
    703c:	ldr	x4, [x0, #280]
    7040:	b.eq	705c <lzma_index_iter_next@@XZ_5.0+0x34>  // b.none
    7044:	ldr	x5, [x0, #288]
    7048:	cmp	x5, #0x1
    704c:	b.eq	71ec <lzma_index_iter_next@@XZ_5.0+0x1c4>  // b.none
    7050:	cmp	x5, #0x2
    7054:	b.eq	71e4 <lzma_index_iter_next@@XZ_5.0+0x1bc>  // b.none
    7058:	cbz	x5, 71dc <lzma_index_iter_next@@XZ_5.0+0x1b4>
    705c:	cbz	x2, 709c <lzma_index_iter_next@@XZ_5.0+0x74>
    7060:	cbz	x3, 70f8 <lzma_index_iter_next@@XZ_5.0+0xd0>
    7064:	ldr	x5, [x3, #56]
    7068:	cmp	x5, x4
    706c:	b.ls	715c <lzma_index_iter_next@@XZ_5.0+0x134>  // b.plast
    7070:	cmp	w1, #0x3
    7074:	add	x5, x4, #0x1
    7078:	b.ne	70c8 <lzma_index_iter_next@@XZ_5.0+0xa0>  // b.any
    707c:	cbz	x5, 70b4 <lzma_index_iter_next@@XZ_5.0+0x8c>
    7080:	add	x4, x3, x4, lsl #4
    7084:	ldr	x6, [x4, #64]
    7088:	ldr	x4, [x4, #80]
    708c:	cmp	x6, x4
    7090:	b.ne	70c8 <lzma_index_iter_next@@XZ_5.0+0xa0>  // b.any
    7094:	mov	x4, x5
    7098:	cbnz	x2, 7060 <lzma_index_iter_next@@XZ_5.0+0x38>
    709c:	ldr	x2, [x7, #8]
    70a0:	cmp	w1, #0x1
    70a4:	ldr	x3, [x2, #64]
    70a8:	b.hi	7198 <lzma_index_iter_next@@XZ_5.0+0x170>  // b.pmore
    70ac:	cmp	w1, #0x3
    70b0:	b.ne	7118 <lzma_index_iter_next@@XZ_5.0+0xf0>  // b.any
    70b4:	ldr	x5, [x3]
    70b8:	ldr	x4, [x3, #64]
    70bc:	cmp	x5, x4
    70c0:	mov	x5, #0x0                   	// #0
    70c4:	b.eq	7094 <lzma_index_iter_next@@XZ_5.0+0x6c>  // b.none
    70c8:	stp	x29, x30, [sp, #-16]!
    70cc:	mov	x29, sp
    70d0:	stp	x2, x3, [x0, #264]
    70d4:	str	x5, [x0, #280]
    70d8:	bl	4b90 <lzma_physmem@@XZ_5.0+0x108>
    70dc:	mov	w0, #0x0                   	// #0
    70e0:	ldp	x29, x30, [sp], #16
    70e4:	ret
    70e8:	cmp	w1, #0x1
    70ec:	ldr	x3, [x2, #64]
    70f0:	b.ls	7118 <lzma_index_iter_next@@XZ_5.0+0xf0>  // b.plast
    70f4:	cbnz	x3, 70ac <lzma_index_iter_next@@XZ_5.0+0x84>
    70f8:	ldr	x3, [x2, #32]
    70fc:	cbz	x3, 7148 <lzma_index_iter_next@@XZ_5.0+0x120>
    7100:	mov	x2, x3
    7104:	ldr	x3, [x3, #24]
    7108:	cbnz	x3, 7100 <lzma_index_iter_next@@XZ_5.0+0xd8>
    710c:	cmp	w1, #0x1
    7110:	ldr	x3, [x2, #64]
    7114:	b.hi	70f4 <lzma_index_iter_next@@XZ_5.0+0xcc>  // b.pmore
    7118:	stp	x29, x30, [sp, #-16]!
    711c:	mov	x5, #0x0                   	// #0
    7120:	mov	x29, sp
    7124:	stp	x2, x3, [x0, #264]
    7128:	str	x5, [x0, #280]
    712c:	bl	4b90 <lzma_physmem@@XZ_5.0+0x108>
    7130:	mov	w0, #0x0                   	// #0
    7134:	ldp	x29, x30, [sp], #16
    7138:	ret
    713c:	ldr	x4, [x2, #32]
    7140:	cmp	x3, x4
    7144:	b.ne	70e8 <lzma_index_iter_next@@XZ_5.0+0xc0>  // b.any
    7148:	mov	x3, x2
    714c:	ldr	x2, [x2, #16]
    7150:	cbnz	x2, 713c <lzma_index_iter_next@@XZ_5.0+0x114>
    7154:	mov	w0, #0x1                   	// #1
    7158:	ret
    715c:	ldr	x4, [x3, #32]
    7160:	cbz	x4, 7184 <lzma_index_iter_next@@XZ_5.0+0x15c>
    7164:	nop
    7168:	mov	x3, x4
    716c:	ldr	x4, [x4, #24]
    7170:	cbnz	x4, 7168 <lzma_index_iter_next@@XZ_5.0+0x140>
    7174:	b	70ac <lzma_index_iter_next@@XZ_5.0+0x84>
    7178:	ldr	x5, [x3, #32]
    717c:	cmp	x4, x5
    7180:	b.ne	70ac <lzma_index_iter_next@@XZ_5.0+0x84>  // b.any
    7184:	mov	x4, x3
    7188:	ldr	x3, [x3, #16]
    718c:	cbnz	x3, 7178 <lzma_index_iter_next@@XZ_5.0+0x150>
    7190:	b	70f8 <lzma_index_iter_next@@XZ_5.0+0xd0>
    7194:	ldr	x3, [x2, #64]
    7198:	cbnz	x3, 70ac <lzma_index_iter_next@@XZ_5.0+0x84>
    719c:	ldr	x3, [x2, #32]
    71a0:	cbz	x3, 71c8 <lzma_index_iter_next@@XZ_5.0+0x1a0>
    71a4:	nop
    71a8:	mov	x2, x3
    71ac:	ldr	x3, [x3, #24]
    71b0:	cbnz	x3, 71a8 <lzma_index_iter_next@@XZ_5.0+0x180>
    71b4:	ldr	x3, [x2, #64]
    71b8:	b	7198 <lzma_index_iter_next@@XZ_5.0+0x170>
    71bc:	ldr	x4, [x2, #32]
    71c0:	cmp	x3, x4
    71c4:	b.ne	7194 <lzma_index_iter_next@@XZ_5.0+0x16c>  // b.any
    71c8:	mov	x3, x2
    71cc:	ldr	x2, [x2, #16]
    71d0:	cbnz	x2, 71bc <lzma_index_iter_next@@XZ_5.0+0x194>
    71d4:	mov	w0, #0x1                   	// #1
    71d8:	ret
    71dc:	ldr	x3, [x0, #272]
    71e0:	b	705c <lzma_index_iter_next@@XZ_5.0+0x34>
    71e4:	ldr	x3, [x2, #64]
    71e8:	b	705c <lzma_index_iter_next@@XZ_5.0+0x34>
    71ec:	ldr	x3, [x0, #272]
    71f0:	ldr	x5, [x3, #32]
    71f4:	cbz	x5, 7214 <lzma_index_iter_next@@XZ_5.0+0x1ec>
    71f8:	mov	x3, x5
    71fc:	ldr	x5, [x5, #24]
    7200:	cbnz	x5, 71f8 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    7204:	b	705c <lzma_index_iter_next@@XZ_5.0+0x34>
    7208:	ldr	x6, [x3, #32]
    720c:	cmp	x5, x6
    7210:	b.ne	705c <lzma_index_iter_next@@XZ_5.0+0x34>  // b.any
    7214:	mov	x5, x3
    7218:	ldr	x3, [x3, #16]
    721c:	cbnz	x3, 7208 <lzma_index_iter_next@@XZ_5.0+0x1e0>
    7220:	b	705c <lzma_index_iter_next@@XZ_5.0+0x34>
    7224:	nop

0000000000007228 <lzma_index_iter_locate@@XZ_5.0>:
    7228:	ldr	x2, [x0, #256]
    722c:	ldr	x3, [x2, #32]
    7230:	cmp	x3, x1
    7234:	b.ls	733c <lzma_index_iter_locate@@XZ_5.0+0x114>  // b.plast
    7238:	ldr	x6, [x2]
    723c:	cbz	x6, 734c <lzma_index_iter_locate@@XZ_5.0+0x124>
    7240:	mov	x4, #0x0                   	// #0
    7244:	ldr	x2, [x6]
    7248:	ldr	x3, [x6, #24]
    724c:	cmp	x1, x2
    7250:	ldr	x2, [x6, #32]
    7254:	b.cc	7278 <lzma_index_iter_locate@@XZ_5.0+0x50>  // b.lo, b.ul, b.last
    7258:	cbz	x2, 7288 <lzma_index_iter_locate@@XZ_5.0+0x60>
    725c:	mov	x4, x6
    7260:	mov	x6, x2
    7264:	ldr	x2, [x6]
    7268:	ldr	x3, [x6, #24]
    726c:	cmp	x1, x2
    7270:	ldr	x2, [x6, #32]
    7274:	b.cs	7258 <lzma_index_iter_locate@@XZ_5.0+0x30>  // b.hs, b.nlast
    7278:	cbz	x3, 7284 <lzma_index_iter_locate@@XZ_5.0+0x5c>
    727c:	mov	x6, x3
    7280:	b	7244 <lzma_index_iter_locate@@XZ_5.0+0x1c>
    7284:	mov	x6, x4
    7288:	ldr	x2, [x6, #56]
    728c:	ldr	x5, [x6]
    7290:	sub	x5, x1, x5
    7294:	cbz	x2, 7344 <lzma_index_iter_locate@@XZ_5.0+0x11c>
    7298:	stp	x29, x30, [sp, #-16]!
    729c:	mov	x4, #0x0                   	// #0
    72a0:	mov	x29, sp
    72a4:	nop
    72a8:	ldr	x1, [x2]
    72ac:	ldr	x3, [x2, #24]
    72b0:	cmp	x1, x5
    72b4:	ldr	x1, [x2, #32]
    72b8:	b.hi	72dc <lzma_index_iter_locate@@XZ_5.0+0xb4>  // b.pmore
    72bc:	cbz	x1, 72ec <lzma_index_iter_locate@@XZ_5.0+0xc4>
    72c0:	mov	x4, x2
    72c4:	mov	x2, x1
    72c8:	ldr	x1, [x2]
    72cc:	ldr	x3, [x2, #24]
    72d0:	cmp	x1, x5
    72d4:	ldr	x1, [x2, #32]
    72d8:	b.ls	72bc <lzma_index_iter_locate@@XZ_5.0+0x94>  // b.plast
    72dc:	cbz	x3, 72e8 <lzma_index_iter_locate@@XZ_5.0+0xc0>
    72e0:	mov	x2, x3
    72e4:	b	72a8 <lzma_index_iter_locate@@XZ_5.0+0x80>
    72e8:	mov	x2, x4
    72ec:	mov	x3, #0x0                   	// #0
    72f0:	ldr	x4, [x2, #56]
    72f4:	b	7314 <lzma_index_iter_locate@@XZ_5.0+0xec>
    72f8:	sub	x1, x4, x3
    72fc:	add	x1, x3, x1, lsr #1
    7300:	add	x7, x2, x1, lsl #4
    7304:	ldr	x7, [x7, #64]
    7308:	cmp	x7, x5
    730c:	b.ls	7334 <lzma_index_iter_locate@@XZ_5.0+0x10c>  // b.plast
    7310:	mov	x4, x1
    7314:	cmp	x4, x3
    7318:	b.hi	72f8 <lzma_index_iter_locate@@XZ_5.0+0xd0>  // b.pmore
    731c:	stp	x6, x2, [x0, #264]
    7320:	str	x3, [x0, #280]
    7324:	bl	4b90 <lzma_physmem@@XZ_5.0+0x108>
    7328:	mov	w0, #0x0                   	// #0
    732c:	ldp	x29, x30, [sp], #16
    7330:	ret
    7334:	add	x3, x1, #0x1
    7338:	b	7314 <lzma_index_iter_locate@@XZ_5.0+0xec>
    733c:	mov	w0, #0x1                   	// #1
    7340:	ret
    7344:	ldr	x0, [x2, #56]
    7348:	brk	#0x3e8
    734c:	ldr	x0, [x6]
    7350:	brk	#0x3e8
    7354:	nop

0000000000007358 <lzma_stream_flags_compare@@XZ_5.0>:
    7358:	mov	x2, x0
    735c:	ldr	w0, [x0]
    7360:	cbnz	w0, 73e8 <lzma_stream_flags_compare@@XZ_5.0+0x90>
    7364:	ldr	w0, [x1]
    7368:	cbnz	w0, 73e8 <lzma_stream_flags_compare@@XZ_5.0+0x90>
    736c:	ldr	w3, [x2, #16]
    7370:	cmp	w3, #0xf
    7374:	b.hi	73e0 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.pmore
    7378:	ldr	w4, [x1, #16]
    737c:	cmp	w4, #0xf
    7380:	b.hi	73e0 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.pmore
    7384:	cmp	w3, w4
    7388:	b.ne	73f0 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.any
    738c:	ldr	x2, [x2, #8]
    7390:	cmn	x2, #0x1
    7394:	b.eq	73dc <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.none
    7398:	ldr	x1, [x1, #8]
    739c:	cmn	x1, #0x1
    73a0:	b.eq	73dc <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.none
    73a4:	sub	x4, x2, #0x4
    73a8:	mov	x3, #0x3fffffffc           	// #17179869180
    73ac:	mov	w0, #0xb                   	// #11
    73b0:	cmp	x4, x3
    73b4:	b.hi	73dc <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.pmore
    73b8:	sub	x4, x1, #0x4
    73bc:	cmp	x4, x3
    73c0:	b.hi	73dc <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.pmore
    73c4:	orr	x0, x2, x1
    73c8:	tst	x0, #0x3
    73cc:	b.ne	73e0 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.any
    73d0:	cmp	x2, x1
    73d4:	mov	w0, #0x9                   	// #9
    73d8:	csel	w0, wzr, w0, eq  // eq = none
    73dc:	ret
    73e0:	mov	w0, #0xb                   	// #11
    73e4:	ret
    73e8:	mov	w0, #0x8                   	// #8
    73ec:	ret
    73f0:	mov	w0, #0x9                   	// #9
    73f4:	ret

00000000000073f8 <lzma_vli_size@@XZ_5.0>:
    73f8:	mov	x1, x0
    73fc:	mov	w0, #0x0                   	// #0
    7400:	tbnz	x1, #63, 7414 <lzma_vli_size@@XZ_5.0+0x1c>
    7404:	nop
    7408:	lsr	x1, x1, #7
    740c:	add	w0, w0, #0x1
    7410:	cbnz	x1, 7408 <lzma_vli_size@@XZ_5.0+0x10>
    7414:	ret

0000000000007418 <lzma_cputhreads@@XZ_5.2>:
    7418:	b	36b8 <pthread_cond_timedwait@plt+0x128>
    741c:	nop
    7420:	stp	x29, x30, [sp, #-112]!
    7424:	mov	x29, sp
    7428:	stp	x21, x22, [sp, #32]
    742c:	mov	x22, x2
    7430:	mov	x21, x0
    7434:	ldr	x2, [x0, #16]
    7438:	stp	x19, x20, [sp, #16]
    743c:	mov	x19, x1
    7440:	str	x23, [sp, #48]
    7444:	adrp	x23, 7000 <lzma_index_dup@@XZ_5.0+0x250>
    7448:	add	x23, x23, #0x420
    744c:	cmp	x2, x23
    7450:	b.eq	7458 <lzma_cputhreads@@XZ_5.2+0x40>  // b.none
    7454:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    7458:	ldr	x20, [x21]
    745c:	str	x23, [x21, #16]
    7460:	cbz	x20, 752c <lzma_cputhreads@@XZ_5.2+0x114>
    7464:	str	wzr, [x20, #72]
    7468:	add	x1, x20, #0x58
    746c:	str	xzr, [x20, #80]
    7470:	mov	x0, x22
    7474:	bl	15340 <lzma_lzma_preset@@XZ_5.0+0x2530>
    7478:	tst	w0, #0xff
    747c:	mov	w0, #0x8                   	// #8
    7480:	b.ne	7504 <lzma_cputhreads@@XZ_5.2+0xec>  // b.any
    7484:	ldr	w3, [x22]
    7488:	cmp	w3, #0xfff
    748c:	b.ls	7504 <lzma_cputhreads@@XZ_5.2+0xec>  // b.plast
    7490:	sub	w3, w3, #0x1
    7494:	orr	w3, w3, w3, lsr #2
    7498:	orr	w3, w3, w3, lsr #3
    749c:	orr	w3, w3, w3, lsr #4
    74a0:	orr	w3, w3, w3, lsr #8
    74a4:	orr	w3, w3, w3, lsr #16
    74a8:	cmn	w3, #0x1
    74ac:	b.eq	7518 <lzma_cputhreads@@XZ_5.2+0x100>  // b.none
    74b0:	add	w3, w3, #0x1
    74b4:	and	w1, w3, #0xff
    74b8:	ubfx	x0, x3, #8, #8
    74bc:	ubfx	x2, x3, #16, #8
    74c0:	lsr	w3, w3, #24
    74c4:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    74c8:	strb	w3, [x20, #92]
    74cc:	mov	x5, #0xffffffffffffffff    	// #-1
    74d0:	strb	w1, [x20, #89]
    74d4:	ldr	x3, [x4, #4048]
    74d8:	strb	w0, [x20, #90]
    74dc:	strb	w2, [x20, #91]
    74e0:	mov	x1, x19
    74e4:	stur	x5, [x20, #93]
    74e8:	mov	x0, x20
    74ec:	stp	xzr, xzr, [sp, #64]
    74f0:	add	x2, sp, #0x40
    74f4:	stp	xzr, xzr, [sp, #80]
    74f8:	stp	x3, x22, [sp, #72]
    74fc:	stp	xzr, xzr, [sp, #96]
    7500:	bl	3860 <lzma_version_string@@XZ_5.0+0x148>
    7504:	ldp	x19, x20, [sp, #16]
    7508:	ldp	x21, x22, [sp, #32]
    750c:	ldr	x23, [sp, #48]
    7510:	ldp	x29, x30, [sp], #112
    7514:	ret
    7518:	mov	w3, #0xff                  	// #255
    751c:	mov	w2, w3
    7520:	mov	w0, w3
    7524:	mov	w1, w3
    7528:	b	74c4 <lzma_cputhreads@@XZ_5.2+0xac>
    752c:	mov	x1, x19
    7530:	mov	x0, #0x68                  	// #104
    7534:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    7538:	mov	x20, x0
    753c:	cbz	x0, 7574 <lzma_cputhreads@@XZ_5.2+0x15c>
    7540:	adrp	x1, 7000 <lzma_index_dup@@XZ_5.0+0x250>
    7544:	adrp	x0, 7000 <lzma_index_dup@@XZ_5.0+0x250>
    7548:	add	x1, x1, #0x5b0
    754c:	add	x0, x0, #0x580
    7550:	mov	x2, #0xffffffffffffffff    	// #-1
    7554:	str	x20, [x21]
    7558:	stp	xzr, x2, [x20]
    755c:	stp	xzr, xzr, [x20, #16]
    7560:	stp	x1, x0, [x21, #24]
    7564:	stp	xzr, xzr, [x20, #32]
    7568:	stp	xzr, xzr, [x20, #48]
    756c:	str	xzr, [x20, #64]
    7570:	b	7464 <lzma_cputhreads@@XZ_5.2+0x4c>
    7574:	mov	w0, #0x5                   	// #5
    7578:	b	7504 <lzma_cputhreads@@XZ_5.2+0xec>
    757c:	nop
    7580:	stp	x29, x30, [sp, #-32]!
    7584:	mov	x29, sp
    7588:	stp	x19, x20, [sp, #16]
    758c:	mov	x19, x0
    7590:	mov	x20, x1
    7594:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    7598:	mov	x1, x20
    759c:	mov	x0, x19
    75a0:	ldp	x19, x20, [sp, #16]
    75a4:	ldp	x29, x30, [sp], #32
    75a8:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    75ac:	nop
    75b0:	stp	x29, x30, [sp, #-96]!
    75b4:	mov	x29, sp
    75b8:	stp	x19, x20, [sp, #16]
    75bc:	mov	x20, x6
    75c0:	ldr	x6, [x6]
    75c4:	str	x27, [sp, #80]
    75c8:	ldr	w27, [sp, #96]
    75cc:	cmp	x6, x7
    75d0:	b.cs	76bc <lzma_cputhreads@@XZ_5.2+0x2a4>  // b.hs, b.nlast
    75d4:	mov	x19, x0
    75d8:	ldr	w0, [x0, #72]
    75dc:	stp	x21, x22, [sp, #32]
    75e0:	mov	x21, x7
    75e4:	mov	x22, x5
    75e8:	stp	x23, x24, [sp, #48]
    75ec:	mov	x23, x1
    75f0:	mov	x24, x2
    75f4:	stp	x25, x26, [sp, #64]
    75f8:	mov	x25, x3
    75fc:	mov	x26, x4
    7600:	cbnz	w0, 7688 <lzma_cputhreads@@XZ_5.2+0x270>
    7604:	mov	x5, x7
    7608:	mov	x4, x20
    760c:	mov	x3, x22
    7610:	add	x1, x19, #0x50
    7614:	add	x0, x19, #0x58
    7618:	mov	x2, #0xd                   	// #13
    761c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    7620:	ldr	x0, [x19, #80]
    7624:	cmp	x0, #0xc
    7628:	b.ls	76b0 <lzma_cputhreads@@XZ_5.2+0x298>  // b.plast
    762c:	ldr	x0, [x20]
    7630:	mov	w1, #0x1                   	// #1
    7634:	str	w1, [x19, #72]
    7638:	cmp	x0, x21
    763c:	b.cs	76b0 <lzma_cputhreads@@XZ_5.2+0x298>  // b.hs, b.nlast
    7640:	ldr	x0, [x19]
    7644:	str	w27, [sp, #96]
    7648:	mov	x7, x21
    764c:	mov	x6, x20
    7650:	mov	x5, x22
    7654:	mov	x4, x26
    7658:	mov	x3, x25
    765c:	mov	x2, x24
    7660:	mov	x1, x23
    7664:	ldr	x8, [x19, #24]
    7668:	ldp	x19, x20, [sp, #16]
    766c:	mov	x16, x8
    7670:	ldp	x21, x22, [sp, #32]
    7674:	ldp	x23, x24, [sp, #48]
    7678:	ldp	x25, x26, [sp, #64]
    767c:	ldr	x27, [sp, #80]
    7680:	ldp	x29, x30, [sp], #96
    7684:	br	x16
    7688:	cmp	w0, #0x1
    768c:	b.eq	7640 <lzma_cputhreads@@XZ_5.2+0x228>  // b.none
    7690:	ldp	x21, x22, [sp, #32]
    7694:	mov	w0, #0xb                   	// #11
    7698:	ldp	x23, x24, [sp, #48]
    769c:	ldp	x25, x26, [sp, #64]
    76a0:	ldp	x19, x20, [sp, #16]
    76a4:	ldr	x27, [sp, #80]
    76a8:	ldp	x29, x30, [sp], #96
    76ac:	ret
    76b0:	ldp	x21, x22, [sp, #32]
    76b4:	ldp	x23, x24, [sp, #48]
    76b8:	ldp	x25, x26, [sp, #64]
    76bc:	mov	w0, #0x0                   	// #0
    76c0:	b	76a0 <lzma_cputhreads@@XZ_5.2+0x288>
    76c4:	nop

00000000000076c8 <lzma_alone_encoder@@XZ_5.0>:
    76c8:	stp	x29, x30, [sp, #-48]!
    76cc:	mov	x29, sp
    76d0:	stp	x19, x20, [sp, #16]
    76d4:	mov	x20, x0
    76d8:	str	x21, [sp, #32]
    76dc:	mov	x21, x1
    76e0:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    76e4:	mov	w19, w0
    76e8:	cbz	w0, 7700 <lzma_alone_encoder@@XZ_5.0+0x38>
    76ec:	mov	w0, w19
    76f0:	ldp	x19, x20, [sp, #16]
    76f4:	ldr	x21, [sp, #32]
    76f8:	ldp	x29, x30, [sp], #48
    76fc:	ret
    7700:	ldp	x1, x0, [x20, #48]
    7704:	mov	x2, x21
    7708:	bl	7420 <lzma_cputhreads@@XZ_5.2+0x8>
    770c:	mov	w19, w0
    7710:	cbnz	w0, 7738 <lzma_alone_encoder@@XZ_5.0+0x70>
    7714:	ldr	x0, [x20, #56]
    7718:	mov	w1, #0x1                   	// #1
    771c:	ldr	x21, [sp, #32]
    7720:	strb	w1, [x0, #88]
    7724:	strb	w1, [x0, #91]
    7728:	mov	w0, w19
    772c:	ldp	x19, x20, [sp, #16]
    7730:	ldp	x29, x30, [sp], #48
    7734:	ret
    7738:	mov	x0, x20
    773c:	bl	3350 <lzma_end@plt>
    7740:	b	76ec <lzma_alone_encoder@@XZ_5.0+0x24>
    7744:	nop
    7748:	mov	x3, #0xfffffffffffffbbc    	// #-1092
    774c:	movk	x3, #0x7fff, lsl #48
    7750:	cmp	x0, x3
    7754:	b.hi	778c <lzma_alone_encoder@@XZ_5.0+0xc4>  // b.pmore
    7758:	mov	x1, #0xffff                	// #65535
    775c:	add	x2, x0, x1
    7760:	add	x1, x0, #0x3
    7764:	lsr	x2, x2, #16
    7768:	add	x2, x2, x2, lsl #1
    776c:	add	x2, x2, #0x1
    7770:	add	x1, x1, x2
    7774:	sub	x2, x3, x2
    7778:	and	x1, x1, #0xfffffffffffffffc
    777c:	cmp	x0, x2
    7780:	add	x0, x1, #0x5c
    7784:	csel	x0, x0, xzr, ls  // ls = plast
    7788:	ret
    778c:	mov	x0, #0x0                   	// #0
    7790:	ret
    7794:	nop

0000000000007798 <lzma_block_buffer_bound@@XZ_5.0>:
    7798:	mov	x3, #0xfffffffffffffbbc    	// #-1092
    779c:	movk	x3, #0x7fff, lsl #48
    77a0:	cmp	x0, x3
    77a4:	b.hi	77dc <lzma_block_buffer_bound@@XZ_5.0+0x44>  // b.pmore
    77a8:	mov	x1, #0xffff                	// #65535
    77ac:	add	x2, x0, x1
    77b0:	add	x1, x0, #0x3
    77b4:	lsr	x2, x2, #16
    77b8:	add	x2, x2, x2, lsl #1
    77bc:	add	x2, x2, #0x1
    77c0:	add	x1, x1, x2
    77c4:	sub	x2, x3, x2
    77c8:	and	x1, x1, #0xfffffffffffffffc
    77cc:	cmp	x0, x2
    77d0:	add	x0, x1, #0x5c
    77d4:	csel	x0, x0, xzr, ls  // ls = plast
    77d8:	ret
    77dc:	mov	x0, #0x0                   	// #0
    77e0:	ret
    77e4:	nop

00000000000077e8 <lzma_block_buffer_encode@@XZ_5.0>:
    77e8:	sub	sp, sp, #0x120
    77ec:	stp	x29, x30, [sp, #16]
    77f0:	add	x29, sp, #0x10
    77f4:	stp	x21, x22, [sp, #48]
    77f8:	cbz	x0, 7b84 <lzma_block_buffer_encode@@XZ_5.0+0x39c>
    77fc:	stp	x23, x24, [sp, #64]
    7800:	cmp	x2, #0x0
    7804:	mov	x23, x3
    7808:	stp	x25, x26, [sp, #80]
    780c:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    7810:	mov	x25, x2
    7814:	mov	w21, #0xb                   	// #11
    7818:	b.ne	7b68 <lzma_block_buffer_encode@@XZ_5.0+0x380>  // b.any
    781c:	stp	x19, x20, [sp, #32]
    7820:	cmp	x4, #0x0
    7824:	mov	x24, x4
    7828:	mov	x19, x5
    782c:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    7830:	b.eq	7b64 <lzma_block_buffer_encode@@XZ_5.0+0x37c>  // b.none
    7834:	stp	x27, x28, [sp, #96]
    7838:	mov	x20, x6
    783c:	ldr	x27, [x5]
    7840:	cmp	x6, x27
    7844:	b.cc	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.lo, b.ul, b.last
    7848:	mov	x22, x0
    784c:	ldr	w0, [x0]
    7850:	mov	w21, #0x8                   	// #8
    7854:	cmp	w0, #0x1
    7858:	b.hi	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.pmore
    785c:	ldr	w28, [x22, #8]
    7860:	mov	w21, #0xb                   	// #11
    7864:	cmp	w28, #0xf
    7868:	b.hi	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.pmore
    786c:	ldr	x0, [x22, #32]
    7870:	cbz	x0, 7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>
    7874:	mov	x26, x1
    7878:	mov	w0, w28
    787c:	mov	w21, #0x3                   	// #3
    7880:	bl	3110 <lzma_check_is_supported@plt>
    7884:	tst	w0, #0xff
    7888:	b.eq	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.none
    788c:	sub	x6, x20, x27
    7890:	mov	w0, w28
    7894:	and	x6, x6, #0x3
    7898:	mov	w21, #0xa                   	// #10
    789c:	sub	x20, x20, x6
    78a0:	sub	x27, x20, x27
    78a4:	bl	32a0 <lzma_check_size@plt>
    78a8:	mov	w28, w0
    78ac:	cmp	x27, w0, uxtw
    78b0:	b.ls	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.plast
    78b4:	str	x23, [x22, #24]
    78b8:	mov	x0, #0xfffffffffffffbbc    	// #-1092
    78bc:	movk	x0, #0x7fff, lsl #48
    78c0:	sub	x20, x20, x28
    78c4:	cmp	x23, x0
    78c8:	b.hi	7b9c <lzma_block_buffer_encode@@XZ_5.0+0x3b4>  // b.pmore
    78cc:	mov	x0, #0xffff                	// #65535
    78d0:	add	x0, x23, x0
    78d4:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    78d8:	lsr	x0, x0, #16
    78dc:	movk	x1, #0x7fff, lsl #48
    78e0:	add	x0, x0, x0, lsl #1
    78e4:	add	x0, x0, #0x1
    78e8:	sub	x1, x1, x0
    78ec:	cmp	x23, x1
    78f0:	b.hi	7b9c <lzma_block_buffer_encode@@XZ_5.0+0x3b4>  // b.pmore
    78f4:	add	x0, x23, x0
    78f8:	str	x0, [x22, #16]
    78fc:	mov	x0, x22
    7900:	bl	3190 <lzma_block_header_size@plt>
    7904:	mov	w21, w0
    7908:	cbnz	w0, 7bd8 <lzma_block_buffer_encode@@XZ_5.0+0x3f0>
    790c:	ldr	x8, [x19]
    7910:	ldr	w1, [x22, #4]
    7914:	sub	x0, x20, x8
    7918:	cmp	x0, x1
    791c:	b.ls	7be0 <lzma_block_buffer_encode@@XZ_5.0+0x3f8>  // b.plast
    7920:	add	x1, x8, x1
    7924:	str	x1, [x19]
    7928:	adrp	x3, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    792c:	sub	x2, x20, x1
    7930:	ldr	x7, [x22, #16]
    7934:	add	x27, sp, #0xb0
    7938:	movi	v0.4s, #0x0
    793c:	mov	x0, x27
    7940:	cmp	x2, x7
    7944:	add	x1, x1, x7
    7948:	ldr	q1, [x3, #336]
    794c:	csel	x7, x1, x20, hi  // hi = pmore
    7950:	ldr	x2, [x22, #32]
    7954:	mov	x1, x26
    7958:	stp	x8, x7, [sp, #120]
    795c:	str	xzr, [sp, #176]
    7960:	stur	q1, [sp, #184]
    7964:	stur	q0, [sp, #200]
    7968:	stur	q0, [sp, #216]
    796c:	stur	q0, [sp, #232]
    7970:	bl	8c20 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    7974:	mov	w21, w0
    7978:	ldr	x8, [sp, #120]
    797c:	cbnz	w0, 7bb8 <lzma_block_buffer_encode@@XZ_5.0+0x3d0>
    7980:	ldr	x7, [sp, #128]
    7984:	add	x3, sp, #0x90
    7988:	ldr	x0, [sp, #176]
    798c:	mov	w10, #0x3                   	// #3
    7990:	ldr	x9, [sp, #200]
    7994:	mov	x6, x19
    7998:	mov	x5, x24
    799c:	mov	x4, x23
    79a0:	mov	x2, x25
    79a4:	str	w10, [sp]
    79a8:	stp	x8, xzr, [sp, #136]
    79ac:	mov	x1, x26
    79b0:	str	x3, [sp, #120]
    79b4:	blr	x9
    79b8:	mov	x1, x26
    79bc:	mov	w21, w0
    79c0:	mov	x0, x27
    79c4:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    79c8:	cmp	w21, #0x1
    79cc:	ldr	x3, [sp, #120]
    79d0:	ldr	x8, [sp, #136]
    79d4:	b.eq	7bec <lzma_block_buffer_encode@@XZ_5.0+0x404>  // b.none
    79d8:	cbnz	w21, 7bd4 <lzma_block_buffer_encode@@XZ_5.0+0x3ec>
    79dc:	str	x8, [x19]
    79e0:	mov	w1, #0x1000                	// #4096
    79e4:	mov	x2, #0xffffffffffffffff    	// #-1
    79e8:	ldr	x26, [x22, #32]
    79ec:	str	x3, [x22, #32]
    79f0:	mov	x3, #0x21                  	// #33
    79f4:	stp	xzr, xzr, [sp, #176]
    79f8:	mov	x0, x22
    79fc:	stp	x3, x27, [sp, #144]
    7a00:	str	x2, [sp, #160]
    7a04:	str	w1, [sp, #176]
    7a08:	stp	xzr, xzr, [sp, #192]
    7a0c:	stp	xzr, xzr, [sp, #208]
    7a10:	stp	xzr, xzr, [sp, #224]
    7a14:	stp	xzr, xzr, [sp, #240]
    7a18:	stp	xzr, xzr, [sp, #256]
    7a1c:	stp	xzr, xzr, [sp, #272]
    7a20:	bl	3190 <lzma_block_header_size@plt>
    7a24:	cbnz	w0, 7ca8 <lzma_block_buffer_encode@@XZ_5.0+0x4c0>
    7a28:	ldr	x1, [x19]
    7a2c:	ldr	x2, [x22, #16]
    7a30:	sub	x20, x20, x1
    7a34:	ldr	w0, [x22, #4]
    7a38:	add	x0, x0, x2
    7a3c:	cmp	x20, x0
    7a40:	b.cc	7cc4 <lzma_block_buffer_encode@@XZ_5.0+0x4dc>  // b.lo, b.ul, b.last
    7a44:	add	x1, x24, x1
    7a48:	mov	x0, x22
    7a4c:	bl	3570 <lzma_block_header_encode@plt>
    7a50:	cbnz	w0, 7ca8 <lzma_block_buffer_encode@@XZ_5.0+0x4c0>
    7a54:	ldr	x0, [x19]
    7a58:	str	x26, [x22, #32]
    7a5c:	ldr	w20, [x22, #4]
    7a60:	add	x20, x20, x0
    7a64:	str	x20, [x19]
    7a68:	cbz	x23, 7aec <lzma_block_buffer_encode@@XZ_5.0+0x304>
    7a6c:	mov	x26, #0x0                   	// #0
    7a70:	mov	w0, #0x1                   	// #1
    7a74:	mov	x21, #0x10000               	// #65536
    7a78:	add	x1, x20, #0x1
    7a7c:	str	x1, [x19]
    7a80:	strb	w0, [x24, x20]
    7a84:	sub	x20, x23, x26
    7a88:	cmp	x20, #0x10, lsl #12
    7a8c:	add	x1, x25, x26
    7a90:	ldr	x2, [x19]
    7a94:	csel	x20, x20, x21, ls  // ls = plast
    7a98:	sub	x0, x20, #0x1
    7a9c:	sub	w3, w20, #0x1
    7aa0:	add	x4, x2, #0x1
    7aa4:	str	x4, [x19]
    7aa8:	lsr	x0, x0, #8
    7aac:	strb	w0, [x24, x2]
    7ab0:	mov	x2, x20
    7ab4:	add	x26, x26, x20
    7ab8:	ldr	x0, [x19]
    7abc:	add	x4, x0, #0x1
    7ac0:	str	x4, [x19]
    7ac4:	strb	w3, [x24, x0]
    7ac8:	ldr	x0, [x19]
    7acc:	add	x0, x24, x0
    7ad0:	bl	30c0 <memcpy@plt>
    7ad4:	ldr	x2, [x19]
    7ad8:	cmp	x23, x26
    7adc:	mov	w0, #0x2                   	// #2
    7ae0:	add	x20, x20, x2
    7ae4:	str	x20, [x19]
    7ae8:	b.hi	7a78 <lzma_block_buffer_encode@@XZ_5.0+0x290>  // b.pmore
    7aec:	add	x0, x20, #0x1
    7af0:	str	x0, [x19]
    7af4:	strb	wzr, [x24, x20]
    7af8:	ldr	x0, [x22, #16]
    7afc:	tst	x0, #0x3
    7b00:	b.eq	7b24 <lzma_block_buffer_encode@@XZ_5.0+0x33c>  // b.none
    7b04:	nop
    7b08:	ldr	x1, [x19]
    7b0c:	add	x0, x0, #0x1
    7b10:	add	x2, x1, #0x1
    7b14:	str	x2, [x19]
    7b18:	strb	wzr, [x24, x1]
    7b1c:	tst	x0, #0x3
    7b20:	b.ne	7b08 <lzma_block_buffer_encode@@XZ_5.0+0x320>  // b.any
    7b24:	cbnz	x28, 7c34 <lzma_block_buffer_encode@@XZ_5.0+0x44c>
    7b28:	mov	w21, #0x0                   	// #0
    7b2c:	ldp	x19, x20, [sp, #32]
    7b30:	ldp	x23, x24, [sp, #64]
    7b34:	ldp	x25, x26, [sp, #80]
    7b38:	ldp	x27, x28, [sp, #96]
    7b3c:	b	7b50 <lzma_block_buffer_encode@@XZ_5.0+0x368>
    7b40:	ldp	x19, x20, [sp, #32]
    7b44:	ldp	x23, x24, [sp, #64]
    7b48:	ldp	x25, x26, [sp, #80]
    7b4c:	ldp	x27, x28, [sp, #96]
    7b50:	mov	w0, w21
    7b54:	ldp	x29, x30, [sp, #16]
    7b58:	ldp	x21, x22, [sp, #48]
    7b5c:	add	sp, sp, #0x120
    7b60:	ret
    7b64:	ldp	x19, x20, [sp, #32]
    7b68:	mov	w0, w21
    7b6c:	ldp	x29, x30, [sp, #16]
    7b70:	ldp	x21, x22, [sp, #48]
    7b74:	ldp	x23, x24, [sp, #64]
    7b78:	ldp	x25, x26, [sp, #80]
    7b7c:	add	sp, sp, #0x120
    7b80:	ret
    7b84:	mov	w21, #0xb                   	// #11
    7b88:	mov	w0, w21
    7b8c:	ldp	x29, x30, [sp, #16]
    7b90:	ldp	x21, x22, [sp, #48]
    7b94:	add	sp, sp, #0x120
    7b98:	ret
    7b9c:	mov	w21, #0x9                   	// #9
    7ba0:	ldp	x19, x20, [sp, #32]
    7ba4:	ldp	x23, x24, [sp, #64]
    7ba8:	ldp	x25, x26, [sp, #80]
    7bac:	ldp	x27, x28, [sp, #96]
    7bb0:	str	xzr, [x22, #16]
    7bb4:	b	7b50 <lzma_block_buffer_encode@@XZ_5.0+0x368>
    7bb8:	mov	x1, x26
    7bbc:	mov	x0, x27
    7bc0:	str	x8, [sp, #120]
    7bc4:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    7bc8:	cmp	w21, #0x1
    7bcc:	ldr	x8, [sp, #120]
    7bd0:	b.eq	7bec <lzma_block_buffer_encode@@XZ_5.0+0x404>  // b.none
    7bd4:	str	x8, [x19]
    7bd8:	cmp	w21, #0xa
    7bdc:	b.ne	7b40 <lzma_block_buffer_encode@@XZ_5.0+0x358>  // b.any
    7be0:	add	x27, sp, #0xb0
    7be4:	add	x3, sp, #0x90
    7be8:	b	79e0 <lzma_block_buffer_encode@@XZ_5.0+0x1f8>
    7bec:	ldr	x2, [x19]
    7bf0:	add	x1, x24, x8
    7bf4:	ldr	w3, [x22, #4]
    7bf8:	mov	x0, x22
    7bfc:	sub	x2, x2, x8
    7c00:	str	x8, [sp, #120]
    7c04:	sub	x2, x2, x3
    7c08:	str	x2, [x22, #16]
    7c0c:	bl	3570 <lzma_block_header_encode@plt>
    7c10:	cbz	w0, 7af8 <lzma_block_buffer_encode@@XZ_5.0+0x310>
    7c14:	ldr	x8, [sp, #120]
    7c18:	mov	w21, #0xb                   	// #11
    7c1c:	ldp	x23, x24, [sp, #64]
    7c20:	ldp	x25, x26, [sp, #80]
    7c24:	ldp	x27, x28, [sp, #96]
    7c28:	str	x8, [x19]
    7c2c:	ldp	x19, x20, [sp, #32]
    7c30:	b	7b50 <lzma_block_buffer_encode@@XZ_5.0+0x368>
    7c34:	ldr	w1, [x22, #8]
    7c38:	mov	x0, x27
    7c3c:	mov	w21, #0x0                   	// #0
    7c40:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    7c44:	ldr	w1, [x22, #8]
    7c48:	mov	x3, x23
    7c4c:	mov	x2, x25
    7c50:	mov	x0, x27
    7c54:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    7c58:	ldr	w1, [x22, #8]
    7c5c:	mov	x0, x27
    7c60:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    7c64:	mov	x2, x28
    7c68:	mov	x1, x27
    7c6c:	add	x0, x22, #0x28
    7c70:	bl	30c0 <memcpy@plt>
    7c74:	ldr	x0, [x19]
    7c78:	mov	x1, x27
    7c7c:	mov	x2, x28
    7c80:	add	x0, x24, x0
    7c84:	bl	30c0 <memcpy@plt>
    7c88:	ldr	x0, [x19]
    7c8c:	ldp	x23, x24, [sp, #64]
    7c90:	add	x28, x0, x28
    7c94:	ldp	x25, x26, [sp, #80]
    7c98:	str	x28, [x19]
    7c9c:	ldp	x19, x20, [sp, #32]
    7ca0:	ldp	x27, x28, [sp, #96]
    7ca4:	b	7b50 <lzma_block_buffer_encode@@XZ_5.0+0x368>
    7ca8:	mov	w21, #0xb                   	// #11
    7cac:	ldp	x19, x20, [sp, #32]
    7cb0:	ldp	x23, x24, [sp, #64]
    7cb4:	ldp	x27, x28, [sp, #96]
    7cb8:	str	x26, [x22, #32]
    7cbc:	ldp	x25, x26, [sp, #80]
    7cc0:	b	7b50 <lzma_block_buffer_encode@@XZ_5.0+0x368>
    7cc4:	mov	w21, #0xa                   	// #10
    7cc8:	b	7cac <lzma_block_buffer_encode@@XZ_5.0+0x4c4>
    7ccc:	nop

0000000000007cd0 <lzma_block_uncomp_encode@@XZ_5.2>:
    7cd0:	stp	x29, x30, [sp, #-240]!
    7cd4:	mov	x29, sp
    7cd8:	stp	x21, x22, [sp, #32]
    7cdc:	cbz	x0, 7fcc <lzma_block_uncomp_encode@@XZ_5.2+0x2fc>
    7ce0:	stp	x23, x24, [sp, #48]
    7ce4:	cmp	x1, #0x0
    7ce8:	mov	x23, x2
    7cec:	stp	x25, x26, [sp, #64]
    7cf0:	ccmp	x2, #0x0, #0x4, eq  // eq = none
    7cf4:	mov	x25, x1
    7cf8:	mov	w21, #0xb                   	// #11
    7cfc:	b.ne	7f94 <lzma_block_uncomp_encode@@XZ_5.2+0x2c4>  // b.any
    7d00:	stp	x19, x20, [sp, #16]
    7d04:	cmp	x3, #0x0
    7d08:	mov	x24, x3
    7d0c:	mov	x19, x4
    7d10:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    7d14:	b.eq	7f90 <lzma_block_uncomp_encode@@XZ_5.2+0x2c0>  // b.none
    7d18:	ldr	x26, [x4]
    7d1c:	mov	x20, x5
    7d20:	cmp	x5, x26
    7d24:	b.cc	7f90 <lzma_block_uncomp_encode@@XZ_5.2+0x2c0>  // b.lo, b.ul, b.last
    7d28:	mov	x22, x0
    7d2c:	ldr	w0, [x0]
    7d30:	mov	w21, #0x8                   	// #8
    7d34:	cmp	w0, #0x1
    7d38:	b.hi	7f90 <lzma_block_uncomp_encode@@XZ_5.2+0x2c0>  // b.pmore
    7d3c:	stp	x27, x28, [sp, #80]
    7d40:	mov	w21, #0xb                   	// #11
    7d44:	ldr	w27, [x22, #8]
    7d48:	cmp	w27, #0xf
    7d4c:	b.hi	7fac <lzma_block_uncomp_encode@@XZ_5.2+0x2dc>  // b.pmore
    7d50:	mov	w0, w27
    7d54:	mov	w21, #0x3                   	// #3
    7d58:	bl	3110 <lzma_check_is_supported@plt>
    7d5c:	tst	w0, #0xff
    7d60:	b.eq	7fac <lzma_block_uncomp_encode@@XZ_5.2+0x2dc>  // b.none
    7d64:	sub	x5, x20, x26
    7d68:	mov	w0, w27
    7d6c:	and	x5, x5, #0x3
    7d70:	mov	w21, #0xa                   	// #10
    7d74:	sub	x20, x20, x5
    7d78:	sub	x26, x20, x26
    7d7c:	bl	32a0 <lzma_check_size@plt>
    7d80:	mov	w27, w0
    7d84:	cmp	x26, w0, uxtw
    7d88:	b.ls	7fac <lzma_block_uncomp_encode@@XZ_5.2+0x2dc>  // b.plast
    7d8c:	str	x23, [x22, #24]
    7d90:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    7d94:	movk	x1, #0x7fff, lsl #48
    7d98:	cmp	x23, x1
    7d9c:	b.hi	7fe0 <lzma_block_uncomp_encode@@XZ_5.2+0x310>  // b.pmore
    7da0:	mov	x0, #0xffff                	// #65535
    7da4:	add	x0, x23, x0
    7da8:	lsr	x0, x0, #16
    7dac:	add	x0, x0, x0, lsl #1
    7db0:	add	x0, x0, #0x1
    7db4:	sub	x1, x1, x0
    7db8:	cmp	x23, x1
    7dbc:	b.hi	7fe0 <lzma_block_uncomp_encode@@XZ_5.2+0x310>  // b.pmore
    7dc0:	add	x0, x23, x0
    7dc4:	add	x1, sp, #0x60
    7dc8:	mov	w2, #0x1000                	// #4096
    7dcc:	mov	x3, #0x21                  	// #33
    7dd0:	str	x0, [x22, #16]
    7dd4:	mov	x0, x1
    7dd8:	mov	x1, #0xffffffffffffffff    	// #-1
    7ddc:	stp	xzr, xzr, [sp, #128]
    7de0:	add	x26, sp, #0x80
    7de4:	ldr	x28, [x22, #32]
    7de8:	str	x0, [x22, #32]
    7dec:	mov	x0, x22
    7df0:	stp	x3, x26, [sp, #96]
    7df4:	str	x1, [sp, #112]
    7df8:	str	w2, [sp, #128]
    7dfc:	stp	xzr, xzr, [sp, #144]
    7e00:	stp	xzr, xzr, [sp, #160]
    7e04:	stp	xzr, xzr, [sp, #176]
    7e08:	stp	xzr, xzr, [sp, #192]
    7e0c:	stp	xzr, xzr, [sp, #208]
    7e10:	stp	xzr, xzr, [sp, #224]
    7e14:	bl	3190 <lzma_block_header_size@plt>
    7e18:	cbnz	w0, 8018 <lzma_block_uncomp_encode@@XZ_5.2+0x348>
    7e1c:	ldr	x1, [x19]
    7e20:	ldr	x3, [x22, #16]
    7e24:	sub	x20, x20, x1
    7e28:	ldr	w2, [x22, #4]
    7e2c:	sub	x0, x20, x27
    7e30:	add	x2, x2, x3
    7e34:	cmp	x0, x2
    7e38:	b.cc	7ffc <lzma_block_uncomp_encode@@XZ_5.2+0x32c>  // b.lo, b.ul, b.last
    7e3c:	add	x1, x24, x1
    7e40:	mov	x0, x22
    7e44:	bl	3570 <lzma_block_header_encode@plt>
    7e48:	mov	w21, w0
    7e4c:	cbnz	w0, 8018 <lzma_block_uncomp_encode@@XZ_5.2+0x348>
    7e50:	ldr	x0, [x19]
    7e54:	str	x28, [x22, #32]
    7e58:	ldr	w20, [x22, #4]
    7e5c:	add	x20, x20, x0
    7e60:	str	x20, [x19]
    7e64:	cbz	x23, 7ee8 <lzma_block_uncomp_encode@@XZ_5.2+0x218>
    7e68:	mov	x28, #0x0                   	// #0
    7e6c:	mov	w0, #0x1                   	// #1
    7e70:	add	x1, x20, #0x1
    7e74:	str	x1, [x19]
    7e78:	strb	w0, [x24, x20]
    7e7c:	sub	x20, x23, x28
    7e80:	cmp	x20, #0x10, lsl #12
    7e84:	mov	x0, #0x10000               	// #65536
    7e88:	ldr	x2, [x19]
    7e8c:	csel	x20, x20, x0, ls  // ls = plast
    7e90:	sub	x0, x20, #0x1
    7e94:	sub	w4, w20, #0x1
    7e98:	add	x5, x2, #0x1
    7e9c:	str	x5, [x19]
    7ea0:	lsr	x0, x0, #8
    7ea4:	strb	w0, [x24, x2]
    7ea8:	add	x1, x25, x28
    7eac:	mov	x2, x20
    7eb0:	ldr	x0, [x19]
    7eb4:	add	x28, x28, x20
    7eb8:	add	x5, x0, #0x1
    7ebc:	str	x5, [x19]
    7ec0:	strb	w4, [x24, x0]
    7ec4:	ldr	x0, [x19]
    7ec8:	add	x0, x24, x0
    7ecc:	bl	30c0 <memcpy@plt>
    7ed0:	ldr	x2, [x19]
    7ed4:	cmp	x23, x28
    7ed8:	mov	w0, #0x2                   	// #2
    7edc:	add	x20, x20, x2
    7ee0:	str	x20, [x19]
    7ee4:	b.hi	7e70 <lzma_block_uncomp_encode@@XZ_5.2+0x1a0>  // b.pmore
    7ee8:	add	x0, x20, #0x1
    7eec:	str	x0, [x19]
    7ef0:	strb	wzr, [x24, x20]
    7ef4:	ldr	x0, [x22, #16]
    7ef8:	tst	x0, #0x3
    7efc:	b.eq	7f1c <lzma_block_uncomp_encode@@XZ_5.2+0x24c>  // b.none
    7f00:	ldr	x1, [x19]
    7f04:	add	x0, x0, #0x1
    7f08:	add	x2, x1, #0x1
    7f0c:	str	x2, [x19]
    7f10:	strb	wzr, [x24, x1]
    7f14:	tst	x0, #0x3
    7f18:	b.ne	7f00 <lzma_block_uncomp_encode@@XZ_5.2+0x230>  // b.any
    7f1c:	cbz	x27, 7fac <lzma_block_uncomp_encode@@XZ_5.2+0x2dc>
    7f20:	ldr	w1, [x22, #8]
    7f24:	mov	x0, x26
    7f28:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    7f2c:	ldr	w1, [x22, #8]
    7f30:	mov	x3, x23
    7f34:	mov	x2, x25
    7f38:	mov	x0, x26
    7f3c:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    7f40:	ldr	w1, [x22, #8]
    7f44:	mov	x0, x26
    7f48:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    7f4c:	mov	x2, x27
    7f50:	mov	x1, x26
    7f54:	add	x0, x22, #0x28
    7f58:	bl	30c0 <memcpy@plt>
    7f5c:	ldr	x0, [x19]
    7f60:	mov	x1, x26
    7f64:	mov	x2, x27
    7f68:	add	x0, x24, x0
    7f6c:	bl	30c0 <memcpy@plt>
    7f70:	ldr	x0, [x19]
    7f74:	ldp	x23, x24, [sp, #48]
    7f78:	add	x27, x0, x27
    7f7c:	ldp	x25, x26, [sp, #64]
    7f80:	str	x27, [x19]
    7f84:	ldp	x19, x20, [sp, #16]
    7f88:	ldp	x27, x28, [sp, #80]
    7f8c:	b	7f9c <lzma_block_uncomp_encode@@XZ_5.2+0x2cc>
    7f90:	ldp	x19, x20, [sp, #16]
    7f94:	ldp	x23, x24, [sp, #48]
    7f98:	ldp	x25, x26, [sp, #64]
    7f9c:	mov	w0, w21
    7fa0:	ldp	x21, x22, [sp, #32]
    7fa4:	ldp	x29, x30, [sp], #240
    7fa8:	ret
    7fac:	mov	w0, w21
    7fb0:	ldp	x19, x20, [sp, #16]
    7fb4:	ldp	x21, x22, [sp, #32]
    7fb8:	ldp	x23, x24, [sp, #48]
    7fbc:	ldp	x25, x26, [sp, #64]
    7fc0:	ldp	x27, x28, [sp, #80]
    7fc4:	ldp	x29, x30, [sp], #240
    7fc8:	ret
    7fcc:	mov	w21, #0xb                   	// #11
    7fd0:	mov	w0, w21
    7fd4:	ldp	x21, x22, [sp, #32]
    7fd8:	ldp	x29, x30, [sp], #240
    7fdc:	ret
    7fe0:	mov	w21, #0x9                   	// #9
    7fe4:	ldp	x19, x20, [sp, #16]
    7fe8:	ldp	x23, x24, [sp, #48]
    7fec:	ldp	x25, x26, [sp, #64]
    7ff0:	ldp	x27, x28, [sp, #80]
    7ff4:	str	xzr, [x22, #16]
    7ff8:	b	7f9c <lzma_block_uncomp_encode@@XZ_5.2+0x2cc>
    7ffc:	mov	w21, #0xa                   	// #10
    8000:	ldp	x19, x20, [sp, #16]
    8004:	ldp	x23, x24, [sp, #48]
    8008:	ldp	x25, x26, [sp, #64]
    800c:	str	x28, [x22, #32]
    8010:	ldp	x27, x28, [sp, #80]
    8014:	b	7f9c <lzma_block_uncomp_encode@@XZ_5.2+0x2cc>
    8018:	mov	w21, #0xb                   	// #11
    801c:	b	8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8020:	mov	x2, x3
    8024:	ldr	w3, [x0, #80]
    8028:	cbnz	w3, 8030 <lzma_block_uncomp_encode@@XZ_5.2+0x360>
    802c:	b	3930 <lzma_version_string@@XZ_5.0+0x218>
    8030:	mov	w0, #0xb                   	// #11
    8034:	ret
    8038:	stp	x29, x30, [sp, #-32]!
    803c:	mov	x29, sp
    8040:	stp	x19, x20, [sp, #16]
    8044:	mov	x19, x0
    8048:	mov	x20, x1
    804c:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    8050:	mov	x1, x20
    8054:	mov	x0, x19
    8058:	ldp	x19, x20, [sp, #16]
    805c:	ldp	x29, x30, [sp], #32
    8060:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    8064:	nop
    8068:	sub	sp, sp, #0x60
    806c:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    8070:	stp	x29, x30, [sp, #16]
    8074:	add	x29, sp, #0x10
    8078:	ldr	x9, [x0, #96]
    807c:	stp	x25, x26, [sp, #80]
    8080:	ldr	x26, [x3]
    8084:	stp	x19, x20, [sp, #32]
    8088:	sub	x8, x8, x9
    808c:	stp	x21, x22, [sp, #48]
    8090:	mov	x19, x0
    8094:	sub	x0, x4, x26
    8098:	cmp	x8, x0
    809c:	b.cc	80f0 <lzma_block_uncomp_encode@@XZ_5.2+0x420>  // b.lo, b.ul, b.last
    80a0:	ldr	w0, [x19, #80]
    80a4:	mov	x20, x6
    80a8:	stp	x23, x24, [sp, #64]
    80ac:	mov	x21, x7
    80b0:	mov	x23, x5
    80b4:	cmp	w0, #0x1
    80b8:	b.eq	8208 <lzma_block_uncomp_encode@@XZ_5.2+0x538>  // b.none
    80bc:	cmp	w0, #0x2
    80c0:	b.eq	8210 <lzma_block_uncomp_encode@@XZ_5.2+0x540>  // b.none
    80c4:	cbz	w0, 8110 <lzma_block_uncomp_encode@@XZ_5.2+0x440>
    80c8:	mov	w22, #0xb                   	// #11
    80cc:	mov	w0, w22
    80d0:	ldp	x29, x30, [sp, #16]
    80d4:	ldp	x19, x20, [sp, #32]
    80d8:	ldp	x21, x22, [sp, #48]
    80dc:	ldp	x23, x24, [sp, #64]
    80e0:	ldp	x25, x26, [sp, #80]
    80e4:	add	sp, sp, #0x60
    80e8:	ret
    80ec:	ldp	x23, x24, [sp, #64]
    80f0:	mov	w22, #0x9                   	// #9
    80f4:	mov	w0, w22
    80f8:	ldp	x29, x30, [sp, #16]
    80fc:	ldp	x19, x20, [sp, #32]
    8100:	ldp	x21, x22, [sp, #48]
    8104:	ldp	x25, x26, [sp, #80]
    8108:	add	sp, sp, #0x60
    810c:	ret
    8110:	ldr	w8, [sp, #96]
    8114:	mov	x24, x3
    8118:	ldr	x0, [x19]
    811c:	str	w8, [sp]
    8120:	mov	x25, x2
    8124:	ldr	x8, [x19, #24]
    8128:	ldr	x22, [x6]
    812c:	blr	x8
    8130:	ldr	x1, [x20]
    8134:	mov	x2, #0xfffffffffffffbbc    	// #-1092
    8138:	ldr	x3, [x19, #88]
    813c:	sub	x1, x1, x22
    8140:	movk	x2, #0x7fff, lsl #48
    8144:	mov	w22, w0
    8148:	sub	x2, x2, x3
    814c:	cmp	x2, x1
    8150:	b.cc	80ec <lzma_block_uncomp_encode@@XZ_5.2+0x41c>  // b.lo, b.ul, b.last
    8154:	ldr	x2, [x19, #72]
    8158:	add	x1, x3, x1
    815c:	ldr	x3, [x24]
    8160:	str	x1, [x19, #88]
    8164:	ldr	x0, [x19, #96]
    8168:	sub	x3, x3, x26
    816c:	ldr	w1, [x2, #8]
    8170:	add	x2, x25, x26
    8174:	add	x0, x0, x3
    8178:	str	x0, [x19, #96]
    817c:	add	x0, x19, #0x70
    8180:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    8184:	ldr	w0, [sp, #96]
    8188:	cmp	w22, #0x1
    818c:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    8190:	b.eq	82ac <lzma_block_uncomp_encode@@XZ_5.2+0x5dc>  // b.none
    8194:	ldr	x1, [x19, #72]
    8198:	mov	w0, #0x1                   	// #1
    819c:	ldur	q0, [x19, #88]
    81a0:	ldr	x2, [x19, #88]
    81a4:	str	q0, [x1, #16]
    81a8:	str	w0, [x19, #80]
    81ac:	tst	x2, #0x3
    81b0:	b.eq	8284 <lzma_block_uncomp_encode@@XZ_5.2+0x5b4>  // b.none
    81b4:	ldr	x1, [x20]
    81b8:	sub	x2, x2, x1
    81bc:	b	81dc <lzma_block_uncomp_encode@@XZ_5.2+0x50c>
    81c0:	strb	wzr, [x23, x1]
    81c4:	add	x1, x1, #0x1
    81c8:	add	x0, x2, x1
    81cc:	str	x1, [x20]
    81d0:	str	x0, [x19, #88]
    81d4:	tst	x0, #0x3
    81d8:	b.eq	8284 <lzma_block_uncomp_encode@@XZ_5.2+0x5b4>  // b.none
    81dc:	cmp	x21, x1
    81e0:	b.hi	81c0 <lzma_block_uncomp_encode@@XZ_5.2+0x4f0>  // b.pmore
    81e4:	mov	w22, #0x0                   	// #0
    81e8:	mov	w0, w22
    81ec:	ldp	x29, x30, [sp, #16]
    81f0:	ldp	x19, x20, [sp, #32]
    81f4:	ldp	x21, x22, [sp, #48]
    81f8:	ldp	x23, x24, [sp, #64]
    81fc:	ldp	x25, x26, [sp, #80]
    8200:	add	sp, sp, #0x60
    8204:	ret
    8208:	ldr	x2, [x19, #88]
    820c:	b	81ac <lzma_block_uncomp_encode@@XZ_5.2+0x4dc>
    8210:	add	x25, x19, #0x70
    8214:	ldr	x0, [x19, #72]
    8218:	ldr	w0, [x0, #8]
    821c:	bl	32a0 <lzma_check_size@plt>
    8220:	mov	w24, w0
    8224:	mov	x5, x21
    8228:	mov	x4, x20
    822c:	mov	x3, x23
    8230:	mov	x2, x24
    8234:	add	x1, x19, #0x68
    8238:	mov	x0, x25
    823c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    8240:	ldr	x0, [x19, #104]
    8244:	cmp	x0, x24
    8248:	b.cc	81e4 <lzma_block_uncomp_encode@@XZ_5.2+0x514>  // b.lo, b.ul, b.last
    824c:	ldr	x0, [x19, #72]
    8250:	mov	x2, x24
    8254:	mov	x1, x25
    8258:	mov	w22, #0x1                   	// #1
    825c:	add	x0, x0, #0x28
    8260:	bl	30c0 <memcpy@plt>
    8264:	mov	w0, w22
    8268:	ldp	x29, x30, [sp, #16]
    826c:	ldp	x19, x20, [sp, #32]
    8270:	ldp	x21, x22, [sp, #48]
    8274:	ldp	x23, x24, [sp, #64]
    8278:	ldp	x25, x26, [sp, #80]
    827c:	add	sp, sp, #0x60
    8280:	ret
    8284:	ldr	x0, [x19, #72]
    8288:	mov	w22, #0x1                   	// #1
    828c:	ldr	w1, [x0, #8]
    8290:	cbz	w1, 82ac <lzma_block_uncomp_encode@@XZ_5.2+0x5dc>
    8294:	add	x25, x19, #0x70
    8298:	mov	x0, x25
    829c:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    82a0:	mov	w0, #0x2                   	// #2
    82a4:	str	w0, [x19, #80]
    82a8:	b	8214 <lzma_block_uncomp_encode@@XZ_5.2+0x544>
    82ac:	mov	w0, w22
    82b0:	ldp	x29, x30, [sp, #16]
    82b4:	ldp	x19, x20, [sp, #32]
    82b8:	ldp	x21, x22, [sp, #48]
    82bc:	ldp	x23, x24, [sp, #64]
    82c0:	ldp	x25, x26, [sp, #80]
    82c4:	add	sp, sp, #0x60
    82c8:	ret
    82cc:	nop
    82d0:	stp	x29, x30, [sp, #-64]!
    82d4:	mov	x29, sp
    82d8:	stp	x19, x20, [sp, #16]
    82dc:	mov	x19, x2
    82e0:	mov	x20, x0
    82e4:	ldr	x2, [x0, #16]
    82e8:	stp	x21, x22, [sp, #32]
    82ec:	adrp	x21, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    82f0:	str	x23, [sp, #48]
    82f4:	add	x21, x21, #0x2d0
    82f8:	cmp	x2, x21
    82fc:	mov	x23, x1
    8300:	b.eq	8308 <lzma_block_uncomp_encode@@XZ_5.2+0x638>  // b.none
    8304:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    8308:	str	x21, [x20, #16]
    830c:	cbz	x19, 837c <lzma_block_uncomp_encode@@XZ_5.2+0x6ac>
    8310:	ldr	w0, [x19]
    8314:	cmp	w0, #0x1
    8318:	b.hi	8394 <lzma_block_uncomp_encode@@XZ_5.2+0x6c4>  // b.pmore
    831c:	ldr	w22, [x19, #8]
    8320:	cmp	w22, #0xf
    8324:	b.hi	837c <lzma_block_uncomp_encode@@XZ_5.2+0x6ac>  // b.pmore
    8328:	mov	w0, w22
    832c:	bl	3110 <lzma_check_is_supported@plt>
    8330:	tst	w0, #0xff
    8334:	b.eq	8404 <lzma_block_uncomp_encode@@XZ_5.2+0x734>  // b.none
    8338:	ldr	x21, [x20]
    833c:	cbz	x21, 83ac <lzma_block_uncomp_encode@@XZ_5.2+0x6dc>
    8340:	str	x19, [x21, #72]
    8344:	mov	w1, w22
    8348:	str	wzr, [x21, #80]
    834c:	add	x0, x21, #0x70
    8350:	stp	xzr, xzr, [x21, #88]
    8354:	str	xzr, [x21, #104]
    8358:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    835c:	mov	x1, x23
    8360:	mov	x0, x21
    8364:	ldr	x2, [x19, #32]
    8368:	ldp	x19, x20, [sp, #16]
    836c:	ldp	x21, x22, [sp, #32]
    8370:	ldr	x23, [sp, #48]
    8374:	ldp	x29, x30, [sp], #64
    8378:	b	8c20 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    837c:	mov	w0, #0xb                   	// #11
    8380:	ldp	x19, x20, [sp, #16]
    8384:	ldp	x21, x22, [sp, #32]
    8388:	ldr	x23, [sp, #48]
    838c:	ldp	x29, x30, [sp], #64
    8390:	ret
    8394:	mov	w0, #0x8                   	// #8
    8398:	ldp	x19, x20, [sp, #16]
    839c:	ldp	x21, x22, [sp, #32]
    83a0:	ldr	x23, [sp, #48]
    83a4:	ldp	x29, x30, [sp], #64
    83a8:	ret
    83ac:	mov	x1, x23
    83b0:	mov	x0, #0xd8                  	// #216
    83b4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    83b8:	mov	x21, x0
    83bc:	cbz	x0, 841c <lzma_block_uncomp_encode@@XZ_5.2+0x74c>
    83c0:	ldr	w22, [x19, #8]
    83c4:	adrp	x2, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    83c8:	adrp	x1, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    83cc:	add	x2, x2, #0x68
    83d0:	add	x1, x1, #0x38
    83d4:	adrp	x0, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    83d8:	mov	x3, #0xffffffffffffffff    	// #-1
    83dc:	add	x0, x0, #0x20
    83e0:	str	x21, [x20]
    83e4:	stp	xzr, x3, [x21]
    83e8:	stp	xzr, xzr, [x21, #16]
    83ec:	stp	x2, x1, [x20, #24]
    83f0:	stp	xzr, xzr, [x21, #32]
    83f4:	stp	xzr, xzr, [x21, #48]
    83f8:	str	x0, [x20, #64]
    83fc:	str	xzr, [x21, #64]
    8400:	b	8340 <lzma_block_uncomp_encode@@XZ_5.2+0x670>
    8404:	mov	w0, #0x3                   	// #3
    8408:	ldp	x19, x20, [sp, #16]
    840c:	ldp	x21, x22, [sp, #32]
    8410:	ldr	x23, [sp, #48]
    8414:	ldp	x29, x30, [sp], #64
    8418:	ret
    841c:	mov	w0, #0x5                   	// #5
    8420:	b	8380 <lzma_block_uncomp_encode@@XZ_5.2+0x6b0>
    8424:	nop

0000000000008428 <lzma_block_encoder@@XZ_5.0>:
    8428:	stp	x29, x30, [sp, #-64]!
    842c:	mov	x29, sp
    8430:	stp	x19, x20, [sp, #16]
    8434:	mov	x20, x1
    8438:	stp	x21, x22, [sp, #32]
    843c:	mov	x21, x0
    8440:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    8444:	mov	w19, w0
    8448:	cbz	w0, 8460 <lzma_block_encoder@@XZ_5.0+0x38>
    844c:	mov	w0, w19
    8450:	ldp	x19, x20, [sp, #16]
    8454:	ldp	x21, x22, [sp, #32]
    8458:	ldp	x29, x30, [sp], #64
    845c:	ret
    8460:	stp	x23, x24, [sp, #48]
    8464:	adrp	x19, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8468:	add	x19, x19, #0x2d0
    846c:	ldp	x24, x22, [x21, #48]
    8470:	ldr	x0, [x22, #16]
    8474:	cmp	x0, x19
    8478:	b.eq	8488 <lzma_block_encoder@@XZ_5.0+0x60>  // b.none
    847c:	mov	x1, x24
    8480:	mov	x0, x22
    8484:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    8488:	str	x19, [x22, #16]
    848c:	cbz	x20, 8538 <lzma_block_encoder@@XZ_5.0+0x110>
    8490:	ldr	w0, [x20]
    8494:	cmp	w0, #0x1
    8498:	b.hi	8530 <lzma_block_encoder@@XZ_5.0+0x108>  // b.pmore
    849c:	ldr	w23, [x20, #8]
    84a0:	cmp	w23, #0xf
    84a4:	b.hi	8538 <lzma_block_encoder@@XZ_5.0+0x110>  // b.pmore
    84a8:	mov	w0, w23
    84ac:	bl	3110 <lzma_check_is_supported@plt>
    84b0:	tst	w0, #0xff
    84b4:	b.eq	851c <lzma_block_encoder@@XZ_5.0+0xf4>  // b.none
    84b8:	ldr	x19, [x22]
    84bc:	cbz	x19, 8540 <lzma_block_encoder@@XZ_5.0+0x118>
    84c0:	str	x20, [x19, #72]
    84c4:	add	x0, x19, #0x70
    84c8:	str	wzr, [x19, #80]
    84cc:	mov	w1, w23
    84d0:	stp	xzr, xzr, [x19, #88]
    84d4:	str	xzr, [x19, #104]
    84d8:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    84dc:	ldr	x2, [x20, #32]
    84e0:	mov	x0, x19
    84e4:	mov	x1, x24
    84e8:	bl	8c20 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    84ec:	mov	w19, w0
    84f0:	cbnz	w0, 8520 <lzma_block_encoder@@XZ_5.0+0xf8>
    84f4:	ldr	x0, [x21, #56]
    84f8:	mov	w1, #0x1                   	// #1
    84fc:	ldp	x23, x24, [sp, #48]
    8500:	strb	w1, [x0, #88]
    8504:	strb	w1, [x0, #91]
    8508:	mov	w0, w19
    850c:	ldp	x19, x20, [sp, #16]
    8510:	ldp	x21, x22, [sp, #32]
    8514:	ldp	x29, x30, [sp], #64
    8518:	ret
    851c:	mov	w19, #0x3                   	// #3
    8520:	mov	x0, x21
    8524:	bl	3350 <lzma_end@plt>
    8528:	ldp	x23, x24, [sp, #48]
    852c:	b	844c <lzma_block_encoder@@XZ_5.0+0x24>
    8530:	mov	w19, #0x8                   	// #8
    8534:	b	8520 <lzma_block_encoder@@XZ_5.0+0xf8>
    8538:	mov	w19, #0xb                   	// #11
    853c:	b	8520 <lzma_block_encoder@@XZ_5.0+0xf8>
    8540:	mov	x1, x24
    8544:	mov	x0, #0xd8                  	// #216
    8548:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    854c:	mov	x19, x0
    8550:	cbz	x0, 8598 <lzma_block_encoder@@XZ_5.0+0x170>
    8554:	ldr	w23, [x20, #8]
    8558:	adrp	x2, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    855c:	adrp	x1, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8560:	add	x2, x2, #0x68
    8564:	add	x1, x1, #0x38
    8568:	adrp	x0, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    856c:	add	x0, x0, #0x20
    8570:	str	x19, [x22]
    8574:	stp	x2, x1, [x22, #24]
    8578:	mov	x2, #0xffffffffffffffff    	// #-1
    857c:	str	x0, [x22, #64]
    8580:	stp	xzr, x2, [x19]
    8584:	stp	xzr, xzr, [x19, #16]
    8588:	stp	xzr, xzr, [x19, #32]
    858c:	stp	xzr, xzr, [x19, #48]
    8590:	str	xzr, [x19, #64]
    8594:	b	84c0 <lzma_block_encoder@@XZ_5.0+0x98>
    8598:	mov	w19, #0x5                   	// #5
    859c:	b	8520 <lzma_block_encoder@@XZ_5.0+0xf8>

00000000000085a0 <lzma_block_header_size@@XZ_5.0>:
    85a0:	stp	x29, x30, [sp, #-64]!
    85a4:	mov	x29, sp
    85a8:	stp	x19, x20, [sp, #16]
    85ac:	mov	x19, x0
    85b0:	ldr	w0, [x0]
    85b4:	cmp	w0, #0x1
    85b8:	b.hi	8678 <lzma_block_header_size@@XZ_5.0+0xd8>  // b.pmore
    85bc:	ldr	x20, [x19, #16]
    85c0:	cmn	x20, #0x1
    85c4:	b.eq	8670 <lzma_block_header_size@@XZ_5.0+0xd0>  // b.none
    85c8:	mov	x0, x20
    85cc:	bl	34b0 <lzma_vli_size@plt>
    85d0:	cmp	x20, #0x0
    85d4:	mov	w20, w0
    85d8:	ccmp	w20, #0x0, #0x4, ne  // ne = any
    85dc:	mov	w0, #0xb                   	// #11
    85e0:	add	w20, w20, #0x6
    85e4:	b.eq	8664 <lzma_block_header_size@@XZ_5.0+0xc4>  // b.none
    85e8:	ldr	x0, [x19, #24]
    85ec:	cmn	x0, #0x1
    85f0:	b.eq	8608 <lzma_block_header_size@@XZ_5.0+0x68>  // b.none
    85f4:	bl	34b0 <lzma_vli_size@plt>
    85f8:	mov	w1, w0
    85fc:	mov	w0, #0xb                   	// #11
    8600:	cbz	w1, 8664 <lzma_block_header_size@@XZ_5.0+0xc4>
    8604:	add	w20, w20, w1
    8608:	ldr	x1, [x19, #32]
    860c:	cbz	x1, 8688 <lzma_block_header_size@@XZ_5.0+0xe8>
    8610:	ldr	x0, [x1]
    8614:	cmn	x0, #0x1
    8618:	b.eq	8688 <lzma_block_header_size@@XZ_5.0+0xe8>  // b.none
    861c:	stp	x21, x22, [sp, #32]
    8620:	add	x22, sp, #0x3c
    8624:	mov	x21, #0x10                  	// #16
    8628:	mov	x0, x22
    862c:	bl	3120 <lzma_filter_flags_size@plt>
    8630:	cbnz	w0, 86a4 <lzma_block_header_size@@XZ_5.0+0x104>
    8634:	ldr	x2, [x19, #32]
    8638:	ldr	w3, [sp, #60]
    863c:	add	x1, x2, x21
    8640:	ldr	x2, [x2, x21]
    8644:	add	w20, w20, w3
    8648:	add	x21, x21, #0x10
    864c:	cmn	x2, #0x1
    8650:	b.eq	8690 <lzma_block_header_size@@XZ_5.0+0xf0>  // b.none
    8654:	cmp	x21, #0x50
    8658:	b.ne	8628 <lzma_block_header_size@@XZ_5.0+0x88>  // b.any
    865c:	ldp	x21, x22, [sp, #32]
    8660:	mov	w0, #0xb                   	// #11
    8664:	ldp	x19, x20, [sp, #16]
    8668:	ldp	x29, x30, [sp], #64
    866c:	ret
    8670:	mov	w20, #0x6                   	// #6
    8674:	b	85e8 <lzma_block_header_size@@XZ_5.0+0x48>
    8678:	mov	w0, #0x8                   	// #8
    867c:	ldp	x19, x20, [sp, #16]
    8680:	ldp	x29, x30, [sp], #64
    8684:	ret
    8688:	mov	w0, #0xb                   	// #11
    868c:	b	8664 <lzma_block_header_size@@XZ_5.0+0xc4>
    8690:	add	w20, w20, #0x3
    8694:	and	w20, w20, #0xfffffffc
    8698:	ldp	x21, x22, [sp, #32]
    869c:	str	w20, [x19, #4]
    86a0:	b	8664 <lzma_block_header_size@@XZ_5.0+0xc4>
    86a4:	ldp	x21, x22, [sp, #32]
    86a8:	b	8664 <lzma_block_header_size@@XZ_5.0+0xc4>
    86ac:	nop

00000000000086b0 <lzma_block_header_encode@@XZ_5.0>:
    86b0:	stp	x29, x30, [sp, #-96]!
    86b4:	mov	x29, sp
    86b8:	stp	x19, x20, [sp, #16]
    86bc:	mov	x20, x0
    86c0:	stp	x25, x26, [sp, #64]
    86c4:	mov	x25, x1
    86c8:	bl	31c0 <lzma_block_unpadded_size@plt>
    86cc:	cbz	x0, 878c <lzma_block_header_encode@@XZ_5.0+0xdc>
    86d0:	ldr	x0, [x20, #24]
    86d4:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    86d8:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    86dc:	add	x0, x0, x2
    86e0:	cmp	x0, x1
    86e4:	b.ls	878c <lzma_block_header_encode@@XZ_5.0+0xdc>  // b.plast
    86e8:	stp	x23, x24, [sp, #48]
    86ec:	mov	x0, #0x2                   	// #2
    86f0:	ldr	w23, [x20, #4]
    86f4:	strb	wzr, [x25, #1]
    86f8:	sub	w24, w23, #0x4
    86fc:	str	x0, [sp, #88]
    8700:	mov	x23, x24
    8704:	lsr	w0, w24, #2
    8708:	strb	w0, [x25]
    870c:	ldr	x0, [x20, #16]
    8710:	cmn	x0, #0x1
    8714:	b.ne	87a4 <lzma_block_header_encode@@XZ_5.0+0xf4>  // b.any
    8718:	ldr	x0, [x20, #24]
    871c:	cmn	x0, #0x1
    8720:	b.ne	87d8 <lzma_block_header_encode@@XZ_5.0+0x128>  // b.any
    8724:	ldr	x0, [x20, #32]
    8728:	cbz	x0, 8788 <lzma_block_header_encode@@XZ_5.0+0xd8>
    872c:	ldr	x1, [x0]
    8730:	cmn	x1, #0x1
    8734:	b.eq	8788 <lzma_block_header_encode@@XZ_5.0+0xd8>  // b.none
    8738:	add	x26, sp, #0x58
    873c:	stp	x21, x22, [sp, #32]
    8740:	mov	x22, #0x0                   	// #0
    8744:	lsl	x21, x22, #4
    8748:	mov	x3, x24
    874c:	add	x0, x0, x21
    8750:	mov	x2, x26
    8754:	mov	x1, x25
    8758:	add	x22, x22, #0x1
    875c:	bl	3380 <lzma_filter_flags_encode@plt>
    8760:	mov	w19, w0
    8764:	cbnz	w0, 8804 <lzma_block_header_encode@@XZ_5.0+0x154>
    8768:	ldr	x0, [x20, #32]
    876c:	add	x21, x0, x21
    8770:	ldr	x1, [x21, #16]
    8774:	cmn	x1, #0x1
    8778:	b.eq	8820 <lzma_block_header_encode@@XZ_5.0+0x170>  // b.none
    877c:	cmp	x22, #0x4
    8780:	b.ne	8744 <lzma_block_header_encode@@XZ_5.0+0x94>  // b.any
    8784:	ldp	x21, x22, [sp, #32]
    8788:	ldp	x23, x24, [sp, #48]
    878c:	mov	w19, #0xb                   	// #11
    8790:	mov	w0, w19
    8794:	ldp	x19, x20, [sp, #16]
    8798:	ldp	x25, x26, [sp, #64]
    879c:	ldp	x29, x30, [sp], #96
    87a0:	ret
    87a4:	mov	x4, x24
    87a8:	add	x3, sp, #0x58
    87ac:	mov	x2, x25
    87b0:	mov	x1, #0x0                   	// #0
    87b4:	bl	3480 <lzma_vli_encode@plt>
    87b8:	mov	w19, w0
    87bc:	cbnz	w0, 8808 <lzma_block_header_encode@@XZ_5.0+0x158>
    87c0:	ldrb	w0, [x25, #1]
    87c4:	orr	w0, w0, #0x40
    87c8:	strb	w0, [x25, #1]
    87cc:	ldr	x0, [x20, #24]
    87d0:	cmn	x0, #0x1
    87d4:	b.eq	8724 <lzma_block_header_encode@@XZ_5.0+0x74>  // b.none
    87d8:	mov	x4, x24
    87dc:	add	x3, sp, #0x58
    87e0:	mov	x2, x25
    87e4:	mov	x1, #0x0                   	// #0
    87e8:	bl	3480 <lzma_vli_encode@plt>
    87ec:	mov	w19, w0
    87f0:	cbnz	w0, 8808 <lzma_block_header_encode@@XZ_5.0+0x158>
    87f4:	ldrb	w0, [x25, #1]
    87f8:	orr	w0, w0, #0xffffff80
    87fc:	strb	w0, [x25, #1]
    8800:	b	8724 <lzma_block_header_encode@@XZ_5.0+0x74>
    8804:	ldp	x21, x22, [sp, #32]
    8808:	mov	w0, w19
    880c:	ldp	x19, x20, [sp, #16]
    8810:	ldp	x23, x24, [sp, #48]
    8814:	ldp	x25, x26, [sp, #64]
    8818:	ldp	x29, x30, [sp], #96
    881c:	ret
    8820:	ldrb	w1, [x25, #1]
    8824:	sub	w2, w22, #0x1
    8828:	ldr	x0, [sp, #88]
    882c:	orr	w2, w2, w1
    8830:	strb	w2, [x25, #1]
    8834:	mov	w1, #0x0                   	// #0
    8838:	sub	x2, x24, x0
    883c:	add	x0, x25, x0
    8840:	bl	3260 <memset@plt>
    8844:	mov	x1, x24
    8848:	mov	x0, x25
    884c:	mov	w2, #0x0                   	// #0
    8850:	bl	31f0 <lzma_crc32@plt>
    8854:	str	w0, [x25, w23, uxtw]
    8858:	ldp	x21, x22, [sp, #32]
    885c:	ldp	x23, x24, [sp, #48]
    8860:	b	8790 <lzma_block_header_encode@@XZ_5.0+0xe0>
    8864:	nop

0000000000008868 <lzma_easy_buffer_encode@@XZ_5.0>:
    8868:	stp	x29, x30, [sp, #-272]!
    886c:	mov	x29, sp
    8870:	stp	x25, x26, [sp, #64]
    8874:	add	x26, sp, #0x50
    8878:	mov	x25, x7
    887c:	stp	x19, x20, [sp, #16]
    8880:	mov	w19, w1
    8884:	mov	x20, x2
    8888:	mov	w1, w0
    888c:	mov	x0, x26
    8890:	stp	x21, x22, [sp, #32]
    8894:	mov	x21, x3
    8898:	mov	x22, x4
    889c:	stp	x23, x24, [sp, #48]
    88a0:	mov	x23, x5
    88a4:	mov	x24, x6
    88a8:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    88ac:	tst	w0, #0xff
    88b0:	b.ne	88f0 <lzma_easy_buffer_encode@@XZ_5.0+0x88>  // b.any
    88b4:	mov	x7, x25
    88b8:	mov	x6, x24
    88bc:	mov	x5, x23
    88c0:	mov	x4, x22
    88c4:	mov	x3, x21
    88c8:	mov	x2, x20
    88cc:	mov	w1, w19
    88d0:	mov	x0, x26
    88d4:	bl	3220 <lzma_stream_buffer_encode@plt>
    88d8:	ldp	x19, x20, [sp, #16]
    88dc:	ldp	x21, x22, [sp, #32]
    88e0:	ldp	x23, x24, [sp, #48]
    88e4:	ldp	x25, x26, [sp, #64]
    88e8:	ldp	x29, x30, [sp], #272
    88ec:	ret
    88f0:	mov	w0, #0x8                   	// #8
    88f4:	ldp	x19, x20, [sp, #16]
    88f8:	ldp	x21, x22, [sp, #32]
    88fc:	ldp	x23, x24, [sp, #48]
    8900:	ldp	x25, x26, [sp, #64]
    8904:	ldp	x29, x30, [sp], #272
    8908:	ret
    890c:	nop

0000000000008910 <lzma_easy_encoder@@XZ_5.0>:
    8910:	stp	x29, x30, [sp, #-240]!
    8914:	mov	x29, sp
    8918:	str	x21, [sp, #32]
    891c:	add	x21, sp, #0x30
    8920:	stp	x19, x20, [sp, #16]
    8924:	mov	x19, x0
    8928:	mov	w20, w2
    892c:	mov	x0, x21
    8930:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    8934:	tst	w0, #0xff
    8938:	b.ne	895c <lzma_easy_encoder@@XZ_5.0+0x4c>  // b.any
    893c:	mov	w2, w20
    8940:	mov	x1, x21
    8944:	mov	x0, x19
    8948:	bl	34d0 <lzma_stream_encoder@plt>
    894c:	ldp	x19, x20, [sp, #16]
    8950:	ldr	x21, [sp, #32]
    8954:	ldp	x29, x30, [sp], #240
    8958:	ret
    895c:	mov	w0, #0x8                   	// #8
    8960:	ldp	x19, x20, [sp, #16]
    8964:	ldr	x21, [sp, #32]
    8968:	ldp	x29, x30, [sp], #240
    896c:	ret

0000000000008970 <lzma_easy_encoder_memusage@@XZ_5.0>:
    8970:	stp	x29, x30, [sp, #-224]!
    8974:	mov	w1, w0
    8978:	mov	x29, sp
    897c:	str	x19, [sp, #16]
    8980:	add	x19, sp, #0x20
    8984:	mov	x0, x19
    8988:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    898c:	tst	w0, #0xff
    8990:	b.ne	89a8 <lzma_easy_encoder_memusage@@XZ_5.0+0x38>  // b.any
    8994:	mov	x0, x19
    8998:	bl	3250 <lzma_raw_encoder_memusage@plt>
    899c:	ldr	x19, [sp, #16]
    89a0:	ldp	x29, x30, [sp], #224
    89a4:	ret
    89a8:	mov	x0, #0xffffffff            	// #4294967295
    89ac:	ldr	x19, [sp, #16]
    89b0:	ldp	x29, x30, [sp], #224
    89b4:	ret

00000000000089b8 <lzma_raw_buffer_encode@@XZ_5.0>:
    89b8:	sub	sp, sp, #0xc0
    89bc:	cmp	x2, #0x0
    89c0:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    89c4:	stp	x29, x30, [sp, #16]
    89c8:	add	x29, sp, #0x10
    89cc:	stp	x21, x22, [sp, #48]
    89d0:	mov	w22, #0xb                   	// #11
    89d4:	b.ne	8abc <lzma_raw_buffer_encode@@XZ_5.0+0x104>  // b.any
    89d8:	stp	x19, x20, [sp, #32]
    89dc:	cmp	x4, #0x0
    89e0:	mov	x19, x5
    89e4:	stp	x23, x24, [sp, #64]
    89e8:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    89ec:	mov	x23, x4
    89f0:	mov	w22, #0xb                   	// #11
    89f4:	b.eq	8ad0 <lzma_raw_buffer_encode@@XZ_5.0+0x118>  // b.none
    89f8:	mov	x20, x2
    89fc:	mov	x24, x6
    8a00:	ldr	x2, [x5]
    8a04:	cmp	x2, x6
    8a08:	b.hi	8ad0 <lzma_raw_buffer_encode@@XZ_5.0+0x118>  // b.pmore
    8a0c:	adrp	x2, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    8a10:	stp	x25, x26, [sp, #80]
    8a14:	add	x26, sp, #0x70
    8a18:	movi	v0.4s, #0x0
    8a1c:	mov	x21, x3
    8a20:	ldr	q1, [x2, #336]
    8a24:	mov	x25, x1
    8a28:	mov	x2, x0
    8a2c:	mov	x0, x26
    8a30:	str	xzr, [sp, #112]
    8a34:	stur	q1, [sp, #120]
    8a38:	stur	q0, [sp, #136]
    8a3c:	stur	q0, [sp, #152]
    8a40:	stur	q0, [sp, #168]
    8a44:	bl	8c20 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    8a48:	mov	w22, w0
    8a4c:	cbnz	w0, 8aec <lzma_raw_buffer_encode@@XZ_5.0+0x134>
    8a50:	ldr	x0, [sp, #112]
    8a54:	mov	x4, x21
    8a58:	ldr	x8, [sp, #136]
    8a5c:	mov	x2, x20
    8a60:	mov	x7, x24
    8a64:	mov	x5, x23
    8a68:	mov	x6, x19
    8a6c:	add	x3, sp, #0x68
    8a70:	mov	w1, #0x3                   	// #3
    8a74:	str	w1, [sp]
    8a78:	str	xzr, [sp, #104]
    8a7c:	mov	x1, x25
    8a80:	ldr	x21, [x19]
    8a84:	blr	x8
    8a88:	mov	x1, x25
    8a8c:	mov	w20, w0
    8a90:	mov	x0, x26
    8a94:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    8a98:	cmp	w20, #0x1
    8a9c:	b.eq	8aec <lzma_raw_buffer_encode@@XZ_5.0+0x134>  // b.none
    8aa0:	cmp	w20, #0x0
    8aa4:	mov	w22, #0xa                   	// #10
    8aa8:	csel	w22, w20, w22, ne  // ne = any
    8aac:	ldp	x23, x24, [sp, #64]
    8ab0:	ldp	x25, x26, [sp, #80]
    8ab4:	str	x21, [x19]
    8ab8:	ldp	x19, x20, [sp, #32]
    8abc:	mov	w0, w22
    8ac0:	ldp	x29, x30, [sp, #16]
    8ac4:	ldp	x21, x22, [sp, #48]
    8ac8:	add	sp, sp, #0xc0
    8acc:	ret
    8ad0:	mov	w0, w22
    8ad4:	ldp	x29, x30, [sp, #16]
    8ad8:	ldp	x19, x20, [sp, #32]
    8adc:	ldp	x21, x22, [sp, #48]
    8ae0:	ldp	x23, x24, [sp, #64]
    8ae4:	add	sp, sp, #0xc0
    8ae8:	ret
    8aec:	mov	w0, w22
    8af0:	ldp	x29, x30, [sp, #16]
    8af4:	ldp	x19, x20, [sp, #32]
    8af8:	ldp	x21, x22, [sp, #48]
    8afc:	ldp	x23, x24, [sp, #64]
    8b00:	ldp	x25, x26, [sp, #80]
    8b04:	add	sp, sp, #0xc0
    8b08:	ret
    8b0c:	nop
    8b10:	mov	x1, #0x1                   	// #1
    8b14:	movk	x1, #0x4000, lsl #48
    8b18:	cmp	x0, x1
    8b1c:	b.eq	8b88 <lzma_raw_buffer_encode@@XZ_5.0+0x1d0>  // b.none
    8b20:	cmp	x0, #0x21
    8b24:	b.eq	8b90 <lzma_raw_buffer_encode@@XZ_5.0+0x1d8>  // b.none
    8b28:	cmp	x0, #0x4
    8b2c:	b.eq	8b98 <lzma_raw_buffer_encode@@XZ_5.0+0x1e0>  // b.none
    8b30:	cmp	x0, #0x5
    8b34:	b.eq	8ba0 <lzma_raw_buffer_encode@@XZ_5.0+0x1e8>  // b.none
    8b38:	cmp	x0, #0x6
    8b3c:	b.eq	8ba8 <lzma_raw_buffer_encode@@XZ_5.0+0x1f0>  // b.none
    8b40:	cmp	x0, #0x7
    8b44:	b.eq	8bb0 <lzma_raw_buffer_encode@@XZ_5.0+0x1f8>  // b.none
    8b48:	cmp	x0, #0x8
    8b4c:	b.eq	8bb8 <lzma_raw_buffer_encode@@XZ_5.0+0x200>  // b.none
    8b50:	cmp	x0, #0x9
    8b54:	b.eq	8b6c <lzma_raw_buffer_encode@@XZ_5.0+0x1b4>  // b.none
    8b58:	cmp	x0, #0x3
    8b5c:	mov	x2, #0x8                   	// #8
    8b60:	mov	x0, #0x0                   	// #0
    8b64:	b.eq	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>  // b.none
    8b68:	ret
    8b6c:	mov	x2, #0x7                   	// #7
    8b70:	lsl	x0, x2, #3
    8b74:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    8b78:	sub	x0, x0, x2
    8b7c:	add	x1, x1, #0x9f0
    8b80:	add	x0, x1, x0, lsl #3
    8b84:	ret
    8b88:	mov	x2, #0x0                   	// #0
    8b8c:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8b90:	mov	x2, #0x1                   	// #1
    8b94:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8b98:	mov	x2, #0x2                   	// #2
    8b9c:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8ba0:	mov	x2, #0x3                   	// #3
    8ba4:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8ba8:	mov	x2, #0x4                   	// #4
    8bac:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8bb0:	mov	x2, #0x5                   	// #5
    8bb4:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>
    8bb8:	mov	x2, #0x6                   	// #6
    8bbc:	b	8b70 <lzma_raw_buffer_encode@@XZ_5.0+0x1b8>

0000000000008bc0 <lzma_filter_encoder_is_supported@@XZ_5.0>:
    8bc0:	mov	x1, #0x1                   	// #1
    8bc4:	movk	x1, #0x4000, lsl #48
    8bc8:	cmp	x0, x1
    8bcc:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8bd0:	cmp	x0, #0x21
    8bd4:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8bd8:	cmp	x0, #0x4
    8bdc:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8be0:	cmp	x0, #0x5
    8be4:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8be8:	cmp	x0, #0x6
    8bec:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8bf0:	cmp	x0, #0x7
    8bf4:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8bf8:	cmp	x0, #0x8
    8bfc:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8c00:	cmp	x0, #0x9
    8c04:	b.eq	8c14 <lzma_filter_encoder_is_supported@@XZ_5.0+0x54>  // b.none
    8c08:	cmp	x0, #0x3
    8c0c:	cset	w0, eq  // eq = none
    8c10:	ret
    8c14:	mov	w0, #0x1                   	// #1
    8c18:	ret
    8c1c:	nop
    8c20:	adrp	x3, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8c24:	mov	w4, #0x1                   	// #1
    8c28:	add	x3, x3, #0xb10
    8c2c:	b	4610 <lzma_filters_copy@@XZ_5.0+0x528>

0000000000008c30 <lzma_raw_encoder@@XZ_5.0>:
    8c30:	stp	x29, x30, [sp, #-48]!
    8c34:	mov	x29, sp
    8c38:	stp	x19, x20, [sp, #16]
    8c3c:	mov	x20, x0
    8c40:	str	x21, [sp, #32]
    8c44:	mov	x21, x1
    8c48:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    8c4c:	mov	w19, w0
    8c50:	cbz	w0, 8c68 <lzma_raw_encoder@@XZ_5.0+0x38>
    8c54:	mov	w0, w19
    8c58:	ldp	x19, x20, [sp, #16]
    8c5c:	ldr	x21, [sp, #32]
    8c60:	ldp	x29, x30, [sp], #48
    8c64:	ret
    8c68:	ldp	x1, x0, [x20, #48]
    8c6c:	mov	x2, x21
    8c70:	adrp	x3, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8c74:	mov	w4, #0x1                   	// #1
    8c78:	add	x3, x3, #0xb10
    8c7c:	bl	4610 <lzma_filters_copy@@XZ_5.0+0x528>
    8c80:	mov	w19, w0
    8c84:	cbnz	w0, 8cb0 <lzma_raw_encoder@@XZ_5.0+0x80>
    8c88:	ldr	x0, [x20, #56]
    8c8c:	mov	w2, #0x101                 	// #257
    8c90:	mov	w1, #0x1                   	// #1
    8c94:	ldr	x21, [sp, #32]
    8c98:	strh	w2, [x0, #88]
    8c9c:	strb	w1, [x0, #91]
    8ca0:	mov	w0, w19
    8ca4:	ldp	x19, x20, [sp, #16]
    8ca8:	ldp	x29, x30, [sp], #48
    8cac:	ret
    8cb0:	mov	x0, x20
    8cb4:	bl	3350 <lzma_end@plt>
    8cb8:	b	8c54 <lzma_raw_encoder@@XZ_5.0+0x24>
    8cbc:	nop

0000000000008cc0 <lzma_raw_encoder_memusage@@XZ_5.0>:
    8cc0:	mov	x1, x0
    8cc4:	adrp	x2, 8000 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    8cc8:	add	x0, x2, #0xb10
    8ccc:	b	48d0 <lzma_filters_copy@@XZ_5.0+0x7e8>

0000000000008cd0 <lzma_filters_update@@XZ_5.0>:
    8cd0:	stp	x29, x30, [sp, #-128]!
    8cd4:	mov	x29, sp
    8cd8:	stp	x19, x20, [sp, #16]
    8cdc:	ldr	x20, [x0, #56]
    8ce0:	stp	x21, x22, [sp, #32]
    8ce4:	ldr	x22, [x20, #64]
    8ce8:	cbz	x22, 8db4 <lzma_filters_update@@XZ_5.0+0xe4>
    8cec:	mov	x21, x0
    8cf0:	mov	x19, x1
    8cf4:	mov	x0, x1
    8cf8:	bl	3250 <lzma_raw_encoder_memusage@plt>
    8cfc:	cmn	x0, #0x1
    8d00:	b.eq	8da0 <lzma_filters_update@@XZ_5.0+0xd0>  // b.none
    8d04:	ldr	x0, [x19, #16]
    8d08:	cmn	x0, #0x1
    8d0c:	b.eq	8dc8 <lzma_filters_update@@XZ_5.0+0xf8>  // b.none
    8d10:	mov	x4, #0x1                   	// #1
    8d14:	nop
    8d18:	mov	x5, x4
    8d1c:	add	x4, x4, #0x1
    8d20:	lsl	x1, x4, #4
    8d24:	ldr	x2, [x19, x1]
    8d28:	cmn	x2, #0x1
    8d2c:	b.ne	8d18 <lzma_filters_update@@XZ_5.0+0x48>  // b.any
    8d30:	add	x3, sp, #0x30
    8d34:	cmp	x4, #0x2
    8d38:	add	x2, x3, x5, lsl #4
    8d3c:	ldp	x6, x7, [x19]
    8d40:	stp	x6, x7, [x2]
    8d44:	ldp	x6, x7, [x19, #16]
    8d48:	stp	x6, x7, [x2, #-16]
    8d4c:	b.eq	8d78 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    8d50:	ldp	x6, x7, [x19, #32]
    8d54:	stp	x6, x7, [x2, #-32]
    8d58:	cmp	x4, #0x3
    8d5c:	b.eq	8d78 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    8d60:	ldp	x6, x7, [x19, #48]
    8d64:	stp	x6, x7, [x2, #-48]
    8d68:	cmp	x4, #0x4
    8d6c:	b.eq	8d78 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    8d70:	ldp	x6, x7, [x19, #64]
    8d74:	stp	x6, x7, [x2, #-64]
    8d78:	mov	x2, #0xffffffffffffffff    	// #-1
    8d7c:	ldr	x0, [x20]
    8d80:	str	x2, [x3, x1]
    8d84:	ldr	x1, [x21, #48]
    8d88:	mov	x2, x19
    8d8c:	blr	x22
    8d90:	ldp	x19, x20, [sp, #16]
    8d94:	ldp	x21, x22, [sp, #32]
    8d98:	ldp	x29, x30, [sp], #128
    8d9c:	ret
    8da0:	mov	w0, #0x8                   	// #8
    8da4:	ldp	x19, x20, [sp, #16]
    8da8:	ldp	x21, x22, [sp, #32]
    8dac:	ldp	x29, x30, [sp], #128
    8db0:	ret
    8db4:	mov	w0, #0xb                   	// #11
    8db8:	ldp	x19, x20, [sp, #16]
    8dbc:	ldp	x21, x22, [sp, #32]
    8dc0:	ldp	x29, x30, [sp], #128
    8dc4:	ret
    8dc8:	ldp	x4, x5, [x19]
    8dcc:	add	x3, sp, #0x30
    8dd0:	mov	x1, #0x10                  	// #16
    8dd4:	stp	x4, x5, [sp, #48]
    8dd8:	b	8d78 <lzma_filters_update@@XZ_5.0+0xa8>
    8ddc:	nop
    8de0:	stp	x29, x30, [sp, #-48]!
    8de4:	mov	x29, sp
    8de8:	ldr	x1, [x0]
    8dec:	stp	x19, x20, [sp, #16]
    8df0:	cmn	x1, #0x1
    8df4:	b.eq	8e94 <lzma_filters_update@@XZ_5.0+0x1c4>  // b.none
    8df8:	add	x19, x0, #0x10
    8dfc:	str	x21, [sp, #32]
    8e00:	mov	x21, #0x1                   	// #1
    8e04:	mov	x20, #0x0                   	// #0
    8e08:	movk	x21, #0x4000, lsl #48
    8e0c:	nop
    8e10:	cmp	x1, x21
    8e14:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e18:	cmp	x1, #0x21
    8e1c:	b.eq	8e78 <lzma_filters_update@@XZ_5.0+0x1a8>  // b.none
    8e20:	cmp	x1, #0x4
    8e24:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e28:	cmp	x1, #0x5
    8e2c:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e30:	cmp	x1, #0x6
    8e34:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e38:	cmp	x1, #0x7
    8e3c:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e40:	cmp	x1, #0x8
    8e44:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e48:	cmp	x1, #0x9
    8e4c:	b.eq	8e58 <lzma_filters_update@@XZ_5.0+0x188>  // b.none
    8e50:	cmp	x1, #0x3
    8e54:	b.ne	8ea8 <lzma_filters_update@@XZ_5.0+0x1d8>  // b.any
    8e58:	ldr	x1, [x19], #16
    8e5c:	cmn	x1, #0x1
    8e60:	b.ne	8e10 <lzma_filters_update@@XZ_5.0+0x140>  // b.any
    8e64:	mov	x0, x20
    8e68:	ldp	x19, x20, [sp, #16]
    8e6c:	ldr	x21, [sp, #32]
    8e70:	ldp	x29, x30, [sp], #48
    8e74:	ret
    8e78:	ldur	x0, [x19, #-8]
    8e7c:	bl	1b5b8 <lzma_mode_is_supported@@XZ_5.0+0x61c0>
    8e80:	cbz	x0, 8e90 <lzma_filters_update@@XZ_5.0+0x1c0>
    8e84:	cmp	x20, x0
    8e88:	csel	x20, x20, x0, cs  // cs = hs, nlast
    8e8c:	b	8e58 <lzma_filters_update@@XZ_5.0+0x188>
    8e90:	ldr	x21, [sp, #32]
    8e94:	mov	x20, #0x0                   	// #0
    8e98:	mov	x0, x20
    8e9c:	ldp	x19, x20, [sp, #16]
    8ea0:	ldp	x29, x30, [sp], #48
    8ea4:	ret
    8ea8:	mov	x0, #0x0                   	// #0
    8eac:	ldr	x0, [x0, #24]
    8eb0:	brk	#0x3e8
    8eb4:	nop

0000000000008eb8 <lzma_properties_size@@XZ_5.0>:
    8eb8:	ldr	x2, [x1]
    8ebc:	mov	x3, #0x1                   	// #1
    8ec0:	movk	x3, #0x4000, lsl #48
    8ec4:	cmp	x2, x3
    8ec8:	b.eq	8f58 <lzma_properties_size@@XZ_5.0+0xa0>  // b.none
    8ecc:	cmp	x2, #0x21
    8ed0:	b.eq	8f74 <lzma_properties_size@@XZ_5.0+0xbc>  // b.none
    8ed4:	cmp	x2, #0x4
    8ed8:	b.eq	8f7c <lzma_properties_size@@XZ_5.0+0xc4>  // b.none
    8edc:	cmp	x2, #0x5
    8ee0:	b.eq	8f84 <lzma_properties_size@@XZ_5.0+0xcc>  // b.none
    8ee4:	cmp	x2, #0x6
    8ee8:	b.eq	8f8c <lzma_properties_size@@XZ_5.0+0xd4>  // b.none
    8eec:	cmp	x2, #0x7
    8ef0:	b.eq	8f94 <lzma_properties_size@@XZ_5.0+0xdc>  // b.none
    8ef4:	cmp	x2, #0x8
    8ef8:	b.eq	8f9c <lzma_properties_size@@XZ_5.0+0xe4>  // b.none
    8efc:	cmp	x2, #0x9
    8f00:	b.eq	8f28 <lzma_properties_size@@XZ_5.0+0x70>  // b.none
    8f04:	cmp	x2, #0x3
    8f08:	mov	x4, #0x8                   	// #8
    8f0c:	b.eq	8f30 <lzma_properties_size@@XZ_5.0+0x78>  // b.none
    8f10:	cmp	x2, #0x0
    8f14:	mov	w0, #0x8                   	// #8
    8f18:	mov	w1, #0xb                   	// #11
    8f1c:	csel	w1, w0, w1, ge  // ge = tcont
    8f20:	mov	w0, w1
    8f24:	ret
    8f28:	mov	x4, #0x7                   	// #7
    8f2c:	nop
    8f30:	lsl	x2, x4, #3
    8f34:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    8f38:	sub	x2, x2, x4
    8f3c:	add	x3, x3, #0x9f0
    8f40:	add	x2, x3, x2, lsl #3
    8f44:	ldr	x3, [x2, #32]
    8f48:	cbz	x3, 8f60 <lzma_properties_size@@XZ_5.0+0xa8>
    8f4c:	ldr	x1, [x1, #8]
    8f50:	mov	x16, x3
    8f54:	br	x16
    8f58:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    8f5c:	add	x2, x2, #0x9f0
    8f60:	ldr	w2, [x2, #40]
    8f64:	mov	w1, #0x0                   	// #0
    8f68:	str	w2, [x0]
    8f6c:	mov	w0, w1
    8f70:	ret
    8f74:	mov	x4, #0x1                   	// #1
    8f78:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8f7c:	mov	x4, #0x2                   	// #2
    8f80:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8f84:	mov	x4, #0x3                   	// #3
    8f88:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8f8c:	mov	x4, #0x4                   	// #4
    8f90:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8f94:	mov	x4, #0x5                   	// #5
    8f98:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8f9c:	mov	x4, #0x6                   	// #6
    8fa0:	b	8f30 <lzma_properties_size@@XZ_5.0+0x78>
    8fa4:	nop

0000000000008fa8 <lzma_properties_encode@@XZ_5.0>:
    8fa8:	mov	x3, x0
    8fac:	mov	x0, #0x1                   	// #1
    8fb0:	movk	x0, #0x4000, lsl #48
    8fb4:	ldr	x2, [x3]
    8fb8:	cmp	x2, x0
    8fbc:	b.eq	9040 <lzma_properties_encode@@XZ_5.0+0x98>  // b.none
    8fc0:	cmp	x2, #0x21
    8fc4:	b.eq	904c <lzma_properties_encode@@XZ_5.0+0xa4>  // b.none
    8fc8:	cmp	x2, #0x4
    8fcc:	b.eq	9054 <lzma_properties_encode@@XZ_5.0+0xac>  // b.none
    8fd0:	cmp	x2, #0x5
    8fd4:	b.eq	905c <lzma_properties_encode@@XZ_5.0+0xb4>  // b.none
    8fd8:	cmp	x2, #0x6
    8fdc:	b.eq	9064 <lzma_properties_encode@@XZ_5.0+0xbc>  // b.none
    8fe0:	cmp	x2, #0x7
    8fe4:	b.eq	906c <lzma_properties_encode@@XZ_5.0+0xc4>  // b.none
    8fe8:	cmp	x2, #0x8
    8fec:	b.eq	9074 <lzma_properties_encode@@XZ_5.0+0xcc>  // b.none
    8ff0:	cmp	x2, #0x9
    8ff4:	b.eq	900c <lzma_properties_encode@@XZ_5.0+0x64>  // b.none
    8ff8:	cmp	x2, #0x3
    8ffc:	mov	x4, #0x8                   	// #8
    9000:	mov	w0, #0xb                   	// #11
    9004:	b.eq	9010 <lzma_properties_encode@@XZ_5.0+0x68>  // b.none
    9008:	ret
    900c:	mov	x4, #0x7                   	// #7
    9010:	lsl	x2, x4, #3
    9014:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    9018:	sub	x2, x2, x4
    901c:	add	x0, x0, #0x9f0
    9020:	add	x2, x0, x2, lsl #3
    9024:	ldr	x2, [x2, #48]
    9028:	cbz	x2, 9038 <lzma_properties_encode@@XZ_5.0+0x90>
    902c:	ldr	x0, [x3, #8]
    9030:	mov	x16, x2
    9034:	br	x16
    9038:	mov	w0, #0x0                   	// #0
    903c:	ret
    9040:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    9044:	ldr	x2, [x2, #4064]
    9048:	b	902c <lzma_properties_encode@@XZ_5.0+0x84>
    904c:	mov	x4, #0x1                   	// #1
    9050:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    9054:	mov	x4, #0x2                   	// #2
    9058:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    905c:	mov	x4, #0x3                   	// #3
    9060:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    9064:	mov	x4, #0x4                   	// #4
    9068:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    906c:	mov	x4, #0x5                   	// #5
    9070:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    9074:	mov	x4, #0x6                   	// #6
    9078:	b	9010 <lzma_properties_encode@@XZ_5.0+0x68>
    907c:	nop

0000000000009080 <lzma_filter_flags_size@@XZ_5.0>:
    9080:	stp	x29, x30, [sp, #-48]!
    9084:	mov	x2, #0x3fffffffffffffff    	// #4611686018427387903
    9088:	mov	x29, sp
    908c:	ldr	x3, [x1]
    9090:	stp	x19, x20, [sp, #16]
    9094:	mov	w20, #0xb                   	// #11
    9098:	cmp	x3, x2
    909c:	b.hi	90e0 <lzma_filter_flags_size@@XZ_5.0+0x60>  // b.pmore
    90a0:	mov	x19, x1
    90a4:	stp	x21, x22, [sp, #32]
    90a8:	mov	x21, x0
    90ac:	bl	33a0 <lzma_properties_size@plt>
    90b0:	mov	w20, w0
    90b4:	cbnz	w0, 90f0 <lzma_filter_flags_size@@XZ_5.0+0x70>
    90b8:	ldr	x0, [x19]
    90bc:	ldr	w22, [x21]
    90c0:	bl	34b0 <lzma_vli_size@plt>
    90c4:	mov	w19, w0
    90c8:	mov	w0, w22
    90cc:	bl	34b0 <lzma_vli_size@plt>
    90d0:	add	w19, w19, w0
    90d4:	add	w19, w19, w22
    90d8:	str	w19, [x21]
    90dc:	ldp	x21, x22, [sp, #32]
    90e0:	mov	w0, w20
    90e4:	ldp	x19, x20, [sp, #16]
    90e8:	ldp	x29, x30, [sp], #48
    90ec:	ret
    90f0:	mov	w0, w20
    90f4:	ldp	x19, x20, [sp, #16]
    90f8:	ldp	x21, x22, [sp, #32]
    90fc:	ldp	x29, x30, [sp], #48
    9100:	ret
    9104:	nop

0000000000009108 <lzma_filter_flags_encode@@XZ_5.0>:
    9108:	stp	x29, x30, [sp, #-64]!
    910c:	mov	x29, sp
    9110:	stp	x19, x20, [sp, #16]
    9114:	mov	x19, x0
    9118:	ldr	x0, [x0]
    911c:	stp	x21, x22, [sp, #32]
    9120:	mov	x22, x1
    9124:	mov	x1, #0x3fffffffffffffff    	// #4611686018427387903
    9128:	cmp	x0, x1
    912c:	b.hi	91c4 <lzma_filter_flags_encode@@XZ_5.0+0xbc>  // b.pmore
    9130:	mov	x21, x2
    9134:	mov	x20, x3
    9138:	mov	x4, x3
    913c:	mov	x1, #0x0                   	// #0
    9140:	mov	x3, x2
    9144:	mov	x2, x22
    9148:	bl	3480 <lzma_vli_encode@plt>
    914c:	cbz	w0, 9160 <lzma_filter_flags_encode@@XZ_5.0+0x58>
    9150:	ldp	x19, x20, [sp, #16]
    9154:	ldp	x21, x22, [sp, #32]
    9158:	ldp	x29, x30, [sp], #64
    915c:	ret
    9160:	mov	x1, x19
    9164:	add	x0, sp, #0x3c
    9168:	bl	33a0 <lzma_properties_size@plt>
    916c:	cbnz	w0, 9150 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    9170:	ldr	w0, [sp, #60]
    9174:	mov	x4, x20
    9178:	mov	x3, x21
    917c:	mov	x2, x22
    9180:	mov	x1, #0x0                   	// #0
    9184:	bl	3480 <lzma_vli_encode@plt>
    9188:	cbnz	w0, 9150 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    918c:	ldr	x1, [x21]
    9190:	ldr	w0, [sp, #60]
    9194:	sub	x20, x20, x1
    9198:	cmp	x20, x0
    919c:	b.cc	91c4 <lzma_filter_flags_encode@@XZ_5.0+0xbc>  // b.lo, b.ul, b.last
    91a0:	add	x1, x22, x1
    91a4:	mov	x0, x19
    91a8:	bl	3430 <lzma_properties_encode@plt>
    91ac:	cbnz	w0, 9150 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    91b0:	ldr	x1, [x21]
    91b4:	ldr	w2, [sp, #60]
    91b8:	add	x1, x1, x2
    91bc:	str	x1, [x21]
    91c0:	b	9150 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    91c4:	mov	w0, #0xb                   	// #11
    91c8:	ldp	x19, x20, [sp, #16]
    91cc:	ldp	x21, x22, [sp, #32]
    91d0:	ldp	x29, x30, [sp], #64
    91d4:	ret
    91d8:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    91dc:	nop
    91e0:	stp	x29, x30, [sp, #-96]!
    91e4:	mov	x29, sp
    91e8:	stp	x21, x22, [sp, #32]
    91ec:	ldr	x22, [x6]
    91f0:	stp	x19, x20, [sp, #16]
    91f4:	mov	x19, x0
    91f8:	stp	x27, x28, [sp, #80]
    91fc:	cmp	x22, x7
    9200:	mov	x28, x5
    9204:	b.cs	9450 <lzma_filter_flags_encode@@XZ_5.0+0x348>  // b.hs, b.nlast
    9208:	ldr	w2, [x0]
    920c:	mov	x27, x6
    9210:	mov	x21, x7
    9214:	mov	x1, x22
    9218:	stp	x23, x24, [sp, #48]
    921c:	add	x23, x0, #0x140
    9220:	mov	w24, #0x1                   	// #1
    9224:	stp	x25, x26, [sp, #64]
    9228:	mov	w25, #0x4                   	// #4
    922c:	mov	w26, #0x5                   	// #5
    9230:	cmp	w2, #0x4
    9234:	b.eq	93a4 <lzma_filter_flags_encode@@XZ_5.0+0x29c>  // b.none
    9238:	mov	x20, x1
    923c:	b.hi	92e0 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>  // b.pmore
    9240:	cmp	w2, #0x1
    9244:	b.eq	9368 <lzma_filter_flags_encode@@XZ_5.0+0x260>  // b.none
    9248:	b.ls	934c <lzma_filter_flags_encode@@XZ_5.0+0x244>  // b.plast
    924c:	cmp	w2, #0x2
    9250:	ldr	x0, [x19, #184]
    9254:	b.eq	947c <lzma_filter_flags_encode@@XZ_5.0+0x374>  // b.none
    9258:	mov	x4, x21
    925c:	mov	x3, x27
    9260:	mov	x2, x28
    9264:	mov	x1, x23
    9268:	bl	3480 <lzma_vli_encode@plt>
    926c:	mov	w20, w0
    9270:	cmp	w0, #0x1
    9274:	b.ne	943c <lzma_filter_flags_encode@@XZ_5.0+0x334>  // b.any
    9278:	ldr	w2, [x19]
    927c:	ldr	x1, [x27]
    9280:	add	w2, w2, #0x1
    9284:	str	w2, [x19]
    9288:	str	xzr, [x19, #320]
    928c:	cmp	x21, x1
    9290:	b.hi	9230 <lzma_filter_flags_encode@@XZ_5.0+0x128>  // b.pmore
    9294:	ldp	x23, x24, [sp, #48]
    9298:	sub	x1, x1, x22
    929c:	ldp	x25, x26, [sp, #64]
    92a0:	mov	w20, #0x0                   	// #0
    92a4:	ldr	w2, [x19, #328]
    92a8:	add	x0, x28, x22
    92ac:	bl	31f0 <lzma_crc32@plt>
    92b0:	str	w0, [x19, #328]
    92b4:	b	93d4 <lzma_filter_flags_encode@@XZ_5.0+0x2cc>
    92b8:	ldr	x0, [x19, #320]
    92bc:	sub	x3, x0, #0x1
    92c0:	cbz	x0, 945c <lzma_filter_flags_encode@@XZ_5.0+0x354>
    92c4:	add	x20, x1, #0x1
    92c8:	strb	wzr, [x28, x1]
    92cc:	str	x20, [x27]
    92d0:	cmp	x20, x21
    92d4:	str	x3, [x19, #320]
    92d8:	mov	x1, x20
    92dc:	b.cs	9294 <lzma_filter_flags_encode@@XZ_5.0+0x18c>  // b.hs, b.nlast
    92e0:	cmp	w2, #0x5
    92e4:	b.eq	92b8 <lzma_filter_flags_encode@@XZ_5.0+0x1b0>  // b.none
    92e8:	cmp	w2, #0x6
    92ec:	b.eq	9320 <lzma_filter_flags_encode@@XZ_5.0+0x218>  // b.none
    92f0:	b	93c8 <lzma_filter_flags_encode@@XZ_5.0+0x2c0>
    92f4:	ldr	x0, [x19, #320]
    92f8:	ldr	w1, [x19, #328]
    92fc:	add	x2, x0, #0x1
    9300:	lsl	w0, w0, #3
    9304:	cmp	x2, #0x3
    9308:	lsr	w0, w1, w0
    930c:	strb	w0, [x28, x20]
    9310:	add	x20, x20, #0x1
    9314:	str	x20, [x27]
    9318:	str	x2, [x19, #320]
    931c:	b.hi	93ec <lzma_filter_flags_encode@@XZ_5.0+0x2e4>  // b.pmore
    9320:	cmp	x21, x20
    9324:	b.ne	92f4 <lzma_filter_flags_encode@@XZ_5.0+0x1ec>  // b.any
    9328:	mov	w20, #0x0                   	// #0
    932c:	mov	w0, w20
    9330:	ldp	x19, x20, [sp, #16]
    9334:	ldp	x21, x22, [sp, #32]
    9338:	ldp	x23, x24, [sp, #48]
    933c:	ldp	x25, x26, [sp, #64]
    9340:	ldp	x27, x28, [sp, #80]
    9344:	ldp	x29, x30, [sp], #96
    9348:	ret
    934c:	cbnz	w2, 93c8 <lzma_filter_flags_encode@@XZ_5.0+0x2c0>
    9350:	strb	wzr, [x28, x1]
    9354:	add	x1, x1, #0x1
    9358:	str	w24, [x19]
    935c:	cmp	x1, x21
    9360:	str	x1, [x27]
    9364:	b.cs	9294 <lzma_filter_flags_encode@@XZ_5.0+0x18c>  // b.hs, b.nlast
    9368:	ldr	x0, [x19, #8]
    936c:	bl	3510 <lzma_index_block_count@plt>
    9370:	mov	x1, x23
    9374:	mov	x4, x21
    9378:	mov	x3, x27
    937c:	mov	x2, x28
    9380:	bl	3480 <lzma_vli_encode@plt>
    9384:	mov	w20, w0
    9388:	cmp	w0, #0x1
    938c:	ldr	x1, [x27]
    9390:	b.ne	9440 <lzma_filter_flags_encode@@XZ_5.0+0x338>  // b.any
    9394:	str	w25, [x19]
    9398:	cmp	x21, x1
    939c:	str	xzr, [x19, #320]
    93a0:	b.ls	9294 <lzma_filter_flags_encode@@XZ_5.0+0x18c>  // b.plast
    93a4:	add	x0, x19, #0x10
    93a8:	mov	w1, #0x2                   	// #2
    93ac:	bl	3490 <lzma_index_iter_next@plt>
    93b0:	tst	w0, #0xff
    93b4:	b.ne	9410 <lzma_filter_flags_encode@@XZ_5.0+0x308>  // b.any
    93b8:	mov	w0, #0x2                   	// #2
    93bc:	str	w0, [x19]
    93c0:	ldr	x0, [x19, #192]
    93c4:	b	9258 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    93c8:	ldp	x23, x24, [sp, #48]
    93cc:	mov	w20, #0xb                   	// #11
    93d0:	ldp	x25, x26, [sp, #64]
    93d4:	mov	w0, w20
    93d8:	ldp	x19, x20, [sp, #16]
    93dc:	ldp	x21, x22, [sp, #32]
    93e0:	ldp	x27, x28, [sp, #80]
    93e4:	ldp	x29, x30, [sp], #96
    93e8:	ret
    93ec:	mov	w20, #0x1                   	// #1
    93f0:	mov	w0, w20
    93f4:	ldp	x19, x20, [sp, #16]
    93f8:	ldp	x21, x22, [sp, #32]
    93fc:	ldp	x23, x24, [sp, #48]
    9400:	ldp	x25, x26, [sp, #64]
    9404:	ldp	x27, x28, [sp, #80]
    9408:	ldp	x29, x30, [sp], #96
    940c:	ret
    9410:	ldr	x0, [x19, #8]
    9414:	bl	67e8 <lzma_index_checks@@XZ_5.0+0x28>
    9418:	mov	w0, w0
    941c:	ldr	x1, [x27]
    9420:	str	w26, [x19]
    9424:	str	x0, [x19, #320]
    9428:	mov	w2, #0x5                   	// #5
    942c:	cmp	x21, x1
    9430:	mov	x20, x1
    9434:	b.hi	92e0 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>  // b.pmore
    9438:	b	9294 <lzma_filter_flags_encode@@XZ_5.0+0x18c>
    943c:	ldr	x1, [x27]
    9440:	sub	x1, x1, x22
    9444:	ldp	x23, x24, [sp, #48]
    9448:	ldp	x25, x26, [sp, #64]
    944c:	b	92a4 <lzma_filter_flags_encode@@XZ_5.0+0x19c>
    9450:	mov	x1, #0x0                   	// #0
    9454:	mov	w20, #0x0                   	// #0
    9458:	b	92a4 <lzma_filter_flags_encode@@XZ_5.0+0x19c>
    945c:	ldr	w2, [x19, #328]
    9460:	sub	x1, x1, x22
    9464:	add	x0, x28, x22
    9468:	bl	31f0 <lzma_crc32@plt>
    946c:	str	w0, [x19, #328]
    9470:	mov	w1, #0x6                   	// #6
    9474:	str	w1, [x19]
    9478:	b	9320 <lzma_filter_flags_encode@@XZ_5.0+0x218>
    947c:	ldr	x0, [x19, #192]
    9480:	b	9258 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    9484:	nop
    9488:	stp	x29, x30, [sp, #-48]!
    948c:	mov	x29, sp
    9490:	stp	x21, x22, [sp, #32]
    9494:	mov	x21, x2
    9498:	mov	x22, x1
    949c:	ldr	x2, [x0, #16]
    94a0:	stp	x19, x20, [sp, #16]
    94a4:	adrp	x19, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    94a8:	add	x19, x19, #0x488
    94ac:	mov	x20, x0
    94b0:	cmp	x2, x19
    94b4:	b.eq	94bc <lzma_filter_flags_encode@@XZ_5.0+0x3b4>  // b.none
    94b8:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    94bc:	str	x19, [x20, #16]
    94c0:	cbz	x21, 952c <lzma_filter_flags_encode@@XZ_5.0+0x424>
    94c4:	ldr	x19, [x20]
    94c8:	cbz	x19, 94fc <lzma_filter_flags_encode@@XZ_5.0+0x3f4>
    94cc:	add	x0, x19, #0x10
    94d0:	mov	x1, x21
    94d4:	bl	34e0 <lzma_index_iter_init@plt>
    94d8:	str	wzr, [x19]
    94dc:	mov	w0, #0x0                   	// #0
    94e0:	str	x21, [x19, #8]
    94e4:	str	xzr, [x19, #320]
    94e8:	str	wzr, [x19, #328]
    94ec:	ldp	x19, x20, [sp, #16]
    94f0:	ldp	x21, x22, [sp, #32]
    94f4:	ldp	x29, x30, [sp], #48
    94f8:	ret
    94fc:	mov	x1, x22
    9500:	mov	x0, #0x150                 	// #336
    9504:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    9508:	str	x0, [x20]
    950c:	mov	x19, x0
    9510:	cbz	x0, 9540 <lzma_filter_flags_encode@@XZ_5.0+0x438>
    9514:	adrp	x1, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    9518:	adrp	x0, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    951c:	add	x1, x1, #0x1e0
    9520:	add	x0, x0, #0x1d8
    9524:	stp	x1, x0, [x20, #24]
    9528:	b	94cc <lzma_filter_flags_encode@@XZ_5.0+0x3c4>
    952c:	mov	w0, #0xb                   	// #11
    9530:	ldp	x19, x20, [sp, #16]
    9534:	ldp	x21, x22, [sp, #32]
    9538:	ldp	x29, x30, [sp], #48
    953c:	ret
    9540:	mov	w0, #0x5                   	// #5
    9544:	b	94ec <lzma_filter_flags_encode@@XZ_5.0+0x3e4>

0000000000009548 <lzma_index_encoder@@XZ_5.0>:
    9548:	stp	x29, x30, [sp, #-64]!
    954c:	mov	x29, sp
    9550:	stp	x19, x20, [sp, #16]
    9554:	mov	x20, x0
    9558:	stp	x23, x24, [sp, #48]
    955c:	mov	x23, x1
    9560:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    9564:	mov	w19, w0
    9568:	cbz	w0, 9580 <lzma_index_encoder@@XZ_5.0+0x38>
    956c:	mov	w0, w19
    9570:	ldp	x19, x20, [sp, #16]
    9574:	ldp	x23, x24, [sp, #48]
    9578:	ldp	x29, x30, [sp], #64
    957c:	ret
    9580:	stp	x21, x22, [sp, #32]
    9584:	adrp	x21, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    9588:	add	x21, x21, #0x488
    958c:	ldp	x24, x22, [x20, #48]
    9590:	ldr	x0, [x22, #16]
    9594:	cmp	x0, x21
    9598:	b.eq	95a8 <lzma_index_encoder@@XZ_5.0+0x60>  // b.none
    959c:	mov	x1, x24
    95a0:	mov	x0, x22
    95a4:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    95a8:	str	x21, [x22, #16]
    95ac:	cbz	x23, 962c <lzma_index_encoder@@XZ_5.0+0xe4>
    95b0:	ldr	x21, [x22]
    95b4:	cbz	x21, 95fc <lzma_index_encoder@@XZ_5.0+0xb4>
    95b8:	mov	x1, x23
    95bc:	add	x0, x21, #0x10
    95c0:	bl	34e0 <lzma_index_iter_init@plt>
    95c4:	ldr	x0, [x20, #56]
    95c8:	str	wzr, [x21]
    95cc:	str	x23, [x21, #8]
    95d0:	mov	w1, #0x1                   	// #1
    95d4:	str	xzr, [x21, #320]
    95d8:	str	wzr, [x21, #328]
    95dc:	strb	w1, [x0, #88]
    95e0:	strb	w1, [x0, #91]
    95e4:	mov	w0, w19
    95e8:	ldp	x19, x20, [sp, #16]
    95ec:	ldp	x21, x22, [sp, #32]
    95f0:	ldp	x23, x24, [sp, #48]
    95f4:	ldp	x29, x30, [sp], #64
    95f8:	ret
    95fc:	mov	x1, x24
    9600:	mov	x0, #0x150                 	// #336
    9604:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    9608:	str	x0, [x22]
    960c:	mov	x21, x0
    9610:	cbz	x0, 9640 <lzma_index_encoder@@XZ_5.0+0xf8>
    9614:	adrp	x1, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    9618:	adrp	x0, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    961c:	add	x1, x1, #0x1e0
    9620:	add	x0, x0, #0x1d8
    9624:	stp	x1, x0, [x22, #24]
    9628:	b	95b8 <lzma_index_encoder@@XZ_5.0+0x70>
    962c:	mov	w19, #0xb                   	// #11
    9630:	mov	x0, x20
    9634:	bl	3350 <lzma_end@plt>
    9638:	ldp	x21, x22, [sp, #32]
    963c:	b	956c <lzma_index_encoder@@XZ_5.0+0x24>
    9640:	mov	w19, #0x5                   	// #5
    9644:	b	9630 <lzma_index_encoder@@XZ_5.0+0xe8>

0000000000009648 <lzma_index_buffer_encode@@XZ_5.0>:
    9648:	cmp	x1, #0x0
    964c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9650:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    9654:	b.eq	98f4 <lzma_index_buffer_encode@@XZ_5.0+0x2ac>  // b.none
    9658:	stp	x29, x30, [sp, #-432]!
    965c:	mov	x29, sp
    9660:	stp	x19, x20, [sp, #16]
    9664:	mov	x19, x2
    9668:	mov	x20, x3
    966c:	ldr	x2, [x2]
    9670:	mov	w3, #0xb                   	// #11
    9674:	cmp	x2, x20
    9678:	b.hi	9768 <lzma_index_buffer_encode@@XZ_5.0+0x120>  // b.pmore
    967c:	stp	x21, x22, [sp, #32]
    9680:	sub	x22, x20, x2
    9684:	mov	x21, x0
    9688:	stp	x27, x28, [sp, #80]
    968c:	mov	x28, x1
    9690:	bl	3540 <lzma_index_size@plt>
    9694:	mov	w3, #0xa                   	// #10
    9698:	cmp	x22, x0
    969c:	b.cc	9900 <lzma_index_buffer_encode@@XZ_5.0+0x2b8>  // b.lo, b.ul, b.last
    96a0:	add	x22, sp, #0x70
    96a4:	mov	x1, x21
    96a8:	mov	x0, x22
    96ac:	stp	x23, x24, [sp, #48]
    96b0:	bl	34e0 <lzma_index_iter_init@plt>
    96b4:	ldr	x23, [x19]
    96b8:	str	wzr, [sp, #96]
    96bc:	str	x21, [sp, #104]
    96c0:	add	x24, sp, #0x60
    96c4:	str	xzr, [sp, #416]
    96c8:	cmp	x20, x23
    96cc:	str	wzr, [sp, #424]
    96d0:	b.ls	9754 <lzma_index_buffer_encode@@XZ_5.0+0x10c>  // b.plast
    96d4:	mov	x27, x23
    96d8:	add	x21, x24, #0x140
    96dc:	mov	w5, #0x0                   	// #0
    96e0:	mov	w24, #0x1                   	// #1
    96e4:	stp	x25, x26, [sp, #64]
    96e8:	mov	w25, #0x4                   	// #4
    96ec:	mov	w26, #0x2                   	// #2
    96f0:	cmp	w5, #0x4
    96f4:	b.eq	98d4 <lzma_index_buffer_encode@@XZ_5.0+0x28c>  // b.none
    96f8:	mov	x0, x27
    96fc:	b.hi	97a0 <lzma_index_buffer_encode@@XZ_5.0+0x158>  // b.pmore
    9700:	cmp	w5, #0x1
    9704:	b.eq	989c <lzma_index_buffer_encode@@XZ_5.0+0x254>  // b.none
    9708:	b.ls	9880 <lzma_index_buffer_encode@@XZ_5.0+0x238>  // b.plast
    970c:	cmp	w5, #0x2
    9710:	ldr	x0, [sp, #280]
    9714:	b.eq	998c <lzma_index_buffer_encode@@XZ_5.0+0x344>  // b.none
    9718:	mov	x4, x20
    971c:	mov	x3, x19
    9720:	mov	x2, x28
    9724:	mov	x1, x21
    9728:	bl	3480 <lzma_vli_encode@plt>
    972c:	cmp	w0, #0x1
    9730:	b.ne	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.any
    9734:	ldr	w5, [sp, #96]
    9738:	ldr	x27, [x19]
    973c:	add	w5, w5, #0x1
    9740:	str	w5, [sp, #96]
    9744:	str	xzr, [sp, #416]
    9748:	cmp	x20, x27
    974c:	b.hi	96f0 <lzma_index_buffer_encode@@XZ_5.0+0xa8>  // b.pmore
    9750:	ldp	x25, x26, [sp, #64]
    9754:	mov	w3, #0xb                   	// #11
    9758:	ldp	x21, x22, [sp, #32]
    975c:	ldp	x27, x28, [sp, #80]
    9760:	str	x23, [x19]
    9764:	ldp	x23, x24, [sp, #48]
    9768:	mov	w0, w3
    976c:	ldp	x19, x20, [sp, #16]
    9770:	ldp	x29, x30, [sp], #432
    9774:	ret
    9778:	ldr	x1, [sp, #416]
    977c:	sub	x2, x1, #0x1
    9780:	cbz	x1, 995c <lzma_index_buffer_encode@@XZ_5.0+0x314>
    9784:	add	x27, x27, #0x1
    9788:	strb	wzr, [x28, x0]
    978c:	str	x27, [x19]
    9790:	cmp	x20, x27
    9794:	str	x2, [sp, #416]
    9798:	mov	x0, x27
    979c:	b.ls	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.plast
    97a0:	cmp	w5, #0x5
    97a4:	b.eq	9778 <lzma_index_buffer_encode@@XZ_5.0+0x130>  // b.none
    97a8:	cmp	w5, #0x6
    97ac:	b.ne	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.any
    97b0:	ldr	w2, [sp, #424]
    97b4:	cmp	x20, x27
    97b8:	ldr	x0, [sp, #416]
    97bc:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    97c0:	lsl	w3, w0, #3
    97c4:	add	x1, x27, #0x1
    97c8:	str	x1, [x19]
    97cc:	add	x0, x0, #0x1
    97d0:	lsr	w3, w2, w3
    97d4:	strb	w3, [x28, x27]
    97d8:	cmp	x0, #0x3
    97dc:	b.hi	9944 <lzma_index_buffer_encode@@XZ_5.0+0x2fc>  // b.pmore
    97e0:	cmp	x20, x1
    97e4:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    97e8:	lsl	w3, w0, #3
    97ec:	add	x4, x1, #0x1
    97f0:	str	x4, [x19]
    97f4:	cmp	x0, #0x3
    97f8:	lsr	w3, w2, w3
    97fc:	strb	w3, [x28, x1]
    9800:	add	x3, x0, #0x1
    9804:	b.eq	9944 <lzma_index_buffer_encode@@XZ_5.0+0x2fc>  // b.none
    9808:	cmp	x20, x4
    980c:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    9810:	lsl	w3, w3, #3
    9814:	add	x5, x1, #0x2
    9818:	str	x5, [x19]
    981c:	cmp	x0, #0x2
    9820:	lsr	w3, w2, w3
    9824:	strb	w3, [x28, x4]
    9828:	add	x3, x0, #0x2
    982c:	b.eq	9944 <lzma_index_buffer_encode@@XZ_5.0+0x2fc>  // b.none
    9830:	cmp	x20, x5
    9834:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    9838:	lsl	w3, w3, #3
    983c:	add	x4, x1, #0x3
    9840:	str	x4, [x19]
    9844:	lsr	w3, w2, w3
    9848:	strb	w3, [x28, x5]
    984c:	cbnz	x0, 9944 <lzma_index_buffer_encode@@XZ_5.0+0x2fc>
    9850:	cmp	x20, x4
    9854:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    9858:	lsr	w2, w2, #24
    985c:	strb	w2, [x28, x4]
    9860:	add	x1, x1, #0x4
    9864:	mov	w3, #0x0                   	// #0
    9868:	ldp	x21, x22, [sp, #32]
    986c:	ldp	x23, x24, [sp, #48]
    9870:	ldp	x25, x26, [sp, #64]
    9874:	ldp	x27, x28, [sp, #80]
    9878:	str	x1, [x19]
    987c:	b	9768 <lzma_index_buffer_encode@@XZ_5.0+0x120>
    9880:	cbnz	w5, 9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>
    9884:	add	x0, x27, #0x1
    9888:	strb	wzr, [x28, x27]
    988c:	str	x0, [x19]
    9890:	cmp	x20, x0
    9894:	str	w24, [sp, #96]
    9898:	b.ls	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.plast
    989c:	ldr	x0, [sp, #104]
    98a0:	bl	3510 <lzma_index_block_count@plt>
    98a4:	mov	x4, x20
    98a8:	mov	x3, x19
    98ac:	mov	x2, x28
    98b0:	mov	x1, x21
    98b4:	bl	3480 <lzma_vli_encode@plt>
    98b8:	cmp	w0, #0x1
    98bc:	b.ne	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.any
    98c0:	ldr	x0, [x19]
    98c4:	str	w25, [sp, #96]
    98c8:	str	xzr, [sp, #416]
    98cc:	cmp	x20, x0
    98d0:	b.ls	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.plast
    98d4:	mov	x0, x22
    98d8:	mov	w1, #0x2                   	// #2
    98dc:	bl	3490 <lzma_index_iter_next@plt>
    98e0:	tst	w0, #0xff
    98e4:	b.ne	9918 <lzma_index_buffer_encode@@XZ_5.0+0x2d0>  // b.any
    98e8:	str	w26, [sp, #96]
    98ec:	ldr	x0, [sp, #288]
    98f0:	b	9718 <lzma_index_buffer_encode@@XZ_5.0+0xd0>
    98f4:	mov	w3, #0xb                   	// #11
    98f8:	mov	w0, w3
    98fc:	ret
    9900:	mov	w0, w3
    9904:	ldp	x19, x20, [sp, #16]
    9908:	ldp	x21, x22, [sp, #32]
    990c:	ldp	x27, x28, [sp, #80]
    9910:	ldp	x29, x30, [sp], #432
    9914:	ret
    9918:	ldr	x0, [sp, #104]
    991c:	bl	67e8 <lzma_index_checks@@XZ_5.0+0x28>
    9920:	mov	w0, w0
    9924:	ldr	x27, [x19]
    9928:	mov	w5, #0x5                   	// #5
    992c:	str	w5, [sp, #96]
    9930:	str	x0, [sp, #416]
    9934:	cmp	x20, x27
    9938:	mov	x0, x27
    993c:	b.hi	97a0 <lzma_index_buffer_encode@@XZ_5.0+0x158>  // b.pmore
    9940:	b	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>
    9944:	mov	w3, #0x0                   	// #0
    9948:	ldp	x21, x22, [sp, #32]
    994c:	ldp	x23, x24, [sp, #48]
    9950:	ldp	x25, x26, [sp, #64]
    9954:	ldp	x27, x28, [sp, #80]
    9958:	b	9768 <lzma_index_buffer_encode@@XZ_5.0+0x120>
    995c:	ldr	w2, [sp, #424]
    9960:	sub	x1, x27, x23
    9964:	add	x0, x28, x23
    9968:	bl	31f0 <lzma_crc32@plt>
    996c:	mov	w2, w0
    9970:	cmp	x20, x27
    9974:	b.eq	9750 <lzma_index_buffer_encode@@XZ_5.0+0x108>  // b.none
    9978:	add	x1, x27, #0x1
    997c:	mov	x0, #0x1                   	// #1
    9980:	strb	w2, [x28, x27]
    9984:	str	x1, [x19]
    9988:	b	97e0 <lzma_index_buffer_encode@@XZ_5.0+0x198>
    998c:	ldr	x0, [sp, #288]
    9990:	b	9718 <lzma_index_buffer_encode@@XZ_5.0+0xd0>
    9994:	nop

0000000000009998 <lzma_stream_buffer_bound@@XZ_5.0>:
    9998:	stp	x29, x30, [sp, #-16]!
    999c:	mov	x29, sp
    99a0:	bl	3150 <lzma_block_buffer_bound@plt>
    99a4:	cbz	x0, 99bc <lzma_stream_buffer_bound@@XZ_5.0+0x24>
    99a8:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    99ac:	sub	x1, x1, x0
    99b0:	cmp	x1, #0x2f
    99b4:	add	x0, x0, #0x30
    99b8:	csel	x0, x0, xzr, hi  // hi = pmore
    99bc:	ldp	x29, x30, [sp], #16
    99c0:	ret
    99c4:	nop

00000000000099c8 <lzma_stream_buffer_encode@@XZ_5.0>:
    99c8:	stp	x29, x30, [sp, #-384]!
    99cc:	cmp	x0, #0x0
    99d0:	ccmp	w1, #0xf, #0x2, ne  // ne = any
    99d4:	mov	x29, sp
    99d8:	stp	x23, x24, [sp, #48]
    99dc:	b.hi	9b78 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>  // b.pmore
    99e0:	stp	x21, x22, [sp, #32]
    99e4:	cmp	x3, #0x0
    99e8:	mov	x23, x3
    99ec:	mov	x21, x4
    99f0:	ccmp	x4, #0x0, #0x4, eq  // eq = none
    99f4:	b.ne	9bac <lzma_stream_buffer_encode@@XZ_5.0+0x1e4>  // b.any
    99f8:	stp	x19, x20, [sp, #16]
    99fc:	cmp	x5, #0x0
    9a00:	mov	x20, x5
    9a04:	stp	x27, x28, [sp, #80]
    9a08:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    9a0c:	mov	x28, x6
    9a10:	b.eq	9b68 <lzma_stream_buffer_encode@@XZ_5.0+0x1a0>  // b.none
    9a14:	stp	x25, x26, [sp, #64]
    9a18:	mov	x22, x7
    9a1c:	ldr	x26, [x6]
    9a20:	cmp	x26, x7
    9a24:	b.hi	9c18 <lzma_stream_buffer_encode@@XZ_5.0+0x250>  // b.pmore
    9a28:	mov	x27, x0
    9a2c:	mov	w19, w1
    9a30:	mov	x25, x2
    9a34:	mov	w0, w1
    9a38:	mov	w24, #0x3                   	// #3
    9a3c:	bl	3110 <lzma_check_is_supported@plt>
    9a40:	tst	w0, #0xff
    9a44:	b.eq	9b8c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>  // b.none
    9a48:	str	x26, [sp, #112]
    9a4c:	sub	x0, x22, x26
    9a50:	cmp	x0, #0x18
    9a54:	mov	w24, #0xa                   	// #10
    9a58:	b.ls	9b8c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>  // b.plast
    9a5c:	stp	xzr, xzr, [sp, #136]
    9a60:	add	x0, sp, #0x78
    9a64:	add	x1, x20, x26
    9a68:	sub	x22, x22, #0xc
    9a6c:	str	x0, [sp, #96]
    9a70:	stp	xzr, xzr, [sp, #120]
    9a74:	str	w19, [sp, #136]
    9a78:	stp	xzr, xzr, [sp, #152]
    9a7c:	str	xzr, [sp, #168]
    9a80:	bl	33c0 <lzma_stream_header_encode@plt>
    9a84:	cbnz	w0, 9c18 <lzma_stream_buffer_encode@@XZ_5.0+0x250>
    9a88:	ldr	x0, [sp, #112]
    9a8c:	stp	xzr, xzr, [sp, #176]
    9a90:	stp	xzr, xzr, [sp, #208]
    9a94:	add	x0, x0, #0xc
    9a98:	str	x0, [sp, #112]
    9a9c:	str	w19, [sp, #184]
    9aa0:	stp	xzr, xzr, [sp, #192]
    9aa4:	str	x27, [sp, #208]
    9aa8:	stp	xzr, xzr, [sp, #224]
    9aac:	stp	xzr, xzr, [sp, #240]
    9ab0:	stp	xzr, xzr, [sp, #256]
    9ab4:	stp	xzr, xzr, [sp, #272]
    9ab8:	stp	xzr, xzr, [sp, #288]
    9abc:	stp	xzr, xzr, [sp, #304]
    9ac0:	stp	xzr, xzr, [sp, #320]
    9ac4:	stp	xzr, xzr, [sp, #336]
    9ac8:	stp	xzr, xzr, [sp, #352]
    9acc:	stp	xzr, xzr, [sp, #368]
    9ad0:	cbz	x21, 9bb4 <lzma_stream_buffer_encode@@XZ_5.0+0x1ec>
    9ad4:	add	x7, sp, #0xb0
    9ad8:	add	x27, sp, #0x70
    9adc:	mov	x0, x7
    9ae0:	mov	x3, x21
    9ae4:	mov	x2, x23
    9ae8:	mov	x5, x27
    9aec:	mov	x6, x22
    9af0:	mov	x4, x20
    9af4:	mov	x1, x25
    9af8:	str	x7, [sp, #104]
    9afc:	bl	3100 <lzma_block_buffer_encode@plt>
    9b00:	mov	w24, w0
    9b04:	ldr	x7, [sp, #104]
    9b08:	cbnz	w0, 9b8c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>
    9b0c:	mov	x0, x25
    9b10:	str	x7, [sp, #104]
    9b14:	bl	33e0 <lzma_index_init@plt>
    9b18:	mov	x19, x0
    9b1c:	ldr	x7, [sp, #104]
    9b20:	cbz	x0, 9c4c <lzma_stream_buffer_encode@@XZ_5.0+0x284>
    9b24:	mov	x0, x7
    9b28:	bl	31c0 <lzma_block_unpadded_size@plt>
    9b2c:	ldr	x3, [sp, #200]
    9b30:	mov	x2, x0
    9b34:	mov	x1, x25
    9b38:	mov	x0, x19
    9b3c:	bl	3330 <lzma_index_append@plt>
    9b40:	mov	w24, w0
    9b44:	cbz	w0, 9bc8 <lzma_stream_buffer_encode@@XZ_5.0+0x200>
    9b48:	mov	x1, x25
    9b4c:	mov	x0, x19
    9b50:	bl	3410 <lzma_index_end@plt>
    9b54:	ldp	x19, x20, [sp, #16]
    9b58:	ldp	x21, x22, [sp, #32]
    9b5c:	ldp	x25, x26, [sp, #64]
    9b60:	ldp	x27, x28, [sp, #80]
    9b64:	b	9b7c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    9b68:	ldp	x19, x20, [sp, #16]
    9b6c:	ldp	x21, x22, [sp, #32]
    9b70:	ldp	x27, x28, [sp, #80]
    9b74:	nop
    9b78:	mov	w24, #0xb                   	// #11
    9b7c:	mov	w0, w24
    9b80:	ldp	x23, x24, [sp, #48]
    9b84:	ldp	x29, x30, [sp], #384
    9b88:	ret
    9b8c:	mov	w0, w24
    9b90:	ldp	x19, x20, [sp, #16]
    9b94:	ldp	x21, x22, [sp, #32]
    9b98:	ldp	x23, x24, [sp, #48]
    9b9c:	ldp	x25, x26, [sp, #64]
    9ba0:	ldp	x27, x28, [sp, #80]
    9ba4:	ldp	x29, x30, [sp], #384
    9ba8:	ret
    9bac:	ldp	x21, x22, [sp, #32]
    9bb0:	b	9b78 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>
    9bb4:	mov	x0, x25
    9bb8:	add	x27, sp, #0x70
    9bbc:	bl	33e0 <lzma_index_init@plt>
    9bc0:	mov	x19, x0
    9bc4:	cbz	x0, 9c4c <lzma_stream_buffer_encode@@XZ_5.0+0x284>
    9bc8:	mov	x2, x27
    9bcc:	mov	x1, x20
    9bd0:	mov	x3, x22
    9bd4:	mov	x0, x19
    9bd8:	bl	3130 <lzma_index_buffer_encode@plt>
    9bdc:	mov	w24, w0
    9be0:	mov	x0, x19
    9be4:	bl	3540 <lzma_index_size@plt>
    9be8:	mov	x2, x0
    9bec:	mov	x1, x25
    9bf0:	mov	x0, x19
    9bf4:	str	x2, [sp, #128]
    9bf8:	bl	3410 <lzma_index_end@plt>
    9bfc:	cbnz	w24, 9b8c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>
    9c00:	ldr	x0, [sp, #96]
    9c04:	ldr	x1, [sp, #112]
    9c08:	add	x1, x20, x1
    9c0c:	bl	3240 <lzma_stream_footer_encode@plt>
    9c10:	mov	w24, w0
    9c14:	cbz	w0, 9c2c <lzma_stream_buffer_encode@@XZ_5.0+0x264>
    9c18:	ldp	x19, x20, [sp, #16]
    9c1c:	ldp	x21, x22, [sp, #32]
    9c20:	ldp	x25, x26, [sp, #64]
    9c24:	ldp	x27, x28, [sp, #80]
    9c28:	b	9b78 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>
    9c2c:	ldr	x0, [sp, #112]
    9c30:	ldp	x19, x20, [sp, #16]
    9c34:	add	x0, x0, #0xc
    9c38:	ldp	x21, x22, [sp, #32]
    9c3c:	ldp	x25, x26, [sp, #64]
    9c40:	str	x0, [x28]
    9c44:	ldp	x27, x28, [sp, #80]
    9c48:	b	9b7c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    9c4c:	mov	w24, #0x5                   	// #5
    9c50:	ldp	x19, x20, [sp, #16]
    9c54:	ldp	x21, x22, [sp, #32]
    9c58:	ldp	x25, x26, [sp, #64]
    9c5c:	ldp	x27, x28, [sp, #80]
    9c60:	b	9b7c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    9c64:	nop
    9c68:	stp	x29, x30, [sp, #-48]!
    9c6c:	mov	x29, sp
    9c70:	str	x21, [sp, #32]
    9c74:	mov	x21, x0
    9c78:	add	x0, x0, #0x8
    9c7c:	stp	x19, x20, [sp, #16]
    9c80:	mov	x20, x1
    9c84:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    9c88:	mov	x1, x20
    9c8c:	add	x0, x21, #0x170
    9c90:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    9c94:	ldr	x0, [x21, #440]
    9c98:	mov	x1, x20
    9c9c:	bl	3410 <lzma_index_end@plt>
    9ca0:	ldr	x0, [x21, #288]
    9ca4:	cmn	x0, #0x1
    9ca8:	b.eq	9cc8 <lzma_stream_buffer_encode@@XZ_5.0+0x300>  // b.none
    9cac:	add	x19, x21, #0x128
    9cb0:	ldr	x0, [x19], #16
    9cb4:	mov	x1, x20
    9cb8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    9cbc:	ldur	x0, [x19, #-8]
    9cc0:	cmn	x0, #0x1
    9cc4:	b.ne	9cb0 <lzma_stream_buffer_encode@@XZ_5.0+0x2e8>  // b.any
    9cc8:	mov	x1, x20
    9ccc:	mov	x0, x21
    9cd0:	ldp	x19, x20, [sp, #16]
    9cd4:	ldr	x21, [sp, #32]
    9cd8:	ldp	x29, x30, [sp], #48
    9cdc:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    9ce0:	sub	sp, sp, #0xd0
    9ce4:	stp	x29, x30, [sp, #16]
    9ce8:	add	x29, sp, #0x10
    9cec:	stp	x19, x20, [sp, #32]
    9cf0:	mov	x19, x7
    9cf4:	stp	x27, x28, [sp, #96]
    9cf8:	mov	x28, x0
    9cfc:	ldr	w0, [sp, #208]
    9d00:	ldr	x7, [x6]
    9d04:	str	w0, [sp, #124]
    9d08:	cmp	x7, x19
    9d0c:	b.cs	9dbc <lzma_stream_buffer_encode@@XZ_5.0+0x3f4>  // b.hs, b.nlast
    9d10:	ldr	w0, [x28]
    9d14:	mov	x27, x6
    9d18:	stp	x21, x22, [sp, #48]
    9d1c:	mov	x22, x3
    9d20:	mov	x21, x5
    9d24:	stp	x23, x24, [sp, #64]
    9d28:	mov	x24, x2
    9d2c:	mov	x23, x4
    9d30:	stp	x25, x26, [sp, #80]
    9d34:	adrp	x25, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    9d38:	add	x26, x28, #0x1d0
    9d3c:	add	x25, x25, #0x270
    9d40:	mov	x20, x1
    9d44:	add	x1, sp, #0x98
    9d48:	str	x1, [sp, #128]
    9d4c:	cmp	w0, #0x3
    9d50:	b.eq	9e84 <lzma_stream_buffer_encode@@XZ_5.0+0x4bc>  // b.none
    9d54:	b.hi	9dc4 <lzma_stream_buffer_encode@@XZ_5.0+0x3fc>  // b.pmore
    9d58:	cmp	w0, #0x1
    9d5c:	b.eq	9efc <lzma_stream_buffer_encode@@XZ_5.0+0x534>  // b.none
    9d60:	tbnz	w0, #0, 9e60 <lzma_stream_buffer_encode@@XZ_5.0+0x498>
    9d64:	ldr	x2, [x28, #456]
    9d68:	add	x1, x28, #0x1c0
    9d6c:	mov	x5, x19
    9d70:	mov	x4, x27
    9d74:	mov	x3, x21
    9d78:	mov	x0, x26
    9d7c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    9d80:	ldp	x1, x0, [x28, #448]
    9d84:	cmp	x1, x0
    9d88:	b.cc	9db0 <lzma_stream_buffer_encode@@XZ_5.0+0x3e8>  // b.lo, b.ul, b.last
    9d8c:	ldr	w0, [x28]
    9d90:	cmp	w0, #0x5
    9d94:	b.eq	9fd4 <lzma_stream_buffer_encode@@XZ_5.0+0x60c>  // b.none
    9d98:	ldr	x1, [x27]
    9d9c:	add	w0, w0, #0x1
    9da0:	str	w0, [x28]
    9da4:	str	xzr, [x28, #448]
    9da8:	cmp	x1, x19
    9dac:	b.cc	9d4c <lzma_stream_buffer_encode@@XZ_5.0+0x384>  // b.lo, b.ul, b.last
    9db0:	ldp	x21, x22, [sp, #48]
    9db4:	ldp	x23, x24, [sp, #64]
    9db8:	ldp	x25, x26, [sp, #80]
    9dbc:	mov	w0, #0x0                   	// #0
    9dc0:	b	9e70 <lzma_stream_buffer_encode@@XZ_5.0+0x4a8>
    9dc4:	cmp	w0, #0x4
    9dc8:	b.ne	9e58 <lzma_stream_buffer_encode@@XZ_5.0+0x490>  // b.any
    9dcc:	ldr	x0, [x28, #368]
    9dd0:	str	wzr, [sp]
    9dd4:	mov	x7, x19
    9dd8:	mov	x6, x27
    9ddc:	ldr	x9, [x28, #392]
    9de0:	mov	x5, x21
    9de4:	mov	x1, x20
    9de8:	mov	x4, #0x0                   	// #0
    9dec:	mov	x3, #0x0                   	// #0
    9df0:	mov	x2, #0x0                   	// #0
    9df4:	blr	x9
    9df8:	cmp	w0, #0x1
    9dfc:	b.ne	9f60 <lzma_stream_buffer_encode@@XZ_5.0+0x598>  // b.any
    9e00:	ldr	x0, [x28, #440]
    9e04:	stp	xzr, xzr, [sp, #152]
    9e08:	stp	xzr, xzr, [sp, #168]
    9e0c:	stp	xzr, xzr, [sp, #184]
    9e10:	str	xzr, [sp, #200]
    9e14:	bl	3540 <lzma_index_size@plt>
    9e18:	ldr	w2, [x28, #88]
    9e1c:	mov	x3, x0
    9e20:	ldr	x0, [sp, #128]
    9e24:	mov	x1, x26
    9e28:	str	x3, [sp, #160]
    9e2c:	str	w2, [sp, #168]
    9e30:	bl	3240 <lzma_stream_footer_encode@plt>
    9e34:	cbnz	w0, 9e60 <lzma_stream_buffer_encode@@XZ_5.0+0x498>
    9e38:	mov	w1, #0x5                   	// #5
    9e3c:	str	w1, [x28]
    9e40:	ldr	x0, [x27]
    9e44:	mov	x1, #0xc                   	// #12
    9e48:	str	x1, [x28, #456]
    9e4c:	cmp	x19, x0
    9e50:	b.hi	9d64 <lzma_stream_buffer_encode@@XZ_5.0+0x39c>  // b.pmore
    9e54:	b	9db0 <lzma_stream_buffer_encode@@XZ_5.0+0x3e8>
    9e58:	cmp	w0, #0x5
    9e5c:	b.eq	9d64 <lzma_stream_buffer_encode@@XZ_5.0+0x39c>  // b.none
    9e60:	ldp	x21, x22, [sp, #48]
    9e64:	mov	w0, #0xb                   	// #11
    9e68:	ldp	x23, x24, [sp, #64]
    9e6c:	ldp	x25, x26, [sp, #80]
    9e70:	ldp	x29, x30, [sp, #16]
    9e74:	ldp	x19, x20, [sp, #32]
    9e78:	ldp	x27, x28, [sp, #96]
    9e7c:	add	sp, sp, #0xd0
    9e80:	ret
    9e84:	ldr	w1, [sp, #124]
    9e88:	mov	x7, x19
    9e8c:	ldr	x0, [x28, #8]
    9e90:	mov	x6, x27
    9e94:	ldr	x9, [x28, #32]
    9e98:	mov	x5, x21
    9e9c:	ldr	w1, [x25, w1, uxtw #2]
    9ea0:	mov	x4, x23
    9ea4:	str	w1, [sp]
    9ea8:	mov	x3, x22
    9eac:	mov	x1, x20
    9eb0:	mov	x2, x24
    9eb4:	blr	x9
    9eb8:	cmp	w0, #0x1
    9ebc:	ldr	w1, [sp, #124]
    9ec0:	ccmp	w1, #0x1, #0x4, eq  // eq = none
    9ec4:	b.eq	9f60 <lzma_stream_buffer_encode@@XZ_5.0+0x598>  // b.none
    9ec8:	add	x0, x28, #0x50
    9ecc:	bl	31c0 <lzma_block_unpadded_size@plt>
    9ed0:	mov	x2, x0
    9ed4:	mov	x1, x20
    9ed8:	ldr	x3, [x28, #104]
    9edc:	ldr	x0, [x28, #440]
    9ee0:	bl	3330 <lzma_index_append@plt>
    9ee4:	cbnz	w0, 9f60 <lzma_stream_buffer_encode@@XZ_5.0+0x598>
    9ee8:	ldr	x0, [x27]
    9eec:	mov	w1, #0x1                   	// #1
    9ef0:	str	w1, [x28]
    9ef4:	cmp	x19, x0
    9ef8:	b.ls	9db0 <lzma_stream_buffer_encode@@XZ_5.0+0x3e8>  // b.plast
    9efc:	ldr	x0, [x22]
    9f00:	cmp	x0, x23
    9f04:	b.eq	9f9c <lzma_stream_buffer_encode@@XZ_5.0+0x5d4>  // b.none
    9f08:	ldrb	w0, [x28, #4]
    9f0c:	add	x2, x28, #0x50
    9f10:	cbz	w0, 9f48 <lzma_stream_buffer_encode@@XZ_5.0+0x580>
    9f14:	strb	wzr, [x28, #4]
    9f18:	mov	x0, x2
    9f1c:	mov	x1, x26
    9f20:	bl	3570 <lzma_block_header_encode@plt>
    9f24:	cbnz	w0, 9e60 <lzma_stream_buffer_encode@@XZ_5.0+0x498>
    9f28:	ldr	w1, [x28, #84]
    9f2c:	mov	w2, #0x2                   	// #2
    9f30:	ldr	x0, [x27]
    9f34:	str	w2, [x28]
    9f38:	str	x1, [x28, #456]
    9f3c:	cmp	x19, x0
    9f40:	b.hi	9d64 <lzma_stream_buffer_encode@@XZ_5.0+0x39c>  // b.pmore
    9f44:	b	9db0 <lzma_stream_buffer_encode@@XZ_5.0+0x3e8>
    9f48:	mvni	v0.4s, #0x0
    9f4c:	mov	x0, x2
    9f50:	str	x2, [sp, #136]
    9f54:	str	q0, [x28, #96]
    9f58:	bl	3190 <lzma_block_header_size@plt>
    9f5c:	cbz	w0, 9f80 <lzma_stream_buffer_encode@@XZ_5.0+0x5b8>
    9f60:	ldp	x29, x30, [sp, #16]
    9f64:	ldp	x19, x20, [sp, #32]
    9f68:	ldp	x21, x22, [sp, #48]
    9f6c:	ldp	x23, x24, [sp, #64]
    9f70:	ldp	x25, x26, [sp, #80]
    9f74:	ldp	x27, x28, [sp, #96]
    9f78:	add	sp, sp, #0xd0
    9f7c:	ret
    9f80:	ldr	x2, [sp, #136]
    9f84:	mov	x1, x20
    9f88:	add	x0, x28, #0x8
    9f8c:	bl	82d0 <lzma_block_uncomp_encode@@XZ_5.2+0x600>
    9f90:	ldr	x2, [sp, #136]
    9f94:	cbz	w0, 9f14 <lzma_stream_buffer_encode@@XZ_5.0+0x54c>
    9f98:	b	9f60 <lzma_stream_buffer_encode@@XZ_5.0+0x598>
    9f9c:	ldr	w0, [sp, #124]
    9fa0:	cmp	w0, #0x3
    9fa4:	b.ne	9fe8 <lzma_stream_buffer_encode@@XZ_5.0+0x620>  // b.any
    9fa8:	ldr	x2, [x28, #440]
    9fac:	mov	x1, x20
    9fb0:	add	x0, x28, #0x170
    9fb4:	bl	9488 <lzma_filter_flags_encode@@XZ_5.0+0x380>
    9fb8:	cbnz	w0, 9f60 <lzma_stream_buffer_encode@@XZ_5.0+0x598>
    9fbc:	ldr	x0, [x27]
    9fc0:	mov	w1, #0x4                   	// #4
    9fc4:	str	w1, [x28]
    9fc8:	cmp	x19, x0
    9fcc:	b.hi	9dcc <lzma_stream_buffer_encode@@XZ_5.0+0x404>  // b.pmore
    9fd0:	b	9db0 <lzma_stream_buffer_encode@@XZ_5.0+0x3e8>
    9fd4:	mov	w0, #0x1                   	// #1
    9fd8:	ldp	x21, x22, [sp, #48]
    9fdc:	ldp	x23, x24, [sp, #64]
    9fe0:	ldp	x25, x26, [sp, #80]
    9fe4:	b	9e70 <lzma_stream_buffer_encode@@XZ_5.0+0x4a8>
    9fe8:	cmp	w0, #0x0
    9fec:	cset	w0, ne  // ne = any
    9ff0:	ldp	x21, x22, [sp, #48]
    9ff4:	ldp	x23, x24, [sp, #64]
    9ff8:	ldp	x25, x26, [sp, #80]
    9ffc:	b	9e70 <lzma_stream_buffer_encode@@XZ_5.0+0x4a8>
    a000:	stp	x29, x30, [sp, #-64]!
    a004:	mov	x29, sp
    a008:	stp	x19, x20, [sp, #16]
    a00c:	mov	x19, x0
    a010:	ldr	w0, [x0]
    a014:	stp	x21, x22, [sp, #32]
    a018:	mov	x20, x1
    a01c:	mov	x21, x2
    a020:	cmp	w0, #0x1
    a024:	b.ls	a0a0 <lzma_stream_buffer_encode@@XZ_5.0+0x6d8>  // b.plast
    a028:	cmp	w0, #0x3
    a02c:	b.hi	a08c <lzma_stream_buffer_encode@@XZ_5.0+0x6c4>  // b.pmore
    a030:	ldr	x0, [x19, #8]
    a034:	add	x22, x19, #0x120
    a038:	ldr	x4, [x19, #72]
    a03c:	blr	x4
    a040:	cbnz	w0, a090 <lzma_stream_buffer_encode@@XZ_5.0+0x6c8>
    a044:	ldr	x0, [x19, #288]
    a048:	add	x19, x19, #0x128
    a04c:	cmn	x0, #0x1
    a050:	b.eq	a070 <lzma_stream_buffer_encode@@XZ_5.0+0x6a8>  // b.none
    a054:	nop
    a058:	ldr	x0, [x19], #16
    a05c:	mov	x1, x20
    a060:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a064:	ldur	x0, [x19, #-8]
    a068:	cmn	x0, #0x1
    a06c:	b.ne	a058 <lzma_stream_buffer_encode@@XZ_5.0+0x690>  // b.any
    a070:	mov	x2, x20
    a074:	mov	x1, x22
    a078:	mov	x0, x21
    a07c:	ldp	x19, x20, [sp, #16]
    a080:	ldp	x21, x22, [sp, #32]
    a084:	ldp	x29, x30, [sp], #64
    a088:	b	3270 <lzma_filters_copy@plt>
    a08c:	mov	w0, #0xb                   	// #11
    a090:	ldp	x19, x20, [sp, #16]
    a094:	ldp	x21, x22, [sp, #32]
    a098:	ldp	x29, x30, [sp], #64
    a09c:	ret
    a0a0:	mvni	v0.4s, #0x0
    a0a4:	str	x23, [sp, #48]
    a0a8:	strb	wzr, [x19, #4]
    a0ac:	add	x23, x19, #0x50
    a0b0:	str	x2, [x19, #112]
    a0b4:	add	x22, x19, #0x120
    a0b8:	mov	x0, x23
    a0bc:	str	q0, [x19, #96]
    a0c0:	bl	3190 <lzma_block_header_size@plt>
    a0c4:	cbz	w0, a0d4 <lzma_stream_buffer_encode@@XZ_5.0+0x70c>
    a0c8:	ldr	x23, [sp, #48]
    a0cc:	str	x22, [x19, #112]
    a0d0:	b	a090 <lzma_stream_buffer_encode@@XZ_5.0+0x6c8>
    a0d4:	mov	x2, x23
    a0d8:	mov	x1, x20
    a0dc:	add	x0, x19, #0x8
    a0e0:	bl	82d0 <lzma_block_uncomp_encode@@XZ_5.2+0x600>
    a0e4:	str	x22, [x19, #112]
    a0e8:	cbnz	w0, a10c <lzma_stream_buffer_encode@@XZ_5.0+0x744>
    a0ec:	mov	w0, #0x1                   	// #1
    a0f0:	strb	w0, [x19, #4]
    a0f4:	ldr	x0, [x19, #288]
    a0f8:	add	x19, x19, #0x128
    a0fc:	ldr	x23, [sp, #48]
    a100:	cmn	x0, #0x1
    a104:	b.ne	a058 <lzma_stream_buffer_encode@@XZ_5.0+0x690>  // b.any
    a108:	b	a070 <lzma_stream_buffer_encode@@XZ_5.0+0x6a8>
    a10c:	ldr	x23, [sp, #48]
    a110:	b	a090 <lzma_stream_buffer_encode@@XZ_5.0+0x6c8>
    a114:	nop
    a118:	stp	x29, x30, [sp, #-128]!
    a11c:	mov	x29, sp
    a120:	str	x23, [sp, #48]
    a124:	mov	x23, x2
    a128:	ldr	x2, [x0, #16]
    a12c:	stp	x19, x20, [sp, #16]
    a130:	adrp	x19, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    a134:	stp	x21, x22, [sp, #32]
    a138:	add	x19, x19, #0x118
    a13c:	mov	x20, x0
    a140:	mov	w22, w3
    a144:	mov	x21, x1
    a148:	cmp	x2, x19
    a14c:	b.eq	a154 <lzma_stream_buffer_encode@@XZ_5.0+0x78c>  // b.none
    a150:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    a154:	str	x19, [x20, #16]
    a158:	cbz	x23, a284 <lzma_stream_buffer_encode@@XZ_5.0+0x8bc>
    a15c:	ldr	x19, [x20]
    a160:	cbz	x19, a1f8 <lzma_stream_buffer_encode@@XZ_5.0+0x830>
    a164:	ldr	x0, [x19, #440]
    a168:	mov	x1, x21
    a16c:	str	wzr, [x19]
    a170:	str	wzr, [x19, #80]
    a174:	str	w22, [x19, #88]
    a178:	bl	3410 <lzma_index_end@plt>
    a17c:	mov	x0, x21
    a180:	bl	33e0 <lzma_index_init@plt>
    a184:	str	x0, [x19, #440]
    a188:	cbz	x0, a26c <lzma_stream_buffer_encode@@XZ_5.0+0x8a4>
    a18c:	stp	xzr, xzr, [sp, #88]
    a190:	add	x1, x19, #0x1d0
    a194:	add	x0, sp, #0x48
    a198:	stp	xzr, xzr, [sp, #72]
    a19c:	str	w22, [sp, #88]
    a1a0:	stp	xzr, xzr, [sp, #104]
    a1a4:	str	xzr, [sp, #120]
    a1a8:	bl	33c0 <lzma_stream_header_encode@plt>
    a1ac:	cbz	w0, a1c4 <lzma_stream_buffer_encode@@XZ_5.0+0x7fc>
    a1b0:	ldp	x19, x20, [sp, #16]
    a1b4:	ldp	x21, x22, [sp, #32]
    a1b8:	ldr	x23, [sp, #48]
    a1bc:	ldp	x29, x30, [sp], #128
    a1c0:	ret
    a1c4:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    a1c8:	mov	x2, x23
    a1cc:	mov	x1, x21
    a1d0:	mov	x3, #0x0                   	// #0
    a1d4:	ldr	q0, [x0, #608]
    a1d8:	mov	x0, x19
    a1dc:	str	q0, [x19, #448]
    a1e0:	bl	a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    a1e4:	ldp	x19, x20, [sp, #16]
    a1e8:	ldp	x21, x22, [sp, #32]
    a1ec:	ldr	x23, [sp, #48]
    a1f0:	ldp	x29, x30, [sp], #128
    a1f4:	ret
    a1f8:	mov	x1, x21
    a1fc:	mov	x0, #0x5d0                 	// #1488
    a200:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    a204:	mov	x4, x0
    a208:	cbz	x0, a26c <lzma_stream_buffer_encode@@XZ_5.0+0x8a4>
    a20c:	mov	x1, #0xffffffffffffffff    	// #-1
    a210:	mov	x19, x0
    a214:	adrp	x5, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    a218:	adrp	x3, 9000 <lzma_properties_encode@@XZ_5.0+0x58>
    a21c:	add	x5, x5, #0xce0
    a220:	add	x3, x3, #0xc68
    a224:	adrp	x2, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    a228:	mov	x0, #0x0                   	// #0
    a22c:	add	x2, x2, #0x0
    a230:	str	x4, [x20]
    a234:	stp	xzr, x1, [x4, #8]
    a238:	stp	xzr, xzr, [x4, #24]
    a23c:	stp	x5, x3, [x20, #24]
    a240:	stp	xzr, xzr, [x4, #40]
    a244:	stp	xzr, xzr, [x4, #56]
    a248:	str	x2, [x20, #64]
    a24c:	str	xzr, [x4, #72]
    a250:	str	x1, [x4, #288]
    a254:	stp	xzr, x1, [x4, #368]
    a258:	stp	xzr, xzr, [x4, #384]
    a25c:	stp	xzr, xzr, [x4, #400]
    a260:	stp	xzr, xzr, [x4, #416]
    a264:	stp	xzr, xzr, [x4, #432]
    a268:	b	a168 <lzma_stream_buffer_encode@@XZ_5.0+0x7a0>
    a26c:	mov	w0, #0x5                   	// #5
    a270:	ldp	x19, x20, [sp, #16]
    a274:	ldp	x21, x22, [sp, #32]
    a278:	ldr	x23, [sp, #48]
    a27c:	ldp	x29, x30, [sp], #128
    a280:	ret
    a284:	mov	w0, #0xb                   	// #11
    a288:	ldp	x19, x20, [sp, #16]
    a28c:	ldp	x21, x22, [sp, #32]
    a290:	ldr	x23, [sp, #48]
    a294:	ldp	x29, x30, [sp], #128
    a298:	ret
    a29c:	nop

000000000000a2a0 <lzma_stream_encoder@@XZ_5.0>:
    a2a0:	stp	x29, x30, [sp, #-48]!
    a2a4:	mov	x29, sp
    a2a8:	stp	x19, x20, [sp, #16]
    a2ac:	mov	x20, x0
    a2b0:	stp	x21, x22, [sp, #32]
    a2b4:	mov	x21, x1
    a2b8:	mov	w22, w2
    a2bc:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    a2c0:	mov	w19, w0
    a2c4:	cbz	w0, a2dc <lzma_stream_encoder@@XZ_5.0+0x3c>
    a2c8:	mov	w0, w19
    a2cc:	ldp	x19, x20, [sp, #16]
    a2d0:	ldp	x21, x22, [sp, #32]
    a2d4:	ldp	x29, x30, [sp], #48
    a2d8:	ret
    a2dc:	ldp	x1, x0, [x20, #48]
    a2e0:	mov	w3, w22
    a2e4:	mov	x2, x21
    a2e8:	bl	a118 <lzma_stream_buffer_encode@@XZ_5.0+0x750>
    a2ec:	mov	w19, w0
    a2f0:	cbnz	w0, a31c <lzma_stream_encoder@@XZ_5.0+0x7c>
    a2f4:	ldr	x0, [x20, #56]
    a2f8:	mov	w2, #0x1010101             	// #16843009
    a2fc:	mov	w1, #0x1                   	// #1
    a300:	ldp	x21, x22, [sp, #32]
    a304:	str	w2, [x0, #88]
    a308:	strb	w1, [x0, #92]
    a30c:	mov	w0, w19
    a310:	ldp	x19, x20, [sp, #16]
    a314:	ldp	x29, x30, [sp], #48
    a318:	ret
    a31c:	mov	x0, x20
    a320:	bl	3350 <lzma_end@plt>
    a324:	b	a2c8 <lzma_stream_encoder@@XZ_5.0+0x28>

000000000000a328 <lzma_stream_header_encode@@XZ_5.0>:
    a328:	stp	x29, x30, [sp, #-32]!
    a32c:	mov	x29, sp
    a330:	stp	x19, x20, [sp, #16]
    a334:	ldr	w20, [x0]
    a338:	cbnz	w20, a3ac <lzma_stream_header_encode@@XZ_5.0+0x84>
    a33c:	mov	x3, x0
    a340:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    a344:	mov	x19, x1
    a348:	ldr	x0, [x0, #3920]
    a34c:	ldr	w1, [x0]
    a350:	ldrh	w0, [x0, #4]
    a354:	str	w1, [x19]
    a358:	strh	w0, [x19, #4]
    a35c:	ldr	w0, [x3, #16]
    a360:	cmp	w0, #0xf
    a364:	b.hi	a398 <lzma_stream_header_encode@@XZ_5.0+0x70>  // b.pmore
    a368:	strb	wzr, [x19, #6]
    a36c:	add	x0, x19, #0x6
    a370:	mov	w2, #0x0                   	// #0
    a374:	mov	x1, #0x2                   	// #2
    a378:	ldr	w3, [x3, #16]
    a37c:	strb	w3, [x19, #7]
    a380:	bl	31f0 <lzma_crc32@plt>
    a384:	str	w0, [x19, #8]
    a388:	mov	w0, w20
    a38c:	ldp	x19, x20, [sp, #16]
    a390:	ldp	x29, x30, [sp], #32
    a394:	ret
    a398:	mov	w20, #0xb                   	// #11
    a39c:	mov	w0, w20
    a3a0:	ldp	x19, x20, [sp, #16]
    a3a4:	ldp	x29, x30, [sp], #32
    a3a8:	ret
    a3ac:	mov	w20, #0x8                   	// #8
    a3b0:	mov	w0, w20
    a3b4:	ldp	x19, x20, [sp, #16]
    a3b8:	ldp	x29, x30, [sp], #32
    a3bc:	ret

000000000000a3c0 <lzma_stream_footer_encode@@XZ_5.0>:
    a3c0:	stp	x29, x30, [sp, #-32]!
    a3c4:	mov	x29, sp
    a3c8:	stp	x19, x20, [sp, #16]
    a3cc:	ldr	w20, [x0]
    a3d0:	cbnz	w20, a464 <lzma_stream_footer_encode@@XZ_5.0+0xa4>
    a3d4:	mov	x3, x0
    a3d8:	mov	x19, x1
    a3dc:	ldr	x0, [x0, #8]
    a3e0:	mov	x1, #0x3fffffffc           	// #17179869180
    a3e4:	sub	x2, x0, #0x4
    a3e8:	cmp	x2, x1
    a3ec:	b.ls	a404 <lzma_stream_footer_encode@@XZ_5.0+0x44>  // b.plast
    a3f0:	mov	w20, #0xb                   	// #11
    a3f4:	mov	w0, w20
    a3f8:	ldp	x19, x20, [sp, #16]
    a3fc:	ldp	x29, x30, [sp], #32
    a400:	ret
    a404:	tst	x0, #0x3
    a408:	b.ne	a3f0 <lzma_stream_footer_encode@@XZ_5.0+0x30>  // b.any
    a40c:	lsr	x0, x0, #2
    a410:	sub	w0, w0, #0x1
    a414:	str	w0, [x19, #4]
    a418:	ldr	w0, [x3, #16]
    a41c:	cmp	w0, #0xf
    a420:	b.hi	a3f0 <lzma_stream_footer_encode@@XZ_5.0+0x30>  // b.pmore
    a424:	strb	wzr, [x19, #8]
    a428:	add	x0, x19, #0x4
    a42c:	mov	w2, #0x0                   	// #0
    a430:	mov	x1, #0x6                   	// #6
    a434:	ldr	w3, [x3, #16]
    a438:	strb	w3, [x19, #9]
    a43c:	bl	31f0 <lzma_crc32@plt>
    a440:	str	w0, [x19]
    a444:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    a448:	ldr	x1, [x1, #3968]
    a44c:	ldrh	w0, [x1]
    a450:	strh	w0, [x19, #10]
    a454:	mov	w0, w20
    a458:	ldp	x19, x20, [sp, #16]
    a45c:	ldp	x29, x30, [sp], #32
    a460:	ret
    a464:	mov	w20, #0x8                   	// #8
    a468:	mov	w0, w20
    a46c:	ldp	x19, x20, [sp, #16]
    a470:	ldp	x29, x30, [sp], #32
    a474:	ret

000000000000a478 <lzma_vli_encode@@XZ_5.0>:
    a478:	sub	sp, sp, #0x10
    a47c:	mov	x6, x0
    a480:	ldr	x7, [x3]
    a484:	str	xzr, [sp, #8]
    a488:	cmp	x4, x7
    a48c:	cbz	x1, a538 <lzma_vli_encode@@XZ_5.0+0xc0>
    a490:	mov	w0, #0xa                   	// #10
    a494:	b.ls	a514 <lzma_vli_encode@@XZ_5.0+0x9c>  // b.plast
    a498:	ldr	x8, [x1]
    a49c:	cmp	x8, #0x8
    a4a0:	b.hi	a52c <lzma_vli_encode@@XZ_5.0+0xb4>  // b.pmore
    a4a4:	tbnz	x6, #63, a52c <lzma_vli_encode@@XZ_5.0+0xb4>
    a4a8:	lsl	w0, w8, #3
    a4ac:	mov	x5, x7
    a4b0:	sub	w0, w0, w8
    a4b4:	mov	x9, #0x1                   	// #1
    a4b8:	add	x7, x2, x7
    a4bc:	sub	x9, x9, x5
    a4c0:	lsr	x0, x6, x0
    a4c4:	b	a4e4 <lzma_vli_encode@@XZ_5.0+0x6c>
    a4c8:	str	x2, [x1]
    a4cc:	orr	w6, w6, #0xffffff80
    a4d0:	str	x5, [x3]
    a4d4:	lsr	x0, x0, #7
    a4d8:	strb	w6, [x7], #1
    a4dc:	cmp	x4, x5
    a4e0:	b.eq	a51c <lzma_vli_encode@@XZ_5.0+0xa4>  // b.none
    a4e4:	add	x2, x5, x8
    a4e8:	cmp	x0, #0x7f
    a4ec:	add	x2, x9, x2
    a4f0:	add	x5, x5, #0x1
    a4f4:	and	w6, w0, #0xff
    a4f8:	b.hi	a4c8 <lzma_vli_encode@@XZ_5.0+0x50>  // b.pmore
    a4fc:	add	x0, sp, #0x8
    a500:	strb	w6, [x7]
    a504:	cmp	x1, x0
    a508:	str	x2, [x1]
    a50c:	cset	w0, ne  // ne = any
    a510:	str	x5, [x3]
    a514:	add	sp, sp, #0x10
    a518:	ret
    a51c:	add	x2, sp, #0x8
    a520:	mov	w0, #0x0                   	// #0
    a524:	cmp	x1, x2
    a528:	b.ne	a514 <lzma_vli_encode@@XZ_5.0+0x9c>  // b.any
    a52c:	mov	w0, #0xb                   	// #11
    a530:	add	sp, sp, #0x10
    a534:	ret
    a538:	b.ls	a52c <lzma_vli_encode@@XZ_5.0+0xb4>  // b.plast
    a53c:	add	x1, sp, #0x8
    a540:	mov	x8, #0x0                   	// #0
    a544:	b	a4a4 <lzma_vli_encode@@XZ_5.0+0x2c>
    a548:	add	x3, x0, #0x28
    a54c:	cmp	w1, #0x4, lsl #12
    a550:	lsl	w1, w1, #1
    a554:	mov	x2, #0xffffffffffff        	// #281474976710655
    a558:	ccmp	x0, x2, #0x2, ls  // ls = plast
    a55c:	mov	x2, #0xffffffffffffffff    	// #-1
    a560:	mul	x0, x1, x3
    a564:	add	x0, x0, #0x30
    a568:	csel	x0, x0, x2, ls  // ls = plast
    a56c:	ret
    a570:	stp	x29, x30, [sp, #-48]!
    a574:	cmp	w3, #0x4, lsl #12
    a578:	mov	x29, sp
    a57c:	stp	x19, x20, [sp, #16]
    a580:	mov	x19, x0
    a584:	mov	x0, #0xffffffffffff        	// #281474976710655
    a588:	ccmp	x2, x0, #0x2, ls  // ls = plast
    a58c:	mov	w0, #0x8                   	// #8
    a590:	b.hi	a62c <lzma_vli_encode@@XZ_5.0+0x1b4>  // b.pmore
    a594:	ldr	x0, [x19, #16]
    a598:	stp	x21, x22, [sp, #32]
    a59c:	lsl	w20, w3, #1
    a5a0:	mov	x21, x2
    a5a4:	mov	x22, x1
    a5a8:	cmp	x0, x2
    a5ac:	b.ne	a5bc <lzma_vli_encode@@XZ_5.0+0x144>  // b.any
    a5b0:	ldr	w0, [x19, #24]
    a5b4:	cmp	w0, w20
    a5b8:	b.eq	a614 <lzma_vli_encode@@XZ_5.0+0x19c>  // b.none
    a5bc:	ldr	x0, [x19]
    a5c0:	mov	x1, x22
    a5c4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a5c8:	str	xzr, [x19]
    a5cc:	ldr	x0, [x19, #8]
    a5d0:	mov	x1, x22
    a5d4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a5d8:	str	xzr, [x19, #8]
    a5dc:	mov	w0, #0x28                  	// #40
    a5e0:	mov	x1, x22
    a5e4:	umull	x0, w20, w0
    a5e8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    a5ec:	str	x0, [x19]
    a5f0:	mov	w2, w20
    a5f4:	mov	x1, x22
    a5f8:	mul	x0, x2, x21
    a5fc:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    a600:	str	x0, [x19, #8]
    a604:	ldr	x1, [x19]
    a608:	cmp	x0, #0x0
    a60c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    a610:	b.eq	a638 <lzma_vli_encode@@XZ_5.0+0x1c0>  // b.none
    a614:	str	x21, [x19, #16]
    a618:	mov	w0, #0x0                   	// #0
    a61c:	ldp	x21, x22, [sp, #32]
    a620:	str	w20, [x19, #24]
    a624:	stur	xzr, [x19, #28]
    a628:	str	xzr, [x19, #40]
    a62c:	ldp	x19, x20, [sp, #16]
    a630:	ldp	x29, x30, [sp], #48
    a634:	ret
    a638:	mov	x0, x1
    a63c:	mov	x1, x22
    a640:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a644:	str	xzr, [x19]
    a648:	ldr	x0, [x19, #8]
    a64c:	mov	x1, x22
    a650:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a654:	mov	w0, #0x5                   	// #5
    a658:	ldp	x21, x22, [sp, #32]
    a65c:	str	xzr, [x19, #8]
    a660:	b	a62c <lzma_vli_encode@@XZ_5.0+0x1b4>
    a664:	nop
    a668:	stp	x29, x30, [sp, #-32]!
    a66c:	mov	x29, sp
    a670:	stp	x19, x20, [sp, #16]
    a674:	mov	x19, x0
    a678:	mov	x20, x1
    a67c:	ldr	x0, [x0]
    a680:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a684:	str	xzr, [x19]
    a688:	ldr	x0, [x19, #8]
    a68c:	mov	x1, x20
    a690:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a694:	str	xzr, [x19, #8]
    a698:	ldp	x19, x20, [sp, #16]
    a69c:	ldp	x29, x30, [sp], #32
    a6a0:	ret
    a6a4:	nop
    a6a8:	ldp	w7, w2, [x0, #24]
    a6ac:	mov	w3, #0x28                  	// #40
    a6b0:	ldp	x6, x8, [x0]
    a6b4:	mov	w5, w2
    a6b8:	ldr	x9, [x0, #16]
    a6bc:	umull	x3, w2, w3
    a6c0:	ldr	w4, [x0, #32]
    a6c4:	mov	x1, x0
    a6c8:	add	w2, w2, #0x1
    a6cc:	add	x0, x6, x3
    a6d0:	madd	x5, x5, x9, x8
    a6d4:	str	x5, [x6, x3]
    a6d8:	cmp	w2, w7
    a6dc:	csel	w2, w2, wzr, ne  // ne = any
    a6e0:	add	w3, w4, #0x1
    a6e4:	str	xzr, [x0, #8]
    a6e8:	strb	wzr, [x0, #32]
    a6ec:	stp	w2, w3, [x1, #28]
    a6f0:	ret
    a6f4:	nop
    a6f8:	ldp	w1, w2, [x0, #28]
    a6fc:	subs	w1, w1, w2
    a700:	b.cs	a70c <lzma_vli_encode@@XZ_5.0+0x294>  // b.hs, b.nlast
    a704:	ldr	w2, [x0, #24]
    a708:	add	w1, w1, w2
    a70c:	ldr	x0, [x0]
    a710:	mov	w2, #0x28                  	// #40
    a714:	umaddl	x1, w1, w2, x0
    a718:	ldrb	w0, [x1, #32]
    a71c:	ret
    a720:	ldr	w7, [x0, #32]
    a724:	cbz	w7, a7ec <lzma_vli_encode@@XZ_5.0+0x374>
    a728:	stp	x29, x30, [sp, #-48]!
    a72c:	mov	x6, x2
    a730:	mov	x29, sp
    a734:	stp	x19, x20, [sp, #16]
    a738:	mov	x19, x0
    a73c:	ldr	w0, [x0, #28]
    a740:	stp	x21, x22, [sp, #32]
    a744:	mov	x20, x4
    a748:	cmp	w7, w0
    a74c:	mov	x22, x5
    a750:	sub	w0, w0, w7
    a754:	b.ls	a760 <lzma_vli_encode@@XZ_5.0+0x2e8>  // b.plast
    a758:	ldr	w2, [x19, #24]
    a75c:	add	w0, w0, w2
    a760:	mov	w4, #0x28                  	// #40
    a764:	ldr	x2, [x19]
    a768:	umull	x0, w0, w4
    a76c:	add	x21, x2, x0
    a770:	ldrb	w4, [x21, #32]
    a774:	cbnz	w4, a78c <lzma_vli_encode@@XZ_5.0+0x314>
    a778:	mov	w0, #0x0                   	// #0
    a77c:	ldp	x19, x20, [sp, #16]
    a780:	ldp	x21, x22, [sp, #32]
    a784:	ldp	x29, x30, [sp], #48
    a788:	ret
    a78c:	ldr	x0, [x2, x0]
    a790:	mov	x5, x3
    a794:	ldr	x2, [x21, #8]
    a798:	mov	x3, x1
    a79c:	mov	x4, x6
    a7a0:	add	x1, x19, #0x28
    a7a4:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    a7a8:	ldr	x0, [x21, #8]
    a7ac:	ldr	x1, [x19, #40]
    a7b0:	cmp	x1, x0
    a7b4:	b.cc	a778 <lzma_vli_encode@@XZ_5.0+0x300>  // b.lo, b.ul, b.last
    a7b8:	ldr	x0, [x21, #16]
    a7bc:	str	x0, [x20]
    a7c0:	ldr	w1, [x19, #32]
    a7c4:	mov	w0, #0x1                   	// #1
    a7c8:	ldr	x2, [x21, #24]
    a7cc:	sub	w1, w1, #0x1
    a7d0:	str	x2, [x22]
    a7d4:	str	w1, [x19, #32]
    a7d8:	str	xzr, [x19, #40]
    a7dc:	ldp	x19, x20, [sp, #16]
    a7e0:	ldp	x21, x22, [sp, #32]
    a7e4:	ldp	x29, x30, [sp], #48
    a7e8:	ret
    a7ec:	mov	w0, #0x0                   	// #0
    a7f0:	ret
    a7f4:	nop
    a7f8:	stp	x29, x30, [sp, #-64]!
    a7fc:	mov	x29, sp
    a800:	stp	x19, x20, [sp, #16]
    a804:	mov	x19, x0
    a808:	mov	x20, x1
    a80c:	stp	x23, x24, [sp, #48]
    a810:	add	x24, x0, #0x168
    a814:	mov	x0, x24
    a818:	stp	x21, x22, [sp, #32]
    a81c:	mov	x21, x2
    a820:	bl	3560 <pthread_mutex_lock@plt>
    a824:	ldr	x1, [x19, #344]
    a828:	ldr	w0, [x19, #324]
    a82c:	str	x1, [x20]
    a830:	ldr	x1, [x19, #352]
    a834:	str	x1, [x21]
    a838:	cbz	w0, a898 <lzma_vli_encode@@XZ_5.0+0x420>
    a83c:	mov	x22, #0x0                   	// #0
    a840:	mov	x23, #0x0                   	// #0
    a844:	ldr	x0, [x19, #312]
    a848:	add	x23, x23, #0x1
    a84c:	add	x0, x0, x22
    a850:	add	x0, x0, #0x160
    a854:	bl	3560 <pthread_mutex_lock@plt>
    a858:	ldr	x1, [x19, #312]
    a85c:	ldr	x2, [x20]
    a860:	add	x1, x1, x22
    a864:	add	x0, x1, #0x160
    a868:	add	x22, x22, #0x1d0
    a86c:	ldr	x3, [x1, #48]
    a870:	add	x2, x2, x3
    a874:	str	x2, [x20]
    a878:	ldr	x2, [x21]
    a87c:	ldr	x1, [x1, #56]
    a880:	add	x1, x2, x1
    a884:	str	x1, [x21]
    a888:	bl	3580 <pthread_mutex_unlock@plt>
    a88c:	ldr	w0, [x19, #324]
    a890:	cmp	x0, x23
    a894:	b.hi	a844 <lzma_vli_encode@@XZ_5.0+0x3cc>  // b.pmore
    a898:	mov	x0, x24
    a89c:	ldp	x19, x20, [sp, #16]
    a8a0:	ldp	x21, x22, [sp, #32]
    a8a4:	ldp	x23, x24, [sp, #48]
    a8a8:	ldp	x29, x30, [sp], #64
    a8ac:	b	3580 <pthread_mutex_unlock@plt>
    a8b0:	stp	x29, x30, [sp, #-336]!
    a8b4:	mov	x29, sp
    a8b8:	stp	x21, x22, [sp, #32]
    a8bc:	mov	x21, x2
    a8c0:	mov	x22, x0
    a8c4:	ldr	x2, [x0, #16]
    a8c8:	stp	x19, x20, [sp, #16]
    a8cc:	adrp	x19, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    a8d0:	stp	x23, x24, [sp, #48]
    a8d4:	add	x19, x19, #0x8b0
    a8d8:	mov	x23, x1
    a8dc:	cmp	x2, x19
    a8e0:	b.eq	a8e8 <lzma_vli_encode@@XZ_5.0+0x470>  // b.none
    a8e4:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    a8e8:	str	x19, [x22, #16]
    a8ec:	cbz	x21, aad0 <lzma_vli_encode@@XZ_5.0+0x658>
    a8f0:	ldr	w20, [x21]
    a8f4:	cbnz	w20, aa9c <lzma_vli_encode@@XZ_5.0+0x624>
    a8f8:	ldr	w0, [x21, #4]
    a8fc:	mov	w1, #0x3fff                	// #16383
    a900:	sub	w0, w0, #0x1
    a904:	cmp	w0, w1
    a908:	b.hi	aa9c <lzma_vli_encode@@XZ_5.0+0x624>  // b.pmore
    a90c:	ldr	x24, [x21, #24]
    a910:	cbz	x24, ab00 <lzma_vli_encode@@XZ_5.0+0x688>
    a914:	stp	x25, x26, [sp, #64]
    a918:	ldr	x26, [x21, #8]
    a91c:	cbz	x26, aa84 <lzma_vli_encode@@XZ_5.0+0x60c>
    a920:	mov	x0, #0x3ffffffffffff       	// #1125899906842623
    a924:	cmp	x26, x0
    a928:	b.hi	aa98 <lzma_vli_encode@@XZ_5.0+0x620>  // b.pmore
    a92c:	mov	x0, x26
    a930:	bl	7748 <lzma_alone_encoder@@XZ_5.0+0x80>
    a934:	mov	x25, x0
    a938:	cbz	x0, aaf4 <lzma_vli_encode@@XZ_5.0+0x67c>
    a93c:	mov	x0, x24
    a940:	bl	3250 <lzma_raw_encoder_memusage@plt>
    a944:	cmn	x0, #0x1
    a948:	b.eq	aa98 <lzma_vli_encode@@XZ_5.0+0x620>  // b.none
    a94c:	ldr	w0, [x21, #32]
    a950:	cmp	w0, #0xf
    a954:	b.hi	aacc <lzma_vli_encode@@XZ_5.0+0x654>  // b.pmore
    a958:	bl	3110 <lzma_check_is_supported@plt>
    a95c:	mov	w1, w0
    a960:	tst	w1, #0xff
    a964:	mov	w0, #0x3                   	// #3
    a968:	b.eq	aab4 <lzma_vli_encode@@XZ_5.0+0x63c>  // b.none
    a96c:	ldr	x19, [x22]
    a970:	cbz	x19, abac <lzma_vli_encode@@XZ_5.0+0x734>
    a974:	ldr	w3, [x21, #4]
    a978:	ldr	w2, [x19, #320]
    a97c:	str	wzr, [x19]
    a980:	str	x26, [x19, #8]
    a984:	cmp	w3, w2
    a988:	str	wzr, [x19, #308]
    a98c:	str	xzr, [x19, #336]
    a990:	ldr	w1, [x19, #324]
    a994:	b.eq	aae8 <lzma_vli_encode@@XZ_5.0+0x670>  // b.none
    a998:	cbnz	w1, ab1c <lzma_vli_encode@@XZ_5.0+0x6a4>
    a99c:	ldr	x0, [x19, #312]
    a9a0:	mov	x1, x23
    a9a4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    a9a8:	str	xzr, [x19, #320]
    a9ac:	mov	w0, #0x1d0                 	// #464
    a9b0:	mov	x1, x23
    a9b4:	ldr	w2, [x21, #4]
    a9b8:	str	xzr, [x19, #312]
    a9bc:	str	xzr, [x19, #328]
    a9c0:	umull	x0, w2, w0
    a9c4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    a9c8:	str	x0, [x19, #312]
    a9cc:	cbz	x0, aaf4 <lzma_vli_encode@@XZ_5.0+0x67c>
    a9d0:	ldr	w3, [x21, #4]
    a9d4:	add	x0, x19, #0x100
    a9d8:	str	w3, [x19, #320]
    a9dc:	mov	x2, x25
    a9e0:	mov	x1, x23
    a9e4:	bl	a570 <lzma_vli_encode@@XZ_5.0+0xf8>
    a9e8:	cbnz	w0, aab4 <lzma_vli_encode@@XZ_5.0+0x63c>
    a9ec:	ldr	w1, [x21, #16]
    a9f0:	add	x20, x19, #0x18
    a9f4:	ldr	x0, [x19, #16]
    a9f8:	str	w1, [x19, #304]
    a9fc:	cmn	x0, #0x1
    aa00:	b.eq	aa1c <lzma_vli_encode@@XZ_5.0+0x5a4>  // b.none
    aa04:	ldr	x0, [x20], #16
    aa08:	mov	x1, x23
    aa0c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    aa10:	ldur	x0, [x20, #-8]
    aa14:	cmn	x0, #0x1
    aa18:	b.ne	aa04 <lzma_vli_encode@@XZ_5.0+0x58c>  // b.any
    aa1c:	mov	x0, x24
    aa20:	mov	x2, x23
    aa24:	add	x1, x19, #0x10
    aa28:	bl	3270 <lzma_filters_copy@plt>
    aa2c:	cbnz	w0, aab4 <lzma_vli_encode@@XZ_5.0+0x63c>
    aa30:	ldr	x0, [x19, #96]
    aa34:	mov	x1, x23
    aa38:	bl	3410 <lzma_index_end@plt>
    aa3c:	mov	x0, x23
    aa40:	bl	33e0 <lzma_index_init@plt>
    aa44:	str	x0, [x19, #96]
    aa48:	cbz	x0, aaf4 <lzma_vli_encode@@XZ_5.0+0x67c>
    aa4c:	ldr	w2, [x21, #32]
    aa50:	add	x1, x19, #0xe8
    aa54:	str	wzr, [x19, #176]
    aa58:	add	x0, x19, #0xb0
    aa5c:	str	w2, [x19, #192]
    aa60:	bl	33c0 <lzma_stream_header_encode@plt>
    aa64:	cbnz	w0, aab4 <lzma_vli_encode@@XZ_5.0+0x63c>
    aa68:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    aa6c:	ldp	x25, x26, [sp, #64]
    aa70:	str	xzr, [x19, #248]
    aa74:	ldr	q0, [x1, #608]
    aa78:	add	x1, x19, #0x200
    aa7c:	stur	q0, [x1, #-168]
    aa80:	b	aaa0 <lzma_vli_encode@@XZ_5.0+0x628>
    aa84:	mov	x0, x24
    aa88:	bl	8de0 <lzma_filters_update@@XZ_5.0+0x110>
    aa8c:	mov	x26, x0
    aa90:	cbnz	x0, a92c <lzma_vli_encode@@XZ_5.0+0x4b4>
    aa94:	nop
    aa98:	ldp	x25, x26, [sp, #64]
    aa9c:	mov	w0, #0x8                   	// #8
    aaa0:	ldp	x19, x20, [sp, #16]
    aaa4:	ldp	x21, x22, [sp, #32]
    aaa8:	ldp	x23, x24, [sp, #48]
    aaac:	ldp	x29, x30, [sp], #336
    aab0:	ret
    aab4:	ldp	x19, x20, [sp, #16]
    aab8:	ldp	x21, x22, [sp, #32]
    aabc:	ldp	x23, x24, [sp, #48]
    aac0:	ldp	x25, x26, [sp, #64]
    aac4:	ldp	x29, x30, [sp], #336
    aac8:	ret
    aacc:	ldp	x25, x26, [sp, #64]
    aad0:	mov	w0, #0xb                   	// #11
    aad4:	ldp	x19, x20, [sp, #16]
    aad8:	ldp	x21, x22, [sp, #32]
    aadc:	ldp	x23, x24, [sp, #48]
    aae0:	ldp	x29, x30, [sp], #336
    aae4:	ret
    aae8:	cbnz	w1, acb0 <lzma_vli_encode@@XZ_5.0+0x838>
    aaec:	add	x0, x19, #0x100
    aaf0:	b	a9dc <lzma_vli_encode@@XZ_5.0+0x564>
    aaf4:	mov	w0, #0x5                   	// #5
    aaf8:	ldp	x25, x26, [sp, #64]
    aafc:	b	aaa0 <lzma_vli_encode@@XZ_5.0+0x628>
    ab00:	ldr	w1, [x21, #20]
    ab04:	add	x24, sp, #0x90
    ab08:	mov	x0, x24
    ab0c:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    ab10:	tst	w0, #0xff
    ab14:	b.eq	a914 <lzma_vli_encode@@XZ_5.0+0x49c>  // b.none
    ab18:	b	aa9c <lzma_vli_encode@@XZ_5.0+0x624>
    ab1c:	mov	w26, #0x0                   	// #0
    ab20:	stp	x27, x28, [sp, #80]
    ab24:	mov	w28, #0x1d0                 	// #464
    ab28:	mov	w27, #0x4                   	// #4
    ab2c:	ldr	x0, [x19, #312]
    ab30:	umull	x22, w26, w28
    ab34:	add	w26, w26, #0x1
    ab38:	add	x0, x0, x22
    ab3c:	add	x0, x0, #0x160
    ab40:	bl	3560 <pthread_mutex_lock@plt>
    ab44:	ldr	x1, [x19, #312]
    ab48:	add	x0, x1, x22
    ab4c:	str	w27, [x1, x22]
    ab50:	add	x0, x0, #0x190
    ab54:	bl	3230 <pthread_cond_signal@plt>
    ab58:	ldr	x0, [x19, #312]
    ab5c:	add	x0, x0, x22
    ab60:	add	x0, x0, #0x160
    ab64:	bl	3580 <pthread_mutex_unlock@plt>
    ab68:	ldr	w0, [x19, #324]
    ab6c:	cmp	w26, w0
    ab70:	b.cc	ab2c <lzma_vli_encode@@XZ_5.0+0x6b4>  // b.lo, b.ul, b.last
    ab74:	cbz	w0, aba4 <lzma_vli_encode@@XZ_5.0+0x72c>
    ab78:	mov	w22, #0x1d0                 	// #464
    ab7c:	nop
    ab80:	ldr	x0, [x19, #312]
    ab84:	mov	x1, #0x0                   	// #0
    ab88:	umaddl	x0, w20, w22, x0
    ab8c:	add	w20, w20, #0x1
    ab90:	ldr	x0, [x0, #456]
    ab94:	bl	3300 <pthread_join@plt>
    ab98:	ldr	w0, [x19, #324]
    ab9c:	cmp	w20, w0
    aba0:	b.cc	ab80 <lzma_vli_encode@@XZ_5.0+0x708>  // b.lo, b.ul, b.last
    aba4:	ldp	x27, x28, [sp, #80]
    aba8:	b	a99c <lzma_vli_encode@@XZ_5.0+0x524>
    abac:	mov	x1, x23
    abb0:	mov	x0, #0x1d0                 	// #464
    abb4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    abb8:	mov	x19, x0
    abbc:	cbz	x0, aaf4 <lzma_vli_encode@@XZ_5.0+0x67c>
    abc0:	stp	x27, x28, [sp, #80]
    abc4:	add	x27, x0, #0x168
    abc8:	mov	x0, x27
    abcc:	str	x19, [x22]
    abd0:	mov	x1, #0x0                   	// #0
    abd4:	bl	32d0 <pthread_mutex_init@plt>
    abd8:	cbnz	w0, ac90 <lzma_vli_encode@@XZ_5.0+0x818>
    abdc:	add	x1, sp, #0x80
    abe0:	add	x20, x19, #0x198
    abe4:	mov	w0, #0x1                   	// #1
    abe8:	bl	3180 <clock_gettime@plt>
    abec:	cbnz	w0, ac00 <lzma_vli_encode@@XZ_5.0+0x788>
    abf0:	add	x28, sp, #0x78
    abf4:	mov	x0, x28
    abf8:	bl	3400 <pthread_condattr_init@plt>
    abfc:	cbz	w0, ad7c <lzma_vli_encode@@XZ_5.0+0x904>
    ac00:	str	wzr, [x20, #48]
    ac04:	mov	x0, x20
    ac08:	mov	x1, #0x0                   	// #0
    ac0c:	bl	3450 <pthread_cond_init@plt>
    ac10:	cbnz	w0, ac88 <lzma_vli_encode@@XZ_5.0+0x810>
    ac14:	add	x0, x19, #0x100
    ac18:	mov	x1, #0xffffffffffffffff    	// #-1
    ac1c:	str	x1, [x19, #16]
    ac20:	adrp	x4, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    ac24:	stp	xzr, xzr, [x19, #96]
    ac28:	add	x4, x4, #0xf00
    ac2c:	ldr	w3, [x21, #4]
    ac30:	stp	x1, xzr, [x19, #112]
    ac34:	adrp	x2, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    ac38:	adrp	x1, a000 <lzma_stream_buffer_encode@@XZ_5.0+0x638>
    ac3c:	stp	xzr, xzr, [x19, #128]
    ac40:	add	x2, x2, #0xdc8
    ac44:	add	x1, x1, #0x7f8
    ac48:	stp	xzr, xzr, [x19, #144]
    ac4c:	stp	xzr, xzr, [x19, #160]
    ac50:	stp	xzr, xzr, [x19, #256]
    ac54:	stp	xzr, xzr, [x0, #16]
    ac58:	stp	xzr, xzr, [x0, #32]
    ac5c:	str	xzr, [x19, #320]
    ac60:	ldp	x27, x28, [sp, #80]
    ac64:	str	wzr, [x19]
    ac68:	str	x26, [x19, #8]
    ac6c:	stp	x4, x2, [x22, #24]
    ac70:	str	x1, [x22, #40]
    ac74:	str	wzr, [x19, #308]
    ac78:	str	xzr, [x19, #312]
    ac7c:	str	xzr, [x19, #336]
    ac80:	cbnz	w3, a99c <lzma_vli_encode@@XZ_5.0+0x524>
    ac84:	b	a9dc <lzma_vli_encode@@XZ_5.0+0x564>
    ac88:	mov	x0, x27
    ac8c:	bl	3440 <pthread_mutex_destroy@plt>
    ac90:	mov	x0, x19
    ac94:	mov	x1, x23
    ac98:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    ac9c:	mov	w0, #0x5                   	// #5
    aca0:	ldp	x25, x26, [sp, #64]
    aca4:	ldp	x27, x28, [sp, #80]
    aca8:	str	xzr, [x22]
    acac:	b	aaa0 <lzma_vli_encode@@XZ_5.0+0x628>
    acb0:	mov	w22, w0
    acb4:	stp	x27, x28, [sp, #80]
    acb8:	mov	w27, #0x0                   	// #0
    acbc:	mov	w28, #0x1d0                 	// #464
    acc0:	ldr	x0, [x19, #312]
    acc4:	umull	x26, w27, w28
    acc8:	add	w27, w27, #0x1
    accc:	add	x0, x0, x26
    acd0:	add	x0, x0, #0x160
    acd4:	bl	3560 <pthread_mutex_lock@plt>
    acd8:	ldr	x1, [x19, #312]
    acdc:	add	x0, x1, x26
    ace0:	str	w22, [x1, x26]
    ace4:	add	x0, x0, #0x190
    ace8:	bl	3230 <pthread_cond_signal@plt>
    acec:	ldr	x0, [x19, #312]
    acf0:	add	x0, x0, x26
    acf4:	add	x0, x0, #0x160
    acf8:	bl	3580 <pthread_mutex_unlock@plt>
    acfc:	ldr	w0, [x19, #324]
    ad00:	cmp	w27, w0
    ad04:	b.cc	acc0 <lzma_vli_encode@@XZ_5.0+0x848>  // b.lo, b.ul, b.last
    ad08:	mov	w26, #0x1d0                 	// #464
    ad0c:	cbz	w0, ad6c <lzma_vli_encode@@XZ_5.0+0x8f4>
    ad10:	ldr	x0, [x19, #312]
    ad14:	umull	x22, w20, w26
    ad18:	add	x0, x0, x22
    ad1c:	add	x0, x0, #0x160
    ad20:	bl	3560 <pthread_mutex_lock@plt>
    ad24:	ldr	x1, [x19, #312]
    ad28:	add	x0, x1, x22
    ad2c:	ldr	w1, [x1, x22]
    ad30:	cbz	w1, ad54 <lzma_vli_encode@@XZ_5.0+0x8dc>
    ad34:	nop
    ad38:	add	x1, x0, #0x160
    ad3c:	add	x0, x0, #0x190
    ad40:	bl	33d0 <pthread_cond_wait@plt>
    ad44:	ldr	x1, [x19, #312]
    ad48:	add	x0, x1, x22
    ad4c:	ldr	w1, [x1, x22]
    ad50:	cbnz	w1, ad38 <lzma_vli_encode@@XZ_5.0+0x8c0>
    ad54:	add	x0, x0, #0x160
    ad58:	bl	3580 <pthread_mutex_unlock@plt>
    ad5c:	ldr	w0, [x19, #324]
    ad60:	add	w20, w20, #0x1
    ad64:	cmp	w20, w0
    ad68:	b.cc	ad10 <lzma_vli_encode@@XZ_5.0+0x898>  // b.lo, b.ul, b.last
    ad6c:	ldr	w3, [x21, #4]
    ad70:	add	x0, x19, #0x100
    ad74:	ldp	x27, x28, [sp, #80]
    ad78:	b	a9dc <lzma_vli_encode@@XZ_5.0+0x564>
    ad7c:	mov	x0, x28
    ad80:	mov	w1, #0x1                   	// #1
    ad84:	bl	34c0 <pthread_condattr_setclock@plt>
    ad88:	cbz	w0, ad98 <lzma_vli_encode@@XZ_5.0+0x920>
    ad8c:	mov	x0, x28
    ad90:	bl	3210 <pthread_condattr_destroy@plt>
    ad94:	b	ac00 <lzma_vli_encode@@XZ_5.0+0x788>
    ad98:	mov	x1, x28
    ad9c:	mov	x0, x20
    ada0:	bl	3450 <pthread_cond_init@plt>
    ada4:	mov	w1, w0
    ada8:	mov	x0, x28
    adac:	str	w1, [sp, #108]
    adb0:	bl	3210 <pthread_condattr_destroy@plt>
    adb4:	ldr	w1, [sp, #108]
    adb8:	cbnz	w1, ac00 <lzma_vli_encode@@XZ_5.0+0x788>
    adbc:	mov	w0, #0x1                   	// #1
    adc0:	str	w0, [x20, #48]
    adc4:	b	ac14 <lzma_vli_encode@@XZ_5.0+0x79c>
    adc8:	stp	x29, x30, [sp, #-64]!
    adcc:	mov	x29, sp
    add0:	stp	x19, x20, [sp, #16]
    add4:	mov	x19, x0
    add8:	ldr	w0, [x0, #324]
    addc:	stp	x21, x22, [sp, #32]
    ade0:	mov	x21, x1
    ade4:	cbnz	w0, ae68 <lzma_vli_encode@@XZ_5.0+0x9f0>
    ade8:	ldr	x0, [x19, #312]
    adec:	mov	x1, x21
    adf0:	add	x20, x19, #0x18
    adf4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    adf8:	add	x0, x19, #0x100
    adfc:	mov	x1, x21
    ae00:	bl	a668 <lzma_vli_encode@@XZ_5.0+0x1f0>
    ae04:	ldr	x0, [x19, #16]
    ae08:	cmn	x0, #0x1
    ae0c:	b.eq	ae28 <lzma_vli_encode@@XZ_5.0+0x9b0>  // b.none
    ae10:	ldr	x0, [x20], #16
    ae14:	mov	x1, x21
    ae18:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    ae1c:	ldur	x0, [x20, #-8]
    ae20:	cmn	x0, #0x1
    ae24:	b.ne	ae10 <lzma_vli_encode@@XZ_5.0+0x998>  // b.any
    ae28:	mov	x1, x21
    ae2c:	add	x0, x19, #0x68
    ae30:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    ae34:	ldr	x0, [x19, #96]
    ae38:	mov	x1, x21
    ae3c:	bl	3410 <lzma_index_end@plt>
    ae40:	add	x0, x19, #0x198
    ae44:	bl	3550 <pthread_cond_destroy@plt>
    ae48:	add	x0, x19, #0x168
    ae4c:	bl	3440 <pthread_mutex_destroy@plt>
    ae50:	mov	x1, x21
    ae54:	mov	x0, x19
    ae58:	ldp	x19, x20, [sp, #16]
    ae5c:	ldp	x21, x22, [sp, #32]
    ae60:	ldp	x29, x30, [sp], #64
    ae64:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    ae68:	mov	w22, #0x0                   	// #0
    ae6c:	stp	x23, x24, [sp, #48]
    ae70:	mov	w24, #0x1d0                 	// #464
    ae74:	mov	w23, #0x4                   	// #4
    ae78:	ldr	x0, [x19, #312]
    ae7c:	umull	x20, w22, w24
    ae80:	add	w22, w22, #0x1
    ae84:	add	x0, x0, x20
    ae88:	add	x0, x0, #0x160
    ae8c:	bl	3560 <pthread_mutex_lock@plt>
    ae90:	ldr	x1, [x19, #312]
    ae94:	add	x0, x1, x20
    ae98:	str	w23, [x1, x20]
    ae9c:	add	x0, x0, #0x190
    aea0:	bl	3230 <pthread_cond_signal@plt>
    aea4:	ldr	x0, [x19, #312]
    aea8:	add	x0, x0, x20
    aeac:	add	x0, x0, #0x160
    aeb0:	bl	3580 <pthread_mutex_unlock@plt>
    aeb4:	ldr	w0, [x19, #324]
    aeb8:	cmp	w22, w0
    aebc:	b.cc	ae78 <lzma_vli_encode@@XZ_5.0+0xa00>  // b.lo, b.ul, b.last
    aec0:	cbz	w0, aef4 <lzma_vli_encode@@XZ_5.0+0xa7c>
    aec4:	mov	w20, #0x0                   	// #0
    aec8:	mov	w22, #0x1d0                 	// #464
    aecc:	nop
    aed0:	ldr	x0, [x19, #312]
    aed4:	mov	x1, #0x0                   	// #0
    aed8:	umaddl	x0, w20, w22, x0
    aedc:	add	w20, w20, #0x1
    aee0:	ldr	x0, [x0, #456]
    aee4:	bl	3300 <pthread_join@plt>
    aee8:	ldr	w0, [x19, #324]
    aeec:	cmp	w20, w0
    aef0:	b.cc	aed0 <lzma_vli_encode@@XZ_5.0+0xa58>  // b.lo, b.ul, b.last
    aef4:	ldp	x23, x24, [sp, #48]
    aef8:	b	ade8 <lzma_vli_encode@@XZ_5.0+0x970>
    aefc:	nop
    af00:	sub	sp, sp, #0x1f0
    af04:	stp	x29, x30, [sp, #16]
    af08:	add	x29, sp, #0x10
    af0c:	stp	x19, x20, [sp, #32]
    af10:	stp	x23, x24, [sp, #64]
    af14:	mov	x23, x0
    af18:	ldr	w24, [x0]
    af1c:	stp	x25, x26, [sp, #80]
    af20:	mov	x25, x6
    af24:	mov	x26, x7
    af28:	stp	x1, x2, [sp, #120]
    af2c:	cmp	w24, #0x2
    af30:	str	x5, [sp, #144]
    af34:	b.eq	b668 <lzma_vli_encode@@XZ_5.0+0x11f0>  // b.none
    af38:	b.hi	b410 <lzma_vli_encode@@XZ_5.0+0xf98>  // b.pmore
    af3c:	stp	x21, x22, [sp, #48]
    af40:	mov	x20, x4
    af44:	mov	x22, x3
    af48:	cbz	w24, b6d4 <lzma_vli_encode@@XZ_5.0+0x125c>
    af4c:	stp	x27, x28, [sp, #96]
    af50:	add	x19, x23, #0x168
    af54:	add	x27, sp, #0xe0
    af58:	adrp	x0, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    af5c:	add	x0, x0, #0x818
    af60:	str	wzr, [sp, #156]
    af64:	str	x0, [sp, #192]
    af68:	stp	xzr, xzr, [sp, #208]
    af6c:	nop
    af70:	mov	x0, x19
    af74:	bl	3560 <pthread_mutex_lock@plt>
    af78:	ldr	w24, [x23, #308]
    af7c:	cbz	w24, b3a0 <lzma_vli_encode@@XZ_5.0+0xf28>
    af80:	mov	x0, x19
    af84:	bl	3580 <pthread_mutex_unlock@plt>
    af88:	cmp	w24, #0x1
    af8c:	b.ne	b728 <lzma_vli_encode@@XZ_5.0+0x12b0>  // b.any
    af90:	ldp	x2, x3, [sp, #208]
    af94:	ldr	x0, [x23, #96]
    af98:	ldr	x1, [sp, #120]
    af9c:	bl	3330 <lzma_index_append@plt>
    afa0:	mov	w21, w0
    afa4:	ldr	x1, [x25]
    afa8:	cmp	x1, x26
    afac:	b.cc	af70 <lzma_vli_encode@@XZ_5.0+0xaf8>  // b.lo, b.ul, b.last
    afb0:	cbnz	w21, b720 <lzma_vli_encode@@XZ_5.0+0x12a8>
    afb4:	add	x0, sp, #0xf0
    afb8:	str	x0, [sp, #136]
    afbc:	ldr	x0, [x23, #336]
    afc0:	add	x24, sp, #0x170
    afc4:	nop
    afc8:	ldr	x28, [x22]
    afcc:	cmp	x20, x28
    afd0:	b.ls	b1d0 <lzma_vli_encode@@XZ_5.0+0xd58>  // b.plast
    afd4:	cbz	x0, b070 <lzma_vli_encode@@XZ_5.0+0xbf8>
    afd8:	ldp	x3, x6, [x0, #8]
    afdc:	mov	x1, x22
    afe0:	ldr	x5, [x23, #8]
    afe4:	mov	x4, x24
    afe8:	ldr	x0, [sp, #128]
    afec:	mov	x2, x20
    aff0:	str	x6, [sp, #368]
    aff4:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    aff8:	ldr	x1, [x23, #8]
    affc:	ldr	x0, [sp, #368]
    b000:	cmp	x1, x0
    b004:	b.eq	b378 <lzma_vli_encode@@XZ_5.0+0xf00>  // b.none
    b008:	ldr	x1, [x22]
    b00c:	ldr	x0, [x23, #336]
    b010:	cmp	x1, x20
    b014:	ldr	w1, [sp, #496]
    b018:	cset	w2, eq  // eq = none
    b01c:	add	x0, x0, #0x160
    b020:	cmp	w1, #0x0
    b024:	csel	w28, w2, wzr, ne  // ne = any
    b028:	bl	3560 <pthread_mutex_lock@plt>
    b02c:	ldr	x1, [x23, #336]
    b030:	ldr	w0, [x1]
    b034:	cbz	w0, b1fc <lzma_vli_encode@@XZ_5.0+0xd84>
    b038:	ldr	x0, [sp, #368]
    b03c:	str	x0, [x1, #16]
    b040:	add	x0, x1, #0x190
    b044:	cbz	w28, b1e4 <lzma_vli_encode@@XZ_5.0+0xd6c>
    b048:	mov	w2, #0x2                   	// #2
    b04c:	str	w2, [x1]
    b050:	bl	3230 <pthread_cond_signal@plt>
    b054:	ldr	x0, [x23, #336]
    b058:	add	x0, x0, #0x160
    b05c:	bl	3580 <pthread_mutex_unlock@plt>
    b060:	ldr	x28, [x22]
    b064:	str	xzr, [x23, #336]
    b068:	cmp	x20, x28
    b06c:	b.ls	b220 <lzma_vli_encode@@XZ_5.0+0xda8>  // b.plast
    b070:	ldr	w1, [x23, #280]
    b074:	ldr	w0, [x23, #288]
    b078:	cmp	w1, w0
    b07c:	b.ls	b21c <lzma_vli_encode@@XZ_5.0+0xda4>  // b.plast
    b080:	mov	x0, x19
    b084:	bl	3560 <pthread_mutex_lock@plt>
    b088:	ldr	x0, [x23, #328]
    b08c:	cbz	x0, b098 <lzma_vli_encode@@XZ_5.0+0xc20>
    b090:	ldr	x1, [x0, #344]
    b094:	stp	x1, x0, [x23, #328]
    b098:	mov	x0, x19
    b09c:	bl	3580 <pthread_mutex_unlock@plt>
    b0a0:	ldr	x4, [x23, #336]
    b0a4:	cbnz	x4, b460 <lzma_vli_encode@@XZ_5.0+0xfe8>
    b0a8:	ldr	w1, [x23, #320]
    b0ac:	ldr	w0, [x23, #324]
    b0b0:	cmp	w0, w1
    b0b4:	b.eq	b21c <lzma_vli_encode@@XZ_5.0+0xda4>  // b.none
    b0b8:	mov	w2, #0x1d0                 	// #464
    b0bc:	ldr	x3, [x23, #312]
    b0c0:	umull	x2, w0, w2
    b0c4:	ldr	x0, [x23, #8]
    b0c8:	stp	x2, x3, [sp, #168]
    b0cc:	add	x3, x3, x2
    b0d0:	ldr	x1, [sp, #120]
    b0d4:	str	x3, [sp, #160]
    b0d8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    b0dc:	ldr	x3, [sp, #160]
    b0e0:	str	x0, [x3, #8]
    b0e4:	cbz	x0, b58c <lzma_vli_encode@@XZ_5.0+0x1114>
    b0e8:	add	x28, x3, #0x160
    b0ec:	mov	x1, #0x0                   	// #0
    b0f0:	mov	x0, x28
    b0f4:	bl	32d0 <pthread_mutex_init@plt>
    b0f8:	ldr	x3, [sp, #160]
    b0fc:	cbnz	w0, b580 <lzma_vli_encode@@XZ_5.0+0x1108>
    b100:	mov	x1, x24
    b104:	mov	w0, #0x1                   	// #1
    b108:	bl	3180 <clock_gettime@plt>
    b10c:	ldr	x3, [sp, #160]
    b110:	add	x1, x3, #0x190
    b114:	str	x1, [sp, #160]
    b118:	cbz	w0, b5cc <lzma_vli_encode@@XZ_5.0+0x1154>
    b11c:	ldr	x0, [sp, #160]
    b120:	mov	x1, #0x0                   	// #0
    b124:	str	x3, [sp, #184]
    b128:	str	wzr, [x0, #48]
    b12c:	bl	3450 <pthread_cond_init@plt>
    b130:	ldr	x3, [sp, #184]
    b134:	cbnz	w0, b570 <lzma_vli_encode@@XZ_5.0+0x10f8>
    b138:	ldp	x1, x0, [sp, #168]
    b13c:	str	x3, [sp, #168]
    b140:	ldr	x2, [sp, #120]
    b144:	str	wzr, [x0, x1]
    b148:	mov	x1, #0xffffffffffffffff    	// #-1
    b14c:	stp	x23, x2, [x3, #32]
    b150:	mov	x0, x24
    b154:	stp	xzr, xzr, [x3, #48]
    b158:	stp	xzr, x1, [x3, #64]
    b15c:	stp	xzr, xzr, [x3, #80]
    b160:	stp	xzr, xzr, [x3, #96]
    b164:	stp	xzr, xzr, [x3, #112]
    b168:	str	xzr, [x3, #128]
    b16c:	bl	31a0 <sigfillset@plt>
    b170:	ldr	x2, [sp, #136]
    b174:	mov	x1, x24
    b178:	mov	w0, #0x2                   	// #2
    b17c:	bl	30f0 <pthread_sigmask@plt>
    b180:	ldr	x3, [sp, #168]
    b184:	mov	x1, #0x0                   	// #0
    b188:	ldr	x2, [sp, #192]
    b18c:	add	x0, x3, #0x1c8
    b190:	str	x3, [sp, #176]
    b194:	bl	32e0 <pthread_create@plt>
    b198:	mov	w5, w0
    b19c:	ldr	x1, [sp, #136]
    b1a0:	mov	x2, #0x0                   	// #0
    b1a4:	mov	w0, #0x2                   	// #2
    b1a8:	str	w5, [sp, #168]
    b1ac:	bl	30f0 <pthread_sigmask@plt>
    b1b0:	ldr	w5, [sp, #168]
    b1b4:	ldr	x3, [sp, #176]
    b1b8:	cbnz	w5, b55c <lzma_vli_encode@@XZ_5.0+0x10e4>
    b1bc:	ldr	w0, [x23, #324]
    b1c0:	str	x3, [x23, #336]
    b1c4:	add	w0, w0, #0x1
    b1c8:	str	w0, [x23, #324]
    b1cc:	b	b464 <lzma_vli_encode@@XZ_5.0+0xfec>
    b1d0:	ldr	w1, [sp, #496]
    b1d4:	cmp	x0, #0x0
    b1d8:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    b1dc:	b.ne	afd8 <lzma_vli_encode@@XZ_5.0+0xb60>  // b.any
    b1e0:	b	b220 <lzma_vli_encode@@XZ_5.0+0xda8>
    b1e4:	bl	3230 <pthread_cond_signal@plt>
    b1e8:	ldr	x0, [x23, #336]
    b1ec:	add	x0, x0, #0x160
    b1f0:	bl	3580 <pthread_mutex_unlock@plt>
    b1f4:	ldr	x0, [x23, #336]
    b1f8:	b	afc8 <lzma_vli_encode@@XZ_5.0+0xb50>
    b1fc:	add	x0, x1, #0x160
    b200:	bl	3580 <pthread_mutex_unlock@plt>
    b204:	mov	x0, x19
    b208:	bl	3560 <pthread_mutex_lock@plt>
    b20c:	ldr	w24, [x23, #308]
    b210:	mov	x0, x19
    b214:	bl	3580 <pthread_mutex_unlock@plt>
    b218:	cbnz	w24, b598 <lzma_vli_encode@@XZ_5.0+0x1120>
    b21c:	ldr	x28, [x22]
    b220:	cmp	x20, x28
    b224:	b.eq	b3d4 <lzma_vli_encode@@XZ_5.0+0xf5c>  // b.none
    b228:	ldr	x0, [x25]
    b22c:	cmp	x0, x26
    b230:	b.eq	b710 <lzma_vli_encode@@XZ_5.0+0x1298>  // b.none
    b234:	ldr	w3, [x23, #304]
    b238:	cbz	w3, b244 <lzma_vli_encode@@XZ_5.0+0xdcc>
    b23c:	ldr	w0, [sp, #156]
    b240:	cbz	w0, b4ac <lzma_vli_encode@@XZ_5.0+0x1034>
    b244:	mov	x0, x19
    b248:	bl	3560 <pthread_mutex_lock@plt>
    b24c:	cmp	x20, x28
    b250:	add	x24, x23, #0x198
    b254:	add	x28, x23, #0x100
    b258:	mov	w21, #0x0                   	// #0
    b25c:	b.ls	b300 <lzma_vli_encode@@XZ_5.0+0xe88>  // b.plast
    b260:	ldr	x1, [x23, #328]
    b264:	mov	x0, x28
    b268:	cbz	x1, b280 <lzma_vli_encode@@XZ_5.0+0xe08>
    b26c:	ldr	w2, [x23, #280]
    b270:	ldr	w1, [x23, #288]
    b274:	cmp	w2, w1
    b278:	b.hi	b2d8 <lzma_vli_encode@@XZ_5.0+0xe60>  // b.pmore
    b27c:	nop
    b280:	bl	a6f8 <lzma_vli_encode@@XZ_5.0+0x280>
    b284:	mov	w3, w0
    b288:	mov	x2, x27
    b28c:	mov	x1, x19
    b290:	mov	x0, x24
    b294:	tst	w3, #0xff
    b298:	b.ne	b2d8 <lzma_vli_encode@@XZ_5.0+0xe60>  // b.any
    b29c:	ldr	w3, [x23, #308]
    b2a0:	cbnz	w3, b2d8 <lzma_vli_encode@@XZ_5.0+0xe60>
    b2a4:	cbnz	w21, b52c <lzma_vli_encode@@XZ_5.0+0x10b4>
    b2a8:	ldr	w3, [x23, #304]
    b2ac:	cbz	w3, b368 <lzma_vli_encode@@XZ_5.0+0xef0>
    b2b0:	bl	3590 <pthread_cond_timedwait@plt>
    b2b4:	cmp	w0, #0x0
    b2b8:	ldr	x1, [x23, #328]
    b2bc:	cset	w21, ne  // ne = any
    b2c0:	mov	x0, x28
    b2c4:	cbz	x1, b280 <lzma_vli_encode@@XZ_5.0+0xe08>
    b2c8:	ldr	w2, [x23, #280]
    b2cc:	ldr	w1, [x23, #288]
    b2d0:	cmp	w2, w1
    b2d4:	b.ls	b280 <lzma_vli_encode@@XZ_5.0+0xe08>  // b.plast
    b2d8:	mov	x0, x19
    b2dc:	bl	3580 <pthread_mutex_unlock@plt>
    b2e0:	cbz	w21, af70 <lzma_vli_encode@@XZ_5.0+0xaf8>
    b2e4:	mov	w24, #0x20                  	// #32
    b2e8:	ldp	x21, x22, [sp, #48]
    b2ec:	ldp	x27, x28, [sp, #96]
    b2f0:	b	b540 <lzma_vli_encode@@XZ_5.0+0x10c8>
    b2f4:	bl	3590 <pthread_cond_timedwait@plt>
    b2f8:	cmp	w0, #0x0
    b2fc:	cset	w21, ne  // ne = any
    b300:	mov	x0, x28
    b304:	bl	a6f8 <lzma_vli_encode@@XZ_5.0+0x280>
    b308:	mov	w3, w0
    b30c:	mov	x2, x27
    b310:	mov	x1, x19
    b314:	mov	x0, x24
    b318:	tst	w3, #0xff
    b31c:	b.ne	b2d8 <lzma_vli_encode@@XZ_5.0+0xe60>  // b.any
    b320:	ldr	w3, [x23, #308]
    b324:	cbnz	w3, b2d8 <lzma_vli_encode@@XZ_5.0+0xe60>
    b328:	cbnz	w21, b52c <lzma_vli_encode@@XZ_5.0+0x10b4>
    b32c:	ldr	w3, [x23, #304]
    b330:	cbnz	w3, b2f4 <lzma_vli_encode@@XZ_5.0+0xe7c>
    b334:	bl	33d0 <pthread_cond_wait@plt>
    b338:	mov	x0, x28
    b33c:	bl	a6f8 <lzma_vli_encode@@XZ_5.0+0x280>
    b340:	mov	w3, w0
    b344:	mov	x2, x27
    b348:	mov	x1, x19
    b34c:	mov	x0, x24
    b350:	tst	w3, #0xff
    b354:	b.eq	b320 <lzma_vli_encode@@XZ_5.0+0xea8>  // b.none
    b358:	mov	x0, x19
    b35c:	bl	3580 <pthread_mutex_unlock@plt>
    b360:	cbz	w21, af70 <lzma_vli_encode@@XZ_5.0+0xaf8>
    b364:	b	b2e4 <lzma_vli_encode@@XZ_5.0+0xe6c>
    b368:	mov	x1, x19
    b36c:	mov	x0, x24
    b370:	bl	33d0 <pthread_cond_wait@plt>
    b374:	b	b260 <lzma_vli_encode@@XZ_5.0+0xde8>
    b378:	ldr	x0, [x23, #336]
    b37c:	add	x0, x0, #0x160
    b380:	bl	3560 <pthread_mutex_lock@plt>
    b384:	ldr	x1, [x23, #336]
    b388:	ldr	w0, [x1]
    b38c:	cbz	w0, b1fc <lzma_vli_encode@@XZ_5.0+0xd84>
    b390:	ldr	x2, [sp, #368]
    b394:	add	x0, x1, #0x190
    b398:	str	x2, [x1, #16]
    b39c:	b	b048 <lzma_vli_encode@@XZ_5.0+0xbd0>
    b3a0:	ldr	x1, [sp, #144]
    b3a4:	add	x5, sp, #0xd8
    b3a8:	add	x4, sp, #0xd0
    b3ac:	mov	x3, x26
    b3b0:	mov	x2, x25
    b3b4:	add	x0, x23, #0x100
    b3b8:	bl	a720 <lzma_vli_encode@@XZ_5.0+0x2a8>
    b3bc:	mov	w21, w0
    b3c0:	mov	x0, x19
    b3c4:	bl	3580 <pthread_mutex_unlock@plt>
    b3c8:	cmp	w21, #0x1
    b3cc:	b.ne	afb0 <lzma_vli_encode@@XZ_5.0+0xb38>  // b.any
    b3d0:	b	af90 <lzma_vli_encode@@XZ_5.0+0xb18>
    b3d4:	ldr	w0, [sp, #496]
    b3d8:	cbz	w0, b710 <lzma_vli_encode@@XZ_5.0+0x1298>
    b3dc:	cmp	w0, #0x4
    b3e0:	b.eq	b400 <lzma_vli_encode@@XZ_5.0+0xf88>  // b.none
    b3e4:	ldr	w0, [x23, #288]
    b3e8:	cbnz	w0, b228 <lzma_vli_encode@@XZ_5.0+0xdb0>
    b3ec:	ldr	w0, [sp, #496]
    b3f0:	cmp	w0, #0x3
    b3f4:	b.eq	b628 <lzma_vli_encode@@XZ_5.0+0x11b0>  // b.none
    b3f8:	cmp	w0, #0x2
    b3fc:	b.ne	b228 <lzma_vli_encode@@XZ_5.0+0xdb0>  // b.any
    b400:	mov	w24, #0x1                   	// #1
    b404:	ldp	x21, x22, [sp, #48]
    b408:	ldp	x27, x28, [sp, #96]
    b40c:	b	b540 <lzma_vli_encode@@XZ_5.0+0x10c8>
    b410:	cmp	w24, #0x3
    b414:	b.ne	b608 <lzma_vli_encode@@XZ_5.0+0x1190>  // b.any
    b418:	add	x19, x0, #0xe8
    b41c:	mov	x3, x5
    b420:	mov	x5, x26
    b424:	mov	x4, x25
    b428:	add	x1, x23, #0xf8
    b42c:	mov	x0, x19
    b430:	mov	x2, #0xc                   	// #12
    b434:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    b438:	ldr	x0, [x23, #248]
    b43c:	ldp	x29, x30, [sp, #16]
    b440:	cmp	x0, #0xb
    b444:	cset	w24, hi  // hi = pmore
    b448:	mov	w0, w24
    b44c:	ldp	x19, x20, [sp, #32]
    b450:	ldp	x23, x24, [sp, #64]
    b454:	ldp	x25, x26, [sp, #80]
    b458:	add	sp, sp, #0x1f0
    b45c:	ret
    b460:	add	x28, x4, #0x160
    b464:	mov	x0, x28
    b468:	bl	3560 <pthread_mutex_lock@plt>
    b46c:	ldr	x28, [x23, #336]
    b470:	mov	w1, #0x1                   	// #1
    b474:	add	x0, x23, #0x100
    b478:	str	w1, [x28]
    b47c:	str	xzr, [x28, #16]
    b480:	bl	a6a8 <lzma_vli_encode@@XZ_5.0+0x230>
    b484:	ldr	x2, [x23, #336]
    b488:	str	x0, [x28, #24]
    b48c:	add	x0, x2, #0x190
    b490:	bl	3230 <pthread_cond_signal@plt>
    b494:	ldr	x0, [x23, #336]
    b498:	add	x0, x0, #0x160
    b49c:	bl	3580 <pthread_mutex_unlock@plt>
    b4a0:	ldr	x0, [x23, #336]
    b4a4:	cbnz	x0, afd8 <lzma_vli_encode@@XZ_5.0+0xb60>
    b4a8:	b	b21c <lzma_vli_encode@@XZ_5.0+0xda4>
    b4ac:	mov	w5, #0x4dd3                	// #19923
    b4b0:	mov	w7, #0x3e8                 	// #1000
    b4b4:	movk	w5, #0x1062, lsl #16
    b4b8:	mov	w6, #0x4240                	// #16960
    b4bc:	movk	w6, #0xf, lsl #16
    b4c0:	ldr	w0, [x23, #456]
    b4c4:	umull	x5, w3, w5
    b4c8:	add	x1, sp, #0x170
    b4cc:	lsr	x4, x5, #38
    b4d0:	msub	w3, w4, w7, w3
    b4d4:	mul	w3, w3, w6
    b4d8:	stp	x4, x3, [sp, #224]
    b4dc:	bl	3180 <clock_gettime@plt>
    b4e0:	ldp	x1, x0, [sp, #224]
    b4e4:	mov	x3, #0xc9ff                	// #51711
    b4e8:	ldr	x4, [sp, #368]
    b4ec:	movk	x3, #0x3b9a, lsl #16
    b4f0:	add	x1, x1, x4
    b4f4:	str	x1, [sp, #224]
    b4f8:	ldr	x4, [sp, #376]
    b4fc:	add	x0, x0, x4
    b500:	cmp	x0, x3
    b504:	b.le	b51c <lzma_vli_encode@@XZ_5.0+0x10a4>
    b508:	mov	x3, #0xffffffffffff3600    	// #-51712
    b50c:	add	x1, x1, #0x1
    b510:	movk	x3, #0xc465, lsl #16
    b514:	add	x0, x0, x3
    b518:	str	x1, [sp, #224]
    b51c:	str	x0, [sp, #232]
    b520:	mov	w0, #0x1                   	// #1
    b524:	str	w0, [sp, #156]
    b528:	b	b244 <lzma_vli_encode@@XZ_5.0+0xdcc>
    b52c:	mov	x0, x19
    b530:	bl	3580 <pthread_mutex_unlock@plt>
    b534:	ldp	x21, x22, [sp, #48]
    b538:	mov	w24, #0x20                  	// #32
    b53c:	ldp	x27, x28, [sp, #96]
    b540:	mov	w0, w24
    b544:	ldp	x29, x30, [sp, #16]
    b548:	ldp	x19, x20, [sp, #32]
    b54c:	ldp	x23, x24, [sp, #64]
    b550:	ldp	x25, x26, [sp, #80]
    b554:	add	sp, sp, #0x1f0
    b558:	ret
    b55c:	ldr	x0, [sp, #160]
    b560:	str	x3, [sp, #168]
    b564:	bl	3550 <pthread_cond_destroy@plt>
    b568:	ldr	x3, [sp, #168]
    b56c:	nop
    b570:	mov	x0, x28
    b574:	str	x3, [sp, #160]
    b578:	bl	3440 <pthread_mutex_destroy@plt>
    b57c:	ldr	x3, [sp, #160]
    b580:	ldr	x0, [x3, #8]
    b584:	ldr	x1, [sp, #120]
    b588:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    b58c:	ldr	x0, [x23, #336]
    b590:	cbnz	x0, afd8 <lzma_vli_encode@@XZ_5.0+0xb60>
    b594:	mov	w24, #0x5                   	// #5
    b598:	ldr	w0, [x23, #324]
    b59c:	mov	w22, #0x1d0                 	// #464
    b5a0:	mov	w20, #0x3                   	// #3
    b5a4:	cbnz	w0, b790 <lzma_vli_encode@@XZ_5.0+0x1318>
    b5a8:	mov	w0, w24
    b5ac:	ldp	x29, x30, [sp, #16]
    b5b0:	ldp	x19, x20, [sp, #32]
    b5b4:	ldp	x21, x22, [sp, #48]
    b5b8:	ldp	x23, x24, [sp, #64]
    b5bc:	ldp	x25, x26, [sp, #80]
    b5c0:	ldp	x27, x28, [sp, #96]
    b5c4:	add	sp, sp, #0x1f0
    b5c8:	ret
    b5cc:	ldr	x0, [sp, #136]
    b5d0:	str	x3, [sp, #184]
    b5d4:	bl	3400 <pthread_condattr_init@plt>
    b5d8:	ldr	x3, [sp, #184]
    b5dc:	cbnz	w0, b11c <lzma_vli_encode@@XZ_5.0+0xca4>
    b5e0:	ldr	x0, [sp, #136]
    b5e4:	mov	w1, #0x1                   	// #1
    b5e8:	bl	34c0 <pthread_condattr_setclock@plt>
    b5ec:	ldr	x3, [sp, #184]
    b5f0:	cbz	w0, b7dc <lzma_vli_encode@@XZ_5.0+0x1364>
    b5f4:	ldr	x0, [sp, #136]
    b5f8:	str	x3, [sp, #184]
    b5fc:	bl	3210 <pthread_condattr_destroy@plt>
    b600:	ldr	x3, [sp, #184]
    b604:	b	b11c <lzma_vli_encode@@XZ_5.0+0xca4>
    b608:	mov	w24, #0xb                   	// #11
    b60c:	mov	w0, w24
    b610:	ldp	x29, x30, [sp, #16]
    b614:	ldp	x19, x20, [sp, #32]
    b618:	ldp	x23, x24, [sp, #64]
    b61c:	ldp	x25, x26, [sp, #80]
    b620:	add	sp, sp, #0x1f0
    b624:	ret
    b628:	ldr	x2, [x23, #96]
    b62c:	add	x0, x23, #0x68
    b630:	ldr	x1, [sp, #120]
    b634:	bl	9488 <lzma_filter_flags_encode@@XZ_5.0+0x380>
    b638:	mov	w24, w0
    b63c:	cbnz	w0, b5a8 <lzma_vli_encode@@XZ_5.0+0x1130>
    b640:	ldr	x0, [x23, #96]
    b644:	mov	w1, #0x2                   	// #2
    b648:	str	w1, [x23]
    b64c:	bl	3540 <lzma_index_size@plt>
    b650:	ldr	x1, [x23, #352]
    b654:	ldp	x21, x22, [sp, #48]
    b658:	add	x1, x1, #0xc
    b65c:	add	x1, x1, x0
    b660:	ldp	x27, x28, [sp, #96]
    b664:	str	x1, [x23, #352]
    b668:	ldr	x0, [x23, #104]
    b66c:	str	wzr, [sp]
    b670:	ldr	x1, [sp, #120]
    b674:	mov	x7, x26
    b678:	ldr	x9, [x23, #128]
    b67c:	mov	x6, x25
    b680:	ldr	x5, [sp, #144]
    b684:	mov	x4, #0x0                   	// #0
    b688:	mov	x3, #0x0                   	// #0
    b68c:	mov	x2, #0x0                   	// #0
    b690:	blr	x9
    b694:	mov	w24, w0
    b698:	cmp	w0, #0x1
    b69c:	b.ne	b540 <lzma_vli_encode@@XZ_5.0+0x10c8>  // b.any
    b6a0:	ldr	x0, [x23, #96]
    b6a4:	add	x19, x23, #0xe8
    b6a8:	mov	w24, #0xb                   	// #11
    b6ac:	bl	3540 <lzma_index_size@plt>
    b6b0:	str	x0, [x23, #184]
    b6b4:	mov	x1, x19
    b6b8:	add	x0, x23, #0xb0
    b6bc:	bl	3240 <lzma_stream_footer_encode@plt>
    b6c0:	cbnz	w0, b540 <lzma_vli_encode@@XZ_5.0+0x10c8>
    b6c4:	mov	w0, #0x3                   	// #3
    b6c8:	str	w0, [x23]
    b6cc:	ldr	x3, [sp, #144]
    b6d0:	b	b420 <lzma_vli_encode@@XZ_5.0+0xfa8>
    b6d4:	mov	x3, x5
    b6d8:	add	x1, x0, #0xf8
    b6dc:	mov	x5, x7
    b6e0:	mov	x4, x6
    b6e4:	add	x0, x0, #0xe8
    b6e8:	mov	x2, #0xc                   	// #12
    b6ec:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    b6f0:	ldr	x0, [x23, #248]
    b6f4:	cmp	x0, #0xb
    b6f8:	b.ls	b788 <lzma_vli_encode@@XZ_5.0+0x1310>  // b.plast
    b6fc:	stp	x27, x28, [sp, #96]
    b700:	mov	w0, #0x1                   	// #1
    b704:	str	w0, [x23]
    b708:	str	xzr, [x23, #248]
    b70c:	b	af50 <lzma_vli_encode@@XZ_5.0+0xad8>
    b710:	mov	w24, #0x0                   	// #0
    b714:	ldp	x21, x22, [sp, #48]
    b718:	ldp	x27, x28, [sp, #96]
    b71c:	b	b540 <lzma_vli_encode@@XZ_5.0+0x10c8>
    b720:	mov	w24, w21
    b724:	nop
    b728:	ldr	w0, [x23, #324]
    b72c:	cbz	w0, b5a8 <lzma_vli_encode@@XZ_5.0+0x1130>
    b730:	mov	w20, #0x0                   	// #0
    b734:	mov	w22, #0x1d0                 	// #464
    b738:	mov	w21, #0x3                   	// #3
    b73c:	ldr	x0, [x23, #312]
    b740:	umull	x19, w20, w22
    b744:	add	w20, w20, #0x1
    b748:	add	x0, x0, x19
    b74c:	add	x0, x0, #0x160
    b750:	bl	3560 <pthread_mutex_lock@plt>
    b754:	ldr	x1, [x23, #312]
    b758:	add	x0, x1, x19
    b75c:	str	w21, [x1, x19]
    b760:	add	x0, x0, #0x190
    b764:	bl	3230 <pthread_cond_signal@plt>
    b768:	ldr	x0, [x23, #312]
    b76c:	add	x0, x0, x19
    b770:	add	x0, x0, #0x160
    b774:	bl	3580 <pthread_mutex_unlock@plt>
    b778:	ldr	w0, [x23, #324]
    b77c:	cmp	w20, w0
    b780:	b.cs	b5a8 <lzma_vli_encode@@XZ_5.0+0x1130>  // b.hs, b.nlast
    b784:	b	b73c <lzma_vli_encode@@XZ_5.0+0x12c4>
    b788:	ldp	x21, x22, [sp, #48]
    b78c:	b	b540 <lzma_vli_encode@@XZ_5.0+0x10c8>
    b790:	ldr	x0, [x23, #312]
    b794:	umull	x19, w21, w22
    b798:	add	w21, w21, #0x1
    b79c:	add	x0, x0, x19
    b7a0:	add	x0, x0, #0x160
    b7a4:	bl	3560 <pthread_mutex_lock@plt>
    b7a8:	ldr	x1, [x23, #312]
    b7ac:	add	x0, x1, x19
    b7b0:	str	w20, [x1, x19]
    b7b4:	add	x0, x0, #0x190
    b7b8:	bl	3230 <pthread_cond_signal@plt>
    b7bc:	ldr	x0, [x23, #312]
    b7c0:	add	x0, x0, x19
    b7c4:	add	x0, x0, #0x160
    b7c8:	bl	3580 <pthread_mutex_unlock@plt>
    b7cc:	ldr	w0, [x23, #324]
    b7d0:	cmp	w21, w0
    b7d4:	b.cs	b5a8 <lzma_vli_encode@@XZ_5.0+0x1130>  // b.hs, b.nlast
    b7d8:	b	b790 <lzma_vli_encode@@XZ_5.0+0x1318>
    b7dc:	ldr	x1, [sp, #136]
    b7e0:	str	x3, [sp, #200]
    b7e4:	ldr	x0, [sp, #160]
    b7e8:	bl	3450 <pthread_cond_init@plt>
    b7ec:	mov	w1, w0
    b7f0:	ldr	x0, [sp, #136]
    b7f4:	str	w1, [sp, #184]
    b7f8:	bl	3210 <pthread_condattr_destroy@plt>
    b7fc:	ldr	w1, [sp, #184]
    b800:	ldr	x3, [sp, #200]
    b804:	cbnz	w1, b11c <lzma_vli_encode@@XZ_5.0+0xca4>
    b808:	ldr	x0, [sp, #160]
    b80c:	mov	w1, #0x1                   	// #1
    b810:	str	w1, [x0, #48]
    b814:	b	b138 <lzma_vli_encode@@XZ_5.0+0xcc0>
    b818:	sub	sp, sp, #0x90
    b81c:	stp	x29, x30, [sp, #16]
    b820:	add	x29, sp, #0x10
    b824:	stp	x27, x28, [sp, #96]
    b828:	add	x27, sp, #0x88
    b82c:	stp	x19, x20, [sp, #32]
    b830:	mov	x19, x0
    b834:	add	x20, x0, #0x160
    b838:	stp	x21, x22, [sp, #48]
    b83c:	add	x21, x0, #0x190
    b840:	add	x0, x0, #0x40
    b844:	stp	x25, x26, [sp, #80]
    b848:	mov	w26, #0x3                   	// #3
    b84c:	str	x0, [sp, #120]
    b850:	mov	x0, x20
    b854:	bl	3560 <pthread_mutex_lock@plt>
    b858:	b	b86c <lzma_vli_encode@@XZ_5.0+0x13f4>
    b85c:	cbnz	w28, b88c <lzma_vli_encode@@XZ_5.0+0x1414>
    b860:	mov	x1, x20
    b864:	mov	x0, x21
    b868:	bl	33d0 <pthread_cond_wait@plt>
    b86c:	ldr	w28, [x19]
    b870:	cmp	w28, #0x3
    b874:	b.ne	b85c <lzma_vli_encode@@XZ_5.0+0x13e4>  // b.any
    b878:	str	wzr, [x19]
    b87c:	mov	x0, x21
    b880:	bl	3230 <pthread_cond_signal@plt>
    b884:	ldr	w28, [x19]
    b888:	cbz	w28, b860 <lzma_vli_encode@@XZ_5.0+0x13e8>
    b88c:	mov	x0, x20
    b890:	bl	3580 <pthread_mutex_unlock@plt>
    b894:	cmp	w28, #0x2
    b898:	b.ls	b8ec <lzma_vli_encode@@XZ_5.0+0x1474>  // b.plast
    b89c:	cmp	w28, #0x4
    b8a0:	b.ne	ba90 <lzma_vli_encode@@XZ_5.0+0x1618>  // b.any
    b8a4:	mov	x0, x20
    b8a8:	bl	3440 <pthread_mutex_destroy@plt>
    b8ac:	mov	x0, x21
    b8b0:	bl	3550 <pthread_cond_destroy@plt>
    b8b4:	ldr	x1, [x19, #40]
    b8b8:	ldr	x0, [sp, #120]
    b8bc:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    b8c0:	ldr	x0, [x19, #8]
    b8c4:	ldr	x1, [x19, #40]
    b8c8:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    b8cc:	mov	x0, #0x0                   	// #0
    b8d0:	ldp	x29, x30, [sp, #16]
    b8d4:	ldp	x19, x20, [sp, #32]
    b8d8:	ldp	x21, x22, [sp, #48]
    b8dc:	ldp	x25, x26, [sp, #80]
    b8e0:	ldp	x27, x28, [sp, #96]
    b8e4:	add	sp, sp, #0x90
    b8e8:	ret
    b8ec:	ldr	x1, [x19, #32]
    b8f0:	stp	x23, x24, [sp, #64]
    b8f4:	add	x24, x19, #0x88
    b8f8:	add	x2, x1, #0x10
    b8fc:	mov	x0, x24
    b900:	ldr	w4, [x1, #192]
    b904:	ldr	x3, [x1, #8]
    b908:	ldr	x1, [x1, #272]
    b90c:	stp	xzr, xzr, [x19, #136]
    b910:	stp	xzr, xzr, [x24, #32]
    b914:	stp	xzr, xzr, [x24, #48]
    b918:	stp	xzr, xzr, [x24, #64]
    b91c:	stp	xzr, xzr, [x24, #80]
    b920:	stp	xzr, xzr, [x24, #96]
    b924:	stp	xzr, xzr, [x24, #112]
    b928:	stp	xzr, xzr, [x24, #128]
    b92c:	stp	xzr, xzr, [x24, #144]
    b930:	stp	xzr, xzr, [x24, #160]
    b934:	stp	xzr, xzr, [x24, #176]
    b938:	stp	xzr, xzr, [x24, #192]
    b93c:	str	w4, [x19, #144]
    b940:	stp	x1, x3, [x19, #152]
    b944:	str	x2, [x19, #168]
    b948:	bl	3190 <lzma_block_header_size@plt>
    b94c:	mov	w22, w0
    b950:	cbnz	w0, bab0 <lzma_vli_encode@@XZ_5.0+0x1638>
    b954:	ldr	x1, [x19, #40]
    b958:	mov	x2, x24
    b95c:	ldr	x0, [sp, #120]
    b960:	bl	82d0 <lzma_block_uncomp_encode@@XZ_5.2+0x600>
    b964:	mov	w22, w0
    b968:	cbnz	w0, bab0 <lzma_vli_encode@@XZ_5.0+0x1638>
    b96c:	ldp	x0, x1, [x19, #24]
    b970:	mov	x22, #0x0                   	// #0
    b974:	str	xzr, [sp, #136]
    b978:	ldr	x25, [x1, #272]
    b97c:	ldr	w1, [x19, #140]
    b980:	str	x1, [x0, #8]
    b984:	nop
    b988:	mov	x0, x20
    b98c:	bl	3560 <pthread_mutex_lock@plt>
    b990:	ldp	x23, x0, [x19, #16]
    b994:	ldr	x1, [sp, #136]
    b998:	ldr	x0, [x0, #8]
    b99c:	stp	x1, x0, [x19, #48]
    b9a0:	cmp	x22, x23
    b9a4:	b.eq	b9bc <lzma_vli_encode@@XZ_5.0+0x1544>  // b.none
    b9a8:	b	baa4 <lzma_vli_encode@@XZ_5.0+0x162c>
    b9ac:	bl	33d0 <pthread_cond_wait@plt>
    b9b0:	ldr	x0, [x19, #16]
    b9b4:	cmp	x0, x22
    b9b8:	b.ne	ba98 <lzma_vli_encode@@XZ_5.0+0x1620>  // b.any
    b9bc:	ldr	w28, [x19]
    b9c0:	mov	x1, x20
    b9c4:	mov	x0, x21
    b9c8:	cmp	w28, #0x1
    b9cc:	b.eq	b9ac <lzma_vli_encode@@XZ_5.0+0x1534>  // b.none
    b9d0:	mov	x22, x23
    b9d4:	mov	x0, x20
    b9d8:	bl	3580 <pthread_mutex_unlock@plt>
    b9dc:	cmp	w28, #0x2
    b9e0:	b.hi	ba84 <lzma_vli_encode@@XZ_5.0+0x160c>  // b.pmore
    b9e4:	ldr	x0, [sp, #136]
    b9e8:	csel	w8, w26, wzr, eq  // eq = none
    b9ec:	mov	x4, x22
    b9f0:	sub	x1, x22, x0
    b9f4:	cmp	x1, #0x4, lsl #12
    b9f8:	b.ls	ba04 <lzma_vli_encode@@XZ_5.0+0x158c>  // b.plast
    b9fc:	add	x4, x0, #0x4, lsl #12
    ba00:	mov	w8, #0x0                   	// #0
    ba04:	ldr	x6, [x19, #24]
    ba08:	mov	x7, x25
    ba0c:	ldr	x2, [x19, #8]
    ba10:	mov	x3, x27
    ba14:	ldr	x5, [x6], #8
    ba18:	ldr	x1, [x19, #40]
    ba1c:	ldr	x0, [x19, #64]
    ba20:	ldr	x9, [x19, #88]
    ba24:	str	w8, [sp]
    ba28:	blr	x9
    ba2c:	mov	w23, w0
    ba30:	cbnz	w0, bb64 <lzma_vli_encode@@XZ_5.0+0x16ec>
    ba34:	ldr	x0, [x19, #24]
    ba38:	ldr	x0, [x0, #8]
    ba3c:	cmp	x25, x0
    ba40:	b.hi	b988 <lzma_vli_encode@@XZ_5.0+0x1510>  // b.pmore
    ba44:	mov	x0, x20
    ba48:	bl	3560 <pthread_mutex_lock@plt>
    ba4c:	ldr	w28, [x19]
    ba50:	cmp	w28, #0x1
    ba54:	b.ne	ba70 <lzma_vli_encode@@XZ_5.0+0x15f8>  // b.any
    ba58:	mov	x1, x20
    ba5c:	mov	x0, x21
    ba60:	bl	33d0 <pthread_cond_wait@plt>
    ba64:	ldr	w28, [x19]
    ba68:	cmp	w28, #0x1
    ba6c:	b.eq	ba58 <lzma_vli_encode@@XZ_5.0+0x15e0>  // b.none
    ba70:	mov	x0, x20
    ba74:	ldr	x22, [x19, #16]
    ba78:	bl	3580 <pthread_mutex_unlock@plt>
    ba7c:	cmp	w28, #0x2
    ba80:	b.ls	bbc4 <lzma_vli_encode@@XZ_5.0+0x174c>  // b.plast
    ba84:	cmp	w28, #0x4
    ba88:	ldp	x23, x24, [sp, #64]
    ba8c:	b.eq	b8a4 <lzma_vli_encode@@XZ_5.0+0x142c>  // b.none
    ba90:	mov	w22, #0x0                   	// #0
    ba94:	b	bae8 <lzma_vli_encode@@XZ_5.0+0x1670>
    ba98:	ldr	w28, [x19]
    ba9c:	mov	x22, x0
    baa0:	b	b9d4 <lzma_vli_encode@@XZ_5.0+0x155c>
    baa4:	ldr	w28, [x19]
    baa8:	mov	x22, x23
    baac:	b	b9d4 <lzma_vli_encode@@XZ_5.0+0x155c>
    bab0:	ldr	x0, [x19, #32]
    bab4:	add	x0, x0, #0x168
    bab8:	bl	3560 <pthread_mutex_lock@plt>
    babc:	ldr	x0, [x19, #32]
    bac0:	ldr	w1, [x0, #308]
    bac4:	cbnz	w1, bacc <lzma_vli_encode@@XZ_5.0+0x1654>
    bac8:	str	w22, [x0, #308]
    bacc:	add	x0, x0, #0x198
    bad0:	bl	3230 <pthread_cond_signal@plt>
    bad4:	ldr	x0, [x19, #32]
    bad8:	mov	w22, #0x0                   	// #0
    badc:	add	x0, x0, #0x168
    bae0:	bl	3580 <pthread_mutex_unlock@plt>
    bae4:	ldp	x23, x24, [sp, #64]
    bae8:	mov	x0, x20
    baec:	bl	3560 <pthread_mutex_lock@plt>
    baf0:	ldr	w0, [x19]
    baf4:	cmp	w0, #0x4
    baf8:	b.eq	bb08 <lzma_vli_encode@@XZ_5.0+0x1690>  // b.none
    bafc:	str	wzr, [x19]
    bb00:	mov	x0, x21
    bb04:	bl	3230 <pthread_cond_signal@plt>
    bb08:	mov	x0, x20
    bb0c:	bl	3580 <pthread_mutex_unlock@plt>
    bb10:	ldr	x0, [x19, #32]
    bb14:	add	x0, x0, #0x168
    bb18:	bl	3560 <pthread_mutex_lock@plt>
    bb1c:	ldp	x0, x1, [x19, #24]
    bb20:	strb	w22, [x0, #32]
    bb24:	ldp	x3, x2, [x1, #344]
    bb28:	ldr	x4, [x0, #8]
    bb2c:	ldr	x5, [x0, #24]
    bb30:	add	x0, x1, #0x198
    bb34:	add	x2, x2, x4
    bb38:	add	x3, x3, x5
    bb3c:	stp	x3, x2, [x1, #344]
    bb40:	ldr	x2, [x1, #328]
    bb44:	stp	xzr, xzr, [x19, #48]
    bb48:	str	x2, [x19, #344]
    bb4c:	str	x19, [x1, #328]
    bb50:	bl	3230 <pthread_cond_signal@plt>
    bb54:	ldr	x0, [x19, #32]
    bb58:	add	x0, x0, #0x168
    bb5c:	bl	3580 <pthread_mutex_unlock@plt>
    bb60:	b	b850 <lzma_vli_encode@@XZ_5.0+0x13d8>
    bb64:	cmp	w0, #0x1
    bb68:	b.eq	bb8c <lzma_vli_encode@@XZ_5.0+0x1714>  // b.none
    bb6c:	ldr	x0, [x19, #32]
    bb70:	add	x0, x0, #0x168
    bb74:	bl	3560 <pthread_mutex_lock@plt>
    bb78:	ldr	x0, [x19, #32]
    bb7c:	ldr	w1, [x0, #308]
    bb80:	cbnz	w1, bacc <lzma_vli_encode@@XZ_5.0+0x1654>
    bb84:	str	w23, [x0, #308]
    bb88:	b	bacc <lzma_vli_encode@@XZ_5.0+0x1654>
    bb8c:	ldr	x1, [x19, #24]
    bb90:	mov	x0, x24
    bb94:	ldr	x1, [x1]
    bb98:	bl	3570 <lzma_block_header_encode@plt>
    bb9c:	mov	w22, w0
    bba0:	cbnz	w0, bab0 <lzma_vli_encode@@XZ_5.0+0x1638>
    bba4:	mov	x0, x24
    bba8:	bl	31c0 <lzma_block_unpadded_size@plt>
    bbac:	ldr	x23, [x19, #24]
    bbb0:	mov	w22, #0x1                   	// #1
    bbb4:	ldr	x1, [x19, #160]
    bbb8:	stp	x0, x1, [x23, #16]
    bbbc:	ldp	x23, x24, [sp, #64]
    bbc0:	b	bae8 <lzma_vli_encode@@XZ_5.0+0x1670>
    bbc4:	ldr	x0, [x19, #24]
    bbc8:	mov	x5, x25
    bbcc:	ldr	x1, [x19, #8]
    bbd0:	mov	x4, x0
    bbd4:	mov	x2, x22
    bbd8:	ldr	x3, [x4], #8
    bbdc:	str	xzr, [x0, #8]
    bbe0:	mov	x0, x24
    bbe4:	bl	34f0 <lzma_block_uncomp_encode@plt>
    bbe8:	cbz	w0, bba4 <lzma_vli_encode@@XZ_5.0+0x172c>
    bbec:	ldr	x0, [x19, #32]
    bbf0:	add	x0, x0, #0x168
    bbf4:	bl	3560 <pthread_mutex_lock@plt>
    bbf8:	ldr	x0, [x19, #32]
    bbfc:	ldr	w1, [x0, #308]
    bc00:	cbnz	w1, bacc <lzma_vli_encode@@XZ_5.0+0x1654>
    bc04:	mov	w1, #0xb                   	// #11
    bc08:	str	w1, [x0, #308]
    bc0c:	b	bacc <lzma_vli_encode@@XZ_5.0+0x1654>

000000000000bc10 <lzma_stream_encoder_mt@@XZ_5.2>:
    bc10:	stp	x29, x30, [sp, #-48]!
    bc14:	mov	x29, sp
    bc18:	stp	x19, x20, [sp, #16]
    bc1c:	mov	x20, x0
    bc20:	str	x21, [sp, #32]
    bc24:	mov	x21, x1
    bc28:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    bc2c:	mov	w19, w0
    bc30:	cbz	w0, bc48 <lzma_stream_encoder_mt@@XZ_5.2+0x38>
    bc34:	mov	w0, w19
    bc38:	ldp	x19, x20, [sp, #16]
    bc3c:	ldr	x21, [sp, #32]
    bc40:	ldp	x29, x30, [sp], #48
    bc44:	ret
    bc48:	ldp	x1, x0, [x20, #48]
    bc4c:	mov	x2, x21
    bc50:	bl	a8b0 <lzma_vli_encode@@XZ_5.0+0x438>
    bc54:	mov	w19, w0
    bc58:	cbnz	w0, bc88 <lzma_stream_encoder_mt@@XZ_5.2+0x78>
    bc5c:	ldr	x0, [x20, #56]
    bc60:	mov	w1, #0x1                   	// #1
    bc64:	mov	w2, #0x101                 	// #257
    bc68:	ldr	x21, [sp, #32]
    bc6c:	strb	w1, [x0, #88]
    bc70:	strh	w2, [x0, #90]
    bc74:	strb	w1, [x0, #92]
    bc78:	mov	w0, w19
    bc7c:	ldp	x19, x20, [sp, #16]
    bc80:	ldp	x29, x30, [sp], #48
    bc84:	ret
    bc88:	mov	x0, x20
    bc8c:	bl	3350 <lzma_end@plt>
    bc90:	b	bc34 <lzma_stream_encoder_mt@@XZ_5.2+0x24>
    bc94:	nop

000000000000bc98 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    bc98:	cbz	x0, bdb8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x120>
    bc9c:	stp	x29, x30, [sp, #-256]!
    bca0:	mov	x29, sp
    bca4:	stp	x19, x20, [sp, #16]
    bca8:	mov	x19, x0
    bcac:	ldr	w0, [x0]
    bcb0:	cbnz	w0, bd90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    bcb4:	ldr	w0, [x19, #4]
    bcb8:	mov	w1, #0x3fff                	// #16383
    bcbc:	sub	w0, w0, #0x1
    bcc0:	cmp	w0, w1
    bcc4:	b.hi	bd90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>  // b.pmore
    bcc8:	stp	x21, x22, [sp, #32]
    bccc:	ldr	x22, [x19, #24]
    bcd0:	cbz	x22, bdc0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x128>
    bcd4:	ldr	x21, [x19, #8]
    bcd8:	cbz	x21, bda0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x108>
    bcdc:	mov	x0, #0x3ffffffffffff       	// #1125899906842623
    bce0:	cmp	x21, x0
    bce4:	b.hi	bdb0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x118>  // b.pmore
    bce8:	mov	x0, x21
    bcec:	str	x23, [sp, #48]
    bcf0:	bl	7748 <lzma_alone_encoder@@XZ_5.0+0x80>
    bcf4:	mov	x23, x0
    bcf8:	cbz	x0, bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>
    bcfc:	mov	x0, x22
    bd00:	bl	3250 <lzma_raw_encoder_memusage@plt>
    bd04:	mov	x22, x0
    bd08:	cmn	x0, #0x1
    bd0c:	b.eq	bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>  // b.none
    bd10:	ldr	w20, [x19, #4]
    bd14:	mov	x0, x23
    bd18:	mov	w1, w20
    bd1c:	bl	a548 <lzma_vli_encode@@XZ_5.0+0xd0>
    bd20:	cmn	x0, #0x1
    bd24:	b.eq	bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>  // b.none
    bd28:	ldr	w1, [x19, #4]
    bd2c:	mov	x2, #0x81d0                	// #33232
    bd30:	mov	w20, w20
    bd34:	mov	w3, #0x1d0                 	// #464
    bd38:	umaddl	x1, w1, w3, x2
    bd3c:	mul	x21, x20, x21
    bd40:	mvn	x2, x1
    bd44:	cmp	x2, x21
    bd48:	b.cc	bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>  // b.lo, b.ul, b.last
    bd4c:	mul	x20, x20, x22
    bd50:	add	x21, x21, x1
    bd54:	mvn	x1, x21
    bd58:	cmp	x1, x20
    bd5c:	b.cc	bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>  // b.lo, b.ul, b.last
    bd60:	add	x20, x20, x21
    bd64:	mvn	x1, x20
    bd68:	cmp	x1, x0
    bd6c:	b.cc	bd88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>  // b.lo, b.ul, b.last
    bd70:	add	x0, x0, x20
    bd74:	ldp	x19, x20, [sp, #16]
    bd78:	ldp	x21, x22, [sp, #32]
    bd7c:	ldr	x23, [sp, #48]
    bd80:	ldp	x29, x30, [sp], #256
    bd84:	ret
    bd88:	ldp	x21, x22, [sp, #32]
    bd8c:	ldr	x23, [sp, #48]
    bd90:	mov	x0, #0xffffffffffffffff    	// #-1
    bd94:	ldp	x19, x20, [sp, #16]
    bd98:	ldp	x29, x30, [sp], #256
    bd9c:	ret
    bda0:	mov	x0, x22
    bda4:	bl	8de0 <lzma_filters_update@@XZ_5.0+0x110>
    bda8:	mov	x21, x0
    bdac:	cbnz	x0, bce8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x50>
    bdb0:	ldp	x21, x22, [sp, #32]
    bdb4:	b	bd90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    bdb8:	mov	x0, #0xffffffffffffffff    	// #-1
    bdbc:	ret
    bdc0:	ldr	w1, [x19, #20]
    bdc4:	add	x22, sp, #0x40
    bdc8:	mov	x0, x22
    bdcc:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    bdd0:	tst	w0, #0xff
    bdd4:	b.eq	bcd4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c>  // b.none
    bdd8:	ldp	x21, x22, [sp, #32]
    bddc:	b	bd90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    bde0:	mov	x4, x0
    bde4:	ldr	x0, [x0, #104]
    bde8:	str	x0, [x1]
    bdec:	ldr	x0, [x4, #96]
    bdf0:	str	x0, [x2]
    bdf4:	mov	w0, #0x0                   	// #0
    bdf8:	cbz	x3, be14 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x17c>
    bdfc:	ldr	x1, [x4, #104]
    be00:	mov	w0, #0x6                   	// #6
    be04:	cmp	x1, x3
    be08:	b.hi	be14 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x17c>  // b.pmore
    be0c:	mov	w0, #0x0                   	// #0
    be10:	str	x3, [x4, #96]
    be14:	ret
    be18:	stp	x29, x30, [sp, #-64]!
    be1c:	mov	x29, sp
    be20:	stp	x19, x20, [sp, #16]
    be24:	mov	x19, x2
    be28:	mov	x20, x0
    be2c:	ldr	x2, [x0, #16]
    be30:	stp	x21, x22, [sp, #32]
    be34:	adrp	x21, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    be38:	str	x23, [sp, #48]
    be3c:	add	x21, x21, #0xe18
    be40:	mov	x22, x1
    be44:	cmp	x2, x21
    be48:	and	w23, w3, #0xff
    be4c:	b.eq	be54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1bc>  // b.none
    be50:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    be54:	ldr	x4, [x20]
    be58:	str	x21, [x20, #16]
    be5c:	cbz	x4, bea0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>
    be60:	cmp	x19, #0x0
    be64:	mov	x1, #0x8000                	// #32768
    be68:	csinc	x19, x19, xzr, ne  // ne = any
    be6c:	mov	w0, #0x0                   	// #0
    be70:	str	wzr, [x4, #72]
    be74:	strb	w23, [x4, #76]
    be78:	stp	xzr, xzr, [x4, #80]
    be7c:	stp	x19, x1, [x4, #96]
    be80:	str	wzr, [x4, #112]
    be84:	str	xzr, [x4, #120]
    be88:	str	wzr, [x4, #128]
    be8c:	ldp	x19, x20, [sp, #16]
    be90:	ldp	x21, x22, [sp, #32]
    be94:	ldr	x23, [sp, #48]
    be98:	ldp	x29, x30, [sp], #64
    be9c:	ret
    bea0:	mov	x1, x22
    bea4:	mov	x0, #0xe0                  	// #224
    bea8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    beac:	mov	x4, x0
    beb0:	cbz	x0, bef4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x25c>
    beb4:	adrp	x2, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    beb8:	adrp	x1, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    bebc:	add	x2, x2, #0xf30
    bec0:	add	x1, x1, #0xf00
    bec4:	adrp	x0, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    bec8:	mov	x3, #0xffffffffffffffff    	// #-1
    becc:	add	x0, x0, #0xde0
    bed0:	stp	xzr, x3, [x4]
    bed4:	str	x4, [x20]
    bed8:	stp	xzr, xzr, [x4, #16]
    bedc:	stp	x2, x1, [x20, #24]
    bee0:	stp	xzr, xzr, [x4, #32]
    bee4:	stp	xzr, xzr, [x4, #48]
    bee8:	str	x0, [x20, #56]
    beec:	str	xzr, [x4, #64]
    bef0:	b	be60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1c8>
    bef4:	mov	w0, #0x5                   	// #5
    bef8:	b	be8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1f4>
    befc:	nop
    bf00:	stp	x29, x30, [sp, #-32]!
    bf04:	mov	x29, sp
    bf08:	stp	x19, x20, [sp, #16]
    bf0c:	mov	x19, x0
    bf10:	mov	x20, x1
    bf14:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    bf18:	mov	x1, x20
    bf1c:	mov	x0, x19
    bf20:	ldp	x19, x20, [sp, #16]
    bf24:	ldp	x29, x30, [sp], #32
    bf28:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    bf2c:	nop
    bf30:	sub	sp, sp, #0xb0
    bf34:	stp	x29, x30, [sp, #16]
    bf38:	add	x29, sp, #0x10
    bf3c:	stp	x27, x28, [sp, #96]
    bf40:	mov	x28, x6
    bf44:	ldr	x6, [x6]
    bf48:	str	x5, [sp, #120]
    bf4c:	cmp	x7, x6
    bf50:	b.ls	c058 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c0>  // b.plast
    bf54:	stp	x23, x24, [sp, #64]
    bf58:	adrp	x23, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    bf5c:	mov	x24, x7
    bf60:	ldr	x23, [x23, #3936]
    bf64:	mov	x27, x3
    bf68:	stp	x19, x20, [sp, #32]
    bf6c:	mov	x19, x0
    bf70:	mov	x20, x4
    bf74:	stp	x21, x22, [sp, #48]
    bf78:	mov	x22, x1
    bf7c:	mov	x21, x2
    bf80:	stp	x25, x26, [sp, #80]
    bf84:	add	x25, x0, #0x70
    bf88:	add	x26, sp, #0x80
    bf8c:	ldr	w0, [x19, #72]
    bf90:	cmp	w0, #0x4
    bf94:	b.eq	c0f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x458>  // b.none
    bf98:	ldr	x1, [x27]
    bf9c:	cmp	x1, x20
    bfa0:	b.cs	c048 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3b0>  // b.hs, b.nlast
    bfa4:	cmp	w0, #0x2
    bfa8:	b.eq	c084 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3ec>  // b.none
    bfac:	b.hi	bfec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x354>  // b.pmore
    bfb0:	cbz	w0, c140 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    bfb4:	ldr	x0, [x19, #80]
    bfb8:	ldrb	w4, [x21, x1]
    bfbc:	add	x5, x0, #0x1
    bfc0:	ldr	w2, [x19, #112]
    bfc4:	lsl	w0, w0, #3
    bfc8:	str	x5, [x19, #80]
    bfcc:	cmp	x5, #0x4
    bfd0:	lsl	x0, x4, x0
    bfd4:	orr	w0, w2, w0
    bfd8:	str	w0, [x19, #112]
    bfdc:	b.eq	c170 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d8>  // b.none
    bfe0:	add	x1, x1, #0x1
    bfe4:	str	x1, [x27]
    bfe8:	b	c040 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    bfec:	cmp	w0, #0x3
    bff0:	b.ne	c060 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c8>  // b.any
    bff4:	ldr	x0, [x19, #104]
    bff8:	ldr	x1, [x19, #96]
    bffc:	cmp	x1, x0
    c000:	b.cc	c1d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x540>  // b.lo, b.ul, b.last
    c004:	stp	xzr, xzr, [sp, #128]
    c008:	mov	x2, x26
    c00c:	mov	x1, x22
    c010:	stp	xzr, xzr, [sp, #144]
    c014:	mov	x0, x19
    c018:	stp	x23, x25, [sp, #136]
    c01c:	stp	xzr, xzr, [sp, #160]
    c020:	bl	3860 <lzma_version_string@@XZ_5.0+0x148>
    c024:	cbnz	w0, c1f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x558>
    c028:	ldr	x0, [x19]
    c02c:	ldr	x1, [x19, #88]
    c030:	bl	12df8 <lzma_mf_is_supported@@XZ_5.0+0x1e38>
    c034:	ldr	x6, [x28]
    c038:	mov	w0, #0x4                   	// #4
    c03c:	str	w0, [x19, #72]
    c040:	cmp	x6, x24
    c044:	b.cc	bf8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2f4>  // b.lo, b.ul, b.last
    c048:	ldp	x19, x20, [sp, #32]
    c04c:	ldp	x21, x22, [sp, #48]
    c050:	ldp	x23, x24, [sp, #64]
    c054:	ldp	x25, x26, [sp, #80]
    c058:	mov	w0, #0x0                   	// #0
    c05c:	b	c074 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3dc>
    c060:	ldp	x19, x20, [sp, #32]
    c064:	mov	w0, #0xb                   	// #11
    c068:	ldp	x21, x22, [sp, #48]
    c06c:	ldp	x23, x24, [sp, #64]
    c070:	ldp	x25, x26, [sp, #80]
    c074:	ldp	x29, x30, [sp, #16]
    c078:	ldp	x27, x28, [sp, #96]
    c07c:	add	sp, sp, #0xb0
    c080:	ret
    c084:	ldp	x2, x4, [x19, #80]
    c088:	add	x8, x1, #0x1
    c08c:	ldrb	w0, [x21, x1]
    c090:	str	x8, [x27]
    c094:	lsl	w5, w2, #3
    c098:	add	x1, x2, #0x1
    c09c:	cmp	x1, #0x7
    c0a0:	lsl	x0, x0, x5
    c0a4:	orr	x0, x0, x4
    c0a8:	stp	x1, x0, [x19, #80]
    c0ac:	b.ls	c040 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>  // b.plast
    c0b0:	mov	x1, #0xffffffc000000000    	// #-274877906944
    c0b4:	add	x0, x0, x1
    c0b8:	mov	x1, #0xffffffbfffffffff    	// #-274877906945
    c0bc:	cmp	x0, x1
    c0c0:	ldrb	w0, [x19, #76]
    c0c4:	cset	w1, cc  // cc = lo, ul, last
    c0c8:	tst	w1, w0
    c0cc:	b.ne	c1c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x528>  // b.any
    c0d0:	mov	x0, x25
    c0d4:	bl	1ade8 <lzma_mode_is_supported@@XZ_5.0+0x59f0>
    c0d8:	mov	w1, #0x3                   	// #3
    c0dc:	add	x0, x0, #0x8, lsl #12
    c0e0:	str	w1, [x19, #72]
    c0e4:	str	xzr, [x19, #80]
    c0e8:	str	x0, [x19, #104]
    c0ec:	b	bff8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x360>
    c0f0:	ldr	w1, [sp, #176]
    c0f4:	mov	x7, x24
    c0f8:	ldr	x0, [x19]
    c0fc:	str	w1, [sp]
    c100:	ldr	x5, [sp, #120]
    c104:	mov	x6, x28
    c108:	ldr	x8, [x19, #24]
    c10c:	mov	x4, x20
    c110:	mov	x3, x27
    c114:	mov	x2, x21
    c118:	mov	x1, x22
    c11c:	blr	x8
    c120:	ldp	x29, x30, [sp, #16]
    c124:	ldp	x19, x20, [sp, #32]
    c128:	ldp	x21, x22, [sp, #48]
    c12c:	ldp	x23, x24, [sp, #64]
    c130:	ldp	x25, x26, [sp, #80]
    c134:	ldp	x27, x28, [sp, #96]
    c138:	add	sp, sp, #0xb0
    c13c:	ret
    c140:	ldrb	w1, [x21, x1]
    c144:	mov	x0, x25
    c148:	bl	1ad58 <lzma_mode_is_supported@@XZ_5.0+0x5960>
    c14c:	tst	w0, #0xff
    c150:	b.ne	c1c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x528>  // b.any
    c154:	ldr	x0, [x27]
    c158:	mov	w1, #0x1                   	// #1
    c15c:	str	w1, [x19, #72]
    c160:	add	x0, x0, #0x1
    c164:	str	x0, [x27]
    c168:	ldr	x6, [x28]
    c16c:	b	c040 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    c170:	cmn	w0, #0x1
    c174:	ldrb	w2, [x19, #76]
    c178:	cset	w4, ne  // ne = any
    c17c:	tst	w4, w2
    c180:	b.ne	c19c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x504>  // b.any
    c184:	add	x1, x1, #0x1
    c188:	mov	w0, #0x2                   	// #2
    c18c:	str	x1, [x27]
    c190:	str	w0, [x19, #72]
    c194:	str	xzr, [x19, #80]
    c198:	b	c040 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    c19c:	sub	w2, w0, #0x1
    c1a0:	orr	w2, w2, w2, lsr #2
    c1a4:	orr	w2, w2, w2, lsr #3
    c1a8:	orr	w2, w2, w2, lsr #4
    c1ac:	orr	w2, w2, w2, lsr #8
    c1b0:	orr	w2, w2, w2, lsr #16
    c1b4:	add	w2, w2, #0x1
    c1b8:	cmp	w0, w2
    c1bc:	b.eq	c184 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4ec>  // b.none
    c1c0:	mov	w0, #0x7                   	// #7
    c1c4:	ldp	x19, x20, [sp, #32]
    c1c8:	ldp	x21, x22, [sp, #48]
    c1cc:	ldp	x23, x24, [sp, #64]
    c1d0:	ldp	x25, x26, [sp, #80]
    c1d4:	b	c074 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3dc>
    c1d8:	mov	w0, #0x6                   	// #6
    c1dc:	ldp	x19, x20, [sp, #32]
    c1e0:	ldp	x21, x22, [sp, #48]
    c1e4:	ldp	x23, x24, [sp, #64]
    c1e8:	ldp	x25, x26, [sp, #80]
    c1ec:	b	c074 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3dc>
    c1f0:	ldp	x19, x20, [sp, #32]
    c1f4:	ldp	x21, x22, [sp, #48]
    c1f8:	ldp	x23, x24, [sp, #64]
    c1fc:	ldp	x25, x26, [sp, #80]
    c200:	b	c074 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3dc>
    c204:	nop

000000000000c208 <lzma_alone_decoder@@XZ_5.0>:
    c208:	stp	x29, x30, [sp, #-64]!
    c20c:	mov	x29, sp
    c210:	stp	x19, x20, [sp, #16]
    c214:	mov	x20, x0
    c218:	stp	x23, x24, [sp, #48]
    c21c:	mov	x23, x1
    c220:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    c224:	mov	w19, w0
    c228:	cbz	w0, c240 <lzma_alone_decoder@@XZ_5.0+0x38>
    c22c:	mov	w0, w19
    c230:	ldp	x19, x20, [sp, #16]
    c234:	ldp	x23, x24, [sp, #48]
    c238:	ldp	x29, x30, [sp], #64
    c23c:	ret
    c240:	stp	x21, x22, [sp, #32]
    c244:	adrp	x22, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    c248:	add	x22, x22, #0xe18
    c24c:	ldp	x24, x21, [x20, #48]
    c250:	ldr	x0, [x21, #16]
    c254:	cmp	x0, x22
    c258:	b.eq	c268 <lzma_alone_decoder@@XZ_5.0+0x60>  // b.none
    c25c:	mov	x1, x24
    c260:	mov	x0, x21
    c264:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c268:	ldr	x2, [x21]
    c26c:	str	x22, [x21, #16]
    c270:	cbz	x2, c2c4 <lzma_alone_decoder@@XZ_5.0+0xbc>
    c274:	ldr	x3, [x20, #56]
    c278:	cmp	x23, #0x0
    c27c:	mov	x0, #0x1                   	// #1
    c280:	mov	x4, #0x8000                	// #32768
    c284:	csel	x1, x23, x0, ne  // ne = any
    c288:	ldp	x21, x22, [sp, #32]
    c28c:	str	wzr, [x2, #72]
    c290:	strb	wzr, [x2, #76]
    c294:	stp	xzr, xzr, [x2, #80]
    c298:	stp	x1, x4, [x2, #96]
    c29c:	str	wzr, [x2, #112]
    c2a0:	str	xzr, [x2, #120]
    c2a4:	str	wzr, [x2, #128]
    c2a8:	strb	w0, [x3, #88]
    c2ac:	strb	w0, [x3, #91]
    c2b0:	mov	w0, w19
    c2b4:	ldp	x19, x20, [sp, #16]
    c2b8:	ldp	x23, x24, [sp, #48]
    c2bc:	ldp	x29, x30, [sp], #64
    c2c0:	ret
    c2c4:	mov	x1, x24
    c2c8:	mov	x0, #0xe0                  	// #224
    c2cc:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    c2d0:	mov	x2, x0
    c2d4:	cbz	x0, c318 <lzma_alone_decoder@@XZ_5.0+0x110>
    c2d8:	adrp	x3, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    c2dc:	adrp	x1, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    c2e0:	add	x3, x3, #0xf30
    c2e4:	add	x1, x1, #0xf00
    c2e8:	adrp	x0, b000 <lzma_vli_encode@@XZ_5.0+0xb88>
    c2ec:	add	x0, x0, #0xde0
    c2f0:	str	x2, [x21]
    c2f4:	mov	x4, #0xffffffffffffffff    	// #-1
    c2f8:	stp	x3, x1, [x21, #24]
    c2fc:	str	x0, [x21, #56]
    c300:	stp	xzr, x4, [x2]
    c304:	stp	xzr, xzr, [x2, #16]
    c308:	stp	xzr, xzr, [x2, #32]
    c30c:	stp	xzr, xzr, [x2, #48]
    c310:	str	xzr, [x2, #64]
    c314:	b	c274 <lzma_alone_decoder@@XZ_5.0+0x6c>
    c318:	mov	x0, x20
    c31c:	mov	w19, #0x5                   	// #5
    c320:	bl	3350 <lzma_end@plt>
    c324:	ldp	x21, x22, [sp, #32]
    c328:	b	c22c <lzma_alone_decoder@@XZ_5.0+0x24>
    c32c:	nop
    c330:	ldr	x1, [x0, #48]
    c334:	cbz	x1, c344 <lzma_alone_decoder@@XZ_5.0+0x13c>
    c338:	ldr	x0, [x0]
    c33c:	mov	x16, x1
    c340:	br	x16
    c344:	mov	w0, #0x0                   	// #0
    c348:	ret
    c34c:	nop
    c350:	stp	x29, x30, [sp, #-32]!
    c354:	mov	x29, sp
    c358:	ldr	x6, [x0, #56]
    c35c:	stp	x19, x20, [sp, #16]
    c360:	mov	x19, x0
    c364:	mov	x20, x3
    c368:	cbz	x6, c394 <lzma_alone_decoder@@XZ_5.0+0x18c>
    c36c:	ldr	x0, [x0]
    c370:	blr	x6
    c374:	cmp	w0, #0x0
    c378:	ccmp	x20, #0x0, #0x4, eq  // eq = none
    c37c:	b.eq	c388 <lzma_alone_decoder@@XZ_5.0+0x180>  // b.none
    c380:	mov	w0, #0x0                   	// #0
    c384:	str	x20, [x19, #72]
    c388:	ldp	x19, x20, [sp, #16]
    c38c:	ldp	x29, x30, [sp], #32
    c390:	ret
    c394:	mov	x0, #0x8000                	// #32768
    c398:	str	x0, [x1]
    c39c:	mov	x4, x1
    c3a0:	mov	w0, #0x0                   	// #0
    c3a4:	ldr	x1, [x19, #72]
    c3a8:	str	x1, [x2]
    c3ac:	cbz	x3, c388 <lzma_alone_decoder@@XZ_5.0+0x180>
    c3b0:	ldr	x0, [x4]
    c3b4:	cmp	x0, x3
    c3b8:	b.ls	c380 <lzma_alone_decoder@@XZ_5.0+0x178>  // b.plast
    c3bc:	mov	w0, #0x6                   	// #6
    c3c0:	b	c388 <lzma_alone_decoder@@XZ_5.0+0x180>
    c3c4:	nop
    c3c8:	stp	x29, x30, [sp, #-64]!
    c3cc:	mov	x29, sp
    c3d0:	stp	x19, x20, [sp, #16]
    c3d4:	mov	x20, x2
    c3d8:	mov	x19, x0
    c3dc:	ldr	x2, [x0, #16]
    c3e0:	stp	x21, x22, [sp, #32]
    c3e4:	adrp	x22, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c3e8:	str	x23, [sp, #48]
    c3ec:	add	x22, x22, #0x3c8
    c3f0:	mov	w21, w3
    c3f4:	cmp	x2, x22
    c3f8:	mov	x23, x1
    c3fc:	b.eq	c404 <lzma_alone_decoder@@XZ_5.0+0x1fc>  // b.none
    c400:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c404:	str	x22, [x19, #16]
    c408:	ands	w22, w21, #0xffffffe0
    c40c:	b.ne	c440 <lzma_alone_decoder@@XZ_5.0+0x238>  // b.any
    c410:	ldr	x0, [x19]
    c414:	cbz	x0, c45c <lzma_alone_decoder@@XZ_5.0+0x254>
    c418:	cmp	x20, #0x0
    c41c:	stp	w21, wzr, [x0, #80]
    c420:	csinc	x20, x20, xzr, ne  // ne = any
    c424:	str	x20, [x0, #72]
    c428:	mov	w0, w22
    c42c:	ldp	x19, x20, [sp, #16]
    c430:	ldp	x21, x22, [sp, #32]
    c434:	ldr	x23, [sp, #48]
    c438:	ldp	x29, x30, [sp], #64
    c43c:	ret
    c440:	mov	w22, #0x8                   	// #8
    c444:	mov	w0, w22
    c448:	ldp	x19, x20, [sp, #16]
    c44c:	ldp	x21, x22, [sp, #32]
    c450:	ldr	x23, [sp, #48]
    c454:	ldp	x29, x30, [sp], #64
    c458:	ret
    c45c:	mov	x1, x23
    c460:	mov	x0, #0x58                  	// #88
    c464:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    c468:	cbz	x0, c4b4 <lzma_alone_decoder@@XZ_5.0+0x2ac>
    c46c:	adrp	x4, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c470:	adrp	x3, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c474:	add	x4, x4, #0x4f0
    c478:	add	x3, x3, #0x4c0
    c47c:	adrp	x2, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c480:	adrp	x1, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c484:	add	x2, x2, #0x330
    c488:	add	x1, x1, #0x350
    c48c:	mov	x5, #0xffffffffffffffff    	// #-1
    c490:	str	x0, [x19]
    c494:	stp	xzr, x5, [x0]
    c498:	stp	xzr, xzr, [x0, #16]
    c49c:	stp	x4, x3, [x19, #24]
    c4a0:	stp	xzr, xzr, [x0, #32]
    c4a4:	stp	xzr, xzr, [x0, #48]
    c4a8:	stp	x2, x1, [x19, #48]
    c4ac:	str	xzr, [x0, #64]
    c4b0:	b	c418 <lzma_alone_decoder@@XZ_5.0+0x210>
    c4b4:	mov	w22, #0x5                   	// #5
    c4b8:	b	c428 <lzma_alone_decoder@@XZ_5.0+0x220>
    c4bc:	nop
    c4c0:	stp	x29, x30, [sp, #-32]!
    c4c4:	mov	x29, sp
    c4c8:	stp	x19, x20, [sp, #16]
    c4cc:	mov	x19, x0
    c4d0:	mov	x20, x1
    c4d4:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c4d8:	mov	x1, x20
    c4dc:	mov	x0, x19
    c4e0:	ldp	x19, x20, [sp, #16]
    c4e4:	ldp	x29, x30, [sp], #32
    c4e8:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    c4ec:	nop
    c4f0:	sub	sp, sp, #0x70
    c4f4:	stp	x29, x30, [sp, #16]
    c4f8:	add	x29, sp, #0x10
    c4fc:	ldr	w8, [x0, #84]
    c500:	stp	x19, x20, [sp, #32]
    c504:	mov	x19, x0
    c508:	mov	x20, x1
    c50c:	stp	x21, x22, [sp, #48]
    c510:	cmp	w8, #0x1
    c514:	mov	x22, x3
    c518:	str	x23, [sp, #64]
    c51c:	mov	x21, x4
    c520:	mov	x23, x2
    c524:	b.eq	c5a8 <lzma_alone_decoder@@XZ_5.0+0x3a0>  // b.none
    c528:	cmp	w8, #0x2
    c52c:	b.eq	c5e8 <lzma_alone_decoder@@XZ_5.0+0x3e0>  // b.none
    c530:	cbz	w8, c554 <lzma_alone_decoder@@XZ_5.0+0x34c>
    c534:	mov	w8, #0xb                   	// #11
    c538:	mov	w0, w8
    c53c:	ldp	x29, x30, [sp, #16]
    c540:	ldp	x19, x20, [sp, #32]
    c544:	ldp	x21, x22, [sp, #48]
    c548:	ldr	x23, [sp, #64]
    c54c:	add	sp, sp, #0x70
    c550:	ret
    c554:	ldr	x2, [x3]
    c558:	cmp	x2, x4
    c55c:	b.cs	c538 <lzma_alone_decoder@@XZ_5.0+0x330>  // b.hs, b.nlast
    c560:	ldrb	w2, [x23, x2]
    c564:	mov	w3, #0x1                   	// #1
    c568:	str	w3, [x0, #84]
    c56c:	stp	x5, x6, [sp, #88]
    c570:	cmp	w2, #0xfd
    c574:	str	x7, [sp, #104]
    c578:	ldr	x2, [x0, #72]
    c57c:	b.eq	c620 <lzma_alone_decoder@@XZ_5.0+0x418>  // b.none
    c580:	bl	be18 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x180>
    c584:	mov	w8, w0
    c588:	cbnz	w0, c538 <lzma_alone_decoder@@XZ_5.0+0x330>
    c58c:	ldr	w0, [x19, #80]
    c590:	mov	w8, #0x2                   	// #2
    c594:	tbnz	w0, #0, c538 <lzma_alone_decoder@@XZ_5.0+0x330>
    c598:	mov	w8, #0x4                   	// #4
    c59c:	ldp	x5, x6, [sp, #88]
    c5a0:	ldr	x7, [sp, #104]
    c5a4:	tbnz	w0, #2, c538 <lzma_alone_decoder@@XZ_5.0+0x330>
    c5a8:	ldr	w1, [sp, #112]
    c5ac:	mov	x2, x23
    c5b0:	ldr	x0, [x19]
    c5b4:	str	w1, [sp]
    c5b8:	mov	x4, x21
    c5bc:	mov	x3, x22
    c5c0:	ldr	x8, [x19, #24]
    c5c4:	mov	x1, x20
    c5c8:	blr	x8
    c5cc:	mov	w8, w0
    c5d0:	cmp	w0, #0x1
    c5d4:	b.ne	c538 <lzma_alone_decoder@@XZ_5.0+0x330>  // b.any
    c5d8:	ldr	w0, [x19, #80]
    c5dc:	tbz	w0, #3, c538 <lzma_alone_decoder@@XZ_5.0+0x330>
    c5e0:	mov	w0, #0x2                   	// #2
    c5e4:	str	w0, [x19, #84]
    c5e8:	ldr	x0, [x22]
    c5ec:	mov	w8, #0x9                   	// #9
    c5f0:	cmp	x0, x21
    c5f4:	b.cc	c538 <lzma_alone_decoder@@XZ_5.0+0x330>  // b.lo, b.ul, b.last
    c5f8:	ldr	w0, [sp, #112]
    c5fc:	ldp	x29, x30, [sp, #16]
    c600:	cmp	w0, #0x3
    c604:	cset	w8, eq  // eq = none
    c608:	mov	w0, w8
    c60c:	ldp	x19, x20, [sp, #32]
    c610:	ldp	x21, x22, [sp, #48]
    c614:	ldr	x23, [sp, #64]
    c618:	add	sp, sp, #0x70
    c61c:	ret
    c620:	ldr	w3, [x0, #80]
    c624:	bl	e998 <lzma_stream_buffer_decode@@XZ_5.0+0x238>
    c628:	mov	w8, w0
    c62c:	ldp	x5, x6, [sp, #88]
    c630:	ldr	x7, [sp, #104]
    c634:	cbz	w0, c5a8 <lzma_alone_decoder@@XZ_5.0+0x3a0>
    c638:	b	c538 <lzma_alone_decoder@@XZ_5.0+0x330>
    c63c:	nop

000000000000c640 <lzma_auto_decoder@@XZ_5.0>:
    c640:	stp	x29, x30, [sp, #-64]!
    c644:	mov	x29, sp
    c648:	stp	x19, x20, [sp, #16]
    c64c:	mov	x20, x1
    c650:	stp	x21, x22, [sp, #32]
    c654:	mov	w22, w2
    c658:	mov	x21, x0
    c65c:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    c660:	mov	w19, w0
    c664:	cbz	w0, c67c <lzma_auto_decoder@@XZ_5.0+0x3c>
    c668:	mov	w0, w19
    c66c:	ldp	x19, x20, [sp, #16]
    c670:	ldp	x21, x22, [sp, #32]
    c674:	ldp	x29, x30, [sp], #64
    c678:	ret
    c67c:	stp	x23, x24, [sp, #48]
    c680:	adrp	x19, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c684:	add	x19, x19, #0x3c8
    c688:	ldp	x24, x23, [x21, #48]
    c68c:	ldr	x0, [x23, #16]
    c690:	cmp	x0, x19
    c694:	b.eq	c6a4 <lzma_auto_decoder@@XZ_5.0+0x64>  // b.none
    c698:	mov	x1, x24
    c69c:	mov	x0, x23
    c6a0:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c6a4:	str	x19, [x23, #16]
    c6a8:	ands	w19, w22, #0xffffffe0
    c6ac:	b.ne	c6f0 <lzma_auto_decoder@@XZ_5.0+0xb0>  // b.any
    c6b0:	ldr	x0, [x23]
    c6b4:	cbz	x0, c704 <lzma_auto_decoder@@XZ_5.0+0xc4>
    c6b8:	ldr	x2, [x21, #56]
    c6bc:	cmp	x20, #0x0
    c6c0:	mov	x1, #0x1                   	// #1
    c6c4:	csel	x20, x20, x1, ne  // ne = any
    c6c8:	ldp	x23, x24, [sp, #48]
    c6cc:	str	x20, [x0, #72]
    c6d0:	stp	w22, wzr, [x0, #80]
    c6d4:	mov	w0, w19
    c6d8:	strb	w1, [x2, #88]
    c6dc:	strb	w1, [x2, #91]
    c6e0:	ldp	x19, x20, [sp, #16]
    c6e4:	ldp	x21, x22, [sp, #32]
    c6e8:	ldp	x29, x30, [sp], #64
    c6ec:	ret
    c6f0:	mov	w19, #0x8                   	// #8
    c6f4:	mov	x0, x21
    c6f8:	bl	3350 <lzma_end@plt>
    c6fc:	ldp	x23, x24, [sp, #48]
    c700:	b	c668 <lzma_auto_decoder@@XZ_5.0+0x28>
    c704:	mov	x1, x24
    c708:	mov	x0, #0x58                  	// #88
    c70c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    c710:	cbz	x0, c75c <lzma_auto_decoder@@XZ_5.0+0x11c>
    c714:	adrp	x4, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c718:	adrp	x3, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c71c:	add	x4, x4, #0x4f0
    c720:	add	x3, x3, #0x4c0
    c724:	adrp	x2, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c728:	adrp	x1, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    c72c:	add	x2, x2, #0x330
    c730:	add	x1, x1, #0x350
    c734:	str	x0, [x23]
    c738:	mov	x5, #0xffffffffffffffff    	// #-1
    c73c:	stp	x4, x3, [x23, #24]
    c740:	stp	x2, x1, [x23, #48]
    c744:	stp	xzr, x5, [x0]
    c748:	stp	xzr, xzr, [x0, #16]
    c74c:	stp	xzr, xzr, [x0, #32]
    c750:	stp	xzr, xzr, [x0, #48]
    c754:	str	xzr, [x0, #64]
    c758:	b	c6b8 <lzma_auto_decoder@@XZ_5.0+0x78>
    c75c:	mov	w19, #0x5                   	// #5
    c760:	b	c6f4 <lzma_auto_decoder@@XZ_5.0+0xb4>
    c764:	nop

000000000000c768 <lzma_block_buffer_decode@@XZ_5.0>:
    c768:	sub	sp, sp, #0xc0
    c76c:	stp	x29, x30, [sp, #16]
    c770:	add	x29, sp, #0x10
    c774:	stp	x23, x24, [sp, #64]
    c778:	cbz	x3, c8d0 <lzma_block_buffer_decode@@XZ_5.0+0x168>
    c77c:	stp	x19, x20, [sp, #32]
    c780:	mov	x23, x7
    c784:	mov	x19, x3
    c788:	stp	x21, x22, [sp, #48]
    c78c:	mov	x20, x6
    c790:	mov	x21, x2
    c794:	stp	x25, x26, [sp, #80]
    c798:	mov	x22, x5
    c79c:	mov	x26, x1
    c7a0:	mov	x25, x4
    c7a4:	ldr	x1, [x3]
    c7a8:	cbz	x2, c8c0 <lzma_block_buffer_decode@@XZ_5.0+0x158>
    c7ac:	cmp	x20, #0x0
    c7b0:	mov	w24, #0xb                   	// #11
    c7b4:	ccmp	x25, x1, #0x0, ne  // ne = any
    c7b8:	b.cc	c8a0 <lzma_block_buffer_decode@@XZ_5.0+0x138>  // b.lo, b.ul, b.last
    c7bc:	ldr	x1, [x20]
    c7c0:	cmp	x23, x1
    c7c4:	cbz	x22, c89c <lzma_block_buffer_decode@@XZ_5.0+0x134>
    c7c8:	b.cc	c8a0 <lzma_block_buffer_decode@@XZ_5.0+0x138>  // b.lo, b.ul, b.last
    c7cc:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    c7d0:	str	x27, [sp, #96]
    c7d4:	movi	v0.4s, #0x0
    c7d8:	add	x27, sp, #0x70
    c7dc:	ldr	q1, [x1, #336]
    c7e0:	mov	x2, x0
    c7e4:	mov	x1, x26
    c7e8:	mov	x0, x27
    c7ec:	str	xzr, [sp, #112]
    c7f0:	stur	q1, [sp, #120]
    c7f4:	stur	q0, [sp, #136]
    c7f8:	stur	q0, [sp, #152]
    c7fc:	stur	q0, [sp, #168]
    c800:	bl	cbc8 <lzma_block_buffer_decode@@XZ_5.0+0x460>
    c804:	mov	w24, w0
    c808:	cbnz	w0, c86c <lzma_block_buffer_decode@@XZ_5.0+0x104>
    c80c:	ldr	x0, [sp, #112]
    c810:	mov	w1, #0x3                   	// #3
    c814:	ldr	x8, [sp, #136]
    c818:	str	w1, [sp]
    c81c:	mov	x5, x22
    c820:	mov	x2, x21
    c824:	mov	x7, x23
    c828:	mov	x6, x20
    c82c:	mov	x4, x25
    c830:	mov	x3, x19
    c834:	mov	x1, x26
    c838:	ldr	x22, [x19]
    c83c:	ldr	x21, [x20]
    c840:	blr	x8
    c844:	cmp	w0, #0x1
    c848:	b.eq	c86c <lzma_block_buffer_decode@@XZ_5.0+0x104>  // b.none
    c84c:	cbnz	w0, c860 <lzma_block_buffer_decode@@XZ_5.0+0xf8>
    c850:	ldr	x0, [x19]
    c854:	cmp	x0, x25
    c858:	cset	w0, ne  // ne = any
    c85c:	add	w0, w0, #0x9
    c860:	mov	w24, w0
    c864:	str	x22, [x19]
    c868:	str	x21, [x20]
    c86c:	mov	x1, x26
    c870:	mov	x0, x27
    c874:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c878:	mov	w0, w24
    c87c:	ldp	x29, x30, [sp, #16]
    c880:	ldp	x19, x20, [sp, #32]
    c884:	ldp	x21, x22, [sp, #48]
    c888:	ldp	x23, x24, [sp, #64]
    c88c:	ldp	x25, x26, [sp, #80]
    c890:	ldr	x27, [sp, #96]
    c894:	add	sp, sp, #0xc0
    c898:	ret
    c89c:	b.eq	c7cc <lzma_block_buffer_decode@@XZ_5.0+0x64>  // b.none
    c8a0:	mov	w0, w24
    c8a4:	ldp	x29, x30, [sp, #16]
    c8a8:	ldp	x19, x20, [sp, #32]
    c8ac:	ldp	x21, x22, [sp, #48]
    c8b0:	ldp	x23, x24, [sp, #64]
    c8b4:	ldp	x25, x26, [sp, #80]
    c8b8:	add	sp, sp, #0xc0
    c8bc:	ret
    c8c0:	cmp	x4, x1
    c8c4:	mov	w24, #0xb                   	// #11
    c8c8:	b.eq	c7ac <lzma_block_buffer_decode@@XZ_5.0+0x44>  // b.none
    c8cc:	b	c8a0 <lzma_block_buffer_decode@@XZ_5.0+0x138>
    c8d0:	mov	w24, #0xb                   	// #11
    c8d4:	mov	w0, w24
    c8d8:	ldp	x29, x30, [sp, #16]
    c8dc:	ldp	x23, x24, [sp, #64]
    c8e0:	add	sp, sp, #0xc0
    c8e4:	ret
    c8e8:	stp	x29, x30, [sp, #-32]!
    c8ec:	mov	x29, sp
    c8f0:	stp	x19, x20, [sp, #16]
    c8f4:	mov	x19, x0
    c8f8:	mov	x20, x1
    c8fc:	add	x0, x0, #0x8
    c900:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    c904:	mov	x1, x20
    c908:	mov	x0, x19
    c90c:	ldp	x19, x20, [sp, #16]
    c910:	ldp	x29, x30, [sp], #32
    c914:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    c918:	sub	sp, sp, #0x70
    c91c:	stp	x29, x30, [sp, #16]
    c920:	add	x29, sp, #0x10
    c924:	stp	x19, x20, [sp, #32]
    c928:	mov	x19, x0
    c92c:	ldr	w0, [x0]
    c930:	stp	x21, x22, [sp, #48]
    c934:	mov	x20, x3
    c938:	mov	x21, x4
    c93c:	stp	x25, x26, [sp, #80]
    c940:	cmp	w0, #0x1
    c944:	mov	x25, x2
    c948:	b.eq	c978 <lzma_block_buffer_decode@@XZ_5.0+0x210>  // b.none
    c94c:	cmp	w0, #0x2
    c950:	b.eq	ca90 <lzma_block_buffer_decode@@XZ_5.0+0x328>  // b.none
    c954:	mov	w22, #0xb                   	// #11
    c958:	cbz	w0, c9cc <lzma_block_buffer_decode@@XZ_5.0+0x264>
    c95c:	mov	w0, w22
    c960:	ldp	x29, x30, [sp, #16]
    c964:	ldp	x19, x20, [sp, #32]
    c968:	ldp	x21, x22, [sp, #48]
    c96c:	ldp	x25, x26, [sp, #80]
    c970:	add	sp, sp, #0x70
    c974:	ret
    c978:	ldr	x1, [x19, #88]
    c97c:	b	c9a0 <lzma_block_buffer_decode@@XZ_5.0+0x238>
    c980:	ldr	x0, [x20]
    c984:	add	x3, x0, #0x1
    c988:	cmp	x0, x21
    c98c:	b.cs	cb18 <lzma_block_buffer_decode@@XZ_5.0+0x3b0>  // b.hs, b.nlast
    c990:	ldrb	w0, [x25, x0]
    c994:	str	x3, [x20]
    c998:	str	x1, [x19, #88]
    c99c:	cbnz	w0, ca70 <lzma_block_buffer_decode@@XZ_5.0+0x308>
    c9a0:	tst	x1, #0x3
    c9a4:	add	x1, x1, #0x1
    c9a8:	b.ne	c980 <lzma_block_buffer_decode@@XZ_5.0+0x218>  // b.any
    c9ac:	ldr	x22, [x19, #80]
    c9b0:	ldr	w0, [x22, #8]
    c9b4:	cbz	w0, caf8 <lzma_block_buffer_decode@@XZ_5.0+0x390>
    c9b8:	ldrb	w1, [x19, #224]
    c9bc:	cbz	w1, cb8c <lzma_block_buffer_decode@@XZ_5.0+0x424>
    c9c0:	mov	w1, #0x2                   	// #2
    c9c4:	str	w1, [x19]
    c9c8:	b	ca98 <lzma_block_buffer_decode@@XZ_5.0+0x330>
    c9cc:	ldr	w8, [sp, #112]
    c9d0:	ldr	x0, [x19, #8]
    c9d4:	str	w8, [sp]
    c9d8:	stp	x23, x24, [sp, #64]
    c9dc:	mov	x24, x5
    c9e0:	mov	x23, x6
    c9e4:	ldr	x8, [x19, #32]
    c9e8:	str	x27, [sp, #96]
    c9ec:	ldr	x26, [x3]
    c9f0:	ldr	x27, [x6]
    c9f4:	blr	x8
    c9f8:	ldr	x1, [x19, #104]
    c9fc:	mov	x3, #0x7fffffffffffffff    	// #9223372036854775807
    ca00:	ldr	x2, [x19, #88]
    ca04:	cmp	x1, #0x0
    ca08:	csel	x1, x1, x3, ge  // ge = tcont
    ca0c:	mov	w22, w0
    ca10:	cmp	x2, x1
    ca14:	b.hi	ca68 <lzma_block_buffer_decode@@XZ_5.0+0x300>  // b.pmore
    ca18:	ldr	x0, [x20]
    ca1c:	sub	x1, x1, x2
    ca20:	sub	x26, x0, x26
    ca24:	cmp	x26, x1
    ca28:	b.hi	ca68 <lzma_block_buffer_decode@@XZ_5.0+0x300>  // b.pmore
    ca2c:	ldr	x4, [x19, #80]
    ca30:	add	x26, x26, x2
    ca34:	str	x26, [x19, #88]
    ca38:	ldr	x1, [x19, #96]
    ca3c:	ldr	x0, [x4, #24]
    ca40:	ldr	x2, [x23]
    ca44:	cmp	x0, #0x0
    ca48:	csel	x0, x0, x3, ge  // ge = tcont
    ca4c:	cmp	x1, x0
    ca50:	b.hi	ca68 <lzma_block_buffer_decode@@XZ_5.0+0x300>  // b.pmore
    ca54:	sub	x3, x2, x27
    ca58:	sub	x0, x0, x1
    ca5c:	cmp	x3, x0
    ca60:	b.ls	cb38 <lzma_block_buffer_decode@@XZ_5.0+0x3d0>  // b.plast
    ca64:	nop
    ca68:	ldp	x23, x24, [sp, #64]
    ca6c:	ldr	x27, [sp, #96]
    ca70:	mov	w22, #0x9                   	// #9
    ca74:	mov	w0, w22
    ca78:	ldp	x29, x30, [sp, #16]
    ca7c:	ldp	x19, x20, [sp, #32]
    ca80:	ldp	x21, x22, [sp, #48]
    ca84:	ldp	x25, x26, [sp, #80]
    ca88:	add	sp, sp, #0x70
    ca8c:	ret
    ca90:	ldr	x22, [x19, #80]
    ca94:	ldr	w0, [x22, #8]
    ca98:	bl	32a0 <lzma_check_size@plt>
    ca9c:	add	x3, x22, #0x28
    caa0:	mov	w22, w0
    caa4:	mov	x2, x21
    caa8:	mov	x1, x20
    caac:	mov	x0, x25
    cab0:	mov	x5, x22
    cab4:	add	x4, x19, #0x70
    cab8:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    cabc:	ldr	x0, [x19, #112]
    cac0:	cmp	x0, x22
    cac4:	b.cc	cb18 <lzma_block_buffer_decode@@XZ_5.0+0x3b0>  // b.lo, b.ul, b.last
    cac8:	ldrb	w0, [x19, #224]
    cacc:	cbnz	w0, caf8 <lzma_block_buffer_decode@@XZ_5.0+0x390>
    cad0:	ldr	x20, [x19, #80]
    cad4:	ldr	w0, [x20, #8]
    cad8:	bl	3110 <lzma_check_is_supported@plt>
    cadc:	tst	w0, #0xff
    cae0:	b.eq	caf8 <lzma_block_buffer_decode@@XZ_5.0+0x390>  // b.none
    cae4:	mov	x2, x22
    cae8:	add	x1, x19, #0x78
    caec:	add	x0, x20, #0x28
    caf0:	bl	3360 <memcmp@plt>
    caf4:	cbnz	w0, ca70 <lzma_block_buffer_decode@@XZ_5.0+0x308>
    caf8:	mov	w22, #0x1                   	// #1
    cafc:	mov	w0, w22
    cb00:	ldp	x29, x30, [sp, #16]
    cb04:	ldp	x19, x20, [sp, #32]
    cb08:	ldp	x21, x22, [sp, #48]
    cb0c:	ldp	x25, x26, [sp, #80]
    cb10:	add	sp, sp, #0x70
    cb14:	ret
    cb18:	mov	w22, #0x0                   	// #0
    cb1c:	mov	w0, w22
    cb20:	ldp	x29, x30, [sp, #16]
    cb24:	ldp	x19, x20, [sp, #32]
    cb28:	ldp	x21, x22, [sp, #48]
    cb2c:	ldp	x25, x26, [sp, #80]
    cb30:	add	sp, sp, #0x70
    cb34:	ret
    cb38:	ldrb	w0, [x19, #224]
    cb3c:	add	x1, x3, x1
    cb40:	str	x1, [x19, #96]
    cb44:	cbz	w0, cbb0 <lzma_block_buffer_decode@@XZ_5.0+0x448>
    cb48:	cmp	w22, #0x1
    cb4c:	b.ne	cba4 <lzma_block_buffer_decode@@XZ_5.0+0x43c>  // b.any
    cb50:	ldp	x0, x1, [x19, #80]
    cb54:	ldr	x2, [x0, #16]
    cb58:	cmp	x1, x2
    cb5c:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    cb60:	b.ne	ca68 <lzma_block_buffer_decode@@XZ_5.0+0x300>  // b.any
    cb64:	ldr	x2, [x0, #24]
    cb68:	ldr	x3, [x19, #96]
    cb6c:	cmp	x3, x2
    cb70:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    cb74:	b.ne	ca68 <lzma_block_buffer_decode@@XZ_5.0+0x300>  // b.any
    cb78:	ldp	x23, x24, [sp, #64]
    cb7c:	ldr	x27, [sp, #96]
    cb80:	stp	x1, x3, [x0, #16]
    cb84:	str	w22, [x19]
    cb88:	b	c9a0 <lzma_block_buffer_decode@@XZ_5.0+0x238>
    cb8c:	mov	w1, w0
    cb90:	add	x0, x19, #0x78
    cb94:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    cb98:	ldr	x22, [x19, #80]
    cb9c:	ldr	w0, [x22, #8]
    cba0:	b	c9c0 <lzma_block_buffer_decode@@XZ_5.0+0x258>
    cba4:	ldp	x23, x24, [sp, #64]
    cba8:	ldr	x27, [sp, #96]
    cbac:	b	c95c <lzma_block_buffer_decode@@XZ_5.0+0x1f4>
    cbb0:	ldr	w1, [x4, #8]
    cbb4:	add	x2, x24, x27
    cbb8:	add	x0, x19, #0x78
    cbbc:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    cbc0:	b	cb48 <lzma_block_buffer_decode@@XZ_5.0+0x3e0>
    cbc4:	nop
    cbc8:	stp	x29, x30, [sp, #-48]!
    cbcc:	mov	x29, sp
    cbd0:	stp	x19, x20, [sp, #16]
    cbd4:	mov	x19, x2
    cbd8:	adrp	x20, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    cbdc:	ldr	x2, [x0, #16]
    cbe0:	stp	x21, x22, [sp, #32]
    cbe4:	add	x20, x20, #0xbc8
    cbe8:	mov	x21, x0
    cbec:	mov	x22, x1
    cbf0:	cmp	x2, x20
    cbf4:	b.eq	cbfc <lzma_block_buffer_decode@@XZ_5.0+0x494>  // b.none
    cbf8:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    cbfc:	str	x20, [x21, #16]
    cc00:	mov	x0, x19
    cc04:	bl	31c0 <lzma_block_unpadded_size@plt>
    cc08:	cbz	x0, ccc8 <lzma_block_buffer_decode@@XZ_5.0+0x560>
    cc0c:	ldr	x0, [x19, #24]
    cc10:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    cc14:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    cc18:	add	x0, x0, x2
    cc1c:	cmp	x0, x1
    cc20:	b.ls	ccc8 <lzma_block_buffer_decode@@XZ_5.0+0x560>  // b.plast
    cc24:	ldr	x20, [x21]
    cc28:	cbz	x20, ccdc <lzma_block_buffer_decode@@XZ_5.0+0x574>
    cc2c:	stp	xzr, xzr, [x20, #88]
    cc30:	ldr	w21, [x19, #8]
    cc34:	ldr	x0, [x19, #16]
    cc38:	str	wzr, [x20]
    cc3c:	str	x19, [x20, #80]
    cc40:	cmn	x0, #0x1
    cc44:	b.eq	cc90 <lzma_block_buffer_decode@@XZ_5.0+0x528>  // b.none
    cc48:	stp	x0, xzr, [x20, #104]
    cc4c:	mov	w1, w21
    cc50:	add	x0, x20, #0x78
    cc54:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    cc58:	ldr	w1, [x19]
    cc5c:	mov	w0, #0x0                   	// #0
    cc60:	cbz	w1, cc70 <lzma_block_buffer_decode@@XZ_5.0+0x508>
    cc64:	ldrb	w0, [x19, #200]
    cc68:	cmp	w0, #0x0
    cc6c:	cset	w0, ne  // ne = any
    cc70:	mov	x1, x22
    cc74:	ldr	x2, [x19, #32]
    cc78:	ldp	x21, x22, [sp, #32]
    cc7c:	strb	w0, [x20, #224]
    cc80:	add	x0, x20, #0x8
    cc84:	ldp	x19, x20, [sp, #16]
    cc88:	ldp	x29, x30, [sp], #48
    cc8c:	b	d338 <lzma_filter_decoder_is_supported@@XZ_5.0+0x60>
    cc90:	mov	w0, w21
    cc94:	bl	32a0 <lzma_check_size@plt>
    cc98:	ldr	w1, [x19, #4]
    cc9c:	mov	x2, #0x7ffffffffffffffc    	// #9223372036854775804
    cca0:	sub	x2, x2, x1
    cca4:	mov	w1, w21
    cca8:	sub	x0, x2, w0, uxtw
    ccac:	stp	x0, xzr, [x20, #104]
    ccb0:	add	x0, x20, #0x78
    ccb4:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    ccb8:	ldr	w1, [x19]
    ccbc:	mov	w0, #0x0                   	// #0
    ccc0:	cbz	w1, cc70 <lzma_block_buffer_decode@@XZ_5.0+0x508>
    ccc4:	b	cc64 <lzma_block_buffer_decode@@XZ_5.0+0x4fc>
    ccc8:	mov	w0, #0xb                   	// #11
    cccc:	ldp	x19, x20, [sp, #16]
    ccd0:	ldp	x21, x22, [sp, #32]
    ccd4:	ldp	x29, x30, [sp], #48
    ccd8:	ret
    ccdc:	mov	x1, x22
    cce0:	mov	x0, #0xe8                  	// #232
    cce4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    cce8:	mov	x20, x0
    ccec:	cbz	x0, cd24 <lzma_block_buffer_decode@@XZ_5.0+0x5bc>
    ccf0:	adrp	x1, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    ccf4:	adrp	x0, c000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>
    ccf8:	add	x1, x1, #0x918
    ccfc:	add	x0, x0, #0x8e8
    cd00:	mov	x2, #0xffffffffffffffff    	// #-1
    cd04:	str	x20, [x21]
    cd08:	stp	xzr, x2, [x20, #8]
    cd0c:	stp	xzr, xzr, [x20, #24]
    cd10:	stp	x1, x0, [x21, #24]
    cd14:	stp	xzr, xzr, [x20, #40]
    cd18:	stp	xzr, xzr, [x20, #56]
    cd1c:	str	xzr, [x20, #72]
    cd20:	b	cc2c <lzma_block_buffer_decode@@XZ_5.0+0x4c4>
    cd24:	mov	w0, #0x5                   	// #5
    cd28:	b	cccc <lzma_block_buffer_decode@@XZ_5.0+0x564>
    cd2c:	nop

000000000000cd30 <lzma_block_decoder@@XZ_5.0>:
    cd30:	stp	x29, x30, [sp, #-48]!
    cd34:	mov	x29, sp
    cd38:	stp	x19, x20, [sp, #16]
    cd3c:	mov	x20, x0
    cd40:	str	x21, [sp, #32]
    cd44:	mov	x21, x1
    cd48:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    cd4c:	mov	w19, w0
    cd50:	cbz	w0, cd68 <lzma_block_decoder@@XZ_5.0+0x38>
    cd54:	mov	w0, w19
    cd58:	ldp	x19, x20, [sp, #16]
    cd5c:	ldr	x21, [sp, #32]
    cd60:	ldp	x29, x30, [sp], #48
    cd64:	ret
    cd68:	ldp	x1, x0, [x20, #48]
    cd6c:	mov	x2, x21
    cd70:	bl	cbc8 <lzma_block_buffer_decode@@XZ_5.0+0x460>
    cd74:	mov	w19, w0
    cd78:	cbnz	w0, cda0 <lzma_block_decoder@@XZ_5.0+0x70>
    cd7c:	ldr	x0, [x20, #56]
    cd80:	mov	w1, #0x1                   	// #1
    cd84:	ldr	x21, [sp, #32]
    cd88:	strb	w1, [x0, #88]
    cd8c:	strb	w1, [x0, #91]
    cd90:	mov	w0, w19
    cd94:	ldp	x19, x20, [sp, #16]
    cd98:	ldp	x29, x30, [sp], #48
    cd9c:	ret
    cda0:	mov	x0, x20
    cda4:	bl	3350 <lzma_end@plt>
    cda8:	b	cd54 <lzma_block_decoder@@XZ_5.0+0x24>
    cdac:	nop

000000000000cdb0 <lzma_block_header_decode@@XZ_5.0>:
    cdb0:	stp	x29, x30, [sp, #-96]!
    cdb4:	mov	x3, #0xffffffffffffffff    	// #-1
    cdb8:	mov	x29, sp
    cdbc:	stp	x19, x20, [sp, #16]
    cdc0:	mov	x19, x0
    cdc4:	stp	x21, x22, [sp, #32]
    cdc8:	mov	x22, x1
    cdcc:	ldr	w1, [x0]
    cdd0:	ldr	x0, [x0, #32]
    cdd4:	mov	x21, x2
    cdd8:	cmp	w1, #0x1
    cddc:	stp	x3, xzr, [x0]
    cde0:	stp	x3, xzr, [x0, #16]
    cde4:	stp	x3, xzr, [x0, #32]
    cde8:	stp	x3, xzr, [x0, #48]
    cdec:	stp	x3, xzr, [x0, #64]
    cdf0:	b.ls	cdfc <lzma_block_header_decode@@XZ_5.0+0x4c>  // b.plast
    cdf4:	mov	w0, #0x1                   	// #1
    cdf8:	str	w0, [x19]
    cdfc:	strb	wzr, [x19, #200]
    ce00:	mov	w20, #0xb                   	// #11
    ce04:	ldr	w1, [x19, #4]
    ce08:	ldrb	w0, [x21]
    ce0c:	add	w0, w0, #0x1
    ce10:	cmp	w1, w0, lsl #2
    ce14:	lsl	w0, w0, #2
    ce18:	b.ne	ceec <lzma_block_header_decode@@XZ_5.0+0x13c>  // b.any
    ce1c:	ldr	w1, [x19, #8]
    ce20:	cmp	w1, #0xf
    ce24:	b.hi	ceec <lzma_block_header_decode@@XZ_5.0+0x13c>  // b.pmore
    ce28:	stp	x23, x24, [sp, #48]
    ce2c:	sub	w24, w0, #0x4
    ce30:	mov	x1, x24
    ce34:	mov	x0, x21
    ce38:	mov	w2, #0x0                   	// #0
    ce3c:	bl	31f0 <lzma_crc32@plt>
    ce40:	ldr	w1, [x21, w24, uxtw]
    ce44:	cmp	w0, w1
    ce48:	b.ne	cf30 <lzma_block_header_decode@@XZ_5.0+0x180>  // b.any
    ce4c:	ldrb	w0, [x21, #1]
    ce50:	tst	w0, #0x3c
    ce54:	b.ne	cf8c <lzma_block_header_decode@@XZ_5.0+0x1dc>  // b.any
    ce58:	mov	x1, #0x2                   	// #2
    ce5c:	stp	x25, x26, [sp, #64]
    ce60:	add	x25, sp, #0x58
    ce64:	str	x1, [sp, #88]
    ce68:	tbnz	w0, #6, cf00 <lzma_block_header_decode@@XZ_5.0+0x150>
    ce6c:	mov	x0, #0xffffffffffffffff    	// #-1
    ce70:	str	x0, [x19, #16]
    ce74:	ldrsb	w0, [x21, #1]
    ce78:	tbnz	w0, #31, cfe4 <lzma_block_header_decode@@XZ_5.0+0x234>
    ce7c:	mov	x0, #0xffffffffffffffff    	// #-1
    ce80:	str	x0, [x19, #24]
    ce84:	ldrb	w26, [x21, #1]
    ce88:	mov	x23, #0x0                   	// #0
    ce8c:	and	x26, x26, #0x3
    ce90:	ldr	x0, [x19, #32]
    ce94:	mov	x1, x22
    ce98:	mov	x4, x24
    ce9c:	mov	x3, x25
    cea0:	mov	x2, x21
    cea4:	add	x0, x0, x23, lsl #4
    cea8:	bl	3530 <lzma_filter_flags_decode@plt>
    ceac:	add	x1, x23, #0x1
    ceb0:	mov	w20, w0
    ceb4:	cbnz	w0, cfa8 <lzma_block_header_decode@@XZ_5.0+0x1f8>
    ceb8:	cmp	x26, x23
    cebc:	mov	x23, x1
    cec0:	b.ne	ce90 <lzma_block_header_decode@@XZ_5.0+0xe0>  // b.any
    cec4:	sub	x21, x21, #0x1
    cec8:	ldr	x0, [sp, #88]
    cecc:	b	ced8 <lzma_block_header_decode@@XZ_5.0+0x128>
    ced0:	ldrb	w1, [x21, x0]
    ced4:	cbnz	w1, cf4c <lzma_block_header_decode@@XZ_5.0+0x19c>
    ced8:	cmp	x24, x0
    cedc:	add	x0, x0, #0x1
    cee0:	b.hi	ced0 <lzma_block_header_decode@@XZ_5.0+0x120>  // b.pmore
    cee4:	ldp	x23, x24, [sp, #48]
    cee8:	ldp	x25, x26, [sp, #64]
    ceec:	mov	w0, w20
    cef0:	ldp	x19, x20, [sp, #16]
    cef4:	ldp	x21, x22, [sp, #32]
    cef8:	ldp	x29, x30, [sp], #96
    cefc:	ret
    cf00:	mov	x4, x24
    cf04:	mov	x3, x25
    cf08:	mov	x2, x21
    cf0c:	add	x0, x19, #0x10
    cf10:	mov	x1, #0x0                   	// #0
    cf14:	bl	33f0 <lzma_vli_decode@plt>
    cf18:	mov	w20, w0
    cf1c:	cbnz	w0, cee4 <lzma_block_header_decode@@XZ_5.0+0x134>
    cf20:	mov	x0, x19
    cf24:	bl	31c0 <lzma_block_unpadded_size@plt>
    cf28:	cbnz	x0, ce74 <lzma_block_header_decode@@XZ_5.0+0xc4>
    cf2c:	ldp	x25, x26, [sp, #64]
    cf30:	mov	w20, #0x9                   	// #9
    cf34:	mov	w0, w20
    cf38:	ldp	x19, x20, [sp, #16]
    cf3c:	ldp	x21, x22, [sp, #32]
    cf40:	ldp	x23, x24, [sp, #48]
    cf44:	ldp	x29, x30, [sp], #96
    cf48:	ret
    cf4c:	mov	x20, #0x0                   	// #0
    cf50:	mov	x21, #0xffffffffffffffff    	// #-1
    cf54:	str	x0, [sp, #88]
    cf58:	ldr	x0, [x19, #32]
    cf5c:	mov	x1, x22
    cf60:	add	x0, x0, x20
    cf64:	ldr	x0, [x0, #8]
    cf68:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    cf6c:	ldr	x0, [x19, #32]
    cf70:	add	x1, x0, x20
    cf74:	str	x21, [x0, x20]
    cf78:	add	x20, x20, #0x10
    cf7c:	cmp	x20, #0x40
    cf80:	str	xzr, [x1, #8]
    cf84:	b.ne	cf58 <lzma_block_header_decode@@XZ_5.0+0x1a8>  // b.any
    cf88:	ldp	x25, x26, [sp, #64]
    cf8c:	mov	w20, #0x8                   	// #8
    cf90:	mov	w0, w20
    cf94:	ldp	x19, x20, [sp, #16]
    cf98:	ldp	x21, x22, [sp, #32]
    cf9c:	ldp	x23, x24, [sp, #48]
    cfa0:	ldp	x29, x30, [sp], #96
    cfa4:	ret
    cfa8:	mov	x21, #0x0                   	// #0
    cfac:	mov	x23, #0xffffffffffffffff    	// #-1
    cfb0:	ldr	x0, [x19, #32]
    cfb4:	mov	x1, x22
    cfb8:	add	x0, x0, x21
    cfbc:	ldr	x0, [x0, #8]
    cfc0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    cfc4:	ldr	x0, [x19, #32]
    cfc8:	add	x1, x0, x21
    cfcc:	str	x23, [x0, x21]
    cfd0:	add	x21, x21, #0x10
    cfd4:	cmp	x21, #0x40
    cfd8:	str	xzr, [x1, #8]
    cfdc:	b.ne	cfb0 <lzma_block_header_decode@@XZ_5.0+0x200>  // b.any
    cfe0:	b	cee4 <lzma_block_header_decode@@XZ_5.0+0x134>
    cfe4:	mov	x4, x24
    cfe8:	mov	x3, x25
    cfec:	mov	x2, x21
    cff0:	add	x0, x19, #0x18
    cff4:	mov	x1, #0x0                   	// #0
    cff8:	bl	33f0 <lzma_vli_decode@plt>
    cffc:	mov	w20, w0
    d000:	cbz	w0, ce84 <lzma_block_header_decode@@XZ_5.0+0xd4>
    d004:	b	cee4 <lzma_block_header_decode@@XZ_5.0+0x134>

000000000000d008 <lzma_easy_decoder_memusage@@XZ_5.0>:
    d008:	stp	x29, x30, [sp, #-224]!
    d00c:	mov	w1, w0
    d010:	mov	x29, sp
    d014:	str	x19, [sp, #16]
    d018:	add	x19, sp, #0x20
    d01c:	mov	x0, x19
    d020:	bl	4090 <lzma_block_total_size@@XZ_5.0+0x28>
    d024:	tst	w0, #0xff
    d028:	b.ne	d040 <lzma_easy_decoder_memusage@@XZ_5.0+0x38>  // b.any
    d02c:	mov	x0, x19
    d030:	bl	3310 <lzma_raw_decoder_memusage@plt>
    d034:	ldr	x19, [sp, #16]
    d038:	ldp	x29, x30, [sp], #224
    d03c:	ret
    d040:	mov	x0, #0xffffffff            	// #4294967295
    d044:	ldr	x19, [sp, #16]
    d048:	ldp	x29, x30, [sp], #224
    d04c:	ret

000000000000d050 <lzma_raw_buffer_decode@@XZ_5.0>:
    d050:	sub	sp, sp, #0xe0
    d054:	cmp	x2, #0x0
    d058:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    d05c:	stp	x29, x30, [sp, #16]
    d060:	add	x29, sp, #0x10
    d064:	stp	x21, x22, [sp, #48]
    d068:	mov	w22, #0xb                   	// #11
    d06c:	b.eq	d180 <lzma_raw_buffer_decode@@XZ_5.0+0x130>  // b.none
    d070:	stp	x25, x26, [sp, #80]
    d074:	mov	x25, x2
    d078:	mov	w22, #0xb                   	// #11
    d07c:	ldr	x2, [x3]
    d080:	stp	x19, x20, [sp, #32]
    d084:	mov	x19, x3
    d088:	stp	x23, x24, [sp, #64]
    d08c:	cmp	x2, x4
    d090:	mov	x24, x4
    d094:	b.hi	d194 <lzma_raw_buffer_decode@@XZ_5.0+0x144>  // b.pmore
    d098:	cmp	x5, #0x0
    d09c:	mov	x21, x5
    d0a0:	mov	x20, x6
    d0a4:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    d0a8:	b.eq	d194 <lzma_raw_buffer_decode@@XZ_5.0+0x144>  // b.none
    d0ac:	ldr	x2, [x6]
    d0b0:	mov	x23, x7
    d0b4:	cmp	x2, x7
    d0b8:	b.hi	d194 <lzma_raw_buffer_decode@@XZ_5.0+0x144>  // b.pmore
    d0bc:	adrp	x2, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    d0c0:	stp	x27, x28, [sp, #96]
    d0c4:	add	x27, sp, #0x90
    d0c8:	movi	v0.4s, #0x0
    d0cc:	mov	x28, x1
    d0d0:	ldr	q1, [x2, #336]
    d0d4:	mov	x2, x0
    d0d8:	mov	x0, x27
    d0dc:	str	xzr, [sp, #144]
    d0e0:	stur	q0, [sp, #168]
    d0e4:	stur	q1, [sp, #152]
    d0e8:	stur	q0, [sp, #184]
    d0ec:	stur	q0, [sp, #200]
    d0f0:	bl	d338 <lzma_filter_decoder_is_supported@@XZ_5.0+0x60>
    d0f4:	mov	w22, w0
    d0f8:	cbnz	w0, d1b4 <lzma_raw_buffer_decode@@XZ_5.0+0x164>
    d0fc:	mov	w26, #0x3                   	// #3
    d100:	str	w26, [sp]
    d104:	ldr	x0, [sp, #144]
    d108:	mov	x5, x21
    d10c:	ldr	x8, [x19]
    d110:	mov	x7, x23
    d114:	ldr	x9, [sp, #168]
    d118:	mov	x6, x20
    d11c:	mov	x4, x24
    d120:	mov	x3, x19
    d124:	mov	x2, x25
    d128:	mov	x1, x28
    d12c:	str	x8, [sp, #120]
    d130:	ldr	x21, [x20]
    d134:	blr	x9
    d138:	cmp	w0, #0x1
    d13c:	b.eq	d164 <lzma_raw_buffer_decode@@XZ_5.0+0x114>  // b.none
    d140:	mov	w22, w0
    d144:	cbnz	w0, d158 <lzma_raw_buffer_decode@@XZ_5.0+0x108>
    d148:	ldr	x4, [x19]
    d14c:	mov	w22, #0xa                   	// #10
    d150:	cmp	x4, x24
    d154:	b.eq	d1d8 <lzma_raw_buffer_decode@@XZ_5.0+0x188>  // b.none
    d158:	ldr	x0, [sp, #120]
    d15c:	str	x0, [x19]
    d160:	str	x21, [x20]
    d164:	mov	x1, x28
    d168:	mov	x0, x27
    d16c:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    d170:	ldp	x19, x20, [sp, #32]
    d174:	ldp	x23, x24, [sp, #64]
    d178:	ldp	x25, x26, [sp, #80]
    d17c:	ldp	x27, x28, [sp, #96]
    d180:	mov	w0, w22
    d184:	ldp	x29, x30, [sp, #16]
    d188:	ldp	x21, x22, [sp, #48]
    d18c:	add	sp, sp, #0xe0
    d190:	ret
    d194:	mov	w0, w22
    d198:	ldp	x29, x30, [sp, #16]
    d19c:	ldp	x19, x20, [sp, #32]
    d1a0:	ldp	x21, x22, [sp, #48]
    d1a4:	ldp	x23, x24, [sp, #64]
    d1a8:	ldp	x25, x26, [sp, #80]
    d1ac:	add	sp, sp, #0xe0
    d1b0:	ret
    d1b4:	mov	w0, w22
    d1b8:	ldp	x29, x30, [sp, #16]
    d1bc:	ldp	x19, x20, [sp, #32]
    d1c0:	ldp	x21, x22, [sp, #48]
    d1c4:	ldp	x23, x24, [sp, #64]
    d1c8:	ldp	x25, x26, [sp, #80]
    d1cc:	ldp	x27, x28, [sp, #96]
    d1d0:	add	sp, sp, #0xe0
    d1d4:	ret
    d1d8:	ldr	x0, [x20]
    d1dc:	mov	w22, #0x9                   	// #9
    d1e0:	cmp	x0, x23
    d1e4:	b.ne	d158 <lzma_raw_buffer_decode@@XZ_5.0+0x108>  // b.any
    d1e8:	ldr	x0, [sp, #144]
    d1ec:	str	w26, [sp]
    d1f0:	ldr	x9, [sp, #168]
    d1f4:	str	xzr, [sp, #136]
    d1f8:	mov	x2, x25
    d1fc:	add	x6, sp, #0x88
    d200:	add	x5, sp, #0x80
    d204:	mov	x3, x19
    d208:	mov	x1, x28
    d20c:	mov	x7, #0x1                   	// #1
    d210:	blr	x9
    d214:	ldr	x0, [sp, #136]
    d218:	cmp	x0, #0x1
    d21c:	cset	w22, eq  // eq = none
    d220:	add	w22, w22, #0x9
    d224:	b	d158 <lzma_raw_buffer_decode@@XZ_5.0+0x108>
    d228:	mov	x1, #0x1                   	// #1
    d22c:	movk	x1, #0x4000, lsl #48
    d230:	cmp	x0, x1
    d234:	b.eq	d280 <lzma_raw_buffer_decode@@XZ_5.0+0x230>  // b.none
    d238:	cmp	x0, #0x21
    d23c:	b.eq	d294 <lzma_raw_buffer_decode@@XZ_5.0+0x244>  // b.none
    d240:	cmp	x0, #0x4
    d244:	b.eq	d2a4 <lzma_raw_buffer_decode@@XZ_5.0+0x254>  // b.none
    d248:	cmp	x0, #0x5
    d24c:	b.eq	d2ac <lzma_raw_buffer_decode@@XZ_5.0+0x25c>  // b.none
    d250:	cmp	x0, #0x6
    d254:	b.eq	d2b4 <lzma_raw_buffer_decode@@XZ_5.0+0x264>  // b.none
    d258:	cmp	x0, #0x7
    d25c:	b.eq	d2bc <lzma_raw_buffer_decode@@XZ_5.0+0x26c>  // b.none
    d260:	cmp	x0, #0x8
    d264:	b.eq	d2c4 <lzma_raw_buffer_decode@@XZ_5.0+0x274>  // b.none
    d268:	cmp	x0, #0x9
    d26c:	b.eq	d2cc <lzma_raw_buffer_decode@@XZ_5.0+0x27c>  // b.none
    d270:	cmp	x0, #0x3
    d274:	mov	x0, #0x0                   	// #0
    d278:	b.eq	d29c <lzma_raw_buffer_decode@@XZ_5.0+0x24c>  // b.none
    d27c:	ret
    d280:	mov	x0, #0x0                   	// #0
    d284:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    d288:	add	x1, x1, #0xbe8
    d28c:	add	x0, x1, x0, lsl #5
    d290:	ret
    d294:	mov	x0, #0x1                   	// #1
    d298:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d29c:	mov	x0, #0x8                   	// #8
    d2a0:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2a4:	mov	x0, #0x2                   	// #2
    d2a8:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2ac:	mov	x0, #0x3                   	// #3
    d2b0:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2b4:	mov	x0, #0x4                   	// #4
    d2b8:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2bc:	mov	x0, #0x5                   	// #5
    d2c0:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2c4:	mov	x0, #0x6                   	// #6
    d2c8:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2cc:	mov	x0, #0x7                   	// #7
    d2d0:	b	d284 <lzma_raw_buffer_decode@@XZ_5.0+0x234>
    d2d4:	nop

000000000000d2d8 <lzma_filter_decoder_is_supported@@XZ_5.0>:
    d2d8:	mov	x1, #0x1                   	// #1
    d2dc:	movk	x1, #0x4000, lsl #48
    d2e0:	cmp	x0, x1
    d2e4:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d2e8:	cmp	x0, #0x21
    d2ec:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d2f0:	cmp	x0, #0x4
    d2f4:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d2f8:	cmp	x0, #0x5
    d2fc:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d300:	cmp	x0, #0x6
    d304:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d308:	cmp	x0, #0x7
    d30c:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d310:	cmp	x0, #0x8
    d314:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d318:	cmp	x0, #0x9
    d31c:	b.eq	d32c <lzma_filter_decoder_is_supported@@XZ_5.0+0x54>  // b.none
    d320:	cmp	x0, #0x3
    d324:	cset	w0, eq  // eq = none
    d328:	ret
    d32c:	mov	w0, #0x1                   	// #1
    d330:	ret
    d334:	nop
    d338:	adrp	x3, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    d33c:	mov	w4, #0x0                   	// #0
    d340:	add	x3, x3, #0x228
    d344:	b	4610 <lzma_filters_copy@@XZ_5.0+0x528>

000000000000d348 <lzma_raw_decoder@@XZ_5.0>:
    d348:	stp	x29, x30, [sp, #-48]!
    d34c:	mov	x29, sp
    d350:	stp	x19, x20, [sp, #16]
    d354:	mov	x20, x0
    d358:	str	x21, [sp, #32]
    d35c:	mov	x21, x1
    d360:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    d364:	mov	w19, w0
    d368:	cbz	w0, d380 <lzma_raw_decoder@@XZ_5.0+0x38>
    d36c:	mov	w0, w19
    d370:	ldp	x19, x20, [sp, #16]
    d374:	ldr	x21, [sp, #32]
    d378:	ldp	x29, x30, [sp], #48
    d37c:	ret
    d380:	ldp	x1, x0, [x20, #48]
    d384:	mov	x2, x21
    d388:	adrp	x3, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    d38c:	mov	w4, #0x0                   	// #0
    d390:	add	x3, x3, #0x228
    d394:	bl	4610 <lzma_filters_copy@@XZ_5.0+0x528>
    d398:	mov	w19, w0
    d39c:	cbnz	w0, d3c4 <lzma_raw_decoder@@XZ_5.0+0x7c>
    d3a0:	ldr	x0, [x20, #56]
    d3a4:	mov	w1, #0x1                   	// #1
    d3a8:	ldr	x21, [sp, #32]
    d3ac:	strb	w1, [x0, #88]
    d3b0:	strb	w1, [x0, #91]
    d3b4:	mov	w0, w19
    d3b8:	ldp	x19, x20, [sp, #16]
    d3bc:	ldp	x29, x30, [sp], #48
    d3c0:	ret
    d3c4:	mov	x0, x20
    d3c8:	bl	3350 <lzma_end@plt>
    d3cc:	b	d36c <lzma_raw_decoder@@XZ_5.0+0x24>

000000000000d3d0 <lzma_raw_decoder_memusage@@XZ_5.0>:
    d3d0:	mov	x1, x0
    d3d4:	adrp	x2, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    d3d8:	add	x0, x2, #0x228
    d3dc:	b	48d0 <lzma_filters_copy@@XZ_5.0+0x7e8>

000000000000d3e0 <lzma_properties_decode@@XZ_5.0>:
    d3e0:	ldr	x4, [x0]
    d3e4:	str	xzr, [x0, #8]
    d3e8:	mov	x5, #0x1                   	// #1
    d3ec:	movk	x5, #0x4000, lsl #48
    d3f0:	cmp	x4, x5
    d3f4:	b.eq	d484 <lzma_properties_decode@@XZ_5.0+0xa4>  // b.none
    d3f8:	cmp	x4, #0x21
    d3fc:	b.eq	d490 <lzma_properties_decode@@XZ_5.0+0xb0>  // b.none
    d400:	cmp	x4, #0x4
    d404:	b.eq	d498 <lzma_properties_decode@@XZ_5.0+0xb8>  // b.none
    d408:	cmp	x4, #0x5
    d40c:	b.eq	d4a0 <lzma_properties_decode@@XZ_5.0+0xc0>  // b.none
    d410:	cmp	x4, #0x6
    d414:	b.eq	d4a8 <lzma_properties_decode@@XZ_5.0+0xc8>  // b.none
    d418:	cmp	x4, #0x7
    d41c:	b.eq	d4b0 <lzma_properties_decode@@XZ_5.0+0xd0>  // b.none
    d420:	cmp	x4, #0x8
    d424:	b.eq	d4b8 <lzma_properties_decode@@XZ_5.0+0xd8>  // b.none
    d428:	cmp	x4, #0x9
    d42c:	b.eq	d448 <lzma_properties_decode@@XZ_5.0+0x68>  // b.none
    d430:	cmp	x4, #0x3
    d434:	mov	x5, #0x8                   	// #8
    d438:	mov	w4, #0x8                   	// #8
    d43c:	b.eq	d450 <lzma_properties_decode@@XZ_5.0+0x70>  // b.none
    d440:	mov	w0, w4
    d444:	ret
    d448:	mov	x5, #0x7                   	// #7
    d44c:	nop
    d450:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    d454:	add	x4, x4, #0xbe8
    d458:	add	x4, x4, x5, lsl #5
    d45c:	ldr	x4, [x4, #24]
    d460:	cbz	x4, d470 <lzma_properties_decode@@XZ_5.0+0x90>
    d464:	add	x0, x0, #0x8
    d468:	mov	x16, x4
    d46c:	br	x16
    d470:	cmp	x3, #0x0
    d474:	cset	w4, ne  // ne = any
    d478:	lsl	w4, w4, #3
    d47c:	mov	w0, w4
    d480:	ret
    d484:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    d488:	ldr	x4, [x4, #3928]
    d48c:	b	d464 <lzma_properties_decode@@XZ_5.0+0x84>
    d490:	mov	x5, #0x1                   	// #1
    d494:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>
    d498:	mov	x5, #0x2                   	// #2
    d49c:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>
    d4a0:	mov	x5, #0x3                   	// #3
    d4a4:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>
    d4a8:	mov	x5, #0x4                   	// #4
    d4ac:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>
    d4b0:	mov	x5, #0x5                   	// #5
    d4b4:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>
    d4b8:	mov	x5, #0x6                   	// #6
    d4bc:	b	d450 <lzma_properties_decode@@XZ_5.0+0x70>

000000000000d4c0 <lzma_filter_flags_decode@@XZ_5.0>:
    d4c0:	stp	x29, x30, [sp, #-80]!
    d4c4:	mov	x29, sp
    d4c8:	stp	x19, x20, [sp, #16]
    d4cc:	mov	x19, x0
    d4d0:	mov	x20, x4
    d4d4:	stp	x21, x22, [sp, #32]
    d4d8:	mov	x22, x2
    d4dc:	mov	x21, x3
    d4e0:	str	x23, [sp, #48]
    d4e4:	mov	x23, x1
    d4e8:	str	xzr, [x0, #8]
    d4ec:	mov	x1, #0x0                   	// #0
    d4f0:	bl	33f0 <lzma_vli_decode@plt>
    d4f4:	cbnz	w0, d558 <lzma_filter_flags_decode@@XZ_5.0+0x98>
    d4f8:	ldr	x1, [x19]
    d4fc:	mov	x0, #0x3fffffffffffffff    	// #4611686018427387903
    d500:	cmp	x1, x0
    d504:	b.hi	d56c <lzma_filter_flags_decode@@XZ_5.0+0xac>  // b.pmore
    d508:	mov	x4, x20
    d50c:	mov	x3, x21
    d510:	mov	x2, x22
    d514:	add	x0, sp, #0x48
    d518:	mov	x1, #0x0                   	// #0
    d51c:	bl	33f0 <lzma_vli_decode@plt>
    d520:	cbnz	w0, d558 <lzma_filter_flags_decode@@XZ_5.0+0x98>
    d524:	ldr	x2, [x21]
    d528:	ldr	x3, [sp, #72]
    d52c:	sub	x4, x20, x2
    d530:	cmp	x4, x3
    d534:	b.cc	d56c <lzma_filter_flags_decode@@XZ_5.0+0xac>  // b.lo, b.ul, b.last
    d538:	add	x2, x22, x2
    d53c:	mov	x1, x23
    d540:	mov	x0, x19
    d544:	bl	3280 <lzma_properties_decode@plt>
    d548:	ldr	x1, [x21]
    d54c:	ldr	x2, [sp, #72]
    d550:	add	x1, x1, x2
    d554:	str	x1, [x21]
    d558:	ldp	x19, x20, [sp, #16]
    d55c:	ldp	x21, x22, [sp, #32]
    d560:	ldr	x23, [sp, #48]
    d564:	ldp	x29, x30, [sp], #80
    d568:	ret
    d56c:	mov	w0, #0x9                   	// #9
    d570:	ldp	x19, x20, [sp, #16]
    d574:	ldp	x21, x22, [sp, #32]
    d578:	ldr	x23, [sp, #48]
    d57c:	ldp	x29, x30, [sp], #80
    d580:	ret
    d584:	nop
    d588:	stp	x29, x30, [sp, #-48]!
    d58c:	mov	x29, sp
    d590:	stp	x21, x22, [sp, #32]
    d594:	mov	x21, x1
    d598:	mov	x22, x2
    d59c:	ldr	x1, [x0, #32]
    d5a0:	stp	x19, x20, [sp, #16]
    d5a4:	mov	x19, x0
    d5a8:	mov	x20, x3
    d5ac:	mov	x0, #0x1                   	// #1
    d5b0:	bl	31b0 <lzma_index_memusage@plt>
    d5b4:	str	x0, [x21]
    d5b8:	ldr	x0, [x19, #8]
    d5bc:	str	x0, [x22]
    d5c0:	mov	w0, #0x0                   	// #0
    d5c4:	cbz	x20, d5e0 <lzma_filter_flags_decode@@XZ_5.0+0x120>
    d5c8:	ldr	x1, [x21]
    d5cc:	mov	w0, #0x6                   	// #6
    d5d0:	cmp	x1, x20
    d5d4:	b.hi	d5e0 <lzma_filter_flags_decode@@XZ_5.0+0x120>  // b.pmore
    d5d8:	mov	w0, #0x0                   	// #0
    d5dc:	str	x20, [x19, #8]
    d5e0:	ldp	x19, x20, [sp, #16]
    d5e4:	ldp	x21, x22, [sp, #32]
    d5e8:	ldp	x29, x30, [sp], #48
    d5ec:	ret
    d5f0:	stp	x29, x30, [sp, #-32]!
    d5f4:	mov	x29, sp
    d5f8:	stp	x19, x20, [sp, #16]
    d5fc:	mov	x19, x0
    d600:	mov	x20, x1
    d604:	ldr	x0, [x0, #16]
    d608:	bl	3410 <lzma_index_end@plt>
    d60c:	mov	x1, x20
    d610:	mov	x0, x19
    d614:	ldp	x19, x20, [sp, #16]
    d618:	ldp	x29, x30, [sp], #32
    d61c:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    d620:	stp	x29, x30, [sp, #-112]!
    d624:	mov	x29, sp
    d628:	stp	x21, x22, [sp, #32]
    d62c:	ldr	x22, [x3]
    d630:	stp	x19, x20, [sp, #16]
    d634:	mov	x19, x0
    d638:	str	x1, [sp, #104]
    d63c:	mov	x20, x2
    d640:	cmp	x22, x4
    d644:	b.cs	d948 <lzma_filter_flags_decode@@XZ_5.0+0x488>  // b.hs, b.nlast
    d648:	mov	x21, x4
    d64c:	mov	x5, x22
    d650:	stp	x23, x24, [sp, #48]
    d654:	add	x24, x0, #0x38
    d658:	mov	w23, #0x5                   	// #5
    d65c:	stp	x25, x26, [sp, #64]
    d660:	add	x26, x0, #0x30
    d664:	mov	w25, #0x6                   	// #6
    d668:	stp	x27, x28, [sp, #80]
    d66c:	mov	x28, x3
    d670:	add	x27, x0, #0x28
    d674:	ldr	w0, [x19]
    d678:	cmp	w0, #0x4
    d67c:	b.hi	d71c <lzma_filter_flags_decode@@XZ_5.0+0x25c>  // b.pmore
    d680:	cmp	w0, #0x2
    d684:	b.hi	d86c <lzma_filter_flags_decode@@XZ_5.0+0x3ac>  // b.pmore
    d688:	cmp	w0, #0x1
    d68c:	b.eq	d838 <lzma_filter_flags_decode@@XZ_5.0+0x378>  // b.none
    d690:	cmp	w0, #0x2
    d694:	b.ne	d7f4 <lzma_filter_flags_decode@@XZ_5.0+0x334>  // b.any
    d698:	ldr	x1, [x19, #32]
    d69c:	mov	x0, #0x1                   	// #1
    d6a0:	bl	31b0 <lzma_index_memusage@plt>
    d6a4:	ldr	x1, [x19, #8]
    d6a8:	cmp	x0, x1
    d6ac:	b.hi	d994 <lzma_filter_flags_decode@@XZ_5.0+0x4d4>  // b.pmore
    d6b0:	ldr	x0, [x19, #16]
    d6b4:	ldr	x1, [x19, #32]
    d6b8:	bl	65f0 <lzma_index_end@@XZ_5.0+0x40>
    d6bc:	ldr	x1, [x19, #32]
    d6c0:	mov	w0, #0x3                   	// #3
    d6c4:	ldr	x5, [x28]
    d6c8:	cmp	x1, #0x0
    d6cc:	csel	w0, w23, w0, eq  // eq = none
    d6d0:	str	w0, [x19]
    d6d4:	cmp	x21, x5
    d6d8:	b.hi	d674 <lzma_filter_flags_decode@@XZ_5.0+0x1b4>  // b.pmore
    d6dc:	ldp	x23, x24, [sp, #48]
    d6e0:	sub	x1, x5, x22
    d6e4:	ldp	x25, x26, [sp, #64]
    d6e8:	mov	w3, #0x0                   	// #0
    d6ec:	ldp	x27, x28, [sp, #80]
    d6f0:	add	x0, x20, x22
    d6f4:	ldr	w2, [x19, #64]
    d6f8:	str	w3, [sp, #104]
    d6fc:	bl	31f0 <lzma_crc32@plt>
    d700:	str	w0, [x19, #64]
    d704:	ldr	w3, [sp, #104]
    d708:	ldp	x19, x20, [sp, #16]
    d70c:	mov	w0, w3
    d710:	ldp	x21, x22, [sp, #32]
    d714:	ldp	x29, x30, [sp], #112
    d718:	ret
    d71c:	cmp	w0, #0x6
    d720:	b.eq	d8c8 <lzma_filter_flags_decode@@XZ_5.0+0x408>  // b.none
    d724:	cmp	w0, #0x7
    d728:	b.ne	d794 <lzma_filter_flags_decode@@XZ_5.0+0x2d4>  // b.any
    d72c:	sub	x20, x20, #0x1
    d730:	b	d764 <lzma_filter_flags_decode@@XZ_5.0+0x2a4>
    d734:	ldr	x0, [x19, #56]
    d738:	str	x5, [x28]
    d73c:	ldr	w1, [x19, #64]
    d740:	ldrb	w6, [x20, x5]
    d744:	add	x3, x0, #0x1
    d748:	lsl	w0, w0, #3
    d74c:	lsr	w0, w1, w0
    d750:	cmp	w6, w0, uxtb
    d754:	b.ne	d7d0 <lzma_filter_flags_decode@@XZ_5.0+0x310>  // b.any
    d758:	str	x3, [x19, #56]
    d75c:	cmp	x3, #0x3
    d760:	b.hi	d908 <lzma_filter_flags_decode@@XZ_5.0+0x448>  // b.pmore
    d764:	cmp	x21, x5
    d768:	add	x5, x5, #0x1
    d76c:	b.ne	d734 <lzma_filter_flags_decode@@XZ_5.0+0x274>  // b.any
    d770:	mov	w3, #0x0                   	// #0
    d774:	mov	w0, w3
    d778:	ldp	x19, x20, [sp, #16]
    d77c:	ldp	x21, x22, [sp, #32]
    d780:	ldp	x23, x24, [sp, #48]
    d784:	ldp	x25, x26, [sp, #64]
    d788:	ldp	x27, x28, [sp, #80]
    d78c:	ldp	x29, x30, [sp], #112
    d790:	ret
    d794:	cmp	w0, #0x5
    d798:	b.ne	d814 <lzma_filter_flags_decode@@XZ_5.0+0x354>  // b.any
    d79c:	ldr	x0, [x19, #16]
    d7a0:	bl	67e8 <lzma_index_checks@@XZ_5.0+0x28>
    d7a4:	mov	w0, w0
    d7a8:	ldr	x5, [x28]
    d7ac:	str	w25, [x19]
    d7b0:	str	x0, [x19, #56]
    d7b4:	cbz	x0, d96c <lzma_filter_flags_decode@@XZ_5.0+0x4ac>
    d7b8:	ldrb	w1, [x20, x5]
    d7bc:	sub	x0, x0, #0x1
    d7c0:	add	x5, x5, #0x1
    d7c4:	str	x5, [x28]
    d7c8:	str	x0, [x19, #56]
    d7cc:	cbz	w1, d6d4 <lzma_filter_flags_decode@@XZ_5.0+0x214>
    d7d0:	mov	w3, #0x9                   	// #9
    d7d4:	mov	w0, w3
    d7d8:	ldp	x19, x20, [sp, #16]
    d7dc:	ldp	x21, x22, [sp, #32]
    d7e0:	ldp	x23, x24, [sp, #48]
    d7e4:	ldp	x25, x26, [sp, #64]
    d7e8:	ldp	x27, x28, [sp, #80]
    d7ec:	ldp	x29, x30, [sp], #112
    d7f0:	ret
    d7f4:	cbnz	w0, d814 <lzma_filter_flags_decode@@XZ_5.0+0x354>
    d7f8:	ldrb	w0, [x20, x5]
    d7fc:	add	x5, x5, #0x1
    d800:	str	x5, [x28]
    d804:	cbnz	w0, d7d0 <lzma_filter_flags_decode@@XZ_5.0+0x310>
    d808:	mov	w0, #0x1                   	// #1
    d80c:	str	w0, [x19]
    d810:	b	d6d4 <lzma_filter_flags_decode@@XZ_5.0+0x214>
    d814:	ldp	x23, x24, [sp, #48]
    d818:	mov	w3, #0xb                   	// #11
    d81c:	ldp	x25, x26, [sp, #64]
    d820:	ldp	x27, x28, [sp, #80]
    d824:	mov	w0, w3
    d828:	ldp	x19, x20, [sp, #16]
    d82c:	ldp	x21, x22, [sp, #32]
    d830:	ldp	x29, x30, [sp], #112
    d834:	ret
    d838:	mov	x3, x28
    d83c:	mov	x4, x21
    d840:	mov	x2, x20
    d844:	mov	x1, x24
    d848:	add	x0, x19, #0x20
    d84c:	bl	33f0 <lzma_vli_decode@plt>
    d850:	mov	w3, w0
    d854:	cmp	w0, #0x1
    d858:	b.ne	d954 <lzma_filter_flags_decode@@XZ_5.0+0x494>  // b.any
    d85c:	mov	w0, #0x2                   	// #2
    d860:	str	w0, [x19]
    d864:	str	xzr, [x19, #56]
    d868:	b	d698 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    d86c:	cmp	w0, #0x3
    d870:	mov	x3, x28
    d874:	csel	x0, x26, x27, ne  // ne = any
    d878:	mov	x4, x21
    d87c:	mov	x2, x20
    d880:	mov	x1, x24
    d884:	bl	33f0 <lzma_vli_decode@plt>
    d888:	mov	w3, w0
    d88c:	cmp	w0, #0x1
    d890:	b.ne	d954 <lzma_filter_flags_decode@@XZ_5.0+0x494>  // b.any
    d894:	ldr	w0, [x19]
    d898:	str	xzr, [x19, #56]
    d89c:	cmp	w0, #0x3
    d8a0:	ldr	x2, [x19, #40]
    d8a4:	b.ne	d8d0 <lzma_filter_flags_decode@@XZ_5.0+0x410>  // b.any
    d8a8:	sub	x2, x2, #0x5
    d8ac:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    d8b0:	cmp	x2, x0
    d8b4:	b.cs	d7d0 <lzma_filter_flags_decode@@XZ_5.0+0x310>  // b.hs, b.nlast
    d8b8:	mov	w0, #0x4                   	// #4
    d8bc:	str	w0, [x19]
    d8c0:	ldr	x5, [x28]
    d8c4:	b	d6d4 <lzma_filter_flags_decode@@XZ_5.0+0x214>
    d8c8:	ldr	x0, [x19, #56]
    d8cc:	b	d7b4 <lzma_filter_flags_decode@@XZ_5.0+0x2f4>
    d8d0:	ldr	x0, [x19, #16]
    d8d4:	ldr	x3, [x19, #48]
    d8d8:	ldr	x1, [sp, #104]
    d8dc:	bl	3330 <lzma_index_append@plt>
    d8e0:	mov	w3, w0
    d8e4:	cbnz	w0, d938 <lzma_filter_flags_decode@@XZ_5.0+0x478>
    d8e8:	ldr	x0, [x19, #32]
    d8ec:	mov	w1, #0x3                   	// #3
    d8f0:	ldr	x5, [x28]
    d8f4:	subs	x0, x0, #0x1
    d8f8:	str	x0, [x19, #32]
    d8fc:	csel	w0, w23, w1, eq  // eq = none
    d900:	str	w0, [x19]
    d904:	b	d6d4 <lzma_filter_flags_decode@@XZ_5.0+0x214>
    d908:	ldp	x1, x0, [x19, #16]
    d90c:	mov	w3, #0x1                   	// #1
    d910:	ldp	x23, x24, [sp, #48]
    d914:	ldp	x25, x26, [sp, #64]
    d918:	ldp	x27, x28, [sp, #80]
    d91c:	str	x1, [x0]
    d920:	str	xzr, [x19, #16]
    d924:	mov	w0, w3
    d928:	ldp	x19, x20, [sp, #16]
    d92c:	ldp	x21, x22, [sp, #32]
    d930:	ldp	x29, x30, [sp], #112
    d934:	ret
    d938:	ldp	x23, x24, [sp, #48]
    d93c:	ldp	x25, x26, [sp, #64]
    d940:	ldp	x27, x28, [sp, #80]
    d944:	b	d824 <lzma_filter_flags_decode@@XZ_5.0+0x364>
    d948:	mov	x1, #0x0                   	// #0
    d94c:	mov	w3, #0x0                   	// #0
    d950:	b	d6f0 <lzma_filter_flags_decode@@XZ_5.0+0x230>
    d954:	ldr	x1, [x28]
    d958:	ldp	x23, x24, [sp, #48]
    d95c:	sub	x1, x1, x22
    d960:	ldp	x25, x26, [sp, #64]
    d964:	ldp	x27, x28, [sp, #80]
    d968:	b	d6f0 <lzma_filter_flags_decode@@XZ_5.0+0x230>
    d96c:	ldr	w2, [x19, #64]
    d970:	sub	x1, x5, x22
    d974:	add	x0, x20, x22
    d978:	str	x5, [sp, #104]
    d97c:	bl	31f0 <lzma_crc32@plt>
    d980:	str	w0, [x19, #64]
    d984:	mov	w1, #0x7                   	// #7
    d988:	str	w1, [x19]
    d98c:	ldr	x5, [sp, #104]
    d990:	b	d72c <lzma_filter_flags_decode@@XZ_5.0+0x26c>
    d994:	ldr	x1, [x28]
    d998:	mov	w3, #0x6                   	// #6
    d99c:	ldp	x23, x24, [sp, #48]
    d9a0:	sub	x1, x1, x22
    d9a4:	ldp	x25, x26, [sp, #64]
    d9a8:	ldp	x27, x28, [sp, #80]
    d9ac:	b	d6f0 <lzma_filter_flags_decode@@XZ_5.0+0x230>
    d9b0:	stp	x29, x30, [sp, #-64]!
    d9b4:	mov	x29, sp
    d9b8:	stp	x21, x22, [sp, #32]
    d9bc:	mov	x22, x2
    d9c0:	mov	x21, x3
    d9c4:	ldr	x2, [x0, #16]
    d9c8:	stp	x19, x20, [sp, #16]
    d9cc:	adrp	x19, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    d9d0:	str	x23, [sp, #48]
    d9d4:	add	x19, x19, #0x9b0
    d9d8:	mov	x20, x0
    d9dc:	cmp	x2, x19
    d9e0:	mov	x23, x1
    d9e4:	b.eq	d9ec <lzma_filter_flags_decode@@XZ_5.0+0x52c>  // b.none
    d9e8:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    d9ec:	str	x19, [x20, #16]
    d9f0:	cbz	x22, da94 <lzma_filter_flags_decode@@XZ_5.0+0x5d4>
    d9f4:	ldr	x19, [x20]
    d9f8:	cbz	x19, da54 <lzma_filter_flags_decode@@XZ_5.0+0x594>
    d9fc:	ldr	x0, [x19, #16]
    da00:	mov	x1, x23
    da04:	bl	3410 <lzma_index_end@plt>
    da08:	str	x22, [x19, #24]
    da0c:	mov	x0, x23
    da10:	str	xzr, [x22]
    da14:	bl	33e0 <lzma_index_init@plt>
    da18:	str	x0, [x19, #16]
    da1c:	cbz	x0, daac <lzma_filter_flags_decode@@XZ_5.0+0x5ec>
    da20:	cmp	x21, #0x0
    da24:	mov	w0, #0x0                   	// #0
    da28:	csinc	x21, x21, xzr, ne  // ne = any
    da2c:	str	wzr, [x19]
    da30:	str	x21, [x19, #8]
    da34:	str	xzr, [x19, #32]
    da38:	str	xzr, [x19, #56]
    da3c:	str	wzr, [x19, #64]
    da40:	ldp	x19, x20, [sp, #16]
    da44:	ldp	x21, x22, [sp, #32]
    da48:	ldr	x23, [sp, #48]
    da4c:	ldp	x29, x30, [sp], #64
    da50:	ret
    da54:	mov	x1, x23
    da58:	mov	x0, #0x48                  	// #72
    da5c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    da60:	mov	x19, x0
    da64:	cbz	x0, daac <lzma_filter_flags_decode@@XZ_5.0+0x5ec>
    da68:	adrp	x2, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    da6c:	adrp	x1, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    da70:	add	x2, x2, #0x620
    da74:	add	x1, x1, #0x5f0
    da78:	adrp	x0, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    da7c:	add	x0, x0, #0x588
    da80:	str	x19, [x20]
    da84:	str	xzr, [x19, #16]
    da88:	stp	x2, x1, [x20, #24]
    da8c:	str	x0, [x20, #56]
    da90:	b	da08 <lzma_filter_flags_decode@@XZ_5.0+0x548>
    da94:	mov	w0, #0xb                   	// #11
    da98:	ldp	x19, x20, [sp, #16]
    da9c:	ldp	x21, x22, [sp, #32]
    daa0:	ldr	x23, [sp, #48]
    daa4:	ldp	x29, x30, [sp], #64
    daa8:	ret
    daac:	mov	w0, #0x5                   	// #5
    dab0:	b	da40 <lzma_filter_flags_decode@@XZ_5.0+0x580>
    dab4:	nop

000000000000dab8 <lzma_index_decoder@@XZ_5.0>:
    dab8:	stp	x29, x30, [sp, #-80]!
    dabc:	mov	x29, sp
    dac0:	stp	x19, x20, [sp, #16]
    dac4:	stp	x21, x22, [sp, #32]
    dac8:	mov	x21, x2
    dacc:	mov	x22, x0
    dad0:	stp	x23, x24, [sp, #48]
    dad4:	mov	x23, x1
    dad8:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    dadc:	mov	w19, w0
    dae0:	cbz	w0, dafc <lzma_index_decoder@@XZ_5.0+0x44>
    dae4:	mov	w0, w19
    dae8:	ldp	x19, x20, [sp, #16]
    daec:	ldp	x21, x22, [sp, #32]
    daf0:	ldp	x23, x24, [sp, #48]
    daf4:	ldp	x29, x30, [sp], #80
    daf8:	ret
    dafc:	ldr	x24, [x22, #56]
    db00:	adrp	x20, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    db04:	add	x20, x20, #0x9b0
    db08:	ldr	x0, [x24, #16]
    db0c:	str	x25, [sp, #64]
    db10:	ldr	x25, [x22, #48]
    db14:	cmp	x0, x20
    db18:	b.eq	db28 <lzma_index_decoder@@XZ_5.0+0x70>  // b.none
    db1c:	mov	x1, x25
    db20:	mov	x0, x24
    db24:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    db28:	str	x20, [x24, #16]
    db2c:	cbz	x23, dbe4 <lzma_index_decoder@@XZ_5.0+0x12c>
    db30:	ldr	x20, [x24]
    db34:	cbz	x20, dba4 <lzma_index_decoder@@XZ_5.0+0xec>
    db38:	ldr	x0, [x20, #16]
    db3c:	mov	x1, x25
    db40:	bl	3410 <lzma_index_end@plt>
    db44:	str	x23, [x20, #24]
    db48:	mov	x0, x25
    db4c:	str	xzr, [x23]
    db50:	bl	33e0 <lzma_index_init@plt>
    db54:	str	x0, [x20, #16]
    db58:	cbz	x0, dbf8 <lzma_index_decoder@@XZ_5.0+0x140>
    db5c:	ldr	x1, [x22, #56]
    db60:	cmp	x21, #0x0
    db64:	mov	x0, #0x1                   	// #1
    db68:	csel	x21, x21, x0, ne  // ne = any
    db6c:	ldr	x25, [sp, #64]
    db70:	str	wzr, [x20]
    db74:	str	x21, [x20, #8]
    db78:	str	xzr, [x20, #32]
    db7c:	str	xzr, [x20, #56]
    db80:	str	wzr, [x20, #64]
    db84:	strb	w0, [x1, #88]
    db88:	strb	w0, [x1, #91]
    db8c:	mov	w0, w19
    db90:	ldp	x19, x20, [sp, #16]
    db94:	ldp	x21, x22, [sp, #32]
    db98:	ldp	x23, x24, [sp, #48]
    db9c:	ldp	x29, x30, [sp], #80
    dba0:	ret
    dba4:	mov	x1, x25
    dba8:	mov	x0, #0x48                  	// #72
    dbac:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    dbb0:	mov	x20, x0
    dbb4:	cbz	x0, dbf8 <lzma_index_decoder@@XZ_5.0+0x140>
    dbb8:	adrp	x2, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    dbbc:	adrp	x1, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    dbc0:	add	x2, x2, #0x620
    dbc4:	add	x1, x1, #0x5f0
    dbc8:	adrp	x0, d000 <lzma_block_header_decode@@XZ_5.0+0x250>
    dbcc:	add	x0, x0, #0x588
    dbd0:	str	x20, [x24]
    dbd4:	stp	x2, x1, [x24, #24]
    dbd8:	str	x0, [x24, #56]
    dbdc:	str	xzr, [x20, #16]
    dbe0:	b	db44 <lzma_index_decoder@@XZ_5.0+0x8c>
    dbe4:	mov	w19, #0xb                   	// #11
    dbe8:	mov	x0, x22
    dbec:	bl	3350 <lzma_end@plt>
    dbf0:	ldr	x25, [sp, #64]
    dbf4:	b	dae4 <lzma_index_decoder@@XZ_5.0+0x2c>
    dbf8:	mov	w19, #0x5                   	// #5
    dbfc:	b	dbe8 <lzma_index_decoder@@XZ_5.0+0x130>

000000000000dc00 <lzma_index_buffer_decode@@XZ_5.0>:
    dc00:	stp	x29, x30, [sp, #-192]!
    dc04:	cmp	x0, #0x0
    dc08:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    dc0c:	mov	x29, sp
    dc10:	stp	x25, x26, [sp, #64]
    dc14:	mov	w26, #0xb                   	// #11
    dc18:	b.eq	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>  // b.none
    dc1c:	stp	x19, x20, [sp, #16]
    dc20:	cmp	x3, #0x0
    dc24:	mov	x19, x4
    dc28:	stp	x27, x28, [sp, #80]
    dc2c:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    dc30:	mov	x27, x3
    dc34:	mov	w26, #0xb                   	// #11
    dc38:	b.eq	de4c <lzma_index_buffer_decode@@XZ_5.0+0x24c>  // b.none
    dc3c:	mov	x6, x0
    dc40:	mov	x28, x5
    dc44:	ldr	x0, [x4]
    dc48:	cmp	x0, x5
    dc4c:	b.hi	de4c <lzma_index_buffer_decode@@XZ_5.0+0x24c>  // b.pmore
    dc50:	stp	x21, x22, [sp, #32]
    dc54:	mov	x20, x1
    dc58:	mov	x21, x2
    dc5c:	stp	x23, x24, [sp, #48]
    dc60:	mov	x0, x2
    dc64:	ldr	x24, [x1]
    dc68:	str	xzr, [x6]
    dc6c:	str	x6, [sp, #144]
    dc70:	bl	33e0 <lzma_index_init@plt>
    dc74:	str	x0, [sp, #136]
    dc78:	mov	x23, x0
    dc7c:	cbz	x0, dff0 <lzma_index_buffer_decode@@XZ_5.0+0x3f0>
    dc80:	cmp	x24, #0x0
    dc84:	str	wzr, [sp, #120]
    dc88:	ldr	x22, [x19]
    dc8c:	csinc	x24, x24, xzr, ne  // ne = any
    dc90:	str	x24, [sp, #128]
    dc94:	str	xzr, [sp, #152]
    dc98:	cmp	x28, x22
    dc9c:	str	xzr, [sp, #176]
    dca0:	str	wzr, [sp, #184]
    dca4:	b.ls	e034 <lzma_index_buffer_decode@@XZ_5.0+0x434>  // b.plast
    dca8:	add	x23, sp, #0x78
    dcac:	mov	x1, x22
    dcb0:	add	x0, x23, #0x28
    dcb4:	str	x0, [sp, #104]
    dcb8:	mov	w25, #0x5                   	// #5
    dcbc:	mov	w0, #0x0                   	// #0
    dcc0:	mov	w24, #0x3                   	// #3
    dcc4:	cmp	w0, #0x4
    dcc8:	b.hi	dd30 <lzma_index_buffer_decode@@XZ_5.0+0x130>  // b.pmore
    dccc:	cmp	w0, #0x2
    dcd0:	b.hi	defc <lzma_index_buffer_decode@@XZ_5.0+0x2fc>  // b.pmore
    dcd4:	cmp	w0, #0x1
    dcd8:	b.eq	df70 <lzma_index_buffer_decode@@XZ_5.0+0x370>  // b.none
    dcdc:	cmp	w0, #0x2
    dce0:	b.ne	dedc <lzma_index_buffer_decode@@XZ_5.0+0x2dc>  // b.any
    dce4:	ldr	x1, [sp, #152]
    dce8:	mov	x0, #0x1                   	// #1
    dcec:	bl	31b0 <lzma_index_memusage@plt>
    dcf0:	ldr	x1, [sp, #128]
    dcf4:	cmp	x0, x1
    dcf8:	b.hi	e0d0 <lzma_index_buffer_decode@@XZ_5.0+0x4d0>  // b.pmore
    dcfc:	ldr	x0, [sp, #136]
    dd00:	ldr	x1, [sp, #152]
    dd04:	bl	65f0 <lzma_index_end@@XZ_5.0+0x40>
    dd08:	ldr	x0, [sp, #152]
    dd0c:	ldr	x1, [x19]
    dd10:	cmp	x0, #0x0
    dd14:	csel	w0, w25, w24, eq  // eq = none
    dd18:	str	w0, [sp, #120]
    dd1c:	cmp	x28, x1
    dd20:	b.ls	e008 <lzma_index_buffer_decode@@XZ_5.0+0x408>  // b.plast
    dd24:	ldr	w0, [sp, #120]
    dd28:	cmp	w0, #0x4
    dd2c:	b.ls	dccc <lzma_index_buffer_decode@@XZ_5.0+0xcc>  // b.plast
    dd30:	cmp	w0, #0x6
    dd34:	b.eq	dfa4 <lzma_index_buffer_decode@@XZ_5.0+0x3a4>  // b.none
    dd38:	cmp	w0, #0x7
    dd3c:	b.ne	de64 <lzma_index_buffer_decode@@XZ_5.0+0x264>  // b.any
    dd40:	ldr	w0, [sp, #184]
    dd44:	ldr	x26, [sp, #176]
    dd48:	cmp	x28, x1
    dd4c:	b.eq	dea8 <lzma_index_buffer_decode@@XZ_5.0+0x2a8>  // b.none
    dd50:	ldrb	w5, [x27, x1]
    dd54:	lsl	w2, w26, #3
    dd58:	add	x3, x1, #0x1
    dd5c:	str	x3, [x19]
    dd60:	lsr	w2, w0, w2
    dd64:	cmp	w5, w2, uxtb
    dd68:	b.ne	dea8 <lzma_index_buffer_decode@@XZ_5.0+0x2a8>  // b.any
    dd6c:	add	x2, x26, #0x1
    dd70:	cmp	x2, #0x3
    dd74:	b.hi	de20 <lzma_index_buffer_decode@@XZ_5.0+0x220>  // b.pmore
    dd78:	cmp	x28, x3
    dd7c:	b.eq	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.none
    dd80:	ldrb	w6, [x27, x3]
    dd84:	lsl	w3, w2, #3
    dd88:	add	x5, x1, #0x2
    dd8c:	str	x5, [x19]
    dd90:	lsr	w3, w0, w3
    dd94:	cmp	w6, w3, uxtb
    dd98:	b.ne	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.any
    dd9c:	cmp	x26, #0x2
    dda0:	add	x2, x26, #0x2
    dda4:	b.eq	de20 <lzma_index_buffer_decode@@XZ_5.0+0x220>  // b.none
    dda8:	cmp	x28, x5
    ddac:	b.eq	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.none
    ddb0:	ldrb	w6, [x27, x5]
    ddb4:	lsl	w3, w2, #3
    ddb8:	add	x5, x1, #0x3
    ddbc:	str	x5, [x19]
    ddc0:	lsr	w3, w0, w3
    ddc4:	cmp	w6, w3, uxtb
    ddc8:	b.ne	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.any
    ddcc:	cmp	x26, #0x1
    ddd0:	add	x2, x26, #0x3
    ddd4:	b.eq	de20 <lzma_index_buffer_decode@@XZ_5.0+0x220>  // b.none
    ddd8:	cmp	x28, x5
    dddc:	b.eq	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.none
    dde0:	ldrb	w6, [x27, x5]
    dde4:	lsl	w3, w2, #3
    dde8:	add	x5, x1, #0x4
    ddec:	str	x5, [x19]
    ddf0:	lsr	w3, w0, w3
    ddf4:	cmp	w6, w3, uxtb
    ddf8:	b.ne	dfb4 <lzma_index_buffer_decode@@XZ_5.0+0x3b4>  // b.any
    ddfc:	cmn	x26, #0x1
    de00:	b.ne	de20 <lzma_index_buffer_decode@@XZ_5.0+0x220>  // b.any
    de04:	cmp	x28, x5
    de08:	b.eq	dfb0 <lzma_index_buffer_decode@@XZ_5.0+0x3b0>  // b.none
    de0c:	ldrb	w2, [x27, x5]
    de10:	add	x1, x1, #0x5
    de14:	str	x1, [x19]
    de18:	cmp	w2, w0, lsr #24
    de1c:	b.ne	dfb0 <lzma_index_buffer_decode@@XZ_5.0+0x3b0>  // b.any
    de20:	ldp	x1, x0, [sp, #136]
    de24:	mov	w26, #0x0                   	// #0
    de28:	ldp	x19, x20, [sp, #16]
    de2c:	ldp	x21, x22, [sp, #32]
    de30:	ldp	x23, x24, [sp, #48]
    de34:	ldp	x27, x28, [sp, #80]
    de38:	str	x1, [x0]
    de3c:	mov	w0, w26
    de40:	ldp	x25, x26, [sp, #64]
    de44:	ldp	x29, x30, [sp], #192
    de48:	ret
    de4c:	mov	w0, w26
    de50:	ldp	x19, x20, [sp, #16]
    de54:	ldp	x25, x26, [sp, #64]
    de58:	ldp	x27, x28, [sp, #80]
    de5c:	ldp	x29, x30, [sp], #192
    de60:	ret
    de64:	cmp	w0, #0x5
    de68:	b.ne	df60 <lzma_index_buffer_decode@@XZ_5.0+0x360>  // b.any
    de6c:	ldr	x0, [sp, #136]
    de70:	bl	67e8 <lzma_index_checks@@XZ_5.0+0x28>
    de74:	mov	w26, w0
    de78:	ldr	x3, [x19]
    de7c:	mov	w0, #0x6                   	// #6
    de80:	str	w0, [sp, #120]
    de84:	str	x26, [sp, #176]
    de88:	cbz	x26, e0a4 <lzma_index_buffer_decode@@XZ_5.0+0x4a4>
    de8c:	ldrb	w2, [x27, x3]
    de90:	sub	x4, x26, #0x1
    de94:	add	x1, x3, #0x1
    de98:	str	x1, [x19]
    de9c:	str	x4, [sp, #176]
    dea0:	cbz	w2, dd1c <lzma_index_buffer_decode@@XZ_5.0+0x11c>
    dea4:	nop
    dea8:	ldr	x0, [sp, #136]
    deac:	mov	x1, x21
    deb0:	mov	w26, #0x9                   	// #9
    deb4:	bl	3410 <lzma_index_end@plt>
    deb8:	ldp	x23, x24, [sp, #48]
    debc:	mov	w0, w26
    dec0:	ldp	x27, x28, [sp, #80]
    dec4:	str	x22, [x19]
    dec8:	ldp	x19, x20, [sp, #16]
    decc:	ldp	x21, x22, [sp, #32]
    ded0:	ldp	x25, x26, [sp, #64]
    ded4:	ldp	x29, x30, [sp], #192
    ded8:	ret
    dedc:	cbnz	w0, df60 <lzma_index_buffer_decode@@XZ_5.0+0x360>
    dee0:	ldrb	w0, [x27, x1]
    dee4:	add	x1, x1, #0x1
    dee8:	str	x1, [x19]
    deec:	cbnz	w0, dea8 <lzma_index_buffer_decode@@XZ_5.0+0x2a8>
    def0:	mov	w0, #0x1                   	// #1
    def4:	str	w0, [sp, #120]
    def8:	b	dd1c <lzma_index_buffer_decode@@XZ_5.0+0x11c>
    defc:	cmp	w0, #0x3
    df00:	add	x0, x23, #0x30
    df04:	ldr	x2, [sp, #104]
    df08:	mov	x4, x28
    df0c:	mov	x3, x19
    df10:	add	x1, x23, #0x38
    df14:	csel	x0, x0, x2, ne  // ne = any
    df18:	mov	x2, x27
    df1c:	bl	33f0 <lzma_vli_decode@plt>
    df20:	mov	w26, w0
    df24:	cmp	w0, #0x1
    df28:	b.ne	e040 <lzma_index_buffer_decode@@XZ_5.0+0x440>  // b.any
    df2c:	ldr	w0, [sp, #120]
    df30:	str	xzr, [sp, #176]
    df34:	cmp	w0, #0x3
    df38:	ldr	x2, [sp, #160]
    df3c:	b.ne	dfbc <lzma_index_buffer_decode@@XZ_5.0+0x3bc>  // b.any
    df40:	sub	x2, x2, #0x5
    df44:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    df48:	cmp	x2, x0
    df4c:	b.cs	dea8 <lzma_index_buffer_decode@@XZ_5.0+0x2a8>  // b.hs, b.nlast
    df50:	mov	w0, #0x4                   	// #4
    df54:	str	w0, [sp, #120]
    df58:	ldr	x1, [x19]
    df5c:	b	dd1c <lzma_index_buffer_decode@@XZ_5.0+0x11c>
    df60:	mov	x1, x21
    df64:	mov	w26, #0xb                   	// #11
    df68:	ldr	x0, [sp, #136]
    df6c:	b	deb4 <lzma_index_buffer_decode@@XZ_5.0+0x2b4>
    df70:	mov	x4, x28
    df74:	mov	x3, x19
    df78:	mov	x2, x27
    df7c:	add	x1, x23, #0x38
    df80:	add	x0, x23, #0x20
    df84:	bl	33f0 <lzma_vli_decode@plt>
    df88:	mov	w26, w0
    df8c:	cmp	w0, #0x1
    df90:	b.ne	e040 <lzma_index_buffer_decode@@XZ_5.0+0x440>  // b.any
    df94:	mov	w0, #0x2                   	// #2
    df98:	str	w0, [sp, #120]
    df9c:	str	xzr, [sp, #176]
    dfa0:	b	dce4 <lzma_index_buffer_decode@@XZ_5.0+0xe4>
    dfa4:	mov	x3, x1
    dfa8:	ldr	x26, [sp, #176]
    dfac:	b	de88 <lzma_index_buffer_decode@@XZ_5.0+0x288>
    dfb0:	mov	x2, #0x3                   	// #3
    dfb4:	str	x2, [sp, #176]
    dfb8:	b	dea8 <lzma_index_buffer_decode@@XZ_5.0+0x2a8>
    dfbc:	ldr	x0, [sp, #136]
    dfc0:	mov	x1, x21
    dfc4:	ldr	x3, [sp, #168]
    dfc8:	bl	3330 <lzma_index_append@plt>
    dfcc:	mov	w26, w0
    dfd0:	cbnz	w0, e104 <lzma_index_buffer_decode@@XZ_5.0+0x504>
    dfd4:	ldr	x0, [sp, #152]
    dfd8:	ldr	x1, [x19]
    dfdc:	subs	x0, x0, #0x1
    dfe0:	str	x0, [sp, #152]
    dfe4:	csel	w0, w25, w24, eq  // eq = none
    dfe8:	str	w0, [sp, #120]
    dfec:	b	dd1c <lzma_index_buffer_decode@@XZ_5.0+0x11c>
    dff0:	mov	w26, #0x5                   	// #5
    dff4:	ldp	x19, x20, [sp, #16]
    dff8:	ldp	x21, x22, [sp, #32]
    dffc:	ldp	x23, x24, [sp, #48]
    e000:	ldp	x27, x28, [sp, #80]
    e004:	b	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>
    e008:	ldr	w2, [sp, #184]
    e00c:	sub	x1, x1, x22
    e010:	ldr	x23, [sp, #136]
    e014:	add	x0, x27, x22
    e018:	bl	31f0 <lzma_crc32@plt>
    e01c:	mov	w26, #0x9                   	// #9
    e020:	mov	w2, w0
    e024:	mov	x1, x21
    e028:	mov	x0, x23
    e02c:	str	w2, [sp, #184]
    e030:	b	deb4 <lzma_index_buffer_decode@@XZ_5.0+0x2b4>
    e034:	mov	w2, #0x0                   	// #0
    e038:	mov	x1, #0x0                   	// #0
    e03c:	b	e014 <lzma_index_buffer_decode@@XZ_5.0+0x414>
    e040:	ldr	w2, [sp, #184]
    e044:	add	x0, x27, x22
    e048:	ldr	x1, [x19]
    e04c:	ldr	x23, [sp, #136]
    e050:	sub	x1, x1, x22
    e054:	bl	31f0 <lzma_crc32@plt>
    e058:	mov	w2, w0
    e05c:	mov	x1, x21
    e060:	mov	x0, x23
    e064:	str	w2, [sp, #184]
    e068:	bl	3410 <lzma_index_end@plt>
    e06c:	str	x22, [x19]
    e070:	cbz	w26, e14c <lzma_index_buffer_decode@@XZ_5.0+0x54c>
    e074:	cmp	w26, #0x6
    e078:	b.ne	e138 <lzma_index_buffer_decode@@XZ_5.0+0x538>  // b.any
    e07c:	ldr	x1, [sp, #152]
    e080:	mov	x0, #0x1                   	// #1
    e084:	mov	w26, #0x6                   	// #6
    e088:	bl	31b0 <lzma_index_memusage@plt>
    e08c:	ldp	x21, x22, [sp, #32]
    e090:	ldp	x23, x24, [sp, #48]
    e094:	ldp	x27, x28, [sp, #80]
    e098:	str	x0, [x20]
    e09c:	ldp	x19, x20, [sp, #16]
    e0a0:	b	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>
    e0a4:	ldr	w2, [sp, #184]
    e0a8:	sub	x1, x3, x22
    e0ac:	add	x0, x27, x22
    e0b0:	str	x3, [sp, #104]
    e0b4:	bl	31f0 <lzma_crc32@plt>
    e0b8:	str	w0, [sp, #184]
    e0bc:	ldr	x3, [sp, #104]
    e0c0:	mov	w2, #0x7                   	// #7
    e0c4:	str	w2, [sp, #120]
    e0c8:	mov	x1, x3
    e0cc:	b	dd48 <lzma_index_buffer_decode@@XZ_5.0+0x148>
    e0d0:	ldr	w2, [sp, #184]
    e0d4:	add	x0, x27, x22
    e0d8:	ldr	x1, [x19]
    e0dc:	sub	x1, x1, x22
    e0e0:	bl	31f0 <lzma_crc32@plt>
    e0e4:	mov	w2, w0
    e0e8:	mov	x1, x21
    e0ec:	ldr	x23, [sp, #136]
    e0f0:	str	w2, [sp, #184]
    e0f4:	mov	x0, x23
    e0f8:	bl	3410 <lzma_index_end@plt>
    e0fc:	str	x22, [x19]
    e100:	b	e07c <lzma_index_buffer_decode@@XZ_5.0+0x47c>
    e104:	cmp	w0, #0x1
    e108:	b.ne	e124 <lzma_index_buffer_decode@@XZ_5.0+0x524>  // b.any
    e10c:	mov	w26, #0x0                   	// #0
    e110:	ldp	x19, x20, [sp, #16]
    e114:	ldp	x21, x22, [sp, #32]
    e118:	ldp	x23, x24, [sp, #48]
    e11c:	ldp	x27, x28, [sp, #80]
    e120:	b	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>
    e124:	ldr	x0, [sp, #136]
    e128:	mov	x1, x21
    e12c:	bl	3410 <lzma_index_end@plt>
    e130:	str	x22, [x19]
    e134:	b	e074 <lzma_index_buffer_decode@@XZ_5.0+0x474>
    e138:	ldp	x19, x20, [sp, #16]
    e13c:	ldp	x21, x22, [sp, #32]
    e140:	ldp	x23, x24, [sp, #48]
    e144:	ldp	x27, x28, [sp, #80]
    e148:	b	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>
    e14c:	mov	w26, #0x9                   	// #9
    e150:	ldp	x19, x20, [sp, #16]
    e154:	ldp	x21, x22, [sp, #32]
    e158:	ldp	x23, x24, [sp, #48]
    e15c:	ldp	x27, x28, [sp, #80]
    e160:	b	de3c <lzma_index_buffer_decode@@XZ_5.0+0x23c>
    e164:	nop

000000000000e168 <lzma_index_hash_init@@XZ_5.0>:
    e168:	stp	x29, x30, [sp, #-32]!
    e16c:	mov	x29, sp
    e170:	str	x19, [sp, #16]
    e174:	mov	x19, x0
    e178:	cbz	x0, e1c4 <lzma_index_hash_init@@XZ_5.0+0x5c>
    e17c:	movi	v0.4s, #0x0
    e180:	str	wzr, [x19]
    e184:	str	xzr, [x19, #304]
    e188:	add	x0, x19, #0x28
    e18c:	str	wzr, [x19, #312]
    e190:	mov	w1, #0xa                   	// #10
    e194:	stur	q0, [x19, #8]
    e198:	stur	q0, [x19, #24]
    e19c:	stp	q0, q0, [x19, #144]
    e1a0:	str	q0, [x19, #288]
    e1a4:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    e1a8:	add	x0, x19, #0xb0
    e1ac:	mov	w1, #0xa                   	// #10
    e1b0:	bl	f3c8 <lzma_check_size@@XZ_5.0+0x28>
    e1b4:	mov	x0, x19
    e1b8:	ldr	x19, [sp, #16]
    e1bc:	ldp	x29, x30, [sp], #32
    e1c0:	ret
    e1c4:	mov	x0, #0x140                 	// #320
    e1c8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    e1cc:	mov	x19, x0
    e1d0:	cbnz	x0, e17c <lzma_index_hash_init@@XZ_5.0+0x14>
    e1d4:	mov	x0, #0x0                   	// #0
    e1d8:	b	e1b8 <lzma_index_hash_init@@XZ_5.0+0x50>
    e1dc:	nop

000000000000e1e0 <lzma_index_hash_end@@XZ_5.0>:
    e1e0:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    e1e4:	nop

000000000000e1e8 <lzma_index_hash_size@@XZ_5.0>:
    e1e8:	stp	x29, x30, [sp, #-32]!
    e1ec:	mov	x29, sp
    e1f0:	str	x19, [sp, #16]
    e1f4:	mov	x19, x0
    e1f8:	ldr	x0, [x0, #24]
    e1fc:	bl	34b0 <lzma_vli_size@plt>
    e200:	add	w0, w0, #0x1
    e204:	ldr	x1, [x19, #32]
    e208:	ldr	x19, [sp, #16]
    e20c:	add	x1, x1, #0x7
    e210:	add	x0, x1, x0
    e214:	and	x0, x0, #0xfffffffffffffffc
    e218:	ldp	x29, x30, [sp], #32
    e21c:	ret

000000000000e220 <lzma_index_hash_append@@XZ_5.0>:
    e220:	stp	x29, x30, [sp, #-80]!
    e224:	mov	x29, sp
    e228:	stp	x19, x20, [sp, #16]
    e22c:	mov	x19, x0
    e230:	ldr	w0, [x0]
    e234:	cbnz	w0, e324 <lzma_index_hash_append@@XZ_5.0+0x104>
    e238:	stp	x21, x22, [sp, #32]
    e23c:	mov	x21, x2
    e240:	sub	x2, x1, #0x5
    e244:	mov	x20, x1
    e248:	mov	w0, #0xb                   	// #11
    e24c:	mov	x1, #0x7ffffffffffffff8    	// #9223372036854775800
    e250:	cmp	x2, x1
    e254:	b.cs	e314 <lzma_index_hash_append@@XZ_5.0+0xf4>  // b.hs, b.nlast
    e258:	tbnz	x21, #63, e314 <lzma_index_hash_append@@XZ_5.0+0xf4>
    e25c:	ldp	x2, x1, [x19, #8]
    e260:	add	x0, x20, #0x3
    e264:	and	x0, x0, #0xfffffffffffffffc
    e268:	str	x23, [sp, #48]
    e26c:	add	x1, x1, x21
    e270:	add	x0, x0, x2
    e274:	stp	x0, x1, [x19, #8]
    e278:	mov	x0, x20
    e27c:	bl	34b0 <lzma_vli_size@plt>
    e280:	mov	w23, w0
    e284:	mov	x0, x21
    e288:	bl	34b0 <lzma_vli_size@plt>
    e28c:	add	w23, w23, w0
    e290:	add	x2, sp, #0x40
    e294:	ldp	x1, x0, [x19, #24]
    e298:	mov	x3, #0x10                  	// #16
    e29c:	stp	x20, x21, [sp, #64]
    e2a0:	add	x1, x1, #0x1
    e2a4:	add	x23, x0, x23
    e2a8:	stp	x1, x23, [x19, #24]
    e2ac:	add	x0, x19, #0x28
    e2b0:	mov	w1, #0xa                   	// #10
    e2b4:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    e2b8:	ldr	x20, [x19, #8]
    e2bc:	tbnz	x20, #63, e334 <lzma_index_hash_append@@XZ_5.0+0x114>
    e2c0:	ldr	x0, [x19, #16]
    e2c4:	tbnz	x0, #63, e334 <lzma_index_hash_append@@XZ_5.0+0x114>
    e2c8:	ldr	x0, [x19, #24]
    e2cc:	bl	34b0 <lzma_vli_size@plt>
    e2d0:	add	w3, w0, #0x1
    e2d4:	ldr	x2, [x19, #32]
    e2d8:	mov	x4, #0x400000000           	// #17179869184
    e2dc:	mov	w0, #0x9                   	// #9
    e2e0:	add	x1, x2, #0x7
    e2e4:	add	x1, x1, x3
    e2e8:	and	x1, x1, #0xfffffffffffffffc
    e2ec:	cmp	x1, x4
    e2f0:	b.hi	e34c <lzma_index_hash_append@@XZ_5.0+0x12c>  // b.pmore
    e2f4:	add	x20, x20, #0x18
    e2f8:	cmn	x20, x1
    e2fc:	csel	w0, wzr, w0, pl  // pl = nfrst
    e300:	ldp	x19, x20, [sp, #16]
    e304:	ldp	x21, x22, [sp, #32]
    e308:	ldr	x23, [sp, #48]
    e30c:	ldp	x29, x30, [sp], #80
    e310:	ret
    e314:	ldp	x21, x22, [sp, #32]
    e318:	ldp	x19, x20, [sp, #16]
    e31c:	ldp	x29, x30, [sp], #80
    e320:	ret
    e324:	mov	w0, #0xb                   	// #11
    e328:	ldp	x19, x20, [sp, #16]
    e32c:	ldp	x29, x30, [sp], #80
    e330:	ret
    e334:	mov	w0, #0x9                   	// #9
    e338:	ldp	x19, x20, [sp, #16]
    e33c:	ldp	x21, x22, [sp, #32]
    e340:	ldr	x23, [sp, #48]
    e344:	ldp	x29, x30, [sp], #80
    e348:	ret
    e34c:	ldp	x21, x22, [sp, #32]
    e350:	ldr	x23, [sp, #48]
    e354:	b	e318 <lzma_index_hash_append@@XZ_5.0+0xf8>

000000000000e358 <lzma_index_hash_decode@@XZ_5.0>:
    e358:	stp	x29, x30, [sp, #-144]!
    e35c:	mov	x29, sp
    e360:	stp	x23, x24, [sp, #48]
    e364:	ldr	x23, [x2]
    e368:	stp	x27, x28, [sp, #80]
    e36c:	mov	w28, #0xa                   	// #10
    e370:	cmp	x23, x3
    e374:	b.cs	e494 <lzma_index_hash_decode@@XZ_5.0+0x13c>  // b.hs, b.nlast
    e378:	mov	x27, x1
    e37c:	stp	x19, x20, [sp, #16]
    e380:	mov	x20, x23
    e384:	stp	x21, x22, [sp, #32]
    e388:	mov	x21, x2
    e38c:	mov	x19, x0
    e390:	stp	x25, x26, [sp, #64]
    e394:	mov	x25, x3
    e398:	add	x22, x0, #0x130
    e39c:	add	x26, x0, #0x118
    e3a0:	mov	w24, #0x4                   	// #4
    e3a4:	add	x0, sp, #0x80
    e3a8:	str	x0, [sp, #104]
    e3ac:	ldr	w0, [x19]
    e3b0:	cmp	w0, #0x4
    e3b4:	b.eq	e56c <lzma_index_hash_decode@@XZ_5.0+0x214>  // b.none
    e3b8:	b.hi	e42c <lzma_index_hash_decode@@XZ_5.0+0xd4>  // b.pmore
    e3bc:	cmp	w0, #0x1
    e3c0:	b.eq	e51c <lzma_index_hash_decode@@XZ_5.0+0x1c4>  // b.none
    e3c4:	b.ls	e4a8 <lzma_index_hash_decode@@XZ_5.0+0x150>  // b.plast
    e3c8:	cmp	w0, #0x2
    e3cc:	add	x1, x19, #0x120
    e3d0:	add	x0, x19, #0x128
    e3d4:	mov	x4, x25
    e3d8:	csel	x0, x1, x0, eq  // eq = none
    e3dc:	mov	x3, x21
    e3e0:	mov	x2, x27
    e3e4:	mov	x1, x22
    e3e8:	bl	33f0 <lzma_vli_decode@plt>
    e3ec:	mov	w28, w0
    e3f0:	cmp	w0, #0x1
    e3f4:	b.ne	e6c4 <lzma_index_hash_decode@@XZ_5.0+0x36c>  // b.any
    e3f8:	ldr	w0, [x19]
    e3fc:	str	xzr, [x19, #304]
    e400:	cmp	w0, #0x2
    e404:	ldr	x20, [x19, #288]
    e408:	b.ne	e5e0 <lzma_index_hash_decode@@XZ_5.0+0x288>  // b.any
    e40c:	sub	x20, x20, #0x5
    e410:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    e414:	cmp	x20, x0
    e418:	b.cs	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.hs, b.nlast
    e41c:	mov	w0, #0x3                   	// #3
    e420:	ldr	x20, [x21]
    e424:	str	w0, [x19]
    e428:	b	e4c8 <lzma_index_hash_decode@@XZ_5.0+0x170>
    e42c:	cmp	w0, #0x5
    e430:	b.eq	e5d8 <lzma_index_hash_decode@@XZ_5.0+0x280>  // b.none
    e434:	cmp	w0, #0x6
    e438:	b.eq	e478 <lzma_index_hash_decode@@XZ_5.0+0x120>  // b.none
    e43c:	b	e4f8 <lzma_index_hash_decode@@XZ_5.0+0x1a0>
    e440:	ldr	x2, [x19, #304]
    e444:	ldr	w0, [x19, #312]
    e448:	str	x1, [x21]
    e44c:	lsl	w2, w2, #3
    e450:	ldrb	w1, [x27, x20]
    e454:	lsr	w0, w0, w2
    e458:	cmp	w1, w0, uxtb
    e45c:	b.ne	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.any
    e460:	ldr	x0, [x19, #304]
    e464:	add	x0, x0, #0x1
    e468:	str	x0, [x19, #304]
    e46c:	cmp	x0, #0x3
    e470:	b.hi	e6a0 <lzma_index_hash_decode@@XZ_5.0+0x348>  // b.pmore
    e474:	ldr	x20, [x21]
    e478:	add	x1, x20, #0x1
    e47c:	cmp	x25, x20
    e480:	b.ne	e440 <lzma_index_hash_decode@@XZ_5.0+0xe8>  // b.any
    e484:	ldp	x19, x20, [sp, #16]
    e488:	mov	w28, #0x0                   	// #0
    e48c:	ldp	x21, x22, [sp, #32]
    e490:	ldp	x25, x26, [sp, #64]
    e494:	mov	w0, w28
    e498:	ldp	x23, x24, [sp, #48]
    e49c:	ldp	x27, x28, [sp, #80]
    e4a0:	ldp	x29, x30, [sp], #144
    e4a4:	ret
    e4a8:	cbnz	w0, e4f8 <lzma_index_hash_decode@@XZ_5.0+0x1a0>
    e4ac:	add	x0, x20, #0x1
    e4b0:	str	x0, [x21]
    e4b4:	ldrb	w1, [x27, x20]
    e4b8:	cbnz	w1, e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>
    e4bc:	mov	x20, x0
    e4c0:	mov	w0, #0x1                   	// #1
    e4c4:	str	w0, [x19]
    e4c8:	cmp	x25, x20
    e4cc:	b.hi	e3ac <lzma_index_hash_decode@@XZ_5.0+0x54>  // b.pmore
    e4d0:	mov	w28, #0x0                   	// #0
    e4d4:	ldr	w2, [x19, #312]
    e4d8:	sub	x1, x20, x23
    e4dc:	add	x0, x27, x23
    e4e0:	bl	31f0 <lzma_crc32@plt>
    e4e4:	ldp	x21, x22, [sp, #32]
    e4e8:	ldp	x25, x26, [sp, #64]
    e4ec:	str	w0, [x19, #312]
    e4f0:	ldp	x19, x20, [sp, #16]
    e4f4:	b	e494 <lzma_index_hash_decode@@XZ_5.0+0x13c>
    e4f8:	mov	w28, #0xb                   	// #11
    e4fc:	mov	w0, w28
    e500:	ldp	x19, x20, [sp, #16]
    e504:	ldp	x21, x22, [sp, #32]
    e508:	ldp	x23, x24, [sp, #48]
    e50c:	ldp	x25, x26, [sp, #64]
    e510:	ldp	x27, x28, [sp, #80]
    e514:	ldp	x29, x30, [sp], #144
    e518:	ret
    e51c:	mov	x4, x25
    e520:	mov	x3, x21
    e524:	mov	x2, x27
    e528:	mov	x1, x22
    e52c:	mov	x0, x26
    e530:	bl	33f0 <lzma_vli_decode@plt>
    e534:	mov	w28, w0
    e538:	cmp	w0, #0x1
    e53c:	b.ne	e6c4 <lzma_index_hash_decode@@XZ_5.0+0x36c>  // b.any
    e540:	ldr	x1, [x19, #24]
    e544:	ldr	x0, [x19, #280]
    e548:	cmp	x0, x1
    e54c:	b.ne	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.any
    e550:	str	xzr, [x19, #304]
    e554:	cmp	x0, #0x0
    e558:	mov	w0, #0x2                   	// #2
    e55c:	csel	w0, w24, w0, eq  // eq = none
    e560:	str	w0, [x19]
    e564:	ldr	x20, [x21]
    e568:	b	e4c8 <lzma_index_hash_decode@@XZ_5.0+0x170>
    e56c:	ldr	x0, [x19, #160]
    e570:	bl	34b0 <lzma_vli_size@plt>
    e574:	add	w0, w0, #0x1
    e578:	ldr	x1, [x19, #168]
    e57c:	mov	w2, #0x5                   	// #5
    e580:	str	w2, [x19]
    e584:	add	x0, x0, x1
    e588:	neg	x0, x0
    e58c:	and	x0, x0, #0x3
    e590:	str	x0, [x19, #304]
    e594:	cbz	x0, e6cc <lzma_index_hash_decode@@XZ_5.0+0x374>
    e598:	sub	x0, x0, #0x1
    e59c:	str	x0, [x19, #304]
    e5a0:	ldr	x0, [x21]
    e5a4:	add	x20, x0, #0x1
    e5a8:	str	x20, [x21]
    e5ac:	ldrb	w0, [x27, x0]
    e5b0:	cbz	w0, e4c8 <lzma_index_hash_decode@@XZ_5.0+0x170>
    e5b4:	mov	w28, #0x9                   	// #9
    e5b8:	mov	w0, w28
    e5bc:	ldp	x19, x20, [sp, #16]
    e5c0:	ldp	x21, x22, [sp, #32]
    e5c4:	ldp	x23, x24, [sp, #48]
    e5c8:	ldp	x25, x26, [sp, #64]
    e5cc:	ldp	x27, x28, [sp, #80]
    e5d0:	ldp	x29, x30, [sp], #144
    e5d4:	ret
    e5d8:	ldr	x0, [x19, #304]
    e5dc:	b	e594 <lzma_index_hash_decode@@XZ_5.0+0x23c>
    e5e0:	ldp	x2, x1, [x19, #144]
    e5e4:	add	x0, x20, #0x3
    e5e8:	ldr	x6, [x19, #296]
    e5ec:	and	x0, x0, #0xfffffffffffffffc
    e5f0:	str	x6, [sp, #112]
    e5f4:	add	x1, x1, x6
    e5f8:	add	x0, x0, x2
    e5fc:	stp	x0, x1, [x19, #144]
    e600:	mov	x0, x20
    e604:	bl	34b0 <lzma_vli_size@plt>
    e608:	mov	w1, w0
    e60c:	ldr	x6, [sp, #112]
    e610:	str	w1, [sp, #124]
    e614:	mov	x0, x6
    e618:	bl	34b0 <lzma_vli_size@plt>
    e61c:	ldr	w1, [sp, #124]
    e620:	mov	x3, #0x10                  	// #16
    e624:	ldr	x6, [sp, #112]
    e628:	add	w1, w1, w0
    e62c:	ldp	x2, x0, [x19, #160]
    e630:	stp	x20, x6, [sp, #128]
    e634:	add	x2, x2, #0x1
    e638:	add	x1, x0, x1
    e63c:	stp	x2, x1, [x19, #160]
    e640:	add	x0, x19, #0xb0
    e644:	mov	w1, #0xa                   	// #10
    e648:	ldr	x2, [sp, #104]
    e64c:	bl	f3f8 <lzma_check_size@@XZ_5.0+0x58>
    e650:	ldr	x1, [x19, #8]
    e654:	ldr	x0, [x19, #144]
    e658:	cmp	x1, x0
    e65c:	b.cc	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.lo, b.ul, b.last
    e660:	ldr	x1, [x19, #16]
    e664:	ldr	x0, [x19, #152]
    e668:	cmp	x1, x0
    e66c:	b.cc	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.lo, b.ul, b.last
    e670:	ldr	x1, [x19, #32]
    e674:	ldr	x0, [x19, #168]
    e678:	cmp	x1, x0
    e67c:	b.cc	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.lo, b.ul, b.last
    e680:	ldr	x0, [x19, #280]
    e684:	mov	w1, #0x2                   	// #2
    e688:	subs	x0, x0, #0x1
    e68c:	str	x0, [x19, #280]
    e690:	csel	w0, w24, w1, eq  // eq = none
    e694:	ldr	x20, [x21]
    e698:	str	w0, [x19]
    e69c:	b	e4c8 <lzma_index_hash_decode@@XZ_5.0+0x170>
    e6a0:	mov	w28, #0x1                   	// #1
    e6a4:	mov	w0, w28
    e6a8:	ldp	x19, x20, [sp, #16]
    e6ac:	ldp	x21, x22, [sp, #32]
    e6b0:	ldp	x23, x24, [sp, #48]
    e6b4:	ldp	x25, x26, [sp, #64]
    e6b8:	ldp	x27, x28, [sp, #80]
    e6bc:	ldp	x29, x30, [sp], #144
    e6c0:	ret
    e6c4:	ldr	x20, [x21]
    e6c8:	b	e4d4 <lzma_index_hash_decode@@XZ_5.0+0x17c>
    e6cc:	ldr	x1, [x19, #8]
    e6d0:	ldr	x0, [x19, #144]
    e6d4:	cmp	x1, x0
    e6d8:	b.ne	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.any
    e6dc:	ldr	x1, [x19, #16]
    e6e0:	ldr	x0, [x19, #152]
    e6e4:	cmp	x1, x0
    e6e8:	b.ne	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.any
    e6ec:	ldr	x1, [x19, #32]
    e6f0:	ldr	x0, [x19, #168]
    e6f4:	cmp	x1, x0
    e6f8:	b.ne	e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>  // b.any
    e6fc:	add	x20, x19, #0x28
    e700:	mov	w1, #0xa                   	// #10
    e704:	mov	x0, x20
    e708:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    e70c:	mov	w1, #0xa                   	// #10
    e710:	add	x22, x19, #0xb0
    e714:	mov	x0, x22
    e718:	bl	f478 <lzma_check_size@@XZ_5.0+0xd8>
    e71c:	mov	w0, #0xa                   	// #10
    e720:	bl	32a0 <lzma_check_size@plt>
    e724:	mov	x1, x22
    e728:	mov	w2, w0
    e72c:	mov	x0, x20
    e730:	bl	3360 <memcmp@plt>
    e734:	cbnz	w0, e5b4 <lzma_index_hash_decode@@XZ_5.0+0x25c>
    e738:	ldr	w2, [x19, #312]
    e73c:	add	x0, x27, x23
    e740:	ldr	x20, [x21]
    e744:	sub	x1, x20, x23
    e748:	bl	31f0 <lzma_crc32@plt>
    e74c:	mov	w1, #0x6                   	// #6
    e750:	str	w1, [x19]
    e754:	str	w0, [x19, #312]
    e758:	b	e478 <lzma_index_hash_decode@@XZ_5.0+0x120>
    e75c:	nop

000000000000e760 <lzma_stream_buffer_decode@@XZ_5.0>:
    e760:	sub	sp, sp, #0xd0
    e764:	stp	x29, x30, [sp, #16]
    e768:	add	x29, sp, #0x10
    e76c:	stp	x23, x24, [sp, #64]
    e770:	cbz	x4, e8e8 <lzma_stream_buffer_decode@@XZ_5.0+0x188>
    e774:	stp	x19, x20, [sp, #32]
    e778:	mov	x24, x6
    e77c:	mov	x19, x4
    e780:	stp	x21, x22, [sp, #48]
    e784:	mov	x20, x7
    e788:	mov	x22, x3
    e78c:	stp	x25, x26, [sp, #80]
    e790:	mov	x21, x5
    e794:	mov	x26, x0
    e798:	mov	x25, x2
    e79c:	ldr	x0, [x4]
    e7a0:	cbz	x3, e8d8 <lzma_stream_buffer_decode@@XZ_5.0+0x178>
    e7a4:	cmp	x20, #0x0
    e7a8:	mov	w23, #0xb                   	// #11
    e7ac:	ccmp	x21, x0, #0x0, ne  // ne = any
    e7b0:	b.cc	e8b8 <lzma_stream_buffer_decode@@XZ_5.0+0x158>  // b.lo, b.ul, b.last
    e7b4:	ldr	x0, [x20]
    e7b8:	ldr	x2, [sp, #208]
    e7bc:	cmp	x2, x0
    e7c0:	cbz	x24, e8b4 <lzma_stream_buffer_decode@@XZ_5.0+0x154>
    e7c4:	b.cc	e8b8 <lzma_stream_buffer_decode@@XZ_5.0+0x158>  // b.lo, b.ul, b.last
    e7c8:	mov	w23, #0xb                   	// #11
    e7cc:	tbnz	w1, #2, e8b8 <lzma_stream_buffer_decode@@XZ_5.0+0x158>
    e7d0:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    e7d4:	mov	w3, w1
    e7d8:	movi	v0.4s, #0x0
    e7dc:	mov	x1, x25
    e7e0:	ldr	q1, [x0, #336]
    e7e4:	str	xzr, [sp, #128]
    e7e8:	ldr	x2, [x26]
    e7ec:	str	x27, [sp, #96]
    e7f0:	add	x27, sp, #0x80
    e7f4:	stur	q1, [sp, #136]
    e7f8:	mov	x0, x27
    e7fc:	stur	q0, [sp, #152]
    e800:	stur	q0, [sp, #168]
    e804:	stur	q0, [sp, #184]
    e808:	bl	e998 <lzma_stream_buffer_decode@@XZ_5.0+0x238>
    e80c:	mov	w23, w0
    e810:	cbnz	w0, e884 <lzma_stream_buffer_decode@@XZ_5.0+0x124>
    e814:	ldr	x0, [sp, #128]
    e818:	mov	w1, #0x3                   	// #3
    e81c:	ldr	x8, [sp, #152]
    e820:	str	w1, [sp]
    e824:	ldr	x7, [sp, #208]
    e828:	mov	x5, x24
    e82c:	mov	x2, x22
    e830:	mov	x6, x20
    e834:	mov	x4, x21
    e838:	mov	x3, x19
    e83c:	mov	x1, x25
    e840:	ldr	x24, [x19]
    e844:	ldr	x22, [x20]
    e848:	blr	x8
    e84c:	cmp	w0, #0x1
    e850:	b.eq	e884 <lzma_stream_buffer_decode@@XZ_5.0+0x124>  // b.none
    e854:	str	x24, [x19]
    e858:	str	x22, [x20]
    e85c:	cbz	w0, e900 <lzma_stream_buffer_decode@@XZ_5.0+0x1a0>
    e860:	mov	w23, w0
    e864:	cmp	w0, #0x6
    e868:	b.ne	e884 <lzma_stream_buffer_decode@@XZ_5.0+0x124>  // b.any
    e86c:	ldr	x0, [sp, #128]
    e870:	mov	x1, x26
    e874:	ldr	x4, [sp, #184]
    e878:	add	x2, sp, #0x78
    e87c:	mov	x3, #0x0                   	// #0
    e880:	blr	x4
    e884:	mov	x1, x25
    e888:	mov	x0, x27
    e88c:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    e890:	mov	w0, w23
    e894:	ldp	x29, x30, [sp, #16]
    e898:	ldp	x19, x20, [sp, #32]
    e89c:	ldp	x21, x22, [sp, #48]
    e8a0:	ldp	x23, x24, [sp, #64]
    e8a4:	ldp	x25, x26, [sp, #80]
    e8a8:	ldr	x27, [sp, #96]
    e8ac:	add	sp, sp, #0xd0
    e8b0:	ret
    e8b4:	b.eq	e7c8 <lzma_stream_buffer_decode@@XZ_5.0+0x68>  // b.none
    e8b8:	mov	w0, w23
    e8bc:	ldp	x29, x30, [sp, #16]
    e8c0:	ldp	x19, x20, [sp, #32]
    e8c4:	ldp	x21, x22, [sp, #48]
    e8c8:	ldp	x23, x24, [sp, #64]
    e8cc:	ldp	x25, x26, [sp, #80]
    e8d0:	add	sp, sp, #0xd0
    e8d4:	ret
    e8d8:	cmp	x5, x0
    e8dc:	mov	w23, #0xb                   	// #11
    e8e0:	b.eq	e7a4 <lzma_stream_buffer_decode@@XZ_5.0+0x44>  // b.none
    e8e4:	b	e8b8 <lzma_stream_buffer_decode@@XZ_5.0+0x158>
    e8e8:	mov	w23, #0xb                   	// #11
    e8ec:	mov	w0, w23
    e8f0:	ldp	x29, x30, [sp, #16]
    e8f4:	ldp	x23, x24, [sp, #64]
    e8f8:	add	sp, sp, #0xd0
    e8fc:	ret
    e900:	ldr	x0, [x19]
    e904:	cmp	x0, x21
    e908:	cset	w23, ne  // ne = any
    e90c:	add	w23, w23, #0x9
    e910:	b	e884 <lzma_stream_buffer_decode@@XZ_5.0+0x124>
    e914:	nop
    e918:	ldr	w0, [x0, #304]
    e91c:	ret
    e920:	mov	x4, x0
    e924:	ldr	x0, [x0, #360]
    e928:	str	x0, [x1]
    e92c:	ldr	x0, [x4, #352]
    e930:	str	x0, [x2]
    e934:	mov	w0, #0x0                   	// #0
    e938:	cbz	x3, e954 <lzma_stream_buffer_decode@@XZ_5.0+0x1f4>
    e93c:	ldr	x1, [x4, #360]
    e940:	mov	w0, #0x6                   	// #6
    e944:	cmp	x1, x3
    e948:	b.hi	e954 <lzma_stream_buffer_decode@@XZ_5.0+0x1f4>  // b.pmore
    e94c:	mov	w0, #0x0                   	// #0
    e950:	str	x3, [x4, #352]
    e954:	ret
    e958:	stp	x29, x30, [sp, #-32]!
    e95c:	mov	x29, sp
    e960:	stp	x19, x20, [sp, #16]
    e964:	mov	x19, x0
    e968:	mov	x20, x1
    e96c:	add	x0, x0, #0x8
    e970:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    e974:	ldr	x0, [x19, #344]
    e978:	mov	x1, x20
    e97c:	bl	3340 <lzma_index_hash_end@plt>
    e980:	mov	x1, x20
    e984:	mov	x0, x19
    e988:	ldp	x19, x20, [sp, #16]
    e98c:	ldp	x29, x30, [sp], #32
    e990:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    e994:	nop
    e998:	stp	x29, x30, [sp, #-64]!
    e99c:	mov	x29, sp
    e9a0:	stp	x21, x22, [sp, #32]
    e9a4:	mov	x22, x2
    e9a8:	mov	x21, x0
    e9ac:	ldr	x2, [x0, #16]
    e9b0:	stp	x19, x20, [sp, #16]
    e9b4:	adrp	x19, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    e9b8:	stp	x23, x24, [sp, #48]
    e9bc:	add	x19, x19, #0x998
    e9c0:	mov	w20, w3
    e9c4:	mov	x23, x1
    e9c8:	cmp	x2, x19
    e9cc:	b.eq	e9d4 <lzma_stream_buffer_decode@@XZ_5.0+0x274>  // b.none
    e9d0:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    e9d4:	str	x19, [x21, #16]
    e9d8:	ands	w24, w20, #0xffffffe0
    e9dc:	b.ne	eac4 <lzma_stream_buffer_decode@@XZ_5.0+0x364>  // b.any
    e9e0:	ldr	x19, [x21]
    e9e4:	cbz	x19, ea5c <lzma_stream_buffer_decode@@XZ_5.0+0x2fc>
    e9e8:	ldr	x0, [x19, #344]
    e9ec:	and	w6, w20, #0x1
    e9f0:	ubfx	x5, x20, #1, #1
    e9f4:	ubfx	x4, x20, #2, #1
    e9f8:	ubfx	x3, x20, #4, #1
    e9fc:	cmp	x22, #0x0
    ea00:	mov	x2, #0x1                   	// #1
    ea04:	mov	x1, #0x8000                	// #32768
    ea08:	csel	x22, x22, x2, ne  // ne = any
    ea0c:	ubfx	x20, x20, #3, #1
    ea10:	stp	x22, x1, [x19, #352]
    ea14:	mov	x1, x23
    ea18:	strb	w6, [x19, #368]
    ea1c:	strb	w5, [x19, #369]
    ea20:	strb	w4, [x19, #370]
    ea24:	strb	w3, [x19, #371]
    ea28:	strb	w20, [x19, #372]
    ea2c:	strb	w2, [x19, #373]
    ea30:	bl	32b0 <lzma_index_hash_init@plt>
    ea34:	str	x0, [x19, #344]
    ea38:	cbz	x0, eae0 <lzma_stream_buffer_decode@@XZ_5.0+0x380>
    ea3c:	str	wzr, [x19]
    ea40:	str	xzr, [x19, #376]
    ea44:	mov	w0, w24
    ea48:	ldp	x19, x20, [sp, #16]
    ea4c:	ldp	x21, x22, [sp, #32]
    ea50:	ldp	x23, x24, [sp, #48]
    ea54:	ldp	x29, x30, [sp], #64
    ea58:	ret
    ea5c:	mov	x1, x23
    ea60:	mov	x0, #0x580                 	// #1408
    ea64:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    ea68:	mov	x1, x0
    ea6c:	cbz	x0, eae0 <lzma_stream_buffer_decode@@XZ_5.0+0x380>
    ea70:	mov	x19, x0
    ea74:	adrp	x5, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    ea78:	adrp	x4, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    ea7c:	add	x5, x5, #0xae8
    ea80:	add	x4, x4, #0x958
    ea84:	adrp	x3, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    ea88:	adrp	x2, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    ea8c:	add	x3, x3, #0x918
    ea90:	add	x2, x2, #0x920
    ea94:	mov	x6, #0xffffffffffffffff    	// #-1
    ea98:	mov	x0, #0x0                   	// #0
    ea9c:	str	x1, [x21]
    eaa0:	stp	xzr, x6, [x1, #8]
    eaa4:	stp	xzr, xzr, [x1, #24]
    eaa8:	stp	x5, x4, [x21, #24]
    eaac:	stp	xzr, xzr, [x1, #40]
    eab0:	stp	x3, x2, [x21, #48]
    eab4:	stp	xzr, xzr, [x1, #56]
    eab8:	str	xzr, [x1, #72]
    eabc:	str	xzr, [x1, #344]
    eac0:	b	e9ec <lzma_stream_buffer_decode@@XZ_5.0+0x28c>
    eac4:	mov	w24, #0x8                   	// #8
    eac8:	mov	w0, w24
    eacc:	ldp	x19, x20, [sp, #16]
    ead0:	ldp	x21, x22, [sp, #32]
    ead4:	ldp	x23, x24, [sp, #48]
    ead8:	ldp	x29, x30, [sp], #64
    eadc:	ret
    eae0:	mov	w24, #0x5                   	// #5
    eae4:	b	ea44 <lzma_stream_buffer_decode@@XZ_5.0+0x2e4>
    eae8:	sub	sp, sp, #0xd0
    eaec:	stp	x29, x30, [sp, #16]
    eaf0:	add	x29, sp, #0x10
    eaf4:	stp	x19, x20, [sp, #32]
    eaf8:	mov	x19, x0
    eafc:	ldr	w0, [x0]
    eb00:	stp	x21, x22, [sp, #48]
    eb04:	mov	x20, x2
    eb08:	mov	x21, x1
    eb0c:	stp	x23, x24, [sp, #64]
    eb10:	mov	x22, x4
    eb14:	mov	x23, x6
    eb18:	stp	x25, x26, [sp, #80]
    eb1c:	mov	x24, x7
    eb20:	mov	x25, x3
    eb24:	str	x5, [sp, #120]
    eb28:	cmp	w0, #0x3
    eb2c:	b.eq	edc0 <lzma_stream_buffer_decode@@XZ_5.0+0x660>  // b.none
    eb30:	b.ls	eba0 <lzma_stream_buffer_decode@@XZ_5.0+0x440>  // b.plast
    eb34:	cmp	w0, #0x4
    eb38:	b.eq	ec60 <lzma_stream_buffer_decode@@XZ_5.0+0x500>  // b.none
    eb3c:	cmp	w0, #0x5
    eb40:	b.ne	ed9c <lzma_stream_buffer_decode@@XZ_5.0+0x63c>  // b.any
    eb44:	ldr	x8, [x25]
    eb48:	cmp	x22, x8
    eb4c:	b.ls	edf0 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.plast
    eb50:	ldr	x0, [x19, #376]
    eb54:	b	eb70 <lzma_stream_buffer_decode@@XZ_5.0+0x410>
    eb58:	add	x8, x8, #0x1
    eb5c:	and	x0, x1, #0x3
    eb60:	str	x8, [x25]
    eb64:	cmp	x8, x22
    eb68:	str	x0, [x19, #376]
    eb6c:	b.eq	edf0 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.none
    eb70:	ldrb	w9, [x20, x8]
    eb74:	add	x1, x0, #0x1
    eb78:	cbz	w9, eb58 <lzma_stream_buffer_decode@@XZ_5.0+0x3f8>
    eb7c:	cbnz	x0, ef4c <lzma_stream_buffer_decode@@XZ_5.0+0x7ec>
    eb80:	ldr	x0, [x19, #344]
    eb84:	mov	x1, x21
    eb88:	bl	32b0 <lzma_index_hash_init@plt>
    eb8c:	str	x0, [x19, #344]
    eb90:	cbz	x0, ef10 <lzma_stream_buffer_decode@@XZ_5.0+0x7b0>
    eb94:	str	wzr, [x19]
    eb98:	str	xzr, [x19, #376]
    eb9c:	b	ecf0 <lzma_stream_buffer_decode@@XZ_5.0+0x590>
    eba0:	cmp	w0, #0x1
    eba4:	b.eq	ec14 <lzma_stream_buffer_decode@@XZ_5.0+0x4b4>  // b.none
    eba8:	cmp	w0, #0x2
    ebac:	b.ne	ecec <lzma_stream_buffer_decode@@XZ_5.0+0x58c>  // b.any
    ebb0:	ldr	w1, [sp, #208]
    ebb4:	mov	x7, x24
    ebb8:	ldr	x0, [x19, #8]
    ebbc:	str	w1, [sp]
    ebc0:	ldr	x5, [sp, #120]
    ebc4:	mov	x6, x23
    ebc8:	ldr	x8, [x19, #32]
    ebcc:	mov	x4, x22
    ebd0:	mov	x3, x25
    ebd4:	mov	x2, x20
    ebd8:	mov	x1, x21
    ebdc:	blr	x8
    ebe0:	mov	w26, w0
    ebe4:	cmp	w0, #0x1
    ebe8:	b.ne	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>  // b.any
    ebec:	add	x0, x19, #0x50
    ebf0:	bl	31c0 <lzma_block_unpadded_size@plt>
    ebf4:	mov	x1, x0
    ebf8:	ldr	x2, [x19, #104]
    ebfc:	ldr	x0, [x19, #344]
    ec00:	bl	31e0 <lzma_index_hash_append@plt>
    ec04:	mov	w26, w0
    ec08:	cbnz	w0, ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ec0c:	mov	w0, #0x1                   	// #1
    ec10:	str	w0, [x19]
    ec14:	ldr	x0, [x25]
    ec18:	cmp	x0, x22
    ec1c:	b.cs	edcc <lzma_stream_buffer_decode@@XZ_5.0+0x66c>  // b.hs, b.nlast
    ec20:	ldr	x1, [x19, #376]
    ec24:	cbnz	x1, eee8 <lzma_stream_buffer_decode@@XZ_5.0+0x788>
    ec28:	ldrb	w0, [x20, x0]
    ec2c:	cbnz	w0, ee10 <lzma_stream_buffer_decode@@XZ_5.0+0x6b0>
    ec30:	mov	w0, #0x3                   	// #3
    ec34:	str	w0, [x19]
    ec38:	ldr	x0, [x19, #344]
    ec3c:	mov	x3, x22
    ec40:	mov	x2, x25
    ec44:	mov	x1, x20
    ec48:	bl	3160 <lzma_index_hash_decode@plt>
    ec4c:	mov	w26, w0
    ec50:	cmp	w0, #0x1
    ec54:	b.ne	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>  // b.any
    ec58:	mov	w0, #0x4                   	// #4
    ec5c:	str	w0, [x19]
    ec60:	add	x26, x19, #0x180
    ec64:	add	x4, x19, #0x178
    ec68:	mov	x3, x26
    ec6c:	mov	x2, x22
    ec70:	mov	x1, x25
    ec74:	mov	x0, x20
    ec78:	mov	x5, #0xc                   	// #12
    ec7c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    ec80:	ldr	x0, [x19, #376]
    ec84:	cmp	x0, #0xb
    ec88:	b.ls	edcc <lzma_stream_buffer_decode@@XZ_5.0+0x66c>  // b.plast
    ec8c:	stp	x27, x28, [sp, #96]
    ec90:	add	x27, sp, #0x80
    ec94:	mov	x1, x26
    ec98:	str	xzr, [x19, #376]
    ec9c:	mov	x0, x27
    eca0:	bl	3460 <lzma_stream_footer_decode@plt>
    eca4:	mov	w26, w0
    eca8:	cbnz	w0, ef2c <lzma_stream_buffer_decode@@XZ_5.0+0x7cc>
    ecac:	ldr	x0, [x19, #344]
    ecb0:	bl	3500 <lzma_index_hash_size@plt>
    ecb4:	ldr	x1, [sp, #136]
    ecb8:	cmp	x0, x1
    ecbc:	b.ne	ef20 <lzma_stream_buffer_decode@@XZ_5.0+0x7c0>  // b.any
    ecc0:	mov	x1, x27
    ecc4:	add	x0, x19, #0x120
    ecc8:	bl	3140 <lzma_stream_flags_compare@plt>
    eccc:	mov	w26, w0
    ecd0:	cbnz	w0, ef18 <lzma_stream_buffer_decode@@XZ_5.0+0x7b8>
    ecd4:	ldrb	w0, [x19, #372]
    ecd8:	cbz	w0, ef40 <lzma_stream_buffer_decode@@XZ_5.0+0x7e0>
    ecdc:	mov	w0, #0x5                   	// #5
    ece0:	ldp	x27, x28, [sp, #96]
    ece4:	str	w0, [x19]
    ece8:	b	eb44 <lzma_stream_buffer_decode@@XZ_5.0+0x3e4>
    ecec:	cbnz	w0, ed9c <lzma_stream_buffer_decode@@XZ_5.0+0x63c>
    ecf0:	add	x26, x19, #0x180
    ecf4:	add	x4, x19, #0x178
    ecf8:	mov	x3, x26
    ecfc:	mov	x2, x22
    ed00:	mov	x1, x25
    ed04:	mov	x0, x20
    ed08:	mov	x5, #0xc                   	// #12
    ed0c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    ed10:	ldr	x0, [x19, #376]
    ed14:	cmp	x0, #0xb
    ed18:	b.ls	edcc <lzma_stream_buffer_decode@@XZ_5.0+0x66c>  // b.plast
    ed1c:	str	xzr, [x19, #376]
    ed20:	mov	x1, x26
    ed24:	add	x0, x19, #0x120
    ed28:	bl	3520 <lzma_stream_header_decode@plt>
    ed2c:	mov	w26, w0
    ed30:	cbnz	w0, ef5c <lzma_stream_buffer_decode@@XZ_5.0+0x7fc>
    ed34:	ldr	w0, [x19, #304]
    ed38:	mov	w1, #0x1                   	// #1
    ed3c:	str	w1, [x19]
    ed40:	cmp	w0, #0x0
    ed44:	ldrb	w1, [x19, #368]
    ed48:	str	w0, [x19, #88]
    ed4c:	cset	w2, eq  // eq = none
    ed50:	strb	wzr, [x19, #373]
    ed54:	tst	w2, w1
    ed58:	b.ne	ef70 <lzma_stream_buffer_decode@@XZ_5.0+0x810>  // b.any
    ed5c:	ldrb	w1, [x19, #369]
    ed60:	cbz	w1, ed70 <lzma_stream_buffer_decode@@XZ_5.0+0x610>
    ed64:	bl	3110 <lzma_check_is_supported@plt>
    ed68:	tst	w0, #0xff
    ed6c:	b.eq	ef08 <lzma_stream_buffer_decode@@XZ_5.0+0x7a8>  // b.none
    ed70:	ldrb	w0, [x19, #370]
    ed74:	cbz	w0, ec14 <lzma_stream_buffer_decode@@XZ_5.0+0x4b4>
    ed78:	mov	w26, #0x4                   	// #4
    ed7c:	mov	w0, w26
    ed80:	ldp	x29, x30, [sp, #16]
    ed84:	ldp	x19, x20, [sp, #32]
    ed88:	ldp	x21, x22, [sp, #48]
    ed8c:	ldp	x23, x24, [sp, #64]
    ed90:	ldp	x25, x26, [sp, #80]
    ed94:	add	sp, sp, #0xd0
    ed98:	ret
    ed9c:	mov	w26, #0xb                   	// #11
    eda0:	mov	w0, w26
    eda4:	ldp	x29, x30, [sp, #16]
    eda8:	ldp	x19, x20, [sp, #32]
    edac:	ldp	x21, x22, [sp, #48]
    edb0:	ldp	x23, x24, [sp, #64]
    edb4:	ldp	x25, x26, [sp, #80]
    edb8:	add	sp, sp, #0xd0
    edbc:	ret
    edc0:	ldr	x0, [x3]
    edc4:	cmp	x0, x4
    edc8:	b.cc	ec38 <lzma_stream_buffer_decode@@XZ_5.0+0x4d8>  // b.lo, b.ul, b.last
    edcc:	mov	w26, #0x0                   	// #0
    edd0:	mov	w0, w26
    edd4:	ldp	x29, x30, [sp, #16]
    edd8:	ldp	x19, x20, [sp, #32]
    eddc:	ldp	x21, x22, [sp, #48]
    ede0:	ldp	x23, x24, [sp, #64]
    ede4:	ldp	x25, x26, [sp, #80]
    ede8:	add	sp, sp, #0xd0
    edec:	ret
    edf0:	ldr	w0, [sp, #208]
    edf4:	cmp	w0, #0x3
    edf8:	b.ne	edcc <lzma_stream_buffer_decode@@XZ_5.0+0x66c>  // b.any
    edfc:	ldr	x0, [x19, #376]
    ee00:	mov	w26, #0x1                   	// #1
    ee04:	cbz	x0, ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ee08:	mov	w26, #0x9                   	// #9
    ee0c:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ee10:	add	w0, w0, #0x1
    ee14:	lsl	w5, w0, #2
    ee18:	str	w5, [x19, #84]
    ee1c:	add	x26, x19, #0x180
    ee20:	mov	x1, x25
    ee24:	mov	w5, w5
    ee28:	mov	x3, x26
    ee2c:	add	x4, x19, #0x178
    ee30:	mov	x2, x22
    ee34:	mov	x0, x20
    ee38:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
    ee3c:	ldr	x1, [x19, #376]
    ee40:	ldr	w0, [x19, #84]
    ee44:	cmp	x1, x0
    ee48:	b.cc	edcc <lzma_stream_buffer_decode@@XZ_5.0+0x66c>  // b.lo, b.ul, b.last
    ee4c:	stp	x27, x28, [sp, #96]
    ee50:	mov	w0, #0x1                   	// #1
    ee54:	add	x27, sp, #0x80
    ee58:	str	w0, [x19, #80]
    ee5c:	add	x28, x19, #0x50
    ee60:	str	x27, [x19, #112]
    ee64:	mov	x2, x26
    ee68:	str	xzr, [x19, #376]
    ee6c:	mov	x1, x21
    ee70:	mov	x0, x28
    ee74:	bl	3370 <lzma_block_header_decode@plt>
    ee78:	mov	w26, w0
    ee7c:	cbnz	w0, ef18 <lzma_stream_buffer_decode@@XZ_5.0+0x7b8>
    ee80:	ldrb	w1, [x19, #371]
    ee84:	mov	x0, x27
    ee88:	strb	w1, [x19, #280]
    ee8c:	mov	w26, #0x8                   	// #8
    ee90:	bl	3310 <lzma_raw_decoder_memusage@plt>
    ee94:	cmn	x0, #0x1
    ee98:	b.eq	eeb0 <lzma_stream_buffer_decode@@XZ_5.0+0x750>  // b.none
    ee9c:	ldr	x1, [x19, #352]
    eea0:	str	x0, [x19, #360]
    eea4:	mov	w26, #0x6                   	// #6
    eea8:	cmp	x1, x0
    eeac:	b.cs	eef0 <lzma_stream_buffer_decode@@XZ_5.0+0x790>  // b.hs, b.nlast
    eeb0:	mov	x28, #0x0                   	// #0
    eeb4:	add	x0, x27, x28
    eeb8:	mov	x1, x21
    eebc:	add	x28, x28, #0x10
    eec0:	ldr	x0, [x0, #8]
    eec4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
    eec8:	cmp	x28, #0x40
    eecc:	b.ne	eeb4 <lzma_stream_buffer_decode@@XZ_5.0+0x754>  // b.any
    eed0:	str	xzr, [x19, #112]
    eed4:	cbnz	w26, ef18 <lzma_stream_buffer_decode@@XZ_5.0+0x7b8>
    eed8:	mov	w0, #0x2                   	// #2
    eedc:	ldp	x27, x28, [sp, #96]
    eee0:	str	w0, [x19]
    eee4:	b	ebb0 <lzma_stream_buffer_decode@@XZ_5.0+0x450>
    eee8:	ldr	w5, [x19, #84]
    eeec:	b	ee1c <lzma_stream_buffer_decode@@XZ_5.0+0x6bc>
    eef0:	mov	x2, x28
    eef4:	mov	x1, x21
    eef8:	add	x0, x19, #0x8
    eefc:	bl	cbc8 <lzma_block_buffer_decode@@XZ_5.0+0x460>
    ef00:	mov	w26, w0
    ef04:	b	eeb0 <lzma_stream_buffer_decode@@XZ_5.0+0x750>
    ef08:	mov	w26, #0x3                   	// #3
    ef0c:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef10:	mov	w26, #0x5                   	// #5
    ef14:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef18:	ldp	x27, x28, [sp, #96]
    ef1c:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef20:	mov	w26, #0x9                   	// #9
    ef24:	ldp	x27, x28, [sp, #96]
    ef28:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef2c:	cmp	w0, #0x7
    ef30:	mov	w0, #0x9                   	// #9
    ef34:	csel	w26, w26, w0, ne  // ne = any
    ef38:	ldp	x27, x28, [sp, #96]
    ef3c:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef40:	mov	w26, #0x1                   	// #1
    ef44:	ldp	x27, x28, [sp, #96]
    ef48:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef4c:	add	x8, x8, #0x1
    ef50:	mov	w26, #0x9                   	// #9
    ef54:	str	x8, [x25]
    ef58:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef5c:	cmp	w0, #0x7
    ef60:	b.ne	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>  // b.any
    ef64:	ldrb	w0, [x19, #373]
    ef68:	cbnz	w0, ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    ef6c:	b	ee08 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    ef70:	mov	w26, #0x2                   	// #2
    ef74:	b	ed7c <lzma_stream_buffer_decode@@XZ_5.0+0x61c>

000000000000ef78 <lzma_stream_decoder@@XZ_5.0>:
    ef78:	stp	x29, x30, [sp, #-80]!
    ef7c:	mov	x29, sp
    ef80:	stp	x19, x20, [sp, #16]
    ef84:	mov	w19, w2
    ef88:	stp	x23, x24, [sp, #48]
    ef8c:	mov	x24, x1
    ef90:	mov	x23, x0
    ef94:	bl	3a00 <lzma_version_string@@XZ_5.0+0x2e8>
    ef98:	mov	w20, w0
    ef9c:	cbz	w0, efb4 <lzma_stream_decoder@@XZ_5.0+0x3c>
    efa0:	mov	w0, w20
    efa4:	ldp	x19, x20, [sp, #16]
    efa8:	ldp	x23, x24, [sp, #48]
    efac:	ldp	x29, x30, [sp], #80
    efb0:	ret
    efb4:	stp	x21, x22, [sp, #32]
    efb8:	adrp	x20, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    efbc:	add	x20, x20, #0x998
    efc0:	ldr	x22, [x23, #56]
    efc4:	ldr	x0, [x22, #16]
    efc8:	str	x25, [sp, #64]
    efcc:	ldr	x25, [x23, #48]
    efd0:	cmp	x0, x20
    efd4:	b.eq	efe4 <lzma_stream_decoder@@XZ_5.0+0x6c>  // b.none
    efd8:	mov	x1, x25
    efdc:	mov	x0, x22
    efe0:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
    efe4:	str	x20, [x22, #16]
    efe8:	ands	w20, w19, #0xffffffe0
    efec:	b.ne	f0e4 <lzma_stream_decoder@@XZ_5.0+0x16c>  // b.any
    eff0:	ldr	x21, [x22]
    eff4:	cbz	x21, f07c <lzma_stream_decoder@@XZ_5.0+0x104>
    eff8:	ldr	x0, [x21, #344]
    effc:	cmp	x24, #0x0
    f000:	and	w6, w19, #0x1
    f004:	ubfx	x5, x19, #1, #1
    f008:	ubfx	x4, x19, #2, #1
    f00c:	ubfx	x3, x19, #4, #1
    f010:	mov	x22, #0x1                   	// #1
    f014:	csel	x2, x24, x22, ne  // ne = any
    f018:	mov	x1, #0x8000                	// #32768
    f01c:	ubfx	x19, x19, #3, #1
    f020:	stp	x2, x1, [x21, #352]
    f024:	mov	x1, x25
    f028:	strb	w6, [x21, #368]
    f02c:	strb	w5, [x21, #369]
    f030:	strb	w4, [x21, #370]
    f034:	strb	w3, [x21, #371]
    f038:	strb	w19, [x21, #372]
    f03c:	strb	w22, [x21, #373]
    f040:	bl	32b0 <lzma_index_hash_init@plt>
    f044:	str	x0, [x21, #344]
    f048:	cbz	x0, f0fc <lzma_stream_decoder@@XZ_5.0+0x184>
    f04c:	ldr	x0, [x23, #56]
    f050:	ldr	x25, [sp, #64]
    f054:	str	wzr, [x21]
    f058:	str	xzr, [x21, #376]
    f05c:	strb	w22, [x0, #88]
    f060:	strb	w22, [x0, #91]
    f064:	mov	w0, w20
    f068:	ldp	x19, x20, [sp, #16]
    f06c:	ldp	x21, x22, [sp, #32]
    f070:	ldp	x23, x24, [sp, #48]
    f074:	ldp	x29, x30, [sp], #80
    f078:	ret
    f07c:	mov	x1, x25
    f080:	mov	x0, #0x580                 	// #1408
    f084:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
    f088:	mov	x2, x0
    f08c:	cbz	x0, f0fc <lzma_stream_decoder@@XZ_5.0+0x184>
    f090:	adrp	x4, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    f094:	adrp	x0, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    f098:	add	x4, x4, #0xae8
    f09c:	add	x0, x0, #0x958
    f0a0:	adrp	x3, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    f0a4:	adrp	x1, e000 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    f0a8:	add	x3, x3, #0x918
    f0ac:	add	x1, x1, #0x920
    f0b0:	str	x2, [x22]
    f0b4:	mov	x21, x2
    f0b8:	stp	x4, x0, [x22, #24]
    f0bc:	mov	x4, #0xffffffffffffffff    	// #-1
    f0c0:	mov	x0, #0x0                   	// #0
    f0c4:	stp	x3, x1, [x22, #48]
    f0c8:	stp	xzr, x4, [x2, #8]
    f0cc:	stp	xzr, xzr, [x2, #24]
    f0d0:	stp	xzr, xzr, [x2, #40]
    f0d4:	stp	xzr, xzr, [x2, #56]
    f0d8:	str	xzr, [x2, #72]
    f0dc:	str	xzr, [x2, #344]
    f0e0:	b	effc <lzma_stream_decoder@@XZ_5.0+0x84>
    f0e4:	mov	w20, #0x8                   	// #8
    f0e8:	mov	x0, x23
    f0ec:	bl	3350 <lzma_end@plt>
    f0f0:	ldp	x21, x22, [sp, #32]
    f0f4:	ldr	x25, [sp, #64]
    f0f8:	b	efa0 <lzma_stream_decoder@@XZ_5.0+0x28>
    f0fc:	mov	w20, #0x5                   	// #5
    f100:	b	f0e8 <lzma_stream_decoder@@XZ_5.0+0x170>
    f104:	nop

000000000000f108 <lzma_stream_header_decode@@XZ_5.0>:
    f108:	stp	x29, x30, [sp, #-32]!
    f10c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f110:	mov	x29, sp
    f114:	stp	x19, x20, [sp, #16]
    f118:	mov	x19, x1
    f11c:	mov	x20, x0
    f120:	ldr	x1, [x2, #3920]
    f124:	ldr	w2, [x19]
    f128:	ldr	w0, [x1]
    f12c:	cmp	w2, w0
    f130:	b.eq	f144 <lzma_stream_header_decode@@XZ_5.0+0x3c>  // b.none
    f134:	mov	w0, #0x7                   	// #7
    f138:	ldp	x19, x20, [sp, #16]
    f13c:	ldp	x29, x30, [sp], #32
    f140:	ret
    f144:	ldrh	w0, [x1, #4]
    f148:	ldrh	w1, [x19, #4]
    f14c:	cmp	w1, w0
    f150:	b.ne	f134 <lzma_stream_header_decode@@XZ_5.0+0x2c>  // b.any
    f154:	mov	w2, #0x0                   	// #0
    f158:	mov	x1, #0x2                   	// #2
    f15c:	add	x0, x19, #0x6
    f160:	bl	31f0 <lzma_crc32@plt>
    f164:	ldr	w1, [x19, #8]
    f168:	mov	w2, w0
    f16c:	mov	w0, #0x9                   	// #9
    f170:	cmp	w2, w1
    f174:	b.ne	f138 <lzma_stream_header_decode@@XZ_5.0+0x30>  // b.any
    f178:	ldrb	w1, [x19, #6]
    f17c:	mov	w0, #0x8                   	// #8
    f180:	cbnz	w1, f138 <lzma_stream_header_decode@@XZ_5.0+0x30>
    f184:	ldrb	w1, [x19, #7]
    f188:	tst	w1, #0xf0
    f18c:	b.ne	f138 <lzma_stream_header_decode@@XZ_5.0+0x30>  // b.any
    f190:	str	wzr, [x20]
    f194:	mov	x2, #0xffffffffffffffff    	// #-1
    f198:	mov	w0, #0x0                   	// #0
    f19c:	ldrb	w1, [x19, #7]
    f1a0:	str	x2, [x20, #8]
    f1a4:	and	w1, w1, #0xf
    f1a8:	str	w1, [x20, #16]
    f1ac:	ldp	x19, x20, [sp, #16]
    f1b0:	ldp	x29, x30, [sp], #32
    f1b4:	ret

000000000000f1b8 <lzma_stream_footer_decode@@XZ_5.0>:
    f1b8:	stp	x29, x30, [sp, #-32]!
    f1bc:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f1c0:	mov	x29, sp
    f1c4:	ldr	x2, [x2, #3968]
    f1c8:	stp	x19, x20, [sp, #16]
    f1cc:	mov	x19, x1
    f1d0:	mov	x20, x0
    f1d4:	ldrh	w1, [x1, #10]
    f1d8:	ldrh	w0, [x2]
    f1dc:	cmp	w1, w0
    f1e0:	b.ne	f250 <lzma_stream_footer_decode@@XZ_5.0+0x98>  // b.any
    f1e4:	mov	w2, #0x0                   	// #0
    f1e8:	mov	x1, #0x6                   	// #6
    f1ec:	add	x0, x19, #0x4
    f1f0:	bl	31f0 <lzma_crc32@plt>
    f1f4:	ldr	w1, [x19]
    f1f8:	mov	w2, w0
    f1fc:	mov	w0, #0x9                   	// #9
    f200:	cmp	w2, w1
    f204:	b.ne	f244 <lzma_stream_footer_decode@@XZ_5.0+0x8c>  // b.any
    f208:	ldrb	w1, [x19, #8]
    f20c:	mov	w0, #0x8                   	// #8
    f210:	cbnz	w1, f244 <lzma_stream_footer_decode@@XZ_5.0+0x8c>
    f214:	ldrb	w1, [x19, #9]
    f218:	tst	w1, #0xf0
    f21c:	b.ne	f244 <lzma_stream_footer_decode@@XZ_5.0+0x8c>  // b.any
    f220:	str	wzr, [x20]
    f224:	mov	w0, #0x0                   	// #0
    f228:	ldrb	w1, [x19, #9]
    f22c:	and	w1, w1, #0xf
    f230:	str	w1, [x20, #16]
    f234:	ldr	w1, [x19, #4]
    f238:	add	x1, x1, #0x1
    f23c:	lsl	x1, x1, #2
    f240:	str	x1, [x20, #8]
    f244:	ldp	x19, x20, [sp, #16]
    f248:	ldp	x29, x30, [sp], #32
    f24c:	ret
    f250:	mov	w0, #0x7                   	// #7
    f254:	ldp	x19, x20, [sp, #16]
    f258:	ldp	x29, x30, [sp], #32
    f25c:	ret

000000000000f260 <lzma_vli_decode@@XZ_5.0>:
    f260:	sub	sp, sp, #0x10
    f264:	mov	x11, x0
    f268:	str	xzr, [sp, #8]
    f26c:	cbz	x1, f320 <lzma_vli_decode@@XZ_5.0+0xc0>
    f270:	ldr	x7, [x1]
    f274:	cbnz	x7, f2f8 <lzma_vli_decode@@XZ_5.0+0x98>
    f278:	mov	x10, #0x0                   	// #0
    f27c:	str	xzr, [x0]
    f280:	ldr	x5, [x3]
    f284:	mov	w0, #0xa                   	// #10
    f288:	cmp	x5, x4
    f28c:	b.cs	f2f0 <lzma_vli_decode@@XZ_5.0+0x90>  // b.hs, b.nlast
    f290:	lsl	w8, w7, #3
    f294:	sub	w8, w8, w7
    f298:	b	f2b0 <lzma_vli_decode@@XZ_5.0+0x50>
    f29c:	cmp	x7, #0x9
    f2a0:	b.eq	f340 <lzma_vli_decode@@XZ_5.0+0xe0>  // b.none
    f2a4:	cmp	x5, x4
    f2a8:	add	w8, w8, #0x7
    f2ac:	b.cs	f358 <lzma_vli_decode@@XZ_5.0+0xf8>  // b.hs, b.nlast
    f2b0:	ldrb	w9, [x2, x5]
    f2b4:	add	x7, x7, #0x1
    f2b8:	add	x5, x5, #0x1
    f2bc:	and	x6, x9, #0x7f
    f2c0:	lsl	x6, x6, x8
    f2c4:	add	x10, x10, x6
    f2c8:	tbnz	w9, #7, f29c <lzma_vli_decode@@XZ_5.0+0x3c>
    f2cc:	str	x7, [x1]
    f2d0:	cmp	w9, #0x0
    f2d4:	str	x5, [x3]
    f2d8:	ccmp	x7, #0x1, #0x0, eq  // eq = none
    f2dc:	str	x10, [x11]
    f2e0:	b.hi	f374 <lzma_vli_decode@@XZ_5.0+0x114>  // b.pmore
    f2e4:	add	x0, sp, #0x8
    f2e8:	cmp	x1, x0
    f2ec:	cset	w0, ne  // ne = any
    f2f0:	add	sp, sp, #0x10
    f2f4:	ret
    f2f8:	cmp	x7, #0x8
    f2fc:	mov	w0, #0xb                   	// #11
    f300:	b.hi	f2f0 <lzma_vli_decode@@XZ_5.0+0x90>  // b.pmore
    f304:	ldr	x10, [x11]
    f308:	lsl	w5, w7, #3
    f30c:	sub	w5, w5, w7
    f310:	lsr	x5, x10, x5
    f314:	cbz	x5, f280 <lzma_vli_decode@@XZ_5.0+0x20>
    f318:	add	sp, sp, #0x10
    f31c:	ret
    f320:	ldr	x5, [x3]
    f324:	str	xzr, [x0]
    f328:	cmp	x5, x4
    f32c:	b.cs	f374 <lzma_vli_decode@@XZ_5.0+0x114>  // b.hs, b.nlast
    f330:	add	x1, sp, #0x8
    f334:	mov	x10, #0x0                   	// #0
    f338:	mov	x7, #0x0                   	// #0
    f33c:	b	f290 <lzma_vli_decode@@XZ_5.0+0x30>
    f340:	str	x7, [x1]
    f344:	mov	w0, w7
    f348:	str	x5, [x3]
    f34c:	str	x10, [x11]
    f350:	add	sp, sp, #0x10
    f354:	ret
    f358:	str	x7, [x1]
    f35c:	add	x0, sp, #0x8
    f360:	str	x5, [x3]
    f364:	cmp	x1, x0
    f368:	str	x10, [x11]
    f36c:	mov	w0, #0x0                   	// #0
    f370:	b.ne	f2f0 <lzma_vli_decode@@XZ_5.0+0x90>  // b.any
    f374:	mov	w0, #0x9                   	// #9
    f378:	add	sp, sp, #0x10
    f37c:	ret

000000000000f380 <lzma_check_is_supported@@XZ_5.0>:
    f380:	cmp	w0, #0xf
    f384:	b.hi	f398 <lzma_check_is_supported@@XZ_5.0+0x18>  // b.pmore
    f388:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    f38c:	add	x1, x1, #0x290
    f390:	ldrb	w0, [x1, w0, uxtw]
    f394:	ret
    f398:	mov	w0, #0x0                   	// #0
    f39c:	ret

000000000000f3a0 <lzma_check_size@@XZ_5.0>:
    f3a0:	cmp	w0, #0xf
    f3a4:	b.hi	f3bc <lzma_check_size@@XZ_5.0+0x1c>  // b.pmore
    f3a8:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
    f3ac:	add	x1, x1, #0x290
    f3b0:	add	x0, x1, w0, uxtw
    f3b4:	ldrb	w0, [x0, #16]
    f3b8:	ret
    f3bc:	mov	w0, #0xffffffff            	// #-1
    f3c0:	ret
    f3c4:	nop
    f3c8:	cmp	w1, #0x4
    f3cc:	b.eq	f3f0 <lzma_check_size@@XZ_5.0+0x50>  // b.none
    f3d0:	cmp	w1, #0xa
    f3d4:	b.eq	f3ec <lzma_check_size@@XZ_5.0+0x4c>  // b.none
    f3d8:	cmp	w1, #0x1
    f3dc:	b.eq	f3e4 <lzma_check_size@@XZ_5.0+0x44>  // b.none
    f3e0:	ret
    f3e4:	str	wzr, [x0, #64]
    f3e8:	ret
    f3ec:	b	10540 <lzma_crc64@@XZ_5.0+0xf50>
    f3f0:	str	xzr, [x0, #64]
    f3f4:	ret
    f3f8:	stp	x29, x30, [sp, #-32]!
    f3fc:	mov	w4, w1
    f400:	cmp	w1, #0x4
    f404:	mov	x29, sp
    f408:	str	x19, [sp, #16]
    f40c:	mov	x1, x3
    f410:	mov	x19, x0
    f414:	mov	x0, x2
    f418:	b.eq	f438 <lzma_check_size@@XZ_5.0+0x98>  // b.none
    f41c:	cmp	w4, #0xa
    f420:	b.eq	f468 <lzma_check_size@@XZ_5.0+0xc8>  // b.none
    f424:	cmp	w4, #0x1
    f428:	b.eq	f450 <lzma_check_size@@XZ_5.0+0xb0>  // b.none
    f42c:	ldr	x19, [sp, #16]
    f430:	ldp	x29, x30, [sp], #32
    f434:	ret
    f438:	ldr	x2, [x19, #64]
    f43c:	bl	32c0 <lzma_crc64@plt>
    f440:	str	x0, [x19, #64]
    f444:	ldr	x19, [sp, #16]
    f448:	ldp	x29, x30, [sp], #32
    f44c:	ret
    f450:	ldr	w2, [x19, #64]
    f454:	bl	31f0 <lzma_crc32@plt>
    f458:	str	w0, [x19, #64]
    f45c:	ldr	x19, [sp, #16]
    f460:	ldp	x29, x30, [sp], #32
    f464:	ret
    f468:	mov	x2, x19
    f46c:	ldr	x19, [sp, #16]
    f470:	ldp	x29, x30, [sp], #32
    f474:	b	10560 <lzma_crc64@@XZ_5.0+0xf70>
    f478:	mov	x2, x0
    f47c:	cmp	w1, #0x4
    f480:	b.eq	f4a8 <lzma_check_size@@XZ_5.0+0x108>  // b.none
    f484:	cmp	w1, #0xa
    f488:	b.eq	f4a4 <lzma_check_size@@XZ_5.0+0x104>  // b.none
    f48c:	cmp	w1, #0x1
    f490:	b.eq	f498 <lzma_check_size@@XZ_5.0+0xf8>  // b.none
    f494:	ret
    f498:	ldr	w0, [x0, #64]
    f49c:	str	w0, [x2]
    f4a0:	ret
    f4a4:	b	10600 <lzma_crc64@@XZ_5.0+0x1010>
    f4a8:	ldr	x0, [x0, #64]
    f4ac:	str	x0, [x2]
    f4b0:	ret
    f4b4:	nop

000000000000f4b8 <lzma_crc32@@XZ_5.0>:
    f4b8:	cmp	x1, #0x8
    f4bc:	mvn	w2, w2
    f4c0:	b.ls	f5b0 <lzma_crc32@@XZ_5.0+0xf8>  // b.plast
    f4c4:	tst	x0, #0x7
    f4c8:	b.eq	f5e4 <lzma_crc32@@XZ_5.0+0x12c>  // b.none
    f4cc:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f4d0:	add	x6, x0, x1
    f4d4:	ldr	x4, [x4, #3944]
    f4d8:	ldrb	w1, [x0], #1
    f4dc:	eor	x1, x2, x1
    f4e0:	sub	x3, x6, x0
    f4e4:	and	x1, x1, #0xff
    f4e8:	tst	x0, #0x7
    f4ec:	ldr	w5, [x4, x1, lsl #2]
    f4f0:	eor	w2, w5, w2, lsr #8
    f4f4:	b.ne	f4d8 <lzma_crc32@@XZ_5.0+0x20>  // b.any
    f4f8:	and	x10, x3, #0xfffffffffffffff8
    f4fc:	and	x1, x3, #0x7
    f500:	add	x10, x0, x10
    f504:	cmp	x10, x0
    f508:	b.ls	f5b0 <lzma_crc32@@XZ_5.0+0xf8>  // b.plast
    f50c:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f510:	mov	x6, x0
    f514:	ldr	x4, [x4, #3944]
    f518:	ldp	w5, w3, [x6]
    f51c:	add	x6, x6, #0x8
    f520:	cmp	x10, x6
    f524:	eor	w2, w2, w5
    f528:	add	x14, x4, w3, uxtb #2
    f52c:	lsr	w11, w3, #24
    f530:	lsr	w8, w2, #24
    f534:	add	x13, x4, w2, uxtb #2
    f538:	add	x8, x8, #0x400
    f53c:	ubfx	x7, x3, #8, #8
    f540:	ubfx	x3, x3, #16, #8
    f544:	ubfx	x9, x2, #8, #8
    f548:	add	x5, x3, #0x100
    f54c:	ubfx	x2, x2, #16, #8
    f550:	add	x7, x7, #0x200
    f554:	ldr	w12, [x4, x8, lsl #2]
    f558:	ldr	w11, [x4, x11, lsl #2]
    f55c:	add	x3, x2, #0x500
    f560:	ldr	w8, [x14, #3072]
    f564:	add	x9, x9, #0x600
    f568:	ldr	w2, [x13, #7168]
    f56c:	eor	w8, w8, w11
    f570:	ldr	w7, [x4, x7, lsl #2]
    f574:	ldr	w11, [x4, x5, lsl #2]
    f578:	eor	w2, w2, w12
    f57c:	ldr	w3, [x4, x3, lsl #2]
    f580:	eor	w2, w2, w8
    f584:	ldr	w5, [x4, x9, lsl #2]
    f588:	eor	w7, w7, w11
    f58c:	eor	w2, w2, w7
    f590:	eor	w3, w5, w3
    f594:	eor	w2, w3, w2
    f598:	b.hi	f518 <lzma_crc32@@XZ_5.0+0x60>  // b.pmore
    f59c:	mvn	x3, x0
    f5a0:	add	x3, x10, x3
    f5a4:	and	x3, x3, #0xfffffffffffffff8
    f5a8:	add	x3, x3, #0x8
    f5ac:	add	x0, x0, x3
    f5b0:	cbz	x1, f5dc <lzma_crc32@@XZ_5.0+0x124>
    f5b4:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f5b8:	add	x3, x0, x1
    f5bc:	ldr	x4, [x4, #3944]
    f5c0:	ldrb	w1, [x0], #1
    f5c4:	eor	x1, x2, x1
    f5c8:	cmp	x0, x3
    f5cc:	and	x1, x1, #0xff
    f5d0:	ldr	w1, [x4, x1, lsl #2]
    f5d4:	eor	w2, w1, w2, lsr #8
    f5d8:	b.ne	f5c0 <lzma_crc32@@XZ_5.0+0x108>  // b.any
    f5dc:	mvn	w0, w2
    f5e0:	ret
    f5e4:	mov	x3, x1
    f5e8:	b	f4f8 <lzma_crc32@@XZ_5.0+0x40>
    f5ec:	nop

000000000000f5f0 <lzma_crc64@@XZ_5.0>:
    f5f0:	cmp	x1, #0x4
    f5f4:	mvn	x2, x2
    f5f8:	b.ls	f6ac <lzma_crc64@@XZ_5.0+0xbc>  // b.plast
    f5fc:	tst	x0, #0x3
    f600:	b.eq	f6e4 <lzma_crc64@@XZ_5.0+0xf4>  // b.none
    f604:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f608:	add	x1, x0, x1
    f60c:	ldr	x4, [x4, #3976]
    f610:	and	x6, x2, #0xff
    f614:	ldrb	w5, [x0], #1
    f618:	eor	x5, x5, x6
    f61c:	sub	x3, x1, x0
    f620:	tst	x0, #0x3
    f624:	ldr	x5, [x4, x5, lsl #3]
    f628:	eor	x2, x5, x2, lsr #8
    f62c:	b.ne	f610 <lzma_crc64@@XZ_5.0+0x20>  // b.any
    f630:	and	x8, x3, #0xfffffffffffffffc
    f634:	and	x1, x3, #0x3
    f638:	add	x8, x0, x8
    f63c:	cmp	x8, x0
    f640:	b.ls	f6ac <lzma_crc64@@XZ_5.0+0xbc>  // b.plast
    f644:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f648:	mov	x7, x0
    f64c:	ldr	x4, [x4, #3976]
    f650:	ldr	w3, [x7], #4
    f654:	eor	w3, w3, w2
    f658:	cmp	x8, x7
    f65c:	ubfx	x5, x3, #8, #8
    f660:	ubfx	x6, x3, #16, #8
    f664:	add	x6, x6, #0x100
    f668:	add	x5, x5, #0x200
    f66c:	add	x9, x4, w3, uxtb #3
    f670:	lsr	w3, w3, #24
    f674:	ldr	x5, [x4, x5, lsl #3]
    f678:	ldr	x10, [x4, x6, lsl #3]
    f67c:	ldr	x6, [x4, x3, lsl #3]
    f680:	eor	x3, x5, x10
    f684:	ldr	x5, [x9, #6144]
    f688:	eor	x5, x5, x6
    f68c:	eor	x3, x3, x5
    f690:	eor	x2, x3, x2, lsr #32
    f694:	b.hi	f650 <lzma_crc64@@XZ_5.0+0x60>  // b.pmore
    f698:	mvn	x3, x0
    f69c:	add	x3, x8, x3
    f6a0:	and	x3, x3, #0xfffffffffffffffc
    f6a4:	add	x3, x3, #0x4
    f6a8:	add	x0, x0, x3
    f6ac:	cbz	x1, f6dc <lzma_crc64@@XZ_5.0+0xec>
    f6b0:	adrp	x4, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
    f6b4:	add	x3, x0, x1
    f6b8:	ldr	x4, [x4, #3976]
    f6bc:	nop
    f6c0:	and	x5, x2, #0xff
    f6c4:	ldrb	w1, [x0], #1
    f6c8:	eor	x1, x1, x5
    f6cc:	cmp	x0, x3
    f6d0:	ldr	x1, [x4, x1, lsl #3]
    f6d4:	eor	x2, x1, x2, lsr #8
    f6d8:	b.ne	f6c0 <lzma_crc64@@XZ_5.0+0xd0>  // b.any
    f6dc:	mvn	x0, x2
    f6e0:	ret
    f6e4:	mov	x3, x1
    f6e8:	b	f630 <lzma_crc64@@XZ_5.0+0x40>
    f6ec:	nop
    f6f0:	stp	x29, x30, [sp, #-160]!
    f6f4:	mov	w8, #0xdba5                	// #56229
    f6f8:	movk	w8, #0xe9b5, lsl #16
    f6fc:	mov	x29, sp
    f700:	stp	x19, x20, [sp, #16]
    f704:	mov	w12, #0x2f98                	// #12184
    f708:	movk	w12, #0x428a, lsl #16
    f70c:	stp	x21, x22, [sp, #32]
    f710:	mov	w15, #0x4491                	// #17553
    f714:	movk	w15, #0x7137, lsl #16
    f718:	stp	x23, x24, [sp, #48]
    f71c:	mov	w14, #0xfbcf                	// #64463
    f720:	movk	w14, #0xb5c0, lsl #16
    f724:	stp	x25, x26, [sp, #64]
    f728:	mov	w11, #0xc25b                	// #49755
    f72c:	ldr	w18, [x1, #16]
    f730:	stp	x27, x28, [sp, #80]
    f734:	movk	w11, #0x3956, lsl #16
    f738:	rev	w18, w18
    f73c:	ldr	x2, [x0, #16]
    f740:	str	x0, [sp, #120]
    f744:	ldp	x6, x7, [x0]
    f748:	stp	x6, x7, [sp, #128]
    f74c:	eor	w4, w2, w2, ror #14
    f750:	ldr	x0, [x0, #24]
    f754:	str	x0, [sp, #152]
    f758:	str	x2, [sp, #144]
    f75c:	mov	w13, w2
    f760:	add	w9, w2, w8
    f764:	eor	w4, w2, w4, ror #5
    f768:	ldp	w2, w7, [sp, #152]
    f76c:	ror	w4, w4, #6
    f770:	ldr	w0, [sp, #128]
    f774:	add	w11, w18, w11
    f778:	ldr	w8, [sp, #148]
    f77c:	add	w15, w2, w15
    f780:	ldp	w6, w10, [sp, #132]
    f784:	eor	w3, w2, w8
    f788:	ldp	w21, w20, [x1]
    f78c:	eor	w5, w0, w0, ror #9
    f790:	and	w3, w3, w13
    f794:	and	w16, w6, w10
    f798:	eor	w3, w3, w2
    f79c:	eor	w5, w0, w5, ror #11
    f7a0:	add	w4, w4, w3
    f7a4:	add	w3, w7, w12
    f7a8:	rev	w21, w21
    f7ac:	ldr	w7, [sp, #140]
    f7b0:	add	w4, w4, w3
    f7b4:	eor	w3, w6, w10
    f7b8:	and	w3, w3, w0
    f7bc:	add	w4, w4, w21
    f7c0:	add	w12, w4, w7
    f7c4:	ror	w5, w5, #2
    f7c8:	add	w4, w5, w4
    f7cc:	add	w5, w3, w16
    f7d0:	add	w5, w4, w5
    f7d4:	eor	w3, w13, w8
    f7d8:	eor	w7, w12, w12, ror #14
    f7dc:	and	w3, w3, w12
    f7e0:	eor	w4, w5, w5, ror #9
    f7e4:	eor	w3, w3, w8
    f7e8:	eor	w7, w12, w7, ror #5
    f7ec:	rev	w20, w20
    f7f0:	eor	w4, w5, w4, ror #11
    f7f4:	add	w3, w3, w20
    f7f8:	eor	w2, w0, w6
    f7fc:	add	w3, w3, w15
    f800:	and	w2, w2, w5
    f804:	ror	w7, w7, #6
    f808:	add	w3, w3, w7
    f80c:	ror	w4, w4, #2
    f810:	and	w7, w0, w6
    f814:	add	w10, w10, w3
    f818:	add	w3, w4, w3
    f81c:	add	w4, w2, w7
    f820:	add	w4, w3, w4
    f824:	eor	w2, w13, w12
    f828:	ldp	w19, w30, [x1, #8]
    f82c:	eor	w7, w10, w10, ror #14
    f830:	and	w2, w2, w10
    f834:	eor	w3, w4, w4, ror #9
    f838:	eor	w7, w10, w7, ror #5
    f83c:	eor	w2, w2, w13
    f840:	rev	w19, w19
    f844:	add	w14, w8, w14
    f848:	eor	w3, w4, w3, ror #11
    f84c:	add	w2, w2, w19
    f850:	add	w2, w2, w14
    f854:	ror	w8, w7, #6
    f858:	eor	w7, w0, w5
    f85c:	add	w2, w2, w8
    f860:	and	w7, w7, w4
    f864:	and	w8, w0, w5
    f868:	add	w6, w6, w2
    f86c:	ror	w3, w3, #2
    f870:	add	w2, w3, w2
    f874:	add	w3, w7, w8
    f878:	add	w3, w2, w3
    f87c:	eor	w8, w12, w10
    f880:	eor	w7, w6, w6, ror #14
    f884:	and	w8, w8, w6
    f888:	eor	w2, w3, w3, ror #9
    f88c:	eor	w8, w8, w12
    f890:	eor	w7, w6, w7, ror #5
    f894:	rev	w30, w30
    f898:	eor	w2, w3, w2, ror #11
    f89c:	add	w8, w8, w30
    f8a0:	add	w8, w8, w9
    f8a4:	ror	w9, w7, #6
    f8a8:	eor	w7, w5, w4
    f8ac:	add	w8, w8, w9
    f8b0:	and	w7, w7, w3
    f8b4:	and	w9, w5, w4
    f8b8:	add	w0, w0, w8
    f8bc:	ror	w2, w2, #2
    f8c0:	add	w8, w2, w8
    f8c4:	add	w2, w7, w9
    f8c8:	add	w2, w8, w2
    f8cc:	eor	w7, w10, w6
    f8d0:	eor	w8, w0, w0, ror #14
    f8d4:	and	w7, w7, w0
    f8d8:	eor	w9, w2, w2, ror #9
    f8dc:	eor	w7, w7, w10
    f8e0:	eor	w8, w0, w8, ror #5
    f8e4:	add	w7, w7, w12
    f8e8:	eor	w9, w2, w9, ror #11
    f8ec:	add	w7, w7, w11
    f8f0:	ror	w11, w8, #6
    f8f4:	eor	w8, w4, w3
    f8f8:	add	w7, w7, w11
    f8fc:	and	w8, w8, w2
    f900:	and	w11, w4, w3
    f904:	add	w5, w5, w7
    f908:	ror	w9, w9, #2
    f90c:	add	w8, w8, w11
    f910:	add	w9, w9, w7
    f914:	ldp	w28, w17, [x1, #20]
    f918:	add	w9, w9, w8
    f91c:	eor	w7, w6, w0
    f920:	eor	w11, w5, w5, ror #14
    f924:	and	w7, w7, w5
    f928:	eor	w8, w9, w9, ror #9
    f92c:	eor	w7, w7, w6
    f930:	eor	w11, w5, w11, ror #5
    f934:	add	w7, w7, w10
    f938:	rev	w28, w28
    f93c:	mov	w10, #0x11f1                	// #4593
    f940:	eor	w8, w9, w8, ror #11
    f944:	movk	w10, #0x59f1, lsl #16
    f948:	add	w10, w28, w10
    f94c:	add	w7, w7, w10
    f950:	ror	w11, w11, #6
    f954:	eor	w10, w3, w2
    f958:	add	w7, w7, w11
    f95c:	and	w10, w10, w9
    f960:	and	w11, w3, w2
    f964:	add	w4, w4, w7
    f968:	ror	w8, w8, #2
    f96c:	add	w10, w10, w11
    f970:	add	w8, w8, w7
    f974:	add	w8, w8, w10
    f978:	eor	w7, w0, w5
    f97c:	eor	w11, w4, w4, ror #14
    f980:	and	w7, w7, w4
    f984:	eor	w10, w8, w8, ror #9
    f988:	eor	w7, w7, w0
    f98c:	eor	w11, w4, w11, ror #5
    f990:	rev	w17, w17
    f994:	mov	w12, #0x82a4                	// #33444
    f998:	add	w6, w7, w6
    f99c:	movk	w12, #0x923f, lsl #16
    f9a0:	eor	w7, w8, w10, ror #11
    f9a4:	add	w10, w17, w12
    f9a8:	ror	w11, w11, #6
    f9ac:	add	w6, w6, w10
    f9b0:	eor	w10, w2, w9
    f9b4:	add	w6, w6, w11
    f9b8:	and	w10, w10, w8
    f9bc:	and	w11, w2, w9
    f9c0:	ror	w7, w7, #2
    f9c4:	add	w3, w3, w6
    f9c8:	add	w6, w7, w6
    f9cc:	add	w7, w10, w11
    f9d0:	eor	w10, w5, w4
    f9d4:	add	w7, w6, w7
    f9d8:	eor	w11, w3, w3, ror #14
    f9dc:	ldp	w16, w15, [x1, #28]
    f9e0:	and	w10, w10, w3
    f9e4:	eor	w10, w10, w5
    f9e8:	eor	w6, w7, w7, ror #9
    f9ec:	eor	w11, w3, w11, ror #5
    f9f0:	add	w0, w10, w0
    f9f4:	rev	w16, w16
    f9f8:	mov	w10, #0x5ed5                	// #24277
    f9fc:	eor	w6, w7, w6, ror #11
    fa00:	movk	w10, #0xab1c, lsl #16
    fa04:	add	w10, w16, w10
    fa08:	ror	w11, w11, #6
    fa0c:	add	w0, w0, w10
    fa10:	eor	w10, w9, w8
    fa14:	add	w0, w0, w11
    fa18:	and	w10, w10, w7
    fa1c:	and	w11, w9, w8
    fa20:	ror	w6, w6, #2
    fa24:	add	w2, w2, w0
    fa28:	add	w0, w6, w0
    fa2c:	add	w6, w10, w11
    fa30:	eor	w10, w4, w3
    fa34:	add	w6, w0, w6
    fa38:	eor	w11, w2, w2, ror #14
    fa3c:	and	w10, w10, w2
    fa40:	rev	w15, w15
    fa44:	eor	w10, w10, w4
    fa48:	eor	w0, w6, w6, ror #9
    fa4c:	eor	w11, w2, w11, ror #5
    fa50:	add	w5, w10, w5
    fa54:	mov	w10, #0xaa98                	// #43672
    fa58:	eor	w0, w6, w0, ror #11
    fa5c:	movk	w10, #0xd807, lsl #16
    fa60:	add	w10, w15, w10
    fa64:	add	w5, w5, w10
    fa68:	ror	w11, w11, #6
    fa6c:	eor	w10, w8, w7
    fa70:	add	w5, w5, w11
    fa74:	and	w10, w10, w6
    fa78:	and	w11, w8, w7
    fa7c:	add	w9, w9, w5
    fa80:	ror	w0, w0, #2
    fa84:	add	w10, w10, w11
    fa88:	add	w0, w0, w5
    fa8c:	add	w0, w0, w10
    fa90:	eor	w5, w3, w2
    fa94:	ldp	w14, w13, [x1, #36]
    fa98:	eor	w10, w9, w9, ror #14
    fa9c:	and	w5, w5, w9
    faa0:	eor	w23, w0, w0, ror #9
    faa4:	eor	w5, w5, w3
    faa8:	eor	w10, w9, w10, ror #5
    faac:	add	w4, w5, w4
    fab0:	rev	w14, w14
    fab4:	mov	w5, #0x5b01                	// #23297
    fab8:	eor	w23, w0, w23, ror #11
    fabc:	movk	w5, #0x1283, lsl #16
    fac0:	add	w5, w14, w5
    fac4:	add	w4, w4, w5
    fac8:	ror	w10, w10, #6
    facc:	eor	w5, w7, w6
    fad0:	add	w4, w4, w10
    fad4:	and	w5, w5, w0
    fad8:	and	w10, w7, w6
    fadc:	add	w8, w8, w4
    fae0:	ror	w23, w23, #2
    fae4:	add	w5, w5, w10
    fae8:	add	w23, w23, w4
    faec:	add	w23, w23, w5
    faf0:	eor	w4, w2, w9
    faf4:	eor	w5, w8, w8, ror #14
    faf8:	and	w4, w4, w8
    fafc:	eor	w4, w4, w2
    fb00:	eor	w22, w23, w23, ror #9
    fb04:	eor	w5, w8, w5, ror #5
    fb08:	add	w3, w4, w3
    fb0c:	rev	w13, w13
    fb10:	mov	w4, #0x85be                	// #34238
    fb14:	eor	w22, w23, w22, ror #11
    fb18:	movk	w4, #0x2431, lsl #16
    fb1c:	add	w4, w13, w4
    fb20:	ldr	w10, [x1, #52]
    fb24:	add	w3, w3, w4
    fb28:	ror	w4, w5, #6
    fb2c:	eor	w5, w6, w0
    fb30:	add	w3, w3, w4
    fb34:	and	w5, w5, w23
    fb38:	and	w4, w6, w0
    fb3c:	add	w7, w7, w3
    fb40:	ror	w22, w22, #2
    fb44:	add	w5, w5, w4
    fb48:	add	w22, w22, w3
    fb4c:	add	w22, w22, w5
    fb50:	eor	w3, w9, w8
    fb54:	ldp	w12, w11, [x1, #44]
    fb58:	eor	w5, w7, w7, ror #14
    fb5c:	and	w3, w3, w7
    fb60:	eor	w4, w22, w22, ror #9
    fb64:	eor	w3, w3, w9
    fb68:	eor	w5, w7, w5, ror #5
    fb6c:	add	w2, w3, w2
    fb70:	rev	w12, w12
    fb74:	mov	w3, #0x7dc3                	// #32195
    fb78:	eor	w4, w22, w4, ror #11
    fb7c:	movk	w3, #0x550c, lsl #16
    fb80:	add	w3, w12, w3
    fb84:	add	w2, w2, w3
    fb88:	ror	w3, w5, #6
    fb8c:	eor	w5, w0, w23
    fb90:	add	w3, w2, w3
    fb94:	add	w6, w6, w3
    fb98:	ror	w2, w4, #2
    fb9c:	and	w4, w5, w22
    fba0:	and	w5, w0, w23
    fba4:	add	w2, w2, w3
    fba8:	add	w4, w4, w5
    fbac:	add	w2, w2, w4
    fbb0:	eor	w3, w8, w7
    fbb4:	eor	w4, w6, w6, ror #14
    fbb8:	and	w3, w3, w6
    fbbc:	eor	w3, w3, w8
    fbc0:	eor	w25, w2, w2, ror #9
    fbc4:	eor	w4, w6, w4, ror #5
    fbc8:	add	w9, w3, w9
    fbcc:	rev	w11, w11
    fbd0:	mov	w3, #0x5d74                	// #23924
    fbd4:	eor	w25, w2, w25, ror #11
    fbd8:	movk	w3, #0x72be, lsl #16
    fbdc:	add	w3, w11, w3
    fbe0:	rev	w10, w10
    fbe4:	add	w9, w9, w3
    fbe8:	ror	w3, w4, #6
    fbec:	eor	w4, w23, w22
    fbf0:	add	w9, w9, w3
    fbf4:	and	w4, w4, w2
    fbf8:	and	w3, w23, w22
    fbfc:	add	w0, w0, w9
    fc00:	ror	w25, w25, #2
    fc04:	add	w4, w4, w3
    fc08:	add	w9, w25, w9
    fc0c:	add	w25, w9, w4
    fc10:	eor	w3, w7, w6
    fc14:	eor	w4, w0, w0, ror #14
    fc18:	and	w3, w3, w0
    fc1c:	eor	w3, w3, w7
    fc20:	eor	w26, w25, w25, ror #9
    fc24:	eor	w4, w0, w4, ror #5
    fc28:	add	w8, w3, w8
    fc2c:	mov	w3, #0xb1fe                	// #45566
    fc30:	eor	w26, w25, w26, ror #11
    fc34:	movk	w3, #0x80de, lsl #16
    fc38:	add	w3, w10, w3
    fc3c:	add	w8, w8, w3
    fc40:	ror	w3, w4, #6
    fc44:	eor	w4, w22, w2
    fc48:	add	w8, w8, w3
    fc4c:	and	w4, w4, w25
    fc50:	and	w3, w22, w2
    fc54:	add	w23, w23, w8
    fc58:	ror	w26, w26, #2
    fc5c:	add	w4, w4, w3
    fc60:	add	w8, w26, w8
    fc64:	add	w26, w8, w4
    fc68:	eor	w3, w6, w0
    fc6c:	ldp	w9, w8, [x1, #56]
    fc70:	eor	w4, w23, w23, ror #14
    fc74:	and	w3, w3, w23
    fc78:	eor	w24, w26, w26, ror #9
    fc7c:	eor	w3, w3, w6
    fc80:	eor	w4, w23, w4, ror #5
    fc84:	add	w7, w3, w7
    fc88:	rev	w9, w9
    fc8c:	mov	w3, #0x6a7                 	// #1703
    fc90:	eor	w24, w26, w24, ror #11
    fc94:	movk	w3, #0x9bdc, lsl #16
    fc98:	add	w3, w9, w3
    fc9c:	add	w7, w7, w3
    fca0:	ror	w3, w4, #6
    fca4:	eor	w4, w2, w25
    fca8:	add	w7, w7, w3
    fcac:	and	w4, w4, w26
    fcb0:	and	w3, w2, w25
    fcb4:	add	w22, w22, w7
    fcb8:	ror	w24, w24, #2
    fcbc:	add	w4, w4, w3
    fcc0:	add	w24, w24, w7
    fcc4:	add	w24, w24, w4
    fcc8:	eor	w3, w0, w23
    fccc:	and	w1, w3, w22
    fcd0:	eor	w7, w22, w22, ror #14
    fcd4:	eor	w1, w1, w0
    fcd8:	eor	w4, w24, w24, ror #9
    fcdc:	add	w6, w1, w6
    fce0:	rev	w8, w8
    fce4:	eor	w7, w22, w7, ror #5
    fce8:	mov	w1, #0xf174                	// #61812
    fcec:	eor	w4, w24, w4, ror #11
    fcf0:	movk	w1, #0xc19b, lsl #16
    fcf4:	add	w1, w8, w1
    fcf8:	ror	w7, w7, #6
    fcfc:	add	w6, w6, w1
    fd00:	eor	w1, w25, w26
    fd04:	add	w6, w6, w7
    fd08:	ror	w4, w4, #2
    fd0c:	and	w1, w1, w24
    fd10:	and	w3, w25, w26
    fd14:	add	w1, w1, w3
    fd18:	add	w4, w4, w6
    fd1c:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
    fd20:	add	w2, w2, w6
    fd24:	add	x7, x7, #0x2b0
    fd28:	add	w4, w4, w1
    fd2c:	add	x1, x7, #0xc0
    fd30:	stp	w22, w21, [sp, #104]
    fd34:	str	x1, [sp, #112]
    fd38:	eor	w3, w9, w9, ror #2
    fd3c:	eor	w6, w20, w20, ror #11
    fd40:	lsr	w1, w9, #10
    fd44:	eor	w22, w2, w2, ror #14
    fd48:	eor	w1, w1, w3, ror #17
    fd4c:	lsr	w3, w20, #3
    fd50:	eor	w6, w3, w6, ror #7
    fd54:	eor	w22, w2, w22, ror #5
    fd58:	ldp	w21, w3, [sp, #104]
    fd5c:	add	w1, w1, w6
    fd60:	eor	w6, w19, w19, ror #11
    fd64:	ror	w22, w22, #6
    fd68:	add	w3, w14, w3
    fd6c:	eor	w27, w23, w21
    fd70:	add	w5, w1, w3
    fd74:	and	w27, w27, w2
    fd78:	ldr	w3, [x7, #64]
    fd7c:	eor	w21, w4, w4, ror #9
    fd80:	eor	w27, w27, w23
    fd84:	add	w22, w22, w5
    fd88:	eor	w21, w4, w21, ror #11
    fd8c:	add	w27, w27, w3
    fd90:	add	w22, w22, w27
    fd94:	and	w3, w24, w26
    fd98:	add	w22, w22, w0
    fd9c:	ror	w0, w21, #2
    fda0:	eor	w21, w24, w26
    fda4:	add	w0, w0, w22
    fda8:	and	w21, w21, w4
    fdac:	eor	w1, w8, w8, ror #2
    fdb0:	add	w21, w21, w3
    fdb4:	add	w25, w22, w25
    fdb8:	add	w3, w0, w21
    fdbc:	lsr	w27, w8, #10
    fdc0:	ldr	w21, [sp, #104]
    fdc4:	eor	w1, w27, w1, ror #17
    fdc8:	lsr	w27, w19, #3
    fdcc:	add	w20, w13, w20
    fdd0:	eor	w6, w27, w6, ror #7
    fdd4:	eor	w0, w2, w21
    fdd8:	eor	w27, w25, w25, ror #14
    fddc:	add	w1, w1, w6
    fde0:	eor	w22, w3, w3, ror #9
    fde4:	ldr	w6, [x7, #68]
    fde8:	and	w0, w0, w25
    fdec:	add	w20, w1, w20
    fdf0:	eor	w27, w25, w27, ror #5
    fdf4:	eor	w0, w0, w21
    fdf8:	eor	w22, w3, w22, ror #11
    fdfc:	add	w23, w23, w6
    fe00:	add	w0, w0, w20
    fe04:	ror	w27, w27, #6
    fe08:	add	w23, w0, w23
    fe0c:	ror	w6, w22, #2
    fe10:	eor	w1, w5, w5, ror #2
    fe14:	eor	w22, w4, w24
    fe18:	add	w23, w23, w27
    fe1c:	and	w22, w22, w3
    fe20:	add	w26, w23, w26
    fe24:	lsr	w0, w5, #10
    fe28:	add	w23, w6, w23
    fe2c:	and	w6, w4, w24
    fe30:	stp	w21, w5, [sp, #104]
    fe34:	eor	w21, w30, w30, ror #11
    fe38:	add	w22, w22, w6
    fe3c:	eor	w0, w0, w1, ror #17
    fe40:	lsr	w1, w30, #3
    fe44:	add	w6, w23, w22
    fe48:	eor	w1, w1, w21, ror #7
    fe4c:	eor	w23, w26, w26, ror #14
    fe50:	eor	w21, w2, w25
    fe54:	ldr	w22, [x7, #72]
    fe58:	add	w0, w0, w1
    fe5c:	add	w19, w12, w19
    fe60:	ldr	w1, [sp, #104]
    fe64:	and	w21, w21, w26
    fe68:	add	w19, w0, w19
    fe6c:	eor	w23, w26, w23, ror #5
    fe70:	eor	w21, w21, w2
    fe74:	eor	w0, w6, w6, ror #9
    fe78:	add	w5, w1, w22
    fe7c:	add	w21, w21, w19
    fe80:	eor	w0, w6, w0, ror #11
    fe84:	ror	w23, w23, #6
    fe88:	add	w5, w21, w5
    fe8c:	and	w1, w4, w3
    fe90:	add	w5, w5, w23
    fe94:	eor	w23, w4, w3
    fe98:	and	w23, w23, w6
    fe9c:	ror	w0, w0, #2
    fea0:	eor	w21, w18, w18, ror #11
    fea4:	eor	w22, w20, w20, ror #2
    fea8:	add	w24, w24, w5
    feac:	lsr	w27, w20, #10
    feb0:	add	w5, w0, w5
    feb4:	add	w1, w23, w1
    feb8:	lsr	w0, w18, #3
    febc:	add	w1, w5, w1
    fec0:	eor	w22, w27, w22, ror #17
    fec4:	eor	w21, w0, w21, ror #7
    fec8:	add	w21, w22, w21
    fecc:	eor	w0, w25, w26
    fed0:	add	w30, w11, w30
    fed4:	eor	w27, w24, w24, ror #14
    fed8:	add	w30, w21, w30
    fedc:	ldr	w5, [x7, #76]
    fee0:	and	w0, w0, w24
    fee4:	eor	w21, w1, w1, ror #9
    fee8:	eor	w0, w0, w25
    feec:	eor	w27, w24, w27, ror #5
    fef0:	add	w0, w0, w30
    fef4:	eor	w21, w1, w21, ror #11
    fef8:	add	w2, w2, w5
    fefc:	ror	w27, w27, #6
    ff00:	add	w2, w0, w2
    ff04:	ror	w21, w21, #2
    ff08:	add	w2, w2, w27
    ff0c:	eor	w0, w3, w6
    ff10:	eor	w22, w19, w19, ror #2
    ff14:	add	w4, w4, w2
    ff18:	and	w5, w3, w6
    ff1c:	add	w2, w21, w2
    ff20:	eor	w23, w28, w28, ror #11
    ff24:	and	w0, w0, w1
    ff28:	lsr	w21, w19, #10
    ff2c:	add	w0, w0, w5
    ff30:	eor	w22, w21, w22, ror #17
    ff34:	lsr	w21, w28, #3
    ff38:	add	w5, w2, w0
    ff3c:	eor	w23, w21, w23, ror #7
    ff40:	eor	w2, w26, w24
    ff44:	add	w22, w22, w23
    ff48:	and	w2, w2, w4
    ff4c:	add	w18, w10, w18
    ff50:	eor	w21, w4, w4, ror #14
    ff54:	add	w18, w22, w18
    ff58:	ldr	w23, [x7, #80]
    ff5c:	eor	w22, w2, w26
    ff60:	eor	w2, w5, w5, ror #9
    ff64:	eor	w21, w4, w21, ror #5
    ff68:	add	w22, w22, w18
    ff6c:	add	w25, w25, w23
    ff70:	eor	w2, w5, w2, ror #11
    ff74:	eor	w27, w6, w1
    ff78:	add	w25, w22, w25
    ff7c:	ror	w21, w21, #6
    ff80:	and	w27, w27, w5
    ff84:	and	w0, w6, w1
    ff88:	add	w25, w25, w21
    ff8c:	ror	w2, w2, #2
    ff90:	eor	w21, w17, w17, ror #11
    ff94:	eor	w23, w30, w30, ror #2
    ff98:	add	w22, w3, w25
    ff9c:	add	w0, w27, w0
    ffa0:	add	w25, w2, w25
    ffa4:	lsr	w3, w30, #10
    ffa8:	lsr	w2, w17, #3
    ffac:	add	w0, w25, w0
    ffb0:	eor	w21, w2, w21, ror #7
    ffb4:	eor	w23, w3, w23, ror #17
    ffb8:	eor	w25, w24, w4
    ffbc:	add	w23, w23, w21
    ffc0:	eor	w21, w22, w22, ror #14
    ffc4:	ldr	w3, [x7, #84]
    ffc8:	add	w28, w9, w28
    ffcc:	and	w25, w25, w22
    ffd0:	eor	w2, w0, w0, ror #9
    ffd4:	add	w28, w23, w28
    ffd8:	eor	w25, w25, w24
    ffdc:	eor	w21, w22, w21, ror #5
    ffe0:	add	w25, w25, w28
    ffe4:	eor	w2, w0, w2, ror #11
    ffe8:	add	w26, w26, w3
    ffec:	eor	w27, w1, w5
    fff0:	add	w26, w25, w26
    fff4:	ror	w21, w21, #6
    fff8:	and	w3, w1, w5
    fffc:	ror	w2, w2, #2
   10000:	and	w27, w27, w0
   10004:	eor	w25, w16, w16, ror #11
   10008:	add	w26, w26, w21
   1000c:	eor	w23, w18, w18, ror #2
   10010:	add	w21, w6, w26
   10014:	add	w27, w27, w3
   10018:	add	w26, w2, w26
   1001c:	lsr	w6, w16, #3
   10020:	lsr	w2, w18, #10
   10024:	add	w3, w26, w27
   10028:	eor	w25, w6, w25, ror #7
   1002c:	eor	w23, w2, w23, ror #17
   10030:	eor	w6, w4, w22
   10034:	add	w23, w23, w25
   10038:	add	w17, w8, w17
   1003c:	eor	w2, w21, w21, ror #14
   10040:	add	w17, w23, w17
   10044:	and	w6, w6, w21
   10048:	ldr	w23, [x7, #88]
   1004c:	eor	w26, w3, w3, ror #9
   10050:	eor	w6, w6, w4
   10054:	eor	w2, w21, w2, ror #5
   10058:	add	w6, w6, w17
   1005c:	eor	w26, w3, w26, ror #11
   10060:	add	w24, w24, w23
   10064:	eor	w25, w5, w0
   10068:	add	w24, w6, w24
   1006c:	ror	w2, w2, #6
   10070:	and	w27, w5, w0
   10074:	and	w25, w25, w3
   10078:	add	w24, w24, w2
   1007c:	ror	w26, w26, #2
   10080:	add	w6, w1, w24
   10084:	add	w2, w26, w24
   10088:	add	w1, w25, w27
   1008c:	eor	w25, w28, w28, ror #2
   10090:	add	w2, w2, w1
   10094:	eor	w24, w15, w15, ror #11
   10098:	lsr	w1, w28, #10
   1009c:	ldr	w26, [sp, #108]
   100a0:	eor	w25, w1, w25, ror #17
   100a4:	lsr	w1, w15, #3
   100a8:	eor	w24, w1, w24, ror #7
   100ac:	eor	w23, w22, w21
   100b0:	add	w25, w25, w26
   100b4:	eor	w1, w6, w6, ror #14
   100b8:	add	w16, w24, w16
   100bc:	and	w23, w23, w6
   100c0:	add	w16, w16, w25
   100c4:	eor	w24, w2, w2, ror #9
   100c8:	ldr	w25, [x7, #92]
   100cc:	eor	w23, w23, w22
   100d0:	eor	w1, w6, w1, ror #5
   100d4:	eor	w26, w0, w3
   100d8:	add	w4, w23, w4
   100dc:	eor	w24, w2, w24, ror #11
   100e0:	add	w25, w16, w25
   100e4:	ror	w1, w1, #6
   100e8:	and	w26, w26, w2
   100ec:	add	w4, w4, w25
   100f0:	and	w25, w0, w3
   100f4:	add	w4, w4, w1
   100f8:	add	w26, w26, w25
   100fc:	ror	w24, w24, #2
   10100:	eor	w25, w17, w17, ror #2
   10104:	add	w5, w5, w4
   10108:	eor	w23, w14, w14, ror #11
   1010c:	add	w4, w24, w4
   10110:	lsr	w24, w17, #10
   10114:	add	w1, w4, w26
   10118:	eor	w25, w24, w25, ror #17
   1011c:	lsr	w24, w14, #3
   10120:	eor	w23, w24, w23, ror #7
   10124:	eor	w4, w21, w6
   10128:	eor	w24, w5, w5, ror #14
   1012c:	add	w25, w25, w20
   10130:	add	w15, w23, w15
   10134:	and	w4, w4, w5
   10138:	add	w15, w15, w25
   1013c:	eor	w23, w1, w1, ror #9
   10140:	ldr	w25, [x7, #96]
   10144:	eor	w4, w4, w21
   10148:	eor	w24, w5, w24, ror #5
   1014c:	eor	w26, w3, w2
   10150:	add	w4, w4, w22
   10154:	eor	w23, w1, w23, ror #11
   10158:	add	w25, w15, w25
   1015c:	ror	w24, w24, #6
   10160:	and	w26, w26, w1
   10164:	add	w4, w4, w25
   10168:	and	w25, w3, w2
   1016c:	add	w4, w4, w24
   10170:	add	w26, w26, w25
   10174:	ror	w23, w23, #2
   10178:	eor	w25, w16, w16, ror #2
   1017c:	add	w0, w0, w4
   10180:	eor	w24, w13, w13, ror #11
   10184:	add	w4, w23, w4
   10188:	lsr	w23, w16, #10
   1018c:	add	w22, w4, w26
   10190:	eor	w25, w23, w25, ror #17
   10194:	lsr	w23, w13, #3
   10198:	eor	w24, w23, w24, ror #7
   1019c:	eor	w4, w6, w5
   101a0:	eor	w23, w0, w0, ror #14
   101a4:	add	w25, w25, w19
   101a8:	add	w14, w24, w14
   101ac:	and	w4, w4, w0
   101b0:	add	w14, w14, w25
   101b4:	eor	w24, w22, w22, ror #9
   101b8:	ldr	w25, [x7, #100]
   101bc:	eor	w4, w4, w6
   101c0:	eor	w23, w0, w23, ror #5
   101c4:	eor	w26, w2, w1
   101c8:	add	w21, w4, w21
   101cc:	eor	w24, w22, w24, ror #11
   101d0:	add	w25, w14, w25
   101d4:	ror	w23, w23, #6
   101d8:	and	w26, w26, w22
   101dc:	add	w21, w21, w25
   101e0:	and	w25, w2, w1
   101e4:	add	w21, w21, w23
   101e8:	add	w26, w26, w25
   101ec:	ror	w24, w24, #2
   101f0:	eor	w25, w15, w15, ror #2
   101f4:	add	w3, w3, w21
   101f8:	lsr	w4, w15, #10
   101fc:	add	w21, w24, w21
   10200:	eor	w24, w12, w12, ror #11
   10204:	eor	w25, w4, w25, ror #17
   10208:	lsr	w4, w12, #3
   1020c:	add	w23, w21, w26
   10210:	eor	w24, w4, w24, ror #7
   10214:	eor	w21, w5, w0
   10218:	eor	w4, w3, w3, ror #14
   1021c:	add	w25, w25, w30
   10220:	add	w13, w24, w13
   10224:	and	w21, w21, w3
   10228:	add	w13, w13, w25
   1022c:	eor	w24, w23, w23, ror #9
   10230:	ldr	w25, [x7, #104]
   10234:	eor	w21, w21, w5
   10238:	eor	w4, w3, w4, ror #5
   1023c:	add	w6, w21, w6
   10240:	eor	w24, w23, w24, ror #11
   10244:	add	w25, w13, w25
   10248:	eor	w26, w1, w22
   1024c:	ror	w4, w4, #6
   10250:	add	w6, w6, w25
   10254:	ror	w24, w24, #2
   10258:	and	w25, w1, w22
   1025c:	add	w6, w6, w4
   10260:	and	w26, w26, w23
   10264:	add	w2, w2, w6
   10268:	add	w26, w26, w25
   1026c:	add	w6, w24, w6
   10270:	eor	w25, w14, w14, ror #2
   10274:	add	w4, w6, w26
   10278:	eor	w24, w11, w11, ror #11
   1027c:	lsr	w6, w14, #10
   10280:	eor	w25, w6, w25, ror #17
   10284:	lsr	w6, w11, #3
   10288:	eor	w24, w6, w24, ror #7
   1028c:	eor	w21, w0, w3
   10290:	eor	w6, w2, w2, ror #14
   10294:	add	w25, w25, w18
   10298:	add	w12, w24, w12
   1029c:	and	w21, w21, w2
   102a0:	add	w12, w12, w25
   102a4:	eor	w24, w4, w4, ror #9
   102a8:	ldr	w25, [x7, #108]
   102ac:	eor	w21, w21, w0
   102b0:	eor	w6, w2, w6, ror #5
   102b4:	eor	w26, w22, w23
   102b8:	add	w5, w21, w5
   102bc:	eor	w24, w4, w24, ror #11
   102c0:	add	w25, w12, w25
   102c4:	ror	w6, w6, #6
   102c8:	and	w26, w26, w4
   102cc:	add	w5, w5, w25
   102d0:	and	w25, w22, w23
   102d4:	add	w5, w5, w6
   102d8:	add	w26, w26, w25
   102dc:	ror	w24, w24, #2
   102e0:	eor	w25, w13, w13, ror #2
   102e4:	add	w1, w1, w5
   102e8:	eor	w21, w10, w10, ror #11
   102ec:	add	w5, w24, w5
   102f0:	lsr	w24, w13, #10
   102f4:	add	w6, w5, w26
   102f8:	eor	w25, w24, w25, ror #17
   102fc:	lsr	w24, w10, #3
   10300:	eor	w5, w3, w2
   10304:	eor	w21, w24, w21, ror #7
   10308:	eor	w24, w1, w1, ror #14
   1030c:	ldr	w26, [x7, #112]
   10310:	and	w5, w5, w1
   10314:	add	w25, w25, w28
   10318:	add	w11, w21, w11
   1031c:	eor	w21, w6, w6, ror #9
   10320:	add	w11, w11, w25
   10324:	eor	w5, w5, w3
   10328:	eor	w24, w1, w24, ror #5
   1032c:	add	w0, w5, w0
   10330:	eor	w21, w6, w21, ror #11
   10334:	add	w5, w11, w26
   10338:	add	w5, w0, w5
   1033c:	eor	w26, w23, w4
   10340:	and	w27, w23, w4
   10344:	ror	w24, w24, #6
   10348:	add	w5, w5, w24
   1034c:	ror	w21, w21, #2
   10350:	and	w26, w26, w6
   10354:	add	w0, w22, w5
   10358:	eor	w24, w12, w12, ror #2
   1035c:	add	w22, w26, w27
   10360:	add	w5, w21, w5
   10364:	eor	w21, w9, w9, ror #11
   10368:	add	w25, w5, w22
   1036c:	lsr	w22, w12, #10
   10370:	eor	w24, w22, w24, ror #17
   10374:	lsr	w22, w9, #3
   10378:	eor	w21, w22, w21, ror #7
   1037c:	eor	w5, w2, w1
   10380:	add	w24, w24, w17
   10384:	add	w10, w21, w10
   10388:	eor	w22, w0, w0, ror #14
   1038c:	add	w10, w10, w24
   10390:	and	w5, w5, w0
   10394:	ldr	w24, [x7, #116]
   10398:	eor	w21, w25, w25, ror #9
   1039c:	eor	w5, w5, w2
   103a0:	eor	w22, w0, w22, ror #5
   103a4:	add	w3, w5, w3
   103a8:	add	w24, w10, w24
   103ac:	eor	w21, w25, w21, ror #11
   103b0:	add	w3, w3, w24
   103b4:	ror	w22, w22, #6
   103b8:	add	w3, w3, w22
   103bc:	ror	w21, w21, #2
   103c0:	eor	w22, w11, w11, ror #2
   103c4:	add	w23, w23, w3
   103c8:	eor	w5, w8, w8, ror #11
   103cc:	add	w3, w21, w3
   103d0:	eor	w24, w4, w6
   103d4:	lsr	w21, w11, #10
   103d8:	and	w27, w4, w6
   103dc:	eor	w22, w21, w22, ror #17
   103e0:	and	w24, w24, w25
   103e4:	lsr	w21, w8, #3
   103e8:	add	w24, w24, w27
   103ec:	eor	w5, w21, w5, ror #7
   103f0:	add	w26, w3, w24
   103f4:	add	w22, w22, w16
   103f8:	eor	w3, w1, w0
   103fc:	add	w9, w5, w9
   10400:	eor	w21, w23, w23, ror #14
   10404:	add	w9, w22, w9
   10408:	and	w3, w3, w23
   1040c:	ldr	w22, [x7, #120]
   10410:	eor	w3, w3, w1
   10414:	eor	w5, w26, w26, ror #9
   10418:	eor	w21, w23, w21, ror #5
   1041c:	add	w2, w3, w2
   10420:	add	w22, w9, w22
   10424:	eor	w5, w26, w5, ror #11
   10428:	add	w2, w2, w22
   1042c:	ror	w21, w21, #6
   10430:	add	w2, w2, w21
   10434:	ror	w24, w5, #2
   10438:	add	w5, w4, w2
   1043c:	eor	w22, w6, w25
   10440:	str	w5, [sp, #104]
   10444:	and	w22, w22, w26
   10448:	ldr	w5, [sp, #108]
   1044c:	and	w27, w6, w25
   10450:	add	w4, w22, w27
   10454:	add	w2, w24, w2
   10458:	add	w24, w2, w4
   1045c:	eor	w21, w10, w10, ror #2
   10460:	eor	w22, w5, w5, ror #11
   10464:	lsr	w4, w5, #3
   10468:	ldr	w5, [sp, #104]
   1046c:	lsr	w2, w10, #10
   10470:	eor	w21, w2, w21, ror #17
   10474:	eor	w4, w4, w22, ror #7
   10478:	add	w21, w21, w15
   1047c:	add	w8, w4, w8
   10480:	eor	w3, w0, w23
   10484:	eor	w2, w5, w5, ror #14
   10488:	add	w8, w8, w21
   1048c:	and	w3, w3, w5
   10490:	ldr	w21, [x7, #124]
   10494:	eor	w3, w3, w0
   10498:	eor	w2, w5, w2, ror #5
   1049c:	add	w1, w3, w1
   104a0:	eor	w4, w24, w24, ror #9
   104a4:	add	w3, w8, w21
   104a8:	add	w3, w1, w3
   104ac:	ror	w2, w2, #6
   104b0:	eor	w1, w25, w26
   104b4:	add	w2, w3, w2
   104b8:	eor	w4, w24, w4, ror #11
   104bc:	and	w3, w25, w26
   104c0:	and	w1, w1, w24
   104c4:	add	x7, x7, #0x40
   104c8:	add	w1, w1, w3
   104cc:	ror	w4, w4, #2
   104d0:	ldr	x3, [sp, #112]
   104d4:	add	w4, w4, w2
   104d8:	add	w4, w4, w1
   104dc:	add	w2, w6, w2
   104e0:	cmp	x7, x3
   104e4:	b.ne	fd38 <lzma_crc64@@XZ_5.0+0x748>  // b.any
   104e8:	fmov	d1, x2
   104ec:	fmov	d0, x4
   104f0:	ldr	x1, [sp, #120]
   104f4:	mov	v1.d[1], x3
   104f8:	mov	v0.d[1], x5
   104fc:	ldp	x19, x20, [sp, #16]
   10500:	mov	v1.s[1], w5
   10504:	mov	v0.s[1], w24
   10508:	ldp	q2, q3, [x1]
   1050c:	mov	v1.s[2], w23
   10510:	mov	v0.s[2], w26
   10514:	ldp	x21, x22, [sp, #32]
   10518:	mov	v1.s[3], w0
   1051c:	mov	v0.s[3], w25
   10520:	ldp	x23, x24, [sp, #48]
   10524:	add	v1.4s, v3.4s, v1.4s
   10528:	add	v0.4s, v2.4s, v0.4s
   1052c:	ldp	x25, x26, [sp, #64]
   10530:	ldp	x27, x28, [sp, #80]
   10534:	stp	q0, q1, [x1]
   10538:	ldp	x29, x30, [sp], #160
   1053c:	ret
   10540:	adrp	x1, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   10544:	add	x1, x1, #0x2b0
   10548:	str	xzr, [x0, #96]
   1054c:	ldp	x2, x3, [x1, #256]
   10550:	stp	x2, x3, [x0, #64]
   10554:	ldp	x2, x3, [x1, #272]
   10558:	stp	x2, x3, [x0, #80]
   1055c:	ret
   10560:	cbz	x1, 105fc <lzma_crc64@@XZ_5.0+0x100c>
   10564:	stp	x29, x30, [sp, #-64]!
   10568:	mov	x29, sp
   1056c:	stp	x19, x20, [sp, #16]
   10570:	mov	x20, x1
   10574:	stp	x21, x22, [sp, #32]
   10578:	mov	x21, x2
   1057c:	mov	x22, x0
   10580:	stp	x23, x24, [sp, #48]
   10584:	add	x24, x2, #0x40
   10588:	mov	x23, #0x40                  	// #64
   1058c:	nop
   10590:	ldr	x0, [x21, #96]
   10594:	mov	x1, x22
   10598:	and	x0, x0, #0x3f
   1059c:	sub	x19, x23, x0
   105a0:	add	x0, x21, x0
   105a4:	cmp	x19, x20
   105a8:	csel	x19, x19, x20, ls  // ls = plast
   105ac:	mov	x2, x19
   105b0:	sub	x20, x20, x19
   105b4:	bl	30c0 <memcpy@plt>
   105b8:	add	x22, x22, x19
   105bc:	ldr	x2, [x21, #96]
   105c0:	add	x19, x19, x2
   105c4:	str	x19, [x21, #96]
   105c8:	tst	x19, #0x3f
   105cc:	b.eq	105e8 <lzma_crc64@@XZ_5.0+0xff8>  // b.none
   105d0:	cbnz	x20, 10590 <lzma_crc64@@XZ_5.0+0xfa0>
   105d4:	ldp	x19, x20, [sp, #16]
   105d8:	ldp	x21, x22, [sp, #32]
   105dc:	ldp	x23, x24, [sp, #48]
   105e0:	ldp	x29, x30, [sp], #64
   105e4:	ret
   105e8:	mov	x1, x21
   105ec:	mov	x0, x24
   105f0:	bl	f6f0 <lzma_crc64@@XZ_5.0+0x100>
   105f4:	cbnz	x20, 10590 <lzma_crc64@@XZ_5.0+0xfa0>
   105f8:	b	105d4 <lzma_crc64@@XZ_5.0+0xfe4>
   105fc:	ret
   10600:	stp	x29, x30, [sp, #-32]!
   10604:	mov	w4, #0xffffff80            	// #-128
   10608:	mov	x29, sp
   1060c:	ldr	x1, [x0, #96]
   10610:	stp	x19, x20, [sp, #16]
   10614:	mov	x19, x0
   10618:	and	x3, x1, #0x3f
   1061c:	add	x20, x0, #0x40
   10620:	cmp	x3, #0x37
   10624:	add	x2, x3, #0x1
   10628:	strb	w4, [x0, x3]
   1062c:	b.eq	1064c <lzma_crc64@@XZ_5.0+0x105c>  // b.none
   10630:	cmp	x2, #0x40
   10634:	b.eq	10684 <lzma_crc64@@XZ_5.0+0x1094>  // b.none
   10638:	strb	wzr, [x19, x2]
   1063c:	cmp	x2, #0x37
   10640:	add	x2, x2, #0x1
   10644:	b.ne	10630 <lzma_crc64@@XZ_5.0+0x1040>  // b.any
   10648:	ldr	x1, [x19, #96]
   1064c:	lsl	x1, x1, #3
   10650:	str	x1, [x19, #96]
   10654:	rev	x1, x1
   10658:	str	x1, [x19, #56]
   1065c:	mov	x0, x20
   10660:	mov	x1, x19
   10664:	bl	f6f0 <lzma_crc64@@XZ_5.0+0x100>
   10668:	ldp	q1, q0, [x19, #64]
   1066c:	rev32	v1.16b, v1.16b
   10670:	rev32	v0.16b, v0.16b
   10674:	stp	q1, q0, [x19]
   10678:	ldp	x19, x20, [sp, #16]
   1067c:	ldp	x29, x30, [sp], #32
   10680:	ret
   10684:	mov	x1, x19
   10688:	mov	x0, x20
   1068c:	bl	f6f0 <lzma_crc64@@XZ_5.0+0x100>
   10690:	strh	wzr, [x19]
   10694:	mov	x2, #0x3                   	// #3
   10698:	strb	wzr, [x19, #2]
   1069c:	b	10630 <lzma_crc64@@XZ_5.0+0x1040>
   106a0:	stp	x29, x30, [sp, #-32]!
   106a4:	mov	x29, sp
   106a8:	stp	x19, x20, [sp, #16]
   106ac:	mov	x19, x0
   106b0:	mov	x20, x1
   106b4:	add	x0, x0, #0x98
   106b8:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
   106bc:	ldr	x0, [x19, #104]
   106c0:	mov	x1, x20
   106c4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   106c8:	ldr	x0, [x19, #96]
   106cc:	mov	x1, x20
   106d0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   106d4:	ldr	x0, [x19, #32]
   106d8:	mov	x1, x20
   106dc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   106e0:	ldr	x2, [x19, #16]
   106e4:	mov	x1, x20
   106e8:	ldr	x0, [x19]
   106ec:	cbz	x2, 10708 <lzma_crc64@@XZ_5.0+0x1118>
   106f0:	blr	x2
   106f4:	mov	x1, x20
   106f8:	mov	x0, x19
   106fc:	ldp	x19, x20, [sp, #16]
   10700:	ldp	x29, x30, [sp], #32
   10704:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10708:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1070c:	mov	x1, x20
   10710:	mov	x0, x19
   10714:	ldp	x19, x20, [sp, #16]
   10718:	ldp	x29, x30, [sp], #32
   1071c:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10720:	sub	sp, sp, #0x90
   10724:	stp	x29, x30, [sp, #16]
   10728:	add	x29, sp, #0x10
   1072c:	stp	x19, x20, [sp, #32]
   10730:	mov	x19, x0
   10734:	stp	x21, x22, [sp, #48]
   10738:	mov	x22, x3
   1073c:	mov	x21, x4
   10740:	stp	x23, x24, [sp, #64]
   10744:	mov	x24, x5
   10748:	ldr	w23, [sp, #144]
   1074c:	stp	x25, x26, [sp, #80]
   10750:	mov	x25, x6
   10754:	add	x26, x0, #0x20
   10758:	stp	x27, x28, [sp, #96]
   1075c:	mov	x28, x7
   10760:	add	x27, sp, #0x88
   10764:	stp	x2, x1, [sp, #112]
   10768:	b	1078c <lzma_crc64@@XZ_5.0+0x119c>
   1076c:	ldp	x0, x5, [x19]
   10770:	mov	x4, x28
   10774:	mov	x3, x25
   10778:	mov	x2, x24
   1077c:	mov	x1, x26
   10780:	blr	x5
   10784:	mov	w20, w0
   10788:	cbnz	w0, 1097c <lzma_crc64@@XZ_5.0+0x138c>
   1078c:	ldr	x0, [x25]
   10790:	cmp	x0, x28
   10794:	b.cs	10974 <lzma_crc64@@XZ_5.0+0x1384>  // b.hs, b.nlast
   10798:	ldr	x0, [x22]
   1079c:	cmp	w23, #0x0
   107a0:	ccmp	x0, x21, #0x0, eq  // eq = none
   107a4:	b.cs	10974 <lzma_crc64@@XZ_5.0+0x1384>  // b.hs, b.nlast
   107a8:	ldr	w0, [x19, #136]
   107ac:	cbnz	w0, 1076c <lzma_crc64@@XZ_5.0+0x117c>
   107b0:	ldr	w4, [x19, #56]
   107b4:	ldr	w0, [x19, #64]
   107b8:	cmp	w4, w0
   107bc:	b.cc	1076c <lzma_crc64@@XZ_5.0+0x117c>  // b.lo, b.ul, b.last
   107c0:	ldr	w7, [x19, #40]
   107c4:	ldr	w0, [x19, #48]
   107c8:	ldr	w2, [x26, #36]
   107cc:	sub	w0, w7, w0
   107d0:	cmp	w4, w0
   107d4:	ldr	x3, [x26]
   107d8:	b.cs	108d8 <lzma_crc64@@XZ_5.0+0x12e8>  // b.hs, b.nlast
   107dc:	ldr	x10, [x19, #176]
   107e0:	mov	w2, w2
   107e4:	str	x2, [sp, #136]
   107e8:	mov	w7, w7
   107ec:	cbz	x10, 10938 <lzma_crc64@@XZ_5.0+0x1348>
   107f0:	ldp	x2, x1, [sp, #112]
   107f4:	mov	x5, x3
   107f8:	ldr	x0, [x19, #152]
   107fc:	str	w23, [sp]
   10800:	mov	x6, x27
   10804:	mov	x4, x21
   10808:	mov	x3, x22
   1080c:	blr	x10
   10810:	mov	w20, w0
   10814:	ldr	x2, [sp, #136]
   10818:	str	w2, [x19, #68]
   1081c:	cmp	w0, #0x1
   10820:	ldr	w1, [x19, #72]
   10824:	mov	w0, w2
   10828:	b.eq	108a0 <lzma_crc64@@XZ_5.0+0x12b0>  // b.none
   1082c:	ldr	w2, [x19, #48]
   10830:	cmp	w0, w2
   10834:	b.ls	10840 <lzma_crc64@@XZ_5.0+0x1250>  // b.plast
   10838:	sub	w0, w0, w2
   1083c:	str	w0, [x19, #64]
   10840:	cbz	w1, 1086c <lzma_crc64@@XZ_5.0+0x127c>
   10844:	ldr	w2, [x19, #56]
   10848:	ldr	w0, [x19, #64]
   1084c:	cmp	w2, w0
   10850:	b.cs	1086c <lzma_crc64@@XZ_5.0+0x127c>  // b.hs, b.nlast
   10854:	ldr	x3, [x19, #88]
   10858:	sub	w2, w2, w1
   1085c:	str	w2, [x19, #56]
   10860:	mov	x0, x26
   10864:	str	wzr, [x19, #72]
   10868:	blr	x3
   1086c:	cbz	w20, 1076c <lzma_crc64@@XZ_5.0+0x117c>
   10870:	mov	w0, w20
   10874:	ldp	x29, x30, [sp, #16]
   10878:	ldp	x19, x20, [sp, #32]
   1087c:	ldp	x21, x22, [sp, #48]
   10880:	ldp	x23, x24, [sp, #64]
   10884:	ldp	x25, x26, [sp, #80]
   10888:	ldp	x27, x28, [sp, #96]
   1088c:	add	sp, sp, #0x90
   10890:	ret
   10894:	ldr	w1, [x19, #72]
   10898:	str	w0, [x19, #68]
   1089c:	nop
   108a0:	str	w0, [x19, #64]
   108a4:	str	w23, [x19, #136]
   108a8:	cbz	w1, 1076c <lzma_crc64@@XZ_5.0+0x117c>
   108ac:	ldr	w2, [x19, #56]
   108b0:	cmp	w0, w2
   108b4:	b.ls	1076c <lzma_crc64@@XZ_5.0+0x117c>  // b.plast
   108b8:	ldr	x3, [x19, #88]
   108bc:	sub	w2, w2, w1
   108c0:	str	w2, [x19, #56]
   108c4:	mov	x0, x26
   108c8:	str	wzr, [x19, #72]
   108cc:	mov	w20, #0x0                   	// #0
   108d0:	blr	x3
   108d4:	b	1086c <lzma_crc64@@XZ_5.0+0x127c>
   108d8:	ldr	w20, [x26, #12]
   108dc:	mov	x0, x3
   108e0:	sub	w4, w4, w20
   108e4:	and	w20, w4, #0xfffffff0
   108e8:	sub	w2, w2, w20
   108ec:	add	x1, x3, w20, uxtw
   108f0:	bl	30e0 <memmove@plt>
   108f4:	ldp	w1, w0, [x26, #20]
   108f8:	dup	v1.2s, w20
   108fc:	ldr	w7, [x19, #40]
   10900:	add	w1, w1, w20
   10904:	sub	w0, w0, w20
   10908:	ldr	x3, [x19, #32]
   1090c:	stp	w1, w0, [x26, #20]
   10910:	ldr	w2, [x26, #36]
   10914:	mov	w7, w7
   10918:	ldr	d0, [x19, #64]
   1091c:	ldr	x10, [x19, #176]
   10920:	sub	w2, w2, w20
   10924:	sub	v0.2s, v0.2s, v1.2s
   10928:	mov	w2, w2
   1092c:	str	x2, [sp, #136]
   10930:	str	d0, [x19, #64]
   10934:	cbnz	x10, 107f0 <lzma_crc64@@XZ_5.0+0x1200>
   10938:	ldr	x0, [sp, #112]
   1093c:	mov	x5, x7
   10940:	mov	x4, x27
   10944:	mov	x2, x21
   10948:	mov	x1, x22
   1094c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   10950:	cbz	w23, 10984 <lzma_crc64@@XZ_5.0+0x1394>
   10954:	ldr	x0, [x22]
   10958:	cmp	x21, x0
   1095c:	ldr	x0, [sp, #136]
   10960:	b.eq	10894 <lzma_crc64@@XZ_5.0+0x12a4>  // b.none
   10964:	ldr	w1, [x19, #72]
   10968:	mov	w20, #0x0                   	// #0
   1096c:	str	w0, [x19, #68]
   10970:	b	1082c <lzma_crc64@@XZ_5.0+0x123c>
   10974:	mov	w20, #0x0                   	// #0
   10978:	b	10870 <lzma_crc64@@XZ_5.0+0x1280>
   1097c:	str	wzr, [x19, #136]
   10980:	b	10870 <lzma_crc64@@XZ_5.0+0x1280>
   10984:	ldr	x0, [sp, #136]
   10988:	mov	w20, #0x0                   	// #0
   1098c:	ldr	w1, [x19, #72]
   10990:	str	w0, [x19, #68]
   10994:	b	1082c <lzma_crc64@@XZ_5.0+0x123c>
   10998:	ldr	x2, [x0, #24]
   1099c:	cbz	x2, 109f8 <lzma_crc64@@XZ_5.0+0x1408>
   109a0:	stp	x29, x30, [sp, #-48]!
   109a4:	mov	x29, sp
   109a8:	stp	x19, x20, [sp, #16]
   109ac:	mov	x19, x0
   109b0:	mov	x20, x3
   109b4:	ldr	x0, [x0]
   109b8:	str	x21, [sp, #32]
   109bc:	mov	x21, x1
   109c0:	mov	x1, x3
   109c4:	blr	x2
   109c8:	cbz	w0, 109dc <lzma_crc64@@XZ_5.0+0x13ec>
   109cc:	ldp	x19, x20, [sp, #16]
   109d0:	ldr	x21, [sp, #32]
   109d4:	ldp	x29, x30, [sp], #48
   109d8:	ret
   109dc:	add	x2, x20, #0x10
   109e0:	mov	x1, x21
   109e4:	add	x0, x19, #0x98
   109e8:	ldp	x19, x20, [sp, #16]
   109ec:	ldr	x21, [sp, #32]
   109f0:	ldp	x29, x30, [sp], #48
   109f4:	b	3930 <lzma_version_string@@XZ_5.0+0x218>
   109f8:	mov	w0, #0xb                   	// #11
   109fc:	ret
   10a00:	ldr	x3, [x0, #8]
   10a04:	mov	x1, x0
   10a08:	mov	x2, #0xf000                	// #61440
   10a0c:	sub	x0, x3, #0x1, lsl #12
   10a10:	movk	x2, #0x5fff, lsl #16
   10a14:	cmp	x0, x2
   10a18:	b.hi	10b54 <lzma_crc64@@XZ_5.0+0x1564>  // b.pmore
   10a1c:	ldp	x2, x6, [x1, #24]
   10a20:	mov	x0, #0xffffffffffffffff    	// #-1
   10a24:	cmp	x6, x2
   10a28:	b.hi	10a88 <lzma_crc64@@XZ_5.0+0x1498>  // b.pmore
   10a2c:	stp	x29, x30, [sp, #-48]!
   10a30:	lsr	x4, x3, #1
   10a34:	add	w4, w4, #0x80, lsl #12
   10a38:	mov	x29, sp
   10a3c:	ldr	x5, [x1]
   10a40:	stp	x19, x20, [sp, #16]
   10a44:	ldr	x7, [x1, #16]
   10a48:	add	x20, x2, x5
   10a4c:	add	w5, w5, w3
   10a50:	ldr	w1, [x1, #40]
   10a54:	add	w2, w7, w2
   10a58:	add	x20, x20, x7
   10a5c:	add	w2, w2, w5
   10a60:	cmp	w1, #0x4
   10a64:	lsr	x20, x20, #1
   10a68:	add	w2, w2, w4
   10a6c:	add	w20, w2, w20
   10a70:	b.hi	10a8c <lzma_crc64@@XZ_5.0+0x149c>  // b.pmore
   10a74:	cmp	w1, #0x2
   10a78:	b.hi	10a98 <lzma_crc64@@XZ_5.0+0x14a8>  // b.pmore
   10a7c:	ldp	x19, x20, [sp, #16]
   10a80:	ldp	x29, x30, [sp], #48
   10a84:	ret
   10a88:	ret
   10a8c:	sub	w2, w1, #0x12
   10a90:	cmp	w2, #0x2
   10a94:	b.hi	10a7c <lzma_crc64@@XZ_5.0+0x148c>  // b.pmore
   10a98:	and	w2, w1, #0xf
   10a9c:	mov	x0, #0xffffffffffffffff    	// #-1
   10aa0:	cmp	w6, w2
   10aa4:	b.cc	10a7c <lzma_crc64@@XZ_5.0+0x148c>  // b.lo, b.ul, b.last
   10aa8:	str	x21, [sp, #32]
   10aac:	cmp	w2, #0x2
   10ab0:	and	w4, w1, #0x10
   10ab4:	mov	w19, #0x10000               	// #65536
   10ab8:	b.eq	10afc <lzma_crc64@@XZ_5.0+0x150c>  // b.none
   10abc:	sub	w19, w3, #0x1
   10ac0:	mov	w0, #0x1000000             	// #16777216
   10ac4:	orr	w19, w19, w19, lsr #1
   10ac8:	orr	w19, w19, w19, lsr #2
   10acc:	orr	w19, w19, w19, lsr #4
   10ad0:	orr	w19, w19, w19, lsr #8
   10ad4:	lsr	w19, w19, #1
   10ad8:	orr	w19, w19, #0xffff
   10adc:	cmp	w19, w0
   10ae0:	b.ls	10af0 <lzma_crc64@@XZ_5.0+0x1500>  // b.plast
   10ae4:	cmp	w2, #0x3
   10ae8:	b.eq	10b5c <lzma_crc64@@XZ_5.0+0x156c>  // b.none
   10aec:	lsr	w19, w19, #1
   10af0:	cmp	w2, #0x2
   10af4:	add	w0, w19, #0x401
   10af8:	csinc	w19, w0, w19, hi  // hi = pmore
   10afc:	add	w21, w3, #0x1
   10b00:	tst	w1, #0xc
   10b04:	add	w0, w19, #0x10, lsl #12
   10b08:	mov	x1, #0x0                   	// #0
   10b0c:	csel	w19, w0, w19, ne  // ne = any
   10b10:	lsl	w2, w21, #1
   10b14:	cmp	w4, #0x0
   10b18:	mov	x0, #0x0                   	// #0
   10b1c:	csel	w21, w2, w21, ne  // ne = any
   10b20:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10b24:	mov	x1, #0x0                   	// #0
   10b28:	mov	x0, #0x0                   	// #0
   10b2c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10b30:	mov	w0, w21
   10b34:	mov	w2, w20
   10b38:	add	x0, x0, w19, uxtw
   10b3c:	add	x2, x2, #0xe0
   10b40:	ldp	x19, x20, [sp, #16]
   10b44:	add	x0, x2, x0, lsl #2
   10b48:	ldr	x21, [sp, #32]
   10b4c:	ldp	x29, x30, [sp], #48
   10b50:	ret
   10b54:	mov	x0, #0xffffffffffffffff    	// #-1
   10b58:	ret
   10b5c:	mov	w19, #0x400                 	// #1024
   10b60:	movk	w19, #0x100, lsl #16
   10b64:	b	10afc <lzma_crc64@@XZ_5.0+0x150c>
   10b68:	stp	x29, x30, [sp, #-128]!
   10b6c:	mov	x29, sp
   10b70:	stp	x19, x20, [sp, #16]
   10b74:	ldr	x19, [x0]
   10b78:	stp	x21, x22, [sp, #32]
   10b7c:	mov	x22, x2
   10b80:	str	x23, [sp, #48]
   10b84:	mov	x21, x1
   10b88:	mov	x23, x3
   10b8c:	cbz	x19, 10dfc <lzma_crc64@@XZ_5.0+0x180c>
   10b90:	ldr	x2, [x22, #16]
   10b94:	add	x3, sp, #0x40
   10b98:	mov	x1, x21
   10b9c:	mov	x0, x19
   10ba0:	blr	x23
   10ba4:	cbz	w0, 10bbc <lzma_crc64@@XZ_5.0+0x15cc>
   10ba8:	ldp	x19, x20, [sp, #16]
   10bac:	ldp	x21, x22, [sp, #32]
   10bb0:	ldr	x23, [sp, #48]
   10bb4:	ldp	x29, x30, [sp], #128
   10bb8:	ret
   10bbc:	ldr	x1, [sp, #72]
   10bc0:	mov	x0, #0xf000                	// #61440
   10bc4:	movk	x0, #0x5fff, lsl #16
   10bc8:	sub	x2, x1, #0x1, lsl #12
   10bcc:	cmp	x2, x0
   10bd0:	b.hi	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.pmore
   10bd4:	ldp	x3, x7, [sp, #88]
   10bd8:	cmp	x7, x3
   10bdc:	b.hi	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.pmore
   10be0:	ldr	x6, [sp, #64]
   10be4:	add	x20, x19, #0x20
   10be8:	ldr	x4, [sp, #80]
   10bec:	add	x5, x3, x6
   10bf0:	lsr	x2, x1, #1
   10bf4:	add	w6, w6, w1
   10bf8:	add	x5, x5, x4
   10bfc:	add	w4, w4, w3
   10c00:	add	w8, w6, w4
   10c04:	add	w2, w2, #0x80, lsl #12
   10c08:	ldr	x0, [x19, #32]
   10c0c:	lsr	x5, x5, #1
   10c10:	add	w2, w2, w8
   10c14:	stp	w6, w4, [x20, #12]
   10c18:	add	w2, w2, w5
   10c1c:	ldr	w4, [x20, #8]
   10c20:	str	w2, [x20, #8]
   10c24:	cmp	x0, #0x0
   10c28:	ccmp	w4, w2, #0x4, ne  // ne = any
   10c2c:	b.ne	10de0 <lzma_crc64@@XZ_5.0+0x17f0>  // b.any
   10c30:	ldr	w2, [sp, #104]
   10c34:	add	w4, w1, #0x1
   10c38:	str	w4, [x20, #84]
   10c3c:	mov	w0, w7
   10c40:	stp	w7, w3, [x20, #96]
   10c44:	cmp	w2, #0x12
   10c48:	b.eq	10f08 <lzma_crc64@@XZ_5.0+0x1918>  // b.none
   10c4c:	b.ls	10da0 <lzma_crc64@@XZ_5.0+0x17b0>  // b.plast
   10c50:	cmp	w2, #0x13
   10c54:	b.eq	10f80 <lzma_crc64@@XZ_5.0+0x1990>  // b.none
   10c58:	cmp	w2, #0x14
   10c5c:	b.ne	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.any
   10c60:	adrp	x5, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10c64:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10c68:	ldr	x5, [x5, #4008]
   10c6c:	ldr	x3, [x3, #3992]
   10c70:	stp	x5, x3, [x20, #48]
   10c74:	and	w3, w2, #0xf
   10c78:	cmp	w0, w3
   10c7c:	b.cc	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.lo, b.ul, b.last
   10c80:	sub	w0, w1, #0x1
   10c84:	and	w23, w2, #0x10
   10c88:	mov	w1, #0x1000000             	// #16777216
   10c8c:	orr	w0, w0, w0, lsr #1
   10c90:	orr	w0, w0, w0, lsr #2
   10c94:	orr	w0, w0, w0, lsr #4
   10c98:	orr	w0, w0, w0, lsr #8
   10c9c:	lsr	w0, w0, #1
   10ca0:	orr	w0, w0, #0xffff
   10ca4:	cmp	w0, w1
   10ca8:	b.hi	10f98 <lzma_crc64@@XZ_5.0+0x19a8>  // b.pmore
   10cac:	cmp	w3, #0x2
   10cb0:	add	w1, w0, #0x401
   10cb4:	csinc	w1, w1, w0, hi  // hi = pmore
   10cb8:	str	w0, [x20, #88]
   10cbc:	tst	w2, #0xc
   10cc0:	add	w0, w1, #0x10, lsl #12
   10cc4:	csel	w1, w0, w1, ne  // ne = any
   10cc8:	ldp	w0, w2, [x20, #108]
   10ccc:	str	w1, [x20, #108]
   10cd0:	cbnz	w23, 10f44 <lzma_crc64@@XZ_5.0+0x1954>
   10cd4:	str	w4, [x20, #112]
   10cd8:	cmp	w1, w0
   10cdc:	b.ne	10ce8 <lzma_crc64@@XZ_5.0+0x16f8>  // b.any
   10ce0:	cmp	w4, w2
   10ce4:	b.eq	10d08 <lzma_crc64@@XZ_5.0+0x1718>  // b.none
   10ce8:	ldr	x0, [x20, #64]
   10cec:	mov	x1, x21
   10cf0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10cf4:	str	xzr, [x20, #64]
   10cf8:	ldr	x0, [x20, #72]
   10cfc:	mov	x1, x21
   10d00:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10d04:	str	xzr, [x20, #72]
   10d08:	ldr	w0, [sp, #108]
   10d0c:	str	w0, [x20, #92]
   10d10:	cbnz	w0, 10d34 <lzma_crc64@@XZ_5.0+0x1744>
   10d14:	ldr	w0, [x20, #96]
   10d18:	cmp	w23, #0x0
   10d1c:	lsr	w1, w0, #2
   10d20:	lsr	w0, w0, #1
   10d24:	add	w1, w1, #0x4
   10d28:	add	w0, w0, #0x10
   10d2c:	csel	w0, w0, w1, ne  // ne = any
   10d30:	str	w0, [x20, #92]
   10d34:	ldr	x0, [x19, #32]
   10d38:	cbz	x0, 10f4c <lzma_crc64@@XZ_5.0+0x195c>
   10d3c:	ldr	w0, [x20, #84]
   10d40:	str	w0, [x20, #20]
   10d44:	ldr	x0, [x20, #64]
   10d48:	stp	xzr, xzr, [x19, #56]
   10d4c:	ldr	w2, [x20, #108]
   10d50:	str	wzr, [x20, #40]
   10d54:	lsl	x2, x2, #2
   10d58:	cbz	x0, 10e68 <lzma_crc64@@XZ_5.0+0x1878>
   10d5c:	mov	w1, #0x0                   	// #0
   10d60:	bl	3260 <memset@plt>
   10d64:	ldr	x1, [sp, #112]
   10d68:	str	wzr, [x20, #80]
   10d6c:	cbz	x1, 10d78 <lzma_crc64@@XZ_5.0+0x1788>
   10d70:	ldr	w2, [sp, #120]
   10d74:	cbnz	w2, 10ec4 <lzma_crc64@@XZ_5.0+0x18d4>
   10d78:	str	wzr, [x20, #104]
   10d7c:	add	x2, x22, #0x18
   10d80:	mov	x1, x21
   10d84:	add	x0, x19, #0x98
   10d88:	bl	3860 <lzma_version_string@@XZ_5.0+0x148>
   10d8c:	ldp	x19, x20, [sp, #16]
   10d90:	ldp	x21, x22, [sp, #32]
   10d94:	ldr	x23, [sp, #48]
   10d98:	ldp	x29, x30, [sp], #128
   10d9c:	ret
   10da0:	cmp	w2, #0x3
   10da4:	b.eq	10f68 <lzma_crc64@@XZ_5.0+0x1978>  // b.none
   10da8:	cmp	w2, #0x4
   10dac:	b.ne	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.any
   10db0:	adrp	x5, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10db4:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10db8:	ldr	x5, [x5, #4056]
   10dbc:	ldr	x3, [x3, #4016]
   10dc0:	stp	x5, x3, [x20, #48]
   10dc4:	b	10c74 <lzma_crc64@@XZ_5.0+0x1684>
   10dc8:	mov	w0, #0x8                   	// #8
   10dcc:	ldp	x19, x20, [sp, #16]
   10dd0:	ldp	x21, x22, [sp, #32]
   10dd4:	ldr	x23, [sp, #48]
   10dd8:	ldp	x29, x30, [sp], #128
   10ddc:	ret
   10de0:	mov	x1, x21
   10de4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10de8:	ldr	w1, [sp, #72]
   10dec:	ldr	w3, [sp, #88]
   10df0:	ldr	x7, [sp, #96]
   10df4:	str	xzr, [x19, #32]
   10df8:	b	10c30 <lzma_crc64@@XZ_5.0+0x1640>
   10dfc:	mov	x20, x0
   10e00:	mov	x0, #0xe0                  	// #224
   10e04:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   10e08:	mov	x19, x0
   10e0c:	cbz	x0, 10f60 <lzma_crc64@@XZ_5.0+0x1970>
   10e10:	adrp	x2, 10000 <lzma_crc64@@XZ_5.0+0xa10>
   10e14:	adrp	x1, 10000 <lzma_crc64@@XZ_5.0+0xa10>
   10e18:	add	x2, x2, #0x720
   10e1c:	add	x1, x1, #0x6a0
   10e20:	adrp	x0, 10000 <lzma_crc64@@XZ_5.0+0xa10>
   10e24:	mov	x3, #0xffffffffffffffff    	// #-1
   10e28:	add	x0, x0, #0x998
   10e2c:	stp	xzr, xzr, [x19]
   10e30:	str	x19, [x20]
   10e34:	str	xzr, [x19, #16]
   10e38:	stp	x2, x1, [x20, #24]
   10e3c:	str	xzr, [x19, #32]
   10e40:	str	wzr, [x19, #40]
   10e44:	str	x0, [x20, #64]
   10e48:	stp	xzr, xzr, [x19, #96]
   10e4c:	stur	xzr, [x19, #140]
   10e50:	stp	xzr, x3, [x19, #152]
   10e54:	stp	xzr, xzr, [x19, #168]
   10e58:	stp	xzr, xzr, [x19, #184]
   10e5c:	stp	xzr, xzr, [x19, #200]
   10e60:	str	xzr, [x19, #216]
   10e64:	b	10b90 <lzma_crc64@@XZ_5.0+0x15a0>
   10e68:	mov	x0, x2
   10e6c:	mov	x1, x21
   10e70:	bl	3758 <lzma_version_string@@XZ_5.0+0x40>
   10e74:	str	x0, [x20, #64]
   10e78:	ldr	w2, [x20, #112]
   10e7c:	mov	x1, x21
   10e80:	lsl	x0, x2, #2
   10e84:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   10e88:	str	x0, [x20, #72]
   10e8c:	ldr	x1, [x20, #64]
   10e90:	cmp	x1, #0x0
   10e94:	ccmp	x0, #0x0, #0x4, ne  // ne = any
   10e98:	b.ne	10d64 <lzma_crc64@@XZ_5.0+0x1774>  // b.any
   10e9c:	mov	x0, x1
   10ea0:	mov	x1, x21
   10ea4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10ea8:	str	xzr, [x20, #64]
   10eac:	ldr	x0, [x20, #72]
   10eb0:	mov	x1, x21
   10eb4:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   10eb8:	str	xzr, [x20, #72]
   10ebc:	mov	w0, #0x5                   	// #5
   10ec0:	b	10ba8 <lzma_crc64@@XZ_5.0+0x15b8>
   10ec4:	ldr	w3, [x20, #8]
   10ec8:	mov	w4, w2
   10ecc:	ldr	x0, [x20]
   10ed0:	cmp	w3, w2
   10ed4:	csel	w2, w3, w2, ls  // ls = plast
   10ed8:	str	w2, [x20, #36]
   10edc:	mov	w2, w2
   10ee0:	sub	x4, x4, x2
   10ee4:	add	x1, x1, x4
   10ee8:	bl	30c0 <memcpy@plt>
   10eec:	ldr	w1, [x20, #36]
   10ef0:	mov	w0, #0x1                   	// #1
   10ef4:	ldr	x2, [x20, #56]
   10ef8:	str	w0, [x20, #104]
   10efc:	mov	x0, x20
   10f00:	blr	x2
   10f04:	b	10d78 <lzma_crc64@@XZ_5.0+0x1788>
   10f08:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f0c:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f10:	cmp	w7, #0x1
   10f14:	ldr	x1, [x1, #4040]
   10f18:	ldr	x0, [x0, #4024]
   10f1c:	stp	x1, x0, [x20, #48]
   10f20:	b.ls	10dc8 <lzma_crc64@@XZ_5.0+0x17d8>  // b.plast
   10f24:	mov	w2, #0x10000               	// #65536
   10f28:	mov	w0, #0xffff                	// #65535
   10f2c:	mov	w1, w2
   10f30:	str	w0, [x20, #88]
   10f34:	ldr	w0, [x20, #108]
   10f38:	mov	w23, #0x10                  	// #16
   10f3c:	str	w2, [x20, #108]
   10f40:	ldr	w2, [x20, #112]
   10f44:	lsl	w4, w4, #1
   10f48:	b	10cd4 <lzma_crc64@@XZ_5.0+0x16e4>
   10f4c:	ldr	w0, [x20, #8]
   10f50:	mov	x1, x21
   10f54:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   10f58:	str	x0, [x19, #32]
   10f5c:	cbnz	x0, 10d3c <lzma_crc64@@XZ_5.0+0x174c>
   10f60:	mov	w0, #0x5                   	// #5
   10f64:	b	10ba8 <lzma_crc64@@XZ_5.0+0x15b8>
   10f68:	adrp	x5, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f6c:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f70:	ldr	x5, [x5, #3880]
   10f74:	ldr	x3, [x3, #3896]
   10f78:	stp	x5, x3, [x20, #48]
   10f7c:	b	10c74 <lzma_crc64@@XZ_5.0+0x1684>
   10f80:	adrp	x5, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f84:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   10f88:	ldr	x5, [x5, #3872]
   10f8c:	ldr	x3, [x3, #3912]
   10f90:	stp	x5, x3, [x20, #48]
   10f94:	b	10c74 <lzma_crc64@@XZ_5.0+0x1684>
   10f98:	cmp	w3, #0x3
   10f9c:	b.eq	10fa8 <lzma_crc64@@XZ_5.0+0x19b8>  // b.none
   10fa0:	lsr	w0, w0, #1
   10fa4:	b	10cac <lzma_crc64@@XZ_5.0+0x16bc>
   10fa8:	mov	w1, #0x400                 	// #1024
   10fac:	mov	w0, #0xffffff              	// #16777215
   10fb0:	movk	w1, #0x100, lsl #16
   10fb4:	str	w0, [x20, #88]
   10fb8:	b	10cbc <lzma_crc64@@XZ_5.0+0x16cc>
   10fbc:	nop

0000000000010fc0 <lzma_mf_is_supported@@XZ_5.0>:
   10fc0:	mov	w1, w0
   10fc4:	cmp	w0, #0x3
   10fc8:	b.eq	11004 <lzma_mf_is_supported@@XZ_5.0+0x44>  // b.none
   10fcc:	cmp	w0, #0x4
   10fd0:	mov	w2, #0x1                   	// #1
   10fd4:	b.ne	10fe0 <lzma_mf_is_supported@@XZ_5.0+0x20>  // b.any
   10fd8:	mov	w0, w2
   10fdc:	ret
   10fe0:	cmp	w0, #0x12
   10fe4:	mov	w0, w2
   10fe8:	b.eq	10fdc <lzma_mf_is_supported@@XZ_5.0+0x1c>  // b.none
   10fec:	cmp	w1, #0x13
   10ff0:	b.eq	10fdc <lzma_mf_is_supported@@XZ_5.0+0x1c>  // b.none
   10ff4:	cmp	w1, #0x14
   10ff8:	mov	w2, #0x0                   	// #0
   10ffc:	b.ne	10fd8 <lzma_mf_is_supported@@XZ_5.0+0x18>  // b.any
   11000:	ret
   11004:	mov	w2, #0x1                   	// #1
   11008:	mov	w0, w2
   1100c:	b	10fdc <lzma_mf_is_supported@@XZ_5.0+0x1c>
   11010:	str	w3, [x5, w6, uxtw #2]
   11014:	cmp	w4, #0x0
   11018:	sub	w8, w1, w3
   1101c:	ldr	w11, [sp, #8]
   11020:	sub	w9, w4, #0x1
   11024:	mov	w15, w0
   11028:	ccmp	w7, w8, #0x0, ne  // ne = any
   1102c:	b.ls	11124 <lzma_mf_is_supported@@XZ_5.0+0x164>  // b.plast
   11030:	sub	w13, w6, w1
   11034:	ldr	x0, [sp]
   11038:	b	11058 <lzma_mf_is_supported@@XZ_5.0+0x98>
   1103c:	sub	w8, w1, w3
   11040:	cmp	w8, w7
   11044:	cset	w4, cs  // cs = hs, nlast
   11048:	cmp	w9, #0x0
   1104c:	csinc	w4, w4, wzr, ne  // ne = any
   11050:	sub	w9, w9, #0x1
   11054:	cbnz	w4, 110f4 <lzma_mf_is_supported@@XZ_5.0+0x134>
   11058:	cmp	w6, w8
   1105c:	add	w4, w3, w7
   11060:	sub	x10, x2, w8, uxtw
   11064:	csel	w3, w4, w3, cc  // cc = lo, ul, last
   11068:	add	w3, w13, w3
   1106c:	ldrb	w4, [x2, w11, uxtw]
   11070:	ldrb	w12, [x10, w11, uxtw]
   11074:	ldr	w3, [x5, x3, lsl #2]
   11078:	cmp	w12, w4
   1107c:	b.ne	1103c <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.any
   11080:	ldrb	w12, [x10]
   11084:	ldrb	w4, [x2]
   11088:	cmp	w12, w4
   1108c:	b.ne	1103c <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.any
   11090:	cmp	w15, #0x1
   11094:	mov	x4, #0x1                   	// #1
   11098:	b.hi	110ac <lzma_mf_is_supported@@XZ_5.0+0xec>  // b.pmore
   1109c:	b	110f8 <lzma_mf_is_supported@@XZ_5.0+0x138>
   110a0:	add	x4, x4, #0x1
   110a4:	cmp	w15, w4
   110a8:	b.ls	11100 <lzma_mf_is_supported@@XZ_5.0+0x140>  // b.plast
   110ac:	ldrb	w14, [x10, x4]
   110b0:	add	w16, w4, #0x1
   110b4:	ldrb	w12, [x2, x4]
   110b8:	cmp	w14, w12
   110bc:	b.eq	110a0 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.none
   110c0:	cmp	w11, w4
   110c4:	b.cs	1103c <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.hs, b.nlast
   110c8:	sub	w8, w8, #0x1
   110cc:	stp	w4, w8, [x0]
   110d0:	sub	w8, w1, w3
   110d4:	mov	w11, w4
   110d8:	cmp	w8, w7
   110dc:	add	x0, x0, #0x8
   110e0:	cset	w4, cs  // cs = hs, nlast
   110e4:	cmp	w9, #0x0
   110e8:	csinc	w4, w4, wzr, ne  // ne = any
   110ec:	sub	w9, w9, #0x1
   110f0:	cbz	w4, 11058 <lzma_mf_is_supported@@XZ_5.0+0x98>
   110f4:	ret
   110f8:	mov	w16, w4
   110fc:	nop
   11100:	cmp	w16, w11
   11104:	b.ls	1103c <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.plast
   11108:	sub	w8, w8, #0x1
   1110c:	stp	w16, w8, [x0]
   11110:	cmp	w15, w16
   11114:	add	x0, x0, #0x8
   11118:	b.eq	110f4 <lzma_mf_is_supported@@XZ_5.0+0x134>  // b.none
   1111c:	mov	w11, w16
   11120:	b	1103c <lzma_mf_is_supported@@XZ_5.0+0x7c>
   11124:	ldr	x0, [sp]
   11128:	ret
   1112c:	nop
   11130:	stp	x29, x30, [sp, #-64]!
   11134:	cmp	w4, #0x0
   11138:	sub	w14, w1, w3
   1113c:	mov	x29, sp
   11140:	stp	x19, x20, [sp, #16]
   11144:	ccmp	w7, w14, #0x0, ne  // ne = any
   11148:	ldr	w20, [sp, #72]
   1114c:	stp	x21, x22, [sp, #32]
   11150:	ubfiz	x21, x6, #3, #31
   11154:	mov	x30, x21
   11158:	add	x21, x21, #0x4
   1115c:	add	x30, x5, x30
   11160:	add	x21, x5, x21
   11164:	b.ls	112f4 <lzma_mf_is_supported@@XZ_5.0+0x334>  // b.plast
   11168:	mov	w18, w0
   1116c:	sub	w15, w4, #0x1
   11170:	ldr	x0, [sp, #64]
   11174:	sub	w19, w6, w1
   11178:	mov	w17, #0x0                   	// #0
   1117c:	mov	w16, #0x0                   	// #0
   11180:	str	x23, [sp, #48]
   11184:	nop
   11188:	cmp	w6, w14
   1118c:	add	w4, w7, w3
   11190:	csel	w4, w4, w3, cc  // cc = lo, ul, last
   11194:	cmp	w17, w16
   11198:	csel	w9, w17, w16, ls  // ls = plast
   1119c:	sub	x12, x2, w14, uxtw
   111a0:	add	w4, w19, w4
   111a4:	ldrb	w10, [x12, w9, uxtw]
   111a8:	ubfiz	x13, x4, #3, #31
   111ac:	ldrb	w11, [x2, w9, uxtw]
   111b0:	add	x13, x5, x13
   111b4:	lsl	w8, w4, #1
   111b8:	cmp	w10, w11
   111bc:	b.eq	11230 <lzma_mf_is_supported@@XZ_5.0+0x270>  // b.none
   111c0:	cmp	w10, w11
   111c4:	b.cs	111fc <lzma_mf_is_supported@@XZ_5.0+0x23c>  // b.hs, b.nlast
   111c8:	str	w3, [x30]
   111cc:	cmp	w15, #0x0
   111d0:	cset	w4, eq  // eq = none
   111d4:	sub	w15, w15, #0x1
   111d8:	ldr	w3, [x13, #4]
   111dc:	add	x30, x13, #0x4
   111e0:	sub	w14, w1, w3
   111e4:	cmp	w14, w7
   111e8:	cset	w8, cs  // cs = hs, nlast
   111ec:	orr	w4, w4, w8
   111f0:	cbnz	w4, 112ec <lzma_mf_is_supported@@XZ_5.0+0x32c>
   111f4:	mov	w17, w9
   111f8:	b	11188 <lzma_mf_is_supported@@XZ_5.0+0x1c8>
   111fc:	str	w3, [x21]
   11200:	cmp	w15, #0x0
   11204:	cset	w4, eq  // eq = none
   11208:	sub	w15, w15, #0x1
   1120c:	ldr	w3, [x5, x8, lsl #2]
   11210:	sub	w14, w1, w3
   11214:	cmp	w7, w14
   11218:	cset	w8, ls  // ls = plast
   1121c:	orr	w4, w4, w8
   11220:	cbnz	w4, 112cc <lzma_mf_is_supported@@XZ_5.0+0x30c>
   11224:	mov	w16, w9
   11228:	mov	x21, x13
   1122c:	b	11188 <lzma_mf_is_supported@@XZ_5.0+0x1c8>
   11230:	add	w9, w9, #0x1
   11234:	cmp	w9, w18
   11238:	b.cs	11294 <lzma_mf_is_supported@@XZ_5.0+0x2d4>  // b.hs, b.nlast
   1123c:	mov	w4, w9
   11240:	b	11254 <lzma_mf_is_supported@@XZ_5.0+0x294>
   11244:	add	w9, w4, #0x1
   11248:	add	x4, x4, #0x1
   1124c:	cmp	w18, w4
   11250:	b.ls	11294 <lzma_mf_is_supported@@XZ_5.0+0x2d4>  // b.plast
   11254:	ldrb	w10, [x12, x4]
   11258:	mov	w9, w4
   1125c:	ldrb	w11, [x2, x4]
   11260:	add	x23, x12, x4
   11264:	add	x22, x2, x4
   11268:	cmp	w10, w11
   1126c:	b.eq	11244 <lzma_mf_is_supported@@XZ_5.0+0x284>  // b.none
   11270:	cmp	w20, w4
   11274:	b.cs	111c0 <lzma_mf_is_supported@@XZ_5.0+0x200>  // b.hs, b.nlast
   11278:	sub	w14, w14, #0x1
   1127c:	stp	w4, w14, [x0]
   11280:	mov	w20, w4
   11284:	add	x0, x0, #0x8
   11288:	ldrb	w10, [x23]
   1128c:	ldrb	w11, [x22]
   11290:	b	111c0 <lzma_mf_is_supported@@XZ_5.0+0x200>
   11294:	cmp	w20, w9
   11298:	b.cc	112a8 <lzma_mf_is_supported@@XZ_5.0+0x2e8>  // b.lo, b.ul, b.last
   1129c:	ldrb	w10, [x12, w9, uxtw]
   112a0:	ldrb	w11, [x2, w9, uxtw]
   112a4:	b	111c0 <lzma_mf_is_supported@@XZ_5.0+0x200>
   112a8:	sub	w14, w14, #0x1
   112ac:	stp	w9, w14, [x0]
   112b0:	cmp	w18, w9
   112b4:	add	x0, x0, #0x8
   112b8:	b.eq	112fc <lzma_mf_is_supported@@XZ_5.0+0x33c>  // b.none
   112bc:	ldrb	w10, [x12, w9, uxtw]
   112c0:	mov	w20, w9
   112c4:	ldrb	w11, [x2, w9, uxtw]
   112c8:	b	111c0 <lzma_mf_is_supported@@XZ_5.0+0x200>
   112cc:	ldr	x23, [sp, #48]
   112d0:	mov	x21, x13
   112d4:	str	wzr, [x21]
   112d8:	str	wzr, [x30]
   112dc:	ldp	x19, x20, [sp, #16]
   112e0:	ldp	x21, x22, [sp, #32]
   112e4:	ldp	x29, x30, [sp], #64
   112e8:	ret
   112ec:	ldr	x23, [sp, #48]
   112f0:	b	112d4 <lzma_mf_is_supported@@XZ_5.0+0x314>
   112f4:	ldr	x0, [sp, #64]
   112f8:	b	112d4 <lzma_mf_is_supported@@XZ_5.0+0x314>
   112fc:	ldr	w1, [x13]
   11300:	ldr	x23, [sp, #48]
   11304:	str	w1, [x30]
   11308:	ldr	w1, [x13, #4]
   1130c:	str	w1, [x21]
   11310:	b	112dc <lzma_mf_is_supported@@XZ_5.0+0x31c>
   11314:	nop
   11318:	ubfiz	x17, x6, #3, #31
   1131c:	cmp	w4, #0x0
   11320:	mov	x18, x17
   11324:	sub	w8, w1, w3
   11328:	add	x17, x17, #0x4
   1132c:	add	x18, x5, x18
   11330:	add	x17, x5, x17
   11334:	ccmp	w7, w8, #0x0, ne  // ne = any
   11338:	b.ls	1146c <lzma_mf_is_supported@@XZ_5.0+0x4ac>  // b.plast
   1133c:	stp	x29, x30, [sp, #-16]!
   11340:	sub	w14, w4, #0x1
   11344:	sub	w30, w6, w1
   11348:	mov	w16, #0x0                   	// #0
   1134c:	mov	w15, #0x0                   	// #0
   11350:	mov	x29, sp
   11354:	nop
   11358:	cmp	w6, w8
   1135c:	add	w4, w7, w3
   11360:	csel	w4, w4, w3, cc  // cc = lo, ul, last
   11364:	cmp	w15, w16
   11368:	csel	w10, w15, w16, ls  // ls = plast
   1136c:	sub	x9, x2, w8, uxtw
   11370:	add	w4, w30, w4
   11374:	ldrb	w12, [x9, w10, uxtw]
   11378:	ubfiz	x13, x4, #3, #31
   1137c:	ldrb	w11, [x2, w10, uxtw]
   11380:	add	x13, x5, x13
   11384:	lsl	w8, w4, #1
   11388:	cmp	w12, w11
   1138c:	b.eq	11400 <lzma_mf_is_supported@@XZ_5.0+0x440>  // b.none
   11390:	cmp	w12, w11
   11394:	b.cs	113cc <lzma_mf_is_supported@@XZ_5.0+0x40c>  // b.hs, b.nlast
   11398:	str	w3, [x18]
   1139c:	cmp	w14, #0x0
   113a0:	cset	w4, eq  // eq = none
   113a4:	sub	w14, w14, #0x1
   113a8:	ldr	w3, [x13, #4]
   113ac:	add	x18, x13, #0x4
   113b0:	sub	w8, w1, w3
   113b4:	cmp	w8, w7
   113b8:	cset	w9, cs  // cs = hs, nlast
   113bc:	orr	w4, w4, w9
   113c0:	cbnz	w4, 11448 <lzma_mf_is_supported@@XZ_5.0+0x488>
   113c4:	mov	w16, w10
   113c8:	b	11358 <lzma_mf_is_supported@@XZ_5.0+0x398>
   113cc:	str	w3, [x17]
   113d0:	cmp	w14, #0x0
   113d4:	cset	w4, eq  // eq = none
   113d8:	sub	w14, w14, #0x1
   113dc:	ldr	w3, [x5, x8, lsl #2]
   113e0:	mov	x17, x13
   113e4:	sub	w8, w1, w3
   113e8:	cmp	w7, w8
   113ec:	cset	w9, ls  // ls = plast
   113f0:	orr	w4, w4, w9
   113f4:	cbnz	w4, 11448 <lzma_mf_is_supported@@XZ_5.0+0x488>
   113f8:	mov	w15, w10
   113fc:	b	11358 <lzma_mf_is_supported@@XZ_5.0+0x398>
   11400:	add	w10, w10, #0x1
   11404:	cmp	w10, w0
   11408:	b.cs	11434 <lzma_mf_is_supported@@XZ_5.0+0x474>  // b.hs, b.nlast
   1140c:	mov	w4, w10
   11410:	ldrb	w12, [x9, x4]
   11414:	mov	w10, w4
   11418:	ldrb	w11, [x2, x4]
   1141c:	cmp	w12, w11
   11420:	b.ne	11390 <lzma_mf_is_supported@@XZ_5.0+0x3d0>  // b.any
   11424:	add	w10, w4, #0x1
   11428:	add	x4, x4, #0x1
   1142c:	cmp	w0, w4
   11430:	b.hi	11410 <lzma_mf_is_supported@@XZ_5.0+0x450>  // b.pmore
   11434:	cmp	w0, w10
   11438:	b.eq	11458 <lzma_mf_is_supported@@XZ_5.0+0x498>  // b.none
   1143c:	ldrb	w12, [x9, w10, uxtw]
   11440:	ldrb	w11, [x2, w10, uxtw]
   11444:	b	11390 <lzma_mf_is_supported@@XZ_5.0+0x3d0>
   11448:	str	wzr, [x17]
   1144c:	str	wzr, [x18]
   11450:	ldp	x29, x30, [sp], #16
   11454:	ret
   11458:	ldr	w0, [x13]
   1145c:	str	w0, [x18]
   11460:	ldr	w0, [x13, #4]
   11464:	str	w0, [x17]
   11468:	b	11450 <lzma_mf_is_supported@@XZ_5.0+0x490>
   1146c:	str	wzr, [x17]
   11470:	str	wzr, [x18]
   11474:	ret
   11478:	ldp	w2, w3, [x0, #80]
   1147c:	ldp	w4, w1, [x0, #20]
   11480:	add	w2, w2, #0x1
   11484:	cmp	w2, w3
   11488:	csel	w2, w2, wzr, ne  // ne = any
   1148c:	add	w1, w1, #0x1
   11490:	str	w1, [x0, #24]
   11494:	add	w1, w1, w4
   11498:	str	w2, [x0, #80]
   1149c:	cmn	w1, #0x1
   114a0:	b.eq	114a8 <lzma_mf_is_supported@@XZ_5.0+0x4e8>  // b.none
   114a4:	ret
   114a8:	ldr	w2, [x0, #108]
   114ac:	mvn	w1, w3
   114b0:	cbz	w2, 114e4 <lzma_mf_is_supported@@XZ_5.0+0x524>
   114b4:	ldr	x5, [x0, #64]
   114b8:	mov	w2, #0x0                   	// #0
   114bc:	nop
   114c0:	mov	w4, w2
   114c4:	ldr	w3, [x5, x4, lsl #2]
   114c8:	subs	w6, w3, w1
   114cc:	b.ls	11530 <lzma_mf_is_supported@@XZ_5.0+0x570>  // b.plast
   114d0:	str	w6, [x5, x4, lsl #2]
   114d4:	add	w2, w2, #0x1
   114d8:	ldr	w3, [x0, #108]
   114dc:	cmp	w2, w3
   114e0:	b.cc	114c0 <lzma_mf_is_supported@@XZ_5.0+0x500>  // b.lo, b.ul, b.last
   114e4:	ldr	w2, [x0, #112]
   114e8:	cbz	w2, 11520 <lzma_mf_is_supported@@XZ_5.0+0x560>
   114ec:	ldr	x5, [x0, #72]
   114f0:	mov	w2, #0x0                   	// #0
   114f4:	nop
   114f8:	mov	w4, w2
   114fc:	ldr	w3, [x5, x4, lsl #2]
   11500:	sub	w6, w3, w1
   11504:	cmp	w1, w3
   11508:	b.cs	11548 <lzma_mf_is_supported@@XZ_5.0+0x588>  // b.hs, b.nlast
   1150c:	str	w6, [x5, x4, lsl #2]
   11510:	add	w2, w2, #0x1
   11514:	ldr	w3, [x0, #112]
   11518:	cmp	w2, w3
   1151c:	b.cc	114f8 <lzma_mf_is_supported@@XZ_5.0+0x538>  // b.lo, b.ul, b.last
   11520:	ldr	w2, [x0, #20]
   11524:	sub	w1, w2, w1
   11528:	str	w1, [x0, #20]
   1152c:	ret
   11530:	str	wzr, [x5, x4, lsl #2]
   11534:	add	w2, w2, #0x1
   11538:	ldr	w3, [x0, #108]
   1153c:	cmp	w2, w3
   11540:	b.cc	114c0 <lzma_mf_is_supported@@XZ_5.0+0x500>  // b.lo, b.ul, b.last
   11544:	b	114e4 <lzma_mf_is_supported@@XZ_5.0+0x524>
   11548:	str	wzr, [x5, x4, lsl #2]
   1154c:	add	w2, w2, #0x1
   11550:	ldr	w3, [x0, #112]
   11554:	cmp	w3, w2
   11558:	b.hi	114f8 <lzma_mf_is_supported@@XZ_5.0+0x538>  // b.pmore
   1155c:	b	11520 <lzma_mf_is_supported@@XZ_5.0+0x560>
   11560:	stp	x29, x30, [sp, #-48]!
   11564:	mov	x29, sp
   11568:	stp	x19, x20, [sp, #16]
   1156c:	mov	x20, x2
   11570:	mov	x19, x0
   11574:	str	x21, [sp, #32]
   11578:	mov	x21, x1
   1157c:	mov	x1, x2
   11580:	ldr	x2, [x0, #48]
   11584:	blr	x2
   11588:	mov	w3, w0
   1158c:	cbz	w0, 115cc <lzma_mf_is_supported@@XZ_5.0+0x60c>
   11590:	sub	w0, w0, #0x1
   11594:	ldr	w1, [x19, #96]
   11598:	lsl	x0, x0, #3
   1159c:	add	x4, x20, x0
   115a0:	ldr	w0, [x20, x0]
   115a4:	cmp	w1, w0
   115a8:	b.eq	115f0 <lzma_mf_is_supported@@XZ_5.0+0x630>  // b.none
   115ac:	str	w3, [x21]
   115b0:	ldr	x21, [sp, #32]
   115b4:	ldr	w1, [x19, #28]
   115b8:	add	w1, w1, #0x1
   115bc:	str	w1, [x19, #28]
   115c0:	ldp	x19, x20, [sp, #16]
   115c4:	ldp	x29, x30, [sp], #48
   115c8:	ret
   115cc:	str	w3, [x21]
   115d0:	mov	w0, #0x0                   	// #0
   115d4:	ldr	x21, [sp, #32]
   115d8:	ldr	w1, [x19, #28]
   115dc:	add	w1, w1, #0x1
   115e0:	str	w1, [x19, #28]
   115e4:	ldp	x19, x20, [sp, #16]
   115e8:	ldp	x29, x30, [sp], #48
   115ec:	ret
   115f0:	ldr	w2, [x19, #36]
   115f4:	ldr	w1, [x19, #24]
   115f8:	ldr	w5, [x19, #100]
   115fc:	add	w2, w2, #0x1
   11600:	sub	w2, w2, w1
   11604:	ldr	w6, [x4, #4]
   11608:	cmp	w5, w2
   1160c:	mov	w1, w1
   11610:	csel	w5, w5, w2, ls  // ls = plast
   11614:	mvn	x6, x6
   11618:	sub	x1, x1, #0x1
   1161c:	cmp	w5, w0
   11620:	ldr	x2, [x19]
   11624:	b.ls	115ac <lzma_mf_is_supported@@XZ_5.0+0x5ec>  // b.plast
   11628:	add	x1, x1, w0, uxtw
   1162c:	add	x2, x2, x1
   11630:	b	11640 <lzma_mf_is_supported@@XZ_5.0+0x680>
   11634:	add	w0, w0, #0x1
   11638:	cmp	w5, w0
   1163c:	b.eq	115ac <lzma_mf_is_supported@@XZ_5.0+0x5ec>  // b.none
   11640:	ldrb	w4, [x2]
   11644:	ldrb	w1, [x2, x6]
   11648:	add	x2, x2, #0x1
   1164c:	cmp	w4, w1
   11650:	b.eq	11634 <lzma_mf_is_supported@@XZ_5.0+0x674>  // b.none
   11654:	b	115ac <lzma_mf_is_supported@@XZ_5.0+0x5ec>
   11658:	sub	sp, sp, #0x30
   1165c:	mov	x18, x0
   11660:	stp	x29, x30, [sp, #16]
   11664:	add	x29, sp, #0x10
   11668:	ldr	w8, [x0, #24]
   1166c:	str	x19, [sp, #32]
   11670:	mov	x19, x1
   11674:	ldr	w1, [x0, #36]
   11678:	ldr	w0, [x0, #96]
   1167c:	sub	w1, w1, w8
   11680:	cmp	w0, w1
   11684:	b.ls	11694 <lzma_mf_is_supported@@XZ_5.0+0x6d4>  // b.plast
   11688:	cmp	w1, #0x2
   1168c:	mov	w0, w1
   11690:	b.ls	117a4 <lzma_mf_is_supported@@XZ_5.0+0x7e4>  // b.plast
   11694:	ldr	x10, [x18]
   11698:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   1169c:	ldr	w3, [x18, #88]
   116a0:	ldr	x1, [x1, #3944]
   116a4:	add	x2, x10, w8, uxtw
   116a8:	ldrb	w5, [x10, w8, uxtw]
   116ac:	ldr	x7, [x18, #64]
   116b0:	ldrb	w6, [x2, #1]
   116b4:	ldrb	w4, [x2, #2]
   116b8:	ldr	w5, [x1, x5, lsl #2]
   116bc:	ldr	w1, [x18, #20]
   116c0:	eor	w6, w6, w5
   116c4:	eor	w4, w6, w4, lsl #8
   116c8:	and	x6, x6, #0x3ff
   116cc:	and	w4, w4, w3
   116d0:	add	w1, w8, w1
   116d4:	add	w4, w4, #0x400
   116d8:	ldr	w9, [x7, x6, lsl #2]
   116dc:	ldr	x5, [x18, #72]
   116e0:	sub	w9, w1, w9
   116e4:	ldr	w3, [x7, x4, lsl #2]
   116e8:	str	w1, [x7, x6, lsl #2]
   116ec:	str	w1, [x7, x4, lsl #2]
   116f0:	ldr	w7, [x18, #84]
   116f4:	cmp	w7, w9
   116f8:	b.ls	11750 <lzma_mf_is_supported@@XZ_5.0+0x790>  // b.plast
   116fc:	sub	x12, x2, w9, uxtw
   11700:	ldrb	w4, [x10, w8, uxtw]
   11704:	ldr	w6, [x18, #80]
   11708:	mov	x10, x19
   1170c:	mov	w8, #0x2                   	// #2
   11710:	ldrb	w11, [x12]
   11714:	cmp	w11, w4
   11718:	b.eq	11760 <lzma_mf_is_supported@@XZ_5.0+0x7a0>  // b.none
   1171c:	ldr	w4, [x18, #92]
   11720:	str	x10, [sp]
   11724:	str	w8, [sp, #8]
   11728:	bl	11010 <lzma_mf_is_supported@@XZ_5.0+0x50>
   1172c:	sub	x7, x0, x19
   11730:	mov	x0, x18
   11734:	ubfx	x7, x7, #3, #32
   11738:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   1173c:	mov	w0, w7
   11740:	ldp	x29, x30, [sp, #16]
   11744:	ldr	x19, [sp, #32]
   11748:	add	sp, sp, #0x30
   1174c:	ret
   11750:	ldr	w6, [x18, #80]
   11754:	mov	x10, x19
   11758:	mov	w8, #0x2                   	// #2
   1175c:	b	1171c <lzma_mf_is_supported@@XZ_5.0+0x75c>
   11760:	cmp	w0, w8
   11764:	mov	x4, #0x2                   	// #2
   11768:	b.hi	11780 <lzma_mf_is_supported@@XZ_5.0+0x7c0>  // b.pmore
   1176c:	b	117d0 <lzma_mf_is_supported@@XZ_5.0+0x810>
   11770:	add	w8, w4, #0x1
   11774:	add	x4, x4, #0x1
   11778:	cmp	w0, w4
   1177c:	b.ls	117d0 <lzma_mf_is_supported@@XZ_5.0+0x810>  // b.plast
   11780:	ldrb	w11, [x12, x4]
   11784:	mov	w8, w4
   11788:	ldrb	w10, [x2, x4]
   1178c:	cmp	w11, w10
   11790:	b.eq	11770 <lzma_mf_is_supported@@XZ_5.0+0x7b0>  // b.none
   11794:	sub	w9, w9, #0x1
   11798:	add	x10, x19, #0x8
   1179c:	stp	w4, w9, [x19]
   117a0:	b	1171c <lzma_mf_is_supported@@XZ_5.0+0x75c>
   117a4:	ldr	w0, [x18, #40]
   117a8:	add	w8, w8, #0x1
   117ac:	mov	w7, #0x0                   	// #0
   117b0:	str	w8, [x18, #24]
   117b4:	add	w0, w0, #0x1
   117b8:	str	w0, [x18, #40]
   117bc:	mov	w0, w7
   117c0:	ldp	x29, x30, [sp, #16]
   117c4:	ldr	x19, [sp, #32]
   117c8:	add	sp, sp, #0x30
   117cc:	ret
   117d0:	sub	w9, w9, #0x1
   117d4:	stp	w8, w9, [x19]
   117d8:	add	x10, x19, #0x8
   117dc:	cmp	w0, w8
   117e0:	b.ne	1171c <lzma_mf_is_supported@@XZ_5.0+0x75c>  // b.any
   117e4:	mov	w7, #0x1                   	// #1
   117e8:	str	w3, [x5, w6, uxtw #2]
   117ec:	mov	x0, x18
   117f0:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   117f4:	b	1173c <lzma_mf_is_supported@@XZ_5.0+0x77c>
   117f8:	adrp	x7, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   117fc:	ldr	x7, [x7, #3944]
   11800:	b	11820 <lzma_mf_is_supported@@XZ_5.0+0x860>
   11804:	ldr	w3, [x0, #40]
   11808:	add	w2, w2, #0x1
   1180c:	str	w2, [x0, #24]
   11810:	add	w2, w3, #0x1
   11814:	str	w2, [x0, #40]
   11818:	subs	w1, w1, #0x1
   1181c:	b.eq	1193c <lzma_mf_is_supported@@XZ_5.0+0x97c>  // b.none
   11820:	ldr	w2, [x0, #24]
   11824:	ldr	w3, [x0, #36]
   11828:	sub	w3, w3, w2
   1182c:	cmp	w3, #0x2
   11830:	b.ls	11804 <lzma_mf_is_supported@@XZ_5.0+0x844>  // b.plast
   11834:	ldr	x4, [x0]
   11838:	ldr	w8, [x0, #88]
   1183c:	ldr	x5, [x0, #64]
   11840:	add	x6, x4, w2, uxtw
   11844:	ldrb	w9, [x4, w2, uxtw]
   11848:	ldr	w10, [x0, #20]
   1184c:	ldrb	w4, [x6, #1]
   11850:	ldrb	w3, [x6, #2]
   11854:	add	w2, w2, w10
   11858:	ldr	w9, [x7, x9, lsl #2]
   1185c:	ldr	x6, [x0, #72]
   11860:	eor	w4, w4, w9
   11864:	eor	w3, w4, w3, lsl #8
   11868:	and	x4, x4, #0x3ff
   1186c:	and	w3, w3, w8
   11870:	add	w3, w3, #0x400
   11874:	ldr	w8, [x5, x3, lsl #2]
   11878:	str	w2, [x5, x4, lsl #2]
   1187c:	str	w2, [x5, x3, lsl #2]
   11880:	ldr	w2, [x0, #80]
   11884:	str	w8, [x6, x2, lsl #2]
   11888:	ldp	w3, w4, [x0, #80]
   1188c:	ldp	w8, w2, [x0, #20]
   11890:	add	w3, w3, #0x1
   11894:	cmp	w3, w4
   11898:	csel	w3, w3, wzr, ne  // ne = any
   1189c:	add	w2, w2, #0x1
   118a0:	str	w2, [x0, #24]
   118a4:	add	w2, w2, w8
   118a8:	str	w3, [x0, #80]
   118ac:	cmn	w2, #0x1
   118b0:	b.ne	11818 <lzma_mf_is_supported@@XZ_5.0+0x858>  // b.any
   118b4:	ldr	w3, [x0, #108]
   118b8:	mvn	w2, w4
   118bc:	cbz	w3, 118f0 <lzma_mf_is_supported@@XZ_5.0+0x930>
   118c0:	mov	w3, #0x0                   	// #0
   118c4:	nop
   118c8:	mov	w4, w3
   118cc:	ldr	w8, [x5, x4, lsl #2]
   118d0:	sub	w9, w8, w2
   118d4:	cmp	w2, w8
   118d8:	b.cs	11940 <lzma_mf_is_supported@@XZ_5.0+0x980>  // b.hs, b.nlast
   118dc:	str	w9, [x5, x4, lsl #2]
   118e0:	add	w3, w3, #0x1
   118e4:	ldr	w4, [x0, #108]
   118e8:	cmp	w3, w4
   118ec:	b.cc	118c8 <lzma_mf_is_supported@@XZ_5.0+0x908>  // b.lo, b.ul, b.last
   118f0:	ldr	w3, [x0, #112]
   118f4:	cbz	w3, 11928 <lzma_mf_is_supported@@XZ_5.0+0x968>
   118f8:	mov	w3, #0x0                   	// #0
   118fc:	nop
   11900:	mov	w4, w3
   11904:	ldr	w5, [x6, x4, lsl #2]
   11908:	sub	w8, w5, w2
   1190c:	cmp	w2, w5
   11910:	b.cs	11958 <lzma_mf_is_supported@@XZ_5.0+0x998>  // b.hs, b.nlast
   11914:	str	w8, [x6, x4, lsl #2]
   11918:	add	w3, w3, #0x1
   1191c:	ldr	w4, [x0, #112]
   11920:	cmp	w3, w4
   11924:	b.cc	11900 <lzma_mf_is_supported@@XZ_5.0+0x940>  // b.lo, b.ul, b.last
   11928:	ldr	w3, [x0, #20]
   1192c:	sub	w2, w3, w2
   11930:	str	w2, [x0, #20]
   11934:	subs	w1, w1, #0x1
   11938:	b.ne	11820 <lzma_mf_is_supported@@XZ_5.0+0x860>  // b.any
   1193c:	ret
   11940:	str	wzr, [x5, x4, lsl #2]
   11944:	add	w3, w3, #0x1
   11948:	ldr	w4, [x0, #108]
   1194c:	cmp	w4, w3
   11950:	b.hi	118c8 <lzma_mf_is_supported@@XZ_5.0+0x908>  // b.pmore
   11954:	b	118f0 <lzma_mf_is_supported@@XZ_5.0+0x930>
   11958:	str	wzr, [x6, x4, lsl #2]
   1195c:	add	w3, w3, #0x1
   11960:	ldr	w4, [x0, #112]
   11964:	cmp	w4, w3
   11968:	b.hi	11900 <lzma_mf_is_supported@@XZ_5.0+0x940>  // b.pmore
   1196c:	ldr	w3, [x0, #20]
   11970:	sub	w2, w3, w2
   11974:	str	w2, [x0, #20]
   11978:	b	11934 <lzma_mf_is_supported@@XZ_5.0+0x974>
   1197c:	nop
   11980:	sub	sp, sp, #0x30
   11984:	mov	x18, x0
   11988:	stp	x29, x30, [sp, #16]
   1198c:	add	x29, sp, #0x10
   11990:	ldr	w9, [x0, #24]
   11994:	str	x19, [sp, #32]
   11998:	mov	x19, x1
   1199c:	ldr	w1, [x0, #36]
   119a0:	ldr	w0, [x0, #96]
   119a4:	sub	w1, w1, w9
   119a8:	cmp	w0, w1
   119ac:	b.ls	119bc <lzma_mf_is_supported@@XZ_5.0+0x9fc>  // b.plast
   119b0:	cmp	w1, #0x3
   119b4:	mov	w0, w1
   119b8:	b.ls	11b60 <lzma_mf_is_supported@@XZ_5.0+0xba0>  // b.plast
   119bc:	ldr	x10, [x18]
   119c0:	mov	w13, w9
   119c4:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   119c8:	ldr	w5, [x18, #88]
   119cc:	add	x2, x10, x13
   119d0:	ldr	w1, [x18, #20]
   119d4:	ldrb	w8, [x10, w9, uxtw]
   119d8:	ldr	x3, [x3, #3944]
   119dc:	add	w1, w9, w1
   119e0:	ldrb	w6, [x2, #3]
   119e4:	ldrb	w7, [x2, #1]
   119e8:	ldrb	w4, [x2, #2]
   119ec:	ldr	w8, [x3, x8, lsl #2]
   119f0:	ldr	w6, [x3, x6, lsl #2]
   119f4:	eor	w7, w7, w8
   119f8:	eor	w4, w7, w4, lsl #8
   119fc:	and	x7, x7, #0x3ff
   11a00:	eor	w6, w4, w6, lsl #5
   11a04:	and	x4, x4, #0xffff
   11a08:	and	w6, w6, w5
   11a0c:	add	x4, x4, #0x400
   11a10:	ldp	x8, x5, [x18, #64]
   11a14:	add	w6, w6, #0x10, lsl #12
   11a18:	add	w6, w6, #0x400
   11a1c:	ldr	w11, [x8, x4, lsl #2]
   11a20:	ldr	w14, [x8, x7, lsl #2]
   11a24:	ldr	w3, [x8, x6, lsl #2]
   11a28:	sub	w15, w1, w11
   11a2c:	str	w1, [x8, x7, lsl #2]
   11a30:	str	w1, [x8, x4, lsl #2]
   11a34:	sub	w4, w1, w14
   11a38:	str	w1, [x8, x6, lsl #2]
   11a3c:	ldr	w7, [x18, #84]
   11a40:	cmp	w7, w4
   11a44:	b.hi	11b10 <lzma_mf_is_supported@@XZ_5.0+0xb50>  // b.pmore
   11a48:	ldr	w6, [x18, #80]
   11a4c:	cmp	w14, w11
   11a50:	b.eq	11b38 <lzma_mf_is_supported@@XZ_5.0+0xb78>  // b.none
   11a54:	cmp	w7, w15
   11a58:	b.ls	11b38 <lzma_mf_is_supported@@XZ_5.0+0xb78>  // b.plast
   11a5c:	mov	w12, w15
   11a60:	ldrb	w8, [x10, w9, uxtw]
   11a64:	sub	x4, x2, x12
   11a68:	ldrb	w4, [x4]
   11a6c:	cmp	w8, w4
   11a70:	b.ne	11b38 <lzma_mf_is_supported@@XZ_5.0+0xb78>  // b.any
   11a74:	mov	x13, #0x0                   	// #0
   11a78:	mov	w11, #0x1                   	// #1
   11a7c:	add	x13, x19, x13
   11a80:	sub	w15, w15, #0x1
   11a84:	mov	w8, #0x3                   	// #3
   11a88:	str	w15, [x13, #4]
   11a8c:	nop
   11a90:	cmp	w0, w8
   11a94:	b.ls	11b44 <lzma_mf_is_supported@@XZ_5.0+0xb84>  // b.plast
   11a98:	mov	w4, w8
   11a9c:	sub	x4, x4, x12
   11aa0:	add	x4, x2, x4
   11aa4:	b	11ab4 <lzma_mf_is_supported@@XZ_5.0+0xaf4>
   11aa8:	add	w8, w8, #0x1
   11aac:	cmp	w0, w8
   11ab0:	b.eq	11bb4 <lzma_mf_is_supported@@XZ_5.0+0xbf4>  // b.none
   11ab4:	ldrb	w10, [x4]
   11ab8:	ldrb	w9, [x4, x12]
   11abc:	add	x4, x4, #0x1
   11ac0:	cmp	w10, w9
   11ac4:	b.eq	11aa8 <lzma_mf_is_supported@@XZ_5.0+0xae8>  // b.none
   11ac8:	cmp	w8, #0x3
   11acc:	mov	w10, #0x3                   	// #3
   11ad0:	add	x9, x19, w11, uxtw #3
   11ad4:	csel	w10, w8, w10, cs  // cs = hs, nlast
   11ad8:	str	w8, [x13]
   11adc:	ldr	w4, [x18, #92]
   11ae0:	str	x9, [sp]
   11ae4:	str	w10, [sp, #8]
   11ae8:	bl	11010 <lzma_mf_is_supported@@XZ_5.0+0x50>
   11aec:	sub	x8, x0, x19
   11af0:	mov	x0, x18
   11af4:	ubfx	x11, x8, #3, #32
   11af8:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   11afc:	mov	w0, w11
   11b00:	ldp	x29, x30, [sp, #16]
   11b04:	ldr	x19, [sp, #32]
   11b08:	add	sp, sp, #0x30
   11b0c:	ret
   11b10:	mov	w12, w4
   11b14:	ldrb	w8, [x10, w9, uxtw]
   11b18:	sub	x16, x2, x12
   11b1c:	ldr	w6, [x18, #80]
   11b20:	mov	x17, x12
   11b24:	ldrb	w16, [x16]
   11b28:	cmp	w16, w8
   11b2c:	b.eq	11b8c <lzma_mf_is_supported@@XZ_5.0+0xbcc>  // b.none
   11b30:	cmp	w14, w11
   11b34:	b.ne	11a54 <lzma_mf_is_supported@@XZ_5.0+0xa94>  // b.any
   11b38:	mov	x9, x19
   11b3c:	mov	w10, #0x3                   	// #3
   11b40:	b	11adc <lzma_mf_is_supported@@XZ_5.0+0xb1c>
   11b44:	str	w8, [x13]
   11b48:	b.eq	11bb8 <lzma_mf_is_supported@@XZ_5.0+0xbf8>  // b.none
   11b4c:	cmp	w8, #0x3
   11b50:	mov	w10, #0x3                   	// #3
   11b54:	add	x9, x19, w11, uxtw #3
   11b58:	csel	w10, w8, w10, cs  // cs = hs, nlast
   11b5c:	b	11adc <lzma_mf_is_supported@@XZ_5.0+0xb1c>
   11b60:	ldr	w0, [x18, #40]
   11b64:	add	w9, w9, #0x1
   11b68:	mov	w11, #0x0                   	// #0
   11b6c:	str	w9, [x18, #24]
   11b70:	add	w0, w0, #0x1
   11b74:	str	w0, [x18, #40]
   11b78:	mov	w0, w11
   11b7c:	ldp	x29, x30, [sp, #16]
   11b80:	ldr	x19, [sp, #32]
   11b84:	add	sp, sp, #0x30
   11b88:	ret
   11b8c:	sub	w4, w4, #0x1
   11b90:	mov	w8, #0x2                   	// #2
   11b94:	stp	w8, w4, [x19]
   11b98:	cmp	w14, w11
   11b9c:	b.eq	11ba8 <lzma_mf_is_supported@@XZ_5.0+0xbe8>  // b.none
   11ba0:	cmp	w7, w15
   11ba4:	b.hi	11bc8 <lzma_mf_is_supported@@XZ_5.0+0xc08>  // b.pmore
   11ba8:	mov	x13, x19
   11bac:	mov	w11, #0x1                   	// #1
   11bb0:	b	11a90 <lzma_mf_is_supported@@XZ_5.0+0xad0>
   11bb4:	str	w0, [x13]
   11bb8:	str	w3, [x5, w6, uxtw #2]
   11bbc:	mov	x0, x18
   11bc0:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   11bc4:	b	11afc <lzma_mf_is_supported@@XZ_5.0+0xb3c>
   11bc8:	sub	x4, x2, w15, uxtw
   11bcc:	ldrb	w9, [x10, x13]
   11bd0:	mov	w12, w15
   11bd4:	ldrb	w4, [x4]
   11bd8:	cmp	w9, w4
   11bdc:	b.eq	11be8 <lzma_mf_is_supported@@XZ_5.0+0xc28>  // b.none
   11be0:	mov	x12, x17
   11be4:	b	11ba8 <lzma_mf_is_supported@@XZ_5.0+0xbe8>
   11be8:	mov	w11, w8
   11bec:	mov	x13, #0x8                   	// #8
   11bf0:	b	11a7c <lzma_mf_is_supported@@XZ_5.0+0xabc>
   11bf4:	nop
   11bf8:	adrp	x7, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   11bfc:	mov	w8, #0x400                 	// #1024
   11c00:	movk	w8, #0x1, lsl #16
   11c04:	ldr	x7, [x7, #3944]
   11c08:	b	11c28 <lzma_mf_is_supported@@XZ_5.0+0xc68>
   11c0c:	ldr	w3, [x0, #40]
   11c10:	add	w2, w2, #0x1
   11c14:	str	w2, [x0, #24]
   11c18:	add	w2, w3, #0x1
   11c1c:	str	w2, [x0, #40]
   11c20:	subs	w1, w1, #0x1
   11c24:	b.eq	11d54 <lzma_mf_is_supported@@XZ_5.0+0xd94>  // b.none
   11c28:	ldr	w2, [x0, #24]
   11c2c:	ldr	w3, [x0, #36]
   11c30:	sub	w3, w3, w2
   11c34:	cmp	w3, #0x3
   11c38:	b.ls	11c0c <lzma_mf_is_supported@@XZ_5.0+0xc4c>  // b.plast
   11c3c:	ldr	x3, [x0]
   11c40:	ldr	w9, [x0, #88]
   11c44:	ldr	x6, [x0, #64]
   11c48:	add	x4, x3, w2, uxtw
   11c4c:	ldrb	w10, [x3, w2, uxtw]
   11c50:	ldr	w11, [x0, #20]
   11c54:	ldrb	w3, [x4, #3]
   11c58:	ldrb	w5, [x4, #1]
   11c5c:	add	w2, w2, w11
   11c60:	ldrb	w4, [x4, #2]
   11c64:	ldr	w10, [x7, x10, lsl #2]
   11c68:	ldr	w3, [x7, x3, lsl #2]
   11c6c:	eor	w5, w5, w10
   11c70:	eor	w4, w5, w4, lsl #8
   11c74:	and	x5, x5, #0x3ff
   11c78:	eor	w3, w4, w3, lsl #5
   11c7c:	and	w3, w3, w9
   11c80:	add	x4, x6, w4, uxth #2
   11c84:	add	w3, w3, w8
   11c88:	ldr	x9, [x0, #72]
   11c8c:	ldr	w10, [x6, x3, lsl #2]
   11c90:	str	w2, [x6, x5, lsl #2]
   11c94:	str	w2, [x4, #4096]
   11c98:	str	w2, [x6, x3, lsl #2]
   11c9c:	ldr	w2, [x0, #80]
   11ca0:	str	w10, [x9, x2, lsl #2]
   11ca4:	ldp	w3, w4, [x0, #80]
   11ca8:	ldp	w5, w2, [x0, #20]
   11cac:	add	w3, w3, #0x1
   11cb0:	cmp	w3, w4
   11cb4:	csel	w3, w3, wzr, ne  // ne = any
   11cb8:	add	w2, w2, #0x1
   11cbc:	str	w2, [x0, #24]
   11cc0:	add	w2, w2, w5
   11cc4:	str	w3, [x0, #80]
   11cc8:	cmn	w2, #0x1
   11ccc:	b.ne	11c20 <lzma_mf_is_supported@@XZ_5.0+0xc60>  // b.any
   11cd0:	ldr	w3, [x0, #108]
   11cd4:	mvn	w2, w4
   11cd8:	cbz	w3, 11d08 <lzma_mf_is_supported@@XZ_5.0+0xd48>
   11cdc:	mov	w3, #0x0                   	// #0
   11ce0:	mov	w4, w3
   11ce4:	ldr	w5, [x6, x4, lsl #2]
   11ce8:	sub	w10, w5, w2
   11cec:	cmp	w2, w5
   11cf0:	b.cs	11d58 <lzma_mf_is_supported@@XZ_5.0+0xd98>  // b.hs, b.nlast
   11cf4:	str	w10, [x6, x4, lsl #2]
   11cf8:	add	w3, w3, #0x1
   11cfc:	ldr	w4, [x0, #108]
   11d00:	cmp	w3, w4
   11d04:	b.cc	11ce0 <lzma_mf_is_supported@@XZ_5.0+0xd20>  // b.lo, b.ul, b.last
   11d08:	ldr	w3, [x0, #112]
   11d0c:	cbz	w3, 11d40 <lzma_mf_is_supported@@XZ_5.0+0xd80>
   11d10:	mov	w3, #0x0                   	// #0
   11d14:	nop
   11d18:	mov	w4, w3
   11d1c:	ldr	w5, [x9, x4, lsl #2]
   11d20:	sub	w6, w5, w2
   11d24:	cmp	w2, w5
   11d28:	b.cs	11d70 <lzma_mf_is_supported@@XZ_5.0+0xdb0>  // b.hs, b.nlast
   11d2c:	str	w6, [x9, x4, lsl #2]
   11d30:	add	w3, w3, #0x1
   11d34:	ldr	w4, [x0, #112]
   11d38:	cmp	w3, w4
   11d3c:	b.cc	11d18 <lzma_mf_is_supported@@XZ_5.0+0xd58>  // b.lo, b.ul, b.last
   11d40:	ldr	w3, [x0, #20]
   11d44:	sub	w2, w3, w2
   11d48:	str	w2, [x0, #20]
   11d4c:	subs	w1, w1, #0x1
   11d50:	b.ne	11c28 <lzma_mf_is_supported@@XZ_5.0+0xc68>  // b.any
   11d54:	ret
   11d58:	str	wzr, [x6, x4, lsl #2]
   11d5c:	add	w3, w3, #0x1
   11d60:	ldr	w4, [x0, #108]
   11d64:	cmp	w4, w3
   11d68:	b.hi	11ce0 <lzma_mf_is_supported@@XZ_5.0+0xd20>  // b.pmore
   11d6c:	b	11d08 <lzma_mf_is_supported@@XZ_5.0+0xd48>
   11d70:	str	wzr, [x9, x4, lsl #2]
   11d74:	add	w3, w3, #0x1
   11d78:	ldr	w4, [x0, #112]
   11d7c:	cmp	w4, w3
   11d80:	b.hi	11d18 <lzma_mf_is_supported@@XZ_5.0+0xd58>  // b.pmore
   11d84:	ldr	w3, [x0, #20]
   11d88:	sub	w2, w3, w2
   11d8c:	str	w2, [x0, #20]
   11d90:	b	11d4c <lzma_mf_is_supported@@XZ_5.0+0xd8c>
   11d94:	nop
   11d98:	sub	sp, sp, #0x30
   11d9c:	stp	x29, x30, [sp, #16]
   11da0:	add	x29, sp, #0x10
   11da4:	ldr	w3, [x0, #24]
   11da8:	stp	x19, x20, [sp, #32]
   11dac:	mov	x19, x0
   11db0:	ldr	w0, [x0, #36]
   11db4:	mov	x20, x1
   11db8:	ldr	w1, [x19, #96]
   11dbc:	sub	w0, w0, w3
   11dc0:	cmp	w1, w0
   11dc4:	b.ls	11e80 <lzma_mf_is_supported@@XZ_5.0+0xec0>  // b.plast
   11dc8:	cmp	w0, #0x1
   11dcc:	b.ls	11e58 <lzma_mf_is_supported@@XZ_5.0+0xe98>  // b.plast
   11dd0:	ldr	w1, [x19, #104]
   11dd4:	cmp	w1, #0x1
   11dd8:	b.eq	11e58 <lzma_mf_is_supported@@XZ_5.0+0xe98>  // b.none
   11ddc:	ldr	x2, [x19]
   11de0:	mov	w8, #0x1                   	// #1
   11de4:	ldp	x4, x5, [x19, #64]
   11de8:	ldrh	w6, [x2, w3, uxtw]
   11dec:	add	x2, x2, w3, uxtw
   11df0:	ldr	w1, [x19, #20]
   11df4:	add	w1, w3, w1
   11df8:	ldr	w3, [x4, x6, lsl #2]
   11dfc:	str	w1, [x4, x6, lsl #2]
   11e00:	str	x20, [sp]
   11e04:	ldr	w4, [x19, #92]
   11e08:	ldp	w6, w7, [x19, #80]
   11e0c:	str	w8, [sp, #8]
   11e10:	bl	11130 <lzma_mf_is_supported@@XZ_5.0+0x170>
   11e14:	sub	x0, x0, x20
   11e18:	ldp	w3, w1, [x19, #80]
   11e1c:	ubfx	x0, x0, #3, #32
   11e20:	ldp	w4, w2, [x19, #20]
   11e24:	add	w3, w3, #0x1
   11e28:	cmp	w3, w1
   11e2c:	csel	w3, w3, wzr, ne  // ne = any
   11e30:	add	w2, w2, #0x1
   11e34:	str	w2, [x19, #24]
   11e38:	add	w2, w2, w4
   11e3c:	str	w3, [x19, #80]
   11e40:	cmn	w2, #0x1
   11e44:	b.eq	11e88 <lzma_mf_is_supported@@XZ_5.0+0xec8>  // b.none
   11e48:	ldp	x29, x30, [sp, #16]
   11e4c:	ldp	x19, x20, [sp, #32]
   11e50:	add	sp, sp, #0x30
   11e54:	ret
   11e58:	ldr	w1, [x19, #40]
   11e5c:	add	w3, w3, #0x1
   11e60:	mov	w0, #0x0                   	// #0
   11e64:	str	w3, [x19, #24]
   11e68:	add	w1, w1, #0x1
   11e6c:	str	w1, [x19, #40]
   11e70:	ldp	x29, x30, [sp, #16]
   11e74:	ldp	x19, x20, [sp, #32]
   11e78:	add	sp, sp, #0x30
   11e7c:	ret
   11e80:	mov	w0, w1
   11e84:	b	11ddc <lzma_mf_is_supported@@XZ_5.0+0xe1c>
   11e88:	ldr	w2, [x19, #108]
   11e8c:	mvn	w1, w1
   11e90:	cbz	w2, 11ec8 <lzma_mf_is_supported@@XZ_5.0+0xf08>
   11e94:	ldr	x5, [x19, #64]
   11e98:	mov	w2, #0x0                   	// #0
   11e9c:	nop
   11ea0:	mov	w3, w2
   11ea4:	ldr	w4, [x5, x3, lsl #2]
   11ea8:	sub	w6, w4, w1
   11eac:	cmp	w1, w4
   11eb0:	b.cs	11f0c <lzma_mf_is_supported@@XZ_5.0+0xf4c>  // b.hs, b.nlast
   11eb4:	str	w6, [x5, x3, lsl #2]
   11eb8:	add	w2, w2, #0x1
   11ebc:	ldr	w3, [x19, #108]
   11ec0:	cmp	w2, w3
   11ec4:	b.cc	11ea0 <lzma_mf_is_supported@@XZ_5.0+0xee0>  // b.lo, b.ul, b.last
   11ec8:	ldr	w2, [x19, #112]
   11ecc:	cbz	w2, 11efc <lzma_mf_is_supported@@XZ_5.0+0xf3c>
   11ed0:	ldr	x5, [x19, #72]
   11ed4:	mov	w2, #0x0                   	// #0
   11ed8:	mov	w3, w2
   11edc:	ldr	w4, [x5, x3, lsl #2]
   11ee0:	subs	w6, w4, w1
   11ee4:	b.ls	11f24 <lzma_mf_is_supported@@XZ_5.0+0xf64>  // b.plast
   11ee8:	str	w6, [x5, x3, lsl #2]
   11eec:	add	w2, w2, #0x1
   11ef0:	ldr	w3, [x19, #112]
   11ef4:	cmp	w2, w3
   11ef8:	b.cc	11ed8 <lzma_mf_is_supported@@XZ_5.0+0xf18>  // b.lo, b.ul, b.last
   11efc:	ldr	w2, [x19, #20]
   11f00:	sub	w1, w2, w1
   11f04:	str	w1, [x19, #20]
   11f08:	b	11e48 <lzma_mf_is_supported@@XZ_5.0+0xe88>
   11f0c:	str	wzr, [x5, x3, lsl #2]
   11f10:	add	w2, w2, #0x1
   11f14:	ldr	w3, [x19, #108]
   11f18:	cmp	w3, w2
   11f1c:	b.hi	11ea0 <lzma_mf_is_supported@@XZ_5.0+0xee0>  // b.pmore
   11f20:	b	11ec8 <lzma_mf_is_supported@@XZ_5.0+0xf08>
   11f24:	str	wzr, [x5, x3, lsl #2]
   11f28:	add	w2, w2, #0x1
   11f2c:	ldr	w3, [x19, #112]
   11f30:	cmp	w3, w2
   11f34:	b.hi	11ed8 <lzma_mf_is_supported@@XZ_5.0+0xf18>  // b.pmore
   11f38:	b	11efc <lzma_mf_is_supported@@XZ_5.0+0xf3c>
   11f3c:	nop
   11f40:	stp	x29, x30, [sp, #-32]!
   11f44:	mov	x29, sp
   11f48:	stp	x19, x20, [sp, #16]
   11f4c:	mov	x19, x0
   11f50:	mov	w20, w1
   11f54:	b	11fcc <lzma_mf_is_supported@@XZ_5.0+0x100c>
   11f58:	cmp	w0, #0x1
   11f5c:	b.ls	11fec <lzma_mf_is_supported@@XZ_5.0+0x102c>  // b.plast
   11f60:	ldr	w1, [x19, #104]
   11f64:	cmp	w1, #0x1
   11f68:	b.eq	11fec <lzma_mf_is_supported@@XZ_5.0+0x102c>  // b.none
   11f6c:	ldr	x2, [x19]
   11f70:	ldp	x4, x5, [x19, #64]
   11f74:	ldrh	w6, [x2, w3, uxtw]
   11f78:	add	x2, x2, w3, uxtw
   11f7c:	ldr	w1, [x19, #20]
   11f80:	add	w1, w3, w1
   11f84:	ldr	w3, [x4, x6, lsl #2]
   11f88:	str	w1, [x4, x6, lsl #2]
   11f8c:	ldp	w6, w7, [x19, #80]
   11f90:	ldr	w4, [x19, #92]
   11f94:	bl	11318 <lzma_mf_is_supported@@XZ_5.0+0x358>
   11f98:	ldp	w2, w3, [x19, #80]
   11f9c:	ldp	w1, w0, [x19, #20]
   11fa0:	add	w2, w2, #0x1
   11fa4:	cmp	w2, w3
   11fa8:	csel	w2, w2, wzr, ne  // ne = any
   11fac:	add	w0, w0, #0x1
   11fb0:	str	w0, [x19, #24]
   11fb4:	add	w0, w0, w1
   11fb8:	str	w2, [x19, #80]
   11fbc:	cmn	w0, #0x1
   11fc0:	b.eq	12014 <lzma_mf_is_supported@@XZ_5.0+0x1054>  // b.none
   11fc4:	subs	w20, w20, #0x1
   11fc8:	b.eq	12008 <lzma_mf_is_supported@@XZ_5.0+0x1048>  // b.none
   11fcc:	ldr	w3, [x19, #24]
   11fd0:	ldr	w0, [x19, #36]
   11fd4:	ldr	w1, [x19, #96]
   11fd8:	sub	w0, w0, w3
   11fdc:	cmp	w1, w0
   11fe0:	b.hi	11f58 <lzma_mf_is_supported@@XZ_5.0+0xf98>  // b.pmore
   11fe4:	mov	w0, w1
   11fe8:	b	11f6c <lzma_mf_is_supported@@XZ_5.0+0xfac>
   11fec:	ldr	w0, [x19, #40]
   11ff0:	add	w3, w3, #0x1
   11ff4:	str	w3, [x19, #24]
   11ff8:	subs	w20, w20, #0x1
   11ffc:	add	w0, w0, #0x1
   12000:	str	w0, [x19, #40]
   12004:	b.ne	11fcc <lzma_mf_is_supported@@XZ_5.0+0x100c>  // b.any
   12008:	ldp	x19, x20, [sp, #16]
   1200c:	ldp	x29, x30, [sp], #32
   12010:	ret
   12014:	ldr	w1, [x19, #108]
   12018:	mvn	w0, w3
   1201c:	cbz	w1, 12050 <lzma_mf_is_supported@@XZ_5.0+0x1090>
   12020:	ldr	x4, [x19, #64]
   12024:	mov	w1, #0x0                   	// #0
   12028:	mov	w3, w1
   1202c:	ldr	w2, [x4, x3, lsl #2]
   12030:	sub	w5, w2, w0
   12034:	cmp	w0, w2
   12038:	b.cs	12094 <lzma_mf_is_supported@@XZ_5.0+0x10d4>  // b.hs, b.nlast
   1203c:	str	w5, [x4, x3, lsl #2]
   12040:	add	w1, w1, #0x1
   12044:	ldr	w2, [x19, #108]
   12048:	cmp	w1, w2
   1204c:	b.cc	12028 <lzma_mf_is_supported@@XZ_5.0+0x1068>  // b.lo, b.ul, b.last
   12050:	ldr	w1, [x19, #112]
   12054:	cbz	w1, 12084 <lzma_mf_is_supported@@XZ_5.0+0x10c4>
   12058:	ldr	x4, [x19, #72]
   1205c:	mov	w1, #0x0                   	// #0
   12060:	mov	w3, w1
   12064:	ldr	w2, [x4, x3, lsl #2]
   12068:	subs	w5, w2, w0
   1206c:	b.ls	120ac <lzma_mf_is_supported@@XZ_5.0+0x10ec>  // b.plast
   12070:	str	w5, [x4, x3, lsl #2]
   12074:	add	w1, w1, #0x1
   12078:	ldr	w2, [x19, #112]
   1207c:	cmp	w1, w2
   12080:	b.cc	12060 <lzma_mf_is_supported@@XZ_5.0+0x10a0>  // b.lo, b.ul, b.last
   12084:	ldr	w1, [x19, #20]
   12088:	sub	w0, w1, w0
   1208c:	str	w0, [x19, #20]
   12090:	b	11fc4 <lzma_mf_is_supported@@XZ_5.0+0x1004>
   12094:	str	wzr, [x4, x3, lsl #2]
   12098:	add	w1, w1, #0x1
   1209c:	ldr	w2, [x19, #108]
   120a0:	cmp	w2, w1
   120a4:	b.hi	12028 <lzma_mf_is_supported@@XZ_5.0+0x1068>  // b.pmore
   120a8:	b	12050 <lzma_mf_is_supported@@XZ_5.0+0x1090>
   120ac:	str	wzr, [x4, x3, lsl #2]
   120b0:	add	w1, w1, #0x1
   120b4:	ldr	w2, [x19, #112]
   120b8:	cmp	w2, w1
   120bc:	b.hi	12060 <lzma_mf_is_supported@@XZ_5.0+0x10a0>  // b.pmore
   120c0:	ldr	w1, [x19, #20]
   120c4:	sub	w0, w1, w0
   120c8:	str	w0, [x19, #20]
   120cc:	b	11fc4 <lzma_mf_is_supported@@XZ_5.0+0x1004>
   120d0:	sub	sp, sp, #0x30
   120d4:	stp	x29, x30, [sp, #16]
   120d8:	add	x29, sp, #0x10
   120dc:	ldr	w8, [x0, #24]
   120e0:	stp	x19, x20, [sp, #32]
   120e4:	mov	x20, x1
   120e8:	ldr	w1, [x0, #36]
   120ec:	mov	x19, x0
   120f0:	ldr	w0, [x0, #96]
   120f4:	sub	w1, w1, w8
   120f8:	cmp	w0, w1
   120fc:	b.ls	12118 <lzma_mf_is_supported@@XZ_5.0+0x1158>  // b.plast
   12100:	cmp	w1, #0x2
   12104:	b.ls	121d4 <lzma_mf_is_supported@@XZ_5.0+0x1214>  // b.plast
   12108:	ldr	w2, [x19, #104]
   1210c:	mov	w0, w1
   12110:	cmp	w2, #0x1
   12114:	b.eq	121d4 <lzma_mf_is_supported@@XZ_5.0+0x1214>  // b.none
   12118:	ldr	x9, [x19]
   1211c:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   12120:	ldr	w3, [x19, #88]
   12124:	ldr	x1, [x1, #3944]
   12128:	add	x2, x9, w8, uxtw
   1212c:	ldrb	w5, [x9, w8, uxtw]
   12130:	ldr	x7, [x19, #64]
   12134:	ldrb	w6, [x2, #1]
   12138:	ldrb	w4, [x2, #2]
   1213c:	ldr	w5, [x1, x5, lsl #2]
   12140:	ldr	w1, [x19, #20]
   12144:	eor	w6, w6, w5
   12148:	eor	w4, w6, w4, lsl #8
   1214c:	and	x6, x6, #0x3ff
   12150:	and	w4, w4, w3
   12154:	add	w1, w8, w1
   12158:	add	w4, w4, #0x400
   1215c:	ldr	w10, [x7, x6, lsl #2]
   12160:	ldr	x5, [x19, #72]
   12164:	sub	w10, w1, w10
   12168:	ldr	w3, [x7, x4, lsl #2]
   1216c:	str	w1, [x7, x6, lsl #2]
   12170:	str	w1, [x7, x4, lsl #2]
   12174:	ldr	w7, [x19, #84]
   12178:	cmp	w7, w10
   1217c:	b.ls	12200 <lzma_mf_is_supported@@XZ_5.0+0x1240>  // b.plast
   12180:	sub	x13, x2, w10, uxtw
   12184:	ldrb	w8, [x9, w8, uxtw]
   12188:	ldr	w6, [x19, #80]
   1218c:	mov	x11, x20
   12190:	ldr	w4, [x19, #92]
   12194:	mov	w9, #0x2                   	// #2
   12198:	ldrb	w12, [x13]
   1219c:	cmp	w12, w8
   121a0:	b.eq	12214 <lzma_mf_is_supported@@XZ_5.0+0x1254>  // b.none
   121a4:	str	x11, [sp]
   121a8:	str	w9, [sp, #8]
   121ac:	bl	11130 <lzma_mf_is_supported@@XZ_5.0+0x170>
   121b0:	sub	x20, x0, x20
   121b4:	mov	x0, x19
   121b8:	ubfx	x20, x20, #3, #32
   121bc:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   121c0:	mov	w0, w20
   121c4:	ldp	x29, x30, [sp, #16]
   121c8:	ldp	x19, x20, [sp, #32]
   121cc:	add	sp, sp, #0x30
   121d0:	ret
   121d4:	ldr	w0, [x19, #40]
   121d8:	mov	w20, #0x0                   	// #0
   121dc:	add	w8, w8, #0x1
   121e0:	str	w8, [x19, #24]
   121e4:	add	w0, w0, #0x1
   121e8:	str	w0, [x19, #40]
   121ec:	mov	w0, w20
   121f0:	ldp	x29, x30, [sp, #16]
   121f4:	ldp	x19, x20, [sp, #32]
   121f8:	add	sp, sp, #0x30
   121fc:	ret
   12200:	ldr	w6, [x19, #80]
   12204:	mov	x11, x20
   12208:	ldr	w4, [x19, #92]
   1220c:	mov	w9, #0x2                   	// #2
   12210:	b	121a4 <lzma_mf_is_supported@@XZ_5.0+0x11e4>
   12214:	cmp	w0, w9
   12218:	mov	x8, #0x2                   	// #2
   1221c:	b.hi	12234 <lzma_mf_is_supported@@XZ_5.0+0x1274>  // b.pmore
   12220:	b	12258 <lzma_mf_is_supported@@XZ_5.0+0x1298>
   12224:	add	w9, w8, #0x1
   12228:	add	x8, x8, #0x1
   1222c:	cmp	w0, w8
   12230:	b.ls	12258 <lzma_mf_is_supported@@XZ_5.0+0x1298>  // b.plast
   12234:	ldrb	w12, [x2, x8]
   12238:	mov	w9, w8
   1223c:	ldrb	w11, [x13, x8]
   12240:	cmp	w12, w11
   12244:	b.eq	12224 <lzma_mf_is_supported@@XZ_5.0+0x1264>  // b.none
   12248:	sub	w10, w10, #0x1
   1224c:	add	x11, x20, #0x8
   12250:	stp	w8, w10, [x20]
   12254:	b	121a4 <lzma_mf_is_supported@@XZ_5.0+0x11e4>
   12258:	sub	w10, w10, #0x1
   1225c:	stp	w9, w10, [x20]
   12260:	add	x11, x20, #0x8
   12264:	cmp	w0, w9
   12268:	b.ne	121a4 <lzma_mf_is_supported@@XZ_5.0+0x11e4>  // b.any
   1226c:	bl	11318 <lzma_mf_is_supported@@XZ_5.0+0x358>
   12270:	mov	w20, #0x1                   	// #1
   12274:	mov	x0, x19
   12278:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   1227c:	b	121c0 <lzma_mf_is_supported@@XZ_5.0+0x1200>
   12280:	stp	x29, x30, [sp, #-48]!
   12284:	mov	x29, sp
   12288:	stp	x19, x20, [sp, #16]
   1228c:	adrp	x20, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   12290:	mov	x19, x0
   12294:	ldr	x20, [x20, #3944]
   12298:	str	x21, [sp, #32]
   1229c:	mov	w21, w1
   122a0:	b	12344 <lzma_mf_is_supported@@XZ_5.0+0x1384>
   122a4:	cmp	w0, #0x2
   122a8:	b.ls	12364 <lzma_mf_is_supported@@XZ_5.0+0x13a4>  // b.plast
   122ac:	ldr	w1, [x19, #104]
   122b0:	cmp	w1, #0x1
   122b4:	b.eq	12364 <lzma_mf_is_supported@@XZ_5.0+0x13a4>  // b.none
   122b8:	ldr	x1, [x19]
   122bc:	ldr	w8, [x19, #88]
   122c0:	ldr	x7, [x19, #64]
   122c4:	add	x2, x1, w3, uxtw
   122c8:	ldrb	w5, [x1, w3, uxtw]
   122cc:	ldr	w1, [x19, #20]
   122d0:	ldrb	w6, [x2, #1]
   122d4:	ldrb	w4, [x2, #2]
   122d8:	add	w1, w3, w1
   122dc:	ldr	w3, [x20, x5, lsl #2]
   122e0:	ldr	x5, [x19, #72]
   122e4:	eor	w3, w6, w3
   122e8:	eor	w4, w3, w4, lsl #8
   122ec:	and	x6, x3, #0x3ff
   122f0:	and	w4, w4, w8
   122f4:	add	w4, w4, #0x400
   122f8:	ldr	w3, [x7, x4, lsl #2]
   122fc:	str	w1, [x7, x6, lsl #2]
   12300:	str	w1, [x7, x4, lsl #2]
   12304:	ldp	w6, w7, [x19, #80]
   12308:	ldr	w4, [x19, #92]
   1230c:	bl	11318 <lzma_mf_is_supported@@XZ_5.0+0x358>
   12310:	ldp	w2, w1, [x19, #80]
   12314:	ldp	w3, w0, [x19, #20]
   12318:	add	w2, w2, #0x1
   1231c:	cmp	w2, w1
   12320:	csel	w2, w2, wzr, ne  // ne = any
   12324:	add	w0, w0, #0x1
   12328:	str	w0, [x19, #24]
   1232c:	add	w0, w0, w3
   12330:	str	w2, [x19, #80]
   12334:	cmn	w0, #0x1
   12338:	b.eq	12390 <lzma_mf_is_supported@@XZ_5.0+0x13d0>  // b.none
   1233c:	subs	w21, w21, #0x1
   12340:	b.eq	12380 <lzma_mf_is_supported@@XZ_5.0+0x13c0>  // b.none
   12344:	ldr	w3, [x19, #24]
   12348:	ldr	w0, [x19, #36]
   1234c:	ldr	w1, [x19, #96]
   12350:	sub	w0, w0, w3
   12354:	cmp	w1, w0
   12358:	b.hi	122a4 <lzma_mf_is_supported@@XZ_5.0+0x12e4>  // b.pmore
   1235c:	mov	w0, w1
   12360:	b	122b8 <lzma_mf_is_supported@@XZ_5.0+0x12f8>
   12364:	ldr	w0, [x19, #40]
   12368:	add	w3, w3, #0x1
   1236c:	str	w3, [x19, #24]
   12370:	subs	w21, w21, #0x1
   12374:	add	w0, w0, #0x1
   12378:	str	w0, [x19, #40]
   1237c:	b.ne	12344 <lzma_mf_is_supported@@XZ_5.0+0x1384>  // b.any
   12380:	ldp	x19, x20, [sp, #16]
   12384:	ldr	x21, [sp, #32]
   12388:	ldp	x29, x30, [sp], #48
   1238c:	ret
   12390:	ldr	w2, [x19, #108]
   12394:	mvn	w0, w1
   12398:	cbz	w2, 123d0 <lzma_mf_is_supported@@XZ_5.0+0x1410>
   1239c:	ldr	x4, [x19, #64]
   123a0:	mov	w1, #0x0                   	// #0
   123a4:	nop
   123a8:	mov	w2, w1
   123ac:	ldr	w3, [x4, x2, lsl #2]
   123b0:	sub	w5, w3, w0
   123b4:	cmp	w0, w3
   123b8:	b.cs	12418 <lzma_mf_is_supported@@XZ_5.0+0x1458>  // b.hs, b.nlast
   123bc:	str	w5, [x4, x2, lsl #2]
   123c0:	add	w1, w1, #0x1
   123c4:	ldr	w2, [x19, #108]
   123c8:	cmp	w1, w2
   123cc:	b.cc	123a8 <lzma_mf_is_supported@@XZ_5.0+0x13e8>  // b.lo, b.ul, b.last
   123d0:	ldr	w1, [x19, #112]
   123d4:	cbz	w1, 12408 <lzma_mf_is_supported@@XZ_5.0+0x1448>
   123d8:	ldr	x4, [x19, #72]
   123dc:	mov	w1, #0x0                   	// #0
   123e0:	mov	w2, w1
   123e4:	ldr	w3, [x4, x2, lsl #2]
   123e8:	sub	w5, w3, w0
   123ec:	cmp	w0, w3
   123f0:	b.cs	12430 <lzma_mf_is_supported@@XZ_5.0+0x1470>  // b.hs, b.nlast
   123f4:	str	w5, [x4, x2, lsl #2]
   123f8:	add	w1, w1, #0x1
   123fc:	ldr	w2, [x19, #112]
   12400:	cmp	w1, w2
   12404:	b.cc	123e0 <lzma_mf_is_supported@@XZ_5.0+0x1420>  // b.lo, b.ul, b.last
   12408:	ldr	w1, [x19, #20]
   1240c:	sub	w0, w1, w0
   12410:	str	w0, [x19, #20]
   12414:	b	1233c <lzma_mf_is_supported@@XZ_5.0+0x137c>
   12418:	str	wzr, [x4, x2, lsl #2]
   1241c:	add	w1, w1, #0x1
   12420:	ldr	w2, [x19, #108]
   12424:	cmp	w2, w1
   12428:	b.hi	123a8 <lzma_mf_is_supported@@XZ_5.0+0x13e8>  // b.pmore
   1242c:	b	123d0 <lzma_mf_is_supported@@XZ_5.0+0x1410>
   12430:	str	wzr, [x4, x2, lsl #2]
   12434:	add	w1, w1, #0x1
   12438:	ldr	w2, [x19, #112]
   1243c:	cmp	w2, w1
   12440:	b.hi	123e0 <lzma_mf_is_supported@@XZ_5.0+0x1420>  // b.pmore
   12444:	ldr	w1, [x19, #20]
   12448:	sub	w0, w1, w0
   1244c:	str	w0, [x19, #20]
   12450:	b	1233c <lzma_mf_is_supported@@XZ_5.0+0x137c>
   12454:	nop
   12458:	sub	sp, sp, #0x40
   1245c:	stp	x29, x30, [sp, #16]
   12460:	add	x29, sp, #0x10
   12464:	ldr	w9, [x0, #24]
   12468:	str	x21, [sp, #48]
   1246c:	mov	x21, x1
   12470:	ldr	w1, [x0, #36]
   12474:	stp	x19, x20, [sp, #32]
   12478:	mov	x19, x0
   1247c:	ldr	w0, [x0, #96]
   12480:	sub	w1, w1, w9
   12484:	cmp	w0, w1
   12488:	b.ls	124a4 <lzma_mf_is_supported@@XZ_5.0+0x14e4>  // b.plast
   1248c:	cmp	w1, #0x3
   12490:	b.ls	12630 <lzma_mf_is_supported@@XZ_5.0+0x1670>  // b.plast
   12494:	ldr	w2, [x19, #104]
   12498:	mov	w0, w1
   1249c:	cmp	w2, #0x1
   124a0:	b.eq	12630 <lzma_mf_is_supported@@XZ_5.0+0x1670>  // b.none
   124a4:	ldr	x10, [x19]
   124a8:	mov	w15, w9
   124ac:	adrp	x3, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   124b0:	ldr	w5, [x19, #88]
   124b4:	add	x2, x10, x15
   124b8:	ldr	w1, [x19, #20]
   124bc:	ldrb	w8, [x10, w9, uxtw]
   124c0:	ldr	x3, [x3, #3944]
   124c4:	add	w1, w9, w1
   124c8:	ldrb	w6, [x2, #3]
   124cc:	ldrb	w7, [x2, #1]
   124d0:	ldrb	w4, [x2, #2]
   124d4:	ldr	w8, [x3, x8, lsl #2]
   124d8:	ldr	w6, [x3, x6, lsl #2]
   124dc:	eor	w7, w7, w8
   124e0:	eor	w4, w7, w4, lsl #8
   124e4:	and	x7, x7, #0x3ff
   124e8:	eor	w6, w4, w6, lsl #5
   124ec:	and	x4, x4, #0xffff
   124f0:	and	w6, w6, w5
   124f4:	add	x4, x4, #0x400
   124f8:	ldp	x8, x5, [x19, #64]
   124fc:	add	w6, w6, #0x10, lsl #12
   12500:	add	w6, w6, #0x400
   12504:	ldr	w14, [x8, x7, lsl #2]
   12508:	ldr	w13, [x8, x4, lsl #2]
   1250c:	ldr	w3, [x8, x6, lsl #2]
   12510:	sub	w11, w1, w14
   12514:	str	w1, [x8, x7, lsl #2]
   12518:	sub	w16, w1, w13
   1251c:	str	w1, [x8, x4, lsl #2]
   12520:	str	w1, [x8, x6, lsl #2]
   12524:	ldr	w7, [x19, #84]
   12528:	cmp	w7, w11
   1252c:	b.hi	125f8 <lzma_mf_is_supported@@XZ_5.0+0x1638>  // b.pmore
   12530:	ldr	w6, [x19, #80]
   12534:	cmp	w14, w13
   12538:	ldr	w4, [x19, #92]
   1253c:	b.eq	12624 <lzma_mf_is_supported@@XZ_5.0+0x1664>  // b.none
   12540:	cmp	w7, w16
   12544:	b.ls	12624 <lzma_mf_is_supported@@XZ_5.0+0x1664>  // b.plast
   12548:	mov	w12, w16
   1254c:	ldrb	w9, [x10, w9, uxtw]
   12550:	sub	x8, x2, x12
   12554:	ldrb	w8, [x8]
   12558:	cmp	w9, w8
   1255c:	b.ne	12624 <lzma_mf_is_supported@@XZ_5.0+0x1664>  // b.any
   12560:	mov	x13, #0x0                   	// #0
   12564:	mov	w20, #0x1                   	// #1
   12568:	add	x13, x21, x13
   1256c:	sub	w16, w16, #0x1
   12570:	mov	w9, #0x3                   	// #3
   12574:	str	w16, [x13, #4]
   12578:	cmp	w0, w9
   1257c:	b.ls	12660 <lzma_mf_is_supported@@XZ_5.0+0x16a0>  // b.plast
   12580:	mov	w8, w9
   12584:	sub	x8, x8, x12
   12588:	add	x8, x2, x8
   1258c:	b	1259c <lzma_mf_is_supported@@XZ_5.0+0x15dc>
   12590:	add	w9, w9, #0x1
   12594:	cmp	w0, w9
   12598:	b.eq	126a4 <lzma_mf_is_supported@@XZ_5.0+0x16e4>  // b.none
   1259c:	ldrb	w11, [x8, x12]
   125a0:	add	x8, x8, #0x1
   125a4:	ldurb	w10, [x8, #-1]
   125a8:	cmp	w11, w10
   125ac:	b.eq	12590 <lzma_mf_is_supported@@XZ_5.0+0x15d0>  // b.none
   125b0:	cmp	w9, #0x3
   125b4:	mov	w8, #0x3                   	// #3
   125b8:	add	x20, x21, w20, uxtw #3
   125bc:	csel	w8, w9, w8, cs  // cs = hs, nlast
   125c0:	str	w9, [x13]
   125c4:	str	x20, [sp]
   125c8:	str	w8, [sp, #8]
   125cc:	bl	11130 <lzma_mf_is_supported@@XZ_5.0+0x170>
   125d0:	sub	x9, x0, x21
   125d4:	mov	x0, x19
   125d8:	ubfx	x20, x9, #3, #32
   125dc:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   125e0:	mov	w0, w20
   125e4:	ldp	x29, x30, [sp, #16]
   125e8:	ldp	x19, x20, [sp, #32]
   125ec:	ldr	x21, [sp, #48]
   125f0:	add	sp, sp, #0x40
   125f4:	ret
   125f8:	mov	w12, w11
   125fc:	ldrb	w8, [x10, w9, uxtw]
   12600:	sub	x17, x2, x12
   12604:	ldr	w6, [x19, #80]
   12608:	ldr	w4, [x19, #92]
   1260c:	mov	x18, x12
   12610:	ldrb	w17, [x17]
   12614:	cmp	w17, w8
   12618:	b.eq	1267c <lzma_mf_is_supported@@XZ_5.0+0x16bc>  // b.none
   1261c:	cmp	w14, w13
   12620:	b.ne	12540 <lzma_mf_is_supported@@XZ_5.0+0x1580>  // b.any
   12624:	mov	x20, x21
   12628:	mov	w8, #0x3                   	// #3
   1262c:	b	125c4 <lzma_mf_is_supported@@XZ_5.0+0x1604>
   12630:	ldr	w0, [x19, #40]
   12634:	add	w9, w9, #0x1
   12638:	mov	w20, #0x0                   	// #0
   1263c:	str	w9, [x19, #24]
   12640:	add	w0, w0, #0x1
   12644:	str	w0, [x19, #40]
   12648:	mov	w0, w20
   1264c:	ldp	x29, x30, [sp, #16]
   12650:	ldp	x19, x20, [sp, #32]
   12654:	ldr	x21, [sp, #48]
   12658:	add	sp, sp, #0x40
   1265c:	ret
   12660:	str	w9, [x13]
   12664:	b.eq	126a8 <lzma_mf_is_supported@@XZ_5.0+0x16e8>  // b.none
   12668:	cmp	w9, #0x3
   1266c:	mov	w8, #0x3                   	// #3
   12670:	add	x20, x21, w20, uxtw #3
   12674:	csel	w8, w9, w8, cs  // cs = hs, nlast
   12678:	b	125c4 <lzma_mf_is_supported@@XZ_5.0+0x1604>
   1267c:	sub	w11, w11, #0x1
   12680:	mov	w9, #0x2                   	// #2
   12684:	stp	w9, w11, [x21]
   12688:	cmp	w14, w13
   1268c:	b.eq	12698 <lzma_mf_is_supported@@XZ_5.0+0x16d8>  // b.none
   12690:	cmp	w7, w16
   12694:	b.hi	126b8 <lzma_mf_is_supported@@XZ_5.0+0x16f8>  // b.pmore
   12698:	mov	x13, x21
   1269c:	mov	w20, #0x1                   	// #1
   126a0:	b	12578 <lzma_mf_is_supported@@XZ_5.0+0x15b8>
   126a4:	str	w0, [x13]
   126a8:	bl	11318 <lzma_mf_is_supported@@XZ_5.0+0x358>
   126ac:	mov	x0, x19
   126b0:	bl	11478 <lzma_mf_is_supported@@XZ_5.0+0x4b8>
   126b4:	b	12648 <lzma_mf_is_supported@@XZ_5.0+0x1688>
   126b8:	sub	x8, x2, w16, uxtw
   126bc:	ldrb	w10, [x10, x15]
   126c0:	mov	w12, w16
   126c4:	ldrb	w8, [x8]
   126c8:	cmp	w10, w8
   126cc:	b.eq	126d8 <lzma_mf_is_supported@@XZ_5.0+0x1718>  // b.none
   126d0:	mov	x12, x18
   126d4:	b	12698 <lzma_mf_is_supported@@XZ_5.0+0x16d8>
   126d8:	mov	w20, w9
   126dc:	mov	x13, #0x8                   	// #8
   126e0:	b	12568 <lzma_mf_is_supported@@XZ_5.0+0x15a8>
   126e4:	nop
   126e8:	stp	x29, x30, [sp, #-48]!
   126ec:	mov	x29, sp
   126f0:	stp	x21, x22, [sp, #32]
   126f4:	adrp	x22, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   126f8:	mov	w21, w1
   126fc:	stp	x19, x20, [sp, #16]
   12700:	mov	w20, #0x400                 	// #1024
   12704:	mov	x19, x0
   12708:	ldr	x22, [x22, #3944]
   1270c:	movk	w20, #0x1, lsl #16
   12710:	b	127c8 <lzma_mf_is_supported@@XZ_5.0+0x1808>
   12714:	cmp	w0, #0x3
   12718:	b.ls	127e8 <lzma_mf_is_supported@@XZ_5.0+0x1828>  // b.plast
   1271c:	ldr	w1, [x19, #104]
   12720:	cmp	w1, #0x1
   12724:	b.eq	127e8 <lzma_mf_is_supported@@XZ_5.0+0x1828>  // b.none
   12728:	ldr	x1, [x19]
   1272c:	ldr	w6, [x19, #88]
   12730:	ldr	x8, [x19, #64]
   12734:	add	x2, x1, w3, uxtw
   12738:	ldrb	w7, [x1, w3, uxtw]
   1273c:	ldr	w1, [x19, #20]
   12740:	ldrb	w4, [x2, #3]
   12744:	ldrb	w5, [x2, #1]
   12748:	add	w1, w3, w1
   1274c:	ldr	w7, [x22, x7, lsl #2]
   12750:	ldrb	w3, [x2, #2]
   12754:	ldr	w4, [x22, x4, lsl #2]
   12758:	eor	w5, w5, w7
   1275c:	and	x7, x5, #0x3ff
   12760:	eor	w3, w5, w3, lsl #8
   12764:	eor	w4, w3, w4, lsl #5
   12768:	and	w4, w4, w6
   1276c:	add	x6, x8, w3, uxth #2
   12770:	add	w4, w4, w20
   12774:	ldr	x5, [x19, #72]
   12778:	ldr	w3, [x8, x4, lsl #2]
   1277c:	str	w1, [x8, x7, lsl #2]
   12780:	str	w1, [x6, #4096]
   12784:	str	w1, [x8, x4, lsl #2]
   12788:	ldp	w6, w7, [x19, #80]
   1278c:	ldr	w4, [x19, #92]
   12790:	bl	11318 <lzma_mf_is_supported@@XZ_5.0+0x358>
   12794:	ldp	w2, w1, [x19, #80]
   12798:	ldp	w3, w0, [x19, #20]
   1279c:	add	w2, w2, #0x1
   127a0:	cmp	w2, w1
   127a4:	csel	w2, w2, wzr, ne  // ne = any
   127a8:	add	w0, w0, #0x1
   127ac:	str	w0, [x19, #24]
   127b0:	add	w0, w0, w3
   127b4:	str	w2, [x19, #80]
   127b8:	cmn	w0, #0x1
   127bc:	b.eq	12814 <lzma_mf_is_supported@@XZ_5.0+0x1854>  // b.none
   127c0:	subs	w21, w21, #0x1
   127c4:	b.eq	12804 <lzma_mf_is_supported@@XZ_5.0+0x1844>  // b.none
   127c8:	ldr	w3, [x19, #24]
   127cc:	ldr	w0, [x19, #36]
   127d0:	ldr	w1, [x19, #96]
   127d4:	sub	w0, w0, w3
   127d8:	cmp	w1, w0
   127dc:	b.hi	12714 <lzma_mf_is_supported@@XZ_5.0+0x1754>  // b.pmore
   127e0:	mov	w0, w1
   127e4:	b	12728 <lzma_mf_is_supported@@XZ_5.0+0x1768>
   127e8:	ldr	w0, [x19, #40]
   127ec:	add	w3, w3, #0x1
   127f0:	str	w3, [x19, #24]
   127f4:	subs	w21, w21, #0x1
   127f8:	add	w0, w0, #0x1
   127fc:	str	w0, [x19, #40]
   12800:	b.ne	127c8 <lzma_mf_is_supported@@XZ_5.0+0x1808>  // b.any
   12804:	ldp	x19, x20, [sp, #16]
   12808:	ldp	x21, x22, [sp, #32]
   1280c:	ldp	x29, x30, [sp], #48
   12810:	ret
   12814:	ldr	w2, [x19, #108]
   12818:	mvn	w0, w1
   1281c:	cbz	w2, 12850 <lzma_mf_is_supported@@XZ_5.0+0x1890>
   12820:	ldr	x4, [x19, #64]
   12824:	mov	w1, #0x0                   	// #0
   12828:	mov	w2, w1
   1282c:	ldr	w3, [x4, x2, lsl #2]
   12830:	sub	w5, w3, w0
   12834:	cmp	w0, w3
   12838:	b.cs	12898 <lzma_mf_is_supported@@XZ_5.0+0x18d8>  // b.hs, b.nlast
   1283c:	str	w5, [x4, x2, lsl #2]
   12840:	add	w1, w1, #0x1
   12844:	ldr	w2, [x19, #108]
   12848:	cmp	w1, w2
   1284c:	b.cc	12828 <lzma_mf_is_supported@@XZ_5.0+0x1868>  // b.lo, b.ul, b.last
   12850:	ldr	w1, [x19, #112]
   12854:	cbz	w1, 12888 <lzma_mf_is_supported@@XZ_5.0+0x18c8>
   12858:	ldr	x4, [x19, #72]
   1285c:	mov	w1, #0x0                   	// #0
   12860:	mov	w2, w1
   12864:	ldr	w3, [x4, x2, lsl #2]
   12868:	sub	w5, w3, w0
   1286c:	cmp	w0, w3
   12870:	b.cs	128b0 <lzma_mf_is_supported@@XZ_5.0+0x18f0>  // b.hs, b.nlast
   12874:	str	w5, [x4, x2, lsl #2]
   12878:	add	w1, w1, #0x1
   1287c:	ldr	w2, [x19, #112]
   12880:	cmp	w1, w2
   12884:	b.cc	12860 <lzma_mf_is_supported@@XZ_5.0+0x18a0>  // b.lo, b.ul, b.last
   12888:	ldr	w1, [x19, #20]
   1288c:	sub	w0, w1, w0
   12890:	str	w0, [x19, #20]
   12894:	b	127c0 <lzma_mf_is_supported@@XZ_5.0+0x1800>
   12898:	str	wzr, [x4, x2, lsl #2]
   1289c:	add	w1, w1, #0x1
   128a0:	ldr	w2, [x19, #108]
   128a4:	cmp	w2, w1
   128a8:	b.hi	12828 <lzma_mf_is_supported@@XZ_5.0+0x1868>  // b.pmore
   128ac:	b	12850 <lzma_mf_is_supported@@XZ_5.0+0x1890>
   128b0:	str	wzr, [x4, x2, lsl #2]
   128b4:	add	w1, w1, #0x1
   128b8:	ldr	w2, [x19, #112]
   128bc:	cmp	w2, w1
   128c0:	b.hi	12860 <lzma_mf_is_supported@@XZ_5.0+0x18a0>  // b.pmore
   128c4:	ldr	w1, [x19, #20]
   128c8:	sub	w0, w1, w0
   128cc:	str	w0, [x19, #20]
   128d0:	b	127c0 <lzma_mf_is_supported@@XZ_5.0+0x1800>
   128d4:	nop
   128d8:	stp	x29, x30, [sp, #-112]!
   128dc:	mov	x29, sp
   128e0:	stp	x23, x24, [sp, #48]
   128e4:	mov	x24, x1
   128e8:	mov	x23, x3
   128ec:	stp	x25, x26, [sp, #64]
   128f0:	mov	x25, x2
   128f4:	ldr	x2, [x5]
   128f8:	stp	x19, x20, [sp, #16]
   128fc:	mov	x20, x0
   12900:	ldr	x26, [x0, #8]
   12904:	stp	x21, x22, [sp, #32]
   12908:	mov	x21, x5
   1290c:	ldr	x1, [x0, #32]
   12910:	mov	x22, x6
   12914:	stp	x27, x28, [sp, #80]
   12918:	str	x4, [sp, #104]
   1291c:	nop
   12920:	cmp	x26, x1
   12924:	b.eq	129c0 <lzma_mf_is_supported@@XZ_5.0+0x1a00>  // b.none
   12928:	sub	x1, x1, x26
   1292c:	ldp	x0, x5, [x20, #48]
   12930:	sub	x2, x22, x2
   12934:	cmp	x2, x1
   12938:	mov	x4, x23
   1293c:	csel	x2, x2, x1, ls  // ls = plast
   12940:	mov	x3, x25
   12944:	add	x2, x2, x26
   12948:	str	x2, [x20, #24]
   1294c:	mov	x1, x20
   12950:	mov	x2, x24
   12954:	blr	x5
   12958:	mov	w28, w0
   1295c:	ldp	x1, x2, [x20]
   12960:	ldr	x19, [x21]
   12964:	ldr	x0, [sp, #104]
   12968:	sub	x27, x2, x26
   1296c:	add	x1, x1, x26
   12970:	mov	x2, x27
   12974:	add	x0, x0, x19
   12978:	bl	30c0 <memcpy@plt>
   1297c:	ldrb	w0, [x20, #40]
   12980:	add	x2, x19, x27
   12984:	str	x2, [x21]
   12988:	cmp	x2, x22
   1298c:	cbz	w0, 129cc <lzma_mf_is_supported@@XZ_5.0+0x1a0c>
   12990:	ldr	x0, [x20]
   12994:	stp	xzr, xzr, [x20, #8]
   12998:	ldr	x1, [x20, #32]
   1299c:	add	x0, x0, x1
   129a0:	sturb	wzr, [x0, #-1]
   129a4:	strb	wzr, [x20, #40]
   129a8:	cbnz	w28, 129e8 <lzma_mf_is_supported@@XZ_5.0+0x1a28>
   129ac:	b.eq	129e4 <lzma_mf_is_supported@@XZ_5.0+0x1a24>  // b.none
   129b0:	ldr	x26, [x20, #8]
   129b4:	ldr	x1, [x20, #32]
   129b8:	cmp	x26, x1
   129bc:	b.ne	12928 <lzma_mf_is_supported@@XZ_5.0+0x1968>  // b.any
   129c0:	mov	x26, #0x0                   	// #0
   129c4:	str	xzr, [x20, #8]
   129c8:	b	1292c <lzma_mf_is_supported@@XZ_5.0+0x196c>
   129cc:	cbnz	w28, 129e8 <lzma_mf_is_supported@@XZ_5.0+0x1a28>
   129d0:	b.eq	129e4 <lzma_mf_is_supported@@XZ_5.0+0x1a24>  // b.none
   129d4:	ldr	x26, [x20, #8]
   129d8:	ldr	x1, [x20, #32]
   129dc:	cmp	x26, x1
   129e0:	b.cs	12920 <lzma_mf_is_supported@@XZ_5.0+0x1960>  // b.hs, b.nlast
   129e4:	mov	w28, #0x0                   	// #0
   129e8:	mov	w0, w28
   129ec:	ldp	x19, x20, [sp, #16]
   129f0:	ldp	x21, x22, [sp, #32]
   129f4:	ldp	x23, x24, [sp, #48]
   129f8:	ldp	x25, x26, [sp, #64]
   129fc:	ldp	x27, x28, [sp, #80]
   12a00:	ldp	x29, x30, [sp], #112
   12a04:	ret
   12a08:	stp	x29, x30, [sp, #-32]!
   12a0c:	mov	x29, sp
   12a10:	stp	x19, x20, [sp, #16]
   12a14:	mov	x19, x0
   12a18:	mov	x20, x1
   12a1c:	add	x0, x0, #0x58
   12a20:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
   12a24:	ldr	x0, [x19]
   12a28:	mov	x1, x20
   12a2c:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   12a30:	ldr	x2, [x19, #80]
   12a34:	mov	x1, x20
   12a38:	ldr	x0, [x19, #48]
   12a3c:	cbz	x2, 12a58 <lzma_mf_is_supported@@XZ_5.0+0x1a98>
   12a40:	blr	x2
   12a44:	mov	x1, x20
   12a48:	mov	x0, x19
   12a4c:	ldp	x19, x20, [sp, #16]
   12a50:	ldp	x29, x30, [sp], #32
   12a54:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   12a58:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   12a5c:	mov	x1, x20
   12a60:	mov	x0, x19
   12a64:	ldp	x19, x20, [sp, #16]
   12a68:	ldp	x29, x30, [sp], #32
   12a6c:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   12a70:	sub	sp, sp, #0x80
   12a74:	stp	x29, x30, [sp, #16]
   12a78:	add	x29, sp, #0x10
   12a7c:	ldr	x10, [x0, #112]
   12a80:	stp	x25, x26, [sp, #80]
   12a84:	mov	x26, x1
   12a88:	ldr	w1, [sp, #128]
   12a8c:	mov	x25, x4
   12a90:	stp	x21, x22, [sp, #48]
   12a94:	mov	x21, x5
   12a98:	stp	x23, x24, [sp, #64]
   12a9c:	mov	x23, x2
   12aa0:	mov	x24, x3
   12aa4:	stp	x27, x28, [sp, #96]
   12aa8:	mov	x28, x6
   12aac:	mov	x27, x7
   12ab0:	str	w1, [sp, #116]
   12ab4:	cbz	x10, 12c20 <lzma_mf_is_supported@@XZ_5.0+0x1c60>
   12ab8:	stp	x19, x20, [sp, #32]
   12abc:	mov	x19, x0
   12ac0:	ldr	x0, [x6]
   12ac4:	cmp	x7, x0
   12ac8:	b.ls	12b3c <lzma_mf_is_supported@@XZ_5.0+0x1b7c>  // b.plast
   12acc:	add	x20, x19, #0xb8
   12ad0:	add	x22, x19, #0xa8
   12ad4:	add	x0, x19, #0xb0
   12ad8:	str	x0, [sp, #120]
   12adc:	nop
   12ae0:	ldrb	w0, [x19, #160]
   12ae4:	ldr	x3, [x19, #176]
   12ae8:	cbnz	w0, 12af8 <lzma_mf_is_supported@@XZ_5.0+0x1b38>
   12aec:	ldr	x0, [x19, #168]
   12af0:	cmp	x0, x3
   12af4:	b.eq	12b74 <lzma_mf_is_supported@@XZ_5.0+0x1bb4>  // b.none
   12af8:	ldrb	w0, [x19, #161]
   12afc:	cbnz	w0, 12bc8 <lzma_mf_is_supported@@XZ_5.0+0x1c08>
   12b00:	mov	x6, x27
   12b04:	mov	x5, x28
   12b08:	mov	x4, x21
   12b0c:	mov	x2, x22
   12b10:	mov	x1, x20
   12b14:	mov	x0, x19
   12b18:	bl	128d8 <lzma_mf_is_supported@@XZ_5.0+0x1918>
   12b1c:	cmp	w0, #0x1
   12b20:	b.eq	12b60 <lzma_mf_is_supported@@XZ_5.0+0x1ba0>  // b.none
   12b24:	cbnz	w0, 12b40 <lzma_mf_is_supported@@XZ_5.0+0x1b80>
   12b28:	ldrb	w0, [x19, #160]
   12b2c:	cbz	w0, 12b64 <lzma_mf_is_supported@@XZ_5.0+0x1ba4>
   12b30:	ldr	x0, [x28]
   12b34:	cmp	x27, x0
   12b38:	b.hi	12bfc <lzma_mf_is_supported@@XZ_5.0+0x1c3c>  // b.pmore
   12b3c:	mov	w0, #0x0                   	// #0
   12b40:	ldp	x29, x30, [sp, #16]
   12b44:	ldp	x19, x20, [sp, #32]
   12b48:	ldp	x21, x22, [sp, #48]
   12b4c:	ldp	x23, x24, [sp, #64]
   12b50:	ldp	x25, x26, [sp, #80]
   12b54:	ldp	x27, x28, [sp, #96]
   12b58:	add	sp, sp, #0x80
   12b5c:	ret
   12b60:	strb	w0, [x19, #161]
   12b64:	ldr	x0, [x28]
   12b68:	cmp	x27, x0
   12b6c:	b.hi	12ae0 <lzma_mf_is_supported@@XZ_5.0+0x1b20>  // b.pmore
   12b70:	b	12b3c <lzma_mf_is_supported@@XZ_5.0+0x1b7c>
   12b74:	ldr	w1, [sp, #116]
   12b78:	mov	x5, x20
   12b7c:	ldr	x0, [x19, #88]
   12b80:	str	w1, [sp]
   12b84:	ldr	x6, [sp, #120]
   12b88:	stp	xzr, xzr, [x19, #168]
   12b8c:	mov	x4, x25
   12b90:	ldr	x10, [x19, #112]
   12b94:	mov	x3, x24
   12b98:	mov	x2, x23
   12b9c:	mov	x1, x26
   12ba0:	mov	x7, #0x1000                	// #4096
   12ba4:	blr	x10
   12ba8:	cmp	w0, #0x1
   12bac:	b.eq	12bf0 <lzma_mf_is_supported@@XZ_5.0+0x1c30>  // b.none
   12bb0:	cbnz	w0, 12b40 <lzma_mf_is_supported@@XZ_5.0+0x1b80>
   12bb4:	ldr	x3, [x19, #176]
   12bb8:	cbz	x3, 12b3c <lzma_mf_is_supported@@XZ_5.0+0x1b7c>
   12bbc:	ldrb	w0, [x19, #161]
   12bc0:	cbz	w0, 12b00 <lzma_mf_is_supported@@XZ_5.0+0x1b40>
   12bc4:	nop
   12bc8:	cbnz	x3, 12bfc <lzma_mf_is_supported@@XZ_5.0+0x1c3c>
   12bcc:	ldrb	w0, [x19, #160]
   12bd0:	ldp	x29, x30, [sp, #16]
   12bd4:	ldp	x19, x20, [sp, #32]
   12bd8:	ldp	x21, x22, [sp, #48]
   12bdc:	ldp	x23, x24, [sp, #64]
   12be0:	ldp	x25, x26, [sp, #80]
   12be4:	ldp	x27, x28, [sp, #96]
   12be8:	add	sp, sp, #0x80
   12bec:	ret
   12bf0:	strb	w0, [x19, #160]
   12bf4:	ldr	x3, [x19, #176]
   12bf8:	b	12af8 <lzma_mf_is_supported@@XZ_5.0+0x1b38>
   12bfc:	mov	w0, #0x9                   	// #9
   12c00:	ldp	x29, x30, [sp, #16]
   12c04:	ldp	x19, x20, [sp, #32]
   12c08:	ldp	x21, x22, [sp, #48]
   12c0c:	ldp	x23, x24, [sp, #64]
   12c10:	ldp	x25, x26, [sp, #80]
   12c14:	ldp	x27, x28, [sp, #96]
   12c18:	add	sp, sp, #0x80
   12c1c:	ret
   12c20:	mov	x5, x28
   12c24:	mov	x4, x21
   12c28:	mov	x3, x25
   12c2c:	mov	x2, x24
   12c30:	mov	x1, x23
   12c34:	mov	x6, x7
   12c38:	ldp	x29, x30, [sp, #16]
   12c3c:	ldp	x21, x22, [sp, #48]
   12c40:	ldp	x23, x24, [sp, #64]
   12c44:	ldp	x25, x26, [sp, #80]
   12c48:	ldp	x27, x28, [sp, #96]
   12c4c:	add	sp, sp, #0x80
   12c50:	b	128d8 <lzma_mf_is_supported@@XZ_5.0+0x1918>
   12c54:	nop
   12c58:	stp	x29, x30, [sp, #-96]!
   12c5c:	mov	x29, sp
   12c60:	stp	x19, x20, [sp, #16]
   12c64:	mov	x20, x0
   12c68:	ldr	x19, [x0]
   12c6c:	stp	x21, x22, [sp, #32]
   12c70:	mov	x22, x2
   12c74:	str	x23, [sp, #48]
   12c78:	mov	x21, x1
   12c7c:	mov	x23, x3
   12c80:	cbz	x19, 12d64 <lzma_mf_is_supported@@XZ_5.0+0x1da4>
   12c84:	ldr	x2, [x22, #16]
   12c88:	add	x3, sp, #0x48
   12c8c:	mov	x1, x21
   12c90:	add	x0, x19, #0x30
   12c94:	blr	x23
   12c98:	cbnz	w0, 12d30 <lzma_mf_is_supported@@XZ_5.0+0x1d70>
   12c9c:	ldr	x3, [sp, #72]
   12ca0:	cmp	x3, #0xfff
   12ca4:	b.hi	12d44 <lzma_mf_is_supported@@XZ_5.0+0x1d84>  // b.pmore
   12ca8:	mov	x3, #0x1000                	// #4096
   12cac:	add	x3, x3, #0xf
   12cb0:	ldr	x0, [x19, #32]
   12cb4:	and	x3, x3, #0xfffffffffffffff0
   12cb8:	str	x3, [sp, #72]
   12cbc:	cmp	x3, x0
   12cc0:	b.eq	12cec <lzma_mf_is_supported@@XZ_5.0+0x1d2c>  // b.none
   12cc4:	ldr	x0, [x19]
   12cc8:	mov	x1, x21
   12ccc:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   12cd0:	ldr	x0, [sp, #72]
   12cd4:	mov	x1, x21
   12cd8:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   12cdc:	str	x0, [x19]
   12ce0:	cbz	x0, 12d4c <lzma_mf_is_supported@@XZ_5.0+0x1d8c>
   12ce4:	ldr	x0, [sp, #72]
   12ce8:	str	x0, [x19, #32]
   12cec:	ldr	x0, [x20]
   12cf0:	ldr	x1, [x0]
   12cf4:	stp	xzr, xzr, [x0, #8]
   12cf8:	ldr	x2, [x0, #32]
   12cfc:	add	x1, x1, x2
   12d00:	sturb	wzr, [x1, #-1]
   12d04:	strb	wzr, [x0, #40]
   12d08:	ldr	x1, [sp, #80]
   12d0c:	cbz	x1, 12d18 <lzma_mf_is_supported@@XZ_5.0+0x1d58>
   12d10:	ldr	x3, [sp, #88]
   12d14:	cbnz	x3, 12db8 <lzma_mf_is_supported@@XZ_5.0+0x1df8>
   12d18:	strh	wzr, [x19, #160]
   12d1c:	add	x2, x22, #0x18
   12d20:	stp	xzr, xzr, [x19, #168]
   12d24:	mov	x1, x21
   12d28:	add	x0, x19, #0x58
   12d2c:	bl	3860 <lzma_version_string@@XZ_5.0+0x148>
   12d30:	ldp	x19, x20, [sp, #16]
   12d34:	ldp	x21, x22, [sp, #32]
   12d38:	ldr	x23, [sp, #48]
   12d3c:	ldp	x29, x30, [sp], #96
   12d40:	ret
   12d44:	cmn	x3, #0x10
   12d48:	b.ls	12cac <lzma_mf_is_supported@@XZ_5.0+0x1cec>  // b.plast
   12d4c:	mov	w0, #0x5                   	// #5
   12d50:	ldp	x19, x20, [sp, #16]
   12d54:	ldp	x21, x22, [sp, #32]
   12d58:	ldr	x23, [sp, #48]
   12d5c:	ldp	x29, x30, [sp], #96
   12d60:	ret
   12d64:	mov	x0, #0x10b8                	// #4280
   12d68:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   12d6c:	mov	x19, x0
   12d70:	cbz	x0, 12d4c <lzma_mf_is_supported@@XZ_5.0+0x1d8c>
   12d74:	adrp	x1, 12000 <lzma_mf_is_supported@@XZ_5.0+0x1040>
   12d78:	adrp	x0, 12000 <lzma_mf_is_supported@@XZ_5.0+0x1040>
   12d7c:	add	x1, x1, #0xa70
   12d80:	add	x0, x0, #0xa08
   12d84:	mov	x2, #0xffffffffffffffff    	// #-1
   12d88:	str	xzr, [x19]
   12d8c:	str	x19, [x20]
   12d90:	stp	x1, x0, [x20, #24]
   12d94:	str	xzr, [x19, #32]
   12d98:	stp	xzr, xzr, [x19, #48]
   12d9c:	stp	xzr, xzr, [x19, #64]
   12da0:	stp	xzr, xzr, [x19, #80]
   12da4:	stp	x2, xzr, [x19, #96]
   12da8:	stp	xzr, xzr, [x19, #112]
   12dac:	stp	xzr, xzr, [x19, #128]
   12db0:	stp	xzr, xzr, [x19, #144]
   12db4:	b	12c84 <lzma_mf_is_supported@@XZ_5.0+0x1cc4>
   12db8:	ldr	x20, [sp, #72]
   12dbc:	ldr	x0, [x19]
   12dc0:	cmp	x20, x3
   12dc4:	csel	x20, x20, x3, ls  // ls = plast
   12dc8:	sub	x3, x3, x20
   12dcc:	mov	x2, x20
   12dd0:	add	x1, x1, x3
   12dd4:	bl	30c0 <memcpy@plt>
   12dd8:	dup	v0.2d, x20
   12ddc:	stur	q0, [x19, #8]
   12de0:	b	12d18 <lzma_mf_is_supported@@XZ_5.0+0x1d58>
   12de4:	nop
   12de8:	mov	x1, #0x10b8                	// #4280
   12dec:	add	x0, x0, x1
   12df0:	ret
   12df4:	nop
   12df8:	mov	x2, x0
   12dfc:	ldr	x0, [x0, #48]
   12e00:	ldr	x2, [x2, #72]
   12e04:	mov	x16, x2
   12e08:	br	x16
   12e0c:	nop

0000000000012e10 <lzma_lzma_preset@@XZ_5.0>:
   12e10:	and	w3, w1, #0x1f
   12e14:	mov	x2, x0
   12e18:	cmp	w3, #0x9
   12e1c:	mov	w0, #0x1                   	// #1
   12e20:	b.hi	12e94 <lzma_lzma_preset@@XZ_5.0+0x84>  // b.pmore
   12e24:	tst	w1, #0x7fffffe0
   12e28:	mov	w0, #0x1                   	// #1
   12e2c:	b.ne	12e94 <lzma_lzma_preset@@XZ_5.0+0x84>  // b.any
   12e30:	adrp	x4, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   12e34:	add	x4, x4, #0x3e0
   12e38:	adrp	x5, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   12e3c:	str	xzr, [x2, #8]
   12e40:	tst	w1, #0x1c
   12e44:	ldr	q0, [x5, #976]
   12e48:	ldrb	w5, [x4, w3, uxtw]
   12e4c:	str	q0, [x2, #16]
   12e50:	lsl	w5, w0, w5
   12e54:	str	w5, [x2]
   12e58:	b.ne	12e98 <lzma_lzma_preset@@XZ_5.0+0x88>  // b.any
   12e5c:	mov	w5, w3
   12e60:	cmp	w3, #0x0
   12e64:	add	x4, x4, x5
   12e68:	cset	w5, ne  // ne = any
   12e6c:	tst	w1, #0x1e
   12e70:	add	w5, w5, #0x3
   12e74:	mov	w6, #0x111                 	// #273
   12e78:	mov	w8, #0x80                  	// #128
   12e7c:	ldrb	w7, [x4, #16]
   12e80:	csel	w4, w6, w8, ne  // ne = any
   12e84:	stp	w0, w4, [x2, #32]
   12e88:	mov	w0, #0x0                   	// #0
   12e8c:	stp	w5, w7, [x2, #40]
   12e90:	tbnz	w1, #31, 12ed4 <lzma_lzma_preset@@XZ_5.0+0xc4>
   12e94:	ret
   12e98:	mov	w0, #0x14                  	// #20
   12e9c:	mov	w4, #0x2                   	// #2
   12ea0:	str	w4, [x2, #32]
   12ea4:	cmp	w3, #0x4
   12ea8:	str	w0, [x2, #40]
   12eac:	mov	w0, #0x10                  	// #16
   12eb0:	b.eq	12ec4 <lzma_lzma_preset@@XZ_5.0+0xb4>  // b.none
   12eb4:	cmp	w3, #0x5
   12eb8:	mov	w0, #0x20                  	// #32
   12ebc:	mov	w4, #0x40                  	// #64
   12ec0:	csel	w0, w0, w4, eq  // eq = none
   12ec4:	str	w0, [x2, #36]
   12ec8:	mov	w0, #0x0                   	// #0
   12ecc:	str	wzr, [x2, #44]
   12ed0:	tbz	w1, #31, 12e94 <lzma_lzma_preset@@XZ_5.0+0x84>
   12ed4:	mov	w4, #0x2                   	// #2
   12ed8:	mov	w1, #0x14                  	// #20
   12edc:	str	w4, [x2, #32]
   12ee0:	sub	w3, w3, #0x3
   12ee4:	str	w1, [x2, #40]
   12ee8:	tst	w3, #0xfffffffd
   12eec:	b.ne	12f00 <lzma_lzma_preset@@XZ_5.0+0xf0>  // b.any
   12ef0:	mov	w1, #0xc0                  	// #192
   12ef4:	str	w1, [x2, #36]
   12ef8:	str	wzr, [x2, #44]
   12efc:	ret
   12f00:	mov	w3, #0x111                 	// #273
   12f04:	mov	w1, #0x200                 	// #512
   12f08:	str	w3, [x2, #36]
   12f0c:	str	w1, [x2, #44]
   12f10:	ret
   12f14:	nop
   12f18:	mov	w2, w1
   12f1c:	mov	x3, #0x1200                	// #4608
   12f20:	ldrh	w4, [x0, #2]
   12f24:	add	x5, x2, x3
   12f28:	ldrh	w3, [x0]
   12f2c:	adrp	x9, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   12f30:	add	x10, x0, #0x4, lsl #12
   12f34:	mov	w11, #0x440                 	// #1088
   12f38:	ldr	x8, [x9, #3952]
   12f3c:	lsr	w3, w3, #4
   12f40:	lsr	w4, w4, #4
   12f44:	add	x5, x0, x5, lsl #2
   12f48:	eor	w7, w3, #0x7f
   12f4c:	eor	w6, w4, #0x7f
   12f50:	umaddl	x1, w1, w11, x0
   12f54:	ldr	w10, [x10, #2052]
   12f58:	ldrb	w12, [x8, w4, sxtw]
   12f5c:	add	x11, x1, #0x404
   12f60:	ldrb	w1, [x8, w6, uxtw]
   12f64:	str	w10, [x5, #8]
   12f68:	ldrb	w5, [x8, w7, uxtw]
   12f6c:	ldrb	w16, [x8, w3, sxtw]
   12f70:	add	w12, w12, w5
   12f74:	add	w5, w1, w5
   12f78:	cbz	w10, 130bc <lzma_lzma_preset@@XZ_5.0+0x2ac>
   12f7c:	lsl	x13, x2, #4
   12f80:	mov	x15, x11
   12f84:	add	x14, x13, #0x4
   12f88:	mov	w7, #0x0                   	// #0
   12f8c:	nop
   12f90:	add	w3, w7, #0x8
   12f94:	mov	w4, #0x0                   	// #0
   12f98:	and	w1, w3, #0x1
   12f9c:	lsr	w3, w3, #1
   12fa0:	neg	w1, w1
   12fa4:	cmp	w3, #0x1
   12fa8:	add	x6, x14, w3, uxtw #1
   12fac:	and	w2, w1, #0x7ff
   12fb0:	ldrh	w1, [x0, x6]
   12fb4:	eor	w1, w1, w2
   12fb8:	lsr	w1, w1, #4
   12fbc:	ldrb	w1, [x8, w1, uxtw]
   12fc0:	add	w4, w4, w1
   12fc4:	b.ne	12f98 <lzma_lzma_preset@@XZ_5.0+0x188>  // b.any
   12fc8:	add	w7, w7, #0x1
   12fcc:	add	w4, w16, w4
   12fd0:	str	w4, [x15], #4
   12fd4:	cmp	w10, w7
   12fd8:	ccmp	w7, #0x7, #0x2, hi  // hi = pmore
   12fdc:	b.ls	12f90 <lzma_lzma_preset@@XZ_5.0+0x180>  // b.plast
   12fe0:	cmp	w10, w7
   12fe4:	b.ls	130bc <lzma_lzma_preset@@XZ_5.0+0x2ac>  // b.plast
   12fe8:	add	x8, x13, #0x104
   12fec:	add	x14, x11, w7, uxtw #2
   12ff0:	ldr	x13, [x9, #3952]
   12ff4:	nop
   12ff8:	mov	w3, w7
   12ffc:	mov	w4, #0x0                   	// #0
   13000:	and	w1, w3, #0x1
   13004:	lsr	w3, w3, #1
   13008:	neg	w1, w1
   1300c:	cmp	w3, #0x1
   13010:	add	x6, x8, w3, uxtw #1
   13014:	and	w2, w1, #0x7ff
   13018:	ldrh	w1, [x0, x6]
   1301c:	eor	w1, w1, w2
   13020:	lsr	w1, w1, #4
   13024:	ldrb	w1, [x13, w1, uxtw]
   13028:	add	w4, w4, w1
   1302c:	b.ne	13000 <lzma_lzma_preset@@XZ_5.0+0x1f0>  // b.any
   13030:	add	w1, w7, #0x1
   13034:	add	w4, w12, w4
   13038:	str	w4, [x14], #4
   1303c:	cmp	w10, w1
   13040:	ccmp	w1, #0xf, #0x2, hi  // hi = pmore
   13044:	b.hi	13050 <lzma_lzma_preset@@XZ_5.0+0x240>  // b.pmore
   13048:	mov	w7, w1
   1304c:	b	12ff8 <lzma_lzma_preset@@XZ_5.0+0x1e8>
   13050:	cmp	w10, w1
   13054:	b.ls	130bc <lzma_lzma_preset@@XZ_5.0+0x2ac>  // b.plast
   13058:	ldr	x9, [x9, #3952]
   1305c:	add	x3, x0, #0x204
   13060:	add	x11, x11, w1, uxtw #2
   13064:	add	w7, w7, #0xf1
   13068:	add	w10, w10, #0xf0
   1306c:	nop
   13070:	mov	w2, w7
   13074:	mov	w4, #0x0                   	// #0
   13078:	and	w0, w2, #0x1
   1307c:	lsr	w2, w2, #1
   13080:	neg	w0, w0
   13084:	cmp	w2, #0x1
   13088:	lsl	w6, w2, #1
   1308c:	and	w1, w0, #0x7ff
   13090:	ldrh	w0, [x3, x6]
   13094:	eor	w0, w0, w1
   13098:	lsr	w0, w0, #4
   1309c:	ldrb	w0, [x9, w0, uxtw]
   130a0:	add	w4, w4, w0
   130a4:	b.ne	13078 <lzma_lzma_preset@@XZ_5.0+0x268>  // b.any
   130a8:	add	w4, w5, w4
   130ac:	str	w4, [x11], #4
   130b0:	add	w7, w7, #0x1
   130b4:	cmp	w10, w7
   130b8:	b.ne	13070 <lzma_lzma_preset@@XZ_5.0+0x260>  // b.any
   130bc:	ret
   130c0:	stp	x29, x30, [sp, #-112]!
   130c4:	mov	x29, sp
   130c8:	stp	x19, x20, [sp, #16]
   130cc:	mov	x19, x0
   130d0:	ldrb	w0, [x0, #2957]
   130d4:	stp	x21, x22, [sp, #32]
   130d8:	mov	x20, x3
   130dc:	mov	x22, x1
   130e0:	stp	x23, x24, [sp, #48]
   130e4:	mov	w21, w5
   130e8:	mov	x24, x2
   130ec:	stp	x25, x26, [sp, #64]
   130f0:	mov	x23, x4
   130f4:	ldr	w26, [x1, #24]
   130f8:	cbz	w0, 14180 <lzma_lzma_preset@@XZ_5.0+0x1370>
   130fc:	ldr	w0, [x1, #28]
   13100:	ldr	x4, [x19, #24]
   13104:	sub	w26, w26, w0
   13108:	str	x27, [sp, #80]
   1310c:	mov	w25, #0xffffffff            	// #-1
   13110:	ldr	x6, [x19, #32]
   13114:	cmp	x6, x4
   13118:	b.cs	13190 <lzma_lzma_preset@@XZ_5.0+0x380>  // b.hs, b.nlast
   1311c:	ldr	w0, [x19, #16]
   13120:	mov	w4, #0xffffff              	// #16777215
   13124:	mov	w3, #0xfeffffff            	// #-16777217
   13128:	mov	w5, #0x800                 	// #2048
   1312c:	cmp	w0, w4
   13130:	b.ls	133ec <lzma_lzma_preset@@XZ_5.0+0x5dc>  // b.plast
   13134:	add	x1, x19, x6, lsl #2
   13138:	ldr	w1, [x1, #40]
   1313c:	cmp	w1, #0x2
   13140:	b.eq	13428 <lzma_lzma_preset@@XZ_5.0+0x618>  // b.none
   13144:	b.hi	13350 <lzma_lzma_preset@@XZ_5.0+0x540>  // b.pmore
   13148:	cbz	w1, 1349c <lzma_lzma_preset@@XZ_5.0+0x68c>
   1314c:	add	x2, x6, #0x22
   13150:	lsr	w1, w0, #11
   13154:	ldr	x9, [x19]
   13158:	ldr	x7, [x19, x2, lsl #3]
   1315c:	ldrh	w2, [x7]
   13160:	sub	w8, w2, w2, lsr #5
   13164:	mul	w1, w1, w2
   13168:	sub	w0, w0, w1
   1316c:	str	w0, [x19, #16]
   13170:	add	x1, x9, w1, uxtw
   13174:	str	x1, [x19]
   13178:	strh	w8, [x7]
   1317c:	ldr	x1, [x19, #24]
   13180:	add	x6, x6, #0x1
   13184:	str	x6, [x19, #32]
   13188:	cmp	x6, x1
   1318c:	b.cc	1312c <lzma_lzma_preset@@XZ_5.0+0x31c>  // b.lo, b.ul, b.last
   13190:	stp	xzr, xzr, [x19, #24]
   13194:	cmn	w21, #0x1
   13198:	ldr	w1, [x22, #24]
   1319c:	b.eq	131cc <lzma_lzma_preset@@XZ_5.0+0x3bc>  // b.none
   131a0:	ldr	w0, [x22, #28]
   131a4:	sub	w0, w1, w0
   131a8:	cmp	w0, w21
   131ac:	b.cs	140a4 <lzma_lzma_preset@@XZ_5.0+0x1294>  // b.hs, b.nlast
   131b0:	ldr	x0, [x20]
   131b4:	mov	x2, #0xeffe                	// #61438
   131b8:	ldr	x3, [x19, #8]
   131bc:	add	x0, x0, #0x4
   131c0:	add	x0, x0, x3
   131c4:	cmp	x0, x2
   131c8:	b.hi	140a4 <lzma_lzma_preset@@XZ_5.0+0x1294>  // b.pmore
   131cc:	ldr	w0, [x22, #32]
   131d0:	cmp	w0, w1
   131d4:	b.hi	131e8 <lzma_lzma_preset@@XZ_5.0+0x3d8>  // b.pmore
   131d8:	ldr	w0, [x22, #104]
   131dc:	cbz	w0, 13330 <lzma_lzma_preset@@XZ_5.0+0x520>
   131e0:	ldr	w0, [x22, #28]
   131e4:	cbz	w0, 14464 <lzma_lzma_preset@@XZ_5.0+0x1654>
   131e8:	ldrb	w0, [x19, #2956]
   131ec:	cbz	w0, 134e0 <lzma_lzma_preset@@XZ_5.0+0x6d0>
   131f0:	add	x3, sp, #0x68
   131f4:	add	x2, sp, #0x6c
   131f8:	mov	x1, x22
   131fc:	mov	x0, x19
   13200:	bl	15408 <lzma_mode_is_supported@@XZ_5.0+0x10>
   13204:	ldr	w5, [x19, #736]
   13208:	mov	x17, #0x35ce                	// #13774
   1320c:	ldr	w1, [x19, #2960]
   13210:	ldp	w18, w27, [sp, #104]
   13214:	and	w9, w26, w1
   13218:	ubfiz	x0, x5, #4, #32
   1321c:	and	w1, w26, w1
   13220:	add	x0, x0, x9
   13224:	mov	w3, w5
   13228:	add	x0, x0, x17
   1322c:	cmn	w27, #0x1
   13230:	ldr	x6, [x19, #24]
   13234:	lsl	x0, x0, #1
   13238:	add	x12, x19, x0
   1323c:	add	x4, x6, #0x1
   13240:	b.eq	13760 <lzma_lzma_preset@@XZ_5.0+0x950>  // b.none
   13244:	add	x10, x19, x6, lsl #2
   13248:	add	x8, x19, x6, lsl #3
   1324c:	mov	w11, #0x1                   	// #1
   13250:	mov	x16, #0x368e                	// #13966
   13254:	add	x3, x3, x16
   13258:	cmp	w27, #0x3
   1325c:	str	w11, [x10, #40]
   13260:	add	x7, x6, #0x2
   13264:	str	x12, [x8, #272]
   13268:	lsl	x2, x3, #1
   1326c:	str	x4, [x19, #24]
   13270:	add	x13, x19, x2
   13274:	add	x12, x6, #0x3
   13278:	add	x4, x6, #0x4
   1327c:	b.hi	134fc <lzma_lzma_preset@@XZ_5.0+0x6ec>  // b.pmore
   13280:	str	w11, [x10, #44]
   13284:	add	x3, x2, #0x18
   13288:	str	x13, [x8, #280]
   1328c:	add	x3, x19, x3
   13290:	str	x7, [x19, #24]
   13294:	cbnz	w27, 1389c <lzma_lzma_preset@@XZ_5.0+0xa8c>
   13298:	str	wzr, [x10, #48]
   1329c:	cmp	w18, w11
   132a0:	str	x3, [x8, #288]
   132a4:	cset	w2, ne  // ne = any
   132a8:	add	x0, x0, #0x1e0
   132ac:	str	w2, [x10, #52]
   132b0:	add	x0, x19, x0
   132b4:	str	x0, [x8, #296]
   132b8:	str	x4, [x19, #24]
   132bc:	cmp	w18, #0x1
   132c0:	b.ne	13910 <lzma_lzma_preset@@XZ_5.0+0xb00>  // b.any
   132c4:	ldr	w7, [x22, #28]
   132c8:	cmp	w5, #0x7
   132cc:	mov	w2, w18
   132d0:	mov	w0, #0x9                   	// #9
   132d4:	mov	w1, #0xb                   	// #11
   132d8:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   132dc:	str	w0, [x19, #736]
   132e0:	sub	w18, w7, w18
   132e4:	add	w26, w26, w2
   132e8:	str	w18, [x22, #28]
   132ec:	b	13110 <lzma_lzma_preset@@XZ_5.0+0x300>
   132f0:	ldr	x0, [x20]
   132f4:	b	13328 <lzma_lzma_preset@@XZ_5.0+0x518>
   132f8:	ldrb	w1, [x19, #20]
   132fc:	ldr	w2, [x19, #4]
   13300:	add	w1, w1, w2
   13304:	strb	w1, [x24, x0]
   13308:	strb	w25, [x19, #20]
   1330c:	ldr	x0, [x20]
   13310:	ldr	x1, [x19, #8]
   13314:	add	x0, x0, #0x1
   13318:	str	x0, [x20]
   1331c:	sub	x1, x1, #0x1
   13320:	str	x1, [x19, #8]
   13324:	cbz	x1, 134c4 <lzma_lzma_preset@@XZ_5.0+0x6b4>
   13328:	cmp	x23, x0
   1332c:	b.ne	132f8 <lzma_lzma_preset@@XZ_5.0+0x4e8>  // b.any
   13330:	mov	w0, #0x0                   	// #0
   13334:	ldp	x19, x20, [sp, #16]
   13338:	ldp	x21, x22, [sp, #32]
   1333c:	ldp	x23, x24, [sp, #48]
   13340:	ldp	x25, x26, [sp, #64]
   13344:	ldr	x27, [sp, #80]
   13348:	ldp	x29, x30, [sp], #112
   1334c:	ret
   13350:	cmp	w1, #0x3
   13354:	b.eq	13480 <lzma_lzma_preset@@XZ_5.0+0x670>  // b.none
   13358:	cmp	w1, #0x4
   1335c:	b.ne	1317c <lzma_lzma_preset@@XZ_5.0+0x36c>  // b.any
   13360:	mov	w1, #0xffffffff            	// #-1
   13364:	mov	w3, #0xfeffffff            	// #-16777217
   13368:	str	w1, [x19, #16]
   1336c:	ldr	x0, [x19]
   13370:	b	133a0 <lzma_lzma_preset@@XZ_5.0+0x590>
   13374:	cmp	xzr, x0, lsr #32
   13378:	b.ne	133a8 <lzma_lzma_preset@@XZ_5.0+0x598>  // b.any
   1337c:	ldr	x1, [x19, #8]
   13380:	add	x6, x6, #0x1
   13384:	ldr	x2, [x19, #24]
   13388:	add	x1, x1, #0x1
   1338c:	lsl	w0, w0, #8
   13390:	stp	x0, x1, [x19]
   13394:	cmp	x6, x2
   13398:	str	x6, [x19, #32]
   1339c:	b.cs	13464 <lzma_lzma_preset@@XZ_5.0+0x654>  // b.hs, b.nlast
   133a0:	cmp	w0, w3
   133a4:	b.hi	13374 <lzma_lzma_preset@@XZ_5.0+0x564>  // b.pmore
   133a8:	ldr	x0, [x20]
   133ac:	b	133e0 <lzma_lzma_preset@@XZ_5.0+0x5d0>
   133b0:	ldrb	w1, [x19, #20]
   133b4:	ldr	w2, [x19, #4]
   133b8:	add	w1, w1, w2
   133bc:	strb	w1, [x24, x0]
   133c0:	strb	w25, [x19, #20]
   133c4:	ldr	x0, [x20]
   133c8:	ldr	x1, [x19, #8]
   133cc:	add	x0, x0, #0x1
   133d0:	str	x0, [x20]
   133d4:	sub	x1, x1, #0x1
   133d8:	str	x1, [x19, #8]
   133dc:	cbz	x1, 13434 <lzma_lzma_preset@@XZ_5.0+0x624>
   133e0:	cmp	x23, x0
   133e4:	b.ne	133b0 <lzma_lzma_preset@@XZ_5.0+0x5a0>  // b.any
   133e8:	b	13330 <lzma_lzma_preset@@XZ_5.0+0x520>
   133ec:	ldr	x1, [x19]
   133f0:	cmp	w1, w3
   133f4:	b.ls	132f0 <lzma_lzma_preset@@XZ_5.0+0x4e0>  // b.plast
   133f8:	cmp	xzr, x1, lsr #32
   133fc:	b.ne	132f0 <lzma_lzma_preset@@XZ_5.0+0x4e0>  // b.any
   13400:	ldr	x2, [x19, #8]
   13404:	add	x2, x2, #0x1
   13408:	lsl	w1, w1, #8
   1340c:	stp	x1, x2, [x19]
   13410:	add	x1, x19, x6, lsl #2
   13414:	lsl	w0, w0, #8
   13418:	str	w0, [x19, #16]
   1341c:	ldr	w1, [x1, #40]
   13420:	cmp	w1, #0x2
   13424:	b.ne	13144 <lzma_lzma_preset@@XZ_5.0+0x334>  // b.any
   13428:	lsr	w0, w0, #1
   1342c:	str	w0, [x19, #16]
   13430:	b	1317c <lzma_lzma_preset@@XZ_5.0+0x36c>
   13434:	ldr	x0, [x19]
   13438:	mov	x1, #0x1                   	// #1
   1343c:	ldr	x6, [x19, #32]
   13440:	lsr	x2, x0, #24
   13444:	strb	w2, [x19, #20]
   13448:	ldr	x2, [x19, #24]
   1344c:	add	x6, x6, #0x1
   13450:	lsl	w0, w0, #8
   13454:	stp	x0, x1, [x19]
   13458:	cmp	x6, x2
   1345c:	str	x6, [x19, #32]
   13460:	b.cc	133a0 <lzma_lzma_preset@@XZ_5.0+0x590>  // b.lo, b.ul, b.last
   13464:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13468:	strb	wzr, [x19, #20]
   1346c:	ldr	q0, [x0, #1024]
   13470:	mov	w0, #0xffffffff            	// #-1
   13474:	str	w0, [x19, #16]
   13478:	str	q0, [x19]
   1347c:	b	13190 <lzma_lzma_preset@@XZ_5.0+0x380>
   13480:	ldr	x1, [x19]
   13484:	lsr	w2, w0, #1
   13488:	mov	x0, x2
   1348c:	str	w2, [x19, #16]
   13490:	add	x1, x1, x2
   13494:	str	x1, [x19]
   13498:	b	1317c <lzma_lzma_preset@@XZ_5.0+0x36c>
   1349c:	add	x1, x6, #0x22
   134a0:	lsr	w0, w0, #11
   134a4:	ldr	x7, [x19, x1, lsl #3]
   134a8:	ldrh	w2, [x7]
   134ac:	sub	w1, w5, w2
   134b0:	mul	w0, w0, w2
   134b4:	add	w1, w2, w1, lsr #5
   134b8:	str	w0, [x19, #16]
   134bc:	strh	w1, [x7]
   134c0:	b	1317c <lzma_lzma_preset@@XZ_5.0+0x36c>
   134c4:	ldr	x1, [x19]
   134c8:	mov	x2, #0x1                   	// #1
   134cc:	ldr	w0, [x19, #16]
   134d0:	ldr	x6, [x19, #32]
   134d4:	lsr	x7, x1, #24
   134d8:	strb	w7, [x19, #20]
   134dc:	b	13408 <lzma_lzma_preset@@XZ_5.0+0x5f8>
   134e0:	mov	w4, w26
   134e4:	add	x3, sp, #0x68
   134e8:	add	x2, sp, #0x6c
   134ec:	mov	x1, x22
   134f0:	mov	x0, x19
   134f4:	bl	15908 <lzma_mode_is_supported@@XZ_5.0+0x510>
   134f8:	b	13204 <lzma_lzma_preset@@XZ_5.0+0x3f4>
   134fc:	ldrb	w3, [x19, #2956]
   13500:	cmp	w5, #0x7
   13504:	str	wzr, [x10, #44]
   13508:	mov	w2, #0xa                   	// #10
   1350c:	str	x13, [x8, #280]
   13510:	mov	w0, #0x7                   	// #7
   13514:	csel	w0, w0, w2, cc  // cc = lo, ul, last
   13518:	str	x7, [x19, #24]
   1351c:	str	w0, [x19, #736]
   13520:	sub	w2, w18, #0x2
   13524:	mov	x13, #0x7200                	// #29184
   13528:	sub	w27, w27, #0x4
   1352c:	cmp	w2, #0x7
   13530:	add	x0, x19, x13
   13534:	add	x7, x6, #0x6
   13538:	b.hi	139d4 <lzma_lzma_preset@@XZ_5.0+0xbc4>  // b.pmore
   1353c:	mov	x4, #0x4                   	// #4
   13540:	str	wzr, [x10, #48]
   13544:	lsr	w6, w2, #2
   13548:	add	x4, x4, w1, uxtw #4
   1354c:	str	x0, [x8, #288]
   13550:	add	x4, x0, x4
   13554:	add	w5, w6, #0x2
   13558:	str	w6, [x10, #52]
   1355c:	ubfx	x11, x2, #1, #1
   13560:	add	x6, x4, #0x2
   13564:	str	x6, [x8, #296]
   13568:	lsl	w6, w5, #1
   1356c:	str	w11, [x10, #56]
   13570:	add	x6, x4, x6
   13574:	add	w5, w11, w5, lsl #1
   13578:	str	x6, [x8, #304]
   1357c:	and	w2, w2, #0x1
   13580:	str	w2, [x10, #60]
   13584:	add	x4, x4, x5, lsl #1
   13588:	str	x4, [x8, #312]
   1358c:	str	x7, [x19, #24]
   13590:	mov	w2, w18
   13594:	cbnz	w3, 135b8 <lzma_lzma_preset@@XZ_5.0+0x7a8>
   13598:	add	x2, x19, x9, lsl #2
   1359c:	add	x2, x2, #0x8, lsl #12
   135a0:	ldr	w3, [x2, #14856]
   135a4:	sub	w3, w3, #0x1
   135a8:	str	w3, [x2, #14856]
   135ac:	cbz	w3, 13fa8 <lzma_lzma_preset@@XZ_5.0+0x1198>
   135b0:	ldr	x7, [x19, #24]
   135b4:	mov	w2, w18
   135b8:	mov	w0, #0x1fff                	// #8191
   135bc:	cmp	w27, w0
   135c0:	b.ls	13a48 <lzma_lzma_preset@@XZ_5.0+0xc38>  // b.plast
   135c4:	mov	w0, #0x1ffffff             	// #33554431
   135c8:	cmp	w27, w0
   135cc:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   135d0:	b.ls	13f84 <lzma_lzma_preset@@XZ_5.0+0x1174>  // b.plast
   135d4:	ldr	x0, [x0, #4000]
   135d8:	lsr	w1, w27, #24
   135dc:	ldrb	w0, [x0, w1, uxtw]
   135e0:	add	w3, w0, #0x30
   135e4:	cmp	w18, #0x5
   135e8:	mov	w0, #0x5                   	// #5
   135ec:	csel	w0, w18, w0, ls  // ls = plast
   135f0:	add	x4, x19, x7, lsl #2
   135f4:	sub	w0, w0, #0x2
   135f8:	add	x6, x19, x7, lsl #3
   135fc:	ubfx	x5, x3, #5, #1
   13600:	mov	x9, #0x6efc                	// #28412
   13604:	ubfiz	x0, x0, #7, #32
   13608:	add	w1, w5, #0x2
   1360c:	add	x0, x0, x9
   13610:	str	w5, [x4, #40]
   13614:	add	x0, x19, x0
   13618:	ubfx	x8, x3, #4, #1
   1361c:	add	x9, x0, #0x2
   13620:	str	x9, [x6, #272]
   13624:	ubfiz	x5, x1, #1, #3
   13628:	add	w1, w8, w1, lsl #1
   1362c:	str	w8, [x4, #44]
   13630:	add	x5, x0, x5
   13634:	ubfx	x8, x3, #3, #1
   13638:	str	x5, [x6, #280]
   1363c:	ubfiz	x5, x1, #1, #5
   13640:	add	w1, w8, w1, lsl #1
   13644:	str	w8, [x4, #48]
   13648:	add	x5, x0, x5
   1364c:	ubfx	x8, x3, #2, #1
   13650:	str	x5, [x6, #288]
   13654:	ubfiz	x5, x1, #1, #7
   13658:	add	w1, w8, w1, lsl #1
   1365c:	str	w8, [x4, #52]
   13660:	add	x5, x0, x5
   13664:	ubfx	x8, x3, #1, #1
   13668:	str	x5, [x6, #296]
   1366c:	ubfiz	x5, x1, #1, #9
   13670:	add	w1, w8, w1, lsl #1
   13674:	str	w8, [x4, #56]
   13678:	add	x5, x0, x5
   1367c:	str	x5, [x6, #304]
   13680:	ubfiz	x1, x1, #1, #11
   13684:	and	w5, w3, #0x1
   13688:	str	w5, [x4, #60]
   1368c:	add	x1, x0, x1
   13690:	str	x1, [x6, #312]
   13694:	add	x4, x7, #0x6
   13698:	str	x4, [x19, #24]
   1369c:	cmp	w3, #0x3
   136a0:	lsr	w8, w3, #1
   136a4:	add	x1, x19, #0x10, lsl #12
   136a8:	b.ls	13734 <lzma_lzma_preset@@XZ_5.0+0x924>  // b.plast
   136ac:	orr	w0, w5, #0x2
   136b0:	sub	w5, w8, #0x1
   136b4:	cmp	w3, #0xd
   136b8:	lsl	w5, w0, w5
   136bc:	sub	w6, w27, w5
   136c0:	b.hi	13bb0 <lzma_lzma_preset@@XZ_5.0+0xda0>  // b.pmore
   136c4:	mov	w0, w3
   136c8:	add	x11, x7, #0x8
   136cc:	sub	x3, x5, x0
   136d0:	sub	w4, w8, #0x2
   136d4:	add	x7, x7, #0x7
   136d8:	mov	x1, #0x70fc                	// #28924
   136dc:	lsl	x3, x3, #1
   136e0:	add	x11, x11, x4
   136e4:	sub	x3, x3, #0x2
   136e8:	mov	x0, x7
   136ec:	add	x12, x19, x1
   136f0:	add	x10, x19, #0x24
   136f4:	add	x9, x19, #0x108
   136f8:	mov	w5, #0x1                   	// #1
   136fc:	nop
   13700:	and	w8, w6, #0x1
   13704:	add	x1, x3, w5, uxtw #1
   13708:	str	w8, [x10, x0, lsl #2]
   1370c:	add	x1, x12, x1
   13710:	str	x1, [x9, x0, lsl #3]
   13714:	add	x0, x0, #0x1
   13718:	lsr	w6, w6, #1
   1371c:	add	w5, w8, w5, lsl #1
   13720:	cmp	x0, x11
   13724:	b.ne	13700 <lzma_lzma_preset@@XZ_5.0+0x8f0>  // b.any
   13728:	add	x1, x19, #0x10, lsl #12
   1372c:	add	x4, x7, x4
   13730:	str	x4, [x19, #24]
   13734:	add	x16, x19, #0x2ec
   13738:	ldr	w0, [x1, #3732]
   1373c:	ldr	w6, [x19, #740]
   13740:	ldr	w5, [x19, #744]
   13744:	add	w0, w0, #0x1
   13748:	ldr	w3, [x19, #748]
   1374c:	stp	w27, w6, [x16, #-8]
   13750:	stp	w5, w3, [x16]
   13754:	ldr	w7, [x22, #28]
   13758:	str	w0, [x1, #3732]
   1375c:	b	132e0 <lzma_lzma_preset@@XZ_5.0+0x4d0>
   13760:	ldp	w0, w7, [x22, #24]
   13764:	add	x3, x19, x6, lsl #2
   13768:	add	x2, x19, x6, lsl #3
   1376c:	mov	w9, #0x8                   	// #8
   13770:	sub	w1, w0, w7
   13774:	mov	w13, #0x600                 	// #1536
   13778:	str	wzr, [x3, #40]
   1377c:	sub	w8, w1, #0x1
   13780:	ldr	x11, [x22]
   13784:	str	x12, [x2, #272]
   13788:	str	x4, [x19, #24]
   1378c:	sub	w4, w0, #0x1
   13790:	ldr	w10, [x19, #2964]
   13794:	cmp	w5, #0x6
   13798:	ldr	w0, [x19, #2968]
   1379c:	ldrb	w8, [x11, w8, uxtw]
   137a0:	sub	w9, w9, w10
   137a4:	and	w0, w26, w0
   137a8:	ldrb	w1, [x11, w1, uxtw]
   137ac:	asr	w8, w8, w9
   137b0:	lsl	w0, w0, w10
   137b4:	add	w8, w8, w0
   137b8:	umaddl	x8, w8, w13, x19
   137bc:	add	x8, x8, #0xb9c
   137c0:	b.hi	13a58 <lzma_lzma_preset@@XZ_5.0+0xc48>  // b.pmore
   137c4:	lsr	w0, w1, #7
   137c8:	str	w0, [x3, #44]
   137cc:	add	w0, w0, #0x2
   137d0:	ubfx	x9, x1, #6, #1
   137d4:	add	x4, x8, #0x2
   137d8:	str	x4, [x2, #280]
   137dc:	ubfiz	x4, x0, #1, #3
   137e0:	add	w0, w9, w0, lsl #1
   137e4:	str	w9, [x3, #48]
   137e8:	add	x4, x8, x4
   137ec:	ubfx	x9, x1, #5, #1
   137f0:	str	x4, [x2, #288]
   137f4:	ubfiz	x4, x0, #1, #5
   137f8:	add	w0, w9, w0, lsl #1
   137fc:	str	w9, [x3, #52]
   13800:	add	x4, x8, x4
   13804:	ubfx	x9, x1, #4, #1
   13808:	str	x4, [x2, #296]
   1380c:	ubfiz	x4, x0, #1, #7
   13810:	add	w0, w9, w0, lsl #1
   13814:	str	w9, [x3, #56]
   13818:	add	x4, x8, x4
   1381c:	ubfx	x9, x1, #3, #1
   13820:	str	x4, [x2, #304]
   13824:	ubfiz	x4, x0, #1, #9
   13828:	add	w0, w9, w0, lsl #1
   1382c:	str	w9, [x3, #60]
   13830:	add	x4, x8, x4
   13834:	ubfx	x9, x1, #2, #1
   13838:	str	x4, [x2, #312]
   1383c:	ubfiz	x4, x0, #1, #11
   13840:	add	w0, w9, w0, lsl #1
   13844:	str	w9, [x3, #64]
   13848:	add	x4, x8, x4
   1384c:	ubfx	x9, x1, #1, #1
   13850:	str	x4, [x2, #320]
   13854:	ubfiz	x4, x0, #1, #13
   13858:	add	w0, w9, w0, lsl #1
   1385c:	str	w9, [x3, #68]
   13860:	add	x4, x8, x4
   13864:	str	x4, [x2, #328]
   13868:	and	w1, w1, #0x1
   1386c:	ubfiz	x0, x0, #1, #15
   13870:	str	w1, [x3, #72]
   13874:	add	x8, x8, x0
   13878:	str	x8, [x2, #336]
   1387c:	add	x4, x6, #0x9
   13880:	str	x4, [x19, #24]
   13884:	cmp	w5, #0x3
   13888:	b.hi	13ad0 <lzma_lzma_preset@@XZ_5.0+0xcc0>  // b.pmore
   1388c:	mov	w5, #0x0                   	// #0
   13890:	mov	w2, w18
   13894:	str	w5, [x19, #736]
   13898:	b	132e0 <lzma_lzma_preset@@XZ_5.0+0x4d0>
   1389c:	add	x13, x19, w27, uxtw #2
   138a0:	add	x0, x2, #0x30
   138a4:	cmp	w27, #0x1
   138a8:	add	x7, x19, x0
   138ac:	ldr	w13, [x13, #740]
   138b0:	str	w11, [x10, #48]
   138b4:	str	x3, [x8, #288]
   138b8:	str	x12, [x19, #24]
   138bc:	b.eq	13f98 <lzma_lzma_preset@@XZ_5.0+0x1188>  // b.none
   138c0:	str	w11, [x10, #52]
   138c4:	add	x0, x2, #0x48
   138c8:	str	x7, [x8, #296]
   138cc:	sub	w2, w27, #0x2
   138d0:	str	w2, [x10, #56]
   138d4:	add	x0, x19, x0
   138d8:	str	x0, [x8, #304]
   138dc:	add	x4, x6, #0x5
   138e0:	str	x4, [x19, #24]
   138e4:	cmp	w27, #0x3
   138e8:	b.ne	138f4 <lzma_lzma_preset@@XZ_5.0+0xae4>  // b.any
   138ec:	ldr	w0, [x19, #748]
   138f0:	str	w0, [x19, #752]
   138f4:	ldr	w0, [x19, #744]
   138f8:	str	w0, [x19, #748]
   138fc:	ldr	w0, [x19, #740]
   13900:	cmp	w18, #0x1
   13904:	str	w13, [x19, #740]
   13908:	str	w0, [x19, #744]
   1390c:	b.eq	132c4 <lzma_lzma_preset@@XZ_5.0+0x4b4>  // b.none
   13910:	sub	w2, w18, #0x2
   13914:	mov	x15, #0xba48                	// #47688
   13918:	ldrb	w7, [x19, #2956]
   1391c:	add	x0, x19, x15
   13920:	cmp	w2, #0x7
   13924:	add	x8, x4, #0x1
   13928:	add	x10, x4, #0x4
   1392c:	b.hi	13f00 <lzma_lzma_preset@@XZ_5.0+0x10f0>  // b.pmore
   13930:	add	x8, x19, x4, lsl #2
   13934:	add	x4, x19, x4, lsl #3
   13938:	mov	x3, #0x4                   	// #4
   1393c:	lsr	w11, w2, #2
   13940:	add	x3, x3, w1, uxtw #4
   13944:	add	w6, w11, #0x2
   13948:	str	wzr, [x8, #40]
   1394c:	add	x3, x0, x3
   13950:	str	x0, [x4, #272]
   13954:	ubfx	x12, x2, #1, #1
   13958:	str	w11, [x8, #44]
   1395c:	add	x13, x3, #0x2
   13960:	str	x13, [x4, #280]
   13964:	lsl	w11, w6, #1
   13968:	str	w12, [x8, #48]
   1396c:	add	x11, x3, x11
   13970:	add	w6, w12, w6, lsl #1
   13974:	str	x11, [x4, #288]
   13978:	and	w2, w2, #0x1
   1397c:	str	w2, [x8, #52]
   13980:	add	x3, x3, x6, lsl #1
   13984:	str	x3, [x4, #296]
   13988:	mov	x4, x10
   1398c:	str	x10, [x19, #24]
   13990:	mov	w2, w18
   13994:	cbnz	w7, 139b8 <lzma_lzma_preset@@XZ_5.0+0xba8>
   13998:	add	x2, x19, x9, lsl #2
   1399c:	add	x2, x2, #0x10, lsl #12
   139a0:	ldr	w3, [x2, #592]
   139a4:	sub	w3, w3, #0x1
   139a8:	str	w3, [x2, #592]
   139ac:	cbz	w3, 14090 <lzma_lzma_preset@@XZ_5.0+0x1280>
   139b0:	ldr	x4, [x19, #24]
   139b4:	mov	w2, w18
   139b8:	cmp	w5, #0x7
   139bc:	mov	w0, #0x8                   	// #8
   139c0:	mov	w1, #0xb                   	// #11
   139c4:	ldr	w7, [x22, #28]
   139c8:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   139cc:	str	w0, [x19, #736]
   139d0:	b	132e0 <lzma_lzma_preset@@XZ_5.0+0x4d0>
   139d4:	str	w11, [x10, #48]
   139d8:	sub	w2, w18, #0xa
   139dc:	str	x0, [x8, #288]
   139e0:	cmp	w2, #0x7
   139e4:	str	x12, [x19, #24]
   139e8:	add	x5, x0, #0x2
   139ec:	add	x7, x6, #0x7
   139f0:	b.hi	13ad8 <lzma_lzma_preset@@XZ_5.0+0xcc8>  // b.pmore
   139f4:	str	wzr, [x10, #52]
   139f8:	lsr	w6, w2, #2
   139fc:	str	x5, [x8, #296]
   13a00:	add	x4, x0, x9, lsl #4
   13a04:	add	w5, w6, #0x2
   13a08:	str	w6, [x10, #56]
   13a0c:	ubfx	x11, x2, #1, #1
   13a10:	add	x6, x4, #0x106
   13a14:	str	x6, [x8, #304]
   13a18:	add	x4, x4, #0x104
   13a1c:	lsl	w6, w5, #1
   13a20:	str	w11, [x10, #60]
   13a24:	add	x6, x4, x6
   13a28:	add	w5, w11, w5, lsl #1
   13a2c:	str	x6, [x8, #312]
   13a30:	and	w2, w2, #0x1
   13a34:	str	w2, [x10, #64]
   13a38:	add	x4, x4, x5, lsl #1
   13a3c:	str	x4, [x8, #320]
   13a40:	str	x7, [x19, #24]
   13a44:	b	13590 <lzma_lzma_preset@@XZ_5.0+0x780>
   13a48:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   13a4c:	ldr	x0, [x0, #4000]
   13a50:	ldrb	w3, [x0, w27, uxtw]
   13a54:	b	135e4 <lzma_lzma_preset@@XZ_5.0+0x7d4>
   13a58:	ldr	w0, [x19, #740]
   13a5c:	add	w1, w1, #0x100
   13a60:	add	x6, x6, #0x2
   13a64:	add	x10, x19, #0x24
   13a68:	add	w0, w7, w0
   13a6c:	add	x9, x19, #0x108
   13a70:	sub	w4, w4, w0
   13a74:	mov	w3, #0x100                 	// #256
   13a78:	mov	w12, #0xffff                	// #65535
   13a7c:	ldrb	w2, [x11, w4, uxtw]
   13a80:	lsl	w2, w2, #1
   13a84:	ubfx	x4, x1, #7, #1
   13a88:	and	w0, w2, w3
   13a8c:	str	w4, [x10, x6, lsl #2]
   13a90:	add	w0, w0, w1, lsr #8
   13a94:	lsl	w1, w1, #1
   13a98:	add	w0, w0, w3
   13a9c:	eon	w11, w2, w1
   13aa0:	mov	x4, x6
   13aa4:	cmp	w1, w12
   13aa8:	add	x0, x8, x0, lsl #1
   13aac:	str	x0, [x9, x6, lsl #3]
   13ab0:	and	w3, w3, w11
   13ab4:	add	x6, x6, #0x1
   13ab8:	b.ls	13a80 <lzma_lzma_preset@@XZ_5.0+0xc70>  // b.plast
   13abc:	str	x4, [x19, #24]
   13ac0:	cmp	w5, #0x9
   13ac4:	b.ls	13ad0 <lzma_lzma_preset@@XZ_5.0+0xcc0>  // b.plast
   13ac8:	sub	w5, w5, #0x6
   13acc:	b	13890 <lzma_lzma_preset@@XZ_5.0+0xa80>
   13ad0:	sub	w5, w5, #0x3
   13ad4:	b	13890 <lzma_lzma_preset@@XZ_5.0+0xa80>
   13ad8:	sub	w4, w18, #0x12
   13adc:	str	w11, [x10, #52]
   13ae0:	str	x5, [x8, #296]
   13ae4:	mov	x12, #0x7406                	// #29702
   13ae8:	ubfx	x2, x4, #7, #1
   13aec:	str	w2, [x10, #56]
   13af0:	add	w2, w2, #0x2
   13af4:	ubfx	x11, x4, #6, #1
   13af8:	add	x5, x19, x12
   13afc:	str	x5, [x8, #304]
   13b00:	ubfiz	x7, x2, #1, #3
   13b04:	add	x5, x0, #0x204
   13b08:	add	w2, w11, w2, lsl #1
   13b0c:	str	w11, [x10, #60]
   13b10:	add	x7, x5, x7
   13b14:	ubfx	x11, x4, #5, #1
   13b18:	str	x7, [x8, #312]
   13b1c:	ubfiz	x7, x2, #1, #5
   13b20:	add	w2, w11, w2, lsl #1
   13b24:	str	w11, [x10, #64]
   13b28:	add	x7, x5, x7
   13b2c:	ubfx	x11, x4, #4, #1
   13b30:	str	x7, [x8, #320]
   13b34:	ubfiz	x7, x2, #1, #7
   13b38:	add	w2, w11, w2, lsl #1
   13b3c:	str	w11, [x10, #68]
   13b40:	add	x7, x5, x7
   13b44:	ubfx	x11, x4, #3, #1
   13b48:	str	x7, [x8, #328]
   13b4c:	ubfiz	x7, x2, #1, #9
   13b50:	add	w2, w11, w2, lsl #1
   13b54:	str	w11, [x10, #72]
   13b58:	add	x7, x5, x7
   13b5c:	ubfx	x11, x4, #2, #1
   13b60:	str	x7, [x8, #336]
   13b64:	ubfiz	x7, x2, #1, #11
   13b68:	add	w2, w11, w2, lsl #1
   13b6c:	str	w11, [x10, #76]
   13b70:	add	x7, x5, x7
   13b74:	ubfx	x11, x4, #1, #1
   13b78:	str	x7, [x8, #344]
   13b7c:	ubfiz	x7, x2, #1, #13
   13b80:	add	w2, w11, w2, lsl #1
   13b84:	str	w11, [x10, #80]
   13b88:	add	x7, x5, x7
   13b8c:	str	x7, [x8, #352]
   13b90:	and	w4, w4, #0x1
   13b94:	ubfiz	x2, x2, #1, #15
   13b98:	str	w4, [x10, #84]
   13b9c:	add	x2, x5, x2
   13ba0:	str	x2, [x8, #360]
   13ba4:	add	x7, x6, #0xc
   13ba8:	str	x7, [x19, #24]
   13bac:	b	13590 <lzma_lzma_preset@@XZ_5.0+0x780>
   13bb0:	sub	w3, w8, #0x6
   13bb4:	lsr	w1, w6, #4
   13bb8:	cmp	w3, #0x2
   13bbc:	sub	w0, w8, #0x5
   13bc0:	b.ls	14948 <lzma_lzma_preset@@XZ_5.0+0x1b38>  // b.plast
   13bc4:	adrp	x5, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13bc8:	dup	v0.4s, w8
   13bcc:	dup	v2.4s, w1
   13bd0:	add	x7, x7, #0x10
   13bd4:	ldr	q1, [x5, #1040]
   13bd8:	lsl	x7, x7, #2
   13bdc:	movi	v3.4s, #0x1
   13be0:	lsr	w5, w0, #2
   13be4:	movi	v4.4s, #0x2
   13be8:	add	x8, x19, x7
   13bec:	add	v1.4s, v0.4s, v1.4s
   13bf0:	cmp	w5, #0x1
   13bf4:	neg	v1.4s, v1.4s
   13bf8:	ushl	v1.4s, v2.4s, v1.4s
   13bfc:	and	v1.16b, v1.16b, v3.16b
   13c00:	add	v1.4s, v1.4s, v4.4s
   13c04:	str	q1, [x19, x7]
   13c08:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13c0c:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13c10:	cmp	w5, #0x2
   13c14:	ldr	q1, [x7, #1056]
   13c18:	add	v1.4s, v0.4s, v1.4s
   13c1c:	neg	v1.4s, v1.4s
   13c20:	ushl	v1.4s, v2.4s, v1.4s
   13c24:	and	v1.16b, v1.16b, v3.16b
   13c28:	add	v1.4s, v1.4s, v4.4s
   13c2c:	str	q1, [x8, #16]
   13c30:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13c34:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13c38:	cmp	w5, #0x3
   13c3c:	ldr	q1, [x7, #1072]
   13c40:	add	v1.4s, v0.4s, v1.4s
   13c44:	neg	v1.4s, v1.4s
   13c48:	ushl	v1.4s, v2.4s, v1.4s
   13c4c:	and	v1.16b, v1.16b, v3.16b
   13c50:	add	v1.4s, v1.4s, v4.4s
   13c54:	str	q1, [x8, #32]
   13c58:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13c5c:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13c60:	cmp	w5, #0x4
   13c64:	ldr	q1, [x7, #1088]
   13c68:	add	v1.4s, v0.4s, v1.4s
   13c6c:	neg	v1.4s, v1.4s
   13c70:	ushl	v1.4s, v2.4s, v1.4s
   13c74:	and	v1.16b, v1.16b, v3.16b
   13c78:	add	v1.4s, v1.4s, v4.4s
   13c7c:	str	q1, [x8, #48]
   13c80:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13c84:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13c88:	cmp	w5, #0x5
   13c8c:	ldr	q1, [x7, #1104]
   13c90:	add	v1.4s, v0.4s, v1.4s
   13c94:	neg	v1.4s, v1.4s
   13c98:	ushl	v1.4s, v2.4s, v1.4s
   13c9c:	and	v1.16b, v1.16b, v3.16b
   13ca0:	add	v1.4s, v1.4s, v4.4s
   13ca4:	str	q1, [x8, #64]
   13ca8:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13cac:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13cb0:	cmp	w5, #0x6
   13cb4:	ldr	q1, [x7, #1120]
   13cb8:	add	v1.4s, v0.4s, v1.4s
   13cbc:	neg	v1.4s, v1.4s
   13cc0:	ushl	v1.4s, v2.4s, v1.4s
   13cc4:	and	v1.16b, v1.16b, v3.16b
   13cc8:	add	v1.4s, v1.4s, v4.4s
   13ccc:	str	q1, [x8, #80]
   13cd0:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13cd4:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13cd8:	cmp	w5, #0x7
   13cdc:	ldr	q1, [x7, #1136]
   13ce0:	add	v1.4s, v0.4s, v1.4s
   13ce4:	neg	v1.4s, v1.4s
   13ce8:	ushl	v1.4s, v2.4s, v1.4s
   13cec:	and	v3.16b, v1.16b, v3.16b
   13cf0:	add	v4.4s, v3.4s, v4.4s
   13cf4:	str	q4, [x8, #96]
   13cf8:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13cfc:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13d00:	cmp	w5, #0x8
   13d04:	movi	v4.4s, #0x1
   13d08:	ldr	q1, [x7, #1152]
   13d0c:	movi	v3.4s, #0x2
   13d10:	add	v1.4s, v0.4s, v1.4s
   13d14:	neg	v1.4s, v1.4s
   13d18:	ushl	v1.4s, v2.4s, v1.4s
   13d1c:	and	v1.16b, v1.16b, v4.16b
   13d20:	add	v1.4s, v1.4s, v3.4s
   13d24:	str	q1, [x8, #112]
   13d28:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13d2c:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13d30:	cmp	w5, #0x9
   13d34:	ldr	q1, [x7, #1168]
   13d38:	add	v1.4s, v0.4s, v1.4s
   13d3c:	neg	v1.4s, v1.4s
   13d40:	ushl	v1.4s, v2.4s, v1.4s
   13d44:	and	v1.16b, v1.16b, v4.16b
   13d48:	add	v1.4s, v1.4s, v3.4s
   13d4c:	str	q1, [x8, #128]
   13d50:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13d54:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13d58:	cmp	w5, #0xa
   13d5c:	ldr	q1, [x7, #1184]
   13d60:	add	v1.4s, v0.4s, v1.4s
   13d64:	neg	v1.4s, v1.4s
   13d68:	ushl	v1.4s, v2.4s, v1.4s
   13d6c:	and	v1.16b, v1.16b, v4.16b
   13d70:	add	v1.4s, v1.4s, v3.4s
   13d74:	str	q1, [x8, #144]
   13d78:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13d7c:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13d80:	cmp	w5, #0xb
   13d84:	ldr	q1, [x7, #1200]
   13d88:	add	v1.4s, v0.4s, v1.4s
   13d8c:	neg	v1.4s, v1.4s
   13d90:	ushl	v1.4s, v2.4s, v1.4s
   13d94:	and	v1.16b, v1.16b, v4.16b
   13d98:	add	v1.4s, v1.4s, v3.4s
   13d9c:	str	q1, [x8, #160]
   13da0:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13da4:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13da8:	cmp	w5, #0xc
   13dac:	ldr	q1, [x7, #1216]
   13db0:	add	v1.4s, v0.4s, v1.4s
   13db4:	neg	v1.4s, v1.4s
   13db8:	ushl	v1.4s, v2.4s, v1.4s
   13dbc:	and	v1.16b, v1.16b, v4.16b
   13dc0:	add	v1.4s, v1.4s, v3.4s
   13dc4:	str	q1, [x8, #176]
   13dc8:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13dcc:	adrp	x7, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13dd0:	cmp	w5, #0xd
   13dd4:	ldr	q1, [x7, #1232]
   13dd8:	add	v1.4s, v0.4s, v1.4s
   13ddc:	neg	v1.4s, v1.4s
   13de0:	ushl	v1.4s, v2.4s, v1.4s
   13de4:	and	v1.16b, v1.16b, v4.16b
   13de8:	add	v1.4s, v1.4s, v3.4s
   13dec:	str	q1, [x8, #192]
   13df0:	b.eq	13e18 <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
   13df4:	adrp	x5, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   13df8:	ldr	q1, [x5, #1248]
   13dfc:	add	v0.4s, v0.4s, v1.4s
   13e00:	neg	v0.4s, v0.4s
   13e04:	ushl	v0.4s, v2.4s, v0.4s
   13e08:	and	v0.16b, v0.16b, v4.16b
   13e0c:	add	v0.4s, v0.4s, v3.4s
   13e10:	str	q0, [x8, #208]
   13e14:	nop
   13e18:	and	x5, x0, #0xfffffffc
   13e1c:	tst	x0, #0x3
   13e20:	add	x5, x5, x4
   13e24:	and	w0, w0, #0x3
   13e28:	b.eq	13e74 <lzma_lzma_preset@@XZ_5.0+0x1064>  // b.none
   13e2c:	add	x5, x19, x5, lsl #2
   13e30:	sub	w8, w0, #0x1
   13e34:	lsr	w7, w1, w8
   13e38:	and	w7, w7, #0x1
   13e3c:	add	w7, w7, #0x2
   13e40:	str	w7, [x5, #40]
   13e44:	cbz	w8, 13e74 <lzma_lzma_preset@@XZ_5.0+0x1064>
   13e48:	sub	w8, w0, #0x2
   13e4c:	lsr	w7, w1, w8
   13e50:	and	w7, w7, #0x1
   13e54:	add	w7, w7, #0x2
   13e58:	str	w7, [x5, #44]
   13e5c:	cbz	w8, 13e74 <lzma_lzma_preset@@XZ_5.0+0x1064>
   13e60:	sub	w0, w0, #0x3
   13e64:	lsr	w0, w1, w0
   13e68:	and	w0, w0, #0x1
   13e6c:	add	w0, w0, #0x2
   13e70:	str	w0, [x5, #48]
   13e74:	add	x4, x4, w3, uxtw
   13e78:	and	w9, w6, #0x1
   13e7c:	add	w0, w9, #0x2
   13e80:	ubfx	x10, x6, #1, #1
   13e84:	add	x7, x19, x4, lsl #2
   13e88:	add	x5, x19, x4, lsl #3
   13e8c:	mov	x17, #0x71e2                	// #29154
   13e90:	add	x1, x19, x17
   13e94:	ubfiz	x8, x0, #1, #3
   13e98:	mov	x30, #0x71e0                	// #29152
   13e9c:	str	w9, [x7, #44]
   13ea0:	add	x3, x19, x30
   13ea4:	str	x1, [x5, #280]
   13ea8:	add	w0, w10, w0, lsl #1
   13eac:	str	w10, [x7, #48]
   13eb0:	ubfx	x9, x6, #2, #1
   13eb4:	add	x8, x3, x8
   13eb8:	str	x8, [x5, #288]
   13ebc:	add	w1, w9, w0, lsl #1
   13ec0:	ubfiz	x0, x0, #1, #5
   13ec4:	str	w9, [x7, #52]
   13ec8:	add	x0, x3, x0
   13ecc:	str	x0, [x5, #296]
   13ed0:	ubfx	x0, x6, #3, #1
   13ed4:	ubfiz	x6, x1, #1, #7
   13ed8:	add	x1, x19, #0x10, lsl #12
   13edc:	str	w0, [x7, #56]
   13ee0:	add	x3, x3, x6
   13ee4:	str	x3, [x5, #304]
   13ee8:	add	x4, x4, #0x5
   13eec:	ldr	w0, [x1, #3800]
   13ef0:	str	x4, [x19, #24]
   13ef4:	add	w0, w0, #0x1
   13ef8:	str	w0, [x1, #3800]
   13efc:	b	13734 <lzma_lzma_preset@@XZ_5.0+0x924>
   13f00:	add	x6, x19, x4, lsl #2
   13f04:	add	x3, x19, x4, lsl #3
   13f08:	mov	w10, #0x1                   	// #1
   13f0c:	sub	w2, w18, #0xa
   13f10:	cmp	w2, #0x7
   13f14:	add	x11, x0, #0x2
   13f18:	str	w10, [x6, #40]
   13f1c:	add	x12, x4, #0x5
   13f20:	str	x0, [x3, #272]
   13f24:	str	x8, [x19, #24]
   13f28:	b.hi	13fb8 <lzma_lzma_preset@@XZ_5.0+0x11a8>  // b.pmore
   13f2c:	str	wzr, [x6, #44]
   13f30:	lsr	w10, w2, #2
   13f34:	str	x11, [x3, #280]
   13f38:	add	w8, w10, #0x2
   13f3c:	add	x4, x0, x9, lsl #4
   13f40:	str	w10, [x6, #48]
   13f44:	ubfx	x11, x2, #1, #1
   13f48:	add	x10, x4, #0x106
   13f4c:	str	x10, [x3, #288]
   13f50:	add	x4, x4, #0x104
   13f54:	lsl	w10, w8, #1
   13f58:	str	w11, [x6, #52]
   13f5c:	add	x10, x4, x10
   13f60:	add	w8, w11, w8, lsl #1
   13f64:	str	x10, [x3, #296]
   13f68:	and	w2, w2, #0x1
   13f6c:	str	w2, [x6, #56]
   13f70:	add	x4, x4, x8, lsl #1
   13f74:	str	x4, [x3, #304]
   13f78:	mov	x4, x12
   13f7c:	str	x12, [x19, #24]
   13f80:	b	13990 <lzma_lzma_preset@@XZ_5.0+0xb80>
   13f84:	ldr	x0, [x0, #4000]
   13f88:	lsr	w1, w27, #12
   13f8c:	ldrb	w0, [x0, w1, uxtw]
   13f90:	add	w3, w0, #0x18
   13f94:	b	135e4 <lzma_lzma_preset@@XZ_5.0+0x7d4>
   13f98:	str	wzr, [x10, #52]
   13f9c:	str	x7, [x8, #296]
   13fa0:	str	x4, [x19, #24]
   13fa4:	b	138fc <lzma_lzma_preset@@XZ_5.0+0xaec>
   13fa8:	bl	12f18 <lzma_lzma_preset@@XZ_5.0+0x108>
   13fac:	ldr	w2, [sp, #104]
   13fb0:	ldr	x7, [x19, #24]
   13fb4:	b	135b8 <lzma_lzma_preset@@XZ_5.0+0x7a8>
   13fb8:	sub	w8, w18, #0x12
   13fbc:	str	w10, [x6, #44]
   13fc0:	str	x11, [x3, #280]
   13fc4:	mov	x14, #0xbc4e                	// #48206
   13fc8:	ubfx	x2, x8, #7, #1
   13fcc:	str	w2, [x6, #48]
   13fd0:	add	w2, w2, #0x2
   13fd4:	ubfx	x12, x8, #6, #1
   13fd8:	add	x10, x19, x14
   13fdc:	str	x10, [x3, #288]
   13fe0:	ubfiz	x11, x2, #1, #3
   13fe4:	add	x10, x0, #0x204
   13fe8:	add	w2, w12, w2, lsl #1
   13fec:	str	w12, [x6, #52]
   13ff0:	add	x11, x10, x11
   13ff4:	ubfx	x12, x8, #5, #1
   13ff8:	str	x11, [x3, #296]
   13ffc:	ubfiz	x11, x2, #1, #5
   14000:	add	w2, w12, w2, lsl #1
   14004:	str	w12, [x6, #56]
   14008:	add	x11, x10, x11
   1400c:	ubfx	x12, x8, #4, #1
   14010:	str	x11, [x3, #304]
   14014:	ubfiz	x11, x2, #1, #7
   14018:	add	w2, w12, w2, lsl #1
   1401c:	str	w12, [x6, #60]
   14020:	add	x11, x10, x11
   14024:	ubfx	x12, x8, #3, #1
   14028:	str	x11, [x3, #312]
   1402c:	ubfiz	x11, x2, #1, #9
   14030:	add	w2, w12, w2, lsl #1
   14034:	str	w12, [x6, #64]
   14038:	add	x11, x10, x11
   1403c:	ubfx	x12, x8, #2, #1
   14040:	str	x11, [x3, #320]
   14044:	ubfiz	x11, x2, #1, #11
   14048:	add	w2, w12, w2, lsl #1
   1404c:	str	w12, [x6, #68]
   14050:	add	x11, x10, x11
   14054:	ubfx	x12, x8, #1, #1
   14058:	str	x11, [x3, #328]
   1405c:	ubfiz	x11, x2, #1, #13
   14060:	add	w2, w12, w2, lsl #1
   14064:	str	w12, [x6, #72]
   14068:	add	x11, x10, x11
   1406c:	str	x11, [x3, #336]
   14070:	and	w8, w8, #0x1
   14074:	ubfiz	x2, x2, #1, #15
   14078:	str	w8, [x6, #76]
   1407c:	add	x2, x10, x2
   14080:	str	x2, [x3, #344]
   14084:	add	x4, x4, #0xa
   14088:	str	x4, [x19, #24]
   1408c:	b	13990 <lzma_lzma_preset@@XZ_5.0+0xb80>
   14090:	bl	12f18 <lzma_lzma_preset@@XZ_5.0+0x108>
   14094:	ldr	w5, [x19, #736]
   14098:	ldr	w2, [sp, #104]
   1409c:	ldr	x4, [x19, #24]
   140a0:	b	139b8 <lzma_lzma_preset@@XZ_5.0+0xba8>
   140a4:	ldrb	w0, [x19, #2958]
   140a8:	cbnz	w0, 1415c <lzma_lzma_preset@@XZ_5.0+0x134c>
   140ac:	mov	w0, #0x1                   	// #1
   140b0:	mov	x1, #0x0                   	// #0
   140b4:	strb	w0, [x19, #2958]
   140b8:	movi	v0.4s, #0x4
   140bc:	add	x4, x19, x1, lsl #2
   140c0:	mov	w3, #0x4                   	// #4
   140c4:	add	x1, x1, #0x5
   140c8:	ldr	x0, [x19, #32]
   140cc:	str	w3, [x4, #56]
   140d0:	stur	q0, [x4, #40]
   140d4:	cmp	x1, x0
   140d8:	str	x1, [x19, #24]
   140dc:	b.ls	14158 <lzma_lzma_preset@@XZ_5.0+0x1348>  // b.plast
   140e0:	ldr	w2, [x19, #16]
   140e4:	mov	w4, #0xffffff              	// #16777215
   140e8:	mov	w6, #0xfeffffff            	// #-16777217
   140ec:	mov	w3, #0xffffffff            	// #-1
   140f0:	mov	w7, #0x800                 	// #2048
   140f4:	cmp	w2, w4
   140f8:	b.ls	14378 <lzma_lzma_preset@@XZ_5.0+0x1568>  // b.plast
   140fc:	add	x1, x19, x0, lsl #2
   14100:	ldr	w1, [x1, #40]
   14104:	cmp	w1, #0x2
   14108:	b.eq	143b4 <lzma_lzma_preset@@XZ_5.0+0x15a4>  // b.none
   1410c:	b.hi	142a4 <lzma_lzma_preset@@XZ_5.0+0x1494>  // b.pmore
   14110:	cbz	w1, 14420 <lzma_lzma_preset@@XZ_5.0+0x1610>
   14114:	add	x5, x0, #0x22
   14118:	lsr	w1, w2, #11
   1411c:	ldr	x10, [x19]
   14120:	ldr	x8, [x19, x5, lsl #3]
   14124:	ldrh	w5, [x8]
   14128:	sub	w9, w5, w5, lsr #5
   1412c:	mul	w1, w1, w5
   14130:	sub	w2, w2, w1
   14134:	str	w2, [x19, #16]
   14138:	add	x1, x10, w1, uxtw
   1413c:	str	x1, [x19]
   14140:	strh	w9, [x8]
   14144:	ldr	x1, [x19, #24]
   14148:	add	x0, x0, #0x1
   1414c:	str	x0, [x19, #32]
   14150:	cmp	x0, x1
   14154:	b.cc	140f4 <lzma_lzma_preset@@XZ_5.0+0x12e4>  // b.lo, b.ul, b.last
   14158:	stp	xzr, xzr, [x19, #24]
   1415c:	mov	w0, #0x1                   	// #1
   14160:	strb	wzr, [x19, #2958]
   14164:	ldp	x19, x20, [sp, #16]
   14168:	ldp	x21, x22, [sp, #32]
   1416c:	ldp	x23, x24, [sp, #48]
   14170:	ldp	x25, x26, [sp, #64]
   14174:	ldr	x27, [sp, #80]
   14178:	ldp	x29, x30, [sp], #112
   1417c:	ret
   14180:	ldr	w0, [x1, #32]
   14184:	cmp	w0, w26
   14188:	b.eq	14950 <lzma_lzma_preset@@XZ_5.0+0x1b40>  // b.none
   1418c:	ldr	x2, [x22, #56]
   14190:	str	x27, [sp, #80]
   14194:	mov	x0, x22
   14198:	mov	w1, #0x1                   	// #1
   1419c:	blr	x2
   141a0:	str	wzr, [x22, #28]
   141a4:	ldr	x4, [x19, #24]
   141a8:	mov	x18, #0x6b9c                	// #27548
   141ac:	ldr	x2, [x22]
   141b0:	add	x0, x19, x18
   141b4:	add	x5, x19, x4, lsl #2
   141b8:	add	x3, x19, x4, lsl #3
   141bc:	add	x7, x4, #0x1
   141c0:	add	x6, x19, #0xb9e
   141c4:	add	x1, x19, #0xb9c
   141c8:	ldr	w26, [x22, #24]
   141cc:	str	wzr, [x5, #40]
   141d0:	add	x4, x4, #0x9
   141d4:	str	x0, [x3, #272]
   141d8:	str	x7, [x19, #24]
   141dc:	ldrb	w2, [x2]
   141e0:	and	w7, w2, #0x1
   141e4:	lsr	w0, w2, #7
   141e8:	str	w0, [x5, #44]
   141ec:	add	w0, w0, #0x2
   141f0:	ubfx	x9, x2, #6, #1
   141f4:	str	x6, [x3, #280]
   141f8:	ubfx	x8, x2, #5, #1
   141fc:	ubfiz	x6, x0, #1, #3
   14200:	add	w0, w9, w0, lsl #1
   14204:	str	w9, [x5, #48]
   14208:	add	x6, x1, x6
   1420c:	str	x6, [x3, #288]
   14210:	add	w6, w8, w0, lsl #1
   14214:	ubfiz	x0, x0, #1, #5
   14218:	str	w8, [x5, #52]
   1421c:	add	x0, x1, x0
   14220:	ubfx	x8, x2, #4, #1
   14224:	str	x0, [x3, #296]
   14228:	add	w0, w8, w6, lsl #1
   1422c:	ubfiz	x6, x6, #1, #7
   14230:	str	w8, [x5, #56]
   14234:	add	x6, x1, x6
   14238:	ubfx	x8, x2, #3, #1
   1423c:	str	x6, [x3, #304]
   14240:	add	w6, w8, w0, lsl #1
   14244:	ubfiz	x0, x0, #1, #9
   14248:	str	w8, [x5, #60]
   1424c:	add	x0, x1, x0
   14250:	ubfx	x8, x2, #2, #1
   14254:	str	x0, [x3, #312]
   14258:	add	w0, w8, w6, lsl #1
   1425c:	ubfiz	x6, x6, #1, #11
   14260:	str	w8, [x5, #64]
   14264:	add	x6, x1, x6
   14268:	ubfx	x2, x2, #1, #1
   1426c:	str	x6, [x3, #320]
   14270:	add	w6, w2, w0, lsl #1
   14274:	ubfiz	x0, x0, #1, #13
   14278:	str	w2, [x5, #68]
   1427c:	add	x0, x1, x0
   14280:	str	x0, [x3, #328]
   14284:	ubfiz	x0, x6, #1, #15
   14288:	str	w7, [x5, #72]
   1428c:	add	x1, x1, x0
   14290:	str	x1, [x3, #336]
   14294:	str	x4, [x19, #24]
   14298:	mov	w0, #0x1                   	// #1
   1429c:	strb	w0, [x19, #2957]
   142a0:	b	1310c <lzma_lzma_preset@@XZ_5.0+0x2fc>
   142a4:	cmp	w1, #0x3
   142a8:	b.eq	14404 <lzma_lzma_preset@@XZ_5.0+0x15f4>  // b.none
   142ac:	cmp	w1, #0x4
   142b0:	b.ne	14144 <lzma_lzma_preset@@XZ_5.0+0x1334>  // b.any
   142b4:	mov	w2, #0xffffffff            	// #-1
   142b8:	mov	w5, #0xfeffffff            	// #-16777217
   142bc:	mov	w3, w2
   142c0:	str	w2, [x19, #16]
   142c4:	ldr	x1, [x19]
   142c8:	b	142f8 <lzma_lzma_preset@@XZ_5.0+0x14e8>
   142cc:	cmp	xzr, x1, lsr #32
   142d0:	b.ne	14300 <lzma_lzma_preset@@XZ_5.0+0x14f0>  // b.any
   142d4:	ldr	x2, [x19, #8]
   142d8:	add	x2, x2, #0x1
   142dc:	ldr	x4, [x19, #24]
   142e0:	add	x0, x0, #0x1
   142e4:	lsl	w1, w1, #8
   142e8:	stp	x1, x2, [x19]
   142ec:	cmp	x0, x4
   142f0:	str	x0, [x19, #32]
   142f4:	b.cs	1496c <lzma_lzma_preset@@XZ_5.0+0x1b5c>  // b.hs, b.nlast
   142f8:	cmp	w1, w5
   142fc:	b.hi	142cc <lzma_lzma_preset@@XZ_5.0+0x14bc>  // b.pmore
   14300:	ldr	x0, [x20]
   14304:	b	14338 <lzma_lzma_preset@@XZ_5.0+0x1528>
   14308:	ldrb	w1, [x19, #20]
   1430c:	ldr	w2, [x19, #4]
   14310:	add	w1, w1, w2
   14314:	strb	w1, [x24, x0]
   14318:	strb	w3, [x19, #20]
   1431c:	ldr	x0, [x20]
   14320:	ldr	x1, [x19, #8]
   14324:	add	x0, x0, #0x1
   14328:	str	x0, [x20]
   1432c:	sub	x1, x1, #0x1
   14330:	str	x1, [x19, #8]
   14334:	cbz	x1, 14360 <lzma_lzma_preset@@XZ_5.0+0x1550>
   14338:	cmp	x23, x0
   1433c:	b.ne	14308 <lzma_lzma_preset@@XZ_5.0+0x14f8>  // b.any
   14340:	ldr	x27, [sp, #80]
   14344:	mov	w0, #0x0                   	// #0
   14348:	ldp	x19, x20, [sp, #16]
   1434c:	ldp	x21, x22, [sp, #32]
   14350:	ldp	x23, x24, [sp, #48]
   14354:	ldp	x25, x26, [sp, #64]
   14358:	ldp	x29, x30, [sp], #112
   1435c:	ret
   14360:	ldr	x1, [x19]
   14364:	mov	x2, #0x1                   	// #1
   14368:	ldr	x0, [x19, #32]
   1436c:	lsr	x4, x1, #24
   14370:	strb	w4, [x19, #20]
   14374:	b	142dc <lzma_lzma_preset@@XZ_5.0+0x14cc>
   14378:	ldr	x1, [x19]
   1437c:	cmp	w1, w6
   14380:	b.ls	143c0 <lzma_lzma_preset@@XZ_5.0+0x15b0>  // b.plast
   14384:	cmp	xzr, x1, lsr #32
   14388:	b.ne	143c0 <lzma_lzma_preset@@XZ_5.0+0x15b0>  // b.any
   1438c:	ldr	x5, [x19, #8]
   14390:	add	x5, x5, #0x1
   14394:	lsl	w1, w1, #8
   14398:	stp	x1, x5, [x19]
   1439c:	add	x1, x19, x0, lsl #2
   143a0:	lsl	w2, w2, #8
   143a4:	str	w2, [x19, #16]
   143a8:	ldr	w1, [x1, #40]
   143ac:	cmp	w1, #0x2
   143b0:	b.ne	1410c <lzma_lzma_preset@@XZ_5.0+0x12fc>  // b.any
   143b4:	lsr	w2, w2, #1
   143b8:	str	w2, [x19, #16]
   143bc:	b	14144 <lzma_lzma_preset@@XZ_5.0+0x1334>
   143c0:	ldr	x0, [x20]
   143c4:	b	143f8 <lzma_lzma_preset@@XZ_5.0+0x15e8>
   143c8:	ldrb	w1, [x19, #20]
   143cc:	ldr	w2, [x19, #4]
   143d0:	add	w1, w1, w2
   143d4:	strb	w1, [x24, x0]
   143d8:	strb	w3, [x19, #20]
   143dc:	ldr	x0, [x20]
   143e0:	ldr	x1, [x19, #8]
   143e4:	add	x0, x0, #0x1
   143e8:	str	x0, [x20]
   143ec:	sub	x1, x1, #0x1
   143f0:	str	x1, [x19, #8]
   143f4:	cbz	x1, 14448 <lzma_lzma_preset@@XZ_5.0+0x1638>
   143f8:	cmp	x23, x0
   143fc:	b.ne	143c8 <lzma_lzma_preset@@XZ_5.0+0x15b8>  // b.any
   14400:	b	14340 <lzma_lzma_preset@@XZ_5.0+0x1530>
   14404:	ldr	x1, [x19]
   14408:	lsr	w5, w2, #1
   1440c:	mov	x2, x5
   14410:	str	w5, [x19, #16]
   14414:	add	x1, x1, x5
   14418:	str	x1, [x19]
   1441c:	b	14144 <lzma_lzma_preset@@XZ_5.0+0x1334>
   14420:	add	x1, x0, #0x22
   14424:	lsr	w2, w2, #11
   14428:	ldr	x8, [x19, x1, lsl #3]
   1442c:	ldrh	w5, [x8]
   14430:	sub	w1, w7, w5
   14434:	mul	w2, w2, w5
   14438:	add	w1, w5, w1, lsr #5
   1443c:	str	w2, [x19, #16]
   14440:	strh	w1, [x8]
   14444:	b	14144 <lzma_lzma_preset@@XZ_5.0+0x1334>
   14448:	ldr	x1, [x19]
   1444c:	mov	x5, #0x1                   	// #1
   14450:	ldr	w2, [x19, #16]
   14454:	ldr	x0, [x19, #32]
   14458:	lsr	x8, x1, #24
   1445c:	strb	w8, [x19, #20]
   14460:	b	14394 <lzma_lzma_preset@@XZ_5.0+0x1584>
   14464:	ldrb	w0, [x19, #2958]
   14468:	cbnz	w0, 1415c <lzma_lzma_preset@@XZ_5.0+0x134c>
   1446c:	mov	w0, #0x1                   	// #1
   14470:	strb	w0, [x19, #2958]
   14474:	cmn	w21, #0x1
   14478:	mov	x1, #0x0                   	// #0
   1447c:	b.ne	140b8 <lzma_lzma_preset@@XZ_5.0+0x12a8>  // b.any
   14480:	ldr	w3, [x19, #736]
   14484:	mov	x2, #0x4                   	// #4
   14488:	ldr	w4, [x19, #2960]
   1448c:	mov	x14, #0x35ce                	// #13774
   14490:	mov	x13, #0x7200                	// #29184
   14494:	ldrb	w7, [x19, #2956]
   14498:	and	w1, w26, w4
   1449c:	ubfiz	x5, x3, #4, #32
   144a0:	and	w26, w26, w4
   144a4:	add	x5, x5, x14
   144a8:	add	x0, x19, x13
   144ac:	ubfiz	x4, x3, #1, #32
   144b0:	add	x5, x5, x26
   144b4:	add	x2, x2, w1, uxtw #4
   144b8:	add	x2, x0, x2
   144bc:	cmp	w3, #0x7
   144c0:	mov	x15, #0x6d1c                	// #27932
   144c4:	mov	w3, #0xa                   	// #10
   144c8:	add	x4, x4, x15
   144cc:	add	x9, x2, #0x2
   144d0:	add	x8, x2, #0x4
   144d4:	add	x4, x19, x4
   144d8:	add	x5, x19, x5, lsl #1
   144dc:	add	x2, x2, #0x8
   144e0:	mov	w6, #0x7                   	// #7
   144e4:	mov	x10, #0x1                   	// #1
   144e8:	csel	w6, w6, w3, cc  // cc = lo, ul, last
   144ec:	mov	x3, #0x6                   	// #6
   144f0:	str	x3, [x19, #24]
   144f4:	str	x10, [x19, #40]
   144f8:	str	wzr, [x19, #48]
   144fc:	stur	xzr, [x19, #52]
   14500:	str	wzr, [x19, #60]
   14504:	stp	x5, x4, [x19, #272]
   14508:	stp	x0, x9, [x19, #288]
   1450c:	stp	x8, x2, [x19, #304]
   14510:	str	w6, [x19, #736]
   14514:	cbnz	w7, 14530 <lzma_lzma_preset@@XZ_5.0+0x1720>
   14518:	add	x26, x19, x26, lsl #2
   1451c:	add	x2, x26, #0x8, lsl #12
   14520:	ldr	w4, [x2, #14856]
   14524:	sub	w4, w4, #0x1
   14528:	str	w4, [x2, #14856]
   1452c:	cbz	w4, 1498c <lzma_lzma_preset@@XZ_5.0+0x1b7c>
   14530:	adrp	x0, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   14534:	adrp	x1, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14538:	mov	x12, #0x6efc                	// #28412
   1453c:	add	x4, x19, x12
   14540:	ldr	x0, [x0, #4000]
   14544:	adrp	x12, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14548:	ldr	q3, [x1, #1040]
   1454c:	adrp	x1, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14550:	mov	x11, #0x6efe                	// #28414
   14554:	add	x8, x19, x11
   14558:	ldr	q2, [x1, #1056]
   1455c:	add	x7, x19, x3, lsl #2
   14560:	ldrb	w1, [x0, #255]
   14564:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14568:	ldr	q0, [x12, #1088]
   1456c:	add	w1, w1, #0x30
   14570:	ldr	q1, [x0, #1072]
   14574:	lsr	w0, w1, #1
   14578:	and	w11, w1, #0x1
   1457c:	sub	w5, w0, #0x1
   14580:	dup	v5.4s, w0
   14584:	orr	w2, w11, #0x2
   14588:	ubfx	x9, x1, #5, #1
   1458c:	str	w9, [x7, #40]
   14590:	lsl	w2, w2, w5
   14594:	mvn	w2, w2
   14598:	add	w5, w9, #0x2
   1459c:	add	x6, x19, x3, lsl #3
   145a0:	add	v3.4s, v5.4s, v3.4s
   145a4:	lsr	w9, w2, #4
   145a8:	add	v2.4s, v5.4s, v2.4s
   145ac:	ubfx	x12, x1, #4, #1
   145b0:	add	v1.4s, v5.4s, v1.4s
   145b4:	str	x8, [x6, #272]
   145b8:	add	v0.4s, v5.4s, v0.4s
   145bc:	ubfiz	x8, x5, #1, #3
   145c0:	dup	v4.4s, w9
   145c4:	add	w5, w12, w5, lsl #1
   145c8:	neg	v3.4s, v3.4s
   145cc:	str	w12, [x7, #44]
   145d0:	neg	v2.4s, v2.4s
   145d4:	ubfx	x12, x1, #3, #1
   145d8:	neg	v1.4s, v1.4s
   145dc:	add	x8, x4, x8
   145e0:	neg	v0.4s, v0.4s
   145e4:	str	x8, [x6, #280]
   145e8:	movi	v7.4s, #0x1
   145ec:	add	w8, w12, w5, lsl #1
   145f0:	ushl	v3.4s, v4.4s, v3.4s
   145f4:	ubfiz	x5, x5, #1, #5
   145f8:	ushl	v2.4s, v4.4s, v2.4s
   145fc:	str	w12, [x7, #48]
   14600:	ushl	v1.4s, v4.4s, v1.4s
   14604:	add	x5, x4, x5
   14608:	ushl	v0.4s, v4.4s, v0.4s
   1460c:	ubfx	x12, x1, #2, #1
   14610:	str	x5, [x6, #288]
   14614:	add	w5, w12, w8, lsl #1
   14618:	movi	v6.4s, #0x2
   1461c:	ubfiz	x8, x8, #1, #7
   14620:	and	v3.16b, v3.16b, v7.16b
   14624:	str	w12, [x7, #52]
   14628:	ubfx	x1, x1, #1, #1
   1462c:	add	x8, x4, x8
   14630:	and	v2.16b, v2.16b, v7.16b
   14634:	str	x8, [x6, #296]
   14638:	and	v1.16b, v1.16b, v7.16b
   1463c:	add	w8, w1, w5, lsl #1
   14640:	and	v0.16b, v0.16b, v7.16b
   14644:	ubfiz	x5, x5, #1, #9
   14648:	str	w1, [x7, #56]
   1464c:	add	x10, x3, #0x10
   14650:	add	x1, x4, x5
   14654:	str	x1, [x6, #304]
   14658:	add	v3.4s, v3.4s, v6.4s
   1465c:	ubfiz	x1, x8, #1, #11
   14660:	str	w11, [x7, #60]
   14664:	add	x4, x4, x1
   14668:	lsl	x7, x10, #2
   1466c:	str	x4, [x6, #312]
   14670:	add	v2.4s, v2.4s, v6.4s
   14674:	add	x4, x19, x7
   14678:	add	v1.4s, v1.4s, v6.4s
   1467c:	add	x3, x3, #0x6
   14680:	add	v0.4s, v0.4s, v6.4s
   14684:	str	x3, [x19, #24]
   14688:	sub	w5, w0, #0x5
   1468c:	sub	w1, w0, #0x6
   14690:	str	q3, [x19, x7]
   14694:	lsr	w0, w5, #2
   14698:	stp	q2, q1, [x4, #16]
   1469c:	cmp	w0, #0x4
   146a0:	str	q0, [x4, #48]
   146a4:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   146a8:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   146ac:	cmp	w0, #0x5
   146b0:	ldr	q0, [x6, #1104]
   146b4:	add	v0.4s, v5.4s, v0.4s
   146b8:	neg	v0.4s, v0.4s
   146bc:	ushl	v0.4s, v4.4s, v0.4s
   146c0:	and	v0.16b, v0.16b, v7.16b
   146c4:	add	v0.4s, v0.4s, v6.4s
   146c8:	str	q0, [x4, #64]
   146cc:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   146d0:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   146d4:	cmp	w0, #0x6
   146d8:	ldr	q0, [x6, #1120]
   146dc:	add	v0.4s, v5.4s, v0.4s
   146e0:	neg	v0.4s, v0.4s
   146e4:	ushl	v0.4s, v4.4s, v0.4s
   146e8:	and	v0.16b, v0.16b, v7.16b
   146ec:	add	v0.4s, v0.4s, v6.4s
   146f0:	str	q0, [x4, #80]
   146f4:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   146f8:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   146fc:	cmp	w0, #0x7
   14700:	ldr	q0, [x6, #1136]
   14704:	add	v0.4s, v5.4s, v0.4s
   14708:	neg	v0.4s, v0.4s
   1470c:	ushl	v0.4s, v4.4s, v0.4s
   14710:	and	v0.16b, v0.16b, v7.16b
   14714:	add	v0.4s, v0.4s, v6.4s
   14718:	str	q0, [x4, #96]
   1471c:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   14720:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14724:	cmp	w0, #0x8
   14728:	ldr	q0, [x6, #1152]
   1472c:	add	v0.4s, v5.4s, v0.4s
   14730:	neg	v0.4s, v0.4s
   14734:	ushl	v0.4s, v4.4s, v0.4s
   14738:	and	v0.16b, v0.16b, v7.16b
   1473c:	add	v0.4s, v0.4s, v6.4s
   14740:	str	q0, [x4, #112]
   14744:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   14748:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   1474c:	cmp	w0, #0x9
   14750:	ldr	q0, [x6, #1168]
   14754:	add	v0.4s, v5.4s, v0.4s
   14758:	neg	v0.4s, v0.4s
   1475c:	ushl	v0.4s, v4.4s, v0.4s
   14760:	and	v0.16b, v0.16b, v7.16b
   14764:	add	v0.4s, v0.4s, v6.4s
   14768:	str	q0, [x4, #128]
   1476c:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   14770:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14774:	cmp	w0, #0xa
   14778:	ldr	q0, [x6, #1184]
   1477c:	add	v0.4s, v5.4s, v0.4s
   14780:	neg	v0.4s, v0.4s
   14784:	ushl	v0.4s, v4.4s, v0.4s
   14788:	and	v0.16b, v0.16b, v7.16b
   1478c:	add	v0.4s, v0.4s, v6.4s
   14790:	str	q0, [x4, #144]
   14794:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   14798:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   1479c:	cmp	w0, #0xb
   147a0:	ldr	q0, [x6, #1200]
   147a4:	add	v0.4s, v5.4s, v0.4s
   147a8:	neg	v0.4s, v0.4s
   147ac:	ushl	v0.4s, v4.4s, v0.4s
   147b0:	and	v0.16b, v0.16b, v7.16b
   147b4:	add	v0.4s, v0.4s, v6.4s
   147b8:	str	q0, [x4, #160]
   147bc:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   147c0:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   147c4:	cmp	w0, #0xc
   147c8:	ldr	q0, [x6, #1216]
   147cc:	add	v0.4s, v5.4s, v0.4s
   147d0:	neg	v0.4s, v0.4s
   147d4:	ushl	v0.4s, v4.4s, v0.4s
   147d8:	and	v0.16b, v0.16b, v7.16b
   147dc:	add	v0.4s, v0.4s, v6.4s
   147e0:	str	q0, [x4, #176]
   147e4:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   147e8:	adrp	x6, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   147ec:	cmp	w0, #0xd
   147f0:	ldr	q0, [x6, #1232]
   147f4:	add	v0.4s, v5.4s, v0.4s
   147f8:	neg	v0.4s, v0.4s
   147fc:	ushl	v0.4s, v4.4s, v0.4s
   14800:	and	v7.16b, v0.16b, v7.16b
   14804:	add	v6.4s, v7.4s, v6.4s
   14808:	str	q6, [x4, #192]
   1480c:	b.eq	14838 <lzma_lzma_preset@@XZ_5.0+0x1a28>  // b.none
   14810:	movi	v2.4s, #0x1
   14814:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14818:	movi	v1.4s, #0x2
   1481c:	ldr	q0, [x0, #1248]
   14820:	add	v0.4s, v5.4s, v0.4s
   14824:	neg	v0.4s, v0.4s
   14828:	ushl	v0.4s, v4.4s, v0.4s
   1482c:	and	v0.16b, v0.16b, v2.16b
   14830:	add	v0.4s, v0.4s, v1.4s
   14834:	str	q0, [x4, #208]
   14838:	and	x4, x5, #0xfffffffc
   1483c:	tst	x5, #0x3
   14840:	add	x4, x4, x3
   14844:	and	w5, w5, #0x3
   14848:	b.eq	14894 <lzma_lzma_preset@@XZ_5.0+0x1a84>  // b.none
   1484c:	sub	w6, w5, #0x1
   14850:	add	x7, x19, x4, lsl #2
   14854:	lsr	w0, w9, w6
   14858:	and	w0, w0, #0x1
   1485c:	add	w0, w0, #0x2
   14860:	str	w0, [x7, #40]
   14864:	cbz	w6, 14894 <lzma_lzma_preset@@XZ_5.0+0x1a84>
   14868:	sub	w6, w5, #0x2
   1486c:	lsr	w0, w9, w6
   14870:	and	w0, w0, #0x1
   14874:	add	w0, w0, #0x2
   14878:	str	w0, [x7, #44]
   1487c:	cbz	w6, 14894 <lzma_lzma_preset@@XZ_5.0+0x1a84>
   14880:	sub	w0, w5, #0x3
   14884:	lsr	w0, w9, w0
   14888:	and	w0, w0, #0x1
   1488c:	add	w0, w0, #0x2
   14890:	str	w0, [x7, #48]
   14894:	add	x1, x1, #0x1
   14898:	and	w6, w2, #0x1
   1489c:	add	x1, x1, x3
   148a0:	add	w0, w6, #0x2
   148a4:	ubfx	x10, x2, #1, #1
   148a8:	mov	x3, #0x71e2                	// #29154
   148ac:	add	x5, x19, x1, lsl #2
   148b0:	add	x4, x19, x1, lsl #3
   148b4:	add	x8, x19, x3
   148b8:	ubfiz	x7, x0, #1, #3
   148bc:	mov	x9, #0x71e0                	// #29152
   148c0:	add	w0, w10, w0, lsl #1
   148c4:	str	w6, [x5, #40]
   148c8:	add	x3, x19, x9
   148cc:	str	x8, [x4, #272]
   148d0:	ubfx	x9, x2, #2, #1
   148d4:	str	w10, [x5, #44]
   148d8:	add	x7, x3, x7
   148dc:	str	x7, [x4, #280]
   148e0:	add	w6, w9, w0, lsl #1
   148e4:	ubfiz	x0, x0, #1, #5
   148e8:	str	w9, [x5, #48]
   148ec:	add	x0, x3, x0
   148f0:	str	x0, [x4, #288]
   148f4:	ubfx	x2, x2, #3, #1
   148f8:	add	x0, x19, #0x10, lsl #12
   148fc:	ubfiz	x6, x6, #1, #7
   14900:	str	w2, [x5, #52]
   14904:	add	x3, x3, x6
   14908:	str	x3, [x4, #296]
   1490c:	add	x10, x19, #0x2ec
   14910:	mov	w6, #0xffffffff            	// #-1
   14914:	ldr	w2, [x0, #3800]
   14918:	add	x1, x1, #0x4
   1491c:	ldr	w5, [x19, #740]
   14920:	add	w2, w2, #0x1
   14924:	ldr	w4, [x19, #744]
   14928:	ldr	w3, [x19, #748]
   1492c:	str	w2, [x0, #3800]
   14930:	ldr	w2, [x0, #3732]
   14934:	stp	w6, w5, [x10, #-8]
   14938:	stp	w4, w3, [x10]
   1493c:	add	w2, w2, #0x1
   14940:	str	w2, [x0, #3732]
   14944:	b	140b8 <lzma_lzma_preset@@XZ_5.0+0x12a8>
   14948:	mov	x5, x4
   1494c:	b	13e2c <lzma_lzma_preset@@XZ_5.0+0x101c>
   14950:	ldr	w1, [x1, #104]
   14954:	cbz	w1, 14344 <lzma_lzma_preset@@XZ_5.0+0x1534>
   14958:	ldr	w26, [x22, #28]
   1495c:	ldr	x4, [x19, #24]
   14960:	sub	w26, w0, w26
   14964:	str	x27, [sp, #80]
   14968:	b	14298 <lzma_lzma_preset@@XZ_5.0+0x1488>
   1496c:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14970:	strb	wzr, [x19, #20]
   14974:	stp	xzr, xzr, [x19, #24]
   14978:	ldr	q0, [x0, #1024]
   1497c:	mov	w0, #0xffffffff            	// #-1
   14980:	str	w0, [x19, #16]
   14984:	str	q0, [x19]
   14988:	b	1415c <lzma_lzma_preset@@XZ_5.0+0x134c>
   1498c:	bl	12f18 <lzma_lzma_preset@@XZ_5.0+0x108>
   14990:	ldr	x3, [x19, #24]
   14994:	b	14530 <lzma_lzma_preset@@XZ_5.0+0x1720>
   14998:	ldr	w5, [x1, #104]
   1499c:	cmp	w5, #0x1
   149a0:	b.eq	149ac <lzma_lzma_preset@@XZ_5.0+0x1b9c>  // b.none
   149a4:	mov	w5, #0xffffffff            	// #-1
   149a8:	b	130c0 <lzma_lzma_preset@@XZ_5.0+0x2b0>
   149ac:	mov	w0, #0x8                   	// #8
   149b0:	ret
   149b4:	nop
   149b8:	ldr	w4, [x1, #20]
   149bc:	cmp	w4, #0x4
   149c0:	b.hi	14ff8 <lzma_lzma_preset@@XZ_5.0+0x21e8>  // b.pmore
   149c4:	stp	x29, x30, [sp, #-48]!
   149c8:	mov	x29, sp
   149cc:	ldr	w2, [x1, #24]
   149d0:	stp	x19, x20, [sp, #16]
   149d4:	mov	x20, x0
   149d8:	mov	x19, x1
   149dc:	cmp	w2, #0x4
   149e0:	mov	w0, #0x8                   	// #8
   149e4:	b.hi	14fec <lzma_lzma_preset@@XZ_5.0+0x21dc>  // b.pmore
   149e8:	add	w1, w4, w2
   149ec:	cmp	w1, #0x4
   149f0:	b.hi	14fec <lzma_lzma_preset@@XZ_5.0+0x21dc>  // b.pmore
   149f4:	ldr	w11, [x19, #28]
   149f8:	cmp	w11, #0x4
   149fc:	b.hi	14fec <lzma_lzma_preset@@XZ_5.0+0x21dc>  // b.pmore
   14a00:	ldr	w3, [x19, #36]
   14a04:	sub	w3, w3, #0x2
   14a08:	cmp	w3, #0x10f
   14a0c:	b.hi	14fec <lzma_lzma_preset@@XZ_5.0+0x21dc>  // b.pmore
   14a10:	ldr	w3, [x19, #32]
   14a14:	sub	w3, w3, #0x1
   14a18:	cmp	w3, #0x1
   14a1c:	b.hi	14fec <lzma_lzma_preset@@XZ_5.0+0x21dc>  // b.pmore
   14a20:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14a24:	mov	w5, #0xffffffff            	// #-1
   14a28:	mov	w18, #0x1                   	// #1
   14a2c:	stp	x21, x22, [sp, #32]
   14a30:	lsl	w3, w18, w1
   14a34:	ldr	q1, [x0, #1024]
   14a38:	sub	w3, w3, #0x1
   14a3c:	lsl	w0, w18, w2
   14a40:	mov	x14, #0x179c                	// #6044
   14a44:	add	w0, w0, w5
   14a48:	add	x6, x20, x14
   14a4c:	lsl	w18, w18, w11
   14a50:	add	w10, w18, w5
   14a54:	str	w5, [x20, #16]
   14a58:	add	x5, x20, #0x2e0
   14a5c:	mov	w1, #0x600                 	// #1536
   14a60:	str	q1, [x20]
   14a64:	mov	x15, #0x119c                	// #4508
   14a68:	movi	v0.8h, #0x4, lsl #8
   14a6c:	strb	wzr, [x20, #20]
   14a70:	stp	xzr, xzr, [x20, #24]
   14a74:	umaddl	x3, w3, w1, x6
   14a78:	add	x2, x20, #0xb9c
   14a7c:	str	wzr, [x20, #752]
   14a80:	add	x1, x20, x15
   14a84:	stp	xzr, xzr, [x5]
   14a88:	str	w10, [x20, #2960]
   14a8c:	str	w4, [x20, #2964]
   14a90:	str	w0, [x20, #2968]
   14a94:	mov	x0, x2
   14a98:	str	q0, [x0], #16
   14a9c:	cmp	x0, x1
   14aa0:	b.ne	14a98 <lzma_lzma_preset@@XZ_5.0+0x1c88>  // b.any
   14aa4:	add	x1, x0, #0x600
   14aa8:	add	x2, x2, #0x600
   14aac:	cmp	x3, x1
   14ab0:	b.ne	14a94 <lzma_lzma_preset@@XZ_5.0+0x1c84>  // b.any
   14ab4:	mov	x12, #0x6d1c                	// #27932
   14ab8:	mov	w7, w10
   14abc:	add	x5, x20, x12
   14ac0:	add	x12, x7, #0x1
   14ac4:	mov	x13, #0x6b9c                	// #27548
   14ac8:	and	x9, x12, #0xfffffffffffffff8
   14acc:	add	x6, x20, x13
   14ad0:	mov	x8, #0x0                   	// #0
   14ad4:	movi	v0.8h, #0x4, lsl #8
   14ad8:	lsr	x13, x12, #3
   14adc:	mov	w0, #0x400                 	// #1024
   14ae0:	b	14c04 <lzma_lzma_preset@@XZ_5.0+0x1df4>
   14ae4:	str	q0, [x6]
   14ae8:	cmp	x13, #0x2
   14aec:	str	q0, [x6, #480]
   14af0:	b.ne	14afc <lzma_lzma_preset@@XZ_5.0+0x1cec>  // b.any
   14af4:	str	q0, [x6, #16]
   14af8:	str	q0, [x6, #496]
   14afc:	cmp	x9, x12
   14b00:	b.eq	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.none
   14b04:	mov	x3, x9
   14b08:	lsl	x1, x8, #4
   14b0c:	add	x2, x3, #0x1
   14b10:	add	x4, x1, x3
   14b14:	cmp	x7, x2
   14b18:	add	x4, x20, x4, lsl #1
   14b1c:	add	x4, x4, #0x6, lsl #12
   14b20:	strh	w0, [x4, #2972]
   14b24:	strh	w0, [x4, #3452]
   14b28:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14b2c:	add	x2, x1, x2
   14b30:	add	x4, x3, #0x2
   14b34:	cmp	x7, x4
   14b38:	add	x2, x20, x2, lsl #1
   14b3c:	add	x2, x2, #0x6, lsl #12
   14b40:	strh	w0, [x2, #2972]
   14b44:	strh	w0, [x2, #3452]
   14b48:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14b4c:	add	x2, x1, x4
   14b50:	add	x4, x3, #0x3
   14b54:	cmp	x7, x4
   14b58:	add	x2, x20, x2, lsl #1
   14b5c:	add	x2, x2, #0x6, lsl #12
   14b60:	strh	w0, [x2, #2972]
   14b64:	strh	w0, [x2, #3452]
   14b68:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14b6c:	add	x2, x1, x4
   14b70:	add	x4, x3, #0x4
   14b74:	cmp	x7, x4
   14b78:	add	x2, x20, x2, lsl #1
   14b7c:	add	x2, x2, #0x6, lsl #12
   14b80:	strh	w0, [x2, #2972]
   14b84:	strh	w0, [x2, #3452]
   14b88:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14b8c:	add	x2, x1, x4
   14b90:	add	x4, x3, #0x5
   14b94:	cmp	x7, x4
   14b98:	add	x2, x20, x2, lsl #1
   14b9c:	add	x2, x2, #0x6, lsl #12
   14ba0:	strh	w0, [x2, #2972]
   14ba4:	strh	w0, [x2, #3452]
   14ba8:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14bac:	add	x2, x1, x4
   14bb0:	add	x3, x3, #0x6
   14bb4:	cmp	x7, x3
   14bb8:	add	x2, x20, x2, lsl #1
   14bbc:	add	x2, x2, #0x6, lsl #12
   14bc0:	strh	w0, [x2, #2972]
   14bc4:	strh	w0, [x2, #3452]
   14bc8:	b.cc	14be0 <lzma_lzma_preset@@XZ_5.0+0x1dd0>  // b.lo, b.ul, b.last
   14bcc:	add	x1, x1, x3
   14bd0:	add	x1, x20, x1, lsl #1
   14bd4:	add	x1, x1, #0x6, lsl #12
   14bd8:	strh	w0, [x1, #2972]
   14bdc:	strh	w0, [x1, #3452]
   14be0:	strh	w0, [x5]
   14be4:	add	x8, x8, #0x1
   14be8:	strh	w0, [x5, #24]
   14bec:	cmp	x8, #0xc
   14bf0:	strh	w0, [x5, #48]
   14bf4:	add	x6, x6, #0x20
   14bf8:	strh	w0, [x5, #72]
   14bfc:	add	x5, x5, #0x2
   14c00:	b.eq	14c14 <lzma_lzma_preset@@XZ_5.0+0x1e04>  // b.none
   14c04:	cmp	w10, #0x6
   14c08:	b.hi	14ae4 <lzma_lzma_preset@@XZ_5.0+0x1cd4>  // b.pmore
   14c0c:	mov	x3, #0x0                   	// #0
   14c10:	b	14b08 <lzma_lzma_preset@@XZ_5.0+0x1cf8>
   14c14:	movi	v0.8h, #0x4, lsl #8
   14c18:	mov	x8, #0x6e00                	// #28160
   14c1c:	add	x0, x20, x8
   14c20:	add	x1, x20, #0x7, lsl #12
   14c24:	ldrb	w4, [x20, #2956]
   14c28:	mov	x9, #0x7200                	// #29184
   14c2c:	add	x21, x20, x9
   14c30:	add	x3, x20, #0x4, lsl #12
   14c34:	stur	q0, [x0, #252]
   14c38:	mov	w5, #0x4000400             	// #67109888
   14c3c:	mov	x6, #0x400040004000400     	// #288234774265332736
   14c40:	stur	q0, [x1, #-244]
   14c44:	mov	x10, #0x7400                	// #29696
   14c48:	add	x2, x20, x10
   14c4c:	stur	q0, [x1, #-228]
   14c50:	mov	w0, w18
   14c54:	stur	q0, [x1, #-212]
   14c58:	stur	q0, [x1, #-196]
   14c5c:	stur	q0, [x1, #-180]
   14c60:	stur	q0, [x1, #-164]
   14c64:	stur	q0, [x1, #-148]
   14c68:	stur	q0, [x1, #-132]
   14c6c:	stur	q0, [x1, #-116]
   14c70:	stur	q0, [x1, #-100]
   14c74:	stur	q0, [x1, #-84]
   14c78:	stur	q0, [x1, #-68]
   14c7c:	stur	q0, [x1, #-52]
   14c80:	stur	q0, [x1, #-36]
   14c84:	stur	q0, [x1, #-20]
   14c88:	stur	q0, [x1, #-4]
   14c8c:	stur	q0, [x1, #12]
   14c90:	stur	q0, [x1, #28]
   14c94:	stur	q0, [x1, #44]
   14c98:	stur	q0, [x1, #60]
   14c9c:	stur	q0, [x1, #76]
   14ca0:	stur	q0, [x1, #92]
   14ca4:	stur	q0, [x1, #108]
   14ca8:	stur	q0, [x1, #124]
   14cac:	stur	q0, [x1, #140]
   14cb0:	stur	q0, [x1, #156]
   14cb4:	stur	q0, [x1, #172]
   14cb8:	stur	q0, [x1, #188]
   14cbc:	stur	q0, [x1, #204]
   14cc0:	stur	q0, [x1, #220]
   14cc4:	stur	q0, [x1, #236]
   14cc8:	stur	q0, [x1, #252]
   14ccc:	stur	q0, [x21, #-244]
   14cd0:	stur	q0, [x21, #-228]
   14cd4:	stur	q0, [x21, #-212]
   14cd8:	stur	q0, [x21, #-196]
   14cdc:	stur	q0, [x21, #-180]
   14ce0:	stur	q0, [x21, #-164]
   14ce4:	stur	q0, [x21, #-148]
   14ce8:	stur	q0, [x21, #-132]
   14cec:	stur	q0, [x21, #-116]
   14cf0:	stur	q0, [x21, #-100]
   14cf4:	stur	q0, [x21, #-84]
   14cf8:	stur	q0, [x21, #-68]
   14cfc:	stur	q0, [x21, #-52]
   14d00:	str	w5, [x3, #12764]
   14d04:	str	x6, [x20, #29184]
   14d08:	str	q0, [x20, #29152]
   14d0c:	str	q0, [x20, #29168]
   14d10:	str	x6, [x20, #29192]
   14d14:	str	w5, [x3, #12816]
   14d18:	stur	q0, [x2, #-252]
   14d1c:	cbz	w11, 14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>
   14d20:	stur	q0, [x21, #20]
   14d24:	cmp	x0, #0x2
   14d28:	stur	q0, [x2, #-236]
   14d2c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d30:	stur	q0, [x21, #36]
   14d34:	cmp	x0, #0x3
   14d38:	stur	q0, [x2, #-220]
   14d3c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d40:	stur	q0, [x21, #52]
   14d44:	cmp	x0, #0x4
   14d48:	stur	q0, [x2, #-204]
   14d4c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d50:	stur	q0, [x21, #68]
   14d54:	cmp	x0, #0x5
   14d58:	stur	q0, [x2, #-188]
   14d5c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d60:	stur	q0, [x21, #84]
   14d64:	cmp	x0, #0x6
   14d68:	stur	q0, [x2, #-172]
   14d6c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d70:	stur	q0, [x21, #100]
   14d74:	cmp	x0, #0x7
   14d78:	stur	q0, [x2, #-156]
   14d7c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d80:	stur	q0, [x21, #116]
   14d84:	cmp	x0, #0x8
   14d88:	stur	q0, [x2, #-140]
   14d8c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14d90:	stur	q0, [x21, #132]
   14d94:	cmp	x0, #0x9
   14d98:	stur	q0, [x2, #-124]
   14d9c:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14da0:	movi	v0.8h, #0x4, lsl #8
   14da4:	cmp	x0, #0xa
   14da8:	stur	q0, [x21, #148]
   14dac:	stur	q0, [x2, #-108]
   14db0:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14db4:	stur	q0, [x21, #164]
   14db8:	cmp	x0, #0xb
   14dbc:	stur	q0, [x2, #-92]
   14dc0:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14dc4:	stur	q0, [x21, #180]
   14dc8:	cmp	x0, #0xc
   14dcc:	stur	q0, [x2, #-76]
   14dd0:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14dd4:	stur	q0, [x21, #196]
   14dd8:	cmp	x0, #0xd
   14ddc:	stur	q0, [x2, #-60]
   14de0:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14de4:	stur	q0, [x21, #212]
   14de8:	cmp	x0, #0xe
   14dec:	stur	q0, [x2, #-44]
   14df0:	b.eq	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.none
   14df4:	stur	q0, [x21, #228]
   14df8:	cmp	x0, #0x10
   14dfc:	stur	q0, [x2, #-28]
   14e00:	b.ne	14e0c <lzma_lzma_preset@@XZ_5.0+0x1ffc>  // b.any
   14e04:	stur	q0, [x21, #244]
   14e08:	stur	q0, [x2, #-12]
   14e0c:	mov	x6, #0x7404                	// #29700
   14e10:	movi	v0.8h, #0x4, lsl #8
   14e14:	mov	x7, #0x7604                	// #30212
   14e18:	add	x1, x20, x6
   14e1c:	add	x2, x20, x7
   14e20:	str	q0, [x1], #16
   14e24:	cmp	x1, x2
   14e28:	b.ne	14e20 <lzma_lzma_preset@@XZ_5.0+0x2010>  // b.any
   14e2c:	cbnz	w4, 15000 <lzma_lzma_preset@@XZ_5.0+0x21f0>
   14e30:	mov	w22, #0x0                   	// #0
   14e34:	mov	w1, w22
   14e38:	add	w22, w22, #0x1
   14e3c:	mov	x0, x21
   14e40:	bl	12f18 <lzma_lzma_preset@@XZ_5.0+0x108>
   14e44:	cmp	w18, w22
   14e48:	b.ne	14e34 <lzma_lzma_preset@@XZ_5.0+0x2024>  // b.any
   14e4c:	add	x0, x20, #0x8, lsl #12
   14e50:	ldr	w1, [x19, #28]
   14e54:	ldrb	w4, [x20, #2956]
   14e58:	mov	w2, #0x4000400             	// #67109888
   14e5c:	mov	w18, #0x1                   	// #1
   14e60:	str	w2, [x0, #14920]
   14e64:	lsl	w0, w18, w1
   14e68:	mov	x18, x0
   14e6c:	cbz	w0, 14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>
   14e70:	movi	v0.8h, #0x4, lsl #8
   14e74:	mov	x3, #0xba00                	// #47616
   14e78:	add	x2, x20, x3
   14e7c:	mov	x5, #0xbc00                	// #48128
   14e80:	add	x1, x20, x5
   14e84:	cmp	x0, #0x1
   14e88:	stur	q0, [x2, #76]
   14e8c:	stur	q0, [x1, #-180]
   14e90:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14e94:	stur	q0, [x2, #92]
   14e98:	cmp	x0, #0x2
   14e9c:	stur	q0, [x1, #-164]
   14ea0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14ea4:	stur	q0, [x2, #108]
   14ea8:	cmp	x0, #0x3
   14eac:	stur	q0, [x1, #-148]
   14eb0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14eb4:	stur	q0, [x2, #124]
   14eb8:	cmp	x0, #0x4
   14ebc:	stur	q0, [x1, #-132]
   14ec0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14ec4:	stur	q0, [x2, #140]
   14ec8:	cmp	x0, #0x5
   14ecc:	stur	q0, [x1, #-116]
   14ed0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14ed4:	stur	q0, [x2, #156]
   14ed8:	cmp	x0, #0x6
   14edc:	stur	q0, [x1, #-100]
   14ee0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14ee4:	stur	q0, [x2, #172]
   14ee8:	cmp	x0, #0x7
   14eec:	stur	q0, [x1, #-84]
   14ef0:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14ef4:	stur	q0, [x2, #188]
   14ef8:	cmp	x0, #0x8
   14efc:	stur	q0, [x1, #-68]
   14f00:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f04:	stur	q0, [x2, #204]
   14f08:	cmp	x0, #0x9
   14f0c:	stur	q0, [x1, #-52]
   14f10:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f14:	stur	q0, [x2, #220]
   14f18:	cmp	x0, #0xa
   14f1c:	stur	q0, [x1, #-36]
   14f20:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f24:	stur	q0, [x2, #236]
   14f28:	cmp	x0, #0xb
   14f2c:	stur	q0, [x1, #-20]
   14f30:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f34:	stur	q0, [x2, #252]
   14f38:	cmp	x0, #0xc
   14f3c:	stur	q0, [x1, #-4]
   14f40:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f44:	stur	q0, [x1, #-244]
   14f48:	cmp	x0, #0xd
   14f4c:	stur	q0, [x1, #12]
   14f50:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f54:	stur	q0, [x1, #-228]
   14f58:	cmp	x0, #0xe
   14f5c:	stur	q0, [x1, #28]
   14f60:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f64:	stur	q0, [x1, #-212]
   14f68:	cmp	x0, #0xf
   14f6c:	stur	q0, [x1, #44]
   14f70:	b.eq	14f7c <lzma_lzma_preset@@XZ_5.0+0x216c>  // b.none
   14f74:	stur	q0, [x1, #-196]
   14f78:	stur	q0, [x1, #60]
   14f7c:	mov	x1, #0xbc4c                	// #48204
   14f80:	movi	v0.8h, #0x4, lsl #8
   14f84:	add	x0, x20, x1
   14f88:	mov	x2, #0xbe4c                	// #48716
   14f8c:	add	x1, x20, x2
   14f90:	str	q0, [x0], #16
   14f94:	cmp	x0, x1
   14f98:	b.ne	14f90 <lzma_lzma_preset@@XZ_5.0+0x2180>  // b.any
   14f9c:	cbnz	w4, 14fc8 <lzma_lzma_preset@@XZ_5.0+0x21b8>
   14fa0:	cbz	w18, 14fc8 <lzma_lzma_preset@@XZ_5.0+0x21b8>
   14fa4:	mov	x0, #0xba48                	// #47688
   14fa8:	add	x21, x20, x0
   14fac:	mov	w19, #0x0                   	// #0
   14fb0:	mov	w1, w19
   14fb4:	add	w19, w19, #0x1
   14fb8:	mov	x0, x21
   14fbc:	bl	12f18 <lzma_lzma_preset@@XZ_5.0+0x108>
   14fc0:	cmp	w19, w18
   14fc4:	b.ne	14fb0 <lzma_lzma_preset@@XZ_5.0+0x21a0>  // b.any
   14fc8:	add	x20, x20, #0x10, lsl #12
   14fcc:	adrp	x0, 21000 <lzma_mode_is_supported@@XZ_5.0+0xbc08>
   14fd0:	mov	w1, #0x7fffffff            	// #2147483647
   14fd4:	ldr	d0, [x0, #1264]
   14fd8:	mov	w0, #0x0                   	// #0
   14fdc:	ldp	x21, x22, [sp, #32]
   14fe0:	str	w1, [x20, #3732]
   14fe4:	str	wzr, [x20, #3808]
   14fe8:	str	d0, [x20, #3800]
   14fec:	ldp	x19, x20, [sp, #16]
   14ff0:	ldp	x29, x30, [sp], #48
   14ff4:	ret
   14ff8:	mov	w0, #0x8                   	// #8
   14ffc:	ret
   15000:	add	x1, x20, #0x8, lsl #12
   15004:	mov	w2, #0x4000400             	// #67109888
   15008:	str	w2, [x1, #14920]
   1500c:	b	14e70 <lzma_lzma_preset@@XZ_5.0+0x2060>
   15010:	stp	x29, x30, [sp, #-48]!
   15014:	adrp	x4, 14000 <lzma_lzma_preset@@XZ_5.0+0x11f0>
   15018:	add	x4, x4, #0x998
   1501c:	mov	x29, sp
   15020:	stp	x19, x20, [sp, #16]
   15024:	mov	x20, x0
   15028:	mov	x19, x3
   1502c:	ldr	x0, [x0]
   15030:	str	x21, [sp, #32]
   15034:	str	x4, [x20, #8]
   15038:	mov	x21, x2
   1503c:	cbz	x0, 15128 <lzma_lzma_preset@@XZ_5.0+0x2318>
   15040:	ldr	w1, [x21, #32]
   15044:	cmp	w1, #0x1
   15048:	b.eq	15118 <lzma_lzma_preset@@XZ_5.0+0x2308>  // b.none
   1504c:	cmp	w1, #0x2
   15050:	b.ne	15104 <lzma_lzma_preset@@XZ_5.0+0x22f4>  // b.any
   15054:	ldr	w3, [x21]
   15058:	mov	w1, #0x0                   	// #0
   1505c:	strb	wzr, [x0, #2956]
   15060:	cmp	w3, #0x1
   15064:	b.ls	15084 <lzma_lzma_preset@@XZ_5.0+0x2274>  // b.plast
   15068:	mov	w4, #0x1                   	// #1
   1506c:	nop
   15070:	add	w1, w1, #0x1
   15074:	lsl	w2, w4, w1
   15078:	cmp	w2, w3
   1507c:	b.cc	15070 <lzma_lzma_preset@@XZ_5.0+0x2260>  // b.lo, b.ul, b.last
   15080:	lsl	w1, w1, #1
   15084:	add	x2, x0, #0x10, lsl #12
   15088:	add	x5, x0, #0x8, lsl #12
   1508c:	ldr	w4, [x21, #36]
   15090:	str	w1, [x2, #3728]
   15094:	sub	w6, w4, #0x1
   15098:	str	w6, [x5, #14852]
   1509c:	str	w6, [x2, #588]
   150a0:	ldr	x2, [x21, #8]
   150a4:	mov	w1, #0x0                   	// #0
   150a8:	ldr	w5, [x21, #16]
   150ac:	cbz	x2, 150b8 <lzma_lzma_preset@@XZ_5.0+0x22a8>
   150b0:	cmp	w5, #0x0
   150b4:	cset	w1, ne  // ne = any
   150b8:	ldp	w7, w6, [x21, #40]
   150bc:	strb	w1, [x0, #2957]
   150c0:	strb	wzr, [x0, #2958]
   150c4:	mov	w3, w3
   150c8:	mov	w4, w4
   150cc:	mov	x9, #0x1000                	// #4096
   150d0:	mov	x8, #0x111                 	// #273
   150d4:	mov	x1, #0x1001                	// #4097
   150d8:	stp	x9, x3, [x19]
   150dc:	stp	x1, x8, [x19, #16]
   150e0:	mov	x1, x21
   150e4:	str	x4, [x19, #32]
   150e8:	stp	w7, w6, [x19, #40]
   150ec:	str	x2, [x19, #48]
   150f0:	str	w5, [x19, #56]
   150f4:	ldp	x19, x20, [sp, #16]
   150f8:	ldr	x21, [sp, #32]
   150fc:	ldp	x29, x30, [sp], #48
   15100:	b	149b8 <lzma_lzma_preset@@XZ_5.0+0x1ba8>
   15104:	mov	w0, #0x8                   	// #8
   15108:	ldp	x19, x20, [sp, #16]
   1510c:	ldr	x21, [sp, #32]
   15110:	ldp	x29, x30, [sp], #48
   15114:	ret
   15118:	ldr	w3, [x21]
   1511c:	ldr	w4, [x21, #36]
   15120:	strb	w1, [x0, #2956]
   15124:	b	150a0 <lzma_lzma_preset@@XZ_5.0+0x2290>
   15128:	mov	x0, #0xcee8                	// #52968
   1512c:	movk	x0, #0x3, lsl #16
   15130:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   15134:	str	x0, [x20]
   15138:	cbnz	x0, 15040 <lzma_lzma_preset@@XZ_5.0+0x2230>
   1513c:	mov	w0, #0x5                   	// #5
   15140:	b	15108 <lzma_lzma_preset@@XZ_5.0+0x22f8>
   15144:	nop
   15148:	stp	x29, x30, [sp, #-48]!
   1514c:	mov	x29, sp
   15150:	stp	x19, x20, [sp, #16]
   15154:	mov	x20, x0
   15158:	mov	x19, x3
   1515c:	ldr	x0, [x0]
   15160:	str	x21, [sp, #32]
   15164:	mov	x21, x2
   15168:	cbz	x0, 15250 <lzma_lzma_preset@@XZ_5.0+0x2440>
   1516c:	ldr	w1, [x21, #32]
   15170:	cmp	w1, #0x1
   15174:	b.eq	15240 <lzma_lzma_preset@@XZ_5.0+0x2430>  // b.none
   15178:	cmp	w1, #0x2
   1517c:	b.ne	1522c <lzma_lzma_preset@@XZ_5.0+0x241c>  // b.any
   15180:	ldr	w3, [x21]
   15184:	mov	w1, #0x0                   	// #0
   15188:	strb	wzr, [x0, #2956]
   1518c:	cmp	w3, #0x1
   15190:	b.ls	151ac <lzma_lzma_preset@@XZ_5.0+0x239c>  // b.plast
   15194:	mov	w5, #0x1                   	// #1
   15198:	add	w1, w1, #0x1
   1519c:	lsl	w4, w5, w1
   151a0:	cmp	w4, w3
   151a4:	b.cc	15198 <lzma_lzma_preset@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   151a8:	lsl	w1, w1, #1
   151ac:	add	x2, x0, #0x10, lsl #12
   151b0:	add	x5, x0, #0x8, lsl #12
   151b4:	ldr	w4, [x21, #36]
   151b8:	str	w1, [x2, #3728]
   151bc:	sub	w6, w4, #0x1
   151c0:	str	w6, [x5, #14852]
   151c4:	str	w6, [x2, #588]
   151c8:	ldr	x5, [x21, #8]
   151cc:	mov	w1, #0x0                   	// #0
   151d0:	ldr	w2, [x21, #16]
   151d4:	cbz	x5, 151e0 <lzma_lzma_preset@@XZ_5.0+0x23d0>
   151d8:	cmp	w2, #0x0
   151dc:	cset	w1, ne  // ne = any
   151e0:	ldp	w7, w6, [x21, #40]
   151e4:	strb	w1, [x0, #2957]
   151e8:	strb	wzr, [x0, #2958]
   151ec:	mov	w3, w3
   151f0:	mov	w4, w4
   151f4:	mov	x9, #0x1000                	// #4096
   151f8:	mov	x8, #0x111                 	// #273
   151fc:	mov	x1, #0x1001                	// #4097
   15200:	stp	x9, x3, [x19]
   15204:	stp	x1, x8, [x19, #16]
   15208:	mov	x1, x21
   1520c:	str	x4, [x19, #32]
   15210:	stp	w7, w6, [x19, #40]
   15214:	str	x5, [x19, #48]
   15218:	str	w2, [x19, #56]
   1521c:	ldp	x19, x20, [sp, #16]
   15220:	ldr	x21, [sp, #32]
   15224:	ldp	x29, x30, [sp], #48
   15228:	b	149b8 <lzma_lzma_preset@@XZ_5.0+0x1ba8>
   1522c:	mov	w0, #0x8                   	// #8
   15230:	ldp	x19, x20, [sp, #16]
   15234:	ldr	x21, [sp, #32]
   15238:	ldp	x29, x30, [sp], #48
   1523c:	ret
   15240:	ldr	w3, [x21]
   15244:	ldr	w4, [x21, #36]
   15248:	strb	w1, [x0, #2956]
   1524c:	b	151c8 <lzma_lzma_preset@@XZ_5.0+0x23b8>
   15250:	mov	x0, #0xcee8                	// #52968
   15254:	movk	x0, #0x3, lsl #16
   15258:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1525c:	str	x0, [x20]
   15260:	cbnz	x0, 1516c <lzma_lzma_preset@@XZ_5.0+0x235c>
   15264:	mov	w0, #0x5                   	// #5
   15268:	b	15230 <lzma_lzma_preset@@XZ_5.0+0x2420>
   1526c:	nop
   15270:	adrp	x3, 15000 <lzma_lzma_preset@@XZ_5.0+0x21f0>
   15274:	add	x3, x3, #0x10
   15278:	b	10b68 <lzma_crc64@@XZ_5.0+0x1578>
   1527c:	nop
   15280:	ldr	w1, [x0, #20]
   15284:	cmp	w1, #0x4
   15288:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   1528c:	ldr	w2, [x0, #24]
   15290:	cmp	w2, #0x4
   15294:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   15298:	add	w1, w1, w2
   1529c:	cmp	w1, #0x4
   152a0:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   152a4:	ldr	w1, [x0, #28]
   152a8:	cmp	w1, #0x4
   152ac:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   152b0:	ldr	w1, [x0, #36]
   152b4:	sub	w2, w1, #0x2
   152b8:	cmp	w2, #0x10f
   152bc:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   152c0:	ldr	w2, [x0, #32]
   152c4:	sub	w2, w2, #0x1
   152c8:	cmp	w2, #0x1
   152cc:	b.hi	1532c <lzma_lzma_preset@@XZ_5.0+0x251c>  // b.pmore
   152d0:	stp	x29, x30, [sp, #-80]!
   152d4:	mov	w1, w1
   152d8:	mov	x8, #0x1000                	// #4096
   152dc:	mov	x29, sp
   152e0:	ldr	w7, [x0]
   152e4:	mov	x6, #0x1001                	// #4097
   152e8:	ldr	w2, [x0, #16]
   152ec:	mov	x5, #0x111                 	// #273
   152f0:	ldr	x3, [x0, #8]
   152f4:	stp	x8, x7, [sp, #16]
   152f8:	ldr	x4, [x0, #40]
   152fc:	add	x0, sp, #0x10
   15300:	stp	x6, x5, [sp, #32]
   15304:	stp	x1, x4, [sp, #48]
   15308:	str	x3, [sp, #64]
   1530c:	str	w2, [sp, #72]
   15310:	bl	10a00 <lzma_crc64@@XZ_5.0+0x1410>
   15314:	cmn	x0, #0x1
   15318:	b.eq	15334 <lzma_lzma_preset@@XZ_5.0+0x2524>  // b.none
   1531c:	add	x0, x0, #0x3c, lsl #12
   15320:	add	x0, x0, #0xee8
   15324:	ldp	x29, x30, [sp], #80
   15328:	ret
   1532c:	mov	x0, #0xffffffffffffffff    	// #-1
   15330:	ret
   15334:	mov	x0, #0xffffffffffffffff    	// #-1
   15338:	ldp	x29, x30, [sp], #80
   1533c:	ret
   15340:	ldr	w4, [x0, #20]
   15344:	mov	x3, x0
   15348:	mov	w0, #0x1                   	// #1
   1534c:	cmp	w4, #0x4
   15350:	b.hi	15394 <lzma_lzma_preset@@XZ_5.0+0x2584>  // b.pmore
   15354:	ldr	w5, [x3, #24]
   15358:	mov	w0, #0x1                   	// #1
   1535c:	cmp	w5, #0x4
   15360:	b.hi	15394 <lzma_lzma_preset@@XZ_5.0+0x2584>  // b.pmore
   15364:	add	w2, w4, w5
   15368:	cmp	w2, #0x4
   1536c:	b.hi	15394 <lzma_lzma_preset@@XZ_5.0+0x2584>  // b.pmore
   15370:	ldr	w2, [x3, #28]
   15374:	cmp	w2, #0x4
   15378:	b.hi	15394 <lzma_lzma_preset@@XZ_5.0+0x2584>  // b.pmore
   1537c:	add	w2, w2, w2, lsl #2
   15380:	mov	w0, #0x0                   	// #0
   15384:	add	w2, w2, w5
   15388:	add	w2, w2, w2, lsl #3
   1538c:	add	w2, w2, w4
   15390:	strb	w2, [x1]
   15394:	ret
   15398:	ldr	w4, [x0, #20]
   1539c:	mov	x3, x0
   153a0:	mov	w0, #0xb                   	// #11
   153a4:	cmp	w4, #0x4
   153a8:	b.hi	153f4 <lzma_lzma_preset@@XZ_5.0+0x25e4>  // b.pmore
   153ac:	ldr	w5, [x3, #24]
   153b0:	mov	w0, #0xb                   	// #11
   153b4:	cmp	w5, #0x4
   153b8:	b.hi	153f4 <lzma_lzma_preset@@XZ_5.0+0x25e4>  // b.pmore
   153bc:	add	w2, w4, w5
   153c0:	cmp	w2, #0x4
   153c4:	b.hi	153f4 <lzma_lzma_preset@@XZ_5.0+0x25e4>  // b.pmore
   153c8:	ldr	w2, [x3, #28]
   153cc:	cmp	w2, #0x4
   153d0:	b.hi	153f4 <lzma_lzma_preset@@XZ_5.0+0x25e4>  // b.pmore
   153d4:	add	w2, w2, w2, lsl #2
   153d8:	mov	w0, #0x0                   	// #0
   153dc:	add	w2, w2, w5
   153e0:	add	w2, w2, w2, lsl #3
   153e4:	add	w2, w2, w4
   153e8:	strb	w2, [x1]
   153ec:	ldr	w2, [x3]
   153f0:	stur	w2, [x1, #1]
   153f4:	ret

00000000000153f8 <lzma_mode_is_supported@@XZ_5.0>:
   153f8:	sub	w0, w0, #0x1
   153fc:	cmp	w0, #0x1
   15400:	cset	w0, ls  // ls = plast
   15404:	ret
   15408:	stp	x29, x30, [sp, #-96]!
   1540c:	mov	x29, sp
   15410:	stp	x21, x22, [sp, #32]
   15414:	mov	x21, x0
   15418:	ldr	w0, [x1, #28]
   1541c:	stp	x19, x20, [sp, #16]
   15420:	mov	x22, x1
   15424:	mov	x19, x2
   15428:	stp	x23, x24, [sp, #48]
   1542c:	mov	x20, x3
   15430:	ldr	w23, [x1, #96]
   15434:	cbz	w0, 15760 <lzma_mode_is_supported@@XZ_5.0+0x368>
   15438:	ldr	w6, [x21, #2952]
   1543c:	ldr	w0, [x21, #2948]
   15440:	str	w0, [sp, #92]
   15444:	ldr	x24, [x22]
   15448:	ldr	w0, [x22, #24]
   1544c:	ldr	w3, [x22, #36]
   15450:	add	w3, w3, #0x1
   15454:	add	x24, x24, w0, uxtw
   15458:	sub	w3, w3, w0
   1545c:	sub	x2, x24, #0x1
   15460:	cmp	w3, #0x110
   15464:	b.hi	15694 <lzma_mode_is_supported@@XZ_5.0+0x29c>  // b.pmore
   15468:	cmp	w3, #0x1
   1546c:	b.ls	156ec <lzma_mode_is_supported@@XZ_5.0+0x2f4>  // b.plast
   15470:	ldurb	w11, [x24, #-1]
   15474:	add	x10, x21, #0x2e4
   15478:	mov	x5, #0x0                   	// #0
   1547c:	mov	w13, #0x0                   	// #0
   15480:	mov	w12, #0x0                   	// #0
   15484:	ldr	w4, [x10, x5, lsl #2]
   15488:	mov	w9, w5
   1548c:	mvn	x4, x4
   15490:	add	x1, x2, x4
   15494:	ldrb	w0, [x2, x4]
   15498:	cmp	w0, w11
   1549c:	b.ne	154b0 <lzma_mode_is_supported@@XZ_5.0+0xb8>  // b.any
   154a0:	ldrb	w4, [x24]
   154a4:	ldrb	w0, [x1, #1]
   154a8:	cmp	w4, w0
   154ac:	b.eq	15710 <lzma_mode_is_supported@@XZ_5.0+0x318>  // b.none
   154b0:	add	x5, x5, #0x1
   154b4:	cmp	x5, #0x4
   154b8:	b.ne	15484 <lzma_mode_is_supported@@XZ_5.0+0x8c>  // b.any
   154bc:	cmp	w6, w23
   154c0:	b.cs	15778 <lzma_mode_is_supported@@XZ_5.0+0x380>  // b.hs, b.nlast
   154c4:	cmp	w6, #0x1
   154c8:	b.ls	1569c <lzma_mode_is_supported@@XZ_5.0+0x2a4>  // b.plast
   154cc:	ldr	w2, [sp, #92]
   154d0:	mov	w23, w6
   154d4:	stp	x25, x26, [sp, #64]
   154d8:	mov	w1, #0x0                   	// #0
   154dc:	sub	w0, w2, #0x1
   154e0:	cmp	w2, #0x1
   154e4:	add	x0, x21, x0, lsl #3
   154e8:	ldr	w25, [x0, #760]
   154ec:	b.hi	15514 <lzma_mode_is_supported@@XZ_5.0+0x11c>  // b.pmore
   154f0:	b	15538 <lzma_mode_is_supported@@XZ_5.0+0x140>
   154f4:	ldr	w0, [x4, #760]
   154f8:	cmp	w0, w25, lsr #7
   154fc:	b.cs	15530 <lzma_mode_is_supported@@XZ_5.0+0x138>  // b.hs, b.nlast
   15500:	sub	w2, w2, #0x1
   15504:	mov	w25, w0
   15508:	cmp	w2, #0x1
   1550c:	mov	w1, #0x1                   	// #1
   15510:	b.eq	157d4 <lzma_mode_is_supported@@XZ_5.0+0x3dc>  // b.none
   15514:	sub	w4, w2, #0x2
   15518:	mov	w23, w6
   1551c:	add	x4, x21, x4, lsl #3
   15520:	ldr	w6, [x4, #756]
   15524:	add	w0, w6, #0x1
   15528:	cmp	w0, w23
   1552c:	b.eq	154f4 <lzma_mode_is_supported@@XZ_5.0+0xfc>  // b.none
   15530:	cbz	w1, 15538 <lzma_mode_is_supported@@XZ_5.0+0x140>
   15534:	str	w2, [sp, #92]
   15538:	cmp	w25, #0x7f
   1553c:	ccmp	w23, #0x2, #0x0, hi  // hi = pmore
   15540:	b.eq	156e0 <lzma_mode_is_supported@@XZ_5.0+0x2e8>  // b.none
   15544:	cmp	w12, #0x1
   15548:	b.ls	15578 <lzma_mode_is_supported@@XZ_5.0+0x180>  // b.plast
   1554c:	add	w0, w12, #0x1
   15550:	cmp	w0, w23
   15554:	b.cs	157cc <lzma_mode_is_supported@@XZ_5.0+0x3d4>  // b.hs, b.nlast
   15558:	cmp	w25, #0x200
   1555c:	add	w0, w12, #0x2
   15560:	ccmp	w0, w23, #0x0, hi  // hi = pmore
   15564:	b.cs	157cc <lzma_mode_is_supported@@XZ_5.0+0x3d4>  // b.hs, b.nlast
   15568:	cmp	w25, #0x8, lsl #12
   1556c:	add	w0, w12, #0x3
   15570:	ccmp	w0, w23, #0x0, hi  // hi = pmore
   15574:	b.cs	157cc <lzma_mode_is_supported@@XZ_5.0+0x3d4>  // b.hs, b.nlast
   15578:	cmp	w23, #0x1
   1557c:	ccmp	w3, #0x2, #0x0, hi  // hi = pmore
   15580:	b.ls	156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>  // b.plast
   15584:	add	x2, x21, #0x2f4
   15588:	add	x1, x21, #0xb84
   1558c:	mov	x0, x22
   15590:	bl	11560 <lzma_mf_is_supported@@XZ_5.0+0x5a0>
   15594:	str	w0, [x21, #2952]
   15598:	cmp	w0, #0x1
   1559c:	b.ls	155dc <lzma_mode_is_supported@@XZ_5.0+0x1e4>  // b.plast
   155a0:	ldr	w1, [x21, #2948]
   155a4:	sub	w1, w1, #0x1
   155a8:	add	x1, x21, x1, lsl #3
   155ac:	ldr	w1, [x1, #760]
   155b0:	cmp	w25, w1
   155b4:	ccmp	w0, w23, #0x0, hi  // hi = pmore
   155b8:	b.cs	156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>  // b.hs, b.nlast
   155bc:	add	w2, w23, #0x1
   155c0:	cmp	w0, w2
   155c4:	b.eq	15804 <lzma_mode_is_supported@@XZ_5.0+0x40c>  // b.none
   155c8:	b.hi	156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>  // b.pmore
   155cc:	add	w0, w0, #0x1
   155d0:	cmp	w0, w23
   155d4:	ccmp	w23, #0x2, #0x4, cs  // cs = hs, nlast
   155d8:	b.ne	157f4 <lzma_mode_is_supported@@XZ_5.0+0x3fc>  // b.any
   155dc:	sub	w26, w23, #0x1
   155e0:	ldr	w1, [x21, #740]
   155e4:	cmp	w26, #0x2
   155e8:	mov	w0, #0x2                   	// #2
   155ec:	mvn	x1, x1
   155f0:	csel	w26, w26, w0, cs  // cs = hs, nlast
   155f4:	mov	x2, x26
   155f8:	mov	x0, x24
   155fc:	add	x1, x24, x1
   15600:	bl	3360 <memcmp@plt>
   15604:	cbz	w0, 156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   15608:	ldr	w1, [x21, #744]
   1560c:	mov	x2, x26
   15610:	mov	x0, x24
   15614:	mvn	x1, x1
   15618:	add	x1, x24, x1
   1561c:	bl	3360 <memcmp@plt>
   15620:	cbz	w0, 156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   15624:	ldr	w1, [x21, #748]
   15628:	mov	x2, x26
   1562c:	mov	x0, x24
   15630:	mvn	x1, x1
   15634:	add	x1, x24, x1
   15638:	bl	3360 <memcmp@plt>
   1563c:	cbz	w0, 156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   15640:	ldr	w1, [x21, #752]
   15644:	mov	x2, x26
   15648:	mov	x0, x24
   1564c:	mvn	x1, x1
   15650:	add	x1, x24, x1
   15654:	bl	3360 <memcmp@plt>
   15658:	cbz	w0, 156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   1565c:	add	w25, w25, #0x4
   15660:	str	w23, [x20]
   15664:	str	w25, [x19]
   15668:	subs	w23, w23, #0x2
   1566c:	b.eq	157ec <lzma_mode_is_supported@@XZ_5.0+0x3f4>  // b.none
   15670:	ldr	x2, [x22, #56]
   15674:	mov	w1, w23
   15678:	mov	x0, x22
   1567c:	blr	x2
   15680:	ldr	w0, [x22, #28]
   15684:	ldp	x25, x26, [sp, #64]
   15688:	add	w23, w0, w23
   1568c:	str	w23, [x22, #28]
   15690:	b	156fc <lzma_mode_is_supported@@XZ_5.0+0x304>
   15694:	mov	w3, #0x111                 	// #273
   15698:	b	15470 <lzma_mode_is_supported@@XZ_5.0+0x78>
   1569c:	cmp	w12, #0x1
   156a0:	b.ls	156ec <lzma_mode_is_supported@@XZ_5.0+0x2f4>  // b.plast
   156a4:	ldr	x2, [x22, #56]
   156a8:	str	w13, [x19]
   156ac:	sub	w19, w12, #0x1
   156b0:	str	w12, [x20]
   156b4:	mov	w1, w19
   156b8:	mov	x0, x22
   156bc:	blr	x2
   156c0:	ldr	w0, [x22, #28]
   156c4:	ldp	x23, x24, [sp, #48]
   156c8:	add	w0, w0, w19
   156cc:	str	w0, [x22, #28]
   156d0:	ldp	x19, x20, [sp, #16]
   156d4:	ldp	x21, x22, [sp, #32]
   156d8:	ldp	x29, x30, [sp], #96
   156dc:	ret
   156e0:	cmp	w12, #0x1
   156e4:	b.hi	157cc <lzma_mode_is_supported@@XZ_5.0+0x3d4>  // b.pmore
   156e8:	ldp	x25, x26, [sp, #64]
   156ec:	mov	w1, #0xffffffff            	// #-1
   156f0:	mov	w0, #0x1                   	// #1
   156f4:	str	w1, [x19]
   156f8:	str	w0, [x20]
   156fc:	ldp	x19, x20, [sp, #16]
   15700:	ldp	x21, x22, [sp, #32]
   15704:	ldp	x23, x24, [sp, #48]
   15708:	ldp	x29, x30, [sp], #96
   1570c:	ret
   15710:	cmp	w3, #0x2
   15714:	mov	x4, #0x2                   	// #2
   15718:	b.ne	15730 <lzma_mode_is_supported@@XZ_5.0+0x338>  // b.any
   1571c:	b	15810 <lzma_mode_is_supported@@XZ_5.0+0x418>
   15720:	add	w0, w4, #0x1
   15724:	add	x4, x4, #0x1
   15728:	cmp	w3, w4
   1572c:	b.ls	15744 <lzma_mode_is_supported@@XZ_5.0+0x34c>  // b.plast
   15730:	ldrb	w8, [x2, x4]
   15734:	mov	w0, w4
   15738:	ldrb	w7, [x1, x4]
   1573c:	cmp	w8, w7
   15740:	b.eq	15720 <lzma_mode_is_supported@@XZ_5.0+0x328>  // b.none
   15744:	cmp	w0, w23
   15748:	b.cs	15818 <lzma_mode_is_supported@@XZ_5.0+0x420>  // b.hs, b.nlast
   1574c:	cmp	w0, w12
   15750:	csel	w9, w13, w9, ls  // ls = plast
   15754:	csel	w12, w12, w0, ls  // ls = plast
   15758:	mov	w13, w9
   1575c:	b	154b0 <lzma_mode_is_supported@@XZ_5.0+0xb8>
   15760:	add	x2, x21, #0x2f4
   15764:	add	x1, sp, #0x5c
   15768:	mov	x0, x22
   1576c:	bl	11560 <lzma_mf_is_supported@@XZ_5.0+0x5a0>
   15770:	mov	w6, w0
   15774:	b	15444 <lzma_mode_is_supported@@XZ_5.0+0x4c>
   15778:	ldr	w0, [sp, #92]
   1577c:	subs	w23, w6, #0x1
   15780:	str	w6, [x20]
   15784:	sub	w0, w0, #0x1
   15788:	add	x21, x21, x0, lsl #3
   1578c:	ldr	w0, [x21, #760]
   15790:	add	w0, w0, #0x4
   15794:	str	w0, [x19]
   15798:	b.eq	156fc <lzma_mode_is_supported@@XZ_5.0+0x304>  // b.none
   1579c:	ldr	x2, [x22, #56]
   157a0:	mov	w1, w23
   157a4:	mov	x0, x22
   157a8:	blr	x2
   157ac:	ldr	w0, [x22, #28]
   157b0:	ldp	x19, x20, [sp, #16]
   157b4:	add	w0, w0, w23
   157b8:	str	w0, [x22, #28]
   157bc:	ldp	x21, x22, [sp, #32]
   157c0:	ldp	x23, x24, [sp, #48]
   157c4:	ldp	x29, x30, [sp], #96
   157c8:	ret
   157cc:	ldp	x25, x26, [sp, #64]
   157d0:	b	156a4 <lzma_mode_is_supported@@XZ_5.0+0x2ac>
   157d4:	str	w2, [sp, #92]
   157d8:	mov	w23, w6
   157dc:	cmp	w25, #0x7f
   157e0:	ccmp	w23, #0x2, #0x0, hi  // hi = pmore
   157e4:	b.eq	156e0 <lzma_mode_is_supported@@XZ_5.0+0x2e8>  // b.none
   157e8:	b	15544 <lzma_mode_is_supported@@XZ_5.0+0x14c>
   157ec:	ldp	x25, x26, [sp, #64]
   157f0:	b	156fc <lzma_mode_is_supported@@XZ_5.0+0x304>
   157f4:	cmp	w1, w25, lsr #7
   157f8:	b.cs	155dc <lzma_mode_is_supported@@XZ_5.0+0x1e4>  // b.hs, b.nlast
   157fc:	ldp	x25, x26, [sp, #64]
   15800:	b	156ec <lzma_mode_is_supported@@XZ_5.0+0x2f4>
   15804:	cmp	w25, w1, lsr #7
   15808:	b.cc	155cc <lzma_mode_is_supported@@XZ_5.0+0x1d4>  // b.lo, b.ul, b.last
   1580c:	b	156e8 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   15810:	mov	w0, w4
   15814:	b	15744 <lzma_mode_is_supported@@XZ_5.0+0x34c>
   15818:	str	w9, [x19]
   1581c:	sub	w19, w0, #0x1
   15820:	str	w0, [x20]
   15824:	ldr	x2, [x22, #56]
   15828:	b	156b4 <lzma_mode_is_supported@@XZ_5.0+0x2bc>
   1582c:	nop
   15830:	ldr	w7, [x0, #2964]
   15834:	mov	w6, #0x8                   	// #8
   15838:	ldr	w9, [x0, #2968]
   1583c:	tst	w3, #0xff
   15840:	sub	w6, w6, w7
   15844:	mov	w8, #0x600                 	// #1536
   15848:	and	w1, w1, w9
   1584c:	add	w5, w5, #0x100
   15850:	lsr	w3, w2, w6
   15854:	lsl	w1, w1, w7
   15858:	add	w3, w1, w3
   1585c:	umaddl	x3, w3, w8, x0
   15860:	adrp	x8, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   15864:	add	x3, x3, #0xb9c
   15868:	b.ne	158ac <lzma_mode_is_supported@@XZ_5.0+0x4b4>  // b.any
   1586c:	ldr	x8, [x8, #3952]
   15870:	mov	w0, #0x0                   	// #0
   15874:	nop
   15878:	and	w1, w5, #0x1
   1587c:	lsr	w5, w5, #1
   15880:	neg	w1, w1
   15884:	cmp	w5, #0x1
   15888:	and	w2, w1, #0x7ff
   1588c:	lsl	w1, w5, #1
   15890:	ldrh	w1, [x3, x1]
   15894:	eor	w1, w1, w2
   15898:	lsr	w1, w1, #4
   1589c:	ldrb	w1, [x8, w1, uxtw]
   158a0:	add	w0, w0, w1
   158a4:	b.ne	15878 <lzma_mode_is_supported@@XZ_5.0+0x480>  // b.any
   158a8:	ret
   158ac:	ldr	x8, [x8, #3952]
   158b0:	mov	w6, #0x100                 	// #256
   158b4:	mov	w0, #0x0                   	// #0
   158b8:	mov	w9, #0xffff                	// #65535
   158bc:	nop
   158c0:	lsl	w4, w4, #1
   158c4:	sbfx	x1, x5, #7, #1
   158c8:	and	w2, w6, w4
   158cc:	and	w7, w1, #0x7ff
   158d0:	add	w2, w2, w5, lsr #8
   158d4:	lsl	w5, w5, #1
   158d8:	add	w2, w2, w6
   158dc:	eon	w1, w4, w5
   158e0:	and	w6, w6, w1
   158e4:	cmp	w5, w9
   158e8:	ldrh	w1, [x3, x2, lsl #1]
   158ec:	eor	w1, w1, w7
   158f0:	lsr	w1, w1, #4
   158f4:	ldrb	w1, [x8, w1, uxtw]
   158f8:	add	w0, w0, w1
   158fc:	b.ls	158c0 <lzma_mode_is_supported@@XZ_5.0+0x4c8>  // b.plast
   15900:	ret
   15904:	nop
   15908:	stp	x29, x30, [sp, #-368]!
   1590c:	mov	x29, sp
   15910:	stp	x23, x24, [sp, #48]
   15914:	mov	x23, x0
   15918:	add	x0, x0, #0x10, lsl #12
   1591c:	mov	x24, x1
   15920:	mov	x1, x0
   15924:	str	w4, [sp, #196]
   15928:	mov	x4, x0
   1592c:	str	x0, [sp, #264]
   15930:	ldr	w1, [x1, #3808]
   15934:	ldr	w0, [x0, #3804]
   15938:	stp	x2, x3, [sp, #304]
   1593c:	cmp	w0, w1
   15940:	b.eq	15984 <lzma_mode_is_supported@@XZ_5.0+0x58c>  // b.none
   15944:	mov	x5, x2
   15948:	mov	w2, w1
   1594c:	add	x0, x2, w1, uxtw #1
   15950:	lsl	x0, x0, #2
   15954:	sub	x0, x0, x2
   15958:	add	x0, x23, x0, lsl #2
   1595c:	add	x0, x0, #0x10, lsl #12
   15960:	ldr	w2, [x0, #3832]
   15964:	ldr	w0, [x0, #3836]
   15968:	sub	w1, w2, w1
   1596c:	str	w0, [x5]
   15970:	str	w1, [x3]
   15974:	str	w2, [x4, #3808]
   15978:	ldp	x23, x24, [sp, #48]
   1597c:	ldp	x29, x30, [sp], #368
   15980:	ret
   15984:	ldr	w0, [x24, #28]
   15988:	stp	x19, x20, [sp, #16]
   1598c:	ldr	w19, [x24, #96]
   15990:	cbnz	w0, 159ec <lzma_mode_is_supported@@XZ_5.0+0x5f4>
   15994:	ldr	x0, [sp, #264]
   15998:	ldr	w0, [x0, #3732]
   1599c:	cmp	w0, #0x7f
   159a0:	b.hi	17258 <lzma_mode_is_supported@@XZ_5.0+0x1e60>  // b.pmore
   159a4:	ldr	x0, [sp, #264]
   159a8:	ldr	w0, [x0, #3800]
   159ac:	cmp	w0, #0xf
   159b0:	b.hi	1718c <lzma_mode_is_supported@@XZ_5.0+0x1d94>  // b.pmore
   159b4:	add	x2, x23, #0x2f4
   159b8:	add	x1, sp, #0x15c
   159bc:	mov	x0, x24
   159c0:	bl	11560 <lzma_mf_is_supported@@XZ_5.0+0x5a0>
   159c4:	ldr	w4, [x24, #36]
   159c8:	mov	w12, w0
   159cc:	ldr	w9, [x24, #24]
   159d0:	add	w4, w4, #0x1
   159d4:	sub	w4, w4, w9
   159d8:	cmp	w4, #0x110
   159dc:	b.ls	15a10 <lzma_mode_is_supported@@XZ_5.0+0x618>  // b.plast
   159e0:	mov	w4, #0x111                 	// #273
   159e4:	stp	x27, x28, [sp, #80]
   159e8:	b	15a1c <lzma_mode_is_supported@@XZ_5.0+0x624>
   159ec:	ldr	w4, [x24, #36]
   159f0:	ldr	w0, [x23, #2948]
   159f4:	ldr	w9, [x24, #24]
   159f8:	add	w4, w4, #0x1
   159fc:	str	w0, [sp, #348]
   15a00:	sub	w4, w4, w9
   15a04:	ldr	w12, [x23, #2952]
   15a08:	cmp	w4, #0x110
   15a0c:	b.hi	159e0 <lzma_mode_is_supported@@XZ_5.0+0x5e8>  // b.pmore
   15a10:	cmp	w4, #0x1
   15a14:	b.ls	1755c <lzma_mode_is_supported@@XZ_5.0+0x2164>  // b.plast
   15a18:	stp	x27, x28, [sp, #80]
   15a1c:	add	x1, sp, #0x160
   15a20:	ldr	x0, [x24]
   15a24:	add	x11, x23, #0x2e4
   15a28:	mov	x3, x1
   15a2c:	mov	x10, x1
   15a30:	mov	w14, #0x0                   	// #0
   15a34:	mov	x1, #0x0                   	// #0
   15a38:	add	x9, x0, w9, uxtw
   15a3c:	mov	x16, #0x0                   	// #0
   15a40:	sub	x2, x9, #0x1
   15a44:	str	x3, [sp, #200]
   15a48:	ldurb	w15, [x9, #-1]
   15a4c:	ldr	w0, [x11, x1, lsl #2]
   15a50:	mov	w13, w1
   15a54:	mvn	x0, x0
   15a58:	add	x5, x2, x0
   15a5c:	ldrb	w0, [x2, x0]
   15a60:	cmp	w0, w15
   15a64:	b.ne	15a78 <lzma_mode_is_supported@@XZ_5.0+0x680>  // b.any
   15a68:	ldrb	w6, [x9]
   15a6c:	ldrb	w0, [x5, #1]
   15a70:	cmp	w6, w0
   15a74:	b.eq	1646c <lzma_mode_is_supported@@XZ_5.0+0x1074>  // b.none
   15a78:	str	wzr, [x3]
   15a7c:	add	x1, x1, #0x1
   15a80:	add	x3, x3, #0x4
   15a84:	cmp	x1, #0x4
   15a88:	b.ne	15a4c <lzma_mode_is_supported@@XZ_5.0+0x654>  // b.any
   15a8c:	ldr	x0, [sp, #200]
   15a90:	ldr	w27, [x0, x16, lsl #2]
   15a94:	cmp	w27, w19
   15a98:	b.cs	174c8 <lzma_mode_is_supported@@XZ_5.0+0x20d0>  // b.hs, b.nlast
   15a9c:	cmp	w12, w19
   15aa0:	b.cs	17508 <lzma_mode_is_supported@@XZ_5.0+0x2110>  // b.hs, b.nlast
   15aa4:	ldr	w18, [x23, #740]
   15aa8:	cmp	w12, #0x1
   15aac:	mov	w0, w18
   15ab0:	mvn	x0, x0
   15ab4:	ldrb	w19, [x2, x0]
   15ab8:	ccmp	w15, w19, #0x4, ls  // ls = plast
   15abc:	cset	w1, ne  // ne = any
   15ac0:	cmp	w27, #0x1
   15ac4:	cset	w0, ls  // ls = plast
   15ac8:	tst	w1, w0
   15acc:	b.ne	17558 <lzma_mode_is_supported@@XZ_5.0+0x2160>  // b.any
   15ad0:	ldr	w0, [x23, #736]
   15ad4:	mov	w5, w15
   15ad8:	ldr	w14, [x23, #2960]
   15adc:	mov	w4, w19
   15ae0:	ldr	w1, [sp, #196]
   15ae4:	cmp	w0, #0x6
   15ae8:	stp	x21, x22, [sp, #32]
   15aec:	ubfiz	x13, x0, #4, #32
   15af0:	and	w14, w1, w14
   15af4:	ldr	x22, [sp, #264]
   15af8:	add	x13, x13, x14
   15afc:	stp	x25, x26, [sp, #64]
   15b00:	adrp	x25, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   15b04:	add	x13, x23, x13, lsl #1
   15b08:	str	w0, [x22, #3812]
   15b0c:	add	x13, x13, #0x6, lsl #12
   15b10:	cset	w3, hi  // hi = pmore
   15b14:	mov	w20, w0
   15b18:	ldurb	w2, [x9, #-2]
   15b1c:	mov	x0, x23
   15b20:	ldrh	w21, [x13, #2972]
   15b24:	bl	15830 <lzma_mode_is_supported@@XZ_5.0+0x438>
   15b28:	lsr	w21, w21, #4
   15b2c:	ldr	x1, [x25, #3952]
   15b30:	add	x6, x23, x20, lsl #1
   15b34:	add	x6, x6, #0x6, lsl #12
   15b38:	mov	w2, #0xffffffff            	// #-1
   15b3c:	strb	wzr, [x22, #3860]
   15b40:	eor	w3, w21, #0x7f
   15b44:	ldrb	w4, [x1, w21, sxtw]
   15b48:	cmp	w15, w19
   15b4c:	str	w2, [x22, #3880]
   15b50:	add	w0, w4, w0
   15b54:	str	w0, [x22, #3872]
   15b58:	ldrb	w15, [x1, w3, uxtw]
   15b5c:	ldrh	w9, [x6, #3356]
   15b60:	lsr	w9, w9, #4
   15b64:	eor	w3, w9, #0x7f
   15b68:	ldrb	w5, [x1, w3, uxtw]
   15b6c:	add	w5, w5, w15
   15b70:	b.eq	17154 <lzma_mode_is_supported@@XZ_5.0+0x1d5c>  // b.none
   15b74:	cmp	w27, w12
   15b78:	csel	w21, w27, w12, cs  // cs = hs, nlast
   15b7c:	cmp	w21, #0x1
   15b80:	b.ls	1757c <lzma_mode_is_supported@@XZ_5.0+0x2184>  // b.plast
   15b84:	ldr	x4, [sp, #264]
   15b88:	mov	w1, #0x2c                  	// #44
   15b8c:	ldr	w0, [x23, #744]
   15b90:	add	x3, x23, #0x200
   15b94:	umaddl	x1, w21, w1, x23
   15b98:	str	d8, [sp, #96]
   15b9c:	str	w18, [x4, #3840]
   15ba0:	mov	w2, #0x40000000            	// #1073741824
   15ba4:	str	w0, [x4, #3844]
   15ba8:	add	x1, x1, #0x10, lsl #12
   15bac:	str	wzr, [x4, #3876]
   15bb0:	add	x1, x1, #0xef4
   15bb4:	mov	w0, w21
   15bb8:	ldur	x3, [x3, #236]
   15bbc:	str	x3, [x4, #3848]
   15bc0:	str	w2, [x1], #-44
   15bc4:	sub	w0, w0, #0x1
   15bc8:	cmp	w0, #0x1
   15bcc:	b.ne	15bc0 <lzma_mode_is_supported@@XZ_5.0+0x7c8>  // b.any
   15bd0:	ldr	x8, [x25, #3952]
   15bd4:	add	x3, x14, x14, lsl #4
   15bd8:	mov	x16, #0xba48                	// #47688
   15bdc:	add	x4, x23, x16
   15be0:	mov	x18, x8
   15be4:	mov	x16, #0xee8                 	// #3816
   15be8:	lsl	x3, x3, #4
   15bec:	mov	w2, #0x0                   	// #0
   15bf0:	mov	w17, #0x2c                  	// #44
   15bf4:	movk	x16, #0x1, lsl #16
   15bf8:	mov	w20, #0x2                   	// #2
   15bfc:	ldr	w7, [x10]
   15c00:	cmp	w7, #0x1
   15c04:	b.ls	15c78 <lzma_mode_is_supported@@XZ_5.0+0x880>  // b.plast
   15c08:	ldrh	w0, [x6, #3380]
   15c0c:	lsr	w0, w0, #4
   15c10:	cbnz	w2, 16f78 <lzma_mode_is_supported@@XZ_5.0+0x1b80>
   15c14:	ldrh	w1, [x13, #3452]
   15c18:	ldrb	w22, [x18, w0, sxtw]
   15c1c:	lsr	w0, w1, #4
   15c20:	eor	w0, w0, #0x7f
   15c24:	ldrb	w19, [x18, w0, uxtw]
   15c28:	add	w19, w19, w22
   15c2c:	umaddl	x1, w7, w17, x16
   15c30:	add	w19, w5, w19
   15c34:	sub	w7, w7, #0x2
   15c38:	add	x1, x23, x1
   15c3c:	nop
   15c40:	add	x0, x3, w7, uxtw
   15c44:	ldr	w22, [x1, #12]
   15c48:	sub	w7, w7, #0x1
   15c4c:	add	x0, x4, x0, lsl #2
   15c50:	ldr	w0, [x0, #1028]
   15c54:	add	w0, w19, w0
   15c58:	cmp	w0, w22
   15c5c:	b.cs	15c6c <lzma_mode_is_supported@@XZ_5.0+0x874>  // b.hs, b.nlast
   15c60:	strb	wzr, [x1]
   15c64:	stp	w0, wzr, [x1, #12]
   15c68:	str	w2, [x1, #20]
   15c6c:	sub	x1, x1, #0x2c
   15c70:	cmn	w7, #0x1
   15c74:	b.ne	15c40 <lzma_mode_is_supported@@XZ_5.0+0x848>  // b.any
   15c78:	add	w2, w2, #0x1
   15c7c:	add	x10, x10, #0x4
   15c80:	cmp	w2, #0x4
   15c84:	b.ne	15bfc <lzma_mode_is_supported@@XZ_5.0+0x804>  // b.any
   15c88:	ldr	w1, [sp, #352]
   15c8c:	cmp	w1, #0x0
   15c90:	csinc	w1, w1, wzr, ne  // ne = any
   15c94:	add	w1, w1, #0x1
   15c98:	cmp	w12, w1
   15c9c:	b.cs	16fe4 <lzma_mode_is_supported@@XZ_5.0+0x1bec>  // b.hs, b.nlast
   15ca0:	cmn	w21, #0x1
   15ca4:	b.eq	16e2c <lzma_mode_is_supported@@XZ_5.0+0x1a34>  // b.none
   15ca8:	add	x2, x23, #0xb84
   15cac:	str	x2, [sp, #232]
   15cb0:	add	x2, x23, #0x2f4
   15cb4:	str	x2, [sp, #240]
   15cb8:	ldp	x0, x1, [x11]
   15cbc:	mov	x11, #0xba48                	// #47688
   15cc0:	add	x2, x23, x11
   15cc4:	mov	x27, x25
   15cc8:	str	x2, [sp, #168]
   15ccc:	add	x2, x23, #0x10, lsl #12
   15cd0:	add	x2, x2, #0xf20
   15cd4:	mov	w26, #0x1                   	// #1
   15cd8:	str	x2, [sp, #160]
   15cdc:	stp	x0, x1, [sp, #352]
   15ce0:	mov	x0, x24
   15ce4:	ldp	x1, x2, [sp, #232]
   15ce8:	bl	11560 <lzma_mf_is_supported@@XZ_5.0+0x5a0>
   15cec:	str	w0, [x23, #2952]
   15cf0:	ldr	w1, [x24, #96]
   15cf4:	mov	w22, w0
   15cf8:	str	w1, [sp, #148]
   15cfc:	cmp	w0, w1
   15d00:	b.cs	16e4c <lzma_mode_is_supported@@XZ_5.0+0x1a54>  // b.hs, b.nlast
   15d04:	mov	w7, w26
   15d08:	ldr	w20, [x24, #36]
   15d0c:	add	x0, x7, w26, uxtw #1
   15d10:	ldr	w28, [x24, #24]
   15d14:	add	w20, w20, #0x1
   15d18:	mov	w1, #0xfff                 	// #4095
   15d1c:	lsl	x0, x0, #2
   15d20:	sub	w1, w1, w26
   15d24:	sub	x0, x0, x7
   15d28:	sub	w20, w20, w28
   15d2c:	cmp	w20, w1
   15d30:	mov	w2, w28
   15d34:	add	x0, x23, x0, lsl #2
   15d38:	csel	w20, w20, w1, ls  // ls = plast
   15d3c:	add	x0, x0, #0x10, lsl #12
   15d40:	ldr	w1, [sp, #196]
   15d44:	ldr	x28, [x24]
   15d48:	add	w1, w1, w26
   15d4c:	ldrb	w10, [x0, #3816]
   15d50:	sub	x4, x2, #0x1
   15d54:	str	w1, [sp, #152]
   15d58:	add	x19, x28, x4
   15d5c:	ldr	w1, [x23, #2948]
   15d60:	str	x2, [sp, #112]
   15d64:	str	w1, [sp, #192]
   15d68:	ldr	w5, [x0, #3832]
   15d6c:	cbz	w10, 16784 <lzma_mode_is_supported@@XZ_5.0+0x138c>
   15d70:	ldrb	w3, [x0, #3817]
   15d74:	sub	w11, w5, #0x1
   15d78:	cbz	w3, 16cc0 <lzma_mode_is_supported@@XZ_5.0+0x18c8>
   15d7c:	ldr	w2, [x0, #3820]
   15d80:	ldr	w8, [x0, #3824]
   15d84:	mov	w1, w2
   15d88:	cmp	w8, #0x3
   15d8c:	b.hi	16c70 <lzma_mode_is_supported@@XZ_5.0+0x1878>  // b.pmore
   15d90:	cmp	w5, w26
   15d94:	b.eq	17468 <lzma_mode_is_supported@@XZ_5.0+0x2070>  // b.none
   15d98:	mov	w5, w2
   15d9c:	mov	w25, #0x8                   	// #8
   15da0:	add	x0, x1, x1, lsl #1
   15da4:	mov	x6, #0x43bc                	// #17340
   15da8:	lsl	x0, x0, #2
   15dac:	sub	x0, x0, x1
   15db0:	add	x0, x0, w8, uxtw
   15db4:	add	x0, x0, x6
   15db8:	add	x0, x23, x0, lsl #2
   15dbc:	ldr	s8, [x0, #16]
   15dc0:	str	s8, [sp, #352]
   15dc4:	cbz	w8, 16f64 <lzma_mode_is_supported@@XZ_5.0+0x1b6c>
   15dc8:	mov	w1, #0x2c                  	// #44
   15dcc:	sub	w2, w8, #0x1
   15dd0:	ldr	x0, [sp, #200]
   15dd4:	umaddl	x1, w5, w1, x23
   15dd8:	add	x2, x2, #0x1
   15ddc:	str	w5, [sp, #136]
   15de0:	add	x1, x1, #0x10, lsl #12
   15de4:	add	x0, x0, #0x4
   15de8:	lsl	x2, x2, #2
   15dec:	add	x1, x1, #0xf00
   15df0:	str	w8, [sp, #176]
   15df4:	str	x4, [sp, #184]
   15df8:	str	x7, [sp, #208]
   15dfc:	bl	30c0 <memcpy@plt>
   15e00:	ldr	w8, [sp, #176]
   15e04:	ldr	w5, [sp, #136]
   15e08:	cmp	w8, #0x3
   15e0c:	add	w8, w8, #0x1
   15e10:	ldr	x4, [sp, #184]
   15e14:	ldr	x7, [sp, #208]
   15e18:	b.eq	16f50 <lzma_mode_is_supported@@XZ_5.0+0x1b58>  // b.none
   15e1c:	mov	w3, #0xb                   	// #11
   15e20:	mov	x1, #0x43c0                	// #17344
   15e24:	add	w0, w8, #0x1
   15e28:	mov	w2, #0x3                   	// #3
   15e2c:	umaddl	x5, w5, w3, x1
   15e30:	cmp	w0, #0x4
   15e34:	sub	w2, w2, w8
   15e38:	mov	x1, #0x4                   	// #4
   15e3c:	ldr	x0, [sp, #200]
   15e40:	add	x5, x5, w8, uxtw
   15e44:	add	x2, x2, #0x1
   15e48:	str	x4, [sp, #136]
   15e4c:	str	x7, [sp, #176]
   15e50:	lsl	x2, x2, #2
   15e54:	add	x0, x0, w8, uxtw #2
   15e58:	csel	x2, x2, x1, ls  // ls = plast
   15e5c:	add	x1, x23, x5, lsl #2
   15e60:	bl	30c0 <memcpy@plt>
   15e64:	add	x4, sp, #0x168
   15e68:	mov	w3, #0x1                   	// #1
   15e6c:	ldr	x7, [sp, #176]
   15e70:	ldp	s8, s0, [x4, #-8]
   15e74:	ldp	s2, s1, [x4]
   15e78:	ldr	x4, [sp, #136]
   15e7c:	add	x2, x7, x7, lsl #1
   15e80:	mov	v3.16b, v8.16b
   15e84:	ldr	w1, [sp, #152]
   15e88:	lsl	x2, x2, #2
   15e8c:	ubfiz	x5, x25, #4, #32
   15e90:	sub	x2, x2, x7
   15e94:	fmov	w11, s8
   15e98:	mov	w13, w25
   15e9c:	mov	x0, x23
   15ea0:	mov	v3.s[1], v0.s[0]
   15ea4:	lsl	x2, x2, #2
   15ea8:	add	x7, x23, x2
   15eac:	add	x2, x2, #0x10, lsl #12
   15eb0:	add	x7, x7, #0x10, lsl #12
   15eb4:	add	x2, x2, #0xef0
   15eb8:	add	x2, x23, x2
   15ebc:	mvn	x11, x11
   15ec0:	mov	v0.16b, v3.16b
   15ec4:	str	w25, [x7, #3812]
   15ec8:	mov	v0.s[2], v2.s[0]
   15ecc:	mov	v0.s[3], v1.s[0]
   15ed0:	str	q0, [x2, #16]
   15ed4:	ldr	w10, [x23, #2960]
   15ed8:	ldrb	w18, [x28, x4]
   15edc:	and	w10, w1, w10
   15ee0:	ldr	w14, [x7, #3828]
   15ee4:	add	x4, x5, x10
   15ee8:	ldurb	w2, [x19, #-1]
   15eec:	ldrb	w15, [x19, x11]
   15ef0:	mov	w5, w18
   15ef4:	add	x7, x23, x4, lsl #1
   15ef8:	add	x6, x7, #0x6, lsl #12
   15efc:	mov	w4, w15
   15f00:	str	x6, [sp, #216]
   15f04:	ldrh	w12, [x6, #2972]
   15f08:	lsr	w12, w12, #4
   15f0c:	bl	15830 <lzma_mode_is_supported@@XZ_5.0+0x438>
   15f10:	add	w0, w14, w0
   15f14:	add	w30, w26, #0x1
   15f18:	add	w4, w26, #0x1
   15f1c:	ldr	x3, [x27, #3952]
   15f20:	add	x2, x30, x30, lsl #1
   15f24:	str	w4, [sp, #136]
   15f28:	mov	w1, #0x0                   	// #0
   15f2c:	lsl	x2, x2, #2
   15f30:	sub	x2, x2, x30
   15f34:	ldrb	w3, [x3, w12, sxtw]
   15f38:	add	x2, x23, x2, lsl #2
   15f3c:	add	w0, w3, w0
   15f40:	add	x2, x2, #0x10, lsl #12
   15f44:	ldr	w3, [x2, #3828]
   15f48:	cmp	w0, w3
   15f4c:	b.cs	15f78 <lzma_mode_is_supported@@XZ_5.0+0xb80>  // b.hs, b.nlast
   15f50:	mov	w1, #0x2c                  	// #44
   15f54:	str	w0, [x2, #3828]
   15f58:	str	w26, [x2, #3832]
   15f5c:	mov	w3, #0xffffffff            	// #-1
   15f60:	umaddl	x2, w4, w1, x23
   15f64:	mov	w1, #0x1                   	// #1
   15f68:	add	x2, x2, #0x10, lsl #12
   15f6c:	add	x2, x2, #0xee4
   15f70:	strb	wzr, [x2, #4]
   15f74:	str	w3, [x2, #24]
   15f78:	add	x13, x23, x13, lsl #1
   15f7c:	eor	w12, w12, #0x7f
   15f80:	add	x17, x13, #0x6, lsl #12
   15f84:	cmp	w18, w15
   15f88:	ldr	x2, [x27, #3952]
   15f8c:	ldrh	w3, [x17, #3356]
   15f90:	ldrb	w4, [x2, w12, uxtw]
   15f94:	lsr	w9, w3, #4
   15f98:	eor	w3, w9, #0x7f
   15f9c:	add	w18, w4, w14
   15fa0:	ldrb	w2, [x2, w3, uxtw]
   15fa4:	add	w2, w2, w18
   15fa8:	str	w2, [sp, #184]
   15fac:	b.eq	16bc0 <lzma_mode_is_supported@@XZ_5.0+0x17c8>  // b.none
   15fb0:	cmp	w20, #0x1
   15fb4:	b.ls	16748 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.plast
   15fb8:	ldr	w2, [sp, #148]
   15fbc:	cmp	w2, w20
   15fc0:	csel	w4, w2, w20, ls  // ls = plast
   15fc4:	cbnz	w1, 16170 <lzma_mode_is_supported@@XZ_5.0+0xd78>
   15fc8:	add	w2, w2, #0x1
   15fcc:	cmp	w2, w20
   15fd0:	csel	w2, w2, w20, ls  // ls = plast
   15fd4:	cmp	w2, #0x1
   15fd8:	b.ls	16170 <lzma_mode_is_supported@@XZ_5.0+0xd78>  // b.plast
   15fdc:	ldr	x1, [sp, #112]
   15fe0:	add	x28, x28, x1
   15fe4:	mov	w1, #0x1                   	// #1
   15fe8:	b	15ff8 <lzma_mode_is_supported@@XZ_5.0+0xc00>
   15fec:	cmp	w2, w3
   15ff0:	b.eq	16018 <lzma_mode_is_supported@@XZ_5.0+0xc20>  // b.none
   15ff4:	mov	w1, w3
   15ff8:	ldrb	w6, [x28]
   15ffc:	add	w3, w1, #0x1
   16000:	ldrb	w5, [x28, x11]
   16004:	add	x28, x28, #0x1
   16008:	cmp	w6, w5
   1600c:	b.eq	15fec <lzma_mode_is_supported@@XZ_5.0+0xbf4>  // b.none
   16010:	mov	w2, w1
   16014:	sub	w1, w1, #0x1
   16018:	cmp	w1, #0x1
   1601c:	b.ls	16170 <lzma_mode_is_supported@@XZ_5.0+0xd78>  // b.plast
   16020:	cmp	w25, #0x3
   16024:	mov	w6, #0x0                   	// #0
   16028:	b.ls	1603c <lzma_mode_is_supported@@XZ_5.0+0xc44>  // b.plast
   1602c:	cmp	w25, #0x9
   16030:	sub	w6, w25, #0x3
   16034:	sub	w3, w25, #0x6
   16038:	csel	w6, w3, w6, hi  // hi = pmore
   1603c:	ldr	w8, [sp, #136]
   16040:	ubfiz	x7, x6, #4, #32
   16044:	ldr	w5, [sp, #196]
   16048:	add	x6, x23, w6, uxtw #1
   1604c:	ldr	w3, [x23, #2960]
   16050:	add	x6, x6, #0x6, lsl #12
   16054:	add	w5, w5, w8
   16058:	add	w1, w8, w1
   1605c:	and	w5, w5, w3
   16060:	cmp	w1, w21
   16064:	add	x7, x7, x5
   16068:	ldrh	w8, [x6, #3356]
   1606c:	ldr	x11, [x27, #3952]
   16070:	add	x7, x23, x7, lsl #1
   16074:	add	x7, x7, #0x6, lsl #12
   16078:	lsr	w8, w8, #4
   1607c:	eor	w8, w8, #0x7f
   16080:	ldrh	w3, [x7, #2972]
   16084:	ldrb	w8, [x11, w8, uxtw]
   16088:	lsr	w3, w3, #4
   1608c:	eor	w3, w3, #0x7f
   16090:	ldrb	w11, [x11, w3, uxtw]
   16094:	add	w11, w11, w8
   16098:	b.ls	160e8 <lzma_mode_is_supported@@XZ_5.0+0xcf0>  // b.plast
   1609c:	add	w13, w21, #0x1
   160a0:	mvn	w8, w21
   160a4:	add	w8, w8, w1
   160a8:	mov	w21, #0x2c                  	// #44
   160ac:	add	x8, x8, w13, uxtw
   160b0:	mov	w12, #0x40000000            	// #1073741824
   160b4:	umaddl	x21, w13, w21, x23
   160b8:	add	x3, x8, x8, lsl #1
   160bc:	add	x21, x21, #0x10, lsl #12
   160c0:	lsl	x3, x3, #2
   160c4:	add	x21, x21, #0xef4
   160c8:	sub	x3, x3, x8
   160cc:	ldr	x8, [sp, #160]
   160d0:	add	x3, x8, x3, lsl #2
   160d4:	nop
   160d8:	str	w12, [x21], #44
   160dc:	cmp	x3, x21
   160e0:	b.ne	160d8 <lzma_mode_is_supported@@XZ_5.0+0xce0>  // b.any
   160e4:	mov	w21, w1
   160e8:	add	x5, x5, x5, lsl #4
   160ec:	sub	w2, w2, #0x3
   160f0:	mov	w3, w1
   160f4:	ldrh	w7, [x7, #3452]
   160f8:	add	x5, x2, x5, lsl #4
   160fc:	add	x1, x3, w1, uxtw #1
   16100:	ldr	x2, [sp, #168]
   16104:	lsl	x1, x1, #2
   16108:	ldrh	w6, [x6, #3380]
   1610c:	sub	x1, x1, x3
   16110:	lsr	w7, w7, #4
   16114:	add	x5, x2, x5, lsl #2
   16118:	eor	w7, w7, #0x7f
   1611c:	ldr	x2, [x27, #3952]
   16120:	lsr	w6, w6, #4
   16124:	add	x1, x23, x1, lsl #2
   16128:	ldr	w3, [x5, #1028]
   1612c:	add	x1, x1, #0x10, lsl #12
   16130:	ldrb	w5, [x2, w7, uxtw]
   16134:	add	w0, w0, w3
   16138:	ldrb	w2, [x2, w6, sxtw]
   1613c:	add	w0, w0, w11
   16140:	ldr	w6, [x1, #3828]
   16144:	add	w5, w5, w2
   16148:	add	w0, w5, w0
   1614c:	cmp	w0, w6
   16150:	b.cs	16170 <lzma_mode_is_supported@@XZ_5.0+0xd78>  // b.hs, b.nlast
   16154:	str	w0, [x1, #3828]
   16158:	mov	w0, #0x1                   	// #1
   1615c:	strh	w0, [x1, #3816]
   16160:	ldr	w0, [sp, #136]
   16164:	str	w0, [x1, #3832]
   16168:	str	wzr, [x1, #3836]
   1616c:	nop
   16170:	cmp	w25, #0x6
   16174:	mov	x5, #0x8                   	// #8
   16178:	mov	x3, #0xb                   	// #11
   1617c:	csel	x3, x5, x3, ls  // ls = plast
   16180:	sub	w0, w3, #0x6
   16184:	cmp	w3, #0x9
   16188:	sub	w1, w3, #0x3
   1618c:	lsl	x3, x3, #4
   16190:	csel	w1, w1, w0, ls  // ls = plast
   16194:	add	x0, x10, x10, lsl #4
   16198:	ldr	x11, [sp, #200]
   1619c:	add	x2, x23, x1, lsl #1
   161a0:	ldr	x28, [x27, #3952]
   161a4:	lsl	x1, x1, #4
   161a8:	lsl	x0, x0, #4
   161ac:	add	x2, x2, #0x6, lsl #12
   161b0:	str	w26, [sp, #112]
   161b4:	str	x17, [sp, #208]
   161b8:	str	x0, [sp, #224]
   161bc:	add	w0, w26, #0x2
   161c0:	str	w0, [sp, #176]
   161c4:	stp	x28, x2, [sp, #248]
   161c8:	stp	x3, x1, [sp, #272]
   161cc:	mov	w1, #0x2                   	// #2
   161d0:	mov	w3, #0x0                   	// #0
   161d4:	stp	x28, x28, [sp, #288]
   161d8:	str	w5, [sp, #320]
   161dc:	ldr	w0, [x11]
   161e0:	ldrb	w2, [x19]
   161e4:	mvn	x0, x0
   161e8:	add	x6, x19, x0
   161ec:	ldrb	w0, [x19, x0]
   161f0:	cmp	w2, w0
   161f4:	b.ne	16208 <lzma_mode_is_supported@@XZ_5.0+0xe10>  // b.any
   161f8:	ldrb	w2, [x19, #1]
   161fc:	ldrb	w0, [x6, #1]
   16200:	cmp	w2, w0
   16204:	b.eq	167cc <lzma_mode_is_supported@@XZ_5.0+0x13d4>  // b.none
   16208:	add	w3, w3, #0x1
   1620c:	add	x11, x11, #0x4
   16210:	cmp	w3, #0x4
   16214:	b.ne	161dc <lzma_mode_is_supported@@XZ_5.0+0xde4>  // b.any
   16218:	ldr	w26, [sp, #112]
   1621c:	cmp	w22, w4
   16220:	b.ls	16260 <lzma_mode_is_supported@@XZ_5.0+0xe68>  // b.plast
   16224:	ldr	w0, [x23, #756]
   16228:	cmp	w0, w4
   1622c:	b.cs	174a8 <lzma_mode_is_supported@@XZ_5.0+0x20b0>  // b.hs, b.nlast
   16230:	add	x2, x23, #0x2fc
   16234:	mov	w0, #0x0                   	// #0
   16238:	ldr	w3, [x2], #8
   1623c:	mov	w5, w0
   16240:	add	w0, w0, #0x1
   16244:	cmp	w3, w4
   16248:	b.cc	16238 <lzma_mode_is_supported@@XZ_5.0+0xe40>  // b.lo, b.ul, b.last
   1624c:	add	w2, w5, #0x2
   16250:	str	w2, [sp, #192]
   16254:	add	x0, x23, w0, uxtw #3
   16258:	mov	w22, w4
   1625c:	str	w4, [x0, #756]
   16260:	cmp	w22, w1
   16264:	b.cc	16748 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.lo, b.ul, b.last
   16268:	ldr	x0, [x27, #3952]
   1626c:	add	w22, w22, w26
   16270:	cmp	w21, w22
   16274:	ldrb	w28, [x0, w9, sxtw]
   16278:	add	w28, w28, w18
   1627c:	b.cs	174c0 <lzma_mode_is_supported@@XZ_5.0+0x20c8>  // b.hs, b.nlast
   16280:	mvn	w0, w21
   16284:	add	w21, w21, #0x1
   16288:	add	w0, w0, w22
   1628c:	mov	w4, #0x2c                  	// #44
   16290:	add	x3, x0, w21, uxtw
   16294:	mov	w2, #0x40000000            	// #1073741824
   16298:	umaddl	x21, w21, w4, x23
   1629c:	add	x0, x3, x3, lsl #1
   162a0:	add	x21, x21, #0x10, lsl #12
   162a4:	lsl	x0, x0, #2
   162a8:	add	x21, x21, #0xef4
   162ac:	sub	x0, x0, x3
   162b0:	ldr	x3, [sp, #160]
   162b4:	add	x0, x3, x0, lsl #2
   162b8:	str	w2, [x21], #44
   162bc:	cmp	x0, x21
   162c0:	b.ne	162b8 <lzma_mode_is_supported@@XZ_5.0+0xec0>  // b.any
   162c4:	ldr	w0, [x23, #756]
   162c8:	cmp	w1, w0
   162cc:	b.ls	174b8 <lzma_mode_is_supported@@XZ_5.0+0x20c0>  // b.plast
   162d0:	add	x0, x23, #0x2fc
   162d4:	mov	w8, #0x0                   	// #0
   162d8:	ldr	w2, [x0], #8
   162dc:	add	w8, w8, #0x1
   162e0:	cmp	w2, w1
   162e4:	b.cc	162d8 <lzma_mode_is_supported@@XZ_5.0+0xee0>  // b.lo, b.ul, b.last
   162e8:	cmp	w25, #0x6
   162ec:	mov	w2, #0x7                   	// #7
   162f0:	mov	w0, #0xa                   	// #10
   162f4:	csel	w0, w2, w0, ls  // ls = plast
   162f8:	cmp	w0, #0xa
   162fc:	sub	w17, w0, #0x3
   16300:	mov	w2, #0x4                   	// #4
   16304:	add	x10, x10, x10, lsl #4
   16308:	csel	w17, w17, w2, ne  // ne = any
   1630c:	mov	w3, w8
   16310:	ldr	x2, [x27, #3952]
   16314:	ubfiz	x0, x0, #4, #4
   16318:	stp	x2, x0, [sp, #208]
   1631c:	lsl	x2, x10, #4
   16320:	mov	w4, w1
   16324:	adrp	x18, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   16328:	add	x1, x23, x3, lsl #3
   1632c:	str	x2, [sp, #112]
   16330:	cmp	w4, #0x5
   16334:	ldr	w2, [sp, #152]
   16338:	mov	w21, w22
   1633c:	ldr	x18, [x18, #4000]
   16340:	sub	w2, w2, #0x1
   16344:	mov	x22, #0x7200                	// #29184
   16348:	add	x0, x23, x22
   1634c:	str	x18, [sp, #152]
   16350:	add	x16, x23, x17, lsl #1
   16354:	str	x18, [sp, #176]
   16358:	add	x16, x16, #0x6, lsl #12
   1635c:	str	w2, [sp, #184]
   16360:	ldr	w2, [x1, #760]
   16364:	str	x0, [sp, #224]
   16368:	mov	w0, #0x5                   	// #5
   1636c:	csel	w0, w4, w0, ls  // ls = plast
   16370:	cmp	w2, #0x7f
   16374:	sub	w0, w0, #0x2
   16378:	b.hi	16420 <lzma_mode_is_supported@@XZ_5.0+0x1028>  // b.pmore
   1637c:	nop
   16380:	ubfiz	x0, x0, #7, #32
   16384:	mov	x15, #0x41a4                	// #16804
   16388:	add	x0, x0, w2, uxtw
   1638c:	add	x0, x0, x15
   16390:	ldr	w5, [x23, x0, lsl #2]
   16394:	ldr	x0, [sp, #112]
   16398:	add	w7, w4, w26
   1639c:	sub	w6, w4, #0x2
   163a0:	ldr	x9, [sp, #224]
   163a4:	add	x6, x0, x6
   163a8:	add	x0, x7, x7, lsl #1
   163ac:	lsl	x0, x0, #2
   163b0:	add	x6, x9, x6, lsl #2
   163b4:	sub	x0, x0, x7
   163b8:	add	x0, x23, x0, lsl #2
   163bc:	ldr	w12, [x6, #1028]
   163c0:	add	x0, x0, #0x10, lsl #12
   163c4:	add	w12, w28, w12
   163c8:	add	w6, w12, w5
   163cc:	ldr	w5, [x0, #3828]
   163d0:	cmp	w6, w5
   163d4:	b.cs	163ec <lzma_mode_is_supported@@XZ_5.0+0xff4>  // b.hs, b.nlast
   163d8:	add	w5, w2, #0x4
   163dc:	strb	wzr, [x0, #3816]
   163e0:	str	w6, [x0, #3828]
   163e4:	str	w26, [x0, #3832]
   163e8:	str	w5, [x0, #3836]
   163ec:	ldr	w0, [x1, #756]
   163f0:	add	w7, w4, #0x1
   163f4:	cmp	w4, w0
   163f8:	b.eq	164c0 <lzma_mode_is_supported@@XZ_5.0+0x10c8>  // b.none
   163fc:	mov	w4, w7
   16400:	add	x1, x23, x3, lsl #3
   16404:	cmp	w4, #0x5
   16408:	mov	w0, #0x5                   	// #5
   1640c:	csel	w0, w4, w0, ls  // ls = plast
   16410:	sub	w0, w0, #0x2
   16414:	ldr	w2, [x1, #760]
   16418:	cmp	w2, #0x7f
   1641c:	b.ls	16380 <lzma_mode_is_supported@@XZ_5.0+0xf88>  // b.plast
   16420:	mov	w5, #0x7ffff               	// #524287
   16424:	cmp	w2, w5
   16428:	b.ls	1675c <lzma_mode_is_supported@@XZ_5.0+0x1364>  // b.plast
   1642c:	tbz	w2, #31, 16770 <lzma_mode_is_supported@@XZ_5.0+0x1378>
   16430:	lsr	w5, w2, #30
   16434:	ldrb	w5, [x18, w5, uxtw]
   16438:	add	w5, w5, #0x3c
   1643c:	and	x6, x2, #0xf
   16440:	ubfiz	x0, x0, #6, #32
   16444:	mov	x13, #0x43a4                	// #17316
   16448:	add	x6, x6, x13
   1644c:	add	x5, x0, x5
   16450:	mov	x14, #0x40a4                	// #16548
   16454:	add	x6, x23, x6, lsl #2
   16458:	add	x5, x5, x14
   1645c:	ldr	w6, [x6, #8]
   16460:	ldr	w0, [x23, x5, lsl #2]
   16464:	add	w5, w6, w0
   16468:	b	16394 <lzma_mode_is_supported@@XZ_5.0+0xf9c>
   1646c:	cmp	w4, #0x2
   16470:	mov	x0, #0x2                   	// #2
   16474:	b.ne	1648c <lzma_mode_is_supported@@XZ_5.0+0x1094>  // b.any
   16478:	b	175a4 <lzma_mode_is_supported@@XZ_5.0+0x21ac>
   1647c:	add	w6, w0, #0x1
   16480:	add	x0, x0, #0x1
   16484:	cmp	w4, w0
   16488:	b.ls	164a0 <lzma_mode_is_supported@@XZ_5.0+0x10a8>  // b.plast
   1648c:	ldrb	w8, [x2, x0]
   16490:	mov	w6, w0
   16494:	ldrb	w7, [x5, x0]
   16498:	cmp	w8, w7
   1649c:	b.eq	1647c <lzma_mode_is_supported@@XZ_5.0+0x1084>  // b.none
   164a0:	ldr	x0, [sp, #200]
   164a4:	str	w6, [x3]
   164a8:	ldr	w0, [x0, x16, lsl #2]
   164ac:	cmp	w0, w6
   164b0:	b.cs	15a7c <lzma_mode_is_supported@@XZ_5.0+0x684>  // b.hs, b.nlast
   164b4:	mov	w16, w13
   164b8:	mov	x14, x16
   164bc:	b	15a7c <lzma_mode_is_supported@@XZ_5.0+0x684>
   164c0:	ldr	w0, [sp, #148]
   164c4:	mov	w11, w2
   164c8:	mvn	x11, x11
   164cc:	add	w1, w0, w7
   164d0:	add	x11, x19, x11
   164d4:	cmp	w1, w20
   164d8:	csel	w1, w1, w20, ls  // ls = plast
   164dc:	cmp	w1, w7
   164e0:	b.ls	16520 <lzma_mode_is_supported@@XZ_5.0+0x1128>  // b.plast
   164e4:	mov	w0, w7
   164e8:	b	164fc <lzma_mode_is_supported@@XZ_5.0+0x1104>
   164ec:	add	w3, w0, #0x1
   164f0:	add	x0, x0, #0x1
   164f4:	cmp	w1, w0
   164f8:	b.ls	16510 <lzma_mode_is_supported@@XZ_5.0+0x1118>  // b.plast
   164fc:	ldrb	w9, [x19, x0]
   16500:	mov	w3, w0
   16504:	ldrb	w5, [x11, x0]
   16508:	cmp	w9, w5
   1650c:	b.eq	164ec <lzma_mode_is_supported@@XZ_5.0+0x10f4>  // b.none
   16510:	sub	w3, w3, w4
   16514:	sub	w0, w3, #0x1
   16518:	cmp	w0, #0x1
   1651c:	b.hi	1653c <lzma_mode_is_supported@@XZ_5.0+0x1144>  // b.pmore
   16520:	ldr	w0, [sp, #192]
   16524:	add	w8, w8, #0x1
   16528:	cmp	w8, w0
   1652c:	b.eq	16748 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.none
   16530:	mov	w3, w8
   16534:	mov	w4, w7
   16538:	b	16400 <lzma_mode_is_supported@@XZ_5.0+0x1008>
   1653c:	ldr	w1, [sp, #184]
   16540:	sub	w10, w4, #0x1
   16544:	ldr	w14, [x23, #2960]
   16548:	mov	w22, #0xffff                	// #65535
   1654c:	ldr	x12, [sp, #216]
   16550:	add	w1, w1, w7
   16554:	ldr	w5, [x23, #2964]
   16558:	and	w9, w14, w1
   1655c:	add	x9, x12, x9
   16560:	mov	w12, #0x8                   	// #8
   16564:	sub	w15, w12, w5
   16568:	mov	x12, #0x35c8                	// #13768
   1656c:	add	x9, x9, x12
   16570:	mov	w13, w1
   16574:	ldrb	w12, [x19, w10, uxtw]
   16578:	ldr	w1, [x23, #2968]
   1657c:	add	x9, x23, x9, lsl #1
   16580:	ldrb	w11, [x11, w4, uxtw]
   16584:	and	w10, w13, w1
   16588:	lsr	w12, w12, w15
   1658c:	ldr	x15, [sp, #208]
   16590:	lsl	w5, w10, w5
   16594:	add	w5, w12, w5
   16598:	ldrh	w12, [x9, #12]
   1659c:	ldrb	w4, [x19, w4, uxtw]
   165a0:	mov	x10, #0xb9c                 	// #2972
   165a4:	mov	w9, #0x600                 	// #1536
   165a8:	and	w1, w14, w13
   165ac:	lsr	w12, w12, #4
   165b0:	add	w4, w4, #0x100
   165b4:	ldr	x13, [x27, #3952]
   165b8:	umaddl	x5, w5, w9, x10
   165bc:	ldrb	w12, [x15, w12, sxtw]
   165c0:	mov	w10, #0x100                 	// #256
   165c4:	mov	w9, #0x0                   	// #0
   165c8:	add	w12, w12, w6
   165cc:	nop
   165d0:	lsl	w11, w11, #1
   165d4:	sbfx	x15, x4, #7, #1
   165d8:	and	w6, w11, w10
   165dc:	and	w15, w15, #0x7ff
   165e0:	add	w6, w6, w4, lsr #8
   165e4:	lsl	w4, w4, #1
   165e8:	add	w6, w6, w10
   165ec:	eon	w25, w11, w4
   165f0:	cmp	w4, w22
   165f4:	and	w10, w10, w25
   165f8:	add	x6, x5, w6, uxtw #1
   165fc:	ldrh	w6, [x23, x6]
   16600:	eor	w15, w6, w15
   16604:	lsr	w15, w15, #4
   16608:	ldrb	w6, [x13, w15, uxtw]
   1660c:	add	w9, w9, w6
   16610:	b.ls	165d0 <lzma_mode_is_supported@@XZ_5.0+0x11d8>  // b.plast
   16614:	add	w1, w1, #0x1
   16618:	ldrh	w4, [x16, #3356]
   1661c:	and	w14, w14, w1
   16620:	add	w6, w26, w7
   16624:	add	x5, x14, x17, lsl #4
   16628:	add	w0, w0, w6
   1662c:	lsr	w1, w4, #4
   16630:	cmp	w0, w21
   16634:	add	x5, x23, x5, lsl #1
   16638:	eor	w1, w1, #0x7f
   1663c:	add	x5, x5, #0x6, lsl #12
   16640:	ldrb	w10, [x13, w1, uxtw]
   16644:	ldrh	w1, [x5, #2972]
   16648:	lsr	w1, w1, #4
   1664c:	eor	w1, w1, #0x7f
   16650:	ldrb	w11, [x13, w1, uxtw]
   16654:	b.ls	166a8 <lzma_mode_is_supported@@XZ_5.0+0x12b0>  // b.plast
   16658:	add	w15, w21, #0x1
   1665c:	mvn	w4, w21
   16660:	add	w4, w4, w0
   16664:	mov	x1, #0xef4                 	// #3828
   16668:	add	x4, x4, w15, uxtw
   1666c:	movk	x1, #0x1, lsl #16
   16670:	mov	w21, #0x2c                  	// #44
   16674:	mov	w13, #0x40000000            	// #1073741824
   16678:	umaddl	x21, w15, w21, x1
   1667c:	add	x1, x4, x4, lsl #1
   16680:	lsl	x1, x1, #2
   16684:	add	x21, x23, x21
   16688:	sub	x1, x1, x4
   1668c:	ldr	x4, [sp, #160]
   16690:	add	x1, x4, x1, lsl #2
   16694:	nop
   16698:	str	w13, [x21], #44
   1669c:	cmp	x1, x21
   166a0:	b.ne	16698 <lzma_mode_is_supported@@XZ_5.0+0x12a0>  // b.any
   166a4:	mov	w21, w0
   166a8:	ldrh	w4, [x5, #3452]
   166ac:	mov	w5, w0
   166b0:	ldrh	w13, [x16, #3380]
   166b4:	add	x0, x5, w0, uxtw #1
   166b8:	add	x14, x14, x14, lsl #4
   166bc:	sub	w3, w3, #0x3
   166c0:	ldr	x1, [sp, #168]
   166c4:	lsr	w4, w4, #4
   166c8:	ldr	x15, [x27, #3952]
   166cc:	add	x14, x3, x14, lsl #4
   166d0:	eor	w4, w4, #0x7f
   166d4:	lsl	x0, x0, #2
   166d8:	lsr	w13, w13, #4
   166dc:	sub	x0, x0, x5
   166e0:	add	x14, x1, x14, lsl #2
   166e4:	add	x0, x23, x0, lsl #2
   166e8:	ldrb	w1, [x15, w4, uxtw]
   166ec:	ldrb	w3, [x15, w13, sxtw]
   166f0:	add	x0, x0, #0x10, lsl #12
   166f4:	ldr	w4, [x14, #1028]
   166f8:	add	w11, w1, w11
   166fc:	add	w10, w3, w10
   16700:	add	w11, w11, w10
   16704:	ldr	w5, [x0, #3828]
   16708:	add	w11, w11, w12
   1670c:	add	w9, w9, w4
   16710:	add	w11, w11, w9
   16714:	cmp	w11, w5
   16718:	b.cs	16520 <lzma_mode_is_supported@@XZ_5.0+0x1128>  // b.hs, b.nlast
   1671c:	mov	w1, #0x101                 	// #257
   16720:	strh	w1, [x0, #3816]
   16724:	add	x1, x0, #0xef4
   16728:	add	w2, w2, #0x4
   1672c:	add	w8, w8, #0x1
   16730:	stp	w26, w2, [x1, #-8]
   16734:	stp	w11, w6, [x1]
   16738:	str	wzr, [x0, #3836]
   1673c:	ldr	w0, [sp, #192]
   16740:	cmp	w8, w0
   16744:	b.ne	16530 <lzma_mode_is_supported@@XZ_5.0+0x1138>  // b.any
   16748:	ldr	w0, [sp, #136]
   1674c:	cmp	w0, w21
   16750:	b.cs	16e54 <lzma_mode_is_supported@@XZ_5.0+0x1a5c>  // b.hs, b.nlast
   16754:	ldr	w26, [sp, #136]
   16758:	b	15ce0 <lzma_mode_is_supported@@XZ_5.0+0x8e8>
   1675c:	ldr	x6, [sp, #176]
   16760:	lsr	w5, w2, #6
   16764:	ldrb	w5, [x6, w5, uxtw]
   16768:	add	w5, w5, #0xc
   1676c:	b	1643c <lzma_mode_is_supported@@XZ_5.0+0x1044>
   16770:	ldr	x6, [sp, #152]
   16774:	lsr	w5, w2, #18
   16778:	ldrb	w5, [x6, w5, uxtw]
   1677c:	add	w5, w5, #0x24
   16780:	b	1643c <lzma_mode_is_supported@@XZ_5.0+0x1044>
   16784:	mov	w1, w5
   16788:	ldr	w8, [x0, #3836]
   1678c:	add	x2, x1, w5, uxtw #1
   16790:	sub	w3, w26, #0x1
   16794:	cmp	w5, w3
   16798:	lsl	x0, x2, #2
   1679c:	sub	x0, x0, x1
   167a0:	add	x0, x23, x0, lsl #2
   167a4:	add	x0, x0, #0x10, lsl #12
   167a8:	ldr	w25, [x0, #3812]
   167ac:	b.eq	16c98 <lzma_mode_is_supported@@XZ_5.0+0x18a0>  // b.none
   167b0:	cmp	w8, #0x3
   167b4:	b.hi	16d8c <lzma_mode_is_supported@@XZ_5.0+0x1994>  // b.pmore
   167b8:	cmp	w25, #0x6
   167bc:	mov	w25, #0xb                   	// #11
   167c0:	b.hi	15da0 <lzma_mode_is_supported@@XZ_5.0+0x9a8>  // b.pmore
   167c4:	mov	w25, #0x8                   	// #8
   167c8:	b	15da0 <lzma_mode_is_supported@@XZ_5.0+0x9a8>
   167cc:	cmp	w4, #0x2
   167d0:	mov	x0, #0x2                   	// #2
   167d4:	b.ls	17540 <lzma_mode_is_supported@@XZ_5.0+0x2148>  // b.plast
   167d8:	ldr	w26, [sp, #112]
   167dc:	b	167e8 <lzma_mode_is_supported@@XZ_5.0+0x13f0>
   167e0:	cmp	w4, w0
   167e4:	b.ls	16dac <lzma_mode_is_supported@@XZ_5.0+0x19b4>  // b.plast
   167e8:	ldrb	w7, [x19, x0]
   167ec:	mov	w2, w0
   167f0:	ldrb	w5, [x6, x0]
   167f4:	add	w8, w0, #0x1
   167f8:	add	x0, x0, #0x1
   167fc:	cmp	w7, w5
   16800:	b.eq	167e0 <lzma_mode_is_supported@@XZ_5.0+0x13e8>  // b.none
   16804:	sub	w0, w2, #0x2
   16808:	sub	w16, w2, #0x1
   1680c:	mov	w5, w0
   16810:	str	w26, [sp, #112]
   16814:	ldr	w26, [sp, #112]
   16818:	add	w28, w2, w26
   1681c:	cmp	w28, w21
   16820:	b.ls	16874 <lzma_mode_is_supported@@XZ_5.0+0x147c>  // b.plast
   16824:	add	w14, w21, #0x1
   16828:	mvn	w12, w21
   1682c:	add	w12, w12, w28
   16830:	mov	x7, #0xef4                 	// #3828
   16834:	add	x12, x12, w14, uxtw
   16838:	movk	x7, #0x1, lsl #16
   1683c:	mov	w21, #0x2c                  	// #44
   16840:	mov	w13, #0x40000000            	// #1073741824
   16844:	umaddl	x21, w14, w21, x7
   16848:	add	x7, x12, x12, lsl #1
   1684c:	lsl	x7, x7, #2
   16850:	add	x21, x23, x21
   16854:	sub	x7, x7, x12
   16858:	ldr	x12, [sp, #160]
   1685c:	add	x7, x12, x7, lsl #2
   16860:	str	w13, [x21], #44
   16864:	cmp	x7, x21
   16868:	b.ne	16860 <lzma_mode_is_supported@@XZ_5.0+0x1468>  // b.any
   1686c:	mov	w21, w28
   16870:	str	w26, [sp, #112]
   16874:	ldr	x7, [sp, #208]
   16878:	ldrh	w7, [x7, #3380]
   1687c:	lsr	w7, w7, #4
   16880:	cbnz	w3, 16d38 <lzma_mode_is_supported@@XZ_5.0+0x1940>
   16884:	ldr	x12, [sp, #216]
   16888:	ldrh	w13, [x12, #3452]
   1688c:	ldr	x12, [x27, #3952]
   16890:	lsr	w13, w13, #4
   16894:	eor	w13, w13, #0x7f
   16898:	ldrb	w7, [x12, w7, sxtw]
   1689c:	ldrb	w12, [x12, w13, uxtw]
   168a0:	add	w12, w12, w7
   168a4:	ldr	w7, [sp, #184]
   168a8:	ldr	w26, [sp, #112]
   168ac:	ldr	x14, [sp, #168]
   168b0:	add	w12, w7, w12
   168b4:	ldr	x13, [sp, #224]
   168b8:	add	x15, x13, w0, uxtw
   168bc:	ldr	w7, [sp, #176]
   168c0:	add	x15, x14, x15, lsl #2
   168c4:	add	w17, w7, w0
   168c8:	sub	w0, w0, #0x1
   168cc:	add	x7, x17, x17, lsl #1
   168d0:	ldr	w15, [x15, #1028]
   168d4:	lsl	x7, x7, #2
   168d8:	add	w15, w12, w15
   168dc:	sub	x7, x7, x17
   168e0:	add	x7, x23, x7, lsl #2
   168e4:	add	x7, x7, #0x10, lsl #12
   168e8:	ldr	w17, [x7, #3828]
   168ec:	cmp	w15, w17
   168f0:	b.cs	16904 <lzma_mode_is_supported@@XZ_5.0+0x150c>  // b.hs, b.nlast
   168f4:	strb	wzr, [x7, #3816]
   168f8:	str	w15, [x7, #3828]
   168fc:	str	w26, [x7, #3832]
   16900:	str	w3, [x7, #3836]
   16904:	cmn	w0, #0x1
   16908:	b.ne	168b8 <lzma_mode_is_supported@@XZ_5.0+0x14c0>  // b.any
   1690c:	ldr	w0, [sp, #148]
   16910:	cmp	w3, #0x0
   16914:	csel	w1, w1, w8, ne  // ne = any
   16918:	str	w26, [sp, #112]
   1691c:	add	w7, w0, w8
   16920:	mov	w0, w8
   16924:	cmp	w7, w20
   16928:	csel	w7, w7, w20, ls  // ls = plast
   1692c:	cmp	w7, w8
   16930:	b.ls	16208 <lzma_mode_is_supported@@XZ_5.0+0xe10>  // b.plast
   16934:	ldr	w26, [sp, #112]
   16938:	b	16944 <lzma_mode_is_supported@@XZ_5.0+0x154c>
   1693c:	cmp	w7, w0
   16940:	b.ls	16d9c <lzma_mode_is_supported@@XZ_5.0+0x19a4>  // b.plast
   16944:	ldrb	w14, [x19, x0]
   16948:	add	w15, w0, #0x1
   1694c:	ldrb	w13, [x6, x0]
   16950:	mov	w8, w0
   16954:	add	x0, x0, #0x1
   16958:	cmp	w14, w13
   1695c:	b.eq	1693c <lzma_mode_is_supported@@XZ_5.0+0x1544>  // b.none
   16960:	sub	w8, w8, w2
   16964:	str	w26, [sp, #112]
   16968:	sub	w13, w8, #0x1
   1696c:	cmp	w13, #0x1
   16970:	b.ls	16208 <lzma_mode_is_supported@@XZ_5.0+0xe10>  // b.plast
   16974:	ldr	w7, [sp, #152]
   16978:	mov	x26, #0xb9c                 	// #2972
   1697c:	ldr	w0, [x23, #2960]
   16980:	add	w17, w2, w7
   16984:	str	w0, [sp, #328]
   16988:	ldr	x7, [sp, #224]
   1698c:	and	w0, w17, w0
   16990:	ldr	w14, [x23, #2964]
   16994:	ldrb	w16, [x19, w16, uxtw]
   16998:	add	x5, x7, w5, uxtw
   1699c:	ldr	w15, [x23, #2968]
   169a0:	ldr	x7, [sp, #272]
   169a4:	str	w1, [sp, #332]
   169a8:	mov	x1, #0x35c8                	// #13768
   169ac:	ldrb	w6, [x6, w2, uxtw]
   169b0:	add	x0, x7, x0
   169b4:	ldrb	w2, [x19, w2, uxtw]
   169b8:	ldr	x7, [sp, #168]
   169bc:	add	x0, x0, x1
   169c0:	ldr	x1, [sp, #248]
   169c4:	add	x0, x23, x0, lsl #1
   169c8:	add	x5, x7, x5, lsl #2
   169cc:	ldr	w7, [sp, #320]
   169d0:	add	w2, w2, #0x100
   169d4:	sub	w7, w7, w14
   169d8:	ldrh	w0, [x0, #12]
   169dc:	lsr	w16, w16, w7
   169e0:	ldr	w7, [x5, #1028]
   169e4:	and	w5, w17, w15
   169e8:	mov	w15, #0x600                 	// #1536
   169ec:	lsr	w0, w0, #4
   169f0:	lsl	w5, w5, w14
   169f4:	add	w16, w16, w5
   169f8:	mov	w14, #0x0                   	// #0
   169fc:	mov	w5, #0x100                 	// #256
   16a00:	umaddl	x16, w16, w15, x26
   16a04:	ldr	w26, [sp, #112]
   16a08:	ldr	x15, [sp, #296]
   16a0c:	ldrb	w0, [x15, w0, sxtw]
   16a10:	add	w0, w0, w7
   16a14:	str	w0, [sp, #324]
   16a18:	lsl	w6, w6, #1
   16a1c:	sbfx	x7, x2, #7, #1
   16a20:	and	w0, w6, w5
   16a24:	and	w7, w7, #0x7ff
   16a28:	add	w0, w0, w2, lsr #8
   16a2c:	mov	w15, #0xffff                	// #65535
   16a30:	add	w0, w0, w5
   16a34:	lsl	w2, w2, #1
   16a38:	cmp	w2, w15
   16a3c:	eon	w15, w6, w2
   16a40:	add	x0, x16, w0, uxtw #1
   16a44:	and	w5, w5, w15
   16a48:	ldrh	w0, [x23, x0]
   16a4c:	eor	w7, w0, w7
   16a50:	lsr	w7, w7, #4
   16a54:	ldrb	w0, [x1, w7, uxtw]
   16a58:	add	w14, w14, w0
   16a5c:	b.ls	16a18 <lzma_mode_is_supported@@XZ_5.0+0x1620>  // b.plast
   16a60:	ldr	w2, [sp, #328]
   16a64:	add	w17, w17, #0x1
   16a68:	ldr	x0, [sp, #256]
   16a6c:	and	w17, w17, w2
   16a70:	ldr	x2, [sp, #280]
   16a74:	add	w28, w28, #0x1
   16a78:	ldrh	w0, [x0, #3356]
   16a7c:	add	w13, w28, w13
   16a80:	add	x6, x2, x17
   16a84:	str	w26, [sp, #112]
   16a88:	ldr	x2, [sp, #248]
   16a8c:	lsr	w0, w0, #4
   16a90:	add	x6, x23, x6, lsl #1
   16a94:	eor	w0, w0, #0x7f
   16a98:	add	x6, x6, #0x6, lsl #12
   16a9c:	ldr	w1, [sp, #332]
   16aa0:	cmp	w21, w13
   16aa4:	ldrb	w7, [x2, w0, uxtw]
   16aa8:	ldrh	w0, [x6, #2972]
   16aac:	lsr	w0, w0, #4
   16ab0:	eor	w0, w0, #0x7f
   16ab4:	ldrb	w15, [x2, w0, uxtw]
   16ab8:	b.cs	16b0c <lzma_mode_is_supported@@XZ_5.0+0x1714>  // b.hs, b.nlast
   16abc:	mvn	w16, w21
   16ac0:	add	w21, w21, #0x1
   16ac4:	add	w16, w16, w13
   16ac8:	mov	x2, #0xef4                 	// #3828
   16acc:	add	x16, x16, w21, uxtw
   16ad0:	movk	x2, #0x1, lsl #16
   16ad4:	mov	w0, #0x2c                  	// #44
   16ad8:	mov	w5, #0x40000000            	// #1073741824
   16adc:	umaddl	x0, w21, w0, x2
   16ae0:	add	x2, x16, x16, lsl #1
   16ae4:	lsl	x2, x2, #2
   16ae8:	add	x0, x23, x0
   16aec:	sub	x2, x2, x16
   16af0:	ldr	x16, [sp, #160]
   16af4:	add	x2, x16, x2, lsl #2
   16af8:	str	w5, [x0], #44
   16afc:	cmp	x2, x0
   16b00:	b.ne	16af8 <lzma_mode_is_supported@@XZ_5.0+0x1700>  // b.any
   16b04:	mov	w21, w13
   16b08:	str	w26, [sp, #112]
   16b0c:	ldr	x5, [sp, #256]
   16b10:	mov	w2, w13
   16b14:	ldrh	w0, [x6, #3452]
   16b18:	add	x13, x2, w13, uxtw #1
   16b1c:	add	x17, x17, x17, lsl #4
   16b20:	sub	w8, w8, #0x3
   16b24:	ldrh	w5, [x5, #3380]
   16b28:	lsl	x13, x13, #2
   16b2c:	sub	x13, x13, x2
   16b30:	lsr	w0, w0, #4
   16b34:	ldr	x2, [sp, #168]
   16b38:	eor	w0, w0, #0x7f
   16b3c:	ldr	x6, [sp, #288]
   16b40:	lsr	w5, w5, #4
   16b44:	add	x17, x8, x17, lsl #4
   16b48:	lsl	x13, x13, #2
   16b4c:	add	x17, x2, x17, lsl #2
   16b50:	ldrb	w2, [x6, w0, uxtw]
   16b54:	ldrb	w0, [x6, w5, sxtw]
   16b58:	add	x5, x23, x13
   16b5c:	add	x5, x5, #0x10, lsl #12
   16b60:	add	w15, w2, w15
   16b64:	add	w7, w0, w7
   16b68:	ldr	w0, [sp, #324]
   16b6c:	ldr	w6, [x17, #1028]
   16b70:	add	w7, w7, w0
   16b74:	ldr	w8, [x5, #3828]
   16b78:	add	w6, w12, w6
   16b7c:	add	w7, w7, w15
   16b80:	add	w12, w7, w6
   16b84:	add	w14, w12, w14
   16b88:	cmp	w14, w8
   16b8c:	b.cs	16208 <lzma_mode_is_supported@@XZ_5.0+0xe10>  // b.hs, b.nlast
   16b90:	ldr	q0, [sp, #112]
   16b94:	add	x13, x13, #0x10, lsl #12
   16b98:	add	x13, x13, #0xee0
   16b9c:	mov	w0, #0x101                 	// #257
   16ba0:	add	x13, x23, x13
   16ba4:	strh	w0, [x5, #3816]
   16ba8:	mov	v0.s[1], w3
   16bac:	str	wzr, [x5, #3836]
   16bb0:	mov	v0.s[2], w14
   16bb4:	mov	v0.s[3], w28
   16bb8:	stur	q0, [x13, #12]
   16bbc:	b	16208 <lzma_mode_is_supported@@XZ_5.0+0xe10>
   16bc0:	add	x0, x30, x30, lsl #1
   16bc4:	lsl	x0, x0, #2
   16bc8:	sub	x0, x0, x30
   16bcc:	add	x0, x23, x0, lsl #2
   16bd0:	add	x0, x0, #0x10, lsl #12
   16bd4:	ldr	w1, [x0, #3832]
   16bd8:	cmp	w1, w26
   16bdc:	b.cs	16be8 <lzma_mode_is_supported@@XZ_5.0+0x17f0>  // b.hs, b.nlast
   16be0:	ldr	w0, [x0, #3836]
   16be4:	cbz	w0, 16c58 <lzma_mode_is_supported@@XZ_5.0+0x1860>
   16be8:	ldr	x1, [sp, #216]
   16bec:	add	x0, x30, x30, lsl #1
   16bf0:	ldrh	w3, [x17, #3380]
   16bf4:	lsl	x0, x0, #2
   16bf8:	ldrh	w2, [x1, #3452]
   16bfc:	sub	x0, x0, x30
   16c00:	ldr	x1, [x27, #3952]
   16c04:	lsr	w3, w3, #4
   16c08:	lsr	w2, w2, #4
   16c0c:	add	x0, x23, x0, lsl #2
   16c10:	add	x0, x0, #0x10, lsl #12
   16c14:	ldrb	w3, [x1, w3, sxtw]
   16c18:	ldrb	w1, [x1, w2, sxtw]
   16c1c:	ldr	w2, [x0, #3828]
   16c20:	add	w1, w3, w1
   16c24:	ldr	w3, [sp, #184]
   16c28:	add	w1, w1, w3
   16c2c:	cmp	w1, w2
   16c30:	b.hi	16c58 <lzma_mode_is_supported@@XZ_5.0+0x1860>  // b.pmore
   16c34:	str	w1, [x0, #3828]
   16c38:	mov	w2, #0x2c                  	// #44
   16c3c:	str	w26, [x0, #3832]
   16c40:	ldr	w0, [sp, #136]
   16c44:	umaddl	x0, w0, w2, x23
   16c48:	add	x0, x0, #0x10, lsl #12
   16c4c:	add	x0, x0, #0xee4
   16c50:	strb	wzr, [x0, #4]
   16c54:	str	wzr, [x0, #24]
   16c58:	cmp	w20, #0x1
   16c5c:	b.ls	16748 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.plast
   16c60:	ldr	w0, [sp, #148]
   16c64:	cmp	w0, w20
   16c68:	csel	w4, w0, w20, ls  // ls = plast
   16c6c:	b	16170 <lzma_mode_is_supported@@XZ_5.0+0xd78>
   16c70:	cmp	w5, w26
   16c74:	mov	w25, #0x8                   	// #8
   16c78:	b.ne	16cfc <lzma_mode_is_supported@@XZ_5.0+0x1904>  // b.any
   16c7c:	mov	w25, #0x4                   	// #4
   16c80:	add	x0, x7, x7, lsl #1
   16c84:	lsl	x0, x0, #2
   16c88:	sub	x0, x0, x7
   16c8c:	add	x0, x23, x0, lsl #2
   16c90:	add	x0, x0, #0x10, lsl #12
   16c94:	ldr	w8, [x0, #3836]
   16c98:	add	x9, sp, #0x168
   16c9c:	ldp	s8, s0, [x9, #-8]
   16ca0:	ldp	s2, s1, [x9]
   16ca4:	cbnz	w8, 16dcc <lzma_mode_is_supported@@XZ_5.0+0x19d4>
   16ca8:	cmp	w25, #0x7
   16cac:	mov	w0, #0xb                   	// #11
   16cb0:	mov	w25, #0x9                   	// #9
   16cb4:	mov	w3, #0x1                   	// #1
   16cb8:	csel	w25, w25, w0, cc  // cc = lo, ul, last
   16cbc:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16cc0:	mov	w1, w11
   16cc4:	add	x2, x1, w11, uxtw #1
   16cc8:	lsl	x2, x2, #2
   16ccc:	sub	x2, x2, x1
   16cd0:	add	x2, x23, x2, lsl #2
   16cd4:	add	x2, x2, #0x10, lsl #12
   16cd8:	ldr	w2, [x2, #3812]
   16cdc:	cmp	w2, #0x3
   16ce0:	b.hi	16de8 <lzma_mode_is_supported@@XZ_5.0+0x19f0>  // b.pmore
   16ce4:	ldr	w8, [x0, #3836]
   16ce8:	cmp	w5, w26
   16cec:	b.eq	17488 <lzma_mode_is_supported@@XZ_5.0+0x2090>  // b.none
   16cf0:	cmp	w8, #0x3
   16cf4:	b.ls	16fd8 <lzma_mode_is_supported@@XZ_5.0+0x1be0>  // b.plast
   16cf8:	mov	w25, #0x7                   	// #7
   16cfc:	add	x0, x1, x1, lsl #1
   16d00:	sub	w2, w8, #0x4
   16d04:	fmov	s8, w2
   16d08:	add	x2, sp, #0x168
   16d0c:	lsl	x0, x0, #2
   16d10:	mov	w3, #0x1                   	// #1
   16d14:	sub	x1, x0, x1
   16d18:	add	x1, x23, x1, lsl #2
   16d1c:	add	x1, x1, #0x10, lsl #12
   16d20:	ldr	s0, [x1, #3840]
   16d24:	ldr	s2, [x1, #3844]
   16d28:	ldr	s1, [x1, #3848]
   16d2c:	stp	s8, s0, [x2, #-8]
   16d30:	stp	s2, s1, [x2]
   16d34:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16d38:	ldr	x12, [sp, #208]
   16d3c:	eor	w7, w7, #0x7f
   16d40:	ldr	x13, [x27, #3952]
   16d44:	cmp	w3, #0x1
   16d48:	ldrh	w12, [x12, #3404]
   16d4c:	ldrb	w14, [x13, w7, uxtw]
   16d50:	lsr	w12, w12, #4
   16d54:	b.eq	16f6c <lzma_mode_is_supported@@XZ_5.0+0x1b74>  // b.none
   16d58:	ldr	x15, [sp, #208]
   16d5c:	mov	w7, #0x2                   	// #2
   16d60:	sub	w7, w7, w3
   16d64:	eor	w12, w12, #0x7f
   16d68:	and	w7, w7, #0x7ff
   16d6c:	ldrh	w15, [x15, #3428]
   16d70:	ldrb	w12, [x13, w12, uxtw]
   16d74:	eor	w7, w7, w15
   16d78:	add	w12, w12, w14
   16d7c:	lsr	w7, w7, #4
   16d80:	ldrb	w7, [x13, w7, uxtw]
   16d84:	add	w12, w7, w12
   16d88:	b	168a4 <lzma_mode_is_supported@@XZ_5.0+0x14ac>
   16d8c:	cmp	w25, #0x6
   16d90:	b.ls	16cf8 <lzma_mode_is_supported@@XZ_5.0+0x1900>  // b.plast
   16d94:	mov	w25, #0xa                   	// #10
   16d98:	b	16cfc <lzma_mode_is_supported@@XZ_5.0+0x1904>
   16d9c:	sub	w8, w15, w2
   16da0:	str	w26, [sp, #112]
   16da4:	sub	w13, w8, #0x1
   16da8:	b	1696c <lzma_mode_is_supported@@XZ_5.0+0x1574>
   16dac:	add	w7, w2, #0x2
   16db0:	sub	w5, w2, #0x1
   16db4:	mov	w16, w2
   16db8:	sub	w0, w8, #0x2
   16dbc:	mov	w2, w8
   16dc0:	mov	w8, w7
   16dc4:	str	w26, [sp, #112]
   16dc8:	b	16814 <lzma_mode_is_supported@@XZ_5.0+0x141c>
   16dcc:	cmp	w25, #0x3
   16dd0:	b.ls	16fbc <lzma_mode_is_supported@@XZ_5.0+0x1bc4>  // b.plast
   16dd4:	cmp	w25, #0x9
   16dd8:	b.hi	16fc8 <lzma_mode_is_supported@@XZ_5.0+0x1bd0>  // b.pmore
   16ddc:	sub	w25, w25, #0x3
   16de0:	mov	w3, #0x0                   	// #0
   16de4:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16de8:	cmp	w2, #0xa
   16dec:	sub	w3, w2, #0x6
   16df0:	sub	w25, w2, #0x3
   16df4:	csel	w25, w25, w3, cc  // cc = lo, ul, last
   16df8:	cmp	w5, w26
   16dfc:	b.eq	16c80 <lzma_mode_is_supported@@XZ_5.0+0x1888>  // b.none
   16e00:	ldr	w8, [x0, #3836]
   16e04:	mov	w5, w11
   16e08:	b	167b0 <lzma_mode_is_supported@@XZ_5.0+0x13b8>
   16e0c:	ldr	x2, [sp, #264]
   16e10:	ldr	x3, [sp, #312]
   16e14:	ldr	w0, [x2, #3832]
   16e18:	ldr	w1, [x2, #3836]
   16e1c:	str	w0, [x3]
   16e20:	ldr	x3, [sp, #304]
   16e24:	str	w0, [x2, #3808]
   16e28:	str	w1, [x3]
   16e2c:	ldp	x19, x20, [sp, #16]
   16e30:	ldp	x21, x22, [sp, #32]
   16e34:	ldp	x23, x24, [sp, #48]
   16e38:	ldp	x25, x26, [sp, #64]
   16e3c:	ldp	x27, x28, [sp, #80]
   16e40:	ldr	d8, [sp, #96]
   16e44:	ldp	x29, x30, [sp], #368
   16e48:	ret
   16e4c:	mov	w30, w26
   16e50:	str	w26, [sp, #136]
   16e54:	add	x0, x30, x30, lsl #1
   16e58:	ldr	w4, [sp, #136]
   16e5c:	ldr	x1, [sp, #264]
   16e60:	lsl	x0, x0, #2
   16e64:	sub	x0, x0, x30
   16e68:	mov	x7, #0xee4                 	// #3812
   16e6c:	mov	w8, #0x2c                  	// #44
   16e70:	movk	x7, #0x1, lsl #16
   16e74:	add	x0, x23, x0, lsl #2
   16e78:	mov	w9, #0xffffffff            	// #-1
   16e7c:	add	x0, x0, #0x10, lsl #12
   16e80:	ldr	w5, [x0, #3832]
   16e84:	ldr	w6, [x0, #3836]
   16e88:	str	w4, [x1, #3804]
   16e8c:	b	16ec8 <lzma_mode_is_supported@@XZ_5.0+0x1ad0>
   16e90:	ldr	w11, [x2, #3832]
   16e94:	add	x0, x3, x3, lsl #1
   16e98:	mov	w30, w5
   16e9c:	lsl	x0, x0, #2
   16ea0:	sub	x0, x0, x3
   16ea4:	add	x0, x23, x0, lsl #2
   16ea8:	add	x0, x0, #0x10, lsl #12
   16eac:	ldr	w1, [x0, #3836]
   16eb0:	str	w4, [x0, #3832]
   16eb4:	mov	x4, x30
   16eb8:	str	w6, [x0, #3836]
   16ebc:	mov	w6, w1
   16ec0:	cbz	w30, 16e0c <lzma_mode_is_supported@@XZ_5.0+0x1a14>
   16ec4:	mov	w5, w11
   16ec8:	add	x1, x30, x30, lsl #1
   16ecc:	mov	w3, w5
   16ed0:	add	x2, x3, w5, uxtw #1
   16ed4:	umaddl	x0, w5, w8, x7
   16ed8:	lsl	x1, x1, #2
   16edc:	sub	w11, w5, #0x1
   16ee0:	sub	x1, x1, x30
   16ee4:	lsl	x2, x2, #2
   16ee8:	sub	x2, x2, x3
   16eec:	add	x0, x23, x0
   16ef0:	add	x1, x23, x1, lsl #2
   16ef4:	add	x1, x1, #0x10, lsl #12
   16ef8:	add	x2, x23, x2, lsl #2
   16efc:	add	x2, x2, #0x10, lsl #12
   16f00:	ldrb	w10, [x1, #3816]
   16f04:	cbz	w10, 16e90 <lzma_mode_is_supported@@XZ_5.0+0x1a98>
   16f08:	mov	w12, w11
   16f0c:	strb	wzr, [x0, #4]
   16f10:	add	x10, x12, w11, uxtw #1
   16f14:	ldrb	w13, [x1, #3817]
   16f18:	str	w9, [x0, #24]
   16f1c:	lsl	x0, x10, #2
   16f20:	sub	x0, x0, x12
   16f24:	str	w11, [x2, #3832]
   16f28:	add	x0, x23, x0, lsl #2
   16f2c:	cbz	w13, 16e94 <lzma_mode_is_supported@@XZ_5.0+0x1a9c>
   16f30:	add	x0, x0, #0x10, lsl #12
   16f34:	ldr	w10, [x1, #3820]
   16f38:	str	w10, [x0, #3832]
   16f3c:	strb	wzr, [x0, #3816]
   16f40:	ldr	w1, [x1, #3824]
   16f44:	str	w1, [x0, #3836]
   16f48:	ldr	w11, [x2, #3832]
   16f4c:	b	16e94 <lzma_mode_is_supported@@XZ_5.0+0x1a9c>
   16f50:	ldr	s0, [sp, #356]
   16f54:	mov	w3, #0x1                   	// #1
   16f58:	ldr	s2, [sp, #360]
   16f5c:	ldr	s1, [sp, #364]
   16f60:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16f64:	mov	w8, #0x1                   	// #1
   16f68:	b	15e1c <lzma_mode_is_supported@@XZ_5.0+0xa24>
   16f6c:	ldrb	w12, [x13, w12, sxtw]
   16f70:	add	w12, w12, w14
   16f74:	b	168a4 <lzma_mode_is_supported@@XZ_5.0+0x14ac>
   16f78:	ldrh	w1, [x6, #3404]
   16f7c:	eor	w0, w0, #0x7f
   16f80:	cmp	w2, #0x1
   16f84:	ldrb	w22, [x8, w0, uxtw]
   16f88:	lsr	w1, w1, #4
   16f8c:	b.eq	1743c <lzma_mode_is_supported@@XZ_5.0+0x2044>  // b.none
   16f90:	ldrh	w19, [x6, #3428]
   16f94:	sub	w0, w20, w2
   16f98:	and	w0, w0, #0x7ff
   16f9c:	eor	w1, w1, #0x7f
   16fa0:	eor	w0, w0, w19
   16fa4:	lsr	w0, w0, #4
   16fa8:	ldrb	w19, [x8, w1, uxtw]
   16fac:	add	w22, w19, w22
   16fb0:	ldrb	w19, [x8, w0, uxtw]
   16fb4:	add	w19, w19, w22
   16fb8:	b	15c2c <lzma_mode_is_supported@@XZ_5.0+0x834>
   16fbc:	mov	w3, #0x0                   	// #0
   16fc0:	mov	w25, #0x0                   	// #0
   16fc4:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16fc8:	sub	w25, w25, #0x6
   16fcc:	cmp	w25, #0x6
   16fd0:	cset	w3, hi  // hi = pmore
   16fd4:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   16fd8:	mov	w5, w11
   16fdc:	mov	w25, #0x8                   	// #8
   16fe0:	b	15da0 <lzma_mode_is_supported@@XZ_5.0+0x9a8>
   16fe4:	ldr	w0, [x23, #756]
   16fe8:	cmp	w1, w0
   16fec:	b.ls	175ac <lzma_mode_is_supported@@XZ_5.0+0x21b4>  // b.plast
   16ff0:	add	x0, x23, #0x2fc
   16ff4:	mov	w7, #0x0                   	// #0
   16ff8:	ldr	w2, [x0], #8
   16ffc:	add	w7, w7, #0x1
   17000:	cmp	w1, w2
   17004:	b.hi	16ff8 <lzma_mode_is_supported@@XZ_5.0+0x1c00>  // b.pmore
   17008:	ldr	x0, [x25, #3952]
   1700c:	adrp	x19, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   17010:	add	x14, x14, x14, lsl #4
   17014:	cmp	w1, #0x5
   17018:	ldr	x19, [x19, #4000]
   1701c:	mov	x12, #0x7200                	// #29184
   17020:	ldrb	w10, [x0, w9, sxtw]
   17024:	mov	w9, w7
   17028:	add	x13, x23, x12
   1702c:	mov	w12, #0x5                   	// #5
   17030:	add	x4, x23, x9, lsl #3
   17034:	csel	w0, w1, w12, ls  // ls = plast
   17038:	lsl	x8, x14, #4
   1703c:	add	w10, w10, w15
   17040:	ldr	w18, [sp, #348]
   17044:	mov	x22, x19
   17048:	ldr	w3, [x4, #760]
   1704c:	mov	x20, x19
   17050:	sub	w0, w0, #0x2
   17054:	mov	w17, #0x7ffff               	// #524287
   17058:	cmp	w3, #0x7f
   1705c:	mov	x16, #0x43a4                	// #17316
   17060:	mov	x15, #0x40a4                	// #16548
   17064:	mov	x14, #0x41a4                	// #16804
   17068:	b.hi	170fc <lzma_mode_is_supported@@XZ_5.0+0x1d04>  // b.pmore
   1706c:	nop
   17070:	ubfiz	x0, x0, #7, #32
   17074:	add	x0, x0, w3, uxtw
   17078:	add	x0, x0, x14
   1707c:	ldr	w5, [x23, x0, lsl #2]
   17080:	mov	w6, w1
   17084:	sub	w2, w1, #0x2
   17088:	add	x0, x6, w1, uxtw #1
   1708c:	add	x2, x8, x2
   17090:	lsl	x0, x0, #2
   17094:	add	x2, x13, x2, lsl #2
   17098:	sub	x0, x0, x6
   1709c:	add	x0, x23, x0, lsl #2
   170a0:	ldr	w2, [x2, #1028]
   170a4:	add	x0, x0, #0x10, lsl #12
   170a8:	add	w5, w5, w2
   170ac:	add	w5, w5, w10
   170b0:	ldr	w2, [x0, #3828]
   170b4:	cmp	w5, w2
   170b8:	b.cs	170d0 <lzma_mode_is_supported@@XZ_5.0+0x1cd8>  // b.hs, b.nlast
   170bc:	add	w3, w3, #0x4
   170c0:	strb	wzr, [x0, #3816]
   170c4:	str	w5, [x0, #3828]
   170c8:	str	wzr, [x0, #3832]
   170cc:	str	w3, [x0, #3836]
   170d0:	ldr	w0, [x4, #756]
   170d4:	cmp	w1, w0
   170d8:	b.eq	1713c <lzma_mode_is_supported@@XZ_5.0+0x1d44>  // b.none
   170dc:	add	w1, w1, #0x1
   170e0:	add	x4, x23, x9, lsl #3
   170e4:	cmp	w1, #0x5
   170e8:	csel	w0, w1, w12, ls  // ls = plast
   170ec:	sub	w0, w0, #0x2
   170f0:	ldr	w3, [x4, #760]
   170f4:	cmp	w3, #0x7f
   170f8:	b.ls	17070 <lzma_mode_is_supported@@XZ_5.0+0x1c78>  // b.plast
   170fc:	cmp	w3, w17
   17100:	b.ls	17448 <lzma_mode_is_supported@@XZ_5.0+0x2050>  // b.plast
   17104:	tbz	w3, #31, 17458 <lzma_mode_is_supported@@XZ_5.0+0x2060>
   17108:	lsr	w2, w3, #30
   1710c:	ldrb	w5, [x19, w2, uxtw]
   17110:	add	w5, w5, #0x3c
   17114:	and	x2, x3, #0xf
   17118:	ubfiz	x0, x0, #6, #32
   1711c:	add	x2, x2, x16
   17120:	add	x0, x0, x5
   17124:	add	x0, x0, x15
   17128:	add	x2, x23, x2, lsl #2
   1712c:	ldr	w0, [x23, x0, lsl #2]
   17130:	ldr	w5, [x2, #8]
   17134:	add	w5, w5, w0
   17138:	b	17080 <lzma_mode_is_supported@@XZ_5.0+0x1c88>
   1713c:	add	w7, w7, #0x1
   17140:	cmp	w18, w7
   17144:	b.eq	15ca0 <lzma_mode_is_supported@@XZ_5.0+0x8a8>  // b.none
   17148:	mov	w9, w7
   1714c:	add	w1, w1, #0x1
   17150:	b	170e0 <lzma_mode_is_supported@@XZ_5.0+0x1ce8>
   17154:	ldrh	w3, [x6, #3380]
   17158:	ldrh	w4, [x13, #3452]
   1715c:	lsr	w3, w3, #4
   17160:	lsr	w4, w4, #4
   17164:	ldrb	w3, [x1, w3, sxtw]
   17168:	ldrb	w1, [x1, w4, sxtw]
   1716c:	add	w1, w3, w1
   17170:	add	w1, w1, w5
   17174:	cmp	w0, w1
   17178:	b.ls	15b74 <lzma_mode_is_supported@@XZ_5.0+0x77c>  // b.plast
   1717c:	mov	w2, #0x0                   	// #0
   17180:	str	w1, [x22, #3872]
   17184:	str	wzr, [x22, #3880]
   17188:	b	15b74 <lzma_mode_is_supported@@XZ_5.0+0x77c>
   1718c:	add	x0, x23, #0x6, lsl #12
   17190:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   17194:	add	x6, x23, #0x10, lsl #12
   17198:	mov	x17, #0x71e0                	// #29152
   1719c:	ldr	x4, [x1, #3952]
   171a0:	add	x5, x23, x17
   171a4:	ldrh	w7, [x0, #4578]
   171a8:	add	x6, x6, #0xe98
   171ac:	mov	x3, #0x0                   	// #0
   171b0:	and	w0, w3, #0x1
   171b4:	ubfx	w1, w3, #1, #1
   171b8:	add	w10, w0, #0x2
   171bc:	neg	w13, w1
   171c0:	ubfx	w2, w3, #2, #1
   171c4:	neg	w11, w3, lsr #3
   171c8:	add	w1, w1, w10, lsl #1
   171cc:	neg	w12, w2
   171d0:	ubfiz	x10, x10, #1, #3
   171d4:	neg	w0, w0
   171d8:	add	w2, w2, w1, lsl #1
   171dc:	ubfiz	x1, x1, #1, #5
   171e0:	and	w0, w0, #0x7ff
   171e4:	and	w13, w13, #0x7ff
   171e8:	ubfiz	x2, x2, #1, #7
   171ec:	ldrh	w9, [x5, x10]
   171f0:	ldrh	w8, [x5, x1]
   171f4:	and	w12, w12, #0x7ff
   171f8:	and	w10, w11, #0x7ff
   171fc:	eor	w9, w9, w13
   17200:	ldrh	w1, [x5, x2]
   17204:	eor	w0, w0, w7
   17208:	eor	w2, w8, w12
   1720c:	lsr	w8, w9, #4
   17210:	eor	w1, w1, w10
   17214:	lsr	w0, w0, #4
   17218:	lsr	w2, w2, #4
   1721c:	lsr	w1, w1, #4
   17220:	ldrb	w8, [x4, w8, uxtw]
   17224:	ldrb	w9, [x4, w0, uxtw]
   17228:	ldrb	w2, [x4, w2, uxtw]
   1722c:	ldrb	w0, [x4, w1, uxtw]
   17230:	add	w1, w8, w9
   17234:	add	w0, w0, w2
   17238:	add	w0, w0, w1
   1723c:	str	w0, [x6, x3, lsl #2]
   17240:	add	x3, x3, #0x1
   17244:	cmp	x3, #0x10
   17248:	b.ne	171b0 <lzma_mode_is_supported@@XZ_5.0+0x1db8>  // b.any
   1724c:	ldr	x0, [sp, #264]
   17250:	str	wzr, [x0, #3800]
   17254:	b	159b4 <lzma_mode_is_supported@@XZ_5.0+0x5bc>
   17258:	ldr	x11, [sp, #264]
   1725c:	adrp	x1, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   17260:	add	x9, x23, #0x10, lsl #12
   17264:	add	x5, x23, #0x10, lsl #12
   17268:	add	x9, x9, #0x690
   1726c:	mov	x20, #0x6efc                	// #28412
   17270:	ldr	x8, [x1, #3952]
   17274:	mov	x10, x9
   17278:	ldr	w0, [x11, #3728]
   1727c:	add	x5, x5, #0x290
   17280:	add	x7, x23, x20
   17284:	stp	x25, x26, [sp, #64]
   17288:	mov	x25, x1
   1728c:	cbz	w0, 17320 <lzma_mode_is_supported@@XZ_5.0+0x1f28>
   17290:	mov	w3, #0x0                   	// #0
   17294:	nop
   17298:	add	x12, x5, w3, uxtw #2
   1729c:	add	w2, w3, #0x40
   172a0:	mov	w4, #0x0                   	// #0
   172a4:	nop
   172a8:	and	w0, w2, #0x1
   172ac:	lsr	w2, w2, #1
   172b0:	neg	w0, w0
   172b4:	cmp	w2, #0x1
   172b8:	lsl	w6, w2, #1
   172bc:	and	w1, w0, #0x7ff
   172c0:	ldrh	w0, [x7, x6]
   172c4:	eor	w0, w0, w1
   172c8:	lsr	w0, w0, #4
   172cc:	ldrb	w0, [x8, w0, uxtw]
   172d0:	add	w4, w4, w0
   172d4:	b.ne	172a8 <lzma_mode_is_supported@@XZ_5.0+0x1eb0>  // b.any
   172d8:	str	w4, [x12]
   172dc:	add	w3, w3, #0x1
   172e0:	ldr	w0, [x11, #3728]
   172e4:	cmp	w3, w0
   172e8:	b.cc	17298 <lzma_mode_is_supported@@XZ_5.0+0x1ea0>  // b.lo, b.ul, b.last
   172ec:	cmp	w0, #0xe
   172f0:	b.ls	17320 <lzma_mode_is_supported@@XZ_5.0+0x1f28>  // b.plast
   172f4:	mov	w1, #0xe                   	// #14
   172f8:	mov	w2, w1
   172fc:	lsr	w0, w1, #1
   17300:	sub	w0, w0, #0x5
   17304:	add	w1, w1, #0x1
   17308:	ldr	w3, [x5, x2, lsl #2]
   1730c:	add	w0, w3, w0, lsl #4
   17310:	str	w0, [x5, x2, lsl #2]
   17314:	ldr	w0, [x11, #3728]
   17318:	cmp	w1, w0
   1731c:	b.cc	172f8 <lzma_mode_is_supported@@XZ_5.0+0x1f00>  // b.lo, b.ul, b.last
   17320:	ldr	w1, [x5]
   17324:	add	x5, x5, #0x100
   17328:	str	w1, [x9]
   1732c:	add	x7, x7, #0x80
   17330:	ldur	w1, [x5, #-252]
   17334:	str	w1, [x9, #4]
   17338:	ldur	w1, [x5, #-248]
   1733c:	str	w1, [x9, #8]
   17340:	ldur	w1, [x5, #-244]
   17344:	cmp	x10, x5
   17348:	str	w1, [x9, #12]
   1734c:	add	x9, x9, #0x200
   17350:	b.ne	1728c <lzma_mode_is_supported@@XZ_5.0+0x1e94>  // b.any
   17354:	adrp	x7, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   17358:	add	x5, x23, #0x10, lsl #12
   1735c:	ldr	x9, [x25, #3952]
   17360:	mov	x18, #0x70fc                	// #28924
   17364:	ldr	x7, [x7, #4000]
   17368:	add	x8, x23, x18
   1736c:	add	x5, x5, #0x6a0
   17370:	mov	x6, #0x4                   	// #4
   17374:	nop
   17378:	ldrb	w0, [x6, x7]
   1737c:	mov	w11, #0x1                   	// #1
   17380:	mov	w3, #0x0                   	// #0
   17384:	and	w1, w0, w11
   17388:	lsr	w4, w0, #1
   1738c:	orr	w1, w1, #0x2
   17390:	sub	w4, w4, #0x1
   17394:	lsl	w2, w1, w4
   17398:	mov	x1, x2
   1739c:	sub	x2, x2, w0, uxtb
   173a0:	sub	w1, w6, w1
   173a4:	lsl	x2, x2, #1
   173a8:	sub	x2, x2, #0x2
   173ac:	nop
   173b0:	add	x14, x2, w11, uxtw #1
   173b4:	and	w13, w1, #0x1
   173b8:	neg	w10, w13
   173bc:	subs	w4, w4, #0x1
   173c0:	and	w12, w10, #0x7ff
   173c4:	lsr	w1, w1, #1
   173c8:	ldrh	w10, [x8, x14]
   173cc:	add	w11, w13, w11, lsl #1
   173d0:	eor	w10, w10, w12
   173d4:	lsr	w10, w10, #4
   173d8:	ldrb	w10, [x9, w10, uxtw]
   173dc:	add	w3, w3, w10
   173e0:	b.ne	173b0 <lzma_mode_is_supported@@XZ_5.0+0x1fb8>  // b.any
   173e4:	add	x0, x23, w0, uxtb #2
   173e8:	add	x6, x6, #0x1
   173ec:	add	x0, x0, #0x10, lsl #12
   173f0:	cmp	x6, #0x80
   173f4:	add	x5, x5, #0x4
   173f8:	ldr	w1, [x0, #656]
   173fc:	add	w1, w1, w3
   17400:	stur	w1, [x5, #-4]
   17404:	ldr	w1, [x0, #912]
   17408:	add	w1, w1, w3
   1740c:	str	w1, [x5, #508]
   17410:	ldr	w1, [x0, #1168]
   17414:	add	w1, w1, w3
   17418:	str	w1, [x5, #1020]
   1741c:	ldr	w0, [x0, #1424]
   17420:	add	w3, w0, w3
   17424:	str	w3, [x5, #1532]
   17428:	b.ne	17378 <lzma_mode_is_supported@@XZ_5.0+0x1f80>  // b.any
   1742c:	ldr	x0, [sp, #264]
   17430:	ldp	x25, x26, [sp, #64]
   17434:	str	wzr, [x0, #3732]
   17438:	b	159a4 <lzma_mode_is_supported@@XZ_5.0+0x5ac>
   1743c:	ldrb	w19, [x8, w1, sxtw]
   17440:	add	w19, w19, w22
   17444:	b	15c2c <lzma_mode_is_supported@@XZ_5.0+0x834>
   17448:	lsr	w2, w3, #6
   1744c:	ldrb	w5, [x20, w2, uxtw]
   17450:	add	w5, w5, #0xc
   17454:	b	17114 <lzma_mode_is_supported@@XZ_5.0+0x1d1c>
   17458:	lsr	w2, w3, #18
   1745c:	ldrb	w5, [x22, w2, uxtw]
   17460:	add	w5, w5, #0x24
   17464:	b	17114 <lzma_mode_is_supported@@XZ_5.0+0x1d1c>
   17468:	add	x0, x7, x7, lsl #1
   1746c:	mov	w25, #0x5                   	// #5
   17470:	lsl	x0, x0, #2
   17474:	sub	x0, x0, x7
   17478:	add	x0, x23, x0, lsl #2
   1747c:	add	x0, x0, #0x10, lsl #12
   17480:	ldr	w8, [x0, #3836]
   17484:	b	16c98 <lzma_mode_is_supported@@XZ_5.0+0x18a0>
   17488:	cmp	w8, #0x0
   1748c:	mov	w25, #0x9                   	// #9
   17490:	csel	w3, wzr, w10, ne  // ne = any
   17494:	add	x10, sp, #0x168
   17498:	csel	w25, wzr, w25, ne  // ne = any
   1749c:	ldp	s8, s0, [x10, #-8]
   174a0:	ldp	s2, s1, [x10]
   174a4:	b	15e7c <lzma_mode_is_supported@@XZ_5.0+0xa84>
   174a8:	mov	w0, #0x1                   	// #1
   174ac:	str	w0, [sp, #192]
   174b0:	mov	w0, #0x0                   	// #0
   174b4:	b	16254 <lzma_mode_is_supported@@XZ_5.0+0xe5c>
   174b8:	mov	w8, #0x0                   	// #0
   174bc:	b	162e8 <lzma_mode_is_supported@@XZ_5.0+0xef0>
   174c0:	mov	w22, w21
   174c4:	b	162c4 <lzma_mode_is_supported@@XZ_5.0+0xecc>
   174c8:	ldr	x0, [sp, #304]
   174cc:	subs	w19, w27, #0x1
   174d0:	str	w14, [x0]
   174d4:	ldr	x0, [sp, #312]
   174d8:	str	w27, [x0]
   174dc:	b.eq	17534 <lzma_mode_is_supported@@XZ_5.0+0x213c>  // b.none
   174e0:	ldr	x2, [x24, #56]
   174e4:	mov	w1, w19
   174e8:	mov	x0, x24
   174ec:	blr	x2
   174f0:	ldr	w0, [x24, #28]
   174f4:	ldp	x27, x28, [sp, #80]
   174f8:	add	w0, w0, w19
   174fc:	ldp	x19, x20, [sp, #16]
   17500:	str	w0, [x24, #28]
   17504:	b	15978 <lzma_mode_is_supported@@XZ_5.0+0x580>
   17508:	ldr	w0, [sp, #348]
   1750c:	subs	w19, w12, #0x1
   17510:	ldr	x1, [sp, #312]
   17514:	sub	w0, w0, #0x1
   17518:	add	x0, x23, x0, lsl #3
   1751c:	str	w12, [x1]
   17520:	ldr	x1, [sp, #304]
   17524:	ldr	w0, [x0, #760]
   17528:	add	w0, w0, #0x4
   1752c:	str	w0, [x1]
   17530:	b.ne	174e0 <lzma_mode_is_supported@@XZ_5.0+0x20e8>  // b.any
   17534:	ldp	x19, x20, [sp, #16]
   17538:	ldp	x27, x28, [sp, #80]
   1753c:	b	15978 <lzma_mode_is_supported@@XZ_5.0+0x580>
   17540:	mov	w2, w0
   17544:	mov	w16, #0x1                   	// #1
   17548:	mov	w5, #0x0                   	// #0
   1754c:	mov	w8, #0x3                   	// #3
   17550:	mov	w0, #0x0                   	// #0
   17554:	b	16814 <lzma_mode_is_supported@@XZ_5.0+0x141c>
   17558:	ldp	x27, x28, [sp, #80]
   1755c:	mov	w1, #0xffffffff            	// #-1
   17560:	ldr	x2, [sp, #304]
   17564:	mov	w0, #0x1                   	// #1
   17568:	ldp	x19, x20, [sp, #16]
   1756c:	str	w1, [x2]
   17570:	ldr	x1, [sp, #312]
   17574:	str	w0, [x1]
   17578:	b	15978 <lzma_mode_is_supported@@XZ_5.0+0x580>
   1757c:	ldr	x1, [sp, #304]
   17580:	mov	w0, #0x1                   	// #1
   17584:	ldp	x19, x20, [sp, #16]
   17588:	ldp	x21, x22, [sp, #32]
   1758c:	ldp	x25, x26, [sp, #64]
   17590:	ldp	x27, x28, [sp, #80]
   17594:	str	w2, [x1]
   17598:	ldr	x1, [sp, #312]
   1759c:	str	w0, [x1]
   175a0:	b	15978 <lzma_mode_is_supported@@XZ_5.0+0x580>
   175a4:	mov	w6, w0
   175a8:	b	164a0 <lzma_mode_is_supported@@XZ_5.0+0x10a8>
   175ac:	mov	w7, #0x0                   	// #0
   175b0:	b	17008 <lzma_mode_is_supported@@XZ_5.0+0x1c10>
   175b4:	nop
   175b8:	str	x1, [x0, #28312]
   175bc:	ret
   175c0:	ldr	w11, [x1, #28]
   175c4:	add	x10, x0, #0x4, lsl #12
   175c8:	ldp	w5, w7, [x1, #20]
   175cc:	mov	x2, x0
   175d0:	mov	w0, #0x1                   	// #1
   175d4:	lsl	w9, w0, w11
   175d8:	add	w1, w5, w7
   175dc:	sub	w6, w9, #0x1
   175e0:	str	w6, [x10, #11916]
   175e4:	lsl	w0, w0, w1
   175e8:	cbz	w0, 1762c <lzma_mode_is_supported@@XZ_5.0+0x2234>
   175ec:	sub	w0, w0, #0x1
   175f0:	add	x4, x2, #0xc00
   175f4:	mov	w8, #0x600                 	// #1536
   175f8:	mov	x3, x2
   175fc:	movi	v0.8h, #0x4, lsl #8
   17600:	add	x1, x2, #0x600
   17604:	umaddl	x4, w0, w8, x4
   17608:	mov	x0, x3
   1760c:	nop
   17610:	str	q0, [x0], #16
   17614:	cmp	x1, x0
   17618:	b.ne	17610 <lzma_mode_is_supported@@XZ_5.0+0x2218>  // b.any
   1761c:	add	x1, x1, #0x600
   17620:	add	x3, x3, #0x600
   17624:	cmp	x4, x1
   17628:	b.ne	17608 <lzma_mode_is_supported@@XZ_5.0+0x2210>  // b.any
   1762c:	adrp	x0, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   17630:	mov	x14, #0x6e00                	// #28160
   17634:	add	x1, x2, x14
   17638:	str	w6, [x10, #11916]
   1763c:	ldr	q1, [x0, #1472]
   17640:	mov	w0, #0x1                   	// #1
   17644:	lsl	w0, w0, w7
   17648:	sub	w0, w0, #0x1
   1764c:	str	w5, [x10, #11920]
   17650:	add	x1, x1, #0x7c
   17654:	str	w0, [x10, #11924]
   17658:	mov	x15, #0x6180                	// #24960
   1765c:	movi	v0.8h, #0x4, lsl #8
   17660:	add	x7, x2, #0x6, lsl #12
   17664:	lsr	w13, w9, #3
   17668:	and	w12, w9, #0xfffffff8
   1766c:	add	x5, x2, x15
   17670:	mov	w8, #0x0                   	// #0
   17674:	mov	w0, #0x400                 	// #1024
   17678:	stur	q1, [x1, #-16]
   1767c:	stp	xzr, xzr, [x1]
   17680:	b	177a4 <lzma_mode_is_supported@@XZ_5.0+0x23ac>
   17684:	str	q0, [x7]
   17688:	cmp	w13, #0x1
   1768c:	str	q0, [x7, #480]
   17690:	b.ls	1769c <lzma_mode_is_supported@@XZ_5.0+0x22a4>  // b.plast
   17694:	str	q0, [x7, #16]
   17698:	str	q0, [x7, #496]
   1769c:	cmp	w9, w12
   176a0:	b.eq	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.none
   176a4:	mov	w1, w12
   176a8:	ubfiz	x14, x8, #4, #32
   176ac:	add	w3, w1, #0x1
   176b0:	add	x4, x14, w1, uxtw
   176b4:	cmp	w6, w3
   176b8:	add	x4, x2, x4, lsl #1
   176bc:	add	x4, x4, #0x6, lsl #12
   176c0:	strh	w0, [x4]
   176c4:	strh	w0, [x4, #480]
   176c8:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   176cc:	add	x3, x14, w3, uxtw
   176d0:	add	w4, w1, #0x2
   176d4:	cmp	w6, w4
   176d8:	add	x3, x2, x3, lsl #1
   176dc:	add	x3, x3, #0x6, lsl #12
   176e0:	strh	w0, [x3]
   176e4:	strh	w0, [x3, #480]
   176e8:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   176ec:	add	x3, x14, w4, uxtw
   176f0:	add	w4, w1, #0x3
   176f4:	cmp	w6, w4
   176f8:	add	x3, x2, x3, lsl #1
   176fc:	add	x3, x3, #0x6, lsl #12
   17700:	strh	w0, [x3]
   17704:	strh	w0, [x3, #480]
   17708:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   1770c:	add	x3, x14, w4, uxtw
   17710:	add	w4, w1, #0x4
   17714:	cmp	w6, w4
   17718:	add	x3, x2, x3, lsl #1
   1771c:	add	x3, x3, #0x6, lsl #12
   17720:	strh	w0, [x3]
   17724:	strh	w0, [x3, #480]
   17728:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   1772c:	add	x3, x14, w4, uxtw
   17730:	add	w4, w1, #0x5
   17734:	cmp	w6, w4
   17738:	add	x3, x2, x3, lsl #1
   1773c:	add	x3, x3, #0x6, lsl #12
   17740:	strh	w0, [x3]
   17744:	strh	w0, [x3, #480]
   17748:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   1774c:	add	x3, x14, w4, uxtw
   17750:	add	w1, w1, #0x6
   17754:	cmp	w6, w1
   17758:	add	x3, x2, x3, lsl #1
   1775c:	add	x3, x3, #0x6, lsl #12
   17760:	strh	w0, [x3]
   17764:	strh	w0, [x3, #480]
   17768:	b.cc	17780 <lzma_mode_is_supported@@XZ_5.0+0x2388>  // b.lo, b.ul, b.last
   1776c:	add	x1, x14, w1, uxtw
   17770:	add	x1, x2, x1, lsl #1
   17774:	add	x1, x1, #0x6, lsl #12
   17778:	strh	w0, [x1]
   1777c:	strh	w0, [x1, #480]
   17780:	strh	w0, [x5]
   17784:	add	w8, w8, #0x1
   17788:	strh	w0, [x5, #24]
   1778c:	cmp	w8, #0xc
   17790:	strh	w0, [x5, #48]
   17794:	add	x7, x7, #0x20
   17798:	strh	w0, [x5, #72]
   1779c:	add	x5, x5, #0x2
   177a0:	b.eq	177b4 <lzma_mode_is_supported@@XZ_5.0+0x23bc>  // b.none
   177a4:	cmp	w6, #0x6
   177a8:	b.hi	17684 <lzma_mode_is_supported@@XZ_5.0+0x228c>  // b.pmore
   177ac:	mov	w1, #0x0                   	// #0
   177b0:	b	176a8 <lzma_mode_is_supported@@XZ_5.0+0x22b0>
   177b4:	movi	v0.8h, #0x4, lsl #8
   177b8:	mov	x0, #0x400040004000400     	// #288234774265332736
   177bc:	mov	w1, #0x4000400             	// #67109888
   177c0:	str	q0, [x2, #25440]
   177c4:	str	q0, [x2, #25456]
   177c8:	str	q0, [x2, #25472]
   177cc:	str	q0, [x2, #25488]
   177d0:	str	q0, [x2, #25504]
   177d4:	str	q0, [x2, #25520]
   177d8:	str	q0, [x2, #25536]
   177dc:	str	q0, [x2, #25552]
   177e0:	str	q0, [x2, #25568]
   177e4:	str	q0, [x2, #25584]
   177e8:	str	q0, [x2, #25600]
   177ec:	str	q0, [x2, #25616]
   177f0:	str	q0, [x2, #25632]
   177f4:	str	q0, [x2, #25648]
   177f8:	str	q0, [x2, #25664]
   177fc:	str	q0, [x2, #25680]
   17800:	str	q0, [x2, #25696]
   17804:	str	q0, [x2, #25712]
   17808:	str	q0, [x2, #25728]
   1780c:	str	q0, [x2, #25744]
   17810:	str	q0, [x2, #25760]
   17814:	str	q0, [x2, #25776]
   17818:	str	q0, [x2, #25792]
   1781c:	str	q0, [x2, #25808]
   17820:	str	q0, [x2, #25824]
   17824:	str	q0, [x2, #25840]
   17828:	str	q0, [x2, #25856]
   1782c:	str	q0, [x2, #25872]
   17830:	str	q0, [x2, #25888]
   17834:	str	q0, [x2, #25904]
   17838:	str	q0, [x2, #25920]
   1783c:	str	q0, [x2, #25936]
   17840:	str	q0, [x2, #25952]
   17844:	str	q0, [x2, #25968]
   17848:	str	q0, [x2, #25984]
   1784c:	str	q0, [x2, #26000]
   17850:	str	q0, [x2, #26016]
   17854:	str	q0, [x2, #26032]
   17858:	str	q0, [x2, #26048]
   1785c:	str	q0, [x2, #26064]
   17860:	str	q0, [x2, #26080]
   17864:	str	q0, [x2, #26096]
   17868:	str	q0, [x2, #26112]
   1786c:	str	q0, [x2, #26128]
   17870:	str	q0, [x2, #26144]
   17874:	str	q0, [x2, #26160]
   17878:	str	x0, [x2, #26176]
   1787c:	str	x0, [x2, #26184]
   17880:	str	x0, [x2, #26192]
   17884:	str	x0, [x2, #26200]
   17888:	str	x0, [x2, #26208]
   1788c:	str	w1, [x10, #10856]
   17890:	cbz	w9, 179d0 <lzma_mode_is_supported@@XZ_5.0+0x25d8>
   17894:	mov	x6, #0x6600                	// #26112
   17898:	add	x4, x2, x6
   1789c:	mov	x7, #0x6800                	// #26624
   178a0:	add	x1, x2, x7
   178a4:	mov	x8, #0x6a00                	// #27136
   178a8:	add	x3, x2, x8
   178ac:	mov	x9, #0x6c00                	// #27648
   178b0:	add	x0, x2, x9
   178b4:	stur	q0, [x4, #104]
   178b8:	stur	q0, [x1, #-152]
   178bc:	stur	q0, [x3, #108]
   178c0:	stur	q0, [x0, #-148]
   178c4:	cbz	w11, 179d0 <lzma_mode_is_supported@@XZ_5.0+0x25d8>
   178c8:	stur	q0, [x4, #120]
   178cc:	cmp	w11, #0x1
   178d0:	stur	q0, [x1, #-136]
   178d4:	stur	q0, [x3, #124]
   178d8:	stur	q0, [x0, #-132]
   178dc:	b.eq	179d0 <lzma_mode_is_supported@@XZ_5.0+0x25d8>  // b.none
   178e0:	stur	q0, [x4, #136]
   178e4:	cmp	w11, #0x2
   178e8:	stur	q0, [x1, #-120]
   178ec:	stur	q0, [x3, #140]
   178f0:	stur	q0, [x0, #-116]
   178f4:	stur	q0, [x4, #152]
   178f8:	stur	q0, [x1, #-104]
   178fc:	stur	q0, [x3, #156]
   17900:	stur	q0, [x0, #-100]
   17904:	b.eq	179d0 <lzma_mode_is_supported@@XZ_5.0+0x25d8>  // b.none
   17908:	stur	q0, [x4, #168]
   1790c:	cmp	w11, #0x3
   17910:	stur	q0, [x1, #-88]
   17914:	stur	q0, [x3, #172]
   17918:	stur	q0, [x0, #-84]
   1791c:	stur	q0, [x4, #184]
   17920:	stur	q0, [x1, #-72]
   17924:	stur	q0, [x3, #188]
   17928:	stur	q0, [x0, #-68]
   1792c:	stur	q0, [x4, #200]
   17930:	stur	q0, [x1, #-56]
   17934:	stur	q0, [x3, #204]
   17938:	stur	q0, [x0, #-52]
   1793c:	stur	q0, [x4, #216]
   17940:	stur	q0, [x1, #-40]
   17944:	stur	q0, [x3, #220]
   17948:	stur	q0, [x0, #-36]
   1794c:	b.eq	179d0 <lzma_mode_is_supported@@XZ_5.0+0x25d8>  // b.none
   17950:	stur	q0, [x4, #232]
   17954:	stur	q0, [x1, #-24]
   17958:	stur	q0, [x3, #236]
   1795c:	stur	q0, [x0, #-20]
   17960:	stur	q0, [x4, #248]
   17964:	stur	q0, [x1, #-8]
   17968:	stur	q0, [x3, #252]
   1796c:	stur	q0, [x0, #-4]
   17970:	stur	q0, [x1, #-248]
   17974:	stur	q0, [x1, #8]
   17978:	stur	q0, [x0, #-244]
   1797c:	stur	q0, [x0, #12]
   17980:	stur	q0, [x1, #-232]
   17984:	stur	q0, [x1, #24]
   17988:	stur	q0, [x0, #-228]
   1798c:	stur	q0, [x0, #28]
   17990:	stur	q0, [x1, #-216]
   17994:	stur	q0, [x1, #40]
   17998:	stur	q0, [x0, #-212]
   1799c:	stur	q0, [x0, #44]
   179a0:	stur	q0, [x1, #-200]
   179a4:	stur	q0, [x1, #56]
   179a8:	stur	q0, [x0, #-196]
   179ac:	stur	q0, [x0, #60]
   179b0:	stur	q0, [x1, #-184]
   179b4:	stur	q0, [x1, #72]
   179b8:	stur	q0, [x0, #-180]
   179bc:	stur	q0, [x0, #76]
   179c0:	stur	q0, [x1, #-168]
   179c4:	stur	q0, [x1, #88]
   179c8:	stur	q0, [x0, #-164]
   179cc:	stur	q0, [x0, #92]
   179d0:	mov	x4, #0x6868                	// #26728
   179d4:	movi	v0.8h, #0x4, lsl #8
   179d8:	mov	x5, #0x6a68                	// #27240
   179dc:	add	x0, x2, x4
   179e0:	add	x1, x2, x5
   179e4:	nop
   179e8:	str	q0, [x0], #16
   179ec:	cmp	x0, x1
   179f0:	b.ne	179e8 <lzma_mode_is_supported@@XZ_5.0+0x25f0>  // b.any
   179f4:	mov	x1, #0x6c6c                	// #27756
   179f8:	mov	x3, #0x6e6c                	// #28268
   179fc:	movi	v0.8h, #0x4, lsl #8
   17a00:	add	x0, x2, x1
   17a04:	add	x1, x2, x3
   17a08:	str	q0, [x0], #16
   17a0c:	cmp	x0, x1
   17a10:	b.ne	17a08 <lzma_mode_is_supported@@XZ_5.0+0x2610>  // b.any
   17a14:	mov	w0, #0x1                   	// #1
   17a18:	str	w0, [x10, #11936]
   17a1c:	mov	x0, #0x6eb0                	// #28336
   17a20:	add	x0, x2, x0
   17a24:	stp	xzr, xzr, [x0]
   17a28:	str	xzr, [x2, #28328]
   17a2c:	ret
   17a30:	stp	x29, x30, [sp, #-240]!
   17a34:	mov	x29, sp
   17a38:	stp	x19, x20, [sp, #16]
   17a3c:	add	x20, x0, #0x4, lsl #12
   17a40:	stp	x27, x28, [sp, #80]
   17a44:	mov	x27, x0
   17a48:	ldr	w0, [x20, #11892]
   17a4c:	stp	x23, x24, [sp, #48]
   17a50:	mov	x23, x3
   17a54:	mov	x3, x1
   17a58:	stp	x21, x22, [sp, #32]
   17a5c:	mov	x22, x2
   17a60:	mov	x21, x4
   17a64:	ldr	x19, [x23]
   17a68:	cbz	w0, 17aa4 <lzma_mode_is_supported@@XZ_5.0+0x26ac>
   17a6c:	mov	w4, #0x4                   	// #4
   17a70:	cmp	x21, x19
   17a74:	b.eq	17b98 <lzma_mode_is_supported@@XZ_5.0+0x27a0>  // b.none
   17a78:	ldrb	w2, [x22, x19]
   17a7c:	cmp	w0, #0x5
   17a80:	b.eq	17b70 <lzma_mode_is_supported@@XZ_5.0+0x2778>  // b.none
   17a84:	ldr	w1, [x20, #11888]
   17a88:	add	x19, x19, #0x1
   17a8c:	sub	w0, w0, #0x1
   17a90:	orr	w1, w2, w1, lsl #8
   17a94:	str	w1, [x20, #11888]
   17a98:	str	x19, [x23]
   17a9c:	str	w0, [x20, #11892]
   17aa0:	cbnz	w0, 17a70 <lzma_mode_is_supported@@XZ_5.0+0x2678>
   17aa4:	ldr	x0, [x3, #32]
   17aa8:	str	x0, [sp, #104]
   17aac:	ldr	w0, [x20, #11896]
   17ab0:	str	w0, [sp, #96]
   17ab4:	ldr	w0, [x20, #11904]
   17ab8:	str	w0, [sp, #112]
   17abc:	ldr	w0, [x20, #11908]
   17ac0:	ldp	x8, x6, [x3]
   17ac4:	str	w0, [sp, #116]
   17ac8:	ldr	w0, [x20, #11912]
   17acc:	str	w0, [sp, #120]
   17ad0:	ldr	w0, [x20, #11920]
   17ad4:	str	w0, [sp, #192]
   17ad8:	ldr	w0, [x20, #11924]
   17adc:	ldr	x7, [x27, #28312]
   17ae0:	stp	x25, x26, [sp, #64]
   17ae4:	ldr	w18, [x20, #11916]
   17ae8:	str	w0, [sp, #124]
   17aec:	cmn	x7, #0x1
   17af0:	ldr	w24, [x20, #11884]
   17af4:	and	w1, w18, w6
   17af8:	ldr	w25, [x20, #11888]
   17afc:	ldr	w10, [x20, #11900]
   17b00:	ldr	w26, [x20, #11952]
   17b04:	ldr	w12, [x20, #11956]
   17b08:	ldr	w15, [x20, #11960]
   17b0c:	ldr	w9, [x20, #11964]
   17b10:	ldp	x14, x13, [x3, #16]
   17b14:	ldr	x5, [x27, #28328]
   17b18:	b.eq	17b2c <lzma_mode_is_supported@@XZ_5.0+0x2734>  // b.none
   17b1c:	sub	x2, x13, x6
   17b20:	add	x0, x7, x6
   17b24:	cmp	x7, x2
   17b28:	csel	x13, x0, x13, cc  // cc = lo, ul, last
   17b2c:	ldr	w0, [x20, #11936]
   17b30:	cmp	w0, #0x46
   17b34:	b.ls	17bb4 <lzma_mode_is_supported@@XZ_5.0+0x27bc>  // b.plast
   17b38:	mov	x11, x6
   17b3c:	mov	w0, #0xffffff              	// #16777215
   17b40:	cmp	w24, w0
   17b44:	b.hi	17b60 <lzma_mode_is_supported@@XZ_5.0+0x2768>  // b.pmore
   17b48:	cmp	x19, x21
   17b4c:	b.eq	1abb4 <lzma_mode_is_supported@@XZ_5.0+0x57bc>  // b.none
   17b50:	ldrb	w0, [x22, x19]
   17b54:	lsl	w24, w24, #8
   17b58:	add	x19, x19, #0x1
   17b5c:	orr	w25, w0, w25, lsl #8
   17b60:	mov	w1, #0x1                   	// #1
   17b64:	mov	w0, #0x0                   	// #0
   17b68:	str	w1, [x20, #11936]
   17b6c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   17b70:	cbnz	w2, 17be0 <lzma_mode_is_supported@@XZ_5.0+0x27e8>
   17b74:	ldr	w1, [x20, #11888]
   17b78:	add	x19, x19, #0x1
   17b7c:	cmp	x21, x19
   17b80:	mov	w0, #0x4                   	// #4
   17b84:	lsl	w1, w1, #8
   17b88:	str	w1, [x20, #11888]
   17b8c:	str	x19, [x23]
   17b90:	str	w4, [x20, #11892]
   17b94:	b.ne	17a78 <lzma_mode_is_supported@@XZ_5.0+0x2680>  // b.any
   17b98:	mov	w0, #0x0                   	// #0
   17b9c:	ldp	x19, x20, [sp, #16]
   17ba0:	ldp	x21, x22, [sp, #32]
   17ba4:	ldp	x23, x24, [sp, #48]
   17ba8:	ldp	x27, x28, [sp, #80]
   17bac:	ldp	x29, x30, [sp], #240
   17bb0:	ret
   17bb4:	adrp	x2, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   17bb8:	add	x2, x2, #0x500
   17bbc:	ldrh	w0, [x2, w0, uxtw #1]
   17bc0:	adr	x2, 17bcc <lzma_mode_is_supported@@XZ_5.0+0x27d4>
   17bc4:	add	x0, x2, w0, sxth #2
   17bc8:	br	x0
   17bcc:	ldr	w0, [x20, #11936]
   17bd0:	cbz	w0, 19e64 <lzma_mode_is_supported@@XZ_5.0+0x4a6c>
   17bd4:	cmp	w0, #0x1
   17bd8:	b.eq	19a40 <lzma_mode_is_supported@@XZ_5.0+0x4648>  // b.none
   17bdc:	ldp	x25, x26, [sp, #64]
   17be0:	mov	w0, #0x9                   	// #9
   17be4:	ldp	x19, x20, [sp, #16]
   17be8:	ldp	x21, x22, [sp, #32]
   17bec:	ldp	x23, x24, [sp, #48]
   17bf0:	ldp	x27, x28, [sp, #80]
   17bf4:	ldp	x29, x30, [sp], #240
   17bf8:	ret
   17bfc:	sub	x28, x6, #0x1
   17c00:	mov	x11, x6
   17c04:	nop
   17c08:	cmn	x7, #0x1
   17c0c:	b.ne	1a740 <lzma_mode_is_supported@@XZ_5.0+0x5348>  // b.any
   17c10:	mov	w0, #0xffffff              	// #16777215
   17c14:	cmp	w24, w0
   17c18:	b.hi	17c34 <lzma_mode_is_supported@@XZ_5.0+0x283c>  // b.pmore
   17c1c:	cmp	x19, x21
   17c20:	b.eq	1ab28 <lzma_mode_is_supported@@XZ_5.0+0x5730>  // b.none
   17c24:	ldrb	w0, [x22, x19]
   17c28:	lsl	w24, w24, #8
   17c2c:	add	x19, x19, #0x1
   17c30:	orr	w25, w0, w25, lsl #8
   17c34:	ldr	w16, [sp, #96]
   17c38:	mov	w4, w1
   17c3c:	lsr	w0, w24, #11
   17c40:	add	x4, x4, w16, uxtw #4
   17c44:	add	x4, x27, x4, lsl #1
   17c48:	add	x4, x4, #0x6, lsl #12
   17c4c:	ldrh	w2, [x4]
   17c50:	mul	w0, w0, w2
   17c54:	cmp	w0, w25
   17c58:	b.ls	1a3f0 <lzma_mode_is_supported@@XZ_5.0+0x4ff8>  // b.plast
   17c5c:	ldr	x5, [sp, #104]
   17c60:	cmp	x11, #0x0
   17c64:	mov	w1, #0x800                 	// #2048
   17c68:	sub	w1, w1, w2
   17c6c:	add	x5, x5, x28
   17c70:	csel	x5, x5, x28, eq  // eq = none
   17c74:	add	w2, w2, w1, lsr #5
   17c78:	ldr	w1, [sp, #124]
   17c7c:	cmp	w16, #0x6
   17c80:	strh	w2, [x4]
   17c84:	mov	w4, #0x8                   	// #8
   17c88:	and	w2, w1, w11
   17c8c:	ldrb	w1, [x8, x5]
   17c90:	ldr	w5, [sp, #192]
   17c94:	sub	w4, w4, w5
   17c98:	lsl	x2, x2, x5
   17c9c:	asr	w1, w1, w4
   17ca0:	add	x1, x2, w1, sxtw
   17ca4:	add	x1, x1, x1, lsl #1
   17ca8:	add	x5, x27, x1, lsl #9
   17cac:	b.hi	1a6ec <lzma_mode_is_supported@@XZ_5.0+0x52f4>  // b.pmore
   17cb0:	mov	x28, x11
   17cb4:	mov	w24, w0
   17cb8:	mov	w26, #0x1                   	// #1
   17cbc:	mov	w0, #0xffffff              	// #16777215
   17cc0:	cmp	w24, w0
   17cc4:	b.hi	17ce0 <lzma_mode_is_supported@@XZ_5.0+0x28e8>  // b.pmore
   17cc8:	cmp	x19, x21
   17ccc:	b.eq	1ab40 <lzma_mode_is_supported@@XZ_5.0+0x5748>  // b.none
   17cd0:	ldrb	w0, [x22, x19]
   17cd4:	lsl	w24, w24, #8
   17cd8:	add	x19, x19, #0x1
   17cdc:	orr	w25, w0, w25, lsl #8
   17ce0:	ubfiz	x2, x26, #1, #32
   17ce4:	lsr	w0, w24, #11
   17ce8:	lsl	w26, w26, #1
   17cec:	ldrh	w1, [x5, x2]
   17cf0:	mul	w0, w0, w1
   17cf4:	cmp	w0, w25
   17cf8:	b.ls	1a3d8 <lzma_mode_is_supported@@XZ_5.0+0x4fe0>  // b.plast
   17cfc:	mov	w4, #0x800                 	// #2048
   17d00:	sub	w4, w4, w1
   17d04:	mov	w24, w0
   17d08:	add	w1, w1, w4, lsr #5
   17d0c:	strh	w1, [x5, x2]
   17d10:	mov	w0, #0xffffff              	// #16777215
   17d14:	cmp	w24, w0
   17d18:	b.hi	17d34 <lzma_mode_is_supported@@XZ_5.0+0x293c>  // b.pmore
   17d1c:	cmp	x19, x21
   17d20:	b.eq	1a724 <lzma_mode_is_supported@@XZ_5.0+0x532c>  // b.none
   17d24:	ldrb	w0, [x22, x19]
   17d28:	lsl	w24, w24, #8
   17d2c:	add	x19, x19, #0x1
   17d30:	orr	w25, w0, w25, lsl #8
   17d34:	ubfiz	x2, x26, #1, #32
   17d38:	lsr	w0, w24, #11
   17d3c:	lsl	w26, w26, #1
   17d40:	ldrh	w1, [x5, x2]
   17d44:	mul	w0, w0, w1
   17d48:	cmp	w0, w25
   17d4c:	b.ls	1a1b8 <lzma_mode_is_supported@@XZ_5.0+0x4dc0>  // b.plast
   17d50:	mov	w4, #0x800                 	// #2048
   17d54:	sub	w4, w4, w1
   17d58:	mov	w24, w0
   17d5c:	add	w1, w1, w4, lsr #5
   17d60:	strh	w1, [x5, x2]
   17d64:	mov	w0, #0xffffff              	// #16777215
   17d68:	cmp	w24, w0
   17d6c:	b.hi	17d88 <lzma_mode_is_supported@@XZ_5.0+0x2990>  // b.pmore
   17d70:	cmp	x19, x21
   17d74:	b.eq	1a698 <lzma_mode_is_supported@@XZ_5.0+0x52a0>  // b.none
   17d78:	ldrb	w0, [x22, x19]
   17d7c:	lsl	w24, w24, #8
   17d80:	add	x19, x19, #0x1
   17d84:	orr	w25, w0, w25, lsl #8
   17d88:	ubfiz	x2, x26, #1, #32
   17d8c:	lsr	w0, w24, #11
   17d90:	lsl	w26, w26, #1
   17d94:	ldrh	w1, [x5, x2]
   17d98:	mul	w0, w0, w1
   17d9c:	cmp	w0, w25
   17da0:	b.ls	1a09c <lzma_mode_is_supported@@XZ_5.0+0x4ca4>  // b.plast
   17da4:	mov	w4, #0x800                 	// #2048
   17da8:	sub	w4, w4, w1
   17dac:	mov	w24, w0
   17db0:	add	w1, w1, w4, lsr #5
   17db4:	strh	w1, [x5, x2]
   17db8:	mov	w0, #0xffffff              	// #16777215
   17dbc:	cmp	w24, w0
   17dc0:	b.hi	17ddc <lzma_mode_is_supported@@XZ_5.0+0x29e4>  // b.pmore
   17dc4:	cmp	x19, x21
   17dc8:	b.eq	1a6d0 <lzma_mode_is_supported@@XZ_5.0+0x52d8>  // b.none
   17dcc:	ldrb	w0, [x22, x19]
   17dd0:	lsl	w24, w24, #8
   17dd4:	add	x19, x19, #0x1
   17dd8:	orr	w25, w0, w25, lsl #8
   17ddc:	ubfiz	x2, x26, #1, #32
   17de0:	lsr	w0, w24, #11
   17de4:	lsl	w26, w26, #1
   17de8:	ldrh	w1, [x5, x2]
   17dec:	mul	w0, w0, w1
   17df0:	cmp	w0, w25
   17df4:	b.ls	19fa0 <lzma_mode_is_supported@@XZ_5.0+0x4ba8>  // b.plast
   17df8:	mov	w4, #0x800                 	// #2048
   17dfc:	sub	w4, w4, w1
   17e00:	mov	w24, w0
   17e04:	add	w1, w1, w4, lsr #5
   17e08:	strh	w1, [x5, x2]
   17e0c:	mov	w0, #0xffffff              	// #16777215
   17e10:	cmp	w24, w0
   17e14:	b.hi	17e30 <lzma_mode_is_supported@@XZ_5.0+0x2a38>  // b.pmore
   17e18:	cmp	x19, x21
   17e1c:	b.eq	1a884 <lzma_mode_is_supported@@XZ_5.0+0x548c>  // b.none
   17e20:	ldrb	w0, [x22, x19]
   17e24:	lsl	w24, w24, #8
   17e28:	add	x19, x19, #0x1
   17e2c:	orr	w25, w0, w25, lsl #8
   17e30:	ubfiz	x2, x26, #1, #32
   17e34:	lsr	w0, w24, #11
   17e38:	lsl	w26, w26, #1
   17e3c:	ldrh	w1, [x5, x2]
   17e40:	mul	w0, w0, w1
   17e44:	cmp	w0, w25
   17e48:	b.ls	19edc <lzma_mode_is_supported@@XZ_5.0+0x4ae4>  // b.plast
   17e4c:	mov	w4, #0x800                 	// #2048
   17e50:	sub	w4, w4, w1
   17e54:	mov	w24, w0
   17e58:	add	w1, w1, w4, lsr #5
   17e5c:	strh	w1, [x5, x2]
   17e60:	mov	w0, #0xffffff              	// #16777215
   17e64:	cmp	w24, w0
   17e68:	b.hi	17e84 <lzma_mode_is_supported@@XZ_5.0+0x2a8c>  // b.pmore
   17e6c:	cmp	x19, x21
   17e70:	b.eq	1a52c <lzma_mode_is_supported@@XZ_5.0+0x5134>  // b.none
   17e74:	ldrb	w0, [x22, x19]
   17e78:	lsl	w24, w24, #8
   17e7c:	add	x19, x19, #0x1
   17e80:	orr	w25, w0, w25, lsl #8
   17e84:	ubfiz	x2, x26, #1, #32
   17e88:	lsr	w0, w24, #11
   17e8c:	lsl	w26, w26, #1
   17e90:	ldrh	w1, [x5, x2]
   17e94:	mul	w0, w0, w1
   17e98:	cmp	w0, w25
   17e9c:	b.ls	19e30 <lzma_mode_is_supported@@XZ_5.0+0x4a38>  // b.plast
   17ea0:	mov	w4, #0x800                 	// #2048
   17ea4:	sub	w4, w4, w1
   17ea8:	mov	w24, w0
   17eac:	add	w1, w1, w4, lsr #5
   17eb0:	strh	w1, [x5, x2]
   17eb4:	mov	w0, #0xffffff              	// #16777215
   17eb8:	cmp	w24, w0
   17ebc:	b.hi	17ed8 <lzma_mode_is_supported@@XZ_5.0+0x2ae0>  // b.pmore
   17ec0:	cmp	x19, x21
   17ec4:	b.eq	1a408 <lzma_mode_is_supported@@XZ_5.0+0x5010>  // b.none
   17ec8:	ldrb	w0, [x22, x19]
   17ecc:	lsl	w24, w24, #8
   17ed0:	add	x19, x19, #0x1
   17ed4:	orr	w25, w0, w25, lsl #8
   17ed8:	ubfiz	x2, x26, #1, #32
   17edc:	lsr	w0, w24, #11
   17ee0:	lsl	w26, w26, #1
   17ee4:	ldrh	w1, [x5, x2]
   17ee8:	mul	w0, w0, w1
   17eec:	cmp	w0, w25
   17ef0:	b.ls	19da0 <lzma_mode_is_supported@@XZ_5.0+0x49a8>  // b.plast
   17ef4:	mov	w4, #0x800                 	// #2048
   17ef8:	sub	w4, w4, w1
   17efc:	mov	w24, w0
   17f00:	add	w1, w1, w4, lsr #5
   17f04:	strh	w1, [x5, x2]
   17f08:	mov	w0, #0xffffff              	// #16777215
   17f0c:	cmp	w24, w0
   17f10:	b.hi	17f2c <lzma_mode_is_supported@@XZ_5.0+0x2b34>  // b.pmore
   17f14:	cmp	x19, x21
   17f18:	b.eq	1a4d4 <lzma_mode_is_supported@@XZ_5.0+0x50dc>  // b.none
   17f1c:	ldrb	w0, [x22, x19]
   17f20:	lsl	w24, w24, #8
   17f24:	add	x19, x19, #0x1
   17f28:	orr	w25, w0, w25, lsl #8
   17f2c:	ubfiz	x2, x26, #1, #32
   17f30:	lsr	w0, w24, #11
   17f34:	lsl	w26, w26, #1
   17f38:	ldrh	w1, [x5, x2]
   17f3c:	mul	w0, w0, w1
   17f40:	cmp	w0, w25
   17f44:	b.ls	19d58 <lzma_mode_is_supported@@XZ_5.0+0x4960>  // b.plast
   17f48:	mov	w4, #0x800                 	// #2048
   17f4c:	sub	w4, w4, w1
   17f50:	mov	w24, w0
   17f54:	add	w1, w1, w4, lsr #5
   17f58:	strh	w1, [x5, x2]
   17f5c:	ldr	w1, [sp, #96]
   17f60:	adrp	x0, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   17f64:	add	x0, x0, #0x590
   17f68:	ldr	w0, [x0, w1, uxtw #2]
   17f6c:	str	w0, [sp, #96]
   17f70:	cmp	x13, x28
   17f74:	and	w0, w26, #0xff
   17f78:	b.eq	1a100 <lzma_mode_is_supported@@XZ_5.0+0x4d08>  // b.none
   17f7c:	add	x11, x28, #0x1
   17f80:	strb	w0, [x8, x28]
   17f84:	cmp	x14, x11
   17f88:	csel	x14, x14, x11, cs  // cs = hs, nlast
   17f8c:	and	w1, w18, w11
   17f90:	b	17c08 <lzma_mode_is_supported@@XZ_5.0+0x2810>
   17f94:	mov	x28, x6
   17f98:	b	17cbc <lzma_mode_is_supported@@XZ_5.0+0x28c4>
   17f9c:	mov	x28, x6
   17fa0:	b	17d10 <lzma_mode_is_supported@@XZ_5.0+0x2918>
   17fa4:	mov	x28, x6
   17fa8:	b	17d64 <lzma_mode_is_supported@@XZ_5.0+0x296c>
   17fac:	mov	x28, x6
   17fb0:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x29c0>
   17fb4:	mov	x28, x6
   17fb8:	b	17e0c <lzma_mode_is_supported@@XZ_5.0+0x2a14>
   17fbc:	mov	x28, x6
   17fc0:	b	17e60 <lzma_mode_is_supported@@XZ_5.0+0x2a68>
   17fc4:	mov	x28, x6
   17fc8:	b	17eb4 <lzma_mode_is_supported@@XZ_5.0+0x2abc>
   17fcc:	mov	x28, x6
   17fd0:	b	17f08 <lzma_mode_is_supported@@XZ_5.0+0x2b10>
   17fd4:	add	w0, w26, w15
   17fd8:	mov	x28, x6
   17fdc:	and	w2, w15, w9
   17fe0:	mov	w1, #0xffffff              	// #16777215
   17fe4:	add	w0, w2, w0
   17fe8:	cmp	w24, w1
   17fec:	b.hi	18008 <lzma_mode_is_supported@@XZ_5.0+0x2c10>  // b.pmore
   17ff0:	cmp	x19, x21
   17ff4:	b.eq	1aae8 <lzma_mode_is_supported@@XZ_5.0+0x56f0>  // b.none
   17ff8:	ldrb	w1, [x22, x19]
   17ffc:	lsl	w24, w24, #8
   18000:	add	x19, x19, #0x1
   18004:	orr	w25, w1, w25, lsl #8
   18008:	ubfiz	x0, x0, #1, #32
   1800c:	lsr	w1, w24, #11
   18010:	add	x4, x5, x0
   18014:	lsl	w26, w26, #1
   18018:	ldrh	w0, [x5, x0]
   1801c:	mul	w1, w1, w0
   18020:	cmp	w1, w25
   18024:	b.ls	1a3bc <lzma_mode_is_supported@@XZ_5.0+0x4fc4>  // b.plast
   18028:	mov	w11, #0x800                 	// #2048
   1802c:	sub	w11, w11, w0
   18030:	bic	w15, w15, w2
   18034:	mov	w24, w1
   18038:	add	w0, w0, w11, lsr #5
   1803c:	and	w0, w0, #0xffff
   18040:	lsl	w9, w9, #1
   18044:	strh	w0, [x4]
   18048:	and	w2, w15, w9
   1804c:	add	w0, w26, w15
   18050:	mov	w1, #0xffffff              	// #16777215
   18054:	add	w0, w0, w2
   18058:	cmp	w24, w1
   1805c:	b.hi	18078 <lzma_mode_is_supported@@XZ_5.0+0x2c80>  // b.pmore
   18060:	cmp	x19, x21
   18064:	b.eq	1a9c0 <lzma_mode_is_supported@@XZ_5.0+0x55c8>  // b.none
   18068:	ldrb	w1, [x22, x19]
   1806c:	lsl	w24, w24, #8
   18070:	add	x19, x19, #0x1
   18074:	orr	w25, w1, w25, lsl #8
   18078:	ubfiz	x0, x0, #1, #32
   1807c:	lsr	w1, w24, #11
   18080:	add	x4, x5, x0
   18084:	lsl	w26, w26, #1
   18088:	ldrh	w0, [x5, x0]
   1808c:	mul	w1, w1, w0
   18090:	cmp	w1, w25
   18094:	b.ls	1a1f4 <lzma_mode_is_supported@@XZ_5.0+0x4dfc>  // b.plast
   18098:	mov	w11, #0x800                 	// #2048
   1809c:	sub	w11, w11, w0
   180a0:	bic	w15, w15, w2
   180a4:	mov	w24, w1
   180a8:	add	w0, w0, w11, lsr #5
   180ac:	and	w0, w0, #0xffff
   180b0:	lsl	w9, w9, #1
   180b4:	strh	w0, [x4]
   180b8:	and	w2, w15, w9
   180bc:	add	w0, w26, w15
   180c0:	mov	w1, #0xffffff              	// #16777215
   180c4:	add	w0, w0, w2
   180c8:	cmp	w24, w1
   180cc:	b.hi	180e8 <lzma_mode_is_supported@@XZ_5.0+0x2cf0>  // b.pmore
   180d0:	cmp	x19, x21
   180d4:	b.eq	1a67c <lzma_mode_is_supported@@XZ_5.0+0x5284>  // b.none
   180d8:	ldrb	w1, [x22, x19]
   180dc:	lsl	w24, w24, #8
   180e0:	add	x19, x19, #0x1
   180e4:	orr	w25, w1, w25, lsl #8
   180e8:	ubfiz	x0, x0, #1, #32
   180ec:	lsr	w1, w24, #11
   180f0:	add	x4, x5, x0
   180f4:	lsl	w26, w26, #1
   180f8:	ldrh	w0, [x5, x0]
   180fc:	mul	w1, w1, w0
   18100:	cmp	w1, w25
   18104:	b.ls	1a0e4 <lzma_mode_is_supported@@XZ_5.0+0x4cec>  // b.plast
   18108:	mov	w11, #0x800                 	// #2048
   1810c:	sub	w11, w11, w0
   18110:	bic	w15, w15, w2
   18114:	mov	w24, w1
   18118:	add	w0, w0, w11, lsr #5
   1811c:	and	w0, w0, #0xffff
   18120:	lsl	w9, w9, #1
   18124:	strh	w0, [x4]
   18128:	and	w1, w15, w9
   1812c:	add	w0, w26, w15
   18130:	mov	w2, #0xffffff              	// #16777215
   18134:	add	w0, w0, w1
   18138:	cmp	w24, w2
   1813c:	b.hi	18158 <lzma_mode_is_supported@@XZ_5.0+0x2d60>  // b.pmore
   18140:	cmp	x19, x21
   18144:	b.eq	1aa38 <lzma_mode_is_supported@@XZ_5.0+0x5640>  // b.none
   18148:	ldrb	w2, [x22, x19]
   1814c:	lsl	w24, w24, #8
   18150:	add	x19, x19, #0x1
   18154:	orr	w25, w2, w25, lsl #8
   18158:	ubfiz	x0, x0, #1, #32
   1815c:	lsr	w2, w24, #11
   18160:	add	x4, x5, x0
   18164:	lsl	w26, w26, #1
   18168:	ldrh	w0, [x5, x0]
   1816c:	mul	w2, w2, w0
   18170:	cmp	w2, w25
   18174:	b.ls	19f6c <lzma_mode_is_supported@@XZ_5.0+0x4b74>  // b.plast
   18178:	mov	w11, #0x800                 	// #2048
   1817c:	sub	w11, w11, w0
   18180:	bic	w15, w15, w1
   18184:	mov	w24, w2
   18188:	add	w0, w0, w11, lsr #5
   1818c:	and	w0, w0, #0xffff
   18190:	lsl	w9, w9, #1
   18194:	strh	w0, [x4]
   18198:	and	w1, w15, w9
   1819c:	add	w0, w26, w15
   181a0:	mov	w2, #0xffffff              	// #16777215
   181a4:	add	w0, w0, w1
   181a8:	cmp	w24, w2
   181ac:	b.hi	181c8 <lzma_mode_is_supported@@XZ_5.0+0x2dd0>  // b.pmore
   181b0:	cmp	x19, x21
   181b4:	b.eq	1a628 <lzma_mode_is_supported@@XZ_5.0+0x5230>  // b.none
   181b8:	ldrb	w2, [x22, x19]
   181bc:	lsl	w24, w24, #8
   181c0:	add	x19, x19, #0x1
   181c4:	orr	w25, w2, w25, lsl #8
   181c8:	ubfiz	x0, x0, #1, #32
   181cc:	lsr	w2, w24, #11
   181d0:	add	x4, x5, x0
   181d4:	lsl	w26, w26, #1
   181d8:	ldrh	w0, [x5, x0]
   181dc:	mul	w2, w2, w0
   181e0:	cmp	w2, w25
   181e4:	b.ls	19ec4 <lzma_mode_is_supported@@XZ_5.0+0x4acc>  // b.plast
   181e8:	mov	w11, #0x800                 	// #2048
   181ec:	sub	w11, w11, w0
   181f0:	bic	w1, w15, w1
   181f4:	mov	w24, w2
   181f8:	add	w0, w0, w11, lsr #5
   181fc:	and	w0, w0, #0xffff
   18200:	lsl	w9, w9, #1
   18204:	strh	w0, [x4]
   18208:	and	w15, w1, w9
   1820c:	add	w0, w26, w1
   18210:	mov	w2, #0xffffff              	// #16777215
   18214:	add	w0, w0, w15
   18218:	cmp	w24, w2
   1821c:	b.hi	18238 <lzma_mode_is_supported@@XZ_5.0+0x2e40>  // b.pmore
   18220:	cmp	x19, x21
   18224:	b.eq	1a424 <lzma_mode_is_supported@@XZ_5.0+0x502c>  // b.none
   18228:	ldrb	w2, [x22, x19]
   1822c:	lsl	w24, w24, #8
   18230:	add	x19, x19, #0x1
   18234:	orr	w25, w2, w25, lsl #8
   18238:	ubfiz	x0, x0, #1, #32
   1823c:	lsr	w2, w24, #11
   18240:	add	x4, x5, x0
   18244:	lsl	w26, w26, #1
   18248:	ldrh	w0, [x5, x0]
   1824c:	mul	w2, w2, w0
   18250:	cmp	w2, w25
   18254:	b.ls	19e18 <lzma_mode_is_supported@@XZ_5.0+0x4a20>  // b.plast
   18258:	mov	w11, #0x800                 	// #2048
   1825c:	sub	w11, w11, w0
   18260:	bic	w15, w1, w15
   18264:	mov	w24, w2
   18268:	add	w0, w0, w11, lsr #5
   1826c:	and	w0, w0, #0xffff
   18270:	lsl	w9, w9, #1
   18274:	strh	w0, [x4]
   18278:	and	w1, w15, w9
   1827c:	add	w0, w26, w15
   18280:	mov	w2, #0xffffff              	// #16777215
   18284:	add	w0, w0, w1
   18288:	cmp	w24, w2
   1828c:	b.hi	182a8 <lzma_mode_is_supported@@XZ_5.0+0x2eb0>  // b.pmore
   18290:	cmp	x19, x21
   18294:	b.eq	1a564 <lzma_mode_is_supported@@XZ_5.0+0x516c>  // b.none
   18298:	ldrb	w2, [x22, x19]
   1829c:	lsl	w24, w24, #8
   182a0:	add	x19, x19, #0x1
   182a4:	orr	w25, w2, w25, lsl #8
   182a8:	ubfiz	x0, x0, #1, #32
   182ac:	lsr	w2, w24, #11
   182b0:	add	x4, x5, x0
   182b4:	lsl	w26, w26, #1
   182b8:	ldrh	w0, [x5, x0]
   182bc:	mul	w2, w2, w0
   182c0:	cmp	w2, w25
   182c4:	b.ls	19db8 <lzma_mode_is_supported@@XZ_5.0+0x49c0>  // b.plast
   182c8:	mov	w11, #0x800                 	// #2048
   182cc:	sub	w11, w11, w0
   182d0:	bic	w1, w15, w1
   182d4:	mov	w24, w2
   182d8:	add	w0, w0, w11, lsr #5
   182dc:	and	w0, w0, #0xffff
   182e0:	lsl	w9, w9, #1
   182e4:	strh	w0, [x4]
   182e8:	and	w15, w1, w9
   182ec:	add	w0, w26, w1
   182f0:	mov	w2, #0xffffff              	// #16777215
   182f4:	add	w0, w0, w15
   182f8:	cmp	w24, w2
   182fc:	b.hi	18318 <lzma_mode_is_supported@@XZ_5.0+0x2f20>  // b.pmore
   18300:	cmp	x19, x21
   18304:	b.eq	1a4b4 <lzma_mode_is_supported@@XZ_5.0+0x50bc>  // b.none
   18308:	ldrb	w2, [x22, x19]
   1830c:	lsl	w24, w24, #8
   18310:	add	x19, x19, #0x1
   18314:	orr	w25, w2, w25, lsl #8
   18318:	ubfiz	x2, x0, #1, #32
   1831c:	lsr	w0, w24, #11
   18320:	lsl	w26, w26, #1
   18324:	ldrh	w4, [x5, x2]
   18328:	mul	w0, w0, w4
   1832c:	cmp	w0, w25
   18330:	b.ls	19d40 <lzma_mode_is_supported@@XZ_5.0+0x4948>  // b.plast
   18334:	mov	w11, #0x800                 	// #2048
   18338:	sub	w11, w11, w4
   1833c:	mov	w24, w0
   18340:	bic	w15, w1, w15
   18344:	add	w0, w4, w11, lsr #5
   18348:	strh	w0, [x5, x2]
   1834c:	b	17f5c <lzma_mode_is_supported@@XZ_5.0+0x2b64>
   18350:	mov	x28, x6
   18354:	b	18048 <lzma_mode_is_supported@@XZ_5.0+0x2c50>
   18358:	mov	x28, x6
   1835c:	mov	w0, #0xffffff              	// #16777215
   18360:	cmp	w24, w0
   18364:	b.hi	18380 <lzma_mode_is_supported@@XZ_5.0+0x2f88>  // b.pmore
   18368:	cmp	x19, x21
   1836c:	b.eq	1a2a0 <lzma_mode_is_supported@@XZ_5.0+0x4ea8>  // b.none
   18370:	ldrb	w0, [x22, x19]
   18374:	lsl	w24, w24, #8
   18378:	add	x19, x19, #0x1
   1837c:	orr	w25, w0, w25, lsl #8
   18380:	ubfiz	x2, x26, #1, #32
   18384:	lsr	w0, w24, #11
   18388:	lsl	w26, w26, #1
   1838c:	ldrh	w1, [x5, x2]
   18390:	mul	w0, w0, w1
   18394:	cmp	w0, w25
   18398:	b.ls	19aa4 <lzma_mode_is_supported@@XZ_5.0+0x46ac>  // b.plast
   1839c:	mov	w4, #0x800                 	// #2048
   183a0:	sub	w4, w4, w1
   183a4:	mov	w24, w0
   183a8:	add	w1, w1, w4, lsr #5
   183ac:	strh	w1, [x5, x2]
   183b0:	mov	w0, #0xffffff              	// #16777215
   183b4:	cmp	w24, w0
   183b8:	b.hi	183d4 <lzma_mode_is_supported@@XZ_5.0+0x2fdc>  // b.pmore
   183bc:	cmp	x19, x21
   183c0:	b.eq	1a2bc <lzma_mode_is_supported@@XZ_5.0+0x4ec4>  // b.none
   183c4:	ldrb	w0, [x22, x19]
   183c8:	lsl	w24, w24, #8
   183cc:	add	x19, x19, #0x1
   183d0:	orr	w25, w0, w25, lsl #8
   183d4:	ubfiz	x2, x26, #1, #32
   183d8:	lsr	w0, w24, #11
   183dc:	lsl	w26, w26, #1
   183e0:	ldrh	w1, [x5, x2]
   183e4:	mul	w0, w0, w1
   183e8:	cmp	w0, w25
   183ec:	b.ls	19a8c <lzma_mode_is_supported@@XZ_5.0+0x4694>  // b.plast
   183f0:	mov	w4, #0x800                 	// #2048
   183f4:	sub	w4, w4, w1
   183f8:	mov	w24, w0
   183fc:	add	w1, w1, w4, lsr #5
   18400:	strh	w1, [x5, x2]
   18404:	mov	w0, #0xffffff              	// #16777215
   18408:	cmp	w24, w0
   1840c:	b.hi	18428 <lzma_mode_is_supported@@XZ_5.0+0x3030>  // b.pmore
   18410:	cmp	x19, x21
   18414:	b.eq	1a284 <lzma_mode_is_supported@@XZ_5.0+0x4e8c>  // b.none
   18418:	ldrb	w0, [x22, x19]
   1841c:	lsl	w24, w24, #8
   18420:	add	x19, x19, #0x1
   18424:	orr	w25, w0, w25, lsl #8
   18428:	ubfiz	x0, x26, #1, #32
   1842c:	lsr	w1, w24, #11
   18430:	add	x2, x5, x0
   18434:	lsl	w10, w26, #1
   18438:	ldrh	w0, [x5, x0]
   1843c:	mul	w1, w1, w0
   18440:	cmp	w1, w25
   18444:	b.ls	19a74 <lzma_mode_is_supported@@XZ_5.0+0x467c>  // b.plast
   18448:	mov	w4, #0x800                 	// #2048
   1844c:	sub	w4, w4, w0
   18450:	mov	w24, w1
   18454:	add	w0, w0, w4, lsr #5
   18458:	and	w0, w0, #0xffff
   1845c:	strh	w0, [x2]
   18460:	sub	w10, w10, #0x40
   18464:	cmp	w10, #0x3
   18468:	b.ls	19a6c <lzma_mode_is_supported@@XZ_5.0+0x4674>  // b.plast
   1846c:	and	w0, w10, #0x1
   18470:	cmp	w10, #0xd
   18474:	add	w0, w0, #0x2
   18478:	lsr	w12, w10, #1
   1847c:	b.hi	19cf0 <lzma_mode_is_supported@@XZ_5.0+0x48f8>  // b.pmore
   18480:	sub	w12, w12, #0x1
   18484:	mov	w15, #0x0                   	// #0
   18488:	mov	w26, #0x1                   	// #1
   1848c:	lsl	w5, w0, w12
   18490:	mov	x0, x5
   18494:	sub	x5, x5, w10, uxtw
   18498:	mov	x10, #0x655e                	// #25950
   1849c:	add	x5, x27, x5, lsl #1
   184a0:	add	x5, x5, x10
   184a4:	cmp	w12, #0x3
   184a8:	b.eq	19c74 <lzma_mode_is_supported@@XZ_5.0+0x487c>  // b.none
   184ac:	b.hi	19ba4 <lzma_mode_is_supported@@XZ_5.0+0x47ac>  // b.pmore
   184b0:	cmp	w12, #0x1
   184b4:	b.eq	18520 <lzma_mode_is_supported@@XZ_5.0+0x3128>  // b.none
   184b8:	cmp	w12, #0x2
   184bc:	b.ne	1ab20 <lzma_mode_is_supported@@XZ_5.0+0x5728>  // b.any
   184c0:	mov	w1, #0xffffff              	// #16777215
   184c4:	cmp	w24, w1
   184c8:	b.hi	184e4 <lzma_mode_is_supported@@XZ_5.0+0x30ec>  // b.pmore
   184cc:	cmp	x19, x21
   184d0:	b.eq	1a7f0 <lzma_mode_is_supported@@XZ_5.0+0x53f8>  // b.none
   184d4:	ldrb	w1, [x22, x19]
   184d8:	lsl	w24, w24, #8
   184dc:	add	x19, x19, #0x1
   184e0:	orr	w25, w1, w25, lsl #8
   184e4:	ubfiz	x1, x26, #1, #32
   184e8:	lsr	w2, w24, #11
   184ec:	add	x4, x5, x1
   184f0:	lsl	w26, w26, #1
   184f4:	ldrh	w1, [x5, x1]
   184f8:	mul	w2, w2, w1
   184fc:	cmp	w2, w25
   18500:	b.ls	1a164 <lzma_mode_is_supported@@XZ_5.0+0x4d6c>  // b.plast
   18504:	mov	w10, #0x800                 	// #2048
   18508:	sub	w10, w10, w1
   1850c:	mov	w24, w2
   18510:	add	w1, w1, w10, lsr #5
   18514:	and	w1, w1, #0xffff
   18518:	add	w15, w15, #0x1
   1851c:	strh	w1, [x4]
   18520:	mov	w1, #0xffffff              	// #16777215
   18524:	cmp	w24, w1
   18528:	b.hi	18544 <lzma_mode_is_supported@@XZ_5.0+0x314c>  // b.pmore
   1852c:	cmp	x19, x21
   18530:	b.eq	1a9dc <lzma_mode_is_supported@@XZ_5.0+0x55e4>  // b.none
   18534:	ldrb	w1, [x22, x19]
   18538:	lsl	w24, w24, #8
   1853c:	add	x19, x19, #0x1
   18540:	orr	w25, w1, w25, lsl #8
   18544:	ubfiz	x4, x26, #1, #32
   18548:	lsr	w1, w24, #11
   1854c:	ldrh	w2, [x5, x4]
   18550:	mul	w1, w1, w2
   18554:	cmp	w1, w25
   18558:	b.ls	1a038 <lzma_mode_is_supported@@XZ_5.0+0x4c40>  // b.plast
   1855c:	mov	w11, #0x800                 	// #2048
   18560:	sub	w11, w11, w2
   18564:	mov	w24, w1
   18568:	mov	w10, w0
   1856c:	add	w2, w2, w11, lsr #5
   18570:	mov	w12, #0x1                   	// #1
   18574:	strh	w2, [x5, x4]
   18578:	cmp	x14, w10, uxtw
   1857c:	mov	w1, w10
   18580:	b.ls	1a024 <lzma_mode_is_supported@@XZ_5.0+0x4c2c>  // b.plast
   18584:	mov	w0, w9
   18588:	sub	x11, x13, x28
   1858c:	cmp	x11, x0
   18590:	csel	x11, x11, x0, ls  // ls = plast
   18594:	sub	w9, w9, w11
   18598:	cmp	w10, w11
   1859c:	b.cs	19988 <lzma_mode_is_supported@@XZ_5.0+0x4590>  // b.hs, b.nlast
   185a0:	ldr	x4, [sp, #104]
   185a4:	sub	w11, w11, #0x1
   185a8:	add	x0, x28, #0x1
   185ac:	mvn	x2, x1
   185b0:	add	x11, x0, x11
   185b4:	add	x16, x8, x4
   185b8:	b	185c0 <lzma_mode_is_supported@@XZ_5.0+0x31c8>
   185bc:	add	x0, x0, #0x1
   185c0:	add	x4, x16, x28
   185c4:	cmp	x28, x1
   185c8:	b.ls	185d0 <lzma_mode_is_supported@@XZ_5.0+0x31d8>  // b.plast
   185cc:	add	x4, x8, x28
   185d0:	ldrb	w4, [x4, x2]
   185d4:	cmp	x0, x11
   185d8:	strb	w4, [x8, x28]
   185dc:	mov	x28, x0
   185e0:	b.ne	185bc <lzma_mode_is_supported@@XZ_5.0+0x31c4>  // b.any
   185e4:	cmp	x14, x11
   185e8:	sub	x28, x11, #0x1
   185ec:	csel	x14, x14, x11, cs  // cs = hs, nlast
   185f0:	cbz	w9, 17f8c <lzma_mode_is_supported@@XZ_5.0+0x2b94>
   185f4:	mov	w2, #0x46                  	// #70
   185f8:	mov	w1, #0x1                   	// #1
   185fc:	mov	w0, #0x0                   	// #0
   18600:	ldr	x7, [x27, #28312]
   18604:	str	w2, [x20, #11936]
   18608:	ldr	w2, [sp, #96]
   1860c:	cmn	x7, #0x1
   18610:	str	w2, [x20, #11896]
   18614:	ldr	w2, [sp, #112]
   18618:	str	w2, [x20, #11904]
   1861c:	ldr	w2, [sp, #116]
   18620:	str	w2, [x20, #11908]
   18624:	ldr	w2, [sp, #120]
   18628:	str	w24, [x20, #11884]
   1862c:	str	w25, [x20, #11888]
   18630:	str	wzr, [x20, #11892]
   18634:	str	w10, [x20, #11900]
   18638:	str	w2, [x20, #11912]
   1863c:	str	x5, [x27, #28328]
   18640:	str	x19, [x23]
   18644:	stp	x11, x14, [x3, #8]
   18648:	str	w26, [x20, #11952]
   1864c:	str	w12, [x20, #11956]
   18650:	str	w15, [x20, #11960]
   18654:	str	w9, [x20, #11964]
   18658:	b.eq	18670 <lzma_mode_is_supported@@XZ_5.0+0x3278>  // b.none
   1865c:	add	x6, x6, x7
   18660:	subs	x11, x6, x11
   18664:	str	x11, [x27, #28312]
   18668:	ccmp	w1, #0x0, #0x4, eq  // eq = none
   1866c:	b.ne	17bcc <lzma_mode_is_supported@@XZ_5.0+0x27d4>  // b.any
   18670:	cmp	w0, #0x1
   18674:	b.eq	19a40 <lzma_mode_is_supported@@XZ_5.0+0x4648>  // b.none
   18678:	ldp	x19, x20, [sp, #16]
   1867c:	ldp	x21, x22, [sp, #32]
   18680:	ldp	x23, x24, [sp, #48]
   18684:	ldp	x25, x26, [sp, #64]
   18688:	ldp	x27, x28, [sp, #80]
   1868c:	ldp	x29, x30, [sp], #240
   18690:	ret
   18694:	mov	x28, x6
   18698:	b	183b0 <lzma_mode_is_supported@@XZ_5.0+0x2fb8>
   1869c:	mov	x28, x6
   186a0:	mov	w0, #0xffffff              	// #16777215
   186a4:	cmp	w24, w0
   186a8:	b.hi	186c4 <lzma_mode_is_supported@@XZ_5.0+0x32cc>  // b.pmore
   186ac:	cmp	x19, x21
   186b0:	b.eq	1aa00 <lzma_mode_is_supported@@XZ_5.0+0x5608>  // b.none
   186b4:	ldrb	w0, [x22, x19]
   186b8:	lsl	w24, w24, #8
   186bc:	add	x19, x19, #0x1
   186c0:	orr	w25, w0, w25, lsl #8
   186c4:	mov	w0, w26
   186c8:	lsr	w2, w24, #11
   186cc:	add	x0, x0, w1, uxtw #3
   186d0:	lsl	w9, w26, #1
   186d4:	add	x0, x27, x0, lsl #1
   186d8:	add	x1, x0, #0x6, lsl #12
   186dc:	ldrh	w0, [x1, #1640]
   186e0:	mul	w2, w2, w0
   186e4:	cmp	w2, w25
   186e8:	b.ls	1a058 <lzma_mode_is_supported@@XZ_5.0+0x4c60>  // b.plast
   186ec:	mov	w4, #0x800                 	// #2048
   186f0:	sub	w4, w4, w0
   186f4:	mov	w24, w2
   186f8:	add	w0, w0, w4, lsr #5
   186fc:	and	w0, w0, #0xffff
   18700:	sub	w9, w9, #0x6
   18704:	strh	w0, [x1, #1640]
   18708:	cmp	w9, #0x5
   1870c:	mov	w5, #0x5                   	// #5
   18710:	csel	w5, w9, w5, ls  // ls = plast
   18714:	mov	x11, #0x6360                	// #25440
   18718:	sub	w5, w5, #0x2
   1871c:	mov	w26, #0x1                   	// #1
   18720:	ubfiz	x5, x5, #7, #32
   18724:	add	x5, x5, x11
   18728:	add	x5, x27, x5
   1872c:	mov	w0, #0xffffff              	// #16777215
   18730:	cmp	w24, w0
   18734:	b.hi	18750 <lzma_mode_is_supported@@XZ_5.0+0x3358>  // b.pmore
   18738:	cmp	x19, x21
   1873c:	b.eq	1a3a0 <lzma_mode_is_supported@@XZ_5.0+0x4fa8>  // b.none
   18740:	ldrb	w0, [x22, x19]
   18744:	lsl	w24, w24, #8
   18748:	add	x19, x19, #0x1
   1874c:	orr	w25, w0, w25, lsl #8
   18750:	ubfiz	x2, x26, #1, #32
   18754:	lsr	w0, w24, #11
   18758:	lsl	w26, w26, #1
   1875c:	ldrh	w1, [x5, x2]
   18760:	mul	w0, w0, w1
   18764:	cmp	w0, w25
   18768:	b.ls	19aec <lzma_mode_is_supported@@XZ_5.0+0x46f4>  // b.plast
   1876c:	mov	w4, #0x800                 	// #2048
   18770:	sub	w4, w4, w1
   18774:	mov	w24, w0
   18778:	add	w1, w1, w4, lsr #5
   1877c:	strh	w1, [x5, x2]
   18780:	mov	w0, #0xffffff              	// #16777215
   18784:	cmp	w24, w0
   18788:	b.hi	187a4 <lzma_mode_is_supported@@XZ_5.0+0x33ac>  // b.pmore
   1878c:	cmp	x19, x21
   18790:	b.eq	1a384 <lzma_mode_is_supported@@XZ_5.0+0x4f8c>  // b.none
   18794:	ldrb	w0, [x22, x19]
   18798:	lsl	w24, w24, #8
   1879c:	add	x19, x19, #0x1
   187a0:	orr	w25, w0, w25, lsl #8
   187a4:	ubfiz	x2, x26, #1, #32
   187a8:	lsr	w0, w24, #11
   187ac:	lsl	w26, w26, #1
   187b0:	ldrh	w1, [x5, x2]
   187b4:	mul	w0, w0, w1
   187b8:	cmp	w0, w25
   187bc:	b.ls	19ad4 <lzma_mode_is_supported@@XZ_5.0+0x46dc>  // b.plast
   187c0:	mov	w4, #0x800                 	// #2048
   187c4:	sub	w4, w4, w1
   187c8:	mov	w24, w0
   187cc:	add	w1, w1, w4, lsr #5
   187d0:	strh	w1, [x5, x2]
   187d4:	mov	w0, #0xffffff              	// #16777215
   187d8:	cmp	w24, w0
   187dc:	b.hi	187f8 <lzma_mode_is_supported@@XZ_5.0+0x3400>  // b.pmore
   187e0:	cmp	x19, x21
   187e4:	b.eq	1a254 <lzma_mode_is_supported@@XZ_5.0+0x4e5c>  // b.none
   187e8:	ldrb	w0, [x22, x19]
   187ec:	lsl	w24, w24, #8
   187f0:	add	x19, x19, #0x1
   187f4:	orr	w25, w0, w25, lsl #8
   187f8:	ubfiz	x2, x26, #1, #32
   187fc:	lsr	w0, w24, #11
   18800:	lsl	w26, w26, #1
   18804:	ldrh	w1, [x5, x2]
   18808:	mul	w0, w0, w1
   1880c:	cmp	w0, w25
   18810:	b.ls	19abc <lzma_mode_is_supported@@XZ_5.0+0x46c4>  // b.plast
   18814:	mov	w4, #0x800                 	// #2048
   18818:	sub	w4, w4, w1
   1881c:	mov	w24, w0
   18820:	add	w1, w1, w4, lsr #5
   18824:	strh	w1, [x5, x2]
   18828:	b	1835c <lzma_mode_is_supported@@XZ_5.0+0x2f64>
   1882c:	mov	x28, x6
   18830:	mov	w0, #0xffffff              	// #16777215
   18834:	cmp	w24, w0
   18838:	b.hi	18854 <lzma_mode_is_supported@@XZ_5.0+0x345c>  // b.pmore
   1883c:	cmp	x19, x21
   18840:	b.eq	1a830 <lzma_mode_is_supported@@XZ_5.0+0x5438>  // b.none
   18844:	ldrb	w0, [x22, x19]
   18848:	lsl	w24, w24, #8
   1884c:	add	x19, x19, #0x1
   18850:	orr	w25, w0, w25, lsl #8
   18854:	add	x4, x27, #0x6, lsl #12
   18858:	lsr	w2, w24, #11
   1885c:	ldrh	w0, [x4, #1638]
   18860:	mul	w2, w2, w0
   18864:	cmp	w2, w25
   18868:	b.ls	1a240 <lzma_mode_is_supported@@XZ_5.0+0x4e48>  // b.plast
   1886c:	mov	w11, #0x800                 	// #2048
   18870:	sub	w11, w11, w0
   18874:	mov	w24, w2
   18878:	add	w0, w0, w11, lsr #5
   1887c:	strh	w0, [x4, #1638]
   18880:	mov	w0, #0xffffff              	// #16777215
   18884:	cmp	w24, w0
   18888:	b.hi	188a4 <lzma_mode_is_supported@@XZ_5.0+0x34ac>  // b.pmore
   1888c:	cmp	x19, x21
   18890:	b.eq	1a814 <lzma_mode_is_supported@@XZ_5.0+0x541c>  // b.none
   18894:	ldrb	w0, [x22, x19]
   18898:	lsl	w24, w24, #8
   1889c:	add	x19, x19, #0x1
   188a0:	orr	w25, w0, w25, lsl #8
   188a4:	mov	w2, w26
   188a8:	lsr	w4, w24, #11
   188ac:	add	x2, x2, w1, uxtw #3
   188b0:	lsl	w26, w26, #1
   188b4:	add	x2, x27, x2, lsl #1
   188b8:	add	x2, x2, #0x6, lsl #12
   188bc:	ldrh	w0, [x2, #1896]
   188c0:	mul	w4, w4, w0
   188c4:	cmp	w4, w25
   188c8:	b.ls	1a228 <lzma_mode_is_supported@@XZ_5.0+0x4e30>  // b.plast
   188cc:	mov	w11, #0x800                 	// #2048
   188d0:	sub	w11, w11, w0
   188d4:	mov	w24, w4
   188d8:	add	w0, w0, w11, lsr #5
   188dc:	strh	w0, [x2, #1896]
   188e0:	mov	w0, #0xffffff              	// #16777215
   188e4:	cmp	w24, w0
   188e8:	b.hi	18904 <lzma_mode_is_supported@@XZ_5.0+0x350c>  // b.pmore
   188ec:	cmp	x19, x21
   188f0:	b.eq	1aaa8 <lzma_mode_is_supported@@XZ_5.0+0x56b0>  // b.none
   188f4:	ldrb	w0, [x22, x19]
   188f8:	lsl	w24, w24, #8
   188fc:	add	x19, x19, #0x1
   18900:	orr	w25, w0, w25, lsl #8
   18904:	mov	w2, w26
   18908:	lsr	w4, w24, #11
   1890c:	add	x2, x2, w1, uxtw #3
   18910:	lsl	w26, w26, #1
   18914:	add	x2, x27, x2, lsl #1
   18918:	add	x2, x2, #0x6, lsl #12
   1891c:	ldrh	w0, [x2, #1896]
   18920:	mul	w4, w4, w0
   18924:	cmp	w4, w25
   18928:	b.ls	1a134 <lzma_mode_is_supported@@XZ_5.0+0x4d3c>  // b.plast
   1892c:	mov	w11, #0x800                 	// #2048
   18930:	sub	w11, w11, w0
   18934:	mov	w24, w4
   18938:	add	w0, w0, w11, lsr #5
   1893c:	strh	w0, [x2, #1896]
   18940:	mov	w0, #0xffffff              	// #16777215
   18944:	cmp	w24, w0
   18948:	b.hi	18964 <lzma_mode_is_supported@@XZ_5.0+0x356c>  // b.pmore
   1894c:	cmp	x19, x21
   18950:	b.eq	1a8bc <lzma_mode_is_supported@@XZ_5.0+0x54c4>  // b.none
   18954:	ldrb	w0, [x22, x19]
   18958:	lsl	w24, w24, #8
   1895c:	add	x19, x19, #0x1
   18960:	orr	w25, w0, w25, lsl #8
   18964:	mov	w0, w26
   18968:	lsr	w2, w24, #11
   1896c:	add	x0, x0, w1, uxtw #3
   18970:	lsl	w9, w26, #1
   18974:	add	x0, x27, x0, lsl #1
   18978:	add	x1, x0, #0x6, lsl #12
   1897c:	ldrh	w0, [x1, #1896]
   18980:	mul	w2, w2, w0
   18984:	cmp	w2, w25
   18988:	b.ls	19fdc <lzma_mode_is_supported@@XZ_5.0+0x4be4>  // b.plast
   1898c:	mov	w4, #0x800                 	// #2048
   18990:	sub	w4, w4, w0
   18994:	mov	w24, w2
   18998:	add	w0, w0, w4, lsr #5
   1899c:	and	w0, w0, #0xffff
   189a0:	add	w9, w9, #0x2
   189a4:	strh	w0, [x1, #1896]
   189a8:	b	18708 <lzma_mode_is_supported@@XZ_5.0+0x3310>
   189ac:	mov	x28, x6
   189b0:	mov	w0, #0xffffff              	// #16777215
   189b4:	cmp	w24, w0
   189b8:	b.hi	189d4 <lzma_mode_is_supported@@XZ_5.0+0x35dc>  // b.pmore
   189bc:	cmp	x19, x21
   189c0:	b.eq	1a934 <lzma_mode_is_supported@@XZ_5.0+0x553c>  // b.none
   189c4:	ldrb	w0, [x22, x19]
   189c8:	lsl	w24, w24, #8
   189cc:	add	x19, x19, #0x1
   189d0:	orr	w25, w0, w25, lsl #8
   189d4:	mov	w2, w26
   189d8:	lsr	w4, w24, #11
   189dc:	add	x2, x2, w1, uxtw #3
   189e0:	lsl	w26, w26, #1
   189e4:	add	x2, x27, x2, lsl #1
   189e8:	add	x2, x2, #0x6, lsl #12
   189ec:	ldrh	w0, [x2, #2668]
   189f0:	mul	w4, w4, w0
   189f4:	cmp	w4, w25
   189f8:	b.ls	1a0cc <lzma_mode_is_supported@@XZ_5.0+0x4cd4>  // b.plast
   189fc:	mov	w11, #0x800                 	// #2048
   18a00:	sub	w11, w11, w0
   18a04:	mov	w24, w4
   18a08:	add	w0, w0, w11, lsr #5
   18a0c:	strh	w0, [x2, #2668]
   18a10:	mov	w0, #0xffffff              	// #16777215
   18a14:	cmp	w24, w0
   18a18:	b.hi	18a34 <lzma_mode_is_supported@@XZ_5.0+0x363c>  // b.pmore
   18a1c:	cmp	x19, x21
   18a20:	b.eq	1a950 <lzma_mode_is_supported@@XZ_5.0+0x5558>  // b.none
   18a24:	ldrb	w0, [x22, x19]
   18a28:	lsl	w24, w24, #8
   18a2c:	add	x19, x19, #0x1
   18a30:	orr	w25, w0, w25, lsl #8
   18a34:	mov	w0, w26
   18a38:	lsr	w4, w24, #11
   18a3c:	add	x0, x0, w1, uxtw #3
   18a40:	lsl	w26, w26, #1
   18a44:	add	x0, x27, x0, lsl #1
   18a48:	add	x0, x0, #0x6, lsl #12
   18a4c:	ldrh	w2, [x0, #2668]
   18a50:	mul	w4, w4, w2
   18a54:	cmp	w4, w25
   18a58:	b.ls	19f88 <lzma_mode_is_supported@@XZ_5.0+0x4b90>  // b.plast
   18a5c:	mov	w11, #0x800                 	// #2048
   18a60:	sub	w11, w11, w2
   18a64:	mov	w24, w4
   18a68:	add	w2, w2, w11, lsr #5
   18a6c:	strh	w2, [x0, #2668]
   18a70:	mov	w0, #0xffffff              	// #16777215
   18a74:	cmp	w24, w0
   18a78:	b.hi	18a94 <lzma_mode_is_supported@@XZ_5.0+0x369c>  // b.pmore
   18a7c:	cmp	x19, x21
   18a80:	b.eq	1a60c <lzma_mode_is_supported@@XZ_5.0+0x5214>  // b.none
   18a84:	ldrb	w0, [x22, x19]
   18a88:	lsl	w24, w24, #8
   18a8c:	add	x19, x19, #0x1
   18a90:	orr	w25, w0, w25, lsl #8
   18a94:	mov	w0, w26
   18a98:	lsr	w2, w24, #11
   18a9c:	add	x0, x0, w1, uxtw #3
   18aa0:	lsl	w26, w26, #1
   18aa4:	add	x0, x27, x0, lsl #1
   18aa8:	add	x1, x0, #0x6, lsl #12
   18aac:	ldrh	w0, [x1, #2668]
   18ab0:	mul	w2, w2, w0
   18ab4:	cmp	w2, w25
   18ab8:	b.ls	19eac <lzma_mode_is_supported@@XZ_5.0+0x4ab4>  // b.plast
   18abc:	mov	w4, #0x800                 	// #2048
   18ac0:	sub	w4, w4, w0
   18ac4:	mov	w24, w2
   18ac8:	add	w0, w0, w4, lsr #5
   18acc:	and	w0, w0, #0xffff
   18ad0:	sub	w9, w26, #0x6
   18ad4:	strh	w0, [x1, #2668]
   18ad8:	mov	w1, w10
   18adc:	b	18584 <lzma_mode_is_supported@@XZ_5.0+0x318c>
   18ae0:	mov	w1, w15
   18ae4:	mov	x28, x6
   18ae8:	b	18208 <lzma_mode_is_supported@@XZ_5.0+0x2e10>
   18aec:	mov	x28, x6
   18af0:	mov	w0, #0xffffff              	// #16777215
   18af4:	cmp	w24, w0
   18af8:	b.hi	18b14 <lzma_mode_is_supported@@XZ_5.0+0x371c>  // b.pmore
   18afc:	cmp	x19, x21
   18b00:	b.eq	1a444 <lzma_mode_is_supported@@XZ_5.0+0x504c>  // b.none
   18b04:	ldrb	w0, [x22, x19]
   18b08:	lsl	w24, w24, #8
   18b0c:	add	x19, x19, #0x1
   18b10:	orr	w25, w0, w25, lsl #8
   18b14:	add	x1, x27, w26, uxtw #1
   18b18:	lsr	w2, w24, #11
   18b1c:	add	x1, x1, #0x6, lsl #12
   18b20:	ldrh	w0, [x1, #1604]
   18b24:	mul	w2, w2, w0
   18b28:	cmp	w2, w25
   18b2c:	b.ls	19de8 <lzma_mode_is_supported@@XZ_5.0+0x49f0>  // b.plast
   18b30:	mov	w4, #0x800                 	// #2048
   18b34:	sub	w4, w4, w0
   18b38:	mov	w24, w2
   18b3c:	add	w0, w0, w4, lsr #5
   18b40:	and	w0, w0, #0xffff
   18b44:	strh	w0, [x1, #1604]
   18b48:	cmn	w10, #0x1
   18b4c:	b.ne	18578 <lzma_mode_is_supported@@XZ_5.0+0x3180>  // b.any
   18b50:	ldr	x7, [x27, #28312]
   18b54:	mov	x11, x28
   18b58:	cmn	x7, #0x1
   18b5c:	b.eq	18b70 <lzma_mode_is_supported@@XZ_5.0+0x3778>  // b.none
   18b60:	mov	w1, #0x0                   	// #0
   18b64:	mov	w0, #0x9                   	// #9
   18b68:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   18b6c:	mov	x11, x6
   18b70:	mov	w0, #0xffffff              	// #16777215
   18b74:	cmp	w24, w0
   18b78:	b.hi	1a354 <lzma_mode_is_supported@@XZ_5.0+0x4f5c>  // b.pmore
   18b7c:	cmp	x19, x21
   18b80:	b.eq	1a7a4 <lzma_mode_is_supported@@XZ_5.0+0x53ac>  // b.none
   18b84:	ldrb	w2, [x22, x19]
   18b88:	lsl	w24, w24, #8
   18b8c:	add	x19, x19, #0x1
   18b90:	mov	w1, #0x0                   	// #0
   18b94:	mov	w0, #0x1                   	// #1
   18b98:	orr	w25, w2, w25, lsl #8
   18b9c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   18ba0:	mov	x28, x6
   18ba4:	mov	w0, #0xffffff              	// #16777215
   18ba8:	cmp	w24, w0
   18bac:	b.hi	18bc8 <lzma_mode_is_supported@@XZ_5.0+0x37d0>  // b.pmore
   18bb0:	cmp	x19, x21
   18bb4:	b.eq	1a5f0 <lzma_mode_is_supported@@XZ_5.0+0x51f8>  // b.none
   18bb8:	ldrb	w0, [x22, x19]
   18bbc:	lsl	w24, w24, #8
   18bc0:	add	x19, x19, #0x1
   18bc4:	orr	w25, w0, w25, lsl #8
   18bc8:	add	x2, x27, w26, uxtw #1
   18bcc:	lsr	w0, w24, #11
   18bd0:	add	x2, x2, #0x6, lsl #12
   18bd4:	lsl	w26, w26, #1
   18bd8:	ldrh	w1, [x2, #2152]
   18bdc:	mul	w0, w0, w1
   18be0:	cmp	w0, w25
   18be4:	b.ls	19f54 <lzma_mode_is_supported@@XZ_5.0+0x4b5c>  // b.plast
   18be8:	mov	w4, #0x800                 	// #2048
   18bec:	sub	w4, w4, w1
   18bf0:	mov	w24, w0
   18bf4:	add	w1, w1, w4, lsr #5
   18bf8:	strh	w1, [x2, #2152]
   18bfc:	mov	w0, #0xffffff              	// #16777215
   18c00:	cmp	w24, w0
   18c04:	b.hi	18c20 <lzma_mode_is_supported@@XZ_5.0+0x3828>  // b.pmore
   18c08:	cmp	x19, x21
   18c0c:	b.eq	1a5b8 <lzma_mode_is_supported@@XZ_5.0+0x51c0>  // b.none
   18c10:	ldrb	w0, [x22, x19]
   18c14:	lsl	w24, w24, #8
   18c18:	add	x19, x19, #0x1
   18c1c:	orr	w25, w0, w25, lsl #8
   18c20:	add	x2, x27, w26, uxtw #1
   18c24:	lsr	w0, w24, #11
   18c28:	add	x2, x2, #0x6, lsl #12
   18c2c:	lsl	w26, w26, #1
   18c30:	ldrh	w1, [x2, #2152]
   18c34:	mul	w0, w0, w1
   18c38:	cmp	w0, w25
   18c3c:	b.ls	19e00 <lzma_mode_is_supported@@XZ_5.0+0x4a08>  // b.plast
   18c40:	mov	w4, #0x800                 	// #2048
   18c44:	sub	w4, w4, w1
   18c48:	mov	w24, w0
   18c4c:	add	w1, w1, w4, lsr #5
   18c50:	strh	w1, [x2, #2152]
   18c54:	mov	w0, #0xffffff              	// #16777215
   18c58:	cmp	w24, w0
   18c5c:	b.hi	18c78 <lzma_mode_is_supported@@XZ_5.0+0x3880>  // b.pmore
   18c60:	cmp	x19, x21
   18c64:	b.eq	1a504 <lzma_mode_is_supported@@XZ_5.0+0x510c>  // b.none
   18c68:	ldrb	w0, [x22, x19]
   18c6c:	lsl	w24, w24, #8
   18c70:	add	x19, x19, #0x1
   18c74:	orr	w25, w0, w25, lsl #8
   18c78:	add	x2, x27, w26, uxtw #1
   18c7c:	lsr	w0, w24, #11
   18c80:	add	x2, x2, #0x6, lsl #12
   18c84:	lsl	w26, w26, #1
   18c88:	ldrh	w1, [x2, #2152]
   18c8c:	mul	w0, w0, w1
   18c90:	cmp	w0, w25
   18c94:	b.ls	19d88 <lzma_mode_is_supported@@XZ_5.0+0x4990>  // b.plast
   18c98:	mov	w4, #0x800                 	// #2048
   18c9c:	sub	w4, w4, w1
   18ca0:	mov	w24, w0
   18ca4:	add	w1, w1, w4, lsr #5
   18ca8:	strh	w1, [x2, #2152]
   18cac:	mov	w0, #0xffffff              	// #16777215
   18cb0:	cmp	w24, w0
   18cb4:	b.hi	18cd0 <lzma_mode_is_supported@@XZ_5.0+0x38d8>  // b.pmore
   18cb8:	cmp	x19, x21
   18cbc:	b.eq	1a47c <lzma_mode_is_supported@@XZ_5.0+0x5084>  // b.none
   18cc0:	ldrb	w0, [x22, x19]
   18cc4:	lsl	w24, w24, #8
   18cc8:	add	x19, x19, #0x1
   18ccc:	orr	w25, w0, w25, lsl #8
   18cd0:	add	x2, x27, w26, uxtw #1
   18cd4:	lsr	w0, w24, #11
   18cd8:	add	x2, x2, #0x6, lsl #12
   18cdc:	lsl	w26, w26, #1
   18ce0:	ldrh	w1, [x2, #2152]
   18ce4:	mul	w0, w0, w1
   18ce8:	cmp	w0, w25
   18cec:	b.ls	19d28 <lzma_mode_is_supported@@XZ_5.0+0x4930>  // b.plast
   18cf0:	mov	w4, #0x800                 	// #2048
   18cf4:	sub	w4, w4, w1
   18cf8:	mov	w24, w0
   18cfc:	add	w1, w1, w4, lsr #5
   18d00:	strh	w1, [x2, #2152]
   18d04:	mov	w0, #0xffffff              	// #16777215
   18d08:	cmp	w24, w0
   18d0c:	b.hi	18d28 <lzma_mode_is_supported@@XZ_5.0+0x3930>  // b.pmore
   18d10:	cmp	x19, x21
   18d14:	b.eq	1a59c <lzma_mode_is_supported@@XZ_5.0+0x51a4>  // b.none
   18d18:	ldrb	w0, [x22, x19]
   18d1c:	lsl	w24, w24, #8
   18d20:	add	x19, x19, #0x1
   18d24:	orr	w25, w0, w25, lsl #8
   18d28:	add	x2, x27, w26, uxtw #1
   18d2c:	lsr	w1, w24, #11
   18d30:	add	x2, x2, #0x6, lsl #12
   18d34:	lsl	w9, w26, #1
   18d38:	ldrh	w0, [x2, #2152]
   18d3c:	mul	w1, w1, w0
   18d40:	cmp	w1, w25
   18d44:	b.ls	19cf8 <lzma_mode_is_supported@@XZ_5.0+0x4900>  // b.plast
   18d48:	mov	w4, #0x800                 	// #2048
   18d4c:	sub	w4, w4, w0
   18d50:	mov	w24, w1
   18d54:	add	w0, w0, w4, lsr #5
   18d58:	and	w0, w0, #0xffff
   18d5c:	sub	w9, w9, #0xee
   18d60:	strh	w0, [x2, #2152]
   18d64:	b	18708 <lzma_mode_is_supported@@XZ_5.0+0x3310>
   18d68:	mov	x28, x6
   18d6c:	b	18bfc <lzma_mode_is_supported@@XZ_5.0+0x3804>
   18d70:	mov	x28, x6
   18d74:	mov	w0, #0xffffff              	// #16777215
   18d78:	cmp	w24, w0
   18d7c:	b.hi	18d98 <lzma_mode_is_supported@@XZ_5.0+0x39a0>  // b.pmore
   18d80:	cmp	x19, x21
   18d84:	b.eq	1aa1c <lzma_mode_is_supported@@XZ_5.0+0x5624>  // b.none
   18d88:	ldrb	w0, [x22, x19]
   18d8c:	lsl	w24, w24, #8
   18d90:	add	x19, x19, #0x1
   18d94:	orr	w25, w0, w25, lsl #8
   18d98:	add	x2, x27, w26, uxtw #1
   18d9c:	lsr	w0, w24, #11
   18da0:	add	x2, x2, #0x6, lsl #12
   18da4:	lsl	w26, w26, #1
   18da8:	ldrh	w1, [x2, #3180]
   18dac:	mul	w0, w0, w1
   18db0:	cmp	w0, w25
   18db4:	b.ls	1a0b4 <lzma_mode_is_supported@@XZ_5.0+0x4cbc>  // b.plast
   18db8:	mov	w4, #0x800                 	// #2048
   18dbc:	sub	w4, w4, w1
   18dc0:	mov	w24, w0
   18dc4:	add	w1, w1, w4, lsr #5
   18dc8:	strh	w1, [x2, #3180]
   18dcc:	mov	w0, #0xffffff              	// #16777215
   18dd0:	cmp	w24, w0
   18dd4:	b.hi	18df0 <lzma_mode_is_supported@@XZ_5.0+0x39f8>  // b.pmore
   18dd8:	cmp	x19, x21
   18ddc:	b.eq	1a8a0 <lzma_mode_is_supported@@XZ_5.0+0x54a8>  // b.none
   18de0:	ldrb	w0, [x22, x19]
   18de4:	lsl	w24, w24, #8
   18de8:	add	x19, x19, #0x1
   18dec:	orr	w25, w0, w25, lsl #8
   18df0:	add	x2, x27, w26, uxtw #1
   18df4:	lsr	w0, w24, #11
   18df8:	add	x2, x2, #0x6, lsl #12
   18dfc:	lsl	w26, w26, #1
   18e00:	ldrh	w1, [x2, #3180]
   18e04:	mul	w0, w0, w1
   18e08:	cmp	w0, w25
   18e0c:	b.ls	19ef4 <lzma_mode_is_supported@@XZ_5.0+0x4afc>  // b.plast
   18e10:	mov	w4, #0x800                 	// #2048
   18e14:	sub	w4, w4, w1
   18e18:	mov	w24, w0
   18e1c:	add	w1, w1, w4, lsr #5
   18e20:	strh	w1, [x2, #3180]
   18e24:	mov	w0, #0xffffff              	// #16777215
   18e28:	cmp	w24, w0
   18e2c:	b.hi	18e48 <lzma_mode_is_supported@@XZ_5.0+0x3a50>  // b.pmore
   18e30:	cmp	x19, x21
   18e34:	b.eq	1a750 <lzma_mode_is_supported@@XZ_5.0+0x5358>  // b.none
   18e38:	ldrb	w0, [x22, x19]
   18e3c:	lsl	w24, w24, #8
   18e40:	add	x19, x19, #0x1
   18e44:	orr	w25, w0, w25, lsl #8
   18e48:	add	x2, x27, w26, uxtw #1
   18e4c:	lsr	w0, w24, #11
   18e50:	add	x2, x2, #0x6, lsl #12
   18e54:	lsl	w26, w26, #1
   18e58:	ldrh	w1, [x2, #3180]
   18e5c:	mul	w0, w0, w1
   18e60:	cmp	w0, w25
   18e64:	b.ls	19e6c <lzma_mode_is_supported@@XZ_5.0+0x4a74>  // b.plast
   18e68:	mov	w4, #0x800                 	// #2048
   18e6c:	sub	w4, w4, w1
   18e70:	mov	w24, w0
   18e74:	add	w1, w1, w4, lsr #5
   18e78:	strh	w1, [x2, #3180]
   18e7c:	mov	w0, #0xffffff              	// #16777215
   18e80:	cmp	w24, w0
   18e84:	b.hi	18ea0 <lzma_mode_is_supported@@XZ_5.0+0x3aa8>  // b.pmore
   18e88:	cmp	x19, x21
   18e8c:	b.eq	1a580 <lzma_mode_is_supported@@XZ_5.0+0x5188>  // b.none
   18e90:	ldrb	w0, [x22, x19]
   18e94:	lsl	w24, w24, #8
   18e98:	add	x19, x19, #0x1
   18e9c:	orr	w25, w0, w25, lsl #8
   18ea0:	add	x2, x27, w26, uxtw #1
   18ea4:	lsr	w0, w24, #11
   18ea8:	add	x2, x2, #0x6, lsl #12
   18eac:	lsl	w26, w26, #1
   18eb0:	ldrh	w1, [x2, #3180]
   18eb4:	mul	w0, w0, w1
   18eb8:	cmp	w0, w25
   18ebc:	b.ls	19dd0 <lzma_mode_is_supported@@XZ_5.0+0x49d8>  // b.plast
   18ec0:	mov	w4, #0x800                 	// #2048
   18ec4:	sub	w4, w4, w1
   18ec8:	mov	w24, w0
   18ecc:	add	w1, w1, w4, lsr #5
   18ed0:	strh	w1, [x2, #3180]
   18ed4:	mov	w0, #0xffffff              	// #16777215
   18ed8:	cmp	w24, w0
   18edc:	b.hi	18ef8 <lzma_mode_is_supported@@XZ_5.0+0x3b00>  // b.pmore
   18ee0:	cmp	x19, x21
   18ee4:	b.eq	1a460 <lzma_mode_is_supported@@XZ_5.0+0x5068>  // b.none
   18ee8:	ldrb	w0, [x22, x19]
   18eec:	lsl	w24, w24, #8
   18ef0:	add	x19, x19, #0x1
   18ef4:	orr	w25, w0, w25, lsl #8
   18ef8:	add	x2, x27, w26, uxtw #1
   18efc:	lsr	w0, w24, #11
   18f00:	add	x2, x2, #0x6, lsl #12
   18f04:	lsl	w26, w26, #1
   18f08:	ldrh	w1, [x2, #3180]
   18f0c:	mul	w0, w0, w1
   18f10:	cmp	w0, w25
   18f14:	b.ls	19d70 <lzma_mode_is_supported@@XZ_5.0+0x4978>  // b.plast
   18f18:	mov	w4, #0x800                 	// #2048
   18f1c:	sub	w4, w4, w1
   18f20:	mov	w24, w0
   18f24:	add	w1, w1, w4, lsr #5
   18f28:	strh	w1, [x2, #3180]
   18f2c:	mov	w0, #0xffffff              	// #16777215
   18f30:	cmp	w24, w0
   18f34:	b.hi	18f50 <lzma_mode_is_supported@@XZ_5.0+0x3b58>  // b.pmore
   18f38:	cmp	x19, x21
   18f3c:	b.eq	1a498 <lzma_mode_is_supported@@XZ_5.0+0x50a0>  // b.none
   18f40:	ldrb	w0, [x22, x19]
   18f44:	lsl	w24, w24, #8
   18f48:	add	x19, x19, #0x1
   18f4c:	orr	w25, w0, w25, lsl #8
   18f50:	add	x2, x27, w26, uxtw #1
   18f54:	lsr	w0, w24, #11
   18f58:	add	x2, x2, #0x6, lsl #12
   18f5c:	lsl	w26, w26, #1
   18f60:	ldrh	w1, [x2, #3180]
   18f64:	mul	w0, w0, w1
   18f68:	cmp	w0, w25
   18f6c:	b.ls	19d10 <lzma_mode_is_supported@@XZ_5.0+0x4918>  // b.plast
   18f70:	mov	w4, #0x800                 	// #2048
   18f74:	sub	w4, w4, w1
   18f78:	mov	w24, w0
   18f7c:	add	w1, w1, w4, lsr #5
   18f80:	strh	w1, [x2, #3180]
   18f84:	mov	w0, #0xffffff              	// #16777215
   18f88:	cmp	w24, w0
   18f8c:	b.hi	18fa8 <lzma_mode_is_supported@@XZ_5.0+0x3bb0>  // b.pmore
   18f90:	cmp	x19, x21
   18f94:	b.eq	1a5d4 <lzma_mode_is_supported@@XZ_5.0+0x51dc>  // b.none
   18f98:	ldrb	w0, [x22, x19]
   18f9c:	lsl	w24, w24, #8
   18fa0:	add	x19, x19, #0x1
   18fa4:	orr	w25, w0, w25, lsl #8
   18fa8:	add	x2, x27, w26, uxtw #1
   18fac:	lsr	w1, w24, #11
   18fb0:	add	x2, x2, #0x6, lsl #12
   18fb4:	lsl	w26, w26, #1
   18fb8:	ldrh	w0, [x2, #3180]
   18fbc:	mul	w1, w1, w0
   18fc0:	cmp	w1, w25
   18fc4:	b.ls	19cd8 <lzma_mode_is_supported@@XZ_5.0+0x48e0>  // b.plast
   18fc8:	mov	w4, #0x800                 	// #2048
   18fcc:	sub	w4, w4, w0
   18fd0:	mov	w24, w1
   18fd4:	add	w0, w0, w4, lsr #5
   18fd8:	and	w0, w0, #0xffff
   18fdc:	sub	w9, w26, #0xee
   18fe0:	mov	w1, w10
   18fe4:	strh	w0, [x2, #3180]
   18fe8:	b	18584 <lzma_mode_is_supported@@XZ_5.0+0x318c>
   18fec:	mov	x28, x6
   18ff0:	b	18dcc <lzma_mode_is_supported@@XZ_5.0+0x39d4>
   18ff4:	mov	x28, x6
   18ff8:	b	18e24 <lzma_mode_is_supported@@XZ_5.0+0x3a2c>
   18ffc:	mov	x28, x6
   19000:	b	18e7c <lzma_mode_is_supported@@XZ_5.0+0x3a84>
   19004:	mov	x28, x6
   19008:	b	18ed4 <lzma_mode_is_supported@@XZ_5.0+0x3adc>
   1900c:	mov	x28, x6
   19010:	b	18f2c <lzma_mode_is_supported@@XZ_5.0+0x3b34>
   19014:	mov	x28, x6
   19018:	b	18f84 <lzma_mode_is_supported@@XZ_5.0+0x3b8c>
   1901c:	mov	w1, w10
   19020:	mov	x28, x6
   19024:	b	18584 <lzma_mode_is_supported@@XZ_5.0+0x318c>
   19028:	mov	x28, x6
   1902c:	mov	w0, #0xffffff              	// #16777215
   19030:	cmp	w24, w0
   19034:	b.hi	19050 <lzma_mode_is_supported@@XZ_5.0+0x3c58>  // b.pmore
   19038:	cmp	x19, x21
   1903c:	b.eq	1a660 <lzma_mode_is_supported@@XZ_5.0+0x5268>  // b.none
   19040:	ldrb	w0, [x22, x19]
   19044:	lsl	w24, w24, #8
   19048:	add	x19, x19, #0x1
   1904c:	orr	w25, w0, w25, lsl #8
   19050:	mov	w2, w26
   19054:	lsr	w4, w24, #11
   19058:	add	x2, x2, w1, uxtw #3
   1905c:	lsl	w26, w26, #1
   19060:	add	x2, x27, x2, lsl #1
   19064:	add	x2, x2, #0x6, lsl #12
   19068:	ldrh	w0, [x2, #2924]
   1906c:	mul	w4, w4, w0
   19070:	cmp	w4, w25
   19074:	b.ls	1a1a0 <lzma_mode_is_supported@@XZ_5.0+0x4da8>  // b.plast
   19078:	mov	w11, #0x800                 	// #2048
   1907c:	sub	w11, w11, w0
   19080:	mov	w24, w4
   19084:	add	w0, w0, w11, lsr #5
   19088:	strh	w0, [x2, #2924]
   1908c:	mov	w0, #0xffffff              	// #16777215
   19090:	cmp	w24, w0
   19094:	b.hi	190b0 <lzma_mode_is_supported@@XZ_5.0+0x3cb8>  // b.pmore
   19098:	cmp	x19, x21
   1909c:	b.eq	1a6b4 <lzma_mode_is_supported@@XZ_5.0+0x52bc>  // b.none
   190a0:	ldrb	w0, [x22, x19]
   190a4:	lsl	w24, w24, #8
   190a8:	add	x19, x19, #0x1
   190ac:	orr	w25, w0, w25, lsl #8
   190b0:	mov	w2, w26
   190b4:	lsr	w4, w24, #11
   190b8:	add	x2, x2, w1, uxtw #3
   190bc:	lsl	w26, w26, #1
   190c0:	add	x2, x27, x2, lsl #1
   190c4:	add	x2, x2, #0x6, lsl #12
   190c8:	ldrh	w0, [x2, #2924]
   190cc:	mul	w4, w4, w0
   190d0:	cmp	w4, w25
   190d4:	b.ls	1a084 <lzma_mode_is_supported@@XZ_5.0+0x4c8c>  // b.plast
   190d8:	mov	w11, #0x800                 	// #2048
   190dc:	sub	w11, w11, w0
   190e0:	mov	w24, w4
   190e4:	add	w0, w0, w11, lsr #5
   190e8:	strh	w0, [x2, #2924]
   190ec:	mov	w0, #0xffffff              	// #16777215
   190f0:	cmp	w24, w0
   190f4:	b.hi	19110 <lzma_mode_is_supported@@XZ_5.0+0x3d18>  // b.pmore
   190f8:	cmp	x19, x21
   190fc:	b.eq	1a868 <lzma_mode_is_supported@@XZ_5.0+0x5470>  // b.none
   19100:	ldrb	w0, [x22, x19]
   19104:	lsl	w24, w24, #8
   19108:	add	x19, x19, #0x1
   1910c:	orr	w25, w0, w25, lsl #8
   19110:	mov	w0, w26
   19114:	lsr	w2, w24, #11
   19118:	add	x0, x0, w1, uxtw #3
   1911c:	lsl	w26, w26, #1
   19120:	add	x0, x27, x0, lsl #1
   19124:	add	x1, x0, #0x6, lsl #12
   19128:	ldrh	w0, [x1, #2924]
   1912c:	mul	w2, w2, w0
   19130:	cmp	w2, w25
   19134:	b.ls	19f3c <lzma_mode_is_supported@@XZ_5.0+0x4b44>  // b.plast
   19138:	mov	w4, #0x800                 	// #2048
   1913c:	sub	w4, w4, w0
   19140:	mov	w24, w2
   19144:	add	w0, w0, w4, lsr #5
   19148:	and	w0, w0, #0xffff
   1914c:	add	w9, w26, #0x2
   19150:	strh	w0, [x1, #2924]
   19154:	mov	w1, w10
   19158:	b	18584 <lzma_mode_is_supported@@XZ_5.0+0x318c>
   1915c:	mov	x28, x6
   19160:	b	190ec <lzma_mode_is_supported@@XZ_5.0+0x3cf4>
   19164:	mov	x28, x6
   19168:	b	1908c <lzma_mode_is_supported@@XZ_5.0+0x3c94>
   1916c:	mov	x28, x6
   19170:	mov	w0, #0xffffff              	// #16777215
   19174:	cmp	w24, w0
   19178:	b.hi	19194 <lzma_mode_is_supported@@XZ_5.0+0x3d9c>  // b.pmore
   1917c:	cmp	x19, x21
   19180:	b.eq	1a644 <lzma_mode_is_supported@@XZ_5.0+0x524c>  // b.none
   19184:	ldrb	w0, [x22, x19]
   19188:	lsl	w24, w24, #8
   1918c:	add	x19, x19, #0x1
   19190:	orr	w25, w0, w25, lsl #8
   19194:	add	x2, x27, w26, uxtw #1
   19198:	lsr	w0, w24, #11
   1919c:	add	x2, x2, #0x6, lsl #12
   191a0:	lsl	w26, w26, #1
   191a4:	ldrh	w1, [x2, #3180]
   191a8:	mul	w0, w0, w1
   191ac:	cmp	w0, w25
   191b0:	b.ls	1a188 <lzma_mode_is_supported@@XZ_5.0+0x4d90>  // b.plast
   191b4:	mov	w4, #0x800                 	// #2048
   191b8:	sub	w4, w4, w1
   191bc:	mov	w24, w0
   191c0:	add	w1, w1, w4, lsr #5
   191c4:	strh	w1, [x2, #3180]
   191c8:	b	18d74 <lzma_mode_is_supported@@XZ_5.0+0x397c>
   191cc:	mov	x28, x6
   191d0:	b	18a70 <lzma_mode_is_supported@@XZ_5.0+0x3678>
   191d4:	mov	x28, x6
   191d8:	b	18128 <lzma_mode_is_supported@@XZ_5.0+0x2d30>
   191dc:	mov	x28, x6
   191e0:	b	18198 <lzma_mode_is_supported@@XZ_5.0+0x2da0>
   191e4:	mov	x28, x6
   191e8:	b	180b8 <lzma_mode_is_supported@@XZ_5.0+0x2cc0>
   191ec:	mov	x28, x6
   191f0:	mov	w0, #0xffffff              	// #16777215
   191f4:	cmp	w24, w0
   191f8:	b.hi	19214 <lzma_mode_is_supported@@XZ_5.0+0x3e1c>  // b.pmore
   191fc:	cmp	x19, x21
   19200:	b.eq	1ab5c <lzma_mode_is_supported@@XZ_5.0+0x5764>  // b.none
   19204:	ldrb	w0, [x22, x19]
   19208:	lsl	w24, w24, #8
   1920c:	add	x19, x19, #0x1
   19210:	orr	w25, w0, w25, lsl #8
   19214:	ldr	w16, [sp, #96]
   19218:	lsr	w2, w24, #11
   1921c:	add	x4, x27, w16, uxtw #1
   19220:	add	x4, x4, #0x6, lsl #12
   19224:	ldrh	w0, [x4, #384]
   19228:	mul	w2, w2, w0
   1922c:	cmp	w2, w25
   19230:	b.ls	1a010 <lzma_mode_is_supported@@XZ_5.0+0x4c18>  // b.plast
   19234:	mov	w11, #0x800                 	// #2048
   19238:	sub	w11, w11, w0
   1923c:	cmp	w16, #0x6
   19240:	mov	w24, w2
   19244:	add	w0, w0, w11, lsr #5
   19248:	strh	w0, [x4, #384]
   1924c:	ldr	w0, [sp, #116]
   19250:	str	w0, [sp, #120]
   19254:	ldr	w0, [sp, #112]
   19258:	str	w0, [sp, #116]
   1925c:	b.ls	1a4f0 <lzma_mode_is_supported@@XZ_5.0+0x50f8>  // b.plast
   19260:	mov	w0, #0xa                   	// #10
   19264:	mov	w26, #0x1                   	// #1
   19268:	str	w0, [sp, #96]
   1926c:	str	w10, [sp, #112]
   19270:	mov	w0, #0xffffff              	// #16777215
   19274:	cmp	w24, w0
   19278:	b.hi	19294 <lzma_mode_is_supported@@XZ_5.0+0x3e9c>  // b.pmore
   1927c:	cmp	x19, x21
   19280:	b.eq	1ab78 <lzma_mode_is_supported@@XZ_5.0+0x5780>  // b.none
   19284:	ldrb	w0, [x22, x19]
   19288:	lsl	w24, w24, #8
   1928c:	add	x19, x19, #0x1
   19290:	orr	w25, w0, w25, lsl #8
   19294:	add	x4, x27, #0x6, lsl #12
   19298:	lsr	w2, w24, #11
   1929c:	ldrh	w0, [x4, #1636]
   192a0:	mul	w2, w2, w0
   192a4:	cmp	w2, w25
   192a8:	b.ls	1a2ec <lzma_mode_is_supported@@XZ_5.0+0x4ef4>  // b.plast
   192ac:	mov	w11, #0x800                 	// #2048
   192b0:	sub	w11, w11, w0
   192b4:	mov	w24, w2
   192b8:	add	w0, w0, w11, lsr #5
   192bc:	strh	w0, [x4, #1636]
   192c0:	mov	w0, #0xffffff              	// #16777215
   192c4:	cmp	w24, w0
   192c8:	b.hi	192e4 <lzma_mode_is_supported@@XZ_5.0+0x3eec>  // b.pmore
   192cc:	cmp	x19, x21
   192d0:	b.eq	1a9a4 <lzma_mode_is_supported@@XZ_5.0+0x55ac>  // b.none
   192d4:	ldrb	w0, [x22, x19]
   192d8:	lsl	w24, w24, #8
   192dc:	add	x19, x19, #0x1
   192e0:	orr	w25, w0, w25, lsl #8
   192e4:	mov	w2, w26
   192e8:	lsr	w4, w24, #11
   192ec:	add	x2, x2, w1, uxtw #3
   192f0:	lsl	w26, w26, #1
   192f4:	add	x2, x27, x2, lsl #1
   192f8:	add	x2, x2, #0x6, lsl #12
   192fc:	ldrh	w0, [x2, #1640]
   19300:	mul	w4, w4, w0
   19304:	cmp	w4, w25
   19308:	b.ls	1a300 <lzma_mode_is_supported@@XZ_5.0+0x4f08>  // b.plast
   1930c:	mov	w11, #0x800                 	// #2048
   19310:	sub	w11, w11, w0
   19314:	mov	w24, w4
   19318:	add	w0, w0, w11, lsr #5
   1931c:	strh	w0, [x2, #1640]
   19320:	mov	w0, #0xffffff              	// #16777215
   19324:	cmp	w24, w0
   19328:	b.hi	19344 <lzma_mode_is_supported@@XZ_5.0+0x3f4c>  // b.pmore
   1932c:	cmp	x19, x21
   19330:	b.eq	1a7d4 <lzma_mode_is_supported@@XZ_5.0+0x53dc>  // b.none
   19334:	ldrb	w0, [x22, x19]
   19338:	lsl	w24, w24, #8
   1933c:	add	x19, x19, #0x1
   19340:	orr	w25, w0, w25, lsl #8
   19344:	mov	w2, w26
   19348:	lsr	w4, w24, #11
   1934c:	add	x2, x2, w1, uxtw #3
   19350:	lsl	w26, w26, #1
   19354:	add	x2, x27, x2, lsl #1
   19358:	add	x2, x2, #0x6, lsl #12
   1935c:	ldrh	w0, [x2, #1640]
   19360:	mul	w4, w4, w0
   19364:	cmp	w4, w25
   19368:	b.ls	1a14c <lzma_mode_is_supported@@XZ_5.0+0x4d54>  // b.plast
   1936c:	mov	w11, #0x800                 	// #2048
   19370:	sub	w11, w11, w0
   19374:	mov	w24, w4
   19378:	add	w0, w0, w11, lsr #5
   1937c:	strh	w0, [x2, #1640]
   19380:	b	186a0 <lzma_mode_is_supported@@XZ_5.0+0x32a8>
   19384:	mov	x28, x6
   19388:	b	192c0 <lzma_mode_is_supported@@XZ_5.0+0x3ec8>
   1938c:	mov	x28, x6
   19390:	b	19270 <lzma_mode_is_supported@@XZ_5.0+0x3e78>
   19394:	mov	x28, x6
   19398:	b	19320 <lzma_mode_is_supported@@XZ_5.0+0x3f28>
   1939c:	mov	w1, w15
   193a0:	mov	x28, x6
   193a4:	b	182e8 <lzma_mode_is_supported@@XZ_5.0+0x2ef0>
   193a8:	mov	x28, x6
   193ac:	b	17f70 <lzma_mode_is_supported@@XZ_5.0+0x2b78>
   193b0:	mov	x28, x6
   193b4:	b	18278 <lzma_mode_is_supported@@XZ_5.0+0x2e80>
   193b8:	mov	x28, x6
   193bc:	b	18940 <lzma_mode_is_supported@@XZ_5.0+0x3548>
   193c0:	mov	x28, x6
   193c4:	mov	w0, #0xffffff              	// #16777215
   193c8:	cmp	w24, w0
   193cc:	b.hi	193e8 <lzma_mode_is_supported@@XZ_5.0+0x3ff0>  // b.pmore
   193d0:	cmp	x19, x21
   193d4:	b.eq	1aa54 <lzma_mode_is_supported@@XZ_5.0+0x565c>  // b.none
   193d8:	ldrb	w0, [x22, x19]
   193dc:	lsl	w24, w24, #8
   193e0:	add	x19, x19, #0x1
   193e4:	orr	w25, w0, w25, lsl #8
   193e8:	add	x2, x27, w26, uxtw #1
   193ec:	lsr	w0, w24, #11
   193f0:	add	x2, x2, #0x6, lsl #12
   193f4:	lsl	w26, w26, #1
   193f8:	ldrh	w1, [x2, #2152]
   193fc:	mul	w0, w0, w1
   19400:	cmp	w0, w25
   19404:	b.ls	1a210 <lzma_mode_is_supported@@XZ_5.0+0x4e18>  // b.plast
   19408:	mov	w4, #0x800                 	// #2048
   1940c:	sub	w4, w4, w1
   19410:	mov	w24, w0
   19414:	add	w1, w1, w4, lsr #5
   19418:	strh	w1, [x2, #2152]
   1941c:	mov	w0, #0xffffff              	// #16777215
   19420:	cmp	w24, w0
   19424:	b.hi	19440 <lzma_mode_is_supported@@XZ_5.0+0x4048>  // b.pmore
   19428:	cmp	x19, x21
   1942c:	b.eq	1aa70 <lzma_mode_is_supported@@XZ_5.0+0x5678>  // b.none
   19430:	ldrb	w0, [x22, x19]
   19434:	lsl	w24, w24, #8
   19438:	add	x19, x19, #0x1
   1943c:	orr	w25, w0, w25, lsl #8
   19440:	add	x2, x27, w26, uxtw #1
   19444:	lsr	w0, w24, #11
   19448:	add	x2, x2, #0x6, lsl #12
   1944c:	lsl	w26, w26, #1
   19450:	ldrh	w1, [x2, #2152]
   19454:	mul	w0, w0, w1
   19458:	cmp	w0, w25
   1945c:	b.ls	1a11c <lzma_mode_is_supported@@XZ_5.0+0x4d24>  // b.plast
   19460:	mov	w4, #0x800                 	// #2048
   19464:	sub	w4, w4, w1
   19468:	mov	w24, w0
   1946c:	add	w1, w1, w4, lsr #5
   19470:	strh	w1, [x2, #2152]
   19474:	mov	w0, #0xffffff              	// #16777215
   19478:	cmp	w24, w0
   1947c:	b.hi	19498 <lzma_mode_is_supported@@XZ_5.0+0x40a0>  // b.pmore
   19480:	cmp	x19, x21
   19484:	b.eq	1aa8c <lzma_mode_is_supported@@XZ_5.0+0x5694>  // b.none
   19488:	ldrb	w0, [x22, x19]
   1948c:	lsl	w24, w24, #8
   19490:	add	x19, x19, #0x1
   19494:	orr	w25, w0, w25, lsl #8
   19498:	add	x2, x27, w26, uxtw #1
   1949c:	lsr	w0, w24, #11
   194a0:	add	x2, x2, #0x6, lsl #12
   194a4:	lsl	w26, w26, #1
   194a8:	ldrh	w1, [x2, #2152]
   194ac:	mul	w0, w0, w1
   194b0:	cmp	w0, w25
   194b4:	b.ls	19fc4 <lzma_mode_is_supported@@XZ_5.0+0x4bcc>  // b.plast
   194b8:	mov	w4, #0x800                 	// #2048
   194bc:	sub	w4, w4, w1
   194c0:	mov	w24, w0
   194c4:	add	w1, w1, w4, lsr #5
   194c8:	strh	w1, [x2, #2152]
   194cc:	b	18ba4 <lzma_mode_is_supported@@XZ_5.0+0x37ac>
   194d0:	mov	x28, x6
   194d4:	b	1941c <lzma_mode_is_supported@@XZ_5.0+0x4024>
   194d8:	mov	w0, w10
   194dc:	mov	x28, x6
   194e0:	mov	w10, w26
   194e4:	mov	w1, w25
   194e8:	mov	w2, #0xffffff              	// #16777215
   194ec:	nop
   194f0:	cmp	w24, w2
   194f4:	b.hi	19510 <lzma_mode_is_supported@@XZ_5.0+0x4118>  // b.pmore
   194f8:	cmp	x19, x21
   194fc:	b.eq	19e84 <lzma_mode_is_supported@@XZ_5.0+0x4a8c>  // b.none
   19500:	ldrb	w4, [x22, x19]
   19504:	lsl	w24, w24, #8
   19508:	add	x19, x19, #0x1
   1950c:	orr	w1, w4, w1, lsl #8
   19510:	lsr	w24, w24, #1
   19514:	subs	w12, w12, #0x1
   19518:	sub	w1, w1, w24
   1951c:	asr	w4, w1, #31
   19520:	add	w0, w4, w0, lsl #1
   19524:	and	w4, w24, w4
   19528:	add	w0, w0, #0x1
   1952c:	add	w1, w4, w1
   19530:	b.ne	194f0 <lzma_mode_is_supported@@XZ_5.0+0x40f8>  // b.any
   19534:	mov	w25, w1
   19538:	lsl	w10, w0, #4
   1953c:	mov	w26, #0x1                   	// #1
   19540:	mov	w0, #0xffffff              	// #16777215
   19544:	cmp	w24, w0
   19548:	b.hi	19564 <lzma_mode_is_supported@@XZ_5.0+0x416c>  // b.pmore
   1954c:	cmp	x19, x21
   19550:	b.eq	1a8d8 <lzma_mode_is_supported@@XZ_5.0+0x54e0>  // b.none
   19554:	ldrb	w0, [x22, x19]
   19558:	lsl	w24, w24, #8
   1955c:	add	x19, x19, #0x1
   19560:	orr	w25, w0, w25, lsl #8
   19564:	add	x2, x27, w26, uxtw #1
   19568:	lsr	w0, w24, #11
   1956c:	add	x2, x2, #0x6, lsl #12
   19570:	lsl	w26, w26, #1
   19574:	ldrh	w1, [x2, #1604]
   19578:	mul	w0, w0, w1
   1957c:	cmp	w0, w25
   19580:	b.ls	19ff4 <lzma_mode_is_supported@@XZ_5.0+0x4bfc>  // b.plast
   19584:	mov	w4, #0x800                 	// #2048
   19588:	sub	w4, w4, w1
   1958c:	mov	w24, w0
   19590:	add	w1, w1, w4, lsr #5
   19594:	strh	w1, [x2, #1604]
   19598:	mov	w0, #0xffffff              	// #16777215
   1959c:	cmp	w24, w0
   195a0:	b.hi	195bc <lzma_mode_is_supported@@XZ_5.0+0x41c4>  // b.pmore
   195a4:	cmp	x19, x21
   195a8:	b.eq	1a988 <lzma_mode_is_supported@@XZ_5.0+0x5590>  // b.none
   195ac:	ldrb	w0, [x22, x19]
   195b0:	lsl	w24, w24, #8
   195b4:	add	x19, x19, #0x1
   195b8:	orr	w25, w0, w25, lsl #8
   195bc:	add	x2, x27, w26, uxtw #1
   195c0:	lsr	w0, w24, #11
   195c4:	add	x2, x2, #0x6, lsl #12
   195c8:	lsl	w26, w26, #1
   195cc:	ldrh	w1, [x2, #1604]
   195d0:	mul	w0, w0, w1
   195d4:	cmp	w0, w25
   195d8:	b.ls	19f20 <lzma_mode_is_supported@@XZ_5.0+0x4b28>  // b.plast
   195dc:	mov	w4, #0x800                 	// #2048
   195e0:	sub	w4, w4, w1
   195e4:	mov	w24, w0
   195e8:	add	w1, w1, w4, lsr #5
   195ec:	strh	w1, [x2, #1604]
   195f0:	mov	w0, #0xffffff              	// #16777215
   195f4:	cmp	w24, w0
   195f8:	b.hi	19614 <lzma_mode_is_supported@@XZ_5.0+0x421c>  // b.pmore
   195fc:	cmp	x19, x21
   19600:	b.eq	1a84c <lzma_mode_is_supported@@XZ_5.0+0x5454>  // b.none
   19604:	ldrb	w0, [x22, x19]
   19608:	lsl	w24, w24, #8
   1960c:	add	x19, x19, #0x1
   19610:	orr	w25, w0, w25, lsl #8
   19614:	add	x2, x27, w26, uxtw #1
   19618:	lsr	w0, w24, #11
   1961c:	add	x2, x2, #0x6, lsl #12
   19620:	lsl	w26, w26, #1
   19624:	ldrh	w1, [x2, #1604]
   19628:	mul	w0, w0, w1
   1962c:	cmp	w0, w25
   19630:	b.ls	19e48 <lzma_mode_is_supported@@XZ_5.0+0x4a50>  // b.plast
   19634:	mov	w4, #0x800                 	// #2048
   19638:	sub	w4, w4, w1
   1963c:	mov	w24, w0
   19640:	add	w1, w1, w4, lsr #5
   19644:	strh	w1, [x2, #1604]
   19648:	b	18af0 <lzma_mode_is_supported@@XZ_5.0+0x36f8>
   1964c:	mov	x28, x6
   19650:	b	19540 <lzma_mode_is_supported@@XZ_5.0+0x4148>
   19654:	mov	x28, x6
   19658:	b	18d04 <lzma_mode_is_supported@@XZ_5.0+0x390c>
   1965c:	mov	x28, x6
   19660:	b	1872c <lzma_mode_is_supported@@XZ_5.0+0x3334>
   19664:	mov	x28, x6
   19668:	b	18780 <lzma_mode_is_supported@@XZ_5.0+0x3388>
   1966c:	mov	x28, x6
   19670:	b	187d4 <lzma_mode_is_supported@@XZ_5.0+0x33dc>
   19674:	mov	x28, x6
   19678:	b	18c54 <lzma_mode_is_supported@@XZ_5.0+0x385c>
   1967c:	mov	x28, x6
   19680:	b	18cac <lzma_mode_is_supported@@XZ_5.0+0x38b4>
   19684:	mov	x28, x6
   19688:	b	18880 <lzma_mode_is_supported@@XZ_5.0+0x3488>
   1968c:	mov	x28, x6
   19690:	b	188e0 <lzma_mode_is_supported@@XZ_5.0+0x34e8>
   19694:	mov	x28, x6
   19698:	b	19474 <lzma_mode_is_supported@@XZ_5.0+0x407c>
   1969c:	mov	x28, x6
   196a0:	b	18a10 <lzma_mode_is_supported@@XZ_5.0+0x3618>
   196a4:	mov	x28, x6
   196a8:	mov	w0, #0xffffff              	// #16777215
   196ac:	cmp	w24, w0
   196b0:	b.hi	196cc <lzma_mode_is_supported@@XZ_5.0+0x42d4>  // b.pmore
   196b4:	cmp	x19, x21
   196b8:	b.eq	1a7b8 <lzma_mode_is_supported@@XZ_5.0+0x53c0>  // b.none
   196bc:	ldrb	w0, [x22, x19]
   196c0:	lsl	w24, w24, #8
   196c4:	add	x19, x19, #0x1
   196c8:	orr	w25, w0, w25, lsl #8
   196cc:	add	x4, x27, #0x6, lsl #12
   196d0:	lsr	w2, w24, #11
   196d4:	ldrh	w0, [x4, #2666]
   196d8:	mul	w2, w2, w0
   196dc:	cmp	w2, w25
   196e0:	b.ls	1a070 <lzma_mode_is_supported@@XZ_5.0+0x4c78>  // b.plast
   196e4:	mov	w11, #0x800                 	// #2048
   196e8:	sub	w11, w11, w0
   196ec:	mov	w24, w2
   196f0:	add	w0, w0, w11, lsr #5
   196f4:	strh	w0, [x4, #2666]
   196f8:	b	1902c <lzma_mode_is_supported@@XZ_5.0+0x3c34>
   196fc:	mov	x28, x6
   19700:	mov	w0, #0xffffff              	// #16777215
   19704:	cmp	w24, w0
   19708:	b.hi	19724 <lzma_mode_is_supported@@XZ_5.0+0x432c>  // b.pmore
   1970c:	cmp	x19, x21
   19710:	b.eq	1a76c <lzma_mode_is_supported@@XZ_5.0+0x5374>  // b.none
   19714:	ldrb	w0, [x22, x19]
   19718:	lsl	w24, w24, #8
   1971c:	add	x19, x19, #0x1
   19720:	orr	w25, w0, w25, lsl #8
   19724:	ldr	w11, [sp, #96]
   19728:	mov	w0, w1
   1972c:	lsr	w2, w24, #11
   19730:	add	x0, x0, w11, uxtw #4
   19734:	add	x0, x27, x0, lsl #1
   19738:	add	x4, x0, #0x6, lsl #12
   1973c:	ldrh	w0, [x4, #480]
   19740:	mul	w2, w2, w0
   19744:	cmp	w2, w25
   19748:	b.ls	1a270 <lzma_mode_is_supported@@XZ_5.0+0x4e78>  // b.plast
   1974c:	mov	w1, #0x800                 	// #2048
   19750:	sub	w1, w1, w0
   19754:	mov	w24, w2
   19758:	cmp	w11, #0x6
   1975c:	add	w0, w0, w1, lsr #5
   19760:	strh	w0, [x4, #480]
   19764:	b.ls	1a520 <lzma_mode_is_supported@@XZ_5.0+0x5128>  // b.plast
   19768:	mov	w0, #0xb                   	// #11
   1976c:	str	w0, [sp, #96]
   19770:	ldr	x2, [sp, #104]
   19774:	mov	w1, w10
   19778:	cmp	x28, x1
   1977c:	sub	x0, x28, #0x1
   19780:	csel	x2, x2, xzr, ls  // ls = plast
   19784:	add	x0, x8, x0
   19788:	sub	x1, x2, x1
   1978c:	cmp	x13, x28
   19790:	ldrb	w0, [x0, x1]
   19794:	b.ne	17f7c <lzma_mode_is_supported@@XZ_5.0+0x2b84>  // b.any
   19798:	mov	w2, #0x32                  	// #50
   1979c:	mov	x11, x13
   197a0:	mov	w1, #0x1                   	// #1
   197a4:	mov	w0, #0x0                   	// #0
   197a8:	ldr	x7, [x27, #28312]
   197ac:	str	w2, [x20, #11936]
   197b0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   197b4:	mov	x28, x6
   197b8:	b	18404 <lzma_mode_is_supported@@XZ_5.0+0x300c>
   197bc:	mov	w0, w10
   197c0:	mov	x28, x6
   197c4:	b	184a4 <lzma_mode_is_supported@@XZ_5.0+0x30ac>
   197c8:	mov	x28, x6
   197cc:	mov	w0, #0xffffff              	// #16777215
   197d0:	cmp	w24, w0
   197d4:	b.hi	197f0 <lzma_mode_is_supported@@XZ_5.0+0x43f8>  // b.pmore
   197d8:	cmp	x19, x21
   197dc:	b.eq	1ab04 <lzma_mode_is_supported@@XZ_5.0+0x570c>  // b.none
   197e0:	ldrb	w0, [x22, x19]
   197e4:	lsl	w24, w24, #8
   197e8:	add	x19, x19, #0x1
   197ec:	orr	w25, w0, w25, lsl #8
   197f0:	ldr	x0, [sp, #96]
   197f4:	lsr	w2, w24, #11
   197f8:	add	x4, x27, w0, uxtw #1
   197fc:	add	x4, x4, #0x6, lsl #12
   19800:	ldrh	w0, [x4, #408]
   19804:	mul	w2, w2, w0
   19808:	cmp	w2, w25
   1980c:	b.ls	1a2d8 <lzma_mode_is_supported@@XZ_5.0+0x4ee0>  // b.plast
   19810:	mov	w11, #0x800                 	// #2048
   19814:	sub	w11, w11, w0
   19818:	mov	w24, w2
   1981c:	add	w0, w0, w11, lsr #5
   19820:	strh	w0, [x4, #408]
   19824:	b	19700 <lzma_mode_is_supported@@XZ_5.0+0x4308>
   19828:	mov	x28, x6
   1982c:	b	19770 <lzma_mode_is_supported@@XZ_5.0+0x4378>
   19830:	mov	x28, x6
   19834:	mov	w0, #0xffffff              	// #16777215
   19838:	cmp	w24, w0
   1983c:	b.hi	19858 <lzma_mode_is_supported@@XZ_5.0+0x4460>  // b.pmore
   19840:	cmp	x19, x21
   19844:	b.eq	1a788 <lzma_mode_is_supported@@XZ_5.0+0x5390>  // b.none
   19848:	ldrb	w0, [x22, x19]
   1984c:	lsl	w24, w24, #8
   19850:	add	x19, x19, #0x1
   19854:	orr	w25, w0, w25, lsl #8
   19858:	ldr	x0, [sp, #96]
   1985c:	lsr	w2, w24, #11
   19860:	add	x4, x27, w0, uxtw #1
   19864:	add	x4, x4, #0x6, lsl #12
   19868:	ldrh	w0, [x4, #456]
   1986c:	mul	w2, w2, w0
   19870:	cmp	w2, w25
   19874:	b.ls	1a318 <lzma_mode_is_supported@@XZ_5.0+0x4f20>  // b.plast
   19878:	mov	w16, #0x800                 	// #2048
   1987c:	sub	w16, w16, w0
   19880:	mov	w11, w10
   19884:	mov	w24, w2
   19888:	ldp	w2, w10, [sp, #112]
   1988c:	add	w0, w0, w16, lsr #5
   19890:	stp	w11, w2, [sp, #112]
   19894:	strh	w0, [x4, #456]
   19898:	ldr	w0, [sp, #96]
   1989c:	mov	w26, #0x1                   	// #1
   198a0:	cmp	w0, #0x6
   198a4:	b.ls	19fb8 <lzma_mode_is_supported@@XZ_5.0+0x4bc0>  // b.plast
   198a8:	mov	w0, #0xb                   	// #11
   198ac:	str	w0, [sp, #96]
   198b0:	mov	w0, #0xffffff              	// #16777215
   198b4:	cmp	w24, w0
   198b8:	b.hi	198d4 <lzma_mode_is_supported@@XZ_5.0+0x44dc>  // b.pmore
   198bc:	cmp	x19, x21
   198c0:	b.eq	1a8f4 <lzma_mode_is_supported@@XZ_5.0+0x54fc>  // b.none
   198c4:	ldrb	w0, [x22, x19]
   198c8:	lsl	w24, w24, #8
   198cc:	add	x19, x19, #0x1
   198d0:	orr	w25, w0, w25, lsl #8
   198d4:	add	x4, x27, #0x6, lsl #12
   198d8:	lsr	w0, w24, #11
   198dc:	ldrh	w2, [x4, #2664]
   198e0:	mul	w0, w0, w2
   198e4:	cmp	w0, w25
   198e8:	b.ls	19f0c <lzma_mode_is_supported@@XZ_5.0+0x4b14>  // b.plast
   198ec:	mov	w11, #0x800                 	// #2048
   198f0:	sub	w11, w11, w2
   198f4:	mov	w24, w0
   198f8:	add	w2, w2, w11, lsr #5
   198fc:	strh	w2, [x4, #2664]
   19900:	b	189b0 <lzma_mode_is_supported@@XZ_5.0+0x35b8>
   19904:	mov	x28, x6
   19908:	mov	w0, #0xffffff              	// #16777215
   1990c:	cmp	w24, w0
   19910:	b.hi	1992c <lzma_mode_is_supported@@XZ_5.0+0x4534>  // b.pmore
   19914:	cmp	x19, x21
   19918:	b.eq	1a96c <lzma_mode_is_supported@@XZ_5.0+0x5574>  // b.none
   1991c:	ldrb	w0, [x22, x19]
   19920:	lsl	w24, w24, #8
   19924:	add	x19, x19, #0x1
   19928:	orr	w25, w0, w25, lsl #8
   1992c:	ldr	x0, [sp, #96]
   19930:	lsr	w2, w24, #11
   19934:	add	x4, x27, w0, uxtw #1
   19938:	add	x4, x4, #0x6, lsl #12
   1993c:	ldrh	w0, [x4, #432]
   19940:	mul	w2, w2, w0
   19944:	cmp	w2, w25
   19948:	b.ls	1a340 <lzma_mode_is_supported@@XZ_5.0+0x4f48>  // b.plast
   1994c:	mov	w16, #0x800                 	// #2048
   19950:	sub	w16, w16, w0
   19954:	mov	w11, w10
   19958:	mov	w24, w2
   1995c:	ldr	w10, [sp, #112]
   19960:	add	w0, w0, w16, lsr #5
   19964:	str	w11, [sp, #112]
   19968:	strh	w0, [x4, #432]
   1996c:	b	19898 <lzma_mode_is_supported@@XZ_5.0+0x44a0>
   19970:	mov	x28, x6
   19974:	b	198b0 <lzma_mode_is_supported@@XZ_5.0+0x44b8>
   19978:	mov	x28, x6
   1997c:	b	19598 <lzma_mode_is_supported@@XZ_5.0+0x41a0>
   19980:	mov	x28, x6
   19984:	b	195f0 <lzma_mode_is_supported@@XZ_5.0+0x41f8>
   19988:	cmp	x28, x1
   1998c:	add	x0, x8, x28
   19990:	b.hi	19b5c <lzma_mode_is_supported@@XZ_5.0+0x4764>  // b.pmore
   19994:	ldr	x2, [sp, #104]
   19998:	sub	w4, w28, w10
   1999c:	sub	w1, w2, #0x1
   199a0:	add	w4, w4, w1
   199a4:	str	w4, [sp, #128]
   199a8:	sub	w2, w2, w4
   199ac:	cmp	w11, w2
   199b0:	add	x1, x8, w4, uxtw
   199b4:	b.ls	19b04 <lzma_mode_is_supported@@XZ_5.0+0x470c>  // b.plast
   199b8:	stp	x2, x14, [sp, #136]
   199bc:	stp	x13, x8, [sp, #152]
   199c0:	str	x6, [sp, #168]
   199c4:	str	w10, [sp, #176]
   199c8:	str	x5, [sp, #184]
   199cc:	stp	w12, w15, [sp, #196]
   199d0:	str	w18, [sp, #204]
   199d4:	str	x11, [sp, #208]
   199d8:	str	w9, [sp, #216]
   199dc:	stp	x7, x3, [sp, #224]
   199e0:	bl	30e0 <memmove@plt>
   199e4:	ldr	w4, [sp, #128]
   199e8:	ldr	x11, [sp, #208]
   199ec:	ldr	x2, [sp, #136]
   199f0:	add	w11, w4, w11
   199f4:	ldr	x8, [sp, #160]
   199f8:	add	x28, x28, x2
   199fc:	ldr	w0, [sp, #104]
   19a00:	mov	x1, x8
   19a04:	sub	w2, w11, w0
   19a08:	add	x0, x8, x28
   19a0c:	stp	x8, x2, [sp, #128]
   19a10:	bl	30c0 <memcpy@plt>
   19a14:	ldr	w10, [sp, #176]
   19a18:	ldp	x8, x2, [sp, #128]
   19a1c:	ldp	w12, w15, [sp, #196]
   19a20:	ldr	w18, [sp, #204]
   19a24:	ldr	w9, [sp, #216]
   19a28:	add	x11, x28, x2
   19a2c:	ldp	x14, x13, [sp, #144]
   19a30:	ldr	x6, [sp, #168]
   19a34:	ldr	x5, [sp, #184]
   19a38:	ldp	x7, x3, [sp, #224]
   19a3c:	b	185e4 <lzma_mode_is_supported@@XZ_5.0+0x31ec>
   19a40:	movi	d0, #0xffffffff
   19a44:	mov	x1, #0x6e00                	// #28160
   19a48:	add	x27, x27, x1
   19a4c:	cmp	w25, #0x0
   19a50:	ldp	x25, x26, [sp, #64]
   19a54:	mov	w0, #0x9                   	// #9
   19a58:	stur	d0, [x27, #108]
   19a5c:	mov	w1, #0x5                   	// #5
   19a60:	csinc	w0, w0, wzr, ne  // ne = any
   19a64:	str	w1, [x20, #11892]
   19a68:	b	17b9c <lzma_mode_is_supported@@XZ_5.0+0x27a4>
   19a6c:	mov	w26, w10
   19a70:	b	18578 <lzma_mode_is_supported@@XZ_5.0+0x3180>
   19a74:	sub	w0, w0, w0, lsr #5
   19a78:	sub	w24, w24, w1
   19a7c:	and	w0, w0, #0xffff
   19a80:	sub	w25, w25, w1
   19a84:	add	w10, w10, #0x1
   19a88:	b	1845c <lzma_mode_is_supported@@XZ_5.0+0x3064>
   19a8c:	sub	w1, w1, w1, lsr #5
   19a90:	sub	w24, w24, w0
   19a94:	sub	w25, w25, w0
   19a98:	add	w26, w26, #0x1
   19a9c:	strh	w1, [x5, x2]
   19aa0:	b	18404 <lzma_mode_is_supported@@XZ_5.0+0x300c>
   19aa4:	sub	w1, w1, w1, lsr #5
   19aa8:	sub	w24, w24, w0
   19aac:	sub	w25, w25, w0
   19ab0:	add	w26, w26, #0x1
   19ab4:	strh	w1, [x5, x2]
   19ab8:	b	183b0 <lzma_mode_is_supported@@XZ_5.0+0x2fb8>
   19abc:	sub	w1, w1, w1, lsr #5
   19ac0:	sub	w24, w24, w0
   19ac4:	sub	w25, w25, w0
   19ac8:	add	w26, w26, #0x1
   19acc:	strh	w1, [x5, x2]
   19ad0:	b	1835c <lzma_mode_is_supported@@XZ_5.0+0x2f64>
   19ad4:	sub	w1, w1, w1, lsr #5
   19ad8:	sub	w24, w24, w0
   19adc:	sub	w25, w25, w0
   19ae0:	add	w26, w26, #0x1
   19ae4:	strh	w1, [x5, x2]
   19ae8:	b	187d4 <lzma_mode_is_supported@@XZ_5.0+0x33dc>
   19aec:	sub	w1, w1, w1, lsr #5
   19af0:	sub	w24, w24, w0
   19af4:	sub	w25, w25, w0
   19af8:	add	w26, w26, #0x1
   19afc:	strh	w1, [x5, x2]
   19b00:	b	18780 <lzma_mode_is_supported@@XZ_5.0+0x3388>
   19b04:	mov	x2, x11
   19b08:	stp	x11, x14, [sp, #128]
   19b0c:	stp	x13, x8, [sp, #144]
   19b10:	str	x6, [sp, #160]
   19b14:	str	w10, [sp, #168]
   19b18:	str	x5, [sp, #176]
   19b1c:	str	w12, [sp, #184]
   19b20:	stp	w15, w18, [sp, #196]
   19b24:	str	w9, [sp, #204]
   19b28:	stp	x7, x3, [sp, #208]
   19b2c:	bl	30e0 <memmove@plt>
   19b30:	ldp	x11, x14, [sp, #128]
   19b34:	ldp	x13, x8, [sp, #144]
   19b38:	add	x11, x28, x11
   19b3c:	ldr	w10, [sp, #168]
   19b40:	ldr	w12, [sp, #184]
   19b44:	ldp	w15, w18, [sp, #196]
   19b48:	ldr	w9, [sp, #204]
   19b4c:	ldr	x6, [sp, #160]
   19b50:	ldr	x5, [sp, #176]
   19b54:	ldp	x7, x3, [sp, #208]
   19b58:	b	185e4 <lzma_mode_is_supported@@XZ_5.0+0x31ec>
   19b5c:	sub	x2, x28, #0x1
   19b60:	stp	x8, x11, [sp, #128]
   19b64:	sub	x1, x2, x1
   19b68:	add	x1, x8, x1
   19b6c:	mov	x2, x11
   19b70:	stp	x14, x13, [sp, #144]
   19b74:	str	x6, [sp, #160]
   19b78:	str	w10, [sp, #168]
   19b7c:	str	x5, [sp, #176]
   19b80:	str	w12, [sp, #184]
   19b84:	stp	w15, w18, [sp, #196]
   19b88:	str	w9, [sp, #204]
   19b8c:	stp	x7, x3, [sp, #208]
   19b90:	bl	30c0 <memcpy@plt>
   19b94:	ldp	x8, x11, [sp, #128]
   19b98:	ldp	x14, x13, [sp, #144]
   19b9c:	add	x11, x28, x11
   19ba0:	b	19b3c <lzma_mode_is_supported@@XZ_5.0+0x4744>
   19ba4:	cmp	w12, #0x4
   19ba8:	b.eq	19c14 <lzma_mode_is_supported@@XZ_5.0+0x481c>  // b.none
   19bac:	cmp	w12, #0x5
   19bb0:	b.ne	1ab20 <lzma_mode_is_supported@@XZ_5.0+0x5728>  // b.any
   19bb4:	mov	w1, #0xffffff              	// #16777215
   19bb8:	cmp	w24, w1
   19bbc:	b.hi	19bd8 <lzma_mode_is_supported@@XZ_5.0+0x47e0>  // b.pmore
   19bc0:	cmp	x19, x21
   19bc4:	b.eq	1ab94 <lzma_mode_is_supported@@XZ_5.0+0x579c>  // b.none
   19bc8:	ldrb	w1, [x22, x19]
   19bcc:	lsl	w24, w24, #8
   19bd0:	add	x19, x19, #0x1
   19bd4:	orr	w25, w1, w25, lsl #8
   19bd8:	ubfiz	x1, x26, #1, #32
   19bdc:	lsr	w2, w24, #11
   19be0:	add	x4, x5, x1
   19be4:	lsl	w26, w26, #1
   19be8:	ldrh	w1, [x5, x1]
   19bec:	mul	w2, w2, w1
   19bf0:	cmp	w2, w25
   19bf4:	b.ls	1a548 <lzma_mode_is_supported@@XZ_5.0+0x5150>  // b.plast
   19bf8:	mov	w10, #0x800                 	// #2048
   19bfc:	sub	w10, w10, w1
   19c00:	mov	w24, w2
   19c04:	add	w1, w1, w10, lsr #5
   19c08:	and	w1, w1, #0xffff
   19c0c:	add	w15, w15, #0x1
   19c10:	strh	w1, [x4]
   19c14:	mov	w1, #0xffffff              	// #16777215
   19c18:	cmp	w24, w1
   19c1c:	b.hi	19c38 <lzma_mode_is_supported@@XZ_5.0+0x4840>  // b.pmore
   19c20:	cmp	x19, x21
   19c24:	b.eq	1aac4 <lzma_mode_is_supported@@XZ_5.0+0x56cc>  // b.none
   19c28:	ldrb	w1, [x22, x19]
   19c2c:	lsl	w24, w24, #8
   19c30:	add	x19, x19, #0x1
   19c34:	orr	w25, w1, w25, lsl #8
   19c38:	ubfiz	x1, x26, #1, #32
   19c3c:	lsr	w2, w24, #11
   19c40:	add	x4, x5, x1
   19c44:	lsl	w26, w26, #1
   19c48:	ldrh	w1, [x5, x1]
   19c4c:	mul	w2, w2, w1
   19c50:	cmp	w2, w25
   19c54:	b.ls	1a360 <lzma_mode_is_supported@@XZ_5.0+0x4f68>  // b.plast
   19c58:	mov	w10, #0x800                 	// #2048
   19c5c:	sub	w10, w10, w1
   19c60:	mov	w24, w2
   19c64:	add	w1, w1, w10, lsr #5
   19c68:	and	w1, w1, #0xffff
   19c6c:	add	w15, w15, #0x1
   19c70:	strh	w1, [x4]
   19c74:	mov	w1, #0xffffff              	// #16777215
   19c78:	cmp	w24, w1
   19c7c:	b.hi	19c98 <lzma_mode_is_supported@@XZ_5.0+0x48a0>  // b.pmore
   19c80:	cmp	x19, x21
   19c84:	b.eq	1a910 <lzma_mode_is_supported@@XZ_5.0+0x5518>  // b.none
   19c88:	ldrb	w1, [x22, x19]
   19c8c:	lsl	w24, w24, #8
   19c90:	add	x19, x19, #0x1
   19c94:	orr	w25, w1, w25, lsl #8
   19c98:	ubfiz	x1, x26, #1, #32
   19c9c:	lsr	w2, w24, #11
   19ca0:	add	x4, x5, x1
   19ca4:	lsl	w26, w26, #1
   19ca8:	ldrh	w1, [x5, x1]
   19cac:	mul	w2, w2, w1
   19cb0:	cmp	w2, w25
   19cb4:	b.ls	1a1d0 <lzma_mode_is_supported@@XZ_5.0+0x4dd8>  // b.plast
   19cb8:	mov	w10, #0x800                 	// #2048
   19cbc:	sub	w10, w10, w1
   19cc0:	mov	w24, w2
   19cc4:	add	w1, w1, w10, lsr #5
   19cc8:	and	w1, w1, #0xffff
   19ccc:	add	w15, w15, #0x1
   19cd0:	strh	w1, [x4]
   19cd4:	b	184c0 <lzma_mode_is_supported@@XZ_5.0+0x30c8>
   19cd8:	sub	w0, w0, w0, lsr #5
   19cdc:	sub	w24, w24, w1
   19ce0:	and	w0, w0, #0xffff
   19ce4:	sub	w25, w25, w1
   19ce8:	add	w26, w26, #0x1
   19cec:	b	18fdc <lzma_mode_is_supported@@XZ_5.0+0x3be4>
   19cf0:	sub	w12, w12, #0x5
   19cf4:	b	194e4 <lzma_mode_is_supported@@XZ_5.0+0x40ec>
   19cf8:	sub	w0, w0, w0, lsr #5
   19cfc:	sub	w24, w24, w1
   19d00:	and	w0, w0, #0xffff
   19d04:	sub	w25, w25, w1
   19d08:	add	w9, w9, #0x1
   19d0c:	b	18d5c <lzma_mode_is_supported@@XZ_5.0+0x3964>
   19d10:	sub	w1, w1, w1, lsr #5
   19d14:	sub	w24, w24, w0
   19d18:	sub	w25, w25, w0
   19d1c:	add	w26, w26, #0x1
   19d20:	strh	w1, [x2, #3180]
   19d24:	b	18f84 <lzma_mode_is_supported@@XZ_5.0+0x3b8c>
   19d28:	sub	w1, w1, w1, lsr #5
   19d2c:	sub	w24, w24, w0
   19d30:	sub	w25, w25, w0
   19d34:	add	w26, w26, #0x1
   19d38:	strh	w1, [x2, #2152]
   19d3c:	b	18d04 <lzma_mode_is_supported@@XZ_5.0+0x390c>
   19d40:	sub	w24, w24, w0
   19d44:	sub	w25, w25, w0
   19d48:	add	w26, w26, #0x1
   19d4c:	sub	w0, w4, w4, lsr #5
   19d50:	strh	w0, [x5, x2]
   19d54:	b	17f5c <lzma_mode_is_supported@@XZ_5.0+0x2b64>
   19d58:	sub	w1, w1, w1, lsr #5
   19d5c:	sub	w24, w24, w0
   19d60:	sub	w25, w25, w0
   19d64:	add	w26, w26, #0x1
   19d68:	strh	w1, [x5, x2]
   19d6c:	b	17f5c <lzma_mode_is_supported@@XZ_5.0+0x2b64>
   19d70:	sub	w1, w1, w1, lsr #5
   19d74:	sub	w24, w24, w0
   19d78:	sub	w25, w25, w0
   19d7c:	add	w26, w26, #0x1
   19d80:	strh	w1, [x2, #3180]
   19d84:	b	18f2c <lzma_mode_is_supported@@XZ_5.0+0x3b34>
   19d88:	sub	w1, w1, w1, lsr #5
   19d8c:	sub	w24, w24, w0
   19d90:	sub	w25, w25, w0
   19d94:	add	w26, w26, #0x1
   19d98:	strh	w1, [x2, #2152]
   19d9c:	b	18cac <lzma_mode_is_supported@@XZ_5.0+0x38b4>
   19da0:	sub	w1, w1, w1, lsr #5
   19da4:	sub	w24, w24, w0
   19da8:	sub	w25, w25, w0
   19dac:	add	w26, w26, #0x1
   19db0:	strh	w1, [x5, x2]
   19db4:	b	17f08 <lzma_mode_is_supported@@XZ_5.0+0x2b10>
   19db8:	sub	w0, w0, w0, lsr #5
   19dbc:	sub	w24, w24, w2
   19dc0:	and	w0, w0, #0xffff
   19dc4:	sub	w25, w25, w2
   19dc8:	add	w26, w26, #0x1
   19dcc:	b	182e0 <lzma_mode_is_supported@@XZ_5.0+0x2ee8>
   19dd0:	sub	w1, w1, w1, lsr #5
   19dd4:	sub	w24, w24, w0
   19dd8:	sub	w25, w25, w0
   19ddc:	add	w26, w26, #0x1
   19de0:	strh	w1, [x2, #3180]
   19de4:	b	18ed4 <lzma_mode_is_supported@@XZ_5.0+0x3adc>
   19de8:	sub	w0, w0, w0, lsr #5
   19dec:	sub	w24, w24, w2
   19df0:	and	w0, w0, #0xffff
   19df4:	sub	w25, w25, w2
   19df8:	add	w10, w10, #0x8
   19dfc:	b	18b44 <lzma_mode_is_supported@@XZ_5.0+0x374c>
   19e00:	sub	w1, w1, w1, lsr #5
   19e04:	sub	w24, w24, w0
   19e08:	sub	w25, w25, w0
   19e0c:	add	w26, w26, #0x1
   19e10:	strh	w1, [x2, #2152]
   19e14:	b	18c54 <lzma_mode_is_supported@@XZ_5.0+0x385c>
   19e18:	sub	w0, w0, w0, lsr #5
   19e1c:	sub	w24, w24, w2
   19e20:	and	w0, w0, #0xffff
   19e24:	sub	w25, w25, w2
   19e28:	add	w26, w26, #0x1
   19e2c:	b	18270 <lzma_mode_is_supported@@XZ_5.0+0x2e78>
   19e30:	sub	w1, w1, w1, lsr #5
   19e34:	sub	w24, w24, w0
   19e38:	sub	w25, w25, w0
   19e3c:	add	w26, w26, #0x1
   19e40:	strh	w1, [x5, x2]
   19e44:	b	17eb4 <lzma_mode_is_supported@@XZ_5.0+0x2abc>
   19e48:	sub	w1, w1, w1, lsr #5
   19e4c:	sub	w24, w24, w0
   19e50:	sub	w25, w25, w0
   19e54:	add	w26, w26, #0x1
   19e58:	add	w10, w10, #0x4
   19e5c:	strh	w1, [x2, #1604]
   19e60:	b	18af0 <lzma_mode_is_supported@@XZ_5.0+0x36f8>
   19e64:	ldp	x25, x26, [sp, #64]
   19e68:	b	17b98 <lzma_mode_is_supported@@XZ_5.0+0x27a0>
   19e6c:	sub	w1, w1, w1, lsr #5
   19e70:	sub	w24, w24, w0
   19e74:	sub	w25, w25, w0
   19e78:	add	w26, w26, #0x1
   19e7c:	strh	w1, [x2, #3180]
   19e80:	b	18e7c <lzma_mode_is_supported@@XZ_5.0+0x3a84>
   19e84:	mov	w25, w1
   19e88:	mov	w26, w10
   19e8c:	mov	w2, #0x2b                  	// #43
   19e90:	mov	w10, w0
   19e94:	mov	x11, x28
   19e98:	mov	w1, #0x1                   	// #1
   19e9c:	mov	w0, #0x0                   	// #0
   19ea0:	ldr	x7, [x27, #28312]
   19ea4:	str	w2, [x20, #11936]
   19ea8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   19eac:	sub	w0, w0, w0, lsr #5
   19eb0:	sub	w24, w24, w2
   19eb4:	and	w0, w0, #0xffff
   19eb8:	sub	w25, w25, w2
   19ebc:	add	w26, w26, #0x1
   19ec0:	b	18ad0 <lzma_mode_is_supported@@XZ_5.0+0x36d8>
   19ec4:	sub	w0, w0, w0, lsr #5
   19ec8:	sub	w24, w24, w2
   19ecc:	and	w0, w0, #0xffff
   19ed0:	sub	w25, w25, w2
   19ed4:	add	w26, w26, #0x1
   19ed8:	b	18200 <lzma_mode_is_supported@@XZ_5.0+0x2e08>
   19edc:	sub	w1, w1, w1, lsr #5
   19ee0:	sub	w24, w24, w0
   19ee4:	sub	w25, w25, w0
   19ee8:	add	w26, w26, #0x1
   19eec:	strh	w1, [x5, x2]
   19ef0:	b	17e60 <lzma_mode_is_supported@@XZ_5.0+0x2a68>
   19ef4:	sub	w1, w1, w1, lsr #5
   19ef8:	sub	w24, w24, w0
   19efc:	sub	w25, w25, w0
   19f00:	add	w26, w26, #0x1
   19f04:	strh	w1, [x2, #3180]
   19f08:	b	18e24 <lzma_mode_is_supported@@XZ_5.0+0x3a2c>
   19f0c:	sub	w2, w2, w2, lsr #5
   19f10:	sub	w24, w24, w0
   19f14:	sub	w25, w25, w0
   19f18:	strh	w2, [x4, #2664]
   19f1c:	b	196a8 <lzma_mode_is_supported@@XZ_5.0+0x42b0>
   19f20:	sub	w1, w1, w1, lsr #5
   19f24:	sub	w24, w24, w0
   19f28:	sub	w25, w25, w0
   19f2c:	add	w26, w26, #0x1
   19f30:	add	w10, w10, #0x2
   19f34:	strh	w1, [x2, #1604]
   19f38:	b	195f0 <lzma_mode_is_supported@@XZ_5.0+0x41f8>
   19f3c:	sub	w0, w0, w0, lsr #5
   19f40:	sub	w24, w24, w2
   19f44:	and	w0, w0, #0xffff
   19f48:	sub	w25, w25, w2
   19f4c:	add	w26, w26, #0x1
   19f50:	b	1914c <lzma_mode_is_supported@@XZ_5.0+0x3d54>
   19f54:	sub	w1, w1, w1, lsr #5
   19f58:	sub	w24, w24, w0
   19f5c:	sub	w25, w25, w0
   19f60:	add	w26, w26, #0x1
   19f64:	strh	w1, [x2, #2152]
   19f68:	b	18bfc <lzma_mode_is_supported@@XZ_5.0+0x3804>
   19f6c:	sub	w0, w0, w0, lsr #5
   19f70:	sub	w24, w24, w2
   19f74:	and	w0, w0, #0xffff
   19f78:	sub	w25, w25, w2
   19f7c:	add	w26, w26, #0x1
   19f80:	mov	w15, w1
   19f84:	b	18190 <lzma_mode_is_supported@@XZ_5.0+0x2d98>
   19f88:	sub	w2, w2, w2, lsr #5
   19f8c:	sub	w24, w24, w4
   19f90:	sub	w25, w25, w4
   19f94:	add	w26, w26, #0x1
   19f98:	strh	w2, [x0, #2668]
   19f9c:	b	18a70 <lzma_mode_is_supported@@XZ_5.0+0x3678>
   19fa0:	sub	w1, w1, w1, lsr #5
   19fa4:	sub	w24, w24, w0
   19fa8:	sub	w25, w25, w0
   19fac:	add	w26, w26, #0x1
   19fb0:	strh	w1, [x5, x2]
   19fb4:	b	17e0c <lzma_mode_is_supported@@XZ_5.0+0x2a14>
   19fb8:	mov	w0, #0x8                   	// #8
   19fbc:	str	w0, [sp, #96]
   19fc0:	b	198b0 <lzma_mode_is_supported@@XZ_5.0+0x44b8>
   19fc4:	sub	w1, w1, w1, lsr #5
   19fc8:	sub	w24, w24, w0
   19fcc:	sub	w25, w25, w0
   19fd0:	add	w26, w26, #0x1
   19fd4:	strh	w1, [x2, #2152]
   19fd8:	b	18ba4 <lzma_mode_is_supported@@XZ_5.0+0x37ac>
   19fdc:	sub	w0, w0, w0, lsr #5
   19fe0:	sub	w24, w24, w2
   19fe4:	and	w0, w0, #0xffff
   19fe8:	sub	w25, w25, w2
   19fec:	add	w9, w9, #0x1
   19ff0:	b	189a0 <lzma_mode_is_supported@@XZ_5.0+0x35a8>
   19ff4:	sub	w1, w1, w1, lsr #5
   19ff8:	sub	w24, w24, w0
   19ffc:	sub	w25, w25, w0
   1a000:	add	w26, w26, #0x1
   1a004:	add	w10, w10, #0x1
   1a008:	strh	w1, [x2, #1604]
   1a00c:	b	19598 <lzma_mode_is_supported@@XZ_5.0+0x41a0>
   1a010:	sub	w0, w0, w0, lsr #5
   1a014:	strh	w0, [x4, #384]
   1a018:	sub	w24, w24, w2
   1a01c:	sub	w25, w25, w2
   1a020:	cbnz	x14, 197cc <lzma_mode_is_supported@@XZ_5.0+0x43d4>
   1a024:	mov	x11, x28
   1a028:	mov	w1, #0x0                   	// #0
   1a02c:	mov	w0, #0x9                   	// #9
   1a030:	ldr	x7, [x27, #28312]
   1a034:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a038:	mov	w12, #0x1                   	// #1
   1a03c:	sub	w2, w2, w2, lsr #5
   1a040:	lsl	w10, w12, w15
   1a044:	sub	w24, w24, w1
   1a048:	sub	w25, w25, w1
   1a04c:	add	w10, w10, w0
   1a050:	strh	w2, [x5, x4]
   1a054:	b	18578 <lzma_mode_is_supported@@XZ_5.0+0x3180>
   1a058:	sub	w0, w0, w0, lsr #5
   1a05c:	sub	w24, w24, w2
   1a060:	and	w0, w0, #0xffff
   1a064:	sub	w25, w25, w2
   1a068:	add	w9, w9, #0x1
   1a06c:	b	18700 <lzma_mode_is_supported@@XZ_5.0+0x3308>
   1a070:	sub	w0, w0, w0, lsr #5
   1a074:	sub	w24, w24, w2
   1a078:	sub	w25, w25, w2
   1a07c:	strh	w0, [x4, #2666]
   1a080:	b	19170 <lzma_mode_is_supported@@XZ_5.0+0x3d78>
   1a084:	sub	w0, w0, w0, lsr #5
   1a088:	sub	w24, w24, w4
   1a08c:	sub	w25, w25, w4
   1a090:	add	w26, w26, #0x1
   1a094:	strh	w0, [x2, #2924]
   1a098:	b	190ec <lzma_mode_is_supported@@XZ_5.0+0x3cf4>
   1a09c:	sub	w1, w1, w1, lsr #5
   1a0a0:	sub	w24, w24, w0
   1a0a4:	sub	w25, w25, w0
   1a0a8:	add	w26, w26, #0x1
   1a0ac:	strh	w1, [x5, x2]
   1a0b0:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x29c0>
   1a0b4:	sub	w1, w1, w1, lsr #5
   1a0b8:	sub	w24, w24, w0
   1a0bc:	sub	w25, w25, w0
   1a0c0:	add	w26, w26, #0x1
   1a0c4:	strh	w1, [x2, #3180]
   1a0c8:	b	18dcc <lzma_mode_is_supported@@XZ_5.0+0x39d4>
   1a0cc:	sub	w0, w0, w0, lsr #5
   1a0d0:	sub	w24, w24, w4
   1a0d4:	sub	w25, w25, w4
   1a0d8:	add	w26, w26, #0x1
   1a0dc:	strh	w0, [x2, #2668]
   1a0e0:	b	18a10 <lzma_mode_is_supported@@XZ_5.0+0x3618>
   1a0e4:	sub	w0, w0, w0, lsr #5
   1a0e8:	sub	w24, w24, w1
   1a0ec:	and	w0, w0, #0xffff
   1a0f0:	sub	w25, w25, w1
   1a0f4:	add	w26, w26, #0x1
   1a0f8:	mov	w15, w2
   1a0fc:	b	18120 <lzma_mode_is_supported@@XZ_5.0+0x2d28>
   1a100:	mov	w2, #0x12                  	// #18
   1a104:	mov	x11, x13
   1a108:	mov	w1, #0x1                   	// #1
   1a10c:	mov	w0, #0x0                   	// #0
   1a110:	ldr	x7, [x27, #28312]
   1a114:	str	w2, [x20, #11936]
   1a118:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a11c:	sub	w1, w1, w1, lsr #5
   1a120:	sub	w24, w24, w0
   1a124:	sub	w25, w25, w0
   1a128:	add	w26, w26, #0x1
   1a12c:	strh	w1, [x2, #2152]
   1a130:	b	19474 <lzma_mode_is_supported@@XZ_5.0+0x407c>
   1a134:	sub	w0, w0, w0, lsr #5
   1a138:	sub	w24, w24, w4
   1a13c:	sub	w25, w25, w4
   1a140:	add	w26, w26, #0x1
   1a144:	strh	w0, [x2, #1896]
   1a148:	b	18940 <lzma_mode_is_supported@@XZ_5.0+0x3548>
   1a14c:	sub	w0, w0, w0, lsr #5
   1a150:	sub	w24, w24, w4
   1a154:	sub	w25, w25, w4
   1a158:	add	w26, w26, #0x1
   1a15c:	strh	w0, [x2, #1640]
   1a160:	b	186a0 <lzma_mode_is_supported@@XZ_5.0+0x32a8>
   1a164:	mov	w10, #0x1                   	// #1
   1a168:	sub	w1, w1, w1, lsr #5
   1a16c:	sub	w24, w24, w2
   1a170:	sub	w25, w25, w2
   1a174:	and	w1, w1, #0xffff
   1a178:	lsl	w2, w10, w15
   1a17c:	add	w26, w26, w10
   1a180:	add	w0, w0, w2
   1a184:	b	18518 <lzma_mode_is_supported@@XZ_5.0+0x3120>
   1a188:	sub	w1, w1, w1, lsr #5
   1a18c:	sub	w24, w24, w0
   1a190:	sub	w25, w25, w0
   1a194:	add	w26, w26, #0x1
   1a198:	strh	w1, [x2, #3180]
   1a19c:	b	18d74 <lzma_mode_is_supported@@XZ_5.0+0x397c>
   1a1a0:	sub	w0, w0, w0, lsr #5
   1a1a4:	sub	w24, w24, w4
   1a1a8:	sub	w25, w25, w4
   1a1ac:	add	w26, w26, #0x1
   1a1b0:	strh	w0, [x2, #2924]
   1a1b4:	b	1908c <lzma_mode_is_supported@@XZ_5.0+0x3c94>
   1a1b8:	sub	w1, w1, w1, lsr #5
   1a1bc:	sub	w24, w24, w0
   1a1c0:	sub	w25, w25, w0
   1a1c4:	add	w26, w26, #0x1
   1a1c8:	strh	w1, [x5, x2]
   1a1cc:	b	17d64 <lzma_mode_is_supported@@XZ_5.0+0x296c>
   1a1d0:	mov	w10, #0x1                   	// #1
   1a1d4:	sub	w1, w1, w1, lsr #5
   1a1d8:	sub	w24, w24, w2
   1a1dc:	sub	w25, w25, w2
   1a1e0:	and	w1, w1, #0xffff
   1a1e4:	lsl	w2, w10, w15
   1a1e8:	add	w26, w26, w10
   1a1ec:	add	w0, w0, w2
   1a1f0:	b	19ccc <lzma_mode_is_supported@@XZ_5.0+0x48d4>
   1a1f4:	sub	w0, w0, w0, lsr #5
   1a1f8:	sub	w24, w24, w1
   1a1fc:	and	w0, w0, #0xffff
   1a200:	sub	w25, w25, w1
   1a204:	add	w26, w26, #0x1
   1a208:	mov	w15, w2
   1a20c:	b	180b0 <lzma_mode_is_supported@@XZ_5.0+0x2cb8>
   1a210:	sub	w1, w1, w1, lsr #5
   1a214:	sub	w24, w24, w0
   1a218:	sub	w25, w25, w0
   1a21c:	add	w26, w26, #0x1
   1a220:	strh	w1, [x2, #2152]
   1a224:	b	1941c <lzma_mode_is_supported@@XZ_5.0+0x4024>
   1a228:	sub	w0, w0, w0, lsr #5
   1a22c:	sub	w24, w24, w4
   1a230:	sub	w25, w25, w4
   1a234:	add	w26, w26, #0x1
   1a238:	strh	w0, [x2, #1896]
   1a23c:	b	188e0 <lzma_mode_is_supported@@XZ_5.0+0x34e8>
   1a240:	sub	w0, w0, w0, lsr #5
   1a244:	sub	w24, w24, w2
   1a248:	sub	w25, w25, w2
   1a24c:	strh	w0, [x4, #1638]
   1a250:	b	193c4 <lzma_mode_is_supported@@XZ_5.0+0x3fcc>
   1a254:	mov	w2, #0x26                  	// #38
   1a258:	mov	x11, x28
   1a25c:	mov	w1, #0x1                   	// #1
   1a260:	mov	w0, #0x0                   	// #0
   1a264:	ldr	x7, [x27, #28312]
   1a268:	str	w2, [x20, #11936]
   1a26c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a270:	sub	w0, w0, w0, lsr #5
   1a274:	sub	w24, w24, w2
   1a278:	sub	w25, w25, w2
   1a27c:	strh	w0, [x4, #480]
   1a280:	b	19898 <lzma_mode_is_supported@@XZ_5.0+0x44a0>
   1a284:	mov	w2, #0x29                  	// #41
   1a288:	mov	x11, x28
   1a28c:	mov	w1, #0x1                   	// #1
   1a290:	mov	w0, #0x0                   	// #0
   1a294:	ldr	x7, [x27, #28312]
   1a298:	str	w2, [x20, #11936]
   1a29c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a2a0:	mov	w2, #0x27                  	// #39
   1a2a4:	mov	x11, x28
   1a2a8:	mov	w1, #0x1                   	// #1
   1a2ac:	mov	w0, #0x0                   	// #0
   1a2b0:	ldr	x7, [x27, #28312]
   1a2b4:	str	w2, [x20, #11936]
   1a2b8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a2bc:	mov	w2, #0x28                  	// #40
   1a2c0:	mov	x11, x28
   1a2c4:	mov	w1, #0x1                   	// #1
   1a2c8:	mov	w0, #0x0                   	// #0
   1a2cc:	ldr	x7, [x27, #28312]
   1a2d0:	str	w2, [x20, #11936]
   1a2d4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a2d8:	sub	w0, w0, w0, lsr #5
   1a2dc:	sub	w24, w24, w2
   1a2e0:	sub	w25, w25, w2
   1a2e4:	strh	w0, [x4, #408]
   1a2e8:	b	19908 <lzma_mode_is_supported@@XZ_5.0+0x4510>
   1a2ec:	sub	w0, w0, w0, lsr #5
   1a2f0:	sub	w24, w24, w2
   1a2f4:	sub	w25, w25, w2
   1a2f8:	strh	w0, [x4, #1636]
   1a2fc:	b	18830 <lzma_mode_is_supported@@XZ_5.0+0x3438>
   1a300:	sub	w0, w0, w0, lsr #5
   1a304:	sub	w24, w24, w4
   1a308:	sub	w25, w25, w4
   1a30c:	add	w26, w26, #0x1
   1a310:	strh	w0, [x2, #1640]
   1a314:	b	19320 <lzma_mode_is_supported@@XZ_5.0+0x3f28>
   1a318:	mov	w11, w10
   1a31c:	sub	w24, w24, w2
   1a320:	sub	w25, w25, w2
   1a324:	sub	w0, w0, w0, lsr #5
   1a328:	ldp	w2, w10, [sp, #116]
   1a32c:	str	w2, [sp, #120]
   1a330:	ldr	w2, [sp, #112]
   1a334:	stp	w11, w2, [sp, #112]
   1a338:	strh	w0, [x4, #456]
   1a33c:	b	19898 <lzma_mode_is_supported@@XZ_5.0+0x44a0>
   1a340:	sub	w0, w0, w0, lsr #5
   1a344:	sub	w24, w24, w2
   1a348:	sub	w25, w25, w2
   1a34c:	strh	w0, [x4, #432]
   1a350:	b	19834 <lzma_mode_is_supported@@XZ_5.0+0x443c>
   1a354:	mov	w1, #0x0                   	// #0
   1a358:	mov	w0, #0x1                   	// #1
   1a35c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a360:	mov	w10, #0x1                   	// #1
   1a364:	sub	w1, w1, w1, lsr #5
   1a368:	sub	w24, w24, w2
   1a36c:	sub	w25, w25, w2
   1a370:	and	w1, w1, #0xffff
   1a374:	lsl	w2, w10, w15
   1a378:	add	w26, w26, w10
   1a37c:	add	w0, w0, w2
   1a380:	b	19c6c <lzma_mode_is_supported@@XZ_5.0+0x4874>
   1a384:	mov	w2, #0x25                  	// #37
   1a388:	mov	x11, x28
   1a38c:	mov	w1, #0x1                   	// #1
   1a390:	mov	w0, #0x0                   	// #0
   1a394:	ldr	x7, [x27, #28312]
   1a398:	str	w2, [x20, #11936]
   1a39c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a3a0:	mov	w2, #0x24                  	// #36
   1a3a4:	mov	x11, x28
   1a3a8:	mov	w1, #0x1                   	// #1
   1a3ac:	mov	w0, #0x0                   	// #0
   1a3b0:	ldr	x7, [x27, #28312]
   1a3b4:	str	w2, [x20, #11936]
   1a3b8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a3bc:	sub	w0, w0, w0, lsr #5
   1a3c0:	sub	w24, w24, w1
   1a3c4:	and	w0, w0, #0xffff
   1a3c8:	sub	w25, w25, w1
   1a3cc:	add	w26, w26, #0x1
   1a3d0:	mov	w15, w2
   1a3d4:	b	18040 <lzma_mode_is_supported@@XZ_5.0+0x2c48>
   1a3d8:	sub	w1, w1, w1, lsr #5
   1a3dc:	sub	w24, w24, w0
   1a3e0:	sub	w25, w25, w0
   1a3e4:	add	w26, w26, #0x1
   1a3e8:	strh	w1, [x5, x2]
   1a3ec:	b	17d10 <lzma_mode_is_supported@@XZ_5.0+0x2918>
   1a3f0:	sub	w2, w2, w2, lsr #5
   1a3f4:	sub	w24, w24, w0
   1a3f8:	sub	w25, w25, w0
   1a3fc:	mov	x28, x11
   1a400:	strh	w2, [x4]
   1a404:	b	191f0 <lzma_mode_is_supported@@XZ_5.0+0x3df8>
   1a408:	mov	w2, #0x8                   	// #8
   1a40c:	mov	x11, x28
   1a410:	mov	w1, #0x1                   	// #1
   1a414:	mov	w0, #0x0                   	// #0
   1a418:	ldr	x7, [x27, #28312]
   1a41c:	str	w2, [x20, #11936]
   1a420:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a424:	mov	w15, w1
   1a428:	mov	w2, #0xf                   	// #15
   1a42c:	mov	x11, x28
   1a430:	mov	w1, #0x1                   	// #1
   1a434:	mov	w0, #0x0                   	// #0
   1a438:	ldr	x7, [x27, #28312]
   1a43c:	str	w2, [x20, #11936]
   1a440:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a444:	mov	w2, #0x2f                  	// #47
   1a448:	mov	x11, x28
   1a44c:	mov	w1, #0x1                   	// #1
   1a450:	mov	w0, #0x0                   	// #0
   1a454:	ldr	x7, [x27, #28312]
   1a458:	str	w2, [x20, #11936]
   1a45c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a460:	mov	w2, #0x43                  	// #67
   1a464:	mov	x11, x28
   1a468:	mov	w1, #0x1                   	// #1
   1a46c:	mov	w0, #0x0                   	// #0
   1a470:	ldr	x7, [x27, #28312]
   1a474:	str	w2, [x20, #11936]
   1a478:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a47c:	mov	w2, #0x22                  	// #34
   1a480:	mov	x11, x28
   1a484:	mov	w1, #0x1                   	// #1
   1a488:	mov	w0, #0x0                   	// #0
   1a48c:	ldr	x7, [x27, #28312]
   1a490:	str	w2, [x20, #11936]
   1a494:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a498:	mov	w2, #0x44                  	// #68
   1a49c:	mov	x11, x28
   1a4a0:	mov	w1, #0x1                   	// #1
   1a4a4:	mov	w0, #0x0                   	// #0
   1a4a8:	ldr	x7, [x27, #28312]
   1a4ac:	str	w2, [x20, #11936]
   1a4b0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a4b4:	mov	w15, w1
   1a4b8:	mov	w2, #0x11                  	// #17
   1a4bc:	mov	x11, x28
   1a4c0:	mov	w1, #0x1                   	// #1
   1a4c4:	mov	w0, #0x0                   	// #0
   1a4c8:	ldr	x7, [x27, #28312]
   1a4cc:	str	w2, [x20, #11936]
   1a4d0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a4d4:	mov	w2, #0x9                   	// #9
   1a4d8:	mov	x11, x28
   1a4dc:	mov	w1, #0x1                   	// #1
   1a4e0:	mov	w0, #0x0                   	// #0
   1a4e4:	ldr	x7, [x27, #28312]
   1a4e8:	str	w2, [x20, #11936]
   1a4ec:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a4f0:	mov	w0, #0x7                   	// #7
   1a4f4:	mov	w26, #0x1                   	// #1
   1a4f8:	str	w0, [sp, #96]
   1a4fc:	str	w10, [sp, #112]
   1a500:	b	19270 <lzma_mode_is_supported@@XZ_5.0+0x3e78>
   1a504:	mov	w2, #0x21                  	// #33
   1a508:	mov	x11, x28
   1a50c:	mov	w1, #0x1                   	// #1
   1a510:	mov	w0, #0x0                   	// #0
   1a514:	ldr	x7, [x27, #28312]
   1a518:	str	w2, [x20, #11936]
   1a51c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a520:	mov	w0, #0x9                   	// #9
   1a524:	str	w0, [sp, #96]
   1a528:	b	19770 <lzma_mode_is_supported@@XZ_5.0+0x4378>
   1a52c:	mov	w2, #0x7                   	// #7
   1a530:	mov	x11, x28
   1a534:	mov	w1, #0x1                   	// #1
   1a538:	mov	w0, #0x0                   	// #0
   1a53c:	ldr	x7, [x27, #28312]
   1a540:	str	w2, [x20, #11936]
   1a544:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a548:	sub	w1, w1, w1, lsr #5
   1a54c:	sub	w24, w24, w2
   1a550:	and	w1, w1, #0xffff
   1a554:	sub	w25, w25, w2
   1a558:	add	w26, w26, #0x1
   1a55c:	add	w0, w0, #0x1
   1a560:	b	19c0c <lzma_mode_is_supported@@XZ_5.0+0x4814>
   1a564:	mov	w2, #0x10                  	// #16
   1a568:	mov	x11, x28
   1a56c:	mov	w1, #0x1                   	// #1
   1a570:	mov	w0, #0x0                   	// #0
   1a574:	ldr	x7, [x27, #28312]
   1a578:	str	w2, [x20, #11936]
   1a57c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a580:	mov	w2, #0x42                  	// #66
   1a584:	mov	x11, x28
   1a588:	mov	w1, #0x1                   	// #1
   1a58c:	mov	w0, #0x0                   	// #0
   1a590:	ldr	x7, [x27, #28312]
   1a594:	str	w2, [x20, #11936]
   1a598:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a59c:	mov	w2, #0x23                  	// #35
   1a5a0:	mov	x11, x28
   1a5a4:	mov	w1, #0x1                   	// #1
   1a5a8:	mov	w0, #0x0                   	// #0
   1a5ac:	ldr	x7, [x27, #28312]
   1a5b0:	str	w2, [x20, #11936]
   1a5b4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a5b8:	mov	w2, #0x20                  	// #32
   1a5bc:	mov	x11, x28
   1a5c0:	mov	w1, #0x1                   	// #1
   1a5c4:	mov	w0, #0x0                   	// #0
   1a5c8:	ldr	x7, [x27, #28312]
   1a5cc:	str	w2, [x20, #11936]
   1a5d0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a5d4:	mov	w2, #0x45                  	// #69
   1a5d8:	mov	x11, x28
   1a5dc:	mov	w1, #0x1                   	// #1
   1a5e0:	mov	w0, #0x0                   	// #0
   1a5e4:	ldr	x7, [x27, #28312]
   1a5e8:	str	w2, [x20, #11936]
   1a5ec:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a5f0:	mov	w2, #0x1f                  	// #31
   1a5f4:	mov	x11, x28
   1a5f8:	mov	w1, #0x1                   	// #1
   1a5fc:	mov	w0, #0x0                   	// #0
   1a600:	ldr	x7, [x27, #28312]
   1a604:	str	w2, [x20, #11936]
   1a608:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a60c:	mov	w2, #0x39                  	// #57
   1a610:	mov	x11, x28
   1a614:	mov	w1, #0x1                   	// #1
   1a618:	mov	w0, #0x0                   	// #0
   1a61c:	ldr	x7, [x27, #28312]
   1a620:	str	w2, [x20, #11936]
   1a624:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a628:	mov	w2, #0xe                   	// #14
   1a62c:	mov	x11, x28
   1a630:	mov	w1, #0x1                   	// #1
   1a634:	mov	w0, #0x0                   	// #0
   1a638:	ldr	x7, [x27, #28312]
   1a63c:	str	w2, [x20, #11936]
   1a640:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a644:	mov	w2, #0x3e                  	// #62
   1a648:	mov	x11, x28
   1a64c:	mov	w1, #0x1                   	// #1
   1a650:	mov	w0, #0x0                   	// #0
   1a654:	ldr	x7, [x27, #28312]
   1a658:	str	w2, [x20, #11936]
   1a65c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a660:	mov	w2, #0x3b                  	// #59
   1a664:	mov	x11, x28
   1a668:	mov	w1, #0x1                   	// #1
   1a66c:	mov	w0, #0x0                   	// #0
   1a670:	ldr	x7, [x27, #28312]
   1a674:	str	w2, [x20, #11936]
   1a678:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a67c:	mov	w2, #0xc                   	// #12
   1a680:	mov	x11, x28
   1a684:	mov	w1, #0x1                   	// #1
   1a688:	mov	w0, #0x0                   	// #0
   1a68c:	ldr	x7, [x27, #28312]
   1a690:	str	w2, [x20, #11936]
   1a694:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a698:	mov	w2, #0x4                   	// #4
   1a69c:	mov	x11, x28
   1a6a0:	mov	w1, #0x1                   	// #1
   1a6a4:	mov	w0, #0x0                   	// #0
   1a6a8:	ldr	x7, [x27, #28312]
   1a6ac:	str	w2, [x20, #11936]
   1a6b0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a6b4:	mov	w2, #0x3c                  	// #60
   1a6b8:	mov	x11, x28
   1a6bc:	mov	w1, #0x1                   	// #1
   1a6c0:	mov	w0, #0x0                   	// #0
   1a6c4:	ldr	x7, [x27, #28312]
   1a6c8:	str	w2, [x20, #11936]
   1a6cc:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a6d0:	mov	w2, #0x5                   	// #5
   1a6d4:	mov	x11, x28
   1a6d8:	mov	w1, #0x1                   	// #1
   1a6dc:	mov	w0, #0x0                   	// #0
   1a6e0:	ldr	x7, [x27, #28312]
   1a6e4:	str	w2, [x20, #11936]
   1a6e8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a6ec:	mov	w24, w0
   1a6f0:	mov	w1, w10
   1a6f4:	ldr	x0, [sp, #104]
   1a6f8:	cmp	x1, x11
   1a6fc:	sub	x1, x28, x1
   1a700:	mov	w15, #0x100                 	// #256
   1a704:	csel	x2, x0, xzr, cs  // cs = hs, nlast
   1a708:	mov	x28, x11
   1a70c:	add	x2, x8, x2
   1a710:	mov	w26, #0x1                   	// #1
   1a714:	mov	w0, #0x101                 	// #257
   1a718:	ldrb	w9, [x2, x1]
   1a71c:	lsl	w9, w9, #1
   1a720:	b	17fdc <lzma_mode_is_supported@@XZ_5.0+0x2be4>
   1a724:	mov	w2, #0x3                   	// #3
   1a728:	mov	x11, x28
   1a72c:	mov	w1, #0x1                   	// #1
   1a730:	mov	w0, #0x0                   	// #0
   1a734:	ldr	x7, [x27, #28312]
   1a738:	str	w2, [x20, #11936]
   1a73c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a740:	cmp	x13, x11
   1a744:	b.ne	17c10 <lzma_mode_is_supported@@XZ_5.0+0x2818>  // b.any
   1a748:	ldr	x7, [x27, #28312]
   1a74c:	b	17b3c <lzma_mode_is_supported@@XZ_5.0+0x2744>
   1a750:	mov	w2, #0x41                  	// #65
   1a754:	mov	x11, x28
   1a758:	mov	w1, #0x1                   	// #1
   1a75c:	mov	w0, #0x0                   	// #0
   1a760:	ldr	x7, [x27, #28312]
   1a764:	str	w2, [x20, #11936]
   1a768:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a76c:	mov	w2, #0x33                  	// #51
   1a770:	mov	x11, x28
   1a774:	mov	w1, #0x1                   	// #1
   1a778:	mov	w0, #0x0                   	// #0
   1a77c:	ldr	x7, [x27, #28312]
   1a780:	str	w2, [x20, #11936]
   1a784:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a788:	mov	w2, #0x35                  	// #53
   1a78c:	mov	x11, x28
   1a790:	mov	w1, #0x1                   	// #1
   1a794:	mov	w0, #0x0                   	// #0
   1a798:	ldr	x7, [x27, #28312]
   1a79c:	str	w2, [x20, #11936]
   1a7a0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a7a4:	mov	w0, #0x30                  	// #48
   1a7a8:	mov	w1, #0x1                   	// #1
   1a7ac:	str	w0, [x20, #11936]
   1a7b0:	mov	w0, #0x0                   	// #0
   1a7b4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a7b8:	mov	w2, #0x3a                  	// #58
   1a7bc:	mov	x11, x28
   1a7c0:	mov	w1, #0x1                   	// #1
   1a7c4:	mov	w0, #0x0                   	// #0
   1a7c8:	ldr	x7, [x27, #28312]
   1a7cc:	str	w2, [x20, #11936]
   1a7d0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a7d4:	mov	w2, #0x16                  	// #22
   1a7d8:	mov	x11, x28
   1a7dc:	mov	w1, #0x1                   	// #1
   1a7e0:	mov	w0, #0x0                   	// #0
   1a7e4:	ldr	x7, [x27, #28312]
   1a7e8:	str	w2, [x20, #11936]
   1a7ec:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a7f0:	mov	w10, w0
   1a7f4:	mov	w2, #0x2a                  	// #42
   1a7f8:	mov	x11, x28
   1a7fc:	mov	w1, #0x1                   	// #1
   1a800:	mov	w0, #0x0                   	// #0
   1a804:	mov	w12, #0x2                   	// #2
   1a808:	ldr	x7, [x27, #28312]
   1a80c:	str	w2, [x20, #11936]
   1a810:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a814:	mov	w2, #0x19                  	// #25
   1a818:	mov	x11, x28
   1a81c:	mov	w1, #0x1                   	// #1
   1a820:	mov	w0, #0x0                   	// #0
   1a824:	ldr	x7, [x27, #28312]
   1a828:	str	w2, [x20, #11936]
   1a82c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a830:	mov	w2, #0x18                  	// #24
   1a834:	mov	x11, x28
   1a838:	mov	w1, #0x1                   	// #1
   1a83c:	mov	w0, #0x0                   	// #0
   1a840:	ldr	x7, [x27, #28312]
   1a844:	str	w2, [x20, #11936]
   1a848:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a84c:	mov	w2, #0x2e                  	// #46
   1a850:	mov	x11, x28
   1a854:	mov	w1, #0x1                   	// #1
   1a858:	mov	w0, #0x0                   	// #0
   1a85c:	ldr	x7, [x27, #28312]
   1a860:	str	w2, [x20, #11936]
   1a864:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a868:	mov	w2, #0x3d                  	// #61
   1a86c:	mov	x11, x28
   1a870:	mov	w1, #0x1                   	// #1
   1a874:	mov	w0, #0x0                   	// #0
   1a878:	ldr	x7, [x27, #28312]
   1a87c:	str	w2, [x20, #11936]
   1a880:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a884:	mov	w2, #0x6                   	// #6
   1a888:	mov	x11, x28
   1a88c:	mov	w1, #0x1                   	// #1
   1a890:	mov	w0, #0x0                   	// #0
   1a894:	ldr	x7, [x27, #28312]
   1a898:	str	w2, [x20, #11936]
   1a89c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a8a0:	mov	w2, #0x40                  	// #64
   1a8a4:	mov	x11, x28
   1a8a8:	mov	w1, #0x1                   	// #1
   1a8ac:	mov	w0, #0x0                   	// #0
   1a8b0:	ldr	x7, [x27, #28312]
   1a8b4:	str	w2, [x20, #11936]
   1a8b8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a8bc:	mov	w2, #0x1b                  	// #27
   1a8c0:	mov	x11, x28
   1a8c4:	mov	w1, #0x1                   	// #1
   1a8c8:	mov	w0, #0x0                   	// #0
   1a8cc:	ldr	x7, [x27, #28312]
   1a8d0:	str	w2, [x20, #11936]
   1a8d4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a8d8:	mov	w2, #0x2c                  	// #44
   1a8dc:	mov	x11, x28
   1a8e0:	mov	w1, #0x1                   	// #1
   1a8e4:	mov	w0, #0x0                   	// #0
   1a8e8:	ldr	x7, [x27, #28312]
   1a8ec:	str	w2, [x20, #11936]
   1a8f0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a8f4:	mov	w2, #0x36                  	// #54
   1a8f8:	mov	x11, x28
   1a8fc:	mov	w1, #0x1                   	// #1
   1a900:	mov	w0, #0x0                   	// #0
   1a904:	ldr	x7, [x27, #28312]
   1a908:	str	w2, [x20, #11936]
   1a90c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a910:	mov	w10, w0
   1a914:	mov	w2, #0x2a                  	// #42
   1a918:	mov	x11, x28
   1a91c:	mov	w1, #0x1                   	// #1
   1a920:	mov	w0, #0x0                   	// #0
   1a924:	mov	w12, #0x3                   	// #3
   1a928:	ldr	x7, [x27, #28312]
   1a92c:	str	w2, [x20, #11936]
   1a930:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a934:	mov	w2, #0x37                  	// #55
   1a938:	mov	x11, x28
   1a93c:	mov	w1, #0x1                   	// #1
   1a940:	mov	w0, #0x0                   	// #0
   1a944:	ldr	x7, [x27, #28312]
   1a948:	str	w2, [x20, #11936]
   1a94c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a950:	mov	w2, #0x38                  	// #56
   1a954:	mov	x11, x28
   1a958:	mov	w1, #0x1                   	// #1
   1a95c:	mov	w0, #0x0                   	// #0
   1a960:	ldr	x7, [x27, #28312]
   1a964:	str	w2, [x20, #11936]
   1a968:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a96c:	mov	w2, #0x34                  	// #52
   1a970:	mov	x11, x28
   1a974:	mov	w1, #0x1                   	// #1
   1a978:	mov	w0, #0x0                   	// #0
   1a97c:	ldr	x7, [x27, #28312]
   1a980:	str	w2, [x20, #11936]
   1a984:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a988:	mov	w2, #0x2d                  	// #45
   1a98c:	mov	x11, x28
   1a990:	mov	w1, #0x1                   	// #1
   1a994:	mov	w0, #0x0                   	// #0
   1a998:	ldr	x7, [x27, #28312]
   1a99c:	str	w2, [x20, #11936]
   1a9a0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a9a4:	mov	w2, #0x15                  	// #21
   1a9a8:	mov	x11, x28
   1a9ac:	mov	w1, #0x1                   	// #1
   1a9b0:	mov	w0, #0x0                   	// #0
   1a9b4:	ldr	x7, [x27, #28312]
   1a9b8:	str	w2, [x20, #11936]
   1a9bc:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a9c0:	mov	w2, #0xb                   	// #11
   1a9c4:	mov	x11, x28
   1a9c8:	mov	w1, #0x1                   	// #1
   1a9cc:	mov	w0, #0x0                   	// #0
   1a9d0:	ldr	x7, [x27, #28312]
   1a9d4:	str	w2, [x20, #11936]
   1a9d8:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1a9dc:	mov	w10, w0
   1a9e0:	mov	w2, #0x2a                  	// #42
   1a9e4:	mov	w1, #0x1                   	// #1
   1a9e8:	mov	x11, x28
   1a9ec:	mov	w12, w1
   1a9f0:	mov	w0, #0x0                   	// #0
   1a9f4:	ldr	x7, [x27, #28312]
   1a9f8:	str	w2, [x20, #11936]
   1a9fc:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa00:	mov	w2, #0x17                  	// #23
   1aa04:	mov	x11, x28
   1aa08:	mov	w1, #0x1                   	// #1
   1aa0c:	mov	w0, #0x0                   	// #0
   1aa10:	ldr	x7, [x27, #28312]
   1aa14:	str	w2, [x20, #11936]
   1aa18:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa1c:	mov	w2, #0x3f                  	// #63
   1aa20:	mov	x11, x28
   1aa24:	mov	w1, #0x1                   	// #1
   1aa28:	mov	w0, #0x0                   	// #0
   1aa2c:	ldr	x7, [x27, #28312]
   1aa30:	str	w2, [x20, #11936]
   1aa34:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa38:	mov	w2, #0xd                   	// #13
   1aa3c:	mov	x11, x28
   1aa40:	mov	w1, #0x1                   	// #1
   1aa44:	mov	w0, #0x0                   	// #0
   1aa48:	ldr	x7, [x27, #28312]
   1aa4c:	str	w2, [x20, #11936]
   1aa50:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa54:	mov	w2, #0x1c                  	// #28
   1aa58:	mov	x11, x28
   1aa5c:	mov	w1, #0x1                   	// #1
   1aa60:	mov	w0, #0x0                   	// #0
   1aa64:	ldr	x7, [x27, #28312]
   1aa68:	str	w2, [x20, #11936]
   1aa6c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa70:	mov	w2, #0x1d                  	// #29
   1aa74:	mov	x11, x28
   1aa78:	mov	w1, #0x1                   	// #1
   1aa7c:	mov	w0, #0x0                   	// #0
   1aa80:	ldr	x7, [x27, #28312]
   1aa84:	str	w2, [x20, #11936]
   1aa88:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aa8c:	mov	w2, #0x1e                  	// #30
   1aa90:	mov	x11, x28
   1aa94:	mov	w1, #0x1                   	// #1
   1aa98:	mov	w0, #0x0                   	// #0
   1aa9c:	ldr	x7, [x27, #28312]
   1aaa0:	str	w2, [x20, #11936]
   1aaa4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aaa8:	mov	w2, #0x1a                  	// #26
   1aaac:	mov	x11, x28
   1aab0:	mov	w1, #0x1                   	// #1
   1aab4:	mov	w0, #0x0                   	// #0
   1aab8:	ldr	x7, [x27, #28312]
   1aabc:	str	w2, [x20, #11936]
   1aac0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aac4:	mov	w10, w0
   1aac8:	mov	w2, #0x2a                  	// #42
   1aacc:	mov	x11, x28
   1aad0:	mov	w1, #0x1                   	// #1
   1aad4:	mov	w0, #0x0                   	// #0
   1aad8:	mov	w12, #0x4                   	// #4
   1aadc:	ldr	x7, [x27, #28312]
   1aae0:	str	w2, [x20, #11936]
   1aae4:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1aae8:	mov	w2, #0xa                   	// #10
   1aaec:	mov	x11, x28
   1aaf0:	mov	w1, #0x1                   	// #1
   1aaf4:	mov	w0, #0x0                   	// #0
   1aaf8:	ldr	x7, [x27, #28312]
   1aafc:	str	w2, [x20, #11936]
   1ab00:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab04:	mov	w2, #0x31                  	// #49
   1ab08:	mov	x11, x28
   1ab0c:	mov	w1, #0x1                   	// #1
   1ab10:	mov	w0, #0x0                   	// #0
   1ab14:	ldr	x7, [x27, #28312]
   1ab18:	str	w2, [x20, #11936]
   1ab1c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab20:	mov	w10, w0
   1ab24:	b	18578 <lzma_mode_is_supported@@XZ_5.0+0x3180>
   1ab28:	mov	w2, #0x1                   	// #1
   1ab2c:	mov	w0, #0x0                   	// #0
   1ab30:	mov	w1, w2
   1ab34:	ldr	x7, [x27, #28312]
   1ab38:	str	w2, [x20, #11936]
   1ab3c:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab40:	mov	w2, #0x2                   	// #2
   1ab44:	mov	x11, x28
   1ab48:	mov	w1, #0x1                   	// #1
   1ab4c:	mov	w0, #0x0                   	// #0
   1ab50:	ldr	x7, [x27, #28312]
   1ab54:	str	w2, [x20, #11936]
   1ab58:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab5c:	mov	w2, #0x13                  	// #19
   1ab60:	mov	x11, x28
   1ab64:	mov	w1, #0x1                   	// #1
   1ab68:	mov	w0, #0x0                   	// #0
   1ab6c:	ldr	x7, [x27, #28312]
   1ab70:	str	w2, [x20, #11936]
   1ab74:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab78:	mov	w2, #0x14                  	// #20
   1ab7c:	mov	x11, x28
   1ab80:	mov	w1, #0x1                   	// #1
   1ab84:	mov	w0, #0x0                   	// #0
   1ab88:	ldr	x7, [x27, #28312]
   1ab8c:	str	w2, [x20, #11936]
   1ab90:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1ab94:	mov	w10, w0
   1ab98:	mov	w2, #0x2a                  	// #42
   1ab9c:	mov	x11, x28
   1aba0:	mov	w1, #0x1                   	// #1
   1aba4:	mov	w0, #0x0                   	// #0
   1aba8:	ldr	x7, [x27, #28312]
   1abac:	str	w2, [x20, #11936]
   1abb0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1abb4:	mov	w1, #0x1                   	// #1
   1abb8:	mov	w0, #0x0                   	// #0
   1abbc:	str	wzr, [x20, #11936]
   1abc0:	b	18608 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   1abc4:	nop
   1abc8:	stp	x29, x30, [sp, #-48]!
   1abcc:	mov	x29, sp
   1abd0:	stp	x19, x20, [sp, #16]
   1abd4:	mov	x19, x2
   1abd8:	ldr	w2, [x2, #20]
   1abdc:	cmp	w2, #0x4
   1abe0:	b.hi	1ac5c <lzma_mode_is_supported@@XZ_5.0+0x5864>  // b.pmore
   1abe4:	mov	x20, x3
   1abe8:	ldr	w3, [x19, #24]
   1abec:	str	x21, [sp, #32]
   1abf0:	mov	x21, x0
   1abf4:	cmp	w3, #0x4
   1abf8:	mov	w0, #0xb                   	// #11
   1abfc:	b.hi	1ac6c <lzma_mode_is_supported@@XZ_5.0+0x5874>  // b.pmore
   1ac00:	add	w2, w2, w3
   1ac04:	cmp	w2, #0x4
   1ac08:	b.hi	1ac6c <lzma_mode_is_supported@@XZ_5.0+0x5874>  // b.pmore
   1ac0c:	ldr	w2, [x19, #28]
   1ac10:	cmp	w2, #0x4
   1ac14:	b.hi	1ac6c <lzma_mode_is_supported@@XZ_5.0+0x5874>  // b.pmore
   1ac18:	ldr	x0, [x21]
   1ac1c:	cbz	x0, 1ac7c <lzma_mode_is_supported@@XZ_5.0+0x5884>
   1ac20:	ldr	w4, [x19]
   1ac24:	mov	x1, x19
   1ac28:	ldr	w2, [x19, #16]
   1ac2c:	ldr	x3, [x19, #8]
   1ac30:	stp	x4, x3, [x20]
   1ac34:	str	x2, [x20, #16]
   1ac38:	bl	175c0 <lzma_mode_is_supported@@XZ_5.0+0x21c8>
   1ac3c:	ldr	x1, [x21]
   1ac40:	mov	x2, #0xffffffffffffffff    	// #-1
   1ac44:	ldr	x21, [sp, #32]
   1ac48:	mov	w0, #0x0                   	// #0
   1ac4c:	str	x2, [x1, #28312]
   1ac50:	ldp	x19, x20, [sp, #16]
   1ac54:	ldp	x29, x30, [sp], #48
   1ac58:	ret
   1ac5c:	mov	w0, #0xb                   	// #11
   1ac60:	ldp	x19, x20, [sp, #16]
   1ac64:	ldp	x29, x30, [sp], #48
   1ac68:	ret
   1ac6c:	ldp	x19, x20, [sp, #16]
   1ac70:	ldr	x21, [sp, #32]
   1ac74:	ldp	x29, x30, [sp], #48
   1ac78:	ret
   1ac7c:	mov	x0, #0x6ec0                	// #28352
   1ac80:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1ac84:	str	x0, [x21]
   1ac88:	cbz	x0, 1acb0 <lzma_mode_is_supported@@XZ_5.0+0x58b8>
   1ac8c:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1ac90:	adrp	x2, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1ac94:	add	x3, x3, #0xa30
   1ac98:	add	x2, x2, #0x5c0
   1ac9c:	adrp	x1, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1aca0:	add	x1, x1, #0x5b8
   1aca4:	stp	x3, x2, [x21, #8]
   1aca8:	str	x1, [x21, #24]
   1acac:	b	1ac20 <lzma_mode_is_supported@@XZ_5.0+0x5828>
   1acb0:	mov	w0, #0x5                   	// #5
   1acb4:	ldr	x21, [sp, #32]
   1acb8:	b	1ac60 <lzma_mode_is_supported@@XZ_5.0+0x5868>
   1acbc:	nop
   1acc0:	stp	x29, x30, [sp, #-48]!
   1acc4:	mov	x29, sp
   1acc8:	str	x21, [sp, #32]
   1accc:	mov	x21, x0
   1acd0:	ldr	x0, [x0]
   1acd4:	stp	x19, x20, [sp, #16]
   1acd8:	mov	x20, x2
   1acdc:	mov	x19, x3
   1ace0:	cbz	x0, 1ad0c <lzma_mode_is_supported@@XZ_5.0+0x5914>
   1ace4:	ldr	w3, [x20]
   1ace8:	mov	w0, #0x0                   	// #0
   1acec:	ldr	w1, [x20, #16]
   1acf0:	ldr	x2, [x20, #8]
   1acf4:	stp	x3, x2, [x19]
   1acf8:	str	x1, [x19, #16]
   1acfc:	ldp	x19, x20, [sp, #16]
   1ad00:	ldr	x21, [sp, #32]
   1ad04:	ldp	x29, x30, [sp], #48
   1ad08:	ret
   1ad0c:	mov	x0, #0x6ec0                	// #28352
   1ad10:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1ad14:	str	x0, [x21]
   1ad18:	cbz	x0, 1ad40 <lzma_mode_is_supported@@XZ_5.0+0x5948>
   1ad1c:	adrp	x2, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1ad20:	adrp	x1, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1ad24:	add	x2, x2, #0xa30
   1ad28:	add	x1, x1, #0x5c0
   1ad2c:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x1c08>
   1ad30:	add	x0, x0, #0x5b8
   1ad34:	stp	x2, x1, [x21, #8]
   1ad38:	str	x0, [x21, #24]
   1ad3c:	b	1ace4 <lzma_mode_is_supported@@XZ_5.0+0x58ec>
   1ad40:	mov	w0, #0x5                   	// #5
   1ad44:	b	1acfc <lzma_mode_is_supported@@XZ_5.0+0x5904>
   1ad48:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x4c08>
   1ad4c:	add	x3, x3, #0xbc8
   1ad50:	b	12c58 <lzma_mf_is_supported@@XZ_5.0+0x1c98>
   1ad54:	nop
   1ad58:	and	w1, w1, #0xff
   1ad5c:	cmp	w1, #0xe0
   1ad60:	b.hi	1adc0 <lzma_mode_is_supported@@XZ_5.0+0x59c8>  // b.pmore
   1ad64:	mov	w4, #0xc16d                	// #49517
   1ad68:	mov	w6, #0x2d                  	// #45
   1ad6c:	movk	w4, #0x6c16, lsl #16
   1ad70:	mov	w2, #0x8e39                	// #36409
   1ad74:	movk	w2, #0x38e3, lsl #16
   1ad78:	umull	x4, w1, w4
   1ad7c:	lsr	x5, x4, #32
   1ad80:	sub	w4, w1, w5
   1ad84:	add	w4, w5, w4, lsr #1
   1ad88:	lsr	w3, w4, #5
   1ad8c:	ubfx	x4, x4, #5, #8
   1ad90:	str	w4, [x0, #28]
   1ad94:	msub	w1, w3, w6, w1
   1ad98:	and	w1, w1, #0xff
   1ad9c:	umull	x2, w1, w2
   1ada0:	lsr	x2, x2, #33
   1ada4:	add	w3, w2, w2, lsl #3
   1ada8:	sub	w1, w1, w3
   1adac:	stp	w1, w2, [x0, #20]
   1adb0:	add	w2, w2, w1
   1adb4:	cmp	w2, #0x4
   1adb8:	cset	w0, hi  // hi = pmore
   1adbc:	ret
   1adc0:	mov	w0, #0x1                   	// #1
   1adc4:	ret
   1adc8:	stp	x29, x30, [sp, #-16]!
   1adcc:	mov	x29, sp
   1add0:	ldr	w0, [x0]
   1add4:	bl	12de8 <lzma_mf_is_supported@@XZ_5.0+0x1e28>
   1add8:	mov	x1, #0x6ec0                	// #28352
   1addc:	add	x0, x0, x1
   1ade0:	ldp	x29, x30, [sp], #16
   1ade4:	ret
   1ade8:	ldr	w2, [x0, #20]
   1adec:	cmp	w2, #0x4
   1adf0:	b.hi	1ae28 <lzma_mode_is_supported@@XZ_5.0+0x5a30>  // b.pmore
   1adf4:	mov	x1, x0
   1adf8:	mov	x0, #0xffffffffffffffff    	// #-1
   1adfc:	ldr	w3, [x1, #24]
   1ae00:	cmp	w3, #0x4
   1ae04:	b.hi	1ae24 <lzma_mode_is_supported@@XZ_5.0+0x5a2c>  // b.pmore
   1ae08:	add	w2, w2, w3
   1ae0c:	cmp	w2, #0x4
   1ae10:	b.hi	1ae24 <lzma_mode_is_supported@@XZ_5.0+0x5a2c>  // b.pmore
   1ae14:	ldr	w2, [x1, #28]
   1ae18:	cmp	w2, #0x4
   1ae1c:	b.ls	1ae30 <lzma_mode_is_supported@@XZ_5.0+0x5a38>  // b.plast
   1ae20:	ret
   1ae24:	ret
   1ae28:	mov	x0, #0xffffffffffffffff    	// #-1
   1ae2c:	ret
   1ae30:	stp	x29, x30, [sp, #-16]!
   1ae34:	mov	x29, sp
   1ae38:	ldr	w0, [x1]
   1ae3c:	bl	12de8 <lzma_mf_is_supported@@XZ_5.0+0x1e28>
   1ae40:	mov	x1, #0x6ec0                	// #28352
   1ae44:	add	x0, x0, x1
   1ae48:	ldp	x29, x30, [sp], #16
   1ae4c:	ret
   1ae50:	cmp	x3, #0x5
   1ae54:	b.eq	1ae60 <lzma_mode_is_supported@@XZ_5.0+0x5a68>  // b.none
   1ae58:	mov	w0, #0x8                   	// #8
   1ae5c:	ret
   1ae60:	stp	x29, x30, [sp, #-48]!
   1ae64:	mov	x29, sp
   1ae68:	stp	x19, x20, [sp, #16]
   1ae6c:	mov	x19, x3
   1ae70:	mov	x20, x2
   1ae74:	stp	x21, x22, [sp, #32]
   1ae78:	mov	x22, x0
   1ae7c:	mov	x21, x1
   1ae80:	mov	x0, #0x70                  	// #112
   1ae84:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1ae88:	mov	x3, x0
   1ae8c:	cbz	x0, 1af3c <lzma_mode_is_supported@@XZ_5.0+0x5b44>
   1ae90:	ldrb	w0, [x20]
   1ae94:	cmp	w0, #0xe0
   1ae98:	b.hi	1af1c <lzma_mode_is_supported@@XZ_5.0+0x5b24>  // b.pmore
   1ae9c:	mov	w4, #0xc16d                	// #49517
   1aea0:	mov	w6, #0x2d                  	// #45
   1aea4:	movk	w4, #0x6c16, lsl #16
   1aea8:	mov	w2, #0x8e39                	// #36409
   1aeac:	movk	w2, #0x38e3, lsl #16
   1aeb0:	umull	x4, w0, w4
   1aeb4:	lsr	x5, x4, #32
   1aeb8:	sub	w4, w0, w5
   1aebc:	add	w4, w5, w4, lsr #1
   1aec0:	lsr	w1, w4, #5
   1aec4:	ubfx	x4, x4, #5, #8
   1aec8:	str	w4, [x3, #28]
   1aecc:	msub	w1, w1, w6, w0
   1aed0:	and	w1, w1, #0xff
   1aed4:	umull	x2, w1, w2
   1aed8:	lsr	x2, x2, #33
   1aedc:	add	w0, w2, w2, lsl #3
   1aee0:	sub	w1, w1, w0
   1aee4:	stp	w1, w2, [x3, #20]
   1aee8:	add	w2, w2, w1
   1aeec:	cmp	w2, #0x4
   1aef0:	b.hi	1af1c <lzma_mode_is_supported@@XZ_5.0+0x5b24>  // b.pmore
   1aef4:	ldur	w1, [x20, #1]
   1aef8:	mov	w0, #0x0                   	// #0
   1aefc:	str	w1, [x3]
   1af00:	str	x3, [x22]
   1af04:	str	xzr, [x3, #8]
   1af08:	str	wzr, [x3, #16]
   1af0c:	ldp	x19, x20, [sp, #16]
   1af10:	ldp	x21, x22, [sp, #32]
   1af14:	ldp	x29, x30, [sp], #48
   1af18:	ret
   1af1c:	mov	x1, x21
   1af20:	mov	x0, x3
   1af24:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1af28:	mov	w0, #0x8                   	// #8
   1af2c:	ldp	x19, x20, [sp, #16]
   1af30:	ldp	x21, x22, [sp, #32]
   1af34:	ldp	x29, x30, [sp], #48
   1af38:	ret
   1af3c:	mov	w0, w19
   1af40:	b	1af0c <lzma_mode_is_supported@@XZ_5.0+0x5b14>
   1af44:	nop
   1af48:	ldr	x1, [x1, #8]
   1af4c:	mov	x2, x0
   1af50:	cbz	x1, 1afcc <lzma_mode_is_supported@@XZ_5.0+0x5bd4>
   1af54:	ldr	w0, [x0]
   1af58:	cbnz	w0, 1afcc <lzma_mode_is_supported@@XZ_5.0+0x5bd4>
   1af5c:	ldr	w3, [x1, #20]
   1af60:	ldr	w4, [x2, #36]
   1af64:	cmp	w4, w3
   1af68:	b.eq	1afac <lzma_mode_is_supported@@XZ_5.0+0x5bb4>  // b.none
   1af6c:	cmp	w3, #0x4
   1af70:	b.hi	1afc4 <lzma_mode_is_supported@@XZ_5.0+0x5bcc>  // b.pmore
   1af74:	ldr	w4, [x1, #24]
   1af78:	cmp	w4, #0x4
   1af7c:	b.hi	1afc4 <lzma_mode_is_supported@@XZ_5.0+0x5bcc>  // b.pmore
   1af80:	add	w5, w3, w4
   1af84:	cmp	w5, #0x4
   1af88:	b.hi	1afc4 <lzma_mode_is_supported@@XZ_5.0+0x5bcc>  // b.pmore
   1af8c:	ldr	w1, [x1, #28]
   1af90:	cmp	w1, #0x4
   1af94:	b.hi	1afc4 <lzma_mode_is_supported@@XZ_5.0+0x5bcc>  // b.pmore
   1af98:	mov	w5, #0x101                 	// #257
   1af9c:	stp	w3, w4, [x2, #36]
   1afa0:	str	w1, [x2, #44]
   1afa4:	strh	w5, [x2, #128]
   1afa8:	ret
   1afac:	ldr	x4, [x1, #24]
   1afb0:	ldr	x5, [x2, #40]
   1afb4:	cmp	x5, x4
   1afb8:	b.eq	1afa8 <lzma_mode_is_supported@@XZ_5.0+0x5bb0>  // b.none
   1afbc:	cmp	w3, #0x4
   1afc0:	b.ls	1af74 <lzma_mode_is_supported@@XZ_5.0+0x5b7c>  // b.plast
   1afc4:	mov	w0, #0x8                   	// #8
   1afc8:	ret
   1afcc:	mov	w0, #0xb                   	// #11
   1afd0:	ret
   1afd4:	nop
   1afd8:	cbz	x2, 1b0e8 <lzma_mode_is_supported@@XZ_5.0+0x5cf0>
   1afdc:	stp	x29, x30, [sp, #-48]!
   1afe0:	mov	x29, sp
   1afe4:	ldr	x4, [x0]
   1afe8:	stp	x19, x20, [sp, #16]
   1afec:	mov	x20, x0
   1aff0:	stp	x21, x22, [sp, #32]
   1aff4:	mov	x19, x2
   1aff8:	mov	x21, x3
   1affc:	mov	x22, x1
   1b000:	cbz	x4, 1b0ac <lzma_mode_is_supported@@XZ_5.0+0x5cb4>
   1b004:	ldp	x0, x1, [x19]
   1b008:	add	x2, x4, #0x10
   1b00c:	stp	x0, x1, [x4, #16]
   1b010:	mov	w3, #0x1                   	// #1
   1b014:	ldp	x6, x7, [x19, #16]
   1b018:	stp	x6, x7, [x2, #16]
   1b01c:	mov	w0, #0x1                   	// #1
   1b020:	ldp	x6, x7, [x19, #32]
   1b024:	stp	x6, x7, [x2, #32]
   1b028:	ldp	x6, x7, [x19, #48]
   1b02c:	stp	x6, x7, [x2, #48]
   1b030:	ldp	x6, x7, [x19, #64]
   1b034:	stp	x6, x7, [x2, #64]
   1b038:	ldp	x6, x7, [x19, #80]
   1b03c:	stp	x6, x7, [x2, #80]
   1b040:	ldr	x1, [x4, #24]
   1b044:	ldp	x6, x7, [x19, #96]
   1b048:	stp	x6, x7, [x2, #96]
   1b04c:	str	wzr, [x4]
   1b050:	strh	w3, [x4, #128]
   1b054:	cbz	x1, 1b064 <lzma_mode_is_supported@@XZ_5.0+0x5c6c>
   1b058:	ldr	w0, [x4, #32]
   1b05c:	cmp	w0, #0x0
   1b060:	cset	w0, eq  // eq = none
   1b064:	strb	w0, [x4, #130]
   1b068:	mov	x1, x22
   1b06c:	add	x0, x4, #0x8
   1b070:	mov	x3, x21
   1b074:	bl	15148 <lzma_lzma_preset@@XZ_5.0+0x2338>
   1b078:	cbnz	w0, 1b09c <lzma_mode_is_supported@@XZ_5.0+0x5ca4>
   1b07c:	ldp	x1, x2, [x21]
   1b080:	mov	x3, #0xffff                	// #65535
   1b084:	add	x1, x2, x1
   1b088:	cmp	x1, x3
   1b08c:	b.hi	1b09c <lzma_mode_is_supported@@XZ_5.0+0x5ca4>  // b.pmore
   1b090:	mov	x1, #0x10000               	// #65536
   1b094:	sub	x2, x1, x2
   1b098:	str	x2, [x21]
   1b09c:	ldp	x19, x20, [sp, #16]
   1b0a0:	ldp	x21, x22, [sp, #32]
   1b0a4:	ldp	x29, x30, [sp], #48
   1b0a8:	ret
   1b0ac:	mov	x0, #0xa8                  	// #168
   1b0b0:	movk	x0, #0x1, lsl #16
   1b0b4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1b0b8:	mov	x4, x0
   1b0bc:	cbz	x0, 1b0f0 <lzma_mode_is_supported@@XZ_5.0+0x5cf8>
   1b0c0:	adrp	x2, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1b0c4:	adrp	x1, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1b0c8:	add	x2, x2, #0x128
   1b0cc:	add	x1, x1, #0xf8
   1b0d0:	adrp	x0, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x4c08>
   1b0d4:	add	x0, x0, #0xf48
   1b0d8:	stp	x4, x2, [x20]
   1b0dc:	str	xzr, [x4, #8]
   1b0e0:	stp	x1, x0, [x20, #16]
   1b0e4:	b	1b004 <lzma_mode_is_supported@@XZ_5.0+0x5c0c>
   1b0e8:	mov	w0, #0xb                   	// #11
   1b0ec:	ret
   1b0f0:	mov	w0, #0x5                   	// #5
   1b0f4:	b	1b09c <lzma_mode_is_supported@@XZ_5.0+0x5ca4>
   1b0f8:	stp	x29, x30, [sp, #-32]!
   1b0fc:	mov	x29, sp
   1b100:	stp	x19, x20, [sp, #16]
   1b104:	mov	x19, x0
   1b108:	mov	x20, x1
   1b10c:	ldr	x0, [x0, #8]
   1b110:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1b114:	mov	x1, x20
   1b118:	mov	x0, x19
   1b11c:	ldp	x19, x20, [sp, #16]
   1b120:	ldp	x29, x30, [sp], #32
   1b124:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1b128:	stp	x29, x30, [sp, #-96]!
   1b12c:	mov	x29, sp
   1b130:	stp	x27, x28, [sp, #80]
   1b134:	ldr	x27, [x3]
   1b138:	stp	x19, x20, [sp, #16]
   1b13c:	mov	x19, x0
   1b140:	mov	x20, x4
   1b144:	stp	x21, x22, [sp, #32]
   1b148:	mov	x21, x3
   1b14c:	mov	x22, x2
   1b150:	stp	x23, x24, [sp, #48]
   1b154:	add	x24, x0, #0x98
   1b158:	add	x23, x0, #0xa0
   1b15c:	stp	x25, x26, [sp, #64]
   1b160:	mov	x26, x1
   1b164:	nop
   1b168:	cmp	x20, x27
   1b16c:	b.ls	1b248 <lzma_mode_is_supported@@XZ_5.0+0x5e50>  // b.plast
   1b170:	ldr	w0, [x19]
   1b174:	cmp	w0, #0x2
   1b178:	b.eq	1b330 <lzma_mode_is_supported@@XZ_5.0+0x5f38>  // b.none
   1b17c:	b.hi	1b268 <lzma_mode_is_supported@@XZ_5.0+0x5e70>  // b.pmore
   1b180:	cbz	w0, 1b2c4 <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   1b184:	ldr	x1, [x19, #136]
   1b188:	mov	w2, #0x200000              	// #2097152
   1b18c:	ldp	w25, w28, [x26, #24]
   1b190:	sub	w2, w2, w1
   1b194:	ldr	x0, [x19, #8]
   1b198:	add	w5, w2, w25
   1b19c:	ldr	w1, [x26, #100]
   1b1a0:	add	x3, x19, #0x90
   1b1a4:	mov	x4, #0x10000               	// #65536
   1b1a8:	cmp	w1, w2
   1b1ac:	add	w1, w1, w28
   1b1b0:	sub	w5, w5, w1
   1b1b4:	add	x2, x19, #0xa6
   1b1b8:	csel	w5, w5, wzr, ls  // ls = plast
   1b1bc:	mov	x1, x26
   1b1c0:	bl	130c0 <lzma_lzma_preset@@XZ_5.0+0x2b0>
   1b1c4:	sub	w28, w28, w25
   1b1c8:	ldp	w5, w1, [x26, #24]
   1b1cc:	cmp	w0, #0x1
   1b1d0:	ldr	x2, [x19, #136]
   1b1d4:	sub	w5, w5, w1
   1b1d8:	add	w5, w5, w28
   1b1dc:	add	x5, x5, x2
   1b1e0:	str	x5, [x19, #136]
   1b1e4:	b.ne	1b248 <lzma_mode_is_supported@@XZ_5.0+0x5e50>  // b.any
   1b1e8:	ldr	x2, [x19, #144]
   1b1ec:	cmp	x5, x2
   1b1f0:	b.hi	1b364 <lzma_mode_is_supported@@XZ_5.0+0x5f6c>  // b.pmore
   1b1f4:	ldrb	w2, [x19, #130]
   1b1f8:	add	x5, x5, w1, uxtw
   1b1fc:	sub	x1, x5, #0x1
   1b200:	sub	w3, w5, #0x1
   1b204:	cmp	w2, #0x0
   1b208:	mov	w4, #0x3                   	// #3
   1b20c:	cset	w2, eq  // eq = none
   1b210:	lsr	x1, x1, #8
   1b214:	ldr	x27, [x21]
   1b218:	add	w2, w2, #0x1
   1b21c:	str	w4, [x19]
   1b220:	str	wzr, [x26, #28]
   1b224:	cmp	x20, x27
   1b228:	sturh	w0, [x19, #129]
   1b22c:	str	x5, [x19, #136]
   1b230:	str	xzr, [x19, #152]
   1b234:	strb	w2, [x19, #160]
   1b238:	strb	w1, [x19, #161]
   1b23c:	strb	w3, [x19, #162]
   1b240:	b.hi	1b170 <lzma_mode_is_supported@@XZ_5.0+0x5d78>  // b.pmore
   1b244:	nop
   1b248:	mov	w0, #0x0                   	// #0
   1b24c:	ldp	x19, x20, [sp, #16]
   1b250:	ldp	x21, x22, [sp, #32]
   1b254:	ldp	x23, x24, [sp, #48]
   1b258:	ldp	x25, x26, [sp, #64]
   1b25c:	ldp	x27, x28, [sp, #80]
   1b260:	ldp	x29, x30, [sp], #96
   1b264:	ret
   1b268:	cmp	w0, #0x3
   1b26c:	b.eq	1b2f8 <lzma_mode_is_supported@@XZ_5.0+0x5f00>  // b.none
   1b270:	cmp	w0, #0x4
   1b274:	b.ne	1b174 <lzma_mode_is_supported@@XZ_5.0+0x5d7c>  // b.any
   1b278:	ldr	x1, [x19, #136]
   1b27c:	sub	x28, x20, x27
   1b280:	ldr	x3, [x26]
   1b284:	cmp	x28, x1
   1b288:	ldr	w2, [x26, #24]
   1b28c:	csel	x28, x28, x1, ls  // ls = plast
   1b290:	add	x0, x22, x27
   1b294:	add	x27, x27, x28
   1b298:	sub	x1, x2, x1
   1b29c:	mov	x2, x28
   1b2a0:	add	x1, x3, x1
   1b2a4:	bl	30c0 <memcpy@plt>
   1b2a8:	ldr	x2, [x19, #136]
   1b2ac:	str	x27, [x21]
   1b2b0:	sub	x28, x2, x28
   1b2b4:	str	x28, [x19, #136]
   1b2b8:	cbnz	x28, 1b248 <lzma_mode_is_supported@@XZ_5.0+0x5e50>
   1b2bc:	str	wzr, [x19]
   1b2c0:	b	1b168 <lzma_mode_is_supported@@XZ_5.0+0x5d70>
   1b2c4:	ldp	w25, w28, [x26, #24]
   1b2c8:	ldr	w0, [x26, #36]
   1b2cc:	add	w0, w28, w0
   1b2d0:	cmp	w25, w0
   1b2d4:	b.eq	1b4a8 <lzma_mode_is_supported@@XZ_5.0+0x60b0>  // b.none
   1b2d8:	ldrb	w1, [x19, #129]
   1b2dc:	ldr	x0, [x19, #8]
   1b2e0:	cbnz	w1, 1b3fc <lzma_mode_is_supported@@XZ_5.0+0x6004>
   1b2e4:	mov	w1, #0x1                   	// #1
   1b2e8:	mov	w2, #0x200000              	// #2097152
   1b2ec:	str	w1, [x19]
   1b2f0:	stp	xzr, xzr, [x19, #136]
   1b2f4:	b	1b198 <lzma_mode_is_supported@@XZ_5.0+0x5da0>
   1b2f8:	mov	x5, x20
   1b2fc:	mov	x4, x21
   1b300:	mov	x3, x22
   1b304:	mov	x1, x24
   1b308:	mov	x0, x23
   1b30c:	mov	x2, #0x3                   	// #3
   1b310:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1b314:	ldr	x0, [x19, #152]
   1b318:	cmp	x0, #0x3
   1b31c:	b.ne	1b248 <lzma_mode_is_supported@@XZ_5.0+0x5e50>  // b.any
   1b320:	mov	w0, #0x4                   	// #4
   1b324:	str	w0, [x19]
   1b328:	ldr	x27, [x21]
   1b32c:	b	1b278 <lzma_mode_is_supported@@XZ_5.0+0x5e80>
   1b330:	ldr	x2, [x19, #144]
   1b334:	mov	x1, x24
   1b338:	mov	x5, x20
   1b33c:	mov	x4, x21
   1b340:	mov	x3, x22
   1b344:	mov	x0, x23
   1b348:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1b34c:	ldp	x0, x1, [x19, #144]
   1b350:	cmp	x1, x0
   1b354:	b.ne	1b248 <lzma_mode_is_supported@@XZ_5.0+0x5e50>  // b.any
   1b358:	str	wzr, [x19]
   1b35c:	ldr	x27, [x21]
   1b360:	b	1b168 <lzma_mode_is_supported@@XZ_5.0+0x5d70>
   1b364:	ldrb	w8, [x19, #128]
   1b368:	cbz	w8, 1b414 <lzma_mode_is_supported@@XZ_5.0+0x601c>
   1b36c:	ldrb	w0, [x19, #130]
   1b370:	cbz	w0, 1b458 <lzma_mode_is_supported@@XZ_5.0+0x6060>
   1b374:	mov	w10, #0xffffffe0            	// #-32
   1b378:	mov	x1, #0x5                   	// #5
   1b37c:	mov	x3, #0x4                   	// #4
   1b380:	mov	x4, #0x3                   	// #3
   1b384:	mov	x6, #0x2                   	// #2
   1b388:	mov	w0, #0xe0                  	// #224
   1b38c:	mov	x7, #0x1                   	// #1
   1b390:	mov	x9, #0x0                   	// #0
   1b394:	strb	w10, [x19, #160]
   1b398:	sub	x5, x5, #0x1
   1b39c:	add	x10, x19, x9
   1b3a0:	add	x7, x19, x7
   1b3a4:	add	x6, x19, x6
   1b3a8:	lsr	x11, x5, #16
   1b3ac:	str	x9, [x19, #152]
   1b3b0:	add	w0, w0, w11
   1b3b4:	add	x4, x19, x4
   1b3b8:	strb	w0, [x10, #160]
   1b3bc:	lsr	x9, x5, #8
   1b3c0:	sub	x0, x2, #0x1
   1b3c4:	add	x3, x19, x3
   1b3c8:	strb	w9, [x7, #160]
   1b3cc:	strb	w5, [x6, #160]
   1b3d0:	lsr	x5, x0, #8
   1b3d4:	strb	w5, [x4, #160]
   1b3d8:	strb	w0, [x3, #160]
   1b3dc:	cbnz	w8, 1b444 <lzma_mode_is_supported@@XZ_5.0+0x604c>
   1b3e0:	add	x2, x2, #0x6
   1b3e4:	mov	w0, #0x2                   	// #2
   1b3e8:	str	w0, [x19]
   1b3ec:	strh	wzr, [x19, #128]
   1b3f0:	strb	wzr, [x19, #130]
   1b3f4:	str	x2, [x19, #144]
   1b3f8:	b	1b334 <lzma_mode_is_supported@@XZ_5.0+0x5f3c>
   1b3fc:	add	x1, x19, #0x10
   1b400:	bl	149b8 <lzma_lzma_preset@@XZ_5.0+0x1ba8>
   1b404:	cbnz	w0, 1b24c <lzma_mode_is_supported@@XZ_5.0+0x5e54>
   1b408:	ldp	w25, w28, [x26, #24]
   1b40c:	ldr	x0, [x19, #8]
   1b410:	b	1b2e4 <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   1b414:	ldrb	w0, [x19, #129]
   1b418:	cbz	w0, 1b480 <lzma_mode_is_supported@@XZ_5.0+0x6088>
   1b41c:	mov	w10, #0xffffffa0            	// #-96
   1b420:	mov	x1, #0x6                   	// #6
   1b424:	mov	x3, #0x5                   	// #5
   1b428:	mov	x4, #0x4                   	// #4
   1b42c:	mov	x6, #0x3                   	// #3
   1b430:	mov	w0, #0xa0                  	// #160
   1b434:	mov	x7, #0x2                   	// #2
   1b438:	mov	x9, #0x1                   	// #1
   1b43c:	strb	w10, [x19, #161]
   1b440:	b	1b398 <lzma_mode_is_supported@@XZ_5.0+0x5fa0>
   1b444:	add	x1, x23, x1
   1b448:	add	x0, x19, #0x10
   1b44c:	bl	15340 <lzma_lzma_preset@@XZ_5.0+0x2530>
   1b450:	ldr	x2, [x19, #144]
   1b454:	b	1b3e0 <lzma_mode_is_supported@@XZ_5.0+0x5fe8>
   1b458:	mov	w10, #0xffffffc0            	// #-64
   1b45c:	mov	x1, #0x5                   	// #5
   1b460:	mov	x3, #0x4                   	// #4
   1b464:	mov	x4, #0x3                   	// #3
   1b468:	mov	x6, #0x2                   	// #2
   1b46c:	mov	w0, #0xc0                  	// #192
   1b470:	mov	x7, #0x1                   	// #1
   1b474:	mov	x9, #0x0                   	// #0
   1b478:	strb	w10, [x19, #160]
   1b47c:	b	1b398 <lzma_mode_is_supported@@XZ_5.0+0x5fa0>
   1b480:	mov	w10, #0xffffff80            	// #-128
   1b484:	mov	x1, #0x6                   	// #6
   1b488:	mov	x3, #0x5                   	// #5
   1b48c:	mov	x4, #0x4                   	// #4
   1b490:	mov	x6, #0x3                   	// #3
   1b494:	mov	w0, #0x80                  	// #128
   1b498:	mov	x7, #0x2                   	// #2
   1b49c:	mov	x9, #0x1                   	// #1
   1b4a0:	strb	w10, [x19, #161]
   1b4a4:	b	1b398 <lzma_mode_is_supported@@XZ_5.0+0x5fa0>
   1b4a8:	ldr	w0, [x26, #104]
   1b4ac:	cmp	w0, #0x3
   1b4b0:	b.eq	1b4c0 <lzma_mode_is_supported@@XZ_5.0+0x60c8>  // b.none
   1b4b4:	cmp	w0, #0x0
   1b4b8:	cset	w0, ne  // ne = any
   1b4bc:	b	1b24c <lzma_mode_is_supported@@XZ_5.0+0x5e54>
   1b4c0:	add	x1, x27, #0x1
   1b4c4:	strb	wzr, [x22, x27]
   1b4c8:	str	x1, [x21]
   1b4cc:	b	1b4b4 <lzma_mode_is_supported@@XZ_5.0+0x60bc>
   1b4d0:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x4c08>
   1b4d4:	add	x3, x3, #0xfd8
   1b4d8:	b	10b68 <lzma_crc64@@XZ_5.0+0x1578>
   1b4dc:	nop
   1b4e0:	stp	x29, x30, [sp, #-16]!
   1b4e4:	mov	x29, sp
   1b4e8:	bl	15280 <lzma_lzma_preset@@XZ_5.0+0x2470>
   1b4ec:	add	x1, x0, #0x10, lsl #12
   1b4f0:	cmn	x0, #0x1
   1b4f4:	add	x1, x1, #0xa8
   1b4f8:	csel	x0, x1, x0, ne  // ne = any
   1b4fc:	ldp	x29, x30, [sp], #16
   1b500:	ret
   1b504:	nop
   1b508:	ldr	w0, [x0]
   1b50c:	mov	w2, #0x1000                	// #4096
   1b510:	cmp	w0, w2
   1b514:	csel	w0, w0, w2, cs  // cs = hs, nlast
   1b518:	sub	w0, w0, #0x1
   1b51c:	orr	w0, w0, w0, lsr #2
   1b520:	orr	w0, w0, w0, lsr #3
   1b524:	orr	w0, w0, w0, lsr #4
   1b528:	orr	w0, w0, w0, lsr #8
   1b52c:	orr	w0, w0, w0, lsr #16
   1b530:	cmn	w0, #0x1
   1b534:	b.eq	1b58c <lzma_mode_is_supported@@XZ_5.0+0x6194>  // b.none
   1b538:	add	w0, w0, #0x1
   1b53c:	mov	w2, #0x1fff                	// #8191
   1b540:	cmp	w0, w2
   1b544:	b.ls	1b57c <lzma_mode_is_supported@@XZ_5.0+0x6184>  // b.plast
   1b548:	mov	w2, #0x1ffffff             	// #33554431
   1b54c:	cmp	w0, w2
   1b550:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   1b554:	b.ls	1b59c <lzma_mode_is_supported@@XZ_5.0+0x61a4>  // b.plast
   1b558:	ldr	x2, [x2, #4000]
   1b55c:	lsr	w0, w0, #24
   1b560:	ldrb	w0, [x2, w0, uxtw]
   1b564:	add	w0, w0, #0x30
   1b568:	and	w0, w0, #0xff
   1b56c:	sub	w0, w0, #0x18
   1b570:	strb	w0, [x1]
   1b574:	mov	w0, #0x0                   	// #0
   1b578:	ret
   1b57c:	adrp	x2, 38000 <lzma_mode_is_supported@@XZ_5.0+0x22c08>
   1b580:	ldr	x2, [x2, #4000]
   1b584:	ldrb	w0, [x2, w0, uxtw]
   1b588:	b	1b56c <lzma_mode_is_supported@@XZ_5.0+0x6174>
   1b58c:	mov	w0, #0x28                  	// #40
   1b590:	strb	w0, [x1]
   1b594:	mov	w0, #0x0                   	// #0
   1b598:	ret
   1b59c:	ldr	x2, [x2, #4000]
   1b5a0:	lsr	w0, w0, #12
   1b5a4:	ldrb	w0, [x2, w0, uxtw]
   1b5a8:	add	w0, w0, #0x18
   1b5ac:	and	w0, w0, #0xff
   1b5b0:	b	1b56c <lzma_mode_is_supported@@XZ_5.0+0x6174>
   1b5b4:	nop
   1b5b8:	ldr	w0, [x0]
   1b5bc:	mov	x1, #0x100000              	// #1048576
   1b5c0:	add	x0, x0, x0, lsl #1
   1b5c4:	cmp	x0, x1
   1b5c8:	csel	x0, x0, x1, cs  // cs = hs, nlast
   1b5cc:	ret
   1b5d0:	stp	x29, x30, [sp, #-48]!
   1b5d4:	mov	x29, sp
   1b5d8:	ldr	x4, [x0]
   1b5dc:	stp	x19, x20, [sp, #16]
   1b5e0:	mov	x20, x1
   1b5e4:	cbz	x4, 1b624 <lzma_mode_is_supported@@XZ_5.0+0x622c>
   1b5e8:	ldr	x1, [x2, #8]
   1b5ec:	mov	w0, #0x1                   	// #1
   1b5f0:	str	wzr, [x4]
   1b5f4:	strb	w0, [x4, #64]
   1b5f8:	mov	w0, #0x1                   	// #1
   1b5fc:	cbz	x1, 1b60c <lzma_mode_is_supported@@XZ_5.0+0x6214>
   1b600:	ldr	w0, [x2, #16]
   1b604:	cmp	w0, #0x0
   1b608:	cset	w0, eq  // eq = none
   1b60c:	strb	w0, [x4, #65]
   1b610:	mov	x1, x20
   1b614:	ldp	x19, x20, [sp, #16]
   1b618:	add	x0, x4, #0x8
   1b61c:	ldp	x29, x30, [sp], #48
   1b620:	b	1acc0 <lzma_mode_is_supported@@XZ_5.0+0x58c8>
   1b624:	mov	x19, x0
   1b628:	mov	x0, #0xb8                  	// #184
   1b62c:	stp	x2, x3, [sp, #32]
   1b630:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1b634:	mov	x4, x0
   1b638:	cbz	x0, 1b668 <lzma_mode_is_supported@@XZ_5.0+0x6270>
   1b63c:	movi	v0.4s, #0x0
   1b640:	adrp	x1, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1b644:	adrp	x0, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1b648:	add	x1, x1, #0x6a8
   1b64c:	add	x0, x0, #0x678
   1b650:	stp	x4, x1, [x19]
   1b654:	str	xzr, [x4, #8]
   1b658:	stp	q0, q0, [x4, #16]
   1b65c:	str	x0, [x19, #32]
   1b660:	ldp	x2, x3, [sp, #32]
   1b664:	b	1b5e8 <lzma_mode_is_supported@@XZ_5.0+0x61f0>
   1b668:	mov	w0, #0x5                   	// #5
   1b66c:	ldp	x19, x20, [sp, #16]
   1b670:	ldp	x29, x30, [sp], #48
   1b674:	ret
   1b678:	stp	x29, x30, [sp, #-32]!
   1b67c:	mov	x29, sp
   1b680:	stp	x19, x20, [sp, #16]
   1b684:	mov	x19, x0
   1b688:	mov	x20, x1
   1b68c:	ldr	x0, [x0, #8]
   1b690:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1b694:	mov	x1, x20
   1b698:	mov	x0, x19
   1b69c:	ldp	x19, x20, [sp, #16]
   1b6a0:	ldp	x29, x30, [sp], #32
   1b6a4:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1b6a8:	stp	x29, x30, [sp, #-112]!
   1b6ac:	mov	x29, sp
   1b6b0:	stp	x23, x24, [sp, #48]
   1b6b4:	mov	x24, x0
   1b6b8:	mov	x23, x1
   1b6bc:	stp	x19, x20, [sp, #16]
   1b6c0:	mov	x19, x0
   1b6c4:	adrp	x0, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   1b6c8:	ldr	w5, [x24], #72
   1b6cc:	stp	x21, x22, [sp, #32]
   1b6d0:	mov	x21, x3
   1b6d4:	mov	x22, x4
   1b6d8:	stp	x27, x28, [sp, #80]
   1b6dc:	mov	x28, x2
   1b6e0:	mov	w27, #0x5                   	// #5
   1b6e4:	ldr	x20, [x3]
   1b6e8:	str	d8, [sp, #96]
   1b6ec:	ldr	d8, [x0, #1488]
   1b6f0:	stp	x25, x26, [sp, #64]
   1b6f4:	mov	w26, #0x1                   	// #1
   1b6f8:	mov	w25, #0x6                   	// #6
   1b6fc:	cmp	x22, x20
   1b700:	b.hi	1b7c8 <lzma_mode_is_supported@@XZ_5.0+0x63d0>  // b.pmore
   1b704:	cmp	w5, #0x6
   1b708:	b.ne	1b848 <lzma_mode_is_supported@@XZ_5.0+0x6450>  // b.any
   1b70c:	ldp	x0, x5, [x19, #8]
   1b710:	mov	x3, x21
   1b714:	mov	x2, x28
   1b718:	mov	x1, x23
   1b71c:	mov	x4, x22
   1b720:	blr	x5
   1b724:	ldr	x2, [x21]
   1b728:	ldr	x1, [x19, #56]
   1b72c:	sub	x3, x2, x20
   1b730:	cmp	x1, x3
   1b734:	b.cc	1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>  // b.lo, b.ul, b.last
   1b738:	sub	x1, x1, x2
   1b73c:	cmp	w0, #0x1
   1b740:	add	x20, x1, x20
   1b744:	str	x20, [x19, #56]
   1b748:	b.ne	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>  // b.any
   1b74c:	cbnz	x20, 1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>
   1b750:	str	wzr, [x19]
   1b754:	cmp	x2, x22
   1b758:	b.cs	1b848 <lzma_mode_is_supported@@XZ_5.0+0x6450>  // b.hs, b.nlast
   1b75c:	mov	x20, x2
   1b760:	ldrb	w0, [x28, x20]
   1b764:	add	x20, x20, #0x1
   1b768:	str	x20, [x21]
   1b76c:	cbz	w0, 1b9dc <lzma_mode_is_supported@@XZ_5.0+0x65e4>
   1b770:	cmp	w0, #0xdf
   1b774:	ccmp	w0, #0x1, #0x4, ls  // ls = plast
   1b778:	b.eq	1b998 <lzma_mode_is_supported@@XZ_5.0+0x65a0>  // b.none
   1b77c:	ldrb	w1, [x19, #65]
   1b780:	cbnz	w1, 1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>
   1b784:	cmp	w0, #0x7f
   1b788:	b.ls	1b9a8 <lzma_mode_is_supported@@XZ_5.0+0x65b0>  // b.plast
   1b78c:	ubfiz	x1, x0, #16, #5
   1b790:	str	w26, [x19]
   1b794:	str	x1, [x19, #48]
   1b798:	cmp	w0, #0xbf
   1b79c:	b.hi	1b9c8 <lzma_mode_is_supported@@XZ_5.0+0x65d0>  // b.pmore
   1b7a0:	ldrb	w1, [x19, #64]
   1b7a4:	cbnz	w1, 1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>
   1b7a8:	str	w25, [x19, #4]
   1b7ac:	cmp	w0, #0x9f
   1b7b0:	b.ls	1b9b4 <lzma_mode_is_supported@@XZ_5.0+0x65bc>  // b.plast
   1b7b4:	ldr	x0, [x19, #8]
   1b7b8:	mov	x1, x24
   1b7bc:	ldr	x2, [x19, #24]
   1b7c0:	blr	x2
   1b7c4:	b	1b9b4 <lzma_mode_is_supported@@XZ_5.0+0x65bc>
   1b7c8:	cmp	w5, #0x3
   1b7cc:	b.eq	1b92c <lzma_mode_is_supported@@XZ_5.0+0x6534>  // b.none
   1b7d0:	b.ls	1b8ac <lzma_mode_is_supported@@XZ_5.0+0x64b4>  // b.plast
   1b7d4:	cmp	w5, #0x5
   1b7d8:	b.eq	1b958 <lzma_mode_is_supported@@XZ_5.0+0x6560>  // b.none
   1b7dc:	b.ls	1b850 <lzma_mode_is_supported@@XZ_5.0+0x6458>  // b.plast
   1b7e0:	cmp	w5, #0x6
   1b7e4:	b.eq	1b70c <lzma_mode_is_supported@@XZ_5.0+0x6314>  // b.none
   1b7e8:	cmp	w5, #0x7
   1b7ec:	b.ne	1b888 <lzma_mode_is_supported@@XZ_5.0+0x6490>  // b.any
   1b7f0:	mov	x4, x23
   1b7f4:	sub	x0, x22, x20
   1b7f8:	ldr	x2, [x19, #56]
   1b7fc:	mov	x1, x21
   1b800:	ldr	x3, [x4], #8
   1b804:	cmp	x0, x2
   1b808:	ldr	x5, [x23, #24]
   1b80c:	add	x2, x2, x20
   1b810:	csel	x2, x2, x22, hi  // hi = pmore
   1b814:	mov	x0, x28
   1b818:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1b81c:	ldr	x1, [x19, #56]
   1b820:	sub	x0, x1, x0
   1b824:	str	x0, [x19, #56]
   1b828:	ldp	x2, x1, [x23, #8]
   1b82c:	cmp	x2, x1
   1b830:	b.hi	1b990 <lzma_mode_is_supported@@XZ_5.0+0x6598>  // b.pmore
   1b834:	cbnz	x0, 1b848 <lzma_mode_is_supported@@XZ_5.0+0x6450>
   1b838:	ldr	x20, [x21]
   1b83c:	str	wzr, [x19]
   1b840:	cmp	x22, x20
   1b844:	b.hi	1b760 <lzma_mode_is_supported@@XZ_5.0+0x6368>  // b.pmore
   1b848:	mov	w0, #0x0                   	// #0
   1b84c:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b850:	cmp	w5, #0x4
   1b854:	b.ne	1b888 <lzma_mode_is_supported@@XZ_5.0+0x6490>  // b.any
   1b858:	ldrb	w1, [x28, x20]
   1b85c:	add	x2, x20, #0x1
   1b860:	ldr	x0, [x19, #56]
   1b864:	add	x1, x1, #0x1
   1b868:	ldr	w5, [x19, #4]
   1b86c:	mov	x20, x2
   1b870:	add	x0, x0, x1
   1b874:	str	w5, [x19]
   1b878:	str	x2, [x21]
   1b87c:	str	x0, [x19, #56]
   1b880:	b	1b6fc <lzma_mode_is_supported@@XZ_5.0+0x6304>
   1b884:	cbz	w5, 1b760 <lzma_mode_is_supported@@XZ_5.0+0x6368>
   1b888:	mov	w0, #0xb                   	// #11
   1b88c:	ldp	x19, x20, [sp, #16]
   1b890:	ldp	x21, x22, [sp, #32]
   1b894:	ldp	x23, x24, [sp, #48]
   1b898:	ldp	x25, x26, [sp, #64]
   1b89c:	ldp	x27, x28, [sp, #80]
   1b8a0:	ldr	d8, [sp, #96]
   1b8a4:	ldp	x29, x30, [sp], #112
   1b8a8:	ret
   1b8ac:	cmp	w5, #0x1
   1b8b0:	b.eq	1b8f8 <lzma_mode_is_supported@@XZ_5.0+0x6500>  // b.none
   1b8b4:	cmp	w5, #0x2
   1b8b8:	b.ne	1b884 <lzma_mode_is_supported@@XZ_5.0+0x648c>  // b.any
   1b8bc:	ldr	x1, [x19, #48]
   1b8c0:	ldrb	w3, [x28, x20]
   1b8c4:	add	x20, x20, #0x1
   1b8c8:	ldr	x0, [x19, #8]
   1b8cc:	add	x3, x3, #0x1
   1b8d0:	ldr	x4, [x19, #32]
   1b8d4:	add	x1, x3, x1
   1b8d8:	mov	w3, #0x3                   	// #3
   1b8dc:	str	x20, [x21]
   1b8e0:	str	w3, [x19]
   1b8e4:	str	x1, [x19, #48]
   1b8e8:	blr	x4
   1b8ec:	ldr	w5, [x19]
   1b8f0:	ldr	x20, [x21]
   1b8f4:	b	1b6fc <lzma_mode_is_supported@@XZ_5.0+0x6304>
   1b8f8:	ldrb	w0, [x28, x20]
   1b8fc:	mov	w2, #0x2                   	// #2
   1b900:	ldr	x1, [x19, #48]
   1b904:	add	x20, x20, #0x1
   1b908:	ubfiz	x0, x0, #8, #8
   1b90c:	str	w2, [x19]
   1b910:	add	x1, x1, x0
   1b914:	str	x20, [x21]
   1b918:	str	x1, [x19, #48]
   1b91c:	cmp	x20, x22
   1b920:	b.cc	1b8c0 <lzma_mode_is_supported@@XZ_5.0+0x64c8>  // b.lo, b.ul, b.last
   1b924:	mov	w0, #0x0                   	// #0
   1b928:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b92c:	ldrb	w0, [x28, x20]
   1b930:	mov	w1, #0x4                   	// #4
   1b934:	add	x20, x20, #0x1
   1b938:	str	w1, [x19]
   1b93c:	str	x20, [x21]
   1b940:	cmp	x20, x22
   1b944:	ubfiz	x0, x0, #8, #8
   1b948:	str	x0, [x19, #56]
   1b94c:	b.cc	1b858 <lzma_mode_is_supported@@XZ_5.0+0x6460>  // b.lo, b.ul, b.last
   1b950:	mov	w0, #0x0                   	// #0
   1b954:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b958:	ldrb	w1, [x28, x20]
   1b95c:	add	x20, x20, #0x1
   1b960:	str	x20, [x21]
   1b964:	mov	x0, x24
   1b968:	bl	1ad58 <lzma_mode_is_supported@@XZ_5.0+0x5960>
   1b96c:	tst	w0, #0xff
   1b970:	b.ne	1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>  // b.any
   1b974:	ldr	x0, [x19, #8]
   1b978:	mov	x1, x24
   1b97c:	ldr	x2, [x19, #24]
   1b980:	blr	x2
   1b984:	str	w25, [x19]
   1b988:	ldr	x20, [x21]
   1b98c:	b	1b70c <lzma_mode_is_supported@@XZ_5.0+0x6314>
   1b990:	str	x2, [x23, #16]
   1b994:	b	1b834 <lzma_mode_is_supported@@XZ_5.0+0x643c>
   1b998:	mov	w1, #0x101                 	// #257
   1b99c:	strh	w1, [x19, #64]
   1b9a0:	cmp	w0, #0x7f
   1b9a4:	b.hi	1b78c <lzma_mode_is_supported@@XZ_5.0+0x6394>  // b.pmore
   1b9a8:	cmp	w0, #0x2
   1b9ac:	b.hi	1b9d4 <lzma_mode_is_supported@@XZ_5.0+0x65dc>  // b.pmore
   1b9b0:	str	d8, [x19]
   1b9b4:	ldrb	w0, [x19, #65]
   1b9b8:	cbnz	w0, 1b9e4 <lzma_mode_is_supported@@XZ_5.0+0x65ec>
   1b9bc:	ldr	w5, [x19]
   1b9c0:	ldr	x20, [x21]
   1b9c4:	b	1b6fc <lzma_mode_is_supported@@XZ_5.0+0x6304>
   1b9c8:	str	w27, [x19, #4]
   1b9cc:	strb	wzr, [x19, #64]
   1b9d0:	b	1b9b4 <lzma_mode_is_supported@@XZ_5.0+0x65bc>
   1b9d4:	mov	w0, #0x9                   	// #9
   1b9d8:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b9dc:	mov	w0, #0x1                   	// #1
   1b9e0:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b9e4:	mov	w1, #0x1                   	// #1
   1b9e8:	mov	w0, #0x0                   	// #0
   1b9ec:	strb	w1, [x23, #40]
   1b9f0:	strb	wzr, [x19, #65]
   1b9f4:	b	1b88c <lzma_mode_is_supported@@XZ_5.0+0x6494>
   1b9f8:	adrp	x3, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1b9fc:	add	x3, x3, #0x5d0
   1ba00:	b	12c58 <lzma_mf_is_supported@@XZ_5.0+0x1c98>
   1ba04:	nop
   1ba08:	stp	x29, x30, [sp, #-16]!
   1ba0c:	mov	x29, sp
   1ba10:	bl	1adc8 <lzma_mode_is_supported@@XZ_5.0+0x59d0>
   1ba14:	add	x0, x0, #0xb8
   1ba18:	ldp	x29, x30, [sp], #16
   1ba1c:	ret
   1ba20:	cmp	x3, #0x1
   1ba24:	b.ne	1baa8 <lzma_mode_is_supported@@XZ_5.0+0x66b0>  // b.any
   1ba28:	stp	x29, x30, [sp, #-32]!
   1ba2c:	mov	x29, sp
   1ba30:	stp	x19, x20, [sp, #16]
   1ba34:	mov	x19, x2
   1ba38:	mov	x20, x0
   1ba3c:	ldrb	w2, [x2]
   1ba40:	mov	w0, #0x8                   	// #8
   1ba44:	cmp	w2, #0x28
   1ba48:	and	w2, w2, #0xc0
   1ba4c:	ccmp	w2, #0x0, #0x0, ls  // ls = plast
   1ba50:	b.ne	1ba9c <lzma_mode_is_supported@@XZ_5.0+0x66a4>  // b.any
   1ba54:	mov	x0, #0x70                  	// #112
   1ba58:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1ba5c:	mov	x1, x0
   1ba60:	cbz	x0, 1bab0 <lzma_mode_is_supported@@XZ_5.0+0x66b8>
   1ba64:	ldrb	w3, [x19]
   1ba68:	mov	w4, #0xffffffff            	// #-1
   1ba6c:	mov	w0, #0x0                   	// #0
   1ba70:	str	x1, [x20]
   1ba74:	and	w2, w3, #0x1
   1ba78:	cmp	w3, #0x28
   1ba7c:	lsr	w3, w3, #1
   1ba80:	orr	w2, w2, #0x2
   1ba84:	add	w3, w3, #0xb
   1ba88:	str	xzr, [x1, #8]
   1ba8c:	str	wzr, [x1, #16]
   1ba90:	lsl	w2, w2, w3
   1ba94:	csel	w2, w2, w4, ne  // ne = any
   1ba98:	str	w2, [x1]
   1ba9c:	ldp	x19, x20, [sp, #16]
   1baa0:	ldp	x29, x30, [sp], #32
   1baa4:	ret
   1baa8:	mov	w0, #0x8                   	// #8
   1baac:	ret
   1bab0:	mov	w0, #0x5                   	// #5
   1bab4:	b	1ba9c <lzma_mode_is_supported@@XZ_5.0+0x66a4>
   1bab8:	stp	x29, x30, [sp, #-32]!
   1babc:	mov	x29, sp
   1bac0:	stp	x19, x20, [sp, #16]
   1bac4:	mov	x19, x0
   1bac8:	mov	x20, x1
   1bacc:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
   1bad0:	mov	x1, x20
   1bad4:	mov	x0, x19
   1bad8:	ldp	x19, x20, [sp, #16]
   1badc:	ldp	x29, x30, [sp], #32
   1bae0:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1bae4:	nop
   1bae8:	stp	x29, x30, [sp, #-48]!
   1baec:	mov	x29, sp
   1baf0:	stp	x19, x20, [sp, #16]
   1baf4:	ldr	x19, [x0]
   1baf8:	stp	x21, x22, [sp, #32]
   1bafc:	mov	x21, x2
   1bb00:	mov	x22, x1
   1bb04:	cbz	x19, 1bb88 <lzma_mode_is_supported@@XZ_5.0+0x6790>
   1bb08:	ldr	x0, [x21, #16]
   1bb0c:	cbz	x0, 1bb74 <lzma_mode_is_supported@@XZ_5.0+0x677c>
   1bb10:	ldr	w1, [x0]
   1bb14:	cbnz	w1, 1bb74 <lzma_mode_is_supported@@XZ_5.0+0x677c>
   1bb18:	ldr	w1, [x0, #4]
   1bb1c:	mov	w0, #0x8                   	// #8
   1bb20:	sub	w2, w1, #0x1
   1bb24:	cmp	w2, #0xff
   1bb28:	b.ls	1bb3c <lzma_mode_is_supported@@XZ_5.0+0x6744>  // b.plast
   1bb2c:	ldp	x19, x20, [sp, #16]
   1bb30:	ldp	x21, x22, [sp, #32]
   1bb34:	ldp	x29, x30, [sp], #48
   1bb38:	ret
   1bb3c:	mov	w1, w1
   1bb40:	str	x1, [x19, #72]
   1bb44:	strb	wzr, [x19, #80]
   1bb48:	add	x0, x19, #0x51
   1bb4c:	mov	x2, #0x100                 	// #256
   1bb50:	mov	w1, #0x0                   	// #0
   1bb54:	bl	3260 <memset@plt>
   1bb58:	add	x2, x21, #0x18
   1bb5c:	mov	x1, x22
   1bb60:	mov	x0, x19
   1bb64:	ldp	x19, x20, [sp, #16]
   1bb68:	ldp	x21, x22, [sp, #32]
   1bb6c:	ldp	x29, x30, [sp], #48
   1bb70:	b	3860 <lzma_version_string@@XZ_5.0+0x148>
   1bb74:	mov	w0, #0x8                   	// #8
   1bb78:	ldp	x19, x20, [sp, #16]
   1bb7c:	ldp	x21, x22, [sp, #32]
   1bb80:	ldp	x29, x30, [sp], #48
   1bb84:	ret
   1bb88:	mov	x20, x0
   1bb8c:	mov	x0, #0x158                 	// #344
   1bb90:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1bb94:	mov	x19, x0
   1bb98:	cbz	x0, 1bbd0 <lzma_mode_is_supported@@XZ_5.0+0x67d8>
   1bb9c:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
   1bba0:	str	xzr, [x19]
   1bba4:	movi	v0.4s, #0x0
   1bba8:	str	x19, [x20]
   1bbac:	ldr	q1, [x0, #336]
   1bbb0:	adrp	x0, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1bbb4:	add	x0, x0, #0xab8
   1bbb8:	str	x0, [x20, #32]
   1bbbc:	stur	q0, [x19, #24]
   1bbc0:	stur	q1, [x19, #8]
   1bbc4:	stur	q0, [x19, #40]
   1bbc8:	stur	q0, [x19, #56]
   1bbcc:	b	1bb08 <lzma_mode_is_supported@@XZ_5.0+0x6710>
   1bbd0:	mov	w0, #0x5                   	// #5
   1bbd4:	b	1bb2c <lzma_mode_is_supported@@XZ_5.0+0x6734>
   1bbd8:	mov	x1, x0
   1bbdc:	cbz	x0, 1bc04 <lzma_mode_is_supported@@XZ_5.0+0x680c>
   1bbe0:	ldr	w2, [x1]
   1bbe4:	mov	x0, #0xffffffffffffffff    	// #-1
   1bbe8:	cbnz	w2, 1bc00 <lzma_mode_is_supported@@XZ_5.0+0x6808>
   1bbec:	ldr	w1, [x1, #4]
   1bbf0:	mov	x2, #0x158                 	// #344
   1bbf4:	sub	w1, w1, #0x1
   1bbf8:	cmp	w1, #0xff
   1bbfc:	csel	x0, x0, x2, hi  // hi = pmore
   1bc00:	ret
   1bc04:	mov	x0, #0xffffffffffffffff    	// #-1
   1bc08:	ret
   1bc0c:	nop
   1bc10:	sub	sp, sp, #0x40
   1bc14:	stp	x29, x30, [sp, #16]
   1bc18:	add	x29, sp, #0x10
   1bc1c:	ldr	x13, [x0, #24]
   1bc20:	stp	x19, x20, [sp, #32]
   1bc24:	ldr	w12, [sp, #64]
   1bc28:	stp	x21, x22, [sp, #48]
   1bc2c:	mov	x19, x0
   1bc30:	mov	x22, x6
   1bc34:	mov	x20, x5
   1bc38:	ldr	x21, [x6]
   1bc3c:	cbz	x13, 1bcb8 <lzma_mode_is_supported@@XZ_5.0+0x68c0>
   1bc40:	ldr	x0, [x0]
   1bc44:	str	w12, [sp]
   1bc48:	blr	x13
   1bc4c:	ldr	x1, [x22]
   1bc50:	ldr	x6, [x19, #72]
   1bc54:	subs	x8, x1, x21
   1bc58:	b.eq	1bca4 <lzma_mode_is_supported@@XZ_5.0+0x68ac>  // b.none
   1bc5c:	add	x5, x20, x21
   1bc60:	ldrb	w9, [x19, #80]
   1bc64:	mov	x1, x5
   1bc68:	add	x5, x8, x5
   1bc6c:	add	w7, w9, w1
   1bc70:	sub	w3, w7, w1
   1bc74:	ldrb	w2, [x1]
   1bc78:	add	x4, x6, w3, uxtb
   1bc7c:	add	x3, x19, w3, uxtb
   1bc80:	add	x4, x19, w4, uxtb
   1bc84:	ldrb	w4, [x4, #81]
   1bc88:	strb	w2, [x3, #81]
   1bc8c:	sub	w2, w2, w4
   1bc90:	strb	w2, [x1], #1
   1bc94:	cmp	x5, x1
   1bc98:	b.ne	1bc70 <lzma_mode_is_supported@@XZ_5.0+0x6878>  // b.any
   1bc9c:	sub	w1, w9, w8
   1bca0:	strb	w1, [x19, #80]
   1bca4:	ldp	x29, x30, [sp, #16]
   1bca8:	ldp	x19, x20, [sp, #32]
   1bcac:	ldp	x21, x22, [sp, #48]
   1bcb0:	add	sp, sp, #0x40
   1bcb4:	ret
   1bcb8:	ldr	x0, [x3]
   1bcbc:	sub	x7, x7, x21
   1bcc0:	mov	x11, x4
   1bcc4:	mov	x10, x3
   1bcc8:	sub	x9, x4, x0
   1bccc:	cmp	x9, x7
   1bcd0:	csel	x9, x9, x7, ls  // ls = plast
   1bcd4:	ldr	x4, [x19, #72]
   1bcd8:	cbz	x9, 1bd30 <lzma_mode_is_supported@@XZ_5.0+0x6938>
   1bcdc:	ldrb	w3, [x19, #80]
   1bce0:	add	x5, x5, x21
   1bce4:	add	x8, x2, x0
   1bce8:	mov	x0, #0x0                   	// #0
   1bcec:	nop
   1bcf0:	sub	w2, w3, w0
   1bcf4:	ldrb	w1, [x8, x0]
   1bcf8:	add	x7, x4, w2, uxtb
   1bcfc:	add	x2, x19, w2, uxtb
   1bd00:	add	x7, x19, w7, uxtb
   1bd04:	ldrb	w6, [x7, #81]
   1bd08:	strb	w1, [x2, #81]
   1bd0c:	sub	w1, w1, w6
   1bd10:	strb	w1, [x5, x0]
   1bd14:	add	x0, x0, #0x1
   1bd18:	cmp	x9, x0
   1bd1c:	b.ne	1bcf0 <lzma_mode_is_supported@@XZ_5.0+0x68f8>  // b.any
   1bd20:	sub	w3, w3, w9
   1bd24:	strb	w3, [x19, #80]
   1bd28:	ldr	x0, [x10]
   1bd2c:	ldr	x21, [x22]
   1bd30:	add	x8, x9, x0
   1bd34:	cmp	w12, #0x0
   1bd38:	add	x5, x9, x21
   1bd3c:	ccmp	x8, x11, #0x0, ne  // ne = any
   1bd40:	str	x5, [x22]
   1bd44:	cset	w0, eq  // eq = none
   1bd48:	str	x8, [x10]
   1bd4c:	ldp	x29, x30, [sp, #16]
   1bd50:	ldp	x19, x20, [sp, #32]
   1bd54:	ldp	x21, x22, [sp, #48]
   1bd58:	add	sp, sp, #0x40
   1bd5c:	ret
   1bd60:	add	x2, x3, #0x10
   1bd64:	b	3930 <lzma_version_string@@XZ_5.0+0x218>
   1bd68:	adrp	x4, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1bd6c:	add	x5, x4, #0xc10
   1bd70:	adrp	x4, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1bd74:	add	x4, x4, #0xd60
   1bd78:	str	x5, [x0, #24]
   1bd7c:	str	x4, [x0, #64]
   1bd80:	b	1bae8 <lzma_mode_is_supported@@XZ_5.0+0x66f0>
   1bd84:	nop
   1bd88:	stp	x29, x30, [sp, #-32]!
   1bd8c:	mov	x29, sp
   1bd90:	stp	x19, x20, [sp, #16]
   1bd94:	mov	x19, x1
   1bd98:	mov	x20, x0
   1bd9c:	bl	1bbd8 <lzma_mode_is_supported@@XZ_5.0+0x67e0>
   1bda0:	cmn	x0, #0x1
   1bda4:	b.eq	1bdc4 <lzma_mode_is_supported@@XZ_5.0+0x69cc>  // b.none
   1bda8:	ldr	w1, [x20, #4]
   1bdac:	mov	w0, #0x0                   	// #0
   1bdb0:	sub	w1, w1, #0x1
   1bdb4:	strb	w1, [x19]
   1bdb8:	ldp	x19, x20, [sp, #16]
   1bdbc:	ldp	x29, x30, [sp], #32
   1bdc0:	ret
   1bdc4:	mov	w0, #0xb                   	// #11
   1bdc8:	ldp	x19, x20, [sp, #16]
   1bdcc:	ldp	x29, x30, [sp], #32
   1bdd0:	ret
   1bdd4:	nop
   1bdd8:	sub	sp, sp, #0x40
   1bddc:	stp	x29, x30, [sp, #16]
   1bde0:	add	x29, sp, #0x10
   1bde4:	stp	x19, x20, [sp, #32]
   1bde8:	mov	x19, x0
   1bdec:	ldr	w0, [sp, #64]
   1bdf0:	str	w0, [sp]
   1bdf4:	mov	x20, x5
   1bdf8:	stp	x21, x22, [sp, #48]
   1bdfc:	mov	x21, x6
   1be00:	ldr	x0, [x19]
   1be04:	ldr	x8, [x19, #24]
   1be08:	ldr	x22, [x6]
   1be0c:	blr	x8
   1be10:	ldr	x1, [x21]
   1be14:	ldr	x7, [x19, #72]
   1be18:	subs	x9, x1, x22
   1be1c:	b.eq	1be70 <lzma_mode_is_supported@@XZ_5.0+0x6a78>  // b.none
   1be20:	add	x6, x20, x22
   1be24:	ldrb	w10, [x19, #80]
   1be28:	mov	x2, x6
   1be2c:	add	x6, x9, x6
   1be30:	add	w8, w10, w2
   1be34:	nop
   1be38:	sub	w3, w8, w2
   1be3c:	ldrb	w5, [x2]
   1be40:	add	x4, x7, w3, uxtb
   1be44:	add	x3, x19, w3, uxtb
   1be48:	add	x4, x19, w4, uxtb
   1be4c:	ldrb	w1, [x4, #81]
   1be50:	add	w1, w1, w5
   1be54:	and	w1, w1, #0xff
   1be58:	strb	w1, [x2], #1
   1be5c:	strb	w1, [x3, #81]
   1be60:	cmp	x6, x2
   1be64:	b.ne	1be38 <lzma_mode_is_supported@@XZ_5.0+0x6a40>  // b.any
   1be68:	sub	w1, w10, w9
   1be6c:	strb	w1, [x19, #80]
   1be70:	ldp	x29, x30, [sp, #16]
   1be74:	ldp	x19, x20, [sp, #32]
   1be78:	ldp	x21, x22, [sp, #48]
   1be7c:	add	sp, sp, #0x40
   1be80:	ret
   1be84:	nop
   1be88:	adrp	x3, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1be8c:	add	x3, x3, #0xdd8
   1be90:	str	x3, [x0, #24]
   1be94:	b	1bae8 <lzma_mode_is_supported@@XZ_5.0+0x66f0>
   1be98:	cmp	x3, #0x1
   1be9c:	b.eq	1bea8 <lzma_mode_is_supported@@XZ_5.0+0x6ab0>  // b.none
   1bea0:	mov	w0, #0x8                   	// #8
   1bea4:	ret
   1bea8:	stp	x29, x30, [sp, #-32]!
   1beac:	mov	x29, sp
   1beb0:	stp	x19, x20, [sp, #16]
   1beb4:	mov	x19, x0
   1beb8:	mov	x20, x2
   1bebc:	mov	x0, #0x28                  	// #40
   1bec0:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1bec4:	mov	x1, x0
   1bec8:	cbz	x0, 1beec <lzma_mode_is_supported@@XZ_5.0+0x6af4>
   1becc:	ldrb	w2, [x20]
   1bed0:	mov	w0, #0x0                   	// #0
   1bed4:	str	x1, [x19]
   1bed8:	add	w2, w2, #0x1
   1bedc:	stp	wzr, w2, [x1]
   1bee0:	ldp	x19, x20, [sp, #16]
   1bee4:	ldp	x29, x30, [sp], #32
   1bee8:	ret
   1beec:	mov	w0, #0x5                   	// #5
   1bef0:	b	1bee0 <lzma_mode_is_supported@@XZ_5.0+0x6ae8>
   1bef4:	nop
   1bef8:	add	x2, x3, #0x10
   1befc:	b	3930 <lzma_version_string@@XZ_5.0+0x218>
   1bf00:	stp	x29, x30, [sp, #-32]!
   1bf04:	mov	x29, sp
   1bf08:	stp	x19, x20, [sp, #16]
   1bf0c:	mov	x19, x0
   1bf10:	mov	x20, x1
   1bf14:	bl	3978 <lzma_version_string@@XZ_5.0+0x260>
   1bf18:	ldr	x0, [x19, #88]
   1bf1c:	mov	x1, x20
   1bf20:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1bf24:	mov	x1, x20
   1bf28:	mov	x0, x19
   1bf2c:	ldp	x19, x20, [sp, #16]
   1bf30:	ldp	x29, x30, [sp], #32
   1bf34:	b	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1bf38:	sub	sp, sp, #0x80
   1bf3c:	stp	x29, x30, [sp, #16]
   1bf40:	add	x29, sp, #0x10
   1bf44:	stp	x19, x20, [sp, #32]
   1bf48:	mov	x19, x0
   1bf4c:	ldr	w0, [sp, #128]
   1bf50:	cmp	w0, #0x1
   1bf54:	b.eq	1c0fc <lzma_mode_is_supported@@XZ_5.0+0x6d04>  // b.none
   1bf58:	stp	x23, x24, [sp, #64]
   1bf5c:	mov	x24, x2
   1bf60:	mov	x23, x4
   1bf64:	stp	x25, x26, [sp, #80]
   1bf68:	mov	x25, x1
   1bf6c:	mov	x20, x6
   1bf70:	ldp	x1, x2, [x19, #112]
   1bf74:	stp	x21, x22, [sp, #48]
   1bf78:	add	x26, x19, #0x88
   1bf7c:	stp	x27, x28, [sp, #96]
   1bf80:	mov	x22, x3
   1bf84:	mov	x27, x5
   1bf88:	mov	x28, x7
   1bf8c:	cmp	x1, x2
   1bf90:	b.cc	1c084 <lzma_mode_is_supported@@XZ_5.0+0x6c8c>  // b.lo, b.ul, b.last
   1bf94:	ldr	x10, [x20]
   1bf98:	str	xzr, [x19, #120]
   1bf9c:	ldr	x21, [x19, #128]
   1bfa0:	sub	x0, x28, x10
   1bfa4:	subs	x21, x21, x1
   1bfa8:	ccmp	x0, x21, #0x2, ne  // ne = any
   1bfac:	b.hi	1bffc <lzma_mode_is_supported@@XZ_5.0+0x6c04>  // b.pmore
   1bfb0:	cbnz	x1, 1c0e0 <lzma_mode_is_supported@@XZ_5.0+0x6ce8>
   1bfb4:	ldr	x10, [x19, #24]
   1bfb8:	add	x6, x19, #0x80
   1bfbc:	ldr	x7, [x19, #104]
   1bfc0:	cbz	x10, 1c248 <lzma_mode_is_supported@@XZ_5.0+0x6e50>
   1bfc4:	ldr	x0, [x19]
   1bfc8:	mov	x4, x23
   1bfcc:	ldr	w1, [sp, #128]
   1bfd0:	mov	x3, x22
   1bfd4:	str	w1, [sp]
   1bfd8:	mov	x2, x24
   1bfdc:	mov	x5, x26
   1bfe0:	mov	x1, x25
   1bfe4:	blr	x10
   1bfe8:	cmp	w0, #0x1
   1bfec:	b.eq	1c190 <lzma_mode_is_supported@@XZ_5.0+0x6d98>  // b.none
   1bff0:	cbnz	w0, 1c064 <lzma_mode_is_supported@@XZ_5.0+0x6c6c>
   1bff4:	ldrb	w2, [x19, #73]
   1bff8:	b	1c198 <lzma_mode_is_supported@@XZ_5.0+0x6da0>
   1bffc:	add	x0, x27, x10
   1c000:	mov	x2, x21
   1c004:	add	x1, x26, x1
   1c008:	stp	x10, x0, [sp, #112]
   1c00c:	bl	30c0 <memcpy@plt>
   1c010:	ldr	x10, [sp, #112]
   1c014:	ldr	x11, [x19, #24]
   1c018:	add	x21, x10, x21
   1c01c:	str	x21, [x20]
   1c020:	cbz	x11, 1c1f4 <lzma_mode_is_supported@@XZ_5.0+0x6dfc>
   1c024:	ldr	x0, [x19]
   1c028:	mov	x7, x28
   1c02c:	ldr	w1, [sp, #128]
   1c030:	mov	x6, x20
   1c034:	str	w1, [sp]
   1c038:	mov	x5, x27
   1c03c:	mov	x4, x23
   1c040:	mov	x3, x22
   1c044:	mov	x2, x24
   1c048:	mov	x1, x25
   1c04c:	str	x10, [sp, #112]
   1c050:	blr	x11
   1c054:	cmp	w0, #0x1
   1c058:	ldr	x10, [sp, #112]
   1c05c:	b.eq	1c110 <lzma_mode_is_supported@@XZ_5.0+0x6d18>  // b.none
   1c060:	cbz	w0, 1c2bc <lzma_mode_is_supported@@XZ_5.0+0x6ec4>
   1c064:	ldp	x29, x30, [sp, #16]
   1c068:	ldp	x19, x20, [sp, #32]
   1c06c:	ldp	x21, x22, [sp, #48]
   1c070:	ldp	x23, x24, [sp, #64]
   1c074:	ldp	x25, x26, [sp, #80]
   1c078:	ldp	x27, x28, [sp, #96]
   1c07c:	add	sp, sp, #0x80
   1c080:	ret
   1c084:	add	x1, x19, #0x70
   1c088:	mov	x5, x7
   1c08c:	mov	x4, x6
   1c090:	mov	x3, x27
   1c094:	mov	x0, x26
   1c098:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1c09c:	ldp	x1, x0, [x19, #112]
   1c0a0:	cmp	x1, x0
   1c0a4:	b.cc	1c0bc <lzma_mode_is_supported@@XZ_5.0+0x6cc4>  // b.lo, b.ul, b.last
   1c0a8:	ldrb	w2, [x19, #72]
   1c0ac:	mov	w0, #0x1                   	// #1
   1c0b0:	cbz	w2, 1bf94 <lzma_mode_is_supported@@XZ_5.0+0x6b9c>
   1c0b4:	b	1c064 <lzma_mode_is_supported@@XZ_5.0+0x6c6c>
   1c0b8:	cbnz	x2, 1c298 <lzma_mode_is_supported@@XZ_5.0+0x6ea0>
   1c0bc:	mov	w0, #0x0                   	// #0
   1c0c0:	ldp	x29, x30, [sp, #16]
   1c0c4:	ldp	x19, x20, [sp, #32]
   1c0c8:	ldp	x21, x22, [sp, #48]
   1c0cc:	ldp	x23, x24, [sp, #64]
   1c0d0:	ldp	x25, x26, [sp, #80]
   1c0d4:	ldp	x27, x28, [sp, #96]
   1c0d8:	add	sp, sp, #0x80
   1c0dc:	ret
   1c0e0:	add	x1, x26, x1
   1c0e4:	mov	x2, x21
   1c0e8:	mov	x0, x26
   1c0ec:	bl	30e0 <memmove@plt>
   1c0f0:	str	xzr, [x19, #112]
   1c0f4:	str	x21, [x19, #128]
   1c0f8:	b	1bfb4 <lzma_mode_is_supported@@XZ_5.0+0x6bbc>
   1c0fc:	mov	w0, #0x8                   	// #8
   1c100:	ldp	x29, x30, [sp, #16]
   1c104:	ldp	x19, x20, [sp, #32]
   1c108:	add	sp, sp, #0x80
   1c10c:	ret
   1c110:	ldrb	w2, [x19, #73]
   1c114:	strb	w0, [x19, #72]
   1c118:	ldp	x6, x0, [x19, #80]
   1c11c:	ldr	w1, [x19, #96]
   1c120:	ldr	x5, [x20]
   1c124:	ldr	x3, [sp, #120]
   1c128:	sub	x21, x5, x10
   1c12c:	mov	x4, x21
   1c130:	stp	x5, x10, [sp, #112]
   1c134:	blr	x6
   1c138:	sub	x2, x21, x0
   1c13c:	ldr	w1, [x19, #96]
   1c140:	ldrb	w3, [x19, #72]
   1c144:	add	w1, w1, w0
   1c148:	str	w1, [x19, #96]
   1c14c:	str	xzr, [x19, #112]
   1c150:	str	x2, [x19, #128]
   1c154:	ldp	x5, x10, [sp, #112]
   1c158:	cbz	w3, 1c0b8 <lzma_mode_is_supported@@XZ_5.0+0x6cc0>
   1c15c:	str	xzr, [x19, #128]
   1c160:	ldr	x1, [x19, #112]
   1c164:	ldr	x0, [x19, #128]
   1c168:	ldp	x29, x30, [sp, #16]
   1c16c:	cmp	x1, x0
   1c170:	cset	w0, eq  // eq = none
   1c174:	ldp	x19, x20, [sp, #32]
   1c178:	ldp	x21, x22, [sp, #48]
   1c17c:	ldp	x23, x24, [sp, #64]
   1c180:	ldp	x25, x26, [sp, #80]
   1c184:	ldp	x27, x28, [sp, #96]
   1c188:	add	sp, sp, #0x80
   1c18c:	ret
   1c190:	ldrb	w2, [x19, #73]
   1c194:	strb	w0, [x19, #72]
   1c198:	ldp	x5, x0, [x19, #80]
   1c19c:	mov	x3, x26
   1c1a0:	ldr	w1, [x19, #96]
   1c1a4:	ldr	x4, [x19, #128]
   1c1a8:	blr	x5
   1c1ac:	mov	x2, x0
   1c1b0:	ldrb	w1, [x19, #72]
   1c1b4:	ldr	w0, [x19, #96]
   1c1b8:	str	x2, [x19, #120]
   1c1bc:	add	w0, w0, w2
   1c1c0:	str	w0, [x19, #96]
   1c1c4:	cbz	w1, 1c1d0 <lzma_mode_is_supported@@XZ_5.0+0x6dd8>
   1c1c8:	ldr	x2, [x19, #128]
   1c1cc:	str	x2, [x19, #120]
   1c1d0:	mov	x5, x28
   1c1d4:	mov	x4, x20
   1c1d8:	mov	x3, x27
   1c1dc:	mov	x0, x26
   1c1e0:	add	x1, x19, #0x70
   1c1e4:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1c1e8:	ldrb	w0, [x19, #72]
   1c1ec:	cbz	w0, 1c0bc <lzma_mode_is_supported@@XZ_5.0+0x6cc4>
   1c1f0:	b	1c160 <lzma_mode_is_supported@@XZ_5.0+0x6d68>
   1c1f4:	mov	x2, x23
   1c1f8:	mov	x5, x28
   1c1fc:	mov	x4, x20
   1c200:	mov	x3, x27
   1c204:	mov	x1, x22
   1c208:	mov	x0, x24
   1c20c:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1c210:	ldr	w0, [sp, #128]
   1c214:	ldrb	w2, [x19, #73]
   1c218:	cmp	w0, #0x3
   1c21c:	cset	w0, eq  // eq = none
   1c220:	ands	w0, w2, w0
   1c224:	ldr	x10, [sp, #112]
   1c228:	b.eq	1c118 <lzma_mode_is_supported@@XZ_5.0+0x6d20>  // b.none
   1c22c:	ldr	x1, [x22]
   1c230:	mov	w2, w0
   1c234:	cmp	x23, x1
   1c238:	b.ne	1c118 <lzma_mode_is_supported@@XZ_5.0+0x6d20>  // b.any
   1c23c:	mov	w0, #0x1                   	// #1
   1c240:	strb	w0, [x19, #72]
   1c244:	b	1c118 <lzma_mode_is_supported@@XZ_5.0+0x6d20>
   1c248:	mov	x2, x23
   1c24c:	mov	x5, x7
   1c250:	mov	x4, x6
   1c254:	mov	x0, x24
   1c258:	mov	x3, x26
   1c25c:	mov	x1, x22
   1c260:	bl	37f0 <lzma_version_string@@XZ_5.0+0xd8>
   1c264:	ldr	w0, [sp, #128]
   1c268:	ldrb	w2, [x19, #73]
   1c26c:	cmp	w0, #0x3
   1c270:	cset	w0, eq  // eq = none
   1c274:	ands	w0, w2, w0
   1c278:	b.eq	1c198 <lzma_mode_is_supported@@XZ_5.0+0x6da0>  // b.none
   1c27c:	ldr	x1, [x22]
   1c280:	mov	w2, w0
   1c284:	cmp	x23, x1
   1c288:	b.ne	1c198 <lzma_mode_is_supported@@XZ_5.0+0x6da0>  // b.any
   1c28c:	mov	w0, #0x1                   	// #1
   1c290:	strb	w0, [x19, #72]
   1c294:	b	1c198 <lzma_mode_is_supported@@XZ_5.0+0x6da0>
   1c298:	ldr	x1, [x20]
   1c29c:	sub	x3, x0, x5
   1c2a0:	mov	x0, x26
   1c2a4:	add	x1, x10, x1
   1c2a8:	add	x1, x1, x3
   1c2ac:	str	x1, [x20]
   1c2b0:	add	x1, x27, x1
   1c2b4:	bl	30c0 <memcpy@plt>
   1c2b8:	b	1bfb4 <lzma_mode_is_supported@@XZ_5.0+0x6bbc>
   1c2bc:	ldrb	w2, [x19, #73]
   1c2c0:	b	1c118 <lzma_mode_is_supported@@XZ_5.0+0x6d20>
   1c2c4:	nop
   1c2c8:	stp	x29, x30, [sp, #-96]!
   1c2cc:	mov	x29, sp
   1c2d0:	stp	x19, x20, [sp, #16]
   1c2d4:	ldr	x19, [x0]
   1c2d8:	stp	x23, x24, [sp, #48]
   1c2dc:	mov	w24, w6
   1c2e0:	stp	x25, x26, [sp, #64]
   1c2e4:	mov	x23, x1
   1c2e8:	mov	x25, x2
   1c2ec:	str	x27, [sp, #80]
   1c2f0:	and	w27, w7, #0xff
   1c2f4:	cbz	x19, 1c350 <lzma_mode_is_supported@@XZ_5.0+0x6f58>
   1c2f8:	ldr	x0, [x25, #16]
   1c2fc:	cbz	x0, 1c348 <lzma_mode_is_supported@@XZ_5.0+0x6f50>
   1c300:	ldr	w0, [x0]
   1c304:	sub	w6, w24, #0x1
   1c308:	str	w0, [x19, #96]
   1c30c:	tst	w6, w0
   1c310:	b.ne	1c3d0 <lzma_mode_is_supported@@XZ_5.0+0x6fd8>  // b.any
   1c314:	add	x2, x25, #0x18
   1c318:	mov	x1, x23
   1c31c:	strb	wzr, [x19, #72]
   1c320:	mov	x0, x19
   1c324:	strb	w27, [x19, #73]
   1c328:	stp	xzr, xzr, [x19, #112]
   1c32c:	ldp	x23, x24, [sp, #48]
   1c330:	ldp	x25, x26, [sp, #64]
   1c334:	ldr	x27, [sp, #80]
   1c338:	str	xzr, [x19, #128]
   1c33c:	ldp	x19, x20, [sp, #16]
   1c340:	ldp	x29, x30, [sp], #96
   1c344:	b	3860 <lzma_version_string@@XZ_5.0+0x148>
   1c348:	str	wzr, [x19, #96]
   1c34c:	b	1c314 <lzma_mode_is_supported@@XZ_5.0+0x6f1c>
   1c350:	add	x5, x5, #0x44
   1c354:	mov	x26, x0
   1c358:	stp	x21, x22, [sp, #32]
   1c35c:	mov	x22, x3
   1c360:	lsl	x20, x5, #1
   1c364:	mov	x21, x4
   1c368:	mov	x0, x20
   1c36c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1c370:	mov	x19, x0
   1c374:	cbz	x0, 1c408 <lzma_mode_is_supported@@XZ_5.0+0x7010>
   1c378:	sub	x20, x20, #0x88
   1c37c:	adrp	x2, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1c380:	adrp	x1, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1c384:	add	x2, x2, #0xf38
   1c388:	add	x1, x1, #0xf00
   1c38c:	adrp	x0, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x5c08>
   1c390:	mov	x3, #0xffffffffffffffff    	// #-1
   1c394:	add	x0, x0, #0xef8
   1c398:	stp	xzr, x3, [x19]
   1c39c:	str	x19, [x26]
   1c3a0:	stp	xzr, xzr, [x19, #16]
   1c3a4:	stp	x2, x1, [x26, #24]
   1c3a8:	stp	xzr, xzr, [x19, #32]
   1c3ac:	stp	xzr, xzr, [x19, #48]
   1c3b0:	str	xzr, [x19, #64]
   1c3b4:	str	x0, [x26, #64]
   1c3b8:	str	x22, [x19, #80]
   1c3bc:	str	x20, [x19, #104]
   1c3c0:	cbnz	x21, 1c3ec <lzma_mode_is_supported@@XZ_5.0+0x6ff4>
   1c3c4:	ldp	x21, x22, [sp, #32]
   1c3c8:	str	xzr, [x19, #88]
   1c3cc:	b	1c2f8 <lzma_mode_is_supported@@XZ_5.0+0x6f00>
   1c3d0:	mov	w0, #0x8                   	// #8
   1c3d4:	ldp	x19, x20, [sp, #16]
   1c3d8:	ldp	x23, x24, [sp, #48]
   1c3dc:	ldp	x25, x26, [sp, #64]
   1c3e0:	ldr	x27, [sp, #80]
   1c3e4:	ldp	x29, x30, [sp], #96
   1c3e8:	ret
   1c3ec:	mov	x0, x21
   1c3f0:	mov	x1, x23
   1c3f4:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1c3f8:	str	x0, [x19, #88]
   1c3fc:	cbz	x0, 1c408 <lzma_mode_is_supported@@XZ_5.0+0x7010>
   1c400:	ldp	x21, x22, [sp, #32]
   1c404:	b	1c2f8 <lzma_mode_is_supported@@XZ_5.0+0x6f00>
   1c408:	mov	w0, #0x5                   	// #5
   1c40c:	ldp	x21, x22, [sp, #32]
   1c410:	b	1c3d4 <lzma_mode_is_supported@@XZ_5.0+0x6fdc>
   1c414:	nop
   1c418:	mov	x3, x0
   1c41c:	mov	w2, #0x0                   	// #0
   1c420:	cbz	x1, 1c434 <lzma_mode_is_supported@@XZ_5.0+0x703c>
   1c424:	ldr	w2, [x1]
   1c428:	mov	w0, #0x4                   	// #4
   1c42c:	cmp	w2, #0x0
   1c430:	csel	w2, w2, w0, eq  // eq = none
   1c434:	mov	w0, #0x0                   	// #0
   1c438:	str	w2, [x3]
   1c43c:	ret
   1c440:	cbz	x0, 1c450 <lzma_mode_is_supported@@XZ_5.0+0x7058>
   1c444:	ldr	w0, [x0]
   1c448:	cbz	w0, 1c450 <lzma_mode_is_supported@@XZ_5.0+0x7058>
   1c44c:	str	w0, [x1]
   1c450:	mov	w0, #0x0                   	// #0
   1c454:	ret
   1c458:	stp	x29, x30, [sp, #-48]!
   1c45c:	mov	x29, sp
   1c460:	stp	x21, x22, [sp, #32]
   1c464:	mov	w21, #0x0                   	// #0
   1c468:	cbz	x3, 1c478 <lzma_mode_is_supported@@XZ_5.0+0x7080>
   1c46c:	cmp	x3, #0x4
   1c470:	mov	w21, #0x8                   	// #8
   1c474:	b.eq	1c488 <lzma_mode_is_supported@@XZ_5.0+0x7090>  // b.none
   1c478:	mov	w0, w21
   1c47c:	ldp	x21, x22, [sp, #32]
   1c480:	ldp	x29, x30, [sp], #48
   1c484:	ret
   1c488:	mov	x22, x1
   1c48c:	stp	x19, x20, [sp, #16]
   1c490:	mov	x20, x0
   1c494:	mov	x19, x2
   1c498:	mov	x0, x3
   1c49c:	bl	3728 <lzma_version_string@@XZ_5.0+0x10>
   1c4a0:	cbz	x0, 1c4e8 <lzma_mode_is_supported@@XZ_5.0+0x70f0>
   1c4a4:	ldr	w21, [x19]
   1c4a8:	str	w21, [x0]
   1c4ac:	cbz	w21, 1c4cc <lzma_mode_is_supported@@XZ_5.0+0x70d4>
   1c4b0:	str	x0, [x20]
   1c4b4:	mov	w21, #0x0                   	// #0
   1c4b8:	mov	w0, w21
   1c4bc:	ldp	x19, x20, [sp, #16]
   1c4c0:	ldp	x21, x22, [sp, #32]
   1c4c4:	ldp	x29, x30, [sp], #48
   1c4c8:	ret
   1c4cc:	mov	x1, x22
   1c4d0:	bl	37c8 <lzma_version_string@@XZ_5.0+0xb0>
   1c4d4:	mov	w0, w21
   1c4d8:	ldp	x19, x20, [sp, #16]
   1c4dc:	ldp	x21, x22, [sp, #32]
   1c4e0:	ldp	x29, x30, [sp], #48
   1c4e4:	ret
   1c4e8:	mov	w21, #0x5                   	// #5
   1c4ec:	ldp	x19, x20, [sp, #16]
   1c4f0:	b	1c478 <lzma_mode_is_supported@@XZ_5.0+0x7080>
   1c4f4:	nop
   1c4f8:	cmp	x4, #0x4
   1c4fc:	b.ls	1c658 <lzma_mode_is_supported@@XZ_5.0+0x7260>  // b.plast
   1c500:	mov	x10, x0
   1c504:	adrp	x12, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   1c508:	add	x12, x12, #0x670
   1c50c:	sub	w0, w1, #0x5
   1c510:	and	w2, w2, #0xff
   1c514:	sub	x8, x4, #0x5
   1c518:	ldp	w5, w6, [x10]
   1c51c:	add	x17, x12, #0x10
   1c520:	mov	w16, #0x3                   	// #3
   1c524:	mov	w14, #0x4                   	// #4
   1c528:	sub	w7, w1, w6
   1c52c:	mov	w13, #0x1                   	// #1
   1c530:	cmp	w7, #0x5
   1c534:	mov	w18, #0xfffffffb            	// #-5
   1c538:	csel	w6, w0, w6, hi  // hi = pmore
   1c53c:	mov	w15, #0x11                  	// #17
   1c540:	mov	w11, #0xee                  	// #238
   1c544:	mov	x0, #0x0                   	// #0
   1c548:	ldrb	w4, [x3, x0]
   1c54c:	add	x7, x0, #0x1
   1c550:	add	w4, w4, #0x18
   1c554:	and	w4, w4, #0xff
   1c558:	cmp	w4, #0x1
   1c55c:	b.hi	1c63c <lzma_mode_is_supported@@XZ_5.0+0x7244>  // b.pmore
   1c560:	stp	x29, x30, [sp, #-64]!
   1c564:	mov	x29, sp
   1c568:	stp	x19, x20, [sp, #16]
   1c56c:	stp	x21, x22, [sp, #32]
   1c570:	add	x30, x0, #0x4
   1c574:	add	w9, w1, w0
   1c578:	sub	w4, w9, w6
   1c57c:	ldrb	w20, [x3, x30]
   1c580:	cmp	w4, #0x5
   1c584:	sub	w6, w20, #0x1
   1c588:	and	w6, w6, #0xff
   1c58c:	b.hi	1c62c <lzma_mode_is_supported@@XZ_5.0+0x7234>  // b.pmore
   1c590:	cbz	w4, 1c5bc <lzma_mode_is_supported@@XZ_5.0+0x71c4>
   1c594:	and	w5, w11, w5, lsl #1
   1c598:	cmp	w4, #0x1
   1c59c:	b.eq	1c5bc <lzma_mode_is_supported@@XZ_5.0+0x71c4>  // b.none
   1c5a0:	and	w5, w11, w5, lsl #1
   1c5a4:	cmp	w4, #0x2
   1c5a8:	b.eq	1c5bc <lzma_mode_is_supported@@XZ_5.0+0x71c4>  // b.none
   1c5ac:	cmp	w4, #0x3
   1c5b0:	and	w5, w11, w5, lsl #1
   1c5b4:	mov	w4, #0x0                   	// #0
   1c5b8:	csel	w5, w5, w4, eq  // eq = none
   1c5bc:	cmp	w6, #0xfd
   1c5c0:	b.ls	1c650 <lzma_mode_is_supported@@XZ_5.0+0x7258>  // b.plast
   1c5c4:	ubfx	x4, x5, #1, #3
   1c5c8:	cmp	w5, #0x1f
   1c5cc:	cset	w6, ls  // ls = plast
   1c5d0:	lsr	w21, w5, #1
   1c5d4:	ldrb	w4, [x12, w4, uxtw]
   1c5d8:	tst	w6, w4
   1c5dc:	b.ne	1c7b4 <lzma_mode_is_supported@@XZ_5.0+0x73bc>  // b.any
   1c5e0:	orr	w5, w5, w15
   1c5e4:	mov	x0, x7
   1c5e8:	mov	w6, w9
   1c5ec:	cmp	x8, x0
   1c5f0:	b.cc	1c618 <lzma_mode_is_supported@@XZ_5.0+0x7220>  // b.lo, b.ul, b.last
   1c5f4:	ldrb	w4, [x3, x0]
   1c5f8:	add	x7, x0, #0x1
   1c5fc:	add	w4, w4, #0x18
   1c600:	and	w4, w4, #0xff
   1c604:	cmp	w4, #0x1
   1c608:	b.ls	1c570 <lzma_mode_is_supported@@XZ_5.0+0x7178>  // b.plast
   1c60c:	mov	x0, x7
   1c610:	cmp	x8, x0
   1c614:	b.cs	1c5f4 <lzma_mode_is_supported@@XZ_5.0+0x71fc>  // b.hs, b.nlast
   1c618:	ldp	x19, x20, [sp, #16]
   1c61c:	ldp	x21, x22, [sp, #32]
   1c620:	stp	w5, w6, [x10]
   1c624:	ldp	x29, x30, [sp], #64
   1c628:	ret
   1c62c:	cmp	w6, #0xfd
   1c630:	b.hi	1c660 <lzma_mode_is_supported@@XZ_5.0+0x7268>  // b.pmore
   1c634:	mov	w5, #0x1                   	// #1
   1c638:	b	1c5e4 <lzma_mode_is_supported@@XZ_5.0+0x71ec>
   1c63c:	mov	x0, x7
   1c640:	cmp	x8, x7
   1c644:	b.cs	1c548 <lzma_mode_is_supported@@XZ_5.0+0x7150>  // b.hs, b.nlast
   1c648:	stp	w5, w6, [x10]
   1c64c:	ret
   1c650:	orr	w5, w5, #0x1
   1c654:	b	1c5e4 <lzma_mode_is_supported@@XZ_5.0+0x71ec>
   1c658:	mov	x0, #0x0                   	// #0
   1c65c:	ret
   1c660:	mov	w5, #0x0                   	// #0
   1c664:	mov	x21, #0x0                   	// #0
   1c668:	str	x23, [sp, #48]
   1c66c:	add	x19, x0, #0x3
   1c670:	add	x6, x0, #0x2
   1c674:	ldrb	w23, [x3, x7]
   1c678:	lsl	w20, w20, #24
   1c67c:	ldrb	w4, [x3, x19]
   1c680:	ldrb	w22, [x3, x6]
   1c684:	orr	w20, w20, w4, lsl #16
   1c688:	orr	w4, w23, w22, lsl #8
   1c68c:	orr	w4, w20, w4
   1c690:	cbnz	w2, 1c730 <lzma_mode_is_supported@@XZ_5.0+0x7338>
   1c694:	cbz	w5, 1c7a8 <lzma_mode_is_supported@@XZ_5.0+0x73b0>
   1c698:	ldr	w5, [x17, x21, lsl #2]
   1c69c:	sub	w23, w18, w9
   1c6a0:	add	w20, w4, w23
   1c6a4:	sub	w4, w16, w5
   1c6a8:	lsl	w4, w4, #3
   1c6ac:	lsr	w4, w20, w4
   1c6b0:	sub	w4, w4, #0x1
   1c6b4:	and	w4, w4, #0xff
   1c6b8:	cmp	w4, #0xfd
   1c6bc:	b.ls	1c700 <lzma_mode_is_supported@@XZ_5.0+0x7308>  // b.plast
   1c6c0:	sub	w21, w16, w5
   1c6c4:	mov	x22, x5
   1c6c8:	lsl	w21, w21, #3
   1c6cc:	nop
   1c6d0:	sub	w4, w14, w5
   1c6d4:	mov	w5, w22
   1c6d8:	lsl	w4, w4, #3
   1c6dc:	lsl	w4, w13, w4
   1c6e0:	sub	w4, w4, #0x1
   1c6e4:	eor	w4, w4, w20
   1c6e8:	add	w20, w4, w23
   1c6ec:	lsr	w4, w20, w21
   1c6f0:	sub	w4, w4, #0x1
   1c6f4:	and	w4, w4, #0xff
   1c6f8:	cmp	w4, #0xfd
   1c6fc:	b.hi	1c6d0 <lzma_mode_is_supported@@XZ_5.0+0x72d8>  // b.pmore
   1c700:	sbfx	x4, x20, #24, #1
   1c704:	strb	w4, [x3, x30]
   1c708:	lsr	w4, w20, #16
   1c70c:	strb	w4, [x3, x19]
   1c710:	lsr	w4, w20, #8
   1c714:	strb	w4, [x3, x6]
   1c718:	add	x0, x0, #0x5
   1c71c:	mov	w6, w9
   1c720:	mov	w5, #0x0                   	// #0
   1c724:	strb	w20, [x3, x7]
   1c728:	ldr	x23, [sp, #48]
   1c72c:	b	1c5ec <lzma_mode_is_supported@@XZ_5.0+0x71f4>
   1c730:	cbz	w5, 1c79c <lzma_mode_is_supported@@XZ_5.0+0x73a4>
   1c734:	ldr	w5, [x17, x21, lsl #2]
   1c738:	add	w23, w9, #0x5
   1c73c:	add	w20, w4, w23
   1c740:	sub	w4, w16, w5
   1c744:	lsl	w4, w4, #3
   1c748:	lsr	w4, w20, w4
   1c74c:	sub	w4, w4, #0x1
   1c750:	and	w4, w4, #0xff
   1c754:	cmp	w4, #0xfd
   1c758:	b.ls	1c700 <lzma_mode_is_supported@@XZ_5.0+0x7308>  // b.plast
   1c75c:	sub	w21, w16, w5
   1c760:	mov	x22, x5
   1c764:	lsl	w21, w21, #3
   1c768:	sub	w4, w14, w5
   1c76c:	mov	w5, w22
   1c770:	lsl	w4, w4, #3
   1c774:	lsl	w4, w13, w4
   1c778:	sub	w4, w4, #0x1
   1c77c:	eor	w4, w4, w20
   1c780:	add	w20, w4, w23
   1c784:	lsr	w4, w20, w21
   1c788:	sub	w4, w4, #0x1
   1c78c:	and	w4, w4, #0xff
   1c790:	cmp	w4, #0xfd
   1c794:	b.hi	1c768 <lzma_mode_is_supported@@XZ_5.0+0x7370>  // b.pmore
   1c798:	b	1c700 <lzma_mode_is_supported@@XZ_5.0+0x7308>
   1c79c:	add	w20, w9, #0x5
   1c7a0:	add	w20, w20, w4
   1c7a4:	b	1c700 <lzma_mode_is_supported@@XZ_5.0+0x7308>
   1c7a8:	sub	w20, w18, w9
   1c7ac:	add	w20, w20, w4
   1c7b0:	b	1c700 <lzma_mode_is_supported@@XZ_5.0+0x7308>
   1c7b4:	str	x23, [sp, #48]
   1c7b8:	b	1c66c <lzma_mode_is_supported@@XZ_5.0+0x7274>
   1c7bc:	nop
   1c7c0:	stp	x29, x30, [sp, #-32]!
   1c7c4:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1c7c8:	mov	w7, #0x1                   	// #1
   1c7cc:	mov	x29, sp
   1c7d0:	add	x3, x3, #0x4f8
   1c7d4:	mov	w6, #0x1                   	// #1
   1c7d8:	mov	x5, #0x5                   	// #5
   1c7dc:	mov	x4, #0x8                   	// #8
   1c7e0:	str	x19, [sp, #16]
   1c7e4:	mov	x19, x0
   1c7e8:	bl	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1c7ec:	cbnz	w0, 1c804 <lzma_mode_is_supported@@XZ_5.0+0x740c>
   1c7f0:	ldr	x1, [x19]
   1c7f4:	adrp	x2, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   1c7f8:	ldr	d0, [x2, #1632]
   1c7fc:	ldr	x1, [x1, #88]
   1c800:	str	d0, [x1]
   1c804:	ldr	x19, [sp, #16]
   1c808:	ldp	x29, x30, [sp], #32
   1c80c:	ret
   1c810:	stp	x29, x30, [sp, #-32]!
   1c814:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1c818:	mov	w7, #0x0                   	// #0
   1c81c:	mov	x29, sp
   1c820:	add	x3, x3, #0x4f8
   1c824:	mov	w6, #0x1                   	// #1
   1c828:	mov	x5, #0x5                   	// #5
   1c82c:	mov	x4, #0x8                   	// #8
   1c830:	str	x19, [sp, #16]
   1c834:	mov	x19, x0
   1c838:	bl	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1c83c:	cbnz	w0, 1c854 <lzma_mode_is_supported@@XZ_5.0+0x745c>
   1c840:	ldr	x1, [x19]
   1c844:	adrp	x2, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   1c848:	ldr	d0, [x2, #1632]
   1c84c:	ldr	x1, [x1, #88]
   1c850:	str	d0, [x1]
   1c854:	ldr	x19, [sp, #16]
   1c858:	ldp	x29, x30, [sp], #32
   1c85c:	ret
   1c860:	cmp	x4, #0x3
   1c864:	and	w2, w2, #0xff
   1c868:	b.ls	1c9a8 <lzma_mode_is_supported@@XZ_5.0+0x75b0>  // b.plast
   1c86c:	sub	w6, w1, #0x4
   1c870:	mov	x0, #0x4                   	// #4
   1c874:	mov	w9, #0x48                  	// #72
   1c878:	cbnz	w2, 1c990 <lzma_mode_is_supported@@XZ_5.0+0x7598>
   1c87c:	ldrb	w2, [x3]
   1c880:	add	x1, x0, #0x4
   1c884:	lsr	w5, w2, #2
   1c888:	cmp	w5, #0x12
   1c88c:	b.eq	1c8b4 <lzma_mode_is_supported@@XZ_5.0+0x74bc>  // b.none
   1c890:	add	x3, x3, #0x4
   1c894:	cmp	x4, x1
   1c898:	b.cc	1c91c <lzma_mode_is_supported@@XZ_5.0+0x7524>  // b.lo, b.ul, b.last
   1c89c:	ldrb	w2, [x3]
   1c8a0:	mov	x0, x1
   1c8a4:	add	x1, x0, #0x4
   1c8a8:	lsr	w5, w2, #2
   1c8ac:	cmp	w5, #0x12
   1c8b0:	b.ne	1c890 <lzma_mode_is_supported@@XZ_5.0+0x7498>  // b.any
   1c8b4:	ldrb	w7, [x3, #3]
   1c8b8:	and	w5, w7, #0x3
   1c8bc:	cmp	w5, #0x1
   1c8c0:	b.ne	1c890 <lzma_mode_is_supported@@XZ_5.0+0x7498>  // b.any
   1c8c4:	ldrb	w8, [x3, #1]
   1c8c8:	and	w7, w7, #0xfffffffc
   1c8cc:	ldrb	w5, [x3, #2]
   1c8d0:	ubfiz	w2, w2, #24, #2
   1c8d4:	orr	w2, w2, w7
   1c8d8:	add	w7, w6, w0
   1c8dc:	lsl	w8, w8, #16
   1c8e0:	add	x3, x3, #0x4
   1c8e4:	orr	w5, w8, w5, lsl #8
   1c8e8:	cmp	x4, x1
   1c8ec:	orr	w5, w5, w2
   1c8f0:	sub	w2, w5, w7
   1c8f4:	orr	w5, w2, #0x1
   1c8f8:	sturb	w5, [x3, #-1]
   1c8fc:	ubfx	x5, x2, #24, #2
   1c900:	lsr	w7, w2, #16
   1c904:	orr	w5, w5, w9
   1c908:	lsr	w2, w2, #8
   1c90c:	sturb	w5, [x3, #-4]
   1c910:	sturb	w7, [x3, #-3]
   1c914:	sturb	w2, [x3, #-2]
   1c918:	b.cs	1c89c <lzma_mode_is_supported@@XZ_5.0+0x74a4>  // b.hs, b.nlast
   1c91c:	ret
   1c920:	ldrb	w7, [x3, #3]
   1c924:	and	w5, w7, #0x3
   1c928:	cmp	w5, #0x1
   1c92c:	b.ne	1c980 <lzma_mode_is_supported@@XZ_5.0+0x7588>  // b.any
   1c930:	ldrb	w8, [x3, #2]
   1c934:	and	w7, w7, #0xfffffffc
   1c938:	ldrb	w5, [x3, #1]
   1c93c:	ubfiz	w2, w2, #24, #2
   1c940:	orr	w2, w2, w7
   1c944:	add	w7, w6, w0
   1c948:	lsl	w8, w8, #8
   1c94c:	orr	w5, w8, w5, lsl #16
   1c950:	orr	w5, w5, w2
   1c954:	add	w2, w5, w7
   1c958:	orr	w5, w2, #0x1
   1c95c:	strb	w5, [x3, #3]
   1c960:	ubfx	x5, x2, #24, #2
   1c964:	lsr	w7, w2, #16
   1c968:	orr	w5, w5, w9
   1c96c:	lsr	w2, w2, #8
   1c970:	strb	w5, [x3]
   1c974:	strb	w7, [x3, #1]
   1c978:	strb	w2, [x3, #2]
   1c97c:	nop
   1c980:	add	x3, x3, #0x4
   1c984:	cmp	x1, x4
   1c988:	b.hi	1c91c <lzma_mode_is_supported@@XZ_5.0+0x7524>  // b.pmore
   1c98c:	mov	x0, x1
   1c990:	ldrb	w2, [x3]
   1c994:	add	x1, x0, #0x4
   1c998:	lsr	w5, w2, #2
   1c99c:	cmp	w5, #0x12
   1c9a0:	b.ne	1c980 <lzma_mode_is_supported@@XZ_5.0+0x7588>  // b.any
   1c9a4:	b	1c920 <lzma_mode_is_supported@@XZ_5.0+0x7528>
   1c9a8:	mov	x0, #0x0                   	// #0
   1c9ac:	ret
   1c9b0:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1c9b4:	mov	w7, #0x1                   	// #1
   1c9b8:	add	x3, x3, #0x860
   1c9bc:	mov	w6, #0x4                   	// #4
   1c9c0:	mov	x5, #0x4                   	// #4
   1c9c4:	mov	x4, #0x0                   	// #0
   1c9c8:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1c9cc:	nop
   1c9d0:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1c9d4:	mov	w7, #0x0                   	// #0
   1c9d8:	add	x3, x3, #0x860
   1c9dc:	mov	w6, #0x4                   	// #4
   1c9e0:	mov	x5, #0x4                   	// #4
   1c9e4:	mov	x4, #0x0                   	// #0
   1c9e8:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1c9ec:	nop
   1c9f0:	cmp	x4, #0xf
   1c9f4:	and	w2, w2, #0xff
   1c9f8:	b.ls	1ccb4 <lzma_mode_is_supported@@XZ_5.0+0x78bc>  // b.plast
   1c9fc:	ldrb	w6, [x3]
   1ca00:	sub	w8, w1, #0x10
   1ca04:	adrp	x7, 23000 <lzma_mode_is_supported@@XZ_5.0+0xdc08>
   1ca08:	add	x7, x7, #0x6a0
   1ca0c:	and	x1, x6, #0x1f
   1ca10:	mov	x9, #0xffff000000001fff    	// #-281474976702465
   1ca14:	mov	x0, #0x10                  	// #16
   1ca18:	movk	x9, #0xffee, lsl #32
   1ca1c:	ldr	w1, [x7, x1, lsl #2]
   1ca20:	tbnz	w1, #0, 1ca54 <lzma_mode_is_supported@@XZ_5.0+0x765c>
   1ca24:	nop
   1ca28:	tbnz	w1, #1, 1cb18 <lzma_mode_is_supported@@XZ_5.0+0x7720>
   1ca2c:	tbnz	w1, #2, 1cbe0 <lzma_mode_is_supported@@XZ_5.0+0x77e8>
   1ca30:	add	x1, x0, #0x10
   1ca34:	add	x3, x3, #0x10
   1ca38:	cmp	x1, x4
   1ca3c:	b.hi	1ccb0 <lzma_mode_is_supported@@XZ_5.0+0x78b8>  // b.pmore
   1ca40:	ldrb	w6, [x3]
   1ca44:	mov	x0, x1
   1ca48:	and	x1, x6, #0x1f
   1ca4c:	ldr	w1, [x7, x1, lsl #2]
   1ca50:	tbz	w1, #0, 1ca28 <lzma_mode_is_supported@@XZ_5.0+0x7630>
   1ca54:	ldrb	w13, [x3, #2]
   1ca58:	and	x6, x6, #0xff
   1ca5c:	ldrb	w12, [x3, #4]
   1ca60:	ldrb	w5, [x3, #1]
   1ca64:	ldrb	w11, [x3, #3]
   1ca68:	lsl	x13, x13, #16
   1ca6c:	ldrb	w10, [x3, #5]
   1ca70:	lsl	x12, x12, #32
   1ca74:	add	x5, x13, x5, lsl #8
   1ca78:	add	x11, x12, x11, lsl #24
   1ca7c:	add	x6, x6, x10, lsl #40
   1ca80:	add	x5, x5, x11
   1ca84:	add	x5, x5, x6
   1ca88:	ubfx	x6, x5, #42, #4
   1ca8c:	cmp	x6, #0x5
   1ca90:	b.ne	1ca28 <lzma_mode_is_supported@@XZ_5.0+0x7630>  // b.any
   1ca94:	tst	x5, #0x1c000
   1ca98:	b.ne	1ca28 <lzma_mode_is_supported@@XZ_5.0+0x7630>  // b.any
   1ca9c:	lsr	x10, x5, #41
   1caa0:	ubfx	x6, x5, #18, #20
   1caa4:	add	w11, w8, w0
   1caa8:	cmp	w2, #0x0
   1caac:	ubfiz	w10, w10, #20, #1
   1cab0:	and	x12, x9, x5, lsr #5
   1cab4:	orr	w10, w10, w6
   1cab8:	lsl	w6, w10, #4
   1cabc:	mov	w10, w11
   1cac0:	sub	w11, w6, w11
   1cac4:	add	w6, w6, w10
   1cac8:	csel	w6, w6, w11, ne  // ne = any
   1cacc:	lsr	w6, w6, #4
   1cad0:	lsl	x10, x6, #16
   1cad4:	ubfiz	x6, x6, #13, #20
   1cad8:	and	x10, x10, #0x1000000000
   1cadc:	orr	x6, x6, x10
   1cae0:	orr	x6, x6, x12
   1cae4:	bfi	x5, x6, #5, #59
   1cae8:	strb	w5, [x3]
   1caec:	lsr	x12, x5, #8
   1caf0:	lsr	x11, x5, #16
   1caf4:	lsr	x10, x5, #24
   1caf8:	lsr	x6, x5, #32
   1cafc:	lsr	x5, x5, #40
   1cb00:	strb	w12, [x3, #1]
   1cb04:	strb	w11, [x3, #2]
   1cb08:	strb	w10, [x3, #3]
   1cb0c:	strb	w6, [x3, #4]
   1cb10:	strb	w5, [x3, #5]
   1cb14:	tbz	w1, #1, 1ca2c <lzma_mode_is_supported@@XZ_5.0+0x7634>
   1cb18:	ldrb	w12, [x3, #7]
   1cb1c:	ldrb	w11, [x3, #9]
   1cb20:	ldrb	w5, [x3, #6]
   1cb24:	ldrb	w10, [x3, #8]
   1cb28:	lsl	x12, x12, #16
   1cb2c:	ldrb	w6, [x3, #10]
   1cb30:	lsl	x11, x11, #32
   1cb34:	ldrb	w13, [x3, #5]
   1cb38:	add	x5, x12, x5, lsl #8
   1cb3c:	add	x10, x11, x10, lsl #24
   1cb40:	add	x5, x5, x10
   1cb44:	add	x6, x13, x6, lsl #40
   1cb48:	add	x5, x5, x6
   1cb4c:	ubfx	x6, x5, #43, #4
   1cb50:	cmp	x6, #0x5
   1cb54:	b.ne	1ca2c <lzma_mode_is_supported@@XZ_5.0+0x7634>  // b.any
   1cb58:	tst	x5, #0x38000
   1cb5c:	b.ne	1ca2c <lzma_mode_is_supported@@XZ_5.0+0x7634>  // b.any
   1cb60:	lsr	x10, x5, #42
   1cb64:	ubfx	x6, x5, #19, #20
   1cb68:	add	w11, w8, w0
   1cb6c:	cmp	w2, #0x0
   1cb70:	ubfiz	w10, w10, #20, #1
   1cb74:	and	x12, x9, x5, lsr #6
   1cb78:	orr	w10, w10, w6
   1cb7c:	lsl	w6, w10, #4
   1cb80:	mov	w10, w11
   1cb84:	sub	w11, w6, w11
   1cb88:	add	w6, w6, w10
   1cb8c:	csel	w6, w6, w11, ne  // ne = any
   1cb90:	lsr	w6, w6, #4
   1cb94:	lsl	x10, x6, #16
   1cb98:	ubfiz	x6, x6, #13, #20
   1cb9c:	and	x10, x10, #0x1000000000
   1cba0:	orr	x6, x6, x10
   1cba4:	orr	x6, x6, x12
   1cba8:	bfi	x5, x6, #6, #58
   1cbac:	strb	w5, [x3, #5]
   1cbb0:	lsr	x12, x5, #8
   1cbb4:	lsr	x11, x5, #16
   1cbb8:	lsr	x10, x5, #24
   1cbbc:	lsr	x6, x5, #32
   1cbc0:	lsr	x5, x5, #40
   1cbc4:	strb	w12, [x3, #6]
   1cbc8:	strb	w11, [x3, #7]
   1cbcc:	strb	w10, [x3, #8]
   1cbd0:	strb	w6, [x3, #9]
   1cbd4:	strb	w5, [x3, #10]
   1cbd8:	tbz	w1, #2, 1ca30 <lzma_mode_is_supported@@XZ_5.0+0x7638>
   1cbdc:	nop
   1cbe0:	ldrb	w11, [x3, #12]
   1cbe4:	ldrb	w10, [x3, #14]
   1cbe8:	ldrb	w1, [x3, #11]
   1cbec:	ldrb	w6, [x3, #13]
   1cbf0:	lsl	x11, x11, #16
   1cbf4:	ldrb	w5, [x3, #15]
   1cbf8:	lsl	x10, x10, #32
   1cbfc:	ldrb	w12, [x3, #10]
   1cc00:	add	x1, x11, x1, lsl #8
   1cc04:	add	x6, x10, x6, lsl #24
   1cc08:	add	x1, x1, x6
   1cc0c:	add	x5, x12, x5, lsl #40
   1cc10:	add	x1, x1, x5
   1cc14:	lsr	x5, x1, #44
   1cc18:	cmp	x5, #0x5
   1cc1c:	b.ne	1ca30 <lzma_mode_is_supported@@XZ_5.0+0x7638>  // b.any
   1cc20:	tst	x1, #0x70000
   1cc24:	b.ne	1ca30 <lzma_mode_is_supported@@XZ_5.0+0x7638>  // b.any
   1cc28:	lsr	x6, x1, #43
   1cc2c:	ubfx	x5, x1, #20, #20
   1cc30:	add	w10, w8, w0
   1cc34:	cmp	w2, #0x0
   1cc38:	ubfiz	w6, w6, #20, #1
   1cc3c:	and	x11, x9, x1, lsr #7
   1cc40:	orr	w6, w6, w5
   1cc44:	add	x3, x3, #0x10
   1cc48:	lsl	w5, w6, #4
   1cc4c:	mov	w6, w10
   1cc50:	sub	w10, w5, w10
   1cc54:	add	w5, w5, w6
   1cc58:	csel	w5, w5, w10, ne  // ne = any
   1cc5c:	lsr	w5, w5, #4
   1cc60:	lsl	x6, x5, #16
   1cc64:	ubfiz	x5, x5, #13, #20
   1cc68:	and	x6, x6, #0x1000000000
   1cc6c:	orr	x5, x5, x6
   1cc70:	orr	x5, x5, x11
   1cc74:	bfi	x1, x5, #7, #57
   1cc78:	sturb	w1, [x3, #-6]
   1cc7c:	lsr	x11, x1, #8
   1cc80:	lsr	x10, x1, #16
   1cc84:	lsr	x6, x1, #24
   1cc88:	lsr	x5, x1, #32
   1cc8c:	lsr	x1, x1, #40
   1cc90:	sturb	w11, [x3, #-5]
   1cc94:	sturb	w10, [x3, #-4]
   1cc98:	sturb	w6, [x3, #-3]
   1cc9c:	sturb	w5, [x3, #-2]
   1cca0:	sturb	w1, [x3, #-1]
   1cca4:	add	x1, x0, #0x10
   1cca8:	cmp	x1, x4
   1ccac:	b.ls	1ca40 <lzma_mode_is_supported@@XZ_5.0+0x7648>  // b.plast
   1ccb0:	ret
   1ccb4:	mov	x0, #0x0                   	// #0
   1ccb8:	ret
   1ccbc:	nop
   1ccc0:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1ccc4:	mov	w7, #0x1                   	// #1
   1ccc8:	add	x3, x3, #0x9f0
   1cccc:	mov	w6, #0x10                  	// #16
   1ccd0:	mov	x5, #0x10                  	// #16
   1ccd4:	mov	x4, #0x0                   	// #0
   1ccd8:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1ccdc:	nop
   1cce0:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1cce4:	mov	w7, #0x0                   	// #0
   1cce8:	add	x3, x3, #0x9f0
   1ccec:	mov	w6, #0x10                  	// #16
   1ccf0:	mov	x5, #0x10                  	// #16
   1ccf4:	mov	x4, #0x0                   	// #0
   1ccf8:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1ccfc:	nop
   1cd00:	cmp	x4, #0x3
   1cd04:	and	w2, w2, #0xff
   1cd08:	add	w8, w1, #0x8
   1cd0c:	b.ls	1cdf0 <lzma_mode_is_supported@@XZ_5.0+0x79f8>  // b.plast
   1cd10:	cbnz	w2, 1cd88 <lzma_mode_is_supported@@XZ_5.0+0x7990>
   1cd14:	mov	w8, #0xfffffff8            	// #-8
   1cd18:	mov	x0, #0x4                   	// #4
   1cd1c:	sub	w8, w8, w1
   1cd20:	b	1cd28 <lzma_mode_is_supported@@XZ_5.0+0x7930>
   1cd24:	mov	x0, x5
   1cd28:	ldrb	w1, [x3, #3]
   1cd2c:	add	x5, x0, #0x4
   1cd30:	cmp	w1, #0xeb
   1cd34:	b.ne	1cd78 <lzma_mode_is_supported@@XZ_5.0+0x7980>  // b.any
   1cd38:	ldrb	w6, [x3, #2]
   1cd3c:	sub	w1, w0, #0x4
   1cd40:	ldrb	w2, [x3, #1]
   1cd44:	ldrb	w7, [x3]
   1cd48:	lsl	w6, w6, #16
   1cd4c:	orr	w2, w6, w2, lsl #8
   1cd50:	orr	w2, w2, w7
   1cd54:	lsl	w2, w2, #2
   1cd58:	sub	w1, w2, w1
   1cd5c:	add	w1, w1, w8
   1cd60:	lsr	w2, w1, #18
   1cd64:	lsr	w6, w1, #10
   1cd68:	lsr	w1, w1, #2
   1cd6c:	strb	w1, [x3]
   1cd70:	strb	w6, [x3, #1]
   1cd74:	strb	w2, [x3, #2]
   1cd78:	add	x3, x3, #0x4
   1cd7c:	cmp	x4, x5
   1cd80:	b.cs	1cd24 <lzma_mode_is_supported@@XZ_5.0+0x792c>  // b.hs, b.nlast
   1cd84:	ret
   1cd88:	mov	x0, #0x4                   	// #4
   1cd8c:	b	1cd94 <lzma_mode_is_supported@@XZ_5.0+0x799c>
   1cd90:	mov	x0, x2
   1cd94:	ldrb	w1, [x3, #3]
   1cd98:	add	x2, x0, #0x4
   1cd9c:	cmp	w1, #0xeb
   1cda0:	b.ne	1cde0 <lzma_mode_is_supported@@XZ_5.0+0x79e8>  // b.any
   1cda4:	ldrb	w6, [x3, #1]
   1cda8:	sub	w5, w0, #0x4
   1cdac:	ldrb	w1, [x3, #2]
   1cdb0:	add	w5, w5, w8
   1cdb4:	ldrb	w7, [x3]
   1cdb8:	lsl	w6, w6, #8
   1cdbc:	orr	w1, w6, w1, lsl #16
   1cdc0:	orr	w1, w1, w7
   1cdc4:	add	w1, w5, w1, lsl #2
   1cdc8:	lsr	w5, w1, #18
   1cdcc:	lsr	w6, w1, #10
   1cdd0:	lsr	w1, w1, #2
   1cdd4:	strb	w1, [x3]
   1cdd8:	strb	w6, [x3, #1]
   1cddc:	strb	w5, [x3, #2]
   1cde0:	add	x3, x3, #0x4
   1cde4:	cmp	x2, x4
   1cde8:	b.ls	1cd90 <lzma_mode_is_supported@@XZ_5.0+0x7998>  // b.plast
   1cdec:	ret
   1cdf0:	mov	x0, #0x0                   	// #0
   1cdf4:	ret
   1cdf8:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1cdfc:	mov	w7, #0x1                   	// #1
   1ce00:	add	x3, x3, #0xd00
   1ce04:	mov	w6, #0x4                   	// #4
   1ce08:	mov	x5, #0x4                   	// #4
   1ce0c:	mov	x4, #0x0                   	// #0
   1ce10:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1ce14:	nop
   1ce18:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1ce1c:	mov	w7, #0x0                   	// #0
   1ce20:	add	x3, x3, #0xd00
   1ce24:	mov	w6, #0x4                   	// #4
   1ce28:	mov	x5, #0x4                   	// #4
   1ce2c:	mov	x4, #0x0                   	// #0
   1ce30:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1ce34:	nop
   1ce38:	cmp	x4, #0x3
   1ce3c:	and	w2, w2, #0xff
   1ce40:	add	w10, w1, #0x4
   1ce44:	b.ls	1cfc0 <lzma_mode_is_supported@@XZ_5.0+0x7bc8>  // b.plast
   1ce48:	cbnz	w2, 1cebc <lzma_mode_is_supported@@XZ_5.0+0x7ac4>
   1ce4c:	mov	w10, #0xfffffffc            	// #-4
   1ce50:	mov	x0, #0x0                   	// #0
   1ce54:	sub	w10, w10, w1
   1ce58:	b	1ce70 <lzma_mode_is_supported@@XZ_5.0+0x7a78>
   1ce5c:	mov	x1, x0
   1ce60:	mov	x0, x7
   1ce64:	add	x1, x1, #0x6
   1ce68:	cmp	x1, x4
   1ce6c:	b.hi	1ceb8 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   1ce70:	add	x6, x0, #0x1
   1ce74:	add	x1, x0, #0x2
   1ce78:	mov	x7, x1
   1ce7c:	ldrb	w5, [x3, x6]
   1ce80:	and	w2, w5, #0xf8
   1ce84:	cmp	w2, #0xf0
   1ce88:	b.ne	1ce5c <lzma_mode_is_supported@@XZ_5.0+0x7a64>  // b.any
   1ce8c:	add	x7, x0, #0x3
   1ce90:	mov	x9, x1
   1ce94:	ldrb	w2, [x3, x7]
   1ce98:	and	w8, w2, #0xf8
   1ce9c:	cmp	w8, #0xf8
   1cea0:	b.eq	1cf18 <lzma_mode_is_supported@@XZ_5.0+0x7b20>  // b.none
   1cea4:	mov	x1, x0
   1cea8:	mov	x0, x9
   1ceac:	add	x1, x1, #0x6
   1ceb0:	cmp	x1, x4
   1ceb4:	b.ls	1ce70 <lzma_mode_is_supported@@XZ_5.0+0x7a78>  // b.plast
   1ceb8:	ret
   1cebc:	mov	x0, #0x0                   	// #0
   1cec0:	b	1ced8 <lzma_mode_is_supported@@XZ_5.0+0x7ae0>
   1cec4:	mov	x1, x0
   1cec8:	mov	x0, x7
   1cecc:	add	x1, x1, #0x6
   1ced0:	cmp	x1, x4
   1ced4:	b.hi	1ceb8 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   1ced8:	add	x5, x0, #0x1
   1cedc:	add	x1, x0, #0x2
   1cee0:	mov	x7, x1
   1cee4:	ldrb	w2, [x3, x5]
   1cee8:	and	w6, w2, #0xf8
   1ceec:	cmp	w6, #0xf0
   1cef0:	b.ne	1cec4 <lzma_mode_is_supported@@XZ_5.0+0x7acc>  // b.any
   1cef4:	add	x7, x0, #0x3
   1cef8:	mov	x9, x1
   1cefc:	ldrb	w6, [x3, x7]
   1cf00:	and	w8, w6, #0xf8
   1cf04:	cmp	w8, #0xf8
   1cf08:	b.eq	1cf6c <lzma_mode_is_supported@@XZ_5.0+0x7b74>  // b.none
   1cf0c:	mov	x1, x0
   1cf10:	mov	x0, x9
   1cf14:	b	1cecc <lzma_mode_is_supported@@XZ_5.0+0x7ad4>
   1cf18:	ldrb	w8, [x3, x0]
   1cf1c:	ubfiz	w5, w5, #19, #3
   1cf20:	ldrb	w9, [x3, x1]
   1cf24:	ubfiz	w2, w2, #8, #3
   1cf28:	orr	w2, w2, w5
   1cf2c:	orr	w5, w9, w8, lsl #11
   1cf30:	orr	w2, w2, w5
   1cf34:	add	w2, w10, w2, lsl #1
   1cf38:	sub	w2, w2, w0
   1cf3c:	ubfx	x5, x2, #20, #3
   1cf40:	lsr	w8, w2, #12
   1cf44:	orr	w5, w5, #0xfffffff0
   1cf48:	strb	w5, [x3, x6]
   1cf4c:	lsr	w5, w2, #9
   1cf50:	strb	w8, [x3, x0]
   1cf54:	orr	w5, w5, #0xfffffff8
   1cf58:	strb	w5, [x3, x7]
   1cf5c:	lsr	w2, w2, #1
   1cf60:	add	x0, x0, #0x4
   1cf64:	strb	w2, [x3, x1]
   1cf68:	b	1ce64 <lzma_mode_is_supported@@XZ_5.0+0x7a6c>
   1cf6c:	ldrb	w8, [x3, x0]
   1cf70:	ubfiz	w6, w6, #8, #3
   1cf74:	ldrb	w11, [x3, x1]
   1cf78:	ubfiz	w2, w2, #19, #3
   1cf7c:	orr	w2, w2, w6
   1cf80:	add	w9, w10, w0
   1cf84:	orr	w6, w11, w8, lsl #11
   1cf88:	orr	w2, w2, w6
   1cf8c:	add	w2, w9, w2, lsl #1
   1cf90:	ubfx	x6, x2, #20, #3
   1cf94:	lsr	w8, w2, #12
   1cf98:	orr	w6, w6, #0xfffffff0
   1cf9c:	strb	w6, [x3, x5]
   1cfa0:	lsr	w5, w2, #9
   1cfa4:	strb	w8, [x3, x0]
   1cfa8:	orr	w5, w5, #0xfffffff8
   1cfac:	strb	w5, [x3, x7]
   1cfb0:	lsr	w2, w2, #1
   1cfb4:	add	x0, x0, #0x4
   1cfb8:	strb	w2, [x3, x1]
   1cfbc:	b	1cecc <lzma_mode_is_supported@@XZ_5.0+0x7ad4>
   1cfc0:	mov	x0, #0x0                   	// #0
   1cfc4:	ret
   1cfc8:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1cfcc:	mov	w7, #0x1                   	// #1
   1cfd0:	add	x3, x3, #0xe38
   1cfd4:	mov	w6, #0x2                   	// #2
   1cfd8:	mov	x5, #0x4                   	// #4
   1cfdc:	mov	x4, #0x0                   	// #0
   1cfe0:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1cfe4:	nop
   1cfe8:	adrp	x3, 1c000 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   1cfec:	mov	w7, #0x0                   	// #0
   1cff0:	add	x3, x3, #0xe38
   1cff4:	mov	w6, #0x2                   	// #2
   1cff8:	mov	x5, #0x4                   	// #4
   1cffc:	mov	x4, #0x0                   	// #0
   1d000:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1d004:	nop
   1d008:	cmp	x4, #0x3
   1d00c:	and	w2, w2, #0xff
   1d010:	b.ls	1d0e0 <lzma_mode_is_supported@@XZ_5.0+0x7ce8>  // b.plast
   1d014:	add	x3, x3, #0x1
   1d018:	sub	w9, w1, #0x4
   1d01c:	mov	x0, #0x4                   	// #4
   1d020:	b	1d040 <lzma_mode_is_supported@@XZ_5.0+0x7c48>
   1d024:	cmp	w1, #0x7f
   1d028:	b.eq	1d0cc <lzma_mode_is_supported@@XZ_5.0+0x7cd4>  // b.none
   1d02c:	add	x1, x0, #0x4
   1d030:	add	x3, x3, #0x4
   1d034:	cmp	x1, x4
   1d038:	b.hi	1d0c8 <lzma_mode_is_supported@@XZ_5.0+0x7cd0>  // b.pmore
   1d03c:	mov	x0, x1
   1d040:	ldurb	w1, [x3, #-1]
   1d044:	cmp	w1, #0x40
   1d048:	b.ne	1d024 <lzma_mode_is_supported@@XZ_5.0+0x7c2c>  // b.any
   1d04c:	ldrb	w8, [x3]
   1d050:	tst	w8, #0xc0
   1d054:	b.ne	1d02c <lzma_mode_is_supported@@XZ_5.0+0x7c34>  // b.any
   1d058:	ldrb	w5, [x3, #2]
   1d05c:	lsl	w7, w1, #24
   1d060:	ldrb	w6, [x3, #1]
   1d064:	add	w1, w9, w0
   1d068:	cmp	w2, #0x0
   1d06c:	add	x3, x3, #0x4
   1d070:	orr	w8, w5, w8, lsl #16
   1d074:	orr	w6, w7, w6, lsl #8
   1d078:	orr	w6, w6, w8
   1d07c:	lsl	w5, w6, #2
   1d080:	add	w6, w5, w1
   1d084:	sub	w1, w5, w1
   1d088:	csel	w1, w1, w6, eq  // eq = none
   1d08c:	sbfx	x5, x1, #24, #1
   1d090:	ubfx	x1, x1, #2, #22
   1d094:	ubfiz	w5, w5, #22, #8
   1d098:	orr	w1, w5, w1
   1d09c:	orr	w1, w1, #0x40000000
   1d0a0:	sturb	w1, [x3, #-2]
   1d0a4:	lsr	w6, w1, #24
   1d0a8:	lsr	w5, w1, #16
   1d0ac:	lsr	w1, w1, #8
   1d0b0:	sturb	w6, [x3, #-5]
   1d0b4:	sturb	w5, [x3, #-4]
   1d0b8:	sturb	w1, [x3, #-3]
   1d0bc:	add	x1, x0, #0x4
   1d0c0:	cmp	x1, x4
   1d0c4:	b.ls	1d03c <lzma_mode_is_supported@@XZ_5.0+0x7c44>  // b.plast
   1d0c8:	ret
   1d0cc:	ldrb	w8, [x3]
   1d0d0:	and	w5, w8, #0xc0
   1d0d4:	cmp	w5, #0xc0
   1d0d8:	b.ne	1d02c <lzma_mode_is_supported@@XZ_5.0+0x7c34>  // b.any
   1d0dc:	b	1d058 <lzma_mode_is_supported@@XZ_5.0+0x7c60>
   1d0e0:	mov	x0, #0x0                   	// #0
   1d0e4:	ret
   1d0e8:	adrp	x3, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
   1d0ec:	mov	w7, #0x1                   	// #1
   1d0f0:	add	x3, x3, #0x8
   1d0f4:	mov	w6, #0x4                   	// #4
   1d0f8:	mov	x5, #0x4                   	// #4
   1d0fc:	mov	x4, #0x0                   	// #0
   1d100:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>
   1d104:	nop
   1d108:	adrp	x3, 1d000 <lzma_mode_is_supported@@XZ_5.0+0x7c08>
   1d10c:	mov	w7, #0x0                   	// #0
   1d110:	add	x3, x3, #0x8
   1d114:	mov	w6, #0x4                   	// #4
   1d118:	mov	x5, #0x4                   	// #4
   1d11c:	mov	x4, #0x0                   	// #0
   1d120:	b	1c2c8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>

Disassembly of section .fini:

000000000001d124 <.fini>:
   1d124:	stp	x29, x30, [sp, #-16]!
   1d128:	mov	x29, sp
   1d12c:	ldp	x29, x30, [sp], #16
   1d130:	ret
