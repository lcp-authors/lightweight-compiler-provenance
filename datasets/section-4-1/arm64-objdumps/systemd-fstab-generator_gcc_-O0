
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-fstab-generator_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401b78 <_init>:
  401b78:	stp	x29, x30, [sp, #-16]!
  401b7c:	mov	x29, sp
  401b80:	bl	402080 <call_weak_fn>
  401b84:	ldp	x29, x30, [sp], #16
  401b88:	ret

Disassembly of section .plt:

0000000000401b90 <.plt>:
  401b90:	stp	x16, x30, [sp, #-16]!
  401b94:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401b98:	ldr	x17, [x16, #3496]
  401b9c:	add	x16, x16, #0xda8
  401ba0:	br	x17
  401ba4:	nop
  401ba8:	nop
  401bac:	nop

0000000000401bb0 <specifier_escape_strv@plt>:
  401bb0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401bb4:	ldr	x17, [x16, #3504]
  401bb8:	add	x16, x16, #0xdb0
  401bbc:	br	x17

0000000000401bc0 <safe_fclose@plt>:
  401bc0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401bc4:	ldr	x17, [x16, #3512]
  401bc8:	add	x16, x16, #0xdb8
  401bcc:	br	x17

0000000000401bd0 <strcmp_ptr@plt>:
  401bd0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401bd4:	ldr	x17, [x16, #3520]
  401bd8:	add	x16, x16, #0xdc0
  401bdc:	br	x17

0000000000401be0 <parse_sec_fix_0@plt>:
  401be0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401be4:	ldr	x17, [x16, #3528]
  401be8:	add	x16, x16, #0xdc8
  401bec:	br	x17

0000000000401bf0 <stpcpy@plt>:
  401bf0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401bf4:	ldr	x17, [x16, #3536]
  401bf8:	add	x16, x16, #0xdd0
  401bfc:	br	x17

0000000000401c00 <__libc_start_main@plt>:
  401c00:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c04:	ldr	x17, [x16, #3544]
  401c08:	add	x16, x16, #0xdd8
  401c0c:	br	x17

0000000000401c10 <format_timespan@plt>:
  401c10:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c14:	ldr	x17, [x16, #3552]
  401c18:	add	x16, x16, #0xde0
  401c1c:	br	x17

0000000000401c20 <unit_name_from_path@plt>:
  401c20:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c24:	ldr	x17, [x16, #3560]
  401c28:	add	x16, x16, #0xde8
  401c2c:	br	x17

0000000000401c30 <parse_boolean@plt>:
  401c30:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c34:	ldr	x17, [x16, #3568]
  401c38:	add	x16, x16, #0xdf0
  401c3c:	br	x17

0000000000401c40 <__gmon_start__@plt>:
  401c40:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c44:	ldr	x17, [x16, #3576]
  401c48:	add	x16, x16, #0xdf8
  401c4c:	br	x17

0000000000401c50 <chase_symlinks@plt>:
  401c50:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c54:	ldr	x17, [x16, #3584]
  401c58:	add	x16, x16, #0xe00
  401c5c:	br	x17

0000000000401c60 <polkit_agent_close@plt>:
  401c60:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c64:	ldr	x17, [x16, #3592]
  401c68:	add	x16, x16, #0xe08
  401c6c:	br	x17

0000000000401c70 <free_and_strdup@plt>:
  401c70:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c74:	ldr	x17, [x16, #3600]
  401c78:	add	x16, x16, #0xe10
  401c7c:	br	x17

0000000000401c80 <generator_write_timeouts@plt>:
  401c80:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c84:	ldr	x17, [x16, #3608]
  401c88:	add	x16, x16, #0xe18
  401c8c:	br	x17

0000000000401c90 <path_equal@plt>:
  401c90:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401c94:	ldr	x17, [x16, #3616]
  401c98:	add	x16, x16, #0xe20
  401c9c:	br	x17

0000000000401ca0 <fprintf@plt>:
  401ca0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ca4:	ldr	x17, [x16, #3624]
  401ca8:	add	x16, x16, #0xe28
  401cac:	br	x17

0000000000401cb0 <is_path@plt>:
  401cb0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401cb4:	ldr	x17, [x16, #3632]
  401cb8:	add	x16, x16, #0xe30
  401cbc:	br	x17

0000000000401cc0 <volatile_mode_from_string@plt>:
  401cc0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401cc4:	ldr	x17, [x16, #3640]
  401cc8:	add	x16, x16, #0xe38
  401ccc:	br	x17

0000000000401cd0 <log_assert_failed_realm@plt>:
  401cd0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401cd4:	ldr	x17, [x16, #3648]
  401cd8:	add	x16, x16, #0xe40
  401cdc:	br	x17

0000000000401ce0 <generator_write_initrd_root_device_deps@plt>:
  401ce0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ce4:	ldr	x17, [x16, #3656]
  401ce8:	add	x16, x16, #0xe48
  401cec:	br	x17

0000000000401cf0 <fstype_is_network@plt>:
  401cf0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401cf4:	ldr	x17, [x16, #3664]
  401cf8:	add	x16, x16, #0xe50
  401cfc:	br	x17

0000000000401d00 <in_initrd@plt>:
  401d00:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d04:	ldr	x17, [x16, #3672]
  401d08:	add	x16, x16, #0xe58
  401d0c:	br	x17

0000000000401d10 <secure_getenv@plt>:
  401d10:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d14:	ldr	x17, [x16, #3680]
  401d18:	add	x16, x16, #0xe60
  401d1c:	br	x17

0000000000401d20 <setmntent@plt>:
  401d20:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d24:	ldr	x17, [x16, #3688]
  401d28:	add	x16, x16, #0xe68
  401d2c:	br	x17

0000000000401d30 <is_efi_boot@plt>:
  401d30:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d34:	ldr	x17, [x16, #3696]
  401d38:	add	x16, x16, #0xe70
  401d3c:	br	x17

0000000000401d40 <access@plt>:
  401d40:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d44:	ldr	x17, [x16, #3704]
  401d48:	add	x16, x16, #0xe78
  401d4c:	br	x17

0000000000401d50 <abort@plt>:
  401d50:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d54:	ldr	x17, [x16, #3712]
  401d58:	add	x16, x16, #0xe80
  401d5c:	br	x17

0000000000401d60 <getmntent@plt>:
  401d60:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d64:	ldr	x17, [x16, #3720]
  401d68:	add	x16, x16, #0xe88
  401d6c:	br	x17

0000000000401d70 <generator_hook_up_mkswap@plt>:
  401d70:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d74:	ldr	x17, [x16, #3728]
  401d78:	add	x16, x16, #0xe90
  401d7c:	br	x17

0000000000401d80 <log_setup_generator@plt>:
  401d80:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d84:	ldr	x17, [x16, #3736]
  401d88:	add	x16, x16, #0xe98
  401d8c:	br	x17

0000000000401d90 <strreplace@plt>:
  401d90:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401d94:	ldr	x17, [x16, #3744]
  401d98:	add	x16, x16, #0xea0
  401d9c:	br	x17

0000000000401da0 <path_is_read_only_fs@plt>:
  401da0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401da4:	ldr	x17, [x16, #3752]
  401da8:	add	x16, x16, #0xea8
  401dac:	br	x17

0000000000401db0 <endmntent@plt>:
  401db0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401db4:	ldr	x17, [x16, #3760]
  401db8:	add	x16, x16, #0xeb0
  401dbc:	br	x17

0000000000401dc0 <strv_consume@plt>:
  401dc0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401dc4:	ldr	x17, [x16, #3768]
  401dc8:	add	x16, x16, #0xeb8
  401dcc:	br	x17

0000000000401dd0 <path_startswith@plt>:
  401dd0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401dd4:	ldr	x17, [x16, #3776]
  401dd8:	add	x16, x16, #0xec0
  401ddc:	br	x17

0000000000401de0 <cg_is_unified_wanted@plt>:
  401de0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401de4:	ldr	x17, [x16, #3784]
  401de8:	add	x16, x16, #0xec8
  401dec:	br	x17

0000000000401df0 <fstab_node_to_udev_node@plt>:
  401df0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401df4:	ldr	x17, [x16, #3792]
  401df8:	add	x16, x16, #0xed0
  401dfc:	br	x17

0000000000401e00 <__errno_location@plt>:
  401e00:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e04:	ldr	x17, [x16, #3800]
  401e08:	add	x16, x16, #0xed8
  401e0c:	br	x17

0000000000401e10 <fstab_extract_values@plt>:
  401e10:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e14:	ldr	x17, [x16, #3808]
  401e18:	add	x16, x16, #0xee0
  401e1c:	br	x17

0000000000401e20 <strv_free@plt>:
  401e20:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e24:	ldr	x17, [x16, #3816]
  401e28:	add	x16, x16, #0xee8
  401e2c:	br	x17

0000000000401e30 <fstab_filter_options@plt>:
  401e30:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e34:	ldr	x17, [x16, #3824]
  401e38:	add	x16, x16, #0xef0
  401e3c:	br	x17

0000000000401e40 <strextend_with_separator@plt>:
  401e40:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e44:	ldr	x17, [x16, #3832]
  401e48:	add	x16, x16, #0xef8
  401e4c:	br	x17

0000000000401e50 <generator_add_symlink@plt>:
  401e50:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e54:	ldr	x17, [x16, #3840]
  401e58:	add	x16, x16, #0xf00
  401e5c:	br	x17

0000000000401e60 <__stack_chk_fail@plt>:
  401e60:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e64:	ldr	x17, [x16, #3848]
  401e68:	add	x16, x16, #0xf08
  401e6c:	br	x17

0000000000401e70 <ask_password_agent_close@plt>:
  401e70:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e74:	ldr	x17, [x16, #3856]
  401e78:	add	x16, x16, #0xf10
  401e7c:	br	x17

0000000000401e80 <pager_close@plt>:
  401e80:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e84:	ldr	x17, [x16, #3864]
  401e88:	add	x16, x16, #0xf18
  401e8c:	br	x17

0000000000401e90 <cg_is_legacy_wanted@plt>:
  401e90:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401e94:	ldr	x17, [x16, #3872]
  401e98:	add	x16, x16, #0xf20
  401e9c:	br	x17

0000000000401ea0 <is_device_path@plt>:
  401ea0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ea4:	ldr	x17, [x16, #3880]
  401ea8:	add	x16, x16, #0xf28
  401eac:	br	x17

0000000000401eb0 <mac_smack_use@plt>:
  401eb0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401eb4:	ldr	x17, [x16, #3888]
  401eb8:	add	x16, x16, #0xf30
  401ebc:	br	x17

0000000000401ec0 <generator_hook_up_mkfs@plt>:
  401ec0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ec4:	ldr	x17, [x16, #3896]
  401ec8:	add	x16, x16, #0xf38
  401ecc:	br	x17

0000000000401ed0 <strv_find@plt>:
  401ed0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ed4:	ldr	x17, [x16, #3904]
  401ed8:	add	x16, x16, #0xf40
  401edc:	br	x17

0000000000401ee0 <log_internal_realm@plt>:
  401ee0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ee4:	ldr	x17, [x16, #3912]
  401ee8:	add	x16, x16, #0xf48
  401eec:	br	x17

0000000000401ef0 <strv_join_prefix@plt>:
  401ef0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ef4:	ldr	x17, [x16, #3920]
  401ef8:	add	x16, x16, #0xf50
  401efc:	br	x17

0000000000401f00 <unit_name_mangle_with_suffix@plt>:
  401f00:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f04:	ldr	x17, [x16, #3928]
  401f08:	add	x16, x16, #0xf58
  401f0c:	br	x17

0000000000401f10 <generator_write_fsck_deps@plt>:
  401f10:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f14:	ldr	x17, [x16, #3936]
  401f18:	add	x16, x16, #0xf60
  401f1c:	br	x17

0000000000401f20 <detect_container@plt>:
  401f20:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f24:	ldr	x17, [x16, #3944]
  401f28:	add	x16, x16, #0xf68
  401f2c:	br	x17

0000000000401f30 <path_simplify@plt>:
  401f30:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f34:	ldr	x17, [x16, #3952]
  401f38:	add	x16, x16, #0xf70
  401f3c:	br	x17

0000000000401f40 <strcmp@plt>:
  401f40:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f44:	ldr	x17, [x16, #3960]
  401f48:	add	x16, x16, #0xf78
  401f4c:	br	x17

0000000000401f50 <strdup@plt>:
  401f50:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f54:	ldr	x17, [x16, #3968]
  401f58:	add	x16, x16, #0xf80
  401f5c:	br	x17

0000000000401f60 <proc_cmdline_parse@plt>:
  401f60:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f64:	ldr	x17, [x16, #3976]
  401f68:	add	x16, x16, #0xf88
  401f6c:	br	x17

0000000000401f70 <generator_hook_up_growfs@plt>:
  401f70:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f74:	ldr	x17, [x16, #3984]
  401f78:	add	x16, x16, #0xf90
  401f7c:	br	x17

0000000000401f80 <generator_open_unit_file@plt>:
  401f80:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f84:	ldr	x17, [x16, #3992]
  401f88:	add	x16, x16, #0xf98
  401f8c:	br	x17

0000000000401f90 <generator_write_device_deps@plt>:
  401f90:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401f94:	ldr	x17, [x16, #4000]
  401f98:	add	x16, x16, #0xfa0
  401f9c:	br	x17

0000000000401fa0 <free@plt>:
  401fa0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401fa4:	ldr	x17, [x16, #4008]
  401fa8:	add	x16, x16, #0xfa8
  401fac:	br	x17

0000000000401fb0 <cg_is_hybrid_wanted@plt>:
  401fb0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401fb4:	ldr	x17, [x16, #4016]
  401fb8:	add	x16, x16, #0xfb0
  401fbc:	br	x17

0000000000401fc0 <fwrite@plt>:
  401fc0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401fc4:	ldr	x17, [x16, #4024]
  401fc8:	add	x16, x16, #0xfb8
  401fcc:	br	x17

0000000000401fd0 <mac_selinux_finish@plt>:
  401fd0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401fd4:	ldr	x17, [x16, #4032]
  401fd8:	add	x16, x16, #0xfc0
  401fdc:	br	x17

0000000000401fe0 <generator_enable_remount_fs_service@plt>:
  401fe0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401fe4:	ldr	x17, [x16, #4040]
  401fe8:	add	x16, x16, #0xfc8
  401fec:	br	x17

0000000000401ff0 <strlen@plt>:
  401ff0:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  401ff4:	ldr	x17, [x16, #4048]
  401ff8:	add	x16, x16, #0xfd0
  401ffc:	br	x17

0000000000402000 <log_oom_internal@plt>:
  402000:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  402004:	ldr	x17, [x16, #4056]
  402008:	add	x16, x16, #0xfd8
  40200c:	br	x17

0000000000402010 <fflush_and_check@plt>:
  402010:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  402014:	ldr	x17, [x16, #4064]
  402018:	add	x16, x16, #0xfe0
  40201c:	br	x17

0000000000402020 <log_get_max_level_realm@plt>:
  402020:	adrp	x16, 419000 <__FRAME_END__+0x102e8>
  402024:	ldr	x17, [x16, #4072]
  402028:	add	x16, x16, #0xfe8
  40202c:	br	x17

Disassembly of section .text:

0000000000402030 <_start>:
  402030:	mov	x29, #0x0                   	// #0
  402034:	mov	x30, #0x0                   	// #0
  402038:	mov	x5, x0
  40203c:	ldr	x1, [sp]
  402040:	add	x2, sp, #0x8
  402044:	mov	x6, sp
  402048:	movz	x0, #0x0, lsl #48
  40204c:	movk	x0, #0x0, lsl #32
  402050:	movk	x0, #0x40, lsl #16
  402054:	movk	x0, #0x6968
  402058:	movz	x3, #0x0, lsl #48
  40205c:	movk	x3, #0x0, lsl #32
  402060:	movk	x3, #0x40, lsl #16
  402064:	movk	x3, #0x6bd0
  402068:	movz	x4, #0x0, lsl #48
  40206c:	movk	x4, #0x0, lsl #32
  402070:	movk	x4, #0x40, lsl #16
  402074:	movk	x4, #0x6c50
  402078:	bl	401c00 <__libc_start_main@plt>
  40207c:	bl	401d50 <abort@plt>

0000000000402080 <call_weak_fn>:
  402080:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  402084:	ldr	x0, [x0, #4088]
  402088:	cbz	x0, 402090 <call_weak_fn+0x10>
  40208c:	b	401c40 <__gmon_start__@plt>
  402090:	ret

0000000000402094 <deregister_tm_clones>:
  402094:	stp	x29, x30, [sp, #-32]!
  402098:	mov	x29, sp
  40209c:	adrp	x0, 41a000 <arg_fstab_enabled>
  4020a0:	add	x0, x0, #0x10
  4020a4:	str	x0, [sp, #24]
  4020a8:	ldr	x0, [sp, #24]
  4020ac:	str	x0, [sp, #24]
  4020b0:	ldr	x1, [sp, #24]
  4020b4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4020b8:	add	x0, x0, #0x10
  4020bc:	cmp	x1, x0
  4020c0:	b.eq	4020fc <deregister_tm_clones+0x68>  // b.none
  4020c4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4020c8:	add	x0, x0, #0xc68
  4020cc:	ldr	x0, [x0]
  4020d0:	str	x0, [sp, #16]
  4020d4:	ldr	x0, [sp, #16]
  4020d8:	str	x0, [sp, #16]
  4020dc:	ldr	x0, [sp, #16]
  4020e0:	cmp	x0, #0x0
  4020e4:	b.eq	402100 <deregister_tm_clones+0x6c>  // b.none
  4020e8:	ldr	x1, [sp, #16]
  4020ec:	adrp	x0, 41a000 <arg_fstab_enabled>
  4020f0:	add	x0, x0, #0x10
  4020f4:	blr	x1
  4020f8:	b	402100 <deregister_tm_clones+0x6c>
  4020fc:	nop
  402100:	ldp	x29, x30, [sp], #32
  402104:	ret

0000000000402108 <register_tm_clones>:
  402108:	stp	x29, x30, [sp, #-48]!
  40210c:	mov	x29, sp
  402110:	adrp	x0, 41a000 <arg_fstab_enabled>
  402114:	add	x0, x0, #0x10
  402118:	str	x0, [sp, #40]
  40211c:	ldr	x0, [sp, #40]
  402120:	str	x0, [sp, #40]
  402124:	ldr	x1, [sp, #40]
  402128:	adrp	x0, 41a000 <arg_fstab_enabled>
  40212c:	add	x0, x0, #0x10
  402130:	sub	x0, x1, x0
  402134:	asr	x0, x0, #3
  402138:	lsr	x1, x0, #63
  40213c:	add	x0, x1, x0
  402140:	asr	x0, x0, #1
  402144:	str	x0, [sp, #32]
  402148:	ldr	x0, [sp, #32]
  40214c:	cmp	x0, #0x0
  402150:	b.eq	402190 <register_tm_clones+0x88>  // b.none
  402154:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402158:	add	x0, x0, #0xc70
  40215c:	ldr	x0, [x0]
  402160:	str	x0, [sp, #24]
  402164:	ldr	x0, [sp, #24]
  402168:	str	x0, [sp, #24]
  40216c:	ldr	x0, [sp, #24]
  402170:	cmp	x0, #0x0
  402174:	b.eq	402194 <register_tm_clones+0x8c>  // b.none
  402178:	ldr	x2, [sp, #24]
  40217c:	ldr	x1, [sp, #32]
  402180:	adrp	x0, 41a000 <arg_fstab_enabled>
  402184:	add	x0, x0, #0x10
  402188:	blr	x2
  40218c:	b	402194 <register_tm_clones+0x8c>
  402190:	nop
  402194:	ldp	x29, x30, [sp], #48
  402198:	ret

000000000040219c <__do_global_dtors_aux>:
  40219c:	stp	x29, x30, [sp, #-16]!
  4021a0:	mov	x29, sp
  4021a4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4021a8:	add	x0, x0, #0x1c
  4021ac:	ldrb	w0, [x0]
  4021b0:	and	x0, x0, #0xff
  4021b4:	cmp	x0, #0x0
  4021b8:	b.ne	4021d4 <__do_global_dtors_aux+0x38>  // b.any
  4021bc:	bl	402094 <deregister_tm_clones>
  4021c0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4021c4:	add	x0, x0, #0x1c
  4021c8:	mov	w1, #0x1                   	// #1
  4021cc:	strb	w1, [x0]
  4021d0:	b	4021d8 <__do_global_dtors_aux+0x3c>
  4021d4:	nop
  4021d8:	ldp	x29, x30, [sp], #16
  4021dc:	ret

00000000004021e0 <frame_dummy>:
  4021e0:	stp	x29, x30, [sp, #-16]!
  4021e4:	mov	x29, sp
  4021e8:	bl	402108 <register_tm_clones>
  4021ec:	nop
  4021f0:	ldp	x29, x30, [sp], #16
  4021f4:	ret

00000000004021f8 <ALIGN_TO>:
  4021f8:	sub	sp, sp, #0x10
  4021fc:	str	x0, [sp, #8]
  402200:	str	x1, [sp]
  402204:	ldr	x1, [sp, #8]
  402208:	ldr	x0, [sp]
  40220c:	add	x0, x1, x0
  402210:	sub	x1, x0, #0x1
  402214:	ldr	x0, [sp]
  402218:	neg	x0, x0
  40221c:	and	x0, x1, x0
  402220:	add	sp, sp, #0x10
  402224:	ret

0000000000402228 <mfree>:
  402228:	stp	x29, x30, [sp, #-32]!
  40222c:	mov	x29, sp
  402230:	str	x0, [sp, #24]
  402234:	ldr	x0, [sp, #24]
  402238:	bl	401fa0 <free@plt>
  40223c:	mov	x0, #0x0                   	// #0
  402240:	ldp	x29, x30, [sp], #32
  402244:	ret

0000000000402248 <freep>:
  402248:	stp	x29, x30, [sp, #-32]!
  40224c:	mov	x29, sp
  402250:	str	x0, [sp, #24]
  402254:	ldr	x0, [sp, #24]
  402258:	ldr	x0, [x0]
  40225c:	bl	401fa0 <free@plt>
  402260:	nop
  402264:	ldp	x29, x30, [sp], #32
  402268:	ret

000000000040226c <size_multiply_overflow>:
  40226c:	sub	sp, sp, #0x10
  402270:	str	x0, [sp, #8]
  402274:	str	x1, [sp]
  402278:	ldr	x0, [sp]
  40227c:	cmp	x0, #0x0
  402280:	cset	w0, ne  // ne = any
  402284:	and	w0, w0, #0xff
  402288:	and	x0, x0, #0xff
  40228c:	cmp	x0, #0x0
  402290:	b.eq	4022d4 <size_multiply_overflow+0x68>  // b.none
  402294:	mov	x2, #0x0                   	// #0
  402298:	ldr	x1, [sp, #8]
  40229c:	ldr	x0, [sp]
  4022a0:	umulh	x0, x1, x0
  4022a4:	cmp	x0, #0x0
  4022a8:	b.eq	4022b0 <size_multiply_overflow+0x44>  // b.none
  4022ac:	mov	x2, #0x1                   	// #1
  4022b0:	mov	x0, x2
  4022b4:	cmp	x0, #0x0
  4022b8:	cset	w0, ne  // ne = any
  4022bc:	and	w0, w0, #0xff
  4022c0:	and	x0, x0, #0xff
  4022c4:	cmp	x0, #0x0
  4022c8:	b.eq	4022d4 <size_multiply_overflow+0x68>  // b.none
  4022cc:	mov	w0, #0x1                   	// #1
  4022d0:	b	4022d8 <size_multiply_overflow+0x6c>
  4022d4:	mov	w0, #0x0                   	// #0
  4022d8:	and	w0, w0, #0x1
  4022dc:	and	w0, w0, #0xff
  4022e0:	add	sp, sp, #0x10
  4022e4:	ret

00000000004022e8 <fclosep>:
  4022e8:	stp	x29, x30, [sp, #-32]!
  4022ec:	mov	x29, sp
  4022f0:	str	x0, [sp, #24]
  4022f4:	ldr	x0, [sp, #24]
  4022f8:	ldr	x0, [x0]
  4022fc:	bl	401bc0 <safe_fclose@plt>
  402300:	nop
  402304:	ldp	x29, x30, [sp], #32
  402308:	ret

000000000040230c <fstab_test_option>:
  40230c:	stp	x29, x30, [sp, #-32]!
  402310:	mov	x29, sp
  402314:	str	x0, [sp, #24]
  402318:	str	x1, [sp, #16]
  40231c:	mov	x4, #0x0                   	// #0
  402320:	mov	x3, #0x0                   	// #0
  402324:	mov	x2, #0x0                   	// #0
  402328:	ldr	x1, [sp, #16]
  40232c:	ldr	x0, [sp, #24]
  402330:	bl	401e30 <fstab_filter_options@plt>
  402334:	cmp	w0, #0x0
  402338:	cset	w0, ne  // ne = any
  40233c:	and	w0, w0, #0xff
  402340:	ldp	x29, x30, [sp], #32
  402344:	ret

0000000000402348 <fstab_test_yes_no_option>:
  402348:	stp	x29, x30, [sp, #-48]!
  40234c:	mov	x29, sp
  402350:	str	x0, [sp, #24]
  402354:	str	x1, [sp, #16]
  402358:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  40235c:	add	x0, x0, #0x700
  402360:	ldr	x1, [x0]
  402364:	str	x1, [sp, #40]
  402368:	mov	x1, #0x0                   	// #0
  40236c:	add	x0, sp, #0x20
  402370:	mov	x4, #0x0                   	// #0
  402374:	mov	x3, #0x0                   	// #0
  402378:	mov	x2, x0
  40237c:	ldr	x1, [sp, #16]
  402380:	ldr	x0, [sp, #24]
  402384:	bl	401e30 <fstab_filter_options@plt>
  402388:	lsr	w0, w0, #31
  40238c:	and	w0, w0, #0xff
  402390:	and	x0, x0, #0xff
  402394:	cmp	x0, #0x0
  402398:	b.eq	4023c4 <fstab_test_yes_no_option+0x7c>  // b.none
  40239c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4023a0:	add	x1, x0, #0xca3
  4023a4:	adrp	x0, 407000 <_fini+0x3ac>
  4023a8:	add	x4, x0, #0xaf8
  4023ac:	mov	w3, #0x1c                  	// #28
  4023b0:	mov	x2, x1
  4023b4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4023b8:	add	x1, x0, #0xcc0
  4023bc:	mov	w0, #0x0                   	// #0
  4023c0:	bl	401cd0 <log_assert_failed_realm@plt>
  4023c4:	ldr	x0, [sp, #32]
  4023c8:	ldr	x1, [sp, #16]
  4023cc:	cmp	x1, x0
  4023d0:	cset	w0, eq  // eq = none
  4023d4:	and	w0, w0, #0xff
  4023d8:	mov	w1, w0
  4023dc:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4023e0:	add	x0, x0, #0x700
  4023e4:	ldr	x2, [sp, #40]
  4023e8:	ldr	x0, [x0]
  4023ec:	eor	x0, x2, x0
  4023f0:	cmp	x0, #0x0
  4023f4:	b.eq	4023fc <fstab_test_yes_no_option+0xb4>  // b.none
  4023f8:	bl	401e60 <__stack_chk_fail@plt>
  4023fc:	mov	w0, w1
  402400:	ldp	x29, x30, [sp], #48
  402404:	ret

0000000000402408 <fstab_path>:
  402408:	stp	x29, x30, [sp, #-16]!
  40240c:	mov	x29, sp
  402410:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402414:	add	x0, x0, #0xd00
  402418:	bl	401d10 <secure_getenv@plt>
  40241c:	cmp	x0, #0x0
  402420:	b.ne	40242c <fstab_path+0x24>  // b.any
  402424:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402428:	add	x0, x0, #0xd10
  40242c:	ldp	x29, x30, [sp], #16
  402430:	ret

0000000000402434 <save_argc_argv>:
  402434:	sub	sp, sp, #0x10
  402438:	str	w0, [sp, #12]
  40243c:	str	x1, [sp]
  402440:	adrp	x0, 41a000 <arg_fstab_enabled>
  402444:	add	x0, x0, #0x18
  402448:	ldr	w1, [sp, #12]
  40244c:	str	w1, [x0]
  402450:	adrp	x0, 41a000 <arg_fstab_enabled>
  402454:	add	x0, x0, #0x10
  402458:	ldr	x1, [sp]
  40245c:	str	x1, [x0]
  402460:	nop
  402464:	add	sp, sp, #0x10
  402468:	ret

000000000040246c <streq_ptr>:
  40246c:	stp	x29, x30, [sp, #-32]!
  402470:	mov	x29, sp
  402474:	str	x0, [sp, #24]
  402478:	str	x1, [sp, #16]
  40247c:	ldr	x1, [sp, #16]
  402480:	ldr	x0, [sp, #24]
  402484:	bl	401bd0 <strcmp_ptr@plt>
  402488:	cmp	w0, #0x0
  40248c:	cset	w0, eq  // eq = none
  402490:	and	w0, w0, #0xff
  402494:	ldp	x29, x30, [sp], #32
  402498:	ret

000000000040249c <strna>:
  40249c:	sub	sp, sp, #0x10
  4024a0:	str	x0, [sp, #8]
  4024a4:	ldr	x0, [sp, #8]
  4024a8:	cmp	x0, #0x0
  4024ac:	b.ne	4024b8 <strna+0x1c>  // b.any
  4024b0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4024b4:	add	x0, x0, #0xd20
  4024b8:	add	sp, sp, #0x10
  4024bc:	ret

00000000004024c0 <yes_no>:
  4024c0:	sub	sp, sp, #0x10
  4024c4:	strb	w0, [sp, #15]
  4024c8:	ldrb	w0, [sp, #15]
  4024cc:	cmp	w0, #0x0
  4024d0:	b.eq	4024e0 <yes_no+0x20>  // b.none
  4024d4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4024d8:	add	x0, x0, #0xd28
  4024dc:	b	4024e8 <yes_no+0x28>
  4024e0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4024e4:	add	x0, x0, #0xd30
  4024e8:	add	sp, sp, #0x10
  4024ec:	ret

00000000004024f0 <isempty>:
  4024f0:	sub	sp, sp, #0x10
  4024f4:	str	x0, [sp, #8]
  4024f8:	ldr	x0, [sp, #8]
  4024fc:	cmp	x0, #0x0
  402500:	b.eq	402514 <isempty+0x24>  // b.none
  402504:	ldr	x0, [sp, #8]
  402508:	ldrb	w0, [x0]
  40250c:	cmp	w0, #0x0
  402510:	b.ne	40251c <isempty+0x2c>  // b.any
  402514:	mov	w0, #0x1                   	// #1
  402518:	b	402520 <isempty+0x30>
  40251c:	mov	w0, #0x0                   	// #0
  402520:	and	w0, w0, #0x1
  402524:	and	w0, w0, #0xff
  402528:	add	sp, sp, #0x10
  40252c:	ret

0000000000402530 <static_destruct>:
  402530:	stp	x29, x30, [sp, #-32]!
  402534:	mov	x29, sp
  402538:	adrp	x0, 407000 <_fini+0x3ac>
  40253c:	add	x0, x0, #0x9e0
  402540:	ldr	x0, [x0]
  402544:	cmp	x0, #0x0
  402548:	b.eq	4025ac <static_destruct+0x7c>  // b.none
  40254c:	adrp	x0, 407000 <_fini+0x3ac>
  402550:	add	x0, x0, #0x9e0
  402554:	ldr	x0, [x0]
  402558:	mov	x1, #0x8                   	// #8
  40255c:	bl	4021f8 <ALIGN_TO>
  402560:	str	x0, [sp, #24]
  402564:	b	402590 <static_destruct+0x60>
  402568:	ldr	x0, [sp, #24]
  40256c:	ldr	x1, [x0, #8]
  402570:	ldr	x0, [sp, #24]
  402574:	ldr	x0, [x0]
  402578:	blr	x1
  40257c:	ldr	x0, [sp, #24]
  402580:	add	x0, x0, #0x10
  402584:	mov	x1, #0x8                   	// #8
  402588:	bl	4021f8 <ALIGN_TO>
  40258c:	str	x0, [sp, #24]
  402590:	ldr	x1, [sp, #24]
  402594:	adrp	x0, 407000 <_fini+0x3ac>
  402598:	add	x0, x0, #0x9e8
  40259c:	ldr	x0, [x0]
  4025a0:	cmp	x1, x0
  4025a4:	b.cc	402568 <static_destruct+0x38>  // b.lo, b.ul, b.last
  4025a8:	b	4025b0 <static_destruct+0x80>
  4025ac:	nop
  4025b0:	ldp	x29, x30, [sp], #32
  4025b4:	ret

00000000004025b8 <endmntentp>:
  4025b8:	stp	x29, x30, [sp, #-32]!
  4025bc:	mov	x29, sp
  4025c0:	str	x0, [sp, #24]
  4025c4:	ldr	x0, [sp, #24]
  4025c8:	ldr	x0, [x0]
  4025cc:	cmp	x0, #0x0
  4025d0:	b.eq	4025e0 <endmntentp+0x28>  // b.none
  4025d4:	ldr	x0, [sp, #24]
  4025d8:	ldr	x0, [x0]
  4025dc:	bl	401db0 <endmntent@plt>
  4025e0:	nop
  4025e4:	ldp	x29, x30, [sp], #32
  4025e8:	ret

00000000004025ec <strv_freep>:
  4025ec:	stp	x29, x30, [sp, #-32]!
  4025f0:	mov	x29, sp
  4025f4:	str	x0, [sp, #24]
  4025f8:	ldr	x0, [sp, #24]
  4025fc:	ldr	x0, [x0]
  402600:	cmp	x0, #0x0
  402604:	b.eq	402614 <strv_freep+0x28>  // b.none
  402608:	ldr	x0, [sp, #24]
  40260c:	ldr	x0, [x0]
  402610:	bl	401e20 <strv_free@plt>
  402614:	nop
  402618:	ldp	x29, x30, [sp], #32
  40261c:	ret

0000000000402620 <strv_join>:
  402620:	stp	x29, x30, [sp, #-32]!
  402624:	mov	x29, sp
  402628:	str	x0, [sp, #24]
  40262c:	str	x1, [sp, #16]
  402630:	mov	x2, #0x0                   	// #0
  402634:	ldr	x1, [sp, #16]
  402638:	ldr	x0, [sp, #24]
  40263c:	bl	401ef0 <strv_join_prefix@plt>
  402640:	ldp	x29, x30, [sp], #32
  402644:	ret

0000000000402648 <proc_cmdline_value_missing>:
  402648:	stp	x29, x30, [sp, #-48]!
  40264c:	mov	x29, sp
  402650:	str	x0, [sp, #24]
  402654:	str	x1, [sp, #16]
  402658:	ldr	x0, [sp, #16]
  40265c:	cmp	x0, #0x0
  402660:	b.ne	4026e4 <proc_cmdline_value_missing+0x9c>  // b.any
  402664:	mov	w0, #0x4                   	// #4
  402668:	str	w0, [sp, #36]
  40266c:	str	wzr, [sp, #40]
  402670:	str	wzr, [sp, #44]
  402674:	ldr	w0, [sp, #44]
  402678:	bl	402020 <log_get_max_level_realm@plt>
  40267c:	mov	w1, w0
  402680:	ldr	w0, [sp, #36]
  402684:	and	w0, w0, #0x7
  402688:	cmp	w1, w0
  40268c:	b.lt	4026d4 <proc_cmdline_value_missing+0x8c>  // b.tstop
  402690:	ldr	w0, [sp, #44]
  402694:	lsl	w1, w0, #10
  402698:	ldr	w0, [sp, #36]
  40269c:	orr	w7, w1, w0
  4026a0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4026a4:	add	x1, x0, #0xd3b
  4026a8:	ldr	x6, [sp, #24]
  4026ac:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4026b0:	add	x5, x0, #0xd58
  4026b4:	adrp	x0, 407000 <_fini+0x3ac>
  4026b8:	add	x4, x0, #0xba0
  4026bc:	mov	w3, #0x21                  	// #33
  4026c0:	mov	x2, x1
  4026c4:	ldr	w1, [sp, #40]
  4026c8:	mov	w0, w7
  4026cc:	bl	401ee0 <log_internal_realm@plt>
  4026d0:	b	4026dc <proc_cmdline_value_missing+0x94>
  4026d4:	ldr	w0, [sp, #40]
  4026d8:	cmp	w0, #0x0
  4026dc:	mov	w0, #0x1                   	// #1
  4026e0:	b	4026e8 <proc_cmdline_value_missing+0xa0>
  4026e4:	mov	w0, #0x0                   	// #0
  4026e8:	ldp	x29, x30, [sp], #48
  4026ec:	ret

00000000004026f0 <specifier_escape>:
  4026f0:	stp	x29, x30, [sp, #-32]!
  4026f4:	mov	x29, sp
  4026f8:	str	x0, [sp, #24]
  4026fc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402700:	add	x2, x0, #0xd98
  402704:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402708:	add	x1, x0, #0xda0
  40270c:	ldr	x0, [sp, #24]
  402710:	bl	401d90 <strreplace@plt>
  402714:	ldp	x29, x30, [sp], #32
  402718:	ret

000000000040271c <__unique_prefix_static_destructor_wrapper0>:
  40271c:	stp	x29, x30, [sp, #-48]!
  402720:	mov	x29, sp
  402724:	str	x0, [sp, #24]
  402728:	ldr	x0, [sp, #24]
  40272c:	str	x0, [sp, #40]
  402730:	ldr	x0, [sp, #40]
  402734:	bl	402248 <freep>
  402738:	nop
  40273c:	ldp	x29, x30, [sp], #48
  402740:	ret

0000000000402744 <__unique_prefix_static_destructor_wrapper1>:
  402744:	stp	x29, x30, [sp, #-48]!
  402748:	mov	x29, sp
  40274c:	str	x0, [sp, #24]
  402750:	ldr	x0, [sp, #24]
  402754:	str	x0, [sp, #40]
  402758:	ldr	x0, [sp, #40]
  40275c:	bl	402248 <freep>
  402760:	nop
  402764:	ldp	x29, x30, [sp], #48
  402768:	ret

000000000040276c <__unique_prefix_static_destructor_wrapper2>:
  40276c:	stp	x29, x30, [sp, #-48]!
  402770:	mov	x29, sp
  402774:	str	x0, [sp, #24]
  402778:	ldr	x0, [sp, #24]
  40277c:	str	x0, [sp, #40]
  402780:	ldr	x0, [sp, #40]
  402784:	bl	402248 <freep>
  402788:	nop
  40278c:	ldp	x29, x30, [sp], #48
  402790:	ret

0000000000402794 <__unique_prefix_static_destructor_wrapper3>:
  402794:	stp	x29, x30, [sp, #-48]!
  402798:	mov	x29, sp
  40279c:	str	x0, [sp, #24]
  4027a0:	ldr	x0, [sp, #24]
  4027a4:	str	x0, [sp, #40]
  4027a8:	ldr	x0, [sp, #40]
  4027ac:	bl	402248 <freep>
  4027b0:	nop
  4027b4:	ldp	x29, x30, [sp], #48
  4027b8:	ret

00000000004027bc <__unique_prefix_static_destructor_wrapper4>:
  4027bc:	stp	x29, x30, [sp, #-48]!
  4027c0:	mov	x29, sp
  4027c4:	str	x0, [sp, #24]
  4027c8:	ldr	x0, [sp, #24]
  4027cc:	str	x0, [sp, #40]
  4027d0:	ldr	x0, [sp, #40]
  4027d4:	bl	402248 <freep>
  4027d8:	nop
  4027dc:	ldp	x29, x30, [sp], #48
  4027e0:	ret

00000000004027e4 <__unique_prefix_static_destructor_wrapper5>:
  4027e4:	stp	x29, x30, [sp, #-48]!
  4027e8:	mov	x29, sp
  4027ec:	str	x0, [sp, #24]
  4027f0:	ldr	x0, [sp, #24]
  4027f4:	str	x0, [sp, #40]
  4027f8:	ldr	x0, [sp, #40]
  4027fc:	bl	402248 <freep>
  402800:	nop
  402804:	ldp	x29, x30, [sp], #48
  402808:	ret

000000000040280c <__unique_prefix_static_destructor_wrapper6>:
  40280c:	stp	x29, x30, [sp, #-48]!
  402810:	mov	x29, sp
  402814:	str	x0, [sp, #24]
  402818:	ldr	x0, [sp, #24]
  40281c:	str	x0, [sp, #40]
  402820:	ldr	x0, [sp, #40]
  402824:	bl	402248 <freep>
  402828:	nop
  40282c:	ldp	x29, x30, [sp], #48
  402830:	ret

0000000000402834 <write_options>:
  402834:	stp	x29, x30, [sp, #-64]!
  402838:	mov	x29, sp
  40283c:	str	x19, [sp, #16]
  402840:	str	x0, [sp, #40]
  402844:	str	x1, [sp, #32]
  402848:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  40284c:	add	x0, x0, #0x700
  402850:	ldr	x1, [x0]
  402854:	str	x1, [sp, #56]
  402858:	mov	x1, #0x0                   	// #0
  40285c:	str	xzr, [sp, #48]
  402860:	ldr	x0, [sp, #32]
  402864:	bl	4024f0 <isempty>
  402868:	and	w0, w0, #0xff
  40286c:	cmp	w0, #0x0
  402870:	b.eq	40287c <write_options+0x48>  // b.none
  402874:	mov	w19, #0x0                   	// #0
  402878:	b	4028f4 <write_options+0xc0>
  40287c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402880:	add	x1, x0, #0xda8
  402884:	ldr	x0, [sp, #32]
  402888:	bl	401f40 <strcmp@plt>
  40288c:	cmp	w0, #0x0
  402890:	b.ne	40289c <write_options+0x68>  // b.any
  402894:	mov	w19, #0x0                   	// #0
  402898:	b	4028f4 <write_options+0xc0>
  40289c:	ldr	x0, [sp, #32]
  4028a0:	bl	4026f0 <specifier_escape>
  4028a4:	str	x0, [sp, #48]
  4028a8:	ldr	x0, [sp, #48]
  4028ac:	cmp	x0, #0x0
  4028b0:	b.ne	4028d8 <write_options+0xa4>  // b.any
  4028b4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4028b8:	add	x1, x0, #0xdbb
  4028bc:	adrp	x0, 407000 <_fini+0x3ac>
  4028c0:	add	x3, x0, #0x9f0
  4028c4:	mov	w2, #0x48                  	// #72
  4028c8:	mov	w0, #0x0                   	// #0
  4028cc:	bl	402000 <log_oom_internal@plt>
  4028d0:	mov	w19, w0
  4028d4:	b	4028f4 <write_options+0xc0>
  4028d8:	ldr	x0, [sp, #48]
  4028dc:	mov	x2, x0
  4028e0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4028e4:	add	x1, x0, #0xde8
  4028e8:	ldr	x0, [sp, #40]
  4028ec:	bl	401ca0 <fprintf@plt>
  4028f0:	mov	w19, #0x1                   	// #1
  4028f4:	add	x0, sp, #0x30
  4028f8:	bl	402248 <freep>
  4028fc:	mov	w1, w19
  402900:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  402904:	add	x0, x0, #0x700
  402908:	ldr	x2, [sp, #56]
  40290c:	ldr	x0, [x0]
  402910:	eor	x0, x2, x0
  402914:	cmp	x0, #0x0
  402918:	b.eq	402920 <write_options+0xec>  // b.none
  40291c:	bl	401e60 <__stack_chk_fail@plt>
  402920:	mov	w0, w1
  402924:	ldr	x19, [sp, #16]
  402928:	ldp	x29, x30, [sp], #64
  40292c:	ret

0000000000402930 <write_what>:
  402930:	stp	x29, x30, [sp, #-64]!
  402934:	mov	x29, sp
  402938:	str	x19, [sp, #16]
  40293c:	str	x0, [sp, #40]
  402940:	str	x1, [sp, #32]
  402944:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  402948:	add	x0, x0, #0x700
  40294c:	ldr	x1, [x0]
  402950:	str	x1, [sp, #56]
  402954:	mov	x1, #0x0                   	// #0
  402958:	str	xzr, [sp, #48]
  40295c:	ldr	x0, [sp, #32]
  402960:	bl	4026f0 <specifier_escape>
  402964:	str	x0, [sp, #48]
  402968:	ldr	x0, [sp, #48]
  40296c:	cmp	x0, #0x0
  402970:	b.ne	402998 <write_what+0x68>  // b.any
  402974:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402978:	add	x1, x0, #0xdbb
  40297c:	adrp	x0, 407000 <_fini+0x3ac>
  402980:	add	x3, x0, #0xa00
  402984:	mov	w2, #0x53                  	// #83
  402988:	mov	w0, #0x0                   	// #0
  40298c:	bl	402000 <log_oom_internal@plt>
  402990:	mov	w19, w0
  402994:	b	4029b4 <write_what+0x84>
  402998:	ldr	x0, [sp, #48]
  40299c:	mov	x2, x0
  4029a0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4029a4:	add	x1, x0, #0xdf8
  4029a8:	ldr	x0, [sp, #40]
  4029ac:	bl	401ca0 <fprintf@plt>
  4029b0:	mov	w19, #0x1                   	// #1
  4029b4:	add	x0, sp, #0x30
  4029b8:	bl	402248 <freep>
  4029bc:	mov	w1, w19
  4029c0:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4029c4:	add	x0, x0, #0x700
  4029c8:	ldr	x2, [sp, #56]
  4029cc:	ldr	x0, [x0]
  4029d0:	eor	x0, x2, x0
  4029d4:	cmp	x0, #0x0
  4029d8:	b.eq	4029e0 <write_what+0xb0>  // b.none
  4029dc:	bl	401e60 <__stack_chk_fail@plt>
  4029e0:	mov	w0, w1
  4029e4:	ldr	x19, [sp, #16]
  4029e8:	ldp	x29, x30, [sp], #64
  4029ec:	ret

00000000004029f0 <add_swap>:
  4029f0:	stp	x29, x30, [sp, #-160]!
  4029f4:	mov	x29, sp
  4029f8:	str	x19, [sp, #16]
  4029fc:	str	x0, [sp, #56]
  402a00:	str	x1, [sp, #48]
  402a04:	str	w2, [sp, #44]
  402a08:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  402a0c:	add	x0, x0, #0x700
  402a10:	ldr	x1, [x0]
  402a14:	str	x1, [sp, #152]
  402a18:	mov	x1, #0x0                   	// #0
  402a1c:	str	xzr, [sp, #136]
  402a20:	str	xzr, [sp, #144]
  402a24:	ldr	x0, [sp, #56]
  402a28:	cmp	x0, #0x0
  402a2c:	cset	w0, eq  // eq = none
  402a30:	and	w0, w0, #0xff
  402a34:	and	x0, x0, #0xff
  402a38:	cmp	x0, #0x0
  402a3c:	b.eq	402a68 <add_swap+0x78>  // b.none
  402a40:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402a44:	add	x1, x0, #0xdbb
  402a48:	adrp	x0, 407000 <_fini+0x3ac>
  402a4c:	add	x4, x0, #0xa10
  402a50:	mov	w3, #0x62                  	// #98
  402a54:	mov	x2, x1
  402a58:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402a5c:	add	x1, x0, #0xe08
  402a60:	mov	w0, #0x0                   	// #0
  402a64:	bl	401cd0 <log_assert_failed_realm@plt>
  402a68:	ldr	x0, [sp, #48]
  402a6c:	cmp	x0, #0x0
  402a70:	cset	w0, eq  // eq = none
  402a74:	and	w0, w0, #0xff
  402a78:	and	x0, x0, #0xff
  402a7c:	cmp	x0, #0x0
  402a80:	b.eq	402aac <add_swap+0xbc>  // b.none
  402a84:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402a88:	add	x1, x0, #0xdbb
  402a8c:	adrp	x0, 407000 <_fini+0x3ac>
  402a90:	add	x4, x0, #0xa10
  402a94:	mov	w3, #0x63                  	// #99
  402a98:	mov	x2, x1
  402a9c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402aa0:	add	x1, x0, #0xe10
  402aa4:	mov	w0, #0x0                   	// #0
  402aa8:	bl	401cd0 <log_assert_failed_realm@plt>
  402aac:	mov	w1, #0x0                   	// #0
  402ab0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402ab4:	add	x0, x0, #0xe18
  402ab8:	bl	401d40 <access@plt>
  402abc:	cmp	w0, #0x0
  402ac0:	b.ge	402b44 <add_swap+0x154>  // b.tcont
  402ac4:	mov	w0, #0x6                   	// #6
  402ac8:	str	w0, [sp, #124]
  402acc:	str	wzr, [sp, #128]
  402ad0:	str	wzr, [sp, #132]
  402ad4:	ldr	w0, [sp, #132]
  402ad8:	bl	402020 <log_get_max_level_realm@plt>
  402adc:	mov	w1, w0
  402ae0:	ldr	w0, [sp, #124]
  402ae4:	and	w0, w0, #0x7
  402ae8:	cmp	w1, w0
  402aec:	b.lt	402b34 <add_swap+0x144>  // b.tstop
  402af0:	ldr	w0, [sp, #132]
  402af4:	lsl	w1, w0, #10
  402af8:	ldr	w0, [sp, #124]
  402afc:	orr	w7, w1, w0
  402b00:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402b04:	add	x1, x0, #0xdbb
  402b08:	ldr	x6, [sp, #56]
  402b0c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402b10:	add	x5, x0, #0xe28
  402b14:	adrp	x0, 407000 <_fini+0x3ac>
  402b18:	add	x4, x0, #0xa20
  402b1c:	mov	w3, #0x66                  	// #102
  402b20:	mov	x2, x1
  402b24:	ldr	w1, [sp, #128]
  402b28:	mov	w0, w7
  402b2c:	bl	401ee0 <log_internal_realm@plt>
  402b30:	b	402b3c <add_swap+0x14c>
  402b34:	ldr	w0, [sp, #128]
  402b38:	cmp	w0, #0x0
  402b3c:	mov	w19, #0x0                   	// #0
  402b40:	b	402f68 <add_swap+0x578>
  402b44:	bl	401f20 <detect_container@plt>
  402b48:	cmp	w0, #0x0
  402b4c:	b.le	402bd0 <add_swap+0x1e0>
  402b50:	mov	w0, #0x6                   	// #6
  402b54:	str	w0, [sp, #112]
  402b58:	str	wzr, [sp, #116]
  402b5c:	str	wzr, [sp, #120]
  402b60:	ldr	w0, [sp, #120]
  402b64:	bl	402020 <log_get_max_level_realm@plt>
  402b68:	mov	w1, w0
  402b6c:	ldr	w0, [sp, #112]
  402b70:	and	w0, w0, #0x7
  402b74:	cmp	w1, w0
  402b78:	b.lt	402bc0 <add_swap+0x1d0>  // b.tstop
  402b7c:	ldr	w0, [sp, #120]
  402b80:	lsl	w1, w0, #10
  402b84:	ldr	w0, [sp, #112]
  402b88:	orr	w7, w1, w0
  402b8c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402b90:	add	x1, x0, #0xdbb
  402b94:	ldr	x6, [sp, #56]
  402b98:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402b9c:	add	x5, x0, #0xe60
  402ba0:	adrp	x0, 407000 <_fini+0x3ac>
  402ba4:	add	x4, x0, #0xa20
  402ba8:	mov	w3, #0x6b                  	// #107
  402bac:	mov	x2, x1
  402bb0:	ldr	w1, [sp, #116]
  402bb4:	mov	w0, w7
  402bb8:	bl	401ee0 <log_internal_realm@plt>
  402bbc:	b	402bc8 <add_swap+0x1d8>
  402bc0:	ldr	w0, [sp, #116]
  402bc4:	cmp	w0, #0x0
  402bc8:	mov	w19, #0x0                   	// #0
  402bcc:	b	402f68 <add_swap+0x578>
  402bd0:	add	x0, sp, #0x88
  402bd4:	mov	x2, x0
  402bd8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402bdc:	add	x1, x0, #0xea0
  402be0:	ldr	x0, [sp, #56]
  402be4:	bl	401c20 <unit_name_from_path@plt>
  402be8:	str	w0, [sp, #72]
  402bec:	ldr	w0, [sp, #72]
  402bf0:	cmp	w0, #0x0
  402bf4:	b.ge	402c84 <add_swap+0x294>  // b.tcont
  402bf8:	mov	w0, #0x3                   	// #3
  402bfc:	str	w0, [sp, #100]
  402c00:	ldr	w0, [sp, #72]
  402c04:	str	w0, [sp, #104]
  402c08:	str	wzr, [sp, #108]
  402c0c:	ldr	w0, [sp, #108]
  402c10:	bl	402020 <log_get_max_level_realm@plt>
  402c14:	mov	w1, w0
  402c18:	ldr	w0, [sp, #100]
  402c1c:	and	w0, w0, #0x7
  402c20:	cmp	w1, w0
  402c24:	b.lt	402c6c <add_swap+0x27c>  // b.tstop
  402c28:	ldr	w0, [sp, #108]
  402c2c:	lsl	w1, w0, #10
  402c30:	ldr	w0, [sp, #100]
  402c34:	orr	w6, w1, w0
  402c38:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402c3c:	add	x1, x0, #0xdbb
  402c40:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402c44:	add	x5, x0, #0xea8
  402c48:	adrp	x0, 407000 <_fini+0x3ac>
  402c4c:	add	x4, x0, #0xa20
  402c50:	mov	w3, #0x71                  	// #113
  402c54:	mov	x2, x1
  402c58:	ldr	w1, [sp, #104]
  402c5c:	mov	w0, w6
  402c60:	bl	401ee0 <log_internal_realm@plt>
  402c64:	mov	w19, w0
  402c68:	b	402f68 <add_swap+0x578>
  402c6c:	ldr	w0, [sp, #104]
  402c70:	cmp	w0, #0x0
  402c74:	cneg	w0, w0, lt  // lt = tstop
  402c78:	and	w0, w0, #0xff
  402c7c:	neg	w19, w0
  402c80:	b	402f68 <add_swap+0x578>
  402c84:	adrp	x0, 41a000 <arg_fstab_enabled>
  402c88:	add	x0, x0, #0x20
  402c8c:	ldr	x19, [x0]
  402c90:	bl	402408 <fstab_path>
  402c94:	mov	x4, x0
  402c98:	ldr	x0, [sp, #136]
  402c9c:	add	x1, sp, #0x90
  402ca0:	mov	x3, x1
  402ca4:	mov	x2, x0
  402ca8:	mov	x1, x4
  402cac:	mov	x0, x19
  402cb0:	bl	401f80 <generator_open_unit_file@plt>
  402cb4:	str	w0, [sp, #72]
  402cb8:	ldr	w0, [sp, #72]
  402cbc:	cmp	w0, #0x0
  402cc0:	b.ge	402ccc <add_swap+0x2dc>  // b.tcont
  402cc4:	ldr	w19, [sp, #72]
  402cc8:	b	402f68 <add_swap+0x578>
  402ccc:	ldr	x19, [sp, #144]
  402cd0:	bl	402408 <fstab_path>
  402cd4:	mov	x2, x0
  402cd8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402cdc:	add	x1, x0, #0xed0
  402ce0:	mov	x0, x19
  402ce4:	bl	401ca0 <fprintf@plt>
  402ce8:	ldr	x0, [sp, #144]
  402cec:	ldr	x1, [sp, #56]
  402cf0:	bl	402930 <write_what>
  402cf4:	str	w0, [sp, #72]
  402cf8:	ldr	w0, [sp, #72]
  402cfc:	cmp	w0, #0x0
  402d00:	b.ge	402d0c <add_swap+0x31c>  // b.tcont
  402d04:	ldr	w19, [sp, #72]
  402d08:	b	402f68 <add_swap+0x578>
  402d0c:	ldr	x2, [sp, #144]
  402d10:	ldr	x0, [sp, #48]
  402d14:	ldr	x0, [x0, #24]
  402d18:	mov	x1, x0
  402d1c:	mov	x0, x2
  402d20:	bl	402834 <write_options>
  402d24:	str	w0, [sp, #72]
  402d28:	ldr	w0, [sp, #72]
  402d2c:	cmp	w0, #0x0
  402d30:	b.ge	402d3c <add_swap+0x34c>  // b.tcont
  402d34:	ldr	w19, [sp, #72]
  402d38:	b	402f68 <add_swap+0x578>
  402d3c:	ldr	x0, [sp, #144]
  402d40:	bl	402010 <fflush_and_check@plt>
  402d44:	str	w0, [sp, #72]
  402d48:	ldr	w0, [sp, #72]
  402d4c:	cmp	w0, #0x0
  402d50:	b.ge	402de8 <add_swap+0x3f8>  // b.tcont
  402d54:	mov	w0, #0x3                   	// #3
  402d58:	str	w0, [sp, #88]
  402d5c:	ldr	w0, [sp, #72]
  402d60:	str	w0, [sp, #92]
  402d64:	str	wzr, [sp, #96]
  402d68:	ldr	w0, [sp, #96]
  402d6c:	bl	402020 <log_get_max_level_realm@plt>
  402d70:	mov	w1, w0
  402d74:	ldr	w0, [sp, #88]
  402d78:	and	w0, w0, #0x7
  402d7c:	cmp	w1, w0
  402d80:	b.lt	402dd0 <add_swap+0x3e0>  // b.tstop
  402d84:	ldr	w0, [sp, #96]
  402d88:	lsl	w1, w0, #10
  402d8c:	ldr	w0, [sp, #88]
  402d90:	orr	w7, w1, w0
  402d94:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402d98:	add	x1, x0, #0xdbb
  402d9c:	ldr	x0, [sp, #136]
  402da0:	mov	x6, x0
  402da4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402da8:	add	x5, x0, #0xf28
  402dac:	adrp	x0, 407000 <_fini+0x3ac>
  402db0:	add	x4, x0, #0xa20
  402db4:	mov	w3, #0x88                  	// #136
  402db8:	mov	x2, x1
  402dbc:	ldr	w1, [sp, #92]
  402dc0:	mov	w0, w7
  402dc4:	bl	401ee0 <log_internal_realm@plt>
  402dc8:	mov	w19, w0
  402dcc:	b	402f68 <add_swap+0x578>
  402dd0:	ldr	w0, [sp, #92]
  402dd4:	cmp	w0, #0x0
  402dd8:	cneg	w0, w0, lt  // lt = tstop
  402ddc:	and	w0, w0, #0xff
  402de0:	neg	w19, w0
  402de4:	b	402f68 <add_swap+0x578>
  402de8:	adrp	x0, 41a000 <arg_fstab_enabled>
  402dec:	add	x0, x0, #0x20
  402df0:	ldr	x5, [x0]
  402df4:	ldr	x0, [sp, #48]
  402df8:	ldr	x0, [x0, #24]
  402dfc:	mov	x4, #0x0                   	// #0
  402e00:	mov	x3, x0
  402e04:	ldr	x2, [sp, #56]
  402e08:	ldr	x1, [sp, #56]
  402e0c:	mov	x0, x5
  402e10:	bl	401c80 <generator_write_timeouts@plt>
  402e14:	str	w0, [sp, #72]
  402e18:	ldr	w0, [sp, #72]
  402e1c:	cmp	w0, #0x0
  402e20:	b.ge	402e2c <add_swap+0x43c>  // b.tcont
  402e24:	ldr	w19, [sp, #72]
  402e28:	b	402f68 <add_swap+0x578>
  402e2c:	ldr	w0, [sp, #44]
  402e30:	and	w0, w0, #0x8
  402e34:	cmp	w0, #0x0
  402e38:	b.eq	402e68 <add_swap+0x478>  // b.none
  402e3c:	adrp	x0, 41a000 <arg_fstab_enabled>
  402e40:	add	x0, x0, #0x20
  402e44:	ldr	x0, [x0]
  402e48:	ldr	x1, [sp, #56]
  402e4c:	bl	401d70 <generator_hook_up_mkswap@plt>
  402e50:	str	w0, [sp, #72]
  402e54:	ldr	w0, [sp, #72]
  402e58:	cmp	w0, #0x0
  402e5c:	b.ge	402e68 <add_swap+0x478>  // b.tcont
  402e60:	ldr	w19, [sp, #72]
  402e64:	b	402f68 <add_swap+0x578>
  402e68:	ldr	w0, [sp, #44]
  402e6c:	and	w0, w0, #0x10
  402e70:	cmp	w0, #0x0
  402e74:	b.eq	402ef0 <add_swap+0x500>  // b.none
  402e78:	mov	w0, #0x4                   	// #4
  402e7c:	str	w0, [sp, #76]
  402e80:	str	wzr, [sp, #80]
  402e84:	str	wzr, [sp, #84]
  402e88:	ldr	w0, [sp, #84]
  402e8c:	bl	402020 <log_get_max_level_realm@plt>
  402e90:	mov	w1, w0
  402e94:	ldr	w0, [sp, #76]
  402e98:	and	w0, w0, #0x7
  402e9c:	cmp	w1, w0
  402ea0:	b.lt	402ee8 <add_swap+0x4f8>  // b.tstop
  402ea4:	ldr	w0, [sp, #84]
  402ea8:	lsl	w1, w0, #10
  402eac:	ldr	w0, [sp, #76]
  402eb0:	orr	w7, w1, w0
  402eb4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402eb8:	add	x1, x0, #0xdbb
  402ebc:	ldr	x6, [sp, #56]
  402ec0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402ec4:	add	x5, x0, #0xf50
  402ec8:	adrp	x0, 407000 <_fini+0x3ac>
  402ecc:	add	x4, x0, #0xa20
  402ed0:	mov	w3, #0x97                  	// #151
  402ed4:	mov	x2, x1
  402ed8:	ldr	w1, [sp, #80]
  402edc:	mov	w0, w7
  402ee0:	bl	401ee0 <log_internal_realm@plt>
  402ee4:	b	402ef0 <add_swap+0x500>
  402ee8:	ldr	w0, [sp, #80]
  402eec:	cmp	w0, #0x0
  402ef0:	ldr	w0, [sp, #44]
  402ef4:	and	w0, w0, #0x1
  402ef8:	cmp	w0, #0x0
  402efc:	b.ne	402f64 <add_swap+0x574>  // b.any
  402f00:	adrp	x0, 41a000 <arg_fstab_enabled>
  402f04:	add	x0, x0, #0x20
  402f08:	ldr	x4, [x0]
  402f0c:	ldr	w0, [sp, #44]
  402f10:	and	w0, w0, #0x2
  402f14:	cmp	w0, #0x0
  402f18:	b.eq	402f28 <add_swap+0x538>  // b.none
  402f1c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402f20:	add	x0, x0, #0xf88
  402f24:	b	402f30 <add_swap+0x540>
  402f28:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402f2c:	add	x0, x0, #0xf90
  402f30:	ldr	x1, [sp, #136]
  402f34:	mov	x3, x1
  402f38:	mov	x2, x0
  402f3c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402f40:	add	x1, x0, #0xfa0
  402f44:	mov	x0, x4
  402f48:	bl	401e50 <generator_add_symlink@plt>
  402f4c:	str	w0, [sp, #72]
  402f50:	ldr	w0, [sp, #72]
  402f54:	cmp	w0, #0x0
  402f58:	b.ge	402f64 <add_swap+0x574>  // b.tcont
  402f5c:	ldr	w19, [sp, #72]
  402f60:	b	402f68 <add_swap+0x578>
  402f64:	mov	w19, #0x0                   	// #0
  402f68:	add	x0, sp, #0x90
  402f6c:	bl	4022e8 <fclosep>
  402f70:	add	x0, sp, #0x88
  402f74:	bl	402248 <freep>
  402f78:	mov	w1, w19
  402f7c:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  402f80:	add	x0, x0, #0x700
  402f84:	ldr	x2, [sp, #152]
  402f88:	ldr	x0, [x0]
  402f8c:	eor	x0, x2, x0
  402f90:	cmp	x0, #0x0
  402f94:	b.eq	402f9c <add_swap+0x5ac>  // b.none
  402f98:	bl	401e60 <__stack_chk_fail@plt>
  402f9c:	mov	w0, w1
  402fa0:	ldr	x19, [sp, #16]
  402fa4:	ldp	x29, x30, [sp], #160
  402fa8:	ret

0000000000402fac <mount_is_network>:
  402fac:	stp	x29, x30, [sp, #-32]!
  402fb0:	mov	x29, sp
  402fb4:	str	x0, [sp, #24]
  402fb8:	ldr	x0, [sp, #24]
  402fbc:	cmp	x0, #0x0
  402fc0:	cset	w0, eq  // eq = none
  402fc4:	and	w0, w0, #0xff
  402fc8:	and	x0, x0, #0xff
  402fcc:	cmp	x0, #0x0
  402fd0:	b.eq	402ffc <mount_is_network+0x50>  // b.none
  402fd4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402fd8:	add	x1, x0, #0xdbb
  402fdc:	adrp	x0, 407000 <_fini+0x3ac>
  402fe0:	add	x4, x0, #0xa30
  402fe4:	mov	w3, #0xa4                  	// #164
  402fe8:	mov	x2, x1
  402fec:	adrp	x0, 406000 <add_volatile_var+0x3c>
  402ff0:	add	x1, x0, #0xe10
  402ff4:	mov	w0, #0x0                   	// #0
  402ff8:	bl	401cd0 <log_assert_failed_realm@plt>
  402ffc:	ldr	x0, [sp, #24]
  403000:	ldr	x2, [x0, #24]
  403004:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403008:	add	x1, x0, #0xfb0
  40300c:	mov	x0, x2
  403010:	bl	40230c <fstab_test_option>
  403014:	and	w0, w0, #0xff
  403018:	cmp	w0, #0x0
  40301c:	b.ne	403038 <mount_is_network+0x8c>  // b.any
  403020:	ldr	x0, [sp, #24]
  403024:	ldr	x0, [x0, #16]
  403028:	bl	401cf0 <fstype_is_network@plt>
  40302c:	and	w0, w0, #0xff
  403030:	cmp	w0, #0x0
  403034:	b.eq	403040 <mount_is_network+0x94>  // b.none
  403038:	mov	w0, #0x1                   	// #1
  40303c:	b	403044 <mount_is_network+0x98>
  403040:	mov	w0, #0x0                   	// #0
  403044:	and	w0, w0, #0x1
  403048:	and	w0, w0, #0xff
  40304c:	ldp	x29, x30, [sp], #32
  403050:	ret

0000000000403054 <mount_in_initrd>:
  403054:	stp	x29, x30, [sp, #-32]!
  403058:	mov	x29, sp
  40305c:	str	x0, [sp, #24]
  403060:	ldr	x0, [sp, #24]
  403064:	cmp	x0, #0x0
  403068:	cset	w0, eq  // eq = none
  40306c:	and	w0, w0, #0xff
  403070:	and	x0, x0, #0xff
  403074:	cmp	x0, #0x0
  403078:	b.eq	4030a4 <mount_in_initrd+0x50>  // b.none
  40307c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403080:	add	x1, x0, #0xdbb
  403084:	adrp	x0, 407000 <_fini+0x3ac>
  403088:	add	x4, x0, #0xa48
  40308c:	mov	w3, #0xab                  	// #171
  403090:	mov	x2, x1
  403094:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403098:	add	x1, x0, #0xe10
  40309c:	mov	w0, #0x0                   	// #0
  4030a0:	bl	401cd0 <log_assert_failed_realm@plt>
  4030a4:	ldr	x0, [sp, #24]
  4030a8:	ldr	x2, [x0, #24]
  4030ac:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4030b0:	add	x1, x0, #0xfc0
  4030b4:	mov	x0, x2
  4030b8:	bl	40230c <fstab_test_option>
  4030bc:	and	w0, w0, #0xff
  4030c0:	cmp	w0, #0x0
  4030c4:	b.ne	4030e8 <mount_in_initrd+0x94>  // b.any
  4030c8:	ldr	x0, [sp, #24]
  4030cc:	ldr	x2, [x0, #8]
  4030d0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4030d4:	add	x1, x0, #0xfd0
  4030d8:	mov	x0, x2
  4030dc:	bl	401f40 <strcmp@plt>
  4030e0:	cmp	w0, #0x0
  4030e4:	b.ne	4030f0 <mount_in_initrd+0x9c>  // b.any
  4030e8:	mov	w0, #0x1                   	// #1
  4030ec:	b	4030f4 <mount_in_initrd+0xa0>
  4030f0:	mov	w0, #0x0                   	// #0
  4030f4:	and	w0, w0, #0x1
  4030f8:	and	w0, w0, #0xff
  4030fc:	ldp	x29, x30, [sp], #32
  403100:	ret

0000000000403104 <write_timeout>:
  403104:	stp	x29, x30, [sp, #-208]!
  403108:	mov	x29, sp
  40310c:	str	x19, [sp, #16]
  403110:	str	x0, [sp, #72]
  403114:	str	x1, [sp, #64]
  403118:	str	x2, [sp, #56]
  40311c:	str	x3, [sp, #48]
  403120:	str	x4, [sp, #40]
  403124:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  403128:	add	x0, x0, #0x700
  40312c:	ldr	x1, [x0]
  403130:	str	x1, [sp, #200]
  403134:	mov	x1, #0x0                   	// #0
  403138:	str	xzr, [sp, #120]
  40313c:	add	x0, sp, #0x78
  403140:	mov	x4, #0x0                   	// #0
  403144:	mov	x3, x0
  403148:	mov	x2, #0x0                   	// #0
  40314c:	ldr	x1, [sp, #48]
  403150:	ldr	x0, [sp, #56]
  403154:	bl	401e30 <fstab_filter_options@plt>
  403158:	str	w0, [sp, #92]
  40315c:	ldr	w0, [sp, #92]
  403160:	cmp	w0, #0x0
  403164:	b.ge	4031f4 <write_timeout+0xf0>  // b.tcont
  403168:	mov	w0, #0x4                   	// #4
  40316c:	str	w0, [sp, #108]
  403170:	ldr	w0, [sp, #92]
  403174:	str	w0, [sp, #112]
  403178:	str	wzr, [sp, #116]
  40317c:	ldr	w0, [sp, #116]
  403180:	bl	402020 <log_get_max_level_realm@plt>
  403184:	mov	w1, w0
  403188:	ldr	w0, [sp, #108]
  40318c:	and	w0, w0, #0x7
  403190:	cmp	w1, w0
  403194:	b.lt	4031dc <write_timeout+0xd8>  // b.tstop
  403198:	ldr	w0, [sp, #116]
  40319c:	lsl	w1, w0, #10
  4031a0:	ldr	w0, [sp, #108]
  4031a4:	orr	w6, w1, w0
  4031a8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4031ac:	add	x1, x0, #0xdbb
  4031b0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4031b4:	add	x5, x0, #0xfd8
  4031b8:	adrp	x0, 407000 <_fini+0x3ac>
  4031bc:	add	x4, x0, #0xa58
  4031c0:	mov	w3, #0xba                  	// #186
  4031c4:	mov	x2, x1
  4031c8:	ldr	w1, [sp, #112]
  4031cc:	mov	w0, w6
  4031d0:	bl	401ee0 <log_internal_realm@plt>
  4031d4:	mov	w19, w0
  4031d8:	b	4032e0 <write_timeout+0x1dc>
  4031dc:	ldr	w0, [sp, #112]
  4031e0:	cmp	w0, #0x0
  4031e4:	cneg	w0, w0, lt  // lt = tstop
  4031e8:	and	w0, w0, #0xff
  4031ec:	neg	w19, w0
  4031f0:	b	4032e0 <write_timeout+0x1dc>
  4031f4:	ldr	w0, [sp, #92]
  4031f8:	cmp	w0, #0x0
  4031fc:	b.ne	403208 <write_timeout+0x104>  // b.any
  403200:	mov	w19, #0x0                   	// #0
  403204:	b	4032e0 <write_timeout+0x1dc>
  403208:	ldr	x0, [sp, #120]
  40320c:	add	x1, sp, #0x80
  403210:	bl	401be0 <parse_sec_fix_0@plt>
  403214:	str	w0, [sp, #92]
  403218:	ldr	w0, [sp, #92]
  40321c:	cmp	w0, #0x0
  403220:	b.ge	4032ac <write_timeout+0x1a8>  // b.tcont
  403224:	mov	w0, #0x4                   	// #4
  403228:	str	w0, [sp, #96]
  40322c:	str	wzr, [sp, #100]
  403230:	str	wzr, [sp, #104]
  403234:	ldr	w0, [sp, #104]
  403238:	bl	402020 <log_get_max_level_realm@plt>
  40323c:	mov	w1, w0
  403240:	ldr	w0, [sp, #96]
  403244:	and	w0, w0, #0x7
  403248:	cmp	w1, w0
  40324c:	b.lt	40329c <write_timeout+0x198>  // b.tstop
  403250:	ldr	w0, [sp, #104]
  403254:	lsl	w1, w0, #10
  403258:	ldr	w0, [sp, #96]
  40325c:	orr	w8, w1, w0
  403260:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403264:	add	x1, x0, #0xdbb
  403268:	ldr	x0, [sp, #120]
  40326c:	mov	x7, x0
  403270:	ldr	x6, [sp, #64]
  403274:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403278:	add	x5, x0, #0xff8
  40327c:	adrp	x0, 407000 <_fini+0x3ac>
  403280:	add	x4, x0, #0xa58
  403284:	mov	w3, #0xc0                  	// #192
  403288:	mov	x2, x1
  40328c:	ldr	w1, [sp, #100]
  403290:	mov	w0, w8
  403294:	bl	401ee0 <log_internal_realm@plt>
  403298:	b	4032a4 <write_timeout+0x1a0>
  40329c:	ldr	w0, [sp, #100]
  4032a0:	cmp	w0, #0x0
  4032a4:	mov	w19, #0x0                   	// #0
  4032a8:	b	4032e0 <write_timeout+0x1dc>
  4032ac:	ldr	x1, [sp, #128]
  4032b0:	add	x0, sp, #0x88
  4032b4:	mov	x3, #0x0                   	// #0
  4032b8:	mov	x2, x1
  4032bc:	mov	x1, #0x40                  	// #64
  4032c0:	bl	401c10 <format_timespan@plt>
  4032c4:	mov	x3, x0
  4032c8:	ldr	x2, [sp, #40]
  4032cc:	adrp	x0, 407000 <_fini+0x3ac>
  4032d0:	add	x1, x0, #0x28
  4032d4:	ldr	x0, [sp, #72]
  4032d8:	bl	401ca0 <fprintf@plt>
  4032dc:	mov	w19, #0x0                   	// #0
  4032e0:	add	x0, sp, #0x78
  4032e4:	bl	402248 <freep>
  4032e8:	mov	w1, w19
  4032ec:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4032f0:	add	x0, x0, #0x700
  4032f4:	ldr	x2, [sp, #200]
  4032f8:	ldr	x0, [x0]
  4032fc:	eor	x0, x2, x0
  403300:	cmp	x0, #0x0
  403304:	b.eq	40330c <write_timeout+0x208>  // b.none
  403308:	bl	401e60 <__stack_chk_fail@plt>
  40330c:	mov	w0, w1
  403310:	ldr	x19, [sp, #16]
  403314:	ldp	x29, x30, [sp], #208
  403318:	ret

000000000040331c <write_idle_timeout>:
  40331c:	stp	x29, x30, [sp, #-48]!
  403320:	mov	x29, sp
  403324:	str	x0, [sp, #40]
  403328:	str	x1, [sp, #32]
  40332c:	str	x2, [sp, #24]
  403330:	adrp	x0, 407000 <_fini+0x3ac>
  403334:	add	x4, x0, #0x30
  403338:	adrp	x0, 407000 <_fini+0x3ac>
  40333c:	add	x3, x0, #0x40
  403340:	ldr	x2, [sp, #24]
  403344:	ldr	x1, [sp, #32]
  403348:	ldr	x0, [sp, #40]
  40334c:	bl	403104 <write_timeout>
  403350:	ldp	x29, x30, [sp], #48
  403354:	ret

0000000000403358 <write_mount_timeout>:
  403358:	stp	x29, x30, [sp, #-48]!
  40335c:	mov	x29, sp
  403360:	str	x0, [sp, #40]
  403364:	str	x1, [sp, #32]
  403368:	str	x2, [sp, #24]
  40336c:	adrp	x0, 407000 <_fini+0x3ac>
  403370:	add	x4, x0, #0x58
  403374:	adrp	x0, 407000 <_fini+0x3ac>
  403378:	add	x3, x0, #0x68
  40337c:	ldr	x2, [sp, #24]
  403380:	ldr	x1, [sp, #32]
  403384:	ldr	x0, [sp, #40]
  403388:	bl	403104 <write_timeout>
  40338c:	ldp	x29, x30, [sp], #48
  403390:	ret

0000000000403394 <write_dependency>:
  403394:	stp	x29, x30, [sp, #-144]!
  403398:	mov	x29, sp
  40339c:	str	x19, [sp, #16]
  4033a0:	str	x0, [sp, #56]
  4033a4:	str	x1, [sp, #48]
  4033a8:	str	x2, [sp, #40]
  4033ac:	str	x3, [sp, #32]
  4033b0:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4033b4:	add	x0, x0, #0x700
  4033b8:	ldr	x1, [x0]
  4033bc:	str	x1, [sp, #136]
  4033c0:	mov	x1, #0x0                   	// #0
  4033c4:	str	xzr, [sp, #96]
  4033c8:	str	xzr, [sp, #104]
  4033cc:	str	xzr, [sp, #112]
  4033d0:	ldr	x0, [sp, #56]
  4033d4:	cmp	x0, #0x0
  4033d8:	cset	w0, eq  // eq = none
  4033dc:	and	w0, w0, #0xff
  4033e0:	and	x0, x0, #0xff
  4033e4:	cmp	x0, #0x0
  4033e8:	b.eq	403414 <write_dependency+0x80>  // b.none
  4033ec:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4033f0:	add	x1, x0, #0xdbb
  4033f4:	adrp	x0, 407000 <_fini+0x3ac>
  4033f8:	add	x4, x0, #0xa68
  4033fc:	mov	w3, #0xda                  	// #218
  403400:	mov	x2, x1
  403404:	adrp	x0, 407000 <_fini+0x3ac>
  403408:	add	x1, x0, #0x88
  40340c:	mov	w0, #0x0                   	// #0
  403410:	bl	401cd0 <log_assert_failed_realm@plt>
  403414:	ldr	x0, [sp, #48]
  403418:	cmp	x0, #0x0
  40341c:	cset	w0, eq  // eq = none
  403420:	and	w0, w0, #0xff
  403424:	and	x0, x0, #0xff
  403428:	cmp	x0, #0x0
  40342c:	b.eq	403458 <write_dependency+0xc4>  // b.none
  403430:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403434:	add	x1, x0, #0xdbb
  403438:	adrp	x0, 407000 <_fini+0x3ac>
  40343c:	add	x4, x0, #0xa68
  403440:	mov	w3, #0xdb                  	// #219
  403444:	mov	x2, x1
  403448:	adrp	x0, 407000 <_fini+0x3ac>
  40344c:	add	x1, x0, #0x90
  403450:	mov	w0, #0x0                   	// #0
  403454:	bl	401cd0 <log_assert_failed_realm@plt>
  403458:	add	x0, sp, #0x60
  40345c:	mov	x2, x0
  403460:	ldr	x1, [sp, #40]
  403464:	ldr	x0, [sp, #48]
  403468:	bl	401e10 <fstab_extract_values@plt>
  40346c:	str	w0, [sp, #68]
  403470:	ldr	w0, [sp, #68]
  403474:	cmp	w0, #0x0
  403478:	b.ge	403508 <write_dependency+0x174>  // b.tcont
  40347c:	mov	w0, #0x4                   	// #4
  403480:	str	w0, [sp, #84]
  403484:	ldr	w0, [sp, #68]
  403488:	str	w0, [sp, #88]
  40348c:	str	wzr, [sp, #92]
  403490:	ldr	w0, [sp, #92]
  403494:	bl	402020 <log_get_max_level_realm@plt>
  403498:	mov	w1, w0
  40349c:	ldr	w0, [sp, #84]
  4034a0:	and	w0, w0, #0x7
  4034a4:	cmp	w1, w0
  4034a8:	b.lt	4034f0 <write_dependency+0x15c>  // b.tstop
  4034ac:	ldr	w0, [sp, #92]
  4034b0:	lsl	w1, w0, #10
  4034b4:	ldr	w0, [sp, #84]
  4034b8:	orr	w6, w1, w0
  4034bc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4034c0:	add	x1, x0, #0xdbb
  4034c4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4034c8:	add	x5, x0, #0xfd8
  4034cc:	adrp	x0, 407000 <_fini+0x3ac>
  4034d0:	add	x4, x0, #0xa80
  4034d4:	mov	w3, #0xdf                  	// #223
  4034d8:	mov	x2, x1
  4034dc:	ldr	w1, [sp, #88]
  4034e0:	mov	w0, w6
  4034e4:	bl	401ee0 <log_internal_realm@plt>
  4034e8:	mov	w19, w0
  4034ec:	b	4036c4 <write_dependency+0x330>
  4034f0:	ldr	w0, [sp, #88]
  4034f4:	cmp	w0, #0x0
  4034f8:	cneg	w0, w0, lt  // lt = tstop
  4034fc:	and	w0, w0, #0xff
  403500:	neg	w19, w0
  403504:	b	4036c4 <write_dependency+0x330>
  403508:	ldr	w0, [sp, #68]
  40350c:	cmp	w0, #0x0
  403510:	b.ne	40351c <write_dependency+0x188>  // b.any
  403514:	mov	w19, #0x0                   	// #0
  403518:	b	4036c4 <write_dependency+0x330>
  40351c:	ldr	x0, [sp, #96]
  403520:	str	x0, [sp, #128]
  403524:	b	40363c <write_dependency+0x2a8>
  403528:	ldr	x0, [sp, #128]
  40352c:	ldr	x5, [x0]
  403530:	add	x0, sp, #0x78
  403534:	mov	x4, x0
  403538:	adrp	x0, 407000 <_fini+0x3ac>
  40353c:	add	x3, x0, #0x98
  403540:	mov	w2, #0x0                   	// #0
  403544:	adrp	x0, 407000 <_fini+0x3ac>
  403548:	add	x1, x0, #0xa0
  40354c:	mov	x0, x5
  403550:	bl	401f00 <unit_name_mangle_with_suffix@plt>
  403554:	str	w0, [sp, #68]
  403558:	ldr	w0, [sp, #68]
  40355c:	cmp	w0, #0x0
  403560:	b.ge	4035f0 <write_dependency+0x25c>  // b.tcont
  403564:	mov	w0, #0x3                   	// #3
  403568:	str	w0, [sp, #72]
  40356c:	ldr	w0, [sp, #68]
  403570:	str	w0, [sp, #76]
  403574:	str	wzr, [sp, #80]
  403578:	ldr	w0, [sp, #80]
  40357c:	bl	402020 <log_get_max_level_realm@plt>
  403580:	mov	w1, w0
  403584:	ldr	w0, [sp, #72]
  403588:	and	w0, w0, #0x7
  40358c:	cmp	w1, w0
  403590:	b.lt	4035d8 <write_dependency+0x244>  // b.tstop
  403594:	ldr	w0, [sp, #80]
  403598:	lsl	w1, w0, #10
  40359c:	ldr	w0, [sp, #72]
  4035a0:	orr	w6, w1, w0
  4035a4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4035a8:	add	x1, x0, #0xdbb
  4035ac:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4035b0:	add	x5, x0, #0xea8
  4035b4:	adrp	x0, 407000 <_fini+0x3ac>
  4035b8:	add	x4, x0, #0xa80
  4035bc:	mov	w3, #0xe8                  	// #232
  4035c0:	mov	x2, x1
  4035c4:	ldr	w1, [sp, #76]
  4035c8:	mov	w0, w6
  4035cc:	bl	401ee0 <log_internal_realm@plt>
  4035d0:	mov	w19, w0
  4035d4:	b	4036c4 <write_dependency+0x330>
  4035d8:	ldr	w0, [sp, #76]
  4035dc:	cmp	w0, #0x0
  4035e0:	cneg	w0, w0, lt  // lt = tstop
  4035e4:	and	w0, w0, #0xff
  4035e8:	neg	w19, w0
  4035ec:	b	4036c4 <write_dependency+0x330>
  4035f0:	ldr	x1, [sp, #120]
  4035f4:	add	x0, sp, #0x68
  4035f8:	bl	401dc0 <strv_consume@plt>
  4035fc:	str	w0, [sp, #68]
  403600:	ldr	w0, [sp, #68]
  403604:	cmp	w0, #0x0
  403608:	b.ge	403630 <write_dependency+0x29c>  // b.tcont
  40360c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403610:	add	x1, x0, #0xdbb
  403614:	adrp	x0, 407000 <_fini+0x3ac>
  403618:	add	x3, x0, #0xa80
  40361c:	mov	w2, #0xeb                  	// #235
  403620:	mov	w0, #0x0                   	// #0
  403624:	bl	402000 <log_oom_internal@plt>
  403628:	mov	w19, w0
  40362c:	b	4036c4 <write_dependency+0x330>
  403630:	ldr	x0, [sp, #128]
  403634:	add	x0, x0, #0x8
  403638:	str	x0, [sp, #128]
  40363c:	ldr	x0, [sp, #128]
  403640:	cmp	x0, #0x0
  403644:	b.eq	403658 <write_dependency+0x2c4>  // b.none
  403648:	ldr	x0, [sp, #128]
  40364c:	ldr	x0, [x0]
  403650:	cmp	x0, #0x0
  403654:	b.ne	403528 <write_dependency+0x194>  // b.any
  403658:	ldr	x0, [sp, #104]
  40365c:	cmp	x0, #0x0
  403660:	b.eq	4036c0 <write_dependency+0x32c>  // b.none
  403664:	ldr	x2, [sp, #104]
  403668:	adrp	x0, 407000 <_fini+0x3ac>
  40366c:	add	x1, x0, #0xb0
  403670:	mov	x0, x2
  403674:	bl	402620 <strv_join>
  403678:	str	x0, [sp, #112]
  40367c:	ldr	x0, [sp, #112]
  403680:	cmp	x0, #0x0
  403684:	b.ne	4036ac <write_dependency+0x318>  // b.any
  403688:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40368c:	add	x1, x0, #0xdbb
  403690:	adrp	x0, 407000 <_fini+0x3ac>
  403694:	add	x3, x0, #0xa80
  403698:	mov	w2, #0xf1                  	// #241
  40369c:	mov	w0, #0x0                   	// #0
  4036a0:	bl	402000 <log_oom_internal@plt>
  4036a4:	mov	w19, w0
  4036a8:	b	4036c4 <write_dependency+0x330>
  4036ac:	ldr	x0, [sp, #112]
  4036b0:	mov	x2, x0
  4036b4:	ldr	x1, [sp, #32]
  4036b8:	ldr	x0, [sp, #56]
  4036bc:	bl	401ca0 <fprintf@plt>
  4036c0:	mov	w19, #0x0                   	// #0
  4036c4:	add	x0, sp, #0x70
  4036c8:	bl	402248 <freep>
  4036cc:	add	x0, sp, #0x68
  4036d0:	bl	4025ec <strv_freep>
  4036d4:	add	x0, sp, #0x60
  4036d8:	bl	4025ec <strv_freep>
  4036dc:	mov	w1, w19
  4036e0:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4036e4:	add	x0, x0, #0x700
  4036e8:	ldr	x2, [sp, #136]
  4036ec:	ldr	x0, [x0]
  4036f0:	eor	x0, x2, x0
  4036f4:	cmp	x0, #0x0
  4036f8:	b.eq	403700 <write_dependency+0x36c>  // b.none
  4036fc:	bl	401e60 <__stack_chk_fail@plt>
  403700:	mov	w0, w1
  403704:	ldr	x19, [sp, #16]
  403708:	ldp	x29, x30, [sp], #144
  40370c:	ret

0000000000403710 <write_after>:
  403710:	stp	x29, x30, [sp, #-32]!
  403714:	mov	x29, sp
  403718:	str	x0, [sp, #24]
  40371c:	str	x1, [sp, #16]
  403720:	adrp	x0, 407000 <_fini+0x3ac>
  403724:	add	x3, x0, #0xb8
  403728:	adrp	x0, 407000 <_fini+0x3ac>
  40372c:	add	x2, x0, #0xc8
  403730:	ldr	x1, [sp, #16]
  403734:	ldr	x0, [sp, #24]
  403738:	bl	403394 <write_dependency>
  40373c:	ldp	x29, x30, [sp], #32
  403740:	ret

0000000000403744 <write_requires_after>:
  403744:	stp	x29, x30, [sp, #-32]!
  403748:	mov	x29, sp
  40374c:	str	x0, [sp, #24]
  403750:	str	x1, [sp, #16]
  403754:	adrp	x0, 407000 <_fini+0x3ac>
  403758:	add	x3, x0, #0xd8
  40375c:	adrp	x0, 407000 <_fini+0x3ac>
  403760:	add	x2, x0, #0xf8
  403764:	ldr	x1, [sp, #16]
  403768:	ldr	x0, [sp, #24]
  40376c:	bl	403394 <write_dependency>
  403770:	ldp	x29, x30, [sp], #32
  403774:	ret

0000000000403778 <write_before>:
  403778:	stp	x29, x30, [sp, #-32]!
  40377c:	mov	x29, sp
  403780:	str	x0, [sp, #24]
  403784:	str	x1, [sp, #16]
  403788:	adrp	x0, 407000 <_fini+0x3ac>
  40378c:	add	x3, x0, #0x110
  403790:	adrp	x0, 407000 <_fini+0x3ac>
  403794:	add	x2, x0, #0x120
  403798:	ldr	x1, [sp, #16]
  40379c:	ldr	x0, [sp, #24]
  4037a0:	bl	403394 <write_dependency>
  4037a4:	ldp	x29, x30, [sp], #32
  4037a8:	ret

00000000004037ac <write_requires_mounts_for>:
  4037ac:	stp	x29, x30, [sp, #-112]!
  4037b0:	mov	x29, sp
  4037b4:	str	x19, [sp, #16]
  4037b8:	str	x0, [sp, #40]
  4037bc:	str	x1, [sp, #32]
  4037c0:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4037c4:	add	x0, x0, #0x700
  4037c8:	ldr	x1, [x0]
  4037cc:	str	x1, [sp, #104]
  4037d0:	mov	x1, #0x0                   	// #0
  4037d4:	str	xzr, [sp, #80]
  4037d8:	str	xzr, [sp, #88]
  4037dc:	str	xzr, [sp, #96]
  4037e0:	ldr	x0, [sp, #40]
  4037e4:	cmp	x0, #0x0
  4037e8:	cset	w0, eq  // eq = none
  4037ec:	and	w0, w0, #0xff
  4037f0:	and	x0, x0, #0xff
  4037f4:	cmp	x0, #0x0
  4037f8:	b.eq	403824 <write_requires_mounts_for+0x78>  // b.none
  4037fc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403800:	add	x1, x0, #0xdbb
  403804:	adrp	x0, 407000 <_fini+0x3ac>
  403808:	add	x4, x0, #0xa98
  40380c:	mov	w3, #0x10e                 	// #270
  403810:	mov	x2, x1
  403814:	adrp	x0, 407000 <_fini+0x3ac>
  403818:	add	x1, x0, #0x88
  40381c:	mov	w0, #0x0                   	// #0
  403820:	bl	401cd0 <log_assert_failed_realm@plt>
  403824:	ldr	x0, [sp, #32]
  403828:	cmp	x0, #0x0
  40382c:	cset	w0, eq  // eq = none
  403830:	and	w0, w0, #0xff
  403834:	and	x0, x0, #0xff
  403838:	cmp	x0, #0x0
  40383c:	b.eq	403868 <write_requires_mounts_for+0xbc>  // b.none
  403840:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403844:	add	x1, x0, #0xdbb
  403848:	adrp	x0, 407000 <_fini+0x3ac>
  40384c:	add	x4, x0, #0xa98
  403850:	mov	w3, #0x10f                 	// #271
  403854:	mov	x2, x1
  403858:	adrp	x0, 407000 <_fini+0x3ac>
  40385c:	add	x1, x0, #0x90
  403860:	mov	w0, #0x0                   	// #0
  403864:	bl	401cd0 <log_assert_failed_realm@plt>
  403868:	add	x0, sp, #0x50
  40386c:	mov	x2, x0
  403870:	adrp	x0, 407000 <_fini+0x3ac>
  403874:	add	x1, x0, #0x138
  403878:	ldr	x0, [sp, #32]
  40387c:	bl	401e10 <fstab_extract_values@plt>
  403880:	str	w0, [sp, #52]
  403884:	ldr	w0, [sp, #52]
  403888:	cmp	w0, #0x0
  40388c:	b.ge	40391c <write_requires_mounts_for+0x170>  // b.tcont
  403890:	mov	w0, #0x4                   	// #4
  403894:	str	w0, [sp, #68]
  403898:	ldr	w0, [sp, #52]
  40389c:	str	w0, [sp, #72]
  4038a0:	str	wzr, [sp, #76]
  4038a4:	ldr	w0, [sp, #76]
  4038a8:	bl	402020 <log_get_max_level_realm@plt>
  4038ac:	mov	w1, w0
  4038b0:	ldr	w0, [sp, #68]
  4038b4:	and	w0, w0, #0x7
  4038b8:	cmp	w1, w0
  4038bc:	b.lt	403904 <write_requires_mounts_for+0x158>  // b.tstop
  4038c0:	ldr	w0, [sp, #76]
  4038c4:	lsl	w1, w0, #10
  4038c8:	ldr	w0, [sp, #68]
  4038cc:	orr	w6, w1, w0
  4038d0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4038d4:	add	x1, x0, #0xdbb
  4038d8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4038dc:	add	x5, x0, #0xfd8
  4038e0:	adrp	x0, 407000 <_fini+0x3ac>
  4038e4:	add	x4, x0, #0xab8
  4038e8:	mov	w3, #0x113                 	// #275
  4038ec:	mov	x2, x1
  4038f0:	ldr	w1, [sp, #72]
  4038f4:	mov	w0, w6
  4038f8:	bl	401ee0 <log_internal_realm@plt>
  4038fc:	mov	w19, w0
  403900:	b	403a3c <write_requires_mounts_for+0x290>
  403904:	ldr	w0, [sp, #72]
  403908:	cmp	w0, #0x0
  40390c:	cneg	w0, w0, lt  // lt = tstop
  403910:	and	w0, w0, #0xff
  403914:	neg	w19, w0
  403918:	b	403a3c <write_requires_mounts_for+0x290>
  40391c:	ldr	w0, [sp, #52]
  403920:	cmp	w0, #0x0
  403924:	b.ne	403930 <write_requires_mounts_for+0x184>  // b.any
  403928:	mov	w19, #0x0                   	// #0
  40392c:	b	403a3c <write_requires_mounts_for+0x290>
  403930:	ldr	x0, [sp, #80]
  403934:	add	x1, sp, #0x58
  403938:	bl	401bb0 <specifier_escape_strv@plt>
  40393c:	str	w0, [sp, #52]
  403940:	ldr	w0, [sp, #52]
  403944:	cmp	w0, #0x0
  403948:	b.ge	4039d8 <write_requires_mounts_for+0x22c>  // b.tcont
  40394c:	mov	w0, #0x3                   	// #3
  403950:	str	w0, [sp, #56]
  403954:	ldr	w0, [sp, #52]
  403958:	str	w0, [sp, #60]
  40395c:	str	wzr, [sp, #64]
  403960:	ldr	w0, [sp, #64]
  403964:	bl	402020 <log_get_max_level_realm@plt>
  403968:	mov	w1, w0
  40396c:	ldr	w0, [sp, #56]
  403970:	and	w0, w0, #0x7
  403974:	cmp	w1, w0
  403978:	b.lt	4039c0 <write_requires_mounts_for+0x214>  // b.tstop
  40397c:	ldr	w0, [sp, #64]
  403980:	lsl	w1, w0, #10
  403984:	ldr	w0, [sp, #56]
  403988:	orr	w6, w1, w0
  40398c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403990:	add	x1, x0, #0xdbb
  403994:	adrp	x0, 407000 <_fini+0x3ac>
  403998:	add	x5, x0, #0x158
  40399c:	adrp	x0, 407000 <_fini+0x3ac>
  4039a0:	add	x4, x0, #0xab8
  4039a4:	mov	w3, #0x119                 	// #281
  4039a8:	mov	x2, x1
  4039ac:	ldr	w1, [sp, #60]
  4039b0:	mov	w0, w6
  4039b4:	bl	401ee0 <log_internal_realm@plt>
  4039b8:	mov	w19, w0
  4039bc:	b	403a3c <write_requires_mounts_for+0x290>
  4039c0:	ldr	w0, [sp, #60]
  4039c4:	cmp	w0, #0x0
  4039c8:	cneg	w0, w0, lt  // lt = tstop
  4039cc:	and	w0, w0, #0xff
  4039d0:	neg	w19, w0
  4039d4:	b	403a3c <write_requires_mounts_for+0x290>
  4039d8:	ldr	x2, [sp, #88]
  4039dc:	adrp	x0, 407000 <_fini+0x3ac>
  4039e0:	add	x1, x0, #0xb0
  4039e4:	mov	x0, x2
  4039e8:	bl	402620 <strv_join>
  4039ec:	str	x0, [sp, #96]
  4039f0:	ldr	x0, [sp, #96]
  4039f4:	cmp	x0, #0x0
  4039f8:	b.ne	403a20 <write_requires_mounts_for+0x274>  // b.any
  4039fc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403a00:	add	x1, x0, #0xdbb
  403a04:	adrp	x0, 407000 <_fini+0x3ac>
  403a08:	add	x3, x0, #0xab8
  403a0c:	mov	w2, #0x11d                 	// #285
  403a10:	mov	w0, #0x0                   	// #0
  403a14:	bl	402000 <log_oom_internal@plt>
  403a18:	mov	w19, w0
  403a1c:	b	403a3c <write_requires_mounts_for+0x290>
  403a20:	ldr	x0, [sp, #96]
  403a24:	mov	x2, x0
  403a28:	adrp	x0, 407000 <_fini+0x3ac>
  403a2c:	add	x1, x0, #0x178
  403a30:	ldr	x0, [sp, #40]
  403a34:	bl	401ca0 <fprintf@plt>
  403a38:	mov	w19, #0x0                   	// #0
  403a3c:	add	x0, sp, #0x60
  403a40:	bl	402248 <freep>
  403a44:	add	x0, sp, #0x58
  403a48:	bl	4025ec <strv_freep>
  403a4c:	add	x0, sp, #0x50
  403a50:	bl	4025ec <strv_freep>
  403a54:	mov	w1, w19
  403a58:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  403a5c:	add	x0, x0, #0x700
  403a60:	ldr	x2, [sp, #104]
  403a64:	ldr	x0, [x0]
  403a68:	eor	x0, x2, x0
  403a6c:	cmp	x0, #0x0
  403a70:	b.eq	403a78 <write_requires_mounts_for+0x2cc>  // b.none
  403a74:	bl	401e60 <__stack_chk_fail@plt>
  403a78:	mov	w0, w1
  403a7c:	ldr	x19, [sp, #16]
  403a80:	ldp	x29, x30, [sp], #112
  403a84:	ret

0000000000403a88 <add_mount>:
  403a88:	stp	x29, x30, [sp, #-352]!
  403a8c:	mov	x29, sp
  403a90:	stp	x19, x20, [sp, #16]
  403a94:	str	x0, [x29, #104]
  403a98:	str	x1, [x29, #96]
  403a9c:	str	x2, [x29, #88]
  403aa0:	str	x3, [x29, #80]
  403aa4:	str	x4, [x29, #72]
  403aa8:	str	x5, [x29, #64]
  403aac:	str	w6, [x29, #60]
  403ab0:	str	w7, [x29, #56]
  403ab4:	ldr	x0, [x29, #352]
  403ab8:	str	x0, [x29, #48]
  403abc:	ldr	x0, [x29, #360]
  403ac0:	str	x0, [x29, #40]
  403ac4:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  403ac8:	add	x0, x0, #0x700
  403acc:	ldr	x1, [x0]
  403ad0:	str	x1, [x29, #344]
  403ad4:	mov	x1, #0x0                   	// #0
  403ad8:	str	xzr, [x29, #224]
  403adc:	str	xzr, [x29, #232]
  403ae0:	str	xzr, [x29, #240]
  403ae4:	str	xzr, [x29, #248]
  403ae8:	str	xzr, [x29, #256]
  403aec:	ldr	x0, [x29, #96]
  403af0:	cmp	x0, #0x0
  403af4:	cset	w0, eq  // eq = none
  403af8:	and	w0, w0, #0xff
  403afc:	and	x0, x0, #0xff
  403b00:	cmp	x0, #0x0
  403b04:	b.eq	403b30 <add_mount+0xa8>  // b.none
  403b08:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403b0c:	add	x1, x0, #0xdbb
  403b10:	adrp	x0, 407000 <_fini+0x3ac>
  403b14:	add	x4, x0, #0xad8
  403b18:	mov	w3, #0x138                 	// #312
  403b1c:	mov	x2, x1
  403b20:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403b24:	add	x1, x0, #0xe08
  403b28:	mov	w0, #0x0                   	// #0
  403b2c:	bl	401cd0 <log_assert_failed_realm@plt>
  403b30:	ldr	x0, [x29, #88]
  403b34:	cmp	x0, #0x0
  403b38:	cset	w0, eq  // eq = none
  403b3c:	and	w0, w0, #0xff
  403b40:	and	x0, x0, #0xff
  403b44:	cmp	x0, #0x0
  403b48:	b.eq	403b74 <add_mount+0xec>  // b.none
  403b4c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403b50:	add	x1, x0, #0xdbb
  403b54:	adrp	x0, 407000 <_fini+0x3ac>
  403b58:	add	x4, x0, #0xad8
  403b5c:	mov	w3, #0x139                 	// #313
  403b60:	mov	x2, x1
  403b64:	adrp	x0, 407000 <_fini+0x3ac>
  403b68:	add	x1, x0, #0x190
  403b6c:	mov	w0, #0x0                   	// #0
  403b70:	bl	401cd0 <log_assert_failed_realm@plt>
  403b74:	ldr	x0, [x29, #64]
  403b78:	cmp	x0, #0x0
  403b7c:	cset	w0, eq  // eq = none
  403b80:	and	w0, w0, #0xff
  403b84:	and	x0, x0, #0xff
  403b88:	cmp	x0, #0x0
  403b8c:	b.eq	403bb8 <add_mount+0x130>  // b.none
  403b90:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403b94:	add	x1, x0, #0xdbb
  403b98:	adrp	x0, 407000 <_fini+0x3ac>
  403b9c:	add	x4, x0, #0xad8
  403ba0:	mov	w3, #0x13a                 	// #314
  403ba4:	mov	x2, x1
  403ba8:	adrp	x0, 407000 <_fini+0x3ac>
  403bac:	add	x1, x0, #0x90
  403bb0:	mov	w0, #0x0                   	// #0
  403bb4:	bl	401cd0 <log_assert_failed_realm@plt>
  403bb8:	ldr	x0, [x29, #48]
  403bbc:	cmp	x0, #0x0
  403bc0:	cset	w0, eq  // eq = none
  403bc4:	and	w0, w0, #0xff
  403bc8:	and	x0, x0, #0xff
  403bcc:	cmp	x0, #0x0
  403bd0:	b.eq	403bfc <add_mount+0x174>  // b.none
  403bd4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403bd8:	add	x1, x0, #0xdbb
  403bdc:	adrp	x0, 407000 <_fini+0x3ac>
  403be0:	add	x4, x0, #0xad8
  403be4:	mov	w3, #0x13b                 	// #315
  403be8:	mov	x2, x1
  403bec:	adrp	x0, 407000 <_fini+0x3ac>
  403bf0:	add	x1, x0, #0x198
  403bf4:	mov	w0, #0x0                   	// #0
  403bf8:	bl	401cd0 <log_assert_failed_realm@plt>
  403bfc:	ldr	x0, [x29, #40]
  403c00:	cmp	x0, #0x0
  403c04:	cset	w0, eq  // eq = none
  403c08:	and	w0, w0, #0xff
  403c0c:	and	x0, x0, #0xff
  403c10:	cmp	x0, #0x0
  403c14:	b.eq	403c40 <add_mount+0x1b8>  // b.none
  403c18:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403c1c:	add	x1, x0, #0xdbb
  403c20:	adrp	x0, 407000 <_fini+0x3ac>
  403c24:	add	x4, x0, #0xad8
  403c28:	mov	w3, #0x13c                 	// #316
  403c2c:	mov	x2, x1
  403c30:	adrp	x0, 407000 <_fini+0x3ac>
  403c34:	add	x1, x0, #0x1a0
  403c38:	mov	w0, #0x0                   	// #0
  403c3c:	bl	401cd0 <log_assert_failed_realm@plt>
  403c40:	adrp	x0, 407000 <_fini+0x3ac>
  403c44:	add	x1, x0, #0x1a8
  403c48:	ldr	x0, [x29, #72]
  403c4c:	bl	40246c <streq_ptr>
  403c50:	and	w0, w0, #0xff
  403c54:	cmp	w0, #0x0
  403c58:	b.eq	403c64 <add_mount+0x1dc>  // b.none
  403c5c:	mov	w19, #0x0                   	// #0
  403c60:	b	404a34 <add_mount+0xfac>
  403c64:	ldr	x0, [x29, #88]
  403c68:	bl	401cb0 <is_path@plt>
  403c6c:	and	w0, w0, #0xff
  403c70:	eor	w0, w0, #0x1
  403c74:	and	w0, w0, #0xff
  403c78:	cmp	w0, #0x0
  403c7c:	b.eq	403d00 <add_mount+0x278>  // b.none
  403c80:	mov	w0, #0x4                   	// #4
  403c84:	str	w0, [x29, #212]
  403c88:	str	wzr, [x29, #216]
  403c8c:	str	wzr, [x29, #220]
  403c90:	ldr	w0, [x29, #220]
  403c94:	bl	402020 <log_get_max_level_realm@plt>
  403c98:	mov	w1, w0
  403c9c:	ldr	w0, [x29, #212]
  403ca0:	and	w0, w0, #0x7
  403ca4:	cmp	w1, w0
  403ca8:	b.lt	403cf0 <add_mount+0x268>  // b.tstop
  403cac:	ldr	w0, [x29, #220]
  403cb0:	lsl	w1, w0, #10
  403cb4:	ldr	w0, [x29, #212]
  403cb8:	orr	w7, w1, w0
  403cbc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403cc0:	add	x1, x0, #0xdbb
  403cc4:	ldr	x6, [x29, #88]
  403cc8:	adrp	x0, 407000 <_fini+0x3ac>
  403ccc:	add	x5, x0, #0x1b0
  403cd0:	adrp	x0, 407000 <_fini+0x3ac>
  403cd4:	add	x4, x0, #0xae8
  403cd8:	mov	w3, #0x142                 	// #322
  403cdc:	mov	x2, x1
  403ce0:	ldr	w1, [x29, #216]
  403ce4:	mov	w0, w7
  403ce8:	bl	401ee0 <log_internal_realm@plt>
  403cec:	b	403cf8 <add_mount+0x270>
  403cf0:	ldr	w0, [x29, #216]
  403cf4:	cmp	w0, #0x0
  403cf8:	mov	w19, #0x0                   	// #0
  403cfc:	b	404a34 <add_mount+0xfac>
  403d00:	ldr	x0, [x29, #88]
  403d04:	bl	406ab8 <mount_point_is_api>
  403d08:	and	w0, w0, #0xff
  403d0c:	cmp	w0, #0x0
  403d10:	b.ne	403d28 <add_mount+0x2a0>  // b.any
  403d14:	ldr	x0, [x29, #88]
  403d18:	bl	406b4c <mount_point_ignore>
  403d1c:	and	w0, w0, #0xff
  403d20:	cmp	w0, #0x0
  403d24:	b.eq	403d30 <add_mount+0x2a8>  // b.none
  403d28:	mov	w19, #0x0                   	// #0
  403d2c:	b	404a34 <add_mount+0xfac>
  403d30:	adrp	x0, 407000 <_fini+0x3ac>
  403d34:	add	x1, x0, #0x1e0
  403d38:	ldr	x0, [x29, #88]
  403d3c:	bl	401c90 <path_equal@plt>
  403d40:	and	w0, w0, #0xff
  403d44:	cmp	w0, #0x0
  403d48:	b.eq	403ee4 <add_mount+0x45c>  // b.none
  403d4c:	ldr	w0, [x29, #56]
  403d50:	and	w0, w0, #0x1
  403d54:	cmp	w0, #0x0
  403d58:	b.eq	403dd0 <add_mount+0x348>  // b.none
  403d5c:	mov	w0, #0x4                   	// #4
  403d60:	str	w0, [x29, #124]
  403d64:	str	wzr, [x29, #128]
  403d68:	str	wzr, [x29, #132]
  403d6c:	ldr	w0, [x29, #132]
  403d70:	bl	402020 <log_get_max_level_realm@plt>
  403d74:	mov	w1, w0
  403d78:	ldr	w0, [x29, #124]
  403d7c:	and	w0, w0, #0x7
  403d80:	cmp	w1, w0
  403d84:	b.lt	403dc8 <add_mount+0x340>  // b.tstop
  403d88:	ldr	w0, [x29, #132]
  403d8c:	lsl	w1, w0, #10
  403d90:	ldr	w0, [x29, #124]
  403d94:	orr	w6, w1, w0
  403d98:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403d9c:	add	x1, x0, #0xdbb
  403da0:	adrp	x0, 407000 <_fini+0x3ac>
  403da4:	add	x5, x0, #0x1e8
  403da8:	adrp	x0, 407000 <_fini+0x3ac>
  403dac:	add	x4, x0, #0xae8
  403db0:	mov	w3, #0x14c                 	// #332
  403db4:	mov	x2, x1
  403db8:	ldr	w1, [x29, #128]
  403dbc:	mov	w0, w6
  403dc0:	bl	401ee0 <log_internal_realm@plt>
  403dc4:	b	403dd0 <add_mount+0x348>
  403dc8:	ldr	w0, [x29, #128]
  403dcc:	cmp	w0, #0x0
  403dd0:	ldr	w0, [x29, #56]
  403dd4:	and	w0, w0, #0x2
  403dd8:	cmp	w0, #0x0
  403ddc:	b.eq	403e54 <add_mount+0x3cc>  // b.none
  403de0:	mov	w0, #0x4                   	// #4
  403de4:	str	w0, [x29, #136]
  403de8:	str	wzr, [x29, #140]
  403dec:	str	wzr, [x29, #144]
  403df0:	ldr	w0, [x29, #144]
  403df4:	bl	402020 <log_get_max_level_realm@plt>
  403df8:	mov	w1, w0
  403dfc:	ldr	w0, [x29, #136]
  403e00:	and	w0, w0, #0x7
  403e04:	cmp	w1, w0
  403e08:	b.lt	403e4c <add_mount+0x3c4>  // b.tstop
  403e0c:	ldr	w0, [x29, #144]
  403e10:	lsl	w1, w0, #10
  403e14:	ldr	w0, [x29, #136]
  403e18:	orr	w6, w1, w0
  403e1c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403e20:	add	x1, x0, #0xdbb
  403e24:	adrp	x0, 407000 <_fini+0x3ac>
  403e28:	add	x5, x0, #0x210
  403e2c:	adrp	x0, 407000 <_fini+0x3ac>
  403e30:	add	x4, x0, #0xae8
  403e34:	mov	w3, #0x14e                 	// #334
  403e38:	mov	x2, x1
  403e3c:	ldr	w1, [x29, #140]
  403e40:	mov	w0, w6
  403e44:	bl	401ee0 <log_internal_realm@plt>
  403e48:	b	403e54 <add_mount+0x3cc>
  403e4c:	ldr	w0, [x29, #140]
  403e50:	cmp	w0, #0x0
  403e54:	ldr	w0, [x29, #56]
  403e58:	and	w0, w0, #0x4
  403e5c:	cmp	w0, #0x0
  403e60:	b.eq	403ed8 <add_mount+0x450>  // b.none
  403e64:	mov	w0, #0x4                   	// #4
  403e68:	str	w0, [x29, #148]
  403e6c:	str	wzr, [x29, #152]
  403e70:	str	wzr, [x29, #156]
  403e74:	ldr	w0, [x29, #156]
  403e78:	bl	402020 <log_get_max_level_realm@plt>
  403e7c:	mov	w1, w0
  403e80:	ldr	w0, [x29, #148]
  403e84:	and	w0, w0, #0x7
  403e88:	cmp	w1, w0
  403e8c:	b.lt	403ed0 <add_mount+0x448>  // b.tstop
  403e90:	ldr	w0, [x29, #156]
  403e94:	lsl	w1, w0, #10
  403e98:	ldr	w0, [x29, #148]
  403e9c:	orr	w6, w1, w0
  403ea0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403ea4:	add	x1, x0, #0xdbb
  403ea8:	adrp	x0, 407000 <_fini+0x3ac>
  403eac:	add	x5, x0, #0x238
  403eb0:	adrp	x0, 407000 <_fini+0x3ac>
  403eb4:	add	x4, x0, #0xae8
  403eb8:	mov	w3, #0x150                 	// #336
  403ebc:	mov	x2, x1
  403ec0:	ldr	w1, [x29, #152]
  403ec4:	mov	w0, w6
  403ec8:	bl	401ee0 <log_internal_realm@plt>
  403ecc:	b	403ed8 <add_mount+0x450>
  403ed0:	ldr	w0, [x29, #152]
  403ed4:	cmp	w0, #0x0
  403ed8:	ldr	w0, [x29, #56]
  403edc:	and	w0, w0, #0xfffffff8
  403ee0:	str	w0, [x29, #56]
  403ee4:	add	x0, x29, #0xe0
  403ee8:	mov	x2, x0
  403eec:	adrp	x0, 407000 <_fini+0x3ac>
  403ef0:	add	x1, x0, #0x98
  403ef4:	ldr	x0, [x29, #88]
  403ef8:	bl	401c20 <unit_name_from_path@plt>
  403efc:	str	w0, [x29, #160]
  403f00:	ldr	w0, [x29, #160]
  403f04:	cmp	w0, #0x0
  403f08:	b.ge	403f98 <add_mount+0x510>  // b.tcont
  403f0c:	mov	w0, #0x3                   	// #3
  403f10:	str	w0, [x29, #200]
  403f14:	ldr	w0, [x29, #160]
  403f18:	str	w0, [x29, #204]
  403f1c:	str	wzr, [x29, #208]
  403f20:	ldr	w0, [x29, #208]
  403f24:	bl	402020 <log_get_max_level_realm@plt>
  403f28:	mov	w1, w0
  403f2c:	ldr	w0, [x29, #200]
  403f30:	and	w0, w0, #0x7
  403f34:	cmp	w1, w0
  403f38:	b.lt	403f80 <add_mount+0x4f8>  // b.tstop
  403f3c:	ldr	w0, [x29, #208]
  403f40:	lsl	w1, w0, #10
  403f44:	ldr	w0, [x29, #200]
  403f48:	orr	w6, w1, w0
  403f4c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403f50:	add	x1, x0, #0xdbb
  403f54:	adrp	x0, 406000 <add_volatile_var+0x3c>
  403f58:	add	x5, x0, #0xea8
  403f5c:	adrp	x0, 407000 <_fini+0x3ac>
  403f60:	add	x4, x0, #0xae8
  403f64:	mov	w3, #0x157                 	// #343
  403f68:	mov	x2, x1
  403f6c:	ldr	w1, [x29, #204]
  403f70:	mov	w0, w6
  403f74:	bl	401ee0 <log_internal_realm@plt>
  403f78:	mov	w19, w0
  403f7c:	b	404a34 <add_mount+0xfac>
  403f80:	ldr	w0, [x29, #204]
  403f84:	cmp	w0, #0x0
  403f88:	cneg	w0, w0, lt  // lt = tstop
  403f8c:	and	w0, w0, #0xff
  403f90:	neg	w19, w0
  403f94:	b	404a34 <add_mount+0xfac>
  403f98:	bl	402408 <fstab_path>
  403f9c:	mov	x4, x0
  403fa0:	ldr	x0, [x29, #224]
  403fa4:	add	x1, x29, #0x100
  403fa8:	mov	x3, x1
  403fac:	mov	x2, x0
  403fb0:	mov	x1, x4
  403fb4:	ldr	x0, [x29, #104]
  403fb8:	bl	401f80 <generator_open_unit_file@plt>
  403fbc:	str	w0, [x29, #160]
  403fc0:	ldr	w0, [x29, #160]
  403fc4:	cmp	w0, #0x0
  403fc8:	b.ge	403fd4 <add_mount+0x54c>  // b.tcont
  403fcc:	ldr	w19, [x29, #160]
  403fd0:	b	404a34 <add_mount+0xfac>
  403fd4:	ldr	x3, [x29, #256]
  403fd8:	ldr	x2, [x29, #40]
  403fdc:	adrp	x0, 407000 <_fini+0x3ac>
  403fe0:	add	x1, x0, #0x268
  403fe4:	mov	x0, x3
  403fe8:	bl	401ca0 <fprintf@plt>
  403fec:	bl	401d00 <in_initrd@plt>
  403ff0:	and	w0, w0, #0xff
  403ff4:	cmp	w0, #0x0
  403ff8:	b.eq	404030 <add_mount+0x5a8>  // b.none
  403ffc:	adrp	x0, 407000 <_fini+0x3ac>
  404000:	add	x1, x0, #0x2b8
  404004:	ldr	x0, [x29, #88]
  404008:	bl	401dd0 <path_startswith@plt>
  40400c:	cmp	x0, #0x0
  404010:	b.eq	404030 <add_mount+0x5a8>  // b.none
  404014:	ldr	x0, [x29, #256]
  404018:	mov	x3, x0
  40401c:	mov	x2, #0x17                  	// #23
  404020:	mov	x1, #0x1                   	// #1
  404024:	adrp	x0, 407000 <_fini+0x3ac>
  404028:	add	x0, x0, #0x2c8
  40402c:	bl	401fc0 <fwrite@plt>
  404030:	ldr	x0, [x29, #72]
  404034:	str	x0, [x29, #296]
  404038:	ldr	x0, [x29, #296]
  40403c:	cmp	x0, #0x0
  404040:	b.eq	404080 <add_mount+0x5f8>  // b.none
  404044:	adrp	x0, 407000 <_fini+0x3ac>
  404048:	add	x0, x0, #0x400
  40404c:	add	x2, x29, #0x140
  404050:	mov	x3, x0
  404054:	ldp	x0, x1, [x3]
  404058:	stp	x0, x1, [x2]
  40405c:	ldr	x0, [x3, #16]
  404060:	str	x0, [x2, #16]
  404064:	add	x0, x29, #0x140
  404068:	ldr	x1, [x29, #296]
  40406c:	bl	401ed0 <strv_find@plt>
  404070:	cmp	x0, #0x0
  404074:	b.eq	404080 <add_mount+0x5f8>  // b.none
  404078:	mov	w0, #0x1                   	// #1
  40407c:	b	404084 <add_mount+0x5fc>
  404080:	mov	w0, #0x0                   	// #0
  404084:	cmp	w0, #0x0
  404088:	b.eq	404270 <add_mount+0x7e8>  // b.none
  40408c:	ldr	w0, [x29, #56]
  404090:	and	w0, w0, #0x4
  404094:	cmp	w0, #0x0
  404098:	b.ne	404270 <add_mount+0x7e8>  // b.any
  40409c:	adrp	x0, 407000 <_fini+0x3ac>
  4040a0:	add	x1, x0, #0x2e0
  4040a4:	ldr	x0, [x29, #64]
  4040a8:	bl	402348 <fstab_test_yes_no_option>
  4040ac:	and	w0, w0, #0xff
  4040b0:	cmp	w0, #0x0
  4040b4:	b.eq	404270 <add_mount+0x7e8>  // b.none
  4040b8:	adrp	x0, 407000 <_fini+0x3ac>
  4040bc:	add	x0, x0, #0x2e8
  4040c0:	str	x0, [x29, #320]
  4040c4:	ldr	x0, [x29, #64]
  4040c8:	str	x0, [x29, #328]
  4040cc:	adrp	x0, 407000 <_fini+0x3ac>
  4040d0:	add	x0, x0, #0x318
  4040d4:	str	x0, [x29, #336]
  4040d8:	str	xzr, [x29, #280]
  4040dc:	str	xzr, [x29, #288]
  4040e0:	b	404114 <add_mount+0x68c>
  4040e4:	ldr	x0, [x29, #288]
  4040e8:	lsl	x0, x0, #3
  4040ec:	add	x1, x29, #0x140
  4040f0:	ldr	x0, [x1, x0]
  4040f4:	bl	401ff0 <strlen@plt>
  4040f8:	mov	x1, x0
  4040fc:	ldr	x0, [x29, #280]
  404100:	add	x0, x0, x1
  404104:	str	x0, [x29, #280]
  404108:	ldr	x0, [x29, #288]
  40410c:	add	x0, x0, #0x1
  404110:	str	x0, [x29, #288]
  404114:	ldr	x0, [x29, #288]
  404118:	cmp	x0, #0x2
  40411c:	b.hi	404138 <add_mount+0x6b0>  // b.pmore
  404120:	ldr	x0, [x29, #288]
  404124:	lsl	x0, x0, #3
  404128:	add	x1, x29, #0x140
  40412c:	ldr	x0, [x1, x0]
  404130:	cmp	x0, #0x0
  404134:	b.ne	4040e4 <add_mount+0x65c>  // b.any
  404138:	ldr	x0, [x29, #280]
  40413c:	add	x0, x0, #0x1
  404140:	str	x0, [x29, #304]
  404144:	ldr	x1, [x29, #304]
  404148:	mov	x0, #0x1                   	// #1
  40414c:	bl	40226c <size_multiply_overflow>
  404150:	and	w0, w0, #0xff
  404154:	and	x0, x0, #0xff
  404158:	cmp	x0, #0x0
  40415c:	b.eq	404188 <add_mount+0x700>  // b.none
  404160:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404164:	add	x1, x0, #0xdbb
  404168:	adrp	x0, 407000 <_fini+0x3ac>
  40416c:	add	x4, x0, #0xad8
  404170:	mov	w3, #0x173                 	// #371
  404174:	mov	x2, x1
  404178:	adrp	x0, 407000 <_fini+0x3ac>
  40417c:	add	x1, x0, #0x320
  404180:	mov	w0, #0x0                   	// #0
  404184:	bl	401cd0 <log_assert_failed_realm@plt>
  404188:	ldr	x0, [x29, #304]
  40418c:	cmp	x0, #0x400, lsl #12
  404190:	cset	w0, hi  // hi = pmore
  404194:	and	w0, w0, #0xff
  404198:	and	x0, x0, #0xff
  40419c:	cmp	x0, #0x0
  4041a0:	b.eq	4041cc <add_mount+0x744>  // b.none
  4041a4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4041a8:	add	x1, x0, #0xdbb
  4041ac:	adrp	x0, 407000 <_fini+0x3ac>
  4041b0:	add	x4, x0, #0xad8
  4041b4:	mov	w3, #0x173                 	// #371
  4041b8:	mov	x2, x1
  4041bc:	adrp	x0, 407000 <_fini+0x3ac>
  4041c0:	add	x1, x0, #0x350
  4041c4:	mov	w0, #0x0                   	// #0
  4041c8:	bl	401cd0 <log_assert_failed_realm@plt>
  4041cc:	ldr	x0, [x29, #304]
  4041d0:	add	x0, x0, #0xf
  4041d4:	lsr	x0, x0, #4
  4041d8:	lsl	x0, x0, #4
  4041dc:	sub	sp, sp, x0
  4041e0:	mov	x0, sp
  4041e4:	add	x0, x0, #0xf
  4041e8:	lsr	x0, x0, #4
  4041ec:	lsl	x0, x0, #4
  4041f0:	str	x0, [x29, #312]
  4041f4:	ldr	x0, [x29, #312]
  4041f8:	str	x0, [x29, #272]
  4041fc:	str	xzr, [x29, #288]
  404200:	b	404230 <add_mount+0x7a8>
  404204:	ldr	x0, [x29, #288]
  404208:	lsl	x0, x0, #3
  40420c:	add	x1, x29, #0x140
  404210:	ldr	x0, [x1, x0]
  404214:	mov	x1, x0
  404218:	ldr	x0, [x29, #272]
  40421c:	bl	401bf0 <stpcpy@plt>
  404220:	str	x0, [x29, #272]
  404224:	ldr	x0, [x29, #288]
  404228:	add	x0, x0, #0x1
  40422c:	str	x0, [x29, #288]
  404230:	ldr	x0, [x29, #288]
  404234:	cmp	x0, #0x2
  404238:	b.hi	404254 <add_mount+0x7cc>  // b.pmore
  40423c:	ldr	x0, [x29, #288]
  404240:	lsl	x0, x0, #3
  404244:	add	x1, x29, #0x140
  404248:	ldr	x0, [x1, x0]
  40424c:	cmp	x0, #0x0
  404250:	b.ne	404204 <add_mount+0x77c>  // b.any
  404254:	ldr	x0, [x29, #272]
  404258:	strb	wzr, [x0]
  40425c:	ldr	x0, [x29, #312]
  404260:	str	x0, [x29, #64]
  404264:	ldr	w0, [x29, #56]
  404268:	orr	w0, w0, #0x2
  40426c:	str	w0, [x29, #56]
  404270:	ldr	w0, [x29, #56]
  404274:	and	w0, w0, #0x2
  404278:	cmp	w0, #0x0
  40427c:	b.ne	4042a8 <add_mount+0x820>  // b.any
  404280:	ldr	w0, [x29, #56]
  404284:	and	w0, w0, #0x4
  404288:	cmp	w0, #0x0
  40428c:	b.ne	4042a8 <add_mount+0x820>  // b.any
  404290:	ldr	x3, [x29, #256]
  404294:	ldr	x2, [x29, #48]
  404298:	adrp	x0, 407000 <_fini+0x3ac>
  40429c:	add	x1, x0, #0x370
  4042a0:	mov	x0, x3
  4042a4:	bl	401ca0 <fprintf@plt>
  4042a8:	ldr	w0, [x29, #56]
  4042ac:	and	w0, w0, #0x4
  4042b0:	cmp	w0, #0x0
  4042b4:	b.ne	404354 <add_mount+0x8cc>  // b.any
  4042b8:	ldr	x0, [x29, #64]
  4042bc:	cmp	x0, #0x0
  4042c0:	b.eq	404354 <add_mount+0x8cc>  // b.none
  4042c4:	ldr	x0, [x29, #256]
  4042c8:	ldr	x1, [x29, #64]
  4042cc:	bl	403710 <write_after>
  4042d0:	str	w0, [x29, #160]
  4042d4:	ldr	w0, [x29, #160]
  4042d8:	cmp	w0, #0x0
  4042dc:	b.ge	4042e8 <add_mount+0x860>  // b.tcont
  4042e0:	ldr	w19, [x29, #160]
  4042e4:	b	404a34 <add_mount+0xfac>
  4042e8:	ldr	x0, [x29, #256]
  4042ec:	ldr	x1, [x29, #64]
  4042f0:	bl	403744 <write_requires_after>
  4042f4:	str	w0, [x29, #160]
  4042f8:	ldr	w0, [x29, #160]
  4042fc:	cmp	w0, #0x0
  404300:	b.ge	40430c <add_mount+0x884>  // b.tcont
  404304:	ldr	w19, [x29, #160]
  404308:	b	404a34 <add_mount+0xfac>
  40430c:	ldr	x0, [x29, #256]
  404310:	ldr	x1, [x29, #64]
  404314:	bl	403778 <write_before>
  404318:	str	w0, [x29, #160]
  40431c:	ldr	w0, [x29, #160]
  404320:	cmp	w0, #0x0
  404324:	b.ge	404330 <add_mount+0x8a8>  // b.tcont
  404328:	ldr	w19, [x29, #160]
  40432c:	b	404a34 <add_mount+0xfac>
  404330:	ldr	x0, [x29, #256]
  404334:	ldr	x1, [x29, #64]
  404338:	bl	4037ac <write_requires_mounts_for>
  40433c:	str	w0, [x29, #160]
  404340:	ldr	w0, [x29, #160]
  404344:	cmp	w0, #0x0
  404348:	b.ge	404354 <add_mount+0x8cc>  // b.tcont
  40434c:	ldr	w19, [x29, #160]
  404350:	b	404a34 <add_mount+0xfac>
  404354:	ldr	w0, [x29, #60]
  404358:	cmp	w0, #0x0
  40435c:	b.eq	404390 <add_mount+0x908>  // b.none
  404360:	ldr	x0, [x29, #256]
  404364:	ldr	x4, [x29, #72]
  404368:	ldr	x3, [x29, #88]
  40436c:	ldr	x2, [x29, #96]
  404370:	ldr	x1, [x29, #104]
  404374:	bl	401f10 <generator_write_fsck_deps@plt>
  404378:	str	w0, [x29, #160]
  40437c:	ldr	w0, [x29, #160]
  404380:	cmp	w0, #0x0
  404384:	b.ge	404390 <add_mount+0x908>  // b.tcont
  404388:	ldr	w19, [x29, #160]
  40438c:	b	404a34 <add_mount+0xfac>
  404390:	ldr	x0, [x29, #256]
  404394:	mov	x3, x0
  404398:	mov	x2, #0x9                   	// #9
  40439c:	mov	x1, #0x1                   	// #1
  4043a0:	adrp	x0, 407000 <_fini+0x3ac>
  4043a4:	add	x0, x0, #0x380
  4043a8:	bl	401fc0 <fwrite@plt>
  4043ac:	ldr	x0, [x29, #80]
  4043b0:	cmp	x0, #0x0
  4043b4:	b.eq	4043d0 <add_mount+0x948>  // b.none
  4043b8:	ldr	x3, [x29, #256]
  4043bc:	ldr	x2, [x29, #80]
  4043c0:	adrp	x0, 407000 <_fini+0x3ac>
  4043c4:	add	x1, x0, #0x390
  4043c8:	mov	x0, x3
  4043cc:	bl	401ca0 <fprintf@plt>
  4043d0:	ldr	x0, [x29, #88]
  4043d4:	bl	4026f0 <specifier_escape>
  4043d8:	str	x0, [x29, #248]
  4043dc:	ldr	x0, [x29, #248]
  4043e0:	cmp	x0, #0x0
  4043e4:	b.ne	40440c <add_mount+0x984>  // b.any
  4043e8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4043ec:	add	x1, x0, #0xdbb
  4043f0:	adrp	x0, 407000 <_fini+0x3ac>
  4043f4:	add	x3, x0, #0xae8
  4043f8:	mov	w2, #0x195                 	// #405
  4043fc:	mov	w0, #0x0                   	// #0
  404400:	bl	402000 <log_oom_internal@plt>
  404404:	mov	w19, w0
  404408:	b	404a34 <add_mount+0xfac>
  40440c:	ldr	x3, [x29, #256]
  404410:	ldr	x0, [x29, #248]
  404414:	mov	x2, x0
  404418:	adrp	x0, 407000 <_fini+0x3ac>
  40441c:	add	x1, x0, #0x3b0
  404420:	mov	x0, x3
  404424:	bl	401ca0 <fprintf@plt>
  404428:	ldr	x0, [x29, #256]
  40442c:	ldr	x1, [x29, #96]
  404430:	bl	402930 <write_what>
  404434:	str	w0, [x29, #160]
  404438:	ldr	w0, [x29, #160]
  40443c:	cmp	w0, #0x0
  404440:	b.ge	40444c <add_mount+0x9c4>  // b.tcont
  404444:	ldr	w19, [x29, #160]
  404448:	b	404a34 <add_mount+0xfac>
  40444c:	ldr	x0, [x29, #72]
  404450:	bl	4024f0 <isempty>
  404454:	and	w0, w0, #0xff
  404458:	eor	w0, w0, #0x1
  40445c:	and	w0, w0, #0xff
  404460:	cmp	w0, #0x0
  404464:	b.eq	4044d4 <add_mount+0xa4c>  // b.none
  404468:	adrp	x0, 407000 <_fini+0x3ac>
  40446c:	add	x1, x0, #0x3c0
  404470:	ldr	x0, [x29, #72]
  404474:	bl	401f40 <strcmp@plt>
  404478:	cmp	w0, #0x0
  40447c:	b.eq	4044d4 <add_mount+0xa4c>  // b.none
  404480:	ldr	x0, [x29, #72]
  404484:	bl	4026f0 <specifier_escape>
  404488:	str	x0, [x29, #264]
  40448c:	ldr	x0, [x29, #264]
  404490:	cmp	x0, #0x0
  404494:	b.ne	4044a4 <add_mount+0xa1c>  // b.any
  404498:	mov	w19, #0xfffffff4            	// #-12
  40449c:	mov	w20, #0x0                   	// #0
  4044a0:	b	4044c4 <add_mount+0xa3c>
  4044a4:	ldr	x3, [x29, #256]
  4044a8:	ldr	x0, [x29, #264]
  4044ac:	mov	x2, x0
  4044b0:	adrp	x0, 407000 <_fini+0x3ac>
  4044b4:	add	x1, x0, #0x3c8
  4044b8:	mov	x0, x3
  4044bc:	bl	401ca0 <fprintf@plt>
  4044c0:	mov	w20, #0x1                   	// #1
  4044c4:	add	x0, x29, #0x108
  4044c8:	bl	402248 <freep>
  4044cc:	cmp	w20, #0x1
  4044d0:	b.ne	404a34 <add_mount+0xfac>  // b.any
  4044d4:	add	x0, x29, #0xf0
  4044d8:	mov	x4, x0
  4044dc:	ldr	x3, [x29, #64]
  4044e0:	ldr	x2, [x29, #88]
  4044e4:	ldr	x1, [x29, #96]
  4044e8:	ldr	x0, [x29, #104]
  4044ec:	bl	401c80 <generator_write_timeouts@plt>
  4044f0:	str	w0, [x29, #160]
  4044f4:	ldr	w0, [x29, #160]
  4044f8:	cmp	w0, #0x0
  4044fc:	b.ge	404508 <add_mount+0xa80>  // b.tcont
  404500:	ldr	w19, [x29, #160]
  404504:	b	404a34 <add_mount+0xfac>
  404508:	ldr	x3, [x29, #64]
  40450c:	ldr	x2, [x29, #88]
  404510:	ldr	x1, [x29, #96]
  404514:	ldr	x0, [x29, #104]
  404518:	bl	401f90 <generator_write_device_deps@plt>
  40451c:	str	w0, [x29, #160]
  404520:	ldr	w0, [x29, #160]
  404524:	cmp	w0, #0x0
  404528:	b.ge	404534 <add_mount+0xaac>  // b.tcont
  40452c:	ldr	w19, [x29, #160]
  404530:	b	404a34 <add_mount+0xfac>
  404534:	ldr	x0, [x29, #256]
  404538:	ldr	x2, [x29, #64]
  40453c:	ldr	x1, [x29, #88]
  404540:	bl	403358 <write_mount_timeout>
  404544:	str	w0, [x29, #160]
  404548:	ldr	w0, [x29, #160]
  40454c:	cmp	w0, #0x0
  404550:	b.ge	40455c <add_mount+0xad4>  // b.tcont
  404554:	ldr	w19, [x29, #160]
  404558:	b	404a34 <add_mount+0xfac>
  40455c:	ldr	x0, [x29, #256]
  404560:	ldr	x1, [x29, #240]
  404564:	bl	402834 <write_options>
  404568:	str	w0, [x29, #160]
  40456c:	ldr	w0, [x29, #160]
  404570:	cmp	w0, #0x0
  404574:	b.ge	404580 <add_mount+0xaf8>  // b.tcont
  404578:	ldr	w19, [x29, #160]
  40457c:	b	404a34 <add_mount+0xfac>
  404580:	ldr	x0, [x29, #256]
  404584:	bl	402010 <fflush_and_check@plt>
  404588:	str	w0, [x29, #160]
  40458c:	ldr	w0, [x29, #160]
  404590:	cmp	w0, #0x0
  404594:	b.ge	40462c <add_mount+0xba4>  // b.tcont
  404598:	mov	w0, #0x3                   	// #3
  40459c:	str	w0, [x29, #188]
  4045a0:	ldr	w0, [x29, #160]
  4045a4:	str	w0, [x29, #192]
  4045a8:	str	wzr, [x29, #196]
  4045ac:	ldr	w0, [x29, #196]
  4045b0:	bl	402020 <log_get_max_level_realm@plt>
  4045b4:	mov	w1, w0
  4045b8:	ldr	w0, [x29, #188]
  4045bc:	and	w0, w0, #0x7
  4045c0:	cmp	w1, w0
  4045c4:	b.lt	404614 <add_mount+0xb8c>  // b.tstop
  4045c8:	ldr	w0, [x29, #196]
  4045cc:	lsl	w1, w0, #10
  4045d0:	ldr	w0, [x29, #188]
  4045d4:	orr	w7, w1, w0
  4045d8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4045dc:	add	x1, x0, #0xdbb
  4045e0:	ldr	x0, [x29, #224]
  4045e4:	mov	x6, x0
  4045e8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4045ec:	add	x5, x0, #0xf28
  4045f0:	adrp	x0, 407000 <_fini+0x3ac>
  4045f4:	add	x4, x0, #0xae8
  4045f8:	mov	w3, #0x1b8                 	// #440
  4045fc:	mov	x2, x1
  404600:	ldr	w1, [x29, #192]
  404604:	mov	w0, w7
  404608:	bl	401ee0 <log_internal_realm@plt>
  40460c:	mov	w19, w0
  404610:	b	404a34 <add_mount+0xfac>
  404614:	ldr	w0, [x29, #192]
  404618:	cmp	w0, #0x0
  40461c:	cneg	w0, w0, lt  // lt = tstop
  404620:	and	w0, w0, #0xff
  404624:	neg	w19, w0
  404628:	b	404a34 <add_mount+0xfac>
  40462c:	ldr	w0, [x29, #56]
  404630:	and	w0, w0, #0x8
  404634:	cmp	w0, #0x0
  404638:	b.eq	404668 <add_mount+0xbe0>  // b.none
  40463c:	ldr	x3, [x29, #72]
  404640:	ldr	x2, [x29, #88]
  404644:	ldr	x1, [x29, #96]
  404648:	ldr	x0, [x29, #104]
  40464c:	bl	401ec0 <generator_hook_up_mkfs@plt>
  404650:	str	w0, [x29, #160]
  404654:	ldr	w0, [x29, #160]
  404658:	cmp	w0, #0x0
  40465c:	b.ge	404668 <add_mount+0xbe0>  // b.tcont
  404660:	ldr	w19, [x29, #160]
  404664:	b	404a34 <add_mount+0xfac>
  404668:	ldr	w0, [x29, #56]
  40466c:	and	w0, w0, #0x10
  404670:	cmp	w0, #0x0
  404674:	b.eq	4046a0 <add_mount+0xc18>  // b.none
  404678:	ldr	x2, [x29, #48]
  40467c:	ldr	x1, [x29, #88]
  404680:	ldr	x0, [x29, #104]
  404684:	bl	401f70 <generator_hook_up_growfs@plt>
  404688:	str	w0, [x29, #160]
  40468c:	ldr	w0, [x29, #160]
  404690:	cmp	w0, #0x0
  404694:	b.ge	4046a0 <add_mount+0xc18>  // b.tcont
  404698:	ldr	w19, [x29, #160]
  40469c:	b	404a34 <add_mount+0xfac>
  4046a0:	ldr	w0, [x29, #56]
  4046a4:	and	w0, w0, #0x1
  4046a8:	cmp	w0, #0x0
  4046ac:	b.ne	404714 <add_mount+0xc8c>  // b.any
  4046b0:	ldr	w0, [x29, #56]
  4046b4:	and	w0, w0, #0x4
  4046b8:	cmp	w0, #0x0
  4046bc:	b.ne	404714 <add_mount+0xc8c>  // b.any
  4046c0:	ldr	w0, [x29, #56]
  4046c4:	and	w0, w0, #0x2
  4046c8:	cmp	w0, #0x0
  4046cc:	b.eq	4046dc <add_mount+0xc54>  // b.none
  4046d0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4046d4:	add	x0, x0, #0xf88
  4046d8:	b	4046e4 <add_mount+0xc5c>
  4046dc:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4046e0:	add	x0, x0, #0xf90
  4046e4:	ldr	x1, [x29, #224]
  4046e8:	mov	x3, x1
  4046ec:	mov	x2, x0
  4046f0:	ldr	x1, [x29, #48]
  4046f4:	ldr	x0, [x29, #104]
  4046f8:	bl	401e50 <generator_add_symlink@plt>
  4046fc:	str	w0, [x29, #160]
  404700:	ldr	w0, [x29, #160]
  404704:	cmp	w0, #0x0
  404708:	b.ge	404714 <add_mount+0xc8c>  // b.tcont
  40470c:	ldr	w19, [x29, #160]
  404710:	b	404a34 <add_mount+0xfac>
  404714:	ldr	w0, [x29, #56]
  404718:	and	w0, w0, #0x4
  40471c:	cmp	w0, #0x0
  404720:	b.eq	404a30 <add_mount+0xfa8>  // b.none
  404724:	add	x0, x29, #0xe8
  404728:	mov	x2, x0
  40472c:	adrp	x0, 407000 <_fini+0x3ac>
  404730:	add	x1, x0, #0x3d8
  404734:	ldr	x0, [x29, #88]
  404738:	bl	401c20 <unit_name_from_path@plt>
  40473c:	str	w0, [x29, #160]
  404740:	ldr	w0, [x29, #160]
  404744:	cmp	w0, #0x0
  404748:	b.ge	4047d8 <add_mount+0xd50>  // b.tcont
  40474c:	mov	w0, #0x3                   	// #3
  404750:	str	w0, [x29, #176]
  404754:	ldr	w0, [x29, #160]
  404758:	str	w0, [x29, #180]
  40475c:	str	wzr, [x29, #184]
  404760:	ldr	w0, [x29, #184]
  404764:	bl	402020 <log_get_max_level_realm@plt>
  404768:	mov	w1, w0
  40476c:	ldr	w0, [x29, #176]
  404770:	and	w0, w0, #0x7
  404774:	cmp	w1, w0
  404778:	b.lt	4047c0 <add_mount+0xd38>  // b.tstop
  40477c:	ldr	w0, [x29, #184]
  404780:	lsl	w1, w0, #10
  404784:	ldr	w0, [x29, #176]
  404788:	orr	w6, w1, w0
  40478c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404790:	add	x1, x0, #0xdbb
  404794:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404798:	add	x5, x0, #0xea8
  40479c:	adrp	x0, 407000 <_fini+0x3ac>
  4047a0:	add	x4, x0, #0xae8
  4047a4:	mov	w3, #0x1d0                 	// #464
  4047a8:	mov	x2, x1
  4047ac:	ldr	w1, [x29, #180]
  4047b0:	mov	w0, w6
  4047b4:	bl	401ee0 <log_internal_realm@plt>
  4047b8:	mov	w19, w0
  4047bc:	b	404a34 <add_mount+0xfac>
  4047c0:	ldr	w0, [x29, #180]
  4047c4:	cmp	w0, #0x0
  4047c8:	cneg	w0, w0, lt  // lt = tstop
  4047cc:	and	w0, w0, #0xff
  4047d0:	neg	w19, w0
  4047d4:	b	404a34 <add_mount+0xfac>
  4047d8:	ldr	x0, [x29, #256]
  4047dc:	bl	401bc0 <safe_fclose@plt>
  4047e0:	str	x0, [x29, #256]
  4047e4:	bl	402408 <fstab_path>
  4047e8:	mov	x4, x0
  4047ec:	ldr	x0, [x29, #232]
  4047f0:	add	x1, x29, #0x100
  4047f4:	mov	x3, x1
  4047f8:	mov	x2, x0
  4047fc:	mov	x1, x4
  404800:	ldr	x0, [x29, #104]
  404804:	bl	401f80 <generator_open_unit_file@plt>
  404808:	str	w0, [x29, #160]
  40480c:	ldr	w0, [x29, #160]
  404810:	cmp	w0, #0x0
  404814:	b.ge	404820 <add_mount+0xd98>  // b.tcont
  404818:	ldr	w19, [x29, #160]
  40481c:	b	404a34 <add_mount+0xfac>
  404820:	ldr	x3, [x29, #256]
  404824:	ldr	x2, [x29, #40]
  404828:	adrp	x0, 407000 <_fini+0x3ac>
  40482c:	add	x1, x0, #0x268
  404830:	mov	x0, x3
  404834:	bl	401ca0 <fprintf@plt>
  404838:	ldr	x3, [x29, #256]
  40483c:	ldr	x2, [x29, #48]
  404840:	adrp	x0, 407000 <_fini+0x3ac>
  404844:	add	x1, x0, #0x370
  404848:	mov	x0, x3
  40484c:	bl	401ca0 <fprintf@plt>
  404850:	ldr	x0, [x29, #64]
  404854:	cmp	x0, #0x0
  404858:	b.eq	4048ec <add_mount+0xe64>  // b.none
  40485c:	ldr	x0, [x29, #256]
  404860:	ldr	x1, [x29, #64]
  404864:	bl	403710 <write_after>
  404868:	str	w0, [x29, #160]
  40486c:	ldr	w0, [x29, #160]
  404870:	cmp	w0, #0x0
  404874:	b.ge	404880 <add_mount+0xdf8>  // b.tcont
  404878:	ldr	w19, [x29, #160]
  40487c:	b	404a34 <add_mount+0xfac>
  404880:	ldr	x0, [x29, #256]
  404884:	ldr	x1, [x29, #64]
  404888:	bl	403744 <write_requires_after>
  40488c:	str	w0, [x29, #160]
  404890:	ldr	w0, [x29, #160]
  404894:	cmp	w0, #0x0
  404898:	b.ge	4048a4 <add_mount+0xe1c>  // b.tcont
  40489c:	ldr	w19, [x29, #160]
  4048a0:	b	404a34 <add_mount+0xfac>
  4048a4:	ldr	x0, [x29, #256]
  4048a8:	ldr	x1, [x29, #64]
  4048ac:	bl	403778 <write_before>
  4048b0:	str	w0, [x29, #160]
  4048b4:	ldr	w0, [x29, #160]
  4048b8:	cmp	w0, #0x0
  4048bc:	b.ge	4048c8 <add_mount+0xe40>  // b.tcont
  4048c0:	ldr	w19, [x29, #160]
  4048c4:	b	404a34 <add_mount+0xfac>
  4048c8:	ldr	x0, [x29, #256]
  4048cc:	ldr	x1, [x29, #64]
  4048d0:	bl	4037ac <write_requires_mounts_for>
  4048d4:	str	w0, [x29, #160]
  4048d8:	ldr	w0, [x29, #160]
  4048dc:	cmp	w0, #0x0
  4048e0:	b.ge	4048ec <add_mount+0xe64>  // b.tcont
  4048e4:	ldr	w19, [x29, #160]
  4048e8:	b	404a34 <add_mount+0xfac>
  4048ec:	ldr	x3, [x29, #256]
  4048f0:	ldr	x0, [x29, #248]
  4048f4:	mov	x2, x0
  4048f8:	adrp	x0, 407000 <_fini+0x3ac>
  4048fc:	add	x1, x0, #0x3e8
  404900:	mov	x0, x3
  404904:	bl	401ca0 <fprintf@plt>
  404908:	ldr	x0, [x29, #256]
  40490c:	ldr	x2, [x29, #64]
  404910:	ldr	x1, [x29, #88]
  404914:	bl	40331c <write_idle_timeout>
  404918:	str	w0, [x29, #160]
  40491c:	ldr	w0, [x29, #160]
  404920:	cmp	w0, #0x0
  404924:	b.ge	404930 <add_mount+0xea8>  // b.tcont
  404928:	ldr	w19, [x29, #160]
  40492c:	b	404a34 <add_mount+0xfac>
  404930:	ldr	x0, [x29, #256]
  404934:	bl	402010 <fflush_and_check@plt>
  404938:	str	w0, [x29, #160]
  40493c:	ldr	w0, [x29, #160]
  404940:	cmp	w0, #0x0
  404944:	b.ge	4049dc <add_mount+0xf54>  // b.tcont
  404948:	mov	w0, #0x3                   	// #3
  40494c:	str	w0, [x29, #164]
  404950:	ldr	w0, [x29, #160]
  404954:	str	w0, [x29, #168]
  404958:	str	wzr, [x29, #172]
  40495c:	ldr	w0, [x29, #172]
  404960:	bl	402020 <log_get_max_level_realm@plt>
  404964:	mov	w1, w0
  404968:	ldr	w0, [x29, #164]
  40496c:	and	w0, w0, #0x7
  404970:	cmp	w1, w0
  404974:	b.lt	4049c4 <add_mount+0xf3c>  // b.tstop
  404978:	ldr	w0, [x29, #172]
  40497c:	lsl	w1, w0, #10
  404980:	ldr	w0, [x29, #164]
  404984:	orr	w7, w1, w0
  404988:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40498c:	add	x1, x0, #0xdbb
  404990:	ldr	x0, [x29, #232]
  404994:	mov	x6, x0
  404998:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40499c:	add	x5, x0, #0xf28
  4049a0:	adrp	x0, 407000 <_fini+0x3ac>
  4049a4:	add	x4, x0, #0xae8
  4049a8:	mov	w3, #0x1fb                 	// #507
  4049ac:	mov	x2, x1
  4049b0:	ldr	w1, [x29, #168]
  4049b4:	mov	w0, w7
  4049b8:	bl	401ee0 <log_internal_realm@plt>
  4049bc:	mov	w19, w0
  4049c0:	b	404a34 <add_mount+0xfac>
  4049c4:	ldr	w0, [x29, #168]
  4049c8:	cmp	w0, #0x0
  4049cc:	cneg	w0, w0, lt  // lt = tstop
  4049d0:	and	w0, w0, #0xff
  4049d4:	neg	w19, w0
  4049d8:	b	404a34 <add_mount+0xfac>
  4049dc:	ldr	w0, [x29, #56]
  4049e0:	and	w0, w0, #0x2
  4049e4:	cmp	w0, #0x0
  4049e8:	b.eq	4049f8 <add_mount+0xf70>  // b.none
  4049ec:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4049f0:	add	x0, x0, #0xf88
  4049f4:	b	404a00 <add_mount+0xf78>
  4049f8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4049fc:	add	x0, x0, #0xf90
  404a00:	ldr	x1, [x29, #232]
  404a04:	mov	x3, x1
  404a08:	mov	x2, x0
  404a0c:	ldr	x1, [x29, #48]
  404a10:	ldr	x0, [x29, #104]
  404a14:	bl	401e50 <generator_add_symlink@plt>
  404a18:	str	w0, [x29, #160]
  404a1c:	ldr	w0, [x29, #160]
  404a20:	cmp	w0, #0x0
  404a24:	b.ge	404a30 <add_mount+0xfa8>  // b.tcont
  404a28:	ldr	w19, [x29, #160]
  404a2c:	b	404a34 <add_mount+0xfac>
  404a30:	mov	w19, #0x0                   	// #0
  404a34:	add	x0, x29, #0x100
  404a38:	bl	4022e8 <fclosep>
  404a3c:	add	x0, x29, #0xf8
  404a40:	bl	402248 <freep>
  404a44:	add	x0, x29, #0xf0
  404a48:	bl	402248 <freep>
  404a4c:	add	x0, x29, #0xe8
  404a50:	bl	402248 <freep>
  404a54:	add	x0, x29, #0xe0
  404a58:	bl	402248 <freep>
  404a5c:	mov	w1, w19
  404a60:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  404a64:	add	x0, x0, #0x700
  404a68:	ldr	x2, [x29, #344]
  404a6c:	ldr	x0, [x0]
  404a70:	eor	x0, x2, x0
  404a74:	cmp	x0, #0x0
  404a78:	b.eq	404a80 <add_mount+0xff8>  // b.none
  404a7c:	bl	401e60 <__stack_chk_fail@plt>
  404a80:	mov	w0, w1
  404a84:	mov	sp, x29
  404a88:	ldp	x19, x20, [sp, #16]
  404a8c:	ldp	x29, x30, [sp], #352
  404a90:	ret

0000000000404a94 <parse_fstab>:
  404a94:	sub	sp, sp, #0x140
  404a98:	stp	x29, x30, [sp, #48]
  404a9c:	add	x29, sp, #0x30
  404aa0:	stp	x19, x20, [sp, #64]
  404aa4:	stp	x21, x22, [sp, #80]
  404aa8:	stp	x23, x24, [sp, #96]
  404aac:	stp	x25, x26, [sp, #112]
  404ab0:	str	x27, [sp, #128]
  404ab4:	strb	w0, [sp, #159]
  404ab8:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  404abc:	add	x0, x0, #0x700
  404ac0:	ldr	x1, [x0]
  404ac4:	str	x1, [sp, #312]
  404ac8:	mov	x1, #0x0                   	// #0
  404acc:	str	xzr, [sp, #256]
  404ad0:	str	wzr, [sp, #176]
  404ad4:	ldrb	w0, [sp, #159]
  404ad8:	cmp	w0, #0x0
  404adc:	b.ne	404ae8 <parse_fstab+0x54>  // b.any
  404ae0:	bl	402408 <fstab_path>
  404ae4:	b	404af0 <parse_fstab+0x5c>
  404ae8:	adrp	x0, 407000 <_fini+0x3ac>
  404aec:	add	x0, x0, #0x418
  404af0:	str	x0, [sp, #296]
  404af4:	mov	w0, #0x7                   	// #7
  404af8:	str	w0, [sp, #184]
  404afc:	str	wzr, [sp, #188]
  404b00:	str	wzr, [sp, #192]
  404b04:	ldr	w0, [sp, #192]
  404b08:	bl	402020 <log_get_max_level_realm@plt>
  404b0c:	mov	w1, w0
  404b10:	ldr	w0, [sp, #184]
  404b14:	and	w0, w0, #0x7
  404b18:	cmp	w1, w0
  404b1c:	b.lt	404b64 <parse_fstab+0xd0>  // b.tstop
  404b20:	ldr	w0, [sp, #192]
  404b24:	lsl	w1, w0, #10
  404b28:	ldr	w0, [sp, #184]
  404b2c:	orr	w7, w1, w0
  404b30:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404b34:	add	x1, x0, #0xdbb
  404b38:	ldr	x6, [sp, #296]
  404b3c:	adrp	x0, 407000 <_fini+0x3ac>
  404b40:	add	x5, x0, #0x430
  404b44:	adrp	x0, 407000 <_fini+0x3ac>
  404b48:	add	x4, x0, #0xb18
  404b4c:	mov	w3, #0x20d                 	// #525
  404b50:	mov	x2, x1
  404b54:	ldr	w1, [sp, #188]
  404b58:	mov	w0, w7
  404b5c:	bl	401ee0 <log_internal_realm@plt>
  404b60:	b	404b6c <parse_fstab+0xd8>
  404b64:	ldr	w0, [sp, #188]
  404b68:	cmp	w0, #0x0
  404b6c:	adrp	x0, 407000 <_fini+0x3ac>
  404b70:	add	x1, x0, #0x440
  404b74:	ldr	x0, [sp, #296]
  404b78:	bl	401d20 <setmntent@plt>
  404b7c:	str	x0, [sp, #256]
  404b80:	ldr	x0, [sp, #256]
  404b84:	cmp	x0, #0x0
  404b88:	b.ne	4052a4 <parse_fstab+0x810>  // b.any
  404b8c:	bl	401e00 <__errno_location@plt>
  404b90:	ldr	w0, [x0]
  404b94:	cmp	w0, #0x2
  404b98:	b.ne	404ba4 <parse_fstab+0x110>  // b.any
  404b9c:	mov	w20, #0x0                   	// #0
  404ba0:	b	4052c0 <parse_fstab+0x82c>
  404ba4:	mov	w0, #0x3                   	// #3
  404ba8:	str	w0, [sp, #244]
  404bac:	bl	401e00 <__errno_location@plt>
  404bb0:	ldr	w0, [x0]
  404bb4:	str	w0, [sp, #248]
  404bb8:	str	wzr, [sp, #252]
  404bbc:	ldr	w0, [sp, #252]
  404bc0:	bl	402020 <log_get_max_level_realm@plt>
  404bc4:	mov	w1, w0
  404bc8:	ldr	w0, [sp, #244]
  404bcc:	and	w0, w0, #0x7
  404bd0:	cmp	w1, w0
  404bd4:	b.lt	404c20 <parse_fstab+0x18c>  // b.tstop
  404bd8:	ldr	w0, [sp, #252]
  404bdc:	lsl	w1, w0, #10
  404be0:	ldr	w0, [sp, #244]
  404be4:	orr	w7, w1, w0
  404be8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404bec:	add	x1, x0, #0xdbb
  404bf0:	ldr	x6, [sp, #296]
  404bf4:	adrp	x0, 407000 <_fini+0x3ac>
  404bf8:	add	x5, x0, #0x448
  404bfc:	adrp	x0, 407000 <_fini+0x3ac>
  404c00:	add	x4, x0, #0xb18
  404c04:	mov	w3, #0x214                 	// #532
  404c08:	mov	x2, x1
  404c0c:	ldr	w1, [sp, #248]
  404c10:	mov	w0, w7
  404c14:	bl	401ee0 <log_internal_realm@plt>
  404c18:	mov	w20, w0
  404c1c:	b	4052c0 <parse_fstab+0x82c>
  404c20:	ldr	w0, [sp, #248]
  404c24:	cmp	w0, #0x0
  404c28:	cneg	w0, w0, lt  // lt = tstop
  404c2c:	and	w0, w0, #0xff
  404c30:	neg	w20, w0
  404c34:	b	4052c0 <parse_fstab+0x82c>
  404c38:	str	xzr, [sp, #264]
  404c3c:	str	xzr, [sp, #272]
  404c40:	str	xzr, [sp, #280]
  404c44:	ldrb	w0, [sp, #159]
  404c48:	cmp	w0, #0x0
  404c4c:	b.eq	404c74 <parse_fstab+0x1e0>  // b.none
  404c50:	ldr	x0, [sp, #304]
  404c54:	bl	403054 <mount_in_initrd>
  404c58:	and	w0, w0, #0xff
  404c5c:	eor	w0, w0, #0x1
  404c60:	and	w0, w0, #0xff
  404c64:	cmp	w0, #0x0
  404c68:	b.eq	404c74 <parse_fstab+0x1e0>  // b.none
  404c6c:	mov	w19, #0x0                   	// #0
  404c70:	b	405228 <parse_fstab+0x794>
  404c74:	ldr	x0, [sp, #304]
  404c78:	ldr	x0, [x0]
  404c7c:	bl	401df0 <fstab_node_to_udev_node@plt>
  404c80:	str	x0, [sp, #272]
  404c84:	ldr	x0, [sp, #272]
  404c88:	cmp	x0, #0x0
  404c8c:	b.ne	404cb8 <parse_fstab+0x224>  // b.any
  404c90:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404c94:	add	x1, x0, #0xdbb
  404c98:	adrp	x0, 407000 <_fini+0x3ac>
  404c9c:	add	x3, x0, #0xb18
  404ca0:	mov	w2, #0x221                 	// #545
  404ca4:	mov	w0, #0x0                   	// #0
  404ca8:	bl	402000 <log_oom_internal@plt>
  404cac:	mov	w20, w0
  404cb0:	mov	w19, #0x1                   	// #1
  404cb4:	b	405228 <parse_fstab+0x794>
  404cb8:	ldr	x0, [sp, #272]
  404cbc:	bl	401ea0 <is_device_path@plt>
  404cc0:	and	w0, w0, #0xff
  404cc4:	cmp	w0, #0x0
  404cc8:	b.eq	404d64 <parse_fstab+0x2d0>  // b.none
  404ccc:	adrp	x0, 407000 <_fini+0x3ac>
  404cd0:	add	x0, x0, #0x460
  404cd4:	bl	401da0 <path_is_read_only_fs@plt>
  404cd8:	cmp	w0, #0x0
  404cdc:	b.le	404d64 <parse_fstab+0x2d0>
  404ce0:	mov	w0, #0x6                   	// #6
  404ce4:	str	w0, [sp, #196]
  404ce8:	str	wzr, [sp, #200]
  404cec:	str	wzr, [sp, #204]
  404cf0:	ldr	w0, [sp, #204]
  404cf4:	bl	402020 <log_get_max_level_realm@plt>
  404cf8:	mov	w1, w0
  404cfc:	ldr	w0, [sp, #196]
  404d00:	and	w0, w0, #0x7
  404d04:	cmp	w1, w0
  404d08:	b.lt	404d54 <parse_fstab+0x2c0>  // b.tstop
  404d0c:	ldr	w0, [sp, #204]
  404d10:	lsl	w1, w0, #10
  404d14:	ldr	w0, [sp, #196]
  404d18:	orr	w7, w1, w0
  404d1c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404d20:	add	x1, x0, #0xdbb
  404d24:	ldr	x0, [sp, #272]
  404d28:	mov	x6, x0
  404d2c:	adrp	x0, 407000 <_fini+0x3ac>
  404d30:	add	x5, x0, #0x468
  404d34:	adrp	x0, 407000 <_fini+0x3ac>
  404d38:	add	x4, x0, #0xb18
  404d3c:	mov	w3, #0x224                 	// #548
  404d40:	mov	x2, x1
  404d44:	ldr	w1, [sp, #200]
  404d48:	mov	w0, w7
  404d4c:	bl	401ee0 <log_internal_realm@plt>
  404d50:	b	404d5c <parse_fstab+0x2c8>
  404d54:	ldr	w0, [sp, #200]
  404d58:	cmp	w0, #0x0
  404d5c:	mov	w19, #0x0                   	// #0
  404d60:	b	405228 <parse_fstab+0x794>
  404d64:	ldr	x0, [sp, #304]
  404d68:	ldr	x0, [x0, #8]
  404d6c:	bl	401f50 <strdup@plt>
  404d70:	str	x0, [sp, #264]
  404d74:	ldr	x0, [sp, #264]
  404d78:	cmp	x0, #0x0
  404d7c:	b.ne	404da8 <parse_fstab+0x314>  // b.any
  404d80:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404d84:	add	x1, x0, #0xdbb
  404d88:	adrp	x0, 407000 <_fini+0x3ac>
  404d8c:	add	x3, x0, #0xb18
  404d90:	mov	w2, #0x22a                 	// #554
  404d94:	mov	w0, #0x0                   	// #0
  404d98:	bl	402000 <log_oom_internal@plt>
  404d9c:	mov	w20, w0
  404da0:	mov	w19, #0x1                   	// #1
  404da4:	b	405228 <parse_fstab+0x794>
  404da8:	ldr	x0, [sp, #264]
  404dac:	bl	401cb0 <is_path@plt>
  404db0:	and	w0, w0, #0xff
  404db4:	cmp	w0, #0x0
  404db8:	b.eq	404f48 <parse_fstab+0x4b4>  // b.none
  404dbc:	ldr	x0, [sp, #264]
  404dc0:	mov	w1, #0x0                   	// #0
  404dc4:	bl	401f30 <path_simplify@plt>
  404dc8:	ldr	x5, [sp, #264]
  404dcc:	ldrb	w0, [sp, #159]
  404dd0:	cmp	w0, #0x0
  404dd4:	b.eq	404de4 <parse_fstab+0x350>  // b.none
  404dd8:	adrp	x0, 407000 <_fini+0x3ac>
  404ddc:	add	x0, x0, #0x2b8
  404de0:	b	404de8 <parse_fstab+0x354>
  404de4:	mov	x0, #0x0                   	// #0
  404de8:	add	x1, sp, #0x118
  404dec:	mov	x4, #0x0                   	// #0
  404df0:	mov	x3, x1
  404df4:	mov	w2, #0x3                   	// #3
  404df8:	mov	x1, x0
  404dfc:	mov	x0, x5
  404e00:	bl	401c50 <chase_symlinks@plt>
  404e04:	str	w0, [sp, #176]
  404e08:	ldr	w0, [sp, #176]
  404e0c:	cmp	w0, #0x0
  404e10:	b.ge	404e98 <parse_fstab+0x404>  // b.tcont
  404e14:	mov	w0, #0x7                   	// #7
  404e18:	str	w0, [sp, #220]
  404e1c:	ldr	w0, [sp, #176]
  404e20:	str	w0, [sp, #224]
  404e24:	str	wzr, [sp, #228]
  404e28:	ldr	w0, [sp, #228]
  404e2c:	bl	402020 <log_get_max_level_realm@plt>
  404e30:	mov	w1, w0
  404e34:	ldr	w0, [sp, #220]
  404e38:	and	w0, w0, #0x7
  404e3c:	cmp	w1, w0
  404e40:	b.lt	404e8c <parse_fstab+0x3f8>  // b.tstop
  404e44:	ldr	w0, [sp, #228]
  404e48:	lsl	w1, w0, #10
  404e4c:	ldr	w0, [sp, #220]
  404e50:	orr	w7, w1, w0
  404e54:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404e58:	add	x1, x0, #0xdbb
  404e5c:	ldr	x0, [sp, #264]
  404e60:	mov	x6, x0
  404e64:	adrp	x0, 407000 <_fini+0x3ac>
  404e68:	add	x5, x0, #0x4a8
  404e6c:	adrp	x0, 407000 <_fini+0x3ac>
  404e70:	add	x4, x0, #0xb18
  404e74:	mov	w3, #0x238                 	// #568
  404e78:	mov	x2, x1
  404e7c:	ldr	w1, [sp, #224]
  404e80:	mov	w0, w7
  404e84:	bl	401ee0 <log_internal_realm@plt>
  404e88:	b	404f48 <parse_fstab+0x4b4>
  404e8c:	ldr	w0, [sp, #224]
  404e90:	cmp	w0, #0x0
  404e94:	b	404f48 <parse_fstab+0x4b4>
  404e98:	ldr	x0, [sp, #280]
  404e9c:	ldr	x1, [sp, #264]
  404ea0:	bl	401f40 <strcmp@plt>
  404ea4:	cmp	w0, #0x0
  404ea8:	b.ne	404ebc <parse_fstab+0x428>  // b.any
  404eac:	ldr	x0, [sp, #280]
  404eb0:	bl	402228 <mfree>
  404eb4:	str	x0, [sp, #280]
  404eb8:	b	404f48 <parse_fstab+0x4b4>
  404ebc:	mov	w0, #0x7                   	// #7
  404ec0:	str	w0, [sp, #208]
  404ec4:	str	wzr, [sp, #212]
  404ec8:	str	wzr, [sp, #216]
  404ecc:	ldr	w0, [sp, #216]
  404ed0:	bl	402020 <log_get_max_level_realm@plt>
  404ed4:	mov	w1, w0
  404ed8:	ldr	w0, [sp, #208]
  404edc:	and	w0, w0, #0x7
  404ee0:	cmp	w1, w0
  404ee4:	b.lt	404f40 <parse_fstab+0x4ac>  // b.tstop
  404ee8:	ldr	w0, [sp, #216]
  404eec:	lsl	w1, w0, #10
  404ef0:	ldr	w0, [sp, #208]
  404ef4:	orr	w8, w1, w0
  404ef8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404efc:	add	x1, x0, #0xdbb
  404f00:	ldr	x2, [sp, #272]
  404f04:	ldr	x3, [sp, #264]
  404f08:	ldr	x0, [sp, #280]
  404f0c:	str	x0, [sp]
  404f10:	mov	x7, x3
  404f14:	mov	x6, x2
  404f18:	adrp	x0, 407000 <_fini+0x3ac>
  404f1c:	add	x5, x0, #0x4e0
  404f20:	adrp	x0, 407000 <_fini+0x3ac>
  404f24:	add	x4, x0, #0xb18
  404f28:	mov	w3, #0x23c                 	// #572
  404f2c:	mov	x2, x1
  404f30:	ldr	w1, [sp, #212]
  404f34:	mov	w0, w8
  404f38:	bl	401ee0 <log_internal_realm@plt>
  404f3c:	b	404f48 <parse_fstab+0x4b4>
  404f40:	ldr	w0, [sp, #212]
  404f44:	cmp	w0, #0x0
  404f48:	ldr	x0, [sp, #304]
  404f4c:	ldr	x2, [x0, #24]
  404f50:	adrp	x0, 407000 <_fini+0x3ac>
  404f54:	add	x1, x0, #0x508
  404f58:	mov	x0, x2
  404f5c:	bl	40230c <fstab_test_option>
  404f60:	strb	w0, [sp, #171]
  404f64:	ldr	x0, [sp, #304]
  404f68:	ldr	x2, [x0, #24]
  404f6c:	adrp	x0, 407000 <_fini+0x3ac>
  404f70:	add	x1, x0, #0x520
  404f74:	mov	x0, x2
  404f78:	bl	40230c <fstab_test_option>
  404f7c:	strb	w0, [sp, #172]
  404f80:	ldr	x0, [sp, #304]
  404f84:	ldr	x2, [x0, #24]
  404f88:	adrp	x0, 407000 <_fini+0x3ac>
  404f8c:	add	x1, x0, #0x538
  404f90:	mov	x0, x2
  404f94:	bl	402348 <fstab_test_yes_no_option>
  404f98:	strb	w0, [sp, #173]
  404f9c:	ldr	x0, [sp, #304]
  404fa0:	ldr	x2, [x0, #24]
  404fa4:	adrp	x0, 407000 <_fini+0x3ac>
  404fa8:	add	x1, x0, #0x548
  404fac:	mov	x0, x2
  404fb0:	bl	402348 <fstab_test_yes_no_option>
  404fb4:	strb	w0, [sp, #174]
  404fb8:	mov	w0, #0x7                   	// #7
  404fbc:	str	w0, [sp, #232]
  404fc0:	str	wzr, [sp, #236]
  404fc4:	str	wzr, [sp, #240]
  404fc8:	ldr	w0, [sp, #240]
  404fcc:	bl	402020 <log_get_max_level_realm@plt>
  404fd0:	mov	w1, w0
  404fd4:	ldr	w0, [sp, #232]
  404fd8:	and	w0, w0, #0x7
  404fdc:	cmp	w1, w0
  404fe0:	b.lt	40507c <parse_fstab+0x5e8>  // b.tstop
  404fe4:	ldr	w0, [sp, #240]
  404fe8:	lsl	w1, w0, #10
  404fec:	ldr	w0, [sp, #232]
  404ff0:	orr	w21, w1, w0
  404ff4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  404ff8:	add	x22, x0, #0xdbb
  404ffc:	ldr	x23, [sp, #272]
  405000:	ldr	x24, [sp, #264]
  405004:	ldr	x0, [sp, #304]
  405008:	ldr	x19, [x0, #16]
  40500c:	ldrb	w0, [sp, #171]
  405010:	bl	4024c0 <yes_no>
  405014:	mov	x25, x0
  405018:	ldrb	w0, [sp, #172]
  40501c:	bl	4024c0 <yes_no>
  405020:	mov	x26, x0
  405024:	ldrb	w0, [sp, #173]
  405028:	bl	4024c0 <yes_no>
  40502c:	mov	x27, x0
  405030:	ldrb	w0, [sp, #174]
  405034:	bl	4024c0 <yes_no>
  405038:	str	x0, [sp, #32]
  40503c:	str	x27, [sp, #24]
  405040:	str	x26, [sp, #16]
  405044:	str	x25, [sp, #8]
  405048:	str	x19, [sp]
  40504c:	mov	x7, x24
  405050:	mov	x6, x23
  405054:	adrp	x0, 407000 <_fini+0x3ac>
  405058:	add	x5, x0, #0x558
  40505c:	adrp	x0, 407000 <_fini+0x3ac>
  405060:	add	x4, x0, #0xb18
  405064:	mov	w3, #0x244                 	// #580
  405068:	mov	x2, x22
  40506c:	ldr	w1, [sp, #236]
  405070:	mov	w0, w21
  405074:	bl	401ee0 <log_internal_realm@plt>
  405078:	b	405084 <parse_fstab+0x5f0>
  40507c:	ldr	w0, [sp, #236]
  405080:	cmp	w0, #0x0
  405084:	ldr	x0, [sp, #304]
  405088:	ldr	x2, [x0, #16]
  40508c:	adrp	x0, 407000 <_fini+0x3ac>
  405090:	add	x1, x0, #0x5a8
  405094:	mov	x0, x2
  405098:	bl	401f40 <strcmp@plt>
  40509c:	cmp	w0, #0x0
  4050a0:	b.ne	4050e8 <parse_fstab+0x654>  // b.any
  4050a4:	ldr	x3, [sp, #272]
  4050a8:	ldrb	w0, [sp, #171]
  4050ac:	lsl	w1, w0, #3
  4050b0:	ldrb	w0, [sp, #172]
  4050b4:	lsl	w0, w0, #4
  4050b8:	orr	w1, w1, w0
  4050bc:	ldrb	w0, [sp, #173]
  4050c0:	orr	w1, w1, w0
  4050c4:	ldrb	w0, [sp, #174]
  4050c8:	lsl	w0, w0, #1
  4050cc:	orr	w0, w1, w0
  4050d0:	mov	w2, w0
  4050d4:	ldr	x1, [sp, #304]
  4050d8:	mov	x0, x3
  4050dc:	bl	4029f0 <add_swap>
  4050e0:	str	w0, [sp, #180]
  4050e4:	b	405204 <parse_fstab+0x770>
  4050e8:	ldr	x0, [sp, #304]
  4050ec:	ldr	x2, [x0, #24]
  4050f0:	adrp	x0, 407000 <_fini+0x3ac>
  4050f4:	add	x1, x0, #0x5b0
  4050f8:	mov	x0, x2
  4050fc:	bl	40230c <fstab_test_option>
  405100:	strb	w0, [sp, #175]
  405104:	ldrb	w0, [sp, #159]
  405108:	cmp	w0, #0x0
  40510c:	b.eq	405120 <parse_fstab+0x68c>  // b.none
  405110:	adrp	x0, 407000 <_fini+0x3ac>
  405114:	add	x0, x0, #0x5e0
  405118:	str	x0, [sp, #288]
  40511c:	b	405150 <parse_fstab+0x6bc>
  405120:	ldr	x0, [sp, #304]
  405124:	bl	402fac <mount_is_network>
  405128:	and	w0, w0, #0xff
  40512c:	cmp	w0, #0x0
  405130:	b.eq	405144 <parse_fstab+0x6b0>  // b.none
  405134:	adrp	x0, 407000 <_fini+0x3ac>
  405138:	add	x0, x0, #0x5f8
  40513c:	str	x0, [sp, #288]
  405140:	b	405150 <parse_fstab+0x6bc>
  405144:	adrp	x0, 407000 <_fini+0x3ac>
  405148:	add	x0, x0, #0x610
  40514c:	str	x0, [sp, #288]
  405150:	adrp	x0, 41a000 <arg_fstab_enabled>
  405154:	add	x0, x0, #0x20
  405158:	ldr	x8, [x0]
  40515c:	ldr	x9, [sp, #272]
  405160:	ldr	x0, [sp, #280]
  405164:	cmp	x0, #0x0
  405168:	b.ne	405170 <parse_fstab+0x6dc>  // b.any
  40516c:	ldr	x0, [sp, #264]
  405170:	ldr	x1, [sp, #280]
  405174:	cmp	x1, #0x0
  405178:	b.eq	405184 <parse_fstab+0x6f0>  // b.none
  40517c:	ldr	x1, [sp, #264]
  405180:	b	405188 <parse_fstab+0x6f4>
  405184:	mov	x1, #0x0                   	// #0
  405188:	ldr	x2, [sp, #304]
  40518c:	ldr	x4, [x2, #16]
  405190:	ldr	x2, [sp, #304]
  405194:	ldr	x5, [x2, #24]
  405198:	ldr	x2, [sp, #304]
  40519c:	ldr	w6, [x2, #36]
  4051a0:	ldrb	w2, [sp, #171]
  4051a4:	lsl	w3, w2, #3
  4051a8:	ldrb	w2, [sp, #172]
  4051ac:	lsl	w2, w2, #4
  4051b0:	orr	w3, w3, w2
  4051b4:	ldrb	w2, [sp, #173]
  4051b8:	orr	w3, w3, w2
  4051bc:	ldrb	w2, [sp, #174]
  4051c0:	lsl	w2, w2, #1
  4051c4:	orr	w3, w3, w2
  4051c8:	ldrb	w2, [sp, #175]
  4051cc:	lsl	w2, w2, #2
  4051d0:	orr	w2, w3, w2
  4051d4:	mov	w3, w2
  4051d8:	ldr	x2, [sp, #296]
  4051dc:	str	x2, [sp, #8]
  4051e0:	ldr	x2, [sp, #288]
  4051e4:	str	x2, [sp]
  4051e8:	mov	w7, w3
  4051ec:	mov	x3, x1
  4051f0:	mov	x2, x0
  4051f4:	mov	x1, x9
  4051f8:	mov	x0, x8
  4051fc:	bl	403a88 <add_mount>
  405200:	str	w0, [sp, #180]
  405204:	ldr	w0, [sp, #176]
  405208:	cmp	w0, #0x0
  40520c:	b.lt	405224 <parse_fstab+0x790>  // b.tstop
  405210:	ldr	w0, [sp, #180]
  405214:	cmp	w0, #0x0
  405218:	b.ge	405224 <parse_fstab+0x790>  // b.tcont
  40521c:	ldr	w0, [sp, #180]
  405220:	str	w0, [sp, #176]
  405224:	mov	w19, #0x2                   	// #2
  405228:	add	x0, sp, #0x118
  40522c:	bl	402248 <freep>
  405230:	cmp	w19, #0x0
  405234:	b.eq	405244 <parse_fstab+0x7b0>  // b.none
  405238:	cmp	w19, #0x2
  40523c:	b.ne	40524c <parse_fstab+0x7b8>  // b.any
  405240:	b	405254 <parse_fstab+0x7c0>
  405244:	mov	w19, #0x0                   	// #0
  405248:	b	405258 <parse_fstab+0x7c4>
  40524c:	mov	w19, #0x1                   	// #1
  405250:	b	405258 <parse_fstab+0x7c4>
  405254:	mov	w19, #0x2                   	// #2
  405258:	add	x0, sp, #0x110
  40525c:	bl	402248 <freep>
  405260:	cmp	w19, #0x0
  405264:	b.eq	405274 <parse_fstab+0x7e0>  // b.none
  405268:	cmp	w19, #0x2
  40526c:	b.ne	40527c <parse_fstab+0x7e8>  // b.any
  405270:	b	405284 <parse_fstab+0x7f0>
  405274:	mov	w19, #0x0                   	// #0
  405278:	b	405288 <parse_fstab+0x7f4>
  40527c:	mov	w19, #0x1                   	// #1
  405280:	b	405288 <parse_fstab+0x7f4>
  405284:	mov	w19, #0x2                   	// #2
  405288:	add	x0, sp, #0x108
  40528c:	bl	402248 <freep>
  405290:	cmp	w19, #0x0
  405294:	b.eq	4052a4 <parse_fstab+0x810>  // b.none
  405298:	cmp	w19, #0x2
  40529c:	b.ne	4052c0 <parse_fstab+0x82c>  // b.any
  4052a0:	nop
  4052a4:	ldr	x0, [sp, #256]
  4052a8:	bl	401d60 <getmntent@plt>
  4052ac:	str	x0, [sp, #304]
  4052b0:	ldr	x0, [sp, #304]
  4052b4:	cmp	x0, #0x0
  4052b8:	b.ne	404c38 <parse_fstab+0x1a4>  // b.any
  4052bc:	ldr	w20, [sp, #176]
  4052c0:	add	x0, sp, #0x100
  4052c4:	bl	4025b8 <endmntentp>
  4052c8:	mov	w1, w20
  4052cc:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4052d0:	add	x0, x0, #0x700
  4052d4:	ldr	x2, [sp, #312]
  4052d8:	ldr	x0, [x0]
  4052dc:	eor	x0, x2, x0
  4052e0:	cmp	x0, #0x0
  4052e4:	b.eq	4052ec <parse_fstab+0x858>  // b.none
  4052e8:	bl	401e60 <__stack_chk_fail@plt>
  4052ec:	mov	w0, w1
  4052f0:	ldp	x19, x20, [sp, #64]
  4052f4:	ldp	x21, x22, [sp, #80]
  4052f8:	ldp	x23, x24, [sp, #96]
  4052fc:	ldp	x25, x26, [sp, #112]
  405300:	ldr	x27, [sp, #128]
  405304:	ldp	x29, x30, [sp, #48]
  405308:	add	sp, sp, #0x140
  40530c:	ret

0000000000405310 <add_sysroot_mount>:
  405310:	stp	x29, x30, [sp, #-192]!
  405314:	mov	x29, sp
  405318:	stp	x19, x20, [sp, #16]
  40531c:	str	x21, [sp, #32]
  405320:	sub	sp, sp, #0x10
  405324:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  405328:	add	x0, x0, #0x700
  40532c:	ldr	x1, [x0]
  405330:	str	x1, [x29, #184]
  405334:	mov	x1, #0x0                   	// #0
  405338:	str	xzr, [x29, #104]
  40533c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405340:	add	x0, x0, #0x30
  405344:	ldr	x0, [x0]
  405348:	bl	4024f0 <isempty>
  40534c:	and	w0, w0, #0xff
  405350:	cmp	w0, #0x0
  405354:	b.eq	4053d4 <add_sysroot_mount+0xc4>  // b.none
  405358:	mov	w0, #0x7                   	// #7
  40535c:	str	w0, [x29, #92]
  405360:	str	wzr, [x29, #96]
  405364:	str	wzr, [x29, #100]
  405368:	ldr	w0, [x29, #100]
  40536c:	bl	402020 <log_get_max_level_realm@plt>
  405370:	mov	w1, w0
  405374:	ldr	w0, [x29, #92]
  405378:	and	w0, w0, #0x7
  40537c:	cmp	w1, w0
  405380:	b.lt	4053c4 <add_sysroot_mount+0xb4>  // b.tstop
  405384:	ldr	w0, [x29, #100]
  405388:	lsl	w1, w0, #10
  40538c:	ldr	w0, [x29, #92]
  405390:	orr	w6, w1, w0
  405394:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405398:	add	x1, x0, #0xdbb
  40539c:	adrp	x0, 407000 <_fini+0x3ac>
  4053a0:	add	x5, x0, #0x620
  4053a4:	adrp	x0, 407000 <_fini+0x3ac>
  4053a8:	add	x4, x0, #0xb28
  4053ac:	mov	w3, #0x273                 	// #627
  4053b0:	mov	x2, x1
  4053b4:	ldr	w1, [x29, #96]
  4053b8:	mov	w0, w6
  4053bc:	bl	401ee0 <log_internal_realm@plt>
  4053c0:	b	4053cc <add_sysroot_mount+0xbc>
  4053c4:	ldr	w0, [x29, #96]
  4053c8:	cmp	w0, #0x0
  4053cc:	mov	w19, #0x0                   	// #0
  4053d0:	b	40590c <add_sysroot_mount+0x5fc>
  4053d4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4053d8:	add	x0, x0, #0x30
  4053dc:	ldr	x2, [x0]
  4053e0:	adrp	x0, 407000 <_fini+0x3ac>
  4053e4:	add	x1, x0, #0x660
  4053e8:	mov	x0, x2
  4053ec:	bl	401f40 <strcmp@plt>
  4053f0:	cmp	w0, #0x0
  4053f4:	b.ne	405474 <add_sysroot_mount+0x164>  // b.any
  4053f8:	mov	w0, #0x7                   	// #7
  4053fc:	str	w0, [x29, #80]
  405400:	str	wzr, [x29, #84]
  405404:	str	wzr, [x29, #88]
  405408:	ldr	w0, [x29, #88]
  40540c:	bl	402020 <log_get_max_level_realm@plt>
  405410:	mov	w1, w0
  405414:	ldr	w0, [x29, #80]
  405418:	and	w0, w0, #0x7
  40541c:	cmp	w1, w0
  405420:	b.lt	405464 <add_sysroot_mount+0x154>  // b.tstop
  405424:	ldr	w0, [x29, #88]
  405428:	lsl	w1, w0, #10
  40542c:	ldr	w0, [x29, #80]
  405430:	orr	w6, w1, w0
  405434:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405438:	add	x1, x0, #0xdbb
  40543c:	adrp	x0, 407000 <_fini+0x3ac>
  405440:	add	x5, x0, #0x670
  405444:	adrp	x0, 407000 <_fini+0x3ac>
  405448:	add	x4, x0, #0xb28
  40544c:	mov	w3, #0x279                 	// #633
  405450:	mov	x2, x1
  405454:	ldr	w1, [x29, #84]
  405458:	mov	w0, w6
  40545c:	bl	401ee0 <log_internal_realm@plt>
  405460:	b	40546c <add_sysroot_mount+0x15c>
  405464:	ldr	w0, [x29, #84]
  405468:	cmp	w0, #0x0
  40546c:	mov	w19, #0x0                   	// #0
  405470:	b	40590c <add_sysroot_mount+0x5fc>
  405474:	adrp	x0, 41a000 <arg_fstab_enabled>
  405478:	add	x0, x0, #0x30
  40547c:	ldr	x2, [x0]
  405480:	adrp	x0, 407000 <_fini+0x3ac>
  405484:	add	x1, x0, #0x6b0
  405488:	mov	x0, x2
  40548c:	bl	401c90 <path_equal@plt>
  405490:	and	w0, w0, #0xff
  405494:	cmp	w0, #0x0
  405498:	b.eq	405518 <add_sysroot_mount+0x208>  // b.none
  40549c:	mov	w0, #0x7                   	// #7
  4054a0:	str	w0, [x29, #68]
  4054a4:	str	wzr, [x29, #72]
  4054a8:	str	wzr, [x29, #76]
  4054ac:	ldr	w0, [x29, #76]
  4054b0:	bl	402020 <log_get_max_level_realm@plt>
  4054b4:	mov	w1, w0
  4054b8:	ldr	w0, [x29, #68]
  4054bc:	and	w0, w0, #0x7
  4054c0:	cmp	w1, w0
  4054c4:	b.lt	405508 <add_sysroot_mount+0x1f8>  // b.tstop
  4054c8:	ldr	w0, [x29, #76]
  4054cc:	lsl	w1, w0, #10
  4054d0:	ldr	w0, [x29, #68]
  4054d4:	orr	w6, w1, w0
  4054d8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4054dc:	add	x1, x0, #0xdbb
  4054e0:	adrp	x0, 407000 <_fini+0x3ac>
  4054e4:	add	x5, x0, #0x6c0
  4054e8:	adrp	x0, 407000 <_fini+0x3ac>
  4054ec:	add	x4, x0, #0xb28
  4054f0:	mov	w3, #0x27f                 	// #639
  4054f4:	mov	x2, x1
  4054f8:	ldr	w1, [x29, #72]
  4054fc:	mov	w0, w6
  405500:	bl	401ee0 <log_internal_realm@plt>
  405504:	b	405510 <add_sysroot_mount+0x200>
  405508:	ldr	w0, [x29, #72]
  40550c:	cmp	w0, #0x0
  405510:	mov	w19, #0x0                   	// #0
  405514:	b	40590c <add_sysroot_mount+0x5fc>
  405518:	adrp	x0, 41a000 <arg_fstab_enabled>
  40551c:	add	x0, x0, #0x30
  405520:	ldr	x0, [x0]
  405524:	bl	401df0 <fstab_node_to_udev_node@plt>
  405528:	str	x0, [x29, #104]
  40552c:	ldr	x0, [x29, #104]
  405530:	cmp	x0, #0x0
  405534:	b.ne	40555c <add_sysroot_mount+0x24c>  // b.any
  405538:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40553c:	add	x1, x0, #0xdbb
  405540:	adrp	x0, 407000 <_fini+0x3ac>
  405544:	add	x3, x0, #0xb28
  405548:	mov	w2, #0x285                 	// #645
  40554c:	mov	w0, #0x0                   	// #0
  405550:	bl	402000 <log_oom_internal@plt>
  405554:	mov	w19, w0
  405558:	b	40590c <add_sysroot_mount+0x5fc>
  40555c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405560:	add	x0, x0, #0x40
  405564:	ldr	x0, [x0]
  405568:	cmp	x0, #0x0
  40556c:	b.ne	4055a0 <add_sysroot_mount+0x290>  // b.any
  405570:	adrp	x0, 41a000 <arg_fstab_enabled>
  405574:	add	x0, x0, #0x4
  405578:	ldr	w0, [x0]
  40557c:	cmp	w0, #0x0
  405580:	b.le	405590 <add_sysroot_mount+0x280>
  405584:	adrp	x0, 407000 <_fini+0x3ac>
  405588:	add	x0, x0, #0x700
  40558c:	b	405598 <add_sysroot_mount+0x288>
  405590:	adrp	x0, 407000 <_fini+0x3ac>
  405594:	add	x0, x0, #0x708
  405598:	str	x0, [x29, #112]
  40559c:	b	4057cc <add_sysroot_mount+0x4bc>
  4055a0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4055a4:	add	x0, x0, #0x4
  4055a8:	ldr	w0, [x0]
  4055ac:	cmp	w0, #0x0
  4055b0:	b.ge	4055e4 <add_sysroot_mount+0x2d4>  // b.tcont
  4055b4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4055b8:	add	x0, x0, #0x40
  4055bc:	ldr	x2, [x0]
  4055c0:	adrp	x0, 407000 <_fini+0x3ac>
  4055c4:	add	x1, x0, #0x710
  4055c8:	mov	x0, x2
  4055cc:	bl	40230c <fstab_test_option>
  4055d0:	and	w0, w0, #0xff
  4055d4:	eor	w0, w0, #0x1
  4055d8:	and	w0, w0, #0xff
  4055dc:	cmp	w0, #0x0
  4055e0:	b.eq	4057bc <add_sysroot_mount+0x4ac>  // b.none
  4055e4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4055e8:	add	x0, x0, #0x40
  4055ec:	ldr	x0, [x0]
  4055f0:	str	x0, [x29, #160]
  4055f4:	adrp	x0, 407000 <_fini+0x3ac>
  4055f8:	add	x0, x0, #0x718
  4055fc:	str	x0, [x29, #168]
  405600:	adrp	x0, 41a000 <arg_fstab_enabled>
  405604:	add	x0, x0, #0x4
  405608:	ldr	w0, [x0]
  40560c:	cmp	w0, #0x0
  405610:	b.le	405620 <add_sysroot_mount+0x310>
  405614:	adrp	x0, 407000 <_fini+0x3ac>
  405618:	add	x0, x0, #0x700
  40561c:	b	405628 <add_sysroot_mount+0x318>
  405620:	adrp	x0, 407000 <_fini+0x3ac>
  405624:	add	x0, x0, #0x708
  405628:	str	x0, [x29, #176]
  40562c:	str	xzr, [x29, #128]
  405630:	str	xzr, [x29, #136]
  405634:	b	405668 <add_sysroot_mount+0x358>
  405638:	ldr	x0, [x29, #136]
  40563c:	lsl	x0, x0, #3
  405640:	add	x1, x29, #0xa0
  405644:	ldr	x0, [x1, x0]
  405648:	bl	401ff0 <strlen@plt>
  40564c:	mov	x1, x0
  405650:	ldr	x0, [x29, #128]
  405654:	add	x0, x0, x1
  405658:	str	x0, [x29, #128]
  40565c:	ldr	x0, [x29, #136]
  405660:	add	x0, x0, #0x1
  405664:	str	x0, [x29, #136]
  405668:	ldr	x0, [x29, #136]
  40566c:	cmp	x0, #0x2
  405670:	b.hi	40568c <add_sysroot_mount+0x37c>  // b.pmore
  405674:	ldr	x0, [x29, #136]
  405678:	lsl	x0, x0, #3
  40567c:	add	x1, x29, #0xa0
  405680:	ldr	x0, [x1, x0]
  405684:	cmp	x0, #0x0
  405688:	b.ne	405638 <add_sysroot_mount+0x328>  // b.any
  40568c:	ldr	x0, [x29, #128]
  405690:	add	x0, x0, #0x1
  405694:	str	x0, [x29, #144]
  405698:	ldr	x1, [x29, #144]
  40569c:	mov	x0, #0x1                   	// #1
  4056a0:	bl	40226c <size_multiply_overflow>
  4056a4:	and	w0, w0, #0xff
  4056a8:	and	x0, x0, #0xff
  4056ac:	cmp	x0, #0x0
  4056b0:	b.eq	4056dc <add_sysroot_mount+0x3cc>  // b.none
  4056b4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4056b8:	add	x1, x0, #0xdbb
  4056bc:	adrp	x0, 407000 <_fini+0x3ac>
  4056c0:	add	x4, x0, #0xb40
  4056c4:	mov	w3, #0x28b                 	// #651
  4056c8:	mov	x2, x1
  4056cc:	adrp	x0, 407000 <_fini+0x3ac>
  4056d0:	add	x1, x0, #0x320
  4056d4:	mov	w0, #0x0                   	// #0
  4056d8:	bl	401cd0 <log_assert_failed_realm@plt>
  4056dc:	ldr	x0, [x29, #144]
  4056e0:	cmp	x0, #0x400, lsl #12
  4056e4:	cset	w0, hi  // hi = pmore
  4056e8:	and	w0, w0, #0xff
  4056ec:	and	x0, x0, #0xff
  4056f0:	cmp	x0, #0x0
  4056f4:	b.eq	405720 <add_sysroot_mount+0x410>  // b.none
  4056f8:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4056fc:	add	x1, x0, #0xdbb
  405700:	adrp	x0, 407000 <_fini+0x3ac>
  405704:	add	x4, x0, #0xb40
  405708:	mov	w3, #0x28b                 	// #651
  40570c:	mov	x2, x1
  405710:	adrp	x0, 407000 <_fini+0x3ac>
  405714:	add	x1, x0, #0x350
  405718:	mov	w0, #0x0                   	// #0
  40571c:	bl	401cd0 <log_assert_failed_realm@plt>
  405720:	ldr	x0, [x29, #144]
  405724:	add	x0, x0, #0xf
  405728:	lsr	x0, x0, #4
  40572c:	lsl	x0, x0, #4
  405730:	sub	sp, sp, x0
  405734:	add	x0, sp, #0x10
  405738:	add	x0, x0, #0xf
  40573c:	lsr	x0, x0, #4
  405740:	lsl	x0, x0, #4
  405744:	str	x0, [x29, #152]
  405748:	ldr	x0, [x29, #152]
  40574c:	str	x0, [x29, #120]
  405750:	str	xzr, [x29, #136]
  405754:	b	405784 <add_sysroot_mount+0x474>
  405758:	ldr	x0, [x29, #136]
  40575c:	lsl	x0, x0, #3
  405760:	add	x1, x29, #0xa0
  405764:	ldr	x0, [x1, x0]
  405768:	mov	x1, x0
  40576c:	ldr	x0, [x29, #120]
  405770:	bl	401bf0 <stpcpy@plt>
  405774:	str	x0, [x29, #120]
  405778:	ldr	x0, [x29, #136]
  40577c:	add	x0, x0, #0x1
  405780:	str	x0, [x29, #136]
  405784:	ldr	x0, [x29, #136]
  405788:	cmp	x0, #0x2
  40578c:	b.hi	4057a8 <add_sysroot_mount+0x498>  // b.pmore
  405790:	ldr	x0, [x29, #136]
  405794:	lsl	x0, x0, #3
  405798:	add	x1, x29, #0xa0
  40579c:	ldr	x0, [x1, x0]
  4057a0:	cmp	x0, #0x0
  4057a4:	b.ne	405758 <add_sysroot_mount+0x448>  // b.any
  4057a8:	ldr	x0, [x29, #120]
  4057ac:	strb	wzr, [x0]
  4057b0:	ldr	x0, [x29, #152]
  4057b4:	str	x0, [x29, #112]
  4057b8:	b	4057cc <add_sysroot_mount+0x4bc>
  4057bc:	adrp	x0, 41a000 <arg_fstab_enabled>
  4057c0:	add	x0, x0, #0x40
  4057c4:	ldr	x0, [x0]
  4057c8:	str	x0, [x29, #112]
  4057cc:	mov	w0, #0x7                   	// #7
  4057d0:	str	w0, [x29, #52]
  4057d4:	str	wzr, [x29, #56]
  4057d8:	str	wzr, [x29, #60]
  4057dc:	ldr	w0, [x29, #60]
  4057e0:	bl	402020 <log_get_max_level_realm@plt>
  4057e4:	mov	w1, w0
  4057e8:	ldr	w0, [x29, #52]
  4057ec:	and	w0, w0, #0x7
  4057f0:	cmp	w1, w0
  4057f4:	b.lt	405854 <add_sysroot_mount+0x544>  // b.tstop
  4057f8:	ldr	w0, [x29, #60]
  4057fc:	lsl	w1, w0, #10
  405800:	ldr	w0, [x29, #52]
  405804:	orr	w19, w1, w0
  405808:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40580c:	add	x20, x0, #0xdbb
  405810:	ldr	x21, [x29, #104]
  405814:	adrp	x0, 41a000 <arg_fstab_enabled>
  405818:	add	x0, x0, #0x38
  40581c:	ldr	x0, [x0]
  405820:	bl	40249c <strna>
  405824:	mov	x7, x0
  405828:	mov	x6, x21
  40582c:	adrp	x0, 407000 <_fini+0x3ac>
  405830:	add	x5, x0, #0x720
  405834:	adrp	x0, 407000 <_fini+0x3ac>
  405838:	add	x4, x0, #0xb28
  40583c:	mov	w3, #0x28f                 	// #655
  405840:	mov	x2, x20
  405844:	ldr	w1, [x29, #56]
  405848:	mov	w0, w19
  40584c:	bl	401ee0 <log_internal_realm@plt>
  405850:	b	40585c <add_sysroot_mount+0x54c>
  405854:	ldr	w0, [x29, #56]
  405858:	cmp	w0, #0x0
  40585c:	ldr	x0, [x29, #104]
  405860:	bl	401ea0 <is_device_path@plt>
  405864:	and	w0, w0, #0xff
  405868:	cmp	w0, #0x0
  40586c:	b.eq	40589c <add_sysroot_mount+0x58c>  // b.none
  405870:	adrp	x0, 41a000 <arg_fstab_enabled>
  405874:	add	x0, x0, #0x20
  405878:	ldr	x0, [x0]
  40587c:	ldr	x1, [x29, #104]
  405880:	bl	401ce0 <generator_write_initrd_root_device_deps@plt>
  405884:	str	w0, [x29, #64]
  405888:	ldr	w0, [x29, #64]
  40588c:	cmp	w0, #0x0
  405890:	b.ge	40589c <add_sysroot_mount+0x58c>  // b.tcont
  405894:	ldr	w19, [x29, #64]
  405898:	b	40590c <add_sysroot_mount+0x5fc>
  40589c:	adrp	x0, 41a000 <arg_fstab_enabled>
  4058a0:	add	x0, x0, #0x20
  4058a4:	ldr	x19, [x0]
  4058a8:	ldr	x20, [x29, #104]
  4058ac:	adrp	x0, 41a000 <arg_fstab_enabled>
  4058b0:	add	x0, x0, #0x38
  4058b4:	ldr	x21, [x0]
  4058b8:	ldr	x0, [x29, #104]
  4058bc:	bl	401ea0 <is_device_path@plt>
  4058c0:	and	w0, w0, #0xff
  4058c4:	mov	w1, w0
  4058c8:	adrp	x0, 407000 <_fini+0x3ac>
  4058cc:	add	x0, x0, #0x750
  4058d0:	str	x0, [sp, #8]
  4058d4:	adrp	x0, 407000 <_fini+0x3ac>
  4058d8:	add	x0, x0, #0x760
  4058dc:	str	x0, [sp]
  4058e0:	mov	w7, #0x0                   	// #0
  4058e4:	mov	w6, w1
  4058e8:	ldr	x5, [x29, #112]
  4058ec:	mov	x4, x21
  4058f0:	mov	x3, #0x0                   	// #0
  4058f4:	adrp	x0, 407000 <_fini+0x3ac>
  4058f8:	add	x2, x0, #0x2b8
  4058fc:	mov	x1, x20
  405900:	mov	x0, x19
  405904:	bl	403a88 <add_mount>
  405908:	mov	w19, w0
  40590c:	add	x0, x29, #0x68
  405910:	bl	402248 <freep>
  405914:	mov	w1, w19
  405918:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  40591c:	add	x0, x0, #0x700
  405920:	ldr	x2, [x29, #184]
  405924:	ldr	x0, [x0]
  405928:	eor	x0, x2, x0
  40592c:	cmp	x0, #0x0
  405930:	b.eq	405938 <add_sysroot_mount+0x628>  // b.none
  405934:	bl	401e60 <__stack_chk_fail@plt>
  405938:	mov	w0, w1
  40593c:	mov	sp, x29
  405940:	ldp	x19, x20, [sp, #16]
  405944:	ldr	x21, [sp, #32]
  405948:	ldp	x29, x30, [sp], #192
  40594c:	ret

0000000000405950 <add_sysroot_usr_mount>:
  405950:	stp	x29, x30, [sp, #-160]!
  405954:	mov	x29, sp
  405958:	stp	x19, x20, [sp, #16]
  40595c:	str	x21, [sp, #32]
  405960:	sub	sp, sp, #0x10
  405964:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  405968:	add	x0, x0, #0x700
  40596c:	ldr	x1, [x0]
  405970:	str	x1, [x29, #152]
  405974:	mov	x1, #0x0                   	// #0
  405978:	str	xzr, [x29, #72]
  40597c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405980:	add	x0, x0, #0x50
  405984:	ldr	x0, [x0]
  405988:	cmp	x0, #0x0
  40598c:	b.ne	4059c0 <add_sysroot_usr_mount+0x70>  // b.any
  405990:	adrp	x0, 41a000 <arg_fstab_enabled>
  405994:	add	x0, x0, #0x58
  405998:	ldr	x0, [x0]
  40599c:	cmp	x0, #0x0
  4059a0:	b.ne	4059c0 <add_sysroot_usr_mount+0x70>  // b.any
  4059a4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4059a8:	add	x0, x0, #0x60
  4059ac:	ldr	x0, [x0]
  4059b0:	cmp	x0, #0x0
  4059b4:	b.ne	4059c0 <add_sysroot_usr_mount+0x70>  // b.any
  4059b8:	mov	w19, #0x0                   	// #0
  4059bc:	b	405efc <add_sysroot_usr_mount+0x5ac>
  4059c0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4059c4:	add	x0, x0, #0x30
  4059c8:	ldr	x0, [x0]
  4059cc:	cmp	x0, #0x0
  4059d0:	b.eq	405a40 <add_sysroot_usr_mount+0xf0>  // b.none
  4059d4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4059d8:	add	x0, x0, #0x50
  4059dc:	ldr	x0, [x0]
  4059e0:	cmp	x0, #0x0
  4059e4:	b.ne	405a40 <add_sysroot_usr_mount+0xf0>  // b.any
  4059e8:	adrp	x0, 41a000 <arg_fstab_enabled>
  4059ec:	add	x0, x0, #0x30
  4059f0:	ldr	x0, [x0]
  4059f4:	bl	401f50 <strdup@plt>
  4059f8:	mov	x1, x0
  4059fc:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a00:	add	x0, x0, #0x50
  405a04:	str	x1, [x0]
  405a08:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a0c:	add	x0, x0, #0x50
  405a10:	ldr	x0, [x0]
  405a14:	cmp	x0, #0x0
  405a18:	b.ne	405a40 <add_sysroot_usr_mount+0xf0>  // b.any
  405a1c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405a20:	add	x1, x0, #0xdbb
  405a24:	adrp	x0, 407000 <_fini+0x3ac>
  405a28:	add	x3, x0, #0xb58
  405a2c:	mov	w2, #0x2ae                 	// #686
  405a30:	mov	w0, #0x0                   	// #0
  405a34:	bl	402000 <log_oom_internal@plt>
  405a38:	mov	w19, w0
  405a3c:	b	405efc <add_sysroot_usr_mount+0x5ac>
  405a40:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a44:	add	x0, x0, #0x38
  405a48:	ldr	x0, [x0]
  405a4c:	cmp	x0, #0x0
  405a50:	b.eq	405ac0 <add_sysroot_usr_mount+0x170>  // b.none
  405a54:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a58:	add	x0, x0, #0x58
  405a5c:	ldr	x0, [x0]
  405a60:	cmp	x0, #0x0
  405a64:	b.ne	405ac0 <add_sysroot_usr_mount+0x170>  // b.any
  405a68:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a6c:	add	x0, x0, #0x38
  405a70:	ldr	x0, [x0]
  405a74:	bl	401f50 <strdup@plt>
  405a78:	mov	x1, x0
  405a7c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a80:	add	x0, x0, #0x58
  405a84:	str	x1, [x0]
  405a88:	adrp	x0, 41a000 <arg_fstab_enabled>
  405a8c:	add	x0, x0, #0x58
  405a90:	ldr	x0, [x0]
  405a94:	cmp	x0, #0x0
  405a98:	b.ne	405ac0 <add_sysroot_usr_mount+0x170>  // b.any
  405a9c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405aa0:	add	x1, x0, #0xdbb
  405aa4:	adrp	x0, 407000 <_fini+0x3ac>
  405aa8:	add	x3, x0, #0xb58
  405aac:	mov	w2, #0x2b4                 	// #692
  405ab0:	mov	w0, #0x0                   	// #0
  405ab4:	bl	402000 <log_oom_internal@plt>
  405ab8:	mov	w19, w0
  405abc:	b	405efc <add_sysroot_usr_mount+0x5ac>
  405ac0:	adrp	x0, 41a000 <arg_fstab_enabled>
  405ac4:	add	x0, x0, #0x40
  405ac8:	ldr	x0, [x0]
  405acc:	cmp	x0, #0x0
  405ad0:	b.eq	405b40 <add_sysroot_usr_mount+0x1f0>  // b.none
  405ad4:	adrp	x0, 41a000 <arg_fstab_enabled>
  405ad8:	add	x0, x0, #0x60
  405adc:	ldr	x0, [x0]
  405ae0:	cmp	x0, #0x0
  405ae4:	b.ne	405b40 <add_sysroot_usr_mount+0x1f0>  // b.any
  405ae8:	adrp	x0, 41a000 <arg_fstab_enabled>
  405aec:	add	x0, x0, #0x40
  405af0:	ldr	x0, [x0]
  405af4:	bl	401f50 <strdup@plt>
  405af8:	mov	x1, x0
  405afc:	adrp	x0, 41a000 <arg_fstab_enabled>
  405b00:	add	x0, x0, #0x60
  405b04:	str	x1, [x0]
  405b08:	adrp	x0, 41a000 <arg_fstab_enabled>
  405b0c:	add	x0, x0, #0x60
  405b10:	ldr	x0, [x0]
  405b14:	cmp	x0, #0x0
  405b18:	b.ne	405b40 <add_sysroot_usr_mount+0x1f0>  // b.any
  405b1c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405b20:	add	x1, x0, #0xdbb
  405b24:	adrp	x0, 407000 <_fini+0x3ac>
  405b28:	add	x3, x0, #0xb58
  405b2c:	mov	w2, #0x2ba                 	// #698
  405b30:	mov	w0, #0x0                   	// #0
  405b34:	bl	402000 <log_oom_internal@plt>
  405b38:	mov	w19, w0
  405b3c:	b	405efc <add_sysroot_usr_mount+0x5ac>
  405b40:	adrp	x0, 41a000 <arg_fstab_enabled>
  405b44:	add	x0, x0, #0x50
  405b48:	ldr	x0, [x0]
  405b4c:	cmp	x0, #0x0
  405b50:	b.ne	405b5c <add_sysroot_usr_mount+0x20c>  // b.any
  405b54:	mov	w19, #0x0                   	// #0
  405b58:	b	405efc <add_sysroot_usr_mount+0x5ac>
  405b5c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405b60:	add	x0, x0, #0x50
  405b64:	ldr	x0, [x0]
  405b68:	bl	401df0 <fstab_node_to_udev_node@plt>
  405b6c:	str	x0, [x29, #72]
  405b70:	ldr	x0, [x29, #72]
  405b74:	cmp	x0, #0x0
  405b78:	b.ne	405ba0 <add_sysroot_usr_mount+0x250>  // b.any
  405b7c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405b80:	add	x1, x0, #0xdbb
  405b84:	adrp	x0, 407000 <_fini+0x3ac>
  405b88:	add	x3, x0, #0xb58
  405b8c:	mov	w2, #0x2c2                 	// #706
  405b90:	mov	w0, #0x0                   	// #0
  405b94:	bl	402000 <log_oom_internal@plt>
  405b98:	mov	w19, w0
  405b9c:	b	405efc <add_sysroot_usr_mount+0x5ac>
  405ba0:	adrp	x0, 41a000 <arg_fstab_enabled>
  405ba4:	add	x0, x0, #0x60
  405ba8:	ldr	x0, [x0]
  405bac:	cmp	x0, #0x0
  405bb0:	b.ne	405be4 <add_sysroot_usr_mount+0x294>  // b.any
  405bb4:	adrp	x0, 41a000 <arg_fstab_enabled>
  405bb8:	add	x0, x0, #0x4
  405bbc:	ldr	w0, [x0]
  405bc0:	cmp	w0, #0x0
  405bc4:	b.le	405bd4 <add_sysroot_usr_mount+0x284>
  405bc8:	adrp	x0, 407000 <_fini+0x3ac>
  405bcc:	add	x0, x0, #0x700
  405bd0:	b	405bdc <add_sysroot_usr_mount+0x28c>
  405bd4:	adrp	x0, 407000 <_fini+0x3ac>
  405bd8:	add	x0, x0, #0x708
  405bdc:	str	x0, [x29, #80]
  405be0:	b	405dfc <add_sysroot_usr_mount+0x4ac>
  405be4:	adrp	x0, 41a000 <arg_fstab_enabled>
  405be8:	add	x0, x0, #0x60
  405bec:	ldr	x2, [x0]
  405bf0:	adrp	x0, 407000 <_fini+0x3ac>
  405bf4:	add	x1, x0, #0x710
  405bf8:	mov	x0, x2
  405bfc:	bl	40230c <fstab_test_option>
  405c00:	and	w0, w0, #0xff
  405c04:	eor	w0, w0, #0x1
  405c08:	and	w0, w0, #0xff
  405c0c:	cmp	w0, #0x0
  405c10:	b.eq	405dec <add_sysroot_usr_mount+0x49c>  // b.none
  405c14:	adrp	x0, 41a000 <arg_fstab_enabled>
  405c18:	add	x0, x0, #0x60
  405c1c:	ldr	x0, [x0]
  405c20:	str	x0, [x29, #128]
  405c24:	adrp	x0, 407000 <_fini+0x3ac>
  405c28:	add	x0, x0, #0x718
  405c2c:	str	x0, [x29, #136]
  405c30:	adrp	x0, 41a000 <arg_fstab_enabled>
  405c34:	add	x0, x0, #0x4
  405c38:	ldr	w0, [x0]
  405c3c:	cmp	w0, #0x0
  405c40:	b.le	405c50 <add_sysroot_usr_mount+0x300>
  405c44:	adrp	x0, 407000 <_fini+0x3ac>
  405c48:	add	x0, x0, #0x700
  405c4c:	b	405c58 <add_sysroot_usr_mount+0x308>
  405c50:	adrp	x0, 407000 <_fini+0x3ac>
  405c54:	add	x0, x0, #0x708
  405c58:	str	x0, [x29, #144]
  405c5c:	str	xzr, [x29, #96]
  405c60:	str	xzr, [x29, #104]
  405c64:	b	405c98 <add_sysroot_usr_mount+0x348>
  405c68:	ldr	x0, [x29, #104]
  405c6c:	lsl	x0, x0, #3
  405c70:	add	x1, x29, #0x80
  405c74:	ldr	x0, [x1, x0]
  405c78:	bl	401ff0 <strlen@plt>
  405c7c:	mov	x1, x0
  405c80:	ldr	x0, [x29, #96]
  405c84:	add	x0, x0, x1
  405c88:	str	x0, [x29, #96]
  405c8c:	ldr	x0, [x29, #104]
  405c90:	add	x0, x0, #0x1
  405c94:	str	x0, [x29, #104]
  405c98:	ldr	x0, [x29, #104]
  405c9c:	cmp	x0, #0x2
  405ca0:	b.hi	405cbc <add_sysroot_usr_mount+0x36c>  // b.pmore
  405ca4:	ldr	x0, [x29, #104]
  405ca8:	lsl	x0, x0, #3
  405cac:	add	x1, x29, #0x80
  405cb0:	ldr	x0, [x1, x0]
  405cb4:	cmp	x0, #0x0
  405cb8:	b.ne	405c68 <add_sysroot_usr_mount+0x318>  // b.any
  405cbc:	ldr	x0, [x29, #96]
  405cc0:	add	x0, x0, #0x1
  405cc4:	str	x0, [x29, #112]
  405cc8:	ldr	x1, [x29, #112]
  405ccc:	mov	x0, #0x1                   	// #1
  405cd0:	bl	40226c <size_multiply_overflow>
  405cd4:	and	w0, w0, #0xff
  405cd8:	and	x0, x0, #0xff
  405cdc:	cmp	x0, #0x0
  405ce0:	b.eq	405d0c <add_sysroot_usr_mount+0x3bc>  // b.none
  405ce4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405ce8:	add	x1, x0, #0xdbb
  405cec:	adrp	x0, 407000 <_fini+0x3ac>
  405cf0:	add	x4, x0, #0xb70
  405cf4:	mov	w3, #0x2c7                 	// #711
  405cf8:	mov	x2, x1
  405cfc:	adrp	x0, 407000 <_fini+0x3ac>
  405d00:	add	x1, x0, #0x320
  405d04:	mov	w0, #0x0                   	// #0
  405d08:	bl	401cd0 <log_assert_failed_realm@plt>
  405d0c:	ldr	x0, [x29, #112]
  405d10:	cmp	x0, #0x400, lsl #12
  405d14:	cset	w0, hi  // hi = pmore
  405d18:	and	w0, w0, #0xff
  405d1c:	and	x0, x0, #0xff
  405d20:	cmp	x0, #0x0
  405d24:	b.eq	405d50 <add_sysroot_usr_mount+0x400>  // b.none
  405d28:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405d2c:	add	x1, x0, #0xdbb
  405d30:	adrp	x0, 407000 <_fini+0x3ac>
  405d34:	add	x4, x0, #0xb70
  405d38:	mov	w3, #0x2c7                 	// #711
  405d3c:	mov	x2, x1
  405d40:	adrp	x0, 407000 <_fini+0x3ac>
  405d44:	add	x1, x0, #0x350
  405d48:	mov	w0, #0x0                   	// #0
  405d4c:	bl	401cd0 <log_assert_failed_realm@plt>
  405d50:	ldr	x0, [x29, #112]
  405d54:	add	x0, x0, #0xf
  405d58:	lsr	x0, x0, #4
  405d5c:	lsl	x0, x0, #4
  405d60:	sub	sp, sp, x0
  405d64:	add	x0, sp, #0x10
  405d68:	add	x0, x0, #0xf
  405d6c:	lsr	x0, x0, #4
  405d70:	lsl	x0, x0, #4
  405d74:	str	x0, [x29, #120]
  405d78:	ldr	x0, [x29, #120]
  405d7c:	str	x0, [x29, #88]
  405d80:	str	xzr, [x29, #104]
  405d84:	b	405db4 <add_sysroot_usr_mount+0x464>
  405d88:	ldr	x0, [x29, #104]
  405d8c:	lsl	x0, x0, #3
  405d90:	add	x1, x29, #0x80
  405d94:	ldr	x0, [x1, x0]
  405d98:	mov	x1, x0
  405d9c:	ldr	x0, [x29, #88]
  405da0:	bl	401bf0 <stpcpy@plt>
  405da4:	str	x0, [x29, #88]
  405da8:	ldr	x0, [x29, #104]
  405dac:	add	x0, x0, #0x1
  405db0:	str	x0, [x29, #104]
  405db4:	ldr	x0, [x29, #104]
  405db8:	cmp	x0, #0x2
  405dbc:	b.hi	405dd8 <add_sysroot_usr_mount+0x488>  // b.pmore
  405dc0:	ldr	x0, [x29, #104]
  405dc4:	lsl	x0, x0, #3
  405dc8:	add	x1, x29, #0x80
  405dcc:	ldr	x0, [x1, x0]
  405dd0:	cmp	x0, #0x0
  405dd4:	b.ne	405d88 <add_sysroot_usr_mount+0x438>  // b.any
  405dd8:	ldr	x0, [x29, #88]
  405ddc:	strb	wzr, [x0]
  405de0:	ldr	x0, [x29, #120]
  405de4:	str	x0, [x29, #80]
  405de8:	b	405dfc <add_sysroot_usr_mount+0x4ac>
  405dec:	adrp	x0, 41a000 <arg_fstab_enabled>
  405df0:	add	x0, x0, #0x60
  405df4:	ldr	x0, [x0]
  405df8:	str	x0, [x29, #80]
  405dfc:	mov	w0, #0x7                   	// #7
  405e00:	str	w0, [x29, #60]
  405e04:	str	wzr, [x29, #64]
  405e08:	str	wzr, [x29, #68]
  405e0c:	ldr	w0, [x29, #68]
  405e10:	bl	402020 <log_get_max_level_realm@plt>
  405e14:	mov	w1, w0
  405e18:	ldr	w0, [x29, #60]
  405e1c:	and	w0, w0, #0x7
  405e20:	cmp	w1, w0
  405e24:	b.lt	405e84 <add_sysroot_usr_mount+0x534>  // b.tstop
  405e28:	ldr	w0, [x29, #68]
  405e2c:	lsl	w1, w0, #10
  405e30:	ldr	w0, [x29, #60]
  405e34:	orr	w19, w1, w0
  405e38:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405e3c:	add	x20, x0, #0xdbb
  405e40:	ldr	x21, [x29, #72]
  405e44:	adrp	x0, 41a000 <arg_fstab_enabled>
  405e48:	add	x0, x0, #0x58
  405e4c:	ldr	x0, [x0]
  405e50:	bl	40249c <strna>
  405e54:	mov	x7, x0
  405e58:	mov	x6, x21
  405e5c:	adrp	x0, 407000 <_fini+0x3ac>
  405e60:	add	x5, x0, #0x778
  405e64:	adrp	x0, 407000 <_fini+0x3ac>
  405e68:	add	x4, x0, #0xb58
  405e6c:	mov	w3, #0x2cb                 	// #715
  405e70:	mov	x2, x20
  405e74:	ldr	w1, [x29, #64]
  405e78:	mov	w0, w19
  405e7c:	bl	401ee0 <log_internal_realm@plt>
  405e80:	b	405e8c <add_sysroot_usr_mount+0x53c>
  405e84:	ldr	w0, [x29, #64]
  405e88:	cmp	w0, #0x0
  405e8c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405e90:	add	x0, x0, #0x20
  405e94:	ldr	x19, [x0]
  405e98:	ldr	x20, [x29, #72]
  405e9c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405ea0:	add	x0, x0, #0x58
  405ea4:	ldr	x21, [x0]
  405ea8:	ldr	x0, [x29, #72]
  405eac:	bl	401ea0 <is_device_path@plt>
  405eb0:	and	w0, w0, #0xff
  405eb4:	mov	w1, w0
  405eb8:	adrp	x0, 407000 <_fini+0x3ac>
  405ebc:	add	x0, x0, #0x750
  405ec0:	str	x0, [sp, #8]
  405ec4:	adrp	x0, 407000 <_fini+0x3ac>
  405ec8:	add	x0, x0, #0x5e0
  405ecc:	str	x0, [sp]
  405ed0:	mov	w7, #0x0                   	// #0
  405ed4:	mov	w6, w1
  405ed8:	ldr	x5, [x29, #80]
  405edc:	mov	x4, x21
  405ee0:	mov	x3, #0x0                   	// #0
  405ee4:	adrp	x0, 407000 <_fini+0x3ac>
  405ee8:	add	x2, x0, #0x7a8
  405eec:	mov	x1, x20
  405ef0:	mov	x0, x19
  405ef4:	bl	403a88 <add_mount>
  405ef8:	mov	w19, w0
  405efc:	add	x0, x29, #0x48
  405f00:	bl	402248 <freep>
  405f04:	mov	w1, w19
  405f08:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  405f0c:	add	x0, x0, #0x700
  405f10:	ldr	x2, [x29, #152]
  405f14:	ldr	x0, [x0]
  405f18:	eor	x0, x2, x0
  405f1c:	cmp	x0, #0x0
  405f20:	b.eq	405f28 <add_sysroot_usr_mount+0x5d8>  // b.none
  405f24:	bl	401e60 <__stack_chk_fail@plt>
  405f28:	mov	w0, w1
  405f2c:	mov	sp, x29
  405f30:	ldp	x19, x20, [sp, #16]
  405f34:	ldr	x21, [sp, #32]
  405f38:	ldp	x29, x30, [sp], #160
  405f3c:	ret

0000000000405f40 <add_volatile_root>:
  405f40:	stp	x29, x30, [sp, #-32]!
  405f44:	mov	x29, sp
  405f48:	strb	wzr, [sp, #31]
  405f4c:	adrp	x0, 41a000 <arg_fstab_enabled>
  405f50:	add	x0, x0, #0x8
  405f54:	ldr	w0, [x0]
  405f58:	cmp	w0, #0x1
  405f5c:	b.eq	405f68 <add_volatile_root+0x28>  // b.none
  405f60:	cmp	w0, #0x3
  405f64:	b.ne	405f70 <add_volatile_root+0x30>  // b.any
  405f68:	mov	w0, #0x1                   	// #1
  405f6c:	strb	w0, [sp, #31]
  405f70:	nop
  405f74:	ldrb	w0, [sp, #31]
  405f78:	eor	w0, w0, #0x1
  405f7c:	and	w0, w0, #0xff
  405f80:	cmp	w0, #0x0
  405f84:	b.eq	405f90 <add_volatile_root+0x50>  // b.none
  405f88:	mov	w0, #0x0                   	// #0
  405f8c:	b	405fbc <add_volatile_root+0x7c>
  405f90:	adrp	x0, 41a000 <arg_fstab_enabled>
  405f94:	add	x0, x0, #0x20
  405f98:	ldr	x4, [x0]
  405f9c:	adrp	x0, 407000 <_fini+0x3ac>
  405fa0:	add	x3, x0, #0x7b8
  405fa4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  405fa8:	add	x2, x0, #0xf90
  405fac:	adrp	x0, 407000 <_fini+0x3ac>
  405fb0:	add	x1, x0, #0x760
  405fb4:	mov	x0, x4
  405fb8:	bl	401e50 <generator_add_symlink@plt>
  405fbc:	ldp	x29, x30, [sp], #32
  405fc0:	ret

0000000000405fc4 <add_volatile_var>:
  405fc4:	sub	sp, sp, #0x20
  405fc8:	stp	x29, x30, [sp, #16]
  405fcc:	add	x29, sp, #0x10
  405fd0:	adrp	x0, 41a000 <arg_fstab_enabled>
  405fd4:	add	x0, x0, #0x8
  405fd8:	ldr	w0, [x0]
  405fdc:	cmp	w0, #0x2
  405fe0:	b.eq	405fec <add_volatile_var+0x28>  // b.none
  405fe4:	mov	w0, #0x0                   	// #0
  405fe8:	b	406044 <add_volatile_var+0x80>
  405fec:	adrp	x0, 41a000 <arg_fstab_enabled>
  405ff0:	add	x0, x0, #0x28
  405ff4:	ldr	x8, [x0]
  405ff8:	adrp	x0, 407000 <_fini+0x3ac>
  405ffc:	add	x0, x0, #0x750
  406000:	str	x0, [sp, #8]
  406004:	adrp	x0, 407000 <_fini+0x3ac>
  406008:	add	x0, x0, #0x610
  40600c:	str	x0, [sp]
  406010:	mov	w7, #0x0                   	// #0
  406014:	mov	w6, #0x0                   	// #0
  406018:	adrp	x0, 407000 <_fini+0x3ac>
  40601c:	add	x5, x0, #0x7f0
  406020:	adrp	x0, 407000 <_fini+0x3ac>
  406024:	add	x4, x0, #0x800
  406028:	mov	x3, #0x0                   	// #0
  40602c:	adrp	x0, 407000 <_fini+0x3ac>
  406030:	add	x2, x0, #0x808
  406034:	adrp	x0, 407000 <_fini+0x3ac>
  406038:	add	x1, x0, #0x800
  40603c:	mov	x0, x8
  406040:	bl	403a88 <add_mount>
  406044:	ldp	x29, x30, [sp, #16]
  406048:	add	sp, sp, #0x20
  40604c:	ret

0000000000406050 <parse_proc_cmdline_item>:
  406050:	stp	x29, x30, [sp, #-112]!
  406054:	mov	x29, sp
  406058:	str	x0, [sp, #40]
  40605c:	str	x1, [sp, #32]
  406060:	str	x2, [sp, #24]
  406064:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  406068:	add	x0, x0, #0x700
  40606c:	ldr	x1, [x0]
  406070:	str	x1, [sp, #104]
  406074:	mov	x1, #0x0                   	// #0
  406078:	adrp	x0, 407000 <_fini+0x3ac>
  40607c:	add	x0, x0, #0x8f0
  406080:	add	x2, sp, #0x50
  406084:	mov	x3, x0
  406088:	ldp	x0, x1, [x3]
  40608c:	stp	x0, x1, [x2]
  406090:	ldr	x0, [x3, #16]
  406094:	str	x0, [x2, #16]
  406098:	add	x0, sp, #0x50
  40609c:	ldr	x1, [sp, #40]
  4060a0:	bl	401ed0 <strv_find@plt>
  4060a4:	cmp	x0, #0x0
  4060a8:	b.eq	406174 <parse_proc_cmdline_item+0x124>  // b.none
  4060ac:	ldr	x0, [sp, #32]
  4060b0:	cmp	x0, #0x0
  4060b4:	b.eq	4060c4 <parse_proc_cmdline_item+0x74>  // b.none
  4060b8:	ldr	x0, [sp, #32]
  4060bc:	bl	401c30 <parse_boolean@plt>
  4060c0:	b	4060c8 <parse_proc_cmdline_item+0x78>
  4060c4:	mov	w0, #0x1                   	// #1
  4060c8:	str	w0, [sp, #64]
  4060cc:	ldr	w0, [sp, #64]
  4060d0:	cmp	w0, #0x0
  4060d4:	b.ge	406154 <parse_proc_cmdline_item+0x104>  // b.tcont
  4060d8:	mov	w0, #0x4                   	// #4
  4060dc:	str	w0, [sp, #68]
  4060e0:	str	wzr, [sp, #72]
  4060e4:	str	wzr, [sp, #76]
  4060e8:	ldr	w0, [sp, #76]
  4060ec:	bl	402020 <log_get_max_level_realm@plt>
  4060f0:	mov	w1, w0
  4060f4:	ldr	w0, [sp, #68]
  4060f8:	and	w0, w0, #0x7
  4060fc:	cmp	w1, w0
  406100:	b.lt	406148 <parse_proc_cmdline_item+0xf8>  // b.tstop
  406104:	ldr	w0, [sp, #76]
  406108:	lsl	w1, w0, #10
  40610c:	ldr	w0, [sp, #68]
  406110:	orr	w7, w1, w0
  406114:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406118:	add	x1, x0, #0xdbb
  40611c:	ldr	x6, [sp, #32]
  406120:	adrp	x0, 407000 <_fini+0x3ac>
  406124:	add	x5, x0, #0x810
  406128:	adrp	x0, 407000 <_fini+0x3ac>
  40612c:	add	x4, x0, #0xb88
  406130:	mov	w3, #0x302                 	// #770
  406134:	mov	x2, x1
  406138:	ldr	w1, [sp, #72]
  40613c:	mov	w0, w7
  406140:	bl	401ee0 <log_internal_realm@plt>
  406144:	b	4065e4 <parse_proc_cmdline_item+0x594>
  406148:	ldr	w0, [sp, #72]
  40614c:	cmp	w0, #0x0
  406150:	b	4065e4 <parse_proc_cmdline_item+0x594>
  406154:	ldr	w0, [sp, #64]
  406158:	cmp	w0, #0x0
  40615c:	cset	w0, ne  // ne = any
  406160:	and	w1, w0, #0xff
  406164:	adrp	x0, 41a000 <arg_fstab_enabled>
  406168:	add	x0, x0, #0x0
  40616c:	strb	w1, [x0]
  406170:	b	4065e4 <parse_proc_cmdline_item+0x594>
  406174:	adrp	x0, 407000 <_fini+0x3ac>
  406178:	add	x1, x0, #0x840
  40617c:	ldr	x0, [sp, #40]
  406180:	bl	401f40 <strcmp@plt>
  406184:	cmp	w0, #0x0
  406188:	b.ne	4061e4 <parse_proc_cmdline_item+0x194>  // b.any
  40618c:	ldr	x1, [sp, #32]
  406190:	ldr	x0, [sp, #40]
  406194:	bl	402648 <proc_cmdline_value_missing>
  406198:	and	w0, w0, #0xff
  40619c:	cmp	w0, #0x0
  4061a0:	b.eq	4061ac <parse_proc_cmdline_item+0x15c>  // b.none
  4061a4:	mov	w0, #0x0                   	// #0
  4061a8:	b	4065e8 <parse_proc_cmdline_item+0x598>
  4061ac:	ldr	x1, [sp, #32]
  4061b0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4061b4:	add	x0, x0, #0x30
  4061b8:	bl	401c70 <free_and_strdup@plt>
  4061bc:	cmp	w0, #0x0
  4061c0:	b.ge	4065e4 <parse_proc_cmdline_item+0x594>  // b.tcont
  4061c4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4061c8:	add	x1, x0, #0xdbb
  4061cc:	adrp	x0, 407000 <_fini+0x3ac>
  4061d0:	add	x3, x0, #0xb88
  4061d4:	mov	w2, #0x30c                 	// #780
  4061d8:	mov	w0, #0x0                   	// #0
  4061dc:	bl	402000 <log_oom_internal@plt>
  4061e0:	b	4065e8 <parse_proc_cmdline_item+0x598>
  4061e4:	adrp	x0, 407000 <_fini+0x3ac>
  4061e8:	add	x1, x0, #0x848
  4061ec:	ldr	x0, [sp, #40]
  4061f0:	bl	401f40 <strcmp@plt>
  4061f4:	cmp	w0, #0x0
  4061f8:	b.ne	406254 <parse_proc_cmdline_item+0x204>  // b.any
  4061fc:	ldr	x1, [sp, #32]
  406200:	ldr	x0, [sp, #40]
  406204:	bl	402648 <proc_cmdline_value_missing>
  406208:	and	w0, w0, #0xff
  40620c:	cmp	w0, #0x0
  406210:	b.eq	40621c <parse_proc_cmdline_item+0x1cc>  // b.none
  406214:	mov	w0, #0x0                   	// #0
  406218:	b	4065e8 <parse_proc_cmdline_item+0x598>
  40621c:	ldr	x1, [sp, #32]
  406220:	adrp	x0, 41a000 <arg_fstab_enabled>
  406224:	add	x0, x0, #0x38
  406228:	bl	401c70 <free_and_strdup@plt>
  40622c:	cmp	w0, #0x0
  406230:	b.ge	4065e4 <parse_proc_cmdline_item+0x594>  // b.tcont
  406234:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406238:	add	x1, x0, #0xdbb
  40623c:	adrp	x0, 407000 <_fini+0x3ac>
  406240:	add	x3, x0, #0xb88
  406244:	mov	w2, #0x314                 	// #788
  406248:	mov	w0, #0x0                   	// #0
  40624c:	bl	402000 <log_oom_internal@plt>
  406250:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406254:	adrp	x0, 407000 <_fini+0x3ac>
  406258:	add	x1, x0, #0x858
  40625c:	ldr	x0, [sp, #40]
  406260:	bl	401f40 <strcmp@plt>
  406264:	cmp	w0, #0x0
  406268:	b.ne	4062d0 <parse_proc_cmdline_item+0x280>  // b.any
  40626c:	ldr	x1, [sp, #32]
  406270:	ldr	x0, [sp, #40]
  406274:	bl	402648 <proc_cmdline_value_missing>
  406278:	and	w0, w0, #0xff
  40627c:	cmp	w0, #0x0
  406280:	b.eq	40628c <parse_proc_cmdline_item+0x23c>  // b.none
  406284:	mov	w0, #0x0                   	// #0
  406288:	b	4065e8 <parse_proc_cmdline_item+0x598>
  40628c:	mov	x3, #0x0                   	// #0
  406290:	ldr	x2, [sp, #32]
  406294:	adrp	x0, 407000 <_fini+0x3ac>
  406298:	add	x1, x0, #0x718
  40629c:	adrp	x0, 41a000 <arg_fstab_enabled>
  4062a0:	add	x0, x0, #0x40
  4062a4:	bl	401e40 <strextend_with_separator@plt>
  4062a8:	cmp	x0, #0x0
  4062ac:	b.ne	4065e4 <parse_proc_cmdline_item+0x594>  // b.any
  4062b0:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4062b4:	add	x1, x0, #0xdbb
  4062b8:	adrp	x0, 407000 <_fini+0x3ac>
  4062bc:	add	x3, x0, #0xb88
  4062c0:	mov	w2, #0x31c                 	// #796
  4062c4:	mov	w0, #0x0                   	// #0
  4062c8:	bl	402000 <log_oom_internal@plt>
  4062cc:	b	4065e8 <parse_proc_cmdline_item+0x598>
  4062d0:	adrp	x0, 407000 <_fini+0x3ac>
  4062d4:	add	x1, x0, #0x868
  4062d8:	ldr	x0, [sp, #40]
  4062dc:	bl	401f40 <strcmp@plt>
  4062e0:	cmp	w0, #0x0
  4062e4:	b.ne	406340 <parse_proc_cmdline_item+0x2f0>  // b.any
  4062e8:	ldr	x1, [sp, #32]
  4062ec:	ldr	x0, [sp, #40]
  4062f0:	bl	402648 <proc_cmdline_value_missing>
  4062f4:	and	w0, w0, #0xff
  4062f8:	cmp	w0, #0x0
  4062fc:	b.eq	406308 <parse_proc_cmdline_item+0x2b8>  // b.none
  406300:	mov	w0, #0x0                   	// #0
  406304:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406308:	ldr	x1, [sp, #32]
  40630c:	adrp	x0, 41a000 <arg_fstab_enabled>
  406310:	add	x0, x0, #0x48
  406314:	bl	401c70 <free_and_strdup@plt>
  406318:	cmp	w0, #0x0
  40631c:	b.ge	4065e4 <parse_proc_cmdline_item+0x594>  // b.tcont
  406320:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406324:	add	x1, x0, #0xdbb
  406328:	adrp	x0, 407000 <_fini+0x3ac>
  40632c:	add	x3, x0, #0xb88
  406330:	mov	w2, #0x324                 	// #804
  406334:	mov	w0, #0x0                   	// #0
  406338:	bl	402000 <log_oom_internal@plt>
  40633c:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406340:	adrp	x0, 407000 <_fini+0x3ac>
  406344:	add	x1, x0, #0x878
  406348:	ldr	x0, [sp, #40]
  40634c:	bl	401f40 <strcmp@plt>
  406350:	cmp	w0, #0x0
  406354:	b.ne	4063b0 <parse_proc_cmdline_item+0x360>  // b.any
  406358:	ldr	x1, [sp, #32]
  40635c:	ldr	x0, [sp, #40]
  406360:	bl	402648 <proc_cmdline_value_missing>
  406364:	and	w0, w0, #0xff
  406368:	cmp	w0, #0x0
  40636c:	b.eq	406378 <parse_proc_cmdline_item+0x328>  // b.none
  406370:	mov	w0, #0x0                   	// #0
  406374:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406378:	ldr	x1, [sp, #32]
  40637c:	adrp	x0, 41a000 <arg_fstab_enabled>
  406380:	add	x0, x0, #0x50
  406384:	bl	401c70 <free_and_strdup@plt>
  406388:	cmp	w0, #0x0
  40638c:	b.ge	4065e4 <parse_proc_cmdline_item+0x594>  // b.tcont
  406390:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406394:	add	x1, x0, #0xdbb
  406398:	adrp	x0, 407000 <_fini+0x3ac>
  40639c:	add	x3, x0, #0xb88
  4063a0:	mov	w2, #0x32c                 	// #812
  4063a4:	mov	w0, #0x0                   	// #0
  4063a8:	bl	402000 <log_oom_internal@plt>
  4063ac:	b	4065e8 <parse_proc_cmdline_item+0x598>
  4063b0:	adrp	x0, 407000 <_fini+0x3ac>
  4063b4:	add	x1, x0, #0x888
  4063b8:	ldr	x0, [sp, #40]
  4063bc:	bl	401f40 <strcmp@plt>
  4063c0:	cmp	w0, #0x0
  4063c4:	b.ne	406420 <parse_proc_cmdline_item+0x3d0>  // b.any
  4063c8:	ldr	x1, [sp, #32]
  4063cc:	ldr	x0, [sp, #40]
  4063d0:	bl	402648 <proc_cmdline_value_missing>
  4063d4:	and	w0, w0, #0xff
  4063d8:	cmp	w0, #0x0
  4063dc:	b.eq	4063e8 <parse_proc_cmdline_item+0x398>  // b.none
  4063e0:	mov	w0, #0x0                   	// #0
  4063e4:	b	4065e8 <parse_proc_cmdline_item+0x598>
  4063e8:	ldr	x1, [sp, #32]
  4063ec:	adrp	x0, 41a000 <arg_fstab_enabled>
  4063f0:	add	x0, x0, #0x58
  4063f4:	bl	401c70 <free_and_strdup@plt>
  4063f8:	cmp	w0, #0x0
  4063fc:	b.ge	4065e4 <parse_proc_cmdline_item+0x594>  // b.tcont
  406400:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406404:	add	x1, x0, #0xdbb
  406408:	adrp	x0, 407000 <_fini+0x3ac>
  40640c:	add	x3, x0, #0xb88
  406410:	mov	w2, #0x334                 	// #820
  406414:	mov	w0, #0x0                   	// #0
  406418:	bl	402000 <log_oom_internal@plt>
  40641c:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406420:	adrp	x0, 407000 <_fini+0x3ac>
  406424:	add	x1, x0, #0x898
  406428:	ldr	x0, [sp, #40]
  40642c:	bl	401f40 <strcmp@plt>
  406430:	cmp	w0, #0x0
  406434:	b.ne	40649c <parse_proc_cmdline_item+0x44c>  // b.any
  406438:	ldr	x1, [sp, #32]
  40643c:	ldr	x0, [sp, #40]
  406440:	bl	402648 <proc_cmdline_value_missing>
  406444:	and	w0, w0, #0xff
  406448:	cmp	w0, #0x0
  40644c:	b.eq	406458 <parse_proc_cmdline_item+0x408>  // b.none
  406450:	mov	w0, #0x0                   	// #0
  406454:	b	4065e8 <parse_proc_cmdline_item+0x598>
  406458:	mov	x3, #0x0                   	// #0
  40645c:	ldr	x2, [sp, #32]
  406460:	adrp	x0, 407000 <_fini+0x3ac>
  406464:	add	x1, x0, #0x718
  406468:	adrp	x0, 41a000 <arg_fstab_enabled>
  40646c:	add	x0, x0, #0x60
  406470:	bl	401e40 <strextend_with_separator@plt>
  406474:	cmp	x0, #0x0
  406478:	b.ne	4065e4 <parse_proc_cmdline_item+0x594>  // b.any
  40647c:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406480:	add	x1, x0, #0xdbb
  406484:	adrp	x0, 407000 <_fini+0x3ac>
  406488:	add	x3, x0, #0xb88
  40648c:	mov	w2, #0x33c                 	// #828
  406490:	mov	w0, #0x0                   	// #0
  406494:	bl	402000 <log_oom_internal@plt>
  406498:	b	4065e8 <parse_proc_cmdline_item+0x598>
  40649c:	adrp	x0, 407000 <_fini+0x3ac>
  4064a0:	add	x1, x0, #0x700
  4064a4:	ldr	x0, [sp, #40]
  4064a8:	bl	401f40 <strcmp@plt>
  4064ac:	cmp	w0, #0x0
  4064b0:	b.ne	4064d4 <parse_proc_cmdline_item+0x484>  // b.any
  4064b4:	ldr	x0, [sp, #32]
  4064b8:	cmp	x0, #0x0
  4064bc:	b.ne	4064d4 <parse_proc_cmdline_item+0x484>  // b.any
  4064c0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4064c4:	add	x0, x0, #0x4
  4064c8:	mov	w1, #0x1                   	// #1
  4064cc:	str	w1, [x0]
  4064d0:	b	4065e4 <parse_proc_cmdline_item+0x594>
  4064d4:	adrp	x0, 407000 <_fini+0x3ac>
  4064d8:	add	x1, x0, #0x708
  4064dc:	ldr	x0, [sp, #40]
  4064e0:	bl	401f40 <strcmp@plt>
  4064e4:	cmp	w0, #0x0
  4064e8:	b.ne	406508 <parse_proc_cmdline_item+0x4b8>  // b.any
  4064ec:	ldr	x0, [sp, #32]
  4064f0:	cmp	x0, #0x0
  4064f4:	b.ne	406508 <parse_proc_cmdline_item+0x4b8>  // b.any
  4064f8:	adrp	x0, 41a000 <arg_fstab_enabled>
  4064fc:	add	x0, x0, #0x4
  406500:	str	wzr, [x0]
  406504:	b	4065e4 <parse_proc_cmdline_item+0x594>
  406508:	adrp	x0, 407000 <_fini+0x3ac>
  40650c:	add	x1, x0, #0x8a8
  406510:	ldr	x0, [sp, #40]
  406514:	bl	401f40 <strcmp@plt>
  406518:	cmp	w0, #0x0
  40651c:	b.ne	4065e4 <parse_proc_cmdline_item+0x594>  // b.any
  406520:	ldr	x0, [sp, #32]
  406524:	cmp	x0, #0x0
  406528:	b.eq	4065d4 <parse_proc_cmdline_item+0x584>  // b.none
  40652c:	ldr	x0, [sp, #32]
  406530:	bl	401cc0 <volatile_mode_from_string@plt>
  406534:	str	w0, [sp, #48]
  406538:	ldr	w0, [sp, #48]
  40653c:	cmp	w0, #0x0
  406540:	b.ge	4065c0 <parse_proc_cmdline_item+0x570>  // b.tcont
  406544:	mov	w0, #0x4                   	// #4
  406548:	str	w0, [sp, #52]
  40654c:	str	wzr, [sp, #56]
  406550:	str	wzr, [sp, #60]
  406554:	ldr	w0, [sp, #60]
  406558:	bl	402020 <log_get_max_level_realm@plt>
  40655c:	mov	w1, w0
  406560:	ldr	w0, [sp, #52]
  406564:	and	w0, w0, #0x7
  406568:	cmp	w1, w0
  40656c:	b.lt	4065b4 <parse_proc_cmdline_item+0x564>  // b.tstop
  406570:	ldr	w0, [sp, #60]
  406574:	lsl	w1, w0, #10
  406578:	ldr	w0, [sp, #52]
  40657c:	orr	w7, w1, w0
  406580:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406584:	add	x1, x0, #0xdbb
  406588:	ldr	x6, [sp, #32]
  40658c:	adrp	x0, 407000 <_fini+0x3ac>
  406590:	add	x5, x0, #0x8c0
  406594:	adrp	x0, 407000 <_fini+0x3ac>
  406598:	add	x4, x0, #0xb88
  40659c:	mov	w3, #0x348                 	// #840
  4065a0:	mov	x2, x1
  4065a4:	ldr	w1, [sp, #56]
  4065a8:	mov	w0, w7
  4065ac:	bl	401ee0 <log_internal_realm@plt>
  4065b0:	b	4065e4 <parse_proc_cmdline_item+0x594>
  4065b4:	ldr	w0, [sp, #56]
  4065b8:	cmp	w0, #0x0
  4065bc:	b	4065e4 <parse_proc_cmdline_item+0x594>
  4065c0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4065c4:	add	x0, x0, #0x8
  4065c8:	ldr	w1, [sp, #48]
  4065cc:	str	w1, [x0]
  4065d0:	b	4065e4 <parse_proc_cmdline_item+0x594>
  4065d4:	adrp	x0, 41a000 <arg_fstab_enabled>
  4065d8:	add	x0, x0, #0x8
  4065dc:	mov	w1, #0x1                   	// #1
  4065e0:	str	w1, [x0]
  4065e4:	mov	w0, #0x0                   	// #0
  4065e8:	mov	w1, w0
  4065ec:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  4065f0:	add	x0, x0, #0x700
  4065f4:	ldr	x2, [sp, #104]
  4065f8:	ldr	x0, [x0]
  4065fc:	eor	x0, x2, x0
  406600:	cmp	x0, #0x0
  406604:	b.eq	40660c <parse_proc_cmdline_item+0x5bc>  // b.none
  406608:	bl	401e60 <__stack_chk_fail@plt>
  40660c:	mov	w0, w1
  406610:	ldp	x29, x30, [sp], #112
  406614:	ret

0000000000406618 <determine_root>:
  406618:	stp	x29, x30, [sp, #-32]!
  40661c:	mov	x29, sp
  406620:	adrp	x0, 41a000 <arg_fstab_enabled>
  406624:	add	x0, x0, #0x30
  406628:	ldr	x0, [x0]
  40662c:	cmp	x0, #0x0
  406630:	b.eq	40663c <determine_root+0x24>  // b.none
  406634:	mov	w0, #0x0                   	// #0
  406638:	b	406730 <determine_root+0x118>
  40663c:	adrp	x0, 41a000 <arg_fstab_enabled>
  406640:	add	x0, x0, #0x48
  406644:	ldr	x0, [x0]
  406648:	cmp	x0, #0x0
  40664c:	b.ne	406658 <determine_root+0x40>  // b.any
  406650:	mov	w0, #0x0                   	// #0
  406654:	b	406730 <determine_root+0x118>
  406658:	adrp	x0, 407000 <_fini+0x3ac>
  40665c:	add	x0, x0, #0x908
  406660:	bl	401f50 <strdup@plt>
  406664:	mov	x1, x0
  406668:	adrp	x0, 41a000 <arg_fstab_enabled>
  40666c:	add	x0, x0, #0x30
  406670:	str	x1, [x0]
  406674:	adrp	x0, 41a000 <arg_fstab_enabled>
  406678:	add	x0, x0, #0x30
  40667c:	ldr	x0, [x0]
  406680:	cmp	x0, #0x0
  406684:	b.ne	4066a8 <determine_root+0x90>  // b.any
  406688:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40668c:	add	x1, x0, #0xdbb
  406690:	adrp	x0, 407000 <_fini+0x3ac>
  406694:	add	x3, x0, #0xbc0
  406698:	mov	w2, #0x35d                 	// #861
  40669c:	mov	w0, #0x0                   	// #0
  4066a0:	bl	402000 <log_oom_internal@plt>
  4066a4:	b	406730 <determine_root+0x118>
  4066a8:	mov	w0, #0x6                   	// #6
  4066ac:	str	w0, [sp, #20]
  4066b0:	str	wzr, [sp, #24]
  4066b4:	str	wzr, [sp, #28]
  4066b8:	ldr	w0, [sp, #28]
  4066bc:	bl	402020 <log_get_max_level_realm@plt>
  4066c0:	mov	w1, w0
  4066c4:	ldr	w0, [sp, #20]
  4066c8:	and	w0, w0, #0x7
  4066cc:	cmp	w1, w0
  4066d0:	b.lt	406724 <determine_root+0x10c>  // b.tstop
  4066d4:	ldr	w0, [sp, #28]
  4066d8:	lsl	w1, w0, #10
  4066dc:	ldr	w0, [sp, #20]
  4066e0:	orr	w7, w1, w0
  4066e4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4066e8:	add	x1, x0, #0xdbb
  4066ec:	adrp	x0, 41a000 <arg_fstab_enabled>
  4066f0:	add	x0, x0, #0x30
  4066f4:	ldr	x0, [x0]
  4066f8:	mov	x6, x0
  4066fc:	adrp	x0, 407000 <_fini+0x3ac>
  406700:	add	x5, x0, #0x920
  406704:	adrp	x0, 407000 <_fini+0x3ac>
  406708:	add	x4, x0, #0xbc0
  40670c:	mov	w3, #0x35f                 	// #863
  406710:	mov	x2, x1
  406714:	ldr	w1, [sp, #24]
  406718:	mov	w0, w7
  40671c:	bl	401ee0 <log_internal_realm@plt>
  406720:	b	40672c <determine_root+0x114>
  406724:	ldr	w0, [sp, #24]
  406728:	cmp	w0, #0x0
  40672c:	mov	w0, #0x1                   	// #1
  406730:	ldp	x29, x30, [sp], #32
  406734:	ret

0000000000406738 <run>:
  406738:	stp	x29, x30, [sp, #-80]!
  40673c:	mov	x29, sp
  406740:	str	x0, [sp, #40]
  406744:	str	x1, [sp, #32]
  406748:	str	x2, [sp, #24]
  40674c:	str	wzr, [sp, #60]
  406750:	str	wzr, [sp, #64]
  406754:	adrp	x0, 41a000 <arg_fstab_enabled>
  406758:	add	x0, x0, #0x20
  40675c:	ldr	x1, [sp, #40]
  406760:	str	x1, [x0]
  406764:	adrp	x0, 41a000 <arg_fstab_enabled>
  406768:	add	x0, x0, #0x20
  40676c:	ldr	x0, [x0]
  406770:	cmp	x0, #0x0
  406774:	cset	w0, eq  // eq = none
  406778:	and	w0, w0, #0xff
  40677c:	and	x0, x0, #0xff
  406780:	cmp	x0, #0x0
  406784:	b.eq	4067b0 <run+0x78>  // b.none
  406788:	adrp	x0, 406000 <add_volatile_var+0x3c>
  40678c:	add	x1, x0, #0xdbb
  406790:	adrp	x0, 407000 <_fini+0x3ac>
  406794:	add	x4, x0, #0xbd0
  406798:	mov	w3, #0x367                 	// #871
  40679c:	mov	x2, x1
  4067a0:	adrp	x0, 407000 <_fini+0x3ac>
  4067a4:	add	x1, x0, #0x940
  4067a8:	mov	w0, #0x0                   	// #0
  4067ac:	bl	401cd0 <log_assert_failed_realm@plt>
  4067b0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4067b4:	add	x0, x0, #0x28
  4067b8:	ldr	x1, [sp, #24]
  4067bc:	str	x1, [x0]
  4067c0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4067c4:	add	x0, x0, #0x28
  4067c8:	ldr	x0, [x0]
  4067cc:	cmp	x0, #0x0
  4067d0:	cset	w0, eq  // eq = none
  4067d4:	and	w0, w0, #0xff
  4067d8:	and	x0, x0, #0xff
  4067dc:	cmp	x0, #0x0
  4067e0:	b.eq	40680c <run+0xd4>  // b.none
  4067e4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4067e8:	add	x1, x0, #0xdbb
  4067ec:	adrp	x0, 407000 <_fini+0x3ac>
  4067f0:	add	x4, x0, #0xbd0
  4067f4:	mov	w3, #0x368                 	// #872
  4067f8:	mov	x2, x1
  4067fc:	adrp	x0, 407000 <_fini+0x3ac>
  406800:	add	x1, x0, #0x950
  406804:	mov	w0, #0x0                   	// #0
  406808:	bl	401cd0 <log_assert_failed_realm@plt>
  40680c:	mov	w2, #0x0                   	// #0
  406810:	mov	x1, #0x0                   	// #0
  406814:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406818:	add	x0, x0, #0x50
  40681c:	bl	401f60 <proc_cmdline_parse@plt>
  406820:	str	w0, [sp, #56]
  406824:	ldr	w0, [sp, #56]
  406828:	cmp	w0, #0x0
  40682c:	b.ge	4068a8 <run+0x170>  // b.tcont
  406830:	mov	w0, #0x4                   	// #4
  406834:	str	w0, [sp, #68]
  406838:	ldr	w0, [sp, #56]
  40683c:	str	w0, [sp, #72]
  406840:	str	wzr, [sp, #76]
  406844:	ldr	w0, [sp, #76]
  406848:	bl	402020 <log_get_max_level_realm@plt>
  40684c:	mov	w1, w0
  406850:	ldr	w0, [sp, #68]
  406854:	and	w0, w0, #0x7
  406858:	cmp	w1, w0
  40685c:	b.lt	4068a0 <run+0x168>  // b.tstop
  406860:	ldr	w0, [sp, #76]
  406864:	lsl	w1, w0, #10
  406868:	ldr	w0, [sp, #68]
  40686c:	orr	w6, w1, w0
  406870:	adrp	x0, 406000 <add_volatile_var+0x3c>
  406874:	add	x1, x0, #0xdbb
  406878:	adrp	x0, 407000 <_fini+0x3ac>
  40687c:	add	x5, x0, #0x970
  406880:	adrp	x0, 407000 <_fini+0x3ac>
  406884:	add	x4, x0, #0xbd8
  406888:	mov	w3, #0x36c                 	// #876
  40688c:	mov	x2, x1
  406890:	ldr	w1, [sp, #72]
  406894:	mov	w0, w6
  406898:	bl	401ee0 <log_internal_realm@plt>
  40689c:	b	4068a8 <run+0x170>
  4068a0:	ldr	w0, [sp, #72]
  4068a4:	cmp	w0, #0x0
  4068a8:	bl	406618 <determine_root>
  4068ac:	bl	401d00 <in_initrd@plt>
  4068b0:	and	w0, w0, #0xff
  4068b4:	cmp	w0, #0x0
  4068b8:	b.eq	4068d8 <run+0x1a0>  // b.none
  4068bc:	bl	405310 <add_sysroot_mount>
  4068c0:	str	w0, [sp, #56]
  4068c4:	bl	405950 <add_sysroot_usr_mount>
  4068c8:	str	w0, [sp, #60]
  4068cc:	bl	405f40 <add_volatile_root>
  4068d0:	str	w0, [sp, #64]
  4068d4:	b	4068e0 <run+0x1a8>
  4068d8:	bl	405fc4 <add_volatile_var>
  4068dc:	str	w0, [sp, #56]
  4068e0:	adrp	x0, 41a000 <arg_fstab_enabled>
  4068e4:	add	x0, x0, #0x0
  4068e8:	ldrb	w0, [x0]
  4068ec:	cmp	w0, #0x0
  4068f0:	b.eq	406934 <run+0x1fc>  // b.none
  4068f4:	mov	w0, #0x0                   	// #0
  4068f8:	bl	404a94 <parse_fstab>
  4068fc:	str	w0, [sp, #60]
  406900:	bl	401d00 <in_initrd@plt>
  406904:	and	w0, w0, #0xff
  406908:	cmp	w0, #0x0
  40690c:	b.eq	406920 <run+0x1e8>  // b.none
  406910:	mov	w0, #0x1                   	// #1
  406914:	bl	404a94 <parse_fstab>
  406918:	str	w0, [sp, #64]
  40691c:	b	406934 <run+0x1fc>
  406920:	adrp	x0, 41a000 <arg_fstab_enabled>
  406924:	add	x0, x0, #0x20
  406928:	ldr	x0, [x0]
  40692c:	bl	401fe0 <generator_enable_remount_fs_service@plt>
  406930:	str	w0, [sp, #64]
  406934:	ldr	w0, [sp, #56]
  406938:	cmp	w0, #0x0
  40693c:	b.lt	40695c <run+0x224>  // b.tstop
  406940:	ldr	w0, [sp, #60]
  406944:	cmp	w0, #0x0
  406948:	b.ge	406954 <run+0x21c>  // b.tcont
  40694c:	ldr	w0, [sp, #60]
  406950:	b	406960 <run+0x228>
  406954:	ldr	w0, [sp, #64]
  406958:	b	406960 <run+0x228>
  40695c:	ldr	w0, [sp, #56]
  406960:	ldp	x29, x30, [sp], #80
  406964:	ret

0000000000406968 <main>:
  406968:	stp	x29, x30, [sp, #-48]!
  40696c:	mov	x29, sp
  406970:	str	w0, [sp, #28]
  406974:	str	x1, [sp, #16]
  406978:	ldr	x1, [sp, #16]
  40697c:	ldr	w0, [sp, #28]
  406980:	bl	402434 <save_argc_argv>
  406984:	bl	401d80 <log_setup_generator@plt>
  406988:	ldr	w0, [sp, #28]
  40698c:	cmp	w0, #0x1
  406990:	b.le	406a2c <main+0xc4>
  406994:	ldr	w0, [sp, #28]
  406998:	cmp	w0, #0x4
  40699c:	b.eq	406a2c <main+0xc4>  // b.none
  4069a0:	mov	w0, #0x3                   	// #3
  4069a4:	str	w0, [sp, #32]
  4069a8:	mov	w0, #0x16                  	// #22
  4069ac:	movk	w0, #0x4000, lsl #16
  4069b0:	str	w0, [sp, #36]
  4069b4:	str	wzr, [sp, #40]
  4069b8:	ldr	w0, [sp, #40]
  4069bc:	bl	402020 <log_get_max_level_realm@plt>
  4069c0:	mov	w1, w0
  4069c4:	ldr	w0, [sp, #32]
  4069c8:	and	w0, w0, #0x7
  4069cc:	cmp	w1, w0
  4069d0:	b.lt	406a14 <main+0xac>  // b.tstop
  4069d4:	ldr	w0, [sp, #40]
  4069d8:	lsl	w1, w0, #10
  4069dc:	ldr	w0, [sp, #32]
  4069e0:	orr	w6, w1, w0
  4069e4:	adrp	x0, 406000 <add_volatile_var+0x3c>
  4069e8:	add	x1, x0, #0xdbb
  4069ec:	adrp	x0, 407000 <_fini+0x3ac>
  4069f0:	add	x5, x0, #0x9a8
  4069f4:	adrp	x0, 407000 <_fini+0x3ac>
  4069f8:	add	x4, x0, #0xbe0
  4069fc:	mov	w3, #0x389                 	// #905
  406a00:	mov	x2, x1
  406a04:	ldr	w1, [sp, #36]
  406a08:	mov	w0, w6
  406a0c:	bl	401ee0 <log_internal_realm@plt>
  406a10:	b	406ab0 <main+0x148>
  406a14:	ldr	w0, [sp, #36]
  406a18:	cmp	w0, #0x0
  406a1c:	cneg	w0, w0, lt  // lt = tstop
  406a20:	and	w0, w0, #0xff
  406a24:	neg	w0, w0
  406a28:	b	406ab0 <main+0x148>
  406a2c:	ldr	w0, [sp, #28]
  406a30:	cmp	w0, #0x1
  406a34:	b.le	406a44 <main+0xdc>
  406a38:	ldr	x0, [sp, #16]
  406a3c:	ldr	x0, [x0, #8]
  406a40:	b	406a4c <main+0xe4>
  406a44:	adrp	x0, 407000 <_fini+0x3ac>
  406a48:	add	x0, x0, #0x9d8
  406a4c:	ldr	w1, [sp, #28]
  406a50:	cmp	w1, #0x1
  406a54:	b.le	406a64 <main+0xfc>
  406a58:	ldr	x1, [sp, #16]
  406a5c:	ldr	x1, [x1, #16]
  406a60:	b	406a6c <main+0x104>
  406a64:	adrp	x1, 407000 <_fini+0x3ac>
  406a68:	add	x1, x1, #0x9d8
  406a6c:	ldr	w2, [sp, #28]
  406a70:	cmp	w2, #0x1
  406a74:	b.le	406a84 <main+0x11c>
  406a78:	ldr	x2, [sp, #16]
  406a7c:	ldr	x2, [x2, #24]
  406a80:	b	406a8c <main+0x124>
  406a84:	adrp	x2, 407000 <_fini+0x3ac>
  406a88:	add	x2, x2, #0x9d8
  406a8c:	bl	406738 <run>
  406a90:	str	w0, [sp, #44]
  406a94:	bl	401e70 <ask_password_agent_close@plt>
  406a98:	bl	401c60 <polkit_agent_close@plt>
  406a9c:	bl	401e80 <pager_close@plt>
  406aa0:	bl	401fd0 <mac_selinux_finish@plt>
  406aa4:	bl	402530 <static_destruct>
  406aa8:	ldr	w0, [sp, #44]
  406aac:	lsr	w0, w0, #31
  406ab0:	ldp	x29, x30, [sp], #48
  406ab4:	ret

0000000000406ab8 <mount_point_is_api>:
  406ab8:	stp	x29, x30, [sp, #-48]!
  406abc:	mov	x29, sp
  406ac0:	str	x0, [sp, #24]
  406ac4:	str	wzr, [sp, #44]
  406ac8:	b	406b1c <mount_point_is_api+0x64>
  406acc:	adrp	x0, 419000 <__FRAME_END__+0x102e8>
  406ad0:	add	x2, x0, #0x708
  406ad4:	ldr	w1, [sp, #44]
  406ad8:	mov	x0, x1
  406adc:	lsl	x0, x0, #3
  406ae0:	sub	x0, x0, x1
  406ae4:	lsl	x0, x0, #3
  406ae8:	add	x0, x2, x0
  406aec:	ldr	x0, [x0, #8]
  406af0:	mov	x1, x0
  406af4:	ldr	x0, [sp, #24]
  406af8:	bl	401c90 <path_equal@plt>
  406afc:	and	w0, w0, #0xff
  406b00:	cmp	w0, #0x0
  406b04:	b.eq	406b10 <mount_point_is_api+0x58>  // b.none
  406b08:	mov	w0, #0x1                   	// #1
  406b0c:	b	406b44 <mount_point_is_api+0x8c>
  406b10:	ldr	w0, [sp, #44]
  406b14:	add	w0, w0, #0x1
  406b18:	str	w0, [sp, #44]
  406b1c:	ldr	w0, [sp, #44]
  406b20:	cmp	w0, #0x13
  406b24:	b.ls	406acc <mount_point_is_api+0x14>  // b.plast
  406b28:	adrp	x0, 407000 <_fini+0x3ac>
  406b2c:	add	x1, x0, #0xe10
  406b30:	ldr	x0, [sp, #24]
  406b34:	bl	401dd0 <path_startswith@plt>
  406b38:	cmp	x0, #0x0
  406b3c:	cset	w0, ne  // ne = any
  406b40:	and	w0, w0, #0xff
  406b44:	ldp	x29, x30, [sp], #48
  406b48:	ret

0000000000406b4c <mount_point_ignore>:
  406b4c:	stp	x29, x30, [sp, #-48]!
  406b50:	mov	x29, sp
  406b54:	str	x0, [sp, #24]
  406b58:	adrp	x0, 408000 <__func__.12065+0x420>
  406b5c:	add	x0, x0, #0x320
  406b60:	str	x0, [sp, #40]
  406b64:	b	406ba4 <mount_point_ignore+0x58>
  406b68:	ldr	x1, [sp, #40]
  406b6c:	ldr	x0, [sp, #24]
  406b70:	bl	401c90 <path_equal@plt>
  406b74:	and	w0, w0, #0xff
  406b78:	cmp	w0, #0x0
  406b7c:	b.eq	406b88 <mount_point_ignore+0x3c>  // b.none
  406b80:	mov	w0, #0x1                   	// #1
  406b84:	b	406bc4 <mount_point_ignore+0x78>
  406b88:	ldr	x0, [sp, #40]
  406b8c:	bl	401ff0 <strlen@plt>
  406b90:	mov	x1, x0
  406b94:	ldr	x0, [sp, #40]
  406b98:	add	x0, x0, x1
  406b9c:	add	x0, x0, #0x1
  406ba0:	str	x0, [sp, #40]
  406ba4:	ldr	x0, [sp, #40]
  406ba8:	cmp	x0, #0x0
  406bac:	b.eq	406bc0 <mount_point_ignore+0x74>  // b.none
  406bb0:	ldr	x0, [sp, #40]
  406bb4:	ldrb	w0, [x0]
  406bb8:	cmp	w0, #0x0
  406bbc:	b.ne	406b68 <mount_point_ignore+0x1c>  // b.any
  406bc0:	mov	w0, #0x0                   	// #0
  406bc4:	ldp	x29, x30, [sp], #48
  406bc8:	ret
  406bcc:	nop

0000000000406bd0 <__libc_csu_init>:
  406bd0:	stp	x29, x30, [sp, #-64]!
  406bd4:	mov	x29, sp
  406bd8:	stp	x19, x20, [sp, #16]
  406bdc:	adrp	x20, 419000 <__FRAME_END__+0x102e8>
  406be0:	add	x20, x20, #0x6f8
  406be4:	stp	x21, x22, [sp, #32]
  406be8:	adrp	x21, 419000 <__FRAME_END__+0x102e8>
  406bec:	add	x21, x21, #0x6f0
  406bf0:	sub	x20, x20, x21
  406bf4:	mov	w22, w0
  406bf8:	stp	x23, x24, [sp, #48]
  406bfc:	mov	x23, x1
  406c00:	mov	x24, x2
  406c04:	bl	401b78 <_init>
  406c08:	cmp	xzr, x20, asr #3
  406c0c:	b.eq	406c38 <__libc_csu_init+0x68>  // b.none
  406c10:	asr	x20, x20, #3
  406c14:	mov	x19, #0x0                   	// #0
  406c18:	ldr	x3, [x21, x19, lsl #3]
  406c1c:	mov	x2, x24
  406c20:	add	x19, x19, #0x1
  406c24:	mov	x1, x23
  406c28:	mov	w0, w22
  406c2c:	blr	x3
  406c30:	cmp	x20, x19
  406c34:	b.ne	406c18 <__libc_csu_init+0x48>  // b.any
  406c38:	ldp	x19, x20, [sp, #16]
  406c3c:	ldp	x21, x22, [sp, #32]
  406c40:	ldp	x23, x24, [sp, #48]
  406c44:	ldp	x29, x30, [sp], #64
  406c48:	ret
  406c4c:	nop

0000000000406c50 <__libc_csu_fini>:
  406c50:	ret

Disassembly of section .fini:

0000000000406c54 <_fini>:
  406c54:	stp	x29, x30, [sp, #-16]!
  406c58:	mov	x29, sp
  406c5c:	ldp	x29, x30, [sp], #16
  406c60:	ret
