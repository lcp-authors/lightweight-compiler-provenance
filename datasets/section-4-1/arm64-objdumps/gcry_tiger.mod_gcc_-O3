
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_tiger.mod_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_mod_init-0xc30>:
   0:	mov	x3, #0xcdef                	// #52719
   4:	mov	x2, #0x3210                	// #12816
   8:	mov	x1, #0xe187                	// #57735
   c:	movk	x3, #0x89ab, lsl #16
  10:	movk	x2, #0x7654, lsl #16
  14:	movk	x1, #0xc3b2, lsl #16
  18:	movk	x3, #0x4567, lsl #32
  1c:	movk	x2, #0xba98, lsl #32
  20:	movk	x1, #0xa5b4, lsl #32
  24:	movk	x3, #0x123, lsl #48
  28:	movk	x2, #0xfedc, lsl #48
  2c:	movk	x1, #0xf096, lsl #48
  30:	stp	x3, x2, [x0]
  34:	str	x1, [x0, #16]
  38:	str	xzr, [x0, #88]
  3c:	str	wzr, [x0, #96]
  40:	ret
  44:	nop
  48:	mov	x4, #0xcdef                	// #52719
  4c:	mov	x3, #0x3210                	// #12816
  50:	mov	x2, #0xe187                	// #57735
  54:	movk	x4, #0x89ab, lsl #16
  58:	movk	x3, #0x7654, lsl #16
  5c:	movk	x2, #0xc3b2, lsl #16
  60:	movk	x4, #0x4567, lsl #32
  64:	movk	x3, #0xba98, lsl #32
  68:	movk	x2, #0xa5b4, lsl #32
  6c:	movk	x4, #0x123, lsl #48
  70:	movk	x3, #0xfedc, lsl #48
  74:	movk	x2, #0xf096, lsl #48
  78:	mov	w1, #0x1                   	// #1
  7c:	stp	x4, x3, [x0]
  80:	str	x2, [x0, #16]
  84:	str	xzr, [x0, #88]
  88:	str	w1, [x0, #96]
  8c:	ret
  90:	mov	x4, #0xcdef                	// #52719
  94:	mov	x3, #0x3210                	// #12816
  98:	mov	x2, #0xe187                	// #57735
  9c:	movk	x4, #0x89ab, lsl #16
  a0:	movk	x3, #0x7654, lsl #16
  a4:	movk	x2, #0xc3b2, lsl #16
  a8:	movk	x4, #0x4567, lsl #32
  ac:	movk	x3, #0xba98, lsl #32
  b0:	movk	x2, #0xa5b4, lsl #32
  b4:	movk	x4, #0x123, lsl #48
  b8:	movk	x3, #0xfedc, lsl #48
  bc:	movk	x2, #0xf096, lsl #48
  c0:	mov	w1, #0x2                   	// #2
  c4:	stp	x4, x3, [x0]
  c8:	str	x2, [x0, #16]
  cc:	str	xzr, [x0, #88]
  d0:	str	w1, [x0, #96]
  d4:	ret
  d8:	mov	x5, #0xa5a5                	// #42405
  dc:	mov	x10, #0xcdef                	// #52719
  e0:	ldr	x2, [x0, #56]
  e4:	movk	x5, #0xa5a5, lsl #16
  e8:	ldr	x8, [x0]
  ec:	movk	x5, #0xa5a5, lsl #32
  f0:	movk	x5, #0xa5a5, lsl #48
  f4:	eor	x4, x2, x5
  f8:	sub	x8, x8, x4
  fc:	movk	x10, #0x89ab, lsl #16
 100:	ldp	x5, x4, [x0, #8]
 104:	movk	x10, #0x4567, lsl #32
 108:	ldp	x7, x3, [x0, #24]
 10c:	movk	x10, #0x123, lsl #48
 110:	ldr	x6, [x0, #40]
 114:	eor	x5, x8, x5
 118:	mvn	x1, x5
 11c:	add	x4, x5, x4
 120:	eor	x1, x4, x1, lsl #19
 124:	sub	x7, x7, x1
 128:	eor	x3, x7, x3
 12c:	mvn	x9, x3
 130:	add	x6, x3, x6
 134:	ldr	x1, [x0, #48]
 138:	eor	x9, x6, x9, lsr #23
 13c:	sub	x1, x1, x9
 140:	eor	x2, x2, x1
 144:	mvn	x9, x2
 148:	add	x8, x8, x2
 14c:	str	x8, [x0]
 150:	eor	x8, x8, x9, lsl #19
 154:	sub	x5, x5, x8
 158:	eor	x4, x4, x5
 15c:	stp	x5, x4, [x0, #8]
 160:	mvn	x5, x4
 164:	add	x4, x7, x4
 168:	str	x4, [x0, #24]
 16c:	eor	x4, x4, x5, lsr #23
 170:	sub	x3, x3, x4
 174:	str	x3, [x0, #32]
 178:	eor	x3, x6, x3
 17c:	add	x1, x1, x3
 180:	stp	x3, x1, [x0, #40]
 184:	eor	x1, x1, x10
 188:	sub	x1, x2, x1
 18c:	str	x1, [x0, #56]
 190:	ret
 194:	nop
 198:	add	x0, x0, #0x18
 19c:	ret
 1a0:	stp	x29, x30, [sp, #-48]!
 1a4:	adrp	x7, 0 <grub_mod_init-0xc30>
 1a8:	adrp	x5, 0 <grub_mod_init-0xc30>
 1ac:	mov	x29, sp
 1b0:	ldr	x6, [x3]
 1b4:	stp	x19, x20, [sp, #16]
 1b8:	sxtw	x4, w4
 1bc:	ldr	x12, [x2]
 1c0:	ldr	x9, [x5]
 1c4:	eor	x12, x12, x6
 1c8:	ldr	x8, [x7]
 1cc:	add	x10, x9, #0x800
 1d0:	ubfx	x6, x12, #16, #8
 1d4:	ubfx	x14, x12, #32, #8
 1d8:	sub	x11, x8, #0x100
 1dc:	ubfx	x5, x12, #48, #8
 1e0:	add	x8, x8, #0x700
 1e4:	and	x13, x12, #0xff
 1e8:	ldr	x14, [x10, x14, lsl #3]
 1ec:	ubfx	x16, x12, #40, #8
 1f0:	ldr	x7, [x11, x6, lsl #3]
 1f4:	lsr	x15, x12, #56
 1f8:	ldr	x13, [x8, x13, lsl #3]
 1fc:	eor	x7, x7, x14
 200:	ldr	x14, [x9, x5, lsl #3]
 204:	lsr	w6, w12, #24
 208:	ldr	x5, [x0]
 20c:	eor	x14, x14, x13
 210:	eor	x7, x7, x14
 214:	ubfx	x13, x12, #8, #8
 218:	ldr	x14, [x3, #8]
 21c:	sub	x5, x5, x7
 220:	ldr	x17, [x8, x15, lsl #3]
 224:	eor	x14, x5, x14
 228:	ldr	x6, [x10, x6, lsl #3]
 22c:	ubfx	x19, x14, #32, #8
 230:	ldr	x7, [x9, x13, lsl #3]
 234:	and	x15, x14, #0xff
 238:	ldr	x5, [x11, x16, lsl #3]
 23c:	ubfx	x16, x14, #16, #8
 240:	eor	x7, x7, x6
 244:	ubfx	x13, x14, #48, #8
 248:	eor	x5, x5, x17
 24c:	lsr	w17, w14, #24
 250:	eor	x7, x7, x5
 254:	ldr	x6, [x10, x19, lsl #3]
 258:	ldr	x18, [x1]
 25c:	ldr	x5, [x11, x16, lsl #3]
 260:	add	x7, x7, x18
 264:	ldr	x19, [x8, x15, lsl #3]
 268:	eor	x5, x5, x6
 26c:	ldr	x6, [x9, x13, lsl #3]
 270:	ubfx	x18, x14, #40, #8
 274:	ubfx	x15, x14, #8, #8
 278:	mul	x7, x7, x4
 27c:	eor	x6, x6, x19
 280:	lsr	x16, x14, #56
 284:	ldr	x13, [x3, #16]
 288:	eor	x5, x5, x6
 28c:	sub	x7, x7, x5
 290:	str	x21, [sp, #32]
 294:	eor	x13, x7, x13
 298:	ldr	x17, [x10, x17, lsl #3]
 29c:	and	x20, x13, #0xff
 2a0:	ldr	x5, [x11, x18, lsl #3]
 2a4:	ubfx	x7, x13, #16, #8
 2a8:	ldr	x16, [x8, x16, lsl #3]
 2ac:	ubfx	x19, x13, #32, #8
 2b0:	ldr	x6, [x9, x15, lsl #3]
 2b4:	ubfx	x15, x13, #48, #8
 2b8:	eor	x5, x5, x16
 2bc:	ubfx	x18, x13, #40, #8
 2c0:	eor	x6, x6, x17
 2c4:	lsr	x17, x13, #56
 2c8:	eor	x6, x6, x5
 2cc:	lsr	w16, w13, #24
 2d0:	add	x6, x6, x12
 2d4:	ubfx	x5, x13, #8, #8
 2d8:	ldr	x19, [x10, x19, lsl #3]
 2dc:	ldr	x7, [x11, x7, lsl #3]
 2e0:	mul	x6, x6, x4
 2e4:	ldr	x12, [x8, x20, lsl #3]
 2e8:	eor	x7, x7, x19
 2ec:	ldr	x15, [x9, x15, lsl #3]
 2f0:	ldr	x16, [x10, x16, lsl #3]
 2f4:	eor	x15, x15, x12
 2f8:	eor	x7, x7, x15
 2fc:	ldr	x12, [x11, x18, lsl #3]
 300:	sub	x6, x6, x7
 304:	ldr	x15, [x8, x17, lsl #3]
 308:	ldr	x5, [x9, x5, lsl #3]
 30c:	eor	x7, x12, x15
 310:	ldr	x12, [x3, #24]
 314:	eor	x5, x5, x16
 318:	eor	x5, x5, x7
 31c:	eor	x12, x6, x12
 320:	add	x5, x5, x14
 324:	and	x14, x12, #0xff
 328:	ubfx	x15, x12, #32, #8
 32c:	ubfx	x6, x12, #16, #8
 330:	ubfx	x7, x12, #48, #8
 334:	ubfx	x18, x12, #40, #8
 338:	ldr	x14, [x8, x14, lsl #3]
 33c:	mul	x5, x5, x4
 340:	ldr	x17, [x10, x15, lsl #3]
 344:	lsr	w16, w12, #24
 348:	ldr	x6, [x11, x6, lsl #3]
 34c:	lsr	x15, x12, #56
 350:	ldr	x7, [x9, x7, lsl #3]
 354:	eor	x6, x6, x17
 358:	ubfx	x17, x12, #8, #8
 35c:	eor	x7, x7, x14
 360:	ldr	x14, [x3, #32]
 364:	eor	x6, x6, x7
 368:	sub	x5, x5, x6
 36c:	eor	x14, x5, x14
 370:	ldr	x16, [x10, x16, lsl #3]
 374:	ubfx	x21, x14, #16, #8
 378:	ldr	x15, [x8, x15, lsl #3]
 37c:	ubfx	x20, x14, #32, #8
 380:	ldr	x7, [x9, x17, lsl #3]
 384:	and	x19, x14, #0xff
 388:	ldr	x5, [x11, x18, lsl #3]
 38c:	ubfx	x6, x14, #48, #8
 390:	eor	x7, x7, x16
 394:	ubfx	x18, x14, #40, #8
 398:	eor	x5, x5, x15
 39c:	ubfx	x17, x14, #8, #8
 3a0:	eor	x7, x7, x5
 3a4:	lsr	w15, w14, #24
 3a8:	add	x7, x7, x13
 3ac:	lsr	x16, x14, #56
 3b0:	ldr	x13, [x10, x20, lsl #3]
 3b4:	ldr	x5, [x11, x21, lsl #3]
 3b8:	mul	x7, x7, x4
 3bc:	ldr	x19, [x8, x19, lsl #3]
 3c0:	eor	x5, x5, x13
 3c4:	ldr	x6, [x9, x6, lsl #3]
 3c8:	ldr	x13, [x3, #40]
 3cc:	eor	x6, x6, x19
 3d0:	eor	x5, x5, x6
 3d4:	sub	x7, x7, x5
 3d8:	eor	x13, x7, x13
 3dc:	ldr	x15, [x10, x15, lsl #3]
 3e0:	ubfx	x20, x13, #16, #8
 3e4:	ldr	x5, [x11, x18, lsl #3]
 3e8:	and	x19, x13, #0xff
 3ec:	ldr	x16, [x8, x16, lsl #3]
 3f0:	ubfx	x18, x13, #32, #8
 3f4:	ldr	x6, [x9, x17, lsl #3]
 3f8:	ubfx	x7, x13, #48, #8
 3fc:	eor	x5, x5, x16
 400:	ubfx	x17, x13, #40, #8
 404:	eor	x6, x6, x15
 408:	lsr	w16, w13, #24
 40c:	eor	x6, x6, x5
 410:	lsr	x15, x13, #56
 414:	add	x6, x6, x12
 418:	ubfx	x12, x13, #8, #8
 41c:	ldr	x5, [x11, x20, lsl #3]
 420:	ldr	x18, [x10, x18, lsl #3]
 424:	mul	x6, x6, x4
 428:	ldr	x19, [x8, x19, lsl #3]
 42c:	eor	x5, x5, x18
 430:	ldr	x7, [x9, x7, lsl #3]
 434:	ldr	x18, [x3, #48]
 438:	eor	x7, x7, x19
 43c:	eor	x5, x5, x7
 440:	sub	x6, x6, x5
 444:	eor	x6, x6, x18
 448:	ldr	x5, [x11, x17, lsl #3]
 44c:	lsr	w21, w6, #24
 450:	ldr	x16, [x10, x16, lsl #3]
 454:	lsr	x20, x6, #56
 458:	ldr	x7, [x8, x15, lsl #3]
 45c:	ubfx	x19, x6, #8, #8
 460:	ldr	x12, [x9, x12, lsl #3]
 464:	ubfx	x15, x6, #40, #8
 468:	eor	x7, x5, x7
 46c:	ubfx	x30, x6, #16, #8
 470:	eor	x5, x12, x16
 474:	ubfx	x18, x6, #32, #8
 478:	eor	x5, x5, x7
 47c:	and	x17, x6, #0xff
 480:	add	x5, x5, x14
 484:	ubfx	x16, x6, #48, #8
 488:	ldr	x14, [x8, x20, lsl #3]
 48c:	ldr	x7, [x10, x21, lsl #3]
 490:	mul	x5, x5, x4
 494:	ldr	x12, [x9, x19, lsl #3]
 498:	ldr	x15, [x11, x15, lsl #3]
 49c:	eor	x7, x12, x7
 4a0:	ldr	x12, [x10, x18, lsl #3]
 4a4:	eor	x15, x15, x14
 4a8:	ldr	x14, [x11, x30, lsl #3]
 4ac:	eor	x7, x7, x15
 4b0:	ldr	x15, [x8, x17, lsl #3]
 4b4:	eor	x12, x14, x12
 4b8:	ldr	x14, [x9, x16, lsl #3]
 4bc:	add	x7, x7, x13
 4c0:	ldr	x13, [x3, #56]
 4c4:	eor	x3, x14, x15
 4c8:	eor	x3, x12, x3
 4cc:	mul	x7, x7, x4
 4d0:	sub	x3, x5, x3
 4d4:	eor	x3, x3, x13
 4d8:	ldp	x19, x20, [sp, #16]
 4dc:	lsr	w16, w3, #24
 4e0:	ubfx	x12, x3, #40, #8
 4e4:	lsr	x15, x3, #56
 4e8:	ldr	x21, [sp, #32]
 4ec:	str	x3, [x0]
 4f0:	ubfx	x0, x3, #8, #8
 4f4:	and	x13, x3, #0xff
 4f8:	ubfx	x14, x3, #32, #8
 4fc:	ubfx	x5, x3, #16, #8
 500:	ubfx	x3, x3, #48, #8
 504:	ldr	x16, [x10, x16, lsl #3]
 508:	ldr	x15, [x8, x15, lsl #3]
 50c:	ldr	x12, [x11, x12, lsl #3]
 510:	ldr	x0, [x9, x0, lsl #3]
 514:	ldr	x5, [x11, x5, lsl #3]
 518:	eor	x0, x0, x16
 51c:	eor	x11, x12, x15
 520:	ldr	x10, [x10, x14, lsl #3]
 524:	eor	x0, x0, x11
 528:	ldr	x8, [x8, x13, lsl #3]
 52c:	add	x6, x0, x6
 530:	ldr	x3, [x9, x3, lsl #3]
 534:	eor	x0, x5, x10
 538:	mul	x4, x6, x4
 53c:	eor	x3, x3, x8
 540:	eor	x0, x0, x3
 544:	sub	x0, x7, x0
 548:	str	x0, [x1]
 54c:	ldp	x29, x30, [sp], #48
 550:	str	x4, [x2]
 554:	ret
	...
 568:	stp	x29, x30, [sp, #-144]!
 56c:	mov	x2, #0x40                  	// #64
 570:	mov	x29, sp
 574:	stp	x19, x20, [sp, #16]
 578:	mov	x19, x0
 57c:	add	x0, sp, #0x50
 580:	stp	x21, x22, [sp, #32]
 584:	bl	0 <grub_memmove>
 588:	add	x3, sp, #0x50
 58c:	add	x2, sp, #0x48
 590:	add	x1, sp, #0x40
 594:	mov	w4, #0x5                   	// #5
 598:	add	x0, sp, #0x38
 59c:	ldp	x22, x21, [x19]
 5a0:	stp	x22, x21, [sp, #56]
 5a4:	ldr	x20, [x19, #16]
 5a8:	str	x20, [sp, #72]
 5ac:	bl	1a0 <grub_mod_init-0xa90>
 5b0:	add	x0, sp, #0x50
 5b4:	bl	d8 <grub_mod_init-0xb58>
 5b8:	add	x3, sp, #0x50
 5bc:	add	x2, sp, #0x40
 5c0:	add	x1, sp, #0x38
 5c4:	mov	w4, #0x7                   	// #7
 5c8:	add	x0, sp, #0x48
 5cc:	bl	1a0 <grub_mod_init-0xa90>
 5d0:	add	x0, sp, #0x50
 5d4:	bl	d8 <grub_mod_init-0xb58>
 5d8:	add	x3, sp, #0x50
 5dc:	add	x2, sp, #0x38
 5e0:	add	x1, sp, #0x48
 5e4:	add	x0, sp, #0x40
 5e8:	mov	w4, #0x9                   	// #9
 5ec:	bl	1a0 <grub_mod_init-0xa90>
 5f0:	ldp	x1, x0, [sp, #56]
 5f4:	ldr	x2, [sp, #72]
 5f8:	add	x20, x20, x2
 5fc:	eor	x1, x1, x22
 600:	sub	x0, x0, x21
 604:	ldp	x21, x22, [sp, #32]
 608:	stp	x1, x0, [x19]
 60c:	str	x20, [x19, #16]
 610:	ldp	x19, x20, [sp, #16]
 614:	ldp	x29, x30, [sp], #144
 618:	ret
 61c:	nop
 620:	stp	x29, x30, [sp, #-48]!
 624:	mov	x29, sp
 628:	stp	x19, x20, [sp, #16]
 62c:	mov	x20, x1
 630:	ldr	w1, [x0, #88]
 634:	stp	x21, x22, [sp, #32]
 638:	mov	x19, x0
 63c:	mov	x21, x2
 640:	cmp	w1, #0x40
 644:	b.eq	724 <grub_mod_init-0x50c>  // b.none
 648:	cbz	x20, 714 <grub_mod_init-0x51c>
 64c:	cbz	w1, 68c <grub_mod_init-0x5a4>
 650:	cbz	x2, 714 <grub_mod_init-0x51c>
 654:	sxtw	x0, w1
 658:	add	x1, x19, #0x18
 65c:	b	678 <grub_mod_init-0x5b8>
 660:	str	w2, [x19, #88]
 664:	subs	x21, x21, #0x1
 668:	ldrb	w3, [x20], #1
 66c:	strb	w3, [x1, x0]
 670:	add	x0, x0, #0x1
 674:	b.eq	780 <grub_mod_init-0x4b0>  // b.none
 678:	add	w2, w0, #0x1
 67c:	cmp	w0, #0x3f
 680:	b.le	660 <grub_mod_init-0x5d0>
 684:	cmp	w0, #0x40
 688:	b.eq	748 <grub_mod_init-0x4e8>  // b.none
 68c:	mov	x22, x20
 690:	cmp	x21, #0x3f
 694:	b.ls	6d0 <grub_mod_init-0x560>  // b.plast
 698:	sub	x22, x21, #0x40
 69c:	and	x22, x22, #0xffffffffffffffc0
 6a0:	add	x22, x22, #0x40
 6a4:	add	x22, x20, x22
 6a8:	mov	x1, x20
 6ac:	mov	x0, x19
 6b0:	bl	568 <grub_mod_init-0x6c8>
 6b4:	add	x20, x20, #0x40
 6b8:	ldr	w0, [x19, #92]
 6bc:	cmp	x20, x22
 6c0:	add	w0, w0, #0x1
 6c4:	stp	wzr, w0, [x19, #88]
 6c8:	b.ne	6a8 <grub_mod_init-0x588>  // b.any
 6cc:	and	x21, x21, #0x3f
 6d0:	mov	w0, #0x100                 	// #256
 6d4:	bl	0 <_gcry_burn_stack>
 6d8:	cbz	x21, 714 <grub_mod_init-0x51c>
 6dc:	ldrsw	x1, [x19, #88]
 6e0:	add	x2, x19, #0x18
 6e4:	sub	x22, x22, x1
 6e8:	add	x21, x21, x1
 6ec:	b	708 <grub_mod_init-0x528>
 6f0:	str	w0, [x19, #88]
 6f4:	ldrb	w0, [x22, x1]
 6f8:	strb	w0, [x2, x1]
 6fc:	add	x1, x1, #0x1
 700:	cmp	x1, x21
 704:	b.eq	714 <grub_mod_init-0x51c>  // b.none
 708:	add	w0, w1, #0x1
 70c:	cmp	w1, #0x3f
 710:	b.le	6f0 <grub_mod_init-0x540>
 714:	ldp	x19, x20, [sp, #16]
 718:	ldp	x21, x22, [sp, #32]
 71c:	ldp	x29, x30, [sp], #48
 720:	ret
 724:	add	x1, x0, #0x18
 728:	bl	568 <grub_mod_init-0x6c8>
 72c:	mov	w0, #0x100                 	// #256
 730:	bl	0 <_gcry_burn_stack>
 734:	ldr	w0, [x19, #92]
 738:	add	w0, w0, #0x1
 73c:	stp	wzr, w0, [x19, #88]
 740:	cbnz	x20, 68c <grub_mod_init-0x5a4>
 744:	b	714 <grub_mod_init-0x51c>
 748:	add	x1, x19, #0x18
 74c:	mov	x0, x19
 750:	bl	568 <grub_mod_init-0x6c8>
 754:	mov	w0, #0x100                 	// #256
 758:	bl	0 <_gcry_burn_stack>
 75c:	ldr	w0, [x19, #92]
 760:	cmp	x21, #0x3f
 764:	add	w0, w0, #0x1
 768:	stp	wzr, w0, [x19, #88]
 76c:	b.hi	698 <grub_mod_init-0x598>  // b.pmore
 770:	mov	x22, x20
 774:	mov	w0, #0x100                 	// #256
 778:	bl	0 <_gcry_burn_stack>
 77c:	b	6dc <grub_mod_init-0x554>
 780:	cmp	w2, #0x40
 784:	b.ne	714 <grub_mod_init-0x51c>  // b.any
 788:	mov	x0, x19
 78c:	bl	568 <grub_mod_init-0x6c8>
 790:	mov	w0, #0x100                 	// #256
 794:	bl	0 <_gcry_burn_stack>
 798:	ldr	w0, [x19, #92]
 79c:	add	w0, w0, #0x1
 7a0:	stp	wzr, w0, [x19, #88]
 7a4:	b	714 <grub_mod_init-0x51c>
 7a8:	stp	x29, x30, [sp, #-64]!
 7ac:	mov	w2, #0x80                  	// #128
 7b0:	mov	x29, sp
 7b4:	ldr	w3, [x0, #96]
 7b8:	ldr	w1, [x0, #88]
 7bc:	stp	x19, x20, [sp, #16]
 7c0:	cmp	w3, #0x2
 7c4:	mov	x19, x0
 7c8:	stp	x21, x22, [sp, #32]
 7cc:	add	x21, x0, #0x18
 7d0:	stp	x23, x24, [sp, #48]
 7d4:	mov	w24, #0x1                   	// #1
 7d8:	csel	w20, w2, w24, eq  // eq = none
 7dc:	cmp	w1, #0x40
 7e0:	b.eq	bd8 <grub_mod_init-0x58>  // b.none
 7e4:	ldr	w2, [x0, #92]
 7e8:	add	w3, w1, #0x1
 7ec:	lsl	w0, w2, #6
 7f0:	adds	w0, w1, w0
 7f4:	cset	w4, cs  // cs = hs, nlast
 7f8:	cmp	w1, #0x37
 7fc:	add	w2, w4, w2, lsr #26
 800:	lsl	w23, w0, #3
 804:	extr	w22, w2, w0, #29
 808:	b.le	968 <grub_mod_init-0x2c8>
 80c:	add	x0, x19, w1, sxtw
 810:	str	w3, [x19, #88]
 814:	cmp	w3, #0x3f
 818:	strb	w20, [x0, #24]
 81c:	b.gt	930 <grub_mod_init-0x300>
 820:	add	x3, x19, w3, sxtw
 824:	cmp	w1, #0x3e
 828:	add	w0, w1, #0x2
 82c:	strb	wzr, [x3, #24]
 830:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 834:	add	x0, x19, w0, sxtw
 838:	cmp	w1, #0x3d
 83c:	add	w2, w1, #0x3
 840:	strb	wzr, [x0, #24]
 844:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 848:	add	x2, x19, w2, sxtw
 84c:	cmp	w1, #0x3c
 850:	add	w0, w1, #0x4
 854:	strb	wzr, [x2, #24]
 858:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 85c:	add	x0, x19, w0, sxtw
 860:	cmp	w1, #0x3b
 864:	add	w2, w1, #0x5
 868:	strb	wzr, [x0, #24]
 86c:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 870:	add	x2, x19, w2, sxtw
 874:	cmp	w1, #0x3a
 878:	add	w0, w1, #0x6
 87c:	strb	wzr, [x2, #24]
 880:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 884:	add	x0, x19, w0, sxtw
 888:	cmp	w1, #0x39
 88c:	add	w1, w1, #0x7
 890:	strb	wzr, [x0, #24]
 894:	b.eq	8a0 <grub_mod_init-0x390>  // b.none
 898:	add	x1, x19, w1, sxtw
 89c:	strb	wzr, [x1, #24]
 8a0:	mov	w0, #0x40                  	// #64
 8a4:	str	w0, [x19, #88]
 8a8:	mov	x1, x21
 8ac:	mov	x0, x19
 8b0:	bl	568 <grub_mod_init-0x6c8>
 8b4:	mov	w0, #0x100                 	// #256
 8b8:	bl	0 <_gcry_burn_stack>
 8bc:	ldr	w0, [x19, #92]
 8c0:	add	w0, w0, #0x1
 8c4:	stp	wzr, w0, [x19, #88]
 8c8:	mov	x0, x21
 8cc:	mov	x2, #0x38                  	// #56
 8d0:	mov	w1, #0x0                   	// #0
 8d4:	bl	0 <grub_memset>
 8d8:	mov	x1, x21
 8dc:	str	w23, [x19, #80]
 8e0:	strh	w22, [x19, #84]
 8e4:	mov	x0, x19
 8e8:	strh	wzr, [x19, #86]
 8ec:	bl	568 <grub_mod_init-0x6c8>
 8f0:	mov	w0, #0x100                 	// #256
 8f4:	bl	0 <_gcry_burn_stack>
 8f8:	ldr	w0, [x19, #96]
 8fc:	cbnz	w0, 93c <grub_mod_init-0x2f4>
 900:	ldp	x2, x1, [x19]
 904:	ldr	x0, [x19, #16]
 908:	rev	x0, x0
 90c:	str	x0, [x19, #40]
 910:	rev	x2, x2
 914:	rev	x1, x1
 918:	stp	x2, x1, [x19, #24]
 91c:	ldp	x19, x20, [sp, #16]
 920:	ldp	x21, x22, [sp, #32]
 924:	ldp	x23, x24, [sp, #48]
 928:	ldp	x29, x30, [sp], #64
 92c:	ret
 930:	cmp	w3, #0x40
 934:	b.ne	8c8 <grub_mod_init-0x368>  // b.any
 938:	b	8a8 <grub_mod_init-0x388>
 93c:	ldr	x0, [x19]
 940:	str	x0, [x19, #24]
 944:	ldr	x0, [x19, #8]
 948:	str	x0, [x19, #32]
 94c:	ldr	x0, [x19, #16]
 950:	str	x0, [x19, #40]
 954:	ldp	x19, x20, [sp, #16]
 958:	ldp	x21, x22, [sp, #32]
 95c:	ldp	x23, x24, [sp, #48]
 960:	ldp	x29, x30, [sp], #64
 964:	ret
 968:	sxtw	x5, w1
 96c:	str	w3, [x19, #88]
 970:	add	x0, x19, x5
 974:	cmp	w3, #0x37
 978:	strb	w20, [x0, #24]
 97c:	b.gt	8d8 <grub_mod_init-0x358>
 980:	add	x6, x5, #0x19
 984:	mov	w7, #0xb                   	// #11
 988:	add	x2, x19, x6
 98c:	mov	w5, #0x36                  	// #54
 990:	neg	x2, x2
 994:	sub	w5, w5, w1
 998:	and	w2, w2, #0x7
 99c:	mov	w4, #0x37                  	// #55
 9a0:	add	w0, w2, #0x7
 9a4:	sub	w4, w4, w1
 9a8:	cmp	w0, w7
 9ac:	csel	w0, w0, w7, cs  // cs = hs, nlast
 9b0:	cmp	w5, w0
 9b4:	b.cc	c24 <grub_mod_init-0xc>  // b.lo, b.ul, b.last
 9b8:	cbz	w2, c1c <grub_mod_init-0x14>
 9bc:	add	x5, x19, w3, sxtw
 9c0:	cmp	w2, #0x1
 9c4:	add	w0, w3, #0x1
 9c8:	strb	wzr, [x5, #24]
 9cc:	b.eq	a40 <grub_mod_init-0x1f0>  // b.none
 9d0:	add	x5, x19, w0, sxtw
 9d4:	cmp	w2, #0x2
 9d8:	add	w0, w3, #0x2
 9dc:	strb	wzr, [x5, #24]
 9e0:	b.eq	a40 <grub_mod_init-0x1f0>  // b.none
 9e4:	add	x5, x19, w0, sxtw
 9e8:	cmp	w2, #0x3
 9ec:	add	w0, w3, #0x3
 9f0:	strb	wzr, [x5, #24]
 9f4:	b.eq	a40 <grub_mod_init-0x1f0>  // b.none
 9f8:	add	x5, x19, w0, sxtw
 9fc:	cmp	w2, #0x4
 a00:	add	w0, w3, #0x4
 a04:	strb	wzr, [x5, #24]
 a08:	b.eq	a40 <grub_mod_init-0x1f0>  // b.none
 a0c:	add	x5, x19, w0, sxtw
 a10:	cmp	w2, #0x5
 a14:	add	w0, w3, #0x5
 a18:	strb	wzr, [x5, #24]
 a1c:	b.eq	a40 <grub_mod_init-0x1f0>  // b.none
 a20:	add	x5, x19, w0, sxtw
 a24:	cmp	w2, #0x7
 a28:	add	w0, w3, #0x6
 a2c:	strb	wzr, [x5, #24]
 a30:	b.ne	a40 <grub_mod_init-0x1f0>  // b.any
 a34:	add	x5, x19, w0, sxtw
 a38:	add	w0, w3, #0x7
 a3c:	strb	wzr, [x5, #24]
 a40:	mov	w5, w2
 a44:	sub	w2, w4, w2
 a48:	add	x5, x5, x6
 a4c:	lsr	w4, w2, #3
 a50:	add	x6, x19, x5
 a54:	cmp	w4, #0x1
 a58:	str	xzr, [x19, x5]
 a5c:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a60:	str	xzr, [x6, #8]
 a64:	cmp	w4, #0x2
 a68:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a6c:	str	xzr, [x6, #16]
 a70:	cmp	w4, #0x3
 a74:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a78:	str	xzr, [x6, #24]
 a7c:	cmp	w4, #0x4
 a80:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a84:	str	xzr, [x6, #32]
 a88:	cmp	w4, #0x5
 a8c:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a90:	str	xzr, [x6, #40]
 a94:	cmp	w4, #0x6
 a98:	b.eq	aac <grub_mod_init-0x184>  // b.none
 a9c:	str	xzr, [x6, #48]
 aa0:	cmp	w4, #0x7
 aa4:	b.eq	aac <grub_mod_init-0x184>  // b.none
 aa8:	str	xzr, [x6, #56]
 aac:	and	w4, w2, #0xfffffff8
 ab0:	add	w0, w4, w0
 ab4:	cmp	w4, w2
 ab8:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 abc:	add	x2, x19, w0, sxtw
 ac0:	cmp	w0, #0x37
 ac4:	add	w4, w0, #0x1
 ac8:	strb	wzr, [x2, #24]
 acc:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 ad0:	add	x4, x19, w4, sxtw
 ad4:	cmp	w0, #0x36
 ad8:	add	w2, w0, #0x2
 adc:	strb	wzr, [x4, #24]
 ae0:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 ae4:	add	x2, x19, w2, sxtw
 ae8:	cmp	w0, #0x35
 aec:	add	w4, w0, #0x3
 af0:	strb	wzr, [x2, #24]
 af4:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 af8:	add	x4, x19, w4, sxtw
 afc:	cmp	w0, #0x34
 b00:	add	w2, w0, #0x4
 b04:	strb	wzr, [x4, #24]
 b08:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b0c:	add	x2, x19, w2, sxtw
 b10:	cmp	w0, #0x33
 b14:	add	w4, w0, #0x5
 b18:	strb	wzr, [x2, #24]
 b1c:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b20:	add	x4, x19, w4, sxtw
 b24:	cmp	w0, #0x32
 b28:	add	w2, w0, #0x6
 b2c:	strb	wzr, [x4, #24]
 b30:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b34:	add	x2, x19, w2, sxtw
 b38:	cmp	w0, #0x31
 b3c:	add	w4, w0, #0x7
 b40:	strb	wzr, [x2, #24]
 b44:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b48:	add	x4, x19, w4, sxtw
 b4c:	cmp	w0, #0x30
 b50:	add	w2, w0, #0x8
 b54:	strb	wzr, [x4, #24]
 b58:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b5c:	add	x2, x19, w2, sxtw
 b60:	cmp	w0, #0x2f
 b64:	add	w4, w0, #0x9
 b68:	strb	wzr, [x2, #24]
 b6c:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b70:	add	x4, x19, w4, sxtw
 b74:	cmp	w0, #0x2e
 b78:	add	w2, w0, #0xa
 b7c:	strb	wzr, [x4, #24]
 b80:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b84:	add	x2, x19, w2, sxtw
 b88:	cmp	w0, #0x2d
 b8c:	add	w4, w0, #0xb
 b90:	strb	wzr, [x2, #24]
 b94:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 b98:	add	x4, x19, w4, sxtw
 b9c:	cmp	w0, #0x2c
 ba0:	add	w2, w0, #0xc
 ba4:	strb	wzr, [x4, #24]
 ba8:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 bac:	add	x2, x19, w2, sxtw
 bb0:	cmp	w0, #0x2b
 bb4:	add	w0, w0, #0xd
 bb8:	strb	wzr, [x2, #24]
 bbc:	b.eq	bc8 <grub_mod_init-0x68>  // b.none
 bc0:	add	x0, x19, w0, sxtw
 bc4:	strb	wzr, [x0, #24]
 bc8:	sub	w1, w3, w1
 bcc:	add	w1, w1, #0x37
 bd0:	str	w1, [x19, #88]
 bd4:	b	8d8 <grub_mod_init-0x358>
 bd8:	mov	x1, x21
 bdc:	bl	568 <grub_mod_init-0x6c8>
 be0:	mov	w0, #0x100                 	// #256
 be4:	bl	0 <_gcry_burn_stack>
 be8:	strb	w20, [x19, #24]
 bec:	ldr	w0, [x19, #92]
 bf0:	mvn	w2, w19
 bf4:	mov	w3, w24
 bf8:	and	w2, w2, #0x7
 bfc:	add	w0, w0, w24
 c00:	mov	w4, #0x37                  	// #55
 c04:	mov	w1, #0x0                   	// #0
 c08:	mov	x6, #0x19                  	// #25
 c0c:	lsl	w23, w0, #9
 c10:	lsr	w22, w0, #23
 c14:	stp	w24, w0, [x19, #88]
 c18:	b	9b8 <grub_mod_init-0x278>
 c1c:	mov	w0, w3
 c20:	b	a40 <grub_mod_init-0x1f0>
 c24:	mov	w0, w3
 c28:	b	abc <grub_mod_init-0x174>
 c2c:	nop

0000000000000c30 <grub_mod_init>:
 c30:	stp	x29, x30, [sp, #-32]!
 c34:	adrp	x0, 0 <grub_mod_init-0xc30>
 c38:	mov	x29, sp
 c3c:	str	x19, [sp, #16]
 c40:	ldr	x19, [x0]
 c44:	mov	x0, x19
 c48:	bl	0 <grub_md_register>
 c4c:	add	x0, x19, #0x60
 c50:	bl	0 <grub_md_register>
 c54:	add	x0, x19, #0xc0
 c58:	ldr	x19, [sp, #16]
 c5c:	ldp	x29, x30, [sp], #32
 c60:	b	0 <grub_md_register>
 c64:	nop
	...

0000000000000c70 <grub_mod_fini>:
 c70:	stp	x29, x30, [sp, #-32]!
 c74:	adrp	x0, 0 <grub_mod_init-0xc30>
 c78:	mov	x29, sp
 c7c:	str	x19, [sp, #16]
 c80:	ldr	x19, [x0]
 c84:	mov	x0, x19
 c88:	bl	0 <grub_md_unregister>
 c8c:	add	x0, x19, #0x60
 c90:	bl	0 <grub_md_unregister>
 c94:	add	x0, x19, #0xc0
 c98:	ldr	x19, [sp, #16]
 c9c:	ldp	x29, x30, [sp], #32
 ca0:	b	0 <grub_md_unregister>
 ca4:	nop
	...
