
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//pathchk_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000980 <_init>:
 980:	stp	x29, x30, [sp, #-16]!
 984:	mov	x29, sp
 988:	bl	ac0 <call_weak_fn>
 98c:	ldp	x29, x30, [sp], #16
 990:	ret

Disassembly of section .plt:

00000000000009a0 <.plt>:
 9a0:	stp	x16, x30, [sp, #-16]!
 9a4:	adrp	x16, 11000 <__FRAME_END__+0xfca4>
 9a8:	ldr	x17, [x16, #4088]
 9ac:	add	x16, x16, #0xff8
 9b0:	br	x17
 9b4:	nop
 9b8:	nop
 9bc:	nop

00000000000009c0 <strlen@plt>:
 9c0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9c4:	ldr	x17, [x16]
 9c8:	add	x16, x16, #0x0
 9cc:	br	x17

00000000000009d0 <builtin_error@plt>:
 9d0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9d4:	ldr	x17, [x16, #8]
 9d8:	add	x16, x16, #0x8
 9dc:	br	x17

00000000000009e0 <__cxa_finalize@plt>:
 9e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9e4:	ldr	x17, [x16, #16]
 9e8:	add	x16, x16, #0x10
 9ec:	br	x17

00000000000009f0 <builtin_help@plt>:
 9f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9f4:	ldr	x17, [x16, #24]
 9f8:	add	x16, x16, #0x18
 9fc:	br	x17

0000000000000a00 <xmalloc@plt>:
 a00:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a04:	ldr	x17, [x16, #32]
 a08:	add	x16, x16, #0x20
 a0c:	br	x17

0000000000000a10 <builtin_usage@plt>:
 a10:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a14:	ldr	x17, [x16, #40]
 a18:	add	x16, x16, #0x28
 a1c:	br	x17

0000000000000a20 <strerror@plt>:
 a20:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a24:	ldr	x17, [x16, #48]
 a28:	add	x16, x16, #0x30
 a2c:	br	x17

0000000000000a30 <__gmon_start__@plt>:
 a30:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a34:	ldr	x17, [x16, #56]
 a38:	add	x16, x16, #0x38
 a3c:	br	x17

0000000000000a40 <access@plt>:
 a40:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a44:	ldr	x17, [x16, #64]
 a48:	add	x16, x16, #0x40
 a4c:	br	x17

0000000000000a50 <free@plt>:
 a50:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a54:	ldr	x17, [x16, #72]
 a58:	add	x16, x16, #0x48
 a5c:	br	x17

0000000000000a60 <internal_getopt@plt>:
 a60:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a64:	ldr	x17, [x16, #80]
 a68:	add	x16, x16, #0x50
 a6c:	br	x17

0000000000000a70 <reset_internal_getopt@plt>:
 a70:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a74:	ldr	x17, [x16, #88]
 a78:	add	x16, x16, #0x58
 a7c:	br	x17

0000000000000a80 <strchr@plt>:
 a80:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a84:	ldr	x17, [x16, #96]
 a88:	add	x16, x16, #0x60
 a8c:	br	x17

0000000000000a90 <strcpy@plt>:
 a90:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a94:	ldr	x17, [x16, #104]
 a98:	add	x16, x16, #0x68
 a9c:	br	x17

0000000000000aa0 <__errno_location@plt>:
 aa0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 aa4:	ldr	x17, [x16, #112]
 aa8:	add	x16, x16, #0x70
 aac:	br	x17

0000000000000ab0 <__xstat@plt>:
 ab0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 ab4:	ldr	x17, [x16, #120]
 ab8:	add	x16, x16, #0x78
 abc:	br	x17

Disassembly of section .text:

0000000000000ac0 <call_weak_fn>:
 ac0:	adrp	x0, 11000 <__FRAME_END__+0xfca4>
 ac4:	ldr	x0, [x0, #4048]
 ac8:	cbz	x0, ad0 <call_weak_fn+0x10>
 acc:	b	a30 <__gmon_start__@plt>
 ad0:	ret
 ad4:	nop

0000000000000ad8 <deregister_tm_clones>:
 ad8:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 adc:	add	x0, x0, #0xf0
 ae0:	adrp	x1, 12000 <strlen@GLIBC_2.17>
 ae4:	add	x1, x1, #0xf0
 ae8:	cmp	x1, x0
 aec:	b.eq	b04 <deregister_tm_clones+0x2c>  // b.none
 af0:	adrp	x1, 11000 <__FRAME_END__+0xfca4>
 af4:	ldr	x1, [x1, #4032]
 af8:	cbz	x1, b04 <deregister_tm_clones+0x2c>
 afc:	mov	x16, x1
 b00:	br	x16
 b04:	ret

0000000000000b08 <register_tm_clones>:
 b08:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 b0c:	add	x0, x0, #0xf0
 b10:	adrp	x1, 12000 <strlen@GLIBC_2.17>
 b14:	add	x1, x1, #0xf0
 b18:	sub	x1, x1, x0
 b1c:	lsr	x2, x1, #63
 b20:	add	x1, x2, x1, asr #3
 b24:	cmp	xzr, x1, asr #1
 b28:	asr	x1, x1, #1
 b2c:	b.eq	b44 <register_tm_clones+0x3c>  // b.none
 b30:	adrp	x2, 11000 <__FRAME_END__+0xfca4>
 b34:	ldr	x2, [x2, #4064]
 b38:	cbz	x2, b44 <register_tm_clones+0x3c>
 b3c:	mov	x16, x2
 b40:	br	x16
 b44:	ret

0000000000000b48 <__do_global_dtors_aux>:
 b48:	stp	x29, x30, [sp, #-32]!
 b4c:	mov	x29, sp
 b50:	str	x19, [sp, #16]
 b54:	adrp	x19, 12000 <strlen@GLIBC_2.17>
 b58:	ldrb	w0, [x19, #240]
 b5c:	cbnz	w0, b84 <__do_global_dtors_aux+0x3c>
 b60:	adrp	x0, 11000 <__FRAME_END__+0xfca4>
 b64:	ldr	x0, [x0, #4040]
 b68:	cbz	x0, b78 <__do_global_dtors_aux+0x30>
 b6c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 b70:	ldr	x0, [x0, #128]
 b74:	bl	9e0 <__cxa_finalize@plt>
 b78:	bl	ad8 <deregister_tm_clones>
 b7c:	mov	w0, #0x1                   	// #1
 b80:	strb	w0, [x19, #240]
 b84:	ldr	x19, [sp, #16]
 b88:	ldp	x29, x30, [sp], #32
 b8c:	ret

0000000000000b90 <frame_dummy>:
 b90:	b	b08 <register_tm_clones>

0000000000000b94 <pathchk_builtin>:
 b94:	stp	x29, x30, [sp, #-32]!
 b98:	stp	x20, x19, [sp, #16]
 b9c:	mov	x29, sp
 ba0:	mov	x19, x0
 ba4:	bl	a70 <reset_internal_getopt@plt>
 ba8:	adrp	x20, 0 <_init-0x980>
 bac:	add	x20, x20, #0xf80
 bb0:	mov	x0, x19
 bb4:	mov	x1, x20
 bb8:	bl	a60 <internal_getopt@plt>
 bbc:	cmp	w0, #0x70
 bc0:	b.eq	bb0 <pathchk_builtin+0x1c>  // b.none
 bc4:	cmn	w0, #0x1
 bc8:	b.eq	bdc <pathchk_builtin+0x48>  // b.none
 bcc:	cmn	w0, #0x63
 bd0:	b.ne	c18 <pathchk_builtin+0x84>  // b.any
 bd4:	bl	9f0 <builtin_help@plt>
 bd8:	b	c1c <pathchk_builtin+0x88>
 bdc:	adrp	x8, 11000 <__FRAME_END__+0xfca4>
 be0:	ldr	x8, [x8, #4056]
 be4:	ldr	x19, [x8]
 be8:	cbz	x19, c18 <pathchk_builtin+0x84>
 bec:	mov	w20, wzr
 bf0:	ldr	x8, [x19, #8]
 bf4:	mov	w1, #0x1                   	// #1
 bf8:	ldr	x0, [x8]
 bfc:	bl	c2c <validate_path>
 c00:	ldr	x19, [x19]
 c04:	orr	w20, w0, w20
 c08:	cbnz	x19, bf0 <pathchk_builtin+0x5c>
 c0c:	cmp	w20, #0x0
 c10:	cset	w0, ne  // ne = any
 c14:	b	c20 <pathchk_builtin+0x8c>
 c18:	bl	a10 <builtin_usage@plt>
 c1c:	mov	w0, #0x102                 	// #258
 c20:	ldp	x20, x19, [sp, #16]
 c24:	ldp	x29, x30, [sp], #32
 c28:	ret

0000000000000c2c <validate_path>:
 c2c:	stp	x29, x30, [sp, #-96]!
 c30:	stp	x20, x19, [sp, #80]
 c34:	mov	w20, w1
 c38:	mov	x19, x0
 c3c:	stp	x28, x27, [sp, #16]
 c40:	stp	x26, x25, [sp, #32]
 c44:	stp	x24, x23, [sp, #48]
 c48:	stp	x22, x21, [sp, #64]
 c4c:	mov	x29, sp
 c50:	cbz	w1, c60 <validate_path+0x34>
 c54:	mov	x0, x19
 c58:	bl	dd4 <portable_chars_only>
 c5c:	cbz	w0, dac <validate_path+0x180>
 c60:	ldrb	w8, [x19]
 c64:	cbz	w8, db4 <validate_path+0x188>
 c68:	adrp	x9, 1000 <_fini+0x90>
 c6c:	adrp	x10, 1000 <_fini+0x90>
 c70:	add	x9, x9, #0xc8
 c74:	add	x10, x10, #0xca
 c78:	cmp	w8, #0x2f
 c7c:	csel	x0, x10, x9, eq  // eq = none
 c80:	bl	e34 <xstrdup>
 c84:	cmp	w20, #0x0
 c88:	mov	w8, #0xff                  	// #255
 c8c:	mov	w9, #0xe                   	// #14
 c90:	adrp	x23, 1000 <_fini+0x90>
 c94:	mov	x21, x0
 c98:	mov	w27, wzr
 c9c:	mov	w28, #0x2f                  	// #47
 ca0:	csel	w22, w9, w8, ne  // ne = any
 ca4:	add	x23, x23, #0xcc
 ca8:	mov	x25, x19
 cac:	b	cbc <validate_path+0x90>
 cb0:	cbz	w27, d3c <validate_path+0x110>
 cb4:	mov	w8, #0x3                   	// #3
 cb8:	cbnz	w8, d64 <validate_path+0x138>
 cbc:	sub	x26, x25, #0x1
 cc0:	ldrb	w8, [x26, #1]!
 cc4:	cmp	w8, #0x2f
 cc8:	b.eq	cc0 <validate_path+0x94>  // b.none
 ccc:	mov	w1, #0x2f                  	// #47
 cd0:	mov	x0, x26
 cd4:	bl	a80 <strchr@plt>
 cd8:	cbz	x0, cec <validate_path+0xc0>
 cdc:	mov	x25, x0
 ce0:	strb	wzr, [x0]
 ce4:	cbnz	w27, d10 <validate_path+0xe4>
 ce8:	b	d00 <validate_path+0xd4>
 cec:	mov	x0, x26
 cf0:	bl	9c0 <strlen@plt>
 cf4:	add	x25, x26, x0
 cf8:	mov	w27, #0x1                   	// #1
 cfc:	cbnz	w27, d10 <validate_path+0xe4>
 d00:	mov	x0, x19
 d04:	bl	e64 <dir_ok>
 d08:	mov	w24, w0
 d0c:	cbz	w0, d2c <validate_path+0x100>
 d10:	sub	w2, w25, w26
 d14:	cmp	w22, w2
 d18:	b.ge	cb0 <validate_path+0x84>  // b.tcont
 d1c:	mov	x0, x23
 d20:	mov	x1, x26
 d24:	mov	w3, w22
 d28:	bl	9d0 <builtin_error@plt>
 d2c:	mov	x0, x21
 d30:	bl	a50 <free@plt>
 d34:	mov	w8, #0x1                   	// #1
 d38:	b	cb8 <validate_path+0x8c>
 d3c:	cmp	w24, #0x1
 d40:	b.ne	d58 <validate_path+0x12c>  // b.any
 d44:	mov	x0, x21
 d48:	bl	a50 <free@plt>
 d4c:	mov	x0, x19
 d50:	bl	e34 <xstrdup>
 d54:	mov	x21, x0
 d58:	mov	w8, wzr
 d5c:	strb	w28, [x25], #1
 d60:	b	cb8 <validate_path+0x8c>
 d64:	cmp	w8, #0x3
 d68:	b.ne	dac <validate_path+0x180>  // b.any
 d6c:	cmp	w20, #0x0
 d70:	mov	w8, #0x1000                	// #4096
 d74:	mov	w9, #0x100                 	// #256
 d78:	mov	x0, x21
 d7c:	csel	w20, w9, w8, ne  // ne = any
 d80:	bl	a50 <free@plt>
 d84:	mov	x0, x19
 d88:	bl	9c0 <strlen@plt>
 d8c:	cmp	x0, x20
 d90:	b.ls	db4 <validate_path+0x188>  // b.plast
 d94:	mov	x2, x0
 d98:	adrp	x0, 1000 <_fini+0x90>
 d9c:	add	x0, x0, #0xf9
 da0:	mov	x1, x19
 da4:	mov	w3, w20
 da8:	bl	9d0 <builtin_error@plt>
 dac:	mov	w0, #0x1                   	// #1
 db0:	b	db8 <validate_path+0x18c>
 db4:	mov	w0, wzr
 db8:	ldp	x20, x19, [sp, #80]
 dbc:	ldp	x22, x21, [sp, #64]
 dc0:	ldp	x24, x23, [sp, #48]
 dc4:	ldp	x26, x25, [sp, #32]
 dc8:	ldp	x28, x27, [sp, #16]
 dcc:	ldp	x29, x30, [sp], #96
 dd0:	ret

0000000000000dd4 <portable_chars_only>:
 dd4:	stp	x29, x30, [sp, #-16]!
 dd8:	ldrb	w8, [x0]
 ddc:	mov	x29, sp
 de0:	cbz	w8, e0c <portable_chars_only+0x38>
 de4:	adrp	x10, 1000 <_fini+0x90>
 de8:	mov	x1, x0
 dec:	mov	w9, #0x1                   	// #1
 df0:	add	x10, x10, #0x195
 df4:	and	x11, x8, #0xff
 df8:	ldrb	w11, [x10, x11]
 dfc:	cbz	w11, e18 <portable_chars_only+0x44>
 e00:	ldrb	w8, [x1, x9]
 e04:	add	x9, x9, #0x1
 e08:	cbnz	w8, df4 <portable_chars_only+0x20>
 e0c:	mov	w0, #0x1                   	// #1
 e10:	ldp	x29, x30, [sp], #16
 e14:	ret
 e18:	adrp	x0, 1000 <_fini+0x90>
 e1c:	and	w2, w8, #0xff
 e20:	add	x0, x0, #0x127
 e24:	bl	9d0 <builtin_error@plt>
 e28:	mov	w0, wzr
 e2c:	ldp	x29, x30, [sp], #16
 e30:	ret

0000000000000e34 <xstrdup>:
 e34:	stp	x29, x30, [sp, #-32]!
 e38:	str	x19, [sp, #16]
 e3c:	mov	x29, sp
 e40:	mov	x19, x0
 e44:	bl	9c0 <strlen@plt>
 e48:	add	x0, x0, #0x1
 e4c:	bl	a00 <xmalloc@plt>
 e50:	mov	x1, x19
 e54:	bl	a90 <strcpy@plt>
 e58:	ldr	x19, [sp, #16]
 e5c:	ldp	x29, x30, [sp], #32
 e60:	ret

0000000000000e64 <dir_ok>:
 e64:	sub	sp, sp, #0xa0
 e68:	mov	x1, sp
 e6c:	stp	x29, x30, [sp, #128]
 e70:	stp	x20, x19, [sp, #144]
 e74:	add	x29, sp, #0x80
 e78:	mov	x19, x0
 e7c:	bl	f10 <safe_stat>
 e80:	cbz	w0, e8c <dir_ok+0x28>
 e84:	mov	w20, #0x2                   	// #2
 e88:	b	ee0 <dir_ok+0x7c>
 e8c:	ldr	w8, [sp, #16]
 e90:	and	w8, w8, #0xf000
 e94:	cmp	w8, #0x4, lsl #12
 e98:	b.ne	ecc <dir_ok+0x68>  // b.any
 e9c:	mov	w1, #0x1                   	// #1
 ea0:	mov	x0, x19
 ea4:	mov	w20, #0x1                   	// #1
 ea8:	bl	a40 <access@plt>
 eac:	cbz	w0, ee0 <dir_ok+0x7c>
 eb0:	bl	aa0 <__errno_location@plt>
 eb4:	ldr	w0, [x0]
 eb8:	cmp	w0, #0xd
 ebc:	b.ne	ef4 <dir_ok+0x90>  // b.any
 ec0:	adrp	x0, 1000 <_fini+0x90>
 ec4:	add	x0, x0, #0x16d
 ec8:	b	ed4 <dir_ok+0x70>
 ecc:	adrp	x0, 1000 <_fini+0x90>
 ed0:	add	x0, x0, #0x155
 ed4:	mov	x1, x19
 ed8:	bl	9d0 <builtin_error@plt>
 edc:	mov	w20, wzr
 ee0:	mov	w0, w20
 ee4:	ldp	x20, x19, [sp, #144]
 ee8:	ldp	x29, x30, [sp, #128]
 eec:	add	sp, sp, #0xa0
 ef0:	ret
 ef4:	bl	a20 <strerror@plt>
 ef8:	mov	x2, x0
 efc:	adrp	x0, 1000 <_fini+0x90>
 f00:	add	x0, x0, #0x18e
 f04:	mov	x1, x19
 f08:	bl	9d0 <builtin_error@plt>
 f0c:	b	edc <dir_ok+0x78>

0000000000000f10 <safe_stat>:
 f10:	stp	x29, x30, [sp, #-48]!
 f14:	stp	x20, x19, [sp, #32]
 f18:	mov	x19, x1
 f1c:	mov	x20, x0
 f20:	str	x21, [sp, #16]
 f24:	mov	x29, sp
 f28:	mov	x0, x20
 f2c:	mov	x1, x19
 f30:	bl	f60 <__stat>
 f34:	mov	w21, w0
 f38:	tbz	w0, #31, f4c <safe_stat+0x3c>
 f3c:	bl	aa0 <__errno_location@plt>
 f40:	ldr	w8, [x0]
 f44:	cmp	w8, #0x4
 f48:	b.eq	f28 <safe_stat+0x18>  // b.none
 f4c:	mov	w0, w21
 f50:	ldp	x20, x19, [sp, #32]
 f54:	ldr	x21, [sp, #16]
 f58:	ldp	x29, x30, [sp], #48
 f5c:	ret

0000000000000f60 <__stat>:
 f60:	mov	x2, x1
 f64:	mov	x1, x0
 f68:	mov	w0, #0x0                   	// #0
 f6c:	b	ab0 <__xstat@plt>

Disassembly of section .fini:

0000000000000f70 <_fini>:
 f70:	stp	x29, x30, [sp, #-16]!
 f74:	mov	x29, sp
 f78:	ldp	x29, x30, [sp], #16
 f7c:	ret
