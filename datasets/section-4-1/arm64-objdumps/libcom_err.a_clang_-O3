In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_clang_-O3:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x19, 0 <setup_et_lock>
   c:	add	x19, x19, #0x0
  10:	add	x0, x19, #0x18
  14:	mov	w2, #0x1                   	// #1
  18:	mov	w1, wzr
  1c:	mov	x29, sp
  20:	mov	w20, #0x1                   	// #1
  24:	bl	0 <sem_init>
  28:	strb	w20, [x19]
  2c:	ldp	x20, x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

0000000000000038 <fini_et_lock>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	str	x19, [sp, #16]
  40:	adrp	x19, 0 <setup_et_lock>
  44:	add	x19, x19, #0x0
  48:	add	x0, x19, #0x18
  4c:	mov	x29, sp
  50:	bl	0 <sem_destroy>
  54:	strb	wzr, [x19]
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret

0000000000000064 <et_list_lock>:
  64:	stp	x29, x30, [sp, #-32]!
  68:	stp	x20, x19, [sp, #16]
  6c:	adrp	x8, 0 <setup_et_lock>
  70:	ldrb	w8, [x8]
  74:	mov	x29, sp
  78:	tbnz	w8, #0, 9c <et_list_lock+0x38>
  7c:	adrp	x19, 0 <setup_et_lock>
  80:	add	x19, x19, #0x0
  84:	add	x0, x19, #0x18
  88:	mov	w2, #0x1                   	// #1
  8c:	mov	w1, wzr
  90:	mov	w20, #0x1                   	// #1
  94:	bl	0 <sem_init>
  98:	strb	w20, [x19]
  9c:	ldp	x20, x19, [sp, #16]
  a0:	adrp	x0, 0 <setup_et_lock>
  a4:	add	x0, x0, #0x0
  a8:	ldp	x29, x30, [sp], #32
  ac:	b	0 <sem_wait>

00000000000000b0 <et_list_unlock>:
  b0:	adrp	x8, 0 <setup_et_lock>
  b4:	ldrb	w8, [x8]
  b8:	cmp	w8, #0x1
  bc:	b.ne	cc <et_list_unlock+0x1c>  // b.any
  c0:	adrp	x0, 0 <setup_et_lock>
  c4:	add	x0, x0, #0x0
  c8:	b	0 <sem_post>
  cc:	mov	w0, wzr
  d0:	ret

00000000000000d4 <set_com_err_gettext>:
  d4:	adrp	x9, 0 <setup_et_lock>
  d8:	ldr	x8, [x9]
  dc:	str	x0, [x9]
  e0:	mov	x0, x8
  e4:	ret

00000000000000e8 <error_message>:
  e8:	stp	x29, x30, [sp, #-64]!
  ec:	stp	x20, x19, [sp, #48]
  f0:	and	w19, w0, #0xff
  f4:	stp	x24, x23, [sp, #16]
  f8:	stp	x22, x21, [sp, #32]
  fc:	subs	x20, x0, x19
 100:	mrs	x22, tpidr_el0
 104:	mov	x29, sp
 108:	b.eq	170 <error_message+0x88>  // b.none
 10c:	adrp	x21, 0 <setup_et_lock>
 110:	ldrb	w8, [x21]
 114:	tbnz	w8, #0, 138 <error_message+0x50>
 118:	adrp	x23, 0 <setup_et_lock>
 11c:	add	x23, x23, #0x0
 120:	add	x0, x23, #0x18
 124:	mov	w2, #0x1                   	// #1
 128:	mov	w1, wzr
 12c:	mov	w24, #0x1                   	// #1
 130:	bl	0 <sem_init>
 134:	strb	w24, [x23]
 138:	adrp	x0, 0 <setup_et_lock>
 13c:	add	x0, x0, #0x0
 140:	bl	0 <sem_wait>
 144:	adrp	x8, 0 <setup_et_lock>
 148:	ldr	x8, [x8]
 14c:	cbz	x8, 1b0 <error_message+0xc8>
 150:	ldr	x9, [x8, #8]
 154:	ldr	w10, [x9, #8]
 158:	eor	w10, w10, w20
 15c:	tst	x10, #0xffffff
 160:	b.eq	1a4 <error_message+0xbc>  // b.none
 164:	ldr	x8, [x8]
 168:	cbnz	x8, 150 <error_message+0x68>
 16c:	b	1b0 <error_message+0xc8>
 170:	mov	w0, w19
 174:	bl	0 <strerror>
 178:	mov	x20, x0
 17c:	cbnz	x0, 30c <error_message+0x224>
 180:	adrp	x8, 0 <setup_et_lock>
 184:	add	x8, x8, #0x0
 188:	ldr	x9, [x8]
 18c:	ldur	x8, [x8, #6]
 190:	add	x10, x22, #0x0, lsl #12
 194:	add	x10, x10, #0x0
 198:	str	x9, [x10]
 19c:	stur	x8, [x10, #6]
 1a0:	b	284 <error_message+0x19c>
 1a4:	ldr	w8, [x9, #16]
 1a8:	cmp	w8, w19
 1ac:	b.gt	1e8 <error_message+0x100>
 1b0:	adrp	x8, 8 <setup_et_lock+0x8>
 1b4:	ldr	x8, [x8]
 1b8:	cbz	x8, 22c <error_message+0x144>
 1bc:	ldr	x9, [x8, #8]
 1c0:	ldr	w10, [x9, #8]
 1c4:	eor	w10, w10, w20
 1c8:	tst	x10, #0xffffff
 1cc:	b.eq	1dc <error_message+0xf4>  // b.none
 1d0:	ldr	x8, [x8]
 1d4:	cbnz	x8, 1bc <error_message+0xd4>
 1d8:	b	22c <error_message+0x144>
 1dc:	ldr	w8, [x9, #16]
 1e0:	cmp	w8, w19
 1e4:	b.le	22c <error_message+0x144>
 1e8:	ldr	x8, [x9]
 1ec:	ldrb	w9, [x21]
 1f0:	ldr	x20, [x8, x19, lsl #3]
 1f4:	cmp	w9, #0x1
 1f8:	b.ne	208 <error_message+0x120>  // b.any
 1fc:	adrp	x0, 0 <setup_et_lock>
 200:	add	x0, x0, #0x0
 204:	bl	0 <sem_post>
 208:	adrp	x8, 0 <setup_et_lock>
 20c:	ldr	x1, [x8]
 210:	cbz	x1, 30c <error_message+0x224>
 214:	mov	x0, x20
 218:	ldp	x20, x19, [sp, #48]
 21c:	ldp	x22, x21, [sp, #32]
 220:	ldp	x24, x23, [sp, #16]
 224:	ldp	x29, x30, [sp], #64
 228:	br	x1
 22c:	ldrb	w8, [x21]
 230:	cmp	w8, #0x1
 234:	b.ne	244 <error_message+0x15c>  // b.any
 238:	adrp	x0, 0 <setup_et_lock>
 23c:	add	x0, x0, #0x0
 240:	bl	0 <sem_post>
 244:	adrp	x8, 0 <setup_et_lock>
 248:	add	x8, x8, #0x0
 24c:	ldr	x9, [x8]
 250:	ldur	x8, [x8, #6]
 254:	add	x10, x22, #0x0, lsl #12
 258:	add	x21, x10, #0x0
 25c:	mov	x0, x20
 260:	str	x9, [x21]
 264:	stur	x8, [x21, #6]
 268:	bl	0 <error_table_name>
 26c:	mov	x1, x0
 270:	mov	x0, x21
 274:	bl	0 <strcat>
 278:	bl	0 <strlen>
 27c:	mov	w8, #0x20                  	// #32
 280:	strh	w8, [x21, x0]
 284:	add	x8, x22, #0x0, lsl #12
 288:	add	x9, x8, #0x0
 28c:	ldrb	w8, [x9], #1
 290:	cbnz	w8, 28c <error_message+0x1a4>
 294:	cmp	w19, #0x64
 298:	sub	x8, x9, #0x1
 29c:	b.cc	2c8 <error_message+0x1e0>  // b.lo, b.ul, b.last
 2a0:	mov	w10, #0x851f                	// #34079
 2a4:	movk	w10, #0x51eb, lsl #16
 2a8:	umull	x10, w19, w10
 2ac:	lsr	x10, x10, #37
 2b0:	mov	w11, #0x64                  	// #100
 2b4:	orr	w12, w10, #0x30
 2b8:	strb	w12, [x8]
 2bc:	msub	w19, w10, w11, w19
 2c0:	mov	x8, x9
 2c4:	b	2d0 <error_message+0x1e8>
 2c8:	cmp	w19, #0xa
 2cc:	b.cc	2f8 <error_message+0x210>  // b.lo, b.ul, b.last
 2d0:	mov	w10, #0xcccd                	// #52429
 2d4:	and	w9, w19, #0xff
 2d8:	movk	w10, #0xcccc, lsl #16
 2dc:	umull	x9, w9, w10
 2e0:	mov	w11, #0xa                   	// #10
 2e4:	lsr	x9, x9, #35
 2e8:	add	w10, w9, #0x30
 2ec:	msub	w9, w9, w11, w19
 2f0:	strb	w10, [x8], #1
 2f4:	and	w19, w9, #0xff
 2f8:	add	x10, x22, #0x0, lsl #12
 2fc:	add	w9, w19, #0x30
 300:	add	x20, x10, #0x0
 304:	strb	wzr, [x8, #1]
 308:	strb	w9, [x8]
 30c:	mov	x0, x20
 310:	ldp	x20, x19, [sp, #48]
 314:	ldp	x22, x21, [sp, #32]
 318:	ldp	x24, x23, [sp, #16]
 31c:	ldp	x29, x30, [sp], #64
 320:	ret

0000000000000324 <add_error_table>:
 324:	stp	x29, x30, [sp, #-64]!
 328:	stp	x20, x19, [sp, #48]
 32c:	mov	x19, x0
 330:	mov	w0, #0x10                  	// #16
 334:	str	x23, [sp, #16]
 338:	stp	x22, x21, [sp, #32]
 33c:	mov	x29, sp
 340:	bl	0 <malloc>
 344:	cbz	x0, 39c <add_error_table+0x78>
 348:	adrp	x21, 0 <setup_et_lock>
 34c:	ldrb	w8, [x21]
 350:	mov	x20, x0
 354:	tbnz	w8, #0, 378 <add_error_table+0x54>
 358:	adrp	x22, 0 <setup_et_lock>
 35c:	add	x22, x22, #0x0
 360:	add	x0, x22, #0x18
 364:	mov	w2, #0x1                   	// #1
 368:	mov	w1, wzr
 36c:	mov	w23, #0x1                   	// #1
 370:	bl	0 <sem_init>
 374:	strb	w23, [x22]
 378:	adrp	x0, 0 <setup_et_lock>
 37c:	add	x0, x0, #0x0
 380:	bl	0 <sem_wait>
 384:	cbz	w0, 3a4 <add_error_table+0x80>
 388:	mov	x0, x20
 38c:	bl	0 <free>
 390:	bl	0 <__errno_location>
 394:	ldrsw	x0, [x0]
 398:	b	408 <add_error_table+0xe4>
 39c:	mov	w0, #0xc                   	// #12
 3a0:	b	408 <add_error_table+0xe4>
 3a4:	adrp	x8, 8 <setup_et_lock+0x8>
 3a8:	ldr	x9, [x8]
 3ac:	str	x20, [x8]
 3b0:	stp	x9, x19, [x20]
 3b4:	bl	41c <init_debug>
 3b8:	adrp	x8, 0 <setup_et_lock>
 3bc:	ldrb	w8, [x8]
 3c0:	tbz	w8, #0, 3ec <add_error_table+0xc8>
 3c4:	adrp	x8, 0 <setup_et_lock>
 3c8:	ldr	x0, [x19, #8]
 3cc:	ldr	x20, [x8]
 3d0:	bl	0 <error_table_name>
 3d4:	adrp	x1, 0 <setup_et_lock>
 3d8:	mov	x2, x0
 3dc:	add	x1, x1, #0x0
 3e0:	mov	x0, x20
 3e4:	mov	x3, x19
 3e8:	bl	0 <fprintf>
 3ec:	ldrb	w8, [x21]
 3f0:	cmp	w8, #0x1
 3f4:	b.ne	404 <add_error_table+0xe0>  // b.any
 3f8:	adrp	x0, 0 <setup_et_lock>
 3fc:	add	x0, x0, #0x0
 400:	bl	0 <sem_post>
 404:	mov	x0, xzr
 408:	ldp	x20, x19, [sp, #48]
 40c:	ldp	x22, x21, [sp, #32]
 410:	ldr	x23, [sp, #16]
 414:	ldp	x29, x30, [sp], #64
 418:	ret

000000000000041c <init_debug>:
 41c:	stp	x29, x30, [sp, #-48]!
 420:	stp	x20, x19, [sp, #32]
 424:	adrp	x20, 0 <setup_et_lock>
 428:	ldr	w19, [x20]
 42c:	str	x21, [sp, #16]
 430:	mov	x29, sp
 434:	tbnz	w19, #15, 47c <init_debug+0x60>
 438:	adrp	x0, 0 <setup_et_lock>
 43c:	add	x0, x0, #0x0
 440:	bl	0 <getenv>
 444:	cbz	x0, 48c <init_debug+0x70>
 448:	add	x1, x29, #0x18
 44c:	mov	w2, wzr
 450:	bl	0 <strtoul>
 454:	ldr	x8, [x29, #24]
 458:	mov	x19, x0
 45c:	str	w19, [x20]
 460:	ldrb	w8, [x8]
 464:	cbnz	w8, 474 <init_debug+0x58>
 468:	bl	0 <__errno_location>
 46c:	ldr	w8, [x0]
 470:	cbz	w8, 48c <init_debug+0x70>
 474:	mov	w8, #0x8000                	// #32768
 478:	str	w8, [x20]
 47c:	ldp	x20, x19, [sp, #32]
 480:	ldr	x21, [sp, #16]
 484:	ldp	x29, x30, [sp], #48
 488:	ret
 48c:	orr	w8, w19, #0x8000
 490:	cmp	w8, #0x8, lsl #12
 494:	str	w8, [x20]
 498:	b.eq	47c <init_debug+0x60>  // b.none
 49c:	bl	0 <getuid>
 4a0:	mov	w19, w0
 4a4:	bl	0 <geteuid>
 4a8:	cmp	w19, w0
 4ac:	adrp	x21, 0 <setup_et_lock>
 4b0:	b.ne	508 <init_debug+0xec>  // b.any
 4b4:	bl	0 <getgid>
 4b8:	mov	w19, w0
 4bc:	bl	0 <getegid>
 4c0:	cmp	w19, w0
 4c4:	b.ne	508 <init_debug+0xec>  // b.any
 4c8:	mov	w0, #0x3                   	// #3
 4cc:	mov	w1, wzr
 4d0:	mov	w2, wzr
 4d4:	mov	w3, wzr
 4d8:	mov	w4, wzr
 4dc:	bl	0 <prctl>
 4e0:	cbz	w0, 508 <init_debug+0xec>
 4e4:	adrp	x0, 0 <setup_et_lock>
 4e8:	add	x0, x0, #0x0
 4ec:	bl	0 <secure_getenv>
 4f0:	cbz	x0, 508 <init_debug+0xec>
 4f4:	adrp	x1, 0 <setup_et_lock>
 4f8:	add	x1, x1, #0x0
 4fc:	bl	0 <fopen>
 500:	str	x0, [x21]
 504:	b	50c <init_debug+0xf0>
 508:	ldr	x0, [x21]
 50c:	cbnz	x0, 52c <init_debug+0x110>
 510:	adrp	x0, 0 <setup_et_lock>
 514:	adrp	x1, 0 <setup_et_lock>
 518:	add	x0, x0, #0x0
 51c:	add	x1, x1, #0x0
 520:	bl	0 <fopen>
 524:	str	x0, [x21]
 528:	cbz	x0, 474 <init_debug+0x58>
 52c:	bl	0 <fileno>
 530:	tbnz	w0, #31, 47c <init_debug+0x60>
 534:	mov	w1, #0x1                   	// #1
 538:	mov	w19, w0
 53c:	bl	0 <fcntl>
 540:	tbnz	w0, #31, 558 <init_debug+0x13c>
 544:	orr	w2, w0, #0x1
 548:	mov	w1, #0x2                   	// #2
 54c:	mov	w0, w19
 550:	bl	0 <fcntl>
 554:	tbz	w0, #31, 47c <init_debug+0x60>
 558:	adrp	x20, 0 <setup_et_lock>
 55c:	add	x20, x20, #0x0
 560:	ldur	x19, [x20, #12]
 564:	bl	0 <__errno_location>
 568:	ldr	w0, [x0]
 56c:	bl	0 <strerror>
 570:	adrp	x1, 0 <setup_et_lock>
 574:	mov	x2, x0
 578:	add	x1, x1, #0x0
 57c:	mov	x0, x19
 580:	bl	0 <fprintf>
 584:	ldur	x0, [x20, #12]
 588:	bl	0 <fclose>
 58c:	mov	w8, #0x8000                	// #32768
 590:	stur	xzr, [x20, #12]
 594:	str	w8, [x20]
 598:	ldp	x20, x19, [sp, #32]
 59c:	ldr	x21, [sp, #16]
 5a0:	ldp	x29, x30, [sp], #48
 5a4:	ret

00000000000005a8 <remove_error_table>:
 5a8:	stp	x29, x30, [sp, #-48]!
 5ac:	stp	x22, x21, [sp, #16]
 5b0:	adrp	x21, 0 <setup_et_lock>
 5b4:	ldrb	w8, [x21]
 5b8:	stp	x20, x19, [sp, #32]
 5bc:	mov	x19, x0
 5c0:	mov	x29, sp
 5c4:	tbnz	w8, #0, 5e8 <remove_error_table+0x40>
 5c8:	adrp	x20, 0 <setup_et_lock>
 5cc:	add	x20, x20, #0x0
 5d0:	add	x0, x20, #0x18
 5d4:	mov	w2, #0x1                   	// #1
 5d8:	mov	w1, wzr
 5dc:	mov	w22, #0x1                   	// #1
 5e0:	bl	0 <sem_init>
 5e4:	strb	w22, [x20]
 5e8:	adrp	x0, 0 <setup_et_lock>
 5ec:	add	x0, x0, #0x0
 5f0:	bl	0 <sem_wait>
 5f4:	cbz	w0, 60c <remove_error_table+0x64>
 5f8:	mov	w0, #0x2                   	// #2
 5fc:	ldp	x20, x19, [sp, #32]
 600:	ldp	x22, x21, [sp, #16]
 604:	ldp	x29, x30, [sp], #48
 608:	ret
 60c:	adrp	x8, 8 <setup_et_lock+0x8>
 610:	ldr	x20, [x8]
 614:	bl	41c <init_debug>
 618:	cbz	x20, 6dc <remove_error_table+0x134>
 61c:	ldr	x9, [x20, #8]
 620:	ldr	x8, [x19, #8]
 624:	ldr	x9, [x9, #8]
 628:	cmp	x9, x8
 62c:	b.ne	638 <remove_error_table+0x90>  // b.any
 630:	mov	x10, xzr
 634:	b	65c <remove_error_table+0xb4>
 638:	mov	x9, x20
 63c:	ldr	x20, [x9]
 640:	cbz	x20, 6dc <remove_error_table+0x134>
 644:	ldr	x10, [x20, #8]
 648:	ldr	x10, [x10, #8]
 64c:	cmp	x10, x8
 650:	mov	x10, x9
 654:	mov	x9, x20
 658:	b.ne	63c <remove_error_table+0x94>  // b.any
 65c:	ldr	x8, [x20]
 660:	adrp	x9, 8 <setup_et_lock+0x8>
 664:	add	x9, x9, #0x0
 668:	cmp	x10, #0x0
 66c:	csel	x9, x9, x10, eq  // eq = none
 670:	mov	x0, x20
 674:	str	x8, [x9]
 678:	bl	0 <free>
 67c:	adrp	x8, 0 <setup_et_lock>
 680:	ldrb	w8, [x8]
 684:	tbz	w8, #0, 6b0 <remove_error_table+0x108>
 688:	adrp	x8, 0 <setup_et_lock>
 68c:	ldr	x0, [x19, #8]
 690:	ldr	x20, [x8]
 694:	bl	0 <error_table_name>
 698:	adrp	x1, 0 <setup_et_lock>
 69c:	mov	x2, x0
 6a0:	add	x1, x1, #0x0
 6a4:	mov	x0, x20
 6a8:	mov	x3, x19
 6ac:	bl	0 <fprintf>
 6b0:	ldrb	w8, [x21]
 6b4:	cmp	w8, #0x1
 6b8:	b.ne	6c8 <remove_error_table+0x120>  // b.any
 6bc:	adrp	x0, 0 <setup_et_lock>
 6c0:	add	x0, x0, #0x0
 6c4:	bl	0 <sem_post>
 6c8:	mov	x0, xzr
 6cc:	ldp	x20, x19, [sp, #32]
 6d0:	ldp	x22, x21, [sp, #16]
 6d4:	ldp	x29, x30, [sp], #48
 6d8:	ret
 6dc:	adrp	x8, 0 <setup_et_lock>
 6e0:	ldrb	w8, [x8]
 6e4:	tbz	w8, #0, 710 <remove_error_table+0x168>
 6e8:	adrp	x8, 0 <setup_et_lock>
 6ec:	ldr	x0, [x19, #8]
 6f0:	ldr	x20, [x8]
 6f4:	bl	0 <error_table_name>
 6f8:	adrp	x1, 0 <setup_et_lock>
 6fc:	mov	x2, x0
 700:	add	x1, x1, #0x0
 704:	mov	x0, x20
 708:	mov	x3, x19
 70c:	bl	0 <fprintf>
 710:	ldrb	w8, [x21]
 714:	cmp	w8, #0x1
 718:	b.ne	5f8 <remove_error_table+0x50>  // b.any
 71c:	adrp	x0, 0 <setup_et_lock>
 720:	add	x0, x0, #0x0
 724:	bl	0 <sem_post>
 728:	b	5f8 <remove_error_table+0x50>

000000000000072c <add_to_error_table>:
 72c:	ldr	x0, [x0, #8]
 730:	b	324 <add_error_table>

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	adrp	x8, 0 <error_table_name>
   4:	adrp	x9, 0 <error_table_name>
   8:	ubfx	x10, x0, #26, #6
   c:	add	x8, x8, #0x0
  10:	add	x9, x9, #0x0
  14:	cbz	w10, 24 <error_table_name+0x24>
  18:	add	x10, x10, x9
  1c:	ldurb	w10, [x10, #-1]
  20:	strb	w10, [x8], #1
  24:	ubfx	x10, x0, #20, #6
  28:	cbz	w10, 38 <error_table_name+0x38>
  2c:	add	x10, x10, x9
  30:	ldurb	w10, [x10, #-1]
  34:	strb	w10, [x8], #1
  38:	ubfx	x10, x0, #14, #6
  3c:	cbz	w10, 4c <error_table_name+0x4c>
  40:	add	x10, x10, x9
  44:	ldurb	w10, [x10, #-1]
  48:	strb	w10, [x8], #1
  4c:	ubfx	x10, x0, #8, #6
  50:	cbz	w10, 60 <error_table_name+0x60>
  54:	add	x9, x10, x9
  58:	ldurb	w9, [x9, #-1]
  5c:	strb	w9, [x8], #1
  60:	adrp	x0, 0 <error_table_name>
  64:	add	x0, x0, #0x0
  68:	strb	wzr, [x8]
  6c:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	mov	x21, x0
   c:	mov	w0, wzr
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	cbz	x21, 60 <init_error_table+0x60>
  1c:	mov	x20, x1
  20:	cbz	x1, 60 <init_error_table+0x60>
  24:	mov	w19, w2
  28:	cbz	w2, 60 <init_error_table+0x60>
  2c:	mov	w0, #0x28                  	// #40
  30:	bl	0 <malloc>
  34:	cbz	x0, 70 <init_error_table+0x70>
  38:	adrp	x10, 0 <_et_dynamic_list>
  3c:	ldr	x11, [x10]
  40:	mov	x8, x0
  44:	mov	x9, x8
  48:	mov	w0, wzr
  4c:	str	x21, [x9, #16]!
  50:	str	x20, [x8, #24]
  54:	str	w19, [x8, #32]
  58:	stp	x11, x9, [x8]
  5c:	str	x8, [x10]
  60:	ldp	x20, x19, [sp, #32]
  64:	ldr	x21, [sp, #16]
  68:	ldp	x29, x30, [sp], #48
  6c:	ret
  70:	mov	w0, #0xc                   	// #12
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	sub	sp, sp, #0x80
   4:	stp	x24, x23, [sp, #80]
   8:	adrp	x24, 0 <stderr>
   c:	ldr	x8, [x24]
  10:	mov	x23, x0
  14:	stp	x29, x30, [sp, #64]
  18:	stp	x22, x21, [sp, #96]
  1c:	mov	x0, x8
  20:	stp	x20, x19, [sp, #112]
  24:	add	x29, sp, #0x40
  28:	mov	x21, x3
  2c:	mov	x20, x2
  30:	mov	x22, x1
  34:	bl	0 <fileno>
  38:	mov	w19, w0
  3c:	cbnz	x23, 58 <default_com_err_proc+0x58>
  40:	cbnz	x22, 80 <default_com_err_proc+0x80>
  44:	cbnz	x20, a0 <default_com_err_proc+0xa0>
  48:	mov	w0, w19
  4c:	bl	0 <isatty>
  50:	cbnz	w0, c4 <default_com_err_proc+0xc4>
  54:	b	f0 <default_com_err_proc+0xf0>
  58:	ldr	x1, [x24]
  5c:	mov	x0, x23
  60:	bl	0 <fputs>
  64:	ldr	x3, [x24]
  68:	adrp	x0, 0 <default_com_err_proc>
  6c:	add	x0, x0, #0x0
  70:	mov	w1, #0x2                   	// #2
  74:	mov	w2, #0x1                   	// #1
  78:	bl	0 <fwrite>
  7c:	cbz	x22, 44 <default_com_err_proc+0x44>
  80:	mov	x0, x22
  84:	bl	0 <error_message>
  88:	ldr	x1, [x24]
  8c:	bl	0 <fputs>
  90:	ldr	x1, [x24]
  94:	mov	w0, #0x20                  	// #32
  98:	bl	0 <fputc>
  9c:	cbz	x20, 48 <default_com_err_proc+0x48>
  a0:	ldp	q1, q0, [x21]
  a4:	ldr	x0, [x24]
  a8:	mov	x2, sp
  ac:	mov	x1, x20
  b0:	stp	q1, q0, [sp]
  b4:	bl	0 <vfprintf>
  b8:	mov	w0, w19
  bc:	bl	0 <isatty>
  c0:	cbz	w0, f0 <default_com_err_proc+0xf0>
  c4:	mov	x1, sp
  c8:	mov	w0, w19
  cc:	bl	0 <tcgetattr>
  d0:	cbnz	w0, e4 <default_com_err_proc+0xe4>
  d4:	ldr	w8, [sp, #4]
  d8:	mov	w9, #0x5                   	// #5
  dc:	bics	wzr, w9, w8
  e0:	b.eq	f0 <default_com_err_proc+0xf0>  // b.none
  e4:	ldr	x1, [x24]
  e8:	mov	w0, #0xd                   	// #13
  ec:	bl	0 <fputc>
  f0:	ldr	x1, [x24]
  f4:	mov	w0, #0xa                   	// #10
  f8:	bl	0 <fputc>
  fc:	ldr	x0, [x24]
 100:	bl	0 <fflush>
 104:	ldp	x20, x19, [sp, #112]
 108:	ldp	x22, x21, [sp, #96]
 10c:	ldp	x24, x23, [sp, #80]
 110:	ldp	x29, x30, [sp, #64]
 114:	add	sp, sp, #0x80
 118:	ret

000000000000011c <com_err_va>:
 11c:	sub	sp, sp, #0x30
 120:	stp	x29, x30, [sp, #32]
 124:	adrp	x8, 0 <default_com_err_proc>
 128:	ldp	q0, q1, [x3]
 12c:	ldr	x8, [x8]
 130:	mov	x3, sp
 134:	add	x29, sp, #0x20
 138:	stp	q0, q1, [sp]
 13c:	blr	x8
 140:	ldp	x29, x30, [sp, #32]
 144:	add	sp, sp, #0x30
 148:	ret

000000000000014c <com_err>:
 14c:	sub	sp, sp, #0x100
 150:	adrp	x8, 0 <default_com_err_proc>
 154:	ldr	x9, [x8]
 158:	stp	x29, x30, [sp, #240]
 15c:	add	x29, sp, #0xf0
 160:	stp	x3, x4, [x29, #-104]
 164:	stp	x5, x6, [x29, #-88]
 168:	stur	x7, [x29, #-72]
 16c:	stp	q1, q2, [sp, #16]
 170:	str	q3, [sp, #48]
 174:	str	q0, [sp]
 178:	stp	q4, q5, [sp, #64]
 17c:	stp	q6, q7, [sp, #96]
 180:	cbnz	x9, 190 <com_err+0x44>
 184:	adrp	x9, 0 <default_com_err_proc>
 188:	add	x9, x9, #0x0
 18c:	str	x9, [x8]
 190:	mov	x9, #0xffffffffffffffd8    	// #-40
 194:	mov	x11, sp
 198:	sub	x12, x29, #0x68
 19c:	movk	x9, #0xff80, lsl #32
 1a0:	add	x10, x29, #0x10
 1a4:	add	x11, x11, #0x80
 1a8:	add	x12, x12, #0x28
 1ac:	stp	x11, x9, [x29, #-48]
 1b0:	stp	x10, x12, [x29, #-64]
 1b4:	ldp	q0, q1, [x29, #-64]
 1b8:	ldr	x8, [x8]
 1bc:	sub	x3, x29, #0x20
 1c0:	stp	q0, q1, [x29, #-32]
 1c4:	blr	x8
 1c8:	ldp	x29, x30, [sp, #240]
 1cc:	add	sp, sp, #0x100
 1d0:	ret

00000000000001d4 <set_com_err_hook>:
 1d4:	adrp	x9, 0 <default_com_err_proc>
 1d8:	ldr	x8, [x9]
 1dc:	adrp	x10, 0 <default_com_err_proc>
 1e0:	add	x10, x10, #0x0
 1e4:	cmp	x0, #0x0
 1e8:	csel	x10, x10, x0, eq  // eq = none
 1ec:	mov	x0, x8
 1f0:	str	x10, [x9]
 1f4:	ret

00000000000001f8 <reset_com_err_hook>:
 1f8:	adrp	x8, 0 <default_com_err_proc>
 1fc:	ldr	x0, [x8]
 200:	adrp	x9, 0 <default_com_err_proc>
 204:	add	x9, x9, #0x0
 208:	str	x9, [x8]
 20c:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbnz	x0, 10 <com_right+0x10>
   4:	ret
   8:	ldr	x0, [x0]
   c:	cbz	x0, 4 <com_right+0x4>
  10:	ldr	x8, [x0, #8]
  14:	ldr	x9, [x8, #8]
  18:	cmp	x9, x1
  1c:	b.gt	8 <com_right+0x8>
  20:	ldrsw	x10, [x8, #16]
  24:	add	x10, x9, x10
  28:	cmp	x10, x1
  2c:	b.le	8 <com_right+0x8>
  30:	ldr	x8, [x8]
  34:	sub	x9, x1, x9
  38:	ldr	x0, [x8, x9, lsl #3]
  3c:	ret

0000000000000040 <com_right_r>:
  40:	stp	x29, x30, [sp, #-32]!
  44:	stp	x20, x19, [sp, #16]
  48:	mov	x29, sp
  4c:	cbz	x0, b4 <com_right_r+0x74>
  50:	mov	x20, x3
  54:	mov	x19, x2
  58:	b	64 <com_right_r+0x24>
  5c:	ldr	x0, [x0]
  60:	cbz	x0, b4 <com_right_r+0x74>
  64:	ldr	x8, [x0, #8]
  68:	ldr	x9, [x8, #8]
  6c:	cmp	x9, x1
  70:	b.gt	5c <com_right_r+0x1c>
  74:	ldrsw	x10, [x8, #16]
  78:	add	x10, x9, x10
  7c:	cmp	x10, x1
  80:	b.le	5c <com_right_r+0x1c>
  84:	ldr	x8, [x8]
  88:	sub	x9, x1, x9
  8c:	mov	x0, x19
  90:	mov	x2, x20
  94:	ldr	x1, [x8, x9, lsl #3]
  98:	bl	0 <strncpy>
  9c:	add	x8, x20, x19
  a0:	sturb	wzr, [x8, #-1]
  a4:	mov	x0, x19
  a8:	ldp	x20, x19, [sp, #16]
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret
  b4:	mov	x19, xzr
  b8:	mov	x0, x19
  bc:	ldp	x20, x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret

00000000000000c8 <initialize_error_table_r>:
  c8:	stp	x29, x30, [sp, #-48]!
  cc:	stp	x22, x21, [sp, #16]
  d0:	stp	x20, x19, [sp, #32]
  d4:	ldr	x8, [x0]
  d8:	mov	x19, x3
  dc:	mov	w20, w2
  e0:	mov	x21, x0
  e4:	mov	x22, x1
  e8:	mov	x29, sp
  ec:	cbz	x8, 10c <initialize_error_table_r+0x44>
  f0:	mov	x21, x8
  f4:	ldr	x8, [x8, #8]
  f8:	ldr	x8, [x8]
  fc:	cmp	x8, x22
 100:	b.eq	130 <initialize_error_table_r+0x68>  // b.none
 104:	ldr	x8, [x21]
 108:	cbnz	x8, f0 <initialize_error_table_r+0x28>
 10c:	mov	w0, #0x28                  	// #40
 110:	bl	0 <malloc>
 114:	cbz	x0, 130 <initialize_error_table_r+0x68>
 118:	mov	x8, x0
 11c:	str	x22, [x8, #16]!
 120:	str	w20, [x0, #32]
 124:	str	x19, [x0, #24]
 128:	stp	xzr, x8, [x0]
 12c:	str	x0, [x21]
 130:	ldp	x20, x19, [sp, #32]
 134:	ldp	x22, x21, [sp, #16]
 138:	ldp	x29, x30, [sp], #48
 13c:	ret

0000000000000140 <free_error_table>:
 140:	stp	x29, x30, [sp, #-32]!
 144:	str	x19, [sp, #16]
 148:	mov	x29, sp
 14c:	cbz	x0, 160 <free_error_table+0x20>
 150:	ldr	x19, [x0]
 154:	bl	0 <free>
 158:	mov	x0, x19
 15c:	cbnz	x19, 150 <free_error_table+0x10>
 160:	ldr	x19, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret
