
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003058 <.init>:
    3058:	stp	x29, x30, [sp, #-16]!
    305c:	mov	x29, sp
    3060:	bl	3570 <pthread_cond_timedwait@plt+0x10>
    3064:	ldp	x29, x30, [sp], #16
    3068:	ret

Disassembly of section .plt:

0000000000003070 <memcpy@plt-0x20>:
    3070:	stp	x16, x30, [sp, #-16]!
    3074:	adrp	x16, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    3078:	ldr	x17, [x16, #4088]
    307c:	add	x16, x16, #0xff8
    3080:	br	x17
    3084:	nop
    3088:	nop
    308c:	nop

0000000000003090 <memcpy@plt>:
    3090:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16]
    3098:	add	x16, x16, #0x0
    309c:	br	x17

00000000000030a0 <lzma_index_iter_rewind@plt>:
    30a0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #8]
    30a8:	add	x16, x16, #0x8
    30ac:	br	x17

00000000000030b0 <memmove@plt>:
    30b0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #16]
    30b8:	add	x16, x16, #0x10
    30bc:	br	x17

00000000000030c0 <pthread_sigmask@plt>:
    30c0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #24]
    30c8:	add	x16, x16, #0x18
    30cc:	br	x17

00000000000030d0 <lzma_block_buffer_encode@plt>:
    30d0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #32]
    30d8:	add	x16, x16, #0x20
    30dc:	br	x17

00000000000030e0 <lzma_check_is_supported@plt>:
    30e0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #40]
    30e8:	add	x16, x16, #0x28
    30ec:	br	x17

00000000000030f0 <lzma_filter_flags_size@plt>:
    30f0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #48]
    30f8:	add	x16, x16, #0x30
    30fc:	br	x17

0000000000003100 <lzma_index_buffer_encode@plt>:
    3100:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #56]
    3108:	add	x16, x16, #0x38
    310c:	br	x17

0000000000003110 <lzma_stream_flags_compare@plt>:
    3110:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #64]
    3118:	add	x16, x16, #0x40
    311c:	br	x17

0000000000003120 <lzma_block_buffer_bound@plt>:
    3120:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #72]
    3128:	add	x16, x16, #0x48
    312c:	br	x17

0000000000003130 <lzma_index_hash_decode@plt>:
    3130:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #80]
    3138:	add	x16, x16, #0x50
    313c:	br	x17

0000000000003140 <__cxa_finalize@plt>:
    3140:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #88]
    3148:	add	x16, x16, #0x58
    314c:	br	x17

0000000000003150 <clock_gettime@plt>:
    3150:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #96]
    3158:	add	x16, x16, #0x60
    315c:	br	x17

0000000000003160 <lzma_block_header_size@plt>:
    3160:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #104]
    3168:	add	x16, x16, #0x68
    316c:	br	x17

0000000000003170 <sigfillset@plt>:
    3170:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #112]
    3178:	add	x16, x16, #0x70
    317c:	br	x17

0000000000003180 <lzma_index_memusage@plt>:
    3180:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #120]
    3188:	add	x16, x16, #0x78
    318c:	br	x17

0000000000003190 <lzma_block_unpadded_size@plt>:
    3190:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #128]
    3198:	add	x16, x16, #0x80
    319c:	br	x17

00000000000031a0 <malloc@plt>:
    31a0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #136]
    31a8:	add	x16, x16, #0x88
    31ac:	br	x17

00000000000031b0 <lzma_index_hash_append@plt>:
    31b0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #144]
    31b8:	add	x16, x16, #0x90
    31bc:	br	x17

00000000000031c0 <lzma_crc32@plt>:
    31c0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #152]
    31c8:	add	x16, x16, #0x98
    31cc:	br	x17

00000000000031d0 <lzma_index_checks@plt>:
    31d0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #160]
    31d8:	add	x16, x16, #0xa0
    31dc:	br	x17

00000000000031e0 <pthread_condattr_destroy@plt>:
    31e0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #168]
    31e8:	add	x16, x16, #0xa8
    31ec:	br	x17

00000000000031f0 <lzma_stream_buffer_encode@plt>:
    31f0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #176]
    31f8:	add	x16, x16, #0xb0
    31fc:	br	x17

0000000000003200 <pthread_cond_signal@plt>:
    3200:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #184]
    3208:	add	x16, x16, #0xb8
    320c:	br	x17

0000000000003210 <lzma_stream_footer_encode@plt>:
    3210:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #192]
    3218:	add	x16, x16, #0xc0
    321c:	br	x17

0000000000003220 <lzma_raw_encoder_memusage@plt>:
    3220:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #200]
    3228:	add	x16, x16, #0xc8
    322c:	br	x17

0000000000003230 <memset@plt>:
    3230:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #208]
    3238:	add	x16, x16, #0xd0
    323c:	br	x17

0000000000003240 <lzma_filters_copy@plt>:
    3240:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #216]
    3248:	add	x16, x16, #0xd8
    324c:	br	x17

0000000000003250 <lzma_properties_decode@plt>:
    3250:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #224]
    3258:	add	x16, x16, #0xe0
    325c:	br	x17

0000000000003260 <calloc@plt>:
    3260:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #232]
    3268:	add	x16, x16, #0xe8
    326c:	br	x17

0000000000003270 <lzma_check_size@plt>:
    3270:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #240]
    3278:	add	x16, x16, #0xf0
    327c:	br	x17

0000000000003280 <lzma_index_hash_init@plt>:
    3280:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #248]
    3288:	add	x16, x16, #0xf8
    328c:	br	x17

0000000000003290 <lzma_crc64@plt>:
    3290:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #256]
    3298:	add	x16, x16, #0x100
    329c:	br	x17

00000000000032a0 <pthread_mutex_init@plt>:
    32a0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #264]
    32a8:	add	x16, x16, #0x108
    32ac:	br	x17

00000000000032b0 <pthread_create@plt>:
    32b0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #272]
    32b8:	add	x16, x16, #0x110
    32bc:	br	x17

00000000000032c0 <__gmon_start__@plt>:
    32c0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #280]
    32c8:	add	x16, x16, #0x118
    32cc:	br	x17

00000000000032d0 <pthread_join@plt>:
    32d0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #288]
    32d8:	add	x16, x16, #0x120
    32dc:	br	x17

00000000000032e0 <lzma_raw_decoder_memusage@plt>:
    32e0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #296]
    32e8:	add	x16, x16, #0x128
    32ec:	br	x17

00000000000032f0 <sched_getaffinity@plt>:
    32f0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #304]
    32f8:	add	x16, x16, #0x130
    32fc:	br	x17

0000000000003300 <lzma_index_append@plt>:
    3300:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #312]
    3308:	add	x16, x16, #0x138
    330c:	br	x17

0000000000003310 <lzma_index_hash_end@plt>:
    3310:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #320]
    3318:	add	x16, x16, #0x140
    331c:	br	x17

0000000000003320 <lzma_end@plt>:
    3320:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #328]
    3328:	add	x16, x16, #0x148
    332c:	br	x17

0000000000003330 <memcmp@plt>:
    3330:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #336]
    3338:	add	x16, x16, #0x150
    333c:	br	x17

0000000000003340 <lzma_block_header_decode@plt>:
    3340:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #344]
    3348:	add	x16, x16, #0x158
    334c:	br	x17

0000000000003350 <lzma_filter_flags_encode@plt>:
    3350:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #352]
    3358:	add	x16, x16, #0x160
    335c:	br	x17

0000000000003360 <lzma_index_file_size@plt>:
    3360:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #360]
    3368:	add	x16, x16, #0x168
    336c:	br	x17

0000000000003370 <lzma_properties_size@plt>:
    3370:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #368]
    3378:	add	x16, x16, #0x170
    337c:	br	x17

0000000000003380 <free@plt>:
    3380:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #376]
    3388:	add	x16, x16, #0x178
    338c:	br	x17

0000000000003390 <lzma_stream_header_encode@plt>:
    3390:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #384]
    3398:	add	x16, x16, #0x180
    339c:	br	x17

00000000000033a0 <pthread_cond_wait@plt>:
    33a0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #392]
    33a8:	add	x16, x16, #0x188
    33ac:	br	x17

00000000000033b0 <lzma_index_init@plt>:
    33b0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #400]
    33b8:	add	x16, x16, #0x190
    33bc:	br	x17

00000000000033c0 <lzma_vli_decode@plt>:
    33c0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #408]
    33c8:	add	x16, x16, #0x198
    33cc:	br	x17

00000000000033d0 <pthread_condattr_init@plt>:
    33d0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #416]
    33d8:	add	x16, x16, #0x1a0
    33dc:	br	x17

00000000000033e0 <lzma_index_end@plt>:
    33e0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #424]
    33e8:	add	x16, x16, #0x1a8
    33ec:	br	x17

00000000000033f0 <__sched_cpucount@plt>:
    33f0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #432]
    33f8:	add	x16, x16, #0x1b0
    33fc:	br	x17

0000000000003400 <lzma_properties_encode@plt>:
    3400:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #440]
    3408:	add	x16, x16, #0x1b8
    340c:	br	x17

0000000000003410 <pthread_mutex_destroy@plt>:
    3410:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #448]
    3418:	add	x16, x16, #0x1c0
    341c:	br	x17

0000000000003420 <pthread_cond_init@plt>:
    3420:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #456]
    3428:	add	x16, x16, #0x1c8
    342c:	br	x17

0000000000003430 <lzma_stream_footer_decode@plt>:
    3430:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #464]
    3438:	add	x16, x16, #0x1d0
    343c:	br	x17

0000000000003440 <lzma_lzma_preset@plt>:
    3440:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #472]
    3448:	add	x16, x16, #0x1d8
    344c:	br	x17

0000000000003450 <lzma_vli_encode@plt>:
    3450:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #480]
    3458:	add	x16, x16, #0x1e0
    345c:	br	x17

0000000000003460 <lzma_index_iter_next@plt>:
    3460:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #488]
    3468:	add	x16, x16, #0x1e8
    346c:	br	x17

0000000000003470 <sysconf@plt>:
    3470:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #496]
    3478:	add	x16, x16, #0x1f0
    347c:	br	x17

0000000000003480 <lzma_vli_size@plt>:
    3480:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #504]
    3488:	add	x16, x16, #0x1f8
    348c:	br	x17

0000000000003490 <pthread_condattr_setclock@plt>:
    3490:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #512]
    3498:	add	x16, x16, #0x200
    349c:	br	x17

00000000000034a0 <lzma_stream_encoder@plt>:
    34a0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #520]
    34a8:	add	x16, x16, #0x208
    34ac:	br	x17

00000000000034b0 <lzma_index_iter_init@plt>:
    34b0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #528]
    34b8:	add	x16, x16, #0x210
    34bc:	br	x17

00000000000034c0 <lzma_block_uncomp_encode@plt>:
    34c0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #536]
    34c8:	add	x16, x16, #0x218
    34cc:	br	x17

00000000000034d0 <lzma_index_hash_size@plt>:
    34d0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #544]
    34d8:	add	x16, x16, #0x220
    34dc:	br	x17

00000000000034e0 <lzma_index_block_count@plt>:
    34e0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #552]
    34e8:	add	x16, x16, #0x228
    34ec:	br	x17

00000000000034f0 <lzma_stream_header_decode@plt>:
    34f0:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #560]
    34f8:	add	x16, x16, #0x230
    34fc:	br	x17

0000000000003500 <lzma_filter_flags_decode@plt>:
    3500:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #568]
    3508:	add	x16, x16, #0x238
    350c:	br	x17

0000000000003510 <lzma_index_size@plt>:
    3510:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #576]
    3518:	add	x16, x16, #0x240
    351c:	br	x17

0000000000003520 <pthread_cond_destroy@plt>:
    3520:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3524:	ldr	x17, [x16, #584]
    3528:	add	x16, x16, #0x248
    352c:	br	x17

0000000000003530 <pthread_mutex_lock@plt>:
    3530:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3534:	ldr	x17, [x16, #592]
    3538:	add	x16, x16, #0x250
    353c:	br	x17

0000000000003540 <lzma_block_header_encode@plt>:
    3540:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3544:	ldr	x17, [x16, #600]
    3548:	add	x16, x16, #0x258
    354c:	br	x17

0000000000003550 <pthread_mutex_unlock@plt>:
    3550:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3554:	ldr	x17, [x16, #608]
    3558:	add	x16, x16, #0x260
    355c:	br	x17

0000000000003560 <pthread_cond_timedwait@plt>:
    3560:	adrp	x16, 34000 <memcpy@GLIBC_2.17>
    3564:	ldr	x17, [x16, #616]
    3568:	add	x16, x16, #0x268
    356c:	br	x17

Disassembly of section .text:

0000000000003570 <lzma_version_number@@XZ_5.0-0x168>:
    3570:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    3574:	ldr	x0, [x0, #3968]
    3578:	cbz	x0, 3580 <pthread_cond_timedwait@plt+0x20>
    357c:	b	32c0 <__gmon_start__@plt>
    3580:	ret
    3584:	nop
    3588:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    358c:	add	x0, x0, #0x278
    3590:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    3594:	add	x1, x1, #0x278
    3598:	cmp	x1, x0
    359c:	b.eq	35b4 <pthread_cond_timedwait@plt+0x54>  // b.none
    35a0:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    35a4:	ldr	x1, [x1, #3904]
    35a8:	cbz	x1, 35b4 <pthread_cond_timedwait@plt+0x54>
    35ac:	mov	x16, x1
    35b0:	br	x16
    35b4:	ret
    35b8:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    35bc:	add	x0, x0, #0x278
    35c0:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    35c4:	add	x1, x1, #0x278
    35c8:	sub	x1, x1, x0
    35cc:	lsr	x2, x1, #63
    35d0:	add	x1, x2, x1, asr #3
    35d4:	cmp	xzr, x1, asr #1
    35d8:	asr	x1, x1, #1
    35dc:	b.eq	35f4 <pthread_cond_timedwait@plt+0x94>  // b.none
    35e0:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    35e4:	ldr	x2, [x2, #4040]
    35e8:	cbz	x2, 35f4 <pthread_cond_timedwait@plt+0x94>
    35ec:	mov	x16, x2
    35f0:	br	x16
    35f4:	ret
    35f8:	stp	x29, x30, [sp, #-32]!
    35fc:	mov	x29, sp
    3600:	str	x19, [sp, #16]
    3604:	adrp	x19, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    3608:	ldrb	w0, [x19, #632]
    360c:	cbnz	w0, 3634 <pthread_cond_timedwait@plt+0xd4>
    3610:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    3614:	ldr	x0, [x0, #3920]
    3618:	cbz	x0, 3628 <pthread_cond_timedwait@plt+0xc8>
    361c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22c00>
    3620:	ldr	x0, [x0, #624]
    3624:	bl	3140 <__cxa_finalize@plt>
    3628:	bl	3588 <pthread_cond_timedwait@plt+0x28>
    362c:	mov	w0, #0x1                   	// #1
    3630:	strb	w0, [x19, #632]
    3634:	ldr	x19, [sp, #16]
    3638:	ldp	x29, x30, [sp], #32
    363c:	ret
    3640:	b	35b8 <pthread_cond_timedwait@plt+0x58>
    3644:	nop
    3648:	stp	x29, x30, [sp, #-32]!
    364c:	mov	w0, #0x1e                  	// #30
    3650:	mov	x29, sp
    3654:	str	x19, [sp, #16]
    3658:	bl	3470 <sysconf@plt>
    365c:	mov	x19, x0
    3660:	mov	w0, #0x55                  	// #85
    3664:	bl	3470 <sysconf@plt>
    3668:	cmn	x19, #0x1
    366c:	ccmn	x0, #0x1, #0x4, ne  // ne = any
    3670:	mul	x0, x19, x0
    3674:	ldr	x19, [sp, #16]
    3678:	csel	x0, x0, xzr, ne  // ne = any
    367c:	ldp	x29, x30, [sp], #32
    3680:	ret
    3684:	nop
    3688:	stp	x29, x30, [sp, #-160]!
    368c:	mov	x1, #0x80                  	// #128
    3690:	mov	w0, #0x0                   	// #0
    3694:	mov	x29, sp
    3698:	str	x19, [sp, #16]
    369c:	add	x19, sp, #0x20
    36a0:	mov	x2, x19
    36a4:	bl	32f0 <sched_getaffinity@plt>
    36a8:	mov	w1, w0
    36ac:	mov	w0, #0x0                   	// #0
    36b0:	cbz	w1, 36c0 <pthread_cond_timedwait@plt+0x160>
    36b4:	ldr	x19, [sp, #16]
    36b8:	ldp	x29, x30, [sp], #160
    36bc:	ret
    36c0:	mov	x1, x19
    36c4:	mov	x0, #0x80                  	// #128
    36c8:	bl	33f0 <__sched_cpucount@plt>
    36cc:	ldr	x19, [sp, #16]
    36d0:	ldp	x29, x30, [sp], #160
    36d4:	ret

00000000000036d8 <lzma_version_number@@XZ_5.0>:
    36d8:	mov	w0, #0x3eca                	// #16074
    36dc:	movk	w0, #0x2fb, lsl #16
    36e0:	ret
    36e4:	nop

00000000000036e8 <lzma_version_string@@XZ_5.0>:
    36e8:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    36ec:	add	x0, x0, #0x7d0
    36f0:	ret
    36f4:	nop
    36f8:	cmp	x0, #0x0
    36fc:	mov	x3, x1
    3700:	mov	x1, #0x1                   	// #1
    3704:	csel	x2, x0, x1, ne  // ne = any
    3708:	cbz	x3, 3720 <lzma_version_string@@XZ_5.0+0x38>
    370c:	ldr	x4, [x3]
    3710:	cbz	x4, 3720 <lzma_version_string@@XZ_5.0+0x38>
    3714:	ldr	x0, [x3, #16]
    3718:	mov	x16, x4
    371c:	br	x16
    3720:	mov	x0, x2
    3724:	b	31a0 <malloc@plt>
    3728:	stp	x29, x30, [sp, #-32]!
    372c:	cmp	x0, #0x0
    3730:	mov	x2, x1
    3734:	mov	x29, sp
    3738:	stp	x19, x20, [sp, #16]
    373c:	mov	x1, #0x1                   	// #1
    3740:	csel	x19, x0, x1, ne  // ne = any
    3744:	cbz	x2, 3780 <lzma_version_string@@XZ_5.0+0x98>
    3748:	ldr	x3, [x2]
    374c:	cbz	x3, 3780 <lzma_version_string@@XZ_5.0+0x98>
    3750:	ldr	x0, [x2, #16]
    3754:	mov	x2, x19
    3758:	blr	x3
    375c:	mov	x20, x0
    3760:	cbz	x0, 3770 <lzma_version_string@@XZ_5.0+0x88>
    3764:	mov	x2, x19
    3768:	mov	w1, #0x0                   	// #0
    376c:	bl	3230 <memset@plt>
    3770:	mov	x0, x20
    3774:	ldp	x19, x20, [sp, #16]
    3778:	ldp	x29, x30, [sp], #32
    377c:	ret
    3780:	mov	x1, x19
    3784:	mov	x0, #0x1                   	// #1
    3788:	ldp	x19, x20, [sp, #16]
    378c:	ldp	x29, x30, [sp], #32
    3790:	b	3260 <calloc@plt>
    3794:	nop
    3798:	mov	x2, x1
    379c:	mov	x1, x0
    37a0:	cbz	x2, 37b8 <lzma_version_string@@XZ_5.0+0xd0>
    37a4:	ldr	x3, [x2, #8]
    37a8:	cbz	x3, 37b8 <lzma_version_string@@XZ_5.0+0xd0>
    37ac:	ldr	x0, [x2, #16]
    37b0:	mov	x16, x3
    37b4:	br	x16
    37b8:	mov	x0, x1
    37bc:	b	3380 <free@plt>
    37c0:	stp	x29, x30, [sp, #-32]!
    37c4:	mov	x29, sp
    37c8:	ldr	x2, [x0, #32]
    37cc:	str	x19, [sp, #16]
    37d0:	mov	x19, x0
    37d4:	ldr	x0, [x0]
    37d8:	cbz	x2, 3804 <lzma_version_string@@XZ_5.0+0x11c>
    37dc:	blr	x2
    37e0:	mov	x0, #0xffffffffffffffff    	// #-1
    37e4:	stp	xzr, x0, [x19]
    37e8:	stp	xzr, xzr, [x19, #16]
    37ec:	stp	xzr, xzr, [x19, #32]
    37f0:	stp	xzr, xzr, [x19, #48]
    37f4:	str	xzr, [x19, #64]
    37f8:	ldr	x19, [sp, #16]
    37fc:	ldp	x29, x30, [sp], #32
    3800:	ret
    3804:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    3808:	b	37e0 <lzma_version_string@@XZ_5.0+0xf8>
    380c:	nop
    3810:	stp	x29, x30, [sp, #-64]!
    3814:	mov	x29, sp
    3818:	stp	x19, x20, [sp, #16]
    381c:	stp	x21, x22, [sp, #32]
    3820:	mov	x22, x4
    3824:	ldr	x20, [x4]
    3828:	str	x23, [sp, #48]
    382c:	ldr	x21, [x1]
    3830:	sub	x19, x5, x20
    3834:	mov	x23, x1
    3838:	sub	x2, x2, x21
    383c:	add	x1, x0, x21
    3840:	cmp	x2, x19
    3844:	add	x0, x3, x20
    3848:	csel	x19, x2, x19, ls  // ls = plast
    384c:	mov	x2, x19
    3850:	add	x20, x20, x19
    3854:	bl	3090 <memcpy@plt>
    3858:	add	x21, x21, x19
    385c:	mov	x0, x19
    3860:	str	x20, [x22]
    3864:	ldp	x19, x20, [sp, #16]
    3868:	str	x21, [x23]
    386c:	ldp	x21, x22, [sp, #32]
    3870:	ldr	x23, [sp, #48]
    3874:	ldp	x29, x30, [sp], #64
    3878:	ret
    387c:	nop
    3880:	stp	x29, x30, [sp, #-48]!
    3884:	mov	x29, sp
    3888:	stp	x19, x20, [sp, #16]
    388c:	mov	x20, x2
    3890:	mov	x19, x0
    3894:	ldr	x2, [x0, #16]
    3898:	ldr	x3, [x20, #8]
    389c:	str	x21, [sp, #32]
    38a0:	cmp	x2, #0x0
    38a4:	mov	x21, x1
    38a8:	ccmp	x3, x2, #0x4, ne  // ne = any
    38ac:	b.ne	38dc <lzma_version_string@@XZ_5.0+0x1f4>  // b.any
    38b0:	ldr	x0, [x20]
    38b4:	stp	x0, x3, [x19, #8]
    38b8:	cbz	x3, 38f0 <lzma_version_string@@XZ_5.0+0x208>
    38bc:	mov	x2, x20
    38c0:	mov	x1, x21
    38c4:	mov	x0, x19
    38c8:	mov	x16, x3
    38cc:	ldp	x19, x20, [sp, #16]
    38d0:	ldr	x21, [sp, #32]
    38d4:	ldp	x29, x30, [sp], #48
    38d8:	br	x16
    38dc:	bl	37c0 <lzma_version_string@@XZ_5.0+0xd8>
    38e0:	ldr	x3, [x20, #8]
    38e4:	ldr	x0, [x20]
    38e8:	stp	x0, x3, [x19, #8]
    38ec:	cbnz	x3, 38bc <lzma_version_string@@XZ_5.0+0x1d4>
    38f0:	mov	w0, #0x0                   	// #0
    38f4:	ldp	x19, x20, [sp, #16]
    38f8:	ldr	x21, [sp, #32]
    38fc:	ldp	x29, x30, [sp], #48
    3900:	ret
    3904:	nop
    3908:	mov	x4, x0
    390c:	mov	x3, x2
    3910:	ldr	x0, [x2]
    3914:	ldr	x2, [x4, #8]
    3918:	cmp	x0, x2
    391c:	b.ne	393c <lzma_version_string@@XZ_5.0+0x254>  // b.any
    3920:	cmn	x0, #0x1
    3924:	b.eq	3944 <lzma_version_string@@XZ_5.0+0x25c>  // b.none
    3928:	ldr	x0, [x4]
    392c:	mov	x2, #0x0                   	// #0
    3930:	ldr	x4, [x4, #64]
    3934:	mov	x16, x4
    3938:	br	x16
    393c:	mov	w0, #0xb                   	// #11
    3940:	ret
    3944:	mov	w0, #0x0                   	// #0
    3948:	ret
    394c:	nop
    3950:	ldr	x2, [x0, #16]
    3954:	cbz	x2, 395c <lzma_version_string@@XZ_5.0+0x274>
    3958:	b	37c0 <lzma_version_string@@XZ_5.0+0xd8>
    395c:	ret
    3960:	cbz	x0, 39dc <lzma_version_string@@XZ_5.0+0x2f4>
    3964:	stp	x29, x30, [sp, #-32]!
    3968:	mov	x29, sp
    396c:	ldr	x1, [x0, #56]
    3970:	str	x19, [sp, #16]
    3974:	mov	x19, x0
    3978:	cbz	x1, 39a8 <lzma_version_string@@XZ_5.0+0x2c0>
    397c:	str	wzr, [x1, #88]
    3980:	mov	w0, #0x0                   	// #0
    3984:	strb	wzr, [x1, #92]
    3988:	ldr	x1, [x19, #56]
    398c:	str	wzr, [x1, #72]
    3990:	strb	wzr, [x1, #93]
    3994:	str	xzr, [x19, #16]
    3998:	str	xzr, [x19, #40]
    399c:	ldr	x19, [sp, #16]
    39a0:	ldp	x29, x30, [sp], #32
    39a4:	ret
    39a8:	ldr	x1, [x19, #48]
    39ac:	mov	x0, #0x60                  	// #96
    39b0:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    39b4:	str	x0, [x19, #56]
    39b8:	mov	x1, x0
    39bc:	cbz	x0, 39e4 <lzma_version_string@@XZ_5.0+0x2fc>
    39c0:	mov	x0, #0xffffffffffffffff    	// #-1
    39c4:	stp	xzr, x0, [x1]
    39c8:	stp	xzr, xzr, [x1, #16]
    39cc:	stp	xzr, xzr, [x1, #32]
    39d0:	stp	xzr, xzr, [x1, #48]
    39d4:	str	xzr, [x1, #64]
    39d8:	b	397c <lzma_version_string@@XZ_5.0+0x294>
    39dc:	mov	w0, #0xb                   	// #11
    39e0:	ret
    39e4:	mov	w0, #0x5                   	// #5
    39e8:	b	399c <lzma_version_string@@XZ_5.0+0x2b4>
    39ec:	nop

00000000000039f0 <lzma_code@@XZ_5.0>:
    39f0:	sub	sp, sp, #0x40
    39f4:	mov	w3, w1
    39f8:	stp	x29, x30, [sp, #16]
    39fc:	add	x29, sp, #0x10
    3a00:	ldr	x2, [x0]
    3a04:	str	x19, [sp, #32]
    3a08:	mov	x19, x0
    3a0c:	cbz	x2, 3b68 <lzma_code@@XZ_5.0+0x178>
    3a10:	ldr	x5, [x19, #24]
    3a14:	cbz	x5, 3b7c <lzma_code@@XZ_5.0+0x18c>
    3a18:	ldr	x6, [x19, #56]
    3a1c:	cbz	x6, 3b8c <lzma_code@@XZ_5.0+0x19c>
    3a20:	ldr	x8, [x6, #24]
    3a24:	mov	w0, #0xb                   	// #11
    3a28:	cmp	x8, #0x0
    3a2c:	ccmp	w3, #0x4, #0x2, ne  // ne = any
    3a30:	b.hi	3b58 <lzma_code@@XZ_5.0+0x168>  // b.pmore
    3a34:	add	x1, x6, w3, uxtw
    3a38:	ldrb	w1, [x1, #88]
    3a3c:	cbz	w1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a40:	ldr	x1, [x19, #64]
    3a44:	mov	w0, #0x8                   	// #8
    3a48:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a4c:	ldr	x1, [x19, #72]
    3a50:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a54:	ldr	x1, [x19, #80]
    3a58:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a5c:	ldr	x1, [x19, #88]
    3a60:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a64:	ldr	x1, [x19, #96]
    3a68:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a6c:	ldr	x1, [x19, #104]
    3a70:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a74:	ldr	x1, [x19, #112]
    3a78:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a7c:	ldr	x1, [x19, #120]
    3a80:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a84:	ldr	x1, [x19, #128]
    3a88:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3a8c:	ldr	w0, [x6, #72]
    3a90:	cmp	w0, #0x3
    3a94:	b.eq	3c08 <lzma_code@@XZ_5.0+0x218>  // b.none
    3a98:	b.hi	3bc4 <lzma_code@@XZ_5.0+0x1d4>  // b.pmore
    3a9c:	cmp	w0, #0x1
    3aa0:	b.eq	3bf8 <lzma_code@@XZ_5.0+0x208>  // b.none
    3aa4:	cmp	w0, #0x2
    3aa8:	b.ne	3b94 <lzma_code@@XZ_5.0+0x1a4>  // b.any
    3aac:	cmp	w3, #0x2
    3ab0:	mov	w0, #0xb                   	// #11
    3ab4:	b.ne	3b58 <lzma_code@@XZ_5.0+0x168>  // b.any
    3ab8:	ldr	x4, [x19, #8]
    3abc:	ldr	x1, [x6, #80]
    3ac0:	cmp	x1, x4
    3ac4:	b.ne	3b58 <lzma_code@@XZ_5.0+0x168>  // b.any
    3ac8:	ldr	x0, [x6]
    3acc:	stp	xzr, xzr, [sp, #48]
    3ad0:	add	x6, sp, #0x38
    3ad4:	ldr	x7, [x19, #32]
    3ad8:	ldr	x1, [x19, #48]
    3adc:	str	w3, [sp]
    3ae0:	add	x3, sp, #0x30
    3ae4:	blr	x8
    3ae8:	cmp	w0, #0x4
    3aec:	ldp	x8, x1, [x19]
    3af0:	ldp	x7, x6, [x19, #16]
    3af4:	ldp	x5, x4, [x19, #32]
    3af8:	ldp	x2, x3, [sp, #48]
    3afc:	ldr	x9, [x19, #56]
    3b00:	sub	x1, x1, x2
    3b04:	add	x8, x8, x2
    3b08:	add	x7, x7, x2
    3b0c:	add	x6, x6, x3
    3b10:	sub	x5, x5, x3
    3b14:	add	x4, x4, x3
    3b18:	stp	x8, x1, [x19]
    3b1c:	stp	x7, x6, [x19, #16]
    3b20:	stp	x5, x4, [x19, #32]
    3b24:	str	x1, [x9, #80]
    3b28:	b.hi	3bdc <lzma_code@@XZ_5.0+0x1ec>  // b.pmore
    3b2c:	cmp	w0, #0x1
    3b30:	b.hi	3b54 <lzma_code@@XZ_5.0+0x164>  // b.pmore
    3b34:	cbz	w0, 3c34 <lzma_code@@XZ_5.0+0x244>
    3b38:	ldr	w2, [x9, #72]
    3b3c:	mov	w1, #0x5                   	// #5
    3b40:	sub	w3, w2, #0x1
    3b44:	cmp	w3, #0x1
    3b48:	ccmp	w2, #0x4, #0x4, hi  // hi = pmore
    3b4c:	csel	w1, wzr, w1, eq  // eq = none
    3b50:	str	w1, [x9, #72]
    3b54:	strb	wzr, [x9, #93]
    3b58:	ldp	x29, x30, [sp, #16]
    3b5c:	ldr	x19, [sp, #32]
    3b60:	add	sp, sp, #0x40
    3b64:	ret
    3b68:	ldr	x1, [x19, #8]
    3b6c:	mov	w0, #0xb                   	// #11
    3b70:	cbnz	x1, 3b58 <lzma_code@@XZ_5.0+0x168>
    3b74:	ldr	x5, [x19, #24]
    3b78:	cbnz	x5, 3a18 <lzma_code@@XZ_5.0+0x28>
    3b7c:	ldr	x1, [x19, #32]
    3b80:	mov	w0, #0xb                   	// #11
    3b84:	cbz	x1, 3a18 <lzma_code@@XZ_5.0+0x28>
    3b88:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3b8c:	mov	w0, #0xb                   	// #11
    3b90:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3b94:	cbnz	w0, 3b8c <lzma_code@@XZ_5.0+0x19c>
    3b98:	cmp	w3, #0x3
    3b9c:	ldr	x4, [x19, #8]
    3ba0:	b.eq	3bbc <lzma_code@@XZ_5.0+0x1cc>  // b.none
    3ba4:	cmp	w3, #0x4
    3ba8:	b.eq	3bbc <lzma_code@@XZ_5.0+0x1cc>  // b.none
    3bac:	cmp	w3, #0x1
    3bb0:	b.eq	3c50 <lzma_code@@XZ_5.0+0x260>  // b.none
    3bb4:	cmp	w3, #0x2
    3bb8:	b.ne	3ac8 <lzma_code@@XZ_5.0+0xd8>  // b.any
    3bbc:	str	w3, [x6, #72]
    3bc0:	b	3ac8 <lzma_code@@XZ_5.0+0xd8>
    3bc4:	cmp	w0, #0x4
    3bc8:	b.eq	3c18 <lzma_code@@XZ_5.0+0x228>  // b.none
    3bcc:	cmp	w0, #0x5
    3bd0:	mov	w0, #0xb                   	// #11
    3bd4:	csinc	w0, w0, wzr, ne  // ne = any
    3bd8:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3bdc:	cmp	w0, #0x6
    3be0:	b.eq	3b54 <lzma_code@@XZ_5.0+0x164>  // b.none
    3be4:	cmp	w0, #0x20
    3be8:	b.ne	3c28 <lzma_code@@XZ_5.0+0x238>  // b.any
    3bec:	mov	w0, #0x0                   	// #0
    3bf0:	strb	wzr, [x9, #93]
    3bf4:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3bf8:	cmp	w3, #0x1
    3bfc:	mov	w0, #0xb                   	// #11
    3c00:	b.eq	3ab8 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3c04:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c08:	cmp	w3, #0x3
    3c0c:	mov	w0, #0xb                   	// #11
    3c10:	b.eq	3ab8 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3c14:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c18:	cmp	w3, #0x4
    3c1c:	mov	w0, #0xb                   	// #11
    3c20:	b.eq	3ab8 <lzma_code@@XZ_5.0+0xc8>  // b.none
    3c24:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c28:	mov	w1, #0x6                   	// #6
    3c2c:	str	w1, [x9, #72]
    3c30:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c34:	orr	x2, x2, x3
    3c38:	cbnz	x2, 3b54 <lzma_code@@XZ_5.0+0x164>
    3c3c:	ldrb	w1, [x9, #93]
    3c40:	cbnz	w1, 3c5c <lzma_code@@XZ_5.0+0x26c>
    3c44:	mov	w1, #0x1                   	// #1
    3c48:	strb	w1, [x9, #93]
    3c4c:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c50:	mov	w0, #0x1                   	// #1
    3c54:	str	w0, [x6, #72]
    3c58:	b	3ac8 <lzma_code@@XZ_5.0+0xd8>
    3c5c:	mov	w0, #0xa                   	// #10
    3c60:	b	3b58 <lzma_code@@XZ_5.0+0x168>
    3c64:	nop

0000000000003c68 <lzma_end@@XZ_5.0>:
    3c68:	cbz	x0, 3cac <lzma_end@@XZ_5.0+0x44>
    3c6c:	stp	x29, x30, [sp, #-32]!
    3c70:	mov	x29, sp
    3c74:	str	x19, [sp, #16]
    3c78:	mov	x19, x0
    3c7c:	ldr	x0, [x0, #56]
    3c80:	cbz	x0, 3ca0 <lzma_end@@XZ_5.0+0x38>
    3c84:	ldr	x2, [x0, #16]
    3c88:	ldr	x1, [x19, #48]
    3c8c:	cbz	x2, 3c98 <lzma_end@@XZ_5.0+0x30>
    3c90:	bl	37c0 <lzma_version_string@@XZ_5.0+0xd8>
    3c94:	ldp	x1, x0, [x19, #48]
    3c98:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    3c9c:	str	xzr, [x19, #56]
    3ca0:	ldr	x19, [sp, #16]
    3ca4:	ldp	x29, x30, [sp], #32
    3ca8:	ret
    3cac:	ret

0000000000003cb0 <lzma_get_progress@@XZ_5.2>:
    3cb0:	ldr	x6, [x0, #56]
    3cb4:	mov	x4, x1
    3cb8:	ldr	x5, [x6, #40]
    3cbc:	cbz	x5, 3ccc <lzma_get_progress@@XZ_5.2+0x1c>
    3cc0:	ldr	x0, [x6]
    3cc4:	mov	x16, x5
    3cc8:	br	x16
    3ccc:	ldr	x1, [x0, #16]
    3cd0:	str	x1, [x4]
    3cd4:	ldr	x0, [x0, #40]
    3cd8:	str	x0, [x2]
    3cdc:	ret

0000000000003ce0 <lzma_get_check@@XZ_5.0>:
    3ce0:	ldr	x0, [x0, #56]
    3ce4:	ldr	x1, [x0, #48]
    3ce8:	cbz	x1, 3cf8 <lzma_get_check@@XZ_5.0+0x18>
    3cec:	ldr	x0, [x0]
    3cf0:	mov	x16, x1
    3cf4:	br	x16
    3cf8:	mov	w0, #0x0                   	// #0
    3cfc:	ret

0000000000003d00 <lzma_memusage@@XZ_5.0>:
    3d00:	cbz	x0, 3d4c <lzma_memusage@@XZ_5.0+0x4c>
    3d04:	ldr	x0, [x0, #56]
    3d08:	cbz	x0, 3d4c <lzma_memusage@@XZ_5.0+0x4c>
    3d0c:	ldr	x4, [x0, #56]
    3d10:	cbz	x4, 3d4c <lzma_memusage@@XZ_5.0+0x4c>
    3d14:	stp	x29, x30, [sp, #-32]!
    3d18:	mov	x3, #0x0                   	// #0
    3d1c:	mov	x29, sp
    3d20:	ldr	x0, [x0]
    3d24:	add	x2, sp, #0x18
    3d28:	add	x1, sp, #0x10
    3d2c:	blr	x4
    3d30:	cbnz	w0, 3d40 <lzma_memusage@@XZ_5.0+0x40>
    3d34:	ldr	x0, [sp, #16]
    3d38:	ldp	x29, x30, [sp], #32
    3d3c:	ret
    3d40:	mov	x0, #0x0                   	// #0
    3d44:	ldp	x29, x30, [sp], #32
    3d48:	ret
    3d4c:	mov	x0, #0x0                   	// #0
    3d50:	ret
    3d54:	nop

0000000000003d58 <lzma_memlimit_get@@XZ_5.0>:
    3d58:	cbz	x0, 3da4 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3d5c:	ldr	x0, [x0, #56]
    3d60:	cbz	x0, 3da4 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3d64:	ldr	x4, [x0, #56]
    3d68:	cbz	x4, 3da4 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3d6c:	stp	x29, x30, [sp, #-32]!
    3d70:	mov	x3, #0x0                   	// #0
    3d74:	mov	x29, sp
    3d78:	ldr	x0, [x0]
    3d7c:	add	x2, sp, #0x10
    3d80:	add	x1, sp, #0x18
    3d84:	blr	x4
    3d88:	cbnz	w0, 3d98 <lzma_memlimit_get@@XZ_5.0+0x40>
    3d8c:	ldr	x0, [sp, #16]
    3d90:	ldp	x29, x30, [sp], #32
    3d94:	ret
    3d98:	mov	x0, #0x0                   	// #0
    3d9c:	ldp	x29, x30, [sp], #32
    3da0:	ret
    3da4:	mov	x0, #0x0                   	// #0
    3da8:	ret
    3dac:	nop

0000000000003db0 <lzma_memlimit_set@@XZ_5.0>:
    3db0:	cbz	x0, 3dec <lzma_memlimit_set@@XZ_5.0+0x3c>
    3db4:	ldr	x0, [x0, #56]
    3db8:	cbz	x0, 3dec <lzma_memlimit_set@@XZ_5.0+0x3c>
    3dbc:	ldr	x4, [x0, #56]
    3dc0:	cbz	x4, 3dec <lzma_memlimit_set@@XZ_5.0+0x3c>
    3dc4:	stp	x29, x30, [sp, #-32]!
    3dc8:	cmp	x1, #0x0
    3dcc:	csinc	x3, x1, xzr, ne  // ne = any
    3dd0:	mov	x29, sp
    3dd4:	ldr	x0, [x0]
    3dd8:	add	x2, sp, #0x10
    3ddc:	add	x1, sp, #0x18
    3de0:	blr	x4
    3de4:	ldp	x29, x30, [sp], #32
    3de8:	ret
    3dec:	mov	w0, #0xb                   	// #11
    3df0:	ret
    3df4:	nop

0000000000003df8 <lzma_block_unpadded_size@@XZ_5.0>:
    3df8:	cbz	x0, 3e9c <lzma_block_unpadded_size@@XZ_5.0+0xa4>
    3dfc:	mov	x1, x0
    3e00:	mov	x0, #0x0                   	// #0
    3e04:	ldr	w2, [x1]
    3e08:	cmp	w2, #0x1
    3e0c:	b.hi	3e38 <lzma_block_unpadded_size@@XZ_5.0+0x40>  // b.pmore
    3e10:	stp	x29, x30, [sp, #-32]!
    3e14:	mov	x29, sp
    3e18:	str	x19, [sp, #16]
    3e1c:	ldr	w19, [x1, #4]
    3e20:	sub	w2, w19, #0x8
    3e24:	cmp	w2, #0x3f8
    3e28:	b.ls	3e3c <lzma_block_unpadded_size@@XZ_5.0+0x44>  // b.plast
    3e2c:	ldr	x19, [sp, #16]
    3e30:	ldp	x29, x30, [sp], #32
    3e34:	ret
    3e38:	ret
    3e3c:	tst	x19, #0x3
    3e40:	b.ne	3e2c <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.any
    3e44:	ldr	x0, [x1, #16]
    3e48:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    3e4c:	mov	x3, #0x7ffffffffffffffe    	// #9223372036854775806
    3e50:	cmp	x0, #0x0
    3e54:	add	x2, x0, x2
    3e58:	ccmp	x2, x3, #0x0, ne  // ne = any
    3e5c:	b.hi	3e68 <lzma_block_unpadded_size@@XZ_5.0+0x70>  // b.pmore
    3e60:	mov	x0, #0x0                   	// #0
    3e64:	b	3e2c <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3e68:	ldr	w1, [x1, #8]
    3e6c:	cmp	w1, #0xf
    3e70:	b.hi	3e60 <lzma_block_unpadded_size@@XZ_5.0+0x68>  // b.pmore
    3e74:	cmn	x0, #0x1
    3e78:	b.eq	3e2c <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.none
    3e7c:	add	x19, x0, w19, uxtw
    3e80:	mov	w0, w1
    3e84:	bl	3270 <lzma_check_size@plt>
    3e88:	add	x0, x19, w0, uxtw
    3e8c:	mov	x1, #0x7ffffffffffffffc    	// #9223372036854775804
    3e90:	cmp	x0, x1
    3e94:	csel	x0, x0, xzr, ls  // ls = plast
    3e98:	b	3e2c <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3e9c:	mov	x0, #0x0                   	// #0
    3ea0:	ret
    3ea4:	nop

0000000000003ea8 <lzma_block_compressed_size@@XZ_5.0>:
    3ea8:	stp	x29, x30, [sp, #-32]!
    3eac:	mov	x29, sp
    3eb0:	stp	x19, x20, [sp, #16]
    3eb4:	mov	x19, x1
    3eb8:	mov	x20, x0
    3ebc:	bl	3190 <lzma_block_unpadded_size@plt>
    3ec0:	cbz	x0, 3f0c <lzma_block_compressed_size@@XZ_5.0+0x64>
    3ec4:	ldr	w0, [x20, #8]
    3ec8:	bl	3270 <lzma_check_size@plt>
    3ecc:	mov	w1, w0
    3ed0:	ldr	w2, [x20, #4]
    3ed4:	mov	w0, #0x9                   	// #9
    3ed8:	add	w1, w1, w2
    3edc:	cmp	x1, x19
    3ee0:	b.cs	3f00 <lzma_block_compressed_size@@XZ_5.0+0x58>  // b.hs, b.nlast
    3ee4:	ldr	x2, [x20, #16]
    3ee8:	sub	x19, x19, x1
    3eec:	cmp	x2, x19
    3ef0:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    3ef4:	b.ne	3f00 <lzma_block_compressed_size@@XZ_5.0+0x58>  // b.any
    3ef8:	mov	w0, #0x0                   	// #0
    3efc:	str	x19, [x20, #16]
    3f00:	ldp	x19, x20, [sp, #16]
    3f04:	ldp	x29, x30, [sp], #32
    3f08:	ret
    3f0c:	mov	w0, #0xb                   	// #11
    3f10:	ldp	x19, x20, [sp, #16]
    3f14:	ldp	x29, x30, [sp], #32
    3f18:	ret
    3f1c:	nop

0000000000003f20 <lzma_block_total_size@@XZ_5.0>:
    3f20:	stp	x29, x30, [sp, #-16]!
    3f24:	mov	x29, sp
    3f28:	bl	3190 <lzma_block_unpadded_size@plt>
    3f2c:	add	x1, x0, #0x3
    3f30:	cmn	x0, #0x1
    3f34:	and	x1, x1, #0xfffffffffffffffc
    3f38:	csel	x0, x1, x0, ne  // ne = any
    3f3c:	ldp	x29, x30, [sp], #16
    3f40:	ret
    3f44:	nop
    3f48:	stp	x29, x30, [sp, #-32]!
    3f4c:	mov	x29, sp
    3f50:	stp	x19, x20, [sp, #16]
    3f54:	add	x20, x0, #0x50
    3f58:	mov	x19, x0
    3f5c:	mov	x0, x20
    3f60:	bl	3440 <lzma_lzma_preset@plt>
    3f64:	tst	w0, #0xff
    3f68:	b.ne	3f8c <lzma_block_total_size@@XZ_5.0+0x6c>  // b.any
    3f6c:	mov	x2, #0x21                  	// #33
    3f70:	mov	x1, #0xffffffffffffffff    	// #-1
    3f74:	stp	x2, x20, [x19]
    3f78:	mov	w0, #0x0                   	// #0
    3f7c:	str	x1, [x19, #16]
    3f80:	ldp	x19, x20, [sp, #16]
    3f84:	ldp	x29, x30, [sp], #32
    3f88:	ret
    3f8c:	mov	w0, #0x1                   	// #1
    3f90:	ldp	x19, x20, [sp, #16]
    3f94:	ldp	x29, x30, [sp], #32
    3f98:	ret
    3f9c:	nop
    3fa0:	ldr	x5, [x0]
    3fa4:	adrp	x7, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    3fa8:	mov	x10, #0x1                   	// #1
    3fac:	add	x11, x7, #0x7d8
    3fb0:	mov	x6, #0x0                   	// #0
    3fb4:	mov	w8, #0x1                   	// #1
    3fb8:	mov	x9, #0x0                   	// #0
    3fbc:	movk	x10, #0x4000, lsl #48
    3fc0:	cmp	x5, x10
    3fc4:	b.eq	3ffc <lzma_block_total_size@@XZ_5.0+0xdc>  // b.none
    3fc8:	add	x3, x7, #0x7d8
    3fcc:	mov	x2, #0x21                  	// #33
    3fd0:	mov	x4, #0x0                   	// #0
    3fd4:	b	3fdc <lzma_block_total_size@@XZ_5.0+0xbc>
    3fd8:	ldr	x2, [x3, #24]
    3fdc:	add	x4, x4, #0x1
    3fe0:	cmp	x5, x2
    3fe4:	b.eq	4000 <lzma_block_total_size@@XZ_5.0+0xe0>  // b.none
    3fe8:	add	x3, x3, #0x18
    3fec:	cmn	x2, #0x1
    3ff0:	b.ne	3fd8 <lzma_block_total_size@@XZ_5.0+0xb8>  // b.any
    3ff4:	mov	w0, #0x8                   	// #8
    3ff8:	ret
    3ffc:	mov	x4, #0x0                   	// #0
    4000:	cbz	w8, 3ff4 <lzma_block_total_size@@XZ_5.0+0xd4>
    4004:	add	x6, x6, #0x1
    4008:	add	x4, x4, x4, lsl #1
    400c:	lsl	x2, x6, #4
    4010:	add	x4, x11, x4, lsl #3
    4014:	ldr	x5, [x0, x2]
    4018:	ldrb	w2, [x4, #18]
    401c:	ldrb	w8, [x4, #16]
    4020:	cmn	x5, #0x1
    4024:	add	x9, x9, x2
    4028:	b.ne	3fc0 <lzma_block_total_size@@XZ_5.0+0xa0>  // b.any
    402c:	ldrb	w2, [x4, #17]
    4030:	cmp	x9, #0x3
    4034:	ccmp	x6, #0x4, #0x2, ls  // ls = plast
    4038:	mov	w0, #0x8                   	// #8
    403c:	eor	w3, w2, #0x1
    4040:	cset	w2, hi  // hi = pmore
    4044:	orr	w2, w2, w3
    4048:	tst	w2, #0xff
    404c:	b.ne	3ff8 <lzma_block_total_size@@XZ_5.0+0xd8>  // b.any
    4050:	mov	w0, #0x0                   	// #0
    4054:	str	x6, [x1]
    4058:	ret
    405c:	nop

0000000000004060 <lzma_filters_copy@@XZ_5.0>:
    4060:	stp	x29, x30, [sp, #-112]!
    4064:	cmp	x0, #0x0
    4068:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    406c:	mov	x29, sp
    4070:	stp	x23, x24, [sp, #48]
    4074:	mov	w23, #0xb                   	// #11
    4078:	b.eq	4128 <lzma_filters_copy@@XZ_5.0+0xc8>  // b.none
    407c:	stp	x25, x26, [sp, #64]
    4080:	mov	x25, x0
    4084:	mov	x24, x0
    4088:	stp	x19, x20, [sp, #16]
    408c:	mov	x19, #0x0                   	// #0
    4090:	mov	x20, #0x0                   	// #0
    4094:	ldr	x0, [x25], #8
    4098:	stp	x21, x22, [sp, #32]
    409c:	mov	x22, x1
    40a0:	cmn	x0, #0x1
    40a4:	b.eq	41bc <lzma_filters_copy@@XZ_5.0+0x15c>  // b.none
    40a8:	adrp	x26, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    40ac:	mov	x21, x2
    40b0:	add	x23, x26, #0x7d8
    40b4:	stp	x27, x28, [sp, #80]
    40b8:	mov	x28, #0x1                   	// #1
    40bc:	add	x27, x1, #0x8
    40c0:	movk	x28, #0x4000, lsl #48
    40c4:	ldr	x1, [x25, x20]
    40c8:	str	x0, [x22, x20]
    40cc:	cbnz	x1, 4138 <lzma_filters_copy@@XZ_5.0+0xd8>
    40d0:	str	xzr, [x27, x20]
    40d4:	add	x20, x20, #0x10
    40d8:	add	x19, x19, #0x1
    40dc:	ldr	x0, [x24, x20]
    40e0:	cmn	x0, #0x1
    40e4:	b.eq	41b4 <lzma_filters_copy@@XZ_5.0+0x154>  // b.none
    40e8:	cmp	x20, #0x40
    40ec:	b.ne	40c4 <lzma_filters_copy@@XZ_5.0+0x64>  // b.any
    40f0:	mov	w23, #0x8                   	// #8
    40f4:	mov	x19, #0x3                   	// #3
    40f8:	add	x19, x22, x19, lsl #4
    40fc:	ldr	x0, [x19, #8]
    4100:	mov	x1, x21
    4104:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    4108:	str	xzr, [x19, #8]
    410c:	cmp	x22, x19
    4110:	sub	x19, x19, #0x10
    4114:	b.ne	40fc <lzma_filters_copy@@XZ_5.0+0x9c>  // b.any
    4118:	ldp	x19, x20, [sp, #16]
    411c:	ldp	x21, x22, [sp, #32]
    4120:	ldp	x25, x26, [sp, #64]
    4124:	ldp	x27, x28, [sp, #80]
    4128:	mov	w0, w23
    412c:	ldp	x23, x24, [sp, #48]
    4130:	ldp	x29, x30, [sp], #112
    4134:	ret
    4138:	ldr	x1, [x24, x20]
    413c:	cmp	x1, x28
    4140:	b.eq	41d8 <lzma_filters_copy@@XZ_5.0+0x178>  // b.none
    4144:	add	x4, x26, #0x7d8
    4148:	mov	x3, #0x21                  	// #33
    414c:	mov	x5, #0x0                   	// #0
    4150:	b	4158 <lzma_filters_copy@@XZ_5.0+0xf8>
    4154:	ldr	x3, [x4, #24]
    4158:	add	x5, x5, #0x1
    415c:	cmp	x1, x3
    4160:	b.eq	4180 <lzma_filters_copy@@XZ_5.0+0x120>  // b.none
    4164:	add	x4, x4, #0x18
    4168:	cmn	x3, #0x1
    416c:	b.ne	4154 <lzma_filters_copy@@XZ_5.0+0xf4>  // b.any
    4170:	mov	w23, #0x8                   	// #8
    4174:	cbz	x19, 4118 <lzma_filters_copy@@XZ_5.0+0xb8>
    4178:	sub	x19, x19, #0x1
    417c:	b	40f8 <lzma_filters_copy@@XZ_5.0+0x98>
    4180:	add	x5, x5, x5, lsl #1
    4184:	add	x5, x23, x5, lsl #3
    4188:	ldr	x2, [x5, #8]
    418c:	mov	x1, x21
    4190:	mov	x0, x2
    4194:	str	x2, [sp, #104]
    4198:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    419c:	str	x0, [x27, x20]
    41a0:	cbz	x0, 41e0 <lzma_filters_copy@@XZ_5.0+0x180>
    41a4:	ldr	x1, [x25, x20]
    41a8:	ldr	x2, [sp, #104]
    41ac:	bl	3090 <memcpy@plt>
    41b0:	b	40d4 <lzma_filters_copy@@XZ_5.0+0x74>
    41b4:	ldp	x27, x28, [sp, #80]
    41b8:	add	x22, x22, x20
    41bc:	mov	x0, #0xffffffffffffffff    	// #-1
    41c0:	mov	w23, #0x0                   	// #0
    41c4:	ldp	x19, x20, [sp, #16]
    41c8:	ldp	x25, x26, [sp, #64]
    41cc:	stp	x0, xzr, [x22]
    41d0:	ldp	x21, x22, [sp, #32]
    41d4:	b	4128 <lzma_filters_copy@@XZ_5.0+0xc8>
    41d8:	mov	x2, #0x70                  	// #112
    41dc:	b	418c <lzma_filters_copy@@XZ_5.0+0x12c>
    41e0:	mov	w23, #0x5                   	// #5
    41e4:	b	4174 <lzma_filters_copy@@XZ_5.0+0x114>
    41e8:	stp	x29, x30, [sp, #-224]!
    41ec:	mov	x29, sp
    41f0:	stp	x19, x20, [sp, #16]
    41f4:	cbz	x2, 43ac <lzma_filters_copy@@XZ_5.0+0x34c>
    41f8:	stp	x21, x22, [sp, #32]
    41fc:	mov	x22, x0
    4200:	mov	x19, x2
    4204:	ldr	x0, [x2]
    4208:	cmn	x0, #0x1
    420c:	b.eq	4394 <lzma_filters_copy@@XZ_5.0+0x334>  // b.none
    4210:	and	w12, w4, #0xff
    4214:	mov	x21, x3
    4218:	mov	x0, x2
    421c:	stp	x23, x24, [sp, #48]
    4220:	mov	x23, x1
    4224:	add	x1, sp, #0x60
    4228:	bl	3fa0 <lzma_block_total_size@@XZ_5.0+0x80>
    422c:	mov	w20, w0
    4230:	cbnz	w0, 4330 <lzma_filters_copy@@XZ_5.0+0x2d0>
    4234:	stp	x25, x26, [sp, #64]
    4238:	ldr	x20, [sp, #96]
    423c:	cbz	w12, 42d8 <lzma_filters_copy@@XZ_5.0+0x278>
    4240:	add	x25, sp, #0x68
    4244:	add	x3, sp, #0x70
    4248:	cbz	x20, 434c <lzma_filters_copy@@XZ_5.0+0x2ec>
    424c:	add	x24, sp, #0x70
    4250:	add	x26, sp, #0x78
    4254:	stp	x27, x28, [sp, #80]
    4258:	add	x28, sp, #0x68
    425c:	mov	x27, #0x0                   	// #0
    4260:	b	4294 <lzma_filters_copy@@XZ_5.0+0x234>
    4264:	ldr	x0, [x0, #8]
    4268:	mov	x3, x24
    426c:	cbz	x0, 42b4 <lzma_filters_copy@@XZ_5.0+0x254>
    4270:	str	x0, [x24, x2, lsl #3]
    4274:	add	x19, x19, #0x10
    4278:	ldur	x0, [x19, #-16]
    427c:	str	x0, [x28, x2, lsl #3]
    4280:	ldur	x0, [x19, #-8]
    4284:	str	x0, [x26, x2, lsl #3]
    4288:	ldr	x20, [sp, #96]
    428c:	cmp	x20, x27
    4290:	b.ls	4348 <lzma_filters_copy@@XZ_5.0+0x2e8>  // b.plast
    4294:	ldr	x0, [x19]
    4298:	mvn	x2, x27
    429c:	add	x20, x2, x20
    42a0:	add	x27, x27, #0x1
    42a4:	mov	x25, x28
    42a8:	blr	x21
    42ac:	add	x2, x20, x20, lsl #1
    42b0:	cbnz	x0, 4264 <lzma_filters_copy@@XZ_5.0+0x204>
    42b4:	ldp	x27, x28, [sp, #80]
    42b8:	mov	w20, #0x8                   	// #8
    42bc:	ldp	x21, x22, [sp, #32]
    42c0:	ldp	x23, x24, [sp, #48]
    42c4:	ldp	x25, x26, [sp, #64]
    42c8:	mov	w0, w20
    42cc:	ldp	x19, x20, [sp, #16]
    42d0:	ldp	x29, x30, [sp], #224
    42d4:	ret
    42d8:	add	x25, sp, #0x68
    42dc:	mov	x26, #0x0                   	// #0
    42e0:	mov	x24, x25
    42e4:	cbnz	x20, 431c <lzma_filters_copy@@XZ_5.0+0x2bc>
    42e8:	b	43c0 <lzma_filters_copy@@XZ_5.0+0x360>
    42ec:	ldr	x0, [x0, #8]
    42f0:	cbz	x0, 42b8 <lzma_filters_copy@@XZ_5.0+0x258>
    42f4:	str	x0, [x24, #8]
    42f8:	add	x19, x19, #0x10
    42fc:	ldur	x0, [x19, #-16]
    4300:	str	x0, [x24]
    4304:	ldur	x0, [x19, #-8]
    4308:	str	x0, [x24, #16]
    430c:	ldr	x20, [sp, #96]
    4310:	add	x24, x24, #0x18
    4314:	cmp	x20, x26
    4318:	b.ls	43c0 <lzma_filters_copy@@XZ_5.0+0x360>  // b.plast
    431c:	ldr	x0, [x19]
    4320:	add	x26, x26, #0x1
    4324:	blr	x21
    4328:	cbnz	x0, 42ec <lzma_filters_copy@@XZ_5.0+0x28c>
    432c:	b	42b8 <lzma_filters_copy@@XZ_5.0+0x258>
    4330:	mov	w0, w20
    4334:	ldp	x19, x20, [sp, #16]
    4338:	ldp	x21, x22, [sp, #32]
    433c:	ldp	x23, x24, [sp, #48]
    4340:	ldp	x29, x30, [sp], #224
    4344:	ret
    4348:	ldp	x27, x28, [sp, #80]
    434c:	add	x20, x20, x20, lsl #1
    4350:	mov	x4, #0xffffffffffffffff    	// #-1
    4354:	mov	x2, x25
    4358:	lsl	x20, x20, #3
    435c:	mov	x1, x23
    4360:	mov	x0, x22
    4364:	str	xzr, [x3, x20]
    4368:	str	x4, [x25, x20]
    436c:	bl	3880 <lzma_version_string@@XZ_5.0+0x198>
    4370:	mov	w20, w0
    4374:	cbnz	w0, 43c8 <lzma_filters_copy@@XZ_5.0+0x368>
    4378:	mov	w0, w20
    437c:	ldp	x19, x20, [sp, #16]
    4380:	ldp	x21, x22, [sp, #32]
    4384:	ldp	x23, x24, [sp, #48]
    4388:	ldp	x25, x26, [sp, #64]
    438c:	ldp	x29, x30, [sp], #224
    4390:	ret
    4394:	mov	w20, #0xb                   	// #11
    4398:	mov	w0, w20
    439c:	ldp	x19, x20, [sp, #16]
    43a0:	ldp	x21, x22, [sp, #32]
    43a4:	ldp	x29, x30, [sp], #224
    43a8:	ret
    43ac:	mov	w20, #0xb                   	// #11
    43b0:	mov	w0, w20
    43b4:	ldp	x19, x20, [sp, #16]
    43b8:	ldp	x29, x30, [sp], #224
    43bc:	ret
    43c0:	add	x3, sp, #0x70
    43c4:	b	434c <lzma_filters_copy@@XZ_5.0+0x2ec>
    43c8:	mov	x1, x23
    43cc:	mov	x0, x22
    43d0:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    43d4:	ldp	x21, x22, [sp, #32]
    43d8:	ldp	x23, x24, [sp, #48]
    43dc:	ldp	x25, x26, [sp, #64]
    43e0:	b	42c8 <lzma_filters_copy@@XZ_5.0+0x268>
    43e4:	nop
    43e8:	cbz	x1, 44ac <lzma_filters_copy@@XZ_5.0+0x44c>
    43ec:	stp	x29, x30, [sp, #-64]!
    43f0:	mov	x29, sp
    43f4:	stp	x19, x20, [sp, #16]
    43f8:	mov	x20, x0
    43fc:	mov	x19, x1
    4400:	ldr	x0, [x1]
    4404:	cmn	x0, #0x1
    4408:	b.eq	449c <lzma_filters_copy@@XZ_5.0+0x43c>  // b.none
    440c:	add	x1, sp, #0x38
    4410:	mov	x0, x19
    4414:	bl	3fa0 <lzma_block_total_size@@XZ_5.0+0x80>
    4418:	cbnz	w0, 449c <lzma_filters_copy@@XZ_5.0+0x43c>
    441c:	ldr	x0, [x19], #8
    4420:	str	x21, [sp, #32]
    4424:	mov	x21, #0x0                   	// #0
    4428:	b	4450 <lzma_filters_copy@@XZ_5.0+0x3f0>
    442c:	ldr	x0, [x19]
    4430:	blr	x1
    4434:	add	x21, x21, x0
    4438:	cmn	x0, #0x1
    443c:	b.eq	4488 <lzma_filters_copy@@XZ_5.0+0x428>  // b.none
    4440:	ldr	x0, [x19, #8]
    4444:	add	x19, x19, #0x10
    4448:	cmn	x0, #0x1
    444c:	b.eq	4474 <lzma_filters_copy@@XZ_5.0+0x414>  // b.none
    4450:	blr	x20
    4454:	cbz	x0, 4488 <lzma_filters_copy@@XZ_5.0+0x428>
    4458:	ldr	x1, [x0, #16]
    445c:	cbnz	x1, 442c <lzma_filters_copy@@XZ_5.0+0x3cc>
    4460:	ldr	x0, [x19, #8]
    4464:	add	x19, x19, #0x10
    4468:	add	x21, x21, #0x400
    446c:	cmn	x0, #0x1
    4470:	b.ne	4450 <lzma_filters_copy@@XZ_5.0+0x3f0>  // b.any
    4474:	add	x0, x21, #0x8, lsl #12
    4478:	ldp	x19, x20, [sp, #16]
    447c:	ldr	x21, [sp, #32]
    4480:	ldp	x29, x30, [sp], #64
    4484:	ret
    4488:	mov	x0, #0xffffffffffffffff    	// #-1
    448c:	ldp	x19, x20, [sp, #16]
    4490:	ldr	x21, [sp, #32]
    4494:	ldp	x29, x30, [sp], #64
    4498:	ret
    449c:	mov	x0, #0xffffffffffffffff    	// #-1
    44a0:	ldp	x19, x20, [sp, #16]
    44a4:	ldp	x29, x30, [sp], #64
    44a8:	ret
    44ac:	mov	x0, #0xffffffffffffffff    	// #-1
    44b0:	ret
    44b4:	nop

00000000000044b8 <lzma_physmem@@XZ_5.0>:
    44b8:	b	3648 <pthread_cond_timedwait@plt+0xe8>
    44bc:	nop
    44c0:	stp	x29, x30, [sp, #-48]!
    44c4:	mov	x29, sp
    44c8:	stp	x19, x20, [sp, #16]
    44cc:	mov	x19, x0
    44d0:	mov	x20, x2
    44d4:	ldr	x0, [x0, #24]
    44d8:	str	x21, [sp, #32]
    44dc:	mov	x21, x1
    44e0:	cbz	x0, 44e8 <lzma_physmem@@XZ_5.0+0x30>
    44e4:	bl	44c0 <lzma_physmem@@XZ_5.0+0x8>
    44e8:	ldr	x0, [x19, #32]
    44ec:	cbz	x0, 44fc <lzma_physmem@@XZ_5.0+0x44>
    44f0:	mov	x2, x20
    44f4:	mov	x1, x21
    44f8:	bl	44c0 <lzma_physmem@@XZ_5.0+0x8>
    44fc:	mov	x1, x21
    4500:	mov	x0, x19
    4504:	mov	x16, x20
    4508:	ldp	x19, x20, [sp, #16]
    450c:	ldr	x21, [sp, #32]
    4510:	ldp	x29, x30, [sp], #48
    4514:	br	x16
    4518:	stp	x29, x30, [sp, #-32]!
    451c:	mov	x29, sp
    4520:	stp	x19, x20, [sp, #16]
    4524:	mov	x19, x0
    4528:	mov	x20, x1
    452c:	ldr	x0, [x0, #56]
    4530:	cbz	x0, 4540 <lzma_physmem@@XZ_5.0+0x88>
    4534:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    4538:	ldr	x2, [x2, #3992]
    453c:	bl	44c0 <lzma_physmem@@XZ_5.0+0x8>
    4540:	mov	x1, x20
    4544:	mov	x0, x19
    4548:	ldp	x19, x20, [sp, #16]
    454c:	ldp	x29, x30, [sp], #32
    4550:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    4554:	nop
    4558:	stp	x29, x30, [sp, #-16]!
    455c:	mov	x1, x0
    4560:	mov	x0, #0x50                  	// #80
    4564:	mov	x29, sp
    4568:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    456c:	cbz	x0, 4590 <lzma_physmem@@XZ_5.0+0xd8>
    4570:	mov	x1, #0x200                 	// #512
    4574:	stp	xzr, xzr, [x0]
    4578:	str	xzr, [x0, #16]
    457c:	str	wzr, [x0, #24]
    4580:	stp	xzr, xzr, [x0, #32]
    4584:	stp	xzr, xzr, [x0, #48]
    4588:	str	x1, [x0, #64]
    458c:	str	wzr, [x0, #72]
    4590:	ldp	x29, x30, [sp], #16
    4594:	ret
    4598:	stp	x29, x30, [sp, #-48]!
    459c:	mov	x29, sp
    45a0:	stp	x19, x20, [sp, #16]
    45a4:	mov	w20, w2
    45a8:	mov	x19, x3
    45ac:	stp	x21, x22, [sp, #32]
    45b0:	mov	x21, x0
    45b4:	mov	x22, x1
    45b8:	mov	x0, #0xa8                  	// #168
    45bc:	mov	x1, x4
    45c0:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    45c4:	cbz	x0, 45f4 <lzma_physmem@@XZ_5.0+0x13c>
    45c8:	mov	w2, #0xffffffff            	// #-1
    45cc:	stp	x22, x21, [x0]
    45d0:	stp	xzr, xzr, [x0, #16]
    45d4:	str	xzr, [x0, #32]
    45d8:	str	w20, [x0, #40]
    45dc:	stp	x19, xzr, [x0, #48]
    45e0:	stp	xzr, xzr, [x0, #64]
    45e4:	str	wzr, [x0, #80]
    45e8:	stp	xzr, xzr, [x0, #88]
    45ec:	str	w2, [x0, #104]
    45f0:	str	xzr, [x0, #160]
    45f4:	ldp	x19, x20, [sp, #16]
    45f8:	ldp	x21, x22, [sp, #32]
    45fc:	ldp	x29, x30, [sp], #48
    4600:	ret
    4604:	nop
    4608:	sub	sp, sp, #0x10
    460c:	mov	x3, x1
    4610:	ldr	x2, [x0, #16]
    4614:	str	x1, [sp, #8]
    4618:	ldr	x4, [x0]
    461c:	str	x2, [x1, #16]
    4620:	ldr	w1, [x0, #24]
    4624:	stp	xzr, xzr, [x3, #24]
    4628:	add	w1, w1, #0x1
    462c:	str	w1, [x0, #24]
    4630:	cbz	x4, 46a8 <lzma_physmem@@XZ_5.0+0x1f0>
    4634:	clz	w4, w1
    4638:	str	x3, [x2, #32]
    463c:	eor	w4, w4, #0x1f
    4640:	str	x3, [x0, #16]
    4644:	mov	w3, #0x1                   	// #1
    4648:	lsl	w4, w3, w4
    464c:	cmp	w1, w4
    4650:	b.eq	4698 <lzma_physmem@@XZ_5.0+0x1e0>  // b.none
    4654:	rbit	w1, w1
    4658:	clz	w1, w1
    465c:	add	w1, w1, #0x2
    4660:	mov	x3, x2
    4664:	subs	w1, w1, #0x1
    4668:	ldr	x2, [x2, #16]
    466c:	b.ne	4660 <lzma_physmem@@XZ_5.0+0x1a8>  // b.any
    4670:	ldr	x1, [x3, #32]
    4674:	cbz	x2, 46a0 <lzma_physmem@@XZ_5.0+0x1e8>
    4678:	str	x1, [x2, #32]
    467c:	ldr	x0, [x1, #24]
    4680:	str	x2, [x1, #16]
    4684:	str	x0, [x3, #32]
    4688:	cbz	x0, 4690 <lzma_physmem@@XZ_5.0+0x1d8>
    468c:	str	x3, [x0, #16]
    4690:	str	x3, [x1, #24]
    4694:	str	x1, [x3, #16]
    4698:	add	sp, sp, #0x10
    469c:	ret
    46a0:	str	x1, [x0]
    46a4:	b	467c <lzma_physmem@@XZ_5.0+0x1c4>
    46a8:	stp	x3, x3, [x0]
    46ac:	str	x3, [x0, #16]
    46b0:	add	sp, sp, #0x10
    46b4:	ret
    46b8:	stp	x29, x30, [sp, #-48]!
    46bc:	mov	x29, sp
    46c0:	stp	x19, x20, [sp, #16]
    46c4:	mov	x20, x0
    46c8:	str	x21, [sp, #32]
    46cc:	mov	x21, x1
    46d0:	mov	x19, x21
    46d4:	mov	x0, x20
    46d8:	ldp	x1, x21, [x21, #24]
    46dc:	cbz	x1, 46e4 <lzma_physmem@@XZ_5.0+0x22c>
    46e0:	bl	46b8 <lzma_physmem@@XZ_5.0+0x200>
    46e4:	ldp	x2, x0, [x19]
    46e8:	mov	x1, x19
    46ec:	ldr	x3, [x20]
    46f0:	ldr	w4, [x20, #24]
    46f4:	add	x2, x2, x3
    46f8:	ldr	x3, [x20, #8]
    46fc:	str	x2, [x19]
    4700:	ldr	x2, [x20, #16]
    4704:	add	x0, x0, x3
    4708:	ldr	x3, [x19, #48]
    470c:	str	x0, [x19, #8]
    4710:	ldr	x0, [x20, #32]
    4714:	add	x3, x3, x2
    4718:	ldr	w2, [x19, #40]
    471c:	str	x3, [x19, #48]
    4720:	add	w2, w2, w4
    4724:	str	w2, [x19, #40]
    4728:	bl	4608 <lzma_physmem@@XZ_5.0+0x150>
    472c:	cbnz	x21, 46d0 <lzma_physmem@@XZ_5.0+0x218>
    4730:	ldp	x19, x20, [sp, #16]
    4734:	ldr	x21, [sp, #32]
    4738:	ldp	x29, x30, [sp], #48
    473c:	ret
    4740:	stp	x29, x30, [sp, #-80]!
    4744:	mov	x29, sp
    4748:	stp	x19, x20, [sp, #16]
    474c:	mov	x19, x0
    4750:	stp	x21, x22, [sp, #32]
    4754:	ldp	x20, x22, [x0, #264]
    4758:	stp	x23, x24, [sp, #48]
    475c:	ldr	x21, [x0, #280]
    4760:	str	x25, [sp, #64]
    4764:	ldr	x25, [x20, #72]
    4768:	cbz	x22, 48f4 <lzma_physmem@@XZ_5.0+0x43c>
    476c:	ldr	x0, [x0, #256]
    4770:	ldr	x0, [x0, #16]
    4774:	cmp	x0, x20
    4778:	b.eq	487c <lzma_physmem@@XZ_5.0+0x3c4>  // b.none
    477c:	str	xzr, [x19, #288]
    4780:	ldr	w0, [x20, #40]
    4784:	mov	x1, #0x0                   	// #0
    4788:	ldr	w2, [x20, #104]
    478c:	ldp	x24, x23, [x20]
    4790:	str	x0, [x19, #32]
    4794:	ldr	x0, [x20, #88]
    4798:	stp	x0, x23, [x19, #40]
    479c:	cmn	w2, #0x1
    47a0:	str	x24, [x19, #56]
    47a4:	b.eq	47ac <lzma_physmem@@XZ_5.0+0x2f4>  // b.none
    47a8:	add	x1, x20, #0x68
    47ac:	ldr	x2, [x20, #160]
    47b0:	str	x1, [x19]
    47b4:	str	x2, [x19, #80]
    47b8:	cbz	x25, 48d4 <lzma_physmem@@XZ_5.0+0x41c>
    47bc:	bl	3480 <lzma_vli_size@plt>
    47c0:	add	w2, w0, #0x1
    47c4:	ldr	x1, [x25, #56]
    47c8:	ldr	x0, [x20, #96]
    47cc:	add	x25, x25, x1, lsl #4
    47d0:	add	x0, x0, #0x7
    47d4:	add	x0, x0, x2
    47d8:	ldp	x2, x1, [x25, #64]
    47dc:	and	x0, x0, #0xfffffffffffffffc
    47e0:	add	x1, x1, #0x3
    47e4:	and	x1, x1, #0xfffffffffffffffc
    47e8:	add	x1, x1, #0x18
    47ec:	add	x0, x0, x1
    47f0:	stp	x0, x2, [x19, #64]
    47f4:	cbz	x22, 485c <lzma_physmem@@XZ_5.0+0x3a4>
    47f8:	ldr	x0, [x22, #40]
    47fc:	ldr	x1, [x20, #48]
    4800:	add	x0, x21, x0
    4804:	str	x0, [x19, #144]
    4808:	add	x0, x1, x0
    480c:	str	x0, [x19, #120]
    4810:	cbz	x21, 4874 <lzma_physmem@@XZ_5.0+0x3bc>
    4814:	lsl	x21, x21, #4
    4818:	add	x1, x22, x21
    481c:	ldp	x3, x0, [x1, #48]
    4820:	add	x0, x0, #0x3
    4824:	and	x1, x0, #0xfffffffffffffffc
    4828:	add	x21, x22, x21
    482c:	add	x4, x1, #0xc
    4830:	add	x24, x3, x24
    4834:	add	x23, x4, x23
    4838:	ldp	x2, x0, [x21, #64]
    483c:	stp	x23, x24, [x19, #128]
    4840:	stp	x4, x3, [x19, #152]
    4844:	sub	x0, x0, x1
    4848:	sub	x2, x2, x3
    484c:	add	x1, x0, #0x3
    4850:	stp	x2, x0, [x19, #168]
    4854:	and	x1, x1, #0xfffffffffffffffc
    4858:	str	x1, [x19, #184]
    485c:	ldp	x19, x20, [sp, #16]
    4860:	ldp	x21, x22, [sp, #32]
    4864:	ldp	x23, x24, [sp, #48]
    4868:	ldr	x25, [sp, #64]
    486c:	ldp	x29, x30, [sp], #80
    4870:	ret
    4874:	ldp	x3, x1, [x22]
    4878:	b	4828 <lzma_physmem@@XZ_5.0+0x370>
    487c:	cmp	x22, x25
    4880:	b.ne	477c <lzma_physmem@@XZ_5.0+0x2c4>  // b.any
    4884:	ldr	x0, [x20, #64]
    4888:	cmp	x0, x22
    488c:	b.eq	4900 <lzma_physmem@@XZ_5.0+0x448>  // b.none
    4890:	ldr	x1, [x22, #16]
    4894:	mov	x0, #0x1                   	// #1
    4898:	str	x1, [x19, #272]
    489c:	str	x0, [x19, #288]
    48a0:	ldr	w0, [x20, #40]
    48a4:	ldr	w1, [x20, #104]
    48a8:	ldp	x24, x23, [x20]
    48ac:	str	x0, [x19, #32]
    48b0:	ldr	x0, [x20, #88]
    48b4:	stp	x0, x23, [x19, #40]
    48b8:	cmn	w1, #0x1
    48bc:	str	x24, [x19, #56]
    48c0:	b.ne	47a8 <lzma_physmem@@XZ_5.0+0x2f0>  // b.any
    48c4:	ldr	x1, [x20, #160]
    48c8:	str	xzr, [x19]
    48cc:	str	x1, [x19, #80]
    48d0:	b	47bc <lzma_physmem@@XZ_5.0+0x304>
    48d4:	mov	x0, #0x0                   	// #0
    48d8:	bl	3480 <lzma_vli_size@plt>
    48dc:	add	w0, w0, #0x1
    48e0:	add	x0, x0, #0x7
    48e4:	and	x0, x0, #0xfffffffffffffffc
    48e8:	add	x0, x0, #0x18
    48ec:	stp	x0, xzr, [x19, #64]
    48f0:	b	47f4 <lzma_physmem@@XZ_5.0+0x33c>
    48f4:	mov	x0, #0x2                   	// #2
    48f8:	str	x0, [x19, #288]
    48fc:	b	4780 <lzma_physmem@@XZ_5.0+0x2c8>
    4900:	mov	x0, #0x2                   	// #2
    4904:	str	xzr, [x19, #272]
    4908:	str	x0, [x19, #288]
    490c:	b	48a0 <lzma_physmem@@XZ_5.0+0x3e8>
    4910:	mov	x1, x0
    4914:	ldr	x0, [x0, #16]
    4918:	cbz	x0, 4928 <lzma_physmem@@XZ_5.0+0x470>
    491c:	ldr	x2, [x0, #32]
    4920:	cmp	x1, x2
    4924:	b.eq	4910 <lzma_physmem@@XZ_5.0+0x458>  // b.none
    4928:	ret
    492c:	nop

0000000000004930 <lzma_index_init@@XZ_5.0>:
    4930:	stp	x29, x30, [sp, #-32]!
    4934:	mov	x29, sp
    4938:	stp	x19, x20, [sp, #16]
    493c:	mov	x20, x0
    4940:	bl	4558 <lzma_physmem@@XZ_5.0+0xa0>
    4944:	mov	x19, x0
    4948:	cbz	x0, 4974 <lzma_index_init@@XZ_5.0+0x44>
    494c:	mov	x1, #0x0                   	// #0
    4950:	mov	x4, x20
    4954:	mov	x3, #0x0                   	// #0
    4958:	mov	w2, #0x1                   	// #1
    495c:	mov	x0, #0x0                   	// #0
    4960:	bl	4598 <lzma_physmem@@XZ_5.0+0xe0>
    4964:	mov	x1, x0
    4968:	cbz	x0, 4984 <lzma_index_init@@XZ_5.0+0x54>
    496c:	mov	x0, x19
    4970:	bl	4608 <lzma_physmem@@XZ_5.0+0x150>
    4974:	mov	x0, x19
    4978:	ldp	x19, x20, [sp, #16]
    497c:	ldp	x29, x30, [sp], #32
    4980:	ret
    4984:	mov	x0, x19
    4988:	mov	x1, x20
    498c:	mov	x19, #0x0                   	// #0
    4990:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    4994:	b	4974 <lzma_index_init@@XZ_5.0+0x44>

0000000000004998 <lzma_index_end@@XZ_5.0>:
    4998:	cbz	x0, 49d8 <lzma_index_end@@XZ_5.0+0x40>
    499c:	stp	x29, x30, [sp, #-32]!
    49a0:	mov	x29, sp
    49a4:	stp	x19, x20, [sp, #16]
    49a8:	mov	x19, x0
    49ac:	mov	x20, x1
    49b0:	ldr	x0, [x0]
    49b4:	cbz	x0, 49c4 <lzma_index_end@@XZ_5.0+0x2c>
    49b8:	adrp	x2, 4000 <lzma_block_total_size@@XZ_5.0+0xe0>
    49bc:	add	x2, x2, #0x518
    49c0:	bl	44c0 <lzma_physmem@@XZ_5.0+0x8>
    49c4:	mov	x1, x20
    49c8:	mov	x0, x19
    49cc:	ldp	x19, x20, [sp, #16]
    49d0:	ldp	x29, x30, [sp], #32
    49d4:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    49d8:	ret
    49dc:	nop
    49e0:	mov	x2, #0xffffffffffffffc     	// #1152921504606846972
    49e4:	cmp	x1, x2
    49e8:	mov	x2, #0xfffffffffffffffb    	// #-5
    49ec:	movk	x2, #0xfff, lsl #48
    49f0:	csel	x1, x1, x2, cc  // cc = lo, ul, last
    49f4:	str	x1, [x0, #64]
    49f8:	ret
    49fc:	nop

0000000000004a00 <lzma_index_memusage@@XZ_5.0>:
    4a00:	sub	x3, x0, #0x1
    4a04:	mov	x2, x0
    4a08:	mov	x0, #0xfffffffe            	// #4294967294
    4a0c:	cmp	x3, x0
    4a10:	b.hi	4a70 <lzma_index_memusage@@XZ_5.0+0x70>  // b.pmore
    4a14:	mov	x3, #0x800                 	// #2048
    4a18:	mov	x0, #0xffffffffffffffff    	// #-1
    4a1c:	movk	x3, #0xfd, lsl #16
    4a20:	movk	x3, #0x8e55, lsl #32
    4a24:	movk	x3, #0xfd0, lsl #48
    4a28:	cmp	x1, x3
    4a2c:	b.hi	4a6c <lzma_index_memusage@@XZ_5.0+0x6c>  // b.pmore
    4a30:	add	x1, x1, #0x1ff
    4a34:	add	x3, x2, x2, lsl #3
    4a38:	mov	x4, #0xffffffffffffff8f    	// #-113
    4a3c:	lsr	x1, x1, #9
    4a40:	add	x2, x2, x3, lsl #2
    4a44:	add	x3, x1, x1, lsl #6
    4a48:	lsl	x2, x2, #3
    4a4c:	sub	x4, x4, x2
    4a50:	add	x2, x2, #0x70
    4a54:	lsl	x3, x3, #2
    4a58:	sub	x1, x3, x1
    4a5c:	lsl	x1, x1, #5
    4a60:	cmp	x4, x1
    4a64:	add	x2, x2, x1
    4a68:	csel	x0, x2, x0, cs  // cs = hs, nlast
    4a6c:	ret
    4a70:	mov	x0, #0xffffffffffffffff    	// #-1
    4a74:	ret

0000000000004a78 <lzma_index_memused@@XZ_5.0>:
    4a78:	mov	x1, x0
    4a7c:	ldr	w0, [x0, #24]
    4a80:	ldr	x1, [x1, #48]
    4a84:	b	3180 <lzma_index_memusage@plt>

0000000000004a88 <lzma_index_block_count@@XZ_5.0>:
    4a88:	ldr	x0, [x0, #48]
    4a8c:	ret

0000000000004a90 <lzma_index_stream_count@@XZ_5.0>:
    4a90:	ldr	w0, [x0, #24]
    4a94:	ret

0000000000004a98 <lzma_index_size@@XZ_5.0>:
    4a98:	stp	x29, x30, [sp, #-32]!
    4a9c:	mov	x29, sp
    4aa0:	str	x19, [sp, #16]
    4aa4:	mov	x19, x0
    4aa8:	ldr	x0, [x0, #48]
    4aac:	bl	3480 <lzma_vli_size@plt>
    4ab0:	add	w0, w0, #0x1
    4ab4:	ldr	x1, [x19, #56]
    4ab8:	ldr	x19, [sp, #16]
    4abc:	add	x1, x1, #0x7
    4ac0:	add	x0, x1, x0
    4ac4:	and	x0, x0, #0xfffffffffffffffc
    4ac8:	ldp	x29, x30, [sp], #32
    4acc:	ret

0000000000004ad0 <lzma_index_total_size@@XZ_5.0>:
    4ad0:	ldr	x0, [x0, #40]
    4ad4:	ret

0000000000004ad8 <lzma_index_stream_size@@XZ_5.0>:
    4ad8:	stp	x29, x30, [sp, #-32]!
    4adc:	mov	x29, sp
    4ae0:	str	x19, [sp, #16]
    4ae4:	mov	x19, x0
    4ae8:	ldr	x0, [x0, #48]
    4aec:	bl	3480 <lzma_vli_size@plt>
    4af0:	add	w2, w0, #0x1
    4af4:	ldr	x1, [x19, #56]
    4af8:	ldr	x0, [x19, #40]
    4afc:	add	x1, x1, #0x7
    4b00:	add	x1, x1, x2
    4b04:	and	x1, x1, #0xfffffffffffffffc
    4b08:	add	x0, x0, #0x18
    4b0c:	add	x0, x1, x0
    4b10:	ldr	x19, [sp, #16]
    4b14:	ldp	x29, x30, [sp], #32
    4b18:	ret
    4b1c:	nop

0000000000004b20 <lzma_index_file_size@@XZ_5.0>:
    4b20:	stp	x29, x30, [sp, #-32]!
    4b24:	mov	x1, #0x18                  	// #24
    4b28:	mov	x29, sp
    4b2c:	ldr	x3, [x0, #16]
    4b30:	stp	x19, x20, [sp, #16]
    4b34:	ldr	x0, [x3, #72]
    4b38:	ldr	x2, [x3, #8]
    4b3c:	cbz	x0, 4b58 <lzma_index_file_size@@XZ_5.0+0x38>
    4b40:	ldr	x1, [x0, #56]
    4b44:	add	x0, x0, x1, lsl #4
    4b48:	ldr	x1, [x0, #72]
    4b4c:	add	x1, x1, #0x3
    4b50:	and	x1, x1, #0xfffffffffffffffc
    4b54:	add	x1, x1, #0x18
    4b58:	ldr	x4, [x3, #160]
    4b5c:	ldp	x0, x20, [x3, #88]
    4b60:	add	x2, x2, x4
    4b64:	adds	x19, x2, x1
    4b68:	b.mi	4b94 <lzma_index_file_size@@XZ_5.0+0x74>  // b.first
    4b6c:	bl	3480 <lzma_vli_size@plt>
    4b70:	add	x20, x20, #0x7
    4b74:	add	w0, w0, #0x1
    4b78:	add	x0, x0, x20
    4b7c:	and	x0, x0, #0xfffffffffffffffc
    4b80:	adds	x0, x0, x19
    4b84:	csinv	x0, x0, xzr, pl  // pl = nfrst
    4b88:	ldp	x19, x20, [sp, #16]
    4b8c:	ldp	x29, x30, [sp], #32
    4b90:	ret
    4b94:	mov	x0, #0xffffffffffffffff    	// #-1
    4b98:	ldp	x19, x20, [sp, #16]
    4b9c:	ldp	x29, x30, [sp], #32
    4ba0:	ret
    4ba4:	nop

0000000000004ba8 <lzma_index_uncompressed_size@@XZ_5.0>:
    4ba8:	ldr	x0, [x0, #32]
    4bac:	ret

0000000000004bb0 <lzma_index_checks@@XZ_5.0>:
    4bb0:	ldr	x1, [x0, #16]
    4bb4:	ldr	w0, [x0, #72]
    4bb8:	ldr	w2, [x1, #104]
    4bbc:	cmn	w2, #0x1
    4bc0:	b.eq	4bd4 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    4bc4:	ldr	w2, [x1, #120]
    4bc8:	mov	w1, #0x1                   	// #1
    4bcc:	lsl	w1, w1, w2
    4bd0:	orr	w0, w0, w1
    4bd4:	ret
    4bd8:	stp	x29, x30, [sp, #-32]!
    4bdc:	mov	x29, sp
    4be0:	str	x19, [sp, #16]
    4be4:	mov	x19, x0
    4be8:	ldr	x0, [x0, #48]
    4bec:	bl	3480 <lzma_vli_size@plt>
    4bf0:	mvn	w0, w0
    4bf4:	ldr	x1, [x19, #56]
    4bf8:	ldr	x19, [sp, #16]
    4bfc:	sub	w0, w0, w1
    4c00:	and	w0, w0, #0x3
    4c04:	ldp	x29, x30, [sp], #32
    4c08:	ret
    4c0c:	nop

0000000000004c10 <lzma_index_stream_flags@@XZ_5.0>:
    4c10:	cmp	x0, #0x0
    4c14:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    4c18:	b.eq	4c70 <lzma_index_stream_flags@@XZ_5.0+0x60>  // b.none
    4c1c:	stp	x29, x30, [sp, #-32]!
    4c20:	mov	x29, sp
    4c24:	stp	x19, x20, [sp, #16]
    4c28:	mov	x20, x0
    4c2c:	mov	x19, x1
    4c30:	mov	x0, x1
    4c34:	bl	3110 <lzma_stream_flags_compare@plt>
    4c38:	cbnz	w0, 4c64 <lzma_index_stream_flags@@XZ_5.0+0x54>
    4c3c:	ldr	x2, [x20, #16]
    4c40:	ldp	x4, x5, [x19]
    4c44:	add	x1, x2, #0x68
    4c48:	stp	x4, x5, [x2, #104]
    4c4c:	ldp	x2, x3, [x19, #16]
    4c50:	stp	x2, x3, [x1, #16]
    4c54:	ldp	x2, x3, [x19, #32]
    4c58:	stp	x2, x3, [x1, #32]
    4c5c:	ldr	x2, [x19, #48]
    4c60:	str	x2, [x1, #48]
    4c64:	ldp	x19, x20, [sp, #16]
    4c68:	ldp	x29, x30, [sp], #32
    4c6c:	ret
    4c70:	mov	w0, #0xb                   	// #11
    4c74:	ret

0000000000004c78 <lzma_index_stream_padding@@XZ_5.0>:
    4c78:	cmp	x0, #0x0
    4c7c:	ccmp	x1, #0x0, #0x1, ne  // ne = any
    4c80:	b.lt	4cd8 <lzma_index_stream_padding@@XZ_5.0+0x60>  // b.tstop
    4c84:	stp	x29, x30, [sp, #-48]!
    4c88:	tst	x1, #0x3
    4c8c:	mov	x29, sp
    4c90:	stp	x19, x20, [sp, #16]
    4c94:	mov	x19, x1
    4c98:	mov	w1, #0xb                   	// #11
    4c9c:	b.ne	4cc8 <lzma_index_stream_padding@@XZ_5.0+0x50>  // b.any
    4ca0:	ldr	x20, [x0, #16]
    4ca4:	str	x21, [sp, #32]
    4ca8:	ldr	x21, [x20, #160]
    4cac:	str	xzr, [x20, #160]
    4cb0:	bl	3360 <lzma_index_file_size@plt>
    4cb4:	cmn	x0, x19
    4cb8:	b.mi	4ce4 <lzma_index_stream_padding@@XZ_5.0+0x6c>  // b.first
    4cbc:	mov	w1, #0x0                   	// #0
    4cc0:	ldr	x21, [sp, #32]
    4cc4:	str	x19, [x20, #160]
    4cc8:	mov	w0, w1
    4ccc:	ldp	x19, x20, [sp, #16]
    4cd0:	ldp	x29, x30, [sp], #48
    4cd4:	ret
    4cd8:	mov	w1, #0xb                   	// #11
    4cdc:	mov	w0, w1
    4ce0:	ret
    4ce4:	mov	w1, #0x9                   	// #9
    4ce8:	str	x21, [x20, #160]
    4cec:	ldr	x21, [sp, #32]
    4cf0:	b	4cc8 <lzma_index_stream_padding@@XZ_5.0+0x50>
    4cf4:	nop

0000000000004cf8 <lzma_index_append@@XZ_5.0>:
    4cf8:	stp	x29, x30, [sp, #-128]!
    4cfc:	cmp	x0, #0x0
    4d00:	mov	x29, sp
    4d04:	stp	x19, x20, [sp, #16]
    4d08:	mov	x19, x0
    4d0c:	mov	x0, #0xfffffffffffffff7    	// #-9
    4d10:	str	x1, [sp, #104]
    4d14:	movk	x0, #0x7fff, lsl #48
    4d18:	mov	x20, x2
    4d1c:	sub	x2, x2, #0x5
    4d20:	ccmp	x2, x0, #0x2, ne  // ne = any
    4d24:	mov	w0, #0xb                   	// #11
    4d28:	b.hi	4eec <lzma_index_append@@XZ_5.0+0x1f4>  // b.pmore
    4d2c:	stp	x21, x22, [sp, #32]
    4d30:	mov	w0, #0xb                   	// #11
    4d34:	mov	x21, x3
    4d38:	tbnz	x3, #63, 4f30 <lzma_index_append@@XZ_5.0+0x238>
    4d3c:	ldr	x22, [x19, #16]
    4d40:	stp	x23, x24, [sp, #48]
    4d44:	stp	x25, x26, [sp, #64]
    4d48:	ldr	x24, [x22, #72]
    4d4c:	stp	x27, x28, [sp, #80]
    4d50:	cbz	x24, 4ef8 <lzma_index_append@@XZ_5.0+0x200>
    4d54:	ldr	x0, [x24, #56]
    4d58:	add	x0, x24, x0, lsl #4
    4d5c:	ldr	x23, [x0, #72]
    4d60:	ldr	x0, [x0, #64]
    4d64:	add	x23, x23, #0x3
    4d68:	str	x0, [sp, #96]
    4d6c:	and	x0, x23, #0xfffffffffffffffc
    4d70:	add	x25, x20, x0
    4d74:	str	x0, [sp, #120]
    4d78:	mov	x0, x20
    4d7c:	bl	3480 <lzma_vli_size@plt>
    4d80:	mov	w26, w0
    4d84:	mov	x0, x21
    4d88:	bl	3480 <lzma_vli_size@plt>
    4d8c:	add	w26, w26, w0
    4d90:	ldp	x5, x27, [x22, #88]
    4d94:	add	x2, x25, #0x3
    4d98:	ldr	x28, [x22, #8]
    4d9c:	and	x2, x2, #0xfffffffffffffffc
    4da0:	ldr	x3, [x22, #160]
    4da4:	add	x2, x2, #0x18
    4da8:	add	x23, x5, #0x1
    4dac:	add	x28, x28, x3
    4db0:	adds	x28, x2, x28
    4db4:	add	x2, x27, #0x7
    4db8:	str	x2, [sp, #112]
    4dbc:	b.mi	4f10 <lzma_index_append@@XZ_5.0+0x218>  // b.first
    4dc0:	mov	x0, x23
    4dc4:	bl	3480 <lzma_vli_size@plt>
    4dc8:	ldr	x2, [sp, #112]
    4dcc:	add	w0, w0, #0x1
    4dd0:	add	x0, x0, x26
    4dd4:	add	x0, x0, x2
    4dd8:	and	x0, x0, #0xfffffffffffffffc
    4ddc:	cmn	x0, x28
    4de0:	b.mi	4f10 <lzma_index_append@@XZ_5.0+0x218>  // b.first
    4de4:	ldp	x28, x6, [x19, #48]
    4de8:	str	x6, [sp, #112]
    4dec:	add	x28, x28, #0x1
    4df0:	mov	x0, x28
    4df4:	bl	3480 <lzma_vli_size@plt>
    4df8:	ldr	x6, [sp, #112]
    4dfc:	add	w2, w0, #0x1
    4e00:	add	x2, x2, x26
    4e04:	mov	x3, #0x400000000           	// #17179869184
    4e08:	add	x7, x6, #0x7
    4e0c:	mov	w0, #0x9                   	// #9
    4e10:	add	x2, x2, x7
    4e14:	and	x2, x2, #0xfffffffffffffffc
    4e18:	cmp	x2, x3
    4e1c:	b.hi	4f40 <lzma_index_append@@XZ_5.0+0x248>  // b.pmore
    4e20:	cbz	x24, 4e34 <lzma_index_append@@XZ_5.0+0x13c>
    4e24:	ldp	x2, x0, [x24, #48]
    4e28:	add	x0, x0, #0x1
    4e2c:	cmp	x0, x2
    4e30:	b.cc	4f08 <lzma_index_append@@XZ_5.0+0x210>  // b.lo, b.ul, b.last
    4e34:	ldr	x0, [x19, #64]
    4e38:	ldr	x1, [sp, #104]
    4e3c:	add	x0, x0, #0x4
    4e40:	lsl	x0, x0, #4
    4e44:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    4e48:	mov	x24, x0
    4e4c:	cbz	x0, 4f5c <lzma_index_append@@XZ_5.0+0x264>
    4e50:	ldr	x2, [x22, #88]
    4e54:	mov	x1, x0
    4e58:	ldr	x5, [x19, #64]
    4e5c:	add	x2, x2, #0x1
    4e60:	ldr	x0, [sp, #96]
    4e64:	str	x0, [x24]
    4e68:	ldr	x0, [sp, #120]
    4e6c:	mov	x3, #0x200                 	// #512
    4e70:	str	x0, [x24, #8]
    4e74:	add	x0, x22, #0x38
    4e78:	stp	x2, x5, [x24, #40]
    4e7c:	str	xzr, [x24, #56]
    4e80:	str	x3, [x19, #64]
    4e84:	bl	4608 <lzma_physmem@@XZ_5.0+0x150>
    4e88:	ldp	x28, x6, [x19, #48]
    4e8c:	ldp	x5, x27, [x22, #88]
    4e90:	ldr	x0, [x24, #56]
    4e94:	add	x28, x28, #0x1
    4e98:	add	x23, x5, #0x1
    4e9c:	add	x1, x24, x0, lsl #4
    4ea0:	add	x20, x20, #0x3
    4ea4:	ldr	x0, [sp, #96]
    4ea8:	add	x27, x26, x27
    4eac:	ldr	x3, [x19, #32]
    4eb0:	add	x24, x0, x21
    4eb4:	ldr	x0, [x19, #40]
    4eb8:	stp	x24, x25, [x1, #64]
    4ebc:	add	x26, x26, x6
    4ec0:	add	x21, x3, x21
    4ec4:	and	x20, x20, #0xfffffffffffffffc
    4ec8:	stp	x23, x27, [x22, #88]
    4ecc:	add	x20, x0, x20
    4ed0:	mov	w0, #0x0                   	// #0
    4ed4:	ldp	x23, x24, [sp, #48]
    4ed8:	stp	x21, x20, [x19, #32]
    4edc:	stp	x28, x26, [x19, #48]
    4ee0:	ldp	x21, x22, [sp, #32]
    4ee4:	ldp	x25, x26, [sp, #64]
    4ee8:	ldp	x27, x28, [sp, #80]
    4eec:	ldp	x19, x20, [sp, #16]
    4ef0:	ldp	x29, x30, [sp], #128
    4ef4:	ret
    4ef8:	mov	x25, x20
    4efc:	str	xzr, [sp, #96]
    4f00:	str	xzr, [sp, #120]
    4f04:	b	4d78 <lzma_index_append@@XZ_5.0+0x80>
    4f08:	str	x0, [x24, #56]
    4f0c:	b	4e9c <lzma_index_append@@XZ_5.0+0x1a4>
    4f10:	mov	w0, #0x9                   	// #9
    4f14:	ldp	x19, x20, [sp, #16]
    4f18:	ldp	x21, x22, [sp, #32]
    4f1c:	ldp	x23, x24, [sp, #48]
    4f20:	ldp	x25, x26, [sp, #64]
    4f24:	ldp	x27, x28, [sp, #80]
    4f28:	ldp	x29, x30, [sp], #128
    4f2c:	ret
    4f30:	ldp	x19, x20, [sp, #16]
    4f34:	ldp	x21, x22, [sp, #32]
    4f38:	ldp	x29, x30, [sp], #128
    4f3c:	ret
    4f40:	ldp	x19, x20, [sp, #16]
    4f44:	ldp	x21, x22, [sp, #32]
    4f48:	ldp	x23, x24, [sp, #48]
    4f4c:	ldp	x25, x26, [sp, #64]
    4f50:	ldp	x27, x28, [sp, #80]
    4f54:	ldp	x29, x30, [sp], #128
    4f58:	ret
    4f5c:	mov	w0, #0x5                   	// #5
    4f60:	ldp	x21, x22, [sp, #32]
    4f64:	ldp	x23, x24, [sp, #48]
    4f68:	ldp	x25, x26, [sp, #64]
    4f6c:	ldp	x27, x28, [sp, #80]
    4f70:	b	4eec <lzma_index_append@@XZ_5.0+0x1f4>
    4f74:	nop

0000000000004f78 <lzma_index_cat@@XZ_5.0>:
    4f78:	stp	x29, x30, [sp, #-128]!
    4f7c:	mov	x29, sp
    4f80:	stp	x19, x20, [sp, #16]
    4f84:	mov	x20, x1
    4f88:	mov	x19, x0
    4f8c:	stp	x21, x22, [sp, #32]
    4f90:	mov	x22, x2
    4f94:	bl	3360 <lzma_index_file_size@plt>
    4f98:	mov	x21, x0
    4f9c:	mov	x0, x20
    4fa0:	bl	3360 <lzma_index_file_size@plt>
    4fa4:	cmn	x0, x21
    4fa8:	b.mi	514c <lzma_index_cat@@XZ_5.0+0x1d4>  // b.first
    4fac:	stp	x23, x24, [sp, #48]
    4fb0:	ldr	x0, [x20, #32]
    4fb4:	ldr	x24, [x19, #32]
    4fb8:	cmn	x24, x0
    4fbc:	b.mi	5178 <lzma_index_cat@@XZ_5.0+0x200>  // b.first
    4fc0:	stp	x25, x26, [sp, #64]
    4fc4:	ldr	x25, [x19, #48]
    4fc8:	mov	x0, x25
    4fcc:	bl	3480 <lzma_vli_size@plt>
    4fd0:	add	w23, w0, #0x1
    4fd4:	ldr	x0, [x20, #48]
    4fd8:	bl	3480 <lzma_vli_size@plt>
    4fdc:	add	w1, w0, #0x1
    4fe0:	ldr	x2, [x20, #56]
    4fe4:	add	x1, x1, x23
    4fe8:	ldr	x4, [x19, #56]
    4fec:	add	x2, x2, #0xb
    4ff0:	add	x1, x1, x2
    4ff4:	mov	x3, #0x400000000           	// #17179869184
    4ff8:	add	x1, x1, x4
    4ffc:	mov	w0, #0x9                   	// #9
    5000:	and	x1, x1, #0xfffffffffffffffc
    5004:	cmp	x1, x3
    5008:	b.hi	5160 <lzma_index_cat@@XZ_5.0+0x1e8>  // b.pmore
    500c:	ldr	x26, [x19, #16]
    5010:	ldr	x23, [x26, #72]
    5014:	cbz	x23, 5028 <lzma_index_cat@@XZ_5.0+0xb0>
    5018:	ldp	x1, x0, [x23, #48]
    501c:	add	x2, x0, #0x1
    5020:	cmp	x2, x1
    5024:	b.cc	50b8 <lzma_index_cat@@XZ_5.0+0x140>  // b.lo, b.ul, b.last
    5028:	ldr	w2, [x19, #24]
    502c:	add	x0, sp, #0x58
    5030:	ldr	x1, [x20]
    5034:	stp	x24, x21, [sp, #88]
    5038:	str	x25, [sp, #104]
    503c:	str	w2, [sp, #112]
    5040:	str	x19, [sp, #120]
    5044:	bl	46b8 <lzma_physmem@@XZ_5.0+0x200>
    5048:	ldp	x2, x1, [x19, #32]
    504c:	mov	x0, x19
    5050:	ldr	x3, [x20, #32]
    5054:	add	x2, x2, x3
    5058:	ldr	x3, [x20, #40]
    505c:	add	x1, x1, x3
    5060:	stp	x2, x1, [x19, #32]
    5064:	ldp	x2, x1, [x19, #48]
    5068:	ldr	x3, [x20, #48]
    506c:	add	x2, x2, x3
    5070:	ldr	x3, [x20, #56]
    5074:	add	x1, x1, x3
    5078:	stp	x2, x1, [x19, #48]
    507c:	bl	31d0 <lzma_index_checks@plt>
    5080:	mov	w3, w0
    5084:	ldr	w2, [x20, #72]
    5088:	mov	x0, x20
    508c:	mov	x1, x22
    5090:	orr	w2, w2, w3
    5094:	str	w2, [x19, #72]
    5098:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    509c:	ldp	x23, x24, [sp, #48]
    50a0:	mov	w0, #0x0                   	// #0
    50a4:	ldp	x25, x26, [sp, #64]
    50a8:	ldp	x19, x20, [sp, #16]
    50ac:	ldp	x21, x22, [sp, #32]
    50b0:	ldp	x29, x30, [sp], #128
    50b4:	ret
    50b8:	add	x0, x0, #0x5
    50bc:	mov	x1, x22
    50c0:	lsl	x0, x0, #4
    50c4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    50c8:	mov	x24, x0
    50cc:	cbz	x0, 51a0 <lzma_index_cat@@XZ_5.0+0x228>
    50d0:	ldp	x0, x1, [x23]
    50d4:	stp	x0, x1, [x24]
    50d8:	ldp	x2, x3, [x23, #16]
    50dc:	stp	x2, x3, [x24, #16]
    50e0:	add	x1, x23, #0x40
    50e4:	ldr	x2, [x23, #32]
    50e8:	str	x2, [x24, #32]
    50ec:	add	x0, x24, #0x40
    50f0:	ldr	x3, [x23, #56]
    50f4:	ldr	x2, [x23, #40]
    50f8:	str	x3, [x24, #56]
    50fc:	add	x3, x3, #0x1
    5100:	str	x2, [x24, #40]
    5104:	str	x3, [x24, #48]
    5108:	lsl	x2, x3, #4
    510c:	bl	3090 <memcpy@plt>
    5110:	ldr	x0, [x23, #16]
    5114:	cbz	x0, 511c <lzma_index_cat@@XZ_5.0+0x1a4>
    5118:	str	x24, [x0, #32]
    511c:	ldr	x0, [x26, #64]
    5120:	cmp	x0, x23
    5124:	b.eq	5190 <lzma_index_cat@@XZ_5.0+0x218>  // b.none
    5128:	ldr	x0, [x26, #72]
    512c:	cmp	x23, x0
    5130:	b.eq	5198 <lzma_index_cat@@XZ_5.0+0x220>  // b.none
    5134:	mov	x0, x23
    5138:	mov	x1, x22
    513c:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    5140:	ldr	x24, [x19, #32]
    5144:	ldr	x25, [x19, #48]
    5148:	b	5028 <lzma_index_cat@@XZ_5.0+0xb0>
    514c:	mov	w0, #0x9                   	// #9
    5150:	ldp	x19, x20, [sp, #16]
    5154:	ldp	x21, x22, [sp, #32]
    5158:	ldp	x29, x30, [sp], #128
    515c:	ret
    5160:	ldp	x19, x20, [sp, #16]
    5164:	ldp	x21, x22, [sp, #32]
    5168:	ldp	x23, x24, [sp, #48]
    516c:	ldp	x25, x26, [sp, #64]
    5170:	ldp	x29, x30, [sp], #128
    5174:	ret
    5178:	mov	w0, #0x9                   	// #9
    517c:	ldp	x19, x20, [sp, #16]
    5180:	ldp	x21, x22, [sp, #32]
    5184:	ldp	x23, x24, [sp, #48]
    5188:	ldp	x29, x30, [sp], #128
    518c:	ret
    5190:	stp	x24, x24, [x26, #56]
    5194:	b	5128 <lzma_index_cat@@XZ_5.0+0x1b0>
    5198:	str	x24, [x26, #72]
    519c:	b	5134 <lzma_index_cat@@XZ_5.0+0x1bc>
    51a0:	mov	w0, #0x5                   	// #5
    51a4:	ldp	x23, x24, [sp, #48]
    51a8:	ldp	x25, x26, [sp, #64]
    51ac:	b	50a8 <lzma_index_cat@@XZ_5.0+0x130>

00000000000051b0 <lzma_index_dup@@XZ_5.0>:
    51b0:	stp	x29, x30, [sp, #-96]!
    51b4:	mov	x29, sp
    51b8:	stp	x19, x20, [sp, #16]
    51bc:	mov	x19, x0
    51c0:	mov	x0, x1
    51c4:	stp	x21, x22, [sp, #32]
    51c8:	stp	x23, x24, [sp, #48]
    51cc:	mov	x23, x1
    51d0:	bl	4558 <lzma_physmem@@XZ_5.0+0xa0>
    51d4:	mov	x22, x0
    51d8:	cbz	x0, 5350 <lzma_index_dup@@XZ_5.0+0x1a0>
    51dc:	stp	x27, x28, [sp, #80]
    51e0:	mov	x24, #0xffffffffffffffc     	// #1152921504606846972
    51e4:	ldr	x27, [x19, #8]
    51e8:	ldr	x0, [x19, #32]
    51ec:	str	x0, [x22, #32]
    51f0:	ldr	x0, [x19, #40]
    51f4:	str	x0, [x22, #40]
    51f8:	ldr	x0, [x19, #48]
    51fc:	str	x0, [x22, #48]
    5200:	ldr	x0, [x19, #56]
    5204:	str	x0, [x22, #56]
    5208:	ldr	x0, [x27, #88]
    520c:	cmp	x0, x24
    5210:	b.cs	533c <lzma_index_dup@@XZ_5.0+0x18c>  // b.hs, b.nlast
    5214:	stp	x25, x26, [sp, #64]
    5218:	mov	x25, #0x1                   	// #1
    521c:	nop
    5220:	ldr	w2, [x27, #40]
    5224:	ldp	x1, x0, [x27]
    5228:	mov	x4, x23
    522c:	ldr	x3, [x27, #48]
    5230:	bl	4598 <lzma_physmem@@XZ_5.0+0xe0>
    5234:	mov	x20, x0
    5238:	cbz	x0, 5338 <lzma_index_dup@@XZ_5.0+0x188>
    523c:	ldp	x4, x5, [x27, #104]
    5240:	ldr	x1, [x27, #64]
    5244:	ldp	x0, x3, [x27, #88]
    5248:	stp	x4, x5, [x20, #104]
    524c:	ldp	x4, x5, [x27, #120]
    5250:	stp	x4, x5, [x20, #120]
    5254:	ldp	x4, x5, [x27, #136]
    5258:	stp	x4, x5, [x20, #136]
    525c:	ldr	x2, [x27, #152]
    5260:	str	x2, [x20, #152]
    5264:	stp	x0, x3, [x20, #88]
    5268:	ldr	x2, [x27, #160]
    526c:	str	x2, [x20, #160]
    5270:	cbz	x1, 530c <lzma_index_dup@@XZ_5.0+0x15c>
    5274:	add	x0, x0, #0x4
    5278:	mov	x1, x23
    527c:	lsl	x0, x0, #4
    5280:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    5284:	mov	x21, x0
    5288:	cbz	x0, 5398 <lzma_index_dup@@XZ_5.0+0x1e8>
    528c:	add	x26, x0, #0x40
    5290:	mov	x28, #0x0                   	// #0
    5294:	ldr	x0, [x27, #88]
    5298:	ldr	x19, [x27, #64]
    529c:	sub	x1, x0, #0x1
    52a0:	stp	xzr, xzr, [x21]
    52a4:	stp	x25, x0, [x21, #40]
    52a8:	str	x1, [x21, #56]
    52ac:	nop
    52b0:	ldr	x2, [x19, #56]
    52b4:	add	x0, x26, x28, lsl #4
    52b8:	add	x1, x19, #0x40
    52bc:	add	x2, x2, #0x1
    52c0:	lsl	x2, x2, #4
    52c4:	bl	3090 <memcpy@plt>
    52c8:	ldr	x2, [x19, #32]
    52cc:	ldr	x0, [x19, #56]
    52d0:	add	x0, x0, #0x1
    52d4:	add	x28, x28, x0
    52d8:	cbz	x2, 52f0 <lzma_index_dup@@XZ_5.0+0x140>
    52dc:	nop
    52e0:	mov	x19, x2
    52e4:	ldr	x2, [x2, #24]
    52e8:	cbnz	x2, 52e0 <lzma_index_dup@@XZ_5.0+0x130>
    52ec:	b	52b0 <lzma_index_dup@@XZ_5.0+0x100>
    52f0:	mov	x0, x19
    52f4:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    52f8:	mov	x19, x0
    52fc:	cbnz	x0, 52b0 <lzma_index_dup@@XZ_5.0+0x100>
    5300:	mov	x1, x21
    5304:	add	x0, x20, #0x38
    5308:	bl	4608 <lzma_physmem@@XZ_5.0+0x150>
    530c:	mov	x1, x20
    5310:	mov	x0, x22
    5314:	bl	4608 <lzma_physmem@@XZ_5.0+0x150>
    5318:	ldr	x2, [x27, #32]
    531c:	cbz	x2, 5368 <lzma_index_dup@@XZ_5.0+0x1b8>
    5320:	mov	x27, x2
    5324:	ldr	x2, [x2, #24]
    5328:	cbnz	x2, 5320 <lzma_index_dup@@XZ_5.0+0x170>
    532c:	ldr	x0, [x27, #88]
    5330:	cmp	x0, x24
    5334:	b.cc	5220 <lzma_index_dup@@XZ_5.0+0x70>  // b.lo, b.ul, b.last
    5338:	ldp	x25, x26, [sp, #64]
    533c:	mov	x0, x22
    5340:	mov	x1, x23
    5344:	bl	33e0 <lzma_index_end@plt>
    5348:	ldp	x27, x28, [sp, #80]
    534c:	mov	x22, #0x0                   	// #0
    5350:	mov	x0, x22
    5354:	ldp	x19, x20, [sp, #16]
    5358:	ldp	x21, x22, [sp, #32]
    535c:	ldp	x23, x24, [sp, #48]
    5360:	ldp	x29, x30, [sp], #96
    5364:	ret
    5368:	mov	x0, x27
    536c:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    5370:	mov	x27, x0
    5374:	cbnz	x0, 532c <lzma_index_dup@@XZ_5.0+0x17c>
    5378:	mov	x0, x22
    537c:	ldp	x19, x20, [sp, #16]
    5380:	ldp	x21, x22, [sp, #32]
    5384:	ldp	x23, x24, [sp, #48]
    5388:	ldp	x25, x26, [sp, #64]
    538c:	ldp	x27, x28, [sp, #80]
    5390:	ldp	x29, x30, [sp], #96
    5394:	ret
    5398:	mov	x0, x20
    539c:	mov	x1, x23
    53a0:	bl	4518 <lzma_physmem@@XZ_5.0+0x60>
    53a4:	ldp	x25, x26, [sp, #64]
    53a8:	b	533c <lzma_index_dup@@XZ_5.0+0x18c>
    53ac:	nop

00000000000053b0 <lzma_index_iter_rewind@@XZ_5.0>:
    53b0:	stp	xzr, xzr, [x0, #264]
    53b4:	stp	xzr, xzr, [x0, #280]
    53b8:	ret
    53bc:	nop

00000000000053c0 <lzma_index_iter_init@@XZ_5.0>:
    53c0:	str	x1, [x0, #256]
    53c4:	b	30a0 <lzma_index_iter_rewind@plt>

00000000000053c8 <lzma_index_iter_next@@XZ_5.0>:
    53c8:	cmp	w1, #0x3
    53cc:	b.hi	5564 <lzma_index_iter_next@@XZ_5.0+0x19c>  // b.pmore
    53d0:	stp	x29, x30, [sp, #-16]!
    53d4:	mov	w5, w1
    53d8:	mov	x6, x0
    53dc:	mov	x29, sp
    53e0:	cmp	w1, #0x1
    53e4:	mov	x2, #0x0                   	// #0
    53e8:	ldp	x8, x3, [x0, #256]
    53ec:	ldr	x4, [x0, #280]
    53f0:	b.eq	540c <lzma_index_iter_next@@XZ_5.0+0x44>  // b.none
    53f4:	ldr	x0, [x0, #288]
    53f8:	cmp	x0, #0x1
    53fc:	b.eq	557c <lzma_index_iter_next@@XZ_5.0+0x1b4>  // b.none
    5400:	cmp	x0, #0x2
    5404:	b.eq	5574 <lzma_index_iter_next@@XZ_5.0+0x1ac>  // b.none
    5408:	cbz	x0, 556c <lzma_index_iter_next@@XZ_5.0+0x1a4>
    540c:	cbz	x3, 544c <lzma_index_iter_next@@XZ_5.0+0x84>
    5410:	cbz	x2, 54b4 <lzma_index_iter_next@@XZ_5.0+0xec>
    5414:	ldr	x0, [x2, #56]
    5418:	cmp	x0, x4
    541c:	b.ls	54f4 <lzma_index_iter_next@@XZ_5.0+0x12c>  // b.plast
    5420:	cmp	w5, #0x3
    5424:	add	x1, x4, #0x1
    5428:	b.ne	5478 <lzma_index_iter_next@@XZ_5.0+0xb0>  // b.any
    542c:	cbz	x1, 5464 <lzma_index_iter_next@@XZ_5.0+0x9c>
    5430:	add	x4, x2, x4, lsl #4
    5434:	ldr	x7, [x4, #64]
    5438:	ldr	x0, [x4, #80]
    543c:	cmp	x7, x0
    5440:	b.ne	5478 <lzma_index_iter_next@@XZ_5.0+0xb0>  // b.any
    5444:	mov	x4, x1
    5448:	cbnz	x3, 5410 <lzma_index_iter_next@@XZ_5.0+0x48>
    544c:	ldr	x3, [x8, #8]
    5450:	cmp	w5, #0x1
    5454:	ldr	x2, [x3, #64]
    5458:	b.hi	5524 <lzma_index_iter_next@@XZ_5.0+0x15c>  // b.pmore
    545c:	cmp	w5, #0x3
    5460:	b.ne	54d8 <lzma_index_iter_next@@XZ_5.0+0x110>  // b.any
    5464:	ldr	x1, [x2]
    5468:	ldr	x0, [x2, #64]
    546c:	cmp	x1, x0
    5470:	mov	x1, #0x0                   	// #0
    5474:	b.eq	5444 <lzma_index_iter_next@@XZ_5.0+0x7c>  // b.none
    5478:	stp	x3, x2, [x6, #264]
    547c:	mov	x0, x6
    5480:	str	x1, [x6, #280]
    5484:	bl	4740 <lzma_physmem@@XZ_5.0+0x288>
    5488:	mov	w0, #0x0                   	// #0
    548c:	ldp	x29, x30, [sp], #16
    5490:	ret
    5494:	mov	x0, x3
    5498:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    549c:	mov	x3, x0
    54a0:	cbz	x0, 5544 <lzma_index_iter_next@@XZ_5.0+0x17c>
    54a4:	cmp	w5, #0x1
    54a8:	ldr	x2, [x3, #64]
    54ac:	b.ls	54d8 <lzma_index_iter_next@@XZ_5.0+0x110>  // b.plast
    54b0:	cbnz	x2, 545c <lzma_index_iter_next@@XZ_5.0+0x94>
    54b4:	ldr	x2, [x3, #32]
    54b8:	cbz	x2, 5494 <lzma_index_iter_next@@XZ_5.0+0xcc>
    54bc:	nop
    54c0:	mov	x3, x2
    54c4:	ldr	x2, [x2, #24]
    54c8:	cbnz	x2, 54c0 <lzma_index_iter_next@@XZ_5.0+0xf8>
    54cc:	cmp	w5, #0x1
    54d0:	ldr	x2, [x3, #64]
    54d4:	b.hi	54b0 <lzma_index_iter_next@@XZ_5.0+0xe8>  // b.pmore
    54d8:	mov	x1, #0x0                   	// #0
    54dc:	stp	x3, x2, [x6, #264]
    54e0:	mov	x0, x6
    54e4:	str	x1, [x6, #280]
    54e8:	bl	4740 <lzma_physmem@@XZ_5.0+0x288>
    54ec:	mov	w0, #0x0                   	// #0
    54f0:	b	548c <lzma_index_iter_next@@XZ_5.0+0xc4>
    54f4:	ldr	x4, [x2, #32]
    54f8:	cbz	x4, 5550 <lzma_index_iter_next@@XZ_5.0+0x188>
    54fc:	nop
    5500:	mov	x2, x4
    5504:	ldr	x4, [x4, #24]
    5508:	cbnz	x4, 5500 <lzma_index_iter_next@@XZ_5.0+0x138>
    550c:	b	545c <lzma_index_iter_next@@XZ_5.0+0x94>
    5510:	mov	x0, x3
    5514:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    5518:	mov	x3, x0
    551c:	cbz	x0, 5544 <lzma_index_iter_next@@XZ_5.0+0x17c>
    5520:	ldr	x2, [x3, #64]
    5524:	cbnz	x2, 545c <lzma_index_iter_next@@XZ_5.0+0x94>
    5528:	ldr	x2, [x3, #32]
    552c:	cbz	x2, 5510 <lzma_index_iter_next@@XZ_5.0+0x148>
    5530:	mov	x3, x2
    5534:	ldr	x2, [x2, #24]
    5538:	cbnz	x2, 5530 <lzma_index_iter_next@@XZ_5.0+0x168>
    553c:	ldr	x2, [x3, #64]
    5540:	b	5524 <lzma_index_iter_next@@XZ_5.0+0x15c>
    5544:	mov	w0, #0x1                   	// #1
    5548:	ldp	x29, x30, [sp], #16
    554c:	ret
    5550:	mov	x0, x2
    5554:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    5558:	mov	x2, x0
    555c:	cbnz	x0, 545c <lzma_index_iter_next@@XZ_5.0+0x94>
    5560:	b	54b4 <lzma_index_iter_next@@XZ_5.0+0xec>
    5564:	mov	w0, #0x1                   	// #1
    5568:	ret
    556c:	ldr	x2, [x6, #272]
    5570:	b	540c <lzma_index_iter_next@@XZ_5.0+0x44>
    5574:	ldr	x2, [x3, #64]
    5578:	b	540c <lzma_index_iter_next@@XZ_5.0+0x44>
    557c:	ldr	x0, [x6, #272]
    5580:	ldr	x1, [x0, #32]
    5584:	cbz	x1, 5598 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    5588:	mov	x2, x1
    558c:	ldr	x1, [x1, #24]
    5590:	cbnz	x1, 5588 <lzma_index_iter_next@@XZ_5.0+0x1c0>
    5594:	b	540c <lzma_index_iter_next@@XZ_5.0+0x44>
    5598:	bl	4910 <lzma_physmem@@XZ_5.0+0x458>
    559c:	mov	x2, x0
    55a0:	b	540c <lzma_index_iter_next@@XZ_5.0+0x44>
    55a4:	nop

00000000000055a8 <lzma_index_iter_locate@@XZ_5.0>:
    55a8:	ldr	x2, [x0, #256]
    55ac:	ldr	x3, [x2, #32]
    55b0:	cmp	x3, x1
    55b4:	b.ls	5688 <lzma_index_iter_locate@@XZ_5.0+0xe0>  // b.plast
    55b8:	ldr	x2, [x2]
    55bc:	cbz	x2, 5698 <lzma_index_iter_locate@@XZ_5.0+0xf0>
    55c0:	mov	x7, #0x0                   	// #0
    55c4:	nop
    55c8:	ldr	x3, [x2]
    55cc:	ldr	x4, [x2, #24]
    55d0:	cmp	x1, x3
    55d4:	ldr	x3, [x2, #32]
    55d8:	b.cs	5670 <lzma_index_iter_locate@@XZ_5.0+0xc8>  // b.hs, b.nlast
    55dc:	mov	x2, x4
    55e0:	cbnz	x2, 55c8 <lzma_index_iter_locate@@XZ_5.0+0x20>
    55e4:	ldr	x3, [x7, #56]
    55e8:	ldr	x5, [x7]
    55ec:	sub	x5, x1, x5
    55f0:	cbz	x3, 5690 <lzma_index_iter_locate@@XZ_5.0+0xe8>
    55f4:	stp	x29, x30, [sp, #-16]!
    55f8:	mov	x29, sp
    55fc:	nop
    5600:	ldr	x1, [x3]
    5604:	ldr	x4, [x3, #24]
    5608:	cmp	x5, x1
    560c:	ldr	x1, [x3, #32]
    5610:	b.cs	5660 <lzma_index_iter_locate@@XZ_5.0+0xb8>  // b.hs, b.nlast
    5614:	mov	x3, x4
    5618:	cbnz	x3, 5600 <lzma_index_iter_locate@@XZ_5.0+0x58>
    561c:	ldr	x4, [x2, #56]
    5620:	b	5640 <lzma_index_iter_locate@@XZ_5.0+0x98>
    5624:	sub	x1, x4, x3
    5628:	add	x1, x3, x1, lsr #1
    562c:	add	x6, x2, x1, lsl #4
    5630:	ldr	x6, [x6, #64]
    5634:	cmp	x6, x5
    5638:	b.ls	5680 <lzma_index_iter_locate@@XZ_5.0+0xd8>  // b.plast
    563c:	mov	x4, x1
    5640:	cmp	x4, x3
    5644:	b.hi	5624 <lzma_index_iter_locate@@XZ_5.0+0x7c>  // b.pmore
    5648:	stp	x7, x2, [x0, #264]
    564c:	str	x3, [x0, #280]
    5650:	bl	4740 <lzma_physmem@@XZ_5.0+0x288>
    5654:	mov	w0, #0x0                   	// #0
    5658:	ldp	x29, x30, [sp], #16
    565c:	ret
    5660:	mov	x2, x3
    5664:	mov	x3, x1
    5668:	cbnz	x3, 5600 <lzma_index_iter_locate@@XZ_5.0+0x58>
    566c:	b	561c <lzma_index_iter_locate@@XZ_5.0+0x74>
    5670:	mov	x7, x2
    5674:	mov	x2, x3
    5678:	cbnz	x2, 55c8 <lzma_index_iter_locate@@XZ_5.0+0x20>
    567c:	b	55e4 <lzma_index_iter_locate@@XZ_5.0+0x3c>
    5680:	add	x3, x1, #0x1
    5684:	b	5640 <lzma_index_iter_locate@@XZ_5.0+0x98>
    5688:	mov	w0, #0x1                   	// #1
    568c:	ret
    5690:	ldr	x0, [x2, #56]
    5694:	brk	#0x3e8
    5698:	ldr	x0, [x2]
    569c:	brk	#0x3e8

00000000000056a0 <lzma_stream_flags_compare@@XZ_5.0>:
    56a0:	mov	x2, x0
    56a4:	ldr	w0, [x0]
    56a8:	cbnz	w0, 5730 <lzma_stream_flags_compare@@XZ_5.0+0x90>
    56ac:	ldr	w0, [x1]
    56b0:	cbnz	w0, 5730 <lzma_stream_flags_compare@@XZ_5.0+0x90>
    56b4:	ldr	w3, [x2, #16]
    56b8:	cmp	w3, #0xf
    56bc:	b.hi	5728 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.pmore
    56c0:	ldr	w4, [x1, #16]
    56c4:	cmp	w4, #0xf
    56c8:	b.hi	5728 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.pmore
    56cc:	cmp	w3, w4
    56d0:	b.ne	5738 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.any
    56d4:	ldr	x2, [x2, #8]
    56d8:	cmn	x2, #0x1
    56dc:	b.eq	5724 <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.none
    56e0:	ldr	x1, [x1, #8]
    56e4:	cmn	x1, #0x1
    56e8:	b.eq	5724 <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.none
    56ec:	sub	x4, x2, #0x4
    56f0:	mov	x3, #0x3fffffffc           	// #17179869180
    56f4:	mov	w0, #0xb                   	// #11
    56f8:	cmp	x4, x3
    56fc:	b.hi	5724 <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.pmore
    5700:	sub	x4, x1, #0x4
    5704:	cmp	x4, x3
    5708:	b.hi	5724 <lzma_stream_flags_compare@@XZ_5.0+0x84>  // b.pmore
    570c:	orr	x0, x2, x1
    5710:	tst	x0, #0x3
    5714:	b.ne	5728 <lzma_stream_flags_compare@@XZ_5.0+0x88>  // b.any
    5718:	cmp	x2, x1
    571c:	mov	w0, #0x9                   	// #9
    5720:	csel	w0, wzr, w0, eq  // eq = none
    5724:	ret
    5728:	mov	w0, #0xb                   	// #11
    572c:	ret
    5730:	mov	w0, #0x8                   	// #8
    5734:	ret
    5738:	mov	w0, #0x9                   	// #9
    573c:	ret

0000000000005740 <lzma_vli_size@@XZ_5.0>:
    5740:	mov	x1, x0
    5744:	mov	w0, #0x0                   	// #0
    5748:	tbnz	x1, #63, 575c <lzma_vli_size@@XZ_5.0+0x1c>
    574c:	nop
    5750:	lsr	x1, x1, #7
    5754:	add	w0, w0, #0x1
    5758:	cbnz	x1, 5750 <lzma_vli_size@@XZ_5.0+0x10>
    575c:	ret

0000000000005760 <lzma_cputhreads@@XZ_5.2>:
    5760:	b	3688 <pthread_cond_timedwait@plt+0x128>
    5764:	nop
    5768:	stp	x29, x30, [sp, #-112]!
    576c:	mov	x29, sp
    5770:	stp	x21, x22, [sp, #32]
    5774:	mov	x22, x2
    5778:	mov	x21, x0
    577c:	ldr	x2, [x0, #16]
    5780:	stp	x19, x20, [sp, #16]
    5784:	mov	x19, x1
    5788:	str	x23, [sp, #48]
    578c:	adrp	x23, 5000 <lzma_index_cat@@XZ_5.0+0x88>
    5790:	add	x23, x23, #0x768
    5794:	cmp	x2, x23
    5798:	b.eq	57a0 <lzma_cputhreads@@XZ_5.2+0x40>  // b.none
    579c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    57a0:	ldr	x20, [x21]
    57a4:	str	x23, [x21, #16]
    57a8:	cbz	x20, 5874 <lzma_cputhreads@@XZ_5.2+0x114>
    57ac:	str	wzr, [x20, #72]
    57b0:	add	x1, x20, #0x58
    57b4:	str	xzr, [x20, #80]
    57b8:	mov	x0, x22
    57bc:	bl	11348 <lzma_lzma_preset@@XZ_5.0+0x1880>
    57c0:	tst	w0, #0xff
    57c4:	mov	w0, #0x8                   	// #8
    57c8:	b.ne	584c <lzma_cputhreads@@XZ_5.2+0xec>  // b.any
    57cc:	ldr	w3, [x22]
    57d0:	cmp	w3, #0xfff
    57d4:	b.ls	584c <lzma_cputhreads@@XZ_5.2+0xec>  // b.plast
    57d8:	sub	w3, w3, #0x1
    57dc:	orr	w3, w3, w3, lsr #2
    57e0:	orr	w3, w3, w3, lsr #3
    57e4:	orr	w3, w3, w3, lsr #4
    57e8:	orr	w3, w3, w3, lsr #8
    57ec:	orr	w3, w3, w3, lsr #16
    57f0:	cmn	w3, #0x1
    57f4:	b.eq	5860 <lzma_cputhreads@@XZ_5.2+0x100>  // b.none
    57f8:	add	w3, w3, #0x1
    57fc:	and	w1, w3, #0xff
    5800:	ubfx	x0, x3, #8, #8
    5804:	ubfx	x2, x3, #16, #8
    5808:	lsr	w3, w3, #24
    580c:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    5810:	strb	w3, [x20, #92]
    5814:	mov	x5, #0xffffffffffffffff    	// #-1
    5818:	strb	w1, [x20, #89]
    581c:	ldr	x3, [x4, #4056]
    5820:	strb	w0, [x20, #90]
    5824:	strb	w2, [x20, #91]
    5828:	mov	x1, x19
    582c:	stur	x5, [x20, #93]
    5830:	mov	x0, x20
    5834:	stp	xzr, xzr, [sp, #64]
    5838:	add	x2, sp, #0x40
    583c:	stp	xzr, xzr, [sp, #80]
    5840:	stp	x3, x22, [sp, #72]
    5844:	stp	xzr, xzr, [sp, #96]
    5848:	bl	3880 <lzma_version_string@@XZ_5.0+0x198>
    584c:	ldp	x19, x20, [sp, #16]
    5850:	ldp	x21, x22, [sp, #32]
    5854:	ldr	x23, [sp, #48]
    5858:	ldp	x29, x30, [sp], #112
    585c:	ret
    5860:	mov	w3, #0xff                  	// #255
    5864:	mov	w2, w3
    5868:	mov	w0, w3
    586c:	mov	w1, w3
    5870:	b	580c <lzma_cputhreads@@XZ_5.2+0xac>
    5874:	mov	x1, x19
    5878:	mov	x0, #0x68                  	// #104
    587c:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    5880:	mov	x20, x0
    5884:	cbz	x0, 58bc <lzma_cputhreads@@XZ_5.2+0x15c>
    5888:	adrp	x1, 5000 <lzma_index_cat@@XZ_5.0+0x88>
    588c:	adrp	x0, 5000 <lzma_index_cat@@XZ_5.0+0x88>
    5890:	add	x1, x1, #0x8f8
    5894:	add	x0, x0, #0x8c8
    5898:	mov	x2, #0xffffffffffffffff    	// #-1
    589c:	str	x20, [x21]
    58a0:	stp	xzr, x2, [x20]
    58a4:	stp	xzr, xzr, [x20, #16]
    58a8:	stp	x1, x0, [x21, #24]
    58ac:	stp	xzr, xzr, [x20, #32]
    58b0:	stp	xzr, xzr, [x20, #48]
    58b4:	str	xzr, [x20, #64]
    58b8:	b	57ac <lzma_cputhreads@@XZ_5.2+0x4c>
    58bc:	mov	w0, #0x5                   	// #5
    58c0:	b	584c <lzma_cputhreads@@XZ_5.2+0xec>
    58c4:	nop
    58c8:	stp	x29, x30, [sp, #-32]!
    58cc:	mov	x29, sp
    58d0:	stp	x19, x20, [sp, #16]
    58d4:	mov	x19, x0
    58d8:	mov	x20, x1
    58dc:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    58e0:	mov	x1, x20
    58e4:	mov	x0, x19
    58e8:	ldp	x19, x20, [sp, #16]
    58ec:	ldp	x29, x30, [sp], #32
    58f0:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    58f4:	nop
    58f8:	stp	x29, x30, [sp, #-96]!
    58fc:	mov	x29, sp
    5900:	stp	x19, x20, [sp, #16]
    5904:	mov	x20, x6
    5908:	ldr	x6, [x6]
    590c:	str	x27, [sp, #80]
    5910:	ldr	w27, [sp, #96]
    5914:	cmp	x6, x7
    5918:	b.cs	5a04 <lzma_cputhreads@@XZ_5.2+0x2a4>  // b.hs, b.nlast
    591c:	mov	x19, x0
    5920:	ldr	w0, [x0, #72]
    5924:	stp	x21, x22, [sp, #32]
    5928:	mov	x21, x7
    592c:	mov	x22, x5
    5930:	stp	x23, x24, [sp, #48]
    5934:	mov	x23, x1
    5938:	mov	x24, x2
    593c:	stp	x25, x26, [sp, #64]
    5940:	mov	x25, x3
    5944:	mov	x26, x4
    5948:	cbnz	w0, 59d0 <lzma_cputhreads@@XZ_5.2+0x270>
    594c:	mov	x5, x7
    5950:	mov	x4, x20
    5954:	mov	x3, x22
    5958:	add	x1, x19, #0x50
    595c:	add	x0, x19, #0x58
    5960:	mov	x2, #0xd                   	// #13
    5964:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    5968:	ldr	x0, [x19, #80]
    596c:	cmp	x0, #0xc
    5970:	b.ls	59f8 <lzma_cputhreads@@XZ_5.2+0x298>  // b.plast
    5974:	ldr	x0, [x20]
    5978:	mov	w1, #0x1                   	// #1
    597c:	str	w1, [x19, #72]
    5980:	cmp	x0, x21
    5984:	b.cs	59f8 <lzma_cputhreads@@XZ_5.2+0x298>  // b.hs, b.nlast
    5988:	ldr	x0, [x19]
    598c:	str	w27, [sp, #96]
    5990:	mov	x7, x21
    5994:	mov	x6, x20
    5998:	mov	x5, x22
    599c:	mov	x4, x26
    59a0:	mov	x3, x25
    59a4:	mov	x2, x24
    59a8:	mov	x1, x23
    59ac:	ldr	x8, [x19, #24]
    59b0:	ldp	x19, x20, [sp, #16]
    59b4:	mov	x16, x8
    59b8:	ldp	x21, x22, [sp, #32]
    59bc:	ldp	x23, x24, [sp, #48]
    59c0:	ldp	x25, x26, [sp, #64]
    59c4:	ldr	x27, [sp, #80]
    59c8:	ldp	x29, x30, [sp], #96
    59cc:	br	x16
    59d0:	cmp	w0, #0x1
    59d4:	b.eq	5988 <lzma_cputhreads@@XZ_5.2+0x228>  // b.none
    59d8:	ldp	x21, x22, [sp, #32]
    59dc:	mov	w0, #0xb                   	// #11
    59e0:	ldp	x23, x24, [sp, #48]
    59e4:	ldp	x25, x26, [sp, #64]
    59e8:	ldp	x19, x20, [sp, #16]
    59ec:	ldr	x27, [sp, #80]
    59f0:	ldp	x29, x30, [sp], #96
    59f4:	ret
    59f8:	ldp	x21, x22, [sp, #32]
    59fc:	ldp	x23, x24, [sp, #48]
    5a00:	ldp	x25, x26, [sp, #64]
    5a04:	mov	w0, #0x0                   	// #0
    5a08:	b	59e8 <lzma_cputhreads@@XZ_5.2+0x288>
    5a0c:	nop

0000000000005a10 <lzma_alone_encoder@@XZ_5.0>:
    5a10:	stp	x29, x30, [sp, #-48]!
    5a14:	mov	x29, sp
    5a18:	stp	x19, x20, [sp, #16]
    5a1c:	mov	x20, x0
    5a20:	str	x21, [sp, #32]
    5a24:	mov	x21, x1
    5a28:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    5a2c:	mov	w19, w0
    5a30:	cbz	w0, 5a48 <lzma_alone_encoder@@XZ_5.0+0x38>
    5a34:	mov	w0, w19
    5a38:	ldp	x19, x20, [sp, #16]
    5a3c:	ldr	x21, [sp, #32]
    5a40:	ldp	x29, x30, [sp], #48
    5a44:	ret
    5a48:	ldp	x1, x0, [x20, #48]
    5a4c:	mov	x2, x21
    5a50:	bl	5768 <lzma_cputhreads@@XZ_5.2+0x8>
    5a54:	mov	w19, w0
    5a58:	cbnz	w0, 5a80 <lzma_alone_encoder@@XZ_5.0+0x70>
    5a5c:	ldr	x0, [x20, #56]
    5a60:	mov	w1, #0x1                   	// #1
    5a64:	ldr	x21, [sp, #32]
    5a68:	strb	w1, [x0, #88]
    5a6c:	strb	w1, [x0, #91]
    5a70:	mov	w0, w19
    5a74:	ldp	x19, x20, [sp, #16]
    5a78:	ldp	x29, x30, [sp], #48
    5a7c:	ret
    5a80:	mov	x0, x20
    5a84:	bl	3320 <lzma_end@plt>
    5a88:	b	5a34 <lzma_alone_encoder@@XZ_5.0+0x24>
    5a8c:	nop
    5a90:	mov	x1, #0xffff                	// #65535
    5a94:	add	x1, x0, x1
    5a98:	mov	x2, #0xfffffffffffffbbc    	// #-1092
    5a9c:	lsr	x1, x1, #16
    5aa0:	movk	x2, #0x7fff, lsl #48
    5aa4:	add	x1, x1, x1, lsl #1
    5aa8:	add	x1, x1, #0x1
    5aac:	sub	x2, x2, x1
    5ab0:	add	x1, x0, x1
    5ab4:	cmp	x0, x2
    5ab8:	csel	x0, x1, xzr, ls  // ls = plast
    5abc:	ret
    5ac0:	sub	sp, sp, #0x120
    5ac4:	stp	x29, x30, [sp, #16]
    5ac8:	add	x29, sp, #0x10
    5acc:	stp	x21, x22, [sp, #48]
    5ad0:	cbz	x0, 5da4 <lzma_alone_encoder@@XZ_5.0+0x394>
    5ad4:	stp	x23, x24, [sp, #64]
    5ad8:	cmp	x2, #0x0
    5adc:	mov	x23, x3
    5ae0:	stp	x25, x26, [sp, #80]
    5ae4:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    5ae8:	mov	x26, x2
    5aec:	mov	w21, #0xb                   	// #11
    5af0:	b.ne	5d88 <lzma_alone_encoder@@XZ_5.0+0x378>  // b.any
    5af4:	stp	x19, x20, [sp, #32]
    5af8:	cmp	x4, #0x0
    5afc:	mov	x25, x4
    5b00:	mov	x19, x5
    5b04:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    5b08:	b.eq	5d84 <lzma_alone_encoder@@XZ_5.0+0x374>  // b.none
    5b0c:	stp	x27, x28, [sp, #96]
    5b10:	mov	x20, x6
    5b14:	ldr	x27, [x5]
    5b18:	cmp	x27, x6
    5b1c:	b.hi	5d60 <lzma_alone_encoder@@XZ_5.0+0x350>  // b.pmore
    5b20:	mov	x22, x0
    5b24:	ldr	w0, [x0]
    5b28:	mov	w21, #0x8                   	// #8
    5b2c:	cmp	w0, #0x1
    5b30:	b.hi	5d60 <lzma_alone_encoder@@XZ_5.0+0x350>  // b.pmore
    5b34:	ldr	w28, [x22, #8]
    5b38:	mov	w21, #0xb                   	// #11
    5b3c:	cmp	w28, #0xf
    5b40:	b.hi	5d60 <lzma_alone_encoder@@XZ_5.0+0x350>  // b.pmore
    5b44:	mov	x24, x1
    5b48:	and	w7, w7, #0xff
    5b4c:	cbz	w7, 5b58 <lzma_alone_encoder@@XZ_5.0+0x148>
    5b50:	ldr	x0, [x22, #32]
    5b54:	cbz	x0, 5d60 <lzma_alone_encoder@@XZ_5.0+0x350>
    5b58:	mov	w0, w28
    5b5c:	mov	w21, #0x3                   	// #3
    5b60:	str	w7, [sp, #120]
    5b64:	bl	30e0 <lzma_check_is_supported@plt>
    5b68:	tst	w0, #0xff
    5b6c:	b.eq	5d60 <lzma_alone_encoder@@XZ_5.0+0x350>  // b.none
    5b70:	sub	x6, x20, x27
    5b74:	mov	w0, w28
    5b78:	and	x6, x6, #0x3
    5b7c:	mov	w21, #0xa                   	// #10
    5b80:	sub	x20, x20, x6
    5b84:	sub	x27, x20, x27
    5b88:	bl	3270 <lzma_check_size@plt>
    5b8c:	mov	w28, w0
    5b90:	cmp	x27, w0, uxtw
    5b94:	b.ls	5d60 <lzma_alone_encoder@@XZ_5.0+0x350>  // b.plast
    5b98:	str	x23, [x22, #24]
    5b9c:	mov	x0, #0xfffffffffffffbbc    	// #-1092
    5ba0:	movk	x0, #0x7fff, lsl #48
    5ba4:	ldr	w7, [sp, #120]
    5ba8:	sub	x20, x20, x28
    5bac:	cmp	x23, x0
    5bb0:	b.hi	5dd8 <lzma_alone_encoder@@XZ_5.0+0x3c8>  // b.pmore
    5bb4:	mov	x0, x23
    5bb8:	str	w7, [sp, #120]
    5bbc:	bl	5a90 <lzma_alone_encoder@@XZ_5.0+0x80>
    5bc0:	str	x0, [x22, #16]
    5bc4:	cbz	x0, 5f98 <lzma_alone_encoder@@XZ_5.0+0x588>
    5bc8:	ldr	w7, [sp, #120]
    5bcc:	cbnz	w7, 5df4 <lzma_alone_encoder@@XZ_5.0+0x3e4>
    5bd0:	add	x27, sp, #0xb0
    5bd4:	add	x3, sp, #0x90
    5bd8:	mov	w1, #0x1000                	// #4096
    5bdc:	mov	x2, #0xffffffffffffffff    	// #-1
    5be0:	ldr	x24, [x22, #32]
    5be4:	str	x3, [x22, #32]
    5be8:	mov	x3, #0x21                  	// #33
    5bec:	stp	xzr, xzr, [sp, #176]
    5bf0:	mov	x0, x22
    5bf4:	stp	x3, x27, [sp, #144]
    5bf8:	str	x2, [sp, #160]
    5bfc:	str	w1, [sp, #176]
    5c00:	stp	xzr, xzr, [sp, #192]
    5c04:	stp	xzr, xzr, [sp, #208]
    5c08:	stp	xzr, xzr, [sp, #224]
    5c0c:	stp	xzr, xzr, [sp, #240]
    5c10:	stp	xzr, xzr, [sp, #256]
    5c14:	stp	xzr, xzr, [sp, #272]
    5c18:	bl	3160 <lzma_block_header_size@plt>
    5c1c:	cbnz	w0, 5dbc <lzma_alone_encoder@@XZ_5.0+0x3ac>
    5c20:	ldr	x1, [x19]
    5c24:	ldr	x2, [x22, #16]
    5c28:	sub	x20, x20, x1
    5c2c:	ldr	w0, [x22, #4]
    5c30:	add	x0, x0, x2
    5c34:	cmp	x20, x0
    5c38:	b.cc	5f90 <lzma_alone_encoder@@XZ_5.0+0x580>  // b.lo, b.ul, b.last
    5c3c:	add	x1, x25, x1
    5c40:	mov	x0, x22
    5c44:	bl	3540 <lzma_block_header_encode@plt>
    5c48:	cbnz	w0, 5dbc <lzma_alone_encoder@@XZ_5.0+0x3ac>
    5c4c:	ldr	x0, [x19]
    5c50:	str	x24, [x22, #32]
    5c54:	ldr	w20, [x22, #4]
    5c58:	add	x20, x20, x0
    5c5c:	str	x20, [x19]
    5c60:	cbz	x23, 5ce4 <lzma_alone_encoder@@XZ_5.0+0x2d4>
    5c64:	mov	x24, #0x0                   	// #0
    5c68:	mov	w0, #0x1                   	// #1
    5c6c:	mov	x21, #0x10000               	// #65536
    5c70:	add	x1, x20, #0x1
    5c74:	str	x1, [x19]
    5c78:	strb	w0, [x25, x20]
    5c7c:	sub	x20, x23, x24
    5c80:	cmp	x20, #0x10, lsl #12
    5c84:	add	x1, x26, x24
    5c88:	ldr	x2, [x19]
    5c8c:	csel	x20, x20, x21, ls  // ls = plast
    5c90:	sub	x0, x20, #0x1
    5c94:	sub	w3, w20, #0x1
    5c98:	add	x4, x2, #0x1
    5c9c:	str	x4, [x19]
    5ca0:	lsr	x0, x0, #8
    5ca4:	strb	w0, [x25, x2]
    5ca8:	mov	x2, x20
    5cac:	add	x24, x24, x20
    5cb0:	ldr	x0, [x19]
    5cb4:	add	x4, x0, #0x1
    5cb8:	str	x4, [x19]
    5cbc:	strb	w3, [x25, x0]
    5cc0:	ldr	x0, [x19]
    5cc4:	add	x0, x25, x0
    5cc8:	bl	3090 <memcpy@plt>
    5ccc:	ldr	x2, [x19]
    5cd0:	cmp	x23, x24
    5cd4:	mov	w0, #0x2                   	// #2
    5cd8:	add	x20, x20, x2
    5cdc:	str	x20, [x19]
    5ce0:	b.hi	5c70 <lzma_alone_encoder@@XZ_5.0+0x260>  // b.pmore
    5ce4:	add	x0, x20, #0x1
    5ce8:	str	x0, [x19]
    5cec:	strb	wzr, [x25, x20]
    5cf0:	ldr	x0, [x22, #16]
    5cf4:	tst	x0, #0x3
    5cf8:	b.eq	5d1c <lzma_alone_encoder@@XZ_5.0+0x30c>  // b.none
    5cfc:	nop
    5d00:	ldr	x1, [x19]
    5d04:	add	x0, x0, #0x1
    5d08:	add	x2, x1, #0x1
    5d0c:	str	x2, [x19]
    5d10:	strb	wzr, [x25, x1]
    5d14:	tst	x0, #0x3
    5d18:	b.ne	5d00 <lzma_alone_encoder@@XZ_5.0+0x2f0>  // b.any
    5d1c:	cbnz	x28, 5ed4 <lzma_alone_encoder@@XZ_5.0+0x4c4>
    5d20:	mov	w21, #0x0                   	// #0
    5d24:	ldp	x19, x20, [sp, #32]
    5d28:	ldp	x23, x24, [sp, #64]
    5d2c:	ldp	x25, x26, [sp, #80]
    5d30:	ldp	x27, x28, [sp, #96]
    5d34:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5d38:	mov	x1, x24
    5d3c:	mov	x0, x27
    5d40:	str	x8, [sp, #120]
    5d44:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    5d48:	cmp	w21, #0x1
    5d4c:	ldr	x8, [sp, #120]
    5d50:	b.eq	5f48 <lzma_alone_encoder@@XZ_5.0+0x538>  // b.none
    5d54:	str	x8, [x19]
    5d58:	cmp	w21, #0xa
    5d5c:	b.eq	5bd0 <lzma_alone_encoder@@XZ_5.0+0x1c0>  // b.none
    5d60:	ldp	x19, x20, [sp, #32]
    5d64:	ldp	x23, x24, [sp, #64]
    5d68:	ldp	x25, x26, [sp, #80]
    5d6c:	ldp	x27, x28, [sp, #96]
    5d70:	mov	w0, w21
    5d74:	ldp	x29, x30, [sp, #16]
    5d78:	ldp	x21, x22, [sp, #48]
    5d7c:	add	sp, sp, #0x120
    5d80:	ret
    5d84:	ldp	x19, x20, [sp, #32]
    5d88:	mov	w0, w21
    5d8c:	ldp	x29, x30, [sp, #16]
    5d90:	ldp	x21, x22, [sp, #48]
    5d94:	ldp	x23, x24, [sp, #64]
    5d98:	ldp	x25, x26, [sp, #80]
    5d9c:	add	sp, sp, #0x120
    5da0:	ret
    5da4:	mov	w21, #0xb                   	// #11
    5da8:	mov	w0, w21
    5dac:	ldp	x29, x30, [sp, #16]
    5db0:	ldp	x21, x22, [sp, #48]
    5db4:	add	sp, sp, #0x120
    5db8:	ret
    5dbc:	mov	w21, #0xb                   	// #11
    5dc0:	ldp	x19, x20, [sp, #32]
    5dc4:	ldp	x25, x26, [sp, #80]
    5dc8:	ldp	x27, x28, [sp, #96]
    5dcc:	str	x24, [x22, #32]
    5dd0:	ldp	x23, x24, [sp, #64]
    5dd4:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5dd8:	mov	w21, #0x9                   	// #9
    5ddc:	ldp	x19, x20, [sp, #32]
    5de0:	ldp	x23, x24, [sp, #64]
    5de4:	ldp	x25, x26, [sp, #80]
    5de8:	ldp	x27, x28, [sp, #96]
    5dec:	str	xzr, [x22, #16]
    5df0:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5df4:	mov	x0, x22
    5df8:	bl	3160 <lzma_block_header_size@plt>
    5dfc:	mov	w21, w0
    5e00:	cbnz	w0, 5d58 <lzma_alone_encoder@@XZ_5.0+0x348>
    5e04:	ldr	x8, [x19]
    5e08:	ldr	w1, [x22, #4]
    5e0c:	sub	x0, x20, x8
    5e10:	cmp	x0, x1
    5e14:	b.ls	5bd0 <lzma_alone_encoder@@XZ_5.0+0x1c0>  // b.plast
    5e18:	add	x1, x8, x1
    5e1c:	add	x27, sp, #0xb0
    5e20:	ldr	x2, [x22, #32]
    5e24:	str	x1, [x19]
    5e28:	sub	x4, x20, x1
    5e2c:	mov	x0, x27
    5e30:	ldr	x3, [x22, #16]
    5e34:	stp	xzr, xzr, [sp, #192]
    5e38:	cmp	x4, x3
    5e3c:	add	x1, x1, x3
    5e40:	csel	x7, x1, x20, hi  // hi = pmore
    5e44:	mov	x3, #0xffffffffffffffff    	// #-1
    5e48:	mov	x1, x24
    5e4c:	stp	x8, x7, [sp, #120]
    5e50:	stp	xzr, x3, [sp, #176]
    5e54:	stp	xzr, xzr, [sp, #208]
    5e58:	stp	xzr, xzr, [sp, #224]
    5e5c:	str	xzr, [sp, #240]
    5e60:	bl	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x48>
    5e64:	mov	w21, w0
    5e68:	ldr	x8, [sp, #120]
    5e6c:	cbnz	w0, 5d38 <lzma_alone_encoder@@XZ_5.0+0x328>
    5e70:	ldr	x7, [sp, #128]
    5e74:	add	x3, sp, #0x90
    5e78:	ldr	x0, [sp, #176]
    5e7c:	mov	w10, #0x3                   	// #3
    5e80:	ldr	x9, [sp, #200]
    5e84:	mov	x6, x19
    5e88:	mov	x5, x25
    5e8c:	mov	x4, x23
    5e90:	mov	x2, x26
    5e94:	str	w10, [sp]
    5e98:	stp	x8, xzr, [sp, #136]
    5e9c:	mov	x1, x24
    5ea0:	str	x3, [sp, #120]
    5ea4:	blr	x9
    5ea8:	mov	x1, x24
    5eac:	mov	w21, w0
    5eb0:	mov	x0, x27
    5eb4:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    5eb8:	cmp	w21, #0x1
    5ebc:	ldr	x3, [sp, #120]
    5ec0:	ldr	x8, [sp, #136]
    5ec4:	b.eq	5f48 <lzma_alone_encoder@@XZ_5.0+0x538>  // b.none
    5ec8:	cbnz	w21, 5d54 <lzma_alone_encoder@@XZ_5.0+0x344>
    5ecc:	str	x8, [x19]
    5ed0:	b	5bd8 <lzma_alone_encoder@@XZ_5.0+0x1c8>
    5ed4:	ldr	w1, [x22, #8]
    5ed8:	mov	x0, x27
    5edc:	mov	w21, #0x0                   	// #0
    5ee0:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    5ee4:	ldr	w1, [x22, #8]
    5ee8:	mov	x3, x23
    5eec:	mov	x2, x26
    5ef0:	mov	x0, x27
    5ef4:	bl	c4e0 <lzma_check_size@@XZ_5.0+0x58>
    5ef8:	ldr	w1, [x22, #8]
    5efc:	mov	x0, x27
    5f00:	bl	c560 <lzma_check_size@@XZ_5.0+0xd8>
    5f04:	mov	x2, x28
    5f08:	mov	x1, x27
    5f0c:	add	x0, x22, #0x28
    5f10:	bl	3090 <memcpy@plt>
    5f14:	ldr	x0, [x19]
    5f18:	mov	x1, x27
    5f1c:	mov	x2, x28
    5f20:	add	x0, x25, x0
    5f24:	bl	3090 <memcpy@plt>
    5f28:	ldr	x0, [x19]
    5f2c:	ldp	x23, x24, [sp, #64]
    5f30:	add	x28, x0, x28
    5f34:	ldp	x25, x26, [sp, #80]
    5f38:	str	x28, [x19]
    5f3c:	ldp	x19, x20, [sp, #32]
    5f40:	ldp	x27, x28, [sp, #96]
    5f44:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5f48:	ldr	x2, [x19]
    5f4c:	add	x1, x25, x8
    5f50:	ldr	w3, [x22, #4]
    5f54:	mov	x0, x22
    5f58:	sub	x2, x2, x8
    5f5c:	str	x8, [sp, #120]
    5f60:	sub	x2, x2, x3
    5f64:	str	x2, [x22, #16]
    5f68:	bl	3540 <lzma_block_header_encode@plt>
    5f6c:	cbz	w0, 5cf0 <lzma_alone_encoder@@XZ_5.0+0x2e0>
    5f70:	ldr	x8, [sp, #120]
    5f74:	mov	w21, #0xb                   	// #11
    5f78:	ldp	x23, x24, [sp, #64]
    5f7c:	ldp	x25, x26, [sp, #80]
    5f80:	ldp	x27, x28, [sp, #96]
    5f84:	str	x8, [x19]
    5f88:	ldp	x19, x20, [sp, #32]
    5f8c:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5f90:	mov	w21, #0xa                   	// #10
    5f94:	b	5dc0 <lzma_alone_encoder@@XZ_5.0+0x3b0>
    5f98:	mov	w21, #0x9                   	// #9
    5f9c:	ldp	x19, x20, [sp, #32]
    5fa0:	ldp	x23, x24, [sp, #64]
    5fa4:	ldp	x25, x26, [sp, #80]
    5fa8:	ldp	x27, x28, [sp, #96]
    5fac:	b	5d70 <lzma_alone_encoder@@XZ_5.0+0x360>
    5fb0:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    5fb4:	movk	x1, #0x7fff, lsl #48
    5fb8:	cmp	x0, x1
    5fbc:	b.hi	5fe8 <lzma_alone_encoder@@XZ_5.0+0x5d8>  // b.pmore
    5fc0:	stp	x29, x30, [sp, #-16]!
    5fc4:	mov	x29, sp
    5fc8:	bl	5a90 <lzma_alone_encoder@@XZ_5.0+0x80>
    5fcc:	add	x1, x0, #0x3
    5fd0:	and	x1, x1, #0xfffffffffffffffc
    5fd4:	cmp	x0, #0x0
    5fd8:	add	x1, x1, #0x5c
    5fdc:	csel	x0, x1, x0, ne  // ne = any
    5fe0:	ldp	x29, x30, [sp], #16
    5fe4:	ret
    5fe8:	mov	x0, #0x0                   	// #0
    5fec:	ret

0000000000005ff0 <lzma_block_buffer_bound@@XZ_5.0>:
    5ff0:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    5ff4:	movk	x1, #0x7fff, lsl #48
    5ff8:	cmp	x0, x1
    5ffc:	b.hi	6028 <lzma_block_buffer_bound@@XZ_5.0+0x38>  // b.pmore
    6000:	stp	x29, x30, [sp, #-16]!
    6004:	mov	x29, sp
    6008:	bl	5a90 <lzma_alone_encoder@@XZ_5.0+0x80>
    600c:	add	x1, x0, #0x3
    6010:	and	x1, x1, #0xfffffffffffffffc
    6014:	cmp	x0, #0x0
    6018:	add	x1, x1, #0x5c
    601c:	csel	x0, x1, x0, ne  // ne = any
    6020:	ldp	x29, x30, [sp], #16
    6024:	ret
    6028:	mov	x0, #0x0                   	// #0
    602c:	ret

0000000000006030 <lzma_block_buffer_encode@@XZ_5.0>:
    6030:	mov	w7, #0x1                   	// #1
    6034:	b	5ac0 <lzma_alone_encoder@@XZ_5.0+0xb0>

0000000000006038 <lzma_block_uncomp_encode@@XZ_5.2>:
    6038:	mov	x8, x2
    603c:	mov	x6, x3
    6040:	mov	x7, x4
    6044:	mov	x2, x1
    6048:	mov	x4, x6
    604c:	mov	x3, x8
    6050:	mov	x6, x5
    6054:	mov	x1, #0x0                   	// #0
    6058:	mov	x5, x7
    605c:	mov	w7, #0x0                   	// #0
    6060:	b	5ac0 <lzma_alone_encoder@@XZ_5.0+0xb0>
    6064:	nop
    6068:	mov	x2, x3
    606c:	ldr	w3, [x0, #80]
    6070:	cbnz	w3, 6078 <lzma_block_uncomp_encode@@XZ_5.2+0x40>
    6074:	b	3908 <lzma_version_string@@XZ_5.0+0x220>
    6078:	mov	w0, #0xb                   	// #11
    607c:	ret
    6080:	stp	x29, x30, [sp, #-32]!
    6084:	mov	x29, sp
    6088:	stp	x19, x20, [sp, #16]
    608c:	mov	x19, x0
    6090:	mov	x20, x1
    6094:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    6098:	mov	x1, x20
    609c:	mov	x0, x19
    60a0:	ldp	x19, x20, [sp, #16]
    60a4:	ldp	x29, x30, [sp], #32
    60a8:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    60ac:	nop
    60b0:	sub	sp, sp, #0x60
    60b4:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    60b8:	stp	x29, x30, [sp, #16]
    60bc:	add	x29, sp, #0x10
    60c0:	ldr	x9, [x0, #96]
    60c4:	stp	x25, x26, [sp, #80]
    60c8:	ldr	x26, [x3]
    60cc:	stp	x19, x20, [sp, #32]
    60d0:	sub	x8, x8, x9
    60d4:	stp	x21, x22, [sp, #48]
    60d8:	mov	x19, x0
    60dc:	sub	x0, x4, x26
    60e0:	cmp	x8, x0
    60e4:	b.cc	6138 <lzma_block_uncomp_encode@@XZ_5.2+0x100>  // b.lo, b.ul, b.last
    60e8:	ldr	w0, [x19, #80]
    60ec:	mov	x20, x6
    60f0:	stp	x23, x24, [sp, #64]
    60f4:	mov	x21, x7
    60f8:	mov	x23, x5
    60fc:	cmp	w0, #0x1
    6100:	b.eq	624c <lzma_block_uncomp_encode@@XZ_5.2+0x214>  // b.none
    6104:	cmp	w0, #0x2
    6108:	b.eq	6254 <lzma_block_uncomp_encode@@XZ_5.2+0x21c>  // b.none
    610c:	cbz	w0, 6158 <lzma_block_uncomp_encode@@XZ_5.2+0x120>
    6110:	mov	w22, #0xb                   	// #11
    6114:	mov	w0, w22
    6118:	ldp	x29, x30, [sp, #16]
    611c:	ldp	x19, x20, [sp, #32]
    6120:	ldp	x21, x22, [sp, #48]
    6124:	ldp	x23, x24, [sp, #64]
    6128:	ldp	x25, x26, [sp, #80]
    612c:	add	sp, sp, #0x60
    6130:	ret
    6134:	ldp	x23, x24, [sp, #64]
    6138:	mov	w22, #0x9                   	// #9
    613c:	mov	w0, w22
    6140:	ldp	x29, x30, [sp, #16]
    6144:	ldp	x19, x20, [sp, #32]
    6148:	ldp	x21, x22, [sp, #48]
    614c:	ldp	x25, x26, [sp, #80]
    6150:	add	sp, sp, #0x60
    6154:	ret
    6158:	ldr	w8, [sp, #96]
    615c:	mov	x24, x3
    6160:	ldr	x0, [x19]
    6164:	str	w8, [sp]
    6168:	mov	x25, x2
    616c:	ldr	x8, [x19, #24]
    6170:	ldr	x22, [x6]
    6174:	blr	x8
    6178:	ldr	x1, [x20]
    617c:	mov	x2, #0xfffffffffffffbbc    	// #-1092
    6180:	ldr	x3, [x19, #88]
    6184:	sub	x1, x1, x22
    6188:	movk	x2, #0x7fff, lsl #48
    618c:	mov	w22, w0
    6190:	sub	x2, x2, x3
    6194:	cmp	x2, x1
    6198:	b.cc	6134 <lzma_block_uncomp_encode@@XZ_5.2+0xfc>  // b.lo, b.ul, b.last
    619c:	ldr	x2, [x19, #72]
    61a0:	add	x1, x3, x1
    61a4:	ldr	x3, [x24]
    61a8:	str	x1, [x19, #88]
    61ac:	ldr	x0, [x19, #96]
    61b0:	sub	x3, x3, x26
    61b4:	ldr	w1, [x2, #8]
    61b8:	add	x2, x25, x26
    61bc:	add	x0, x0, x3
    61c0:	str	x0, [x19, #96]
    61c4:	add	x0, x19, #0x70
    61c8:	bl	c4e0 <lzma_check_size@@XZ_5.0+0x58>
    61cc:	ldr	w0, [sp, #96]
    61d0:	cmp	w22, #0x1
    61d4:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    61d8:	b.eq	62f0 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>  // b.none
    61dc:	ldr	x0, [x19, #72]
    61e0:	mov	w1, #0x1                   	// #1
    61e4:	ldp	x2, x3, [x19, #88]
    61e8:	stp	x2, x3, [x0, #16]
    61ec:	str	w1, [x19, #80]
    61f0:	tst	x2, #0x3
    61f4:	b.eq	62c8 <lzma_block_uncomp_encode@@XZ_5.2+0x290>  // b.none
    61f8:	ldr	x1, [x20]
    61fc:	sub	x2, x2, x1
    6200:	b	6220 <lzma_block_uncomp_encode@@XZ_5.2+0x1e8>
    6204:	strb	wzr, [x23, x1]
    6208:	add	x1, x1, #0x1
    620c:	add	x0, x2, x1
    6210:	str	x1, [x20]
    6214:	str	x0, [x19, #88]
    6218:	tst	x0, #0x3
    621c:	b.eq	62c8 <lzma_block_uncomp_encode@@XZ_5.2+0x290>  // b.none
    6220:	cmp	x21, x1
    6224:	b.hi	6204 <lzma_block_uncomp_encode@@XZ_5.2+0x1cc>  // b.pmore
    6228:	mov	w22, #0x0                   	// #0
    622c:	mov	w0, w22
    6230:	ldp	x29, x30, [sp, #16]
    6234:	ldp	x19, x20, [sp, #32]
    6238:	ldp	x21, x22, [sp, #48]
    623c:	ldp	x23, x24, [sp, #64]
    6240:	ldp	x25, x26, [sp, #80]
    6244:	add	sp, sp, #0x60
    6248:	ret
    624c:	ldr	x2, [x19, #88]
    6250:	b	61f0 <lzma_block_uncomp_encode@@XZ_5.2+0x1b8>
    6254:	add	x25, x19, #0x70
    6258:	ldr	x0, [x19, #72]
    625c:	ldr	w0, [x0, #8]
    6260:	bl	3270 <lzma_check_size@plt>
    6264:	mov	w24, w0
    6268:	mov	x5, x21
    626c:	mov	x4, x20
    6270:	mov	x3, x23
    6274:	mov	x2, x24
    6278:	add	x1, x19, #0x68
    627c:	mov	x0, x25
    6280:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    6284:	ldr	x0, [x19, #104]
    6288:	cmp	x0, x24
    628c:	b.cc	6228 <lzma_block_uncomp_encode@@XZ_5.2+0x1f0>  // b.lo, b.ul, b.last
    6290:	ldr	x0, [x19, #72]
    6294:	mov	x2, x24
    6298:	mov	x1, x25
    629c:	mov	w22, #0x1                   	// #1
    62a0:	add	x0, x0, #0x28
    62a4:	bl	3090 <memcpy@plt>
    62a8:	mov	w0, w22
    62ac:	ldp	x29, x30, [sp, #16]
    62b0:	ldp	x19, x20, [sp, #32]
    62b4:	ldp	x21, x22, [sp, #48]
    62b8:	ldp	x23, x24, [sp, #64]
    62bc:	ldp	x25, x26, [sp, #80]
    62c0:	add	sp, sp, #0x60
    62c4:	ret
    62c8:	ldr	x0, [x19, #72]
    62cc:	mov	w22, #0x1                   	// #1
    62d0:	ldr	w1, [x0, #8]
    62d4:	cbz	w1, 62f0 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>
    62d8:	add	x25, x19, #0x70
    62dc:	mov	x0, x25
    62e0:	bl	c560 <lzma_check_size@@XZ_5.0+0xd8>
    62e4:	mov	w0, #0x2                   	// #2
    62e8:	str	w0, [x19, #80]
    62ec:	b	6258 <lzma_block_uncomp_encode@@XZ_5.2+0x220>
    62f0:	mov	w0, w22
    62f4:	ldp	x29, x30, [sp, #16]
    62f8:	ldp	x19, x20, [sp, #32]
    62fc:	ldp	x21, x22, [sp, #48]
    6300:	ldp	x23, x24, [sp, #64]
    6304:	ldp	x25, x26, [sp, #80]
    6308:	add	sp, sp, #0x60
    630c:	ret
    6310:	stp	x29, x30, [sp, #-64]!
    6314:	mov	x29, sp
    6318:	stp	x19, x20, [sp, #16]
    631c:	mov	x19, x2
    6320:	mov	x20, x0
    6324:	ldr	x2, [x0, #16]
    6328:	stp	x21, x22, [sp, #32]
    632c:	adrp	x21, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6330:	str	x23, [sp, #48]
    6334:	add	x21, x21, #0x310
    6338:	cmp	x2, x21
    633c:	mov	x23, x1
    6340:	b.eq	6348 <lzma_block_uncomp_encode@@XZ_5.2+0x310>  // b.none
    6344:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    6348:	str	x21, [x20, #16]
    634c:	cbz	x19, 63bc <lzma_block_uncomp_encode@@XZ_5.2+0x384>
    6350:	ldr	w0, [x19]
    6354:	cmp	w0, #0x1
    6358:	b.hi	63d4 <lzma_block_uncomp_encode@@XZ_5.2+0x39c>  // b.pmore
    635c:	ldr	w22, [x19, #8]
    6360:	cmp	w22, #0xf
    6364:	b.hi	63bc <lzma_block_uncomp_encode@@XZ_5.2+0x384>  // b.pmore
    6368:	mov	w0, w22
    636c:	bl	30e0 <lzma_check_is_supported@plt>
    6370:	tst	w0, #0xff
    6374:	b.eq	6444 <lzma_block_uncomp_encode@@XZ_5.2+0x40c>  // b.none
    6378:	ldr	x21, [x20]
    637c:	cbz	x21, 63ec <lzma_block_uncomp_encode@@XZ_5.2+0x3b4>
    6380:	str	x19, [x21, #72]
    6384:	mov	w1, w22
    6388:	str	wzr, [x21, #80]
    638c:	add	x0, x21, #0x70
    6390:	stp	xzr, xzr, [x21, #88]
    6394:	str	xzr, [x21, #104]
    6398:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    639c:	mov	x1, x23
    63a0:	mov	x0, x21
    63a4:	ldr	x2, [x19, #32]
    63a8:	ldp	x19, x20, [sp, #16]
    63ac:	ldp	x21, x22, [sp, #32]
    63b0:	ldr	x23, [sp, #48]
    63b4:	ldp	x29, x30, [sp], #64
    63b8:	b	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x48>
    63bc:	mov	w0, #0xb                   	// #11
    63c0:	ldp	x19, x20, [sp, #16]
    63c4:	ldp	x21, x22, [sp, #32]
    63c8:	ldr	x23, [sp, #48]
    63cc:	ldp	x29, x30, [sp], #64
    63d0:	ret
    63d4:	mov	w0, #0x8                   	// #8
    63d8:	ldp	x19, x20, [sp, #16]
    63dc:	ldp	x21, x22, [sp, #32]
    63e0:	ldr	x23, [sp, #48]
    63e4:	ldp	x29, x30, [sp], #64
    63e8:	ret
    63ec:	mov	x1, x23
    63f0:	mov	x0, #0xd8                  	// #216
    63f4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    63f8:	mov	x21, x0
    63fc:	cbz	x0, 645c <lzma_block_uncomp_encode@@XZ_5.2+0x424>
    6400:	ldr	w22, [x19, #8]
    6404:	adrp	x2, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6408:	adrp	x1, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    640c:	add	x2, x2, #0xb0
    6410:	add	x1, x1, #0x80
    6414:	adrp	x0, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6418:	mov	x3, #0xffffffffffffffff    	// #-1
    641c:	add	x0, x0, #0x68
    6420:	str	x21, [x20]
    6424:	stp	xzr, x3, [x21]
    6428:	stp	xzr, xzr, [x21, #16]
    642c:	stp	x2, x1, [x20, #24]
    6430:	stp	xzr, xzr, [x21, #32]
    6434:	stp	xzr, xzr, [x21, #48]
    6438:	str	x0, [x20, #64]
    643c:	str	xzr, [x21, #64]
    6440:	b	6380 <lzma_block_uncomp_encode@@XZ_5.2+0x348>
    6444:	mov	w0, #0x3                   	// #3
    6448:	ldp	x19, x20, [sp, #16]
    644c:	ldp	x21, x22, [sp, #32]
    6450:	ldr	x23, [sp, #48]
    6454:	ldp	x29, x30, [sp], #64
    6458:	ret
    645c:	mov	w0, #0x5                   	// #5
    6460:	b	63c0 <lzma_block_uncomp_encode@@XZ_5.2+0x388>
    6464:	nop

0000000000006468 <lzma_block_encoder@@XZ_5.0>:
    6468:	stp	x29, x30, [sp, #-48]!
    646c:	mov	x29, sp
    6470:	stp	x19, x20, [sp, #16]
    6474:	mov	x20, x0
    6478:	str	x21, [sp, #32]
    647c:	mov	x21, x1
    6480:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    6484:	mov	w19, w0
    6488:	cbz	w0, 64a0 <lzma_block_encoder@@XZ_5.0+0x38>
    648c:	mov	w0, w19
    6490:	ldp	x19, x20, [sp, #16]
    6494:	ldr	x21, [sp, #32]
    6498:	ldp	x29, x30, [sp], #48
    649c:	ret
    64a0:	ldp	x1, x0, [x20, #48]
    64a4:	mov	x2, x21
    64a8:	bl	6310 <lzma_block_uncomp_encode@@XZ_5.2+0x2d8>
    64ac:	mov	w19, w0
    64b0:	cbnz	w0, 64d8 <lzma_block_encoder@@XZ_5.0+0x70>
    64b4:	ldr	x0, [x20, #56]
    64b8:	mov	w1, #0x1                   	// #1
    64bc:	ldr	x21, [sp, #32]
    64c0:	strb	w1, [x0, #88]
    64c4:	strb	w1, [x0, #91]
    64c8:	mov	w0, w19
    64cc:	ldp	x19, x20, [sp, #16]
    64d0:	ldp	x29, x30, [sp], #48
    64d4:	ret
    64d8:	mov	x0, x20
    64dc:	bl	3320 <lzma_end@plt>
    64e0:	b	648c <lzma_block_encoder@@XZ_5.0+0x24>
    64e4:	nop

00000000000064e8 <lzma_block_header_size@@XZ_5.0>:
    64e8:	stp	x29, x30, [sp, #-64]!
    64ec:	mov	x29, sp
    64f0:	stp	x19, x20, [sp, #16]
    64f4:	mov	x19, x0
    64f8:	ldr	w0, [x0]
    64fc:	cmp	w0, #0x1
    6500:	b.hi	65c0 <lzma_block_header_size@@XZ_5.0+0xd8>  // b.pmore
    6504:	ldr	x20, [x19, #16]
    6508:	cmn	x20, #0x1
    650c:	b.eq	65b8 <lzma_block_header_size@@XZ_5.0+0xd0>  // b.none
    6510:	mov	x0, x20
    6514:	bl	3480 <lzma_vli_size@plt>
    6518:	cmp	x20, #0x0
    651c:	mov	w20, w0
    6520:	ccmp	w20, #0x0, #0x4, ne  // ne = any
    6524:	mov	w0, #0xb                   	// #11
    6528:	add	w20, w20, #0x6
    652c:	b.eq	65ac <lzma_block_header_size@@XZ_5.0+0xc4>  // b.none
    6530:	ldr	x0, [x19, #24]
    6534:	cmn	x0, #0x1
    6538:	b.eq	6550 <lzma_block_header_size@@XZ_5.0+0x68>  // b.none
    653c:	bl	3480 <lzma_vli_size@plt>
    6540:	mov	w1, w0
    6544:	mov	w0, #0xb                   	// #11
    6548:	cbz	w1, 65ac <lzma_block_header_size@@XZ_5.0+0xc4>
    654c:	add	w20, w20, w1
    6550:	ldr	x1, [x19, #32]
    6554:	cbz	x1, 65d0 <lzma_block_header_size@@XZ_5.0+0xe8>
    6558:	ldr	x0, [x1]
    655c:	cmn	x0, #0x1
    6560:	b.eq	65d0 <lzma_block_header_size@@XZ_5.0+0xe8>  // b.none
    6564:	stp	x21, x22, [sp, #32]
    6568:	add	x22, sp, #0x3c
    656c:	mov	x21, #0x10                  	// #16
    6570:	mov	x0, x22
    6574:	bl	30f0 <lzma_filter_flags_size@plt>
    6578:	cbnz	w0, 65ec <lzma_block_header_size@@XZ_5.0+0x104>
    657c:	ldr	x2, [x19, #32]
    6580:	ldr	w3, [sp, #60]
    6584:	add	x1, x2, x21
    6588:	ldr	x2, [x2, x21]
    658c:	add	w20, w20, w3
    6590:	add	x21, x21, #0x10
    6594:	cmn	x2, #0x1
    6598:	b.eq	65d8 <lzma_block_header_size@@XZ_5.0+0xf0>  // b.none
    659c:	cmp	x21, #0x50
    65a0:	b.ne	6570 <lzma_block_header_size@@XZ_5.0+0x88>  // b.any
    65a4:	ldp	x21, x22, [sp, #32]
    65a8:	mov	w0, #0xb                   	// #11
    65ac:	ldp	x19, x20, [sp, #16]
    65b0:	ldp	x29, x30, [sp], #64
    65b4:	ret
    65b8:	mov	w20, #0x6                   	// #6
    65bc:	b	6530 <lzma_block_header_size@@XZ_5.0+0x48>
    65c0:	mov	w0, #0x8                   	// #8
    65c4:	ldp	x19, x20, [sp, #16]
    65c8:	ldp	x29, x30, [sp], #64
    65cc:	ret
    65d0:	mov	w0, #0xb                   	// #11
    65d4:	b	65ac <lzma_block_header_size@@XZ_5.0+0xc4>
    65d8:	add	w20, w20, #0x3
    65dc:	and	w20, w20, #0xfffffffc
    65e0:	ldp	x21, x22, [sp, #32]
    65e4:	str	w20, [x19, #4]
    65e8:	b	65ac <lzma_block_header_size@@XZ_5.0+0xc4>
    65ec:	ldp	x21, x22, [sp, #32]
    65f0:	b	65ac <lzma_block_header_size@@XZ_5.0+0xc4>
    65f4:	nop

00000000000065f8 <lzma_block_header_encode@@XZ_5.0>:
    65f8:	stp	x29, x30, [sp, #-96]!
    65fc:	mov	x29, sp
    6600:	stp	x19, x20, [sp, #16]
    6604:	mov	x20, x0
    6608:	stp	x25, x26, [sp, #64]
    660c:	mov	x25, x1
    6610:	bl	3190 <lzma_block_unpadded_size@plt>
    6614:	cbz	x0, 66d4 <lzma_block_header_encode@@XZ_5.0+0xdc>
    6618:	ldr	x0, [x20, #24]
    661c:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    6620:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    6624:	add	x0, x0, x2
    6628:	cmp	x0, x1
    662c:	b.ls	66d4 <lzma_block_header_encode@@XZ_5.0+0xdc>  // b.plast
    6630:	stp	x23, x24, [sp, #48]
    6634:	mov	x0, #0x2                   	// #2
    6638:	ldr	w23, [x20, #4]
    663c:	strb	wzr, [x25, #1]
    6640:	sub	w24, w23, #0x4
    6644:	str	x0, [sp, #88]
    6648:	mov	x23, x24
    664c:	lsr	w0, w24, #2
    6650:	strb	w0, [x25]
    6654:	ldr	x0, [x20, #16]
    6658:	cmn	x0, #0x1
    665c:	b.ne	66ec <lzma_block_header_encode@@XZ_5.0+0xf4>  // b.any
    6660:	ldr	x0, [x20, #24]
    6664:	cmn	x0, #0x1
    6668:	b.ne	6720 <lzma_block_header_encode@@XZ_5.0+0x128>  // b.any
    666c:	ldr	x0, [x20, #32]
    6670:	cbz	x0, 66d0 <lzma_block_header_encode@@XZ_5.0+0xd8>
    6674:	ldr	x1, [x0]
    6678:	cmn	x1, #0x1
    667c:	b.eq	66d0 <lzma_block_header_encode@@XZ_5.0+0xd8>  // b.none
    6680:	add	x26, sp, #0x58
    6684:	stp	x21, x22, [sp, #32]
    6688:	mov	x22, #0x0                   	// #0
    668c:	lsl	x21, x22, #4
    6690:	mov	x3, x24
    6694:	add	x0, x0, x21
    6698:	mov	x2, x26
    669c:	mov	x1, x25
    66a0:	add	x22, x22, #0x1
    66a4:	bl	3350 <lzma_filter_flags_encode@plt>
    66a8:	mov	w19, w0
    66ac:	cbnz	w0, 674c <lzma_block_header_encode@@XZ_5.0+0x154>
    66b0:	ldr	x0, [x20, #32]
    66b4:	add	x21, x0, x21
    66b8:	ldr	x1, [x21, #16]
    66bc:	cmn	x1, #0x1
    66c0:	b.eq	6768 <lzma_block_header_encode@@XZ_5.0+0x170>  // b.none
    66c4:	cmp	x22, #0x4
    66c8:	b.ne	668c <lzma_block_header_encode@@XZ_5.0+0x94>  // b.any
    66cc:	ldp	x21, x22, [sp, #32]
    66d0:	ldp	x23, x24, [sp, #48]
    66d4:	mov	w19, #0xb                   	// #11
    66d8:	mov	w0, w19
    66dc:	ldp	x19, x20, [sp, #16]
    66e0:	ldp	x25, x26, [sp, #64]
    66e4:	ldp	x29, x30, [sp], #96
    66e8:	ret
    66ec:	mov	x4, x24
    66f0:	add	x3, sp, #0x58
    66f4:	mov	x2, x25
    66f8:	mov	x1, #0x0                   	// #0
    66fc:	bl	3450 <lzma_vli_encode@plt>
    6700:	mov	w19, w0
    6704:	cbnz	w0, 6750 <lzma_block_header_encode@@XZ_5.0+0x158>
    6708:	ldrb	w0, [x25, #1]
    670c:	orr	w0, w0, #0x40
    6710:	strb	w0, [x25, #1]
    6714:	ldr	x0, [x20, #24]
    6718:	cmn	x0, #0x1
    671c:	b.eq	666c <lzma_block_header_encode@@XZ_5.0+0x74>  // b.none
    6720:	mov	x4, x24
    6724:	add	x3, sp, #0x58
    6728:	mov	x2, x25
    672c:	mov	x1, #0x0                   	// #0
    6730:	bl	3450 <lzma_vli_encode@plt>
    6734:	mov	w19, w0
    6738:	cbnz	w0, 6750 <lzma_block_header_encode@@XZ_5.0+0x158>
    673c:	ldrb	w0, [x25, #1]
    6740:	orr	w0, w0, #0xffffff80
    6744:	strb	w0, [x25, #1]
    6748:	b	666c <lzma_block_header_encode@@XZ_5.0+0x74>
    674c:	ldp	x21, x22, [sp, #32]
    6750:	mov	w0, w19
    6754:	ldp	x19, x20, [sp, #16]
    6758:	ldp	x23, x24, [sp, #48]
    675c:	ldp	x25, x26, [sp, #64]
    6760:	ldp	x29, x30, [sp], #96
    6764:	ret
    6768:	ldrb	w1, [x25, #1]
    676c:	sub	w2, w22, #0x1
    6770:	ldr	x0, [sp, #88]
    6774:	orr	w2, w2, w1
    6778:	strb	w2, [x25, #1]
    677c:	mov	w1, #0x0                   	// #0
    6780:	sub	x2, x24, x0
    6784:	add	x0, x25, x0
    6788:	bl	3230 <memset@plt>
    678c:	mov	x1, x24
    6790:	mov	x0, x25
    6794:	mov	w2, #0x0                   	// #0
    6798:	bl	31c0 <lzma_crc32@plt>
    679c:	str	w0, [x25, w23, uxtw]
    67a0:	ldp	x21, x22, [sp, #32]
    67a4:	ldp	x23, x24, [sp, #48]
    67a8:	b	66d8 <lzma_block_header_encode@@XZ_5.0+0xe0>
    67ac:	nop

00000000000067b0 <lzma_easy_buffer_encode@@XZ_5.0>:
    67b0:	stp	x29, x30, [sp, #-272]!
    67b4:	mov	x29, sp
    67b8:	stp	x25, x26, [sp, #64]
    67bc:	add	x26, sp, #0x50
    67c0:	mov	x25, x7
    67c4:	stp	x19, x20, [sp, #16]
    67c8:	mov	w19, w1
    67cc:	mov	x20, x2
    67d0:	mov	w1, w0
    67d4:	mov	x0, x26
    67d8:	stp	x21, x22, [sp, #32]
    67dc:	mov	x21, x3
    67e0:	mov	x22, x4
    67e4:	stp	x23, x24, [sp, #48]
    67e8:	mov	x23, x5
    67ec:	mov	x24, x6
    67f0:	bl	3f48 <lzma_block_total_size@@XZ_5.0+0x28>
    67f4:	tst	w0, #0xff
    67f8:	b.ne	6838 <lzma_easy_buffer_encode@@XZ_5.0+0x88>  // b.any
    67fc:	mov	x7, x25
    6800:	mov	x6, x24
    6804:	mov	x5, x23
    6808:	mov	x4, x22
    680c:	mov	x3, x21
    6810:	mov	x2, x20
    6814:	mov	w1, w19
    6818:	mov	x0, x26
    681c:	bl	31f0 <lzma_stream_buffer_encode@plt>
    6820:	ldp	x19, x20, [sp, #16]
    6824:	ldp	x21, x22, [sp, #32]
    6828:	ldp	x23, x24, [sp, #48]
    682c:	ldp	x25, x26, [sp, #64]
    6830:	ldp	x29, x30, [sp], #272
    6834:	ret
    6838:	mov	w0, #0x8                   	// #8
    683c:	ldp	x19, x20, [sp, #16]
    6840:	ldp	x21, x22, [sp, #32]
    6844:	ldp	x23, x24, [sp, #48]
    6848:	ldp	x25, x26, [sp, #64]
    684c:	ldp	x29, x30, [sp], #272
    6850:	ret
    6854:	nop

0000000000006858 <lzma_easy_encoder@@XZ_5.0>:
    6858:	stp	x29, x30, [sp, #-240]!
    685c:	mov	x29, sp
    6860:	str	x21, [sp, #32]
    6864:	add	x21, sp, #0x30
    6868:	stp	x19, x20, [sp, #16]
    686c:	mov	x19, x0
    6870:	mov	w20, w2
    6874:	mov	x0, x21
    6878:	bl	3f48 <lzma_block_total_size@@XZ_5.0+0x28>
    687c:	tst	w0, #0xff
    6880:	b.ne	68a4 <lzma_easy_encoder@@XZ_5.0+0x4c>  // b.any
    6884:	mov	w2, w20
    6888:	mov	x1, x21
    688c:	mov	x0, x19
    6890:	bl	34a0 <lzma_stream_encoder@plt>
    6894:	ldp	x19, x20, [sp, #16]
    6898:	ldr	x21, [sp, #32]
    689c:	ldp	x29, x30, [sp], #240
    68a0:	ret
    68a4:	mov	w0, #0x8                   	// #8
    68a8:	ldp	x19, x20, [sp, #16]
    68ac:	ldr	x21, [sp, #32]
    68b0:	ldp	x29, x30, [sp], #240
    68b4:	ret

00000000000068b8 <lzma_easy_encoder_memusage@@XZ_5.0>:
    68b8:	stp	x29, x30, [sp, #-224]!
    68bc:	mov	w1, w0
    68c0:	mov	x29, sp
    68c4:	str	x19, [sp, #16]
    68c8:	add	x19, sp, #0x20
    68cc:	mov	x0, x19
    68d0:	bl	3f48 <lzma_block_total_size@@XZ_5.0+0x28>
    68d4:	tst	w0, #0xff
    68d8:	b.ne	68f0 <lzma_easy_encoder_memusage@@XZ_5.0+0x38>  // b.any
    68dc:	mov	x0, x19
    68e0:	bl	3220 <lzma_raw_encoder_memusage@plt>
    68e4:	ldr	x19, [sp, #16]
    68e8:	ldp	x29, x30, [sp], #224
    68ec:	ret
    68f0:	mov	x0, #0xffffffff            	// #4294967295
    68f4:	ldr	x19, [sp, #16]
    68f8:	ldp	x29, x30, [sp], #224
    68fc:	ret

0000000000006900 <lzma_raw_buffer_encode@@XZ_5.0>:
    6900:	sub	sp, sp, #0xb0
    6904:	cmp	x2, #0x0
    6908:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    690c:	stp	x29, x30, [sp, #16]
    6910:	add	x29, sp, #0x10
    6914:	stp	x21, x22, [sp, #48]
    6918:	mov	w22, #0xb                   	// #11
    691c:	b.ne	69fc <lzma_raw_buffer_encode@@XZ_5.0+0xfc>  // b.any
    6920:	stp	x19, x20, [sp, #32]
    6924:	cmp	x4, #0x0
    6928:	mov	x19, x5
    692c:	stp	x23, x24, [sp, #64]
    6930:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    6934:	mov	x23, x4
    6938:	mov	w22, #0xb                   	// #11
    693c:	b.eq	6a10 <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.none
    6940:	mov	x20, x2
    6944:	mov	x24, x6
    6948:	ldr	x2, [x5]
    694c:	cmp	x2, x6
    6950:	b.hi	6a10 <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.pmore
    6954:	mov	x21, x3
    6958:	mov	x3, #0xffffffffffffffff    	// #-1
    695c:	stp	x25, x26, [sp, #80]
    6960:	add	x26, sp, #0x68
    6964:	mov	x2, x0
    6968:	mov	x25, x1
    696c:	mov	x0, x26
    6970:	stp	xzr, x3, [sp, #104]
    6974:	stp	xzr, xzr, [sp, #120]
    6978:	stp	xzr, xzr, [sp, #136]
    697c:	stp	xzr, xzr, [sp, #152]
    6980:	str	xzr, [sp, #168]
    6984:	bl	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x48>
    6988:	mov	w22, w0
    698c:	cbnz	w0, 6a2c <lzma_raw_buffer_encode@@XZ_5.0+0x12c>
    6990:	ldr	x0, [sp, #104]
    6994:	mov	x4, x21
    6998:	ldr	x8, [sp, #128]
    699c:	mov	x2, x20
    69a0:	mov	x7, x24
    69a4:	mov	x5, x23
    69a8:	mov	x6, x19
    69ac:	add	x3, sp, #0x60
    69b0:	mov	w1, #0x3                   	// #3
    69b4:	str	w1, [sp]
    69b8:	str	xzr, [sp, #96]
    69bc:	mov	x1, x25
    69c0:	ldr	x21, [x19]
    69c4:	blr	x8
    69c8:	mov	x1, x25
    69cc:	mov	w20, w0
    69d0:	mov	x0, x26
    69d4:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    69d8:	cmp	w20, #0x1
    69dc:	b.eq	6a2c <lzma_raw_buffer_encode@@XZ_5.0+0x12c>  // b.none
    69e0:	cmp	w20, #0x0
    69e4:	mov	w22, #0xa                   	// #10
    69e8:	csel	w22, w20, w22, ne  // ne = any
    69ec:	ldp	x23, x24, [sp, #64]
    69f0:	ldp	x25, x26, [sp, #80]
    69f4:	str	x21, [x19]
    69f8:	ldp	x19, x20, [sp, #32]
    69fc:	mov	w0, w22
    6a00:	ldp	x29, x30, [sp, #16]
    6a04:	ldp	x21, x22, [sp, #48]
    6a08:	add	sp, sp, #0xb0
    6a0c:	ret
    6a10:	mov	w0, w22
    6a14:	ldp	x29, x30, [sp, #16]
    6a18:	ldp	x19, x20, [sp, #32]
    6a1c:	ldp	x21, x22, [sp, #48]
    6a20:	ldp	x23, x24, [sp, #64]
    6a24:	add	sp, sp, #0xb0
    6a28:	ret
    6a2c:	mov	w0, w22
    6a30:	ldp	x29, x30, [sp, #16]
    6a34:	ldp	x19, x20, [sp, #32]
    6a38:	ldp	x21, x22, [sp, #48]
    6a3c:	ldp	x23, x24, [sp, #64]
    6a40:	ldp	x25, x26, [sp, #80]
    6a44:	add	sp, sp, #0xb0
    6a48:	ret
    6a4c:	nop
    6a50:	mov	x3, #0x1                   	// #1
    6a54:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    6a58:	movk	x3, #0x4000, lsl #48
    6a5c:	add	x2, x4, #0xa00
    6a60:	mov	x1, #0x0                   	// #0
    6a64:	b	6a6c <lzma_raw_buffer_encode@@XZ_5.0+0x16c>
    6a68:	ldr	x3, [x2]
    6a6c:	cmp	x0, x3
    6a70:	b.eq	6a8c <lzma_raw_buffer_encode@@XZ_5.0+0x18c>  // b.none
    6a74:	add	x1, x1, #0x1
    6a78:	add	x2, x2, #0x38
    6a7c:	cmp	x1, #0x9
    6a80:	b.ne	6a68 <lzma_raw_buffer_encode@@XZ_5.0+0x168>  // b.any
    6a84:	mov	x0, #0x0                   	// #0
    6a88:	ret
    6a8c:	lsl	x0, x1, #3
    6a90:	add	x4, x4, #0xa00
    6a94:	sub	x1, x0, x1
    6a98:	add	x0, x4, x1, lsl #3
    6a9c:	ret

0000000000006aa0 <lzma_filter_encoder_is_supported@@XZ_5.0>:
    6aa0:	mov	x3, #0x1                   	// #1
    6aa4:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    6aa8:	movk	x3, #0x4000, lsl #48
    6aac:	add	x1, x1, #0xa00
    6ab0:	mov	x2, #0x0                   	// #0
    6ab4:	b	6abc <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    6ab8:	ldr	x3, [x1]
    6abc:	add	x2, x2, #0x1
    6ac0:	cmp	x0, x3
    6ac4:	b.eq	6adc <lzma_filter_encoder_is_supported@@XZ_5.0+0x3c>  // b.none
    6ac8:	add	x1, x1, #0x38
    6acc:	cmp	x2, #0x9
    6ad0:	b.ne	6ab8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x18>  // b.any
    6ad4:	mov	w0, #0x0                   	// #0
    6ad8:	ret
    6adc:	mov	w0, #0x1                   	// #1
    6ae0:	ret
    6ae4:	nop
    6ae8:	adrp	x3, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6aec:	mov	w4, #0x1                   	// #1
    6af0:	add	x3, x3, #0xa50
    6af4:	b	41e8 <lzma_filters_copy@@XZ_5.0+0x188>

0000000000006af8 <lzma_raw_encoder@@XZ_5.0>:
    6af8:	stp	x29, x30, [sp, #-48]!
    6afc:	mov	x29, sp
    6b00:	stp	x19, x20, [sp, #16]
    6b04:	mov	x20, x0
    6b08:	str	x21, [sp, #32]
    6b0c:	mov	x21, x1
    6b10:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    6b14:	mov	w19, w0
    6b18:	cbz	w0, 6b30 <lzma_raw_encoder@@XZ_5.0+0x38>
    6b1c:	mov	w0, w19
    6b20:	ldp	x19, x20, [sp, #16]
    6b24:	ldr	x21, [sp, #32]
    6b28:	ldp	x29, x30, [sp], #48
    6b2c:	ret
    6b30:	ldp	x1, x0, [x20, #48]
    6b34:	mov	x2, x21
    6b38:	adrp	x3, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6b3c:	mov	w4, #0x1                   	// #1
    6b40:	add	x3, x3, #0xa50
    6b44:	bl	41e8 <lzma_filters_copy@@XZ_5.0+0x188>
    6b48:	mov	w19, w0
    6b4c:	cbnz	w0, 6b78 <lzma_raw_encoder@@XZ_5.0+0x80>
    6b50:	ldr	x0, [x20, #56]
    6b54:	mov	w2, #0x101                 	// #257
    6b58:	mov	w1, #0x1                   	// #1
    6b5c:	ldr	x21, [sp, #32]
    6b60:	strh	w2, [x0, #88]
    6b64:	strb	w1, [x0, #91]
    6b68:	mov	w0, w19
    6b6c:	ldp	x19, x20, [sp, #16]
    6b70:	ldp	x29, x30, [sp], #48
    6b74:	ret
    6b78:	mov	x0, x20
    6b7c:	bl	3320 <lzma_end@plt>
    6b80:	b	6b1c <lzma_raw_encoder@@XZ_5.0+0x24>
    6b84:	nop

0000000000006b88 <lzma_raw_encoder_memusage@@XZ_5.0>:
    6b88:	mov	x1, x0
    6b8c:	adrp	x2, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    6b90:	add	x0, x2, #0xa50
    6b94:	b	43e8 <lzma_filters_copy@@XZ_5.0+0x388>

0000000000006b98 <lzma_filters_update@@XZ_5.0>:
    6b98:	stp	x29, x30, [sp, #-128]!
    6b9c:	mov	x29, sp
    6ba0:	stp	x21, x22, [sp, #32]
    6ba4:	ldr	x21, [x0, #56]
    6ba8:	ldr	x22, [x21, #64]
    6bac:	cbz	x22, 6c58 <lzma_filters_update@@XZ_5.0+0xc0>
    6bb0:	stp	x19, x20, [sp, #16]
    6bb4:	mov	x20, x0
    6bb8:	mov	x19, x1
    6bbc:	mov	x0, x1
    6bc0:	bl	3220 <lzma_raw_encoder_memusage@plt>
    6bc4:	cmn	x0, #0x1
    6bc8:	b.eq	6c44 <lzma_filters_update@@XZ_5.0+0xac>  // b.none
    6bcc:	ldr	x0, [x19, #16]
    6bd0:	cmn	x0, #0x1
    6bd4:	b.eq	6c68 <lzma_filters_update@@XZ_5.0+0xd0>  // b.none
    6bd8:	mov	x3, #0x1                   	// #1
    6bdc:	nop
    6be0:	mov	x4, x3
    6be4:	add	x3, x3, #0x1
    6be8:	lsl	x5, x3, #4
    6bec:	ldr	x1, [x19, x5]
    6bf0:	cmn	x1, #0x1
    6bf4:	b.ne	6be0 <lzma_filters_update@@XZ_5.0+0x48>  // b.any
    6bf8:	add	x6, sp, #0x30
    6bfc:	mov	x1, x19
    6c00:	add	x4, x6, x4, lsl #4
    6c04:	add	x0, x19, x5
    6c08:	ldp	x2, x3, [x1], #16
    6c0c:	stp	x2, x3, [x4], #-16
    6c10:	cmp	x1, x0
    6c14:	b.ne	6c08 <lzma_filters_update@@XZ_5.0+0x70>  // b.any
    6c18:	ldr	x0, [x21]
    6c1c:	mov	x2, #0xffffffffffffffff    	// #-1
    6c20:	ldr	x1, [x20, #48]
    6c24:	str	x2, [x6, x5]
    6c28:	mov	x3, x6
    6c2c:	mov	x2, x19
    6c30:	blr	x22
    6c34:	ldp	x19, x20, [sp, #16]
    6c38:	ldp	x21, x22, [sp, #32]
    6c3c:	ldp	x29, x30, [sp], #128
    6c40:	ret
    6c44:	mov	w0, #0x8                   	// #8
    6c48:	ldp	x19, x20, [sp, #16]
    6c4c:	ldp	x21, x22, [sp, #32]
    6c50:	ldp	x29, x30, [sp], #128
    6c54:	ret
    6c58:	mov	w0, #0xb                   	// #11
    6c5c:	ldp	x21, x22, [sp, #32]
    6c60:	ldp	x29, x30, [sp], #128
    6c64:	ret
    6c68:	ldp	x0, x1, [x19]
    6c6c:	add	x6, sp, #0x30
    6c70:	mov	x5, #0x10                  	// #16
    6c74:	stp	x0, x1, [sp, #48]
    6c78:	b	6c18 <lzma_filters_update@@XZ_5.0+0x80>
    6c7c:	nop
    6c80:	stp	x29, x30, [sp, #-64]!
    6c84:	mov	x29, sp
    6c88:	stp	x19, x20, [sp, #16]
    6c8c:	mov	x19, x0
    6c90:	stp	x21, x22, [sp, #32]
    6c94:	mov	x21, #0x1                   	// #1
    6c98:	movk	x21, #0x4000, lsl #48
    6c9c:	ldr	x4, [x19], #16
    6ca0:	str	x23, [sp, #48]
    6ca4:	cmn	x4, #0x1
    6ca8:	b.eq	6d30 <lzma_filters_update@@XZ_5.0+0x198>  // b.none
    6cac:	adrp	x20, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    6cb0:	add	x22, x20, #0xa00
    6cb4:	mov	x23, #0x0                   	// #0
    6cb8:	add	x2, x20, #0xa00
    6cbc:	mov	x3, x21
    6cc0:	mov	x1, #0x0                   	// #0
    6cc4:	b	6cdc <lzma_filters_update@@XZ_5.0+0x144>
    6cc8:	add	x1, x1, #0x1
    6ccc:	add	x2, x2, #0x38
    6cd0:	cmp	x1, #0x9
    6cd4:	b.eq	6d4c <lzma_filters_update@@XZ_5.0+0x1b4>  // b.none
    6cd8:	ldr	x3, [x2]
    6cdc:	cmp	x4, x3
    6ce0:	b.ne	6cc8 <lzma_filters_update@@XZ_5.0+0x130>  // b.any
    6ce4:	lsl	x0, x1, #3
    6ce8:	sub	x1, x0, x1
    6cec:	add	x1, x22, x1, lsl #3
    6cf0:	ldr	x1, [x1, #24]
    6cf4:	cbz	x1, 6d0c <lzma_filters_update@@XZ_5.0+0x174>
    6cf8:	ldur	x0, [x19, #-8]
    6cfc:	blr	x1
    6d00:	cbz	x0, 6d30 <lzma_filters_update@@XZ_5.0+0x198>
    6d04:	cmp	x23, x0
    6d08:	csel	x23, x23, x0, cs  // cs = hs, nlast
    6d0c:	ldr	x4, [x19], #16
    6d10:	cmn	x4, #0x1
    6d14:	b.ne	6cb8 <lzma_filters_update@@XZ_5.0+0x120>  // b.any
    6d18:	mov	x0, x23
    6d1c:	ldp	x19, x20, [sp, #16]
    6d20:	ldp	x21, x22, [sp, #32]
    6d24:	ldr	x23, [sp, #48]
    6d28:	ldp	x29, x30, [sp], #64
    6d2c:	ret
    6d30:	mov	x23, #0x0                   	// #0
    6d34:	mov	x0, x23
    6d38:	ldp	x19, x20, [sp, #16]
    6d3c:	ldp	x21, x22, [sp, #32]
    6d40:	ldr	x23, [sp, #48]
    6d44:	ldp	x29, x30, [sp], #64
    6d48:	ret
    6d4c:	mov	x0, #0x0                   	// #0
    6d50:	ldr	x0, [x0, #24]
    6d54:	brk	#0x3e8

0000000000006d58 <lzma_properties_size@@XZ_5.0>:
    6d58:	mov	x4, #0x1                   	// #1
    6d5c:	adrp	x6, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    6d60:	movk	x4, #0x4000, lsl #48
    6d64:	add	x3, x6, #0xa00
    6d68:	mov	x2, #0x0                   	// #0
    6d6c:	ldr	x5, [x1]
    6d70:	b	6d78 <lzma_properties_size@@XZ_5.0+0x20>
    6d74:	ldr	x4, [x3]
    6d78:	cmp	x5, x4
    6d7c:	b.eq	6da8 <lzma_properties_size@@XZ_5.0+0x50>  // b.none
    6d80:	add	x2, x2, #0x1
    6d84:	add	x3, x3, #0x38
    6d88:	cmp	x2, #0x9
    6d8c:	b.ne	6d74 <lzma_properties_size@@XZ_5.0+0x1c>  // b.any
    6d90:	cmp	x5, #0x0
    6d94:	mov	w0, #0xb                   	// #11
    6d98:	mov	w1, #0x8                   	// #8
    6d9c:	csel	w1, w1, w0, ge  // ge = tcont
    6da0:	mov	w0, w1
    6da4:	ret
    6da8:	lsl	x3, x2, #3
    6dac:	add	x6, x6, #0xa00
    6db0:	sub	x2, x3, x2
    6db4:	add	x2, x6, x2, lsl #3
    6db8:	ldr	x3, [x2, #32]
    6dbc:	cbz	x3, 6dcc <lzma_properties_size@@XZ_5.0+0x74>
    6dc0:	ldr	x1, [x1, #8]
    6dc4:	mov	x16, x3
    6dc8:	br	x16
    6dcc:	ldr	w2, [x2, #40]
    6dd0:	mov	w1, #0x0                   	// #0
    6dd4:	str	w2, [x0]
    6dd8:	mov	w0, w1
    6ddc:	ret

0000000000006de0 <lzma_properties_encode@@XZ_5.0>:
    6de0:	mov	x4, #0x1                   	// #1
    6de4:	adrp	x6, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    6de8:	movk	x4, #0x4000, lsl #48
    6dec:	add	x3, x6, #0xa00
    6df0:	mov	x2, #0x0                   	// #0
    6df4:	ldr	x5, [x0]
    6df8:	b	6e00 <lzma_properties_encode@@XZ_5.0+0x20>
    6dfc:	ldr	x4, [x3]
    6e00:	cmp	x5, x4
    6e04:	b.eq	6e20 <lzma_properties_encode@@XZ_5.0+0x40>  // b.none
    6e08:	add	x2, x2, #0x1
    6e0c:	add	x3, x3, #0x38
    6e10:	cmp	x2, #0x9
    6e14:	b.ne	6dfc <lzma_properties_encode@@XZ_5.0+0x1c>  // b.any
    6e18:	mov	w0, #0xb                   	// #11
    6e1c:	ret
    6e20:	lsl	x3, x2, #3
    6e24:	add	x6, x6, #0xa00
    6e28:	sub	x2, x3, x2
    6e2c:	add	x2, x6, x2, lsl #3
    6e30:	ldr	x2, [x2, #48]
    6e34:	cbz	x2, 6e44 <lzma_properties_encode@@XZ_5.0+0x64>
    6e38:	ldr	x0, [x0, #8]
    6e3c:	mov	x16, x2
    6e40:	br	x16
    6e44:	mov	w0, #0x0                   	// #0
    6e48:	ret
    6e4c:	nop

0000000000006e50 <lzma_filter_flags_size@@XZ_5.0>:
    6e50:	stp	x29, x30, [sp, #-48]!
    6e54:	mov	x2, #0x3fffffffffffffff    	// #4611686018427387903
    6e58:	mov	x29, sp
    6e5c:	ldr	x3, [x1]
    6e60:	stp	x19, x20, [sp, #16]
    6e64:	mov	w20, #0xb                   	// #11
    6e68:	cmp	x3, x2
    6e6c:	b.hi	6eb0 <lzma_filter_flags_size@@XZ_5.0+0x60>  // b.pmore
    6e70:	mov	x19, x1
    6e74:	stp	x21, x22, [sp, #32]
    6e78:	mov	x21, x0
    6e7c:	bl	3370 <lzma_properties_size@plt>
    6e80:	mov	w20, w0
    6e84:	cbnz	w0, 6ec0 <lzma_filter_flags_size@@XZ_5.0+0x70>
    6e88:	ldr	x0, [x19]
    6e8c:	ldr	w22, [x21]
    6e90:	bl	3480 <lzma_vli_size@plt>
    6e94:	mov	w19, w0
    6e98:	mov	w0, w22
    6e9c:	bl	3480 <lzma_vli_size@plt>
    6ea0:	add	w19, w19, w0
    6ea4:	add	w19, w19, w22
    6ea8:	str	w19, [x21]
    6eac:	ldp	x21, x22, [sp, #32]
    6eb0:	mov	w0, w20
    6eb4:	ldp	x19, x20, [sp, #16]
    6eb8:	ldp	x29, x30, [sp], #48
    6ebc:	ret
    6ec0:	mov	w0, w20
    6ec4:	ldp	x19, x20, [sp, #16]
    6ec8:	ldp	x21, x22, [sp, #32]
    6ecc:	ldp	x29, x30, [sp], #48
    6ed0:	ret
    6ed4:	nop

0000000000006ed8 <lzma_filter_flags_encode@@XZ_5.0>:
    6ed8:	stp	x29, x30, [sp, #-64]!
    6edc:	mov	x29, sp
    6ee0:	stp	x19, x20, [sp, #16]
    6ee4:	mov	x19, x0
    6ee8:	ldr	x0, [x0]
    6eec:	stp	x21, x22, [sp, #32]
    6ef0:	mov	x22, x1
    6ef4:	mov	x1, #0x3fffffffffffffff    	// #4611686018427387903
    6ef8:	cmp	x0, x1
    6efc:	b.hi	6f94 <lzma_filter_flags_encode@@XZ_5.0+0xbc>  // b.pmore
    6f00:	mov	x21, x2
    6f04:	mov	x20, x3
    6f08:	mov	x4, x3
    6f0c:	mov	x1, #0x0                   	// #0
    6f10:	mov	x3, x2
    6f14:	mov	x2, x22
    6f18:	bl	3450 <lzma_vli_encode@plt>
    6f1c:	cbz	w0, 6f30 <lzma_filter_flags_encode@@XZ_5.0+0x58>
    6f20:	ldp	x19, x20, [sp, #16]
    6f24:	ldp	x21, x22, [sp, #32]
    6f28:	ldp	x29, x30, [sp], #64
    6f2c:	ret
    6f30:	mov	x1, x19
    6f34:	add	x0, sp, #0x3c
    6f38:	bl	3370 <lzma_properties_size@plt>
    6f3c:	cbnz	w0, 6f20 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    6f40:	ldr	w0, [sp, #60]
    6f44:	mov	x4, x20
    6f48:	mov	x3, x21
    6f4c:	mov	x2, x22
    6f50:	mov	x1, #0x0                   	// #0
    6f54:	bl	3450 <lzma_vli_encode@plt>
    6f58:	cbnz	w0, 6f20 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    6f5c:	ldr	x1, [x21]
    6f60:	ldr	w0, [sp, #60]
    6f64:	sub	x20, x20, x1
    6f68:	cmp	x20, x0
    6f6c:	b.cc	6f94 <lzma_filter_flags_encode@@XZ_5.0+0xbc>  // b.lo, b.ul, b.last
    6f70:	add	x1, x22, x1
    6f74:	mov	x0, x19
    6f78:	bl	3400 <lzma_properties_encode@plt>
    6f7c:	cbnz	w0, 6f20 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    6f80:	ldr	x1, [x21]
    6f84:	ldr	w2, [sp, #60]
    6f88:	add	x1, x1, x2
    6f8c:	str	x1, [x21]
    6f90:	b	6f20 <lzma_filter_flags_encode@@XZ_5.0+0x48>
    6f94:	mov	w0, #0xb                   	// #11
    6f98:	ldp	x19, x20, [sp, #16]
    6f9c:	ldp	x21, x22, [sp, #32]
    6fa0:	ldp	x29, x30, [sp], #64
    6fa4:	ret
    6fa8:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    6fac:	nop
    6fb0:	stp	x29, x30, [sp, #-112]!
    6fb4:	mov	x29, sp
    6fb8:	stp	x21, x22, [sp, #32]
    6fbc:	ldr	x22, [x6]
    6fc0:	stp	x19, x20, [sp, #16]
    6fc4:	mov	x19, x0
    6fc8:	stp	x27, x28, [sp, #80]
    6fcc:	cmp	x22, x7
    6fd0:	mov	x28, x5
    6fd4:	b.cs	7210 <lzma_filter_flags_encode@@XZ_5.0+0x338>  // b.hs, b.nlast
    6fd8:	mov	x20, x6
    6fdc:	mov	x21, x7
    6fe0:	mov	x1, x22
    6fe4:	stp	x23, x24, [sp, #48]
    6fe8:	add	x23, x0, #0x140
    6fec:	add	x24, x0, #0x10
    6ff0:	mov	w27, #0x5                   	// #5
    6ff4:	stp	x25, x26, [sp, #64]
    6ff8:	mov	w26, #0x2                   	// #2
    6ffc:	mov	w25, #0x4                   	// #4
    7000:	ldr	w0, [x19]
    7004:	cmp	w0, #0x4
    7008:	b.eq	7178 <lzma_filter_flags_encode@@XZ_5.0+0x2a0>  // b.none
    700c:	b.hi	7090 <lzma_filter_flags_encode@@XZ_5.0+0x1b8>  // b.pmore
    7010:	cmp	w0, #0x1
    7014:	b.eq	7140 <lzma_filter_flags_encode@@XZ_5.0+0x268>  // b.none
    7018:	b.ls	7100 <lzma_filter_flags_encode@@XZ_5.0+0x228>  // b.plast
    701c:	cmp	w0, #0x2
    7020:	ldr	x0, [x19, #184]
    7024:	b.eq	723c <lzma_filter_flags_encode@@XZ_5.0+0x364>  // b.none
    7028:	mov	x3, x20
    702c:	mov	x4, x21
    7030:	mov	x2, x28
    7034:	mov	x1, x23
    7038:	bl	3450 <lzma_vli_encode@plt>
    703c:	mov	w3, w0
    7040:	cmp	w0, #0x1
    7044:	b.ne	71fc <lzma_filter_flags_encode@@XZ_5.0+0x324>  // b.any
    7048:	ldr	w0, [x19]
    704c:	ldr	x1, [x20]
    7050:	add	w0, w0, #0x1
    7054:	str	w0, [x19]
    7058:	str	xzr, [x19, #320]
    705c:	cmp	x21, x1
    7060:	b.hi	7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>  // b.pmore
    7064:	ldp	x23, x24, [sp, #48]
    7068:	sub	x1, x1, x22
    706c:	ldp	x25, x26, [sp, #64]
    7070:	mov	w3, #0x0                   	// #0
    7074:	ldr	w2, [x19, #328]
    7078:	add	x0, x28, x22
    707c:	str	w3, [sp, #108]
    7080:	bl	31c0 <lzma_crc32@plt>
    7084:	str	w0, [x19, #328]
    7088:	ldr	w3, [sp, #108]
    708c:	b	7128 <lzma_filter_flags_encode@@XZ_5.0+0x250>
    7090:	cmp	w0, #0x5
    7094:	b.eq	7198 <lzma_filter_flags_encode@@XZ_5.0+0x2c0>  // b.none
    7098:	cmp	w0, #0x6
    709c:	b.ne	711c <lzma_filter_flags_encode@@XZ_5.0+0x244>  // b.any
    70a0:	ldr	x0, [x20]
    70a4:	b	70d4 <lzma_filter_flags_encode@@XZ_5.0+0x1fc>
    70a8:	ldr	x1, [x19, #320]
    70ac:	ldr	w2, [x19, #328]
    70b0:	add	x8, x1, #0x1
    70b4:	lsl	w1, w1, #3
    70b8:	cmp	x8, #0x3
    70bc:	lsr	w1, w2, w1
    70c0:	strb	w1, [x28, x0]
    70c4:	add	x0, x0, #0x1
    70c8:	str	x0, [x20]
    70cc:	str	x8, [x19, #320]
    70d0:	b.hi	71bc <lzma_filter_flags_encode@@XZ_5.0+0x2e4>  // b.pmore
    70d4:	cmp	x21, x0
    70d8:	b.ne	70a8 <lzma_filter_flags_encode@@XZ_5.0+0x1d0>  // b.any
    70dc:	mov	w3, #0x0                   	// #0
    70e0:	mov	w0, w3
    70e4:	ldp	x19, x20, [sp, #16]
    70e8:	ldp	x21, x22, [sp, #32]
    70ec:	ldp	x23, x24, [sp, #48]
    70f0:	ldp	x25, x26, [sp, #64]
    70f4:	ldp	x27, x28, [sp, #80]
    70f8:	ldp	x29, x30, [sp], #112
    70fc:	ret
    7100:	cbnz	w0, 711c <lzma_filter_flags_encode@@XZ_5.0+0x244>
    7104:	mov	w0, #0x1                   	// #1
    7108:	strb	wzr, [x28, x1]
    710c:	add	x1, x1, #0x1
    7110:	str	w0, [x19]
    7114:	str	x1, [x20]
    7118:	b	705c <lzma_filter_flags_encode@@XZ_5.0+0x184>
    711c:	ldp	x23, x24, [sp, #48]
    7120:	mov	w3, #0xb                   	// #11
    7124:	ldp	x25, x26, [sp, #64]
    7128:	mov	w0, w3
    712c:	ldp	x19, x20, [sp, #16]
    7130:	ldp	x21, x22, [sp, #32]
    7134:	ldp	x27, x28, [sp, #80]
    7138:	ldp	x29, x30, [sp], #112
    713c:	ret
    7140:	ldr	x0, [x19, #8]
    7144:	bl	34e0 <lzma_index_block_count@plt>
    7148:	mov	x3, x20
    714c:	mov	x4, x21
    7150:	mov	x2, x28
    7154:	mov	x1, x23
    7158:	bl	3450 <lzma_vli_encode@plt>
    715c:	mov	w3, w0
    7160:	cmp	w0, #0x1
    7164:	b.ne	71fc <lzma_filter_flags_encode@@XZ_5.0+0x324>  // b.any
    7168:	str	w25, [x19]
    716c:	str	xzr, [x19, #320]
    7170:	ldr	x1, [x20]
    7174:	b	705c <lzma_filter_flags_encode@@XZ_5.0+0x184>
    7178:	mov	x0, x24
    717c:	mov	w1, #0x2                   	// #2
    7180:	bl	3460 <lzma_index_iter_next@plt>
    7184:	tst	w0, #0xff
    7188:	b.ne	71e0 <lzma_filter_flags_encode@@XZ_5.0+0x308>  // b.any
    718c:	str	w26, [x19]
    7190:	ldr	x0, [x19, #192]
    7194:	b	7028 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    7198:	ldr	x0, [x19, #320]
    719c:	cbz	x0, 721c <lzma_filter_flags_encode@@XZ_5.0+0x344>
    71a0:	add	x2, x1, #0x1
    71a4:	sub	x0, x0, #0x1
    71a8:	strb	wzr, [x28, x1]
    71ac:	mov	x1, x2
    71b0:	str	x2, [x20]
    71b4:	str	x0, [x19, #320]
    71b8:	b	705c <lzma_filter_flags_encode@@XZ_5.0+0x184>
    71bc:	mov	w3, #0x1                   	// #1
    71c0:	mov	w0, w3
    71c4:	ldp	x19, x20, [sp, #16]
    71c8:	ldp	x21, x22, [sp, #32]
    71cc:	ldp	x23, x24, [sp, #48]
    71d0:	ldp	x25, x26, [sp, #64]
    71d4:	ldp	x27, x28, [sp, #80]
    71d8:	ldp	x29, x30, [sp], #112
    71dc:	ret
    71e0:	ldr	x0, [x19, #8]
    71e4:	bl	4bd8 <lzma_index_checks@@XZ_5.0+0x28>
    71e8:	mov	w0, w0
    71ec:	str	w27, [x19]
    71f0:	str	x0, [x19, #320]
    71f4:	ldr	x1, [x20]
    71f8:	b	705c <lzma_filter_flags_encode@@XZ_5.0+0x184>
    71fc:	ldr	x1, [x20]
    7200:	ldp	x23, x24, [sp, #48]
    7204:	sub	x1, x1, x22
    7208:	ldp	x25, x26, [sp, #64]
    720c:	b	7074 <lzma_filter_flags_encode@@XZ_5.0+0x19c>
    7210:	mov	x1, #0x0                   	// #0
    7214:	mov	w3, #0x0                   	// #0
    7218:	b	7074 <lzma_filter_flags_encode@@XZ_5.0+0x19c>
    721c:	ldr	w2, [x19, #328]
    7220:	sub	x1, x1, x22
    7224:	add	x0, x28, x22
    7228:	bl	31c0 <lzma_crc32@plt>
    722c:	str	w0, [x19, #328]
    7230:	mov	w1, #0x6                   	// #6
    7234:	str	w1, [x19]
    7238:	b	70a0 <lzma_filter_flags_encode@@XZ_5.0+0x1c8>
    723c:	ldr	x0, [x19, #192]
    7240:	b	7028 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    7244:	nop
    7248:	stp	x29, x30, [sp, #-48]!
    724c:	mov	x29, sp
    7250:	stp	x21, x22, [sp, #32]
    7254:	mov	x21, x2
    7258:	mov	x22, x1
    725c:	ldr	x2, [x0, #16]
    7260:	stp	x19, x20, [sp, #16]
    7264:	adrp	x19, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>
    7268:	add	x19, x19, #0x248
    726c:	mov	x20, x0
    7270:	cmp	x2, x19
    7274:	b.eq	727c <lzma_filter_flags_encode@@XZ_5.0+0x3a4>  // b.none
    7278:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    727c:	str	x19, [x20, #16]
    7280:	cbz	x21, 72ec <lzma_filter_flags_encode@@XZ_5.0+0x414>
    7284:	ldr	x19, [x20]
    7288:	cbz	x19, 72bc <lzma_filter_flags_encode@@XZ_5.0+0x3e4>
    728c:	add	x0, x19, #0x10
    7290:	mov	x1, x21
    7294:	bl	34b0 <lzma_index_iter_init@plt>
    7298:	str	wzr, [x19]
    729c:	mov	w0, #0x0                   	// #0
    72a0:	str	x21, [x19, #8]
    72a4:	str	xzr, [x19, #320]
    72a8:	str	wzr, [x19, #328]
    72ac:	ldp	x19, x20, [sp, #16]
    72b0:	ldp	x21, x22, [sp, #32]
    72b4:	ldp	x29, x30, [sp], #48
    72b8:	ret
    72bc:	mov	x1, x22
    72c0:	mov	x0, #0x150                 	// #336
    72c4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    72c8:	str	x0, [x20]
    72cc:	mov	x19, x0
    72d0:	cbz	x0, 7300 <lzma_filter_flags_encode@@XZ_5.0+0x428>
    72d4:	adrp	x1, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    72d8:	adrp	x0, 6000 <lzma_block_buffer_bound@@XZ_5.0+0x10>
    72dc:	add	x1, x1, #0xfb0
    72e0:	add	x0, x0, #0xfa8
    72e4:	stp	x1, x0, [x20, #24]
    72e8:	b	728c <lzma_filter_flags_encode@@XZ_5.0+0x3b4>
    72ec:	mov	w0, #0xb                   	// #11
    72f0:	ldp	x19, x20, [sp, #16]
    72f4:	ldp	x21, x22, [sp, #32]
    72f8:	ldp	x29, x30, [sp], #48
    72fc:	ret
    7300:	mov	w0, #0x5                   	// #5
    7304:	b	72ac <lzma_filter_flags_encode@@XZ_5.0+0x3d4>

0000000000007308 <lzma_index_encoder@@XZ_5.0>:
    7308:	stp	x29, x30, [sp, #-48]!
    730c:	mov	x29, sp
    7310:	stp	x19, x20, [sp, #16]
    7314:	mov	x20, x0
    7318:	str	x21, [sp, #32]
    731c:	mov	x21, x1
    7320:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    7324:	mov	w19, w0
    7328:	cbz	w0, 7340 <lzma_index_encoder@@XZ_5.0+0x38>
    732c:	mov	w0, w19
    7330:	ldp	x19, x20, [sp, #16]
    7334:	ldr	x21, [sp, #32]
    7338:	ldp	x29, x30, [sp], #48
    733c:	ret
    7340:	ldp	x1, x0, [x20, #48]
    7344:	mov	x2, x21
    7348:	bl	7248 <lzma_filter_flags_encode@@XZ_5.0+0x370>
    734c:	mov	w19, w0
    7350:	cbnz	w0, 7378 <lzma_index_encoder@@XZ_5.0+0x70>
    7354:	ldr	x0, [x20, #56]
    7358:	mov	w1, #0x1                   	// #1
    735c:	ldr	x21, [sp, #32]
    7360:	strb	w1, [x0, #88]
    7364:	strb	w1, [x0, #91]
    7368:	mov	w0, w19
    736c:	ldp	x19, x20, [sp, #16]
    7370:	ldp	x29, x30, [sp], #48
    7374:	ret
    7378:	mov	x0, x20
    737c:	bl	3320 <lzma_end@plt>
    7380:	b	732c <lzma_index_encoder@@XZ_5.0+0x24>
    7384:	nop

0000000000007388 <lzma_index_buffer_encode@@XZ_5.0>:
    7388:	cmp	x1, #0x0
    738c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    7390:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7394:	b.eq	747c <lzma_index_buffer_encode@@XZ_5.0+0xf4>  // b.none
    7398:	sub	sp, sp, #0x1a0
    739c:	stp	x29, x30, [sp, #16]
    73a0:	add	x29, sp, #0x10
    73a4:	stp	x19, x20, [sp, #32]
    73a8:	mov	x19, x2
    73ac:	ldr	x2, [x2]
    73b0:	stp	x21, x22, [sp, #48]
    73b4:	mov	x22, x1
    73b8:	mov	x21, x3
    73bc:	cmp	x2, x3
    73c0:	mov	w1, #0xb                   	// #11
    73c4:	b.hi	7448 <lzma_index_buffer_encode@@XZ_5.0+0xc0>  // b.pmore
    73c8:	mov	x20, x0
    73cc:	str	x23, [sp, #64]
    73d0:	sub	x23, x3, x2
    73d4:	bl	3510 <lzma_index_size@plt>
    73d8:	mov	w1, #0xa                   	// #10
    73dc:	cmp	x23, x0
    73e0:	b.cc	7460 <lzma_index_buffer_encode@@XZ_5.0+0xd8>  // b.lo, b.ul, b.last
    73e4:	mov	x1, x20
    73e8:	add	x0, sp, #0x60
    73ec:	bl	34b0 <lzma_index_iter_init@plt>
    73f0:	str	wzr, [sp]
    73f4:	add	x23, sp, #0x50
    73f8:	mov	x1, #0x0                   	// #0
    73fc:	mov	x0, x23
    7400:	mov	x7, x21
    7404:	mov	x5, x22
    7408:	mov	x6, x19
    740c:	mov	x4, #0x0                   	// #0
    7410:	mov	x3, #0x0                   	// #0
    7414:	mov	x2, #0x0                   	// #0
    7418:	str	wzr, [sp, #80]
    741c:	str	x20, [sp, #88]
    7420:	str	xzr, [sp, #400]
    7424:	str	wzr, [sp, #408]
    7428:	ldr	x20, [x19]
    742c:	bl	6fb0 <lzma_filter_flags_encode@@XZ_5.0+0xd8>
    7430:	mov	w1, #0x0                   	// #0
    7434:	cmp	w0, #0x1
    7438:	b.eq	7460 <lzma_index_buffer_encode@@XZ_5.0+0xd8>  // b.none
    743c:	mov	w1, #0xb                   	// #11
    7440:	ldr	x23, [sp, #64]
    7444:	str	x20, [x19]
    7448:	mov	w0, w1
    744c:	ldp	x29, x30, [sp, #16]
    7450:	ldp	x19, x20, [sp, #32]
    7454:	ldp	x21, x22, [sp, #48]
    7458:	add	sp, sp, #0x1a0
    745c:	ret
    7460:	mov	w0, w1
    7464:	ldp	x29, x30, [sp, #16]
    7468:	ldp	x19, x20, [sp, #32]
    746c:	ldp	x21, x22, [sp, #48]
    7470:	ldr	x23, [sp, #64]
    7474:	add	sp, sp, #0x1a0
    7478:	ret
    747c:	mov	w1, #0xb                   	// #11
    7480:	mov	w0, w1
    7484:	ret

0000000000007488 <lzma_stream_buffer_bound@@XZ_5.0>:
    7488:	stp	x29, x30, [sp, #-16]!
    748c:	mov	x29, sp
    7490:	bl	3120 <lzma_block_buffer_bound@plt>
    7494:	cbz	x0, 74ac <lzma_stream_buffer_bound@@XZ_5.0+0x24>
    7498:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    749c:	sub	x1, x1, x0
    74a0:	cmp	x1, #0x2f
    74a4:	add	x0, x0, #0x30
    74a8:	csel	x0, x0, xzr, hi  // hi = pmore
    74ac:	ldp	x29, x30, [sp], #16
    74b0:	ret
    74b4:	nop

00000000000074b8 <lzma_stream_buffer_encode@@XZ_5.0>:
    74b8:	stp	x29, x30, [sp, #-384]!
    74bc:	cmp	x0, #0x0
    74c0:	ccmp	w1, #0xf, #0x2, ne  // ne = any
    74c4:	mov	x29, sp
    74c8:	stp	x23, x24, [sp, #48]
    74cc:	b.hi	7668 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>  // b.pmore
    74d0:	stp	x21, x22, [sp, #32]
    74d4:	cmp	x3, #0x0
    74d8:	mov	x23, x3
    74dc:	mov	x21, x4
    74e0:	ccmp	x4, #0x0, #0x4, eq  // eq = none
    74e4:	b.ne	769c <lzma_stream_buffer_encode@@XZ_5.0+0x1e4>  // b.any
    74e8:	stp	x19, x20, [sp, #16]
    74ec:	cmp	x5, #0x0
    74f0:	mov	x20, x5
    74f4:	stp	x27, x28, [sp, #80]
    74f8:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    74fc:	mov	x28, x6
    7500:	b.eq	7658 <lzma_stream_buffer_encode@@XZ_5.0+0x1a0>  // b.none
    7504:	stp	x25, x26, [sp, #64]
    7508:	mov	x22, x7
    750c:	ldr	x26, [x6]
    7510:	cmp	x26, x7
    7514:	b.hi	7708 <lzma_stream_buffer_encode@@XZ_5.0+0x250>  // b.pmore
    7518:	mov	x27, x0
    751c:	mov	w19, w1
    7520:	mov	x25, x2
    7524:	mov	w0, w1
    7528:	mov	w24, #0x3                   	// #3
    752c:	bl	30e0 <lzma_check_is_supported@plt>
    7530:	tst	w0, #0xff
    7534:	b.eq	767c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>  // b.none
    7538:	str	x26, [sp, #112]
    753c:	sub	x0, x22, x26
    7540:	cmp	x0, #0x18
    7544:	mov	w24, #0xa                   	// #10
    7548:	b.ls	767c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>  // b.plast
    754c:	stp	xzr, xzr, [sp, #136]
    7550:	add	x0, sp, #0x78
    7554:	add	x1, x20, x26
    7558:	sub	x22, x22, #0xc
    755c:	str	x0, [sp, #96]
    7560:	stp	xzr, xzr, [sp, #120]
    7564:	str	w19, [sp, #136]
    7568:	stp	xzr, xzr, [sp, #152]
    756c:	str	xzr, [sp, #168]
    7570:	bl	3390 <lzma_stream_header_encode@plt>
    7574:	cbnz	w0, 7708 <lzma_stream_buffer_encode@@XZ_5.0+0x250>
    7578:	ldr	x0, [sp, #112]
    757c:	stp	xzr, xzr, [sp, #176]
    7580:	stp	xzr, xzr, [sp, #208]
    7584:	add	x0, x0, #0xc
    7588:	str	x0, [sp, #112]
    758c:	str	w19, [sp, #184]
    7590:	stp	xzr, xzr, [sp, #192]
    7594:	str	x27, [sp, #208]
    7598:	stp	xzr, xzr, [sp, #224]
    759c:	stp	xzr, xzr, [sp, #240]
    75a0:	stp	xzr, xzr, [sp, #256]
    75a4:	stp	xzr, xzr, [sp, #272]
    75a8:	stp	xzr, xzr, [sp, #288]
    75ac:	stp	xzr, xzr, [sp, #304]
    75b0:	stp	xzr, xzr, [sp, #320]
    75b4:	stp	xzr, xzr, [sp, #336]
    75b8:	stp	xzr, xzr, [sp, #352]
    75bc:	stp	xzr, xzr, [sp, #368]
    75c0:	cbz	x21, 76a4 <lzma_stream_buffer_encode@@XZ_5.0+0x1ec>
    75c4:	add	x7, sp, #0xb0
    75c8:	add	x27, sp, #0x70
    75cc:	mov	x0, x7
    75d0:	mov	x3, x21
    75d4:	mov	x2, x23
    75d8:	mov	x5, x27
    75dc:	mov	x6, x22
    75e0:	mov	x4, x20
    75e4:	mov	x1, x25
    75e8:	str	x7, [sp, #104]
    75ec:	bl	30d0 <lzma_block_buffer_encode@plt>
    75f0:	mov	w24, w0
    75f4:	ldr	x7, [sp, #104]
    75f8:	cbnz	w0, 767c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>
    75fc:	mov	x0, x25
    7600:	str	x7, [sp, #104]
    7604:	bl	33b0 <lzma_index_init@plt>
    7608:	mov	x19, x0
    760c:	ldr	x7, [sp, #104]
    7610:	cbz	x0, 773c <lzma_stream_buffer_encode@@XZ_5.0+0x284>
    7614:	mov	x0, x7
    7618:	bl	3190 <lzma_block_unpadded_size@plt>
    761c:	ldr	x3, [sp, #200]
    7620:	mov	x2, x0
    7624:	mov	x1, x25
    7628:	mov	x0, x19
    762c:	bl	3300 <lzma_index_append@plt>
    7630:	mov	w24, w0
    7634:	cbz	w0, 76b8 <lzma_stream_buffer_encode@@XZ_5.0+0x200>
    7638:	mov	x1, x25
    763c:	mov	x0, x19
    7640:	bl	33e0 <lzma_index_end@plt>
    7644:	ldp	x19, x20, [sp, #16]
    7648:	ldp	x21, x22, [sp, #32]
    764c:	ldp	x25, x26, [sp, #64]
    7650:	ldp	x27, x28, [sp, #80]
    7654:	b	766c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    7658:	ldp	x19, x20, [sp, #16]
    765c:	ldp	x21, x22, [sp, #32]
    7660:	ldp	x27, x28, [sp, #80]
    7664:	nop
    7668:	mov	w24, #0xb                   	// #11
    766c:	mov	w0, w24
    7670:	ldp	x23, x24, [sp, #48]
    7674:	ldp	x29, x30, [sp], #384
    7678:	ret
    767c:	mov	w0, w24
    7680:	ldp	x19, x20, [sp, #16]
    7684:	ldp	x21, x22, [sp, #32]
    7688:	ldp	x23, x24, [sp, #48]
    768c:	ldp	x25, x26, [sp, #64]
    7690:	ldp	x27, x28, [sp, #80]
    7694:	ldp	x29, x30, [sp], #384
    7698:	ret
    769c:	ldp	x21, x22, [sp, #32]
    76a0:	b	7668 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>
    76a4:	mov	x0, x25
    76a8:	add	x27, sp, #0x70
    76ac:	bl	33b0 <lzma_index_init@plt>
    76b0:	mov	x19, x0
    76b4:	cbz	x0, 773c <lzma_stream_buffer_encode@@XZ_5.0+0x284>
    76b8:	mov	x2, x27
    76bc:	mov	x1, x20
    76c0:	mov	x3, x22
    76c4:	mov	x0, x19
    76c8:	bl	3100 <lzma_index_buffer_encode@plt>
    76cc:	mov	w24, w0
    76d0:	mov	x0, x19
    76d4:	bl	3510 <lzma_index_size@plt>
    76d8:	mov	x2, x0
    76dc:	mov	x1, x25
    76e0:	mov	x0, x19
    76e4:	str	x2, [sp, #128]
    76e8:	bl	33e0 <lzma_index_end@plt>
    76ec:	cbnz	w24, 767c <lzma_stream_buffer_encode@@XZ_5.0+0x1c4>
    76f0:	ldr	x0, [sp, #96]
    76f4:	ldr	x1, [sp, #112]
    76f8:	add	x1, x20, x1
    76fc:	bl	3210 <lzma_stream_footer_encode@plt>
    7700:	mov	w24, w0
    7704:	cbz	w0, 771c <lzma_stream_buffer_encode@@XZ_5.0+0x264>
    7708:	ldp	x19, x20, [sp, #16]
    770c:	ldp	x21, x22, [sp, #32]
    7710:	ldp	x25, x26, [sp, #64]
    7714:	ldp	x27, x28, [sp, #80]
    7718:	b	7668 <lzma_stream_buffer_encode@@XZ_5.0+0x1b0>
    771c:	ldr	x0, [sp, #112]
    7720:	ldp	x19, x20, [sp, #16]
    7724:	add	x0, x0, #0xc
    7728:	ldp	x21, x22, [sp, #32]
    772c:	ldp	x25, x26, [sp, #64]
    7730:	str	x0, [x28]
    7734:	ldp	x27, x28, [sp, #80]
    7738:	b	766c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    773c:	mov	w24, #0x5                   	// #5
    7740:	ldp	x19, x20, [sp, #16]
    7744:	ldp	x21, x22, [sp, #32]
    7748:	ldp	x25, x26, [sp, #64]
    774c:	ldp	x27, x28, [sp, #80]
    7750:	b	766c <lzma_stream_buffer_encode@@XZ_5.0+0x1b4>
    7754:	nop
    7758:	stp	x29, x30, [sp, #-48]!
    775c:	mov	x29, sp
    7760:	str	x21, [sp, #32]
    7764:	mov	x21, x0
    7768:	add	x0, x0, #0x8
    776c:	stp	x19, x20, [sp, #16]
    7770:	mov	x20, x1
    7774:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    7778:	mov	x1, x20
    777c:	add	x0, x21, #0x170
    7780:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    7784:	ldr	x0, [x21, #440]
    7788:	mov	x1, x20
    778c:	bl	33e0 <lzma_index_end@plt>
    7790:	ldr	x0, [x21, #288]
    7794:	cmn	x0, #0x1
    7798:	b.eq	77b8 <lzma_stream_buffer_encode@@XZ_5.0+0x300>  // b.none
    779c:	add	x19, x21, #0x128
    77a0:	ldr	x0, [x19], #16
    77a4:	mov	x1, x20
    77a8:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    77ac:	ldur	x0, [x19, #-8]
    77b0:	cmn	x0, #0x1
    77b4:	b.ne	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x2e8>  // b.any
    77b8:	mov	x1, x20
    77bc:	mov	x0, x21
    77c0:	ldp	x19, x20, [sp, #16]
    77c4:	ldr	x21, [sp, #32]
    77c8:	ldp	x29, x30, [sp], #48
    77cc:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    77d0:	sub	sp, sp, #0xc0
    77d4:	stp	x29, x30, [sp, #16]
    77d8:	add	x29, sp, #0x10
    77dc:	stp	x19, x20, [sp, #32]
    77e0:	mov	x19, x7
    77e4:	ldr	x7, [x6]
    77e8:	str	x2, [sp, #112]
    77ec:	cmp	x7, x19
    77f0:	b.cs	78ac <lzma_stream_buffer_encode@@XZ_5.0+0x3f4>  // b.hs, b.nlast
    77f4:	stp	x27, x28, [sp, #96]
    77f8:	mov	x20, x1
    77fc:	ldr	w27, [sp, #192]
    7800:	stp	x21, x22, [sp, #48]
    7804:	mov	x22, x3
    7808:	mov	x21, x5
    780c:	stp	x23, x24, [sp, #64]
    7810:	mov	x24, x6
    7814:	mov	x23, x4
    7818:	stp	x25, x26, [sp, #80]
    781c:	adrp	x25, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    7820:	add	x25, x25, #0x8d8
    7824:	mov	x28, x0
    7828:	add	x26, x0, #0x50
    782c:	add	x0, sp, #0x88
    7830:	str	x0, [sp, #120]
    7834:	ldr	w0, [x28]
    7838:	cmp	w0, #0x3
    783c:	b.eq	7968 <lzma_stream_buffer_encode@@XZ_5.0+0x4b0>  // b.none
    7840:	b.hi	78b4 <lzma_stream_buffer_encode@@XZ_5.0+0x3fc>  // b.pmore
    7844:	cmp	w0, #0x1
    7848:	b.eq	79d4 <lzma_stream_buffer_encode@@XZ_5.0+0x51c>  // b.none
    784c:	tbnz	w0, #0, 7944 <lzma_stream_buffer_encode@@XZ_5.0+0x48c>
    7850:	ldr	x2, [x28, #456]
    7854:	add	x1, x28, #0x1c0
    7858:	mov	x5, x19
    785c:	mov	x4, x24
    7860:	mov	x3, x21
    7864:	add	x0, x28, #0x1d0
    7868:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    786c:	ldp	x1, x0, [x28, #448]
    7870:	cmp	x1, x0
    7874:	b.cc	789c <lzma_stream_buffer_encode@@XZ_5.0+0x3e4>  // b.lo, b.ul, b.last
    7878:	ldr	w0, [x28]
    787c:	cmp	w0, #0x5
    7880:	b.eq	7a88 <lzma_stream_buffer_encode@@XZ_5.0+0x5d0>  // b.none
    7884:	add	w0, w0, #0x1
    7888:	str	w0, [x28]
    788c:	str	xzr, [x28, #448]
    7890:	ldr	x0, [x24]
    7894:	cmp	x0, x19
    7898:	b.cc	7834 <lzma_stream_buffer_encode@@XZ_5.0+0x37c>  // b.lo, b.ul, b.last
    789c:	ldp	x21, x22, [sp, #48]
    78a0:	ldp	x23, x24, [sp, #64]
    78a4:	ldp	x25, x26, [sp, #80]
    78a8:	ldp	x27, x28, [sp, #96]
    78ac:	mov	w0, #0x0                   	// #0
    78b0:	b	7958 <lzma_stream_buffer_encode@@XZ_5.0+0x4a0>
    78b4:	cmp	w0, #0x4
    78b8:	b.ne	793c <lzma_stream_buffer_encode@@XZ_5.0+0x484>  // b.any
    78bc:	ldr	x0, [x28, #368]
    78c0:	str	wzr, [sp]
    78c4:	mov	x7, x19
    78c8:	mov	x6, x24
    78cc:	ldr	x9, [x28, #392]
    78d0:	mov	x5, x21
    78d4:	mov	x1, x20
    78d8:	mov	x4, #0x0                   	// #0
    78dc:	mov	x3, #0x0                   	// #0
    78e0:	mov	x2, #0x0                   	// #0
    78e4:	blr	x9
    78e8:	cmp	w0, #0x1
    78ec:	b.ne	7a24 <lzma_stream_buffer_encode@@XZ_5.0+0x56c>  // b.any
    78f0:	ldr	x0, [x28, #440]
    78f4:	stp	xzr, xzr, [sp, #136]
    78f8:	stp	xzr, xzr, [sp, #152]
    78fc:	stp	xzr, xzr, [sp, #168]
    7900:	str	xzr, [sp, #184]
    7904:	bl	3510 <lzma_index_size@plt>
    7908:	ldr	w2, [x28, #88]
    790c:	mov	x3, x0
    7910:	ldr	x0, [sp, #120]
    7914:	add	x1, x28, #0x1d0
    7918:	str	x3, [sp, #144]
    791c:	str	w2, [sp, #152]
    7920:	bl	3210 <lzma_stream_footer_encode@plt>
    7924:	cbnz	w0, 7944 <lzma_stream_buffer_encode@@XZ_5.0+0x48c>
    7928:	mov	x0, #0xc                   	// #12
    792c:	mov	w1, #0x5                   	// #5
    7930:	str	w1, [x28]
    7934:	str	x0, [x28, #456]
    7938:	b	7890 <lzma_stream_buffer_encode@@XZ_5.0+0x3d8>
    793c:	cmp	w0, #0x5
    7940:	b.eq	7850 <lzma_stream_buffer_encode@@XZ_5.0+0x398>  // b.none
    7944:	ldp	x21, x22, [sp, #48]
    7948:	mov	w0, #0xb                   	// #11
    794c:	ldp	x23, x24, [sp, #64]
    7950:	ldp	x25, x26, [sp, #80]
    7954:	ldp	x27, x28, [sp, #96]
    7958:	ldp	x29, x30, [sp, #16]
    795c:	ldp	x19, x20, [sp, #32]
    7960:	add	sp, sp, #0xc0
    7964:	ret
    7968:	ldr	x0, [x28, #8]
    796c:	mov	x7, x19
    7970:	ldr	x9, [x28, #32]
    7974:	mov	x6, x24
    7978:	ldr	x2, [sp, #112]
    797c:	mov	x5, x21
    7980:	ldr	w1, [x25, x27, lsl #2]
    7984:	mov	x4, x23
    7988:	str	w1, [sp]
    798c:	mov	x3, x22
    7990:	mov	x1, x20
    7994:	blr	x9
    7998:	cmp	w0, #0x1
    799c:	ldr	w1, [sp, #192]
    79a0:	ccmp	w1, #0x1, #0x4, eq  // eq = none
    79a4:	b.eq	7a24 <lzma_stream_buffer_encode@@XZ_5.0+0x56c>  // b.none
    79a8:	mov	x0, x26
    79ac:	bl	3190 <lzma_block_unpadded_size@plt>
    79b0:	mov	x2, x0
    79b4:	mov	x1, x20
    79b8:	ldr	x3, [x28, #104]
    79bc:	ldr	x0, [x28, #440]
    79c0:	bl	3300 <lzma_index_append@plt>
    79c4:	cbnz	w0, 7a24 <lzma_stream_buffer_encode@@XZ_5.0+0x56c>
    79c8:	mov	w0, #0x1                   	// #1
    79cc:	str	w0, [x28]
    79d0:	b	7890 <lzma_stream_buffer_encode@@XZ_5.0+0x3d8>
    79d4:	ldr	x0, [x22]
    79d8:	cmp	x0, x23
    79dc:	b.eq	7a5c <lzma_stream_buffer_encode@@XZ_5.0+0x5a4>  // b.none
    79e0:	ldrb	w0, [x28, #4]
    79e4:	cbz	w0, 7a10 <lzma_stream_buffer_encode@@XZ_5.0+0x558>
    79e8:	strb	wzr, [x28, #4]
    79ec:	add	x1, x28, #0x1d0
    79f0:	mov	x0, x26
    79f4:	bl	3540 <lzma_block_header_encode@plt>
    79f8:	cbnz	w0, 7944 <lzma_stream_buffer_encode@@XZ_5.0+0x48c>
    79fc:	ldr	w0, [x28, #84]
    7a00:	mov	w1, #0x2                   	// #2
    7a04:	str	w1, [x28]
    7a08:	str	x0, [x28, #456]
    7a0c:	b	7890 <lzma_stream_buffer_encode@@XZ_5.0+0x3d8>
    7a10:	mov	x0, #0xffffffffffffffff    	// #-1
    7a14:	stp	x0, x0, [x28, #96]
    7a18:	mov	x0, x26
    7a1c:	bl	3160 <lzma_block_header_size@plt>
    7a20:	cbz	w0, 7a44 <lzma_stream_buffer_encode@@XZ_5.0+0x58c>
    7a24:	ldp	x29, x30, [sp, #16]
    7a28:	ldp	x19, x20, [sp, #32]
    7a2c:	ldp	x21, x22, [sp, #48]
    7a30:	ldp	x23, x24, [sp, #64]
    7a34:	ldp	x25, x26, [sp, #80]
    7a38:	ldp	x27, x28, [sp, #96]
    7a3c:	add	sp, sp, #0xc0
    7a40:	ret
    7a44:	mov	x2, x26
    7a48:	mov	x1, x20
    7a4c:	add	x0, x28, #0x8
    7a50:	bl	6310 <lzma_block_uncomp_encode@@XZ_5.2+0x2d8>
    7a54:	cbz	w0, 79e8 <lzma_stream_buffer_encode@@XZ_5.0+0x530>
    7a58:	b	7a24 <lzma_stream_buffer_encode@@XZ_5.0+0x56c>
    7a5c:	ldr	w0, [sp, #192]
    7a60:	cmp	w0, #0x3
    7a64:	b.ne	7aa0 <lzma_stream_buffer_encode@@XZ_5.0+0x5e8>  // b.any
    7a68:	ldr	x2, [x28, #440]
    7a6c:	mov	x1, x20
    7a70:	add	x0, x28, #0x170
    7a74:	bl	7248 <lzma_filter_flags_encode@@XZ_5.0+0x370>
    7a78:	cbnz	w0, 7a24 <lzma_stream_buffer_encode@@XZ_5.0+0x56c>
    7a7c:	mov	w0, #0x4                   	// #4
    7a80:	str	w0, [x28]
    7a84:	b	7890 <lzma_stream_buffer_encode@@XZ_5.0+0x3d8>
    7a88:	mov	w0, #0x1                   	// #1
    7a8c:	ldp	x21, x22, [sp, #48]
    7a90:	ldp	x23, x24, [sp, #64]
    7a94:	ldp	x25, x26, [sp, #80]
    7a98:	ldp	x27, x28, [sp, #96]
    7a9c:	b	7958 <lzma_stream_buffer_encode@@XZ_5.0+0x4a0>
    7aa0:	cmp	w0, #0x0
    7aa4:	cset	w0, ne  // ne = any
    7aa8:	ldp	x21, x22, [sp, #48]
    7aac:	ldp	x23, x24, [sp, #64]
    7ab0:	ldp	x25, x26, [sp, #80]
    7ab4:	ldp	x27, x28, [sp, #96]
    7ab8:	b	7958 <lzma_stream_buffer_encode@@XZ_5.0+0x4a0>
    7abc:	nop
    7ac0:	stp	x29, x30, [sp, #-64]!
    7ac4:	mov	x29, sp
    7ac8:	stp	x19, x20, [sp, #16]
    7acc:	mov	x19, x0
    7ad0:	ldr	w0, [x0]
    7ad4:	stp	x21, x22, [sp, #32]
    7ad8:	mov	x20, x1
    7adc:	mov	x21, x2
    7ae0:	cmp	w0, #0x1
    7ae4:	b.ls	7b60 <lzma_stream_buffer_encode@@XZ_5.0+0x6a8>  // b.plast
    7ae8:	cmp	w0, #0x3
    7aec:	b.hi	7b4c <lzma_stream_buffer_encode@@XZ_5.0+0x694>  // b.pmore
    7af0:	ldr	x0, [x19, #8]
    7af4:	add	x22, x19, #0x120
    7af8:	ldr	x4, [x19, #72]
    7afc:	blr	x4
    7b00:	cbnz	w0, 7b50 <lzma_stream_buffer_encode@@XZ_5.0+0x698>
    7b04:	ldr	x0, [x19, #288]
    7b08:	add	x19, x19, #0x128
    7b0c:	cmn	x0, #0x1
    7b10:	b.eq	7b30 <lzma_stream_buffer_encode@@XZ_5.0+0x678>  // b.none
    7b14:	nop
    7b18:	ldr	x0, [x19], #16
    7b1c:	mov	x1, x20
    7b20:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    7b24:	ldur	x0, [x19, #-8]
    7b28:	cmn	x0, #0x1
    7b2c:	b.ne	7b18 <lzma_stream_buffer_encode@@XZ_5.0+0x660>  // b.any
    7b30:	mov	x2, x20
    7b34:	mov	x1, x22
    7b38:	mov	x0, x21
    7b3c:	ldp	x19, x20, [sp, #16]
    7b40:	ldp	x21, x22, [sp, #32]
    7b44:	ldp	x29, x30, [sp], #64
    7b48:	b	3240 <lzma_filters_copy@plt>
    7b4c:	mov	w0, #0xb                   	// #11
    7b50:	ldp	x19, x20, [sp, #16]
    7b54:	ldp	x21, x22, [sp, #32]
    7b58:	ldp	x29, x30, [sp], #64
    7b5c:	ret
    7b60:	str	x23, [sp, #48]
    7b64:	mov	x0, #0xffffffffffffffff    	// #-1
    7b68:	strb	wzr, [x19, #4]
    7b6c:	add	x23, x19, #0x50
    7b70:	stp	x0, x0, [x19, #96]
    7b74:	add	x22, x19, #0x120
    7b78:	mov	x0, x23
    7b7c:	str	x2, [x19, #112]
    7b80:	bl	3160 <lzma_block_header_size@plt>
    7b84:	cbz	w0, 7b94 <lzma_stream_buffer_encode@@XZ_5.0+0x6dc>
    7b88:	ldr	x23, [sp, #48]
    7b8c:	str	x22, [x19, #112]
    7b90:	b	7b50 <lzma_stream_buffer_encode@@XZ_5.0+0x698>
    7b94:	mov	x2, x23
    7b98:	mov	x1, x20
    7b9c:	add	x0, x19, #0x8
    7ba0:	bl	6310 <lzma_block_uncomp_encode@@XZ_5.2+0x2d8>
    7ba4:	str	x22, [x19, #112]
    7ba8:	cbnz	w0, 7bcc <lzma_stream_buffer_encode@@XZ_5.0+0x714>
    7bac:	mov	w0, #0x1                   	// #1
    7bb0:	strb	w0, [x19, #4]
    7bb4:	ldr	x0, [x19, #288]
    7bb8:	add	x19, x19, #0x128
    7bbc:	ldr	x23, [sp, #48]
    7bc0:	cmn	x0, #0x1
    7bc4:	b.ne	7b18 <lzma_stream_buffer_encode@@XZ_5.0+0x660>  // b.any
    7bc8:	b	7b30 <lzma_stream_buffer_encode@@XZ_5.0+0x678>
    7bcc:	ldr	x23, [sp, #48]
    7bd0:	b	7b50 <lzma_stream_buffer_encode@@XZ_5.0+0x698>
    7bd4:	nop
    7bd8:	stp	x29, x30, [sp, #-128]!
    7bdc:	mov	x29, sp
    7be0:	str	x23, [sp, #48]
    7be4:	mov	x23, x2
    7be8:	ldr	x2, [x0, #16]
    7bec:	stp	x19, x20, [sp, #16]
    7bf0:	adrp	x19, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>
    7bf4:	stp	x21, x22, [sp, #32]
    7bf8:	add	x19, x19, #0xbd8
    7bfc:	mov	x20, x0
    7c00:	mov	w22, w3
    7c04:	mov	x21, x1
    7c08:	cmp	x2, x19
    7c0c:	b.eq	7c14 <lzma_stream_buffer_encode@@XZ_5.0+0x75c>  // b.none
    7c10:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    7c14:	str	x19, [x20, #16]
    7c18:	cbz	x23, 7d40 <lzma_stream_buffer_encode@@XZ_5.0+0x888>
    7c1c:	ldr	x19, [x20]
    7c20:	cbz	x19, 7cb4 <lzma_stream_buffer_encode@@XZ_5.0+0x7fc>
    7c24:	ldr	x0, [x19, #440]
    7c28:	mov	x1, x21
    7c2c:	str	wzr, [x19]
    7c30:	str	wzr, [x19, #80]
    7c34:	str	w22, [x19, #88]
    7c38:	bl	33e0 <lzma_index_end@plt>
    7c3c:	mov	x0, x21
    7c40:	bl	33b0 <lzma_index_init@plt>
    7c44:	str	x0, [x19, #440]
    7c48:	cbz	x0, 7d28 <lzma_stream_buffer_encode@@XZ_5.0+0x870>
    7c4c:	stp	xzr, xzr, [sp, #88]
    7c50:	add	x1, x19, #0x1d0
    7c54:	add	x0, sp, #0x48
    7c58:	stp	xzr, xzr, [sp, #72]
    7c5c:	str	w22, [sp, #88]
    7c60:	stp	xzr, xzr, [sp, #104]
    7c64:	str	xzr, [sp, #120]
    7c68:	bl	3390 <lzma_stream_header_encode@plt>
    7c6c:	cbz	w0, 7c84 <lzma_stream_buffer_encode@@XZ_5.0+0x7cc>
    7c70:	ldp	x19, x20, [sp, #16]
    7c74:	ldp	x21, x22, [sp, #32]
    7c78:	ldr	x23, [sp, #48]
    7c7c:	ldp	x29, x30, [sp], #128
    7c80:	ret
    7c84:	mov	x0, #0xc                   	// #12
    7c88:	stp	xzr, x0, [x19, #448]
    7c8c:	mov	x2, x23
    7c90:	mov	x1, x21
    7c94:	mov	x0, x19
    7c98:	mov	x3, #0x0                   	// #0
    7c9c:	bl	7ac0 <lzma_stream_buffer_encode@@XZ_5.0+0x608>
    7ca0:	ldp	x19, x20, [sp, #16]
    7ca4:	ldp	x21, x22, [sp, #32]
    7ca8:	ldr	x23, [sp, #48]
    7cac:	ldp	x29, x30, [sp], #128
    7cb0:	ret
    7cb4:	mov	x1, x21
    7cb8:	mov	x0, #0x5d0                 	// #1488
    7cbc:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    7cc0:	mov	x4, x0
    7cc4:	cbz	x0, 7d28 <lzma_stream_buffer_encode@@XZ_5.0+0x870>
    7cc8:	mov	x1, #0xffffffffffffffff    	// #-1
    7ccc:	mov	x19, x0
    7cd0:	adrp	x5, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>
    7cd4:	adrp	x3, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>
    7cd8:	add	x5, x5, #0x7d0
    7cdc:	add	x3, x3, #0x758
    7ce0:	adrp	x2, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x128>
    7ce4:	mov	x0, #0x0                   	// #0
    7ce8:	add	x2, x2, #0xac0
    7cec:	str	x4, [x20]
    7cf0:	stp	xzr, x1, [x4, #8]
    7cf4:	stp	xzr, xzr, [x4, #24]
    7cf8:	stp	x5, x3, [x20, #24]
    7cfc:	stp	xzr, xzr, [x4, #40]
    7d00:	stp	xzr, xzr, [x4, #56]
    7d04:	str	x2, [x20, #64]
    7d08:	str	xzr, [x4, #72]
    7d0c:	str	x1, [x4, #288]
    7d10:	stp	xzr, x1, [x4, #368]
    7d14:	stp	xzr, xzr, [x4, #384]
    7d18:	stp	xzr, xzr, [x4, #400]
    7d1c:	stp	xzr, xzr, [x4, #416]
    7d20:	stp	xzr, xzr, [x4, #432]
    7d24:	b	7c28 <lzma_stream_buffer_encode@@XZ_5.0+0x770>
    7d28:	mov	w0, #0x5                   	// #5
    7d2c:	ldp	x19, x20, [sp, #16]
    7d30:	ldp	x21, x22, [sp, #32]
    7d34:	ldr	x23, [sp, #48]
    7d38:	ldp	x29, x30, [sp], #128
    7d3c:	ret
    7d40:	mov	w0, #0xb                   	// #11
    7d44:	ldp	x19, x20, [sp, #16]
    7d48:	ldp	x21, x22, [sp, #32]
    7d4c:	ldr	x23, [sp, #48]
    7d50:	ldp	x29, x30, [sp], #128
    7d54:	ret

0000000000007d58 <lzma_stream_encoder@@XZ_5.0>:
    7d58:	stp	x29, x30, [sp, #-48]!
    7d5c:	mov	x29, sp
    7d60:	stp	x19, x20, [sp, #16]
    7d64:	mov	x20, x0
    7d68:	stp	x21, x22, [sp, #32]
    7d6c:	mov	x21, x1
    7d70:	mov	w22, w2
    7d74:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    7d78:	mov	w19, w0
    7d7c:	cbz	w0, 7d94 <lzma_stream_encoder@@XZ_5.0+0x3c>
    7d80:	mov	w0, w19
    7d84:	ldp	x19, x20, [sp, #16]
    7d88:	ldp	x21, x22, [sp, #32]
    7d8c:	ldp	x29, x30, [sp], #48
    7d90:	ret
    7d94:	ldp	x1, x0, [x20, #48]
    7d98:	mov	w3, w22
    7d9c:	mov	x2, x21
    7da0:	bl	7bd8 <lzma_stream_buffer_encode@@XZ_5.0+0x720>
    7da4:	mov	w19, w0
    7da8:	cbnz	w0, 7dd4 <lzma_stream_encoder@@XZ_5.0+0x7c>
    7dac:	ldr	x0, [x20, #56]
    7db0:	mov	w2, #0x1010101             	// #16843009
    7db4:	mov	w1, #0x1                   	// #1
    7db8:	ldp	x21, x22, [sp, #32]
    7dbc:	str	w2, [x0, #88]
    7dc0:	strb	w1, [x0, #92]
    7dc4:	mov	w0, w19
    7dc8:	ldp	x19, x20, [sp, #16]
    7dcc:	ldp	x29, x30, [sp], #48
    7dd0:	ret
    7dd4:	mov	x0, x20
    7dd8:	bl	3320 <lzma_end@plt>
    7ddc:	b	7d80 <lzma_stream_encoder@@XZ_5.0+0x28>

0000000000007de0 <lzma_stream_header_encode@@XZ_5.0>:
    7de0:	stp	x29, x30, [sp, #-32]!
    7de4:	mov	x29, sp
    7de8:	stp	x19, x20, [sp, #16]
    7dec:	ldr	w20, [x0]
    7df0:	cbnz	w20, 7e64 <lzma_stream_header_encode@@XZ_5.0+0x84>
    7df4:	mov	x3, x0
    7df8:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    7dfc:	mov	x19, x1
    7e00:	ldr	x0, [x0, #3936]
    7e04:	ldr	w1, [x0]
    7e08:	ldrh	w0, [x0, #4]
    7e0c:	str	w1, [x19]
    7e10:	strh	w0, [x19, #4]
    7e14:	ldr	w0, [x3, #16]
    7e18:	cmp	w0, #0xf
    7e1c:	b.hi	7e50 <lzma_stream_header_encode@@XZ_5.0+0x70>  // b.pmore
    7e20:	strb	wzr, [x19, #6]
    7e24:	add	x0, x19, #0x6
    7e28:	mov	w2, #0x0                   	// #0
    7e2c:	mov	x1, #0x2                   	// #2
    7e30:	ldr	w3, [x3, #16]
    7e34:	strb	w3, [x19, #7]
    7e38:	bl	31c0 <lzma_crc32@plt>
    7e3c:	str	w0, [x19, #8]
    7e40:	mov	w0, w20
    7e44:	ldp	x19, x20, [sp, #16]
    7e48:	ldp	x29, x30, [sp], #32
    7e4c:	ret
    7e50:	mov	w20, #0xb                   	// #11
    7e54:	mov	w0, w20
    7e58:	ldp	x19, x20, [sp, #16]
    7e5c:	ldp	x29, x30, [sp], #32
    7e60:	ret
    7e64:	mov	w20, #0x8                   	// #8
    7e68:	mov	w0, w20
    7e6c:	ldp	x19, x20, [sp, #16]
    7e70:	ldp	x29, x30, [sp], #32
    7e74:	ret

0000000000007e78 <lzma_stream_footer_encode@@XZ_5.0>:
    7e78:	stp	x29, x30, [sp, #-32]!
    7e7c:	mov	x29, sp
    7e80:	stp	x19, x20, [sp, #16]
    7e84:	ldr	w20, [x0]
    7e88:	cbnz	w20, 7f1c <lzma_stream_footer_encode@@XZ_5.0+0xa4>
    7e8c:	mov	x3, x0
    7e90:	mov	x19, x1
    7e94:	ldr	x0, [x0, #8]
    7e98:	mov	x1, #0x3fffffffc           	// #17179869180
    7e9c:	sub	x2, x0, #0x4
    7ea0:	cmp	x2, x1
    7ea4:	b.ls	7ebc <lzma_stream_footer_encode@@XZ_5.0+0x44>  // b.plast
    7ea8:	mov	w20, #0xb                   	// #11
    7eac:	mov	w0, w20
    7eb0:	ldp	x19, x20, [sp, #16]
    7eb4:	ldp	x29, x30, [sp], #32
    7eb8:	ret
    7ebc:	tst	x0, #0x3
    7ec0:	b.ne	7ea8 <lzma_stream_footer_encode@@XZ_5.0+0x30>  // b.any
    7ec4:	lsr	x0, x0, #2
    7ec8:	sub	w0, w0, #0x1
    7ecc:	str	w0, [x19, #4]
    7ed0:	ldr	w0, [x3, #16]
    7ed4:	cmp	w0, #0xf
    7ed8:	b.hi	7ea8 <lzma_stream_footer_encode@@XZ_5.0+0x30>  // b.pmore
    7edc:	strb	wzr, [x19, #8]
    7ee0:	add	x0, x19, #0x4
    7ee4:	mov	w2, #0x0                   	// #0
    7ee8:	mov	x1, #0x6                   	// #6
    7eec:	ldr	w3, [x3, #16]
    7ef0:	strb	w3, [x19, #9]
    7ef4:	bl	31c0 <lzma_crc32@plt>
    7ef8:	str	w0, [x19]
    7efc:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    7f00:	ldr	x1, [x1, #3976]
    7f04:	ldrh	w0, [x1]
    7f08:	strh	w0, [x19, #10]
    7f0c:	mov	w0, w20
    7f10:	ldp	x19, x20, [sp, #16]
    7f14:	ldp	x29, x30, [sp], #32
    7f18:	ret
    7f1c:	mov	w20, #0x8                   	// #8
    7f20:	mov	w0, w20
    7f24:	ldp	x19, x20, [sp, #16]
    7f28:	ldp	x29, x30, [sp], #32
    7f2c:	ret

0000000000007f30 <lzma_vli_encode@@XZ_5.0>:
    7f30:	sub	sp, sp, #0x10
    7f34:	mov	x6, x0
    7f38:	ldr	x7, [x3]
    7f3c:	str	xzr, [sp, #8]
    7f40:	cmp	x4, x7
    7f44:	cbz	x1, 7ff0 <lzma_vli_encode@@XZ_5.0+0xc0>
    7f48:	mov	w0, #0xa                   	// #10
    7f4c:	b.ls	7fcc <lzma_vli_encode@@XZ_5.0+0x9c>  // b.plast
    7f50:	ldr	x8, [x1]
    7f54:	cmp	x8, #0x8
    7f58:	b.hi	7fe4 <lzma_vli_encode@@XZ_5.0+0xb4>  // b.pmore
    7f5c:	tbnz	x6, #63, 7fe4 <lzma_vli_encode@@XZ_5.0+0xb4>
    7f60:	lsl	w0, w8, #3
    7f64:	mov	x5, x7
    7f68:	sub	w0, w0, w8
    7f6c:	mov	x9, #0x1                   	// #1
    7f70:	add	x7, x2, x7
    7f74:	sub	x9, x9, x5
    7f78:	lsr	x0, x6, x0
    7f7c:	b	7f9c <lzma_vli_encode@@XZ_5.0+0x6c>
    7f80:	str	x2, [x1]
    7f84:	orr	w6, w6, #0xffffff80
    7f88:	str	x5, [x3]
    7f8c:	lsr	x0, x0, #7
    7f90:	strb	w6, [x7], #1
    7f94:	cmp	x4, x5
    7f98:	b.eq	7fd4 <lzma_vli_encode@@XZ_5.0+0xa4>  // b.none
    7f9c:	add	x2, x8, x5
    7fa0:	cmp	x0, #0x7f
    7fa4:	add	x2, x9, x2
    7fa8:	add	x5, x5, #0x1
    7fac:	and	w6, w0, #0xff
    7fb0:	b.hi	7f80 <lzma_vli_encode@@XZ_5.0+0x50>  // b.pmore
    7fb4:	add	x0, sp, #0x8
    7fb8:	strb	w6, [x7]
    7fbc:	cmp	x1, x0
    7fc0:	str	x2, [x1]
    7fc4:	cset	w0, ne  // ne = any
    7fc8:	str	x5, [x3]
    7fcc:	add	sp, sp, #0x10
    7fd0:	ret
    7fd4:	add	x2, sp, #0x8
    7fd8:	mov	w0, #0x0                   	// #0
    7fdc:	cmp	x1, x2
    7fe0:	b.ne	7fcc <lzma_vli_encode@@XZ_5.0+0x9c>  // b.any
    7fe4:	mov	w0, #0xb                   	// #11
    7fe8:	add	sp, sp, #0x10
    7fec:	ret
    7ff0:	b.ls	7fe4 <lzma_vli_encode@@XZ_5.0+0xb4>  // b.plast
    7ff4:	add	x1, sp, #0x8
    7ff8:	mov	x8, #0x0                   	// #0
    7ffc:	b	7f5c <lzma_vli_encode@@XZ_5.0+0x2c>
    8000:	add	x3, x0, #0x28
    8004:	cmp	w1, #0x4, lsl #12
    8008:	lsl	w1, w1, #1
    800c:	mov	x2, #0xffffffffffff        	// #281474976710655
    8010:	ccmp	x0, x2, #0x2, ls  // ls = plast
    8014:	mov	x2, #0xffffffffffffffff    	// #-1
    8018:	mul	x0, x1, x3
    801c:	add	x0, x0, #0x30
    8020:	csel	x0, x0, x2, ls  // ls = plast
    8024:	ret
    8028:	stp	x29, x30, [sp, #-32]!
    802c:	mov	x29, sp
    8030:	stp	x19, x20, [sp, #16]
    8034:	mov	x19, x0
    8038:	mov	x20, x1
    803c:	ldr	x0, [x0]
    8040:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8044:	str	xzr, [x19]
    8048:	ldr	x0, [x19, #8]
    804c:	mov	x1, x20
    8050:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8054:	str	xzr, [x19, #8]
    8058:	ldp	x19, x20, [sp, #16]
    805c:	ldp	x29, x30, [sp], #32
    8060:	ret
    8064:	nop
    8068:	stp	x29, x30, [sp, #-48]!
    806c:	cmp	w3, #0x4, lsl #12
    8070:	mov	x29, sp
    8074:	stp	x19, x20, [sp, #16]
    8078:	mov	x19, x0
    807c:	mov	x0, #0xffffffffffff        	// #281474976710655
    8080:	ccmp	x2, x0, #0x2, ls  // ls = plast
    8084:	mov	w0, #0x8                   	// #8
    8088:	b.hi	8110 <lzma_vli_encode@@XZ_5.0+0x1e0>  // b.pmore
    808c:	ldr	x0, [x19, #16]
    8090:	stp	x21, x22, [sp, #32]
    8094:	lsl	w20, w3, #1
    8098:	mov	x21, x2
    809c:	mov	x22, x1
    80a0:	cmp	x0, x2
    80a4:	b.ne	80b4 <lzma_vli_encode@@XZ_5.0+0x184>  // b.any
    80a8:	ldr	w0, [x19, #24]
    80ac:	cmp	w0, w20
    80b0:	b.eq	80f8 <lzma_vli_encode@@XZ_5.0+0x1c8>  // b.none
    80b4:	mov	x1, x22
    80b8:	mov	x0, x19
    80bc:	bl	8028 <lzma_vli_encode@@XZ_5.0+0xf8>
    80c0:	mov	w0, #0x28                  	// #40
    80c4:	mov	x1, x22
    80c8:	umull	x0, w20, w0
    80cc:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    80d0:	str	x0, [x19]
    80d4:	mov	w2, w20
    80d8:	mov	x1, x22
    80dc:	mul	x0, x2, x21
    80e0:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    80e4:	str	x0, [x19, #8]
    80e8:	ldr	x1, [x19]
    80ec:	cmp	x1, #0x0
    80f0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    80f4:	b.eq	811c <lzma_vli_encode@@XZ_5.0+0x1ec>  // b.none
    80f8:	str	x21, [x19, #16]
    80fc:	mov	w0, #0x0                   	// #0
    8100:	ldp	x21, x22, [sp, #32]
    8104:	str	w20, [x19, #24]
    8108:	stur	xzr, [x19, #28]
    810c:	str	xzr, [x19, #40]
    8110:	ldp	x19, x20, [sp, #16]
    8114:	ldp	x29, x30, [sp], #48
    8118:	ret
    811c:	mov	x1, x22
    8120:	mov	x0, x19
    8124:	bl	8028 <lzma_vli_encode@@XZ_5.0+0xf8>
    8128:	mov	w0, #0x5                   	// #5
    812c:	ldp	x21, x22, [sp, #32]
    8130:	b	8110 <lzma_vli_encode@@XZ_5.0+0x1e0>
    8134:	nop
    8138:	ldp	w7, w2, [x0, #24]
    813c:	mov	w3, #0x28                  	// #40
    8140:	ldp	x6, x8, [x0]
    8144:	mov	w5, w2
    8148:	ldr	x9, [x0, #16]
    814c:	umull	x3, w2, w3
    8150:	ldr	w4, [x0, #32]
    8154:	mov	x1, x0
    8158:	add	w2, w2, #0x1
    815c:	add	x0, x6, x3
    8160:	madd	x5, x5, x9, x8
    8164:	str	x5, [x6, x3]
    8168:	cmp	w2, w7
    816c:	csel	w2, w2, wzr, ne  // ne = any
    8170:	add	w3, w4, #0x1
    8174:	str	xzr, [x0, #8]
    8178:	strb	wzr, [x0, #32]
    817c:	stp	w2, w3, [x1, #28]
    8180:	ret
    8184:	nop
    8188:	ldp	w1, w2, [x0, #28]
    818c:	subs	w1, w1, w2
    8190:	b.cs	819c <lzma_vli_encode@@XZ_5.0+0x26c>  // b.hs, b.nlast
    8194:	ldr	w2, [x0, #24]
    8198:	add	w1, w1, w2
    819c:	ldr	x0, [x0]
    81a0:	mov	w2, #0x28                  	// #40
    81a4:	umaddl	x1, w1, w2, x0
    81a8:	ldrb	w0, [x1, #32]
    81ac:	ret
    81b0:	ldr	w7, [x0, #32]
    81b4:	cbz	w7, 827c <lzma_vli_encode@@XZ_5.0+0x34c>
    81b8:	stp	x29, x30, [sp, #-48]!
    81bc:	mov	x6, x2
    81c0:	mov	x29, sp
    81c4:	stp	x19, x20, [sp, #16]
    81c8:	mov	x19, x0
    81cc:	ldr	w0, [x0, #28]
    81d0:	stp	x21, x22, [sp, #32]
    81d4:	mov	x20, x4
    81d8:	cmp	w7, w0
    81dc:	mov	x22, x5
    81e0:	sub	w0, w0, w7
    81e4:	b.ls	81f0 <lzma_vli_encode@@XZ_5.0+0x2c0>  // b.plast
    81e8:	ldr	w2, [x19, #24]
    81ec:	add	w0, w0, w2
    81f0:	mov	w4, #0x28                  	// #40
    81f4:	ldr	x2, [x19]
    81f8:	umull	x0, w0, w4
    81fc:	add	x21, x2, x0
    8200:	ldrb	w4, [x21, #32]
    8204:	cbnz	w4, 821c <lzma_vli_encode@@XZ_5.0+0x2ec>
    8208:	mov	w0, #0x0                   	// #0
    820c:	ldp	x19, x20, [sp, #16]
    8210:	ldp	x21, x22, [sp, #32]
    8214:	ldp	x29, x30, [sp], #48
    8218:	ret
    821c:	ldr	x0, [x2, x0]
    8220:	mov	x5, x3
    8224:	ldr	x2, [x21, #8]
    8228:	mov	x3, x1
    822c:	mov	x4, x6
    8230:	add	x1, x19, #0x28
    8234:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    8238:	ldr	x0, [x21, #8]
    823c:	ldr	x1, [x19, #40]
    8240:	cmp	x1, x0
    8244:	b.cc	8208 <lzma_vli_encode@@XZ_5.0+0x2d8>  // b.lo, b.ul, b.last
    8248:	ldr	x0, [x21, #16]
    824c:	str	x0, [x20]
    8250:	ldr	w1, [x19, #32]
    8254:	mov	w0, #0x1                   	// #1
    8258:	ldr	x2, [x21, #24]
    825c:	sub	w1, w1, #0x1
    8260:	str	x2, [x22]
    8264:	str	w1, [x19, #32]
    8268:	str	xzr, [x19, #40]
    826c:	ldp	x19, x20, [sp, #16]
    8270:	ldp	x21, x22, [sp, #32]
    8274:	ldp	x29, x30, [sp], #48
    8278:	ret
    827c:	mov	w0, #0x0                   	// #0
    8280:	ret
    8284:	nop
    8288:	stp	x29, x30, [sp, #-64]!
    828c:	mov	x29, sp
    8290:	stp	x19, x20, [sp, #16]
    8294:	mov	x19, x0
    8298:	mov	x20, x1
    829c:	stp	x23, x24, [sp, #48]
    82a0:	add	x24, x0, #0x168
    82a4:	mov	x0, x24
    82a8:	stp	x21, x22, [sp, #32]
    82ac:	mov	x21, x2
    82b0:	bl	3530 <pthread_mutex_lock@plt>
    82b4:	ldr	x1, [x19, #344]
    82b8:	ldr	w0, [x19, #324]
    82bc:	str	x1, [x20]
    82c0:	ldr	x1, [x19, #352]
    82c4:	str	x1, [x21]
    82c8:	cbz	w0, 8328 <lzma_vli_encode@@XZ_5.0+0x3f8>
    82cc:	mov	x22, #0x0                   	// #0
    82d0:	mov	x23, #0x0                   	// #0
    82d4:	ldr	x0, [x19, #312]
    82d8:	add	x23, x23, #0x1
    82dc:	add	x0, x0, x22
    82e0:	add	x0, x0, #0x160
    82e4:	bl	3530 <pthread_mutex_lock@plt>
    82e8:	ldr	x1, [x19, #312]
    82ec:	ldr	x2, [x20]
    82f0:	add	x1, x1, x22
    82f4:	add	x0, x1, #0x160
    82f8:	add	x22, x22, #0x1d0
    82fc:	ldr	x3, [x1, #48]
    8300:	add	x2, x2, x3
    8304:	str	x2, [x20]
    8308:	ldr	x2, [x21]
    830c:	ldr	x1, [x1, #56]
    8310:	add	x1, x2, x1
    8314:	str	x1, [x21]
    8318:	bl	3550 <pthread_mutex_unlock@plt>
    831c:	ldr	w0, [x19, #324]
    8320:	cmp	x0, x23
    8324:	b.hi	82d4 <lzma_vli_encode@@XZ_5.0+0x3a4>  // b.pmore
    8328:	mov	x0, x24
    832c:	ldp	x19, x20, [sp, #16]
    8330:	ldp	x21, x22, [sp, #32]
    8334:	ldp	x23, x24, [sp, #48]
    8338:	ldp	x29, x30, [sp], #64
    833c:	b	3550 <pthread_mutex_unlock@plt>
    8340:	stp	x29, x30, [sp, #-32]!
    8344:	mov	x29, sp
    8348:	stp	x19, x20, [sp, #16]
    834c:	mov	x19, x0
    8350:	mov	w20, w1
    8354:	ldr	x0, [x0]
    8358:	add	x0, x0, #0x168
    835c:	bl	3530 <pthread_mutex_lock@plt>
    8360:	ldr	x0, [x19]
    8364:	ldr	w1, [x0, #308]
    8368:	cbnz	w1, 8370 <lzma_vli_encode@@XZ_5.0+0x440>
    836c:	str	w20, [x0, #308]
    8370:	add	x0, x0, #0x198
    8374:	bl	3200 <pthread_cond_signal@plt>
    8378:	ldr	x0, [x19]
    837c:	ldp	x19, x20, [sp, #16]
    8380:	add	x0, x0, #0x168
    8384:	ldp	x29, x30, [sp], #32
    8388:	b	3550 <pthread_mutex_unlock@plt>
    838c:	nop
    8390:	sub	sp, sp, #0x90
    8394:	stp	x29, x30, [sp, #16]
    8398:	add	x29, sp, #0x10
    839c:	stp	x27, x28, [sp, #96]
    83a0:	add	x27, sp, #0x88
    83a4:	stp	x19, x20, [sp, #32]
    83a8:	mov	x19, x0
    83ac:	add	x20, x0, #0x160
    83b0:	stp	x21, x22, [sp, #48]
    83b4:	add	x21, x0, #0x190
    83b8:	add	x0, x0, #0x40
    83bc:	stp	x25, x26, [sp, #80]
    83c0:	mov	w26, #0x3                   	// #3
    83c4:	str	x0, [sp, #120]
    83c8:	mov	x0, x20
    83cc:	bl	3530 <pthread_mutex_lock@plt>
    83d0:	b	83e4 <lzma_vli_encode@@XZ_5.0+0x4b4>
    83d4:	mov	x1, x20
    83d8:	mov	x0, x21
    83dc:	cbnz	w28, 840c <lzma_vli_encode@@XZ_5.0+0x4dc>
    83e0:	bl	33a0 <pthread_cond_wait@plt>
    83e4:	ldr	w28, [x19]
    83e8:	cmp	w28, #0x3
    83ec:	b.ne	83d4 <lzma_vli_encode@@XZ_5.0+0x4a4>  // b.any
    83f0:	str	wzr, [x19]
    83f4:	mov	x0, x21
    83f8:	bl	3200 <pthread_cond_signal@plt>
    83fc:	ldr	w28, [x19]
    8400:	mov	x1, x20
    8404:	mov	x0, x21
    8408:	cbz	w28, 83e0 <lzma_vli_encode@@XZ_5.0+0x4b0>
    840c:	mov	x0, x20
    8410:	bl	3550 <pthread_mutex_unlock@plt>
    8414:	cmp	w28, #0x2
    8418:	b.ls	846c <lzma_vli_encode@@XZ_5.0+0x53c>  // b.plast
    841c:	cmp	w28, #0x4
    8420:	b.ne	8608 <lzma_vli_encode@@XZ_5.0+0x6d8>  // b.any
    8424:	mov	x0, x20
    8428:	bl	3410 <pthread_mutex_destroy@plt>
    842c:	mov	x0, x21
    8430:	bl	3520 <pthread_cond_destroy@plt>
    8434:	ldr	x1, [x19, #40]
    8438:	ldr	x0, [sp, #120]
    843c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    8440:	ldr	x0, [x19, #8]
    8444:	ldr	x1, [x19, #40]
    8448:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    844c:	mov	x0, #0x0                   	// #0
    8450:	ldp	x29, x30, [sp, #16]
    8454:	ldp	x19, x20, [sp, #32]
    8458:	ldp	x21, x22, [sp, #48]
    845c:	ldp	x25, x26, [sp, #80]
    8460:	ldp	x27, x28, [sp, #96]
    8464:	add	sp, sp, #0x90
    8468:	ret
    846c:	ldr	x1, [x19, #32]
    8470:	stp	x23, x24, [sp, #64]
    8474:	add	x24, x19, #0x88
    8478:	add	x2, x1, #0x10
    847c:	mov	x0, x24
    8480:	ldr	w4, [x1, #192]
    8484:	ldr	x3, [x1, #8]
    8488:	ldr	x1, [x1, #272]
    848c:	stp	xzr, xzr, [x19, #136]
    8490:	stp	xzr, xzr, [x24, #32]
    8494:	stp	xzr, xzr, [x24, #48]
    8498:	stp	xzr, xzr, [x24, #64]
    849c:	stp	xzr, xzr, [x24, #80]
    84a0:	stp	xzr, xzr, [x24, #96]
    84a4:	stp	xzr, xzr, [x24, #112]
    84a8:	stp	xzr, xzr, [x24, #128]
    84ac:	stp	xzr, xzr, [x24, #144]
    84b0:	stp	xzr, xzr, [x24, #160]
    84b4:	stp	xzr, xzr, [x24, #176]
    84b8:	stp	xzr, xzr, [x24, #192]
    84bc:	str	w4, [x19, #144]
    84c0:	stp	x1, x3, [x19, #152]
    84c4:	str	x2, [x19, #168]
    84c8:	bl	3160 <lzma_block_header_size@plt>
    84cc:	cbnz	w0, 861c <lzma_vli_encode@@XZ_5.0+0x6ec>
    84d0:	ldr	x1, [x19, #40]
    84d4:	mov	x2, x24
    84d8:	ldr	x0, [sp, #120]
    84dc:	bl	6310 <lzma_block_uncomp_encode@@XZ_5.2+0x2d8>
    84e0:	cbnz	w0, 861c <lzma_vli_encode@@XZ_5.0+0x6ec>
    84e4:	ldp	x0, x1, [x19, #24]
    84e8:	mov	x22, #0x0                   	// #0
    84ec:	str	xzr, [sp, #136]
    84f0:	ldr	x25, [x1, #272]
    84f4:	ldr	w1, [x19, #140]
    84f8:	str	x1, [x0, #8]
    84fc:	nop
    8500:	mov	x0, x20
    8504:	bl	3530 <pthread_mutex_lock@plt>
    8508:	ldp	x23, x0, [x19, #16]
    850c:	ldr	x1, [sp, #136]
    8510:	ldr	x0, [x0, #8]
    8514:	stp	x1, x0, [x19, #48]
    8518:	cmp	x22, x23
    851c:	b.eq	8534 <lzma_vli_encode@@XZ_5.0+0x604>  // b.none
    8520:	b	86ac <lzma_vli_encode@@XZ_5.0+0x77c>
    8524:	bl	33a0 <pthread_cond_wait@plt>
    8528:	ldr	x0, [x19, #16]
    852c:	cmp	x0, x22
    8530:	b.ne	8610 <lzma_vli_encode@@XZ_5.0+0x6e0>  // b.any
    8534:	ldr	w28, [x19]
    8538:	mov	x1, x20
    853c:	mov	x0, x21
    8540:	cmp	w28, #0x1
    8544:	b.eq	8524 <lzma_vli_encode@@XZ_5.0+0x5f4>  // b.none
    8548:	mov	x22, x23
    854c:	mov	x0, x20
    8550:	bl	3550 <pthread_mutex_unlock@plt>
    8554:	cmp	w28, #0x2
    8558:	b.hi	85fc <lzma_vli_encode@@XZ_5.0+0x6cc>  // b.pmore
    855c:	ldr	x0, [sp, #136]
    8560:	csel	w8, w26, wzr, eq  // eq = none
    8564:	mov	x4, x22
    8568:	sub	x1, x22, x0
    856c:	cmp	x1, #0x4, lsl #12
    8570:	b.ls	857c <lzma_vli_encode@@XZ_5.0+0x64c>  // b.plast
    8574:	add	x4, x0, #0x4, lsl #12
    8578:	mov	w8, #0x0                   	// #0
    857c:	ldr	x6, [x19, #24]
    8580:	mov	x7, x25
    8584:	ldr	x2, [x19, #8]
    8588:	mov	x3, x27
    858c:	ldr	x5, [x6], #8
    8590:	ldr	x1, [x19, #40]
    8594:	ldr	x0, [x19, #64]
    8598:	ldr	x9, [x19, #88]
    859c:	str	w8, [sp]
    85a0:	blr	x9
    85a4:	cbnz	w0, 86b8 <lzma_vli_encode@@XZ_5.0+0x788>
    85a8:	ldr	x0, [x19, #24]
    85ac:	ldr	x0, [x0, #8]
    85b0:	cmp	x25, x0
    85b4:	b.hi	8500 <lzma_vli_encode@@XZ_5.0+0x5d0>  // b.pmore
    85b8:	mov	x0, x20
    85bc:	bl	3530 <pthread_mutex_lock@plt>
    85c0:	ldr	w28, [x19]
    85c4:	cmp	w28, #0x1
    85c8:	b.ne	85e8 <lzma_vli_encode@@XZ_5.0+0x6b8>  // b.any
    85cc:	nop
    85d0:	mov	x1, x20
    85d4:	mov	x0, x21
    85d8:	bl	33a0 <pthread_cond_wait@plt>
    85dc:	ldr	w28, [x19]
    85e0:	cmp	w28, #0x1
    85e4:	b.eq	85d0 <lzma_vli_encode@@XZ_5.0+0x6a0>  // b.none
    85e8:	mov	x0, x20
    85ec:	ldr	x22, [x19, #16]
    85f0:	bl	3550 <pthread_mutex_unlock@plt>
    85f4:	cmp	w28, #0x2
    85f8:	b.ls	86f4 <lzma_vli_encode@@XZ_5.0+0x7c4>  // b.plast
    85fc:	cmp	w28, #0x4
    8600:	ldp	x23, x24, [sp, #64]
    8604:	b.eq	8424 <lzma_vli_encode@@XZ_5.0+0x4f4>  // b.none
    8608:	mov	w22, #0x0                   	// #0
    860c:	b	8630 <lzma_vli_encode@@XZ_5.0+0x700>
    8610:	ldr	w28, [x19]
    8614:	mov	x22, x0
    8618:	b	854c <lzma_vli_encode@@XZ_5.0+0x61c>
    861c:	mov	w1, w0
    8620:	add	x0, x19, #0x20
    8624:	bl	8340 <lzma_vli_encode@@XZ_5.0+0x410>
    8628:	mov	w22, #0x0                   	// #0
    862c:	ldp	x23, x24, [sp, #64]
    8630:	mov	x0, x20
    8634:	bl	3530 <pthread_mutex_lock@plt>
    8638:	ldr	w0, [x19]
    863c:	cmp	w0, #0x4
    8640:	b.eq	8650 <lzma_vli_encode@@XZ_5.0+0x720>  // b.none
    8644:	str	wzr, [x19]
    8648:	mov	x0, x21
    864c:	bl	3200 <pthread_cond_signal@plt>
    8650:	mov	x0, x20
    8654:	bl	3550 <pthread_mutex_unlock@plt>
    8658:	ldr	x0, [x19, #32]
    865c:	add	x0, x0, #0x168
    8660:	bl	3530 <pthread_mutex_lock@plt>
    8664:	ldp	x0, x1, [x19, #24]
    8668:	strb	w22, [x0, #32]
    866c:	ldp	x3, x2, [x1, #344]
    8670:	ldr	x4, [x0, #8]
    8674:	ldr	x5, [x0, #24]
    8678:	add	x0, x1, #0x198
    867c:	add	x2, x2, x4
    8680:	add	x3, x3, x5
    8684:	stp	x3, x2, [x1, #344]
    8688:	ldr	x2, [x1, #328]
    868c:	stp	xzr, xzr, [x19, #48]
    8690:	str	x2, [x19, #344]
    8694:	str	x19, [x1, #328]
    8698:	bl	3200 <pthread_cond_signal@plt>
    869c:	ldr	x0, [x19, #32]
    86a0:	add	x0, x0, #0x168
    86a4:	bl	3550 <pthread_mutex_unlock@plt>
    86a8:	b	83c8 <lzma_vli_encode@@XZ_5.0+0x498>
    86ac:	ldr	w28, [x19]
    86b0:	mov	x22, x23
    86b4:	b	854c <lzma_vli_encode@@XZ_5.0+0x61c>
    86b8:	cmp	w0, #0x1
    86bc:	b.ne	861c <lzma_vli_encode@@XZ_5.0+0x6ec>  // b.any
    86c0:	ldr	x1, [x19, #24]
    86c4:	mov	x0, x24
    86c8:	ldr	x1, [x1]
    86cc:	bl	3540 <lzma_block_header_encode@plt>
    86d0:	cbnz	w0, 861c <lzma_vli_encode@@XZ_5.0+0x6ec>
    86d4:	mov	x0, x24
    86d8:	bl	3190 <lzma_block_unpadded_size@plt>
    86dc:	ldr	x23, [x19, #24]
    86e0:	mov	w22, #0x1                   	// #1
    86e4:	ldr	x1, [x19, #160]
    86e8:	stp	x0, x1, [x23, #16]
    86ec:	ldp	x23, x24, [sp, #64]
    86f0:	b	8630 <lzma_vli_encode@@XZ_5.0+0x700>
    86f4:	ldr	x0, [x19, #24]
    86f8:	mov	x5, x25
    86fc:	ldr	x1, [x19, #8]
    8700:	mov	x4, x0
    8704:	mov	x2, x22
    8708:	ldr	x3, [x4], #8
    870c:	str	xzr, [x0, #8]
    8710:	mov	x0, x24
    8714:	bl	34c0 <lzma_block_uncomp_encode@plt>
    8718:	cbz	w0, 86d4 <lzma_vli_encode@@XZ_5.0+0x7a4>
    871c:	add	x0, x19, #0x20
    8720:	mov	w1, #0xb                   	// #11
    8724:	mov	w22, #0x0                   	// #0
    8728:	bl	8340 <lzma_vli_encode@@XZ_5.0+0x410>
    872c:	ldp	x23, x24, [sp, #64]
    8730:	b	8630 <lzma_vli_encode@@XZ_5.0+0x700>
    8734:	nop
    8738:	stp	x29, x30, [sp, #-80]!
    873c:	mov	x29, sp
    8740:	stp	x19, x20, [sp, #16]
    8744:	mov	x20, x0
    8748:	ldr	w0, [x1]
    874c:	cbnz	w0, 875c <lzma_vli_encode@@XZ_5.0+0x82c>
    8750:	ldp	x19, x20, [sp, #16]
    8754:	ldp	x29, x30, [sp], #80
    8758:	ret
    875c:	stp	x21, x22, [sp, #32]
    8760:	mov	x22, x1
    8764:	mov	w21, #0x0                   	// #0
    8768:	str	x25, [sp, #64]
    876c:	and	w25, w2, #0xff
    8770:	stp	x23, x24, [sp, #48]
    8774:	mov	w24, #0x1d0                 	// #464
    8778:	mov	w23, #0x3                   	// #3
    877c:	ldr	x0, [x20]
    8780:	umull	x19, w21, w24
    8784:	add	w21, w21, #0x1
    8788:	add	x0, x0, x19
    878c:	add	x0, x0, #0x160
    8790:	bl	3530 <pthread_mutex_lock@plt>
    8794:	ldr	x1, [x20]
    8798:	add	x0, x1, x19
    879c:	str	w23, [x1, x19]
    87a0:	add	x0, x0, #0x190
    87a4:	bl	3200 <pthread_cond_signal@plt>
    87a8:	ldr	x0, [x20]
    87ac:	add	x0, x0, x19
    87b0:	add	x0, x0, #0x160
    87b4:	bl	3550 <pthread_mutex_unlock@plt>
    87b8:	ldr	w0, [x22]
    87bc:	cmp	w21, w0
    87c0:	b.cc	877c <lzma_vli_encode@@XZ_5.0+0x84c>  // b.lo, b.ul, b.last
    87c4:	cbz	w25, 8834 <lzma_vli_encode@@XZ_5.0+0x904>
    87c8:	mov	w21, #0x0                   	// #0
    87cc:	mov	w23, #0x1d0                 	// #464
    87d0:	cbz	w0, 8834 <lzma_vli_encode@@XZ_5.0+0x904>
    87d4:	nop
    87d8:	ldr	x0, [x20]
    87dc:	umull	x19, w21, w23
    87e0:	add	x0, x0, x19
    87e4:	add	x0, x0, #0x160
    87e8:	bl	3530 <pthread_mutex_lock@plt>
    87ec:	ldr	x1, [x20]
    87f0:	add	x0, x1, x19
    87f4:	ldr	w1, [x1, x19]
    87f8:	cbz	w1, 881c <lzma_vli_encode@@XZ_5.0+0x8ec>
    87fc:	nop
    8800:	add	x1, x0, #0x160
    8804:	add	x0, x0, #0x190
    8808:	bl	33a0 <pthread_cond_wait@plt>
    880c:	ldr	x2, [x20]
    8810:	add	x0, x2, x19
    8814:	ldr	w2, [x2, x19]
    8818:	cbnz	w2, 8800 <lzma_vli_encode@@XZ_5.0+0x8d0>
    881c:	add	x0, x0, #0x160
    8820:	bl	3550 <pthread_mutex_unlock@plt>
    8824:	ldr	w0, [x22]
    8828:	add	w21, w21, #0x1
    882c:	cmp	w21, w0
    8830:	b.cc	87d8 <lzma_vli_encode@@XZ_5.0+0x8a8>  // b.lo, b.ul, b.last
    8834:	ldp	x19, x20, [sp, #16]
    8838:	ldp	x21, x22, [sp, #32]
    883c:	ldp	x23, x24, [sp, #48]
    8840:	ldr	x25, [sp, #64]
    8844:	ldp	x29, x30, [sp], #80
    8848:	ret
    884c:	nop
    8850:	cbz	x0, 88fc <lzma_vli_encode@@XZ_5.0+0x9cc>
    8854:	stp	x29, x30, [sp, #-64]!
    8858:	mov	x29, sp
    885c:	stp	x19, x20, [sp, #16]
    8860:	mov	x19, x0
    8864:	ldr	w0, [x0]
    8868:	cbnz	w0, 88ec <lzma_vli_encode@@XZ_5.0+0x9bc>
    886c:	ldr	w0, [x19, #4]
    8870:	stp	x21, x22, [sp, #32]
    8874:	mov	x22, x1
    8878:	sub	w0, w0, #0x1
    887c:	mov	w1, #0x3fff                	// #16383
    8880:	cmp	w0, w1
    8884:	b.hi	88e8 <lzma_vli_encode@@XZ_5.0+0x9b8>  // b.pmore
    8888:	ldr	x0, [x19, #24]
    888c:	mov	x20, x3
    8890:	mov	x21, x4
    8894:	cbz	x0, 8904 <lzma_vli_encode@@XZ_5.0+0x9d4>
    8898:	str	x0, [x2]
    889c:	ldr	x0, [x19, #8]
    88a0:	cbz	x0, 88d8 <lzma_vli_encode@@XZ_5.0+0x9a8>
    88a4:	mov	x1, #0x3ffffffffffff       	// #1125899906842623
    88a8:	cmp	x0, x1
    88ac:	b.hi	88e8 <lzma_vli_encode@@XZ_5.0+0x9b8>  // b.pmore
    88b0:	str	x0, [x20]
    88b4:	bl	5fb0 <lzma_alone_encoder@@XZ_5.0+0x5a0>
    88b8:	str	x0, [x21]
    88bc:	cmp	x0, #0x0
    88c0:	mov	w1, #0x5                   	// #5
    88c4:	csel	w0, wzr, w1, ne  // ne = any
    88c8:	ldp	x19, x20, [sp, #16]
    88cc:	ldp	x21, x22, [sp, #32]
    88d0:	ldp	x29, x30, [sp], #64
    88d4:	ret
    88d8:	ldr	x0, [x2]
    88dc:	bl	6c80 <lzma_filters_update@@XZ_5.0+0xe8>
    88e0:	str	x0, [x20]
    88e4:	cbnz	x0, 88b4 <lzma_vli_encode@@XZ_5.0+0x984>
    88e8:	ldp	x21, x22, [sp, #32]
    88ec:	mov	w0, #0x8                   	// #8
    88f0:	ldp	x19, x20, [sp, #16]
    88f4:	ldp	x29, x30, [sp], #64
    88f8:	ret
    88fc:	mov	w0, #0xb                   	// #11
    8900:	ret
    8904:	ldr	w1, [x19, #20]
    8908:	mov	x0, x22
    890c:	str	x2, [sp, #56]
    8910:	bl	3f48 <lzma_block_total_size@@XZ_5.0+0x28>
    8914:	tst	w0, #0xff
    8918:	b.ne	88e8 <lzma_vli_encode@@XZ_5.0+0x9b8>  // b.any
    891c:	ldr	x2, [sp, #56]
    8920:	str	x22, [x2]
    8924:	b	889c <lzma_vli_encode@@XZ_5.0+0x96c>
    8928:	stp	x29, x30, [sp, #-80]!
    892c:	mov	x29, sp
    8930:	stp	x19, x20, [sp, #16]
    8934:	mov	x20, x0
    8938:	ldr	w0, [x1]
    893c:	stp	x23, x24, [sp, #48]
    8940:	mov	x23, x2
    8944:	cbnz	w0, 8960 <lzma_vli_encode@@XZ_5.0+0xa30>
    8948:	mov	x1, x23
    894c:	ldr	x0, [x20]
    8950:	ldp	x19, x20, [sp, #16]
    8954:	ldp	x23, x24, [sp, #48]
    8958:	ldp	x29, x30, [sp], #80
    895c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8960:	stp	x21, x22, [sp, #32]
    8964:	mov	x21, x1
    8968:	mov	w22, #0x0                   	// #0
    896c:	mov	w24, #0x4                   	// #4
    8970:	str	x25, [sp, #64]
    8974:	mov	w25, #0x1d0                 	// #464
    8978:	ldr	x0, [x20]
    897c:	umull	x19, w22, w25
    8980:	add	w22, w22, #0x1
    8984:	add	x0, x0, x19
    8988:	add	x0, x0, #0x160
    898c:	bl	3530 <pthread_mutex_lock@plt>
    8990:	ldr	x1, [x20]
    8994:	add	x0, x1, x19
    8998:	str	w24, [x1, x19]
    899c:	add	x0, x0, #0x190
    89a0:	bl	3200 <pthread_cond_signal@plt>
    89a4:	ldr	x0, [x20]
    89a8:	add	x0, x0, x19
    89ac:	add	x0, x0, #0x160
    89b0:	bl	3550 <pthread_mutex_unlock@plt>
    89b4:	ldr	w0, [x21]
    89b8:	cmp	w22, w0
    89bc:	b.cc	8978 <lzma_vli_encode@@XZ_5.0+0xa48>  // b.lo, b.ul, b.last
    89c0:	cbz	w0, 89f4 <lzma_vli_encode@@XZ_5.0+0xac4>
    89c4:	mov	w19, #0x0                   	// #0
    89c8:	mov	w22, #0x1d0                 	// #464
    89cc:	nop
    89d0:	ldr	x3, [x20]
    89d4:	mov	x1, #0x0                   	// #0
    89d8:	umaddl	x3, w19, w22, x3
    89dc:	add	w19, w19, #0x1
    89e0:	ldr	x0, [x3, #456]
    89e4:	bl	32d0 <pthread_join@plt>
    89e8:	ldr	w3, [x21]
    89ec:	cmp	w19, w3
    89f0:	b.cc	89d0 <lzma_vli_encode@@XZ_5.0+0xaa0>  // b.lo, b.ul, b.last
    89f4:	mov	x1, x23
    89f8:	ldr	x0, [x20]
    89fc:	ldp	x19, x20, [sp, #16]
    8a00:	ldp	x21, x22, [sp, #32]
    8a04:	ldp	x23, x24, [sp, #48]
    8a08:	ldr	x25, [sp, #64]
    8a0c:	ldp	x29, x30, [sp], #80
    8a10:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8a14:	nop
    8a18:	stp	x29, x30, [sp, #-336]!
    8a1c:	mov	x29, sp
    8a20:	stp	x19, x20, [sp, #16]
    8a24:	mov	x20, x2
    8a28:	adrp	x19, 8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    8a2c:	ldr	x2, [x0, #16]
    8a30:	stp	x21, x22, [sp, #32]
    8a34:	add	x19, x19, #0xa18
    8a38:	mov	x22, x0
    8a3c:	mov	x21, x1
    8a40:	cmp	x2, x19
    8a44:	b.eq	8a4c <lzma_vli_encode@@XZ_5.0+0xb1c>  // b.none
    8a48:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    8a4c:	str	x19, [x22, #16]
    8a50:	add	x4, sp, #0x70
    8a54:	add	x3, sp, #0x68
    8a58:	add	x2, sp, #0x60
    8a5c:	add	x1, sp, #0x90
    8a60:	mov	x0, x20
    8a64:	bl	8850 <lzma_vli_encode@@XZ_5.0+0x920>
    8a68:	mov	w19, w0
    8a6c:	cbnz	w0, 8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8a70:	ldr	x0, [sp, #96]
    8a74:	bl	3220 <lzma_raw_encoder_memusage@plt>
    8a78:	cmn	x0, #0x1
    8a7c:	b.eq	8c00 <lzma_vli_encode@@XZ_5.0+0xcd0>  // b.none
    8a80:	ldr	w0, [x20, #32]
    8a84:	cmp	w0, #0xf
    8a88:	b.hi	8b80 <lzma_vli_encode@@XZ_5.0+0xc50>  // b.pmore
    8a8c:	bl	30e0 <lzma_check_is_supported@plt>
    8a90:	tst	w0, #0xff
    8a94:	b.eq	8bf8 <lzma_vli_encode@@XZ_5.0+0xcc8>  // b.none
    8a98:	stp	x23, x24, [sp, #48]
    8a9c:	ldr	x23, [x22]
    8aa0:	cbz	x23, 8c08 <lzma_vli_encode@@XZ_5.0+0xcd8>
    8aa4:	ldr	w19, [x23, #320]
    8aa8:	ldr	x1, [sp, #104]
    8aac:	add	x0, x23, #0x138
    8ab0:	ldr	w2, [x20, #4]
    8ab4:	str	wzr, [x23]
    8ab8:	str	x1, [x23, #8]
    8abc:	cmp	w2, w19
    8ac0:	str	wzr, [x23, #308]
    8ac4:	add	x1, x23, #0x144
    8ac8:	str	xzr, [x23, #336]
    8acc:	b.eq	8be8 <lzma_vli_encode@@XZ_5.0+0xcb8>  // b.none
    8ad0:	mov	x2, x21
    8ad4:	bl	8928 <lzma_vli_encode@@XZ_5.0+0x9f8>
    8ad8:	stp	xzr, xzr, [x23, #312]
    8adc:	mov	w0, #0x1d0                 	// #464
    8ae0:	mov	x1, x21
    8ae4:	ldr	w2, [x20, #4]
    8ae8:	str	xzr, [x23, #328]
    8aec:	umull	x0, w2, w0
    8af0:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    8af4:	str	x0, [x23, #312]
    8af8:	cbz	x0, 8ce4 <lzma_vli_encode@@XZ_5.0+0xdb4>
    8afc:	ldr	w3, [x20, #4]
    8b00:	str	w3, [x23, #320]
    8b04:	ldr	x2, [sp, #112]
    8b08:	mov	x1, x21
    8b0c:	add	x0, x23, #0x100
    8b10:	bl	8068 <lzma_vli_encode@@XZ_5.0+0x138>
    8b14:	mov	w19, w0
    8b18:	cbnz	w0, 8b68 <lzma_vli_encode@@XZ_5.0+0xc38>
    8b1c:	ldr	w1, [x20, #16]
    8b20:	add	x19, x23, #0x18
    8b24:	ldr	x0, [x23, #16]
    8b28:	str	w1, [x23, #304]
    8b2c:	cmn	x0, #0x1
    8b30:	b.eq	8b50 <lzma_vli_encode@@XZ_5.0+0xc20>  // b.none
    8b34:	nop
    8b38:	ldr	x0, [x19], #16
    8b3c:	mov	x1, x21
    8b40:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8b44:	ldur	x1, [x19, #-8]
    8b48:	cmn	x1, #0x1
    8b4c:	b.ne	8b38 <lzma_vli_encode@@XZ_5.0+0xc08>  // b.any
    8b50:	ldr	x0, [sp, #96]
    8b54:	mov	x2, x21
    8b58:	add	x1, x23, #0x10
    8b5c:	bl	3240 <lzma_filters_copy@plt>
    8b60:	mov	w19, w0
    8b64:	cbz	w0, 8b98 <lzma_vli_encode@@XZ_5.0+0xc68>
    8b68:	ldp	x23, x24, [sp, #48]
    8b6c:	mov	w0, w19
    8b70:	ldp	x19, x20, [sp, #16]
    8b74:	ldp	x21, x22, [sp, #32]
    8b78:	ldp	x29, x30, [sp], #336
    8b7c:	ret
    8b80:	mov	w19, #0xb                   	// #11
    8b84:	mov	w0, w19
    8b88:	ldp	x19, x20, [sp, #16]
    8b8c:	ldp	x21, x22, [sp, #32]
    8b90:	ldp	x29, x30, [sp], #336
    8b94:	ret
    8b98:	ldr	x0, [x23, #96]
    8b9c:	mov	x1, x21
    8ba0:	bl	33e0 <lzma_index_end@plt>
    8ba4:	mov	x0, x21
    8ba8:	bl	33b0 <lzma_index_init@plt>
    8bac:	str	x0, [x23, #96]
    8bb0:	cbz	x0, 8ce4 <lzma_vli_encode@@XZ_5.0+0xdb4>
    8bb4:	ldr	w2, [x20, #32]
    8bb8:	add	x1, x23, #0xe8
    8bbc:	str	wzr, [x23, #176]
    8bc0:	add	x0, x23, #0xb0
    8bc4:	str	w2, [x23, #192]
    8bc8:	bl	3390 <lzma_stream_header_encode@plt>
    8bcc:	mov	w19, w0
    8bd0:	cbnz	w0, 8b68 <lzma_vli_encode@@XZ_5.0+0xc38>
    8bd4:	mov	x0, #0xc                   	// #12
    8bd8:	str	xzr, [x23, #248]
    8bdc:	stp	xzr, x0, [x23, #344]
    8be0:	ldp	x23, x24, [sp, #48]
    8be4:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8be8:	mov	w2, #0x1                   	// #1
    8bec:	bl	8738 <lzma_vli_encode@@XZ_5.0+0x808>
    8bf0:	ldr	w3, [x20, #4]
    8bf4:	b	8b04 <lzma_vli_encode@@XZ_5.0+0xbd4>
    8bf8:	mov	w19, #0x3                   	// #3
    8bfc:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8c00:	mov	w19, #0x8                   	// #8
    8c04:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8c08:	mov	x1, x21
    8c0c:	mov	x0, #0x1d0                 	// #464
    8c10:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    8c14:	mov	x23, x0
    8c18:	cbz	x0, 8ce4 <lzma_vli_encode@@XZ_5.0+0xdb4>
    8c1c:	stp	x25, x26, [sp, #64]
    8c20:	add	x25, x0, #0x168
    8c24:	mov	x0, x25
    8c28:	str	x23, [x22]
    8c2c:	mov	x1, #0x0                   	// #0
    8c30:	bl	32a0 <pthread_mutex_init@plt>
    8c34:	cbnz	w0, 8cc4 <lzma_vli_encode@@XZ_5.0+0xd94>
    8c38:	add	x1, sp, #0x80
    8c3c:	add	x24, x23, #0x198
    8c40:	mov	w0, #0x1                   	// #1
    8c44:	bl	3150 <clock_gettime@plt>
    8c48:	cbnz	w0, 8c5c <lzma_vli_encode@@XZ_5.0+0xd2c>
    8c4c:	add	x26, sp, #0x78
    8c50:	mov	x0, x26
    8c54:	bl	33d0 <pthread_condattr_init@plt>
    8c58:	cbz	w0, 8d18 <lzma_vli_encode@@XZ_5.0+0xde8>
    8c5c:	str	wzr, [x24, #48]
    8c60:	mov	x0, x24
    8c64:	mov	x1, #0x0                   	// #0
    8c68:	bl	3420 <pthread_cond_init@plt>
    8c6c:	cbnz	w0, 8cf0 <lzma_vli_encode@@XZ_5.0+0xdc0>
    8c70:	stp	xzr, xzr, [x23, #256]
    8c74:	mov	x1, #0xffffffffffffffff    	// #-1
    8c78:	adrp	x3, 8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    8c7c:	stp	xzr, xzr, [x23, #272]
    8c80:	add	x3, x3, #0xe10
    8c84:	adrp	x2, 8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    8c88:	stp	xzr, xzr, [x23, #288]
    8c8c:	add	x2, x2, #0xd70
    8c90:	ldp	x25, x26, [sp, #64]
    8c94:	str	x1, [x23, #16]
    8c98:	stp	x3, x2, [x22, #24]
    8c9c:	stp	xzr, xzr, [x23, #96]
    8ca0:	stp	x1, xzr, [x23, #112]
    8ca4:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    8ca8:	add	x1, x1, #0x288
    8cac:	str	x1, [x22, #40]
    8cb0:	stp	xzr, xzr, [x23, #128]
    8cb4:	stp	xzr, xzr, [x23, #144]
    8cb8:	stp	xzr, xzr, [x23, #160]
    8cbc:	stp	xzr, xzr, [x23, #312]
    8cc0:	b	8aa8 <lzma_vli_encode@@XZ_5.0+0xb78>
    8cc4:	mov	x0, x23
    8cc8:	mov	x1, x21
    8ccc:	mov	w19, #0x5                   	// #5
    8cd0:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8cd4:	ldp	x23, x24, [sp, #48]
    8cd8:	ldp	x25, x26, [sp, #64]
    8cdc:	str	xzr, [x22]
    8ce0:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8ce4:	mov	w19, #0x5                   	// #5
    8ce8:	ldp	x23, x24, [sp, #48]
    8cec:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8cf0:	mov	x0, x25
    8cf4:	bl	3410 <pthread_mutex_destroy@plt>
    8cf8:	mov	x0, x23
    8cfc:	mov	x1, x21
    8d00:	mov	w19, #0x5                   	// #5
    8d04:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8d08:	ldp	x23, x24, [sp, #48]
    8d0c:	ldp	x25, x26, [sp, #64]
    8d10:	str	xzr, [x22]
    8d14:	b	8b6c <lzma_vli_encode@@XZ_5.0+0xc3c>
    8d18:	mov	x0, x26
    8d1c:	mov	w1, #0x1                   	// #1
    8d20:	bl	3490 <pthread_condattr_setclock@plt>
    8d24:	cbz	w0, 8d34 <lzma_vli_encode@@XZ_5.0+0xe04>
    8d28:	mov	x0, x26
    8d2c:	bl	31e0 <pthread_condattr_destroy@plt>
    8d30:	b	8c5c <lzma_vli_encode@@XZ_5.0+0xd2c>
    8d34:	mov	x1, x26
    8d38:	mov	x0, x24
    8d3c:	str	x27, [sp, #80]
    8d40:	bl	3420 <pthread_cond_init@plt>
    8d44:	mov	w27, w0
    8d48:	mov	x0, x26
    8d4c:	bl	31e0 <pthread_condattr_destroy@plt>
    8d50:	cbnz	w27, 8d64 <lzma_vli_encode@@XZ_5.0+0xe34>
    8d54:	mov	w0, #0x1                   	// #1
    8d58:	ldr	x27, [sp, #80]
    8d5c:	str	w0, [x24, #48]
    8d60:	b	8c70 <lzma_vli_encode@@XZ_5.0+0xd40>
    8d64:	ldr	x27, [sp, #80]
    8d68:	b	8c5c <lzma_vli_encode@@XZ_5.0+0xd2c>
    8d6c:	nop
    8d70:	stp	x29, x30, [sp, #-48]!
    8d74:	mov	x2, x1
    8d78:	mov	x29, sp
    8d7c:	stp	x19, x20, [sp, #16]
    8d80:	mov	x19, x0
    8d84:	str	x21, [sp, #32]
    8d88:	mov	x21, x1
    8d8c:	add	x1, x0, #0x144
    8d90:	add	x0, x0, #0x138
    8d94:	bl	8928 <lzma_vli_encode@@XZ_5.0+0x9f8>
    8d98:	add	x0, x19, #0x100
    8d9c:	mov	x1, x21
    8da0:	bl	8028 <lzma_vli_encode@@XZ_5.0+0xf8>
    8da4:	ldr	x0, [x19, #16]
    8da8:	cmn	x0, #0x1
    8dac:	b.eq	8dd0 <lzma_vli_encode@@XZ_5.0+0xea0>  // b.none
    8db0:	add	x20, x19, #0x18
    8db4:	nop
    8db8:	ldr	x0, [x20], #16
    8dbc:	mov	x1, x21
    8dc0:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8dc4:	ldur	x0, [x20, #-8]
    8dc8:	cmn	x0, #0x1
    8dcc:	b.ne	8db8 <lzma_vli_encode@@XZ_5.0+0xe88>  // b.any
    8dd0:	mov	x1, x21
    8dd4:	add	x0, x19, #0x68
    8dd8:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    8ddc:	ldr	x0, [x19, #96]
    8de0:	mov	x1, x21
    8de4:	bl	33e0 <lzma_index_end@plt>
    8de8:	add	x0, x19, #0x198
    8dec:	bl	3520 <pthread_cond_destroy@plt>
    8df0:	add	x0, x19, #0x168
    8df4:	bl	3410 <pthread_mutex_destroy@plt>
    8df8:	mov	x1, x21
    8dfc:	mov	x0, x19
    8e00:	ldp	x19, x20, [sp, #16]
    8e04:	ldr	x21, [sp, #32]
    8e08:	ldp	x29, x30, [sp], #48
    8e0c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    8e10:	sub	sp, sp, #0x1f0
    8e14:	stp	x29, x30, [sp, #16]
    8e18:	add	x29, sp, #0x10
    8e1c:	stp	x19, x20, [sp, #32]
    8e20:	stp	x23, x24, [sp, #64]
    8e24:	mov	x24, x0
    8e28:	ldr	w23, [x0]
    8e2c:	stp	x25, x26, [sp, #80]
    8e30:	mov	x26, x6
    8e34:	cmp	w23, #0x2
    8e38:	stp	x27, x28, [sp, #96]
    8e3c:	mov	x27, x7
    8e40:	stp	x1, x2, [sp, #120]
    8e44:	str	x5, [sp, #152]
    8e48:	b.eq	9510 <lzma_vli_encode@@XZ_5.0+0x15e0>  // b.none
    8e4c:	b.hi	92c0 <lzma_vli_encode@@XZ_5.0+0x1390>  // b.pmore
    8e50:	stp	x21, x22, [sp, #48]
    8e54:	mov	x20, x4
    8e58:	mov	x22, x3
    8e5c:	cbz	w23, 9578 <lzma_vli_encode@@XZ_5.0+0x1648>
    8e60:	adrp	x0, 8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    8e64:	add	x19, x24, #0x168
    8e68:	add	x0, x0, #0x390
    8e6c:	str	wzr, [sp, #164]
    8e70:	str	x0, [sp, #192]
    8e74:	add	x0, sp, #0xe0
    8e78:	str	x0, [sp, #144]
    8e7c:	stp	xzr, xzr, [sp, #208]
    8e80:	mov	x0, x19
    8e84:	bl	3530 <pthread_mutex_lock@plt>
    8e88:	ldr	w23, [x24, #308]
    8e8c:	cbz	w23, 9254 <lzma_vli_encode@@XZ_5.0+0x1324>
    8e90:	mov	x0, x19
    8e94:	bl	3550 <pthread_mutex_unlock@plt>
    8e98:	cmp	w23, #0x1
    8e9c:	b.ne	9444 <lzma_vli_encode@@XZ_5.0+0x1514>  // b.any
    8ea0:	ldp	x2, x3, [sp, #208]
    8ea4:	ldr	x0, [x24, #96]
    8ea8:	ldr	x1, [sp, #120]
    8eac:	bl	3300 <lzma_index_append@plt>
    8eb0:	mov	w23, w0
    8eb4:	ldr	x1, [x26]
    8eb8:	cmp	x1, x27
    8ebc:	b.cc	8e80 <lzma_vli_encode@@XZ_5.0+0xf50>  // b.lo, b.ul, b.last
    8ec0:	cbnz	w23, 9444 <lzma_vli_encode@@XZ_5.0+0x1514>
    8ec4:	add	x0, sp, #0xf0
    8ec8:	str	x0, [sp, #136]
    8ecc:	ldr	x0, [x24, #336]
    8ed0:	add	x25, sp, #0x170
    8ed4:	mov	w28, #0x1                   	// #1
    8ed8:	ldr	x21, [x22]
    8edc:	cmp	x20, x21
    8ee0:	b.ls	90d4 <lzma_vli_encode@@XZ_5.0+0x11a4>  // b.plast
    8ee4:	cbz	x0, 8f80 <lzma_vli_encode@@XZ_5.0+0x1050>
    8ee8:	ldp	x3, x6, [x0, #8]
    8eec:	mov	x1, x22
    8ef0:	ldr	x5, [x24, #8]
    8ef4:	mov	x4, x25
    8ef8:	ldr	x0, [sp, #128]
    8efc:	mov	x2, x20
    8f00:	str	x6, [sp, #368]
    8f04:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    8f08:	ldr	x1, [x24, #8]
    8f0c:	ldr	x0, [sp, #368]
    8f10:	cmp	x1, x0
    8f14:	b.eq	922c <lzma_vli_encode@@XZ_5.0+0x12fc>  // b.none
    8f18:	ldr	x1, [x22]
    8f1c:	ldr	x0, [x24, #336]
    8f20:	cmp	x1, x20
    8f24:	ldr	w1, [sp, #496]
    8f28:	cset	w21, eq  // eq = none
    8f2c:	add	x0, x0, #0x160
    8f30:	cmp	w1, #0x0
    8f34:	csel	w21, w21, wzr, ne  // ne = any
    8f38:	bl	3530 <pthread_mutex_lock@plt>
    8f3c:	ldr	x1, [x24, #336]
    8f40:	ldr	w0, [x1]
    8f44:	cbz	w0, 9100 <lzma_vli_encode@@XZ_5.0+0x11d0>
    8f48:	ldr	x0, [sp, #368]
    8f4c:	str	x0, [x1, #16]
    8f50:	add	x0, x1, #0x190
    8f54:	cbz	w21, 90e8 <lzma_vli_encode@@XZ_5.0+0x11b8>
    8f58:	mov	w2, #0x2                   	// #2
    8f5c:	str	w2, [x1]
    8f60:	bl	3200 <pthread_cond_signal@plt>
    8f64:	ldr	x0, [x24, #336]
    8f68:	add	x0, x0, #0x160
    8f6c:	bl	3550 <pthread_mutex_unlock@plt>
    8f70:	ldr	x21, [x22]
    8f74:	str	xzr, [x24, #336]
    8f78:	cmp	x21, x20
    8f7c:	b.cs	9128 <lzma_vli_encode@@XZ_5.0+0x11f8>  // b.hs, b.nlast
    8f80:	ldr	w1, [x24, #280]
    8f84:	ldr	w0, [x24, #288]
    8f88:	cmp	w1, w0
    8f8c:	b.ls	9120 <lzma_vli_encode@@XZ_5.0+0x11f0>  // b.plast
    8f90:	mov	x0, x19
    8f94:	bl	3530 <pthread_mutex_lock@plt>
    8f98:	ldr	x0, [x24, #328]
    8f9c:	cbz	x0, 8fa8 <lzma_vli_encode@@XZ_5.0+0x1078>
    8fa0:	ldr	x1, [x0, #344]
    8fa4:	stp	x1, x0, [x24, #328]
    8fa8:	mov	x0, x19
    8fac:	bl	3550 <pthread_mutex_unlock@plt>
    8fb0:	ldr	x4, [x24, #336]
    8fb4:	cbnz	x4, 9314 <lzma_vli_encode@@XZ_5.0+0x13e4>
    8fb8:	ldr	w1, [x24, #320]
    8fbc:	ldr	w0, [x24, #324]
    8fc0:	cmp	w0, w1
    8fc4:	b.eq	9120 <lzma_vli_encode@@XZ_5.0+0x11f0>  // b.none
    8fc8:	mov	w2, #0x1d0                 	// #464
    8fcc:	ldr	x3, [x24, #312]
    8fd0:	umull	x2, w0, w2
    8fd4:	ldr	x0, [x24, #8]
    8fd8:	add	x21, x3, x2
    8fdc:	ldr	x1, [sp, #120]
    8fe0:	stp	x2, x3, [sp, #176]
    8fe4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    8fe8:	str	x0, [x21, #8]
    8fec:	cbz	x0, 9434 <lzma_vli_encode@@XZ_5.0+0x1504>
    8ff0:	add	x4, x21, #0x160
    8ff4:	mov	x1, #0x0                   	// #0
    8ff8:	mov	x0, x4
    8ffc:	str	x4, [sp, #168]
    9000:	bl	32a0 <pthread_mutex_init@plt>
    9004:	cbnz	w0, 9428 <lzma_vli_encode@@XZ_5.0+0x14f8>
    9008:	mov	x1, x25
    900c:	mov	w0, #0x1                   	// #1
    9010:	bl	3150 <clock_gettime@plt>
    9014:	add	x1, x21, #0x190
    9018:	str	x1, [sp, #200]
    901c:	ldr	x4, [sp, #168]
    9020:	cbz	w0, 9478 <lzma_vli_encode@@XZ_5.0+0x1548>
    9024:	str	wzr, [x21, #448]
    9028:	add	x0, x21, #0x190
    902c:	mov	x1, #0x0                   	// #0
    9030:	str	x4, [sp, #168]
    9034:	bl	3420 <pthread_cond_init@plt>
    9038:	ldr	x4, [sp, #168]
    903c:	cbnz	w0, 9420 <lzma_vli_encode@@XZ_5.0+0x14f0>
    9040:	ldp	x1, x0, [sp, #176]
    9044:	str	x4, [sp, #200]
    9048:	ldr	x2, [sp, #120]
    904c:	str	wzr, [x0, x1]
    9050:	mov	x1, #0xffffffffffffffff    	// #-1
    9054:	stp	x24, x2, [x21, #32]
    9058:	mov	x0, x25
    905c:	stp	xzr, xzr, [x21, #48]
    9060:	stp	xzr, x1, [x21, #64]
    9064:	stp	xzr, xzr, [x21, #80]
    9068:	stp	xzr, xzr, [x21, #96]
    906c:	stp	xzr, xzr, [x21, #112]
    9070:	str	xzr, [x21, #128]
    9074:	bl	3170 <sigfillset@plt>
    9078:	ldr	x2, [sp, #136]
    907c:	mov	x1, x25
    9080:	mov	w0, #0x2                   	// #2
    9084:	bl	30c0 <pthread_sigmask@plt>
    9088:	ldr	x2, [sp, #192]
    908c:	mov	x3, x21
    9090:	mov	x1, #0x0                   	// #0
    9094:	add	x0, x21, #0x1c8
    9098:	bl	32b0 <pthread_create@plt>
    909c:	mov	w5, w0
    90a0:	ldr	x1, [sp, #136]
    90a4:	mov	x2, #0x0                   	// #0
    90a8:	mov	w0, #0x2                   	// #2
    90ac:	str	w5, [sp, #168]
    90b0:	bl	30c0 <pthread_sigmask@plt>
    90b4:	ldr	w5, [sp, #168]
    90b8:	ldr	x4, [sp, #200]
    90bc:	cbnz	w5, 940c <lzma_vli_encode@@XZ_5.0+0x14dc>
    90c0:	ldr	w0, [x24, #324]
    90c4:	str	x21, [x24, #336]
    90c8:	add	w0, w0, #0x1
    90cc:	str	w0, [x24, #324]
    90d0:	b	9318 <lzma_vli_encode@@XZ_5.0+0x13e8>
    90d4:	ldr	w1, [sp, #496]
    90d8:	cmp	x0, #0x0
    90dc:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    90e0:	b.ne	8ee8 <lzma_vli_encode@@XZ_5.0+0xfb8>  // b.any
    90e4:	b	9128 <lzma_vli_encode@@XZ_5.0+0x11f8>
    90e8:	bl	3200 <pthread_cond_signal@plt>
    90ec:	ldr	x0, [x24, #336]
    90f0:	add	x0, x0, #0x160
    90f4:	bl	3550 <pthread_mutex_unlock@plt>
    90f8:	ldr	x0, [x24, #336]
    90fc:	b	8ed8 <lzma_vli_encode@@XZ_5.0+0xfa8>
    9100:	add	x0, x1, #0x160
    9104:	bl	3550 <pthread_mutex_unlock@plt>
    9108:	mov	x0, x19
    910c:	bl	3530 <pthread_mutex_lock@plt>
    9110:	ldr	w21, [x24, #308]
    9114:	mov	x0, x19
    9118:	bl	3550 <pthread_mutex_unlock@plt>
    911c:	cbnz	w21, 9440 <lzma_vli_encode@@XZ_5.0+0x1510>
    9120:	ldr	x21, [x22]
    9124:	nop
    9128:	cmp	x20, x21
    912c:	b.eq	9288 <lzma_vli_encode@@XZ_5.0+0x1358>  // b.none
    9130:	ldr	x0, [x26]
    9134:	cmp	x0, x27
    9138:	b.eq	95b0 <lzma_vli_encode@@XZ_5.0+0x1680>  // b.none
    913c:	ldr	w2, [x24, #304]
    9140:	cbz	w2, 914c <lzma_vli_encode@@XZ_5.0+0x121c>
    9144:	ldr	w0, [sp, #164]
    9148:	cbz	w0, 935c <lzma_vli_encode@@XZ_5.0+0x142c>
    914c:	add	x28, x24, #0x100
    9150:	add	x25, x24, #0x198
    9154:	mov	w23, #0x0                   	// #0
    9158:	mov	x0, x19
    915c:	bl	3530 <pthread_mutex_lock@plt>
    9160:	mov	x0, x28
    9164:	cmp	x20, x21
    9168:	b.ls	9184 <lzma_vli_encode@@XZ_5.0+0x1254>  // b.plast
    916c:	ldr	x1, [x24, #328]
    9170:	cbz	x1, 9184 <lzma_vli_encode@@XZ_5.0+0x1254>
    9174:	ldr	w2, [x24, #280]
    9178:	ldr	w1, [x24, #288]
    917c:	cmp	w2, w1
    9180:	b.hi	91e8 <lzma_vli_encode@@XZ_5.0+0x12b8>  // b.pmore
    9184:	bl	8188 <lzma_vli_encode@@XZ_5.0+0x258>
    9188:	mov	w3, w0
    918c:	mov	x1, x19
    9190:	mov	x0, x25
    9194:	tst	w3, #0xff
    9198:	ldr	x2, [sp, #144]
    919c:	b.ne	91e8 <lzma_vli_encode@@XZ_5.0+0x12b8>  // b.any
    91a0:	ldr	w3, [x24, #308]
    91a4:	cbnz	w3, 91e8 <lzma_vli_encode@@XZ_5.0+0x12b8>
    91a8:	cbnz	w23, 93dc <lzma_vli_encode@@XZ_5.0+0x14ac>
    91ac:	ldr	w3, [x24, #304]
    91b0:	cbz	w3, 921c <lzma_vli_encode@@XZ_5.0+0x12ec>
    91b4:	bl	3560 <pthread_cond_timedwait@plt>
    91b8:	cmp	w0, #0x0
    91bc:	cset	w23, ne  // ne = any
    91c0:	mov	x0, x28
    91c4:	cmp	x20, x21
    91c8:	b.hi	916c <lzma_vli_encode@@XZ_5.0+0x123c>  // b.pmore
    91cc:	bl	8188 <lzma_vli_encode@@XZ_5.0+0x258>
    91d0:	mov	w3, w0
    91d4:	mov	x1, x19
    91d8:	mov	x0, x25
    91dc:	tst	w3, #0xff
    91e0:	ldr	x2, [sp, #144]
    91e4:	b.eq	91a0 <lzma_vli_encode@@XZ_5.0+0x1270>  // b.none
    91e8:	mov	x0, x19
    91ec:	bl	3550 <pthread_mutex_unlock@plt>
    91f0:	cbz	w23, 8e80 <lzma_vli_encode@@XZ_5.0+0xf50>
    91f4:	ldp	x21, x22, [sp, #48]
    91f8:	mov	w23, #0x20                  	// #32
    91fc:	mov	w0, w23
    9200:	ldp	x29, x30, [sp, #16]
    9204:	ldp	x19, x20, [sp, #32]
    9208:	ldp	x23, x24, [sp, #64]
    920c:	ldp	x25, x26, [sp, #80]
    9210:	ldp	x27, x28, [sp, #96]
    9214:	add	sp, sp, #0x1f0
    9218:	ret
    921c:	mov	x1, x19
    9220:	mov	x0, x25
    9224:	bl	33a0 <pthread_cond_wait@plt>
    9228:	b	9160 <lzma_vli_encode@@XZ_5.0+0x1230>
    922c:	ldr	x0, [x24, #336]
    9230:	add	x0, x0, #0x160
    9234:	bl	3530 <pthread_mutex_lock@plt>
    9238:	ldr	x1, [x24, #336]
    923c:	ldr	w0, [x1]
    9240:	cbz	w0, 9100 <lzma_vli_encode@@XZ_5.0+0x11d0>
    9244:	ldr	x2, [sp, #368]
    9248:	add	x0, x1, #0x190
    924c:	str	x2, [x1, #16]
    9250:	b	8f58 <lzma_vli_encode@@XZ_5.0+0x1028>
    9254:	ldr	x1, [sp, #152]
    9258:	add	x5, sp, #0xd8
    925c:	add	x4, sp, #0xd0
    9260:	mov	x3, x27
    9264:	mov	x2, x26
    9268:	add	x0, x24, #0x100
    926c:	bl	81b0 <lzma_vli_encode@@XZ_5.0+0x280>
    9270:	mov	w23, w0
    9274:	mov	x0, x19
    9278:	bl	3550 <pthread_mutex_unlock@plt>
    927c:	cmp	w23, #0x1
    9280:	b.ne	8ec0 <lzma_vli_encode@@XZ_5.0+0xf90>  // b.any
    9284:	b	8ea0 <lzma_vli_encode@@XZ_5.0+0xf70>
    9288:	ldr	w0, [sp, #496]
    928c:	cbz	w0, 95ec <lzma_vli_encode@@XZ_5.0+0x16bc>
    9290:	cmp	w0, #0x4
    9294:	b.eq	92b4 <lzma_vli_encode@@XZ_5.0+0x1384>  // b.none
    9298:	ldr	w0, [x24, #288]
    929c:	cbnz	w0, 9130 <lzma_vli_encode@@XZ_5.0+0x1200>
    92a0:	ldr	w0, [sp, #496]
    92a4:	cmp	w0, #0x3
    92a8:	b.eq	94d4 <lzma_vli_encode@@XZ_5.0+0x15a4>  // b.none
    92ac:	cmp	w0, #0x2
    92b0:	b.ne	9130 <lzma_vli_encode@@XZ_5.0+0x1200>  // b.any
    92b4:	mov	w23, #0x1                   	// #1
    92b8:	ldp	x21, x22, [sp, #48]
    92bc:	b	91fc <lzma_vli_encode@@XZ_5.0+0x12cc>
    92c0:	add	x19, x0, #0xe8
    92c4:	cmp	w23, #0x3
    92c8:	b.ne	94b0 <lzma_vli_encode@@XZ_5.0+0x1580>  // b.any
    92cc:	ldr	x3, [sp, #152]
    92d0:	mov	x5, x27
    92d4:	mov	x4, x26
    92d8:	add	x1, x24, #0xf8
    92dc:	mov	x0, x19
    92e0:	mov	x2, #0xc                   	// #12
    92e4:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    92e8:	ldr	x0, [x24, #248]
    92ec:	ldp	x29, x30, [sp, #16]
    92f0:	cmp	x0, #0xb
    92f4:	cset	w23, hi  // hi = pmore
    92f8:	mov	w0, w23
    92fc:	ldp	x19, x20, [sp, #32]
    9300:	ldp	x23, x24, [sp, #64]
    9304:	ldp	x25, x26, [sp, #80]
    9308:	ldp	x27, x28, [sp, #96]
    930c:	add	sp, sp, #0x1f0
    9310:	ret
    9314:	add	x4, x4, #0x160
    9318:	mov	x0, x4
    931c:	bl	3530 <pthread_mutex_lock@plt>
    9320:	ldr	x21, [x24, #336]
    9324:	add	x0, x24, #0x100
    9328:	str	w28, [x21]
    932c:	str	xzr, [x21, #16]
    9330:	bl	8138 <lzma_vli_encode@@XZ_5.0+0x208>
    9334:	ldr	x1, [x24, #336]
    9338:	str	x0, [x21, #24]
    933c:	add	x0, x1, #0x190
    9340:	bl	3200 <pthread_cond_signal@plt>
    9344:	ldr	x0, [x24, #336]
    9348:	add	x0, x0, #0x160
    934c:	bl	3550 <pthread_mutex_unlock@plt>
    9350:	ldr	x0, [x24, #336]
    9354:	cbnz	x0, 8ee8 <lzma_vli_encode@@XZ_5.0+0xfb8>
    9358:	b	9120 <lzma_vli_encode@@XZ_5.0+0x11f0>
    935c:	mov	w4, #0x4dd3                	// #19923
    9360:	mov	w6, #0x3e8                 	// #1000
    9364:	movk	w4, #0x1062, lsl #16
    9368:	mov	w5, #0x4240                	// #16960
    936c:	movk	w5, #0xf, lsl #16
    9370:	ldr	w0, [x24, #456]
    9374:	umull	x4, w2, w4
    9378:	add	x1, sp, #0x170
    937c:	lsr	x3, x4, #38
    9380:	msub	w2, w3, w6, w2
    9384:	mul	w2, w2, w5
    9388:	stp	x3, x2, [sp, #224]
    938c:	bl	3150 <clock_gettime@plt>
    9390:	ldp	x1, x0, [sp, #224]
    9394:	mov	x2, #0xc9ff                	// #51711
    9398:	ldr	x3, [sp, #368]
    939c:	movk	x2, #0x3b9a, lsl #16
    93a0:	add	x1, x1, x3
    93a4:	str	x1, [sp, #224]
    93a8:	ldr	x3, [sp, #376]
    93ac:	add	x0, x0, x3
    93b0:	cmp	x0, x2
    93b4:	b.le	93cc <lzma_vli_encode@@XZ_5.0+0x149c>
    93b8:	mov	x2, #0xffffffffffff3600    	// #-51712
    93bc:	add	x1, x1, #0x1
    93c0:	movk	x2, #0xc465, lsl #16
    93c4:	add	x0, x0, x2
    93c8:	str	x1, [sp, #224]
    93cc:	str	x0, [sp, #232]
    93d0:	mov	w0, #0x1                   	// #1
    93d4:	str	w0, [sp, #164]
    93d8:	b	914c <lzma_vli_encode@@XZ_5.0+0x121c>
    93dc:	mov	x0, x19
    93e0:	mov	w23, #0x20                  	// #32
    93e4:	bl	3550 <pthread_mutex_unlock@plt>
    93e8:	mov	w0, w23
    93ec:	ldp	x29, x30, [sp, #16]
    93f0:	ldp	x19, x20, [sp, #32]
    93f4:	ldp	x21, x22, [sp, #48]
    93f8:	ldp	x23, x24, [sp, #64]
    93fc:	ldp	x25, x26, [sp, #80]
    9400:	ldp	x27, x28, [sp, #96]
    9404:	add	sp, sp, #0x1f0
    9408:	ret
    940c:	add	x0, x21, #0x190
    9410:	str	x4, [sp, #168]
    9414:	bl	3520 <pthread_cond_destroy@plt>
    9418:	ldr	x4, [sp, #168]
    941c:	nop
    9420:	mov	x0, x4
    9424:	bl	3410 <pthread_mutex_destroy@plt>
    9428:	ldr	x0, [x21, #8]
    942c:	ldr	x1, [sp, #120]
    9430:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    9434:	ldr	x0, [x24, #336]
    9438:	cbnz	x0, 8ee8 <lzma_vli_encode@@XZ_5.0+0xfb8>
    943c:	mov	w21, #0x5                   	// #5
    9440:	mov	w23, w21
    9444:	add	x1, x24, #0x144
    9448:	add	x0, x24, #0x138
    944c:	mov	w2, #0x0                   	// #0
    9450:	bl	8738 <lzma_vli_encode@@XZ_5.0+0x808>
    9454:	mov	w0, w23
    9458:	ldp	x29, x30, [sp, #16]
    945c:	ldp	x19, x20, [sp, #32]
    9460:	ldp	x21, x22, [sp, #48]
    9464:	ldp	x23, x24, [sp, #64]
    9468:	ldp	x25, x26, [sp, #80]
    946c:	ldp	x27, x28, [sp, #96]
    9470:	add	sp, sp, #0x1f0
    9474:	ret
    9478:	ldr	x0, [sp, #136]
    947c:	bl	33d0 <pthread_condattr_init@plt>
    9480:	ldr	x4, [sp, #168]
    9484:	cbnz	w0, 9024 <lzma_vli_encode@@XZ_5.0+0x10f4>
    9488:	ldr	x0, [sp, #136]
    948c:	mov	w1, #0x1                   	// #1
    9490:	bl	3490 <pthread_condattr_setclock@plt>
    9494:	ldr	x4, [sp, #168]
    9498:	cbz	w0, 95b8 <lzma_vli_encode@@XZ_5.0+0x1688>
    949c:	ldr	x0, [sp, #136]
    94a0:	str	x4, [sp, #168]
    94a4:	bl	31e0 <pthread_condattr_destroy@plt>
    94a8:	ldr	x4, [sp, #168]
    94ac:	b	9024 <lzma_vli_encode@@XZ_5.0+0x10f4>
    94b0:	mov	w23, #0xb                   	// #11
    94b4:	mov	w0, w23
    94b8:	ldp	x29, x30, [sp, #16]
    94bc:	ldp	x19, x20, [sp, #32]
    94c0:	ldp	x23, x24, [sp, #64]
    94c4:	ldp	x25, x26, [sp, #80]
    94c8:	ldp	x27, x28, [sp, #96]
    94cc:	add	sp, sp, #0x1f0
    94d0:	ret
    94d4:	ldr	x2, [x24, #96]
    94d8:	add	x0, x24, #0x68
    94dc:	ldr	x1, [sp, #120]
    94e0:	bl	7248 <lzma_filter_flags_encode@@XZ_5.0+0x370>
    94e4:	mov	w23, w0
    94e8:	cbnz	w0, 95b0 <lzma_vli_encode@@XZ_5.0+0x1680>
    94ec:	ldr	x0, [x24, #96]
    94f0:	mov	w1, #0x2                   	// #2
    94f4:	str	w1, [x24]
    94f8:	bl	3510 <lzma_index_size@plt>
    94fc:	ldr	x1, [x24, #352]
    9500:	ldp	x21, x22, [sp, #48]
    9504:	add	x1, x1, #0xc
    9508:	add	x1, x1, x0
    950c:	str	x1, [x24, #352]
    9510:	ldr	x0, [x24, #104]
    9514:	str	wzr, [sp]
    9518:	ldr	x1, [sp, #120]
    951c:	mov	x7, x27
    9520:	ldr	x9, [x24, #128]
    9524:	mov	x6, x26
    9528:	ldr	x5, [sp, #152]
    952c:	mov	x4, #0x0                   	// #0
    9530:	mov	x3, #0x0                   	// #0
    9534:	mov	x2, #0x0                   	// #0
    9538:	blr	x9
    953c:	mov	w23, w0
    9540:	cmp	w0, #0x1
    9544:	b.ne	91fc <lzma_vli_encode@@XZ_5.0+0x12cc>  // b.any
    9548:	ldr	x0, [x24, #96]
    954c:	add	x19, x24, #0xe8
    9550:	mov	w23, #0xb                   	// #11
    9554:	bl	3510 <lzma_index_size@plt>
    9558:	str	x0, [x24, #184]
    955c:	mov	x1, x19
    9560:	add	x0, x24, #0xb0
    9564:	bl	3210 <lzma_stream_footer_encode@plt>
    9568:	cbnz	w0, 91fc <lzma_vli_encode@@XZ_5.0+0x12cc>
    956c:	mov	w0, #0x3                   	// #3
    9570:	str	w0, [x24]
    9574:	b	92cc <lzma_vli_encode@@XZ_5.0+0x139c>
    9578:	ldr	x3, [sp, #152]
    957c:	add	x1, x0, #0xf8
    9580:	mov	x5, x7
    9584:	mov	x4, x6
    9588:	add	x0, x0, #0xe8
    958c:	mov	x2, #0xc                   	// #12
    9590:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    9594:	ldr	x0, [x24, #248]
    9598:	cmp	x0, #0xb
    959c:	b.ls	95b0 <lzma_vli_encode@@XZ_5.0+0x1680>  // b.plast
    95a0:	mov	w0, #0x1                   	// #1
    95a4:	str	w0, [x24]
    95a8:	str	xzr, [x24, #248]
    95ac:	b	8e60 <lzma_vli_encode@@XZ_5.0+0xf30>
    95b0:	ldp	x21, x22, [sp, #48]
    95b4:	b	91fc <lzma_vli_encode@@XZ_5.0+0x12cc>
    95b8:	ldr	x1, [sp, #136]
    95bc:	add	x0, x21, #0x190
    95c0:	str	x4, [sp, #200]
    95c4:	bl	3420 <pthread_cond_init@plt>
    95c8:	mov	w1, w0
    95cc:	ldr	x0, [sp, #136]
    95d0:	str	w1, [sp, #168]
    95d4:	bl	31e0 <pthread_condattr_destroy@plt>
    95d8:	ldr	w1, [sp, #168]
    95dc:	ldr	x4, [sp, #200]
    95e0:	cbnz	w1, 9024 <lzma_vli_encode@@XZ_5.0+0x10f4>
    95e4:	str	w28, [x21, #448]
    95e8:	b	9040 <lzma_vli_encode@@XZ_5.0+0x1110>
    95ec:	mov	w23, #0x0                   	// #0
    95f0:	ldp	x21, x22, [sp, #48]
    95f4:	b	91fc <lzma_vli_encode@@XZ_5.0+0x12cc>

00000000000095f8 <lzma_stream_encoder_mt@@XZ_5.2>:
    95f8:	stp	x29, x30, [sp, #-48]!
    95fc:	mov	x29, sp
    9600:	stp	x19, x20, [sp, #16]
    9604:	mov	x20, x0
    9608:	str	x21, [sp, #32]
    960c:	mov	x21, x1
    9610:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    9614:	mov	w19, w0
    9618:	cbz	w0, 9630 <lzma_stream_encoder_mt@@XZ_5.2+0x38>
    961c:	mov	w0, w19
    9620:	ldp	x19, x20, [sp, #16]
    9624:	ldr	x21, [sp, #32]
    9628:	ldp	x29, x30, [sp], #48
    962c:	ret
    9630:	ldp	x1, x0, [x20, #48]
    9634:	mov	x2, x21
    9638:	bl	8a18 <lzma_vli_encode@@XZ_5.0+0xae8>
    963c:	mov	w19, w0
    9640:	cbnz	w0, 9670 <lzma_stream_encoder_mt@@XZ_5.2+0x78>
    9644:	ldr	x0, [x20, #56]
    9648:	mov	w1, #0x1                   	// #1
    964c:	mov	w2, #0x101                 	// #257
    9650:	ldr	x21, [sp, #32]
    9654:	strb	w1, [x0, #88]
    9658:	strh	w2, [x0, #90]
    965c:	strb	w1, [x0, #92]
    9660:	mov	w0, w19
    9664:	ldp	x19, x20, [sp, #16]
    9668:	ldp	x29, x30, [sp], #48
    966c:	ret
    9670:	mov	x0, x20
    9674:	bl	3320 <lzma_end@plt>
    9678:	b	961c <lzma_stream_encoder_mt@@XZ_5.2+0x24>
    967c:	nop

0000000000009680 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    9680:	stp	x29, x30, [sp, #-272]!
    9684:	mov	x29, sp
    9688:	add	x4, sp, #0x48
    968c:	add	x3, sp, #0x40
    9690:	add	x2, sp, #0x38
    9694:	add	x1, sp, #0x50
    9698:	stp	x19, x20, [sp, #16]
    969c:	mov	x20, x0
    96a0:	bl	8850 <lzma_vli_encode@@XZ_5.0+0x920>
    96a4:	cbnz	w0, 9738 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>
    96a8:	ldr	x0, [sp, #56]
    96ac:	stp	x21, x22, [sp, #32]
    96b0:	bl	3220 <lzma_raw_encoder_memusage@plt>
    96b4:	mov	x22, x0
    96b8:	cmn	x0, #0x1
    96bc:	b.eq	9734 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb4>  // b.none
    96c0:	ldp	x21, x0, [sp, #64]
    96c4:	ldr	w19, [x20, #4]
    96c8:	mov	w1, w19
    96cc:	bl	8000 <lzma_vli_encode@@XZ_5.0+0xd0>
    96d0:	cmn	x0, #0x1
    96d4:	b.eq	9734 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb4>  // b.none
    96d8:	ldr	w2, [x20, #4]
    96dc:	mov	x3, #0x81d0                	// #33232
    96e0:	mov	w19, w19
    96e4:	mov	w4, #0x1d0                 	// #464
    96e8:	umaddl	x2, w2, w4, x3
    96ec:	mul	x1, x19, x21
    96f0:	mvn	x3, x2
    96f4:	cmp	x3, x1
    96f8:	b.cc	9734 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb4>  // b.lo, b.ul, b.last
    96fc:	mul	x19, x19, x22
    9700:	add	x1, x1, x2
    9704:	mvn	x2, x1
    9708:	cmp	x2, x19
    970c:	b.cc	9734 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb4>  // b.lo, b.ul, b.last
    9710:	add	x19, x19, x1
    9714:	mvn	x1, x19
    9718:	cmp	x1, x0
    971c:	b.cc	9734 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb4>  // b.lo, b.ul, b.last
    9720:	add	x0, x0, x19
    9724:	ldp	x19, x20, [sp, #16]
    9728:	ldp	x21, x22, [sp, #32]
    972c:	ldp	x29, x30, [sp], #272
    9730:	ret
    9734:	ldp	x21, x22, [sp, #32]
    9738:	mov	x0, #0xffffffffffffffff    	// #-1
    973c:	ldp	x19, x20, [sp, #16]
    9740:	ldp	x29, x30, [sp], #272
    9744:	ret
    9748:	mov	x4, x0
    974c:	ldr	x0, [x0, #104]
    9750:	str	x0, [x1]
    9754:	ldr	x0, [x4, #96]
    9758:	str	x0, [x2]
    975c:	mov	w0, #0x0                   	// #0
    9760:	cbz	x3, 977c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>
    9764:	ldr	x1, [x4, #104]
    9768:	mov	w0, #0x6                   	// #6
    976c:	cmp	x1, x3
    9770:	b.hi	977c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>  // b.pmore
    9774:	mov	w0, #0x0                   	// #0
    9778:	str	x3, [x4, #96]
    977c:	ret
    9780:	stp	x29, x30, [sp, #-64]!
    9784:	mov	x29, sp
    9788:	stp	x19, x20, [sp, #16]
    978c:	mov	x19, x2
    9790:	mov	x20, x0
    9794:	ldr	x2, [x0, #16]
    9798:	stp	x21, x22, [sp, #32]
    979c:	adrp	x21, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    97a0:	str	x23, [sp, #48]
    97a4:	add	x21, x21, #0x780
    97a8:	mov	x22, x1
    97ac:	cmp	x2, x21
    97b0:	and	w23, w3, #0xff
    97b4:	b.eq	97bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13c>  // b.none
    97b8:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    97bc:	ldr	x4, [x20]
    97c0:	str	x21, [x20, #16]
    97c4:	cbz	x4, 9808 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x188>
    97c8:	cmp	x19, #0x0
    97cc:	mov	x1, #0x8000                	// #32768
    97d0:	csinc	x19, x19, xzr, ne  // ne = any
    97d4:	mov	w0, #0x0                   	// #0
    97d8:	str	wzr, [x4, #72]
    97dc:	strb	w23, [x4, #76]
    97e0:	stp	xzr, xzr, [x4, #80]
    97e4:	stp	x19, x1, [x4, #96]
    97e8:	str	wzr, [x4, #112]
    97ec:	str	xzr, [x4, #120]
    97f0:	str	wzr, [x4, #128]
    97f4:	ldp	x19, x20, [sp, #16]
    97f8:	ldp	x21, x22, [sp, #32]
    97fc:	ldr	x23, [sp, #48]
    9800:	ldp	x29, x30, [sp], #64
    9804:	ret
    9808:	mov	x1, x22
    980c:	mov	x0, #0xe0                  	// #224
    9810:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    9814:	mov	x4, x0
    9818:	cbz	x0, 985c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1dc>
    981c:	adrp	x2, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9820:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9824:	add	x2, x2, #0x898
    9828:	add	x1, x1, #0x868
    982c:	adrp	x0, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9830:	mov	x3, #0xffffffffffffffff    	// #-1
    9834:	add	x0, x0, #0x748
    9838:	stp	xzr, x3, [x4]
    983c:	str	x4, [x20]
    9840:	stp	xzr, xzr, [x4, #16]
    9844:	stp	x2, x1, [x20, #24]
    9848:	stp	xzr, xzr, [x4, #32]
    984c:	stp	xzr, xzr, [x4, #48]
    9850:	str	x0, [x20, #56]
    9854:	str	xzr, [x4, #64]
    9858:	b	97c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x148>
    985c:	mov	w0, #0x5                   	// #5
    9860:	b	97f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x174>
    9864:	nop
    9868:	stp	x29, x30, [sp, #-32]!
    986c:	mov	x29, sp
    9870:	stp	x19, x20, [sp, #16]
    9874:	mov	x19, x0
    9878:	mov	x20, x1
    987c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    9880:	mov	x1, x20
    9884:	mov	x0, x19
    9888:	ldp	x19, x20, [sp, #16]
    988c:	ldp	x29, x30, [sp], #32
    9890:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    9894:	nop
    9898:	sub	sp, sp, #0xb0
    989c:	stp	x29, x30, [sp, #16]
    98a0:	add	x29, sp, #0x10
    98a4:	stp	x27, x28, [sp, #96]
    98a8:	mov	x28, x6
    98ac:	ldr	x6, [x6]
    98b0:	str	x5, [sp, #120]
    98b4:	cmp	x7, x6
    98b8:	b.ls	99c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x340>  // b.plast
    98bc:	stp	x23, x24, [sp, #64]
    98c0:	adrp	x23, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    98c4:	mov	x24, x7
    98c8:	ldr	x23, [x23, #3944]
    98cc:	mov	x27, x3
    98d0:	stp	x19, x20, [sp, #32]
    98d4:	mov	x19, x0
    98d8:	mov	x20, x4
    98dc:	stp	x21, x22, [sp, #48]
    98e0:	mov	x22, x1
    98e4:	mov	x21, x2
    98e8:	stp	x25, x26, [sp, #80]
    98ec:	add	x25, x0, #0x70
    98f0:	add	x26, sp, #0x80
    98f4:	ldr	w0, [x19, #72]
    98f8:	cmp	w0, #0x4
    98fc:	b.eq	9a58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3d8>  // b.none
    9900:	ldr	x1, [x27]
    9904:	cmp	x1, x20
    9908:	b.cs	99b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x330>  // b.hs, b.nlast
    990c:	cmp	w0, #0x2
    9910:	b.eq	99ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x36c>  // b.none
    9914:	b.hi	9954 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d4>  // b.pmore
    9918:	cbz	w0, 9aa8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x428>
    991c:	ldr	x0, [x19, #80]
    9920:	ldrb	w4, [x21, x1]
    9924:	add	x5, x0, #0x1
    9928:	ldr	w2, [x19, #112]
    992c:	lsl	w0, w0, #3
    9930:	str	x5, [x19, #80]
    9934:	cmp	x5, #0x4
    9938:	lsl	x0, x4, x0
    993c:	orr	w0, w2, w0
    9940:	str	w0, [x19, #112]
    9944:	b.eq	9ad8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x458>  // b.none
    9948:	add	x1, x1, #0x1
    994c:	str	x1, [x27]
    9950:	b	99a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x328>
    9954:	cmp	w0, #0x3
    9958:	b.ne	99c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x348>  // b.any
    995c:	ldr	x0, [x19, #104]
    9960:	ldr	x1, [x19, #96]
    9964:	cmp	x1, x0
    9968:	b.cc	9b40 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4c0>  // b.lo, b.ul, b.last
    996c:	stp	xzr, xzr, [sp, #128]
    9970:	mov	x2, x26
    9974:	mov	x1, x22
    9978:	stp	xzr, xzr, [sp, #144]
    997c:	mov	x0, x19
    9980:	stp	x23, x25, [sp, #136]
    9984:	stp	xzr, xzr, [sp, #160]
    9988:	bl	3880 <lzma_version_string@@XZ_5.0+0x198>
    998c:	cbnz	w0, 9b58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d8>
    9990:	ldr	x0, [x19]
    9994:	ldr	x1, [x19, #88]
    9998:	bl	fab0 <lzma_mf_is_supported@@XZ_5.0+0x1928>
    999c:	ldr	x6, [x28]
    99a0:	mov	w0, #0x4                   	// #4
    99a4:	str	w0, [x19, #72]
    99a8:	cmp	x6, x24
    99ac:	b.cc	98f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x274>  // b.lo, b.ul, b.last
    99b0:	ldp	x19, x20, [sp, #32]
    99b4:	ldp	x21, x22, [sp, #48]
    99b8:	ldp	x23, x24, [sp, #64]
    99bc:	ldp	x25, x26, [sp, #80]
    99c0:	mov	w0, #0x0                   	// #0
    99c4:	b	99dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x35c>
    99c8:	ldp	x19, x20, [sp, #32]
    99cc:	mov	w0, #0xb                   	// #11
    99d0:	ldp	x21, x22, [sp, #48]
    99d4:	ldp	x23, x24, [sp, #64]
    99d8:	ldp	x25, x26, [sp, #80]
    99dc:	ldp	x29, x30, [sp, #16]
    99e0:	ldp	x27, x28, [sp, #96]
    99e4:	add	sp, sp, #0xb0
    99e8:	ret
    99ec:	ldp	x2, x4, [x19, #80]
    99f0:	add	x8, x1, #0x1
    99f4:	ldrb	w0, [x21, x1]
    99f8:	str	x8, [x27]
    99fc:	lsl	w5, w2, #3
    9a00:	add	x1, x2, #0x1
    9a04:	cmp	x1, #0x7
    9a08:	lsl	x0, x0, x5
    9a0c:	orr	x0, x0, x4
    9a10:	stp	x1, x0, [x19, #80]
    9a14:	b.ls	99a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x328>  // b.plast
    9a18:	mov	x1, #0xffffffc000000000    	// #-274877906944
    9a1c:	add	x0, x0, x1
    9a20:	mov	x1, #0xffffffbfffffffff    	// #-274877906945
    9a24:	cmp	x0, x1
    9a28:	ldrb	w0, [x19, #76]
    9a2c:	cset	w1, cc  // cc = lo, ul, last
    9a30:	tst	w1, w0
    9a34:	b.ne	9b28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>  // b.any
    9a38:	mov	x0, x25
    9a3c:	bl	16850 <lzma_mode_is_supported@@XZ_5.0+0x5450>
    9a40:	mov	w1, #0x3                   	// #3
    9a44:	add	x0, x0, #0x8, lsl #12
    9a48:	str	w1, [x19, #72]
    9a4c:	str	xzr, [x19, #80]
    9a50:	str	x0, [x19, #104]
    9a54:	b	9960 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2e0>
    9a58:	ldr	w1, [sp, #176]
    9a5c:	mov	x7, x24
    9a60:	ldr	x0, [x19]
    9a64:	str	w1, [sp]
    9a68:	ldr	x5, [sp, #120]
    9a6c:	mov	x6, x28
    9a70:	ldr	x8, [x19, #24]
    9a74:	mov	x4, x20
    9a78:	mov	x3, x27
    9a7c:	mov	x2, x21
    9a80:	mov	x1, x22
    9a84:	blr	x8
    9a88:	ldp	x29, x30, [sp, #16]
    9a8c:	ldp	x19, x20, [sp, #32]
    9a90:	ldp	x21, x22, [sp, #48]
    9a94:	ldp	x23, x24, [sp, #64]
    9a98:	ldp	x25, x26, [sp, #80]
    9a9c:	ldp	x27, x28, [sp, #96]
    9aa0:	add	sp, sp, #0xb0
    9aa4:	ret
    9aa8:	ldrb	w1, [x21, x1]
    9aac:	mov	x0, x25
    9ab0:	bl	167c0 <lzma_mode_is_supported@@XZ_5.0+0x53c0>
    9ab4:	tst	w0, #0xff
    9ab8:	b.ne	9b28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>  // b.any
    9abc:	ldr	x0, [x27]
    9ac0:	mov	w1, #0x1                   	// #1
    9ac4:	str	w1, [x19, #72]
    9ac8:	add	x0, x0, #0x1
    9acc:	str	x0, [x27]
    9ad0:	ldr	x6, [x28]
    9ad4:	b	99a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x328>
    9ad8:	cmn	w0, #0x1
    9adc:	ldrb	w2, [x19, #76]
    9ae0:	cset	w4, ne  // ne = any
    9ae4:	tst	w4, w2
    9ae8:	b.ne	9b04 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x484>  // b.any
    9aec:	add	x1, x1, #0x1
    9af0:	mov	w0, #0x2                   	// #2
    9af4:	str	x1, [x27]
    9af8:	str	w0, [x19, #72]
    9afc:	str	xzr, [x19, #80]
    9b00:	b	99a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x328>
    9b04:	sub	w2, w0, #0x1
    9b08:	orr	w2, w2, w2, lsr #2
    9b0c:	orr	w2, w2, w2, lsr #3
    9b10:	orr	w2, w2, w2, lsr #4
    9b14:	orr	w2, w2, w2, lsr #8
    9b18:	orr	w2, w2, w2, lsr #16
    9b1c:	add	w2, w2, #0x1
    9b20:	cmp	w0, w2
    9b24:	b.eq	9aec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x46c>  // b.none
    9b28:	mov	w0, #0x7                   	// #7
    9b2c:	ldp	x19, x20, [sp, #32]
    9b30:	ldp	x21, x22, [sp, #48]
    9b34:	ldp	x23, x24, [sp, #64]
    9b38:	ldp	x25, x26, [sp, #80]
    9b3c:	b	99dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x35c>
    9b40:	mov	w0, #0x6                   	// #6
    9b44:	ldp	x19, x20, [sp, #32]
    9b48:	ldp	x21, x22, [sp, #48]
    9b4c:	ldp	x23, x24, [sp, #64]
    9b50:	ldp	x25, x26, [sp, #80]
    9b54:	b	99dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x35c>
    9b58:	ldp	x19, x20, [sp, #32]
    9b5c:	ldp	x21, x22, [sp, #48]
    9b60:	ldp	x23, x24, [sp, #64]
    9b64:	ldp	x25, x26, [sp, #80]
    9b68:	b	99dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x35c>
    9b6c:	nop

0000000000009b70 <lzma_alone_decoder@@XZ_5.0>:
    9b70:	stp	x29, x30, [sp, #-48]!
    9b74:	mov	x29, sp
    9b78:	stp	x19, x20, [sp, #16]
    9b7c:	mov	x20, x0
    9b80:	str	x21, [sp, #32]
    9b84:	mov	x21, x1
    9b88:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    9b8c:	mov	w19, w0
    9b90:	cbz	w0, 9ba8 <lzma_alone_decoder@@XZ_5.0+0x38>
    9b94:	mov	w0, w19
    9b98:	ldp	x19, x20, [sp, #16]
    9b9c:	ldr	x21, [sp, #32]
    9ba0:	ldp	x29, x30, [sp], #48
    9ba4:	ret
    9ba8:	ldp	x1, x0, [x20, #48]
    9bac:	mov	x2, x21
    9bb0:	mov	w3, #0x0                   	// #0
    9bb4:	bl	9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    9bb8:	mov	w19, w0
    9bbc:	cbnz	w0, 9be4 <lzma_alone_decoder@@XZ_5.0+0x74>
    9bc0:	ldr	x0, [x20, #56]
    9bc4:	mov	w1, #0x1                   	// #1
    9bc8:	ldr	x21, [sp, #32]
    9bcc:	strb	w1, [x0, #88]
    9bd0:	strb	w1, [x0, #91]
    9bd4:	mov	w0, w19
    9bd8:	ldp	x19, x20, [sp, #16]
    9bdc:	ldp	x29, x30, [sp], #48
    9be0:	ret
    9be4:	mov	x0, x20
    9be8:	bl	3320 <lzma_end@plt>
    9bec:	b	9b94 <lzma_alone_decoder@@XZ_5.0+0x24>
    9bf0:	ldr	x1, [x0, #48]
    9bf4:	cbz	x1, 9c04 <lzma_alone_decoder@@XZ_5.0+0x94>
    9bf8:	ldr	x0, [x0]
    9bfc:	mov	x16, x1
    9c00:	br	x16
    9c04:	mov	w0, #0x0                   	// #0
    9c08:	ret
    9c0c:	nop
    9c10:	stp	x29, x30, [sp, #-32]!
    9c14:	mov	x29, sp
    9c18:	ldr	x6, [x0, #56]
    9c1c:	stp	x19, x20, [sp, #16]
    9c20:	mov	x19, x0
    9c24:	mov	x20, x3
    9c28:	cbz	x6, 9c54 <lzma_alone_decoder@@XZ_5.0+0xe4>
    9c2c:	ldr	x0, [x0]
    9c30:	blr	x6
    9c34:	cmp	w0, #0x0
    9c38:	ccmp	x20, #0x0, #0x4, eq  // eq = none
    9c3c:	b.eq	9c48 <lzma_alone_decoder@@XZ_5.0+0xd8>  // b.none
    9c40:	mov	w0, #0x0                   	// #0
    9c44:	str	x20, [x19, #72]
    9c48:	ldp	x19, x20, [sp, #16]
    9c4c:	ldp	x29, x30, [sp], #32
    9c50:	ret
    9c54:	mov	x0, #0x8000                	// #32768
    9c58:	str	x0, [x1]
    9c5c:	mov	x4, x1
    9c60:	mov	w0, #0x0                   	// #0
    9c64:	ldr	x1, [x19, #72]
    9c68:	str	x1, [x2]
    9c6c:	cbz	x3, 9c48 <lzma_alone_decoder@@XZ_5.0+0xd8>
    9c70:	ldr	x0, [x4]
    9c74:	cmp	x0, x3
    9c78:	b.ls	9c40 <lzma_alone_decoder@@XZ_5.0+0xd0>  // b.plast
    9c7c:	mov	w0, #0x6                   	// #6
    9c80:	b	9c48 <lzma_alone_decoder@@XZ_5.0+0xd8>
    9c84:	nop
    9c88:	stp	x29, x30, [sp, #-64]!
    9c8c:	mov	x29, sp
    9c90:	stp	x19, x20, [sp, #16]
    9c94:	mov	x20, x2
    9c98:	mov	x19, x0
    9c9c:	ldr	x2, [x0, #16]
    9ca0:	stp	x21, x22, [sp, #32]
    9ca4:	adrp	x22, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9ca8:	str	x23, [sp, #48]
    9cac:	add	x22, x22, #0xc88
    9cb0:	mov	w21, w3
    9cb4:	cmp	x2, x22
    9cb8:	mov	x23, x1
    9cbc:	b.eq	9cc4 <lzma_alone_decoder@@XZ_5.0+0x154>  // b.none
    9cc0:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    9cc4:	str	x22, [x19, #16]
    9cc8:	ands	w22, w21, #0xffffffe0
    9ccc:	b.ne	9d00 <lzma_alone_decoder@@XZ_5.0+0x190>  // b.any
    9cd0:	ldr	x0, [x19]
    9cd4:	cbz	x0, 9d1c <lzma_alone_decoder@@XZ_5.0+0x1ac>
    9cd8:	cmp	x20, #0x0
    9cdc:	stp	w21, wzr, [x0, #80]
    9ce0:	csinc	x20, x20, xzr, ne  // ne = any
    9ce4:	str	x20, [x0, #72]
    9ce8:	mov	w0, w22
    9cec:	ldp	x19, x20, [sp, #16]
    9cf0:	ldp	x21, x22, [sp, #32]
    9cf4:	ldr	x23, [sp, #48]
    9cf8:	ldp	x29, x30, [sp], #64
    9cfc:	ret
    9d00:	mov	w22, #0x8                   	// #8
    9d04:	mov	w0, w22
    9d08:	ldp	x19, x20, [sp, #16]
    9d0c:	ldp	x21, x22, [sp, #32]
    9d10:	ldr	x23, [sp, #48]
    9d14:	ldp	x29, x30, [sp], #64
    9d18:	ret
    9d1c:	mov	x1, x23
    9d20:	mov	x0, #0x58                  	// #88
    9d24:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    9d28:	cbz	x0, 9d74 <lzma_alone_decoder@@XZ_5.0+0x204>
    9d2c:	adrp	x4, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9d30:	adrp	x3, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9d34:	add	x4, x4, #0xdb0
    9d38:	add	x3, x3, #0xd80
    9d3c:	adrp	x2, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9d40:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10d0>
    9d44:	add	x2, x2, #0xbf0
    9d48:	add	x1, x1, #0xc10
    9d4c:	mov	x5, #0xffffffffffffffff    	// #-1
    9d50:	str	x0, [x19]
    9d54:	stp	xzr, x5, [x0]
    9d58:	stp	xzr, xzr, [x0, #16]
    9d5c:	stp	x4, x3, [x19, #24]
    9d60:	stp	xzr, xzr, [x0, #32]
    9d64:	stp	xzr, xzr, [x0, #48]
    9d68:	stp	x2, x1, [x19, #48]
    9d6c:	str	xzr, [x0, #64]
    9d70:	b	9cd8 <lzma_alone_decoder@@XZ_5.0+0x168>
    9d74:	mov	w22, #0x5                   	// #5
    9d78:	b	9ce8 <lzma_alone_decoder@@XZ_5.0+0x178>
    9d7c:	nop
    9d80:	stp	x29, x30, [sp, #-32]!
    9d84:	mov	x29, sp
    9d88:	stp	x19, x20, [sp, #16]
    9d8c:	mov	x19, x0
    9d90:	mov	x20, x1
    9d94:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    9d98:	mov	x1, x20
    9d9c:	mov	x0, x19
    9da0:	ldp	x19, x20, [sp, #16]
    9da4:	ldp	x29, x30, [sp], #32
    9da8:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    9dac:	nop
    9db0:	sub	sp, sp, #0x70
    9db4:	stp	x29, x30, [sp, #16]
    9db8:	add	x29, sp, #0x10
    9dbc:	ldr	w8, [x0, #84]
    9dc0:	stp	x19, x20, [sp, #32]
    9dc4:	mov	x19, x0
    9dc8:	mov	x20, x1
    9dcc:	stp	x21, x22, [sp, #48]
    9dd0:	cmp	w8, #0x1
    9dd4:	mov	x22, x3
    9dd8:	str	x23, [sp, #64]
    9ddc:	mov	x21, x4
    9de0:	mov	x23, x2
    9de4:	b.eq	9e68 <lzma_alone_decoder@@XZ_5.0+0x2f8>  // b.none
    9de8:	cmp	w8, #0x2
    9dec:	b.eq	9ea8 <lzma_alone_decoder@@XZ_5.0+0x338>  // b.none
    9df0:	cbz	w8, 9e14 <lzma_alone_decoder@@XZ_5.0+0x2a4>
    9df4:	mov	w8, #0xb                   	// #11
    9df8:	mov	w0, w8
    9dfc:	ldp	x29, x30, [sp, #16]
    9e00:	ldp	x19, x20, [sp, #32]
    9e04:	ldp	x21, x22, [sp, #48]
    9e08:	ldr	x23, [sp, #64]
    9e0c:	add	sp, sp, #0x70
    9e10:	ret
    9e14:	ldr	x2, [x3]
    9e18:	cmp	x2, x4
    9e1c:	b.cs	9df8 <lzma_alone_decoder@@XZ_5.0+0x288>  // b.hs, b.nlast
    9e20:	ldrb	w2, [x23, x2]
    9e24:	mov	w3, #0x1                   	// #1
    9e28:	str	w3, [x0, #84]
    9e2c:	stp	x5, x6, [sp, #88]
    9e30:	cmp	w2, #0xfd
    9e34:	str	x7, [sp, #104]
    9e38:	ldr	x2, [x0, #72]
    9e3c:	b.eq	9ee0 <lzma_alone_decoder@@XZ_5.0+0x370>  // b.none
    9e40:	bl	9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    9e44:	mov	w8, w0
    9e48:	cbnz	w0, 9df8 <lzma_alone_decoder@@XZ_5.0+0x288>
    9e4c:	ldr	w0, [x19, #80]
    9e50:	mov	w8, #0x2                   	// #2
    9e54:	tbnz	w0, #0, 9df8 <lzma_alone_decoder@@XZ_5.0+0x288>
    9e58:	mov	w8, #0x4                   	// #4
    9e5c:	ldp	x5, x6, [sp, #88]
    9e60:	ldr	x7, [sp, #104]
    9e64:	tbnz	w0, #2, 9df8 <lzma_alone_decoder@@XZ_5.0+0x288>
    9e68:	ldr	w1, [sp, #112]
    9e6c:	mov	x2, x23
    9e70:	ldr	x0, [x19]
    9e74:	str	w1, [sp]
    9e78:	mov	x4, x21
    9e7c:	mov	x3, x22
    9e80:	ldr	x8, [x19, #24]
    9e84:	mov	x1, x20
    9e88:	blr	x8
    9e8c:	mov	w8, w0
    9e90:	cmp	w0, #0x1
    9e94:	b.ne	9df8 <lzma_alone_decoder@@XZ_5.0+0x288>  // b.any
    9e98:	ldr	w0, [x19, #80]
    9e9c:	tbz	w0, #3, 9df8 <lzma_alone_decoder@@XZ_5.0+0x288>
    9ea0:	mov	w0, #0x2                   	// #2
    9ea4:	str	w0, [x19, #84]
    9ea8:	ldr	x0, [x22]
    9eac:	mov	w8, #0x9                   	// #9
    9eb0:	cmp	x0, x21
    9eb4:	b.cc	9df8 <lzma_alone_decoder@@XZ_5.0+0x288>  // b.lo, b.ul, b.last
    9eb8:	ldr	w0, [sp, #112]
    9ebc:	ldp	x29, x30, [sp, #16]
    9ec0:	cmp	w0, #0x3
    9ec4:	cset	w8, eq  // eq = none
    9ec8:	mov	w0, w8
    9ecc:	ldp	x19, x20, [sp, #32]
    9ed0:	ldp	x21, x22, [sp, #48]
    9ed4:	ldr	x23, [sp, #64]
    9ed8:	add	sp, sp, #0x70
    9edc:	ret
    9ee0:	ldr	w3, [x0, #80]
    9ee4:	bl	bb88 <lzma_stream_buffer_decode@@XZ_5.0+0x230>
    9ee8:	mov	w8, w0
    9eec:	ldp	x5, x6, [sp, #88]
    9ef0:	ldr	x7, [sp, #104]
    9ef4:	cbz	w0, 9e68 <lzma_alone_decoder@@XZ_5.0+0x2f8>
    9ef8:	b	9df8 <lzma_alone_decoder@@XZ_5.0+0x288>
    9efc:	nop

0000000000009f00 <lzma_auto_decoder@@XZ_5.0>:
    9f00:	stp	x29, x30, [sp, #-48]!
    9f04:	mov	x29, sp
    9f08:	stp	x19, x20, [sp, #16]
    9f0c:	mov	x20, x0
    9f10:	stp	x21, x22, [sp, #32]
    9f14:	mov	x21, x1
    9f18:	mov	w22, w2
    9f1c:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    9f20:	mov	w19, w0
    9f24:	cbz	w0, 9f3c <lzma_auto_decoder@@XZ_5.0+0x3c>
    9f28:	mov	w0, w19
    9f2c:	ldp	x19, x20, [sp, #16]
    9f30:	ldp	x21, x22, [sp, #32]
    9f34:	ldp	x29, x30, [sp], #48
    9f38:	ret
    9f3c:	ldp	x1, x0, [x20, #48]
    9f40:	mov	w3, w22
    9f44:	mov	x2, x21
    9f48:	bl	9c88 <lzma_alone_decoder@@XZ_5.0+0x118>
    9f4c:	mov	w19, w0
    9f50:	cbnz	w0, 9f78 <lzma_auto_decoder@@XZ_5.0+0x78>
    9f54:	ldr	x0, [x20, #56]
    9f58:	mov	w1, #0x1                   	// #1
    9f5c:	ldp	x21, x22, [sp, #32]
    9f60:	strb	w1, [x0, #88]
    9f64:	strb	w1, [x0, #91]
    9f68:	mov	w0, w19
    9f6c:	ldp	x19, x20, [sp, #16]
    9f70:	ldp	x29, x30, [sp], #48
    9f74:	ret
    9f78:	mov	x0, x20
    9f7c:	bl	3320 <lzma_end@plt>
    9f80:	b	9f28 <lzma_auto_decoder@@XZ_5.0+0x28>
    9f84:	nop

0000000000009f88 <lzma_block_buffer_decode@@XZ_5.0>:
    9f88:	sub	sp, sp, #0xc0
    9f8c:	stp	x29, x30, [sp, #16]
    9f90:	add	x29, sp, #0x10
    9f94:	stp	x23, x24, [sp, #64]
    9f98:	cbz	x3, a0e8 <lzma_block_buffer_decode@@XZ_5.0+0x160>
    9f9c:	stp	x19, x20, [sp, #32]
    9fa0:	mov	x23, x7
    9fa4:	mov	x19, x3
    9fa8:	stp	x21, x22, [sp, #48]
    9fac:	mov	x20, x6
    9fb0:	mov	x21, x2
    9fb4:	stp	x25, x26, [sp, #80]
    9fb8:	mov	x22, x5
    9fbc:	mov	x26, x1
    9fc0:	mov	x25, x4
    9fc4:	ldr	x1, [x3]
    9fc8:	cbz	x2, a0d8 <lzma_block_buffer_decode@@XZ_5.0+0x150>
    9fcc:	cmp	x20, #0x0
    9fd0:	mov	w24, #0xb                   	// #11
    9fd4:	ccmp	x25, x1, #0x0, ne  // ne = any
    9fd8:	b.cc	a0b8 <lzma_block_buffer_decode@@XZ_5.0+0x130>  // b.lo, b.ul, b.last
    9fdc:	ldr	x1, [x20]
    9fe0:	cmp	x23, x1
    9fe4:	cbz	x22, a0b4 <lzma_block_buffer_decode@@XZ_5.0+0x12c>
    9fe8:	b.cc	a0b8 <lzma_block_buffer_decode@@XZ_5.0+0x130>  // b.lo, b.ul, b.last
    9fec:	mov	x3, #0xffffffffffffffff    	// #-1
    9ff0:	str	x27, [sp, #96]
    9ff4:	add	x27, sp, #0x78
    9ff8:	mov	x2, x0
    9ffc:	mov	x1, x26
    a000:	mov	x0, x27
    a004:	stp	xzr, x3, [sp, #120]
    a008:	stp	xzr, xzr, [sp, #136]
    a00c:	stp	xzr, xzr, [sp, #152]
    a010:	stp	xzr, xzr, [sp, #168]
    a014:	str	xzr, [sp, #184]
    a018:	bl	a3e0 <lzma_block_buffer_decode@@XZ_5.0+0x458>
    a01c:	mov	w24, w0
    a020:	cbnz	w0, a084 <lzma_block_buffer_decode@@XZ_5.0+0xfc>
    a024:	ldr	x0, [sp, #120]
    a028:	mov	w1, #0x3                   	// #3
    a02c:	ldr	x8, [sp, #144]
    a030:	str	w1, [sp]
    a034:	mov	x5, x22
    a038:	mov	x2, x21
    a03c:	mov	x7, x23
    a040:	mov	x6, x20
    a044:	mov	x4, x25
    a048:	mov	x3, x19
    a04c:	mov	x1, x26
    a050:	ldr	x22, [x19]
    a054:	ldr	x21, [x20]
    a058:	blr	x8
    a05c:	cmp	w0, #0x1
    a060:	b.eq	a084 <lzma_block_buffer_decode@@XZ_5.0+0xfc>  // b.none
    a064:	cbnz	w0, a078 <lzma_block_buffer_decode@@XZ_5.0+0xf0>
    a068:	ldr	x0, [x19]
    a06c:	cmp	x0, x25
    a070:	cset	w0, ne  // ne = any
    a074:	add	w0, w0, #0x9
    a078:	mov	w24, w0
    a07c:	str	x22, [x19]
    a080:	str	x21, [x20]
    a084:	mov	x1, x26
    a088:	mov	x0, x27
    a08c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    a090:	mov	w0, w24
    a094:	ldp	x29, x30, [sp, #16]
    a098:	ldp	x19, x20, [sp, #32]
    a09c:	ldp	x21, x22, [sp, #48]
    a0a0:	ldp	x23, x24, [sp, #64]
    a0a4:	ldp	x25, x26, [sp, #80]
    a0a8:	ldr	x27, [sp, #96]
    a0ac:	add	sp, sp, #0xc0
    a0b0:	ret
    a0b4:	b.eq	9fec <lzma_block_buffer_decode@@XZ_5.0+0x64>  // b.none
    a0b8:	mov	w0, w24
    a0bc:	ldp	x29, x30, [sp, #16]
    a0c0:	ldp	x19, x20, [sp, #32]
    a0c4:	ldp	x21, x22, [sp, #48]
    a0c8:	ldp	x23, x24, [sp, #64]
    a0cc:	ldp	x25, x26, [sp, #80]
    a0d0:	add	sp, sp, #0xc0
    a0d4:	ret
    a0d8:	cmp	x4, x1
    a0dc:	mov	w24, #0xb                   	// #11
    a0e0:	b.eq	9fcc <lzma_block_buffer_decode@@XZ_5.0+0x44>  // b.none
    a0e4:	b	a0b8 <lzma_block_buffer_decode@@XZ_5.0+0x130>
    a0e8:	mov	w24, #0xb                   	// #11
    a0ec:	mov	w0, w24
    a0f0:	ldp	x29, x30, [sp, #16]
    a0f4:	ldp	x23, x24, [sp, #64]
    a0f8:	add	sp, sp, #0xc0
    a0fc:	ret
    a100:	stp	x29, x30, [sp, #-32]!
    a104:	mov	x29, sp
    a108:	stp	x19, x20, [sp, #16]
    a10c:	mov	x19, x0
    a110:	mov	x20, x1
    a114:	add	x0, x0, #0x8
    a118:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    a11c:	mov	x1, x20
    a120:	mov	x0, x19
    a124:	ldp	x19, x20, [sp, #16]
    a128:	ldp	x29, x30, [sp], #32
    a12c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    a130:	sub	sp, sp, #0x70
    a134:	stp	x29, x30, [sp, #16]
    a138:	add	x29, sp, #0x10
    a13c:	stp	x19, x20, [sp, #32]
    a140:	mov	x19, x0
    a144:	ldr	w0, [x0]
    a148:	stp	x21, x22, [sp, #48]
    a14c:	mov	x20, x3
    a150:	mov	x21, x4
    a154:	stp	x25, x26, [sp, #80]
    a158:	cmp	w0, #0x1
    a15c:	mov	x25, x2
    a160:	b.eq	a190 <lzma_block_buffer_decode@@XZ_5.0+0x208>  // b.none
    a164:	cmp	w0, #0x2
    a168:	b.eq	a2a8 <lzma_block_buffer_decode@@XZ_5.0+0x320>  // b.none
    a16c:	mov	w22, #0xb                   	// #11
    a170:	cbz	w0, a1e4 <lzma_block_buffer_decode@@XZ_5.0+0x25c>
    a174:	mov	w0, w22
    a178:	ldp	x29, x30, [sp, #16]
    a17c:	ldp	x19, x20, [sp, #32]
    a180:	ldp	x21, x22, [sp, #48]
    a184:	ldp	x25, x26, [sp, #80]
    a188:	add	sp, sp, #0x70
    a18c:	ret
    a190:	ldr	x1, [x19, #88]
    a194:	b	a1b8 <lzma_block_buffer_decode@@XZ_5.0+0x230>
    a198:	ldr	x0, [x20]
    a19c:	add	x3, x0, #0x1
    a1a0:	cmp	x0, x21
    a1a4:	b.cs	a330 <lzma_block_buffer_decode@@XZ_5.0+0x3a8>  // b.hs, b.nlast
    a1a8:	ldrb	w0, [x25, x0]
    a1ac:	str	x3, [x20]
    a1b0:	str	x1, [x19, #88]
    a1b4:	cbnz	w0, a288 <lzma_block_buffer_decode@@XZ_5.0+0x300>
    a1b8:	tst	x1, #0x3
    a1bc:	add	x1, x1, #0x1
    a1c0:	b.ne	a198 <lzma_block_buffer_decode@@XZ_5.0+0x210>  // b.any
    a1c4:	ldr	x22, [x19, #80]
    a1c8:	ldr	w0, [x22, #8]
    a1cc:	cbz	w0, a310 <lzma_block_buffer_decode@@XZ_5.0+0x388>
    a1d0:	ldrb	w1, [x19, #224]
    a1d4:	cbz	w1, a3a4 <lzma_block_buffer_decode@@XZ_5.0+0x41c>
    a1d8:	mov	w1, #0x2                   	// #2
    a1dc:	str	w1, [x19]
    a1e0:	b	a2b0 <lzma_block_buffer_decode@@XZ_5.0+0x328>
    a1e4:	ldr	w8, [sp, #112]
    a1e8:	ldr	x0, [x19, #8]
    a1ec:	str	w8, [sp]
    a1f0:	stp	x23, x24, [sp, #64]
    a1f4:	mov	x24, x5
    a1f8:	mov	x23, x6
    a1fc:	ldr	x8, [x19, #32]
    a200:	str	x27, [sp, #96]
    a204:	ldr	x26, [x3]
    a208:	ldr	x27, [x6]
    a20c:	blr	x8
    a210:	ldr	x1, [x19, #104]
    a214:	mov	x3, #0x7fffffffffffffff    	// #9223372036854775807
    a218:	ldr	x2, [x19, #88]
    a21c:	cmp	x1, #0x0
    a220:	csel	x1, x1, x3, ge  // ge = tcont
    a224:	mov	w22, w0
    a228:	cmp	x2, x1
    a22c:	b.hi	a280 <lzma_block_buffer_decode@@XZ_5.0+0x2f8>  // b.pmore
    a230:	ldr	x0, [x20]
    a234:	sub	x1, x1, x2
    a238:	sub	x26, x0, x26
    a23c:	cmp	x26, x1
    a240:	b.hi	a280 <lzma_block_buffer_decode@@XZ_5.0+0x2f8>  // b.pmore
    a244:	ldr	x4, [x19, #80]
    a248:	add	x26, x26, x2
    a24c:	str	x26, [x19, #88]
    a250:	ldr	x1, [x19, #96]
    a254:	ldr	x0, [x4, #24]
    a258:	ldr	x2, [x23]
    a25c:	cmp	x0, #0x0
    a260:	csel	x0, x0, x3, ge  // ge = tcont
    a264:	cmp	x1, x0
    a268:	b.hi	a280 <lzma_block_buffer_decode@@XZ_5.0+0x2f8>  // b.pmore
    a26c:	sub	x3, x2, x27
    a270:	sub	x0, x0, x1
    a274:	cmp	x3, x0
    a278:	b.ls	a350 <lzma_block_buffer_decode@@XZ_5.0+0x3c8>  // b.plast
    a27c:	nop
    a280:	ldp	x23, x24, [sp, #64]
    a284:	ldr	x27, [sp, #96]
    a288:	mov	w22, #0x9                   	// #9
    a28c:	mov	w0, w22
    a290:	ldp	x29, x30, [sp, #16]
    a294:	ldp	x19, x20, [sp, #32]
    a298:	ldp	x21, x22, [sp, #48]
    a29c:	ldp	x25, x26, [sp, #80]
    a2a0:	add	sp, sp, #0x70
    a2a4:	ret
    a2a8:	ldr	x22, [x19, #80]
    a2ac:	ldr	w0, [x22, #8]
    a2b0:	bl	3270 <lzma_check_size@plt>
    a2b4:	add	x3, x22, #0x28
    a2b8:	mov	w22, w0
    a2bc:	mov	x2, x21
    a2c0:	mov	x1, x20
    a2c4:	mov	x0, x25
    a2c8:	mov	x5, x22
    a2cc:	add	x4, x19, #0x70
    a2d0:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    a2d4:	ldr	x0, [x19, #112]
    a2d8:	cmp	x0, x22
    a2dc:	b.cc	a330 <lzma_block_buffer_decode@@XZ_5.0+0x3a8>  // b.lo, b.ul, b.last
    a2e0:	ldrb	w0, [x19, #224]
    a2e4:	cbnz	w0, a310 <lzma_block_buffer_decode@@XZ_5.0+0x388>
    a2e8:	ldr	x20, [x19, #80]
    a2ec:	ldr	w0, [x20, #8]
    a2f0:	bl	30e0 <lzma_check_is_supported@plt>
    a2f4:	tst	w0, #0xff
    a2f8:	b.eq	a310 <lzma_block_buffer_decode@@XZ_5.0+0x388>  // b.none
    a2fc:	mov	x2, x22
    a300:	add	x1, x19, #0x78
    a304:	add	x0, x20, #0x28
    a308:	bl	3330 <memcmp@plt>
    a30c:	cbnz	w0, a288 <lzma_block_buffer_decode@@XZ_5.0+0x300>
    a310:	mov	w22, #0x1                   	// #1
    a314:	mov	w0, w22
    a318:	ldp	x29, x30, [sp, #16]
    a31c:	ldp	x19, x20, [sp, #32]
    a320:	ldp	x21, x22, [sp, #48]
    a324:	ldp	x25, x26, [sp, #80]
    a328:	add	sp, sp, #0x70
    a32c:	ret
    a330:	mov	w22, #0x0                   	// #0
    a334:	mov	w0, w22
    a338:	ldp	x29, x30, [sp, #16]
    a33c:	ldp	x19, x20, [sp, #32]
    a340:	ldp	x21, x22, [sp, #48]
    a344:	ldp	x25, x26, [sp, #80]
    a348:	add	sp, sp, #0x70
    a34c:	ret
    a350:	ldrb	w0, [x19, #224]
    a354:	add	x1, x3, x1
    a358:	str	x1, [x19, #96]
    a35c:	cbz	w0, a3c8 <lzma_block_buffer_decode@@XZ_5.0+0x440>
    a360:	cmp	w22, #0x1
    a364:	b.ne	a3bc <lzma_block_buffer_decode@@XZ_5.0+0x434>  // b.any
    a368:	ldp	x0, x1, [x19, #80]
    a36c:	ldr	x2, [x0, #16]
    a370:	cmp	x1, x2
    a374:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    a378:	b.ne	a280 <lzma_block_buffer_decode@@XZ_5.0+0x2f8>  // b.any
    a37c:	ldr	x2, [x0, #24]
    a380:	ldr	x3, [x19, #96]
    a384:	cmp	x3, x2
    a388:	ccmn	x2, #0x1, #0x4, ne  // ne = any
    a38c:	b.ne	a280 <lzma_block_buffer_decode@@XZ_5.0+0x2f8>  // b.any
    a390:	ldp	x23, x24, [sp, #64]
    a394:	ldr	x27, [sp, #96]
    a398:	stp	x1, x3, [x0, #16]
    a39c:	str	w22, [x19]
    a3a0:	b	a1b8 <lzma_block_buffer_decode@@XZ_5.0+0x230>
    a3a4:	mov	w1, w0
    a3a8:	add	x0, x19, #0x78
    a3ac:	bl	c560 <lzma_check_size@@XZ_5.0+0xd8>
    a3b0:	ldr	x22, [x19, #80]
    a3b4:	ldr	w0, [x22, #8]
    a3b8:	b	a1d8 <lzma_block_buffer_decode@@XZ_5.0+0x250>
    a3bc:	ldp	x23, x24, [sp, #64]
    a3c0:	ldr	x27, [sp, #96]
    a3c4:	b	a174 <lzma_block_buffer_decode@@XZ_5.0+0x1ec>
    a3c8:	ldr	w1, [x4, #8]
    a3cc:	add	x2, x24, x27
    a3d0:	add	x0, x19, #0x78
    a3d4:	bl	c4e0 <lzma_check_size@@XZ_5.0+0x58>
    a3d8:	b	a360 <lzma_block_buffer_decode@@XZ_5.0+0x3d8>
    a3dc:	nop
    a3e0:	stp	x29, x30, [sp, #-48]!
    a3e4:	mov	x29, sp
    a3e8:	stp	x19, x20, [sp, #16]
    a3ec:	mov	x19, x2
    a3f0:	adrp	x20, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    a3f4:	ldr	x2, [x0, #16]
    a3f8:	stp	x21, x22, [sp, #32]
    a3fc:	add	x20, x20, #0x3e0
    a400:	mov	x21, x0
    a404:	mov	x22, x1
    a408:	cmp	x2, x20
    a40c:	b.eq	a414 <lzma_block_buffer_decode@@XZ_5.0+0x48c>  // b.none
    a410:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    a414:	str	x20, [x21, #16]
    a418:	mov	x0, x19
    a41c:	bl	3190 <lzma_block_unpadded_size@plt>
    a420:	cbz	x0, a4e0 <lzma_block_buffer_decode@@XZ_5.0+0x558>
    a424:	ldr	x0, [x19, #24]
    a428:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    a42c:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    a430:	add	x0, x0, x2
    a434:	cmp	x0, x1
    a438:	b.ls	a4e0 <lzma_block_buffer_decode@@XZ_5.0+0x558>  // b.plast
    a43c:	ldr	x20, [x21]
    a440:	cbz	x20, a4f4 <lzma_block_buffer_decode@@XZ_5.0+0x56c>
    a444:	ldr	x0, [x19, #16]
    a448:	ldr	w21, [x19, #8]
    a44c:	str	wzr, [x20]
    a450:	cmn	x0, #0x1
    a454:	stp	x19, xzr, [x20, #80]
    a458:	str	xzr, [x20, #96]
    a45c:	b.eq	a4a8 <lzma_block_buffer_decode@@XZ_5.0+0x520>  // b.none
    a460:	stp	x0, xzr, [x20, #104]
    a464:	mov	w1, w21
    a468:	add	x0, x20, #0x78
    a46c:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    a470:	ldr	w1, [x19]
    a474:	mov	w0, #0x0                   	// #0
    a478:	cbz	w1, a488 <lzma_block_buffer_decode@@XZ_5.0+0x500>
    a47c:	ldrb	w0, [x19, #200]
    a480:	cmp	w0, #0x0
    a484:	cset	w0, ne  // ne = any
    a488:	mov	x1, x22
    a48c:	ldr	x2, [x19, #32]
    a490:	ldp	x21, x22, [sp, #32]
    a494:	strb	w0, [x20, #224]
    a498:	add	x0, x20, #0x8
    a49c:	ldp	x19, x20, [sp, #16]
    a4a0:	ldp	x29, x30, [sp], #48
    a4a4:	b	aae0 <lzma_filter_decoder_is_supported@@XZ_5.0+0x48>
    a4a8:	mov	w0, w21
    a4ac:	bl	3270 <lzma_check_size@plt>
    a4b0:	ldr	w1, [x19, #4]
    a4b4:	mov	x2, #0x7ffffffffffffffc    	// #9223372036854775804
    a4b8:	sub	x2, x2, x1
    a4bc:	mov	w1, w21
    a4c0:	sub	x0, x2, w0, uxtw
    a4c4:	stp	x0, xzr, [x20, #104]
    a4c8:	add	x0, x20, #0x78
    a4cc:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    a4d0:	ldr	w1, [x19]
    a4d4:	mov	w0, #0x0                   	// #0
    a4d8:	cbz	w1, a488 <lzma_block_buffer_decode@@XZ_5.0+0x500>
    a4dc:	b	a47c <lzma_block_buffer_decode@@XZ_5.0+0x4f4>
    a4e0:	mov	w0, #0xb                   	// #11
    a4e4:	ldp	x19, x20, [sp, #16]
    a4e8:	ldp	x21, x22, [sp, #32]
    a4ec:	ldp	x29, x30, [sp], #48
    a4f0:	ret
    a4f4:	mov	x1, x22
    a4f8:	mov	x0, #0xe8                  	// #232
    a4fc:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    a500:	mov	x20, x0
    a504:	cbz	x0, a53c <lzma_block_buffer_decode@@XZ_5.0+0x5b4>
    a508:	adrp	x1, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    a50c:	adrp	x0, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    a510:	add	x1, x1, #0x130
    a514:	add	x0, x0, #0x100
    a518:	mov	x2, #0xffffffffffffffff    	// #-1
    a51c:	str	x20, [x21]
    a520:	stp	xzr, x2, [x20, #8]
    a524:	stp	xzr, xzr, [x20, #24]
    a528:	stp	x1, x0, [x21, #24]
    a52c:	stp	xzr, xzr, [x20, #40]
    a530:	stp	xzr, xzr, [x20, #56]
    a534:	str	xzr, [x20, #72]
    a538:	b	a444 <lzma_block_buffer_decode@@XZ_5.0+0x4bc>
    a53c:	mov	w0, #0x5                   	// #5
    a540:	b	a4e4 <lzma_block_buffer_decode@@XZ_5.0+0x55c>
    a544:	nop

000000000000a548 <lzma_block_decoder@@XZ_5.0>:
    a548:	stp	x29, x30, [sp, #-48]!
    a54c:	mov	x29, sp
    a550:	stp	x19, x20, [sp, #16]
    a554:	mov	x20, x0
    a558:	str	x21, [sp, #32]
    a55c:	mov	x21, x1
    a560:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    a564:	mov	w19, w0
    a568:	cbz	w0, a580 <lzma_block_decoder@@XZ_5.0+0x38>
    a56c:	mov	w0, w19
    a570:	ldp	x19, x20, [sp, #16]
    a574:	ldr	x21, [sp, #32]
    a578:	ldp	x29, x30, [sp], #48
    a57c:	ret
    a580:	ldp	x1, x0, [x20, #48]
    a584:	mov	x2, x21
    a588:	bl	a3e0 <lzma_block_buffer_decode@@XZ_5.0+0x458>
    a58c:	mov	w19, w0
    a590:	cbnz	w0, a5b8 <lzma_block_decoder@@XZ_5.0+0x70>
    a594:	ldr	x0, [x20, #56]
    a598:	mov	w1, #0x1                   	// #1
    a59c:	ldr	x21, [sp, #32]
    a5a0:	strb	w1, [x0, #88]
    a5a4:	strb	w1, [x0, #91]
    a5a8:	mov	w0, w19
    a5ac:	ldp	x19, x20, [sp, #16]
    a5b0:	ldp	x29, x30, [sp], #48
    a5b4:	ret
    a5b8:	mov	x0, x20
    a5bc:	bl	3320 <lzma_end@plt>
    a5c0:	b	a56c <lzma_block_decoder@@XZ_5.0+0x24>
    a5c4:	nop
    a5c8:	stp	x29, x30, [sp, #-48]!
    a5cc:	mov	x29, sp
    a5d0:	stp	x19, x20, [sp, #16]
    a5d4:	mov	x20, x0
    a5d8:	mov	x19, #0x0                   	// #0
    a5dc:	stp	x21, x22, [sp, #32]
    a5e0:	mov	x21, x1
    a5e4:	mov	x22, #0xffffffffffffffff    	// #-1
    a5e8:	ldr	x2, [x20]
    a5ec:	mov	x1, x21
    a5f0:	add	x2, x2, x19
    a5f4:	ldr	x0, [x2, #8]
    a5f8:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    a5fc:	ldr	x2, [x20]
    a600:	add	x0, x2, x19
    a604:	str	x22, [x2, x19]
    a608:	add	x19, x19, #0x10
    a60c:	cmp	x19, #0x40
    a610:	str	xzr, [x0, #8]
    a614:	b.ne	a5e8 <lzma_block_decoder@@XZ_5.0+0xa0>  // b.any
    a618:	ldp	x19, x20, [sp, #16]
    a61c:	ldp	x21, x22, [sp, #32]
    a620:	ldp	x29, x30, [sp], #48
    a624:	ret

000000000000a628 <lzma_block_header_decode@@XZ_5.0>:
    a628:	stp	x29, x30, [sp, #-96]!
    a62c:	mov	x29, sp
    a630:	ldr	x3, [x0, #32]
    a634:	stp	x19, x20, [sp, #16]
    a638:	mov	x19, x0
    a63c:	add	x0, x3, #0x50
    a640:	stp	x21, x22, [sp, #32]
    a644:	mov	x21, x2
    a648:	mov	x22, x1
    a64c:	mov	x1, #0xffffffffffffffff    	// #-1
    a650:	stp	x1, xzr, [x3]
    a654:	add	x3, x3, #0x10
    a658:	cmp	x3, x0
    a65c:	b.ne	a650 <lzma_block_header_decode@@XZ_5.0+0x28>  // b.any
    a660:	ldr	w0, [x19]
    a664:	cmp	w0, #0x1
    a668:	b.ls	a674 <lzma_block_header_decode@@XZ_5.0+0x4c>  // b.plast
    a66c:	mov	w0, #0x1                   	// #1
    a670:	str	w0, [x19]
    a674:	strb	wzr, [x19, #200]
    a678:	mov	w20, #0xb                   	// #11
    a67c:	ldr	w1, [x19, #4]
    a680:	ldrb	w0, [x21]
    a684:	add	w0, w0, #0x1
    a688:	cmp	w1, w0, lsl #2
    a68c:	lsl	w0, w0, #2
    a690:	b.ne	a76c <lzma_block_header_decode@@XZ_5.0+0x144>  // b.any
    a694:	ldr	w1, [x19, #8]
    a698:	cmp	w1, #0xf
    a69c:	b.hi	a76c <lzma_block_header_decode@@XZ_5.0+0x144>  // b.pmore
    a6a0:	stp	x23, x24, [sp, #48]
    a6a4:	sub	w24, w0, #0x4
    a6a8:	mov	x1, x24
    a6ac:	mov	x0, x21
    a6b0:	mov	w2, #0x0                   	// #0
    a6b4:	bl	31c0 <lzma_crc32@plt>
    a6b8:	ldr	w1, [x21, w24, uxtw]
    a6bc:	cmp	w0, w1
    a6c0:	b.ne	a7b0 <lzma_block_header_decode@@XZ_5.0+0x188>  // b.any
    a6c4:	ldrb	w0, [x21, #1]
    a6c8:	mov	w20, #0x8                   	// #8
    a6cc:	tst	w0, #0x3c
    a6d0:	b.ne	a7e4 <lzma_block_header_decode@@XZ_5.0+0x1bc>  // b.any
    a6d4:	mov	x1, #0x2                   	// #2
    a6d8:	stp	x25, x26, [sp, #64]
    a6dc:	add	x25, sp, #0x58
    a6e0:	str	x1, [sp, #88]
    a6e4:	tbnz	w0, #6, a780 <lzma_block_header_decode@@XZ_5.0+0x158>
    a6e8:	mov	x0, #0xffffffffffffffff    	// #-1
    a6ec:	str	x0, [x19, #16]
    a6f0:	ldrsb	w0, [x21, #1]
    a6f4:	tbnz	w0, #31, a7ec <lzma_block_header_decode@@XZ_5.0+0x1c4>
    a6f8:	mov	x0, #0xffffffffffffffff    	// #-1
    a6fc:	str	x0, [x19, #24]
    a700:	ldrb	w26, [x21, #1]
    a704:	mov	x23, #0x0                   	// #0
    a708:	and	x26, x26, #0x3
    a70c:	nop
    a710:	ldr	x0, [x19, #32]
    a714:	mov	x1, x22
    a718:	mov	x4, x24
    a71c:	mov	x3, x25
    a720:	mov	x2, x21
    a724:	add	x0, x0, x23, lsl #4
    a728:	bl	3500 <lzma_filter_flags_decode@plt>
    a72c:	add	x1, x23, #0x1
    a730:	mov	w20, w0
    a734:	cbnz	w0, a7cc <lzma_block_header_decode@@XZ_5.0+0x1a4>
    a738:	cmp	x26, x23
    a73c:	mov	x23, x1
    a740:	b.ne	a710 <lzma_block_header_decode@@XZ_5.0+0xe8>  // b.any
    a744:	sub	x21, x21, #0x1
    a748:	ldr	x2, [sp, #88]
    a74c:	b	a758 <lzma_block_header_decode@@XZ_5.0+0x130>
    a750:	ldrb	w0, [x21, x2]
    a754:	cbnz	w0, a810 <lzma_block_header_decode@@XZ_5.0+0x1e8>
    a758:	cmp	x2, x24
    a75c:	add	x2, x2, #0x1
    a760:	b.cc	a750 <lzma_block_header_decode@@XZ_5.0+0x128>  // b.lo, b.ul, b.last
    a764:	ldp	x23, x24, [sp, #48]
    a768:	ldp	x25, x26, [sp, #64]
    a76c:	mov	w0, w20
    a770:	ldp	x19, x20, [sp, #16]
    a774:	ldp	x21, x22, [sp, #32]
    a778:	ldp	x29, x30, [sp], #96
    a77c:	ret
    a780:	mov	x4, x24
    a784:	mov	x3, x25
    a788:	mov	x2, x21
    a78c:	add	x0, x19, #0x10
    a790:	mov	x1, #0x0                   	// #0
    a794:	bl	33c0 <lzma_vli_decode@plt>
    a798:	mov	w20, w0
    a79c:	cbnz	w0, a764 <lzma_block_header_decode@@XZ_5.0+0x13c>
    a7a0:	mov	x0, x19
    a7a4:	bl	3190 <lzma_block_unpadded_size@plt>
    a7a8:	cbnz	x0, a6f0 <lzma_block_header_decode@@XZ_5.0+0xc8>
    a7ac:	ldp	x25, x26, [sp, #64]
    a7b0:	mov	w20, #0x9                   	// #9
    a7b4:	mov	w0, w20
    a7b8:	ldp	x19, x20, [sp, #16]
    a7bc:	ldp	x21, x22, [sp, #32]
    a7c0:	ldp	x23, x24, [sp, #48]
    a7c4:	ldp	x29, x30, [sp], #96
    a7c8:	ret
    a7cc:	mov	x1, x22
    a7d0:	add	x0, x19, #0x20
    a7d4:	bl	a5c8 <lzma_block_decoder@@XZ_5.0+0x80>
    a7d8:	ldp	x23, x24, [sp, #48]
    a7dc:	ldp	x25, x26, [sp, #64]
    a7e0:	b	a76c <lzma_block_header_decode@@XZ_5.0+0x144>
    a7e4:	ldp	x23, x24, [sp, #48]
    a7e8:	b	a76c <lzma_block_header_decode@@XZ_5.0+0x144>
    a7ec:	mov	x4, x24
    a7f0:	mov	x3, x25
    a7f4:	mov	x2, x21
    a7f8:	add	x0, x19, #0x18
    a7fc:	mov	x1, #0x0                   	// #0
    a800:	bl	33c0 <lzma_vli_decode@plt>
    a804:	mov	w20, w0
    a808:	cbz	w0, a700 <lzma_block_header_decode@@XZ_5.0+0xd8>
    a80c:	b	a764 <lzma_block_header_decode@@XZ_5.0+0x13c>
    a810:	mov	x1, x22
    a814:	add	x0, x19, #0x20
    a818:	mov	w20, #0x8                   	// #8
    a81c:	str	x2, [sp, #88]
    a820:	bl	a5c8 <lzma_block_decoder@@XZ_5.0+0x80>
    a824:	ldp	x23, x24, [sp, #48]
    a828:	ldp	x25, x26, [sp, #64]
    a82c:	b	a76c <lzma_block_header_decode@@XZ_5.0+0x144>

000000000000a830 <lzma_easy_decoder_memusage@@XZ_5.0>:
    a830:	stp	x29, x30, [sp, #-224]!
    a834:	mov	w1, w0
    a838:	mov	x29, sp
    a83c:	str	x19, [sp, #16]
    a840:	add	x19, sp, #0x20
    a844:	mov	x0, x19
    a848:	bl	3f48 <lzma_block_total_size@@XZ_5.0+0x28>
    a84c:	tst	w0, #0xff
    a850:	b.ne	a868 <lzma_easy_decoder_memusage@@XZ_5.0+0x38>  // b.any
    a854:	mov	x0, x19
    a858:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    a85c:	ldr	x19, [sp, #16]
    a860:	ldp	x29, x30, [sp], #224
    a864:	ret
    a868:	mov	x0, #0xffffffff            	// #4294967295
    a86c:	ldr	x19, [sp, #16]
    a870:	ldp	x29, x30, [sp], #224
    a874:	ret

000000000000a878 <lzma_raw_buffer_decode@@XZ_5.0>:
    a878:	sub	sp, sp, #0xe0
    a87c:	cmp	x2, #0x0
    a880:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    a884:	stp	x29, x30, [sp, #16]
    a888:	add	x29, sp, #0x10
    a88c:	stp	x21, x22, [sp, #48]
    a890:	mov	w22, #0xb                   	// #11
    a894:	b.eq	a9a0 <lzma_raw_buffer_decode@@XZ_5.0+0x128>  // b.none
    a898:	stp	x25, x26, [sp, #80]
    a89c:	mov	x25, x2
    a8a0:	mov	w22, #0xb                   	// #11
    a8a4:	ldr	x2, [x3]
    a8a8:	stp	x19, x20, [sp, #32]
    a8ac:	mov	x19, x3
    a8b0:	stp	x23, x24, [sp, #64]
    a8b4:	cmp	x2, x4
    a8b8:	mov	x24, x4
    a8bc:	b.hi	a9b4 <lzma_raw_buffer_decode@@XZ_5.0+0x13c>  // b.pmore
    a8c0:	cmp	x5, #0x0
    a8c4:	mov	x21, x5
    a8c8:	mov	x20, x6
    a8cc:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    a8d0:	b.eq	a9b4 <lzma_raw_buffer_decode@@XZ_5.0+0x13c>  // b.none
    a8d4:	ldr	x2, [x6]
    a8d8:	mov	x23, x7
    a8dc:	cmp	x2, x7
    a8e0:	b.hi	a9b4 <lzma_raw_buffer_decode@@XZ_5.0+0x13c>  // b.pmore
    a8e4:	mov	x3, #0xffffffffffffffff    	// #-1
    a8e8:	stp	x27, x28, [sp, #96]
    a8ec:	add	x28, sp, #0x98
    a8f0:	mov	x2, x0
    a8f4:	mov	x27, x1
    a8f8:	mov	x0, x28
    a8fc:	stp	xzr, x3, [sp, #152]
    a900:	stp	xzr, xzr, [sp, #168]
    a904:	stp	xzr, xzr, [sp, #184]
    a908:	stp	xzr, xzr, [sp, #200]
    a90c:	str	xzr, [sp, #216]
    a910:	bl	aae0 <lzma_filter_decoder_is_supported@@XZ_5.0+0x48>
    a914:	mov	w22, w0
    a918:	cbnz	w0, a9d4 <lzma_raw_buffer_decode@@XZ_5.0+0x15c>
    a91c:	mov	w26, #0x3                   	// #3
    a920:	str	w26, [sp]
    a924:	ldr	x0, [sp, #152]
    a928:	mov	x5, x21
    a92c:	ldr	x8, [x19]
    a930:	mov	x7, x23
    a934:	ldr	x9, [sp, #176]
    a938:	mov	x6, x20
    a93c:	mov	x4, x24
    a940:	mov	x3, x19
    a944:	mov	x2, x25
    a948:	mov	x1, x27
    a94c:	str	x8, [sp, #120]
    a950:	ldr	x21, [x20]
    a954:	blr	x9
    a958:	cmp	w0, #0x1
    a95c:	b.eq	a984 <lzma_raw_buffer_decode@@XZ_5.0+0x10c>  // b.none
    a960:	mov	w22, w0
    a964:	cbnz	w0, a978 <lzma_raw_buffer_decode@@XZ_5.0+0x100>
    a968:	ldr	x4, [x19]
    a96c:	mov	w22, #0xa                   	// #10
    a970:	cmp	x4, x24
    a974:	b.eq	a9f8 <lzma_raw_buffer_decode@@XZ_5.0+0x180>  // b.none
    a978:	ldr	x0, [sp, #120]
    a97c:	str	x0, [x19]
    a980:	str	x21, [x20]
    a984:	mov	x1, x27
    a988:	mov	x0, x28
    a98c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    a990:	ldp	x19, x20, [sp, #32]
    a994:	ldp	x23, x24, [sp, #64]
    a998:	ldp	x25, x26, [sp, #80]
    a99c:	ldp	x27, x28, [sp, #96]
    a9a0:	mov	w0, w22
    a9a4:	ldp	x29, x30, [sp, #16]
    a9a8:	ldp	x21, x22, [sp, #48]
    a9ac:	add	sp, sp, #0xe0
    a9b0:	ret
    a9b4:	mov	w0, w22
    a9b8:	ldp	x29, x30, [sp, #16]
    a9bc:	ldp	x19, x20, [sp, #32]
    a9c0:	ldp	x21, x22, [sp, #48]
    a9c4:	ldp	x23, x24, [sp, #64]
    a9c8:	ldp	x25, x26, [sp, #80]
    a9cc:	add	sp, sp, #0xe0
    a9d0:	ret
    a9d4:	mov	w0, w22
    a9d8:	ldp	x29, x30, [sp, #16]
    a9dc:	ldp	x19, x20, [sp, #32]
    a9e0:	ldp	x21, x22, [sp, #48]
    a9e4:	ldp	x23, x24, [sp, #64]
    a9e8:	ldp	x25, x26, [sp, #80]
    a9ec:	ldp	x27, x28, [sp, #96]
    a9f0:	add	sp, sp, #0xe0
    a9f4:	ret
    a9f8:	ldr	x0, [x20]
    a9fc:	mov	w22, #0x9                   	// #9
    aa00:	cmp	x0, x23
    aa04:	b.ne	a978 <lzma_raw_buffer_decode@@XZ_5.0+0x100>  // b.any
    aa08:	ldr	x0, [sp, #152]
    aa0c:	str	w26, [sp]
    aa10:	ldr	x9, [sp, #176]
    aa14:	str	xzr, [sp, #144]
    aa18:	mov	x2, x25
    aa1c:	add	x6, sp, #0x90
    aa20:	add	x5, sp, #0x88
    aa24:	mov	x3, x19
    aa28:	mov	x1, x27
    aa2c:	mov	x7, #0x1                   	// #1
    aa30:	blr	x9
    aa34:	ldr	x0, [sp, #144]
    aa38:	cmp	x0, #0x1
    aa3c:	cset	w22, eq  // eq = none
    aa40:	add	w22, w22, #0x9
    aa44:	b	a978 <lzma_raw_buffer_decode@@XZ_5.0+0x100>
    aa48:	mov	x2, #0x1                   	// #1
    aa4c:	adrp	x3, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    aa50:	movk	x2, #0x4000, lsl #48
    aa54:	add	x3, x3, #0xbf8
    aa58:	mov	x1, #0x0                   	// #0
    aa5c:	b	aa68 <lzma_raw_buffer_decode@@XZ_5.0+0x1f0>
    aa60:	lsl	x2, x1, #5
    aa64:	ldr	x2, [x2, x3]
    aa68:	cmp	x0, x2
    aa6c:	b.eq	aa84 <lzma_raw_buffer_decode@@XZ_5.0+0x20c>  // b.none
    aa70:	add	x1, x1, #0x1
    aa74:	cmp	x1, #0x9
    aa78:	b.ne	aa60 <lzma_raw_buffer_decode@@XZ_5.0+0x1e8>  // b.any
    aa7c:	mov	x0, #0x0                   	// #0
    aa80:	ret
    aa84:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    aa88:	add	x0, x0, #0xbf8
    aa8c:	add	x0, x0, x1, lsl #5
    aa90:	ret
    aa94:	nop

000000000000aa98 <lzma_filter_decoder_is_supported@@XZ_5.0>:
    aa98:	mov	x2, #0x1                   	// #1
    aa9c:	adrp	x3, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    aaa0:	movk	x2, #0x4000, lsl #48
    aaa4:	add	x3, x3, #0xbf8
    aaa8:	mov	x1, #0x0                   	// #0
    aaac:	b	aab4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    aab0:	ldr	x2, [x2, x3]
    aab4:	add	x1, x1, #0x1
    aab8:	cmp	x0, x2
    aabc:	b.eq	aad4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x3c>  // b.none
    aac0:	lsl	x2, x1, #5
    aac4:	cmp	x1, #0x9
    aac8:	b.ne	aab0 <lzma_filter_decoder_is_supported@@XZ_5.0+0x18>  // b.any
    aacc:	mov	w0, #0x0                   	// #0
    aad0:	ret
    aad4:	mov	w0, #0x1                   	// #1
    aad8:	ret
    aadc:	nop
    aae0:	adrp	x3, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    aae4:	mov	w4, #0x0                   	// #0
    aae8:	add	x3, x3, #0xa48
    aaec:	b	41e8 <lzma_filters_copy@@XZ_5.0+0x188>

000000000000aaf0 <lzma_raw_decoder@@XZ_5.0>:
    aaf0:	stp	x29, x30, [sp, #-48]!
    aaf4:	mov	x29, sp
    aaf8:	stp	x19, x20, [sp, #16]
    aafc:	mov	x20, x0
    ab00:	str	x21, [sp, #32]
    ab04:	mov	x21, x1
    ab08:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    ab0c:	mov	w19, w0
    ab10:	cbz	w0, ab28 <lzma_raw_decoder@@XZ_5.0+0x38>
    ab14:	mov	w0, w19
    ab18:	ldp	x19, x20, [sp, #16]
    ab1c:	ldr	x21, [sp, #32]
    ab20:	ldp	x29, x30, [sp], #48
    ab24:	ret
    ab28:	ldp	x1, x0, [x20, #48]
    ab2c:	mov	x2, x21
    ab30:	adrp	x3, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    ab34:	mov	w4, #0x0                   	// #0
    ab38:	add	x3, x3, #0xa48
    ab3c:	bl	41e8 <lzma_filters_copy@@XZ_5.0+0x188>
    ab40:	mov	w19, w0
    ab44:	cbnz	w0, ab6c <lzma_raw_decoder@@XZ_5.0+0x7c>
    ab48:	ldr	x0, [x20, #56]
    ab4c:	mov	w1, #0x1                   	// #1
    ab50:	ldr	x21, [sp, #32]
    ab54:	strb	w1, [x0, #88]
    ab58:	strb	w1, [x0, #91]
    ab5c:	mov	w0, w19
    ab60:	ldp	x19, x20, [sp, #16]
    ab64:	ldp	x29, x30, [sp], #48
    ab68:	ret
    ab6c:	mov	x0, x20
    ab70:	bl	3320 <lzma_end@plt>
    ab74:	b	ab14 <lzma_raw_decoder@@XZ_5.0+0x24>

000000000000ab78 <lzma_raw_decoder_memusage@@XZ_5.0>:
    ab78:	mov	x1, x0
    ab7c:	adrp	x2, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    ab80:	add	x0, x2, #0xa48
    ab84:	b	43e8 <lzma_filters_copy@@XZ_5.0+0x388>

000000000000ab88 <lzma_properties_decode@@XZ_5.0>:
    ab88:	mov	x5, #0x1                   	// #1
    ab8c:	adrp	x6, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    ab90:	movk	x5, #0x4000, lsl #48
    ab94:	add	x6, x6, #0xbf8
    ab98:	mov	x4, #0x0                   	// #0
    ab9c:	str	xzr, [x0, #8]
    aba0:	ldr	x7, [x0]
    aba4:	b	abb0 <lzma_properties_decode@@XZ_5.0+0x28>
    aba8:	lsl	x5, x4, #5
    abac:	ldr	x5, [x5, x6]
    abb0:	cmp	x7, x5
    abb4:	b.eq	abcc <lzma_properties_decode@@XZ_5.0+0x44>  // b.none
    abb8:	add	x4, x4, #0x1
    abbc:	cmp	x4, #0x9
    abc0:	b.ne	aba8 <lzma_properties_decode@@XZ_5.0+0x20>  // b.any
    abc4:	mov	w0, #0x8                   	// #8
    abc8:	ret
    abcc:	adrp	x5, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    abd0:	add	x5, x5, #0xbf8
    abd4:	add	x4, x5, x4, lsl #5
    abd8:	ldr	x4, [x4, #24]
    abdc:	cbz	x4, abec <lzma_properties_decode@@XZ_5.0+0x64>
    abe0:	add	x0, x0, #0x8
    abe4:	mov	x16, x4
    abe8:	br	x16
    abec:	cmp	x3, #0x0
    abf0:	cset	w0, ne  // ne = any
    abf4:	lsl	w0, w0, #3
    abf8:	ret
    abfc:	nop

000000000000ac00 <lzma_filter_flags_decode@@XZ_5.0>:
    ac00:	stp	x29, x30, [sp, #-80]!
    ac04:	mov	x29, sp
    ac08:	stp	x19, x20, [sp, #16]
    ac0c:	mov	x19, x0
    ac10:	mov	x20, x4
    ac14:	stp	x21, x22, [sp, #32]
    ac18:	mov	x22, x2
    ac1c:	mov	x21, x3
    ac20:	str	x23, [sp, #48]
    ac24:	mov	x23, x1
    ac28:	str	xzr, [x0, #8]
    ac2c:	mov	x1, #0x0                   	// #0
    ac30:	bl	33c0 <lzma_vli_decode@plt>
    ac34:	cbnz	w0, ac98 <lzma_filter_flags_decode@@XZ_5.0+0x98>
    ac38:	ldr	x1, [x19]
    ac3c:	mov	x0, #0x3fffffffffffffff    	// #4611686018427387903
    ac40:	cmp	x1, x0
    ac44:	b.hi	acac <lzma_filter_flags_decode@@XZ_5.0+0xac>  // b.pmore
    ac48:	mov	x4, x20
    ac4c:	mov	x3, x21
    ac50:	mov	x2, x22
    ac54:	add	x0, sp, #0x48
    ac58:	mov	x1, #0x0                   	// #0
    ac5c:	bl	33c0 <lzma_vli_decode@plt>
    ac60:	cbnz	w0, ac98 <lzma_filter_flags_decode@@XZ_5.0+0x98>
    ac64:	ldr	x2, [x21]
    ac68:	ldr	x3, [sp, #72]
    ac6c:	sub	x4, x20, x2
    ac70:	cmp	x4, x3
    ac74:	b.cc	acac <lzma_filter_flags_decode@@XZ_5.0+0xac>  // b.lo, b.ul, b.last
    ac78:	add	x2, x22, x2
    ac7c:	mov	x1, x23
    ac80:	mov	x0, x19
    ac84:	bl	3250 <lzma_properties_decode@plt>
    ac88:	ldr	x1, [x21]
    ac8c:	ldr	x2, [sp, #72]
    ac90:	add	x1, x1, x2
    ac94:	str	x1, [x21]
    ac98:	ldp	x19, x20, [sp, #16]
    ac9c:	ldp	x21, x22, [sp, #32]
    aca0:	ldr	x23, [sp, #48]
    aca4:	ldp	x29, x30, [sp], #80
    aca8:	ret
    acac:	mov	w0, #0x9                   	// #9
    acb0:	ldp	x19, x20, [sp, #16]
    acb4:	ldp	x21, x22, [sp, #32]
    acb8:	ldr	x23, [sp, #48]
    acbc:	ldp	x29, x30, [sp], #80
    acc0:	ret
    acc4:	nop
    acc8:	stp	x29, x30, [sp, #-48]!
    accc:	mov	x29, sp
    acd0:	stp	x21, x22, [sp, #32]
    acd4:	mov	x21, x1
    acd8:	mov	x22, x2
    acdc:	ldr	x1, [x0, #32]
    ace0:	stp	x19, x20, [sp, #16]
    ace4:	mov	x19, x0
    ace8:	mov	x20, x3
    acec:	mov	x0, #0x1                   	// #1
    acf0:	bl	3180 <lzma_index_memusage@plt>
    acf4:	str	x0, [x21]
    acf8:	ldr	x0, [x19, #8]
    acfc:	str	x0, [x22]
    ad00:	mov	w0, #0x0                   	// #0
    ad04:	cbz	x20, ad20 <lzma_filter_flags_decode@@XZ_5.0+0x120>
    ad08:	ldr	x1, [x21]
    ad0c:	mov	w0, #0x6                   	// #6
    ad10:	cmp	x1, x20
    ad14:	b.hi	ad20 <lzma_filter_flags_decode@@XZ_5.0+0x120>  // b.pmore
    ad18:	mov	w0, #0x0                   	// #0
    ad1c:	str	x20, [x19, #8]
    ad20:	ldp	x19, x20, [sp, #16]
    ad24:	ldp	x21, x22, [sp, #32]
    ad28:	ldp	x29, x30, [sp], #48
    ad2c:	ret
    ad30:	stp	x29, x30, [sp, #-32]!
    ad34:	mov	x29, sp
    ad38:	stp	x19, x20, [sp, #16]
    ad3c:	mov	x19, x0
    ad40:	mov	x20, x1
    ad44:	ldr	x0, [x0, #16]
    ad48:	bl	33e0 <lzma_index_end@plt>
    ad4c:	mov	x1, x20
    ad50:	mov	x0, x19
    ad54:	ldp	x19, x20, [sp, #16]
    ad58:	ldp	x29, x30, [sp], #32
    ad5c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    ad60:	stp	x29, x30, [sp, #-112]!
    ad64:	mov	x29, sp
    ad68:	stp	x23, x24, [sp, #48]
    ad6c:	ldr	x23, [x3]
    ad70:	stp	x19, x20, [sp, #16]
    ad74:	mov	x19, x0
    ad78:	stp	x21, x22, [sp, #32]
    ad7c:	cmp	x23, x4
    ad80:	mov	x21, x2
    ad84:	str	x1, [sp, #104]
    ad88:	b.cs	b080 <lzma_filter_flags_decode@@XZ_5.0+0x480>  // b.hs, b.nlast
    ad8c:	mov	x22, x3
    ad90:	mov	x20, x23
    ad94:	stp	x25, x26, [sp, #64]
    ad98:	mov	x26, x4
    ad9c:	add	x25, x0, #0x38
    ada0:	stp	x27, x28, [sp, #80]
    ada4:	add	x28, x0, #0x28
    ada8:	add	x27, x0, #0x30
    adac:	mov	w24, #0x5                   	// #5
    adb0:	ldr	w0, [x19]
    adb4:	cmp	w0, #0x4
    adb8:	b.hi	ae50 <lzma_filter_flags_decode@@XZ_5.0+0x250>  // b.pmore
    adbc:	cmp	w0, #0x2
    adc0:	b.hi	afa8 <lzma_filter_flags_decode@@XZ_5.0+0x3a8>  // b.pmore
    adc4:	cmp	w0, #0x1
    adc8:	b.eq	af74 <lzma_filter_flags_decode@@XZ_5.0+0x374>  // b.none
    adcc:	cmp	w0, #0x2
    add0:	b.ne	aecc <lzma_filter_flags_decode@@XZ_5.0+0x2cc>  // b.any
    add4:	ldr	x1, [x19, #32]
    add8:	mov	x0, #0x1                   	// #1
    addc:	bl	3180 <lzma_index_memusage@plt>
    ade0:	ldr	x1, [x19, #8]
    ade4:	cmp	x0, x1
    ade8:	b.hi	b0c0 <lzma_filter_flags_decode@@XZ_5.0+0x4c0>  // b.pmore
    adec:	ldr	x0, [x19, #16]
    adf0:	ldr	x1, [x19, #32]
    adf4:	bl	49e0 <lzma_index_end@@XZ_5.0+0x48>
    adf8:	ldr	x1, [x19, #32]
    adfc:	mov	w0, #0x3                   	// #3
    ae00:	ldr	x20, [x22]
    ae04:	cmp	x1, #0x0
    ae08:	csel	w0, w24, w0, eq  // eq = none
    ae0c:	str	w0, [x19]
    ae10:	cmp	x26, x20
    ae14:	b.hi	adb0 <lzma_filter_flags_decode@@XZ_5.0+0x1b0>  // b.pmore
    ae18:	ldp	x25, x26, [sp, #64]
    ae1c:	sub	x1, x20, x23
    ae20:	ldp	x27, x28, [sp, #80]
    ae24:	mov	w20, #0x0                   	// #0
    ae28:	ldr	w2, [x19, #64]
    ae2c:	add	x0, x21, x23
    ae30:	bl	31c0 <lzma_crc32@plt>
    ae34:	str	w0, [x19, #64]
    ae38:	mov	w0, w20
    ae3c:	ldp	x19, x20, [sp, #16]
    ae40:	ldp	x21, x22, [sp, #32]
    ae44:	ldp	x23, x24, [sp, #48]
    ae48:	ldp	x29, x30, [sp], #112
    ae4c:	ret
    ae50:	cmp	w0, #0x6
    ae54:	b.eq	b004 <lzma_filter_flags_decode@@XZ_5.0+0x404>  // b.none
    ae58:	cmp	w0, #0x7
    ae5c:	b.ne	aeec <lzma_filter_flags_decode@@XZ_5.0+0x2ec>  // b.any
    ae60:	ldr	x20, [x22]
    ae64:	sub	x21, x21, #0x1
    ae68:	b	ae9c <lzma_filter_flags_decode@@XZ_5.0+0x29c>
    ae6c:	ldr	x0, [x19, #56]
    ae70:	str	x20, [x22]
    ae74:	ldr	w1, [x19, #64]
    ae78:	ldrb	w6, [x21, x20]
    ae7c:	add	x3, x0, #0x1
    ae80:	lsl	w0, w0, #3
    ae84:	lsr	w0, w1, w0
    ae88:	cmp	w6, w0, uxtb
    ae8c:	b.ne	af2c <lzma_filter_flags_decode@@XZ_5.0+0x32c>  // b.any
    ae90:	str	x3, [x19, #56]
    ae94:	cmp	x3, #0x3
    ae98:	b.hi	b044 <lzma_filter_flags_decode@@XZ_5.0+0x444>  // b.pmore
    ae9c:	cmp	x26, x20
    aea0:	add	x20, x20, #0x1
    aea4:	b.ne	ae6c <lzma_filter_flags_decode@@XZ_5.0+0x26c>  // b.any
    aea8:	mov	w20, #0x0                   	// #0
    aeac:	mov	w0, w20
    aeb0:	ldp	x19, x20, [sp, #16]
    aeb4:	ldp	x21, x22, [sp, #32]
    aeb8:	ldp	x23, x24, [sp, #48]
    aebc:	ldp	x25, x26, [sp, #64]
    aec0:	ldp	x27, x28, [sp, #80]
    aec4:	ldp	x29, x30, [sp], #112
    aec8:	ret
    aecc:	cbnz	w0, af50 <lzma_filter_flags_decode@@XZ_5.0+0x350>
    aed0:	ldrb	w0, [x21, x20]
    aed4:	add	x20, x20, #0x1
    aed8:	str	x20, [x22]
    aedc:	cbnz	w0, af2c <lzma_filter_flags_decode@@XZ_5.0+0x32c>
    aee0:	mov	w0, #0x1                   	// #1
    aee4:	str	w0, [x19]
    aee8:	b	ae10 <lzma_filter_flags_decode@@XZ_5.0+0x210>
    aeec:	cmp	w0, #0x5
    aef0:	b.ne	af50 <lzma_filter_flags_decode@@XZ_5.0+0x350>  // b.any
    aef4:	ldr	x0, [x19, #16]
    aef8:	bl	4bd8 <lzma_index_checks@@XZ_5.0+0x28>
    aefc:	mov	w0, w0
    af00:	mov	w1, #0x6                   	// #6
    af04:	str	w1, [x19]
    af08:	str	x0, [x19, #56]
    af0c:	ldr	x20, [x22]
    af10:	cbz	x0, b0a0 <lzma_filter_flags_decode@@XZ_5.0+0x4a0>
    af14:	ldrb	w1, [x21, x20]
    af18:	sub	x0, x0, #0x1
    af1c:	add	x20, x20, #0x1
    af20:	str	x20, [x22]
    af24:	str	x0, [x19, #56]
    af28:	cbz	w1, ae10 <lzma_filter_flags_decode@@XZ_5.0+0x210>
    af2c:	mov	w20, #0x9                   	// #9
    af30:	mov	w0, w20
    af34:	ldp	x19, x20, [sp, #16]
    af38:	ldp	x21, x22, [sp, #32]
    af3c:	ldp	x23, x24, [sp, #48]
    af40:	ldp	x25, x26, [sp, #64]
    af44:	ldp	x27, x28, [sp, #80]
    af48:	ldp	x29, x30, [sp], #112
    af4c:	ret
    af50:	ldp	x25, x26, [sp, #64]
    af54:	mov	w20, #0xb                   	// #11
    af58:	ldp	x27, x28, [sp, #80]
    af5c:	mov	w0, w20
    af60:	ldp	x19, x20, [sp, #16]
    af64:	ldp	x21, x22, [sp, #32]
    af68:	ldp	x23, x24, [sp, #48]
    af6c:	ldp	x29, x30, [sp], #112
    af70:	ret
    af74:	mov	x4, x26
    af78:	mov	x3, x22
    af7c:	mov	x2, x21
    af80:	mov	x1, x25
    af84:	add	x0, x19, #0x20
    af88:	bl	33c0 <lzma_vli_decode@plt>
    af8c:	mov	w20, w0
    af90:	cmp	w0, #0x1
    af94:	b.ne	b08c <lzma_filter_flags_decode@@XZ_5.0+0x48c>  // b.any
    af98:	mov	w0, #0x2                   	// #2
    af9c:	str	w0, [x19]
    afa0:	str	xzr, [x19, #56]
    afa4:	b	add4 <lzma_filter_flags_decode@@XZ_5.0+0x1d4>
    afa8:	cmp	w0, #0x3
    afac:	mov	x4, x26
    afb0:	csel	x0, x27, x28, ne  // ne = any
    afb4:	mov	x3, x22
    afb8:	mov	x2, x21
    afbc:	mov	x1, x25
    afc0:	bl	33c0 <lzma_vli_decode@plt>
    afc4:	mov	w20, w0
    afc8:	cmp	w0, #0x1
    afcc:	b.ne	b08c <lzma_filter_flags_decode@@XZ_5.0+0x48c>  // b.any
    afd0:	ldr	w0, [x19]
    afd4:	str	xzr, [x19, #56]
    afd8:	cmp	w0, #0x3
    afdc:	ldr	x2, [x19, #40]
    afe0:	b.ne	b00c <lzma_filter_flags_decode@@XZ_5.0+0x40c>  // b.any
    afe4:	sub	x2, x2, #0x5
    afe8:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    afec:	cmp	x2, x0
    aff0:	b.cs	af2c <lzma_filter_flags_decode@@XZ_5.0+0x32c>  // b.hs, b.nlast
    aff4:	mov	w0, #0x4                   	// #4
    aff8:	str	w0, [x19]
    affc:	ldr	x20, [x22]
    b000:	b	ae10 <lzma_filter_flags_decode@@XZ_5.0+0x210>
    b004:	ldr	x0, [x19, #56]
    b008:	b	af0c <lzma_filter_flags_decode@@XZ_5.0+0x30c>
    b00c:	ldr	x0, [x19, #16]
    b010:	ldr	x3, [x19, #48]
    b014:	ldr	x1, [sp, #104]
    b018:	bl	3300 <lzma_index_append@plt>
    b01c:	mov	w20, w0
    b020:	cbnz	w0, b074 <lzma_filter_flags_decode@@XZ_5.0+0x474>
    b024:	ldr	x0, [x19, #32]
    b028:	mov	w1, #0x3                   	// #3
    b02c:	ldr	x20, [x22]
    b030:	subs	x0, x0, #0x1
    b034:	str	x0, [x19, #32]
    b038:	csel	w0, w24, w1, eq  // eq = none
    b03c:	str	w0, [x19]
    b040:	b	ae10 <lzma_filter_flags_decode@@XZ_5.0+0x210>
    b044:	ldp	x1, x0, [x19, #16]
    b048:	mov	w20, #0x1                   	// #1
    b04c:	ldp	x25, x26, [sp, #64]
    b050:	ldp	x27, x28, [sp, #80]
    b054:	str	x1, [x0]
    b058:	mov	w0, w20
    b05c:	str	xzr, [x19, #16]
    b060:	ldp	x19, x20, [sp, #16]
    b064:	ldp	x21, x22, [sp, #32]
    b068:	ldp	x23, x24, [sp, #48]
    b06c:	ldp	x29, x30, [sp], #112
    b070:	ret
    b074:	ldp	x25, x26, [sp, #64]
    b078:	ldp	x27, x28, [sp, #80]
    b07c:	b	af5c <lzma_filter_flags_decode@@XZ_5.0+0x35c>
    b080:	mov	x1, #0x0                   	// #0
    b084:	mov	w20, #0x0                   	// #0
    b088:	b	ae28 <lzma_filter_flags_decode@@XZ_5.0+0x228>
    b08c:	ldr	x1, [x22]
    b090:	ldp	x25, x26, [sp, #64]
    b094:	sub	x1, x1, x23
    b098:	ldp	x27, x28, [sp, #80]
    b09c:	b	ae28 <lzma_filter_flags_decode@@XZ_5.0+0x228>
    b0a0:	ldr	w2, [x19, #64]
    b0a4:	sub	x1, x20, x23
    b0a8:	add	x0, x21, x23
    b0ac:	bl	31c0 <lzma_crc32@plt>
    b0b0:	str	w0, [x19, #64]
    b0b4:	mov	w1, #0x7                   	// #7
    b0b8:	str	w1, [x19]
    b0bc:	b	ae64 <lzma_filter_flags_decode@@XZ_5.0+0x264>
    b0c0:	ldr	x1, [x22]
    b0c4:	mov	w20, #0x6                   	// #6
    b0c8:	ldp	x25, x26, [sp, #64]
    b0cc:	sub	x1, x1, x23
    b0d0:	ldp	x27, x28, [sp, #80]
    b0d4:	b	ae28 <lzma_filter_flags_decode@@XZ_5.0+0x228>
    b0d8:	stp	x29, x30, [sp, #-64]!
    b0dc:	mov	x29, sp
    b0e0:	stp	x21, x22, [sp, #32]
    b0e4:	mov	x22, x2
    b0e8:	mov	x21, x3
    b0ec:	ldr	x2, [x0, #16]
    b0f0:	stp	x19, x20, [sp, #16]
    b0f4:	adrp	x19, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    b0f8:	str	x23, [sp, #48]
    b0fc:	add	x19, x19, #0xd8
    b100:	mov	x20, x0
    b104:	cmp	x2, x19
    b108:	mov	x23, x1
    b10c:	b.eq	b114 <lzma_filter_flags_decode@@XZ_5.0+0x514>  // b.none
    b110:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    b114:	str	x19, [x20, #16]
    b118:	cbz	x22, b1bc <lzma_filter_flags_decode@@XZ_5.0+0x5bc>
    b11c:	ldr	x19, [x20]
    b120:	cbz	x19, b17c <lzma_filter_flags_decode@@XZ_5.0+0x57c>
    b124:	ldr	x0, [x19, #16]
    b128:	mov	x1, x23
    b12c:	bl	33e0 <lzma_index_end@plt>
    b130:	str	x22, [x19, #24]
    b134:	mov	x0, x23
    b138:	str	xzr, [x22]
    b13c:	bl	33b0 <lzma_index_init@plt>
    b140:	str	x0, [x19, #16]
    b144:	cbz	x0, b1d4 <lzma_filter_flags_decode@@XZ_5.0+0x5d4>
    b148:	cmp	x21, #0x0
    b14c:	mov	w0, #0x0                   	// #0
    b150:	csinc	x21, x21, xzr, ne  // ne = any
    b154:	str	wzr, [x19]
    b158:	str	x21, [x19, #8]
    b15c:	str	xzr, [x19, #32]
    b160:	str	xzr, [x19, #56]
    b164:	str	wzr, [x19, #64]
    b168:	ldp	x19, x20, [sp, #16]
    b16c:	ldp	x21, x22, [sp, #32]
    b170:	ldr	x23, [sp, #48]
    b174:	ldp	x29, x30, [sp], #64
    b178:	ret
    b17c:	mov	x1, x23
    b180:	mov	x0, #0x48                  	// #72
    b184:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    b188:	mov	x19, x0
    b18c:	cbz	x0, b1d4 <lzma_filter_flags_decode@@XZ_5.0+0x5d4>
    b190:	adrp	x2, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    b194:	adrp	x1, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    b198:	add	x2, x2, #0xd60
    b19c:	add	x1, x1, #0xd30
    b1a0:	adrp	x0, a000 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    b1a4:	add	x0, x0, #0xcc8
    b1a8:	str	x19, [x20]
    b1ac:	str	xzr, [x19, #16]
    b1b0:	stp	x2, x1, [x20, #24]
    b1b4:	str	x0, [x20, #56]
    b1b8:	b	b130 <lzma_filter_flags_decode@@XZ_5.0+0x530>
    b1bc:	mov	w0, #0xb                   	// #11
    b1c0:	ldp	x19, x20, [sp, #16]
    b1c4:	ldp	x21, x22, [sp, #32]
    b1c8:	ldr	x23, [sp, #48]
    b1cc:	ldp	x29, x30, [sp], #64
    b1d0:	ret
    b1d4:	mov	w0, #0x5                   	// #5
    b1d8:	b	b168 <lzma_filter_flags_decode@@XZ_5.0+0x568>
    b1dc:	nop

000000000000b1e0 <lzma_index_decoder@@XZ_5.0>:
    b1e0:	stp	x29, x30, [sp, #-48]!
    b1e4:	mov	x29, sp
    b1e8:	stp	x19, x20, [sp, #16]
    b1ec:	mov	x20, x0
    b1f0:	stp	x21, x22, [sp, #32]
    b1f4:	mov	x21, x1
    b1f8:	mov	x22, x2
    b1fc:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    b200:	mov	w19, w0
    b204:	cbz	w0, b21c <lzma_index_decoder@@XZ_5.0+0x3c>
    b208:	mov	w0, w19
    b20c:	ldp	x19, x20, [sp, #16]
    b210:	ldp	x21, x22, [sp, #32]
    b214:	ldp	x29, x30, [sp], #48
    b218:	ret
    b21c:	ldp	x1, x0, [x20, #48]
    b220:	mov	x3, x22
    b224:	mov	x2, x21
    b228:	bl	b0d8 <lzma_filter_flags_decode@@XZ_5.0+0x4d8>
    b22c:	mov	w19, w0
    b230:	cbnz	w0, b258 <lzma_index_decoder@@XZ_5.0+0x78>
    b234:	ldr	x0, [x20, #56]
    b238:	mov	w1, #0x1                   	// #1
    b23c:	ldp	x21, x22, [sp, #32]
    b240:	strb	w1, [x0, #88]
    b244:	strb	w1, [x0, #91]
    b248:	mov	w0, w19
    b24c:	ldp	x19, x20, [sp, #16]
    b250:	ldp	x29, x30, [sp], #48
    b254:	ret
    b258:	mov	x0, x20
    b25c:	bl	3320 <lzma_end@plt>
    b260:	b	b208 <lzma_index_decoder@@XZ_5.0+0x28>
    b264:	nop

000000000000b268 <lzma_index_buffer_decode@@XZ_5.0>:
    b268:	sub	sp, sp, #0xa0
    b26c:	cmp	x0, #0x0
    b270:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    b274:	stp	x29, x30, [sp, #16]
    b278:	add	x29, sp, #0x10
    b27c:	stp	x23, x24, [sp, #64]
    b280:	mov	w23, #0xb                   	// #11
    b284:	b.eq	b344 <lzma_index_buffer_decode@@XZ_5.0+0xdc>  // b.none
    b288:	stp	x19, x20, [sp, #32]
    b28c:	cmp	x3, #0x0
    b290:	mov	x19, x4
    b294:	stp	x21, x22, [sp, #48]
    b298:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    b29c:	mov	x21, x3
    b2a0:	mov	w23, #0xb                   	// #11
    b2a4:	b.eq	b374 <lzma_index_buffer_decode@@XZ_5.0+0x10c>  // b.none
    b2a8:	mov	x6, x0
    b2ac:	mov	x22, x5
    b2b0:	ldr	x0, [x4]
    b2b4:	cmp	x0, x5
    b2b8:	b.hi	b374 <lzma_index_buffer_decode@@XZ_5.0+0x10c>  // b.pmore
    b2bc:	ldr	x23, [x1]
    b2c0:	str	xzr, [x6]
    b2c4:	mov	x20, x1
    b2c8:	mov	x24, x2
    b2cc:	mov	x0, x2
    b2d0:	str	x6, [sp, #112]
    b2d4:	bl	33b0 <lzma_index_init@plt>
    b2d8:	str	x0, [sp, #104]
    b2dc:	cbz	x0, b3bc <lzma_index_buffer_decode@@XZ_5.0+0x154>
    b2e0:	cmp	x23, #0x0
    b2e4:	str	wzr, [sp]
    b2e8:	mov	x2, x21
    b2ec:	mov	x21, #0x1                   	// #1
    b2f0:	csel	x23, x23, x21, ne  // ne = any
    b2f4:	mov	x4, x22
    b2f8:	mov	x3, x19
    b2fc:	mov	x1, x24
    b300:	add	x0, sp, #0x58
    b304:	mov	x7, #0x0                   	// #0
    b308:	mov	x6, #0x0                   	// #0
    b30c:	mov	x5, #0x0                   	// #0
    b310:	str	wzr, [sp, #88]
    b314:	str	x23, [sp, #96]
    b318:	str	xzr, [sp, #120]
    b31c:	str	xzr, [sp, #144]
    b320:	str	wzr, [sp, #152]
    b324:	ldr	x22, [x19]
    b328:	bl	ad60 <lzma_filter_flags_decode@@XZ_5.0+0x160>
    b32c:	mov	w23, w0
    b330:	cmp	w0, #0x1
    b334:	b.ne	b358 <lzma_index_buffer_decode@@XZ_5.0+0xf0>  // b.any
    b338:	ldp	x19, x20, [sp, #32]
    b33c:	mov	w23, #0x0                   	// #0
    b340:	ldp	x21, x22, [sp, #48]
    b344:	mov	w0, w23
    b348:	ldp	x29, x30, [sp, #16]
    b34c:	ldp	x23, x24, [sp, #64]
    b350:	add	sp, sp, #0xa0
    b354:	ret
    b358:	ldr	x0, [sp, #104]
    b35c:	mov	x1, x24
    b360:	bl	33e0 <lzma_index_end@plt>
    b364:	str	x22, [x19]
    b368:	cbz	w23, b390 <lzma_index_buffer_decode@@XZ_5.0+0x128>
    b36c:	cmp	w23, #0x6
    b370:	b.eq	b3a0 <lzma_index_buffer_decode@@XZ_5.0+0x138>  // b.none
    b374:	mov	w0, w23
    b378:	ldp	x29, x30, [sp, #16]
    b37c:	ldp	x19, x20, [sp, #32]
    b380:	ldp	x21, x22, [sp, #48]
    b384:	ldp	x23, x24, [sp, #64]
    b388:	add	sp, sp, #0xa0
    b38c:	ret
    b390:	mov	w23, #0x9                   	// #9
    b394:	ldp	x19, x20, [sp, #32]
    b398:	ldp	x21, x22, [sp, #48]
    b39c:	b	b344 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    b3a0:	ldr	x1, [sp, #120]
    b3a4:	mov	x0, x21
    b3a8:	bl	3180 <lzma_index_memusage@plt>
    b3ac:	ldp	x21, x22, [sp, #48]
    b3b0:	str	x0, [x20]
    b3b4:	ldp	x19, x20, [sp, #32]
    b3b8:	b	b344 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    b3bc:	mov	w23, #0x5                   	// #5
    b3c0:	ldp	x19, x20, [sp, #32]
    b3c4:	ldp	x21, x22, [sp, #48]
    b3c8:	b	b344 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    b3cc:	nop
    b3d0:	stp	x29, x30, [sp, #-64]!
    b3d4:	add	x3, x1, #0x3
    b3d8:	and	x3, x3, #0xfffffffffffffffc
    b3dc:	mov	x29, sp
    b3e0:	stp	x19, x20, [sp, #16]
    b3e4:	mov	x19, x0
    b3e8:	mov	x20, x2
    b3ec:	mov	x0, x1
    b3f0:	stp	x21, x22, [sp, #32]
    b3f4:	mov	x21, x1
    b3f8:	ldp	x2, x1, [x19]
    b3fc:	add	x2, x2, x3
    b400:	add	x1, x1, x20
    b404:	stp	x2, x1, [x19]
    b408:	bl	3480 <lzma_vli_size@plt>
    b40c:	mov	w22, w0
    b410:	mov	x0, x20
    b414:	bl	3480 <lzma_vli_size@plt>
    b418:	ldp	x2, x1, [x19, #16]
    b41c:	add	w22, w22, w0
    b420:	mov	x3, #0x10                  	// #16
    b424:	add	x0, x19, #0x20
    b428:	stp	x21, x20, [sp, #48]
    b42c:	add	x22, x1, x22
    b430:	add	x2, x2, #0x1
    b434:	stp	x2, x22, [x19, #16]
    b438:	mov	w1, #0xa                   	// #10
    b43c:	add	x2, sp, #0x30
    b440:	bl	c4e0 <lzma_check_size@@XZ_5.0+0x58>
    b444:	mov	w0, #0x0                   	// #0
    b448:	ldp	x19, x20, [sp, #16]
    b44c:	ldp	x21, x22, [sp, #32]
    b450:	ldp	x29, x30, [sp], #64
    b454:	ret

000000000000b458 <lzma_index_hash_init@@XZ_5.0>:
    b458:	stp	x29, x30, [sp, #-32]!
    b45c:	mov	x29, sp
    b460:	str	x19, [sp, #16]
    b464:	mov	x19, x0
    b468:	cbz	x0, b4b4 <lzma_index_hash_init@@XZ_5.0+0x5c>
    b46c:	str	wzr, [x19]
    b470:	add	x0, x19, #0x28
    b474:	stp	xzr, xzr, [x19, #8]
    b478:	mov	w1, #0xa                   	// #10
    b47c:	stp	xzr, xzr, [x19, #24]
    b480:	stp	xzr, xzr, [x19, #144]
    b484:	stp	xzr, xzr, [x19, #160]
    b488:	stp	xzr, xzr, [x19, #288]
    b48c:	str	xzr, [x19, #304]
    b490:	str	wzr, [x19, #312]
    b494:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    b498:	add	x0, x19, #0xb0
    b49c:	mov	w1, #0xa                   	// #10
    b4a0:	bl	c4b0 <lzma_check_size@@XZ_5.0+0x28>
    b4a4:	mov	x0, x19
    b4a8:	ldr	x19, [sp, #16]
    b4ac:	ldp	x29, x30, [sp], #32
    b4b0:	ret
    b4b4:	mov	x0, #0x140                 	// #320
    b4b8:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    b4bc:	mov	x19, x0
    b4c0:	cbnz	x0, b46c <lzma_index_hash_init@@XZ_5.0+0x14>
    b4c4:	mov	x0, #0x0                   	// #0
    b4c8:	b	b4a8 <lzma_index_hash_init@@XZ_5.0+0x50>
    b4cc:	nop

000000000000b4d0 <lzma_index_hash_end@@XZ_5.0>:
    b4d0:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    b4d4:	nop

000000000000b4d8 <lzma_index_hash_size@@XZ_5.0>:
    b4d8:	stp	x29, x30, [sp, #-32]!
    b4dc:	mov	x29, sp
    b4e0:	str	x19, [sp, #16]
    b4e4:	mov	x19, x0
    b4e8:	ldr	x0, [x0, #24]
    b4ec:	bl	3480 <lzma_vli_size@plt>
    b4f0:	add	w0, w0, #0x1
    b4f4:	ldr	x1, [x19, #32]
    b4f8:	ldr	x19, [sp, #16]
    b4fc:	add	x1, x1, #0x7
    b500:	add	x0, x1, x0
    b504:	and	x0, x0, #0xfffffffffffffffc
    b508:	ldp	x29, x30, [sp], #32
    b50c:	ret

000000000000b510 <lzma_index_hash_append@@XZ_5.0>:
    b510:	stp	x29, x30, [sp, #-32]!
    b514:	mov	x29, sp
    b518:	ldr	w3, [x0]
    b51c:	stp	x19, x20, [sp, #16]
    b520:	mov	x19, x0
    b524:	mov	w0, #0xb                   	// #11
    b528:	cbnz	w3, b598 <lzma_index_hash_append@@XZ_5.0+0x88>
    b52c:	sub	x3, x1, #0x5
    b530:	mov	x5, #0x7ffffffffffffff8    	// #9223372036854775800
    b534:	mov	w0, #0xb                   	// #11
    b538:	cmp	x3, x5
    b53c:	b.cs	b598 <lzma_index_hash_append@@XZ_5.0+0x88>  // b.hs, b.nlast
    b540:	tbnz	x2, #63, b598 <lzma_index_hash_append@@XZ_5.0+0x88>
    b544:	add	x0, x19, #0x8
    b548:	bl	b3d0 <lzma_index_buffer_decode@@XZ_5.0+0x168>
    b54c:	cbnz	w0, b598 <lzma_index_hash_append@@XZ_5.0+0x88>
    b550:	ldr	x20, [x19, #8]
    b554:	tbnz	x20, #63, b5a4 <lzma_index_hash_append@@XZ_5.0+0x94>
    b558:	ldr	x0, [x19, #16]
    b55c:	tbnz	x0, #63, b5a4 <lzma_index_hash_append@@XZ_5.0+0x94>
    b560:	ldr	x0, [x19, #24]
    b564:	bl	3480 <lzma_vli_size@plt>
    b568:	add	w3, w0, #0x1
    b56c:	ldr	x2, [x19, #32]
    b570:	mov	x4, #0x400000000           	// #17179869184
    b574:	mov	w0, #0x9                   	// #9
    b578:	add	x1, x2, #0x7
    b57c:	add	x1, x1, x3
    b580:	and	x1, x1, #0xfffffffffffffffc
    b584:	cmp	x1, x4
    b588:	b.hi	b598 <lzma_index_hash_append@@XZ_5.0+0x88>  // b.pmore
    b58c:	add	x20, x20, #0x18
    b590:	cmn	x20, x1
    b594:	csel	w0, wzr, w0, pl  // pl = nfrst
    b598:	ldp	x19, x20, [sp, #16]
    b59c:	ldp	x29, x30, [sp], #32
    b5a0:	ret
    b5a4:	mov	w0, #0x9                   	// #9
    b5a8:	b	b598 <lzma_index_hash_append@@XZ_5.0+0x88>
    b5ac:	nop

000000000000b5b0 <lzma_index_hash_decode@@XZ_5.0>:
    b5b0:	stp	x29, x30, [sp, #-96]!
    b5b4:	mov	x29, sp
    b5b8:	stp	x23, x24, [sp, #48]
    b5bc:	ldr	x23, [x2]
    b5c0:	stp	x21, x22, [sp, #32]
    b5c4:	mov	w21, #0xa                   	// #10
    b5c8:	cmp	x23, x3
    b5cc:	b.cs	b6e4 <lzma_index_hash_decode@@XZ_5.0+0x134>  // b.hs, b.nlast
    b5d0:	add	x22, x0, #0x130
    b5d4:	stp	x19, x20, [sp, #16]
    b5d8:	mov	x20, x2
    b5dc:	mov	x19, x0
    b5e0:	stp	x25, x26, [sp, #64]
    b5e4:	mov	x26, x1
    b5e8:	mov	x1, x23
    b5ec:	stp	x27, x28, [sp, #80]
    b5f0:	mov	x28, x3
    b5f4:	add	x27, x0, #0x118
    b5f8:	mov	w25, #0x4                   	// #4
    b5fc:	mov	w24, #0x2                   	// #2
    b600:	ldr	w0, [x19]
    b604:	cmp	w0, #0x4
    b608:	b.eq	b7b8 <lzma_index_hash_decode@@XZ_5.0+0x208>  // b.none
    b60c:	b.hi	b680 <lzma_index_hash_decode@@XZ_5.0+0xd0>  // b.pmore
    b610:	cmp	w0, #0x1
    b614:	b.eq	b76c <lzma_index_hash_decode@@XZ_5.0+0x1bc>  // b.none
    b618:	b.ls	b6f8 <lzma_index_hash_decode@@XZ_5.0+0x148>  // b.plast
    b61c:	cmp	w0, #0x2
    b620:	add	x1, x19, #0x120
    b624:	add	x0, x19, #0x128
    b628:	mov	x4, x28
    b62c:	csel	x0, x1, x0, eq  // eq = none
    b630:	mov	x3, x20
    b634:	mov	x2, x26
    b638:	mov	x1, x22
    b63c:	bl	33c0 <lzma_vli_decode@plt>
    b640:	mov	w21, w0
    b644:	cmp	w0, #0x1
    b648:	b.ne	b8b0 <lzma_index_hash_decode@@XZ_5.0+0x300>  // b.any
    b64c:	ldr	w0, [x19]
    b650:	str	xzr, [x19, #304]
    b654:	cmp	w0, #0x2
    b658:	ldr	x1, [x19, #288]
    b65c:	b.ne	b82c <lzma_index_hash_decode@@XZ_5.0+0x27c>  // b.any
    b660:	sub	x1, x1, #0x5
    b664:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    b668:	cmp	x1, x0
    b66c:	b.cs	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.hs, b.nlast
    b670:	mov	w0, #0x3                   	// #3
    b674:	ldr	x1, [x20]
    b678:	str	w0, [x19]
    b67c:	b	b718 <lzma_index_hash_decode@@XZ_5.0+0x168>
    b680:	cmp	w0, #0x5
    b684:	b.eq	b824 <lzma_index_hash_decode@@XZ_5.0+0x274>  // b.none
    b688:	cmp	w0, #0x6
    b68c:	b.ne	b748 <lzma_index_hash_decode@@XZ_5.0+0x198>  // b.any
    b690:	ldr	x21, [x20]
    b694:	add	x1, x21, #0x1
    b698:	cmp	x28, x21
    b69c:	b.eq	b88c <lzma_index_hash_decode@@XZ_5.0+0x2dc>  // b.none
    b6a0:	ldr	x2, [x19, #304]
    b6a4:	ldr	w0, [x19, #312]
    b6a8:	str	x1, [x20]
    b6ac:	lsl	w2, w2, #3
    b6b0:	ldrb	w1, [x26, x21]
    b6b4:	lsr	w0, w0, w2
    b6b8:	cmp	w1, w0, uxtb
    b6bc:	b.ne	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.any
    b6c0:	ldr	x0, [x19, #304]
    b6c4:	add	x0, x0, #0x1
    b6c8:	str	x0, [x19, #304]
    b6cc:	cmp	x0, #0x3
    b6d0:	b.ls	b690 <lzma_index_hash_decode@@XZ_5.0+0xe0>  // b.plast
    b6d4:	ldp	x19, x20, [sp, #16]
    b6d8:	mov	w21, #0x1                   	// #1
    b6dc:	ldp	x25, x26, [sp, #64]
    b6e0:	ldp	x27, x28, [sp, #80]
    b6e4:	mov	w0, w21
    b6e8:	ldp	x21, x22, [sp, #32]
    b6ec:	ldp	x23, x24, [sp, #48]
    b6f0:	ldp	x29, x30, [sp], #96
    b6f4:	ret
    b6f8:	cbnz	w0, b748 <lzma_index_hash_decode@@XZ_5.0+0x198>
    b6fc:	add	x0, x1, #0x1
    b700:	str	x0, [x20]
    b704:	ldrb	w1, [x26, x1]
    b708:	cbnz	w1, b800 <lzma_index_hash_decode@@XZ_5.0+0x250>
    b70c:	mov	x1, x0
    b710:	mov	w0, #0x1                   	// #1
    b714:	str	w0, [x19]
    b718:	cmp	x1, x28
    b71c:	b.cc	b600 <lzma_index_hash_decode@@XZ_5.0+0x50>  // b.lo, b.ul, b.last
    b720:	mov	w21, #0x0                   	// #0
    b724:	ldr	w2, [x19, #312]
    b728:	add	x0, x26, x23
    b72c:	sub	x1, x1, x23
    b730:	bl	31c0 <lzma_crc32@plt>
    b734:	ldp	x25, x26, [sp, #64]
    b738:	ldp	x27, x28, [sp, #80]
    b73c:	str	w0, [x19, #312]
    b740:	ldp	x19, x20, [sp, #16]
    b744:	b	b6e4 <lzma_index_hash_decode@@XZ_5.0+0x134>
    b748:	mov	w21, #0xb                   	// #11
    b74c:	mov	w0, w21
    b750:	ldp	x19, x20, [sp, #16]
    b754:	ldp	x21, x22, [sp, #32]
    b758:	ldp	x23, x24, [sp, #48]
    b75c:	ldp	x25, x26, [sp, #64]
    b760:	ldp	x27, x28, [sp, #80]
    b764:	ldp	x29, x30, [sp], #96
    b768:	ret
    b76c:	mov	x4, x28
    b770:	mov	x3, x20
    b774:	mov	x2, x26
    b778:	mov	x1, x22
    b77c:	mov	x0, x27
    b780:	bl	33c0 <lzma_vli_decode@plt>
    b784:	mov	w21, w0
    b788:	cmp	w0, #0x1
    b78c:	b.ne	b8b0 <lzma_index_hash_decode@@XZ_5.0+0x300>  // b.any
    b790:	ldr	x1, [x19, #24]
    b794:	ldr	x0, [x19, #280]
    b798:	cmp	x0, x1
    b79c:	b.ne	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.any
    b7a0:	str	xzr, [x19, #304]
    b7a4:	cmp	x0, #0x0
    b7a8:	csel	w0, w25, w24, eq  // eq = none
    b7ac:	str	w0, [x19]
    b7b0:	ldr	x1, [x20]
    b7b4:	b	b718 <lzma_index_hash_decode@@XZ_5.0+0x168>
    b7b8:	ldr	x0, [x19, #160]
    b7bc:	bl	3480 <lzma_vli_size@plt>
    b7c0:	add	w0, w0, #0x1
    b7c4:	ldr	x1, [x19, #168]
    b7c8:	mov	w2, #0x5                   	// #5
    b7cc:	str	w2, [x19]
    b7d0:	add	x0, x0, x1
    b7d4:	neg	x0, x0
    b7d8:	and	x0, x0, #0x3
    b7dc:	str	x0, [x19, #304]
    b7e0:	cbz	x0, b8b8 <lzma_index_hash_decode@@XZ_5.0+0x308>
    b7e4:	sub	x0, x0, #0x1
    b7e8:	str	x0, [x19, #304]
    b7ec:	ldr	x0, [x20]
    b7f0:	add	x1, x0, #0x1
    b7f4:	str	x1, [x20]
    b7f8:	ldrb	w0, [x26, x0]
    b7fc:	cbz	w0, b718 <lzma_index_hash_decode@@XZ_5.0+0x168>
    b800:	mov	w21, #0x9                   	// #9
    b804:	mov	w0, w21
    b808:	ldp	x19, x20, [sp, #16]
    b80c:	ldp	x21, x22, [sp, #32]
    b810:	ldp	x23, x24, [sp, #48]
    b814:	ldp	x25, x26, [sp, #64]
    b818:	ldp	x27, x28, [sp, #80]
    b81c:	ldp	x29, x30, [sp], #96
    b820:	ret
    b824:	ldr	x0, [x19, #304]
    b828:	b	b7e0 <lzma_index_hash_decode@@XZ_5.0+0x230>
    b82c:	ldr	x2, [x19, #296]
    b830:	add	x0, x19, #0x90
    b834:	bl	b3d0 <lzma_index_buffer_decode@@XZ_5.0+0x168>
    b838:	mov	w21, w0
    b83c:	cbnz	w0, b948 <lzma_index_hash_decode@@XZ_5.0+0x398>
    b840:	ldr	x1, [x19, #8]
    b844:	ldr	x0, [x19, #144]
    b848:	cmp	x1, x0
    b84c:	b.cc	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    b850:	ldr	x1, [x19, #16]
    b854:	ldr	x0, [x19, #152]
    b858:	cmp	x1, x0
    b85c:	b.cc	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    b860:	ldr	x1, [x19, #32]
    b864:	ldr	x0, [x19, #168]
    b868:	cmp	x1, x0
    b86c:	b.cc	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    b870:	ldr	x0, [x19, #280]
    b874:	subs	x0, x0, #0x1
    b878:	str	x0, [x19, #280]
    b87c:	csel	w0, w25, w24, eq  // eq = none
    b880:	ldr	x1, [x20]
    b884:	str	w0, [x19]
    b888:	b	b718 <lzma_index_hash_decode@@XZ_5.0+0x168>
    b88c:	mov	w21, #0x0                   	// #0
    b890:	mov	w0, w21
    b894:	ldp	x19, x20, [sp, #16]
    b898:	ldp	x21, x22, [sp, #32]
    b89c:	ldp	x23, x24, [sp, #48]
    b8a0:	ldp	x25, x26, [sp, #64]
    b8a4:	ldp	x27, x28, [sp, #80]
    b8a8:	ldp	x29, x30, [sp], #96
    b8ac:	ret
    b8b0:	ldr	x1, [x20]
    b8b4:	b	b724 <lzma_index_hash_decode@@XZ_5.0+0x174>
    b8b8:	ldr	x1, [x19, #8]
    b8bc:	ldr	x0, [x19, #144]
    b8c0:	cmp	x1, x0
    b8c4:	b.ne	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.any
    b8c8:	ldr	x1, [x19, #16]
    b8cc:	ldr	x0, [x19, #152]
    b8d0:	cmp	x1, x0
    b8d4:	b.ne	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.any
    b8d8:	ldr	x1, [x19, #32]
    b8dc:	ldr	x0, [x19, #168]
    b8e0:	cmp	x1, x0
    b8e4:	b.ne	b800 <lzma_index_hash_decode@@XZ_5.0+0x250>  // b.any
    b8e8:	add	x21, x19, #0x28
    b8ec:	mov	w1, #0xa                   	// #10
    b8f0:	mov	x0, x21
    b8f4:	bl	c560 <lzma_check_size@@XZ_5.0+0xd8>
    b8f8:	mov	w1, #0xa                   	// #10
    b8fc:	add	x22, x19, #0xb0
    b900:	mov	x0, x22
    b904:	bl	c560 <lzma_check_size@@XZ_5.0+0xd8>
    b908:	mov	w0, #0xa                   	// #10
    b90c:	bl	3270 <lzma_check_size@plt>
    b910:	mov	x1, x22
    b914:	mov	w2, w0
    b918:	mov	x0, x21
    b91c:	bl	3330 <memcmp@plt>
    b920:	cbnz	w0, b800 <lzma_index_hash_decode@@XZ_5.0+0x250>
    b924:	ldr	w2, [x19, #312]
    b928:	add	x0, x26, x23
    b92c:	ldr	x21, [x20]
    b930:	sub	x1, x21, x23
    b934:	bl	31c0 <lzma_crc32@plt>
    b938:	mov	w1, #0x6                   	// #6
    b93c:	str	w1, [x19]
    b940:	str	w0, [x19, #312]
    b944:	b	b694 <lzma_index_hash_decode@@XZ_5.0+0xe4>
    b948:	ldp	x19, x20, [sp, #16]
    b94c:	ldp	x25, x26, [sp, #64]
    b950:	ldp	x27, x28, [sp, #80]
    b954:	b	b6e4 <lzma_index_hash_decode@@XZ_5.0+0x134>

000000000000b958 <lzma_stream_buffer_decode@@XZ_5.0>:
    b958:	sub	sp, sp, #0xc0
    b95c:	stp	x29, x30, [sp, #16]
    b960:	add	x29, sp, #0x10
    b964:	stp	x23, x24, [sp, #64]
    b968:	cbz	x4, bad8 <lzma_stream_buffer_decode@@XZ_5.0+0x180>
    b96c:	stp	x19, x20, [sp, #32]
    b970:	mov	x24, x6
    b974:	mov	x19, x4
    b978:	stp	x21, x22, [sp, #48]
    b97c:	mov	x20, x7
    b980:	mov	x22, x3
    b984:	stp	x25, x26, [sp, #80]
    b988:	mov	x21, x5
    b98c:	mov	x26, x0
    b990:	mov	x25, x2
    b994:	ldr	x0, [x4]
    b998:	cbz	x3, bac8 <lzma_stream_buffer_decode@@XZ_5.0+0x170>
    b99c:	cmp	x20, #0x0
    b9a0:	mov	w23, #0xb                   	// #11
    b9a4:	ccmp	x21, x0, #0x0, ne  // ne = any
    b9a8:	b.cc	baa8 <lzma_stream_buffer_decode@@XZ_5.0+0x150>  // b.lo, b.ul, b.last
    b9ac:	ldr	x0, [x20]
    b9b0:	ldr	x2, [sp, #192]
    b9b4:	cmp	x2, x0
    b9b8:	cbz	x24, baa4 <lzma_stream_buffer_decode@@XZ_5.0+0x14c>
    b9bc:	b.cc	baa8 <lzma_stream_buffer_decode@@XZ_5.0+0x150>  // b.lo, b.ul, b.last
    b9c0:	mov	w23, #0xb                   	// #11
    b9c4:	tbnz	w1, #2, baa8 <lzma_stream_buffer_decode@@XZ_5.0+0x150>
    b9c8:	ldr	x2, [x26]
    b9cc:	mov	x4, #0xffffffffffffffff    	// #-1
    b9d0:	str	x27, [sp, #96]
    b9d4:	add	x27, sp, #0x78
    b9d8:	mov	w3, w1
    b9dc:	mov	x0, x27
    b9e0:	mov	x1, x25
    b9e4:	stp	xzr, x4, [sp, #120]
    b9e8:	stp	xzr, xzr, [sp, #136]
    b9ec:	stp	xzr, xzr, [sp, #152]
    b9f0:	stp	xzr, xzr, [sp, #168]
    b9f4:	str	xzr, [sp, #184]
    b9f8:	bl	bb88 <lzma_stream_buffer_decode@@XZ_5.0+0x230>
    b9fc:	mov	w23, w0
    ba00:	cbnz	w0, ba74 <lzma_stream_buffer_decode@@XZ_5.0+0x11c>
    ba04:	ldr	x0, [sp, #120]
    ba08:	mov	w1, #0x3                   	// #3
    ba0c:	ldr	x8, [sp, #144]
    ba10:	str	w1, [sp]
    ba14:	ldr	x7, [sp, #192]
    ba18:	mov	x5, x24
    ba1c:	mov	x2, x22
    ba20:	mov	x6, x20
    ba24:	mov	x4, x21
    ba28:	mov	x3, x19
    ba2c:	mov	x1, x25
    ba30:	ldr	x24, [x19]
    ba34:	ldr	x22, [x20]
    ba38:	blr	x8
    ba3c:	cmp	w0, #0x1
    ba40:	b.eq	ba74 <lzma_stream_buffer_decode@@XZ_5.0+0x11c>  // b.none
    ba44:	str	x24, [x19]
    ba48:	str	x22, [x20]
    ba4c:	cbz	w0, baf0 <lzma_stream_buffer_decode@@XZ_5.0+0x198>
    ba50:	mov	w23, w0
    ba54:	cmp	w0, #0x6
    ba58:	b.ne	ba74 <lzma_stream_buffer_decode@@XZ_5.0+0x11c>  // b.any
    ba5c:	ldr	x0, [sp, #120]
    ba60:	mov	x1, x26
    ba64:	ldr	x4, [sp, #176]
    ba68:	add	x2, sp, #0x70
    ba6c:	mov	x3, #0x0                   	// #0
    ba70:	blr	x4
    ba74:	mov	x1, x25
    ba78:	mov	x0, x27
    ba7c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    ba80:	mov	w0, w23
    ba84:	ldp	x29, x30, [sp, #16]
    ba88:	ldp	x19, x20, [sp, #32]
    ba8c:	ldp	x21, x22, [sp, #48]
    ba90:	ldp	x23, x24, [sp, #64]
    ba94:	ldp	x25, x26, [sp, #80]
    ba98:	ldr	x27, [sp, #96]
    ba9c:	add	sp, sp, #0xc0
    baa0:	ret
    baa4:	b.eq	b9c0 <lzma_stream_buffer_decode@@XZ_5.0+0x68>  // b.none
    baa8:	mov	w0, w23
    baac:	ldp	x29, x30, [sp, #16]
    bab0:	ldp	x19, x20, [sp, #32]
    bab4:	ldp	x21, x22, [sp, #48]
    bab8:	ldp	x23, x24, [sp, #64]
    babc:	ldp	x25, x26, [sp, #80]
    bac0:	add	sp, sp, #0xc0
    bac4:	ret
    bac8:	cmp	x5, x0
    bacc:	mov	w23, #0xb                   	// #11
    bad0:	b.eq	b99c <lzma_stream_buffer_decode@@XZ_5.0+0x44>  // b.none
    bad4:	b	baa8 <lzma_stream_buffer_decode@@XZ_5.0+0x150>
    bad8:	mov	w23, #0xb                   	// #11
    badc:	mov	w0, w23
    bae0:	ldp	x29, x30, [sp, #16]
    bae4:	ldp	x23, x24, [sp, #64]
    bae8:	add	sp, sp, #0xc0
    baec:	ret
    baf0:	ldr	x0, [x19]
    baf4:	cmp	x0, x21
    baf8:	cset	w23, ne  // ne = any
    bafc:	add	w23, w23, #0x9
    bb00:	b	ba74 <lzma_stream_buffer_decode@@XZ_5.0+0x11c>
    bb04:	nop
    bb08:	ldr	w0, [x0, #304]
    bb0c:	ret
    bb10:	mov	x4, x0
    bb14:	ldr	x0, [x0, #360]
    bb18:	str	x0, [x1]
    bb1c:	ldr	x0, [x4, #352]
    bb20:	str	x0, [x2]
    bb24:	mov	w0, #0x0                   	// #0
    bb28:	cbz	x3, bb44 <lzma_stream_buffer_decode@@XZ_5.0+0x1ec>
    bb2c:	ldr	x1, [x4, #360]
    bb30:	mov	w0, #0x6                   	// #6
    bb34:	cmp	x1, x3
    bb38:	b.hi	bb44 <lzma_stream_buffer_decode@@XZ_5.0+0x1ec>  // b.pmore
    bb3c:	mov	w0, #0x0                   	// #0
    bb40:	str	x3, [x4, #352]
    bb44:	ret
    bb48:	stp	x29, x30, [sp, #-32]!
    bb4c:	mov	x29, sp
    bb50:	stp	x19, x20, [sp, #16]
    bb54:	mov	x19, x0
    bb58:	mov	x20, x1
    bb5c:	add	x0, x0, #0x8
    bb60:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    bb64:	ldr	x0, [x19, #344]
    bb68:	mov	x1, x20
    bb6c:	bl	3310 <lzma_index_hash_end@plt>
    bb70:	mov	x1, x20
    bb74:	mov	x0, x19
    bb78:	ldp	x19, x20, [sp, #16]
    bb7c:	ldp	x29, x30, [sp], #32
    bb80:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    bb84:	nop
    bb88:	stp	x29, x30, [sp, #-64]!
    bb8c:	mov	x29, sp
    bb90:	stp	x21, x22, [sp, #32]
    bb94:	mov	x22, x2
    bb98:	mov	x21, x0
    bb9c:	ldr	x2, [x0, #16]
    bba0:	stp	x19, x20, [sp, #16]
    bba4:	adrp	x19, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    bba8:	stp	x23, x24, [sp, #48]
    bbac:	add	x19, x19, #0xb88
    bbb0:	mov	w20, w3
    bbb4:	mov	x23, x1
    bbb8:	cmp	x2, x19
    bbbc:	b.eq	bbc4 <lzma_stream_buffer_decode@@XZ_5.0+0x26c>  // b.none
    bbc0:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    bbc4:	str	x19, [x21, #16]
    bbc8:	ands	w24, w20, #0xffffffe0
    bbcc:	b.ne	bcb4 <lzma_stream_buffer_decode@@XZ_5.0+0x35c>  // b.any
    bbd0:	ldr	x19, [x21]
    bbd4:	cbz	x19, bc4c <lzma_stream_buffer_decode@@XZ_5.0+0x2f4>
    bbd8:	ldr	x0, [x19, #344]
    bbdc:	and	w6, w20, #0x1
    bbe0:	ubfx	x5, x20, #1, #1
    bbe4:	ubfx	x4, x20, #2, #1
    bbe8:	ubfx	x3, x20, #4, #1
    bbec:	cmp	x22, #0x0
    bbf0:	mov	x2, #0x1                   	// #1
    bbf4:	mov	x1, #0x8000                	// #32768
    bbf8:	csel	x22, x22, x2, ne  // ne = any
    bbfc:	ubfx	x20, x20, #3, #1
    bc00:	stp	x22, x1, [x19, #352]
    bc04:	mov	x1, x23
    bc08:	strb	w6, [x19, #368]
    bc0c:	strb	w5, [x19, #369]
    bc10:	strb	w4, [x19, #370]
    bc14:	strb	w3, [x19, #371]
    bc18:	strb	w20, [x19, #372]
    bc1c:	strb	w2, [x19, #373]
    bc20:	bl	3280 <lzma_index_hash_init@plt>
    bc24:	str	x0, [x19, #344]
    bc28:	cbz	x0, bcd0 <lzma_stream_buffer_decode@@XZ_5.0+0x378>
    bc2c:	str	wzr, [x19]
    bc30:	str	xzr, [x19, #376]
    bc34:	mov	w0, w24
    bc38:	ldp	x19, x20, [sp, #16]
    bc3c:	ldp	x21, x22, [sp, #32]
    bc40:	ldp	x23, x24, [sp, #48]
    bc44:	ldp	x29, x30, [sp], #64
    bc48:	ret
    bc4c:	mov	x1, x23
    bc50:	mov	x0, #0x580                 	// #1408
    bc54:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    bc58:	mov	x1, x0
    bc5c:	cbz	x0, bcd0 <lzma_stream_buffer_decode@@XZ_5.0+0x378>
    bc60:	mov	x19, x0
    bc64:	adrp	x5, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    bc68:	adrp	x4, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    bc6c:	add	x5, x5, #0xcd8
    bc70:	add	x4, x4, #0xb48
    bc74:	adrp	x3, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    bc78:	adrp	x2, b000 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    bc7c:	add	x3, x3, #0xb08
    bc80:	add	x2, x2, #0xb10
    bc84:	mov	x6, #0xffffffffffffffff    	// #-1
    bc88:	mov	x0, #0x0                   	// #0
    bc8c:	str	x1, [x21]
    bc90:	stp	xzr, x6, [x1, #8]
    bc94:	stp	xzr, xzr, [x1, #24]
    bc98:	stp	x5, x4, [x21, #24]
    bc9c:	stp	xzr, xzr, [x1, #40]
    bca0:	stp	x3, x2, [x21, #48]
    bca4:	stp	xzr, xzr, [x1, #56]
    bca8:	str	xzr, [x1, #72]
    bcac:	str	xzr, [x1, #344]
    bcb0:	b	bbdc <lzma_stream_buffer_decode@@XZ_5.0+0x284>
    bcb4:	mov	w24, #0x8                   	// #8
    bcb8:	mov	w0, w24
    bcbc:	ldp	x19, x20, [sp, #16]
    bcc0:	ldp	x21, x22, [sp, #32]
    bcc4:	ldp	x23, x24, [sp, #48]
    bcc8:	ldp	x29, x30, [sp], #64
    bccc:	ret
    bcd0:	mov	w24, #0x5                   	// #5
    bcd4:	b	bc34 <lzma_stream_buffer_decode@@XZ_5.0+0x2dc>
    bcd8:	sub	sp, sp, #0xd0
    bcdc:	stp	x29, x30, [sp, #16]
    bce0:	add	x29, sp, #0x10
    bce4:	stp	x19, x20, [sp, #32]
    bce8:	mov	x19, x0
    bcec:	ldr	w0, [x0]
    bcf0:	stp	x21, x22, [sp, #48]
    bcf4:	mov	x20, x2
    bcf8:	mov	x21, x1
    bcfc:	stp	x23, x24, [sp, #64]
    bd00:	mov	x22, x4
    bd04:	mov	x23, x6
    bd08:	stp	x25, x26, [sp, #80]
    bd0c:	mov	x24, x7
    bd10:	mov	x25, x3
    bd14:	str	x5, [sp, #120]
    bd18:	cmp	w0, #0x3
    bd1c:	b.eq	bfb0 <lzma_stream_buffer_decode@@XZ_5.0+0x658>  // b.none
    bd20:	b.ls	bd90 <lzma_stream_buffer_decode@@XZ_5.0+0x438>  // b.plast
    bd24:	cmp	w0, #0x4
    bd28:	b.eq	be50 <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>  // b.none
    bd2c:	cmp	w0, #0x5
    bd30:	b.ne	bf8c <lzma_stream_buffer_decode@@XZ_5.0+0x634>  // b.any
    bd34:	ldr	x8, [x25]
    bd38:	cmp	x22, x8
    bd3c:	b.ls	bfe0 <lzma_stream_buffer_decode@@XZ_5.0+0x688>  // b.plast
    bd40:	ldr	x0, [x19, #376]
    bd44:	b	bd60 <lzma_stream_buffer_decode@@XZ_5.0+0x408>
    bd48:	add	x8, x8, #0x1
    bd4c:	and	x0, x1, #0x3
    bd50:	str	x8, [x25]
    bd54:	cmp	x8, x22
    bd58:	str	x0, [x19, #376]
    bd5c:	b.eq	bfe0 <lzma_stream_buffer_decode@@XZ_5.0+0x688>  // b.none
    bd60:	ldrb	w9, [x20, x8]
    bd64:	add	x1, x0, #0x1
    bd68:	cbz	w9, bd48 <lzma_stream_buffer_decode@@XZ_5.0+0x3f0>
    bd6c:	cbnz	x0, c13c <lzma_stream_buffer_decode@@XZ_5.0+0x7e4>
    bd70:	ldr	x0, [x19, #344]
    bd74:	mov	x1, x21
    bd78:	bl	3280 <lzma_index_hash_init@plt>
    bd7c:	str	x0, [x19, #344]
    bd80:	cbz	x0, c100 <lzma_stream_buffer_decode@@XZ_5.0+0x7a8>
    bd84:	str	wzr, [x19]
    bd88:	str	xzr, [x19, #376]
    bd8c:	b	bee0 <lzma_stream_buffer_decode@@XZ_5.0+0x588>
    bd90:	cmp	w0, #0x1
    bd94:	b.eq	be04 <lzma_stream_buffer_decode@@XZ_5.0+0x4ac>  // b.none
    bd98:	cmp	w0, #0x2
    bd9c:	b.ne	bedc <lzma_stream_buffer_decode@@XZ_5.0+0x584>  // b.any
    bda0:	ldr	w1, [sp, #208]
    bda4:	mov	x7, x24
    bda8:	ldr	x0, [x19, #8]
    bdac:	str	w1, [sp]
    bdb0:	ldr	x5, [sp, #120]
    bdb4:	mov	x6, x23
    bdb8:	ldr	x8, [x19, #32]
    bdbc:	mov	x4, x22
    bdc0:	mov	x3, x25
    bdc4:	mov	x2, x20
    bdc8:	mov	x1, x21
    bdcc:	blr	x8
    bdd0:	mov	w26, w0
    bdd4:	cmp	w0, #0x1
    bdd8:	b.ne	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>  // b.any
    bddc:	add	x0, x19, #0x50
    bde0:	bl	3190 <lzma_block_unpadded_size@plt>
    bde4:	mov	x1, x0
    bde8:	ldr	x2, [x19, #104]
    bdec:	ldr	x0, [x19, #344]
    bdf0:	bl	31b0 <lzma_index_hash_append@plt>
    bdf4:	mov	w26, w0
    bdf8:	cbnz	w0, bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    bdfc:	mov	w0, #0x1                   	// #1
    be00:	str	w0, [x19]
    be04:	ldr	x0, [x25]
    be08:	cmp	x0, x22
    be0c:	b.cs	bfbc <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.hs, b.nlast
    be10:	ldr	x1, [x19, #376]
    be14:	cbnz	x1, c0d8 <lzma_stream_buffer_decode@@XZ_5.0+0x780>
    be18:	ldrb	w0, [x20, x0]
    be1c:	cbnz	w0, c000 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    be20:	mov	w0, #0x3                   	// #3
    be24:	str	w0, [x19]
    be28:	ldr	x0, [x19, #344]
    be2c:	mov	x3, x22
    be30:	mov	x2, x25
    be34:	mov	x1, x20
    be38:	bl	3130 <lzma_index_hash_decode@plt>
    be3c:	mov	w26, w0
    be40:	cmp	w0, #0x1
    be44:	b.ne	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>  // b.any
    be48:	mov	w0, #0x4                   	// #4
    be4c:	str	w0, [x19]
    be50:	add	x26, x19, #0x180
    be54:	add	x4, x19, #0x178
    be58:	mov	x3, x26
    be5c:	mov	x2, x22
    be60:	mov	x1, x25
    be64:	mov	x0, x20
    be68:	mov	x5, #0xc                   	// #12
    be6c:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    be70:	ldr	x0, [x19, #376]
    be74:	cmp	x0, #0xb
    be78:	b.ls	bfbc <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.plast
    be7c:	stp	x27, x28, [sp, #96]
    be80:	add	x27, sp, #0x80
    be84:	mov	x1, x26
    be88:	str	xzr, [x19, #376]
    be8c:	mov	x0, x27
    be90:	bl	3430 <lzma_stream_footer_decode@plt>
    be94:	mov	w26, w0
    be98:	cbnz	w0, c11c <lzma_stream_buffer_decode@@XZ_5.0+0x7c4>
    be9c:	ldr	x0, [x19, #344]
    bea0:	bl	34d0 <lzma_index_hash_size@plt>
    bea4:	ldr	x1, [sp, #136]
    bea8:	cmp	x0, x1
    beac:	b.ne	c110 <lzma_stream_buffer_decode@@XZ_5.0+0x7b8>  // b.any
    beb0:	mov	x1, x27
    beb4:	add	x0, x19, #0x120
    beb8:	bl	3110 <lzma_stream_flags_compare@plt>
    bebc:	mov	w26, w0
    bec0:	cbnz	w0, c108 <lzma_stream_buffer_decode@@XZ_5.0+0x7b0>
    bec4:	ldrb	w0, [x19, #372]
    bec8:	cbz	w0, c130 <lzma_stream_buffer_decode@@XZ_5.0+0x7d8>
    becc:	mov	w0, #0x5                   	// #5
    bed0:	ldp	x27, x28, [sp, #96]
    bed4:	str	w0, [x19]
    bed8:	b	bd34 <lzma_stream_buffer_decode@@XZ_5.0+0x3dc>
    bedc:	cbnz	w0, bf8c <lzma_stream_buffer_decode@@XZ_5.0+0x634>
    bee0:	add	x26, x19, #0x180
    bee4:	add	x4, x19, #0x178
    bee8:	mov	x3, x26
    beec:	mov	x2, x22
    bef0:	mov	x1, x25
    bef4:	mov	x0, x20
    bef8:	mov	x5, #0xc                   	// #12
    befc:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    bf00:	ldr	x0, [x19, #376]
    bf04:	cmp	x0, #0xb
    bf08:	b.ls	bfbc <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.plast
    bf0c:	str	xzr, [x19, #376]
    bf10:	mov	x1, x26
    bf14:	add	x0, x19, #0x120
    bf18:	bl	34f0 <lzma_stream_header_decode@plt>
    bf1c:	mov	w26, w0
    bf20:	cbnz	w0, c14c <lzma_stream_buffer_decode@@XZ_5.0+0x7f4>
    bf24:	ldr	w0, [x19, #304]
    bf28:	mov	w1, #0x1                   	// #1
    bf2c:	str	w1, [x19]
    bf30:	cmp	w0, #0x0
    bf34:	ldrb	w1, [x19, #368]
    bf38:	str	w0, [x19, #88]
    bf3c:	cset	w2, eq  // eq = none
    bf40:	strb	wzr, [x19, #373]
    bf44:	tst	w2, w1
    bf48:	b.ne	c160 <lzma_stream_buffer_decode@@XZ_5.0+0x808>  // b.any
    bf4c:	ldrb	w1, [x19, #369]
    bf50:	cbz	w1, bf60 <lzma_stream_buffer_decode@@XZ_5.0+0x608>
    bf54:	bl	30e0 <lzma_check_is_supported@plt>
    bf58:	tst	w0, #0xff
    bf5c:	b.eq	c0f8 <lzma_stream_buffer_decode@@XZ_5.0+0x7a0>  // b.none
    bf60:	ldrb	w0, [x19, #370]
    bf64:	cbz	w0, be04 <lzma_stream_buffer_decode@@XZ_5.0+0x4ac>
    bf68:	mov	w26, #0x4                   	// #4
    bf6c:	mov	w0, w26
    bf70:	ldp	x29, x30, [sp, #16]
    bf74:	ldp	x19, x20, [sp, #32]
    bf78:	ldp	x21, x22, [sp, #48]
    bf7c:	ldp	x23, x24, [sp, #64]
    bf80:	ldp	x25, x26, [sp, #80]
    bf84:	add	sp, sp, #0xd0
    bf88:	ret
    bf8c:	mov	w26, #0xb                   	// #11
    bf90:	mov	w0, w26
    bf94:	ldp	x29, x30, [sp, #16]
    bf98:	ldp	x19, x20, [sp, #32]
    bf9c:	ldp	x21, x22, [sp, #48]
    bfa0:	ldp	x23, x24, [sp, #64]
    bfa4:	ldp	x25, x26, [sp, #80]
    bfa8:	add	sp, sp, #0xd0
    bfac:	ret
    bfb0:	ldr	x0, [x3]
    bfb4:	cmp	x0, x4
    bfb8:	b.cc	be28 <lzma_stream_buffer_decode@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    bfbc:	mov	w26, #0x0                   	// #0
    bfc0:	mov	w0, w26
    bfc4:	ldp	x29, x30, [sp, #16]
    bfc8:	ldp	x19, x20, [sp, #32]
    bfcc:	ldp	x21, x22, [sp, #48]
    bfd0:	ldp	x23, x24, [sp, #64]
    bfd4:	ldp	x25, x26, [sp, #80]
    bfd8:	add	sp, sp, #0xd0
    bfdc:	ret
    bfe0:	ldr	w0, [sp, #208]
    bfe4:	cmp	w0, #0x3
    bfe8:	b.ne	bfbc <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.any
    bfec:	ldr	x0, [x19, #376]
    bff0:	mov	w26, #0x1                   	// #1
    bff4:	cbz	x0, bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    bff8:	mov	w26, #0x9                   	// #9
    bffc:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c000:	add	w0, w0, #0x1
    c004:	lsl	w5, w0, #2
    c008:	str	w5, [x19, #84]
    c00c:	add	x26, x19, #0x180
    c010:	mov	x1, x25
    c014:	mov	w5, w5
    c018:	mov	x3, x26
    c01c:	add	x4, x19, #0x178
    c020:	mov	x2, x22
    c024:	mov	x0, x20
    c028:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    c02c:	ldr	x1, [x19, #376]
    c030:	ldr	w0, [x19, #84]
    c034:	cmp	x1, x0
    c038:	b.cc	bfbc <lzma_stream_buffer_decode@@XZ_5.0+0x664>  // b.lo, b.ul, b.last
    c03c:	stp	x27, x28, [sp, #96]
    c040:	mov	w0, #0x1                   	// #1
    c044:	add	x27, sp, #0x80
    c048:	str	w0, [x19, #80]
    c04c:	add	x28, x19, #0x50
    c050:	str	x27, [x19, #112]
    c054:	mov	x2, x26
    c058:	str	xzr, [x19, #376]
    c05c:	mov	x1, x21
    c060:	mov	x0, x28
    c064:	bl	3340 <lzma_block_header_decode@plt>
    c068:	mov	w26, w0
    c06c:	cbnz	w0, c108 <lzma_stream_buffer_decode@@XZ_5.0+0x7b0>
    c070:	ldrb	w1, [x19, #371]
    c074:	mov	x0, x27
    c078:	strb	w1, [x19, #280]
    c07c:	mov	w26, #0x8                   	// #8
    c080:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    c084:	cmn	x0, #0x1
    c088:	b.eq	c0a0 <lzma_stream_buffer_decode@@XZ_5.0+0x748>  // b.none
    c08c:	ldr	x1, [x19, #352]
    c090:	str	x0, [x19, #360]
    c094:	mov	w26, #0x6                   	// #6
    c098:	cmp	x1, x0
    c09c:	b.cs	c0e0 <lzma_stream_buffer_decode@@XZ_5.0+0x788>  // b.hs, b.nlast
    c0a0:	mov	x28, #0x0                   	// #0
    c0a4:	add	x0, x27, x28
    c0a8:	mov	x1, x21
    c0ac:	add	x28, x28, #0x10
    c0b0:	ldr	x0, [x0, #8]
    c0b4:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    c0b8:	cmp	x28, #0x40
    c0bc:	b.ne	c0a4 <lzma_stream_buffer_decode@@XZ_5.0+0x74c>  // b.any
    c0c0:	str	xzr, [x19, #112]
    c0c4:	cbnz	w26, c108 <lzma_stream_buffer_decode@@XZ_5.0+0x7b0>
    c0c8:	mov	w0, #0x2                   	// #2
    c0cc:	ldp	x27, x28, [sp, #96]
    c0d0:	str	w0, [x19]
    c0d4:	b	bda0 <lzma_stream_buffer_decode@@XZ_5.0+0x448>
    c0d8:	ldr	w5, [x19, #84]
    c0dc:	b	c00c <lzma_stream_buffer_decode@@XZ_5.0+0x6b4>
    c0e0:	mov	x2, x28
    c0e4:	mov	x1, x21
    c0e8:	add	x0, x19, #0x8
    c0ec:	bl	a3e0 <lzma_block_buffer_decode@@XZ_5.0+0x458>
    c0f0:	mov	w26, w0
    c0f4:	b	c0a0 <lzma_stream_buffer_decode@@XZ_5.0+0x748>
    c0f8:	mov	w26, #0x3                   	// #3
    c0fc:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c100:	mov	w26, #0x5                   	// #5
    c104:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c108:	ldp	x27, x28, [sp, #96]
    c10c:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c110:	mov	w26, #0x9                   	// #9
    c114:	ldp	x27, x28, [sp, #96]
    c118:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c11c:	cmp	w0, #0x7
    c120:	mov	w0, #0x9                   	// #9
    c124:	csel	w26, w26, w0, ne  // ne = any
    c128:	ldp	x27, x28, [sp, #96]
    c12c:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c130:	mov	w26, #0x1                   	// #1
    c134:	ldp	x27, x28, [sp, #96]
    c138:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c13c:	add	x8, x8, #0x1
    c140:	mov	w26, #0x9                   	// #9
    c144:	str	x8, [x25]
    c148:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c14c:	cmp	w0, #0x7
    c150:	b.ne	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>  // b.any
    c154:	ldrb	w0, [x19, #373]
    c158:	cbnz	w0, bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>
    c15c:	b	bff8 <lzma_stream_buffer_decode@@XZ_5.0+0x6a0>
    c160:	mov	w26, #0x2                   	// #2
    c164:	b	bf6c <lzma_stream_buffer_decode@@XZ_5.0+0x614>

000000000000c168 <lzma_stream_decoder@@XZ_5.0>:
    c168:	stp	x29, x30, [sp, #-48]!
    c16c:	mov	x29, sp
    c170:	stp	x19, x20, [sp, #16]
    c174:	mov	x20, x0
    c178:	stp	x21, x22, [sp, #32]
    c17c:	mov	x21, x1
    c180:	mov	w22, w2
    c184:	bl	3960 <lzma_version_string@@XZ_5.0+0x278>
    c188:	mov	w19, w0
    c18c:	cbz	w0, c1a4 <lzma_stream_decoder@@XZ_5.0+0x3c>
    c190:	mov	w0, w19
    c194:	ldp	x19, x20, [sp, #16]
    c198:	ldp	x21, x22, [sp, #32]
    c19c:	ldp	x29, x30, [sp], #48
    c1a0:	ret
    c1a4:	ldp	x1, x0, [x20, #48]
    c1a8:	mov	w3, w22
    c1ac:	mov	x2, x21
    c1b0:	bl	bb88 <lzma_stream_buffer_decode@@XZ_5.0+0x230>
    c1b4:	mov	w19, w0
    c1b8:	cbnz	w0, c1e0 <lzma_stream_decoder@@XZ_5.0+0x78>
    c1bc:	ldr	x0, [x20, #56]
    c1c0:	mov	w1, #0x1                   	// #1
    c1c4:	ldp	x21, x22, [sp, #32]
    c1c8:	strb	w1, [x0, #88]
    c1cc:	strb	w1, [x0, #91]
    c1d0:	mov	w0, w19
    c1d4:	ldp	x19, x20, [sp, #16]
    c1d8:	ldp	x29, x30, [sp], #48
    c1dc:	ret
    c1e0:	mov	x0, x20
    c1e4:	bl	3320 <lzma_end@plt>
    c1e8:	b	c190 <lzma_stream_decoder@@XZ_5.0+0x28>
    c1ec:	nop

000000000000c1f0 <lzma_stream_header_decode@@XZ_5.0>:
    c1f0:	stp	x29, x30, [sp, #-32]!
    c1f4:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c1f8:	mov	x29, sp
    c1fc:	stp	x19, x20, [sp, #16]
    c200:	mov	x19, x1
    c204:	mov	x20, x0
    c208:	ldr	x1, [x2, #3936]
    c20c:	ldr	w2, [x19]
    c210:	ldr	w0, [x1]
    c214:	cmp	w2, w0
    c218:	b.eq	c22c <lzma_stream_header_decode@@XZ_5.0+0x3c>  // b.none
    c21c:	mov	w0, #0x7                   	// #7
    c220:	ldp	x19, x20, [sp, #16]
    c224:	ldp	x29, x30, [sp], #32
    c228:	ret
    c22c:	ldrh	w0, [x1, #4]
    c230:	ldrh	w1, [x19, #4]
    c234:	cmp	w1, w0
    c238:	b.ne	c21c <lzma_stream_header_decode@@XZ_5.0+0x2c>  // b.any
    c23c:	mov	w2, #0x0                   	// #0
    c240:	mov	x1, #0x2                   	// #2
    c244:	add	x0, x19, #0x6
    c248:	bl	31c0 <lzma_crc32@plt>
    c24c:	ldr	w1, [x19, #8]
    c250:	mov	w2, w0
    c254:	mov	w0, #0x9                   	// #9
    c258:	cmp	w2, w1
    c25c:	b.ne	c220 <lzma_stream_header_decode@@XZ_5.0+0x30>  // b.any
    c260:	ldrb	w1, [x19, #6]
    c264:	mov	w0, #0x8                   	// #8
    c268:	cbnz	w1, c220 <lzma_stream_header_decode@@XZ_5.0+0x30>
    c26c:	ldrb	w1, [x19, #7]
    c270:	tst	w1, #0xf0
    c274:	b.ne	c220 <lzma_stream_header_decode@@XZ_5.0+0x30>  // b.any
    c278:	str	wzr, [x20]
    c27c:	mov	x2, #0xffffffffffffffff    	// #-1
    c280:	mov	w0, #0x0                   	// #0
    c284:	ldrb	w1, [x19, #7]
    c288:	str	x2, [x20, #8]
    c28c:	and	w1, w1, #0xf
    c290:	str	w1, [x20, #16]
    c294:	ldp	x19, x20, [sp, #16]
    c298:	ldp	x29, x30, [sp], #32
    c29c:	ret

000000000000c2a0 <lzma_stream_footer_decode@@XZ_5.0>:
    c2a0:	stp	x29, x30, [sp, #-32]!
    c2a4:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c2a8:	mov	x29, sp
    c2ac:	ldr	x2, [x2, #3976]
    c2b0:	stp	x19, x20, [sp, #16]
    c2b4:	mov	x19, x1
    c2b8:	mov	x20, x0
    c2bc:	ldrh	w1, [x1, #10]
    c2c0:	ldrh	w0, [x2]
    c2c4:	cmp	w1, w0
    c2c8:	b.ne	c338 <lzma_stream_footer_decode@@XZ_5.0+0x98>  // b.any
    c2cc:	mov	w2, #0x0                   	// #0
    c2d0:	mov	x1, #0x6                   	// #6
    c2d4:	add	x0, x19, #0x4
    c2d8:	bl	31c0 <lzma_crc32@plt>
    c2dc:	ldr	w1, [x19]
    c2e0:	mov	w2, w0
    c2e4:	mov	w0, #0x9                   	// #9
    c2e8:	cmp	w2, w1
    c2ec:	b.ne	c32c <lzma_stream_footer_decode@@XZ_5.0+0x8c>  // b.any
    c2f0:	ldrb	w1, [x19, #8]
    c2f4:	mov	w0, #0x8                   	// #8
    c2f8:	cbnz	w1, c32c <lzma_stream_footer_decode@@XZ_5.0+0x8c>
    c2fc:	ldrb	w1, [x19, #9]
    c300:	tst	w1, #0xf0
    c304:	b.ne	c32c <lzma_stream_footer_decode@@XZ_5.0+0x8c>  // b.any
    c308:	str	wzr, [x20]
    c30c:	mov	w0, #0x0                   	// #0
    c310:	ldrb	w1, [x19, #9]
    c314:	and	w1, w1, #0xf
    c318:	str	w1, [x20, #16]
    c31c:	ldr	w1, [x19, #4]
    c320:	add	x1, x1, #0x1
    c324:	lsl	x1, x1, #2
    c328:	str	x1, [x20, #8]
    c32c:	ldp	x19, x20, [sp, #16]
    c330:	ldp	x29, x30, [sp], #32
    c334:	ret
    c338:	mov	w0, #0x7                   	// #7
    c33c:	ldp	x19, x20, [sp, #16]
    c340:	ldp	x29, x30, [sp], #32
    c344:	ret

000000000000c348 <lzma_vli_decode@@XZ_5.0>:
    c348:	sub	sp, sp, #0x10
    c34c:	mov	x11, x0
    c350:	str	xzr, [sp, #8]
    c354:	cbz	x1, c408 <lzma_vli_decode@@XZ_5.0+0xc0>
    c358:	ldr	x7, [x1]
    c35c:	cbnz	x7, c3e0 <lzma_vli_decode@@XZ_5.0+0x98>
    c360:	str	xzr, [x0]
    c364:	ldr	x5, [x3]
    c368:	mov	w0, #0xa                   	// #10
    c36c:	cmp	x5, x4
    c370:	b.cs	c3d8 <lzma_vli_decode@@XZ_5.0+0x90>  // b.hs, b.nlast
    c374:	ldr	x10, [x11]
    c378:	lsl	w8, w7, #3
    c37c:	sub	w8, w8, w7
    c380:	b	c398 <lzma_vli_decode@@XZ_5.0+0x50>
    c384:	cmp	x7, #0x9
    c388:	b.eq	c428 <lzma_vli_decode@@XZ_5.0+0xe0>  // b.none
    c38c:	cmp	x5, x4
    c390:	add	w8, w8, #0x7
    c394:	b.cs	c440 <lzma_vli_decode@@XZ_5.0+0xf8>  // b.hs, b.nlast
    c398:	ldrb	w9, [x2, x5]
    c39c:	add	x7, x7, #0x1
    c3a0:	add	x5, x5, #0x1
    c3a4:	and	x6, x9, #0x7f
    c3a8:	lsl	x6, x6, x8
    c3ac:	add	x10, x10, x6
    c3b0:	tbnz	w9, #7, c384 <lzma_vli_decode@@XZ_5.0+0x3c>
    c3b4:	str	x7, [x1]
    c3b8:	cmp	w9, #0x0
    c3bc:	str	x5, [x3]
    c3c0:	ccmp	x7, #0x1, #0x0, eq  // eq = none
    c3c4:	str	x10, [x11]
    c3c8:	b.hi	c45c <lzma_vli_decode@@XZ_5.0+0x114>  // b.pmore
    c3cc:	add	x0, sp, #0x8
    c3d0:	cmp	x1, x0
    c3d4:	cset	w0, ne  // ne = any
    c3d8:	add	sp, sp, #0x10
    c3dc:	ret
    c3e0:	cmp	x7, #0x8
    c3e4:	mov	w0, #0xb                   	// #11
    c3e8:	b.hi	c3d8 <lzma_vli_decode@@XZ_5.0+0x90>  // b.pmore
    c3ec:	ldr	x5, [x11]
    c3f0:	lsl	w6, w7, #3
    c3f4:	sub	w6, w6, w7
    c3f8:	lsr	x5, x5, x6
    c3fc:	cbz	x5, c364 <lzma_vli_decode@@XZ_5.0+0x1c>
    c400:	add	sp, sp, #0x10
    c404:	ret
    c408:	ldr	x5, [x3]
    c40c:	str	xzr, [x0]
    c410:	cmp	x5, x4
    c414:	b.cs	c45c <lzma_vli_decode@@XZ_5.0+0x114>  // b.hs, b.nlast
    c418:	add	x1, sp, #0x8
    c41c:	mov	x10, #0x0                   	// #0
    c420:	mov	x7, #0x0                   	// #0
    c424:	b	c378 <lzma_vli_decode@@XZ_5.0+0x30>
    c428:	str	x7, [x1]
    c42c:	mov	w0, w7
    c430:	str	x5, [x3]
    c434:	str	x10, [x11]
    c438:	add	sp, sp, #0x10
    c43c:	ret
    c440:	str	x7, [x1]
    c444:	add	x0, sp, #0x8
    c448:	str	x5, [x3]
    c44c:	cmp	x1, x0
    c450:	str	x10, [x11]
    c454:	mov	w0, #0x0                   	// #0
    c458:	b.ne	c3d8 <lzma_vli_decode@@XZ_5.0+0x90>  // b.any
    c45c:	mov	w0, #0x9                   	// #9
    c460:	add	sp, sp, #0x10
    c464:	ret

000000000000c468 <lzma_check_is_supported@@XZ_5.0>:
    c468:	cmp	w0, #0xf
    c46c:	b.hi	c480 <lzma_check_is_supported@@XZ_5.0+0x18>  // b.pmore
    c470:	adrp	x1, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    c474:	add	x1, x1, #0x8f0
    c478:	ldrb	w0, [x1, w0, uxtw]
    c47c:	ret
    c480:	mov	w0, #0x0                   	// #0
    c484:	ret

000000000000c488 <lzma_check_size@@XZ_5.0>:
    c488:	cmp	w0, #0xf
    c48c:	b.hi	c4a4 <lzma_check_size@@XZ_5.0+0x1c>  // b.pmore
    c490:	adrp	x1, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
    c494:	add	x1, x1, #0x8f0
    c498:	add	x0, x1, w0, uxtw
    c49c:	ldrb	w0, [x0, #16]
    c4a0:	ret
    c4a4:	mov	w0, #0xffffffff            	// #-1
    c4a8:	ret
    c4ac:	nop
    c4b0:	cmp	w1, #0x4
    c4b4:	b.eq	c4d8 <lzma_check_size@@XZ_5.0+0x50>  // b.none
    c4b8:	cmp	w1, #0xa
    c4bc:	b.eq	c4d4 <lzma_check_size@@XZ_5.0+0x4c>  // b.none
    c4c0:	cmp	w1, #0x1
    c4c4:	b.eq	c4cc <lzma_check_size@@XZ_5.0+0x44>  // b.none
    c4c8:	ret
    c4cc:	str	wzr, [x0, #64]
    c4d0:	ret
    c4d4:	b	d798 <lzma_crc64@@XZ_5.0+0x10c0>
    c4d8:	str	xzr, [x0, #64]
    c4dc:	ret
    c4e0:	stp	x29, x30, [sp, #-32]!
    c4e4:	mov	w4, w1
    c4e8:	cmp	w1, #0x4
    c4ec:	mov	x29, sp
    c4f0:	str	x19, [sp, #16]
    c4f4:	mov	x1, x3
    c4f8:	mov	x19, x0
    c4fc:	mov	x0, x2
    c500:	b.eq	c520 <lzma_check_size@@XZ_5.0+0x98>  // b.none
    c504:	cmp	w4, #0xa
    c508:	b.eq	c550 <lzma_check_size@@XZ_5.0+0xc8>  // b.none
    c50c:	cmp	w4, #0x1
    c510:	b.eq	c538 <lzma_check_size@@XZ_5.0+0xb0>  // b.none
    c514:	ldr	x19, [sp, #16]
    c518:	ldp	x29, x30, [sp], #32
    c51c:	ret
    c520:	ldr	x2, [x19, #64]
    c524:	bl	3290 <lzma_crc64@plt>
    c528:	str	x0, [x19, #64]
    c52c:	ldr	x19, [sp, #16]
    c530:	ldp	x29, x30, [sp], #32
    c534:	ret
    c538:	ldr	w2, [x19, #64]
    c53c:	bl	31c0 <lzma_crc32@plt>
    c540:	str	w0, [x19, #64]
    c544:	ldr	x19, [sp, #16]
    c548:	ldp	x29, x30, [sp], #32
    c54c:	ret
    c550:	mov	x2, x19
    c554:	ldr	x19, [sp, #16]
    c558:	ldp	x29, x30, [sp], #32
    c55c:	b	d7b8 <lzma_crc64@@XZ_5.0+0x10e0>
    c560:	mov	x2, x0
    c564:	cmp	w1, #0x4
    c568:	b.eq	c590 <lzma_check_size@@XZ_5.0+0x108>  // b.none
    c56c:	cmp	w1, #0xa
    c570:	b.eq	c58c <lzma_check_size@@XZ_5.0+0x104>  // b.none
    c574:	cmp	w1, #0x1
    c578:	b.eq	c580 <lzma_check_size@@XZ_5.0+0xf8>  // b.none
    c57c:	ret
    c580:	ldr	w0, [x0, #64]
    c584:	str	w0, [x2]
    c588:	ret
    c58c:	b	d858 <lzma_crc64@@XZ_5.0+0x1180>
    c590:	ldr	x0, [x0, #64]
    c594:	str	x0, [x2]
    c598:	ret
    c59c:	nop

000000000000c5a0 <lzma_crc32@@XZ_5.0>:
    c5a0:	cmp	x1, #0x8
    c5a4:	mvn	w2, w2
    c5a8:	b.ls	c698 <lzma_crc32@@XZ_5.0+0xf8>  // b.plast
    c5ac:	tst	x0, #0x7
    c5b0:	b.eq	c6cc <lzma_crc32@@XZ_5.0+0x12c>  // b.none
    c5b4:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c5b8:	add	x6, x0, x1
    c5bc:	ldr	x4, [x4, #3952]
    c5c0:	ldrb	w1, [x0], #1
    c5c4:	eor	x1, x2, x1
    c5c8:	sub	x3, x6, x0
    c5cc:	and	x1, x1, #0xff
    c5d0:	tst	x0, #0x7
    c5d4:	ldr	w5, [x4, x1, lsl #2]
    c5d8:	eor	w2, w5, w2, lsr #8
    c5dc:	b.ne	c5c0 <lzma_crc32@@XZ_5.0+0x20>  // b.any
    c5e0:	and	x10, x3, #0xfffffffffffffff8
    c5e4:	and	x1, x3, #0x7
    c5e8:	add	x10, x0, x10
    c5ec:	cmp	x10, x0
    c5f0:	b.ls	c698 <lzma_crc32@@XZ_5.0+0xf8>  // b.plast
    c5f4:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c5f8:	mov	x6, x0
    c5fc:	ldr	x4, [x4, #3952]
    c600:	ldp	w5, w3, [x6]
    c604:	add	x6, x6, #0x8
    c608:	cmp	x10, x6
    c60c:	eor	w2, w2, w5
    c610:	add	x14, x4, w3, uxtb #2
    c614:	lsr	w11, w3, #24
    c618:	lsr	w8, w2, #24
    c61c:	add	x13, x4, w2, uxtb #2
    c620:	add	x8, x8, #0x400
    c624:	ubfx	x7, x3, #8, #8
    c628:	ubfx	x3, x3, #16, #8
    c62c:	ubfx	x9, x2, #8, #8
    c630:	add	x5, x3, #0x100
    c634:	ubfx	x2, x2, #16, #8
    c638:	add	x7, x7, #0x200
    c63c:	ldr	w12, [x4, x8, lsl #2]
    c640:	ldr	w11, [x4, x11, lsl #2]
    c644:	add	x3, x2, #0x500
    c648:	ldr	w8, [x14, #3072]
    c64c:	add	x9, x9, #0x600
    c650:	ldr	w2, [x13, #7168]
    c654:	eor	w8, w8, w11
    c658:	ldr	w7, [x4, x7, lsl #2]
    c65c:	ldr	w11, [x4, x5, lsl #2]
    c660:	eor	w2, w2, w12
    c664:	ldr	w3, [x4, x3, lsl #2]
    c668:	eor	w2, w2, w8
    c66c:	ldr	w5, [x4, x9, lsl #2]
    c670:	eor	w7, w7, w11
    c674:	eor	w2, w2, w7
    c678:	eor	w3, w5, w3
    c67c:	eor	w2, w3, w2
    c680:	b.hi	c600 <lzma_crc32@@XZ_5.0+0x60>  // b.pmore
    c684:	mvn	x3, x0
    c688:	add	x3, x10, x3
    c68c:	and	x3, x3, #0xfffffffffffffff8
    c690:	add	x3, x3, #0x8
    c694:	add	x0, x0, x3
    c698:	cbz	x1, c6c4 <lzma_crc32@@XZ_5.0+0x124>
    c69c:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c6a0:	add	x3, x0, x1
    c6a4:	ldr	x4, [x4, #3952]
    c6a8:	ldrb	w1, [x0], #1
    c6ac:	eor	x1, x2, x1
    c6b0:	cmp	x0, x3
    c6b4:	and	x1, x1, #0xff
    c6b8:	ldr	w1, [x4, x1, lsl #2]
    c6bc:	eor	w2, w1, w2, lsr #8
    c6c0:	b.ne	c6a8 <lzma_crc32@@XZ_5.0+0x108>  // b.any
    c6c4:	mvn	w0, w2
    c6c8:	ret
    c6cc:	mov	x3, x1
    c6d0:	b	c5e0 <lzma_crc32@@XZ_5.0+0x40>
    c6d4:	nop

000000000000c6d8 <lzma_crc64@@XZ_5.0>:
    c6d8:	cmp	x1, #0x4
    c6dc:	mvn	x2, x2
    c6e0:	b.ls	c794 <lzma_crc64@@XZ_5.0+0xbc>  // b.plast
    c6e4:	tst	x0, #0x3
    c6e8:	b.eq	c7cc <lzma_crc64@@XZ_5.0+0xf4>  // b.none
    c6ec:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c6f0:	add	x1, x0, x1
    c6f4:	ldr	x4, [x4, #3984]
    c6f8:	and	x6, x2, #0xff
    c6fc:	ldrb	w5, [x0], #1
    c700:	eor	x5, x5, x6
    c704:	sub	x3, x1, x0
    c708:	tst	x0, #0x3
    c70c:	ldr	x5, [x4, x5, lsl #3]
    c710:	eor	x2, x5, x2, lsr #8
    c714:	b.ne	c6f8 <lzma_crc64@@XZ_5.0+0x20>  // b.any
    c718:	and	x8, x3, #0xfffffffffffffffc
    c71c:	and	x1, x3, #0x3
    c720:	add	x8, x0, x8
    c724:	cmp	x8, x0
    c728:	b.ls	c794 <lzma_crc64@@XZ_5.0+0xbc>  // b.plast
    c72c:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c730:	mov	x7, x0
    c734:	ldr	x4, [x4, #3984]
    c738:	ldr	w3, [x7], #4
    c73c:	eor	w3, w3, w2
    c740:	cmp	x8, x7
    c744:	ubfx	x5, x3, #8, #8
    c748:	ubfx	x6, x3, #16, #8
    c74c:	add	x6, x6, #0x100
    c750:	add	x5, x5, #0x200
    c754:	add	x9, x4, w3, uxtb #3
    c758:	lsr	w3, w3, #24
    c75c:	ldr	x5, [x4, x5, lsl #3]
    c760:	ldr	x10, [x4, x6, lsl #3]
    c764:	ldr	x6, [x4, x3, lsl #3]
    c768:	eor	x3, x5, x10
    c76c:	ldr	x5, [x9, #6144]
    c770:	eor	x5, x5, x6
    c774:	eor	x3, x3, x5
    c778:	eor	x2, x3, x2, lsr #32
    c77c:	b.hi	c738 <lzma_crc64@@XZ_5.0+0x60>  // b.pmore
    c780:	mvn	x3, x0
    c784:	add	x3, x8, x3
    c788:	and	x3, x3, #0xfffffffffffffffc
    c78c:	add	x3, x3, #0x4
    c790:	add	x0, x0, x3
    c794:	cbz	x1, c7c4 <lzma_crc64@@XZ_5.0+0xec>
    c798:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    c79c:	add	x3, x0, x1
    c7a0:	ldr	x4, [x4, #3984]
    c7a4:	nop
    c7a8:	and	x5, x2, #0xff
    c7ac:	ldrb	w1, [x0], #1
    c7b0:	eor	x1, x1, x5
    c7b4:	cmp	x0, x3
    c7b8:	ldr	x1, [x4, x1, lsl #3]
    c7bc:	eor	x2, x1, x2, lsr #8
    c7c0:	b.ne	c7a8 <lzma_crc64@@XZ_5.0+0xd0>  // b.any
    c7c4:	mvn	x0, x2
    c7c8:	ret
    c7cc:	mov	x3, x1
    c7d0:	b	c718 <lzma_crc64@@XZ_5.0+0x40>
    c7d4:	nop
    c7d8:	stp	x29, x30, [sp, #-224]!
    c7dc:	mov	x3, x0
    c7e0:	mov	w8, #0xdba5                	// #56229
    c7e4:	mov	x29, sp
    c7e8:	stp	x19, x20, [sp, #16]
    c7ec:	mov	x13, x1
    c7f0:	movk	w8, #0xe9b5, lsl #16
    c7f4:	stp	x21, x22, [sp, #32]
    c7f8:	mov	w7, #0x2f98                	// #12184
    c7fc:	movk	w7, #0x428a, lsl #16
    c800:	stp	x23, x24, [sp, #48]
    c804:	mov	w16, #0x4491                	// #17553
    c808:	movk	w16, #0x7137, lsl #16
    c80c:	stp	x25, x26, [sp, #64]
    c810:	mov	w15, #0xfbcf                	// #64463
    c814:	movk	w15, #0xb5c0, lsl #16
    c818:	stp	x27, x28, [sp, #80]
    c81c:	mov	w10, #0xc25b                	// #49755
    c820:	movk	w10, #0x3956, lsl #16
    c824:	ldr	x2, [x3, #16]
    c828:	str	x2, [sp, #208]
    c82c:	ldp	x0, x1, [x0]
    c830:	mov	w14, w2
    c834:	eor	w4, w2, w2, ror #14
    c838:	add	w12, w2, w8
    c83c:	stp	x0, x1, [sp, #192]
    c840:	eor	w4, w2, w4, ror #5
    c844:	ldr	x2, [x3, #24]
    c848:	str	x2, [sp, #216]
    c84c:	ldp	w0, w6, [sp, #192]
    c850:	str	x3, [sp, #184]
    c854:	ldp	w2, w5, [sp, #216]
    c858:	ror	w4, w4, #6
    c85c:	ldr	w8, [sp, #212]
    c860:	eor	w1, w0, w0, ror #9
    c864:	ldp	w19, w30, [x13]
    c868:	eor	w3, w2, w8
    c86c:	and	w3, w3, w14
    c870:	ldr	w9, [sp, #200]
    c874:	eor	w3, w3, w2
    c878:	eor	w1, w0, w1, ror #11
    c87c:	add	w4, w4, w3
    c880:	add	w3, w5, w7
    c884:	add	w4, w4, w3
    c888:	ldr	w7, [sp, #204]
    c88c:	eor	w3, w6, w9
    c890:	rev	w19, w19
    c894:	and	w5, w6, w9
    c898:	and	w3, w3, w0
    c89c:	add	w4, w4, w19
    c8a0:	ror	w1, w1, #2
    c8a4:	add	w11, w4, w7
    c8a8:	add	w4, w1, w4
    c8ac:	add	w1, w3, w5
    c8b0:	eor	w3, w14, w8
    c8b4:	add	w1, w4, w1
    c8b8:	eor	w5, w11, w11, ror #14
    c8bc:	and	w3, w3, w11
    c8c0:	rev	w30, w30
    c8c4:	eor	w4, w1, w1, ror #9
    c8c8:	eor	w3, w3, w8
    c8cc:	eor	w5, w11, w5, ror #5
    c8d0:	add	w16, w2, w16
    c8d4:	eor	w4, w1, w4, ror #11
    c8d8:	add	w3, w3, w30
    c8dc:	eor	w2, w0, w6
    c8e0:	add	w3, w3, w16
    c8e4:	and	w7, w0, w6
    c8e8:	ror	w5, w5, #6
    c8ec:	and	w2, w2, w1
    c8f0:	add	w3, w3, w5
    c8f4:	add	w5, w9, w3
    c8f8:	ror	w4, w4, #2
    c8fc:	add	w3, w4, w3
    c900:	add	w4, w2, w7
    c904:	add	w4, w3, w4
    c908:	eor	w2, w14, w11
    c90c:	ldp	w18, w17, [x13, #8]
    c910:	eor	w7, w5, w5, ror #14
    c914:	and	w2, w2, w5
    c918:	eor	w3, w4, w4, ror #9
    c91c:	eor	w7, w5, w7, ror #5
    c920:	eor	w2, w2, w14
    c924:	rev	w18, w18
    c928:	add	w15, w8, w15
    c92c:	eor	w3, w4, w3, ror #11
    c930:	add	w2, w2, w18
    c934:	add	w2, w2, w15
    c938:	ror	w8, w7, #6
    c93c:	eor	w7, w0, w1
    c940:	add	w2, w2, w8
    c944:	and	w7, w7, w4
    c948:	and	w8, w0, w1
    c94c:	add	w6, w6, w2
    c950:	ror	w3, w3, #2
    c954:	add	w2, w3, w2
    c958:	add	w3, w7, w8
    c95c:	add	w3, w2, w3
    c960:	eor	w8, w11, w5
    c964:	eor	w9, w6, w6, ror #14
    c968:	and	w8, w8, w6
    c96c:	eor	w2, w3, w3, ror #9
    c970:	eor	w8, w8, w11
    c974:	eor	w9, w6, w9, ror #5
    c978:	rev	w17, w17
    c97c:	eor	w2, w3, w2, ror #11
    c980:	add	w8, w8, w17
    c984:	eor	w7, w1, w4
    c988:	add	w8, w8, w12
    c98c:	and	w7, w7, w3
    c990:	ror	w9, w9, #6
    c994:	add	w8, w8, w9
    c998:	ror	w2, w2, #2
    c99c:	and	w9, w1, w4
    c9a0:	add	w0, w0, w8
    c9a4:	add	w8, w2, w8
    c9a8:	add	w2, w7, w9
    c9ac:	ldp	w16, w15, [x13, #16]
    c9b0:	add	w2, w8, w2
    c9b4:	eor	w7, w5, w6
    c9b8:	eor	w9, w0, w0, ror #14
    c9bc:	and	w7, w7, w0
    c9c0:	eor	w8, w2, w2, ror #9
    c9c4:	eor	w9, w0, w9, ror #5
    c9c8:	eor	w7, w7, w5
    c9cc:	rev	w16, w16
    c9d0:	add	w7, w7, w11
    c9d4:	eor	w8, w2, w8, ror #11
    c9d8:	add	w10, w16, w10
    c9dc:	add	w7, w7, w10
    c9e0:	ror	w10, w9, #6
    c9e4:	eor	w9, w4, w3
    c9e8:	add	w7, w7, w10
    c9ec:	and	w9, w9, w2
    c9f0:	and	w10, w4, w3
    c9f4:	add	w1, w1, w7
    c9f8:	ror	w8, w8, #2
    c9fc:	add	w7, w8, w7
    ca00:	add	w8, w9, w10
    ca04:	add	w8, w7, w8
    ca08:	eor	w9, w6, w0
    ca0c:	eor	w10, w1, w1, ror #14
    ca10:	and	w9, w9, w1
    ca14:	eor	w7, w8, w8, ror #9
    ca18:	eor	w9, w9, w6
    ca1c:	eor	w10, w1, w10, ror #5
    ca20:	add	w9, w9, w5
    ca24:	rev	w15, w15
    ca28:	mov	w5, #0x11f1                	// #4593
    ca2c:	eor	w7, w8, w7, ror #11
    ca30:	movk	w5, #0x59f1, lsl #16
    ca34:	add	w5, w15, w5
    ca38:	and	w11, w3, w2
    ca3c:	add	w9, w9, w5
    ca40:	ror	w5, w10, #6
    ca44:	eor	w10, w3, w2
    ca48:	add	w9, w9, w5
    ca4c:	and	w10, w10, w8
    ca50:	ror	w7, w7, #2
    ca54:	add	w5, w4, w9
    ca58:	add	w9, w7, w9
    ca5c:	add	w7, w10, w11
    ca60:	eor	w4, w0, w1
    ca64:	add	w7, w9, w7
    ca68:	ldr	w14, [x13, #24]
    ca6c:	eor	w10, w5, w5, ror #14
    ca70:	and	w4, w4, w5
    ca74:	eor	w4, w4, w0
    ca78:	eor	w9, w7, w7, ror #9
    ca7c:	eor	w10, w5, w10, ror #5
    ca80:	add	w6, w4, w6
    ca84:	rev	w14, w14
    ca88:	mov	w4, #0x82a4                	// #33444
    ca8c:	eor	w9, w7, w9, ror #11
    ca90:	movk	w4, #0x923f, lsl #16
    ca94:	add	w4, w14, w4
    ca98:	ldr	w28, [x13, #52]
    ca9c:	add	w4, w6, w4
    caa0:	ror	w6, w10, #6
    caa4:	eor	w10, w2, w8
    caa8:	add	w4, w4, w6
    caac:	add	w3, w3, w4
    cab0:	ror	w6, w9, #2
    cab4:	and	w9, w10, w7
    cab8:	and	w10, w2, w8
    cabc:	add	w9, w9, w10
    cac0:	add	w6, w6, w4
    cac4:	add	w6, w6, w9
    cac8:	eor	w4, w1, w5
    cacc:	ldr	w10, [x13, #28]
    cad0:	eor	w11, w3, w3, ror #14
    cad4:	and	w4, w4, w3
    cad8:	eor	w9, w6, w6, ror #9
    cadc:	eor	w4, w4, w1
    cae0:	eor	w11, w3, w11, ror #5
    cae4:	add	w0, w4, w0
    cae8:	rev	w10, w10
    caec:	mov	w4, #0x5ed5                	// #24277
    caf0:	eor	w9, w6, w9, ror #11
    caf4:	movk	w4, #0xab1c, lsl #16
    caf8:	add	w4, w10, w4
    cafc:	add	w4, w0, w4
    cb00:	ror	w0, w11, #6
    cb04:	eor	w11, w8, w7
    cb08:	add	w4, w4, w0
    cb0c:	add	w2, w2, w4
    cb10:	ror	w0, w9, #2
    cb14:	and	w9, w11, w6
    cb18:	and	w11, w8, w7
    cb1c:	add	w4, w0, w4
    cb20:	add	w0, w9, w11
    cb24:	add	w0, w4, w0
    cb28:	eor	w11, w5, w3
    cb2c:	ldr	w9, [x13, #32]
    cb30:	eor	w12, w2, w2, ror #14
    cb34:	and	w11, w11, w2
    cb38:	eor	w4, w0, w0, ror #9
    cb3c:	eor	w11, w11, w5
    cb40:	eor	w12, w2, w12, ror #5
    cb44:	add	w1, w11, w1
    cb48:	rev	w9, w9
    cb4c:	mov	w11, #0xaa98                	// #43672
    cb50:	eor	w4, w0, w4, ror #11
    cb54:	movk	w11, #0xd807, lsl #16
    cb58:	add	w11, w9, w11
    cb5c:	add	w1, w1, w11
    cb60:	ror	w12, w12, #6
    cb64:	eor	w11, w7, w6
    cb68:	and	w20, w7, w6
    cb6c:	add	w1, w1, w12
    cb70:	and	w11, w11, w0
    cb74:	add	w12, w8, w1
    cb78:	ror	w4, w4, #2
    cb7c:	add	w8, w11, w20
    cb80:	add	w4, w4, w1
    cb84:	add	w4, w4, w8
    cb88:	eor	w1, w3, w2
    cb8c:	ldr	w8, [x13, #36]
    cb90:	eor	w20, w12, w12, ror #14
    cb94:	and	w1, w1, w12
    cb98:	eor	w11, w4, w4, ror #9
    cb9c:	eor	w1, w1, w3
    cba0:	eor	w20, w12, w20, ror #5
    cba4:	add	w5, w1, w5
    cba8:	rev	w8, w8
    cbac:	mov	w1, #0x5b01                	// #23297
    cbb0:	eor	w11, w4, w11, ror #11
    cbb4:	movk	w1, #0x1283, lsl #16
    cbb8:	add	w1, w8, w1
    cbbc:	add	w5, w5, w1
    cbc0:	ror	w20, w20, #6
    cbc4:	eor	w1, w6, w0
    cbc8:	add	w5, w5, w20
    cbcc:	and	w1, w1, w4
    cbd0:	and	w20, w6, w0
    cbd4:	add	w21, w7, w5
    cbd8:	ror	w11, w11, #2
    cbdc:	add	w1, w1, w20
    cbe0:	add	w11, w11, w5
    cbe4:	add	w11, w11, w1
    cbe8:	eor	w5, w2, w12
    cbec:	ldr	w7, [x13, #40]
    cbf0:	eor	w20, w21, w21, ror #14
    cbf4:	and	w5, w5, w21
    cbf8:	eor	w1, w11, w11, ror #9
    cbfc:	eor	w5, w5, w2
    cc00:	eor	w20, w21, w20, ror #5
    cc04:	add	w3, w5, w3
    cc08:	rev	w7, w7
    cc0c:	mov	w5, #0x85be                	// #34238
    cc10:	eor	w1, w11, w1, ror #11
    cc14:	movk	w5, #0x2431, lsl #16
    cc18:	add	w5, w7, w5
    cc1c:	add	w3, w3, w5
    cc20:	ror	w20, w20, #6
    cc24:	eor	w5, w0, w4
    cc28:	and	w22, w0, w4
    cc2c:	add	w3, w3, w20
    cc30:	and	w5, w5, w11
    cc34:	add	w20, w6, w3
    cc38:	ror	w1, w1, #2
    cc3c:	add	w5, w5, w22
    cc40:	add	w1, w1, w3
    cc44:	add	w1, w1, w5
    cc48:	eor	w3, w12, w21
    cc4c:	ldp	w6, w22, [x13, #44]
    cc50:	eor	w5, w20, w20, ror #14
    cc54:	and	w3, w3, w20
    cc58:	eor	w25, w1, w1, ror #9
    cc5c:	eor	w3, w3, w12
    cc60:	eor	w5, w20, w5, ror #5
    cc64:	add	w2, w3, w2
    cc68:	rev	w6, w6
    cc6c:	mov	w3, #0x7dc3                	// #32195
    cc70:	eor	w25, w1, w25, ror #11
    cc74:	movk	w3, #0x550c, lsl #16
    cc78:	add	w3, w6, w3
    cc7c:	add	w2, w2, w3
    cc80:	ror	w5, w5, #6
    cc84:	eor	w3, w4, w11
    cc88:	add	w2, w2, w5
    cc8c:	and	w3, w3, w1
    cc90:	and	w5, w4, w11
    cc94:	add	w0, w0, w2
    cc98:	ror	w25, w25, #2
    cc9c:	add	w3, w3, w5
    cca0:	add	w25, w25, w2
    cca4:	add	w25, w25, w3
    cca8:	eor	w2, w21, w20
    ccac:	eor	w3, w0, w0, ror #14
    ccb0:	and	w2, w2, w0
    ccb4:	eor	w2, w2, w21
    ccb8:	eor	w5, w25, w25, ror #9
    ccbc:	rev	w22, w22
    ccc0:	eor	w3, w0, w3, ror #5
    ccc4:	add	w12, w2, w12
    ccc8:	mov	w2, #0x5d74                	// #23924
    cccc:	eor	w5, w25, w5, ror #11
    ccd0:	movk	w2, #0x72be, lsl #16
    ccd4:	add	w2, w22, w2
    ccd8:	str	w22, [sp, #120]
    ccdc:	add	w2, w12, w2
    cce0:	ror	w12, w3, #6
    cce4:	eor	w3, w11, w1
    cce8:	add	w2, w2, w12
    ccec:	and	w3, w3, w25
    ccf0:	ror	w12, w5, #2
    ccf4:	and	w5, w11, w1
    ccf8:	add	w4, w4, w2
    ccfc:	add	w3, w3, w5
    cd00:	add	w12, w12, w2
    cd04:	add	w12, w12, w3
    cd08:	eor	w2, w20, w0
    cd0c:	eor	w3, w4, w4, ror #14
    cd10:	and	w2, w2, w4
    cd14:	eor	w2, w2, w20
    cd18:	eor	w5, w12, w12, ror #9
    cd1c:	rev	w22, w28
    cd20:	eor	w3, w4, w3, ror #5
    cd24:	add	w21, w2, w21
    cd28:	mov	w2, #0xb1fe                	// #45566
    cd2c:	eor	w5, w12, w5, ror #11
    cd30:	movk	w2, #0x80de, lsl #16
    cd34:	add	w2, w22, w2
    cd38:	str	w22, [sp, #112]
    cd3c:	add	w21, w21, w2
    cd40:	ror	w2, w3, #6
    cd44:	eor	w3, w1, w25
    cd48:	add	w21, w21, w2
    cd4c:	and	w3, w3, w12
    cd50:	and	w2, w1, w25
    cd54:	add	w11, w11, w21
    cd58:	ror	w5, w5, #2
    cd5c:	add	w3, w3, w2
    cd60:	add	w5, w5, w21
    cd64:	add	w5, w5, w3
    cd68:	eor	w2, w0, w4
    cd6c:	ldr	w22, [x13, #56]
    cd70:	eor	w3, w11, w11, ror #14
    cd74:	and	w2, w2, w11
    cd78:	eor	w23, w5, w5, ror #9
    cd7c:	eor	w2, w2, w0
    cd80:	rev	w21, w22
    cd84:	eor	w3, w11, w3, ror #5
    cd88:	add	w20, w2, w20
    cd8c:	mov	w2, #0x6a7                 	// #1703
    cd90:	eor	w23, w5, w23, ror #11
    cd94:	movk	w2, #0x9bdc, lsl #16
    cd98:	add	w2, w21, w2
    cd9c:	add	w20, w20, w2
    cda0:	ror	w2, w3, #6
    cda4:	eor	w3, w25, w12
    cda8:	add	w20, w20, w2
    cdac:	and	w3, w3, w5
    cdb0:	and	w2, w25, w12
    cdb4:	add	w1, w1, w20
    cdb8:	ror	w23, w23, #2
    cdbc:	add	w3, w3, w2
    cdc0:	add	w20, w23, w20
    cdc4:	add	w23, w20, w3
    cdc8:	eor	w2, w4, w11
    cdcc:	eor	w3, w1, w1, ror #14
    cdd0:	and	w2, w2, w1
    cdd4:	str	w21, [sp, #108]
    cdd8:	eor	w2, w2, w4
    cddc:	ldr	w21, [x13, #60]
    cde0:	eor	w26, w23, w23, ror #9
    cde4:	add	w0, w2, w0
    cde8:	eor	w3, w1, w3, ror #5
    cdec:	rev	w13, w21
    cdf0:	mov	w2, #0xf174                	// #61812
    cdf4:	eor	w26, w23, w26, ror #11
    cdf8:	movk	w2, #0xc19b, lsl #16
    cdfc:	add	w2, w13, w2
    ce00:	ror	w3, w3, #6
    ce04:	add	w0, w0, w2
    ce08:	ror	w26, w26, #2
    ce0c:	add	w0, w0, w3
    ce10:	str	w13, [sp, #116]
    ce14:	adrp	x13, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xac00>
    ce18:	add	x13, x13, #0x910
    ce1c:	add	w26, w26, w0
    ce20:	add	w25, w25, w0
    ce24:	add	x0, x13, #0xc0
    ce28:	str	x0, [sp, #176]
    ce2c:	mov	w0, #0x2967                	// #10599
    ce30:	eor	w2, w12, w5
    ce34:	movk	w0, #0x1429, lsl #16
    ce38:	str	w0, [sp, #172]
    ce3c:	mov	w0, #0x6351                	// #25425
    ce40:	and	w2, w2, w23
    ce44:	movk	w0, #0x6ca, lsl #16
    ce48:	str	w0, [sp, #168]
    ce4c:	mov	w0, #0x9147                	// #37191
    ce50:	and	w3, w12, w5
    ce54:	movk	w0, #0xd5a7, lsl #16
    ce58:	str	w0, [sp, #164]
    ce5c:	mov	w0, #0xbf3                 	// #3059
    ce60:	add	w2, w2, w3
    ce64:	movk	w0, #0xc6e0, lsl #16
    ce68:	str	w0, [sp, #160]
    ce6c:	mov	w0, #0x7fc7                	// #32711
    ce70:	add	w26, w26, w2
    ce74:	movk	w0, #0xbf59, lsl #16
    ce78:	str	w0, [sp, #156]
    ce7c:	mov	w0, #0x27c8                	// #10184
    ce80:	mov	w22, #0x4786                	// #18310
    ce84:	movk	w0, #0xb003, lsl #16
    ce88:	str	w0, [sp, #152]
    ce8c:	mov	w0, #0xc66d                	// #50797
    ce90:	mov	w21, #0x9dc6                	// #40390
    ce94:	movk	w0, #0xa831, lsl #16
    ce98:	str	w0, [sp, #148]
    ce9c:	mov	w0, #0x5152                	// #20818
    cea0:	mov	w2, #0x69c1                	// #27073
    cea4:	movk	w0, #0x983e, lsl #16
    cea8:	str	w0, [sp, #144]
    ceac:	mov	w0, #0x88da                	// #35034
    ceb0:	movk	w22, #0xefbe, lsl #16
    ceb4:	movk	w0, #0x76f9, lsl #16
    ceb8:	str	w0, [sp, #140]
    cebc:	mov	w0, #0xa9dc                	// #43484
    cec0:	movk	w21, #0xfc1, lsl #16
    cec4:	movk	w0, #0x5cb0, lsl #16
    cec8:	str	w0, [sp, #136]
    cecc:	mov	w0, #0x84aa                	// #33962
    ced0:	movk	w2, #0xe49b, lsl #16
    ced4:	movk	w0, #0x4a74, lsl #16
    ced8:	str	w0, [sp, #132]
    cedc:	mov	w0, #0x2c6f                	// #11375
    cee0:	movk	w0, #0x2de9, lsl #16
    cee4:	str	w0, [sp, #128]
    cee8:	mov	w0, #0xa1cc                	// #41420
    ceec:	movk	w0, #0x240c, lsl #16
    cef0:	str	w0, [sp, #124]
    cef4:	ldr	w27, [sp, #108]
    cef8:	eor	w0, w25, w25, ror #14
    cefc:	eor	w20, w11, w1
    cf00:	eor	w3, w30, w30, ror #11
    cf04:	eor	w0, w25, w0, ror #5
    cf08:	and	w20, w20, w25
    cf0c:	eor	w24, w27, w27, ror #2
    cf10:	add	w4, w4, w2
    cf14:	lsr	w2, w30, #3
    cf18:	str	w27, [sp, #108]
    cf1c:	lsr	w27, w27, #10
    cf20:	eor	w3, w2, w3, ror #7
    cf24:	eor	w20, w20, w11
    cf28:	eor	w24, w27, w24, ror #17
    cf2c:	add	w24, w24, w3
    cf30:	ror	w0, w0, #6
    cf34:	ldr	w3, [sp, #116]
    cf38:	add	w0, w0, w20
    cf3c:	add	w19, w8, w19
    cf40:	add	w4, w0, w4
    cf44:	add	w19, w24, w19
    cf48:	eor	w20, w18, w18, ror #11
    cf4c:	add	w2, w4, w19
    cf50:	eor	w4, w3, w3, ror #2
    cf54:	add	w12, w2, w12
    cf58:	lsr	w0, w3, #10
    cf5c:	eor	w4, w0, w4, ror #17
    cf60:	str	w3, [sp, #116]
    cf64:	eor	w0, w12, w12, ror #14
    cf68:	lsr	w3, w18, #3
    cf6c:	eor	w20, w3, w20, ror #7
    cf70:	eor	w3, w25, w1
    cf74:	eor	w0, w12, w0, ror #5
    cf78:	add	w4, w4, w20
    cf7c:	add	w30, w7, w30
    cf80:	and	w3, w3, w12
    cf84:	add	w30, w4, w30
    cf88:	ror	w0, w0, #6
    cf8c:	eor	w3, w3, w1
    cf90:	add	w11, w11, w30
    cf94:	add	w3, w0, w3
    cf98:	eor	w4, w17, w17, ror #11
    cf9c:	add	w11, w3, w11
    cfa0:	lsr	w0, w17, #3
    cfa4:	add	w11, w11, w22
    cfa8:	eor	w4, w0, w4, ror #7
    cfac:	add	w28, w11, w5
    cfb0:	eor	w20, w19, w19, ror #2
    cfb4:	lsr	w3, w19, #10
    cfb8:	add	w18, w6, w18
    cfbc:	eor	w0, w28, w28, ror #14
    cfc0:	eor	w20, w3, w20, ror #17
    cfc4:	eor	w3, w25, w12
    cfc8:	add	w4, w20, w4
    cfcc:	eor	w0, w28, w0, ror #5
    cfd0:	and	w3, w3, w28
    cfd4:	add	w18, w4, w18
    cfd8:	eor	w3, w3, w25
    cfdc:	add	w27, w18, w1
    cfe0:	ror	w0, w0, #6
    cfe4:	add	w0, w0, w3
    cfe8:	eor	w4, w16, w16, ror #11
    cfec:	add	w27, w0, w27
    cff0:	eor	w1, w30, w30, ror #2
    cff4:	add	w27, w27, w21
    cff8:	lsr	w3, w16, #3
    cffc:	add	w20, w23, w27
    d000:	lsr	w0, w30, #10
    d004:	eor	w4, w3, w4, ror #7
    d008:	eor	w1, w0, w1, ror #17
    d00c:	ldr	w21, [sp, #120]
    d010:	add	w1, w1, w4
    d014:	eor	w0, w20, w20, ror #14
    d018:	eor	w4, w26, w26, ror #9
    d01c:	eor	w3, w12, w28
    d020:	add	w17, w21, w17
    d024:	eor	w0, w20, w0, ror #5
    d028:	eor	w21, w23, w5
    d02c:	eor	w4, w26, w4, ror #11
    d030:	and	w5, w23, w5
    d034:	and	w3, w3, w20
    d038:	and	w21, w21, w26
    d03c:	eor	w3, w3, w12
    d040:	add	w21, w21, w5
    d044:	ror	w0, w0, #6
    d048:	eor	w5, w18, w18, ror #2
    d04c:	ror	w4, w4, #2
    d050:	add	w0, w0, w3
    d054:	add	w4, w4, w2
    d058:	eor	w3, w15, w15, ror #11
    d05c:	lsr	w2, w18, #10
    d060:	ldr	w22, [sp, #112]
    d064:	eor	w2, w2, w5, ror #17
    d068:	lsr	w5, w15, #3
    d06c:	add	w17, w1, w17
    d070:	eor	w3, w5, w3, ror #7
    d074:	add	w16, w22, w16
    d078:	add	w2, w2, w3
    d07c:	add	w25, w25, w17
    d080:	add	w16, w2, w16
    d084:	add	w25, w0, w25
    d088:	ldp	w1, w2, [sp, #124]
    d08c:	add	w4, w4, w21
    d090:	eor	w5, w26, w23
    d094:	and	w23, w26, w23
    d098:	add	w1, w25, w1
    d09c:	eor	w21, w4, w4, ror #9
    d0a0:	add	w24, w26, w1
    d0a4:	eor	w25, w28, w20
    d0a8:	eor	w21, w4, w21, ror #11
    d0ac:	and	w5, w5, w4
    d0b0:	eor	w0, w24, w24, ror #14
    d0b4:	and	w25, w25, w24
    d0b8:	add	w5, w5, w23
    d0bc:	ror	w21, w21, #2
    d0c0:	eor	w0, w24, w0, ror #5
    d0c4:	add	w21, w21, w11
    d0c8:	eor	w25, w25, w28
    d0cc:	add	w3, w21, w5
    d0d0:	add	w12, w12, w16
    d0d4:	ror	w0, w0, #6
    d0d8:	add	w25, w0, w25
    d0dc:	eor	w21, w14, w14, ror #11
    d0e0:	add	w12, w25, w12
    d0e4:	lsr	w5, w14, #3
    d0e8:	add	w22, w12, w2
    d0ec:	eor	w2, w3, w3, ror #9
    d0f0:	add	w23, w4, w22
    d0f4:	eor	w12, w26, w4
    d0f8:	eor	w2, w3, w2, ror #11
    d0fc:	eor	w25, w17, w17, ror #2
    d100:	eor	w0, w23, w23, ror #14
    d104:	eor	w21, w5, w21, ror #7
    d108:	and	w12, w12, w3
    d10c:	ldr	w5, [sp, #108]
    d110:	lsr	w11, w17, #10
    d114:	ror	w2, w2, #2
    d118:	and	w26, w26, w4
    d11c:	add	w27, w2, w27
    d120:	add	w26, w12, w26
    d124:	eor	w25, w11, w25, ror #17
    d128:	eor	w0, w23, w0, ror #5
    d12c:	eor	w11, w20, w24
    d130:	add	w15, w5, w15
    d134:	and	w11, w11, w23
    d138:	add	w5, w27, w26
    d13c:	add	w25, w25, w21
    d140:	eor	w11, w11, w20
    d144:	ror	w0, w0, #6
    d148:	add	w15, w25, w15
    d14c:	add	w11, w0, w11
    d150:	eor	w0, w5, w5, ror #9
    d154:	ldr	w2, [sp, #132]
    d158:	add	w28, w28, w15
    d15c:	eor	w26, w4, w3
    d160:	add	w28, w11, w28
    d164:	eor	w0, w5, w0, ror #11
    d168:	add	w21, w28, w2
    d16c:	eor	w27, w10, w10, ror #11
    d170:	add	w12, w3, w21
    d174:	and	w4, w4, w3
    d178:	and	w26, w26, w5
    d17c:	eor	w28, w16, w16, ror #2
    d180:	lsr	w25, w10, #3
    d184:	ror	w0, w0, #2
    d188:	add	w0, w0, w1
    d18c:	add	w26, w26, w4
    d190:	lsr	w2, w16, #10
    d194:	ldr	w4, [sp, #116]
    d198:	add	w26, w0, w26
    d19c:	eor	w25, w25, w27, ror #7
    d1a0:	eor	w11, w12, w12, ror #14
    d1a4:	eor	w2, w2, w28, ror #17
    d1a8:	add	w2, w2, w25
    d1ac:	add	w14, w4, w14
    d1b0:	add	w14, w2, w14
    d1b4:	eor	w1, w24, w23
    d1b8:	eor	w11, w12, w11, ror #5
    d1bc:	eor	w2, w26, w26, ror #9
    d1c0:	and	w1, w1, w12
    d1c4:	eor	w0, w3, w5
    d1c8:	eor	w1, w1, w24
    d1cc:	ror	w11, w11, #6
    d1d0:	eor	w2, w26, w2, ror #11
    d1d4:	add	w1, w11, w1
    d1d8:	add	w20, w20, w14
    d1dc:	and	w0, w0, w26
    d1e0:	add	w20, w1, w20
    d1e4:	ror	w2, w2, #2
    d1e8:	ldr	w1, [sp, #136]
    d1ec:	and	w3, w3, w5
    d1f0:	add	w3, w0, w3
    d1f4:	add	w22, w2, w22
    d1f8:	add	w2, w22, w3
    d1fc:	add	w25, w20, w1
    d200:	add	w11, w5, w25
    d204:	eor	w27, w9, w9, ror #11
    d208:	eor	w28, w15, w15, ror #2
    d20c:	lsr	w3, w9, #3
    d210:	eor	w22, w2, w2, ror #9
    d214:	lsr	w4, w15, #10
    d218:	eor	w4, w4, w28, ror #17
    d21c:	eor	w3, w3, w27, ror #7
    d220:	eor	w1, w11, w11, ror #14
    d224:	add	w4, w4, w19
    d228:	add	w3, w3, w10
    d22c:	eor	w22, w2, w22, ror #11
    d230:	add	w10, w4, w3
    d234:	eor	w0, w23, w12
    d238:	eor	w4, w5, w26
    d23c:	eor	w1, w11, w1, ror #5
    d240:	and	w4, w4, w2
    d244:	ror	w22, w22, #2
    d248:	and	w0, w0, w11
    d24c:	and	w5, w5, w26
    d250:	add	w21, w22, w21
    d254:	add	w5, w4, w5
    d258:	eor	w0, w0, w23
    d25c:	ror	w1, w1, #6
    d260:	add	w3, w21, w5
    d264:	add	w0, w1, w0
    d268:	add	w20, w24, w10
    d26c:	ldr	w1, [sp, #140]
    d270:	add	w20, w0, w20
    d274:	eor	w27, w8, w8, ror #11
    d278:	add	w20, w20, w1
    d27c:	eor	w1, w3, w3, ror #9
    d280:	eor	w28, w14, w14, ror #2
    d284:	add	w22, w26, w20
    d288:	eor	w1, w3, w1, ror #11
    d28c:	lsr	w21, w8, #3
    d290:	lsr	w24, w14, #10
    d294:	eor	w21, w21, w27, ror #7
    d298:	eor	w24, w24, w28, ror #17
    d29c:	ror	w1, w1, #2
    d2a0:	eor	w27, w7, w7, ror #11
    d2a4:	add	w24, w24, w30
    d2a8:	add	w21, w21, w9
    d2ac:	eor	w0, w22, w22, ror #14
    d2b0:	add	w1, w1, w25
    d2b4:	eor	w25, w10, w10, ror #2
    d2b8:	add	w9, w24, w21
    d2bc:	lsr	w28, w10, #10
    d2c0:	lsr	w24, w7, #3
    d2c4:	eor	w5, w12, w11
    d2c8:	eor	w4, w26, w2
    d2cc:	eor	w24, w24, w27, ror #7
    d2d0:	eor	w0, w22, w0, ror #5
    d2d4:	eor	w25, w28, w25, ror #17
    d2d8:	and	w4, w4, w3
    d2dc:	add	w24, w24, w8
    d2e0:	and	w5, w5, w22
    d2e4:	and	w26, w26, w2
    d2e8:	add	w25, w25, w18
    d2ec:	add	w26, w4, w26
    d2f0:	add	w8, w25, w24
    d2f4:	ror	w0, w0, #6
    d2f8:	ldp	w4, w24, [sp, #144]
    d2fc:	eor	w5, w5, w12
    d300:	add	w23, w23, w9
    d304:	add	w5, w0, w5
    d308:	add	w5, w5, w23
    d30c:	add	w1, w1, w26
    d310:	add	w4, w5, w4
    d314:	eor	w26, w2, w3
    d318:	add	w5, w2, w4
    d31c:	eor	w0, w1, w1, ror #9
    d320:	eor	w21, w11, w22
    d324:	and	w2, w2, w3
    d328:	eor	w23, w5, w5, ror #14
    d32c:	eor	w0, w1, w0, ror #11
    d330:	and	w26, w26, w1
    d334:	and	w21, w21, w5
    d338:	eor	w23, w5, w23, ror #5
    d33c:	ror	w0, w0, #2
    d340:	add	w26, w26, w2
    d344:	add	w0, w0, w20
    d348:	eor	w21, w21, w11
    d34c:	ror	w23, w23, #6
    d350:	add	w20, w0, w26
    d354:	add	w21, w23, w21
    d358:	add	w12, w12, w8
    d35c:	eor	w2, w3, w1
    d360:	add	w12, w21, w12
    d364:	eor	w0, w20, w20, ror #9
    d368:	add	w12, w12, w24
    d36c:	and	w21, w2, w20
    d370:	add	w24, w3, w12
    d374:	eor	w0, w20, w0, ror #11
    d378:	eor	w23, w6, w6, ror #11
    d37c:	eor	w25, w9, w9, ror #2
    d380:	eor	w2, w24, w24, ror #14
    d384:	lsr	w26, w6, #3
    d388:	lsr	w27, w9, #10
    d38c:	ror	w0, w0, #2
    d390:	and	w3, w3, w1
    d394:	eor	w25, w27, w25, ror #17
    d398:	add	w3, w21, w3
    d39c:	add	w4, w0, w4
    d3a0:	eor	w2, w24, w2, ror #5
    d3a4:	eor	w0, w22, w5
    d3a8:	eor	w23, w26, w23, ror #7
    d3ac:	add	w4, w4, w3
    d3b0:	add	w25, w25, w17
    d3b4:	and	w0, w0, w24
    d3b8:	add	w23, w23, w7
    d3bc:	eor	w0, w0, w22
    d3c0:	add	w7, w25, w23
    d3c4:	ror	w2, w2, #6
    d3c8:	ldr	w28, [sp, #152]
    d3cc:	eor	w3, w4, w4, ror #9
    d3d0:	add	w2, w2, w0
    d3d4:	add	w11, w11, w7
    d3d8:	add	w11, w2, w11
    d3dc:	ldr	w26, [sp, #120]
    d3e0:	eor	w2, w4, w3, ror #11
    d3e4:	add	w11, w11, w28
    d3e8:	add	w28, w1, w11
    d3ec:	eor	w21, w1, w20
    d3f0:	and	w0, w21, w4
    d3f4:	ror	w2, w2, #2
    d3f8:	and	w1, w1, w20
    d3fc:	add	w12, w2, w12
    d400:	eor	w21, w26, w26, ror #11
    d404:	add	w1, w0, w1
    d408:	eor	w2, w28, w28, ror #14
    d40c:	eor	w23, w8, w8, ror #2
    d410:	add	w1, w12, w1
    d414:	lsr	w3, w26, #3
    d418:	lsr	w12, w8, #10
    d41c:	eor	w0, w5, w24
    d420:	eor	w2, w28, w2, ror #5
    d424:	eor	w12, w12, w23, ror #17
    d428:	eor	w3, w3, w21, ror #7
    d42c:	and	w0, w0, w28
    d430:	add	w12, w12, w16
    d434:	add	w3, w3, w6
    d438:	add	w6, w12, w3
    d43c:	ror	w2, w2, #6
    d440:	eor	w0, w0, w5
    d444:	eor	w27, w1, w1, ror #9
    d448:	add	w0, w2, w0
    d44c:	add	w22, w22, w6
    d450:	ldr	w2, [sp, #156]
    d454:	add	w22, w0, w22
    d458:	ldr	w23, [sp, #112]
    d45c:	eor	w27, w1, w27, ror #11
    d460:	add	w22, w22, w2
    d464:	and	w0, w20, w4
    d468:	eor	w3, w20, w4
    d46c:	add	w20, w20, w22
    d470:	and	w3, w3, w1
    d474:	ror	w27, w27, #2
    d478:	add	w3, w3, w0
    d47c:	eor	w12, w23, w23, ror #11
    d480:	add	w27, w27, w11
    d484:	eor	w21, w7, w7, ror #2
    d488:	eor	w2, w20, w20, ror #14
    d48c:	add	w27, w27, w3
    d490:	lsr	w11, w7, #10
    d494:	lsr	w3, w23, #3
    d498:	eor	w0, w24, w28
    d49c:	eor	w2, w20, w2, ror #5
    d4a0:	eor	w11, w11, w21, ror #17
    d4a4:	eor	w3, w3, w12, ror #7
    d4a8:	add	w3, w3, w26
    d4ac:	and	w0, w0, w20
    d4b0:	add	w11, w11, w15
    d4b4:	eor	w25, w27, w27, ror #9
    d4b8:	add	w11, w11, w3
    d4bc:	ror	w2, w2, #6
    d4c0:	eor	w0, w0, w24
    d4c4:	add	w5, w5, w11
    d4c8:	add	w0, w2, w0
    d4cc:	eor	w25, w27, w25, ror #11
    d4d0:	add	w5, w0, w5
    d4d4:	ldr	w0, [sp, #108]
    d4d8:	stp	w0, w23, [sp, #108]
    d4dc:	eor	w23, w4, w1
    d4e0:	and	w3, w4, w1
    d4e4:	ldr	w2, [sp, #160]
    d4e8:	and	w23, w23, w27
    d4ec:	ror	w25, w25, #2
    d4f0:	add	w23, w23, w3
    d4f4:	add	w25, w25, w22
    d4f8:	add	w25, w25, w23
    d4fc:	add	w5, w5, w2
    d500:	add	w4, w4, w5
    d504:	eor	w23, w0, w0, ror #11
    d508:	eor	w2, w25, w25, ror #9
    d50c:	eor	w26, w6, w6, ror #2
    d510:	eor	w3, w4, w4, ror #14
    d514:	ldr	w12, [sp, #112]
    d518:	eor	w2, w25, w2, ror #11
    d51c:	lsr	w21, w6, #10
    d520:	str	w11, [sp, #120]
    d524:	lsr	w11, w0, #3
    d528:	eor	w22, w1, w27
    d52c:	eor	w0, w28, w20
    d530:	eor	w21, w21, w26, ror #17
    d534:	eor	w11, w11, w23, ror #7
    d538:	eor	w3, w4, w3, ror #5
    d53c:	and	w23, w1, w27
    d540:	add	w11, w11, w12
    d544:	add	w21, w21, w14
    d548:	and	w22, w22, w25
    d54c:	ror	w2, w2, #2
    d550:	and	w0, w0, w4
    d554:	add	w2, w2, w5
    d558:	add	w22, w22, w23
    d55c:	add	w5, w21, w11
    d560:	eor	w0, w0, w28
    d564:	ror	w3, w3, #6
    d568:	add	w12, w2, w22
    d56c:	ldr	w26, [sp, #116]
    d570:	ldr	w2, [sp, #164]
    d574:	add	w0, w3, w0
    d578:	add	w23, w24, w5
    d57c:	ldr	w22, [sp, #120]
    d580:	add	w23, w0, w23
    d584:	lsr	w3, w26, #3
    d588:	add	w23, w23, w2
    d58c:	eor	w21, w27, w25
    d590:	add	w11, w1, w23
    d594:	eor	w1, w26, w26, ror #11
    d598:	eor	w2, w22, w22, ror #2
    d59c:	lsr	w22, w22, #10
    d5a0:	eor	w1, w3, w1, ror #7
    d5a4:	ldr	w3, [sp, #108]
    d5a8:	eor	w2, w22, w2, ror #17
    d5ac:	and	w24, w27, w25
    d5b0:	add	w2, w2, w10
    d5b4:	add	w1, w1, w3
    d5b8:	add	w1, w2, w1
    d5bc:	stp	w1, w5, [sp, #108]
    d5c0:	eor	w5, w12, w12, ror #9
    d5c4:	and	w21, w21, w12
    d5c8:	eor	w0, w11, w11, ror #14
    d5cc:	add	w28, w28, w1
    d5d0:	eor	w5, w12, w5, ror #11
    d5d4:	ldr	w1, [sp, #168]
    d5d8:	eor	w0, w11, w0, ror #5
    d5dc:	eor	w3, w25, w12
    d5e0:	eor	w22, w19, w19, ror #11
    d5e4:	ror	w5, w5, #2
    d5e8:	add	w23, w5, w23
    d5ec:	add	w5, w21, w24
    d5f0:	add	w5, w23, w5
    d5f4:	eor	w24, w20, w4
    d5f8:	and	w24, w24, w11
    d5fc:	ror	w0, w0, #6
    d600:	eor	w2, w5, w5, ror #9
    d604:	eor	w24, w24, w20
    d608:	add	w0, w0, w24
    d60c:	and	w21, w3, w5
    d610:	eor	w2, w5, w2, ror #11
    d614:	add	w0, w0, w28
    d618:	add	w0, w0, w1
    d61c:	and	w3, w25, w12
    d620:	add	w1, w27, w0
    d624:	ror	w23, w2, #2
    d628:	add	w23, w23, w0
    d62c:	ldr	w0, [sp, #112]
    d630:	add	w3, w21, w3
    d634:	eor	w2, w1, w1, ror #14
    d638:	add	w23, w23, w3
    d63c:	lsr	w21, w19, #3
    d640:	eor	w24, w0, w0, ror #2
    d644:	lsr	w3, w0, #10
    d648:	eor	w21, w21, w22, ror #7
    d64c:	eor	w2, w1, w2, ror #5
    d650:	eor	w0, w4, w11
    d654:	eor	w3, w3, w24, ror #17
    d658:	add	w21, w21, w26
    d65c:	and	w0, w0, w1
    d660:	add	w3, w3, w9
    d664:	ror	w2, w2, #6
    d668:	add	w3, w21, w3
    d66c:	eor	w0, w0, w4
    d670:	add	w0, w2, w0
    d674:	add	w20, w20, w3
    d678:	add	w20, w0, w20
    d67c:	eor	w27, w23, w23, ror #9
    d680:	ldr	w0, [sp, #172]
    d684:	eor	w26, w12, w5
    d688:	and	w2, w12, w5
    d68c:	eor	w27, w23, w27, ror #11
    d690:	add	w20, w20, w0
    d694:	and	w0, w26, w23
    d698:	add	w0, w0, w2
    d69c:	ror	w27, w27, #2
    d6a0:	ldr	x2, [sp, #176]
    d6a4:	str	w3, [sp, #116]
    d6a8:	add	x13, x13, #0x40
    d6ac:	add	w26, w27, w20
    d6b0:	add	w25, w25, w20
    d6b4:	add	w26, w26, w0
    d6b8:	cmp	x13, x2
    d6bc:	b.eq	d730 <lzma_crc64@@XZ_5.0+0x1058>  // b.none
    d6c0:	ldp	w21, w0, [x13, #72]
    d6c4:	str	w0, [sp, #124]
    d6c8:	ldr	w0, [x13, #80]
    d6cc:	str	w0, [sp, #128]
    d6d0:	ldr	w0, [x13, #84]
    d6d4:	str	w0, [sp, #132]
    d6d8:	ldr	w0, [x13, #88]
    d6dc:	str	w0, [sp, #136]
    d6e0:	ldr	w0, [x13, #92]
    d6e4:	str	w0, [sp, #140]
    d6e8:	ldr	w0, [x13, #96]
    d6ec:	str	w0, [sp, #144]
    d6f0:	ldr	w0, [x13, #100]
    d6f4:	str	w0, [sp, #148]
    d6f8:	ldr	w0, [x13, #104]
    d6fc:	str	w0, [sp, #152]
    d700:	ldr	w0, [x13, #108]
    d704:	str	w0, [sp, #156]
    d708:	ldr	w0, [x13, #112]
    d70c:	str	w0, [sp, #160]
    d710:	ldr	w0, [x13, #116]
    d714:	str	w0, [sp, #164]
    d718:	ldr	w0, [x13, #120]
    d71c:	str	w0, [sp, #168]
    d720:	ldr	w0, [x13, #124]
    d724:	ldp	w2, w22, [x13, #64]
    d728:	str	w0, [sp, #172]
    d72c:	b	cef4 <lzma_crc64@@XZ_5.0+0x81c>
    d730:	ldr	x6, [sp, #184]
    d734:	ldp	x19, x20, [sp, #16]
    d738:	ldp	w2, w0, [x6]
    d73c:	ldr	w3, [x6, #8]
    d740:	add	w26, w2, w26
    d744:	add	w23, w0, w23
    d748:	ldp	w2, w0, [x6, #12]
    d74c:	add	w5, w3, w5
    d750:	ldr	w3, [x6, #20]
    d754:	add	w12, w2, w12
    d758:	add	w25, w0, w25
    d75c:	ldp	w2, w0, [x6, #24]
    d760:	add	w1, w3, w1
    d764:	ldp	x21, x22, [sp, #32]
    d768:	add	w11, w2, w11
    d76c:	add	w4, w0, w4
    d770:	ldp	x27, x28, [sp, #80]
    d774:	stp	w26, w23, [x6]
    d778:	stp	w5, w12, [x6, #8]
    d77c:	stp	w25, w1, [x6, #16]
    d780:	stp	w11, w4, [x6, #24]
    d784:	ldp	x23, x24, [sp, #48]
    d788:	ldp	x25, x26, [sp, #64]
    d78c:	ldp	x29, x30, [sp], #224
    d790:	ret
    d794:	nop
    d798:	adrp	x1, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xac00>
    d79c:	add	x1, x1, #0x910
    d7a0:	str	xzr, [x0, #96]
    d7a4:	ldp	x2, x3, [x1, #256]
    d7a8:	stp	x2, x3, [x0, #64]
    d7ac:	ldp	x2, x3, [x1, #272]
    d7b0:	stp	x2, x3, [x0, #80]
    d7b4:	ret
    d7b8:	cbz	x1, d854 <lzma_crc64@@XZ_5.0+0x117c>
    d7bc:	stp	x29, x30, [sp, #-64]!
    d7c0:	mov	x29, sp
    d7c4:	stp	x19, x20, [sp, #16]
    d7c8:	mov	x20, x1
    d7cc:	stp	x21, x22, [sp, #32]
    d7d0:	mov	x21, x2
    d7d4:	mov	x22, x0
    d7d8:	stp	x23, x24, [sp, #48]
    d7dc:	add	x24, x2, #0x40
    d7e0:	mov	x23, #0x40                  	// #64
    d7e4:	nop
    d7e8:	ldr	x0, [x21, #96]
    d7ec:	mov	x1, x22
    d7f0:	and	x0, x0, #0x3f
    d7f4:	sub	x19, x23, x0
    d7f8:	add	x0, x21, x0
    d7fc:	cmp	x19, x20
    d800:	csel	x19, x19, x20, ls  // ls = plast
    d804:	mov	x2, x19
    d808:	sub	x20, x20, x19
    d80c:	bl	3090 <memcpy@plt>
    d810:	add	x22, x22, x19
    d814:	ldr	x2, [x21, #96]
    d818:	add	x19, x19, x2
    d81c:	str	x19, [x21, #96]
    d820:	tst	x19, #0x3f
    d824:	b.eq	d840 <lzma_crc64@@XZ_5.0+0x1168>  // b.none
    d828:	cbnz	x20, d7e8 <lzma_crc64@@XZ_5.0+0x1110>
    d82c:	ldp	x19, x20, [sp, #16]
    d830:	ldp	x21, x22, [sp, #32]
    d834:	ldp	x23, x24, [sp, #48]
    d838:	ldp	x29, x30, [sp], #64
    d83c:	ret
    d840:	mov	x1, x21
    d844:	mov	x0, x24
    d848:	bl	c7d8 <lzma_crc64@@XZ_5.0+0x100>
    d84c:	cbnz	x20, d7e8 <lzma_crc64@@XZ_5.0+0x1110>
    d850:	b	d82c <lzma_crc64@@XZ_5.0+0x1154>
    d854:	ret
    d858:	stp	x29, x30, [sp, #-32]!
    d85c:	mov	w4, #0xffffff80            	// #-128
    d860:	mov	x29, sp
    d864:	ldr	x2, [x0, #96]
    d868:	stp	x19, x20, [sp, #16]
    d86c:	mov	x19, x0
    d870:	and	x3, x2, #0x3f
    d874:	add	x20, x0, #0x40
    d878:	cmp	x3, #0x37
    d87c:	add	x1, x3, #0x1
    d880:	strb	w4, [x0, x3]
    d884:	b.eq	d8a4 <lzma_crc64@@XZ_5.0+0x11cc>  // b.none
    d888:	cmp	x1, #0x40
    d88c:	b.eq	d8e8 <lzma_crc64@@XZ_5.0+0x1210>  // b.none
    d890:	strb	wzr, [x19, x1]
    d894:	cmp	x1, #0x37
    d898:	add	x1, x1, #0x1
    d89c:	b.ne	d888 <lzma_crc64@@XZ_5.0+0x11b0>  // b.any
    d8a0:	ldr	x2, [x19, #96]
    d8a4:	lsl	x2, x2, #3
    d8a8:	str	x2, [x19, #96]
    d8ac:	rev	x2, x2
    d8b0:	str	x2, [x19, #56]
    d8b4:	mov	x1, x19
    d8b8:	mov	x0, x20
    d8bc:	bl	c7d8 <lzma_crc64@@XZ_5.0+0x100>
    d8c0:	mov	x1, x19
    d8c4:	add	x2, x19, #0x20
    d8c8:	ldr	w0, [x1, #64]
    d8cc:	rev	w0, w0
    d8d0:	str	w0, [x1], #4
    d8d4:	cmp	x1, x2
    d8d8:	b.ne	d8c8 <lzma_crc64@@XZ_5.0+0x11f0>  // b.any
    d8dc:	ldp	x19, x20, [sp, #16]
    d8e0:	ldp	x29, x30, [sp], #32
    d8e4:	ret
    d8e8:	mov	x1, x19
    d8ec:	mov	x0, x20
    d8f0:	bl	c7d8 <lzma_crc64@@XZ_5.0+0x100>
    d8f4:	strh	wzr, [x19]
    d8f8:	mov	x1, #0x3                   	// #3
    d8fc:	strb	wzr, [x19, #2]
    d900:	b	d888 <lzma_crc64@@XZ_5.0+0x11b0>
    d904:	nop
    d908:	stp	x29, x30, [sp, #-32]!
    d90c:	mov	x29, sp
    d910:	stp	x19, x20, [sp, #16]
    d914:	mov	x19, x0
    d918:	mov	x20, x1
    d91c:	add	x0, x0, #0x98
    d920:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    d924:	ldr	x0, [x19, #104]
    d928:	mov	x1, x20
    d92c:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d930:	ldr	x0, [x19, #96]
    d934:	mov	x1, x20
    d938:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d93c:	ldr	x0, [x19, #32]
    d940:	mov	x1, x20
    d944:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d948:	ldr	x2, [x19, #16]
    d94c:	mov	x1, x20
    d950:	ldr	x0, [x19]
    d954:	cbz	x2, d970 <lzma_crc64@@XZ_5.0+0x1298>
    d958:	blr	x2
    d95c:	mov	x1, x20
    d960:	mov	x0, x19
    d964:	ldp	x19, x20, [sp, #16]
    d968:	ldp	x29, x30, [sp], #32
    d96c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d970:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d974:	mov	x1, x20
    d978:	mov	x0, x19
    d97c:	ldp	x19, x20, [sp, #16]
    d980:	ldp	x29, x30, [sp], #32
    d984:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    d988:	sub	sp, sp, #0x90
    d98c:	stp	x29, x30, [sp, #16]
    d990:	add	x29, sp, #0x10
    d994:	stp	x19, x20, [sp, #32]
    d998:	mov	x19, x0
    d99c:	stp	x21, x22, [sp, #48]
    d9a0:	mov	x22, x3
    d9a4:	mov	x21, x4
    d9a8:	stp	x23, x24, [sp, #64]
    d9ac:	mov	x24, x5
    d9b0:	ldr	w23, [sp, #144]
    d9b4:	stp	x25, x26, [sp, #80]
    d9b8:	mov	x25, x6
    d9bc:	add	x26, x0, #0x20
    d9c0:	stp	x27, x28, [sp, #96]
    d9c4:	mov	x28, x7
    d9c8:	add	x27, sp, #0x88
    d9cc:	stp	x2, x1, [sp, #112]
    d9d0:	b	d9f4 <lzma_crc64@@XZ_5.0+0x131c>
    d9d4:	ldp	x0, x5, [x19]
    d9d8:	mov	x4, x28
    d9dc:	mov	x3, x25
    d9e0:	mov	x2, x24
    d9e4:	mov	x1, x26
    d9e8:	blr	x5
    d9ec:	mov	w20, w0
    d9f0:	cbnz	w0, dbdc <lzma_crc64@@XZ_5.0+0x1504>
    d9f4:	ldr	x0, [x25]
    d9f8:	cmp	x0, x28
    d9fc:	b.cs	dbd4 <lzma_crc64@@XZ_5.0+0x14fc>  // b.hs, b.nlast
    da00:	ldr	x0, [x22]
    da04:	cmp	w23, #0x0
    da08:	ccmp	x0, x21, #0x0, eq  // eq = none
    da0c:	b.cs	dbd4 <lzma_crc64@@XZ_5.0+0x14fc>  // b.hs, b.nlast
    da10:	ldr	w0, [x19, #136]
    da14:	cbnz	w0, d9d4 <lzma_crc64@@XZ_5.0+0x12fc>
    da18:	ldr	w4, [x19, #56]
    da1c:	ldr	w0, [x19, #64]
    da20:	cmp	w4, w0
    da24:	b.cc	d9d4 <lzma_crc64@@XZ_5.0+0x12fc>  // b.lo, b.ul, b.last
    da28:	ldr	w7, [x19, #40]
    da2c:	ldr	w0, [x19, #48]
    da30:	ldr	w2, [x26, #36]
    da34:	sub	w0, w7, w0
    da38:	cmp	w4, w0
    da3c:	ldr	x3, [x26]
    da40:	b.cs	db40 <lzma_crc64@@XZ_5.0+0x1468>  // b.hs, b.nlast
    da44:	ldr	x10, [x19, #176]
    da48:	mov	w2, w2
    da4c:	str	x2, [sp, #136]
    da50:	mov	w7, w7
    da54:	cbz	x10, db98 <lzma_crc64@@XZ_5.0+0x14c0>
    da58:	ldp	x2, x1, [sp, #112]
    da5c:	mov	x5, x3
    da60:	ldr	x0, [x19, #152]
    da64:	str	w23, [sp]
    da68:	mov	x6, x27
    da6c:	mov	x4, x21
    da70:	mov	x3, x22
    da74:	blr	x10
    da78:	mov	w20, w0
    da7c:	ldr	x2, [sp, #136]
    da80:	str	w2, [x19, #68]
    da84:	cmp	w0, #0x1
    da88:	ldr	w1, [x19, #72]
    da8c:	mov	w0, w2
    da90:	b.eq	db08 <lzma_crc64@@XZ_5.0+0x1430>  // b.none
    da94:	ldr	w2, [x19, #48]
    da98:	cmp	w2, w0
    da9c:	b.cs	daa8 <lzma_crc64@@XZ_5.0+0x13d0>  // b.hs, b.nlast
    daa0:	sub	w0, w0, w2
    daa4:	str	w0, [x19, #64]
    daa8:	cbz	w1, dad4 <lzma_crc64@@XZ_5.0+0x13fc>
    daac:	ldr	w2, [x19, #56]
    dab0:	ldr	w0, [x19, #64]
    dab4:	cmp	w2, w0
    dab8:	b.cs	dad4 <lzma_crc64@@XZ_5.0+0x13fc>  // b.hs, b.nlast
    dabc:	ldr	x3, [x19, #88]
    dac0:	sub	w2, w2, w1
    dac4:	str	w2, [x19, #56]
    dac8:	mov	x0, x26
    dacc:	str	wzr, [x19, #72]
    dad0:	blr	x3
    dad4:	cbz	w20, d9d4 <lzma_crc64@@XZ_5.0+0x12fc>
    dad8:	mov	w0, w20
    dadc:	ldp	x29, x30, [sp, #16]
    dae0:	ldp	x19, x20, [sp, #32]
    dae4:	ldp	x21, x22, [sp, #48]
    dae8:	ldp	x23, x24, [sp, #64]
    daec:	ldp	x25, x26, [sp, #80]
    daf0:	ldp	x27, x28, [sp, #96]
    daf4:	add	sp, sp, #0x90
    daf8:	ret
    dafc:	ldr	w1, [x19, #72]
    db00:	str	w0, [x19, #68]
    db04:	nop
    db08:	str	w0, [x19, #64]
    db0c:	str	w23, [x19, #136]
    db10:	cbz	w1, d9d4 <lzma_crc64@@XZ_5.0+0x12fc>
    db14:	ldr	w2, [x19, #56]
    db18:	cmp	w0, w2
    db1c:	b.ls	d9d4 <lzma_crc64@@XZ_5.0+0x12fc>  // b.plast
    db20:	ldr	x3, [x19, #88]
    db24:	sub	w2, w2, w1
    db28:	str	w2, [x19, #56]
    db2c:	mov	x0, x26
    db30:	str	wzr, [x19, #72]
    db34:	mov	w20, #0x0                   	// #0
    db38:	blr	x3
    db3c:	b	dad4 <lzma_crc64@@XZ_5.0+0x13fc>
    db40:	ldr	w20, [x26, #12]
    db44:	mov	x0, x3
    db48:	sub	w4, w4, w20
    db4c:	and	w20, w4, #0xfffffff0
    db50:	sub	w2, w2, w20
    db54:	add	x1, x3, w20, uxtw
    db58:	bl	30b0 <memmove@plt>
    db5c:	ldp	w0, w2, [x26, #32]
    db60:	ldp	w4, w1, [x26, #20]
    db64:	sub	w2, w2, w20
    db68:	ldr	x10, [x19, #176]
    db6c:	add	w4, w4, w20
    db70:	ldr	w7, [x19, #40]
    db74:	sub	w1, w1, w20
    db78:	sub	w0, w0, w20
    db7c:	ldr	x3, [x19, #32]
    db80:	stp	w4, w1, [x26, #20]
    db84:	stp	w0, w2, [x26, #32]
    db88:	mov	w2, w2
    db8c:	str	x2, [sp, #136]
    db90:	mov	w7, w7
    db94:	cbnz	x10, da58 <lzma_crc64@@XZ_5.0+0x1380>
    db98:	ldr	x0, [sp, #112]
    db9c:	mov	x5, x7
    dba0:	mov	x4, x27
    dba4:	mov	x2, x21
    dba8:	mov	x1, x22
    dbac:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
    dbb0:	cbz	w23, dbe4 <lzma_crc64@@XZ_5.0+0x150c>
    dbb4:	ldr	x0, [x22]
    dbb8:	cmp	x21, x0
    dbbc:	ldr	x0, [sp, #136]
    dbc0:	b.eq	dafc <lzma_crc64@@XZ_5.0+0x1424>  // b.none
    dbc4:	ldr	w1, [x19, #72]
    dbc8:	mov	w20, #0x0                   	// #0
    dbcc:	str	w0, [x19, #68]
    dbd0:	b	da94 <lzma_crc64@@XZ_5.0+0x13bc>
    dbd4:	mov	w20, #0x0                   	// #0
    dbd8:	b	dad8 <lzma_crc64@@XZ_5.0+0x1400>
    dbdc:	str	wzr, [x19, #136]
    dbe0:	b	dad8 <lzma_crc64@@XZ_5.0+0x1400>
    dbe4:	ldr	x0, [sp, #136]
    dbe8:	mov	w20, #0x0                   	// #0
    dbec:	ldr	w1, [x19, #72]
    dbf0:	str	w0, [x19, #68]
    dbf4:	b	da94 <lzma_crc64@@XZ_5.0+0x13bc>
    dbf8:	stp	x29, x30, [sp, #-48]!
    dbfc:	mov	x29, sp
    dc00:	ldr	x3, [x2, #8]
    dc04:	stp	x19, x20, [sp, #16]
    dc08:	mov	x20, x2
    dc0c:	mov	x19, x0
    dc10:	sub	x2, x3, #0x1, lsl #12
    dc14:	mov	x0, #0xf000                	// #61440
    dc18:	movk	x0, #0x5fff, lsl #16
    dc1c:	cmp	x2, x0
    dc20:	b.hi	ddc8 <lzma_crc64@@XZ_5.0+0x16f0>  // b.pmore
    dc24:	ldp	x4, x7, [x20, #24]
    dc28:	cmp	x7, x4
    dc2c:	b.hi	ddc8 <lzma_crc64@@XZ_5.0+0x16f0>  // b.pmore
    dc30:	ldr	x0, [x20]
    dc34:	lsr	x2, x3, #1
    dc38:	ldr	x6, [x20, #16]
    dc3c:	add	x5, x4, x0
    dc40:	add	w0, w0, w3
    dc44:	add	w2, w2, #0x80, lsl #12
    dc48:	add	x5, x5, x6
    dc4c:	add	w6, w6, w4
    dc50:	add	w8, w0, w6
    dc54:	stp	x21, x22, [sp, #32]
    dc58:	lsr	x5, x5, #1
    dc5c:	add	w2, w2, w8
    dc60:	str	w6, [x19, #16]
    dc64:	add	w2, w2, w5
    dc68:	ldr	w5, [x19, #8]
    dc6c:	stp	w2, w0, [x19, #8]
    dc70:	mov	x21, x1
    dc74:	ldr	x0, [x19]
    dc78:	cmp	x0, #0x0
    dc7c:	ccmp	w2, w5, #0x4, ne  // ne = any
    dc80:	b.eq	dc98 <lzma_crc64@@XZ_5.0+0x15c0>  // b.none
    dc84:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    dc88:	ldr	w3, [x20, #8]
    dc8c:	ldr	w4, [x20, #24]
    dc90:	ldr	x7, [x20, #32]
    dc94:	str	xzr, [x19]
    dc98:	ldr	w1, [x20, #40]
    dc9c:	add	w5, w3, #0x1
    dca0:	str	w5, [x19, #84]
    dca4:	mov	w0, w7
    dca8:	stp	w7, w4, [x19, #96]
    dcac:	cmp	w1, #0x12
    dcb0:	b.eq	de00 <lzma_crc64@@XZ_5.0+0x1728>  // b.none
    dcb4:	b.hi	ddd8 <lzma_crc64@@XZ_5.0+0x1700>  // b.pmore
    dcb8:	cmp	w1, #0x3
    dcbc:	b.eq	de54 <lzma_crc64@@XZ_5.0+0x177c>  // b.none
    dcc0:	cmp	w1, #0x4
    dcc4:	b.ne	de98 <lzma_crc64@@XZ_5.0+0x17c0>  // b.any
    dcc8:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    dccc:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    dcd0:	ldr	x4, [x4, #4064]
    dcd4:	ldr	x2, [x2, #4024]
    dcd8:	stp	x4, x2, [x19, #48]
    dcdc:	and	w2, w1, #0xf
    dce0:	cmp	w0, w2
    dce4:	b.cc	ddc0 <lzma_crc64@@XZ_5.0+0x16e8>  // b.lo, b.ul, b.last
    dce8:	sub	w0, w3, #0x1
    dcec:	and	w22, w1, #0x10
    dcf0:	mov	w3, #0x1000000             	// #16777216
    dcf4:	orr	w0, w0, w0, lsr #1
    dcf8:	orr	w0, w0, w0, lsr #2
    dcfc:	orr	w0, w0, w0, lsr #4
    dd00:	orr	w0, w0, w0, lsr #8
    dd04:	lsr	w0, w0, #1
    dd08:	orr	w0, w0, #0xffff
    dd0c:	cmp	w0, w3
    dd10:	b.ls	dd20 <lzma_crc64@@XZ_5.0+0x1648>  // b.plast
    dd14:	cmp	w2, #0x3
    dd18:	b.eq	de84 <lzma_crc64@@XZ_5.0+0x17ac>  // b.none
    dd1c:	lsr	w0, w0, #1
    dd20:	cmp	w2, #0x2
    dd24:	add	w2, w0, #0x401
    dd28:	csinc	w2, w2, w0, hi  // hi = pmore
    dd2c:	str	w0, [x19, #88]
    dd30:	tst	w1, #0xc
    dd34:	add	w0, w2, #0x10, lsl #12
    dd38:	csel	w2, w0, w2, ne  // ne = any
    dd3c:	ldp	w0, w1, [x19, #108]
    dd40:	str	w2, [x19, #108]
    dd44:	cbnz	w22, de3c <lzma_crc64@@XZ_5.0+0x1764>
    dd48:	str	w5, [x19, #112]
    dd4c:	cmp	w0, w2
    dd50:	b.ne	dd60 <lzma_crc64@@XZ_5.0+0x1688>  // b.any
    dd54:	ldr	w0, [x19, #112]
    dd58:	cmp	w1, w0
    dd5c:	b.eq	dd80 <lzma_crc64@@XZ_5.0+0x16a8>  // b.none
    dd60:	ldr	x0, [x19, #64]
    dd64:	mov	x1, x21
    dd68:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    dd6c:	str	xzr, [x19, #64]
    dd70:	ldr	x0, [x19, #72]
    dd74:	mov	x1, x21
    dd78:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    dd7c:	str	xzr, [x19, #72]
    dd80:	ldr	w1, [x20, #44]
    dd84:	mov	w0, #0x0                   	// #0
    dd88:	str	w1, [x19, #92]
    dd8c:	cbnz	w1, de44 <lzma_crc64@@XZ_5.0+0x176c>
    dd90:	ldr	w1, [x19, #96]
    dd94:	cmp	w22, #0x0
    dd98:	ldp	x21, x22, [sp, #32]
    dd9c:	lsr	w2, w1, #2
    dda0:	lsr	w1, w1, #1
    dda4:	add	w2, w2, #0x4
    dda8:	add	w1, w1, #0x10
    ddac:	csel	w1, w1, w2, ne  // ne = any
    ddb0:	str	w1, [x19, #92]
    ddb4:	ldp	x19, x20, [sp, #16]
    ddb8:	ldp	x29, x30, [sp], #48
    ddbc:	ret
    ddc0:	ldp	x21, x22, [sp, #32]
    ddc4:	nop
    ddc8:	mov	w0, #0x1                   	// #1
    ddcc:	ldp	x19, x20, [sp, #16]
    ddd0:	ldp	x29, x30, [sp], #48
    ddd4:	ret
    ddd8:	cmp	w1, #0x13
    dddc:	b.eq	de6c <lzma_crc64@@XZ_5.0+0x1794>  // b.none
    dde0:	cmp	w1, #0x14
    dde4:	b.ne	de98 <lzma_crc64@@XZ_5.0+0x17c0>  // b.any
    dde8:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    ddec:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    ddf0:	ldr	x4, [x4, #4016]
    ddf4:	ldr	x2, [x2, #4000]
    ddf8:	stp	x4, x2, [x19, #48]
    ddfc:	b	dcdc <lzma_crc64@@XZ_5.0+0x1604>
    de00:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de04:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de08:	cmp	w7, #0x1
    de0c:	ldr	x1, [x1, #4048]
    de10:	ldr	x0, [x0, #4032]
    de14:	stp	x1, x0, [x19, #48]
    de18:	b.ls	ddc0 <lzma_crc64@@XZ_5.0+0x16e8>  // b.plast
    de1c:	mov	w1, #0x10000               	// #65536
    de20:	mov	w0, #0xffff                	// #65535
    de24:	mov	w2, w1
    de28:	str	w0, [x19, #88]
    de2c:	ldr	w0, [x19, #108]
    de30:	mov	w22, #0x10                  	// #16
    de34:	str	w1, [x19, #108]
    de38:	ldr	w1, [x19, #112]
    de3c:	lsl	w5, w5, #1
    de40:	b	dd48 <lzma_crc64@@XZ_5.0+0x1670>
    de44:	ldp	x19, x20, [sp, #16]
    de48:	ldp	x21, x22, [sp, #32]
    de4c:	ldp	x29, x30, [sp], #48
    de50:	ret
    de54:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de58:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de5c:	ldr	x4, [x4, #3896]
    de60:	ldr	x2, [x2, #3912]
    de64:	stp	x4, x2, [x19, #48]
    de68:	b	dcdc <lzma_crc64@@XZ_5.0+0x1604>
    de6c:	adrp	x4, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de70:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    de74:	ldr	x4, [x4, #3888]
    de78:	ldr	x2, [x2, #3928]
    de7c:	stp	x4, x2, [x19, #48]
    de80:	b	dcdc <lzma_crc64@@XZ_5.0+0x1604>
    de84:	mov	w2, #0x400                 	// #1024
    de88:	mov	w0, #0xffffff              	// #16777215
    de8c:	movk	w2, #0x100, lsl #16
    de90:	str	w0, [x19, #88]
    de94:	b	dd30 <lzma_crc64@@XZ_5.0+0x1658>
    de98:	mov	w0, #0x1                   	// #1
    de9c:	ldp	x21, x22, [sp, #32]
    dea0:	b	ddcc <lzma_crc64@@XZ_5.0+0x16f4>
    dea4:	nop
    dea8:	ldr	x2, [x0, #24]
    deac:	cbz	x2, df08 <lzma_crc64@@XZ_5.0+0x1830>
    deb0:	stp	x29, x30, [sp, #-48]!
    deb4:	mov	x29, sp
    deb8:	stp	x19, x20, [sp, #16]
    debc:	mov	x19, x0
    dec0:	mov	x20, x3
    dec4:	ldr	x0, [x0]
    dec8:	str	x21, [sp, #32]
    decc:	mov	x21, x1
    ded0:	mov	x1, x3
    ded4:	blr	x2
    ded8:	cbz	w0, deec <lzma_crc64@@XZ_5.0+0x1814>
    dedc:	ldp	x19, x20, [sp, #16]
    dee0:	ldr	x21, [sp, #32]
    dee4:	ldp	x29, x30, [sp], #48
    dee8:	ret
    deec:	add	x2, x20, #0x10
    def0:	mov	x1, x21
    def4:	add	x0, x19, #0x98
    def8:	ldp	x19, x20, [sp, #16]
    defc:	ldr	x21, [sp, #32]
    df00:	ldp	x29, x30, [sp], #48
    df04:	b	3908 <lzma_version_string@@XZ_5.0+0x220>
    df08:	mov	w0, #0xb                   	// #11
    df0c:	ret
    df10:	stp	x29, x30, [sp, #-144]!
    df14:	mov	x2, x0
    df18:	mov	x1, #0x0                   	// #0
    df1c:	mov	x29, sp
    df20:	add	x0, sp, #0x18
    df24:	stp	xzr, xzr, [sp, #24]
    df28:	stp	xzr, xzr, [sp, #40]
    df2c:	stp	xzr, xzr, [sp, #56]
    df30:	stp	xzr, xzr, [sp, #72]
    df34:	stp	xzr, xzr, [sp, #88]
    df38:	stp	xzr, xzr, [sp, #104]
    df3c:	stp	xzr, xzr, [sp, #120]
    df40:	str	xzr, [sp, #136]
    df44:	bl	dbf8 <lzma_crc64@@XZ_5.0+0x1520>
    df48:	tst	w0, #0xff
    df4c:	b.ne	df6c <lzma_crc64@@XZ_5.0+0x1894>  // b.any
    df50:	ldp	w0, w2, [sp, #132]
    df54:	ldr	w1, [sp, #32]
    df58:	add	x0, x0, x2
    df5c:	add	x1, x1, #0xe0
    df60:	add	x0, x1, x0, lsl #2
    df64:	ldp	x29, x30, [sp], #144
    df68:	ret
    df6c:	mov	x0, #0xffffffffffffffff    	// #-1
    df70:	ldp	x29, x30, [sp], #144
    df74:	ret
    df78:	stp	x29, x30, [sp, #-128]!
    df7c:	mov	x29, sp
    df80:	stp	x19, x20, [sp, #16]
    df84:	mov	x20, x1
    df88:	ldr	x19, [x0]
    df8c:	stp	x21, x22, [sp, #32]
    df90:	mov	x22, x2
    df94:	stp	x23, x24, [sp, #48]
    df98:	mov	x23, x3
    df9c:	cbz	x19, e0a0 <lzma_crc64@@XZ_5.0+0x19c8>
    dfa0:	ldr	x2, [x22, #16]
    dfa4:	add	x24, sp, #0x40
    dfa8:	mov	x3, x24
    dfac:	mov	x1, x20
    dfb0:	mov	x0, x19
    dfb4:	blr	x23
    dfb8:	cbz	w0, dfd0 <lzma_crc64@@XZ_5.0+0x18f8>
    dfbc:	ldp	x19, x20, [sp, #16]
    dfc0:	ldp	x21, x22, [sp, #32]
    dfc4:	ldp	x23, x24, [sp, #48]
    dfc8:	ldp	x29, x30, [sp], #128
    dfcc:	ret
    dfd0:	add	x21, x19, #0x20
    dfd4:	mov	x2, x24
    dfd8:	mov	x0, x21
    dfdc:	mov	x1, x20
    dfe0:	bl	dbf8 <lzma_crc64@@XZ_5.0+0x1520>
    dfe4:	tst	w0, #0xff
    dfe8:	mov	w0, #0x8                   	// #8
    dfec:	b.ne	dfbc <lzma_crc64@@XZ_5.0+0x18e4>  // b.any
    dff0:	ldr	x0, [x19, #32]
    dff4:	cbz	x0, e168 <lzma_crc64@@XZ_5.0+0x1a90>
    dff8:	ldr	w0, [x21, #84]
    dffc:	str	w0, [x21, #20]
    e000:	ldr	x0, [x21, #64]
    e004:	stp	xzr, xzr, [x19, #56]
    e008:	ldr	w2, [x21, #108]
    e00c:	str	wzr, [x21, #40]
    e010:	lsl	x2, x2, #2
    e014:	cbz	x0, e10c <lzma_crc64@@XZ_5.0+0x1a34>
    e018:	mov	w1, #0x0                   	// #0
    e01c:	bl	3230 <memset@plt>
    e020:	ldr	x1, [sp, #112]
    e024:	str	wzr, [x21, #80]
    e028:	cbz	x1, e034 <lzma_crc64@@XZ_5.0+0x195c>
    e02c:	ldr	w2, [sp, #120]
    e030:	cbnz	w2, e05c <lzma_crc64@@XZ_5.0+0x1984>
    e034:	str	wzr, [x21, #104]
    e038:	add	x2, x22, #0x18
    e03c:	mov	x1, x20
    e040:	add	x0, x19, #0x98
    e044:	bl	3880 <lzma_version_string@@XZ_5.0+0x198>
    e048:	ldp	x19, x20, [sp, #16]
    e04c:	ldp	x21, x22, [sp, #32]
    e050:	ldp	x23, x24, [sp, #48]
    e054:	ldp	x29, x30, [sp], #128
    e058:	ret
    e05c:	ldr	w3, [x21, #8]
    e060:	mov	w4, w2
    e064:	ldr	x0, [x21]
    e068:	cmp	w3, w2
    e06c:	csel	w2, w3, w2, ls  // ls = plast
    e070:	str	w2, [x21, #36]
    e074:	mov	w2, w2
    e078:	sub	x4, x4, x2
    e07c:	add	x1, x1, x4
    e080:	bl	3090 <memcpy@plt>
    e084:	ldr	w1, [x21, #36]
    e088:	mov	w0, #0x1                   	// #1
    e08c:	ldr	x2, [x21, #56]
    e090:	str	w0, [x21, #104]
    e094:	mov	x0, x21
    e098:	blr	x2
    e09c:	b	e034 <lzma_crc64@@XZ_5.0+0x195c>
    e0a0:	mov	x21, x0
    e0a4:	mov	x0, #0xe0                  	// #224
    e0a8:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    e0ac:	mov	x19, x0
    e0b0:	cbz	x0, e17c <lzma_crc64@@XZ_5.0+0x1aa4>
    e0b4:	adrp	x2, d000 <lzma_crc64@@XZ_5.0+0x928>
    e0b8:	adrp	x1, d000 <lzma_crc64@@XZ_5.0+0x928>
    e0bc:	add	x2, x2, #0x988
    e0c0:	add	x1, x1, #0x908
    e0c4:	adrp	x0, d000 <lzma_crc64@@XZ_5.0+0x928>
    e0c8:	mov	x3, #0xffffffffffffffff    	// #-1
    e0cc:	add	x0, x0, #0xea8
    e0d0:	stp	xzr, xzr, [x19]
    e0d4:	str	x19, [x21]
    e0d8:	str	xzr, [x19, #16]
    e0dc:	stp	x2, x1, [x21, #24]
    e0e0:	str	xzr, [x19, #32]
    e0e4:	str	wzr, [x19, #40]
    e0e8:	str	x0, [x21, #64]
    e0ec:	stp	xzr, xzr, [x19, #96]
    e0f0:	stur	xzr, [x19, #140]
    e0f4:	stp	xzr, x3, [x19, #152]
    e0f8:	stp	xzr, xzr, [x19, #168]
    e0fc:	stp	xzr, xzr, [x19, #184]
    e100:	stp	xzr, xzr, [x19, #200]
    e104:	str	xzr, [x19, #216]
    e108:	b	dfa0 <lzma_crc64@@XZ_5.0+0x18c8>
    e10c:	mov	x0, x2
    e110:	mov	x1, x20
    e114:	bl	3728 <lzma_version_string@@XZ_5.0+0x40>
    e118:	str	x0, [x21, #64]
    e11c:	ldr	w2, [x21, #112]
    e120:	mov	x1, x20
    e124:	lsl	x0, x2, #2
    e128:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    e12c:	str	x0, [x21, #72]
    e130:	ldr	x1, [x21, #64]
    e134:	cmp	x0, #0x0
    e138:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    e13c:	b.ne	e020 <lzma_crc64@@XZ_5.0+0x1948>  // b.any
    e140:	mov	x0, x1
    e144:	mov	x1, x20
    e148:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    e14c:	str	xzr, [x21, #64]
    e150:	ldr	x0, [x21, #72]
    e154:	mov	x1, x20
    e158:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    e15c:	str	xzr, [x21, #72]
    e160:	mov	w0, #0x5                   	// #5
    e164:	b	dfbc <lzma_crc64@@XZ_5.0+0x18e4>
    e168:	ldr	w0, [x21, #8]
    e16c:	mov	x1, x20
    e170:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    e174:	str	x0, [x21]
    e178:	cbnz	x0, dff8 <lzma_crc64@@XZ_5.0+0x1920>
    e17c:	mov	w0, #0x5                   	// #5
    e180:	b	dfbc <lzma_crc64@@XZ_5.0+0x18e4>
    e184:	nop

000000000000e188 <lzma_mf_is_supported@@XZ_5.0>:
    e188:	mov	w1, w0
    e18c:	cmp	w0, #0x3
    e190:	b.eq	e1cc <lzma_mf_is_supported@@XZ_5.0+0x44>  // b.none
    e194:	cmp	w0, #0x4
    e198:	mov	w2, #0x1                   	// #1
    e19c:	b.ne	e1a8 <lzma_mf_is_supported@@XZ_5.0+0x20>  // b.any
    e1a0:	mov	w0, w2
    e1a4:	ret
    e1a8:	cmp	w0, #0x12
    e1ac:	mov	w0, w2
    e1b0:	b.eq	e1a4 <lzma_mf_is_supported@@XZ_5.0+0x1c>  // b.none
    e1b4:	cmp	w1, #0x13
    e1b8:	b.eq	e1a4 <lzma_mf_is_supported@@XZ_5.0+0x1c>  // b.none
    e1bc:	cmp	w1, #0x14
    e1c0:	mov	w2, #0x0                   	// #0
    e1c4:	b.ne	e1a0 <lzma_mf_is_supported@@XZ_5.0+0x18>  // b.any
    e1c8:	ret
    e1cc:	mov	w2, #0x1                   	// #1
    e1d0:	mov	w0, w2
    e1d4:	b	e1a4 <lzma_mf_is_supported@@XZ_5.0+0x1c>
    e1d8:	str	w3, [x5, w6, uxtw #2]
    e1dc:	cmp	w4, #0x0
    e1e0:	sub	w8, w1, w3
    e1e4:	ldr	w11, [sp, #8]
    e1e8:	sub	w9, w4, #0x1
    e1ec:	mov	w15, w0
    e1f0:	ccmp	w7, w8, #0x0, ne  // ne = any
    e1f4:	b.ls	e2ec <lzma_mf_is_supported@@XZ_5.0+0x164>  // b.plast
    e1f8:	sub	w13, w6, w1
    e1fc:	ldr	x0, [sp]
    e200:	b	e220 <lzma_mf_is_supported@@XZ_5.0+0x98>
    e204:	sub	w8, w1, w3
    e208:	cmp	w8, w7
    e20c:	cset	w4, cs  // cs = hs, nlast
    e210:	cmp	w9, #0x0
    e214:	csinc	w4, w4, wzr, ne  // ne = any
    e218:	sub	w9, w9, #0x1
    e21c:	cbnz	w4, e2bc <lzma_mf_is_supported@@XZ_5.0+0x134>
    e220:	cmp	w6, w8
    e224:	add	w4, w3, w7
    e228:	sub	x10, x2, w8, uxtw
    e22c:	csel	w3, w4, w3, cc  // cc = lo, ul, last
    e230:	add	w3, w13, w3
    e234:	ldrb	w4, [x2, w11, uxtw]
    e238:	ldrb	w12, [x10, w11, uxtw]
    e23c:	ldr	w3, [x5, x3, lsl #2]
    e240:	cmp	w12, w4
    e244:	b.ne	e204 <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.any
    e248:	ldrb	w12, [x10]
    e24c:	ldrb	w4, [x2]
    e250:	cmp	w12, w4
    e254:	b.ne	e204 <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.any
    e258:	cmp	w15, #0x1
    e25c:	mov	x4, #0x1                   	// #1
    e260:	b.hi	e274 <lzma_mf_is_supported@@XZ_5.0+0xec>  // b.pmore
    e264:	b	e2c0 <lzma_mf_is_supported@@XZ_5.0+0x138>
    e268:	add	x4, x4, #0x1
    e26c:	cmp	w15, w4
    e270:	b.ls	e2c8 <lzma_mf_is_supported@@XZ_5.0+0x140>  // b.plast
    e274:	ldrb	w14, [x10, x4]
    e278:	add	w16, w4, #0x1
    e27c:	ldrb	w12, [x2, x4]
    e280:	cmp	w14, w12
    e284:	b.eq	e268 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.none
    e288:	cmp	w11, w4
    e28c:	b.cs	e204 <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.hs, b.nlast
    e290:	sub	w8, w8, #0x1
    e294:	stp	w4, w8, [x0]
    e298:	sub	w8, w1, w3
    e29c:	mov	w11, w4
    e2a0:	cmp	w8, w7
    e2a4:	add	x0, x0, #0x8
    e2a8:	cset	w4, cs  // cs = hs, nlast
    e2ac:	cmp	w9, #0x0
    e2b0:	csinc	w4, w4, wzr, ne  // ne = any
    e2b4:	sub	w9, w9, #0x1
    e2b8:	cbz	w4, e220 <lzma_mf_is_supported@@XZ_5.0+0x98>
    e2bc:	ret
    e2c0:	mov	w16, w4
    e2c4:	nop
    e2c8:	cmp	w16, w11
    e2cc:	b.ls	e204 <lzma_mf_is_supported@@XZ_5.0+0x7c>  // b.plast
    e2d0:	sub	w8, w8, #0x1
    e2d4:	stp	w16, w8, [x0]
    e2d8:	cmp	w15, w16
    e2dc:	add	x0, x0, #0x8
    e2e0:	b.eq	e2bc <lzma_mf_is_supported@@XZ_5.0+0x134>  // b.none
    e2e4:	mov	w11, w16
    e2e8:	b	e204 <lzma_mf_is_supported@@XZ_5.0+0x7c>
    e2ec:	ldr	x0, [sp]
    e2f0:	ret
    e2f4:	nop
    e2f8:	stp	x29, x30, [sp, #-64]!
    e2fc:	ubfiz	x30, x6, #3, #31
    e300:	cmp	w4, #0x0
    e304:	mov	x29, sp
    e308:	stp	x19, x20, [sp, #16]
    e30c:	sub	w14, w1, w3
    e310:	mov	x19, x30
    e314:	stp	x21, x22, [sp, #32]
    e318:	add	x30, x30, #0x4
    e31c:	ldr	w21, [sp, #72]
    e320:	add	x19, x5, x19
    e324:	add	x30, x5, x30
    e328:	ccmp	w7, w14, #0x0, ne  // ne = any
    e32c:	b.ls	e4a8 <lzma_mf_is_supported@@XZ_5.0+0x320>  // b.plast
    e330:	mov	w18, w0
    e334:	sub	w15, w4, #0x1
    e338:	sub	w20, w6, w1
    e33c:	mov	w17, #0x0                   	// #0
    e340:	mov	w16, #0x0                   	// #0
    e344:	str	x23, [sp, #48]
    e348:	ldr	x0, [sp, #64]
    e34c:	b	e380 <lzma_mf_is_supported@@XZ_5.0+0x1f8>
    e350:	str	w3, [x19]
    e354:	cmp	w15, #0x0
    e358:	cset	w4, eq  // eq = none
    e35c:	mov	w17, w9
    e360:	ldr	w3, [x13, #4]
    e364:	add	x19, x13, #0x4
    e368:	sub	w15, w15, #0x1
    e36c:	sub	w14, w1, w3
    e370:	cmp	w14, w7
    e374:	cset	w8, cs  // cs = hs, nlast
    e378:	orr	w4, w4, w8
    e37c:	cbnz	w4, e3f0 <lzma_mf_is_supported@@XZ_5.0+0x268>
    e380:	cmp	w6, w14
    e384:	add	w4, w7, w3
    e388:	csel	w4, w4, w3, cc  // cc = lo, ul, last
    e38c:	cmp	w17, w16
    e390:	csel	w9, w17, w16, ls  // ls = plast
    e394:	sub	x12, x2, w14, uxtw
    e398:	add	w4, w20, w4
    e39c:	ldrb	w10, [x12, w9, uxtw]
    e3a0:	ubfiz	x13, x4, #3, #31
    e3a4:	ldrb	w11, [x2, w9, uxtw]
    e3a8:	add	x13, x5, x13
    e3ac:	lsl	w8, w4, #1
    e3b0:	cmp	w10, w11
    e3b4:	b.eq	e40c <lzma_mf_is_supported@@XZ_5.0+0x284>  // b.none
    e3b8:	cmp	w10, w11
    e3bc:	b.cc	e350 <lzma_mf_is_supported@@XZ_5.0+0x1c8>  // b.lo, b.ul, b.last
    e3c0:	str	w3, [x30]
    e3c4:	cmp	w15, #0x0
    e3c8:	cset	w4, eq  // eq = none
    e3cc:	mov	w16, w9
    e3d0:	ldr	w3, [x5, x8, lsl #2]
    e3d4:	mov	x30, x13
    e3d8:	sub	w15, w15, #0x1
    e3dc:	sub	w14, w1, w3
    e3e0:	cmp	w14, w7
    e3e4:	cset	w8, cs  // cs = hs, nlast
    e3e8:	orr	w4, w4, w8
    e3ec:	cbz	w4, e380 <lzma_mf_is_supported@@XZ_5.0+0x1f8>
    e3f0:	ldr	x23, [sp, #48]
    e3f4:	str	wzr, [x30]
    e3f8:	str	wzr, [x19]
    e3fc:	ldp	x19, x20, [sp, #16]
    e400:	ldp	x21, x22, [sp, #32]
    e404:	ldp	x29, x30, [sp], #64
    e408:	ret
    e40c:	add	w9, w9, #0x1
    e410:	cmp	w9, w18
    e414:	b.cs	e470 <lzma_mf_is_supported@@XZ_5.0+0x2e8>  // b.hs, b.nlast
    e418:	mov	w4, w9
    e41c:	b	e430 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    e420:	add	w9, w4, #0x1
    e424:	add	x4, x4, #0x1
    e428:	cmp	w18, w4
    e42c:	b.ls	e470 <lzma_mf_is_supported@@XZ_5.0+0x2e8>  // b.plast
    e430:	ldrb	w10, [x12, x4]
    e434:	mov	w9, w4
    e438:	ldrb	w11, [x2, x4]
    e43c:	add	x23, x12, x4
    e440:	add	x22, x2, x4
    e444:	cmp	w10, w11
    e448:	b.eq	e420 <lzma_mf_is_supported@@XZ_5.0+0x298>  // b.none
    e44c:	cmp	w4, w21
    e450:	b.ls	e3b8 <lzma_mf_is_supported@@XZ_5.0+0x230>  // b.plast
    e454:	sub	w14, w14, #0x1
    e458:	stp	w4, w14, [x0]
    e45c:	mov	w21, w4
    e460:	add	x0, x0, #0x8
    e464:	ldrb	w10, [x23]
    e468:	ldrb	w11, [x22]
    e46c:	b	e3b8 <lzma_mf_is_supported@@XZ_5.0+0x230>
    e470:	cmp	w21, w9
    e474:	b.cc	e484 <lzma_mf_is_supported@@XZ_5.0+0x2fc>  // b.lo, b.ul, b.last
    e478:	ldrb	w10, [x12, w9, uxtw]
    e47c:	ldrb	w11, [x2, w9, uxtw]
    e480:	b	e3b8 <lzma_mf_is_supported@@XZ_5.0+0x230>
    e484:	sub	w14, w14, #0x1
    e488:	stp	w9, w14, [x0]
    e48c:	cmp	w18, w9
    e490:	add	x0, x0, #0x8
    e494:	b.eq	e4b0 <lzma_mf_is_supported@@XZ_5.0+0x328>  // b.none
    e498:	ldrb	w10, [x12, w9, uxtw]
    e49c:	mov	w21, w9
    e4a0:	ldrb	w11, [x2, w9, uxtw]
    e4a4:	b	e3b8 <lzma_mf_is_supported@@XZ_5.0+0x230>
    e4a8:	ldr	x0, [sp, #64]
    e4ac:	b	e3f4 <lzma_mf_is_supported@@XZ_5.0+0x26c>
    e4b0:	ldr	w1, [x13]
    e4b4:	ldr	x23, [sp, #48]
    e4b8:	str	w1, [x19]
    e4bc:	ldr	w1, [x13, #4]
    e4c0:	str	w1, [x30]
    e4c4:	b	e3fc <lzma_mf_is_supported@@XZ_5.0+0x274>
    e4c8:	ubfiz	x17, x6, #3, #31
    e4cc:	cmp	w4, #0x0
    e4d0:	mov	x18, x17
    e4d4:	sub	w8, w1, w3
    e4d8:	add	x17, x17, #0x4
    e4dc:	add	x18, x5, x18
    e4e0:	add	x17, x5, x17
    e4e4:	ccmp	w7, w8, #0x0, ne  // ne = any
    e4e8:	b.ls	e614 <lzma_mf_is_supported@@XZ_5.0+0x48c>  // b.plast
    e4ec:	stp	x29, x30, [sp, #-16]!
    e4f0:	sub	w14, w4, #0x1
    e4f4:	sub	w30, w6, w1
    e4f8:	mov	x29, sp
    e4fc:	mov	w16, #0x0                   	// #0
    e500:	mov	w15, #0x0                   	// #0
    e504:	b	e538 <lzma_mf_is_supported@@XZ_5.0+0x3b0>
    e508:	str	w3, [x18]
    e50c:	cmp	w14, #0x0
    e510:	cset	w4, eq  // eq = none
    e514:	mov	w16, w10
    e518:	ldr	w3, [x13, #4]
    e51c:	add	x18, x13, #0x4
    e520:	sub	w14, w14, #0x1
    e524:	sub	w8, w1, w3
    e528:	cmp	w8, w7
    e52c:	cset	w9, cs  // cs = hs, nlast
    e530:	orr	w4, w4, w9
    e534:	cbnz	w4, e5a8 <lzma_mf_is_supported@@XZ_5.0+0x420>
    e538:	cmp	w6, w8
    e53c:	add	w4, w7, w3
    e540:	csel	w4, w4, w3, cc  // cc = lo, ul, last
    e544:	cmp	w15, w16
    e548:	csel	w10, w15, w16, ls  // ls = plast
    e54c:	sub	x9, x2, w8, uxtw
    e550:	add	w4, w30, w4
    e554:	ldrb	w12, [x9, w10, uxtw]
    e558:	ubfiz	x13, x4, #3, #31
    e55c:	ldrb	w11, [x2, w10, uxtw]
    e560:	add	x13, x5, x13
    e564:	lsl	w8, w4, #1
    e568:	cmp	w12, w11
    e56c:	b.eq	e5b8 <lzma_mf_is_supported@@XZ_5.0+0x430>  // b.none
    e570:	cmp	w12, w11
    e574:	b.cc	e508 <lzma_mf_is_supported@@XZ_5.0+0x380>  // b.lo, b.ul, b.last
    e578:	str	w3, [x17]
    e57c:	cmp	w14, #0x0
    e580:	cset	w4, eq  // eq = none
    e584:	mov	w15, w10
    e588:	ldr	w3, [x5, x8, lsl #2]
    e58c:	mov	x17, x13
    e590:	sub	w14, w14, #0x1
    e594:	sub	w8, w1, w3
    e598:	cmp	w8, w7
    e59c:	cset	w9, cs  // cs = hs, nlast
    e5a0:	orr	w4, w4, w9
    e5a4:	cbz	w4, e538 <lzma_mf_is_supported@@XZ_5.0+0x3b0>
    e5a8:	str	wzr, [x17]
    e5ac:	str	wzr, [x18]
    e5b0:	ldp	x29, x30, [sp], #16
    e5b4:	ret
    e5b8:	add	w10, w10, #0x1
    e5bc:	cmp	w10, w0
    e5c0:	b.cs	e5ec <lzma_mf_is_supported@@XZ_5.0+0x464>  // b.hs, b.nlast
    e5c4:	mov	w4, w10
    e5c8:	ldrb	w12, [x9, x4]
    e5cc:	mov	w10, w4
    e5d0:	ldrb	w11, [x2, x4]
    e5d4:	cmp	w12, w11
    e5d8:	b.ne	e570 <lzma_mf_is_supported@@XZ_5.0+0x3e8>  // b.any
    e5dc:	add	w10, w4, #0x1
    e5e0:	add	x4, x4, #0x1
    e5e4:	cmp	w0, w4
    e5e8:	b.hi	e5c8 <lzma_mf_is_supported@@XZ_5.0+0x440>  // b.pmore
    e5ec:	cmp	w0, w10
    e5f0:	b.eq	e600 <lzma_mf_is_supported@@XZ_5.0+0x478>  // b.none
    e5f4:	ldrb	w12, [x9, w10, uxtw]
    e5f8:	ldrb	w11, [x2, w10, uxtw]
    e5fc:	b	e570 <lzma_mf_is_supported@@XZ_5.0+0x3e8>
    e600:	ldr	w0, [x13]
    e604:	str	w0, [x18]
    e608:	ldr	w0, [x13, #4]
    e60c:	str	w0, [x17]
    e610:	b	e5b0 <lzma_mf_is_supported@@XZ_5.0+0x428>
    e614:	str	wzr, [x17]
    e618:	str	wzr, [x18]
    e61c:	ret
    e620:	ldp	w2, w3, [x0, #80]
    e624:	ldp	w4, w1, [x0, #20]
    e628:	add	w2, w2, #0x1
    e62c:	cmp	w2, w3
    e630:	csel	w2, w2, wzr, ne  // ne = any
    e634:	add	w1, w1, #0x1
    e638:	str	w1, [x0, #24]
    e63c:	add	w1, w1, w4
    e640:	str	w2, [x0, #80]
    e644:	cmn	w1, #0x1
    e648:	b.eq	e650 <lzma_mf_is_supported@@XZ_5.0+0x4c8>  // b.none
    e64c:	ret
    e650:	ldr	w1, [x0, #108]
    e654:	mvn	w2, w3
    e658:	cbz	w1, e690 <lzma_mf_is_supported@@XZ_5.0+0x508>
    e65c:	ldr	x5, [x0, #64]
    e660:	mov	w3, #0x0                   	// #0
    e664:	nop
    e668:	mov	w4, w3
    e66c:	add	w3, w3, #0x1
    e670:	ldr	w1, [x5, x4, lsl #2]
    e674:	cmp	w2, w1
    e678:	sub	w1, w1, w2
    e67c:	csel	w1, w1, wzr, cc  // cc = lo, ul, last
    e680:	str	w1, [x5, x4, lsl #2]
    e684:	ldr	w1, [x0, #108]
    e688:	cmp	w3, w1
    e68c:	b.cc	e668 <lzma_mf_is_supported@@XZ_5.0+0x4e0>  // b.lo, b.ul, b.last
    e690:	ldr	w1, [x0, #112]
    e694:	cbz	w1, e6c8 <lzma_mf_is_supported@@XZ_5.0+0x540>
    e698:	ldr	x5, [x0, #72]
    e69c:	mov	w3, #0x0                   	// #0
    e6a0:	mov	w4, w3
    e6a4:	add	w3, w3, #0x1
    e6a8:	ldr	w1, [x5, x4, lsl #2]
    e6ac:	cmp	w2, w1
    e6b0:	sub	w1, w1, w2
    e6b4:	csel	w1, w1, wzr, cc  // cc = lo, ul, last
    e6b8:	str	w1, [x5, x4, lsl #2]
    e6bc:	ldr	w1, [x0, #112]
    e6c0:	cmp	w3, w1
    e6c4:	b.cc	e6a0 <lzma_mf_is_supported@@XZ_5.0+0x518>  // b.lo, b.ul, b.last
    e6c8:	ldr	w1, [x0, #20]
    e6cc:	sub	w2, w1, w2
    e6d0:	str	w2, [x0, #20]
    e6d4:	ret
    e6d8:	stp	x29, x30, [sp, #-48]!
    e6dc:	mov	x29, sp
    e6e0:	stp	x19, x20, [sp, #16]
    e6e4:	mov	x20, x2
    e6e8:	mov	x19, x0
    e6ec:	str	x21, [sp, #32]
    e6f0:	mov	x21, x1
    e6f4:	mov	x1, x2
    e6f8:	ldr	x2, [x0, #48]
    e6fc:	blr	x2
    e700:	mov	w3, w0
    e704:	cbz	w0, e744 <lzma_mf_is_supported@@XZ_5.0+0x5bc>
    e708:	sub	w0, w0, #0x1
    e70c:	ldr	w1, [x19, #96]
    e710:	lsl	x0, x0, #3
    e714:	add	x4, x20, x0
    e718:	ldr	w0, [x20, x0]
    e71c:	cmp	w1, w0
    e720:	b.eq	e768 <lzma_mf_is_supported@@XZ_5.0+0x5e0>  // b.none
    e724:	str	w3, [x21]
    e728:	ldr	x21, [sp, #32]
    e72c:	ldr	w1, [x19, #28]
    e730:	add	w1, w1, #0x1
    e734:	str	w1, [x19, #28]
    e738:	ldp	x19, x20, [sp, #16]
    e73c:	ldp	x29, x30, [sp], #48
    e740:	ret
    e744:	str	w3, [x21]
    e748:	mov	w0, #0x0                   	// #0
    e74c:	ldr	x21, [sp, #32]
    e750:	ldr	w1, [x19, #28]
    e754:	add	w1, w1, #0x1
    e758:	str	w1, [x19, #28]
    e75c:	ldp	x19, x20, [sp, #16]
    e760:	ldp	x29, x30, [sp], #48
    e764:	ret
    e768:	ldr	w2, [x19, #36]
    e76c:	ldr	w1, [x19, #24]
    e770:	ldr	w5, [x19, #100]
    e774:	add	w2, w2, #0x1
    e778:	sub	w2, w2, w1
    e77c:	ldr	w6, [x4, #4]
    e780:	cmp	w5, w2
    e784:	mov	w1, w1
    e788:	csel	w5, w5, w2, ls  // ls = plast
    e78c:	mvn	x6, x6
    e790:	sub	x1, x1, #0x1
    e794:	cmp	w5, w0
    e798:	ldr	x2, [x19]
    e79c:	b.ls	e724 <lzma_mf_is_supported@@XZ_5.0+0x59c>  // b.plast
    e7a0:	add	x1, x1, w0, uxtw
    e7a4:	add	x2, x2, x1
    e7a8:	b	e7b8 <lzma_mf_is_supported@@XZ_5.0+0x630>
    e7ac:	add	w0, w0, #0x1
    e7b0:	cmp	w5, w0
    e7b4:	b.eq	e724 <lzma_mf_is_supported@@XZ_5.0+0x59c>  // b.none
    e7b8:	ldrb	w4, [x2]
    e7bc:	ldrb	w1, [x2, x6]
    e7c0:	add	x2, x2, #0x1
    e7c4:	cmp	w4, w1
    e7c8:	b.eq	e7ac <lzma_mf_is_supported@@XZ_5.0+0x624>  // b.none
    e7cc:	b	e724 <lzma_mf_is_supported@@XZ_5.0+0x59c>
    e7d0:	sub	sp, sp, #0x30
    e7d4:	mov	x18, x0
    e7d8:	stp	x29, x30, [sp, #16]
    e7dc:	add	x29, sp, #0x10
    e7e0:	ldr	w8, [x0, #24]
    e7e4:	str	x19, [sp, #32]
    e7e8:	mov	x19, x1
    e7ec:	ldr	w1, [x0, #36]
    e7f0:	ldr	w0, [x0, #96]
    e7f4:	sub	w1, w1, w8
    e7f8:	cmp	w0, w1
    e7fc:	b.ls	e80c <lzma_mf_is_supported@@XZ_5.0+0x684>  // b.plast
    e800:	cmp	w1, #0x2
    e804:	mov	w0, w1
    e808:	b.ls	e91c <lzma_mf_is_supported@@XZ_5.0+0x794>  // b.plast
    e80c:	ldr	x10, [x18]
    e810:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    e814:	ldr	w3, [x18, #88]
    e818:	ldr	x1, [x1, #3952]
    e81c:	add	x2, x10, w8, uxtw
    e820:	ldrb	w5, [x10, w8, uxtw]
    e824:	ldr	x7, [x18, #64]
    e828:	ldrb	w6, [x2, #1]
    e82c:	ldrb	w4, [x2, #2]
    e830:	ldr	w5, [x1, x5, lsl #2]
    e834:	ldr	w1, [x18, #20]
    e838:	eor	w6, w6, w5
    e83c:	eor	w4, w6, w4, lsl #8
    e840:	and	x6, x6, #0x3ff
    e844:	and	w4, w4, w3
    e848:	add	w1, w8, w1
    e84c:	add	w4, w4, #0x400
    e850:	ldr	w9, [x7, x6, lsl #2]
    e854:	ldr	x5, [x18, #72]
    e858:	sub	w9, w1, w9
    e85c:	ldr	w3, [x7, x4, lsl #2]
    e860:	str	w1, [x7, x6, lsl #2]
    e864:	str	w1, [x7, x4, lsl #2]
    e868:	ldr	w7, [x18, #84]
    e86c:	cmp	w7, w9
    e870:	b.ls	e8c8 <lzma_mf_is_supported@@XZ_5.0+0x740>  // b.plast
    e874:	sub	x12, x2, w9, uxtw
    e878:	ldrb	w4, [x10, w8, uxtw]
    e87c:	ldr	w6, [x18, #80]
    e880:	mov	x10, x19
    e884:	mov	w8, #0x2                   	// #2
    e888:	ldrb	w11, [x12]
    e88c:	cmp	w11, w4
    e890:	b.eq	e8d8 <lzma_mf_is_supported@@XZ_5.0+0x750>  // b.none
    e894:	ldr	w4, [x18, #92]
    e898:	str	x10, [sp]
    e89c:	str	w8, [sp, #8]
    e8a0:	bl	e1d8 <lzma_mf_is_supported@@XZ_5.0+0x50>
    e8a4:	sub	x6, x0, x19
    e8a8:	mov	x0, x18
    e8ac:	ubfx	x6, x6, #3, #32
    e8b0:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    e8b4:	mov	w0, w6
    e8b8:	ldp	x29, x30, [sp, #16]
    e8bc:	ldr	x19, [sp, #32]
    e8c0:	add	sp, sp, #0x30
    e8c4:	ret
    e8c8:	ldr	w6, [x18, #80]
    e8cc:	mov	x10, x19
    e8d0:	mov	w8, #0x2                   	// #2
    e8d4:	b	e894 <lzma_mf_is_supported@@XZ_5.0+0x70c>
    e8d8:	cmp	w0, w8
    e8dc:	mov	x4, #0x2                   	// #2
    e8e0:	b.hi	e8f8 <lzma_mf_is_supported@@XZ_5.0+0x770>  // b.pmore
    e8e4:	b	e948 <lzma_mf_is_supported@@XZ_5.0+0x7c0>
    e8e8:	add	w8, w4, #0x1
    e8ec:	add	x4, x4, #0x1
    e8f0:	cmp	w0, w4
    e8f4:	b.ls	e948 <lzma_mf_is_supported@@XZ_5.0+0x7c0>  // b.plast
    e8f8:	ldrb	w11, [x12, x4]
    e8fc:	mov	w8, w4
    e900:	ldrb	w10, [x2, x4]
    e904:	cmp	w11, w10
    e908:	b.eq	e8e8 <lzma_mf_is_supported@@XZ_5.0+0x760>  // b.none
    e90c:	sub	w9, w9, #0x1
    e910:	add	x10, x19, #0x8
    e914:	stp	w4, w9, [x19]
    e918:	b	e894 <lzma_mf_is_supported@@XZ_5.0+0x70c>
    e91c:	ldr	w0, [x18, #40]
    e920:	add	w8, w8, #0x1
    e924:	mov	w6, #0x0                   	// #0
    e928:	str	w8, [x18, #24]
    e92c:	add	w0, w0, #0x1
    e930:	str	w0, [x18, #40]
    e934:	mov	w0, w6
    e938:	ldp	x29, x30, [sp, #16]
    e93c:	ldr	x19, [sp, #32]
    e940:	add	sp, sp, #0x30
    e944:	ret
    e948:	sub	w9, w9, #0x1
    e94c:	stp	w8, w9, [x19]
    e950:	add	x10, x19, #0x8
    e954:	cmp	w0, w8
    e958:	b.ne	e894 <lzma_mf_is_supported@@XZ_5.0+0x70c>  // b.any
    e95c:	str	w3, [x5, w6, uxtw #2]
    e960:	mov	w6, #0x1                   	// #1
    e964:	mov	x0, x18
    e968:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    e96c:	b	e8b4 <lzma_mf_is_supported@@XZ_5.0+0x72c>
    e970:	adrp	x8, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    e974:	mov	x6, x0
    e978:	mov	w7, w1
    e97c:	ldr	x8, [x8, #3952]
    e980:	mov	x0, x6
    e984:	ldr	w2, [x6, #24]
    e988:	ldr	w3, [x6, #36]
    e98c:	add	w1, w2, #0x1
    e990:	sub	w3, w3, w2
    e994:	cmp	w3, #0x2
    e998:	b.hi	e9b8 <lzma_mf_is_supported@@XZ_5.0+0x830>  // b.pmore
    e99c:	ldr	w0, [x6, #40]
    e9a0:	subs	w7, w7, #0x1
    e9a4:	str	w1, [x6, #24]
    e9a8:	add	w0, w0, #0x1
    e9ac:	str	w0, [x6, #40]
    e9b0:	b.ne	e980 <lzma_mf_is_supported@@XZ_5.0+0x7f8>  // b.any
    e9b4:	ret
    e9b8:	stp	x29, x30, [sp, #-16]!
    e9bc:	mov	x29, sp
    e9c0:	ldr	x4, [x6]
    e9c4:	ldr	w9, [x6, #88]
    e9c8:	ldr	x1, [x6, #64]
    e9cc:	add	x5, x4, w2, uxtw
    e9d0:	ldrb	w10, [x4, w2, uxtw]
    e9d4:	ldr	w11, [x6, #20]
    e9d8:	ldrb	w4, [x5, #1]
    e9dc:	ldrb	w3, [x5, #2]
    e9e0:	add	w2, w2, w11
    e9e4:	ldr	w10, [x8, x10, lsl #2]
    e9e8:	ldr	x5, [x6, #72]
    e9ec:	eor	w4, w4, w10
    e9f0:	eor	w3, w4, w3, lsl #8
    e9f4:	and	x4, x4, #0x3ff
    e9f8:	and	w3, w3, w9
    e9fc:	add	w3, w3, #0x400
    ea00:	ldr	w9, [x1, x3, lsl #2]
    ea04:	str	w2, [x1, x4, lsl #2]
    ea08:	str	w2, [x1, x3, lsl #2]
    ea0c:	ldr	w1, [x6, #80]
    ea10:	str	w9, [x5, x1, lsl #2]
    ea14:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    ea18:	subs	w7, w7, #0x1
    ea1c:	b.eq	ea54 <lzma_mf_is_supported@@XZ_5.0+0x8cc>  // b.none
    ea20:	ldr	w2, [x6, #24]
    ea24:	mov	x0, x6
    ea28:	ldr	w3, [x6, #36]
    ea2c:	add	w1, w2, #0x1
    ea30:	sub	w3, w3, w2
    ea34:	cmp	w3, #0x2
    ea38:	b.hi	e9c0 <lzma_mf_is_supported@@XZ_5.0+0x838>  // b.pmore
    ea3c:	ldr	w0, [x6, #40]
    ea40:	subs	w7, w7, #0x1
    ea44:	str	w1, [x6, #24]
    ea48:	add	w0, w0, #0x1
    ea4c:	str	w0, [x6, #40]
    ea50:	b.ne	ea20 <lzma_mf_is_supported@@XZ_5.0+0x898>  // b.any
    ea54:	ldp	x29, x30, [sp], #16
    ea58:	ret
    ea5c:	nop
    ea60:	sub	sp, sp, #0x30
    ea64:	mov	x18, x0
    ea68:	stp	x29, x30, [sp, #16]
    ea6c:	add	x29, sp, #0x10
    ea70:	ldr	w9, [x0, #24]
    ea74:	str	x19, [sp, #32]
    ea78:	mov	x19, x1
    ea7c:	ldr	w1, [x0, #36]
    ea80:	ldr	w0, [x0, #96]
    ea84:	sub	w1, w1, w9
    ea88:	cmp	w0, w1
    ea8c:	b.ls	ea9c <lzma_mf_is_supported@@XZ_5.0+0x914>  // b.plast
    ea90:	cmp	w1, #0x3
    ea94:	mov	w0, w1
    ea98:	b.ls	ec40 <lzma_mf_is_supported@@XZ_5.0+0xab8>  // b.plast
    ea9c:	ldr	x10, [x18]
    eaa0:	mov	w13, w9
    eaa4:	adrp	x3, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    eaa8:	ldr	w5, [x18, #88]
    eaac:	add	x2, x10, x13
    eab0:	ldr	w1, [x18, #20]
    eab4:	ldrb	w8, [x10, w9, uxtw]
    eab8:	ldr	x3, [x3, #3952]
    eabc:	add	w1, w9, w1
    eac0:	ldrb	w6, [x2, #3]
    eac4:	ldrb	w7, [x2, #1]
    eac8:	ldrb	w4, [x2, #2]
    eacc:	ldr	w8, [x3, x8, lsl #2]
    ead0:	ldr	w6, [x3, x6, lsl #2]
    ead4:	eor	w7, w7, w8
    ead8:	eor	w4, w7, w4, lsl #8
    eadc:	and	x7, x7, #0x3ff
    eae0:	eor	w6, w4, w6, lsl #5
    eae4:	and	x4, x4, #0xffff
    eae8:	and	w6, w6, w5
    eaec:	add	x4, x4, #0x400
    eaf0:	ldp	x8, x5, [x18, #64]
    eaf4:	add	w6, w6, #0x10, lsl #12
    eaf8:	add	w6, w6, #0x400
    eafc:	ldr	w11, [x8, x4, lsl #2]
    eb00:	ldr	w14, [x8, x7, lsl #2]
    eb04:	ldr	w3, [x8, x6, lsl #2]
    eb08:	sub	w15, w1, w11
    eb0c:	str	w1, [x8, x7, lsl #2]
    eb10:	str	w1, [x8, x4, lsl #2]
    eb14:	sub	w4, w1, w14
    eb18:	str	w1, [x8, x6, lsl #2]
    eb1c:	ldr	w7, [x18, #84]
    eb20:	cmp	w7, w4
    eb24:	b.hi	ebf0 <lzma_mf_is_supported@@XZ_5.0+0xa68>  // b.pmore
    eb28:	ldr	w6, [x18, #80]
    eb2c:	cmp	w14, w11
    eb30:	b.eq	ec18 <lzma_mf_is_supported@@XZ_5.0+0xa90>  // b.none
    eb34:	cmp	w7, w15
    eb38:	b.ls	ec18 <lzma_mf_is_supported@@XZ_5.0+0xa90>  // b.plast
    eb3c:	mov	w12, w15
    eb40:	ldrb	w9, [x10, w9, uxtw]
    eb44:	sub	x8, x2, x12
    eb48:	mov	w4, #0x0                   	// #0
    eb4c:	ldrb	w8, [x8]
    eb50:	cmp	w9, w8
    eb54:	b.ne	ec18 <lzma_mf_is_supported@@XZ_5.0+0xa90>  // b.any
    eb58:	mov	w13, w4
    eb5c:	add	w11, w4, #0x1
    eb60:	sub	w15, w15, #0x1
    eb64:	mov	w8, #0x3                   	// #3
    eb68:	add	x13, x19, x13, lsl #3
    eb6c:	str	w15, [x13, #4]
    eb70:	cmp	w0, w8
    eb74:	b.ls	ec24 <lzma_mf_is_supported@@XZ_5.0+0xa9c>  // b.plast
    eb78:	mov	w4, w8
    eb7c:	sub	x4, x4, x12
    eb80:	add	x4, x2, x4
    eb84:	b	eb94 <lzma_mf_is_supported@@XZ_5.0+0xa0c>
    eb88:	add	w8, w8, #0x1
    eb8c:	cmp	w0, w8
    eb90:	b.eq	ec94 <lzma_mf_is_supported@@XZ_5.0+0xb0c>  // b.none
    eb94:	ldrb	w10, [x4]
    eb98:	ldrb	w9, [x4, x12]
    eb9c:	add	x4, x4, #0x1
    eba0:	cmp	w10, w9
    eba4:	b.eq	eb88 <lzma_mf_is_supported@@XZ_5.0+0xa00>  // b.none
    eba8:	cmp	w8, #0x3
    ebac:	mov	w10, #0x3                   	// #3
    ebb0:	add	x9, x19, w11, uxtw #3
    ebb4:	csel	w10, w8, w10, cs  // cs = hs, nlast
    ebb8:	str	w8, [x13]
    ebbc:	ldr	w4, [x18, #92]
    ebc0:	str	x9, [sp]
    ebc4:	str	w10, [sp, #8]
    ebc8:	bl	e1d8 <lzma_mf_is_supported@@XZ_5.0+0x50>
    ebcc:	sub	x11, x0, x19
    ebd0:	mov	x0, x18
    ebd4:	ubfx	x11, x11, #3, #32
    ebd8:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    ebdc:	mov	w0, w11
    ebe0:	ldp	x29, x30, [sp, #16]
    ebe4:	ldr	x19, [sp, #32]
    ebe8:	add	sp, sp, #0x30
    ebec:	ret
    ebf0:	mov	w12, w4
    ebf4:	ldrb	w8, [x10, w9, uxtw]
    ebf8:	sub	x16, x2, x12
    ebfc:	ldr	w6, [x18, #80]
    ec00:	mov	x17, x12
    ec04:	ldrb	w16, [x16]
    ec08:	cmp	w16, w8
    ec0c:	b.eq	ec6c <lzma_mf_is_supported@@XZ_5.0+0xae4>  // b.none
    ec10:	cmp	w14, w11
    ec14:	b.ne	eb34 <lzma_mf_is_supported@@XZ_5.0+0x9ac>  // b.any
    ec18:	mov	x9, x19
    ec1c:	mov	w10, #0x3                   	// #3
    ec20:	b	ebbc <lzma_mf_is_supported@@XZ_5.0+0xa34>
    ec24:	str	w8, [x13]
    ec28:	b.eq	ec98 <lzma_mf_is_supported@@XZ_5.0+0xb10>  // b.none
    ec2c:	cmp	w8, #0x3
    ec30:	mov	w10, #0x3                   	// #3
    ec34:	add	x9, x19, w11, uxtw #3
    ec38:	csel	w10, w8, w10, cs  // cs = hs, nlast
    ec3c:	b	ebbc <lzma_mf_is_supported@@XZ_5.0+0xa34>
    ec40:	ldr	w0, [x18, #40]
    ec44:	add	w9, w9, #0x1
    ec48:	mov	w11, #0x0                   	// #0
    ec4c:	str	w9, [x18, #24]
    ec50:	add	w0, w0, #0x1
    ec54:	str	w0, [x18, #40]
    ec58:	mov	w0, w11
    ec5c:	ldp	x29, x30, [sp, #16]
    ec60:	ldr	x19, [sp, #32]
    ec64:	add	sp, sp, #0x30
    ec68:	ret
    ec6c:	sub	w4, w4, #0x1
    ec70:	mov	w8, #0x2                   	// #2
    ec74:	stp	w8, w4, [x19]
    ec78:	cmp	w14, w11
    ec7c:	b.eq	ec88 <lzma_mf_is_supported@@XZ_5.0+0xb00>  // b.none
    ec80:	cmp	w7, w15
    ec84:	b.hi	eca8 <lzma_mf_is_supported@@XZ_5.0+0xb20>  // b.pmore
    ec88:	mov	x13, x19
    ec8c:	mov	w11, #0x1                   	// #1
    ec90:	b	eb70 <lzma_mf_is_supported@@XZ_5.0+0x9e8>
    ec94:	str	w0, [x13]
    ec98:	str	w3, [x5, w6, uxtw #2]
    ec9c:	mov	x0, x18
    eca0:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    eca4:	b	ebdc <lzma_mf_is_supported@@XZ_5.0+0xa54>
    eca8:	sub	x4, x2, w15, uxtw
    ecac:	ldrb	w9, [x10, x13]
    ecb0:	mov	w12, w15
    ecb4:	ldrb	w4, [x4]
    ecb8:	cmp	w9, w4
    ecbc:	b.eq	ecc8 <lzma_mf_is_supported@@XZ_5.0+0xb40>  // b.none
    ecc0:	mov	x12, x17
    ecc4:	b	ec88 <lzma_mf_is_supported@@XZ_5.0+0xb00>
    ecc8:	mov	w4, #0x1                   	// #1
    eccc:	b	eb58 <lzma_mf_is_supported@@XZ_5.0+0x9d0>
    ecd0:	adrp	x9, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    ecd4:	mov	w8, #0x400                 	// #1024
    ecd8:	mov	x6, x0
    ecdc:	mov	w7, w1
    ece0:	ldr	x9, [x9, #3952]
    ece4:	movk	w8, #0x1, lsl #16
    ece8:	ldr	w2, [x6, #24]
    ecec:	mov	x0, x6
    ecf0:	ldr	w3, [x6, #36]
    ecf4:	add	w1, w2, #0x1
    ecf8:	sub	w3, w3, w2
    ecfc:	cmp	w3, #0x3
    ed00:	b.hi	ed20 <lzma_mf_is_supported@@XZ_5.0+0xb98>  // b.pmore
    ed04:	ldr	w0, [x6, #40]
    ed08:	subs	w7, w7, #0x1
    ed0c:	str	w1, [x6, #24]
    ed10:	add	w0, w0, #0x1
    ed14:	str	w0, [x6, #40]
    ed18:	b.ne	ece8 <lzma_mf_is_supported@@XZ_5.0+0xb60>  // b.any
    ed1c:	ret
    ed20:	stp	x29, x30, [sp, #-16]!
    ed24:	mov	x29, sp
    ed28:	ldr	x3, [x6]
    ed2c:	ldr	w10, [x6, #88]
    ed30:	ldr	x1, [x6, #64]
    ed34:	add	x4, x3, w2, uxtw
    ed38:	ldrb	w11, [x3, w2, uxtw]
    ed3c:	ldr	w12, [x6, #20]
    ed40:	ldrb	w3, [x4, #3]
    ed44:	ldrb	w5, [x4, #1]
    ed48:	add	w2, w2, w12
    ed4c:	ldrb	w4, [x4, #2]
    ed50:	ldr	w11, [x9, x11, lsl #2]
    ed54:	ldr	w3, [x9, x3, lsl #2]
    ed58:	eor	w5, w5, w11
    ed5c:	eor	w4, w5, w4, lsl #8
    ed60:	and	x5, x5, #0x3ff
    ed64:	eor	w3, w4, w3, lsl #5
    ed68:	and	w3, w3, w10
    ed6c:	add	x4, x1, w4, uxth #2
    ed70:	add	w3, w3, w8
    ed74:	ldr	x10, [x6, #72]
    ed78:	ldr	w11, [x1, x3, lsl #2]
    ed7c:	str	w2, [x1, x5, lsl #2]
    ed80:	str	w2, [x4, #4096]
    ed84:	str	w2, [x1, x3, lsl #2]
    ed88:	ldr	w1, [x6, #80]
    ed8c:	str	w11, [x10, x1, lsl #2]
    ed90:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    ed94:	subs	w7, w7, #0x1
    ed98:	b.eq	edd0 <lzma_mf_is_supported@@XZ_5.0+0xc48>  // b.none
    ed9c:	ldr	w2, [x6, #24]
    eda0:	mov	x0, x6
    eda4:	ldr	w3, [x6, #36]
    eda8:	add	w1, w2, #0x1
    edac:	sub	w3, w3, w2
    edb0:	cmp	w3, #0x3
    edb4:	b.hi	ed28 <lzma_mf_is_supported@@XZ_5.0+0xba0>  // b.pmore
    edb8:	ldr	w0, [x6, #40]
    edbc:	subs	w7, w7, #0x1
    edc0:	str	w1, [x6, #24]
    edc4:	add	w0, w0, #0x1
    edc8:	str	w0, [x6, #40]
    edcc:	b.ne	ed9c <lzma_mf_is_supported@@XZ_5.0+0xc14>  // b.any
    edd0:	ldp	x29, x30, [sp], #16
    edd4:	ret
    edd8:	sub	sp, sp, #0x30
    eddc:	stp	x29, x30, [sp, #16]
    ede0:	add	x29, sp, #0x10
    ede4:	ldr	w3, [x0, #24]
    ede8:	stp	x19, x20, [sp, #32]
    edec:	mov	x19, x0
    edf0:	ldr	w0, [x0, #36]
    edf4:	mov	x20, x1
    edf8:	ldr	w1, [x19, #96]
    edfc:	sub	w0, w0, w3
    ee00:	cmp	w1, w0
    ee04:	b.ls	eea4 <lzma_mf_is_supported@@XZ_5.0+0xd1c>  // b.plast
    ee08:	cmp	w0, #0x1
    ee0c:	b.ls	ee78 <lzma_mf_is_supported@@XZ_5.0+0xcf0>  // b.plast
    ee10:	ldr	w1, [x19, #104]
    ee14:	cmp	w1, #0x1
    ee18:	b.eq	ee78 <lzma_mf_is_supported@@XZ_5.0+0xcf0>  // b.none
    ee1c:	ldr	x2, [x19]
    ee20:	mov	w8, #0x1                   	// #1
    ee24:	ldp	x4, x5, [x19, #64]
    ee28:	ldrh	w6, [x2, w3, uxtw]
    ee2c:	add	x2, x2, w3, uxtw
    ee30:	ldr	w1, [x19, #20]
    ee34:	add	w1, w3, w1
    ee38:	ldr	w3, [x4, x6, lsl #2]
    ee3c:	str	w1, [x4, x6, lsl #2]
    ee40:	str	x20, [sp]
    ee44:	ldp	w6, w7, [x19, #80]
    ee48:	ldr	w4, [x19, #92]
    ee4c:	str	w8, [sp, #8]
    ee50:	bl	e2f8 <lzma_mf_is_supported@@XZ_5.0+0x170>
    ee54:	sub	x6, x0, x20
    ee58:	mov	x0, x19
    ee5c:	ubfx	x6, x6, #3, #32
    ee60:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    ee64:	mov	w0, w6
    ee68:	ldp	x29, x30, [sp, #16]
    ee6c:	ldp	x19, x20, [sp, #32]
    ee70:	add	sp, sp, #0x30
    ee74:	ret
    ee78:	ldr	w0, [x19, #40]
    ee7c:	add	w3, w3, #0x1
    ee80:	mov	w6, #0x0                   	// #0
    ee84:	str	w3, [x19, #24]
    ee88:	add	w0, w0, #0x1
    ee8c:	str	w0, [x19, #40]
    ee90:	mov	w0, w6
    ee94:	ldp	x29, x30, [sp, #16]
    ee98:	ldp	x19, x20, [sp, #32]
    ee9c:	add	sp, sp, #0x30
    eea0:	ret
    eea4:	mov	w0, w1
    eea8:	b	ee1c <lzma_mf_is_supported@@XZ_5.0+0xc94>
    eeac:	nop
    eeb0:	stp	x29, x30, [sp, #-32]!
    eeb4:	mov	x29, sp
    eeb8:	stp	x19, x20, [sp, #16]
    eebc:	mov	x19, x0
    eec0:	mov	w20, w1
    eec4:	b	ef18 <lzma_mf_is_supported@@XZ_5.0+0xd90>
    eec8:	cmp	w0, #0x1
    eecc:	b.ls	ef38 <lzma_mf_is_supported@@XZ_5.0+0xdb0>  // b.plast
    eed0:	ldr	w1, [x19, #104]
    eed4:	cmp	w1, #0x1
    eed8:	b.eq	ef38 <lzma_mf_is_supported@@XZ_5.0+0xdb0>  // b.none
    eedc:	ldr	x2, [x19]
    eee0:	ldp	x4, x5, [x19, #64]
    eee4:	ldrh	w6, [x2, w3, uxtw]
    eee8:	add	x2, x2, w3, uxtw
    eeec:	ldr	w1, [x19, #20]
    eef0:	add	w1, w3, w1
    eef4:	ldr	w3, [x4, x6, lsl #2]
    eef8:	str	w1, [x4, x6, lsl #2]
    eefc:	ldp	w6, w7, [x19, #80]
    ef00:	ldr	w4, [x19, #92]
    ef04:	bl	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x340>
    ef08:	mov	x0, x19
    ef0c:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    ef10:	subs	w20, w20, #0x1
    ef14:	b.eq	ef54 <lzma_mf_is_supported@@XZ_5.0+0xdcc>  // b.none
    ef18:	ldr	w3, [x19, #24]
    ef1c:	ldr	w0, [x19, #36]
    ef20:	ldr	w1, [x19, #96]
    ef24:	sub	w0, w0, w3
    ef28:	cmp	w1, w0
    ef2c:	b.hi	eec8 <lzma_mf_is_supported@@XZ_5.0+0xd40>  // b.pmore
    ef30:	mov	w0, w1
    ef34:	b	eedc <lzma_mf_is_supported@@XZ_5.0+0xd54>
    ef38:	ldr	w0, [x19, #40]
    ef3c:	add	w3, w3, #0x1
    ef40:	str	w3, [x19, #24]
    ef44:	subs	w20, w20, #0x1
    ef48:	add	w0, w0, #0x1
    ef4c:	str	w0, [x19, #40]
    ef50:	b.ne	ef18 <lzma_mf_is_supported@@XZ_5.0+0xd90>  // b.any
    ef54:	ldp	x19, x20, [sp, #16]
    ef58:	ldp	x29, x30, [sp], #32
    ef5c:	ret
    ef60:	sub	sp, sp, #0x30
    ef64:	stp	x29, x30, [sp, #16]
    ef68:	add	x29, sp, #0x10
    ef6c:	ldr	w8, [x0, #24]
    ef70:	stp	x19, x20, [sp, #32]
    ef74:	mov	x20, x1
    ef78:	ldr	w1, [x0, #36]
    ef7c:	mov	x19, x0
    ef80:	ldr	w0, [x0, #96]
    ef84:	sub	w1, w1, w8
    ef88:	cmp	w0, w1
    ef8c:	b.ls	efa8 <lzma_mf_is_supported@@XZ_5.0+0xe20>  // b.plast
    ef90:	cmp	w1, #0x2
    ef94:	b.ls	f064 <lzma_mf_is_supported@@XZ_5.0+0xedc>  // b.plast
    ef98:	ldr	w2, [x19, #104]
    ef9c:	mov	w0, w1
    efa0:	cmp	w2, #0x1
    efa4:	b.eq	f064 <lzma_mf_is_supported@@XZ_5.0+0xedc>  // b.none
    efa8:	ldr	x9, [x19]
    efac:	adrp	x1, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    efb0:	ldr	w3, [x19, #88]
    efb4:	ldr	x1, [x1, #3952]
    efb8:	add	x2, x9, w8, uxtw
    efbc:	ldrb	w5, [x9, w8, uxtw]
    efc0:	ldr	x7, [x19, #64]
    efc4:	ldrb	w6, [x2, #1]
    efc8:	ldrb	w4, [x2, #2]
    efcc:	ldr	w5, [x1, x5, lsl #2]
    efd0:	ldr	w1, [x19, #20]
    efd4:	eor	w6, w6, w5
    efd8:	eor	w4, w6, w4, lsl #8
    efdc:	and	x6, x6, #0x3ff
    efe0:	and	w4, w4, w3
    efe4:	add	w1, w8, w1
    efe8:	add	w4, w4, #0x400
    efec:	ldr	w10, [x7, x6, lsl #2]
    eff0:	ldr	x5, [x19, #72]
    eff4:	sub	w10, w1, w10
    eff8:	ldr	w3, [x7, x4, lsl #2]
    effc:	str	w1, [x7, x6, lsl #2]
    f000:	str	w1, [x7, x4, lsl #2]
    f004:	ldr	w7, [x19, #84]
    f008:	cmp	w7, w10
    f00c:	b.ls	f090 <lzma_mf_is_supported@@XZ_5.0+0xf08>  // b.plast
    f010:	sub	x13, x2, w10, uxtw
    f014:	ldrb	w8, [x9, w8, uxtw]
    f018:	ldr	w6, [x19, #80]
    f01c:	mov	x11, x20
    f020:	ldr	w4, [x19, #92]
    f024:	mov	w9, #0x2                   	// #2
    f028:	ldrb	w12, [x13]
    f02c:	cmp	w12, w8
    f030:	b.eq	f0a4 <lzma_mf_is_supported@@XZ_5.0+0xf1c>  // b.none
    f034:	str	x11, [sp]
    f038:	str	w9, [sp, #8]
    f03c:	bl	e2f8 <lzma_mf_is_supported@@XZ_5.0+0x170>
    f040:	sub	x20, x0, x20
    f044:	mov	x0, x19
    f048:	ubfx	x20, x20, #3, #32
    f04c:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f050:	mov	w0, w20
    f054:	ldp	x29, x30, [sp, #16]
    f058:	ldp	x19, x20, [sp, #32]
    f05c:	add	sp, sp, #0x30
    f060:	ret
    f064:	ldr	w0, [x19, #40]
    f068:	mov	w20, #0x0                   	// #0
    f06c:	add	w8, w8, #0x1
    f070:	str	w8, [x19, #24]
    f074:	add	w0, w0, #0x1
    f078:	str	w0, [x19, #40]
    f07c:	mov	w0, w20
    f080:	ldp	x29, x30, [sp, #16]
    f084:	ldp	x19, x20, [sp, #32]
    f088:	add	sp, sp, #0x30
    f08c:	ret
    f090:	ldr	w6, [x19, #80]
    f094:	mov	x11, x20
    f098:	ldr	w4, [x19, #92]
    f09c:	mov	w9, #0x2                   	// #2
    f0a0:	b	f034 <lzma_mf_is_supported@@XZ_5.0+0xeac>
    f0a4:	cmp	w0, w9
    f0a8:	mov	x8, #0x2                   	// #2
    f0ac:	b.hi	f0c4 <lzma_mf_is_supported@@XZ_5.0+0xf3c>  // b.pmore
    f0b0:	b	f0e8 <lzma_mf_is_supported@@XZ_5.0+0xf60>
    f0b4:	add	w9, w8, #0x1
    f0b8:	add	x8, x8, #0x1
    f0bc:	cmp	w0, w8
    f0c0:	b.ls	f0e8 <lzma_mf_is_supported@@XZ_5.0+0xf60>  // b.plast
    f0c4:	ldrb	w12, [x2, x8]
    f0c8:	mov	w9, w8
    f0cc:	ldrb	w11, [x13, x8]
    f0d0:	cmp	w12, w11
    f0d4:	b.eq	f0b4 <lzma_mf_is_supported@@XZ_5.0+0xf2c>  // b.none
    f0d8:	sub	w10, w10, #0x1
    f0dc:	add	x11, x20, #0x8
    f0e0:	stp	w8, w10, [x20]
    f0e4:	b	f034 <lzma_mf_is_supported@@XZ_5.0+0xeac>
    f0e8:	sub	w10, w10, #0x1
    f0ec:	stp	w9, w10, [x20]
    f0f0:	add	x11, x20, #0x8
    f0f4:	cmp	w0, w9
    f0f8:	b.ne	f034 <lzma_mf_is_supported@@XZ_5.0+0xeac>  // b.any
    f0fc:	bl	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x340>
    f100:	mov	w20, #0x1                   	// #1
    f104:	mov	x0, x19
    f108:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f10c:	b	f050 <lzma_mf_is_supported@@XZ_5.0+0xec8>
    f110:	stp	x29, x30, [sp, #-48]!
    f114:	mov	x29, sp
    f118:	stp	x19, x20, [sp, #16]
    f11c:	adrp	x20, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    f120:	mov	x19, x0
    f124:	ldr	x20, [x20, #3952]
    f128:	str	x21, [sp, #32]
    f12c:	mov	w21, w1
    f130:	b	f1b0 <lzma_mf_is_supported@@XZ_5.0+0x1028>
    f134:	cmp	w0, #0x2
    f138:	b.ls	f1d0 <lzma_mf_is_supported@@XZ_5.0+0x1048>  // b.plast
    f13c:	ldr	w1, [x19, #104]
    f140:	cmp	w1, #0x1
    f144:	b.eq	f1d0 <lzma_mf_is_supported@@XZ_5.0+0x1048>  // b.none
    f148:	ldr	x1, [x19]
    f14c:	ldr	w8, [x19, #88]
    f150:	ldr	x7, [x19, #64]
    f154:	add	x2, x1, w3, uxtw
    f158:	ldrb	w5, [x1, w3, uxtw]
    f15c:	ldr	w1, [x19, #20]
    f160:	ldrb	w6, [x2, #1]
    f164:	ldrb	w4, [x2, #2]
    f168:	add	w1, w3, w1
    f16c:	ldr	w3, [x20, x5, lsl #2]
    f170:	ldr	x5, [x19, #72]
    f174:	eor	w3, w6, w3
    f178:	eor	w4, w3, w4, lsl #8
    f17c:	and	x6, x3, #0x3ff
    f180:	and	w4, w4, w8
    f184:	add	w4, w4, #0x400
    f188:	ldr	w3, [x7, x4, lsl #2]
    f18c:	str	w1, [x7, x6, lsl #2]
    f190:	str	w1, [x7, x4, lsl #2]
    f194:	ldp	w6, w7, [x19, #80]
    f198:	ldr	w4, [x19, #92]
    f19c:	bl	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x340>
    f1a0:	mov	x0, x19
    f1a4:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f1a8:	subs	w21, w21, #0x1
    f1ac:	b.eq	f1ec <lzma_mf_is_supported@@XZ_5.0+0x1064>  // b.none
    f1b0:	ldr	w3, [x19, #24]
    f1b4:	ldr	w0, [x19, #36]
    f1b8:	ldr	w1, [x19, #96]
    f1bc:	sub	w0, w0, w3
    f1c0:	cmp	w1, w0
    f1c4:	b.hi	f134 <lzma_mf_is_supported@@XZ_5.0+0xfac>  // b.pmore
    f1c8:	mov	w0, w1
    f1cc:	b	f148 <lzma_mf_is_supported@@XZ_5.0+0xfc0>
    f1d0:	ldr	w0, [x19, #40]
    f1d4:	add	w3, w3, #0x1
    f1d8:	str	w3, [x19, #24]
    f1dc:	subs	w21, w21, #0x1
    f1e0:	add	w0, w0, #0x1
    f1e4:	str	w0, [x19, #40]
    f1e8:	b.ne	f1b0 <lzma_mf_is_supported@@XZ_5.0+0x1028>  // b.any
    f1ec:	ldp	x19, x20, [sp, #16]
    f1f0:	ldr	x21, [sp, #32]
    f1f4:	ldp	x29, x30, [sp], #48
    f1f8:	ret
    f1fc:	nop
    f200:	sub	sp, sp, #0x40
    f204:	stp	x29, x30, [sp, #16]
    f208:	add	x29, sp, #0x10
    f20c:	ldr	w9, [x0, #24]
    f210:	str	x21, [sp, #48]
    f214:	mov	x21, x1
    f218:	ldr	w1, [x0, #36]
    f21c:	stp	x19, x20, [sp, #32]
    f220:	mov	x19, x0
    f224:	ldr	w0, [x0, #96]
    f228:	sub	w1, w1, w9
    f22c:	cmp	w0, w1
    f230:	b.ls	f24c <lzma_mf_is_supported@@XZ_5.0+0x10c4>  // b.plast
    f234:	cmp	w1, #0x3
    f238:	b.ls	f3e0 <lzma_mf_is_supported@@XZ_5.0+0x1258>  // b.plast
    f23c:	ldr	w2, [x19, #104]
    f240:	mov	w0, w1
    f244:	cmp	w2, #0x1
    f248:	b.eq	f3e0 <lzma_mf_is_supported@@XZ_5.0+0x1258>  // b.none
    f24c:	ldr	x10, [x19]
    f250:	mov	w15, w9
    f254:	adrp	x3, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    f258:	ldr	w5, [x19, #88]
    f25c:	add	x2, x10, x15
    f260:	ldr	w1, [x19, #20]
    f264:	ldrb	w8, [x10, w9, uxtw]
    f268:	ldr	x3, [x3, #3952]
    f26c:	add	w1, w9, w1
    f270:	ldrb	w6, [x2, #3]
    f274:	ldrb	w7, [x2, #1]
    f278:	ldrb	w4, [x2, #2]
    f27c:	ldr	w8, [x3, x8, lsl #2]
    f280:	ldr	w6, [x3, x6, lsl #2]
    f284:	eor	w7, w7, w8
    f288:	eor	w4, w7, w4, lsl #8
    f28c:	and	x7, x7, #0x3ff
    f290:	eor	w6, w4, w6, lsl #5
    f294:	and	x4, x4, #0xffff
    f298:	and	w6, w6, w5
    f29c:	add	x4, x4, #0x400
    f2a0:	ldp	x8, x5, [x19, #64]
    f2a4:	add	w6, w6, #0x10, lsl #12
    f2a8:	add	w6, w6, #0x400
    f2ac:	ldr	w14, [x8, x7, lsl #2]
    f2b0:	ldr	w13, [x8, x4, lsl #2]
    f2b4:	ldr	w3, [x8, x6, lsl #2]
    f2b8:	sub	w11, w1, w14
    f2bc:	str	w1, [x8, x7, lsl #2]
    f2c0:	sub	w16, w1, w13
    f2c4:	str	w1, [x8, x4, lsl #2]
    f2c8:	str	w1, [x8, x6, lsl #2]
    f2cc:	ldr	w7, [x19, #84]
    f2d0:	cmp	w7, w11
    f2d4:	b.hi	f3a8 <lzma_mf_is_supported@@XZ_5.0+0x1220>  // b.pmore
    f2d8:	ldr	w6, [x19, #80]
    f2dc:	cmp	w14, w13
    f2e0:	ldr	w4, [x19, #92]
    f2e4:	b.eq	f3d4 <lzma_mf_is_supported@@XZ_5.0+0x124c>  // b.none
    f2e8:	cmp	w7, w16
    f2ec:	b.ls	f3d4 <lzma_mf_is_supported@@XZ_5.0+0x124c>  // b.plast
    f2f0:	mov	w12, w16
    f2f4:	ldrb	w9, [x10, w9, uxtw]
    f2f8:	sub	x8, x2, x12
    f2fc:	mov	w20, #0x0                   	// #0
    f300:	ldrb	w8, [x8]
    f304:	cmp	w9, w8
    f308:	b.ne	f3d4 <lzma_mf_is_supported@@XZ_5.0+0x124c>  // b.any
    f30c:	mov	w13, w20
    f310:	add	w20, w20, #0x1
    f314:	sub	w16, w16, #0x1
    f318:	mov	w9, #0x3                   	// #3
    f31c:	add	x13, x21, x13, lsl #3
    f320:	str	w16, [x13, #4]
    f324:	nop
    f328:	cmp	w0, w9
    f32c:	b.ls	f410 <lzma_mf_is_supported@@XZ_5.0+0x1288>  // b.plast
    f330:	mov	w8, w9
    f334:	sub	x8, x8, x12
    f338:	add	x8, x2, x8
    f33c:	b	f34c <lzma_mf_is_supported@@XZ_5.0+0x11c4>
    f340:	add	w9, w9, #0x1
    f344:	cmp	w0, w9
    f348:	b.eq	f454 <lzma_mf_is_supported@@XZ_5.0+0x12cc>  // b.none
    f34c:	ldrb	w11, [x8, x12]
    f350:	add	x8, x8, #0x1
    f354:	ldurb	w10, [x8, #-1]
    f358:	cmp	w11, w10
    f35c:	b.eq	f340 <lzma_mf_is_supported@@XZ_5.0+0x11b8>  // b.none
    f360:	cmp	w9, #0x3
    f364:	mov	w8, #0x3                   	// #3
    f368:	add	x20, x21, w20, uxtw #3
    f36c:	csel	w8, w9, w8, cs  // cs = hs, nlast
    f370:	str	w9, [x13]
    f374:	str	x20, [sp]
    f378:	str	w8, [sp, #8]
    f37c:	bl	e2f8 <lzma_mf_is_supported@@XZ_5.0+0x170>
    f380:	sub	x20, x0, x21
    f384:	mov	x0, x19
    f388:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f38c:	ubfx	x20, x20, #3, #32
    f390:	mov	w0, w20
    f394:	ldp	x29, x30, [sp, #16]
    f398:	ldp	x19, x20, [sp, #32]
    f39c:	ldr	x21, [sp, #48]
    f3a0:	add	sp, sp, #0x40
    f3a4:	ret
    f3a8:	mov	w12, w11
    f3ac:	ldrb	w8, [x10, w9, uxtw]
    f3b0:	sub	x17, x2, x12
    f3b4:	ldr	w6, [x19, #80]
    f3b8:	ldr	w4, [x19, #92]
    f3bc:	mov	x18, x12
    f3c0:	ldrb	w17, [x17]
    f3c4:	cmp	w17, w8
    f3c8:	b.eq	f42c <lzma_mf_is_supported@@XZ_5.0+0x12a4>  // b.none
    f3cc:	cmp	w14, w13
    f3d0:	b.ne	f2e8 <lzma_mf_is_supported@@XZ_5.0+0x1160>  // b.any
    f3d4:	mov	x20, x21
    f3d8:	mov	w8, #0x3                   	// #3
    f3dc:	b	f374 <lzma_mf_is_supported@@XZ_5.0+0x11ec>
    f3e0:	ldr	w0, [x19, #40]
    f3e4:	add	w9, w9, #0x1
    f3e8:	mov	w20, #0x0                   	// #0
    f3ec:	str	w9, [x19, #24]
    f3f0:	add	w0, w0, #0x1
    f3f4:	str	w0, [x19, #40]
    f3f8:	mov	w0, w20
    f3fc:	ldp	x29, x30, [sp, #16]
    f400:	ldp	x19, x20, [sp, #32]
    f404:	ldr	x21, [sp, #48]
    f408:	add	sp, sp, #0x40
    f40c:	ret
    f410:	str	w9, [x13]
    f414:	b.eq	f458 <lzma_mf_is_supported@@XZ_5.0+0x12d0>  // b.none
    f418:	cmp	w9, #0x3
    f41c:	mov	w8, #0x3                   	// #3
    f420:	add	x20, x21, w20, uxtw #3
    f424:	csel	w8, w9, w8, cs  // cs = hs, nlast
    f428:	b	f374 <lzma_mf_is_supported@@XZ_5.0+0x11ec>
    f42c:	sub	w11, w11, #0x1
    f430:	mov	w9, #0x2                   	// #2
    f434:	stp	w9, w11, [x21]
    f438:	cmp	w14, w13
    f43c:	b.eq	f448 <lzma_mf_is_supported@@XZ_5.0+0x12c0>  // b.none
    f440:	cmp	w7, w16
    f444:	b.hi	f468 <lzma_mf_is_supported@@XZ_5.0+0x12e0>  // b.pmore
    f448:	mov	x13, x21
    f44c:	mov	w20, #0x1                   	// #1
    f450:	b	f328 <lzma_mf_is_supported@@XZ_5.0+0x11a0>
    f454:	str	w0, [x13]
    f458:	bl	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x340>
    f45c:	mov	x0, x19
    f460:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f464:	b	f3f8 <lzma_mf_is_supported@@XZ_5.0+0x1270>
    f468:	sub	x8, x2, w16, uxtw
    f46c:	ldrb	w10, [x10, x15]
    f470:	mov	w12, w16
    f474:	ldrb	w8, [x8]
    f478:	cmp	w10, w8
    f47c:	b.eq	f488 <lzma_mf_is_supported@@XZ_5.0+0x1300>  // b.none
    f480:	mov	x12, x18
    f484:	b	f448 <lzma_mf_is_supported@@XZ_5.0+0x12c0>
    f488:	mov	w20, #0x1                   	// #1
    f48c:	b	f30c <lzma_mf_is_supported@@XZ_5.0+0x1184>
    f490:	stp	x29, x30, [sp, #-48]!
    f494:	mov	x29, sp
    f498:	stp	x21, x22, [sp, #32]
    f49c:	adrp	x22, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    f4a0:	mov	w21, w1
    f4a4:	stp	x19, x20, [sp, #16]
    f4a8:	mov	w20, #0x400                 	// #1024
    f4ac:	mov	x19, x0
    f4b0:	ldr	x22, [x22, #3952]
    f4b4:	movk	w20, #0x1, lsl #16
    f4b8:	b	f54c <lzma_mf_is_supported@@XZ_5.0+0x13c4>
    f4bc:	cmp	w0, #0x3
    f4c0:	b.ls	f56c <lzma_mf_is_supported@@XZ_5.0+0x13e4>  // b.plast
    f4c4:	ldr	w1, [x19, #104]
    f4c8:	cmp	w1, #0x1
    f4cc:	b.eq	f56c <lzma_mf_is_supported@@XZ_5.0+0x13e4>  // b.none
    f4d0:	ldr	x1, [x19]
    f4d4:	ldr	w6, [x19, #88]
    f4d8:	ldr	x8, [x19, #64]
    f4dc:	add	x2, x1, w3, uxtw
    f4e0:	ldrb	w7, [x1, w3, uxtw]
    f4e4:	ldr	w1, [x19, #20]
    f4e8:	ldrb	w4, [x2, #3]
    f4ec:	ldrb	w5, [x2, #1]
    f4f0:	add	w1, w3, w1
    f4f4:	ldr	w7, [x22, x7, lsl #2]
    f4f8:	ldrb	w3, [x2, #2]
    f4fc:	ldr	w4, [x22, x4, lsl #2]
    f500:	eor	w5, w5, w7
    f504:	and	x7, x5, #0x3ff
    f508:	eor	w3, w5, w3, lsl #8
    f50c:	eor	w4, w3, w4, lsl #5
    f510:	and	w4, w4, w6
    f514:	add	x6, x8, w3, uxth #2
    f518:	add	w4, w4, w20
    f51c:	ldr	x5, [x19, #72]
    f520:	ldr	w3, [x8, x4, lsl #2]
    f524:	str	w1, [x8, x7, lsl #2]
    f528:	str	w1, [x6, #4096]
    f52c:	str	w1, [x8, x4, lsl #2]
    f530:	ldp	w6, w7, [x19, #80]
    f534:	ldr	w4, [x19, #92]
    f538:	bl	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x340>
    f53c:	mov	x0, x19
    f540:	bl	e620 <lzma_mf_is_supported@@XZ_5.0+0x498>
    f544:	subs	w21, w21, #0x1
    f548:	b.eq	f588 <lzma_mf_is_supported@@XZ_5.0+0x1400>  // b.none
    f54c:	ldr	w3, [x19, #24]
    f550:	ldr	w0, [x19, #36]
    f554:	ldr	w1, [x19, #96]
    f558:	sub	w0, w0, w3
    f55c:	cmp	w1, w0
    f560:	b.hi	f4bc <lzma_mf_is_supported@@XZ_5.0+0x1334>  // b.pmore
    f564:	mov	w0, w1
    f568:	b	f4d0 <lzma_mf_is_supported@@XZ_5.0+0x1348>
    f56c:	ldr	w0, [x19, #40]
    f570:	add	w3, w3, #0x1
    f574:	str	w3, [x19, #24]
    f578:	subs	w21, w21, #0x1
    f57c:	add	w0, w0, #0x1
    f580:	str	w0, [x19, #40]
    f584:	b.ne	f54c <lzma_mf_is_supported@@XZ_5.0+0x13c4>  // b.any
    f588:	ldp	x19, x20, [sp, #16]
    f58c:	ldp	x21, x22, [sp, #32]
    f590:	ldp	x29, x30, [sp], #48
    f594:	ret
    f598:	stp	x29, x30, [sp, #-112]!
    f59c:	mov	x29, sp
    f5a0:	stp	x23, x24, [sp, #48]
    f5a4:	mov	x24, x1
    f5a8:	mov	x23, x3
    f5ac:	stp	x25, x26, [sp, #64]
    f5b0:	mov	x25, x2
    f5b4:	ldr	x2, [x5]
    f5b8:	stp	x19, x20, [sp, #16]
    f5bc:	mov	x20, x0
    f5c0:	ldr	x26, [x0, #8]
    f5c4:	stp	x21, x22, [sp, #32]
    f5c8:	mov	x21, x5
    f5cc:	ldr	x1, [x0, #32]
    f5d0:	mov	x22, x6
    f5d4:	stp	x27, x28, [sp, #80]
    f5d8:	str	x4, [sp, #104]
    f5dc:	nop
    f5e0:	cmp	x26, x1
    f5e4:	b.eq	f680 <lzma_mf_is_supported@@XZ_5.0+0x14f8>  // b.none
    f5e8:	sub	x1, x1, x26
    f5ec:	ldp	x0, x5, [x20, #48]
    f5f0:	sub	x2, x22, x2
    f5f4:	cmp	x2, x1
    f5f8:	mov	x4, x23
    f5fc:	csel	x2, x2, x1, ls  // ls = plast
    f600:	mov	x3, x25
    f604:	add	x2, x2, x26
    f608:	str	x2, [x20, #24]
    f60c:	mov	x1, x20
    f610:	mov	x2, x24
    f614:	blr	x5
    f618:	mov	w28, w0
    f61c:	ldp	x1, x2, [x20]
    f620:	ldr	x19, [x21]
    f624:	ldr	x0, [sp, #104]
    f628:	sub	x27, x2, x26
    f62c:	add	x1, x1, x26
    f630:	mov	x2, x27
    f634:	add	x0, x0, x19
    f638:	bl	3090 <memcpy@plt>
    f63c:	ldrb	w0, [x20, #40]
    f640:	add	x2, x19, x27
    f644:	str	x2, [x21]
    f648:	cmp	x2, x22
    f64c:	cbz	w0, f68c <lzma_mf_is_supported@@XZ_5.0+0x1504>
    f650:	ldr	x0, [x20]
    f654:	stp	xzr, xzr, [x20, #8]
    f658:	ldr	x1, [x20, #32]
    f65c:	add	x0, x0, x1
    f660:	sturb	wzr, [x0, #-1]
    f664:	strb	wzr, [x20, #40]
    f668:	cbnz	w28, f6a8 <lzma_mf_is_supported@@XZ_5.0+0x1520>
    f66c:	b.eq	f6a4 <lzma_mf_is_supported@@XZ_5.0+0x151c>  // b.none
    f670:	ldr	x26, [x20, #8]
    f674:	ldr	x1, [x20, #32]
    f678:	cmp	x26, x1
    f67c:	b.ne	f5e8 <lzma_mf_is_supported@@XZ_5.0+0x1460>  // b.any
    f680:	mov	x26, #0x0                   	// #0
    f684:	str	xzr, [x20, #8]
    f688:	b	f5ec <lzma_mf_is_supported@@XZ_5.0+0x1464>
    f68c:	cbnz	w28, f6a8 <lzma_mf_is_supported@@XZ_5.0+0x1520>
    f690:	b.eq	f6a4 <lzma_mf_is_supported@@XZ_5.0+0x151c>  // b.none
    f694:	ldr	x26, [x20, #8]
    f698:	ldr	x1, [x20, #32]
    f69c:	cmp	x26, x1
    f6a0:	b.cs	f5e0 <lzma_mf_is_supported@@XZ_5.0+0x1458>  // b.hs, b.nlast
    f6a4:	mov	w28, #0x0                   	// #0
    f6a8:	mov	w0, w28
    f6ac:	ldp	x19, x20, [sp, #16]
    f6b0:	ldp	x21, x22, [sp, #32]
    f6b4:	ldp	x23, x24, [sp, #48]
    f6b8:	ldp	x25, x26, [sp, #64]
    f6bc:	ldp	x27, x28, [sp, #80]
    f6c0:	ldp	x29, x30, [sp], #112
    f6c4:	ret
    f6c8:	stp	x29, x30, [sp, #-32]!
    f6cc:	mov	x29, sp
    f6d0:	stp	x19, x20, [sp, #16]
    f6d4:	mov	x19, x0
    f6d8:	mov	x20, x1
    f6dc:	add	x0, x0, #0x58
    f6e0:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
    f6e4:	ldr	x0, [x19]
    f6e8:	mov	x1, x20
    f6ec:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    f6f0:	ldr	x2, [x19, #80]
    f6f4:	mov	x1, x20
    f6f8:	ldr	x0, [x19, #48]
    f6fc:	cbz	x2, f718 <lzma_mf_is_supported@@XZ_5.0+0x1590>
    f700:	blr	x2
    f704:	mov	x1, x20
    f708:	mov	x0, x19
    f70c:	ldp	x19, x20, [sp, #16]
    f710:	ldp	x29, x30, [sp], #32
    f714:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    f718:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    f71c:	mov	x1, x20
    f720:	mov	x0, x19
    f724:	ldp	x19, x20, [sp, #16]
    f728:	ldp	x29, x30, [sp], #32
    f72c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
    f730:	sub	sp, sp, #0x80
    f734:	stp	x29, x30, [sp, #16]
    f738:	add	x29, sp, #0x10
    f73c:	ldr	x10, [x0, #112]
    f740:	stp	x25, x26, [sp, #80]
    f744:	mov	x26, x1
    f748:	ldr	w1, [sp, #128]
    f74c:	mov	x25, x4
    f750:	stp	x21, x22, [sp, #48]
    f754:	mov	x21, x5
    f758:	stp	x23, x24, [sp, #64]
    f75c:	mov	x23, x2
    f760:	mov	x24, x3
    f764:	stp	x27, x28, [sp, #96]
    f768:	mov	x28, x6
    f76c:	mov	x27, x7
    f770:	str	w1, [sp, #116]
    f774:	cbz	x10, f8e0 <lzma_mf_is_supported@@XZ_5.0+0x1758>
    f778:	stp	x19, x20, [sp, #32]
    f77c:	mov	x19, x0
    f780:	ldr	x0, [x6]
    f784:	cmp	x7, x0
    f788:	b.ls	f7fc <lzma_mf_is_supported@@XZ_5.0+0x1674>  // b.plast
    f78c:	add	x20, x19, #0xb8
    f790:	add	x22, x19, #0xa8
    f794:	add	x0, x19, #0xb0
    f798:	str	x0, [sp, #120]
    f79c:	nop
    f7a0:	ldrb	w0, [x19, #160]
    f7a4:	ldr	x3, [x19, #176]
    f7a8:	cbnz	w0, f7b8 <lzma_mf_is_supported@@XZ_5.0+0x1630>
    f7ac:	ldr	x0, [x19, #168]
    f7b0:	cmp	x0, x3
    f7b4:	b.eq	f834 <lzma_mf_is_supported@@XZ_5.0+0x16ac>  // b.none
    f7b8:	ldrb	w0, [x19, #161]
    f7bc:	cbnz	w0, f888 <lzma_mf_is_supported@@XZ_5.0+0x1700>
    f7c0:	mov	x6, x27
    f7c4:	mov	x5, x28
    f7c8:	mov	x4, x21
    f7cc:	mov	x2, x22
    f7d0:	mov	x1, x20
    f7d4:	mov	x0, x19
    f7d8:	bl	f598 <lzma_mf_is_supported@@XZ_5.0+0x1410>
    f7dc:	cmp	w0, #0x1
    f7e0:	b.eq	f820 <lzma_mf_is_supported@@XZ_5.0+0x1698>  // b.none
    f7e4:	cbnz	w0, f800 <lzma_mf_is_supported@@XZ_5.0+0x1678>
    f7e8:	ldrb	w0, [x19, #160]
    f7ec:	cbz	w0, f824 <lzma_mf_is_supported@@XZ_5.0+0x169c>
    f7f0:	ldr	x0, [x28]
    f7f4:	cmp	x27, x0
    f7f8:	b.hi	f8bc <lzma_mf_is_supported@@XZ_5.0+0x1734>  // b.pmore
    f7fc:	mov	w0, #0x0                   	// #0
    f800:	ldp	x29, x30, [sp, #16]
    f804:	ldp	x19, x20, [sp, #32]
    f808:	ldp	x21, x22, [sp, #48]
    f80c:	ldp	x23, x24, [sp, #64]
    f810:	ldp	x25, x26, [sp, #80]
    f814:	ldp	x27, x28, [sp, #96]
    f818:	add	sp, sp, #0x80
    f81c:	ret
    f820:	strb	w0, [x19, #161]
    f824:	ldr	x0, [x28]
    f828:	cmp	x27, x0
    f82c:	b.hi	f7a0 <lzma_mf_is_supported@@XZ_5.0+0x1618>  // b.pmore
    f830:	b	f7fc <lzma_mf_is_supported@@XZ_5.0+0x1674>
    f834:	ldr	w1, [sp, #116]
    f838:	mov	x5, x20
    f83c:	ldr	x0, [x19, #88]
    f840:	str	w1, [sp]
    f844:	ldr	x6, [sp, #120]
    f848:	stp	xzr, xzr, [x19, #168]
    f84c:	mov	x4, x25
    f850:	ldr	x10, [x19, #112]
    f854:	mov	x3, x24
    f858:	mov	x2, x23
    f85c:	mov	x1, x26
    f860:	mov	x7, #0x1000                	// #4096
    f864:	blr	x10
    f868:	cmp	w0, #0x1
    f86c:	b.eq	f8b0 <lzma_mf_is_supported@@XZ_5.0+0x1728>  // b.none
    f870:	cbnz	w0, f800 <lzma_mf_is_supported@@XZ_5.0+0x1678>
    f874:	ldr	x3, [x19, #176]
    f878:	cbz	x3, f7fc <lzma_mf_is_supported@@XZ_5.0+0x1674>
    f87c:	ldrb	w0, [x19, #161]
    f880:	cbz	w0, f7c0 <lzma_mf_is_supported@@XZ_5.0+0x1638>
    f884:	nop
    f888:	cbnz	x3, f8bc <lzma_mf_is_supported@@XZ_5.0+0x1734>
    f88c:	ldrb	w0, [x19, #160]
    f890:	ldp	x29, x30, [sp, #16]
    f894:	ldp	x19, x20, [sp, #32]
    f898:	ldp	x21, x22, [sp, #48]
    f89c:	ldp	x23, x24, [sp, #64]
    f8a0:	ldp	x25, x26, [sp, #80]
    f8a4:	ldp	x27, x28, [sp, #96]
    f8a8:	add	sp, sp, #0x80
    f8ac:	ret
    f8b0:	strb	w0, [x19, #160]
    f8b4:	ldr	x3, [x19, #176]
    f8b8:	b	f7b8 <lzma_mf_is_supported@@XZ_5.0+0x1630>
    f8bc:	mov	w0, #0x9                   	// #9
    f8c0:	ldp	x29, x30, [sp, #16]
    f8c4:	ldp	x19, x20, [sp, #32]
    f8c8:	ldp	x21, x22, [sp, #48]
    f8cc:	ldp	x23, x24, [sp, #64]
    f8d0:	ldp	x25, x26, [sp, #80]
    f8d4:	ldp	x27, x28, [sp, #96]
    f8d8:	add	sp, sp, #0x80
    f8dc:	ret
    f8e0:	mov	x5, x28
    f8e4:	mov	x4, x21
    f8e8:	mov	x3, x25
    f8ec:	mov	x2, x24
    f8f0:	mov	x1, x23
    f8f4:	mov	x6, x7
    f8f8:	ldp	x29, x30, [sp, #16]
    f8fc:	ldp	x21, x22, [sp, #48]
    f900:	ldp	x23, x24, [sp, #64]
    f904:	ldp	x25, x26, [sp, #80]
    f908:	ldp	x27, x28, [sp, #96]
    f90c:	add	sp, sp, #0x80
    f910:	b	f598 <lzma_mf_is_supported@@XZ_5.0+0x1410>
    f914:	nop
    f918:	stp	x29, x30, [sp, #-96]!
    f91c:	mov	x29, sp
    f920:	stp	x19, x20, [sp, #16]
    f924:	mov	x20, x0
    f928:	ldr	x19, [x0]
    f92c:	stp	x21, x22, [sp, #32]
    f930:	mov	x22, x2
    f934:	str	x23, [sp, #48]
    f938:	mov	x21, x1
    f93c:	mov	x23, x3
    f940:	cbz	x19, fa24 <lzma_mf_is_supported@@XZ_5.0+0x189c>
    f944:	ldr	x2, [x22, #16]
    f948:	add	x3, sp, #0x48
    f94c:	mov	x1, x21
    f950:	add	x0, x19, #0x30
    f954:	blr	x23
    f958:	cbnz	w0, f9f0 <lzma_mf_is_supported@@XZ_5.0+0x1868>
    f95c:	ldr	x3, [sp, #72]
    f960:	cmp	x3, #0xfff
    f964:	b.hi	fa04 <lzma_mf_is_supported@@XZ_5.0+0x187c>  // b.pmore
    f968:	mov	x3, #0x1000                	// #4096
    f96c:	add	x3, x3, #0xf
    f970:	ldr	x0, [x19, #32]
    f974:	and	x3, x3, #0xfffffffffffffff0
    f978:	str	x3, [sp, #72]
    f97c:	cmp	x3, x0
    f980:	b.eq	f9ac <lzma_mf_is_supported@@XZ_5.0+0x1824>  // b.none
    f984:	ldr	x0, [x19]
    f988:	mov	x1, x21
    f98c:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
    f990:	ldr	x0, [sp, #72]
    f994:	mov	x1, x21
    f998:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    f99c:	str	x0, [x19]
    f9a0:	cbz	x0, fa0c <lzma_mf_is_supported@@XZ_5.0+0x1884>
    f9a4:	ldr	x0, [sp, #72]
    f9a8:	str	x0, [x19, #32]
    f9ac:	ldr	x0, [x20]
    f9b0:	ldr	x1, [x0]
    f9b4:	stp	xzr, xzr, [x0, #8]
    f9b8:	ldr	x2, [x0, #32]
    f9bc:	add	x1, x1, x2
    f9c0:	sturb	wzr, [x1, #-1]
    f9c4:	strb	wzr, [x0, #40]
    f9c8:	ldr	x1, [sp, #80]
    f9cc:	cbz	x1, f9d8 <lzma_mf_is_supported@@XZ_5.0+0x1850>
    f9d0:	ldr	x3, [sp, #88]
    f9d4:	cbnz	x3, fa78 <lzma_mf_is_supported@@XZ_5.0+0x18f0>
    f9d8:	strh	wzr, [x19, #160]
    f9dc:	add	x2, x22, #0x18
    f9e0:	stp	xzr, xzr, [x19, #168]
    f9e4:	mov	x1, x21
    f9e8:	add	x0, x19, #0x58
    f9ec:	bl	3880 <lzma_version_string@@XZ_5.0+0x198>
    f9f0:	ldp	x19, x20, [sp, #16]
    f9f4:	ldp	x21, x22, [sp, #32]
    f9f8:	ldr	x23, [sp, #48]
    f9fc:	ldp	x29, x30, [sp], #96
    fa00:	ret
    fa04:	cmn	x3, #0x10
    fa08:	b.ls	f96c <lzma_mf_is_supported@@XZ_5.0+0x17e4>  // b.plast
    fa0c:	mov	w0, #0x5                   	// #5
    fa10:	ldp	x19, x20, [sp, #16]
    fa14:	ldp	x21, x22, [sp, #32]
    fa18:	ldr	x23, [sp, #48]
    fa1c:	ldp	x29, x30, [sp], #96
    fa20:	ret
    fa24:	mov	x0, #0x10b8                	// #4280
    fa28:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
    fa2c:	mov	x19, x0
    fa30:	cbz	x0, fa0c <lzma_mf_is_supported@@XZ_5.0+0x1884>
    fa34:	adrp	x1, f000 <lzma_mf_is_supported@@XZ_5.0+0xe78>
    fa38:	adrp	x0, f000 <lzma_mf_is_supported@@XZ_5.0+0xe78>
    fa3c:	add	x1, x1, #0x730
    fa40:	add	x0, x0, #0x6c8
    fa44:	mov	x2, #0xffffffffffffffff    	// #-1
    fa48:	str	xzr, [x19]
    fa4c:	str	x19, [x20]
    fa50:	stp	x1, x0, [x20, #24]
    fa54:	str	xzr, [x19, #32]
    fa58:	stp	xzr, xzr, [x19, #48]
    fa5c:	stp	xzr, xzr, [x19, #64]
    fa60:	stp	xzr, xzr, [x19, #80]
    fa64:	stp	x2, xzr, [x19, #96]
    fa68:	stp	xzr, xzr, [x19, #112]
    fa6c:	stp	xzr, xzr, [x19, #128]
    fa70:	stp	xzr, xzr, [x19, #144]
    fa74:	b	f944 <lzma_mf_is_supported@@XZ_5.0+0x17bc>
    fa78:	ldr	x20, [sp, #72]
    fa7c:	ldr	x0, [x19]
    fa80:	cmp	x20, x3
    fa84:	csel	x20, x20, x3, ls  // ls = plast
    fa88:	sub	x3, x3, x20
    fa8c:	mov	x2, x20
    fa90:	add	x1, x1, x3
    fa94:	bl	3090 <memcpy@plt>
    fa98:	stp	x20, x20, [x19, #8]
    fa9c:	b	f9d8 <lzma_mf_is_supported@@XZ_5.0+0x1850>
    faa0:	mov	x1, #0x10b8                	// #4280
    faa4:	add	x0, x0, x1
    faa8:	ret
    faac:	nop
    fab0:	mov	x2, x0
    fab4:	ldr	x0, [x0, #48]
    fab8:	ldr	x2, [x2, #72]
    fabc:	mov	x16, x2
    fac0:	br	x16
    fac4:	nop

000000000000fac8 <lzma_lzma_preset@@XZ_5.0>:
    fac8:	and	w3, w1, #0x1f
    facc:	mov	x2, x0
    fad0:	cmp	w3, #0x9
    fad4:	mov	w0, #0x1                   	// #1
    fad8:	b.hi	fb4c <lzma_lzma_preset@@XZ_5.0+0x84>  // b.pmore
    fadc:	tst	w1, #0x7fffffe0
    fae0:	mov	w0, #0x1                   	// #1
    fae4:	b.ne	fb4c <lzma_lzma_preset@@XZ_5.0+0x84>  // b.any
    fae8:	adrp	x4, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xac00>
    faec:	add	x4, x4, #0xa30
    faf0:	mov	x7, #0x300000000           	// #12884901888
    faf4:	mov	x6, #0x200000000           	// #8589934592
    faf8:	stp	xzr, x7, [x2, #8]
    fafc:	tst	w1, #0x1c
    fb00:	ldrb	w5, [x4, w3, uxtw]
    fb04:	str	x6, [x2, #24]
    fb08:	lsl	w5, w0, w5
    fb0c:	str	w5, [x2]
    fb10:	b.ne	fb50 <lzma_lzma_preset@@XZ_5.0+0x88>  // b.any
    fb14:	mov	w5, w3
    fb18:	cmp	w3, #0x0
    fb1c:	add	x4, x4, x5
    fb20:	cset	w5, ne  // ne = any
    fb24:	tst	w1, #0x1e
    fb28:	add	w5, w5, #0x3
    fb2c:	mov	w6, #0x111                 	// #273
    fb30:	mov	w8, #0x80                  	// #128
    fb34:	ldrb	w7, [x4, #16]
    fb38:	csel	w4, w6, w8, ne  // ne = any
    fb3c:	stp	w0, w4, [x2, #32]
    fb40:	mov	w0, #0x0                   	// #0
    fb44:	stp	w5, w7, [x2, #40]
    fb48:	tbnz	w1, #31, fb8c <lzma_lzma_preset@@XZ_5.0+0xc4>
    fb4c:	ret
    fb50:	mov	w0, #0x14                  	// #20
    fb54:	mov	w4, #0x2                   	// #2
    fb58:	str	w4, [x2, #32]
    fb5c:	cmp	w3, #0x4
    fb60:	str	w0, [x2, #40]
    fb64:	mov	w0, #0x10                  	// #16
    fb68:	b.eq	fb7c <lzma_lzma_preset@@XZ_5.0+0xb4>  // b.none
    fb6c:	cmp	w3, #0x5
    fb70:	mov	w0, #0x20                  	// #32
    fb74:	mov	w4, #0x40                  	// #64
    fb78:	csel	w0, w0, w4, eq  // eq = none
    fb7c:	str	w0, [x2, #36]
    fb80:	mov	w0, #0x0                   	// #0
    fb84:	str	wzr, [x2, #44]
    fb88:	tbz	w1, #31, fb4c <lzma_lzma_preset@@XZ_5.0+0x84>
    fb8c:	mov	w4, #0x2                   	// #2
    fb90:	mov	w1, #0x14                  	// #20
    fb94:	str	w4, [x2, #32]
    fb98:	sub	w3, w3, #0x3
    fb9c:	str	w1, [x2, #40]
    fba0:	tst	w3, #0xfffffffd
    fba4:	b.ne	fbb8 <lzma_lzma_preset@@XZ_5.0+0xf0>  // b.any
    fba8:	mov	w1, #0xc0                  	// #192
    fbac:	str	w1, [x2, #36]
    fbb0:	str	wzr, [x2, #44]
    fbb4:	ret
    fbb8:	mov	w3, #0x111                 	// #273
    fbbc:	mov	w1, #0x200                 	// #512
    fbc0:	str	w3, [x2, #36]
    fbc4:	str	w1, [x2, #44]
    fbc8:	ret
    fbcc:	nop
    fbd0:	mov	w2, w1
    fbd4:	mov	x3, #0x1200                	// #4608
    fbd8:	ldrh	w4, [x0, #2]
    fbdc:	add	x5, x2, x3
    fbe0:	ldrh	w3, [x0]
    fbe4:	adrp	x9, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
    fbe8:	add	x10, x0, #0x4, lsl #12
    fbec:	mov	w11, #0x440                 	// #1088
    fbf0:	ldr	x8, [x9, #3960]
    fbf4:	lsr	w3, w3, #4
    fbf8:	lsr	w4, w4, #4
    fbfc:	add	x5, x0, x5, lsl #2
    fc00:	eor	w7, w3, #0x7f
    fc04:	eor	w6, w4, #0x7f
    fc08:	umaddl	x1, w1, w11, x0
    fc0c:	ldr	w10, [x10, #2052]
    fc10:	ldrb	w12, [x8, w4, sxtw]
    fc14:	add	x11, x1, #0x404
    fc18:	ldrb	w1, [x8, w6, uxtw]
    fc1c:	str	w10, [x5, #8]
    fc20:	ldrb	w5, [x8, w7, uxtw]
    fc24:	ldrb	w16, [x8, w3, sxtw]
    fc28:	add	w12, w12, w5
    fc2c:	add	w5, w1, w5
    fc30:	cbz	w10, fd74 <lzma_lzma_preset@@XZ_5.0+0x2ac>
    fc34:	lsl	x13, x2, #4
    fc38:	mov	x15, x11
    fc3c:	add	x14, x13, #0x4
    fc40:	mov	w7, #0x0                   	// #0
    fc44:	nop
    fc48:	add	w3, w7, #0x8
    fc4c:	mov	w4, #0x0                   	// #0
    fc50:	and	w1, w3, #0x1
    fc54:	lsr	w3, w3, #1
    fc58:	neg	w1, w1
    fc5c:	cmp	w3, #0x1
    fc60:	add	x6, x14, w3, uxtw #1
    fc64:	and	w2, w1, #0x7ff
    fc68:	ldrh	w1, [x0, x6]
    fc6c:	eor	w1, w1, w2
    fc70:	lsr	w1, w1, #4
    fc74:	ldrb	w1, [x8, w1, uxtw]
    fc78:	add	w4, w4, w1
    fc7c:	b.ne	fc50 <lzma_lzma_preset@@XZ_5.0+0x188>  // b.any
    fc80:	add	w7, w7, #0x1
    fc84:	add	w4, w16, w4
    fc88:	str	w4, [x15], #4
    fc8c:	cmp	w10, w7
    fc90:	ccmp	w7, #0x7, #0x2, hi  // hi = pmore
    fc94:	b.ls	fc48 <lzma_lzma_preset@@XZ_5.0+0x180>  // b.plast
    fc98:	cmp	w10, w7
    fc9c:	b.ls	fd74 <lzma_lzma_preset@@XZ_5.0+0x2ac>  // b.plast
    fca0:	add	x8, x13, #0x104
    fca4:	add	x14, x11, w7, uxtw #2
    fca8:	ldr	x13, [x9, #3960]
    fcac:	nop
    fcb0:	mov	w3, w7
    fcb4:	mov	w4, #0x0                   	// #0
    fcb8:	and	w1, w3, #0x1
    fcbc:	lsr	w3, w3, #1
    fcc0:	neg	w1, w1
    fcc4:	cmp	w3, #0x1
    fcc8:	add	x6, x8, w3, uxtw #1
    fccc:	and	w2, w1, #0x7ff
    fcd0:	ldrh	w1, [x0, x6]
    fcd4:	eor	w1, w1, w2
    fcd8:	lsr	w1, w1, #4
    fcdc:	ldrb	w1, [x13, w1, uxtw]
    fce0:	add	w4, w4, w1
    fce4:	b.ne	fcb8 <lzma_lzma_preset@@XZ_5.0+0x1f0>  // b.any
    fce8:	add	w1, w7, #0x1
    fcec:	add	w4, w12, w4
    fcf0:	str	w4, [x14], #4
    fcf4:	cmp	w10, w1
    fcf8:	ccmp	w1, #0xf, #0x2, hi  // hi = pmore
    fcfc:	b.hi	fd08 <lzma_lzma_preset@@XZ_5.0+0x240>  // b.pmore
    fd00:	mov	w7, w1
    fd04:	b	fcb0 <lzma_lzma_preset@@XZ_5.0+0x1e8>
    fd08:	cmp	w10, w1
    fd0c:	b.ls	fd74 <lzma_lzma_preset@@XZ_5.0+0x2ac>  // b.plast
    fd10:	ldr	x9, [x9, #3960]
    fd14:	add	x3, x0, #0x204
    fd18:	add	x11, x11, w1, uxtw #2
    fd1c:	add	w7, w7, #0xf1
    fd20:	add	w10, w10, #0xf0
    fd24:	nop
    fd28:	mov	w2, w7
    fd2c:	mov	w4, #0x0                   	// #0
    fd30:	and	w0, w2, #0x1
    fd34:	lsr	w2, w2, #1
    fd38:	neg	w0, w0
    fd3c:	cmp	w2, #0x1
    fd40:	lsl	w6, w2, #1
    fd44:	and	w1, w0, #0x7ff
    fd48:	ldrh	w0, [x3, x6]
    fd4c:	eor	w0, w0, w1
    fd50:	lsr	w0, w0, #4
    fd54:	ldrb	w0, [x9, w0, uxtw]
    fd58:	add	w4, w4, w0
    fd5c:	b.ne	fd30 <lzma_lzma_preset@@XZ_5.0+0x268>  // b.any
    fd60:	add	w4, w5, w4
    fd64:	str	w4, [x11], #4
    fd68:	add	w7, w7, #0x1
    fd6c:	cmp	w10, w7
    fd70:	b.ne	fd28 <lzma_lzma_preset@@XZ_5.0+0x260>  // b.any
    fd74:	ret
    fd78:	ldr	w2, [x0, #20]
    fd7c:	mov	x1, x0
    fd80:	mov	w0, #0x0                   	// #0
    fd84:	cmp	w2, #0x4
    fd88:	b.hi	fdd4 <lzma_lzma_preset@@XZ_5.0+0x30c>  // b.pmore
    fd8c:	ldr	w3, [x1, #24]
    fd90:	mov	w0, #0x0                   	// #0
    fd94:	cmp	w3, #0x4
    fd98:	b.hi	fdd4 <lzma_lzma_preset@@XZ_5.0+0x30c>  // b.pmore
    fd9c:	add	w2, w2, w3
    fda0:	cmp	w2, #0x4
    fda4:	b.hi	fdd4 <lzma_lzma_preset@@XZ_5.0+0x30c>  // b.pmore
    fda8:	ldr	w2, [x1, #28]
    fdac:	cmp	w2, #0x4
    fdb0:	b.hi	fdd4 <lzma_lzma_preset@@XZ_5.0+0x30c>  // b.pmore
    fdb4:	ldr	w2, [x1, #36]
    fdb8:	sub	w2, w2, #0x2
    fdbc:	cmp	w2, #0x10f
    fdc0:	b.hi	fdd4 <lzma_lzma_preset@@XZ_5.0+0x30c>  // b.pmore
    fdc4:	ldr	w0, [x1, #32]
    fdc8:	sub	w0, w0, #0x1
    fdcc:	cmp	w0, #0x1
    fdd0:	cset	w0, ls  // ls = plast
    fdd4:	ret
    fdd8:	stp	x29, x30, [sp, #-32]!
    fddc:	mov	w3, #0x4000400             	// #67109888
    fde0:	and	w2, w2, #0xff
    fde4:	mov	x29, sp
    fde8:	stp	x19, x20, [sp, #16]
    fdec:	mov	x19, x0
    fdf0:	mov	w20, w1
    fdf4:	str	w3, [x0]
    fdf8:	cbz	w1, fe5c <lzma_lzma_preset@@XZ_5.0+0x394>
    fdfc:	add	x5, x0, w1, uxtw #4
    fe00:	add	x3, x0, #0x4
    fe04:	add	x5, x5, #0x4
    fe08:	mov	w4, #0x400                 	// #1024
    fe0c:	nop
    fe10:	strh	w4, [x3]
    fe14:	add	x3, x3, #0x10
    fe18:	sturh	w4, [x3, #-14]
    fe1c:	sturh	w4, [x3, #-12]
    fe20:	sturh	w4, [x3, #-10]
    fe24:	sturh	w4, [x3, #-8]
    fe28:	sturh	w4, [x3, #-6]
    fe2c:	sturh	w4, [x3, #-4]
    fe30:	sturh	w4, [x3, #-2]
    fe34:	strh	w4, [x3, #240]
    fe38:	strh	w4, [x3, #242]
    fe3c:	strh	w4, [x3, #244]
    fe40:	strh	w4, [x3, #246]
    fe44:	strh	w4, [x3, #248]
    fe48:	strh	w4, [x3, #250]
    fe4c:	strh	w4, [x3, #252]
    fe50:	strh	w4, [x3, #254]
    fe54:	cmp	x3, x5
    fe58:	b.ne	fe10 <lzma_lzma_preset@@XZ_5.0+0x348>  // b.any
    fe5c:	add	x3, x19, #0x204
    fe60:	add	x5, x19, #0x404
    fe64:	mov	w4, #0x400                 	// #1024
    fe68:	strh	w4, [x3], #2
    fe6c:	cmp	x5, x3
    fe70:	b.ne	fe68 <lzma_lzma_preset@@XZ_5.0+0x3a0>  // b.any
    fe74:	cbnz	w2, fe98 <lzma_lzma_preset@@XZ_5.0+0x3d0>
    fe78:	cbz	w20, fe98 <lzma_lzma_preset@@XZ_5.0+0x3d0>
    fe7c:	mov	w18, #0x0                   	// #0
    fe80:	mov	w1, w18
    fe84:	add	w18, w18, #0x1
    fe88:	mov	x0, x19
    fe8c:	bl	fbd0 <lzma_lzma_preset@@XZ_5.0+0x108>
    fe90:	cmp	w20, w18
    fe94:	b.ne	fe80 <lzma_lzma_preset@@XZ_5.0+0x3b8>  // b.any
    fe98:	ldp	x19, x20, [sp, #16]
    fe9c:	ldp	x29, x30, [sp], #32
    fea0:	ret
    fea4:	nop
    fea8:	stp	x29, x30, [sp, #-128]!
    feac:	mov	x29, sp
    feb0:	stp	x19, x20, [sp, #16]
    feb4:	mov	x19, x0
    feb8:	ldrb	w0, [x0, #2957]
    febc:	stp	x21, x22, [sp, #32]
    fec0:	mov	x20, x3
    fec4:	mov	x21, x1
    fec8:	stp	x23, x24, [sp, #48]
    fecc:	mov	w22, w5
    fed0:	mov	x24, x4
    fed4:	stp	x25, x26, [sp, #64]
    fed8:	mov	x25, x2
    fedc:	stp	x27, x28, [sp, #80]
    fee0:	ldr	w27, [x1, #24]
    fee4:	cbz	w0, 10acc <lzma_lzma_preset@@XZ_5.0+0x1004>
    fee8:	ldr	w4, [x1, #28]
    feec:	ldr	x3, [x19, #24]
    fef0:	sub	w27, w27, w4
    fef4:	mov	w26, #0xffffffff            	// #-1
    fef8:	mov	x23, #0x1                   	// #1
    fefc:	nop
    ff00:	ldr	x0, [x19, #32]
    ff04:	mov	w4, #0xffffff              	// #16777215
    ff08:	mov	w2, #0xfeffffff            	// #-16777217
    ff0c:	mov	w5, #0x800                 	// #2048
    ff10:	cmp	x0, x3
    ff14:	b.cs	ff88 <lzma_lzma_preset@@XZ_5.0+0x4c0>  // b.hs, b.nlast
    ff18:	ldr	w1, [x19, #16]
    ff1c:	cmp	w1, w4
    ff20:	b.ls	101e4 <lzma_lzma_preset@@XZ_5.0+0x71c>  // b.plast
    ff24:	ldr	x0, [x19, #32]
    ff28:	add	x1, x19, x0, lsl #2
    ff2c:	ldr	w1, [x1, #40]
    ff30:	cmp	w1, #0x2
    ff34:	b.eq	10224 <lzma_lzma_preset@@XZ_5.0+0x75c>  // b.none
    ff38:	b.hi	10148 <lzma_lzma_preset@@XZ_5.0+0x680>  // b.pmore
    ff3c:	cbz	w1, 10294 <lzma_lzma_preset@@XZ_5.0+0x7cc>
    ff40:	add	x6, x0, #0x22
    ff44:	ldr	w3, [x19, #16]
    ff48:	ldr	x9, [x19]
    ff4c:	ldr	x7, [x19, x6, lsl #3]
    ff50:	lsr	w1, w3, #11
    ff54:	ldrh	w6, [x7]
    ff58:	sub	w8, w6, w6, lsr #5
    ff5c:	mul	w1, w1, w6
    ff60:	sub	w3, w3, w1
    ff64:	str	w3, [x19, #16]
    ff68:	add	x1, x9, w1, uxtw
    ff6c:	str	x1, [x19]
    ff70:	strh	w8, [x7]
    ff74:	ldr	x1, [x19, #24]
    ff78:	add	x0, x0, #0x1
    ff7c:	str	x0, [x19, #32]
    ff80:	cmp	x0, x1
    ff84:	b.cc	ff18 <lzma_lzma_preset@@XZ_5.0+0x450>  // b.lo, b.ul, b.last
    ff88:	stp	xzr, xzr, [x19, #24]
    ff8c:	cmn	w22, #0x1
    ff90:	ldr	w1, [x21, #24]
    ff94:	b.eq	ffc4 <lzma_lzma_preset@@XZ_5.0+0x4fc>  // b.none
    ff98:	ldr	w0, [x21, #28]
    ff9c:	sub	w0, w1, w0
    ffa0:	cmp	w0, w22
    ffa4:	b.cs	109e8 <lzma_lzma_preset@@XZ_5.0+0xf20>  // b.hs, b.nlast
    ffa8:	ldr	x0, [x20]
    ffac:	mov	x2, #0xeffe                	// #61438
    ffb0:	ldr	x3, [x19, #8]
    ffb4:	add	x0, x0, #0x4
    ffb8:	add	x0, x0, x3
    ffbc:	cmp	x0, x2
    ffc0:	b.hi	109e8 <lzma_lzma_preset@@XZ_5.0+0xf20>  // b.pmore
    ffc4:	ldr	w0, [x21, #32]
    ffc8:	cmp	w0, w1
    ffcc:	b.hi	ffe0 <lzma_lzma_preset@@XZ_5.0+0x518>  // b.pmore
    ffd0:	ldr	w0, [x21, #104]
    ffd4:	cbz	w0, 10128 <lzma_lzma_preset@@XZ_5.0+0x660>
    ffd8:	ldr	w0, [x21, #28]
    ffdc:	cbz	w0, 10d20 <lzma_lzma_preset@@XZ_5.0+0x1258>
    ffe0:	ldrb	w0, [x19, #2956]
    ffe4:	cbz	w0, 102d8 <lzma_lzma_preset@@XZ_5.0+0x810>
    ffe8:	add	x3, sp, #0x78
    ffec:	add	x2, sp, #0x7c
    fff0:	mov	x1, x21
    fff4:	mov	x0, x19
    fff8:	bl	11410 <lzma_mode_is_supported@@XZ_5.0+0x10>
    fffc:	ldr	w5, [x19, #736]
   10000:	mov	x11, #0x35ce                	// #13774
   10004:	ldr	w1, [x19, #2960]
   10008:	ldp	w18, w4, [sp, #120]
   1000c:	and	w8, w27, w1
   10010:	ubfiz	x0, x5, #4, #32
   10014:	and	w1, w27, w1
   10018:	add	x0, x0, x8
   1001c:	mov	w2, w5
   10020:	add	x0, x0, x11
   10024:	cmn	w4, #0x1
   10028:	ldr	x6, [x19, #24]
   1002c:	lsl	x0, x0, #1
   10030:	add	x7, x19, x0
   10034:	add	x3, x6, #0x1
   10038:	b.eq	104f8 <lzma_lzma_preset@@XZ_5.0+0xa30>  // b.none
   1003c:	add	x12, x19, x6, lsl #2
   10040:	add	x9, x19, x6, lsl #3
   10044:	mov	w11, #0x1                   	// #1
   10048:	mov	x10, #0x368e                	// #13966
   1004c:	add	x2, x2, x10
   10050:	cmp	w4, #0x3
   10054:	str	w11, [x12, #40]
   10058:	add	x10, x6, #0x2
   1005c:	str	x7, [x9, #272]
   10060:	lsl	x2, x2, #1
   10064:	str	x3, [x19, #24]
   10068:	add	x14, x6, #0x3
   1006c:	add	x7, x19, x2
   10070:	b.hi	102f4 <lzma_lzma_preset@@XZ_5.0+0x82c>  // b.pmore
   10074:	str	w11, [x12, #44]
   10078:	add	x3, x2, #0x18
   1007c:	str	x7, [x9, #280]
   10080:	add	x7, x19, x3
   10084:	str	x10, [x19, #24]
   10088:	add	x3, x6, #0x4
   1008c:	cbnz	w4, 10624 <lzma_lzma_preset@@XZ_5.0+0xb5c>
   10090:	str	wzr, [x12, #48]
   10094:	cmp	w18, w11
   10098:	str	x7, [x9, #288]
   1009c:	cset	w2, ne  // ne = any
   100a0:	add	x0, x0, #0x1e0
   100a4:	str	w2, [x12, #52]
   100a8:	add	x0, x19, x0
   100ac:	str	x0, [x9, #296]
   100b0:	str	x3, [x19, #24]
   100b4:	cmp	w18, #0x1
   100b8:	b.ne	10698 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.any
   100bc:	ldr	w8, [x21, #28]
   100c0:	cmp	w5, #0x7
   100c4:	mov	w7, w18
   100c8:	mov	w0, #0x9                   	// #9
   100cc:	mov	w1, #0xb                   	// #11
   100d0:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   100d4:	str	w0, [x19, #736]
   100d8:	sub	w18, w8, w18
   100dc:	add	w27, w27, w7
   100e0:	str	w18, [x21, #28]
   100e4:	b	ff00 <lzma_lzma_preset@@XZ_5.0+0x438>
   100e8:	ldr	x0, [x20]
   100ec:	b	10120 <lzma_lzma_preset@@XZ_5.0+0x658>
   100f0:	ldrb	w1, [x19, #20]
   100f4:	ldr	w3, [x19, #4]
   100f8:	add	w1, w1, w3
   100fc:	strb	w1, [x25, x0]
   10100:	strb	w26, [x19, #20]
   10104:	ldr	x0, [x20]
   10108:	ldr	x1, [x19, #8]
   1010c:	add	x0, x0, #0x1
   10110:	str	x0, [x20]
   10114:	sub	x1, x1, #0x1
   10118:	str	x1, [x19, #8]
   1011c:	cbz	x1, 102c0 <lzma_lzma_preset@@XZ_5.0+0x7f8>
   10120:	cmp	x24, x0
   10124:	b.ne	100f0 <lzma_lzma_preset@@XZ_5.0+0x628>  // b.any
   10128:	mov	w0, #0x0                   	// #0
   1012c:	ldp	x19, x20, [sp, #16]
   10130:	ldp	x21, x22, [sp, #32]
   10134:	ldp	x23, x24, [sp, #48]
   10138:	ldp	x25, x26, [sp, #64]
   1013c:	ldp	x27, x28, [sp, #80]
   10140:	ldp	x29, x30, [sp], #128
   10144:	ret
   10148:	cmp	w1, #0x3
   1014c:	b.eq	10278 <lzma_lzma_preset@@XZ_5.0+0x7b0>  // b.none
   10150:	cmp	w1, #0x4
   10154:	b.ne	ff74 <lzma_lzma_preset@@XZ_5.0+0x4ac>  // b.any
   10158:	mov	w1, #0xffffffff            	// #-1
   1015c:	mov	w3, #0xfeffffff            	// #-16777217
   10160:	str	w1, [x19, #16]
   10164:	ldr	x6, [x19]
   10168:	b	10198 <lzma_lzma_preset@@XZ_5.0+0x6d0>
   1016c:	cmp	xzr, x6, lsr #32
   10170:	b.ne	101a0 <lzma_lzma_preset@@XZ_5.0+0x6d8>  // b.any
   10174:	ldr	x1, [x19, #8]
   10178:	add	x0, x0, #0x1
   1017c:	ldr	x2, [x19, #24]
   10180:	add	x1, x1, #0x1
   10184:	lsl	w6, w6, #8
   10188:	stp	x6, x1, [x19]
   1018c:	cmp	x0, x2
   10190:	str	x0, [x19, #32]
   10194:	b.cs	10264 <lzma_lzma_preset@@XZ_5.0+0x79c>  // b.hs, b.nlast
   10198:	cmp	w6, w3
   1019c:	b.hi	1016c <lzma_lzma_preset@@XZ_5.0+0x6a4>  // b.pmore
   101a0:	ldr	x0, [x20]
   101a4:	b	101d8 <lzma_lzma_preset@@XZ_5.0+0x710>
   101a8:	ldrb	w1, [x19, #20]
   101ac:	ldr	w2, [x19, #4]
   101b0:	add	w1, w1, w2
   101b4:	strb	w1, [x25, x0]
   101b8:	strb	w26, [x19, #20]
   101bc:	ldr	x0, [x20]
   101c0:	ldr	x1, [x19, #8]
   101c4:	add	x0, x0, #0x1
   101c8:	str	x0, [x20]
   101cc:	sub	x1, x1, #0x1
   101d0:	str	x1, [x19, #8]
   101d4:	cbz	x1, 10234 <lzma_lzma_preset@@XZ_5.0+0x76c>
   101d8:	cmp	x24, x0
   101dc:	b.ne	101a8 <lzma_lzma_preset@@XZ_5.0+0x6e0>  // b.any
   101e0:	b	10128 <lzma_lzma_preset@@XZ_5.0+0x660>
   101e4:	ldr	x0, [x19]
   101e8:	cmp	w0, w2
   101ec:	b.ls	100e8 <lzma_lzma_preset@@XZ_5.0+0x620>  // b.plast
   101f0:	cmp	xzr, x0, lsr #32
   101f4:	b.ne	100e8 <lzma_lzma_preset@@XZ_5.0+0x620>  // b.any
   101f8:	ldr	x3, [x19, #8]
   101fc:	add	x3, x3, #0x1
   10200:	lsl	w0, w0, #8
   10204:	stp	x0, x3, [x19]
   10208:	lsl	w1, w1, #8
   1020c:	ldr	x0, [x19, #32]
   10210:	str	w1, [x19, #16]
   10214:	add	x1, x19, x0, lsl #2
   10218:	ldr	w1, [x1, #40]
   1021c:	cmp	w1, #0x2
   10220:	b.ne	ff38 <lzma_lzma_preset@@XZ_5.0+0x470>  // b.any
   10224:	ldr	w1, [x19, #16]
   10228:	lsr	w1, w1, #1
   1022c:	str	w1, [x19, #16]
   10230:	b	ff74 <lzma_lzma_preset@@XZ_5.0+0x4ac>
   10234:	ldr	x6, [x19]
   10238:	mov	x1, #0x1                   	// #1
   1023c:	ldr	x0, [x19, #32]
   10240:	lsr	x2, x6, #24
   10244:	strb	w2, [x19, #20]
   10248:	ldr	x2, [x19, #24]
   1024c:	add	x0, x0, #0x1
   10250:	lsl	w6, w6, #8
   10254:	stp	x6, x1, [x19]
   10258:	cmp	x0, x2
   1025c:	str	x0, [x19, #32]
   10260:	b.cc	10198 <lzma_lzma_preset@@XZ_5.0+0x6d0>  // b.lo, b.ul, b.last
   10264:	mov	w0, #0xffffffff            	// #-1
   10268:	stp	xzr, x23, [x19]
   1026c:	str	w0, [x19, #16]
   10270:	strb	wzr, [x19, #20]
   10274:	b	ff88 <lzma_lzma_preset@@XZ_5.0+0x4c0>
   10278:	ldr	w1, [x19, #16]
   1027c:	ldr	x3, [x19]
   10280:	lsr	w1, w1, #1
   10284:	str	w1, [x19, #16]
   10288:	add	x1, x3, x1
   1028c:	str	x1, [x19]
   10290:	b	ff74 <lzma_lzma_preset@@XZ_5.0+0x4ac>
   10294:	add	x3, x0, #0x22
   10298:	ldr	w1, [x19, #16]
   1029c:	ldr	x7, [x19, x3, lsl #3]
   102a0:	lsr	w1, w1, #11
   102a4:	ldrh	w6, [x7]
   102a8:	sub	w3, w5, w6
   102ac:	mul	w1, w1, w6
   102b0:	add	w3, w6, w3, lsr #5
   102b4:	str	w1, [x19, #16]
   102b8:	strh	w3, [x7]
   102bc:	b	ff74 <lzma_lzma_preset@@XZ_5.0+0x4ac>
   102c0:	ldr	x0, [x19]
   102c4:	mov	x3, #0x1                   	// #1
   102c8:	ldr	w1, [x19, #16]
   102cc:	lsr	x6, x0, #24
   102d0:	strb	w6, [x19, #20]
   102d4:	b	10200 <lzma_lzma_preset@@XZ_5.0+0x738>
   102d8:	mov	w4, w27
   102dc:	add	x3, sp, #0x78
   102e0:	add	x2, sp, #0x7c
   102e4:	mov	x1, x21
   102e8:	mov	x0, x19
   102ec:	bl	118d0 <lzma_mode_is_supported@@XZ_5.0+0x4d0>
   102f0:	b	fffc <lzma_lzma_preset@@XZ_5.0+0x534>
   102f4:	str	wzr, [x12, #44]
   102f8:	cmp	w5, #0x7
   102fc:	str	x7, [x9, #280]
   10300:	mov	w0, #0x7                   	// #7
   10304:	mov	w2, #0xa                   	// #10
   10308:	csel	w0, w0, w2, cc  // cc = lo, ul, last
   1030c:	str	x10, [x19, #24]
   10310:	sub	w13, w18, #0x2
   10314:	str	w0, [x19, #736]
   10318:	sub	w4, w4, #0x4
   1031c:	mov	x0, #0x7200                	// #29184
   10320:	ldrb	w10, [x19, #2956]
   10324:	cmp	w13, #0x7
   10328:	add	x0, x19, x0
   1032c:	b.hi	105b0 <lzma_lzma_preset@@XZ_5.0+0xae8>  // b.pmore
   10330:	mov	x14, #0x4                   	// #4
   10334:	add	x7, x6, #0x4
   10338:	add	x14, x14, w1, uxtw #4
   1033c:	add	x2, x19, #0x24
   10340:	add	x28, x19, #0x108
   10344:	str	wzr, [x12, #48]
   10348:	mov	w5, #0x3                   	// #3
   1034c:	str	x0, [x9, #288]
   10350:	sub	w5, w5, #0x1
   10354:	add	x9, x14, w11, uxtw #1
   10358:	add	x9, x0, x9
   1035c:	lsr	w3, w13, w5
   10360:	and	w3, w3, #0x1
   10364:	str	w3, [x2, x7, lsl #2]
   10368:	add	w11, w3, w11, lsl #1
   1036c:	str	x9, [x28, x7, lsl #3]
   10370:	add	x7, x7, #0x1
   10374:	cbnz	w5, 10350 <lzma_lzma_preset@@XZ_5.0+0x888>
   10378:	add	x6, x6, #0x6
   1037c:	str	x6, [x19, #24]
   10380:	mov	w7, w18
   10384:	cbnz	w10, 103a0 <lzma_lzma_preset@@XZ_5.0+0x8d8>
   10388:	add	x8, x19, x8, lsl #2
   1038c:	add	x8, x8, #0x8, lsl #12
   10390:	ldr	w3, [x8, #14856]
   10394:	sub	w3, w3, #0x1
   10398:	str	w3, [x8, #14856]
   1039c:	cbz	w3, 10968 <lzma_lzma_preset@@XZ_5.0+0xea0>
   103a0:	mov	w0, #0x1fff                	// #8191
   103a4:	cmp	w4, w0
   103a8:	b.ls	10750 <lzma_lzma_preset@@XZ_5.0+0xc88>  // b.plast
   103ac:	mov	w0, #0x1ffffff             	// #33554431
   103b0:	cmp	w4, w0
   103b4:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   103b8:	b.ls	10944 <lzma_lzma_preset@@XZ_5.0+0xe7c>  // b.plast
   103bc:	ldr	x0, [x0, #4008]
   103c0:	lsr	w1, w4, #24
   103c4:	ldrb	w12, [x0, w1, uxtw]
   103c8:	add	w12, w12, #0x30
   103cc:	cmp	w18, #0x5
   103d0:	mov	w6, #0x5                   	// #5
   103d4:	csel	w6, w18, w6, ls  // ls = plast
   103d8:	mov	x30, #0x6efc                	// #28412
   103dc:	sub	w6, w6, #0x2
   103e0:	add	x9, x19, #0x28
   103e4:	ldr	x5, [x19, #24]
   103e8:	ubfiz	x6, x6, #7, #32
   103ec:	add	x10, x19, #0x110
   103f0:	add	x6, x6, x30
   103f4:	add	x3, x5, #0x6
   103f8:	mov	x1, x5
   103fc:	add	w13, w5, #0x5
   10400:	mov	w11, #0x1                   	// #1
   10404:	nop
   10408:	sub	w0, w13, w1
   1040c:	add	x8, x6, w11, uxtw #1
   10410:	add	x8, x19, x8
   10414:	lsr	w0, w12, w0
   10418:	and	w0, w0, #0x1
   1041c:	str	w0, [x9, x1, lsl #2]
   10420:	add	w11, w0, w11, lsl #1
   10424:	str	x8, [x10, x1, lsl #3]
   10428:	add	x1, x1, #0x1
   1042c:	cmp	x1, x3
   10430:	b.ne	10408 <lzma_lzma_preset@@XZ_5.0+0x940>  // b.any
   10434:	str	x1, [x19, #24]
   10438:	cmp	w12, #0x3
   1043c:	add	x1, x19, #0x10, lsl #12
   10440:	b.ls	104cc <lzma_lzma_preset@@XZ_5.0+0xa04>  // b.plast
   10444:	lsr	w9, w12, #1
   10448:	and	w1, w12, #0x1
   1044c:	sub	w0, w9, #0x1
   10450:	orr	w1, w1, #0x2
   10454:	cmp	w12, #0xd
   10458:	lsl	w1, w1, w0
   1045c:	sub	w0, w4, w1
   10460:	b.hi	10838 <lzma_lzma_preset@@XZ_5.0+0xd70>  // b.pmore
   10464:	mov	w8, w1
   10468:	sub	w3, w9, #0x2
   1046c:	sub	x8, x8, x12
   10470:	add	x11, x5, #0x8
   10474:	add	x5, x5, #0x7
   10478:	mov	x17, #0x70fc                	// #28924
   1047c:	lsl	x8, x8, #1
   10480:	add	x11, x11, x3
   10484:	sub	x8, x8, #0x2
   10488:	mov	x1, x5
   1048c:	add	x12, x19, x17
   10490:	mov	w9, #0x1                   	// #1
   10494:	nop
   10498:	and	w10, w0, #0x1
   1049c:	add	x6, x8, w9, uxtw #1
   104a0:	str	w10, [x2, x1, lsl #2]
   104a4:	add	x6, x12, x6
   104a8:	str	x6, [x28, x1, lsl #3]
   104ac:	add	x1, x1, #0x1
   104b0:	lsr	w0, w0, #1
   104b4:	add	w9, w10, w9, lsl #1
   104b8:	cmp	x11, x1
   104bc:	b.ne	10498 <lzma_lzma_preset@@XZ_5.0+0x9d0>  // b.any
   104c0:	add	x1, x19, #0x10, lsl #12
   104c4:	add	x3, x5, x3
   104c8:	str	x3, [x19, #24]
   104cc:	add	x15, x19, #0x2ec
   104d0:	ldr	w0, [x1, #3732]
   104d4:	ldr	w6, [x19, #740]
   104d8:	ldr	w5, [x19, #744]
   104dc:	add	w0, w0, #0x1
   104e0:	ldr	w2, [x19, #748]
   104e4:	stp	w4, w6, [x15, #-8]
   104e8:	stp	w5, w2, [x15]
   104ec:	ldr	w8, [x21, #28]
   104f0:	str	w0, [x1, #3732]
   104f4:	b	100d8 <lzma_lzma_preset@@XZ_5.0+0x610>
   104f8:	ldp	w9, w8, [x21, #24]
   104fc:	add	x1, x19, x6, lsl #2
   10500:	add	x0, x6, #0x22
   10504:	mov	w4, #0x8                   	// #8
   10508:	ldr	x10, [x21]
   1050c:	str	wzr, [x1, #40]
   10510:	sub	w1, w9, w8
   10514:	str	x7, [x19, x0, lsl #3]
   10518:	sub	w11, w1, #0x1
   1051c:	str	x3, [x19, #24]
   10520:	ldr	w7, [x19, #2964]
   10524:	sub	w3, w9, #0x1
   10528:	ldr	w0, [x19, #2968]
   1052c:	mov	w2, #0x600                 	// #1536
   10530:	ldrb	w9, [x10, w11, uxtw]
   10534:	sub	w11, w4, w7
   10538:	and	w0, w27, w0
   1053c:	ldrb	w1, [x10, w1, uxtw]
   10540:	cmp	w5, #0x6
   10544:	lsl	w0, w0, w7
   10548:	asr	w9, w9, w11
   1054c:	add	w9, w9, w0
   10550:	umaddl	x9, w9, w2, x19
   10554:	add	x9, x9, #0xb9c
   10558:	b.hi	10760 <lzma_lzma_preset@@XZ_5.0+0xc98>  // b.pmore
   1055c:	add	x3, x6, #0x2
   10560:	add	x2, x19, #0x24
   10564:	add	x28, x19, #0x108
   10568:	mov	w7, #0x1                   	// #1
   1056c:	nop
   10570:	sub	w4, w4, #0x1
   10574:	add	x10, x9, w7, uxtw #1
   10578:	lsr	w0, w1, w4
   1057c:	and	w0, w0, #0x1
   10580:	str	w0, [x2, x3, lsl #2]
   10584:	add	w7, w0, w7, lsl #1
   10588:	str	x10, [x28, x3, lsl #3]
   1058c:	add	x3, x3, #0x1
   10590:	cbnz	w4, 10570 <lzma_lzma_preset@@XZ_5.0+0xaa8>
   10594:	add	x3, x6, #0x9
   10598:	str	x3, [x19, #24]
   1059c:	cmp	w5, #0x3
   105a0:	b.hi	107d8 <lzma_lzma_preset@@XZ_5.0+0xd10>  // b.pmore
   105a4:	mov	w7, w18
   105a8:	str	w4, [x19, #736]
   105ac:	b	100d8 <lzma_lzma_preset@@XZ_5.0+0x610>
   105b0:	str	w11, [x12, #48]
   105b4:	sub	w13, w18, #0xa
   105b8:	str	x0, [x9, #288]
   105bc:	cmp	w13, #0x7
   105c0:	str	x14, [x19, #24]
   105c4:	add	x3, x0, #0x2
   105c8:	b.hi	107e0 <lzma_lzma_preset@@XZ_5.0+0xd18>  // b.pmore
   105cc:	lsl	x14, x8, #4
   105d0:	add	x7, x6, #0x5
   105d4:	add	x14, x14, #0x104
   105d8:	add	x2, x19, #0x24
   105dc:	add	x28, x19, #0x108
   105e0:	str	wzr, [x12, #52]
   105e4:	mov	w5, #0x3                   	// #3
   105e8:	str	x3, [x9, #296]
   105ec:	nop
   105f0:	sub	w5, w5, #0x1
   105f4:	add	x9, x14, w11, uxtw #1
   105f8:	add	x9, x0, x9
   105fc:	lsr	w3, w13, w5
   10600:	and	w3, w3, #0x1
   10604:	str	w3, [x2, x7, lsl #2]
   10608:	add	w11, w3, w11, lsl #1
   1060c:	str	x9, [x28, x7, lsl #3]
   10610:	add	x7, x7, #0x1
   10614:	cbnz	w5, 105f0 <lzma_lzma_preset@@XZ_5.0+0xb28>
   10618:	add	x6, x6, #0x7
   1061c:	str	x6, [x19, #24]
   10620:	b	10380 <lzma_lzma_preset@@XZ_5.0+0x8b8>
   10624:	add	x10, x19, w4, uxtw #2
   10628:	add	x0, x2, #0x30
   1062c:	cmp	w4, #0x1
   10630:	add	x0, x19, x0
   10634:	ldr	w10, [x10, #740]
   10638:	str	w11, [x12, #48]
   1063c:	str	x7, [x9, #288]
   10640:	str	x14, [x19, #24]
   10644:	b.eq	10958 <lzma_lzma_preset@@XZ_5.0+0xe90>  // b.none
   10648:	str	w11, [x12, #52]
   1064c:	add	x2, x2, #0x48
   10650:	str	x0, [x9, #296]
   10654:	sub	w0, w4, #0x2
   10658:	str	w0, [x12, #56]
   1065c:	add	x2, x19, x2
   10660:	str	x2, [x9, #304]
   10664:	add	x3, x6, #0x5
   10668:	str	x3, [x19, #24]
   1066c:	cmp	w4, #0x3
   10670:	b.ne	1067c <lzma_lzma_preset@@XZ_5.0+0xbb4>  // b.any
   10674:	ldr	w0, [x19, #748]
   10678:	str	w0, [x19, #752]
   1067c:	ldr	w0, [x19, #744]
   10680:	str	w0, [x19, #748]
   10684:	ldr	w0, [x19, #740]
   10688:	cmp	w18, #0x1
   1068c:	str	w10, [x19, #740]
   10690:	str	w0, [x19, #744]
   10694:	b.eq	100bc <lzma_lzma_preset@@XZ_5.0+0x5f4>  // b.none
   10698:	sub	w12, w18, #0x2
   1069c:	mov	x2, #0xba48                	// #47688
   106a0:	ldrb	w11, [x19, #2956]
   106a4:	add	x0, x19, x2
   106a8:	cmp	w12, #0x7
   106ac:	add	x7, x3, #0x1
   106b0:	b.hi	108c8 <lzma_lzma_preset@@XZ_5.0+0xe00>  // b.pmore
   106b4:	add	x6, x19, x3, lsl #2
   106b8:	add	x4, x3, #0x22
   106bc:	mov	x13, #0x4                   	// #4
   106c0:	add	x7, x3, #0x2
   106c4:	add	x13, x13, w1, uxtw #4
   106c8:	add	x2, x19, #0x24
   106cc:	add	x28, x19, #0x108
   106d0:	str	wzr, [x6, #40]
   106d4:	mov	w10, #0x1                   	// #1
   106d8:	mov	w6, #0x3                   	// #3
   106dc:	str	x0, [x19, x4, lsl #3]
   106e0:	sub	w6, w6, #0x1
   106e4:	add	x9, x13, w10, uxtw #1
   106e8:	add	x9, x0, x9
   106ec:	lsr	w4, w12, w6
   106f0:	and	w4, w4, #0x1
   106f4:	str	w4, [x2, x7, lsl #2]
   106f8:	add	w10, w4, w10, lsl #1
   106fc:	str	x9, [x28, x7, lsl #3]
   10700:	add	x7, x7, #0x1
   10704:	cbnz	w6, 106e0 <lzma_lzma_preset@@XZ_5.0+0xc18>
   10708:	add	x3, x3, #0x4
   1070c:	str	x3, [x19, #24]
   10710:	mov	w7, w18
   10714:	cbnz	w11, 10730 <lzma_lzma_preset@@XZ_5.0+0xc68>
   10718:	add	x8, x19, x8, lsl #2
   1071c:	add	x8, x8, #0x10, lsl #12
   10720:	ldr	w2, [x8, #592]
   10724:	sub	w2, w2, #0x1
   10728:	str	w2, [x8, #592]
   1072c:	cbz	w2, 109d8 <lzma_lzma_preset@@XZ_5.0+0xf10>
   10730:	cmp	w5, #0x7
   10734:	mov	w0, #0x8                   	// #8
   10738:	mov	w1, #0xb                   	// #11
   1073c:	ldr	w8, [x21, #28]
   10740:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   10744:	str	w0, [x19, #736]
   10748:	ldr	x3, [x19, #24]
   1074c:	b	100d8 <lzma_lzma_preset@@XZ_5.0+0x610>
   10750:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   10754:	ldr	x0, [x0, #4008]
   10758:	ldrb	w12, [x0, w4, uxtw]
   1075c:	b	103cc <lzma_lzma_preset@@XZ_5.0+0x904>
   10760:	ldr	w0, [x19, #740]
   10764:	add	w1, w1, #0x100
   10768:	add	x6, x6, #0x2
   1076c:	add	x2, x19, #0x24
   10770:	add	w0, w8, w0
   10774:	add	x28, x19, #0x108
   10778:	sub	w3, w3, w0
   1077c:	mov	w7, #0x100                 	// #256
   10780:	mov	w11, #0xffff                	// #65535
   10784:	ldrb	w4, [x10, w3, uxtw]
   10788:	lsl	w4, w4, #1
   1078c:	ubfx	x3, x1, #7, #1
   10790:	and	w0, w4, w7
   10794:	str	w3, [x2, x6, lsl #2]
   10798:	add	w0, w0, w1, lsr #8
   1079c:	lsl	w1, w1, #1
   107a0:	add	w0, w0, w7
   107a4:	eon	w10, w4, w1
   107a8:	mov	x3, x6
   107ac:	cmp	w1, w11
   107b0:	add	x0, x9, x0, lsl #1
   107b4:	str	x0, [x28, x6, lsl #3]
   107b8:	and	w7, w7, w10
   107bc:	add	x6, x6, #0x1
   107c0:	b.ls	10788 <lzma_lzma_preset@@XZ_5.0+0xcc0>  // b.plast
   107c4:	str	x3, [x19, #24]
   107c8:	cmp	w5, #0x9
   107cc:	b.ls	107d8 <lzma_lzma_preset@@XZ_5.0+0xd10>  // b.plast
   107d0:	sub	w4, w5, #0x6
   107d4:	b	105a4 <lzma_lzma_preset@@XZ_5.0+0xadc>
   107d8:	sub	w4, w5, #0x3
   107dc:	b	105a4 <lzma_lzma_preset@@XZ_5.0+0xadc>
   107e0:	mov	w13, w11
   107e4:	sub	w15, w18, #0x12
   107e8:	add	x14, x0, #0x204
   107ec:	add	x7, x6, #0x5
   107f0:	add	x2, x19, #0x24
   107f4:	add	x28, x19, #0x108
   107f8:	str	w11, [x12, #52]
   107fc:	mov	w5, #0x8                   	// #8
   10800:	str	x3, [x9, #296]
   10804:	nop
   10808:	sub	w5, w5, #0x1
   1080c:	add	x9, x14, w13, uxtw #1
   10810:	lsr	w3, w15, w5
   10814:	and	w3, w3, #0x1
   10818:	str	w3, [x2, x7, lsl #2]
   1081c:	add	w13, w3, w13, lsl #1
   10820:	str	x9, [x28, x7, lsl #3]
   10824:	add	x7, x7, #0x1
   10828:	cbnz	w5, 10808 <lzma_lzma_preset@@XZ_5.0+0xd40>
   1082c:	add	x6, x6, #0xc
   10830:	str	x6, [x19, #24]
   10834:	b	10380 <lzma_lzma_preset@@XZ_5.0+0x8b8>
   10838:	add	x5, x19, x5, lsl #2
   1083c:	lsr	w8, w0, #4
   10840:	sub	w6, w9, #0x5
   10844:	nop
   10848:	sub	w6, w6, #0x1
   1084c:	add	x5, x5, #0x4
   10850:	lsr	w1, w8, w6
   10854:	and	w1, w1, #0x1
   10858:	add	w1, w1, #0x2
   1085c:	str	w1, [x5, #60]
   10860:	cbnz	w6, 10848 <lzma_lzma_preset@@XZ_5.0+0xd80>
   10864:	sub	w9, w9, #0x6
   10868:	mov	x16, #0x71e0                	// #29152
   1086c:	add	x3, x9, x3
   10870:	and	w0, w0, #0xf
   10874:	add	x10, x19, x16
   10878:	add	x1, x3, #0x2
   1087c:	add	x9, x3, #0x6
   10880:	mov	w5, #0x1                   	// #1
   10884:	nop
   10888:	and	w6, w0, #0x1
   1088c:	str	w6, [x2, x1, lsl #2]
   10890:	add	x8, x10, w5, uxtw #1
   10894:	str	x8, [x28, x1, lsl #3]
   10898:	add	x1, x1, #0x1
   1089c:	lsr	w0, w0, #1
   108a0:	add	w5, w6, w5, lsl #1
   108a4:	cmp	x9, x1
   108a8:	b.ne	10888 <lzma_lzma_preset@@XZ_5.0+0xdc0>  // b.any
   108ac:	add	x1, x19, #0x10, lsl #12
   108b0:	add	x3, x3, #0x5
   108b4:	ldr	w0, [x1, #3800]
   108b8:	str	x3, [x19, #24]
   108bc:	add	w0, w0, #0x1
   108c0:	str	w0, [x1, #3800]
   108c4:	b	104cc <lzma_lzma_preset@@XZ_5.0+0xa04>
   108c8:	add	x9, x19, x3, lsl #2
   108cc:	add	x4, x19, x3, lsl #3
   108d0:	mov	w12, #0x1                   	// #1
   108d4:	sub	w14, w18, #0xa
   108d8:	cmp	w14, #0x7
   108dc:	add	x6, x0, #0x2
   108e0:	str	w12, [x9, #40]
   108e4:	add	x2, x3, #0x2
   108e8:	str	x0, [x4, #272]
   108ec:	str	x7, [x19, #24]
   108f0:	b.hi	10984 <lzma_lzma_preset@@XZ_5.0+0xebc>  // b.pmore
   108f4:	lsl	x13, x8, #4
   108f8:	add	x10, x19, #0x110
   108fc:	add	x13, x13, #0x104
   10900:	str	wzr, [x9, #44]
   10904:	add	x9, x19, #0x28
   10908:	str	x6, [x4, #280]
   1090c:	mov	w6, #0x3                   	// #3
   10910:	sub	w6, w6, #0x1
   10914:	add	x7, x13, w12, uxtw #1
   10918:	add	x7, x0, x7
   1091c:	lsr	w4, w14, w6
   10920:	and	w4, w4, #0x1
   10924:	str	w4, [x9, x2, lsl #2]
   10928:	add	w12, w4, w12, lsl #1
   1092c:	str	x7, [x10, x2, lsl #3]
   10930:	add	x2, x2, #0x1
   10934:	cbnz	w6, 10910 <lzma_lzma_preset@@XZ_5.0+0xe48>
   10938:	add	x3, x3, #0x5
   1093c:	str	x3, [x19, #24]
   10940:	b	10710 <lzma_lzma_preset@@XZ_5.0+0xc48>
   10944:	ldr	x0, [x0, #4008]
   10948:	lsr	w1, w4, #12
   1094c:	ldrb	w12, [x0, w1, uxtw]
   10950:	add	w12, w12, #0x18
   10954:	b	103cc <lzma_lzma_preset@@XZ_5.0+0x904>
   10958:	str	wzr, [x12, #52]
   1095c:	str	x0, [x9, #296]
   10960:	str	x3, [x19, #24]
   10964:	b	10684 <lzma_lzma_preset@@XZ_5.0+0xbbc>
   10968:	str	w4, [sp, #96]
   1096c:	str	x2, [sp, #104]
   10970:	bl	fbd0 <lzma_lzma_preset@@XZ_5.0+0x108>
   10974:	ldr	w4, [sp, #96]
   10978:	ldr	w7, [sp, #120]
   1097c:	ldr	x2, [sp, #104]
   10980:	b	103a0 <lzma_lzma_preset@@XZ_5.0+0x8d8>
   10984:	mov	w7, w12
   10988:	sub	w14, w18, #0x12
   1098c:	add	x13, x0, #0x204
   10990:	add	x10, x19, #0x110
   10994:	str	w12, [x9, #44]
   10998:	add	x9, x19, #0x28
   1099c:	str	x6, [x4, #280]
   109a0:	mov	w6, #0x8                   	// #8
   109a4:	nop
   109a8:	sub	w6, w6, #0x1
   109ac:	add	x12, x13, w7, uxtw #1
   109b0:	lsr	w4, w14, w6
   109b4:	and	w4, w4, #0x1
   109b8:	str	w4, [x9, x2, lsl #2]
   109bc:	add	w7, w4, w7, lsl #1
   109c0:	str	x12, [x10, x2, lsl #3]
   109c4:	add	x2, x2, #0x1
   109c8:	cbnz	w6, 109a8 <lzma_lzma_preset@@XZ_5.0+0xee0>
   109cc:	add	x3, x3, #0xa
   109d0:	str	x3, [x19, #24]
   109d4:	b	10710 <lzma_lzma_preset@@XZ_5.0+0xc48>
   109d8:	bl	fbd0 <lzma_lzma_preset@@XZ_5.0+0x108>
   109dc:	ldr	w5, [x19, #736]
   109e0:	ldr	w7, [sp, #120]
   109e4:	b	10730 <lzma_lzma_preset@@XZ_5.0+0xc68>
   109e8:	ldrb	w0, [x19, #2958]
   109ec:	cbnz	w0, 10aa8 <lzma_lzma_preset@@XZ_5.0+0xfe0>
   109f0:	ldr	x3, [x19, #24]
   109f4:	mov	w0, #0x1                   	// #1
   109f8:	strb	w0, [x19, #2958]
   109fc:	add	x0, x19, x3, lsl #2
   10a00:	mov	w2, #0x4                   	// #4
   10a04:	mov	x1, #0x400000004           	// #17179869188
   10a08:	add	x3, x3, #0x5
   10a0c:	stp	x1, x1, [x0, #40]
   10a10:	str	w2, [x0, #56]
   10a14:	str	x3, [x19, #24]
   10a18:	ldr	x0, [x19, #32]
   10a1c:	cmp	x3, x0
   10a20:	b.ls	10aa4 <lzma_lzma_preset@@XZ_5.0+0xfdc>  // b.plast
   10a24:	mov	w4, #0xffffff              	// #16777215
   10a28:	mov	w5, #0xfeffffff            	// #-16777217
   10a2c:	mov	w3, #0xffffffff            	// #-1
   10a30:	mov	w6, #0x800                 	// #2048
   10a34:	ldr	w0, [x19, #16]
   10a38:	cmp	w0, w4
   10a3c:	b.ls	10c2c <lzma_lzma_preset@@XZ_5.0+0x1164>  // b.plast
   10a40:	ldr	x0, [x19, #32]
   10a44:	add	x1, x19, x0, lsl #2
   10a48:	ldr	w1, [x1, #40]
   10a4c:	cmp	w1, #0x2
   10a50:	b.eq	10c6c <lzma_lzma_preset@@XZ_5.0+0x11a4>  // b.none
   10a54:	b.hi	10b74 <lzma_lzma_preset@@XZ_5.0+0x10ac>  // b.pmore
   10a58:	cbz	w1, 10cc0 <lzma_lzma_preset@@XZ_5.0+0x11f8>
   10a5c:	add	x1, x0, #0x22
   10a60:	ldr	w2, [x19, #16]
   10a64:	ldr	x10, [x19]
   10a68:	ldr	x8, [x19, x1, lsl #3]
   10a6c:	lsr	w1, w2, #11
   10a70:	ldrh	w7, [x8]
   10a74:	sub	w9, w7, w7, lsr #5
   10a78:	mul	w1, w1, w7
   10a7c:	sub	w2, w2, w1
   10a80:	str	w2, [x19, #16]
   10a84:	add	x1, x10, w1, uxtw
   10a88:	str	x1, [x19]
   10a8c:	strh	w9, [x8]
   10a90:	ldr	x1, [x19, #24]
   10a94:	add	x0, x0, #0x1
   10a98:	str	x0, [x19, #32]
   10a9c:	cmp	x0, x1
   10aa0:	b.cc	10a34 <lzma_lzma_preset@@XZ_5.0+0xf6c>  // b.lo, b.ul, b.last
   10aa4:	stp	xzr, xzr, [x19, #24]
   10aa8:	mov	w0, #0x1                   	// #1
   10aac:	strb	wzr, [x19, #2958]
   10ab0:	ldp	x19, x20, [sp, #16]
   10ab4:	ldp	x21, x22, [sp, #32]
   10ab8:	ldp	x23, x24, [sp, #48]
   10abc:	ldp	x25, x26, [sp, #64]
   10ac0:	ldp	x27, x28, [sp, #80]
   10ac4:	ldp	x29, x30, [sp], #128
   10ac8:	ret
   10acc:	ldr	w0, [x1, #32]
   10ad0:	cmp	w0, w27
   10ad4:	b.eq	10f34 <lzma_lzma_preset@@XZ_5.0+0x146c>  // b.none
   10ad8:	ldr	x3, [x21, #56]
   10adc:	add	x2, x19, #0x24
   10ae0:	mov	x0, x21
   10ae4:	mov	w1, #0x1                   	// #1
   10ae8:	str	x2, [sp, #96]
   10aec:	add	x28, x19, #0x108
   10af0:	blr	x3
   10af4:	str	wzr, [x21, #28]
   10af8:	ldr	x3, [x19, #24]
   10afc:	mov	x12, #0x6b9c                	// #27548
   10b00:	ldr	x6, [x21]
   10b04:	add	x9, x3, #0x22
   10b08:	add	x10, x19, x3, lsl #2
   10b0c:	add	x0, x19, x12
   10b10:	add	x7, x3, #0x1
   10b14:	add	x8, x19, #0xb9c
   10b18:	ldr	x2, [sp, #96]
   10b1c:	str	wzr, [x10, #40]
   10b20:	str	x0, [x19, x9, lsl #3]
   10b24:	add	x4, x3, #0x2
   10b28:	str	x7, [x19, #24]
   10b2c:	mov	w5, #0x1                   	// #1
   10b30:	mov	w1, #0x8                   	// #8
   10b34:	ldrb	w7, [x6]
   10b38:	sub	w1, w1, #0x1
   10b3c:	add	x6, x8, w5, uxtw #1
   10b40:	lsr	w0, w7, w1
   10b44:	and	w0, w0, #0x1
   10b48:	str	w0, [x2, x4, lsl #2]
   10b4c:	add	w5, w0, w5, lsl #1
   10b50:	str	x6, [x28, x4, lsl #3]
   10b54:	add	x4, x4, #0x1
   10b58:	cbnz	w1, 10b38 <lzma_lzma_preset@@XZ_5.0+0x1070>
   10b5c:	ldr	w27, [x21, #24]
   10b60:	add	x3, x3, #0x9
   10b64:	str	x3, [x19, #24]
   10b68:	mov	w0, #0x1                   	// #1
   10b6c:	strb	w0, [x19, #2957]
   10b70:	b	fef4 <lzma_lzma_preset@@XZ_5.0+0x42c>
   10b74:	cmp	w1, #0x3
   10b78:	b.eq	10cec <lzma_lzma_preset@@XZ_5.0+0x1224>  // b.none
   10b7c:	cmp	w1, #0x4
   10b80:	b.ne	10a90 <lzma_lzma_preset@@XZ_5.0+0xfc8>  // b.any
   10b84:	mov	w2, #0xffffffff            	// #-1
   10b88:	mov	w5, #0xfeffffff            	// #-16777217
   10b8c:	mov	w3, w2
   10b90:	str	w2, [x19, #16]
   10b94:	ldr	x1, [x19]
   10b98:	b	10bc8 <lzma_lzma_preset@@XZ_5.0+0x1100>
   10b9c:	cmp	xzr, x1, lsr #32
   10ba0:	b.ne	10bd0 <lzma_lzma_preset@@XZ_5.0+0x1108>  // b.any
   10ba4:	ldr	x2, [x19, #8]
   10ba8:	add	x2, x2, #0x1
   10bac:	ldr	x4, [x19, #24]
   10bb0:	add	x0, x0, #0x1
   10bb4:	lsl	w1, w1, #8
   10bb8:	stp	x1, x2, [x19]
   10bbc:	cmp	x0, x4
   10bc0:	str	x0, [x19, #32]
   10bc4:	b.cs	10f4c <lzma_lzma_preset@@XZ_5.0+0x1484>  // b.hs, b.nlast
   10bc8:	cmp	w1, w5
   10bcc:	b.hi	10b9c <lzma_lzma_preset@@XZ_5.0+0x10d4>  // b.pmore
   10bd0:	ldr	x0, [x20]
   10bd4:	b	10c08 <lzma_lzma_preset@@XZ_5.0+0x1140>
   10bd8:	ldrb	w1, [x19, #20]
   10bdc:	ldr	w2, [x19, #4]
   10be0:	add	w1, w1, w2
   10be4:	strb	w1, [x25, x0]
   10be8:	strb	w3, [x19, #20]
   10bec:	ldr	x0, [x20]
   10bf0:	ldr	x1, [x19, #8]
   10bf4:	add	x0, x0, #0x1
   10bf8:	str	x0, [x20]
   10bfc:	sub	x1, x1, #0x1
   10c00:	str	x1, [x19, #8]
   10c04:	cbz	x1, 10c14 <lzma_lzma_preset@@XZ_5.0+0x114c>
   10c08:	cmp	x24, x0
   10c0c:	b.ne	10bd8 <lzma_lzma_preset@@XZ_5.0+0x1110>  // b.any
   10c10:	b	10128 <lzma_lzma_preset@@XZ_5.0+0x660>
   10c14:	ldr	x1, [x19]
   10c18:	mov	x2, #0x1                   	// #1
   10c1c:	ldr	x0, [x19, #32]
   10c20:	lsr	x4, x1, #24
   10c24:	strb	w4, [x19, #20]
   10c28:	b	10bac <lzma_lzma_preset@@XZ_5.0+0x10e4>
   10c2c:	ldr	x1, [x19]
   10c30:	cmp	w1, w5
   10c34:	b.ls	10c7c <lzma_lzma_preset@@XZ_5.0+0x11b4>  // b.plast
   10c38:	cmp	xzr, x1, lsr #32
   10c3c:	b.ne	10c7c <lzma_lzma_preset@@XZ_5.0+0x11b4>  // b.any
   10c40:	ldr	x2, [x19, #8]
   10c44:	add	x2, x2, #0x1
   10c48:	lsl	w0, w0, #8
   10c4c:	str	w0, [x19, #16]
   10c50:	ldr	x0, [x19, #32]
   10c54:	lsl	w1, w1, #8
   10c58:	stp	x1, x2, [x19]
   10c5c:	add	x1, x19, x0, lsl #2
   10c60:	ldr	w1, [x1, #40]
   10c64:	cmp	w1, #0x2
   10c68:	b.ne	10a54 <lzma_lzma_preset@@XZ_5.0+0xf8c>  // b.any
   10c6c:	ldr	w1, [x19, #16]
   10c70:	lsr	w1, w1, #1
   10c74:	str	w1, [x19, #16]
   10c78:	b	10a90 <lzma_lzma_preset@@XZ_5.0+0xfc8>
   10c7c:	ldr	x0, [x20]
   10c80:	b	10cb4 <lzma_lzma_preset@@XZ_5.0+0x11ec>
   10c84:	ldrb	w1, [x19, #20]
   10c88:	ldr	w2, [x19, #4]
   10c8c:	add	w1, w1, w2
   10c90:	strb	w1, [x25, x0]
   10c94:	strb	w3, [x19, #20]
   10c98:	ldr	x0, [x20]
   10c9c:	ldr	x1, [x19, #8]
   10ca0:	add	x0, x0, #0x1
   10ca4:	str	x0, [x20]
   10ca8:	sub	x1, x1, #0x1
   10cac:	str	x1, [x19, #8]
   10cb0:	cbz	x1, 10d08 <lzma_lzma_preset@@XZ_5.0+0x1240>
   10cb4:	cmp	x24, x0
   10cb8:	b.ne	10c84 <lzma_lzma_preset@@XZ_5.0+0x11bc>  // b.any
   10cbc:	b	10128 <lzma_lzma_preset@@XZ_5.0+0x660>
   10cc0:	add	x2, x0, #0x22
   10cc4:	ldr	w1, [x19, #16]
   10cc8:	ldr	x8, [x19, x2, lsl #3]
   10ccc:	lsr	w1, w1, #11
   10cd0:	ldrh	w7, [x8]
   10cd4:	sub	w2, w6, w7
   10cd8:	mul	w1, w1, w7
   10cdc:	add	w2, w7, w2, lsr #5
   10ce0:	str	w1, [x19, #16]
   10ce4:	strh	w2, [x8]
   10ce8:	b	10a90 <lzma_lzma_preset@@XZ_5.0+0xfc8>
   10cec:	ldr	w1, [x19, #16]
   10cf0:	ldr	x2, [x19]
   10cf4:	lsr	w1, w1, #1
   10cf8:	str	w1, [x19, #16]
   10cfc:	add	x1, x2, x1
   10d00:	str	x1, [x19]
   10d04:	b	10a90 <lzma_lzma_preset@@XZ_5.0+0xfc8>
   10d08:	ldr	x1, [x19]
   10d0c:	mov	x2, #0x1                   	// #1
   10d10:	ldr	w0, [x19, #16]
   10d14:	lsr	x7, x1, #24
   10d18:	strb	w7, [x19, #20]
   10d1c:	b	10c48 <lzma_lzma_preset@@XZ_5.0+0x1180>
   10d20:	ldrb	w0, [x19, #2958]
   10d24:	cbnz	w0, 10aa8 <lzma_lzma_preset@@XZ_5.0+0xfe0>
   10d28:	mov	w0, #0x1                   	// #1
   10d2c:	strb	w0, [x19, #2958]
   10d30:	cmn	w22, #0x1
   10d34:	ldr	x3, [x19, #24]
   10d38:	b.ne	109fc <lzma_lzma_preset@@XZ_5.0+0xf34>  // b.any
   10d3c:	ldr	w0, [x19, #736]
   10d40:	add	x5, x19, x3, lsl #2
   10d44:	ldr	w1, [x19, #2960]
   10d48:	add	x10, x19, x3, lsl #3
   10d4c:	mov	x12, #0x35ce                	// #13774
   10d50:	ldrb	w11, [x19, #2956]
   10d54:	ubfiz	x2, x0, #4, #32
   10d58:	and	w9, w27, w1
   10d5c:	add	x2, x2, x12
   10d60:	mov	w6, #0x1                   	// #1
   10d64:	add	x2, x2, x9
   10d68:	str	w6, [x5, #40]
   10d6c:	cmp	w0, #0x7
   10d70:	ubfiz	x0, x0, #1, #32
   10d74:	add	x2, x19, x2, lsl #1
   10d78:	str	x2, [x10, #272]
   10d7c:	mov	x13, #0x6d1c                	// #27932
   10d80:	add	x0, x0, x13
   10d84:	str	wzr, [x5, #44]
   10d88:	add	x0, x19, x0
   10d8c:	and	w1, w27, w1
   10d90:	str	x0, [x10, #280]
   10d94:	mov	w2, #0xa                   	// #10
   10d98:	mov	x7, #0x4                   	// #4
   10d9c:	mov	w0, #0x7                   	// #7
   10da0:	csel	w0, w0, w2, cc  // cc = lo, ul, last
   10da4:	str	w0, [x19, #736]
   10da8:	add	x4, x3, #0x4
   10dac:	add	x8, x3, #0x7
   10db0:	add	x28, x19, #0x108
   10db4:	add	x7, x7, w1, uxtw #4
   10db8:	add	x2, x19, #0x24
   10dbc:	str	wzr, [x5, #48]
   10dc0:	mov	x14, #0x7200                	// #29184
   10dc4:	add	x0, x19, x14
   10dc8:	str	x0, [x10, #288]
   10dcc:	nop
   10dd0:	add	x5, x7, w6, uxtw #1
   10dd4:	str	wzr, [x2, x4, lsl #2]
   10dd8:	add	x5, x0, x5
   10ddc:	str	x5, [x28, x4, lsl #3]
   10de0:	add	x4, x4, #0x1
   10de4:	lsl	w6, w6, #1
   10de8:	cmp	x8, x4
   10dec:	b.ne	10dd0 <lzma_lzma_preset@@XZ_5.0+0x1308>  // b.any
   10df0:	add	x6, x3, #0x6
   10df4:	str	x6, [x19, #24]
   10df8:	cbnz	w11, 10e14 <lzma_lzma_preset@@XZ_5.0+0x134c>
   10dfc:	add	x3, x19, x9, lsl #2
   10e00:	add	x3, x3, #0x8, lsl #12
   10e04:	ldr	w4, [x3, #14856]
   10e08:	sub	w4, w4, #0x1
   10e0c:	str	w4, [x3, #14856]
   10e10:	cbz	w4, 10f68 <lzma_lzma_preset@@XZ_5.0+0x14a0>
   10e14:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   10e18:	mov	x5, #0x6efc                	// #28412
   10e1c:	add	x7, x6, #0x6
   10e20:	add	x11, x19, x5
   10e24:	ldr	x0, [x0, #4008]
   10e28:	mov	x1, x6
   10e2c:	add	x9, x19, #0x28
   10e30:	add	x10, x19, #0x110
   10e34:	add	w8, w6, #0x5
   10e38:	mov	w3, #0x1                   	// #1
   10e3c:	ldrb	w4, [x0, #255]
   10e40:	add	w4, w4, #0x30
   10e44:	nop
   10e48:	sub	w0, w8, w1
   10e4c:	add	x5, x11, w3, uxtw #1
   10e50:	lsr	w0, w4, w0
   10e54:	and	w0, w0, #0x1
   10e58:	str	w0, [x9, x1, lsl #2]
   10e5c:	add	w3, w0, w3, lsl #1
   10e60:	str	x5, [x10, x1, lsl #3]
   10e64:	add	x1, x1, #0x1
   10e68:	cmp	x1, x7
   10e6c:	b.ne	10e48 <lzma_lzma_preset@@XZ_5.0+0x1380>  // b.any
   10e70:	lsr	w5, w4, #1
   10e74:	and	w0, w4, #0x1
   10e78:	orr	w0, w0, #0x2
   10e7c:	sub	w1, w5, #0x1
   10e80:	add	x3, x19, x6, lsl #2
   10e84:	sub	w4, w5, #0x5
   10e88:	lsl	w0, w0, w1
   10e8c:	mvn	w0, w0
   10e90:	lsr	w6, w0, #4
   10e94:	sub	w4, w4, #0x1
   10e98:	add	x3, x3, #0x4
   10e9c:	lsr	w1, w6, w4
   10ea0:	and	w1, w1, #0x1
   10ea4:	add	w1, w1, #0x2
   10ea8:	str	w1, [x3, #60]
   10eac:	cbnz	w4, 10e94 <lzma_lzma_preset@@XZ_5.0+0x13cc>
   10eb0:	sub	w3, w5, #0x6
   10eb4:	mov	x4, #0x71e0                	// #29152
   10eb8:	add	x3, x3, x7
   10ebc:	and	w0, w0, #0xf
   10ec0:	add	x1, x3, #0x2
   10ec4:	add	x7, x3, #0x6
   10ec8:	add	x8, x19, x4
   10ecc:	mov	w4, #0x1                   	// #1
   10ed0:	and	w5, w0, #0x1
   10ed4:	str	w5, [x2, x1, lsl #2]
   10ed8:	add	x6, x8, w4, uxtw #1
   10edc:	str	x6, [x28, x1, lsl #3]
   10ee0:	add	x1, x1, #0x1
   10ee4:	lsr	w0, w0, #1
   10ee8:	add	w4, w5, w4, lsl #1
   10eec:	cmp	x1, x7
   10ef0:	b.ne	10ed0 <lzma_lzma_preset@@XZ_5.0+0x1408>  // b.any
   10ef4:	add	x0, x19, #0x10, lsl #12
   10ef8:	ldr	w6, [x19, #740]
   10efc:	ldr	w5, [x19, #744]
   10f00:	mov	w7, #0xffffffff            	// #-1
   10f04:	ldr	w4, [x19, #748]
   10f08:	add	x3, x3, #0x5
   10f0c:	ldr	w2, [x0, #3800]
   10f10:	ldr	w1, [x0, #3732]
   10f14:	add	w2, w2, #0x1
   10f18:	str	w2, [x0, #3800]
   10f1c:	add	x2, x19, #0x2ec
   10f20:	add	w1, w1, #0x1
   10f24:	stp	w7, w6, [x2, #-8]
   10f28:	stp	w5, w4, [x2]
   10f2c:	str	w1, [x0, #3732]
   10f30:	b	109fc <lzma_lzma_preset@@XZ_5.0+0xf34>
   10f34:	ldr	w1, [x1, #104]
   10f38:	cbz	w1, 10128 <lzma_lzma_preset@@XZ_5.0+0x660>
   10f3c:	ldr	w27, [x21, #28]
   10f40:	ldr	x3, [x19, #24]
   10f44:	sub	w27, w0, w27
   10f48:	b	10b68 <lzma_lzma_preset@@XZ_5.0+0x10a0>
   10f4c:	mov	x1, #0x1                   	// #1
   10f50:	mov	w0, #0xffffffff            	// #-1
   10f54:	stp	xzr, x1, [x19]
   10f58:	str	w0, [x19, #16]
   10f5c:	strb	wzr, [x19, #20]
   10f60:	stp	xzr, xzr, [x19, #24]
   10f64:	b	10aa8 <lzma_lzma_preset@@XZ_5.0+0xfe0>
   10f68:	str	x2, [sp, #96]
   10f6c:	bl	fbd0 <lzma_lzma_preset@@XZ_5.0+0x108>
   10f70:	ldr	x6, [x19, #24]
   10f74:	ldr	x2, [sp, #96]
   10f78:	b	10e14 <lzma_lzma_preset@@XZ_5.0+0x134c>
   10f7c:	nop
   10f80:	ldr	w5, [x1, #104]
   10f84:	cmp	w5, #0x1
   10f88:	b.eq	10f94 <lzma_lzma_preset@@XZ_5.0+0x14cc>  // b.none
   10f8c:	mov	w5, #0xffffffff            	// #-1
   10f90:	b	fea8 <lzma_lzma_preset@@XZ_5.0+0x3e0>
   10f94:	mov	w0, #0x8                   	// #8
   10f98:	ret
   10f9c:	nop
   10fa0:	stp	x29, x30, [sp, #-32]!
   10fa4:	mov	x29, sp
   10fa8:	stp	x19, x20, [sp, #16]
   10fac:	mov	x20, x1
   10fb0:	mov	x19, x0
   10fb4:	mov	x0, x1
   10fb8:	bl	fd78 <lzma_lzma_preset@@XZ_5.0+0x2b0>
   10fbc:	tst	w0, #0xff
   10fc0:	b.eq	11178 <lzma_lzma_preset@@XZ_5.0+0x16b0>  // b.none
   10fc4:	ldp	w5, w2, [x20, #20]
   10fc8:	mov	w0, #0x1                   	// #1
   10fcc:	ldr	w1, [x20, #28]
   10fd0:	mov	w6, #0xffffffff            	// #-1
   10fd4:	mov	x7, #0x1                   	// #1
   10fd8:	stp	xzr, x7, [x19]
   10fdc:	lsl	w3, w0, w2
   10fe0:	lsl	w1, w0, w1
   10fe4:	add	w3, w3, w6
   10fe8:	add	w2, w5, w2
   10fec:	add	w4, w1, w6
   10ff0:	str	w6, [x19, #16]
   10ff4:	strb	wzr, [x19, #20]
   10ff8:	lsl	w0, w0, w2
   10ffc:	stp	xzr, xzr, [x19, #24]
   11000:	str	xzr, [x19, #736]
   11004:	str	xzr, [x19, #744]
   11008:	str	wzr, [x19, #752]
   1100c:	str	w4, [x19, #2960]
   11010:	str	w5, [x19, #2964]
   11014:	str	w3, [x19, #2968]
   11018:	cbz	w0, 11058 <lzma_lzma_preset@@XZ_5.0+0x1590>
   1101c:	sub	w0, w0, #0x1
   11020:	mov	x8, #0x179c                	// #6044
   11024:	add	x5, x19, x8
   11028:	mov	w6, #0x600                 	// #1536
   1102c:	mov	x9, #0x119c                	// #4508
   11030:	add	x2, x19, x9
   11034:	mov	w3, #0x400                 	// #1024
   11038:	umaddl	x5, w0, w6, x5
   1103c:	sub	x0, x2, #0x600
   11040:	strh	w3, [x0], #2
   11044:	cmp	x0, x2
   11048:	b.ne	11040 <lzma_lzma_preset@@XZ_5.0+0x1578>  // b.any
   1104c:	add	x2, x2, #0x600
   11050:	cmp	x2, x5
   11054:	b.ne	1103c <lzma_lzma_preset@@XZ_5.0+0x1574>  // b.any
   11058:	ubfiz	x5, x4, #1, #32
   1105c:	mov	x10, #0x6b9e                	// #27550
   11060:	add	x3, x19, x10
   11064:	mov	x11, #0x6d1c                	// #27932
   11068:	add	x3, x3, w4, uxtw #1
   1106c:	mov	x12, #0x6d34                	// #27956
   11070:	eor	x5, x5, #0xfffffffffffffffe
   11074:	add	x4, x19, x11
   11078:	add	x6, x19, x12
   1107c:	mov	w2, #0x400                 	// #1024
   11080:	add	x0, x5, x3
   11084:	nop
   11088:	strh	w2, [x0]
   1108c:	add	x0, x0, #0x2
   11090:	strh	w2, [x0, #478]
   11094:	cmp	x0, x3
   11098:	b.ne	11088 <lzma_lzma_preset@@XZ_5.0+0x15c0>  // b.any
   1109c:	strh	w2, [x4]
   110a0:	add	x4, x4, #0x2
   110a4:	strh	w2, [x4, #22]
   110a8:	add	x3, x0, #0x20
   110ac:	strh	w2, [x4, #46]
   110b0:	strh	w2, [x4, #70]
   110b4:	cmp	x4, x6
   110b8:	b.ne	11080 <lzma_lzma_preset@@XZ_5.0+0x15b8>  // b.any
   110bc:	mov	x6, #0x70fc                	// #28924
   110c0:	mov	x7, #0x71e0                	// #29152
   110c4:	add	x0, x19, x6
   110c8:	add	x4, x19, x7
   110cc:	mov	w2, #0x400                 	// #1024
   110d0:	strh	w2, [x0], #2
   110d4:	cmp	x0, x4
   110d8:	b.ne	110d0 <lzma_lzma_preset@@XZ_5.0+0x1608>  // b.any
   110dc:	mov	x3, #0x6f7c                	// #28540
   110e0:	mov	x5, #0x717c                	// #29052
   110e4:	add	x5, x19, x5
   110e8:	add	x2, x19, x3
   110ec:	mov	w3, #0x400                 	// #1024
   110f0:	sub	x0, x2, #0x80
   110f4:	nop
   110f8:	strh	w3, [x0], #2
   110fc:	cmp	x0, x2
   11100:	b.ne	110f8 <lzma_lzma_preset@@XZ_5.0+0x1630>  // b.any
   11104:	add	x2, x0, #0x80
   11108:	cmp	x2, x5
   1110c:	b.ne	110f0 <lzma_lzma_preset@@XZ_5.0+0x1628>  // b.any
   11110:	mov	x2, #0x7200                	// #29184
   11114:	mov	x0, x4
   11118:	add	x3, x19, x2
   1111c:	mov	w2, #0x400                 	// #1024
   11120:	strh	w2, [x0], #2
   11124:	cmp	x0, x3
   11128:	b.ne	11120 <lzma_lzma_preset@@XZ_5.0+0x1658>  // b.any
   1112c:	ldrb	w2, [x19, #2956]
   11130:	bl	fdd8 <lzma_lzma_preset@@XZ_5.0+0x310>
   11134:	ldrb	w2, [x19, #2956]
   11138:	mov	w3, #0x1                   	// #1
   1113c:	ldr	w1, [x20, #28]
   11140:	mov	x0, #0xba48                	// #47688
   11144:	add	x0, x19, x0
   11148:	add	x19, x19, #0x10, lsl #12
   1114c:	lsl	w1, w3, w1
   11150:	bl	fdd8 <lzma_lzma_preset@@XZ_5.0+0x310>
   11154:	mov	w2, #0x7fffffff            	// #2147483647
   11158:	mov	x1, #0x7fffffff            	// #2147483647
   1115c:	str	w2, [x19, #3732]
   11160:	mov	w0, #0x0                   	// #0
   11164:	str	x1, [x19, #3800]
   11168:	str	wzr, [x19, #3808]
   1116c:	ldp	x19, x20, [sp, #16]
   11170:	ldp	x29, x30, [sp], #32
   11174:	ret
   11178:	mov	w0, #0x8                   	// #8
   1117c:	ldp	x19, x20, [sp, #16]
   11180:	ldp	x29, x30, [sp], #32
   11184:	ret
   11188:	stp	x29, x30, [sp, #-48]!
   1118c:	mov	x29, sp
   11190:	stp	x19, x20, [sp, #16]
   11194:	mov	x20, x0
   11198:	mov	x19, x3
   1119c:	ldr	x0, [x0]
   111a0:	str	x21, [sp, #32]
   111a4:	mov	x21, x2
   111a8:	cbz	x0, 11290 <lzma_lzma_preset@@XZ_5.0+0x17c8>
   111ac:	ldr	w1, [x21, #32]
   111b0:	cmp	w1, #0x1
   111b4:	b.eq	11280 <lzma_lzma_preset@@XZ_5.0+0x17b8>  // b.none
   111b8:	cmp	w1, #0x2
   111bc:	b.ne	1126c <lzma_lzma_preset@@XZ_5.0+0x17a4>  // b.any
   111c0:	ldr	w3, [x21]
   111c4:	mov	w1, #0x0                   	// #0
   111c8:	strb	wzr, [x0, #2956]
   111cc:	cmp	w3, #0x1
   111d0:	b.ls	111ec <lzma_lzma_preset@@XZ_5.0+0x1724>  // b.plast
   111d4:	mov	w5, #0x1                   	// #1
   111d8:	add	w1, w1, #0x1
   111dc:	lsl	w4, w5, w1
   111e0:	cmp	w4, w3
   111e4:	b.cc	111d8 <lzma_lzma_preset@@XZ_5.0+0x1710>  // b.lo, b.ul, b.last
   111e8:	lsl	w1, w1, #1
   111ec:	add	x2, x0, #0x10, lsl #12
   111f0:	add	x5, x0, #0x8, lsl #12
   111f4:	ldr	w4, [x21, #36]
   111f8:	str	w1, [x2, #3728]
   111fc:	sub	w6, w4, #0x1
   11200:	str	w6, [x5, #14852]
   11204:	str	w6, [x2, #588]
   11208:	ldr	x5, [x21, #8]
   1120c:	mov	w1, #0x0                   	// #0
   11210:	ldr	w2, [x21, #16]
   11214:	cbz	x5, 11220 <lzma_lzma_preset@@XZ_5.0+0x1758>
   11218:	cmp	w2, #0x0
   1121c:	cset	w1, ne  // ne = any
   11220:	ldp	w7, w6, [x21, #40]
   11224:	strb	w1, [x0, #2957]
   11228:	strb	wzr, [x0, #2958]
   1122c:	mov	w3, w3
   11230:	mov	w4, w4
   11234:	mov	x9, #0x1000                	// #4096
   11238:	mov	x8, #0x111                 	// #273
   1123c:	mov	x1, #0x1001                	// #4097
   11240:	stp	x9, x3, [x19]
   11244:	stp	x1, x8, [x19, #16]
   11248:	mov	x1, x21
   1124c:	str	x4, [x19, #32]
   11250:	stp	w7, w6, [x19, #40]
   11254:	str	x5, [x19, #48]
   11258:	str	w2, [x19, #56]
   1125c:	ldp	x19, x20, [sp, #16]
   11260:	ldr	x21, [sp, #32]
   11264:	ldp	x29, x30, [sp], #48
   11268:	b	10fa0 <lzma_lzma_preset@@XZ_5.0+0x14d8>
   1126c:	mov	w0, #0x8                   	// #8
   11270:	ldp	x19, x20, [sp, #16]
   11274:	ldr	x21, [sp, #32]
   11278:	ldp	x29, x30, [sp], #48
   1127c:	ret
   11280:	ldr	w3, [x21]
   11284:	ldr	w4, [x21, #36]
   11288:	strb	w1, [x0, #2956]
   1128c:	b	11208 <lzma_lzma_preset@@XZ_5.0+0x1740>
   11290:	mov	x0, #0xcee8                	// #52968
   11294:	movk	x0, #0x3, lsl #16
   11298:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   1129c:	str	x0, [x20]
   112a0:	cbnz	x0, 111ac <lzma_lzma_preset@@XZ_5.0+0x16e4>
   112a4:	mov	w0, #0x5                   	// #5
   112a8:	b	11270 <lzma_lzma_preset@@XZ_5.0+0x17a8>
   112ac:	nop
   112b0:	adrp	x4, 10000 <lzma_lzma_preset@@XZ_5.0+0x538>
   112b4:	add	x4, x4, #0xf80
   112b8:	str	x4, [x0, #8]
   112bc:	b	11188 <lzma_lzma_preset@@XZ_5.0+0x16c0>
   112c0:	adrp	x3, 11000 <lzma_lzma_preset@@XZ_5.0+0x1538>
   112c4:	add	x3, x3, #0x2b0
   112c8:	b	df78 <lzma_crc64@@XZ_5.0+0x18a0>
   112cc:	nop
   112d0:	mov	x4, x0
   112d4:	stp	x29, x30, [sp, #-80]!
   112d8:	mov	x29, sp
   112dc:	bl	fd78 <lzma_lzma_preset@@XZ_5.0+0x2b0>
   112e0:	tst	w0, #0xff
   112e4:	b.eq	1133c <lzma_lzma_preset@@XZ_5.0+0x1874>  // b.none
   112e8:	ldr	w8, [x4]
   112ec:	mov	x9, #0x1000                	// #4096
   112f0:	ldr	w1, [x4, #16]
   112f4:	mov	x7, #0x1001                	// #4097
   112f8:	ldr	w5, [x4, #36]
   112fc:	mov	x6, #0x111                 	// #273
   11300:	ldr	x2, [x4, #8]
   11304:	add	x0, sp, #0x10
   11308:	ldr	x3, [x4, #40]
   1130c:	stp	x9, x8, [sp, #16]
   11310:	stp	x7, x6, [sp, #32]
   11314:	stp	x5, x3, [sp, #48]
   11318:	str	x2, [sp, #64]
   1131c:	str	w1, [sp, #72]
   11320:	bl	df10 <lzma_crc64@@XZ_5.0+0x1838>
   11324:	cmn	x0, #0x1
   11328:	b.eq	1133c <lzma_lzma_preset@@XZ_5.0+0x1874>  // b.none
   1132c:	add	x0, x0, #0x3c, lsl #12
   11330:	add	x0, x0, #0xee8
   11334:	ldp	x29, x30, [sp], #80
   11338:	ret
   1133c:	mov	x0, #0xffffffffffffffff    	// #-1
   11340:	ldp	x29, x30, [sp], #80
   11344:	ret
   11348:	ldr	w4, [x0, #20]
   1134c:	mov	x3, x0
   11350:	mov	w0, #0x1                   	// #1
   11354:	cmp	w4, #0x4
   11358:	b.hi	1139c <lzma_lzma_preset@@XZ_5.0+0x18d4>  // b.pmore
   1135c:	ldr	w5, [x3, #24]
   11360:	mov	w0, #0x1                   	// #1
   11364:	cmp	w5, #0x4
   11368:	b.hi	1139c <lzma_lzma_preset@@XZ_5.0+0x18d4>  // b.pmore
   1136c:	add	w2, w4, w5
   11370:	cmp	w2, #0x4
   11374:	b.hi	1139c <lzma_lzma_preset@@XZ_5.0+0x18d4>  // b.pmore
   11378:	ldr	w2, [x3, #28]
   1137c:	cmp	w2, #0x4
   11380:	b.hi	1139c <lzma_lzma_preset@@XZ_5.0+0x18d4>  // b.pmore
   11384:	add	w2, w2, w2, lsl #2
   11388:	mov	w0, #0x0                   	// #0
   1138c:	add	w2, w2, w5
   11390:	add	w2, w2, w2, lsl #3
   11394:	add	w2, w2, w4
   11398:	strb	w2, [x1]
   1139c:	ret
   113a0:	ldr	w4, [x0, #20]
   113a4:	mov	x3, x0
   113a8:	mov	w0, #0xb                   	// #11
   113ac:	cmp	w4, #0x4
   113b0:	b.hi	113fc <lzma_lzma_preset@@XZ_5.0+0x1934>  // b.pmore
   113b4:	ldr	w5, [x3, #24]
   113b8:	mov	w0, #0xb                   	// #11
   113bc:	cmp	w5, #0x4
   113c0:	b.hi	113fc <lzma_lzma_preset@@XZ_5.0+0x1934>  // b.pmore
   113c4:	add	w2, w4, w5
   113c8:	cmp	w2, #0x4
   113cc:	b.hi	113fc <lzma_lzma_preset@@XZ_5.0+0x1934>  // b.pmore
   113d0:	ldr	w2, [x3, #28]
   113d4:	cmp	w2, #0x4
   113d8:	b.hi	113fc <lzma_lzma_preset@@XZ_5.0+0x1934>  // b.pmore
   113dc:	add	w2, w2, w2, lsl #2
   113e0:	mov	w0, #0x0                   	// #0
   113e4:	add	w2, w2, w5
   113e8:	add	w2, w2, w2, lsl #3
   113ec:	add	w2, w2, w4
   113f0:	strb	w2, [x1]
   113f4:	ldr	w2, [x3]
   113f8:	stur	w2, [x1, #1]
   113fc:	ret

0000000000011400 <lzma_mode_is_supported@@XZ_5.0>:
   11400:	sub	w0, w0, #0x1
   11404:	cmp	w0, #0x1
   11408:	cset	w0, ls  // ls = plast
   1140c:	ret
   11410:	stp	x29, x30, [sp, #-112]!
   11414:	mov	x29, sp
   11418:	stp	x19, x20, [sp, #16]
   1141c:	mov	x19, x0
   11420:	ldr	w0, [x1, #28]
   11424:	stp	x21, x22, [sp, #32]
   11428:	mov	x20, x1
   1142c:	ldr	w21, [x1, #96]
   11430:	stp	x23, x24, [sp, #48]
   11434:	mov	x24, x2
   11438:	stp	x25, x26, [sp, #64]
   1143c:	mov	x25, x3
   11440:	cbz	w0, 1171c <lzma_mode_is_supported@@XZ_5.0+0x31c>
   11444:	ldr	w6, [x19, #2952]
   11448:	ldr	w0, [x19, #2948]
   1144c:	str	w0, [sp, #108]
   11450:	ldr	x22, [x20]
   11454:	ldr	w0, [x20, #24]
   11458:	ldr	w8, [x20, #36]
   1145c:	add	w8, w8, #0x1
   11460:	add	x22, x22, w0, uxtw
   11464:	sub	w8, w8, w0
   11468:	sub	x7, x22, #0x1
   1146c:	cmp	w8, #0x110
   11470:	b.hi	1165c <lzma_mode_is_supported@@XZ_5.0+0x25c>  // b.pmore
   11474:	cmp	w8, #0x1
   11478:	b.ls	116a4 <lzma_mode_is_supported@@XZ_5.0+0x2a4>  // b.plast
   1147c:	ldurb	w3, [x22, #-1]
   11480:	add	x26, x19, #0x2e4
   11484:	mov	x5, #0x0                   	// #0
   11488:	mov	w12, #0x0                   	// #0
   1148c:	mov	w11, #0x0                   	// #0
   11490:	ldr	w4, [x26, x5, lsl #2]
   11494:	mov	w2, w5
   11498:	mvn	x4, x4
   1149c:	add	x0, x7, x4
   114a0:	ldrb	w1, [x7, x4]
   114a4:	cmp	w1, w3
   114a8:	b.ne	114bc <lzma_mode_is_supported@@XZ_5.0+0xbc>  // b.any
   114ac:	ldrb	w4, [x22]
   114b0:	ldrb	w1, [x0, #1]
   114b4:	cmp	w4, w1
   114b8:	b.eq	116cc <lzma_mode_is_supported@@XZ_5.0+0x2cc>  // b.none
   114bc:	add	x5, x5, #0x1
   114c0:	cmp	x5, #0x4
   114c4:	b.ne	11490 <lzma_mode_is_supported@@XZ_5.0+0x90>  // b.any
   114c8:	cmp	w6, w21
   114cc:	b.cs	11734 <lzma_mode_is_supported@@XZ_5.0+0x334>  // b.hs, b.nlast
   114d0:	cmp	w6, #0x1
   114d4:	b.ls	11664 <lzma_mode_is_supported@@XZ_5.0+0x264>  // b.plast
   114d8:	ldr	w5, [sp, #108]
   114dc:	mov	w21, w6
   114e0:	mov	w1, #0x0                   	// #0
   114e4:	sub	w0, w5, #0x1
   114e8:	cmp	w5, #0x1
   114ec:	add	x0, x19, x0, lsl #3
   114f0:	ldr	w23, [x0, #760]
   114f4:	b.hi	1151c <lzma_mode_is_supported@@XZ_5.0+0x11c>  // b.pmore
   114f8:	b	11540 <lzma_mode_is_supported@@XZ_5.0+0x140>
   114fc:	ldr	w0, [x4, #760]
   11500:	cmp	w0, w23, lsr #7
   11504:	b.cs	11538 <lzma_mode_is_supported@@XZ_5.0+0x138>  // b.hs, b.nlast
   11508:	sub	w5, w5, #0x1
   1150c:	mov	w23, w0
   11510:	cmp	w5, #0x1
   11514:	mov	w1, #0x1                   	// #1
   11518:	b.eq	1178c <lzma_mode_is_supported@@XZ_5.0+0x38c>  // b.none
   1151c:	sub	w4, w5, #0x2
   11520:	mov	w21, w6
   11524:	add	x4, x19, x4, lsl #3
   11528:	ldr	w6, [x4, #756]
   1152c:	add	w0, w6, #0x1
   11530:	cmp	w0, w21
   11534:	b.eq	114fc <lzma_mode_is_supported@@XZ_5.0+0xfc>  // b.none
   11538:	cbz	w1, 11540 <lzma_mode_is_supported@@XZ_5.0+0x140>
   1153c:	str	w5, [sp, #108]
   11540:	cmp	w23, #0x7f
   11544:	ccmp	w21, #0x2, #0x0, hi  // hi = pmore
   11548:	b.eq	11664 <lzma_mode_is_supported@@XZ_5.0+0x264>  // b.none
   1154c:	str	x27, [sp, #80]
   11550:	cmp	w11, #0x1
   11554:	b.ls	11584 <lzma_mode_is_supported@@XZ_5.0+0x184>  // b.plast
   11558:	add	w0, w11, #0x1
   1155c:	cmp	w0, w21
   11560:	b.cs	117a4 <lzma_mode_is_supported@@XZ_5.0+0x3a4>  // b.hs, b.nlast
   11564:	cmp	w23, #0x200
   11568:	add	w0, w11, #0x2
   1156c:	ccmp	w0, w21, #0x0, hi  // hi = pmore
   11570:	b.cs	117a4 <lzma_mode_is_supported@@XZ_5.0+0x3a4>  // b.hs, b.nlast
   11574:	cmp	w23, #0x8, lsl #12
   11578:	add	w0, w11, #0x3
   1157c:	ccmp	w0, w21, #0x0, hi  // hi = pmore
   11580:	b.cs	117a4 <lzma_mode_is_supported@@XZ_5.0+0x3a4>  // b.hs, b.nlast
   11584:	cmp	w21, #0x1
   11588:	ccmp	w8, #0x2, #0x0, hi  // hi = pmore
   1158c:	b.ls	116a0 <lzma_mode_is_supported@@XZ_5.0+0x2a0>  // b.plast
   11590:	add	x27, x19, #0x2f4
   11594:	add	x1, x19, #0xb84
   11598:	mov	x2, x27
   1159c:	mov	x0, x20
   115a0:	bl	e6d8 <lzma_mf_is_supported@@XZ_5.0+0x550>
   115a4:	str	w0, [x19, #2952]
   115a8:	cmp	w0, #0x1
   115ac:	b.ls	115ec <lzma_mode_is_supported@@XZ_5.0+0x1ec>  // b.plast
   115b0:	ldr	w1, [x19, #2948]
   115b4:	sub	w1, w1, #0x1
   115b8:	add	x19, x19, x1, lsl #3
   115bc:	ldr	w1, [x19, #760]
   115c0:	cmp	w23, w1
   115c4:	ccmp	w0, w21, #0x0, hi  // hi = pmore
   115c8:	b.cs	116a0 <lzma_mode_is_supported@@XZ_5.0+0x2a0>  // b.hs, b.nlast
   115cc:	add	w2, w21, #0x1
   115d0:	cmp	w0, w2
   115d4:	b.eq	117b4 <lzma_mode_is_supported@@XZ_5.0+0x3b4>  // b.none
   115d8:	b.hi	116a0 <lzma_mode_is_supported@@XZ_5.0+0x2a0>  // b.pmore
   115dc:	add	w0, w0, #0x1
   115e0:	cmp	w0, w21
   115e4:	ccmp	w21, #0x2, #0x4, cs  // cs = hs, nlast
   115e8:	b.ne	11698 <lzma_mode_is_supported@@XZ_5.0+0x298>  // b.any
   115ec:	sub	w19, w21, #0x1
   115f0:	mov	w0, #0x2                   	// #2
   115f4:	cmp	w19, #0x2
   115f8:	csel	w19, w19, w0, cs  // cs = hs, nlast
   115fc:	ldr	w1, [x26]
   11600:	mov	x2, x19
   11604:	mov	x0, x22
   11608:	add	x26, x26, #0x4
   1160c:	mvn	x1, x1
   11610:	add	x1, x22, x1
   11614:	bl	3330 <memcmp@plt>
   11618:	cbz	w0, 116a0 <lzma_mode_is_supported@@XZ_5.0+0x2a0>
   1161c:	cmp	x27, x26
   11620:	b.ne	115fc <lzma_mode_is_supported@@XZ_5.0+0x1fc>  // b.any
   11624:	add	w23, w23, #0x4
   11628:	str	w21, [x25]
   1162c:	str	w23, [x24]
   11630:	subs	w21, w21, #0x2
   11634:	b.eq	117ac <lzma_mode_is_supported@@XZ_5.0+0x3ac>  // b.none
   11638:	ldr	x2, [x20, #56]
   1163c:	mov	w1, w21
   11640:	mov	x0, x20
   11644:	blr	x2
   11648:	ldr	w0, [x20, #28]
   1164c:	ldr	x27, [sp, #80]
   11650:	add	w21, w0, w21
   11654:	str	w21, [x20, #28]
   11658:	b	116b4 <lzma_mode_is_supported@@XZ_5.0+0x2b4>
   1165c:	mov	w8, #0x111                 	// #273
   11660:	b	1147c <lzma_mode_is_supported@@XZ_5.0+0x7c>
   11664:	cmp	w11, #0x1
   11668:	b.ls	116a4 <lzma_mode_is_supported@@XZ_5.0+0x2a4>  // b.plast
   1166c:	ldr	x2, [x20, #56]
   11670:	str	w12, [x24]
   11674:	str	w11, [x25]
   11678:	sub	w19, w11, #0x1
   1167c:	mov	x0, x20
   11680:	mov	w1, w19
   11684:	blr	x2
   11688:	ldr	w0, [x20, #28]
   1168c:	add	w0, w0, w19
   11690:	str	w0, [x20, #28]
   11694:	b	116b4 <lzma_mode_is_supported@@XZ_5.0+0x2b4>
   11698:	cmp	w1, w23, lsr #7
   1169c:	b.cs	115ec <lzma_mode_is_supported@@XZ_5.0+0x1ec>  // b.hs, b.nlast
   116a0:	ldr	x27, [sp, #80]
   116a4:	mov	w1, #0xffffffff            	// #-1
   116a8:	mov	w0, #0x1                   	// #1
   116ac:	str	w1, [x24]
   116b0:	str	w0, [x25]
   116b4:	ldp	x19, x20, [sp, #16]
   116b8:	ldp	x21, x22, [sp, #32]
   116bc:	ldp	x23, x24, [sp, #48]
   116c0:	ldp	x25, x26, [sp, #64]
   116c4:	ldp	x29, x30, [sp], #112
   116c8:	ret
   116cc:	cmp	w8, #0x2
   116d0:	mov	x4, #0x2                   	// #2
   116d4:	b.ne	116ec <lzma_mode_is_supported@@XZ_5.0+0x2ec>  // b.any
   116d8:	b	117c0 <lzma_mode_is_supported@@XZ_5.0+0x3c0>
   116dc:	add	w9, w4, #0x1
   116e0:	add	x4, x4, #0x1
   116e4:	cmp	w8, w4
   116e8:	b.ls	11700 <lzma_mode_is_supported@@XZ_5.0+0x300>  // b.plast
   116ec:	ldrb	w10, [x7, x4]
   116f0:	mov	w9, w4
   116f4:	ldrb	w1, [x0, x4]
   116f8:	cmp	w10, w1
   116fc:	b.eq	116dc <lzma_mode_is_supported@@XZ_5.0+0x2dc>  // b.none
   11700:	cmp	w9, w21
   11704:	b.cs	117c8 <lzma_mode_is_supported@@XZ_5.0+0x3c8>  // b.hs, b.nlast
   11708:	cmp	w9, w11
   1170c:	csel	w2, w12, w2, ls  // ls = plast
   11710:	csel	w11, w11, w9, ls  // ls = plast
   11714:	mov	w12, w2
   11718:	b	114bc <lzma_mode_is_supported@@XZ_5.0+0xbc>
   1171c:	add	x2, x19, #0x2f4
   11720:	add	x1, sp, #0x6c
   11724:	mov	x0, x20
   11728:	bl	e6d8 <lzma_mf_is_supported@@XZ_5.0+0x550>
   1172c:	mov	w6, w0
   11730:	b	11450 <lzma_mode_is_supported@@XZ_5.0+0x50>
   11734:	ldr	w0, [sp, #108]
   11738:	subs	w21, w6, #0x1
   1173c:	str	w6, [x25]
   11740:	sub	w0, w0, #0x1
   11744:	add	x19, x19, x0, lsl #3
   11748:	ldr	w0, [x19, #760]
   1174c:	add	w0, w0, #0x4
   11750:	str	w0, [x24]
   11754:	b.eq	116b4 <lzma_mode_is_supported@@XZ_5.0+0x2b4>  // b.none
   11758:	ldr	x2, [x20, #56]
   1175c:	mov	w1, w21
   11760:	mov	x0, x20
   11764:	blr	x2
   11768:	ldr	w0, [x20, #28]
   1176c:	ldp	x23, x24, [sp, #48]
   11770:	add	w0, w0, w21
   11774:	str	w0, [x20, #28]
   11778:	ldp	x19, x20, [sp, #16]
   1177c:	ldp	x21, x22, [sp, #32]
   11780:	ldp	x25, x26, [sp, #64]
   11784:	ldp	x29, x30, [sp], #112
   11788:	ret
   1178c:	str	w5, [sp, #108]
   11790:	mov	w21, w6
   11794:	cmp	w23, #0x7f
   11798:	ccmp	w21, #0x2, #0x0, hi  // hi = pmore
   1179c:	b.eq	11664 <lzma_mode_is_supported@@XZ_5.0+0x264>  // b.none
   117a0:	b	1154c <lzma_mode_is_supported@@XZ_5.0+0x14c>
   117a4:	ldr	x27, [sp, #80]
   117a8:	b	1166c <lzma_mode_is_supported@@XZ_5.0+0x26c>
   117ac:	ldr	x27, [sp, #80]
   117b0:	b	116b4 <lzma_mode_is_supported@@XZ_5.0+0x2b4>
   117b4:	cmp	w23, w1, lsr #7
   117b8:	b.cc	115dc <lzma_mode_is_supported@@XZ_5.0+0x1dc>  // b.lo, b.ul, b.last
   117bc:	b	116a0 <lzma_mode_is_supported@@XZ_5.0+0x2a0>
   117c0:	mov	w9, w4
   117c4:	b	11700 <lzma_mode_is_supported@@XZ_5.0+0x300>
   117c8:	ldr	x3, [x20, #56]
   117cc:	str	w2, [x24]
   117d0:	str	w9, [x25]
   117d4:	sub	w19, w9, #0x1
   117d8:	mov	x0, x20
   117dc:	mov	w1, w19
   117e0:	blr	x3
   117e4:	ldr	w0, [x20, #28]
   117e8:	add	w0, w0, w19
   117ec:	str	w0, [x20, #28]
   117f0:	b	116b4 <lzma_mode_is_supported@@XZ_5.0+0x2b4>
   117f4:	nop
   117f8:	ldr	w7, [x0, #2964]
   117fc:	mov	w6, #0x8                   	// #8
   11800:	ldr	w9, [x0, #2968]
   11804:	tst	w3, #0xff
   11808:	sub	w6, w6, w7
   1180c:	mov	w8, #0x600                 	// #1536
   11810:	and	w1, w1, w9
   11814:	add	w5, w5, #0x100
   11818:	lsr	w3, w2, w6
   1181c:	lsl	w1, w1, w7
   11820:	add	w3, w1, w3
   11824:	umaddl	x3, w3, w8, x0
   11828:	adrp	x8, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   1182c:	add	x3, x3, #0xb9c
   11830:	b.ne	11874 <lzma_mode_is_supported@@XZ_5.0+0x474>  // b.any
   11834:	ldr	x8, [x8, #3960]
   11838:	mov	w0, #0x0                   	// #0
   1183c:	nop
   11840:	and	w1, w5, #0x1
   11844:	lsr	w5, w5, #1
   11848:	neg	w1, w1
   1184c:	cmp	w5, #0x1
   11850:	and	w2, w1, #0x7ff
   11854:	lsl	w1, w5, #1
   11858:	ldrh	w1, [x3, x1]
   1185c:	eor	w1, w1, w2
   11860:	lsr	w1, w1, #4
   11864:	ldrb	w1, [x8, w1, uxtw]
   11868:	add	w0, w0, w1
   1186c:	b.ne	11840 <lzma_mode_is_supported@@XZ_5.0+0x440>  // b.any
   11870:	ret
   11874:	ldr	x8, [x8, #3960]
   11878:	mov	w6, #0x100                 	// #256
   1187c:	mov	w0, #0x0                   	// #0
   11880:	mov	w9, #0xffff                	// #65535
   11884:	nop
   11888:	lsl	w4, w4, #1
   1188c:	sbfx	x1, x5, #7, #1
   11890:	and	w2, w6, w4
   11894:	and	w7, w1, #0x7ff
   11898:	add	w2, w2, w5, lsr #8
   1189c:	lsl	w5, w5, #1
   118a0:	add	w2, w2, w6
   118a4:	eon	w1, w4, w5
   118a8:	and	w6, w6, w1
   118ac:	cmp	w5, w9
   118b0:	ldrh	w1, [x3, x2, lsl #1]
   118b4:	eor	w1, w1, w7
   118b8:	lsr	w1, w1, #4
   118bc:	ldrb	w1, [x8, w1, uxtw]
   118c0:	add	w0, w0, w1
   118c4:	b.ls	11888 <lzma_mode_is_supported@@XZ_5.0+0x488>  // b.plast
   118c8:	ret
   118cc:	nop
   118d0:	stp	x29, x30, [sp, #-304]!
   118d4:	mov	x29, sp
   118d8:	stp	x27, x28, [sp, #80]
   118dc:	mov	x27, x0
   118e0:	add	x0, x0, #0x10, lsl #12
   118e4:	stp	x25, x26, [sp, #64]
   118e8:	mov	x26, x1
   118ec:	mov	x1, x0
   118f0:	str	x0, [sp, #208]
   118f4:	stp	x2, x3, [sp, #224]
   118f8:	ldr	w1, [x1, #3808]
   118fc:	str	w4, [sp, #240]
   11900:	mov	x4, x0
   11904:	ldr	w0, [x0, #3804]
   11908:	cmp	w0, w1
   1190c:	b.eq	11954 <lzma_mode_is_supported@@XZ_5.0+0x554>  // b.none
   11910:	mov	x5, x2
   11914:	mov	w2, w1
   11918:	add	x0, x2, w1, uxtw #1
   1191c:	lsl	x0, x0, #2
   11920:	sub	x0, x0, x2
   11924:	add	x0, x27, x0, lsl #2
   11928:	add	x0, x0, #0x10, lsl #12
   1192c:	ldr	w2, [x0, #3832]
   11930:	ldr	w0, [x0, #3836]
   11934:	sub	w1, w2, w1
   11938:	str	w0, [x5]
   1193c:	str	w1, [x3]
   11940:	str	w2, [x4, #3808]
   11944:	ldp	x25, x26, [sp, #64]
   11948:	ldp	x27, x28, [sp, #80]
   1194c:	ldp	x29, x30, [sp], #304
   11950:	ret
   11954:	ldr	w0, [x26, #28]
   11958:	stp	x19, x20, [sp, #16]
   1195c:	ldr	w19, [x26, #96]
   11960:	stp	x23, x24, [sp, #48]
   11964:	cbz	w0, 12704 <lzma_mode_is_supported@@XZ_5.0+0x1304>
   11968:	ldr	w4, [x26, #36]
   1196c:	ldr	w0, [x27, #2948]
   11970:	ldr	w9, [x26, #24]
   11974:	add	w4, w4, #0x1
   11978:	str	w0, [sp, #284]
   1197c:	sub	w4, w4, w9
   11980:	ldr	w12, [x27, #2952]
   11984:	cmp	w4, #0x110
   11988:	b.hi	12750 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.pmore
   1198c:	cmp	w4, #0x1
   11990:	b.ls	13364 <lzma_mode_is_supported@@XZ_5.0+0x1f64>  // b.plast
   11994:	ldr	x0, [x26]
   11998:	add	x1, sp, #0x120
   1199c:	add	x11, x27, #0x2e4
   119a0:	mov	x3, x1
   119a4:	mov	x10, x1
   119a8:	mov	w14, #0x0                   	// #0
   119ac:	add	x9, x0, w9, uxtw
   119b0:	mov	x1, #0x0                   	// #0
   119b4:	sub	x2, x9, #0x1
   119b8:	mov	x16, #0x0                   	// #0
   119bc:	str	x3, [sp, #152]
   119c0:	ldurb	w15, [x9, #-1]
   119c4:	ldr	w0, [x11, x1, lsl #2]
   119c8:	mov	w13, w1
   119cc:	mvn	x0, x0
   119d0:	add	x5, x2, x0
   119d4:	ldrb	w0, [x2, x0]
   119d8:	cmp	w0, w15
   119dc:	b.ne	119f0 <lzma_mode_is_supported@@XZ_5.0+0x5f0>  // b.any
   119e0:	ldrb	w6, [x9]
   119e4:	ldrb	w0, [x5, #1]
   119e8:	cmp	w6, w0
   119ec:	b.eq	126b0 <lzma_mode_is_supported@@XZ_5.0+0x12b0>  // b.none
   119f0:	str	wzr, [x3]
   119f4:	add	x1, x1, #0x1
   119f8:	add	x3, x3, #0x4
   119fc:	cmp	x1, #0x4
   11a00:	b.ne	119c4 <lzma_mode_is_supported@@XZ_5.0+0x5c4>  // b.any
   11a04:	ldr	x0, [sp, #152]
   11a08:	ldr	w23, [x0, x16, lsl #2]
   11a0c:	cmp	w23, w19
   11a10:	b.cs	132d4 <lzma_mode_is_supported@@XZ_5.0+0x1ed4>  // b.hs, b.nlast
   11a14:	cmp	w12, w19
   11a18:	b.cs	13314 <lzma_mode_is_supported@@XZ_5.0+0x1f14>  // b.hs, b.nlast
   11a1c:	ldr	w19, [x27, #740]
   11a20:	cmp	w12, #0x1
   11a24:	mov	w0, w19
   11a28:	mvn	x0, x0
   11a2c:	ldrb	w20, [x2, x0]
   11a30:	ccmp	w15, w20, #0x4, ls  // ls = plast
   11a34:	cset	w1, ne  // ne = any
   11a38:	cmp	w23, #0x1
   11a3c:	cset	w0, ls  // ls = plast
   11a40:	tst	w1, w0
   11a44:	b.ne	13364 <lzma_mode_is_supported@@XZ_5.0+0x1f64>  // b.any
   11a48:	ldr	w0, [x27, #736]
   11a4c:	adrp	x24, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   11a50:	ldr	w14, [x27, #2960]
   11a54:	mov	w5, w15
   11a58:	ldr	w1, [sp, #240]
   11a5c:	cmp	w0, #0x6
   11a60:	ldr	x18, [sp, #208]
   11a64:	and	w14, w1, w14
   11a68:	ubfiz	x13, x0, #4, #32
   11a6c:	stp	x21, x22, [sp, #32]
   11a70:	add	x13, x13, x14
   11a74:	str	w0, [x18, #3812]
   11a78:	cset	w3, hi  // hi = pmore
   11a7c:	add	x13, x27, x13, lsl #1
   11a80:	mov	w21, w0
   11a84:	ldurb	w2, [x9, #-2]
   11a88:	add	x13, x13, #0x6, lsl #12
   11a8c:	mov	w4, w20
   11a90:	mov	x0, x27
   11a94:	ldrh	w22, [x13, #2972]
   11a98:	bl	117f8 <lzma_mode_is_supported@@XZ_5.0+0x3f8>
   11a9c:	strb	wzr, [x18, #3860]
   11aa0:	ldr	x1, [x24, #3960]
   11aa4:	lsr	w22, w22, #4
   11aa8:	add	x6, x27, x21, lsl #1
   11aac:	mov	w2, #0xffffffff            	// #-1
   11ab0:	add	x6, x6, #0x6, lsl #12
   11ab4:	str	w2, [x18, #3880]
   11ab8:	ldrb	w3, [x1, w22, sxtw]
   11abc:	eor	w2, w22, #0x7f
   11ac0:	cmp	w15, w20
   11ac4:	add	w0, w3, w0
   11ac8:	str	w0, [x18, #3872]
   11acc:	ldrb	w15, [x1, w2, uxtw]
   11ad0:	ldrh	w9, [x6, #3356]
   11ad4:	lsr	w9, w9, #4
   11ad8:	eor	w2, w9, #0x7f
   11adc:	ldrb	w5, [x1, w2, uxtw]
   11ae0:	add	w5, w5, w15
   11ae4:	b.eq	12fc4 <lzma_mode_is_supported@@XZ_5.0+0x1bc4>  // b.none
   11ae8:	cmp	w23, w12
   11aec:	csel	w23, w23, w12, cs  // cs = hs, nlast
   11af0:	cmp	w23, #0x1
   11af4:	b.ls	13388 <lzma_mode_is_supported@@XZ_5.0+0x1f88>  // b.plast
   11af8:	ldr	x4, [sp, #208]
   11afc:	mov	w1, #0x2c                  	// #44
   11b00:	ldr	w0, [x27, #744]
   11b04:	add	x3, x27, #0x200
   11b08:	umaddl	x1, w23, w1, x27
   11b0c:	mov	w2, #0x40000000            	// #1073741824
   11b10:	str	w19, [x4, #3840]
   11b14:	str	w0, [x4, #3844]
   11b18:	add	x1, x1, #0x10, lsl #12
   11b1c:	str	wzr, [x4, #3876]
   11b20:	add	x1, x1, #0xef4
   11b24:	mov	w0, w23
   11b28:	ldur	x3, [x3, #236]
   11b2c:	str	x3, [x4, #3848]
   11b30:	str	w2, [x1], #-44
   11b34:	sub	w0, w0, #0x1
   11b38:	cmp	w0, #0x1
   11b3c:	b.ne	11b30 <lzma_mode_is_supported@@XZ_5.0+0x730>  // b.any
   11b40:	ldr	x8, [x24, #3960]
   11b44:	add	x3, x14, x14, lsl #4
   11b48:	mov	x30, #0xba48                	// #47688
   11b4c:	mov	x16, #0xee8                 	// #3816
   11b50:	add	x4, x27, x30
   11b54:	mov	x18, x8
   11b58:	lsl	x3, x3, #4
   11b5c:	mov	w2, #0x0                   	// #0
   11b60:	mov	w17, #0x2c                  	// #44
   11b64:	movk	x16, #0x1, lsl #16
   11b68:	mov	w20, #0x2                   	// #2
   11b6c:	ldr	w7, [x10]
   11b70:	cmp	w7, #0x1
   11b74:	b.ls	11be8 <lzma_mode_is_supported@@XZ_5.0+0x7e8>  // b.plast
   11b78:	ldrh	w0, [x6, #3380]
   11b7c:	lsr	w0, w0, #4
   11b80:	cbnz	w2, 12c8c <lzma_mode_is_supported@@XZ_5.0+0x188c>
   11b84:	ldrh	w1, [x13, #3452]
   11b88:	ldrb	w21, [x18, w0, sxtw]
   11b8c:	lsr	w0, w1, #4
   11b90:	eor	w0, w0, #0x7f
   11b94:	ldrb	w19, [x18, w0, uxtw]
   11b98:	add	w19, w19, w21
   11b9c:	umaddl	x1, w7, w17, x16
   11ba0:	add	w19, w5, w19
   11ba4:	sub	w7, w7, #0x2
   11ba8:	add	x1, x27, x1
   11bac:	nop
   11bb0:	add	x0, x3, w7, uxtw
   11bb4:	ldr	w21, [x1, #12]
   11bb8:	sub	w7, w7, #0x1
   11bbc:	add	x0, x4, x0, lsl #2
   11bc0:	ldr	w0, [x0, #1028]
   11bc4:	add	w0, w19, w0
   11bc8:	cmp	w0, w21
   11bcc:	b.cs	11bdc <lzma_mode_is_supported@@XZ_5.0+0x7dc>  // b.hs, b.nlast
   11bd0:	strb	wzr, [x1]
   11bd4:	stp	w0, wzr, [x1, #12]
   11bd8:	str	w2, [x1, #20]
   11bdc:	sub	x1, x1, #0x2c
   11be0:	cmn	w7, #0x1
   11be4:	b.ne	11bb0 <lzma_mode_is_supported@@XZ_5.0+0x7b0>  // b.any
   11be8:	add	w2, w2, #0x1
   11bec:	add	x10, x10, #0x4
   11bf0:	cmp	w2, #0x4
   11bf4:	b.ne	11b6c <lzma_mode_is_supported@@XZ_5.0+0x76c>  // b.any
   11bf8:	ldr	w1, [sp, #288]
   11bfc:	cmp	w1, #0x0
   11c00:	csinc	w1, w1, wzr, ne  // ne = any
   11c04:	add	w1, w1, #0x1
   11c08:	cmp	w12, w1
   11c0c:	b.cs	12e50 <lzma_mode_is_supported@@XZ_5.0+0x1a50>  // b.hs, b.nlast
   11c10:	cmn	w23, #0x1
   11c14:	b.eq	133c4 <lzma_mode_is_supported@@XZ_5.0+0x1fc4>  // b.none
   11c18:	add	x2, x27, #0xb84
   11c1c:	str	x2, [sp, #176]
   11c20:	add	x2, x27, #0x2f4
   11c24:	mov	x25, #0xba48                	// #47688
   11c28:	str	x2, [sp, #184]
   11c2c:	add	x2, x27, x25
   11c30:	mov	x21, x24
   11c34:	str	x2, [sp, #120]
   11c38:	add	x2, x27, #0x10, lsl #12
   11c3c:	mov	w19, #0x1                   	// #1
   11c40:	ldp	x0, x1, [x11]
   11c44:	add	x2, x2, #0xf20
   11c48:	str	x2, [sp, #112]
   11c4c:	stp	x0, x1, [sp, #288]
   11c50:	mov	x0, x26
   11c54:	ldp	x1, x2, [sp, #176]
   11c58:	bl	e6d8 <lzma_mf_is_supported@@XZ_5.0+0x550>
   11c5c:	str	w0, [x27, #2952]
   11c60:	ldr	w1, [x26, #96]
   11c64:	mov	w13, w0
   11c68:	str	w1, [sp, #100]
   11c6c:	cmp	w0, w1
   11c70:	b.cs	13278 <lzma_mode_is_supported@@XZ_5.0+0x1e78>  // b.hs, b.nlast
   11c74:	mov	w8, w19
   11c78:	ldr	w12, [x26, #36]
   11c7c:	add	x0, x8, w19, uxtw #1
   11c80:	ldr	w15, [x26, #24]
   11c84:	add	w12, w12, #0x1
   11c88:	mov	w1, #0xfff                 	// #4095
   11c8c:	lsl	x0, x0, #2
   11c90:	sub	w1, w1, w19
   11c94:	sub	x0, x0, x8
   11c98:	sub	w12, w12, w15
   11c9c:	cmp	w12, w1
   11ca0:	mov	w15, w15
   11ca4:	add	x0, x27, x0, lsl #2
   11ca8:	csel	w12, w12, w1, ls  // ls = plast
   11cac:	add	x0, x0, #0x10, lsl #12
   11cb0:	ldr	w1, [sp, #240]
   11cb4:	ldr	x10, [x26]
   11cb8:	add	w1, w1, w19
   11cbc:	ldrb	w6, [x0, #3816]
   11cc0:	sub	x4, x15, #0x1
   11cc4:	str	w1, [sp, #104]
   11cc8:	add	x11, x10, x4
   11ccc:	ldr	w1, [x27, #2948]
   11cd0:	str	w1, [sp, #108]
   11cd4:	ldr	w5, [x0, #3832]
   11cd8:	cbz	w6, 12994 <lzma_mode_is_supported@@XZ_5.0+0x1594>
   11cdc:	ldrb	w3, [x0, #3817]
   11ce0:	sub	w2, w5, #0x1
   11ce4:	cbz	w3, 12ae8 <lzma_mode_is_supported@@XZ_5.0+0x16e8>
   11ce8:	ldr	w9, [x0, #3824]
   11cec:	ldr	w1, [x0, #3820]
   11cf0:	cmp	w9, #0x3
   11cf4:	b.hi	12a98 <lzma_mode_is_supported@@XZ_5.0+0x1698>  // b.pmore
   11cf8:	cmp	w5, w19
   11cfc:	b.eq	12e30 <lzma_mode_is_supported@@XZ_5.0+0x1a30>  // b.none
   11d00:	mov	w14, #0x8                   	// #8
   11d04:	add	x0, x1, x1, lsl #1
   11d08:	mov	x20, #0x43bc                	// #17340
   11d0c:	lsl	x0, x0, #2
   11d10:	sub	x0, x0, x1
   11d14:	add	x2, x0, w9, uxtw
   11d18:	add	x2, x2, x20
   11d1c:	add	x2, x27, x2, lsl #2
   11d20:	ldr	w2, [x2, #16]
   11d24:	str	w2, [sp, #288]
   11d28:	cbz	w9, 12c24 <lzma_mode_is_supported@@XZ_5.0+0x1824>
   11d2c:	add	x0, x27, x0, lsl #2
   11d30:	cmp	w9, #0x1
   11d34:	add	x0, x0, #0x10, lsl #12
   11d38:	ldr	w5, [x0, #3840]
   11d3c:	str	w5, [sp, #292]
   11d40:	b.eq	12cdc <lzma_mode_is_supported@@XZ_5.0+0x18dc>  // b.none
   11d44:	ldr	w7, [x0, #3844]
   11d48:	cmp	w9, #0x3
   11d4c:	str	w7, [sp, #296]
   11d50:	b.ne	13284 <lzma_mode_is_supported@@XZ_5.0+0x1e84>  // b.any
   11d54:	ldr	w6, [x0, #3848]
   11d58:	mov	w3, #0x1                   	// #1
   11d5c:	str	w6, [sp, #300]
   11d60:	add	x0, x8, x8, lsl #1
   11d64:	ldr	w9, [x27, #2960]
   11d68:	ldr	w16, [sp, #104]
   11d6c:	ubfiz	x1, x14, #4, #32
   11d70:	lsl	x0, x0, #2
   11d74:	mov	w22, w2
   11d78:	and	w9, w16, w9
   11d7c:	sub	x8, x0, x8
   11d80:	add	x1, x1, x9
   11d84:	mvn	x20, x22
   11d88:	add	x8, x27, x8, lsl #2
   11d8c:	str	x9, [sp, #136]
   11d90:	add	x8, x8, #0x10, lsl #12
   11d94:	add	x1, x27, x1, lsl #1
   11d98:	add	x17, x1, #0x6, lsl #12
   11d9c:	mov	w1, w16
   11da0:	add	x16, x8, #0xf08
   11da4:	add	w9, w19, #0x1
   11da8:	str	w14, [x8, #3812]
   11dac:	mov	x0, x27
   11db0:	ldr	w18, [x8, #3828]
   11db4:	stp	w2, w5, [x16, #-8]
   11db8:	stp	w7, w6, [x16]
   11dbc:	str	x17, [sp, #160]
   11dc0:	ldurb	w2, [x11, #-1]
   11dc4:	ldrb	w25, [x10, x4]
   11dc8:	ldrb	w28, [x11, x20]
   11dcc:	ldrh	w24, [x17, #2972]
   11dd0:	mov	w5, w25
   11dd4:	mov	w4, w28
   11dd8:	str	x9, [sp, #192]
   11ddc:	bl	117f8 <lzma_mode_is_supported@@XZ_5.0+0x3f8>
   11de0:	add	w0, w18, w0
   11de4:	add	w3, w19, #0x1
   11de8:	lsr	w24, w24, #4
   11dec:	ldr	x2, [x21, #3960]
   11df0:	add	x1, x3, x3, lsl #1
   11df4:	add	w5, w19, #0x1
   11df8:	str	w5, [sp, #96]
   11dfc:	lsl	x1, x1, #2
   11e00:	sub	x1, x1, x3
   11e04:	ldrb	w4, [x2, w24, sxtw]
   11e08:	mov	w3, w14
   11e0c:	mov	w2, #0x0                   	// #0
   11e10:	add	x1, x27, x1, lsl #2
   11e14:	add	w0, w4, w0
   11e18:	add	x1, x1, #0x10, lsl #12
   11e1c:	ldr	w4, [x1, #3828]
   11e20:	cmp	w0, w4
   11e24:	b.cs	11e54 <lzma_mode_is_supported@@XZ_5.0+0xa54>  // b.hs, b.nlast
   11e28:	str	w0, [x1, #3828]
   11e2c:	mov	w2, #0x2c                  	// #44
   11e30:	str	w19, [x1, #3832]
   11e34:	mov	x1, #0xee4                 	// #3812
   11e38:	movk	x1, #0x1, lsl #16
   11e3c:	mov	w4, #0xffffffff            	// #-1
   11e40:	umaddl	x1, w5, w2, x1
   11e44:	mov	w2, #0x1                   	// #1
   11e48:	add	x1, x27, x1
   11e4c:	strb	wzr, [x1, #4]
   11e50:	str	w4, [x1, #24]
   11e54:	add	x1, x27, x3, lsl #1
   11e58:	eor	w24, w24, #0x7f
   11e5c:	add	x3, x1, #0x6, lsl #12
   11e60:	str	x3, [sp, #128]
   11e64:	ldr	x1, [x21, #3960]
   11e68:	cmp	w25, w28
   11e6c:	ldrh	w3, [x3, #3356]
   11e70:	ldrb	w4, [x1, w24, uxtw]
   11e74:	lsr	w3, w3, #4
   11e78:	str	w3, [sp, #168]
   11e7c:	eor	w3, w3, #0x7f
   11e80:	add	w28, w4, w18
   11e84:	ldrb	w1, [x1, w3, uxtw]
   11e88:	add	w1, w1, w28
   11e8c:	str	w1, [sp, #144]
   11e90:	b.eq	129d8 <lzma_mode_is_supported@@XZ_5.0+0x15d8>  // b.none
   11e94:	cmp	w12, #0x1
   11e98:	b.ls	1275c <lzma_mode_is_supported@@XZ_5.0+0x135c>  // b.plast
   11e9c:	ldr	w1, [sp, #100]
   11ea0:	cmp	w1, w12
   11ea4:	csel	w18, w1, w12, ls  // ls = plast
   11ea8:	cbnz	w2, 12050 <lzma_mode_is_supported@@XZ_5.0+0xc50>
   11eac:	add	w2, w1, #0x1
   11eb0:	cmp	w2, w12
   11eb4:	csel	w2, w2, w12, ls  // ls = plast
   11eb8:	cmp	w2, #0x1
   11ebc:	b.ls	12050 <lzma_mode_is_supported@@XZ_5.0+0xc50>  // b.plast
   11ec0:	add	x10, x10, x15
   11ec4:	mov	w1, #0x1                   	// #1
   11ec8:	b	11ed8 <lzma_mode_is_supported@@XZ_5.0+0xad8>
   11ecc:	cmp	w2, w3
   11ed0:	b.eq	11ef8 <lzma_mode_is_supported@@XZ_5.0+0xaf8>  // b.none
   11ed4:	mov	w1, w3
   11ed8:	ldrb	w5, [x10]
   11edc:	add	w3, w1, #0x1
   11ee0:	ldrb	w4, [x10, x20]
   11ee4:	add	x10, x10, #0x1
   11ee8:	cmp	w5, w4
   11eec:	b.eq	11ecc <lzma_mode_is_supported@@XZ_5.0+0xacc>  // b.none
   11ef0:	mov	w2, w1
   11ef4:	sub	w1, w1, #0x1
   11ef8:	cmp	w1, #0x1
   11efc:	b.ls	12050 <lzma_mode_is_supported@@XZ_5.0+0xc50>  // b.plast
   11f00:	cmp	w14, #0x3
   11f04:	mov	w5, #0x0                   	// #0
   11f08:	b.ls	11f1c <lzma_mode_is_supported@@XZ_5.0+0xb1c>  // b.plast
   11f0c:	cmp	w14, #0x9
   11f10:	sub	w5, w14, #0x3
   11f14:	sub	w3, w14, #0x6
   11f18:	csel	w5, w3, w5, hi  // hi = pmore
   11f1c:	ldr	w7, [sp, #96]
   11f20:	ubfiz	x6, x5, #4, #32
   11f24:	ldr	w3, [sp, #240]
   11f28:	add	x5, x27, w5, uxtw #1
   11f2c:	ldr	w4, [x27, #2960]
   11f30:	add	x5, x5, #0x6, lsl #12
   11f34:	add	w3, w3, w7
   11f38:	add	w1, w7, w1
   11f3c:	and	w3, w3, w4
   11f40:	cmp	w1, w23
   11f44:	add	x6, x6, x3
   11f48:	ldrh	w7, [x5, #3356]
   11f4c:	ldr	x8, [x21, #3960]
   11f50:	add	x6, x27, x6, lsl #1
   11f54:	add	x6, x6, #0x6, lsl #12
   11f58:	lsr	w7, w7, #4
   11f5c:	eor	w7, w7, #0x7f
   11f60:	ldrh	w4, [x6, #2972]
   11f64:	ldrb	w7, [x8, w7, uxtw]
   11f68:	lsr	w4, w4, #4
   11f6c:	eor	w4, w4, #0x7f
   11f70:	ldrb	w8, [x8, w4, uxtw]
   11f74:	add	w8, w8, w7
   11f78:	b.ls	11fc8 <lzma_mode_is_supported@@XZ_5.0+0xbc8>  // b.plast
   11f7c:	add	w10, w23, #0x1
   11f80:	mvn	w7, w23
   11f84:	add	w7, w7, w1
   11f88:	mov	w23, #0x2c                  	// #44
   11f8c:	add	x7, x7, w10, uxtw
   11f90:	mov	w9, #0x40000000            	// #1073741824
   11f94:	umaddl	x23, w10, w23, x27
   11f98:	add	x4, x7, x7, lsl #1
   11f9c:	add	x23, x23, #0x10, lsl #12
   11fa0:	lsl	x4, x4, #2
   11fa4:	add	x23, x23, #0xef4
   11fa8:	sub	x4, x4, x7
   11fac:	ldr	x7, [sp, #112]
   11fb0:	add	x4, x7, x4, lsl #2
   11fb4:	nop
   11fb8:	str	w9, [x23], #44
   11fbc:	cmp	x4, x23
   11fc0:	b.ne	11fb8 <lzma_mode_is_supported@@XZ_5.0+0xbb8>  // b.any
   11fc4:	mov	w23, w1
   11fc8:	add	x3, x3, x3, lsl #4
   11fcc:	sub	w2, w2, #0x3
   11fd0:	mov	w7, w1
   11fd4:	ldrh	w4, [x6, #3452]
   11fd8:	add	x3, x2, x3, lsl #4
   11fdc:	add	x1, x7, w1, uxtw #1
   11fe0:	ldr	x2, [sp, #120]
   11fe4:	lsl	x1, x1, #2
   11fe8:	ldrh	w5, [x5, #3380]
   11fec:	lsr	w4, w4, #4
   11ff0:	sub	x1, x1, x7
   11ff4:	eor	w4, w4, #0x7f
   11ff8:	add	x3, x2, x3, lsl #2
   11ffc:	ldr	x2, [x21, #3960]
   12000:	lsr	w5, w5, #4
   12004:	add	x1, x27, x1, lsl #2
   12008:	ldr	w6, [x3, #1028]
   1200c:	add	x1, x1, #0x10, lsl #12
   12010:	ldrb	w3, [x2, w4, uxtw]
   12014:	add	w0, w0, w6
   12018:	ldrb	w4, [x2, w5, sxtw]
   1201c:	add	w8, w0, w8
   12020:	ldr	w2, [x1, #3828]
   12024:	add	w0, w3, w4
   12028:	add	w8, w0, w8
   1202c:	cmp	w8, w2
   12030:	b.cs	12050 <lzma_mode_is_supported@@XZ_5.0+0xc50>  // b.hs, b.nlast
   12034:	mov	w0, #0x1                   	// #1
   12038:	strh	w0, [x1, #3816]
   1203c:	ldr	w0, [sp, #96]
   12040:	str	w8, [x1, #3828]
   12044:	str	w0, [x1, #3832]
   12048:	str	wzr, [x1, #3836]
   1204c:	nop
   12050:	cmp	w14, #0x6
   12054:	mov	w0, #0xb                   	// #11
   12058:	mov	w20, #0x8                   	// #8
   1205c:	csel	w20, w20, w0, ls  // ls = plast
   12060:	cmp	w20, #0x9
   12064:	sub	w1, w20, #0x3
   12068:	sub	w0, w20, #0x6
   1206c:	mvn	x22, x22
   12070:	csel	w0, w1, w0, ls  // ls = plast
   12074:	str	x0, [sp, #216]
   12078:	ldrb	w1, [x11]
   1207c:	mov	x15, #0x0                   	// #0
   12080:	add	x0, x27, x0, lsl #1
   12084:	mov	w9, w20
   12088:	add	x0, x0, #0x6, lsl #12
   1208c:	str	x0, [sp, #200]
   12090:	ldrb	w0, [x11, x22]
   12094:	add	x4, x11, x22
   12098:	mov	w7, w15
   1209c:	mov	w20, w15
   120a0:	cmp	w1, w0
   120a4:	mov	w10, #0x2                   	// #2
   120a8:	b.ne	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>  // b.any
   120ac:	ldrb	w1, [x11, #1]
   120b0:	ldrb	w0, [x4, #1]
   120b4:	cmp	w1, w0
   120b8:	b.eq	12108 <lzma_mode_is_supported@@XZ_5.0+0xd08>  // b.none
   120bc:	nop
   120c0:	cmp	x15, #0x3
   120c4:	b.eq	12460 <lzma_mode_is_supported@@XZ_5.0+0x1060>  // b.none
   120c8:	ldr	x0, [sp, #152]
   120cc:	ldrb	w1, [x11]
   120d0:	add	x0, x0, x15, lsl #2
   120d4:	add	x15, x15, #0x1
   120d8:	mov	w7, w15
   120dc:	mov	w20, w15
   120e0:	ldr	w22, [x0, #4]
   120e4:	mvn	x22, x22
   120e8:	add	x4, x11, x22
   120ec:	ldrb	w0, [x11, x22]
   120f0:	cmp	w1, w0
   120f4:	b.ne	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>  // b.any
   120f8:	ldrb	w1, [x11, #1]
   120fc:	ldrb	w0, [x4, #1]
   12100:	cmp	w1, w0
   12104:	b.ne	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>  // b.any
   12108:	cmp	w18, #0x2
   1210c:	mov	x0, #0x2                   	// #2
   12110:	b.hi	12120 <lzma_mode_is_supported@@XZ_5.0+0xd20>  // b.pmore
   12114:	b	1334c <lzma_mode_is_supported@@XZ_5.0+0x1f4c>
   12118:	cmp	w18, w0
   1211c:	b.ls	12bcc <lzma_mode_is_supported@@XZ_5.0+0x17cc>  // b.plast
   12120:	ldrb	w2, [x11, x0]
   12124:	mov	w3, w0
   12128:	ldrb	w1, [x4, x0]
   1212c:	add	w8, w0, #0x1
   12130:	add	x0, x0, #0x1
   12134:	cmp	w2, w1
   12138:	b.eq	12118 <lzma_mode_is_supported@@XZ_5.0+0xd18>  // b.none
   1213c:	sub	w1, w3, #0x2
   12140:	sub	w2, w3, #0x1
   12144:	mov	w5, w1
   12148:	add	w6, w3, w19
   1214c:	cmp	w6, w23
   12150:	b.ls	121a0 <lzma_mode_is_supported@@XZ_5.0+0xda0>  // b.plast
   12154:	mvn	w0, w23
   12158:	add	w23, w23, #0x1
   1215c:	add	w0, w0, w6
   12160:	mov	w22, #0x2c                  	// #44
   12164:	add	x17, x0, w23, uxtw
   12168:	mov	w16, #0x40000000            	// #1073741824
   1216c:	umaddl	x23, w23, w22, x27
   12170:	add	x0, x17, x17, lsl #1
   12174:	add	x23, x23, #0x10, lsl #12
   12178:	lsl	x0, x0, #2
   1217c:	add	x23, x23, #0xef4
   12180:	sub	x0, x0, x17
   12184:	ldr	x17, [sp, #112]
   12188:	add	x0, x17, x0, lsl #2
   1218c:	nop
   12190:	str	w16, [x23], #44
   12194:	cmp	x0, x23
   12198:	b.ne	12190 <lzma_mode_is_supported@@XZ_5.0+0xd90>  // b.any
   1219c:	mov	w23, w6
   121a0:	ldr	x0, [sp, #128]
   121a4:	ldrh	w0, [x0, #3380]
   121a8:	lsr	w0, w0, #4
   121ac:	cbnz	x15, 12b5c <lzma_mode_is_supported@@XZ_5.0+0x175c>
   121b0:	ldr	x7, [sp, #160]
   121b4:	ldr	x16, [x21, #3960]
   121b8:	ldrh	w7, [x7, #3452]
   121bc:	ldrb	w0, [x16, w0, sxtw]
   121c0:	lsr	w7, w7, #4
   121c4:	eor	w7, w7, #0x7f
   121c8:	ldrb	w25, [x16, w7, uxtw]
   121cc:	add	w25, w25, w0
   121d0:	ldr	x0, [sp, #136]
   121d4:	add	w16, w19, #0x2
   121d8:	ldr	x17, [sp, #120]
   121dc:	add	x7, x0, x0, lsl #4
   121e0:	ldr	w0, [sp, #144]
   121e4:	lsl	x7, x7, #4
   121e8:	add	w25, w0, w25
   121ec:	nop
   121f0:	add	w24, w16, w1
   121f4:	add	x22, x7, w1, uxtw
   121f8:	sub	w1, w1, #0x1
   121fc:	add	x0, x24, x24, lsl #1
   12200:	add	x22, x17, x22, lsl #2
   12204:	lsl	x0, x0, #2
   12208:	sub	x0, x0, x24
   1220c:	ldr	w22, [x22, #1028]
   12210:	add	x0, x27, x0, lsl #2
   12214:	add	w22, w25, w22
   12218:	add	x0, x0, #0x10, lsl #12
   1221c:	ldr	w24, [x0, #3828]
   12220:	cmp	w22, w24
   12224:	b.cs	12238 <lzma_mode_is_supported@@XZ_5.0+0xe38>  // b.hs, b.nlast
   12228:	strb	wzr, [x0, #3816]
   1222c:	str	w22, [x0, #3828]
   12230:	str	w19, [x0, #3832]
   12234:	str	w20, [x0, #3836]
   12238:	cmn	w1, #0x1
   1223c:	b.ne	121f0 <lzma_mode_is_supported@@XZ_5.0+0xdf0>  // b.any
   12240:	ldr	w0, [sp, #100]
   12244:	cmp	x15, #0x0
   12248:	csel	w10, w10, w8, ne  // ne = any
   1224c:	add	w1, w0, w8
   12250:	mov	w0, w8
   12254:	cmp	w1, w12
   12258:	csel	w1, w1, w12, ls  // ls = plast
   1225c:	cmp	w1, w8
   12260:	b.hi	12270 <lzma_mode_is_supported@@XZ_5.0+0xe70>  // b.pmore
   12264:	b	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>
   12268:	cmp	w1, w0
   1226c:	b.ls	12bc0 <lzma_mode_is_supported@@XZ_5.0+0x17c0>  // b.plast
   12270:	ldrb	w8, [x11, x0]
   12274:	add	w16, w0, #0x1
   12278:	ldrb	w7, [x4, x0]
   1227c:	mov	w22, w0
   12280:	add	x0, x0, #0x1
   12284:	cmp	w8, w7
   12288:	b.eq	12268 <lzma_mode_is_supported@@XZ_5.0+0xe68>  // b.none
   1228c:	sub	w22, w22, w3
   12290:	sub	w24, w22, #0x1
   12294:	cmp	w24, #0x1
   12298:	b.ls	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>  // b.plast
   1229c:	ldr	w0, [sp, #104]
   122a0:	mov	w16, w9
   122a4:	ldr	w8, [x27, #2960]
   122a8:	mov	x17, #0x35c8                	// #13768
   122ac:	add	w1, w3, w0
   122b0:	add	x30, sp, #0x108
   122b4:	ldr	x0, [sp, #136]
   122b8:	and	w7, w1, w8
   122bc:	add	x16, x7, x16, lsl #4
   122c0:	ldrb	w4, [x4, w3, uxtw]
   122c4:	add	x16, x16, x17
   122c8:	ldrb	w2, [x11, w2, uxtw]
   122cc:	add	x0, x0, x0, lsl #4
   122d0:	stp	w9, w6, [x30]
   122d4:	add	x16, x27, x16, lsl #1
   122d8:	stp	w1, w8, [x30, #-8]
   122dc:	lsl	x0, x0, #4
   122e0:	add	x0, x0, w5, uxtw
   122e4:	ldr	x5, [sp, #120]
   122e8:	ldrh	w16, [x16, #12]
   122ec:	ldr	x7, [x21, #3960]
   122f0:	add	x0, x5, x0, lsl #2
   122f4:	lsr	w16, w16, #4
   122f8:	ldrb	w5, [x11, w3, uxtw]
   122fc:	mov	w3, #0x1                   	// #1
   12300:	str	x7, [sp, #248]
   12304:	ldr	w17, [x0, #1028]
   12308:	mov	x0, x27
   1230c:	ldrb	w16, [x7, w16, sxtw]
   12310:	add	w6, w16, w17
   12314:	str	w6, [sp, #244]
   12318:	bl	117f8 <lzma_mode_is_supported@@XZ_5.0+0x3f8>
   1231c:	add	x2, sp, #0x108
   12320:	ldr	x7, [sp, #248]
   12324:	ldp	w1, w8, [x2, #-8]
   12328:	ldp	w9, w6, [x2]
   1232c:	add	w1, w1, #0x1
   12330:	ldr	x2, [sp, #216]
   12334:	and	w8, w1, w8
   12338:	ldr	x1, [sp, #200]
   1233c:	add	w6, w6, #0x1
   12340:	add	x3, x8, x2, lsl #4
   12344:	add	w24, w6, w24
   12348:	cmp	w24, w23
   1234c:	ldrh	w1, [x1, #3356]
   12350:	add	x3, x27, x3, lsl #1
   12354:	add	x3, x3, #0x6, lsl #12
   12358:	lsr	w1, w1, #4
   1235c:	eor	w2, w1, #0x7f
   12360:	ldrh	w1, [x3, #2972]
   12364:	lsr	w1, w1, #4
   12368:	ldrb	w4, [x7, w2, uxtw]
   1236c:	eor	w1, w1, #0x7f
   12370:	ldrb	w5, [x7, w1, uxtw]
   12374:	b.ls	123c0 <lzma_mode_is_supported@@XZ_5.0+0xfc0>  // b.plast
   12378:	mvn	w1, w23
   1237c:	add	w23, w23, #0x1
   12380:	add	w1, w1, w24
   12384:	mov	w2, #0x2c                  	// #44
   12388:	add	x16, x1, w23, uxtw
   1238c:	mov	w7, #0x40000000            	// #1073741824
   12390:	umaddl	x23, w23, w2, x27
   12394:	add	x1, x16, x16, lsl #1
   12398:	add	x2, x23, #0x10, lsl #12
   1239c:	lsl	x1, x1, #2
   123a0:	add	x2, x2, #0xef4
   123a4:	sub	x1, x1, x16
   123a8:	ldr	x16, [sp, #112]
   123ac:	add	x1, x16, x1, lsl #2
   123b0:	str	w7, [x2], #44
   123b4:	cmp	x1, x2
   123b8:	b.ne	123b0 <lzma_mode_is_supported@@XZ_5.0+0xfb0>  // b.any
   123bc:	mov	w23, w24
   123c0:	ldr	x1, [sp, #200]
   123c4:	add	x8, x8, x8, lsl #4
   123c8:	ldrh	w3, [x3, #3452]
   123cc:	mov	w17, w24
   123d0:	ldr	x7, [x21, #3960]
   123d4:	sub	w22, w22, #0x3
   123d8:	ldrh	w16, [x1, #3380]
   123dc:	lsr	w3, w3, #4
   123e0:	ldr	x1, [sp, #120]
   123e4:	add	x24, x17, w24, uxtw #1
   123e8:	eor	w3, w3, #0x7f
   123ec:	lsr	w16, w16, #4
   123f0:	add	x22, x22, x8, lsl #4
   123f4:	lsl	x2, x24, #2
   123f8:	sub	x2, x2, x17
   123fc:	ldrb	w3, [x7, w3, uxtw]
   12400:	add	x8, x1, x22, lsl #2
   12404:	ldrb	w1, [x7, w16, sxtw]
   12408:	add	x2, x27, x2, lsl #2
   1240c:	add	x2, x2, #0x10, lsl #12
   12410:	add	w4, w1, w4
   12414:	add	w1, w3, w5
   12418:	ldr	w3, [sp, #244]
   1241c:	ldr	w7, [x8, #1028]
   12420:	add	w5, w4, w3
   12424:	add	w5, w5, w1
   12428:	add	w25, w25, w7
   1242c:	ldr	w1, [x2, #3828]
   12430:	add	w25, w5, w25
   12434:	add	w0, w25, w0
   12438:	cmp	w0, w1
   1243c:	b.cs	120c0 <lzma_mode_is_supported@@XZ_5.0+0xcc0>  // b.hs, b.nlast
   12440:	add	x7, x2, #0xef4
   12444:	mov	w1, #0x101                 	// #257
   12448:	strh	w1, [x2, #3816]
   1244c:	cmp	x15, #0x3
   12450:	stp	w19, w20, [x7, #-8]
   12454:	stp	w0, w6, [x7]
   12458:	str	wzr, [x2, #3836]
   1245c:	b.ne	120c8 <lzma_mode_is_supported@@XZ_5.0+0xcc8>  // b.any
   12460:	cmp	w13, w18
   12464:	b.ls	124a8 <lzma_mode_is_supported@@XZ_5.0+0x10a8>  // b.plast
   12468:	ldr	w0, [x27, #756]
   1246c:	cmp	w0, w18
   12470:	b.cs	132b4 <lzma_mode_is_supported@@XZ_5.0+0x1eb4>  // b.hs, b.nlast
   12474:	add	x1, x27, #0x2fc
   12478:	mov	w0, #0x0                   	// #0
   1247c:	nop
   12480:	ldr	w2, [x1], #8
   12484:	mov	w3, w0
   12488:	add	w0, w0, #0x1
   1248c:	cmp	w2, w18
   12490:	b.cc	12480 <lzma_mode_is_supported@@XZ_5.0+0x1080>  // b.lo, b.ul, b.last
   12494:	add	w1, w3, #0x2
   12498:	str	w1, [sp, #108]
   1249c:	add	x0, x27, w0, uxtw #3
   124a0:	mov	w13, w18
   124a4:	str	w18, [x0, #756]
   124a8:	cmp	w13, w10
   124ac:	b.cc	1275c <lzma_mode_is_supported@@XZ_5.0+0x135c>  // b.lo, b.ul, b.last
   124b0:	ldr	x0, [x21, #3960]
   124b4:	add	w13, w13, w19
   124b8:	ldr	w1, [sp, #168]
   124bc:	cmp	w23, w13
   124c0:	ldrb	w0, [x0, w1, sxtw]
   124c4:	add	w0, w0, w28
   124c8:	str	w0, [sp, #128]
   124cc:	b.cs	132cc <lzma_mode_is_supported@@XZ_5.0+0x1ecc>  // b.hs, b.nlast
   124d0:	mvn	w1, w23
   124d4:	add	w23, w23, #0x1
   124d8:	add	w1, w1, w13
   124dc:	mov	w3, #0x2c                  	// #44
   124e0:	add	x2, x1, w23, uxtw
   124e4:	mov	w0, #0x40000000            	// #1073741824
   124e8:	umaddl	x23, w23, w3, x27
   124ec:	add	x1, x2, x2, lsl #1
   124f0:	add	x23, x23, #0x10, lsl #12
   124f4:	lsl	x1, x1, #2
   124f8:	add	x23, x23, #0xef4
   124fc:	sub	x1, x1, x2
   12500:	ldr	x2, [sp, #112]
   12504:	add	x1, x2, x1, lsl #2
   12508:	str	w0, [x23], #44
   1250c:	cmp	x1, x23
   12510:	b.ne	12508 <lzma_mode_is_supported@@XZ_5.0+0x1108>  // b.any
   12514:	ldr	w0, [x27, #756]
   12518:	cmp	w10, w0
   1251c:	b.ls	132c4 <lzma_mode_is_supported@@XZ_5.0+0x1ec4>  // b.plast
   12520:	add	x0, x27, #0x2fc
   12524:	mov	w24, #0x0                   	// #0
   12528:	ldr	w1, [x0], #8
   1252c:	add	w24, w24, #0x1
   12530:	cmp	w1, w10
   12534:	b.cc	12528 <lzma_mode_is_supported@@XZ_5.0+0x1128>  // b.lo, b.ul, b.last
   12538:	cmp	w14, #0x6
   1253c:	mov	w0, #0xa                   	// #10
   12540:	mov	w18, #0x7                   	// #7
   12544:	csel	w18, w18, w0, ls  // ls = plast
   12548:	cmp	w18, w0
   1254c:	sub	w20, w18, #0x3
   12550:	mov	w0, #0x4                   	// #4
   12554:	csel	w1, w20, w0, ne  // ne = any
   12558:	ldr	x0, [sp, #136]
   1255c:	add	x6, x27, x1, lsl #1
   12560:	mov	w2, w24
   12564:	add	x20, x6, #0x6, lsl #12
   12568:	mov	x6, #0x7200                	// #29184
   1256c:	cmp	w10, #0x5
   12570:	add	x0, x0, x0, lsl #4
   12574:	str	x26, [sp, #168]
   12578:	mov	w23, w13
   1257c:	mov	x26, x20
   12580:	lsl	x0, x0, #4
   12584:	stp	x0, x1, [sp, #136]
   12588:	add	x1, x27, x6
   1258c:	str	x1, [sp, #160]
   12590:	add	x1, x27, x2, lsl #3
   12594:	mov	w0, #0x5                   	// #5
   12598:	csel	w0, w10, w0, ls  // ls = plast
   1259c:	mov	w20, w19
   125a0:	sub	w0, w0, #0x2
   125a4:	ldr	w14, [x1, #760]
   125a8:	mov	w19, w12
   125ac:	cmp	w14, #0x7f
   125b0:	b.hi	1265c <lzma_mode_is_supported@@XZ_5.0+0x125c>  // b.pmore
   125b4:	nop
   125b8:	ubfiz	x0, x0, #7, #32
   125bc:	mov	x5, #0x41a4                	// #16804
   125c0:	add	x0, x0, w14, uxtw
   125c4:	add	x0, x0, x5
   125c8:	ldr	w4, [x27, x0, lsl #2]
   125cc:	ldr	x0, [sp, #136]
   125d0:	add	w5, w10, w20
   125d4:	sub	w3, w10, #0x2
   125d8:	add	x3, x0, x3
   125dc:	add	x0, x5, x5, lsl #1
   125e0:	ldr	x6, [sp, #160]
   125e4:	lsl	x0, x0, #2
   125e8:	sub	x0, x0, x5
   125ec:	add	x3, x6, x3, lsl #2
   125f0:	add	x0, x27, x0, lsl #2
   125f4:	add	x0, x0, #0x10, lsl #12
   125f8:	ldr	w28, [x3, #1028]
   125fc:	ldr	w3, [sp, #128]
   12600:	add	w28, w3, w28
   12604:	ldr	w3, [x0, #3828]
   12608:	add	w16, w28, w4
   1260c:	cmp	w16, w3
   12610:	b.cs	12628 <lzma_mode_is_supported@@XZ_5.0+0x1228>  // b.hs, b.nlast
   12614:	add	w3, w14, #0x4
   12618:	strb	wzr, [x0, #3816]
   1261c:	str	w16, [x0, #3828]
   12620:	str	w20, [x0, #3832]
   12624:	str	w3, [x0, #3836]
   12628:	ldr	w0, [x1, #756]
   1262c:	add	w22, w10, #0x1
   12630:	cmp	w10, w0
   12634:	b.eq	12770 <lzma_mode_is_supported@@XZ_5.0+0x1370>  // b.none
   12638:	mov	w10, w22
   1263c:	add	x1, x27, x2, lsl #3
   12640:	cmp	w10, #0x5
   12644:	mov	w0, #0x5                   	// #5
   12648:	csel	w0, w10, w0, ls  // ls = plast
   1264c:	sub	w0, w0, #0x2
   12650:	ldr	w14, [x1, #760]
   12654:	cmp	w14, #0x7f
   12658:	b.ls	125b8 <lzma_mode_is_supported@@XZ_5.0+0x11b8>  // b.plast
   1265c:	mov	w3, #0x7ffff               	// #524287
   12660:	cmp	w14, w3
   12664:	adrp	x3, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   12668:	b.ls	12980 <lzma_mode_is_supported@@XZ_5.0+0x1580>  // b.plast
   1266c:	tbz	w14, #31, 1296c <lzma_mode_is_supported@@XZ_5.0+0x156c>
   12670:	ldr	x3, [x3, #4008]
   12674:	lsr	w4, w14, #30
   12678:	ldrb	w3, [x3, w4, uxtw]
   1267c:	add	w3, w3, #0x3c
   12680:	ubfiz	x0, x0, #6, #32
   12684:	ubfiz	x4, x14, #2, #4
   12688:	add	x3, x0, x3
   1268c:	add	x0, x4, #0x10, lsl #12
   12690:	add	x0, x0, #0xe90
   12694:	mov	x4, #0x40a4                	// #16548
   12698:	add	x0, x27, x0
   1269c:	add	x3, x3, x4
   126a0:	ldr	w16, [x0, #8]
   126a4:	ldr	w3, [x27, x3, lsl #2]
   126a8:	add	w4, w16, w3
   126ac:	b	125cc <lzma_mode_is_supported@@XZ_5.0+0x11cc>
   126b0:	cmp	w4, #0x2
   126b4:	mov	x0, #0x2                   	// #2
   126b8:	b.ne	126d0 <lzma_mode_is_supported@@XZ_5.0+0x12d0>  // b.any
   126bc:	b	133b4 <lzma_mode_is_supported@@XZ_5.0+0x1fb4>
   126c0:	add	w6, w0, #0x1
   126c4:	add	x0, x0, #0x1
   126c8:	cmp	w4, w0
   126cc:	b.ls	126e4 <lzma_mode_is_supported@@XZ_5.0+0x12e4>  // b.plast
   126d0:	ldrb	w8, [x2, x0]
   126d4:	mov	w6, w0
   126d8:	ldrb	w7, [x5, x0]
   126dc:	cmp	w8, w7
   126e0:	b.eq	126c0 <lzma_mode_is_supported@@XZ_5.0+0x12c0>  // b.none
   126e4:	ldr	x0, [sp, #152]
   126e8:	str	w6, [x3]
   126ec:	ldr	w0, [x0, x16, lsl #2]
   126f0:	cmp	w0, w6
   126f4:	b.cs	119f4 <lzma_mode_is_supported@@XZ_5.0+0x5f4>  // b.hs, b.nlast
   126f8:	mov	w16, w13
   126fc:	mov	x14, x16
   12700:	b	119f4 <lzma_mode_is_supported@@XZ_5.0+0x5f4>
   12704:	ldr	x0, [sp, #208]
   12708:	ldr	w0, [x0, #3732]
   1270c:	cmp	w0, #0x7f
   12710:	b.hi	13074 <lzma_mode_is_supported@@XZ_5.0+0x1c74>  // b.pmore
   12714:	ldr	x0, [sp, #208]
   12718:	ldr	w0, [x0, #3800]
   1271c:	cmp	w0, #0xf
   12720:	b.hi	12ffc <lzma_mode_is_supported@@XZ_5.0+0x1bfc>  // b.pmore
   12724:	add	x2, x27, #0x2f4
   12728:	add	x1, sp, #0x11c
   1272c:	mov	x0, x26
   12730:	bl	e6d8 <lzma_mf_is_supported@@XZ_5.0+0x550>
   12734:	ldr	w4, [x26, #36]
   12738:	mov	w12, w0
   1273c:	ldr	w9, [x26, #24]
   12740:	add	w4, w4, #0x1
   12744:	sub	w4, w4, w9
   12748:	cmp	w4, #0x110
   1274c:	b.ls	1198c <lzma_mode_is_supported@@XZ_5.0+0x58c>  // b.plast
   12750:	mov	w4, #0x111                 	// #273
   12754:	b	11994 <lzma_mode_is_supported@@XZ_5.0+0x594>
   12758:	ldr	x26, [sp, #168]
   1275c:	ldr	w0, [sp, #96]
   12760:	cmp	w0, w23
   12764:	b.cs	12ce4 <lzma_mode_is_supported@@XZ_5.0+0x18e4>  // b.hs, b.nlast
   12768:	ldr	w19, [sp, #96]
   1276c:	b	11c50 <lzma_mode_is_supported@@XZ_5.0+0x850>
   12770:	ldr	w0, [sp, #100]
   12774:	mov	w2, w14
   12778:	mvn	x2, x2
   1277c:	add	w1, w0, w22
   12780:	add	x2, x11, x2
   12784:	cmp	w1, w19
   12788:	csel	w1, w1, w19, ls  // ls = plast
   1278c:	cmp	w1, w22
   12790:	b.ls	127d0 <lzma_mode_is_supported@@XZ_5.0+0x13d0>  // b.plast
   12794:	mov	w0, w22
   12798:	b	127ac <lzma_mode_is_supported@@XZ_5.0+0x13ac>
   1279c:	add	w15, w0, #0x1
   127a0:	add	x0, x0, #0x1
   127a4:	cmp	w1, w0
   127a8:	b.ls	127c0 <lzma_mode_is_supported@@XZ_5.0+0x13c0>  // b.plast
   127ac:	ldrb	w4, [x11, x0]
   127b0:	mov	w15, w0
   127b4:	ldrb	w3, [x2, x0]
   127b8:	cmp	w4, w3
   127bc:	b.eq	1279c <lzma_mode_is_supported@@XZ_5.0+0x139c>  // b.none
   127c0:	sub	w15, w15, w10
   127c4:	sub	w13, w15, #0x1
   127c8:	cmp	w13, #0x1
   127cc:	b.hi	127ec <lzma_mode_is_supported@@XZ_5.0+0x13ec>  // b.pmore
   127d0:	ldr	w0, [sp, #108]
   127d4:	add	w24, w24, #0x1
   127d8:	cmp	w24, w0
   127dc:	b.eq	12758 <lzma_mode_is_supported@@XZ_5.0+0x1358>  // b.none
   127e0:	mov	w2, w24
   127e4:	mov	w10, w22
   127e8:	b	1263c <lzma_mode_is_supported@@XZ_5.0+0x123c>
   127ec:	ldr	w0, [sp, #104]
   127f0:	sub	w3, w10, #0x1
   127f4:	ldr	w12, [x27, #2960]
   127f8:	sub	w1, w0, #0x1
   127fc:	ubfiz	x0, x18, #4, #4
   12800:	add	w1, w1, w22
   12804:	ldrb	w5, [x11, w10, uxtw]
   12808:	and	w4, w12, w1
   1280c:	add	x0, x0, x4
   12810:	ldrb	w4, [x2, w10, uxtw]
   12814:	mov	x2, #0x35c8                	// #13768
   12818:	add	x0, x0, x2
   1281c:	ldr	x25, [x21, #3960]
   12820:	add	x0, x27, x0, lsl #1
   12824:	ldrb	w2, [x11, w3, uxtw]
   12828:	and	w10, w12, w1
   1282c:	mov	w3, #0x1                   	// #1
   12830:	ldrh	w17, [x0, #12]
   12834:	mov	x0, x27
   12838:	lsr	w17, w17, #4
   1283c:	ldrb	w28, [x25, w17, sxtw]
   12840:	add	w28, w28, w16
   12844:	bl	117f8 <lzma_mode_is_supported@@XZ_5.0+0x3f8>
   12848:	ldr	x2, [sp, #144]
   1284c:	add	w10, w10, #0x1
   12850:	and	w12, w12, w10
   12854:	ldrh	w1, [x26, #3356]
   12858:	add	w4, w20, w22
   1285c:	add	x3, x12, x2, lsl #4
   12860:	add	w13, w13, w4
   12864:	lsr	w1, w1, #4
   12868:	cmp	w13, w23
   1286c:	add	x3, x27, x3, lsl #1
   12870:	eor	w2, w1, #0x7f
   12874:	add	x3, x3, #0x6, lsl #12
   12878:	ldrb	w5, [x25, w2, uxtw]
   1287c:	ldrh	w1, [x3, #2972]
   12880:	lsr	w1, w1, #4
   12884:	eor	w1, w1, #0x7f
   12888:	ldrb	w16, [x25, w1, uxtw]
   1288c:	b.ls	128d8 <lzma_mode_is_supported@@XZ_5.0+0x14d8>  // b.plast
   12890:	add	w17, w23, #0x1
   12894:	mvn	w2, w23
   12898:	add	w2, w2, w13
   1289c:	mov	w23, #0x2c                  	// #44
   128a0:	add	x2, x2, w17, uxtw
   128a4:	mov	w10, #0x40000000            	// #1073741824
   128a8:	umaddl	x23, w17, w23, x27
   128ac:	add	x1, x2, x2, lsl #1
   128b0:	add	x23, x23, #0x10, lsl #12
   128b4:	lsl	x1, x1, #2
   128b8:	add	x23, x23, #0xef4
   128bc:	sub	x1, x1, x2
   128c0:	ldr	x2, [sp, #112]
   128c4:	add	x1, x2, x1, lsl #2
   128c8:	str	w10, [x23], #44
   128cc:	cmp	x1, x23
   128d0:	b.ne	128c8 <lzma_mode_is_supported@@XZ_5.0+0x14c8>  // b.any
   128d4:	mov	w23, w13
   128d8:	mov	w2, w13
   128dc:	ldrh	w1, [x3, #3452]
   128e0:	add	x13, x2, w13, uxtw #1
   128e4:	ldrh	w3, [x26, #3380]
   128e8:	add	x12, x12, x12, lsl #4
   128ec:	sub	w15, w15, #0x3
   128f0:	lsl	x13, x13, #2
   128f4:	lsr	w1, w1, #4
   128f8:	sub	x13, x13, x2
   128fc:	lsr	w3, w3, #4
   12900:	ldr	x2, [sp, #120]
   12904:	add	x12, x15, x12, lsl #4
   12908:	ldr	x17, [x21, #3960]
   1290c:	eor	w1, w1, #0x7f
   12910:	add	x12, x2, x12, lsl #2
   12914:	add	x13, x27, x13, lsl #2
   12918:	add	x13, x13, #0x10, lsl #12
   1291c:	ldrb	w1, [x17, w1, uxtw]
   12920:	ldrb	w2, [x17, w3, sxtw]
   12924:	add	w16, w1, w16
   12928:	ldr	w3, [x12, #1028]
   1292c:	add	w5, w2, w5
   12930:	ldr	w1, [x13, #3828]
   12934:	add	w5, w16, w5
   12938:	add	w0, w0, w3
   1293c:	add	w28, w5, w28
   12940:	add	w0, w28, w0
   12944:	cmp	w0, w1
   12948:	b.cs	127d0 <lzma_mode_is_supported@@XZ_5.0+0x13d0>  // b.hs, b.nlast
   1294c:	mov	w1, #0x101                 	// #257
   12950:	strh	w1, [x13, #3816]
   12954:	add	x1, x13, #0xef4
   12958:	add	w14, w14, #0x4
   1295c:	stp	w20, w14, [x1, #-8]
   12960:	stp	w0, w4, [x1]
   12964:	str	wzr, [x13, #3836]
   12968:	b	127d0 <lzma_mode_is_supported@@XZ_5.0+0x13d0>
   1296c:	ldr	x3, [x3, #4008]
   12970:	lsr	w4, w14, #18
   12974:	ldrb	w3, [x3, w4, uxtw]
   12978:	add	w3, w3, #0x24
   1297c:	b	12680 <lzma_mode_is_supported@@XZ_5.0+0x1280>
   12980:	ldr	x3, [x3, #4008]
   12984:	lsr	w4, w14, #6
   12988:	ldrb	w3, [x3, w4, uxtw]
   1298c:	add	w3, w3, #0xc
   12990:	b	12680 <lzma_mode_is_supported@@XZ_5.0+0x1280>
   12994:	mov	w1, w5
   12998:	ldr	w9, [x0, #3836]
   1299c:	add	x2, x1, w5, uxtw #1
   129a0:	sub	w3, w19, #0x1
   129a4:	cmp	w5, w3
   129a8:	lsl	x0, x2, #2
   129ac:	sub	x0, x0, x1
   129b0:	add	x0, x27, x0, lsl #2
   129b4:	add	x0, x0, #0x10, lsl #12
   129b8:	ldr	w14, [x0, #3812]
   129bc:	b.eq	12ac0 <lzma_mode_is_supported@@XZ_5.0+0x16c0>  // b.none
   129c0:	cmp	w9, #0x3
   129c4:	b.hi	12bb0 <lzma_mode_is_supported@@XZ_5.0+0x17b0>  // b.pmore
   129c8:	cmp	w14, #0x6
   129cc:	mov	w14, #0xb                   	// #11
   129d0:	b.hi	11d04 <lzma_mode_is_supported@@XZ_5.0+0x904>  // b.pmore
   129d4:	b	11d00 <lzma_mode_is_supported@@XZ_5.0+0x900>
   129d8:	add	w1, w19, #0x1
   129dc:	add	x0, x1, x1, lsl #1
   129e0:	lsl	x0, x0, #2
   129e4:	sub	x0, x0, x1
   129e8:	add	x0, x27, x0, lsl #2
   129ec:	add	x0, x0, #0x10, lsl #12
   129f0:	ldr	w1, [x0, #3832]
   129f4:	cmp	w1, w19
   129f8:	b.cs	12a04 <lzma_mode_is_supported@@XZ_5.0+0x1604>  // b.hs, b.nlast
   129fc:	ldr	w0, [x0, #3836]
   12a00:	cbz	w0, 12a80 <lzma_mode_is_supported@@XZ_5.0+0x1680>
   12a04:	ldr	x1, [sp, #128]
   12a08:	add	w2, w19, #0x1
   12a0c:	ldr	x3, [sp, #160]
   12a10:	add	x0, x2, x2, lsl #1
   12a14:	ldrh	w1, [x1, #3380]
   12a18:	lsl	x0, x0, #2
   12a1c:	ldrh	w3, [x3, #3452]
   12a20:	sub	x0, x0, x2
   12a24:	ldr	x2, [x21, #3960]
   12a28:	lsr	w1, w1, #4
   12a2c:	lsr	w3, w3, #4
   12a30:	add	x0, x27, x0, lsl #2
   12a34:	add	x0, x0, #0x10, lsl #12
   12a38:	ldrb	w1, [x2, w1, sxtw]
   12a3c:	ldrb	w3, [x2, w3, sxtw]
   12a40:	ldr	w2, [x0, #3828]
   12a44:	add	w1, w1, w3
   12a48:	ldr	w3, [sp, #144]
   12a4c:	add	w1, w1, w3
   12a50:	cmp	w1, w2
   12a54:	b.hi	12a80 <lzma_mode_is_supported@@XZ_5.0+0x1680>  // b.pmore
   12a58:	str	w1, [x0, #3828]
   12a5c:	mov	x1, #0xee4                 	// #3812
   12a60:	str	w19, [x0, #3832]
   12a64:	mov	w2, #0x2c                  	// #44
   12a68:	ldr	w0, [sp, #96]
   12a6c:	movk	x1, #0x1, lsl #16
   12a70:	umaddl	x0, w0, w2, x1
   12a74:	add	x0, x27, x0
   12a78:	strb	wzr, [x0, #4]
   12a7c:	str	wzr, [x0, #24]
   12a80:	cmp	w12, #0x1
   12a84:	b.ls	1275c <lzma_mode_is_supported@@XZ_5.0+0x135c>  // b.plast
   12a88:	ldr	w0, [sp, #100]
   12a8c:	cmp	w0, w12
   12a90:	csel	w18, w0, w12, ls  // ls = plast
   12a94:	b	12050 <lzma_mode_is_supported@@XZ_5.0+0xc50>
   12a98:	cmp	w5, w19
   12a9c:	mov	w14, #0x8                   	// #8
   12aa0:	b.ne	12b24 <lzma_mode_is_supported@@XZ_5.0+0x1724>  // b.any
   12aa4:	mov	w14, #0x4                   	// #4
   12aa8:	add	x0, x8, x8, lsl #1
   12aac:	lsl	x0, x0, #2
   12ab0:	sub	x0, x0, x8
   12ab4:	add	x0, x27, x0, lsl #2
   12ab8:	add	x0, x0, #0x10, lsl #12
   12abc:	ldr	w9, [x0, #3836]
   12ac0:	add	x22, sp, #0x128
   12ac4:	ldp	w2, w5, [x22, #-8]
   12ac8:	ldp	w7, w6, [x22]
   12acc:	cbnz	w9, 12be8 <lzma_mode_is_supported@@XZ_5.0+0x17e8>
   12ad0:	cmp	w14, #0x7
   12ad4:	mov	w0, #0xb                   	// #11
   12ad8:	mov	w14, #0x9                   	// #9
   12adc:	mov	w3, #0x1                   	// #1
   12ae0:	csel	w14, w14, w0, cc  // cc = lo, ul, last
   12ae4:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12ae8:	mov	w1, w2
   12aec:	add	x2, x1, w2, uxtw #1
   12af0:	lsl	x2, x2, #2
   12af4:	sub	x2, x2, x1
   12af8:	add	x2, x27, x2, lsl #2
   12afc:	add	x2, x2, #0x10, lsl #12
   12b00:	ldr	w2, [x2, #3812]
   12b04:	cmp	w2, #0x3
   12b08:	b.hi	12c04 <lzma_mode_is_supported@@XZ_5.0+0x1804>  // b.pmore
   12b0c:	ldr	w9, [x0, #3836]
   12b10:	cmp	w5, w19
   12b14:	b.eq	13294 <lzma_mode_is_supported@@XZ_5.0+0x1e94>  // b.none
   12b18:	cmp	w9, #0x3
   12b1c:	b.ls	11d00 <lzma_mode_is_supported@@XZ_5.0+0x900>  // b.plast
   12b20:	mov	w14, #0x7                   	// #7
   12b24:	add	x0, x1, x1, lsl #1
   12b28:	add	x17, sp, #0x128
   12b2c:	sub	w2, w9, #0x4
   12b30:	mov	w3, #0x1                   	// #1
   12b34:	lsl	x0, x0, #2
   12b38:	sub	x1, x0, x1
   12b3c:	add	x1, x27, x1, lsl #2
   12b40:	add	x1, x1, #0x10, lsl #12
   12b44:	ldr	w5, [x1, #3840]
   12b48:	ldr	w7, [x1, #3844]
   12b4c:	ldr	w6, [x1, #3848]
   12b50:	stp	w2, w5, [x17, #-8]
   12b54:	stp	w7, w6, [x17]
   12b58:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12b5c:	ldr	x17, [sp, #128]
   12b60:	eor	w0, w0, #0x7f
   12b64:	ldr	x16, [x21, #3960]
   12b68:	cmp	w7, #0x1
   12b6c:	ldrh	w22, [x17, #3404]
   12b70:	ldrb	w17, [x16, w0, uxtw]
   12b74:	lsr	w22, w22, #4
   12b78:	b.eq	12c80 <lzma_mode_is_supported@@XZ_5.0+0x1880>  // b.none
   12b7c:	mov	w0, #0x2                   	// #2
   12b80:	sub	w0, w0, w7
   12b84:	ldr	x7, [sp, #128]
   12b88:	and	w0, w0, #0x7ff
   12b8c:	ldrh	w24, [x7, #3428]
   12b90:	eor	w7, w22, #0x7f
   12b94:	eor	w0, w0, w24
   12b98:	ldrb	w25, [x16, w7, uxtw]
   12b9c:	lsr	w0, w0, #4
   12ba0:	add	w17, w25, w17
   12ba4:	ldrb	w25, [x16, w0, uxtw]
   12ba8:	add	w25, w25, w17
   12bac:	b	121d0 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
   12bb0:	cmp	w14, #0x6
   12bb4:	b.ls	12b20 <lzma_mode_is_supported@@XZ_5.0+0x1720>  // b.plast
   12bb8:	mov	w14, #0xa                   	// #10
   12bbc:	b	12b24 <lzma_mode_is_supported@@XZ_5.0+0x1724>
   12bc0:	sub	w22, w16, w3
   12bc4:	sub	w24, w22, #0x1
   12bc8:	b	12294 <lzma_mode_is_supported@@XZ_5.0+0xe94>
   12bcc:	add	w0, w3, #0x2
   12bd0:	sub	w5, w3, #0x1
   12bd4:	mov	w2, w3
   12bd8:	sub	w1, w8, #0x2
   12bdc:	mov	w3, w8
   12be0:	mov	w8, w0
   12be4:	b	12148 <lzma_mode_is_supported@@XZ_5.0+0xd48>
   12be8:	cmp	w14, #0x3
   12bec:	b.ls	12cd0 <lzma_mode_is_supported@@XZ_5.0+0x18d0>  // b.plast
   12bf0:	cmp	w14, #0x9
   12bf4:	b.hi	12e20 <lzma_mode_is_supported@@XZ_5.0+0x1a20>  // b.pmore
   12bf8:	sub	w14, w14, #0x3
   12bfc:	mov	w3, #0x0                   	// #0
   12c00:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12c04:	cmp	w2, #0xa
   12c08:	sub	w3, w2, #0x6
   12c0c:	sub	w14, w2, #0x3
   12c10:	csel	w14, w14, w3, cc  // cc = lo, ul, last
   12c14:	cmp	w5, w19
   12c18:	b.eq	12aa8 <lzma_mode_is_supported@@XZ_5.0+0x16a8>  // b.none
   12c1c:	ldr	w9, [x0, #3836]
   12c20:	b	129c0 <lzma_mode_is_supported@@XZ_5.0+0x15c0>
   12c24:	mov	w2, #0x1                   	// #1
   12c28:	ldr	x3, [sp, #152]
   12c2c:	add	x6, x1, x1, lsl #1
   12c30:	mov	w0, w2
   12c34:	mov	x5, #0x43bc                	// #17340
   12c38:	lsl	x6, x6, #2
   12c3c:	sub	x6, x6, x1
   12c40:	add	x3, x3, w2, uxtw #2
   12c44:	nop
   12c48:	add	x0, x6, x0
   12c4c:	add	w2, w2, #0x1
   12c50:	add	x1, x0, x5
   12c54:	cmp	w2, #0x4
   12c58:	mov	w0, w2
   12c5c:	add	x1, x27, x1, lsl #2
   12c60:	ldr	w1, [x1, #16]
   12c64:	str	w1, [x3], #4
   12c68:	b.ne	12c48 <lzma_mode_is_supported@@XZ_5.0+0x1848>  // b.any
   12c6c:	add	x18, sp, #0x128
   12c70:	mov	w3, #0x1                   	// #1
   12c74:	ldp	w2, w5, [x18, #-8]
   12c78:	ldp	w7, w6, [x18]
   12c7c:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12c80:	ldrb	w25, [x16, w22, sxtw]
   12c84:	add	w25, w25, w17
   12c88:	b	121d0 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
   12c8c:	ldrh	w1, [x6, #3404]
   12c90:	eor	w0, w0, #0x7f
   12c94:	cmp	w2, #0x1
   12c98:	ldrb	w21, [x8, w0, uxtw]
   12c9c:	lsr	w1, w1, #4
   12ca0:	b.eq	1324c <lzma_mode_is_supported@@XZ_5.0+0x1e4c>  // b.none
   12ca4:	ldrh	w19, [x6, #3428]
   12ca8:	sub	w0, w20, w2
   12cac:	and	w0, w0, #0x7ff
   12cb0:	eor	w1, w1, #0x7f
   12cb4:	eor	w0, w0, w19
   12cb8:	lsr	w0, w0, #4
   12cbc:	ldrb	w19, [x8, w1, uxtw]
   12cc0:	add	w21, w19, w21
   12cc4:	ldrb	w19, [x8, w0, uxtw]
   12cc8:	add	w19, w19, w21
   12ccc:	b	11b9c <lzma_mode_is_supported@@XZ_5.0+0x79c>
   12cd0:	mov	w3, #0x0                   	// #0
   12cd4:	mov	w14, #0x0                   	// #0
   12cd8:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12cdc:	mov	w2, #0x2                   	// #2
   12ce0:	b	12c28 <lzma_mode_is_supported@@XZ_5.0+0x1828>
   12ce4:	ldr	x21, [sp, #192]
   12ce8:	add	x0, x21, x21, lsl #1
   12cec:	ldr	x1, [sp, #208]
   12cf0:	lsl	x0, x0, #2
   12cf4:	sub	x0, x0, x21
   12cf8:	ldr	w4, [sp, #96]
   12cfc:	mov	x7, #0xee4                 	// #3812
   12d00:	mov	w8, #0x2c                  	// #44
   12d04:	add	x0, x27, x0, lsl #2
   12d08:	movk	x7, #0x1, lsl #16
   12d0c:	add	x0, x0, #0x10, lsl #12
   12d10:	mov	w9, #0xffffffff            	// #-1
   12d14:	ldr	w5, [x0, #3832]
   12d18:	ldr	w6, [x0, #3836]
   12d1c:	str	w4, [x1, #3804]
   12d20:	b	12d5c <lzma_mode_is_supported@@XZ_5.0+0x195c>
   12d24:	ldr	w11, [x2, #3832]
   12d28:	add	x0, x3, x3, lsl #1
   12d2c:	mov	w21, w5
   12d30:	lsl	x0, x0, #2
   12d34:	sub	x0, x0, x3
   12d38:	add	x0, x27, x0, lsl #2
   12d3c:	add	x0, x0, #0x10, lsl #12
   12d40:	ldr	w1, [x0, #3836]
   12d44:	str	w4, [x0, #3832]
   12d48:	mov	x4, x21
   12d4c:	str	w6, [x0, #3836]
   12d50:	mov	w6, w1
   12d54:	cbz	w21, 12de4 <lzma_mode_is_supported@@XZ_5.0+0x19e4>
   12d58:	mov	w5, w11
   12d5c:	add	x1, x21, x21, lsl #1
   12d60:	mov	w3, w5
   12d64:	add	x2, x3, w5, uxtw #1
   12d68:	umaddl	x0, w5, w8, x7
   12d6c:	lsl	x1, x1, #2
   12d70:	sub	w11, w5, #0x1
   12d74:	sub	x1, x1, x21
   12d78:	lsl	x2, x2, #2
   12d7c:	sub	x2, x2, x3
   12d80:	add	x0, x27, x0
   12d84:	add	x1, x27, x1, lsl #2
   12d88:	add	x1, x1, #0x10, lsl #12
   12d8c:	add	x2, x27, x2, lsl #2
   12d90:	add	x2, x2, #0x10, lsl #12
   12d94:	ldrb	w10, [x1, #3816]
   12d98:	cbz	w10, 12d24 <lzma_mode_is_supported@@XZ_5.0+0x1924>
   12d9c:	mov	w12, w11
   12da0:	strb	wzr, [x0, #4]
   12da4:	add	x10, x12, w11, uxtw #1
   12da8:	ldrb	w13, [x1, #3817]
   12dac:	str	w9, [x0, #24]
   12db0:	lsl	x0, x10, #2
   12db4:	sub	x0, x0, x12
   12db8:	str	w11, [x2, #3832]
   12dbc:	add	x0, x27, x0, lsl #2
   12dc0:	cbz	w13, 12d28 <lzma_mode_is_supported@@XZ_5.0+0x1928>
   12dc4:	add	x0, x0, #0x10, lsl #12
   12dc8:	ldr	w10, [x1, #3820]
   12dcc:	str	w10, [x0, #3832]
   12dd0:	strb	wzr, [x0, #3816]
   12dd4:	ldr	w1, [x1, #3824]
   12dd8:	str	w1, [x0, #3836]
   12ddc:	ldr	w11, [x2, #3832]
   12de0:	b	12d28 <lzma_mode_is_supported@@XZ_5.0+0x1928>
   12de4:	ldr	x2, [sp, #208]
   12de8:	ldr	x3, [sp, #232]
   12dec:	ldr	w0, [x2, #3832]
   12df0:	ldp	x19, x20, [sp, #16]
   12df4:	ldp	x21, x22, [sp, #32]
   12df8:	ldp	x23, x24, [sp, #48]
   12dfc:	str	w0, [x3]
   12e00:	ldr	x3, [sp, #224]
   12e04:	str	w0, [x2, #3808]
   12e08:	ldr	w1, [x2, #3836]
   12e0c:	ldp	x25, x26, [sp, #64]
   12e10:	str	w1, [x3]
   12e14:	ldp	x27, x28, [sp, #80]
   12e18:	ldp	x29, x30, [sp], #304
   12e1c:	ret
   12e20:	sub	w14, w14, #0x6
   12e24:	cmp	w14, #0x6
   12e28:	cset	w3, hi  // hi = pmore
   12e2c:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   12e30:	add	x0, x8, x8, lsl #1
   12e34:	mov	w14, #0x5                   	// #5
   12e38:	lsl	x0, x0, #2
   12e3c:	sub	x0, x0, x8
   12e40:	add	x0, x27, x0, lsl #2
   12e44:	add	x0, x0, #0x10, lsl #12
   12e48:	ldr	w9, [x0, #3836]
   12e4c:	b	12ac0 <lzma_mode_is_supported@@XZ_5.0+0x16c0>
   12e50:	ldr	w0, [x27, #756]
   12e54:	cmp	w1, w0
   12e58:	b.ls	133bc <lzma_mode_is_supported@@XZ_5.0+0x1fbc>  // b.plast
   12e5c:	add	x0, x27, #0x2fc
   12e60:	mov	w7, #0x0                   	// #0
   12e64:	nop
   12e68:	ldr	w2, [x0], #8
   12e6c:	add	w7, w7, #0x1
   12e70:	cmp	w1, w2
   12e74:	b.hi	12e68 <lzma_mode_is_supported@@XZ_5.0+0x1a68>  // b.pmore
   12e78:	ldr	x0, [x24, #3960]
   12e7c:	adrp	x19, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   12e80:	add	x14, x14, x14, lsl #4
   12e84:	cmp	w1, #0x5
   12e88:	ldr	x19, [x19, #4008]
   12e8c:	mov	w12, #0x5                   	// #5
   12e90:	ldrb	w10, [x0, w9, sxtw]
   12e94:	mov	w9, w7
   12e98:	csel	w0, w1, w12, ls  // ls = plast
   12e9c:	lsl	x8, x14, #4
   12ea0:	add	x4, x27, x9, lsl #3
   12ea4:	add	w10, w10, w15
   12ea8:	mov	x28, #0x7200                	// #29184
   12eac:	ldr	w18, [sp, #284]
   12eb0:	mov	x21, x19
   12eb4:	mov	x20, x19
   12eb8:	ldr	w3, [x4, #760]
   12ebc:	add	x13, x27, x28
   12ec0:	sub	w0, w0, #0x2
   12ec4:	mov	w17, #0x7ffff               	// #524287
   12ec8:	cmp	w3, #0x7f
   12ecc:	mov	x16, #0x43a4                	// #17316
   12ed0:	mov	x15, #0x40a4                	// #16548
   12ed4:	mov	x14, #0x41a4                	// #16804
   12ed8:	b.hi	12f6c <lzma_mode_is_supported@@XZ_5.0+0x1b6c>  // b.pmore
   12edc:	nop
   12ee0:	ubfiz	x0, x0, #7, #32
   12ee4:	add	x0, x0, w3, uxtw
   12ee8:	add	x0, x0, x14
   12eec:	ldr	w5, [x27, x0, lsl #2]
   12ef0:	mov	w6, w1
   12ef4:	sub	w2, w1, #0x2
   12ef8:	add	x0, x6, w1, uxtw #1
   12efc:	add	x2, x8, x2
   12f00:	lsl	x0, x0, #2
   12f04:	add	x2, x13, x2, lsl #2
   12f08:	sub	x0, x0, x6
   12f0c:	add	x0, x27, x0, lsl #2
   12f10:	ldr	w2, [x2, #1028]
   12f14:	add	x0, x0, #0x10, lsl #12
   12f18:	add	w5, w5, w2
   12f1c:	add	w5, w5, w10
   12f20:	ldr	w2, [x0, #3828]
   12f24:	cmp	w5, w2
   12f28:	b.cs	12f40 <lzma_mode_is_supported@@XZ_5.0+0x1b40>  // b.hs, b.nlast
   12f2c:	add	w3, w3, #0x4
   12f30:	strb	wzr, [x0, #3816]
   12f34:	str	w5, [x0, #3828]
   12f38:	str	wzr, [x0, #3832]
   12f3c:	str	w3, [x0, #3836]
   12f40:	ldr	w0, [x4, #756]
   12f44:	cmp	w1, w0
   12f48:	b.eq	12fac <lzma_mode_is_supported@@XZ_5.0+0x1bac>  // b.none
   12f4c:	add	w1, w1, #0x1
   12f50:	add	x4, x27, x9, lsl #3
   12f54:	cmp	w1, #0x5
   12f58:	csel	w0, w1, w12, ls  // ls = plast
   12f5c:	sub	w0, w0, #0x2
   12f60:	ldr	w3, [x4, #760]
   12f64:	cmp	w3, #0x7f
   12f68:	b.ls	12ee0 <lzma_mode_is_supported@@XZ_5.0+0x1ae0>  // b.plast
   12f6c:	cmp	w3, w17
   12f70:	b.ls	13258 <lzma_mode_is_supported@@XZ_5.0+0x1e58>  // b.plast
   12f74:	tbz	w3, #31, 13268 <lzma_mode_is_supported@@XZ_5.0+0x1e68>
   12f78:	lsr	w2, w3, #30
   12f7c:	ldrb	w5, [x19, w2, uxtw]
   12f80:	add	w5, w5, #0x3c
   12f84:	and	x2, x3, #0xf
   12f88:	ubfiz	x0, x0, #6, #32
   12f8c:	add	x2, x2, x16
   12f90:	add	x0, x0, x5
   12f94:	add	x0, x0, x15
   12f98:	add	x2, x27, x2, lsl #2
   12f9c:	ldr	w0, [x27, x0, lsl #2]
   12fa0:	ldr	w5, [x2, #8]
   12fa4:	add	w5, w5, w0
   12fa8:	b	12ef0 <lzma_mode_is_supported@@XZ_5.0+0x1af0>
   12fac:	add	w7, w7, #0x1
   12fb0:	cmp	w18, w7
   12fb4:	b.eq	11c10 <lzma_mode_is_supported@@XZ_5.0+0x810>  // b.none
   12fb8:	mov	w9, w7
   12fbc:	add	w1, w1, #0x1
   12fc0:	b	12f50 <lzma_mode_is_supported@@XZ_5.0+0x1b50>
   12fc4:	ldrh	w2, [x6, #3380]
   12fc8:	ldrh	w3, [x13, #3452]
   12fcc:	lsr	w2, w2, #4
   12fd0:	lsr	w3, w3, #4
   12fd4:	ldrb	w2, [x1, w2, sxtw]
   12fd8:	ldrb	w1, [x1, w3, sxtw]
   12fdc:	add	w1, w2, w1
   12fe0:	add	w1, w1, w5
   12fe4:	cmp	w0, w1
   12fe8:	b.ls	11ae8 <lzma_mode_is_supported@@XZ_5.0+0x6e8>  // b.plast
   12fec:	ldr	x0, [sp, #208]
   12ff0:	str	w1, [x0, #3872]
   12ff4:	str	wzr, [x0, #3880]
   12ff8:	b	11ae8 <lzma_mode_is_supported@@XZ_5.0+0x6e8>
   12ffc:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   13000:	add	x10, x27, #0x10, lsl #12
   13004:	mov	x1, #0x71e0                	// #29152
   13008:	add	x10, x10, #0xe98
   1300c:	ldr	x8, [x0, #3960]
   13010:	add	x9, x27, x1
   13014:	mov	x7, #0x0                   	// #0
   13018:	mov	w4, w7
   1301c:	mov	w6, #0x0                   	// #0
   13020:	mov	w3, #0x4                   	// #4
   13024:	mov	w2, #0x1                   	// #1
   13028:	and	w5, w4, #0x1
   1302c:	ldrh	w0, [x9, w2, uxtw #1]
   13030:	neg	w1, w5
   13034:	subs	w3, w3, #0x1
   13038:	and	w1, w1, #0x7ff
   1303c:	lsr	w4, w4, #1
   13040:	eor	w0, w0, w1
   13044:	add	w2, w5, w2, lsl #1
   13048:	lsr	w0, w0, #4
   1304c:	ldrb	w0, [x8, w0, uxtw]
   13050:	add	w6, w6, w0
   13054:	b.ne	13028 <lzma_mode_is_supported@@XZ_5.0+0x1c28>  // b.any
   13058:	str	w6, [x10, x7, lsl #2]
   1305c:	add	x7, x7, #0x1
   13060:	cmp	x7, #0x10
   13064:	b.ne	13018 <lzma_mode_is_supported@@XZ_5.0+0x1c18>  // b.any
   13068:	ldr	x0, [sp, #208]
   1306c:	str	wzr, [x0, #3800]
   13070:	b	12724 <lzma_mode_is_supported@@XZ_5.0+0x1324>
   13074:	adrp	x0, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   13078:	add	x9, x27, #0x10, lsl #12
   1307c:	add	x9, x9, #0x690
   13080:	add	x5, x27, #0x10, lsl #12
   13084:	ldr	x8, [x0, #3960]
   13088:	mov	x3, #0x6efc                	// #28412
   1308c:	ldr	x11, [sp, #208]
   13090:	mov	x24, x0
   13094:	mov	x10, x9
   13098:	add	x5, x5, #0x290
   1309c:	add	x7, x27, x3
   130a0:	ldr	w0, [x11, #3728]
   130a4:	mov	w3, #0x0                   	// #0
   130a8:	cbz	w0, 13138 <lzma_mode_is_supported@@XZ_5.0+0x1d38>
   130ac:	nop
   130b0:	add	x12, x5, w3, uxtw #2
   130b4:	add	w2, w3, #0x40
   130b8:	mov	w4, #0x0                   	// #0
   130bc:	nop
   130c0:	and	w0, w2, #0x1
   130c4:	lsr	w2, w2, #1
   130c8:	neg	w0, w0
   130cc:	cmp	w2, #0x1
   130d0:	lsl	w6, w2, #1
   130d4:	and	w1, w0, #0x7ff
   130d8:	ldrh	w0, [x7, x6]
   130dc:	eor	w0, w0, w1
   130e0:	lsr	w0, w0, #4
   130e4:	ldrb	w0, [x8, w0, uxtw]
   130e8:	add	w4, w4, w0
   130ec:	b.ne	130c0 <lzma_mode_is_supported@@XZ_5.0+0x1cc0>  // b.any
   130f0:	str	w4, [x12]
   130f4:	add	w3, w3, #0x1
   130f8:	ldr	w0, [x11, #3728]
   130fc:	cmp	w3, w0
   13100:	b.cc	130b0 <lzma_mode_is_supported@@XZ_5.0+0x1cb0>  // b.lo, b.ul, b.last
   13104:	cmp	w0, #0xe
   13108:	b.ls	13138 <lzma_mode_is_supported@@XZ_5.0+0x1d38>  // b.plast
   1310c:	mov	w1, #0xe                   	// #14
   13110:	mov	w2, w1
   13114:	lsr	w0, w1, #1
   13118:	sub	w0, w0, #0x5
   1311c:	add	w1, w1, #0x1
   13120:	ldr	w3, [x5, x2, lsl #2]
   13124:	add	w0, w3, w0, lsl #4
   13128:	str	w0, [x5, x2, lsl #2]
   1312c:	ldr	w0, [x11, #3728]
   13130:	cmp	w1, w0
   13134:	b.cc	13110 <lzma_mode_is_supported@@XZ_5.0+0x1d10>  // b.lo, b.ul, b.last
   13138:	ldr	w0, [x5]
   1313c:	add	x5, x5, #0x100
   13140:	str	w0, [x9]
   13144:	add	x7, x7, #0x80
   13148:	ldur	w0, [x5, #-252]
   1314c:	str	w0, [x9, #4]
   13150:	ldur	w0, [x5, #-248]
   13154:	str	w0, [x9, #8]
   13158:	ldur	w0, [x5, #-244]
   1315c:	cmp	x10, x5
   13160:	str	w0, [x9, #12]
   13164:	add	x9, x9, #0x200
   13168:	b.ne	130a0 <lzma_mode_is_supported@@XZ_5.0+0x1ca0>  // b.any
   1316c:	adrp	x8, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   13170:	add	x7, x27, #0x10, lsl #12
   13174:	ldr	x11, [x24, #3960]
   13178:	mov	x2, #0x70fc                	// #28924
   1317c:	ldr	x8, [x8, #4008]
   13180:	mov	x9, #0x290                 	// #656
   13184:	add	x10, x27, x2
   13188:	add	x7, x7, #0x6a0
   1318c:	mov	x5, #0x4                   	// #4
   13190:	movk	x9, #0x1, lsl #16
   13194:	nop
   13198:	ldrb	w1, [x5, x8]
   1319c:	mov	w12, #0x1                   	// #1
   131a0:	mov	w6, #0x0                   	// #0
   131a4:	and	w0, w1, w12
   131a8:	lsr	w3, w1, #1
   131ac:	orr	w0, w0, #0x2
   131b0:	sub	w3, w3, #0x1
   131b4:	lsl	w2, w0, w3
   131b8:	mov	x0, x2
   131bc:	sub	x2, x2, w1, uxtb
   131c0:	sub	w0, w5, w0
   131c4:	lsl	x2, x2, #1
   131c8:	sub	x2, x2, #0x2
   131cc:	nop
   131d0:	add	x15, x2, w12, uxtw #1
   131d4:	and	w14, w0, #0x1
   131d8:	neg	w4, w14
   131dc:	subs	w3, w3, #0x1
   131e0:	and	w13, w4, #0x7ff
   131e4:	lsr	w0, w0, #1
   131e8:	ldrh	w4, [x10, x15]
   131ec:	add	w12, w14, w12, lsl #1
   131f0:	eor	w4, w4, w13
   131f4:	lsr	w4, w4, #4
   131f8:	ldrb	w4, [x11, w4, uxtw]
   131fc:	add	w6, w6, w4
   13200:	b.ne	131d0 <lzma_mode_is_supported@@XZ_5.0+0x1dd0>  // b.any
   13204:	add	x1, x9, w1, uxtb #2
   13208:	mov	x0, #0x0                   	// #0
   1320c:	add	x1, x27, x1
   13210:	lsl	x2, x0, #8
   13214:	lsl	x3, x0, #9
   13218:	add	x0, x0, #0x1
   1321c:	cmp	x0, #0x4
   13220:	ldr	w2, [x1, x2]
   13224:	add	w2, w2, w6
   13228:	str	w2, [x7, x3]
   1322c:	b.ne	13210 <lzma_mode_is_supported@@XZ_5.0+0x1e10>  // b.any
   13230:	add	x5, x5, #0x1
   13234:	add	x7, x7, #0x4
   13238:	cmp	x5, #0x80
   1323c:	b.ne	13198 <lzma_mode_is_supported@@XZ_5.0+0x1d98>  // b.any
   13240:	ldr	x0, [sp, #208]
   13244:	str	wzr, [x0, #3732]
   13248:	b	12714 <lzma_mode_is_supported@@XZ_5.0+0x1314>
   1324c:	ldrb	w19, [x8, w1, sxtw]
   13250:	add	w19, w19, w21
   13254:	b	11b9c <lzma_mode_is_supported@@XZ_5.0+0x79c>
   13258:	lsr	w2, w3, #6
   1325c:	ldrb	w5, [x20, w2, uxtw]
   13260:	add	w5, w5, #0xc
   13264:	b	12f84 <lzma_mode_is_supported@@XZ_5.0+0x1b84>
   13268:	lsr	w2, w3, #18
   1326c:	ldrb	w5, [x21, w2, uxtw]
   13270:	add	w5, w5, #0x24
   13274:	b	12f84 <lzma_mode_is_supported@@XZ_5.0+0x1b84>
   13278:	mov	w21, w19
   1327c:	str	w19, [sp, #96]
   13280:	b	12ce8 <lzma_mode_is_supported@@XZ_5.0+0x18e8>
   13284:	ldr	w6, [x0, #3852]
   13288:	mov	w3, #0x1                   	// #1
   1328c:	str	w6, [sp, #300]
   13290:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   13294:	add	x24, sp, #0x128
   13298:	cmp	w9, #0x0
   1329c:	csel	w3, wzr, w6, ne  // ne = any
   132a0:	mov	w14, #0x9                   	// #9
   132a4:	csel	w14, wzr, w14, ne  // ne = any
   132a8:	ldp	w2, w5, [x24, #-8]
   132ac:	ldp	w7, w6, [x24]
   132b0:	b	11d60 <lzma_mode_is_supported@@XZ_5.0+0x960>
   132b4:	mov	w0, #0x1                   	// #1
   132b8:	str	w0, [sp, #108]
   132bc:	mov	w0, #0x0                   	// #0
   132c0:	b	1249c <lzma_mode_is_supported@@XZ_5.0+0x109c>
   132c4:	mov	w24, #0x0                   	// #0
   132c8:	b	12538 <lzma_mode_is_supported@@XZ_5.0+0x1138>
   132cc:	mov	w13, w23
   132d0:	b	12514 <lzma_mode_is_supported@@XZ_5.0+0x1114>
   132d4:	ldr	x0, [sp, #224]
   132d8:	subs	w19, w23, #0x1
   132dc:	str	w14, [x0]
   132e0:	ldr	x0, [sp, #232]
   132e4:	str	w23, [x0]
   132e8:	b.eq	13340 <lzma_mode_is_supported@@XZ_5.0+0x1f40>  // b.none
   132ec:	ldr	x2, [x26, #56]
   132f0:	mov	w1, w19
   132f4:	mov	x0, x26
   132f8:	blr	x2
   132fc:	ldr	w0, [x26, #28]
   13300:	ldp	x23, x24, [sp, #48]
   13304:	add	w0, w0, w19
   13308:	ldp	x19, x20, [sp, #16]
   1330c:	str	w0, [x26, #28]
   13310:	b	11944 <lzma_mode_is_supported@@XZ_5.0+0x544>
   13314:	ldr	w0, [sp, #284]
   13318:	subs	w19, w12, #0x1
   1331c:	ldr	x1, [sp, #232]
   13320:	sub	w0, w0, #0x1
   13324:	add	x0, x27, x0, lsl #3
   13328:	str	w12, [x1]
   1332c:	ldr	x1, [sp, #224]
   13330:	ldr	w0, [x0, #760]
   13334:	add	w0, w0, #0x4
   13338:	str	w0, [x1]
   1333c:	b.ne	132ec <lzma_mode_is_supported@@XZ_5.0+0x1eec>  // b.any
   13340:	ldp	x19, x20, [sp, #16]
   13344:	ldp	x23, x24, [sp, #48]
   13348:	b	11944 <lzma_mode_is_supported@@XZ_5.0+0x544>
   1334c:	mov	w3, w0
   13350:	mov	w2, #0x1                   	// #1
   13354:	mov	w5, #0x0                   	// #0
   13358:	mov	w8, #0x3                   	// #3
   1335c:	mov	w1, #0x0                   	// #0
   13360:	b	12148 <lzma_mode_is_supported@@XZ_5.0+0xd48>
   13364:	ldr	x2, [sp, #224]
   13368:	mov	w1, #0xffffffff            	// #-1
   1336c:	ldp	x19, x20, [sp, #16]
   13370:	mov	w0, #0x1                   	// #1
   13374:	ldp	x23, x24, [sp, #48]
   13378:	str	w1, [x2]
   1337c:	ldr	x1, [sp, #232]
   13380:	str	w0, [x1]
   13384:	b	11944 <lzma_mode_is_supported@@XZ_5.0+0x544>
   13388:	ldr	x0, [sp, #208]
   1338c:	ldr	x2, [sp, #224]
   13390:	ldr	w1, [x0, #3880]
   13394:	mov	w0, #0x1                   	// #1
   13398:	ldp	x19, x20, [sp, #16]
   1339c:	ldp	x21, x22, [sp, #32]
   133a0:	ldp	x23, x24, [sp, #48]
   133a4:	str	w1, [x2]
   133a8:	ldr	x1, [sp, #232]
   133ac:	str	w0, [x1]
   133b0:	b	11944 <lzma_mode_is_supported@@XZ_5.0+0x544>
   133b4:	mov	w6, w0
   133b8:	b	126e4 <lzma_mode_is_supported@@XZ_5.0+0x12e4>
   133bc:	mov	w7, #0x0                   	// #0
   133c0:	b	12e78 <lzma_mode_is_supported@@XZ_5.0+0x1a78>
   133c4:	ldp	x19, x20, [sp, #16]
   133c8:	ldp	x21, x22, [sp, #32]
   133cc:	ldp	x23, x24, [sp, #48]
   133d0:	b	11944 <lzma_mode_is_supported@@XZ_5.0+0x544>
   133d4:	nop
   133d8:	str	x1, [x0, #28312]
   133dc:	ret
   133e0:	ldr	w9, [x1, #28]
   133e4:	add	x6, x0, #0x4, lsl #12
   133e8:	ldp	w8, w5, [x1, #20]
   133ec:	mov	x4, x0
   133f0:	mov	w0, #0x1                   	// #1
   133f4:	lsl	w9, w0, w9
   133f8:	add	w1, w8, w5
   133fc:	sub	w7, w9, #0x1
   13400:	str	w7, [x6, #11916]
   13404:	lsl	w0, w0, w1
   13408:	cbz	w0, 13440 <lzma_mode_is_supported@@XZ_5.0+0x2040>
   1340c:	sub	w0, w0, #0x1
   13410:	add	x3, x4, #0xc00
   13414:	mov	w10, #0x600                 	// #1536
   13418:	add	x1, x4, #0x600
   1341c:	mov	w2, #0x400                 	// #1024
   13420:	umaddl	x3, w0, w10, x3
   13424:	sub	x0, x1, #0x600
   13428:	strh	w2, [x0], #2
   1342c:	cmp	x0, x1
   13430:	b.ne	13428 <lzma_mode_is_supported@@XZ_5.0+0x2028>  // b.any
   13434:	add	x1, x1, #0x600
   13438:	cmp	x1, x3
   1343c:	b.ne	13424 <lzma_mode_is_supported@@XZ_5.0+0x2024>  // b.any
   13440:	mov	x15, #0x6e00                	// #28160
   13444:	add	x0, x4, x15
   13448:	add	x12, x0, #0x6c
   1344c:	mov	w1, #0x1                   	// #1
   13450:	lsl	w1, w1, w5
   13454:	mov	x16, #0x6002                	// #24578
   13458:	ubfiz	x5, x7, #1, #32
   1345c:	add	x2, x4, x16
   13460:	sub	w1, w1, #0x1
   13464:	mov	x17, #0x6180                	// #24960
   13468:	mov	x18, #0x6198                	// #24984
   1346c:	add	x2, x2, w7, uxtw #1
   13470:	eor	x5, x5, #0xfffffffffffffffe
   13474:	add	x3, x4, x17
   13478:	str	w7, [x6, #11916]
   1347c:	mov	x11, #0xffffffff            	// #4294967295
   13480:	str	w8, [x6, #11920]
   13484:	add	x8, x4, x18
   13488:	str	w1, [x6, #11924]
   1348c:	mov	x10, #0x5                   	// #5
   13490:	mov	w1, #0x400                 	// #1024
   13494:	stp	x11, x10, [x12]
   13498:	stp	xzr, xzr, [x12, #16]
   1349c:	nop
   134a0:	add	x0, x5, x2
   134a4:	nop
   134a8:	strh	w1, [x0]
   134ac:	add	x0, x0, #0x2
   134b0:	strh	w1, [x0, #478]
   134b4:	cmp	x2, x0
   134b8:	b.ne	134a8 <lzma_mode_is_supported@@XZ_5.0+0x20a8>  // b.any
   134bc:	strh	w1, [x3]
   134c0:	add	x3, x3, #0x2
   134c4:	strh	w1, [x3, #22]
   134c8:	add	x2, x2, #0x20
   134cc:	strh	w1, [x3, #46]
   134d0:	strh	w1, [x3, #70]
   134d4:	cmp	x8, x3
   134d8:	b.ne	134a0 <lzma_mode_is_supported@@XZ_5.0+0x20a0>  // b.any
   134dc:	mov	x13, #0x63e0                	// #25568
   134e0:	mov	x14, #0x65e0                	// #26080
   134e4:	add	x1, x4, x13
   134e8:	add	x3, x4, x14
   134ec:	mov	w2, #0x400                 	// #1024
   134f0:	sub	x0, x1, #0x80
   134f4:	nop
   134f8:	strh	w2, [x0], #2
   134fc:	cmp	x0, x1
   13500:	b.ne	134f8 <lzma_mode_is_supported@@XZ_5.0+0x20f8>  // b.any
   13504:	add	x1, x0, #0x80
   13508:	cmp	x1, x3
   1350c:	b.ne	134f0 <lzma_mode_is_supported@@XZ_5.0+0x20f0>  // b.any
   13510:	mov	x11, #0x6560                	// #25952
   13514:	mov	x12, #0x6644                	// #26180
   13518:	add	x0, x4, x11
   1351c:	add	x2, x4, x12
   13520:	mov	w1, #0x400                 	// #1024
   13524:	nop
   13528:	strh	w1, [x0], #2
   1352c:	cmp	x0, x2
   13530:	b.ne	13528 <lzma_mode_is_supported@@XZ_5.0+0x2128>  // b.any
   13534:	mov	x10, #0x6664                	// #26212
   13538:	add	x2, x4, x10
   1353c:	mov	w1, #0x400                 	// #1024
   13540:	strh	w1, [x0], #2
   13544:	cmp	x2, x0
   13548:	b.ne	13540 <lzma_mode_is_supported@@XZ_5.0+0x2140>  // b.any
   1354c:	mov	w0, #0x4000400             	// #67109888
   13550:	str	w0, [x6, #9828]
   13554:	str	w0, [x6, #10856]
   13558:	cbz	w9, 13604 <lzma_mode_is_supported@@XZ_5.0+0x2204>
   1355c:	mov	x5, #0x6678                	// #26232
   13560:	add	x2, x4, x5
   13564:	mov	x8, #0x6668                	// #26216
   13568:	add	x2, x2, w7, uxtw #4
   1356c:	add	x0, x4, x8
   13570:	mov	w1, #0x400                 	// #1024
   13574:	nop
   13578:	strh	w1, [x0]
   1357c:	add	x0, x0, #0x10
   13580:	sturh	w1, [x0, #-14]
   13584:	sturh	w1, [x0, #-12]
   13588:	sturh	w1, [x0, #-10]
   1358c:	sturh	w1, [x0, #-8]
   13590:	sturh	w1, [x0, #-6]
   13594:	sturh	w1, [x0, #-4]
   13598:	sturh	w1, [x0, #-2]
   1359c:	strh	w1, [x0, #240]
   135a0:	strh	w1, [x0, #242]
   135a4:	strh	w1, [x0, #244]
   135a8:	strh	w1, [x0, #246]
   135ac:	strh	w1, [x0, #248]
   135b0:	strh	w1, [x0, #250]
   135b4:	strh	w1, [x0, #252]
   135b8:	strh	w1, [x0, #254]
   135bc:	strh	w1, [x0, #1012]
   135c0:	strh	w1, [x0, #1014]
   135c4:	strh	w1, [x0, #1016]
   135c8:	strh	w1, [x0, #1018]
   135cc:	strh	w1, [x0, #1020]
   135d0:	strh	w1, [x0, #1022]
   135d4:	strh	w1, [x0, #1024]
   135d8:	strh	w1, [x0, #1026]
   135dc:	strh	w1, [x0, #1268]
   135e0:	strh	w1, [x0, #1270]
   135e4:	strh	w1, [x0, #1272]
   135e8:	strh	w1, [x0, #1274]
   135ec:	strh	w1, [x0, #1276]
   135f0:	strh	w1, [x0, #1278]
   135f4:	strh	w1, [x0, #1280]
   135f8:	strh	w1, [x0, #1282]
   135fc:	cmp	x0, x2
   13600:	b.ne	13578 <lzma_mode_is_supported@@XZ_5.0+0x2178>  // b.any
   13604:	mov	x2, #0x6868                	// #26728
   13608:	mov	x3, #0x6a68                	// #27240
   1360c:	add	x0, x4, x2
   13610:	add	x2, x4, x3
   13614:	mov	w1, #0x400                 	// #1024
   13618:	strh	w1, [x0], #2
   1361c:	cmp	x0, x2
   13620:	b.ne	13618 <lzma_mode_is_supported@@XZ_5.0+0x2218>  // b.any
   13624:	mov	x1, #0x6e6c                	// #28268
   13628:	mov	x0, #0x6c6c                	// #27756
   1362c:	add	x0, x4, x0
   13630:	add	x2, x4, x1
   13634:	mov	w1, #0x400                 	// #1024
   13638:	strh	w1, [x0], #2
   1363c:	cmp	x2, x0
   13640:	b.ne	13638 <lzma_mode_is_supported@@XZ_5.0+0x2238>  // b.any
   13644:	mov	w0, #0x1                   	// #1
   13648:	str	w0, [x6, #11936]
   1364c:	str	xzr, [x4, #28328]
   13650:	str	xzr, [x4, #28336]
   13654:	str	xzr, [x4, #28344]
   13658:	ret
   1365c:	nop
   13660:	stp	x29, x30, [sp, #-240]!
   13664:	mov	x29, sp
   13668:	stp	x19, x20, [sp, #16]
   1366c:	add	x20, x0, #0x4, lsl #12
   13670:	stp	x27, x28, [sp, #80]
   13674:	mov	x28, x0
   13678:	ldr	w0, [x20, #11892]
   1367c:	stp	x23, x24, [sp, #48]
   13680:	mov	x23, x3
   13684:	mov	x3, x1
   13688:	stp	x21, x22, [sp, #32]
   1368c:	mov	x22, x2
   13690:	mov	x21, x4
   13694:	ldr	x19, [x23]
   13698:	cbz	w0, 136d4 <lzma_mode_is_supported@@XZ_5.0+0x22d4>
   1369c:	mov	w4, #0x4                   	// #4
   136a0:	cmp	x21, x19
   136a4:	b.eq	137c8 <lzma_mode_is_supported@@XZ_5.0+0x23c8>  // b.none
   136a8:	ldrb	w2, [x22, x19]
   136ac:	cmp	w0, #0x5
   136b0:	b.eq	137a0 <lzma_mode_is_supported@@XZ_5.0+0x23a0>  // b.none
   136b4:	ldr	w1, [x20, #11888]
   136b8:	add	x19, x19, #0x1
   136bc:	sub	w0, w0, #0x1
   136c0:	orr	w1, w2, w1, lsl #8
   136c4:	str	w1, [x20, #11888]
   136c8:	str	x19, [x23]
   136cc:	str	w0, [x20, #11892]
   136d0:	cbnz	w0, 136a0 <lzma_mode_is_supported@@XZ_5.0+0x22a0>
   136d4:	ldp	x8, x6, [x3]
   136d8:	stp	x25, x26, [sp, #64]
   136dc:	ldr	w0, [x20, #11916]
   136e0:	str	w0, [sp, #112]
   136e4:	ldr	x7, [x28, #28312]
   136e8:	and	w1, w0, w6
   136ec:	ldr	w0, [x20, #11896]
   136f0:	str	w0, [sp, #96]
   136f4:	cmn	x7, #0x1
   136f8:	ldr	w0, [x20, #11904]
   136fc:	str	w0, [sp, #104]
   13700:	ldr	w0, [x20, #11908]
   13704:	str	w0, [sp, #108]
   13708:	ldr	w0, [x20, #11912]
   1370c:	str	w0, [sp, #116]
   13710:	ldr	w0, [x20, #11920]
   13714:	str	w0, [sp, #124]
   13718:	ldr	w0, [x20, #11924]
   1371c:	str	w0, [sp, #120]
   13720:	ldr	w24, [x20, #11884]
   13724:	ldr	w25, [x20, #11888]
   13728:	ldr	w10, [x20, #11900]
   1372c:	ldr	w26, [x20, #11952]
   13730:	ldr	w12, [x20, #11956]
   13734:	ldr	w18, [x20, #11960]
   13738:	ldr	w9, [x20, #11964]
   1373c:	ldp	x14, x13, [x3, #16]
   13740:	ldr	x15, [x3, #32]
   13744:	ldr	x5, [x28, #28328]
   13748:	b.eq	1375c <lzma_mode_is_supported@@XZ_5.0+0x235c>  // b.none
   1374c:	sub	x2, x13, x6
   13750:	add	x0, x7, x6
   13754:	cmp	x7, x2
   13758:	csel	x13, x0, x13, cc  // cc = lo, ul, last
   1375c:	ldr	w0, [x20, #11936]
   13760:	cmp	w0, #0x46
   13764:	b.ls	137e4 <lzma_mode_is_supported@@XZ_5.0+0x23e4>  // b.plast
   13768:	mov	x11, x6
   1376c:	mov	w0, #0xffffff              	// #16777215
   13770:	cmp	w24, w0
   13774:	b.hi	13790 <lzma_mode_is_supported@@XZ_5.0+0x2390>  // b.pmore
   13778:	cmp	x19, x21
   1377c:	b.eq	1667c <lzma_mode_is_supported@@XZ_5.0+0x527c>  // b.none
   13780:	ldrb	w0, [x22, x19]
   13784:	lsl	w24, w24, #8
   13788:	add	x19, x19, #0x1
   1378c:	orr	w25, w0, w25, lsl #8
   13790:	mov	w0, #0x1                   	// #1
   13794:	str	w0, [x20, #11936]
   13798:	mov	w0, #0x0                   	// #0
   1379c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   137a0:	cbnz	w2, 13810 <lzma_mode_is_supported@@XZ_5.0+0x2410>
   137a4:	ldr	w1, [x20, #11888]
   137a8:	add	x19, x19, #0x1
   137ac:	cmp	x21, x19
   137b0:	mov	w0, #0x4                   	// #4
   137b4:	lsl	w1, w1, #8
   137b8:	str	w1, [x20, #11888]
   137bc:	str	x19, [x23]
   137c0:	str	w4, [x20, #11892]
   137c4:	b.ne	136a8 <lzma_mode_is_supported@@XZ_5.0+0x22a8>  // b.any
   137c8:	mov	w0, #0x0                   	// #0
   137cc:	ldp	x19, x20, [sp, #16]
   137d0:	ldp	x21, x22, [sp, #32]
   137d4:	ldp	x23, x24, [sp, #48]
   137d8:	ldp	x27, x28, [sp, #80]
   137dc:	ldp	x29, x30, [sp], #240
   137e0:	ret
   137e4:	adrp	x2, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xcc00>
   137e8:	add	x2, x2, #0xa48
   137ec:	ldrh	w0, [x2, w0, uxtw #1]
   137f0:	adr	x2, 137fc <lzma_mode_is_supported@@XZ_5.0+0x23fc>
   137f4:	add	x0, x2, w0, sxth #2
   137f8:	br	x0
   137fc:	ldr	w0, [x20, #11936]
   13800:	cbz	w0, 15a40 <lzma_mode_is_supported@@XZ_5.0+0x4640>
   13804:	cmp	w0, #0x1
   13808:	b.eq	1565c <lzma_mode_is_supported@@XZ_5.0+0x425c>  // b.none
   1380c:	ldp	x25, x26, [sp, #64]
   13810:	mov	w0, #0x9                   	// #9
   13814:	ldp	x19, x20, [sp, #16]
   13818:	ldp	x21, x22, [sp, #32]
   1381c:	ldp	x23, x24, [sp, #48]
   13820:	ldp	x27, x28, [sp, #80]
   13824:	ldp	x29, x30, [sp], #240
   13828:	ret
   1382c:	sub	x27, x6, #0x1
   13830:	mov	x11, x6
   13834:	b	13884 <lzma_mode_is_supported@@XZ_5.0+0x2484>
   13838:	mov	w4, #0x800                 	// #2048
   1383c:	sub	w4, w4, w1
   13840:	mov	w24, w0
   13844:	add	w1, w1, w4, lsr #5
   13848:	strh	w1, [x5, x2]
   1384c:	ldr	w1, [sp, #96]
   13850:	adrp	x0, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xcc00>
   13854:	add	x0, x0, #0xad8
   13858:	ldr	w0, [x0, w1, uxtw #2]
   1385c:	str	w0, [sp, #96]
   13860:	cmp	x13, x27
   13864:	and	w0, w26, #0xff
   13868:	b.eq	15d14 <lzma_mode_is_supported@@XZ_5.0+0x4914>  // b.none
   1386c:	add	x11, x27, #0x1
   13870:	strb	w0, [x8, x27]
   13874:	cmp	x14, x11
   13878:	csel	x14, x14, x11, cs  // cs = hs, nlast
   1387c:	ldr	w0, [sp, #112]
   13880:	and	w1, w0, w11
   13884:	cmn	x7, #0x1
   13888:	b.ne	16198 <lzma_mode_is_supported@@XZ_5.0+0x4d98>  // b.any
   1388c:	mov	w0, #0xffffff              	// #16777215
   13890:	cmp	w24, w0
   13894:	b.hi	138b0 <lzma_mode_is_supported@@XZ_5.0+0x24b0>  // b.pmore
   13898:	cmp	x19, x21
   1389c:	b.eq	16630 <lzma_mode_is_supported@@XZ_5.0+0x5230>  // b.none
   138a0:	ldrb	w0, [x22, x19]
   138a4:	lsl	w24, w24, #8
   138a8:	add	x19, x19, #0x1
   138ac:	orr	w25, w0, w25, lsl #8
   138b0:	ldr	w16, [sp, #96]
   138b4:	mov	w4, w1
   138b8:	lsr	w0, w24, #11
   138bc:	add	x4, x4, w16, uxtw #4
   138c0:	add	x4, x28, x4, lsl #1
   138c4:	add	x4, x4, #0x6, lsl #12
   138c8:	ldrh	w2, [x4]
   138cc:	mul	w0, w0, w2
   138d0:	cmp	w0, w25
   138d4:	b.ls	15fbc <lzma_mode_is_supported@@XZ_5.0+0x4bbc>  // b.plast
   138d8:	cmp	x11, #0x0
   138dc:	add	x5, x15, x27
   138e0:	mov	w1, #0x800                 	// #2048
   138e4:	sub	w1, w1, w2
   138e8:	csel	x5, x5, x27, eq  // eq = none
   138ec:	cmp	w16, #0x6
   138f0:	add	w2, w2, w1, lsr #5
   138f4:	ldr	w1, [sp, #120]
   138f8:	strh	w2, [x4]
   138fc:	mov	w4, #0x8                   	// #8
   13900:	and	w2, w1, w11
   13904:	ldrb	w1, [x8, x5]
   13908:	ldr	w5, [sp, #124]
   1390c:	sub	w4, w4, w5
   13910:	lsl	x2, x2, x5
   13914:	asr	w1, w1, w4
   13918:	add	x1, x2, w1, sxtw
   1391c:	add	x1, x1, x1, lsl #1
   13920:	add	x5, x28, x1, lsl #9
   13924:	b.hi	16238 <lzma_mode_is_supported@@XZ_5.0+0x4e38>  // b.pmore
   13928:	mov	x27, x11
   1392c:	mov	w24, w0
   13930:	mov	w26, #0x1                   	// #1
   13934:	mov	w0, #0xffffff              	// #16777215
   13938:	cmp	w24, w0
   1393c:	b.hi	13958 <lzma_mode_is_supported@@XZ_5.0+0x2558>  // b.pmore
   13940:	cmp	x19, x21
   13944:	b.eq	165e4 <lzma_mode_is_supported@@XZ_5.0+0x51e4>  // b.none
   13948:	ldrb	w0, [x22, x19]
   1394c:	lsl	w24, w24, #8
   13950:	add	x19, x19, #0x1
   13954:	orr	w25, w0, w25, lsl #8
   13958:	ubfiz	x2, x26, #1, #32
   1395c:	lsr	w0, w24, #11
   13960:	lsl	w26, w26, #1
   13964:	ldrh	w1, [x5, x2]
   13968:	mul	w0, w0, w1
   1396c:	cmp	w0, w25
   13970:	b.ls	15fa4 <lzma_mode_is_supported@@XZ_5.0+0x4ba4>  // b.plast
   13974:	mov	w4, #0x800                 	// #2048
   13978:	sub	w4, w4, w1
   1397c:	mov	w24, w0
   13980:	add	w1, w1, w4, lsr #5
   13984:	strh	w1, [x5, x2]
   13988:	mov	w0, #0xffffff              	// #16777215
   1398c:	cmp	w24, w0
   13990:	b.hi	139ac <lzma_mode_is_supported@@XZ_5.0+0x25ac>  // b.pmore
   13994:	cmp	x19, x21
   13998:	b.eq	1626c <lzma_mode_is_supported@@XZ_5.0+0x4e6c>  // b.none
   1399c:	ldrb	w0, [x22, x19]
   139a0:	lsl	w24, w24, #8
   139a4:	add	x19, x19, #0x1
   139a8:	orr	w25, w0, w25, lsl #8
   139ac:	ubfiz	x2, x26, #1, #32
   139b0:	lsr	w0, w24, #11
   139b4:	lsl	w26, w26, #1
   139b8:	ldrh	w1, [x5, x2]
   139bc:	mul	w0, w0, w1
   139c0:	cmp	w0, w25
   139c4:	b.ls	15da4 <lzma_mode_is_supported@@XZ_5.0+0x49a4>  // b.plast
   139c8:	mov	w4, #0x800                 	// #2048
   139cc:	sub	w4, w4, w1
   139d0:	mov	w24, w0
   139d4:	add	w1, w1, w4, lsr #5
   139d8:	strh	w1, [x5, x2]
   139dc:	mov	w0, #0xffffff              	// #16777215
   139e0:	cmp	w24, w0
   139e4:	b.hi	13a00 <lzma_mode_is_supported@@XZ_5.0+0x2600>  // b.pmore
   139e8:	cmp	x19, x21
   139ec:	b.eq	161d8 <lzma_mode_is_supported@@XZ_5.0+0x4dd8>  // b.none
   139f0:	ldrb	w0, [x22, x19]
   139f4:	lsl	w24, w24, #8
   139f8:	add	x19, x19, #0x1
   139fc:	orr	w25, w0, w25, lsl #8
   13a00:	ubfiz	x2, x26, #1, #32
   13a04:	lsr	w0, w24, #11
   13a08:	lsl	w26, w26, #1
   13a0c:	ldrh	w1, [x5, x2]
   13a10:	mul	w0, w0, w1
   13a14:	cmp	w0, w25
   13a18:	b.ls	15c74 <lzma_mode_is_supported@@XZ_5.0+0x4874>  // b.plast
   13a1c:	mov	w4, #0x800                 	// #2048
   13a20:	sub	w4, w4, w1
   13a24:	mov	w24, w0
   13a28:	add	w1, w1, w4, lsr #5
   13a2c:	strh	w1, [x5, x2]
   13a30:	mov	w0, #0xffffff              	// #16777215
   13a34:	cmp	w24, w0
   13a38:	b.hi	13a54 <lzma_mode_is_supported@@XZ_5.0+0x2654>  // b.pmore
   13a3c:	cmp	x19, x21
   13a40:	b.eq	16484 <lzma_mode_is_supported@@XZ_5.0+0x5084>  // b.none
   13a44:	ldrb	w0, [x22, x19]
   13a48:	lsl	w24, w24, #8
   13a4c:	add	x19, x19, #0x1
   13a50:	orr	w25, w0, w25, lsl #8
   13a54:	ubfiz	x2, x26, #1, #32
   13a58:	lsr	w0, w24, #11
   13a5c:	lsl	w26, w26, #1
   13a60:	ldrh	w1, [x5, x2]
   13a64:	mul	w0, w0, w1
   13a68:	cmp	w0, w25
   13a6c:	b.ls	15b94 <lzma_mode_is_supported@@XZ_5.0+0x4794>  // b.plast
   13a70:	mov	w4, #0x800                 	// #2048
   13a74:	sub	w4, w4, w1
   13a78:	mov	w24, w0
   13a7c:	add	w1, w1, w4, lsr #5
   13a80:	strh	w1, [x5, x2]
   13a84:	mov	w0, #0xffffff              	// #16777215
   13a88:	cmp	w24, w0
   13a8c:	b.hi	13aa8 <lzma_mode_is_supported@@XZ_5.0+0x26a8>  // b.pmore
   13a90:	cmp	x19, x21
   13a94:	b.eq	163ec <lzma_mode_is_supported@@XZ_5.0+0x4fec>  // b.none
   13a98:	ldrb	w0, [x22, x19]
   13a9c:	lsl	w24, w24, #8
   13aa0:	add	x19, x19, #0x1
   13aa4:	orr	w25, w0, w25, lsl #8
   13aa8:	ubfiz	x2, x26, #1, #32
   13aac:	lsr	w0, w24, #11
   13ab0:	lsl	w26, w26, #1
   13ab4:	ldrh	w1, [x5, x2]
   13ab8:	mul	w0, w0, w1
   13abc:	cmp	w0, w25
   13ac0:	b.ls	15ab8 <lzma_mode_is_supported@@XZ_5.0+0x46b8>  // b.plast
   13ac4:	mov	w4, #0x800                 	// #2048
   13ac8:	sub	w4, w4, w1
   13acc:	mov	w24, w0
   13ad0:	add	w1, w1, w4, lsr #5
   13ad4:	strh	w1, [x5, x2]
   13ad8:	mov	w0, #0xffffff              	// #16777215
   13adc:	cmp	w24, w0
   13ae0:	b.hi	13afc <lzma_mode_is_supported@@XZ_5.0+0x26fc>  // b.pmore
   13ae4:	cmp	x19, x21
   13ae8:	b.eq	16168 <lzma_mode_is_supported@@XZ_5.0+0x4d68>  // b.none
   13aec:	ldrb	w0, [x22, x19]
   13af0:	lsl	w24, w24, #8
   13af4:	add	x19, x19, #0x1
   13af8:	orr	w25, w0, w25, lsl #8
   13afc:	ubfiz	x2, x26, #1, #32
   13b00:	lsr	w0, w24, #11
   13b04:	lsl	w26, w26, #1
   13b08:	ldrh	w1, [x5, x2]
   13b0c:	mul	w0, w0, w1
   13b10:	cmp	w0, w25
   13b14:	b.ls	15a28 <lzma_mode_is_supported@@XZ_5.0+0x4628>  // b.plast
   13b18:	mov	w4, #0x800                 	// #2048
   13b1c:	sub	w4, w4, w1
   13b20:	mov	w24, w0
   13b24:	add	w1, w1, w4, lsr #5
   13b28:	strh	w1, [x5, x2]
   13b2c:	mov	w0, #0xffffff              	// #16777215
   13b30:	cmp	w24, w0
   13b34:	b.hi	13b50 <lzma_mode_is_supported@@XZ_5.0+0x2750>  // b.pmore
   13b38:	cmp	x19, x21
   13b3c:	b.eq	16070 <lzma_mode_is_supported@@XZ_5.0+0x4c70>  // b.none
   13b40:	ldrb	w0, [x22, x19]
   13b44:	lsl	w24, w24, #8
   13b48:	add	x19, x19, #0x1
   13b4c:	orr	w25, w0, w25, lsl #8
   13b50:	ubfiz	x2, x26, #1, #32
   13b54:	lsr	w0, w24, #11
   13b58:	lsl	w26, w26, #1
   13b5c:	ldrh	w1, [x5, x2]
   13b60:	mul	w0, w0, w1
   13b64:	cmp	w0, w25
   13b68:	b.ls	15998 <lzma_mode_is_supported@@XZ_5.0+0x4598>  // b.plast
   13b6c:	mov	w4, #0x800                 	// #2048
   13b70:	sub	w4, w4, w1
   13b74:	mov	w24, w0
   13b78:	add	w1, w1, w4, lsr #5
   13b7c:	strh	w1, [x5, x2]
   13b80:	mov	w0, #0xffffff              	// #16777215
   13b84:	cmp	w24, w0
   13b88:	b.hi	13ba4 <lzma_mode_is_supported@@XZ_5.0+0x27a4>  // b.pmore
   13b8c:	cmp	x19, x21
   13b90:	b.eq	15fd4 <lzma_mode_is_supported@@XZ_5.0+0x4bd4>  // b.none
   13b94:	ldrb	w0, [x22, x19]
   13b98:	lsl	w24, w24, #8
   13b9c:	add	x19, x19, #0x1
   13ba0:	orr	w25, w0, w25, lsl #8
   13ba4:	ubfiz	x2, x26, #1, #32
   13ba8:	lsr	w0, w24, #11
   13bac:	lsl	w26, w26, #1
   13bb0:	ldrh	w1, [x5, x2]
   13bb4:	mul	w0, w0, w1
   13bb8:	cmp	w0, w25
   13bbc:	b.hi	13838 <lzma_mode_is_supported@@XZ_5.0+0x2438>  // b.pmore
   13bc0:	sub	w1, w1, w1, lsr #5
   13bc4:	sub	w24, w24, w0
   13bc8:	sub	w25, w25, w0
   13bcc:	add	w26, w26, #0x1
   13bd0:	strh	w1, [x5, x2]
   13bd4:	b	1384c <lzma_mode_is_supported@@XZ_5.0+0x244c>
   13bd8:	mov	x27, x6
   13bdc:	b	13934 <lzma_mode_is_supported@@XZ_5.0+0x2534>
   13be0:	mov	x27, x6
   13be4:	b	13988 <lzma_mode_is_supported@@XZ_5.0+0x2588>
   13be8:	mov	x27, x6
   13bec:	b	139dc <lzma_mode_is_supported@@XZ_5.0+0x25dc>
   13bf0:	mov	x27, x6
   13bf4:	b	13a30 <lzma_mode_is_supported@@XZ_5.0+0x2630>
   13bf8:	mov	x27, x6
   13bfc:	b	13a84 <lzma_mode_is_supported@@XZ_5.0+0x2684>
   13c00:	mov	x27, x6
   13c04:	b	13ad8 <lzma_mode_is_supported@@XZ_5.0+0x26d8>
   13c08:	mov	x27, x6
   13c0c:	b	13b2c <lzma_mode_is_supported@@XZ_5.0+0x272c>
   13c10:	mov	x27, x6
   13c14:	b	13b80 <lzma_mode_is_supported@@XZ_5.0+0x2780>
   13c18:	add	w0, w26, w18
   13c1c:	mov	x27, x6
   13c20:	and	w2, w18, w9
   13c24:	mov	w1, #0xffffff              	// #16777215
   13c28:	add	w0, w2, w0
   13c2c:	cmp	w24, w1
   13c30:	b.hi	13c4c <lzma_mode_is_supported@@XZ_5.0+0x284c>  // b.pmore
   13c34:	cmp	x19, x21
   13c38:	b.eq	16664 <lzma_mode_is_supported@@XZ_5.0+0x5264>  // b.none
   13c3c:	ldrb	w1, [x22, x19]
   13c40:	lsl	w24, w24, #8
   13c44:	add	x19, x19, #0x1
   13c48:	orr	w25, w1, w25, lsl #8
   13c4c:	ubfiz	x0, x0, #1, #32
   13c50:	lsr	w1, w24, #11
   13c54:	add	x4, x5, x0
   13c58:	lsl	w26, w26, #1
   13c5c:	ldrh	w0, [x5, x0]
   13c60:	mul	w1, w1, w0
   13c64:	cmp	w1, w25
   13c68:	b.ls	15f88 <lzma_mode_is_supported@@XZ_5.0+0x4b88>  // b.plast
   13c6c:	mov	w11, #0x800                 	// #2048
   13c70:	sub	w11, w11, w0
   13c74:	bic	w18, w18, w2
   13c78:	mov	w24, w1
   13c7c:	add	w0, w0, w11, lsr #5
   13c80:	and	w0, w0, #0xffff
   13c84:	lsl	w9, w9, #1
   13c88:	strh	w0, [x4]
   13c8c:	and	w2, w18, w9
   13c90:	add	w0, w26, w18
   13c94:	mov	w1, #0xffffff              	// #16777215
   13c98:	add	w0, w0, w2
   13c9c:	cmp	w24, w1
   13ca0:	b.hi	13cbc <lzma_mode_is_supported@@XZ_5.0+0x28bc>  // b.pmore
   13ca4:	cmp	x19, x21
   13ca8:	b.eq	161c0 <lzma_mode_is_supported@@XZ_5.0+0x4dc0>  // b.none
   13cac:	ldrb	w1, [x22, x19]
   13cb0:	lsl	w24, w24, #8
   13cb4:	add	x19, x19, #0x1
   13cb8:	orr	w25, w1, w25, lsl #8
   13cbc:	ubfiz	x0, x0, #1, #32
   13cc0:	lsr	w1, w24, #11
   13cc4:	add	x4, x5, x0
   13cc8:	lsl	w26, w26, #1
   13ccc:	ldrh	w0, [x5, x0]
   13cd0:	mul	w1, w1, w0
   13cd4:	cmp	w1, w25
   13cd8:	b.ls	15dbc <lzma_mode_is_supported@@XZ_5.0+0x49bc>  // b.plast
   13cdc:	mov	w11, #0x800                 	// #2048
   13ce0:	sub	w11, w11, w0
   13ce4:	bic	w18, w18, w2
   13ce8:	mov	w24, w1
   13cec:	add	w0, w0, w11, lsr #5
   13cf0:	and	w0, w0, #0xffff
   13cf4:	lsl	w9, w9, #1
   13cf8:	strh	w0, [x4]
   13cfc:	and	w2, w18, w9
   13d00:	add	w0, w26, w18
   13d04:	mov	w1, #0xffffff              	// #16777215
   13d08:	add	w0, w0, w2
   13d0c:	cmp	w24, w1
   13d10:	b.hi	13d2c <lzma_mode_is_supported@@XZ_5.0+0x292c>  // b.pmore
   13d14:	cmp	x19, x21
   13d18:	b.eq	1649c <lzma_mode_is_supported@@XZ_5.0+0x509c>  // b.none
   13d1c:	ldrb	w1, [x22, x19]
   13d20:	lsl	w24, w24, #8
   13d24:	add	x19, x19, #0x1
   13d28:	orr	w25, w1, w25, lsl #8
   13d2c:	ubfiz	x0, x0, #1, #32
   13d30:	lsr	w1, w24, #11
   13d34:	add	x4, x5, x0
   13d38:	lsl	w26, w26, #1
   13d3c:	ldrh	w0, [x5, x0]
   13d40:	mul	w1, w1, w0
   13d44:	cmp	w1, w25
   13d48:	b.ls	15ca4 <lzma_mode_is_supported@@XZ_5.0+0x48a4>  // b.plast
   13d4c:	mov	w11, #0x800                 	// #2048
   13d50:	sub	w11, w11, w0
   13d54:	bic	w18, w18, w2
   13d58:	mov	w24, w1
   13d5c:	add	w0, w0, w11, lsr #5
   13d60:	and	w0, w0, #0xffff
   13d64:	lsl	w9, w9, #1
   13d68:	strh	w0, [x4]
   13d6c:	and	w1, w18, w9
   13d70:	add	w0, w26, w18
   13d74:	mov	w2, #0xffffff              	// #16777215
   13d78:	add	w0, w0, w1
   13d7c:	cmp	w24, w2
   13d80:	b.hi	13d9c <lzma_mode_is_supported@@XZ_5.0+0x299c>  // b.pmore
   13d84:	cmp	x19, x21
   13d88:	b.eq	1654c <lzma_mode_is_supported@@XZ_5.0+0x514c>  // b.none
   13d8c:	ldrb	w2, [x22, x19]
   13d90:	lsl	w24, w24, #8
   13d94:	add	x19, x19, #0x1
   13d98:	orr	w25, w2, w25, lsl #8
   13d9c:	ubfiz	x0, x0, #1, #32
   13da0:	lsr	w2, w24, #11
   13da4:	add	x4, x5, x0
   13da8:	lsl	w26, w26, #1
   13dac:	ldrh	w0, [x5, x0]
   13db0:	mul	w2, w2, w0
   13db4:	cmp	w2, w25
   13db8:	b.ls	15b78 <lzma_mode_is_supported@@XZ_5.0+0x4778>  // b.plast
   13dbc:	mov	w11, #0x800                 	// #2048
   13dc0:	sub	w11, w11, w0
   13dc4:	bic	w18, w18, w1
   13dc8:	mov	w24, w2
   13dcc:	add	w0, w0, w11, lsr #5
   13dd0:	and	w0, w0, #0xffff
   13dd4:	lsl	w9, w9, #1
   13dd8:	strh	w0, [x4]
   13ddc:	and	w1, w18, w9
   13de0:	add	w0, w26, w18
   13de4:	mov	w2, #0xffffff              	// #16777215
   13de8:	add	w0, w0, w1
   13dec:	cmp	w24, w2
   13df0:	b.hi	13e0c <lzma_mode_is_supported@@XZ_5.0+0x2a0c>  // b.pmore
   13df4:	cmp	x19, x21
   13df8:	b.eq	16180 <lzma_mode_is_supported@@XZ_5.0+0x4d80>  // b.none
   13dfc:	ldrb	w2, [x22, x19]
   13e00:	lsl	w24, w24, #8
   13e04:	add	x19, x19, #0x1
   13e08:	orr	w25, w2, w25, lsl #8
   13e0c:	ubfiz	x0, x0, #1, #32
   13e10:	lsr	w2, w24, #11
   13e14:	add	x4, x5, x0
   13e18:	lsl	w26, w26, #1
   13e1c:	ldrh	w0, [x5, x0]
   13e20:	mul	w2, w2, w0
   13e24:	cmp	w2, w25
   13e28:	b.ls	15ad0 <lzma_mode_is_supported@@XZ_5.0+0x46d0>  // b.plast
   13e2c:	mov	w11, #0x800                 	// #2048
   13e30:	sub	w11, w11, w0
   13e34:	bic	w1, w18, w1
   13e38:	mov	w24, w2
   13e3c:	add	w0, w0, w11, lsr #5
   13e40:	and	w0, w0, #0xffff
   13e44:	lsl	w9, w9, #1
   13e48:	strh	w0, [x4]
   13e4c:	and	w18, w1, w9
   13e50:	add	w0, w26, w1
   13e54:	mov	w2, #0xffffff              	// #16777215
   13e58:	add	w0, w0, w18
   13e5c:	cmp	w24, w2
   13e60:	b.hi	13e7c <lzma_mode_is_supported@@XZ_5.0+0x2a7c>  // b.pmore
   13e64:	cmp	x19, x21
   13e68:	b.eq	16088 <lzma_mode_is_supported@@XZ_5.0+0x4c88>  // b.none
   13e6c:	ldrb	w2, [x22, x19]
   13e70:	lsl	w24, w24, #8
   13e74:	add	x19, x19, #0x1
   13e78:	orr	w25, w2, w25, lsl #8
   13e7c:	ubfiz	x0, x0, #1, #32
   13e80:	lsr	w2, w24, #11
   13e84:	add	x4, x5, x0
   13e88:	lsl	w26, w26, #1
   13e8c:	ldrh	w0, [x5, x0]
   13e90:	mul	w2, w2, w0
   13e94:	cmp	w2, w25
   13e98:	b.ls	15a10 <lzma_mode_is_supported@@XZ_5.0+0x4610>  // b.plast
   13e9c:	mov	w11, #0x800                 	// #2048
   13ea0:	sub	w11, w11, w0
   13ea4:	bic	w18, w1, w18
   13ea8:	mov	w24, w2
   13eac:	add	w0, w0, w11, lsr #5
   13eb0:	and	w0, w0, #0xffff
   13eb4:	lsl	w9, w9, #1
   13eb8:	strh	w0, [x4]
   13ebc:	and	w1, w18, w9
   13ec0:	add	w0, w26, w18
   13ec4:	mov	w2, #0xffffff              	// #16777215
   13ec8:	add	w0, w0, w1
   13ecc:	cmp	w24, w2
   13ed0:	b.hi	13eec <lzma_mode_is_supported@@XZ_5.0+0x2aec>  // b.pmore
   13ed4:	cmp	x19, x21
   13ed8:	b.eq	160ec <lzma_mode_is_supported@@XZ_5.0+0x4cec>  // b.none
   13edc:	ldrb	w2, [x22, x19]
   13ee0:	lsl	w24, w24, #8
   13ee4:	add	x19, x19, #0x1
   13ee8:	orr	w25, w2, w25, lsl #8
   13eec:	ubfiz	x0, x0, #1, #32
   13ef0:	lsr	w2, w24, #11
   13ef4:	add	x4, x5, x0
   13ef8:	lsl	w26, w26, #1
   13efc:	ldrh	w0, [x5, x0]
   13f00:	mul	w2, w2, w0
   13f04:	cmp	w2, w25
   13f08:	b.ls	159b0 <lzma_mode_is_supported@@XZ_5.0+0x45b0>  // b.plast
   13f0c:	mov	w11, #0x800                 	// #2048
   13f10:	sub	w11, w11, w0
   13f14:	bic	w1, w18, w1
   13f18:	mov	w24, w2
   13f1c:	add	w0, w0, w11, lsr #5
   13f20:	and	w0, w0, #0xffff
   13f24:	lsl	w9, w9, #1
   13f28:	strh	w0, [x4]
   13f2c:	and	w18, w1, w9
   13f30:	add	w0, w26, w1
   13f34:	mov	w2, #0xffffff              	// #16777215
   13f38:	add	w0, w0, w18
   13f3c:	cmp	w24, w2
   13f40:	b.hi	13f5c <lzma_mode_is_supported@@XZ_5.0+0x2b5c>  // b.pmore
   13f44:	cmp	x19, x21
   13f48:	b.eq	16130 <lzma_mode_is_supported@@XZ_5.0+0x4d30>  // b.none
   13f4c:	ldrb	w2, [x22, x19]
   13f50:	lsl	w24, w24, #8
   13f54:	add	x19, x19, #0x1
   13f58:	orr	w25, w2, w25, lsl #8
   13f5c:	ubfiz	x2, x0, #1, #32
   13f60:	lsr	w0, w24, #11
   13f64:	lsl	w26, w26, #1
   13f68:	ldrh	w4, [x5, x2]
   13f6c:	mul	w0, w0, w4
   13f70:	cmp	w0, w25
   13f74:	b.ls	15938 <lzma_mode_is_supported@@XZ_5.0+0x4538>  // b.plast
   13f78:	mov	w11, #0x800                 	// #2048
   13f7c:	sub	w11, w11, w4
   13f80:	mov	w24, w0
   13f84:	bic	w18, w1, w18
   13f88:	add	w0, w4, w11, lsr #5
   13f8c:	strh	w0, [x5, x2]
   13f90:	b	1384c <lzma_mode_is_supported@@XZ_5.0+0x244c>
   13f94:	mov	x27, x6
   13f98:	b	13c8c <lzma_mode_is_supported@@XZ_5.0+0x288c>
   13f9c:	mov	x27, x6
   13fa0:	mov	w0, #0xffffff              	// #16777215
   13fa4:	cmp	w24, w0
   13fa8:	b.hi	13fc4 <lzma_mode_is_supported@@XZ_5.0+0x2bc4>  // b.pmore
   13fac:	cmp	x19, x21
   13fb0:	b.eq	15ec0 <lzma_mode_is_supported@@XZ_5.0+0x4ac0>  // b.none
   13fb4:	ldrb	w0, [x22, x19]
   13fb8:	lsl	w24, w24, #8
   13fbc:	add	x19, x19, #0x1
   13fc0:	orr	w25, w0, w25, lsl #8
   13fc4:	ubfiz	x2, x26, #1, #32
   13fc8:	lsr	w0, w24, #11
   13fcc:	lsl	w26, w26, #1
   13fd0:	ldrh	w1, [x5, x2]
   13fd4:	mul	w0, w0, w1
   13fd8:	cmp	w0, w25
   13fdc:	b.ls	156b8 <lzma_mode_is_supported@@XZ_5.0+0x42b8>  // b.plast
   13fe0:	mov	w4, #0x800                 	// #2048
   13fe4:	sub	w4, w4, w1
   13fe8:	mov	w24, w0
   13fec:	add	w1, w1, w4, lsr #5
   13ff0:	strh	w1, [x5, x2]
   13ff4:	mov	w0, #0xffffff              	// #16777215
   13ff8:	cmp	w24, w0
   13ffc:	b.hi	14018 <lzma_mode_is_supported@@XZ_5.0+0x2c18>  // b.pmore
   14000:	cmp	x19, x21
   14004:	b.eq	15ed8 <lzma_mode_is_supported@@XZ_5.0+0x4ad8>  // b.none
   14008:	ldrb	w0, [x22, x19]
   1400c:	lsl	w24, w24, #8
   14010:	add	x19, x19, #0x1
   14014:	orr	w25, w0, w25, lsl #8
   14018:	ubfiz	x2, x26, #1, #32
   1401c:	lsr	w0, w24, #11
   14020:	lsl	w26, w26, #1
   14024:	ldrh	w1, [x5, x2]
   14028:	mul	w0, w0, w1
   1402c:	cmp	w0, w25
   14030:	b.ls	156a0 <lzma_mode_is_supported@@XZ_5.0+0x42a0>  // b.plast
   14034:	mov	w4, #0x800                 	// #2048
   14038:	sub	w4, w4, w1
   1403c:	mov	w24, w0
   14040:	add	w1, w1, w4, lsr #5
   14044:	strh	w1, [x5, x2]
   14048:	mov	w0, #0xffffff              	// #16777215
   1404c:	cmp	w24, w0
   14050:	b.hi	1406c <lzma_mode_is_supported@@XZ_5.0+0x2c6c>  // b.pmore
   14054:	cmp	x19, x21
   14058:	b.eq	15e28 <lzma_mode_is_supported@@XZ_5.0+0x4a28>  // b.none
   1405c:	ldrb	w0, [x22, x19]
   14060:	lsl	w24, w24, #8
   14064:	add	x19, x19, #0x1
   14068:	orr	w25, w0, w25, lsl #8
   1406c:	ubfiz	x0, x26, #1, #32
   14070:	lsr	w1, w24, #11
   14074:	add	x2, x5, x0
   14078:	lsl	w10, w26, #1
   1407c:	ldrh	w0, [x5, x0]
   14080:	mul	w1, w1, w0
   14084:	cmp	w1, w25
   14088:	b.ls	15688 <lzma_mode_is_supported@@XZ_5.0+0x4288>  // b.plast
   1408c:	mov	w4, #0x800                 	// #2048
   14090:	sub	w4, w4, w0
   14094:	mov	w24, w1
   14098:	add	w0, w0, w4, lsr #5
   1409c:	and	w0, w0, #0xffff
   140a0:	strh	w0, [x2]
   140a4:	sub	w10, w10, #0x40
   140a8:	cmp	w10, #0x3
   140ac:	b.ls	15680 <lzma_mode_is_supported@@XZ_5.0+0x4280>  // b.plast
   140b0:	and	w0, w10, #0x1
   140b4:	cmp	w10, #0xd
   140b8:	add	w0, w0, #0x2
   140bc:	lsr	w12, w10, #1
   140c0:	b.hi	15900 <lzma_mode_is_supported@@XZ_5.0+0x4500>  // b.pmore
   140c4:	sub	w12, w12, #0x1
   140c8:	mov	w18, #0x0                   	// #0
   140cc:	mov	w26, #0x1                   	// #1
   140d0:	lsl	w5, w0, w12
   140d4:	mov	x0, x5
   140d8:	sub	x5, x5, w10, uxtw
   140dc:	mov	x10, #0x655e                	// #25950
   140e0:	add	x5, x28, x5, lsl #1
   140e4:	add	x5, x5, x10
   140e8:	cmp	w12, #0x3
   140ec:	b.eq	15884 <lzma_mode_is_supported@@XZ_5.0+0x4484>  // b.none
   140f0:	b.hi	157b4 <lzma_mode_is_supported@@XZ_5.0+0x43b4>  // b.pmore
   140f4:	cmp	w12, #0x1
   140f8:	b.eq	14164 <lzma_mode_is_supported@@XZ_5.0+0x2d64>  // b.none
   140fc:	cmp	w12, #0x2
   14100:	b.ne	165dc <lzma_mode_is_supported@@XZ_5.0+0x51dc>  // b.any
   14104:	mov	w1, #0xffffff              	// #16777215
   14108:	cmp	w24, w1
   1410c:	b.hi	14128 <lzma_mode_is_supported@@XZ_5.0+0x2d28>  // b.pmore
   14110:	cmp	x19, x21
   14114:	b.eq	1652c <lzma_mode_is_supported@@XZ_5.0+0x512c>  // b.none
   14118:	ldrb	w1, [x22, x19]
   1411c:	lsl	w24, w24, #8
   14120:	add	x19, x19, #0x1
   14124:	orr	w25, w1, w25, lsl #8
   14128:	ubfiz	x1, x26, #1, #32
   1412c:	lsr	w2, w24, #11
   14130:	add	x4, x5, x1
   14134:	lsl	w26, w26, #1
   14138:	ldrh	w1, [x5, x1]
   1413c:	mul	w2, w2, w1
   14140:	cmp	w2, w25
   14144:	b.ls	15cf0 <lzma_mode_is_supported@@XZ_5.0+0x48f0>  // b.plast
   14148:	mov	w10, #0x800                 	// #2048
   1414c:	sub	w10, w10, w1
   14150:	mov	w24, w2
   14154:	add	w1, w1, w10, lsr #5
   14158:	and	w1, w1, #0xffff
   1415c:	add	w18, w18, #0x1
   14160:	strh	w1, [x4]
   14164:	mov	w1, #0xffffff              	// #16777215
   14168:	cmp	w24, w1
   1416c:	b.hi	14188 <lzma_mode_is_supported@@XZ_5.0+0x2d88>  // b.pmore
   14170:	cmp	x19, x21
   14174:	b.eq	16284 <lzma_mode_is_supported@@XZ_5.0+0x4e84>  // b.none
   14178:	ldrb	w1, [x22, x19]
   1417c:	lsl	w24, w24, #8
   14180:	add	x19, x19, #0x1
   14184:	orr	w25, w1, w25, lsl #8
   14188:	ubfiz	x4, x26, #1, #32
   1418c:	lsr	w1, w24, #11
   14190:	ldrh	w2, [x5, x4]
   14194:	mul	w1, w1, w2
   14198:	cmp	w1, w25
   1419c:	b.ls	15bec <lzma_mode_is_supported@@XZ_5.0+0x47ec>  // b.plast
   141a0:	mov	w11, #0x800                 	// #2048
   141a4:	sub	w11, w11, w2
   141a8:	mov	w24, w1
   141ac:	mov	w10, w0
   141b0:	add	w2, w2, w11, lsr #5
   141b4:	mov	w12, #0x1                   	// #1
   141b8:	strh	w2, [x5, x4]
   141bc:	cmp	x14, w10, uxtw
   141c0:	mov	w2, w10
   141c4:	b.ls	15bdc <lzma_mode_is_supported@@XZ_5.0+0x47dc>  // b.plast
   141c8:	mov	w0, w9
   141cc:	sub	x11, x13, x27
   141d0:	cmp	x11, x0
   141d4:	csel	x11, x11, x0, ls  // ls = plast
   141d8:	sub	w9, w9, w11
   141dc:	cmp	w10, w11
   141e0:	b.cs	155b0 <lzma_mode_is_supported@@XZ_5.0+0x41b0>  // b.hs, b.nlast
   141e4:	sub	w11, w11, #0x1
   141e8:	add	x1, x27, #0x1
   141ec:	add	x11, x1, x11
   141f0:	mvn	x4, x2
   141f4:	b	141fc <lzma_mode_is_supported@@XZ_5.0+0x2dfc>
   141f8:	add	x1, x1, #0x1
   141fc:	cmp	x2, x27
   14200:	add	x0, x15, x27
   14204:	csel	x0, x0, x27, cs  // cs = hs, nlast
   14208:	cmp	x11, x1
   1420c:	add	x0, x8, x0
   14210:	ldrb	w0, [x0, x4]
   14214:	strb	w0, [x8, x27]
   14218:	mov	x27, x1
   1421c:	b.ne	141f8 <lzma_mode_is_supported@@XZ_5.0+0x2df8>  // b.any
   14220:	cmp	x14, x11
   14224:	sub	x27, x11, #0x1
   14228:	csel	x14, x14, x11, cs  // cs = hs, nlast
   1422c:	cbz	w9, 1387c <lzma_mode_is_supported@@XZ_5.0+0x247c>
   14230:	mov	w1, #0x46                  	// #70
   14234:	mov	w0, #0x0                   	// #0
   14238:	ldr	x7, [x28, #28312]
   1423c:	str	w1, [x20, #11936]
   14240:	ldr	w1, [sp, #96]
   14244:	cmn	x7, #0x1
   14248:	str	w1, [x20, #11896]
   1424c:	ldr	w1, [sp, #104]
   14250:	str	w1, [x20, #11904]
   14254:	ldr	w1, [sp, #108]
   14258:	str	w1, [x20, #11908]
   1425c:	ldr	w1, [sp, #116]
   14260:	str	w24, [x20, #11884]
   14264:	str	w25, [x20, #11888]
   14268:	str	wzr, [x20, #11892]
   1426c:	str	w10, [x20, #11900]
   14270:	str	w1, [x20, #11912]
   14274:	str	x5, [x28, #28328]
   14278:	str	x19, [x23]
   1427c:	stp	x11, x14, [x3, #8]
   14280:	str	w26, [x20, #11952]
   14284:	str	w12, [x20, #11956]
   14288:	str	w18, [x20, #11960]
   1428c:	str	w9, [x20, #11964]
   14290:	b.eq	142a8 <lzma_mode_is_supported@@XZ_5.0+0x2ea8>  // b.none
   14294:	add	x6, x6, x7
   14298:	subs	x11, x6, x11
   1429c:	str	x11, [x28, #28312]
   142a0:	ccmp	w0, #0x0, #0x0, eq  // eq = none
   142a4:	b.eq	137fc <lzma_mode_is_supported@@XZ_5.0+0x23fc>  // b.none
   142a8:	cmp	w0, #0x1
   142ac:	b.eq	1565c <lzma_mode_is_supported@@XZ_5.0+0x425c>  // b.none
   142b0:	ldp	x19, x20, [sp, #16]
   142b4:	ldp	x21, x22, [sp, #32]
   142b8:	ldp	x23, x24, [sp, #48]
   142bc:	ldp	x25, x26, [sp, #64]
   142c0:	ldp	x27, x28, [sp, #80]
   142c4:	ldp	x29, x30, [sp], #240
   142c8:	ret
   142cc:	mov	x27, x6
   142d0:	mov	w0, #0xffffff              	// #16777215
   142d4:	cmp	w24, w0
   142d8:	b.hi	142f4 <lzma_mode_is_supported@@XZ_5.0+0x2ef4>  // b.pmore
   142dc:	cmp	x19, x21
   142e0:	b.eq	164b4 <lzma_mode_is_supported@@XZ_5.0+0x50b4>  // b.none
   142e4:	ldrb	w0, [x22, x19]
   142e8:	lsl	w24, w24, #8
   142ec:	add	x19, x19, #0x1
   142f0:	orr	w25, w0, w25, lsl #8
   142f4:	mov	w2, w26
   142f8:	lsr	w4, w24, #11
   142fc:	add	x2, x2, w1, uxtw #3
   14300:	lsl	w26, w26, #1
   14304:	add	x2, x28, x2, lsl #1
   14308:	add	x2, x2, #0x6, lsl #12
   1430c:	ldrh	w0, [x2, #2668]
   14310:	mul	w4, w4, w0
   14314:	cmp	w4, w25
   14318:	b.ls	15cd8 <lzma_mode_is_supported@@XZ_5.0+0x48d8>  // b.plast
   1431c:	mov	w11, #0x800                 	// #2048
   14320:	sub	w11, w11, w0
   14324:	mov	w24, w4
   14328:	add	w0, w0, w11, lsr #5
   1432c:	strh	w0, [x2, #2668]
   14330:	mov	w0, #0xffffff              	// #16777215
   14334:	cmp	w24, w0
   14338:	b.hi	14354 <lzma_mode_is_supported@@XZ_5.0+0x2f54>  // b.pmore
   1433c:	cmp	x19, x21
   14340:	b.eq	161f0 <lzma_mode_is_supported@@XZ_5.0+0x4df0>  // b.none
   14344:	ldrb	w0, [x22, x19]
   14348:	lsl	w24, w24, #8
   1434c:	add	x19, x19, #0x1
   14350:	orr	w25, w0, w25, lsl #8
   14354:	mov	w0, w26
   14358:	lsr	w4, w24, #11
   1435c:	add	x0, x0, w1, uxtw #3
   14360:	lsl	w26, w26, #1
   14364:	add	x0, x28, x0, lsl #1
   14368:	add	x0, x0, #0x6, lsl #12
   1436c:	ldrh	w2, [x0, #2668]
   14370:	mul	w4, w4, w2
   14374:	cmp	w4, w25
   14378:	b.ls	15b60 <lzma_mode_is_supported@@XZ_5.0+0x4760>  // b.plast
   1437c:	mov	w11, #0x800                 	// #2048
   14380:	sub	w11, w11, w2
   14384:	mov	w24, w4
   14388:	add	w2, w2, w11, lsr #5
   1438c:	strh	w2, [x0, #2668]
   14390:	mov	w0, #0xffffff              	// #16777215
   14394:	cmp	w24, w0
   14398:	b.hi	143b4 <lzma_mode_is_supported@@XZ_5.0+0x2fb4>  // b.pmore
   1439c:	cmp	x19, x21
   143a0:	b.eq	16304 <lzma_mode_is_supported@@XZ_5.0+0x4f04>  // b.none
   143a4:	ldrb	w0, [x22, x19]
   143a8:	lsl	w24, w24, #8
   143ac:	add	x19, x19, #0x1
   143b0:	orr	w25, w0, w25, lsl #8
   143b4:	mov	w0, w26
   143b8:	lsr	w2, w24, #11
   143bc:	add	x0, x0, w1, uxtw #3
   143c0:	lsl	w26, w26, #1
   143c4:	add	x0, x28, x0, lsl #1
   143c8:	add	x1, x0, #0x6, lsl #12
   143cc:	ldrh	w0, [x1, #2668]
   143d0:	mul	w2, w2, w0
   143d4:	cmp	w2, w25
   143d8:	b.ls	15aa0 <lzma_mode_is_supported@@XZ_5.0+0x46a0>  // b.plast
   143dc:	mov	w4, #0x800                 	// #2048
   143e0:	sub	w4, w4, w0
   143e4:	mov	w24, w2
   143e8:	add	w0, w0, w4, lsr #5
   143ec:	and	w0, w0, #0xffff
   143f0:	sub	w9, w26, #0x6
   143f4:	mov	w2, w10
   143f8:	strh	w0, [x1, #2668]
   143fc:	b	141c8 <lzma_mode_is_supported@@XZ_5.0+0x2dc8>
   14400:	mov	x27, x6
   14404:	mov	w0, #0xffffff              	// #16777215
   14408:	cmp	w24, w0
   1440c:	b.hi	14428 <lzma_mode_is_supported@@XZ_5.0+0x3028>  // b.pmore
   14410:	cmp	x19, x21
   14414:	b.eq	16118 <lzma_mode_is_supported@@XZ_5.0+0x4d18>  // b.none
   14418:	ldrb	w0, [x22, x19]
   1441c:	lsl	w24, w24, #8
   14420:	add	x19, x19, #0x1
   14424:	orr	w25, w0, w25, lsl #8
   14428:	add	x1, x28, w26, uxtw #1
   1442c:	lsr	w2, w24, #11
   14430:	add	x1, x1, #0x6, lsl #12
   14434:	ldrh	w0, [x1, #1604]
   14438:	mul	w2, w2, w0
   1443c:	cmp	w2, w25
   14440:	b.ls	159e0 <lzma_mode_is_supported@@XZ_5.0+0x45e0>  // b.plast
   14444:	mov	w4, #0x800                 	// #2048
   14448:	sub	w4, w4, w0
   1444c:	mov	w24, w2
   14450:	add	w0, w0, w4, lsr #5
   14454:	and	w0, w0, #0xffff
   14458:	strh	w0, [x1, #1604]
   1445c:	cmn	w10, #0x1
   14460:	b.ne	141bc <lzma_mode_is_supported@@XZ_5.0+0x2dbc>  // b.any
   14464:	ldr	x7, [x28, #28312]
   14468:	mov	x11, x27
   1446c:	mov	w0, #0x9                   	// #9
   14470:	cmn	x7, #0x1
   14474:	b.ne	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>  // b.any
   14478:	mov	w0, #0xffffff              	// #16777215
   1447c:	cmp	w24, w0
   14480:	mov	w0, #0x1                   	// #1
   14484:	b.hi	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>  // b.pmore
   14488:	cmp	x19, x21
   1448c:	b.eq	16364 <lzma_mode_is_supported@@XZ_5.0+0x4f64>  // b.none
   14490:	ldrb	w1, [x22, x19]
   14494:	lsl	w24, w24, #8
   14498:	add	x19, x19, #0x1
   1449c:	orr	w25, w1, w25, lsl #8
   144a0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   144a4:	mov	x27, x6
   144a8:	mov	w0, #0xffffff              	// #16777215
   144ac:	cmp	w24, w0
   144b0:	b.hi	144cc <lzma_mode_is_supported@@XZ_5.0+0x30cc>  // b.pmore
   144b4:	cmp	x19, x21
   144b8:	b.eq	1657c <lzma_mode_is_supported@@XZ_5.0+0x517c>  // b.none
   144bc:	ldrb	w0, [x22, x19]
   144c0:	lsl	w24, w24, #8
   144c4:	add	x19, x19, #0x1
   144c8:	orr	w25, w0, w25, lsl #8
   144cc:	add	x2, x28, w26, uxtw #1
   144d0:	lsr	w0, w24, #11
   144d4:	add	x2, x2, #0x6, lsl #12
   144d8:	lsl	w26, w26, #1
   144dc:	ldrh	w1, [x2, #3180]
   144e0:	mul	w0, w0, w1
   144e4:	cmp	w0, w25
   144e8:	b.ls	15cc0 <lzma_mode_is_supported@@XZ_5.0+0x48c0>  // b.plast
   144ec:	mov	w4, #0x800                 	// #2048
   144f0:	sub	w4, w4, w1
   144f4:	mov	w24, w0
   144f8:	add	w1, w1, w4, lsr #5
   144fc:	strh	w1, [x2, #3180]
   14500:	mov	w0, #0xffffff              	// #16777215
   14504:	cmp	w24, w0
   14508:	b.hi	14524 <lzma_mode_is_supported@@XZ_5.0+0x3124>  // b.pmore
   1450c:	cmp	x19, x21
   14510:	b.eq	16594 <lzma_mode_is_supported@@XZ_5.0+0x5194>  // b.none
   14514:	ldrb	w0, [x22, x19]
   14518:	lsl	w24, w24, #8
   1451c:	add	x19, x19, #0x1
   14520:	orr	w25, w0, w25, lsl #8
   14524:	add	x2, x28, w26, uxtw #1
   14528:	lsr	w0, w24, #11
   1452c:	add	x2, x2, #0x6, lsl #12
   14530:	lsl	w26, w26, #1
   14534:	ldrh	w1, [x2, #3180]
   14538:	mul	w0, w0, w1
   1453c:	cmp	w0, w25
   14540:	b.ls	15ae8 <lzma_mode_is_supported@@XZ_5.0+0x46e8>  // b.plast
   14544:	mov	w4, #0x800                 	// #2048
   14548:	sub	w4, w4, w1
   1454c:	mov	w24, w0
   14550:	add	w1, w1, w4, lsr #5
   14554:	strh	w1, [x2, #3180]
   14558:	mov	w0, #0xffffff              	// #16777215
   1455c:	cmp	w24, w0
   14560:	b.hi	1457c <lzma_mode_is_supported@@XZ_5.0+0x317c>  // b.pmore
   14564:	cmp	x19, x21
   14568:	b.eq	16564 <lzma_mode_is_supported@@XZ_5.0+0x5164>  // b.none
   1456c:	ldrb	w0, [x22, x19]
   14570:	lsl	w24, w24, #8
   14574:	add	x19, x19, #0x1
   14578:	orr	w25, w0, w25, lsl #8
   1457c:	add	x2, x28, w26, uxtw #1
   14580:	lsr	w0, w24, #11
   14584:	add	x2, x2, #0x6, lsl #12
   14588:	lsl	w26, w26, #1
   1458c:	ldrh	w1, [x2, #3180]
   14590:	mul	w0, w0, w1
   14594:	cmp	w0, w25
   14598:	b.ls	15a88 <lzma_mode_is_supported@@XZ_5.0+0x4688>  // b.plast
   1459c:	mov	w4, #0x800                 	// #2048
   145a0:	sub	w4, w4, w1
   145a4:	mov	w24, w0
   145a8:	add	w1, w1, w4, lsr #5
   145ac:	strh	w1, [x2, #3180]
   145b0:	mov	w0, #0xffffff              	// #16777215
   145b4:	cmp	w24, w0
   145b8:	b.hi	145d4 <lzma_mode_is_supported@@XZ_5.0+0x31d4>  // b.pmore
   145bc:	cmp	x19, x21
   145c0:	b.eq	16058 <lzma_mode_is_supported@@XZ_5.0+0x4c58>  // b.none
   145c4:	ldrb	w0, [x22, x19]
   145c8:	lsl	w24, w24, #8
   145cc:	add	x19, x19, #0x1
   145d0:	orr	w25, w0, w25, lsl #8
   145d4:	add	x2, x28, w26, uxtw #1
   145d8:	lsr	w0, w24, #11
   145dc:	add	x2, x2, #0x6, lsl #12
   145e0:	lsl	w26, w26, #1
   145e4:	ldrh	w1, [x2, #3180]
   145e8:	mul	w0, w0, w1
   145ec:	cmp	w0, w25
   145f0:	b.ls	159c8 <lzma_mode_is_supported@@XZ_5.0+0x45c8>  // b.plast
   145f4:	mov	w4, #0x800                 	// #2048
   145f8:	sub	w4, w4, w1
   145fc:	mov	w24, w0
   14600:	add	w1, w1, w4, lsr #5
   14604:	strh	w1, [x2, #3180]
   14608:	mov	w0, #0xffffff              	// #16777215
   1460c:	cmp	w24, w0
   14610:	b.hi	1462c <lzma_mode_is_supported@@XZ_5.0+0x322c>  // b.pmore
   14614:	cmp	x19, x21
   14618:	b.eq	16004 <lzma_mode_is_supported@@XZ_5.0+0x4c04>  // b.none
   1461c:	ldrb	w0, [x22, x19]
   14620:	lsl	w24, w24, #8
   14624:	add	x19, x19, #0x1
   14628:	orr	w25, w0, w25, lsl #8
   1462c:	add	x2, x28, w26, uxtw #1
   14630:	lsr	w0, w24, #11
   14634:	add	x2, x2, #0x6, lsl #12
   14638:	lsl	w26, w26, #1
   1463c:	ldrh	w1, [x2, #3180]
   14640:	mul	w0, w0, w1
   14644:	cmp	w0, w25
   14648:	b.ls	15968 <lzma_mode_is_supported@@XZ_5.0+0x4568>  // b.plast
   1464c:	mov	w4, #0x800                 	// #2048
   14650:	sub	w4, w4, w1
   14654:	mov	w24, w0
   14658:	add	w1, w1, w4, lsr #5
   1465c:	strh	w1, [x2, #3180]
   14660:	mov	w0, #0xffffff              	// #16777215
   14664:	cmp	w24, w0
   14668:	b.hi	14684 <lzma_mode_is_supported@@XZ_5.0+0x3284>  // b.pmore
   1466c:	cmp	x19, x21
   14670:	b.eq	15fec <lzma_mode_is_supported@@XZ_5.0+0x4bec>  // b.none
   14674:	ldrb	w0, [x22, x19]
   14678:	lsl	w24, w24, #8
   1467c:	add	x19, x19, #0x1
   14680:	orr	w25, w0, w25, lsl #8
   14684:	add	x2, x28, w26, uxtw #1
   14688:	lsr	w0, w24, #11
   1468c:	add	x2, x2, #0x6, lsl #12
   14690:	lsl	w26, w26, #1
   14694:	ldrh	w1, [x2, #3180]
   14698:	mul	w0, w0, w1
   1469c:	cmp	w0, w25
   146a0:	b.ls	15908 <lzma_mode_is_supported@@XZ_5.0+0x4508>  // b.plast
   146a4:	mov	w4, #0x800                 	// #2048
   146a8:	sub	w4, w4, w1
   146ac:	mov	w24, w0
   146b0:	add	w1, w1, w4, lsr #5
   146b4:	strh	w1, [x2, #3180]
   146b8:	mov	w0, #0xffffff              	// #16777215
   146bc:	cmp	w24, w0
   146c0:	b.hi	146dc <lzma_mode_is_supported@@XZ_5.0+0x32dc>  // b.pmore
   146c4:	cmp	x19, x21
   146c8:	b.eq	160a4 <lzma_mode_is_supported@@XZ_5.0+0x4ca4>  // b.none
   146cc:	ldrb	w0, [x22, x19]
   146d0:	lsl	w24, w24, #8
   146d4:	add	x19, x19, #0x1
   146d8:	orr	w25, w0, w25, lsl #8
   146dc:	add	x2, x28, w26, uxtw #1
   146e0:	lsr	w1, w24, #11
   146e4:	add	x2, x2, #0x6, lsl #12
   146e8:	lsl	w26, w26, #1
   146ec:	ldrh	w0, [x2, #3180]
   146f0:	mul	w1, w1, w0
   146f4:	cmp	w1, w25
   146f8:	b.ls	158e8 <lzma_mode_is_supported@@XZ_5.0+0x44e8>  // b.plast
   146fc:	mov	w4, #0x800                 	// #2048
   14700:	sub	w4, w4, w0
   14704:	mov	w24, w1
   14708:	add	w0, w0, w4, lsr #5
   1470c:	and	w0, w0, #0xffff
   14710:	sub	w9, w26, #0xee
   14714:	strh	w0, [x2, #3180]
   14718:	mov	w2, w10
   1471c:	b	141c8 <lzma_mode_is_supported@@XZ_5.0+0x2dc8>
   14720:	mov	x27, x6
   14724:	mov	w0, #0xffffff              	// #16777215
   14728:	cmp	w24, w0
   1472c:	b.hi	14748 <lzma_mode_is_supported@@XZ_5.0+0x3348>  // b.pmore
   14730:	cmp	x19, x21
   14734:	b.eq	16404 <lzma_mode_is_supported@@XZ_5.0+0x5004>  // b.none
   14738:	ldrb	w0, [x22, x19]
   1473c:	lsl	w24, w24, #8
   14740:	add	x19, x19, #0x1
   14744:	orr	w25, w0, w25, lsl #8
   14748:	mov	w0, w26
   1474c:	lsr	w2, w24, #11
   14750:	add	x0, x0, w1, uxtw #3
   14754:	lsl	w9, w26, #1
   14758:	add	x0, x28, x0, lsl #1
   1475c:	add	x1, x0, #0x6, lsl #12
   14760:	ldrh	w0, [x1, #1640]
   14764:	mul	w2, w2, w0
   14768:	cmp	w2, w25
   1476c:	b.ls	15c48 <lzma_mode_is_supported@@XZ_5.0+0x4848>  // b.plast
   14770:	mov	w4, #0x800                 	// #2048
   14774:	sub	w4, w4, w0
   14778:	mov	w24, w2
   1477c:	add	w0, w0, w4, lsr #5
   14780:	and	w0, w0, #0xffff
   14784:	sub	w9, w9, #0x6
   14788:	strh	w0, [x1, #1640]
   1478c:	cmp	w9, #0x5
   14790:	mov	w5, #0x5                   	// #5
   14794:	csel	w5, w9, w5, ls  // ls = plast
   14798:	mov	x11, #0x6360                	// #25440
   1479c:	sub	w5, w5, #0x2
   147a0:	mov	w26, #0x1                   	// #1
   147a4:	ubfiz	x5, x5, #7, #32
   147a8:	add	x5, x5, x11
   147ac:	add	x5, x28, x5
   147b0:	mov	w0, #0xffffff              	// #16777215
   147b4:	cmp	w24, w0
   147b8:	b.hi	147d4 <lzma_mode_is_supported@@XZ_5.0+0x33d4>  // b.pmore
   147bc:	cmp	x19, x21
   147c0:	b.eq	15f34 <lzma_mode_is_supported@@XZ_5.0+0x4b34>  // b.none
   147c4:	ldrb	w0, [x22, x19]
   147c8:	lsl	w24, w24, #8
   147cc:	add	x19, x19, #0x1
   147d0:	orr	w25, w0, w25, lsl #8
   147d4:	ubfiz	x2, x26, #1, #32
   147d8:	lsr	w0, w24, #11
   147dc:	lsl	w26, w26, #1
   147e0:	ldrh	w1, [x5, x2]
   147e4:	mul	w0, w0, w1
   147e8:	cmp	w0, w25
   147ec:	b.ls	15700 <lzma_mode_is_supported@@XZ_5.0+0x4300>  // b.plast
   147f0:	mov	w4, #0x800                 	// #2048
   147f4:	sub	w4, w4, w1
   147f8:	mov	w24, w0
   147fc:	add	w1, w1, w4, lsr #5
   14800:	strh	w1, [x5, x2]
   14804:	mov	w0, #0xffffff              	// #16777215
   14808:	cmp	w24, w0
   1480c:	b.hi	14828 <lzma_mode_is_supported@@XZ_5.0+0x3428>  // b.pmore
   14810:	cmp	x19, x21
   14814:	b.eq	15f70 <lzma_mode_is_supported@@XZ_5.0+0x4b70>  // b.none
   14818:	ldrb	w0, [x22, x19]
   1481c:	lsl	w24, w24, #8
   14820:	add	x19, x19, #0x1
   14824:	orr	w25, w0, w25, lsl #8
   14828:	ubfiz	x2, x26, #1, #32
   1482c:	lsr	w0, w24, #11
   14830:	lsl	w26, w26, #1
   14834:	ldrh	w1, [x5, x2]
   14838:	mul	w0, w0, w1
   1483c:	cmp	w0, w25
   14840:	b.ls	156e8 <lzma_mode_is_supported@@XZ_5.0+0x42e8>  // b.plast
   14844:	mov	w4, #0x800                 	// #2048
   14848:	sub	w4, w4, w1
   1484c:	mov	w24, w0
   14850:	add	w1, w1, w4, lsr #5
   14854:	strh	w1, [x5, x2]
   14858:	mov	w0, #0xffffff              	// #16777215
   1485c:	cmp	w24, w0
   14860:	b.hi	1487c <lzma_mode_is_supported@@XZ_5.0+0x347c>  // b.pmore
   14864:	cmp	x19, x21
   14868:	b.eq	15e94 <lzma_mode_is_supported@@XZ_5.0+0x4a94>  // b.none
   1486c:	ldrb	w0, [x22, x19]
   14870:	lsl	w24, w24, #8
   14874:	add	x19, x19, #0x1
   14878:	orr	w25, w0, w25, lsl #8
   1487c:	ubfiz	x2, x26, #1, #32
   14880:	lsr	w0, w24, #11
   14884:	lsl	w26, w26, #1
   14888:	ldrh	w1, [x5, x2]
   1488c:	mul	w0, w0, w1
   14890:	cmp	w0, w25
   14894:	b.ls	156d0 <lzma_mode_is_supported@@XZ_5.0+0x42d0>  // b.plast
   14898:	mov	w4, #0x800                 	// #2048
   1489c:	sub	w4, w4, w1
   148a0:	mov	w24, w0
   148a4:	add	w1, w1, w4, lsr #5
   148a8:	strh	w1, [x5, x2]
   148ac:	b	13fa0 <lzma_mode_is_supported@@XZ_5.0+0x2ba0>
   148b0:	mov	w0, w10
   148b4:	mov	x27, x6
   148b8:	mov	w10, w26
   148bc:	mov	w1, w25
   148c0:	mov	w2, #0xffffff              	// #16777215
   148c4:	nop
   148c8:	cmp	w24, w2
   148cc:	b.hi	148e8 <lzma_mode_is_supported@@XZ_5.0+0x34e8>  // b.pmore
   148d0:	cmp	x19, x21
   148d4:	b.eq	15a48 <lzma_mode_is_supported@@XZ_5.0+0x4648>  // b.none
   148d8:	ldrb	w4, [x22, x19]
   148dc:	lsl	w24, w24, #8
   148e0:	add	x19, x19, #0x1
   148e4:	orr	w1, w4, w1, lsl #8
   148e8:	lsr	w24, w24, #1
   148ec:	subs	w12, w12, #0x1
   148f0:	sub	w1, w1, w24
   148f4:	asr	w4, w1, #31
   148f8:	add	w0, w4, w0, lsl #1
   148fc:	and	w4, w24, w4
   14900:	add	w0, w0, #0x1
   14904:	add	w1, w4, w1
   14908:	b.ne	148c8 <lzma_mode_is_supported@@XZ_5.0+0x34c8>  // b.any
   1490c:	mov	w25, w1
   14910:	lsl	w10, w0, #4
   14914:	mov	w26, #0x1                   	// #1
   14918:	mov	w0, #0xffffff              	// #16777215
   1491c:	cmp	w24, w0
   14920:	b.hi	1493c <lzma_mode_is_supported@@XZ_5.0+0x353c>  // b.pmore
   14924:	cmp	x19, x21
   14928:	b.eq	163a4 <lzma_mode_is_supported@@XZ_5.0+0x4fa4>  // b.none
   1492c:	ldrb	w0, [x22, x19]
   14930:	lsl	w24, w24, #8
   14934:	add	x19, x19, #0x1
   14938:	orr	w25, w0, w25, lsl #8
   1493c:	add	x2, x28, w26, uxtw #1
   14940:	lsr	w0, w24, #11
   14944:	add	x2, x2, #0x6, lsl #12
   14948:	lsl	w26, w26, #1
   1494c:	ldrh	w1, [x2, #1604]
   14950:	mul	w0, w0, w1
   14954:	cmp	w0, w25
   14958:	b.ls	15bac <lzma_mode_is_supported@@XZ_5.0+0x47ac>  // b.plast
   1495c:	mov	w4, #0x800                 	// #2048
   14960:	sub	w4, w4, w1
   14964:	mov	w24, w0
   14968:	add	w1, w1, w4, lsr #5
   1496c:	strh	w1, [x2, #1604]
   14970:	mov	w0, #0xffffff              	// #16777215
   14974:	cmp	w24, w0
   14978:	b.hi	14994 <lzma_mode_is_supported@@XZ_5.0+0x3594>  // b.pmore
   1497c:	cmp	x19, x21
   14980:	b.eq	1638c <lzma_mode_is_supported@@XZ_5.0+0x4f8c>  // b.none
   14984:	ldrb	w0, [x22, x19]
   14988:	lsl	w24, w24, #8
   1498c:	add	x19, x19, #0x1
   14990:	orr	w25, w0, w25, lsl #8
   14994:	add	x2, x28, w26, uxtw #1
   14998:	lsr	w0, w24, #11
   1499c:	add	x2, x2, #0x6, lsl #12
   149a0:	lsl	w26, w26, #1
   149a4:	ldrh	w1, [x2, #1604]
   149a8:	mul	w0, w0, w1
   149ac:	cmp	w0, w25
   149b0:	b.ls	15b00 <lzma_mode_is_supported@@XZ_5.0+0x4700>  // b.plast
   149b4:	mov	w4, #0x800                 	// #2048
   149b8:	sub	w4, w4, w1
   149bc:	mov	w24, w0
   149c0:	add	w1, w1, w4, lsr #5
   149c4:	strh	w1, [x2, #1604]
   149c8:	mov	w0, #0xffffff              	// #16777215
   149cc:	cmp	w24, w0
   149d0:	b.hi	149ec <lzma_mode_is_supported@@XZ_5.0+0x35ec>  // b.pmore
   149d4:	cmp	x19, x21
   149d8:	b.eq	1631c <lzma_mode_is_supported@@XZ_5.0+0x4f1c>  // b.none
   149dc:	ldrb	w0, [x22, x19]
   149e0:	lsl	w24, w24, #8
   149e4:	add	x19, x19, #0x1
   149e8:	orr	w25, w0, w25, lsl #8
   149ec:	add	x2, x28, w26, uxtw #1
   149f0:	lsr	w0, w24, #11
   149f4:	add	x2, x2, #0x6, lsl #12
   149f8:	lsl	w26, w26, #1
   149fc:	ldrh	w1, [x2, #1604]
   14a00:	mul	w0, w0, w1
   14a04:	cmp	w0, w25
   14a08:	b.ls	15a6c <lzma_mode_is_supported@@XZ_5.0+0x466c>  // b.plast
   14a0c:	mov	w4, #0x800                 	// #2048
   14a10:	sub	w4, w4, w1
   14a14:	mov	w24, w0
   14a18:	add	w1, w1, w4, lsr #5
   14a1c:	strh	w1, [x2, #1604]
   14a20:	b	14404 <lzma_mode_is_supported@@XZ_5.0+0x3004>
   14a24:	mov	w1, w18
   14a28:	mov	x27, x6
   14a2c:	b	13e4c <lzma_mode_is_supported@@XZ_5.0+0x2a4c>
   14a30:	mov	x27, x6
   14a34:	b	14500 <lzma_mode_is_supported@@XZ_5.0+0x3100>
   14a38:	mov	x27, x6
   14a3c:	mov	w0, #0xffffff              	// #16777215
   14a40:	cmp	w24, w0
   14a44:	b.hi	14a60 <lzma_mode_is_supported@@XZ_5.0+0x3660>  // b.pmore
   14a48:	cmp	x19, x21
   14a4c:	b.eq	16208 <lzma_mode_is_supported@@XZ_5.0+0x4e08>  // b.none
   14a50:	ldrb	w0, [x22, x19]
   14a54:	lsl	w24, w24, #8
   14a58:	add	x19, x19, #0x1
   14a5c:	orr	w25, w0, w25, lsl #8
   14a60:	mov	w2, w26
   14a64:	lsr	w4, w24, #11
   14a68:	add	x2, x2, w1, uxtw #3
   14a6c:	lsl	w26, w26, #1
   14a70:	add	x2, x28, x2, lsl #1
   14a74:	add	x2, x2, #0x6, lsl #12
   14a78:	ldrh	w0, [x2, #2924]
   14a7c:	mul	w4, w4, w0
   14a80:	cmp	w4, w25
   14a84:	b.ls	15d74 <lzma_mode_is_supported@@XZ_5.0+0x4974>  // b.plast
   14a88:	mov	w11, #0x800                 	// #2048
   14a8c:	sub	w11, w11, w0
   14a90:	mov	w24, w4
   14a94:	add	w0, w0, w11, lsr #5
   14a98:	strh	w0, [x2, #2924]
   14a9c:	mov	w0, #0xffffff              	// #16777215
   14aa0:	cmp	w24, w0
   14aa4:	b.hi	14ac0 <lzma_mode_is_supported@@XZ_5.0+0x36c0>  // b.pmore
   14aa8:	cmp	x19, x21
   14aac:	b.eq	16220 <lzma_mode_is_supported@@XZ_5.0+0x4e20>  // b.none
   14ab0:	ldrb	w0, [x22, x19]
   14ab4:	lsl	w24, w24, #8
   14ab8:	add	x19, x19, #0x1
   14abc:	orr	w25, w0, w25, lsl #8
   14ac0:	mov	w2, w26
   14ac4:	lsr	w4, w24, #11
   14ac8:	add	x2, x2, w1, uxtw #3
   14acc:	lsl	w26, w26, #1
   14ad0:	add	x2, x28, x2, lsl #1
   14ad4:	add	x2, x2, #0x6, lsl #12
   14ad8:	ldrh	w0, [x2, #2924]
   14adc:	mul	w4, w4, w0
   14ae0:	cmp	w4, w25
   14ae4:	b.ls	15c8c <lzma_mode_is_supported@@XZ_5.0+0x488c>  // b.plast
   14ae8:	mov	w11, #0x800                 	// #2048
   14aec:	sub	w11, w11, w0
   14af0:	mov	w24, w4
   14af4:	add	w0, w0, w11, lsr #5
   14af8:	strh	w0, [x2, #2924]
   14afc:	mov	w0, #0xffffff              	// #16777215
   14b00:	cmp	w24, w0
   14b04:	b.hi	14b20 <lzma_mode_is_supported@@XZ_5.0+0x3720>  // b.pmore
   14b08:	cmp	x19, x21
   14b0c:	b.eq	162a4 <lzma_mode_is_supported@@XZ_5.0+0x4ea4>  // b.none
   14b10:	ldrb	w0, [x22, x19]
   14b14:	lsl	w24, w24, #8
   14b18:	add	x19, x19, #0x1
   14b1c:	orr	w25, w0, w25, lsl #8
   14b20:	mov	w0, w26
   14b24:	lsr	w2, w24, #11
   14b28:	add	x0, x0, w1, uxtw #3
   14b2c:	lsl	w26, w26, #1
   14b30:	add	x0, x28, x0, lsl #1
   14b34:	add	x1, x0, #0x6, lsl #12
   14b38:	ldrh	w0, [x1, #2924]
   14b3c:	mul	w2, w2, w0
   14b40:	cmp	w2, w25
   14b44:	b.ls	15b1c <lzma_mode_is_supported@@XZ_5.0+0x471c>  // b.plast
   14b48:	mov	w4, #0x800                 	// #2048
   14b4c:	sub	w4, w4, w0
   14b50:	mov	w24, w2
   14b54:	add	w0, w0, w4, lsr #5
   14b58:	and	w0, w0, #0xffff
   14b5c:	add	w9, w26, #0x2
   14b60:	mov	w2, w10
   14b64:	strh	w0, [x1, #2924]
   14b68:	b	141c8 <lzma_mode_is_supported@@XZ_5.0+0x2dc8>
   14b6c:	mov	x27, x6
   14b70:	b	14a9c <lzma_mode_is_supported@@XZ_5.0+0x369c>
   14b74:	mov	x27, x6
   14b78:	mov	w0, #0xffffff              	// #16777215
   14b7c:	cmp	w24, w0
   14b80:	b.hi	14b9c <lzma_mode_is_supported@@XZ_5.0+0x379c>  // b.pmore
   14b84:	cmp	x19, x21
   14b88:	b.eq	16374 <lzma_mode_is_supported@@XZ_5.0+0x4f74>  // b.none
   14b8c:	ldrb	w0, [x22, x19]
   14b90:	lsl	w24, w24, #8
   14b94:	add	x19, x19, #0x1
   14b98:	orr	w25, w0, w25, lsl #8
   14b9c:	add	x2, x28, w26, uxtw #1
   14ba0:	lsr	w0, w24, #11
   14ba4:	add	x2, x2, #0x6, lsl #12
   14ba8:	lsl	w26, w26, #1
   14bac:	ldrh	w1, [x2, #2152]
   14bb0:	mul	w0, w0, w1
   14bb4:	cmp	w0, w25
   14bb8:	b.ls	15b48 <lzma_mode_is_supported@@XZ_5.0+0x4748>  // b.plast
   14bbc:	mov	w4, #0x800                 	// #2048
   14bc0:	sub	w4, w4, w1
   14bc4:	mov	w24, w0
   14bc8:	add	w1, w1, w4, lsr #5
   14bcc:	strh	w1, [x2, #2152]
   14bd0:	mov	w0, #0xffffff              	// #16777215
   14bd4:	cmp	w24, w0
   14bd8:	b.hi	14bf4 <lzma_mode_is_supported@@XZ_5.0+0x37f4>  // b.pmore
   14bdc:	cmp	x19, x21
   14be0:	b.eq	16028 <lzma_mode_is_supported@@XZ_5.0+0x4c28>  // b.none
   14be4:	ldrb	w0, [x22, x19]
   14be8:	lsl	w24, w24, #8
   14bec:	add	x19, x19, #0x1
   14bf0:	orr	w25, w0, w25, lsl #8
   14bf4:	add	x2, x28, w26, uxtw #1
   14bf8:	lsr	w0, w24, #11
   14bfc:	add	x2, x2, #0x6, lsl #12
   14c00:	lsl	w26, w26, #1
   14c04:	ldrh	w1, [x2, #2152]
   14c08:	mul	w0, w0, w1
   14c0c:	cmp	w0, w25
   14c10:	b.ls	159f8 <lzma_mode_is_supported@@XZ_5.0+0x45f8>  // b.plast
   14c14:	mov	w4, #0x800                 	// #2048
   14c18:	sub	w4, w4, w1
   14c1c:	mov	w24, w0
   14c20:	add	w1, w1, w4, lsr #5
   14c24:	strh	w1, [x2, #2152]
   14c28:	mov	w0, #0xffffff              	// #16777215
   14c2c:	cmp	w24, w0
   14c30:	b.hi	14c4c <lzma_mode_is_supported@@XZ_5.0+0x384c>  // b.pmore
   14c34:	cmp	x19, x21
   14c38:	b.eq	16040 <lzma_mode_is_supported@@XZ_5.0+0x4c40>  // b.none
   14c3c:	ldrb	w0, [x22, x19]
   14c40:	lsl	w24, w24, #8
   14c44:	add	x19, x19, #0x1
   14c48:	orr	w25, w0, w25, lsl #8
   14c4c:	add	x2, x28, w26, uxtw #1
   14c50:	lsr	w0, w24, #11
   14c54:	add	x2, x2, #0x6, lsl #12
   14c58:	lsl	w26, w26, #1
   14c5c:	ldrh	w1, [x2, #2152]
   14c60:	mul	w0, w0, w1
   14c64:	cmp	w0, w25
   14c68:	b.ls	15980 <lzma_mode_is_supported@@XZ_5.0+0x4580>  // b.plast
   14c6c:	mov	w4, #0x800                 	// #2048
   14c70:	sub	w4, w4, w1
   14c74:	mov	w24, w0
   14c78:	add	w1, w1, w4, lsr #5
   14c7c:	strh	w1, [x2, #2152]
   14c80:	mov	w0, #0xffffff              	// #16777215
   14c84:	cmp	w24, w0
   14c88:	b.hi	14ca4 <lzma_mode_is_supported@@XZ_5.0+0x38a4>  // b.pmore
   14c8c:	cmp	x19, x21
   14c90:	b.eq	160d4 <lzma_mode_is_supported@@XZ_5.0+0x4cd4>  // b.none
   14c94:	ldrb	w0, [x22, x19]
   14c98:	lsl	w24, w24, #8
   14c9c:	add	x19, x19, #0x1
   14ca0:	orr	w25, w0, w25, lsl #8
   14ca4:	add	x2, x28, w26, uxtw #1
   14ca8:	lsr	w0, w24, #11
   14cac:	add	x2, x2, #0x6, lsl #12
   14cb0:	lsl	w26, w26, #1
   14cb4:	ldrh	w1, [x2, #2152]
   14cb8:	mul	w0, w0, w1
   14cbc:	cmp	w0, w25
   14cc0:	b.ls	15950 <lzma_mode_is_supported@@XZ_5.0+0x4550>  // b.plast
   14cc4:	mov	w4, #0x800                 	// #2048
   14cc8:	sub	w4, w4, w1
   14ccc:	mov	w24, w0
   14cd0:	add	w1, w1, w4, lsr #5
   14cd4:	strh	w1, [x2, #2152]
   14cd8:	mov	w0, #0xffffff              	// #16777215
   14cdc:	cmp	w24, w0
   14ce0:	b.hi	14cfc <lzma_mode_is_supported@@XZ_5.0+0x38fc>  // b.pmore
   14ce4:	cmp	x19, x21
   14ce8:	b.eq	160bc <lzma_mode_is_supported@@XZ_5.0+0x4cbc>  // b.none
   14cec:	ldrb	w0, [x22, x19]
   14cf0:	lsl	w24, w24, #8
   14cf4:	add	x19, x19, #0x1
   14cf8:	orr	w25, w0, w25, lsl #8
   14cfc:	add	x2, x28, w26, uxtw #1
   14d00:	lsr	w1, w24, #11
   14d04:	add	x2, x2, #0x6, lsl #12
   14d08:	lsl	w9, w26, #1
   14d0c:	ldrh	w0, [x2, #2152]
   14d10:	mul	w1, w1, w0
   14d14:	cmp	w1, w25
   14d18:	b.ls	15920 <lzma_mode_is_supported@@XZ_5.0+0x4520>  // b.plast
   14d1c:	mov	w4, #0x800                 	// #2048
   14d20:	sub	w4, w4, w0
   14d24:	mov	w24, w1
   14d28:	add	w0, w0, w4, lsr #5
   14d2c:	and	w0, w0, #0xffff
   14d30:	sub	w9, w9, #0xee
   14d34:	strh	w0, [x2, #2152]
   14d38:	b	1478c <lzma_mode_is_supported@@XZ_5.0+0x338c>
   14d3c:	mov	x27, x6
   14d40:	b	14bd0 <lzma_mode_is_supported@@XZ_5.0+0x37d0>
   14d44:	mov	x27, x6
   14d48:	mov	w0, #0xffffff              	// #16777215
   14d4c:	cmp	w24, w0
   14d50:	b.hi	14d6c <lzma_mode_is_supported@@XZ_5.0+0x396c>  // b.pmore
   14d54:	cmp	x19, x21
   14d58:	b.eq	1643c <lzma_mode_is_supported@@XZ_5.0+0x503c>  // b.none
   14d5c:	ldrb	w0, [x22, x19]
   14d60:	lsl	w24, w24, #8
   14d64:	add	x19, x19, #0x1
   14d68:	orr	w25, w0, w25, lsl #8
   14d6c:	ldr	w11, [sp, #96]
   14d70:	mov	w0, w1
   14d74:	lsr	w2, w24, #11
   14d78:	add	x0, x0, w11, uxtw #4
   14d7c:	add	x0, x28, x0, lsl #1
   14d80:	add	x4, x0, #0x6, lsl #12
   14d84:	ldrh	w0, [x4, #480]
   14d88:	mul	w2, w2, w0
   14d8c:	cmp	w2, w25
   14d90:	b.ls	15e6c <lzma_mode_is_supported@@XZ_5.0+0x4a6c>  // b.plast
   14d94:	mov	w1, #0x800                 	// #2048
   14d98:	sub	w1, w1, w0
   14d9c:	mov	w24, w2
   14da0:	cmp	w11, #0x6
   14da4:	add	w0, w0, w1, lsr #5
   14da8:	strh	w0, [x4, #480]
   14dac:	b.ls	1601c <lzma_mode_is_supported@@XZ_5.0+0x4c1c>  // b.plast
   14db0:	mov	w0, #0xb                   	// #11
   14db4:	str	w0, [sp, #96]
   14db8:	mov	w1, w10
   14dbc:	sub	x0, x27, #0x1
   14dc0:	cmp	x27, x1
   14dc4:	add	x0, x8, x0
   14dc8:	csel	x2, x15, xzr, ls  // ls = plast
   14dcc:	cmp	x13, x27
   14dd0:	sub	x1, x2, x1
   14dd4:	ldrb	w0, [x0, x1]
   14dd8:	b.ne	1386c <lzma_mode_is_supported@@XZ_5.0+0x246c>  // b.any
   14ddc:	mov	w1, #0x32                  	// #50
   14de0:	mov	x11, x13
   14de4:	mov	w0, #0x0                   	// #0
   14de8:	ldr	x7, [x28, #28312]
   14dec:	str	w1, [x20, #11936]
   14df0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   14df4:	mov	x27, x6
   14df8:	mov	w0, #0xffffff              	// #16777215
   14dfc:	cmp	w24, w0
   14e00:	b.hi	14e1c <lzma_mode_is_supported@@XZ_5.0+0x3a1c>  // b.pmore
   14e04:	cmp	x19, x21
   14e08:	b.eq	16454 <lzma_mode_is_supported@@XZ_5.0+0x5054>  // b.none
   14e0c:	ldrb	w0, [x22, x19]
   14e10:	lsl	w24, w24, #8
   14e14:	add	x19, x19, #0x1
   14e18:	orr	w25, w0, w25, lsl #8
   14e1c:	ldr	x0, [sp, #96]
   14e20:	lsr	w2, w24, #11
   14e24:	add	x4, x28, w0, uxtw #1
   14e28:	add	x4, x4, #0x6, lsl #12
   14e2c:	ldrh	w0, [x4, #432]
   14e30:	mul	w2, w2, w0
   14e34:	cmp	w2, w25
   14e38:	b.ls	15eac <lzma_mode_is_supported@@XZ_5.0+0x4aac>  // b.plast
   14e3c:	mov	w16, #0x800                 	// #2048
   14e40:	sub	w16, w16, w0
   14e44:	mov	w24, w2
   14e48:	mov	w11, w10
   14e4c:	add	w0, w0, w16, lsr #5
   14e50:	ldr	w10, [sp, #104]
   14e54:	str	w11, [sp, #104]
   14e58:	strh	w0, [x4, #432]
   14e5c:	ldr	w0, [sp, #96]
   14e60:	mov	w26, #0x1                   	// #1
   14e64:	cmp	w0, #0x6
   14e68:	b.ls	15c0c <lzma_mode_is_supported@@XZ_5.0+0x480c>  // b.plast
   14e6c:	mov	w0, #0xb                   	// #11
   14e70:	str	w0, [sp, #96]
   14e74:	mov	w0, #0xffffff              	// #16777215
   14e78:	cmp	w24, w0
   14e7c:	b.hi	14e98 <lzma_mode_is_supported@@XZ_5.0+0x3a98>  // b.pmore
   14e80:	cmp	x19, x21
   14e84:	b.eq	1646c <lzma_mode_is_supported@@XZ_5.0+0x506c>  // b.none
   14e88:	ldrb	w0, [x22, x19]
   14e8c:	lsl	w24, w24, #8
   14e90:	add	x19, x19, #0x1
   14e94:	orr	w25, w0, w25, lsl #8
   14e98:	add	x4, x28, #0x6, lsl #12
   14e9c:	lsr	w0, w24, #11
   14ea0:	ldrh	w2, [x4, #2664]
   14ea4:	mul	w0, w0, w2
   14ea8:	cmp	w0, w25
   14eac:	b.ls	15b34 <lzma_mode_is_supported@@XZ_5.0+0x4734>  // b.plast
   14eb0:	mov	w11, #0x800                 	// #2048
   14eb4:	sub	w11, w11, w2
   14eb8:	mov	w24, w0
   14ebc:	add	w2, w2, w11, lsr #5
   14ec0:	strh	w2, [x4, #2664]
   14ec4:	b	142d0 <lzma_mode_is_supported@@XZ_5.0+0x2ed0>
   14ec8:	mov	x27, x6
   14ecc:	b	13d6c <lzma_mode_is_supported@@XZ_5.0+0x296c>
   14ed0:	mov	x27, x6
   14ed4:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x3208>
   14ed8:	mov	x27, x6
   14edc:	b	14660 <lzma_mode_is_supported@@XZ_5.0+0x3260>
   14ee0:	mov	x27, x6
   14ee4:	b	146b8 <lzma_mode_is_supported@@XZ_5.0+0x32b8>
   14ee8:	mov	w2, w10
   14eec:	mov	x27, x6
   14ef0:	b	141c8 <lzma_mode_is_supported@@XZ_5.0+0x2dc8>
   14ef4:	mov	x27, x6
   14ef8:	b	14558 <lzma_mode_is_supported@@XZ_5.0+0x3158>
   14efc:	mov	x27, x6
   14f00:	b	145b0 <lzma_mode_is_supported@@XZ_5.0+0x31b0>
   14f04:	mov	x27, x6
   14f08:	b	14390 <lzma_mode_is_supported@@XZ_5.0+0x2f90>
   14f0c:	mov	x27, x6
   14f10:	mov	w0, #0xffffff              	// #16777215
   14f14:	cmp	w24, w0
   14f18:	b.hi	14f34 <lzma_mode_is_supported@@XZ_5.0+0x3b34>  // b.pmore
   14f1c:	cmp	x19, x21
   14f20:	b.eq	16334 <lzma_mode_is_supported@@XZ_5.0+0x4f34>  // b.none
   14f24:	ldrb	w0, [x22, x19]
   14f28:	lsl	w24, w24, #8
   14f2c:	add	x19, x19, #0x1
   14f30:	orr	w25, w0, w25, lsl #8
   14f34:	add	x4, x28, #0x6, lsl #12
   14f38:	lsr	w2, w24, #11
   14f3c:	ldrh	w0, [x4, #2666]
   14f40:	mul	w2, w2, w0
   14f44:	cmp	w2, w25
   14f48:	b.ls	15c60 <lzma_mode_is_supported@@XZ_5.0+0x4860>  // b.plast
   14f4c:	mov	w11, #0x800                 	// #2048
   14f50:	sub	w11, w11, w0
   14f54:	mov	w24, w2
   14f58:	add	w0, w0, w11, lsr #5
   14f5c:	strh	w0, [x4, #2666]
   14f60:	b	14a3c <lzma_mode_is_supported@@XZ_5.0+0x363c>
   14f64:	mov	x27, x6
   14f68:	b	14330 <lzma_mode_is_supported@@XZ_5.0+0x2f30>
   14f6c:	mov	x27, x6
   14f70:	b	14afc <lzma_mode_is_supported@@XZ_5.0+0x36fc>
   14f74:	mov	x27, x6
   14f78:	mov	w0, #0xffffff              	// #16777215
   14f7c:	cmp	w24, w0
   14f80:	b.hi	14f9c <lzma_mode_is_supported@@XZ_5.0+0x3b9c>  // b.pmore
   14f84:	cmp	x19, x21
   14f88:	b.eq	1634c <lzma_mode_is_supported@@XZ_5.0+0x4f4c>  // b.none
   14f8c:	ldrb	w0, [x22, x19]
   14f90:	lsl	w24, w24, #8
   14f94:	add	x19, x19, #0x1
   14f98:	orr	w25, w0, w25, lsl #8
   14f9c:	add	x2, x28, w26, uxtw #1
   14fa0:	lsr	w0, w24, #11
   14fa4:	add	x2, x2, #0x6, lsl #12
   14fa8:	lsl	w26, w26, #1
   14fac:	ldrh	w1, [x2, #3180]
   14fb0:	mul	w0, w0, w1
   14fb4:	cmp	w0, w25
   14fb8:	b.ls	15d8c <lzma_mode_is_supported@@XZ_5.0+0x498c>  // b.plast
   14fbc:	mov	w4, #0x800                 	// #2048
   14fc0:	sub	w4, w4, w1
   14fc4:	mov	w24, w0
   14fc8:	add	w1, w1, w4, lsr #5
   14fcc:	strh	w1, [x2, #3180]
   14fd0:	b	144a8 <lzma_mode_is_supported@@XZ_5.0+0x30a8>
   14fd4:	mov	x27, x6
   14fd8:	b	14048 <lzma_mode_is_supported@@XZ_5.0+0x2c48>
   14fdc:	mov	x27, x6
   14fe0:	mov	w0, #0xffffff              	// #16777215
   14fe4:	cmp	w24, w0
   14fe8:	b.hi	15004 <lzma_mode_is_supported@@XZ_5.0+0x3c04>  // b.pmore
   14fec:	cmp	x19, x21
   14ff0:	b.eq	16618 <lzma_mode_is_supported@@XZ_5.0+0x5218>  // b.none
   14ff4:	ldrb	w0, [x22, x19]
   14ff8:	lsl	w24, w24, #8
   14ffc:	add	x19, x19, #0x1
   15000:	orr	w25, w0, w25, lsl #8
   15004:	ldr	x0, [sp, #96]
   15008:	lsr	w2, w24, #11
   1500c:	add	x4, x28, w0, uxtw #1
   15010:	add	x4, x4, #0x6, lsl #12
   15014:	ldrh	w0, [x4, #408]
   15018:	mul	w2, w2, w0
   1501c:	cmp	w2, w25
   15020:	b.ls	15e80 <lzma_mode_is_supported@@XZ_5.0+0x4a80>  // b.plast
   15024:	mov	w11, #0x800                 	// #2048
   15028:	sub	w11, w11, w0
   1502c:	mov	w24, w2
   15030:	add	w0, w0, w11, lsr #5
   15034:	strh	w0, [x4, #408]
   15038:	b	14d48 <lzma_mode_is_supported@@XZ_5.0+0x3948>
   1503c:	mov	x27, x6
   15040:	b	14db8 <lzma_mode_is_supported@@XZ_5.0+0x39b8>
   15044:	mov	x11, x6
   15048:	b	14478 <lzma_mode_is_supported@@XZ_5.0+0x3078>
   1504c:	mov	x27, x6
   15050:	mov	w0, #0xffffff              	// #16777215
   15054:	cmp	w24, w0
   15058:	b.hi	15074 <lzma_mode_is_supported@@XZ_5.0+0x3c74>  // b.pmore
   1505c:	cmp	x19, x21
   15060:	b.eq	162d4 <lzma_mode_is_supported@@XZ_5.0+0x4ed4>  // b.none
   15064:	ldrb	w0, [x22, x19]
   15068:	lsl	w24, w24, #8
   1506c:	add	x19, x19, #0x1
   15070:	orr	w25, w0, w25, lsl #8
   15074:	ldr	x0, [sp, #96]
   15078:	lsr	w2, w24, #11
   1507c:	add	x4, x28, w0, uxtw #1
   15080:	add	x4, x4, #0x6, lsl #12
   15084:	ldrh	w0, [x4, #456]
   15088:	mul	w2, w2, w0
   1508c:	cmp	w2, w25
   15090:	b.ls	15e40 <lzma_mode_is_supported@@XZ_5.0+0x4a40>  // b.plast
   15094:	mov	w16, #0x800                 	// #2048
   15098:	sub	w16, w16, w0
   1509c:	mov	w11, w10
   150a0:	mov	w24, w2
   150a4:	ldp	w2, w10, [sp, #104]
   150a8:	add	w0, w0, w16, lsr #5
   150ac:	stp	w11, w2, [sp, #104]
   150b0:	strh	w0, [x4, #456]
   150b4:	b	14e5c <lzma_mode_is_supported@@XZ_5.0+0x3a5c>
   150b8:	mov	x27, x6
   150bc:	b	14e74 <lzma_mode_is_supported@@XZ_5.0+0x3a74>
   150c0:	mov	x27, x6
   150c4:	b	14970 <lzma_mode_is_supported@@XZ_5.0+0x3570>
   150c8:	mov	x27, x6
   150cc:	b	149c8 <lzma_mode_is_supported@@XZ_5.0+0x35c8>
   150d0:	mov	x27, x6
   150d4:	b	14918 <lzma_mode_is_supported@@XZ_5.0+0x3518>
   150d8:	mov	x27, x6
   150dc:	b	13ff4 <lzma_mode_is_supported@@XZ_5.0+0x2bf4>
   150e0:	mov	w0, w10
   150e4:	mov	x27, x6
   150e8:	b	140e8 <lzma_mode_is_supported@@XZ_5.0+0x2ce8>
   150ec:	mov	x27, x6
   150f0:	mov	w0, #0xffffff              	// #16777215
   150f4:	cmp	w24, w0
   150f8:	b.hi	15114 <lzma_mode_is_supported@@XZ_5.0+0x3d14>  // b.pmore
   150fc:	cmp	x19, x21
   15100:	b.eq	163bc <lzma_mode_is_supported@@XZ_5.0+0x4fbc>  // b.none
   15104:	ldrb	w0, [x22, x19]
   15108:	lsl	w24, w24, #8
   1510c:	add	x19, x19, #0x1
   15110:	orr	w25, w0, w25, lsl #8
   15114:	mov	w0, w26
   15118:	lsr	w2, w24, #11
   1511c:	add	x0, x0, w1, uxtw #3
   15120:	lsl	w9, w26, #1
   15124:	add	x0, x28, x0, lsl #1
   15128:	add	x1, x0, #0x6, lsl #12
   1512c:	ldrh	w0, [x1, #1896]
   15130:	mul	w2, w2, w0
   15134:	cmp	w2, w25
   15138:	b.ls	15c30 <lzma_mode_is_supported@@XZ_5.0+0x4830>  // b.plast
   1513c:	mov	w4, #0x800                 	// #2048
   15140:	sub	w4, w4, w0
   15144:	mov	w24, w2
   15148:	add	w0, w0, w4, lsr #5
   1514c:	and	w0, w0, #0xffff
   15150:	add	w9, w9, #0x2
   15154:	strh	w0, [x1, #1896]
   15158:	b	1478c <lzma_mode_is_supported@@XZ_5.0+0x338c>
   1515c:	mov	x27, x6
   15160:	mov	w0, #0xffffff              	// #16777215
   15164:	cmp	w24, w0
   15168:	b.hi	15184 <lzma_mode_is_supported@@XZ_5.0+0x3d84>  // b.pmore
   1516c:	cmp	x19, x21
   15170:	b.eq	164e4 <lzma_mode_is_supported@@XZ_5.0+0x50e4>  // b.none
   15174:	ldrb	w0, [x22, x19]
   15178:	lsl	w24, w24, #8
   1517c:	add	x19, x19, #0x1
   15180:	orr	w25, w0, w25, lsl #8
   15184:	add	x2, x28, w26, uxtw #1
   15188:	lsr	w0, w24, #11
   1518c:	add	x2, x2, #0x6, lsl #12
   15190:	lsl	w26, w26, #1
   15194:	ldrh	w1, [x2, #2152]
   15198:	mul	w0, w0, w1
   1519c:	cmp	w0, w25
   151a0:	b.ls	15d44 <lzma_mode_is_supported@@XZ_5.0+0x4944>  // b.plast
   151a4:	mov	w4, #0x800                 	// #2048
   151a8:	sub	w4, w4, w1
   151ac:	mov	w24, w0
   151b0:	add	w1, w1, w4, lsr #5
   151b4:	strh	w1, [x2, #2152]
   151b8:	mov	w0, #0xffffff              	// #16777215
   151bc:	cmp	w24, w0
   151c0:	b.hi	151dc <lzma_mode_is_supported@@XZ_5.0+0x3ddc>  // b.pmore
   151c4:	cmp	x19, x21
   151c8:	b.eq	164fc <lzma_mode_is_supported@@XZ_5.0+0x50fc>  // b.none
   151cc:	ldrb	w0, [x22, x19]
   151d0:	lsl	w24, w24, #8
   151d4:	add	x19, x19, #0x1
   151d8:	orr	w25, w0, w25, lsl #8
   151dc:	add	x2, x28, w26, uxtw #1
   151e0:	lsr	w0, w24, #11
   151e4:	add	x2, x2, #0x6, lsl #12
   151e8:	lsl	w26, w26, #1
   151ec:	ldrh	w1, [x2, #2152]
   151f0:	mul	w0, w0, w1
   151f4:	cmp	w0, w25
   151f8:	b.ls	15c18 <lzma_mode_is_supported@@XZ_5.0+0x4818>  // b.plast
   151fc:	mov	w4, #0x800                 	// #2048
   15200:	sub	w4, w4, w1
   15204:	mov	w24, w0
   15208:	add	w1, w1, w4, lsr #5
   1520c:	strh	w1, [x2, #2152]
   15210:	b	14b78 <lzma_mode_is_supported@@XZ_5.0+0x3778>
   15214:	mov	x27, x6
   15218:	mov	w0, #0xffffff              	// #16777215
   1521c:	cmp	w24, w0
   15220:	b.hi	1523c <lzma_mode_is_supported@@XZ_5.0+0x3e3c>  // b.pmore
   15224:	cmp	x19, x21
   15228:	b.eq	162bc <lzma_mode_is_supported@@XZ_5.0+0x4ebc>  // b.none
   1522c:	ldrb	w0, [x22, x19]
   15230:	lsl	w24, w24, #8
   15234:	add	x19, x19, #0x1
   15238:	orr	w25, w0, w25, lsl #8
   1523c:	add	x2, x28, w26, uxtw #1
   15240:	lsr	w0, w24, #11
   15244:	add	x2, x2, #0x6, lsl #12
   15248:	lsl	w26, w26, #1
   1524c:	ldrh	w1, [x2, #2152]
   15250:	mul	w0, w0, w1
   15254:	cmp	w0, w25
   15258:	b.ls	15f04 <lzma_mode_is_supported@@XZ_5.0+0x4b04>  // b.plast
   1525c:	mov	w4, #0x800                 	// #2048
   15260:	sub	w4, w4, w1
   15264:	mov	w24, w0
   15268:	add	w1, w1, w4, lsr #5
   1526c:	strh	w1, [x2, #2152]
   15270:	b	15160 <lzma_mode_is_supported@@XZ_5.0+0x3d60>
   15274:	mov	x27, x6
   15278:	b	151b8 <lzma_mode_is_supported@@XZ_5.0+0x3db8>
   1527c:	mov	x27, x6
   15280:	mov	w0, #0xffffff              	// #16777215
   15284:	cmp	w24, w0
   15288:	b.hi	152a4 <lzma_mode_is_supported@@XZ_5.0+0x3ea4>  // b.pmore
   1528c:	cmp	x19, x21
   15290:	b.eq	162ec <lzma_mode_is_supported@@XZ_5.0+0x4eec>  // b.none
   15294:	ldrb	w0, [x22, x19]
   15298:	lsl	w24, w24, #8
   1529c:	add	x19, x19, #0x1
   152a0:	orr	w25, w0, w25, lsl #8
   152a4:	mov	w2, w26
   152a8:	lsr	w4, w24, #11
   152ac:	add	x2, x2, w1, uxtw #3
   152b0:	lsl	w26, w26, #1
   152b4:	add	x2, x28, x2, lsl #1
   152b8:	add	x2, x2, #0x6, lsl #12
   152bc:	ldrh	w0, [x2, #1896]
   152c0:	mul	w4, w4, w0
   152c4:	cmp	w4, w25
   152c8:	b.ls	15f1c <lzma_mode_is_supported@@XZ_5.0+0x4b1c>  // b.plast
   152cc:	mov	w11, #0x800                 	// #2048
   152d0:	sub	w11, w11, w0
   152d4:	mov	w24, w4
   152d8:	add	w0, w0, w11, lsr #5
   152dc:	strh	w0, [x2, #1896]
   152e0:	mov	w0, #0xffffff              	// #16777215
   152e4:	cmp	w24, w0
   152e8:	b.hi	15304 <lzma_mode_is_supported@@XZ_5.0+0x3f04>  // b.pmore
   152ec:	cmp	x19, x21
   152f0:	b.eq	163d4 <lzma_mode_is_supported@@XZ_5.0+0x4fd4>  // b.none
   152f4:	ldrb	w0, [x22, x19]
   152f8:	lsl	w24, w24, #8
   152fc:	add	x19, x19, #0x1
   15300:	orr	w25, w0, w25, lsl #8
   15304:	mov	w2, w26
   15308:	lsr	w4, w24, #11
   1530c:	add	x2, x2, w1, uxtw #3
   15310:	lsl	w26, w26, #1
   15314:	add	x2, x28, x2, lsl #1
   15318:	add	x2, x2, #0x6, lsl #12
   1531c:	ldrh	w0, [x2, #1896]
   15320:	mul	w4, w4, w0
   15324:	cmp	w4, w25
   15328:	b.ls	15d5c <lzma_mode_is_supported@@XZ_5.0+0x495c>  // b.plast
   1532c:	mov	w11, #0x800                 	// #2048
   15330:	sub	w11, w11, w0
   15334:	mov	w24, w4
   15338:	add	w0, w0, w11, lsr #5
   1533c:	strh	w0, [x2, #1896]
   15340:	b	150f0 <lzma_mode_is_supported@@XZ_5.0+0x3cf0>
   15344:	mov	x27, x6
   15348:	mov	w0, #0xffffff              	// #16777215
   1534c:	cmp	w24, w0
   15350:	b.hi	1536c <lzma_mode_is_supported@@XZ_5.0+0x3f6c>  // b.pmore
   15354:	cmp	x19, x21
   15358:	b.eq	161a8 <lzma_mode_is_supported@@XZ_5.0+0x4da8>  // b.none
   1535c:	ldrb	w0, [x22, x19]
   15360:	lsl	w24, w24, #8
   15364:	add	x19, x19, #0x1
   15368:	orr	w25, w0, w25, lsl #8
   1536c:	add	x4, x28, #0x6, lsl #12
   15370:	lsr	w2, w24, #11
   15374:	ldrh	w0, [x4, #1638]
   15378:	mul	w2, w2, w0
   1537c:	cmp	w2, w25
   15380:	b.ls	15ef0 <lzma_mode_is_supported@@XZ_5.0+0x4af0>  // b.plast
   15384:	mov	w11, #0x800                 	// #2048
   15388:	sub	w11, w11, w0
   1538c:	mov	w24, w2
   15390:	add	w0, w0, w11, lsr #5
   15394:	strh	w0, [x4, #1638]
   15398:	b	15280 <lzma_mode_is_supported@@XZ_5.0+0x3e80>
   1539c:	mov	x27, x6
   153a0:	b	152e0 <lzma_mode_is_supported@@XZ_5.0+0x3ee0>
   153a4:	mov	x27, x6
   153a8:	b	14cd8 <lzma_mode_is_supported@@XZ_5.0+0x38d8>
   153ac:	mov	x27, x6
   153b0:	b	147b0 <lzma_mode_is_supported@@XZ_5.0+0x33b0>
   153b4:	mov	x27, x6
   153b8:	b	14804 <lzma_mode_is_supported@@XZ_5.0+0x3404>
   153bc:	mov	x27, x6
   153c0:	b	14858 <lzma_mode_is_supported@@XZ_5.0+0x3458>
   153c4:	mov	x27, x6
   153c8:	b	14c28 <lzma_mode_is_supported@@XZ_5.0+0x3828>
   153cc:	mov	x27, x6
   153d0:	b	14c80 <lzma_mode_is_supported@@XZ_5.0+0x3880>
   153d4:	mov	x27, x6
   153d8:	mov	w0, #0xffffff              	// #16777215
   153dc:	cmp	w24, w0
   153e0:	b.hi	153fc <lzma_mode_is_supported@@XZ_5.0+0x3ffc>  // b.pmore
   153e4:	cmp	x19, x21
   153e8:	b.eq	165ac <lzma_mode_is_supported@@XZ_5.0+0x51ac>  // b.none
   153ec:	ldrb	w0, [x22, x19]
   153f0:	lsl	w24, w24, #8
   153f4:	add	x19, x19, #0x1
   153f8:	orr	w25, w0, w25, lsl #8
   153fc:	ldr	w16, [sp, #96]
   15400:	lsr	w2, w24, #11
   15404:	add	x4, x28, w16, uxtw #1
   15408:	add	x4, x4, #0x6, lsl #12
   1540c:	ldrh	w0, [x4, #384]
   15410:	mul	w2, w2, w0
   15414:	cmp	w2, w25
   15418:	b.ls	15bc8 <lzma_mode_is_supported@@XZ_5.0+0x47c8>  // b.plast
   1541c:	mov	w11, #0x800                 	// #2048
   15420:	sub	w11, w11, w0
   15424:	cmp	w16, #0x6
   15428:	mov	w24, w2
   1542c:	add	w0, w0, w11, lsr #5
   15430:	strh	w0, [x4, #384]
   15434:	ldr	w0, [sp, #108]
   15438:	str	w0, [sp, #116]
   1543c:	ldr	w0, [sp, #104]
   15440:	str	w0, [sp, #108]
   15444:	b.ls	16104 <lzma_mode_is_supported@@XZ_5.0+0x4d04>  // b.plast
   15448:	mov	w0, #0xa                   	// #10
   1544c:	mov	w26, #0x1                   	// #1
   15450:	str	w0, [sp, #96]
   15454:	str	w10, [sp, #104]
   15458:	mov	w0, #0xffffff              	// #16777215
   1545c:	cmp	w24, w0
   15460:	b.hi	1547c <lzma_mode_is_supported@@XZ_5.0+0x407c>  // b.pmore
   15464:	cmp	x19, x21
   15468:	b.eq	165c4 <lzma_mode_is_supported@@XZ_5.0+0x51c4>  // b.none
   1546c:	ldrb	w0, [x22, x19]
   15470:	lsl	w24, w24, #8
   15474:	add	x19, x19, #0x1
   15478:	orr	w25, w0, w25, lsl #8
   1547c:	add	x4, x28, #0x6, lsl #12
   15480:	lsr	w2, w24, #11
   15484:	ldrh	w0, [x4, #1636]
   15488:	mul	w2, w2, w0
   1548c:	cmp	w2, w25
   15490:	b.ls	15e14 <lzma_mode_is_supported@@XZ_5.0+0x4a14>  // b.plast
   15494:	mov	w11, #0x800                 	// #2048
   15498:	sub	w11, w11, w0
   1549c:	mov	w24, w2
   154a0:	add	w0, w0, w11, lsr #5
   154a4:	strh	w0, [x4, #1636]
   154a8:	mov	w0, #0xffffff              	// #16777215
   154ac:	cmp	w24, w0
   154b0:	b.hi	154cc <lzma_mode_is_supported@@XZ_5.0+0x40cc>  // b.pmore
   154b4:	cmp	x19, x21
   154b8:	b.eq	16514 <lzma_mode_is_supported@@XZ_5.0+0x5114>  // b.none
   154bc:	ldrb	w0, [x22, x19]
   154c0:	lsl	w24, w24, #8
   154c4:	add	x19, x19, #0x1
   154c8:	orr	w25, w0, w25, lsl #8
   154cc:	mov	w2, w26
   154d0:	lsr	w4, w24, #11
   154d4:	add	x2, x2, w1, uxtw #3
   154d8:	lsl	w26, w26, #1
   154dc:	add	x2, x28, x2, lsl #1
   154e0:	add	x2, x2, #0x6, lsl #12
   154e4:	ldrh	w0, [x2, #1640]
   154e8:	mul	w4, w4, w0
   154ec:	cmp	w4, w25
   154f0:	b.ls	15dfc <lzma_mode_is_supported@@XZ_5.0+0x49fc>  // b.plast
   154f4:	mov	w11, #0x800                 	// #2048
   154f8:	sub	w11, w11, w0
   154fc:	mov	w24, w4
   15500:	add	w0, w0, w11, lsr #5
   15504:	strh	w0, [x2, #1640]
   15508:	mov	w0, #0xffffff              	// #16777215
   1550c:	cmp	w24, w0
   15510:	b.hi	1552c <lzma_mode_is_supported@@XZ_5.0+0x412c>  // b.pmore
   15514:	cmp	x19, x21
   15518:	b.eq	164cc <lzma_mode_is_supported@@XZ_5.0+0x50cc>  // b.none
   1551c:	ldrb	w0, [x22, x19]
   15520:	lsl	w24, w24, #8
   15524:	add	x19, x19, #0x1
   15528:	orr	w25, w0, w25, lsl #8
   1552c:	mov	w2, w26
   15530:	lsr	w4, w24, #11
   15534:	add	x2, x2, w1, uxtw #3
   15538:	lsl	w26, w26, #1
   1553c:	add	x2, x28, x2, lsl #1
   15540:	add	x2, x2, #0x6, lsl #12
   15544:	ldrh	w0, [x2, #1640]
   15548:	mul	w4, w4, w0
   1554c:	cmp	w4, w25
   15550:	b.ls	15d2c <lzma_mode_is_supported@@XZ_5.0+0x492c>  // b.plast
   15554:	mov	w11, #0x800                 	// #2048
   15558:	sub	w11, w11, w0
   1555c:	mov	w24, w4
   15560:	add	w0, w0, w11, lsr #5
   15564:	strh	w0, [x2, #1640]
   15568:	b	14724 <lzma_mode_is_supported@@XZ_5.0+0x3324>
   1556c:	mov	x27, x6
   15570:	b	15458 <lzma_mode_is_supported@@XZ_5.0+0x4058>
   15574:	mov	x27, x6
   15578:	b	13cfc <lzma_mode_is_supported@@XZ_5.0+0x28fc>
   1557c:	mov	x27, x6
   15580:	b	13ddc <lzma_mode_is_supported@@XZ_5.0+0x29dc>
   15584:	mov	w1, w18
   15588:	mov	x27, x6
   1558c:	b	13f2c <lzma_mode_is_supported@@XZ_5.0+0x2b2c>
   15590:	mov	x27, x6
   15594:	b	13860 <lzma_mode_is_supported@@XZ_5.0+0x2460>
   15598:	mov	x27, x6
   1559c:	b	13ebc <lzma_mode_is_supported@@XZ_5.0+0x2abc>
   155a0:	mov	x27, x6
   155a4:	b	154a8 <lzma_mode_is_supported@@XZ_5.0+0x40a8>
   155a8:	mov	x27, x6
   155ac:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x4108>
   155b0:	cmp	x27, x2
   155b4:	add	x0, x8, x27
   155b8:	b.hi	1576c <lzma_mode_is_supported@@XZ_5.0+0x436c>  // b.pmore
   155bc:	sub	w1, w15, #0x1
   155c0:	sub	w4, w27, w10
   155c4:	add	w4, w4, w1
   155c8:	str	w4, [sp, #128]
   155cc:	sub	w2, w15, w4
   155d0:	cmp	w11, w2
   155d4:	add	x1, x8, w4, uxtw
   155d8:	b.ls	15718 <lzma_mode_is_supported@@XZ_5.0+0x4318>  // b.plast
   155dc:	stp	x2, x15, [sp, #136]
   155e0:	stp	x14, x13, [sp, #152]
   155e4:	stp	x8, x6, [sp, #168]
   155e8:	str	w10, [sp, #184]
   155ec:	str	x5, [sp, #192]
   155f0:	stp	w12, w18, [sp, #200]
   155f4:	str	x11, [sp, #208]
   155f8:	str	w9, [sp, #216]
   155fc:	stp	x7, x3, [sp, #224]
   15600:	bl	30b0 <memmove@plt>
   15604:	ldr	w4, [sp, #128]
   15608:	ldp	x2, x15, [sp, #136]
   1560c:	ldr	x11, [sp, #208]
   15610:	ldr	x8, [sp, #168]
   15614:	add	w11, w4, w11
   15618:	add	x27, x27, x2
   1561c:	sub	w2, w11, w15
   15620:	add	x0, x8, x27
   15624:	mov	x1, x8
   15628:	stp	x8, x2, [sp, #128]
   1562c:	bl	3090 <memcpy@plt>
   15630:	ldr	w10, [sp, #184]
   15634:	ldp	x8, x2, [sp, #128]
   15638:	ldp	w12, w18, [sp, #200]
   1563c:	ldr	w9, [sp, #216]
   15640:	ldp	x15, x14, [sp, #144]
   15644:	add	x11, x27, x2
   15648:	ldr	x13, [sp, #160]
   1564c:	ldr	x6, [sp, #176]
   15650:	ldr	x5, [sp, #192]
   15654:	ldp	x7, x3, [sp, #224]
   15658:	b	14220 <lzma_mode_is_supported@@XZ_5.0+0x2e20>
   1565c:	cmp	w25, #0x0
   15660:	mov	w0, #0xffffffff            	// #-1
   15664:	ldp	x25, x26, [sp, #64]
   15668:	str	w0, [x20, #11884]
   1566c:	mov	x1, #0x500000000           	// #21474836480
   15670:	mov	w0, #0x9                   	// #9
   15674:	csinc	w0, w0, wzr, ne  // ne = any
   15678:	str	x1, [x28, #28272]
   1567c:	b	137cc <lzma_mode_is_supported@@XZ_5.0+0x23cc>
   15680:	mov	w26, w10
   15684:	b	141bc <lzma_mode_is_supported@@XZ_5.0+0x2dbc>
   15688:	sub	w0, w0, w0, lsr #5
   1568c:	sub	w24, w24, w1
   15690:	and	w0, w0, #0xffff
   15694:	sub	w25, w25, w1
   15698:	add	w10, w10, #0x1
   1569c:	b	140a0 <lzma_mode_is_supported@@XZ_5.0+0x2ca0>
   156a0:	sub	w1, w1, w1, lsr #5
   156a4:	sub	w24, w24, w0
   156a8:	sub	w25, w25, w0
   156ac:	add	w26, w26, #0x1
   156b0:	strh	w1, [x5, x2]
   156b4:	b	14048 <lzma_mode_is_supported@@XZ_5.0+0x2c48>
   156b8:	sub	w1, w1, w1, lsr #5
   156bc:	sub	w24, w24, w0
   156c0:	sub	w25, w25, w0
   156c4:	add	w26, w26, #0x1
   156c8:	strh	w1, [x5, x2]
   156cc:	b	13ff4 <lzma_mode_is_supported@@XZ_5.0+0x2bf4>
   156d0:	sub	w1, w1, w1, lsr #5
   156d4:	sub	w24, w24, w0
   156d8:	sub	w25, w25, w0
   156dc:	add	w26, w26, #0x1
   156e0:	strh	w1, [x5, x2]
   156e4:	b	13fa0 <lzma_mode_is_supported@@XZ_5.0+0x2ba0>
   156e8:	sub	w1, w1, w1, lsr #5
   156ec:	sub	w24, w24, w0
   156f0:	sub	w25, w25, w0
   156f4:	add	w26, w26, #0x1
   156f8:	strh	w1, [x5, x2]
   156fc:	b	14858 <lzma_mode_is_supported@@XZ_5.0+0x3458>
   15700:	sub	w1, w1, w1, lsr #5
   15704:	sub	w24, w24, w0
   15708:	sub	w25, w25, w0
   1570c:	add	w26, w26, #0x1
   15710:	strh	w1, [x5, x2]
   15714:	b	14804 <lzma_mode_is_supported@@XZ_5.0+0x3404>
   15718:	mov	x2, x11
   1571c:	stp	x11, x14, [sp, #128]
   15720:	stp	x15, x13, [sp, #144]
   15724:	stp	x8, x6, [sp, #160]
   15728:	str	w10, [sp, #176]
   1572c:	str	x5, [sp, #184]
   15730:	str	w12, [sp, #192]
   15734:	stp	w18, w9, [sp, #200]
   15738:	stp	x7, x3, [sp, #208]
   1573c:	bl	30b0 <memmove@plt>
   15740:	ldp	x11, x14, [sp, #128]
   15744:	ldp	x15, x13, [sp, #144]
   15748:	ldr	x8, [sp, #160]
   1574c:	add	x11, x27, x11
   15750:	ldr	w10, [sp, #176]
   15754:	ldr	w12, [sp, #192]
   15758:	ldp	w18, w9, [sp, #200]
   1575c:	ldr	x6, [sp, #168]
   15760:	ldr	x5, [sp, #184]
   15764:	ldp	x7, x3, [sp, #208]
   15768:	b	14220 <lzma_mode_is_supported@@XZ_5.0+0x2e20>
   1576c:	sub	x1, x27, #0x1
   15770:	stp	x8, x11, [sp, #128]
   15774:	sub	x1, x1, x2
   15778:	add	x1, x8, x1
   1577c:	mov	x2, x11
   15780:	stp	x14, x15, [sp, #144]
   15784:	stp	x13, x6, [sp, #160]
   15788:	str	w10, [sp, #176]
   1578c:	str	x5, [sp, #184]
   15790:	str	w12, [sp, #192]
   15794:	stp	w18, w9, [sp, #200]
   15798:	stp	x7, x3, [sp, #208]
   1579c:	bl	3090 <memcpy@plt>
   157a0:	ldp	x8, x11, [sp, #128]
   157a4:	ldp	x14, x15, [sp, #144]
   157a8:	ldr	x13, [sp, #160]
   157ac:	add	x11, x27, x11
   157b0:	b	15750 <lzma_mode_is_supported@@XZ_5.0+0x4350>
   157b4:	cmp	w12, #0x4
   157b8:	b.eq	15824 <lzma_mode_is_supported@@XZ_5.0+0x4424>  // b.none
   157bc:	cmp	w12, #0x5
   157c0:	b.ne	165dc <lzma_mode_is_supported@@XZ_5.0+0x51dc>  // b.any
   157c4:	mov	w1, #0xffffff              	// #16777215
   157c8:	cmp	w24, w1
   157cc:	b.hi	157e8 <lzma_mode_is_supported@@XZ_5.0+0x43e8>  // b.pmore
   157d0:	cmp	x19, x21
   157d4:	b.eq	165fc <lzma_mode_is_supported@@XZ_5.0+0x51fc>  // b.none
   157d8:	ldrb	w1, [x22, x19]
   157dc:	lsl	w24, w24, #8
   157e0:	add	x19, x19, #0x1
   157e4:	orr	w25, w1, w25, lsl #8
   157e8:	ubfiz	x1, x26, #1, #32
   157ec:	lsr	w2, w24, #11
   157f0:	add	x4, x5, x1
   157f4:	lsl	w26, w26, #1
   157f8:	ldrh	w1, [x5, x1]
   157fc:	mul	w2, w2, w1
   15800:	cmp	w2, w25
   15804:	b.ls	1614c <lzma_mode_is_supported@@XZ_5.0+0x4d4c>  // b.plast
   15808:	mov	w10, #0x800                 	// #2048
   1580c:	sub	w10, w10, w1
   15810:	mov	w24, w2
   15814:	add	w1, w1, w10, lsr #5
   15818:	and	w1, w1, #0xffff
   1581c:	add	w18, w18, #0x1
   15820:	strh	w1, [x4]
   15824:	mov	w1, #0xffffff              	// #16777215
   15828:	cmp	w24, w1
   1582c:	b.hi	15848 <lzma_mode_is_supported@@XZ_5.0+0x4448>  // b.pmore
   15830:	cmp	x19, x21
   15834:	b.eq	16644 <lzma_mode_is_supported@@XZ_5.0+0x5244>  // b.none
   15838:	ldrb	w1, [x22, x19]
   1583c:	lsl	w24, w24, #8
   15840:	add	x19, x19, #0x1
   15844:	orr	w25, w1, w25, lsl #8
   15848:	ubfiz	x1, x26, #1, #32
   1584c:	lsr	w2, w24, #11
   15850:	add	x4, x5, x1
   15854:	lsl	w26, w26, #1
   15858:	ldrh	w1, [x5, x1]
   1585c:	mul	w2, w2, w1
   15860:	cmp	w2, w25
   15864:	b.ls	15f4c <lzma_mode_is_supported@@XZ_5.0+0x4b4c>  // b.plast
   15868:	mov	w10, #0x800                 	// #2048
   1586c:	sub	w10, w10, w1
   15870:	mov	w24, w2
   15874:	add	w1, w1, w10, lsr #5
   15878:	and	w1, w1, #0xffff
   1587c:	add	w18, w18, #0x1
   15880:	strh	w1, [x4]
   15884:	mov	w1, #0xffffff              	// #16777215
   15888:	cmp	w24, w1
   1588c:	b.hi	158a8 <lzma_mode_is_supported@@XZ_5.0+0x44a8>  // b.pmore
   15890:	cmp	x19, x21
   15894:	b.eq	1641c <lzma_mode_is_supported@@XZ_5.0+0x501c>  // b.none
   15898:	ldrb	w1, [x22, x19]
   1589c:	lsl	w24, w24, #8
   158a0:	add	x19, x19, #0x1
   158a4:	orr	w25, w1, w25, lsl #8
   158a8:	ubfiz	x1, x26, #1, #32
   158ac:	lsr	w2, w24, #11
   158b0:	add	x4, x5, x1
   158b4:	lsl	w26, w26, #1
   158b8:	ldrh	w1, [x5, x1]
   158bc:	mul	w2, w2, w1
   158c0:	cmp	w2, w25
   158c4:	b.ls	15dd8 <lzma_mode_is_supported@@XZ_5.0+0x49d8>  // b.plast
   158c8:	mov	w10, #0x800                 	// #2048
   158cc:	sub	w10, w10, w1
   158d0:	mov	w24, w2
   158d4:	add	w1, w1, w10, lsr #5
   158d8:	and	w1, w1, #0xffff
   158dc:	add	w18, w18, #0x1
   158e0:	strh	w1, [x4]
   158e4:	b	14104 <lzma_mode_is_supported@@XZ_5.0+0x2d04>
   158e8:	sub	w0, w0, w0, lsr #5
   158ec:	sub	w24, w24, w1
   158f0:	and	w0, w0, #0xffff
   158f4:	sub	w25, w25, w1
   158f8:	add	w26, w26, #0x1
   158fc:	b	14710 <lzma_mode_is_supported@@XZ_5.0+0x3310>
   15900:	sub	w12, w12, #0x5
   15904:	b	148bc <lzma_mode_is_supported@@XZ_5.0+0x34bc>
   15908:	sub	w1, w1, w1, lsr #5
   1590c:	sub	w24, w24, w0
   15910:	sub	w25, w25, w0
   15914:	add	w26, w26, #0x1
   15918:	strh	w1, [x2, #3180]
   1591c:	b	146b8 <lzma_mode_is_supported@@XZ_5.0+0x32b8>
   15920:	sub	w0, w0, w0, lsr #5
   15924:	sub	w24, w24, w1
   15928:	and	w0, w0, #0xffff
   1592c:	sub	w25, w25, w1
   15930:	add	w9, w9, #0x1
   15934:	b	14d30 <lzma_mode_is_supported@@XZ_5.0+0x3930>
   15938:	sub	w24, w24, w0
   1593c:	sub	w25, w25, w0
   15940:	add	w26, w26, #0x1
   15944:	sub	w0, w4, w4, lsr #5
   15948:	strh	w0, [x5, x2]
   1594c:	b	1384c <lzma_mode_is_supported@@XZ_5.0+0x244c>
   15950:	sub	w1, w1, w1, lsr #5
   15954:	sub	w24, w24, w0
   15958:	sub	w25, w25, w0
   1595c:	add	w26, w26, #0x1
   15960:	strh	w1, [x2, #2152]
   15964:	b	14cd8 <lzma_mode_is_supported@@XZ_5.0+0x38d8>
   15968:	sub	w1, w1, w1, lsr #5
   1596c:	sub	w24, w24, w0
   15970:	sub	w25, w25, w0
   15974:	add	w26, w26, #0x1
   15978:	strh	w1, [x2, #3180]
   1597c:	b	14660 <lzma_mode_is_supported@@XZ_5.0+0x3260>
   15980:	sub	w1, w1, w1, lsr #5
   15984:	sub	w24, w24, w0
   15988:	sub	w25, w25, w0
   1598c:	add	w26, w26, #0x1
   15990:	strh	w1, [x2, #2152]
   15994:	b	14c80 <lzma_mode_is_supported@@XZ_5.0+0x3880>
   15998:	sub	w1, w1, w1, lsr #5
   1599c:	sub	w24, w24, w0
   159a0:	sub	w25, w25, w0
   159a4:	add	w26, w26, #0x1
   159a8:	strh	w1, [x5, x2]
   159ac:	b	13b80 <lzma_mode_is_supported@@XZ_5.0+0x2780>
   159b0:	sub	w0, w0, w0, lsr #5
   159b4:	sub	w24, w24, w2
   159b8:	and	w0, w0, #0xffff
   159bc:	sub	w25, w25, w2
   159c0:	add	w26, w26, #0x1
   159c4:	b	13f24 <lzma_mode_is_supported@@XZ_5.0+0x2b24>
   159c8:	sub	w1, w1, w1, lsr #5
   159cc:	sub	w24, w24, w0
   159d0:	sub	w25, w25, w0
   159d4:	add	w26, w26, #0x1
   159d8:	strh	w1, [x2, #3180]
   159dc:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x3208>
   159e0:	sub	w0, w0, w0, lsr #5
   159e4:	sub	w24, w24, w2
   159e8:	and	w0, w0, #0xffff
   159ec:	sub	w25, w25, w2
   159f0:	add	w10, w10, #0x8
   159f4:	b	14458 <lzma_mode_is_supported@@XZ_5.0+0x3058>
   159f8:	sub	w1, w1, w1, lsr #5
   159fc:	sub	w24, w24, w0
   15a00:	sub	w25, w25, w0
   15a04:	add	w26, w26, #0x1
   15a08:	strh	w1, [x2, #2152]
   15a0c:	b	14c28 <lzma_mode_is_supported@@XZ_5.0+0x3828>
   15a10:	sub	w0, w0, w0, lsr #5
   15a14:	sub	w24, w24, w2
   15a18:	and	w0, w0, #0xffff
   15a1c:	sub	w25, w25, w2
   15a20:	add	w26, w26, #0x1
   15a24:	b	13eb4 <lzma_mode_is_supported@@XZ_5.0+0x2ab4>
   15a28:	sub	w1, w1, w1, lsr #5
   15a2c:	sub	w24, w24, w0
   15a30:	sub	w25, w25, w0
   15a34:	add	w26, w26, #0x1
   15a38:	strh	w1, [x5, x2]
   15a3c:	b	13b2c <lzma_mode_is_supported@@XZ_5.0+0x272c>
   15a40:	ldp	x25, x26, [sp, #64]
   15a44:	b	137c8 <lzma_mode_is_supported@@XZ_5.0+0x23c8>
   15a48:	mov	w25, w1
   15a4c:	mov	w26, w10
   15a50:	mov	w1, #0x2b                  	// #43
   15a54:	mov	w10, w0
   15a58:	mov	x11, x27
   15a5c:	mov	w0, #0x0                   	// #0
   15a60:	ldr	x7, [x28, #28312]
   15a64:	str	w1, [x20, #11936]
   15a68:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15a6c:	sub	w1, w1, w1, lsr #5
   15a70:	sub	w24, w24, w0
   15a74:	sub	w25, w25, w0
   15a78:	add	w26, w26, #0x1
   15a7c:	add	w10, w10, #0x4
   15a80:	strh	w1, [x2, #1604]
   15a84:	b	14404 <lzma_mode_is_supported@@XZ_5.0+0x3004>
   15a88:	sub	w1, w1, w1, lsr #5
   15a8c:	sub	w24, w24, w0
   15a90:	sub	w25, w25, w0
   15a94:	add	w26, w26, #0x1
   15a98:	strh	w1, [x2, #3180]
   15a9c:	b	145b0 <lzma_mode_is_supported@@XZ_5.0+0x31b0>
   15aa0:	sub	w0, w0, w0, lsr #5
   15aa4:	sub	w24, w24, w2
   15aa8:	and	w0, w0, #0xffff
   15aac:	sub	w25, w25, w2
   15ab0:	add	w26, w26, #0x1
   15ab4:	b	143f0 <lzma_mode_is_supported@@XZ_5.0+0x2ff0>
   15ab8:	sub	w1, w1, w1, lsr #5
   15abc:	sub	w24, w24, w0
   15ac0:	sub	w25, w25, w0
   15ac4:	add	w26, w26, #0x1
   15ac8:	strh	w1, [x5, x2]
   15acc:	b	13ad8 <lzma_mode_is_supported@@XZ_5.0+0x26d8>
   15ad0:	sub	w0, w0, w0, lsr #5
   15ad4:	sub	w24, w24, w2
   15ad8:	and	w0, w0, #0xffff
   15adc:	sub	w25, w25, w2
   15ae0:	add	w26, w26, #0x1
   15ae4:	b	13e44 <lzma_mode_is_supported@@XZ_5.0+0x2a44>
   15ae8:	sub	w1, w1, w1, lsr #5
   15aec:	sub	w24, w24, w0
   15af0:	sub	w25, w25, w0
   15af4:	add	w26, w26, #0x1
   15af8:	strh	w1, [x2, #3180]
   15afc:	b	14558 <lzma_mode_is_supported@@XZ_5.0+0x3158>
   15b00:	sub	w1, w1, w1, lsr #5
   15b04:	sub	w24, w24, w0
   15b08:	sub	w25, w25, w0
   15b0c:	add	w26, w26, #0x1
   15b10:	add	w10, w10, #0x2
   15b14:	strh	w1, [x2, #1604]
   15b18:	b	149c8 <lzma_mode_is_supported@@XZ_5.0+0x35c8>
   15b1c:	sub	w0, w0, w0, lsr #5
   15b20:	sub	w24, w24, w2
   15b24:	and	w0, w0, #0xffff
   15b28:	sub	w25, w25, w2
   15b2c:	add	w26, w26, #0x1
   15b30:	b	14b5c <lzma_mode_is_supported@@XZ_5.0+0x375c>
   15b34:	sub	w2, w2, w2, lsr #5
   15b38:	sub	w24, w24, w0
   15b3c:	sub	w25, w25, w0
   15b40:	strh	w2, [x4, #2664]
   15b44:	b	14f10 <lzma_mode_is_supported@@XZ_5.0+0x3b10>
   15b48:	sub	w1, w1, w1, lsr #5
   15b4c:	sub	w24, w24, w0
   15b50:	sub	w25, w25, w0
   15b54:	add	w26, w26, #0x1
   15b58:	strh	w1, [x2, #2152]
   15b5c:	b	14bd0 <lzma_mode_is_supported@@XZ_5.0+0x37d0>
   15b60:	sub	w2, w2, w2, lsr #5
   15b64:	sub	w24, w24, w4
   15b68:	sub	w25, w25, w4
   15b6c:	add	w26, w26, #0x1
   15b70:	strh	w2, [x0, #2668]
   15b74:	b	14390 <lzma_mode_is_supported@@XZ_5.0+0x2f90>
   15b78:	sub	w0, w0, w0, lsr #5
   15b7c:	sub	w24, w24, w2
   15b80:	and	w0, w0, #0xffff
   15b84:	sub	w25, w25, w2
   15b88:	add	w26, w26, #0x1
   15b8c:	mov	w18, w1
   15b90:	b	13dd4 <lzma_mode_is_supported@@XZ_5.0+0x29d4>
   15b94:	sub	w1, w1, w1, lsr #5
   15b98:	sub	w24, w24, w0
   15b9c:	sub	w25, w25, w0
   15ba0:	add	w26, w26, #0x1
   15ba4:	strh	w1, [x5, x2]
   15ba8:	b	13a84 <lzma_mode_is_supported@@XZ_5.0+0x2684>
   15bac:	sub	w1, w1, w1, lsr #5
   15bb0:	sub	w24, w24, w0
   15bb4:	sub	w25, w25, w0
   15bb8:	add	w26, w26, #0x1
   15bbc:	add	w10, w10, #0x1
   15bc0:	strh	w1, [x2, #1604]
   15bc4:	b	14970 <lzma_mode_is_supported@@XZ_5.0+0x3570>
   15bc8:	sub	w0, w0, w0, lsr #5
   15bcc:	strh	w0, [x4, #384]
   15bd0:	sub	w24, w24, w2
   15bd4:	sub	w25, w25, w2
   15bd8:	cbnz	x14, 14fe0 <lzma_mode_is_supported@@XZ_5.0+0x3be0>
   15bdc:	mov	x11, x27
   15be0:	mov	w0, #0x9                   	// #9
   15be4:	ldr	x7, [x28, #28312]
   15be8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15bec:	mov	w12, #0x1                   	// #1
   15bf0:	sub	w2, w2, w2, lsr #5
   15bf4:	lsl	w10, w12, w18
   15bf8:	sub	w24, w24, w1
   15bfc:	sub	w25, w25, w1
   15c00:	add	w10, w10, w0
   15c04:	strh	w2, [x5, x4]
   15c08:	b	141bc <lzma_mode_is_supported@@XZ_5.0+0x2dbc>
   15c0c:	mov	w0, #0x8                   	// #8
   15c10:	str	w0, [sp, #96]
   15c14:	b	14e74 <lzma_mode_is_supported@@XZ_5.0+0x3a74>
   15c18:	sub	w1, w1, w1, lsr #5
   15c1c:	sub	w24, w24, w0
   15c20:	sub	w25, w25, w0
   15c24:	add	w26, w26, #0x1
   15c28:	strh	w1, [x2, #2152]
   15c2c:	b	14b78 <lzma_mode_is_supported@@XZ_5.0+0x3778>
   15c30:	sub	w0, w0, w0, lsr #5
   15c34:	sub	w24, w24, w2
   15c38:	and	w0, w0, #0xffff
   15c3c:	sub	w25, w25, w2
   15c40:	add	w9, w9, #0x1
   15c44:	b	15150 <lzma_mode_is_supported@@XZ_5.0+0x3d50>
   15c48:	sub	w0, w0, w0, lsr #5
   15c4c:	sub	w24, w24, w2
   15c50:	and	w0, w0, #0xffff
   15c54:	sub	w25, w25, w2
   15c58:	add	w9, w9, #0x1
   15c5c:	b	14784 <lzma_mode_is_supported@@XZ_5.0+0x3384>
   15c60:	sub	w0, w0, w0, lsr #5
   15c64:	sub	w24, w24, w2
   15c68:	sub	w25, w25, w2
   15c6c:	strh	w0, [x4, #2666]
   15c70:	b	14f78 <lzma_mode_is_supported@@XZ_5.0+0x3b78>
   15c74:	sub	w1, w1, w1, lsr #5
   15c78:	sub	w24, w24, w0
   15c7c:	sub	w25, w25, w0
   15c80:	add	w26, w26, #0x1
   15c84:	strh	w1, [x5, x2]
   15c88:	b	13a30 <lzma_mode_is_supported@@XZ_5.0+0x2630>
   15c8c:	sub	w0, w0, w0, lsr #5
   15c90:	sub	w24, w24, w4
   15c94:	sub	w25, w25, w4
   15c98:	add	w26, w26, #0x1
   15c9c:	strh	w0, [x2, #2924]
   15ca0:	b	14afc <lzma_mode_is_supported@@XZ_5.0+0x36fc>
   15ca4:	sub	w0, w0, w0, lsr #5
   15ca8:	sub	w24, w24, w1
   15cac:	and	w0, w0, #0xffff
   15cb0:	sub	w25, w25, w1
   15cb4:	add	w26, w26, #0x1
   15cb8:	mov	w18, w2
   15cbc:	b	13d64 <lzma_mode_is_supported@@XZ_5.0+0x2964>
   15cc0:	sub	w1, w1, w1, lsr #5
   15cc4:	sub	w24, w24, w0
   15cc8:	sub	w25, w25, w0
   15ccc:	add	w26, w26, #0x1
   15cd0:	strh	w1, [x2, #3180]
   15cd4:	b	14500 <lzma_mode_is_supported@@XZ_5.0+0x3100>
   15cd8:	sub	w0, w0, w0, lsr #5
   15cdc:	sub	w24, w24, w4
   15ce0:	sub	w25, w25, w4
   15ce4:	add	w26, w26, #0x1
   15ce8:	strh	w0, [x2, #2668]
   15cec:	b	14330 <lzma_mode_is_supported@@XZ_5.0+0x2f30>
   15cf0:	mov	w10, #0x1                   	// #1
   15cf4:	sub	w1, w1, w1, lsr #5
   15cf8:	sub	w24, w24, w2
   15cfc:	sub	w25, w25, w2
   15d00:	and	w1, w1, #0xffff
   15d04:	lsl	w2, w10, w18
   15d08:	add	w26, w26, w10
   15d0c:	add	w0, w0, w2
   15d10:	b	1415c <lzma_mode_is_supported@@XZ_5.0+0x2d5c>
   15d14:	mov	w1, #0x12                  	// #18
   15d18:	mov	x11, x13
   15d1c:	mov	w0, #0x0                   	// #0
   15d20:	ldr	x7, [x28, #28312]
   15d24:	str	w1, [x20, #11936]
   15d28:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15d2c:	sub	w0, w0, w0, lsr #5
   15d30:	sub	w24, w24, w4
   15d34:	sub	w25, w25, w4
   15d38:	add	w26, w26, #0x1
   15d3c:	strh	w0, [x2, #1640]
   15d40:	b	14724 <lzma_mode_is_supported@@XZ_5.0+0x3324>
   15d44:	sub	w1, w1, w1, lsr #5
   15d48:	sub	w24, w24, w0
   15d4c:	sub	w25, w25, w0
   15d50:	add	w26, w26, #0x1
   15d54:	strh	w1, [x2, #2152]
   15d58:	b	151b8 <lzma_mode_is_supported@@XZ_5.0+0x3db8>
   15d5c:	sub	w0, w0, w0, lsr #5
   15d60:	sub	w24, w24, w4
   15d64:	sub	w25, w25, w4
   15d68:	add	w26, w26, #0x1
   15d6c:	strh	w0, [x2, #1896]
   15d70:	b	150f0 <lzma_mode_is_supported@@XZ_5.0+0x3cf0>
   15d74:	sub	w0, w0, w0, lsr #5
   15d78:	sub	w24, w24, w4
   15d7c:	sub	w25, w25, w4
   15d80:	add	w26, w26, #0x1
   15d84:	strh	w0, [x2, #2924]
   15d88:	b	14a9c <lzma_mode_is_supported@@XZ_5.0+0x369c>
   15d8c:	sub	w1, w1, w1, lsr #5
   15d90:	sub	w24, w24, w0
   15d94:	sub	w25, w25, w0
   15d98:	add	w26, w26, #0x1
   15d9c:	strh	w1, [x2, #3180]
   15da0:	b	144a8 <lzma_mode_is_supported@@XZ_5.0+0x30a8>
   15da4:	sub	w1, w1, w1, lsr #5
   15da8:	sub	w24, w24, w0
   15dac:	sub	w25, w25, w0
   15db0:	add	w26, w26, #0x1
   15db4:	strh	w1, [x5, x2]
   15db8:	b	139dc <lzma_mode_is_supported@@XZ_5.0+0x25dc>
   15dbc:	sub	w0, w0, w0, lsr #5
   15dc0:	sub	w24, w24, w1
   15dc4:	and	w0, w0, #0xffff
   15dc8:	sub	w25, w25, w1
   15dcc:	add	w26, w26, #0x1
   15dd0:	mov	w18, w2
   15dd4:	b	13cf4 <lzma_mode_is_supported@@XZ_5.0+0x28f4>
   15dd8:	mov	w10, #0x1                   	// #1
   15ddc:	sub	w1, w1, w1, lsr #5
   15de0:	sub	w24, w24, w2
   15de4:	sub	w25, w25, w2
   15de8:	and	w1, w1, #0xffff
   15dec:	lsl	w2, w10, w18
   15df0:	add	w26, w26, w10
   15df4:	add	w0, w0, w2
   15df8:	b	158dc <lzma_mode_is_supported@@XZ_5.0+0x44dc>
   15dfc:	sub	w0, w0, w0, lsr #5
   15e00:	sub	w24, w24, w4
   15e04:	sub	w25, w25, w4
   15e08:	add	w26, w26, #0x1
   15e0c:	strh	w0, [x2, #1640]
   15e10:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x4108>
   15e14:	sub	w0, w0, w0, lsr #5
   15e18:	sub	w24, w24, w2
   15e1c:	sub	w25, w25, w2
   15e20:	strh	w0, [x4, #1636]
   15e24:	b	15348 <lzma_mode_is_supported@@XZ_5.0+0x3f48>
   15e28:	mov	w1, #0x29                  	// #41
   15e2c:	mov	x11, x27
   15e30:	mov	w0, #0x0                   	// #0
   15e34:	ldr	x7, [x28, #28312]
   15e38:	str	w1, [x20, #11936]
   15e3c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15e40:	sub	w24, w24, w2
   15e44:	sub	w25, w25, w2
   15e48:	ldr	w2, [sp, #108]
   15e4c:	mov	w11, w10
   15e50:	ldr	w10, [sp, #116]
   15e54:	sub	w0, w0, w0, lsr #5
   15e58:	str	w2, [sp, #116]
   15e5c:	ldr	w2, [sp, #104]
   15e60:	stp	w11, w2, [sp, #104]
   15e64:	strh	w0, [x4, #456]
   15e68:	b	14e5c <lzma_mode_is_supported@@XZ_5.0+0x3a5c>
   15e6c:	sub	w0, w0, w0, lsr #5
   15e70:	sub	w24, w24, w2
   15e74:	sub	w25, w25, w2
   15e78:	strh	w0, [x4, #480]
   15e7c:	b	14e5c <lzma_mode_is_supported@@XZ_5.0+0x3a5c>
   15e80:	sub	w0, w0, w0, lsr #5
   15e84:	sub	w24, w24, w2
   15e88:	sub	w25, w25, w2
   15e8c:	strh	w0, [x4, #408]
   15e90:	b	14df8 <lzma_mode_is_supported@@XZ_5.0+0x39f8>
   15e94:	mov	w1, #0x26                  	// #38
   15e98:	mov	x11, x27
   15e9c:	mov	w0, #0x0                   	// #0
   15ea0:	ldr	x7, [x28, #28312]
   15ea4:	str	w1, [x20, #11936]
   15ea8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15eac:	sub	w0, w0, w0, lsr #5
   15eb0:	sub	w24, w24, w2
   15eb4:	sub	w25, w25, w2
   15eb8:	strh	w0, [x4, #432]
   15ebc:	b	15050 <lzma_mode_is_supported@@XZ_5.0+0x3c50>
   15ec0:	mov	w1, #0x27                  	// #39
   15ec4:	mov	x11, x27
   15ec8:	mov	w0, #0x0                   	// #0
   15ecc:	ldr	x7, [x28, #28312]
   15ed0:	str	w1, [x20, #11936]
   15ed4:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15ed8:	mov	w1, #0x28                  	// #40
   15edc:	mov	x11, x27
   15ee0:	mov	w0, #0x0                   	// #0
   15ee4:	ldr	x7, [x28, #28312]
   15ee8:	str	w1, [x20, #11936]
   15eec:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15ef0:	sub	w0, w0, w0, lsr #5
   15ef4:	sub	w24, w24, w2
   15ef8:	sub	w25, w25, w2
   15efc:	strh	w0, [x4, #1638]
   15f00:	b	15218 <lzma_mode_is_supported@@XZ_5.0+0x3e18>
   15f04:	sub	w1, w1, w1, lsr #5
   15f08:	sub	w24, w24, w0
   15f0c:	sub	w25, w25, w0
   15f10:	add	w26, w26, #0x1
   15f14:	strh	w1, [x2, #2152]
   15f18:	b	15160 <lzma_mode_is_supported@@XZ_5.0+0x3d60>
   15f1c:	sub	w0, w0, w0, lsr #5
   15f20:	sub	w24, w24, w4
   15f24:	sub	w25, w25, w4
   15f28:	add	w26, w26, #0x1
   15f2c:	strh	w0, [x2, #1896]
   15f30:	b	152e0 <lzma_mode_is_supported@@XZ_5.0+0x3ee0>
   15f34:	mov	w1, #0x24                  	// #36
   15f38:	mov	x11, x27
   15f3c:	mov	w0, #0x0                   	// #0
   15f40:	ldr	x7, [x28, #28312]
   15f44:	str	w1, [x20, #11936]
   15f48:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15f4c:	mov	w10, #0x1                   	// #1
   15f50:	sub	w1, w1, w1, lsr #5
   15f54:	sub	w24, w24, w2
   15f58:	sub	w25, w25, w2
   15f5c:	and	w1, w1, #0xffff
   15f60:	lsl	w2, w10, w18
   15f64:	add	w26, w26, w10
   15f68:	add	w0, w0, w2
   15f6c:	b	1587c <lzma_mode_is_supported@@XZ_5.0+0x447c>
   15f70:	mov	w1, #0x25                  	// #37
   15f74:	mov	x11, x27
   15f78:	mov	w0, #0x0                   	// #0
   15f7c:	ldr	x7, [x28, #28312]
   15f80:	str	w1, [x20, #11936]
   15f84:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15f88:	sub	w0, w0, w0, lsr #5
   15f8c:	sub	w24, w24, w1
   15f90:	and	w0, w0, #0xffff
   15f94:	sub	w25, w25, w1
   15f98:	add	w26, w26, #0x1
   15f9c:	mov	w18, w2
   15fa0:	b	13c84 <lzma_mode_is_supported@@XZ_5.0+0x2884>
   15fa4:	sub	w1, w1, w1, lsr #5
   15fa8:	sub	w24, w24, w0
   15fac:	sub	w25, w25, w0
   15fb0:	add	w26, w26, #0x1
   15fb4:	strh	w1, [x5, x2]
   15fb8:	b	13988 <lzma_mode_is_supported@@XZ_5.0+0x2588>
   15fbc:	sub	w2, w2, w2, lsr #5
   15fc0:	sub	w24, w24, w0
   15fc4:	sub	w25, w25, w0
   15fc8:	mov	x27, x11
   15fcc:	strh	w2, [x4]
   15fd0:	b	153d8 <lzma_mode_is_supported@@XZ_5.0+0x3fd8>
   15fd4:	mov	w1, #0x9                   	// #9
   15fd8:	mov	x11, x27
   15fdc:	mov	w0, #0x0                   	// #0
   15fe0:	ldr	x7, [x28, #28312]
   15fe4:	str	w1, [x20, #11936]
   15fe8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   15fec:	mov	w1, #0x44                  	// #68
   15ff0:	mov	x11, x27
   15ff4:	mov	w0, #0x0                   	// #0
   15ff8:	ldr	x7, [x28, #28312]
   15ffc:	str	w1, [x20, #11936]
   16000:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16004:	mov	w1, #0x43                  	// #67
   16008:	mov	x11, x27
   1600c:	mov	w0, #0x0                   	// #0
   16010:	ldr	x7, [x28, #28312]
   16014:	str	w1, [x20, #11936]
   16018:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1601c:	mov	w0, #0x9                   	// #9
   16020:	str	w0, [sp, #96]
   16024:	b	14db8 <lzma_mode_is_supported@@XZ_5.0+0x39b8>
   16028:	mov	w1, #0x20                  	// #32
   1602c:	mov	x11, x27
   16030:	mov	w0, #0x0                   	// #0
   16034:	ldr	x7, [x28, #28312]
   16038:	str	w1, [x20, #11936]
   1603c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16040:	mov	w1, #0x21                  	// #33
   16044:	mov	x11, x27
   16048:	mov	w0, #0x0                   	// #0
   1604c:	ldr	x7, [x28, #28312]
   16050:	str	w1, [x20, #11936]
   16054:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16058:	mov	w1, #0x42                  	// #66
   1605c:	mov	x11, x27
   16060:	mov	w0, #0x0                   	// #0
   16064:	ldr	x7, [x28, #28312]
   16068:	str	w1, [x20, #11936]
   1606c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16070:	mov	w1, #0x8                   	// #8
   16074:	mov	x11, x27
   16078:	mov	w0, #0x0                   	// #0
   1607c:	ldr	x7, [x28, #28312]
   16080:	str	w1, [x20, #11936]
   16084:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16088:	mov	w18, w1
   1608c:	mov	x11, x27
   16090:	mov	w1, #0xf                   	// #15
   16094:	mov	w0, #0x0                   	// #0
   16098:	ldr	x7, [x28, #28312]
   1609c:	str	w1, [x20, #11936]
   160a0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   160a4:	mov	w1, #0x45                  	// #69
   160a8:	mov	x11, x27
   160ac:	mov	w0, #0x0                   	// #0
   160b0:	ldr	x7, [x28, #28312]
   160b4:	str	w1, [x20, #11936]
   160b8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   160bc:	mov	w1, #0x23                  	// #35
   160c0:	mov	x11, x27
   160c4:	mov	w0, #0x0                   	// #0
   160c8:	ldr	x7, [x28, #28312]
   160cc:	str	w1, [x20, #11936]
   160d0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   160d4:	mov	w1, #0x22                  	// #34
   160d8:	mov	x11, x27
   160dc:	mov	w0, #0x0                   	// #0
   160e0:	ldr	x7, [x28, #28312]
   160e4:	str	w1, [x20, #11936]
   160e8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   160ec:	mov	w1, #0x10                  	// #16
   160f0:	mov	x11, x27
   160f4:	mov	w0, #0x0                   	// #0
   160f8:	ldr	x7, [x28, #28312]
   160fc:	str	w1, [x20, #11936]
   16100:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16104:	mov	w0, #0x7                   	// #7
   16108:	mov	w26, #0x1                   	// #1
   1610c:	str	w0, [sp, #96]
   16110:	str	w10, [sp, #104]
   16114:	b	15458 <lzma_mode_is_supported@@XZ_5.0+0x4058>
   16118:	mov	w1, #0x2f                  	// #47
   1611c:	mov	x11, x27
   16120:	mov	w0, #0x0                   	// #0
   16124:	ldr	x7, [x28, #28312]
   16128:	str	w1, [x20, #11936]
   1612c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16130:	mov	w18, w1
   16134:	mov	x11, x27
   16138:	mov	w1, #0x11                  	// #17
   1613c:	mov	w0, #0x0                   	// #0
   16140:	ldr	x7, [x28, #28312]
   16144:	str	w1, [x20, #11936]
   16148:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1614c:	sub	w1, w1, w1, lsr #5
   16150:	sub	w24, w24, w2
   16154:	and	w1, w1, #0xffff
   16158:	sub	w25, w25, w2
   1615c:	add	w26, w26, #0x1
   16160:	add	w0, w0, #0x1
   16164:	b	1581c <lzma_mode_is_supported@@XZ_5.0+0x441c>
   16168:	mov	w1, #0x7                   	// #7
   1616c:	mov	x11, x27
   16170:	mov	w0, #0x0                   	// #0
   16174:	ldr	x7, [x28, #28312]
   16178:	str	w1, [x20, #11936]
   1617c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16180:	mov	w1, #0xe                   	// #14
   16184:	mov	x11, x27
   16188:	mov	w0, #0x0                   	// #0
   1618c:	ldr	x7, [x28, #28312]
   16190:	str	w1, [x20, #11936]
   16194:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16198:	cmp	x13, x11
   1619c:	b.ne	1388c <lzma_mode_is_supported@@XZ_5.0+0x248c>  // b.any
   161a0:	ldr	x7, [x28, #28312]
   161a4:	b	1376c <lzma_mode_is_supported@@XZ_5.0+0x236c>
   161a8:	mov	w1, #0x18                  	// #24
   161ac:	mov	x11, x27
   161b0:	mov	w0, #0x0                   	// #0
   161b4:	ldr	x7, [x28, #28312]
   161b8:	str	w1, [x20, #11936]
   161bc:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   161c0:	mov	w1, #0xb                   	// #11
   161c4:	mov	x11, x27
   161c8:	mov	w0, #0x0                   	// #0
   161cc:	ldr	x7, [x28, #28312]
   161d0:	str	w1, [x20, #11936]
   161d4:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   161d8:	mov	w1, #0x4                   	// #4
   161dc:	mov	x11, x27
   161e0:	mov	w0, #0x0                   	// #0
   161e4:	ldr	x7, [x28, #28312]
   161e8:	str	w1, [x20, #11936]
   161ec:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   161f0:	mov	w1, #0x38                  	// #56
   161f4:	mov	x11, x27
   161f8:	mov	w0, #0x0                   	// #0
   161fc:	ldr	x7, [x28, #28312]
   16200:	str	w1, [x20, #11936]
   16204:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16208:	mov	w1, #0x3b                  	// #59
   1620c:	mov	x11, x27
   16210:	mov	w0, #0x0                   	// #0
   16214:	ldr	x7, [x28, #28312]
   16218:	str	w1, [x20, #11936]
   1621c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16220:	mov	w1, #0x3c                  	// #60
   16224:	mov	x11, x27
   16228:	mov	w0, #0x0                   	// #0
   1622c:	ldr	x7, [x28, #28312]
   16230:	str	w1, [x20, #11936]
   16234:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16238:	mov	w1, w10
   1623c:	mov	w24, w0
   16240:	cmp	x1, x11
   16244:	sub	x1, x27, x1
   16248:	csel	x2, x15, xzr, cs  // cs = hs, nlast
   1624c:	mov	x27, x11
   16250:	add	x2, x8, x2
   16254:	mov	w0, #0x101                 	// #257
   16258:	mov	w18, #0x100                 	// #256
   1625c:	mov	w26, #0x1                   	// #1
   16260:	ldrb	w9, [x2, x1]
   16264:	lsl	w9, w9, #1
   16268:	b	13c20 <lzma_mode_is_supported@@XZ_5.0+0x2820>
   1626c:	mov	w1, #0x3                   	// #3
   16270:	mov	x11, x27
   16274:	mov	w0, #0x0                   	// #0
   16278:	ldr	x7, [x28, #28312]
   1627c:	str	w1, [x20, #11936]
   16280:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16284:	mov	w10, w0
   16288:	mov	w1, #0x2a                  	// #42
   1628c:	mov	x11, x27
   16290:	mov	w0, #0x0                   	// #0
   16294:	mov	w12, #0x1                   	// #1
   16298:	ldr	x7, [x28, #28312]
   1629c:	str	w1, [x20, #11936]
   162a0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   162a4:	mov	w1, #0x3d                  	// #61
   162a8:	mov	x11, x27
   162ac:	mov	w0, #0x0                   	// #0
   162b0:	ldr	x7, [x28, #28312]
   162b4:	str	w1, [x20, #11936]
   162b8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   162bc:	mov	w1, #0x1c                  	// #28
   162c0:	mov	x11, x27
   162c4:	mov	w0, #0x0                   	// #0
   162c8:	ldr	x7, [x28, #28312]
   162cc:	str	w1, [x20, #11936]
   162d0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   162d4:	mov	w1, #0x35                  	// #53
   162d8:	mov	x11, x27
   162dc:	mov	w0, #0x0                   	// #0
   162e0:	ldr	x7, [x28, #28312]
   162e4:	str	w1, [x20, #11936]
   162e8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   162ec:	mov	w1, #0x19                  	// #25
   162f0:	mov	x11, x27
   162f4:	mov	w0, #0x0                   	// #0
   162f8:	ldr	x7, [x28, #28312]
   162fc:	str	w1, [x20, #11936]
   16300:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16304:	mov	w1, #0x39                  	// #57
   16308:	mov	x11, x27
   1630c:	mov	w0, #0x0                   	// #0
   16310:	ldr	x7, [x28, #28312]
   16314:	str	w1, [x20, #11936]
   16318:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1631c:	mov	w1, #0x2e                  	// #46
   16320:	mov	x11, x27
   16324:	mov	w0, #0x0                   	// #0
   16328:	ldr	x7, [x28, #28312]
   1632c:	str	w1, [x20, #11936]
   16330:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16334:	mov	w1, #0x3a                  	// #58
   16338:	mov	x11, x27
   1633c:	mov	w0, #0x0                   	// #0
   16340:	ldr	x7, [x28, #28312]
   16344:	str	w1, [x20, #11936]
   16348:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1634c:	mov	w1, #0x3e                  	// #62
   16350:	mov	x11, x27
   16354:	mov	w0, #0x0                   	// #0
   16358:	ldr	x7, [x28, #28312]
   1635c:	str	w1, [x20, #11936]
   16360:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16364:	mov	w0, #0x30                  	// #48
   16368:	str	w0, [x20, #11936]
   1636c:	mov	w0, #0x0                   	// #0
   16370:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16374:	mov	w1, #0x1f                  	// #31
   16378:	mov	x11, x27
   1637c:	mov	w0, #0x0                   	// #0
   16380:	ldr	x7, [x28, #28312]
   16384:	str	w1, [x20, #11936]
   16388:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1638c:	mov	w1, #0x2d                  	// #45
   16390:	mov	x11, x27
   16394:	mov	w0, #0x0                   	// #0
   16398:	ldr	x7, [x28, #28312]
   1639c:	str	w1, [x20, #11936]
   163a0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   163a4:	mov	w1, #0x2c                  	// #44
   163a8:	mov	x11, x27
   163ac:	mov	w0, #0x0                   	// #0
   163b0:	ldr	x7, [x28, #28312]
   163b4:	str	w1, [x20, #11936]
   163b8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   163bc:	mov	w1, #0x1b                  	// #27
   163c0:	mov	x11, x27
   163c4:	mov	w0, #0x0                   	// #0
   163c8:	ldr	x7, [x28, #28312]
   163cc:	str	w1, [x20, #11936]
   163d0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   163d4:	mov	w1, #0x1a                  	// #26
   163d8:	mov	x11, x27
   163dc:	mov	w0, #0x0                   	// #0
   163e0:	ldr	x7, [x28, #28312]
   163e4:	str	w1, [x20, #11936]
   163e8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   163ec:	mov	w1, #0x6                   	// #6
   163f0:	mov	x11, x27
   163f4:	mov	w0, #0x0                   	// #0
   163f8:	ldr	x7, [x28, #28312]
   163fc:	str	w1, [x20, #11936]
   16400:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16404:	mov	w1, #0x17                  	// #23
   16408:	mov	x11, x27
   1640c:	mov	w0, #0x0                   	// #0
   16410:	ldr	x7, [x28, #28312]
   16414:	str	w1, [x20, #11936]
   16418:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1641c:	mov	w10, w0
   16420:	mov	w1, #0x2a                  	// #42
   16424:	mov	x11, x27
   16428:	mov	w0, #0x0                   	// #0
   1642c:	mov	w12, #0x3                   	// #3
   16430:	ldr	x7, [x28, #28312]
   16434:	str	w1, [x20, #11936]
   16438:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1643c:	mov	w1, #0x33                  	// #51
   16440:	mov	x11, x27
   16444:	mov	w0, #0x0                   	// #0
   16448:	ldr	x7, [x28, #28312]
   1644c:	str	w1, [x20, #11936]
   16450:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16454:	mov	w1, #0x34                  	// #52
   16458:	mov	x11, x27
   1645c:	mov	w0, #0x0                   	// #0
   16460:	ldr	x7, [x28, #28312]
   16464:	str	w1, [x20, #11936]
   16468:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1646c:	mov	w1, #0x36                  	// #54
   16470:	mov	x11, x27
   16474:	mov	w0, #0x0                   	// #0
   16478:	ldr	x7, [x28, #28312]
   1647c:	str	w1, [x20, #11936]
   16480:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16484:	mov	w1, #0x5                   	// #5
   16488:	mov	x11, x27
   1648c:	mov	w0, #0x0                   	// #0
   16490:	ldr	x7, [x28, #28312]
   16494:	str	w1, [x20, #11936]
   16498:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1649c:	mov	w1, #0xc                   	// #12
   164a0:	mov	x11, x27
   164a4:	mov	w0, #0x0                   	// #0
   164a8:	ldr	x7, [x28, #28312]
   164ac:	str	w1, [x20, #11936]
   164b0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   164b4:	mov	w1, #0x37                  	// #55
   164b8:	mov	x11, x27
   164bc:	mov	w0, #0x0                   	// #0
   164c0:	ldr	x7, [x28, #28312]
   164c4:	str	w1, [x20, #11936]
   164c8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   164cc:	mov	w1, #0x16                  	// #22
   164d0:	mov	x11, x27
   164d4:	mov	w0, #0x0                   	// #0
   164d8:	ldr	x7, [x28, #28312]
   164dc:	str	w1, [x20, #11936]
   164e0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   164e4:	mov	w1, #0x1d                  	// #29
   164e8:	mov	x11, x27
   164ec:	mov	w0, #0x0                   	// #0
   164f0:	ldr	x7, [x28, #28312]
   164f4:	str	w1, [x20, #11936]
   164f8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   164fc:	mov	w1, #0x1e                  	// #30
   16500:	mov	x11, x27
   16504:	mov	w0, #0x0                   	// #0
   16508:	ldr	x7, [x28, #28312]
   1650c:	str	w1, [x20, #11936]
   16510:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16514:	mov	w1, #0x15                  	// #21
   16518:	mov	x11, x27
   1651c:	mov	w0, #0x0                   	// #0
   16520:	ldr	x7, [x28, #28312]
   16524:	str	w1, [x20, #11936]
   16528:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1652c:	mov	w10, w0
   16530:	mov	w1, #0x2a                  	// #42
   16534:	mov	x11, x27
   16538:	mov	w0, #0x0                   	// #0
   1653c:	mov	w12, #0x2                   	// #2
   16540:	ldr	x7, [x28, #28312]
   16544:	str	w1, [x20, #11936]
   16548:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1654c:	mov	w1, #0xd                   	// #13
   16550:	mov	x11, x27
   16554:	mov	w0, #0x0                   	// #0
   16558:	ldr	x7, [x28, #28312]
   1655c:	str	w1, [x20, #11936]
   16560:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16564:	mov	w1, #0x41                  	// #65
   16568:	mov	x11, x27
   1656c:	mov	w0, #0x0                   	// #0
   16570:	ldr	x7, [x28, #28312]
   16574:	str	w1, [x20, #11936]
   16578:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1657c:	mov	w1, #0x3f                  	// #63
   16580:	mov	x11, x27
   16584:	mov	w0, #0x0                   	// #0
   16588:	ldr	x7, [x28, #28312]
   1658c:	str	w1, [x20, #11936]
   16590:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16594:	mov	w1, #0x40                  	// #64
   16598:	mov	x11, x27
   1659c:	mov	w0, #0x0                   	// #0
   165a0:	ldr	x7, [x28, #28312]
   165a4:	str	w1, [x20, #11936]
   165a8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   165ac:	mov	w1, #0x13                  	// #19
   165b0:	mov	x11, x27
   165b4:	mov	w0, #0x0                   	// #0
   165b8:	ldr	x7, [x28, #28312]
   165bc:	str	w1, [x20, #11936]
   165c0:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   165c4:	mov	w1, #0x14                  	// #20
   165c8:	mov	x11, x27
   165cc:	mov	w0, #0x0                   	// #0
   165d0:	ldr	x7, [x28, #28312]
   165d4:	str	w1, [x20, #11936]
   165d8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   165dc:	mov	w10, w0
   165e0:	b	141bc <lzma_mode_is_supported@@XZ_5.0+0x2dbc>
   165e4:	mov	w1, #0x2                   	// #2
   165e8:	mov	x11, x27
   165ec:	mov	w0, #0x0                   	// #0
   165f0:	ldr	x7, [x28, #28312]
   165f4:	str	w1, [x20, #11936]
   165f8:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   165fc:	mov	w10, w0
   16600:	mov	w1, #0x2a                  	// #42
   16604:	mov	x11, x27
   16608:	mov	w0, #0x0                   	// #0
   1660c:	ldr	x7, [x28, #28312]
   16610:	str	w1, [x20, #11936]
   16614:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16618:	mov	w1, #0x31                  	// #49
   1661c:	mov	x11, x27
   16620:	mov	w0, #0x0                   	// #0
   16624:	ldr	x7, [x28, #28312]
   16628:	str	w1, [x20, #11936]
   1662c:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16630:	mov	w1, #0x1                   	// #1
   16634:	mov	w0, #0x0                   	// #0
   16638:	ldr	x7, [x28, #28312]
   1663c:	str	w1, [x20, #11936]
   16640:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16644:	mov	w10, w0
   16648:	mov	w1, #0x2a                  	// #42
   1664c:	mov	x11, x27
   16650:	mov	w0, #0x0                   	// #0
   16654:	mov	w12, #0x4                   	// #4
   16658:	ldr	x7, [x28, #28312]
   1665c:	str	w1, [x20, #11936]
   16660:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16664:	mov	w1, #0xa                   	// #10
   16668:	mov	x11, x27
   1666c:	mov	w0, #0x0                   	// #0
   16670:	ldr	x7, [x28, #28312]
   16674:	str	w1, [x20, #11936]
   16678:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   1667c:	mov	w0, #0x0                   	// #0
   16680:	str	wzr, [x20, #11936]
   16684:	b	14240 <lzma_mode_is_supported@@XZ_5.0+0x2e40>
   16688:	stp	x29, x30, [sp, #-48]!
   1668c:	mov	x29, sp
   16690:	str	x21, [sp, #32]
   16694:	mov	x21, x0
   16698:	ldr	x0, [x0]
   1669c:	stp	x19, x20, [sp, #16]
   166a0:	mov	x20, x2
   166a4:	mov	x19, x3
   166a8:	cbz	x0, 166d4 <lzma_mode_is_supported@@XZ_5.0+0x52d4>
   166ac:	ldr	w3, [x20]
   166b0:	mov	w0, #0x0                   	// #0
   166b4:	ldr	w1, [x20, #16]
   166b8:	ldr	x2, [x20, #8]
   166bc:	stp	x3, x2, [x19]
   166c0:	str	x1, [x19, #16]
   166c4:	ldp	x19, x20, [sp, #16]
   166c8:	ldr	x21, [sp, #32]
   166cc:	ldp	x29, x30, [sp], #48
   166d0:	ret
   166d4:	mov	x0, #0x6ec0                	// #28352
   166d8:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   166dc:	str	x0, [x21]
   166e0:	cbz	x0, 16708 <lzma_mode_is_supported@@XZ_5.0+0x5308>
   166e4:	adrp	x2, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1c00>
   166e8:	adrp	x1, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1c00>
   166ec:	add	x2, x2, #0x660
   166f0:	add	x1, x1, #0x3e0
   166f4:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1c00>
   166f8:	add	x0, x0, #0x3d8
   166fc:	stp	x2, x1, [x21, #8]
   16700:	str	x0, [x21, #24]
   16704:	b	166ac <lzma_mode_is_supported@@XZ_5.0+0x52ac>
   16708:	mov	w0, #0x5                   	// #5
   1670c:	b	166c4 <lzma_mode_is_supported@@XZ_5.0+0x52c4>
   16710:	stp	x29, x30, [sp, #-48]!
   16714:	mov	x29, sp
   16718:	ldr	w4, [x2, #20]
   1671c:	stp	x19, x20, [sp, #16]
   16720:	mov	w20, #0xb                   	// #11
   16724:	cmp	w4, #0x4
   16728:	b.hi	16788 <lzma_mode_is_supported@@XZ_5.0+0x5388>  // b.pmore
   1672c:	ldr	w5, [x2, #24]
   16730:	mov	x19, x2
   16734:	mov	w20, #0xb                   	// #11
   16738:	cmp	w5, #0x4
   1673c:	b.hi	16788 <lzma_mode_is_supported@@XZ_5.0+0x5388>  // b.pmore
   16740:	add	w4, w4, w5
   16744:	cmp	w4, #0x4
   16748:	b.hi	16788 <lzma_mode_is_supported@@XZ_5.0+0x5388>  // b.pmore
   1674c:	ldr	w4, [x2, #28]
   16750:	str	x21, [sp, #32]
   16754:	cmp	w4, #0x4
   16758:	b.hi	16798 <lzma_mode_is_supported@@XZ_5.0+0x5398>  // b.pmore
   1675c:	mov	x21, x0
   16760:	bl	16688 <lzma_mode_is_supported@@XZ_5.0+0x5288>
   16764:	mov	w20, w0
   16768:	cbnz	w0, 16798 <lzma_mode_is_supported@@XZ_5.0+0x5398>
   1676c:	ldr	x0, [x21]
   16770:	mov	x1, x19
   16774:	bl	133e0 <lzma_mode_is_supported@@XZ_5.0+0x1fe0>
   16778:	ldr	x0, [x21]
   1677c:	mov	x1, #0xffffffffffffffff    	// #-1
   16780:	ldr	x21, [sp, #32]
   16784:	str	x1, [x0, #28312]
   16788:	mov	w0, w20
   1678c:	ldp	x19, x20, [sp, #16]
   16790:	ldp	x29, x30, [sp], #48
   16794:	ret
   16798:	mov	w0, w20
   1679c:	ldp	x19, x20, [sp, #16]
   167a0:	ldr	x21, [sp, #32]
   167a4:	ldp	x29, x30, [sp], #48
   167a8:	ret
   167ac:	nop
   167b0:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4c00>
   167b4:	add	x3, x3, #0x710
   167b8:	b	f918 <lzma_mf_is_supported@@XZ_5.0+0x1790>
   167bc:	nop
   167c0:	and	w1, w1, #0xff
   167c4:	cmp	w1, #0xe0
   167c8:	b.hi	16828 <lzma_mode_is_supported@@XZ_5.0+0x5428>  // b.pmore
   167cc:	mov	w4, #0xc16d                	// #49517
   167d0:	mov	w6, #0x2d                  	// #45
   167d4:	movk	w4, #0x6c16, lsl #16
   167d8:	mov	w2, #0x8e39                	// #36409
   167dc:	movk	w2, #0x38e3, lsl #16
   167e0:	umull	x4, w1, w4
   167e4:	lsr	x5, x4, #32
   167e8:	sub	w4, w1, w5
   167ec:	add	w4, w5, w4, lsr #1
   167f0:	lsr	w3, w4, #5
   167f4:	ubfx	x4, x4, #5, #8
   167f8:	str	w4, [x0, #28]
   167fc:	msub	w1, w3, w6, w1
   16800:	and	w1, w1, #0xff
   16804:	umull	x2, w1, w2
   16808:	lsr	x2, x2, #33
   1680c:	add	w3, w2, w2, lsl #3
   16810:	sub	w1, w1, w3
   16814:	stp	w1, w2, [x0, #20]
   16818:	add	w2, w2, w1
   1681c:	cmp	w2, #0x4
   16820:	cset	w0, hi  // hi = pmore
   16824:	ret
   16828:	mov	w0, #0x1                   	// #1
   1682c:	ret
   16830:	stp	x29, x30, [sp, #-16]!
   16834:	mov	x29, sp
   16838:	ldr	w0, [x0]
   1683c:	bl	faa0 <lzma_mf_is_supported@@XZ_5.0+0x1918>
   16840:	mov	x1, #0x6ec0                	// #28352
   16844:	add	x0, x0, x1
   16848:	ldp	x29, x30, [sp], #16
   1684c:	ret
   16850:	ldr	w2, [x0, #20]
   16854:	cmp	w2, #0x4
   16858:	b.hi	16890 <lzma_mode_is_supported@@XZ_5.0+0x5490>  // b.pmore
   1685c:	mov	x1, x0
   16860:	mov	x0, #0xffffffffffffffff    	// #-1
   16864:	ldr	w3, [x1, #24]
   16868:	cmp	w3, #0x4
   1686c:	b.hi	1688c <lzma_mode_is_supported@@XZ_5.0+0x548c>  // b.pmore
   16870:	add	w2, w2, w3
   16874:	cmp	w2, #0x4
   16878:	b.hi	1688c <lzma_mode_is_supported@@XZ_5.0+0x548c>  // b.pmore
   1687c:	ldr	w2, [x1, #28]
   16880:	cmp	w2, #0x4
   16884:	b.ls	16898 <lzma_mode_is_supported@@XZ_5.0+0x5498>  // b.plast
   16888:	ret
   1688c:	ret
   16890:	mov	x0, #0xffffffffffffffff    	// #-1
   16894:	ret
   16898:	stp	x29, x30, [sp, #-16]!
   1689c:	mov	x29, sp
   168a0:	ldr	w0, [x1]
   168a4:	bl	faa0 <lzma_mf_is_supported@@XZ_5.0+0x1918>
   168a8:	mov	x1, #0x6ec0                	// #28352
   168ac:	add	x0, x0, x1
   168b0:	ldp	x29, x30, [sp], #16
   168b4:	ret
   168b8:	cmp	x3, #0x5
   168bc:	b.eq	168c8 <lzma_mode_is_supported@@XZ_5.0+0x54c8>  // b.none
   168c0:	mov	w0, #0x8                   	// #8
   168c4:	ret
   168c8:	stp	x29, x30, [sp, #-48]!
   168cc:	mov	x29, sp
   168d0:	stp	x19, x20, [sp, #16]
   168d4:	mov	x19, x3
   168d8:	mov	x20, x2
   168dc:	stp	x21, x22, [sp, #32]
   168e0:	mov	x22, x0
   168e4:	mov	x21, x1
   168e8:	mov	x0, #0x70                  	// #112
   168ec:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   168f0:	mov	x3, x0
   168f4:	cbz	x0, 169a4 <lzma_mode_is_supported@@XZ_5.0+0x55a4>
   168f8:	ldrb	w0, [x20]
   168fc:	cmp	w0, #0xe0
   16900:	b.hi	16984 <lzma_mode_is_supported@@XZ_5.0+0x5584>  // b.pmore
   16904:	mov	w4, #0xc16d                	// #49517
   16908:	mov	w6, #0x2d                  	// #45
   1690c:	movk	w4, #0x6c16, lsl #16
   16910:	mov	w2, #0x8e39                	// #36409
   16914:	movk	w2, #0x38e3, lsl #16
   16918:	umull	x4, w0, w4
   1691c:	lsr	x5, x4, #32
   16920:	sub	w4, w0, w5
   16924:	add	w4, w5, w4, lsr #1
   16928:	lsr	w1, w4, #5
   1692c:	ubfx	x4, x4, #5, #8
   16930:	str	w4, [x3, #28]
   16934:	msub	w1, w1, w6, w0
   16938:	and	w1, w1, #0xff
   1693c:	umull	x2, w1, w2
   16940:	lsr	x2, x2, #33
   16944:	add	w0, w2, w2, lsl #3
   16948:	sub	w1, w1, w0
   1694c:	stp	w1, w2, [x3, #20]
   16950:	add	w2, w2, w1
   16954:	cmp	w2, #0x4
   16958:	b.hi	16984 <lzma_mode_is_supported@@XZ_5.0+0x5584>  // b.pmore
   1695c:	ldur	w1, [x20, #1]
   16960:	mov	w0, #0x0                   	// #0
   16964:	str	w1, [x3]
   16968:	str	x3, [x22]
   1696c:	str	xzr, [x3, #8]
   16970:	str	wzr, [x3, #16]
   16974:	ldp	x19, x20, [sp, #16]
   16978:	ldp	x21, x22, [sp, #32]
   1697c:	ldp	x29, x30, [sp], #48
   16980:	ret
   16984:	mov	x1, x21
   16988:	mov	x0, x3
   1698c:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
   16990:	mov	w0, #0x8                   	// #8
   16994:	ldp	x19, x20, [sp, #16]
   16998:	ldp	x21, x22, [sp, #32]
   1699c:	ldp	x29, x30, [sp], #48
   169a0:	ret
   169a4:	mov	w0, w19
   169a8:	b	16974 <lzma_mode_is_supported@@XZ_5.0+0x5574>
   169ac:	nop
   169b0:	ldr	x1, [x1, #8]
   169b4:	mov	x2, x0
   169b8:	cbz	x1, 16a34 <lzma_mode_is_supported@@XZ_5.0+0x5634>
   169bc:	ldr	w0, [x0]
   169c0:	cbnz	w0, 16a34 <lzma_mode_is_supported@@XZ_5.0+0x5634>
   169c4:	ldr	w3, [x1, #20]
   169c8:	ldr	w4, [x2, #36]
   169cc:	cmp	w4, w3
   169d0:	b.eq	16a14 <lzma_mode_is_supported@@XZ_5.0+0x5614>  // b.none
   169d4:	cmp	w3, #0x4
   169d8:	b.hi	16a2c <lzma_mode_is_supported@@XZ_5.0+0x562c>  // b.pmore
   169dc:	ldr	w4, [x1, #24]
   169e0:	cmp	w4, #0x4
   169e4:	b.hi	16a2c <lzma_mode_is_supported@@XZ_5.0+0x562c>  // b.pmore
   169e8:	add	w5, w3, w4
   169ec:	cmp	w5, #0x4
   169f0:	b.hi	16a2c <lzma_mode_is_supported@@XZ_5.0+0x562c>  // b.pmore
   169f4:	ldr	w1, [x1, #28]
   169f8:	cmp	w1, #0x4
   169fc:	b.hi	16a2c <lzma_mode_is_supported@@XZ_5.0+0x562c>  // b.pmore
   16a00:	mov	w5, #0x101                 	// #257
   16a04:	stp	w3, w4, [x2, #36]
   16a08:	str	w1, [x2, #44]
   16a0c:	strh	w5, [x2, #128]
   16a10:	ret
   16a14:	ldr	x4, [x1, #24]
   16a18:	ldr	x5, [x2, #40]
   16a1c:	cmp	x5, x4
   16a20:	b.eq	16a10 <lzma_mode_is_supported@@XZ_5.0+0x5610>  // b.none
   16a24:	cmp	w3, #0x4
   16a28:	b.ls	169dc <lzma_mode_is_supported@@XZ_5.0+0x55dc>  // b.plast
   16a2c:	mov	w0, #0x8                   	// #8
   16a30:	ret
   16a34:	mov	w0, #0xb                   	// #11
   16a38:	ret
   16a3c:	nop
   16a40:	cbz	x2, 16b50 <lzma_mode_is_supported@@XZ_5.0+0x5750>
   16a44:	stp	x29, x30, [sp, #-48]!
   16a48:	mov	x29, sp
   16a4c:	ldr	x4, [x0]
   16a50:	stp	x19, x20, [sp, #16]
   16a54:	mov	x20, x0
   16a58:	stp	x21, x22, [sp, #32]
   16a5c:	mov	x19, x2
   16a60:	mov	x21, x3
   16a64:	mov	x22, x1
   16a68:	cbz	x4, 16b14 <lzma_mode_is_supported@@XZ_5.0+0x5714>
   16a6c:	ldp	x0, x1, [x19]
   16a70:	add	x2, x4, #0x10
   16a74:	stp	x0, x1, [x4, #16]
   16a78:	mov	w3, #0x1                   	// #1
   16a7c:	ldp	x6, x7, [x19, #16]
   16a80:	stp	x6, x7, [x2, #16]
   16a84:	mov	w0, #0x1                   	// #1
   16a88:	ldp	x6, x7, [x19, #32]
   16a8c:	stp	x6, x7, [x2, #32]
   16a90:	ldp	x6, x7, [x19, #48]
   16a94:	stp	x6, x7, [x2, #48]
   16a98:	ldp	x6, x7, [x19, #64]
   16a9c:	stp	x6, x7, [x2, #64]
   16aa0:	ldp	x6, x7, [x19, #80]
   16aa4:	stp	x6, x7, [x2, #80]
   16aa8:	ldr	x1, [x4, #24]
   16aac:	ldp	x6, x7, [x19, #96]
   16ab0:	stp	x6, x7, [x2, #96]
   16ab4:	str	wzr, [x4]
   16ab8:	strh	w3, [x4, #128]
   16abc:	cbz	x1, 16acc <lzma_mode_is_supported@@XZ_5.0+0x56cc>
   16ac0:	ldr	w0, [x4, #32]
   16ac4:	cmp	w0, #0x0
   16ac8:	cset	w0, eq  // eq = none
   16acc:	strb	w0, [x4, #130]
   16ad0:	mov	x1, x22
   16ad4:	add	x0, x4, #0x8
   16ad8:	mov	x3, x21
   16adc:	bl	11188 <lzma_lzma_preset@@XZ_5.0+0x16c0>
   16ae0:	cbnz	w0, 16b04 <lzma_mode_is_supported@@XZ_5.0+0x5704>
   16ae4:	ldp	x1, x2, [x21]
   16ae8:	mov	x3, #0xffff                	// #65535
   16aec:	add	x1, x2, x1
   16af0:	cmp	x1, x3
   16af4:	b.hi	16b04 <lzma_mode_is_supported@@XZ_5.0+0x5704>  // b.pmore
   16af8:	mov	x1, #0x10000               	// #65536
   16afc:	sub	x2, x1, x2
   16b00:	str	x2, [x21]
   16b04:	ldp	x19, x20, [sp, #16]
   16b08:	ldp	x21, x22, [sp, #32]
   16b0c:	ldp	x29, x30, [sp], #48
   16b10:	ret
   16b14:	mov	x0, #0xa8                  	// #168
   16b18:	movk	x0, #0x1, lsl #16
   16b1c:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   16b20:	mov	x4, x0
   16b24:	cbz	x0, 16b58 <lzma_mode_is_supported@@XZ_5.0+0x5758>
   16b28:	adrp	x2, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4c00>
   16b2c:	adrp	x1, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4c00>
   16b30:	add	x2, x2, #0xb90
   16b34:	add	x1, x1, #0xb60
   16b38:	adrp	x0, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4c00>
   16b3c:	add	x0, x0, #0x9b0
   16b40:	stp	x4, x2, [x20]
   16b44:	str	xzr, [x4, #8]
   16b48:	stp	x1, x0, [x20, #16]
   16b4c:	b	16a6c <lzma_mode_is_supported@@XZ_5.0+0x566c>
   16b50:	mov	w0, #0xb                   	// #11
   16b54:	ret
   16b58:	mov	w0, #0x5                   	// #5
   16b5c:	b	16b04 <lzma_mode_is_supported@@XZ_5.0+0x5704>
   16b60:	stp	x29, x30, [sp, #-32]!
   16b64:	mov	x29, sp
   16b68:	stp	x19, x20, [sp, #16]
   16b6c:	mov	x19, x0
   16b70:	mov	x20, x1
   16b74:	ldr	x0, [x0, #8]
   16b78:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
   16b7c:	mov	x1, x20
   16b80:	mov	x0, x19
   16b84:	ldp	x19, x20, [sp, #16]
   16b88:	ldp	x29, x30, [sp], #32
   16b8c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
   16b90:	stp	x29, x30, [sp, #-96]!
   16b94:	mov	x29, sp
   16b98:	stp	x25, x26, [sp, #64]
   16b9c:	ldr	x26, [x3]
   16ba0:	stp	x19, x20, [sp, #16]
   16ba4:	mov	x19, x0
   16ba8:	mov	x20, x4
   16bac:	stp	x21, x22, [sp, #32]
   16bb0:	mov	x21, x3
   16bb4:	mov	x22, x2
   16bb8:	stp	x23, x24, [sp, #48]
   16bbc:	add	x24, x0, #0x98
   16bc0:	add	x23, x0, #0xa0
   16bc4:	stp	x27, x28, [sp, #80]
   16bc8:	mov	x27, x1
   16bcc:	nop
   16bd0:	cmp	x20, x26
   16bd4:	b.ls	16cb0 <lzma_mode_is_supported@@XZ_5.0+0x58b0>  // b.plast
   16bd8:	ldr	w0, [x19]
   16bdc:	cmp	w0, #0x2
   16be0:	b.eq	16d98 <lzma_mode_is_supported@@XZ_5.0+0x5998>  // b.none
   16be4:	b.hi	16cd0 <lzma_mode_is_supported@@XZ_5.0+0x58d0>  // b.pmore
   16be8:	cbz	w0, 16d2c <lzma_mode_is_supported@@XZ_5.0+0x592c>
   16bec:	ldr	x1, [x19, #136]
   16bf0:	mov	w2, #0x200000              	// #2097152
   16bf4:	ldp	w25, w28, [x27, #24]
   16bf8:	sub	w2, w2, w1
   16bfc:	ldr	x0, [x19, #8]
   16c00:	add	w5, w2, w25
   16c04:	ldr	w1, [x27, #100]
   16c08:	add	x3, x19, #0x90
   16c0c:	mov	x4, #0x10000               	// #65536
   16c10:	cmp	w2, w1
   16c14:	add	w1, w1, w28
   16c18:	sub	w5, w5, w1
   16c1c:	add	x2, x19, #0xa6
   16c20:	csel	w5, w5, wzr, cs  // cs = hs, nlast
   16c24:	mov	x1, x27
   16c28:	bl	fea8 <lzma_lzma_preset@@XZ_5.0+0x3e0>
   16c2c:	sub	w28, w28, w25
   16c30:	ldp	w5, w1, [x27, #24]
   16c34:	cmp	w0, #0x1
   16c38:	ldr	x2, [x19, #136]
   16c3c:	sub	w5, w5, w1
   16c40:	add	w5, w5, w28
   16c44:	add	x5, x5, x2
   16c48:	str	x5, [x19, #136]
   16c4c:	b.ne	16cb0 <lzma_mode_is_supported@@XZ_5.0+0x58b0>  // b.any
   16c50:	ldr	x2, [x19, #144]
   16c54:	cmp	x5, x2
   16c58:	b.hi	16dcc <lzma_mode_is_supported@@XZ_5.0+0x59cc>  // b.pmore
   16c5c:	ldrb	w2, [x19, #130]
   16c60:	add	x5, x5, w1, uxtw
   16c64:	sub	x1, x5, #0x1
   16c68:	sub	w3, w5, #0x1
   16c6c:	cmp	w2, #0x0
   16c70:	mov	w4, #0x3                   	// #3
   16c74:	cset	w2, eq  // eq = none
   16c78:	lsr	x1, x1, #8
   16c7c:	ldr	x26, [x21]
   16c80:	add	w2, w2, #0x1
   16c84:	str	w4, [x19]
   16c88:	str	wzr, [x27, #28]
   16c8c:	cmp	x20, x26
   16c90:	sturh	w0, [x19, #129]
   16c94:	str	x5, [x19, #136]
   16c98:	str	xzr, [x19, #152]
   16c9c:	strb	w2, [x19, #160]
   16ca0:	strb	w1, [x19, #161]
   16ca4:	strb	w3, [x19, #162]
   16ca8:	b.hi	16bd8 <lzma_mode_is_supported@@XZ_5.0+0x57d8>  // b.pmore
   16cac:	nop
   16cb0:	mov	w0, #0x0                   	// #0
   16cb4:	ldp	x19, x20, [sp, #16]
   16cb8:	ldp	x21, x22, [sp, #32]
   16cbc:	ldp	x23, x24, [sp, #48]
   16cc0:	ldp	x25, x26, [sp, #64]
   16cc4:	ldp	x27, x28, [sp, #80]
   16cc8:	ldp	x29, x30, [sp], #96
   16ccc:	ret
   16cd0:	cmp	w0, #0x3
   16cd4:	b.eq	16d60 <lzma_mode_is_supported@@XZ_5.0+0x5960>  // b.none
   16cd8:	cmp	w0, #0x4
   16cdc:	b.ne	16bd0 <lzma_mode_is_supported@@XZ_5.0+0x57d0>  // b.any
   16ce0:	ldr	x1, [x19, #136]
   16ce4:	sub	x28, x20, x26
   16ce8:	ldr	x3, [x27]
   16cec:	cmp	x28, x1
   16cf0:	ldr	w2, [x27, #24]
   16cf4:	csel	x28, x28, x1, ls  // ls = plast
   16cf8:	add	x0, x22, x26
   16cfc:	add	x26, x26, x28
   16d00:	sub	x1, x2, x1
   16d04:	mov	x2, x28
   16d08:	add	x1, x3, x1
   16d0c:	bl	3090 <memcpy@plt>
   16d10:	ldr	x2, [x19, #136]
   16d14:	str	x26, [x21]
   16d18:	sub	x28, x2, x28
   16d1c:	str	x28, [x19, #136]
   16d20:	cbnz	x28, 16cb0 <lzma_mode_is_supported@@XZ_5.0+0x58b0>
   16d24:	str	wzr, [x19]
   16d28:	b	16bd0 <lzma_mode_is_supported@@XZ_5.0+0x57d0>
   16d2c:	ldp	w25, w28, [x27, #24]
   16d30:	ldr	w0, [x27, #36]
   16d34:	add	w0, w28, w0
   16d38:	cmp	w25, w0
   16d3c:	b.eq	16f10 <lzma_mode_is_supported@@XZ_5.0+0x5b10>  // b.none
   16d40:	ldrb	w1, [x19, #129]
   16d44:	ldr	x0, [x19, #8]
   16d48:	cbnz	w1, 16e64 <lzma_mode_is_supported@@XZ_5.0+0x5a64>
   16d4c:	mov	w1, #0x1                   	// #1
   16d50:	mov	w2, #0x200000              	// #2097152
   16d54:	str	w1, [x19]
   16d58:	stp	xzr, xzr, [x19, #136]
   16d5c:	b	16c00 <lzma_mode_is_supported@@XZ_5.0+0x5800>
   16d60:	mov	x5, x20
   16d64:	mov	x4, x21
   16d68:	mov	x3, x22
   16d6c:	mov	x1, x24
   16d70:	mov	x0, x23
   16d74:	mov	x2, #0x3                   	// #3
   16d78:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   16d7c:	ldr	x0, [x19, #152]
   16d80:	cmp	x0, #0x3
   16d84:	b.ne	16cb0 <lzma_mode_is_supported@@XZ_5.0+0x58b0>  // b.any
   16d88:	mov	w0, #0x4                   	// #4
   16d8c:	str	w0, [x19]
   16d90:	ldr	x26, [x21]
   16d94:	b	16ce0 <lzma_mode_is_supported@@XZ_5.0+0x58e0>
   16d98:	ldr	x2, [x19, #144]
   16d9c:	mov	x1, x24
   16da0:	mov	x5, x20
   16da4:	mov	x4, x21
   16da8:	mov	x3, x22
   16dac:	mov	x0, x23
   16db0:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   16db4:	ldp	x0, x1, [x19, #144]
   16db8:	cmp	x1, x0
   16dbc:	b.ne	16cb0 <lzma_mode_is_supported@@XZ_5.0+0x58b0>  // b.any
   16dc0:	str	wzr, [x19]
   16dc4:	ldr	x26, [x21]
   16dc8:	b	16bd0 <lzma_mode_is_supported@@XZ_5.0+0x57d0>
   16dcc:	ldrb	w8, [x19, #128]
   16dd0:	cbz	w8, 16e7c <lzma_mode_is_supported@@XZ_5.0+0x5a7c>
   16dd4:	ldrb	w0, [x19, #130]
   16dd8:	cbz	w0, 16ec0 <lzma_mode_is_supported@@XZ_5.0+0x5ac0>
   16ddc:	mov	w10, #0xffffffe0            	// #-32
   16de0:	mov	x1, #0x5                   	// #5
   16de4:	mov	x3, #0x4                   	// #4
   16de8:	mov	x4, #0x3                   	// #3
   16dec:	mov	x6, #0x2                   	// #2
   16df0:	mov	w0, #0xe0                  	// #224
   16df4:	mov	x7, #0x1                   	// #1
   16df8:	mov	x9, #0x0                   	// #0
   16dfc:	strb	w10, [x19, #160]
   16e00:	sub	x5, x5, #0x1
   16e04:	add	x10, x19, x9
   16e08:	add	x7, x19, x7
   16e0c:	add	x6, x19, x6
   16e10:	lsr	x11, x5, #16
   16e14:	str	x9, [x19, #152]
   16e18:	add	w0, w0, w11
   16e1c:	add	x4, x19, x4
   16e20:	strb	w0, [x10, #160]
   16e24:	lsr	x9, x5, #8
   16e28:	sub	x0, x2, #0x1
   16e2c:	add	x3, x19, x3
   16e30:	strb	w9, [x7, #160]
   16e34:	strb	w5, [x6, #160]
   16e38:	lsr	x5, x0, #8
   16e3c:	strb	w5, [x4, #160]
   16e40:	strb	w0, [x3, #160]
   16e44:	cbnz	w8, 16eac <lzma_mode_is_supported@@XZ_5.0+0x5aac>
   16e48:	add	x2, x2, #0x6
   16e4c:	mov	w0, #0x2                   	// #2
   16e50:	str	w0, [x19]
   16e54:	strh	wzr, [x19, #128]
   16e58:	strb	wzr, [x19, #130]
   16e5c:	str	x2, [x19, #144]
   16e60:	b	16d9c <lzma_mode_is_supported@@XZ_5.0+0x599c>
   16e64:	add	x1, x19, #0x10
   16e68:	bl	10fa0 <lzma_lzma_preset@@XZ_5.0+0x14d8>
   16e6c:	cbnz	w0, 16cb4 <lzma_mode_is_supported@@XZ_5.0+0x58b4>
   16e70:	ldp	w25, w28, [x27, #24]
   16e74:	ldr	x0, [x19, #8]
   16e78:	b	16d4c <lzma_mode_is_supported@@XZ_5.0+0x594c>
   16e7c:	ldrb	w0, [x19, #129]
   16e80:	cbz	w0, 16ee8 <lzma_mode_is_supported@@XZ_5.0+0x5ae8>
   16e84:	mov	w10, #0xffffffa0            	// #-96
   16e88:	mov	x1, #0x6                   	// #6
   16e8c:	mov	x3, #0x5                   	// #5
   16e90:	mov	x4, #0x4                   	// #4
   16e94:	mov	x6, #0x3                   	// #3
   16e98:	mov	w0, #0xa0                  	// #160
   16e9c:	mov	x7, #0x2                   	// #2
   16ea0:	mov	x9, #0x1                   	// #1
   16ea4:	strb	w10, [x19, #161]
   16ea8:	b	16e00 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   16eac:	add	x1, x23, x1
   16eb0:	add	x0, x19, #0x10
   16eb4:	bl	11348 <lzma_lzma_preset@@XZ_5.0+0x1880>
   16eb8:	ldr	x2, [x19, #144]
   16ebc:	b	16e48 <lzma_mode_is_supported@@XZ_5.0+0x5a48>
   16ec0:	mov	w10, #0xffffffc0            	// #-64
   16ec4:	mov	x1, #0x5                   	// #5
   16ec8:	mov	x3, #0x4                   	// #4
   16ecc:	mov	x4, #0x3                   	// #3
   16ed0:	mov	x6, #0x2                   	// #2
   16ed4:	mov	w0, #0xc0                  	// #192
   16ed8:	mov	x7, #0x1                   	// #1
   16edc:	mov	x9, #0x0                   	// #0
   16ee0:	strb	w10, [x19, #160]
   16ee4:	b	16e00 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   16ee8:	mov	w10, #0xffffff80            	// #-128
   16eec:	mov	x1, #0x6                   	// #6
   16ef0:	mov	x3, #0x5                   	// #5
   16ef4:	mov	x4, #0x4                   	// #4
   16ef8:	mov	x6, #0x3                   	// #3
   16efc:	mov	w0, #0x80                  	// #128
   16f00:	mov	x7, #0x2                   	// #2
   16f04:	mov	x9, #0x1                   	// #1
   16f08:	strb	w10, [x19, #161]
   16f0c:	b	16e00 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   16f10:	ldr	w0, [x27, #104]
   16f14:	cmp	w0, #0x3
   16f18:	b.eq	16f28 <lzma_mode_is_supported@@XZ_5.0+0x5b28>  // b.none
   16f1c:	cmp	w0, #0x0
   16f20:	cset	w0, ne  // ne = any
   16f24:	b	16cb4 <lzma_mode_is_supported@@XZ_5.0+0x58b4>
   16f28:	add	x1, x26, #0x1
   16f2c:	strb	wzr, [x22, x26]
   16f30:	str	x1, [x21]
   16f34:	b	16f1c <lzma_mode_is_supported@@XZ_5.0+0x5b1c>
   16f38:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4c00>
   16f3c:	add	x3, x3, #0xa40
   16f40:	b	df78 <lzma_crc64@@XZ_5.0+0x18a0>
   16f44:	nop
   16f48:	stp	x29, x30, [sp, #-16]!
   16f4c:	mov	x29, sp
   16f50:	bl	112d0 <lzma_lzma_preset@@XZ_5.0+0x1808>
   16f54:	add	x1, x0, #0x10, lsl #12
   16f58:	cmn	x0, #0x1
   16f5c:	add	x1, x1, #0xa8
   16f60:	csel	x0, x1, x0, ne  // ne = any
   16f64:	ldp	x29, x30, [sp], #16
   16f68:	ret
   16f6c:	nop
   16f70:	ldr	w0, [x0]
   16f74:	mov	w2, #0x1000                	// #4096
   16f78:	cmp	w0, w2
   16f7c:	csel	w0, w0, w2, cs  // cs = hs, nlast
   16f80:	sub	w0, w0, #0x1
   16f84:	orr	w0, w0, w0, lsr #2
   16f88:	orr	w0, w0, w0, lsr #3
   16f8c:	orr	w0, w0, w0, lsr #4
   16f90:	orr	w0, w0, w0, lsr #8
   16f94:	orr	w0, w0, w0, lsr #16
   16f98:	cmn	w0, #0x1
   16f9c:	b.eq	16ff4 <lzma_mode_is_supported@@XZ_5.0+0x5bf4>  // b.none
   16fa0:	add	w0, w0, #0x1
   16fa4:	mov	w2, #0x1fff                	// #8191
   16fa8:	cmp	w0, w2
   16fac:	b.ls	16fe4 <lzma_mode_is_supported@@XZ_5.0+0x5be4>  // b.plast
   16fb0:	mov	w2, #0x1ffffff             	// #33554431
   16fb4:	cmp	w0, w2
   16fb8:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   16fbc:	b.ls	17004 <lzma_mode_is_supported@@XZ_5.0+0x5c04>  // b.plast
   16fc0:	ldr	x2, [x2, #4008]
   16fc4:	lsr	w0, w0, #24
   16fc8:	ldrb	w0, [x2, w0, uxtw]
   16fcc:	add	w0, w0, #0x30
   16fd0:	and	w0, w0, #0xff
   16fd4:	sub	w0, w0, #0x18
   16fd8:	strb	w0, [x1]
   16fdc:	mov	w0, #0x0                   	// #0
   16fe0:	ret
   16fe4:	adrp	x2, 33000 <lzma_mode_is_supported@@XZ_5.0+0x21c00>
   16fe8:	ldr	x2, [x2, #4008]
   16fec:	ldrb	w0, [x2, w0, uxtw]
   16ff0:	b	16fd4 <lzma_mode_is_supported@@XZ_5.0+0x5bd4>
   16ff4:	mov	w0, #0x28                  	// #40
   16ff8:	strb	w0, [x1]
   16ffc:	mov	w0, #0x0                   	// #0
   17000:	ret
   17004:	ldr	x2, [x2, #4008]
   17008:	lsr	w0, w0, #12
   1700c:	ldrb	w0, [x2, w0, uxtw]
   17010:	add	w0, w0, #0x18
   17014:	and	w0, w0, #0xff
   17018:	b	16fd4 <lzma_mode_is_supported@@XZ_5.0+0x5bd4>
   1701c:	nop
   17020:	ldr	w0, [x0]
   17024:	mov	x1, #0x100000              	// #1048576
   17028:	add	x0, x0, x0, lsl #1
   1702c:	cmp	x0, x1
   17030:	csel	x0, x0, x1, cs  // cs = hs, nlast
   17034:	ret
   17038:	stp	x29, x30, [sp, #-48]!
   1703c:	mov	x29, sp
   17040:	ldr	x4, [x0]
   17044:	stp	x19, x20, [sp, #16]
   17048:	mov	x20, x1
   1704c:	cbz	x4, 1708c <lzma_mode_is_supported@@XZ_5.0+0x5c8c>
   17050:	ldr	x1, [x2, #8]
   17054:	mov	w5, #0x1                   	// #1
   17058:	str	wzr, [x4]
   1705c:	mov	w0, #0x1                   	// #1
   17060:	strb	w5, [x4, #64]
   17064:	cbz	x1, 17074 <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   17068:	ldr	w0, [x2, #16]
   1706c:	cmp	w0, #0x0
   17070:	cset	w0, eq  // eq = none
   17074:	strb	w0, [x4, #65]
   17078:	mov	x1, x20
   1707c:	ldp	x19, x20, [sp, #16]
   17080:	add	x0, x4, #0x8
   17084:	ldp	x29, x30, [sp], #48
   17088:	b	16688 <lzma_mode_is_supported@@XZ_5.0+0x5288>
   1708c:	mov	x19, x0
   17090:	mov	x0, #0xb8                  	// #184
   17094:	stp	x2, x3, [sp, #32]
   17098:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   1709c:	mov	x4, x0
   170a0:	cbz	x0, 170d0 <lzma_mode_is_supported@@XZ_5.0+0x5cd0>
   170a4:	adrp	x1, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   170a8:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   170ac:	add	x1, x1, #0x110
   170b0:	add	x0, x0, #0xe0
   170b4:	stp	x4, x1, [x19]
   170b8:	stp	xzr, xzr, [x4, #8]
   170bc:	stp	xzr, xzr, [x4, #24]
   170c0:	str	x0, [x19, #32]
   170c4:	str	xzr, [x4, #40]
   170c8:	ldp	x2, x3, [sp, #32]
   170cc:	b	17050 <lzma_mode_is_supported@@XZ_5.0+0x5c50>
   170d0:	mov	w0, #0x5                   	// #5
   170d4:	ldp	x19, x20, [sp, #16]
   170d8:	ldp	x29, x30, [sp], #48
   170dc:	ret
   170e0:	stp	x29, x30, [sp, #-32]!
   170e4:	mov	x29, sp
   170e8:	stp	x19, x20, [sp, #16]
   170ec:	mov	x19, x0
   170f0:	mov	x20, x1
   170f4:	ldr	x0, [x0, #8]
   170f8:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
   170fc:	mov	x1, x20
   17100:	mov	x0, x19
   17104:	ldp	x19, x20, [sp, #16]
   17108:	ldp	x29, x30, [sp], #32
   1710c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
   17110:	stp	x29, x30, [sp, #-96]!
   17114:	mov	x29, sp
   17118:	stp	x23, x24, [sp, #48]
   1711c:	mov	x23, x0
   17120:	mov	w24, #0x6                   	// #6
   17124:	stp	x19, x20, [sp, #16]
   17128:	mov	x19, x0
   1712c:	ldr	w5, [x23], #72
   17130:	ldr	x20, [x3]
   17134:	stp	x21, x22, [sp, #32]
   17138:	mov	x21, x3
   1713c:	mov	x22, x1
   17140:	stp	x25, x26, [sp, #64]
   17144:	mov	x26, #0x3                   	// #3
   17148:	stp	x27, x28, [sp, #80]
   1714c:	mov	x27, x2
   17150:	mov	x28, x4
   17154:	movk	x26, #0x7, lsl #32
   17158:	mov	w25, #0x1                   	// #1
   1715c:	cmp	x28, x20
   17160:	b.hi	17228 <lzma_mode_is_supported@@XZ_5.0+0x5e28>  // b.pmore
   17164:	cmp	w5, #0x6
   17168:	b.ne	172a8 <lzma_mode_is_supported@@XZ_5.0+0x5ea8>  // b.any
   1716c:	ldp	x0, x5, [x19, #8]
   17170:	mov	x3, x21
   17174:	mov	x2, x27
   17178:	mov	x1, x22
   1717c:	mov	x4, x28
   17180:	blr	x5
   17184:	ldr	x2, [x21]
   17188:	ldr	x1, [x19, #56]
   1718c:	sub	x3, x2, x20
   17190:	cmp	x1, x3
   17194:	b.cc	17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>  // b.lo, b.ul, b.last
   17198:	sub	x1, x1, x2
   1719c:	cmp	w0, #0x1
   171a0:	add	x20, x1, x20
   171a4:	str	x20, [x19, #56]
   171a8:	b.ne	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>  // b.any
   171ac:	cbnz	x20, 17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>
   171b0:	str	wzr, [x19]
   171b4:	cmp	x2, x28
   171b8:	b.cs	172a8 <lzma_mode_is_supported@@XZ_5.0+0x5ea8>  // b.hs, b.nlast
   171bc:	mov	x20, x2
   171c0:	ldrb	w0, [x27, x20]
   171c4:	add	x20, x20, #0x1
   171c8:	str	x20, [x21]
   171cc:	cbz	w0, 1743c <lzma_mode_is_supported@@XZ_5.0+0x603c>
   171d0:	cmp	w0, #0xdf
   171d4:	ccmp	w0, #0x1, #0x4, ls  // ls = plast
   171d8:	b.eq	173f4 <lzma_mode_is_supported@@XZ_5.0+0x5ff4>  // b.none
   171dc:	ldrb	w1, [x19, #65]
   171e0:	cbnz	w1, 17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>
   171e4:	cmp	w0, #0x7f
   171e8:	b.ls	17404 <lzma_mode_is_supported@@XZ_5.0+0x6004>  // b.plast
   171ec:	ubfiz	x1, x0, #16, #5
   171f0:	str	w25, [x19]
   171f4:	str	x1, [x19, #48]
   171f8:	cmp	w0, #0xbf
   171fc:	b.hi	17424 <lzma_mode_is_supported@@XZ_5.0+0x6024>  // b.pmore
   17200:	ldrb	w1, [x19, #64]
   17204:	cbnz	w1, 17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>
   17208:	str	w24, [x19, #4]
   1720c:	cmp	w0, #0x9f
   17210:	b.ls	17410 <lzma_mode_is_supported@@XZ_5.0+0x6010>  // b.plast
   17214:	ldr	x0, [x19, #8]
   17218:	mov	x1, x23
   1721c:	ldr	x2, [x19, #24]
   17220:	blr	x2
   17224:	b	17410 <lzma_mode_is_supported@@XZ_5.0+0x6010>
   17228:	cmp	w5, #0x3
   1722c:	b.eq	17388 <lzma_mode_is_supported@@XZ_5.0+0x5f88>  // b.none
   17230:	b.ls	17308 <lzma_mode_is_supported@@XZ_5.0+0x5f08>  // b.plast
   17234:	cmp	w5, #0x5
   17238:	b.eq	173b4 <lzma_mode_is_supported@@XZ_5.0+0x5fb4>  // b.none
   1723c:	b.ls	172b0 <lzma_mode_is_supported@@XZ_5.0+0x5eb0>  // b.plast
   17240:	cmp	w5, #0x6
   17244:	b.eq	1716c <lzma_mode_is_supported@@XZ_5.0+0x5d6c>  // b.none
   17248:	cmp	w5, #0x7
   1724c:	b.ne	172e8 <lzma_mode_is_supported@@XZ_5.0+0x5ee8>  // b.any
   17250:	mov	x4, x22
   17254:	sub	x0, x28, x20
   17258:	ldr	x2, [x19, #56]
   1725c:	mov	x1, x21
   17260:	ldr	x3, [x4], #8
   17264:	cmp	x0, x2
   17268:	ldr	x5, [x22, #24]
   1726c:	add	x2, x2, x20
   17270:	csel	x2, x2, x28, hi  // hi = pmore
   17274:	mov	x0, x27
   17278:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   1727c:	ldr	x1, [x19, #56]
   17280:	sub	x0, x1, x0
   17284:	str	x0, [x19, #56]
   17288:	ldp	x2, x1, [x22, #8]
   1728c:	cmp	x2, x1
   17290:	b.hi	173ec <lzma_mode_is_supported@@XZ_5.0+0x5fec>  // b.pmore
   17294:	cbnz	x0, 172a8 <lzma_mode_is_supported@@XZ_5.0+0x5ea8>
   17298:	ldr	x20, [x21]
   1729c:	str	wzr, [x19]
   172a0:	cmp	x28, x20
   172a4:	b.hi	171c0 <lzma_mode_is_supported@@XZ_5.0+0x5dc0>  // b.pmore
   172a8:	mov	w0, #0x0                   	// #0
   172ac:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   172b0:	cmp	w5, #0x4
   172b4:	b.ne	172e8 <lzma_mode_is_supported@@XZ_5.0+0x5ee8>  // b.any
   172b8:	ldrb	w1, [x27, x20]
   172bc:	add	x2, x20, #0x1
   172c0:	ldr	x0, [x19, #56]
   172c4:	add	x1, x1, #0x1
   172c8:	ldr	w5, [x19, #4]
   172cc:	mov	x20, x2
   172d0:	add	x0, x0, x1
   172d4:	str	w5, [x19]
   172d8:	str	x2, [x21]
   172dc:	str	x0, [x19, #56]
   172e0:	b	1715c <lzma_mode_is_supported@@XZ_5.0+0x5d5c>
   172e4:	cbz	w5, 171c0 <lzma_mode_is_supported@@XZ_5.0+0x5dc0>
   172e8:	mov	w0, #0xb                   	// #11
   172ec:	ldp	x19, x20, [sp, #16]
   172f0:	ldp	x21, x22, [sp, #32]
   172f4:	ldp	x23, x24, [sp, #48]
   172f8:	ldp	x25, x26, [sp, #64]
   172fc:	ldp	x27, x28, [sp, #80]
   17300:	ldp	x29, x30, [sp], #96
   17304:	ret
   17308:	cmp	w5, #0x1
   1730c:	b.eq	17354 <lzma_mode_is_supported@@XZ_5.0+0x5f54>  // b.none
   17310:	cmp	w5, #0x2
   17314:	b.ne	172e4 <lzma_mode_is_supported@@XZ_5.0+0x5ee4>  // b.any
   17318:	ldr	x1, [x19, #48]
   1731c:	ldrb	w3, [x27, x20]
   17320:	add	x20, x20, #0x1
   17324:	ldr	x0, [x19, #8]
   17328:	add	x3, x3, #0x1
   1732c:	ldr	x4, [x19, #32]
   17330:	add	x1, x3, x1
   17334:	mov	w3, #0x3                   	// #3
   17338:	str	x20, [x21]
   1733c:	str	w3, [x19]
   17340:	str	x1, [x19, #48]
   17344:	blr	x4
   17348:	ldr	w5, [x19]
   1734c:	ldr	x20, [x21]
   17350:	b	1715c <lzma_mode_is_supported@@XZ_5.0+0x5d5c>
   17354:	ldrb	w0, [x27, x20]
   17358:	mov	w2, #0x2                   	// #2
   1735c:	ldr	x1, [x19, #48]
   17360:	add	x20, x20, #0x1
   17364:	ubfiz	x0, x0, #8, #8
   17368:	str	w2, [x19]
   1736c:	add	x1, x1, x0
   17370:	str	x20, [x21]
   17374:	str	x1, [x19, #48]
   17378:	cmp	x20, x28
   1737c:	b.cc	1731c <lzma_mode_is_supported@@XZ_5.0+0x5f1c>  // b.lo, b.ul, b.last
   17380:	mov	w0, #0x0                   	// #0
   17384:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   17388:	ldrb	w0, [x27, x20]
   1738c:	mov	w1, #0x4                   	// #4
   17390:	add	x20, x20, #0x1
   17394:	str	w1, [x19]
   17398:	str	x20, [x21]
   1739c:	cmp	x20, x28
   173a0:	ubfiz	x0, x0, #8, #8
   173a4:	str	x0, [x19, #56]
   173a8:	b.cc	172b8 <lzma_mode_is_supported@@XZ_5.0+0x5eb8>  // b.lo, b.ul, b.last
   173ac:	mov	w0, #0x0                   	// #0
   173b0:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   173b4:	ldrb	w1, [x27, x20]
   173b8:	add	x20, x20, #0x1
   173bc:	str	x20, [x21]
   173c0:	mov	x0, x23
   173c4:	bl	167c0 <lzma_mode_is_supported@@XZ_5.0+0x53c0>
   173c8:	tst	w0, #0xff
   173cc:	b.ne	17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>  // b.any
   173d0:	ldr	x0, [x19, #8]
   173d4:	mov	x1, x23
   173d8:	ldr	x2, [x19, #24]
   173dc:	blr	x2
   173e0:	str	w24, [x19]
   173e4:	ldr	x20, [x21]
   173e8:	b	1716c <lzma_mode_is_supported@@XZ_5.0+0x5d6c>
   173ec:	str	x2, [x22, #16]
   173f0:	b	17294 <lzma_mode_is_supported@@XZ_5.0+0x5e94>
   173f4:	mov	w1, #0x101                 	// #257
   173f8:	strh	w1, [x19, #64]
   173fc:	cmp	w0, #0x7f
   17400:	b.hi	171ec <lzma_mode_is_supported@@XZ_5.0+0x5dec>  // b.pmore
   17404:	cmp	w0, #0x2
   17408:	b.hi	17434 <lzma_mode_is_supported@@XZ_5.0+0x6034>  // b.pmore
   1740c:	str	x26, [x19]
   17410:	ldrb	w0, [x19, #65]
   17414:	cbnz	w0, 17444 <lzma_mode_is_supported@@XZ_5.0+0x6044>
   17418:	ldr	w5, [x19]
   1741c:	ldr	x20, [x21]
   17420:	b	1715c <lzma_mode_is_supported@@XZ_5.0+0x5d5c>
   17424:	mov	w0, #0x5                   	// #5
   17428:	str	w0, [x19, #4]
   1742c:	strb	wzr, [x19, #64]
   17430:	b	17410 <lzma_mode_is_supported@@XZ_5.0+0x6010>
   17434:	mov	w0, #0x9                   	// #9
   17438:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   1743c:	mov	w0, #0x1                   	// #1
   17440:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   17444:	mov	w1, #0x1                   	// #1
   17448:	mov	w0, #0x0                   	// #0
   1744c:	strb	w1, [x22, #40]
   17450:	strb	wzr, [x19, #65]
   17454:	b	172ec <lzma_mode_is_supported@@XZ_5.0+0x5eec>
   17458:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   1745c:	add	x3, x3, #0x38
   17460:	b	f918 <lzma_mf_is_supported@@XZ_5.0+0x1790>
   17464:	nop
   17468:	stp	x29, x30, [sp, #-16]!
   1746c:	mov	x29, sp
   17470:	bl	16830 <lzma_mode_is_supported@@XZ_5.0+0x5430>
   17474:	add	x0, x0, #0xb8
   17478:	ldp	x29, x30, [sp], #16
   1747c:	ret
   17480:	cmp	x3, #0x1
   17484:	b.ne	17508 <lzma_mode_is_supported@@XZ_5.0+0x6108>  // b.any
   17488:	stp	x29, x30, [sp, #-32]!
   1748c:	mov	x29, sp
   17490:	stp	x19, x20, [sp, #16]
   17494:	mov	x19, x2
   17498:	mov	x20, x0
   1749c:	ldrb	w2, [x2]
   174a0:	mov	w0, #0x8                   	// #8
   174a4:	cmp	w2, #0x28
   174a8:	and	w2, w2, #0xc0
   174ac:	ccmp	w2, #0x0, #0x0, ls  // ls = plast
   174b0:	b.ne	174fc <lzma_mode_is_supported@@XZ_5.0+0x60fc>  // b.any
   174b4:	mov	x0, #0x70                  	// #112
   174b8:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   174bc:	mov	x1, x0
   174c0:	cbz	x0, 17510 <lzma_mode_is_supported@@XZ_5.0+0x6110>
   174c4:	ldrb	w3, [x19]
   174c8:	mov	w4, #0xffffffff            	// #-1
   174cc:	mov	w0, #0x0                   	// #0
   174d0:	str	x1, [x20]
   174d4:	and	w2, w3, #0x1
   174d8:	cmp	w3, #0x28
   174dc:	lsr	w3, w3, #1
   174e0:	orr	w2, w2, #0x2
   174e4:	add	w3, w3, #0xb
   174e8:	str	xzr, [x1, #8]
   174ec:	str	wzr, [x1, #16]
   174f0:	lsl	w2, w2, w3
   174f4:	csel	w2, w2, w4, ne  // ne = any
   174f8:	str	w2, [x1]
   174fc:	ldp	x19, x20, [sp, #16]
   17500:	ldp	x29, x30, [sp], #32
   17504:	ret
   17508:	mov	w0, #0x8                   	// #8
   1750c:	ret
   17510:	mov	w0, #0x5                   	// #5
   17514:	b	174fc <lzma_mode_is_supported@@XZ_5.0+0x60fc>
   17518:	stp	x29, x30, [sp, #-32]!
   1751c:	mov	x29, sp
   17520:	stp	x19, x20, [sp, #16]
   17524:	mov	x19, x0
   17528:	mov	x20, x1
   1752c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
   17530:	mov	x1, x20
   17534:	mov	x0, x19
   17538:	ldp	x19, x20, [sp, #16]
   1753c:	ldp	x29, x30, [sp], #32
   17540:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
   17544:	nop
   17548:	stp	x29, x30, [sp, #-48]!
   1754c:	mov	x29, sp
   17550:	stp	x19, x20, [sp, #16]
   17554:	ldr	x19, [x0]
   17558:	stp	x21, x22, [sp, #32]
   1755c:	mov	x21, x2
   17560:	mov	x22, x1
   17564:	cbz	x19, 175e8 <lzma_mode_is_supported@@XZ_5.0+0x61e8>
   17568:	ldr	x0, [x21, #16]
   1756c:	cbz	x0, 175d4 <lzma_mode_is_supported@@XZ_5.0+0x61d4>
   17570:	ldr	w1, [x0]
   17574:	cbnz	w1, 175d4 <lzma_mode_is_supported@@XZ_5.0+0x61d4>
   17578:	ldr	w1, [x0, #4]
   1757c:	mov	w0, #0x8                   	// #8
   17580:	sub	w2, w1, #0x1
   17584:	cmp	w2, #0xff
   17588:	b.ls	1759c <lzma_mode_is_supported@@XZ_5.0+0x619c>  // b.plast
   1758c:	ldp	x19, x20, [sp, #16]
   17590:	ldp	x21, x22, [sp, #32]
   17594:	ldp	x29, x30, [sp], #48
   17598:	ret
   1759c:	mov	w1, w1
   175a0:	str	x1, [x19, #72]
   175a4:	strb	wzr, [x19, #80]
   175a8:	add	x0, x19, #0x51
   175ac:	mov	x2, #0x100                 	// #256
   175b0:	mov	w1, #0x0                   	// #0
   175b4:	bl	3230 <memset@plt>
   175b8:	add	x2, x21, #0x18
   175bc:	mov	x1, x22
   175c0:	mov	x0, x19
   175c4:	ldp	x19, x20, [sp, #16]
   175c8:	ldp	x21, x22, [sp, #32]
   175cc:	ldp	x29, x30, [sp], #48
   175d0:	b	3880 <lzma_version_string@@XZ_5.0+0x198>
   175d4:	mov	w0, #0x8                   	// #8
   175d8:	ldp	x19, x20, [sp, #16]
   175dc:	ldp	x21, x22, [sp, #32]
   175e0:	ldp	x29, x30, [sp], #48
   175e4:	ret
   175e8:	mov	x20, x0
   175ec:	mov	x0, #0x158                 	// #344
   175f0:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   175f4:	mov	x19, x0
   175f8:	cbz	x0, 17628 <lzma_mode_is_supported@@XZ_5.0+0x6228>
   175fc:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   17600:	mov	x1, #0xffffffffffffffff    	// #-1
   17604:	add	x0, x0, #0x518
   17608:	stp	xzr, x1, [x19]
   1760c:	str	x19, [x20]
   17610:	stp	xzr, xzr, [x19, #16]
   17614:	stp	xzr, xzr, [x19, #32]
   17618:	str	x0, [x20, #32]
   1761c:	stp	xzr, xzr, [x19, #48]
   17620:	str	xzr, [x19, #64]
   17624:	b	17568 <lzma_mode_is_supported@@XZ_5.0+0x6168>
   17628:	mov	w0, #0x5                   	// #5
   1762c:	b	1758c <lzma_mode_is_supported@@XZ_5.0+0x618c>
   17630:	mov	x1, x0
   17634:	cbz	x0, 1765c <lzma_mode_is_supported@@XZ_5.0+0x625c>
   17638:	ldr	w2, [x1]
   1763c:	mov	x0, #0xffffffffffffffff    	// #-1
   17640:	cbnz	w2, 17658 <lzma_mode_is_supported@@XZ_5.0+0x6258>
   17644:	ldr	w1, [x1, #4]
   17648:	mov	x2, #0x158                 	// #344
   1764c:	sub	w1, w1, #0x1
   17650:	cmp	w1, #0xff
   17654:	csel	x0, x0, x2, hi  // hi = pmore
   17658:	ret
   1765c:	mov	x0, #0xffffffffffffffff    	// #-1
   17660:	ret
   17664:	nop
   17668:	sub	sp, sp, #0x40
   1766c:	stp	x29, x30, [sp, #16]
   17670:	add	x29, sp, #0x10
   17674:	ldr	x13, [x0, #24]
   17678:	stp	x19, x20, [sp, #32]
   1767c:	ldr	w12, [sp, #64]
   17680:	stp	x21, x22, [sp, #48]
   17684:	mov	x19, x0
   17688:	mov	x22, x6
   1768c:	mov	x20, x5
   17690:	ldr	x21, [x6]
   17694:	cbz	x13, 17710 <lzma_mode_is_supported@@XZ_5.0+0x6310>
   17698:	ldr	x0, [x0]
   1769c:	str	w12, [sp]
   176a0:	blr	x13
   176a4:	ldr	x1, [x22]
   176a8:	ldr	x6, [x19, #72]
   176ac:	subs	x8, x1, x21
   176b0:	b.eq	176fc <lzma_mode_is_supported@@XZ_5.0+0x62fc>  // b.none
   176b4:	add	x5, x20, x21
   176b8:	ldrb	w9, [x19, #80]
   176bc:	mov	x1, x5
   176c0:	add	x5, x8, x5
   176c4:	add	w7, w9, w1
   176c8:	sub	w3, w7, w1
   176cc:	ldrb	w2, [x1]
   176d0:	add	x4, x6, w3, uxtb
   176d4:	add	x3, x19, w3, uxtb
   176d8:	add	x4, x19, w4, uxtb
   176dc:	ldrb	w4, [x4, #81]
   176e0:	strb	w2, [x3, #81]
   176e4:	sub	w2, w2, w4
   176e8:	strb	w2, [x1], #1
   176ec:	cmp	x5, x1
   176f0:	b.ne	176c8 <lzma_mode_is_supported@@XZ_5.0+0x62c8>  // b.any
   176f4:	sub	w1, w9, w8
   176f8:	strb	w1, [x19, #80]
   176fc:	ldp	x29, x30, [sp, #16]
   17700:	ldp	x19, x20, [sp, #32]
   17704:	ldp	x21, x22, [sp, #48]
   17708:	add	sp, sp, #0x40
   1770c:	ret
   17710:	ldr	x0, [x3]
   17714:	sub	x7, x7, x21
   17718:	mov	x11, x4
   1771c:	mov	x10, x3
   17720:	sub	x9, x4, x0
   17724:	cmp	x9, x7
   17728:	csel	x9, x9, x7, ls  // ls = plast
   1772c:	ldr	x4, [x19, #72]
   17730:	cbz	x9, 17788 <lzma_mode_is_supported@@XZ_5.0+0x6388>
   17734:	ldrb	w3, [x19, #80]
   17738:	add	x5, x5, x21
   1773c:	add	x8, x2, x0
   17740:	mov	x0, #0x0                   	// #0
   17744:	nop
   17748:	sub	w2, w3, w0
   1774c:	ldrb	w1, [x8, x0]
   17750:	add	x7, x4, w2, uxtb
   17754:	add	x2, x19, w2, uxtb
   17758:	add	x7, x19, w7, uxtb
   1775c:	ldrb	w6, [x7, #81]
   17760:	strb	w1, [x2, #81]
   17764:	sub	w1, w1, w6
   17768:	strb	w1, [x5, x0]
   1776c:	add	x0, x0, #0x1
   17770:	cmp	x9, x0
   17774:	b.ne	17748 <lzma_mode_is_supported@@XZ_5.0+0x6348>  // b.any
   17778:	sub	w3, w3, w9
   1777c:	strb	w3, [x19, #80]
   17780:	ldr	x0, [x10]
   17784:	ldr	x21, [x22]
   17788:	add	x8, x9, x0
   1778c:	cmp	w12, #0x0
   17790:	add	x5, x9, x21
   17794:	ccmp	x8, x11, #0x0, ne  // ne = any
   17798:	str	x5, [x22]
   1779c:	cset	w0, eq  // eq = none
   177a0:	str	x8, [x10]
   177a4:	ldp	x29, x30, [sp, #16]
   177a8:	ldp	x19, x20, [sp, #32]
   177ac:	ldp	x21, x22, [sp, #48]
   177b0:	add	sp, sp, #0x40
   177b4:	ret
   177b8:	add	x2, x3, #0x10
   177bc:	b	3908 <lzma_version_string@@XZ_5.0+0x220>
   177c0:	adrp	x4, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   177c4:	add	x5, x4, #0x668
   177c8:	adrp	x4, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   177cc:	add	x4, x4, #0x7b8
   177d0:	str	x5, [x0, #24]
   177d4:	str	x4, [x0, #64]
   177d8:	b	17548 <lzma_mode_is_supported@@XZ_5.0+0x6148>
   177dc:	nop
   177e0:	stp	x29, x30, [sp, #-32]!
   177e4:	mov	x29, sp
   177e8:	stp	x19, x20, [sp, #16]
   177ec:	mov	x19, x1
   177f0:	mov	x20, x0
   177f4:	bl	17630 <lzma_mode_is_supported@@XZ_5.0+0x6230>
   177f8:	cmn	x0, #0x1
   177fc:	b.eq	1781c <lzma_mode_is_supported@@XZ_5.0+0x641c>  // b.none
   17800:	ldr	w1, [x20, #4]
   17804:	mov	w0, #0x0                   	// #0
   17808:	sub	w1, w1, #0x1
   1780c:	strb	w1, [x19]
   17810:	ldp	x19, x20, [sp, #16]
   17814:	ldp	x29, x30, [sp], #32
   17818:	ret
   1781c:	mov	w0, #0xb                   	// #11
   17820:	ldp	x19, x20, [sp, #16]
   17824:	ldp	x29, x30, [sp], #32
   17828:	ret
   1782c:	nop
   17830:	sub	sp, sp, #0x40
   17834:	stp	x29, x30, [sp, #16]
   17838:	add	x29, sp, #0x10
   1783c:	stp	x19, x20, [sp, #32]
   17840:	mov	x19, x0
   17844:	ldr	w0, [sp, #64]
   17848:	str	w0, [sp]
   1784c:	mov	x20, x5
   17850:	stp	x21, x22, [sp, #48]
   17854:	mov	x21, x6
   17858:	ldr	x0, [x19]
   1785c:	ldr	x8, [x19, #24]
   17860:	ldr	x22, [x6]
   17864:	blr	x8
   17868:	ldr	x1, [x21]
   1786c:	ldr	x7, [x19, #72]
   17870:	subs	x9, x1, x22
   17874:	b.eq	178c8 <lzma_mode_is_supported@@XZ_5.0+0x64c8>  // b.none
   17878:	add	x6, x20, x22
   1787c:	ldrb	w10, [x19, #80]
   17880:	mov	x2, x6
   17884:	add	x6, x9, x6
   17888:	add	w8, w10, w2
   1788c:	nop
   17890:	sub	w3, w8, w2
   17894:	ldrb	w5, [x2]
   17898:	add	x4, x7, w3, uxtb
   1789c:	add	x3, x19, w3, uxtb
   178a0:	add	x4, x19, w4, uxtb
   178a4:	ldrb	w1, [x4, #81]
   178a8:	add	w1, w1, w5
   178ac:	and	w1, w1, #0xff
   178b0:	strb	w1, [x2], #1
   178b4:	strb	w1, [x3, #81]
   178b8:	cmp	x2, x6
   178bc:	b.ne	17890 <lzma_mode_is_supported@@XZ_5.0+0x6490>  // b.any
   178c0:	sub	w1, w10, w9
   178c4:	strb	w1, [x19, #80]
   178c8:	ldp	x29, x30, [sp, #16]
   178cc:	ldp	x19, x20, [sp, #32]
   178d0:	ldp	x21, x22, [sp, #48]
   178d4:	add	sp, sp, #0x40
   178d8:	ret
   178dc:	nop
   178e0:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   178e4:	add	x3, x3, #0x830
   178e8:	str	x3, [x0, #24]
   178ec:	b	17548 <lzma_mode_is_supported@@XZ_5.0+0x6148>
   178f0:	cmp	x3, #0x1
   178f4:	b.eq	17900 <lzma_mode_is_supported@@XZ_5.0+0x6500>  // b.none
   178f8:	mov	w0, #0x8                   	// #8
   178fc:	ret
   17900:	stp	x29, x30, [sp, #-32]!
   17904:	mov	x29, sp
   17908:	stp	x19, x20, [sp, #16]
   1790c:	mov	x19, x0
   17910:	mov	x20, x2
   17914:	mov	x0, #0x28                  	// #40
   17918:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   1791c:	mov	x1, x0
   17920:	cbz	x0, 17944 <lzma_mode_is_supported@@XZ_5.0+0x6544>
   17924:	ldrb	w2, [x20]
   17928:	mov	w0, #0x0                   	// #0
   1792c:	str	x1, [x19]
   17930:	add	w2, w2, #0x1
   17934:	stp	wzr, w2, [x1]
   17938:	ldp	x19, x20, [sp, #16]
   1793c:	ldp	x29, x30, [sp], #32
   17940:	ret
   17944:	mov	w0, #0x5                   	// #5
   17948:	b	17938 <lzma_mode_is_supported@@XZ_5.0+0x6538>
   1794c:	nop
   17950:	add	x2, x3, #0x10
   17954:	b	3908 <lzma_version_string@@XZ_5.0+0x220>
   17958:	stp	x29, x30, [sp, #-32]!
   1795c:	mov	x29, sp
   17960:	stp	x19, x20, [sp, #16]
   17964:	mov	x19, x0
   17968:	mov	x20, x1
   1796c:	bl	3950 <lzma_version_string@@XZ_5.0+0x268>
   17970:	ldr	x0, [x19, #88]
   17974:	mov	x1, x20
   17978:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
   1797c:	mov	x1, x20
   17980:	mov	x0, x19
   17984:	ldp	x19, x20, [sp, #16]
   17988:	ldp	x29, x30, [sp], #32
   1798c:	b	3798 <lzma_version_string@@XZ_5.0+0xb0>
   17990:	sub	sp, sp, #0x40
   17994:	stp	x29, x30, [sp, #16]
   17998:	add	x29, sp, #0x10
   1799c:	ldr	x11, [x0, #24]
   179a0:	stp	x19, x20, [sp, #32]
   179a4:	mov	x19, x0
   179a8:	cbz	x11, 179dc <lzma_mode_is_supported@@XZ_5.0+0x65dc>
   179ac:	ldr	w8, [sp, #64]
   179b0:	ldr	x0, [x0]
   179b4:	str	w8, [sp]
   179b8:	blr	x11
   179bc:	cmp	w0, #0x1
   179c0:	b.ne	179cc <lzma_mode_is_supported@@XZ_5.0+0x65cc>  // b.any
   179c4:	strb	w0, [x19, #72]
   179c8:	mov	w0, #0x0                   	// #0
   179cc:	ldp	x29, x30, [sp, #16]
   179d0:	ldp	x19, x20, [sp, #32]
   179d4:	add	sp, sp, #0x40
   179d8:	ret
   179dc:	mov	x8, x5
   179e0:	mov	x20, x4
   179e4:	str	x21, [sp, #48]
   179e8:	mov	x21, x3
   179ec:	mov	x0, x2
   179f0:	mov	x1, x21
   179f4:	mov	x2, x20
   179f8:	mov	x5, x7
   179fc:	mov	x4, x6
   17a00:	mov	x3, x8
   17a04:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   17a08:	ldr	w0, [sp, #64]
   17a0c:	ldrb	w1, [x19, #73]
   17a10:	cmp	w0, #0x3
   17a14:	mov	w0, #0x0                   	// #0
   17a18:	cset	w2, eq  // eq = none
   17a1c:	tst	w2, w1
   17a20:	b.ne	17a38 <lzma_mode_is_supported@@XZ_5.0+0x6638>  // b.any
   17a24:	ldp	x29, x30, [sp, #16]
   17a28:	ldp	x19, x20, [sp, #32]
   17a2c:	ldr	x21, [sp, #48]
   17a30:	add	sp, sp, #0x40
   17a34:	ret
   17a38:	ldr	x1, [x21]
   17a3c:	cmp	x20, x1
   17a40:	b.ne	17a24 <lzma_mode_is_supported@@XZ_5.0+0x6624>  // b.any
   17a44:	mov	w1, #0x1                   	// #1
   17a48:	strb	w1, [x19, #72]
   17a4c:	ldr	x21, [sp, #48]
   17a50:	b	179cc <lzma_mode_is_supported@@XZ_5.0+0x65cc>
   17a54:	nop
   17a58:	sub	sp, sp, #0x80
   17a5c:	stp	x29, x30, [sp, #16]
   17a60:	add	x29, sp, #0x10
   17a64:	stp	x19, x20, [sp, #32]
   17a68:	mov	x19, x0
   17a6c:	ldr	w0, [sp, #128]
   17a70:	cmp	w0, #0x1
   17a74:	b.eq	17cc4 <lzma_mode_is_supported@@XZ_5.0+0x68c4>  // b.none
   17a78:	stp	x21, x22, [sp, #48]
   17a7c:	mov	x22, x1
   17a80:	mov	x20, x6
   17a84:	stp	x23, x24, [sp, #64]
   17a88:	mov	x23, x2
   17a8c:	mov	x24, x3
   17a90:	ldp	x1, x2, [x19, #112]
   17a94:	stp	x25, x26, [sp, #80]
   17a98:	mov	x25, x4
   17a9c:	stp	x27, x28, [sp, #96]
   17aa0:	add	x26, x19, #0x88
   17aa4:	mov	x28, x5
   17aa8:	mov	x27, x7
   17aac:	cmp	x1, x2
   17ab0:	b.cc	17c58 <lzma_mode_is_supported@@XZ_5.0+0x6858>  // b.lo, b.ul, b.last
   17ab4:	ldr	x9, [x20]
   17ab8:	str	xzr, [x19, #120]
   17abc:	ldr	x21, [x19, #128]
   17ac0:	sub	x0, x27, x9
   17ac4:	subs	x21, x21, x1
   17ac8:	ccmp	x0, x21, #0x2, ne  // ne = any
   17acc:	b.hi	17b84 <lzma_mode_is_supported@@XZ_5.0+0x6784>  // b.pmore
   17ad0:	cbnz	x1, 17ca8 <lzma_mode_is_supported@@XZ_5.0+0x68a8>
   17ad4:	ldr	x7, [x19, #104]
   17ad8:	mov	x4, x25
   17adc:	ldr	w0, [sp, #128]
   17ae0:	mov	x3, x24
   17ae4:	str	w0, [sp]
   17ae8:	mov	x2, x23
   17aec:	mov	x1, x22
   17af0:	add	x6, x19, #0x80
   17af4:	mov	x5, x26
   17af8:	mov	x0, x19
   17afc:	bl	17990 <lzma_mode_is_supported@@XZ_5.0+0x6590>
   17b00:	cbnz	w0, 17c88 <lzma_mode_is_supported@@XZ_5.0+0x6888>
   17b04:	ldp	x5, x0, [x19, #80]
   17b08:	mov	x3, x26
   17b0c:	ldrb	w2, [x19, #73]
   17b10:	ldr	w1, [x19, #96]
   17b14:	ldr	x4, [x19, #128]
   17b18:	blr	x5
   17b1c:	mov	x2, x0
   17b20:	ldrb	w1, [x19, #72]
   17b24:	ldr	w0, [x19, #96]
   17b28:	str	x2, [x19, #120]
   17b2c:	add	w0, w0, w2
   17b30:	str	w0, [x19, #96]
   17b34:	cbz	w1, 17b40 <lzma_mode_is_supported@@XZ_5.0+0x6740>
   17b38:	ldr	x2, [x19, #128]
   17b3c:	str	x2, [x19, #120]
   17b40:	mov	x5, x27
   17b44:	mov	x4, x20
   17b48:	mov	x3, x28
   17b4c:	mov	x0, x26
   17b50:	add	x1, x19, #0x70
   17b54:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   17b58:	ldrb	w0, [x19, #72]
   17b5c:	cbnz	w0, 17c28 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   17b60:	mov	w0, #0x0                   	// #0
   17b64:	ldp	x29, x30, [sp, #16]
   17b68:	ldp	x19, x20, [sp, #32]
   17b6c:	ldp	x21, x22, [sp, #48]
   17b70:	ldp	x23, x24, [sp, #64]
   17b74:	ldp	x25, x26, [sp, #80]
   17b78:	ldp	x27, x28, [sp, #96]
   17b7c:	add	sp, sp, #0x80
   17b80:	ret
   17b84:	add	x10, x28, x9
   17b88:	mov	x2, x21
   17b8c:	add	x1, x26, x1
   17b90:	mov	x0, x10
   17b94:	stp	x9, x10, [sp, #112]
   17b98:	bl	3090 <memcpy@plt>
   17b9c:	ldr	x9, [sp, #112]
   17ba0:	mov	x7, x27
   17ba4:	ldr	w0, [sp, #128]
   17ba8:	mov	x6, x20
   17bac:	str	w0, [sp]
   17bb0:	add	x21, x9, x21
   17bb4:	str	x21, [x20]
   17bb8:	mov	x5, x28
   17bbc:	mov	x4, x25
   17bc0:	mov	x3, x24
   17bc4:	mov	x2, x23
   17bc8:	mov	x1, x22
   17bcc:	mov	x0, x19
   17bd0:	bl	17990 <lzma_mode_is_supported@@XZ_5.0+0x6590>
   17bd4:	cbnz	w0, 17c88 <lzma_mode_is_supported@@XZ_5.0+0x6888>
   17bd8:	ldp	x9, x10, [sp, #112]
   17bdc:	ldp	x6, x0, [x19, #80]
   17be0:	ldrb	w2, [x19, #73]
   17be4:	ldr	w1, [x19, #96]
   17be8:	ldr	x5, [x20]
   17bec:	mov	x3, x10
   17bf0:	stp	x5, x9, [sp, #112]
   17bf4:	sub	x21, x5, x9
   17bf8:	mov	x4, x21
   17bfc:	blr	x6
   17c00:	ldr	w1, [x19, #96]
   17c04:	sub	x2, x21, x0
   17c08:	ldrb	w3, [x19, #72]
   17c0c:	add	w1, w1, w0
   17c10:	str	w1, [x19, #96]
   17c14:	str	xzr, [x19, #112]
   17c18:	str	x2, [x19, #128]
   17c1c:	ldp	x5, x9, [sp, #112]
   17c20:	cbz	w3, 17cd8 <lzma_mode_is_supported@@XZ_5.0+0x68d8>
   17c24:	str	xzr, [x19, #128]
   17c28:	ldr	x1, [x19, #112]
   17c2c:	ldr	x0, [x19, #128]
   17c30:	ldp	x29, x30, [sp, #16]
   17c34:	cmp	x1, x0
   17c38:	cset	w0, eq  // eq = none
   17c3c:	ldp	x19, x20, [sp, #32]
   17c40:	ldp	x21, x22, [sp, #48]
   17c44:	ldp	x23, x24, [sp, #64]
   17c48:	ldp	x25, x26, [sp, #80]
   17c4c:	ldp	x27, x28, [sp, #96]
   17c50:	add	sp, sp, #0x80
   17c54:	ret
   17c58:	add	x1, x19, #0x70
   17c5c:	mov	x5, x7
   17c60:	mov	x4, x6
   17c64:	mov	x3, x28
   17c68:	mov	x0, x26
   17c6c:	bl	3810 <lzma_version_string@@XZ_5.0+0x128>
   17c70:	ldp	x1, x0, [x19, #112]
   17c74:	cmp	x1, x0
   17c78:	b.cc	17b60 <lzma_mode_is_supported@@XZ_5.0+0x6760>  // b.lo, b.ul, b.last
   17c7c:	ldrb	w2, [x19, #72]
   17c80:	mov	w0, #0x1                   	// #1
   17c84:	cbz	w2, 17ab4 <lzma_mode_is_supported@@XZ_5.0+0x66b4>
   17c88:	ldp	x29, x30, [sp, #16]
   17c8c:	ldp	x19, x20, [sp, #32]
   17c90:	ldp	x21, x22, [sp, #48]
   17c94:	ldp	x23, x24, [sp, #64]
   17c98:	ldp	x25, x26, [sp, #80]
   17c9c:	ldp	x27, x28, [sp, #96]
   17ca0:	add	sp, sp, #0x80
   17ca4:	ret
   17ca8:	add	x1, x26, x1
   17cac:	mov	x2, x21
   17cb0:	mov	x0, x26
   17cb4:	bl	30b0 <memmove@plt>
   17cb8:	str	xzr, [x19, #112]
   17cbc:	str	x21, [x19, #128]
   17cc0:	b	17ad4 <lzma_mode_is_supported@@XZ_5.0+0x66d4>
   17cc4:	mov	w0, #0x8                   	// #8
   17cc8:	ldp	x29, x30, [sp, #16]
   17ccc:	ldp	x19, x20, [sp, #32]
   17cd0:	add	sp, sp, #0x80
   17cd4:	ret
   17cd8:	cbz	x2, 17b60 <lzma_mode_is_supported@@XZ_5.0+0x6760>
   17cdc:	ldr	x1, [x20]
   17ce0:	sub	x3, x0, x5
   17ce4:	mov	x0, x26
   17ce8:	add	x1, x9, x1
   17cec:	add	x1, x1, x3
   17cf0:	str	x1, [x20]
   17cf4:	add	x1, x28, x1
   17cf8:	bl	3090 <memcpy@plt>
   17cfc:	b	17ad4 <lzma_mode_is_supported@@XZ_5.0+0x66d4>
   17d00:	stp	x29, x30, [sp, #-96]!
   17d04:	mov	x29, sp
   17d08:	stp	x19, x20, [sp, #16]
   17d0c:	ldr	x19, [x0]
   17d10:	stp	x23, x24, [sp, #48]
   17d14:	mov	w24, w6
   17d18:	stp	x25, x26, [sp, #64]
   17d1c:	mov	x23, x1
   17d20:	mov	x25, x2
   17d24:	str	x27, [sp, #80]
   17d28:	and	w27, w7, #0xff
   17d2c:	cbz	x19, 17d88 <lzma_mode_is_supported@@XZ_5.0+0x6988>
   17d30:	ldr	x0, [x25, #16]
   17d34:	cbz	x0, 17d80 <lzma_mode_is_supported@@XZ_5.0+0x6980>
   17d38:	ldr	w0, [x0]
   17d3c:	sub	w6, w24, #0x1
   17d40:	str	w0, [x19, #96]
   17d44:	tst	w6, w0
   17d48:	b.ne	17e08 <lzma_mode_is_supported@@XZ_5.0+0x6a08>  // b.any
   17d4c:	add	x2, x25, #0x18
   17d50:	mov	x1, x23
   17d54:	strb	wzr, [x19, #72]
   17d58:	mov	x0, x19
   17d5c:	strb	w27, [x19, #73]
   17d60:	ldp	x23, x24, [sp, #48]
   17d64:	ldp	x25, x26, [sp, #64]
   17d68:	ldr	x27, [sp, #80]
   17d6c:	stp	xzr, xzr, [x19, #112]
   17d70:	str	xzr, [x19, #128]
   17d74:	ldp	x19, x20, [sp, #16]
   17d78:	ldp	x29, x30, [sp], #96
   17d7c:	b	3880 <lzma_version_string@@XZ_5.0+0x198>
   17d80:	str	wzr, [x19, #96]
   17d84:	b	17d4c <lzma_mode_is_supported@@XZ_5.0+0x694c>
   17d88:	add	x5, x5, #0x44
   17d8c:	mov	x26, x0
   17d90:	stp	x21, x22, [sp, #32]
   17d94:	mov	x22, x3
   17d98:	lsl	x20, x5, #1
   17d9c:	mov	x21, x4
   17da0:	mov	x0, x20
   17da4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   17da8:	mov	x19, x0
   17dac:	cbz	x0, 17e40 <lzma_mode_is_supported@@XZ_5.0+0x6a40>
   17db0:	sub	x20, x20, #0x88
   17db4:	adrp	x2, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   17db8:	adrp	x1, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   17dbc:	add	x2, x2, #0xa58
   17dc0:	add	x1, x1, #0x958
   17dc4:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   17dc8:	mov	x3, #0xffffffffffffffff    	// #-1
   17dcc:	add	x0, x0, #0x950
   17dd0:	stp	xzr, x3, [x19]
   17dd4:	str	x19, [x26]
   17dd8:	stp	xzr, xzr, [x19, #16]
   17ddc:	stp	x2, x1, [x26, #24]
   17de0:	stp	xzr, xzr, [x19, #32]
   17de4:	stp	xzr, xzr, [x19, #48]
   17de8:	str	xzr, [x19, #64]
   17dec:	str	x0, [x26, #64]
   17df0:	str	x22, [x19, #80]
   17df4:	str	x20, [x19, #104]
   17df8:	cbnz	x21, 17e24 <lzma_mode_is_supported@@XZ_5.0+0x6a24>
   17dfc:	ldp	x21, x22, [sp, #32]
   17e00:	str	xzr, [x19, #88]
   17e04:	b	17d30 <lzma_mode_is_supported@@XZ_5.0+0x6930>
   17e08:	mov	w0, #0x8                   	// #8
   17e0c:	ldp	x19, x20, [sp, #16]
   17e10:	ldp	x23, x24, [sp, #48]
   17e14:	ldp	x25, x26, [sp, #64]
   17e18:	ldr	x27, [sp, #80]
   17e1c:	ldp	x29, x30, [sp], #96
   17e20:	ret
   17e24:	mov	x0, x21
   17e28:	mov	x1, x23
   17e2c:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   17e30:	str	x0, [x19, #88]
   17e34:	cbz	x0, 17e40 <lzma_mode_is_supported@@XZ_5.0+0x6a40>
   17e38:	ldp	x21, x22, [sp, #32]
   17e3c:	b	17d30 <lzma_mode_is_supported@@XZ_5.0+0x6930>
   17e40:	mov	w0, #0x5                   	// #5
   17e44:	ldp	x21, x22, [sp, #32]
   17e48:	b	17e0c <lzma_mode_is_supported@@XZ_5.0+0x6a0c>
   17e4c:	nop
   17e50:	mov	x3, x0
   17e54:	mov	w2, #0x0                   	// #0
   17e58:	cbz	x1, 17e6c <lzma_mode_is_supported@@XZ_5.0+0x6a6c>
   17e5c:	ldr	w2, [x1]
   17e60:	mov	w0, #0x4                   	// #4
   17e64:	cmp	w2, #0x0
   17e68:	csel	w2, w2, w0, eq  // eq = none
   17e6c:	mov	w0, #0x0                   	// #0
   17e70:	str	w2, [x3]
   17e74:	ret
   17e78:	cbz	x0, 17e88 <lzma_mode_is_supported@@XZ_5.0+0x6a88>
   17e7c:	ldr	w0, [x0]
   17e80:	cbz	w0, 17e88 <lzma_mode_is_supported@@XZ_5.0+0x6a88>
   17e84:	str	w0, [x1]
   17e88:	mov	w0, #0x0                   	// #0
   17e8c:	ret
   17e90:	stp	x29, x30, [sp, #-48]!
   17e94:	mov	x29, sp
   17e98:	stp	x21, x22, [sp, #32]
   17e9c:	mov	w21, #0x0                   	// #0
   17ea0:	cbz	x3, 17eb0 <lzma_mode_is_supported@@XZ_5.0+0x6ab0>
   17ea4:	cmp	x3, #0x4
   17ea8:	mov	w21, #0x8                   	// #8
   17eac:	b.eq	17ec0 <lzma_mode_is_supported@@XZ_5.0+0x6ac0>  // b.none
   17eb0:	mov	w0, w21
   17eb4:	ldp	x21, x22, [sp, #32]
   17eb8:	ldp	x29, x30, [sp], #48
   17ebc:	ret
   17ec0:	mov	x22, x1
   17ec4:	stp	x19, x20, [sp, #16]
   17ec8:	mov	x20, x0
   17ecc:	mov	x19, x2
   17ed0:	mov	x0, x3
   17ed4:	bl	36f8 <lzma_version_string@@XZ_5.0+0x10>
   17ed8:	cbz	x0, 17f20 <lzma_mode_is_supported@@XZ_5.0+0x6b20>
   17edc:	ldr	w21, [x19]
   17ee0:	str	w21, [x0]
   17ee4:	cbz	w21, 17f04 <lzma_mode_is_supported@@XZ_5.0+0x6b04>
   17ee8:	str	x0, [x20]
   17eec:	mov	w21, #0x0                   	// #0
   17ef0:	mov	w0, w21
   17ef4:	ldp	x19, x20, [sp, #16]
   17ef8:	ldp	x21, x22, [sp, #32]
   17efc:	ldp	x29, x30, [sp], #48
   17f00:	ret
   17f04:	mov	x1, x22
   17f08:	bl	3798 <lzma_version_string@@XZ_5.0+0xb0>
   17f0c:	mov	w0, w21
   17f10:	ldp	x19, x20, [sp, #16]
   17f14:	ldp	x21, x22, [sp, #32]
   17f18:	ldp	x29, x30, [sp], #48
   17f1c:	ret
   17f20:	mov	w21, #0x5                   	// #5
   17f24:	ldp	x19, x20, [sp, #16]
   17f28:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x6ab0>
   17f2c:	nop
   17f30:	cmp	x4, #0x4
   17f34:	b.ls	18048 <lzma_mode_is_supported@@XZ_5.0+0x6c48>  // b.plast
   17f38:	mov	x12, x0
   17f3c:	stp	x29, x30, [sp, #-80]!
   17f40:	adrp	x13, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xcc00>
   17f44:	mov	x29, sp
   17f48:	ldp	w5, w6, [x12]
   17f4c:	add	x13, x13, #0xb88
   17f50:	sub	w0, w1, #0x5
   17f54:	and	w2, w2, #0xff
   17f58:	sub	w7, w1, w6
   17f5c:	sub	x9, x4, #0x5
   17f60:	cmp	w7, #0x5
   17f64:	add	x18, x13, #0x8
   17f68:	csel	w6, w0, w6, hi  // hi = pmore
   17f6c:	mov	w17, #0x3                   	// #3
   17f70:	mov	w16, #0x4                   	// #4
   17f74:	mov	w15, #0x1                   	// #1
   17f78:	mov	w30, #0x11                  	// #17
   17f7c:	mov	x0, #0x0                   	// #0
   17f80:	mov	w7, #0xee                  	// #238
   17f84:	stp	x19, x20, [sp, #16]
   17f88:	mov	w19, #0xfffffffb            	// #-5
   17f8c:	nop
   17f90:	ldrb	w4, [x3, x0]
   17f94:	add	x8, x0, #0x1
   17f98:	add	w4, w4, #0x18
   17f9c:	and	w4, w4, #0xff
   17fa0:	cmp	w4, #0x1
   17fa4:	b.hi	18028 <lzma_mode_is_supported@@XZ_5.0+0x6c28>  // b.pmore
   17fa8:	add	x11, x0, #0x4
   17fac:	add	w10, w1, w0
   17fb0:	sub	w6, w10, w6
   17fb4:	cmp	w6, #0x5
   17fb8:	ldrb	w20, [x3, x11]
   17fbc:	sub	w14, w20, #0x1
   17fc0:	and	w14, w14, #0xff
   17fc4:	b.hi	18030 <lzma_mode_is_supported@@XZ_5.0+0x6c30>  // b.pmore
   17fc8:	cbz	w6, 17fe0 <lzma_mode_is_supported@@XZ_5.0+0x6be0>
   17fcc:	mov	w4, #0x0                   	// #0
   17fd0:	add	w4, w4, #0x1
   17fd4:	and	w5, w7, w5, lsl #1
   17fd8:	cmp	w6, w4
   17fdc:	b.ne	17fd0 <lzma_mode_is_supported@@XZ_5.0+0x6bd0>  // b.any
   17fe0:	cmp	w14, #0xfd
   17fe4:	b.ls	18040 <lzma_mode_is_supported@@XZ_5.0+0x6c40>  // b.plast
   17fe8:	ubfx	x4, x5, #1, #3
   17fec:	cmp	w5, #0x1f
   17ff0:	cset	w6, ls  // ls = plast
   17ff4:	lsr	w14, w5, #1
   17ff8:	ldrb	w4, [x13, w4, uxtw]
   17ffc:	tst	w6, w4
   18000:	b.ne	18114 <lzma_mode_is_supported@@XZ_5.0+0x6d14>  // b.any
   18004:	orr	w5, w5, w30
   18008:	mov	x0, x8
   1800c:	mov	w6, w10
   18010:	cmp	x9, x0
   18014:	b.cs	17f90 <lzma_mode_is_supported@@XZ_5.0+0x6b90>  // b.hs, b.nlast
   18018:	ldp	x19, x20, [sp, #16]
   1801c:	stp	w5, w6, [x12]
   18020:	ldp	x29, x30, [sp], #80
   18024:	ret
   18028:	mov	x0, x8
   1802c:	b	18010 <lzma_mode_is_supported@@XZ_5.0+0x6c10>
   18030:	cmp	w14, #0xfd
   18034:	b.hi	18050 <lzma_mode_is_supported@@XZ_5.0+0x6c50>  // b.pmore
   18038:	mov	w5, #0x1                   	// #1
   1803c:	b	18008 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   18040:	orr	w5, w5, #0x1
   18044:	b	18008 <lzma_mode_is_supported@@XZ_5.0+0x6c08>
   18048:	mov	x0, #0x0                   	// #0
   1804c:	ret
   18050:	mov	w5, #0x0                   	// #0
   18054:	mov	x14, #0x0                   	// #0
   18058:	stp	x21, x22, [sp, #32]
   1805c:	stp	x23, x24, [sp, #48]
   18060:	str	x25, [sp, #64]
   18064:	add	x23, x0, #0x3
   18068:	add	x22, x0, #0x2
   1806c:	ldrb	w25, [x3, x8]
   18070:	lsl	w6, w20, #24
   18074:	add	w21, w10, #0x5
   18078:	sub	w20, w19, w10
   1807c:	ldrb	w24, [x3, x23]
   18080:	ldrb	w4, [x3, x22]
   18084:	orr	w6, w6, w24, lsl #16
   18088:	orr	w4, w25, w4, lsl #8
   1808c:	orr	w4, w4, w6
   18090:	b	180c8 <lzma_mode_is_supported@@XZ_5.0+0x6cc8>
   18094:	ldr	w6, [x18, x14, lsl #2]
   18098:	sub	w24, w17, w6
   1809c:	sub	w6, w16, w6
   180a0:	lsl	w24, w24, #3
   180a4:	lsl	w6, w6, #3
   180a8:	lsr	w24, w4, w24
   180ac:	sub	w24, w24, #0x1
   180b0:	and	w24, w24, #0xff
   180b4:	lsl	w6, w15, w6
   180b8:	cmp	w24, #0xfd
   180bc:	sub	w6, w6, #0x1
   180c0:	b.ls	180dc <lzma_mode_is_supported@@XZ_5.0+0x6cdc>  // b.plast
   180c4:	eor	w4, w6, w4
   180c8:	add	w6, w21, w4
   180cc:	cmp	w2, #0x0
   180d0:	add	w4, w20, w4
   180d4:	csel	w4, w4, w6, eq  // eq = none
   180d8:	cbnz	w5, 18094 <lzma_mode_is_supported@@XZ_5.0+0x6c94>
   180dc:	sbfx	x5, x4, #24, #1
   180e0:	strb	w5, [x3, x11]
   180e4:	lsr	w5, w4, #16
   180e8:	strb	w5, [x3, x23]
   180ec:	lsr	w5, w4, #8
   180f0:	strb	w5, [x3, x22]
   180f4:	add	x0, x0, #0x5
   180f8:	mov	w6, w10
   180fc:	mov	w5, #0x0                   	// #0
   18100:	strb	w4, [x3, x8]
   18104:	ldp	x21, x22, [sp, #32]
   18108:	ldp	x23, x24, [sp, #48]
   1810c:	ldr	x25, [sp, #64]
   18110:	b	18010 <lzma_mode_is_supported@@XZ_5.0+0x6c10>
   18114:	stp	x21, x22, [sp, #32]
   18118:	stp	x23, x24, [sp, #48]
   1811c:	str	x25, [sp, #64]
   18120:	b	18064 <lzma_mode_is_supported@@XZ_5.0+0x6c64>
   18124:	nop
   18128:	stp	x29, x30, [sp, #-32]!
   1812c:	mov	w7, w3
   18130:	mov	w6, #0x1                   	// #1
   18134:	mov	x29, sp
   18138:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5c00>
   1813c:	mov	x5, #0x5                   	// #5
   18140:	add	x3, x3, #0xf30
   18144:	mov	x4, #0x8                   	// #8
   18148:	str	x19, [sp, #16]
   1814c:	mov	x19, x0
   18150:	bl	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   18154:	cbnz	w0, 1816c <lzma_mode_is_supported@@XZ_5.0+0x6d6c>
   18158:	ldr	x1, [x19]
   1815c:	mov	x2, #0xfffb00000000        	// #281453501874176
   18160:	movk	x2, #0xffff, lsl #48
   18164:	ldr	x1, [x1, #88]
   18168:	str	x2, [x1]
   1816c:	ldr	x19, [sp, #16]
   18170:	ldp	x29, x30, [sp], #32
   18174:	ret
   18178:	mov	w3, #0x1                   	// #1
   1817c:	b	18128 <lzma_mode_is_supported@@XZ_5.0+0x6d28>
   18180:	mov	w3, #0x0                   	// #0
   18184:	b	18128 <lzma_mode_is_supported@@XZ_5.0+0x6d28>
   18188:	cmp	x4, #0x3
   1818c:	and	w2, w2, #0xff
   18190:	b.ls	18244 <lzma_mode_is_supported@@XZ_5.0+0x6e44>  // b.plast
   18194:	sub	w8, w1, #0x4
   18198:	mov	x0, #0x4                   	// #4
   1819c:	mov	w10, #0x48                  	// #72
   181a0:	b	181b4 <lzma_mode_is_supported@@XZ_5.0+0x6db4>
   181a4:	add	x3, x3, #0x4
   181a8:	cmp	x1, x4
   181ac:	b.hi	18240 <lzma_mode_is_supported@@XZ_5.0+0x6e40>  // b.pmore
   181b0:	mov	x0, x1
   181b4:	ldrb	w5, [x3]
   181b8:	add	x1, x0, #0x4
   181bc:	lsr	w6, w5, #2
   181c0:	cmp	w6, #0x12
   181c4:	b.ne	181a4 <lzma_mode_is_supported@@XZ_5.0+0x6da4>  // b.any
   181c8:	ldrb	w7, [x3, #3]
   181cc:	and	w6, w7, #0x3
   181d0:	cmp	w6, #0x1
   181d4:	b.ne	181a4 <lzma_mode_is_supported@@XZ_5.0+0x6da4>  // b.any
   181d8:	ldrb	w9, [x3, #2]
   181dc:	and	w7, w7, #0xfffffffc
   181e0:	ldrb	w6, [x3, #1]
   181e4:	ubfiz	w5, w5, #24, #2
   181e8:	orr	w5, w5, w7
   181ec:	add	w7, w8, w0
   181f0:	lsl	w9, w9, #8
   181f4:	cmp	w2, #0x0
   181f8:	orr	w6, w9, w6, lsl #16
   181fc:	add	x3, x3, #0x4
   18200:	orr	w5, w6, w5
   18204:	mov	w6, w7
   18208:	add	w7, w7, w5
   1820c:	sub	w5, w5, w6
   18210:	csel	w5, w5, w7, eq  // eq = none
   18214:	cmp	x1, x4
   18218:	orr	w6, w5, #0x1
   1821c:	sturb	w6, [x3, #-1]
   18220:	ubfx	x6, x5, #24, #2
   18224:	lsr	w7, w5, #16
   18228:	orr	w6, w6, w10
   1822c:	lsr	w5, w5, #8
   18230:	sturb	w6, [x3, #-4]
   18234:	sturb	w7, [x3, #-3]
   18238:	sturb	w5, [x3, #-2]
   1823c:	b.ls	181b0 <lzma_mode_is_supported@@XZ_5.0+0x6db0>  // b.plast
   18240:	ret
   18244:	mov	x0, #0x0                   	// #0
   18248:	ret
   1824c:	nop
   18250:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18254:	mov	w7, #0x1                   	// #1
   18258:	add	x3, x3, #0x188
   1825c:	mov	w6, #0x4                   	// #4
   18260:	mov	x5, #0x4                   	// #4
   18264:	mov	x4, #0x0                   	// #0
   18268:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1826c:	nop
   18270:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18274:	mov	w7, #0x0                   	// #0
   18278:	add	x3, x3, #0x188
   1827c:	mov	w6, #0x4                   	// #4
   18280:	mov	x5, #0x4                   	// #4
   18284:	mov	x4, #0x0                   	// #0
   18288:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1828c:	nop
   18290:	cmp	x4, #0xf
   18294:	b.ls	18444 <lzma_mode_is_supported@@XZ_5.0+0x7044>  // b.plast
   18298:	adrp	x14, 1e000 <lzma_mode_is_supported@@XZ_5.0+0xcc00>
   1829c:	mov	x18, #0xffff000000001fff    	// #-281474976702465
   182a0:	and	w2, w2, #0xff
   182a4:	sub	w13, w1, #0x10
   182a8:	add	x14, x14, #0xbb0
   182ac:	sub	x16, x3, #0x10
   182b0:	mov	x0, #0x10                  	// #16
   182b4:	movk	x18, #0xffee, lsl #32
   182b8:	mov	w17, #0x1                   	// #1
   182bc:	nop
   182c0:	ldrb	w1, [x16, x0]
   182c4:	sub	x12, x0, #0x10
   182c8:	add	w15, w13, w0
   182cc:	mov	x10, #0x0                   	// #0
   182d0:	and	x1, x1, #0x1f
   182d4:	mov	w9, #0x5                   	// #5
   182d8:	ldr	w11, [x14, x1, lsl #2]
   182dc:	lsr	w1, w11, w10
   182e0:	tbnz	w1, #0, 18308 <lzma_mode_is_supported@@XZ_5.0+0x6f08>
   182e4:	add	w9, w9, #0x29
   182e8:	add	x10, x10, #0x1
   182ec:	cmp	w9, #0x80
   182f0:	b.ne	182dc <lzma_mode_is_supported@@XZ_5.0+0x6edc>  // b.any
   182f4:	add	x1, x0, #0x10
   182f8:	cmp	x1, x4
   182fc:	b.hi	18438 <lzma_mode_is_supported@@XZ_5.0+0x7038>  // b.pmore
   18300:	mov	x0, x1
   18304:	b	182c0 <lzma_mode_is_supported@@XZ_5.0+0x6ec0>
   18308:	stp	x29, x30, [sp, #-32]!
   1830c:	mov	x29, sp
   18310:	lsr	w7, w9, #3
   18314:	and	w30, w9, #0x7
   18318:	add	x7, x7, x12
   1831c:	mov	x1, #0x0                   	// #0
   18320:	add	x7, x3, x7
   18324:	mov	x6, #0x0                   	// #0
   18328:	ldrb	w5, [x7, x1]
   1832c:	lsl	w8, w1, #3
   18330:	add	x1, x1, #0x1
   18334:	cmp	x1, #0x6
   18338:	lsl	x5, x5, x8
   1833c:	add	x6, x6, x5
   18340:	b.ne	18328 <lzma_mode_is_supported@@XZ_5.0+0x6f28>  // b.any
   18344:	lsr	x1, x6, x30
   18348:	ubfx	x5, x1, #37, #4
   1834c:	cmp	x5, #0x5
   18350:	b.eq	183ac <lzma_mode_is_supported@@XZ_5.0+0x6fac>  // b.none
   18354:	add	w9, w9, #0x29
   18358:	add	x10, x10, #0x1
   1835c:	cmp	w9, #0x80
   18360:	b.eq	1837c <lzma_mode_is_supported@@XZ_5.0+0x6f7c>  // b.none
   18364:	lsr	w1, w11, w10
   18368:	tbnz	w1, #0, 18310 <lzma_mode_is_supported@@XZ_5.0+0x6f10>
   1836c:	add	w9, w9, #0x29
   18370:	add	x10, x10, #0x1
   18374:	cmp	w9, #0x80
   18378:	b.ne	18364 <lzma_mode_is_supported@@XZ_5.0+0x6f64>  // b.any
   1837c:	add	x1, x0, #0x10
   18380:	cmp	x1, x4
   18384:	b.hi	1843c <lzma_mode_is_supported@@XZ_5.0+0x703c>  // b.pmore
   18388:	mov	x0, x1
   1838c:	ldrb	w1, [x16, x1]
   18390:	sub	x12, x0, #0x10
   18394:	add	w15, w13, w0
   18398:	and	x1, x1, #0x1f
   1839c:	mov	x10, #0x0                   	// #0
   183a0:	mov	w9, #0x5                   	// #5
   183a4:	ldr	w11, [x14, x1, lsl #2]
   183a8:	b	18364 <lzma_mode_is_supported@@XZ_5.0+0x6f64>
   183ac:	tst	x1, #0xe00
   183b0:	ubfx	x5, x1, #9, #3
   183b4:	b.ne	18354 <lzma_mode_is_supported@@XZ_5.0+0x6f54>  // b.any
   183b8:	lsr	x8, x1, #36
   183bc:	stp	x19, x20, [sp, #16]
   183c0:	ubfx	x20, x1, #13, #20
   183c4:	ubfiz	w8, w8, #20, #1
   183c8:	cmp	w2, #0x0
   183cc:	orr	w8, w8, w20
   183d0:	lsl	w19, w17, w30
   183d4:	sub	w19, w19, #0x1
   183d8:	and	x1, x1, x18
   183dc:	lsl	w8, w8, #4
   183e0:	add	w20, w8, w15
   183e4:	sub	w8, w8, w15
   183e8:	csel	w8, w8, w20, eq  // eq = none
   183ec:	sxtw	x19, w19
   183f0:	and	x19, x19, x6
   183f4:	lsr	w6, w8, #4
   183f8:	lsl	x8, x6, #16
   183fc:	ubfiz	x6, x6, #13, #20
   18400:	and	x8, x8, #0x1000000000
   18404:	orr	x6, x6, x8
   18408:	orr	x1, x6, x1
   1840c:	lsl	x1, x1, x30
   18410:	orr	x1, x1, x19
   18414:	nop
   18418:	lsl	w6, w5, #3
   1841c:	lsr	x6, x1, x6
   18420:	strb	w6, [x7, x5]
   18424:	add	x5, x5, #0x1
   18428:	cmp	x5, #0x6
   1842c:	b.ne	18418 <lzma_mode_is_supported@@XZ_5.0+0x7018>  // b.any
   18430:	ldp	x19, x20, [sp, #16]
   18434:	b	18354 <lzma_mode_is_supported@@XZ_5.0+0x6f54>
   18438:	ret
   1843c:	ldp	x29, x30, [sp], #32
   18440:	ret
   18444:	mov	x0, #0x0                   	// #0
   18448:	ret
   1844c:	nop
   18450:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18454:	mov	w7, #0x1                   	// #1
   18458:	add	x3, x3, #0x290
   1845c:	mov	w6, #0x10                  	// #16
   18460:	mov	x5, #0x10                  	// #16
   18464:	mov	x4, #0x0                   	// #0
   18468:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1846c:	nop
   18470:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18474:	mov	w7, #0x0                   	// #0
   18478:	add	x3, x3, #0x290
   1847c:	mov	w6, #0x10                  	// #16
   18480:	mov	x5, #0x10                  	// #16
   18484:	mov	x4, #0x0                   	// #0
   18488:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1848c:	nop
   18490:	cmp	x4, #0x3
   18494:	and	w2, w2, #0xff
   18498:	add	w11, w1, #0x8
   1849c:	b.ls	18524 <lzma_mode_is_supported@@XZ_5.0+0x7124>  // b.plast
   184a0:	mov	w10, #0xfffffff8            	// #-8
   184a4:	mov	x0, #0x4                   	// #4
   184a8:	sub	w10, w10, w1
   184ac:	b	184b4 <lzma_mode_is_supported@@XZ_5.0+0x70b4>
   184b0:	mov	x0, x7
   184b4:	ldrb	w1, [x3, #3]
   184b8:	add	x7, x0, #0x4
   184bc:	cmp	w1, #0xeb
   184c0:	b.ne	18514 <lzma_mode_is_supported@@XZ_5.0+0x7114>  // b.any
   184c4:	ldrb	w1, [x3, #1]
   184c8:	sub	w5, w0, #0x4
   184cc:	ldrb	w6, [x3, #2]
   184d0:	add	w8, w5, w11
   184d4:	ldrb	w9, [x3]
   184d8:	cmp	w2, #0x0
   184dc:	lsl	w1, w1, #8
   184e0:	orr	w6, w1, w6, lsl #16
   184e4:	orr	w6, w6, w9
   184e8:	lsl	w6, w6, #2
   184ec:	sub	w1, w6, w5
   184f0:	add	w6, w8, w6
   184f4:	add	w1, w10, w1
   184f8:	csel	w1, w1, w6, eq  // eq = none
   184fc:	lsr	w5, w1, #18
   18500:	lsr	w6, w1, #10
   18504:	lsr	w1, w1, #2
   18508:	strb	w1, [x3]
   1850c:	strb	w6, [x3, #1]
   18510:	strb	w5, [x3, #2]
   18514:	add	x3, x3, #0x4
   18518:	cmp	x7, x4
   1851c:	b.ls	184b0 <lzma_mode_is_supported@@XZ_5.0+0x70b0>  // b.plast
   18520:	ret
   18524:	mov	x0, #0x0                   	// #0
   18528:	ret
   1852c:	nop
   18530:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18534:	mov	w7, #0x1                   	// #1
   18538:	add	x3, x3, #0x490
   1853c:	mov	w6, #0x4                   	// #4
   18540:	mov	x5, #0x4                   	// #4
   18544:	mov	x4, #0x0                   	// #0
   18548:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1854c:	nop
   18550:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18554:	mov	w7, #0x0                   	// #0
   18558:	add	x3, x3, #0x490
   1855c:	mov	w6, #0x4                   	// #4
   18560:	mov	x5, #0x4                   	// #4
   18564:	mov	x4, #0x0                   	// #0
   18568:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1856c:	nop
   18570:	cmp	x4, #0x3
   18574:	and	w2, w2, #0xff
   18578:	add	w11, w1, #0x4
   1857c:	b.ls	18658 <lzma_mode_is_supported@@XZ_5.0+0x7258>  // b.plast
   18580:	mov	w12, #0xfffffffc            	// #-4
   18584:	mov	x0, #0x0                   	// #0
   18588:	sub	w12, w12, w1
   1858c:	b	185a4 <lzma_mode_is_supported@@XZ_5.0+0x71a4>
   18590:	mov	x1, x0
   18594:	mov	x0, x8
   18598:	add	x1, x1, #0x6
   1859c:	cmp	x1, x4
   185a0:	b.hi	185ec <lzma_mode_is_supported@@XZ_5.0+0x71ec>  // b.pmore
   185a4:	add	x6, x0, #0x1
   185a8:	add	x1, x0, #0x2
   185ac:	mov	x8, x1
   185b0:	ldrb	w5, [x3, x6]
   185b4:	and	w7, w5, #0xf8
   185b8:	cmp	w7, #0xf0
   185bc:	b.ne	18590 <lzma_mode_is_supported@@XZ_5.0+0x7190>  // b.any
   185c0:	add	x8, x0, #0x3
   185c4:	mov	x10, x1
   185c8:	ldrb	w7, [x3, x8]
   185cc:	and	w9, w7, #0xf8
   185d0:	cmp	w9, #0xf8
   185d4:	b.eq	185f0 <lzma_mode_is_supported@@XZ_5.0+0x71f0>  // b.none
   185d8:	mov	x1, x0
   185dc:	mov	x0, x10
   185e0:	add	x1, x1, #0x6
   185e4:	cmp	x1, x4
   185e8:	b.ls	185a4 <lzma_mode_is_supported@@XZ_5.0+0x71a4>  // b.plast
   185ec:	ret
   185f0:	ldrb	w10, [x3, x0]
   185f4:	ubfiz	w7, w7, #8, #3
   185f8:	ldrb	w13, [x3, x1]
   185fc:	ubfiz	w5, w5, #19, #3
   18600:	orr	w5, w5, w7
   18604:	add	w9, w11, w0
   18608:	cmp	w2, #0x0
   1860c:	orr	w7, w13, w10, lsl #11
   18610:	orr	w5, w5, w7
   18614:	lsl	w5, w5, #1
   18618:	sub	w7, w5, w0
   1861c:	add	w9, w9, w5
   18620:	add	w5, w7, w12
   18624:	csel	w5, w5, w9, eq  // eq = none
   18628:	ubfx	x7, x5, #20, #3
   1862c:	lsr	w9, w5, #12
   18630:	orr	w7, w7, #0xfffffff0
   18634:	strb	w7, [x3, x6]
   18638:	lsr	w6, w5, #9
   1863c:	strb	w9, [x3, x0]
   18640:	orr	w6, w6, #0xfffffff8
   18644:	strb	w6, [x3, x8]
   18648:	lsr	w5, w5, #1
   1864c:	add	x0, x0, #0x4
   18650:	strb	w5, [x3, x1]
   18654:	b	18598 <lzma_mode_is_supported@@XZ_5.0+0x7198>
   18658:	mov	x0, #0x0                   	// #0
   1865c:	ret
   18660:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18664:	mov	w7, #0x1                   	// #1
   18668:	add	x3, x3, #0x570
   1866c:	mov	w6, #0x2                   	// #2
   18670:	mov	x5, #0x4                   	// #4
   18674:	mov	x4, #0x0                   	// #0
   18678:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1867c:	nop
   18680:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18684:	mov	w7, #0x0                   	// #0
   18688:	add	x3, x3, #0x570
   1868c:	mov	w6, #0x2                   	// #2
   18690:	mov	x5, #0x4                   	// #4
   18694:	mov	x4, #0x0                   	// #0
   18698:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1869c:	nop
   186a0:	cmp	x4, #0x3
   186a4:	and	w2, w2, #0xff
   186a8:	b.ls	18778 <lzma_mode_is_supported@@XZ_5.0+0x7378>  // b.plast
   186ac:	add	x3, x3, #0x1
   186b0:	sub	w9, w1, #0x4
   186b4:	mov	x0, #0x4                   	// #4
   186b8:	b	186d8 <lzma_mode_is_supported@@XZ_5.0+0x72d8>
   186bc:	cmp	w1, #0x7f
   186c0:	b.eq	18764 <lzma_mode_is_supported@@XZ_5.0+0x7364>  // b.none
   186c4:	add	x1, x0, #0x4
   186c8:	add	x3, x3, #0x4
   186cc:	cmp	x1, x4
   186d0:	b.hi	18760 <lzma_mode_is_supported@@XZ_5.0+0x7360>  // b.pmore
   186d4:	mov	x0, x1
   186d8:	ldurb	w1, [x3, #-1]
   186dc:	cmp	w1, #0x40
   186e0:	b.ne	186bc <lzma_mode_is_supported@@XZ_5.0+0x72bc>  // b.any
   186e4:	ldrb	w8, [x3]
   186e8:	tst	w8, #0xc0
   186ec:	b.ne	186c4 <lzma_mode_is_supported@@XZ_5.0+0x72c4>  // b.any
   186f0:	ldrb	w5, [x3, #2]
   186f4:	lsl	w7, w1, #24
   186f8:	ldrb	w6, [x3, #1]
   186fc:	add	w1, w9, w0
   18700:	cmp	w2, #0x0
   18704:	add	x3, x3, #0x4
   18708:	orr	w8, w5, w8, lsl #16
   1870c:	orr	w6, w7, w6, lsl #8
   18710:	orr	w6, w6, w8
   18714:	lsl	w5, w6, #2
   18718:	add	w6, w5, w1
   1871c:	sub	w1, w5, w1
   18720:	csel	w1, w1, w6, eq  // eq = none
   18724:	sbfx	x5, x1, #24, #1
   18728:	ubfx	x1, x1, #2, #22
   1872c:	ubfiz	w5, w5, #22, #8
   18730:	orr	w1, w5, w1
   18734:	orr	w1, w1, #0x40000000
   18738:	sturb	w1, [x3, #-2]
   1873c:	lsr	w6, w1, #24
   18740:	lsr	w5, w1, #16
   18744:	lsr	w1, w1, #8
   18748:	sturb	w6, [x3, #-5]
   1874c:	sturb	w5, [x3, #-4]
   18750:	sturb	w1, [x3, #-3]
   18754:	add	x1, x0, #0x4
   18758:	cmp	x1, x4
   1875c:	b.ls	186d4 <lzma_mode_is_supported@@XZ_5.0+0x72d4>  // b.plast
   18760:	ret
   18764:	ldrb	w8, [x3]
   18768:	and	w5, w8, #0xc0
   1876c:	cmp	w5, #0xc0
   18770:	b.ne	186c4 <lzma_mode_is_supported@@XZ_5.0+0x72c4>  // b.any
   18774:	b	186f0 <lzma_mode_is_supported@@XZ_5.0+0x72f0>
   18778:	mov	x0, #0x0                   	// #0
   1877c:	ret
   18780:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   18784:	mov	w7, #0x1                   	// #1
   18788:	add	x3, x3, #0x6a0
   1878c:	mov	w6, #0x4                   	// #4
   18790:	mov	x5, #0x4                   	// #4
   18794:	mov	x4, #0x0                   	// #0
   18798:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>
   1879c:	nop
   187a0:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6c00>
   187a4:	mov	w7, #0x0                   	// #0
   187a8:	add	x3, x3, #0x6a0
   187ac:	mov	w6, #0x4                   	// #4
   187b0:	mov	x5, #0x4                   	// #4
   187b4:	mov	x4, #0x0                   	// #0
   187b8:	b	17d00 <lzma_mode_is_supported@@XZ_5.0+0x6900>

Disassembly of section .fini:

00000000000187bc <.fini>:
   187bc:	stp	x29, x30, [sp, #-16]!
   187c0:	mov	x29, sp
   187c4:	ldp	x29, x30, [sp], #16
   187c8:	ret
