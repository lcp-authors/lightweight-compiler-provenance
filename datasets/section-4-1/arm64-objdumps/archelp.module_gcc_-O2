
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//archelp.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <handle_symlink.isra.0.part.0>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x3
  10:	mov	x19, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x4
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x24, x1
  24:	mov	x23, x0
  28:	mov	x0, x2
  2c:	bl	0 <grub_strlen>
  30:	mov	x22, x0
  34:	mov	x2, x0
  38:	ldr	x0, [x20]
  3c:	mov	x1, x19
  40:	bl	0 <grub_memcmp>
  44:	cbnz	w0, c0 <handle_symlink.isra.0.part.0+0xc0>
  48:	ldr	x19, [x20]
  4c:	add	x5, x19, x22
  50:	ldrb	w2, [x19, x22]
  54:	cmp	w2, #0x2f
  58:	ccmp	w2, #0x0, #0x4, ne  // ne = any
  5c:	b.ne	c0 <handle_symlink.isra.0.part.0+0xc0>  // b.any
  60:	stp	x25, x26, [sp, #64]
  64:	cmp	w2, #0x0
  68:	cinc	x25, x5, ne  // ne = any
  6c:	cmp	x19, x5
  70:	b.ls	88 <handle_symlink.isra.0.part.0+0x88>  // b.plast
  74:	b	d8 <handle_symlink.isra.0.part.0+0xd8>
  78:	sub	x5, x5, #0x1
  7c:	cmp	x19, x5
  80:	b.hi	d8 <handle_symlink.isra.0.part.0+0xd8>  // b.pmore
  84:	ldrb	w2, [x5]
  88:	cmp	w2, #0x2f
  8c:	b.ne	78 <handle_symlink.isra.0.part.0+0x78>  // b.any
  90:	cmp	x19, x5
  94:	b.hi	d8 <handle_symlink.isra.0.part.0+0xd8>  // b.pmore
  98:	subs	x19, x5, x19
  9c:	cinc	x19, x19, ne  // ne = any
  a0:	ldr	x1, [x24]
  a4:	mov	x0, x23
  a8:	blr	x1
  ac:	mov	x22, x0
  b0:	cbz	x0, 278 <handle_symlink.isra.0.part.0+0x278>
  b4:	ldrb	w1, [x0]
  b8:	cbnz	w1, e0 <handle_symlink.isra.0.part.0+0xe0>
  bc:	ldp	x25, x26, [sp, #64]
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x21, x22, [sp, #32]
  cc:	ldp	x23, x24, [sp, #48]
  d0:	ldp	x29, x30, [sp], #80
  d4:	ret
  d8:	mov	x19, #0x0                   	// #0
  dc:	b	a0 <handle_symlink.isra.0.part.0+0xa0>
  e0:	bl	0 <grub_strlen>
  e4:	mov	x24, x0
  e8:	ldr	x0, [x20]
  ec:	bl	0 <grub_strlen>
  f0:	add	x0, x24, x0
  f4:	add	x0, x0, #0x2
  f8:	bl	0 <grub_malloc>
  fc:	mov	x23, x0
 100:	cbz	x0, 278 <handle_symlink.isra.0.part.0+0x278>
 104:	mov	x1, x22
 108:	add	x26, x0, x19
 10c:	mov	x0, x26
 110:	bl	0 <grub_strcpy>
 114:	mov	x0, x22
 118:	bl	0 <grub_free>
 11c:	ldrb	w2, [x23, x19]
 120:	cmp	w2, #0x2f
 124:	b.eq	2c4 <handle_symlink.isra.0.part.0+0x2c4>  // b.none
 128:	cbnz	x19, 2a8 <handle_symlink.isra.0.part.0+0x2a8>
 12c:	add	x0, x24, x19
 130:	mov	x1, x25
 134:	add	x0, x23, x0
 138:	bl	0 <grub_strcpy>
 13c:	adrp	x1, 0 <handle_symlink.isra.0.part.0>
 140:	adrp	x2, 0 <handle_symlink.isra.0.part.0>
 144:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 148:	mov	x5, x23
 14c:	ldr	x3, [x1]
 150:	mov	w1, #0x7f                  	// #127
 154:	ldr	x2, [x2]
 158:	ldr	x0, [x0]
 15c:	ldr	x4, [x20]
 160:	bl	0 <grub_real_dprintf>
 164:	ldr	x0, [x20]
 168:	bl	0 <grub_free>
 16c:	ldrb	w1, [x23]
 170:	mov	x2, x23
 174:	mov	x6, x23
 178:	sub	x5, x23, #0x1
 17c:	cbnz	w1, 188 <handle_symlink.isra.0.part.0+0x188>
 180:	b	1c8 <handle_symlink.isra.0.part.0+0x1c8>
 184:	ldrb	w1, [x2, #1]!
 188:	cmp	w1, #0x2f
 18c:	b.eq	184 <handle_symlink.isra.0.part.0+0x184>  // b.none
 190:	cmp	w1, #0x2e
 194:	b.eq	1f4 <handle_symlink.isra.0.part.0+0x1f4>  // b.none
 198:	ldrb	w1, [x2]
 19c:	cmp	w1, #0x2f
 1a0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 1a4:	b.eq	1bc <handle_symlink.isra.0.part.0+0x1bc>  // b.none
 1a8:	strb	w1, [x6], #1
 1ac:	ldrb	w1, [x2, #1]!
 1b0:	cmp	w1, #0x2f
 1b4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 1b8:	b.ne	1a8 <handle_symlink.isra.0.part.0+0x1a8>  // b.any
 1bc:	cbnz	w1, 264 <handle_symlink.isra.0.part.0+0x264>
 1c0:	ldrb	w1, [x2]
 1c4:	cbnz	w1, 188 <handle_symlink.isra.0.part.0+0x188>
 1c8:	strb	wzr, [x6]
 1cc:	ldp	x25, x26, [sp, #64]
 1d0:	str	x23, [x20]
 1d4:	mov	w1, #0x1                   	// #1
 1d8:	str	w1, [x21]
 1dc:	mov	w0, #0x0                   	// #0
 1e0:	ldp	x19, x20, [sp, #16]
 1e4:	ldp	x21, x22, [sp, #32]
 1e8:	ldp	x23, x24, [sp, #48]
 1ec:	ldp	x29, x30, [sp], #80
 1f0:	ret
 1f4:	ldrb	w1, [x2, #1]
 1f8:	cmp	w1, #0x2f
 1fc:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 200:	b.eq	26c <handle_symlink.isra.0.part.0+0x26c>  // b.none
 204:	cmp	w1, #0x2e
 208:	b.ne	198 <handle_symlink.isra.0.part.0+0x198>  // b.any
 20c:	ldrb	w1, [x2, #2]
 210:	cmp	w1, #0x2f
 214:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 218:	b.ne	198 <handle_symlink.isra.0.part.0+0x198>  // b.any
 21c:	add	x2, x2, #0x2
 220:	cmp	x23, x6
 224:	b.eq	1c4 <handle_symlink.isra.0.part.0+0x1c4>  // b.none
 228:	sub	x3, x6, #0x2
 22c:	sub	x6, x6, #0x1
 230:	cmp	x23, x3
 234:	b.ls	248 <handle_symlink.isra.0.part.0+0x248>  // b.plast
 238:	b	1c4 <handle_symlink.isra.0.part.0+0x1c4>
 23c:	cmp	x0, x5
 240:	b.eq	29c <handle_symlink.isra.0.part.0+0x29c>  // b.none
 244:	mov	x3, x0
 248:	ldrb	w4, [x3]
 24c:	sub	x0, x3, #0x1
 250:	cmp	w4, #0x2f
 254:	b.ne	23c <handle_symlink.isra.0.part.0+0x23c>  // b.any
 258:	add	x6, x3, #0x1
 25c:	cbnz	w1, 188 <handle_symlink.isra.0.part.0+0x188>
 260:	b	1c8 <handle_symlink.isra.0.part.0+0x1c8>
 264:	strb	w1, [x6], #1
 268:	ldrb	w1, [x2, #1]
 26c:	add	x2, x2, #0x1
 270:	cbnz	w1, 188 <handle_symlink.isra.0.part.0+0x188>
 274:	b	1c8 <handle_symlink.isra.0.part.0+0x1c8>
 278:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 27c:	ldp	x19, x20, [sp, #16]
 280:	ldr	x0, [x0]
 284:	ldp	x21, x22, [sp, #32]
 288:	ldr	w0, [x0]
 28c:	ldp	x23, x24, [sp, #48]
 290:	ldp	x25, x26, [sp, #64]
 294:	ldp	x29, x30, [sp], #80
 298:	ret
 29c:	mov	x6, x3
 2a0:	cbnz	w1, 188 <handle_symlink.isra.0.part.0+0x188>
 2a4:	b	1c8 <handle_symlink.isra.0.part.0+0x1c8>
 2a8:	ldr	x1, [x20]
 2ac:	mov	x2, x19
 2b0:	mov	x0, x23
 2b4:	bl	0 <grub_memmove>
 2b8:	mov	w0, #0x2f                  	// #47
 2bc:	sturb	w0, [x26, #-1]
 2c0:	b	12c <handle_symlink.isra.0.part.0+0x12c>
 2c4:	mov	x1, x23
 2c8:	b	2d4 <handle_symlink.isra.0.part.0+0x2d4>
 2cc:	ldrb	w2, [x26]
 2d0:	mov	x1, x0
 2d4:	mov	x0, x1
 2d8:	strb	w2, [x0], #1
 2dc:	ldrb	w2, [x26], #1
 2e0:	cbnz	w2, 2cc <handle_symlink.isra.0.part.0+0x2cc>
 2e4:	nop
 2e8:	ldrb	w2, [x25]
 2ec:	mov	x3, x1
 2f0:	sturb	w2, [x0, #-1]
 2f4:	mov	x1, x0
 2f8:	add	x0, x0, #0x1
 2fc:	ldrb	w2, [x25], #1
 300:	cbnz	w2, 2e8 <handle_symlink.isra.0.part.0+0x2e8>
 304:	adrp	x2, 0 <handle_symlink.isra.0.part.0>
 308:	adrp	x1, 0 <handle_symlink.isra.0.part.0>
 30c:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 310:	strb	wzr, [x3]
 314:	ldr	x3, [x2]
 318:	mov	x5, x23
 31c:	ldr	x2, [x1]
 320:	mov	w1, #0x70                  	// #112
 324:	ldr	x0, [x0]
 328:	ldr	x4, [x20]
 32c:	bl	0 <grub_real_dprintf>
 330:	ldr	x0, [x20]
 334:	bl	0 <grub_free>
 338:	ldrb	w2, [x23]
 33c:	mov	x1, x23
 340:	mov	x3, x23
 344:	sub	x5, x23, #0x1
 348:	cbnz	w2, 354 <handle_symlink.isra.0.part.0+0x354>
 34c:	b	398 <handle_symlink.isra.0.part.0+0x398>
 350:	ldrb	w2, [x1, #1]!
 354:	cmp	w2, #0x2f
 358:	b.eq	350 <handle_symlink.isra.0.part.0+0x350>  // b.none
 35c:	cmp	w2, #0x2e
 360:	b.eq	3a0 <handle_symlink.isra.0.part.0+0x3a0>  // b.none
 364:	ldrb	w2, [x1]
 368:	cmp	w2, #0x2f
 36c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 370:	b.eq	38c <handle_symlink.isra.0.part.0+0x38c>  // b.none
 374:	nop
 378:	strb	w2, [x3], #1
 37c:	ldrb	w2, [x1, #1]!
 380:	cmp	w2, #0x2f
 384:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 388:	b.ne	378 <handle_symlink.isra.0.part.0+0x378>  // b.any
 38c:	cbnz	w2, 410 <handle_symlink.isra.0.part.0+0x410>
 390:	ldrb	w2, [x1]
 394:	cbnz	w2, 354 <handle_symlink.isra.0.part.0+0x354>
 398:	strb	wzr, [x3]
 39c:	b	1cc <handle_symlink.isra.0.part.0+0x1cc>
 3a0:	ldrb	w2, [x1, #1]
 3a4:	cmp	w2, #0x2f
 3a8:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 3ac:	b.eq	418 <handle_symlink.isra.0.part.0+0x418>  // b.none
 3b0:	cmp	w2, #0x2e
 3b4:	b.ne	364 <handle_symlink.isra.0.part.0+0x364>  // b.any
 3b8:	ldrb	w2, [x1, #2]
 3bc:	cmp	w2, #0x2f
 3c0:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 3c4:	b.ne	364 <handle_symlink.isra.0.part.0+0x364>  // b.any
 3c8:	add	x1, x1, #0x2
 3cc:	cmp	x23, x3
 3d0:	b.eq	394 <handle_symlink.isra.0.part.0+0x394>  // b.none
 3d4:	sub	x0, x3, #0x2
 3d8:	sub	x3, x3, #0x1
 3dc:	cmp	x23, x0
 3e0:	b.ls	3f4 <handle_symlink.isra.0.part.0+0x3f4>  // b.plast
 3e4:	b	394 <handle_symlink.isra.0.part.0+0x394>
 3e8:	cmp	x3, x5
 3ec:	b.eq	424 <handle_symlink.isra.0.part.0+0x424>  // b.none
 3f0:	mov	x0, x3
 3f4:	ldrb	w4, [x0]
 3f8:	sub	x3, x0, #0x1
 3fc:	cmp	w4, #0x2f
 400:	b.ne	3e8 <handle_symlink.isra.0.part.0+0x3e8>  // b.any
 404:	add	x3, x0, #0x1
 408:	cbnz	w2, 354 <handle_symlink.isra.0.part.0+0x354>
 40c:	b	398 <handle_symlink.isra.0.part.0+0x398>
 410:	strb	w2, [x3], #1
 414:	ldrb	w2, [x1, #1]
 418:	add	x1, x1, #0x1
 41c:	cbnz	w2, 354 <handle_symlink.isra.0.part.0+0x354>
 420:	b	398 <handle_symlink.isra.0.part.0+0x398>
 424:	mov	x3, x0
 428:	cbnz	w2, 354 <handle_symlink.isra.0.part.0+0x354>
 42c:	b	398 <handle_symlink.isra.0.part.0+0x398>
	...

0000000000000450 <grub_archelp_dir>:
 450:	stp	x29, x30, [sp, #-160]!
 454:	mov	x29, sp
 458:	stp	x19, x20, [sp, #16]
 45c:	mov	x20, x1
 460:	stp	x21, x22, [sp, #32]
 464:	mov	x21, x0
 468:	add	x0, x2, #0x1
 46c:	stp	x23, x24, [sp, #48]
 470:	mov	x24, x4
 474:	str	x3, [sp, #104]
 478:	bl	0 <grub_strdup>
 47c:	str	x0, [sp, #136]
 480:	cbz	x0, 8a0 <grub_archelp_dir+0x450>
 484:	stp	x25, x26, [sp, #64]
 488:	mov	x1, x0
 48c:	mov	x3, x0
 490:	stp	x27, x28, [sp, #80]
 494:	sub	x6, x0, #0x1
 498:	ldrb	w2, [x0]
 49c:	cbnz	w2, 4a8 <grub_archelp_dir+0x58>
 4a0:	b	4e8 <grub_archelp_dir+0x98>
 4a4:	ldrb	w2, [x1, #1]!
 4a8:	cmp	w2, #0x2f
 4ac:	b.eq	4a4 <grub_archelp_dir+0x54>  // b.none
 4b0:	cmp	w2, #0x2e
 4b4:	b.eq	7bc <grub_archelp_dir+0x36c>  // b.none
 4b8:	ldrb	w2, [x1]
 4bc:	cmp	w2, #0x2f
 4c0:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 4c4:	b.eq	4dc <grub_archelp_dir+0x8c>  // b.none
 4c8:	strb	w2, [x3], #1
 4cc:	ldrb	w2, [x1, #1]!
 4d0:	cmp	w2, #0x2f
 4d4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 4d8:	b.ne	4c8 <grub_archelp_dir+0x78>  // b.any
 4dc:	cbnz	w2, 82c <grub_archelp_dir+0x3dc>
 4e0:	ldrb	w2, [x1]
 4e4:	cbnz	w2, 4a8 <grub_archelp_dir+0x58>
 4e8:	strb	wzr, [x3]
 4ec:	ldr	x19, [sp, #136]
 4f0:	mov	x0, x19
 4f4:	bl	0 <grub_strlen>
 4f8:	sub	x1, x0, #0x1
 4fc:	ldr	x0, [sp, #136]
 500:	add	x1, x19, x1
 504:	cmp	x0, x1
 508:	b.ls	520 <grub_archelp_dir+0xd0>  // b.plast
 50c:	b	52c <grub_archelp_dir+0xdc>
 510:	strb	wzr, [x1], #-1
 514:	ldr	x0, [sp, #136]
 518:	cmp	x0, x1
 51c:	b.hi	52c <grub_archelp_dir+0xdc>  // b.pmore
 520:	ldrb	w2, [x1]
 524:	cmp	w2, #0x2f
 528:	b.eq	510 <grub_archelp_dir+0xc0>  // b.none
 52c:	bl	0 <grub_strlen>
 530:	add	x26, x20, #0x8
 534:	mov	x19, x0
 538:	mov	w25, #0x0                   	// #0
 53c:	mov	x22, #0x0                   	// #0
 540:	ldr	x4, [x20]
 544:	add	x3, sp, #0x7c
 548:	add	x2, sp, #0x78
 54c:	add	x1, sp, #0x80
 550:	mov	x0, x21
 554:	blr	x4
 558:	cbnz	w0, 620 <grub_archelp_dir+0x1d0>
 55c:	ldr	w0, [sp, #124]
 560:	cmn	w0, #0x1
 564:	b.eq	620 <grub_archelp_dir+0x1d0>  // b.none
 568:	ldr	x3, [sp, #128]
 56c:	mov	x5, x3
 570:	mov	x0, x3
 574:	ldrb	w2, [x3]
 578:	sub	x6, x3, #0x1
 57c:	cbnz	w2, 588 <grub_archelp_dir+0x138>
 580:	b	5c8 <grub_archelp_dir+0x178>
 584:	ldrb	w2, [x5, #1]!
 588:	cmp	w2, #0x2f
 58c:	b.eq	584 <grub_archelp_dir+0x134>  // b.none
 590:	cmp	w2, #0x2e
 594:	b.eq	718 <grub_archelp_dir+0x2c8>  // b.none
 598:	ldrb	w1, [x5]
 59c:	cmp	w1, #0x2f
 5a0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 5a4:	b.eq	5bc <grub_archelp_dir+0x16c>  // b.none
 5a8:	strb	w1, [x0], #1
 5ac:	ldrb	w1, [x5, #1]!
 5b0:	cmp	w1, #0x2f
 5b4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 5b8:	b.ne	5a8 <grub_archelp_dir+0x158>  // b.any
 5bc:	cbnz	w1, 788 <grub_archelp_dir+0x338>
 5c0:	ldrb	w2, [x5]
 5c4:	cbnz	w2, 588 <grub_archelp_dir+0x138>
 5c8:	strb	wzr, [x0]
 5cc:	mov	x2, x19
 5d0:	ldp	x1, x0, [sp, #128]
 5d4:	bl	0 <grub_memcmp>
 5d8:	cbnz	w0, 7a8 <grub_archelp_dir+0x358>
 5dc:	ldr	x0, [sp, #128]
 5e0:	add	x27, x0, x19
 5e4:	ldrb	w1, [x0, x19]
 5e8:	cmp	w1, #0x2f
 5ec:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 5f0:	cset	w28, eq  // eq = none
 5f4:	cmp	x19, #0x0
 5f8:	csinc	w28, w28, wzr, ne  // ne = any
 5fc:	cbnz	w28, 658 <grub_archelp_dir+0x208>
 600:	bl	0 <grub_free>
 604:	ldr	x4, [x20]
 608:	add	x3, sp, #0x7c
 60c:	add	x2, sp, #0x78
 610:	add	x1, sp, #0x80
 614:	mov	x0, x21
 618:	blr	x4
 61c:	cbz	w0, 55c <grub_archelp_dir+0x10c>
 620:	ldr	x0, [sp, #136]
 624:	bl	0 <grub_free>
 628:	mov	x0, x22
 62c:	bl	0 <grub_free>
 630:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 634:	ldp	x19, x20, [sp, #16]
 638:	ldr	x0, [x0]
 63c:	ldp	x21, x22, [sp, #32]
 640:	ldr	w0, [x0]
 644:	ldp	x23, x24, [sp, #48]
 648:	ldp	x25, x26, [sp, #64]
 64c:	ldp	x27, x28, [sp, #80]
 650:	ldp	x29, x30, [sp], #160
 654:	ret
 658:	cmp	w1, #0x2f
 65c:	b.ne	66c <grub_archelp_dir+0x21c>  // b.any
 660:	ldrb	w0, [x27, #1]!
 664:	cmp	w0, #0x2f
 668:	b.eq	660 <grub_archelp_dir+0x210>  // b.none
 66c:	mov	x0, x27
 670:	mov	w1, #0x2f                  	// #47
 674:	bl	0 <grub_strchr>
 678:	mov	x23, x0
 67c:	cbz	x0, 684 <grub_archelp_dir+0x234>
 680:	strb	wzr, [x0]
 684:	cbz	x22, 698 <grub_archelp_dir+0x248>
 688:	ldr	x1, [sp, #128]
 68c:	mov	x0, x22
 690:	bl	0 <grub_strcmp>
 694:	cbz	w0, 6a0 <grub_archelp_dir+0x250>
 698:	ldrb	w0, [x27]
 69c:	cbnz	w0, 840 <grub_archelp_dir+0x3f0>
 6a0:	ldr	w0, [sp, #124]
 6a4:	str	wzr, [sp, #144]
 6a8:	and	w0, w0, #0xe000
 6ac:	cmp	w0, #0xa, lsl #12
 6b0:	ldr	x0, [sp, #128]
 6b4:	b.ne	7b4 <grub_archelp_dir+0x364>  // b.any
 6b8:	ldr	x1, [x20, #8]
 6bc:	cbz	x1, 7b4 <grub_archelp_dir+0x364>
 6c0:	mov	x2, x0
 6c4:	add	x4, sp, #0x90
 6c8:	add	x3, sp, #0x88
 6cc:	mov	x1, x26
 6d0:	mov	x0, x21
 6d4:	bl	0 <handle_symlink.isra.0.part.0>
 6d8:	mov	w27, w0
 6dc:	ldr	x0, [sp, #128]
 6e0:	bl	0 <grub_free>
 6e4:	cbnz	w27, 620 <grub_archelp_dir+0x1d0>
 6e8:	ldr	w0, [sp, #144]
 6ec:	cbz	w0, 540 <grub_archelp_dir+0xf0>
 6f0:	ldr	x0, [sp, #136]
 6f4:	add	w25, w25, #0x1
 6f8:	bl	0 <grub_strlen>
 6fc:	mov	x19, x0
 700:	cmp	w25, #0x8
 704:	b.eq	8dc <grub_archelp_dir+0x48c>  // b.none
 708:	ldr	x1, [x20, #16]
 70c:	mov	x0, x21
 710:	blr	x1
 714:	b	540 <grub_archelp_dir+0xf0>
 718:	ldrb	w2, [x5, #1]
 71c:	cmp	w2, #0x2f
 720:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 724:	b.eq	790 <grub_archelp_dir+0x340>  // b.none
 728:	cmp	w2, #0x2e
 72c:	b.ne	598 <grub_archelp_dir+0x148>  // b.any
 730:	ldrb	w2, [x5, #2]
 734:	cmp	w2, #0x2f
 738:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 73c:	b.ne	598 <grub_archelp_dir+0x148>  // b.any
 740:	add	x5, x5, #0x2
 744:	cmp	x3, x0
 748:	b.eq	5c4 <grub_archelp_dir+0x174>  // b.none
 74c:	sub	x1, x0, #0x2
 750:	sub	x0, x0, #0x1
 754:	cmp	x3, x1
 758:	b.ls	76c <grub_archelp_dir+0x31c>  // b.plast
 75c:	b	5c4 <grub_archelp_dir+0x174>
 760:	cmp	x6, x0
 764:	b.eq	79c <grub_archelp_dir+0x34c>  // b.none
 768:	mov	x1, x0
 76c:	ldrb	w4, [x1]
 770:	sub	x0, x1, #0x1
 774:	cmp	w4, #0x2f
 778:	b.ne	760 <grub_archelp_dir+0x310>  // b.any
 77c:	add	x0, x1, #0x1
 780:	cbnz	w2, 588 <grub_archelp_dir+0x138>
 784:	b	5c8 <grub_archelp_dir+0x178>
 788:	strb	w1, [x0], #1
 78c:	ldrb	w2, [x5, #1]
 790:	add	x5, x5, #0x1
 794:	cbnz	w2, 588 <grub_archelp_dir+0x138>
 798:	b	5c8 <grub_archelp_dir+0x178>
 79c:	mov	x0, x1
 7a0:	cbnz	w2, 588 <grub_archelp_dir+0x138>
 7a4:	b	5c8 <grub_archelp_dir+0x178>
 7a8:	ldr	x0, [sp, #128]
 7ac:	bl	0 <grub_free>
 7b0:	b	604 <grub_archelp_dir+0x1b4>
 7b4:	bl	0 <grub_free>
 7b8:	b	6e8 <grub_archelp_dir+0x298>
 7bc:	ldrb	w2, [x1, #1]
 7c0:	cmp	w2, #0x2f
 7c4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 7c8:	b.eq	834 <grub_archelp_dir+0x3e4>  // b.none
 7cc:	cmp	w2, #0x2e
 7d0:	b.ne	4b8 <grub_archelp_dir+0x68>  // b.any
 7d4:	ldrb	w2, [x1, #2]
 7d8:	cmp	w2, #0x2f
 7dc:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 7e0:	b.ne	4b8 <grub_archelp_dir+0x68>  // b.any
 7e4:	add	x1, x1, #0x2
 7e8:	cmp	x0, x3
 7ec:	b.eq	4e4 <grub_archelp_dir+0x94>  // b.none
 7f0:	sub	x4, x3, #0x2
 7f4:	sub	x3, x3, #0x1
 7f8:	cmp	x0, x4
 7fc:	b.ls	810 <grub_archelp_dir+0x3c0>  // b.plast
 800:	b	4e4 <grub_archelp_dir+0x94>
 804:	cmp	x3, x6
 808:	b.eq	8d0 <grub_archelp_dir+0x480>  // b.none
 80c:	mov	x4, x3
 810:	ldrb	w5, [x4]
 814:	sub	x3, x4, #0x1
 818:	cmp	w5, #0x2f
 81c:	b.ne	804 <grub_archelp_dir+0x3b4>  // b.any
 820:	add	x3, x4, #0x1
 824:	cbnz	w2, 4a8 <grub_archelp_dir+0x58>
 828:	b	4e8 <grub_archelp_dir+0x98>
 82c:	strb	w2, [x3], #1
 830:	ldrb	w2, [x1, #1]
 834:	add	x1, x1, #0x1
 838:	cbnz	w2, 4a8 <grub_archelp_dir+0x58>
 83c:	b	4e8 <grub_archelp_dir+0x98>
 840:	mov	w1, #0x0                   	// #0
 844:	add	x0, sp, #0x90
 848:	mov	x2, #0x10                  	// #16
 84c:	bl	0 <grub_memset>
 850:	ldr	w1, [sp, #124]
 854:	cbz	x23, 8c0 <grub_archelp_dir+0x470>
 858:	ldrb	w0, [sp, #144]
 85c:	bfxil	w0, w28, #0, #1
 860:	strb	w0, [sp, #144]
 864:	tbnz	w1, #31, 878 <grub_archelp_dir+0x428>
 868:	ldr	w1, [sp, #120]
 86c:	orr	w0, w0, #0x2
 870:	strb	w0, [sp, #144]
 874:	str	w1, [sp, #148]
 878:	ldr	x3, [sp, #104]
 87c:	mov	x0, x27
 880:	mov	x2, x24
 884:	add	x1, sp, #0x90
 888:	blr	x3
 88c:	cbnz	w0, 8f0 <grub_archelp_dir+0x4a0>
 890:	mov	x0, x22
 894:	bl	0 <grub_free>
 898:	ldr	x22, [sp, #128]
 89c:	b	540 <grub_archelp_dir+0xf0>
 8a0:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 8a4:	ldp	x19, x20, [sp, #16]
 8a8:	ldr	x0, [x0]
 8ac:	ldp	x21, x22, [sp, #32]
 8b0:	ldr	w0, [x0]
 8b4:	ldp	x23, x24, [sp, #48]
 8b8:	ldp	x29, x30, [sp], #160
 8bc:	ret
 8c0:	and	w0, w1, #0xe000
 8c4:	cmp	w0, #0x4, lsl #12
 8c8:	cset	w28, eq  // eq = none
 8cc:	b	858 <grub_archelp_dir+0x408>
 8d0:	mov	x3, x4
 8d4:	cbnz	w2, 4a8 <grub_archelp_dir+0x58>
 8d8:	b	4e8 <grub_archelp_dir+0x98>
 8dc:	adrp	x1, 0 <handle_symlink.isra.0.part.0>
 8e0:	mov	w0, #0x19                  	// #25
 8e4:	ldr	x1, [x1]
 8e8:	bl	0 <grub_error>
 8ec:	b	620 <grub_archelp_dir+0x1d0>
 8f0:	ldr	x0, [sp, #128]
 8f4:	bl	0 <grub_free>
 8f8:	b	620 <grub_archelp_dir+0x1d0>
 8fc:	nop
	...

0000000000000910 <grub_archelp_open>:
 910:	stp	x29, x30, [sp, #-96]!
 914:	mov	x29, sp
 918:	stp	x19, x20, [sp, #16]
 91c:	mov	x20, x0
 920:	mov	x19, x1
 924:	add	x0, x2, #0x1
 928:	stp	x21, x22, [sp, #32]
 92c:	mov	x22, x2
 930:	stp	x23, x24, [sp, #48]
 934:	bl	0 <grub_strdup>
 938:	str	x0, [sp, #88]
 93c:	cbz	x0, a9c <grub_archelp_open+0x18c>
 940:	ldrb	w1, [x0]
 944:	mov	x2, x0
 948:	mov	x3, x0
 94c:	sub	x6, x0, #0x1
 950:	cbnz	w1, 95c <grub_archelp_open+0x4c>
 954:	b	9a0 <grub_archelp_open+0x90>
 958:	ldrb	w1, [x2, #1]!
 95c:	cmp	w1, #0x2f
 960:	b.eq	958 <grub_archelp_open+0x48>  // b.none
 964:	cmp	w1, #0x2e
 968:	b.eq	bb0 <grub_archelp_open+0x2a0>  // b.none
 96c:	ldrb	w1, [x2]
 970:	cmp	w1, #0x2f
 974:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 978:	b.eq	994 <grub_archelp_open+0x84>  // b.none
 97c:	nop
 980:	strb	w1, [x3], #1
 984:	ldrb	w1, [x2, #1]!
 988:	cmp	w1, #0x2f
 98c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 990:	b.ne	980 <grub_archelp_open+0x70>  // b.any
 994:	cbnz	w1, c20 <grub_archelp_open+0x310>
 998:	ldrb	w1, [x2]
 99c:	cbnz	w1, 95c <grub_archelp_open+0x4c>
 9a0:	strb	wzr, [x3]
 9a4:	add	x2, sp, #0x48
 9a8:	add	x3, sp, #0x44
 9ac:	add	x1, sp, #0x50
 9b0:	ldr	x4, [x19]
 9b4:	mov	x0, x20
 9b8:	add	x23, x19, #0x8
 9bc:	mov	w21, #0x0                   	// #0
 9c0:	blr	x4
 9c4:	mov	w24, w0
 9c8:	cbnz	w0, a94 <grub_archelp_open+0x184>
 9cc:	nop
 9d0:	ldr	w0, [sp, #68]
 9d4:	cmn	w0, #0x1
 9d8:	b.eq	c40 <grub_archelp_open+0x330>  // b.none
 9dc:	ldr	x1, [sp, #80]
 9e0:	mov	x4, x1
 9e4:	mov	x5, x1
 9e8:	ldrb	w3, [x1]
 9ec:	sub	x6, x1, #0x1
 9f0:	cbnz	w3, 9fc <grub_archelp_open+0xec>
 9f4:	b	a40 <grub_archelp_open+0x130>
 9f8:	ldrb	w3, [x4, #1]!
 9fc:	cmp	w3, #0x2f
 a00:	b.eq	9f8 <grub_archelp_open+0xe8>  // b.none
 a04:	cmp	w3, #0x2e
 a08:	b.eq	ad4 <grub_archelp_open+0x1c4>  // b.none
 a0c:	ldrb	w3, [x4]
 a10:	cmp	w3, #0x2f
 a14:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 a18:	b.eq	a34 <grub_archelp_open+0x124>  // b.none
 a1c:	nop
 a20:	strb	w3, [x5], #1
 a24:	ldrb	w3, [x4, #1]!
 a28:	cmp	w3, #0x2f
 a2c:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 a30:	b.ne	a20 <grub_archelp_open+0x110>  // b.any
 a34:	cbnz	w3, ac0 <grub_archelp_open+0x1b0>
 a38:	ldrb	w3, [x4]
 a3c:	cbnz	w3, 9fc <grub_archelp_open+0xec>
 a40:	strb	wzr, [x5]
 a44:	str	wzr, [sp, #76]
 a48:	ldr	w0, [sp, #68]
 a4c:	ldr	x2, [sp, #80]
 a50:	and	w0, w0, #0xe000
 a54:	cmp	w0, #0xa, lsl #12
 a58:	b.eq	b44 <grub_archelp_open+0x234>  // b.none
 a5c:	ldr	x0, [sp, #88]
 a60:	mov	x1, x2
 a64:	bl	0 <grub_strcmp>
 a68:	cbz	w0, c6c <grub_archelp_open+0x35c>
 a6c:	ldr	x0, [sp, #80]
 a70:	bl	0 <grub_free>
 a74:	ldr	x4, [x19]
 a78:	add	x3, sp, #0x44
 a7c:	add	x2, sp, #0x48
 a80:	add	x1, sp, #0x50
 a84:	mov	x0, x20
 a88:	blr	x4
 a8c:	mov	w24, w0
 a90:	cbz	w0, 9d0 <grub_archelp_open+0xc0>
 a94:	ldr	x0, [sp, #88]
 a98:	bl	0 <grub_free>
 a9c:	adrp	x0, 0 <handle_symlink.isra.0.part.0>
 aa0:	ldr	x0, [x0]
 aa4:	ldr	w24, [x0]
 aa8:	mov	w0, w24
 aac:	ldp	x19, x20, [sp, #16]
 ab0:	ldp	x21, x22, [sp, #32]
 ab4:	ldp	x23, x24, [sp, #48]
 ab8:	ldp	x29, x30, [sp], #96
 abc:	ret
 ac0:	strb	w3, [x5], #1
 ac4:	ldrb	w3, [x4, #1]
 ac8:	add	x4, x4, #0x1
 acc:	cbnz	w3, 9fc <grub_archelp_open+0xec>
 ad0:	b	a40 <grub_archelp_open+0x130>
 ad4:	ldrb	w3, [x4, #1]
 ad8:	cmp	w3, #0x2f
 adc:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 ae0:	b.eq	ac8 <grub_archelp_open+0x1b8>  // b.none
 ae4:	cmp	w3, #0x2e
 ae8:	b.ne	a0c <grub_archelp_open+0xfc>  // b.any
 aec:	ldrb	w3, [x4, #2]
 af0:	cmp	w3, #0x2f
 af4:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 af8:	b.ne	a0c <grub_archelp_open+0xfc>  // b.any
 afc:	add	x4, x4, #0x2
 b00:	cmp	x1, x5
 b04:	b.eq	a3c <grub_archelp_open+0x12c>  // b.none
 b08:	sub	x2, x5, #0x2
 b0c:	sub	x5, x5, #0x1
 b10:	cmp	x1, x2
 b14:	b.ls	b28 <grub_archelp_open+0x218>  // b.plast
 b18:	b	a3c <grub_archelp_open+0x12c>
 b1c:	cmp	x0, x6
 b20:	b.eq	ba4 <grub_archelp_open+0x294>  // b.none
 b24:	mov	x2, x0
 b28:	ldrb	w5, [x2]
 b2c:	sub	x0, x2, #0x1
 b30:	cmp	w5, #0x2f
 b34:	b.ne	b1c <grub_archelp_open+0x20c>  // b.any
 b38:	add	x5, x2, #0x1
 b3c:	cbnz	w3, 9fc <grub_archelp_open+0xec>
 b40:	b	a40 <grub_archelp_open+0x130>
 b44:	ldr	x0, [x19, #8]
 b48:	cbz	x0, a5c <grub_archelp_open+0x14c>
 b4c:	add	x4, sp, #0x4c
 b50:	add	x3, sp, #0x58
 b54:	mov	x1, x23
 b58:	mov	x0, x20
 b5c:	bl	0 <handle_symlink.isra.0.part.0>
 b60:	cbnz	w0, c60 <grub_archelp_open+0x350>
 b64:	ldr	w0, [sp, #76]
 b68:	ldr	x2, [sp, #80]
 b6c:	cbz	w0, a5c <grub_archelp_open+0x14c>
 b70:	ldr	x1, [x19, #16]
 b74:	add	w21, w21, #0x1
 b78:	mov	x0, x20
 b7c:	blr	x1
 b80:	cmp	w21, #0x8
 b84:	b.ne	a6c <grub_archelp_open+0x15c>  // b.any
 b88:	adrp	x1, 0 <handle_symlink.isra.0.part.0>
 b8c:	mov	w0, #0x19                  	// #25
 b90:	ldr	x1, [x1]
 b94:	bl	0 <grub_error>
 b98:	ldr	x0, [sp, #88]
 b9c:	bl	0 <grub_free>
 ba0:	b	a9c <grub_archelp_open+0x18c>
 ba4:	mov	x5, x2
 ba8:	cbnz	w3, 9fc <grub_archelp_open+0xec>
 bac:	b	a40 <grub_archelp_open+0x130>
 bb0:	ldrb	w1, [x2, #1]
 bb4:	cmp	w1, #0x2f
 bb8:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 bbc:	b.eq	c28 <grub_archelp_open+0x318>  // b.none
 bc0:	cmp	w1, #0x2e
 bc4:	b.ne	96c <grub_archelp_open+0x5c>  // b.any
 bc8:	ldrb	w1, [x2, #2]
 bcc:	cmp	w1, #0x2f
 bd0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 bd4:	b.ne	96c <grub_archelp_open+0x5c>  // b.any
 bd8:	add	x2, x2, #0x2
 bdc:	cmp	x0, x3
 be0:	b.eq	99c <grub_archelp_open+0x8c>  // b.none
 be4:	sub	x4, x3, #0x2
 be8:	sub	x3, x3, #0x1
 bec:	cmp	x0, x4
 bf0:	b.ls	c04 <grub_archelp_open+0x2f4>  // b.plast
 bf4:	b	99c <grub_archelp_open+0x8c>
 bf8:	cmp	x3, x6
 bfc:	b.eq	c34 <grub_archelp_open+0x324>  // b.none
 c00:	mov	x4, x3
 c04:	ldrb	w5, [x4]
 c08:	sub	x3, x4, #0x1
 c0c:	cmp	w5, #0x2f
 c10:	b.ne	bf8 <grub_archelp_open+0x2e8>  // b.any
 c14:	add	x3, x4, #0x1
 c18:	cbnz	w1, 95c <grub_archelp_open+0x4c>
 c1c:	b	9a0 <grub_archelp_open+0x90>
 c20:	strb	w1, [x3], #1
 c24:	ldrb	w1, [x2, #1]
 c28:	add	x2, x2, #0x1
 c2c:	cbnz	w1, 95c <grub_archelp_open+0x4c>
 c30:	b	9a0 <grub_archelp_open+0x90>
 c34:	mov	x3, x4
 c38:	cbnz	w1, 95c <grub_archelp_open+0x4c>
 c3c:	b	9a0 <grub_archelp_open+0x90>
 c40:	adrp	x1, 0 <handle_symlink.isra.0.part.0>
 c44:	mov	x2, x22
 c48:	mov	w0, #0x5                   	// #5
 c4c:	ldr	x1, [x1]
 c50:	bl	0 <grub_error>
 c54:	ldr	x0, [sp, #88]
 c58:	bl	0 <grub_free>
 c5c:	b	a9c <grub_archelp_open+0x18c>
 c60:	ldr	x0, [sp, #80]
 c64:	bl	0 <grub_free>
 c68:	b	a94 <grub_archelp_open+0x184>
 c6c:	ldr	x0, [sp, #80]
 c70:	bl	0 <grub_free>
 c74:	ldr	x0, [sp, #88]
 c78:	bl	0 <grub_free>
 c7c:	b	aa8 <grub_archelp_open+0x198>
	...
