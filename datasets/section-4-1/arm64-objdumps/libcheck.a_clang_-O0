In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_clang_-O0:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
       0:	sub	sp, sp, #0x20
       4:	stp	x29, x30, [sp, #16]
       8:	add	x29, sp, #0x10
       c:	mov	x8, #0x10                  	// #16
      10:	str	x0, [sp, #8]
      14:	mov	x0, x8
      18:	bl	0 <emalloc>
      1c:	str	x0, [sp]
      20:	ldr	x8, [sp, #8]
      24:	cbnz	x8, 3c <suite_create+0x3c>
      28:	ldr	x8, [sp]
      2c:	adrp	x9, 0 <suite_create>
      30:	add	x9, x9, #0x0
      34:	str	x9, [x8]
      38:	b	48 <suite_create+0x48>
      3c:	ldr	x8, [sp, #8]
      40:	ldr	x9, [sp]
      44:	str	x8, [x9]
      48:	bl	0 <check_list_create>
      4c:	ldr	x8, [sp]
      50:	str	x0, [x8, #8]
      54:	ldr	x0, [sp]
      58:	ldp	x29, x30, [sp, #16]
      5c:	add	sp, sp, #0x20
      60:	ret

0000000000000064 <suite_tcase>:
      64:	sub	sp, sp, #0x40
      68:	stp	x29, x30, [sp, #48]
      6c:	add	x29, sp, #0x30
      70:	stur	x0, [x29, #-16]
      74:	str	x1, [sp, #24]
      78:	ldur	x8, [x29, #-16]
      7c:	cbnz	x8, 88 <suite_tcase+0x24>
      80:	stur	wzr, [x29, #-4]
      84:	b	f4 <suite_tcase+0x90>
      88:	ldur	x8, [x29, #-16]
      8c:	ldr	x8, [x8, #8]
      90:	str	x8, [sp, #16]
      94:	ldr	x0, [sp, #16]
      98:	bl	0 <check_list_front>
      9c:	ldr	x0, [sp, #16]
      a0:	bl	0 <check_list_at_end>
      a4:	cmp	w0, #0x0
      a8:	cset	w8, ne  // ne = any
      ac:	eor	w8, w8, #0x1
      b0:	tbnz	w8, #0, b8 <suite_tcase+0x54>
      b4:	b	f0 <suite_tcase+0x8c>
      b8:	ldr	x0, [sp, #16]
      bc:	bl	0 <check_list_val>
      c0:	str	x0, [sp, #8]
      c4:	ldr	x0, [sp, #24]
      c8:	ldr	x8, [sp, #8]
      cc:	ldr	x1, [x8]
      d0:	bl	0 <strcmp>
      d4:	cbnz	w0, e4 <suite_tcase+0x80>
      d8:	mov	w8, #0x1                   	// #1
      dc:	stur	w8, [x29, #-4]
      e0:	b	f4 <suite_tcase+0x90>
      e4:	ldr	x0, [sp, #16]
      e8:	bl	0 <check_list_advance>
      ec:	b	9c <suite_tcase+0x38>
      f0:	stur	wzr, [x29, #-4]
      f4:	ldur	w0, [x29, #-4]
      f8:	ldp	x29, x30, [sp, #48]
      fc:	add	sp, sp, #0x40
     100:	ret

0000000000000104 <tcase_create>:
     104:	sub	sp, sp, #0x50
     108:	stp	x29, x30, [sp, #64]
     10c:	add	x29, sp, #0x40
     110:	fmov	d0, #4.000000000000000000e+00
     114:	mov	x8, #0x48                  	// #72
     118:	stur	x0, [x29, #-8]
     11c:	stur	d0, [x29, #-24]
     120:	mov	x0, x8
     124:	bl	0 <emalloc>
     128:	str	x0, [sp, #32]
     12c:	ldur	x8, [x29, #-8]
     130:	cbnz	x8, 148 <tcase_create+0x44>
     134:	ldr	x8, [sp, #32]
     138:	adrp	x9, 0 <suite_create>
     13c:	add	x9, x9, #0x0
     140:	str	x9, [x8]
     144:	b	154 <tcase_create+0x50>
     148:	ldur	x8, [x29, #-8]
     14c:	ldr	x9, [sp, #32]
     150:	str	x8, [x9]
     154:	adrp	x0, 0 <suite_create>
     158:	add	x0, x0, #0x0
     15c:	bl	0 <getenv>
     160:	stur	x0, [x29, #-16]
     164:	ldur	x8, [x29, #-16]
     168:	cbz	x8, 1bc <tcase_create+0xb8>
     16c:	add	x1, sp, #0x18
     170:	mov	x8, xzr
     174:	str	x8, [sp, #24]
     178:	ldur	x0, [x29, #-16]
     17c:	bl	0 <strtod>
     180:	str	d0, [sp, #16]
     184:	ldr	d0, [sp, #16]
     188:	fcmp	d0, #0.0
     18c:	cset	w9, ge  // ge = tcont
     190:	tbnz	w9, #0, 198 <tcase_create+0x94>
     194:	b	1bc <tcase_create+0xb8>
     198:	ldr	x8, [sp, #24]
     19c:	ldur	x9, [x29, #-16]
     1a0:	cmp	x8, x9
     1a4:	b.eq	1bc <tcase_create+0xb8>  // b.none
     1a8:	ldr	x8, [sp, #24]
     1ac:	ldrb	w9, [x8]
     1b0:	cbnz	w9, 1bc <tcase_create+0xb8>
     1b4:	ldr	x8, [sp, #16]
     1b8:	stur	x8, [x29, #-24]
     1bc:	adrp	x0, 0 <suite_create>
     1c0:	add	x0, x0, #0x0
     1c4:	bl	0 <getenv>
     1c8:	stur	x0, [x29, #-16]
     1cc:	ldur	x8, [x29, #-16]
     1d0:	cbz	x8, 22c <tcase_create+0x128>
     1d4:	add	x1, sp, #0x8
     1d8:	mov	x8, xzr
     1dc:	str	x8, [sp, #8]
     1e0:	ldur	x0, [x29, #-16]
     1e4:	bl	0 <strtod>
     1e8:	str	d0, [sp]
     1ec:	ldr	d0, [sp]
     1f0:	fcmp	d0, #0.0
     1f4:	cset	w9, ge  // ge = tcont
     1f8:	tbnz	w9, #0, 200 <tcase_create+0xfc>
     1fc:	b	22c <tcase_create+0x128>
     200:	ldr	x8, [sp, #8]
     204:	ldur	x9, [x29, #-16]
     208:	cmp	x8, x9
     20c:	b.eq	22c <tcase_create+0x128>  // b.none
     210:	ldr	x8, [sp, #8]
     214:	ldrb	w9, [x8]
     218:	cbnz	w9, 22c <tcase_create+0x128>
     21c:	ldur	d0, [x29, #-24]
     220:	ldr	d1, [sp]
     224:	fmul	d0, d0, d1
     228:	stur	d0, [x29, #-24]
     22c:	ldur	d0, [x29, #-24]
     230:	fcvtms	x8, d0
     234:	ldr	x9, [sp, #32]
     238:	str	x8, [x9, #8]
     23c:	ldur	d0, [x29, #-24]
     240:	ldur	d1, [x29, #-24]
     244:	frintm	d1, d1
     248:	fsub	d0, d0, d1
     24c:	mov	x8, #0xcd6500000000        	// #225833675390976
     250:	movk	x8, #0x41cd, lsl #48
     254:	fmov	d1, x8
     258:	fmul	d0, d0, d1
     25c:	fcvtzs	x8, d0
     260:	ldr	x9, [sp, #32]
     264:	str	x8, [x9, #16]
     268:	bl	0 <check_list_create>
     26c:	ldr	x8, [sp, #32]
     270:	str	x0, [x8, #24]
     274:	bl	0 <check_list_create>
     278:	ldr	x8, [sp, #32]
     27c:	str	x0, [x8, #32]
     280:	bl	0 <check_list_create>
     284:	ldr	x8, [sp, #32]
     288:	str	x0, [x8, #48]
     28c:	bl	0 <check_list_create>
     290:	ldr	x8, [sp, #32]
     294:	str	x0, [x8, #40]
     298:	bl	0 <check_list_create>
     29c:	ldr	x8, [sp, #32]
     2a0:	str	x0, [x8, #56]
     2a4:	bl	0 <check_list_create>
     2a8:	ldr	x8, [sp, #32]
     2ac:	str	x0, [x8, #64]
     2b0:	ldr	x0, [sp, #32]
     2b4:	ldp	x29, x30, [sp, #64]
     2b8:	add	sp, sp, #0x50
     2bc:	ret

00000000000002c0 <tag_string_to_list>:
     2c0:	sub	sp, sp, #0x50
     2c4:	stp	x29, x30, [sp, #64]
     2c8:	add	x29, sp, #0x40
     2cc:	stur	x0, [x29, #-16]
     2d0:	bl	0 <check_list_create>
     2d4:	stur	x0, [x29, #-24]
     2d8:	ldur	x8, [x29, #-16]
     2dc:	cbnz	x8, 2ec <tag_string_to_list+0x2c>
     2e0:	ldur	x8, [x29, #-24]
     2e4:	stur	x8, [x29, #-8]
     2e8:	b	368 <tag_string_to_list+0xa8>
     2ec:	ldur	x0, [x29, #-16]
     2f0:	bl	0 <strdup>
     2f4:	str	x0, [sp, #32]
     2f8:	ldr	x0, [sp, #32]
     2fc:	adrp	x1, 0 <suite_create>
     300:	add	x1, x1, #0x0
     304:	bl	0 <strtok>
     308:	str	x0, [sp, #24]
     30c:	ldr	x8, [sp, #24]
     310:	cbz	x8, 358 <tag_string_to_list+0x98>
     314:	ldur	x0, [x29, #-24]
     318:	ldr	x8, [sp, #24]
     31c:	str	x0, [sp, #16]
     320:	mov	x0, x8
     324:	bl	0 <strdup>
     328:	ldr	x8, [sp, #16]
     32c:	str	x0, [sp, #8]
     330:	mov	x0, x8
     334:	ldr	x1, [sp, #8]
     338:	bl	0 <check_list_add_end>
     33c:	mov	x8, xzr
     340:	mov	x0, x8
     344:	adrp	x1, 0 <suite_create>
     348:	add	x1, x1, #0x0
     34c:	bl	0 <strtok>
     350:	str	x0, [sp, #24]
     354:	b	30c <tag_string_to_list+0x4c>
     358:	ldr	x0, [sp, #32]
     35c:	bl	0 <free>
     360:	ldur	x8, [x29, #-24]
     364:	stur	x8, [x29, #-8]
     368:	ldur	x0, [x29, #-8]
     36c:	ldp	x29, x30, [sp, #64]
     370:	add	sp, sp, #0x50
     374:	ret

0000000000000378 <tcase_set_tags>:
     378:	sub	sp, sp, #0x20
     37c:	stp	x29, x30, [sp, #16]
     380:	add	x29, sp, #0x10
     384:	str	x0, [sp, #8]
     388:	str	x1, [sp]
     38c:	ldr	x8, [sp, #8]
     390:	ldr	x8, [x8, #64]
     394:	cbz	x8, 3b8 <tcase_set_tags+0x40>
     398:	ldr	x8, [sp, #8]
     39c:	ldr	x0, [x8, #64]
     3a0:	adrp	x1, 0 <free>
     3a4:	add	x1, x1, #0x0
     3a8:	bl	0 <check_list_apply>
     3ac:	ldr	x8, [sp, #8]
     3b0:	ldr	x0, [x8, #64]
     3b4:	bl	0 <check_list_free>
     3b8:	ldr	x0, [sp]
     3bc:	bl	2c0 <tag_string_to_list>
     3c0:	ldr	x8, [sp, #8]
     3c4:	str	x0, [x8, #64]
     3c8:	ldp	x29, x30, [sp, #16]
     3cc:	add	sp, sp, #0x20
     3d0:	ret

00000000000003d4 <tcase_matching_tag>:
     3d4:	sub	sp, sp, #0x40
     3d8:	stp	x29, x30, [sp, #48]
     3dc:	add	x29, sp, #0x30
     3e0:	stur	x0, [x29, #-16]
     3e4:	str	x1, [sp, #24]
     3e8:	ldr	x8, [sp, #24]
     3ec:	cbnz	x8, 3f8 <tcase_matching_tag+0x24>
     3f0:	stur	wzr, [x29, #-4]
     3f4:	b	4a8 <tcase_matching_tag+0xd4>
     3f8:	ldr	x0, [sp, #24]
     3fc:	bl	0 <check_list_front>
     400:	ldr	x0, [sp, #24]
     404:	bl	0 <check_list_at_end>
     408:	cmp	w0, #0x0
     40c:	cset	w8, ne  // ne = any
     410:	eor	w8, w8, #0x1
     414:	tbnz	w8, #0, 41c <tcase_matching_tag+0x48>
     418:	b	4a4 <tcase_matching_tag+0xd0>
     41c:	ldur	x8, [x29, #-16]
     420:	ldr	x0, [x8, #64]
     424:	bl	0 <check_list_front>
     428:	ldur	x8, [x29, #-16]
     42c:	ldr	x0, [x8, #64]
     430:	bl	0 <check_list_at_end>
     434:	cmp	w0, #0x0
     438:	cset	w9, ne  // ne = any
     43c:	eor	w9, w9, #0x1
     440:	tbnz	w9, #0, 448 <tcase_matching_tag+0x74>
     444:	b	498 <tcase_matching_tag+0xc4>
     448:	ldur	x8, [x29, #-16]
     44c:	ldr	x0, [x8, #64]
     450:	bl	0 <check_list_val>
     454:	ldr	x8, [sp, #24]
     458:	str	x0, [sp, #16]
     45c:	mov	x0, x8
     460:	bl	0 <check_list_val>
     464:	ldr	x1, [sp, #16]
     468:	str	x0, [sp, #8]
     46c:	mov	x0, x1
     470:	ldr	x1, [sp, #8]
     474:	bl	0 <strcmp>
     478:	cbnz	w0, 488 <tcase_matching_tag+0xb4>
     47c:	mov	w8, #0x1                   	// #1
     480:	stur	w8, [x29, #-4]
     484:	b	4a8 <tcase_matching_tag+0xd4>
     488:	ldur	x8, [x29, #-16]
     48c:	ldr	x0, [x8, #64]
     490:	bl	0 <check_list_advance>
     494:	b	428 <tcase_matching_tag+0x54>
     498:	ldr	x0, [sp, #24]
     49c:	bl	0 <check_list_advance>
     4a0:	b	400 <tcase_matching_tag+0x2c>
     4a4:	stur	wzr, [x29, #-4]
     4a8:	ldur	w0, [x29, #-4]
     4ac:	ldp	x29, x30, [sp, #48]
     4b0:	add	sp, sp, #0x40
     4b4:	ret

00000000000004b8 <suite_add_tcase>:
     4b8:	sub	sp, sp, #0x20
     4bc:	stp	x29, x30, [sp, #16]
     4c0:	add	x29, sp, #0x10
     4c4:	str	x0, [sp, #8]
     4c8:	str	x1, [sp]
     4cc:	ldr	x8, [sp, #8]
     4d0:	cbz	x8, 4f0 <suite_add_tcase+0x38>
     4d4:	ldr	x8, [sp]
     4d8:	cbz	x8, 4f0 <suite_add_tcase+0x38>
     4dc:	ldr	x8, [sp, #8]
     4e0:	ldr	x0, [x8, #8]
     4e4:	ldr	x1, [sp]
     4e8:	bl	0 <check_list_contains>
     4ec:	cbz	w0, 4f4 <suite_add_tcase+0x3c>
     4f0:	b	504 <suite_add_tcase+0x4c>
     4f4:	ldr	x8, [sp, #8]
     4f8:	ldr	x0, [x8, #8]
     4fc:	ldr	x1, [sp]
     500:	bl	0 <check_list_add_end>
     504:	ldp	x29, x30, [sp, #16]
     508:	add	sp, sp, #0x20
     50c:	ret

0000000000000510 <_tcase_add_test>:
     510:	sub	sp, sp, #0x40
     514:	stp	x29, x30, [sp, #48]
     518:	add	x29, sp, #0x30
     51c:	stur	x0, [x29, #-8]
     520:	stur	x1, [x29, #-16]
     524:	stur	w2, [x29, #-20]
     528:	str	w3, [sp, #24]
     52c:	str	w4, [sp, #20]
     530:	str	w5, [sp, #16]
     534:	ldur	x8, [x29, #-8]
     538:	cbz	x8, 544 <_tcase_add_test+0x34>
     53c:	ldur	x8, [x29, #-16]
     540:	cbnz	x8, 548 <_tcase_add_test+0x38>
     544:	b	5a8 <_tcase_add_test+0x98>
     548:	mov	x0, #0x18                  	// #24
     54c:	bl	0 <emalloc>
     550:	str	x0, [sp, #8]
     554:	ldur	x8, [x29, #-16]
     558:	ldr	x9, [sp, #8]
     55c:	str	x8, [x9]
     560:	ldr	w10, [sp, #20]
     564:	ldr	x8, [sp, #8]
     568:	str	w10, [x8, #8]
     56c:	ldr	w10, [sp, #16]
     570:	ldr	x8, [sp, #8]
     574:	str	w10, [x8, #12]
     578:	ldur	w10, [x29, #-20]
     57c:	ldr	x8, [sp, #8]
     580:	str	w10, [x8, #16]
     584:	ldr	w10, [sp, #24]
     588:	mov	w11, #0xff                  	// #255
     58c:	and	w10, w11, w10
     590:	ldr	x8, [sp, #8]
     594:	strb	w10, [x8, #20]
     598:	ldur	x8, [x29, #-8]
     59c:	ldr	x0, [x8, #24]
     5a0:	ldr	x1, [sp, #8]
     5a4:	bl	0 <check_list_add_end>
     5a8:	ldp	x29, x30, [sp, #48]
     5ac:	add	sp, sp, #0x40
     5b0:	ret

00000000000005b4 <tcase_add_unchecked_fixture>:
     5b4:	sub	sp, sp, #0x30
     5b8:	stp	x29, x30, [sp, #32]
     5bc:	add	x29, sp, #0x20
     5c0:	mov	w8, wzr
     5c4:	stur	x0, [x29, #-8]
     5c8:	str	x1, [sp, #16]
     5cc:	str	x2, [sp, #8]
     5d0:	ldur	x0, [x29, #-8]
     5d4:	ldr	x1, [sp, #16]
     5d8:	ldr	x2, [sp, #8]
     5dc:	mov	w3, w8
     5e0:	bl	5f0 <tcase_add_fixture>
     5e4:	ldp	x29, x30, [sp, #32]
     5e8:	add	sp, sp, #0x30
     5ec:	ret

00000000000005f0 <tcase_add_fixture>:
     5f0:	sub	sp, sp, #0x70
     5f4:	stp	x29, x30, [sp, #96]
     5f8:	add	x29, sp, #0x60
     5fc:	stur	x0, [x29, #-8]
     600:	stur	x1, [x29, #-16]
     604:	stur	x2, [x29, #-24]
     608:	stur	w3, [x29, #-28]
     60c:	ldur	x8, [x29, #-16]
     610:	cbz	x8, 680 <tcase_add_fixture+0x90>
     614:	ldur	w8, [x29, #-28]
     618:	cbz	w8, 650 <tcase_add_fixture+0x60>
     61c:	ldur	x8, [x29, #-8]
     620:	ldr	x0, [x8, #48]
     624:	ldur	x8, [x29, #-16]
     628:	ldur	w1, [x29, #-28]
     62c:	stur	x0, [x29, #-40]
     630:	mov	x0, x8
     634:	bl	10b0 <fixture_create>
     638:	ldur	x8, [x29, #-40]
     63c:	str	x0, [sp, #48]
     640:	mov	x0, x8
     644:	ldr	x1, [sp, #48]
     648:	bl	0 <check_list_add_end>
     64c:	b	680 <tcase_add_fixture+0x90>
     650:	ldur	x8, [x29, #-8]
     654:	ldr	x0, [x8, #32]
     658:	ldur	x8, [x29, #-16]
     65c:	ldur	w1, [x29, #-28]
     660:	str	x0, [sp, #40]
     664:	mov	x0, x8
     668:	bl	10b0 <fixture_create>
     66c:	ldr	x8, [sp, #40]
     670:	str	x0, [sp, #32]
     674:	mov	x0, x8
     678:	ldr	x1, [sp, #32]
     67c:	bl	0 <check_list_add_end>
     680:	ldur	x8, [x29, #-24]
     684:	cbz	x8, 6f4 <tcase_add_fixture+0x104>
     688:	ldur	w8, [x29, #-28]
     68c:	cbz	w8, 6c4 <tcase_add_fixture+0xd4>
     690:	ldur	x8, [x29, #-8]
     694:	ldr	x0, [x8, #56]
     698:	ldur	x8, [x29, #-24]
     69c:	ldur	w1, [x29, #-28]
     6a0:	str	x0, [sp, #24]
     6a4:	mov	x0, x8
     6a8:	bl	10b0 <fixture_create>
     6ac:	ldr	x8, [sp, #24]
     6b0:	str	x0, [sp, #16]
     6b4:	mov	x0, x8
     6b8:	ldr	x1, [sp, #16]
     6bc:	bl	0 <check_list_add_front>
     6c0:	b	6f4 <tcase_add_fixture+0x104>
     6c4:	ldur	x8, [x29, #-8]
     6c8:	ldr	x0, [x8, #40]
     6cc:	ldur	x8, [x29, #-24]
     6d0:	ldur	w1, [x29, #-28]
     6d4:	str	x0, [sp, #8]
     6d8:	mov	x0, x8
     6dc:	bl	10b0 <fixture_create>
     6e0:	ldr	x8, [sp, #8]
     6e4:	str	x0, [sp]
     6e8:	mov	x0, x8
     6ec:	ldr	x1, [sp]
     6f0:	bl	0 <check_list_add_front>
     6f4:	ldp	x29, x30, [sp, #96]
     6f8:	add	sp, sp, #0x70
     6fc:	ret

0000000000000700 <tcase_add_checked_fixture>:
     700:	sub	sp, sp, #0x30
     704:	stp	x29, x30, [sp, #32]
     708:	add	x29, sp, #0x20
     70c:	mov	w3, #0x1                   	// #1
     710:	stur	x0, [x29, #-8]
     714:	str	x1, [sp, #16]
     718:	str	x2, [sp, #8]
     71c:	ldur	x0, [x29, #-8]
     720:	ldr	x1, [sp, #16]
     724:	ldr	x2, [sp, #8]
     728:	bl	5f0 <tcase_add_fixture>
     72c:	ldp	x29, x30, [sp, #32]
     730:	add	sp, sp, #0x30
     734:	ret

0000000000000738 <tcase_set_timeout>:
     738:	sub	sp, sp, #0x40
     73c:	stp	x29, x30, [sp, #48]
     740:	add	x29, sp, #0x30
     744:	stur	x0, [x29, #-8]
     748:	stur	d0, [x29, #-16]
     74c:	ldur	d0, [x29, #-16]
     750:	fcmp	d0, #0.0
     754:	cset	w8, ge  // ge = tcont
     758:	tbnz	w8, #0, 760 <tcase_set_timeout+0x28>
     75c:	b	80c <tcase_set_timeout+0xd4>
     760:	adrp	x0, 0 <suite_create>
     764:	add	x0, x0, #0x0
     768:	bl	0 <getenv>
     76c:	str	x0, [sp, #24]
     770:	ldr	x8, [sp, #24]
     774:	cbz	x8, 7d0 <tcase_set_timeout+0x98>
     778:	add	x1, sp, #0x10
     77c:	mov	x8, xzr
     780:	str	x8, [sp, #16]
     784:	ldr	x0, [sp, #24]
     788:	bl	0 <strtod>
     78c:	str	d0, [sp, #8]
     790:	ldr	d0, [sp, #8]
     794:	fcmp	d0, #0.0
     798:	cset	w9, ge  // ge = tcont
     79c:	tbnz	w9, #0, 7a4 <tcase_set_timeout+0x6c>
     7a0:	b	7d0 <tcase_set_timeout+0x98>
     7a4:	ldr	x8, [sp, #16]
     7a8:	ldr	x9, [sp, #24]
     7ac:	cmp	x8, x9
     7b0:	b.eq	7d0 <tcase_set_timeout+0x98>  // b.none
     7b4:	ldr	x8, [sp, #16]
     7b8:	ldrb	w9, [x8]
     7bc:	cbnz	w9, 7d0 <tcase_set_timeout+0x98>
     7c0:	ldur	d0, [x29, #-16]
     7c4:	ldr	d1, [sp, #8]
     7c8:	fmul	d0, d0, d1
     7cc:	stur	d0, [x29, #-16]
     7d0:	ldur	d0, [x29, #-16]
     7d4:	fcvtms	x8, d0
     7d8:	ldur	x9, [x29, #-8]
     7dc:	str	x8, [x9, #8]
     7e0:	ldur	d0, [x29, #-16]
     7e4:	ldur	d1, [x29, #-16]
     7e8:	frintm	d1, d1
     7ec:	fsub	d0, d0, d1
     7f0:	mov	x8, #0xcd6500000000        	// #225833675390976
     7f4:	movk	x8, #0x41cd, lsl #48
     7f8:	fmov	d1, x8
     7fc:	fmul	d0, d0, d1
     800:	fcvtzs	x8, d0
     804:	ldur	x9, [x29, #-8]
     808:	str	x8, [x9, #16]
     80c:	ldp	x29, x30, [sp, #48]
     810:	add	sp, sp, #0x40
     814:	ret

0000000000000818 <tcase_fn_start>:
     818:	sub	sp, sp, #0x30
     81c:	stp	x29, x30, [sp, #32]
     820:	add	x29, sp, #0x20
     824:	mov	w8, #0x2                   	// #2
     828:	adrp	x9, 8 <suite_create+0x8>
     82c:	add	x9, x9, #0x0
     830:	stur	x0, [x29, #-8]
     834:	str	x1, [sp, #16]
     838:	str	w2, [sp, #12]
     83c:	mov	w0, w8
     840:	str	x9, [sp]
     844:	bl	0 <send_ctx_info>
     848:	ldr	x0, [sp, #16]
     84c:	ldr	w1, [sp, #12]
     850:	bl	0 <send_loc_info>
     854:	ldur	x9, [x29, #-8]
     858:	ldr	x10, [sp]
     85c:	str	x9, [x10]
     860:	ldp	x29, x30, [sp, #32]
     864:	add	sp, sp, #0x30
     868:	ret

000000000000086c <tcase_name>:
     86c:	adrp	x8, 8 <suite_create+0x8>
     870:	add	x8, x8, #0x0
     874:	ldr	x0, [x8]
     878:	ret

000000000000087c <_mark_point>:
     87c:	sub	sp, sp, #0x20
     880:	stp	x29, x30, [sp, #16]
     884:	add	x29, sp, #0x10
     888:	str	x0, [sp, #8]
     88c:	str	w1, [sp, #4]
     890:	ldr	x0, [sp, #8]
     894:	ldr	w1, [sp, #4]
     898:	bl	0 <send_loc_info>
     89c:	ldp	x29, x30, [sp, #16]
     8a0:	add	sp, sp, #0x20
     8a4:	ret

00000000000008a8 <_ck_assert_failed>:
     8a8:	stp	x29, x30, [sp, #-32]!
     8ac:	str	x28, [sp, #16]
     8b0:	mov	x29, sp
     8b4:	sub	sp, sp, #0x2, lsl #12
     8b8:	sub	sp, sp, #0x140
     8bc:	str	q7, [sp, #144]
     8c0:	str	q6, [sp, #128]
     8c4:	str	q5, [sp, #112]
     8c8:	str	q4, [sp, #96]
     8cc:	str	q3, [sp, #80]
     8d0:	str	q2, [sp, #64]
     8d4:	str	q1, [sp, #48]
     8d8:	str	q0, [sp, #32]
     8dc:	str	x7, [sp, #200]
     8e0:	str	x6, [sp, #192]
     8e4:	str	x5, [sp, #184]
     8e8:	str	x4, [sp, #176]
     8ec:	str	x3, [sp, #168]
     8f0:	stur	x0, [x29, #-8]
     8f4:	stur	w1, [x29, #-12]
     8f8:	stur	x2, [x29, #-24]
     8fc:	ldur	x0, [x29, #-8]
     900:	ldur	w1, [x29, #-12]
     904:	bl	0 <send_loc_info>
     908:	mov	w8, #0xffffff80            	// #-128
     90c:	stur	w8, [x29, #-36]
     910:	mov	w8, #0xffffffd8            	// #-40
     914:	stur	w8, [x29, #-40]
     918:	add	x9, sp, #0x20
     91c:	add	x9, x9, #0x80
     920:	stur	x9, [x29, #-48]
     924:	add	x9, sp, #0xa8
     928:	add	x9, x9, #0x28
     92c:	stur	x9, [x29, #-56]
     930:	add	x9, x29, #0x20
     934:	stur	x9, [x29, #-64]
     938:	sub	x9, x29, #0x40
     93c:	add	x9, x9, #0x18
     940:	ldur	w8, [x29, #-40]
     944:	mov	w10, w8
     948:	str	x9, [sp, #24]
     94c:	str	w10, [sp, #20]
     950:	tbz	w8, #31, 988 <_ck_assert_failed+0xe0>
     954:	b	958 <_ck_assert_failed+0xb0>
     958:	ldr	w8, [sp, #20]
     95c:	add	w9, w8, #0x8
     960:	ldr	x10, [sp, #24]
     964:	str	w9, [x10]
     968:	subs	w9, w9, #0x0
     96c:	b.gt	988 <_ck_assert_failed+0xe0>
     970:	b	974 <_ck_assert_failed+0xcc>
     974:	ldur	x8, [x29, #-56]
     978:	ldr	w9, [sp, #20]
     97c:	add	x8, x8, w9, sxtw
     980:	str	x8, [sp, #8]
     984:	b	99c <_ck_assert_failed+0xf4>
     988:	ldur	x8, [x29, #-64]
     98c:	add	x9, x8, #0x8
     990:	stur	x9, [x29, #-64]
     994:	str	x8, [sp, #8]
     998:	b	99c <_ck_assert_failed+0xf4>
     99c:	ldr	x8, [sp, #8]
     9a0:	ldr	x8, [x8]
     9a4:	stur	x8, [x29, #-32]
     9a8:	ldur	x8, [x29, #-32]
     9ac:	cbz	x8, 9f0 <_ck_assert_failed+0x148>
     9b0:	b	9b4 <_ck_assert_failed+0x10c>
     9b4:	ldur	x2, [x29, #-32]
     9b8:	ldur	q0, [x29, #-64]
     9bc:	ldur	q1, [x29, #-48]
     9c0:	str	q1, [sp, #224]
     9c4:	str	q0, [sp, #208]
     9c8:	mov	w8, #0x2000                	// #8192
     9cc:	mov	w1, w8
     9d0:	add	x9, sp, #0x100
     9d4:	add	x3, sp, #0xd0
     9d8:	mov	x0, x9
     9dc:	str	x9, [sp]
     9e0:	bl	0 <vsnprintf>
     9e4:	ldr	x9, [sp]
     9e8:	str	x9, [sp, #248]
     9ec:	b	9fc <_ck_assert_failed+0x154>
     9f0:	ldur	x8, [x29, #-24]
     9f4:	str	x8, [sp, #248]
     9f8:	b	9fc <_ck_assert_failed+0x154>
     9fc:	ldr	x0, [sp, #248]
     a00:	bl	0 <send_failure_info>
     a04:	bl	a2c <cur_fork_status>
     a08:	subs	w8, w0, #0x1
     a0c:	b.ne	a1c <_ck_assert_failed+0x174>  // b.any
     a10:	b	a14 <_ck_assert_failed+0x16c>
     a14:	mov	w0, #0x1                   	// #1
     a18:	bl	0 <_exit>
     a1c:	adrp	x0, 0 <error_jmp_buffer>
     a20:	add	x0, x0, #0x0
     a24:	mov	w1, #0x1                   	// #1
     a28:	bl	0 <longjmp>

0000000000000a2c <cur_fork_status>:
     a2c:	adrp	x8, 0 <suite_create>
     a30:	add	x8, x8, #0x0
     a34:	ldr	w0, [x8]
     a38:	ret

0000000000000a3c <srunner_create>:
     a3c:	sub	sp, sp, #0x20
     a40:	stp	x29, x30, [sp, #16]
     a44:	add	x29, sp, #0x10
     a48:	mov	x8, #0x40                  	// #64
     a4c:	str	x0, [sp, #8]
     a50:	mov	x0, x8
     a54:	bl	0 <emalloc>
     a58:	str	x0, [sp]
     a5c:	bl	0 <check_list_create>
     a60:	ldr	x8, [sp]
     a64:	str	x0, [x8]
     a68:	ldr	x8, [sp, #8]
     a6c:	cbz	x8, a80 <srunner_create+0x44>
     a70:	ldr	x8, [sp]
     a74:	ldr	x0, [x8]
     a78:	ldr	x1, [sp, #8]
     a7c:	bl	0 <check_list_add_end>
     a80:	mov	x0, #0xc                   	// #12
     a84:	bl	0 <emalloc>
     a88:	ldr	x8, [sp]
     a8c:	str	x0, [x8, #8]
     a90:	ldr	x8, [sp]
     a94:	ldr	x8, [x8, #8]
     a98:	str	wzr, [x8, #8]
     a9c:	ldr	x8, [sp]
     aa0:	ldr	x8, [x8, #8]
     aa4:	str	wzr, [x8, #4]
     aa8:	ldr	x8, [sp]
     aac:	ldr	x8, [x8, #8]
     ab0:	str	wzr, [x8]
     ab4:	bl	0 <check_list_create>
     ab8:	ldr	x8, [sp]
     abc:	str	x0, [x8, #16]
     ac0:	ldr	x8, [sp]
     ac4:	mov	x9, xzr
     ac8:	str	x9, [x8, #24]
     acc:	ldr	x8, [sp]
     ad0:	str	x9, [x8, #32]
     ad4:	ldr	x8, [sp]
     ad8:	str	x9, [x8, #40]
     adc:	ldr	x8, [sp]
     ae0:	str	x9, [x8, #48]
     ae4:	ldr	x8, [sp]
     ae8:	str	wzr, [x8, #56]
     aec:	ldr	x0, [sp]
     af0:	ldp	x29, x30, [sp, #16]
     af4:	add	sp, sp, #0x20
     af8:	ret

0000000000000afc <srunner_add_suite>:
     afc:	sub	sp, sp, #0x20
     b00:	stp	x29, x30, [sp, #16]
     b04:	add	x29, sp, #0x10
     b08:	str	x0, [sp, #8]
     b0c:	str	x1, [sp]
     b10:	ldr	x8, [sp]
     b14:	cbnz	x8, b1c <srunner_add_suite+0x20>
     b18:	b	b2c <srunner_add_suite+0x30>
     b1c:	ldr	x8, [sp, #8]
     b20:	ldr	x0, [x8]
     b24:	ldr	x1, [sp]
     b28:	bl	0 <check_list_add_end>
     b2c:	ldp	x29, x30, [sp, #16]
     b30:	add	sp, sp, #0x20
     b34:	ret

0000000000000b38 <srunner_free>:
     b38:	sub	sp, sp, #0x30
     b3c:	stp	x29, x30, [sp, #32]
     b40:	add	x29, sp, #0x20
     b44:	stur	x0, [x29, #-8]
     b48:	ldur	x8, [x29, #-8]
     b4c:	cbnz	x8, b54 <srunner_free+0x1c>
     b50:	b	c18 <srunner_free+0xe0>
     b54:	ldur	x8, [x29, #-8]
     b58:	ldr	x0, [x8, #8]
     b5c:	bl	0 <free>
     b60:	ldur	x8, [x29, #-8]
     b64:	ldr	x8, [x8]
     b68:	str	x8, [sp, #16]
     b6c:	ldr	x0, [sp, #16]
     b70:	bl	0 <check_list_front>
     b74:	ldr	x0, [sp, #16]
     b78:	bl	0 <check_list_at_end>
     b7c:	cmp	w0, #0x0
     b80:	cset	w8, ne  // ne = any
     b84:	eor	w8, w8, #0x1
     b88:	tbnz	w8, #0, b90 <srunner_free+0x58>
     b8c:	b	ba8 <srunner_free+0x70>
     b90:	ldr	x0, [sp, #16]
     b94:	bl	0 <check_list_val>
     b98:	bl	c24 <suite_free>
     b9c:	ldr	x0, [sp, #16]
     ba0:	bl	0 <check_list_advance>
     ba4:	b	b74 <srunner_free+0x3c>
     ba8:	ldur	x8, [x29, #-8]
     bac:	ldr	x0, [x8]
     bb0:	bl	0 <check_list_free>
     bb4:	ldur	x8, [x29, #-8]
     bb8:	ldr	x8, [x8, #16]
     bbc:	str	x8, [sp, #16]
     bc0:	ldr	x0, [sp, #16]
     bc4:	bl	0 <check_list_front>
     bc8:	ldr	x0, [sp, #16]
     bcc:	bl	0 <check_list_at_end>
     bd0:	cmp	w0, #0x0
     bd4:	cset	w8, ne  // ne = any
     bd8:	eor	w8, w8, #0x1
     bdc:	tbnz	w8, #0, be4 <srunner_free+0xac>
     be0:	b	c04 <srunner_free+0xcc>
     be4:	ldr	x0, [sp, #16]
     be8:	bl	0 <check_list_val>
     bec:	str	x0, [sp, #8]
     bf0:	ldr	x0, [sp, #8]
     bf4:	bl	ca8 <tr_free>
     bf8:	ldr	x0, [sp, #16]
     bfc:	bl	0 <check_list_advance>
     c00:	b	bc8 <srunner_free+0x90>
     c04:	ldur	x8, [x29, #-8]
     c08:	ldr	x0, [x8, #16]
     c0c:	bl	0 <check_list_free>
     c10:	ldur	x0, [x29, #-8]
     c14:	bl	0 <free>
     c18:	ldp	x29, x30, [sp, #32]
     c1c:	add	sp, sp, #0x30
     c20:	ret

0000000000000c24 <suite_free>:
     c24:	sub	sp, sp, #0x20
     c28:	stp	x29, x30, [sp, #16]
     c2c:	add	x29, sp, #0x10
     c30:	str	x0, [sp, #8]
     c34:	ldr	x8, [sp, #8]
     c38:	cbnz	x8, c40 <suite_free+0x1c>
     c3c:	b	c9c <suite_free+0x78>
     c40:	ldr	x8, [sp, #8]
     c44:	ldr	x8, [x8, #8]
     c48:	str	x8, [sp]
     c4c:	ldr	x0, [sp]
     c50:	bl	0 <check_list_front>
     c54:	ldr	x0, [sp]
     c58:	bl	0 <check_list_at_end>
     c5c:	cmp	w0, #0x0
     c60:	cset	w8, ne  // ne = any
     c64:	eor	w8, w8, #0x1
     c68:	tbnz	w8, #0, c70 <suite_free+0x4c>
     c6c:	b	c88 <suite_free+0x64>
     c70:	ldr	x0, [sp]
     c74:	bl	0 <check_list_val>
     c78:	bl	10fc <tcase_free>
     c7c:	ldr	x0, [sp]
     c80:	bl	0 <check_list_advance>
     c84:	b	c54 <suite_free+0x30>
     c88:	ldr	x8, [sp, #8]
     c8c:	ldr	x0, [x8, #8]
     c90:	bl	0 <check_list_free>
     c94:	ldr	x0, [sp, #8]
     c98:	bl	0 <free>
     c9c:	ldp	x29, x30, [sp, #16]
     ca0:	add	sp, sp, #0x20
     ca4:	ret

0000000000000ca8 <tr_free>:
     ca8:	sub	sp, sp, #0x20
     cac:	stp	x29, x30, [sp, #16]
     cb0:	add	x29, sp, #0x10
     cb4:	str	x0, [sp, #8]
     cb8:	ldr	x8, [sp, #8]
     cbc:	ldr	x0, [x8, #8]
     cc0:	bl	0 <free>
     cc4:	ldr	x8, [sp, #8]
     cc8:	ldr	x0, [x8, #48]
     ccc:	bl	0 <free>
     cd0:	ldr	x0, [sp, #8]
     cd4:	bl	0 <free>
     cd8:	ldp	x29, x30, [sp, #16]
     cdc:	add	sp, sp, #0x20
     ce0:	ret

0000000000000ce4 <srunner_ntests_failed>:
     ce4:	sub	sp, sp, #0x10
     ce8:	str	x0, [sp, #8]
     cec:	ldr	x8, [sp, #8]
     cf0:	ldr	x8, [x8, #8]
     cf4:	ldr	w9, [x8, #4]
     cf8:	ldr	x8, [sp, #8]
     cfc:	ldr	x8, [x8, #8]
     d00:	ldr	w10, [x8, #8]
     d04:	add	w0, w9, w10
     d08:	add	sp, sp, #0x10
     d0c:	ret

0000000000000d10 <srunner_ntests_run>:
     d10:	sub	sp, sp, #0x10
     d14:	str	x0, [sp, #8]
     d18:	ldr	x8, [sp, #8]
     d1c:	ldr	x8, [x8, #8]
     d20:	ldr	w0, [x8]
     d24:	add	sp, sp, #0x10
     d28:	ret

0000000000000d2c <srunner_failures>:
     d2c:	sub	sp, sp, #0x40
     d30:	stp	x29, x30, [sp, #48]
     d34:	add	x29, sp, #0x30
     d38:	mov	x8, #0x8                   	// #8
     d3c:	stur	x0, [x29, #-8]
     d40:	stur	wzr, [x29, #-12]
     d44:	ldur	x0, [x29, #-8]
     d48:	str	x8, [sp]
     d4c:	bl	ce4 <srunner_ntests_failed>
     d50:	mov	w1, w0
     d54:	sxtw	x8, w1
     d58:	ldr	x9, [sp]
     d5c:	mul	x0, x9, x8
     d60:	bl	0 <emalloc>
     d64:	str	x0, [sp, #24]
     d68:	ldur	x8, [x29, #-8]
     d6c:	ldr	x8, [x8, #16]
     d70:	str	x8, [sp, #16]
     d74:	ldr	x0, [sp, #16]
     d78:	bl	0 <check_list_front>
     d7c:	ldr	x0, [sp, #16]
     d80:	bl	0 <check_list_at_end>
     d84:	cmp	w0, #0x0
     d88:	cset	w8, ne  // ne = any
     d8c:	eor	w8, w8, #0x1
     d90:	tbnz	w8, #0, d98 <srunner_failures+0x6c>
     d94:	b	de8 <srunner_failures+0xbc>
     d98:	ldr	x0, [sp, #16]
     d9c:	bl	0 <check_list_val>
     da0:	str	x0, [sp, #8]
     da4:	ldr	x8, [sp, #8]
     da8:	ldr	w0, [x8]
     dac:	bl	df8 <non_pass>
     db0:	cbz	w0, ddc <srunner_failures+0xb0>
     db4:	ldr	x8, [sp, #8]
     db8:	ldr	x9, [sp, #24]
     dbc:	ldursw	x10, [x29, #-12]
     dc0:	mov	w11, w10
     dc4:	add	w11, w11, #0x1
     dc8:	stur	w11, [x29, #-12]
     dcc:	mov	x12, #0x8                   	// #8
     dd0:	mul	x10, x12, x10
     dd4:	add	x9, x9, x10
     dd8:	str	x8, [x9]
     ddc:	ldr	x0, [sp, #16]
     de0:	bl	0 <check_list_advance>
     de4:	b	d7c <srunner_failures+0x50>
     de8:	ldr	x0, [sp, #24]
     dec:	ldp	x29, x30, [sp, #48]
     df0:	add	sp, sp, #0x40
     df4:	ret

0000000000000df8 <non_pass>:
     df8:	sub	sp, sp, #0x10
     dfc:	str	w0, [sp, #12]
     e00:	ldr	w8, [sp, #12]
     e04:	cmp	w8, #0x1
     e08:	cset	w8, ne  // ne = any
     e0c:	and	w0, w8, #0x1
     e10:	add	sp, sp, #0x10
     e14:	ret

0000000000000e18 <srunner_results>:
     e18:	sub	sp, sp, #0x40
     e1c:	stp	x29, x30, [sp, #48]
     e20:	add	x29, sp, #0x30
     e24:	mov	x8, #0x8                   	// #8
     e28:	stur	x0, [x29, #-8]
     e2c:	stur	wzr, [x29, #-12]
     e30:	ldur	x0, [x29, #-8]
     e34:	str	x8, [sp, #8]
     e38:	bl	d10 <srunner_ntests_run>
     e3c:	mov	w1, w0
     e40:	sxtw	x8, w1
     e44:	ldr	x9, [sp, #8]
     e48:	mul	x0, x9, x8
     e4c:	bl	0 <emalloc>
     e50:	str	x0, [sp, #24]
     e54:	ldur	x8, [x29, #-8]
     e58:	ldr	x8, [x8, #16]
     e5c:	str	x8, [sp, #16]
     e60:	ldr	x0, [sp, #16]
     e64:	bl	0 <check_list_front>
     e68:	ldr	x0, [sp, #16]
     e6c:	bl	0 <check_list_at_end>
     e70:	cmp	w0, #0x0
     e74:	cset	w8, ne  // ne = any
     e78:	eor	w8, w8, #0x1
     e7c:	tbnz	w8, #0, e84 <srunner_results+0x6c>
     e80:	b	ebc <srunner_results+0xa4>
     e84:	ldr	x0, [sp, #16]
     e88:	bl	0 <check_list_val>
     e8c:	ldr	x8, [sp, #24]
     e90:	ldursw	x9, [x29, #-12]
     e94:	mov	w10, w9
     e98:	add	w10, w10, #0x1
     e9c:	stur	w10, [x29, #-12]
     ea0:	mov	x11, #0x8                   	// #8
     ea4:	mul	x9, x11, x9
     ea8:	add	x8, x8, x9
     eac:	str	x0, [x8]
     eb0:	ldr	x0, [sp, #16]
     eb4:	bl	0 <check_list_advance>
     eb8:	b	e68 <srunner_results+0x50>
     ebc:	ldr	x0, [sp, #24]
     ec0:	ldp	x29, x30, [sp, #48]
     ec4:	add	sp, sp, #0x40
     ec8:	ret

0000000000000ecc <tr_create>:
     ecc:	sub	sp, sp, #0x20
     ed0:	stp	x29, x30, [sp, #16]
     ed4:	add	x29, sp, #0x10
     ed8:	mov	x0, #0x38                  	// #56
     edc:	bl	0 <emalloc>
     ee0:	str	x0, [sp, #8]
     ee4:	ldr	x0, [sp, #8]
     ee8:	bl	efc <tr_init>
     eec:	ldr	x0, [sp, #8]
     ef0:	ldp	x29, x30, [sp, #16]
     ef4:	add	sp, sp, #0x20
     ef8:	ret

0000000000000efc <tr_init>:
     efc:	sub	sp, sp, #0x10
     f00:	mov	w8, #0xffffffff            	// #-1
     f04:	mov	x9, xzr
     f08:	str	x0, [sp, #8]
     f0c:	ldr	x10, [sp, #8]
     f10:	str	wzr, [x10, #4]
     f14:	ldr	x10, [sp, #8]
     f18:	str	w8, [x10, #16]
     f1c:	ldr	x10, [sp, #8]
     f20:	str	wzr, [x10]
     f24:	ldr	x10, [sp, #8]
     f28:	str	x9, [x10, #48]
     f2c:	ldr	x10, [sp, #8]
     f30:	str	x9, [x10, #8]
     f34:	ldr	x10, [sp, #8]
     f38:	str	x9, [x10, #32]
     f3c:	ldr	x10, [sp, #8]
     f40:	str	x9, [x10, #40]
     f44:	ldr	x9, [sp, #8]
     f48:	str	w8, [x9, #24]
     f4c:	add	sp, sp, #0x10
     f50:	ret

0000000000000f54 <tr_msg>:
     f54:	sub	sp, sp, #0x10
     f58:	str	x0, [sp, #8]
     f5c:	ldr	x8, [sp, #8]
     f60:	ldr	x0, [x8, #48]
     f64:	add	sp, sp, #0x10
     f68:	ret

0000000000000f6c <tr_lno>:
     f6c:	sub	sp, sp, #0x10
     f70:	str	x0, [sp, #8]
     f74:	ldr	x8, [sp, #8]
     f78:	ldr	w0, [x8, #16]
     f7c:	add	sp, sp, #0x10
     f80:	ret

0000000000000f84 <tr_lfile>:
     f84:	sub	sp, sp, #0x10
     f88:	str	x0, [sp, #8]
     f8c:	ldr	x8, [sp, #8]
     f90:	ldr	x0, [x8, #8]
     f94:	add	sp, sp, #0x10
     f98:	ret

0000000000000f9c <tr_rtype>:
     f9c:	sub	sp, sp, #0x10
     fa0:	str	x0, [sp, #8]
     fa4:	ldr	x8, [sp, #8]
     fa8:	ldr	w0, [x8]
     fac:	add	sp, sp, #0x10
     fb0:	ret

0000000000000fb4 <tr_ctx>:
     fb4:	sub	sp, sp, #0x10
     fb8:	str	x0, [sp, #8]
     fbc:	ldr	x8, [sp, #8]
     fc0:	ldr	w0, [x8, #4]
     fc4:	add	sp, sp, #0x10
     fc8:	ret

0000000000000fcc <tr_tcname>:
     fcc:	sub	sp, sp, #0x10
     fd0:	str	x0, [sp, #8]
     fd4:	ldr	x8, [sp, #8]
     fd8:	ldr	x0, [x8, #32]
     fdc:	add	sp, sp, #0x10
     fe0:	ret

0000000000000fe4 <set_fork_status>:
     fe4:	sub	sp, sp, #0x20
     fe8:	stp	x29, x30, [sp, #16]
     fec:	add	x29, sp, #0x10
     ff0:	stur	w0, [x29, #-4]
     ff4:	ldur	w8, [x29, #-4]
     ff8:	cmp	w8, #0x1
     ffc:	b.eq	1014 <set_fork_status+0x30>  // b.none
    1000:	ldur	w8, [x29, #-4]
    1004:	cmp	w8, #0x2
    1008:	b.eq	1014 <set_fork_status+0x30>  // b.none
    100c:	ldur	w8, [x29, #-4]
    1010:	cbnz	w8, 1028 <set_fork_status+0x44>
    1014:	ldur	w8, [x29, #-4]
    1018:	adrp	x9, 0 <suite_create>
    101c:	add	x9, x9, #0x0
    1020:	str	w8, [x9]
    1024:	b	1040 <set_fork_status+0x5c>
    1028:	adrp	x0, 0 <suite_create>
    102c:	add	x0, x0, #0x0
    1030:	adrp	x1, 0 <suite_create>
    1034:	add	x1, x1, #0x0
    1038:	mov	w2, #0x24a                 	// #586
    103c:	bl	0 <eprintf>
    1040:	ldp	x29, x30, [sp, #16]
    1044:	add	sp, sp, #0x20
    1048:	ret

000000000000104c <check_get_clockid>:
    104c:	sub	sp, sp, #0x20
    1050:	stp	x29, x30, [sp, #16]
    1054:	add	x29, sp, #0x10
    1058:	mov	w0, #0x1                   	// #1
    105c:	mov	x8, xzr
    1060:	adrp	x9, 0 <suite_create>
    1064:	add	x9, x9, #0x0
    1068:	add	x2, sp, #0x8
    106c:	mov	x1, x8
    1070:	str	x9, [sp]
    1074:	bl	0 <timer_create>
    1078:	cbnz	w0, 1094 <check_get_clockid+0x48>
    107c:	ldr	x0, [sp, #8]
    1080:	bl	0 <timer_delete>
    1084:	mov	w8, #0x1                   	// #1
    1088:	ldr	x9, [sp]
    108c:	str	w8, [x9]
    1090:	b	109c <check_get_clockid+0x50>
    1094:	ldr	x8, [sp]
    1098:	str	wzr, [x8]
    109c:	ldr	x8, [sp]
    10a0:	ldr	w0, [x8]
    10a4:	ldp	x29, x30, [sp, #16]
    10a8:	add	sp, sp, #0x20
    10ac:	ret

00000000000010b0 <fixture_create>:
    10b0:	sub	sp, sp, #0x30
    10b4:	stp	x29, x30, [sp, #32]
    10b8:	add	x29, sp, #0x20
    10bc:	mov	x8, #0x10                  	// #16
    10c0:	stur	x0, [x29, #-8]
    10c4:	stur	w1, [x29, #-12]
    10c8:	mov	x0, x8
    10cc:	bl	0 <emalloc>
    10d0:	str	x0, [sp, #8]
    10d4:	ldur	x8, [x29, #-8]
    10d8:	ldr	x9, [sp, #8]
    10dc:	str	x8, [x9, #8]
    10e0:	ldur	w10, [x29, #-12]
    10e4:	ldr	x8, [sp, #8]
    10e8:	str	w10, [x8]
    10ec:	ldr	x0, [sp, #8]
    10f0:	ldp	x29, x30, [sp, #32]
    10f4:	add	sp, sp, #0x30
    10f8:	ret

00000000000010fc <tcase_free>:
    10fc:	sub	sp, sp, #0x20
    1100:	stp	x29, x30, [sp, #16]
    1104:	add	x29, sp, #0x10
    1108:	adrp	x8, 0 <free>
    110c:	add	x8, x8, #0x0
    1110:	str	x0, [sp, #8]
    1114:	ldr	x9, [sp, #8]
    1118:	ldr	x0, [x9, #24]
    111c:	mov	x1, x8
    1120:	str	x8, [sp]
    1124:	bl	0 <check_list_apply>
    1128:	ldr	x8, [sp, #8]
    112c:	ldr	x0, [x8, #32]
    1130:	ldr	x1, [sp]
    1134:	bl	0 <check_list_apply>
    1138:	ldr	x8, [sp, #8]
    113c:	ldr	x0, [x8, #48]
    1140:	ldr	x1, [sp]
    1144:	bl	0 <check_list_apply>
    1148:	ldr	x8, [sp, #8]
    114c:	ldr	x0, [x8, #40]
    1150:	ldr	x1, [sp]
    1154:	bl	0 <check_list_apply>
    1158:	ldr	x8, [sp, #8]
    115c:	ldr	x0, [x8, #56]
    1160:	ldr	x1, [sp]
    1164:	bl	0 <check_list_apply>
    1168:	ldr	x8, [sp, #8]
    116c:	ldr	x0, [x8, #64]
    1170:	ldr	x1, [sp]
    1174:	bl	0 <check_list_apply>
    1178:	ldr	x8, [sp, #8]
    117c:	ldr	x0, [x8, #24]
    1180:	bl	0 <check_list_free>
    1184:	ldr	x8, [sp, #8]
    1188:	ldr	x0, [x8, #32]
    118c:	bl	0 <check_list_free>
    1190:	ldr	x8, [sp, #8]
    1194:	ldr	x0, [x8, #48]
    1198:	bl	0 <check_list_free>
    119c:	ldr	x8, [sp, #8]
    11a0:	ldr	x0, [x8, #40]
    11a4:	bl	0 <check_list_free>
    11a8:	ldr	x8, [sp, #8]
    11ac:	ldr	x0, [x8, #56]
    11b0:	bl	0 <check_list_free>
    11b4:	ldr	x8, [sp, #8]
    11b8:	ldr	x0, [x8, #64]
    11bc:	bl	0 <check_list_free>
    11c0:	ldr	x0, [sp, #8]
    11c4:	bl	0 <free>
    11c8:	ldp	x29, x30, [sp, #16]
    11cc:	add	sp, sp, #0x20
    11d0:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	sub	sp, sp, #0x170
   4:	stp	x29, x30, [sp, #336]
   8:	str	x28, [sp, #352]
   c:	add	x29, sp, #0x150
  10:	sub	x8, x29, #0x38
  14:	str	q7, [sp, #176]
  18:	str	q6, [sp, #160]
  1c:	str	q5, [sp, #144]
  20:	str	q4, [sp, #128]
  24:	str	q3, [sp, #112]
  28:	str	q2, [sp, #96]
  2c:	str	q1, [sp, #80]
  30:	str	q0, [sp, #64]
  34:	stur	x7, [x29, #-104]
  38:	stur	x6, [x29, #-112]
  3c:	stur	x5, [x29, #-120]
  40:	stur	x4, [x29, #-128]
  44:	stur	x3, [x29, #-136]
  48:	stur	x0, [x29, #-8]
  4c:	stur	x1, [x29, #-16]
  50:	stur	w2, [x29, #-20]
  54:	adrp	x9, 0 <stderr>
  58:	ldr	x0, [x9]
  5c:	str	x8, [sp, #56]
  60:	str	x9, [sp, #48]
  64:	bl	0 <fflush>
  68:	ldr	x8, [sp, #48]
  6c:	ldr	x9, [x8]
  70:	ldur	x2, [x29, #-16]
  74:	ldur	w3, [x29, #-20]
  78:	adrp	x1, 0 <eprintf>
  7c:	add	x1, x1, #0x0
  80:	str	w0, [sp, #44]
  84:	mov	x0, x9
  88:	bl	0 <fprintf>
  8c:	mov	w10, #0xffffff80            	// #-128
  90:	stur	w10, [x29, #-28]
  94:	mov	w10, #0xffffffd8            	// #-40
  98:	stur	w10, [x29, #-32]
  9c:	add	x8, sp, #0x40
  a0:	add	x8, x8, #0x80
  a4:	stur	x8, [x29, #-40]
  a8:	sub	x8, x29, #0x88
  ac:	add	x8, x8, #0x28
  b0:	stur	x8, [x29, #-48]
  b4:	add	x8, x29, #0x20
  b8:	stur	x8, [x29, #-56]
  bc:	ldr	x8, [sp, #48]
  c0:	ldr	x9, [x8]
  c4:	ldur	x1, [x29, #-8]
  c8:	ldr	x11, [sp, #56]
  cc:	ldr	q0, [x11]
  d0:	ldr	q1, [x11, #16]
  d4:	stur	q1, [x29, #-80]
  d8:	stur	q0, [x29, #-96]
  dc:	sub	x2, x29, #0x60
  e0:	str	w0, [sp, #40]
  e4:	mov	x0, x9
  e8:	bl	0 <vfprintf>
  ec:	ldur	x8, [x29, #-8]
  f0:	ldrb	w10, [x8]
  f4:	cbz	w10, 15c <eprintf+0x15c>
  f8:	b	fc <eprintf+0xfc>
  fc:	ldur	x8, [x29, #-8]
 100:	mov	x0, x8
 104:	str	x8, [sp, #32]
 108:	bl	0 <strlen>
 10c:	ldr	x8, [sp, #32]
 110:	add	x9, x0, x8
 114:	ldurb	w10, [x9, #-1]
 118:	subs	w10, w10, #0x3a
 11c:	b.ne	15c <eprintf+0x15c>  // b.any
 120:	b	124 <eprintf+0x124>
 124:	adrp	x8, 0 <stderr>
 128:	ldr	x0, [x8]
 12c:	str	x0, [sp, #24]
 130:	bl	0 <__errno_location>
 134:	ldr	w0, [x0]
 138:	bl	0 <strerror>
 13c:	adrp	x1, 0 <eprintf>
 140:	add	x1, x1, #0x0
 144:	ldr	x8, [sp, #24]
 148:	str	x0, [sp, #16]
 14c:	mov	x0, x8
 150:	ldr	x2, [sp, #16]
 154:	bl	0 <fprintf>
 158:	b	15c <eprintf+0x15c>
 15c:	adrp	x8, 0 <stderr>
 160:	ldr	x0, [x8]
 164:	adrp	x1, 0 <eprintf>
 168:	add	x1, x1, #0x0
 16c:	bl	0 <fprintf>
 170:	mov	w9, #0x2                   	// #2
 174:	str	w0, [sp, #12]
 178:	mov	w0, w9
 17c:	bl	0 <exit>

0000000000000180 <emalloc>:
 180:	sub	sp, sp, #0x20
 184:	stp	x29, x30, [sp, #16]
 188:	add	x29, sp, #0x10
 18c:	str	x0, [sp, #8]
 190:	ldr	x0, [sp, #8]
 194:	bl	0 <malloc>
 198:	str	x0, [sp]
 19c:	ldr	x8, [sp]
 1a0:	cbnz	x8, 1c0 <emalloc+0x40>
 1a4:	ldr	x3, [sp, #8]
 1a8:	adrp	x0, 0 <eprintf>
 1ac:	add	x0, x0, #0x0
 1b0:	adrp	x1, 0 <eprintf>
 1b4:	add	x1, x1, #0x0
 1b8:	mov	w2, #0x3e                  	// #62
 1bc:	bl	0 <eprintf>
 1c0:	ldr	x0, [sp]
 1c4:	ldp	x29, x30, [sp, #16]
 1c8:	add	sp, sp, #0x20
 1cc:	ret

00000000000001d0 <erealloc>:
 1d0:	sub	sp, sp, #0x30
 1d4:	stp	x29, x30, [sp, #32]
 1d8:	add	x29, sp, #0x20
 1dc:	stur	x0, [x29, #-8]
 1e0:	str	x1, [sp, #16]
 1e4:	ldur	x0, [x29, #-8]
 1e8:	ldr	x1, [sp, #16]
 1ec:	bl	0 <realloc>
 1f0:	str	x0, [sp, #8]
 1f4:	ldr	x8, [sp, #8]
 1f8:	cbnz	x8, 218 <erealloc+0x48>
 1fc:	ldr	x3, [sp, #16]
 200:	adrp	x0, 0 <eprintf>
 204:	add	x0, x0, #0x0
 208:	adrp	x1, 0 <eprintf>
 20c:	add	x1, x1, #0x0
 210:	mov	w2, #0x48                  	// #72
 214:	bl	0 <eprintf>
 218:	ldr	x0, [sp, #8]
 21c:	ldp	x29, x30, [sp, #32]
 220:	add	sp, sp, #0x30
 224:	ret

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_list_create>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	mov	x0, #0x18                  	// #24
  10:	mov	w8, #0x1                   	// #1
  14:	mov	x9, #0x8                   	// #8
  18:	mov	w10, #0xffffffff            	// #-1
  1c:	stur	w8, [x29, #-12]
  20:	str	x9, [sp, #8]
  24:	str	w10, [sp, #4]
  28:	bl	0 <emalloc>
  2c:	stur	x0, [x29, #-8]
  30:	ldur	x9, [x29, #-8]
  34:	str	wzr, [x9]
  38:	ldur	x9, [x29, #-8]
  3c:	ldur	w8, [x29, #-12]
  40:	str	w8, [x9, #4]
  44:	ldr	x0, [sp, #8]
  48:	bl	0 <emalloc>
  4c:	ldur	x9, [x29, #-8]
  50:	str	x0, [x9, #16]
  54:	ldur	x9, [x29, #-8]
  58:	ldr	w8, [sp, #4]
  5c:	str	w8, [x9, #12]
  60:	ldur	x9, [x29, #-8]
  64:	str	w8, [x9, #8]
  68:	ldur	x0, [x29, #-8]
  6c:	ldp	x29, x30, [sp, #32]
  70:	add	sp, sp, #0x30
  74:	ret

0000000000000078 <check_list_add_front>:
  78:	sub	sp, sp, #0x30
  7c:	stp	x29, x30, [sp, #32]
  80:	add	x29, sp, #0x20
  84:	stur	x0, [x29, #-8]
  88:	str	x1, [sp, #16]
  8c:	ldur	x8, [x29, #-8]
  90:	cbnz	x8, 98 <check_list_add_front+0x20>
  94:	b	120 <check_list_add_front+0xa8>
  98:	ldur	x0, [x29, #-8]
  9c:	bl	12c <maybe_grow>
  a0:	ldur	x8, [x29, #-8]
  a4:	ldr	x8, [x8, #16]
  a8:	mov	x9, #0x8                   	// #8
  ac:	add	x0, x8, #0x8
  b0:	ldur	x8, [x29, #-8]
  b4:	ldr	x1, [x8, #16]
  b8:	ldur	x8, [x29, #-8]
  bc:	ldr	w10, [x8]
  c0:	mov	w8, w10
  c4:	mov	x11, #0x8                   	// #8
  c8:	mul	x2, x8, x11
  cc:	str	x9, [sp, #8]
  d0:	bl	0 <memmove>
  d4:	ldur	x8, [x29, #-8]
  d8:	ldr	w10, [x8, #12]
  dc:	add	w10, w10, #0x1
  e0:	str	w10, [x8, #12]
  e4:	ldur	x8, [x29, #-8]
  e8:	ldr	w10, [x8]
  ec:	add	w10, w10, #0x1
  f0:	str	w10, [x8]
  f4:	ldur	x8, [x29, #-8]
  f8:	str	wzr, [x8, #8]
  fc:	ldr	x8, [sp, #16]
 100:	ldur	x9, [x29, #-8]
 104:	ldr	x9, [x9, #16]
 108:	ldur	x11, [x29, #-8]
 10c:	ldrsw	x11, [x11, #8]
 110:	ldr	x12, [sp, #8]
 114:	mul	x11, x12, x11
 118:	add	x9, x9, x11
 11c:	str	x8, [x9]
 120:	ldp	x29, x30, [sp, #32]
 124:	add	sp, sp, #0x30
 128:	ret

000000000000012c <maybe_grow>:
 12c:	sub	sp, sp, #0x20
 130:	stp	x29, x30, [sp, #16]
 134:	add	x29, sp, #0x10
 138:	str	x0, [sp, #8]
 13c:	ldr	x8, [sp, #8]
 140:	ldr	w9, [x8]
 144:	ldr	x8, [sp, #8]
 148:	ldr	w10, [x8, #4]
 14c:	cmp	w9, w10
 150:	b.cc	190 <maybe_grow+0x64>  // b.lo, b.ul, b.last
 154:	ldr	x8, [sp, #8]
 158:	ldr	w9, [x8, #4]
 15c:	mov	w10, #0x2                   	// #2
 160:	mul	w9, w9, w10
 164:	str	w9, [x8, #4]
 168:	ldr	x8, [sp, #8]
 16c:	ldr	x0, [x8, #16]
 170:	ldr	x8, [sp, #8]
 174:	ldr	w9, [x8, #4]
 178:	mov	w8, w9
 17c:	mov	x11, #0x8                   	// #8
 180:	mul	x1, x8, x11
 184:	bl	0 <erealloc>
 188:	ldr	x8, [sp, #8]
 18c:	str	x0, [x8, #16]
 190:	ldp	x29, x30, [sp, #16]
 194:	add	sp, sp, #0x20
 198:	ret

000000000000019c <check_list_add_end>:
 19c:	sub	sp, sp, #0x20
 1a0:	stp	x29, x30, [sp, #16]
 1a4:	add	x29, sp, #0x10
 1a8:	str	x0, [sp, #8]
 1ac:	str	x1, [sp]
 1b0:	ldr	x8, [sp, #8]
 1b4:	cbnz	x8, 1bc <check_list_add_end+0x20>
 1b8:	b	218 <check_list_add_end+0x7c>
 1bc:	ldr	x0, [sp, #8]
 1c0:	bl	12c <maybe_grow>
 1c4:	ldr	x8, [sp, #8]
 1c8:	ldr	w9, [x8, #12]
 1cc:	add	w9, w9, #0x1
 1d0:	str	w9, [x8, #12]
 1d4:	ldr	x8, [sp, #8]
 1d8:	ldr	w9, [x8]
 1dc:	add	w9, w9, #0x1
 1e0:	str	w9, [x8]
 1e4:	ldr	x8, [sp, #8]
 1e8:	ldr	w9, [x8, #12]
 1ec:	ldr	x8, [sp, #8]
 1f0:	mov	x10, #0x8                   	// #8
 1f4:	str	w9, [x8, #8]
 1f8:	ldr	x8, [sp]
 1fc:	ldr	x11, [sp, #8]
 200:	ldr	x11, [x11, #16]
 204:	ldr	x12, [sp, #8]
 208:	ldrsw	x12, [x12, #8]
 20c:	mul	x10, x10, x12
 210:	add	x10, x11, x10
 214:	str	x8, [x10]
 218:	ldp	x29, x30, [sp, #16]
 21c:	add	sp, sp, #0x20
 220:	ret

0000000000000224 <check_list_at_end>:
 224:	sub	sp, sp, #0x10
 228:	mov	w8, #0xffffffff            	// #-1
 22c:	str	x0, [sp]
 230:	ldr	x9, [sp]
 234:	ldr	w10, [x9, #8]
 238:	cmp	w10, w8
 23c:	b.ne	24c <check_list_at_end+0x28>  // b.any
 240:	mov	w8, #0x1                   	// #1
 244:	str	w8, [sp, #12]
 248:	b	26c <check_list_at_end+0x48>
 24c:	ldr	x8, [sp]
 250:	ldr	w9, [x8, #8]
 254:	ldr	x8, [sp]
 258:	ldr	w10, [x8, #12]
 25c:	cmp	w9, w10
 260:	cset	w9, gt
 264:	and	w9, w9, #0x1
 268:	str	w9, [sp, #12]
 26c:	ldr	w0, [sp, #12]
 270:	add	sp, sp, #0x10
 274:	ret

0000000000000278 <check_list_front>:
 278:	sub	sp, sp, #0x10
 27c:	mov	w8, #0xffffffff            	// #-1
 280:	str	x0, [sp, #8]
 284:	ldr	x9, [sp, #8]
 288:	ldr	w10, [x9, #8]
 28c:	cmp	w10, w8
 290:	b.ne	298 <check_list_front+0x20>  // b.any
 294:	b	2a0 <check_list_front+0x28>
 298:	ldr	x8, [sp, #8]
 29c:	str	wzr, [x8, #8]
 2a0:	add	sp, sp, #0x10
 2a4:	ret

00000000000002a8 <check_list_free>:
 2a8:	sub	sp, sp, #0x20
 2ac:	stp	x29, x30, [sp, #16]
 2b0:	add	x29, sp, #0x10
 2b4:	str	x0, [sp, #8]
 2b8:	ldr	x8, [sp, #8]
 2bc:	cbnz	x8, 2c4 <check_list_free+0x1c>
 2c0:	b	2d8 <check_list_free+0x30>
 2c4:	ldr	x8, [sp, #8]
 2c8:	ldr	x0, [x8, #16]
 2cc:	bl	0 <free>
 2d0:	ldr	x0, [sp, #8]
 2d4:	bl	0 <free>
 2d8:	ldp	x29, x30, [sp, #16]
 2dc:	add	sp, sp, #0x20
 2e0:	ret

00000000000002e4 <check_list_val>:
 2e4:	sub	sp, sp, #0x10
 2e8:	str	x0, [sp]
 2ec:	ldr	x8, [sp]
 2f0:	cbnz	x8, 300 <check_list_val+0x1c>
 2f4:	mov	x8, xzr
 2f8:	str	x8, [sp, #8]
 2fc:	b	35c <check_list_val+0x78>
 300:	ldr	x8, [sp]
 304:	ldr	w9, [x8, #8]
 308:	mov	w10, #0xffffffff            	// #-1
 30c:	cmp	w9, w10
 310:	b.eq	32c <check_list_val+0x48>  // b.none
 314:	ldr	x8, [sp]
 318:	ldr	w9, [x8, #8]
 31c:	ldr	x8, [sp]
 320:	ldr	w10, [x8, #12]
 324:	cmp	w9, w10
 328:	b.le	338 <check_list_val+0x54>
 32c:	mov	x8, xzr
 330:	str	x8, [sp, #8]
 334:	b	35c <check_list_val+0x78>
 338:	ldr	x8, [sp]
 33c:	ldr	x8, [x8, #16]
 340:	ldr	x9, [sp]
 344:	mov	x10, #0x8                   	// #8
 348:	ldrsw	x9, [x9, #8]
 34c:	mul	x9, x10, x9
 350:	add	x8, x8, x9
 354:	ldr	x8, [x8]
 358:	str	x8, [sp, #8]
 35c:	ldr	x0, [sp, #8]
 360:	add	sp, sp, #0x10
 364:	ret

0000000000000368 <check_list_advance>:
 368:	sub	sp, sp, #0x20
 36c:	stp	x29, x30, [sp, #16]
 370:	add	x29, sp, #0x10
 374:	str	x0, [sp, #8]
 378:	ldr	x8, [sp, #8]
 37c:	cbnz	x8, 384 <check_list_advance+0x1c>
 380:	b	3a4 <check_list_advance+0x3c>
 384:	ldr	x0, [sp, #8]
 388:	bl	224 <check_list_at_end>
 38c:	cbz	w0, 394 <check_list_advance+0x2c>
 390:	b	3a4 <check_list_advance+0x3c>
 394:	ldr	x8, [sp, #8]
 398:	ldr	w9, [x8, #8]
 39c:	add	w9, w9, #0x1
 3a0:	str	w9, [x8, #8]
 3a4:	ldp	x29, x30, [sp, #16]
 3a8:	add	sp, sp, #0x20
 3ac:	ret

00000000000003b0 <check_list_apply>:
 3b0:	sub	sp, sp, #0x30
 3b4:	stp	x29, x30, [sp, #32]
 3b8:	add	x29, sp, #0x20
 3bc:	stur	x0, [x29, #-8]
 3c0:	str	x1, [sp, #16]
 3c4:	ldur	x8, [x29, #-8]
 3c8:	cbz	x8, 3d4 <check_list_apply+0x24>
 3cc:	ldr	x8, [sp, #16]
 3d0:	cbnz	x8, 3d8 <check_list_apply+0x28>
 3d4:	b	420 <check_list_apply+0x70>
 3d8:	ldur	x0, [x29, #-8]
 3dc:	bl	278 <check_list_front>
 3e0:	ldur	x0, [x29, #-8]
 3e4:	bl	224 <check_list_at_end>
 3e8:	cmp	w0, #0x0
 3ec:	cset	w8, ne  // ne = any
 3f0:	eor	w8, w8, #0x1
 3f4:	tbnz	w8, #0, 3fc <check_list_apply+0x4c>
 3f8:	b	420 <check_list_apply+0x70>
 3fc:	ldr	x8, [sp, #16]
 400:	ldur	x0, [x29, #-8]
 404:	str	x8, [sp, #8]
 408:	bl	2e4 <check_list_val>
 40c:	ldr	x8, [sp, #8]
 410:	blr	x8
 414:	ldur	x0, [x29, #-8]
 418:	bl	368 <check_list_advance>
 41c:	b	3e0 <check_list_apply+0x30>
 420:	ldp	x29, x30, [sp, #32]
 424:	add	sp, sp, #0x30
 428:	ret

000000000000042c <check_list_contains>:
 42c:	sub	sp, sp, #0x30
 430:	stp	x29, x30, [sp, #32]
 434:	add	x29, sp, #0x20
 438:	str	x0, [sp, #16]
 43c:	str	x1, [sp, #8]
 440:	ldr	x0, [sp, #16]
 444:	bl	278 <check_list_front>
 448:	ldr	x0, [sp, #16]
 44c:	bl	224 <check_list_at_end>
 450:	cmp	w0, #0x0
 454:	cset	w8, ne  // ne = any
 458:	eor	w8, w8, #0x1
 45c:	tbnz	w8, #0, 464 <check_list_contains+0x38>
 460:	b	490 <check_list_contains+0x64>
 464:	ldr	x0, [sp, #16]
 468:	bl	2e4 <check_list_val>
 46c:	ldr	x8, [sp, #8]
 470:	cmp	x0, x8
 474:	b.ne	484 <check_list_contains+0x58>  // b.any
 478:	mov	w8, #0x1                   	// #1
 47c:	stur	w8, [x29, #-4]
 480:	b	494 <check_list_contains+0x68>
 484:	ldr	x0, [sp, #16]
 488:	bl	368 <check_list_advance>
 48c:	b	448 <check_list_contains+0x1c>
 490:	stur	wzr, [x29, #-4]
 494:	ldur	w0, [x29, #-4]
 498:	ldp	x29, x30, [sp, #32]
 49c:	add	sp, sp, #0x30
 4a0:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x8, [sp, #8]
  10:	ldr	x8, [x8, #24]
  14:	cbz	x8, 1c <srunner_set_log+0x1c>
  18:	b	28 <srunner_set_log+0x28>
  1c:	ldr	x8, [sp]
  20:	ldr	x9, [sp, #8]
  24:	str	x8, [x9, #24]
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <srunner_has_log>:
  30:	sub	sp, sp, #0x20
  34:	stp	x29, x30, [sp, #16]
  38:	add	x29, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	ldr	x0, [sp, #8]
  44:	bl	60 <srunner_log_fname>
  48:	cmp	x0, #0x0
  4c:	cset	w8, ne  // ne = any
  50:	and	w0, w8, #0x1
  54:	ldp	x29, x30, [sp, #16]
  58:	add	sp, sp, #0x20
  5c:	ret

0000000000000060 <srunner_log_fname>:
  60:	sub	sp, sp, #0x20
  64:	stp	x29, x30, [sp, #16]
  68:	add	x29, sp, #0x10
  6c:	str	x0, [sp]
  70:	ldr	x8, [sp]
  74:	ldr	x8, [x8, #24]
  78:	cbz	x8, 8c <srunner_log_fname+0x2c>
  7c:	ldr	x8, [sp]
  80:	ldr	x8, [x8, #24]
  84:	str	x8, [sp, #8]
  88:	b	9c <srunner_log_fname+0x3c>
  8c:	adrp	x0, 0 <srunner_set_log>
  90:	add	x0, x0, #0x0
  94:	bl	0 <getenv>
  98:	str	x0, [sp, #8]
  9c:	ldr	x0, [sp, #8]
  a0:	ldp	x29, x30, [sp, #16]
  a4:	add	sp, sp, #0x20
  a8:	ret

00000000000000ac <srunner_set_xml>:
  ac:	sub	sp, sp, #0x10
  b0:	str	x0, [sp, #8]
  b4:	str	x1, [sp]
  b8:	ldr	x8, [sp, #8]
  bc:	ldr	x8, [x8, #32]
  c0:	cbz	x8, c8 <srunner_set_xml+0x1c>
  c4:	b	d4 <srunner_set_xml+0x28>
  c8:	ldr	x8, [sp]
  cc:	ldr	x9, [sp, #8]
  d0:	str	x8, [x9, #32]
  d4:	add	sp, sp, #0x10
  d8:	ret

00000000000000dc <srunner_has_xml>:
  dc:	sub	sp, sp, #0x20
  e0:	stp	x29, x30, [sp, #16]
  e4:	add	x29, sp, #0x10
  e8:	str	x0, [sp, #8]
  ec:	ldr	x0, [sp, #8]
  f0:	bl	10c <srunner_xml_fname>
  f4:	cmp	x0, #0x0
  f8:	cset	w8, ne  // ne = any
  fc:	and	w0, w8, #0x1
 100:	ldp	x29, x30, [sp, #16]
 104:	add	sp, sp, #0x20
 108:	ret

000000000000010c <srunner_xml_fname>:
 10c:	sub	sp, sp, #0x20
 110:	stp	x29, x30, [sp, #16]
 114:	add	x29, sp, #0x10
 118:	str	x0, [sp]
 11c:	ldr	x8, [sp]
 120:	ldr	x8, [x8, #32]
 124:	cbz	x8, 138 <srunner_xml_fname+0x2c>
 128:	ldr	x8, [sp]
 12c:	ldr	x8, [x8, #32]
 130:	str	x8, [sp, #8]
 134:	b	148 <srunner_xml_fname+0x3c>
 138:	adrp	x0, 0 <srunner_set_log>
 13c:	add	x0, x0, #0x0
 140:	bl	0 <getenv>
 144:	str	x0, [sp, #8]
 148:	ldr	x0, [sp, #8]
 14c:	ldp	x29, x30, [sp, #16]
 150:	add	sp, sp, #0x20
 154:	ret

0000000000000158 <srunner_set_tap>:
 158:	sub	sp, sp, #0x10
 15c:	str	x0, [sp, #8]
 160:	str	x1, [sp]
 164:	ldr	x8, [sp, #8]
 168:	ldr	x8, [x8, #40]
 16c:	cbz	x8, 174 <srunner_set_tap+0x1c>
 170:	b	180 <srunner_set_tap+0x28>
 174:	ldr	x8, [sp]
 178:	ldr	x9, [sp, #8]
 17c:	str	x8, [x9, #40]
 180:	add	sp, sp, #0x10
 184:	ret

0000000000000188 <srunner_has_tap>:
 188:	sub	sp, sp, #0x20
 18c:	stp	x29, x30, [sp, #16]
 190:	add	x29, sp, #0x10
 194:	str	x0, [sp, #8]
 198:	ldr	x0, [sp, #8]
 19c:	bl	1b8 <srunner_tap_fname>
 1a0:	cmp	x0, #0x0
 1a4:	cset	w8, ne  // ne = any
 1a8:	and	w0, w8, #0x1
 1ac:	ldp	x29, x30, [sp, #16]
 1b0:	add	sp, sp, #0x20
 1b4:	ret

00000000000001b8 <srunner_tap_fname>:
 1b8:	sub	sp, sp, #0x20
 1bc:	stp	x29, x30, [sp, #16]
 1c0:	add	x29, sp, #0x10
 1c4:	str	x0, [sp]
 1c8:	ldr	x8, [sp]
 1cc:	ldr	x8, [x8, #40]
 1d0:	cbz	x8, 1e4 <srunner_tap_fname+0x2c>
 1d4:	ldr	x8, [sp]
 1d8:	ldr	x8, [x8, #40]
 1dc:	str	x8, [sp, #8]
 1e0:	b	1f4 <srunner_tap_fname+0x3c>
 1e4:	adrp	x0, 0 <srunner_set_log>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <getenv>
 1f0:	str	x0, [sp, #8]
 1f4:	ldr	x0, [sp, #8]
 1f8:	ldp	x29, x30, [sp, #16]
 1fc:	add	sp, sp, #0x20
 200:	ret

0000000000000204 <srunner_register_lfun>:
 204:	sub	sp, sp, #0x40
 208:	stp	x29, x30, [sp, #48]
 20c:	add	x29, sp, #0x30
 210:	mov	x8, #0x18                  	// #24
 214:	stur	x0, [x29, #-8]
 218:	stur	x1, [x29, #-16]
 21c:	stur	w2, [x29, #-20]
 220:	str	x3, [sp, #16]
 224:	str	w4, [sp, #12]
 228:	mov	x0, x8
 22c:	bl	0 <emalloc>
 230:	str	x0, [sp]
 234:	ldr	w9, [sp, #12]
 238:	cmp	w9, #0x4
 23c:	b.ne	248 <srunner_register_lfun+0x44>  // b.any
 240:	bl	0 <get_env_printmode>
 244:	str	w0, [sp, #12]
 248:	ldur	x8, [x29, #-16]
 24c:	ldr	x9, [sp]
 250:	str	x8, [x9]
 254:	ldr	x8, [sp, #16]
 258:	ldr	x9, [sp]
 25c:	str	x8, [x9, #8]
 260:	ldur	w10, [x29, #-20]
 264:	ldr	x8, [sp]
 268:	str	w10, [x8, #16]
 26c:	ldr	w10, [sp, #12]
 270:	ldr	x8, [sp]
 274:	str	w10, [x8, #20]
 278:	ldur	x8, [x29, #-8]
 27c:	ldr	x0, [x8, #48]
 280:	ldr	x1, [sp]
 284:	bl	0 <check_list_add_end>
 288:	ldp	x29, x30, [sp, #48]
 28c:	add	sp, sp, #0x40
 290:	ret

0000000000000294 <log_srunner_start>:
 294:	sub	sp, sp, #0x20
 298:	stp	x29, x30, [sp, #16]
 29c:	add	x29, sp, #0x10
 2a0:	mov	x8, xzr
 2a4:	mov	w2, #0x2                   	// #2
 2a8:	str	x0, [sp, #8]
 2ac:	ldr	x0, [sp, #8]
 2b0:	mov	x1, x8
 2b4:	bl	2c4 <srunner_send_evt>
 2b8:	ldp	x29, x30, [sp, #16]
 2bc:	add	sp, sp, #0x20
 2c0:	ret

00000000000002c4 <srunner_send_evt>:
 2c4:	sub	sp, sp, #0x40
 2c8:	stp	x29, x30, [sp, #48]
 2cc:	add	x29, sp, #0x30
 2d0:	stur	x0, [x29, #-8]
 2d4:	stur	x1, [x29, #-16]
 2d8:	stur	w2, [x29, #-20]
 2dc:	ldur	x8, [x29, #-8]
 2e0:	ldr	x8, [x8, #48]
 2e4:	str	x8, [sp, #16]
 2e8:	ldr	x0, [sp, #16]
 2ec:	bl	0 <check_list_front>
 2f0:	ldr	x0, [sp, #16]
 2f4:	bl	0 <check_list_at_end>
 2f8:	cmp	w0, #0x0
 2fc:	cset	w8, ne  // ne = any
 300:	eor	w8, w8, #0x1
 304:	tbnz	w8, #0, 30c <srunner_send_evt+0x48>
 308:	b	368 <srunner_send_evt+0xa4>
 30c:	ldr	x0, [sp, #16]
 310:	bl	0 <check_list_val>
 314:	str	x0, [sp, #8]
 318:	ldr	x8, [sp, #8]
 31c:	ldr	x0, [x8]
 320:	bl	0 <fflush>
 324:	ldr	x8, [sp, #8]
 328:	ldr	x8, [x8, #8]
 32c:	ldur	x9, [x29, #-8]
 330:	ldr	x10, [sp, #8]
 334:	ldr	x1, [x10]
 338:	ldr	x10, [sp, #8]
 33c:	ldr	w2, [x10, #20]
 340:	ldur	x3, [x29, #-16]
 344:	ldur	w4, [x29, #-20]
 348:	mov	x0, x9
 34c:	blr	x8
 350:	ldr	x8, [sp, #8]
 354:	ldr	x0, [x8]
 358:	bl	0 <fflush>
 35c:	ldr	x0, [sp, #16]
 360:	bl	0 <check_list_advance>
 364:	b	2f0 <srunner_send_evt+0x2c>
 368:	ldp	x29, x30, [sp, #48]
 36c:	add	sp, sp, #0x40
 370:	ret

0000000000000374 <log_srunner_end>:
 374:	sub	sp, sp, #0x20
 378:	stp	x29, x30, [sp, #16]
 37c:	add	x29, sp, #0x10
 380:	mov	x8, xzr
 384:	mov	w2, #0x4                   	// #4
 388:	str	x0, [sp, #8]
 38c:	ldr	x0, [sp, #8]
 390:	mov	x1, x8
 394:	bl	2c4 <srunner_send_evt>
 398:	ldp	x29, x30, [sp, #16]
 39c:	add	sp, sp, #0x20
 3a0:	ret

00000000000003a4 <log_suite_start>:
 3a4:	sub	sp, sp, #0x20
 3a8:	stp	x29, x30, [sp, #16]
 3ac:	add	x29, sp, #0x10
 3b0:	mov	w2, #0x3                   	// #3
 3b4:	str	x0, [sp, #8]
 3b8:	str	x1, [sp]
 3bc:	ldr	x0, [sp, #8]
 3c0:	ldr	x1, [sp]
 3c4:	bl	2c4 <srunner_send_evt>
 3c8:	ldp	x29, x30, [sp, #16]
 3cc:	add	sp, sp, #0x20
 3d0:	ret

00000000000003d4 <log_suite_end>:
 3d4:	sub	sp, sp, #0x20
 3d8:	stp	x29, x30, [sp, #16]
 3dc:	add	x29, sp, #0x10
 3e0:	mov	w2, #0x5                   	// #5
 3e4:	str	x0, [sp, #8]
 3e8:	str	x1, [sp]
 3ec:	ldr	x0, [sp, #8]
 3f0:	ldr	x1, [sp]
 3f4:	bl	2c4 <srunner_send_evt>
 3f8:	ldp	x29, x30, [sp, #16]
 3fc:	add	sp, sp, #0x20
 400:	ret

0000000000000404 <log_test_start>:
 404:	sub	sp, sp, #0xa0
 408:	stp	x29, x30, [sp, #144]
 40c:	add	x29, sp, #0x90
 410:	mov	x8, #0x63                  	// #99
 414:	adrp	x9, 0 <srunner_set_log>
 418:	add	x9, x9, #0x0
 41c:	mov	w10, #0x6                   	// #6
 420:	add	x11, sp, #0x14
 424:	stur	x0, [x29, #-8]
 428:	stur	x1, [x29, #-16]
 42c:	stur	x2, [x29, #-24]
 430:	ldur	x12, [x29, #-16]
 434:	ldr	x3, [x12]
 438:	ldur	x12, [x29, #-24]
 43c:	ldr	x12, [x12]
 440:	ldr	x4, [x12]
 444:	mov	x0, x11
 448:	mov	x1, x8
 44c:	mov	x2, x9
 450:	str	w10, [sp, #16]
 454:	str	x11, [sp, #8]
 458:	bl	0 <snprintf>
 45c:	ldur	x8, [x29, #-8]
 460:	mov	x0, x8
 464:	ldr	x1, [sp, #8]
 468:	ldr	w2, [sp, #16]
 46c:	bl	2c4 <srunner_send_evt>
 470:	ldp	x29, x30, [sp, #144]
 474:	add	sp, sp, #0xa0
 478:	ret

000000000000047c <log_test_end>:
 47c:	sub	sp, sp, #0x20
 480:	stp	x29, x30, [sp, #16]
 484:	add	x29, sp, #0x10
 488:	mov	w2, #0x7                   	// #7
 48c:	str	x0, [sp, #8]
 490:	str	x1, [sp]
 494:	ldr	x0, [sp, #8]
 498:	ldr	x1, [sp]
 49c:	bl	2c4 <srunner_send_evt>
 4a0:	ldp	x29, x30, [sp, #16]
 4a4:	add	sp, sp, #0x20
 4a8:	ret

00000000000004ac <stdout_lfun>:
 4ac:	sub	sp, sp, #0x50
 4b0:	stp	x29, x30, [sp, #64]
 4b4:	add	x29, sp, #0x40
 4b8:	stur	x0, [x29, #-8]
 4bc:	stur	x1, [x29, #-16]
 4c0:	stur	w2, [x29, #-20]
 4c4:	str	x3, [sp, #32]
 4c8:	str	w4, [sp, #28]
 4cc:	ldr	w8, [sp, #28]
 4d0:	subs	w8, w8, #0x0
 4d4:	mov	w9, w8
 4d8:	ubfx	x9, x9, #0, #32
 4dc:	cmp	x9, #0x7
 4e0:	str	x9, [sp, #8]
 4e4:	b.hi	590 <stdout_lfun+0xe4>  // b.pmore
 4e8:	adrp	x8, 0 <srunner_set_log>
 4ec:	add	x8, x8, #0x0
 4f0:	ldr	x11, [sp, #8]
 4f4:	ldrsw	x10, [x8, x11, lsl #2]
 4f8:	add	x9, x8, x10
 4fc:	br	x9
 500:	b	5a8 <stdout_lfun+0xfc>
 504:	b	5a8 <stdout_lfun+0xfc>
 508:	ldur	w8, [x29, #-20]
 50c:	cmp	w8, #0x0
 510:	cset	w8, ls  // ls = plast
 514:	tbnz	w8, #0, 528 <stdout_lfun+0x7c>
 518:	ldur	x0, [x29, #-16]
 51c:	adrp	x1, 0 <srunner_set_log>
 520:	add	x1, x1, #0x0
 524:	bl	0 <fprintf>
 528:	b	5a8 <stdout_lfun+0xfc>
 52c:	ldr	x8, [sp, #32]
 530:	str	x8, [sp, #16]
 534:	ldur	w9, [x29, #-20]
 538:	cmp	w9, #0x0
 53c:	cset	w9, ls  // ls = plast
 540:	tbnz	w9, #0, 55c <stdout_lfun+0xb0>
 544:	ldur	x0, [x29, #-16]
 548:	ldr	x8, [sp, #16]
 54c:	ldr	x2, [x8]
 550:	adrp	x1, 0 <srunner_set_log>
 554:	add	x1, x1, #0x0
 558:	bl	0 <fprintf>
 55c:	b	5a8 <stdout_lfun+0xfc>
 560:	ldur	w8, [x29, #-20]
 564:	cmp	w8, #0x0
 568:	cset	w8, ls  // ls = plast
 56c:	tbnz	w8, #0, 580 <stdout_lfun+0xd4>
 570:	ldur	x0, [x29, #-16]
 574:	ldur	x1, [x29, #-8]
 578:	ldur	w2, [x29, #-20]
 57c:	bl	0 <srunner_fprint>
 580:	b	5a8 <stdout_lfun+0xfc>
 584:	b	5a8 <stdout_lfun+0xfc>
 588:	b	5a8 <stdout_lfun+0xfc>
 58c:	b	5a8 <stdout_lfun+0xfc>
 590:	adrp	x0, 0 <srunner_set_log>
 594:	add	x0, x0, #0x0
 598:	adrp	x1, 0 <srunner_set_log>
 59c:	add	x1, x1, #0x0
 5a0:	mov	w2, #0xdc                  	// #220
 5a4:	bl	0 <eprintf>
 5a8:	ldp	x29, x30, [sp, #64]
 5ac:	add	sp, sp, #0x50
 5b0:	ret

00000000000005b4 <lfile_lfun>:
 5b4:	sub	sp, sp, #0x50
 5b8:	stp	x29, x30, [sp, #64]
 5bc:	add	x29, sp, #0x40
 5c0:	stur	x0, [x29, #-8]
 5c4:	stur	x1, [x29, #-16]
 5c8:	stur	w2, [x29, #-20]
 5cc:	str	x3, [sp, #32]
 5d0:	str	w4, [sp, #28]
 5d4:	ldr	w8, [sp, #28]
 5d8:	subs	w8, w8, #0x0
 5dc:	mov	w9, w8
 5e0:	ubfx	x9, x9, #0, #32
 5e4:	cmp	x9, #0x7
 5e8:	str	x9, [sp]
 5ec:	b.hi	684 <lfile_lfun+0xd0>  // b.pmore
 5f0:	adrp	x8, 0 <srunner_set_log>
 5f4:	add	x8, x8, #0x0
 5f8:	ldr	x11, [sp]
 5fc:	ldrsw	x10, [x8, x11, lsl #2]
 600:	add	x9, x8, x10
 604:	br	x9
 608:	b	69c <lfile_lfun+0xe8>
 60c:	b	69c <lfile_lfun+0xe8>
 610:	b	69c <lfile_lfun+0xe8>
 614:	ldr	x8, [sp, #32]
 618:	str	x8, [sp, #8]
 61c:	ldur	x0, [x29, #-16]
 620:	ldr	x8, [sp, #8]
 624:	ldr	x2, [x8]
 628:	adrp	x1, 0 <srunner_set_log>
 62c:	add	x1, x1, #0x0
 630:	bl	0 <fprintf>
 634:	b	69c <lfile_lfun+0xe8>
 638:	ldur	x0, [x29, #-16]
 63c:	adrp	x1, 0 <srunner_set_log>
 640:	add	x1, x1, #0x0
 644:	bl	0 <fprintf>
 648:	ldur	x8, [x29, #-16]
 64c:	ldur	x1, [x29, #-8]
 650:	mov	x0, x8
 654:	mov	w2, #0x1                   	// #1
 658:	bl	0 <srunner_fprint>
 65c:	b	69c <lfile_lfun+0xe8>
 660:	b	69c <lfile_lfun+0xe8>
 664:	b	69c <lfile_lfun+0xe8>
 668:	ldr	x8, [sp, #32]
 66c:	str	x8, [sp, #16]
 670:	ldur	x0, [x29, #-16]
 674:	ldr	x1, [sp, #16]
 678:	mov	w2, #0x3                   	// #3
 67c:	bl	0 <tr_fprint>
 680:	b	69c <lfile_lfun+0xe8>
 684:	adrp	x0, 0 <srunner_set_log>
 688:	add	x0, x0, #0x0
 68c:	adrp	x1, 0 <srunner_set_log>
 690:	add	x1, x1, #0x0
 694:	mov	w2, #0x103                 	// #259
 698:	bl	0 <eprintf>
 69c:	ldp	x29, x30, [sp, #64]
 6a0:	add	sp, sp, #0x50
 6a4:	ret

00000000000006a8 <xml_lfun>:
 6a8:	sub	sp, sp, #0xd0
 6ac:	stp	x29, x30, [sp, #192]
 6b0:	add	x29, sp, #0xc0
 6b4:	adrp	x8, 0 <srunner_set_log>
 6b8:	add	x8, x8, #0x0
 6bc:	adrp	x9, 0 <srunner_set_log>
 6c0:	add	x9, x9, #0x0
 6c4:	stur	x0, [x29, #-8]
 6c8:	stur	x1, [x29, #-16]
 6cc:	stur	w2, [x29, #-20]
 6d0:	stur	x3, [x29, #-32]
 6d4:	stur	w4, [x29, #-36]
 6d8:	ldrb	w10, [x8]
 6dc:	str	x8, [sp, #32]
 6e0:	str	x9, [sp, #24]
 6e4:	cbnz	w10, 738 <xml_lfun+0x90>
 6e8:	sub	x8, x29, #0x48
 6ec:	mov	x0, x8
 6f0:	mov	x9, xzr
 6f4:	mov	x1, x9
 6f8:	str	x8, [sp, #16]
 6fc:	bl	0 <gettimeofday>
 700:	bl	0 <check_get_clockid>
 704:	ldr	x1, [sp, #24]
 708:	bl	0 <clock_gettime>
 70c:	ldr	x8, [sp, #16]
 710:	mov	x0, x8
 714:	add	x1, sp, #0x40
 718:	bl	0 <localtime_r>
 71c:	cbz	x0, 738 <xml_lfun+0x90>
 720:	ldr	x0, [sp, #32]
 724:	mov	x1, #0x14                  	// #20
 728:	adrp	x2, 0 <srunner_set_log>
 72c:	add	x2, x2, #0x0
 730:	add	x3, sp, #0x40
 734:	bl	0 <strftime>
 738:	ldur	w8, [x29, #-36]
 73c:	subs	w8, w8, #0x0
 740:	mov	w9, w8
 744:	ubfx	x9, x9, #0, #32
 748:	cmp	x9, #0x7
 74c:	str	x9, [sp, #8]
 750:	b.hi	888 <xml_lfun+0x1e0>  // b.pmore
 754:	adrp	x8, 0 <srunner_set_log>
 758:	add	x8, x8, #0x0
 75c:	ldr	x11, [sp, #8]
 760:	ldrsw	x10, [x8, x11, lsl #2]
 764:	add	x9, x8, x10
 768:	br	x9
 76c:	ldur	x0, [x29, #-16]
 770:	adrp	x1, 0 <srunner_set_log>
 774:	add	x1, x1, #0x0
 778:	ldr	x2, [sp, #32]
 77c:	bl	0 <fprintf>
 780:	b	8a0 <xml_lfun+0x1f8>
 784:	add	x1, sp, #0x30
 788:	str	xzr, [sp, #48]
 78c:	str	xzr, [sp, #56]
 790:	str	x1, [sp]
 794:	bl	0 <check_get_clockid>
 798:	ldr	x1, [sp]
 79c:	bl	0 <clock_gettime>
 7a0:	ldr	x8, [sp, #48]
 7a4:	ldr	x9, [sp, #24]
 7a8:	ldr	x10, [x9]
 7ac:	subs	x8, x8, x10
 7b0:	mov	x10, #0x4240                	// #16960
 7b4:	movk	x10, #0xf, lsl #16
 7b8:	mul	x8, x8, x10
 7bc:	ldr	x11, [sp, #56]
 7c0:	mov	x12, #0x3e8                 	// #1000
 7c4:	sdiv	x11, x11, x12
 7c8:	add	x8, x8, x11
 7cc:	ldr	x11, [x9, #8]
 7d0:	sdiv	x11, x11, x12
 7d4:	subs	x8, x8, x11
 7d8:	str	x8, [sp, #40]
 7dc:	ldur	x8, [x29, #-16]
 7e0:	ldr	x11, [sp, #40]
 7e4:	udiv	x2, x11, x10
 7e8:	ldr	x11, [sp, #40]
 7ec:	udiv	x12, x11, x10
 7f0:	mul	x10, x12, x10
 7f4:	subs	x3, x11, x10
 7f8:	mov	x0, x8
 7fc:	adrp	x1, 0 <srunner_set_log>
 800:	add	x1, x1, #0x0
 804:	bl	0 <fprintf>
 808:	b	8a0 <xml_lfun+0x1f8>
 80c:	b	8a0 <xml_lfun+0x1f8>
 810:	ldur	x8, [x29, #-32]
 814:	stur	x8, [x29, #-56]
 818:	ldur	x0, [x29, #-16]
 81c:	adrp	x1, 0 <srunner_set_log>
 820:	add	x1, x1, #0x0
 824:	bl	0 <fprintf>
 828:	ldur	x8, [x29, #-16]
 82c:	ldur	x9, [x29, #-56]
 830:	ldr	x1, [x9]
 834:	mov	x0, x8
 838:	bl	0 <fprint_xml_esc>
 83c:	ldur	x0, [x29, #-16]
 840:	adrp	x1, 0 <srunner_set_log>
 844:	add	x1, x1, #0x0
 848:	bl	0 <fprintf>
 84c:	b	8a0 <xml_lfun+0x1f8>
 850:	b	8a0 <xml_lfun+0x1f8>
 854:	ldur	x0, [x29, #-16]
 858:	adrp	x1, 0 <srunner_set_log>
 85c:	add	x1, x1, #0x0
 860:	bl	0 <fprintf>
 864:	b	8a0 <xml_lfun+0x1f8>
 868:	b	8a0 <xml_lfun+0x1f8>
 86c:	ldur	x8, [x29, #-32]
 870:	stur	x8, [x29, #-48]
 874:	ldur	x0, [x29, #-16]
 878:	ldur	x1, [x29, #-48]
 87c:	mov	w2, #0x3                   	// #3
 880:	bl	0 <tr_xmlprint>
 884:	b	8a0 <xml_lfun+0x1f8>
 888:	adrp	x0, 0 <srunner_set_log>
 88c:	add	x0, x0, #0x0
 890:	adrp	x1, 0 <srunner_set_log>
 894:	add	x1, x1, #0x0
 898:	mov	w2, #0x14f                 	// #335
 89c:	bl	0 <eprintf>
 8a0:	ldp	x29, x30, [sp, #192]
 8a4:	add	sp, sp, #0xd0
 8a8:	ret

00000000000008ac <tap_lfun>:
 8ac:	sub	sp, sp, #0x50
 8b0:	stp	x29, x30, [sp, #64]
 8b4:	add	x29, sp, #0x40
 8b8:	adrp	x8, 0 <srunner_set_log>
 8bc:	add	x8, x8, #0x0
 8c0:	stur	x0, [x29, #-8]
 8c4:	stur	x1, [x29, #-16]
 8c8:	stur	w2, [x29, #-20]
 8cc:	str	x3, [sp, #32]
 8d0:	str	w4, [sp, #28]
 8d4:	ldr	w9, [sp, #28]
 8d8:	subs	w9, w9, #0x0
 8dc:	mov	w10, w9
 8e0:	ubfx	x10, x10, #0, #32
 8e4:	cmp	x10, #0x7
 8e8:	str	x8, [sp, #8]
 8ec:	str	x10, [sp]
 8f0:	b.hi	9d0 <tap_lfun+0x124>  // b.pmore
 8f4:	adrp	x8, 0 <srunner_set_log>
 8f8:	add	x8, x8, #0x0
 8fc:	ldr	x11, [sp]
 900:	ldrsw	x10, [x8, x11, lsl #2]
 904:	add	x9, x8, x10
 908:	br	x9
 90c:	ldr	x8, [sp, #8]
 910:	str	wzr, [x8]
 914:	b	9e8 <tap_lfun+0x13c>
 918:	ldur	x0, [x29, #-16]
 91c:	ldr	x8, [sp, #8]
 920:	ldr	w2, [x8]
 924:	adrp	x1, 0 <srunner_set_log>
 928:	add	x1, x1, #0x0
 92c:	bl	0 <fprintf>
 930:	ldur	x8, [x29, #-16]
 934:	mov	x0, x8
 938:	bl	0 <fflush>
 93c:	b	9e8 <tap_lfun+0x13c>
 940:	b	9e8 <tap_lfun+0x13c>
 944:	b	9e8 <tap_lfun+0x13c>
 948:	b	9e8 <tap_lfun+0x13c>
 94c:	b	9e8 <tap_lfun+0x13c>
 950:	b	9e8 <tap_lfun+0x13c>
 954:	ldr	x8, [sp, #8]
 958:	ldr	w9, [x8]
 95c:	add	w9, w9, #0x1
 960:	str	w9, [x8]
 964:	ldr	x10, [sp, #32]
 968:	str	x10, [sp, #16]
 96c:	ldur	x0, [x29, #-16]
 970:	ldr	x10, [sp, #16]
 974:	ldr	w9, [x10]
 978:	adrp	x10, 0 <srunner_set_log>
 97c:	add	x10, x10, #0x0
 980:	adrp	x11, 0 <srunner_set_log>
 984:	add	x11, x11, #0x0
 988:	cmp	w9, #0x1
 98c:	csel	x2, x11, x10, eq  // eq = none
 990:	ldr	w3, [x8]
 994:	ldr	x10, [sp, #16]
 998:	ldr	x4, [x10, #8]
 99c:	ldr	x10, [sp, #16]
 9a0:	ldr	x5, [x10, #32]
 9a4:	ldr	x10, [sp, #16]
 9a8:	ldr	x6, [x10, #40]
 9ac:	ldr	x10, [sp, #16]
 9b0:	ldr	x7, [x10, #48]
 9b4:	adrp	x1, 0 <srunner_set_log>
 9b8:	add	x1, x1, #0x0
 9bc:	bl	0 <fprintf>
 9c0:	ldur	x8, [x29, #-16]
 9c4:	mov	x0, x8
 9c8:	bl	0 <fflush>
 9cc:	b	9e8 <tap_lfun+0x13c>
 9d0:	adrp	x0, 0 <srunner_set_log>
 9d4:	add	x0, x0, #0x0
 9d8:	adrp	x1, 0 <srunner_set_log>
 9dc:	add	x1, x1, #0x0
 9e0:	mov	w2, #0x17c                 	// #380
 9e4:	bl	0 <eprintf>
 9e8:	ldp	x29, x30, [sp, #64]
 9ec:	add	sp, sp, #0x50
 9f0:	ret

00000000000009f4 <srunner_open_lfile>:
 9f4:	sub	sp, sp, #0x20
 9f8:	stp	x29, x30, [sp, #16]
 9fc:	add	x29, sp, #0x10
 a00:	mov	x8, xzr
 a04:	str	x0, [sp, #8]
 a08:	str	x8, [sp]
 a0c:	ldr	x0, [sp, #8]
 a10:	bl	30 <srunner_has_log>
 a14:	cbz	w0, a28 <srunner_open_lfile+0x34>
 a18:	ldr	x0, [sp, #8]
 a1c:	bl	60 <srunner_log_fname>
 a20:	bl	a38 <srunner_open_file>
 a24:	str	x0, [sp]
 a28:	ldr	x0, [sp]
 a2c:	ldp	x29, x30, [sp, #16]
 a30:	add	sp, sp, #0x20
 a34:	ret

0000000000000a38 <srunner_open_file>:
 a38:	sub	sp, sp, #0x20
 a3c:	stp	x29, x30, [sp, #16]
 a40:	add	x29, sp, #0x10
 a44:	mov	x8, xzr
 a48:	adrp	x1, 0 <srunner_set_log>
 a4c:	add	x1, x1, #0x0
 a50:	str	x0, [sp, #8]
 a54:	str	x8, [sp]
 a58:	ldr	x0, [sp, #8]
 a5c:	bl	0 <strcmp>
 a60:	cbnz	w0, a78 <srunner_open_file+0x40>
 a64:	adrp	x8, 0 <stdout>
 a68:	add	x8, x8, #0x0
 a6c:	ldr	x8, [x8]
 a70:	str	x8, [sp]
 a74:	b	ab0 <srunner_open_file+0x78>
 a78:	ldr	x0, [sp, #8]
 a7c:	adrp	x1, 0 <srunner_set_log>
 a80:	add	x1, x1, #0x0
 a84:	bl	0 <fopen>
 a88:	str	x0, [sp]
 a8c:	ldr	x8, [sp]
 a90:	cbnz	x8, ab0 <srunner_open_file+0x78>
 a94:	ldr	x3, [sp, #8]
 a98:	adrp	x0, 0 <srunner_set_log>
 a9c:	add	x0, x0, #0x0
 aa0:	adrp	x1, 0 <srunner_set_log>
 aa4:	add	x1, x1, #0x0
 aa8:	mov	w2, #0x1cd                 	// #461
 aac:	bl	0 <eprintf>
 ab0:	ldr	x0, [sp]
 ab4:	ldp	x29, x30, [sp, #16]
 ab8:	add	sp, sp, #0x20
 abc:	ret

0000000000000ac0 <srunner_open_xmlfile>:
 ac0:	sub	sp, sp, #0x20
 ac4:	stp	x29, x30, [sp, #16]
 ac8:	add	x29, sp, #0x10
 acc:	mov	x8, xzr
 ad0:	str	x0, [sp, #8]
 ad4:	str	x8, [sp]
 ad8:	ldr	x0, [sp, #8]
 adc:	bl	dc <srunner_has_xml>
 ae0:	cbz	w0, af4 <srunner_open_xmlfile+0x34>
 ae4:	ldr	x0, [sp, #8]
 ae8:	bl	10c <srunner_xml_fname>
 aec:	bl	a38 <srunner_open_file>
 af0:	str	x0, [sp]
 af4:	ldr	x0, [sp]
 af8:	ldp	x29, x30, [sp, #16]
 afc:	add	sp, sp, #0x20
 b00:	ret

0000000000000b04 <srunner_open_tapfile>:
 b04:	sub	sp, sp, #0x20
 b08:	stp	x29, x30, [sp, #16]
 b0c:	add	x29, sp, #0x10
 b10:	mov	x8, xzr
 b14:	str	x0, [sp, #8]
 b18:	str	x8, [sp]
 b1c:	ldr	x0, [sp, #8]
 b20:	bl	188 <srunner_has_tap>
 b24:	cbz	w0, b38 <srunner_open_tapfile+0x34>
 b28:	ldr	x0, [sp, #8]
 b2c:	bl	1b8 <srunner_tap_fname>
 b30:	bl	a38 <srunner_open_file>
 b34:	str	x0, [sp]
 b38:	ldr	x0, [sp]
 b3c:	ldp	x29, x30, [sp, #16]
 b40:	add	sp, sp, #0x20
 b44:	ret

0000000000000b48 <srunner_init_logging>:
 b48:	sub	sp, sp, #0x40
 b4c:	stp	x29, x30, [sp, #48]
 b50:	add	x29, sp, #0x30
 b54:	adrp	x8, 0 <stdout>
 b58:	add	x8, x8, #0x0
 b5c:	mov	w9, wzr
 b60:	adrp	x3, 4ac <stdout_lfun>
 b64:	add	x3, x3, #0x0
 b68:	stur	x0, [x29, #-8]
 b6c:	stur	w1, [x29, #-12]
 b70:	str	x8, [sp, #16]
 b74:	str	w9, [sp, #12]
 b78:	str	x3, [sp]
 b7c:	bl	0 <check_list_create>
 b80:	ldur	x8, [x29, #-8]
 b84:	str	x0, [x8, #48]
 b88:	ldur	x0, [x29, #-8]
 b8c:	ldr	x8, [sp, #16]
 b90:	ldr	x1, [x8]
 b94:	ldur	w4, [x29, #-12]
 b98:	ldr	w2, [sp, #12]
 b9c:	ldr	x3, [sp]
 ba0:	bl	204 <srunner_register_lfun>
 ba4:	ldur	x0, [x29, #-8]
 ba8:	bl	9f4 <srunner_open_lfile>
 bac:	str	x0, [sp, #24]
 bb0:	ldr	x8, [sp, #24]
 bb4:	cbz	x8, be8 <srunner_init_logging+0xa0>
 bb8:	ldur	x0, [x29, #-8]
 bbc:	ldr	x1, [sp, #24]
 bc0:	ldr	x8, [sp, #24]
 bc4:	ldr	x9, [sp, #16]
 bc8:	ldr	x10, [x9]
 bcc:	cmp	x8, x10
 bd0:	cset	w11, ne  // ne = any
 bd4:	and	w2, w11, #0x1
 bd8:	ldur	w4, [x29, #-12]
 bdc:	adrp	x3, 5b4 <lfile_lfun>
 be0:	add	x3, x3, #0x0
 be4:	bl	204 <srunner_register_lfun>
 be8:	ldur	x0, [x29, #-8]
 bec:	bl	ac0 <srunner_open_xmlfile>
 bf0:	str	x0, [sp, #24]
 bf4:	ldr	x8, [sp, #24]
 bf8:	cbz	x8, c2c <srunner_init_logging+0xe4>
 bfc:	ldur	x0, [x29, #-8]
 c00:	ldr	x1, [sp, #24]
 c04:	ldr	x8, [sp, #24]
 c08:	ldr	x9, [sp, #16]
 c0c:	ldr	x10, [x9]
 c10:	cmp	x8, x10
 c14:	cset	w11, ne  // ne = any
 c18:	and	w2, w11, #0x1
 c1c:	ldur	w4, [x29, #-12]
 c20:	adrp	x3, 6a8 <xml_lfun>
 c24:	add	x3, x3, #0x0
 c28:	bl	204 <srunner_register_lfun>
 c2c:	ldur	x0, [x29, #-8]
 c30:	bl	b04 <srunner_open_tapfile>
 c34:	str	x0, [sp, #24]
 c38:	ldr	x8, [sp, #24]
 c3c:	cbz	x8, c70 <srunner_init_logging+0x128>
 c40:	ldur	x0, [x29, #-8]
 c44:	ldr	x1, [sp, #24]
 c48:	ldr	x8, [sp, #24]
 c4c:	ldr	x9, [sp, #16]
 c50:	ldr	x10, [x9]
 c54:	cmp	x8, x10
 c58:	cset	w11, ne  // ne = any
 c5c:	and	w2, w11, #0x1
 c60:	ldur	w4, [x29, #-12]
 c64:	adrp	x3, 8ac <tap_lfun>
 c68:	add	x3, x3, #0x0
 c6c:	bl	204 <srunner_register_lfun>
 c70:	ldur	x0, [x29, #-8]
 c74:	mov	x8, xzr
 c78:	mov	x1, x8
 c7c:	mov	w9, wzr
 c80:	mov	w2, w9
 c84:	bl	2c4 <srunner_send_evt>
 c88:	ldp	x29, x30, [sp, #48]
 c8c:	add	sp, sp, #0x40
 c90:	ret

0000000000000c94 <srunner_end_logging>:
 c94:	sub	sp, sp, #0x30
 c98:	stp	x29, x30, [sp, #32]
 c9c:	add	x29, sp, #0x20
 ca0:	mov	x8, xzr
 ca4:	mov	w2, #0x1                   	// #1
 ca8:	stur	x0, [x29, #-8]
 cac:	ldur	x0, [x29, #-8]
 cb0:	mov	x1, x8
 cb4:	bl	2c4 <srunner_send_evt>
 cb8:	ldur	x8, [x29, #-8]
 cbc:	ldr	x8, [x8, #48]
 cc0:	str	x8, [sp, #16]
 cc4:	ldr	x0, [sp, #16]
 cc8:	bl	0 <check_list_front>
 ccc:	ldr	x0, [sp, #16]
 cd0:	bl	0 <check_list_at_end>
 cd4:	cmp	w0, #0x0
 cd8:	cset	w8, ne  // ne = any
 cdc:	eor	w8, w8, #0x1
 ce0:	tbnz	w8, #0, ce8 <srunner_end_logging+0x54>
 ce4:	b	d44 <srunner_end_logging+0xb0>
 ce8:	ldr	x0, [sp, #16]
 cec:	bl	0 <check_list_val>
 cf0:	str	x0, [sp]
 cf4:	ldr	x8, [sp]
 cf8:	ldr	w9, [x8, #16]
 cfc:	cbz	w9, d30 <srunner_end_logging+0x9c>
 d00:	ldr	x8, [sp]
 d04:	ldr	x0, [x8]
 d08:	bl	0 <fclose>
 d0c:	str	w0, [sp, #12]
 d10:	ldr	w9, [sp, #12]
 d14:	cbz	w9, d30 <srunner_end_logging+0x9c>
 d18:	adrp	x0, 0 <srunner_set_log>
 d1c:	add	x0, x0, #0x0
 d20:	adrp	x1, 0 <srunner_set_log>
 d24:	add	x1, x1, #0x0
 d28:	mov	w2, #0x224                 	// #548
 d2c:	bl	0 <eprintf>
 d30:	ldr	x0, [sp]
 d34:	bl	0 <free>
 d38:	ldr	x0, [sp, #16]
 d3c:	bl	0 <check_list_advance>
 d40:	b	ccc <srunner_end_logging+0x38>
 d44:	ldr	x0, [sp, #16]
 d48:	bl	0 <check_list_free>
 d4c:	ldur	x8, [x29, #-8]
 d50:	mov	x9, xzr
 d54:	str	x9, [x8, #48]
 d58:	ldp	x29, x30, [sp, #32]
 d5c:	add	sp, sp, #0x30
 d60:	ret

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <send_failure_info>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	mov	w1, #0x1                   	// #1
  10:	add	x2, sp, #0x10
  14:	stur	x0, [x29, #-8]
  18:	ldur	x0, [x29, #-8]
  1c:	str	w1, [sp, #12]
  20:	str	x2, [sp]
  24:	bl	0 <strdup>
  28:	str	x0, [sp, #16]
  2c:	bl	50 <get_pipe>
  30:	ldr	w1, [sp, #12]
  34:	ldr	x2, [sp]
  38:	bl	0 <ppack>
  3c:	ldr	x0, [sp, #16]
  40:	bl	0 <free>
  44:	ldp	x29, x30, [sp, #32]
  48:	add	sp, sp, #0x30
  4c:	ret

0000000000000050 <get_pipe>:
  50:	sub	sp, sp, #0x20
  54:	stp	x29, x30, [sp, #16]
  58:	add	x29, sp, #0x10
  5c:	adrp	x8, 0 <send_failure_info>
  60:	add	x8, x8, #0x0
  64:	ldr	x8, [x8]
  68:	cbz	x8, 80 <get_pipe+0x30>
  6c:	adrp	x8, 0 <send_failure_info>
  70:	add	x8, x8, #0x0
  74:	ldr	x8, [x8]
  78:	str	x8, [sp, #8]
  7c:	b	bc <get_pipe+0x6c>
  80:	adrp	x8, 0 <send_failure_info>
  84:	add	x8, x8, #0x0
  88:	ldr	x8, [x8]
  8c:	cbz	x8, a4 <get_pipe+0x54>
  90:	adrp	x8, 0 <send_failure_info>
  94:	add	x8, x8, #0x0
  98:	ldr	x8, [x8]
  9c:	str	x8, [sp, #8]
  a0:	b	bc <get_pipe+0x6c>
  a4:	adrp	x0, 0 <send_failure_info>
  a8:	add	x0, x0, #0x0
  ac:	adrp	x1, 0 <send_failure_info>
  b0:	add	x1, x1, #0x0
  b4:	mov	w2, #0x50                  	// #80
  b8:	bl	0 <eprintf>
  bc:	ldr	x0, [sp, #8]
  c0:	ldp	x29, x30, [sp, #16]
  c4:	add	sp, sp, #0x20
  c8:	ret

00000000000000cc <send_duration_info>:
  cc:	sub	sp, sp, #0x30
  d0:	stp	x29, x30, [sp, #32]
  d4:	add	x29, sp, #0x20
  d8:	mov	w1, #0x3                   	// #3
  dc:	sub	x2, x29, #0x8
  e0:	stur	w0, [x29, #-4]
  e4:	ldur	w8, [x29, #-4]
  e8:	stur	w8, [x29, #-8]
  ec:	stur	w1, [x29, #-12]
  f0:	str	x2, [sp, #8]
  f4:	bl	50 <get_pipe>
  f8:	ldur	w1, [x29, #-12]
  fc:	ldr	x2, [sp, #8]
 100:	bl	0 <ppack>
 104:	ldp	x29, x30, [sp, #32]
 108:	add	sp, sp, #0x30
 10c:	ret

0000000000000110 <send_loc_info>:
 110:	sub	sp, sp, #0x40
 114:	stp	x29, x30, [sp, #48]
 118:	add	x29, sp, #0x30
 11c:	mov	w8, #0x2                   	// #2
 120:	add	x9, sp, #0x10
 124:	stur	x0, [x29, #-8]
 128:	stur	w1, [x29, #-12]
 12c:	ldur	x0, [x29, #-8]
 130:	str	w8, [sp, #12]
 134:	str	x9, [sp]
 138:	bl	0 <strdup>
 13c:	ldr	x9, [sp]
 140:	str	x0, [x9, #8]
 144:	ldur	w8, [x29, #-12]
 148:	str	w8, [sp, #16]
 14c:	bl	50 <get_pipe>
 150:	ldr	w1, [sp, #12]
 154:	ldr	x2, [sp]
 158:	bl	0 <ppack>
 15c:	ldr	x9, [sp]
 160:	ldr	x0, [x9, #8]
 164:	bl	0 <free>
 168:	ldp	x29, x30, [sp, #48]
 16c:	add	sp, sp, #0x40
 170:	ret

0000000000000174 <send_ctx_info>:
 174:	sub	sp, sp, #0x30
 178:	stp	x29, x30, [sp, #32]
 17c:	add	x29, sp, #0x20
 180:	mov	w8, wzr
 184:	sub	x2, x29, #0x8
 188:	stur	w0, [x29, #-4]
 18c:	ldur	w9, [x29, #-4]
 190:	stur	w9, [x29, #-8]
 194:	stur	w8, [x29, #-12]
 198:	str	x2, [sp, #8]
 19c:	bl	50 <get_pipe>
 1a0:	ldur	w1, [x29, #-12]
 1a4:	ldr	x2, [sp, #8]
 1a8:	bl	0 <ppack>
 1ac:	ldp	x29, x30, [sp, #32]
 1b0:	add	sp, sp, #0x30
 1b4:	ret

00000000000001b8 <receive_test_result>:
 1b8:	sub	sp, sp, #0x30
 1bc:	stp	x29, x30, [sp, #32]
 1c0:	add	x29, sp, #0x20
 1c4:	stur	w0, [x29, #-4]
 1c8:	bl	50 <get_pipe>
 1cc:	str	x0, [sp, #16]
 1d0:	ldr	x8, [sp, #16]
 1d4:	cbnz	x8, 1f0 <receive_test_result+0x38>
 1d8:	adrp	x0, 0 <send_failure_info>
 1dc:	add	x0, x0, #0x0
 1e0:	adrp	x1, 0 <send_failure_info>
 1e4:	add	x1, x1, #0x0
 1e8:	mov	w2, #0x7f                  	// #127
 1ec:	bl	0 <eprintf>
 1f0:	ldr	x0, [sp, #16]
 1f4:	bl	0 <rewind>
 1f8:	ldr	x0, [sp, #16]
 1fc:	bl	0 <punpack>
 200:	str	x0, [sp, #8]
 204:	ldr	x8, [sp, #8]
 208:	cbnz	x8, 224 <receive_test_result+0x6c>
 20c:	adrp	x0, 0 <send_failure_info>
 210:	add	x0, x0, #0x0
 214:	adrp	x1, 0 <send_failure_info>
 218:	add	x1, x1, #0x0
 21c:	mov	w2, #0x85                  	// #133
 220:	bl	0 <eprintf>
 224:	bl	254 <teardown_pipe>
 228:	bl	368 <setup_pipe>
 22c:	ldr	x0, [sp, #8]
 230:	ldur	w1, [x29, #-4]
 234:	bl	434 <construct_test_result>
 238:	str	x0, [sp]
 23c:	ldr	x0, [sp, #8]
 240:	bl	0 <rcvmsg_free>
 244:	ldr	x0, [sp]
 248:	ldp	x29, x30, [sp, #32]
 24c:	add	sp, sp, #0x30
 250:	ret

0000000000000254 <teardown_pipe>:
 254:	sub	sp, sp, #0x30
 258:	stp	x29, x30, [sp, #32]
 25c:	add	x29, sp, #0x20
 260:	adrp	x8, 0 <send_failure_info>
 264:	add	x8, x8, #0x0
 268:	adrp	x9, 0 <send_failure_info>
 26c:	add	x9, x9, #0x0
 270:	adrp	x10, 0 <send_failure_info>
 274:	add	x10, x10, #0x0
 278:	adrp	x11, 0 <send_failure_info>
 27c:	add	x11, x11, #0x0
 280:	ldr	x12, [x8]
 284:	stur	x8, [x29, #-8]
 288:	str	x9, [sp, #16]
 28c:	str	x10, [sp, #8]
 290:	str	x11, [sp]
 294:	cbz	x12, 2e8 <teardown_pipe+0x94>
 298:	ldur	x8, [x29, #-8]
 29c:	ldr	x0, [x8]
 2a0:	bl	0 <fclose>
 2a4:	mov	x8, xzr
 2a8:	ldur	x9, [x29, #-8]
 2ac:	str	x8, [x9]
 2b0:	ldr	x8, [sp]
 2b4:	ldr	x10, [x8]
 2b8:	cbz	x10, 2e4 <teardown_pipe+0x90>
 2bc:	ldr	x8, [sp]
 2c0:	ldr	x0, [x8]
 2c4:	bl	0 <unlink>
 2c8:	ldr	x8, [sp]
 2cc:	ldr	x9, [x8]
 2d0:	mov	x0, x9
 2d4:	bl	0 <free>
 2d8:	mov	x8, xzr
 2dc:	ldr	x9, [sp]
 2e0:	str	x8, [x9]
 2e4:	b	35c <teardown_pipe+0x108>
 2e8:	ldr	x8, [sp, #16]
 2ec:	ldr	x9, [x8]
 2f0:	cbz	x9, 344 <teardown_pipe+0xf0>
 2f4:	ldr	x8, [sp, #16]
 2f8:	ldr	x0, [x8]
 2fc:	bl	0 <fclose>
 300:	mov	x8, xzr
 304:	ldr	x9, [sp, #16]
 308:	str	x8, [x9]
 30c:	ldr	x8, [sp, #8]
 310:	ldr	x10, [x8]
 314:	cbz	x10, 340 <teardown_pipe+0xec>
 318:	ldr	x8, [sp, #8]
 31c:	ldr	x0, [x8]
 320:	bl	0 <unlink>
 324:	ldr	x8, [sp, #8]
 328:	ldr	x9, [x8]
 32c:	mov	x0, x9
 330:	bl	0 <free>
 334:	mov	x8, xzr
 338:	ldr	x9, [sp, #8]
 33c:	str	x8, [x9]
 340:	b	35c <teardown_pipe+0x108>
 344:	adrp	x0, 0 <send_failure_info>
 348:	add	x0, x0, #0x0
 34c:	adrp	x1, 0 <send_failure_info>
 350:	add	x1, x1, #0x0
 354:	mov	w2, #0x16a                 	// #362
 358:	bl	0 <eprintf>
 35c:	ldp	x29, x30, [sp, #32]
 360:	add	sp, sp, #0x30
 364:	ret

0000000000000368 <setup_pipe>:
 368:	sub	sp, sp, #0x30
 36c:	stp	x29, x30, [sp, #32]
 370:	add	x29, sp, #0x20
 374:	adrp	x8, 0 <send_failure_info>
 378:	add	x8, x8, #0x0
 37c:	adrp	x9, 0 <send_failure_info>
 380:	add	x9, x9, #0x0
 384:	adrp	x10, 0 <send_failure_info>
 388:	add	x10, x10, #0x0
 38c:	ldr	x11, [x8]
 390:	stur	x8, [x29, #-8]
 394:	str	x9, [sp, #16]
 398:	str	x10, [sp, #8]
 39c:	cbnz	x11, 3d4 <setup_pipe+0x6c>
 3a0:	adrp	x0, 0 <send_failure_info>
 3a4:	add	x0, x0, #0x0
 3a8:	bl	590 <open_tmp_file>
 3ac:	ldur	x8, [x29, #-8]
 3b0:	str	x0, [x8]
 3b4:	ldr	x9, [x8]
 3b8:	cbnz	x9, 3d0 <setup_pipe+0x68>
 3bc:	adrp	x0, 0 <send_failure_info>
 3c0:	add	x0, x0, #0x0
 3c4:	ldr	x1, [sp, #8]
 3c8:	mov	w2, #0x13d                 	// #317
 3cc:	bl	0 <eprintf>
 3d0:	b	428 <setup_pipe+0xc0>
 3d4:	ldr	x8, [sp, #16]
 3d8:	ldr	x9, [x8]
 3dc:	cbnz	x9, 414 <setup_pipe+0xac>
 3e0:	adrp	x0, 0 <send_failure_info>
 3e4:	add	x0, x0, #0x0
 3e8:	bl	590 <open_tmp_file>
 3ec:	ldr	x8, [sp, #16]
 3f0:	str	x0, [x8]
 3f4:	ldr	x9, [x8]
 3f8:	cbnz	x9, 410 <setup_pipe+0xa8>
 3fc:	adrp	x0, 0 <send_failure_info>
 400:	add	x0, x0, #0x0
 404:	ldr	x1, [sp, #8]
 408:	mov	w2, #0x146                 	// #326
 40c:	bl	0 <eprintf>
 410:	b	428 <setup_pipe+0xc0>
 414:	adrp	x0, 0 <send_failure_info>
 418:	add	x0, x0, #0x0
 41c:	ldr	x1, [sp, #8]
 420:	mov	w2, #0x14d                 	// #333
 424:	bl	0 <eprintf>
 428:	ldp	x29, x30, [sp, #32]
 42c:	add	sp, sp, #0x30
 430:	ret

0000000000000434 <construct_test_result>:
 434:	sub	sp, sp, #0x30
 438:	stp	x29, x30, [sp, #32]
 43c:	add	x29, sp, #0x20
 440:	str	x0, [sp, #16]
 444:	str	w1, [sp, #12]
 448:	ldr	x8, [sp, #16]
 44c:	cbnz	x8, 45c <construct_test_result+0x28>
 450:	mov	x8, xzr
 454:	stur	x8, [x29, #-8]
 458:	b	558 <construct_test_result+0x124>
 45c:	bl	0 <tr_create>
 460:	str	x0, [sp]
 464:	ldr	x8, [sp, #16]
 468:	ldr	x8, [x8, #40]
 46c:	cbnz	x8, 478 <construct_test_result+0x44>
 470:	ldr	w8, [sp, #12]
 474:	cbz	w8, 4dc <construct_test_result+0xa8>
 478:	ldr	x8, [sp, #16]
 47c:	ldr	w9, [x8, #4]
 480:	cbz	w9, 498 <construct_test_result+0x64>
 484:	ldr	x8, [sp, #16]
 488:	ldr	w9, [x8, #4]
 48c:	ldr	x8, [sp]
 490:	str	w9, [x8, #4]
 494:	b	4a8 <construct_test_result+0x74>
 498:	ldr	x8, [sp, #16]
 49c:	ldr	w9, [x8]
 4a0:	ldr	x8, [sp]
 4a4:	str	w9, [x8, #4]
 4a8:	ldr	x8, [sp, #16]
 4ac:	ldr	x8, [x8, #40]
 4b0:	ldr	x9, [sp]
 4b4:	str	x8, [x9, #48]
 4b8:	ldr	x8, [sp, #16]
 4bc:	mov	x9, xzr
 4c0:	str	x9, [x8, #40]
 4c4:	ldr	x0, [sp]
 4c8:	ldr	x8, [sp]
 4cc:	ldr	w1, [x8, #4]
 4d0:	ldr	x2, [sp, #16]
 4d4:	bl	694 <tr_set_loc_by_ctx>
 4d8:	b	550 <construct_test_result+0x11c>
 4dc:	ldr	x8, [sp, #16]
 4e0:	ldr	w9, [x8]
 4e4:	cmp	w9, #0x1
 4e8:	b.ne	518 <construct_test_result+0xe4>  // b.any
 4ec:	ldr	x8, [sp]
 4f0:	mov	w9, #0x1                   	// #1
 4f4:	str	w9, [x8, #4]
 4f8:	ldr	x8, [sp]
 4fc:	mov	x10, xzr
 500:	str	x10, [x8, #48]
 504:	ldr	x0, [sp]
 508:	ldr	x2, [sp, #16]
 50c:	mov	w1, w9
 510:	bl	694 <tr_set_loc_by_ctx>
 514:	b	550 <construct_test_result+0x11c>
 518:	ldr	x8, [sp]
 51c:	mov	w9, #0x2                   	// #2
 520:	str	w9, [x8, #4]
 524:	ldr	x8, [sp]
 528:	mov	x10, xzr
 52c:	str	x10, [x8, #48]
 530:	ldr	x8, [sp, #16]
 534:	ldr	w11, [x8, #48]
 538:	ldr	x8, [sp]
 53c:	str	w11, [x8, #24]
 540:	ldr	x0, [sp]
 544:	ldr	x2, [sp, #16]
 548:	mov	w1, w9
 54c:	bl	694 <tr_set_loc_by_ctx>
 550:	ldr	x8, [sp]
 554:	stur	x8, [x29, #-8]
 558:	ldur	x0, [x29, #-8]
 55c:	ldp	x29, x30, [sp, #32]
 560:	add	sp, sp, #0x30
 564:	ret

0000000000000568 <setup_messaging>:
 568:	stp	x29, x30, [sp, #-16]!
 56c:	mov	x29, sp
 570:	bl	368 <setup_pipe>
 574:	ldp	x29, x30, [sp], #16
 578:	ret

000000000000057c <teardown_messaging>:
 57c:	stp	x29, x30, [sp, #-16]!
 580:	mov	x29, sp
 584:	bl	254 <teardown_pipe>
 588:	ldp	x29, x30, [sp], #16
 58c:	ret

0000000000000590 <open_tmp_file>:
 590:	sub	sp, sp, #0x30
 594:	stp	x29, x30, [sp, #32]
 598:	add	x29, sp, #0x20
 59c:	mov	x8, xzr
 5a0:	mov	w9, #0xffffffff            	// #-1
 5a4:	adrp	x10, 0 <send_failure_info>
 5a8:	add	x10, x10, #0x0
 5ac:	stur	x0, [x29, #-8]
 5b0:	str	x8, [sp, #16]
 5b4:	ldur	x11, [x29, #-8]
 5b8:	str	x8, [x11]
 5bc:	str	w9, [sp, #12]
 5c0:	mov	x0, x10
 5c4:	bl	0 <getenv>
 5c8:	str	x0, [sp]
 5cc:	ldr	x8, [sp]
 5d0:	cbnz	x8, 5e0 <open_tmp_file+0x50>
 5d4:	adrp	x8, 0 <send_failure_info>
 5d8:	add	x8, x8, #0x0
 5dc:	str	x8, [sp]
 5e0:	ldr	x8, [sp]
 5e4:	cbnz	x8, 5f8 <open_tmp_file+0x68>
 5e8:	adrp	x0, 0 <send_failure_info>
 5ec:	add	x0, x0, #0x0
 5f0:	bl	0 <getenv>
 5f4:	str	x0, [sp]
 5f8:	ldr	x8, [sp]
 5fc:	cbnz	x8, 60c <open_tmp_file+0x7c>
 600:	adrp	x8, 0 <send_failure_info>
 604:	add	x8, x8, #0x0
 608:	str	x8, [sp]
 60c:	ldr	x1, [sp]
 610:	adrp	x0, 0 <send_failure_info>
 614:	add	x0, x0, #0x0
 618:	bl	0 <ck_strdup_printf>
 61c:	ldur	x8, [x29, #-8]
 620:	str	x0, [x8]
 624:	ldur	x8, [x29, #-8]
 628:	ldr	x0, [x8]
 62c:	bl	0 <mkstemp>
 630:	str	w0, [sp, #12]
 634:	mov	w9, #0xffffffff            	// #-1
 638:	cmp	w9, w0
 63c:	b.ge	684 <open_tmp_file+0xf4>  // b.tcont
 640:	ldr	w0, [sp, #12]
 644:	adrp	x1, 0 <send_failure_info>
 648:	add	x1, x1, #0x0
 64c:	bl	0 <fdopen>
 650:	str	x0, [sp, #16]
 654:	ldur	x8, [x29, #-8]
 658:	ldr	x0, [x8]
 65c:	bl	0 <unlink>
 660:	cbz	w0, 66c <open_tmp_file+0xdc>
 664:	ldr	x8, [sp, #16]
 668:	cbnz	x8, 684 <open_tmp_file+0xf4>
 66c:	ldur	x8, [x29, #-8]
 670:	ldr	x0, [x8]
 674:	bl	0 <free>
 678:	ldur	x8, [x29, #-8]
 67c:	mov	x9, xzr
 680:	str	x9, [x8]
 684:	ldr	x0, [sp, #16]
 688:	ldp	x29, x30, [sp, #32]
 68c:	add	sp, sp, #0x30
 690:	ret

0000000000000694 <tr_set_loc_by_ctx>:
 694:	sub	sp, sp, #0x20
 698:	str	x0, [sp, #24]
 69c:	str	w1, [sp, #20]
 6a0:	str	x2, [sp, #8]
 6a4:	ldr	w8, [sp, #20]
 6a8:	cmp	w8, #0x2
 6ac:	b.ne	6ec <tr_set_loc_by_ctx+0x58>  // b.any
 6b0:	ldr	x8, [sp, #8]
 6b4:	ldr	x8, [x8, #24]
 6b8:	ldr	x9, [sp, #24]
 6bc:	str	x8, [x9, #8]
 6c0:	ldr	x8, [sp, #8]
 6c4:	ldr	w10, [x8, #32]
 6c8:	ldr	x8, [sp, #24]
 6cc:	str	w10, [x8, #16]
 6d0:	ldr	x8, [sp, #8]
 6d4:	mov	x9, xzr
 6d8:	str	x9, [x8, #24]
 6dc:	ldr	x8, [sp, #8]
 6e0:	mov	w10, #0xffffffff            	// #-1
 6e4:	str	w10, [x8, #32]
 6e8:	b	724 <tr_set_loc_by_ctx+0x90>
 6ec:	ldr	x8, [sp, #8]
 6f0:	ldr	x8, [x8, #8]
 6f4:	ldr	x9, [sp, #24]
 6f8:	str	x8, [x9, #8]
 6fc:	ldr	x8, [sp, #8]
 700:	ldr	w10, [x8, #16]
 704:	ldr	x8, [sp, #24]
 708:	str	w10, [x8, #16]
 70c:	ldr	x8, [sp, #8]
 710:	mov	x9, xzr
 714:	str	x9, [x8, #8]
 718:	ldr	x8, [sp, #8]
 71c:	mov	w10, #0xffffffff            	// #-1
 720:	str	w10, [x8, #16]
 724:	add	sp, sp, #0x20
 728:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	sub	sp, sp, #0x10
   4:	adrp	x8, 0 <check_set_max_msg_size>
   8:	add	x8, x8, #0x0
   c:	str	x0, [sp, #8]
  10:	ldr	x9, [sp, #8]
  14:	str	x9, [x8]
  18:	add	sp, sp, #0x10
  1c:	ret

0000000000000020 <pack>:
  20:	sub	sp, sp, #0x30
  24:	stp	x29, x30, [sp, #32]
  28:	add	x29, sp, #0x20
  2c:	stur	w0, [x29, #-8]
  30:	str	x1, [sp, #16]
  34:	str	x2, [sp, #8]
  38:	ldr	x8, [sp, #16]
  3c:	cbnz	x8, 4c <pack+0x2c>
  40:	mov	w8, #0xffffffff            	// #-1
  44:	stur	w8, [x29, #-4]
  48:	b	a0 <pack+0x80>
  4c:	ldr	x8, [sp, #8]
  50:	cbnz	x8, 5c <pack+0x3c>
  54:	stur	wzr, [x29, #-4]
  58:	b	a0 <pack+0x80>
  5c:	ldur	w0, [x29, #-8]
  60:	adrp	x1, 0 <check_set_max_msg_size>
  64:	add	x1, x1, #0x0
  68:	mov	w2, #0x7e                  	// #126
  6c:	bl	b0 <check_type>
  70:	ldur	w8, [x29, #-8]
  74:	mov	w9, w8
  78:	mov	x10, #0x8                   	// #8
  7c:	mul	x9, x10, x9
  80:	adrp	x10, 0 <check_set_max_msg_size>
  84:	add	x10, x10, #0x0
  88:	add	x9, x10, x9
  8c:	ldr	x9, [x9]
  90:	ldr	x0, [sp, #16]
  94:	ldr	x1, [sp, #8]
  98:	blr	x9
  9c:	stur	w0, [x29, #-4]
  a0:	ldur	w0, [x29, #-4]
  a4:	ldp	x29, x30, [sp, #32]
  a8:	add	sp, sp, #0x30
  ac:	ret

00000000000000b0 <check_type>:
  b0:	sub	sp, sp, #0x30
  b4:	stp	x29, x30, [sp, #32]
  b8:	add	x29, sp, #0x20
  bc:	stur	w0, [x29, #-4]
  c0:	str	x1, [sp, #16]
  c4:	str	w2, [sp, #12]
  c8:	ldur	w8, [x29, #-4]
  cc:	cmp	w8, #0x0
  d0:	cset	w8, lt  // lt = tstop
  d4:	tbnz	w8, #0, e4 <check_type+0x34>
  d8:	ldur	w8, [x29, #-4]
  dc:	cmp	w8, #0x4
  e0:	b.lt	fc <check_type+0x4c>  // b.tstop
  e4:	ldr	x1, [sp, #16]
  e8:	ldr	w2, [sp, #12]
  ec:	ldur	w3, [x29, #-4]
  f0:	adrp	x0, 0 <check_set_max_msg_size>
  f4:	add	x0, x0, #0x0
  f8:	bl	0 <eprintf>
  fc:	ldp	x29, x30, [sp, #32]
 100:	add	sp, sp, #0x30
 104:	ret

0000000000000108 <upack>:
 108:	sub	sp, sp, #0x40
 10c:	stp	x29, x30, [sp, #48]
 110:	add	x29, sp, #0x30
 114:	stur	x0, [x29, #-16]
 118:	str	x1, [sp, #24]
 11c:	str	x2, [sp, #16]
 120:	ldur	x8, [x29, #-16]
 124:	cbnz	x8, 134 <upack+0x2c>
 128:	mov	w8, #0xffffffff            	// #-1
 12c:	stur	w8, [x29, #-4]
 130:	b	1ac <upack+0xa4>
 134:	sub	x8, x29, #0x10
 138:	ldur	x9, [x29, #-16]
 13c:	str	x9, [sp, #8]
 140:	mov	x0, x8
 144:	str	x8, [sp]
 148:	bl	1bc <upack_type>
 14c:	ldr	x8, [sp, #16]
 150:	str	w0, [x8]
 154:	ldr	x8, [sp, #16]
 158:	ldr	w0, [x8]
 15c:	adrp	x1, 0 <check_set_max_msg_size>
 160:	add	x1, x1, #0x0
 164:	mov	w2, #0x8e                  	// #142
 168:	bl	b0 <check_type>
 16c:	ldr	x8, [sp, #16]
 170:	ldr	w10, [x8]
 174:	mov	w8, w10
 178:	mov	x9, #0x8                   	// #8
 17c:	mul	x8, x9, x8
 180:	adrp	x9, 0 <check_set_max_msg_size>
 184:	add	x9, x9, #0x0
 188:	add	x8, x9, x8
 18c:	ldr	x8, [x8]
 190:	ldr	x1, [sp, #24]
 194:	ldr	x0, [sp]
 198:	blr	x8
 19c:	ldur	x8, [x29, #-16]
 1a0:	ldr	x9, [sp, #8]
 1a4:	subs	x8, x8, x9
 1a8:	stur	w8, [x29, #-4]
 1ac:	ldur	w0, [x29, #-4]
 1b0:	ldp	x29, x30, [sp, #48]
 1b4:	add	sp, sp, #0x40
 1b8:	ret

00000000000001bc <upack_type>:
 1bc:	sub	sp, sp, #0x20
 1c0:	stp	x29, x30, [sp, #16]
 1c4:	add	x29, sp, #0x10
 1c8:	str	x0, [sp, #8]
 1cc:	ldr	x0, [sp, #8]
 1d0:	bl	bc4 <upack_int>
 1d4:	ldp	x29, x30, [sp, #16]
 1d8:	add	sp, sp, #0x20
 1dc:	ret

00000000000001e0 <ppack>:
 1e0:	sub	sp, sp, #0x160
 1e4:	stp	x29, x30, [sp, #320]
 1e8:	str	x28, [sp, #336]
 1ec:	add	x29, sp, #0x140
 1f0:	sub	x8, x29, #0x30
 1f4:	mov	x9, xzr
 1f8:	adrp	x10, 0 <check_set_max_msg_size>
 1fc:	add	x10, x10, #0x0
 200:	sub	x11, x29, #0x20
 204:	str	x0, [x8, #40]
 208:	stur	w1, [x29, #-12]
 20c:	str	x2, [x8, #24]
 210:	str	x9, [x8, #16]
 214:	ldur	w0, [x29, #-12]
 218:	ldr	x2, [x8, #24]
 21c:	mov	x1, x11
 220:	str	x8, [sp, #16]
 224:	str	x10, [sp, #8]
 228:	bl	20 <pack>
 22c:	mov	w1, w0
 230:	sxtw	x8, w1
 234:	ldr	x9, [sp, #16]
 238:	str	x8, [x9, #8]
 23c:	ldr	x8, [x9, #8]
 240:	str	x8, [sp]
 244:	bl	348 <get_max_msg_size>
 248:	ldr	x8, [sp]
 24c:	cmp	x8, x0
 250:	b.ls	26c <ppack+0x8c>  // b.plast
 254:	adrp	x0, 0 <check_set_max_msg_size>
 258:	add	x0, x0, #0x0
 25c:	adrp	x1, 0 <check_set_max_msg_size>
 260:	add	x1, x1, #0x0
 264:	mov	w2, #0x146                 	// #326
 268:	bl	0 <eprintf>
 26c:	adrp	x8, 0 <check_set_max_msg_size>
 270:	add	x8, x8, #0x0
 274:	str	x8, [sp, #40]
 278:	ldr	x8, [sp, #8]
 27c:	str	x8, [sp, #32]
 280:	add	x0, sp, #0x30
 284:	mov	w9, wzr
 288:	mov	w1, w9
 28c:	bl	0 <__sigsetjmp>
 290:	str	w0, [sp, #28]
 294:	ldrsw	x8, [sp, #28]
 298:	cbz	x8, 2b0 <ppack+0xd0>
 29c:	ldr	x8, [sp, #40]
 2a0:	ldr	x0, [sp, #32]
 2a4:	blr	x8
 2a8:	add	x0, sp, #0x30
 2ac:	bl	0 <__pthread_unwind_next>
 2b0:	add	x0, sp, #0x30
 2b4:	bl	0 <__pthread_register_cancel>
 2b8:	ldr	x0, [sp, #8]
 2bc:	bl	0 <pthread_mutex_lock>
 2c0:	ldr	x8, [sp, #16]
 2c4:	ldr	x9, [x8, #16]
 2c8:	ldr	x2, [x8, #8]
 2cc:	ldr	x3, [x8, #40]
 2d0:	mov	x0, x9
 2d4:	mov	x1, #0x1                   	// #1
 2d8:	bl	0 <fwrite>
 2dc:	ldr	x8, [sp, #16]
 2e0:	str	x0, [x8]
 2e4:	ldr	x0, [x8, #40]
 2e8:	bl	0 <fflush>
 2ec:	ldr	x8, [sp, #8]
 2f0:	mov	x0, x8
 2f4:	bl	0 <pthread_mutex_unlock>
 2f8:	add	x0, sp, #0x30
 2fc:	bl	0 <__pthread_unregister_cancel>
 300:	ldr	x8, [sp, #16]
 304:	ldr	x9, [x8]
 308:	ldr	x10, [x8, #8]
 30c:	cmp	x9, x10
 310:	b.eq	32c <ppack+0x14c>  // b.none
 314:	adrp	x0, 0 <check_set_max_msg_size>
 318:	add	x0, x0, #0x0
 31c:	adrp	x1, 0 <check_set_max_msg_size>
 320:	add	x1, x1, #0x0
 324:	mov	w2, #0x14f                 	// #335
 328:	bl	0 <eprintf>
 32c:	ldr	x8, [sp, #16]
 330:	ldr	x0, [x8, #16]
 334:	bl	0 <free>
 338:	ldr	x28, [sp, #336]
 33c:	ldp	x29, x30, [sp, #320]
 340:	add	sp, sp, #0x160
 344:	ret

0000000000000348 <get_max_msg_size>:
 348:	sub	sp, sp, #0x20
 34c:	stp	x29, x30, [sp, #16]
 350:	add	x29, sp, #0x10
 354:	adrp	x0, 0 <check_set_max_msg_size>
 358:	add	x0, x0, #0x0
 35c:	str	xzr, [sp, #8]
 360:	bl	0 <getenv>
 364:	str	x0, [sp]
 368:	ldr	x8, [sp]
 36c:	cbz	x8, 388 <get_max_msg_size+0x40>
 370:	ldr	x0, [sp]
 374:	mov	x8, xzr
 378:	mov	x1, x8
 37c:	mov	w2, #0xa                   	// #10
 380:	bl	0 <strtoul>
 384:	str	x0, [sp, #8]
 388:	ldr	x8, [sp, #8]
 38c:	cbnz	x8, 3a0 <get_max_msg_size+0x58>
 390:	adrp	x8, 0 <check_set_max_msg_size>
 394:	add	x8, x8, #0x0
 398:	ldr	x8, [x8]
 39c:	str	x8, [sp, #8]
 3a0:	ldr	x8, [sp, #8]
 3a4:	cbnz	x8, 3b0 <get_max_msg_size+0x68>
 3a8:	mov	x8, #0x1000                	// #4096
 3ac:	str	x8, [sp, #8]
 3b0:	ldr	x0, [sp, #8]
 3b4:	ldp	x29, x30, [sp, #16]
 3b8:	add	sp, sp, #0x20
 3bc:	ret

00000000000003c0 <ppack_cleanup>:
 3c0:	sub	sp, sp, #0x20
 3c4:	stp	x29, x30, [sp, #16]
 3c8:	add	x29, sp, #0x10
 3cc:	str	x0, [sp, #8]
 3d0:	ldr	x0, [sp, #8]
 3d4:	bl	0 <pthread_mutex_unlock>
 3d8:	ldp	x29, x30, [sp, #16]
 3dc:	add	sp, sp, #0x20
 3e0:	ret

00000000000003e4 <rcvmsg_free>:
 3e4:	sub	sp, sp, #0x20
 3e8:	stp	x29, x30, [sp, #16]
 3ec:	add	x29, sp, #0x10
 3f0:	str	x0, [sp, #8]
 3f4:	ldr	x8, [sp, #8]
 3f8:	ldr	x0, [x8, #8]
 3fc:	bl	0 <free>
 400:	ldr	x8, [sp, #8]
 404:	ldr	x0, [x8, #24]
 408:	bl	0 <free>
 40c:	ldr	x8, [sp, #8]
 410:	ldr	x0, [x8, #40]
 414:	bl	0 <free>
 418:	ldr	x0, [sp, #8]
 41c:	bl	0 <free>
 420:	ldp	x29, x30, [sp, #16]
 424:	add	sp, sp, #0x20
 428:	ret

000000000000042c <punpack>:
 42c:	sub	sp, sp, #0x50
 430:	stp	x29, x30, [sp, #64]
 434:	add	x29, sp, #0x40
 438:	mov	x8, #0x2                   	// #2
 43c:	stur	x0, [x29, #-8]
 440:	str	x8, [sp, #16]
 444:	bl	574 <rcvmsg_create>
 448:	str	x0, [sp, #32]
 44c:	bl	348 <get_max_msg_size>
 450:	ldr	x8, [sp, #16]
 454:	mul	x0, x0, x8
 458:	bl	0 <emalloc>
 45c:	stur	x0, [x29, #-24]
 460:	ldur	x0, [x29, #-8]
 464:	str	x0, [sp, #8]
 468:	bl	348 <get_max_msg_size>
 46c:	ldr	x8, [sp, #16]
 470:	mul	x9, x0, x8
 474:	ldur	x2, [x29, #-24]
 478:	ldr	x0, [sp, #8]
 47c:	mov	w1, w9
 480:	bl	5e4 <read_buf>
 484:	stur	w0, [x29, #-12]
 488:	ldur	w9, [x29, #-12]
 48c:	stur	w9, [x29, #-16]
 490:	ldur	w8, [x29, #-16]
 494:	cmp	w8, #0x0
 498:	cset	w8, le
 49c:	tbnz	w8, #0, 540 <punpack+0x114>
 4a0:	ldur	x0, [x29, #-24]
 4a4:	ldr	x1, [sp, #32]
 4a8:	bl	64c <get_result>
 4ac:	str	w0, [sp, #28]
 4b0:	ldr	w8, [sp, #28]
 4b4:	ldur	w9, [x29, #-16]
 4b8:	subs	w8, w9, w8
 4bc:	stur	w8, [x29, #-16]
 4c0:	ldur	w8, [x29, #-16]
 4c4:	cmp	w8, #0x0
 4c8:	cset	w8, ge  // ge = tcont
 4cc:	tbnz	w8, #0, 4e8 <punpack+0xbc>
 4d0:	adrp	x0, 0 <check_set_max_msg_size>
 4d4:	add	x0, x0, #0x0
 4d8:	adrp	x1, 0 <check_set_max_msg_size>
 4dc:	add	x1, x1, #0x0
 4e0:	mov	w2, #0x1e6                 	// #486
 4e4:	bl	0 <eprintf>
 4e8:	ldur	x0, [x29, #-24]
 4ec:	ldur	x8, [x29, #-24]
 4f0:	ldrsw	x9, [sp, #28]
 4f4:	add	x1, x8, x9
 4f8:	ldursw	x2, [x29, #-16]
 4fc:	bl	0 <memmove>
 500:	ldur	w10, [x29, #-12]
 504:	cmp	w10, #0x0
 508:	cset	w10, le
 50c:	tbnz	w10, #0, 53c <punpack+0x110>
 510:	ldur	x0, [x29, #-8]
 514:	ldr	w1, [sp, #28]
 518:	ldur	x8, [x29, #-24]
 51c:	ldursw	x9, [x29, #-16]
 520:	add	x2, x8, x9
 524:	bl	5e4 <read_buf>
 528:	stur	w0, [x29, #-12]
 52c:	ldur	w10, [x29, #-12]
 530:	ldur	w11, [x29, #-16]
 534:	add	w10, w11, w10
 538:	stur	w10, [x29, #-16]
 53c:	b	490 <punpack+0x64>
 540:	ldur	x0, [x29, #-24]
 544:	bl	0 <free>
 548:	ldr	x8, [sp, #32]
 54c:	ldr	w9, [x8]
 550:	cbnz	w9, 564 <punpack+0x138>
 554:	ldr	x0, [sp, #32]
 558:	bl	0 <free>
 55c:	mov	x8, xzr
 560:	str	x8, [sp, #32]
 564:	ldr	x0, [sp, #32]
 568:	ldp	x29, x30, [sp, #64]
 56c:	add	sp, sp, #0x50
 570:	ret

0000000000000574 <rcvmsg_create>:
 574:	sub	sp, sp, #0x30
 578:	stp	x29, x30, [sp, #32]
 57c:	add	x29, sp, #0x20
 580:	mov	x0, #0x38                  	// #56
 584:	mov	x8, xzr
 588:	mov	w9, #0xffffffff            	// #-1
 58c:	str	x8, [sp, #16]
 590:	str	w9, [sp, #12]
 594:	bl	0 <emalloc>
 598:	stur	x0, [x29, #-8]
 59c:	ldur	x8, [x29, #-8]
 5a0:	str	wzr, [x8]
 5a4:	ldur	x8, [x29, #-8]
 5a8:	str	wzr, [x8, #4]
 5ac:	ldur	x8, [x29, #-8]
 5b0:	ldr	x10, [sp, #16]
 5b4:	str	x10, [x8, #40]
 5b8:	ldur	x8, [x29, #-8]
 5bc:	ldr	w9, [sp, #12]
 5c0:	str	w9, [x8, #48]
 5c4:	ldur	x0, [x29, #-8]
 5c8:	bl	cd4 <reset_rcv_test>
 5cc:	ldur	x0, [x29, #-8]
 5d0:	bl	cfc <reset_rcv_fixture>
 5d4:	ldur	x0, [x29, #-8]
 5d8:	ldp	x29, x30, [sp, #32]
 5dc:	add	sp, sp, #0x30
 5e0:	ret

00000000000005e4 <read_buf>:
 5e4:	sub	sp, sp, #0x30
 5e8:	stp	x29, x30, [sp, #32]
 5ec:	add	x29, sp, #0x20
 5f0:	mov	x8, #0x1                   	// #1
 5f4:	stur	x0, [x29, #-8]
 5f8:	stur	w1, [x29, #-12]
 5fc:	str	x2, [sp, #8]
 600:	ldr	x0, [sp, #8]
 604:	ldursw	x2, [x29, #-12]
 608:	ldur	x3, [x29, #-8]
 60c:	mov	x1, x8
 610:	bl	0 <fread>
 614:	str	w0, [sp, #4]
 618:	ldur	x0, [x29, #-8]
 61c:	bl	0 <ferror>
 620:	cbz	w0, 63c <read_buf+0x58>
 624:	adrp	x0, 0 <check_set_max_msg_size>
 628:	add	x0, x0, #0x0
 62c:	adrp	x1, 0 <check_set_max_msg_size>
 630:	add	x1, x1, #0x0
 634:	mov	w2, #0x15a                 	// #346
 638:	bl	0 <eprintf>
 63c:	ldr	w0, [sp, #4]
 640:	ldp	x29, x30, [sp, #32]
 644:	add	sp, sp, #0x30
 648:	ret

000000000000064c <get_result>:
 64c:	sub	sp, sp, #0x70
 650:	stp	x29, x30, [sp, #96]
 654:	add	x29, sp, #0x60
 658:	mov	w8, #0xffffffff            	// #-1
 65c:	sub	x2, x29, #0x14
 660:	sub	x9, x29, #0x28
 664:	stur	x0, [x29, #-8]
 668:	stur	x1, [x29, #-16]
 66c:	ldur	x0, [x29, #-8]
 670:	mov	x1, x9
 674:	str	w8, [sp, #12]
 678:	bl	108 <upack>
 67c:	stur	w0, [x29, #-44]
 680:	ldur	w8, [x29, #-44]
 684:	ldr	w10, [sp, #12]
 688:	cmp	w8, w10
 68c:	b.ne	6a8 <get_result+0x5c>  // b.any
 690:	adrp	x0, 0 <check_set_max_msg_size>
 694:	add	x0, x0, #0x0
 698:	adrp	x1, 0 <check_set_max_msg_size>
 69c:	add	x1, x1, #0x0
 6a0:	mov	w2, #0x16a                 	// #362
 6a4:	bl	0 <eprintf>
 6a8:	ldur	w8, [x29, #-20]
 6ac:	cbnz	w8, 6cc <get_result+0x80>
 6b0:	sub	x8, x29, #0x28
 6b4:	str	x8, [sp, #40]
 6b8:	ldur	x0, [x29, #-16]
 6bc:	ldr	x8, [sp, #40]
 6c0:	ldr	w1, [x8]
 6c4:	bl	d24 <rcvmsg_update_ctx>
 6c8:	b	7a8 <get_result+0x15c>
 6cc:	ldur	w8, [x29, #-20]
 6d0:	cmp	w8, #0x2
 6d4:	b.ne	714 <get_result+0xc8>  // b.any
 6d8:	sub	x8, x29, #0x28
 6dc:	str	x8, [sp, #32]
 6e0:	ldur	x8, [x29, #-16]
 6e4:	ldr	w9, [x8, #4]
 6e8:	cbnz	w9, 704 <get_result+0xb8>
 6ec:	ldur	x0, [x29, #-16]
 6f0:	ldr	x8, [sp, #32]
 6f4:	ldr	x1, [x8, #8]
 6f8:	ldr	x8, [sp, #32]
 6fc:	ldr	w2, [x8]
 700:	bl	d70 <rcvmsg_update_loc>
 704:	ldr	x8, [sp, #32]
 708:	ldr	x0, [x8, #8]
 70c:	bl	0 <free>
 710:	b	7a8 <get_result+0x15c>
 714:	ldur	w8, [x29, #-20]
 718:	cmp	w8, #0x1
 71c:	b.ne	76c <get_result+0x120>  // b.any
 720:	sub	x8, x29, #0x28
 724:	str	x8, [sp, #24]
 728:	ldur	x8, [x29, #-16]
 72c:	ldr	x8, [x8, #40]
 730:	cbnz	x8, 75c <get_result+0x110>
 734:	ldr	x8, [sp, #24]
 738:	ldr	x0, [x8]
 73c:	bl	0 <strdup>
 740:	ldur	x8, [x29, #-16]
 744:	str	x0, [x8, #40]
 748:	ldur	x8, [x29, #-16]
 74c:	ldr	w9, [x8]
 750:	ldur	x8, [x29, #-16]
 754:	str	w9, [x8, #4]
 758:	b	75c <get_result+0x110>
 75c:	ldr	x8, [sp, #24]
 760:	ldr	x0, [x8]
 764:	bl	0 <free>
 768:	b	7a8 <get_result+0x15c>
 76c:	ldur	w8, [x29, #-20]
 770:	cmp	w8, #0x3
 774:	b.ne	794 <get_result+0x148>  // b.any
 778:	sub	x8, x29, #0x28
 77c:	str	x8, [sp, #16]
 780:	ldr	x8, [sp, #16]
 784:	ldr	w9, [x8]
 788:	ldur	x8, [x29, #-16]
 78c:	str	w9, [x8, #48]
 790:	b	7a8 <get_result+0x15c>
 794:	ldur	w0, [x29, #-20]
 798:	adrp	x1, 0 <check_set_max_msg_size>
 79c:	add	x1, x1, #0x0
 7a0:	mov	w2, #0x194                 	// #404
 7a4:	bl	b0 <check_type>
 7a8:	ldur	w0, [x29, #-44]
 7ac:	ldp	x29, x30, [sp, #96]
 7b0:	add	sp, sp, #0x70
 7b4:	ret

00000000000007b8 <pack_ctx>:
 7b8:	sub	sp, sp, #0x40
 7bc:	stp	x29, x30, [sp, #48]
 7c0:	add	x29, sp, #0x30
 7c4:	mov	w8, #0x8                   	// #8
 7c8:	mov	w9, wzr
 7cc:	add	x10, sp, #0x18
 7d0:	stur	x0, [x29, #-8]
 7d4:	stur	x1, [x29, #-16]
 7d8:	str	w8, [sp, #20]
 7dc:	ldrsw	x0, [sp, #20]
 7e0:	str	w9, [sp, #16]
 7e4:	str	x10, [sp, #8]
 7e8:	bl	0 <emalloc>
 7ec:	str	x0, [sp, #24]
 7f0:	ldur	x10, [x29, #-8]
 7f4:	str	x0, [x10]
 7f8:	ldr	x0, [sp, #8]
 7fc:	ldr	w1, [sp, #16]
 800:	bl	9c4 <pack_type>
 804:	ldur	x10, [x29, #-16]
 808:	ldr	w1, [x10]
 80c:	ldr	x0, [sp, #8]
 810:	bl	9f0 <pack_int>
 814:	ldr	w0, [sp, #20]
 818:	ldp	x29, x30, [sp, #48]
 81c:	add	sp, sp, #0x40
 820:	ret

0000000000000824 <pack_fail>:
 824:	sub	sp, sp, #0x40
 828:	stp	x29, x30, [sp, #48]
 82c:	add	x29, sp, #0x30
 830:	stur	x0, [x29, #-8]
 834:	stur	x1, [x29, #-16]
 838:	ldur	x8, [x29, #-16]
 83c:	ldr	x8, [x8]
 840:	cbz	x8, 858 <pack_fail+0x34>
 844:	ldur	x8, [x29, #-16]
 848:	ldr	x0, [x8]
 84c:	bl	0 <strlen>
 850:	str	x0, [sp, #8]
 854:	b	860 <pack_fail+0x3c>
 858:	mov	x8, xzr
 85c:	str	x8, [sp, #8]
 860:	ldr	x8, [sp, #8]
 864:	add	x8, x8, #0x8
 868:	str	w8, [sp, #20]
 86c:	ldrsw	x0, [sp, #20]
 870:	bl	0 <emalloc>
 874:	add	x9, sp, #0x18
 878:	str	x0, [sp, #24]
 87c:	ldur	x10, [x29, #-8]
 880:	str	x0, [x10]
 884:	mov	x0, x9
 888:	mov	w1, #0x1                   	// #1
 88c:	str	x9, [sp]
 890:	bl	9c4 <pack_type>
 894:	ldur	x9, [x29, #-16]
 898:	ldr	x1, [x9]
 89c:	ldr	x0, [sp]
 8a0:	bl	a74 <pack_str>
 8a4:	ldr	w0, [sp, #20]
 8a8:	ldp	x29, x30, [sp, #48]
 8ac:	add	sp, sp, #0x40
 8b0:	ret

00000000000008b4 <pack_loc>:
 8b4:	sub	sp, sp, #0x40
 8b8:	stp	x29, x30, [sp, #48]
 8bc:	add	x29, sp, #0x30
 8c0:	stur	x0, [x29, #-8]
 8c4:	stur	x1, [x29, #-16]
 8c8:	ldur	x8, [x29, #-16]
 8cc:	ldr	x8, [x8, #8]
 8d0:	cbz	x8, 8e8 <pack_loc+0x34>
 8d4:	ldur	x8, [x29, #-16]
 8d8:	ldr	x0, [x8, #8]
 8dc:	bl	0 <strlen>
 8e0:	str	x0, [sp, #8]
 8e4:	b	8f0 <pack_loc+0x3c>
 8e8:	mov	x8, xzr
 8ec:	str	x8, [sp, #8]
 8f0:	ldr	x8, [sp, #8]
 8f4:	add	x8, x8, #0x8
 8f8:	add	x8, x8, #0x4
 8fc:	str	w8, [sp, #20]
 900:	ldrsw	x0, [sp, #20]
 904:	bl	0 <emalloc>
 908:	add	x9, sp, #0x18
 90c:	str	x0, [sp, #24]
 910:	ldur	x10, [x29, #-8]
 914:	str	x0, [x10]
 918:	mov	x0, x9
 91c:	mov	w1, #0x2                   	// #2
 920:	str	x9, [sp]
 924:	bl	9c4 <pack_type>
 928:	ldur	x9, [x29, #-16]
 92c:	ldr	x1, [x9, #8]
 930:	ldr	x0, [sp]
 934:	bl	a74 <pack_str>
 938:	ldur	x9, [x29, #-16]
 93c:	ldr	w1, [x9]
 940:	ldr	x0, [sp]
 944:	bl	9f0 <pack_int>
 948:	ldr	w0, [sp, #20]
 94c:	ldp	x29, x30, [sp, #48]
 950:	add	sp, sp, #0x40
 954:	ret

0000000000000958 <pack_duration>:
 958:	sub	sp, sp, #0x40
 95c:	stp	x29, x30, [sp, #48]
 960:	add	x29, sp, #0x30
 964:	mov	w8, #0x8                   	// #8
 968:	mov	w9, #0x3                   	// #3
 96c:	add	x10, sp, #0x18
 970:	stur	x0, [x29, #-8]
 974:	stur	x1, [x29, #-16]
 978:	str	w8, [sp, #20]
 97c:	ldrsw	x0, [sp, #20]
 980:	str	w9, [sp, #16]
 984:	str	x10, [sp, #8]
 988:	bl	0 <emalloc>
 98c:	str	x0, [sp, #24]
 990:	ldur	x10, [x29, #-8]
 994:	str	x0, [x10]
 998:	ldr	x0, [sp, #8]
 99c:	ldr	w1, [sp, #16]
 9a0:	bl	9c4 <pack_type>
 9a4:	ldur	x10, [x29, #-16]
 9a8:	ldr	w1, [x10]
 9ac:	ldr	x0, [sp, #8]
 9b0:	bl	9f0 <pack_int>
 9b4:	ldr	w0, [sp, #20]
 9b8:	ldp	x29, x30, [sp, #48]
 9bc:	add	sp, sp, #0x40
 9c0:	ret

00000000000009c4 <pack_type>:
 9c4:	sub	sp, sp, #0x20
 9c8:	stp	x29, x30, [sp, #16]
 9cc:	add	x29, sp, #0x10
 9d0:	str	x0, [sp, #8]
 9d4:	str	w1, [sp, #4]
 9d8:	ldr	x0, [sp, #8]
 9dc:	ldr	w1, [sp, #4]
 9e0:	bl	9f0 <pack_int>
 9e4:	ldp	x29, x30, [sp, #16]
 9e8:	add	sp, sp, #0x20
 9ec:	ret

00000000000009f0 <pack_int>:
 9f0:	sub	sp, sp, #0x20
 9f4:	str	x0, [sp, #24]
 9f8:	str	w1, [sp, #20]
 9fc:	ldr	x8, [sp, #24]
 a00:	ldr	x8, [x8]
 a04:	str	x8, [sp, #8]
 a08:	ldr	w9, [sp, #20]
 a0c:	str	w9, [sp, #4]
 a10:	ldr	w9, [sp, #4]
 a14:	lsr	w9, w9, #24
 a18:	and	w9, w9, #0xff
 a1c:	ldr	x8, [sp, #8]
 a20:	strb	w9, [x8]
 a24:	ldr	w9, [sp, #4]
 a28:	lsr	w9, w9, #16
 a2c:	and	w9, w9, #0xff
 a30:	ldr	x8, [sp, #8]
 a34:	strb	w9, [x8, #1]
 a38:	ldr	w9, [sp, #4]
 a3c:	lsr	w9, w9, #8
 a40:	and	w9, w9, #0xff
 a44:	ldr	x8, [sp, #8]
 a48:	strb	w9, [x8, #2]
 a4c:	ldr	w9, [sp, #4]
 a50:	and	w9, w9, #0xff
 a54:	ldr	x8, [sp, #8]
 a58:	strb	w9, [x8, #3]
 a5c:	ldr	x8, [sp, #24]
 a60:	ldr	x10, [x8]
 a64:	add	x10, x10, #0x4
 a68:	str	x10, [x8]
 a6c:	add	sp, sp, #0x20
 a70:	ret

0000000000000a74 <pack_str>:
 a74:	sub	sp, sp, #0x30
 a78:	stp	x29, x30, [sp, #32]
 a7c:	add	x29, sp, #0x20
 a80:	stur	x0, [x29, #-8]
 a84:	str	x1, [sp, #16]
 a88:	ldr	x8, [sp, #16]
 a8c:	cbnz	x8, a98 <pack_str+0x24>
 a90:	str	wzr, [sp, #12]
 a94:	b	aa4 <pack_str+0x30>
 a98:	ldr	x0, [sp, #16]
 a9c:	bl	0 <strlen>
 aa0:	str	w0, [sp, #12]
 aa4:	ldur	x0, [x29, #-8]
 aa8:	ldr	w1, [sp, #12]
 aac:	bl	9f0 <pack_int>
 ab0:	ldr	w8, [sp, #12]
 ab4:	cmp	w8, #0x0
 ab8:	cset	w8, le
 abc:	tbnz	w8, #0, ae8 <pack_str+0x74>
 ac0:	ldur	x8, [x29, #-8]
 ac4:	ldr	x0, [x8]
 ac8:	ldr	x1, [sp, #16]
 acc:	ldrsw	x2, [sp, #12]
 ad0:	bl	0 <memcpy>
 ad4:	ldrsw	x8, [sp, #12]
 ad8:	ldur	x9, [x29, #-8]
 adc:	ldr	x10, [x9]
 ae0:	add	x8, x10, x8
 ae4:	str	x8, [x9]
 ae8:	ldp	x29, x30, [sp, #32]
 aec:	add	sp, sp, #0x30
 af0:	ret

0000000000000af4 <upack_ctx>:
 af4:	sub	sp, sp, #0x20
 af8:	stp	x29, x30, [sp, #16]
 afc:	add	x29, sp, #0x10
 b00:	str	x0, [sp, #8]
 b04:	str	x1, [sp]
 b08:	ldr	x0, [sp, #8]
 b0c:	bl	bc4 <upack_int>
 b10:	ldr	x8, [sp]
 b14:	str	w0, [x8]
 b18:	ldp	x29, x30, [sp, #16]
 b1c:	add	sp, sp, #0x20
 b20:	ret

0000000000000b24 <upack_fail>:
 b24:	sub	sp, sp, #0x20
 b28:	stp	x29, x30, [sp, #16]
 b2c:	add	x29, sp, #0x10
 b30:	str	x0, [sp, #8]
 b34:	str	x1, [sp]
 b38:	ldr	x0, [sp, #8]
 b3c:	bl	c28 <upack_str>
 b40:	ldr	x8, [sp]
 b44:	str	x0, [x8]
 b48:	ldp	x29, x30, [sp, #16]
 b4c:	add	sp, sp, #0x20
 b50:	ret

0000000000000b54 <upack_loc>:
 b54:	sub	sp, sp, #0x20
 b58:	stp	x29, x30, [sp, #16]
 b5c:	add	x29, sp, #0x10
 b60:	str	x0, [sp, #8]
 b64:	str	x1, [sp]
 b68:	ldr	x0, [sp, #8]
 b6c:	bl	c28 <upack_str>
 b70:	ldr	x8, [sp]
 b74:	str	x0, [x8, #8]
 b78:	ldr	x0, [sp, #8]
 b7c:	bl	bc4 <upack_int>
 b80:	ldr	x8, [sp]
 b84:	str	w0, [x8]
 b88:	ldp	x29, x30, [sp, #16]
 b8c:	add	sp, sp, #0x20
 b90:	ret

0000000000000b94 <upack_duration>:
 b94:	sub	sp, sp, #0x20
 b98:	stp	x29, x30, [sp, #16]
 b9c:	add	x29, sp, #0x10
 ba0:	str	x0, [sp, #8]
 ba4:	str	x1, [sp]
 ba8:	ldr	x0, [sp, #8]
 bac:	bl	bc4 <upack_int>
 bb0:	ldr	x8, [sp]
 bb4:	str	w0, [x8]
 bb8:	ldp	x29, x30, [sp, #16]
 bbc:	add	sp, sp, #0x20
 bc0:	ret

0000000000000bc4 <upack_int>:
 bc4:	sub	sp, sp, #0x20
 bc8:	str	x0, [sp, #24]
 bcc:	ldr	x8, [sp, #24]
 bd0:	ldr	x8, [x8]
 bd4:	str	x8, [sp, #16]
 bd8:	ldr	x8, [sp, #16]
 bdc:	ldrb	w9, [x8]
 be0:	ldr	x8, [sp, #16]
 be4:	ldrb	w10, [x8, #1]
 be8:	lsl	w10, w10, #16
 bec:	orr	w9, w10, w9, lsl #24
 bf0:	ldr	x8, [sp, #16]
 bf4:	ldrb	w10, [x8, #2]
 bf8:	orr	w9, w9, w10, lsl #8
 bfc:	ldr	x8, [sp, #16]
 c00:	ldrb	w10, [x8, #3]
 c04:	orr	w9, w9, w10
 c08:	str	w9, [sp, #12]
 c0c:	ldr	x8, [sp, #24]
 c10:	ldr	x11, [x8]
 c14:	add	x11, x11, #0x4
 c18:	str	x11, [x8]
 c1c:	ldr	w0, [sp, #12]
 c20:	add	sp, sp, #0x20
 c24:	ret

0000000000000c28 <upack_str>:
 c28:	sub	sp, sp, #0x30
 c2c:	stp	x29, x30, [sp, #32]
 c30:	add	x29, sp, #0x20
 c34:	stur	x0, [x29, #-8]
 c38:	ldur	x0, [x29, #-8]
 c3c:	bl	bc4 <upack_int>
 c40:	str	w0, [sp, #12]
 c44:	ldr	w8, [sp, #12]
 c48:	cmp	w8, #0x0
 c4c:	cset	w8, le
 c50:	tbnz	w8, #0, cac <upack_str+0x84>
 c54:	ldr	w8, [sp, #12]
 c58:	add	w8, w8, #0x1
 c5c:	mov	w0, w8
 c60:	sxtw	x0, w0
 c64:	bl	0 <emalloc>
 c68:	str	x0, [sp, #16]
 c6c:	ldr	x0, [sp, #16]
 c70:	ldur	x9, [x29, #-8]
 c74:	ldr	x1, [x9]
 c78:	ldrsw	x2, [sp, #12]
 c7c:	bl	0 <memcpy>
 c80:	ldr	x9, [sp, #16]
 c84:	ldrsw	x10, [sp, #12]
 c88:	add	x9, x9, x10
 c8c:	mov	w8, #0x0                   	// #0
 c90:	strb	w8, [x9]
 c94:	ldrsw	x9, [sp, #12]
 c98:	ldur	x10, [x29, #-8]
 c9c:	ldr	x11, [x10]
 ca0:	add	x9, x11, x9
 ca4:	str	x9, [x10]
 ca8:	b	cc4 <upack_str+0x9c>
 cac:	mov	x0, #0x1                   	// #1
 cb0:	bl	0 <emalloc>
 cb4:	str	x0, [sp, #16]
 cb8:	ldr	x8, [sp, #16]
 cbc:	mov	w9, #0x0                   	// #0
 cc0:	strb	w9, [x8]
 cc4:	ldr	x0, [sp, #16]
 cc8:	ldp	x29, x30, [sp, #32]
 ccc:	add	sp, sp, #0x30
 cd0:	ret

0000000000000cd4 <reset_rcv_test>:
 cd4:	sub	sp, sp, #0x10
 cd8:	mov	w8, #0xffffffff            	// #-1
 cdc:	mov	x9, xzr
 ce0:	str	x0, [sp, #8]
 ce4:	ldr	x10, [sp, #8]
 ce8:	str	w8, [x10, #32]
 cec:	ldr	x10, [sp, #8]
 cf0:	str	x9, [x10, #24]
 cf4:	add	sp, sp, #0x10
 cf8:	ret

0000000000000cfc <reset_rcv_fixture>:
 cfc:	sub	sp, sp, #0x10
 d00:	mov	w8, #0xffffffff            	// #-1
 d04:	mov	x9, xzr
 d08:	str	x0, [sp, #8]
 d0c:	ldr	x10, [sp, #8]
 d10:	str	w8, [x10, #16]
 d14:	ldr	x10, [sp, #8]
 d18:	str	x9, [x10, #8]
 d1c:	add	sp, sp, #0x10
 d20:	ret

0000000000000d24 <rcvmsg_update_ctx>:
 d24:	sub	sp, sp, #0x20
 d28:	stp	x29, x30, [sp, #16]
 d2c:	add	x29, sp, #0x10
 d30:	str	x0, [sp, #8]
 d34:	str	w1, [sp, #4]
 d38:	ldr	x8, [sp, #8]
 d3c:	ldr	w9, [x8]
 d40:	cbz	w9, d58 <rcvmsg_update_ctx+0x34>
 d44:	ldr	x8, [sp, #8]
 d48:	ldr	x0, [x8, #8]
 d4c:	bl	0 <free>
 d50:	ldr	x0, [sp, #8]
 d54:	bl	cfc <reset_rcv_fixture>
 d58:	ldr	w8, [sp, #4]
 d5c:	ldr	x9, [sp, #8]
 d60:	str	w8, [x9]
 d64:	ldp	x29, x30, [sp, #16]
 d68:	add	sp, sp, #0x20
 d6c:	ret

0000000000000d70 <rcvmsg_update_loc>:
 d70:	sub	sp, sp, #0x30
 d74:	stp	x29, x30, [sp, #32]
 d78:	add	x29, sp, #0x20
 d7c:	stur	x0, [x29, #-8]
 d80:	str	x1, [sp, #16]
 d84:	str	w2, [sp, #12]
 d88:	ldur	x8, [x29, #-8]
 d8c:	ldr	w9, [x8]
 d90:	cmp	w9, #0x2
 d94:	b.ne	dc4 <rcvmsg_update_loc+0x54>  // b.any
 d98:	ldur	x8, [x29, #-8]
 d9c:	ldr	x0, [x8, #24]
 da0:	bl	0 <free>
 da4:	ldr	w9, [sp, #12]
 da8:	ldur	x8, [x29, #-8]
 dac:	str	w9, [x8, #32]
 db0:	ldr	x0, [sp, #16]
 db4:	bl	0 <strdup>
 db8:	ldur	x8, [x29, #-8]
 dbc:	str	x0, [x8, #24]
 dc0:	b	dec <rcvmsg_update_loc+0x7c>
 dc4:	ldur	x8, [x29, #-8]
 dc8:	ldr	x0, [x8, #8]
 dcc:	bl	0 <free>
 dd0:	ldr	w9, [sp, #12]
 dd4:	ldur	x8, [x29, #-8]
 dd8:	str	w9, [x8, #16]
 ddc:	ldr	x0, [sp, #16]
 de0:	bl	0 <strdup>
 de4:	ldur	x8, [x29, #-8]
 de8:	str	x0, [x8, #8]
 dec:	ldp	x29, x30, [sp, #32]
 df0:	add	sp, sp, #0x30
 df4:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	adrp	x8, 0 <stdout>
  10:	add	x8, x8, #0x0
  14:	str	x0, [sp, #8]
  18:	str	w1, [sp, #4]
  1c:	ldr	x0, [x8]
  20:	ldr	x1, [sp, #8]
  24:	ldr	w2, [sp, #4]
  28:	bl	38 <srunner_fprint>
  2c:	ldp	x29, x30, [sp, #16]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <srunner_fprint>:
  38:	sub	sp, sp, #0x30
  3c:	stp	x29, x30, [sp, #32]
  40:	add	x29, sp, #0x20
  44:	stur	x0, [x29, #-8]
  48:	str	x1, [sp, #16]
  4c:	str	w2, [sp, #12]
  50:	ldr	w8, [sp, #12]
  54:	cmp	w8, #0x4
  58:	b.ne	64 <srunner_fprint+0x2c>  // b.any
  5c:	bl	90 <get_env_printmode>
  60:	str	w0, [sp, #12]
  64:	ldur	x0, [x29, #-8]
  68:	ldr	x1, [sp, #16]
  6c:	ldr	w2, [sp, #12]
  70:	bl	134 <srunner_fprint_summary>
  74:	ldur	x0, [x29, #-8]
  78:	ldr	x1, [sp, #16]
  7c:	ldr	w2, [sp, #12]
  80:	bl	190 <srunner_fprint_results>
  84:	ldp	x29, x30, [sp, #32]
  88:	add	sp, sp, #0x30
  8c:	ret

0000000000000090 <get_env_printmode>:
  90:	sub	sp, sp, #0x20
  94:	stp	x29, x30, [sp, #16]
  98:	add	x29, sp, #0x10
  9c:	adrp	x0, 0 <srunner_print>
  a0:	add	x0, x0, #0x0
  a4:	bl	0 <getenv>
  a8:	str	x0, [sp]
  ac:	ldr	x8, [sp]
  b0:	cbnz	x8, c0 <get_env_printmode+0x30>
  b4:	mov	w8, #0x2                   	// #2
  b8:	stur	w8, [x29, #-4]
  bc:	b	124 <get_env_printmode+0x94>
  c0:	ldr	x0, [sp]
  c4:	adrp	x1, 0 <srunner_print>
  c8:	add	x1, x1, #0x0
  cc:	bl	0 <strcmp>
  d0:	cbnz	w0, dc <get_env_printmode+0x4c>
  d4:	stur	wzr, [x29, #-4]
  d8:	b	124 <get_env_printmode+0x94>
  dc:	ldr	x0, [sp]
  e0:	adrp	x1, 0 <srunner_print>
  e4:	add	x1, x1, #0x0
  e8:	bl	0 <strcmp>
  ec:	cbnz	w0, fc <get_env_printmode+0x6c>
  f0:	mov	w8, #0x1                   	// #1
  f4:	stur	w8, [x29, #-4]
  f8:	b	124 <get_env_printmode+0x94>
  fc:	ldr	x0, [sp]
 100:	adrp	x1, 0 <srunner_print>
 104:	add	x1, x1, #0x0
 108:	bl	0 <strcmp>
 10c:	cbnz	w0, 11c <get_env_printmode+0x8c>
 110:	mov	w8, #0x3                   	// #3
 114:	stur	w8, [x29, #-4]
 118:	b	124 <get_env_printmode+0x94>
 11c:	mov	w8, #0x2                   	// #2
 120:	stur	w8, [x29, #-4]
 124:	ldur	w0, [x29, #-4]
 128:	ldp	x29, x30, [sp, #16]
 12c:	add	sp, sp, #0x20
 130:	ret

0000000000000134 <srunner_fprint_summary>:
 134:	sub	sp, sp, #0x30
 138:	stp	x29, x30, [sp, #32]
 13c:	add	x29, sp, #0x20
 140:	stur	x0, [x29, #-8]
 144:	str	x1, [sp, #16]
 148:	str	w2, [sp, #12]
 14c:	ldr	w8, [sp, #12]
 150:	cmp	w8, #0x1
 154:	b.cc	184 <srunner_fprint_summary+0x50>  // b.lo, b.ul, b.last
 158:	ldr	x0, [sp, #16]
 15c:	bl	0 <sr_stat_str>
 160:	str	x0, [sp]
 164:	ldur	x0, [x29, #-8]
 168:	ldr	x2, [sp]
 16c:	adrp	x1, 0 <srunner_print>
 170:	add	x1, x1, #0x0
 174:	bl	0 <fprintf>
 178:	ldr	x8, [sp]
 17c:	mov	x0, x8
 180:	bl	0 <free>
 184:	ldp	x29, x30, [sp, #32]
 188:	add	sp, sp, #0x30
 18c:	ret

0000000000000190 <srunner_fprint_results>:
 190:	sub	sp, sp, #0x40
 194:	stp	x29, x30, [sp, #48]
 198:	add	x29, sp, #0x30
 19c:	stur	x0, [x29, #-8]
 1a0:	stur	x1, [x29, #-16]
 1a4:	stur	w2, [x29, #-20]
 1a8:	ldur	x8, [x29, #-16]
 1ac:	ldr	x8, [x8, #16]
 1b0:	str	x8, [sp, #16]
 1b4:	ldr	x0, [sp, #16]
 1b8:	bl	0 <check_list_front>
 1bc:	ldr	x0, [sp, #16]
 1c0:	bl	0 <check_list_at_end>
 1c4:	cmp	w0, #0x0
 1c8:	cset	w8, ne  // ne = any
 1cc:	eor	w8, w8, #0x1
 1d0:	tbnz	w8, #0, 1d8 <srunner_fprint_results+0x48>
 1d4:	b	200 <srunner_fprint_results+0x70>
 1d8:	ldr	x0, [sp, #16]
 1dc:	bl	0 <check_list_val>
 1e0:	str	x0, [sp, #8]
 1e4:	ldur	x0, [x29, #-8]
 1e8:	ldr	x1, [sp, #8]
 1ec:	ldur	w2, [x29, #-20]
 1f0:	bl	398 <tr_fprint>
 1f4:	ldr	x0, [sp, #16]
 1f8:	bl	0 <check_list_advance>
 1fc:	b	1bc <srunner_fprint_results+0x2c>
 200:	ldp	x29, x30, [sp, #48]
 204:	add	sp, sp, #0x40
 208:	ret

000000000000020c <fprint_xml_esc>:
 20c:	sub	sp, sp, #0x30
 210:	stp	x29, x30, [sp, #32]
 214:	add	x29, sp, #0x20
 218:	stur	x0, [x29, #-8]
 21c:	str	x1, [sp, #16]
 220:	ldr	x8, [sp, #16]
 224:	ldrb	w9, [x8]
 228:	cbz	w9, 38c <fprint_xml_esc+0x180>
 22c:	ldr	x8, [sp, #16]
 230:	ldrb	w9, [x8]
 234:	strb	w9, [sp, #15]
 238:	ldrb	w9, [sp, #15]
 23c:	cmp	w9, #0x22
 240:	b.eq	274 <fprint_xml_esc+0x68>  // b.none
 244:	ldrb	w8, [sp, #15]
 248:	cmp	w8, #0x27
 24c:	b.eq	274 <fprint_xml_esc+0x68>  // b.none
 250:	ldrb	w8, [sp, #15]
 254:	cmp	w8, #0x3c
 258:	b.eq	274 <fprint_xml_esc+0x68>  // b.none
 25c:	ldrb	w8, [sp, #15]
 260:	cmp	w8, #0x3e
 264:	b.eq	274 <fprint_xml_esc+0x68>  // b.none
 268:	ldrb	w8, [sp, #15]
 26c:	cmp	w8, #0x26
 270:	b.ne	310 <fprint_xml_esc+0x104>  // b.any
 274:	ldrb	w8, [sp, #15]
 278:	subs	w8, w8, #0x22
 27c:	mov	w9, w8
 280:	ubfx	x9, x9, #0, #32
 284:	cmp	x9, #0x1c
 288:	str	x9, [sp]
 28c:	b.hi	30c <fprint_xml_esc+0x100>  // b.pmore
 290:	adrp	x8, 0 <srunner_print>
 294:	add	x8, x8, #0x0
 298:	ldr	x11, [sp]
 29c:	ldrsw	x10, [x8, x11, lsl #2]
 2a0:	add	x9, x8, x10
 2a4:	br	x9
 2a8:	ldur	x1, [x29, #-8]
 2ac:	adrp	x0, 0 <srunner_print>
 2b0:	add	x0, x0, #0x0
 2b4:	bl	0 <fputs>
 2b8:	b	30c <fprint_xml_esc+0x100>
 2bc:	ldur	x1, [x29, #-8]
 2c0:	adrp	x0, 0 <srunner_print>
 2c4:	add	x0, x0, #0x0
 2c8:	bl	0 <fputs>
 2cc:	b	30c <fprint_xml_esc+0x100>
 2d0:	ldur	x1, [x29, #-8]
 2d4:	adrp	x0, 0 <srunner_print>
 2d8:	add	x0, x0, #0x0
 2dc:	bl	0 <fputs>
 2e0:	b	30c <fprint_xml_esc+0x100>
 2e4:	ldur	x1, [x29, #-8]
 2e8:	adrp	x0, 0 <srunner_print>
 2ec:	add	x0, x0, #0x0
 2f0:	bl	0 <fputs>
 2f4:	b	30c <fprint_xml_esc+0x100>
 2f8:	ldur	x1, [x29, #-8]
 2fc:	adrp	x0, 0 <srunner_print>
 300:	add	x0, x0, #0x0
 304:	bl	0 <fputs>
 308:	b	30c <fprint_xml_esc+0x100>
 30c:	b	37c <fprint_xml_esc+0x170>
 310:	ldrb	w8, [sp, #15]
 314:	cmp	w8, #0x20
 318:	b.lt	338 <fprint_xml_esc+0x12c>  // b.tstop
 31c:	ldrb	w8, [sp, #15]
 320:	cmp	w8, #0x7e
 324:	b.gt	338 <fprint_xml_esc+0x12c>
 328:	ldrb	w0, [sp, #15]
 32c:	ldur	x1, [x29, #-8]
 330:	bl	0 <fputc>
 334:	b	37c <fprint_xml_esc+0x170>
 338:	ldrb	w8, [sp, #15]
 33c:	cmp	w8, #0x9
 340:	b.eq	368 <fprint_xml_esc+0x15c>  // b.none
 344:	ldrb	w8, [sp, #15]
 348:	cmp	w8, #0xa
 34c:	b.eq	368 <fprint_xml_esc+0x15c>  // b.none
 350:	ldrb	w8, [sp, #15]
 354:	cmp	w8, #0xd
 358:	b.eq	368 <fprint_xml_esc+0x15c>  // b.none
 35c:	ldrb	w8, [sp, #15]
 360:	cmp	w8, #0x20
 364:	b.lt	37c <fprint_xml_esc+0x170>  // b.tstop
 368:	ldur	x0, [x29, #-8]
 36c:	ldrb	w2, [sp, #15]
 370:	adrp	x1, 0 <srunner_print>
 374:	add	x1, x1, #0x0
 378:	bl	0 <fprintf>
 37c:	ldr	x8, [sp, #16]
 380:	add	x8, x8, #0x1
 384:	str	x8, [sp, #16]
 388:	b	220 <fprint_xml_esc+0x14>
 38c:	ldp	x29, x30, [sp, #32]
 390:	add	sp, sp, #0x30
 394:	ret

0000000000000398 <tr_fprint>:
 398:	sub	sp, sp, #0x30
 39c:	stp	x29, x30, [sp, #32]
 3a0:	add	x29, sp, #0x20
 3a4:	stur	x0, [x29, #-8]
 3a8:	str	x1, [sp, #16]
 3ac:	str	w2, [sp, #12]
 3b0:	ldr	w8, [sp, #12]
 3b4:	cmp	w8, #0x4
 3b8:	b.ne	3c4 <tr_fprint+0x2c>  // b.any
 3bc:	bl	90 <get_env_printmode>
 3c0:	str	w0, [sp, #12]
 3c4:	ldr	w8, [sp, #12]
 3c8:	cmp	w8, #0x3
 3cc:	b.cc	3e0 <tr_fprint+0x48>  // b.lo, b.ul, b.last
 3d0:	ldr	x8, [sp, #16]
 3d4:	ldr	w9, [x8]
 3d8:	cmp	w9, #0x1
 3dc:	b.eq	3fc <tr_fprint+0x64>  // b.none
 3e0:	ldr	x8, [sp, #16]
 3e4:	ldr	w9, [x8]
 3e8:	cmp	w9, #0x1
 3ec:	b.eq	428 <tr_fprint+0x90>  // b.none
 3f0:	ldr	w8, [sp, #12]
 3f4:	cmp	w8, #0x2
 3f8:	b.cc	428 <tr_fprint+0x90>  // b.lo, b.ul, b.last
 3fc:	ldr	x0, [sp, #16]
 400:	bl	0 <tr_str>
 404:	str	x0, [sp]
 408:	ldur	x0, [x29, #-8]
 40c:	ldr	x2, [sp]
 410:	adrp	x1, 0 <srunner_print>
 414:	add	x1, x1, #0x0
 418:	bl	0 <fprintf>
 41c:	ldr	x8, [sp]
 420:	mov	x0, x8
 424:	bl	0 <free>
 428:	ldp	x29, x30, [sp, #32]
 42c:	add	sp, sp, #0x30
 430:	ret

0000000000000434 <tr_xmlprint>:
 434:	sub	sp, sp, #0x90
 438:	stp	x29, x30, [sp, #128]
 43c:	add	x29, sp, #0x80
 440:	mov	x8, xzr
 444:	adrp	x9, 0 <srunner_print>
 448:	add	x9, x9, #0x0
 44c:	stur	x0, [x29, #-8]
 450:	stur	x1, [x29, #-16]
 454:	stur	w2, [x29, #-20]
 458:	stur	x8, [x29, #-40]
 45c:	stur	x8, [x29, #-48]
 460:	stur	x8, [x29, #-56]
 464:	ldur	x8, [x29, #-16]
 468:	ldr	w10, [x8]
 46c:	subs	w10, w10, #0x0
 470:	mov	w8, w10
 474:	ubfx	x8, x8, #0, #32
 478:	cmp	x8, #0x3
 47c:	str	x9, [sp, #64]
 480:	str	x8, [sp, #56]
 484:	b.hi	4f4 <tr_xmlprint+0xc0>  // b.pmore
 488:	adrp	x8, 0 <srunner_print>
 48c:	add	x8, x8, #0x0
 490:	ldr	x11, [sp, #56]
 494:	ldrsw	x10, [x8, x11, lsl #2]
 498:	add	x9, x8, x10
 49c:	br	x9
 4a0:	sub	x0, x29, #0x1e
 4a4:	mov	x1, #0xa                   	// #10
 4a8:	ldr	x2, [sp, #64]
 4ac:	adrp	x3, 0 <srunner_print>
 4b0:	add	x3, x3, #0x0
 4b4:	bl	0 <snprintf>
 4b8:	b	4f8 <tr_xmlprint+0xc4>
 4bc:	sub	x0, x29, #0x1e
 4c0:	mov	x1, #0xa                   	// #10
 4c4:	ldr	x2, [sp, #64]
 4c8:	adrp	x3, 0 <srunner_print>
 4cc:	add	x3, x3, #0x0
 4d0:	bl	0 <snprintf>
 4d4:	b	4f8 <tr_xmlprint+0xc4>
 4d8:	sub	x0, x29, #0x1e
 4dc:	mov	x1, #0xa                   	// #10
 4e0:	ldr	x2, [sp, #64]
 4e4:	adrp	x3, 0 <srunner_print>
 4e8:	add	x3, x3, #0x0
 4ec:	bl	0 <snprintf>
 4f0:	b	4f8 <tr_xmlprint+0xc4>
 4f4:	bl	0 <abort>
 4f8:	ldur	x8, [x29, #-16]
 4fc:	ldr	x8, [x8, #8]
 500:	cbz	x8, 598 <tr_xmlprint+0x164>
 504:	ldur	x8, [x29, #-16]
 508:	ldr	x0, [x8, #8]
 50c:	mov	w1, #0x2f                  	// #47
 510:	bl	0 <strrchr>
 514:	stur	x0, [x29, #-56]
 518:	ldur	x8, [x29, #-56]
 51c:	cbnz	x8, 534 <tr_xmlprint+0x100>
 520:	ldur	x8, [x29, #-16]
 524:	ldr	x0, [x8, #8]
 528:	mov	w1, #0x5c                  	// #92
 52c:	bl	0 <strrchr>
 530:	stur	x0, [x29, #-56]
 534:	ldur	x8, [x29, #-56]
 538:	cbnz	x8, 55c <tr_xmlprint+0x128>
 53c:	adrp	x0, 0 <srunner_print>
 540:	add	x0, x0, #0x0
 544:	bl	0 <strdup>
 548:	stur	x0, [x29, #-40]
 54c:	ldur	x8, [x29, #-16]
 550:	ldr	x8, [x8, #8]
 554:	stur	x8, [x29, #-48]
 558:	b	598 <tr_xmlprint+0x164>
 55c:	ldur	x8, [x29, #-16]
 560:	ldr	x0, [x8, #8]
 564:	bl	0 <strdup>
 568:	stur	x0, [x29, #-40]
 56c:	ldur	x8, [x29, #-40]
 570:	ldur	x9, [x29, #-56]
 574:	ldur	x10, [x29, #-16]
 578:	ldr	x10, [x10, #8]
 57c:	subs	x9, x9, x10
 580:	add	x8, x8, x9
 584:	mov	w11, #0x0                   	// #0
 588:	strb	w11, [x8]
 58c:	ldur	x8, [x29, #-56]
 590:	add	x8, x8, #0x1
 594:	stur	x8, [x29, #-48]
 598:	ldur	x0, [x29, #-8]
 59c:	adrp	x1, 0 <srunner_print>
 5a0:	add	x1, x1, #0x0
 5a4:	sub	x2, x29, #0x1e
 5a8:	bl	0 <fprintf>
 5ac:	ldur	x8, [x29, #-8]
 5b0:	ldur	x9, [x29, #-40]
 5b4:	str	x8, [sp, #48]
 5b8:	cbnz	x9, 5cc <tr_xmlprint+0x198>
 5bc:	adrp	x8, 0 <srunner_print>
 5c0:	add	x8, x8, #0x0
 5c4:	str	x8, [sp, #40]
 5c8:	b	5d4 <tr_xmlprint+0x1a0>
 5cc:	ldur	x8, [x29, #-40]
 5d0:	str	x8, [sp, #40]
 5d4:	ldr	x8, [sp, #40]
 5d8:	ldr	x0, [sp, #48]
 5dc:	adrp	x1, 0 <srunner_print>
 5e0:	add	x1, x1, #0x0
 5e4:	mov	x2, x8
 5e8:	bl	0 <fprintf>
 5ec:	ldur	x8, [x29, #-8]
 5f0:	ldur	x9, [x29, #-48]
 5f4:	str	x8, [sp, #32]
 5f8:	cbnz	x9, 60c <tr_xmlprint+0x1d8>
 5fc:	adrp	x8, 0 <srunner_print>
 600:	add	x8, x8, #0x0
 604:	str	x8, [sp, #24]
 608:	b	614 <tr_xmlprint+0x1e0>
 60c:	ldur	x8, [x29, #-48]
 610:	str	x8, [sp, #24]
 614:	ldr	x8, [sp, #24]
 618:	ldur	x9, [x29, #-16]
 61c:	ldr	w3, [x9, #16]
 620:	ldr	x0, [sp, #32]
 624:	adrp	x1, 0 <srunner_print>
 628:	add	x1, x1, #0x0
 62c:	mov	x2, x8
 630:	bl	0 <fprintf>
 634:	ldur	x8, [x29, #-8]
 638:	ldur	x9, [x29, #-16]
 63c:	ldr	x2, [x9, #40]
 640:	mov	x0, x8
 644:	adrp	x1, 0 <srunner_print>
 648:	add	x1, x1, #0x0
 64c:	bl	0 <fprintf>
 650:	ldur	x8, [x29, #-8]
 654:	ldur	x9, [x29, #-16]
 658:	ldr	w2, [x9, #20]
 65c:	mov	x0, x8
 660:	adrp	x1, 0 <srunner_print>
 664:	add	x1, x1, #0x0
 668:	bl	0 <fprintf>
 66c:	ldur	x8, [x29, #-8]
 670:	ldur	x9, [x29, #-16]
 674:	ldr	w10, [x9, #24]
 678:	cmp	w10, #0x0
 67c:	cset	w10, ge  // ge = tcont
 680:	str	x8, [sp, #16]
 684:	tbnz	w10, #0, 694 <tr_xmlprint+0x260>
 688:	mov	w8, #0xffffffff            	// #-1
 68c:	str	w8, [sp, #12]
 690:	b	6ac <tr_xmlprint+0x278>
 694:	ldur	x8, [x29, #-16]
 698:	ldr	w9, [x8, #24]
 69c:	mov	w10, #0x4240                	// #16960
 6a0:	movk	w10, #0xf, lsl #16
 6a4:	sdiv	w9, w9, w10
 6a8:	str	w9, [sp, #12]
 6ac:	ldr	w8, [sp, #12]
 6b0:	ldur	x9, [x29, #-16]
 6b4:	ldr	w10, [x9, #24]
 6b8:	cmp	w10, #0x0
 6bc:	cset	w10, ge  // ge = tcont
 6c0:	str	w8, [sp, #8]
 6c4:	tbnz	w10, #0, 6d4 <tr_xmlprint+0x2a0>
 6c8:	mov	w8, wzr
 6cc:	str	w8, [sp, #4]
 6d0:	b	6f4 <tr_xmlprint+0x2c0>
 6d4:	ldur	x8, [x29, #-16]
 6d8:	ldr	w9, [x8, #24]
 6dc:	mov	w10, #0x4240                	// #16960
 6e0:	movk	w10, #0xf, lsl #16
 6e4:	sdiv	w11, w9, w10
 6e8:	mul	w10, w11, w10
 6ec:	subs	w9, w9, w10
 6f0:	str	w9, [sp, #4]
 6f4:	ldr	w8, [sp, #4]
 6f8:	ldr	x0, [sp, #16]
 6fc:	adrp	x1, 0 <srunner_print>
 700:	add	x1, x1, #0x0
 704:	ldr	w2, [sp, #8]
 708:	mov	w3, w8
 70c:	bl	0 <fprintf>
 710:	ldur	x9, [x29, #-8]
 714:	mov	x0, x9
 718:	adrp	x1, 0 <srunner_print>
 71c:	add	x1, x1, #0x0
 720:	bl	0 <fprintf>
 724:	ldur	x9, [x29, #-8]
 728:	ldur	x10, [x29, #-16]
 72c:	ldr	x1, [x10, #32]
 730:	mov	x0, x9
 734:	bl	20c <fprint_xml_esc>
 738:	ldur	x0, [x29, #-8]
 73c:	adrp	x1, 0 <srunner_print>
 740:	add	x1, x1, #0x0
 744:	bl	0 <fprintf>
 748:	ldur	x9, [x29, #-8]
 74c:	mov	x0, x9
 750:	adrp	x1, 0 <srunner_print>
 754:	add	x1, x1, #0x0
 758:	bl	0 <fprintf>
 75c:	ldur	x9, [x29, #-8]
 760:	ldur	x10, [x29, #-16]
 764:	ldr	x1, [x10, #48]
 768:	mov	x0, x9
 76c:	bl	20c <fprint_xml_esc>
 770:	ldur	x0, [x29, #-8]
 774:	adrp	x1, 0 <srunner_print>
 778:	add	x1, x1, #0x0
 77c:	bl	0 <fprintf>
 780:	ldur	x9, [x29, #-8]
 784:	mov	x0, x9
 788:	adrp	x1, 0 <srunner_print>
 78c:	add	x1, x1, #0x0
 790:	bl	0 <fprintf>
 794:	ldur	x9, [x29, #-40]
 798:	mov	x0, x9
 79c:	bl	0 <free>
 7a0:	ldp	x29, x30, [sp, #128]
 7a4:	add	sp, sp, #0x90
 7a8:	ret

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_fork_status>:
       0:	sub	sp, sp, #0x30
       4:	stp	x29, x30, [sp, #32]
       8:	add	x29, sp, #0x20
       c:	str	x0, [sp, #16]
      10:	ldr	x8, [sp, #16]
      14:	ldr	w9, [x8, #56]
      18:	cbnz	w9, 6c <srunner_fork_status+0x6c>
      1c:	adrp	x0, 0 <srunner_fork_status>
      20:	add	x0, x0, #0x0
      24:	bl	0 <getenv>
      28:	str	x0, [sp, #8]
      2c:	ldr	x8, [sp, #8]
      30:	cbnz	x8, 40 <srunner_fork_status+0x40>
      34:	mov	w8, #0x1                   	// #1
      38:	stur	w8, [x29, #-4]
      3c:	b	78 <srunner_fork_status+0x78>
      40:	ldr	x0, [sp, #8]
      44:	adrp	x1, 0 <srunner_fork_status>
      48:	add	x1, x1, #0x0
      4c:	bl	0 <strcmp>
      50:	cbnz	w0, 60 <srunner_fork_status+0x60>
      54:	mov	w8, #0x2                   	// #2
      58:	stur	w8, [x29, #-4]
      5c:	b	78 <srunner_fork_status+0x78>
      60:	mov	w8, #0x1                   	// #1
      64:	stur	w8, [x29, #-4]
      68:	b	78 <srunner_fork_status+0x78>
      6c:	ldr	x8, [sp, #16]
      70:	ldr	w9, [x8, #56]
      74:	stur	w9, [x29, #-4]
      78:	ldur	w0, [x29, #-4]
      7c:	ldp	x29, x30, [sp, #32]
      80:	add	sp, sp, #0x30
      84:	ret

0000000000000088 <srunner_set_fork_status>:
      88:	sub	sp, sp, #0x10
      8c:	str	x0, [sp, #8]
      90:	str	w1, [sp, #4]
      94:	ldr	w8, [sp, #4]
      98:	ldr	x9, [sp, #8]
      9c:	str	w8, [x9, #56]
      a0:	add	sp, sp, #0x10
      a4:	ret

00000000000000a8 <srunner_run_all>:
      a8:	sub	sp, sp, #0x20
      ac:	stp	x29, x30, [sp, #16]
      b0:	add	x29, sp, #0x10
      b4:	mov	x8, xzr
      b8:	str	x0, [sp, #8]
      bc:	str	w1, [sp, #4]
      c0:	ldr	x0, [sp, #8]
      c4:	ldr	w3, [sp, #4]
      c8:	mov	x1, x8
      cc:	mov	x2, x8
      d0:	bl	e0 <srunner_run>
      d4:	ldp	x29, x30, [sp, #16]
      d8:	add	sp, sp, #0x20
      dc:	ret

00000000000000e0 <srunner_run>:
      e0:	sub	sp, sp, #0x30
      e4:	stp	x29, x30, [sp, #32]
      e8:	add	x29, sp, #0x20
      ec:	mov	x8, xzr
      f0:	stur	x0, [x29, #-8]
      f4:	str	x1, [sp, #16]
      f8:	str	x2, [sp, #8]
      fc:	str	w3, [sp, #4]
     100:	ldur	x0, [x29, #-8]
     104:	ldr	x1, [sp, #16]
     108:	ldr	x2, [sp, #8]
     10c:	ldr	w5, [sp, #4]
     110:	mov	x3, x8
     114:	mov	x4, x8
     118:	bl	128 <srunner_run_tagged>
     11c:	ldp	x29, x30, [sp, #32]
     120:	add	sp, sp, #0x30
     124:	ret

0000000000000128 <srunner_run_tagged>:
     128:	sub	sp, sp, #0xb0
     12c:	stp	x29, x30, [sp, #160]
     130:	add	x29, sp, #0xa0
     134:	adrp	x8, 0 <srunner_fork_status>
     138:	add	x8, x8, #0x0
     13c:	adrp	x9, 0 <srunner_fork_status>
     140:	add	x9, x9, #0x0
     144:	adrp	x10, 0 <srunner_fork_status>
     148:	add	x10, x10, #0x0
     14c:	adrp	x11, 0 <srunner_fork_status>
     150:	add	x11, x11, #0x0
     154:	stur	x0, [x29, #-8]
     158:	stur	x1, [x29, #-16]
     15c:	stur	x2, [x29, #-24]
     160:	stur	x3, [x29, #-32]
     164:	stur	x4, [x29, #-40]
     168:	stur	w5, [x29, #-44]
     16c:	ldur	x12, [x29, #-24]
     170:	stur	x8, [x29, #-56]
     174:	stur	x9, [x29, #-64]
     178:	stur	x10, [x29, #-72]
     17c:	str	x11, [sp, #80]
     180:	cbnz	x12, 194 <srunner_run_tagged+0x6c>
     184:	adrp	x0, 0 <srunner_fork_status>
     188:	add	x0, x0, #0x0
     18c:	bl	0 <getenv>
     190:	stur	x0, [x29, #-24]
     194:	ldur	x8, [x29, #-16]
     198:	cbnz	x8, 1ac <srunner_run_tagged+0x84>
     19c:	adrp	x0, 0 <srunner_fork_status>
     1a0:	add	x0, x0, #0x0
     1a4:	bl	0 <getenv>
     1a8:	stur	x0, [x29, #-16]
     1ac:	ldur	x8, [x29, #-32]
     1b0:	cbnz	x8, 1c4 <srunner_run_tagged+0x9c>
     1b4:	adrp	x0, 0 <srunner_fork_status>
     1b8:	add	x0, x0, #0x0
     1bc:	bl	0 <getenv>
     1c0:	stur	x0, [x29, #-32]
     1c4:	ldur	x8, [x29, #-40]
     1c8:	cbnz	x8, 1dc <srunner_run_tagged+0xb4>
     1cc:	adrp	x0, 0 <srunner_fork_status>
     1d0:	add	x0, x0, #0x0
     1d4:	bl	0 <getenv>
     1d8:	stur	x0, [x29, #-40]
     1dc:	ldur	x8, [x29, #-8]
     1e0:	cbnz	x8, 1e8 <srunner_run_tagged+0xc0>
     1e4:	b	368 <srunner_run_tagged+0x240>
     1e8:	ldur	w8, [x29, #-44]
     1ec:	cmp	w8, #0x5
     1f0:	b.cc	210 <srunner_run_tagged+0xe8>  // b.lo, b.ul, b.last
     1f4:	ldur	w3, [x29, #-44]
     1f8:	adrp	x0, 0 <srunner_fork_status>
     1fc:	add	x0, x0, #0x0
     200:	adrp	x1, 0 <srunner_fork_status>
     204:	add	x1, x1, #0x0
     208:	mov	w2, #0x31e                 	// #798
     20c:	bl	0 <eprintf>
     210:	ldur	x0, [x29, #-56]
     214:	mov	w8, wzr
     218:	mov	w1, w8
     21c:	mov	x9, #0x98                  	// #152
     220:	mov	x2, x9
     224:	str	w8, [sp, #76]
     228:	str	x9, [sp, #64]
     22c:	bl	0 <memset>
     230:	ldur	x9, [x29, #-64]
     234:	ldur	x10, [x29, #-56]
     238:	str	x9, [x10]
     23c:	mov	w8, #0xe                   	// #14
     240:	mov	w0, w8
     244:	mov	x1, x10
     248:	adrp	x11, 0 <srunner_fork_status>
     24c:	add	x11, x11, #0x0
     250:	mov	x2, x11
     254:	str	w8, [sp, #60]
     258:	str	x11, [sp, #48]
     25c:	bl	0 <sigaction>
     260:	ldur	x9, [x29, #-72]
     264:	mov	x0, x9
     268:	ldr	w8, [sp, #76]
     26c:	mov	w1, w8
     270:	ldr	x2, [sp, #64]
     274:	bl	0 <memset>
     278:	ldur	x9, [x29, #-64]
     27c:	ldur	x10, [x29, #-72]
     280:	str	x9, [x10]
     284:	mov	w8, #0x2                   	// #2
     288:	mov	w0, w8
     28c:	mov	x1, x10
     290:	adrp	x11, 0 <srunner_fork_status>
     294:	add	x11, x11, #0x0
     298:	mov	x2, x11
     29c:	str	w8, [sp, #44]
     2a0:	str	x11, [sp, #32]
     2a4:	bl	0 <sigaction>
     2a8:	ldr	x9, [sp, #80]
     2ac:	mov	x0, x9
     2b0:	ldr	w8, [sp, #76]
     2b4:	mov	w1, w8
     2b8:	ldr	x2, [sp, #64]
     2bc:	bl	0 <memset>
     2c0:	ldur	x9, [x29, #-64]
     2c4:	ldr	x10, [sp, #80]
     2c8:	str	x9, [x10]
     2cc:	mov	w8, #0xf                   	// #15
     2d0:	mov	w0, w8
     2d4:	mov	x1, x10
     2d8:	adrp	x11, 0 <srunner_fork_status>
     2dc:	add	x11, x11, #0x0
     2e0:	mov	x2, x11
     2e4:	str	w8, [sp, #28]
     2e8:	str	x11, [sp, #16]
     2ec:	bl	0 <sigaction>
     2f0:	ldur	x9, [x29, #-8]
     2f4:	ldur	w1, [x29, #-44]
     2f8:	mov	x0, x9
     2fc:	bl	484 <srunner_run_init>
     300:	ldur	x0, [x29, #-8]
     304:	ldur	x1, [x29, #-16]
     308:	ldur	x2, [x29, #-24]
     30c:	ldur	x3, [x29, #-32]
     310:	ldur	x4, [x29, #-40]
     314:	ldur	w5, [x29, #-44]
     318:	bl	4c8 <srunner_iterate_suites>
     31c:	ldur	x0, [x29, #-8]
     320:	ldur	w1, [x29, #-44]
     324:	bl	688 <srunner_run_end>
     328:	ldr	w0, [sp, #60]
     32c:	ldr	x1, [sp, #48]
     330:	mov	x9, xzr
     334:	mov	x2, x9
     338:	str	x9, [sp, #8]
     33c:	bl	0 <sigaction>
     340:	ldr	w8, [sp, #44]
     344:	mov	w0, w8
     348:	ldr	x1, [sp, #32]
     34c:	ldr	x2, [sp, #8]
     350:	bl	0 <sigaction>
     354:	ldr	w8, [sp, #28]
     358:	mov	w0, w8
     35c:	ldr	x1, [sp, #16]
     360:	ldr	x2, [sp, #8]
     364:	bl	0 <sigaction>
     368:	ldp	x29, x30, [sp, #160]
     36c:	add	sp, sp, #0xb0
     370:	ret

0000000000000374 <sig_handler>:
     374:	sub	sp, sp, #0x20
     378:	stp	x29, x30, [sp, #16]
     37c:	add	x29, sp, #0x10
     380:	stur	w0, [x29, #-4]
     384:	ldur	w8, [x29, #-4]
     388:	cmp	w8, #0x2
     38c:	str	w8, [sp]
     390:	b.eq	3e0 <sig_handler+0x6c>  // b.none
     394:	b	398 <sig_handler+0x24>
     398:	ldr	w8, [sp]
     39c:	cmp	w8, #0xe
     3a0:	b.eq	3b8 <sig_handler+0x44>  // b.none
     3a4:	b	3a8 <sig_handler+0x34>
     3a8:	ldr	w8, [sp]
     3ac:	cmp	w8, #0xf
     3b0:	b.eq	3e0 <sig_handler+0x6c>  // b.none
     3b4:	b	45c <sig_handler+0xe8>
     3b8:	adrp	x8, 0 <srunner_fork_status>
     3bc:	add	x8, x8, #0x0
     3c0:	mov	w9, #0x1                   	// #1
     3c4:	str	w9, [x8]
     3c8:	adrp	x8, 0 <srunner_fork_status>
     3cc:	add	x8, x8, #0x0
     3d0:	ldr	w0, [x8]
     3d4:	mov	w1, #0x9                   	// #9
     3d8:	bl	0 <killpg>
     3dc:	b	478 <sig_handler+0x104>
     3e0:	mov	w8, #0xf                   	// #15
     3e4:	str	w8, [sp, #4]
     3e8:	ldur	w8, [x29, #-4]
     3ec:	cmp	w8, #0x2
     3f0:	b.ne	418 <sig_handler+0xa4>  // b.any
     3f4:	mov	w8, #0x9                   	// #9
     3f8:	str	w8, [sp, #4]
     3fc:	mov	w0, #0x2                   	// #2
     400:	adrp	x1, 0 <srunner_fork_status>
     404:	add	x1, x1, #0x0
     408:	mov	x9, xzr
     40c:	mov	x2, x9
     410:	bl	0 <sigaction>
     414:	b	430 <sig_handler+0xbc>
     418:	mov	w0, #0xf                   	// #15
     41c:	adrp	x1, 0 <srunner_fork_status>
     420:	add	x1, x1, #0x0
     424:	mov	x8, xzr
     428:	mov	x2, x8
     42c:	bl	0 <sigaction>
     430:	adrp	x8, 0 <srunner_fork_status>
     434:	add	x8, x8, #0x0
     438:	ldr	w0, [x8]
     43c:	ldr	w1, [sp, #4]
     440:	bl	0 <killpg>
     444:	bl	0 <getpgrp>
     448:	str	w0, [sp, #8]
     44c:	ldr	w0, [sp, #8]
     450:	ldur	w1, [x29, #-4]
     454:	bl	0 <killpg>
     458:	b	478 <sig_handler+0x104>
     45c:	ldur	w3, [x29, #-4]
     460:	adrp	x0, 0 <srunner_fork_status>
     464:	add	x0, x0, #0x0
     468:	adrp	x1, 0 <srunner_fork_status>
     46c:	add	x1, x1, #0x0
     470:	mov	w2, #0x8e                  	// #142
     474:	bl	0 <eprintf>
     478:	ldp	x29, x30, [sp, #16]
     47c:	add	sp, sp, #0x20
     480:	ret

0000000000000484 <srunner_run_init>:
     484:	sub	sp, sp, #0x20
     488:	stp	x29, x30, [sp, #16]
     48c:	add	x29, sp, #0x10
     490:	str	x0, [sp, #8]
     494:	str	w1, [sp, #4]
     498:	ldr	x0, [sp, #8]
     49c:	bl	0 <srunner_fork_status>
     4a0:	bl	0 <set_fork_status>
     4a4:	bl	0 <setup_messaging>
     4a8:	ldr	x0, [sp, #8]
     4ac:	ldr	w1, [sp, #4]
     4b0:	bl	0 <srunner_init_logging>
     4b4:	ldr	x0, [sp, #8]
     4b8:	bl	0 <log_srunner_start>
     4bc:	ldp	x29, x30, [sp, #16]
     4c0:	add	sp, sp, #0x20
     4c4:	ret

00000000000004c8 <srunner_iterate_suites>:
     4c8:	sub	sp, sp, #0x80
     4cc:	stp	x29, x30, [sp, #112]
     4d0:	add	x29, sp, #0x70
     4d4:	stur	x0, [x29, #-8]
     4d8:	stur	x1, [x29, #-16]
     4dc:	stur	x2, [x29, #-24]
     4e0:	stur	x3, [x29, #-32]
     4e4:	stur	x4, [x29, #-40]
     4e8:	stur	w5, [x29, #-44]
     4ec:	ldur	x8, [x29, #-8]
     4f0:	ldr	x8, [x8]
     4f4:	str	x8, [sp, #40]
     4f8:	ldur	x0, [x29, #-32]
     4fc:	bl	0 <tag_string_to_list>
     500:	str	x0, [sp, #56]
     504:	ldur	x0, [x29, #-40]
     508:	bl	0 <tag_string_to_list>
     50c:	str	x0, [sp, #48]
     510:	ldr	x0, [sp, #40]
     514:	bl	0 <check_list_front>
     518:	ldr	x0, [sp, #40]
     51c:	bl	0 <check_list_at_end>
     520:	cmp	w0, #0x0
     524:	cset	w8, ne  // ne = any
     528:	eor	w8, w8, #0x1
     52c:	tbnz	w8, #0, 534 <srunner_iterate_suites+0x6c>
     530:	b	648 <srunner_iterate_suites+0x180>
     534:	ldr	x0, [sp, #40]
     538:	bl	0 <check_list_val>
     53c:	str	x0, [sp, #16]
     540:	ldur	x8, [x29, #-16]
     544:	cbz	x8, 55c <srunner_iterate_suites+0x94>
     548:	ldur	x0, [x29, #-16]
     54c:	ldr	x8, [sp, #16]
     550:	ldr	x1, [x8]
     554:	bl	0 <strcmp>
     558:	cbnz	w0, 574 <srunner_iterate_suites+0xac>
     55c:	ldur	x8, [x29, #-24]
     560:	cbz	x8, 578 <srunner_iterate_suites+0xb0>
     564:	ldr	x0, [sp, #16]
     568:	ldur	x1, [x29, #-24]
     56c:	bl	0 <suite_tcase>
     570:	cbnz	w0, 578 <srunner_iterate_suites+0xb0>
     574:	b	63c <srunner_iterate_suites+0x174>
     578:	ldur	x0, [x29, #-8]
     57c:	ldr	x1, [sp, #16]
     580:	bl	0 <log_suite_start>
     584:	ldr	x8, [sp, #16]
     588:	ldr	x8, [x8, #8]
     58c:	str	x8, [sp, #32]
     590:	ldr	x0, [sp, #32]
     594:	bl	0 <check_list_front>
     598:	ldr	x0, [sp, #32]
     59c:	bl	0 <check_list_at_end>
     5a0:	cmp	w0, #0x0
     5a4:	cset	w8, ne  // ne = any
     5a8:	eor	w8, w8, #0x1
     5ac:	tbnz	w8, #0, 5b4 <srunner_iterate_suites+0xec>
     5b0:	b	630 <srunner_iterate_suites+0x168>
     5b4:	ldr	x0, [sp, #32]
     5b8:	bl	0 <check_list_val>
     5bc:	str	x0, [sp, #24]
     5c0:	ldur	x8, [x29, #-24]
     5c4:	cbz	x8, 5e0 <srunner_iterate_suites+0x118>
     5c8:	ldur	x0, [x29, #-24]
     5cc:	ldr	x8, [sp, #24]
     5d0:	ldr	x1, [x8]
     5d4:	bl	0 <strcmp>
     5d8:	cbz	w0, 5e0 <srunner_iterate_suites+0x118>
     5dc:	b	624 <srunner_iterate_suites+0x15c>
     5e0:	ldur	x8, [x29, #-32]
     5e4:	cbz	x8, 5fc <srunner_iterate_suites+0x134>
     5e8:	ldr	x0, [sp, #24]
     5ec:	ldr	x1, [sp, #56]
     5f0:	bl	0 <tcase_matching_tag>
     5f4:	cbnz	w0, 5fc <srunner_iterate_suites+0x134>
     5f8:	b	624 <srunner_iterate_suites+0x15c>
     5fc:	ldur	x8, [x29, #-40]
     600:	cbz	x8, 618 <srunner_iterate_suites+0x150>
     604:	ldr	x0, [sp, #24]
     608:	ldr	x1, [sp, #48]
     60c:	bl	0 <tcase_matching_tag>
     610:	cbz	w0, 618 <srunner_iterate_suites+0x150>
     614:	b	624 <srunner_iterate_suites+0x15c>
     618:	ldur	x0, [x29, #-8]
     61c:	ldr	x1, [sp, #24]
     620:	bl	840 <srunner_run_tcase>
     624:	ldr	x0, [sp, #32]
     628:	bl	0 <check_list_advance>
     62c:	b	598 <srunner_iterate_suites+0xd0>
     630:	ldur	x0, [x29, #-8]
     634:	ldr	x1, [sp, #16]
     638:	bl	0 <log_suite_end>
     63c:	ldr	x0, [sp, #40]
     640:	bl	0 <check_list_advance>
     644:	b	518 <srunner_iterate_suites+0x50>
     648:	ldr	x0, [sp, #56]
     64c:	adrp	x8, 0 <free>
     650:	add	x8, x8, #0x0
     654:	mov	x1, x8
     658:	str	x8, [sp, #8]
     65c:	bl	0 <check_list_apply>
     660:	ldr	x0, [sp, #48]
     664:	ldr	x1, [sp, #8]
     668:	bl	0 <check_list_apply>
     66c:	ldr	x0, [sp, #56]
     670:	bl	0 <check_list_free>
     674:	ldr	x0, [sp, #48]
     678:	bl	0 <check_list_free>
     67c:	ldp	x29, x30, [sp, #112]
     680:	add	sp, sp, #0x80
     684:	ret

0000000000000688 <srunner_run_end>:
     688:	sub	sp, sp, #0x20
     68c:	stp	x29, x30, [sp, #16]
     690:	add	x29, sp, #0x10
     694:	mov	w8, #0x1                   	// #1
     698:	str	x0, [sp, #8]
     69c:	str	w1, [sp, #4]
     6a0:	ldr	x0, [sp, #8]
     6a4:	str	w8, [sp]
     6a8:	bl	0 <log_srunner_end>
     6ac:	ldr	x0, [sp, #8]
     6b0:	bl	0 <srunner_end_logging>
     6b4:	bl	0 <teardown_messaging>
     6b8:	ldr	w0, [sp]
     6bc:	bl	0 <set_fork_status>
     6c0:	ldp	x29, x30, [sp, #16]
     6c4:	add	sp, sp, #0x20
     6c8:	ret

00000000000006cc <check_fork>:
     6cc:	sub	sp, sp, #0x20
     6d0:	stp	x29, x30, [sp, #16]
     6d4:	add	x29, sp, #0x10
     6d8:	bl	0 <fork>
     6dc:	stur	w0, [x29, #-4]
     6e0:	ldur	w8, [x29, #-4]
     6e4:	cmp	w8, #0x0
     6e8:	cset	w8, lt  // lt = tstop
     6ec:	tbnz	w8, #0, 704 <check_fork+0x38>
     6f0:	ldur	w0, [x29, #-4]
     6f4:	adrp	x8, 0 <srunner_fork_status>
     6f8:	add	x8, x8, #0x0
     6fc:	ldr	w1, [x8]
     700:	bl	0 <setpgid>
     704:	ldur	w0, [x29, #-4]
     708:	ldp	x29, x30, [sp, #16]
     70c:	add	sp, sp, #0x20
     710:	ret

0000000000000714 <check_waitpid_and_exit>:
     714:	sub	sp, sp, #0x20
     718:	stp	x29, x30, [sp, #16]
     71c:	add	x29, sp, #0x10
     720:	stur	w0, [x29, #-4]
     724:	ldur	w8, [x29, #-4]
     728:	cmp	w8, #0x0
     72c:	cset	w8, le
     730:	tbnz	w8, #0, 778 <check_waitpid_and_exit+0x64>
     734:	ldur	w0, [x29, #-4]
     738:	add	x1, sp, #0x4
     73c:	mov	w8, wzr
     740:	mov	w2, w8
     744:	bl	0 <waitpid>
     748:	str	w0, [sp, #8]
     74c:	ldr	w8, [sp, #8]
     750:	mov	w9, #0xffffffff            	// #-1
     754:	cmp	w8, w9
     758:	b.eq	734 <check_waitpid_and_exit+0x20>  // b.none
     75c:	ldr	w0, [sp, #4]
     760:	mov	w8, wzr
     764:	mov	w1, w8
     768:	bl	784 <waserror>
     76c:	cbz	w0, 778 <check_waitpid_and_exit+0x64>
     770:	mov	w0, #0x1                   	// #1
     774:	bl	0 <exit>
     778:	mov	w8, wzr
     77c:	mov	w0, w8
     780:	bl	0 <exit>

0000000000000784 <waserror>:
     784:	sub	sp, sp, #0x20
     788:	str	w0, [sp, #28]
     78c:	str	w1, [sp, #24]
     790:	ldr	w8, [sp, #28]
     794:	and	w8, w8, #0x7f
     798:	add	w8, w8, #0x1
     79c:	lsl	w8, w8, #24
     7a0:	asr	w8, w8, #24
     7a4:	asr	w8, w8, #1
     7a8:	cmp	w8, #0x0
     7ac:	cset	w8, gt
     7b0:	and	w8, w8, #0x1
     7b4:	str	w8, [sp, #20]
     7b8:	ldr	w8, [sp, #28]
     7bc:	tst	w8, #0x7f
     7c0:	cset	w8, eq  // eq = none
     7c4:	and	w8, w8, #0x1
     7c8:	str	w8, [sp, #16]
     7cc:	ldr	w8, [sp, #28]
     7d0:	and	w8, w8, #0xff00
     7d4:	asr	w8, w8, #8
     7d8:	str	w8, [sp, #12]
     7dc:	ldr	w8, [sp, #28]
     7e0:	and	w8, w8, #0x7f
     7e4:	str	w8, [sp, #8]
     7e8:	ldr	w8, [sp, #20]
     7ec:	cbz	w8, 808 <waserror+0x84>
     7f0:	ldr	w8, [sp, #8]
     7f4:	ldr	w9, [sp, #24]
     7f8:	mov	w10, #0x1                   	// #1
     7fc:	cmp	w8, w9
     800:	str	w10, [sp, #4]
     804:	b.ne	830 <waserror+0xac>  // b.any
     808:	ldr	w8, [sp, #16]
     80c:	mov	w9, #0x0                   	// #0
     810:	str	w9, [sp]
     814:	cbz	w8, 828 <waserror+0xa4>
     818:	ldr	w8, [sp, #12]
     81c:	cmp	w8, #0x0
     820:	cset	w8, ne  // ne = any
     824:	str	w8, [sp]
     828:	ldr	w8, [sp]
     82c:	str	w8, [sp, #4]
     830:	ldr	w8, [sp, #4]
     834:	and	w0, w8, #0x1
     838:	add	sp, sp, #0x20
     83c:	ret

0000000000000840 <srunner_run_tcase>:
     840:	sub	sp, sp, #0x20
     844:	stp	x29, x30, [sp, #16]
     848:	add	x29, sp, #0x10
     84c:	str	x0, [sp, #8]
     850:	str	x1, [sp]
     854:	ldr	x0, [sp, #8]
     858:	ldr	x1, [sp]
     85c:	bl	888 <srunner_run_unchecked_setup>
     860:	cbz	w0, 87c <srunner_run_tcase+0x3c>
     864:	ldr	x0, [sp, #8]
     868:	ldr	x1, [sp]
     86c:	bl	92c <srunner_iterate_tcase_tfuns>
     870:	ldr	x0, [sp, #8]
     874:	ldr	x1, [sp]
     878:	bl	a80 <srunner_run_unchecked_teardown>
     87c:	ldp	x29, x30, [sp, #16]
     880:	add	sp, sp, #0x20
     884:	ret

0000000000000888 <srunner_run_unchecked_setup>:
     888:	sub	sp, sp, #0x40
     88c:	stp	x29, x30, [sp, #48]
     890:	add	x29, sp, #0x30
     894:	mov	x8, xzr
     898:	mov	w9, #0x1                   	// #1
     89c:	mov	w10, #0x2                   	// #2
     8a0:	adrp	x3, 0 <srunner_fork_status>
     8a4:	add	x3, x3, #0x0
     8a8:	stur	x0, [x29, #-8]
     8ac:	stur	x1, [x29, #-16]
     8b0:	str	x8, [sp, #24]
     8b4:	str	w9, [sp, #20]
     8b8:	mov	w0, w10
     8bc:	str	w10, [sp, #16]
     8c0:	str	x3, [sp, #8]
     8c4:	bl	0 <set_fork_status>
     8c8:	ldur	x8, [x29, #-16]
     8cc:	ldr	x0, [x8, #32]
     8d0:	ldur	x8, [x29, #-16]
     8d4:	ldr	x2, [x8]
     8d8:	ldr	w1, [sp, #16]
     8dc:	ldr	x3, [sp, #8]
     8e0:	bl	acc <srunner_run_setup>
     8e4:	str	x0, [sp, #24]
     8e8:	ldur	x0, [x29, #-8]
     8ec:	bl	0 <srunner_fork_status>
     8f0:	bl	0 <set_fork_status>
     8f4:	ldr	x8, [sp, #24]
     8f8:	cbz	x8, 91c <srunner_run_unchecked_setup+0x94>
     8fc:	ldr	x8, [sp, #24]
     900:	ldr	w9, [x8]
     904:	cmp	w9, #0x1
     908:	b.eq	91c <srunner_run_unchecked_setup+0x94>  // b.none
     90c:	ldur	x0, [x29, #-8]
     910:	ldr	x1, [sp, #24]
     914:	bl	be8 <srunner_add_failure>
     918:	str	wzr, [sp, #20]
     91c:	ldr	w0, [sp, #20]
     920:	ldp	x29, x30, [sp, #48]
     924:	add	sp, sp, #0x40
     928:	ret

000000000000092c <srunner_iterate_tcase_tfuns>:
     92c:	sub	sp, sp, #0x40
     930:	stp	x29, x30, [sp, #48]
     934:	add	x29, sp, #0x30
     938:	mov	x8, xzr
     93c:	stur	x0, [x29, #-8]
     940:	stur	x1, [x29, #-16]
     944:	str	x8, [sp, #8]
     948:	ldur	x8, [x29, #-16]
     94c:	ldr	x8, [x8, #24]
     950:	str	x8, [sp, #24]
     954:	ldr	x0, [sp, #24]
     958:	bl	0 <check_list_front>
     95c:	ldr	x0, [sp, #24]
     960:	bl	0 <check_list_at_end>
     964:	cmp	w0, #0x0
     968:	cset	w8, ne  // ne = any
     96c:	eor	w8, w8, #0x1
     970:	tbnz	w8, #0, 978 <srunner_iterate_tcase_tfuns+0x4c>
     974:	b	a74 <srunner_iterate_tcase_tfuns+0x148>
     978:	ldr	x0, [sp, #24]
     97c:	bl	0 <check_list_val>
     980:	str	x0, [sp, #16]
     984:	ldr	x8, [sp, #16]
     988:	ldr	w9, [x8, #8]
     98c:	str	w9, [sp, #4]
     990:	ldr	w8, [sp, #4]
     994:	ldr	x9, [sp, #16]
     998:	ldr	w10, [x9, #12]
     99c:	cmp	w8, w10
     9a0:	b.ge	a68 <srunner_iterate_tcase_tfuns+0x13c>  // b.tcont
     9a4:	ldur	x0, [x29, #-8]
     9a8:	ldur	x1, [x29, #-16]
     9ac:	ldr	x2, [sp, #16]
     9b0:	bl	0 <log_test_start>
     9b4:	ldur	x0, [x29, #-8]
     9b8:	bl	0 <srunner_fork_status>
     9bc:	str	w0, [sp]
     9c0:	cbz	w0, a20 <srunner_iterate_tcase_tfuns+0xf4>
     9c4:	b	9c8 <srunner_iterate_tcase_tfuns+0x9c>
     9c8:	ldr	w8, [sp]
     9cc:	cmp	w8, #0x1
     9d0:	b.eq	9e8 <srunner_iterate_tcase_tfuns+0xbc>  // b.none
     9d4:	b	9d8 <srunner_iterate_tcase_tfuns+0xac>
     9d8:	ldr	w8, [sp]
     9dc:	cmp	w8, #0x2
     9e0:	b.eq	a04 <srunner_iterate_tcase_tfuns+0xd8>  // b.none
     9e4:	b	a20 <srunner_iterate_tcase_tfuns+0xf4>
     9e8:	ldur	x0, [x29, #-8]
     9ec:	ldur	x1, [x29, #-16]
     9f0:	ldr	x2, [sp, #16]
     9f4:	ldr	w3, [sp, #4]
     9f8:	bl	d78 <tcase_run_tfun_fork>
     9fc:	str	x0, [sp, #8]
     a00:	b	a38 <srunner_iterate_tcase_tfuns+0x10c>
     a04:	ldur	x0, [x29, #-8]
     a08:	ldur	x1, [x29, #-16]
     a0c:	ldr	x2, [sp, #16]
     a10:	ldr	w3, [sp, #4]
     a14:	bl	fe8 <tcase_run_tfun_nofork>
     a18:	str	x0, [sp, #8]
     a1c:	b	a38 <srunner_iterate_tcase_tfuns+0x10c>
     a20:	adrp	x0, 0 <srunner_fork_status>
     a24:	add	x0, x0, #0x0
     a28:	adrp	x1, 0 <srunner_fork_status>
     a2c:	add	x1, x1, #0x0
     a30:	mov	w2, #0x10b                 	// #267
     a34:	bl	0 <eprintf>
     a38:	ldr	x8, [sp, #8]
     a3c:	cbz	x8, a58 <srunner_iterate_tcase_tfuns+0x12c>
     a40:	ldur	x0, [x29, #-8]
     a44:	ldr	x1, [sp, #8]
     a48:	bl	be8 <srunner_add_failure>
     a4c:	ldur	x0, [x29, #-8]
     a50:	ldr	x1, [sp, #8]
     a54:	bl	0 <log_test_end>
     a58:	ldr	w8, [sp, #4]
     a5c:	add	w8, w8, #0x1
     a60:	str	w8, [sp, #4]
     a64:	b	990 <srunner_iterate_tcase_tfuns+0x64>
     a68:	ldr	x0, [sp, #24]
     a6c:	bl	0 <check_list_advance>
     a70:	b	95c <srunner_iterate_tcase_tfuns+0x30>
     a74:	ldp	x29, x30, [sp, #48]
     a78:	add	sp, sp, #0x40
     a7c:	ret

0000000000000a80 <srunner_run_unchecked_teardown>:
     a80:	sub	sp, sp, #0x30
     a84:	stp	x29, x30, [sp, #32]
     a88:	add	x29, sp, #0x20
     a8c:	stur	x0, [x29, #-8]
     a90:	str	x1, [sp, #16]
     a94:	ldr	x8, [sp, #16]
     a98:	ldr	x0, [x8, #40]
     a9c:	ldur	x8, [x29, #-8]
     aa0:	str	x0, [sp, #8]
     aa4:	mov	x0, x8
     aa8:	bl	0 <srunner_fork_status>
     aac:	ldr	x8, [sp, #8]
     ab0:	str	w0, [sp, #4]
     ab4:	mov	x0, x8
     ab8:	ldr	w1, [sp, #4]
     abc:	bl	124c <srunner_run_teardown>
     ac0:	ldp	x29, x30, [sp, #32]
     ac4:	add	sp, sp, #0x30
     ac8:	ret

0000000000000acc <srunner_run_setup>:
     acc:	sub	sp, sp, #0x40
     ad0:	stp	x29, x30, [sp, #48]
     ad4:	add	x29, sp, #0x30
     ad8:	mov	x8, xzr
     adc:	stur	x0, [x29, #-8]
     ae0:	stur	w1, [x29, #-12]
     ae4:	str	x2, [sp, #24]
     ae8:	str	x3, [sp, #16]
     aec:	str	x8, [sp, #8]
     af0:	ldur	w9, [x29, #-12]
     af4:	cmp	w9, #0x1
     af8:	b.ne	b04 <srunner_run_setup+0x38>  // b.any
     afc:	mov	w0, #0x1                   	// #1
     b00:	bl	0 <send_ctx_info>
     b04:	ldur	x0, [x29, #-8]
     b08:	bl	0 <check_list_front>
     b0c:	ldur	x0, [x29, #-8]
     b10:	bl	0 <check_list_at_end>
     b14:	cmp	w0, #0x0
     b18:	cset	w8, ne  // ne = any
     b1c:	eor	w8, w8, #0x1
     b20:	tbnz	w8, #0, b28 <srunner_run_setup+0x5c>
     b24:	b	bd8 <srunner_run_setup+0x10c>
     b28:	ldur	x0, [x29, #-8]
     b2c:	bl	0 <check_list_val>
     b30:	str	x0, [sp]
     b34:	ldur	w8, [x29, #-12]
     b38:	cmp	w8, #0x2
     b3c:	b.ne	bc0 <srunner_run_setup+0xf4>  // b.any
     b40:	mov	w0, #0x1                   	// #1
     b44:	bl	0 <send_ctx_info>
     b48:	adrp	x0, 0 <error_jmp_buffer>
     b4c:	add	x0, x0, #0x0
     b50:	bl	0 <_setjmp>
     b54:	cbnz	w0, b64 <srunner_run_setup+0x98>
     b58:	ldr	x8, [sp]
     b5c:	ldr	x8, [x8, #8]
     b60:	blr	x8
     b64:	ldr	x0, [sp, #24]
     b68:	ldr	x1, [sp, #16]
     b6c:	mov	w8, wzr
     b70:	mov	w2, w8
     b74:	mov	w3, #0xffffffff            	// #-1
     b78:	bl	c78 <receive_result_info_nofork>
     b7c:	str	x0, [sp, #8]
     b80:	ldr	x9, [sp, #8]
     b84:	ldr	w8, [x9]
     b88:	cmp	w8, #0x1
     b8c:	b.eq	b94 <srunner_run_setup+0xc8>  // b.none
     b90:	b	bd8 <srunner_run_setup+0x10c>
     b94:	ldr	x8, [sp, #8]
     b98:	ldr	x0, [x8, #8]
     b9c:	bl	0 <free>
     ba0:	ldr	x8, [sp, #8]
     ba4:	ldr	x0, [x8, #48]
     ba8:	bl	0 <free>
     bac:	ldr	x0, [sp, #8]
     bb0:	bl	0 <free>
     bb4:	mov	x8, xzr
     bb8:	str	x8, [sp, #8]
     bbc:	b	bcc <srunner_run_setup+0x100>
     bc0:	ldr	x8, [sp]
     bc4:	ldr	x8, [x8, #8]
     bc8:	blr	x8
     bcc:	ldur	x0, [x29, #-8]
     bd0:	bl	0 <check_list_advance>
     bd4:	b	b0c <srunner_run_setup+0x40>
     bd8:	ldr	x0, [sp, #8]
     bdc:	ldp	x29, x30, [sp, #48]
     be0:	add	sp, sp, #0x40
     be4:	ret

0000000000000be8 <srunner_add_failure>:
     be8:	sub	sp, sp, #0x20
     bec:	stp	x29, x30, [sp, #16]
     bf0:	add	x29, sp, #0x10
     bf4:	str	x0, [sp, #8]
     bf8:	str	x1, [sp]
     bfc:	ldr	x8, [sp, #8]
     c00:	ldr	x0, [x8, #16]
     c04:	ldr	x1, [sp]
     c08:	bl	0 <check_list_add_end>
     c0c:	ldr	x8, [sp, #8]
     c10:	ldr	x8, [x8, #8]
     c14:	ldr	w9, [x8]
     c18:	add	w9, w9, #0x1
     c1c:	str	w9, [x8]
     c20:	ldr	x8, [sp]
     c24:	ldr	w9, [x8]
     c28:	cmp	w9, #0x2
     c2c:	b.ne	c48 <srunner_add_failure+0x60>  // b.any
     c30:	ldr	x8, [sp, #8]
     c34:	ldr	x8, [x8, #8]
     c38:	ldr	w9, [x8, #4]
     c3c:	add	w9, w9, #0x1
     c40:	str	w9, [x8, #4]
     c44:	b	c6c <srunner_add_failure+0x84>
     c48:	ldr	x8, [sp]
     c4c:	ldr	w9, [x8]
     c50:	cmp	w9, #0x3
     c54:	b.ne	c6c <srunner_add_failure+0x84>  // b.any
     c58:	ldr	x8, [sp, #8]
     c5c:	ldr	x8, [x8, #8]
     c60:	ldr	w9, [x8, #8]
     c64:	add	w9, w9, #0x1
     c68:	str	w9, [x8, #8]
     c6c:	ldp	x29, x30, [sp, #16]
     c70:	add	sp, sp, #0x20
     c74:	ret

0000000000000c78 <receive_result_info_nofork>:
     c78:	sub	sp, sp, #0x30
     c7c:	stp	x29, x30, [sp, #32]
     c80:	add	x29, sp, #0x20
     c84:	mov	w8, wzr
     c88:	stur	x0, [x29, #-8]
     c8c:	str	x1, [sp, #16]
     c90:	str	w2, [sp, #12]
     c94:	str	w3, [sp, #8]
     c98:	mov	w0, w8
     c9c:	bl	0 <receive_test_result>
     ca0:	str	x0, [sp]
     ca4:	ldr	x9, [sp]
     ca8:	cbnz	x9, cc4 <receive_result_info_nofork+0x4c>
     cac:	adrp	x0, 0 <srunner_fork_status>
     cb0:	add	x0, x0, #0x0
     cb4:	adrp	x1, 0 <srunner_fork_status>
     cb8:	add	x1, x1, #0x0
     cbc:	mov	w2, #0x1b8                 	// #440
     cc0:	bl	0 <eprintf>
     cc4:	ldur	x8, [x29, #-8]
     cc8:	ldr	x9, [sp]
     ccc:	str	x8, [x9, #32]
     cd0:	ldr	x8, [sp, #16]
     cd4:	ldr	x9, [sp]
     cd8:	str	x8, [x9, #40]
     cdc:	ldr	w10, [sp, #12]
     ce0:	ldr	x8, [sp]
     ce4:	str	w10, [x8, #20]
     ce8:	ldr	w10, [sp, #8]
     cec:	ldr	x8, [sp]
     cf0:	str	w10, [x8, #24]
     cf4:	ldr	x0, [sp]
     cf8:	bl	d0c <set_nofork_info>
     cfc:	ldr	x0, [sp]
     d00:	ldp	x29, x30, [sp, #32]
     d04:	add	sp, sp, #0x30
     d08:	ret

0000000000000d0c <set_nofork_info>:
     d0c:	sub	sp, sp, #0x20
     d10:	stp	x29, x30, [sp, #16]
     d14:	add	x29, sp, #0x10
     d18:	str	x0, [sp, #8]
     d1c:	ldr	x8, [sp, #8]
     d20:	ldr	x8, [x8, #48]
     d24:	cbnz	x8, d44 <set_nofork_info+0x38>
     d28:	ldr	x8, [sp, #8]
     d2c:	mov	w9, #0x1                   	// #1
     d30:	str	w9, [x8]
     d34:	bl	d5c <pass_msg>
     d38:	ldr	x8, [sp, #8]
     d3c:	str	x0, [x8, #48]
     d40:	b	d50 <set_nofork_info+0x44>
     d44:	ldr	x8, [sp, #8]
     d48:	mov	w9, #0x2                   	// #2
     d4c:	str	w9, [x8]
     d50:	ldp	x29, x30, [sp, #16]
     d54:	add	sp, sp, #0x20
     d58:	ret

0000000000000d5c <pass_msg>:
     d5c:	stp	x29, x30, [sp, #-16]!
     d60:	mov	x29, sp
     d64:	adrp	x0, 0 <srunner_fork_status>
     d68:	add	x0, x0, #0x0
     d6c:	bl	0 <strdup>
     d70:	ldp	x29, x30, [sp], #16
     d74:	ret

0000000000000d78 <tcase_run_tfun_fork>:
     d78:	sub	sp, sp, #0xa0
     d7c:	stp	x29, x30, [sp, #144]
     d80:	add	x29, sp, #0x90
     d84:	mov	w8, #0xffffffff            	// #-1
     d88:	adrp	x9, 0 <srunner_fork_status>
     d8c:	add	x9, x9, #0x0
     d90:	stur	x0, [x29, #-8]
     d94:	stur	x1, [x29, #-16]
     d98:	stur	x2, [x29, #-24]
     d9c:	stur	w3, [x29, #-28]
     da0:	stur	wzr, [x29, #-40]
     da4:	stur	xzr, [x29, #-56]
     da8:	stur	xzr, [x29, #-48]
     dac:	str	xzr, [sp, #72]
     db0:	str	xzr, [sp, #80]
     db4:	str	w8, [sp, #20]
     db8:	str	x9, [sp, #8]
     dbc:	bl	0 <fork>
     dc0:	stur	w0, [x29, #-36]
     dc4:	ldur	w8, [x29, #-36]
     dc8:	ldr	w10, [sp, #20]
     dcc:	cmp	w8, w10
     dd0:	b.ne	de8 <tcase_run_tfun_fork+0x70>  // b.any
     dd4:	adrp	x0, 0 <srunner_fork_status>
     dd8:	add	x0, x0, #0x0
     ddc:	ldr	x1, [sp, #8]
     de0:	mov	w2, #0x1e5                 	// #485
     de4:	bl	0 <eprintf>
     de8:	ldur	w8, [x29, #-36]
     dec:	cbnz	w8, ed4 <tcase_run_tfun_fork+0x15c>
     df0:	mov	w8, wzr
     df4:	mov	w0, w8
     df8:	mov	w1, w8
     dfc:	str	w8, [sp, #4]
     e00:	bl	0 <setpgid>
     e04:	bl	0 <getpgrp>
     e08:	adrp	x9, 0 <srunner_fork_status>
     e0c:	add	x9, x9, #0x0
     e10:	str	w0, [x9]
     e14:	ldur	x0, [x29, #-8]
     e18:	ldur	x1, [x29, #-16]
     e1c:	bl	1114 <tcase_run_checked_setup>
     e20:	str	x0, [sp, #24]
     e24:	ldr	x0, [sp, #24]
     e28:	bl	0 <free>
     e2c:	bl	0 <check_get_clockid>
     e30:	sub	x1, x29, #0x38
     e34:	bl	0 <clock_gettime>
     e38:	ldur	x9, [x29, #-24]
     e3c:	ldr	x9, [x9]
     e40:	ldr	x9, [x9]
     e44:	ldur	x10, [x29, #-24]
     e48:	ldr	x10, [x10]
     e4c:	ldr	x1, [x10, #16]
     e50:	ldur	x10, [x29, #-24]
     e54:	ldr	x10, [x10]
     e58:	ldr	w2, [x10, #24]
     e5c:	mov	x0, x9
     e60:	bl	0 <tcase_fn_start>
     e64:	ldur	x9, [x29, #-24]
     e68:	ldr	x9, [x9]
     e6c:	ldr	x9, [x9, #8]
     e70:	ldur	w0, [x29, #-28]
     e74:	blr	x9
     e78:	bl	0 <check_get_clockid>
     e7c:	add	x1, sp, #0x48
     e80:	bl	0 <clock_gettime>
     e84:	ldur	x9, [x29, #-16]
     e88:	mov	x0, x9
     e8c:	bl	1180 <tcase_run_checked_teardown>
     e90:	ldr	x9, [sp, #72]
     e94:	ldur	x10, [x29, #-56]
     e98:	subs	x9, x9, x10
     e9c:	mov	x10, #0x4240                	// #16960
     ea0:	movk	x10, #0xf, lsl #16
     ea4:	mul	x9, x9, x10
     ea8:	ldr	x10, [sp, #80]
     eac:	mov	x11, #0x3e8                 	// #1000
     eb0:	sdiv	x10, x10, x11
     eb4:	add	x9, x9, x10
     eb8:	ldur	x10, [x29, #-48]
     ebc:	sdiv	x10, x10, x11
     ec0:	subs	x9, x9, x10
     ec4:	mov	w0, w9
     ec8:	bl	0 <send_duration_info>
     ecc:	ldr	w0, [sp, #4]
     ed0:	bl	0 <exit>
     ed4:	ldur	w8, [x29, #-36]
     ed8:	adrp	x9, 0 <srunner_fork_status>
     edc:	add	x9, x9, #0x0
     ee0:	str	w8, [x9]
     ee4:	adrp	x8, 0 <srunner_fork_status>
     ee8:	add	x8, x8, #0x0
     eec:	str	wzr, [x8]
     ef0:	bl	0 <check_get_clockid>
     ef4:	mov	x8, xzr
     ef8:	mov	x1, x8
     efc:	add	x2, sp, #0x40
     f00:	bl	0 <timer_create>
     f04:	cbnz	w0, f88 <tcase_run_tfun_fork+0x210>
     f08:	add	x2, sp, #0x20
     f0c:	ldur	x8, [x29, #-16]
     f10:	ldur	q0, [x8, #8]
     f14:	str	q0, [sp, #48]
     f18:	mov	x8, xzr
     f1c:	str	xzr, [sp, #32]
     f20:	str	xzr, [sp, #40]
     f24:	ldr	x0, [sp, #64]
     f28:	mov	w9, wzr
     f2c:	mov	w1, w9
     f30:	mov	x3, x8
     f34:	bl	0 <timer_settime>
     f38:	cbnz	w0, f68 <tcase_run_tfun_fork+0x1f0>
     f3c:	ldur	w0, [x29, #-36]
     f40:	sub	x1, x29, #0x28
     f44:	mov	w8, wzr
     f48:	mov	w2, w8
     f4c:	bl	0 <waitpid>
     f50:	stur	w0, [x29, #-32]
     f54:	ldur	w8, [x29, #-32]
     f58:	mov	w9, #0xffffffff            	// #-1
     f5c:	cmp	w8, w9
     f60:	b.eq	f3c <tcase_run_tfun_fork+0x1c4>  // b.none
     f64:	b	f7c <tcase_run_tfun_fork+0x204>
     f68:	adrp	x0, 0 <srunner_fork_status>
     f6c:	add	x0, x0, #0x0
     f70:	ldr	x1, [sp, #8]
     f74:	mov	w2, #0x210                 	// #528
     f78:	bl	0 <eprintf>
     f7c:	ldr	x0, [sp, #64]
     f80:	bl	0 <timer_delete>
     f84:	b	f9c <tcase_run_tfun_fork+0x224>
     f88:	adrp	x0, 0 <srunner_fork_status>
     f8c:	add	x0, x0, #0x0
     f90:	ldr	x1, [sp, #8]
     f94:	mov	w2, #0x218                 	// #536
     f98:	bl	0 <eprintf>
     f9c:	ldur	w0, [x29, #-36]
     fa0:	mov	w1, #0x9                   	// #9
     fa4:	bl	0 <killpg>
     fa8:	ldur	x8, [x29, #-16]
     fac:	ldr	x8, [x8]
     fb0:	ldur	x9, [x29, #-24]
     fb4:	ldr	x9, [x9]
     fb8:	ldr	x1, [x9]
     fbc:	ldur	w2, [x29, #-28]
     fc0:	ldur	w3, [x29, #-40]
     fc4:	ldur	x9, [x29, #-24]
     fc8:	ldr	w4, [x9, #16]
     fcc:	ldur	x9, [x29, #-24]
     fd0:	ldrb	w5, [x9, #20]
     fd4:	mov	x0, x8
     fd8:	bl	11ac <receive_result_info_fork>
     fdc:	ldp	x29, x30, [sp, #144]
     fe0:	add	sp, sp, #0xa0
     fe4:	ret

0000000000000fe8 <tcase_run_tfun_nofork>:
     fe8:	sub	sp, sp, #0x60
     fec:	stp	x29, x30, [sp, #80]
     ff0:	add	x29, sp, #0x50
     ff4:	stur	x0, [x29, #-16]
     ff8:	stur	x1, [x29, #-24]
     ffc:	stur	x2, [x29, #-32]
    1000:	stur	w3, [x29, #-36]
    1004:	str	xzr, [sp, #16]
    1008:	str	xzr, [sp, #24]
    100c:	str	xzr, [sp]
    1010:	str	xzr, [sp, #8]
    1014:	ldur	x0, [x29, #-16]
    1018:	ldur	x1, [x29, #-24]
    101c:	bl	1114 <tcase_run_checked_setup>
    1020:	str	x0, [sp, #32]
    1024:	ldr	x8, [sp, #32]
    1028:	cbnz	x8, 10fc <tcase_run_tfun_nofork+0x114>
    102c:	bl	0 <check_get_clockid>
    1030:	add	x1, sp, #0x10
    1034:	bl	0 <clock_gettime>
    1038:	adrp	x8, 0 <error_jmp_buffer>
    103c:	add	x8, x8, #0x0
    1040:	mov	x0, x8
    1044:	bl	0 <_setjmp>
    1048:	cbnz	w0, 1088 <tcase_run_tfun_nofork+0xa0>
    104c:	ldur	x8, [x29, #-32]
    1050:	ldr	x8, [x8]
    1054:	ldr	x0, [x8]
    1058:	ldur	x8, [x29, #-32]
    105c:	ldr	x8, [x8]
    1060:	ldr	x1, [x8, #16]
    1064:	ldur	x8, [x29, #-32]
    1068:	ldr	x8, [x8]
    106c:	ldr	w2, [x8, #24]
    1070:	bl	0 <tcase_fn_start>
    1074:	ldur	x8, [x29, #-32]
    1078:	ldr	x8, [x8]
    107c:	ldr	x8, [x8, #8]
    1080:	ldur	w0, [x29, #-36]
    1084:	blr	x8
    1088:	bl	0 <check_get_clockid>
    108c:	mov	x1, sp
    1090:	bl	0 <clock_gettime>
    1094:	ldur	x8, [x29, #-24]
    1098:	mov	x0, x8
    109c:	bl	1180 <tcase_run_checked_teardown>
    10a0:	ldur	x8, [x29, #-24]
    10a4:	ldr	x0, [x8]
    10a8:	ldur	x8, [x29, #-32]
    10ac:	ldr	x8, [x8]
    10b0:	ldr	x1, [x8]
    10b4:	ldur	w2, [x29, #-36]
    10b8:	ldr	x8, [sp]
    10bc:	ldr	x9, [sp, #16]
    10c0:	subs	x8, x8, x9
    10c4:	mov	x9, #0x4240                	// #16960
    10c8:	movk	x9, #0xf, lsl #16
    10cc:	mul	x8, x8, x9
    10d0:	ldr	x9, [sp, #8]
    10d4:	mov	x10, #0x3e8                 	// #1000
    10d8:	sdiv	x9, x9, x10
    10dc:	add	x8, x8, x9
    10e0:	ldr	x9, [sp, #24]
    10e4:	sdiv	x9, x9, x10
    10e8:	subs	x8, x8, x9
    10ec:	mov	w3, w8
    10f0:	bl	c78 <receive_result_info_nofork>
    10f4:	stur	x0, [x29, #-8]
    10f8:	b	1104 <tcase_run_tfun_nofork+0x11c>
    10fc:	ldr	x8, [sp, #32]
    1100:	stur	x8, [x29, #-8]
    1104:	ldur	x0, [x29, #-8]
    1108:	ldp	x29, x30, [sp, #80]
    110c:	add	sp, sp, #0x60
    1110:	ret

0000000000001114 <tcase_run_checked_setup>:
    1114:	sub	sp, sp, #0x40
    1118:	stp	x29, x30, [sp, #48]
    111c:	add	x29, sp, #0x30
    1120:	adrp	x3, 0 <srunner_fork_status>
    1124:	add	x3, x3, #0x0
    1128:	stur	x0, [x29, #-8]
    112c:	stur	x1, [x29, #-16]
    1130:	ldur	x8, [x29, #-16]
    1134:	ldr	x0, [x8, #48]
    1138:	ldur	x8, [x29, #-8]
    113c:	str	x0, [sp, #16]
    1140:	mov	x0, x8
    1144:	str	x3, [sp, #8]
    1148:	bl	0 <srunner_fork_status>
    114c:	ldur	x8, [x29, #-16]
    1150:	ldr	x2, [x8]
    1154:	ldr	x8, [sp, #16]
    1158:	str	w0, [sp, #4]
    115c:	mov	x0, x8
    1160:	ldr	w1, [sp, #4]
    1164:	ldr	x3, [sp, #8]
    1168:	bl	acc <srunner_run_setup>
    116c:	str	x0, [sp, #24]
    1170:	ldr	x0, [sp, #24]
    1174:	ldp	x29, x30, [sp, #48]
    1178:	add	sp, sp, #0x40
    117c:	ret

0000000000001180 <tcase_run_checked_teardown>:
    1180:	sub	sp, sp, #0x20
    1184:	stp	x29, x30, [sp, #16]
    1188:	add	x29, sp, #0x10
    118c:	mov	w1, #0x2                   	// #2
    1190:	str	x0, [sp, #8]
    1194:	ldr	x8, [sp, #8]
    1198:	ldr	x0, [x8, #56]
    119c:	bl	124c <srunner_run_teardown>
    11a0:	ldp	x29, x30, [sp, #16]
    11a4:	add	sp, sp, #0x20
    11a8:	ret

00000000000011ac <receive_result_info_fork>:
    11ac:	sub	sp, sp, #0x40
    11b0:	stp	x29, x30, [sp, #48]
    11b4:	add	x29, sp, #0x30
    11b8:	stur	x0, [x29, #-8]
    11bc:	stur	x1, [x29, #-16]
    11c0:	stur	w2, [x29, #-20]
    11c4:	str	w3, [sp, #24]
    11c8:	str	w4, [sp, #20]
    11cc:	strb	w5, [sp, #19]
    11d0:	ldr	w0, [sp, #24]
    11d4:	ldr	w1, [sp, #20]
    11d8:	bl	784 <waserror>
    11dc:	bl	0 <receive_test_result>
    11e0:	str	x0, [sp, #8]
    11e4:	ldr	x8, [sp, #8]
    11e8:	cbnz	x8, 1204 <receive_result_info_fork+0x58>
    11ec:	adrp	x0, 0 <srunner_fork_status>
    11f0:	add	x0, x0, #0x0
    11f4:	adrp	x1, 0 <srunner_fork_status>
    11f8:	add	x1, x1, #0x0
    11fc:	mov	w2, #0x22c                 	// #556
    1200:	bl	0 <eprintf>
    1204:	ldur	x8, [x29, #-8]
    1208:	ldr	x9, [sp, #8]
    120c:	str	x8, [x9, #32]
    1210:	ldur	x8, [x29, #-16]
    1214:	ldr	x9, [sp, #8]
    1218:	str	x8, [x9, #40]
    121c:	ldur	w10, [x29, #-20]
    1220:	ldr	x8, [sp, #8]
    1224:	str	w10, [x8, #20]
    1228:	ldr	x0, [sp, #8]
    122c:	ldr	w1, [sp, #24]
    1230:	ldr	w2, [sp, #20]
    1234:	ldrb	w3, [sp, #19]
    1238:	bl	12f0 <set_fork_info>
    123c:	ldr	x0, [sp, #8]
    1240:	ldp	x29, x30, [sp, #48]
    1244:	add	sp, sp, #0x40
    1248:	ret

000000000000124c <srunner_run_teardown>:
    124c:	sub	sp, sp, #0x30
    1250:	stp	x29, x30, [sp, #32]
    1254:	add	x29, sp, #0x20
    1258:	stur	x0, [x29, #-8]
    125c:	stur	w1, [x29, #-12]
    1260:	ldur	x0, [x29, #-8]
    1264:	bl	0 <check_list_front>
    1268:	ldur	x0, [x29, #-8]
    126c:	bl	0 <check_list_at_end>
    1270:	cmp	w0, #0x0
    1274:	cset	w8, ne  // ne = any
    1278:	eor	w8, w8, #0x1
    127c:	tbnz	w8, #0, 1284 <srunner_run_teardown+0x38>
    1280:	b	12e4 <srunner_run_teardown+0x98>
    1284:	ldur	x0, [x29, #-8]
    1288:	bl	0 <check_list_val>
    128c:	str	x0, [sp, #8]
    1290:	mov	w0, #0x3                   	// #3
    1294:	bl	0 <send_ctx_info>
    1298:	ldur	w8, [x29, #-12]
    129c:	cmp	w8, #0x2
    12a0:	b.ne	12cc <srunner_run_teardown+0x80>  // b.any
    12a4:	adrp	x0, 0 <error_jmp_buffer>
    12a8:	add	x0, x0, #0x0
    12ac:	bl	0 <_setjmp>
    12b0:	cbnz	w0, 12c4 <srunner_run_teardown+0x78>
    12b4:	ldr	x8, [sp, #8]
    12b8:	ldr	x8, [x8, #8]
    12bc:	blr	x8
    12c0:	b	12c8 <srunner_run_teardown+0x7c>
    12c4:	b	12e4 <srunner_run_teardown+0x98>
    12c8:	b	12d8 <srunner_run_teardown+0x8c>
    12cc:	ldr	x8, [sp, #8]
    12d0:	ldr	x8, [x8, #8]
    12d4:	blr	x8
    12d8:	ldur	x0, [x29, #-8]
    12dc:	bl	0 <check_list_advance>
    12e0:	b	1268 <srunner_run_teardown+0x1c>
    12e4:	ldp	x29, x30, [sp, #32]
    12e8:	add	sp, sp, #0x30
    12ec:	ret

00000000000012f0 <set_fork_info>:
    12f0:	sub	sp, sp, #0x40
    12f4:	stp	x29, x30, [sp, #48]
    12f8:	add	x29, sp, #0x30
    12fc:	stur	x0, [x29, #-8]
    1300:	stur	w1, [x29, #-12]
    1304:	stur	w2, [x29, #-16]
    1308:	sturb	w3, [x29, #-17]
    130c:	ldur	w8, [x29, #-12]
    1310:	and	w8, w8, #0x7f
    1314:	add	w8, w8, #0x1
    1318:	lsl	w8, w8, #24
    131c:	asr	w8, w8, #24
    1320:	asr	w8, w8, #1
    1324:	cmp	w8, #0x0
    1328:	cset	w8, gt
    132c:	and	w8, w8, #0x1
    1330:	str	w8, [sp, #24]
    1334:	ldur	w8, [x29, #-12]
    1338:	tst	w8, #0x7f
    133c:	cset	w8, eq  // eq = none
    1340:	and	w8, w8, #0x1
    1344:	str	w8, [sp, #20]
    1348:	ldur	w8, [x29, #-12]
    134c:	and	w8, w8, #0xff00
    1350:	asr	w8, w8, #8
    1354:	strb	w8, [sp, #19]
    1358:	ldur	w8, [x29, #-12]
    135c:	and	w8, w8, #0x7f
    1360:	str	w8, [sp, #12]
    1364:	ldr	w8, [sp, #24]
    1368:	cbz	w8, 1478 <set_fork_info+0x188>
    136c:	ldur	w8, [x29, #-16]
    1370:	ldr	w9, [sp, #12]
    1374:	cmp	w8, w9
    1378:	b.ne	13fc <set_fork_info+0x10c>  // b.any
    137c:	adrp	x8, 0 <srunner_fork_status>
    1380:	add	x8, x8, #0x0
    1384:	ldr	w9, [x8]
    1388:	cbz	w9, 13c8 <set_fork_info+0xd8>
    138c:	ldur	x8, [x29, #-8]
    1390:	mov	w9, #0x3                   	// #3
    1394:	str	w9, [x8]
    1398:	ldur	x8, [x29, #-8]
    139c:	ldr	x8, [x8, #48]
    13a0:	cbz	x8, 13b0 <set_fork_info+0xc0>
    13a4:	ldur	x8, [x29, #-8]
    13a8:	ldr	x0, [x8, #48]
    13ac:	bl	0 <free>
    13b0:	ldr	w0, [sp, #12]
    13b4:	ldur	w1, [x29, #-16]
    13b8:	bl	1588 <signal_error_msg>
    13bc:	ldur	x8, [x29, #-8]
    13c0:	str	x0, [x8, #48]
    13c4:	b	13f8 <set_fork_info+0x108>
    13c8:	ldur	x8, [x29, #-8]
    13cc:	mov	w9, #0x1                   	// #1
    13d0:	str	w9, [x8]
    13d4:	ldur	x8, [x29, #-8]
    13d8:	ldr	x8, [x8, #48]
    13dc:	cbz	x8, 13ec <set_fork_info+0xfc>
    13e0:	ldur	x8, [x29, #-8]
    13e4:	ldr	x0, [x8, #48]
    13e8:	bl	0 <free>
    13ec:	bl	d5c <pass_msg>
    13f0:	ldur	x8, [x29, #-8]
    13f4:	str	x0, [x8, #48]
    13f8:	b	1474 <set_fork_info+0x184>
    13fc:	ldur	w8, [x29, #-16]
    1400:	cbz	w8, 1440 <set_fork_info+0x150>
    1404:	ldur	x8, [x29, #-8]
    1408:	mov	w9, #0x3                   	// #3
    140c:	str	w9, [x8]
    1410:	ldur	x8, [x29, #-8]
    1414:	ldr	x8, [x8, #48]
    1418:	cbz	x8, 1428 <set_fork_info+0x138>
    141c:	ldur	x8, [x29, #-8]
    1420:	ldr	x0, [x8, #48]
    1424:	bl	0 <free>
    1428:	ldr	w0, [sp, #12]
    142c:	ldur	w1, [x29, #-16]
    1430:	bl	1588 <signal_error_msg>
    1434:	ldur	x8, [x29, #-8]
    1438:	str	x0, [x8, #48]
    143c:	b	1474 <set_fork_info+0x184>
    1440:	ldur	x8, [x29, #-8]
    1444:	mov	w9, #0x3                   	// #3
    1448:	str	w9, [x8]
    144c:	ldur	x8, [x29, #-8]
    1450:	ldr	x8, [x8, #48]
    1454:	cbz	x8, 1464 <set_fork_info+0x174>
    1458:	ldur	x8, [x29, #-8]
    145c:	ldr	x0, [x8, #48]
    1460:	bl	0 <free>
    1464:	ldr	w0, [sp, #12]
    1468:	bl	1648 <signal_msg>
    146c:	ldur	x8, [x29, #-8]
    1470:	str	x0, [x8, #48]
    1474:	b	157c <set_fork_info+0x28c>
    1478:	ldur	w8, [x29, #-16]
    147c:	cbnz	w8, 1520 <set_fork_info+0x230>
    1480:	ldr	w8, [sp, #20]
    1484:	cbz	w8, 14cc <set_fork_info+0x1dc>
    1488:	ldrsb	w8, [sp, #19]
    148c:	ldursb	w9, [x29, #-17]
    1490:	cmp	w8, w9
    1494:	b.ne	14cc <set_fork_info+0x1dc>  // b.any
    1498:	ldur	x8, [x29, #-8]
    149c:	mov	w9, #0x1                   	// #1
    14a0:	str	w9, [x8]
    14a4:	ldur	x8, [x29, #-8]
    14a8:	ldr	x8, [x8, #48]
    14ac:	cbz	x8, 14bc <set_fork_info+0x1cc>
    14b0:	ldur	x8, [x29, #-8]
    14b4:	ldr	x0, [x8, #48]
    14b8:	bl	0 <free>
    14bc:	bl	d5c <pass_msg>
    14c0:	ldur	x8, [x29, #-8]
    14c4:	str	x0, [x8, #48]
    14c8:	b	151c <set_fork_info+0x22c>
    14cc:	ldr	w8, [sp, #20]
    14d0:	cbz	w8, 151c <set_fork_info+0x22c>
    14d4:	ldrsb	w8, [sp, #19]
    14d8:	ldursb	w9, [x29, #-17]
    14dc:	cmp	w8, w9
    14e0:	b.eq	151c <set_fork_info+0x22c>  // b.none
    14e4:	ldur	x8, [x29, #-8]
    14e8:	ldr	x8, [x8, #48]
    14ec:	cbnz	x8, 1510 <set_fork_info+0x220>
    14f0:	ldur	x8, [x29, #-8]
    14f4:	mov	w9, #0x3                   	// #3
    14f8:	str	w9, [x8]
    14fc:	ldrsb	w0, [sp, #19]
    1500:	bl	16e8 <exit_msg>
    1504:	ldur	x8, [x29, #-8]
    1508:	str	x0, [x8, #48]
    150c:	b	151c <set_fork_info+0x22c>
    1510:	ldur	x8, [x29, #-8]
    1514:	mov	w9, #0x2                   	// #2
    1518:	str	w9, [x8]
    151c:	b	157c <set_fork_info+0x28c>
    1520:	ldr	w8, [sp, #20]
    1524:	cbz	w8, 157c <set_fork_info+0x28c>
    1528:	ldur	x8, [x29, #-8]
    152c:	ldr	x8, [x8, #48]
    1530:	cbz	x8, 1540 <set_fork_info+0x250>
    1534:	ldur	x8, [x29, #-8]
    1538:	ldr	x0, [x8, #48]
    153c:	bl	0 <free>
    1540:	ldrsb	w0, [sp, #19]
    1544:	bl	16e8 <exit_msg>
    1548:	ldur	x8, [x29, #-8]
    154c:	str	x0, [x8, #48]
    1550:	ldrsb	w9, [sp, #19]
    1554:	ldursb	w10, [x29, #-17]
    1558:	cmp	w9, w10
    155c:	b.ne	1570 <set_fork_info+0x280>  // b.any
    1560:	ldur	x8, [x29, #-8]
    1564:	mov	w9, #0x2                   	// #2
    1568:	str	w9, [x8]
    156c:	b	157c <set_fork_info+0x28c>
    1570:	ldur	x8, [x29, #-8]
    1574:	mov	w9, #0x2                   	// #2
    1578:	str	w9, [x8]
    157c:	ldp	x29, x30, [sp, #48]
    1580:	add	sp, sp, #0x40
    1584:	ret

0000000000001588 <signal_error_msg>:
    1588:	sub	sp, sp, #0x40
    158c:	stp	x29, x30, [sp, #48]
    1590:	add	x29, sp, #0x30
    1594:	mov	x8, #0x64                  	// #100
    1598:	adrp	x9, 0 <srunner_fork_status>
    159c:	add	x9, x9, #0x0
    15a0:	stur	w0, [x29, #-4]
    15a4:	stur	w1, [x29, #-8]
    15a8:	mov	x0, x8
    15ac:	str	x9, [sp, #8]
    15b0:	bl	0 <emalloc>
    15b4:	str	x0, [sp, #16]
    15b8:	ldur	w0, [x29, #-4]
    15bc:	bl	0 <strsignal>
    15c0:	bl	0 <strdup>
    15c4:	stur	x0, [x29, #-16]
    15c8:	ldur	w0, [x29, #-8]
    15cc:	bl	0 <strsignal>
    15d0:	bl	0 <strdup>
    15d4:	str	x0, [sp, #24]
    15d8:	ldr	x8, [sp, #8]
    15dc:	ldr	w10, [x8]
    15e0:	cbz	w10, 1604 <signal_error_msg+0x7c>
    15e4:	ldr	x0, [sp, #16]
    15e8:	ldur	w3, [x29, #-8]
    15ec:	ldr	x4, [sp, #24]
    15f0:	mov	x1, #0x64                  	// #100
    15f4:	adrp	x2, 0 <srunner_fork_status>
    15f8:	add	x2, x2, #0x0
    15fc:	bl	0 <snprintf>
    1600:	b	1628 <signal_error_msg+0xa0>
    1604:	ldr	x0, [sp, #16]
    1608:	ldur	w3, [x29, #-4]
    160c:	ldur	x4, [x29, #-16]
    1610:	ldur	w5, [x29, #-8]
    1614:	ldr	x6, [sp, #24]
    1618:	mov	x1, #0x64                  	// #100
    161c:	adrp	x2, 0 <srunner_fork_status>
    1620:	add	x2, x2, #0x0
    1624:	bl	0 <snprintf>
    1628:	ldur	x0, [x29, #-16]
    162c:	bl	0 <free>
    1630:	ldr	x0, [sp, #24]
    1634:	bl	0 <free>
    1638:	ldr	x0, [sp, #16]
    163c:	ldp	x29, x30, [sp, #48]
    1640:	add	sp, sp, #0x40
    1644:	ret

0000000000001648 <signal_msg>:
    1648:	sub	sp, sp, #0x40
    164c:	stp	x29, x30, [sp, #48]
    1650:	add	x29, sp, #0x30
    1654:	mov	x8, #0x64                  	// #100
    1658:	adrp	x9, 0 <srunner_fork_status>
    165c:	add	x9, x9, #0x0
    1660:	stur	w0, [x29, #-4]
    1664:	mov	x0, x8
    1668:	str	x9, [sp, #24]
    166c:	bl	0 <emalloc>
    1670:	stur	x0, [x29, #-16]
    1674:	ldr	x8, [sp, #24]
    1678:	ldr	w10, [x8]
    167c:	cbz	w10, 1698 <signal_msg+0x50>
    1680:	ldur	x0, [x29, #-16]
    1684:	mov	x1, #0x64                  	// #100
    1688:	adrp	x2, 0 <srunner_fork_status>
    168c:	add	x2, x2, #0x0
    1690:	bl	0 <snprintf>
    1694:	b	16d8 <signal_msg+0x90>
    1698:	ldur	x0, [x29, #-16]
    169c:	ldur	w3, [x29, #-4]
    16a0:	ldur	w8, [x29, #-4]
    16a4:	str	x0, [sp, #16]
    16a8:	mov	w0, w8
    16ac:	str	w3, [sp, #12]
    16b0:	bl	0 <strsignal>
    16b4:	ldr	x9, [sp, #16]
    16b8:	str	x0, [sp]
    16bc:	mov	x0, x9
    16c0:	mov	x1, #0x64                  	// #100
    16c4:	adrp	x2, 0 <srunner_fork_status>
    16c8:	add	x2, x2, #0x0
    16cc:	ldr	w3, [sp, #12]
    16d0:	ldr	x4, [sp]
    16d4:	bl	0 <snprintf>
    16d8:	ldur	x0, [x29, #-16]
    16dc:	ldp	x29, x30, [sp, #48]
    16e0:	add	sp, sp, #0x40
    16e4:	ret

00000000000016e8 <exit_msg>:
    16e8:	sub	sp, sp, #0x30
    16ec:	stp	x29, x30, [sp, #32]
    16f0:	add	x29, sp, #0x20
    16f4:	mov	x8, #0x64                  	// #100
    16f8:	adrp	x2, 0 <srunner_fork_status>
    16fc:	add	x2, x2, #0x0
    1700:	stur	w0, [x29, #-4]
    1704:	mov	x0, x8
    1708:	str	x8, [sp, #8]
    170c:	str	x2, [sp]
    1710:	bl	0 <emalloc>
    1714:	str	x0, [sp, #16]
    1718:	ldr	x0, [sp, #16]
    171c:	ldur	w3, [x29, #-4]
    1720:	ldr	x1, [sp, #8]
    1724:	ldr	x2, [sp]
    1728:	bl	0 <snprintf>
    172c:	ldr	x8, [sp, #16]
    1730:	mov	x0, x8
    1734:	ldp	x29, x30, [sp, #32]
    1738:	add	sp, sp, #0x30
    173c:	ret

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x50
   4:	stp	x29, x30, [sp, #64]
   8:	add	x29, sp, #0x40
   c:	adrp	x8, 0 <tr_str>
  10:	add	x8, x8, #0x0
  14:	adrp	x9, 0 <tr_str>
  18:	add	x9, x9, #0x0
  1c:	adrp	x10, 0 <tr_str>
  20:	add	x10, x10, #0x0
  24:	stur	x0, [x29, #-8]
  28:	ldur	x11, [x29, #-8]
  2c:	ldr	w12, [x11]
  30:	cmp	w12, #0x3
  34:	csel	x8, x8, x9, eq  // eq = none
  38:	stur	x8, [x29, #-16]
  3c:	ldur	x8, [x29, #-8]
  40:	ldr	x1, [x8, #8]
  44:	ldur	x8, [x29, #-8]
  48:	ldr	w2, [x8, #16]
  4c:	ldur	x0, [x29, #-8]
  50:	str	x10, [sp, #32]
  54:	str	x1, [sp, #24]
  58:	str	w2, [sp, #20]
  5c:	bl	200 <tr_type_str>
  60:	ldur	x8, [x29, #-8]
  64:	ldr	x4, [x8, #32]
  68:	ldur	x8, [x29, #-8]
  6c:	ldr	x5, [x8, #40]
  70:	ldur	x8, [x29, #-8]
  74:	ldr	w6, [x8, #20]
  78:	ldur	x7, [x29, #-16]
  7c:	ldur	x8, [x29, #-8]
  80:	ldr	x8, [x8, #48]
  84:	ldr	x9, [sp, #32]
  88:	str	x0, [sp, #8]
  8c:	mov	x0, x9
  90:	ldr	x1, [sp, #24]
  94:	ldr	w2, [sp, #20]
  98:	ldr	x3, [sp, #8]
  9c:	mov	x10, sp
  a0:	str	x8, [x10]
  a4:	bl	bc <ck_strdup_printf>
  a8:	stur	x0, [x29, #-24]
  ac:	ldur	x0, [x29, #-24]
  b0:	ldp	x29, x30, [sp, #64]
  b4:	add	sp, sp, #0x50
  b8:	ret

00000000000000bc <ck_strdup_printf>:
  bc:	sub	sp, sp, #0x150
  c0:	stp	x29, x30, [sp, #304]
  c4:	str	x28, [sp, #320]
  c8:	add	x29, sp, #0x130
  cc:	sub	x8, x29, #0x38
  d0:	str	q7, [sp, #128]
  d4:	str	q6, [sp, #112]
  d8:	str	q5, [sp, #96]
  dc:	str	q4, [sp, #80]
  e0:	str	q3, [sp, #64]
  e4:	str	q2, [sp, #48]
  e8:	str	q1, [sp, #32]
  ec:	str	q0, [sp, #16]
  f0:	str	x7, [sp, #200]
  f4:	str	x6, [sp, #192]
  f8:	str	x5, [sp, #184]
  fc:	str	x4, [sp, #176]
 100:	str	x3, [sp, #168]
 104:	str	x2, [sp, #160]
 108:	str	x1, [sp, #152]
 10c:	stur	x0, [x29, #-8]
 110:	mov	w9, #0x64                  	// #100
 114:	mov	w10, w9
 118:	stur	x10, [x29, #-16]
 11c:	ldur	x0, [x29, #-16]
 120:	str	x8, [sp, #8]
 124:	bl	0 <emalloc>
 128:	stur	x0, [x29, #-24]
 12c:	b	130 <ck_strdup_printf+0x74>
 130:	mov	w8, #0xffffff80            	// #-128
 134:	stur	w8, [x29, #-28]
 138:	mov	w8, #0xffffffc8            	// #-56
 13c:	stur	w8, [x29, #-32]
 140:	add	x9, x29, #0x20
 144:	stur	x9, [x29, #-56]
 148:	add	x9, sp, #0x10
 14c:	add	x9, x9, #0x80
 150:	stur	x9, [x29, #-40]
 154:	add	x9, sp, #0x98
 158:	add	x9, x9, #0x38
 15c:	stur	x9, [x29, #-48]
 160:	ldur	x0, [x29, #-24]
 164:	ldur	x1, [x29, #-16]
 168:	ldur	x2, [x29, #-8]
 16c:	ldr	x9, [sp, #8]
 170:	ldr	q0, [x9]
 174:	ldr	q1, [x9, #16]
 178:	stur	q1, [x29, #-80]
 17c:	stur	q0, [x29, #-96]
 180:	sub	x3, x29, #0x60
 184:	bl	0 <vsnprintf>
 188:	stur	w0, [x29, #-60]
 18c:	ldur	w8, [x29, #-60]
 190:	tbnz	w8, #31, 1c0 <ck_strdup_printf+0x104>
 194:	b	198 <ck_strdup_printf+0xdc>
 198:	ldur	w8, [x29, #-60]
 19c:	ldur	w9, [x29, #-16]
 1a0:	subs	w8, w8, w9
 1a4:	b.ge	1c0 <ck_strdup_printf+0x104>  // b.tcont
 1a8:	b	1ac <ck_strdup_printf+0xf0>
 1ac:	ldur	x0, [x29, #-24]
 1b0:	ldr	x28, [sp, #320]
 1b4:	ldp	x29, x30, [sp, #304]
 1b8:	add	sp, sp, #0x150
 1bc:	ret
 1c0:	ldur	w8, [x29, #-60]
 1c4:	tbnz	w8, #31, 1dc <ck_strdup_printf+0x120>
 1c8:	b	1cc <ck_strdup_printf+0x110>
 1cc:	ldursw	x8, [x29, #-60]
 1d0:	add	x8, x8, #0x1
 1d4:	stur	x8, [x29, #-16]
 1d8:	b	1ec <ck_strdup_printf+0x130>
 1dc:	ldur	x8, [x29, #-16]
 1e0:	lsl	x8, x8, #1
 1e4:	stur	x8, [x29, #-16]
 1e8:	b	1ec <ck_strdup_printf+0x130>
 1ec:	ldur	x0, [x29, #-24]
 1f0:	ldur	x1, [x29, #-16]
 1f4:	bl	0 <erealloc>
 1f8:	stur	x0, [x29, #-24]
 1fc:	b	130 <ck_strdup_printf+0x74>

0000000000000200 <tr_type_str>:
 200:	sub	sp, sp, #0x10
 204:	str	x0, [sp]
 208:	ldr	x8, [sp]
 20c:	ldr	w9, [x8, #4]
 210:	cmp	w9, #0x2
 214:	b.ne	284 <tr_type_str+0x84>  // b.any
 218:	ldr	x8, [sp]
 21c:	ldr	w9, [x8]
 220:	cmp	w9, #0x1
 224:	b.ne	238 <tr_type_str+0x38>  // b.any
 228:	adrp	x8, 0 <tr_str>
 22c:	add	x8, x8, #0x0
 230:	str	x8, [sp, #8]
 234:	b	290 <tr_type_str+0x90>
 238:	ldr	x8, [sp]
 23c:	ldr	w9, [x8]
 240:	cmp	w9, #0x2
 244:	b.ne	258 <tr_type_str+0x58>  // b.any
 248:	adrp	x8, 0 <tr_str>
 24c:	add	x8, x8, #0x0
 250:	str	x8, [sp, #8]
 254:	b	290 <tr_type_str+0x90>
 258:	ldr	x8, [sp]
 25c:	ldr	w9, [x8]
 260:	cmp	w9, #0x3
 264:	b.ne	278 <tr_type_str+0x78>  // b.any
 268:	adrp	x8, 0 <tr_str>
 26c:	add	x8, x8, #0x0
 270:	str	x8, [sp, #8]
 274:	b	290 <tr_type_str+0x90>
 278:	mov	x8, xzr
 27c:	str	x8, [sp, #8]
 280:	b	290 <tr_type_str+0x90>
 284:	adrp	x8, 0 <tr_str>
 288:	add	x8, x8, #0x0
 28c:	str	x8, [sp, #8]
 290:	ldr	x0, [sp, #8]
 294:	add	sp, sp, #0x10
 298:	ret

000000000000029c <tr_short_str>:
 29c:	sub	sp, sp, #0x30
 2a0:	stp	x29, x30, [sp, #32]
 2a4:	add	x29, sp, #0x20
 2a8:	adrp	x8, 0 <tr_str>
 2ac:	add	x8, x8, #0x0
 2b0:	adrp	x9, 0 <tr_str>
 2b4:	add	x9, x9, #0x0
 2b8:	adrp	x10, 0 <tr_str>
 2bc:	add	x10, x10, #0x0
 2c0:	stur	x0, [x29, #-8]
 2c4:	ldur	x11, [x29, #-8]
 2c8:	ldr	w12, [x11]
 2cc:	cmp	w12, #0x3
 2d0:	csel	x8, x8, x9, eq  // eq = none
 2d4:	str	x8, [sp, #16]
 2d8:	ldur	x8, [x29, #-8]
 2dc:	ldr	x1, [x8, #8]
 2e0:	ldur	x8, [x29, #-8]
 2e4:	ldr	w2, [x8, #16]
 2e8:	ldr	x3, [sp, #16]
 2ec:	ldur	x8, [x29, #-8]
 2f0:	ldr	x4, [x8, #48]
 2f4:	mov	x0, x10
 2f8:	bl	bc <ck_strdup_printf>
 2fc:	str	x0, [sp, #8]
 300:	ldr	x0, [sp, #8]
 304:	ldp	x29, x30, [sp, #32]
 308:	add	sp, sp, #0x30
 30c:	ret

0000000000000310 <sr_stat_str>:
 310:	sub	sp, sp, #0x40
 314:	stp	x29, x30, [sp, #48]
 318:	add	x29, sp, #0x30
 31c:	adrp	x8, 0 <tr_str>
 320:	add	x8, x8, #0x0
 324:	stur	x0, [x29, #-8]
 328:	ldur	x9, [x29, #-8]
 32c:	ldr	x9, [x9, #8]
 330:	str	x9, [sp, #24]
 334:	ldr	x0, [sp, #24]
 338:	str	x8, [sp, #16]
 33c:	bl	380 <percent_passed>
 340:	ldr	x8, [sp, #24]
 344:	ldr	w2, [x8]
 348:	ldr	x8, [sp, #24]
 34c:	ldr	w3, [x8, #4]
 350:	ldr	x8, [sp, #24]
 354:	ldr	w4, [x8, #8]
 358:	ldr	x8, [sp, #16]
 35c:	str	w0, [sp, #12]
 360:	mov	x0, x8
 364:	ldr	w1, [sp, #12]
 368:	bl	bc <ck_strdup_printf>
 36c:	stur	x0, [x29, #-16]
 370:	ldur	x0, [x29, #-16]
 374:	ldp	x29, x30, [sp, #48]
 378:	add	sp, sp, #0x40
 37c:	ret

0000000000000380 <percent_passed>:
 380:	sub	sp, sp, #0x10
 384:	str	x0, [sp]
 388:	ldr	x8, [sp]
 38c:	ldr	w9, [x8, #4]
 390:	cbnz	w9, 3ac <percent_passed+0x2c>
 394:	ldr	x8, [sp]
 398:	ldr	w9, [x8, #8]
 39c:	cbnz	w9, 3ac <percent_passed+0x2c>
 3a0:	mov	w8, #0x64                  	// #100
 3a4:	str	w8, [sp, #12]
 3a8:	b	408 <percent_passed+0x88>
 3ac:	ldr	x8, [sp]
 3b0:	ldr	w9, [x8]
 3b4:	cbnz	w9, 3c0 <percent_passed+0x40>
 3b8:	str	wzr, [sp, #12]
 3bc:	b	408 <percent_passed+0x88>
 3c0:	ldr	x8, [sp]
 3c4:	ldr	w9, [x8]
 3c8:	ldr	x8, [sp]
 3cc:	ldr	w10, [x8, #4]
 3d0:	ldr	x8, [sp]
 3d4:	ldr	w11, [x8, #8]
 3d8:	add	w10, w10, w11
 3dc:	subs	w9, w9, w10
 3e0:	scvtf	s0, w9
 3e4:	ldr	x8, [sp]
 3e8:	ldr	w9, [x8]
 3ec:	scvtf	s1, w9
 3f0:	fdiv	s0, s0, s1
 3f4:	mov	w9, #0x42c80000            	// #1120403456
 3f8:	fmov	s1, w9
 3fc:	fmul	s0, s0, s1
 400:	fcvtzs	w9, s0
 404:	str	w9, [sp, #12]
 408:	ldr	w0, [sp, #12]
 40c:	add	sp, sp, #0x10
 410:	ret

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <ck_do_nothing>
   c:	add	x0, x0, #0x0
  10:	adrp	x1, 0 <ck_do_nothing>
  14:	add	x1, x1, #0x0
  18:	mov	w2, #0x1a                  	// #26
  1c:	adrp	x3, 0 <ck_do_nothing>
  20:	add	x3, x3, #0x0
  24:	bl	0 <__assert_fail>
