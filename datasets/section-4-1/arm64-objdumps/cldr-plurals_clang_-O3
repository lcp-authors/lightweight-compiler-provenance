
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//cldr-plurals_clang_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401270 <_init>:
  401270:	stp	x29, x30, [sp, #-16]!
  401274:	mov	x29, sp
  401278:	bl	401620 <call_weak_fn>
  40127c:	ldp	x29, x30, [sp], #16
  401280:	ret

Disassembly of section .plt:

0000000000401290 <.plt>:
  401290:	stp	x16, x30, [sp, #-16]!
  401294:	adrp	x16, 415000 <__FRAME_END__+0x1018c>
  401298:	ldr	x17, [x16, #4088]
  40129c:	add	x16, x16, #0xff8
  4012a0:	br	x17
  4012a4:	nop
  4012a8:	nop
  4012ac:	nop

00000000004012b0 <memcpy@plt>:
  4012b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012b4:	ldr	x17, [x16]
  4012b8:	add	x16, x16, #0x0
  4012bc:	br	x17

00000000004012c0 <strlen@plt>:
  4012c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012c4:	ldr	x17, [x16, #8]
  4012c8:	add	x16, x16, #0x8
  4012cc:	br	x17

00000000004012d0 <exit@plt>:
  4012d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012d4:	ldr	x17, [x16, #16]
  4012d8:	add	x16, x16, #0x10
  4012dc:	br	x17

00000000004012e0 <error@plt>:
  4012e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012e4:	ldr	x17, [x16, #24]
  4012e8:	add	x16, x16, #0x18
  4012ec:	br	x17

00000000004012f0 <set_program_name@plt>:
  4012f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012f4:	ldr	x17, [x16, #32]
  4012f8:	add	x16, x16, #0x20
  4012fc:	br	x17

0000000000401300 <xmlHasProp@plt>:
  401300:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401304:	ldr	x17, [x16, #40]
  401308:	add	x16, x16, #0x28
  40130c:	br	x17

0000000000401310 <sprintf@plt>:
  401310:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401314:	ldr	x17, [x16, #48]
  401318:	add	x16, x16, #0x30
  40131c:	br	x17

0000000000401320 <xmlFreeDoc@plt>:
  401320:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401324:	ldr	x17, [x16, #56]
  401328:	add	x16, x16, #0x38
  40132c:	br	x17

0000000000401330 <__cxa_atexit@plt>:
  401330:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401334:	ldr	x17, [x16, #64]
  401338:	add	x16, x16, #0x40
  40133c:	br	x17

0000000000401340 <fputc@plt>:
  401340:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401344:	ldr	x17, [x16, #72]
  401348:	add	x16, x16, #0x48
  40134c:	br	x17

0000000000401350 <fileno@plt>:
  401350:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401354:	ldr	x17, [x16, #80]
  401358:	add	x16, x16, #0x50
  40135c:	br	x17

0000000000401360 <fclose@plt>:
  401360:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401364:	ldr	x17, [x16, #88]
  401368:	add	x16, x16, #0x58
  40136c:	br	x17

0000000000401370 <fopen@plt>:
  401370:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401374:	ldr	x17, [x16, #96]
  401378:	add	x16, x16, #0x60
  40137c:	br	x17

0000000000401380 <malloc@plt>:
  401380:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401384:	ldr	x17, [x16, #104]
  401388:	add	x16, x16, #0x68
  40138c:	br	x17

0000000000401390 <xrealloc@plt>:
  401390:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401394:	ldr	x17, [x16, #112]
  401398:	add	x16, x16, #0x70
  40139c:	br	x17

00000000004013a0 <xmlGetProp@plt>:
  4013a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013a4:	ldr	x17, [x16, #120]
  4013a8:	add	x16, x16, #0x78
  4013ac:	br	x17

00000000004013b0 <xmlCheckVersion@plt>:
  4013b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013b4:	ldr	x17, [x16, #128]
  4013b8:	add	x16, x16, #0x80
  4013bc:	br	x17

00000000004013c0 <strncmp@plt>:
  4013c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013c4:	ldr	x17, [x16, #136]
  4013c8:	add	x16, x16, #0x88
  4013cc:	br	x17

00000000004013d0 <bindtextdomain@plt>:
  4013d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013d4:	ldr	x17, [x16, #144]
  4013d8:	add	x16, x16, #0x90
  4013dc:	br	x17

00000000004013e0 <__libc_start_main@plt>:
  4013e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013e4:	ldr	x17, [x16, #152]
  4013e8:	add	x16, x16, #0x98
  4013ec:	br	x17

00000000004013f0 <memset@plt>:
  4013f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013f4:	ldr	x17, [x16, #160]
  4013f8:	add	x16, x16, #0xa0
  4013fc:	br	x17

0000000000401400 <xmalloc@plt>:
  401400:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401404:	ldr	x17, [x16, #168]
  401408:	add	x16, x16, #0xa8
  40140c:	br	x17

0000000000401410 <xstrdup@plt>:
  401410:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401414:	ldr	x17, [x16, #176]
  401418:	add	x16, x16, #0xb0
  40141c:	br	x17

0000000000401420 <xmlStrlen@plt>:
  401420:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401424:	ldr	x17, [x16, #184]
  401428:	add	x16, x16, #0xb8
  40142c:	br	x17

0000000000401430 <close_stdout@plt>:
  401430:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401434:	ldr	x17, [x16, #192]
  401438:	add	x16, x16, #0xc0
  40143c:	br	x17

0000000000401440 <xmlNodeGetContent@plt>:
  401440:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401444:	ldr	x17, [x16, #200]
  401448:	add	x16, x16, #0xc8
  40144c:	br	x17

0000000000401450 <xmlReadFd@plt>:
  401450:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401454:	ldr	x17, [x16, #208]
  401458:	add	x16, x16, #0xd0
  40145c:	br	x17

0000000000401460 <strrchr@plt>:
  401460:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401464:	ldr	x17, [x16, #216]
  401468:	add	x16, x16, #0xd8
  40146c:	br	x17

0000000000401470 <__gmon_start__@plt>:
  401470:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401474:	ldr	x17, [x16, #224]
  401478:	add	x16, x16, #0xe0
  40147c:	br	x17

0000000000401480 <abort@plt>:
  401480:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401484:	ldr	x17, [x16, #232]
  401488:	add	x16, x16, #0xe8
  40148c:	br	x17

0000000000401490 <u8_mbtouc_aux@plt>:
  401490:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401494:	ldr	x17, [x16, #240]
  401498:	add	x16, x16, #0xf0
  40149c:	br	x17

00000000004014a0 <puts@plt>:
  4014a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014a4:	ldr	x17, [x16, #248]
  4014a8:	add	x16, x16, #0xf8
  4014ac:	br	x17

00000000004014b0 <textdomain@plt>:
  4014b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014b4:	ldr	x17, [x16, #256]
  4014b8:	add	x16, x16, #0x100
  4014bc:	br	x17

00000000004014c0 <getopt_long@plt>:
  4014c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014c4:	ldr	x17, [x16, #264]
  4014c8:	add	x16, x16, #0x108
  4014cc:	br	x17

00000000004014d0 <strcmp@plt>:
  4014d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014d4:	ldr	x17, [x16, #272]
  4014d8:	add	x16, x16, #0x110
  4014dc:	br	x17

00000000004014e0 <basename@plt>:
  4014e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014e4:	ldr	x17, [x16, #280]
  4014e8:	add	x16, x16, #0x118
  4014ec:	br	x17

00000000004014f0 <proper_name@plt>:
  4014f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014f4:	ldr	x17, [x16, #288]
  4014f8:	add	x16, x16, #0x120
  4014fc:	br	x17

0000000000401500 <free@plt>:
  401500:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401504:	ldr	x17, [x16, #296]
  401508:	add	x16, x16, #0x128
  40150c:	br	x17

0000000000401510 <fwrite@plt>:
  401510:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401514:	ldr	x17, [x16, #304]
  401518:	add	x16, x16, #0x130
  40151c:	br	x17

0000000000401520 <xmlGetLineNo@plt>:
  401520:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401524:	ldr	x17, [x16, #312]
  401528:	add	x16, x16, #0x138
  40152c:	br	x17

0000000000401530 <dcgettext@plt>:
  401530:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401534:	ldr	x17, [x16, #320]
  401538:	add	x16, x16, #0x140
  40153c:	br	x17

0000000000401540 <xmlStrncmp@plt>:
  401540:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401544:	ldr	x17, [x16, #328]
  401548:	add	x16, x16, #0x148
  40154c:	br	x17

0000000000401550 <printf@plt>:
  401550:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401554:	ldr	x17, [x16, #336]
  401558:	add	x16, x16, #0x150
  40155c:	br	x17

0000000000401560 <xmlStrEqual@plt>:
  401560:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401564:	ldr	x17, [x16, #344]
  401568:	add	x16, x16, #0x158
  40156c:	br	x17

0000000000401570 <xmlDocGetRootElement@plt>:
  401570:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401574:	ldr	x17, [x16, #352]
  401578:	add	x16, x16, #0x160
  40157c:	br	x17

0000000000401580 <putchar@plt>:
  401580:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401584:	ldr	x17, [x16, #360]
  401588:	add	x16, x16, #0x168
  40158c:	br	x17

0000000000401590 <__getdelim@plt>:
  401590:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401594:	ldr	x17, [x16, #368]
  401598:	add	x16, x16, #0x170
  40159c:	br	x17

00000000004015a0 <error_at_line@plt>:
  4015a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015a4:	ldr	x17, [x16, #376]
  4015a8:	add	x16, x16, #0x178
  4015ac:	br	x17

00000000004015b0 <fprintf@plt>:
  4015b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015b4:	ldr	x17, [x16, #384]
  4015b8:	add	x16, x16, #0x180
  4015bc:	br	x17

00000000004015c0 <setlocale@plt>:
  4015c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015c4:	ldr	x17, [x16, #392]
  4015c8:	add	x16, x16, #0x188
  4015cc:	br	x17

Disassembly of section .text:

00000000004015d0 <_start>:
  4015d0:	mov	x29, #0x0                   	// #0
  4015d4:	mov	x30, #0x0                   	// #0
  4015d8:	mov	x5, x0
  4015dc:	ldr	x1, [sp]
  4015e0:	add	x2, sp, #0x8
  4015e4:	mov	x6, sp
  4015e8:	movz	x0, #0x0, lsl #48
  4015ec:	movk	x0, #0x0, lsl #32
  4015f0:	movk	x0, #0x40, lsl #16
  4015f4:	movk	x0, #0x3908
  4015f8:	movz	x3, #0x0, lsl #48
  4015fc:	movk	x3, #0x0, lsl #32
  401600:	movk	x3, #0x40, lsl #16
  401604:	movk	x3, #0x4270
  401608:	movz	x4, #0x0, lsl #48
  40160c:	movk	x4, #0x0, lsl #32
  401610:	movk	x4, #0x40, lsl #16
  401614:	movk	x4, #0x42f0
  401618:	bl	4013e0 <__libc_start_main@plt>
  40161c:	bl	401480 <abort@plt>

0000000000401620 <call_weak_fn>:
  401620:	adrp	x0, 415000 <__FRAME_END__+0x1018c>
  401624:	ldr	x0, [x0, #4064]
  401628:	cbz	x0, 401630 <call_weak_fn+0x10>
  40162c:	b	401470 <__gmon_start__@plt>
  401630:	ret
  401634:	nop

0000000000401638 <deregister_tm_clones>:
  401638:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  40163c:	add	x0, x0, #0x1a0
  401640:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401644:	add	x1, x1, #0x1a0
  401648:	cmp	x1, x0
  40164c:	b.eq	401664 <deregister_tm_clones+0x2c>  // b.none
  401650:	adrp	x1, 404000 <extract_rules+0x224>
  401654:	ldr	x1, [x1, #800]
  401658:	cbz	x1, 401664 <deregister_tm_clones+0x2c>
  40165c:	mov	x16, x1
  401660:	br	x16
  401664:	ret

0000000000401668 <register_tm_clones>:
  401668:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  40166c:	add	x0, x0, #0x1a0
  401670:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401674:	add	x1, x1, #0x1a0
  401678:	sub	x1, x1, x0
  40167c:	lsr	x2, x1, #63
  401680:	add	x1, x2, x1, asr #3
  401684:	cmp	xzr, x1, asr #1
  401688:	asr	x1, x1, #1
  40168c:	b.eq	4016a4 <register_tm_clones+0x3c>  // b.none
  401690:	adrp	x2, 404000 <extract_rules+0x224>
  401694:	ldr	x2, [x2, #808]
  401698:	cbz	x2, 4016a4 <register_tm_clones+0x3c>
  40169c:	mov	x16, x2
  4016a0:	br	x16
  4016a4:	ret

00000000004016a8 <__do_global_dtors_aux>:
  4016a8:	stp	x29, x30, [sp, #-32]!
  4016ac:	mov	x29, sp
  4016b0:	str	x19, [sp, #16]
  4016b4:	adrp	x19, 416000 <memcpy@GLIBC_2.17>
  4016b8:	ldrb	w0, [x19, #472]
  4016bc:	cbnz	w0, 4016cc <__do_global_dtors_aux+0x24>
  4016c0:	bl	401638 <deregister_tm_clones>
  4016c4:	mov	w0, #0x1                   	// #1
  4016c8:	strb	w0, [x19, #472]
  4016cc:	ldr	x19, [sp, #16]
  4016d0:	ldp	x29, x30, [sp], #32
  4016d4:	ret

00000000004016d8 <frame_dummy>:
  4016d8:	b	401668 <register_tm_clones>

00000000004016dc <yyparse>:
  4016dc:	stp	x29, x30, [sp, #-96]!
  4016e0:	stp	x28, x27, [sp, #16]
  4016e4:	stp	x26, x25, [sp, #32]
  4016e8:	stp	x24, x23, [sp, #48]
  4016ec:	stp	x22, x21, [sp, #64]
  4016f0:	stp	x20, x19, [sp, #80]
  4016f4:	mov	x29, sp
  4016f8:	sub	sp, sp, #0x800
  4016fc:	mov	x23, #0x8490                	// #33936
  401700:	movk	x23, #0x952, lsl #16
  401704:	movk	x23, #0xf65c, lsl #32
  401708:	add	x8, sp, #0x18
  40170c:	mov	w22, wzr
  401710:	stur	xzr, [x29, #-24]
  401714:	mov	w12, #0xfffffffe            	// #-2
  401718:	add	x19, sp, #0x18
  40171c:	mov	w25, #0xc8                  	// #200
  401720:	movk	x23, #0xc, lsl #48
  401724:	stp	x0, x8, [sp, #8]
  401728:	add	x20, sp, #0x658
  40172c:	add	x24, sp, #0x658
  401730:	b	401744 <yyparse+0x68>
  401734:	adrp	x9, 404000 <extract_rules+0x224>
  401738:	add	x9, x9, #0x59a
  40173c:	ldrsb	w22, [x9, x8]
  401740:	add	x20, x20, #0x2
  401744:	add	x8, x24, x25, lsl #1
  401748:	sub	x8, x8, #0x2
  40174c:	cmp	x8, x20
  401750:	strh	w22, [x20]
  401754:	b.hi	401804 <yyparse+0x128>  // b.pmore
  401758:	lsr	x8, x25, #4
  40175c:	mov	x28, x12
  401760:	cmp	x8, #0x270
  401764:	b.hi	402088 <yyparse+0x9ac>  // b.pmore
  401768:	ubfx	x9, x25, #3, #60
  40176c:	lsl	x8, x25, #1
  401770:	cmp	x9, #0x271
  401774:	mov	w9, #0x2710                	// #10000
  401778:	csel	x25, x8, x9, cc  // cc = lo, ul, last
  40177c:	mov	w8, #0xa                   	// #10
  401780:	orr	x9, xzr, #0x7
  401784:	madd	x0, x25, x8, x9
  401788:	bl	401380 <malloc@plt>
  40178c:	cbz	x0, 402088 <yyparse+0x9ac>
  401790:	sub	x8, x20, x24
  401794:	asr	x19, x8, #1
  401798:	add	x20, x19, #0x1
  40179c:	lsl	x2, x20, #1
  4017a0:	mov	x1, x24
  4017a4:	mov	x27, x0
  4017a8:	bl	4012b0 <memcpy@plt>
  4017ac:	lsl	x8, x25, #1
  4017b0:	add	x8, x8, #0x7
  4017b4:	ldr	x1, [sp, #16]
  4017b8:	and	x8, x8, #0xfffffffffffffff8
  4017bc:	add	x26, x27, x8
  4017c0:	lsl	x2, x20, #3
  4017c4:	mov	x0, x26
  4017c8:	bl	4012b0 <memcpy@plt>
  4017cc:	add	x8, sp, #0x658
  4017d0:	cmp	x24, x8
  4017d4:	b.eq	4017e0 <yyparse+0x104>  // b.none
  4017d8:	mov	x0, x24
  4017dc:	bl	401500 <free@plt>
  4017e0:	add	x8, x27, x25, lsl #1
  4017e4:	add	x20, x27, x19, lsl #1
  4017e8:	sub	x8, x8, #0x2
  4017ec:	cmp	x8, x20
  4017f0:	add	x19, x26, x19, lsl #3
  4017f4:	b.ls	402180 <yyparse+0xaa4>  // b.plast
  4017f8:	mov	x24, x27
  4017fc:	mov	x12, x28
  401800:	str	x26, [sp, #16]
  401804:	cmp	w22, #0x7
  401808:	b.eq	402158 <yyparse+0xa7c>  // b.none
  40180c:	lsr	x8, x23, x22
  401810:	sxtw	x26, w22
  401814:	tbnz	w8, #0, 401c98 <yyparse+0x5bc>
  401818:	cmn	w12, #0x2
  40181c:	b.ne	401bf4 <yyparse+0x518>  // b.any
  401820:	ldr	x8, [sp, #8]
  401824:	ldr	x21, [x8]
  401828:	add	x28, x21, #0x5
  40182c:	b	401838 <yyparse+0x15c>
  401830:	add	x28, x28, #0x1
  401834:	add	x21, x21, #0x1
  401838:	ldurb	w8, [x28, #-5]
  40183c:	cmp	w8, #0x9
  401840:	b.eq	401830 <yyparse+0x154>  // b.none
  401844:	cmp	w8, #0x20
  401848:	b.eq	401830 <yyparse+0x154>  // b.none
  40184c:	cbnz	w8, 401864 <yyparse+0x188>
  401850:	ldr	x9, [sp, #8]
  401854:	sub	x8, x28, #0x5
  401858:	mov	w12, wzr
  40185c:	str	x8, [x9]
  401860:	b	401bf4 <yyparse+0x518>
  401864:	sxtb	w9, w8
  401868:	sub	x27, x28, #0x5
  40186c:	tbnz	w9, #31, 401878 <yyparse+0x19c>
  401870:	stur	w8, [x29, #-12]
  401874:	b	4018ac <yyparse+0x1d0>
  401878:	ldr	x8, [sp, #8]
  40187c:	sub	x0, x29, #0xc
  401880:	mov	x1, x27
  401884:	ldr	x8, [x8, #8]
  401888:	sub	x2, x8, x27
  40188c:	bl	401490 <u8_mbtouc_aux@plt>
  401890:	ldur	w8, [x29, #-12]
  401894:	mov	w9, #0x2026                	// #8230
  401898:	cmp	w8, w9
  40189c:	b.ne	4018ac <yyparse+0x1d0>  // b.any
  4018a0:	add	x8, x28, w0, sxtw
  4018a4:	sub	x8, x8, #0x5
  4018a8:	b	4019a4 <yyparse+0x2c8>
  4018ac:	adrp	x0, 404000 <extract_rules+0x224>
  4018b0:	mov	w2, #0x3                   	// #3
  4018b4:	add	x0, x0, #0x649
  4018b8:	mov	x1, x27
  4018bc:	bl	4013c0 <strncmp@plt>
  4018c0:	cbz	w0, 4019a0 <yyparse+0x2c4>
  4018c4:	adrp	x0, 404000 <extract_rules+0x224>
  4018c8:	mov	w2, #0x2                   	// #2
  4018cc:	add	x0, x0, #0x64a
  4018d0:	mov	x1, x27
  4018d4:	bl	4013c0 <strncmp@plt>
  4018d8:	cbz	w0, 4019b4 <yyparse+0x2d8>
  4018dc:	adrp	x0, 404000 <extract_rules+0x224>
  4018e0:	mov	w2, #0x5                   	// #5
  4018e4:	add	x0, x0, #0x64d
  4018e8:	mov	x1, x27
  4018ec:	bl	4013c0 <strncmp@plt>
  4018f0:	cbz	w0, 4019c8 <yyparse+0x2ec>
  4018f4:	adrp	x0, 404000 <extract_rules+0x224>
  4018f8:	mov	w2, #0x8                   	// #8
  4018fc:	add	x0, x0, #0x653
  401900:	mov	x1, x27
  401904:	bl	4013c0 <strncmp@plt>
  401908:	cbz	w0, 4019d8 <yyparse+0x2fc>
  40190c:	adrp	x0, 404000 <extract_rules+0x224>
  401910:	mov	w2, #0x8                   	// #8
  401914:	add	x0, x0, #0x65c
  401918:	mov	x1, x27
  40191c:	bl	4013c0 <strncmp@plt>
  401920:	cbz	w0, 401a7c <yyparse+0x3a0>
  401924:	ldurb	w12, [x28, #-5]
  401928:	sub	w8, w12, #0x61
  40192c:	cmp	w8, #0x1a
  401930:	b.cs	401adc <yyparse+0x400>  // b.hs, b.nlast
  401934:	mov	x28, xzr
  401938:	b	401984 <yyparse+0x2a8>
  40193c:	adrp	x23, 416000 <memcpy@GLIBC_2.17>
  401940:	add	x23, x23, #0x1e0
  401944:	ldr	x0, [x23]
  401948:	lsl	x8, x8, #1
  40194c:	add	x1, x8, #0xa
  401950:	str	x1, [x23, #8]
  401954:	mov	x27, x12
  401958:	bl	401390 <xrealloc@plt>
  40195c:	mov	x12, x27
  401960:	mov	x27, x0
  401964:	str	x0, [x23]
  401968:	strb	w12, [x27, x28]
  40196c:	ldrb	w12, [x21, #1]!
  401970:	add	x23, x28, #0x1
  401974:	mov	x28, x23
  401978:	sub	w8, w12, #0x61
  40197c:	cmp	w8, #0x1a
  401980:	b.cs	4019ec <yyparse+0x310>  // b.hs, b.nlast
  401984:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  401988:	ldr	x8, [x8, #488]
  40198c:	cmp	x28, x8
  401990:	b.cs	40193c <yyparse+0x260>  // b.hs, b.nlast
  401994:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  401998:	ldr	x27, [x8, #480]
  40199c:	b	401968 <yyparse+0x28c>
  4019a0:	sub	x8, x28, #0x2
  4019a4:	ldr	x9, [sp, #8]
  4019a8:	mov	w12, #0x105                 	// #261
  4019ac:	str	x8, [x9]
  4019b0:	b	401bf4 <yyparse+0x518>
  4019b4:	ldr	x9, [sp, #8]
  4019b8:	sub	x8, x28, #0x3
  4019bc:	mov	w12, #0x104                 	// #260
  4019c0:	str	x8, [x9]
  4019c4:	b	401bf4 <yyparse+0x518>
  4019c8:	ldr	x8, [sp, #8]
  4019cc:	mov	w12, #0x106                 	// #262
  4019d0:	str	x28, [x8]
  4019d4:	b	401bf4 <yyparse+0x518>
  4019d8:	ldr	x9, [sp, #8]
  4019dc:	add	x8, x28, #0x3
  4019e0:	mov	w12, #0x107                 	// #263
  4019e4:	str	x8, [x9]
  4019e8:	b	401bf4 <yyparse+0x518>
  4019ec:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  4019f0:	ldr	x8, [x8, #488]
  4019f4:	cmp	x23, x8
  4019f8:	b.cc	401a20 <yyparse+0x344>  // b.lo, b.ul, b.last
  4019fc:	lsl	x8, x8, #1
  401a00:	adrp	x28, 416000 <memcpy@GLIBC_2.17>
  401a04:	add	x1, x8, #0xa
  401a08:	add	x28, x28, #0x1e0
  401a0c:	mov	x0, x27
  401a10:	str	x1, [x28, #8]
  401a14:	bl	401390 <xrealloc@plt>
  401a18:	mov	x27, x0
  401a1c:	str	x0, [x28]
  401a20:	cmp	x23, #0x1
  401a24:	strb	wzr, [x27, x23]
  401a28:	b.ne	401a90 <yyparse+0x3b4>  // b.any
  401a2c:	ldrb	w8, [x27]
  401a30:	sub	w8, w8, #0x66
  401a34:	cmp	w8, #0x11
  401a38:	b.hi	401a90 <yyparse+0x3b4>  // b.pmore
  401a3c:	mov	w9, #0x1                   	// #1
  401a40:	lsl	w8, w9, w8
  401a44:	mov	w9, #0x4109                	// #16649
  401a48:	movk	w9, #0x3, lsl #16
  401a4c:	tst	w8, w9
  401a50:	b.eq	401a90 <yyparse+0x3b4>  // b.none
  401a54:	ldr	x8, [sp, #8]
  401a58:	mov	x23, #0x8490                	// #33936
  401a5c:	movk	x23, #0x952, lsl #16
  401a60:	movk	x23, #0xf65c, lsl #32
  401a64:	str	x21, [x8]
  401a68:	ldrb	w8, [x27]
  401a6c:	mov	w12, #0x10c                 	// #268
  401a70:	movk	x23, #0xc, lsl #48
  401a74:	stur	w8, [x29, #-24]
  401a78:	b	401bf4 <yyparse+0x518>
  401a7c:	ldr	x9, [sp, #8]
  401a80:	add	x8, x28, #0x3
  401a84:	mov	w12, #0x108                 	// #264
  401a88:	str	x8, [x9]
  401a8c:	b	401bf4 <yyparse+0x518>
  401a90:	adrp	x1, 404000 <extract_rules+0x224>
  401a94:	mov	x0, x27
  401a98:	add	x1, x1, #0x665
  401a9c:	bl	4014d0 <strcmp@plt>
  401aa0:	mov	x23, #0x8490                	// #33936
  401aa4:	movk	x23, #0x952, lsl #16
  401aa8:	movk	x23, #0xf65c, lsl #32
  401aac:	movk	x23, #0xc, lsl #48
  401ab0:	cbz	w0, 401bdc <yyparse+0x500>
  401ab4:	adrp	x1, 404000 <extract_rules+0x224>
  401ab8:	mov	x0, x27
  401abc:	add	x1, x1, #0x5f7
  401ac0:	bl	4014d0 <strcmp@plt>
  401ac4:	cbz	w0, 401be8 <yyparse+0x50c>
  401ac8:	mov	x0, x27
  401acc:	bl	401410 <xstrdup@plt>
  401ad0:	mov	w12, #0x109                 	// #265
  401ad4:	stur	x0, [x29, #-24]
  401ad8:	b	401bd4 <yyparse+0x4f8>
  401adc:	sub	w8, w12, #0x30
  401ae0:	cmp	w8, #0xa
  401ae4:	sub	x21, x28, #0x4
  401ae8:	b.cs	402060 <yyparse+0x984>  // b.hs, b.nlast
  401aec:	ldrb	w8, [x21]
  401af0:	sub	x23, x12, #0x30
  401af4:	sub	w9, w8, #0x30
  401af8:	cmp	w9, #0x9
  401afc:	b.hi	401b20 <yyparse+0x444>  // b.pmore
  401b00:	mov	w11, #0xa                   	// #10
  401b04:	mul	x9, x23, x11
  401b08:	add	x9, x9, w8, uxtb
  401b0c:	ldrb	w8, [x21, #1]!
  401b10:	sub	x23, x9, #0x30
  401b14:	sub	w10, w8, #0x30
  401b18:	cmp	w10, #0xa
  401b1c:	b.cc	401b04 <yyparse+0x428>  // b.lo, b.ul, b.last
  401b20:	mov	w0, #0x18                  	// #24
  401b24:	bl	401400 <xmalloc@plt>
  401b28:	stur	x0, [x29, #-24]
  401b2c:	ldrb	w8, [x21]
  401b30:	cmp	w8, #0x2e
  401b34:	b.ne	401bb8 <yyparse+0x4dc>  // b.any
  401b38:	ldrb	w9, [x21, #1]
  401b3c:	sub	w8, w9, #0x30
  401b40:	cmp	w8, #0x9
  401b44:	b.hi	401bb8 <yyparse+0x4dc>  // b.pmore
  401b48:	mov	x8, xzr
  401b4c:	ucvtf	d0, x23
  401b50:	mov	w10, #0xa                   	// #10
  401b54:	and	w9, w9, #0xff
  401b58:	add	x11, x21, x8
  401b5c:	sub	w12, w9, #0x30
  401b60:	ldrb	w9, [x11, #2]
  401b64:	scvtf	d1, w10
  401b68:	scvtf	d2, w12
  401b6c:	add	w10, w10, w10, lsl #2
  401b70:	fdiv	d1, d2, d1
  401b74:	sub	w11, w9, #0x30
  401b78:	fadd	d0, d0, d1
  401b7c:	lsl	w10, w10, #1
  401b80:	cmp	w11, #0xa
  401b84:	add	x8, x8, #0x1
  401b88:	b.cc	401b54 <yyparse+0x478>  // b.lo, b.ul, b.last
  401b8c:	mov	x23, #0x8490                	// #33936
  401b90:	movk	x23, #0x952, lsl #16
  401b94:	mov	w9, #0x1                   	// #1
  401b98:	str	w8, [x0, #16]
  401b9c:	add	x8, x21, x8
  401ba0:	movk	x23, #0xf65c, lsl #32
  401ba4:	str	w9, [x0]
  401ba8:	str	d0, [x0, #8]
  401bac:	add	x21, x8, #0x1
  401bb0:	mov	w12, #0x10b                 	// #267
  401bb4:	b	401bd0 <yyparse+0x4f4>
  401bb8:	str	w23, [x0, #8]
  401bbc:	mov	x23, #0x8490                	// #33936
  401bc0:	movk	x23, #0x952, lsl #16
  401bc4:	movk	x23, #0xf65c, lsl #32
  401bc8:	str	wzr, [x0]
  401bcc:	mov	w12, #0x10a                 	// #266
  401bd0:	movk	x23, #0xc, lsl #48
  401bd4:	ldr	x8, [sp, #8]
  401bd8:	b	401bf0 <yyparse+0x514>
  401bdc:	ldr	x8, [sp, #8]
  401be0:	mov	w12, #0x102                 	// #258
  401be4:	b	401bf0 <yyparse+0x514>
  401be8:	ldr	x8, [sp, #8]
  401bec:	mov	w12, #0x103                 	// #259
  401bf0:	str	x21, [x8]
  401bf4:	adrp	x8, 404000 <extract_rules+0x224>
  401bf8:	add	x8, x8, #0x362
  401bfc:	ldrsb	w8, [x8, x26]
  401c00:	cmp	w12, #0x1
  401c04:	b.lt	401c2c <yyparse+0x550>  // b.tstop
  401c08:	cmp	w12, #0x10c
  401c0c:	b.hi	401c44 <yyparse+0x568>  // b.pmore
  401c10:	adrp	x9, 404000 <extract_rules+0x224>
  401c14:	add	x9, x9, #0x396
  401c18:	ldrb	w9, [x9, w12, uxtw]
  401c1c:	add	w8, w9, w8
  401c20:	cmp	w8, #0x37
  401c24:	b.ls	401c54 <yyparse+0x578>  // b.plast
  401c28:	b	401c98 <yyparse+0x5bc>
  401c2c:	mov	w9, wzr
  401c30:	mov	w12, wzr
  401c34:	add	w8, w9, w8
  401c38:	cmp	w8, #0x37
  401c3c:	b.ls	401c54 <yyparse+0x578>  // b.plast
  401c40:	b	401c98 <yyparse+0x5bc>
  401c44:	mov	w9, #0x2                   	// #2
  401c48:	add	w8, w9, w8
  401c4c:	cmp	w8, #0x37
  401c50:	b.hi	401c98 <yyparse+0x5bc>  // b.pmore
  401c54:	adrp	x10, 404000 <extract_rules+0x224>
  401c58:	add	x10, x10, #0x4a3
  401c5c:	ldrsb	w10, [x10, x8]
  401c60:	cmp	w9, w10
  401c64:	b.ne	401c98 <yyparse+0x5bc>  // b.any
  401c68:	adrp	x9, 404000 <extract_rules+0x224>
  401c6c:	add	x9, x9, #0x4db
  401c70:	ldrb	w22, [x9, x8]
  401c74:	mov	x9, #0x80000000            	// #2147483648
  401c78:	movk	x9, #0x9efc, lsl #32
  401c7c:	movk	x9, #0x7e, lsl #48
  401c80:	lsr	x8, x9, x8
  401c84:	tbnz	w8, #0, 401d28 <yyparse+0x64c>
  401c88:	ldur	x8, [x29, #-24]
  401c8c:	mov	w12, #0xfffffffe            	// #-2
  401c90:	str	x8, [x19, #8]!
  401c94:	b	401740 <yyparse+0x64>
  401c98:	mov	x8, #0x3000300030003       	// #844437815230467
  401c9c:	movk	x8, #0x34f
  401ca0:	movk	x8, #0xf681, lsl #16
  401ca4:	lsr	x8, x8, x26
  401ca8:	tbnz	w8, #0, 4020d0 <yyparse+0x9f4>
  401cac:	adrp	x8, 404000 <extract_rules+0x224>
  401cb0:	add	x8, x8, #0x513
  401cb4:	ldrb	w8, [x8, x26]
  401cb8:	adrp	x9, 404000 <extract_rules+0x224>
  401cbc:	sxtw	x22, w8
  401cc0:	add	x9, x9, #0x547
  401cc4:	ldrb	w21, [x9, x22]
  401cc8:	mov	w9, #0x1                   	// #1
  401ccc:	sub	w8, w8, #0x4
  401cd0:	cmp	w8, #0x1c
  401cd4:	sub	x9, x9, x21
  401cd8:	ldr	x27, [x19, x9, lsl #3]
  401cdc:	b.hi	402000 <yyparse+0x924>  // b.pmore
  401ce0:	adrp	x11, 404000 <extract_rules+0x224>
  401ce4:	add	x11, x11, #0x330
  401ce8:	adr	x9, 401cf8 <yyparse+0x61c>
  401cec:	ldrb	w10, [x11, x8]
  401cf0:	add	x9, x9, x10, lsl #2
  401cf4:	br	x9
  401cf8:	ldr	x27, [x19]
  401cfc:	b	402000 <yyparse+0x924>
  401d00:	ldr	x0, [x19]
  401d04:	mov	x26, x12
  401d08:	b	401d1c <yyparse+0x640>
  401d0c:	ldur	x0, [x19, #-16]
  401d10:	mov	x26, x12
  401d14:	bl	401500 <free@plt>
  401d18:	ldr	x0, [x19]
  401d1c:	bl	401500 <free@plt>
  401d20:	mov	x12, x26
  401d24:	b	402000 <yyparse+0x924>
  401d28:	neg	w8, w22
  401d2c:	b	401cb8 <yyparse+0x5dc>
  401d30:	ldur	x23, [x19, #-24]
  401d34:	ldur	x28, [x19, #-8]
  401d38:	mov	w0, #0x10                  	// #16
  401d3c:	str	x12, [sp]
  401d40:	bl	401400 <xmalloc@plt>
  401d44:	stp	x23, x28, [x0]
  401d48:	ldr	x8, [sp, #8]
  401d4c:	mov	x26, x0
  401d50:	ldr	x28, [x8, #16]
  401d54:	ldp	x8, x9, [x28, #8]
  401d58:	cmp	x8, x9
  401d5c:	b.ne	401fcc <yyparse+0x8f0>  // b.any
  401d60:	ldr	x0, [x28]
  401d64:	mov	w9, #0x1                   	// #1
  401d68:	bfi	x9, x8, #1, #63
  401d6c:	lsl	x1, x9, #3
  401d70:	str	x9, [x28, #16]
  401d74:	bl	401390 <xrealloc@plt>
  401d78:	ldr	x8, [x28, #8]
  401d7c:	str	x0, [x28]
  401d80:	b	401fd0 <yyparse+0x8f4>
  401d84:	ldur	x23, [x19, #-16]
  401d88:	ldr	x26, [x19]
  401d8c:	mov	w0, #0x18                  	// #24
  401d90:	mov	x27, x12
  401d94:	bl	401400 <xmalloc@plt>
  401d98:	mov	x12, x27
  401d9c:	mov	x27, x0
  401da0:	mov	w8, #0x1                   	// #1
  401da4:	str	w8, [x0]
  401da8:	b	401e08 <yyparse+0x72c>
  401dac:	ldr	x23, [x19]
  401db0:	mov	w0, #0x18                  	// #24
  401db4:	mov	x26, x12
  401db8:	bl	401400 <xmalloc@plt>
  401dbc:	mov	w8, #0x2                   	// #2
  401dc0:	mov	x12, x26
  401dc4:	mov	x27, x0
  401dc8:	str	w8, [x0]
  401dcc:	b	401f80 <yyparse+0x8a4>
  401dd0:	ldur	x23, [x19, #-16]
  401dd4:	ldr	x27, [x19]
  401dd8:	mov	w0, #0x18                  	// #24
  401ddc:	mov	x28, x12
  401de0:	bl	401400 <xmalloc@plt>
  401de4:	mov	w8, #0x2                   	// #2
  401de8:	mov	x26, x0
  401dec:	str	w8, [x0]
  401df0:	str	x27, [x0, #8]
  401df4:	mov	w0, #0x18                  	// #24
  401df8:	bl	401400 <xmalloc@plt>
  401dfc:	mov	x12, x28
  401e00:	mov	x27, x0
  401e04:	str	wzr, [x0]
  401e08:	stp	x23, x26, [x0, #8]
  401e0c:	b	401f84 <yyparse+0x8a8>
  401e10:	ldur	x23, [x19, #-16]
  401e14:	ldr	x26, [x19]
  401e18:	mov	w0, #0x18                  	// #24
  401e1c:	mov	x27, x12
  401e20:	bl	401400 <xmalloc@plt>
  401e24:	str	x23, [x0]
  401e28:	mov	x23, #0x8490                	// #33936
  401e2c:	movk	x23, #0x952, lsl #16
  401e30:	movk	x23, #0xf65c, lsl #32
  401e34:	mov	x12, x27
  401e38:	mov	x27, x0
  401e3c:	movk	x23, #0xc, lsl #48
  401e40:	str	wzr, [x0, #8]
  401e44:	str	x26, [x0, #16]
  401e48:	b	402000 <yyparse+0x924>
  401e4c:	ldur	x23, [x19, #-16]
  401e50:	ldr	x26, [x19]
  401e54:	mov	w0, #0x18                  	// #24
  401e58:	mov	x27, x12
  401e5c:	bl	401400 <xmalloc@plt>
  401e60:	str	x23, [x0]
  401e64:	mov	x23, #0x8490                	// #33936
  401e68:	movk	x23, #0x952, lsl #16
  401e6c:	movk	x23, #0xf65c, lsl #32
  401e70:	mov	w8, #0x1                   	// #1
  401e74:	mov	x12, x27
  401e78:	mov	x27, x0
  401e7c:	movk	x23, #0xc, lsl #48
  401e80:	str	w8, [x0, #8]
  401e84:	str	x26, [x0, #16]
  401e88:	b	402000 <yyparse+0x924>
  401e8c:	ldr	w23, [x19]
  401e90:	mov	w0, #0x8                   	// #8
  401e94:	mov	x26, x12
  401e98:	bl	401400 <xmalloc@plt>
  401e9c:	stp	w23, wzr, [x0]
  401ea0:	mov	x23, #0x8490                	// #33936
  401ea4:	movk	x23, #0x952, lsl #16
  401ea8:	movk	x23, #0xf65c, lsl #32
  401eac:	mov	x12, x26
  401eb0:	mov	x27, x0
  401eb4:	movk	x23, #0xc, lsl #48
  401eb8:	b	402000 <yyparse+0x924>
  401ebc:	ldr	x8, [x19]
  401ec0:	ldur	w23, [x19, #-16]
  401ec4:	mov	w0, #0x8                   	// #8
  401ec8:	mov	x27, x12
  401ecc:	ldr	w26, [x8, #8]
  401ed0:	bl	401400 <xmalloc@plt>
  401ed4:	stp	w23, w26, [x0]
  401ed8:	b	401fb0 <yyparse+0x8d4>
  401edc:	mov	w0, #0x18                  	// #24
  401ee0:	mov	x26, x12
  401ee4:	bl	401400 <xmalloc@plt>
  401ee8:	stp	xzr, xzr, [x0, #8]
  401eec:	str	xzr, [x0]
  401ef0:	ldr	x23, [x19]
  401ef4:	mov	w8, #0x1                   	// #1
  401ef8:	mov	x27, x0
  401efc:	str	x8, [x0, #16]
  401f00:	mov	w1, #0x8                   	// #8
  401f04:	mov	x0, xzr
  401f08:	bl	401390 <xrealloc@plt>
  401f0c:	ldr	x8, [x27, #8]
  401f10:	mov	x12, x26
  401f14:	add	x9, x8, #0x1
  401f18:	stp	x0, x9, [x27]
  401f1c:	str	x23, [x0, x8, lsl #3]
  401f20:	b	401f84 <yyparse+0x8a8>
  401f24:	ldur	x27, [x19, #-16]
  401f28:	ldr	x26, [x19]
  401f2c:	ldp	x8, x9, [x27, #8]
  401f30:	cmp	x8, x9
  401f34:	b.ne	401ff0 <yyparse+0x914>  // b.any
  401f38:	ldr	x0, [x27]
  401f3c:	mov	w9, #0x1                   	// #1
  401f40:	bfi	x9, x8, #1, #63
  401f44:	lsl	x1, x9, #3
  401f48:	str	x9, [x27, #16]
  401f4c:	mov	x28, x12
  401f50:	bl	401390 <xrealloc@plt>
  401f54:	ldr	x8, [x27, #8]
  401f58:	mov	x12, x28
  401f5c:	str	x0, [x27]
  401f60:	b	401ff4 <yyparse+0x918>
  401f64:	ldr	x23, [x19]
  401f68:	mov	w0, #0x10                  	// #16
  401f6c:	mov	x26, x12
  401f70:	bl	401400 <xmalloc@plt>
  401f74:	mov	x12, x26
  401f78:	mov	x27, x0
  401f7c:	str	x23, [x0]
  401f80:	str	x23, [x0, #8]
  401f84:	mov	x23, #0x8490                	// #33936
  401f88:	movk	x23, #0x952, lsl #16
  401f8c:	movk	x23, #0xf65c, lsl #32
  401f90:	movk	x23, #0xc, lsl #48
  401f94:	b	402000 <yyparse+0x924>
  401f98:	ldur	x23, [x19, #-16]
  401f9c:	ldr	x26, [x19]
  401fa0:	mov	w0, #0x10                  	// #16
  401fa4:	mov	x27, x12
  401fa8:	bl	401400 <xmalloc@plt>
  401fac:	stp	x23, x26, [x0]
  401fb0:	mov	x23, #0x8490                	// #33936
  401fb4:	movk	x23, #0x952, lsl #16
  401fb8:	movk	x23, #0xf65c, lsl #32
  401fbc:	mov	x12, x27
  401fc0:	mov	x27, x0
  401fc4:	movk	x23, #0xc, lsl #48
  401fc8:	b	402000 <yyparse+0x924>
  401fcc:	ldr	x0, [x28]
  401fd0:	mov	x23, #0x8490                	// #33936
  401fd4:	ldr	x12, [sp]
  401fd8:	movk	x23, #0x952, lsl #16
  401fdc:	movk	x23, #0xf65c, lsl #32
  401fe0:	add	x9, x8, #0x1
  401fe4:	movk	x23, #0xc, lsl #48
  401fe8:	str	x9, [x28, #8]
  401fec:	b	401ffc <yyparse+0x920>
  401ff0:	ldr	x0, [x27]
  401ff4:	add	x9, x8, #0x1
  401ff8:	str	x9, [x27, #8]
  401ffc:	str	x26, [x0, x8, lsl #3]
  402000:	adrp	x8, 404000 <extract_rules+0x224>
  402004:	add	x8, x8, #0x568
  402008:	ldrb	w8, [x8, x22]
  40200c:	sub	x19, x19, x21, lsl #3
  402010:	adrp	x9, 404000 <extract_rules+0x224>
  402014:	sub	x20, x20, x21, lsl #1
  402018:	str	x27, [x19, #8]!
  40201c:	sub	x8, x8, #0x15
  402020:	add	x9, x9, #0x589
  402024:	ldrsb	w9, [x9, x8]
  402028:	ldrsh	w10, [x20]
  40202c:	add	w9, w10, w9
  402030:	cmp	w9, #0x37
  402034:	b.hi	401734 <yyparse+0x58>  // b.pmore
  402038:	adrp	x11, 404000 <extract_rules+0x224>
  40203c:	add	x11, x11, #0x4a3
  402040:	ldrsb	w11, [x11, x9]
  402044:	and	w10, w10, #0xffff
  402048:	cmp	w10, w11, uxth
  40204c:	b.ne	401734 <yyparse+0x58>  // b.any
  402050:	adrp	x8, 404000 <extract_rules+0x224>
  402054:	add	x8, x8, #0x4db
  402058:	ldrb	w22, [x8, x9]
  40205c:	b	401740 <yyparse+0x64>
  402060:	cmp	w12, #0x21
  402064:	b.ne	401bd4 <yyparse+0x4f8>  // b.any
  402068:	ldurb	w8, [x28, #-4]
  40206c:	sub	x9, x28, #0x3
  402070:	cmp	w8, #0x3d
  402074:	csel	x21, x9, x21, eq  // eq = none
  402078:	mov	w8, #0x100                 	// #256
  40207c:	mov	w9, #0x21                  	// #33
  402080:	csel	w12, w9, w8, eq  // eq = none
  402084:	b	401bd4 <yyparse+0x4f8>
  402088:	adrp	x0, 404000 <extract_rules+0x224>
  40208c:	adrp	x1, 404000 <extract_rules+0x224>
  402090:	add	x0, x0, #0x5df
  402094:	add	x1, x1, #0x609
  402098:	mov	w2, #0x5                   	// #5
  40209c:	bl	401530 <dcgettext@plt>
  4020a0:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  4020a4:	ldr	x8, [x8, #416]
  4020a8:	adrp	x1, 404000 <extract_rules+0x224>
  4020ac:	mov	x2, x0
  4020b0:	add	x1, x1, #0x75d
  4020b4:	mov	x0, x8
  4020b8:	bl	4015b0 <fprintf@plt>
  4020bc:	mov	w21, #0x2                   	// #2
  4020c0:	mov	x12, x28
  4020c4:	cmn	w12, #0x2
  4020c8:	b.ne	402194 <yyparse+0xab8>  // b.any
  4020cc:	b	4021c0 <yyparse+0xae4>
  4020d0:	adrp	x0, 404000 <extract_rules+0x224>
  4020d4:	adrp	x1, 404000 <extract_rules+0x224>
  4020d8:	add	x0, x0, #0x5df
  4020dc:	add	x1, x1, #0x5ed
  4020e0:	mov	w2, #0x5                   	// #5
  4020e4:	mov	x25, x12
  4020e8:	bl	401530 <dcgettext@plt>
  4020ec:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  4020f0:	ldr	x8, [x8, #416]
  4020f4:	adrp	x1, 404000 <extract_rules+0x224>
  4020f8:	mov	x2, x0
  4020fc:	add	x1, x1, #0x75d
  402100:	mov	x0, x8
  402104:	bl	4015b0 <fprintf@plt>
  402108:	cmp	x20, x24
  40210c:	b.eq	402168 <yyparse+0xa8c>  // b.none
  402110:	adrp	x23, 404000 <extract_rules+0x224>
  402114:	adrp	x21, 404000 <extract_rules+0x224>
  402118:	add	x23, x23, #0x5ab
  40211c:	add	x21, x21, #0x5fa
  402120:	ldrb	w1, [x23, w22, sxtw]
  402124:	mov	x0, x21
  402128:	mov	x2, x19
  40212c:	bl	402230 <yydestruct>
  402130:	ldrsh	w22, [x20, #-2]!
  402134:	sub	x19, x19, #0x8
  402138:	cmp	x24, x20
  40213c:	b.ne	402120 <yyparse+0xa44>  // b.any
  402140:	mov	w21, #0x1                   	// #1
  402144:	mov	x20, x24
  402148:	mov	x12, x25
  40214c:	cmn	w12, #0x2
  402150:	b.ne	402194 <yyparse+0xab8>  // b.any
  402154:	b	4021c0 <yyparse+0xae4>
  402158:	mov	w21, wzr
  40215c:	cmn	w12, #0x2
  402160:	b.ne	402194 <yyparse+0xab8>  // b.any
  402164:	b	4021c0 <yyparse+0xae4>
  402168:	mov	w21, #0x1                   	// #1
  40216c:	mov	x24, x20
  402170:	mov	x12, x25
  402174:	cmn	w12, #0x2
  402178:	b.eq	4021c0 <yyparse+0xae4>  // b.none
  40217c:	b	402194 <yyparse+0xab8>
  402180:	mov	w21, #0x1                   	// #1
  402184:	mov	x24, x27
  402188:	mov	x12, x28
  40218c:	cmn	w12, #0x2
  402190:	b.eq	4021c0 <yyparse+0xae4>  // b.none
  402194:	cmp	w12, #0x10c
  402198:	b.hi	4021ac <yyparse+0xad0>  // b.pmore
  40219c:	adrp	x8, 404000 <extract_rules+0x224>
  4021a0:	add	x8, x8, #0x396
  4021a4:	ldrb	w1, [x8, w12, uxtw]
  4021a8:	b	4021b0 <yyparse+0xad4>
  4021ac:	mov	w1, #0x2                   	// #2
  4021b0:	adrp	x0, 404000 <extract_rules+0x224>
  4021b4:	add	x0, x0, #0x61a
  4021b8:	sub	x2, x29, #0x18
  4021bc:	bl	402230 <yydestruct>
  4021c0:	cmp	x20, x24
  4021c4:	b.eq	4021f8 <yyparse+0xb1c>  // b.none
  4021c8:	adrp	x23, 404000 <extract_rules+0x224>
  4021cc:	adrp	x22, 404000 <extract_rules+0x224>
  4021d0:	add	x23, x23, #0x5ab
  4021d4:	add	x22, x22, #0x638
  4021d8:	ldrsh	x8, [x20], #-2
  4021dc:	mov	x0, x22
  4021e0:	mov	x2, x19
  4021e4:	ldrb	w1, [x23, x8]
  4021e8:	bl	402230 <yydestruct>
  4021ec:	cmp	x24, x20
  4021f0:	sub	x19, x19, #0x8
  4021f4:	b.ne	4021d8 <yyparse+0xafc>  // b.any
  4021f8:	add	x8, sp, #0x658
  4021fc:	cmp	x24, x8
  402200:	b.eq	40220c <yyparse+0xb30>  // b.none
  402204:	mov	x0, x24
  402208:	bl	401500 <free@plt>
  40220c:	mov	w0, w21
  402210:	add	sp, sp, #0x800
  402214:	ldp	x20, x19, [sp, #80]
  402218:	ldp	x22, x21, [sp, #64]
  40221c:	ldp	x24, x23, [sp, #48]
  402220:	ldp	x26, x25, [sp, #32]
  402224:	ldp	x28, x27, [sp, #16]
  402228:	ldp	x29, x30, [sp], #96
  40222c:	ret

0000000000402230 <yydestruct>:
  402230:	sub	w8, w1, #0xa
  402234:	cmp	w8, #0x14
  402238:	b.hi	40226c <yydestruct+0x3c>  // b.pmore
  40223c:	adrp	x9, 404000 <extract_rules+0x224>
  402240:	add	x9, x9, #0x34d
  402244:	adr	x10, 402254 <yydestruct+0x24>
  402248:	ldrb	w11, [x9, x8]
  40224c:	add	x10, x10, x11, lsl #2
  402250:	br	x10
  402254:	ldr	x0, [x2]
  402258:	b	401500 <free@plt>
  40225c:	ldr	x0, [x2]
  402260:	b	402320 <cldr_plural_condition_free>
  402264:	ldr	x0, [x2]
  402268:	b	402280 <cldr_plural_range_free>
  40226c:	ret
  402270:	ldr	x0, [x2]
  402274:	b	402378 <cldr_plural_relation_free>
  402278:	ldr	x0, [x2]
  40227c:	b	4022bc <cldr_plural_range_list_free>

0000000000402280 <cldr_plural_range_free>:
  402280:	stp	x29, x30, [sp, #-32]!
  402284:	str	x19, [sp, #16]
  402288:	mov	x19, x0
  40228c:	ldp	x8, x0, [x0]
  402290:	mov	x29, sp
  402294:	cmp	x8, x0
  402298:	b.eq	4022a8 <cldr_plural_range_free+0x28>  // b.none
  40229c:	mov	x0, x8
  4022a0:	bl	401500 <free@plt>
  4022a4:	ldr	x0, [x19, #8]
  4022a8:	bl	401500 <free@plt>
  4022ac:	mov	x0, x19
  4022b0:	ldr	x19, [sp, #16]
  4022b4:	ldp	x29, x30, [sp], #32
  4022b8:	b	401500 <free@plt>

00000000004022bc <cldr_plural_range_list_free>:
  4022bc:	stp	x29, x30, [sp, #-32]!
  4022c0:	stp	x20, x19, [sp, #16]
  4022c4:	mov	x19, x0
  4022c8:	ldp	x0, x9, [x0]
  4022cc:	mov	x29, sp
  4022d0:	b	4022e4 <cldr_plural_range_list_free+0x28>
  4022d4:	bl	401500 <free@plt>
  4022d8:	mov	x0, x20
  4022dc:	bl	401500 <free@plt>
  4022e0:	ldp	x0, x9, [x19]
  4022e4:	sub	x8, x9, #0x1
  4022e8:	str	x8, [x19, #8]
  4022ec:	cbz	x9, 40230c <cldr_plural_range_list_free+0x50>
  4022f0:	ldr	x20, [x0, x8, lsl #3]
  4022f4:	ldp	x0, x8, [x20]
  4022f8:	cmp	x0, x8
  4022fc:	b.eq	4022d4 <cldr_plural_range_list_free+0x18>  // b.none
  402300:	bl	401500 <free@plt>
  402304:	ldr	x0, [x20, #8]
  402308:	b	4022d4 <cldr_plural_range_list_free+0x18>
  40230c:	bl	401500 <free@plt>
  402310:	mov	x0, x19
  402314:	ldp	x20, x19, [sp, #16]
  402318:	ldp	x29, x30, [sp], #32
  40231c:	b	401500 <free@plt>

0000000000402320 <cldr_plural_condition_free>:
  402320:	stp	x29, x30, [sp, #-32]!
  402324:	ldr	w8, [x0]
  402328:	str	x19, [sp, #16]
  40232c:	mov	x19, x0
  402330:	mov	x29, sp
  402334:	cmp	w8, #0x2
  402338:	b.cs	40235c <cldr_plural_condition_free+0x3c>  // b.hs, b.nlast
  40233c:	ldr	x0, [x19, #8]
  402340:	bl	402320 <cldr_plural_condition_free>
  402344:	ldr	x0, [x19, #16]
  402348:	bl	402320 <cldr_plural_condition_free>
  40234c:	mov	x0, x19
  402350:	ldr	x19, [sp, #16]
  402354:	ldp	x29, x30, [sp], #32
  402358:	b	401500 <free@plt>
  40235c:	b.ne	40234c <cldr_plural_condition_free+0x2c>  // b.any
  402360:	ldr	x0, [x19, #8]
  402364:	bl	402378 <cldr_plural_relation_free>
  402368:	mov	x0, x19
  40236c:	ldr	x19, [sp, #16]
  402370:	ldp	x29, x30, [sp], #32
  402374:	b	401500 <free@plt>

0000000000402378 <cldr_plural_relation_free>:
  402378:	stp	x29, x30, [sp, #-48]!
  40237c:	stp	x20, x19, [sp, #32]
  402380:	mov	x19, x0
  402384:	ldr	x0, [x0]
  402388:	str	x21, [sp, #16]
  40238c:	mov	x29, sp
  402390:	bl	401500 <free@plt>
  402394:	ldr	x20, [x19, #16]
  402398:	b	4023a8 <cldr_plural_relation_free+0x30>
  40239c:	bl	401500 <free@plt>
  4023a0:	mov	x0, x21
  4023a4:	bl	401500 <free@plt>
  4023a8:	ldp	x0, x9, [x20]
  4023ac:	sub	x8, x9, #0x1
  4023b0:	str	x8, [x20, #8]
  4023b4:	cbz	x9, 4023d4 <cldr_plural_relation_free+0x5c>
  4023b8:	ldr	x21, [x0, x8, lsl #3]
  4023bc:	ldp	x0, x8, [x21]
  4023c0:	cmp	x0, x8
  4023c4:	b.eq	40239c <cldr_plural_relation_free+0x24>  // b.none
  4023c8:	bl	401500 <free@plt>
  4023cc:	ldr	x0, [x21, #8]
  4023d0:	b	40239c <cldr_plural_relation_free+0x24>
  4023d4:	bl	401500 <free@plt>
  4023d8:	mov	x0, x20
  4023dc:	bl	401500 <free@plt>
  4023e0:	mov	x0, x19
  4023e4:	ldp	x20, x19, [sp, #32]
  4023e8:	ldr	x21, [sp, #16]
  4023ec:	ldp	x29, x30, [sp], #48
  4023f0:	b	401500 <free@plt>

00000000004023f4 <cldr_plural_rule_list_free>:
  4023f4:	stp	x29, x30, [sp, #-32]!
  4023f8:	stp	x20, x19, [sp, #16]
  4023fc:	mov	x19, x0
  402400:	ldp	x0, x9, [x0]
  402404:	mov	x29, sp
  402408:	sub	x8, x9, #0x1
  40240c:	str	x8, [x19, #8]
  402410:	cbz	x9, 402440 <cldr_plural_rule_list_free+0x4c>
  402414:	ldr	x20, [x0, x8, lsl #3]
  402418:	ldr	x0, [x20]
  40241c:	bl	401500 <free@plt>
  402420:	ldr	x0, [x20, #8]
  402424:	bl	402320 <cldr_plural_condition_free>
  402428:	mov	x0, x20
  40242c:	bl	401500 <free@plt>
  402430:	ldp	x0, x9, [x19]
  402434:	sub	x8, x9, #0x1
  402438:	str	x8, [x19, #8]
  40243c:	cbnz	x9, 402414 <cldr_plural_rule_list_free+0x20>
  402440:	bl	401500 <free@plt>
  402444:	mov	x0, x19
  402448:	ldp	x20, x19, [sp, #16]
  40244c:	ldp	x29, x30, [sp], #32
  402450:	b	401500 <free@plt>

0000000000402454 <cldr_plural_parse>:
  402454:	sub	sp, sp, #0x40
  402458:	stp	x29, x30, [sp, #32]
  40245c:	str	x19, [sp, #48]
  402460:	add	x29, sp, #0x20
  402464:	mov	x19, x0
  402468:	str	x0, [sp, #8]
  40246c:	bl	4012c0 <strlen@plt>
  402470:	add	x8, x19, x0
  402474:	mov	w0, #0x18                  	// #24
  402478:	str	x8, [sp, #16]
  40247c:	bl	401400 <xmalloc@plt>
  402480:	str	x0, [sp, #24]
  402484:	stp	xzr, xzr, [x0, #8]
  402488:	str	xzr, [x0]
  40248c:	add	x0, sp, #0x8
  402490:	bl	4016dc <yyparse>
  402494:	ldr	x8, [sp, #24]
  402498:	ldr	x19, [sp, #48]
  40249c:	ldp	x29, x30, [sp, #32]
  4024a0:	cmp	w0, #0x0
  4024a4:	csel	x0, x8, xzr, eq  // eq = none
  4024a8:	add	sp, sp, #0x40
  4024ac:	ret

00000000004024b0 <cldr_plural_rule_list_print>:
  4024b0:	sub	sp, sp, #0x70
  4024b4:	stp	x29, x30, [sp, #16]
  4024b8:	stp	x28, x27, [sp, #32]
  4024bc:	stp	x26, x25, [sp, #48]
  4024c0:	stp	x24, x23, [sp, #64]
  4024c4:	stp	x22, x21, [sp, #80]
  4024c8:	stp	x20, x19, [sp, #96]
  4024cc:	ldr	x8, [x0, #8]
  4024d0:	mov	x19, x1
  4024d4:	add	x29, sp, #0x10
  4024d8:	cbz	x8, 4026d8 <cldr_plural_rule_list_print+0x228>
  4024dc:	mov	x20, x0
  4024e0:	mov	x21, xzr
  4024e4:	ldr	x8, [x20]
  4024e8:	ldr	x8, [x8, x21, lsl #3]
  4024ec:	ldr	x0, [x8, #8]
  4024f0:	bl	4029d0 <eval_condition>
  4024f4:	ldr	x23, [x20, #8]
  4024f8:	add	x21, x21, #0x1
  4024fc:	cmp	x21, x23
  402500:	b.cc	4024e4 <cldr_plural_rule_list_print+0x34>  // b.lo, b.ul, b.last
  402504:	cbz	x23, 4026d8 <cldr_plural_rule_list_print+0x228>
  402508:	ldr	x25, [x20]
  40250c:	mov	x24, xzr
  402510:	mov	w26, wzr
  402514:	ldr	x8, [x25, x24, lsl #3]
  402518:	ldr	x21, [x8, #8]
  40251c:	mov	x0, x21
  402520:	bl	402d2c <find_largest_modulus>
  402524:	mov	w22, w0
  402528:	mov	x0, x21
  40252c:	bl	402da0 <find_largest_number>
  402530:	cmp	w22, w0
  402534:	add	x24, x24, #0x1
  402538:	ccmp	w22, w26, #0x4, ge  // ge = tcont
  40253c:	csel	w26, w22, w26, gt
  402540:	cmp	x23, x24
  402544:	b.ne	402514 <cldr_plural_rule_list_print+0x64>  // b.any
  402548:	cmp	w26, #0x1
  40254c:	b.lt	402634 <cldr_plural_rule_list_print+0x184>  // b.tstop
  402550:	mov	w22, w26
  402554:	mov	x0, x22
  402558:	bl	401400 <xmalloc@plt>
  40255c:	mov	w1, wzr
  402560:	mov	x2, x22
  402564:	mov	x21, x0
  402568:	bl	4013f0 <memset@plt>
  40256c:	ldr	x26, [x20, #8]
  402570:	cbz	x26, 4025f8 <cldr_plural_rule_list_print+0x148>
  402574:	ldr	x8, [x20]
  402578:	mov	x25, xzr
  40257c:	mov	w28, #0x1                   	// #1
  402580:	str	x8, [sp, #8]
  402584:	ldr	x8, [x8, x25, lsl #3]
  402588:	mov	x24, xzr
  40258c:	ldr	x23, [x8, #8]
  402590:	b	4025a0 <cldr_plural_rule_list_print+0xf0>
  402594:	cmp	x22, x27
  402598:	mov	x24, x27
  40259c:	b.eq	4025bc <cldr_plural_rule_list_print+0x10c>  // b.none
  4025a0:	add	x27, x24, #0x1
  4025a4:	mov	x0, x23
  4025a8:	mov	w1, w27
  4025ac:	bl	402e68 <apply_condition>
  4025b0:	tbz	w0, #0, 402594 <cldr_plural_rule_list_print+0xe4>
  4025b4:	strb	w28, [x21, x24]
  4025b8:	b	402594 <cldr_plural_rule_list_print+0xe4>
  4025bc:	mov	x9, x21
  4025c0:	mov	x8, x22
  4025c4:	ldrb	w10, [x9]
  4025c8:	cbz	w10, 4025dc <cldr_plural_rule_list_print+0x12c>
  4025cc:	subs	x8, x8, #0x1
  4025d0:	add	x9, x9, #0x1
  4025d4:	b.ne	4025c4 <cldr_plural_rule_list_print+0x114>  // b.any
  4025d8:	b	402620 <cldr_plural_rule_list_print+0x170>
  4025dc:	cbz	w8, 402620 <cldr_plural_rule_list_print+0x170>
  4025e0:	ldr	x8, [sp, #8]
  4025e4:	add	x25, x25, #0x1
  4025e8:	cmp	x25, x26
  4025ec:	b.ne	402584 <cldr_plural_rule_list_print+0xd4>  // b.any
  4025f0:	mov	x25, x26
  4025f4:	b	402620 <cldr_plural_rule_list_print+0x170>
  4025f8:	mov	x25, xzr
  4025fc:	b	402620 <cldr_plural_rule_list_print+0x170>
  402600:	ldr	x8, [x20]
  402604:	sub	x9, x23, #0x1
  402608:	str	x9, [x20, #8]
  40260c:	ldr	x21, [x8, x9, lsl #3]
  402610:	ldr	x0, [x21]
  402614:	bl	401500 <free@plt>
  402618:	ldr	x0, [x21, #8]
  40261c:	bl	402320 <cldr_plural_condition_free>
  402620:	mov	x0, x21
  402624:	bl	401500 <free@plt>
  402628:	ldr	x23, [x20, #8]
  40262c:	cmp	x25, x23
  402630:	b.cc	402600 <cldr_plural_rule_list_print+0x150>  // b.lo, b.ul, b.last
  402634:	cbz	x23, 4026d8 <cldr_plural_rule_list_print+0x228>
  402638:	ldr	x8, [x20]
  40263c:	cmp	x23, #0x1
  402640:	b.ne	402650 <cldr_plural_rule_list_print+0x1a0>  // b.any
  402644:	mov	x9, xzr
  402648:	mov	w21, #0x1                   	// #1
  40264c:	b	4026a8 <cldr_plural_rule_list_print+0x1f8>
  402650:	and	x9, x23, #0xfffffffffffffffe
  402654:	mov	x10, xzr
  402658:	add	x12, x8, #0x8
  40265c:	mov	w11, #0x1                   	// #1
  402660:	mov	x13, x9
  402664:	ldp	x14, x15, [x12, #-8]
  402668:	add	x12, x12, #0x10
  40266c:	ldr	x14, [x14, #8]
  402670:	ldr	x15, [x15, #8]
  402674:	ldr	w14, [x14]
  402678:	ldr	w15, [x15]
  40267c:	sub	w14, w14, #0x3
  402680:	sub	w15, w15, #0x3
  402684:	cmp	w14, #0x1
  402688:	cinc	x11, x11, hi  // hi = pmore
  40268c:	cmp	w15, #0x1
  402690:	cinc	x10, x10, hi  // hi = pmore
  402694:	subs	x13, x13, #0x2
  402698:	b.ne	402664 <cldr_plural_rule_list_print+0x1b4>  // b.any
  40269c:	cmp	x23, x9
  4026a0:	add	x21, x10, x11
  4026a4:	b.eq	4026d0 <cldr_plural_rule_list_print+0x220>  // b.none
  4026a8:	sub	x10, x23, x9
  4026ac:	add	x9, x8, x9, lsl #3
  4026b0:	ldr	x11, [x9], #8
  4026b4:	ldr	x11, [x11, #8]
  4026b8:	ldr	w11, [x11]
  4026bc:	sub	w11, w11, #0x3
  4026c0:	cmp	w11, #0x1
  4026c4:	cinc	x21, x21, hi  // hi = pmore
  4026c8:	subs	x10, x10, #0x1
  4026cc:	b.ne	4026b0 <cldr_plural_rule_list_print+0x200>  // b.any
  4026d0:	cmp	x21, #0x1
  4026d4:	b.ne	40270c <cldr_plural_rule_list_print+0x25c>  // b.any
  4026d8:	adrp	x0, 404000 <extract_rules+0x224>
  4026dc:	add	x0, x0, #0x669
  4026e0:	mov	w1, #0x16                  	// #22
  4026e4:	mov	x3, x19
  4026e8:	ldp	x20, x19, [sp, #96]
  4026ec:	ldp	x22, x21, [sp, #80]
  4026f0:	ldp	x24, x23, [sp, #64]
  4026f4:	ldp	x26, x25, [sp, #48]
  4026f8:	ldp	x28, x27, [sp, #32]
  4026fc:	ldp	x29, x30, [sp, #16]
  402700:	mov	w2, #0x1                   	// #1
  402704:	add	sp, sp, #0x70
  402708:	b	401510 <fwrite@plt>
  40270c:	cmp	x21, #0x2
  402710:	b.ne	402760 <cldr_plural_rule_list_print+0x2b0>  // b.any
  402714:	mov	x10, x8
  402718:	mov	x11, x23
  40271c:	ldr	x9, [x10]
  402720:	ldr	x9, [x9, #8]
  402724:	ldr	w12, [x9]
  402728:	sub	w13, w12, #0x3
  40272c:	cmp	w13, #0x1
  402730:	b.hi	40274c <cldr_plural_rule_list_print+0x29c>  // b.pmore
  402734:	subs	x11, x11, #0x1
  402738:	add	x10, x10, #0x8
  40273c:	b.ne	40271c <cldr_plural_rule_list_print+0x26c>  // b.any
  402740:	ldr	x8, [x8, x23, lsl #3]
  402744:	ldr	x9, [x8, #8]
  402748:	ldr	w12, [x9]
  40274c:	cmp	w12, #0x2
  402750:	b.ne	402760 <cldr_plural_rule_list_print+0x2b0>  // b.any
  402754:	ldr	x8, [x9, #8]
  402758:	ldr	w9, [x8, #8]
  40275c:	cbz	w9, 4028f8 <cldr_plural_rule_list_print+0x448>
  402760:	adrp	x1, 404000 <extract_rules+0x224>
  402764:	add	x1, x1, #0x680
  402768:	mov	x0, x19
  40276c:	mov	x2, x21
  402770:	bl	4015b0 <fprintf@plt>
  402774:	ldr	x8, [x20, #8]
  402778:	cbz	x8, 4028e8 <cldr_plural_rule_list_print+0x438>
  40277c:	adrp	x23, 404000 <extract_rules+0x224>
  402780:	mov	x24, xzr
  402784:	mov	x22, xzr
  402788:	mov	x25, #0xffffffffffffffff    	// #-1
  40278c:	mov	w26, #0x2                   	// #2
  402790:	add	x23, x23, #0x697
  402794:	b	4027b0 <cldr_plural_rule_list_print+0x300>
  402798:	ldr	x8, [x20, #8]
  40279c:	add	x24, x24, #0x1
  4027a0:	add	x26, x26, #0x1
  4027a4:	cmp	x24, x8
  4027a8:	sub	x25, x25, #0x1
  4027ac:	b.cs	4028c8 <cldr_plural_rule_list_print+0x418>  // b.hs, b.nlast
  4027b0:	ldr	x8, [x20]
  4027b4:	cmp	x21, #0x2
  4027b8:	cset	w2, eq  // eq = none
  4027bc:	mov	w1, #0x4                   	// #4
  4027c0:	ldr	x8, [x8, x24, lsl #3]
  4027c4:	mov	x3, x19
  4027c8:	ldr	x0, [x8, #8]
  4027cc:	bl	402f70 <print_condition>
  4027d0:	tbz	w0, #0, 402798 <cldr_plural_rule_list_print+0x2e8>
  4027d4:	ldr	x8, [x20, #8]
  4027d8:	cmp	x8, #0x2
  4027dc:	b.cc	40279c <cldr_plural_rule_list_print+0x2ec>  // b.lo, b.ul, b.last
  4027e0:	add	x9, x24, #0x1
  4027e4:	cmp	x9, x8
  4027e8:	b.cs	402798 <cldr_plural_rule_list_print+0x2e8>  // b.hs, b.nlast
  4027ec:	ldr	x10, [x20]
  4027f0:	mvn	x11, x24
  4027f4:	add	x11, x8, x11
  4027f8:	cmp	x11, #0x2
  4027fc:	b.cs	402808 <cldr_plural_rule_list_print+0x358>  // b.hs, b.nlast
  402800:	mov	w11, wzr
  402804:	b	402870 <cldr_plural_rule_list_print+0x3c0>
  402808:	and	x14, x11, #0xfffffffffffffffe
  40280c:	add	x16, x8, x25
  402810:	mov	w12, wzr
  402814:	mov	w13, wzr
  402818:	add	x15, x10, x26, lsl #3
  40281c:	add	x9, x9, x14
  402820:	and	x16, x16, #0xfffffffffffffffe
  402824:	ldp	x17, x18, [x15, #-8]
  402828:	add	x15, x15, #0x10
  40282c:	ldr	x17, [x17, #8]
  402830:	ldr	x18, [x18, #8]
  402834:	ldr	w17, [x17]
  402838:	ldr	w18, [x18]
  40283c:	sub	w17, w17, #0x3
  402840:	sub	w18, w18, #0x3
  402844:	cmp	w17, #0x1
  402848:	cset	w17, hi  // hi = pmore
  40284c:	cmp	w18, #0x1
  402850:	cset	w18, hi  // hi = pmore
  402854:	orr	w12, w12, w17
  402858:	subs	x16, x16, #0x2
  40285c:	orr	w13, w13, w18
  402860:	b.ne	402824 <cldr_plural_rule_list_print+0x374>  // b.any
  402864:	cmp	x11, x14
  402868:	orr	w11, w13, w12
  40286c:	b.eq	40289c <cldr_plural_rule_list_print+0x3ec>  // b.none
  402870:	sub	x12, x8, x9
  402874:	add	x9, x10, x9, lsl #3
  402878:	ldr	x10, [x9], #8
  40287c:	ldr	x10, [x10, #8]
  402880:	ldr	w10, [x10]
  402884:	sub	w10, w10, #0x3
  402888:	cmp	w10, #0x1
  40288c:	cset	w10, hi  // hi = pmore
  402890:	subs	x12, x12, #0x1
  402894:	orr	w11, w11, w10
  402898:	b.ne	402878 <cldr_plural_rule_list_print+0x3c8>  // b.any
  40289c:	sub	x8, x8, #0x1
  4028a0:	cmp	x24, x8
  4028a4:	b.cs	402798 <cldr_plural_rule_list_print+0x2e8>  // b.hs, b.nlast
  4028a8:	tbz	w11, #0, 402798 <cldr_plural_rule_list_print+0x2e8>
  4028ac:	mov	x0, x19
  4028b0:	mov	x1, x23
  4028b4:	mov	x2, x22
  4028b8:	add	x27, x22, #0x1
  4028bc:	bl	4015b0 <fprintf@plt>
  4028c0:	mov	x22, x27
  4028c4:	b	402798 <cldr_plural_rule_list_print+0x2e8>
  4028c8:	cmp	x8, #0x2
  4028cc:	b.cc	4028e8 <cldr_plural_rule_list_print+0x438>  // b.lo, b.ul, b.last
  4028d0:	adrp	x1, 404000 <extract_rules+0x224>
  4028d4:	add	x3, x22, #0x1
  4028d8:	add	x1, x1, #0x6a1
  4028dc:	mov	x0, x19
  4028e0:	mov	x2, x22
  4028e4:	bl	4015b0 <fprintf@plt>
  4028e8:	adrp	x0, 404000 <extract_rules+0x224>
  4028ec:	add	x0, x0, #0x6c9
  4028f0:	mov	w1, #0x3                   	// #3
  4028f4:	b	4026e4 <cldr_plural_rule_list_print+0x234>
  4028f8:	ldr	x9, [x8, #16]
  4028fc:	ldr	x10, [x9, #8]
  402900:	cmp	x10, #0x1
  402904:	b.ne	40291c <cldr_plural_rule_list_print+0x46c>  // b.any
  402908:	ldr	x9, [x9]
  40290c:	ldr	x10, [x9]
  402910:	ldp	x9, x10, [x10]
  402914:	cmp	x9, x10
  402918:	b.eq	4029a0 <cldr_plural_rule_list_print+0x4f0>  // b.none
  40291c:	ldr	x8, [x8, #16]
  402920:	ldr	x10, [x8, #8]
  402924:	cbz	x10, 40297c <cldr_plural_rule_list_print+0x4cc>
  402928:	ldr	x11, [x8]
  40292c:	mov	x9, xzr
  402930:	mov	w12, #0xffffffff            	// #-1
  402934:	ldr	x13, [x11, x9, lsl #3]
  402938:	ldr	x14, [x13]
  40293c:	ldr	w15, [x14]
  402940:	cbnz	w15, 402970 <cldr_plural_rule_list_print+0x4c0>
  402944:	ldr	x13, [x13, #8]
  402948:	ldr	w15, [x13]
  40294c:	cbnz	w15, 402970 <cldr_plural_rule_list_print+0x4c0>
  402950:	ldr	w14, [x14, #8]
  402954:	add	w12, w12, #0x1
  402958:	cmp	w14, w12
  40295c:	b.ne	402970 <cldr_plural_rule_list_print+0x4c0>  // b.any
  402960:	ldr	w12, [x13, #8]
  402964:	add	x9, x9, #0x1
  402968:	cmp	x9, x10
  40296c:	b.cc	402934 <cldr_plural_rule_list_print+0x484>  // b.lo, b.ul, b.last
  402970:	cmp	x9, x10
  402974:	b.ne	402760 <cldr_plural_rule_list_print+0x2b0>  // b.any
  402978:	b	402980 <cldr_plural_rule_list_print+0x4d0>
  40297c:	mov	x9, xzr
  402980:	ldr	x8, [x8]
  402984:	adrp	x1, 404000 <extract_rules+0x224>
  402988:	add	x1, x1, #0x6cd
  40298c:	add	x8, x8, x9, lsl #3
  402990:	ldur	x8, [x8, #-8]
  402994:	ldr	x8, [x8, #8]
  402998:	ldr	w2, [x8, #8]
  40299c:	b	4029ac <cldr_plural_rule_list_print+0x4fc>
  4029a0:	ldr	w2, [x9, #8]
  4029a4:	adrp	x1, 404000 <extract_rules+0x224>
  4029a8:	add	x1, x1, #0x6ae
  4029ac:	mov	x0, x19
  4029b0:	ldp	x20, x19, [sp, #96]
  4029b4:	ldp	x22, x21, [sp, #80]
  4029b8:	ldp	x24, x23, [sp, #64]
  4029bc:	ldp	x26, x25, [sp, #48]
  4029c0:	ldp	x28, x27, [sp, #32]
  4029c4:	ldp	x29, x30, [sp, #16]
  4029c8:	add	sp, sp, #0x70
  4029cc:	b	4015b0 <fprintf@plt>

00000000004029d0 <eval_condition>:
  4029d0:	stp	x29, x30, [sp, #-48]!
  4029d4:	stp	x22, x21, [sp, #16]
  4029d8:	stp	x20, x19, [sp, #32]
  4029dc:	ldr	w8, [x0]
  4029e0:	mov	x19, x0
  4029e4:	mov	x29, sp
  4029e8:	cmp	w8, #0x1
  4029ec:	b.eq	402a4c <eval_condition+0x7c>  // b.none
  4029f0:	cbnz	w8, 402aa8 <eval_condition+0xd8>
  4029f4:	mov	x22, x19
  4029f8:	ldr	x0, [x22, #8]!
  4029fc:	bl	4029d0 <eval_condition>
  402a00:	ldr	x0, [x22, #8]
  402a04:	bl	4029d0 <eval_condition>
  402a08:	ldr	x20, [x22]
  402a0c:	ldr	w8, [x20]
  402a10:	cmp	w8, #0x4
  402a14:	b.eq	402c04 <eval_condition+0x234>  // b.none
  402a18:	ldr	x21, [x19, #16]
  402a1c:	ldr	w9, [x21]
  402a20:	cmp	w9, #0x4
  402a24:	b.eq	402c04 <eval_condition+0x234>  // b.none
  402a28:	cmp	w8, #0x3
  402a2c:	b.ne	402a38 <eval_condition+0x68>  // b.any
  402a30:	cmp	w9, #0x3
  402a34:	b.eq	402a80 <eval_condition+0xb0>  // b.none
  402a38:	cmp	w8, #0x3
  402a3c:	b.eq	402c50 <eval_condition+0x280>  // b.none
  402a40:	cmp	w9, #0x3
  402a44:	b.ne	402a98 <eval_condition+0xc8>  // b.any
  402a48:	b	402cfc <eval_condition+0x32c>
  402a4c:	mov	x22, x19
  402a50:	ldr	x0, [x22, #8]!
  402a54:	bl	4029d0 <eval_condition>
  402a58:	ldr	x0, [x22, #8]
  402a5c:	bl	4029d0 <eval_condition>
  402a60:	ldr	x20, [x22]
  402a64:	ldr	w8, [x20]
  402a68:	cmp	w8, #0x3
  402a6c:	b.eq	402a80 <eval_condition+0xb0>  // b.none
  402a70:	ldr	x21, [x19, #16]
  402a74:	ldr	w9, [x21]
  402a78:	cmp	w9, #0x3
  402a7c:	b.ne	402bf4 <eval_condition+0x224>  // b.any
  402a80:	mov	x0, x20
  402a84:	bl	402320 <cldr_plural_condition_free>
  402a88:	ldr	x0, [x19, #16]
  402a8c:	bl	402320 <cldr_plural_condition_free>
  402a90:	mov	w8, #0x3                   	// #3
  402a94:	str	w8, [x19]
  402a98:	ldp	x20, x19, [sp, #32]
  402a9c:	ldp	x22, x21, [sp, #16]
  402aa0:	ldp	x29, x30, [sp], #48
  402aa4:	ret
  402aa8:	ldr	x0, [x19, #8]
  402aac:	ldr	x8, [x0]
  402ab0:	ldr	w9, [x8]
  402ab4:	sub	w9, w9, #0x66
  402ab8:	cmp	w9, #0x11
  402abc:	b.hi	402a98 <eval_condition+0xc8>  // b.pmore
  402ac0:	mov	w10, #0x1                   	// #1
  402ac4:	lsl	w9, w10, w9
  402ac8:	mov	w10, #0x4001                	// #16385
  402acc:	movk	w10, #0x3, lsl #16
  402ad0:	tst	w9, w10
  402ad4:	b.eq	402b64 <eval_condition+0x194>  // b.none
  402ad8:	ldr	x9, [x0, #16]
  402adc:	ldr	x8, [x9, #8]
  402ae0:	cbz	x8, 402cd8 <eval_condition+0x308>
  402ae4:	ldr	w10, [x0, #8]
  402ae8:	cbz	w10, 402c64 <eval_condition+0x294>
  402aec:	cmp	w10, #0x1
  402af0:	b.ne	402cd8 <eval_condition+0x308>  // b.any
  402af4:	ldr	x9, [x9]
  402af8:	b	402b10 <eval_condition+0x140>
  402afc:	ldr	w10, [x10, #8]
  402b00:	cbz	w10, 402cd0 <eval_condition+0x300>
  402b04:	subs	x8, x8, #0x1
  402b08:	add	x9, x9, #0x8
  402b0c:	b.eq	402cd8 <eval_condition+0x308>  // b.none
  402b10:	ldr	x10, [x9]
  402b14:	ldr	x11, [x10]
  402b18:	ldr	w12, [x11]
  402b1c:	cbz	w12, 402b38 <eval_condition+0x168>
  402b20:	cmp	w12, #0x1
  402b24:	b.ne	402b40 <eval_condition+0x170>  // b.any
  402b28:	ldr	d0, [x11, #8]
  402b2c:	fcmp	d0, #0.0
  402b30:	b.ne	402b40 <eval_condition+0x170>  // b.any
  402b34:	b	402cd0 <eval_condition+0x300>
  402b38:	ldr	w11, [x11, #8]
  402b3c:	cbz	w11, 402cd0 <eval_condition+0x300>
  402b40:	ldr	x10, [x10, #8]
  402b44:	ldr	w11, [x10]
  402b48:	cbz	w11, 402afc <eval_condition+0x12c>
  402b4c:	cmp	w11, #0x1
  402b50:	b.ne	402b04 <eval_condition+0x134>  // b.any
  402b54:	ldr	d0, [x10, #8]
  402b58:	fcmp	d0, #0.0
  402b5c:	b.ne	402b04 <eval_condition+0x134>  // b.any
  402b60:	b	402cd0 <eval_condition+0x300>
  402b64:	mov	w10, #0x108                 	// #264
  402b68:	tst	w9, w10
  402b6c:	b.eq	402a98 <eval_condition+0xc8>  // b.none
  402b70:	ldr	x9, [x0, #16]
  402b74:	ldr	x10, [x9, #8]
  402b78:	cbz	x10, 402c30 <eval_condition+0x260>
  402b7c:	mov	x8, xzr
  402b80:	b	402b98 <eval_condition+0x1c8>
  402b84:	ldr	x9, [x0, #16]
  402b88:	add	x8, x8, #0x1
  402b8c:	ldr	x10, [x9, #8]
  402b90:	cmp	x8, x10
  402b94:	b.cs	402c2c <eval_condition+0x25c>  // b.hs, b.nlast
  402b98:	ldr	x9, [x9]
  402b9c:	ldr	x9, [x9, x8, lsl #3]
  402ba0:	ldr	x10, [x9]
  402ba4:	ldr	w11, [x10]
  402ba8:	cmp	w11, #0x1
  402bac:	b.ne	402bd0 <eval_condition+0x200>  // b.any
  402bb0:	ldr	d0, [x10, #8]
  402bb4:	str	wzr, [x10]
  402bb8:	fcvtzs	w11, d0
  402bbc:	scvtf	d1, w11
  402bc0:	fcmp	d0, d1
  402bc4:	cset	w12, ne  // ne = any
  402bc8:	add	w11, w12, w11
  402bcc:	str	w11, [x10, #8]
  402bd0:	ldr	x9, [x9, #8]
  402bd4:	ldr	w10, [x9]
  402bd8:	cmp	w10, #0x1
  402bdc:	b.ne	402b84 <eval_condition+0x1b4>  // b.any
  402be0:	ldr	d0, [x9, #8]
  402be4:	str	wzr, [x9]
  402be8:	fcvtzs	w10, d0
  402bec:	str	w10, [x9, #8]
  402bf0:	b	402b84 <eval_condition+0x1b4>
  402bf4:	cmp	w8, #0x4
  402bf8:	b.ne	402c48 <eval_condition+0x278>  // b.any
  402bfc:	cmp	w9, #0x4
  402c00:	b.ne	402c48 <eval_condition+0x278>  // b.any
  402c04:	mov	x0, x20
  402c08:	bl	402320 <cldr_plural_condition_free>
  402c0c:	ldr	x0, [x19, #16]
  402c10:	bl	402320 <cldr_plural_condition_free>
  402c14:	mov	w8, #0x4                   	// #4
  402c18:	str	w8, [x19]
  402c1c:	ldp	x20, x19, [sp, #32]
  402c20:	ldp	x22, x21, [sp, #16]
  402c24:	ldp	x29, x30, [sp], #48
  402c28:	ret
  402c2c:	ldr	x8, [x0]
  402c30:	mov	w9, #0x69                  	// #105
  402c34:	str	w9, [x8]
  402c38:	ldp	x20, x19, [sp, #32]
  402c3c:	ldp	x22, x21, [sp, #16]
  402c40:	ldp	x29, x30, [sp], #48
  402c44:	ret
  402c48:	cmp	w8, #0x4
  402c4c:	b.ne	402cf4 <eval_condition+0x324>  // b.any
  402c50:	mov	x0, x20
  402c54:	bl	402320 <cldr_plural_condition_free>
  402c58:	ldr	x8, [x19, #16]
  402c5c:	mov	x0, x21
  402c60:	b	402d0c <eval_condition+0x33c>
  402c64:	ldr	x9, [x9]
  402c68:	b	402c80 <eval_condition+0x2b0>
  402c6c:	ldr	w10, [x10, #8]
  402c70:	cbnz	w10, 402cd0 <eval_condition+0x300>
  402c74:	subs	x8, x8, #0x1
  402c78:	add	x9, x9, #0x8
  402c7c:	b.eq	402cd8 <eval_condition+0x308>  // b.none
  402c80:	ldr	x10, [x9]
  402c84:	ldr	x11, [x10]
  402c88:	ldr	w12, [x11]
  402c8c:	cbz	w12, 402ca8 <eval_condition+0x2d8>
  402c90:	cmp	w12, #0x1
  402c94:	b.ne	402cd0 <eval_condition+0x300>  // b.any
  402c98:	ldr	d0, [x11, #8]
  402c9c:	fcmp	d0, #0.0
  402ca0:	b.eq	402cb0 <eval_condition+0x2e0>  // b.none
  402ca4:	b	402cd0 <eval_condition+0x300>
  402ca8:	ldr	w11, [x11, #8]
  402cac:	cbnz	w11, 402cd0 <eval_condition+0x300>
  402cb0:	ldr	x10, [x10, #8]
  402cb4:	ldr	w11, [x10]
  402cb8:	cbz	w11, 402c6c <eval_condition+0x29c>
  402cbc:	cmp	w11, #0x1
  402cc0:	b.ne	402cd0 <eval_condition+0x300>  // b.any
  402cc4:	ldr	d0, [x10, #8]
  402cc8:	fcmp	d0, #0.0
  402ccc:	b.eq	402c74 <eval_condition+0x2a4>  // b.none
  402cd0:	mov	w20, #0x4                   	// #4
  402cd4:	b	402cdc <eval_condition+0x30c>
  402cd8:	mov	w20, #0x3                   	// #3
  402cdc:	bl	402378 <cldr_plural_relation_free>
  402ce0:	str	w20, [x19]
  402ce4:	ldp	x20, x19, [sp, #32]
  402ce8:	ldp	x22, x21, [sp, #16]
  402cec:	ldp	x29, x30, [sp], #48
  402cf0:	ret
  402cf4:	cmp	w9, #0x4
  402cf8:	b.ne	402a98 <eval_condition+0xc8>  // b.any
  402cfc:	mov	x0, x21
  402d00:	bl	402320 <cldr_plural_condition_free>
  402d04:	ldr	x8, [x19, #8]
  402d08:	mov	x0, x20
  402d0c:	ldr	w9, [x8]
  402d10:	str	w9, [x19]
  402d14:	ldur	q0, [x8, #8]
  402d18:	str	q0, [x22]
  402d1c:	ldp	x20, x19, [sp, #32]
  402d20:	ldp	x22, x21, [sp, #16]
  402d24:	ldp	x29, x30, [sp], #48
  402d28:	b	401500 <free@plt>

0000000000402d2c <find_largest_modulus>:
  402d2c:	stp	x29, x30, [sp, #-32]!
  402d30:	ldr	w8, [x0]
  402d34:	str	x19, [sp, #16]
  402d38:	mov	x19, x0
  402d3c:	mov	x29, sp
  402d40:	cmp	w8, #0x2
  402d44:	b.cs	402d74 <find_largest_modulus+0x48>  // b.hs, b.nlast
  402d48:	ldr	x0, [x19, #8]
  402d4c:	bl	402d2c <find_largest_modulus>
  402d50:	ldr	x8, [x19, #16]
  402d54:	mov	w19, w0
  402d58:	mov	x0, x8
  402d5c:	bl	402d2c <find_largest_modulus>
  402d60:	cmp	w19, w0
  402d64:	csel	w0, w19, w0, gt
  402d68:	ldr	x19, [sp, #16]
  402d6c:	ldp	x29, x30, [sp], #32
  402d70:	ret
  402d74:	b.ne	402d90 <find_largest_modulus+0x64>  // b.any
  402d78:	ldr	x8, [x19, #8]
  402d7c:	ldr	x8, [x8]
  402d80:	ldr	w0, [x8, #4]
  402d84:	ldr	x19, [sp, #16]
  402d88:	ldp	x29, x30, [sp], #32
  402d8c:	ret
  402d90:	mov	w0, wzr
  402d94:	ldr	x19, [sp, #16]
  402d98:	ldp	x29, x30, [sp], #32
  402d9c:	ret

0000000000402da0 <find_largest_number>:
  402da0:	stp	x29, x30, [sp, #-32]!
  402da4:	ldr	w8, [x0]
  402da8:	str	x19, [sp, #16]
  402dac:	mov	x19, x0
  402db0:	mov	x29, sp
  402db4:	cmp	w8, #0x2
  402db8:	b.cs	402de8 <find_largest_number+0x48>  // b.hs, b.nlast
  402dbc:	ldr	x0, [x19, #8]
  402dc0:	bl	402da0 <find_largest_number>
  402dc4:	ldr	x8, [x19, #16]
  402dc8:	mov	w19, w0
  402dcc:	mov	x0, x8
  402dd0:	bl	402da0 <find_largest_number>
  402dd4:	cmp	w19, w0
  402dd8:	csel	w0, w19, w0, gt
  402ddc:	ldr	x19, [sp, #16]
  402de0:	ldp	x29, x30, [sp], #32
  402de4:	ret
  402de8:	b.ne	402e58 <find_largest_number+0xb8>  // b.any
  402dec:	ldr	x8, [x19, #8]
  402df0:	ldr	x10, [x8, #16]
  402df4:	ldr	x8, [x10, #8]
  402df8:	cbz	x8, 402e58 <find_largest_number+0xb8>
  402dfc:	ldr	x10, [x10]
  402e00:	mov	x9, xzr
  402e04:	mov	w0, wzr
  402e08:	b	402e18 <find_largest_number+0x78>
  402e0c:	add	x9, x9, #0x1
  402e10:	cmp	x9, x8
  402e14:	b.cs	402ddc <find_largest_number+0x3c>  // b.hs, b.nlast
  402e18:	ldr	x11, [x10, x9, lsl #3]
  402e1c:	ldr	x11, [x11, #8]
  402e20:	ldr	w12, [x11]
  402e24:	cmp	w12, #0x1
  402e28:	b.eq	402e40 <find_largest_number+0xa0>  // b.none
  402e2c:	cbnz	w12, 402e0c <find_largest_number+0x6c>
  402e30:	ldr	w11, [x11, #8]
  402e34:	cmp	w11, w0
  402e38:	csel	w0, w11, w0, gt
  402e3c:	b	402e0c <find_largest_number+0x6c>
  402e40:	ldr	d0, [x11, #8]
  402e44:	scvtf	d1, w0
  402e48:	fcmp	d0, d1
  402e4c:	b.le	402e0c <find_largest_number+0x6c>
  402e50:	fcvtzs	w0, d0
  402e54:	b	402e0c <find_largest_number+0x6c>
  402e58:	mov	w0, wzr
  402e5c:	ldr	x19, [sp, #16]
  402e60:	ldp	x29, x30, [sp], #32
  402e64:	ret

0000000000402e68 <apply_condition>:
  402e68:	stp	x29, x30, [sp, #-32]!
  402e6c:	stp	x20, x19, [sp, #16]
  402e70:	mov	w19, w1
  402e74:	mov	x20, x0
  402e78:	mov	x29, sp
  402e7c:	b	402e94 <apply_condition+0x2c>
  402e80:	ldr	x0, [x20, #8]
  402e84:	mov	w1, w19
  402e88:	bl	402e68 <apply_condition>
  402e8c:	tbz	w0, #0, 402f48 <apply_condition+0xe0>
  402e90:	ldr	x20, [x20, #16]
  402e94:	ldr	w8, [x20]
  402e98:	cbz	w8, 402e80 <apply_condition+0x18>
  402e9c:	cmp	w8, #0x1
  402ea0:	b.ne	402ec4 <apply_condition+0x5c>  // b.any
  402ea4:	ldr	x0, [x20, #8]
  402ea8:	mov	w1, w19
  402eac:	bl	402e68 <apply_condition>
  402eb0:	tbz	w0, #0, 402e90 <apply_condition+0x28>
  402eb4:	mov	w0, #0x1                   	// #1
  402eb8:	ldp	x20, x19, [sp, #16]
  402ebc:	ldp	x29, x30, [sp], #32
  402ec0:	ret
  402ec4:	cmp	w8, #0x2
  402ec8:	b.ne	402f48 <apply_condition+0xe0>  // b.any
  402ecc:	ldr	x8, [x20, #8]
  402ed0:	ldr	x9, [x8]
  402ed4:	ldr	w9, [x9, #4]
  402ed8:	cmp	w9, #0x1
  402edc:	b.lt	402ee8 <apply_condition+0x80>  // b.tstop
  402ee0:	sdiv	w10, w19, w9
  402ee4:	msub	w19, w10, w9, w19
  402ee8:	ldr	x10, [x8, #16]
  402eec:	ldr	x9, [x10, #8]
  402ef0:	cbz	x9, 402f58 <apply_condition+0xf0>
  402ef4:	ldr	x10, [x10]
  402ef8:	mov	x11, xzr
  402efc:	b	402f0c <apply_condition+0xa4>
  402f00:	add	x11, x11, #0x1
  402f04:	cmp	x11, x9
  402f08:	b.cs	402f58 <apply_condition+0xf0>  // b.hs, b.nlast
  402f0c:	ldr	x12, [x10, x11, lsl #3]
  402f10:	ldr	x13, [x12]
  402f14:	ldr	w13, [x13, #8]
  402f18:	cmp	w13, w19
  402f1c:	b.gt	402f00 <apply_condition+0x98>
  402f20:	ldr	x12, [x12, #8]
  402f24:	ldr	w12, [x12, #8]
  402f28:	cmp	w19, w12
  402f2c:	b.gt	402f00 <apply_condition+0x98>
  402f30:	ldr	w8, [x8, #8]
  402f34:	cmp	w8, #0x0
  402f38:	cset	w0, eq  // eq = none
  402f3c:	ldp	x20, x19, [sp, #16]
  402f40:	ldp	x29, x30, [sp], #32
  402f44:	ret
  402f48:	mov	w0, wzr
  402f4c:	ldp	x20, x19, [sp, #16]
  402f50:	ldp	x29, x30, [sp], #32
  402f54:	ret
  402f58:	ldr	w8, [x8, #8]
  402f5c:	cmp	w8, #0x0
  402f60:	cset	w0, ne  // ne = any
  402f64:	ldp	x20, x19, [sp, #16]
  402f68:	ldp	x29, x30, [sp], #32
  402f6c:	ret

0000000000402f70 <print_condition>:
  402f70:	sub	sp, sp, #0x70
  402f74:	stp	x29, x30, [sp, #16]
  402f78:	stp	x28, x27, [sp, #32]
  402f7c:	stp	x26, x25, [sp, #48]
  402f80:	stp	x24, x23, [sp, #64]
  402f84:	stp	x22, x21, [sp, #80]
  402f88:	stp	x20, x19, [sp, #96]
  402f8c:	ldr	w8, [x0]
  402f90:	mov	x19, x3
  402f94:	mov	x22, x0
  402f98:	mov	w20, w1
  402f9c:	cmp	w8, #0x2
  402fa0:	add	x29, sp, #0x10
  402fa4:	b.eq	403000 <print_condition+0x90>  // b.none
  402fa8:	cmp	w8, #0x1
  402fac:	b.eq	4030bc <print_condition+0x14c>  // b.none
  402fb0:	cbnz	w8, 4030f8 <print_condition+0x188>
  402fb4:	cmp	w20, #0x1
  402fb8:	b.ne	403100 <print_condition+0x190>  // b.any
  402fbc:	mov	w0, #0x28                  	// #40
  402fc0:	mov	x1, x19
  402fc4:	bl	401340 <fputc@plt>
  402fc8:	ldr	x0, [x22, #8]
  402fcc:	mov	w1, wzr
  402fd0:	mov	w2, wzr
  402fd4:	mov	x3, x19
  402fd8:	bl	402f70 <print_condition>
  402fdc:	adrp	x0, 404000 <extract_rules+0x224>
  402fe0:	add	x0, x0, #0x6eb
  402fe4:	mov	w1, #0x4                   	// #4
  402fe8:	mov	w2, #0x1                   	// #1
  402fec:	mov	x3, x19
  402ff0:	bl	401510 <fwrite@plt>
  402ff4:	ldr	x0, [x22, #16]
  402ff8:	mov	w1, wzr
  402ffc:	b	403204 <print_condition+0x294>
  403000:	ldr	x28, [x22, #8]
  403004:	mov	w21, w2
  403008:	ldr	w8, [x28, #8]
  40300c:	cbz	w8, 403144 <print_condition+0x1d4>
  403010:	cmp	w20, #0x1
  403014:	b.ne	403034 <print_condition+0xc4>  // b.any
  403018:	ldr	x8, [x28, #16]
  40301c:	ldr	x8, [x8, #8]
  403020:	cmp	x8, #0x2
  403024:	b.cc	403034 <print_condition+0xc4>  // b.lo, b.ul, b.last
  403028:	mov	w0, #0x28                  	// #40
  40302c:	mov	x1, x19
  403030:	bl	401340 <fputc@plt>
  403034:	ldr	x8, [x28, #16]
  403038:	ldr	x9, [x8, #8]
  40303c:	cbz	x9, 4038e4 <print_condition+0x974>
  403040:	ldr	x8, [x8]
  403044:	adrp	x10, 404000 <extract_rules+0x224>
  403048:	adrp	x11, 404000 <extract_rules+0x224>
  40304c:	add	x10, x10, #0x727
  403050:	ldr	x23, [x8]
  403054:	add	x11, x11, #0x71f
  403058:	tst	w21, #0x1
  40305c:	csel	x10, x11, x10, ne  // ne = any
  403060:	ldp	x8, x9, [x23]
  403064:	str	x10, [sp, #8]
  403068:	ldr	w8, [x8, #8]
  40306c:	ldr	w9, [x9, #8]
  403070:	cmp	w8, w9
  403074:	b.ne	403214 <print_condition+0x2a4>  // b.any
  403078:	ldr	x8, [x28]
  40307c:	ldr	w2, [x8, #4]
  403080:	cbz	w2, 4032a0 <print_condition+0x330>
  403084:	ldr	x1, [sp, #8]
  403088:	mov	x0, x19
  40308c:	bl	4015b0 <fprintf@plt>
  403090:	adrp	x1, 404000 <extract_rules+0x224>
  403094:	add	x1, x1, #0x712
  403098:	tbz	w21, #0, 4030b4 <print_condition+0x144>
  40309c:	ldr	x8, [x28, #16]
  4030a0:	adrp	x9, 404000 <extract_rules+0x224>
  4030a4:	add	x9, x9, #0x70b
  4030a8:	ldr	x8, [x8, #8]
  4030ac:	cmp	x8, #0x1
  4030b0:	csel	x1, x9, x1, eq  // eq = none
  4030b4:	ldr	x8, [x23]
  4030b8:	b	40344c <print_condition+0x4dc>
  4030bc:	cbz	w20, 4031c4 <print_condition+0x254>
  4030c0:	ldr	x0, [x22, #8]
  4030c4:	mov	w1, #0x1                   	// #1
  4030c8:	mov	w2, wzr
  4030cc:	mov	x3, x19
  4030d0:	bl	402f70 <print_condition>
  4030d4:	adrp	x0, 404000 <extract_rules+0x224>
  4030d8:	add	x0, x0, #0x6f0
  4030dc:	mov	w1, #0x4                   	// #4
  4030e0:	mov	w2, #0x1                   	// #1
  4030e4:	mov	x3, x19
  4030e8:	bl	401510 <fwrite@plt>
  4030ec:	ldr	x0, [x22, #16]
  4030f0:	mov	w1, #0x1                   	// #1
  4030f4:	b	403134 <print_condition+0x1c4>
  4030f8:	mov	w0, wzr
  4030fc:	b	4038e8 <print_condition+0x978>
  403100:	ldr	x0, [x22, #8]
  403104:	mov	w1, wzr
  403108:	mov	w2, wzr
  40310c:	mov	x3, x19
  403110:	bl	402f70 <print_condition>
  403114:	adrp	x0, 404000 <extract_rules+0x224>
  403118:	add	x0, x0, #0x6eb
  40311c:	mov	w1, #0x4                   	// #4
  403120:	mov	w2, #0x1                   	// #1
  403124:	mov	x3, x19
  403128:	bl	401510 <fwrite@plt>
  40312c:	ldr	x0, [x22, #16]
  403130:	mov	w1, wzr
  403134:	mov	w2, wzr
  403138:	mov	x3, x19
  40313c:	bl	402f70 <print_condition>
  403140:	b	4038e4 <print_condition+0x974>
  403144:	cbnz	w20, 403164 <print_condition+0x1f4>
  403148:	ldr	x8, [x28, #16]
  40314c:	ldr	x8, [x8, #8]
  403150:	cmp	x8, #0x2
  403154:	b.cc	403164 <print_condition+0x1f4>  // b.lo, b.ul, b.last
  403158:	mov	w0, #0x28                  	// #40
  40315c:	mov	x1, x19
  403160:	bl	401340 <fputc@plt>
  403164:	ldr	x8, [x28, #16]
  403168:	ldr	x9, [x8, #8]
  40316c:	cbz	x9, 4038e4 <print_condition+0x974>
  403170:	ldr	x8, [x8]
  403174:	adrp	x10, 404000 <extract_rules+0x224>
  403178:	adrp	x11, 404000 <extract_rules+0x224>
  40317c:	add	x10, x10, #0x727
  403180:	ldr	x23, [x8]
  403184:	add	x11, x11, #0x71f
  403188:	tst	w21, #0x1
  40318c:	csel	x10, x11, x10, ne  // ne = any
  403190:	ldp	x8, x9, [x23]
  403194:	str	x10, [sp, #8]
  403198:	ldr	w8, [x8, #8]
  40319c:	ldr	w9, [x9, #8]
  4031a0:	cmp	w8, w9
  4031a4:	b.ne	403258 <print_condition+0x2e8>  // b.any
  4031a8:	ldr	x8, [x28]
  4031ac:	ldr	w2, [x8, #4]
  4031b0:	cbz	w2, 403380 <print_condition+0x410>
  4031b4:	ldr	x1, [sp, #8]
  4031b8:	mov	x0, x19
  4031bc:	bl	4015b0 <fprintf@plt>
  4031c0:	b	40338c <print_condition+0x41c>
  4031c4:	mov	w0, #0x28                  	// #40
  4031c8:	mov	x1, x19
  4031cc:	bl	401340 <fputc@plt>
  4031d0:	ldr	x0, [x22, #8]
  4031d4:	mov	w1, #0x1                   	// #1
  4031d8:	mov	w2, wzr
  4031dc:	mov	x3, x19
  4031e0:	bl	402f70 <print_condition>
  4031e4:	adrp	x0, 404000 <extract_rules+0x224>
  4031e8:	add	x0, x0, #0x6f0
  4031ec:	mov	w1, #0x4                   	// #4
  4031f0:	mov	w2, #0x1                   	// #1
  4031f4:	mov	x3, x19
  4031f8:	bl	401510 <fwrite@plt>
  4031fc:	ldr	x0, [x22, #16]
  403200:	mov	w1, #0x1                   	// #1
  403204:	mov	w2, wzr
  403208:	mov	x3, x19
  40320c:	bl	402f70 <print_condition>
  403210:	b	4038d8 <print_condition+0x968>
  403214:	cbz	w8, 4032bc <print_condition+0x34c>
  403218:	cbz	w20, 40322c <print_condition+0x2bc>
  40321c:	ldr	x8, [x28, #16]
  403220:	ldr	x8, [x8, #8]
  403224:	cmp	x8, #0x2
  403228:	b.cc	403238 <print_condition+0x2c8>  // b.lo, b.ul, b.last
  40322c:	mov	w0, #0x28                  	// #40
  403230:	mov	x1, x19
  403234:	bl	401340 <fputc@plt>
  403238:	ldr	x8, [x28]
  40323c:	ldr	w2, [x8, #4]
  403240:	cbz	w2, 4032dc <print_condition+0x36c>
  403244:	adrp	x1, 404000 <extract_rules+0x224>
  403248:	add	x1, x1, #0x727
  40324c:	mov	x0, x19
  403250:	bl	4015b0 <fprintf@plt>
  403254:	b	4032e8 <print_condition+0x378>
  403258:	cbz	w8, 4033b8 <print_condition+0x448>
  40325c:	cmp	w20, #0x1
  403260:	b.eq	403274 <print_condition+0x304>  // b.none
  403264:	ldr	x8, [x28, #16]
  403268:	ldr	x8, [x8, #8]
  40326c:	cmp	x8, #0x2
  403270:	b.cc	403280 <print_condition+0x310>  // b.lo, b.ul, b.last
  403274:	mov	w0, #0x28                  	// #40
  403278:	mov	x1, x19
  40327c:	bl	401340 <fputc@plt>
  403280:	ldr	x8, [x28]
  403284:	ldr	w2, [x8, #4]
  403288:	cbz	w2, 4033d8 <print_condition+0x468>
  40328c:	adrp	x1, 404000 <extract_rules+0x224>
  403290:	add	x1, x1, #0x727
  403294:	mov	x0, x19
  403298:	bl	4015b0 <fprintf@plt>
  40329c:	b	4033e4 <print_condition+0x474>
  4032a0:	mov	w0, #0x6e                  	// #110
  4032a4:	mov	x1, x19
  4032a8:	bl	401340 <fputc@plt>
  4032ac:	adrp	x1, 404000 <extract_rules+0x224>
  4032b0:	add	x1, x1, #0x712
  4032b4:	tbnz	w21, #0, 40309c <print_condition+0x12c>
  4032b8:	b	4030b4 <print_condition+0x144>
  4032bc:	ldr	x8, [x28]
  4032c0:	ldr	w2, [x8, #4]
  4032c4:	cbz	w2, 403434 <print_condition+0x4c4>
  4032c8:	adrp	x1, 404000 <extract_rules+0x224>
  4032cc:	add	x1, x1, #0x727
  4032d0:	mov	x0, x19
  4032d4:	bl	4015b0 <fprintf@plt>
  4032d8:	b	403440 <print_condition+0x4d0>
  4032dc:	mov	w0, #0x6e                  	// #110
  4032e0:	mov	x1, x19
  4032e4:	bl	401340 <fputc@plt>
  4032e8:	ldr	x8, [x23]
  4032ec:	adrp	x1, 404000 <extract_rules+0x224>
  4032f0:	add	x1, x1, #0x71b
  4032f4:	mov	x0, x19
  4032f8:	ldr	w2, [x8, #8]
  4032fc:	bl	4015b0 <fprintf@plt>
  403300:	adrp	x0, 404000 <extract_rules+0x224>
  403304:	add	x0, x0, #0x6f0
  403308:	mov	w1, #0x4                   	// #4
  40330c:	mov	w2, #0x1                   	// #1
  403310:	mov	x3, x19
  403314:	bl	401510 <fwrite@plt>
  403318:	ldr	x8, [x28]
  40331c:	ldr	w2, [x8, #4]
  403320:	cbz	w2, 403338 <print_condition+0x3c8>
  403324:	adrp	x1, 404000 <extract_rules+0x224>
  403328:	add	x1, x1, #0x727
  40332c:	mov	x0, x19
  403330:	bl	4015b0 <fprintf@plt>
  403334:	b	403344 <print_condition+0x3d4>
  403338:	mov	w0, #0x6e                  	// #110
  40333c:	mov	x1, x19
  403340:	bl	401340 <fputc@plt>
  403344:	ldr	x8, [x23, #8]
  403348:	adrp	x1, 404000 <extract_rules+0x224>
  40334c:	add	x1, x1, #0x717
  403350:	mov	x0, x19
  403354:	ldr	w2, [x8, #8]
  403358:	bl	4015b0 <fprintf@plt>
  40335c:	cbz	w20, 403370 <print_condition+0x400>
  403360:	ldr	x8, [x28, #16]
  403364:	ldr	x8, [x8, #8]
  403368:	cmp	x8, #0x2
  40336c:	b.cc	403458 <print_condition+0x4e8>  // b.lo, b.ul, b.last
  403370:	mov	w0, #0x29                  	// #41
  403374:	mov	x1, x19
  403378:	bl	401340 <fputc@plt>
  40337c:	b	403458 <print_condition+0x4e8>
  403380:	mov	w0, #0x6e                  	// #110
  403384:	mov	x1, x19
  403388:	bl	401340 <fputc@plt>
  40338c:	adrp	x1, 404000 <extract_rules+0x224>
  403390:	add	x1, x1, #0x6fc
  403394:	tbz	w21, #0, 4033b0 <print_condition+0x440>
  403398:	ldr	x8, [x28, #16]
  40339c:	adrp	x9, 404000 <extract_rules+0x224>
  4033a0:	add	x9, x9, #0x6f5
  4033a4:	ldr	x8, [x8, #8]
  4033a8:	cmp	x8, #0x1
  4033ac:	csel	x1, x9, x1, eq  // eq = none
  4033b0:	ldr	x8, [x23]
  4033b4:	b	4036c0 <print_condition+0x750>
  4033b8:	ldr	x8, [x28]
  4033bc:	ldr	w2, [x8, #4]
  4033c0:	cbz	w2, 4036a8 <print_condition+0x738>
  4033c4:	adrp	x1, 404000 <extract_rules+0x224>
  4033c8:	add	x1, x1, #0x727
  4033cc:	mov	x0, x19
  4033d0:	bl	4015b0 <fprintf@plt>
  4033d4:	b	4036b4 <print_condition+0x744>
  4033d8:	mov	w0, #0x6e                  	// #110
  4033dc:	mov	x1, x19
  4033e0:	bl	401340 <fputc@plt>
  4033e4:	ldr	x8, [x23]
  4033e8:	adrp	x1, 404000 <extract_rules+0x224>
  4033ec:	add	x1, x1, #0x706
  4033f0:	mov	x0, x19
  4033f4:	ldr	w2, [x8, #8]
  4033f8:	bl	4015b0 <fprintf@plt>
  4033fc:	adrp	x0, 404000 <extract_rules+0x224>
  403400:	add	x0, x0, #0x6eb
  403404:	mov	w1, #0x4                   	// #4
  403408:	mov	w2, #0x1                   	// #1
  40340c:	mov	x3, x19
  403410:	bl	401510 <fwrite@plt>
  403414:	ldr	x8, [x28]
  403418:	ldr	w2, [x8, #4]
  40341c:	cbz	w2, 40365c <print_condition+0x6ec>
  403420:	adrp	x1, 404000 <extract_rules+0x224>
  403424:	add	x1, x1, #0x727
  403428:	mov	x0, x19
  40342c:	bl	4015b0 <fprintf@plt>
  403430:	b	403668 <print_condition+0x6f8>
  403434:	mov	w0, #0x6e                  	// #110
  403438:	mov	x1, x19
  40343c:	bl	401340 <fputc@plt>
  403440:	ldr	x8, [x23, #8]
  403444:	adrp	x1, 404000 <extract_rules+0x224>
  403448:	add	x1, x1, #0x717
  40344c:	ldr	w2, [x8, #8]
  403450:	mov	x0, x19
  403454:	bl	4015b0 <fprintf@plt>
  403458:	ldr	x8, [x28, #16]
  40345c:	ldr	x9, [x8, #8]
  403460:	cmp	x9, #0x2
  403464:	b.cc	40364c <print_condition+0x6dc>  // b.lo, b.ul, b.last
  403468:	adrp	x23, 404000 <extract_rules+0x224>
  40346c:	adrp	x27, 404000 <extract_rules+0x224>
  403470:	adrp	x24, 404000 <extract_rules+0x224>
  403474:	adrp	x25, 404000 <extract_rules+0x224>
  403478:	mov	w26, #0x1                   	// #1
  40347c:	add	x23, x23, #0x6eb
  403480:	add	x27, x27, #0x712
  403484:	add	x24, x24, #0x717
  403488:	add	x25, x25, #0x727
  40348c:	b	4034b0 <print_condition+0x540>
  403490:	mov	w0, #0x29                  	// #41
  403494:	mov	x1, x19
  403498:	bl	401340 <fputc@plt>
  40349c:	ldr	x8, [x28, #16]
  4034a0:	add	x26, x26, #0x1
  4034a4:	ldr	x9, [x8, #8]
  4034a8:	cmp	x26, x9
  4034ac:	b.cs	40364c <print_condition+0x6dc>  // b.hs, b.nlast
  4034b0:	ldr	x8, [x8]
  4034b4:	mov	w1, #0x4                   	// #4
  4034b8:	mov	w2, #0x1                   	// #1
  4034bc:	mov	x0, x23
  4034c0:	ldr	x22, [x8, x26, lsl #3]
  4034c4:	mov	x3, x19
  4034c8:	bl	401510 <fwrite@plt>
  4034cc:	ldp	x8, x9, [x22]
  4034d0:	ldr	w8, [x8, #8]
  4034d4:	ldr	w9, [x9, #8]
  4034d8:	cmp	w8, w9
  4034dc:	b.ne	403524 <print_condition+0x5b4>  // b.any
  4034e0:	ldr	x8, [x28]
  4034e4:	ldr	w2, [x8, #4]
  4034e8:	cbz	w2, 403564 <print_condition+0x5f4>
  4034ec:	ldr	x1, [sp, #8]
  4034f0:	mov	x0, x19
  4034f4:	bl	4015b0 <fprintf@plt>
  4034f8:	mov	x1, x27
  4034fc:	tbz	w21, #0, 403518 <print_condition+0x5a8>
  403500:	ldr	x8, [x28, #16]
  403504:	ldr	x8, [x8, #8]
  403508:	cmp	x8, #0x1
  40350c:	adrp	x8, 404000 <extract_rules+0x224>
  403510:	add	x8, x8, #0x70b
  403514:	csel	x1, x8, x27, eq  // eq = none
  403518:	ldr	x8, [x22]
  40351c:	mov	x0, x19
  403520:	b	403640 <print_condition+0x6d0>
  403524:	cbz	w8, 40357c <print_condition+0x60c>
  403528:	cbz	w20, 40353c <print_condition+0x5cc>
  40352c:	ldr	x8, [x28, #16]
  403530:	ldr	x8, [x8, #8]
  403534:	cmp	x8, #0x2
  403538:	b.cc	403548 <print_condition+0x5d8>  // b.lo, b.ul, b.last
  40353c:	mov	w0, #0x28                  	// #40
  403540:	mov	x1, x19
  403544:	bl	401340 <fputc@plt>
  403548:	ldr	x8, [x28]
  40354c:	ldr	w2, [x8, #4]
  403550:	cbz	w2, 403598 <print_condition+0x628>
  403554:	mov	x0, x19
  403558:	mov	x1, x25
  40355c:	bl	4015b0 <fprintf@plt>
  403560:	b	4035a4 <print_condition+0x634>
  403564:	mov	w0, #0x6e                  	// #110
  403568:	mov	x1, x19
  40356c:	bl	401340 <fputc@plt>
  403570:	mov	x1, x27
  403574:	tbz	w21, #0, 403518 <print_condition+0x5a8>
  403578:	b	403500 <print_condition+0x590>
  40357c:	ldr	x8, [x28]
  403580:	ldr	w2, [x8, #4]
  403584:	cbz	w2, 403628 <print_condition+0x6b8>
  403588:	mov	x0, x19
  40358c:	mov	x1, x25
  403590:	bl	4015b0 <fprintf@plt>
  403594:	b	403634 <print_condition+0x6c4>
  403598:	mov	w0, #0x6e                  	// #110
  40359c:	mov	x1, x19
  4035a0:	bl	401340 <fputc@plt>
  4035a4:	ldr	x8, [x22]
  4035a8:	adrp	x1, 404000 <extract_rules+0x224>
  4035ac:	mov	x0, x19
  4035b0:	add	x1, x1, #0x71b
  4035b4:	ldr	w2, [x8, #8]
  4035b8:	bl	4015b0 <fprintf@plt>
  4035bc:	adrp	x0, 404000 <extract_rules+0x224>
  4035c0:	mov	w1, #0x4                   	// #4
  4035c4:	mov	w2, #0x1                   	// #1
  4035c8:	add	x0, x0, #0x6f0
  4035cc:	mov	x3, x19
  4035d0:	bl	401510 <fwrite@plt>
  4035d4:	ldr	x8, [x28]
  4035d8:	ldr	w2, [x8, #4]
  4035dc:	cbz	w2, 4035f0 <print_condition+0x680>
  4035e0:	mov	x0, x19
  4035e4:	mov	x1, x25
  4035e8:	bl	4015b0 <fprintf@plt>
  4035ec:	b	4035fc <print_condition+0x68c>
  4035f0:	mov	w0, #0x6e                  	// #110
  4035f4:	mov	x1, x19
  4035f8:	bl	401340 <fputc@plt>
  4035fc:	ldr	x8, [x22, #8]
  403600:	mov	x0, x19
  403604:	mov	x1, x24
  403608:	ldr	w2, [x8, #8]
  40360c:	bl	4015b0 <fprintf@plt>
  403610:	cbz	w20, 403490 <print_condition+0x520>
  403614:	ldr	x8, [x28, #16]
  403618:	ldr	x8, [x8, #8]
  40361c:	cmp	x8, #0x2
  403620:	b.cc	40349c <print_condition+0x52c>  // b.lo, b.ul, b.last
  403624:	b	403490 <print_condition+0x520>
  403628:	mov	w0, #0x6e                  	// #110
  40362c:	mov	x1, x19
  403630:	bl	401340 <fputc@plt>
  403634:	ldr	x8, [x22, #8]
  403638:	mov	x0, x19
  40363c:	mov	x1, x24
  403640:	ldr	w2, [x8, #8]
  403644:	bl	4015b0 <fprintf@plt>
  403648:	b	40349c <print_condition+0x52c>
  40364c:	cmp	w20, #0x1
  403650:	mov	w0, #0x1                   	// #1
  403654:	b.eq	4038d0 <print_condition+0x960>  // b.none
  403658:	b	4038e8 <print_condition+0x978>
  40365c:	mov	w0, #0x6e                  	// #110
  403660:	mov	x1, x19
  403664:	bl	401340 <fputc@plt>
  403668:	ldr	x8, [x23, #8]
  40366c:	adrp	x1, 404000 <extract_rules+0x224>
  403670:	add	x1, x1, #0x701
  403674:	mov	x0, x19
  403678:	ldr	w2, [x8, #8]
  40367c:	bl	4015b0 <fprintf@plt>
  403680:	cmp	w20, #0x1
  403684:	b.eq	403698 <print_condition+0x728>  // b.none
  403688:	ldr	x8, [x28, #16]
  40368c:	ldr	x8, [x8, #8]
  403690:	cmp	x8, #0x2
  403694:	b.cc	4036cc <print_condition+0x75c>  // b.lo, b.ul, b.last
  403698:	mov	w0, #0x29                  	// #41
  40369c:	mov	x1, x19
  4036a0:	bl	401340 <fputc@plt>
  4036a4:	b	4036cc <print_condition+0x75c>
  4036a8:	mov	w0, #0x6e                  	// #110
  4036ac:	mov	x1, x19
  4036b0:	bl	401340 <fputc@plt>
  4036b4:	ldr	x8, [x23, #8]
  4036b8:	adrp	x1, 404000 <extract_rules+0x224>
  4036bc:	add	x1, x1, #0x701
  4036c0:	ldr	w2, [x8, #8]
  4036c4:	mov	x0, x19
  4036c8:	bl	4015b0 <fprintf@plt>
  4036cc:	ldr	x8, [x28, #16]
  4036d0:	ldr	x9, [x8, #8]
  4036d4:	cmp	x9, #0x2
  4036d8:	b.cc	4038c8 <print_condition+0x958>  // b.lo, b.ul, b.last
  4036dc:	adrp	x23, 404000 <extract_rules+0x224>
  4036e0:	adrp	x27, 404000 <extract_rules+0x224>
  4036e4:	adrp	x24, 404000 <extract_rules+0x224>
  4036e8:	adrp	x25, 404000 <extract_rules+0x224>
  4036ec:	mov	w26, #0x1                   	// #1
  4036f0:	add	x23, x23, #0x6f0
  4036f4:	add	x27, x27, #0x6fc
  4036f8:	add	x24, x24, #0x701
  4036fc:	add	x25, x25, #0x727
  403700:	b	403724 <print_condition+0x7b4>
  403704:	mov	w0, #0x29                  	// #41
  403708:	mov	x1, x19
  40370c:	bl	401340 <fputc@plt>
  403710:	ldr	x8, [x28, #16]
  403714:	add	x26, x26, #0x1
  403718:	ldr	x9, [x8, #8]
  40371c:	cmp	x26, x9
  403720:	b.cs	4038c8 <print_condition+0x958>  // b.hs, b.nlast
  403724:	ldr	x8, [x8]
  403728:	mov	w1, #0x4                   	// #4
  40372c:	mov	w2, #0x1                   	// #1
  403730:	mov	x0, x23
  403734:	ldr	x22, [x8, x26, lsl #3]
  403738:	mov	x3, x19
  40373c:	bl	401510 <fwrite@plt>
  403740:	ldp	x8, x9, [x22]
  403744:	ldr	w8, [x8, #8]
  403748:	ldr	w9, [x9, #8]
  40374c:	cmp	w8, w9
  403750:	b.ne	403798 <print_condition+0x828>  // b.any
  403754:	ldr	x8, [x28]
  403758:	ldr	w2, [x8, #4]
  40375c:	cbz	w2, 4037dc <print_condition+0x86c>
  403760:	ldr	x1, [sp, #8]
  403764:	mov	x0, x19
  403768:	bl	4015b0 <fprintf@plt>
  40376c:	mov	x1, x27
  403770:	tbz	w21, #0, 40378c <print_condition+0x81c>
  403774:	ldr	x8, [x28, #16]
  403778:	ldr	x8, [x8, #8]
  40377c:	cmp	x8, #0x1
  403780:	adrp	x8, 404000 <extract_rules+0x224>
  403784:	add	x8, x8, #0x6f5
  403788:	csel	x1, x8, x27, eq  // eq = none
  40378c:	ldr	x8, [x22]
  403790:	mov	x0, x19
  403794:	b	4038bc <print_condition+0x94c>
  403798:	cbz	w8, 4037f4 <print_condition+0x884>
  40379c:	cmp	w20, #0x1
  4037a0:	b.eq	4037b4 <print_condition+0x844>  // b.none
  4037a4:	ldr	x8, [x28, #16]
  4037a8:	ldr	x8, [x8, #8]
  4037ac:	cmp	x8, #0x2
  4037b0:	b.cc	4037c0 <print_condition+0x850>  // b.lo, b.ul, b.last
  4037b4:	mov	w0, #0x28                  	// #40
  4037b8:	mov	x1, x19
  4037bc:	bl	401340 <fputc@plt>
  4037c0:	ldr	x8, [x28]
  4037c4:	ldr	w2, [x8, #4]
  4037c8:	cbz	w2, 403810 <print_condition+0x8a0>
  4037cc:	mov	x0, x19
  4037d0:	mov	x1, x25
  4037d4:	bl	4015b0 <fprintf@plt>
  4037d8:	b	40381c <print_condition+0x8ac>
  4037dc:	mov	w0, #0x6e                  	// #110
  4037e0:	mov	x1, x19
  4037e4:	bl	401340 <fputc@plt>
  4037e8:	mov	x1, x27
  4037ec:	tbz	w21, #0, 40378c <print_condition+0x81c>
  4037f0:	b	403774 <print_condition+0x804>
  4037f4:	ldr	x8, [x28]
  4037f8:	ldr	w2, [x8, #4]
  4037fc:	cbz	w2, 4038a4 <print_condition+0x934>
  403800:	mov	x0, x19
  403804:	mov	x1, x25
  403808:	bl	4015b0 <fprintf@plt>
  40380c:	b	4038b0 <print_condition+0x940>
  403810:	mov	w0, #0x6e                  	// #110
  403814:	mov	x1, x19
  403818:	bl	401340 <fputc@plt>
  40381c:	ldr	x8, [x22]
  403820:	adrp	x1, 404000 <extract_rules+0x224>
  403824:	mov	x0, x19
  403828:	add	x1, x1, #0x706
  40382c:	ldr	w2, [x8, #8]
  403830:	bl	4015b0 <fprintf@plt>
  403834:	adrp	x0, 404000 <extract_rules+0x224>
  403838:	mov	w1, #0x4                   	// #4
  40383c:	mov	w2, #0x1                   	// #1
  403840:	add	x0, x0, #0x6eb
  403844:	mov	x3, x19
  403848:	bl	401510 <fwrite@plt>
  40384c:	ldr	x8, [x28]
  403850:	ldr	w2, [x8, #4]
  403854:	cbz	w2, 403868 <print_condition+0x8f8>
  403858:	mov	x0, x19
  40385c:	mov	x1, x25
  403860:	bl	4015b0 <fprintf@plt>
  403864:	b	403874 <print_condition+0x904>
  403868:	mov	w0, #0x6e                  	// #110
  40386c:	mov	x1, x19
  403870:	bl	401340 <fputc@plt>
  403874:	ldr	x8, [x22, #8]
  403878:	mov	x0, x19
  40387c:	mov	x1, x24
  403880:	ldr	w2, [x8, #8]
  403884:	bl	4015b0 <fprintf@plt>
  403888:	cmp	w20, #0x1
  40388c:	b.eq	403704 <print_condition+0x794>  // b.none
  403890:	ldr	x8, [x28, #16]
  403894:	ldr	x8, [x8, #8]
  403898:	cmp	x8, #0x2
  40389c:	b.cc	403710 <print_condition+0x7a0>  // b.lo, b.ul, b.last
  4038a0:	b	403704 <print_condition+0x794>
  4038a4:	mov	w0, #0x6e                  	// #110
  4038a8:	mov	x1, x19
  4038ac:	bl	401340 <fputc@plt>
  4038b0:	ldr	x8, [x22, #8]
  4038b4:	mov	x0, x19
  4038b8:	mov	x1, x24
  4038bc:	ldr	w2, [x8, #8]
  4038c0:	bl	4015b0 <fprintf@plt>
  4038c4:	b	403710 <print_condition+0x7a0>
  4038c8:	mov	w0, #0x1                   	// #1
  4038cc:	cbnz	w20, 4038e8 <print_condition+0x978>
  4038d0:	cmp	x9, #0x2
  4038d4:	b.cc	4038e8 <print_condition+0x978>  // b.lo, b.ul, b.last
  4038d8:	mov	w0, #0x29                  	// #41
  4038dc:	mov	x1, x19
  4038e0:	bl	401340 <fputc@plt>
  4038e4:	mov	w0, #0x1                   	// #1
  4038e8:	ldp	x20, x19, [sp, #96]
  4038ec:	ldp	x22, x21, [sp, #80]
  4038f0:	ldp	x24, x23, [sp, #64]
  4038f4:	ldp	x26, x25, [sp, #48]
  4038f8:	ldp	x28, x27, [sp, #32]
  4038fc:	ldp	x29, x30, [sp, #16]
  403900:	add	sp, sp, #0x70
  403904:	ret

0000000000403908 <main>:
  403908:	sub	sp, sp, #0x60
  40390c:	stp	x29, x30, [sp, #16]
  403910:	stp	x24, x23, [sp, #48]
  403914:	stp	x22, x21, [sp, #64]
  403918:	stp	x20, x19, [sp, #80]
  40391c:	ldr	x8, [x1]
  403920:	mov	w20, w0
  403924:	str	x25, [sp, #32]
  403928:	add	x29, sp, #0x10
  40392c:	mov	x0, x8
  403930:	mov	x19, x1
  403934:	bl	4012f0 <set_program_name@plt>
  403938:	adrp	x1, 404000 <extract_rules+0x224>
  40393c:	add	x1, x1, #0x940
  403940:	mov	w0, #0x6                   	// #6
  403944:	bl	4015c0 <setlocale@plt>
  403948:	adrp	x21, 404000 <extract_rules+0x224>
  40394c:	adrp	x22, 404000 <extract_rules+0x224>
  403950:	add	x21, x21, #0x72d
  403954:	add	x22, x22, #0x73b
  403958:	mov	x0, x21
  40395c:	mov	x1, x22
  403960:	bl	4013d0 <bindtextdomain@plt>
  403964:	adrp	x0, 404000 <extract_rules+0x224>
  403968:	add	x0, x0, #0x5df
  40396c:	mov	x1, x22
  403970:	bl	4013d0 <bindtextdomain@plt>
  403974:	mov	x0, x21
  403978:	bl	4014b0 <textdomain@plt>
  40397c:	adrp	x0, 401000 <_init-0x270>
  403980:	add	x0, x0, #0x430
  403984:	bl	4042f8 <atexit>
  403988:	adrp	x21, 404000 <extract_rules+0x224>
  40398c:	adrp	x22, 404000 <extract_rules+0x224>
  403990:	mov	w25, wzr
  403994:	mov	w24, wzr
  403998:	mov	w23, wzr
  40399c:	add	x21, x21, #0x74d
  4039a0:	add	x22, x22, #0xcd8
  4039a4:	mov	w0, w20
  4039a8:	mov	x1, x19
  4039ac:	mov	x2, x21
  4039b0:	mov	x3, x22
  4039b4:	mov	x4, xzr
  4039b8:	bl	4014c0 <getopt_long@plt>
  4039bc:	cmp	w0, #0x55
  4039c0:	b.le	4039dc <main+0xd4>
  4039c4:	cmp	w0, #0x56
  4039c8:	b.eq	4039ec <main+0xe4>  // b.none
  4039cc:	cmp	w0, #0x63
  4039d0:	b.ne	4039f4 <main+0xec>  // b.any
  4039d4:	mov	w23, #0x1                   	// #1
  4039d8:	b	4039a4 <main+0x9c>
  4039dc:	cmn	w0, #0x1
  4039e0:	b.eq	403a04 <main+0xfc>  // b.none
  4039e4:	cbz	w0, 4039a4 <main+0x9c>
  4039e8:	b	403c0c <main+0x304>
  4039ec:	mov	w24, #0x1                   	// #1
  4039f0:	b	4039a4 <main+0x9c>
  4039f4:	cmp	w0, #0x68
  4039f8:	b.ne	403c0c <main+0x304>  // b.any
  4039fc:	mov	w25, #0x1                   	// #1
  403a00:	b	4039a4 <main+0x9c>
  403a04:	tbnz	w24, #0, 403c14 <main+0x30c>
  403a08:	tbnz	w25, #0, 403ca0 <main+0x398>
  403a0c:	adrp	x21, 416000 <memcpy@GLIBC_2.17>
  403a10:	ldrsw	x8, [x21, #424]
  403a14:	add	w9, w8, #0x2
  403a18:	cmp	w9, w20
  403a1c:	b.ne	403a54 <main+0x14c>  // b.any
  403a20:	ldr	x20, [x19, x8, lsl #3]
  403a24:	add	w8, w8, #0x1
  403a28:	ldr	x19, [x19, w8, sxtw #3]
  403a2c:	mov	w0, #0x51ad                	// #20909
  403a30:	bl	4013b0 <xmlCheckVersion@plt>
  403a34:	adrp	x1, 404000 <extract_rules+0x224>
  403a38:	add	x1, x1, #0x8e2
  403a3c:	mov	x0, x19
  403a40:	bl	401370 <fopen@plt>
  403a44:	mov	x21, x0
  403a48:	cbz	x0, 403b1c <main+0x214>
  403a4c:	mov	x0, x21
  403a50:	b	403b44 <main+0x23c>
  403a54:	cmp	w8, w20
  403a58:	b.ne	403ae4 <main+0x1dc>  // b.any
  403a5c:	adrp	x20, 416000 <memcpy@GLIBC_2.17>
  403a60:	ldr	x3, [x20, #440]
  403a64:	add	x0, x29, #0x18
  403a68:	add	x1, sp, #0x8
  403a6c:	mov	w2, #0xa                   	// #10
  403a70:	str	xzr, [x29, #24]
  403a74:	str	xzr, [sp, #8]
  403a78:	bl	401590 <__getdelim@plt>
  403a7c:	tbnz	w0, #31, 403b14 <main+0x20c>
  403a80:	adrp	x21, 416000 <memcpy@GLIBC_2.17>
  403a84:	b	403aa0 <main+0x198>
  403a88:	ldr	x3, [x20, #440]
  403a8c:	add	x0, x29, #0x18
  403a90:	add	x1, sp, #0x8
  403a94:	mov	w2, #0xa                   	// #10
  403a98:	bl	401590 <__getdelim@plt>
  403a9c:	tbnz	w0, #31, 403b14 <main+0x20c>
  403aa0:	cbz	w0, 403ac0 <main+0x1b8>
  403aa4:	ldr	x8, [x29, #24]
  403aa8:	sub	w9, w0, #0x1
  403aac:	sxtw	x9, w9
  403ab0:	ldrb	w10, [x8, x9]
  403ab4:	cmp	w10, #0xa
  403ab8:	b.ne	403ac0 <main+0x1b8>  // b.any
  403abc:	strb	wzr, [x8, x9]
  403ac0:	ldr	x0, [x29, #24]
  403ac4:	bl	402454 <cldr_plural_parse>
  403ac8:	cbz	x0, 403a88 <main+0x180>
  403acc:	ldr	x1, [x21, #432]
  403ad0:	mov	x19, x0
  403ad4:	bl	4024b0 <cldr_plural_rule_list_print>
  403ad8:	mov	x0, x19
  403adc:	bl	4023f4 <cldr_plural_rule_list_free>
  403ae0:	b	403a88 <main+0x180>
  403ae4:	adrp	x1, 404000 <extract_rules+0x224>
  403ae8:	add	x1, x1, #0x8ce
  403aec:	mov	w2, #0x5                   	// #5
  403af0:	mov	x0, xzr
  403af4:	bl	401530 <dcgettext@plt>
  403af8:	ldrsw	x8, [x21, #424]
  403afc:	mov	x2, x0
  403b00:	mov	w0, #0x1                   	// #1
  403b04:	mov	w1, wzr
  403b08:	ldr	x3, [x19, x8, lsl #3]
  403b0c:	bl	4012e0 <error@plt>
  403b10:	b	403bec <main+0x2e4>
  403b14:	ldr	x0, [x29, #24]
  403b18:	b	403be8 <main+0x2e0>
  403b1c:	adrp	x1, 404000 <extract_rules+0x224>
  403b20:	add	x1, x1, #0x889
  403b24:	mov	w2, #0x5                   	// #5
  403b28:	bl	401530 <dcgettext@plt>
  403b2c:	mov	x2, x0
  403b30:	mov	w0, #0x1                   	// #1
  403b34:	mov	w1, wzr
  403b38:	mov	x3, x19
  403b3c:	bl	4012e0 <error@plt>
  403b40:	mov	x0, xzr
  403b44:	mov	x1, x19
  403b48:	mov	x2, x20
  403b4c:	bl	403ddc <extract_rules>
  403b50:	mov	x19, x0
  403b54:	mov	x0, x21
  403b58:	bl	401360 <fclose@plt>
  403b5c:	cbz	x19, 403b70 <main+0x268>
  403b60:	mov	x0, x19
  403b64:	tbz	w23, #0, 403ba0 <main+0x298>
  403b68:	bl	4014a0 <puts@plt>
  403b6c:	b	403be4 <main+0x2dc>
  403b70:	adrp	x1, 404000 <extract_rules+0x224>
  403b74:	add	x1, x1, #0x89b
  403b78:	mov	w2, #0x5                   	// #5
  403b7c:	mov	x0, xzr
  403b80:	bl	401530 <dcgettext@plt>
  403b84:	mov	x2, x0
  403b88:	mov	w0, #0x1                   	// #1
  403b8c:	mov	w1, wzr
  403b90:	mov	x3, x20
  403b94:	bl	4012e0 <error@plt>
  403b98:	mov	x0, x19
  403b9c:	tbnz	w23, #0, 403b68 <main+0x260>
  403ba0:	bl	402454 <cldr_plural_parse>
  403ba4:	mov	x20, x0
  403ba8:	cbnz	x0, 403bcc <main+0x2c4>
  403bac:	adrp	x1, 404000 <extract_rules+0x224>
  403bb0:	add	x1, x1, #0x8b7
  403bb4:	mov	w2, #0x5                   	// #5
  403bb8:	bl	401530 <dcgettext@plt>
  403bbc:	mov	x2, x0
  403bc0:	mov	w0, #0x1                   	// #1
  403bc4:	mov	w1, wzr
  403bc8:	bl	4012e0 <error@plt>
  403bcc:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  403bd0:	ldr	x1, [x8, #432]
  403bd4:	mov	x0, x20
  403bd8:	bl	4024b0 <cldr_plural_rule_list_print>
  403bdc:	mov	x0, x20
  403be0:	bl	4023f4 <cldr_plural_rule_list_free>
  403be4:	mov	x0, x19
  403be8:	bl	401500 <free@plt>
  403bec:	ldp	x20, x19, [sp, #80]
  403bf0:	ldp	x22, x21, [sp, #64]
  403bf4:	ldp	x24, x23, [sp, #48]
  403bf8:	ldr	x25, [sp, #32]
  403bfc:	ldp	x29, x30, [sp, #16]
  403c00:	mov	w0, wzr
  403c04:	add	sp, sp, #0x60
  403c08:	ret
  403c0c:	mov	w0, #0x1                   	// #1
  403c10:	bl	403ca8 <usage>
  403c14:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  403c18:	ldr	x0, [x8, #448]
  403c1c:	bl	4014e0 <basename@plt>
  403c20:	mov	x1, x0
  403c24:	adrp	x0, 404000 <extract_rules+0x224>
  403c28:	adrp	x2, 404000 <extract_rules+0x224>
  403c2c:	adrp	x3, 404000 <extract_rules+0x224>
  403c30:	add	x0, x0, #0x751
  403c34:	add	x2, x2, #0x72d
  403c38:	add	x3, x3, #0x761
  403c3c:	bl	401550 <printf@plt>
  403c40:	adrp	x1, 404000 <extract_rules+0x224>
  403c44:	add	x1, x1, #0x768
  403c48:	mov	w2, #0x5                   	// #5
  403c4c:	mov	x0, xzr
  403c50:	bl	401530 <dcgettext@plt>
  403c54:	adrp	x1, 404000 <extract_rules+0x224>
  403c58:	adrp	x2, 404000 <extract_rules+0x224>
  403c5c:	add	x1, x1, #0x842
  403c60:	add	x2, x2, #0x84c
  403c64:	bl	401550 <printf@plt>
  403c68:	adrp	x1, 404000 <extract_rules+0x224>
  403c6c:	add	x1, x1, #0x86e
  403c70:	mov	w2, #0x5                   	// #5
  403c74:	mov	x0, xzr
  403c78:	bl	401530 <dcgettext@plt>
  403c7c:	mov	x19, x0
  403c80:	adrp	x0, 404000 <extract_rules+0x224>
  403c84:	add	x0, x0, #0x87e
  403c88:	bl	4014f0 <proper_name@plt>
  403c8c:	mov	x1, x0
  403c90:	mov	x0, x19
  403c94:	bl	401550 <printf@plt>
  403c98:	mov	w0, wzr
  403c9c:	bl	4012d0 <exit@plt>
  403ca0:	mov	w0, wzr
  403ca4:	bl	403ca8 <usage>

0000000000403ca8 <usage>:
  403ca8:	stp	x29, x30, [sp, #-32]!
  403cac:	stp	x20, x19, [sp, #16]
  403cb0:	mov	w19, w0
  403cb4:	mov	x29, sp
  403cb8:	cbnz	w0, 403da4 <usage+0xfc>
  403cbc:	adrp	x1, 404000 <extract_rules+0x224>
  403cc0:	add	x1, x1, #0x918
  403cc4:	mov	w2, #0x5                   	// #5
  403cc8:	mov	x0, xzr
  403ccc:	bl	401530 <dcgettext@plt>
  403cd0:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  403cd4:	ldr	x1, [x8, #448]
  403cd8:	bl	401550 <printf@plt>
  403cdc:	mov	w0, #0xa                   	// #10
  403ce0:	bl	401580 <putchar@plt>
  403ce4:	adrp	x1, 404000 <extract_rules+0x224>
  403ce8:	add	x1, x1, #0x941
  403cec:	mov	w2, #0x5                   	// #5
  403cf0:	mov	x0, xzr
  403cf4:	bl	401530 <dcgettext@plt>
  403cf8:	bl	401550 <printf@plt>
  403cfc:	mov	w0, #0xa                   	// #10
  403d00:	bl	401580 <putchar@plt>
  403d04:	adrp	x1, 404000 <extract_rules+0x224>
  403d08:	add	x1, x1, #0xa4a
  403d0c:	mov	w2, #0x5                   	// #5
  403d10:	mov	x0, xzr
  403d14:	bl	401530 <dcgettext@plt>
  403d18:	bl	401550 <printf@plt>
  403d1c:	mov	w0, #0xa                   	// #10
  403d20:	bl	401580 <putchar@plt>
  403d24:	adrp	x1, 404000 <extract_rules+0x224>
  403d28:	add	x1, x1, #0xab6
  403d2c:	mov	w2, #0x5                   	// #5
  403d30:	mov	x0, xzr
  403d34:	bl	401530 <dcgettext@plt>
  403d38:	bl	401550 <printf@plt>
  403d3c:	adrp	x1, 404000 <extract_rules+0x224>
  403d40:	add	x1, x1, #0xafb
  403d44:	mov	w2, #0x5                   	// #5
  403d48:	mov	x0, xzr
  403d4c:	bl	401530 <dcgettext@plt>
  403d50:	bl	401550 <printf@plt>
  403d54:	adrp	x1, 404000 <extract_rules+0x224>
  403d58:	add	x1, x1, #0xb35
  403d5c:	mov	w2, #0x5                   	// #5
  403d60:	mov	x0, xzr
  403d64:	bl	401530 <dcgettext@plt>
  403d68:	bl	401550 <printf@plt>
  403d6c:	mov	w0, #0xa                   	// #10
  403d70:	bl	401580 <putchar@plt>
  403d74:	adrp	x1, 404000 <extract_rules+0x224>
  403d78:	add	x1, x1, #0xb78
  403d7c:	mov	w2, #0x5                   	// #5
  403d80:	mov	x0, xzr
  403d84:	bl	401530 <dcgettext@plt>
  403d88:	adrp	x1, 404000 <extract_rules+0x224>
  403d8c:	adrp	x2, 404000 <extract_rules+0x224>
  403d90:	add	x1, x1, #0xbb5
  403d94:	add	x2, x2, #0xbdf
  403d98:	bl	401550 <printf@plt>
  403d9c:	mov	w0, w19
  403da0:	bl	4012d0 <exit@plt>
  403da4:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  403da8:	ldr	x20, [x8, #416]
  403dac:	adrp	x1, 404000 <extract_rules+0x224>
  403db0:	add	x1, x1, #0x8f1
  403db4:	mov	w2, #0x5                   	// #5
  403db8:	mov	x0, xzr
  403dbc:	bl	401530 <dcgettext@plt>
  403dc0:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  403dc4:	ldr	x2, [x8, #448]
  403dc8:	mov	x1, x0
  403dcc:	mov	x0, x20
  403dd0:	bl	4015b0 <fprintf@plt>
  403dd4:	mov	w0, w19
  403dd8:	bl	4012d0 <exit@plt>

0000000000403ddc <extract_rules>:
  403ddc:	sub	sp, sp, #0x80
  403de0:	stp	x29, x30, [sp, #32]
  403de4:	stp	x28, x27, [sp, #48]
  403de8:	stp	x26, x25, [sp, #64]
  403dec:	stp	x24, x23, [sp, #80]
  403df0:	stp	x22, x21, [sp, #96]
  403df4:	stp	x20, x19, [sp, #112]
  403df8:	add	x29, sp, #0x20
  403dfc:	mov	x21, x2
  403e00:	mov	x20, x1
  403e04:	bl	401350 <fileno@plt>
  403e08:	mov	w3, #0x940                 	// #2368
  403e0c:	mov	x1, x20
  403e10:	mov	x2, xzr
  403e14:	bl	401450 <xmlReadFd@plt>
  403e18:	mov	x19, x0
  403e1c:	cbz	x0, 403e34 <extract_rules+0x58>
  403e20:	mov	x0, x19
  403e24:	bl	401570 <xmlDocGetRootElement@plt>
  403e28:	mov	x22, x0
  403e2c:	cbnz	x0, 403e68 <extract_rules+0x8c>
  403e30:	b	403ee8 <extract_rules+0x10c>
  403e34:	adrp	x1, 404000 <extract_rules+0x224>
  403e38:	add	x1, x1, #0xbf3
  403e3c:	mov	w2, #0x5                   	// #5
  403e40:	bl	401530 <dcgettext@plt>
  403e44:	mov	x2, x0
  403e48:	mov	w0, #0x1                   	// #1
  403e4c:	mov	w1, wzr
  403e50:	mov	x3, x20
  403e54:	bl	4012e0 <error@plt>
  403e58:	mov	x0, x19
  403e5c:	bl	401570 <xmlDocGetRootElement@plt>
  403e60:	mov	x22, x0
  403e64:	cbz	x0, 403ee8 <extract_rules+0x10c>
  403e68:	ldr	x0, [x22, #16]
  403e6c:	adrp	x1, 404000 <extract_rules+0x224>
  403e70:	add	x1, x1, #0xc12
  403e74:	bl	401560 <xmlStrEqual@plt>
  403e78:	cbz	w0, 403ee8 <extract_rules+0x10c>
  403e7c:	ldr	x23, [x22, #24]
  403e80:	cbz	x23, 403f2c <extract_rules+0x150>
  403e84:	adrp	x22, 404000 <extract_rules+0x224>
  403e88:	add	x22, x22, #0xc41
  403e8c:	b	403e98 <extract_rules+0xbc>
  403e90:	ldr	x23, [x23, #48]
  403e94:	cbz	x23, 403f2c <extract_rules+0x150>
  403e98:	ldr	w8, [x23, #8]
  403e9c:	cmp	w8, #0x1
  403ea0:	b.ne	403e90 <extract_rules+0xb4>  // b.any
  403ea4:	ldr	x0, [x23, #16]
  403ea8:	mov	x1, x22
  403eac:	bl	401560 <xmlStrEqual@plt>
  403eb0:	cbz	w0, 403e90 <extract_rules+0xb4>
  403eb4:	mov	x0, x21
  403eb8:	bl	4012c0 <strlen@plt>
  403ebc:	ldr	x23, [x23, #24]
  403ec0:	cbz	x23, 403f60 <extract_rules+0x184>
  403ec4:	adrp	x27, 404000 <extract_rules+0x224>
  403ec8:	adrp	x25, 404000 <extract_rules+0x224>
  403ecc:	mov	x24, x0
  403ed0:	mov	x22, xzr
  403ed4:	mov	x26, xzr
  403ed8:	add	x27, x27, #0xc7a
  403edc:	add	x25, x25, #0xc86
  403ee0:	stur	xzr, [x29, #-8]
  403ee4:	b	403fe0 <extract_rules+0x204>
  403ee8:	mov	x0, x22
  403eec:	bl	401520 <xmlGetLineNo@plt>
  403ef0:	adrp	x1, 404000 <extract_rules+0x224>
  403ef4:	mov	x21, x0
  403ef8:	add	x1, x1, #0xc23
  403efc:	mov	w2, #0x5                   	// #5
  403f00:	mov	x0, xzr
  403f04:	bl	401530 <dcgettext@plt>
  403f08:	adrp	x5, 404000 <extract_rules+0x224>
  403f0c:	mov	x4, x0
  403f10:	add	x5, x5, #0xc12
  403f14:	mov	w0, wzr
  403f18:	mov	w1, wzr
  403f1c:	mov	x2, x20
  403f20:	mov	w3, w21
  403f24:	bl	4015a0 <error_at_line@plt>
  403f28:	b	403f60 <extract_rules+0x184>
  403f2c:	adrp	x1, 404000 <extract_rules+0x224>
  403f30:	add	x1, x1, #0xc49
  403f34:	mov	w2, #0x5                   	// #5
  403f38:	mov	x0, xzr
  403f3c:	bl	401530 <dcgettext@plt>
  403f40:	adrp	x3, 404000 <extract_rules+0x224>
  403f44:	adrp	x4, 404000 <extract_rules+0x224>
  403f48:	mov	x2, x0
  403f4c:	add	x3, x3, #0xc12
  403f50:	add	x4, x4, #0xc41
  403f54:	mov	w0, wzr
  403f58:	mov	w1, wzr
  403f5c:	bl	4012e0 <error@plt>
  403f60:	mov	x22, xzr
  403f64:	mov	x0, x19
  403f68:	bl	401320 <xmlFreeDoc@plt>
  403f6c:	mov	x0, x22
  403f70:	ldp	x20, x19, [sp, #112]
  403f74:	ldp	x22, x21, [sp, #96]
  403f78:	ldp	x24, x23, [sp, #80]
  403f7c:	ldp	x26, x25, [sp, #64]
  403f80:	ldp	x28, x27, [sp, #48]
  403f84:	ldp	x29, x30, [sp, #32]
  403f88:	add	sp, sp, #0x80
  403f8c:	ret
  403f90:	mov	x0, x23
  403f94:	bl	401520 <xmlGetLineNo@plt>
  403f98:	adrp	x1, 404000 <extract_rules+0x224>
  403f9c:	mov	x25, x0
  403fa0:	mov	w2, #0x5                   	// #5
  403fa4:	mov	x0, xzr
  403fa8:	add	x1, x1, #0xc8e
  403fac:	bl	401530 <dcgettext@plt>
  403fb0:	mov	w3, w25
  403fb4:	adrp	x25, 404000 <extract_rules+0x224>
  403fb8:	add	x25, x25, #0xc86
  403fbc:	mov	x4, x0
  403fc0:	mov	w0, wzr
  403fc4:	mov	w1, wzr
  403fc8:	mov	x2, x20
  403fcc:	mov	x5, x27
  403fd0:	mov	x6, x25
  403fd4:	bl	4015a0 <error_at_line@plt>
  403fd8:	ldr	x23, [x23, #48]
  403fdc:	cbz	x23, 404250 <extract_rules+0x474>
  403fe0:	ldr	w8, [x23, #8]
  403fe4:	cmp	w8, #0x1
  403fe8:	b.ne	403fd8 <extract_rules+0x1fc>  // b.any
  403fec:	ldr	x0, [x23, #16]
  403ff0:	mov	x1, x27
  403ff4:	bl	401560 <xmlStrEqual@plt>
  403ff8:	cbz	w0, 403fd8 <extract_rules+0x1fc>
  403ffc:	mov	x0, x23
  404000:	mov	x1, x25
  404004:	bl	401300 <xmlHasProp@plt>
  404008:	cbz	x0, 403f90 <extract_rules+0x1b4>
  40400c:	mov	x0, x23
  404010:	mov	x1, x25
  404014:	bl	4013a0 <xmlGetProp@plt>
  404018:	ldrb	w8, [x0]
  40401c:	mov	x25, x0
  404020:	mov	x28, x0
  404024:	cbnz	w8, 404048 <extract_rules+0x26c>
  404028:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  40402c:	ldr	x8, [x8, #464]
  404030:	mov	x0, x25
  404034:	blr	x8
  404038:	adrp	x25, 404000 <extract_rules+0x224>
  40403c:	add	x25, x25, #0xc86
  404040:	b	403fd8 <extract_rules+0x1fc>
  404044:	ldrb	w8, [x28, #1]!
  404048:	and	w8, w8, #0xff
  40404c:	sub	w9, w8, #0x9
  404050:	cmp	w9, #0x5
  404054:	b.cc	404044 <extract_rules+0x268>  // b.lo, b.ul, b.last
  404058:	cmp	w8, #0x20
  40405c:	b.eq	404044 <extract_rules+0x268>  // b.none
  404060:	mov	x0, x28
  404064:	mov	x1, x21
  404068:	mov	w2, w24
  40406c:	bl	401540 <xmlStrncmp@plt>
  404070:	cbnz	w0, 404098 <extract_rules+0x2bc>
  404074:	ldrb	w8, [x28, x24]
  404078:	cmp	w8, #0x20
  40407c:	b.hi	404098 <extract_rules+0x2bc>  // b.pmore
  404080:	mov	w9, #0x1                   	// #1
  404084:	lsl	x8, x9, x8
  404088:	mov	x9, #0x3e01                	// #15873
  40408c:	movk	x9, #0x1, lsl #32
  404090:	tst	x8, x9
  404094:	b.ne	4040c8 <extract_rules+0x2ec>  // b.any
  404098:	ldrb	w8, [x28]
  40409c:	sub	w9, w8, #0x9
  4040a0:	cmp	w9, #0x5
  4040a4:	b.cc	404048 <extract_rules+0x26c>  // b.lo, b.ul, b.last
  4040a8:	cbz	w8, 404028 <extract_rules+0x24c>
  4040ac:	cmp	w8, #0x20
  4040b0:	b.eq	404048 <extract_rules+0x26c>  // b.none
  4040b4:	ldrb	w8, [x28, #1]!
  4040b8:	sub	w9, w8, #0x9
  4040bc:	cmp	w9, #0x5
  4040c0:	b.cs	4040a8 <extract_rules+0x2cc>  // b.hs, b.nlast
  4040c4:	b	404048 <extract_rules+0x26c>
  4040c8:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  4040cc:	ldr	x8, [x8, #464]
  4040d0:	mov	x0, x25
  4040d4:	blr	x8
  4040d8:	ldr	x28, [x23, #24]
  4040dc:	adrp	x25, 404000 <extract_rules+0x224>
  4040e0:	add	x25, x25, #0xc86
  4040e4:	cbnz	x28, 404168 <extract_rules+0x38c>
  4040e8:	b	403fd8 <extract_rules+0x1fc>
  4040ec:	lsl	x9, x26, #1
  4040f0:	cmp	x9, x8
  4040f4:	csel	x1, x8, x9, cc  // cc = lo, ul, last
  4040f8:	mov	x0, x22
  4040fc:	str	x1, [sp, #16]
  404100:	bl	401390 <xrealloc@plt>
  404104:	mov	x22, x0
  404108:	ldur	x8, [x29, #-8]
  40410c:	ldr	x27, [sp, #8]
  404110:	adrp	x1, 404000 <extract_rules+0x224>
  404114:	add	x1, x1, #0xccd
  404118:	add	x0, x22, x8
  40411c:	mov	x2, x27
  404120:	mov	x3, x25
  404124:	bl	401310 <sprintf@plt>
  404128:	adrp	x26, 416000 <memcpy@GLIBC_2.17>
  40412c:	ldr	x8, [x26, #464]
  404130:	mov	x0, x27
  404134:	blr	x8
  404138:	ldr	x8, [x26, #464]
  40413c:	mov	x0, x25
  404140:	blr	x8
  404144:	ldr	x8, [sp]
  404148:	ldr	x26, [sp, #16]
  40414c:	adrp	x27, 404000 <extract_rules+0x224>
  404150:	adrp	x25, 404000 <extract_rules+0x224>
  404154:	add	x27, x27, #0xc7a
  404158:	add	x25, x25, #0xc86
  40415c:	stur	x8, [x29, #-8]
  404160:	ldr	x28, [x28, #48]
  404164:	cbz	x28, 403fd8 <extract_rules+0x1fc>
  404168:	ldr	w8, [x28, #8]
  40416c:	cmp	w8, #0x1
  404170:	b.ne	404160 <extract_rules+0x384>  // b.any
  404174:	ldr	x0, [x28, #16]
  404178:	adrp	x1, 404000 <extract_rules+0x224>
  40417c:	add	x1, x1, #0xcbc
  404180:	bl	401560 <xmlStrEqual@plt>
  404184:	cbz	w0, 404160 <extract_rules+0x384>
  404188:	adrp	x25, 404000 <extract_rules+0x224>
  40418c:	add	x25, x25, #0xcc7
  404190:	mov	x0, x28
  404194:	mov	x1, x25
  404198:	bl	401300 <xmlHasProp@plt>
  40419c:	cbz	x0, 4041fc <extract_rules+0x420>
  4041a0:	mov	x0, x28
  4041a4:	mov	x1, x25
  4041a8:	bl	4013a0 <xmlGetProp@plt>
  4041ac:	mov	x27, x0
  4041b0:	mov	x0, x28
  4041b4:	bl	401440 <xmlNodeGetContent@plt>
  4041b8:	mov	x25, x0
  4041bc:	mov	x0, x27
  4041c0:	str	x27, [sp, #8]
  4041c4:	bl	401420 <xmlStrlen@plt>
  4041c8:	mov	w27, w0
  4041cc:	mov	x0, x25
  4041d0:	bl	401420 <xmlStrlen@plt>
  4041d4:	ldur	x8, [x29, #-8]
  4041d8:	add	x8, x8, w27, sxtw
  4041dc:	add	x9, x8, w0, sxtw
  4041e0:	add	x8, x9, #0x5
  4041e4:	cmp	x8, x26
  4041e8:	add	x9, x9, #0x4
  4041ec:	str	x9, [sp]
  4041f0:	b.hi	4040ec <extract_rules+0x310>  // b.pmore
  4041f4:	str	x26, [sp, #16]
  4041f8:	b	404108 <extract_rules+0x32c>
  4041fc:	mov	x0, x28
  404200:	bl	401520 <xmlGetLineNo@plt>
  404204:	adrp	x1, 404000 <extract_rules+0x224>
  404208:	mov	x28, x25
  40420c:	mov	x25, x0
  404210:	mov	w2, #0x5                   	// #5
  404214:	mov	x0, xzr
  404218:	add	x1, x1, #0xc8e
  40421c:	bl	401530 <dcgettext@plt>
  404220:	adrp	x5, 404000 <extract_rules+0x224>
  404224:	mov	x4, x0
  404228:	mov	w0, wzr
  40422c:	mov	w1, wzr
  404230:	mov	x2, x20
  404234:	mov	w3, w25
  404238:	add	x5, x5, #0xcbc
  40423c:	mov	x6, x28
  404240:	bl	4015a0 <error_at_line@plt>
  404244:	adrp	x25, 404000 <extract_rules+0x224>
  404248:	add	x25, x25, #0xc86
  40424c:	b	403fd8 <extract_rules+0x1fc>
  404250:	cbz	x22, 403f64 <extract_rules+0x188>
  404254:	mov	w1, #0x3b                  	// #59
  404258:	mov	x0, x22
  40425c:	bl	401460 <strrchr@plt>
  404260:	cbz	x0, 403f64 <extract_rules+0x188>
  404264:	strb	wzr, [x0]
  404268:	b	403f64 <extract_rules+0x188>
  40426c:	nop

0000000000404270 <__libc_csu_init>:
  404270:	stp	x29, x30, [sp, #-64]!
  404274:	mov	x29, sp
  404278:	stp	x19, x20, [sp, #16]
  40427c:	adrp	x20, 415000 <__FRAME_END__+0x1018c>
  404280:	add	x20, x20, #0xd80
  404284:	stp	x21, x22, [sp, #32]
  404288:	adrp	x21, 415000 <__FRAME_END__+0x1018c>
  40428c:	add	x21, x21, #0xd78
  404290:	sub	x20, x20, x21
  404294:	mov	w22, w0
  404298:	stp	x23, x24, [sp, #48]
  40429c:	mov	x23, x1
  4042a0:	mov	x24, x2
  4042a4:	bl	401270 <_init>
  4042a8:	cmp	xzr, x20, asr #3
  4042ac:	b.eq	4042d8 <__libc_csu_init+0x68>  // b.none
  4042b0:	asr	x20, x20, #3
  4042b4:	mov	x19, #0x0                   	// #0
  4042b8:	ldr	x3, [x21, x19, lsl #3]
  4042bc:	mov	x2, x24
  4042c0:	add	x19, x19, #0x1
  4042c4:	mov	x1, x23
  4042c8:	mov	w0, w22
  4042cc:	blr	x3
  4042d0:	cmp	x20, x19
  4042d4:	b.ne	4042b8 <__libc_csu_init+0x48>  // b.any
  4042d8:	ldp	x19, x20, [sp, #16]
  4042dc:	ldp	x21, x22, [sp, #32]
  4042e0:	ldp	x23, x24, [sp, #48]
  4042e4:	ldp	x29, x30, [sp], #64
  4042e8:	ret
  4042ec:	nop

00000000004042f0 <__libc_csu_fini>:
  4042f0:	ret
  4042f4:	nop

00000000004042f8 <atexit>:
  4042f8:	adrp	x2, 416000 <memcpy@GLIBC_2.17>
  4042fc:	mov	x1, #0x0                   	// #0
  404300:	ldr	x2, [x2, #408]
  404304:	b	401330 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000404308 <_fini>:
  404308:	stp	x29, x30, [sp, #-16]!
  40430c:	mov	x29, sp
  404310:	ldp	x29, x30, [sp], #16
  404314:	ret
